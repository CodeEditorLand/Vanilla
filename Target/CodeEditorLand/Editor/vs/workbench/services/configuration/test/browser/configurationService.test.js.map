{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/test/browser/configurationService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope, keyFromOverrideIdentifiers } from '../../../../../platform/configuration/common/configurationRegistry.js';\nimport { WorkspaceService } from '../../browser/configurationService.js';\nimport { ConfigurationEditingErrorCode } from '../../common/configurationEditing.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspaceFoldersChangeEvent, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from '../../../../../platform/workspace/common/workspace.js';\nimport { ConfigurationTarget, IConfigurationService, IConfigurationChangeEvent } from '../../../../../platform/configuration/common/configuration.js';\nimport { workbenchInstantiationService, RemoteFileSystemProvider, TestEnvironmentService, TestTextFileService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ITextFileService } from '../../../textfile/common/textfiles.js';\nimport { ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { TextModelResolverService } from '../../../textmodelResolver/common/textModelResolverService.js';\nimport { IJSONEditingService } from '../../common/jsonEditing.js';\nimport { JSONEditingService } from '../../common/jsonEditingService.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { joinPath, dirname, basename } from '../../../../../base/common/resources.js';\nimport { isLinux, isMacintosh } from '../../../../../base/common/platform.js';\nimport { IRemoteAgentService } from '../../../remote/common/remoteAgentService.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { IRemoteAgentEnvironment } from '../../../../../platform/remote/common/remoteAgentEnvironment.js';\nimport { APPLY_ALL_PROFILES_SETTING, IConfigurationCache } from '../../common/configuration.js';\nimport { SignService } from '../../../../../platform/sign/browser/signService.js';\nimport { FileUserDataProvider } from '../../../../../platform/userData/common/fileUserDataProvider.js';\nimport { IKeybindingEditingService, KeybindingsEditingService } from '../../../keybinding/common/keybindingEditing.js';\nimport { IWorkbenchEnvironmentService } from '../../../environment/common/environmentService.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { BrowserWorkbenchEnvironmentService, IBrowserWorkbenchEnvironmentService } from '../../../environment/browser/environmentService.js';\nimport { RemoteAgentService } from '../../../remote/browser/remoteAgentService.js';\nimport { RemoteAuthorityResolverService } from '../../../../../platform/remote/browser/remoteAuthorityResolverService.js';\nimport { hash } from '../../../../../base/common/hash.js';\nimport { TestProductService } from '../../../../test/common/workbenchTestServices.js';\nimport { IUserDataProfilesService, toUserDataProfile, UserDataProfilesService } from '../../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { NullPolicyService } from '../../../../../platform/policy/common/policy.js';\nimport { FilePolicyService } from '../../../../../platform/policy/common/filePolicyService.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { UserDataProfileService } from '../../../userDataProfile/common/userDataProfileService.js';\nimport { IUserDataProfileService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { TasksSchemaProperties } from '../../../../contrib/tasks/common/tasks.js';\nimport { RemoteSocketFactoryService } from '../../../../../platform/remote/common/remoteSocketFactoryService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nfunction convertToWorkspacePayload(folder: URI): ISingleFolderWorkspaceIdentifier {\n\treturn {\n\t\tid: hash(folder.toString()).toString(16),\n\t\turi: folder\n\t};\n}\n\nclass ConfigurationCache implements IConfigurationCache {\n\tneedsCaching(resource: URI): boolean { return false; }\n\tasync read(): Promise<string> { return ''; }\n\tasync write(): Promise<void> { }\n\tasync remove(): Promise<void> { }\n}\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nsuite('WorkspaceContextService - Folder', () => {\n\n\tconst folderName = 'Folder A';\n\tlet folder: URI;\n\tlet testObject: WorkspaceService;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tfolder = joinPath(ROOT, folderName);\n\t\tawait fileService.createFolder(folder);\n\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\tconst userDataProfileService = disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile));\n\t\ttestObject = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService,\n\t\t\tuserDataProfileService,\n\t\t\tuserDataProfilesService,\n\t\t\tfileService,\n\t\t\tdisposables.add(new RemoteAgentService(\n\t\t\t\tnew RemoteSocketFactoryService(),\n\t\t\t\tuserDataProfileService,\n\t\t\t\tenvironmentService,\n\t\t\t\tTestProductService,\n\t\t\t\tdisposables.add(new RemoteAuthorityResolverService(false, undefined, undefined, undefined, TestProductService, logService)),\n\t\t\t\tnew SignService(TestProductService), new NullLogService())),\n\t\t\turiIdentityService,\n\t\t\tnew NullLogService(),\n\t\t\tnew NullPolicyService()));\n\t\tawait (<WorkspaceService>testObject).initialize(convertToWorkspacePayload(folder));\n\t});\n\n\ttest('getWorkspace()', () => {\n\t\tconst actual = testObject.getWorkspace();\n\n\t\tassert.strictEqual(actual.folders.length, 1);\n\t\tassert.strictEqual(actual.folders[0].uri.path, folder.path);\n\t\tassert.strictEqual(actual.folders[0].name, folderName);\n\t\tassert.strictEqual(actual.folders[0].index, 0);\n\t\tassert.ok(!actual.configuration);\n\t});\n\n\ttest('getWorkbenchState()', () => {\n\t\tconst actual = testObject.getWorkbenchState();\n\n\t\tassert.strictEqual(actual, WorkbenchState.FOLDER);\n\t});\n\n\ttest('getWorkspaceFolder()', () => {\n\t\tconst actual = testObject.getWorkspaceFolder(joinPath(folder, 'a'));\n\n\t\tassert.strictEqual(actual, testObject.getWorkspace().folders[0]);\n\t});\n\n\ttest('getWorkspaceFolder() - queries in workspace folder', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst folder = joinPath(ROOT, folderName).with({ query: 'myquery=1' });\n\t\tawait fileService.createFolder(folder);\n\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\tconst userDataProfileService = disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile));\n\t\tconst testObject = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService,\n\t\t\tuserDataProfileService,\n\t\t\tuserDataProfilesService,\n\t\t\tfileService,\n\t\t\tdisposables.add(new RemoteAgentService(new RemoteSocketFactoryService(), userDataProfileService, environmentService, TestProductService, disposables.add(new RemoteAuthorityResolverService(false, undefined, undefined, undefined, TestProductService, logService)), new SignService(TestProductService), new NullLogService())),\n\t\t\turiIdentityService,\n\t\t\tnew NullLogService(),\n\t\t\tnew NullPolicyService()));\n\t\tawait (<WorkspaceService>testObject).initialize(convertToWorkspacePayload(folder));\n\n\t\tconst actual = testObject.getWorkspaceFolder(joinPath(folder, 'a'));\n\n\t\tassert.strictEqual(actual, testObject.getWorkspace().folders[0]);\n\t}));\n\n\ttest('getWorkspaceFolder() - queries in resource', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst folder = joinPath(ROOT, folderName);\n\t\tawait fileService.createFolder(folder);\n\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\tconst userDataProfileService = disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile));\n\t\tconst testObject = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService,\n\t\t\tuserDataProfileService,\n\t\t\tuserDataProfilesService,\n\t\t\tfileService,\n\t\t\tdisposables.add(new RemoteAgentService(new RemoteSocketFactoryService(), userDataProfileService, environmentService, TestProductService, disposables.add(new RemoteAuthorityResolverService(false, undefined, undefined, undefined, TestProductService, logService)), new SignService(TestProductService), new NullLogService())),\n\t\t\turiIdentityService,\n\t\t\tnew NullLogService(),\n\t\t\tnew NullPolicyService()));\n\t\tawait testObject.initialize(convertToWorkspacePayload(folder));\n\n\t\tconst actual = testObject.getWorkspaceFolder(joinPath(folder, 'a').with({ query: 'myquery=1' }));\n\n\t\tassert.strictEqual(actual, testObject.getWorkspace().folders[0]);\n\t}));\n\n\ttest('isCurrentWorkspace() => true', () => {\n\t\tassert.ok(testObject.isCurrentWorkspace(folder));\n\t});\n\n\ttest('isCurrentWorkspace() => false', () => {\n\t\tassert.ok(!testObject.isCurrentWorkspace(joinPath(dirname(folder), 'abc')));\n\t});\n\n\ttest('workspace is complete', () => testObject.getCompleteWorkspace());\n});\n\nsuite('WorkspaceContextService - Workspace', () => {\n\n\tlet testObject: WorkspaceService;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tconst folderA = joinPath(ROOT, 'a');\n\t\tconst folderB = joinPath(ROOT, 'b');\n\t\tconst configResource = joinPath(ROOT, 'vsctests.code-workspace');\n\t\tconst workspace = { folders: [{ path: folderA.path }, { path: folderB.path }] };\n\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tawait fileService.createFolder(folderA);\n\t\tawait fileService.createFolder(folderB);\n\t\tawait fileService.writeFile(configResource, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = disposables.add(disposables.add(instantiationService.createInstance(RemoteAgentService)));\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService)));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\ttestObject = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService,\n\t\t\tdisposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile)),\n\t\t\tuserDataProfilesService, fileService, remoteAgentService, uriIdentityService, new NullLogService(), new NullPolicyService()));\n\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\t\ttestObject.acquireInstantiationService(instantiationService);\n\t});\n\n\ttest('workspace folders', () => {\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 2);\n\t\tassert.strictEqual(basename(actual[0].uri), 'a');\n\t\tassert.strictEqual(basename(actual[1].uri), 'b');\n\t});\n\n\ttest('getWorkbenchState()', () => {\n\t\tconst actual = testObject.getWorkbenchState();\n\n\t\tassert.strictEqual(actual, WorkbenchState.WORKSPACE);\n\t});\n\n\n\ttest('workspace is complete', () => testObject.getCompleteWorkspace());\n\n});\n\nsuite('WorkspaceContextService - Workspace Editing', () => {\n\n\tlet testObject: WorkspaceService, fileService: IFileService;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tconst folderA = joinPath(ROOT, 'a');\n\t\tconst folderB = joinPath(ROOT, 'b');\n\t\tconst configResource = joinPath(ROOT, 'vsctests.code-workspace');\n\t\tconst workspace = { folders: [{ path: folderA.path }, { path: folderB.path }] };\n\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tawait fileService.createFolder(folderA);\n\t\tawait fileService.createFolder(folderB);\n\t\tawait fileService.writeFile(configResource, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = disposables.add(instantiationService.createInstance(RemoteAgentService));\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService)));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\ttestObject = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService,\n\t\t\tdisposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile)),\n\t\t\tuserDataProfilesService, fileService, remoteAgentService, uriIdentityService, new NullLogService(), new NullPolicyService()));\n\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\tinstantiationService.stub(IJSONEditingService, instantiationService.createInstance(JSONEditingService));\n\t\ttestObject.acquireInstantiationService(instantiationService);\n\t});\n\n\ttest('add folders', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.addFolders([{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }]);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 4);\n\t\tassert.strictEqual(basename(actual[0].uri), 'a');\n\t\tassert.strictEqual(basename(actual[1].uri), 'b');\n\t\tassert.strictEqual(basename(actual[2].uri), 'd');\n\t\tassert.strictEqual(basename(actual[3].uri), 'c');\n\t}));\n\n\ttest('add folders (at specific index)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.addFolders([{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }], 0);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 4);\n\t\tassert.strictEqual(basename(actual[0].uri), 'd');\n\t\tassert.strictEqual(basename(actual[1].uri), 'c');\n\t\tassert.strictEqual(basename(actual[2].uri), 'a');\n\t\tassert.strictEqual(basename(actual[3].uri), 'b');\n\t}));\n\n\ttest('add folders (at specific wrong index)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.addFolders([{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }], 10);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 4);\n\t\tassert.strictEqual(basename(actual[0].uri), 'a');\n\t\tassert.strictEqual(basename(actual[1].uri), 'b');\n\t\tassert.strictEqual(basename(actual[2].uri), 'd');\n\t\tassert.strictEqual(basename(actual[3].uri), 'c');\n\t}));\n\n\ttest('add folders (with name)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.addFolders([{ uri: joinPath(ROOT, 'd'), name: 'DDD' }, { uri: joinPath(ROOT, 'c'), name: 'CCC' }]);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 4);\n\t\tassert.strictEqual(basename(actual[0].uri), 'a');\n\t\tassert.strictEqual(basename(actual[1].uri), 'b');\n\t\tassert.strictEqual(basename(actual[2].uri), 'd');\n\t\tassert.strictEqual(basename(actual[3].uri), 'c');\n\t\tassert.strictEqual(actual[2].name, 'DDD');\n\t\tassert.strictEqual(actual[3].name, 'CCC');\n\t}));\n\n\ttest('add folders triggers change event', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\n\t\tconst addedFolders = [{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }];\n\t\tawait testObject.addFolders(addedFolders);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added.map(r => r.uri.toString()), addedFolders.map(a => a.uri.toString()));\n\t\tassert.deepStrictEqual(actual_1.removed, []);\n\t\tassert.deepStrictEqual(actual_1.changed, []);\n\t}));\n\n\ttest('remove folders', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.removeFolders([testObject.getWorkspace().folders[0].uri]);\n\t\tconst actual = testObject.getWorkspace().folders;\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(basename(actual[0].uri), 'b');\n\t}));\n\n\ttest('remove folders triggers change event', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tconst removedFolder = testObject.getWorkspace().folders[0];\n\t\tawait testObject.removeFolders([removedFolder.uri]);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added, []);\n\t\tassert.deepStrictEqual(actual_1.removed.map(r => r.uri.toString()), [removedFolder.uri.toString()]);\n\t\tassert.deepStrictEqual(actual_1.changed.map(c => c.uri.toString()), [testObject.getWorkspace().folders[0].uri.toString()]);\n\t}));\n\n\ttest('remove folders and add them back by writing into the file', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst folders = testObject.getWorkspace().folders;\n\t\tawait testObject.removeFolders([folders[0].uri]);\n\n\t\tconst promise = new Promise<void>((resolve, reject) => {\n\t\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(actual => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.deepStrictEqual(actual.added.map(r => r.uri.toString()), [folders[0].uri.toString()]);\n\t\t\t\t\tresolve();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tconst workspace = { folders: [{ path: folders[0].uri.path }, { path: folders[1].uri.path }] };\n\t\tawait fileService.writeFile(testObject.getWorkspace().configuration!, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\t\tawait promise;\n\t}));\n\n\ttest('update folders (remove last and add to end)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tconst addedFolders = [{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }];\n\t\tconst removedFolders = [testObject.getWorkspace().folders[1]].map(f => f.uri);\n\t\tawait testObject.updateFolders(addedFolders, removedFolders);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added.map(r => r.uri.toString()), addedFolders.map(a => a.uri.toString()));\n\t\tassert.deepStrictEqual(actual_1.removed.map(r_1 => r_1.uri.toString()), removedFolders.map(a_1 => a_1.toString()));\n\t\tassert.deepStrictEqual(actual_1.changed, []);\n\t}));\n\n\ttest('update folders (rename first via add and remove)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tconst addedFolders = [{ uri: joinPath(ROOT, 'a'), name: 'The Folder' }];\n\t\tconst removedFolders = [testObject.getWorkspace().folders[0]].map(f => f.uri);\n\t\tawait testObject.updateFolders(addedFolders, removedFolders, 0);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added, []);\n\t\tassert.deepStrictEqual(actual_1.removed, []);\n\t\tassert.deepStrictEqual(actual_1.changed.map(r => r.uri.toString()), removedFolders.map(a => a.toString()));\n\t}));\n\n\ttest('update folders (remove first and add to end)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tconst addedFolders = [{ uri: joinPath(ROOT, 'd') }, { uri: joinPath(ROOT, 'c') }];\n\t\tconst removedFolders = [testObject.getWorkspace().folders[0]].map(f => f.uri);\n\t\tconst changedFolders = [testObject.getWorkspace().folders[1]].map(f => f.uri);\n\t\tawait testObject.updateFolders(addedFolders, removedFolders);\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added.map(r => r.uri.toString()), addedFolders.map(a => a.uri.toString()));\n\t\tassert.deepStrictEqual(actual_1.removed.map(r_1 => r_1.uri.toString()), removedFolders.map(a_1 => a_1.toString()));\n\t\tassert.deepStrictEqual(actual_1.changed.map(r_2 => r_2.uri.toString()), changedFolders.map(a_2 => a_2.toString()));\n\t}));\n\n\ttest('reorder folders trigger change event', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tconst workspace = { folders: [{ path: testObject.getWorkspace().folders[1].uri.path }, { path: testObject.getWorkspace().folders[0].uri.path }] };\n\t\tawait fileService.writeFile(testObject.getWorkspace().configuration!, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added, []);\n\t\tassert.deepStrictEqual(actual_1.removed, []);\n\t\tassert.deepStrictEqual(actual_1.changed.map(c => c.uri.toString()), testObject.getWorkspace().folders.map(f => f.uri.toString()).reverse());\n\t}));\n\n\ttest('rename folders trigger change event', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tconst workspace = { folders: [{ path: testObject.getWorkspace().folders[0].uri.path, name: '1' }, { path: testObject.getWorkspace().folders[1].uri.path }] };\n\t\tfileService.writeFile(testObject.getWorkspace().configuration!, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(target.callCount, 2, `Should be called only once but called ${target.callCount} times`);\n\t\tconst actual_1 = (<IWorkspaceFoldersChangeEvent>target.args[1][0]);\n\t\tassert.deepStrictEqual(actual_1.added, []);\n\t\tassert.deepStrictEqual(actual_1.removed, []);\n\t\tassert.deepStrictEqual(actual_1.changed.map(c => c.uri.toString()), [testObject.getWorkspace().folders[0].uri.toString()]);\n\t}));\n\n});\n\nsuite('WorkspaceService - Initialization', () => {\n\n\tlet configResource: URI, testObject: WorkspaceService, fileService: IFileService, environmentService: BrowserWorkbenchEnvironmentService, userDataProfileService: IUserDataProfileService;\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'initialization.testSetting1': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'initialization.testSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tconst folderA = joinPath(ROOT, 'a');\n\t\tconst folderB = joinPath(ROOT, 'b');\n\t\tconfigResource = joinPath(ROOT, 'vsctests.code-workspace');\n\t\tconst workspace = { folders: [{ path: folderA.path }, { path: folderB.path }] };\n\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tawait fileService.createFolder(folderA);\n\t\tawait fileService.createFolder(folderB);\n\t\tawait fileService.writeFile(configResource, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tenvironmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = disposables.add(instantiationService.createInstance(RemoteAgentService));\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService)));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\tuserDataProfileService = instantiationService.stub(IUserDataProfileService, disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile)));\n\t\ttestObject = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService,\n\t\t\tuserDataProfileService,\n\t\t\tuserDataProfilesService, fileService, remoteAgentService, uriIdentityService, new NullLogService(), new NullPolicyService()));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait testObject.initialize({ id: '' });\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\ttestObject.acquireInstantiationService(instantiationService);\n\t});\n\n\t(isMacintosh ? test.skip : test)('initialize a folder workspace from an empty workspace with no configuration changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeWorkbenchState(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceName(target));\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\n\t\tconst folder = joinPath(ROOT, 'a');\n\t\tawait testObject.initialize(convertToWorkspacePayload(folder));\n\n\t\tassert.strictEqual(testObject.getValue('initialization.testSetting1'), 'userValue');\n\t\tassert.strictEqual(target.callCount, 4);\n\t\tassert.deepStrictEqual(target.args[0], [WorkbenchState.FOLDER]);\n\t\tassert.deepStrictEqual(target.args[1], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).added.map(f => f.uri.toString()), [folder.toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).changed, []);\n\n\t}));\n\n\t(isMacintosh ? test.skip : test)('initialize a folder workspace from an empty workspace with configuration changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeWorkbenchState(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceName(target));\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\n\t\tconst folder = joinPath(ROOT, 'a');\n\t\tawait fileService.writeFile(joinPath(folder, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting1\": \"workspaceValue\" }'));\n\t\tawait testObject.initialize(convertToWorkspacePayload(folder));\n\n\t\tassert.strictEqual(testObject.getValue('initialization.testSetting1'), 'workspaceValue');\n\t\tassert.strictEqual(target.callCount, 5);\n\t\tassert.deepStrictEqual([...(<IConfigurationChangeEvent>target.args[0][0]).affectedKeys], ['initialization.testSetting1']);\n\t\tassert.deepStrictEqual(target.args[1], [WorkbenchState.FOLDER]);\n\t\tassert.deepStrictEqual(target.args[2], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).added.map(f => f.uri.toString()), [folder.toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).changed, []);\n\n\t}));\n\n\t(isMacintosh ? test.skip : test)('initialize a multi root workspace from an empty workspace with no configuration changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeWorkbenchState(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceName(target));\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\n\t\tassert.strictEqual(target.callCount, 4);\n\t\tassert.deepStrictEqual(target.args[0], [WorkbenchState.WORKSPACE]);\n\t\tassert.deepStrictEqual(target.args[1], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).added.map(folder => folder.uri.toString()), [joinPath(ROOT, 'a').toString(), joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[3][0]).changed, []);\n\n\t}));\n\n\t(isMacintosh ? test.skip : test)('initialize a multi root workspace from an empty workspace with configuration changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeWorkbenchState(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceName(target));\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\n\t\tawait fileService.writeFile(joinPath(ROOT, 'a', '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting1\": \"workspaceValue1\" }'));\n\t\tawait fileService.writeFile(joinPath(ROOT, 'b', '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting2\": \"workspaceValue2\" }'));\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\n\t\tassert.strictEqual(target.callCount, 5);\n\t\tassert.deepStrictEqual([...(<IConfigurationChangeEvent>target.args[0][0]).affectedKeys], ['initialization.testSetting1', 'initialization.testSetting2']);\n\t\tassert.deepStrictEqual(target.args[1], [WorkbenchState.WORKSPACE]);\n\t\tassert.deepStrictEqual(target.args[2], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).added.map(folder => folder.uri.toString()), [joinPath(ROOT, 'a').toString(), joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).changed, []);\n\n\t}));\n\n\t(isMacintosh ? test.skip : test)('initialize a folder workspace from a folder workspace with no configuration changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'a')));\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"initialization.testSetting1\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeWorkbenchState(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceName(target));\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'b')));\n\n\t\tassert.strictEqual(testObject.getValue('initialization.testSetting1'), 'userValue');\n\t\tassert.strictEqual(target.callCount, 2);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[1][0]).added.map(folder_1 => folder_1.uri.toString()), [joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[1][0]).removed.map(folder_2 => folder_2.uri.toString()), [joinPath(ROOT, 'a').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[1][0]).changed, []);\n\n\t}));\n\n\t(isMacintosh ? test.skip : test)('initialize a folder workspace from a folder workspace with configuration changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'a')));\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeWorkbenchState(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceName(target));\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\n\t\tawait fileService.writeFile(joinPath(ROOT, 'b', '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting1\": \"workspaceValue2\" }'));\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'b')));\n\n\t\tassert.strictEqual(testObject.getValue('initialization.testSetting1'), 'workspaceValue2');\n\t\tassert.strictEqual(target.callCount, 3);\n\t\tassert.deepStrictEqual([...(<IConfigurationChangeEvent>target.args[0][0]).affectedKeys], ['initialization.testSetting1']);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[2][0]).added.map(folder_1 => folder_1.uri.toString()), [joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[2][0]).removed.map(folder_2 => folder_2.uri.toString()), [joinPath(ROOT, 'a').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[2][0]).changed, []);\n\n\t}));\n\n\t(isMacintosh ? test.skip : test)('initialize a multi folder workspace from a folder workspacce triggers change events in the right order', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'a')));\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeWorkbenchState(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceName(target));\n\t\tdisposables.add(testObject.onWillChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeWorkspaceFolders(target));\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\n\t\tawait fileService.writeFile(joinPath(ROOT, 'a', '.vscode', 'settings.json'), VSBuffer.fromString('{ \"initialization.testSetting1\": \"workspaceValue2\" }'));\n\t\tawait testObject.initialize(getWorkspaceIdentifier(configResource));\n\n\t\tassert.strictEqual(target.callCount, 5);\n\t\tassert.deepStrictEqual([...(<IConfigurationChangeEvent>target.args[0][0]).affectedKeys], ['initialization.testSetting1']);\n\t\tassert.deepStrictEqual(target.args[1], [WorkbenchState.WORKSPACE]);\n\t\tassert.deepStrictEqual(target.args[2], [undefined]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).added.map(folder_1 => folder_1.uri.toString()), [joinPath(ROOT, 'b').toString()]);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).removed, []);\n\t\tassert.deepStrictEqual((<IWorkspaceFoldersChangeEvent>target.args[4][0]).changed, []);\n\t}));\n\n});\n\nsuite('WorkspaceConfigurationService - Folder', () => {\n\n\tlet testObject: WorkspaceService, workspaceService: WorkspaceService, fileService: IFileService, environmentService: IBrowserWorkbenchEnvironmentService, userDataProfileService: IUserDataProfileService, instantiationService: TestInstantiationService;\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.applicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.machineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.machineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.languageSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.restrictedSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\trestricted: true\n\t\t\t\t},\n\t\t\t\t'configurationService.folder.policySetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tpolicy: {\n\t\t\t\t\t\tname: 'configurationService.folder.policySetting',\n\t\t\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\n\t\tconfigurationRegistry.registerDefaultConfigurations([{\n\t\t\toverrides: {\n\t\t\t\t'[jsonc]': {\n\t\t\t\t\t'configurationService.folder.languageSetting': 'languageValue'\n\t\t\t\t}\n\t\t\t}\n\t\t}]);\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst folder = joinPath(ROOT, 'a');\n\t\tawait fileService.createFolder(folder);\n\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tenvironmentService = TestEnvironmentService;\n\t\tenvironmentService.policyFile = joinPath(folder, 'policies.json');\n\t\tconst remoteAgentService = disposables.add(instantiationService.createInstance(RemoteAgentService));\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService)));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\tuserDataProfileService = instantiationService.stub(IUserDataProfileService, disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile)));\n\t\tworkspaceService = testObject = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService, userDataProfileService, userDataProfilesService,\n\t\t\tfileService, remoteAgentService, uriIdentityService, new NullLogService(),\n\t\t\tdisposables.add(new FilePolicyService(environmentService.policyFile, fileService, logService))));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait workspaceService.initialize(convertToWorkspacePayload(folder));\n\t\tinstantiationService.stub(IKeybindingEditingService, disposables.add(instantiationService.createInstance(KeybindingsEditingService)));\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, <ITextModelService>disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\tworkspaceService.acquireInstantiationService(instantiationService);\n\t});\n\n\ttest('defaults', () => {\n\t\tassert.deepStrictEqual(testObject.getValue('configurationService'), { 'folder': { 'applicationSetting': 'isSet', 'machineSetting': 'isSet', 'machineOverridableSetting': 'isSet', 'testSetting': 'isSet', 'languageSetting': 'isSet', 'restrictedSetting': 'isSet', 'policySetting': 'isSet' } });\n\t});\n\n\ttest('globals override defaults', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'userValue');\n\t}));\n\n\ttest('globals', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('testworkbench.editor.tabs'), true);\n\t}));\n\n\ttest('workspace settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"testworkbench.editor.icons\": true }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('testworkbench.editor.icons'), true);\n\t}));\n\n\ttest('workspace settings override user settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'workspaceValue');\n\t}));\n\n\ttest('machine overridable settings override user Settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineOverridableSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineOverridableSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineOverridableSetting'), 'workspaceValue');\n\t}));\n\n\ttest('workspace settings override user settings after defaults are registered ', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.newSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.newSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.newSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.newSetting'), 'workspaceValue');\n\t}));\n\n\ttest('machine overridable settings override user settings after defaults are registered ', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.newMachineOverridableSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.newMachineOverridableSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.newMachineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.newMachineOverridableSetting'), 'workspaceValue');\n\t}));\n\n\ttest('application settings are not read from workspace', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting'), 'userValue');\n\t}));\n\n\ttest('application settings are not read from workspace when workspace folder uri is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('machine settings are not read from workspace', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('machine settings are not read from workspace when workspace folder uri is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('get application scope settings are not loaded after defaults are registered', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting-2\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.applicationSetting-2\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-2'), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.applicationSetting-2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-2'), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-2'), 'userValue');\n\t}));\n\n\ttest('get application scope settings are not loaded after defaults are registered when workspace folder uri is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting-3\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.applicationSetting-3\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.applicationSetting-3': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('get machine scope settings are not loaded after defaults are registered', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting-2\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineSetting-2\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-2'), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.machineSetting-2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-2'), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-2'), 'userValue');\n\t}));\n\n\ttest('get machine scope settings are not loaded after defaults are registered when workspace folder uri is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting-3\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.machineSetting-3\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.folder.machineSetting-3': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting-3', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('policy value override all', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst result = await runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(environmentService.policyFile!, VSBuffer.fromString('{ \"configurationService.folder.policySetting\": \"policyValue\" }'));\n\t\t\treturn promise;\n\t\t});\n\t\tassert.deepStrictEqual([...result.affectedKeys], ['configurationService.folder.policySetting']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.policySetting'), 'policyValue');\n\t\tassert.strictEqual(testObject.inspect('configurationService.folder.policySetting').policyValue, 'policyValue');\n\t}));\n\n\ttest('policy settings when policy value is not set', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.policySetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.policySetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.policySetting'), 'workspaceValue');\n\t\tassert.strictEqual(testObject.inspect('configurationService.folder.policySetting').policyValue, undefined);\n\t}));\n\n\ttest('reload configuration emits events after global configuraiton changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.ok(target.called);\n\t}));\n\n\ttest('reload configuration emits events after workspace configuraiton changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.ok(target.called);\n\t}));\n\n\ttest('reload configuration should not emit event if no changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(() => { target(); }));\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.ok(!target.called);\n\t}));\n\n\ttest('inspect', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tlet actual = testObject.inspect('something.missing');\n\t\tassert.strictEqual(actual.defaultValue, undefined);\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, undefined);\n\n\t\tactual = testObject.inspect('configurationService.folder.testSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'isSet');\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.folder.testSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userValue');\n\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.folder.testSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'workspaceValue');\n\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'tasks.json'), VSBuffer.fromString('{ \"configurationService.tasks.testSetting\": \"tasksValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('tasks');\n\t\tassert.strictEqual(actual.defaultValue, undefined);\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.deepStrictEqual(actual.userValue, {});\n\t\tassert.deepStrictEqual(actual.workspaceValue, {\n\t\t\t\"configurationService\": {\n\t\t\t\t\"tasks\": {\n\t\t\t\t\t\"testSetting\": \"tasksValue\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.deepStrictEqual(actual.value, {\n\t\t\t\"configurationService\": {\n\t\t\t\t\"tasks\": {\n\t\t\t\t\t\"testSetting\": \"tasksValue\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}));\n\n\ttest('inspect restricted settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userRestrictedValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tlet actual = testObject.inspect('configurationService.folder.restrictedSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userRestrictedValue');\n\n\t\ttestObject.updateWorkspaceTrust(true);\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.folder.restrictedSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userRestrictedValue');\n\n\t\ttestObject.updateWorkspaceTrust(false);\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceRestrictedValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.folder.restrictedSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userRestrictedValue');\n\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'tasks.json'), VSBuffer.fromString('{ \"configurationService.tasks.testSetting\": \"tasksValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('tasks');\n\t\tassert.strictEqual(actual.defaultValue, undefined);\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.deepStrictEqual(actual.userValue, {});\n\t\tassert.deepStrictEqual(actual.workspaceValue, {\n\t\t\t\"configurationService\": {\n\t\t\t\t\"tasks\": {\n\t\t\t\t\t\"testSetting\": \"tasksValue\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.deepStrictEqual(actual.value, {\n\t\t\t\"configurationService\": {\n\t\t\t\t\"tasks\": {\n\t\t\t\t\t\"testSetting\": \"tasksValue\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\ttestObject.updateWorkspaceTrust(true);\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.folder.restrictedSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'workspaceRestrictedValue');\n\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'tasks.json'), VSBuffer.fromString('{ \"configurationService.tasks.testSetting\": \"tasksValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('tasks');\n\t\tassert.strictEqual(actual.defaultValue, undefined);\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.deepStrictEqual(actual.userValue, {});\n\t\tassert.deepStrictEqual(actual.workspaceValue, {\n\t\t\t\"configurationService\": {\n\t\t\t\t\"tasks\": {\n\t\t\t\t\t\"testSetting\": \"tasksValue\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.deepStrictEqual(actual.value, {\n\t\t\t\"configurationService\": {\n\t\t\t\t\"tasks\": {\n\t\t\t\t\t\"testSetting\": \"tasksValue\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}));\n\n\ttest('inspect restricted settings after change', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userRestrictedValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceRestrictedValue\" }'));\n\t\tconst event = await promise;\n\n\t\tconst actual = testObject.inspect('configurationService.folder.restrictedSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userRestrictedValue');\n\t\tassert.strictEqual(event.affectsConfiguration('configurationService.folder.restrictedSetting'), true);\n\t}));\n\n\ttest('keys', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tlet actual = testObject.keys();\n\t\tassert.ok(actual.default.indexOf('configurationService.folder.testSetting') !== -1);\n\t\tassert.deepStrictEqual(actual.user, []);\n\t\tassert.deepStrictEqual(actual.workspace, []);\n\t\tassert.deepStrictEqual(actual.workspaceFolder, []);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.keys();\n\t\tassert.ok(actual.default.indexOf('configurationService.folder.testSetting') !== -1);\n\t\tassert.deepStrictEqual(actual.user, ['configurationService.folder.testSetting']);\n\t\tassert.deepStrictEqual(actual.workspace, []);\n\t\tassert.deepStrictEqual(actual.workspaceFolder, []);\n\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.keys();\n\t\tassert.ok(actual.default.indexOf('configurationService.folder.testSetting') !== -1);\n\t\tassert.deepStrictEqual(actual.user, ['configurationService.folder.testSetting']);\n\t\tassert.deepStrictEqual(actual.workspace, ['configurationService.folder.testSetting']);\n\t\tassert.deepStrictEqual(actual.workspaceFolder, []);\n\t}));\n\n\ttest('update user configuration', () => {\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.USER)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'value'));\n\t});\n\n\ttest('update workspace configuration', () => {\n\t\treturn testObject.updateValue('tasks.service.testSetting', 'value', ConfigurationTarget.WORKSPACE)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue(TasksSchemaProperties.ServiceTestSetting), 'value'));\n\t});\n\n\ttest('update resource configuration', () => {\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'value', { resource: workspaceService.getWorkspace().folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'value'));\n\t});\n\n\ttest('update language configuration using configuration overrides', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.folder.languageSetting', 'abcLangValue', { overrideIdentifier: 'abclang' });\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { overrideIdentifier: 'abclang' }), 'abcLangValue');\n\t}));\n\n\ttest('update language configuration using configuration update overrides', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.folder.languageSetting', 'abcLangValue', { overrideIdentifiers: ['abclang'] });\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { overrideIdentifier: 'abclang' }), 'abcLangValue');\n\t}));\n\n\ttest('update language configuration for multiple languages', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.folder.languageSetting', 'multiLangValue', { overrideIdentifiers: ['xyzlang', 'deflang'] }, ConfigurationTarget.USER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { overrideIdentifier: 'deflang' }), 'multiLangValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { overrideIdentifier: 'xyzlang' }), 'multiLangValue');\n\t\tassert.deepStrictEqual(testObject.getValue(keyFromOverrideIdentifiers(['deflang', 'xyzlang'])), { 'configurationService.folder.languageSetting': 'multiLangValue' });\n\t}));\n\n\ttest('update language configuration for multiple languages when already set', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"[deflang][xyzlang]\": { \"configurationService.folder.languageSetting\": \"userValue\" }}'));\n\t\tawait testObject.updateValue('configurationService.folder.languageSetting', 'multiLangValue', { overrideIdentifiers: ['xyzlang', 'deflang'] }, ConfigurationTarget.USER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { overrideIdentifier: 'deflang' }), 'multiLangValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { overrideIdentifier: 'xyzlang' }), 'multiLangValue');\n\t\tassert.deepStrictEqual(testObject.getValue(keyFromOverrideIdentifiers(['deflang', 'xyzlang'])), { 'configurationService.folder.languageSetting': 'multiLangValue' });\n\t\tconst actualContent = (await fileService.readFile(userDataProfileService.currentProfile.settingsResource)).value.toString();\n\t\tassert.deepStrictEqual(JSON.parse(actualContent), { '[deflang][xyzlang]': { 'configurationService.folder.languageSetting': 'multiLangValue' } });\n\t}));\n\n\ttest('update resource language configuration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.folder.languageSetting', 'value', { resource: workspaceService.getWorkspace().folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting'), 'value');\n\t}));\n\n\ttest('update resource language configuration for a language using configuration overrides', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { resource: workspaceService.getWorkspace().folders[0].uri, overrideIdentifier: 'jsonc' }), 'languageValue');\n\t\tawait testObject.updateValue('configurationService.folder.languageSetting', 'languageValueUpdated', { resource: workspaceService.getWorkspace().folders[0].uri, overrideIdentifier: 'jsonc' }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { resource: workspaceService.getWorkspace().folders[0].uri, overrideIdentifier: 'jsonc' }), 'languageValueUpdated');\n\t}));\n\n\ttest('update resource language configuration for a language using configuration update overrides', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { resource: workspaceService.getWorkspace().folders[0].uri, overrideIdentifier: 'jsonc' }), 'languageValue');\n\t\tawait testObject.updateValue('configurationService.folder.languageSetting', 'languageValueUpdated', { resource: workspaceService.getWorkspace().folders[0].uri, overrideIdentifiers: ['jsonc'] }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.languageSetting', { resource: workspaceService.getWorkspace().folders[0].uri, overrideIdentifier: 'jsonc' }), 'languageValueUpdated');\n\t}));\n\n\ttest('update application setting into workspace configuration in a workspace is not supported', () => {\n\t\treturn testObject.updateValue('configurationService.folder.applicationSetting', 'workspaceValue', {}, ConfigurationTarget.WORKSPACE, { donotNotifyError: true })\n\t\t\t.then(() => assert.fail('Should not be supported'), (e) => assert.strictEqual(e.code, ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION));\n\t});\n\n\ttest('update machine setting into workspace configuration in a workspace is not supported', () => {\n\t\treturn testObject.updateValue('configurationService.folder.machineSetting', 'workspaceValue', {}, ConfigurationTarget.WORKSPACE, { donotNotifyError: true })\n\t\t\t.then(() => assert.fail('Should not be supported'), (e) => assert.strictEqual(e.code, ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE));\n\t});\n\n\ttest('update tasks configuration', () => {\n\t\treturn testObject.updateValue('tasks', { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] }, ConfigurationTarget.WORKSPACE)\n\t\t\t.then(() => assert.deepStrictEqual(testObject.getValue(TasksSchemaProperties.Tasks), { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] }));\n\t});\n\n\ttest('update user configuration should trigger change event before promise is resolve', () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.USER)\n\t\t\t.then(() => assert.ok(target.called));\n\t});\n\n\ttest('update workspace configuration should trigger change event before promise is resolve', () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.WORKSPACE)\n\t\t\t.then(() => assert.ok(target.called));\n\t});\n\n\ttest('update memory configuration', () => {\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'memoryValue', ConfigurationTarget.MEMORY)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'memoryValue'));\n\t});\n\n\ttest('update memory configuration should trigger change event before promise is resolve', () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\treturn testObject.updateValue('configurationService.folder.testSetting', 'memoryValue', ConfigurationTarget.MEMORY)\n\t\t\t.then(() => assert.ok(target.called));\n\t});\n\n\ttest('remove setting from all targets', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst key = 'configurationService.folder.testSetting';\n\t\tawait testObject.updateValue(key, 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\t\tawait testObject.updateValue(key, 'userValue', ConfigurationTarget.USER);\n\n\t\tawait testObject.updateValue(key, undefined);\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst actual = testObject.inspect(key, { resource: workspaceService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t}));\n\n\ttest('update user configuration to default value when target is not passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.USER);\n\t\tawait testObject.updateValue('configurationService.folder.testSetting', 'isSet');\n\t\tassert.strictEqual(testObject.inspect('configurationService.folder.testSetting').userValue, undefined);\n\t}));\n\n\ttest('update user configuration to default value when target is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.folder.testSetting', 'value', ConfigurationTarget.USER);\n\t\tawait testObject.updateValue('configurationService.folder.testSetting', 'isSet', ConfigurationTarget.USER);\n\t\tassert.strictEqual(testObject.inspect('configurationService.folder.testSetting').userValue, 'isSet');\n\t}));\n\n\ttest('update task configuration should trigger change event before promise is resolve', () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\treturn testObject.updateValue('tasks', { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] }, ConfigurationTarget.WORKSPACE)\n\t\t\t.then(() => assert.ok(target.called));\n\t});\n\n\ttest('no change event when there are no global tasks', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\tawait timeout(5);\n\t\tassert.ok(target.notCalled);\n\t}));\n\n\ttest('change event when there are global tasks', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(joinPath(environmentService.userRoamingDataHome, 'tasks.json'), VSBuffer.fromString('{ \"version\": \"1.0.0\", \"tasks\": [{ \"taskName\": \"myTask\" }'));\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait testObject.reloadLocalUserConfiguration();\n\t\tawait promise;\n\t}));\n\n\ttest('creating workspace settings', () => runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tawait new Promise<void>((c, e) => {\n\t\t\tconst disposable = testObject.onDidChangeConfiguration(e => {\n\t\t\t\tassert.ok(e.affectsConfiguration('configurationService.folder.testSetting'));\n\t\t\t\tassert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'workspaceValue');\n\t\t\t\tdisposable.dispose();\n\t\t\t\tc();\n\t\t\t});\n\t\t\tfileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }')).catch(e);\n\t\t});\n\t}));\n\n\ttest('deleting workspace settings', () => runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"userValue\" }'));\n\t\tconst workspaceSettingsResource = joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json');\n\t\tawait fileService.writeFile(workspaceSettingsResource, VSBuffer.fromString('{ \"configurationService.folder.testSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tconst e = await new Promise<IConfigurationChangeEvent>((c, e) => {\n\t\t\tEvent.once(testObject.onDidChangeConfiguration)(c);\n\t\t\tfileService.del(workspaceSettingsResource).catch(e);\n\t\t});\n\t\tassert.ok(e.affectsConfiguration('configurationService.folder.testSetting'));\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.testSetting'), 'userValue');\n\t}));\n\n\ttest('restricted setting is read from workspace when workspace is trusted', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.restrictedSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.folder.restrictedSetting']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(workspaceService.getWorkspace().folders[0].uri), ['configurationService.folder.restrictedSetting']);\n\t}));\n\n\ttest('restricted setting is not read from workspace when workspace is changed to trusted', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.restrictedSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.folder.restrictedSetting']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(workspaceService.getWorkspace().folders[0].uri), ['configurationService.folder.restrictedSetting']);\n\t}));\n\n\ttest('change event is triggered when workspace is changed to untrusted', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tconst event = await promise;\n\t\tassert.ok(event.affectedKeys.has('configurationService.folder.restrictedSetting'));\n\t\tassert.ok(event.affectsConfiguration('configurationService.folder.restrictedSetting'));\n\t}));\n\n\ttest('restricted setting is not read from workspace when workspace is not trusted', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.restrictedSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'userValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.folder.restrictedSetting']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(workspaceService.getWorkspace().folders[0].uri), ['configurationService.folder.restrictedSetting']);\n\t}));\n\n\ttest('restricted setting is read when workspace is changed to trusted', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.restrictedSetting', { resource: workspaceService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.folder.restrictedSetting'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.folder.restrictedSetting']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(workspaceService.getWorkspace().folders[0].uri), ['configurationService.folder.restrictedSetting']);\n\t}));\n\n\ttest('change event is triggered when workspace is changed to trusted', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tconst event = await promise;\n\t\tassert.ok(event.affectedKeys.has('configurationService.folder.restrictedSetting'));\n\t\tassert.ok(event.affectsConfiguration('configurationService.folder.restrictedSetting'));\n\t}));\n\n\ttest('adding an restricted setting triggers change event', () => runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"userValue\" }'));\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeRestrictedSettings);\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.restrictedSetting\": \"workspaceValue\" }'));\n\n\t\treturn promise;\n\t}));\n\n\ttest('remove an unregistered setting', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst key = 'configurationService.folder.unknownSetting';\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.unknownSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.folder.unknownSetting\": \"workspaceValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tawait testObject.updateValue(key, undefined);\n\n\t\tconst actual = testObject.inspect(key, { resource: workspaceService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t}));\n});\n\nsuite('WorkspaceConfigurationService - Profiles', () => {\n\n\tlet testObject: WorkspaceService, workspaceService: WorkspaceService, fileService: IFileService, environmentService: IBrowserWorkbenchEnvironmentService, userDataProfileService: IUserDataProfileService, instantiationService: TestInstantiationService;\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t[APPLY_ALL_PROFILES_SETTING]: {\n\t\t\t\t\t'type': 'array',\n\t\t\t\t\t'default': [],\n\t\t\t\t\t'scope': ConfigurationScope.APPLICATION,\n\t\t\t\t},\n\t\t\t\t'configurationService.profiles.applicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'configurationService.profiles.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t},\n\t\t\t\t'configurationService.profiles.applicationSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'configurationService.profiles.testSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t},\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst folder = joinPath(ROOT, 'a');\n\t\tawait fileService.createFolder(folder);\n\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tenvironmentService = TestEnvironmentService;\n\t\tenvironmentService.policyFile = joinPath(folder, 'policies.json');\n\t\tconst remoteAgentService = disposables.add(instantiationService.createInstance(RemoteAgentService));\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService)));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\tuserDataProfileService = instantiationService.stub(IUserDataProfileService, disposables.add(new UserDataProfileService(toUserDataProfile('custom', 'custom', joinPath(environmentService.userRoamingDataHome, 'profiles', 'temp'), joinPath(environmentService.cacheHome, 'profilesCache')))));\n\t\tworkspaceService = testObject = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService, userDataProfileService, userDataProfilesService,\n\t\t\tfileService, remoteAgentService, uriIdentityService, new NullLogService(),\n\t\t\tdisposables.add(new FilePolicyService(environmentService.policyFile, fileService, logService))));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting2\": \"applicationValue\", \"configurationService.profiles.testSetting2\": \"userValue\" }'));\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting2\": \"profileValue\", \"configurationService.profiles.testSetting2\": \"profileValue\" }'));\n\t\tawait workspaceService.initialize(convertToWorkspacePayload(folder));\n\t\tinstantiationService.stub(IKeybindingEditingService, disposables.add(instantiationService.createInstance(KeybindingsEditingService)));\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\tworkspaceService.acquireInstantiationService(instantiationService);\n\t});\n\n\ttest('initialize', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting2'), 'applicationValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting2'), 'profileValue');\n\t}));\n\n\ttest('inspect', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tlet actual = testObject.inspect('something.missing');\n\t\tassert.strictEqual(actual.defaultValue, undefined);\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, undefined);\n\n\t\tactual = testObject.inspect('configurationService.profiles.applicationSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'isSet');\n\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"applicationValue\" }'));\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"profileValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.profiles.applicationSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.applicationValue, 'applicationValue');\n\t\tassert.strictEqual(actual.userValue, 'profileValue');\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'applicationValue');\n\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.testSetting\": \"applicationValue\" }'));\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.testSetting\": \"profileValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.profiles.testSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.applicationValue, undefined);\n\t\tassert.strictEqual(actual.userValue, 'profileValue');\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'profileValue');\n\t}));\n\n\ttest('update application scope setting', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.profiles.applicationSetting', 'applicationValue');\n\n\t\tassert.deepStrictEqual(JSON.parse((await fileService.readFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource)).value.toString()), { 'configurationService.profiles.applicationSetting': 'applicationValue', 'configurationService.profiles.applicationSetting2': 'applicationValue', 'configurationService.profiles.testSetting2': 'userValue' });\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting'), 'applicationValue');\n\t}));\n\n\ttest('update normal setting', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.profiles.testSetting', 'profileValue');\n\n\t\tassert.deepStrictEqual(JSON.parse((await fileService.readFile(userDataProfileService.currentProfile.settingsResource)).value.toString()), { 'configurationService.profiles.testSetting': 'profileValue', 'configurationService.profiles.testSetting2': 'profileValue', 'configurationService.profiles.applicationSetting2': 'profileValue' });\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting'), 'profileValue');\n\t}));\n\n\ttest('registering normal setting after init', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.testSetting3\": \"defaultProfile\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.profiles.testSetting3': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting3'), 'isSet');\n\t}));\n\n\ttest('registering application scope setting after init', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting3\": \"defaultProfile\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.profiles.applicationSetting3': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting3'), 'defaultProfile');\n\t}));\n\n\ttest('initialize with custom all profiles settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue(APPLY_ALL_PROFILES_SETTING, ['configurationService.profiles.testSetting2'], ConfigurationTarget.USER_LOCAL);\n\n\t\tawait testObject.initialize(convertToWorkspacePayload(joinPath(ROOT, 'a')));\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting2'), 'applicationValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting2'), 'userValue');\n\t}));\n\n\ttest('update all profiles settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait testObject.updateValue(APPLY_ALL_PROFILES_SETTING, ['configurationService.profiles.testSetting2'], ConfigurationTarget.USER_LOCAL);\n\n\t\tconst changeEvent = await promise;\n\t\tassert.deepStrictEqual([...changeEvent.affectedKeys], [APPLY_ALL_PROFILES_SETTING, 'configurationService.profiles.testSetting2']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting2'), 'userValue');\n\t}));\n\n\ttest('setting applied to all profiles is registered later', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.testSetting4\": \"userValue\" }'));\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.testSetting4\": \"profileValue\" }'));\n\t\tawait testObject.updateValue(APPLY_ALL_PROFILES_SETTING, ['configurationService.profiles.testSetting4'], ConfigurationTarget.USER_LOCAL);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting4'), 'userValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.profiles.testSetting4': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting4'), 'userValue');\n\t}));\n\n\ttest('update setting that is applied to all profiles', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue(APPLY_ALL_PROFILES_SETTING, ['configurationService.profiles.testSetting2'], ConfigurationTarget.USER_LOCAL);\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait testObject.updateValue('configurationService.profiles.testSetting2', 'updatedValue', ConfigurationTarget.USER_LOCAL);\n\n\t\tconst changeEvent = await promise;\n\t\tassert.deepStrictEqual([...changeEvent.affectedKeys], ['configurationService.profiles.testSetting2']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting2'), 'updatedValue');\n\t}));\n\n\ttest('test isSettingAppliedToAllProfiles', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tassert.strictEqual(testObject.isSettingAppliedForAllProfiles('configurationService.profiles.applicationSetting2'), true);\n\t\tassert.strictEqual(testObject.isSettingAppliedForAllProfiles('configurationService.profiles.testSetting2'), false);\n\n\t\tawait testObject.updateValue(APPLY_ALL_PROFILES_SETTING, ['configurationService.profiles.testSetting2'], ConfigurationTarget.USER_LOCAL);\n\t\tassert.strictEqual(testObject.isSettingAppliedForAllProfiles('configurationService.profiles.testSetting2'), true);\n\t}));\n\n\ttest('switch to default profile', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"applicationValue\", \"configurationService.profiles.testSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"profileValue\", \"configurationService.profiles.testSetting\": \"profileValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait userDataProfileService.updateCurrentProfile(instantiationService.get(IUserDataProfilesService).defaultProfile);\n\n\t\tconst changeEvent = await promise;\n\t\tassert.deepStrictEqual([...changeEvent.affectedKeys], ['configurationService.profiles.testSetting']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting'), 'applicationValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting'), 'userValue');\n\t}));\n\n\ttest('switch to non default profile', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"applicationValue\", \"configurationService.profiles.testSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"profileValue\", \"configurationService.profiles.testSetting\": \"profileValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst profile = toUserDataProfile('custom2', 'custom2', joinPath(environmentService.userRoamingDataHome, 'profiles', 'custom2'), joinPath(environmentService.cacheHome, 'profilesCache'));\n\t\tawait fileService.writeFile(profile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"profileValue2\", \"configurationService.profiles.testSetting\": \"profileValue2\" }'));\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait userDataProfileService.updateCurrentProfile(profile);\n\n\t\tconst changeEvent = await promise;\n\t\tassert.deepStrictEqual([...changeEvent.affectedKeys], ['configurationService.profiles.testSetting']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting'), 'applicationValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting'), 'profileValue2');\n\t}));\n\n\ttest('switch to non default profile using settings from default profile', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"applicationValue\", \"configurationService.profiles.testSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"profileValue\", \"configurationService.profiles.testSetting\": \"profileValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst profile = toUserDataProfile('custom3', 'custom3', joinPath(environmentService.userRoamingDataHome, 'profiles', 'custom2'), joinPath(environmentService.cacheHome, 'profilesCache'), { useDefaultFlags: { settings: true } }, instantiationService.get(IUserDataProfilesService).defaultProfile);\n\t\tawait fileService.writeFile(profile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"applicationValue2\", \"configurationService.profiles.testSetting\": \"profileValue2\" }'));\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait userDataProfileService.updateCurrentProfile(profile);\n\n\t\tconst changeEvent = await promise;\n\t\tassert.deepStrictEqual([...changeEvent.affectedKeys], ['configurationService.profiles.applicationSetting', 'configurationService.profiles.testSetting']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting'), 'applicationValue2');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting'), 'profileValue2');\n\t}));\n\n\ttest('In non-default profile, changing application settings shall include only application scope settings in the change event', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{}'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait fileService.writeFile(instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.applicationSetting\": \"applicationValue\", \"configurationService.profiles.testSetting\": \"applicationValue\" }'));\n\n\t\tconst changeEvent = await promise;\n\t\tassert.deepStrictEqual([...changeEvent.affectedKeys], ['configurationService.profiles.applicationSetting']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting'), 'applicationValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting'), 'isSet');\n\t}));\n\n\ttest('switch to default profile with settings applied to all profiles', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue(APPLY_ALL_PROFILES_SETTING, ['configurationService.profiles.testSetting2'], ConfigurationTarget.USER_LOCAL);\n\n\t\tawait userDataProfileService.updateCurrentProfile(instantiationService.get(IUserDataProfilesService).defaultProfile);\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting2'), 'applicationValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting2'), 'userValue');\n\t}));\n\n\ttest('switch to non default profile with settings applied to all profiles', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue(APPLY_ALL_PROFILES_SETTING, ['configurationService.profiles.testSetting2'], ConfigurationTarget.USER_LOCAL);\n\n\t\tconst profile = toUserDataProfile('custom2', 'custom2', joinPath(environmentService.userRoamingDataHome, 'profiles', 'custom2'), joinPath(environmentService.cacheHome, 'profilesCache'));\n\t\tawait fileService.writeFile(profile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.testSetting\": \"profileValue\", \"configurationService.profiles.testSetting2\": \"profileValue2\" }'));\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait userDataProfileService.updateCurrentProfile(profile);\n\n\t\tconst changeEvent = await promise;\n\t\tassert.deepStrictEqual([...changeEvent.affectedKeys], ['configurationService.profiles.testSetting']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting2'), 'applicationValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting2'), 'userValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting'), 'profileValue');\n\t}));\n\n\ttest('switch to non default from default profile with settings applied to all profiles', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue(APPLY_ALL_PROFILES_SETTING, ['configurationService.profiles.testSetting2'], ConfigurationTarget.USER_LOCAL);\n\t\tawait userDataProfileService.updateCurrentProfile(instantiationService.get(IUserDataProfilesService).defaultProfile);\n\n\t\tconst profile = toUserDataProfile('custom2', 'custom2', joinPath(environmentService.userRoamingDataHome, 'profiles', 'custom2'), joinPath(environmentService.cacheHome, 'profilesCache'));\n\t\tawait fileService.writeFile(profile.settingsResource, VSBuffer.fromString('{ \"configurationService.profiles.testSetting\": \"profileValue\", \"configurationService.profiles.testSetting2\": \"profileValue2\" }'));\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait userDataProfileService.updateCurrentProfile(profile);\n\n\t\tconst changeEvent = await promise;\n\t\tassert.deepStrictEqual([...changeEvent.affectedKeys], ['configurationService.profiles.testSetting']);\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.applicationSetting2'), 'applicationValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting2'), 'userValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.profiles.testSetting'), 'profileValue');\n\t}));\n\n});\n\nsuite('WorkspaceConfigurationService-Multiroot', () => {\n\n\tlet workspaceContextService: IWorkspaceContextService, jsonEditingServce: IJSONEditingService, testObject: WorkspaceService, fileService: IFileService, environmentService: BrowserWorkbenchEnvironmentService, userDataProfileService: IUserDataProfileService;\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.applicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.machineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.machineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.testResourceSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.testLanguageSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.testRestrictedSetting1': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\trestricted: true,\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'configurationService.workspace.testRestrictedSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\trestricted: true,\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tconst folderA = joinPath(ROOT, 'a');\n\t\tconst folderB = joinPath(ROOT, 'b');\n\t\tconst configResource = joinPath(ROOT, 'vsctests.code-workspace');\n\t\tconst workspace = { folders: [{ path: folderA.path }, { path: folderB.path }] };\n\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tawait fileService.createFolder(folderA);\n\t\tawait fileService.createFolder(folderB);\n\t\tawait fileService.writeFile(configResource, VSBuffer.fromString(JSON.stringify(workspace, null, '\\t')));\n\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tenvironmentService = TestEnvironmentService;\n\t\tconst remoteAgentService = disposables.add(instantiationService.createInstance(RemoteAgentService));\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService)));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\tuserDataProfileService = instantiationService.stub(IUserDataProfileService, disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile)));\n\t\tconst workspaceService = disposables.add(new WorkspaceService(\n\t\t\t{ configurationCache: new ConfigurationCache() },\n\t\t\tenvironmentService, userDataProfileService, userDataProfilesService,\n\t\t\tfileService, remoteAgentService, uriIdentityService, new NullLogService(), new NullPolicyService()));\n\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IWorkspaceContextService, workspaceService);\n\t\tinstantiationService.stub(IConfigurationService, workspaceService);\n\t\tinstantiationService.stub(IWorkbenchEnvironmentService, environmentService);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\n\t\tawait workspaceService.initialize(getWorkspaceIdentifier(configResource));\n\t\tinstantiationService.stub(IKeybindingEditingService, disposables.add(instantiationService.createInstance(KeybindingsEditingService)));\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\tjsonEditingServce = instantiationService.createInstance(JSONEditingService);\n\t\tinstantiationService.stub(IJSONEditingService, jsonEditingServce);\n\t\tworkspaceService.acquireInstantiationService(instantiationService);\n\n\t\tworkspaceContextService = workspaceService;\n\t\ttestObject = workspaceService;\n\t});\n\n\ttest('application settings are not read from workspace', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.applicationSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting'), 'userValue');\n\t}));\n\n\ttest('application settings are not read from workspace when folder is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.applicationSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.applicationSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.applicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('machine settings are not read from workspace', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.machineSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting'), 'userValue');\n\t}));\n\n\ttest('machine settings are not read from workspace when folder is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.folder.machineSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.machineSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.folder.machineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('get application scope settings are not loaded after defaults are registered', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.newSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.newSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting'), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.newSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting'), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting'), 'userValue');\n\t}));\n\n\ttest('get application scope settings are not loaded after defaults are registered when workspace folder is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.newSetting-2\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.newSetting-2': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting-2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.newSetting-2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting-2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newSetting-2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('workspace settings override user settings after defaults are registered for machine overridable settings ', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.newMachineOverridableSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['settings'], value: { 'configurationService.workspace.newMachineOverridableSetting': 'workspaceValue' } }], true);\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newMachineOverridableSetting'), 'workspaceValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.newMachineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newMachineOverridableSetting'), 'workspaceValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.newMachineOverridableSetting'), 'workspaceValue');\n\n\t}));\n\n\ttest('application settings are not read from workspace folder', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.applicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.applicationSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.applicationSetting'), 'userValue');\n\t}));\n\n\ttest('application settings are not read from workspace folder when workspace folder is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.applicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.applicationSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.applicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('machine settings are not read from workspace folder', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.machineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.machineSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.machineSetting'), 'userValue');\n\t}));\n\n\ttest('machine settings are not read from workspace folder when workspace folder is passed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.machineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.machineSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.machineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('application settings are not read from workspace folder after defaults are registered', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testNewApplicationSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewApplicationSetting\": \"workspaceFolderValue\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewApplicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewApplicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewApplicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewApplicationSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('machine settings are not read from workspace folder after defaults are registered', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testNewMachineSetting\": \"userValue\" }'));\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewMachineSetting\": \"workspaceFolderValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewMachineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewMachineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewMachineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewMachineSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'userValue');\n\t}));\n\n\ttest('resource setting in folder is read after it is registered later', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewResourceSetting2\": \"workspaceFolderValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testNewResourceSetting2': 'workspaceValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewResourceSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewResourceSetting2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\t}));\n\n\ttest('resource language setting in folder is read after it is registered later', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewResourceLanguageSetting2\": \"workspaceFolderValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testNewResourceLanguageSetting2': 'workspaceValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewResourceLanguageSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewResourceLanguageSetting2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\t}));\n\n\ttest('machine overridable setting in folder is read after it is registered later', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testNewMachineOverridableSetting2\": \"workspaceFolderValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testNewMachineOverridableSetting2': 'workspaceValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.workspace.testNewMachineOverridableSetting2': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testNewMachineOverridableSetting2', { resource: workspaceContextService.getWorkspace().folders[0].uri }), 'workspaceFolderValue');\n\t}));\n\n\ttest('inspect', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tlet actual = testObject.inspect('something.missing');\n\t\tassert.strictEqual(actual.defaultValue, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, undefined);\n\n\t\tactual = testObject.inspect('configurationService.workspace.testResourceSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'isSet');\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testResourceSetting\": \"userValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testResourceSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userValue');\n\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testResourceSetting': 'workspaceValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testResourceSetting');\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'workspaceValue');\n\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testResourceSetting\": \"workspaceFolderValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testResourceSetting', { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.userValue, 'userValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, 'workspaceFolderValue');\n\t\tassert.strictEqual(actual.value, 'workspaceFolderValue');\n\t}));\n\n\ttest('inspect restricted settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testRestrictedSetting1': 'workspaceRestrictedValue' } }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tlet actual = testObject.inspect('configurationService.workspace.testRestrictedSetting1', { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'isSet');\n\n\t\ttestObject.updateWorkspaceTrust(true);\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testRestrictedSetting1', { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'workspaceRestrictedValue');\n\n\t\ttestObject.updateWorkspaceTrust(false);\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting1\": \"workspaceFolderRestrictedValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testRestrictedSetting1', { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, 'workspaceFolderRestrictedValue');\n\t\tassert.strictEqual(actual.value, 'isSet');\n\n\t\ttestObject.updateWorkspaceTrust(true);\n\t\tawait testObject.reloadConfiguration();\n\t\tactual = testObject.inspect('configurationService.workspace.testRestrictedSetting1', { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, 'workspaceFolderRestrictedValue');\n\t\tassert.strictEqual(actual.value, 'workspaceFolderRestrictedValue');\n\t}));\n\n\ttest('inspect restricted settings after change', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting1\": \"userRestrictedValue\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tlet promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testRestrictedSetting1': 'workspaceRestrictedValue' } }], true);\n\t\tlet event = await promise;\n\n\t\tlet actual = testObject.inspect('configurationService.workspace.testRestrictedSetting1', { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t\tassert.strictEqual(actual.value, 'userRestrictedValue');\n\t\tassert.strictEqual(event.affectsConfiguration('configurationService.workspace.testRestrictedSetting1'), true);\n\n\t\tpromise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tawait fileService.writeFile(workspaceContextService.getWorkspace().folders[0].toResource('.vscode/settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting1\": \"workspaceFolderRestrictedValue\" }'));\n\t\tevent = await promise;\n\n\t\tactual = testObject.inspect('configurationService.workspace.testRestrictedSetting1', { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.defaultValue, 'isSet');\n\t\tassert.strictEqual(actual.application, undefined);\n\t\tassert.strictEqual(actual.userValue, 'userRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceValue, 'workspaceRestrictedValue');\n\t\tassert.strictEqual(actual.workspaceFolderValue, 'workspaceFolderRestrictedValue');\n\t\tassert.strictEqual(actual.value, 'userRestrictedValue');\n\t\tassert.strictEqual(event.affectsConfiguration('configurationService.workspace.testRestrictedSetting1'), true);\n\t}));\n\n\ttest('get launch configuration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst expectedLaunchConfiguration = {\n\t\t\t'version': '0.1.0',\n\t\t\t'configurations': [\n\t\t\t\t{\n\t\t\t\t\t'type': 'node',\n\t\t\t\t\t'request': 'launch',\n\t\t\t\t\t'name': 'Gulp Build',\n\t\t\t\t\t'program': '${workspaceFolder}/node_modules/gulp/bin/gulp.js',\n\t\t\t\t\t'stopOnEntry': true,\n\t\t\t\t\t'args': [\n\t\t\t\t\t\t'watch-extension:json-client'\n\t\t\t\t\t],\n\t\t\t\t\t'cwd': '${workspaceFolder}'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['launch'], value: expectedLaunchConfiguration }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconst actual = testObject.getValue('launch');\n\t\tassert.deepStrictEqual(actual, expectedLaunchConfiguration);\n\t}));\n\n\ttest('inspect launch configuration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst expectedLaunchConfiguration = {\n\t\t\t'version': '0.1.0',\n\t\t\t'configurations': [\n\t\t\t\t{\n\t\t\t\t\t'type': 'node',\n\t\t\t\t\t'request': 'launch',\n\t\t\t\t\t'name': 'Gulp Build',\n\t\t\t\t\t'program': '${workspaceFolder}/node_modules/gulp/bin/gulp.js',\n\t\t\t\t\t'stopOnEntry': true,\n\t\t\t\t\t'args': [\n\t\t\t\t\t\t'watch-extension:json-client'\n\t\t\t\t\t],\n\t\t\t\t\t'cwd': '${workspaceFolder}'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['launch'], value: expectedLaunchConfiguration }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconst actual = testObject.inspect('launch').workspaceValue;\n\t\tassert.deepStrictEqual(actual, expectedLaunchConfiguration);\n\t}));\n\n\n\ttest('get tasks configuration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst expectedTasksConfiguration = {\n\t\t\t'version': '2.0.0',\n\t\t\t'tasks': [\n\t\t\t\t{\n\t\t\t\t\t'label': 'Run Dev',\n\t\t\t\t\t'type': 'shell',\n\t\t\t\t\t'command': './scripts/code.sh',\n\t\t\t\t\t'windows': {\n\t\t\t\t\t\t'command': '.\\\\scripts\\\\code.bat'\n\t\t\t\t\t},\n\t\t\t\t\t'problemMatcher': []\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['tasks'], value: expectedTasksConfiguration }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconst actual = testObject.getValue(TasksSchemaProperties.Tasks);\n\t\tassert.deepStrictEqual(actual, expectedTasksConfiguration);\n\t}));\n\n\ttest('inspect tasks configuration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst expectedTasksConfiguration = {\n\t\t\t'version': '2.0.0',\n\t\t\t'tasks': [\n\t\t\t\t{\n\t\t\t\t\t'label': 'Run Dev',\n\t\t\t\t\t'type': 'shell',\n\t\t\t\t\t'command': './scripts/code.sh',\n\t\t\t\t\t'windows': {\n\t\t\t\t\t\t'command': '.\\\\scripts\\\\code.bat'\n\t\t\t\t\t},\n\t\t\t\t\t'problemMatcher': []\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tawait jsonEditingServce.write(workspaceContextService.getWorkspace().configuration!, [{ path: ['tasks'], value: expectedTasksConfiguration }], true);\n\t\tawait testObject.reloadConfiguration();\n\t\tconst actual = testObject.inspect('tasks').workspaceValue;\n\t\tassert.deepStrictEqual(actual, expectedTasksConfiguration);\n\t}));\n\n\ttest('update user configuration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'userValue', ConfigurationTarget.USER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testSetting'), 'userValue');\n\t}));\n\n\ttest('update user configuration should trigger change event before promise is resolve', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'userValue', ConfigurationTarget.USER);\n\t\tassert.ok(target.called);\n\t}));\n\n\ttest('update workspace configuration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testSetting'), 'workspaceValue');\n\t}));\n\n\ttest('update workspace configuration should trigger change event before promise is resolve', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\t\tassert.ok(target.called);\n\t}));\n\n\ttest('update application setting into workspace configuration in a workspace is not supported', () => {\n\t\treturn testObject.updateValue('configurationService.workspace.applicationSetting', 'workspaceValue', {}, ConfigurationTarget.WORKSPACE, { donotNotifyError: true })\n\t\t\t.then(() => assert.fail('Should not be supported'), (e) => assert.strictEqual(e.code, ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION));\n\t});\n\n\ttest('update machine setting into workspace configuration in a workspace is not supported', () => {\n\t\treturn testObject.updateValue('configurationService.workspace.machineSetting', 'workspaceValue', {}, ConfigurationTarget.WORKSPACE, { donotNotifyError: true })\n\t\t\t.then(() => assert.fail('Should not be supported'), (e) => assert.strictEqual(e.code, ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE));\n\t});\n\n\ttest('update workspace folder configuration', () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\treturn testObject.updateValue('configurationService.workspace.testResourceSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER)\n\t\t\t.then(() => assert.strictEqual(testObject.getValue('configurationService.workspace.testResourceSetting', { resource: workspace.folders[0].uri }), 'workspaceFolderValue'));\n\t});\n\n\ttest('update resource language configuration in workspace folder', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('configurationService.workspace.testLanguageSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testLanguageSetting', { resource: workspace.folders[0].uri }), 'workspaceFolderValue');\n\t}));\n\n\ttest('update workspace folder configuration should trigger change event before promise is resolve', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\tawait testObject.updateValue('configurationService.workspace.testResourceSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.ok(target.called);\n\t}));\n\n\ttest('update workspace folder configuration second time should trigger change event before promise is resolve', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('configurationService.workspace.testResourceSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\tawait testObject.updateValue('configurationService.workspace.testResourceSetting', 'workspaceFolderValue2', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.ok(target.called);\n\t}));\n\n\ttest('update machine overridable setting in folder', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('configurationService.workspace.machineOverridableSetting', 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.machineOverridableSetting', { resource: workspace.folders[0].uri }), 'workspaceFolderValue');\n\t}));\n\n\ttest('update memory configuration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'memoryValue', ConfigurationTarget.MEMORY);\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testSetting'), 'memoryValue');\n\t}));\n\n\ttest('update memory configuration should trigger change event before promise is resolve', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst target = sinon.spy();\n\t\tdisposables.add(testObject.onDidChangeConfiguration(target));\n\t\tawait testObject.updateValue('configurationService.workspace.testSetting', 'memoryValue', ConfigurationTarget.MEMORY);\n\t\tassert.ok(target.called);\n\t}));\n\n\ttest('remove setting from all targets', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tconst key = 'configurationService.workspace.testResourceSetting';\n\t\tawait testObject.updateValue(key, 'workspaceFolderValue', { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tawait testObject.updateValue(key, 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\t\tawait testObject.updateValue(key, 'userValue', ConfigurationTarget.USER);\n\n\t\tawait testObject.updateValue(key, undefined, { resource: workspace.folders[0].uri });\n\t\tawait testObject.reloadConfiguration();\n\n\t\tconst actual = testObject.inspect(key, { resource: workspace.folders[0].uri });\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t}));\n\n\ttest('update tasks configuration in a folder', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('tasks', { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] }, { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tassert.deepStrictEqual(testObject.getValue(TasksSchemaProperties.Tasks, { resource: workspace.folders[0].uri }), { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] });\n\t}));\n\n\ttest('update launch configuration in a workspace', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tawait testObject.updateValue('launch', { 'version': '1.0.0', configurations: [{ 'name': 'myLaunch' }] }, { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE, { donotNotifyError: true });\n\t\tassert.deepStrictEqual(testObject.getValue('launch'), { 'version': '1.0.0', configurations: [{ 'name': 'myLaunch' }] });\n\t}));\n\n\ttest('update tasks configuration in a workspace', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\tconst tasks = { 'version': '2.0.0', tasks: [{ 'label': 'myTask' }] };\n\t\tawait testObject.updateValue('tasks', tasks, { resource: workspace.folders[0].uri }, ConfigurationTarget.WORKSPACE, { donotNotifyError: true });\n\t\tassert.deepStrictEqual(testObject.getValue(TasksSchemaProperties.Tasks), tasks);\n\t}));\n\n\ttest('configuration of newly added folder is available on configuration change event', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst workspaceService = <WorkspaceService>testObject;\n\t\tconst uri = workspaceService.getWorkspace().folders[1].uri;\n\t\tawait workspaceService.removeFolders([uri]);\n\t\tawait fileService.writeFile(joinPath(uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testResourceSetting\": \"workspaceFolderValue\" }'));\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tdisposables.add(testObject.onDidChangeConfiguration(() => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testResourceSetting', { resource: uri }), 'workspaceFolderValue');\n\t\t\t\t\tc();\n\t\t\t\t} catch (error) {\n\t\t\t\t\te(error);\n\t\t\t\t}\n\t\t\t}));\n\t\t\tworkspaceService.addFolders([{ uri }]);\n\t\t});\n\t}));\n\n\ttest('restricted setting is read from workspace folders when workspace is trusted', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(true);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting1\": \"userValue\", \"configurationService.workspace.testRestrictedSetting2\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testRestrictedSetting1': 'workspaceValue' } }], true);\n\t\tawait fileService.writeFile(joinPath(testObject.getWorkspace().folders[1].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting2\": \"workspaceFolder2Value\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testRestrictedSetting1', { resource: testObject.getWorkspace().folders[0].uri }), 'workspaceValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testRestrictedSetting2', { resource: testObject.getWorkspace().folders[1].uri }), 'workspaceFolder2Value');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.workspace.testRestrictedSetting1'));\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.workspace.testRestrictedSetting2'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.workspace.testRestrictedSetting1']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.get(testObject.getWorkspace().folders[0].uri), undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(testObject.getWorkspace().folders[1].uri), ['configurationService.workspace.testRestrictedSetting2']);\n\t}));\n\n\ttest('restricted setting is not read from workspace when workspace is not trusted', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestObject.updateWorkspaceTrust(false);\n\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting1\": \"userValue\", \"configurationService.workspace.testRestrictedSetting2\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.testRestrictedSetting1': 'workspaceValue' } }], true);\n\t\tawait fileService.writeFile(joinPath(testObject.getWorkspace().folders[1].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.testRestrictedSetting2\": \"workspaceFolder2Value\" }'));\n\t\tawait testObject.reloadConfiguration();\n\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testRestrictedSetting1', { resource: testObject.getWorkspace().folders[0].uri }), 'userValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.workspace.testRestrictedSetting2', { resource: testObject.getWorkspace().folders[1].uri }), 'userValue');\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.workspace.testRestrictedSetting1'));\n\t\tassert.ok(testObject.restrictedSettings.default.includes('configurationService.workspace.testRestrictedSetting2'));\n\t\tassert.strictEqual(testObject.restrictedSettings.userLocal, undefined);\n\t\tassert.strictEqual(testObject.restrictedSettings.userRemote, undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspace, ['configurationService.workspace.testRestrictedSetting1']);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.size, 1);\n\t\tassert.strictEqual(testObject.restrictedSettings.workspaceFolder?.get(testObject.getWorkspace().folders[0].uri), undefined);\n\t\tassert.deepStrictEqual(testObject.restrictedSettings.workspaceFolder?.get(testObject.getWorkspace().folders[1].uri), ['configurationService.workspace.testRestrictedSetting2']);\n\t}));\n\n\ttest('remove an unregistered setting', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst key = 'configurationService.workspace.unknownSetting';\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.workspace.unknownSetting\": \"userValue\" }'));\n\t\tawait jsonEditingServce.write((workspaceContextService.getWorkspace().configuration!), [{ path: ['settings'], value: { 'configurationService.workspace.unknownSetting': 'workspaceValue' } }], true);\n\t\tawait fileService.writeFile(joinPath(workspaceContextService.getWorkspace().folders[0].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.unknownSetting\": \"workspaceFolderValue1\" }'));\n\t\tawait fileService.writeFile(joinPath(workspaceContextService.getWorkspace().folders[1].uri, '.vscode', 'settings.json'), VSBuffer.fromString('{ \"configurationService.workspace.unknownSetting\": \"workspaceFolderValue2\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tawait testObject.updateValue(key, undefined, { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\n\t\tlet actual = testObject.inspect(key, { resource: workspaceContextService.getWorkspace().folders[0].uri });\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\n\t\tawait testObject.updateValue(key, undefined, { resource: workspaceContextService.getWorkspace().folders[1].uri });\n\t\tactual = testObject.inspect(key, { resource: workspaceContextService.getWorkspace().folders[1].uri });\n\t\tassert.strictEqual(actual.userValue, undefined);\n\t\tassert.strictEqual(actual.workspaceValue, undefined);\n\t\tassert.strictEqual(actual.workspaceFolderValue, undefined);\n\t}));\n\n});\n\nsuite('WorkspaceConfigurationService - Remote Folder', () => {\n\n\tlet testObject: WorkspaceService, folder: URI,\n\t\tmachineSettingsResource: URI, remoteSettingsResource: URI, fileSystemProvider: InMemoryFileSystemProvider, resolveRemoteEnvironment: () => void,\n\t\tinstantiationService: TestInstantiationService, fileService: IFileService, environmentService: BrowserWorkbenchEnvironmentService, userDataProfileService: IUserDataProfileService;\n\tconst remoteAuthority = 'configuraiton-tests';\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuiteSetup(() => {\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.remote.applicationSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'configurationService.remote.machineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t},\n\t\t\t\t'configurationService.remote.machineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t},\n\t\t\t\t'configurationService.remote.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.RESOURCE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tfileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst appSettingsHome = joinPath(ROOT, 'user');\n\t\tfolder = joinPath(ROOT, 'a');\n\t\tawait fileService.createFolder(folder);\n\t\tawait fileService.createFolder(appSettingsHome);\n\t\tmachineSettingsResource = joinPath(ROOT, 'machine-settings.json');\n\t\tremoteSettingsResource = machineSettingsResource.with({ scheme: Schemas.vscodeRemote, authority: remoteAuthority });\n\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tenvironmentService = TestEnvironmentService;\n\t\tconst remoteEnvironmentPromise = new Promise<Partial<IRemoteAgentEnvironment>>(c => resolveRemoteEnvironment = () => c({ settingsPath: remoteSettingsResource }));\n\t\tconst remoteAgentService = instantiationService.stub(IRemoteAgentService, <Partial<IRemoteAgentService>>{ getEnvironment: () => remoteEnvironmentPromise });\n\t\tconst configurationCache: IConfigurationCache = { read: () => Promise.resolve(''), write: () => Promise.resolve(), remove: () => Promise.resolve(), needsCaching: () => false };\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService)));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\t\tuserDataProfileService = instantiationService.stub(IUserDataProfileService, disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile)));\n\t\ttestObject = disposables.add(new WorkspaceService({ configurationCache, remoteAuthority }, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, new NullLogService(), new NullPolicyService()));\n\t\tinstantiationService.stub(IWorkspaceContextService, testObject);\n\t\tinstantiationService.stub(IConfigurationService, testObject);\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\t\tinstantiationService.stub(IFileService, fileService);\n\t});\n\n\tasync function initialize(): Promise<void> {\n\t\tawait testObject.initialize(convertToWorkspacePayload(folder));\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, <ITextModelService>disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\tinstantiationService.stub(IJSONEditingService, instantiationService.createInstance(JSONEditingService));\n\t\ttestObject.acquireInstantiationService(instantiationService);\n\t}\n\n\tfunction registerRemoteFileSystemProvider(): void {\n\t\tdisposables.add(instantiationService.get(IFileService).registerProvider(Schemas.vscodeRemote, new RemoteFileSystemProvider(fileSystemProvider, remoteAuthority)));\n\t}\n\n\tfunction registerRemoteFileSystemProviderOnActivation(): void {\n\t\tconst disposable = disposables.add(instantiationService.get(IFileService).onWillActivateFileSystemProvider(e => {\n\t\t\tif (e.scheme === Schemas.vscodeRemote) {\n\t\t\t\tdisposable.dispose();\n\t\t\t\te.join(Promise.resolve().then(() => registerRemoteFileSystemProvider()));\n\t\t\t}\n\t\t}));\n\t}\n\n\ttest('remote settings override globals', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(machineSettingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"remoteValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'remoteValue');\n\t}));\n\n\ttest('remote settings override globals after remote provider is registered on activation', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(machineSettingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"remoteValue\" }'));\n\t\tresolveRemoteEnvironment();\n\t\tregisterRemoteFileSystemProviderOnActivation();\n\t\tawait initialize();\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'remoteValue');\n\t}));\n\n\ttest('remote settings override globals after remote environment is resolved', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(machineSettingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"remoteValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tawait initialize();\n\t\tconst promise = new Promise<void>((c, e) => {\n\t\t\tdisposables.add(testObject.onDidChangeConfiguration(event => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(event.source, ConfigurationTarget.USER);\n\t\t\t\t\tassert.deepStrictEqual([...event.affectedKeys], ['configurationService.remote.machineSetting']);\n\t\t\t\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'remoteValue');\n\t\t\t\t\tc();\n\t\t\t\t} catch (error) {\n\t\t\t\t\te(error);\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\t\tresolveRemoteEnvironment();\n\t\treturn promise;\n\t}));\n\n\ttest('remote settings override globals after remote provider is registered on activation and remote environment is resolved', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(machineSettingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"remoteValue\" }'));\n\t\tregisterRemoteFileSystemProviderOnActivation();\n\t\tawait initialize();\n\t\tconst promise = new Promise<void>((c, e) => {\n\t\t\tdisposables.add(testObject.onDidChangeConfiguration(event => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(event.source, ConfigurationTarget.USER);\n\t\t\t\t\tassert.deepStrictEqual([...event.affectedKeys], ['configurationService.remote.machineSetting']);\n\t\t\t\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'remoteValue');\n\t\t\t\t\tc();\n\t\t\t\t} catch (error) {\n\t\t\t\t\te(error);\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\t\tresolveRemoteEnvironment();\n\t\treturn promise;\n\t}));\n\n\ttest('machine settings in local user settings does not override defaults', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineSetting\": \"globalValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineSetting'), 'isSet');\n\t}));\n\n\ttest('machine overridable settings in local user settings does not override defaults', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.remote.machineOverridableSetting\": \"globalValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.machineOverridableSetting'), 'isSet');\n\t}));\n\n\ttest('non machine setting is written in local settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tawait testObject.updateValue('configurationService.remote.applicationSetting', 'applicationValue');\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.inspect('configurationService.remote.applicationSetting').userLocalValue, 'applicationValue');\n\t}));\n\n\ttest('machine setting is written in remote settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tawait testObject.updateValue('configurationService.remote.machineSetting', 'machineValue');\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.inspect('configurationService.remote.machineSetting').userRemoteValue, 'machineValue');\n\t}));\n\n\ttest('machine overridable setting is written in remote settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tawait testObject.updateValue('configurationService.remote.machineOverridableSetting', 'machineValue');\n\t\tawait testObject.reloadConfiguration();\n\t\tassert.strictEqual(testObject.inspect('configurationService.remote.machineOverridableSetting').userRemoteValue, 'machineValue');\n\t}));\n\n\ttest('machine settings in local user settings does not override defaults after defalts are registered ', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.remote.newMachineSetting\": \"userValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.remote.newMachineSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.newMachineSetting'), 'isSet');\n\t}));\n\n\ttest('machine overridable settings in local user settings does not override defaults after defaults are registered ', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"configurationService.remote.newMachineOverridableSetting\": \"userValue\" }'));\n\t\tregisterRemoteFileSystemProvider();\n\t\tresolveRemoteEnvironment();\n\t\tawait initialize();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.remote.newMachineOverridableSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tscope: ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.getValue('configurationService.remote.newMachineOverridableSetting'), 'isSet');\n\t}));\n\n});\n\nfunction getWorkspaceId(configPath: URI): string {\n\tlet workspaceConfigPath = configPath.toString();\n\tif (!isLinux) {\n\t\tworkspaceConfigPath = workspaceConfigPath.toLowerCase(); // sanitize for platform file system\n\t}\n\treturn hash(workspaceConfigPath).toString(16);\n}\n\nfunction getWorkspaceIdentifier(configPath: URI): IWorkspaceIdentifier {\n\treturn {\n\t\tconfigPath,\n\t\tid: getWorkspaceId(configPath)\n\t};\n}\n"],
  "mappings": "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",
  "names": ["folder", "testObject", "e"]
}
