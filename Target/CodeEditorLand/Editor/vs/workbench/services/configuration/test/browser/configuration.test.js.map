{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/test/browser/configuration.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Event } from '../../../../../base/common/event.js';\nimport { joinPath } from '../../../../../base/common/resources.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Extensions, IConfigurationRegistry } from '../../../../../platform/configuration/common/configurationRegistry.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { DefaultConfiguration } from '../../browser/configuration.js';\nimport { ConfigurationKey, IConfigurationCache } from '../../common/configuration.js';\nimport { BrowserWorkbenchEnvironmentService } from '../../../environment/browser/environmentService.js';\nimport { TestEnvironmentService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestProductService } from '../../../../test/common/workbenchTestServices.js';\n\nclass ConfigurationCache implements IConfigurationCache {\n\tprivate readonly cache = new Map<string, string>();\n\tneedsCaching(resource: URI): boolean { return false; }\n\tasync read({ type, key }: ConfigurationKey): Promise<string> { return this.cache.get(`${type}:${key}`) || ''; }\n\tasync write({ type, key }: ConfigurationKey, content: string): Promise<void> { this.cache.set(`${type}:${key}`, content); }\n\tasync remove({ type, key }: ConfigurationKey): Promise<void> { this.cache.delete(`${type}:${key}`); }\n}\n\nsuite('DefaultConfiguration', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\tconst cacheKey: ConfigurationKey = { type: 'defaults', key: 'configurationDefaultsOverrides' };\n\tlet configurationCache: ConfigurationCache;\n\n\tsetup(() => {\n\t\tconfigurationCache = new ConfigurationCache();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'test.configurationDefaultsOverride',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'test.configurationDefaultsOverride': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'defaultValue',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tteardown(() => {\n\t\tconfigurationRegistry.deregisterConfigurations(configurationRegistry.getConfigurations());\n\t\tconfigurationRegistry.deregisterDefaultConfigurations(configurationRegistry.getRegisteredDefaultConfigurations());\n\t});\n\n\ttest('configuration default overrides are read from environment', async () => {\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService('', joinPath(URI.file('tests').with({ scheme: 'vscode-tests' }), 'logs'), { configurationDefaults: { 'test.configurationDefaultsOverride': 'envOverrideValue' } }, TestProductService);\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, environmentService, new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tassert.deepStrictEqual(testObject.configurationModel.getValue('test.configurationDefaultsOverride'), 'envOverrideValue');\n\t});\n\n\ttest('configuration default overrides are read from cache', async () => {\n\t\tlocalStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService, new NullLogService()));\n\n\t\tconst actual = await testObject.initialize();\n\n\t\tassert.deepStrictEqual(actual.getValue('test.configurationDefaultsOverride'), 'overrideValue');\n\t\tassert.deepStrictEqual(testObject.configurationModel.getValue('test.configurationDefaultsOverride'), 'overrideValue');\n\t});\n\n\ttest('configuration default overrides are not read from cache when model is read before initialize', async () => {\n\t\tlocalStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService, new NullLogService()));\n\t\tassert.deepStrictEqual(testObject.configurationModel.getValue('test.configurationDefaultsOverride'), undefined);\n\t});\n\n\ttest('configuration default overrides read from cache override environment', async () => {\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService('', joinPath(URI.file('tests').with({ scheme: 'vscode-tests' }), 'logs'), { configurationDefaults: { 'test.configurationDefaultsOverride': 'envOverrideValue' } }, TestProductService);\n\t\tlocalStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, environmentService, new NullLogService()));\n\n\t\tconst actual = await testObject.initialize();\n\n\t\tassert.deepStrictEqual(actual.getValue('test.configurationDefaultsOverride'), 'overrideValue');\n\t});\n\n\ttest('configuration default overrides are read from cache when default configuration changed', async () => {\n\t\tlocalStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService, new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'test.configurationDefaultsOverride',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'test.configurationDefaultsOverride1': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'defaultValue',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst { defaults: actual } = await promise;\n\t\tassert.deepStrictEqual(actual.getValue('test.configurationDefaultsOverride'), 'overrideValue');\n\t});\n\n\ttest('configuration default overrides are not read from cache after reload', async () => {\n\t\tlocalStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService, new NullLogService()));\n\n\t\tawait testObject.initialize();\n\t\tconst actual = testObject.reload();\n\n\t\tassert.deepStrictEqual(actual.getValue('test.configurationDefaultsOverride'), 'defaultValue');\n\t});\n\n\ttest('cache is reset after reload', async () => {\n\t\tlocalStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService, new NullLogService()));\n\n\t\tawait testObject.initialize();\n\t\ttestObject.reload();\n\n\t\tassert.deepStrictEqual(await configurationCache.read(cacheKey), '');\n\t});\n\n\ttest('configuration default overrides are written in cache', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService, new NullLogService()));\n\t\tawait testObject.initialize();\n\t\ttestObject.reload();\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerDefaultConfigurations([{ overrides: { 'test.configurationDefaultsOverride': 'newoverrideValue' } }]);\n\t\tawait promise;\n\n\t\tconst actual = JSON.parse(await configurationCache.read(cacheKey));\n\t\tassert.deepStrictEqual(actual, { 'test.configurationDefaultsOverride': 'newoverrideValue' });\n\t});\n\n\ttest('configuration default overrides are removed from cache if there are no overrides', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService, new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'test.configurationDefaultsOverride',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'test.configurationDefaultsOverride1': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'defaultValue',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tawait promise;\n\n\t\tassert.deepStrictEqual(await configurationCache.read(cacheKey), '');\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
