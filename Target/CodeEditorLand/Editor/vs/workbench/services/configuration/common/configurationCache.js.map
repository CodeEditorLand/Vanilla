{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/common/configurationCache.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationCache, ConfigurationKey } from './configuration.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { FileOperationError, FileOperationResult, IFileService } from '../../../../platform/files/common/files.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { Queue } from '../../../../base/common/async.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\n\nexport class ConfigurationCache implements IConfigurationCache {\n\n\tprivate readonly cacheHome: URI;\n\tprivate readonly cachedConfigurations: Map<string, CachedConfiguration> = new Map<string, CachedConfiguration>();\n\n\tconstructor(\n\t\tprivate readonly donotCacheResourcesWithSchemes: string[],\n\t\tenvironmentService: IEnvironmentService,\n\t\tprivate readonly fileService: IFileService\n\t) {\n\t\tthis.cacheHome = environmentService.cacheHome;\n\t}\n\n\tneedsCaching(resource: URI): boolean {\n\t\t// Cache all non native resources\n\t\treturn !this.donotCacheResourcesWithSchemes.includes(resource.scheme);\n\t}\n\n\tread(key: ConfigurationKey): Promise<string> {\n\t\treturn this.getCachedConfiguration(key).read();\n\t}\n\n\twrite(key: ConfigurationKey, content: string): Promise<void> {\n\t\treturn this.getCachedConfiguration(key).save(content);\n\t}\n\n\tremove(key: ConfigurationKey): Promise<void> {\n\t\treturn this.getCachedConfiguration(key).remove();\n\t}\n\n\tprivate getCachedConfiguration({ type, key }: ConfigurationKey): CachedConfiguration {\n\t\tconst k = `${type}:${key}`;\n\t\tlet cachedConfiguration = this.cachedConfigurations.get(k);\n\t\tif (!cachedConfiguration) {\n\t\t\tcachedConfiguration = new CachedConfiguration({ type, key }, this.cacheHome, this.fileService);\n\t\t\tthis.cachedConfigurations.set(k, cachedConfiguration);\n\t\t}\n\t\treturn cachedConfiguration;\n\t}\n}\n\nclass CachedConfiguration {\n\n\tprivate queue: Queue<void>;\n\tprivate cachedConfigurationFolderResource: URI;\n\tprivate cachedConfigurationFileResource: URI;\n\n\tconstructor(\n\t\t{ type, key }: ConfigurationKey,\n\t\tcacheHome: URI,\n\t\tprivate readonly fileService: IFileService\n\t) {\n\t\tthis.cachedConfigurationFolderResource = joinPath(cacheHome, 'CachedConfigurations', type, key);\n\t\tthis.cachedConfigurationFileResource = joinPath(this.cachedConfigurationFolderResource, type === 'workspaces' ? 'workspace.json' : 'configuration.json');\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\tasync read(): Promise<string> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.cachedConfigurationFileResource);\n\t\t\treturn content.value.toString();\n\t\t} catch (e) {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tasync save(content: string): Promise<void> {\n\t\tconst created = await this.createCachedFolder();\n\t\tif (created) {\n\t\t\tawait this.queue.queue(async () => {\n\t\t\t\tawait this.fileService.writeFile(this.cachedConfigurationFileResource, VSBuffer.fromString(content));\n\t\t\t});\n\t\t}\n\t}\n\n\tasync remove(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.queue.queue(() => this.fileService.del(this.cachedConfigurationFolderResource, { recursive: true, useTrash: false }));\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createCachedFolder(): Promise<boolean> {\n\t\tif (await this.fileService.exists(this.cachedConfigurationFolderResource)) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tawait this.fileService.createFolder(this.cachedConfigurationFolderResource);\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n"],
  "mappings": ";;AAKA,SAAS,qBAAqB,wBAAwB;AACtD,SAAS,WAAW;AACpB,SAAS,oBAAoB,qBAAqB,oBAAoB;AACtE,SAAS,gBAAgB;AACzB,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,2BAA2B;AAE7B,MAAM,mBAAkD;AAAA,EAK9D,YACkB,gCACjB,oBACiB,aAChB;AAHgB;AAEA;AAEjB,SAAK,YAAY,mBAAmB;AAAA,EACrC;AAAA,EAxBD,OAa+D;AAAA;AAAA;AAAA,EAE7C;AAAA,EACA,uBAAyD,oBAAI,IAAiC;AAAA,EAU/G,aAAa,UAAwB;AAEpC,WAAO,CAAC,KAAK,+BAA+B,SAAS,SAAS,MAAM;AAAA,EACrE;AAAA,EAEA,KAAK,KAAwC;AAC5C,WAAO,KAAK,uBAAuB,GAAG,EAAE,KAAK;AAAA,EAC9C;AAAA,EAEA,MAAM,KAAuB,SAAgC;AAC5D,WAAO,KAAK,uBAAuB,GAAG,EAAE,KAAK,OAAO;AAAA,EACrD;AAAA,EAEA,OAAO,KAAsC;AAC5C,WAAO,KAAK,uBAAuB,GAAG,EAAE,OAAO;AAAA,EAChD;AAAA,EAEQ,uBAAuB,EAAE,MAAM,IAAI,GAA0C;AACpF,UAAM,IAAI,GAAG,IAAI,IAAI,GAAG;AACxB,QAAI,sBAAsB,KAAK,qBAAqB,IAAI,CAAC;AACzD,QAAI,CAAC,qBAAqB;AACzB,4BAAsB,IAAI,oBAAoB,EAAE,MAAM,IAAI,GAAG,KAAK,WAAW,KAAK,WAAW;AAC7F,WAAK,qBAAqB,IAAI,GAAG,mBAAmB;AAAA,IACrD;AACA,WAAO;AAAA,EACR;AACD;AAEA,MAAM,oBAAoB;AAAA,EAMzB,YACC,EAAE,MAAM,IAAI,GACZ,WACiB,aAChB;AADgB;AAEjB,SAAK,oCAAoC,SAAS,WAAW,wBAAwB,MAAM,GAAG;AAC9F,SAAK,kCAAkC,SAAS,KAAK,mCAAmC,SAAS,eAAe,mBAAmB,oBAAoB;AACvJ,SAAK,QAAQ,IAAI,MAAY;AAAA,EAC9B;AAAA,EApED,OAsD0B;AAAA;AAAA;AAAA,EAEjB;AAAA,EACA;AAAA,EACA;AAAA,EAYR,MAAM,OAAwB;AAC7B,QAAI;AACH,YAAM,UAAU,MAAM,KAAK,YAAY,SAAS,KAAK,+BAA+B;AACpF,aAAO,QAAQ,MAAM,SAAS;AAAA,IAC/B,SAAS,GAAG;AACX,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,MAAM,KAAK,SAAgC;AAC1C,UAAM,UAAU,MAAM,KAAK,mBAAmB;AAC9C,QAAI,SAAS;AACZ,YAAM,KAAK,MAAM,MAAM,YAAY;AAClC,cAAM,KAAK,YAAY,UAAU,KAAK,iCAAiC,SAAS,WAAW,OAAO,CAAC;AAAA,MACpG,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,MAAM,SAAwB;AAC7B,QAAI;AACH,YAAM,KAAK,MAAM,MAAM,MAAM,KAAK,YAAY,IAAI,KAAK,mCAAmC,EAAE,WAAW,MAAM,UAAU,MAAM,CAAC,CAAC;AAAA,IAChI,SAAS,OAAO;AACf,UAAyB,MAAO,wBAAwB,oBAAoB,gBAAgB;AAC3F,cAAM;AAAA,MACP;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,qBAAuC;AACpD,QAAI,MAAM,KAAK,YAAY,OAAO,KAAK,iCAAiC,GAAG;AAC1E,aAAO;AAAA,IACR;AACA,QAAI;AACH,YAAM,KAAK,YAAY,aAAa,KAAK,iCAAiC;AAC1E,aAAO;AAAA,IACR,SAAS,OAAO;AACf,aAAO;AAAA,IACR;AAAA,EACD;AACD;",
  "names": []
}
