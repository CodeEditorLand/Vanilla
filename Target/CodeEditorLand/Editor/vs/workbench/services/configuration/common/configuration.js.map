{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/common/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ConfigurationScope } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { refineServiceDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { IAnyWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';\n\nexport const FOLDER_CONFIG_FOLDER_NAME = '.vscode';\nexport const FOLDER_SETTINGS_NAME = 'settings';\nexport const FOLDER_SETTINGS_PATH = `${FOLDER_CONFIG_FOLDER_NAME}/${FOLDER_SETTINGS_NAME}.json`;\n\nexport const defaultSettingsSchemaId = 'vscode://schemas/settings/default';\nexport const userSettingsSchemaId = 'vscode://schemas/settings/user';\nexport const profileSettingsSchemaId = 'vscode://schemas/settings/profile';\nexport const machineSettingsSchemaId = 'vscode://schemas/settings/machine';\nexport const workspaceSettingsSchemaId = 'vscode://schemas/settings/workspace';\nexport const folderSettingsSchemaId = 'vscode://schemas/settings/folder';\nexport const launchSchemaId = 'vscode://schemas/launch';\nexport const tasksSchemaId = 'vscode://schemas/tasks';\n\nexport const APPLICATION_SCOPES = [ConfigurationScope.APPLICATION];\nexport const PROFILE_SCOPES = [ConfigurationScope.MACHINE, ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\nexport const LOCAL_MACHINE_PROFILE_SCOPES = [ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE];\nexport const LOCAL_MACHINE_SCOPES = [ConfigurationScope.APPLICATION, ...LOCAL_MACHINE_PROFILE_SCOPES];\nexport const REMOTE_MACHINE_SCOPES = [ConfigurationScope.MACHINE, ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\nexport const WORKSPACE_SCOPES = [ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\nexport const FOLDER_SCOPES = [ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\n\nexport const TASKS_CONFIGURATION_KEY = 'tasks';\nexport const LAUNCH_CONFIGURATION_KEY = 'launch';\n\nexport const WORKSPACE_STANDALONE_CONFIGURATIONS = Object.create(null);\nWORKSPACE_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${TASKS_CONFIGURATION_KEY}.json`;\nWORKSPACE_STANDALONE_CONFIGURATIONS[LAUNCH_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${LAUNCH_CONFIGURATION_KEY}.json`;\nexport const USER_STANDALONE_CONFIGURATIONS = Object.create(null);\nUSER_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${TASKS_CONFIGURATION_KEY}.json`;\n\nexport type ConfigurationKey = { type: 'defaults' | 'user' | 'workspaces' | 'folder'; key: string };\n\nexport interface IConfigurationCache {\n\n\tneedsCaching(resource: URI): boolean;\n\tread(key: ConfigurationKey): Promise<string>;\n\twrite(key: ConfigurationKey, content: string): Promise<void>;\n\tremove(key: ConfigurationKey): Promise<void>;\n\n}\n\nexport type RestrictedSettings = {\n\tdefault: ReadonlyArray<string>;\n\tapplication?: ReadonlyArray<string>;\n\tuserLocal?: ReadonlyArray<string>;\n\tuserRemote?: ReadonlyArray<string>;\n\tworkspace?: ReadonlyArray<string>;\n\tworkspaceFolder?: ResourceMap<ReadonlyArray<string>>;\n};\n\nexport const IWorkbenchConfigurationService = refineServiceDecorator<IConfigurationService, IWorkbenchConfigurationService>(IConfigurationService);\nexport interface IWorkbenchConfigurationService extends IConfigurationService {\n\t/**\n\t * Restricted settings defined in each configuration target\n\t */\n\treadonly restrictedSettings: RestrictedSettings;\n\n\t/**\n\t * Event that triggers when the restricted settings changes\n\t */\n\treadonly onDidChangeRestrictedSettings: Event<RestrictedSettings>;\n\n\t/**\n\t * A promise that resolves when the remote configuration is loaded in a remote window.\n\t * The promise is resolved immediately if the window is not remote.\n\t */\n\twhenRemoteConfigurationLoaded(): Promise<void>;\n\n\t/**\n\t * Initialize configuration service for the given workspace\n\t * @param arg workspace Identifier\n\t */\n\tinitialize(arg: IAnyWorkspaceIdentifier): Promise<void>;\n\n\t/**\n\t * Returns true if the setting can be applied for all profiles otherwise false.\n\t * @param setting\n\t */\n\tisSettingAppliedForAllProfiles(setting: string): boolean;\n}\n\nexport const TASKS_DEFAULT = '{\\n\\t\\\"version\\\": \\\"2.0.0\\\",\\n\\t\\\"tasks\\\": []\\n}';\n\nexport const APPLY_ALL_PROFILES_SETTING = 'workbench.settings.applyToAllProfiles';\n"],
  "mappings": "AAKA,SAAS,0BAA0B;AACnC,SAAS,WAAW;AACpB,SAAS,6BAA6B;AACtC,SAAS,8BAA8B;AACvC,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,+BAA+B;AAEjC,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB,GAAG,yBAAyB,IAAI,oBAAoB;AAEjF,MAAM,0BAA0B;AAChC,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,4BAA4B;AAClC,MAAM,yBAAyB;AAC/B,MAAM,iBAAiB;AACvB,MAAM,gBAAgB;AAEtB,MAAM,qBAAqB,CAAC,mBAAmB,WAAW;AAC1D,MAAM,iBAAiB,CAAC,mBAAmB,SAAS,mBAAmB,QAAQ,mBAAmB,UAAU,mBAAmB,sBAAsB,mBAAmB,mBAAmB;AAC3L,MAAM,+BAA+B,CAAC,mBAAmB,QAAQ,mBAAmB,UAAU,mBAAmB,oBAAoB;AACrI,MAAM,uBAAuB,CAAC,mBAAmB,aAAa,GAAG,4BAA4B;AAC7F,MAAM,wBAAwB,CAAC,mBAAmB,SAAS,mBAAmB,QAAQ,mBAAmB,UAAU,mBAAmB,sBAAsB,mBAAmB,mBAAmB;AAClM,MAAM,mBAAmB,CAAC,mBAAmB,QAAQ,mBAAmB,UAAU,mBAAmB,sBAAsB,mBAAmB,mBAAmB;AACjK,MAAM,gBAAgB,CAAC,mBAAmB,UAAU,mBAAmB,sBAAsB,mBAAmB,mBAAmB;AAEnI,MAAM,0BAA0B;AAChC,MAAM,2BAA2B;AAEjC,MAAM,sCAAsC,uBAAO,OAAO,IAAI;AACrE,oCAAoC,uBAAuB,IAAI,GAAG,yBAAyB,IAAI,uBAAuB;AACtH,oCAAoC,wBAAwB,IAAI,GAAG,yBAAyB,IAAI,wBAAwB;AACjH,MAAM,iCAAiC,uBAAO,OAAO,IAAI;AAChE,+BAA+B,uBAAuB,IAAI,GAAG,uBAAuB;AAsB7E,MAAM,iCAAiC,uBAA8E,qBAAqB;AA+B1I,MAAM,gBAAgB;AAEtB,MAAM,6BAA6B;",
  "names": []
}
