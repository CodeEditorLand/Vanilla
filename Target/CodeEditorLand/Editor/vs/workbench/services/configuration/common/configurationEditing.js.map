{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/common/configurationEditing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as json from '../../../../base/common/json.js';\nimport { setProperty } from '../../../../base/common/jsonEdit.js';\nimport { Queue } from '../../../../base/common/async.js';\nimport { Edit, FormattingOptions } from '../../../../base/common/jsonFormatter.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { IConfigurationUpdateOptions, IConfigurationUpdateOverrides } from '../../../../platform/configuration/common/configuration.js';\nimport { FOLDER_SETTINGS_PATH, WORKSPACE_STANDALONE_CONFIGURATIONS, TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY, USER_STANDALONE_CONFIGURATIONS, TASKS_DEFAULT, FOLDER_SCOPES, IWorkbenchConfigurationService } from './configuration.js';\nimport { FileOperationError, FileOperationResult, IFileService } from '../../../../platform/files/common/files.js';\nimport { IResolvedTextEditorModel, ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope, keyFromOverrideIdentifiers, OVERRIDE_PROPERTY_REGEX } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IOpenSettingsOptions, IPreferencesService } from '../../preferences/common/preferences.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IReference } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { EditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { Selection } from '../../../../editor/common/core/selection.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { ErrorNoTelemetry } from '../../../../base/common/errors.js';\n\nexport const enum ConfigurationEditingErrorCode {\n\n\t/**\n\t * Error when trying to write a configuration key that is not registered.\n\t */\n\tERROR_UNKNOWN_KEY,\n\n\t/**\n\t * Error when trying to write an application setting into workspace settings.\n\t */\n\tERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION,\n\n\t/**\n\t * Error when trying to write a machne setting into workspace settings.\n\t */\n\tERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE,\n\n\t/**\n\t * Error when trying to write an invalid folder configuration key to folder settings.\n\t */\n\tERROR_INVALID_FOLDER_CONFIGURATION,\n\n\t/**\n\t * Error when trying to write to user target but not supported for provided key.\n\t */\n\tERROR_INVALID_USER_TARGET,\n\n\t/**\n\t * Error when trying to write to user target but not supported for provided key.\n\t */\n\tERROR_INVALID_WORKSPACE_TARGET,\n\n\t/**\n\t * Error when trying to write a configuration key to folder target\n\t */\n\tERROR_INVALID_FOLDER_TARGET,\n\n\t/**\n\t * Error when trying to write to language specific setting but not supported for preovided key\n\t */\n\tERROR_INVALID_RESOURCE_LANGUAGE_CONFIGURATION,\n\n\t/**\n\t * Error when trying to write to the workspace configuration without having a workspace opened.\n\t */\n\tERROR_NO_WORKSPACE_OPENED,\n\n\t/**\n\t * Error when trying to write and save to the configuration file while it is dirty in the editor.\n\t */\n\tERROR_CONFIGURATION_FILE_DIRTY,\n\n\t/**\n\t * Error when trying to write and save to the configuration file while it is not the latest in the disk.\n\t */\n\tERROR_CONFIGURATION_FILE_MODIFIED_SINCE,\n\n\t/**\n\t * Error when trying to write to a configuration file that contains JSON errors.\n\t */\n\tERROR_INVALID_CONFIGURATION,\n\n\t/**\n\t * Error when trying to write a policy configuration\n\t */\n\tERROR_POLICY_CONFIGURATION,\n\n\t/**\n\t * Internal Error.\n\t */\n\tERROR_INTERNAL\n}\n\nexport class ConfigurationEditingError extends ErrorNoTelemetry {\n\tconstructor(message: string, public code: ConfigurationEditingErrorCode) {\n\t\tsuper(message);\n\t}\n}\n\nexport interface IConfigurationValue {\n\tkey: string;\n\tvalue: any;\n}\n\nexport interface IConfigurationEditingOptions extends IConfigurationUpdateOptions {\n\t/**\n\t * Scope of configuration to be written into.\n\t */\n\tscopes?: IConfigurationUpdateOverrides;\n}\n\nexport const enum EditableConfigurationTarget {\n\tUSER_LOCAL = 1,\n\tUSER_REMOTE,\n\tWORKSPACE,\n\tWORKSPACE_FOLDER\n}\n\ninterface IConfigurationEditOperation extends IConfigurationValue {\n\ttarget: EditableConfigurationTarget;\n\tjsonPath: json.JSONPath;\n\tresource?: URI;\n\tworkspaceStandAloneConfigurationKey?: string;\n}\n\nexport class ConfigurationEditing {\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate queue: Queue<void>;\n\n\tconstructor(\n\t\tprivate readonly remoteSettingsResource: URI | null,\n\t\t@IWorkbenchConfigurationService private readonly configurationService: IWorkbenchConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\tasync writeConfiguration(target: EditableConfigurationTarget, value: IConfigurationValue, options: IConfigurationEditingOptions = {}): Promise<void> {\n\t\tconst operation = this.getConfigurationEditOperation(target, value, options.scopes || {});\n\t\t// queue up writes to prevent race conditions\n\t\treturn this.queue.queue(async () => {\n\t\t\ttry {\n\t\t\t\tawait this.doWriteConfiguration(operation, options);\n\t\t\t} catch (error) {\n\t\t\t\tif (options.donotNotifyError) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tawait this.onError(error, operation, options.scopes);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async doWriteConfiguration(operation: IConfigurationEditOperation, options: IConfigurationEditingOptions): Promise<void> {\n\t\tawait this.validate(operation.target, operation, !options.handleDirtyFile, options.scopes || {});\n\t\tconst resource: URI = operation.resource!;\n\t\tconst reference = await this.resolveModelReference(resource);\n\t\ttry {\n\t\t\tconst formattingOptions = this.getFormattingOptions(reference.object.textEditorModel);\n\t\t\tawait this.updateConfiguration(operation, reference.object.textEditorModel, formattingOptions, options);\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t}\n\n\tprivate async updateConfiguration(operation: IConfigurationEditOperation, model: ITextModel, formattingOptions: FormattingOptions, options: IConfigurationEditingOptions): Promise<void> {\n\t\tif (this.hasParseErrors(model.getValue(), operation)) {\n\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION, operation.target, operation);\n\t\t}\n\n\t\tif (this.textFileService.isDirty(model.uri) && options.handleDirtyFile) {\n\t\t\tswitch (options.handleDirtyFile) {\n\t\t\t\tcase 'save': await this.save(model, operation); break;\n\t\t\t\tcase 'revert': await this.textFileService.revert(model.uri); break;\n\t\t\t}\n\t\t}\n\n\t\tconst edit = this.getEdits(operation, model.getValue(), formattingOptions)[0];\n\t\tif (edit && this.applyEditsToBuffer(edit, model)) {\n\t\t\tawait this.save(model, operation);\n\t\t}\n\t}\n\n\tprivate async save(model: ITextModel, operation: IConfigurationEditOperation): Promise<void> {\n\t\ttry {\n\t\t\tawait this.textFileService.save(model.uri, { ignoreErrorHandler: true });\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_MODIFIED_SINCE, operation.target, operation);\n\t\t\t}\n\t\t\tthrow new ConfigurationEditingError(nls.localize('fsError', \"Error while writing to {0}. {1}\", this.stringifyTarget(operation.target), error.message), ConfigurationEditingErrorCode.ERROR_INTERNAL);\n\t\t}\n\t}\n\n\tprivate applyEditsToBuffer(edit: Edit, model: ITextModel): boolean {\n\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\tconst endPosition = model.getPositionAt(edit.offset + edit.length);\n\t\tconst range = new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t\tconst currentText = model.getValueInRange(range);\n\t\tif (edit.content !== currentText) {\n\t\t\tconst editOperation = currentText ? EditOperation.replace(range, edit.content) : EditOperation.insert(startPosition, edit.content);\n\t\t\tmodel.pushEditOperations([new Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], () => []);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate getEdits({ value, jsonPath }: IConfigurationEditOperation, modelContent: string, formattingOptions: FormattingOptions): Edit[] {\n\t\tif (jsonPath.length) {\n\t\t\treturn setProperty(modelContent, jsonPath, value, formattingOptions);\n\t\t}\n\n\t\t// Without jsonPath, the entire configuration file is being replaced, so we just use JSON.stringify\n\t\tconst content = JSON.stringify(value, null, formattingOptions.insertSpaces && formattingOptions.tabSize ? ' '.repeat(formattingOptions.tabSize) : '\\t');\n\t\treturn [{\n\t\t\tcontent,\n\t\t\tlength: modelContent.length,\n\t\t\toffset: 0\n\t\t}];\n\t}\n\n\tprivate getFormattingOptions(model: ITextModel): FormattingOptions {\n\t\tconst { insertSpaces, tabSize } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\treturn { insertSpaces, tabSize, eol };\n\t}\n\n\tprivate async onError(error: ConfigurationEditingError, operation: IConfigurationEditOperation, scopes: IConfigurationUpdateOverrides | undefined): Promise<void> {\n\t\tswitch (error.code) {\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION:\n\t\t\t\tthis.onInvalidConfigurationError(error, operation);\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY:\n\t\t\t\tthis.onConfigurationFileDirtyError(error, operation, scopes);\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_MODIFIED_SINCE:\n\t\t\t\treturn this.doWriteConfiguration(operation, { scopes, handleDirtyFile: 'revert' });\n\t\t\tdefault:\n\t\t\t\tthis.notificationService.error(error.message);\n\t\t}\n\t}\n\n\tprivate onInvalidConfigurationError(error: ConfigurationEditingError, operation: IConfigurationEditOperation,): void {\n\t\tconst openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? nls.localize('openTasksConfiguration', \"Open Tasks Configuration\")\n\t\t\t: operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? nls.localize('openLaunchConfiguration', \"Open Launch Configuration\")\n\t\t\t\t: null;\n\t\tif (openStandAloneConfigurationActionLabel) {\n\t\t\tthis.notificationService.prompt(Severity.Error, error.message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: openStandAloneConfigurationActionLabel,\n\t\t\t\t\trun: () => this.openFile(operation.resource!)\n\t\t\t\t}]\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationService.prompt(Severity.Error, error.message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('open', \"Open Settings\"),\n\t\t\t\t\trun: () => this.openSettings(operation)\n\t\t\t\t}]\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate onConfigurationFileDirtyError(error: ConfigurationEditingError, operation: IConfigurationEditOperation, scopes: IConfigurationUpdateOverrides | undefined): void {\n\t\tconst openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? nls.localize('openTasksConfiguration', \"Open Tasks Configuration\")\n\t\t\t: operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? nls.localize('openLaunchConfiguration', \"Open Launch Configuration\")\n\t\t\t\t: null;\n\t\tif (openStandAloneConfigurationActionLabel) {\n\t\t\tthis.notificationService.prompt(Severity.Error, error.message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('saveAndRetry', \"Save and Retry\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tconst key = operation.key ? `${operation.workspaceStandAloneConfigurationKey}.${operation.key}` : operation.workspaceStandAloneConfigurationKey!;\n\t\t\t\t\t\tthis.writeConfiguration(operation.target, { key, value: operation.value }, { handleDirtyFile: 'save', scopes });\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: openStandAloneConfigurationActionLabel,\n\t\t\t\t\trun: () => this.openFile(operation.resource!)\n\t\t\t\t}]\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationService.prompt(Severity.Error, error.message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('saveAndRetry', \"Save and Retry\"),\n\t\t\t\t\trun: () => this.writeConfiguration(operation.target, { key: operation.key, value: operation.value }, { handleDirtyFile: 'save', scopes })\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('open', \"Open Settings\"),\n\t\t\t\t\trun: () => this.openSettings(operation)\n\t\t\t\t}]\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate openSettings(operation: IConfigurationEditOperation): void {\n\t\tconst options: IOpenSettingsOptions = { jsonEditor: true };\n\t\tswitch (operation.target) {\n\t\t\tcase EditableConfigurationTarget.USER_LOCAL:\n\t\t\t\tthis.preferencesService.openUserSettings(options);\n\t\t\t\tbreak;\n\t\t\tcase EditableConfigurationTarget.USER_REMOTE:\n\t\t\t\tthis.preferencesService.openRemoteSettings(options);\n\t\t\t\tbreak;\n\t\t\tcase EditableConfigurationTarget.WORKSPACE:\n\t\t\t\tthis.preferencesService.openWorkspaceSettings(options);\n\t\t\t\tbreak;\n\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tif (operation.resource) {\n\t\t\t\t\tconst workspaceFolder = this.contextService.getWorkspaceFolder(operation.resource);\n\t\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\t\tthis.preferencesService.openFolderSettings({ folderUri: workspaceFolder.uri, jsonEditor: true });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate openFile(resource: URI): void {\n\t\tthis.editorService.openEditor({ resource, options: { pinned: true } });\n\t}\n\n\tprivate toConfigurationEditingError(code: ConfigurationEditingErrorCode, target: EditableConfigurationTarget, operation: IConfigurationEditOperation): ConfigurationEditingError {\n\t\tconst message = this.toErrorMessage(code, target, operation);\n\t\treturn new ConfigurationEditingError(message, code);\n\t}\n\n\tprivate toErrorMessage(error: ConfigurationEditingErrorCode, target: EditableConfigurationTarget, operation: IConfigurationEditOperation): string {\n\t\tswitch (error) {\n\n\t\t\t// API constraints\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_POLICY_CONFIGURATION: return nls.localize('errorPolicyConfiguration', \"Unable to write {0} because it is configured in system policy.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY: return nls.localize('errorUnknownKey', \"Unable to write to {0} because {1} is not a registered configuration.\", this.stringifyTarget(target), operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION: return nls.localize('errorInvalidWorkspaceConfigurationApplication', \"Unable to write {0} to Workspace Settings. This setting can be written only into User settings.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE: return nls.localize('errorInvalidWorkspaceConfigurationMachine', \"Unable to write {0} to Workspace Settings. This setting can be written only into User settings.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_CONFIGURATION: return nls.localize('errorInvalidFolderConfiguration', \"Unable to write to Folder Settings because {0} does not support the folder resource scope.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_USER_TARGET: return nls.localize('errorInvalidUserTarget', \"Unable to write to User Settings because {0} does not support for global scope.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_TARGET: return nls.localize('errorInvalidWorkspaceTarget', \"Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET: return nls.localize('errorInvalidFolderTarget', \"Unable to write to Folder Settings because no resource is provided.\");\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_RESOURCE_LANGUAGE_CONFIGURATION: return nls.localize('errorInvalidResourceLanguageConfiguration', \"Unable to write to Language Settings because {0} is not a resource language setting.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED: return nls.localize('errorNoWorkspaceOpened', \"Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.\", this.stringifyTarget(target));\n\n\t\t\t// User issues\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION: {\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorInvalidTaskConfiguration', \"Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again.\");\n\t\t\t\t}\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorInvalidLaunchConfiguration', \"Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again.\");\n\t\t\t\t}\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase EditableConfigurationTarget.USER_LOCAL:\n\t\t\t\t\t\treturn nls.localize('errorInvalidConfiguration', \"Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again.\");\n\t\t\t\t\tcase EditableConfigurationTarget.USER_REMOTE:\n\t\t\t\t\t\treturn nls.localize('errorInvalidRemoteConfiguration', \"Unable to write into remote user settings. Please open the remote user settings to correct errors/warnings in it and try again.\");\n\t\t\t\t\tcase EditableConfigurationTarget.WORKSPACE:\n\t\t\t\t\t\treturn nls.localize('errorInvalidConfigurationWorkspace', \"Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again.\");\n\t\t\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER: {\n\t\t\t\t\t\tlet workspaceFolderName: string = '<<unknown>>';\n\t\t\t\t\t\tif (operation.resource) {\n\t\t\t\t\t\t\tconst folder = this.contextService.getWorkspaceFolder(operation.resource);\n\t\t\t\t\t\t\tif (folder) {\n\t\t\t\t\t\t\t\tworkspaceFolderName = folder.name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn nls.localize('errorInvalidConfigurationFolder', \"Unable to write into folder settings. Please open the '{0}' folder settings to correct errors/warnings in it and try again.\", workspaceFolderName);\n\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY: {\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorTasksConfigurationFileDirty', \"Unable to write into tasks configuration file because the file has unsaved changes. Please save it first and then try again.\");\n\t\t\t\t}\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorLaunchConfigurationFileDirty', \"Unable to write into launch configuration file because the file has unsaved changes. Please save it first and then try again.\");\n\t\t\t\t}\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase EditableConfigurationTarget.USER_LOCAL:\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileDirty', \"Unable to write into user settings because the file has unsaved changes. Please save the user settings file first and then try again.\");\n\t\t\t\t\tcase EditableConfigurationTarget.USER_REMOTE:\n\t\t\t\t\t\treturn nls.localize('errorRemoteConfigurationFileDirty', \"Unable to write into remote user settings because the file has unsaved changes. Please save the remote user settings file first and then try again.\");\n\t\t\t\t\tcase EditableConfigurationTarget.WORKSPACE:\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileDirtyWorkspace', \"Unable to write into workspace settings because the file has unsaved changes. Please save the workspace settings file first and then try again.\");\n\t\t\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER: {\n\t\t\t\t\t\tlet workspaceFolderName: string = '<<unknown>>';\n\t\t\t\t\t\tif (operation.resource) {\n\t\t\t\t\t\t\tconst folder = this.contextService.getWorkspaceFolder(operation.resource);\n\t\t\t\t\t\t\tif (folder) {\n\t\t\t\t\t\t\t\tworkspaceFolderName = folder.name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileDirtyFolder', \"Unable to write into folder settings because the file has unsaved changes. Please save the '{0}' folder settings file first and then try again.\", workspaceFolderName);\n\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_MODIFIED_SINCE:\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorTasksConfigurationFileModifiedSince', \"Unable to write into tasks configuration file because the content of the file is newer.\");\n\t\t\t\t}\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorLaunchConfigurationFileModifiedSince', \"Unable to write into launch configuration file because the content of the file is newer.\");\n\t\t\t\t}\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase EditableConfigurationTarget.USER_LOCAL:\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileModifiedSince', \"Unable to write into user settings because the content of the file is newer.\");\n\t\t\t\t\tcase EditableConfigurationTarget.USER_REMOTE:\n\t\t\t\t\t\treturn nls.localize('errorRemoteConfigurationFileModifiedSince', \"Unable to write into remote user settings because the content of the file is newer.\");\n\t\t\t\t\tcase EditableConfigurationTarget.WORKSPACE:\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileModifiedSinceWorkspace', \"Unable to write into workspace settings because the content of the file is newer.\");\n\t\t\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileModifiedSinceFolder', \"Unable to write into folder settings because the content of the file is newer.\");\n\t\t\t\t}\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INTERNAL: return nls.localize('errorUnknown', \"Unable to write to {0} because of an internal error.\", this.stringifyTarget(target));\n\t\t}\n\t}\n\n\tprivate stringifyTarget(target: EditableConfigurationTarget): string {\n\t\tswitch (target) {\n\t\t\tcase EditableConfigurationTarget.USER_LOCAL:\n\t\t\t\treturn nls.localize('userTarget', \"User Settings\");\n\t\t\tcase EditableConfigurationTarget.USER_REMOTE:\n\t\t\t\treturn nls.localize('remoteUserTarget', \"Remote User Settings\");\n\t\t\tcase EditableConfigurationTarget.WORKSPACE:\n\t\t\t\treturn nls.localize('workspaceTarget', \"Workspace Settings\");\n\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn nls.localize('folderTarget', \"Folder Settings\");\n\t\t\tdefault:\n\t\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate defaultResourceValue(resource: URI): string {\n\t\tconst basename: string = this.uriIdentityService.extUri.basename(resource);\n\t\tconst configurationValue: string = basename.substr(0, basename.length - this.uriIdentityService.extUri.extname(resource).length);\n\t\tswitch (configurationValue) {\n\t\t\tcase TASKS_CONFIGURATION_KEY: return TASKS_DEFAULT;\n\t\t\tdefault: return '{}';\n\t\t}\n\t}\n\n\tprivate async resolveModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst exists = await this.fileService.exists(resource);\n\t\tif (!exists) {\n\t\t\tawait this.textFileService.write(resource, this.defaultResourceValue(resource), { encoding: 'utf8' });\n\t\t}\n\t\treturn this.textModelResolverService.createModelReference(resource);\n\t}\n\n\tprivate hasParseErrors(content: string, operation: IConfigurationEditOperation): boolean {\n\t\t// If we write to a workspace standalone file and replace the entire contents (no key provided)\n\t\t// we can return here because any parse errors can safely be ignored since all contents are replaced\n\t\tif (operation.workspaceStandAloneConfigurationKey && !operation.key) {\n\t\t\treturn false;\n\t\t}\n\t\tconst parseErrors: json.ParseError[] = [];\n\t\tjson.parse(content, parseErrors, { allowTrailingComma: true, allowEmptyContent: true });\n\t\treturn parseErrors.length > 0;\n\t}\n\n\tprivate async validate(target: EditableConfigurationTarget, operation: IConfigurationEditOperation, checkDirty: boolean, overrides: IConfigurationUpdateOverrides): Promise<void> {\n\n\t\tif (this.configurationService.inspect(operation.key).policyValue !== undefined) {\n\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_POLICY_CONFIGURATION, target, operation);\n\t\t}\n\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\tconst configurationScope = configurationProperties[operation.key]?.scope;\n\n\t\t/**\n\t\t * Key to update must be a known setting from the registry unless\n\t\t * \t- the key is standalone configuration (eg: tasks, debug)\n\t\t * \t- the key is an override identifier\n\t\t * \t- the operation is to delete the key\n\t\t */\n\t\tif (!operation.workspaceStandAloneConfigurationKey) {\n\t\t\tconst validKeys = this.configurationService.keys().default;\n\t\t\tif (validKeys.indexOf(operation.key) < 0 && !OVERRIDE_PROPERTY_REGEX.test(operation.key) && operation.value !== undefined) {\n\t\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY, target, operation);\n\t\t\t}\n\t\t}\n\n\t\tif (operation.workspaceStandAloneConfigurationKey) {\n\t\t\t// Global launches are not supported\n\t\t\tif ((operation.workspaceStandAloneConfigurationKey !== TASKS_CONFIGURATION_KEY) && (target === EditableConfigurationTarget.USER_LOCAL || target === EditableConfigurationTarget.USER_REMOTE)) {\n\t\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_INVALID_USER_TARGET, target, operation);\n\t\t\t}\n\t\t}\n\n\t\t// Target cannot be workspace or folder if no workspace opened\n\t\tif ((target === EditableConfigurationTarget.WORKSPACE || target === EditableConfigurationTarget.WORKSPACE_FOLDER) && this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED, target, operation);\n\t\t}\n\n\t\tif (target === EditableConfigurationTarget.WORKSPACE) {\n\t\t\tif (!operation.workspaceStandAloneConfigurationKey && !OVERRIDE_PROPERTY_REGEX.test(operation.key)) {\n\t\t\t\tif (configurationScope === ConfigurationScope.APPLICATION) {\n\t\t\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION, target, operation);\n\t\t\t\t}\n\t\t\t\tif (configurationScope === ConfigurationScope.MACHINE) {\n\t\t\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE, target, operation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (target === EditableConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\tif (!operation.resource) {\n\t\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET, target, operation);\n\t\t\t}\n\n\t\t\tif (!operation.workspaceStandAloneConfigurationKey && !OVERRIDE_PROPERTY_REGEX.test(operation.key)) {\n\t\t\t\tif (configurationScope !== undefined && !FOLDER_SCOPES.includes(configurationScope)) {\n\t\t\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_CONFIGURATION, target, operation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (overrides.overrideIdentifiers?.length) {\n\t\t\tif (configurationScope !== ConfigurationScope.LANGUAGE_OVERRIDABLE) {\n\t\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_INVALID_RESOURCE_LANGUAGE_CONFIGURATION, target, operation);\n\t\t\t}\n\t\t}\n\n\t\tif (!operation.resource) {\n\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET, target, operation);\n\t\t}\n\n\t\tif (checkDirty && this.textFileService.isDirty(operation.resource)) {\n\t\t\tthrow this.toConfigurationEditingError(ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY, target, operation);\n\t\t}\n\n\t}\n\n\tprivate getConfigurationEditOperation(target: EditableConfigurationTarget, config: IConfigurationValue, overrides: IConfigurationUpdateOverrides): IConfigurationEditOperation {\n\n\t\t// Check for standalone workspace configurations\n\t\tif (config.key) {\n\t\t\tconst standaloneConfigurationMap = target === EditableConfigurationTarget.USER_LOCAL ? USER_STANDALONE_CONFIGURATIONS : WORKSPACE_STANDALONE_CONFIGURATIONS;\n\t\t\tconst standaloneConfigurationKeys = Object.keys(standaloneConfigurationMap);\n\t\t\tfor (const key of standaloneConfigurationKeys) {\n\t\t\t\tconst resource = this.getConfigurationFileResource(target, key, standaloneConfigurationMap[key], overrides.resource, undefined);\n\n\t\t\t\t// Check for prefix\n\t\t\t\tif (config.key === key) {\n\t\t\t\t\tconst jsonPath = this.isWorkspaceConfigurationResource(resource) ? [key] : [];\n\t\t\t\t\treturn { key: jsonPath[jsonPath.length - 1], jsonPath, value: config.value, resource: resource ?? undefined, workspaceStandAloneConfigurationKey: key, target };\n\t\t\t\t}\n\n\t\t\t\t// Check for prefix.<setting>\n\t\t\t\tconst keyPrefix = `${key}.`;\n\t\t\t\tif (config.key.indexOf(keyPrefix) === 0) {\n\t\t\t\t\tconst jsonPath = this.isWorkspaceConfigurationResource(resource) ? [key, config.key.substr(keyPrefix.length)] : [config.key.substr(keyPrefix.length)];\n\t\t\t\t\treturn { key: jsonPath[jsonPath.length - 1], jsonPath, value: config.value, resource: resource ?? undefined, workspaceStandAloneConfigurationKey: key, target };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst key = config.key;\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\tconst configurationScope = configurationProperties[key]?.scope;\n\t\tlet jsonPath = overrides.overrideIdentifiers?.length ? [keyFromOverrideIdentifiers(overrides.overrideIdentifiers), key] : [key];\n\t\tif (target === EditableConfigurationTarget.USER_LOCAL || target === EditableConfigurationTarget.USER_REMOTE) {\n\t\t\treturn { key, jsonPath, value: config.value, resource: this.getConfigurationFileResource(target, key, '', null, configurationScope) ?? undefined, target };\n\t\t}\n\n\t\tconst resource = this.getConfigurationFileResource(target, key, FOLDER_SETTINGS_PATH, overrides.resource, configurationScope);\n\t\tif (this.isWorkspaceConfigurationResource(resource)) {\n\t\t\tjsonPath = ['settings', ...jsonPath];\n\t\t}\n\t\treturn { key, jsonPath, value: config.value, resource: resource ?? undefined, target };\n\t}\n\n\tprivate isWorkspaceConfigurationResource(resource: URI | null): boolean {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\treturn !!(workspace.configuration && resource && workspace.configuration.fsPath === resource.fsPath);\n\t}\n\n\tprivate getConfigurationFileResource(target: EditableConfigurationTarget, key: string, relativePath: string, resource: URI | null | undefined, scope: ConfigurationScope | undefined): URI | null {\n\t\tif (target === EditableConfigurationTarget.USER_LOCAL) {\n\t\t\tif (key === TASKS_CONFIGURATION_KEY) {\n\t\t\t\treturn this.userDataProfileService.currentProfile.tasksResource;\n\t\t\t} else {\n\t\t\t\tif (!this.userDataProfileService.currentProfile.isDefault && this.configurationService.isSettingAppliedForAllProfiles(key)) {\n\t\t\t\t\treturn this.userDataProfilesService.defaultProfile.settingsResource;\n\t\t\t\t}\n\t\t\t\treturn this.userDataProfileService.currentProfile.settingsResource;\n\t\t\t}\n\t\t}\n\t\tif (target === EditableConfigurationTarget.USER_REMOTE) {\n\t\t\treturn this.remoteSettingsResource;\n\t\t}\n\t\tconst workbenchState = this.contextService.getWorkbenchState();\n\t\tif (workbenchState !== WorkbenchState.EMPTY) {\n\n\t\t\tconst workspace = this.contextService.getWorkspace();\n\n\t\t\tif (target === EditableConfigurationTarget.WORKSPACE) {\n\t\t\t\tif (workbenchState === WorkbenchState.WORKSPACE) {\n\t\t\t\t\treturn workspace.configuration ?? null;\n\t\t\t\t}\n\t\t\t\tif (workbenchState === WorkbenchState.FOLDER) {\n\t\t\t\t\treturn workspace.folders[0].toResource(relativePath);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (target === EditableConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\t\tif (resource) {\n\t\t\t\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\t\t\t\tif (folder) {\n\t\t\t\t\t\treturn folder.toResource(relativePath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ConfigurationEditingErrorCode", "EditableConfigurationTarget", "key", "resource", "jsonPath"]
}
