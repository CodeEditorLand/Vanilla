{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/common/configurationModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../../base/common/objects.js';\nimport { toValuesTree, IConfigurationModel, IConfigurationOverrides, IConfigurationValue, IConfigurationChange } from '../../../../platform/configuration/common/configuration.js';\nimport { Configuration as BaseConfiguration, ConfigurationModelParser, ConfigurationModel, ConfigurationParseOptions } from '../../../../platform/configuration/common/configurationModels.js';\nimport { IStoredWorkspaceFolder } from '../../../../platform/workspaces/common/workspaces.js';\nimport { Workspace } from '../../../../platform/workspace/common/workspace.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { isBoolean } from '../../../../base/common/types.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport class WorkspaceConfigurationModelParser extends ConfigurationModelParser {\n\n\tprivate _folders: IStoredWorkspaceFolder[] = [];\n\tprivate _transient: boolean = false;\n\tprivate _settingsModelParser: ConfigurationModelParser;\n\tprivate _launchModel: ConfigurationModel;\n\tprivate _tasksModel: ConfigurationModel;\n\n\tconstructor(name: string, logService: ILogService) {\n\t\tsuper(name, logService);\n\t\tthis._settingsModelParser = new ConfigurationModelParser(name, logService);\n\t\tthis._launchModel = ConfigurationModel.createEmptyModel(logService);\n\t\tthis._tasksModel = ConfigurationModel.createEmptyModel(logService);\n\t}\n\n\tget folders(): IStoredWorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tget transient(): boolean {\n\t\treturn this._transient;\n\t}\n\n\tget settingsModel(): ConfigurationModel {\n\t\treturn this._settingsModelParser.configurationModel;\n\t}\n\n\tget launchModel(): ConfigurationModel {\n\t\treturn this._launchModel;\n\t}\n\n\tget tasksModel(): ConfigurationModel {\n\t\treturn this._tasksModel;\n\t}\n\n\treparseWorkspaceSettings(configurationParseOptions: ConfigurationParseOptions): void {\n\t\tthis._settingsModelParser.reparse(configurationParseOptions);\n\t}\n\n\tgetRestrictedWorkspaceSettings(): string[] {\n\t\treturn this._settingsModelParser.restrictedConfigurations;\n\t}\n\n\tprotected override doParseRaw(raw: any, configurationParseOptions?: ConfigurationParseOptions): IConfigurationModel {\n\t\tthis._folders = (raw['folders'] || []) as IStoredWorkspaceFolder[];\n\t\tthis._transient = isBoolean(raw['transient']) && raw['transient'];\n\t\tthis._settingsModelParser.parseRaw(raw['settings'], configurationParseOptions);\n\t\tthis._launchModel = this.createConfigurationModelFrom(raw, 'launch');\n\t\tthis._tasksModel = this.createConfigurationModelFrom(raw, 'tasks');\n\t\treturn super.doParseRaw(raw, configurationParseOptions);\n\t}\n\n\tprivate createConfigurationModelFrom(raw: any, key: string): ConfigurationModel {\n\t\tconst data = raw[key];\n\t\tif (data) {\n\t\t\tconst contents = toValuesTree(data, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n\t\t\tconst scopedContents = Object.create(null);\n\t\t\tscopedContents[key] = contents;\n\t\t\tconst keys = Object.keys(data).map(k => `${key}.${k}`);\n\t\t\treturn new ConfigurationModel(scopedContents, keys, [], undefined, this.logService);\n\t\t}\n\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t}\n}\n\nexport class StandaloneConfigurationModelParser extends ConfigurationModelParser {\n\n\tconstructor(name: string, private readonly scope: string, logService: ILogService,) {\n\t\tsuper(name, logService);\n\t}\n\n\tprotected override doParseRaw(raw: any, configurationParseOptions?: ConfigurationParseOptions): IConfigurationModel {\n\t\tconst contents = toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n\t\tconst scopedContents = Object.create(null);\n\t\tscopedContents[this.scope] = contents;\n\t\tconst keys = Object.keys(raw).map(key => `${this.scope}.${key}`);\n\t\treturn { contents: scopedContents, keys, overrides: [] };\n\t}\n\n}\n\nexport class Configuration extends BaseConfiguration {\n\n\tconstructor(\n\t\tdefaults: ConfigurationModel,\n\t\tpolicy: ConfigurationModel,\n\t\tapplication: ConfigurationModel,\n\t\tlocalUser: ConfigurationModel,\n\t\tremoteUser: ConfigurationModel,\n\t\tworkspaceConfiguration: ConfigurationModel,\n\t\tfolders: ResourceMap<ConfigurationModel>,\n\t\tmemoryConfiguration: ConfigurationModel,\n\t\tmemoryConfigurationByResource: ResourceMap<ConfigurationModel>,\n\t\tprivate readonly _workspace: Workspace | undefined,\n\t\tlogService: ILogService\n\t) {\n\t\tsuper(defaults, policy, application, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource, logService);\n\t}\n\n\toverride getValue(key: string | undefined, overrides: IConfigurationOverrides = {}): any {\n\t\treturn super.getValue(key, overrides, this._workspace);\n\t}\n\n\toverride inspect<C>(key: string, overrides: IConfigurationOverrides = {}): IConfigurationValue<C> {\n\t\treturn super.inspect(key, overrides, this._workspace);\n\t}\n\n\toverride keys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn super.keys(this._workspace);\n\t}\n\n\toverride compareAndDeleteFolderConfiguration(folder: URI): IConfigurationChange {\n\t\tif (this._workspace && this._workspace.folders.length > 0 && this._workspace.folders[0].uri.toString() === folder.toString()) {\n\t\t\t// Do not remove workspace configuration\n\t\t\treturn { keys: [], overrides: [] };\n\t\t}\n\t\treturn super.compareAndDeleteFolderConfiguration(folder);\n\t}\n\n\tcompare(other: Configuration): IConfigurationChange {\n\t\tconst compare = (fromKeys: string[], toKeys: string[], overrideIdentifier?: string): string[] => {\n\t\t\tconst keys: string[] = [];\n\t\t\tkeys.push(...toKeys.filter(key => fromKeys.indexOf(key) === -1));\n\t\t\tkeys.push(...fromKeys.filter(key => toKeys.indexOf(key) === -1));\n\t\t\tkeys.push(...fromKeys.filter(key => {\n\t\t\t\t// Ignore if the key does not exist in both models\n\t\t\t\tif (toKeys.indexOf(key) === -1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Compare workspace value\n\t\t\t\tif (!equals(this.getValue(key, { overrideIdentifier }), other.getValue(key, { overrideIdentifier }))) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// Compare workspace folder value\n\t\t\t\treturn this._workspace && this._workspace.folders.some(folder => !equals(this.getValue(key, { resource: folder.uri, overrideIdentifier }), other.getValue(key, { resource: folder.uri, overrideIdentifier })));\n\t\t\t}));\n\t\t\treturn keys;\n\t\t};\n\t\tconst keys = compare(this.allKeys(), other.allKeys());\n\t\tconst overrides: [string, string[]][] = [];\n\t\tconst allOverrideIdentifiers = distinct([...this.allOverrideIdentifiers(), ...other.allOverrideIdentifiers()]);\n\t\tfor (const overrideIdentifier of allOverrideIdentifiers) {\n\t\t\tconst keys = compare(this.getAllKeysForOverrideIdentifier(overrideIdentifier), other.getAllKeysForOverrideIdentifier(overrideIdentifier), overrideIdentifier);\n\t\t\tif (keys.length) {\n\t\t\t\toverrides.push([overrideIdentifier, keys]);\n\t\t\t}\n\t\t}\n\t\treturn { keys, overrides };\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["keys"]
}
