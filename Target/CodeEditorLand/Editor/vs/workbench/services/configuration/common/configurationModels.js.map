{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/common/configurationModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport type { ResourceMap } from \"../../../../base/common/map.js\";\nimport { equals } from \"../../../../base/common/objects.js\";\nimport { isBoolean } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\ttype IConfigurationChange,\n\ttype IConfigurationModel,\n\ttype IConfigurationOverrides,\n\ttype IConfigurationValue,\n\ttoValuesTree,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tConfiguration as BaseConfiguration,\n\tConfigurationModel,\n\tConfigurationModelParser,\n\ttype ConfigurationParseOptions,\n} from \"../../../../platform/configuration/common/configurationModels.js\";\nimport type { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type { Workspace } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IStoredWorkspaceFolder } from \"../../../../platform/workspaces/common/workspaces.js\";\n\nexport class WorkspaceConfigurationModelParser extends ConfigurationModelParser {\n\tprivate _folders: IStoredWorkspaceFolder[] = [];\n\tprivate _transient = false;\n\tprivate _settingsModelParser: ConfigurationModelParser;\n\tprivate _launchModel: ConfigurationModel;\n\tprivate _tasksModel: ConfigurationModel;\n\n\tconstructor(name: string, logService: ILogService) {\n\t\tsuper(name, logService);\n\t\tthis._settingsModelParser = new ConfigurationModelParser(\n\t\t\tname,\n\t\t\tlogService,\n\t\t);\n\t\tthis._launchModel = ConfigurationModel.createEmptyModel(logService);\n\t\tthis._tasksModel = ConfigurationModel.createEmptyModel(logService);\n\t}\n\n\tget folders(): IStoredWorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tget transient(): boolean {\n\t\treturn this._transient;\n\t}\n\n\tget settingsModel(): ConfigurationModel {\n\t\treturn this._settingsModelParser.configurationModel;\n\t}\n\n\tget launchModel(): ConfigurationModel {\n\t\treturn this._launchModel;\n\t}\n\n\tget tasksModel(): ConfigurationModel {\n\t\treturn this._tasksModel;\n\t}\n\n\treparseWorkspaceSettings(\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): void {\n\t\tthis._settingsModelParser.reparse(configurationParseOptions);\n\t}\n\n\tgetRestrictedWorkspaceSettings(): string[] {\n\t\treturn this._settingsModelParser.restrictedConfigurations;\n\t}\n\n\tprotected override doParseRaw(\n\t\traw: any,\n\t\tconfigurationParseOptions?: ConfigurationParseOptions,\n\t): IConfigurationModel {\n\t\tthis._folders = (raw[\"folders\"] || []) as IStoredWorkspaceFolder[];\n\t\tthis._transient = isBoolean(raw[\"transient\"]) && raw[\"transient\"];\n\t\tthis._settingsModelParser.parseRaw(\n\t\t\traw[\"settings\"],\n\t\t\tconfigurationParseOptions,\n\t\t);\n\t\tthis._launchModel = this.createConfigurationModelFrom(raw, \"launch\");\n\t\tthis._tasksModel = this.createConfigurationModelFrom(raw, \"tasks\");\n\t\treturn super.doParseRaw(raw, configurationParseOptions);\n\t}\n\n\tprivate createConfigurationModelFrom(\n\t\traw: any,\n\t\tkey: string,\n\t): ConfigurationModel {\n\t\tconst data = raw[key];\n\t\tif (data) {\n\t\t\tconst contents = toValuesTree(data, (message) =>\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Conflict in settings file ${this._name}: ${message}`,\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst scopedContents = Object.create(null);\n\t\t\tscopedContents[key] = contents;\n\t\t\tconst keys = Object.keys(data).map((k) => `${key}.${k}`);\n\t\t\treturn new ConfigurationModel(\n\t\t\t\tscopedContents,\n\t\t\t\tkeys,\n\t\t\t\t[],\n\t\t\t\tundefined,\n\t\t\t\tthis.logService,\n\t\t\t);\n\t\t}\n\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t}\n}\n\nexport class StandaloneConfigurationModelParser extends ConfigurationModelParser {\n\tconstructor(\n\t\tname: string,\n\t\tprivate readonly scope: string,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(name, logService);\n\t}\n\n\tprotected override doParseRaw(\n\t\traw: any,\n\t\tconfigurationParseOptions?: ConfigurationParseOptions,\n\t): IConfigurationModel {\n\t\tconst contents = toValuesTree(raw, (message) =>\n\t\t\tconsole.error(\n\t\t\t\t`Conflict in settings file ${this._name}: ${message}`,\n\t\t\t),\n\t\t);\n\t\tconst scopedContents = Object.create(null);\n\t\tscopedContents[this.scope] = contents;\n\t\tconst keys = Object.keys(raw).map((key) => `${this.scope}.${key}`);\n\t\treturn { contents: scopedContents, keys, overrides: [] };\n\t}\n}\n\nexport class Configuration extends BaseConfiguration {\n\tconstructor(\n\t\tdefaults: ConfigurationModel,\n\t\tpolicy: ConfigurationModel,\n\t\tapplication: ConfigurationModel,\n\t\tlocalUser: ConfigurationModel,\n\t\tremoteUser: ConfigurationModel,\n\t\tworkspaceConfiguration: ConfigurationModel,\n\t\tfolders: ResourceMap<ConfigurationModel>,\n\t\tmemoryConfiguration: ConfigurationModel,\n\t\tmemoryConfigurationByResource: ResourceMap<ConfigurationModel>,\n\t\tprivate readonly _workspace: Workspace | undefined,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(\n\t\t\tdefaults,\n\t\t\tpolicy,\n\t\t\tapplication,\n\t\t\tlocalUser,\n\t\t\tremoteUser,\n\t\t\tworkspaceConfiguration,\n\t\t\tfolders,\n\t\t\tmemoryConfiguration,\n\t\t\tmemoryConfigurationByResource,\n\t\t\tlogService,\n\t\t);\n\t}\n\n\toverride getValue(\n\t\tkey: string | undefined,\n\t\toverrides: IConfigurationOverrides = {},\n\t): any {\n\t\treturn super.getValue(key, overrides, this._workspace);\n\t}\n\n\toverride inspect<C>(\n\t\tkey: string,\n\t\toverrides: IConfigurationOverrides = {},\n\t): IConfigurationValue<C> {\n\t\treturn super.inspect(key, overrides, this._workspace);\n\t}\n\n\toverride keys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn super.keys(this._workspace);\n\t}\n\n\toverride compareAndDeleteFolderConfiguration(\n\t\tfolder: URI,\n\t): IConfigurationChange {\n\t\tif (\n\t\t\tthis._workspace &&\n\t\t\tthis._workspace.folders.length > 0 &&\n\t\t\tthis._workspace.folders[0].uri.toString() === folder.toString()\n\t\t) {\n\t\t\t// Do not remove workspace configuration\n\t\t\treturn { keys: [], overrides: [] };\n\t\t}\n\t\treturn super.compareAndDeleteFolderConfiguration(folder);\n\t}\n\n\tcompare(other: Configuration): IConfigurationChange {\n\t\tconst compare = (\n\t\t\tfromKeys: string[],\n\t\t\ttoKeys: string[],\n\t\t\toverrideIdentifier?: string,\n\t\t): string[] => {\n\t\t\tconst keys: string[] = [];\n\t\t\tkeys.push(...toKeys.filter((key) => fromKeys.indexOf(key) === -1));\n\t\t\tkeys.push(...fromKeys.filter((key) => toKeys.indexOf(key) === -1));\n\t\t\tkeys.push(\n\t\t\t\t...fromKeys.filter((key) => {\n\t\t\t\t\t// Ignore if the key does not exist in both models\n\t\t\t\t\tif (toKeys.indexOf(key) === -1) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t// Compare workspace value\n\t\t\t\t\tif (\n\t\t\t\t\t\t!equals(\n\t\t\t\t\t\t\tthis.getValue(key, { overrideIdentifier }),\n\t\t\t\t\t\t\tother.getValue(key, { overrideIdentifier }),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// Compare workspace folder value\n\t\t\t\t\treturn (\n\t\t\t\t\t\tthis._workspace &&\n\t\t\t\t\t\tthis._workspace.folders.some(\n\t\t\t\t\t\t\t(folder) =>\n\t\t\t\t\t\t\t\t!equals(\n\t\t\t\t\t\t\t\t\tthis.getValue(key, {\n\t\t\t\t\t\t\t\t\t\tresource: folder.uri,\n\t\t\t\t\t\t\t\t\t\toverrideIdentifier,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tother.getValue(key, {\n\t\t\t\t\t\t\t\t\t\tresource: folder.uri,\n\t\t\t\t\t\t\t\t\t\toverrideIdentifier,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn keys;\n\t\t};\n\t\tconst keys = compare(this.allKeys(), other.allKeys());\n\t\tconst overrides: [string, string[]][] = [];\n\t\tconst allOverrideIdentifiers = distinct([\n\t\t\t...this.allOverrideIdentifiers(),\n\t\t\t...other.allOverrideIdentifiers(),\n\t\t]);\n\t\tfor (const overrideIdentifier of allOverrideIdentifiers) {\n\t\t\tconst keys = compare(\n\t\t\t\tthis.getAllKeysForOverrideIdentifier(overrideIdentifier),\n\t\t\t\tother.getAllKeysForOverrideIdentifier(overrideIdentifier),\n\t\t\t\toverrideIdentifier,\n\t\t\t);\n\t\t\tif (keys.length) {\n\t\t\t\toverrides.push([overrideIdentifier, keys]);\n\t\t\t}\n\t\t}\n\t\treturn { keys, overrides };\n\t}\n}\n"],
  "mappings": "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",
  "names": ["keys"]
}
