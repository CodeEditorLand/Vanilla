{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/common/jsonEditing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { JSONPath } from \"../../../../base/common/json.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\n\nexport const IJSONEditingService =\n\tcreateDecorator<IJSONEditingService>(\"jsonEditingService\");\n\nexport enum JSONEditingErrorCode {\n\t/**\n\t * Error when trying to write to a file that contains JSON errors.\n\t */\n\tERROR_INVALID_FILE = 0,\n}\n\nexport class JSONEditingError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\tpublic code: JSONEditingErrorCode,\n\t) {\n\t\tsuper(message);\n\t}\n}\n\nexport interface IJSONValue {\n\tpath: JSONPath;\n\tvalue: any;\n}\n\nexport interface IJSONEditingService {\n\treadonly _serviceBrand: undefined;\n\n\twrite(resource: URI, values: IJSONValue[], save: boolean): Promise<void>;\n}\n"],
  "mappings": ";;AAOA,SAAS,uBAAuB;AAEzB,MAAM,sBACZ,gBAAqC,oBAAoB;AAEnD,IAAK,uBAAL,kBAAKA,0BAAL;AAIN,EAAAA,4CAAA,wBAAqB,KAArB;AAJW,SAAAA;AAAA,GAAA;AAOL,MAAM,yBAAyB,MAAM;AAAA,EAC3C,YACC,SACO,MACN;AACD,UAAM,OAAO;AAFN;AAAA,EAGR;AAAA,EAzBD,OAmB4C;AAAA;AAAA;AAO5C;",
  "names": ["JSONEditingErrorCode"]
}
