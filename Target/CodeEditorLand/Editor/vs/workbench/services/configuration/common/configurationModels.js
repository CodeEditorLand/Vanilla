import{distinct as M}from"../../../../base/common/arrays.js";import{equals as C}from"../../../../base/common/objects.js";import{isBoolean as h}from"../../../../base/common/types.js";import{toValuesTree as m}from"../../../../platform/configuration/common/configuration.js";import{Configuration as k,ConfigurationModel as c,ConfigurationModelParser as p}from"../../../../platform/configuration/common/configurationModels.js";class P extends p{_folders=[];_transient=!1;_settingsModelParser;_launchModel;_tasksModel;constructor(r,e){super(r,e),this._settingsModelParser=new p(r,e),this._launchModel=c.createEmptyModel(e),this._tasksModel=c.createEmptyModel(e)}get folders(){return this._folders}get transient(){return this._transient}get settingsModel(){return this._settingsModelParser.configurationModel}get launchModel(){return this._launchModel}get tasksModel(){return this._tasksModel}reparseWorkspaceSettings(r){this._settingsModelParser.reparse(r)}getRestrictedWorkspaceSettings(){return this._settingsModelParser.restrictedConfigurations}doParseRaw(r,e){return this._folders=r.folders||[],this._transient=h(r.transient)&&r.transient,this._settingsModelParser.parseRaw(r.settings,e),this._launchModel=this.createConfigurationModelFrom(r,"launch"),this._tasksModel=this.createConfigurationModelFrom(r,"tasks"),super.doParseRaw(r,e)}createConfigurationModelFrom(r,e){const t=r[e];if(t){const n=m(t,o=>{}),s=Object.create(null);s[e]=n;const l=Object.keys(t).map(o=>`${e}.${o}`);return new c(s,l,[],void 0,this.logService)}return c.createEmptyModel(this.logService)}}class w extends p{constructor(e,t,n){super(e,n);this.scope=t}doParseRaw(e,t){const n=m(e,o=>{}),s=Object.create(null);s[this.scope]=n;const l=Object.keys(e).map(o=>`${this.scope}.${o}`);return{contents:s,keys:l,overrides:[]}}}class F extends k{constructor(e,t,n,s,l,o,a,u,d,i,g){super(e,t,n,s,l,o,a,u,d,g);this._workspace=i}getValue(e,t={}){return super.getValue(e,t,this._workspace)}inspect(e,t={}){return super.inspect(e,t,this._workspace)}keys(){return super.keys(this._workspace)}compareAndDeleteFolderConfiguration(e){return this._workspace&&this._workspace.folders.length>0&&this._workspace.folders[0].uri.toString()===e.toString()?{keys:[],overrides:[]}:super.compareAndDeleteFolderConfiguration(e)}compare(e){const t=(o,a,u)=>{const d=[];return d.push(...a.filter(i=>o.indexOf(i)===-1)),d.push(...o.filter(i=>a.indexOf(i)===-1)),d.push(...o.filter(i=>a.indexOf(i)===-1?!1:C(this.getValue(i,{overrideIdentifier:u}),e.getValue(i,{overrideIdentifier:u}))?this._workspace&&this._workspace.folders.some(g=>!C(this.getValue(i,{resource:g.uri,overrideIdentifier:u}),e.getValue(i,{resource:g.uri,overrideIdentifier:u}))):!0)),d},n=t(this.allKeys(),e.allKeys()),s=[],l=M([...this.allOverrideIdentifiers(),...e.allOverrideIdentifiers()]);for(const o of l){const a=t(this.getAllKeysForOverrideIdentifier(o),e.getAllKeysForOverrideIdentifier(o),o);a.length&&s.push([o,a])}return{keys:n,overrides:s}}}export{F as Configuration,w as StandaloneConfigurationModelParser,P as WorkspaceConfigurationModelParser};
