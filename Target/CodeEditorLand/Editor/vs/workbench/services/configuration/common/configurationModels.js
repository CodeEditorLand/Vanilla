import{equals as C}from"../../../../base/common/objects.js";import{toValuesTree as M}from"../../../../platform/configuration/common/configuration.js";import{Configuration as h,ConfigurationModelParser as f,ConfigurationModel as c}from"../../../../platform/configuration/common/configurationModels.js";import"../../../../platform/workspaces/common/workspaces.js";import"../../../../platform/workspace/common/workspace.js";import"../../../../base/common/map.js";import"../../../../base/common/uri.js";import{isBoolean as m}from"../../../../base/common/types.js";import{distinct as _}from"../../../../base/common/arrays.js";import"../../../../platform/log/common/log.js";class D extends f{_folders=[];_transient=!1;_settingsModelParser;_launchModel;_tasksModel;constructor(t,e){super(t,e),this._settingsModelParser=new f(t,e),this._launchModel=c.createEmptyModel(e),this._tasksModel=c.createEmptyModel(e)}get folders(){return this._folders}get transient(){return this._transient}get settingsModel(){return this._settingsModelParser.configurationModel}get launchModel(){return this._launchModel}get tasksModel(){return this._tasksModel}reparseWorkspaceSettings(t){this._settingsModelParser.reparse(t)}getRestrictedWorkspaceSettings(){return this._settingsModelParser.restrictedConfigurations}doParseRaw(t,e){return this._folders=t.folders||[],this._transient=m(t.transient)&&t.transient,this._settingsModelParser.parseRaw(t.settings,e),this._launchModel=this.createConfigurationModelFrom(t,"launch"),this._tasksModel=this.createConfigurationModelFrom(t,"tasks"),super.doParseRaw(t,e)}createConfigurationModelFrom(t,e){const o=t[e];if(o){const s=M(o,r=>console.error(`Conflict in settings file ${this._name}: ${r}`)),i=Object.create(null);i[e]=s;const l=Object.keys(o).map(r=>`${e}.${r}`);return new c(i,l,[],void 0,this.logService)}return c.createEmptyModel(this.logService)}}class U extends f{constructor(e,o,s){super(e,s);this.scope=o}doParseRaw(e,o){const s=M(e,r=>console.error(`Conflict in settings file ${this._name}: ${r}`)),i=Object.create(null);i[this.scope]=s;const l=Object.keys(e).map(r=>`${this.scope}.${r}`);return{contents:i,keys:l,overrides:[]}}}class q extends h{constructor(e,o,s,i,l,r,a,u,d,n,g){super(e,o,s,i,l,r,a,u,d,g);this._workspace=n}getValue(e,o={}){return super.getValue(e,o,this._workspace)}inspect(e,o={}){return super.inspect(e,o,this._workspace)}keys(){return super.keys(this._workspace)}compareAndDeleteFolderConfiguration(e){return this._workspace&&this._workspace.folders.length>0&&this._workspace.folders[0].uri.toString()===e.toString()?{keys:[],overrides:[]}:super.compareAndDeleteFolderConfiguration(e)}compare(e){const o=(r,a,u)=>{const d=[];return d.push(...a.filter(n=>r.indexOf(n)===-1)),d.push(...r.filter(n=>a.indexOf(n)===-1)),d.push(...r.filter(n=>a.indexOf(n)===-1?!1:C(this.getValue(n,{overrideIdentifier:u}),e.getValue(n,{overrideIdentifier:u}))?this._workspace&&this._workspace.folders.some(g=>!C(this.getValue(n,{resource:g.uri,overrideIdentifier:u}),e.getValue(n,{resource:g.uri,overrideIdentifier:u}))):!0)),d},s=o(this.allKeys(),e.allKeys()),i=[],l=_([...this.allOverrideIdentifiers(),...e.allOverrideIdentifiers()]);for(const r of l){const a=o(this.getAllKeysForOverrideIdentifier(r),e.getAllKeysForOverrideIdentifier(r),r);a.length&&i.push([r,a])}return{keys:s,overrides:i}}}export{q as Configuration,U as StandaloneConfigurationModelParser,D as WorkspaceConfigurationModelParser};
