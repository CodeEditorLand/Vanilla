{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/common/jsonEditingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue } from \"../../../../base/common/async.js\";\nimport * as json from \"../../../../base/common/json.js\";\nimport { setProperty } from \"../../../../base/common/jsonEdit.js\";\nimport type { Edit } from \"../../../../base/common/jsonFormatter.js\";\nimport type { IReference } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { EditOperation } from \"../../../../editor/common/core/editOperation.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { Selection } from \"../../../../editor/common/core/selection.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ITextFileService } from \"../../textfile/common/textfiles.js\";\nimport {\n\tIJSONEditingService,\n\ttype IJSONValue,\n\tJSONEditingError,\n\tJSONEditingErrorCode,\n} from \"./jsonEditing.js\";\n\nexport class JSONEditingService implements IJSONEditingService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate queue: Queue<void>;\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextModelService\n\t\tprivate readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t) {\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\twrite(resource: URI, values: IJSONValue[]): Promise<void> {\n\t\treturn Promise.resolve(\n\t\t\tthis.queue.queue(() => this.doWriteConfiguration(resource, values)),\n\t\t); // queue up writes to prevent race conditions\n\t}\n\n\tprivate async doWriteConfiguration(\n\t\tresource: URI,\n\t\tvalues: IJSONValue[],\n\t): Promise<void> {\n\t\tconst reference = await this.resolveAndValidate(resource, true);\n\t\ttry {\n\t\t\tawait this.writeToBuffer(reference.object.textEditorModel, values);\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t}\n\n\tprivate async writeToBuffer(\n\t\tmodel: ITextModel,\n\t\tvalues: IJSONValue[],\n\t): Promise<any> {\n\t\tlet hasEdits = false;\n\t\tfor (const value of values) {\n\t\t\tconst edit = this.getEdits(model, value)[0];\n\t\t\thasEdits = !!edit && this.applyEditsToBuffer(edit, model);\n\t\t}\n\t\tif (hasEdits) {\n\t\t\treturn this.textFileService.save(model.uri);\n\t\t}\n\t}\n\n\tprivate applyEditsToBuffer(edit: Edit, model: ITextModel): boolean {\n\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\tconst endPosition = model.getPositionAt(edit.offset + edit.length);\n\t\tconst range = new Range(\n\t\t\tstartPosition.lineNumber,\n\t\t\tstartPosition.column,\n\t\t\tendPosition.lineNumber,\n\t\t\tendPosition.column,\n\t\t);\n\t\tconst currentText = model.getValueInRange(range);\n\t\tif (edit.content !== currentText) {\n\t\t\tconst editOperation = currentText\n\t\t\t\t? EditOperation.replace(range, edit.content)\n\t\t\t\t: EditOperation.insert(startPosition, edit.content);\n\t\t\tmodel.pushEditOperations(\n\t\t\t\t[\n\t\t\t\t\tnew Selection(\n\t\t\t\t\t\tstartPosition.lineNumber,\n\t\t\t\t\t\tstartPosition.column,\n\t\t\t\t\t\tstartPosition.lineNumber,\n\t\t\t\t\t\tstartPosition.column,\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t\t[editOperation],\n\t\t\t\t() => [],\n\t\t\t);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate getEdits(\n\t\tmodel: ITextModel,\n\t\tconfigurationValue: IJSONValue,\n\t): Edit[] {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst { path, value } = configurationValue;\n\n\t\t// With empty path the entire file is being replaced, so we just use JSON.stringify\n\t\tif (!path.length) {\n\t\t\tconst content = JSON.stringify(\n\t\t\t\tvalue,\n\t\t\t\tnull,\n\t\t\t\tinsertSpaces ? \" \".repeat(tabSize) : \"\\t\",\n\t\t\t);\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tcontent,\n\t\t\t\t\tlength: content.length,\n\t\t\t\t\toffset: 0,\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\n\t\treturn setProperty(model.getValue(), path, value, {\n\t\t\ttabSize,\n\t\t\tinsertSpaces,\n\t\t\teol,\n\t\t});\n\t}\n\n\tprivate async resolveModelReference(\n\t\tresource: URI,\n\t): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst exists = await this.fileService.exists(resource);\n\t\tif (!exists) {\n\t\t\tawait this.textFileService.write(resource, \"{}\", {\n\t\t\t\tencoding: \"utf8\",\n\t\t\t});\n\t\t}\n\t\treturn this.textModelResolverService.createModelReference(resource);\n\t}\n\n\tprivate hasParseErrors(model: ITextModel): boolean {\n\t\tconst parseErrors: json.ParseError[] = [];\n\t\tjson.parse(model.getValue(), parseErrors, {\n\t\t\tallowTrailingComma: true,\n\t\t\tallowEmptyContent: true,\n\t\t});\n\t\treturn parseErrors.length > 0;\n\t}\n\n\tprivate async resolveAndValidate(\n\t\tresource: URI,\n\t\tcheckDirty: boolean,\n\t): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst reference = await this.resolveModelReference(resource);\n\n\t\tconst model = reference.object.textEditorModel;\n\n\t\tif (this.hasParseErrors(model)) {\n\t\t\treference.dispose();\n\t\t\treturn this.reject<IReference<IResolvedTextEditorModel>>(\n\t\t\t\tJSONEditingErrorCode.ERROR_INVALID_FILE,\n\t\t\t);\n\t\t}\n\n\t\treturn reference;\n\t}\n\n\tprivate reject<T>(code: JSONEditingErrorCode): Promise<T> {\n\t\tconst message = this.toErrorMessage(code);\n\t\treturn Promise.reject(new JSONEditingError(message, code));\n\t}\n\n\tprivate toErrorMessage(error: JSONEditingErrorCode): string {\n\t\tswitch (error) {\n\t\t\t// User issues\n\t\t\tcase JSONEditingErrorCode.ERROR_INVALID_FILE: {\n\t\t\t\treturn nls.localize(\n\t\t\t\t\t\"errorInvalidFile\",\n\t\t\t\t\t\"Unable to write into the file. Please open the file to correct errors/warnings in the file and try again.\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterSingleton(\n\tIJSONEditingService,\n\tJSONEditingService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
