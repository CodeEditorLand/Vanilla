{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/common/jsonEditingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as json from '../../../../base/common/json.js';\nimport { setProperty } from '../../../../base/common/jsonEdit.js';\nimport { Queue } from '../../../../base/common/async.js';\nimport { Edit } from '../../../../base/common/jsonFormatter.js';\nimport { IReference } from '../../../../base/common/lifecycle.js';\nimport { EditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { Selection } from '../../../../editor/common/core/selection.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { ITextModelService, IResolvedTextEditorModel } from '../../../../editor/common/services/resolverService.js';\nimport { IJSONEditingService, IJSONValue, JSONEditingError, JSONEditingErrorCode } from './jsonEditing.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\n\nexport class JSONEditingService implements IJSONEditingService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate queue: Queue<void>;\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService\n\t) {\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\twrite(resource: URI, values: IJSONValue[]): Promise<void> {\n\t\treturn Promise.resolve(this.queue.queue(() => this.doWriteConfiguration(resource, values))); // queue up writes to prevent race conditions\n\t}\n\n\tprivate async doWriteConfiguration(resource: URI, values: IJSONValue[]): Promise<void> {\n\t\tconst reference = await this.resolveAndValidate(resource, true);\n\t\ttry {\n\t\t\tawait this.writeToBuffer(reference.object.textEditorModel, values);\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t}\n\n\tprivate async writeToBuffer(model: ITextModel, values: IJSONValue[]): Promise<any> {\n\t\tlet hasEdits: boolean = false;\n\t\tfor (const value of values) {\n\t\t\tconst edit = this.getEdits(model, value)[0];\n\t\t\thasEdits = !!edit && this.applyEditsToBuffer(edit, model);\n\t\t}\n\t\tif (hasEdits) {\n\t\t\treturn this.textFileService.save(model.uri);\n\t\t}\n\t}\n\n\tprivate applyEditsToBuffer(edit: Edit, model: ITextModel): boolean {\n\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\tconst endPosition = model.getPositionAt(edit.offset + edit.length);\n\t\tconst range = new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t\tconst currentText = model.getValueInRange(range);\n\t\tif (edit.content !== currentText) {\n\t\t\tconst editOperation = currentText ? EditOperation.replace(range, edit.content) : EditOperation.insert(startPosition, edit.content);\n\t\t\tmodel.pushEditOperations([new Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], () => []);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate getEdits(model: ITextModel, configurationValue: IJSONValue): Edit[] {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst { path, value } = configurationValue;\n\n\t\t// With empty path the entire file is being replaced, so we just use JSON.stringify\n\t\tif (!path.length) {\n\t\t\tconst content = JSON.stringify(value, null, insertSpaces ? ' '.repeat(tabSize) : '\\t');\n\t\t\treturn [{\n\t\t\t\tcontent,\n\t\t\t\tlength: content.length,\n\t\t\t\toffset: 0\n\t\t\t}];\n\t\t}\n\n\t\treturn setProperty(model.getValue(), path, value, { tabSize, insertSpaces, eol });\n\t}\n\n\tprivate async resolveModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst exists = await this.fileService.exists(resource);\n\t\tif (!exists) {\n\t\t\tawait this.textFileService.write(resource, '{}', { encoding: 'utf8' });\n\t\t}\n\t\treturn this.textModelResolverService.createModelReference(resource);\n\t}\n\n\tprivate hasParseErrors(model: ITextModel): boolean {\n\t\tconst parseErrors: json.ParseError[] = [];\n\t\tjson.parse(model.getValue(), parseErrors, { allowTrailingComma: true, allowEmptyContent: true });\n\t\treturn parseErrors.length > 0;\n\t}\n\n\tprivate async resolveAndValidate(resource: URI, checkDirty: boolean): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst reference = await this.resolveModelReference(resource);\n\n\t\tconst model = reference.object.textEditorModel;\n\n\t\tif (this.hasParseErrors(model)) {\n\t\t\treference.dispose();\n\t\t\treturn this.reject<IReference<IResolvedTextEditorModel>>(JSONEditingErrorCode.ERROR_INVALID_FILE);\n\t\t}\n\n\t\treturn reference;\n\t}\n\n\tprivate reject<T>(code: JSONEditingErrorCode): Promise<T> {\n\t\tconst message = this.toErrorMessage(code);\n\t\treturn Promise.reject(new JSONEditingError(message, code));\n\t}\n\n\tprivate toErrorMessage(error: JSONEditingErrorCode): string {\n\t\tswitch (error) {\n\t\t\t// User issues\n\t\t\tcase JSONEditingErrorCode.ERROR_INVALID_FILE: {\n\t\t\t\treturn nls.localize('errorInvalidFile', \"Unable to write into the file. Please open the file to correct errors/warnings in the file and try again.\");\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterSingleton(IJSONEditingService, JSONEditingService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
