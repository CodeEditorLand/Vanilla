var p=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var P=(s,o,e,i)=>{for(var r=i>1?void 0:i?v(o,e):o,c=s.length-1,t;c>=0;c--)(t=s[c])&&(r=(i?t(o,e,r):t(r))||r);return i&&r&&p(o,e,r),r},d=(s,o)=>(e,i)=>o(e,i,s);import{Barrier as k,timeout as W}from"../../../../base/common/async.js";import{Disposable as h,DisposableStore as I,toDisposable as S}from"../../../../base/common/lifecycle.js";import{generateUuid as u}from"../../../../base/common/uuid.js";import{ProxyChannel as f}from"../../../../base/parts/ipc/common/ipc.js";import{Client as w}from"../../../../base/parts/ipc/common/ipc.mp.js";import{acquirePort as U}from"../../../../base/parts/ipc/electron-sandbox/ipc.mp.js";import{createDecorator as g}from"../../../../platform/instantiation/common/instantiation.js";import{IMainProcessService as C}from"../../../../platform/ipc/common/mainProcessService.js";import{ILogService as b}from"../../../../platform/log/common/log.js";import{ipcUtilityProcessWorkerChannelName as D}from"../../../../platform/utilityProcess/common/utilityProcessWorkerService.js";const G=g("utilityProcessWorkerWorkbenchService");let l=class extends h{constructor(e,i,r){super();this.windowId=e;this.logService=i;this.mainProcessService=r}_utilityProcessWorkerService=void 0;get utilityProcessWorkerService(){if(!this._utilityProcessWorkerService){const e=this.mainProcessService.getChannel(D);this._utilityProcessWorkerService=f.toService(e)}return this._utilityProcessWorkerService}restoredBarrier=new k;async createWorker(e){this.logService.trace("Renderer->UtilityProcess#createWorker"),await Promise.race([this.restoredBarrier.wait(),W(2e3)]);const i=u(),r="vscode:createUtilityProcessWorkerMessageChannelResult",c=U(void 0,r,i),t=this.utilityProcessWorkerService.createWorker({process:e,reply:{windowId:this.windowId,channel:r,nonce:i}}),a=new I;a.add(S(()=>{this.logService.trace("Renderer->UtilityProcess#disposeWorker",e),this.utilityProcessWorkerService.disposeWorker({process:e,reply:{windowId:this.windowId}})}));const y=await c,m=a.add(new w(y,`window:${this.windowId},module:${e.moduleId}`));return this.logService.trace("Renderer->UtilityProcess#createWorkerChannel: connection established"),t.then(({reason:n})=>{n?.code===0?this.logService.trace(`[UtilityProcessWorker]: terminated normally with code ${n.code}, signal: ${n.signal}`):this.logService.error(`[UtilityProcessWorker]: terminated unexpectedly with code ${n?.code}, signal: ${n?.signal}`)}),{client:m,onDidTerminate:t,dispose:()=>a.dispose()}}notifyRestored(){this.restoredBarrier.isOpen()||this.restoredBarrier.open()}};l=P([d(1,b),d(2,C)],l);export{G as IUtilityProcessWorkerWorkbenchService,l as UtilityProcessWorkerWorkbenchService};
