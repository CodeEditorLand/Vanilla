var v=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var c=(n,r,e,i)=>{for(var t=i>1?void 0:i?h(r,e):r,s=n.length-1,d;s>=0;s--)(d=n[s])&&(t=(i?d(r,e,t):d(t))||t);return i&&t&&v(r,e,t),t},p=(n,r)=>(e,i)=>r(e,i,n);import{Emitter as m}from"../../../../base/common/event.js";import{Disposable as l}from"../../../../base/common/lifecycle.js";import{InstantiationType as u,registerSingleton as S}from"../../../../platform/instantiation/common/extensions.js";import{IUpdateService as f,State as a,UpdateType as y}from"../../../../platform/update/common/update.js";import{IBrowserWorkbenchEnvironmentService as U}from"../../environment/browser/environmentService.js";import{IHostService as g}from"../../host/browser/host.js";let o=class extends l{constructor(e,i){super();this.environmentService=e;this.hostService=i;this.checkForUpdates(!1)}_onStateChange=this._register(new m);onStateChange=this._onStateChange.event;_state=a.Uninitialized;get state(){return this._state}set state(e){this._state=e,this._onStateChange.fire(e)}async isLatestVersion(){const e=await this.doCheckForUpdates(!1);if(e!==void 0)return!!e}async checkForUpdates(e){await this.doCheckForUpdates(e)}async doCheckForUpdates(e){if(this.environmentService.options&&this.environmentService.options.updateProvider){const i=this.environmentService.options.updateProvider;this.state=a.CheckingForUpdates(e);const t=await i.checkForUpdate();return t?this.state=a.Ready({version:t.version,productVersion:t.version}):this.state=a.Idle(y.Archive),t}}async downloadUpdate(){}async applyUpdate(){this.hostService.reload()}async quitAndInstall(){this.hostService.reload()}async _applySpecificUpdate(e){}};o=c([p(0,U),p(1,g)],o),S(f,o,u.Eager);export{o as BrowserUpdateService};
