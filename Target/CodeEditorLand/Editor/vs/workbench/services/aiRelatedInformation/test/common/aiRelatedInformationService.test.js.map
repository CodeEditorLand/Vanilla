{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/aiRelatedInformation/test/common/aiRelatedInformationService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { AiRelatedInformationService } from '../../common/aiRelatedInformationService.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { CommandInformationResult, IAiRelatedInformationProvider, RelatedInformationType, SettingInformationResult } from '../../common/aiRelatedInformation.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('AiRelatedInformationService', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet service: AiRelatedInformationService;\n\n\tsetup(() => {\n\t\tservice = new AiRelatedInformationService(store.add(new NullLogService()));\n\t});\n\n\ttest('should check if providers are registered', () => {\n\t\tassert.equal(service.isEnabled(), false);\n\t\tstore.add(service.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, { provideAiRelatedInformation: () => Promise.resolve([]) }));\n\t\tassert.equal(service.isEnabled(), true);\n\t});\n\n\ttest('should register and unregister providers', () => {\n\t\tconst provider: IAiRelatedInformationProvider = { provideAiRelatedInformation: () => Promise.resolve([]) };\n\t\tconst disposable = service.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, provider);\n\t\tassert.strictEqual(service.isEnabled(), true);\n\t\tdisposable.dispose();\n\t\tassert.strictEqual(service.isEnabled(), false);\n\t});\n\n\ttest('should get related information', async () => {\n\t\tconst command = 'command';\n\t\tconst provider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: () => Promise.resolve([{ type: RelatedInformationType.CommandInformation, command, weight: 1 }])\n\t\t};\n\t\tservice.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, provider);\n\t\tconst result = await service.getRelatedInformation('query', [RelatedInformationType.CommandInformation], CancellationToken.None);\n\t\tassert.strictEqual(result.length, 1);\n\t\tassert.strictEqual((result[0] as CommandInformationResult).command, command);\n\t});\n\n\ttest('should get different types of related information', async () => {\n\t\tconst command = 'command';\n\t\tconst commandProvider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: () => Promise.resolve([{ type: RelatedInformationType.CommandInformation, command, weight: 1 }])\n\t\t};\n\t\tservice.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, commandProvider);\n\t\tconst setting = 'setting';\n\t\tconst settingProvider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: () => Promise.resolve([{ type: RelatedInformationType.SettingInformation, setting, weight: 1 }])\n\t\t};\n\t\tservice.registerAiRelatedInformationProvider(RelatedInformationType.SettingInformation, settingProvider);\n\t\tconst result = await service.getRelatedInformation(\n\t\t\t'query',\n\t\t\t[\n\t\t\t\tRelatedInformationType.CommandInformation,\n\t\t\t\tRelatedInformationType.SettingInformation\n\t\t\t],\n\t\t\tCancellationToken.None\n\t\t);\n\t\tassert.strictEqual(result.length, 2);\n\t\tassert.strictEqual((result[0] as CommandInformationResult).command, command);\n\t\tassert.strictEqual((result[1] as SettingInformationResult).setting, setting);\n\t});\n\n\ttest('should return empty array on timeout', async () => {\n\t\tconst clock = sinon.useFakeTimers({\n\t\t\tshouldAdvanceTime: true,\n\t\t});\n\t\tconst provider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: () => new Promise((resolve) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve([{ type: RelatedInformationType.CommandInformation, command: 'command', weight: 1 }]);\n\t\t\t\t}, AiRelatedInformationService.DEFAULT_TIMEOUT + 100);\n\t\t\t})\n\t\t};\n\n\t\tservice.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, provider);\n\n\t\ttry {\n\t\t\tconst promise = service.getRelatedInformation('query', [RelatedInformationType.CommandInformation], CancellationToken.None);\n\t\t\tclock.tick(AiRelatedInformationService.DEFAULT_TIMEOUT + 200);\n\t\t\tconst result = await promise;\n\t\t\tassert.strictEqual(result.length, 0);\n\t\t} finally {\n\t\t\tclock.restore();\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
