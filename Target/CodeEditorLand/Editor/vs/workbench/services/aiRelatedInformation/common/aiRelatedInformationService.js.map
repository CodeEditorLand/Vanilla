{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/aiRelatedInformation/common/aiRelatedInformationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancelablePromise, createCancelablePromise, raceTimeout } from '../../../../base/common/async.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IAiRelatedInformationService, IAiRelatedInformationProvider, RelatedInformationType, RelatedInformationResult } from './aiRelatedInformation.js';\n\nexport class AiRelatedInformationService implements IAiRelatedInformationService {\n\treadonly _serviceBrand: undefined;\n\n\tstatic readonly DEFAULT_TIMEOUT = 1000 * 10; // 10 seconds\n\n\tprivate readonly _providers: Map<RelatedInformationType, IAiRelatedInformationProvider[]> = new Map();\n\n\tconstructor(@ILogService private readonly logService: ILogService) { }\n\n\tisEnabled(): boolean {\n\t\treturn this._providers.size > 0;\n\t}\n\n\tregisterAiRelatedInformationProvider(type: RelatedInformationType, provider: IAiRelatedInformationProvider): IDisposable {\n\t\tconst providers = this._providers.get(type) ?? [];\n\t\tproviders.push(provider);\n\t\tthis._providers.set(type, providers);\n\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tconst providers = this._providers.get(type) ?? [];\n\t\t\t\tconst index = providers.indexOf(provider);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tproviders.splice(index, 1);\n\t\t\t\t}\n\t\t\t\tif (providers.length === 0) {\n\t\t\t\t\tthis._providers.delete(type);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tasync getRelatedInformation(query: string, types: RelatedInformationType[], token: CancellationToken): Promise<RelatedInformationResult[]> {\n\t\tif (this._providers.size === 0) {\n\t\t\tthrow new Error('No related information providers registered');\n\t\t}\n\n\t\t// get providers for each type\n\t\tconst providers: IAiRelatedInformationProvider[] = [];\n\t\tfor (const type of types) {\n\t\t\tconst typeProviders = this._providers.get(type);\n\t\t\tif (typeProviders) {\n\t\t\t\tproviders.push(...typeProviders);\n\t\t\t}\n\t\t}\n\n\t\tif (providers.length === 0) {\n\t\t\tthrow new Error('No related information providers registered for the given types');\n\t\t}\n\n\t\tconst stopwatch = StopWatch.create();\n\n\t\tconst cancellablePromises: Array<CancelablePromise<RelatedInformationResult[]>> = providers.map((provider) => {\n\t\t\treturn createCancelablePromise(async t => {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await provider.provideAiRelatedInformation(query, t);\n\t\t\t\t\t// double filter just in case\n\t\t\t\t\treturn result.filter(r => types.includes(r.type));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// logged in extension host\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t});\n\t\t});\n\n\t\ttry {\n\t\t\tconst results = await raceTimeout(\n\t\t\t\tPromise.allSettled(cancellablePromises),\n\t\t\t\tAiRelatedInformationService.DEFAULT_TIMEOUT,\n\t\t\t\t() => {\n\t\t\t\t\tcancellablePromises.forEach(p => p.cancel());\n\t\t\t\t\tthis.logService.warn('[AiRelatedInformationService]: Related information provider timed out');\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (!results) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst result = results\n\t\t\t\t.filter(r => r.status === 'fulfilled')\n\t\t\t\t.flatMap(r => (r as PromiseFulfilledResult<RelatedInformationResult[]>).value);\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tstopwatch.stop();\n\t\t\tthis.logService.trace(`[AiRelatedInformationService]: getRelatedInformation took ${stopwatch.elapsed()}ms`);\n\t\t}\n\t}\n}\n\nregisterSingleton(IAiRelatedInformationService, AiRelatedInformationService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,mBAAmB,yBAAyB,mBAAmB;AACxE,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,iBAAiB;AAC1B,SAAS,mBAAmB;AAC5B,SAAS,8BAA8B,+BAA+B,wBAAwB,gCAAgC;AAEvH,IAAM,8BAAN,MAA0E;AAAA,EAOhF,YAA0C,YAAyB;AAAzB;AAAA,EAA2B;AAAA,EApBtE,OAaiF;AAAA;AAAA;AAAA,EACvE;AAAA,EAET,OAAgB,kBAAkB,MAAO;AAAA;AAAA,EAExB,aAA2E,oBAAI,IAAI;AAAA,EAIpG,YAAqB;AACpB,WAAO,KAAK,WAAW,OAAO;AAAA,EAC/B;AAAA,EAEA,qCAAqC,MAA8B,UAAsD;AACxH,UAAM,YAAY,KAAK,WAAW,IAAI,IAAI,KAAK,CAAC;AAChD,cAAU,KAAK,QAAQ;AACvB,SAAK,WAAW,IAAI,MAAM,SAAS;AAGnC,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,cAAMA,aAAY,KAAK,WAAW,IAAI,IAAI,KAAK,CAAC;AAChD,cAAM,QAAQA,WAAU,QAAQ,QAAQ;AACxC,YAAI,UAAU,IAAI;AACjB,UAAAA,WAAU,OAAO,OAAO,CAAC;AAAA,QAC1B;AACA,YAAIA,WAAU,WAAW,GAAG;AAC3B,eAAK,WAAW,OAAO,IAAI;AAAA,QAC5B;AAAA,MACD,GATS;AAAA,IAUV;AAAA,EACD;AAAA,EAEA,MAAM,sBAAsB,OAAe,OAAiC,OAA+D;AAC1I,QAAI,KAAK,WAAW,SAAS,GAAG;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AAGA,UAAM,YAA6C,CAAC;AACpD,eAAW,QAAQ,OAAO;AACzB,YAAM,gBAAgB,KAAK,WAAW,IAAI,IAAI;AAC9C,UAAI,eAAe;AAClB,kBAAU,KAAK,GAAG,aAAa;AAAA,MAChC;AAAA,IACD;AAEA,QAAI,UAAU,WAAW,GAAG;AAC3B,YAAM,IAAI,MAAM,iEAAiE;AAAA,IAClF;AAEA,UAAM,YAAY,UAAU,OAAO;AAEnC,UAAM,sBAA4E,UAAU,IAAI,CAAC,aAAa;AAC7G,aAAO,wBAAwB,OAAM,MAAK;AACzC,YAAI;AACH,gBAAM,SAAS,MAAM,SAAS,4BAA4B,OAAO,CAAC;AAElE,iBAAO,OAAO,OAAO,OAAK,MAAM,SAAS,EAAE,IAAI,CAAC;AAAA,QACjD,SAAS,GAAG;AAAA,QAEZ;AACA,eAAO,CAAC;AAAA,MACT,CAAC;AAAA,IACF,CAAC;AAED,QAAI;AACH,YAAM,UAAU,MAAM;AAAA,QACrB,QAAQ,WAAW,mBAAmB;AAAA,QACtC,4BAA4B;AAAA,QAC5B,MAAM;AACL,8BAAoB,QAAQ,OAAK,EAAE,OAAO,CAAC;AAC3C,eAAK,WAAW,KAAK,uEAAuE;AAAA,QAC7F;AAAA,MACD;AACA,UAAI,CAAC,SAAS;AACb,eAAO,CAAC;AAAA,MACT;AACA,YAAM,SAAS,QACb,OAAO,OAAK,EAAE,WAAW,WAAW,EACpC,QAAQ,OAAM,EAAyD,KAAK;AAC9E,aAAO;AAAA,IACR,UAAE;AACD,gBAAU,KAAK;AACf,WAAK,WAAW,MAAM,6DAA6D,UAAU,QAAQ,CAAC,IAAI;AAAA,IAC3G;AAAA,EACD;AACD;AAvFa,8BAAN;AAAA,EAOO;AAAA,GAPD;AAyFb,kBAAkB,8BAA8B,6BAA6B,kBAAkB,OAAO;",
  "names": ["providers"]
}
