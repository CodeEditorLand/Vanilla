{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/quickaccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../base/common/lifecycle.js\";\nimport { getIEditor } from \"../../editor/browser/editorBrowser.js\";\nimport type {\n\tICodeEditorViewState,\n\tIDiffEditorViewState,\n} from \"../../editor/common/editorCommon.js\";\nimport { localize } from \"../../nls.js\";\nimport type { ICommandHandler } from \"../../platform/commands/common/commands.js\";\nimport {\n\tContextKeyExpr,\n\tRawContextKey,\n} from \"../../platform/contextkey/common/contextkey.js\";\nimport type {\n\tIResourceEditorInput,\n\tITextResourceEditorInput,\n} from \"../../platform/editor/common/editor.js\";\nimport { IKeybindingService } from \"../../platform/keybinding/common/keybinding.js\";\nimport { IQuickInputService } from \"../../platform/quickinput/common/quickInput.js\";\nimport type {\n\tGroupIdentifier,\n\tIEditorPane,\n\tIUntitledTextResourceEditorInput,\n\tIUntypedEditorInput,\n} from \"../common/editor.js\";\nimport type { EditorInput } from \"../common/editor/editorInput.js\";\nimport {\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n} from \"../services/editor/common/editorGroupsService.js\";\nimport {\n\ttype ACTIVE_GROUP_TYPE,\n\ttype AUX_WINDOW_GROUP_TYPE,\n\tIEditorService,\n\ttype SIDE_GROUP_TYPE,\n} from \"../services/editor/common/editorService.js\";\n\nexport const inQuickPickContextKeyValue = \"inQuickOpen\";\nexport const InQuickPickContextKey = new RawContextKey<boolean>(\n\tinQuickPickContextKeyValue,\n\tfalse,\n\tlocalize(\n\t\t\"inQuickOpen\",\n\t\t\"Whether keyboard focus is inside the quick open control\",\n\t),\n);\nexport const inQuickPickContext = ContextKeyExpr.has(\n\tinQuickPickContextKeyValue,\n);\n\nexport const defaultQuickAccessContextKeyValue = \"inFilesPicker\";\nexport const defaultQuickAccessContext = ContextKeyExpr.and(\n\tinQuickPickContext,\n\tContextKeyExpr.has(defaultQuickAccessContextKeyValue),\n);\n\nexport interface IWorkbenchQuickAccessConfiguration {\n\treadonly workbench: {\n\t\treadonly commandPalette: {\n\t\t\treadonly history: number;\n\t\t\treadonly preserveInput: boolean;\n\t\t\treadonly experimental: {\n\t\t\t\treadonly suggestCommands: boolean;\n\t\t\t\treadonly enableNaturalLanguageSearch: boolean;\n\t\t\t\treadonly askChatLocation: \"quickChat\" | \"chatView\";\n\t\t\t};\n\t\t};\n\t\treadonly quickOpen: {\n\t\t\treadonly enableExperimentalNewVersion: boolean;\n\t\t\treadonly preserveInput: boolean;\n\t\t};\n\t};\n}\n\nexport function getQuickNavigateHandler(\n\tid: string,\n\tnext?: boolean,\n): ICommandHandler {\n\treturn (accessor) => {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst keys = keybindingService.lookupKeybindings(id);\n\t\tconst quickNavigate = { keybindings: keys };\n\n\t\tquickInputService.navigate(!!next, quickNavigate);\n\t};\n}\nexport class PickerEditorState extends Disposable {\n\tprivate _editorViewState:\n\t\t| {\n\t\t\t\teditor: EditorInput;\n\t\t\t\tgroup: IEditorGroup;\n\t\t\t\tstate: ICodeEditorViewState | IDiffEditorViewState | undefined;\n\t\t  }\n\t\t| undefined = undefined;\n\n\tprivate readonly openedTransientEditors = new Set<EditorInput>(); // editors that were opened between set and restore\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupsService: IEditorGroupsService\n\t) {\n\t\tsuper();\n\t}\n\n\tset(): void {\n\t\tif (this._editorViewState) {\n\t\t\treturn; // return early if already done\n\t\t}\n\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tif (activeEditorPane) {\n\t\t\tthis._editorViewState = {\n\t\t\t\tgroup: activeEditorPane.group,\n\t\t\t\teditor: activeEditorPane.input,\n\t\t\t\tstate:\n\t\t\t\t\tgetIEditor(\n\t\t\t\t\t\tactiveEditorPane.getControl(),\n\t\t\t\t\t)?.saveViewState() ?? undefined,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Open a transient editor such that it may be closed when the state is restored.\n\t * Note that, when the state is restored, if the editor is no longer transient, it will not be closed.\n\t */\n\tasync openTransientEditor(\n\t\teditor:\n\t\t\t| IResourceEditorInput\n\t\t\t| ITextResourceEditorInput\n\t\t\t| IUntitledTextResourceEditorInput\n\t\t\t| IUntypedEditorInput,\n\t\tgroup?:\n\t\t\t| IEditorGroup\n\t\t\t| GroupIdentifier\n\t\t\t| SIDE_GROUP_TYPE\n\t\t\t| ACTIVE_GROUP_TYPE\n\t\t\t| AUX_WINDOW_GROUP_TYPE,\n\t): Promise<IEditorPane | undefined> {\n\t\teditor.options = { ...editor.options, transient: true };\n\n\t\tconst editorPane = await this.editorService.openEditor(editor, group);\n\t\tif (\n\t\t\teditorPane?.input &&\n\t\t\teditorPane.input !== this._editorViewState?.editor &&\n\t\t\teditorPane.group.isTransient(editorPane.input)\n\t\t) {\n\t\t\tthis.openedTransientEditors.add(editorPane.input);\n\t\t}\n\n\t\treturn editorPane;\n\t}\n\n\tasync restore(): Promise<void> {\n\t\tif (this._editorViewState) {\n\t\t\tfor (const editor of this.openedTransientEditors) {\n\t\t\t\tif (editor.isDirty()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (const group of this.editorGroupsService.groups) {\n\t\t\t\t\tif (group.isTransient(editor)) {\n\t\t\t\t\t\tawait group.closeEditor(editor, {\n\t\t\t\t\t\t\tpreserveFocus: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this._editorViewState.group.openEditor(\n\t\t\t\tthis._editorViewState.editor,\n\t\t\t\t{\n\t\t\t\t\tviewState: this._editorViewState.state,\n\t\t\t\t\tpreserveFocus: true, // important to not close the picker as a result\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tthis.reset();\n\t\t}\n\t}\n\n\treset() {\n\t\tthis._editorViewState = undefined;\n\t\tthis.openedTransientEditors.clear();\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.reset();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,kBAAkB;AAK3B,SAAS,gBAAgB;AAEzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAKP,SAAS,0BAA0B;AACnC,SAAS,0BAA0B;AAQnC;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EAGC;AAAA,OAEM;AAEA,MAAM,6BAA6B;AACnC,MAAM,wBAAwB,IAAI;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;AACO,MAAM,qBAAqB,eAAe;AAAA,EAChD;AACD;AAEO,MAAM,oCAAoC;AAC1C,MAAM,4BAA4B,eAAe;AAAA,EACvD;AAAA,EACA,eAAe,IAAI,iCAAiC;AACrD;AAoBO,SAAS,wBACf,IACA,MACkB;AAClB,SAAO,CAAC,aAAa;AACpB,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,UAAM,OAAO,kBAAkB,kBAAkB,EAAE;AACnD,UAAM,gBAAgB,EAAE,aAAa,KAAK;AAE1C,sBAAkB,SAAS,CAAC,CAAC,MAAM,aAAa;AAAA,EACjD;AACD;AAbgB;AAcT,IAAM,oBAAN,cAAgC,WAAW;AAAA;AAAA,EAWjD,YACkC,eACM,qBACtC;AACD,UAAM;AAH2B;AACM;AAAA,EAGxC;AAAA,EA5GD,OA4FkD;AAAA;AAAA;AAAA,EACzC,mBAMO;AAAA,EAEE,yBAAyB,oBAAI,IAAiB;AAAA,EAS/D,MAAY;AACX,QAAI,KAAK,kBAAkB;AAC1B;AAAA,IACD;AAEA,UAAM,mBAAmB,KAAK,cAAc;AAC5C,QAAI,kBAAkB;AACrB,WAAK,mBAAmB;AAAA,QACvB,OAAO,iBAAiB;AAAA,QACxB,QAAQ,iBAAiB;AAAA,QACzB,OACC;AAAA,UACC,iBAAiB,WAAW;AAAA,QAC7B,GAAG,cAAc,KAAK;AAAA,MACxB;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,oBACL,QAKA,OAMmC;AACnC,WAAO,UAAU,EAAE,GAAG,OAAO,SAAS,WAAW,KAAK;AAEtD,UAAM,aAAa,MAAM,KAAK,cAAc,WAAW,QAAQ,KAAK;AACpE,QACC,YAAY,SACZ,WAAW,UAAU,KAAK,kBAAkB,UAC5C,WAAW,MAAM,YAAY,WAAW,KAAK,GAC5C;AACD,WAAK,uBAAuB,IAAI,WAAW,KAAK;AAAA,IACjD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,UAAyB;AAC9B,QAAI,KAAK,kBAAkB;AAC1B,iBAAW,UAAU,KAAK,wBAAwB;AACjD,YAAI,OAAO,QAAQ,GAAG;AACrB;AAAA,QACD;AAEA,mBAAW,SAAS,KAAK,oBAAoB,QAAQ;AACpD,cAAI,MAAM,YAAY,MAAM,GAAG;AAC9B,kBAAM,MAAM,YAAY,QAAQ;AAAA,cAC/B,eAAe;AAAA,YAChB,CAAC;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAEA,YAAM,KAAK,iBAAiB,MAAM;AAAA,QACjC,KAAK,iBAAiB;AAAA,QACtB;AAAA,UACC,WAAW,KAAK,iBAAiB;AAAA,UACjC,eAAe;AAAA;AAAA,QAChB;AAAA,MACD;AAEA,WAAK,MAAM;AAAA,IACZ;AAAA,EACD;AAAA,EAEA,QAAQ;AACP,SAAK,mBAAmB;AACxB,SAAK,uBAAuB,MAAM;AAAA,EACnC;AAAA,EAES,UAAgB;AACxB,UAAM,QAAQ;AAEd,SAAK,MAAM;AAAA,EACZ;AACD;AAzGa,oBAAN;AAAA,EAYJ;AAAA,EACA;AAAA,GAbU;",
  "names": []
}
