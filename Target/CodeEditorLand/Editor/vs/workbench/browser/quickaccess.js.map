{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/quickaccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../nls.js';\nimport { ContextKeyExpr, RawContextKey } from '../../platform/contextkey/common/contextkey.js';\nimport { ICommandHandler } from '../../platform/commands/common/commands.js';\nimport { IKeybindingService } from '../../platform/keybinding/common/keybinding.js';\nimport { IQuickInputService } from '../../platform/quickinput/common/quickInput.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nimport { getIEditor } from '../../editor/browser/editorBrowser.js';\nimport { ICodeEditorViewState, IDiffEditorViewState } from '../../editor/common/editorCommon.js';\nimport { IResourceEditorInput, ITextResourceEditorInput } from '../../platform/editor/common/editor.js';\nimport { EditorInput } from '../common/editor/editorInput.js';\nimport { IEditorGroup, IEditorGroupsService } from '../services/editor/common/editorGroupsService.js';\nimport { ACTIVE_GROUP_TYPE, AUX_WINDOW_GROUP_TYPE, IEditorService, SIDE_GROUP_TYPE } from '../services/editor/common/editorService.js';\nimport { IUntitledTextResourceEditorInput, IUntypedEditorInput, GroupIdentifier, IEditorPane } from '../common/editor.js';\n\nexport const inQuickPickContextKeyValue = 'inQuickOpen';\nexport const InQuickPickContextKey = new RawContextKey<boolean>(inQuickPickContextKeyValue, false, localize('inQuickOpen', \"Whether keyboard focus is inside the quick open control\"));\nexport const inQuickPickContext = ContextKeyExpr.has(inQuickPickContextKeyValue);\n\nexport const defaultQuickAccessContextKeyValue = 'inFilesPicker';\nexport const defaultQuickAccessContext = ContextKeyExpr.and(inQuickPickContext, ContextKeyExpr.has(defaultQuickAccessContextKeyValue));\n\nexport interface IWorkbenchQuickAccessConfiguration {\n\treadonly workbench: {\n\t\treadonly commandPalette: {\n\t\t\treadonly history: number;\n\t\t\treadonly preserveInput: boolean;\n\t\t\treadonly experimental: {\n\t\t\t\treadonly suggestCommands: boolean;\n\t\t\t\treadonly enableNaturalLanguageSearch: boolean;\n\t\t\t\treadonly askChatLocation: 'quickChat' | 'chatView';\n\t\t\t};\n\t\t};\n\t\treadonly quickOpen: {\n\t\t\treadonly enableExperimentalNewVersion: boolean;\n\t\t\treadonly preserveInput: boolean;\n\t\t};\n\t};\n}\n\nexport function getQuickNavigateHandler(id: string, next?: boolean): ICommandHandler {\n\treturn accessor => {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst keys = keybindingService.lookupKeybindings(id);\n\t\tconst quickNavigate = { keybindings: keys };\n\n\t\tquickInputService.navigate(!!next, quickNavigate);\n\t};\n}\nexport class PickerEditorState extends Disposable {\n\tprivate _editorViewState: {\n\t\teditor: EditorInput;\n\t\tgroup: IEditorGroup;\n\t\tstate: ICodeEditorViewState | IDiffEditorViewState | undefined;\n\t} | undefined = undefined;\n\n\tprivate readonly openedTransientEditors = new Set<EditorInput>(); // editors that were opened between set and restore\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupsService: IEditorGroupsService\n\t) {\n\t\tsuper();\n\t}\n\n\tset(): void {\n\t\tif (this._editorViewState) {\n\t\t\treturn; // return early if already done\n\t\t}\n\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tif (activeEditorPane) {\n\t\t\tthis._editorViewState = {\n\t\t\t\tgroup: activeEditorPane.group,\n\t\t\t\teditor: activeEditorPane.input,\n\t\t\t\tstate: getIEditor(activeEditorPane.getControl())?.saveViewState() ?? undefined,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Open a transient editor such that it may be closed when the state is restored.\n\t * Note that, when the state is restored, if the editor is no longer transient, it will not be closed.\n\t */\n\tasync openTransientEditor(editor: IResourceEditorInput | ITextResourceEditorInput | IUntitledTextResourceEditorInput | IUntypedEditorInput, group?: IEditorGroup | GroupIdentifier | SIDE_GROUP_TYPE | ACTIVE_GROUP_TYPE | AUX_WINDOW_GROUP_TYPE): Promise<IEditorPane | undefined> {\n\t\teditor.options = { ...editor.options, transient: true };\n\n\t\tconst editorPane = await this.editorService.openEditor(editor, group);\n\t\tif (editorPane?.input && editorPane.input !== this._editorViewState?.editor && editorPane.group.isTransient(editorPane.input)) {\n\t\t\tthis.openedTransientEditors.add(editorPane.input);\n\t\t}\n\n\t\treturn editorPane;\n\t}\n\n\tasync restore(): Promise<void> {\n\t\tif (this._editorViewState) {\n\t\t\tfor (const editor of this.openedTransientEditors) {\n\t\t\t\tif (editor.isDirty()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (const group of this.editorGroupsService.groups) {\n\t\t\t\t\tif (group.isTransient(editor)) {\n\t\t\t\t\t\tawait group.closeEditor(editor, { preserveFocus: true });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this._editorViewState.group.openEditor(this._editorViewState.editor, {\n\t\t\t\tviewState: this._editorViewState.state,\n\t\t\t\tpreserveFocus: true // important to not close the picker as a result\n\t\t\t});\n\n\t\t\tthis.reset();\n\t\t}\n\t}\n\n\treset() {\n\t\tthis._editorViewState = undefined;\n\t\tthis.openedTransientEditors.clear();\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.reset();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
