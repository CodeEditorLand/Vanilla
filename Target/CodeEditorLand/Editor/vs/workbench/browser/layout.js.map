{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/layout.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableMap, DisposableStore, IDisposable, toDisposable } from '../../base/common/lifecycle.js';\nimport { Event, Emitter } from '../../base/common/event.js';\nimport { EventType, addDisposableListener, getClientArea, position, size, IDimension, isAncestorUsingFlowTo, computeScreenAwareSize, getActiveDocument, getWindows, getActiveWindow, isActiveDocument, getWindow, getWindowId, getActiveElement } from '../../base/browser/dom.js';\nimport { onDidChangeFullscreen, isFullscreen, isWCOEnabled } from '../../base/browser/browser.js';\nimport { IWorkingCopyBackupService } from '../services/workingCopy/common/workingCopyBackup.js';\nimport { isWindows, isLinux, isMacintosh, isWeb, isIOS } from '../../base/common/platform.js';\nimport { EditorInputCapabilities, GroupIdentifier, isResourceEditorInput, IUntypedEditorInput, pathsToEditors } from '../common/editor.js';\nimport { SidebarPart } from './parts/sidebar/sidebarPart.js';\nimport { PanelPart } from './parts/panel/panelPart.js';\nimport { Position, Parts, PanelOpensMaximizedOptions, IWorkbenchLayoutService, positionFromString, positionToString, panelOpensMaximizedFromString, PanelAlignment, ActivityBarPosition, LayoutSettings, MULTI_WINDOW_PARTS, SINGLE_WINDOW_PARTS, ZenModeSettings, EditorTabsMode, EditorActionsLocation, shouldShowCustomTitleBar, isHorizontal } from '../services/layout/browser/layoutService.js';\nimport { isTemporaryWorkspace, IWorkspaceContextService, WorkbenchState } from '../../platform/workspace/common/workspace.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../platform/storage/common/storage.js';\nimport { IConfigurationChangeEvent, IConfigurationService } from '../../platform/configuration/common/configuration.js';\nimport { ITitleService } from '../services/title/browser/titleService.js';\nimport { ServicesAccessor } from '../../platform/instantiation/common/instantiation.js';\nimport { StartupKind, ILifecycleService } from '../services/lifecycle/common/lifecycle.js';\nimport { getMenuBarVisibility, IPath, hasNativeTitlebar, hasCustomTitlebar, TitleBarSetting, CustomTitleBarVisibility, useWindowControlsOverlay } from '../../platform/window/common/window.js';\nimport { IHostService } from '../services/host/browser/host.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../services/environment/browser/environmentService.js';\nimport { IEditorService } from '../services/editor/common/editorService.js';\nimport { EditorGroupLayout, GroupsOrder, IEditorGroupsService } from '../services/editor/common/editorGroupsService.js';\nimport { SerializableGrid, ISerializableView, ISerializedGrid, Orientation, ISerializedNode, ISerializedLeafNode, Direction, IViewSize, Sizing } from '../../base/browser/ui/grid/grid.js';\nimport { Part } from './part.js';\nimport { IStatusbarService } from '../services/statusbar/browser/statusbar.js';\nimport { IFileService } from '../../platform/files/common/files.js';\nimport { isCodeEditor } from '../../editor/browser/editorBrowser.js';\nimport { coalesce } from '../../base/common/arrays.js';\nimport { assertIsDefined } from '../../base/common/types.js';\nimport { INotificationService, NotificationsFilter } from '../../platform/notification/common/notification.js';\nimport { IThemeService } from '../../platform/theme/common/themeService.js';\nimport { WINDOW_ACTIVE_BORDER, WINDOW_INACTIVE_BORDER } from '../common/theme.js';\nimport { LineNumbersType } from '../../editor/common/config/editorOptions.js';\nimport { URI } from '../../base/common/uri.js';\nimport { IViewDescriptorService, ViewContainerLocation } from '../common/views.js';\nimport { DiffEditorInput } from '../common/editor/diffEditorInput.js';\nimport { mark } from '../../base/common/performance.js';\nimport { IExtensionService } from '../services/extensions/common/extensions.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { DeferredPromise, Promises } from '../../base/common/async.js';\nimport { IBannerService } from '../services/banner/browser/bannerService.js';\nimport { IPaneCompositePartService } from '../services/panecomposite/browser/panecomposite.js';\nimport { AuxiliaryBarPart } from './parts/auxiliarybar/auxiliaryBarPart.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { IAuxiliaryWindowService } from '../services/auxiliaryWindow/browser/auxiliaryWindowService.js';\nimport { CodeWindow, mainWindow } from '../../base/browser/window.js';\n\n//#region Layout Implementation\n\ninterface ILayoutRuntimeState {\n\tactiveContainerId: number;\n\tmainWindowFullscreen: boolean;\n\treadonly maximized: Set<number>;\n\thasFocus: boolean;\n\tmainWindowBorder: boolean;\n\treadonly menuBar: {\n\t\ttoggled: boolean;\n\t};\n\treadonly zenMode: {\n\t\treadonly transitionDisposables: DisposableMap<string, IDisposable>;\n\t};\n}\n\ninterface IEditorToOpen {\n\treadonly editor: IUntypedEditorInput;\n\treadonly viewColumn?: number;\n}\n\ninterface ILayoutInitializationState {\n\treadonly views: {\n\t\treadonly defaults: string[] | undefined;\n\t\treadonly containerToRestore: {\n\t\t\tsideBar?: string;\n\t\t\tpanel?: string;\n\t\t\tauxiliaryBar?: string;\n\t\t};\n\t};\n\treadonly editor: {\n\t\treadonly restoreEditors: boolean;\n\t\treadonly editorsToOpen: Promise<IEditorToOpen[]>;\n\t};\n\treadonly layout?: {\n\t\treadonly editors?: EditorGroupLayout;\n\t};\n}\n\ninterface ILayoutState {\n\treadonly runtime: ILayoutRuntimeState;\n\treadonly initialization: ILayoutInitializationState;\n}\n\nenum LayoutClasses {\n\tSIDEBAR_HIDDEN = 'nosidebar',\n\tMAIN_EDITOR_AREA_HIDDEN = 'nomaineditorarea',\n\tPANEL_HIDDEN = 'nopanel',\n\tAUXILIARYBAR_HIDDEN = 'noauxiliarybar',\n\tSTATUSBAR_HIDDEN = 'nostatusbar',\n\tFULLSCREEN = 'fullscreen',\n\tMAXIMIZED = 'maximized',\n\tWINDOW_BORDER = 'border'\n}\n\ninterface IPathToOpen extends IPath {\n\treadonly viewColumn?: number;\n}\n\ninterface IInitialEditorsState {\n\treadonly filesToOpenOrCreate?: IPathToOpen[];\n\treadonly filesToDiff?: IPathToOpen[];\n\treadonly filesToMerge?: IPathToOpen[];\n\n\treadonly layout?: EditorGroupLayout;\n}\n\nexport const TITLE_BAR_SETTINGS = [\n\tLayoutSettings.ACTIVITY_BAR_LOCATION,\n\tLayoutSettings.COMMAND_CENTER,\n\tLayoutSettings.EDITOR_ACTIONS_LOCATION,\n\tLayoutSettings.LAYOUT_ACTIONS,\n\t'window.menuBarVisibility',\n\tTitleBarSetting.TITLE_BAR_STYLE,\n\tTitleBarSetting.CUSTOM_TITLE_BAR_VISIBILITY,\n];\n\nexport abstract class Layout extends Disposable implements IWorkbenchLayoutService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeZenMode = this._register(new Emitter<boolean>());\n\treadonly onDidChangeZenMode = this._onDidChangeZenMode.event;\n\n\tprivate readonly _onDidChangeMainEditorCenteredLayout = this._register(new Emitter<boolean>());\n\treadonly onDidChangeMainEditorCenteredLayout = this._onDidChangeMainEditorCenteredLayout.event;\n\n\tprivate readonly _onDidChangePanelAlignment = this._register(new Emitter<PanelAlignment>());\n\treadonly onDidChangePanelAlignment = this._onDidChangePanelAlignment.event;\n\n\tprivate readonly _onDidChangeWindowMaximized = this._register(new Emitter<{ windowId: number; maximized: boolean }>());\n\treadonly onDidChangeWindowMaximized = this._onDidChangeWindowMaximized.event;\n\n\tprivate readonly _onDidChangePanelPosition = this._register(new Emitter<string>());\n\treadonly onDidChangePanelPosition = this._onDidChangePanelPosition.event;\n\n\tprivate readonly _onDidChangePartVisibility = this._register(new Emitter<void>());\n\treadonly onDidChangePartVisibility = this._onDidChangePartVisibility.event;\n\n\tprivate readonly _onDidChangeNotificationsVisibility = this._register(new Emitter<boolean>());\n\treadonly onDidChangeNotificationsVisibility = this._onDidChangeNotificationsVisibility.event;\n\n\tprivate readonly _onDidLayoutMainContainer = this._register(new Emitter<IDimension>());\n\treadonly onDidLayoutMainContainer = this._onDidLayoutMainContainer.event;\n\n\tprivate readonly _onDidLayoutActiveContainer = this._register(new Emitter<IDimension>());\n\treadonly onDidLayoutActiveContainer = this._onDidLayoutActiveContainer.event;\n\n\tprivate readonly _onDidLayoutContainer = this._register(new Emitter<{ container: HTMLElement; dimension: IDimension }>());\n\treadonly onDidLayoutContainer = this._onDidLayoutContainer.event;\n\n\tprivate readonly _onDidAddContainer = this._register(new Emitter<{ container: HTMLElement; disposables: DisposableStore }>());\n\treadonly onDidAddContainer = this._onDidAddContainer.event;\n\n\tprivate readonly _onDidChangeActiveContainer = this._register(new Emitter<void>());\n\treadonly onDidChangeActiveContainer = this._onDidChangeActiveContainer.event;\n\n\t//#endregion\n\n\t//#region Properties\n\n\treadonly mainContainer = document.createElement('div');\n\tget activeContainer() { return this.getContainerFromDocument(getActiveDocument()); }\n\tget containers(): Iterable<HTMLElement> {\n\t\tconst containers: HTMLElement[] = [];\n\t\tfor (const { window } of getWindows()) {\n\t\t\tcontainers.push(this.getContainerFromDocument(window.document));\n\t\t}\n\n\t\treturn containers;\n\t}\n\n\tprivate getContainerFromDocument(targetDocument: Document): HTMLElement {\n\t\tif (targetDocument === this.mainContainer.ownerDocument) {\n\t\t\t// main window\n\t\t\treturn this.mainContainer;\n\t\t} else {\n\t\t\t// auxiliary window\n\t\t\treturn targetDocument.body.getElementsByClassName('monaco-workbench')[0] as HTMLElement;\n\t\t}\n\t}\n\n\tprivate readonly containerStylesLoaded = new Map<number /* window ID */, Promise<void>>();\n\twhenContainerStylesLoaded(window: CodeWindow): Promise<void> | undefined {\n\t\treturn this.containerStylesLoaded.get(window.vscodeWindowId);\n\t}\n\n\tprivate _mainContainerDimension!: IDimension;\n\tget mainContainerDimension(): IDimension { return this._mainContainerDimension; }\n\n\tget activeContainerDimension(): IDimension {\n\t\treturn this.getContainerDimension(this.activeContainer);\n\t}\n\n\tprivate getContainerDimension(container: HTMLElement): IDimension {\n\t\tif (container === this.mainContainer) {\n\t\t\treturn this.mainContainerDimension; // main window\n\t\t} else {\n\t\t\treturn getClientArea(container); \t// auxiliary window\n\t\t}\n\t}\n\n\tget mainContainerOffset() {\n\t\treturn this.computeContainerOffset(mainWindow);\n\t}\n\n\tget activeContainerOffset() {\n\t\treturn this.computeContainerOffset(getWindow(this.activeContainer));\n\t}\n\n\tprivate computeContainerOffset(targetWindow: Window) {\n\t\tlet top = 0;\n\t\tlet quickPickTop = 0;\n\n\t\tif (this.isVisible(Parts.BANNER_PART)) {\n\t\t\ttop = this.getPart(Parts.BANNER_PART).maximumHeight;\n\t\t\tquickPickTop = top;\n\t\t}\n\n\t\tconst titlebarVisible = this.isVisible(Parts.TITLEBAR_PART, targetWindow);\n\t\tif (titlebarVisible) {\n\t\t\ttop += this.getPart(Parts.TITLEBAR_PART).maximumHeight;\n\t\t\tquickPickTop = top;\n\t\t}\n\n\t\tconst isCommandCenterVisible = titlebarVisible && this.configurationService.getValue<boolean>(LayoutSettings.COMMAND_CENTER) !== false;\n\t\tif (isCommandCenterVisible) {\n\t\t\t// If the command center is visible then the quickinput\n\t\t\t// should go over the title bar and the banner\n\t\t\tquickPickTop = 6;\n\t\t}\n\n\t\treturn { top, quickPickTop };\n\t}\n\n\t//#endregion\n\n\tprivate readonly parts = new Map<string, Part>();\n\n\tprivate initialized = false;\n\tprivate workbenchGrid!: SerializableGrid<ISerializableView>;\n\n\tprivate titleBarPartView!: ISerializableView;\n\tprivate bannerPartView!: ISerializableView;\n\tprivate activityBarPartView!: ISerializableView;\n\tprivate sideBarPartView!: ISerializableView;\n\tprivate panelPartView!: ISerializableView;\n\tprivate auxiliaryBarPartView!: ISerializableView;\n\tprivate editorPartView!: ISerializableView;\n\tprivate statusBarPartView!: ISerializableView;\n\n\tprivate environmentService!: IBrowserWorkbenchEnvironmentService;\n\tprivate extensionService!: IExtensionService;\n\tprivate configurationService!: IConfigurationService;\n\tprivate storageService!: IStorageService;\n\tprivate hostService!: IHostService;\n\tprivate editorService!: IEditorService;\n\tprivate mainPartEditorService!: IEditorService;\n\tprivate editorGroupService!: IEditorGroupsService;\n\tprivate paneCompositeService!: IPaneCompositePartService;\n\tprivate titleService!: ITitleService;\n\tprivate viewDescriptorService!: IViewDescriptorService;\n\tprivate contextService!: IWorkspaceContextService;\n\tprivate workingCopyBackupService!: IWorkingCopyBackupService;\n\tprivate notificationService!: INotificationService;\n\tprivate themeService!: IThemeService;\n\tprivate statusBarService!: IStatusbarService;\n\tprivate logService!: ILogService;\n\tprivate telemetryService!: ITelemetryService;\n\tprivate auxiliaryWindowService!: IAuxiliaryWindowService;\n\n\tprivate state!: ILayoutState;\n\tprivate stateModel!: LayoutStateModel;\n\n\tprivate disposed = false;\n\n\tconstructor(\n\t\tprotected readonly parent: HTMLElement\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected initLayout(accessor: ServicesAccessor): void {\n\n\t\t// Services\n\t\tthis.environmentService = accessor.get(IBrowserWorkbenchEnvironmentService);\n\t\tthis.configurationService = accessor.get(IConfigurationService);\n\t\tthis.hostService = accessor.get(IHostService);\n\t\tthis.contextService = accessor.get(IWorkspaceContextService);\n\t\tthis.storageService = accessor.get(IStorageService);\n\t\tthis.workingCopyBackupService = accessor.get(IWorkingCopyBackupService);\n\t\tthis.themeService = accessor.get(IThemeService);\n\t\tthis.extensionService = accessor.get(IExtensionService);\n\t\tthis.logService = accessor.get(ILogService);\n\t\tthis.telemetryService = accessor.get(ITelemetryService);\n\t\tthis.auxiliaryWindowService = accessor.get(IAuxiliaryWindowService);\n\n\t\t// Parts\n\t\tthis.editorService = accessor.get(IEditorService);\n\t\tthis.mainPartEditorService = this.editorService.createScoped('main', this._store);\n\t\tthis.editorGroupService = accessor.get(IEditorGroupsService);\n\t\tthis.paneCompositeService = accessor.get(IPaneCompositePartService);\n\t\tthis.viewDescriptorService = accessor.get(IViewDescriptorService);\n\t\tthis.titleService = accessor.get(ITitleService);\n\t\tthis.notificationService = accessor.get(INotificationService);\n\t\tthis.statusBarService = accessor.get(IStatusbarService);\n\t\taccessor.get(IBannerService);\n\n\t\t// Listeners\n\t\tthis.registerLayoutListeners();\n\n\t\t// State\n\t\tthis.initLayoutState(accessor.get(ILifecycleService), accessor.get(IFileService));\n\t}\n\n\tprivate registerLayoutListeners(): void {\n\n\t\t// Restore editor if hidden\n\t\tconst showEditorIfHidden = () => {\n\t\t\tif (!this.isVisible(Parts.EDITOR_PART, mainWindow)) {\n\t\t\t\tthis.toggleMaximizedPanel();\n\t\t\t}\n\t\t};\n\n\t\t// Wait to register these listeners after the editor group service\n\t\t// is ready to avoid conflicts on startup\n\t\tthis.editorGroupService.whenRestored.then(() => {\n\n\t\t\t// Restore main editor part on any editor change in main part\n\t\t\tthis._register(this.mainPartEditorService.onDidVisibleEditorsChange(showEditorIfHidden));\n\t\t\tthis._register(this.editorGroupService.mainPart.onDidActivateGroup(showEditorIfHidden));\n\n\t\t\t// Revalidate center layout when active editor changes: diff editor quits centered mode.\n\t\t\tthis._register(this.mainPartEditorService.onDidActiveEditorChange(() => this.centerMainEditorLayout(this.stateModel.getRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED))));\n\t\t});\n\n\t\t// Configuration changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif ([\n\t\t\t\t...TITLE_BAR_SETTINGS,\n\t\t\t\tLegacyWorkbenchLayoutSettings.SIDEBAR_POSITION,\n\t\t\t\tLegacyWorkbenchLayoutSettings.STATUSBAR_VISIBLE,\n\t\t\t].some(setting => e.affectsConfiguration(setting))) {\n\t\t\t\t// Show Custom TitleBar if actions moved to the titlebar\n\t\t\t\tconst editorActionsMovedToTitlebar = e.affectsConfiguration(LayoutSettings.EDITOR_ACTIONS_LOCATION) && this.configurationService.getValue<EditorActionsLocation>(LayoutSettings.EDITOR_ACTIONS_LOCATION) === EditorActionsLocation.TITLEBAR;\n\n\t\t\t\tlet activityBarMovedToTopOrBottom = false;\n\t\t\t\tif (e.affectsConfiguration(LayoutSettings.ACTIVITY_BAR_LOCATION)) {\n\t\t\t\t\tconst activityBarPosition = this.configurationService.getValue<ActivityBarPosition>(LayoutSettings.ACTIVITY_BAR_LOCATION);\n\t\t\t\t\tactivityBarMovedToTopOrBottom = activityBarPosition === ActivityBarPosition.TOP || activityBarPosition === ActivityBarPosition.BOTTOM;\n\t\t\t\t}\n\n\t\t\t\tif (activityBarMovedToTopOrBottom || editorActionsMovedToTitlebar) {\n\t\t\t\t\tif (this.configurationService.getValue<CustomTitleBarVisibility>(TitleBarSetting.CUSTOM_TITLE_BAR_VISIBILITY) === CustomTitleBarVisibility.NEVER) {\n\t\t\t\t\t\tthis.configurationService.updateValue(TitleBarSetting.CUSTOM_TITLE_BAR_VISIBILITY, CustomTitleBarVisibility.AUTO);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.doUpdateLayoutConfiguration();\n\t\t\t}\n\t\t}));\n\n\t\t// Fullscreen changes\n\t\tthis._register(onDidChangeFullscreen(windowId => this.onFullscreenChanged(windowId)));\n\n\t\t// Group changes\n\t\tthis._register(this.editorGroupService.mainPart.onDidAddGroup(() => this.centerMainEditorLayout(this.stateModel.getRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED))));\n\t\tthis._register(this.editorGroupService.mainPart.onDidRemoveGroup(() => this.centerMainEditorLayout(this.stateModel.getRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED))));\n\t\tthis._register(this.editorGroupService.mainPart.onDidChangeGroupMaximized(() => this.centerMainEditorLayout(this.stateModel.getRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED))));\n\n\t\t// Prevent workbench from scrolling #55456\n\t\tthis._register(addDisposableListener(this.mainContainer, EventType.SCROLL, () => this.mainContainer.scrollTop = 0));\n\n\t\t// Menubar visibility changes\n\t\tconst showingCustomMenu = (isWindows || isLinux || isWeb) && !hasNativeTitlebar(this.configurationService);\n\t\tif (showingCustomMenu) {\n\t\t\tthis._register(this.titleService.onMenubarVisibilityChange(visible => this.onMenubarToggled(visible)));\n\t\t}\n\n\t\t// Theme changes\n\t\tthis._register(this.themeService.onDidColorThemeChange(() => this.updateWindowsBorder()));\n\n\t\t// Window active / focus changes\n\t\tthis._register(this.hostService.onDidChangeFocus(focused => this.onWindowFocusChanged(focused)));\n\t\tthis._register(this.hostService.onDidChangeActiveWindow(() => this.onActiveWindowChanged()));\n\n\t\t// WCO changes\n\t\tif (isWeb && typeof (navigator as any).windowControlsOverlay === 'object') {\n\t\t\tthis._register(addDisposableListener((navigator as any).windowControlsOverlay, 'geometrychange', () => this.onDidChangeWCO()));\n\t\t}\n\n\t\t// Auxiliary windows\n\t\tthis._register(this.auxiliaryWindowService.onDidOpenAuxiliaryWindow(({ window, disposables }) => {\n\t\t\tconst windowId = window.window.vscodeWindowId;\n\t\t\tthis.containerStylesLoaded.set(windowId, window.whenStylesHaveLoaded);\n\t\t\twindow.whenStylesHaveLoaded.then(() => this.containerStylesLoaded.delete(windowId));\n\t\t\tdisposables.add(toDisposable(() => this.containerStylesLoaded.delete(windowId)));\n\n\t\t\tconst eventDisposables = disposables.add(new DisposableStore());\n\t\t\tthis._onDidAddContainer.fire({ container: window.container, disposables: eventDisposables });\n\n\t\t\tdisposables.add(window.onDidLayout(dimension => this.handleContainerDidLayout(window.container, dimension)));\n\t\t}));\n\t}\n\n\tprivate onMenubarToggled(visible: boolean): void {\n\t\tif (visible !== this.state.runtime.menuBar.toggled) {\n\t\t\tthis.state.runtime.menuBar.toggled = visible;\n\n\t\t\tconst menuBarVisibility = getMenuBarVisibility(this.configurationService);\n\n\t\t\t// The menu bar toggles the title bar in web because it does not need to be shown for window controls only\n\t\t\tif (isWeb && menuBarVisibility === 'toggle') {\n\t\t\t\tthis.workbenchGrid.setViewVisible(this.titleBarPartView, shouldShowCustomTitleBar(this.configurationService, mainWindow, this.state.runtime.menuBar.toggled, this.isZenModeActive()));\n\t\t\t}\n\n\t\t\t// The menu bar toggles the title bar in full screen for toggle and classic settings\n\t\t\telse if (this.state.runtime.mainWindowFullscreen && (menuBarVisibility === 'toggle' || menuBarVisibility === 'classic')) {\n\t\t\t\tthis.workbenchGrid.setViewVisible(this.titleBarPartView, shouldShowCustomTitleBar(this.configurationService, mainWindow, this.state.runtime.menuBar.toggled, this.isZenModeActive()));\n\t\t\t}\n\n\t\t\t// Move layout call to any time the menubar\n\t\t\t// is toggled to update consumers of offset\n\t\t\t// see issue #115267\n\t\t\tthis.handleContainerDidLayout(this.mainContainer, this._mainContainerDimension);\n\t\t}\n\t}\n\n\tprivate handleContainerDidLayout(container: HTMLElement, dimension: IDimension): void {\n\t\tif (container === this.mainContainer) {\n\t\t\tthis._onDidLayoutMainContainer.fire(dimension);\n\t\t}\n\n\t\tif (isActiveDocument(container)) {\n\t\t\tthis._onDidLayoutActiveContainer.fire(dimension);\n\t\t}\n\n\t\tthis._onDidLayoutContainer.fire({ container, dimension });\n\t}\n\n\tprivate onFullscreenChanged(windowId: number): void {\n\t\tif (windowId !== mainWindow.vscodeWindowId) {\n\t\t\treturn; // ignore all but main window\n\t\t}\n\n\t\tthis.state.runtime.mainWindowFullscreen = isFullscreen(mainWindow);\n\n\t\t// Apply as CSS class\n\t\tif (this.state.runtime.mainWindowFullscreen) {\n\t\t\tthis.mainContainer.classList.add(LayoutClasses.FULLSCREEN);\n\t\t} else {\n\t\t\tthis.mainContainer.classList.remove(LayoutClasses.FULLSCREEN);\n\n\t\t\tconst zenModeExitInfo = this.stateModel.getRuntimeValue(LayoutStateKeys.ZEN_MODE_EXIT_INFO);\n\t\t\tif (zenModeExitInfo.transitionedToFullScreen && this.isZenModeActive()) {\n\t\t\t\tthis.toggleZenMode();\n\t\t\t}\n\t\t}\n\n\t\t// Change edge snapping accordingly\n\t\tthis.workbenchGrid.edgeSnapping = this.state.runtime.mainWindowFullscreen;\n\n\t\t// Changing fullscreen state of the main window has an impact\n\t\t// on custom title bar visibility, so we need to update\n\t\tif (hasCustomTitlebar(this.configurationService)) {\n\n\t\t\t// Propagate to grid\n\t\t\tthis.workbenchGrid.setViewVisible(this.titleBarPartView, shouldShowCustomTitleBar(this.configurationService, mainWindow, this.state.runtime.menuBar.toggled, this.isZenModeActive()));\n\n\t\t\tthis.updateWindowsBorder(true);\n\t\t}\n\t}\n\n\tprivate onActiveWindowChanged(): void {\n\t\tconst activeContainerId = this.getActiveContainerId();\n\t\tif (this.state.runtime.activeContainerId !== activeContainerId) {\n\t\t\tthis.state.runtime.activeContainerId = activeContainerId;\n\n\t\t\t// Indicate active window border\n\t\t\tthis.updateWindowsBorder();\n\n\t\t\tthis._onDidChangeActiveContainer.fire();\n\t\t}\n\t}\n\n\tprivate onWindowFocusChanged(hasFocus: boolean): void {\n\t\tif (this.state.runtime.hasFocus !== hasFocus) {\n\t\t\tthis.state.runtime.hasFocus = hasFocus;\n\t\t\tthis.updateWindowsBorder();\n\t\t}\n\t}\n\n\tprivate getActiveContainerId(): number {\n\t\tconst activeContainer = this.activeContainer;\n\n\t\treturn getWindow(activeContainer).vscodeWindowId;\n\t}\n\n\tprivate doUpdateLayoutConfiguration(skipLayout?: boolean): void {\n\n\t\t// Custom Titlebar visibility with native titlebar\n\t\tthis.updateCustomTitleBarVisibility();\n\n\t\t// Menubar visibility\n\t\tthis.updateMenubarVisibility(!!skipLayout);\n\n\t\t// Centered Layout\n\t\tthis.editorGroupService.whenRestored.then(() => {\n\t\t\tthis.centerMainEditorLayout(this.stateModel.getRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED), skipLayout);\n\t\t});\n\t}\n\n\tprivate setSideBarPosition(position: Position): void {\n\t\tconst activityBar = this.getPart(Parts.ACTIVITYBAR_PART);\n\t\tconst sideBar = this.getPart(Parts.SIDEBAR_PART);\n\t\tconst auxiliaryBar = this.getPart(Parts.AUXILIARYBAR_PART);\n\t\tconst newPositionValue = (position === Position.LEFT) ? 'left' : 'right';\n\t\tconst oldPositionValue = (position === Position.RIGHT) ? 'left' : 'right';\n\t\tconst panelAlignment = this.getPanelAlignment();\n\t\tconst panelPosition = this.getPanelPosition();\n\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.SIDEBAR_POSITON, position);\n\n\t\t// Adjust CSS\n\t\tconst activityBarContainer = assertIsDefined(activityBar.getContainer());\n\t\tconst sideBarContainer = assertIsDefined(sideBar.getContainer());\n\t\tconst auxiliaryBarContainer = assertIsDefined(auxiliaryBar.getContainer());\n\t\tactivityBarContainer.classList.remove(oldPositionValue);\n\t\tsideBarContainer.classList.remove(oldPositionValue);\n\t\tactivityBarContainer.classList.add(newPositionValue);\n\t\tsideBarContainer.classList.add(newPositionValue);\n\n\t\t// Auxiliary Bar has opposite values\n\t\tauxiliaryBarContainer.classList.remove(newPositionValue);\n\t\tauxiliaryBarContainer.classList.add(oldPositionValue);\n\n\t\t// Update Styles\n\t\tactivityBar.updateStyles();\n\t\tsideBar.updateStyles();\n\t\tauxiliaryBar.updateStyles();\n\n\t\t// Move activity bar and side bars\n\t\tthis.adjustPartPositions(position, panelAlignment, panelPosition);\n\t}\n\n\tprivate updateWindowsBorder(skipLayout = false) {\n\t\tif (\n\t\t\tisWeb ||\n\t\t\tisWindows || \t\t\t\t\t\t\t\t\t\t\t// not working well with zooming (border often not visible)\n\t\t\tuseWindowControlsOverlay(this.configurationService) || \t// not working with WCO (border cannot draw over the overlay)\n\t\t\thasNativeTitlebar(this.configurationService)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst theme = this.themeService.getColorTheme();\n\n\t\tconst activeBorder = theme.getColor(WINDOW_ACTIVE_BORDER);\n\t\tconst inactiveBorder = theme.getColor(WINDOW_INACTIVE_BORDER);\n\n\t\tconst didHaveMainWindowBorder = this.hasMainWindowBorder();\n\n\t\tfor (const container of this.containers) {\n\t\t\tconst isMainContainer = container === this.mainContainer;\n\t\t\tconst isActiveContainer = this.activeContainer === container;\n\t\t\tconst containerWindowId = getWindowId(getWindow(container));\n\n\t\t\tlet windowBorder = false;\n\t\t\tif (!this.state.runtime.mainWindowFullscreen && !this.state.runtime.maximized.has(containerWindowId) && (activeBorder || inactiveBorder)) {\n\t\t\t\twindowBorder = true;\n\n\t\t\t\t// If the inactive color is missing, fallback to the active one\n\t\t\t\tconst borderColor = isActiveContainer && this.state.runtime.hasFocus ? activeBorder : inactiveBorder ?? activeBorder;\n\t\t\t\tcontainer.style.setProperty('--window-border-color', borderColor?.toString() ?? 'transparent');\n\t\t\t}\n\n\t\t\tif (isMainContainer) {\n\t\t\t\tthis.state.runtime.mainWindowBorder = windowBorder;\n\t\t\t}\n\n\t\t\tcontainer.classList.toggle(LayoutClasses.WINDOW_BORDER, windowBorder);\n\t\t}\n\n\t\tif (!skipLayout && didHaveMainWindowBorder !== this.hasMainWindowBorder()) {\n\t\t\tthis.layout();\n\t\t}\n\t}\n\n\tprivate initLayoutState(lifecycleService: ILifecycleService, fileService: IFileService): void {\n\t\tthis.stateModel = new LayoutStateModel(this.storageService, this.configurationService, this.contextService, this.parent);\n\t\tthis.stateModel.load();\n\n\t\t// Both editor and panel should not be hidden on startup\n\t\tif (this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_HIDDEN) && this.stateModel.getRuntimeValue(LayoutStateKeys.EDITOR_HIDDEN)) {\n\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.EDITOR_HIDDEN, false);\n\t\t}\n\n\t\tthis._register(this.stateModel.onDidChangeState(change => {\n\t\t\tif (change.key === LayoutStateKeys.ACTIVITYBAR_HIDDEN) {\n\t\t\t\tthis.setActivityBarHidden(change.value as boolean);\n\t\t\t}\n\n\t\t\tif (change.key === LayoutStateKeys.STATUSBAR_HIDDEN) {\n\t\t\t\tthis.setStatusBarHidden(change.value as boolean);\n\t\t\t}\n\n\t\t\tif (change.key === LayoutStateKeys.SIDEBAR_POSITON) {\n\t\t\t\tthis.setSideBarPosition(change.value as Position);\n\t\t\t}\n\n\t\t\tif (change.key === LayoutStateKeys.PANEL_POSITION) {\n\t\t\t\tthis.setPanelPosition(change.value as Position);\n\t\t\t}\n\n\t\t\tif (change.key === LayoutStateKeys.PANEL_ALIGNMENT) {\n\t\t\t\tthis.setPanelAlignment(change.value as PanelAlignment);\n\t\t\t}\n\n\t\t\tthis.doUpdateLayoutConfiguration();\n\t\t}));\n\n\t\t// Layout Initialization State\n\t\tconst initialEditorsState = this.getInitialEditorsState();\n\t\tif (initialEditorsState) {\n\t\t\tthis.logService.trace('Initial editor state', initialEditorsState);\n\t\t}\n\t\tconst initialLayoutState: ILayoutInitializationState = {\n\t\t\tlayout: {\n\t\t\t\teditors: initialEditorsState?.layout\n\t\t\t},\n\t\t\teditor: {\n\t\t\t\trestoreEditors: this.shouldRestoreEditors(this.contextService, initialEditorsState),\n\t\t\t\teditorsToOpen: this.resolveEditorsToOpen(fileService, initialEditorsState),\n\t\t\t},\n\t\t\tviews: {\n\t\t\t\tdefaults: this.getDefaultLayoutViews(this.environmentService, this.storageService),\n\t\t\t\tcontainerToRestore: {}\n\t\t\t}\n\t\t};\n\n\t\t// Layout Runtime State\n\t\tconst layoutRuntimeState: ILayoutRuntimeState = {\n\t\t\tactiveContainerId: this.getActiveContainerId(),\n\t\t\tmainWindowFullscreen: isFullscreen(mainWindow),\n\t\t\thasFocus: this.hostService.hasFocus,\n\t\t\tmaximized: new Set<number>(),\n\t\t\tmainWindowBorder: false,\n\t\t\tmenuBar: {\n\t\t\t\ttoggled: false,\n\t\t\t},\n\t\t\tzenMode: {\n\t\t\t\ttransitionDisposables: new DisposableMap(),\n\t\t\t}\n\t\t};\n\n\t\tthis.state = {\n\t\t\tinitialization: initialLayoutState,\n\t\t\truntime: layoutRuntimeState,\n\t\t};\n\n\t\tconst isNewWindow = lifecycleService.startupKind === StartupKind.NewWindow;\n\t\tconst activityBarNotDefault = this.configurationService.getValue<ActivityBarPosition>(LayoutSettings.ACTIVITY_BAR_LOCATION) !== ActivityBarPosition.DEFAULT;\n\n\t\t// Sidebar View Container To Restore\n\t\tif (this.isVisible(Parts.SIDEBAR_PART)) {\n\n\t\t\t// Only restore last viewlet if window was reloaded or we are in development mode\n\t\t\tlet viewContainerToRestore: string | undefined;\n\t\t\tif (\n\t\t\t\t!this.environmentService.isBuilt ||\n\t\t\t\tlifecycleService.startupKind === StartupKind.ReloadedWindow ||\n\t\t\t\tthis.environmentService.isExtensionDevelopment && !this.environmentService.extensionTestsLocationURI\n\t\t\t) {\n\t\t\t\tviewContainerToRestore = this.storageService.get(SidebarPart.activeViewletSettingsKey, StorageScope.WORKSPACE, this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.Sidebar)?.id);\n\t\t\t} else {\n\t\t\t\tviewContainerToRestore = this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.Sidebar)?.id;\n\t\t\t}\n\n\t\t\tif (viewContainerToRestore) {\n\t\t\t\tthis.state.initialization.views.containerToRestore.sideBar = viewContainerToRestore;\n\t\t\t} else {\n\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN, true);\n\t\t\t}\n\t\t}\n\t\t// Side bar is hidden and a new window is opened with activity bar not visible (not default)\n\t\telse if (isNewWindow && activityBarNotDefault) {\n\t\t\t// Open side bar if there is a view container to restore\n\t\t\tconst viewContainerToRestore = this.storageService.get(SidebarPart.activeViewletSettingsKey, StorageScope.WORKSPACE, this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.Sidebar)?.id);\n\t\t\tif (viewContainerToRestore) {\n\t\t\t\tthis.state.initialization.views.containerToRestore.sideBar = viewContainerToRestore;\n\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN, false);\n\t\t\t}\n\t\t}\n\n\t\t// Panel View Container To Restore\n\t\tif (this.isVisible(Parts.PANEL_PART)) {\n\t\t\tconst viewContainerToRestore = this.storageService.get(PanelPart.activePanelSettingsKey, StorageScope.WORKSPACE, this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.Panel)?.id);\n\n\t\t\tif (viewContainerToRestore) {\n\t\t\t\tthis.state.initialization.views.containerToRestore.panel = viewContainerToRestore;\n\t\t\t} else {\n\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_HIDDEN, true);\n\t\t\t}\n\t\t}\n\n\t\t// Auxiliary Panel to restore\n\t\tconst auxiliaryBarVisible = this.isVisible(Parts.AUXILIARYBAR_PART);\n\t\tif (auxiliaryBarVisible || (isNewWindow && activityBarNotDefault)) {\n\t\t\tconst viewContainerToRestore = this.storageService.get(AuxiliaryBarPart.activePanelSettingsKey, StorageScope.WORKSPACE, this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.AuxiliaryBar)?.id);\n\n\t\t\tif (viewContainerToRestore) {\n\t\t\t\tthis.state.initialization.views.containerToRestore.auxiliaryBar = viewContainerToRestore;\n\t\t\t}\n\n\t\t\tif (auxiliaryBarVisible !== !!viewContainerToRestore) {\n\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.AUXILIARYBAR_HIDDEN, !auxiliaryBarVisible);\n\t\t\t}\n\t\t}\n\n\t\t// Window border\n\t\tthis.updateWindowsBorder(true);\n\t}\n\n\tprivate getDefaultLayoutViews(environmentService: IBrowserWorkbenchEnvironmentService, storageService: IStorageService): string[] | undefined {\n\t\tconst defaultLayout = environmentService.options?.defaultLayout;\n\t\tif (!defaultLayout) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!defaultLayout.force && !storageService.isNew(StorageScope.WORKSPACE)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst { views } = defaultLayout;\n\t\tif (views?.length) {\n\t\t\treturn views.map(view => view.id);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate shouldRestoreEditors(contextService: IWorkspaceContextService, initialEditorsState: IInitialEditorsState | undefined): boolean {\n\n\t\t// Restore editors based on a set of rules:\n\t\t// - never when running on temporary workspace\n\t\t// - not when we have files to open, unless:\n\t\t// - always when `window.restoreWindows: preserve`\n\n\t\tif (isTemporaryWorkspace(contextService.getWorkspace())) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst forceRestoreEditors = this.configurationService.getValue<string>('window.restoreWindows') === 'preserve';\n\t\treturn !!forceRestoreEditors || initialEditorsState === undefined;\n\t}\n\n\tprotected willRestoreEditors(): boolean {\n\t\treturn this.state.initialization.editor.restoreEditors;\n\t}\n\n\tprivate async resolveEditorsToOpen(fileService: IFileService, initialEditorsState: IInitialEditorsState | undefined): Promise<IEditorToOpen[]> {\n\t\tif (initialEditorsState) {\n\n\t\t\t// Merge editor (single)\n\t\t\tconst filesToMerge = coalesce(await pathsToEditors(initialEditorsState.filesToMerge, fileService, this.logService));\n\t\t\tif (filesToMerge.length === 4 && isResourceEditorInput(filesToMerge[0]) && isResourceEditorInput(filesToMerge[1]) && isResourceEditorInput(filesToMerge[2]) && isResourceEditorInput(filesToMerge[3])) {\n\t\t\t\treturn [{\n\t\t\t\t\teditor: {\n\t\t\t\t\t\tinput1: { resource: filesToMerge[0].resource },\n\t\t\t\t\t\tinput2: { resource: filesToMerge[1].resource },\n\t\t\t\t\t\tbase: { resource: filesToMerge[2].resource },\n\t\t\t\t\t\tresult: { resource: filesToMerge[3].resource },\n\t\t\t\t\t\toptions: { pinned: true }\n\t\t\t\t\t}\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\t// Diff editor (single)\n\t\t\tconst filesToDiff = coalesce(await pathsToEditors(initialEditorsState.filesToDiff, fileService, this.logService));\n\t\t\tif (filesToDiff.length === 2) {\n\t\t\t\treturn [{\n\t\t\t\t\teditor: {\n\t\t\t\t\t\toriginal: { resource: filesToDiff[0].resource },\n\t\t\t\t\t\tmodified: { resource: filesToDiff[1].resource },\n\t\t\t\t\t\toptions: { pinned: true }\n\t\t\t\t\t}\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\t// Normal editor (multiple)\n\t\t\tconst filesToOpenOrCreate: IEditorToOpen[] = [];\n\t\t\tconst resolvedFilesToOpenOrCreate = await pathsToEditors(initialEditorsState.filesToOpenOrCreate, fileService, this.logService);\n\t\t\tfor (let i = 0; i < resolvedFilesToOpenOrCreate.length; i++) {\n\t\t\t\tconst resolvedFileToOpenOrCreate = resolvedFilesToOpenOrCreate[i];\n\t\t\t\tif (resolvedFileToOpenOrCreate) {\n\t\t\t\t\tfilesToOpenOrCreate.push({\n\t\t\t\t\t\teditor: resolvedFileToOpenOrCreate,\n\t\t\t\t\t\tviewColumn: initialEditorsState.filesToOpenOrCreate?.[i].viewColumn // take over `viewColumn` from initial state\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn filesToOpenOrCreate;\n\t\t}\n\n\t\t// Empty workbench configured to open untitled file if empty\n\t\telse if (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY && this.configurationService.getValue('workbench.startupEditor') === 'newUntitledFile') {\n\t\t\tif (this.editorGroupService.hasRestorableState) {\n\t\t\t\treturn []; // do not open any empty untitled file if we restored groups/editors from previous session\n\t\t\t}\n\n\t\t\tconst hasBackups = await this.workingCopyBackupService.hasBackups();\n\t\t\tif (hasBackups) {\n\t\t\t\treturn []; // do not open any empty untitled file if we have backups to restore\n\t\t\t}\n\n\t\t\treturn [{\n\t\t\t\teditor: { resource: undefined } // open empty untitled file\n\t\t\t}];\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate _openedDefaultEditors: boolean = false;\n\tget openedDefaultEditors() { return this._openedDefaultEditors; }\n\n\tprivate getInitialEditorsState(): IInitialEditorsState | undefined {\n\n\t\t// Check for editors / editor layout from `defaultLayout` options first\n\t\tconst defaultLayout = this.environmentService.options?.defaultLayout;\n\t\tif ((defaultLayout?.editors?.length || defaultLayout?.layout?.editors) && (defaultLayout.force || this.storageService.isNew(StorageScope.WORKSPACE))) {\n\t\t\tthis._openedDefaultEditors = true;\n\n\t\t\treturn {\n\t\t\t\tlayout: defaultLayout.layout?.editors,\n\t\t\t\tfilesToOpenOrCreate: defaultLayout?.editors?.map(editor => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tviewColumn: editor.viewColumn,\n\t\t\t\t\t\tfileUri: URI.revive(editor.uri),\n\t\t\t\t\t\topenOnlyIfExists: editor.openOnlyIfExists,\n\t\t\t\t\t\toptions: editor.options\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t};\n\t\t}\n\n\t\t// Then check for files to open, create or diff/merge from main side\n\t\tconst { filesToOpenOrCreate, filesToDiff, filesToMerge } = this.environmentService;\n\t\tif (filesToOpenOrCreate || filesToDiff || filesToMerge) {\n\t\t\treturn { filesToOpenOrCreate, filesToDiff, filesToMerge };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate readonly whenReadyPromise = new DeferredPromise<void>();\n\tprotected readonly whenReady = this.whenReadyPromise.p;\n\n\tprivate readonly whenRestoredPromise = new DeferredPromise<void>();\n\treadonly whenRestored = this.whenRestoredPromise.p;\n\tprivate restored = false;\n\n\tisRestored(): boolean {\n\t\treturn this.restored;\n\t}\n\n\tprotected restoreParts(): void {\n\n\t\t// distinguish long running restore operations that\n\t\t// are required for the layout to be ready from those\n\t\t// that are needed to signal restoring is done\n\t\tconst layoutReadyPromises: Promise<unknown>[] = [];\n\t\tconst layoutRestoredPromises: Promise<unknown>[] = [];\n\n\t\t// Restore editors\n\t\tlayoutReadyPromises.push((async () => {\n\t\t\tmark('code/willRestoreEditors');\n\n\t\t\t// first ensure the editor part is ready\n\t\t\tawait this.editorGroupService.whenReady;\n\t\t\tmark('code/restoreEditors/editorGroupsReady');\n\n\t\t\t// apply editor layout if any\n\t\t\tif (this.state.initialization.layout?.editors) {\n\t\t\t\tthis.editorGroupService.mainPart.applyLayout(this.state.initialization.layout.editors);\n\t\t\t}\n\n\t\t\t// then see for editors to open as instructed\n\t\t\t// it is important that we trigger this from\n\t\t\t// the overall restore flow to reduce possible\n\t\t\t// flicker on startup: we want any editor to\n\t\t\t// open to get a chance to open first before\n\t\t\t// signaling that layout is restored, but we do\n\t\t\t// not need to await the editors from having\n\t\t\t// fully loaded.\n\n\t\t\tconst editors = await this.state.initialization.editor.editorsToOpen;\n\t\t\tmark('code/restoreEditors/editorsToOpenResolved');\n\n\t\t\tlet openEditorsPromise: Promise<unknown> | undefined = undefined;\n\t\t\tif (editors.length) {\n\n\t\t\t\t// we have to map editors to their groups as instructed\n\t\t\t\t// by the input. this is important to ensure that we open\n\t\t\t\t// the editors in the groups they belong to.\n\n\t\t\t\tconst editorGroupsInVisualOrder = this.editorGroupService.mainPart.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\t\t\tconst mapEditorsToGroup = new Map<GroupIdentifier, Set<IUntypedEditorInput>>();\n\n\t\t\t\tfor (const editor of editors) {\n\t\t\t\t\tconst group = editorGroupsInVisualOrder[(editor.viewColumn ?? 1) - 1]; // viewColumn is index+1 based\n\n\t\t\t\t\tlet editorsByGroup = mapEditorsToGroup.get(group.id);\n\t\t\t\t\tif (!editorsByGroup) {\n\t\t\t\t\t\teditorsByGroup = new Set<IUntypedEditorInput>();\n\t\t\t\t\t\tmapEditorsToGroup.set(group.id, editorsByGroup);\n\t\t\t\t\t}\n\n\t\t\t\t\teditorsByGroup.add(editor.editor);\n\t\t\t\t}\n\n\t\t\t\topenEditorsPromise = Promise.all(Array.from(mapEditorsToGroup).map(async ([groupId, editors]) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.editorService.openEditors(Array.from(editors), groupId, { validateTrust: true });\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// do not block the overall layout ready flow from potentially\n\t\t\t// slow editors to resolve on startup\n\t\t\tlayoutRestoredPromises.push(\n\t\t\t\tPromise.all([\n\t\t\t\t\topenEditorsPromise?.finally(() => mark('code/restoreEditors/editorsOpened')),\n\t\t\t\t\tthis.editorGroupService.whenRestored.finally(() => mark('code/restoreEditors/editorGroupsRestored'))\n\t\t\t\t]).finally(() => {\n\t\t\t\t\t// the `code/didRestoreEditors` perf mark is specifically\n\t\t\t\t\t// for when visible editors have resolved, so we only mark\n\t\t\t\t\t// if when editor group service has restored.\n\t\t\t\t\tmark('code/didRestoreEditors');\n\t\t\t\t})\n\t\t\t);\n\t\t})());\n\n\t\t// Restore default views (only when `IDefaultLayout` is provided)\n\t\tconst restoreDefaultViewsPromise = (async () => {\n\t\t\tif (this.state.initialization.views.defaults?.length) {\n\t\t\t\tmark('code/willOpenDefaultViews');\n\n\t\t\t\tconst locationsRestored: { id: string; order: number }[] = [];\n\n\t\t\t\tconst tryOpenView = (view: { id: string; order: number }): boolean => {\n\t\t\t\t\tconst location = this.viewDescriptorService.getViewLocationById(view.id);\n\t\t\t\t\tif (location !== null) {\n\t\t\t\t\t\tconst container = this.viewDescriptorService.getViewContainerByViewId(view.id);\n\t\t\t\t\t\tif (container) {\n\t\t\t\t\t\t\tif (view.order >= (locationsRestored?.[location]?.order ?? 0)) {\n\t\t\t\t\t\t\t\tlocationsRestored[location] = { id: container.id, order: view.order };\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst containerModel = this.viewDescriptorService.getViewContainerModel(container);\n\t\t\t\t\t\t\tcontainerModel.setCollapsed(view.id, false);\n\t\t\t\t\t\t\tcontainerModel.setVisible(view.id, true);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\n\t\t\t\tconst defaultViews = [...this.state.initialization.views.defaults].reverse().map((v, index) => ({ id: v, order: index }));\n\n\t\t\t\tlet i = defaultViews.length;\n\t\t\t\twhile (i) {\n\t\t\t\t\ti--;\n\t\t\t\t\tif (tryOpenView(defaultViews[i])) {\n\t\t\t\t\t\tdefaultViews.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If we still have views left over, wait until all extensions have been registered and try again\n\t\t\t\tif (defaultViews.length) {\n\t\t\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\t\t\t\tlet i = defaultViews.length;\n\t\t\t\t\twhile (i) {\n\t\t\t\t\t\ti--;\n\t\t\t\t\t\tif (tryOpenView(defaultViews[i])) {\n\t\t\t\t\t\t\tdefaultViews.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If we opened a view in the sidebar, stop any restore there\n\t\t\t\tif (locationsRestored[ViewContainerLocation.Sidebar]) {\n\t\t\t\t\tthis.state.initialization.views.containerToRestore.sideBar = locationsRestored[ViewContainerLocation.Sidebar].id;\n\t\t\t\t}\n\n\t\t\t\t// If we opened a view in the panel, stop any restore there\n\t\t\t\tif (locationsRestored[ViewContainerLocation.Panel]) {\n\t\t\t\t\tthis.state.initialization.views.containerToRestore.panel = locationsRestored[ViewContainerLocation.Panel].id;\n\t\t\t\t}\n\n\t\t\t\t// If we opened a view in the auxiliary bar, stop any restore there\n\t\t\t\tif (locationsRestored[ViewContainerLocation.AuxiliaryBar]) {\n\t\t\t\t\tthis.state.initialization.views.containerToRestore.auxiliaryBar = locationsRestored[ViewContainerLocation.AuxiliaryBar].id;\n\t\t\t\t}\n\n\t\t\t\tmark('code/didOpenDefaultViews');\n\t\t\t}\n\t\t})();\n\t\tlayoutReadyPromises.push(restoreDefaultViewsPromise);\n\n\t\t// Restore Sidebar\n\t\tlayoutReadyPromises.push((async () => {\n\n\t\t\t// Restoring views could mean that sidebar already\n\t\t\t// restored, as such we need to test again\n\t\t\tawait restoreDefaultViewsPromise;\n\t\t\tif (!this.state.initialization.views.containerToRestore.sideBar) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmark('code/willRestoreViewlet');\n\n\t\t\tconst viewlet = await this.paneCompositeService.openPaneComposite(this.state.initialization.views.containerToRestore.sideBar, ViewContainerLocation.Sidebar);\n\t\t\tif (!viewlet) {\n\t\t\t\tawait this.paneCompositeService.openPaneComposite(this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.Sidebar)?.id, ViewContainerLocation.Sidebar); // fallback to default viewlet as needed\n\t\t\t}\n\n\t\t\tmark('code/didRestoreViewlet');\n\t\t})());\n\n\t\t// Restore Panel\n\t\tlayoutReadyPromises.push((async () => {\n\n\t\t\t// Restoring views could mean that panel already\n\t\t\t// restored, as such we need to test again\n\t\t\tawait restoreDefaultViewsPromise;\n\t\t\tif (!this.state.initialization.views.containerToRestore.panel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmark('code/willRestorePanel');\n\n\t\t\tconst panel = await this.paneCompositeService.openPaneComposite(this.state.initialization.views.containerToRestore.panel, ViewContainerLocation.Panel);\n\t\t\tif (!panel) {\n\t\t\t\tawait this.paneCompositeService.openPaneComposite(this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.Panel)?.id, ViewContainerLocation.Panel); // fallback to default panel as needed\n\t\t\t}\n\n\t\t\tmark('code/didRestorePanel');\n\t\t})());\n\n\t\t// Restore Auxiliary Bar\n\t\tlayoutReadyPromises.push((async () => {\n\n\t\t\t// Restoring views could mean that panel already\n\t\t\t// restored, as such we need to test again\n\t\t\tawait restoreDefaultViewsPromise;\n\t\t\tif (!this.state.initialization.views.containerToRestore.auxiliaryBar) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmark('code/willRestoreAuxiliaryBar');\n\n\t\t\tconst panel = await this.paneCompositeService.openPaneComposite(this.state.initialization.views.containerToRestore.auxiliaryBar, ViewContainerLocation.AuxiliaryBar);\n\t\t\tif (!panel) {\n\t\t\t\tawait this.paneCompositeService.openPaneComposite(this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.AuxiliaryBar)?.id, ViewContainerLocation.AuxiliaryBar); // fallback to default panel as needed\n\t\t\t}\n\n\t\t\tmark('code/didRestoreAuxiliaryBar');\n\t\t})());\n\n\t\t// Restore Zen Mode\n\t\tconst zenModeWasActive = this.isZenModeActive();\n\t\tconst restoreZenMode = getZenModeConfiguration(this.configurationService).restore;\n\n\t\tif (zenModeWasActive) {\n\t\t\tthis.setZenModeActive(!restoreZenMode);\n\t\t\tthis.toggleZenMode(false, true);\n\t\t}\n\n\t\t// Restore Main Editor Center Mode\n\t\tif (this.stateModel.getRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED)) {\n\t\t\tthis.centerMainEditorLayout(true, true);\n\t\t}\n\n\t\t// Await for promises that we recorded to update\n\t\t// our ready and restored states properly.\n\t\tPromises.settled(layoutReadyPromises).finally(() => {\n\t\t\tthis.whenReadyPromise.complete();\n\n\t\t\tPromises.settled(layoutRestoredPromises).finally(() => {\n\t\t\t\tthis.restored = true;\n\t\t\t\tthis.whenRestoredPromise.complete();\n\t\t\t});\n\t\t});\n\t}\n\n\tregisterPart(part: Part): IDisposable {\n\t\tconst id = part.getId();\n\t\tthis.parts.set(id, part);\n\n\t\treturn toDisposable(() => this.parts.delete(id));\n\t}\n\n\tprotected getPart(key: Parts): Part {\n\t\tconst part = this.parts.get(key);\n\t\tif (!part) {\n\t\t\tthrow new Error(`Unknown part ${key}`);\n\t\t}\n\n\t\treturn part;\n\t}\n\n\tregisterNotifications(delegate: { onDidChangeNotificationsVisibility: Event<boolean> }): void {\n\t\tthis._register(delegate.onDidChangeNotificationsVisibility(visible => this._onDidChangeNotificationsVisibility.fire(visible)));\n\t}\n\n\thasFocus(part: Parts): boolean {\n\t\tconst container = this.getContainer(getActiveWindow(), part);\n\t\tif (!container) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst activeElement = getActiveElement();\n\t\tif (!activeElement) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn isAncestorUsingFlowTo(activeElement, container);\n\t}\n\n\tfocusPart(part: MULTI_WINDOW_PARTS, targetWindow: Window): void;\n\tfocusPart(part: SINGLE_WINDOW_PARTS): void;\n\tfocusPart(part: Parts, targetWindow: Window = mainWindow): void {\n\t\tconst container = this.getContainer(targetWindow, part) ?? this.mainContainer;\n\n\t\tswitch (part) {\n\t\t\tcase Parts.EDITOR_PART:\n\t\t\t\tthis.editorGroupService.getPart(container).activeGroup.focus();\n\t\t\t\tbreak;\n\t\t\tcase Parts.PANEL_PART: {\n\t\t\t\tthis.paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel)?.focus();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Parts.SIDEBAR_PART: {\n\t\t\t\tthis.paneCompositeService.getActivePaneComposite(ViewContainerLocation.Sidebar)?.focus();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Parts.AUXILIARYBAR_PART: {\n\t\t\t\tthis.paneCompositeService.getActivePaneComposite(ViewContainerLocation.AuxiliaryBar)?.focus();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Parts.ACTIVITYBAR_PART:\n\t\t\t\t(this.getPart(Parts.SIDEBAR_PART) as SidebarPart).focusActivityBar();\n\t\t\t\tbreak;\n\t\t\tcase Parts.STATUSBAR_PART:\n\t\t\t\tthis.statusBarService.getPart(container).focus();\n\t\t\t\tbreak;\n\t\t\tdefault: {\n\t\t\t\tcontainer?.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetContainer(targetWindow: Window): HTMLElement;\n\tgetContainer(targetWindow: Window, part: Parts): HTMLElement | undefined;\n\tgetContainer(targetWindow: Window, part?: Parts): HTMLElement | undefined {\n\t\tif (typeof part === 'undefined') {\n\t\t\treturn this.getContainerFromDocument(targetWindow.document);\n\t\t}\n\n\t\tif (targetWindow === mainWindow) {\n\t\t\treturn this.getPart(part).getContainer();\n\t\t}\n\n\t\t// Only some parts are supported for auxiliary windows\n\t\tlet partCandidate: unknown;\n\t\tif (part === Parts.EDITOR_PART) {\n\t\t\tpartCandidate = this.editorGroupService.getPart(this.getContainerFromDocument(targetWindow.document));\n\t\t} else if (part === Parts.STATUSBAR_PART) {\n\t\t\tpartCandidate = this.statusBarService.getPart(this.getContainerFromDocument(targetWindow.document));\n\t\t} else if (part === Parts.TITLEBAR_PART) {\n\t\t\tpartCandidate = this.titleService.getPart(this.getContainerFromDocument(targetWindow.document));\n\t\t}\n\n\t\tif (partCandidate instanceof Part) {\n\t\t\treturn partCandidate.getContainer();\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tisVisible(part: MULTI_WINDOW_PARTS, targetWindow: Window): boolean;\n\tisVisible(part: SINGLE_WINDOW_PARTS): boolean;\n\tisVisible(part: Parts, targetWindow?: Window): boolean;\n\tisVisible(part: Parts, targetWindow: Window = mainWindow): boolean {\n\t\tif (targetWindow !== mainWindow && part === Parts.EDITOR_PART) {\n\t\t\treturn true; // cannot hide editor part in auxiliary windows\n\t\t}\n\n\t\tif (this.initialized) {\n\t\t\tswitch (part) {\n\t\t\t\tcase Parts.TITLEBAR_PART:\n\t\t\t\t\treturn this.workbenchGrid.isViewVisible(this.titleBarPartView);\n\t\t\t\tcase Parts.SIDEBAR_PART:\n\t\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN);\n\t\t\t\tcase Parts.PANEL_PART:\n\t\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_HIDDEN);\n\t\t\t\tcase Parts.AUXILIARYBAR_PART:\n\t\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.AUXILIARYBAR_HIDDEN);\n\t\t\t\tcase Parts.STATUSBAR_PART:\n\t\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.STATUSBAR_HIDDEN);\n\t\t\t\tcase Parts.ACTIVITYBAR_PART:\n\t\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.ACTIVITYBAR_HIDDEN);\n\t\t\t\tcase Parts.EDITOR_PART:\n\t\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.EDITOR_HIDDEN);\n\t\t\t\tcase Parts.BANNER_PART:\n\t\t\t\t\treturn this.workbenchGrid.isViewVisible(this.bannerPartView);\n\t\t\t\tdefault:\n\t\t\t\t\treturn false; // any other part cannot be hidden\n\t\t\t}\n\t\t}\n\n\t\tswitch (part) {\n\t\t\tcase Parts.TITLEBAR_PART:\n\t\t\t\treturn shouldShowCustomTitleBar(this.configurationService, mainWindow, this.state.runtime.menuBar.toggled, this.isZenModeActive());\n\t\t\tcase Parts.SIDEBAR_PART:\n\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN);\n\t\t\tcase Parts.PANEL_PART:\n\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_HIDDEN);\n\t\t\tcase Parts.AUXILIARYBAR_PART:\n\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.AUXILIARYBAR_HIDDEN);\n\t\t\tcase Parts.STATUSBAR_PART:\n\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.STATUSBAR_HIDDEN);\n\t\t\tcase Parts.ACTIVITYBAR_PART:\n\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.ACTIVITYBAR_HIDDEN);\n\t\t\tcase Parts.EDITOR_PART:\n\t\t\t\treturn !this.stateModel.getRuntimeValue(LayoutStateKeys.EDITOR_HIDDEN);\n\t\t\tdefault:\n\t\t\t\treturn false; // any other part cannot be hidden\n\t\t}\n\t}\n\n\tprivate shouldShowBannerFirst(): boolean {\n\t\treturn isWeb && !isWCOEnabled();\n\t}\n\n\tfocus(): void {\n\t\tthis.focusPart(Parts.EDITOR_PART, getWindow(this.activeContainer));\n\t}\n\n\tprivate focusPanelOrEditor(): void {\n\t\tconst activePanel = this.paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel);\n\t\tif ((this.hasFocus(Parts.PANEL_PART) || !this.isVisible(Parts.EDITOR_PART)) && activePanel) {\n\t\t\tactivePanel.focus(); // prefer panel if it has focus or editor is hidden\n\t\t} else {\n\t\t\tthis.focus(); // otherwise focus editor\n\t\t}\n\t}\n\n\tgetMaximumEditorDimensions(container: HTMLElement): IDimension {\n\t\tconst targetWindow = getWindow(container);\n\t\tconst containerDimension = this.getContainerDimension(container);\n\n\t\tif (container === this.mainContainer) {\n\t\t\tconst isPanelHorizontal = isHorizontal(this.getPanelPosition());\n\t\t\tconst takenWidth =\n\t\t\t\t(this.isVisible(Parts.ACTIVITYBAR_PART) ? this.activityBarPartView.minimumWidth : 0) +\n\t\t\t\t(this.isVisible(Parts.SIDEBAR_PART) ? this.sideBarPartView.minimumWidth : 0) +\n\t\t\t\t(this.isVisible(Parts.PANEL_PART) && !isPanelHorizontal ? this.panelPartView.minimumWidth : 0) +\n\t\t\t\t(this.isVisible(Parts.AUXILIARYBAR_PART) ? this.auxiliaryBarPartView.minimumWidth : 0);\n\n\t\t\tconst takenHeight =\n\t\t\t\t(this.isVisible(Parts.TITLEBAR_PART, targetWindow) ? this.titleBarPartView.minimumHeight : 0) +\n\t\t\t\t(this.isVisible(Parts.STATUSBAR_PART, targetWindow) ? this.statusBarPartView.minimumHeight : 0) +\n\t\t\t\t(this.isVisible(Parts.PANEL_PART) && isPanelHorizontal ? this.panelPartView.minimumHeight : 0);\n\n\t\t\tconst availableWidth = containerDimension.width - takenWidth;\n\t\t\tconst availableHeight = containerDimension.height - takenHeight;\n\n\t\t\treturn { width: availableWidth, height: availableHeight };\n\t\t} else {\n\t\t\tconst takenHeight =\n\t\t\t\t(this.isVisible(Parts.TITLEBAR_PART, targetWindow) ? this.titleBarPartView.minimumHeight : 0) +\n\t\t\t\t(this.isVisible(Parts.STATUSBAR_PART, targetWindow) ? this.statusBarPartView.minimumHeight : 0);\n\n\t\t\treturn { width: containerDimension.width, height: containerDimension.height - takenHeight };\n\t\t}\n\t}\n\n\tprivate isZenModeActive(): boolean {\n\t\treturn this.stateModel.getRuntimeValue(LayoutStateKeys.ZEN_MODE_ACTIVE);\n\t}\n\n\tprivate setZenModeActive(active: boolean) {\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.ZEN_MODE_ACTIVE, active);\n\t}\n\n\ttoggleZenMode(skipLayout?: boolean, restoring = false): void {\n\t\tthis.setZenModeActive(!this.isZenModeActive());\n\t\tthis.state.runtime.zenMode.transitionDisposables.clearAndDisposeAll();\n\n\t\tconst setLineNumbers = (lineNumbers?: LineNumbersType) => {\n\t\t\tfor (const editor of this.mainPartEditorService.visibleTextEditorControls) {\n\n\t\t\t\t// To properly reset line numbers we need to read the configuration for each editor respecting it's uri.\n\t\t\t\tif (!lineNumbers && isCodeEditor(editor) && editor.hasModel()) {\n\t\t\t\t\tconst model = editor.getModel();\n\t\t\t\t\tlineNumbers = this.configurationService.getValue('editor.lineNumbers', { resource: model.uri, overrideIdentifier: model.getLanguageId() });\n\t\t\t\t}\n\t\t\t\tif (!lineNumbers) {\n\t\t\t\t\tlineNumbers = this.configurationService.getValue('editor.lineNumbers');\n\t\t\t\t}\n\n\t\t\t\teditor.updateOptions({ lineNumbers });\n\t\t\t}\n\t\t};\n\n\t\t// Check if zen mode transitioned to full screen and if now we are out of zen mode\n\t\t// -> we need to go out of full screen (same goes for the centered editor layout)\n\t\tlet toggleMainWindowFullScreen = false;\n\t\tconst config = getZenModeConfiguration(this.configurationService);\n\t\tconst zenModeExitInfo = this.stateModel.getRuntimeValue(LayoutStateKeys.ZEN_MODE_EXIT_INFO);\n\n\t\t// Zen Mode Active\n\t\tif (this.isZenModeActive()) {\n\n\t\t\ttoggleMainWindowFullScreen = !this.state.runtime.mainWindowFullscreen && config.fullScreen && !isIOS;\n\n\t\t\tif (!restoring) {\n\t\t\t\tzenModeExitInfo.transitionedToFullScreen = toggleMainWindowFullScreen;\n\t\t\t\tzenModeExitInfo.transitionedToCenteredEditorLayout = !this.isMainEditorLayoutCentered() && config.centerLayout;\n\t\t\t\tzenModeExitInfo.handleNotificationsDoNotDisturbMode = this.notificationService.getFilter() === NotificationsFilter.OFF;\n\t\t\t\tzenModeExitInfo.wasVisible.sideBar = this.isVisible(Parts.SIDEBAR_PART);\n\t\t\t\tzenModeExitInfo.wasVisible.panel = this.isVisible(Parts.PANEL_PART);\n\t\t\t\tzenModeExitInfo.wasVisible.auxiliaryBar = this.isVisible(Parts.AUXILIARYBAR_PART);\n\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.ZEN_MODE_EXIT_INFO, zenModeExitInfo);\n\t\t\t}\n\n\t\t\tthis.setPanelHidden(true, true);\n\t\t\tthis.setAuxiliaryBarHidden(true, true);\n\t\t\tthis.setSideBarHidden(true, true);\n\n\t\t\tif (config.hideActivityBar) {\n\t\t\t\tthis.setActivityBarHidden(true, true);\n\t\t\t}\n\n\t\t\tif (config.hideStatusBar) {\n\t\t\t\tthis.setStatusBarHidden(true, true);\n\t\t\t}\n\n\t\t\tif (config.hideLineNumbers) {\n\t\t\t\tsetLineNumbers('off');\n\t\t\t\tthis.state.runtime.zenMode.transitionDisposables.set(ZenModeSettings.HIDE_LINENUMBERS, this.mainPartEditorService.onDidVisibleEditorsChange(() => setLineNumbers('off')));\n\t\t\t}\n\n\t\t\tif (config.showTabs !== this.editorGroupService.partOptions.showTabs) {\n\t\t\t\tthis.state.runtime.zenMode.transitionDisposables.set(ZenModeSettings.SHOW_TABS, this.editorGroupService.mainPart.enforcePartOptions({ showTabs: config.showTabs }));\n\t\t\t}\n\n\t\t\tif (config.silentNotifications && zenModeExitInfo.handleNotificationsDoNotDisturbMode) {\n\t\t\t\tthis.notificationService.setFilter(NotificationsFilter.ERROR);\n\t\t\t}\n\n\t\t\tif (config.centerLayout) {\n\t\t\t\tthis.centerMainEditorLayout(true, true);\n\t\t\t}\n\n\t\t\t// Zen Mode Configuration Changes\n\t\t\tthis.state.runtime.zenMode.transitionDisposables.set('configurationChange', this.configurationService.onDidChangeConfiguration(e => {\n\t\t\t\t// Activity Bar\n\t\t\t\tif (e.affectsConfiguration(ZenModeSettings.HIDE_ACTIVITYBAR)) {\n\t\t\t\t\tconst zenModeHideActivityBar = this.configurationService.getValue<boolean>(ZenModeSettings.HIDE_ACTIVITYBAR);\n\t\t\t\t\tthis.setActivityBarHidden(zenModeHideActivityBar, true);\n\t\t\t\t}\n\n\t\t\t\t// Status Bar\n\t\t\t\tif (e.affectsConfiguration(ZenModeSettings.HIDE_STATUSBAR)) {\n\t\t\t\t\tconst zenModeHideStatusBar = this.configurationService.getValue<boolean>(ZenModeSettings.HIDE_STATUSBAR);\n\t\t\t\t\tthis.setStatusBarHidden(zenModeHideStatusBar, true);\n\t\t\t\t}\n\n\t\t\t\t// Center Layout\n\t\t\t\tif (e.affectsConfiguration(ZenModeSettings.CENTER_LAYOUT)) {\n\t\t\t\t\tconst zenModeCenterLayout = this.configurationService.getValue<boolean>(ZenModeSettings.CENTER_LAYOUT);\n\t\t\t\t\tthis.centerMainEditorLayout(zenModeCenterLayout, true);\n\t\t\t\t}\n\n\t\t\t\t// Show Tabs\n\t\t\t\tif (e.affectsConfiguration(ZenModeSettings.SHOW_TABS)) {\n\t\t\t\t\tconst zenModeShowTabs = this.configurationService.getValue<EditorTabsMode | undefined>(ZenModeSettings.SHOW_TABS) ?? 'multiple';\n\t\t\t\t\tthis.state.runtime.zenMode.transitionDisposables.set(ZenModeSettings.SHOW_TABS, this.editorGroupService.mainPart.enforcePartOptions({ showTabs: zenModeShowTabs }));\n\t\t\t\t}\n\n\t\t\t\t// Notifications\n\t\t\t\tif (e.affectsConfiguration(ZenModeSettings.SILENT_NOTIFICATIONS)) {\n\t\t\t\t\tconst zenModeSilentNotifications = !!this.configurationService.getValue(ZenModeSettings.SILENT_NOTIFICATIONS);\n\t\t\t\t\tif (zenModeExitInfo.handleNotificationsDoNotDisturbMode) {\n\t\t\t\t\t\tthis.notificationService.setFilter(zenModeSilentNotifications ? NotificationsFilter.ERROR : NotificationsFilter.OFF);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Center Layout\n\t\t\t\tif (e.affectsConfiguration(ZenModeSettings.HIDE_LINENUMBERS)) {\n\t\t\t\t\tconst lineNumbersType = this.configurationService.getValue<boolean>(ZenModeSettings.HIDE_LINENUMBERS) ? 'off' : undefined;\n\t\t\t\t\tsetLineNumbers(lineNumbersType);\n\t\t\t\t\tthis.state.runtime.zenMode.transitionDisposables.set(ZenModeSettings.HIDE_LINENUMBERS, this.mainPartEditorService.onDidVisibleEditorsChange(() => setLineNumbers(lineNumbersType)));\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\t// Zen Mode Inactive\n\t\telse {\n\t\t\tif (zenModeExitInfo.wasVisible.panel) {\n\t\t\t\tthis.setPanelHidden(false, true);\n\t\t\t}\n\n\t\t\tif (zenModeExitInfo.wasVisible.auxiliaryBar) {\n\t\t\t\tthis.setAuxiliaryBarHidden(false, true);\n\t\t\t}\n\n\t\t\tif (zenModeExitInfo.wasVisible.sideBar) {\n\t\t\t\tthis.setSideBarHidden(false, true);\n\t\t\t}\n\n\t\t\tif (!this.stateModel.getRuntimeValue(LayoutStateKeys.ACTIVITYBAR_HIDDEN, true)) {\n\t\t\t\tthis.setActivityBarHidden(false, true);\n\t\t\t}\n\n\t\t\tif (!this.stateModel.getRuntimeValue(LayoutStateKeys.STATUSBAR_HIDDEN, true)) {\n\t\t\t\tthis.setStatusBarHidden(false, true);\n\t\t\t}\n\n\t\t\tif (zenModeExitInfo.transitionedToCenteredEditorLayout) {\n\t\t\t\tthis.centerMainEditorLayout(false, true);\n\t\t\t}\n\n\t\t\tif (zenModeExitInfo.handleNotificationsDoNotDisturbMode) {\n\t\t\t\tthis.notificationService.setFilter(NotificationsFilter.OFF);\n\t\t\t}\n\n\t\t\tsetLineNumbers();\n\n\t\t\tthis.focus();\n\n\t\t\ttoggleMainWindowFullScreen = zenModeExitInfo.transitionedToFullScreen && this.state.runtime.mainWindowFullscreen;\n\t\t}\n\n\t\tif (!skipLayout) {\n\t\t\tthis.layout();\n\t\t}\n\n\t\tif (toggleMainWindowFullScreen) {\n\t\t\tthis.hostService.toggleFullScreen(mainWindow);\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidChangeZenMode.fire(this.isZenModeActive());\n\t}\n\n\tprivate setStatusBarHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.STATUSBAR_HIDDEN, hidden);\n\n\t\t// Adjust CSS\n\t\tif (hidden) {\n\t\t\tthis.mainContainer.classList.add(LayoutClasses.STATUSBAR_HIDDEN);\n\t\t} else {\n\t\t\tthis.mainContainer.classList.remove(LayoutClasses.STATUSBAR_HIDDEN);\n\t\t}\n\n\t\t// Propagate to grid\n\t\tthis.workbenchGrid.setViewVisible(this.statusBarPartView, !hidden);\n\t}\n\n\tprotected createWorkbenchLayout(): void {\n\t\tconst titleBar = this.getPart(Parts.TITLEBAR_PART);\n\t\tconst bannerPart = this.getPart(Parts.BANNER_PART);\n\t\tconst editorPart = this.getPart(Parts.EDITOR_PART);\n\t\tconst activityBar = this.getPart(Parts.ACTIVITYBAR_PART);\n\t\tconst panelPart = this.getPart(Parts.PANEL_PART);\n\t\tconst auxiliaryBarPart = this.getPart(Parts.AUXILIARYBAR_PART);\n\t\tconst sideBar = this.getPart(Parts.SIDEBAR_PART);\n\t\tconst statusBar = this.getPart(Parts.STATUSBAR_PART);\n\n\t\t// View references for all parts\n\t\tthis.titleBarPartView = titleBar;\n\t\tthis.bannerPartView = bannerPart;\n\t\tthis.sideBarPartView = sideBar;\n\t\tthis.activityBarPartView = activityBar;\n\t\tthis.editorPartView = editorPart;\n\t\tthis.panelPartView = panelPart;\n\t\tthis.auxiliaryBarPartView = auxiliaryBarPart;\n\t\tthis.statusBarPartView = statusBar;\n\n\t\tconst viewMap = {\n\t\t\t[Parts.ACTIVITYBAR_PART]: this.activityBarPartView,\n\t\t\t[Parts.BANNER_PART]: this.bannerPartView,\n\t\t\t[Parts.TITLEBAR_PART]: this.titleBarPartView,\n\t\t\t[Parts.EDITOR_PART]: this.editorPartView,\n\t\t\t[Parts.PANEL_PART]: this.panelPartView,\n\t\t\t[Parts.SIDEBAR_PART]: this.sideBarPartView,\n\t\t\t[Parts.STATUSBAR_PART]: this.statusBarPartView,\n\t\t\t[Parts.AUXILIARYBAR_PART]: this.auxiliaryBarPartView\n\t\t};\n\n\t\tconst fromJSON = ({ type }: { type: Parts }) => viewMap[type];\n\t\tconst workbenchGrid = SerializableGrid.deserialize(\n\t\t\tthis.createGridDescriptor(),\n\t\t\t{ fromJSON },\n\t\t\t{ proportionalLayout: false }\n\t\t);\n\n\t\tthis.mainContainer.prepend(workbenchGrid.element);\n\t\tthis.mainContainer.setAttribute('role', 'application');\n\t\tthis.workbenchGrid = workbenchGrid;\n\t\tthis.workbenchGrid.edgeSnapping = this.state.runtime.mainWindowFullscreen;\n\n\t\tfor (const part of [titleBar, editorPart, activityBar, panelPart, sideBar, statusBar, auxiliaryBarPart, bannerPart]) {\n\t\t\tthis._register(part.onDidVisibilityChange((visible) => {\n\t\t\t\tif (part === sideBar) {\n\t\t\t\t\tthis.setSideBarHidden(!visible, true);\n\t\t\t\t} else if (part === panelPart) {\n\t\t\t\t\tthis.setPanelHidden(!visible, true);\n\t\t\t\t} else if (part === auxiliaryBarPart) {\n\t\t\t\t\tthis.setAuxiliaryBarHidden(!visible, true);\n\t\t\t\t} else if (part === editorPart) {\n\t\t\t\t\tthis.setEditorHidden(!visible, true);\n\t\t\t\t}\n\t\t\t\tthis._onDidChangePartVisibility.fire();\n\t\t\t\tthis.handleContainerDidLayout(this.mainContainer, this._mainContainerDimension);\n\t\t\t}));\n\t\t}\n\n\t\tthis._register(this.storageService.onWillSaveState(e => {\n\n\t\t\t// Side Bar Size\n\t\t\tconst sideBarSize = this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN)\n\t\t\t\t? this.workbenchGrid.getViewCachedVisibleSize(this.sideBarPartView)\n\t\t\t\t: this.workbenchGrid.getViewSize(this.sideBarPartView).width;\n\t\t\tthis.stateModel.setInitializationValue(LayoutStateKeys.SIDEBAR_SIZE, sideBarSize as number);\n\n\t\t\t// Panel Size\n\t\t\tconst panelSize = this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_HIDDEN)\n\t\t\t\t? this.workbenchGrid.getViewCachedVisibleSize(this.panelPartView)\n\t\t\t\t: isHorizontal(this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_POSITION))\n\t\t\t\t\t? this.workbenchGrid.getViewSize(this.panelPartView).height\n\t\t\t\t\t: this.workbenchGrid.getViewSize(this.panelPartView).width;\n\t\t\tthis.stateModel.setInitializationValue(LayoutStateKeys.PANEL_SIZE, panelSize as number);\n\n\t\t\t// Auxiliary Bar Size\n\t\t\tconst auxiliaryBarSize = this.stateModel.getRuntimeValue(LayoutStateKeys.AUXILIARYBAR_HIDDEN)\n\t\t\t\t? this.workbenchGrid.getViewCachedVisibleSize(this.auxiliaryBarPartView)\n\t\t\t\t: this.workbenchGrid.getViewSize(this.auxiliaryBarPartView).width;\n\t\t\tthis.stateModel.setInitializationValue(LayoutStateKeys.AUXILIARYBAR_SIZE, auxiliaryBarSize as number);\n\n\t\t\tthis.stateModel.save(true, true);\n\t\t}));\n\t}\n\n\tlayout(): void {\n\t\tif (!this.disposed) {\n\t\t\tthis._mainContainerDimension = getClientArea(this.state.runtime.mainWindowFullscreen ?\n\t\t\t\tmainWindow.document.body : \t// in fullscreen mode, make sure to use <body> element because\n\t\t\t\tthis.parent\t\t\t\t\t// in that case the workbench will span the entire site\n\t\t\t);\n\t\t\tthis.logService.trace(`Layout#layout, height: ${this._mainContainerDimension.height}, width: ${this._mainContainerDimension.width}`);\n\n\t\t\tposition(this.mainContainer, 0, 0, 0, 0, 'relative');\n\t\t\tsize(this.mainContainer, this._mainContainerDimension.width, this._mainContainerDimension.height);\n\n\t\t\t// Layout the grid widget\n\t\t\tthis.workbenchGrid.layout(this._mainContainerDimension.width, this._mainContainerDimension.height);\n\t\t\tthis.initialized = true;\n\n\t\t\t// Emit as event\n\t\t\tthis.handleContainerDidLayout(this.mainContainer, this._mainContainerDimension);\n\t\t}\n\t}\n\n\tisMainEditorLayoutCentered(): boolean {\n\t\treturn this.stateModel.getRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED);\n\t}\n\n\tcenterMainEditorLayout(active: boolean, skipLayout?: boolean): void {\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED, active);\n\n\t\tconst activeMainEditor = this.mainPartEditorService.activeEditor;\n\n\t\tlet isEditorComplex = false;\n\t\tif (activeMainEditor instanceof DiffEditorInput) {\n\t\t\tisEditorComplex = this.configurationService.getValue('diffEditor.renderSideBySide');\n\t\t} else if (activeMainEditor?.hasCapability(EditorInputCapabilities.MultipleEditors)) {\n\t\t\tisEditorComplex = true;\n\t\t}\n\n\t\tconst isCenteredLayoutAutoResizing = this.configurationService.getValue('workbench.editor.centeredLayoutAutoResize');\n\t\tif (\n\t\t\tisCenteredLayoutAutoResizing &&\n\t\t\t((this.editorGroupService.mainPart.groups.length > 1 && !this.editorGroupService.mainPart.hasMaximizedGroup()) || isEditorComplex)\n\t\t) {\n\t\t\tactive = false; // disable centered layout for complex editors or when there is more than one group\n\t\t}\n\n\t\tif (this.editorGroupService.mainPart.isLayoutCentered() !== active) {\n\t\t\tthis.editorGroupService.mainPart.centerLayout(active);\n\n\t\t\tif (!skipLayout) {\n\t\t\t\tthis.layout();\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChangeMainEditorCenteredLayout.fire(this.stateModel.getRuntimeValue(LayoutStateKeys.MAIN_EDITOR_CENTERED));\n\t}\n\n\tresizePart(part: Parts, sizeChangeWidth: number, sizeChangeHeight: number): void {\n\t\tconst sizeChangePxWidth = Math.sign(sizeChangeWidth) * computeScreenAwareSize(getActiveWindow(), Math.abs(sizeChangeWidth));\n\t\tconst sizeChangePxHeight = Math.sign(sizeChangeHeight) * computeScreenAwareSize(getActiveWindow(), Math.abs(sizeChangeHeight));\n\n\t\tlet viewSize: IViewSize;\n\n\t\tswitch (part) {\n\t\t\tcase Parts.SIDEBAR_PART:\n\t\t\t\tviewSize = this.workbenchGrid.getViewSize(this.sideBarPartView);\n\t\t\t\tthis.workbenchGrid.resizeView(this.sideBarPartView,\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: viewSize.width + sizeChangePxWidth,\n\t\t\t\t\t\theight: viewSize.height\n\t\t\t\t\t});\n\n\t\t\t\tbreak;\n\t\t\tcase Parts.PANEL_PART:\n\t\t\t\tviewSize = this.workbenchGrid.getViewSize(this.panelPartView);\n\n\t\t\t\tthis.workbenchGrid.resizeView(this.panelPartView,\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: viewSize.width + (isHorizontal(this.getPanelPosition()) ? 0 : sizeChangePxWidth),\n\t\t\t\t\t\theight: viewSize.height + (isHorizontal(this.getPanelPosition()) ? sizeChangePxHeight : 0)\n\t\t\t\t\t});\n\n\t\t\t\tbreak;\n\t\t\tcase Parts.AUXILIARYBAR_PART:\n\t\t\t\tviewSize = this.workbenchGrid.getViewSize(this.auxiliaryBarPartView);\n\t\t\t\tthis.workbenchGrid.resizeView(this.auxiliaryBarPartView,\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: viewSize.width + sizeChangePxWidth,\n\t\t\t\t\t\theight: viewSize.height\n\t\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase Parts.EDITOR_PART:\n\t\t\t\tviewSize = this.workbenchGrid.getViewSize(this.editorPartView);\n\n\t\t\t\t// Single Editor Group\n\t\t\t\tif (this.editorGroupService.mainPart.count === 1) {\n\t\t\t\t\tthis.workbenchGrid.resizeView(this.editorPartView,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twidth: viewSize.width + sizeChangePxWidth,\n\t\t\t\t\t\t\theight: viewSize.height + sizeChangePxHeight\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst activeGroup = this.editorGroupService.mainPart.activeGroup;\n\n\t\t\t\t\tconst { width, height } = this.editorGroupService.mainPart.getSize(activeGroup);\n\t\t\t\t\tthis.editorGroupService.mainPart.setSize(activeGroup, { width: width + sizeChangePxWidth, height: height + sizeChangePxHeight });\n\n\t\t\t\t\t// After resizing the editor group\n\t\t\t\t\t// if it does not change in either direction\n\t\t\t\t\t// try resizing the full editor part\n\t\t\t\t\tconst { width: newWidth, height: newHeight } = this.editorGroupService.mainPart.getSize(activeGroup);\n\t\t\t\t\tif ((sizeChangePxHeight && height === newHeight) || (sizeChangePxWidth && width === newWidth)) {\n\t\t\t\t\t\tthis.workbenchGrid.resizeView(this.editorPartView,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twidth: viewSize.width + (sizeChangePxWidth && width === newWidth ? sizeChangePxWidth : 0),\n\t\t\t\t\t\t\t\theight: viewSize.height + (sizeChangePxHeight && height === newHeight ? sizeChangePxHeight : 0)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn; // Cannot resize other parts\n\t\t}\n\t}\n\n\tprivate setActivityBarHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.ACTIVITYBAR_HIDDEN, hidden);\n\t\tthis.workbenchGrid.setViewVisible(this.activityBarPartView, !hidden);\n\t}\n\n\tprivate setBannerHidden(hidden: boolean): void {\n\t\tthis.workbenchGrid.setViewVisible(this.bannerPartView, !hidden);\n\t}\n\n\tprivate setEditorHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.EDITOR_HIDDEN, hidden);\n\n\t\t// Adjust CSS\n\t\tif (hidden) {\n\t\t\tthis.mainContainer.classList.add(LayoutClasses.MAIN_EDITOR_AREA_HIDDEN);\n\t\t} else {\n\t\t\tthis.mainContainer.classList.remove(LayoutClasses.MAIN_EDITOR_AREA_HIDDEN);\n\t\t}\n\n\t\t// Propagate to grid\n\t\tthis.workbenchGrid.setViewVisible(this.editorPartView, !hidden);\n\n\t\t// The editor and panel cannot be hidden at the same time\n\t\tif (hidden && !this.isVisible(Parts.PANEL_PART)) {\n\t\t\tthis.setPanelHidden(false, true);\n\t\t}\n\t}\n\n\tgetLayoutClasses(): string[] {\n\t\treturn coalesce([\n\t\t\t!this.isVisible(Parts.SIDEBAR_PART) ? LayoutClasses.SIDEBAR_HIDDEN : undefined,\n\t\t\t!this.isVisible(Parts.EDITOR_PART, mainWindow) ? LayoutClasses.MAIN_EDITOR_AREA_HIDDEN : undefined,\n\t\t\t!this.isVisible(Parts.PANEL_PART) ? LayoutClasses.PANEL_HIDDEN : undefined,\n\t\t\t!this.isVisible(Parts.AUXILIARYBAR_PART) ? LayoutClasses.AUXILIARYBAR_HIDDEN : undefined,\n\t\t\t!this.isVisible(Parts.STATUSBAR_PART) ? LayoutClasses.STATUSBAR_HIDDEN : undefined,\n\t\t\tthis.state.runtime.mainWindowFullscreen ? LayoutClasses.FULLSCREEN : undefined\n\t\t]);\n\t}\n\n\tprivate setSideBarHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN, hidden);\n\n\t\t// Adjust CSS\n\t\tif (hidden) {\n\t\t\tthis.mainContainer.classList.add(LayoutClasses.SIDEBAR_HIDDEN);\n\t\t} else {\n\t\t\tthis.mainContainer.classList.remove(LayoutClasses.SIDEBAR_HIDDEN);\n\t\t}\n\n\t\t// If sidebar becomes hidden, also hide the current active Viewlet if any\n\t\tif (hidden && this.paneCompositeService.getActivePaneComposite(ViewContainerLocation.Sidebar)) {\n\t\t\tthis.paneCompositeService.hideActivePaneComposite(ViewContainerLocation.Sidebar);\n\t\t\tthis.focusPanelOrEditor();\n\t\t}\n\n\t\t// If sidebar becomes visible, show last active Viewlet or default viewlet\n\t\telse if (!hidden && !this.paneCompositeService.getActivePaneComposite(ViewContainerLocation.Sidebar)) {\n\t\t\tconst viewletToOpen = this.paneCompositeService.getLastActivePaneCompositeId(ViewContainerLocation.Sidebar);\n\t\t\tif (viewletToOpen) {\n\t\t\t\tconst viewlet = this.paneCompositeService.openPaneComposite(viewletToOpen, ViewContainerLocation.Sidebar, true);\n\t\t\t\tif (!viewlet) {\n\t\t\t\t\tthis.paneCompositeService.openPaneComposite(this.viewDescriptorService.getDefaultViewContainer(ViewContainerLocation.Sidebar)?.id, ViewContainerLocation.Sidebar, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Propagate to grid\n\t\tthis.workbenchGrid.setViewVisible(this.sideBarPartView, !hidden);\n\t}\n\n\tprivate hasViews(id: string): boolean {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(id);\n\t\tif (!viewContainer) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewContainerModel = this.viewDescriptorService.getViewContainerModel(viewContainer);\n\t\tif (!viewContainerModel) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn viewContainerModel.activeViewDescriptors.length >= 1;\n\t}\n\n\tprivate adjustPartPositions(sideBarPosition: Position, panelAlignment: PanelAlignment, panelPosition: Position): void {\n\n\t\t// Move activity bar and side bars\n\t\tconst isPanelVertical = !isHorizontal(panelPosition);\n\t\tconst sideBarSiblingToEditor = isPanelVertical || !(panelAlignment === 'center' || (sideBarPosition === Position.LEFT && panelAlignment === 'right') || (sideBarPosition === Position.RIGHT && panelAlignment === 'left'));\n\t\tconst auxiliaryBarSiblingToEditor = isPanelVertical || !(panelAlignment === 'center' || (sideBarPosition === Position.RIGHT && panelAlignment === 'right') || (sideBarPosition === Position.LEFT && panelAlignment === 'left'));\n\t\tconst preMovePanelWidth = !this.isVisible(Parts.PANEL_PART) ? Sizing.Invisible(this.workbenchGrid.getViewCachedVisibleSize(this.panelPartView) ?? this.panelPartView.minimumWidth) : this.workbenchGrid.getViewSize(this.panelPartView).width;\n\t\tconst preMovePanelHeight = !this.isVisible(Parts.PANEL_PART) ? Sizing.Invisible(this.workbenchGrid.getViewCachedVisibleSize(this.panelPartView) ?? this.panelPartView.minimumHeight) : this.workbenchGrid.getViewSize(this.panelPartView).height;\n\t\tconst preMoveSideBarSize = !this.isVisible(Parts.SIDEBAR_PART) ? Sizing.Invisible(this.workbenchGrid.getViewCachedVisibleSize(this.sideBarPartView) ?? this.sideBarPartView.minimumWidth) : this.workbenchGrid.getViewSize(this.sideBarPartView).width;\n\t\tconst preMoveAuxiliaryBarSize = !this.isVisible(Parts.AUXILIARYBAR_PART) ? Sizing.Invisible(this.workbenchGrid.getViewCachedVisibleSize(this.auxiliaryBarPartView) ?? this.auxiliaryBarPartView.minimumWidth) : this.workbenchGrid.getViewSize(this.auxiliaryBarPartView).width;\n\n\t\tif (sideBarPosition === Position.LEFT) {\n\t\t\tthis.workbenchGrid.moveViewTo(this.activityBarPartView, [2, 0]);\n\t\t\tthis.workbenchGrid.moveView(this.sideBarPartView, preMoveSideBarSize, sideBarSiblingToEditor ? this.editorPartView : this.activityBarPartView, sideBarSiblingToEditor ? Direction.Left : Direction.Right);\n\t\t\tif (auxiliaryBarSiblingToEditor) {\n\t\t\t\tthis.workbenchGrid.moveView(this.auxiliaryBarPartView, preMoveAuxiliaryBarSize, this.editorPartView, Direction.Right);\n\t\t\t} else {\n\t\t\t\tthis.workbenchGrid.moveViewTo(this.auxiliaryBarPartView, [2, -1]);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.workbenchGrid.moveViewTo(this.activityBarPartView, [2, -1]);\n\t\t\tthis.workbenchGrid.moveView(this.sideBarPartView, preMoveSideBarSize, sideBarSiblingToEditor ? this.editorPartView : this.activityBarPartView, sideBarSiblingToEditor ? Direction.Right : Direction.Left);\n\t\t\tif (auxiliaryBarSiblingToEditor) {\n\t\t\t\tthis.workbenchGrid.moveView(this.auxiliaryBarPartView, preMoveAuxiliaryBarSize, this.editorPartView, Direction.Left);\n\t\t\t} else {\n\t\t\t\tthis.workbenchGrid.moveViewTo(this.auxiliaryBarPartView, [2, 0]);\n\t\t\t}\n\t\t}\n\n\t\t// We moved all the side parts based on the editor and ignored the panel\n\t\t// Now, we need to put the panel back in the right position when it is next to the editor\n\t\tif (isPanelVertical) {\n\t\t\tthis.workbenchGrid.moveView(this.panelPartView, preMovePanelWidth, this.editorPartView, panelPosition === Position.LEFT ? Direction.Left : Direction.Right);\n\t\t\tthis.workbenchGrid.resizeView(this.panelPartView, {\n\t\t\t\theight: preMovePanelHeight as number,\n\t\t\t\twidth: preMovePanelWidth as number\n\t\t\t});\n\t\t}\n\n\t\t// Moving views in the grid can cause them to re-distribute sizing unnecessarily\n\t\t// Resize visible parts to the width they were before the operation\n\t\tif (this.isVisible(Parts.SIDEBAR_PART)) {\n\t\t\tthis.workbenchGrid.resizeView(this.sideBarPartView, {\n\t\t\t\theight: this.workbenchGrid.getViewSize(this.sideBarPartView).height,\n\t\t\t\twidth: preMoveSideBarSize as number\n\t\t\t});\n\t\t}\n\n\t\tif (this.isVisible(Parts.AUXILIARYBAR_PART)) {\n\t\t\tthis.workbenchGrid.resizeView(this.auxiliaryBarPartView, {\n\t\t\t\theight: this.workbenchGrid.getViewSize(this.auxiliaryBarPartView).height,\n\t\t\t\twidth: preMoveAuxiliaryBarSize as number\n\t\t\t});\n\t\t}\n\t}\n\n\tsetPanelAlignment(alignment: PanelAlignment, skipLayout?: boolean): void {\n\n\t\t// Panel alignment only applies to a panel in the top/bottom position\n\t\tif (!isHorizontal(this.getPanelPosition())) {\n\t\t\tthis.setPanelPosition(Position.BOTTOM);\n\t\t}\n\n\t\t// the workbench grid currently prevents us from supporting panel maximization with non-center panel alignment\n\t\tif (alignment !== 'center' && this.isPanelMaximized()) {\n\t\t\tthis.toggleMaximizedPanel();\n\t\t}\n\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_ALIGNMENT, alignment);\n\n\t\tthis.adjustPartPositions(this.getSideBarPosition(), alignment, this.getPanelPosition());\n\n\t\tthis._onDidChangePanelAlignment.fire(alignment);\n\t}\n\n\tprivate setPanelHidden(hidden: boolean, skipLayout?: boolean): void {\n\n\t\t// Return if not initialized fully #105480\n\t\tif (!this.workbenchGrid) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wasHidden = !this.isVisible(Parts.PANEL_PART);\n\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_HIDDEN, hidden);\n\n\t\tconst isPanelMaximized = this.isPanelMaximized();\n\t\tconst panelOpensMaximized = this.panelOpensMaximized();\n\n\t\t// Adjust CSS\n\t\tif (hidden) {\n\t\t\tthis.mainContainer.classList.add(LayoutClasses.PANEL_HIDDEN);\n\t\t} else {\n\t\t\tthis.mainContainer.classList.remove(LayoutClasses.PANEL_HIDDEN);\n\t\t}\n\n\t\t// If panel part becomes hidden, also hide the current active panel if any\n\t\tlet focusEditor = false;\n\t\tif (hidden && this.paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel)) {\n\t\t\tthis.paneCompositeService.hideActivePaneComposite(ViewContainerLocation.Panel);\n\t\t\tfocusEditor = isIOS ? false : true; // Do not auto focus on ios #127832\n\t\t}\n\n\t\t// If panel part becomes visible, show last active panel or default panel\n\t\telse if (!hidden && !this.paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel)) {\n\t\t\tlet panelToOpen: string | undefined = this.paneCompositeService.getLastActivePaneCompositeId(ViewContainerLocation.Panel);\n\n\t\t\t// verify that the panel we try to open has views before we default to it\n\t\t\t// otherwise fall back to any view that has views still refs #111463\n\t\t\tif (!panelToOpen || !this.hasViews(panelToOpen)) {\n\t\t\t\tpanelToOpen = this.viewDescriptorService\n\t\t\t\t\t.getViewContainersByLocation(ViewContainerLocation.Panel)\n\t\t\t\t\t.find(viewContainer => this.hasViews(viewContainer.id))?.id;\n\t\t\t}\n\n\t\t\tif (panelToOpen) {\n\t\t\t\tconst focus = !skipLayout;\n\t\t\t\tthis.paneCompositeService.openPaneComposite(panelToOpen, ViewContainerLocation.Panel, focus);\n\t\t\t}\n\t\t}\n\n\t\t// If maximized and in process of hiding, unmaximize before hiding to allow caching of non-maximized size\n\t\tif (hidden && isPanelMaximized) {\n\t\t\tthis.toggleMaximizedPanel();\n\t\t}\n\n\t\t// Don't proceed if we have already done this before\n\t\tif (wasHidden === hidden) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Propagate layout changes to grid\n\t\tthis.workbenchGrid.setViewVisible(this.panelPartView, !hidden);\n\n\t\t// If in process of showing, toggle whether or not panel is maximized\n\t\tif (!hidden) {\n\t\t\tif (!skipLayout && isPanelMaximized !== panelOpensMaximized) {\n\t\t\t\tthis.toggleMaximizedPanel();\n\t\t\t}\n\t\t} else {\n\t\t\t// If in process of hiding, remember whether the panel is maximized or not\n\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_WAS_LAST_MAXIMIZED, isPanelMaximized);\n\t\t}\n\n\t\tif (focusEditor) {\n\t\t\tthis.editorGroupService.mainPart.activeGroup.focus(); // Pass focus to editor group if panel part is now hidden\n\t\t}\n\t}\n\n\ttoggleMaximizedPanel(): void {\n\t\tconst size = this.workbenchGrid.getViewSize(this.panelPartView);\n\t\tconst panelPosition = this.getPanelPosition();\n\t\tconst isMaximized = this.isPanelMaximized();\n\t\tif (!isMaximized) {\n\t\t\tif (this.isVisible(Parts.PANEL_PART)) {\n\t\t\t\tif (isHorizontal(panelPosition)) {\n\t\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_HEIGHT, size.height);\n\t\t\t\t} else {\n\t\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_WIDTH, size.width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setEditorHidden(true);\n\t\t} else {\n\t\t\tthis.setEditorHidden(false);\n\t\t\tthis.workbenchGrid.resizeView(this.panelPartView, {\n\t\t\t\twidth: isHorizontal(panelPosition) ? size.width : this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_WIDTH),\n\t\t\t\theight: isHorizontal(panelPosition) ? this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_HEIGHT) : size.height\n\t\t\t});\n\t\t}\n\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_WAS_LAST_MAXIMIZED, !isMaximized);\n\t}\n\n\tprivate panelOpensMaximized(): boolean {\n\n\t\t// The workbench grid currently prevents us from supporting panel maximization with non-center panel alignment\n\t\tif (this.getPanelAlignment() !== 'center' && isHorizontal(this.getPanelPosition())) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst panelOpensMaximized = panelOpensMaximizedFromString(this.configurationService.getValue<string>(WorkbenchLayoutSettings.PANEL_OPENS_MAXIMIZED));\n\t\tconst panelLastIsMaximized = this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_WAS_LAST_MAXIMIZED);\n\n\t\treturn panelOpensMaximized === PanelOpensMaximizedOptions.ALWAYS || (panelOpensMaximized === PanelOpensMaximizedOptions.REMEMBER_LAST && panelLastIsMaximized);\n\t}\n\n\tprivate setAuxiliaryBarHidden(hidden: boolean, skipLayout?: boolean): void {\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.AUXILIARYBAR_HIDDEN, hidden);\n\n\t\t// Adjust CSS\n\t\tif (hidden) {\n\t\t\tthis.mainContainer.classList.add(LayoutClasses.AUXILIARYBAR_HIDDEN);\n\t\t} else {\n\t\t\tthis.mainContainer.classList.remove(LayoutClasses.AUXILIARYBAR_HIDDEN);\n\t\t}\n\n\t\t// If auxiliary bar becomes hidden, also hide the current active pane composite if any\n\t\tif (hidden && this.paneCompositeService.getActivePaneComposite(ViewContainerLocation.AuxiliaryBar)) {\n\t\t\tthis.paneCompositeService.hideActivePaneComposite(ViewContainerLocation.AuxiliaryBar);\n\t\t\tthis.focusPanelOrEditor();\n\t\t}\n\n\t\t// If auxiliary bar becomes visible, show last active pane composite or default pane composite\n\t\telse if (!hidden && !this.paneCompositeService.getActivePaneComposite(ViewContainerLocation.AuxiliaryBar)) {\n\t\t\tlet panelToOpen: string | undefined = this.paneCompositeService.getLastActivePaneCompositeId(ViewContainerLocation.AuxiliaryBar);\n\n\t\t\t// verify that the panel we try to open has views before we default to it\n\t\t\t// otherwise fall back to any view that has views still refs #111463\n\t\t\tif (!panelToOpen || !this.hasViews(panelToOpen)) {\n\t\t\t\tpanelToOpen = this.viewDescriptorService\n\t\t\t\t\t.getViewContainersByLocation(ViewContainerLocation.AuxiliaryBar)\n\t\t\t\t\t.find(viewContainer => this.hasViews(viewContainer.id))?.id;\n\t\t\t}\n\n\t\t\tif (panelToOpen) {\n\t\t\t\tconst focus = !skipLayout;\n\t\t\t\tthis.paneCompositeService.openPaneComposite(panelToOpen, ViewContainerLocation.AuxiliaryBar, focus);\n\t\t\t}\n\t\t}\n\n\t\t// Propagate to grid\n\t\tthis.workbenchGrid.setViewVisible(this.auxiliaryBarPartView, !hidden);\n\t}\n\n\tsetPartHidden(hidden: boolean, part: Exclude<SINGLE_WINDOW_PARTS, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>): void;\n\tsetPartHidden(hidden: boolean, part: Exclude<MULTI_WINDOW_PARTS, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>, targetWindow: Window): void;\n\tsetPartHidden(hidden: boolean, part: Parts, targetWindow: Window = mainWindow): void {\n\t\tswitch (part) {\n\t\t\tcase Parts.ACTIVITYBAR_PART:\n\t\t\t\treturn this.setActivityBarHidden(hidden);\n\t\t\tcase Parts.SIDEBAR_PART:\n\t\t\t\treturn this.setSideBarHidden(hidden);\n\t\t\tcase Parts.EDITOR_PART:\n\t\t\t\treturn this.setEditorHidden(hidden);\n\t\t\tcase Parts.BANNER_PART:\n\t\t\t\treturn this.setBannerHidden(hidden);\n\t\t\tcase Parts.AUXILIARYBAR_PART:\n\t\t\t\treturn this.setAuxiliaryBarHidden(hidden);\n\t\t\tcase Parts.PANEL_PART:\n\t\t\t\treturn this.setPanelHidden(hidden);\n\t\t}\n\t}\n\n\thasMainWindowBorder(): boolean {\n\t\treturn this.state.runtime.mainWindowBorder;\n\t}\n\n\tgetMainWindowBorderRadius(): string | undefined {\n\t\treturn this.state.runtime.mainWindowBorder && isMacintosh ? '5px' : undefined;\n\t}\n\n\tisPanelMaximized(): boolean {\n\n\t\t// the workbench grid currently prevents us from supporting panel maximization with non-center panel alignment\n\t\treturn (this.getPanelAlignment() === 'center' || !isHorizontal(this.getPanelPosition())) && !this.isVisible(Parts.EDITOR_PART, mainWindow);\n\t}\n\n\tgetSideBarPosition(): Position {\n\t\treturn this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_POSITON);\n\t}\n\n\tgetPanelAlignment(): PanelAlignment {\n\t\treturn this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_ALIGNMENT);\n\t}\n\n\tupdateMenubarVisibility(skipLayout: boolean): void {\n\t\tconst shouldShowTitleBar = shouldShowCustomTitleBar(this.configurationService, mainWindow, this.state.runtime.menuBar.toggled, this.isZenModeActive());\n\t\tif (!skipLayout && this.workbenchGrid && shouldShowTitleBar !== this.isVisible(Parts.TITLEBAR_PART, mainWindow)) {\n\t\t\tthis.workbenchGrid.setViewVisible(this.titleBarPartView, shouldShowTitleBar);\n\t\t}\n\t}\n\n\tupdateCustomTitleBarVisibility(): void {\n\t\tconst shouldShowTitleBar = shouldShowCustomTitleBar(this.configurationService, mainWindow, this.state.runtime.menuBar.toggled, this.isZenModeActive());\n\t\tconst titlebarVisible = this.isVisible(Parts.TITLEBAR_PART);\n\t\tif (shouldShowTitleBar !== titlebarVisible) {\n\t\t\tthis.workbenchGrid.setViewVisible(this.titleBarPartView, shouldShowTitleBar);\n\t\t}\n\t}\n\n\ttoggleMenuBar(): void {\n\t\tlet currentVisibilityValue = getMenuBarVisibility(this.configurationService);\n\t\tif (typeof currentVisibilityValue !== 'string') {\n\t\t\tcurrentVisibilityValue = 'classic';\n\t\t}\n\n\t\tlet newVisibilityValue: string;\n\t\tif (currentVisibilityValue === 'visible' || currentVisibilityValue === 'classic') {\n\t\t\tnewVisibilityValue = hasNativeTitlebar(this.configurationService) ? 'toggle' : 'compact';\n\t\t} else {\n\t\t\tnewVisibilityValue = 'classic';\n\t\t}\n\n\t\tthis.configurationService.updateValue('window.menuBarVisibility', newVisibilityValue);\n\t}\n\n\tgetPanelPosition(): Position {\n\t\treturn this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_POSITION);\n\t}\n\n\tsetPanelPosition(position: Position): void {\n\t\tif (!this.isVisible(Parts.PANEL_PART)) {\n\t\t\tthis.setPanelHidden(false);\n\t\t}\n\n\t\tconst panelPart = this.getPart(Parts.PANEL_PART);\n\t\tconst oldPositionValue = positionToString(this.getPanelPosition());\n\t\tconst newPositionValue = positionToString(position);\n\n\t\t// Adjust CSS\n\t\tconst panelContainer = assertIsDefined(panelPart.getContainer());\n\t\tpanelContainer.classList.remove(oldPositionValue);\n\t\tpanelContainer.classList.add(newPositionValue);\n\n\t\t// Update Styles\n\t\tpanelPart.updateStyles();\n\n\t\t// Layout\n\t\tconst size = this.workbenchGrid.getViewSize(this.panelPartView);\n\t\tconst sideBarSize = this.workbenchGrid.getViewSize(this.sideBarPartView);\n\t\tconst auxiliaryBarSize = this.workbenchGrid.getViewSize(this.auxiliaryBarPartView);\n\n\t\tlet editorHidden = !this.isVisible(Parts.EDITOR_PART, mainWindow);\n\n\t\t// Save last non-maximized size for panel before move\n\t\tif (newPositionValue !== oldPositionValue && !editorHidden) {\n\n\t\t\t// Save the current size of the panel for the new orthogonal direction\n\t\t\t// If moving down, save the width of the panel\n\t\t\t// Otherwise, save the height of the panel\n\t\t\tif (isHorizontal(position)) {\n\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_WIDTH, size.width);\n\t\t\t} else if (isHorizontal(positionFromString(oldPositionValue))) {\n\t\t\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_HEIGHT, size.height);\n\t\t\t}\n\t\t}\n\n\t\tif (isHorizontal(position) && this.getPanelAlignment() !== 'center' && editorHidden) {\n\t\t\tthis.toggleMaximizedPanel();\n\t\t\teditorHidden = false;\n\t\t}\n\n\t\tthis.stateModel.setRuntimeValue(LayoutStateKeys.PANEL_POSITION, position);\n\n\t\tconst sideBarVisible = this.isVisible(Parts.SIDEBAR_PART);\n\t\tconst auxiliaryBarVisible = this.isVisible(Parts.AUXILIARYBAR_PART);\n\n\t\tif (position === Position.BOTTOM) {\n\t\t\tthis.workbenchGrid.moveView(this.panelPartView, editorHidden ? size.height : this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_HEIGHT), this.editorPartView, Direction.Down);\n\t\t} else if (position === Position.TOP) {\n\t\t\tthis.workbenchGrid.moveView(this.panelPartView, editorHidden ? size.height : this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_HEIGHT), this.editorPartView, Direction.Up);\n\t\t} else if (position === Position.RIGHT) {\n\t\t\tthis.workbenchGrid.moveView(this.panelPartView, editorHidden ? size.width : this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_WIDTH), this.editorPartView, Direction.Right);\n\t\t} else {\n\t\t\tthis.workbenchGrid.moveView(this.panelPartView, editorHidden ? size.width : this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_LAST_NON_MAXIMIZED_WIDTH), this.editorPartView, Direction.Left);\n\t\t}\n\n\t\t// Reset sidebar to original size before shifting the panel\n\t\tthis.workbenchGrid.resizeView(this.sideBarPartView, sideBarSize);\n\t\tif (!sideBarVisible) {\n\t\t\tthis.setSideBarHidden(true);\n\t\t}\n\n\t\tthis.workbenchGrid.resizeView(this.auxiliaryBarPartView, auxiliaryBarSize);\n\t\tif (!auxiliaryBarVisible) {\n\t\t\tthis.setAuxiliaryBarHidden(true);\n\t\t}\n\n\t\tif (isHorizontal(position)) {\n\t\t\tthis.adjustPartPositions(this.getSideBarPosition(), this.getPanelAlignment(), position);\n\t\t}\n\n\t\tthis._onDidChangePanelPosition.fire(newPositionValue);\n\t}\n\n\tisWindowMaximized(targetWindow: Window): boolean {\n\t\treturn this.state.runtime.maximized.has(getWindowId(targetWindow));\n\t}\n\n\tupdateWindowMaximizedState(targetWindow: Window, maximized: boolean) {\n\t\tthis.mainContainer.classList.toggle(LayoutClasses.MAXIMIZED, maximized);\n\n\t\tconst targetWindowId = getWindowId(targetWindow);\n\t\tif (maximized === this.state.runtime.maximized.has(targetWindowId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (maximized) {\n\t\t\tthis.state.runtime.maximized.add(targetWindowId);\n\t\t} else {\n\t\t\tthis.state.runtime.maximized.delete(targetWindowId);\n\t\t}\n\n\t\tthis.updateWindowsBorder();\n\t\tthis._onDidChangeWindowMaximized.fire({ windowId: targetWindowId, maximized });\n\t}\n\n\tgetVisibleNeighborPart(part: Parts, direction: Direction): Parts | undefined {\n\t\tif (!this.workbenchGrid) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.isVisible(part, mainWindow)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst neighborViews = this.workbenchGrid.getNeighborViews(this.getPart(part), direction, false);\n\n\t\tif (!neighborViews) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (const neighborView of neighborViews) {\n\t\t\tconst neighborPart =\n\t\t\t\t[Parts.ACTIVITYBAR_PART, Parts.EDITOR_PART, Parts.PANEL_PART, Parts.AUXILIARYBAR_PART, Parts.SIDEBAR_PART, Parts.STATUSBAR_PART, Parts.TITLEBAR_PART]\n\t\t\t\t\t.find(partId => this.getPart(partId) === neighborView && this.isVisible(partId, mainWindow));\n\n\t\t\tif (neighborPart !== undefined) {\n\t\t\t\treturn neighborPart;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate onDidChangeWCO(): void {\n\t\tconst bannerFirst = this.workbenchGrid.getNeighborViews(this.titleBarPartView, Direction.Up, false).length > 0;\n\t\tconst shouldBannerBeFirst = this.shouldShowBannerFirst();\n\n\t\tif (bannerFirst !== shouldBannerBeFirst) {\n\t\t\tthis.workbenchGrid.moveView(this.bannerPartView, Sizing.Distribute, this.titleBarPartView, shouldBannerBeFirst ? Direction.Up : Direction.Down);\n\t\t}\n\n\t\tthis.workbenchGrid.setViewVisible(this.titleBarPartView, shouldShowCustomTitleBar(this.configurationService, mainWindow, this.state.runtime.menuBar.toggled, this.isZenModeActive()));\n\t}\n\n\tprivate arrangeEditorNodes(nodes: { editor: ISerializedNode; sideBar?: ISerializedNode; auxiliaryBar?: ISerializedNode }, availableHeight: number, availableWidth: number): ISerializedNode {\n\t\tif (!nodes.sideBar && !nodes.auxiliaryBar) {\n\t\t\tnodes.editor.size = availableHeight;\n\t\t\treturn nodes.editor;\n\t\t}\n\n\t\tconst result = [nodes.editor];\n\t\tnodes.editor.size = availableWidth;\n\t\tif (nodes.sideBar) {\n\t\t\tif (this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_POSITON) === Position.LEFT) {\n\t\t\t\tresult.splice(0, 0, nodes.sideBar);\n\t\t\t} else {\n\t\t\t\tresult.push(nodes.sideBar);\n\t\t\t}\n\n\t\t\tnodes.editor.size -= this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN) ? 0 : nodes.sideBar.size;\n\t\t}\n\n\t\tif (nodes.auxiliaryBar) {\n\t\t\tif (this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_POSITON) === Position.RIGHT) {\n\t\t\t\tresult.splice(0, 0, nodes.auxiliaryBar);\n\t\t\t} else {\n\t\t\t\tresult.push(nodes.auxiliaryBar);\n\t\t\t}\n\n\t\t\tnodes.editor.size -= this.stateModel.getRuntimeValue(LayoutStateKeys.AUXILIARYBAR_HIDDEN) ? 0 : nodes.auxiliaryBar.size;\n\t\t}\n\n\t\treturn {\n\t\t\ttype: 'branch',\n\t\t\tdata: result,\n\t\t\tsize: availableHeight\n\t\t};\n\t}\n\n\tprivate arrangeMiddleSectionNodes(nodes: { editor: ISerializedNode; panel: ISerializedNode; activityBar: ISerializedNode; sideBar: ISerializedNode; auxiliaryBar: ISerializedNode }, availableWidth: number, availableHeight: number): ISerializedNode[] {\n\t\tconst activityBarSize = this.stateModel.getRuntimeValue(LayoutStateKeys.ACTIVITYBAR_HIDDEN) ? 0 : nodes.activityBar.size;\n\t\tconst sideBarSize = this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN) ? 0 : nodes.sideBar.size;\n\t\tconst auxiliaryBarSize = this.stateModel.getRuntimeValue(LayoutStateKeys.AUXILIARYBAR_HIDDEN) ? 0 : nodes.auxiliaryBar.size;\n\t\tconst panelSize = this.stateModel.getInitializationValue(LayoutStateKeys.PANEL_SIZE) ? 0 : nodes.panel.size;\n\n\t\tconst panelPostion = this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_POSITION);\n\t\tconst sideBarPosition = this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_POSITON);\n\n\t\tconst result = [] as ISerializedNode[];\n\t\tif (!isHorizontal(panelPostion)) {\n\t\t\tresult.push(nodes.editor);\n\t\t\tnodes.editor.size = availableWidth - activityBarSize - sideBarSize - panelSize - auxiliaryBarSize;\n\t\t\tif (panelPostion === Position.RIGHT) {\n\t\t\t\tresult.push(nodes.panel);\n\t\t\t} else {\n\t\t\t\tresult.splice(0, 0, nodes.panel);\n\t\t\t}\n\n\t\t\tif (sideBarPosition === Position.LEFT) {\n\t\t\t\tresult.push(nodes.auxiliaryBar);\n\t\t\t\tresult.splice(0, 0, nodes.sideBar);\n\t\t\t\tresult.splice(0, 0, nodes.activityBar);\n\t\t\t} else {\n\t\t\t\tresult.splice(0, 0, nodes.auxiliaryBar);\n\t\t\t\tresult.push(nodes.sideBar);\n\t\t\t\tresult.push(nodes.activityBar);\n\t\t\t}\n\t\t} else {\n\t\t\tconst panelAlignment = this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_ALIGNMENT);\n\t\t\tconst sideBarNextToEditor = !(panelAlignment === 'center' || (sideBarPosition === Position.LEFT && panelAlignment === 'right') || (sideBarPosition === Position.RIGHT && panelAlignment === 'left'));\n\t\t\tconst auxiliaryBarNextToEditor = !(panelAlignment === 'center' || (sideBarPosition === Position.RIGHT && panelAlignment === 'right') || (sideBarPosition === Position.LEFT && panelAlignment === 'left'));\n\n\t\t\tconst editorSectionWidth = availableWidth - activityBarSize - (sideBarNextToEditor ? 0 : sideBarSize) - (auxiliaryBarNextToEditor ? 0 : auxiliaryBarSize);\n\n\t\t\tconst editorNodes = this.arrangeEditorNodes({\n\t\t\t\teditor: nodes.editor,\n\t\t\t\tsideBar: sideBarNextToEditor ? nodes.sideBar : undefined,\n\t\t\t\tauxiliaryBar: auxiliaryBarNextToEditor ? nodes.auxiliaryBar : undefined\n\t\t\t}, availableHeight - panelSize, editorSectionWidth);\n\n\t\t\tresult.push({\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: panelPostion === Position.BOTTOM ? [editorNodes, nodes.panel] : [nodes.panel, editorNodes],\n\t\t\t\tsize: editorSectionWidth\n\t\t\t});\n\n\t\t\tif (!sideBarNextToEditor) {\n\t\t\t\tif (sideBarPosition === Position.LEFT) {\n\t\t\t\t\tresult.splice(0, 0, nodes.sideBar);\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(nodes.sideBar);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!auxiliaryBarNextToEditor) {\n\t\t\t\tif (sideBarPosition === Position.RIGHT) {\n\t\t\t\t\tresult.splice(0, 0, nodes.auxiliaryBar);\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(nodes.auxiliaryBar);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (sideBarPosition === Position.LEFT) {\n\t\t\t\tresult.splice(0, 0, nodes.activityBar);\n\t\t\t} else {\n\t\t\t\tresult.push(nodes.activityBar);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate createGridDescriptor(): ISerializedGrid {\n\t\tconst { width, height } = this.stateModel.getInitializationValue(LayoutStateKeys.GRID_SIZE);\n\t\tconst sideBarSize = this.stateModel.getInitializationValue(LayoutStateKeys.SIDEBAR_SIZE);\n\t\tconst auxiliaryBarPartSize = this.stateModel.getInitializationValue(LayoutStateKeys.AUXILIARYBAR_SIZE);\n\t\tconst panelSize = this.stateModel.getInitializationValue(LayoutStateKeys.PANEL_SIZE);\n\n\t\tconst titleBarHeight = this.titleBarPartView.minimumHeight;\n\t\tconst bannerHeight = this.bannerPartView.minimumHeight;\n\t\tconst statusBarHeight = this.statusBarPartView.minimumHeight;\n\t\tconst activityBarWidth = this.activityBarPartView.minimumWidth;\n\t\tconst middleSectionHeight = height - titleBarHeight - statusBarHeight;\n\n\t\tconst titleAndBanner: ISerializedNode[] = [\n\t\t\t{\n\t\t\t\ttype: 'leaf',\n\t\t\t\tdata: { type: Parts.TITLEBAR_PART },\n\t\t\t\tsize: titleBarHeight,\n\t\t\t\tvisible: this.isVisible(Parts.TITLEBAR_PART, mainWindow)\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'leaf',\n\t\t\t\tdata: { type: Parts.BANNER_PART },\n\t\t\t\tsize: bannerHeight,\n\t\t\t\tvisible: false\n\t\t\t}\n\t\t];\n\n\t\tconst activityBarNode: ISerializedLeafNode = {\n\t\t\ttype: 'leaf',\n\t\t\tdata: { type: Parts.ACTIVITYBAR_PART },\n\t\t\tsize: activityBarWidth,\n\t\t\tvisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.ACTIVITYBAR_HIDDEN)\n\t\t};\n\n\t\tconst sideBarNode: ISerializedLeafNode = {\n\t\t\ttype: 'leaf',\n\t\t\tdata: { type: Parts.SIDEBAR_PART },\n\t\t\tsize: sideBarSize,\n\t\t\tvisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN)\n\t\t};\n\n\t\tconst auxiliaryBarNode: ISerializedLeafNode = {\n\t\t\ttype: 'leaf',\n\t\t\tdata: { type: Parts.AUXILIARYBAR_PART },\n\t\t\tsize: auxiliaryBarPartSize,\n\t\t\tvisible: this.isVisible(Parts.AUXILIARYBAR_PART)\n\t\t};\n\n\t\tconst editorNode: ISerializedLeafNode = {\n\t\t\ttype: 'leaf',\n\t\t\tdata: { type: Parts.EDITOR_PART },\n\t\t\tsize: 0, // Update based on sibling sizes\n\t\t\tvisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.EDITOR_HIDDEN)\n\t\t};\n\n\t\tconst panelNode: ISerializedLeafNode = {\n\t\t\ttype: 'leaf',\n\t\t\tdata: { type: Parts.PANEL_PART },\n\t\t\tsize: panelSize,\n\t\t\tvisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_HIDDEN)\n\t\t};\n\n\t\tconst middleSection: ISerializedNode[] = this.arrangeMiddleSectionNodes({\n\t\t\tactivityBar: activityBarNode,\n\t\t\tauxiliaryBar: auxiliaryBarNode,\n\t\t\teditor: editorNode,\n\t\t\tpanel: panelNode,\n\t\t\tsideBar: sideBarNode\n\t\t}, width, middleSectionHeight);\n\n\t\tconst result: ISerializedGrid = {\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tsize: width,\n\t\t\t\tdata: [\n\t\t\t\t\t...(this.shouldShowBannerFirst() ? titleAndBanner.reverse() : titleAndBanner),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: middleSection,\n\t\t\t\t\t\tsize: middleSectionHeight\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'leaf',\n\t\t\t\t\t\tdata: { type: Parts.STATUSBAR_PART },\n\t\t\t\t\t\tsize: statusBarHeight,\n\t\t\t\t\t\tvisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.STATUSBAR_HIDDEN)\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\torientation: Orientation.VERTICAL,\n\t\t\twidth,\n\t\t\theight\n\t\t};\n\n\t\ttype StartupLayoutEvent = {\n\t\t\tactivityBarVisible: boolean;\n\t\t\tsideBarVisible: boolean;\n\t\t\tauxiliaryBarVisible: boolean;\n\t\t\tpanelVisible: boolean;\n\t\t\tstatusbarVisible: boolean;\n\t\t\tsideBarPosition: string;\n\t\t\tpanelPosition: string;\n\t\t};\n\n\t\ttype StartupLayoutEventClassification = {\n\t\t\towner: 'sbatten';\n\t\t\tcomment: 'Information about the layout of the workbench during statup';\n\t\t\tactivityBarVisible: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether or the not the activity bar is visible' };\n\t\t\tsideBarVisible: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether or the not the primary side bar is visible' };\n\t\t\tauxiliaryBarVisible: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether or the not the secondary side bar is visible' };\n\t\t\tpanelVisible: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether or the not the panel is visible' };\n\t\t\tstatusbarVisible: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether or the not the status bar is visible' };\n\t\t\tsideBarPosition: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the primary side bar is on the left or right' };\n\t\t\tpanelPosition: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the panel is on the top, bottom, left, or right' };\n\t\t};\n\n\t\tconst layoutDescriptor: StartupLayoutEvent = {\n\t\t\tactivityBarVisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.ACTIVITYBAR_HIDDEN),\n\t\t\tsideBarVisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_HIDDEN),\n\t\t\tauxiliaryBarVisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.AUXILIARYBAR_HIDDEN),\n\t\t\tpanelVisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_HIDDEN),\n\t\t\tstatusbarVisible: !this.stateModel.getRuntimeValue(LayoutStateKeys.STATUSBAR_HIDDEN),\n\t\t\tsideBarPosition: positionToString(this.stateModel.getRuntimeValue(LayoutStateKeys.SIDEBAR_POSITON)),\n\t\t\tpanelPosition: positionToString(this.stateModel.getRuntimeValue(LayoutStateKeys.PANEL_POSITION)),\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<StartupLayoutEvent, StartupLayoutEventClassification>('startupLayout', layoutDescriptor);\n\n\t\treturn result;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.disposed = true;\n\t}\n}\n\ntype ZenModeConfiguration = {\n\tcenterLayout: boolean;\n\tfullScreen: boolean;\n\thideActivityBar: boolean;\n\thideLineNumbers: boolean;\n\thideStatusBar: boolean;\n\tshowTabs: 'multiple' | 'single' | 'none';\n\trestore: boolean;\n\tsilentNotifications: boolean;\n};\n\nfunction getZenModeConfiguration(configurationService: IConfigurationService): ZenModeConfiguration {\n\treturn configurationService.getValue<ZenModeConfiguration>(WorkbenchLayoutSettings.ZEN_MODE_CONFIG);\n}\n\n//#endregion\n\n//#region Layout State Model\n\ninterface IWorkbenchLayoutStateKey {\n\treadonly name: string;\n\treadonly runtime: boolean;\n\treadonly defaultValue: unknown;\n\treadonly scope: StorageScope;\n\treadonly target: StorageTarget;\n\treadonly zenModeIgnore?: boolean;\n}\n\ntype StorageKeyType = string | boolean | number | object;\n\nabstract class WorkbenchLayoutStateKey<T extends StorageKeyType> implements IWorkbenchLayoutStateKey {\n\n\tabstract readonly runtime: boolean;\n\n\tconstructor(readonly name: string, readonly scope: StorageScope, readonly target: StorageTarget, public defaultValue: T) { }\n}\n\nclass RuntimeStateKey<T extends StorageKeyType> extends WorkbenchLayoutStateKey<T> {\n\n\treadonly runtime = true;\n\n\tconstructor(name: string, scope: StorageScope, target: StorageTarget, defaultValue: T, readonly zenModeIgnore?: boolean) {\n\t\tsuper(name, scope, target, defaultValue);\n\t}\n}\n\nclass InitializationStateKey<T extends StorageKeyType> extends WorkbenchLayoutStateKey<T> {\n\treadonly runtime = false;\n}\n\nconst LayoutStateKeys = {\n\n\t// Editor\n\tMAIN_EDITOR_CENTERED: new RuntimeStateKey<boolean>('editor.centered', StorageScope.WORKSPACE, StorageTarget.MACHINE, false),\n\n\t// Zen Mode\n\tZEN_MODE_ACTIVE: new RuntimeStateKey<boolean>('zenMode.active', StorageScope.WORKSPACE, StorageTarget.MACHINE, false),\n\tZEN_MODE_EXIT_INFO: new RuntimeStateKey('zenMode.exitInfo', StorageScope.WORKSPACE, StorageTarget.MACHINE, {\n\t\ttransitionedToCenteredEditorLayout: false,\n\t\ttransitionedToFullScreen: false,\n\t\thandleNotificationsDoNotDisturbMode: false,\n\t\twasVisible: {\n\t\t\tauxiliaryBar: false,\n\t\t\tpanel: false,\n\t\t\tsideBar: false,\n\t\t},\n\t}),\n\n\t// Part Sizing\n\tGRID_SIZE: new InitializationStateKey('grid.size', StorageScope.PROFILE, StorageTarget.MACHINE, { width: 800, height: 600 }),\n\tSIDEBAR_SIZE: new InitializationStateKey<number>('sideBar.size', StorageScope.PROFILE, StorageTarget.MACHINE, 200),\n\tAUXILIARYBAR_SIZE: new InitializationStateKey<number>('auxiliaryBar.size', StorageScope.PROFILE, StorageTarget.MACHINE, 200),\n\tPANEL_SIZE: new InitializationStateKey<number>('panel.size', StorageScope.PROFILE, StorageTarget.MACHINE, 300),\n\n\tPANEL_LAST_NON_MAXIMIZED_HEIGHT: new RuntimeStateKey<number>('panel.lastNonMaximizedHeight', StorageScope.PROFILE, StorageTarget.MACHINE, 300),\n\tPANEL_LAST_NON_MAXIMIZED_WIDTH: new RuntimeStateKey<number>('panel.lastNonMaximizedWidth', StorageScope.PROFILE, StorageTarget.MACHINE, 300),\n\tPANEL_WAS_LAST_MAXIMIZED: new RuntimeStateKey<boolean>('panel.wasLastMaximized', StorageScope.WORKSPACE, StorageTarget.MACHINE, false),\n\n\t// Part Positions\n\tSIDEBAR_POSITON: new RuntimeStateKey<Position>('sideBar.position', StorageScope.WORKSPACE, StorageTarget.MACHINE, Position.LEFT),\n\tPANEL_POSITION: new RuntimeStateKey<Position>('panel.position', StorageScope.WORKSPACE, StorageTarget.MACHINE, Position.BOTTOM),\n\tPANEL_ALIGNMENT: new RuntimeStateKey<PanelAlignment>('panel.alignment', StorageScope.PROFILE, StorageTarget.USER, 'center'),\n\n\t// Part Visibility\n\tACTIVITYBAR_HIDDEN: new RuntimeStateKey<boolean>('activityBar.hidden', StorageScope.WORKSPACE, StorageTarget.MACHINE, false, true),\n\tSIDEBAR_HIDDEN: new RuntimeStateKey<boolean>('sideBar.hidden', StorageScope.WORKSPACE, StorageTarget.MACHINE, false),\n\tEDITOR_HIDDEN: new RuntimeStateKey<boolean>('editor.hidden', StorageScope.WORKSPACE, StorageTarget.MACHINE, false),\n\tPANEL_HIDDEN: new RuntimeStateKey<boolean>('panel.hidden', StorageScope.WORKSPACE, StorageTarget.MACHINE, true),\n\tAUXILIARYBAR_HIDDEN: new RuntimeStateKey<boolean>('auxiliaryBar.hidden', StorageScope.WORKSPACE, StorageTarget.MACHINE, true),\n\tSTATUSBAR_HIDDEN: new RuntimeStateKey<boolean>('statusBar.hidden', StorageScope.WORKSPACE, StorageTarget.MACHINE, false, true)\n\n} as const;\n\ninterface ILayoutStateChangeEvent<T extends StorageKeyType> {\n\treadonly key: RuntimeStateKey<T>;\n\treadonly value: T;\n}\n\nenum WorkbenchLayoutSettings {\n\tPANEL_POSITION = 'workbench.panel.defaultLocation',\n\tPANEL_OPENS_MAXIMIZED = 'workbench.panel.opensMaximized',\n\tZEN_MODE_CONFIG = 'zenMode',\n\tEDITOR_CENTERED_LAYOUT_AUTO_RESIZE = 'workbench.editor.centeredLayoutAutoResize',\n}\n\nenum LegacyWorkbenchLayoutSettings {\n\tSTATUSBAR_VISIBLE = 'workbench.statusBar.visible', // Deprecated to UI State\n\tSIDEBAR_POSITION = 'workbench.sideBar.location', // Deprecated to UI State\n}\n\nclass LayoutStateModel extends Disposable {\n\n\tstatic readonly STORAGE_PREFIX = 'workbench.';\n\n\tprivate readonly _onDidChangeState = this._register(new Emitter<ILayoutStateChangeEvent<StorageKeyType>>());\n\treadonly onDidChangeState = this._onDidChangeState.event;\n\n\tprivate readonly stateCache = new Map<string, unknown>();\n\n\tconstructor(\n\t\tprivate readonly storageService: IStorageService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\tprivate readonly container: HTMLElement\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(configurationChange => this.updateStateFromLegacySettings(configurationChange)));\n\t}\n\n\tprivate updateStateFromLegacySettings(configurationChangeEvent: IConfigurationChangeEvent): void {\n\t\tif (configurationChangeEvent.affectsConfiguration(LayoutSettings.ACTIVITY_BAR_LOCATION)) {\n\t\t\tthis.setRuntimeValueAndFire(LayoutStateKeys.ACTIVITYBAR_HIDDEN, this.isActivityBarHidden());\n\t\t}\n\n\t\tif (configurationChangeEvent.affectsConfiguration(LegacyWorkbenchLayoutSettings.STATUSBAR_VISIBLE)) {\n\t\t\tthis.setRuntimeValueAndFire(LayoutStateKeys.STATUSBAR_HIDDEN, !this.configurationService.getValue(LegacyWorkbenchLayoutSettings.STATUSBAR_VISIBLE));\n\t\t}\n\n\t\tif (configurationChangeEvent.affectsConfiguration(LegacyWorkbenchLayoutSettings.SIDEBAR_POSITION)) {\n\t\t\tthis.setRuntimeValueAndFire(LayoutStateKeys.SIDEBAR_POSITON, positionFromString(this.configurationService.getValue(LegacyWorkbenchLayoutSettings.SIDEBAR_POSITION) ?? 'left'));\n\t\t}\n\t}\n\n\tprivate updateLegacySettingsFromState<T extends StorageKeyType>(key: RuntimeStateKey<T>, value: T): void {\n\t\tconst isZenMode = this.getRuntimeValue(LayoutStateKeys.ZEN_MODE_ACTIVE);\n\t\tif (key.zenModeIgnore && isZenMode) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (key === LayoutStateKeys.ACTIVITYBAR_HIDDEN) {\n\t\t\tthis.configurationService.updateValue(LayoutSettings.ACTIVITY_BAR_LOCATION, value ? ActivityBarPosition.HIDDEN : undefined);\n\t\t} else if (key === LayoutStateKeys.STATUSBAR_HIDDEN) {\n\t\t\tthis.configurationService.updateValue(LegacyWorkbenchLayoutSettings.STATUSBAR_VISIBLE, !value);\n\t\t} else if (key === LayoutStateKeys.SIDEBAR_POSITON) {\n\t\t\tthis.configurationService.updateValue(LegacyWorkbenchLayoutSettings.SIDEBAR_POSITION, positionToString(value as Position));\n\t\t}\n\t}\n\n\tload(): void {\n\t\tlet key: keyof typeof LayoutStateKeys;\n\n\t\t// Load stored values for all keys\n\t\tfor (key in LayoutStateKeys) {\n\t\t\tconst stateKey = LayoutStateKeys[key] as WorkbenchLayoutStateKey<StorageKeyType>;\n\t\t\tconst value = this.loadKeyFromStorage(stateKey);\n\n\t\t\tif (value !== undefined) {\n\t\t\t\tthis.stateCache.set(stateKey.name, value);\n\t\t\t}\n\t\t}\n\n\t\t// Apply legacy settings\n\t\tthis.stateCache.set(LayoutStateKeys.ACTIVITYBAR_HIDDEN.name, this.isActivityBarHidden());\n\t\tthis.stateCache.set(LayoutStateKeys.STATUSBAR_HIDDEN.name, !this.configurationService.getValue(LegacyWorkbenchLayoutSettings.STATUSBAR_VISIBLE));\n\t\tthis.stateCache.set(LayoutStateKeys.SIDEBAR_POSITON.name, positionFromString(this.configurationService.getValue(LegacyWorkbenchLayoutSettings.SIDEBAR_POSITION) ?? 'left'));\n\n\t\t// Set dynamic defaults: part sizing and side bar visibility\n\t\tconst workbenchDimensions = getClientArea(this.container);\n\t\tLayoutStateKeys.PANEL_POSITION.defaultValue = positionFromString(this.configurationService.getValue(WorkbenchLayoutSettings.PANEL_POSITION) ?? 'bottom');\n\t\tLayoutStateKeys.GRID_SIZE.defaultValue = { height: workbenchDimensions.height, width: workbenchDimensions.width };\n\t\tLayoutStateKeys.SIDEBAR_SIZE.defaultValue = Math.min(300, workbenchDimensions.width / 4);\n\t\tLayoutStateKeys.AUXILIARYBAR_SIZE.defaultValue = Math.min(300, workbenchDimensions.width / 4);\n\t\tLayoutStateKeys.PANEL_SIZE.defaultValue = (this.stateCache.get(LayoutStateKeys.PANEL_POSITION.name) ?? isHorizontal(LayoutStateKeys.PANEL_POSITION.defaultValue)) ? workbenchDimensions.height / 3 : workbenchDimensions.width / 4;\n\t\tLayoutStateKeys.SIDEBAR_HIDDEN.defaultValue = this.contextService.getWorkbenchState() === WorkbenchState.EMPTY;\n\n\t\t// Apply all defaults\n\t\tfor (key in LayoutStateKeys) {\n\t\t\tconst stateKey = LayoutStateKeys[key];\n\t\t\tif (this.stateCache.get(stateKey.name) === undefined) {\n\t\t\t\tthis.stateCache.set(stateKey.name, stateKey.defaultValue);\n\t\t\t}\n\t\t}\n\n\t\t// Register for runtime key changes\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, undefined, this._register(new DisposableStore()))(storageChangeEvent => {\n\t\t\tlet key: keyof typeof LayoutStateKeys;\n\t\t\tfor (key in LayoutStateKeys) {\n\t\t\t\tconst stateKey = LayoutStateKeys[key] as WorkbenchLayoutStateKey<StorageKeyType>;\n\t\t\t\tif (stateKey instanceof RuntimeStateKey && stateKey.scope === StorageScope.PROFILE && stateKey.target === StorageTarget.USER) {\n\t\t\t\t\tif (`${LayoutStateModel.STORAGE_PREFIX}${stateKey.name}` === storageChangeEvent.key) {\n\t\t\t\t\t\tconst value = this.loadKeyFromStorage(stateKey) ?? stateKey.defaultValue;\n\t\t\t\t\t\tif (this.stateCache.get(stateKey.name) !== value) {\n\t\t\t\t\t\t\tthis.stateCache.set(stateKey.name, value);\n\t\t\t\t\t\t\tthis._onDidChangeState.fire({ key: stateKey, value });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tsave(workspace: boolean, global: boolean): void {\n\t\tlet key: keyof typeof LayoutStateKeys;\n\n\t\tconst isZenMode = this.getRuntimeValue(LayoutStateKeys.ZEN_MODE_ACTIVE);\n\n\t\tfor (key in LayoutStateKeys) {\n\t\t\tconst stateKey = LayoutStateKeys[key] as WorkbenchLayoutStateKey<StorageKeyType>;\n\t\t\tif ((workspace && stateKey.scope === StorageScope.WORKSPACE) ||\n\t\t\t\t(global && stateKey.scope === StorageScope.PROFILE)) {\n\t\t\t\tif (isZenMode && stateKey instanceof RuntimeStateKey && stateKey.zenModeIgnore) {\n\t\t\t\t\tcontinue; // Don't write out specific keys while in zen mode\n\t\t\t\t}\n\n\t\t\t\tthis.saveKeyToStorage(stateKey);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetInitializationValue<T extends StorageKeyType>(key: InitializationStateKey<T>): T {\n\t\treturn this.stateCache.get(key.name) as T;\n\t}\n\n\tsetInitializationValue<T extends StorageKeyType>(key: InitializationStateKey<T>, value: T): void {\n\t\tthis.stateCache.set(key.name, value);\n\t}\n\n\tgetRuntimeValue<T extends StorageKeyType>(key: RuntimeStateKey<T>, fallbackToSetting?: boolean): T {\n\t\tif (fallbackToSetting) {\n\t\t\tswitch (key) {\n\t\t\t\tcase LayoutStateKeys.ACTIVITYBAR_HIDDEN:\n\t\t\t\t\tthis.stateCache.set(key.name, this.isActivityBarHidden());\n\t\t\t\t\tbreak;\n\t\t\t\tcase LayoutStateKeys.STATUSBAR_HIDDEN:\n\t\t\t\t\tthis.stateCache.set(key.name, !this.configurationService.getValue(LegacyWorkbenchLayoutSettings.STATUSBAR_VISIBLE));\n\t\t\t\t\tbreak;\n\t\t\t\tcase LayoutStateKeys.SIDEBAR_POSITON:\n\t\t\t\t\tthis.stateCache.set(key.name, this.configurationService.getValue(LegacyWorkbenchLayoutSettings.SIDEBAR_POSITION) ?? 'left');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn this.stateCache.get(key.name) as T;\n\t}\n\n\tsetRuntimeValue<T extends StorageKeyType>(key: RuntimeStateKey<T>, value: T): void {\n\t\tthis.stateCache.set(key.name, value);\n\t\tconst isZenMode = this.getRuntimeValue(LayoutStateKeys.ZEN_MODE_ACTIVE);\n\n\t\tif (key.scope === StorageScope.PROFILE) {\n\t\t\tif (!isZenMode || !key.zenModeIgnore) {\n\t\t\t\tthis.saveKeyToStorage<T>(key);\n\t\t\t\tthis.updateLegacySettingsFromState(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isActivityBarHidden(): boolean {\n\t\tconst oldValue = this.configurationService.getValue<boolean | undefined>('workbench.activityBar.visible');\n\t\tif (oldValue !== undefined) {\n\t\t\treturn !oldValue;\n\t\t}\n\n\t\treturn this.configurationService.getValue(LayoutSettings.ACTIVITY_BAR_LOCATION) !== ActivityBarPosition.DEFAULT;\n\t}\n\n\tprivate setRuntimeValueAndFire<T extends StorageKeyType>(key: RuntimeStateKey<T>, value: T): void {\n\t\tconst previousValue = this.stateCache.get(key.name);\n\t\tif (previousValue === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setRuntimeValue(key, value);\n\t\tthis._onDidChangeState.fire({ key, value });\n\t}\n\n\tprivate saveKeyToStorage<T extends StorageKeyType>(key: WorkbenchLayoutStateKey<T>): void {\n\t\tconst value = this.stateCache.get(key.name) as T;\n\t\tthis.storageService.store(`${LayoutStateModel.STORAGE_PREFIX}${key.name}`, typeof value === 'object' ? JSON.stringify(value) : value, key.scope, key.target);\n\t}\n\n\tprivate loadKeyFromStorage<T extends StorageKeyType>(key: WorkbenchLayoutStateKey<T>): T | undefined {\n\t\tlet value: any = this.storageService.get(`${LayoutStateModel.STORAGE_PREFIX}${key.name}`, key.scope);\n\n\t\tif (value !== undefined) {\n\t\t\tswitch (typeof key.defaultValue) {\n\t\t\t\tcase 'boolean': value = value === 'true'; break;\n\t\t\t\tcase 'number': value = parseInt(value); break;\n\t\t\t\tcase 'object': value = JSON.parse(value); break;\n\t\t\t}\n\t\t}\n\n\t\treturn value as T | undefined;\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["LayoutClasses", "position", "editors", "i", "size", "WorkbenchLayoutSettings", "LegacyWorkbenchLayoutSettings", "key"]
}
