{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/composite.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction, IActionRunner, ActionRunner } from '../../base/common/actions.js';\nimport { Component } from '../common/component.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { IComposite, ICompositeControl } from '../common/composite.js';\nimport { Event, Emitter } from '../../base/common/event.js';\nimport { IThemeService } from '../../platform/theme/common/themeService.js';\nimport { IConstructorSignature, IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nimport { trackFocus, Dimension, IDomPosition } from '../../base/browser/dom.js';\nimport { IStorageService } from '../../platform/storage/common/storage.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nimport { assertIsDefined } from '../../base/common/types.js';\nimport { IActionViewItem } from '../../base/browser/ui/actionbar/actionbar.js';\nimport { MenuId } from '../../platform/actions/common/actions.js';\nimport { IBoundarySashes } from '../../base/browser/ui/sash/sash.js';\nimport { IBaseActionViewItemOptions } from '../../base/browser/ui/actionbar/actionViewItems.js';\n\n/**\n * Composites are layed out in the sidebar and panel part of the workbench. At a time only one composite\n * can be open in the sidebar, and only one composite can be open in the panel.\n *\n * Each composite has a minimized representation that is good enough to provide some\n * information about the state of the composite data.\n *\n * The workbench will keep a composite alive after it has been created and show/hide it based on\n * user interaction. The lifecycle of a composite goes in the order create(), setVisible(true|false),\n * layout(), focus(), dispose(). During use of the workbench, a composite will often receive a setVisible,\n * layout and focus call, but only one create and dispose call.\n */\nexport abstract class Composite extends Component implements IComposite {\n\n\tprivate readonly _onTitleAreaUpdate = this._register(new Emitter<void>());\n\treadonly onTitleAreaUpdate = this._onTitleAreaUpdate.event;\n\n\tprotected _onDidFocus: Emitter<void> | undefined;\n\tget onDidFocus(): Event<void> {\n\t\tif (!this._onDidFocus) {\n\t\t\tthis._onDidFocus = this.registerFocusTrackEvents().onDidFocus;\n\t\t}\n\n\t\treturn this._onDidFocus.event;\n\t}\n\n\tprivate _onDidBlur: Emitter<void> | undefined;\n\tget onDidBlur(): Event<void> {\n\t\tif (!this._onDidBlur) {\n\t\t\tthis._onDidBlur = this.registerFocusTrackEvents().onDidBlur;\n\t\t}\n\n\t\treturn this._onDidBlur.event;\n\t}\n\n\tprivate _hasFocus = false;\n\thasFocus(): boolean {\n\t\treturn this._hasFocus;\n\t}\n\n\tprivate registerFocusTrackEvents(): { onDidFocus: Emitter<void>; onDidBlur: Emitter<void> } {\n\t\tconst container = assertIsDefined(this.getContainer());\n\t\tconst focusTracker = this._register(trackFocus(container));\n\n\t\tconst onDidFocus = this._onDidFocus = this._register(new Emitter<void>());\n\t\tthis._register(focusTracker.onDidFocus(() => {\n\t\t\tthis._hasFocus = true;\n\n\t\t\tonDidFocus.fire();\n\t\t}));\n\n\t\tconst onDidBlur = this._onDidBlur = this._register(new Emitter<void>());\n\t\tthis._register(focusTracker.onDidBlur(() => {\n\t\t\tthis._hasFocus = false;\n\n\t\t\tonDidBlur.fire();\n\t\t}));\n\n\t\treturn { onDidFocus, onDidBlur };\n\t}\n\n\tprotected actionRunner: IActionRunner | undefined;\n\n\tprivate visible = false;\n\tprivate parent: HTMLElement | undefined;\n\n\tconstructor(\n\t\tid: string,\n\t\tprotected readonly telemetryService: ITelemetryService,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService\n\t) {\n\t\tsuper(id, themeService, storageService);\n\t}\n\n\tgetTitle(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Called to create this composite on the provided parent. This method is only\n\t * called once during the lifetime of the workbench.\n\t * Note that DOM-dependent calculations should be performed from the setVisible()\n\t * call. Only then the composite will be part of the DOM.\n\t */\n\tcreate(parent: HTMLElement): void {\n\t\tthis.parent = parent;\n\t}\n\n\t/**\n\t * Returns the container this composite is being build in.\n\t */\n\tgetContainer(): HTMLElement | undefined {\n\t\treturn this.parent;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Called to indicate that the composite has become visible or hidden. This method\n\t * is called more than once during workbench lifecycle depending on the user interaction.\n\t * The composite will be on-DOM if visible is set to true and off-DOM otherwise.\n\t *\n\t * Typically this operation should be fast though because setVisible might be called many times during a session.\n\t * If there is a long running operation it is fine to have it running in the background asyncly and return before.\n\t */\n\tsetVisible(visible: boolean): void {\n\t\tif (this.visible !== !!visible) {\n\t\t\tthis.visible = visible;\n\t\t}\n\t}\n\n\t/**\n\t * Called when this composite should receive keyboard focus.\n\t */\n\tfocus(): void {\n\t\t// Subclasses can implement\n\t}\n\n\t/**\n\t * Layout the contents of this composite using the provided dimensions.\n\t */\n\tabstract layout(dimension: Dimension, position?: IDomPosition): void;\n\n\t/**\n\t * Set boundary sashes for this composite. These are used to create\n\t * draggable corner areas with inner sashes.\n\t */\n\tabstract setBoundarySashes(sashes: IBoundarySashes): void;\n\n\t/**\n\t *\n\t * @returns the action runner for this composite\n\t */\n\tgetMenuIds(): readonly MenuId[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns an array of actions to show in the action bar of the composite.\n\t */\n\tgetActions(): readonly IAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns an array of actions to show in the action bar of the composite\n\t * in a less prominent way then action from getActions.\n\t */\n\tgetSecondaryActions(): readonly IAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns an array of actions to show in the context menu of the composite\n\t */\n\tgetContextMenuActions(): readonly IAction[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * For any of the actions returned by this composite, provide an IActionViewItem in\n\t * cases where the implementor of the composite wants to override the presentation\n\t * of an action. Returns undefined to indicate that the action is not rendered through\n\t * an action item.\n\t */\n\tgetActionViewItem(action: IAction, options: IBaseActionViewItemOptions): IActionViewItem | undefined {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Provide a context to be passed to the toolbar.\n\t */\n\tgetActionsContext(): unknown {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the instance of IActionRunner to use with this composite for the\n\t * composite tool bar.\n\t */\n\tgetActionRunner(): IActionRunner {\n\t\tif (!this.actionRunner) {\n\t\t\tthis.actionRunner = this._register(new ActionRunner());\n\t\t}\n\n\t\treturn this.actionRunner;\n\t}\n\n\t/**\n\t * Method for composite implementors to indicate to the composite container that the title or the actions\n\t * of the composite have changed. Calling this method will cause the container to ask for title (getTitle())\n\t * and actions (getActions(), getSecondaryActions()) if the composite is visible or the next time the composite\n\t * gets visible.\n\t */\n\tprotected updateTitleArea(): void {\n\t\tthis._onTitleAreaUpdate.fire();\n\t}\n\n\t/**\n\t * Returns true if this composite is currently visible and false otherwise.\n\t */\n\tisVisible(): boolean {\n\t\treturn this.visible;\n\t}\n\n\t/**\n\t * Returns the underlying composite control or `undefined` if it is not accessible.\n\t */\n\tgetControl(): ICompositeControl | undefined {\n\t\treturn undefined;\n\t}\n}\n\n/**\n * A composite descriptor is a lightweight descriptor of a composite in the workbench.\n */\nexport abstract class CompositeDescriptor<T extends Composite> {\n\n\tconstructor(\n\t\tprivate readonly ctor: IConstructorSignature<T>,\n\t\treadonly id: string,\n\t\treadonly name: string,\n\t\treadonly cssClass?: string,\n\t\treadonly order?: number,\n\t\treadonly requestedIndex?: number,\n\t) { }\n\n\tinstantiate(instantiationService: IInstantiationService): T {\n\t\treturn instantiationService.createInstance(this.ctor);\n\t}\n}\n\nexport abstract class CompositeRegistry<T extends Composite> extends Disposable {\n\n\tprivate readonly _onDidRegister = this._register(new Emitter<CompositeDescriptor<T>>());\n\treadonly onDidRegister = this._onDidRegister.event;\n\n\tprivate readonly _onDidDeregister = this._register(new Emitter<CompositeDescriptor<T>>());\n\treadonly onDidDeregister = this._onDidDeregister.event;\n\n\tprivate readonly composites: CompositeDescriptor<T>[] = [];\n\n\tprotected registerComposite(descriptor: CompositeDescriptor<T>): void {\n\t\tif (this.compositeById(descriptor.id)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.composites.push(descriptor);\n\t\tthis._onDidRegister.fire(descriptor);\n\t}\n\n\tprotected deregisterComposite(id: string): void {\n\t\tconst descriptor = this.compositeById(id);\n\t\tif (!descriptor) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.composites.splice(this.composites.indexOf(descriptor), 1);\n\t\tthis._onDidDeregister.fire(descriptor);\n\t}\n\n\tgetComposite(id: string): CompositeDescriptor<T> | undefined {\n\t\treturn this.compositeById(id);\n\t}\n\n\tprotected getComposites(): CompositeDescriptor<T>[] {\n\t\treturn this.composites.slice(0);\n\t}\n\n\tprivate compositeById(id: string): CompositeDescriptor<T> | undefined {\n\t\treturn this.composites.find(composite => composite.id === id);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
