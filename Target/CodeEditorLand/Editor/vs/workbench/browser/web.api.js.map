{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/web.api.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { PerformanceMark } from '../../base/common/performance.js';\nimport type { UriComponents, URI } from '../../base/common/uri.js';\nimport type { IWebSocketFactory } from '../../platform/remote/browser/browserSocketFactory.js';\nimport type { IURLCallbackProvider } from '../services/url/browser/urlService.js';\nimport type { LogLevel } from '../../platform/log/common/log.js';\nimport type { IUpdateProvider } from '../services/update/browser/updateService.js';\nimport type { Event } from '../../base/common/event.js';\nimport type { IProductConfiguration } from '../../base/common/product.js';\nimport type { ISecretStorageProvider } from '../../platform/secrets/common/secrets.js';\nimport type { TunnelProviderFeatures } from '../../platform/tunnel/common/tunnel.js';\nimport type { IProgress, IProgressCompositeOptions, IProgressDialogOptions, IProgressNotificationOptions, IProgressOptions, IProgressStep, IProgressWindowOptions } from '../../platform/progress/common/progress.js';\nimport type { ITextEditorOptions } from '../../platform/editor/common/editor.js';\nimport type { IFolderToOpen, IWorkspaceToOpen } from '../../platform/window/common/window.js';\nimport type { EditorGroupLayout } from '../services/editor/common/editorGroupsService.js';\nimport type { IEmbedderTerminalOptions } from '../services/terminal/common/embedderTerminalService.js';\nimport type { IAuthenticationProvider } from '../services/authentication/common/authentication.js';\n\n/**\n * The `IWorkbench` interface is the API facade for web embedders\n * to call into the workbench.\n *\n * Note: Changes to this interface need to be announced and adopted.\n */\nexport interface IWorkbench {\n\n\tcommands: {\n\n\t\t/**\n\t\t * Allows to execute any command if known with the provided arguments.\n\t\t *\n\t\t * @param command Identifier of the command to execute.\n\t\t * @param rest Parameters passed to the command function.\n\t\t * @return A promise that resolves to the returned value of the given command.\n\t\t */\n\t\texecuteCommand(command: string, ...args: any[]): Promise<unknown>;\n\t};\n\n\tlogger: {\n\n\t\t/**\n\t\t * Logging for embedder.\n\t\t *\n\t\t * @param level The log level of the message to be printed.\n\t\t * @param message Message to be printed.\n\t\t */\n\t\tlog(level: LogLevel, message: string): void;\n\t};\n\n\tenv: {\n\n\t\t/**\n\t\t * @returns the scheme to use for opening the associated desktop\n\t\t * experience via protocol handler.\n\t\t */\n\t\tgetUriScheme(): Promise<string>;\n\n\t\t/**\n\t\t * Retrieve performance marks that have been collected during startup. This function\n\t\t * returns tuples of source and marks. A source is a dedicated context, like\n\t\t * the renderer or an extension host.\n\t\t *\n\t\t * *Note* that marks can be collected on different machines and in different processes\n\t\t * and that therefore \"different clocks\" are used. So, comparing `startTime`-properties\n\t\t * across contexts should be taken with a grain of salt.\n\t\t *\n\t\t * @returns A promise that resolves to tuples of source and marks.\n\t\t */\n\t\tretrievePerformanceMarks(): Promise<[string, readonly PerformanceMark[]][]>;\n\n\t\t/**\n\t\t * Allows to open a `URI` with the standard opener service of the\n\t\t * workbench.\n\t\t */\n\t\topenUri(target: URI): Promise<boolean>;\n\t};\n\n\twindow: {\n\n\t\t/**\n\t\t * Show progress in the editor. Progress is shown while running the given callback\n\t\t * and while the promise it returned isn't resolved nor rejected.\n\t\t *\n\t\t * @param task A callback returning a promise.\n\t\t * @return A promise that resolves to the returned value of the given task result.\n\t\t */\n\t\twithProgress<R>(\n\t\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>\n\t\t): Promise<R>;\n\n\t\t/**\n\t\t * Creates a terminal with limited capabilities that is intended for\n\t\t * writing output from the embedder before the workbench has finished\n\t\t * loading. When an embedder terminal is created it will automatically\n\t\t * show to the user.\n\t\t *\n\t\t * @param options The definition of the terminal, this is similar to\n\t\t * `ExtensionTerminalOptions` in the extension API.\n\t\t */\n\t\tcreateTerminal(options: IEmbedderTerminalOptions): Promise<void>;\n\n\t\t/**\n\t\t * Show an information message to users. Optionally provide an array of items which will be presented as\n\t\t * clickable buttons.\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\tshowInformationMessage<T extends string>(message: string, ...items: T[]): Promise<T | undefined>;\n\t};\n\n\tworkspace: {\n\t\t/**\n\t\t * Resolves once the remote authority has been resolved.\n\t\t */\n\t\tdidResolveRemoteAuthority(): Promise<void>;\n\n\t\t/**\n\t\t * Forwards a port. If the current embedder implements a tunnelFactory then that will be used to make the tunnel.\n\t\t * By default, openTunnel only support localhost; however, a tunnelFactory can be used to support other ips.\n\t\t *\n\t\t * @throws When run in an environment without a remote.\n\t\t *\n\t\t * @param tunnelOptions The `localPort` is a suggestion only. If that port is not available another will be chosen.\n\t\t */\n\t\topenTunnel(tunnelOptions: ITunnelOptions): Promise<ITunnel>;\n\t};\n\n\t/**\n\t * Triggers shutdown of the workbench programmatically. After this method is\n\t * called, the workbench is not usable anymore and the page needs to reload\n\t * or closed.\n\t *\n\t * This will also remove any `beforeUnload` handlers that would bring up a\n\t * confirmation dialog.\n\t *\n\t * The returned promise should be awaited on to ensure any data to persist\n\t * has been persisted.\n\t */\n\tshutdown: () => Promise<void>;\n}\n\nexport interface IWorkbenchConstructionOptions {\n\n\t//#region Connection related configuration\n\n\t/**\n\t * The remote authority is the IP:PORT from where the workbench is served\n\t * from. It is for example being used for the websocket connections as address.\n\t */\n\treadonly remoteAuthority?: string;\n\n\t/**\n\t * The server base path is the path where the workbench is served from.\n\t * The path must be absolute (start with a slash).\n\t * Corresponds to option `server-base-path` on the server side.\n\t */\n\treadonly serverBasePath?: string;\n\n\t/**\n\t * The connection token to send to the server.\n\t */\n\treadonly connectionToken?: string | Promise<string>;\n\n\t/**\n\t * An endpoint to serve iframe content (\"webview\") from. This is required\n\t * to provide full security isolation from the workbench host.\n\t */\n\treadonly webviewEndpoint?: string;\n\n\t/**\n\t * A factory for web sockets.\n\t */\n\treadonly webSocketFactory?: IWebSocketFactory;\n\n\t/**\n\t * A provider for resource URIs.\n\t *\n\t * *Note*: This will only be invoked after the `connectionToken` is resolved.\n\t */\n\treadonly resourceUriProvider?: IResourceUriProvider;\n\n\t/**\n\t * Resolves an external uri before it is opened.\n\t */\n\treadonly resolveExternalUri?: IExternalUriResolver;\n\n\t/**\n\t * A provider for supplying tunneling functionality,\n\t * such as creating tunnels and showing candidate ports to forward.\n\t */\n\treadonly tunnelProvider?: ITunnelProvider;\n\n\t/**\n\t * Endpoints to be used for proxying authentication code exchange calls in the browser.\n\t */\n\treadonly codeExchangeProxyEndpoints?: { [providerId: string]: string };\n\n\t/**\n\t * The identifier of an edit session associated with the current workspace.\n\t */\n\treadonly editSessionId?: string;\n\n\t/**\n\t * Resource delegation handler that allows for loading of resources when\n\t * using remote resolvers.\n\t *\n\t * This is exclusive with {@link resourceUriProvider}. `resourceUriProvider`\n\t * should be used if a {@link webSocketFactory} is used, and will be preferred.\n\t */\n\treadonly remoteResourceProvider?: IRemoteResourceProvider;\n\n\t//#endregion\n\n\n\t//#region Workbench configuration\n\n\t/**\n\t * A handler for opening workspaces and providing the initial workspace.\n\t */\n\treadonly workspaceProvider?: IWorkspaceProvider;\n\n\t/**\n\t * Settings sync options\n\t */\n\treadonly settingsSyncOptions?: ISettingsSyncOptions;\n\n\t/**\n\t * The secret storage provider to store and retrieve secrets.\n\t */\n\treadonly secretStorageProvider?: ISecretStorageProvider;\n\n\t/**\n\t * Additional builtin extensions those cannot be uninstalled but only be disabled.\n\t * It can be one of the following:\n\t * \t- an extension in the Marketplace\n\t * \t- location of the extension where it is hosted.\n\t */\n\treadonly additionalBuiltinExtensions?: readonly (MarketplaceExtension | UriComponents)[];\n\n\t/**\n\t * List of extensions to be enabled if they are installed.\n\t * Note: This will not install extensions if not installed.\n\t */\n\treadonly enabledExtensions?: readonly ExtensionId[];\n\n\t/**\n\t * Additional domains allowed to open from the workbench without the\n\t * link protection popup.\n\t */\n\treadonly additionalTrustedDomains?: string[];\n\n\t/**\n\t * Enable workspace trust feature for the current window\n\t */\n\treadonly enableWorkspaceTrust?: boolean;\n\n\t/**\n\t * Urls that will be opened externally that are allowed access\n\t * to the opener window. This is primarily used to allow\n\t * `window.close()` to be called from the newly opened window.\n\t */\n\treadonly openerAllowedExternalUrlPrefixes?: string[];\n\n\t/**\n\t * Support for URL callbacks.\n\t */\n\treadonly urlCallbackProvider?: IURLCallbackProvider;\n\n\t/**\n\t * Support adding additional properties to telemetry.\n\t */\n\treadonly resolveCommonTelemetryProperties?: ICommonTelemetryPropertiesResolver;\n\n\t/**\n\t * A set of optional commands that should be registered with the commands\n\t * registry.\n\t *\n\t * Note: commands can be called from extensions if the identifier is known!\n\t */\n\treadonly commands?: readonly ICommand[];\n\n\t/**\n\t * Optional default layout to apply on first time the workspace is opened\n\t * (unless `force` is specified). This includes visibility of views and\n\t * editors including editor grid layout.\n\t */\n\treadonly defaultLayout?: IDefaultLayout;\n\n\t/**\n\t * Optional configuration default overrides contributed to the workbench.\n\t */\n\treadonly configurationDefaults?: Record<string, any>;\n\n\t//#endregion\n\n\t//#region Profile options\n\n\t/**\n\t * Profile to use for the workbench.\n\t */\n\treadonly profile?: { readonly name: string; readonly contents?: string | UriComponents };\n\n\t/**\n\t * URI of the profile to preview.\n\t */\n\treadonly profileToPreview?: UriComponents;\n\n\t//#endregion\n\n\n\t//#region Update/Quality related\n\n\t/**\n\t * Support for update reporting\n\t */\n\treadonly updateProvider?: IUpdateProvider;\n\n\t/**\n\t * Support for product quality switching\n\t */\n\treadonly productQualityChangeHandler?: IProductQualityChangeHandler;\n\n\t//#endregion\n\n\n\t//#region Branding\n\n\t/**\n\t * Optional home indicator to appear above the hamburger menu in the activity bar.\n\t */\n\treadonly homeIndicator?: IHomeIndicator;\n\n\t/**\n\t * Optional welcome banner to appear above the workbench. Can be dismissed by the\n\t * user.\n\t */\n\treadonly welcomeBanner?: IWelcomeBanner;\n\n\t/**\n\t * Optional override for the product configuration properties.\n\t */\n\treadonly productConfiguration?: Partial<IProductConfiguration>;\n\n\t/**\n\t * Optional override for properties of the window indicator in the status bar.\n\t */\n\treadonly windowIndicator?: IWindowIndicator;\n\n\t/**\n\t * Specifies the default theme type (LIGHT, DARK..) and allows to provide initial colors that are shown\n\t * until the color theme that is specified in the settings (`editor.colorTheme`) is loaded and applied.\n\t * Once there are persisted colors from a last run these will be used.\n\t *\n\t * The idea is that the colors match the main colors from the theme defined in the `configurationDefaults`.\n\t */\n\treadonly initialColorTheme?: IInitialColorTheme;\n\n\t/**\n\t *  Welcome dialog. Can be dismissed by the user.\n\t */\n\treadonly welcomeDialog?: IWelcomeDialog;\n\n\t//#endregion\n\n\n\t//#region IPC\n\n\treadonly messagePorts?: ReadonlyMap<ExtensionId, MessagePort>;\n\n\t//#endregion\n\n\t//#region Authentication Providers\n\n\t/**\n\t * Optional authentication provider contributions. These take precedence over\n\t * any authentication providers contributed via extensions.\n\t */\n\treadonly authenticationProviders?: readonly IAuthenticationProvider[];\n\n\t//#endregion\n\n\t//#region Development options\n\n\treadonly developmentOptions?: IDevelopmentOptions;\n\n\t//#endregion\n\n}\n\n\n/**\n * A workspace to open in the workbench can either be:\n * - a workspace file with 0-N folders (via `workspaceUri`)\n * - a single folder (via `folderUri`)\n * - empty (via `undefined`)\n */\nexport type IWorkspace = IWorkspaceToOpen | IFolderToOpen | undefined;\n\nexport interface IWorkspaceProvider {\n\n\t/**\n\t * The initial workspace to open.\n\t */\n\treadonly workspace: IWorkspace;\n\n\t/**\n\t * Arbitrary payload from the `IWorkspaceProvider.open` call.\n\t */\n\treadonly payload?: object;\n\n\t/**\n\t * Return `true` if the provided [workspace](#IWorkspaceProvider.workspace) is trusted, `false` if not trusted, `undefined` if unknown.\n\t */\n\treadonly trusted: boolean | undefined;\n\n\t/**\n\t * Asks to open a workspace in the current or a new window.\n\t *\n\t * @param workspace the workspace to open.\n\t * @param options optional options for the workspace to open.\n\t * - `reuse`: whether to open inside the current window or a new window\n\t * - `payload`: arbitrary payload that should be made available\n\t * to the opening window via the `IWorkspaceProvider.payload` property.\n\t * @param payload optional payload to send to the workspace to open.\n\t *\n\t * @returns true if successfully opened, false otherwise.\n\t */\n\topen(workspace: IWorkspace, options?: { reuse?: boolean; payload?: object }): Promise<boolean>;\n}\n\nexport interface IResourceUriProvider {\n\t(uri: URI): URI;\n}\n\n/**\n * The identifier of an extension in the format: `PUBLISHER.NAME`. For example: `vscode.csharp`\n */\nexport type ExtensionId = string;\n\nexport type MarketplaceExtension = ExtensionId | { readonly id: ExtensionId; preRelease?: boolean; migrateStorageFrom?: ExtensionId };\n\nexport interface ICommonTelemetryPropertiesResolver {\n\t(): { [key: string]: any };\n}\n\nexport interface IExternalUriResolver {\n\t(uri: URI): Promise<URI>;\n}\n\nexport interface IExternalURLOpener {\n\n\t/**\n\t * Overrides the behavior when an external URL is about to be opened.\n\t * Returning false means that the URL wasn't handled, and the default\n\t * handling behavior should be used: `window.open(href, '_blank', 'noopener');`\n\t *\n\t * @returns true if URL was handled, false otherwise.\n\t */\n\topenExternal(href: string): boolean | Promise<boolean>;\n}\n\nexport interface ITunnelProvider {\n\n\t/**\n\t * Support for creating tunnels.\n\t */\n\ttunnelFactory?: ITunnelFactory;\n\n\t/**\n\t * Support for filtering candidate ports.\n\t */\n\tshowPortCandidate?: IShowPortCandidate;\n\n\t/**\n\t * The features that the tunnel provider supports.\n\t */\n\tfeatures?: TunnelProviderFeatures;\n}\n\nexport interface ITunnelFactory {\n\t(tunnelOptions: ITunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<ITunnel> | undefined;\n}\n\nexport interface ITunnelOptions {\n\n\tremoteAddress: { port: number; host: string };\n\n\t/**\n\t * The desired local port. If this port can't be used, then another will be chosen.\n\t */\n\tlocalAddressPort?: number;\n\n\tlabel?: string;\n\n\tprivacy?: string;\n\n\tprotocol?: string;\n}\n\nexport interface TunnelCreationOptions {\n\n\t/**\n\t * True when the local operating system will require elevation to use the requested local port.\n\t */\n\televationRequired?: boolean;\n}\n\nexport interface ITunnel {\n\n\tremoteAddress: { port: number; host: string };\n\n\t/**\n\t * The complete local address(ex. localhost:1234)\n\t */\n\tlocalAddress: string;\n\n\tprivacy?: string;\n\n\t/**\n\t * If protocol is not provided, it is assumed to be http, regardless of the localAddress\n\t */\n\tprotocol?: string;\n\n\t/**\n\t * Implementers of Tunnel should fire onDidDispose when dispose is called.\n\t */\n\tonDidDispose: Event<void>;\n\n\tdispose(): Promise<void> | void;\n}\n\nexport interface IShowPortCandidate {\n\t(host: string, port: number, detail: string): Promise<boolean>;\n}\n\nexport enum Menu {\n\tCommandPalette,\n\tStatusBarWindowIndicatorMenu,\n}\n\nexport interface ICommand {\n\n\t/**\n\t * An identifier for the command. Commands can be executed from extensions\n\t * using the `vscode.commands.executeCommand` API using that command ID.\n\t */\n\tid: string;\n\n\t/**\n\t * The optional label of the command. If provided, the command will appear\n\t * in the command palette.\n\t */\n\tlabel?: string;\n\n\t/**\n\t * The optional menus to append this command to. Only valid if `label` is\n\t * provided as well.\n\t * @default Menu.CommandPalette\n\t */\n\tmenu?: Menu | Menu[];\n\n\t/**\n\t * A function that is being executed with any arguments passed over. The\n\t * return type will be send back to the caller.\n\t *\n\t * Note: arguments and return type should be serializable so that they can\n\t * be exchanged across processes boundaries.\n\t */\n\thandler: (...args: any[]) => unknown;\n}\n\nexport interface IHomeIndicator {\n\n\t/**\n\t * The link to open when clicking the home indicator.\n\t */\n\thref: string;\n\n\t/**\n\t * The icon name for the home indicator. This needs to be one of the existing\n\t * icons from our Codicon icon set. For example `code`.\n\t */\n\ticon: string;\n\n\t/**\n\t * A tooltip that will appear while hovering over the home indicator.\n\t */\n\ttitle: string;\n}\n\nexport interface IWelcomeBanner {\n\n\t/**\n\t * Welcome banner message to appear as text.\n\t */\n\tmessage: string;\n\n\t/**\n\t * Optional icon for the banner. This is either the URL to an icon to use\n\t * or the name of one of the existing icons from our Codicon icon set.\n\t *\n\t * If not provided a default icon will be used.\n\t */\n\ticon?: string | UriComponents;\n\n\t/**\n\t * Optional actions to appear as links after the welcome banner message.\n\t */\n\tactions?: IWelcomeLinkAction[];\n}\n\nexport interface IWelcomeLinkAction {\n\n\t/**\n\t * The link to open when clicking. Supports command invocation when\n\t * using the `command:<commandId>` value.\n\t */\n\thref: string;\n\n\t/**\n\t * The label to show for the action link.\n\t */\n\tlabel: string;\n\n\t/**\n\t * A tooltip that will appear while hovering over the action link.\n\t */\n\ttitle?: string;\n}\n\nexport interface IWindowIndicator {\n\n\t/**\n\t * Triggering this event will cause the window indicator to update.\n\t */\n\treadonly onDidChange?: Event<void>;\n\n\t/**\n\t * Label of the window indicator may include octicons\n\t * e.g. `$(remote) label`\n\t */\n\tlabel: string;\n\n\t/**\n\t * Tooltip of the window indicator should not include\n\t * octicons and be descriptive.\n\t */\n\ttooltip: string;\n\n\t/**\n\t * If provided, overrides the default command that\n\t * is executed when clicking on the window indicator.\n\t */\n\tcommand?: string;\n}\n\nexport enum ColorScheme {\n\tDARK = 'dark',\n\tLIGHT = 'light',\n\tHIGH_CONTRAST_LIGHT = 'hcLight',\n\tHIGH_CONTRAST_DARK = 'hcDark'\n}\n\nexport interface IInitialColorTheme {\n\n\t/**\n\t * Initial color theme type.\n\t */\n\treadonly themeType: ColorScheme;\n\n\t/**\n\t * A list of workbench colors to apply initially.\n\t */\n\treadonly colors?: { [colorId: string]: string };\n}\n\nexport interface IWelcomeDialog {\n\n\t/**\n\t * Unique identifier of the welcome dialog. The identifier will be used to determine\n\t * if the dialog has been previously displayed.\n\t */\n\tid: string;\n\n\t/**\n\t * Title of the welcome dialog.\n\t */\n\ttitle: string;\n\n\t/**\n\t * Button text of the welcome dialog.\n\t */\n\tbuttonText: string;\n\n\t/**\n\t * Button command to execute from the welcome dialog.\n\t */\n\tbuttonCommand: string;\n\n\t/**\n\t * Message text for the welcome dialog.\n\t */\n\tmessage: string;\n\n\t/**\n\t * Media to include in the welcome dialog.\n\t */\n\tmedia: { altText: string; path: string };\n}\n\nexport interface IDefaultView {\n\n\t/**\n\t * The identifier of the view to show by default.\n\t */\n\treadonly id: string;\n}\n\nexport interface IDefaultEditor {\n\n\t/**\n\t * The location of the editor in the editor grid layout.\n\t * Editors are layed out in editor groups and the view\n\t * column is counted from top left to bottom right in\n\t * the order of appearance beginning with `1`.\n\t *\n\t * If not provided, the editor will open in the active\n\t * group.\n\t */\n\treadonly viewColumn?: number;\n\n\t/**\n\t * The resource of the editor to open.\n\t */\n\treadonly uri: UriComponents;\n\n\t/**\n\t * Optional extra options like which editor\n\t * to use or which text to select.\n\t */\n\treadonly options?: ITextEditorOptions;\n\n\t/**\n\t * Will not open an untitled editor in case\n\t * the resource does not exist.\n\t */\n\treadonly openOnlyIfExists?: boolean;\n}\n\nexport interface IDefaultLayout {\n\n\t/**\n\t * A list of views to show by default.\n\t */\n\treadonly views?: IDefaultView[];\n\n\t/**\n\t * A list of editors to show by default.\n\t */\n\treadonly editors?: IDefaultEditor[];\n\n\t/**\n\t * The layout to use for the workbench.\n\t */\n\treadonly layout?: {\n\n\t\t/**\n\t\t * The layout of the editor area.\n\t\t */\n\t\treadonly editors?: EditorGroupLayout;\n\t};\n\n\t/**\n\t * Forces this layout to be applied even if this isn't\n\t * the first time the workspace has been opened\n\t */\n\treadonly force?: boolean;\n}\n\nexport interface IProductQualityChangeHandler {\n\n\t/**\n\t * Handler is being called when the user wants to switch between\n\t * `insider` or `stable` product qualities.\n\t */\n\t(newQuality: 'insider' | 'stable'): void;\n}\n\n/**\n * Settings sync options\n */\nexport interface ISettingsSyncOptions {\n\n\t/**\n\t * Is settings sync enabled\n\t */\n\treadonly enabled: boolean;\n\n\t/**\n\t * Version of extensions sync state.\n\t * Extensions sync state will be reset if version is provided and different from previous version.\n\t */\n\treadonly extensionsSyncStateVersion?: string;\n\n\t/**\n\t * Handler is being called when the user changes Settings Sync enablement.\n\t */\n\tenablementHandler?(enablement: boolean, authenticationProvider: string): void;\n\n\t/**\n\t * Authentication provider\n\t */\n\treadonly authenticationProvider?: {\n\t\t/**\n\t\t * Unique identifier of the authentication provider.\n\t\t */\n\t\treadonly id: string;\n\n\t\t/**\n\t\t * Called when the user wants to signin to Settings Sync using the given authentication provider.\n\t\t * The returned promise should resolve to the authentication session id.\n\t\t */\n\t\tsignIn(): Promise<string>;\n\t};\n}\n\nexport interface IDevelopmentOptions {\n\n\t/**\n\t * Current logging level. Default is `LogLevel.Info`.\n\t */\n\treadonly logLevel?: LogLevel;\n\n\t/**\n\t * Extension log level.\n\t */\n\treadonly extensionLogLevel?: [string, LogLevel][];\n\n\t/**\n\t * Location of a module containing extension tests to run once the workbench is open.\n\t */\n\treadonly extensionTestsPath?: UriComponents;\n\n\t/**\n\t * Add extensions under development.\n\t */\n\treadonly extensions?: readonly UriComponents[];\n\n\t/**\n\t * Whether to enable the smoke test driver.\n\t */\n\treadonly enableSmokeTestDriver?: boolean;\n}\n\n/**\n * Utility provided in the {@link WorkbenchOptions} which allows loading resources\n * when remote resolvers are used in the web.\n */\nexport interface IRemoteResourceProvider {\n\t/**\n\t * Path the workbench should delegate requests to. The embedder should\n\t * install a service worker on this path and emit {@link onDidReceiveRequest}\n\t * events when requests come in for that path.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * Event that should fire when requests are made on the {@link pathPrefix}.\n\t */\n\treadonly onDidReceiveRequest: Event<IRemoteResourceRequest>;\n}\n\n/**\n * todo@connor4312: this may eventually gain more properties like method and\n * headers, but for now we only deal with GET requests.\n */\nexport interface IRemoteResourceRequest {\n\t/**\n\t * Request URI. Generally will begin with the current\n\t * origin and {@link IRemoteResourceProvider.pathPrefix}.\n\t */\n\turi: URI;\n\n\t/**\n\t * A method called by the editor to issue a response to the request.\n\t */\n\trespondWith(statusCode: number, body: Uint8Array, headers: Record<string, string>): void;\n}\n"],
  "mappings": "AA8hBO,IAAK,OAAL,kBAAKA,UAAL;AACN,EAAAA,YAAA;AACA,EAAAA,YAAA;AAFW,SAAAA;AAAA,GAAA;AAyHL,IAAK,cAAL,kBAAKC,iBAAL;AACN,EAAAA,aAAA,UAAO;AACP,EAAAA,aAAA,WAAQ;AACR,EAAAA,aAAA,yBAAsB;AACtB,EAAAA,aAAA,wBAAqB;AAJV,SAAAA;AAAA,GAAA;",
  "names": ["Menu", "ColorScheme"]
}
