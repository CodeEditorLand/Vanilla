var m=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var p=(d,n,e,o)=>{for(var t=o>1?void 0:o?b(n,e):n,r=d.length-1,l;r>=0;r--)(l=d[r])&&(t=(o?l(n,e,t):l(t))||t);return o&&t&&m(n,e,t),t},u=(d,n)=>(e,o)=>n(e,o,d);import{Action as i,Separator as v}from"../../../base/common/actions.js";import{localize as a}from"../../../nls.js";import{IWorkbenchLayoutService as C}from"../../services/layout/browser/layoutService.js";import{IContextMenuService as f}from"../../../platform/contextview/browser/contextView.js";import{Disposable as h}from"../../../base/common/lifecycle.js";import{EventHelper as x,addDisposableListener as y,getActiveDocument as c,getWindow as S,isHTMLElement as A,isHTMLInputElement as w,isHTMLTextAreaElement as g}from"../../../base/browser/dom.js";import{WorkbenchPhase as I,registerWorkbenchContribution2 as E}from"../../common/contributions.js";import{isNative as M}from"../../../base/common/platform.js";import{IClipboardService as L}from"../../../platform/clipboard/common/clipboardService.js";import{StandardMouseEvent as k}from"../../../base/browser/mouseEvent.js";import{Event as W}from"../../../base/common/event.js";import{Lazy as D}from"../../../base/common/lazy.js";let s=class extends h{constructor(e,o,t){super();this.layoutService=e;this.contextMenuService=o;this.clipboardService=t;this.registerListeners()}static ID="workbench.contrib.textInputActionsProvider";textInputActions=new D(()=>this.createActions());createActions(){return[new i("undo",a("undo","Undo"),void 0,!0,async()=>c().execCommand("undo")),new i("redo",a("redo","Redo"),void 0,!0,async()=>c().execCommand("redo")),new v,new i("editor.action.clipboardCutAction",a("cut","Cut"),void 0,!0,async()=>c().execCommand("cut")),new i("editor.action.clipboardCopyAction",a("copy","Copy"),void 0,!0,async()=>c().execCommand("copy")),new i("editor.action.clipboardPasteAction",a("paste","Paste"),void 0,!0,async e=>{if(M)c().execCommand("paste");else{const o=await this.clipboardService.readText();if(g(e)||w(e)){const t=e.selectionStart||0,r=e.selectionEnd||0;e.value=`${e.value.substring(0,t)}${o}${e.value.substring(r,e.value.length)}`,e.selectionStart=t+o.length,e.selectionEnd=e.selectionStart,e.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!0}))}}}),new v,new i("editor.action.selectAll",a("selectAll","Select All"),void 0,!0,async()=>c().execCommand("selectAll"))]}registerListeners(){this._register(W.runAndSubscribe(this.layoutService.onDidAddContainer,({container:e,disposables:o})=>{o.add(y(e,"contextmenu",t=>this.onContextMenu(S(e),t)))},{container:this.layoutService.mainContainer,disposables:this._store}))}onContextMenu(e,o){if(o.defaultPrevented)return;const t=o.target;if(!A(t)||t.nodeName.toLowerCase()!=="input"&&t.nodeName.toLowerCase()!=="textarea")return;x.stop(o,!0);const r=new k(e,o);this.contextMenuService.showContextMenu({getAnchor:()=>r,getActions:()=>this.textInputActions.value,getActionsContext:()=>t})}};s=p([u(0,C),u(1,f),u(2,L)],s),E(s.ID,s,I.BlockRestore);export{s as TextInputActionsProvider};
