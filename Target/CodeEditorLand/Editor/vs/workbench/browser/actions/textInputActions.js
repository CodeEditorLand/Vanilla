var m=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var p=(d,n,e,o)=>{for(var t=o>1?void 0:o?b(n,e):n,r=d.length-1,l;r>=0;r--)(l=d[r])&&(t=(o?l(n,e,t):l(t))||t);return o&&t&&m(n,e,t),t},u=(d,n)=>(e,o)=>n(e,o,d);import{addDisposableListener as C,EventHelper as f,getActiveDocument as i,getWindow as h,isHTMLElement as x,isHTMLInputElement as y,isHTMLTextAreaElement as S}from"../../../../vs/base/browser/dom.js";import{StandardMouseEvent as A}from"../../../../vs/base/browser/mouseEvent.js";import{Action as a,Separator as v}from"../../../../vs/base/common/actions.js";import{Event as w}from"../../../../vs/base/common/event.js";import{Lazy as g}from"../../../../vs/base/common/lazy.js";import{Disposable as I}from"../../../../vs/base/common/lifecycle.js";import{isNative as E}from"../../../../vs/base/common/platform.js";import{localize as c}from"../../../../vs/nls.js";import{IClipboardService as M}from"../../../../vs/platform/clipboard/common/clipboardService.js";import{IContextMenuService as L}from"../../../../vs/platform/contextview/browser/contextView.js";import{registerWorkbenchContribution2 as k,WorkbenchPhase as W}from"../../../../vs/workbench/common/contributions.js";import{IWorkbenchLayoutService as D}from"../../../../vs/workbench/services/layout/browser/layoutService.js";let s=class extends I{constructor(e,o,t){super();this.layoutService=e;this.contextMenuService=o;this.clipboardService=t;this.registerListeners()}static ID="workbench.contrib.textInputActionsProvider";textInputActions=new g(()=>this.createActions());createActions(){return[new a("undo",c("undo","Undo"),void 0,!0,async()=>i().execCommand("undo")),new a("redo",c("redo","Redo"),void 0,!0,async()=>i().execCommand("redo")),new v,new a("editor.action.clipboardCutAction",c("cut","Cut"),void 0,!0,async()=>i().execCommand("cut")),new a("editor.action.clipboardCopyAction",c("copy","Copy"),void 0,!0,async()=>i().execCommand("copy")),new a("editor.action.clipboardPasteAction",c("paste","Paste"),void 0,!0,async e=>{if(E)i().execCommand("paste");else{const o=await this.clipboardService.readText();if(S(e)||y(e)){const t=e.selectionStart||0,r=e.selectionEnd||0;e.value=`${e.value.substring(0,t)}${o}${e.value.substring(r,e.value.length)}`,e.selectionStart=t+o.length,e.selectionEnd=e.selectionStart,e.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!0}))}}}),new v,new a("editor.action.selectAll",c("selectAll","Select All"),void 0,!0,async()=>i().execCommand("selectAll"))]}registerListeners(){this._register(w.runAndSubscribe(this.layoutService.onDidAddContainer,({container:e,disposables:o})=>{o.add(C(e,"contextmenu",t=>this.onContextMenu(h(e),t)))},{container:this.layoutService.mainContainer,disposables:this._store}))}onContextMenu(e,o){if(o.defaultPrevented)return;const t=o.target;if(!x(t)||t.nodeName.toLowerCase()!=="input"&&t.nodeName.toLowerCase()!=="textarea")return;f.stop(o,!0);const r=new A(e,o);this.contextMenuService.showContextMenu({getAnchor:()=>r,getActions:()=>this.textInputActions.value,getActionsContext:()=>t})}};s=p([u(0,D),u(1,L),u(2,M)],s),k(s.ID,s,W.BlockRestore);export{s as TextInputActionsProvider};
