{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/actions/listCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isActiveElement } from \"../../../base/browser/dom.js\";\nimport { PagedList } from \"../../../base/browser/ui/list/listPaging.js\";\nimport { List } from \"../../../base/browser/ui/list/listWidget.js\";\nimport { Table } from \"../../../base/browser/ui/table/tableWidget.js\";\nimport {\n\tAbstractTree,\n\tTreeFindMatchType,\n\tTreeFindMode,\n} from \"../../../base/browser/ui/tree/abstractTree.js\";\nimport { AsyncDataTree } from \"../../../base/browser/ui/tree/asyncDataTree.js\";\nimport { DataTree } from \"../../../base/browser/ui/tree/dataTree.js\";\nimport { ObjectTree } from \"../../../base/browser/ui/tree/objectTree.js\";\nimport type { ITreeNode } from \"../../../base/browser/ui/tree/tree.js\";\nimport { equals, range } from \"../../../base/common/arrays.js\";\nimport { KeyChord, KeyCode, KeyMod } from \"../../../base/common/keyCodes.js\";\nimport { localize, localize2 } from \"../../../nls.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../platform/actions/common/actions.js\";\nimport { CommandsRegistry } from \"../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../platform/configuration/common/configuration.js\";\nimport { ContextKeyExpr } from \"../../../platform/contextkey/common/contextkey.js\";\nimport { IHoverService } from \"../../../platform/hover/browser/hover.js\";\nimport type { ServicesAccessor } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\tIListService,\n\ttype ListWidget,\n\tRawWorkbenchListFocusContextKey,\n\tWorkbenchListFocusContextKey,\n\tWorkbenchListHasSelectionOrFocus,\n\tWorkbenchListScrollAtBottomContextKey,\n\tWorkbenchListScrollAtTopContextKey,\n\tWorkbenchListSelectionNavigation,\n\tWorkbenchListSupportsFind,\n\tWorkbenchListSupportsMultiSelectContextKey,\n\ttype WorkbenchListWidget,\n\tWorkbenchTreeElementCanCollapse,\n\tWorkbenchTreeElementCanExpand,\n\tWorkbenchTreeElementHasChild,\n\tWorkbenchTreeElementHasParent,\n\tWorkbenchTreeFindOpen,\n\tWorkbenchTreeStickyScrollFocused,\n\tgetSelectionKeyboardEvent,\n} from \"../../../platform/list/browser/listService.js\";\n\nfunction ensureDOMFocus(widget: ListWidget | undefined): void {\n\t// it can happen that one of the commands is executed while\n\t// DOM focus is within another focusable control within the\n\t// list/tree item. therefor we should ensure that the\n\t// list/tree has DOM focus again after the command ran.\n\tconst element = widget?.getHTMLElement();\n\tif (element && !isActiveElement(element)) {\n\t\twidget?.domFocus();\n\t}\n}\n\nasync function updateFocus(\n\twidget: WorkbenchListWidget,\n\tupdateFocusFn: (widget: WorkbenchListWidget) => void | Promise<void>,\n): Promise<void> {\n\tif (!WorkbenchListSelectionNavigation.getValue(widget.contextKeyService)) {\n\t\treturn updateFocusFn(widget);\n\t}\n\n\tconst focus = widget.getFocus();\n\tconst selection = widget.getSelection();\n\n\tawait updateFocusFn(widget);\n\n\tconst newFocus = widget.getFocus();\n\n\tif (\n\t\tselection.length > 1 ||\n\t\t!equals(focus, selection) ||\n\t\tequals(focus, newFocus)\n\t) {\n\t\treturn;\n\t}\n\n\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\twidget.setSelection(newFocus, fakeKeyboardEvent);\n}\n\nasync function navigate(\n\twidget: WorkbenchListWidget | undefined,\n\tupdateFocusFn: (widget: WorkbenchListWidget) => void | Promise<void>,\n): Promise<void> {\n\tif (!widget) {\n\t\treturn;\n\t}\n\n\tawait updateFocus(widget, updateFocusFn);\n\n\tconst listFocus = widget.getFocus();\n\n\tif (listFocus.length) {\n\t\twidget.reveal(listFocus[0]);\n\t}\n\n\twidget.setAnchor(listFocus[0]);\n\tensureDOMFocus(widget);\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusDown\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.DownArrow,\n\tmac: {\n\t\tprimary: KeyCode.DownArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KeyN],\n\t},\n\thandler: (accessor, arg2) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\tawait widget.focusNext(\n\t\t\t\ttypeof arg2 === \"number\" ? arg2 : 1,\n\t\t\t\tfalse,\n\t\t\t\tfakeKeyboardEvent,\n\t\t\t);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusUp\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.UpArrow,\n\tmac: {\n\t\tprimary: KeyCode.UpArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KeyP],\n\t},\n\thandler: (accessor, arg2) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\tawait widget.focusPrevious(\n\t\t\t\ttypeof arg2 === \"number\" ? arg2 : 1,\n\t\t\t\tfalse,\n\t\t\t\tfakeKeyboardEvent,\n\t\t\t);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusAnyDown\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\tmac: {\n\t\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyN],\n\t},\n\thandler: (accessor, arg2) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\", {\n\t\t\t\taltKey: true,\n\t\t\t});\n\t\t\tawait widget.focusNext(\n\t\t\t\ttypeof arg2 === \"number\" ? arg2 : 1,\n\t\t\t\tfalse,\n\t\t\t\tfakeKeyboardEvent,\n\t\t\t);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusAnyUp\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\tmac: {\n\t\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyP],\n\t},\n\thandler: (accessor, arg2) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\", {\n\t\t\t\taltKey: true,\n\t\t\t});\n\t\t\tawait widget.focusPrevious(\n\t\t\t\ttypeof arg2 === \"number\" ? arg2 : 1,\n\t\t\t\tfalse,\n\t\t\t\tfakeKeyboardEvent,\n\t\t\t);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusPageDown\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.PageDown,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\tawait widget.focusNextPage(fakeKeyboardEvent);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusPageUp\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.PageUp,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\tawait widget.focusPreviousPage(fakeKeyboardEvent);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusFirst\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Home,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\tawait widget.focusFirst(fakeKeyboardEvent);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusLast\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.End,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\tawait widget.focusLast(fakeKeyboardEvent);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusAnyFirst\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.Alt | KeyCode.Home,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\", {\n\t\t\t\taltKey: true,\n\t\t\t});\n\t\t\tawait widget.focusFirst(fakeKeyboardEvent);\n\t\t});\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusAnyLast\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.Alt | KeyCode.End,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async (widget) => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\", {\n\t\t\t\taltKey: true,\n\t\t\t});\n\t\t\tawait widget.focusLast(fakeKeyboardEvent);\n\t\t});\n\t},\n});\n\nfunction expandMultiSelection(\n\tfocused: WorkbenchListWidget,\n\tpreviousFocus: unknown,\n): void {\n\t// List\n\tif (\n\t\tfocused instanceof List ||\n\t\tfocused instanceof PagedList ||\n\t\tfocused instanceof Table\n\t) {\n\t\tconst list = focused;\n\n\t\tconst focus = list.getFocus() ? list.getFocus()[0] : undefined;\n\t\tconst selection = list.getSelection();\n\t\tif (\n\t\t\tselection &&\n\t\t\ttypeof focus === \"number\" &&\n\t\t\tselection.indexOf(focus) >= 0\n\t\t) {\n\t\t\tlist.setSelection(selection.filter((s) => s !== previousFocus));\n\t\t} else if (typeof focus === \"number\") {\n\t\t\tlist.setSelection(selection.concat(focus));\n\t\t}\n\t}\n\n\t// Tree\n\telse if (\n\t\tfocused instanceof ObjectTree ||\n\t\tfocused instanceof DataTree ||\n\t\tfocused instanceof AsyncDataTree\n\t) {\n\t\tconst list = focused;\n\n\t\tconst focus = list.getFocus() ? list.getFocus()[0] : undefined;\n\n\t\tif (previousFocus === focus) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = list.getSelection();\n\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\", {\n\t\t\tshiftKey: true,\n\t\t});\n\n\t\tif (selection && selection.indexOf(focus) >= 0) {\n\t\t\tlist.setSelection(\n\t\t\t\tselection.filter((s) => s !== previousFocus),\n\t\t\t\tfakeKeyboardEvent,\n\t\t\t);\n\t\t} else {\n\t\t\tlist.setSelection(selection.concat(focus), fakeKeyboardEvent);\n\t\t}\n\t}\n}\n\nfunction revealFocusedStickyScroll(\n\ttree: ObjectTree<any, any> | DataTree<any, any> | AsyncDataTree<any, any>,\n\tpostRevealAction?: (focus: any) => void,\n): void {\n\tconst focus = tree.getStickyScrollFocus();\n\n\tif (focus.length === 0) {\n\t\tthrow new Error(`StickyScroll has no focus`);\n\t}\n\tif (focus.length > 1) {\n\t\tthrow new Error(`StickyScroll can only have a single focused item`);\n\t}\n\n\ttree.reveal(focus[0]);\n\ttree.getHTMLElement().focus(); // domfocus() would focus stiky scroll dom and not the tree todo@benibenj\n\ttree.setFocus(focus);\n\tpostRevealAction?.(focus[0]);\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.expandSelectionDown\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tWorkbenchListSupportsMultiSelectContextKey,\n\t),\n\tprimary: KeyMod.Shift | KeyCode.DownArrow,\n\thandler: (accessor, arg2) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus down first\n\t\tconst previousFocus = widget.getFocus()\n\t\t\t? widget.getFocus()[0]\n\t\t\t: undefined;\n\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\twidget.focusNext(\n\t\t\ttypeof arg2 === \"number\" ? arg2 : 1,\n\t\t\tfalse,\n\t\t\tfakeKeyboardEvent,\n\t\t);\n\n\t\t// Then adjust selection\n\t\texpandMultiSelection(widget, previousFocus);\n\n\t\tconst focus = widget.getFocus();\n\n\t\tif (focus.length) {\n\t\t\twidget.reveal(focus[0]);\n\t\t}\n\n\t\tensureDOMFocus(widget);\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.expandSelectionUp\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tWorkbenchListSupportsMultiSelectContextKey,\n\t),\n\tprimary: KeyMod.Shift | KeyCode.UpArrow,\n\thandler: (accessor, arg2) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus up first\n\t\tconst previousFocus = widget.getFocus()\n\t\t\t? widget.getFocus()[0]\n\t\t\t: undefined;\n\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\twidget.focusPrevious(\n\t\t\ttypeof arg2 === \"number\" ? arg2 : 1,\n\t\t\tfalse,\n\t\t\tfakeKeyboardEvent,\n\t\t);\n\n\t\t// Then adjust selection\n\t\texpandMultiSelection(widget, previousFocus);\n\n\t\tconst focus = widget.getFocus();\n\n\t\tif (focus.length) {\n\t\t\twidget.reveal(focus[0]);\n\t\t}\n\n\t\tensureDOMFocus(widget);\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.collapse\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tContextKeyExpr.or(\n\t\t\tWorkbenchTreeElementCanCollapse,\n\t\t\tWorkbenchTreeElementHasParent,\n\t\t),\n\t),\n\tprimary: KeyCode.LeftArrow,\n\tmac: {\n\t\tprimary: KeyCode.LeftArrow,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.UpArrow],\n\t},\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (\n\t\t\t!widget ||\n\t\t\t!(\n\t\t\t\twidget instanceof ObjectTree ||\n\t\t\t\twidget instanceof DataTree ||\n\t\t\t\twidget instanceof AsyncDataTree\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tree = widget;\n\t\tconst focusedElements = tree.getFocus();\n\n\t\tif (focusedElements.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus = focusedElements[0];\n\n\t\tif (!tree.collapse(focus)) {\n\t\t\tconst parent = tree.getParentElement(focus);\n\n\t\t\tif (parent) {\n\t\t\t\tnavigate(widget, (widget) => {\n\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\t\t\twidget.setFocus([parent], fakeKeyboardEvent);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.stickyScroll.collapse\",\n\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\twhen: WorkbenchTreeStickyScrollFocused,\n\tprimary: KeyCode.LeftArrow,\n\tmac: {\n\t\tprimary: KeyCode.LeftArrow,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.UpArrow],\n\t},\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (\n\t\t\t!widget ||\n\t\t\t!(\n\t\t\t\twidget instanceof ObjectTree ||\n\t\t\t\twidget instanceof DataTree ||\n\t\t\t\twidget instanceof AsyncDataTree\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\trevealFocusedStickyScroll(widget, (focus) => widget.collapse(focus));\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.collapseAll\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.CtrlCmd | KeyCode.LeftArrow,\n\tmac: {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.LeftArrow,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow],\n\t},\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (\n\t\t\tfocused &&\n\t\t\t!(\n\t\t\t\tfocused instanceof List ||\n\t\t\t\tfocused instanceof PagedList ||\n\t\t\t\tfocused instanceof Table\n\t\t\t)\n\t\t) {\n\t\t\tfocused.collapseAll();\n\t\t}\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.collapseAllToFocus\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\t\tconst fakeKeyboardEvent = getSelectionKeyboardEvent(\"keydown\", true);\n\t\t// Trees\n\t\tif (\n\t\t\tfocused instanceof ObjectTree ||\n\t\t\tfocused instanceof DataTree ||\n\t\t\tfocused instanceof AsyncDataTree\n\t\t) {\n\t\t\tconst tree = focused;\n\t\t\tconst focus = tree.getFocus();\n\n\t\t\tif (focus.length > 0) {\n\t\t\t\ttree.collapse(focus[0], true);\n\t\t\t}\n\t\t\ttree.setSelection(focus, fakeKeyboardEvent);\n\t\t\ttree.setAnchor(focus[0]);\n\t\t}\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.focusParent\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (\n\t\t\t!widget ||\n\t\t\t!(\n\t\t\t\twidget instanceof ObjectTree ||\n\t\t\t\twidget instanceof DataTree ||\n\t\t\t\twidget instanceof AsyncDataTree\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tree = widget;\n\t\tconst focusedElements = tree.getFocus();\n\t\tif (focusedElements.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst focus = focusedElements[0];\n\t\tconst parent = tree.getParentElement(focus);\n\t\tif (parent) {\n\t\t\tnavigate(widget, (widget) => {\n\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\t\twidget.setFocus([parent], fakeKeyboardEvent);\n\t\t\t});\n\t\t}\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.expand\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tContextKeyExpr.or(\n\t\t\tWorkbenchTreeElementCanExpand,\n\t\t\tWorkbenchTreeElementHasChild,\n\t\t),\n\t),\n\tprimary: KeyCode.RightArrow,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (widget instanceof ObjectTree || widget instanceof DataTree) {\n\t\t\t// TODO@Joao: instead of doing this here, just delegate to a tree method\n\t\t\tconst focusedElements = widget.getFocus();\n\n\t\t\tif (focusedElements.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst focus = focusedElements[0];\n\n\t\t\tif (!widget.expand(focus)) {\n\t\t\t\tconst child = widget.getFirstElementChild(focus);\n\n\t\t\t\tif (child) {\n\t\t\t\t\tconst node = widget.getNode(child);\n\n\t\t\t\t\tif (node.visible) {\n\t\t\t\t\t\tnavigate(widget, (widget) => {\n\t\t\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\n\t\t\t\t\t\t\t\t\"keydown\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\twidget.setFocus([child], fakeKeyboardEvent);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (widget instanceof AsyncDataTree) {\n\t\t\t// TODO@Joao: instead of doing this here, just delegate to a tree method\n\t\t\tconst focusedElements = widget.getFocus();\n\n\t\t\tif (focusedElements.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst focus = focusedElements[0];\n\t\t\twidget.expand(focus).then((didExpand) => {\n\t\t\t\tif (focus && !didExpand) {\n\t\t\t\t\tconst child = widget.getFirstElementChild(focus);\n\n\t\t\t\t\tif (child) {\n\t\t\t\t\t\tconst node = widget.getNode(child);\n\n\t\t\t\t\t\tif (node.visible) {\n\t\t\t\t\t\t\tnavigate(widget, (widget) => {\n\t\t\t\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\n\t\t\t\t\t\t\t\t\t\"keydown\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\twidget.setFocus([child], fakeKeyboardEvent);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n});\n\nfunction selectElement(\n\taccessor: ServicesAccessor,\n\tretainCurrentFocus: boolean,\n): void {\n\tconst focused = accessor.get(IListService).lastFocusedList;\n\tconst fakeKeyboardEvent = getSelectionKeyboardEvent(\n\t\t\"keydown\",\n\t\tretainCurrentFocus,\n\t);\n\t// List\n\tif (\n\t\tfocused instanceof List ||\n\t\tfocused instanceof PagedList ||\n\t\tfocused instanceof Table\n\t) {\n\t\tconst list = focused;\n\t\tlist.setAnchor(list.getFocus()[0]);\n\t\tlist.setSelection(list.getFocus(), fakeKeyboardEvent);\n\t}\n\n\t// Trees\n\telse if (\n\t\tfocused instanceof ObjectTree ||\n\t\tfocused instanceof DataTree ||\n\t\tfocused instanceof AsyncDataTree\n\t) {\n\t\tconst tree = focused;\n\t\tconst focus = tree.getFocus();\n\n\t\tif (focus.length > 0) {\n\t\t\tlet toggleCollapsed = true;\n\n\t\t\tif (tree.expandOnlyOnTwistieClick === true) {\n\t\t\t\ttoggleCollapsed = false;\n\t\t\t} else if (\n\t\t\t\ttypeof tree.expandOnlyOnTwistieClick !== \"boolean\" &&\n\t\t\t\ttree.expandOnlyOnTwistieClick(focus[0])\n\t\t\t) {\n\t\t\t\ttoggleCollapsed = false;\n\t\t\t}\n\n\t\t\tif (toggleCollapsed) {\n\t\t\t\ttree.toggleCollapsed(focus[0]);\n\t\t\t}\n\t\t}\n\t\ttree.setAnchor(focus[0]);\n\t\ttree.setSelection(focus, fakeKeyboardEvent);\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.select\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Enter,\n\tmac: {\n\t\tprimary: KeyCode.Enter,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.DownArrow],\n\t},\n\thandler: (accessor) => {\n\t\tselectElement(accessor, false);\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.stickyScrollselect\",\n\tweight: KeybindingWeight.WorkbenchContrib + 50, // priorities over file explorer\n\twhen: WorkbenchTreeStickyScrollFocused,\n\tprimary: KeyCode.Enter,\n\tmac: {\n\t\tprimary: KeyCode.Enter,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.DownArrow],\n\t},\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (\n\t\t\t!widget ||\n\t\t\t!(\n\t\t\t\twidget instanceof ObjectTree ||\n\t\t\t\twidget instanceof DataTree ||\n\t\t\t\twidget instanceof AsyncDataTree\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\trevealFocusedStickyScroll(widget, (focus) =>\n\t\t\twidget.setSelection([focus]),\n\t\t);\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.selectAndPreserveFocus\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: (accessor) => {\n\t\tselectElement(accessor, true);\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.selectAll\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tWorkbenchListSupportsMultiSelectContextKey,\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.KeyA,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (\n\t\t\tfocused instanceof List ||\n\t\t\tfocused instanceof PagedList ||\n\t\t\tfocused instanceof Table\n\t\t) {\n\t\t\tconst list = focused;\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\tlist.setSelection(range(list.length), fakeKeyboardEvent);\n\t\t}\n\n\t\t// Trees\n\t\telse if (\n\t\t\tfocused instanceof ObjectTree ||\n\t\t\tfocused instanceof DataTree ||\n\t\t\tfocused instanceof AsyncDataTree\n\t\t) {\n\t\t\tconst tree = focused;\n\t\t\tconst focus = tree.getFocus();\n\t\t\tconst selection = tree.getSelection();\n\n\t\t\t// Which element should be considered to start selecting all?\n\t\t\tlet start: unknown | undefined;\n\n\t\t\tif (\n\t\t\t\tfocus.length > 0 &&\n\t\t\t\t(selection.length === 0 || !selection.includes(focus[0]))\n\t\t\t) {\n\t\t\t\tstart = focus[0];\n\t\t\t}\n\n\t\t\tif (!start && selection.length > 0) {\n\t\t\t\tstart = selection[0];\n\t\t\t}\n\n\t\t\t// What is the scope of select all?\n\t\t\tlet scope: unknown | undefined;\n\n\t\t\tif (start) {\n\t\t\t\tscope = tree.getParentElement(start);\n\t\t\t} else {\n\t\t\t\tscope = undefined;\n\t\t\t}\n\n\t\t\tconst newSelection: unknown[] = [];\n\t\t\tconst visit = (node: ITreeNode<unknown, unknown>) => {\n\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\tif (child.visible) {\n\t\t\t\t\t\tnewSelection.push(child.element);\n\n\t\t\t\t\t\tif (!child.collapsed) {\n\t\t\t\t\t\t\tvisit(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Add the whole scope subtree to the new selection\n\t\t\tvisit(tree.getNode(scope));\n\n\t\t\t// If the scope isn't the tree root, it should be part of the new selection\n\t\t\tif (scope && selection.length === newSelection.length) {\n\t\t\t\tnewSelection.unshift(scope);\n\t\t\t}\n\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\t\t\ttree.setSelection(newSelection, fakeKeyboardEvent);\n\t\t}\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.toggleSelection\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus = widget.getFocus();\n\n\t\tif (focus.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = widget.getSelection();\n\t\tconst index = selection.indexOf(focus[0]);\n\n\t\tif (index > -1) {\n\t\t\twidget.setSelection([\n\t\t\t\t...selection.slice(0, index),\n\t\t\t\t...selection.slice(index + 1),\n\t\t\t]);\n\t\t} else {\n\t\t\twidget.setSelection([...selection, focus[0]]);\n\t\t}\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.showHover\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyChord(\n\t\tKeyMod.CtrlCmd | KeyCode.KeyK,\n\t\tKeyMod.CtrlCmd | KeyCode.KeyI,\n\t),\n\twhen: WorkbenchListFocusContextKey,\n\thandler: async (accessor: ServicesAccessor, ...args: any[]) => {\n\t\tconst listService = accessor.get(IListService);\n\t\tconst lastFocusedList = listService.lastFocusedList;\n\t\tif (!lastFocusedList) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if a tree element is focused\n\t\tconst focus = lastFocusedList.getFocus();\n\t\tif (!focus || focus.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// As the tree does not know anything about the rendered DOM elements\n\t\t// we have to traverse the dom to find the HTMLElements\n\t\tconst treeDOM = lastFocusedList.getHTMLElement();\n\t\tconst scrollableElement = treeDOM.querySelector(\n\t\t\t\".monaco-scrollable-element\",\n\t\t);\n\t\tconst listRows = scrollableElement?.querySelector(\".monaco-list-rows\");\n\t\tconst focusedElement = listRows?.querySelector(\".focused\");\n\t\tif (!focusedElement) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst elementWithHover = getCustomHoverForElement(\n\t\t\tfocusedElement as HTMLElement,\n\t\t);\n\t\tif (elementWithHover) {\n\t\t\taccessor\n\t\t\t\t.get(IHoverService)\n\t\t\t\t.showManagedHover(elementWithHover as HTMLElement);\n\t\t}\n\t},\n});\n\nfunction getCustomHoverForElement(\n\telement: HTMLElement,\n): HTMLElement | undefined {\n\t// Check if the element itself has a hover\n\tif (element.matches('[custom-hover=\"true\"]')) {\n\t\treturn element;\n\t}\n\n\t// Only consider children that are not action items or have a tabindex\n\t// as these element are focusable and the user is able to trigger them already\n\tconst noneFocusableElementWithHover = element.querySelector(\n\t\t'[custom-hover=\"true\"]:not([tabindex]):not(.action-item)',\n\t);\n\tif (noneFocusableElementWithHover) {\n\t\treturn noneFocusableElementWithHover as HTMLElement;\n\t}\n\n\treturn undefined;\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.toggleExpand\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Space,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// Tree only\n\t\tif (\n\t\t\tfocused instanceof ObjectTree ||\n\t\t\tfocused instanceof DataTree ||\n\t\t\tfocused instanceof AsyncDataTree\n\t\t) {\n\t\t\tconst tree = focused;\n\t\t\tconst focus = tree.getFocus();\n\n\t\t\tif (focus.length > 0 && tree.isCollapsible(focus[0])) {\n\t\t\t\ttree.toggleCollapsed(focus[0]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tselectElement(accessor, true);\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.stickyScrolltoggleExpand\",\n\tweight: KeybindingWeight.WorkbenchContrib + 50, // priorities over file explorer\n\twhen: WorkbenchTreeStickyScrollFocused,\n\tprimary: KeyCode.Space,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (\n\t\t\t!widget ||\n\t\t\t!(\n\t\t\t\twidget instanceof ObjectTree ||\n\t\t\t\twidget instanceof DataTree ||\n\t\t\t\twidget instanceof AsyncDataTree\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\trevealFocusedStickyScroll(widget);\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.clear\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tWorkbenchListHasSelectionOrFocus,\n\t),\n\tprimary: KeyCode.Escape,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = widget.getSelection();\n\t\tconst fakeKeyboardEvent = new KeyboardEvent(\"keydown\");\n\n\t\tif (selection.length > 1) {\n\t\t\tconst useSelectionNavigation =\n\t\t\t\tWorkbenchListSelectionNavigation.getValue(\n\t\t\t\t\twidget.contextKeyService,\n\t\t\t\t);\n\t\t\tif (useSelectionNavigation) {\n\t\t\t\tconst focus = widget.getFocus();\n\t\t\t\twidget.setSelection([focus[0]], fakeKeyboardEvent);\n\t\t\t} else {\n\t\t\t\twidget.setSelection([], fakeKeyboardEvent);\n\t\t\t}\n\t\t} else {\n\t\t\twidget.setSelection([], fakeKeyboardEvent);\n\t\t\twidget.setFocus([], fakeKeyboardEvent);\n\t\t}\n\n\t\twidget.setAnchor(undefined);\n\t},\n});\n\nCommandsRegistry.registerCommand({\n\tid: \"list.triggerTypeNavigation\",\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\t\twidget?.triggerTypeNavigation();\n\t},\n});\n\nCommandsRegistry.registerCommand({\n\tid: \"list.toggleFindMode\",\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (widget instanceof AbstractTree || widget instanceof AsyncDataTree) {\n\t\t\tconst tree = widget;\n\t\t\ttree.findMode =\n\t\t\t\ttree.findMode === TreeFindMode.Filter\n\t\t\t\t\t? TreeFindMode.Highlight\n\t\t\t\t\t: TreeFindMode.Filter;\n\t\t}\n\t},\n});\n\nCommandsRegistry.registerCommand({\n\tid: \"list.toggleFindMatchType\",\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (widget instanceof AbstractTree || widget instanceof AsyncDataTree) {\n\t\t\tconst tree = widget;\n\t\t\ttree.findMatchType =\n\t\t\t\ttree.findMatchType === TreeFindMatchType.Contiguous\n\t\t\t\t\t? TreeFindMatchType.Fuzzy\n\t\t\t\t\t: TreeFindMatchType.Contiguous;\n\t\t}\n\t},\n});\n\n// Deprecated commands\nCommandsRegistry.registerCommandAlias(\n\t\"list.toggleKeyboardNavigation\",\n\t\"list.triggerTypeNavigation\",\n);\nCommandsRegistry.registerCommandAlias(\n\t\"list.toggleFilterOnType\",\n\t\"list.toggleFindMode\",\n);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.find\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tRawWorkbenchListFocusContextKey,\n\t\tWorkbenchListSupportsFind,\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyF,\n\tsecondary: [KeyCode.F3],\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (\n\t\t\twidget instanceof List ||\n\t\t\twidget instanceof PagedList ||\n\t\t\twidget instanceof Table\n\t\t) {\n\t\t\t// TODO@joao\n\t\t}\n\n\t\t// Tree\n\t\telse if (\n\t\t\twidget instanceof AbstractTree ||\n\t\t\twidget instanceof AsyncDataTree\n\t\t) {\n\t\t\tconst tree = widget;\n\t\t\ttree.openFind();\n\t\t}\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.closeFind\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tRawWorkbenchListFocusContextKey,\n\t\tWorkbenchTreeFindOpen,\n\t),\n\tprimary: KeyCode.Escape,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (widget instanceof AbstractTree || widget instanceof AsyncDataTree) {\n\t\t\tconst tree = widget;\n\t\t\ttree.closeFind();\n\t\t}\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.scrollUp\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\t// Since the default keybindings for list.scrollUp and widgetNavigation.focusPrevious\n\t// are both Ctrl+UpArrow, we disable this command when the scrollbar is at\n\t// top-most position. This will give chance for widgetNavigation.focusPrevious to execute\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tWorkbenchListScrollAtTopContextKey?.negate(),\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocused.scrollTop -= 10;\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.scrollDown\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\t// same as above\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tWorkbenchListScrollAtBottomContextKey?.negate(),\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocused.scrollTop += 10;\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.scrollLeft\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocused.scrollLeft -= 10;\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"list.scrollRight\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocused.scrollLeft += 10;\n\t},\n});\n\nregisterAction2(\n\tclass ToggleStickyScroll extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"tree.toggleStickyScroll\",\n\t\t\t\ttitle: {\n\t\t\t\t\t...localize2(\n\t\t\t\t\t\t\"toggleTreeStickyScroll\",\n\t\t\t\t\t\t\"Toggle Tree Sticky Scroll\",\n\t\t\t\t\t),\n\t\t\t\t\tmnemonicTitle: localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"mitoggleTreeStickyScroll\",\n\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"&&Toggle Tree Sticky Scroll\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tcategory: \"View\",\n\t\t\t\tmetadata: {\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"toggleTreeStickyScrollDescription\",\n\t\t\t\t\t\t\"Toggles Sticky Scroll widget at the top of tree structures such as the File Explorer and Debug variables View.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\trun(accessor: ServicesAccessor) {\n\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\tconst newValue = !configurationService.getValue<boolean>(\n\t\t\t\t\"workbench.tree.enableStickyScroll\",\n\t\t\t);\n\t\t\tconfigurationService.updateValue(\n\t\t\t\t\"workbench.tree.enableStickyScroll\",\n\t\t\t\tnewValue,\n\t\t\t);\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": ["widget"]
}
