{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/actions/listCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyMod, KeyCode, KeyChord } from '../../../base/common/keyCodes.js';\nimport { ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingsRegistry, KeybindingWeight } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { List } from '../../../base/browser/ui/list/listWidget.js';\nimport { WorkbenchListFocusContextKey, IListService, WorkbenchListSupportsMultiSelectContextKey, ListWidget, WorkbenchListHasSelectionOrFocus, getSelectionKeyboardEvent, WorkbenchListWidget, WorkbenchListSelectionNavigation, WorkbenchTreeElementCanCollapse, WorkbenchTreeElementHasParent, WorkbenchTreeElementHasChild, WorkbenchTreeElementCanExpand, RawWorkbenchListFocusContextKey, WorkbenchTreeFindOpen, WorkbenchListSupportsFind, WorkbenchListScrollAtBottomContextKey, WorkbenchListScrollAtTopContextKey, WorkbenchTreeStickyScrollFocused } from '../../../platform/list/browser/listService.js';\nimport { PagedList } from '../../../base/browser/ui/list/listPaging.js';\nimport { equals, range } from '../../../base/common/arrays.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { ObjectTree } from '../../../base/browser/ui/tree/objectTree.js';\nimport { AsyncDataTree } from '../../../base/browser/ui/tree/asyncDataTree.js';\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\nimport { ITreeNode } from '../../../base/browser/ui/tree/tree.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { Table } from '../../../base/browser/ui/table/tableWidget.js';\nimport { AbstractTree, TreeFindMatchType, TreeFindMode } from '../../../base/browser/ui/tree/abstractTree.js';\nimport { isActiveElement } from '../../../base/browser/dom.js';\nimport { Action2, registerAction2 } from '../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { localize, localize2 } from '../../../nls.js';\nimport { IHoverService } from '../../../platform/hover/browser/hover.js';\n\nfunction ensureDOMFocus(widget: ListWidget | undefined): void {\n\t// it can happen that one of the commands is executed while\n\t// DOM focus is within another focusable control within the\n\t// list/tree item. therefor we should ensure that the\n\t// list/tree has DOM focus again after the command ran.\n\tconst element = widget?.getHTMLElement();\n\tif (element && !isActiveElement(element)) {\n\t\twidget?.domFocus();\n\t}\n}\n\nasync function updateFocus(widget: WorkbenchListWidget, updateFocusFn: (widget: WorkbenchListWidget) => void | Promise<void>): Promise<void> {\n\tif (!WorkbenchListSelectionNavigation.getValue(widget.contextKeyService)) {\n\t\treturn updateFocusFn(widget);\n\t}\n\n\tconst focus = widget.getFocus();\n\tconst selection = widget.getSelection();\n\n\tawait updateFocusFn(widget);\n\n\tconst newFocus = widget.getFocus();\n\n\tif (selection.length > 1 || !equals(focus, selection) || equals(focus, newFocus)) {\n\t\treturn;\n\t}\n\n\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\twidget.setSelection(newFocus, fakeKeyboardEvent);\n}\n\nasync function navigate(widget: WorkbenchListWidget | undefined, updateFocusFn: (widget: WorkbenchListWidget) => void | Promise<void>): Promise<void> {\n\tif (!widget) {\n\t\treturn;\n\t}\n\n\tawait updateFocus(widget, updateFocusFn);\n\n\tconst listFocus = widget.getFocus();\n\n\tif (listFocus.length) {\n\t\twidget.reveal(listFocus[0]);\n\t}\n\n\twidget.setAnchor(listFocus[0]);\n\tensureDOMFocus(widget);\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusDown',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.DownArrow,\n\tmac: {\n\t\tprimary: KeyCode.DownArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KeyN]\n\t},\n\thandler: (accessor, arg2) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tawait widget.focusNext(typeof arg2 === 'number' ? arg2 : 1, false, fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusUp',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.UpArrow,\n\tmac: {\n\t\tprimary: KeyCode.UpArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyCode.KeyP]\n\t},\n\thandler: (accessor, arg2) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tawait widget.focusPrevious(typeof arg2 === 'number' ? arg2 : 1, false, fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusAnyDown',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\tmac: {\n\t\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyN]\n\t},\n\thandler: (accessor, arg2) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown', { altKey: true });\n\t\t\tawait widget.focusNext(typeof arg2 === 'number' ? arg2 : 1, false, fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusAnyUp',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\tmac: {\n\t\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\t\tsecondary: [KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyP]\n\t},\n\thandler: (accessor, arg2) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown', { altKey: true });\n\t\t\tawait widget.focusPrevious(typeof arg2 === 'number' ? arg2 : 1, false, fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusPageDown',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.PageDown,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tawait widget.focusNextPage(fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusPageUp',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.PageUp,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tawait widget.focusPreviousPage(fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusFirst',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Home,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tawait widget.focusFirst(fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusLast',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.End,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tawait widget.focusLast(fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusAnyFirst',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.Alt | KeyCode.Home,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown', { altKey: true });\n\t\t\tawait widget.focusFirst(fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusAnyLast',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.Alt | KeyCode.End,\n\thandler: (accessor) => {\n\t\tnavigate(accessor.get(IListService).lastFocusedList, async widget => {\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown', { altKey: true });\n\t\t\tawait widget.focusLast(fakeKeyboardEvent);\n\t\t});\n\t}\n});\n\nfunction expandMultiSelection(focused: WorkbenchListWidget, previousFocus: unknown): void {\n\n\t// List\n\tif (focused instanceof List || focused instanceof PagedList || focused instanceof Table) {\n\t\tconst list = focused;\n\n\t\tconst focus = list.getFocus() ? list.getFocus()[0] : undefined;\n\t\tconst selection = list.getSelection();\n\t\tif (selection && typeof focus === 'number' && selection.indexOf(focus) >= 0) {\n\t\t\tlist.setSelection(selection.filter(s => s !== previousFocus));\n\t\t} else {\n\t\t\tif (typeof focus === 'number') {\n\t\t\t\tlist.setSelection(selection.concat(focus));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Tree\n\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\tconst list = focused;\n\n\t\tconst focus = list.getFocus() ? list.getFocus()[0] : undefined;\n\n\t\tif (previousFocus === focus) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = list.getSelection();\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown', { shiftKey: true });\n\n\t\tif (selection && selection.indexOf(focus) >= 0) {\n\t\t\tlist.setSelection(selection.filter(s => s !== previousFocus), fakeKeyboardEvent);\n\t\t} else {\n\t\t\tlist.setSelection(selection.concat(focus), fakeKeyboardEvent);\n\t\t}\n\t}\n}\n\nfunction revealFocusedStickyScroll(tree: ObjectTree<any, any> | DataTree<any, any> | AsyncDataTree<any, any>, postRevealAction?: (focus: any) => void): void {\n\tconst focus = tree.getStickyScrollFocus();\n\n\tif (focus.length === 0) {\n\t\tthrow new Error(`StickyScroll has no focus`);\n\t}\n\tif (focus.length > 1) {\n\t\tthrow new Error(`StickyScroll can only have a single focused item`);\n\t}\n\n\ttree.reveal(focus[0]);\n\ttree.getHTMLElement().focus(); // domfocus() would focus stiky scroll dom and not the tree todo@benibenj\n\ttree.setFocus(focus);\n\tpostRevealAction?.(focus[0]);\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.expandSelectionDown',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, WorkbenchListSupportsMultiSelectContextKey),\n\tprimary: KeyMod.Shift | KeyCode.DownArrow,\n\thandler: (accessor, arg2) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus down first\n\t\tconst previousFocus = widget.getFocus() ? widget.getFocus()[0] : undefined;\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\twidget.focusNext(typeof arg2 === 'number' ? arg2 : 1, false, fakeKeyboardEvent);\n\n\t\t// Then adjust selection\n\t\texpandMultiSelection(widget, previousFocus);\n\n\t\tconst focus = widget.getFocus();\n\n\t\tif (focus.length) {\n\t\t\twidget.reveal(focus[0]);\n\t\t}\n\n\t\tensureDOMFocus(widget);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.expandSelectionUp',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, WorkbenchListSupportsMultiSelectContextKey),\n\tprimary: KeyMod.Shift | KeyCode.UpArrow,\n\thandler: (accessor, arg2) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Focus up first\n\t\tconst previousFocus = widget.getFocus() ? widget.getFocus()[0] : undefined;\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\twidget.focusPrevious(typeof arg2 === 'number' ? arg2 : 1, false, fakeKeyboardEvent);\n\n\t\t// Then adjust selection\n\t\texpandMultiSelection(widget, previousFocus);\n\n\t\tconst focus = widget.getFocus();\n\n\t\tif (focus.length) {\n\t\t\twidget.reveal(focus[0]);\n\t\t}\n\n\t\tensureDOMFocus(widget);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.collapse',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, ContextKeyExpr.or(WorkbenchTreeElementCanCollapse, WorkbenchTreeElementHasParent)),\n\tprimary: KeyCode.LeftArrow,\n\tmac: {\n\t\tprimary: KeyCode.LeftArrow,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.UpArrow]\n\t},\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget || !(widget instanceof ObjectTree || widget instanceof DataTree || widget instanceof AsyncDataTree)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tree = widget;\n\t\tconst focusedElements = tree.getFocus();\n\n\t\tif (focusedElements.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus = focusedElements[0];\n\n\t\tif (!tree.collapse(focus)) {\n\t\t\tconst parent = tree.getParentElement(focus);\n\n\t\t\tif (parent) {\n\t\t\t\tnavigate(widget, widget => {\n\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t\t\twidget.setFocus([parent], fakeKeyboardEvent);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.stickyScroll.collapse',\n\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\twhen: WorkbenchTreeStickyScrollFocused,\n\tprimary: KeyCode.LeftArrow,\n\tmac: {\n\t\tprimary: KeyCode.LeftArrow,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.UpArrow]\n\t},\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget || !(widget instanceof ObjectTree || widget instanceof DataTree || widget instanceof AsyncDataTree)) {\n\t\t\treturn;\n\t\t}\n\n\t\trevealFocusedStickyScroll(widget, focus => widget.collapse(focus));\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.collapseAll',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.CtrlCmd | KeyCode.LeftArrow,\n\tmac: {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.LeftArrow,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow]\n\t},\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (focused && !(focused instanceof List || focused instanceof PagedList || focused instanceof Table)) {\n\t\t\tfocused.collapseAll();\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.collapseAllToFocus',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: accessor => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\t\tconst fakeKeyboardEvent = getSelectionKeyboardEvent('keydown', true);\n\t\t// Trees\n\t\tif (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst tree = focused;\n\t\t\tconst focus = tree.getFocus();\n\n\t\t\tif (focus.length > 0) {\n\t\t\t\ttree.collapse(focus[0], true);\n\t\t\t}\n\t\t\ttree.setSelection(focus, fakeKeyboardEvent);\n\t\t\ttree.setAnchor(focus[0]);\n\t\t}\n\t}\n});\n\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.focusParent',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget || !(widget instanceof ObjectTree || widget instanceof DataTree || widget instanceof AsyncDataTree)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tree = widget;\n\t\tconst focusedElements = tree.getFocus();\n\t\tif (focusedElements.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst focus = focusedElements[0];\n\t\tconst parent = tree.getParentElement(focus);\n\t\tif (parent) {\n\t\t\tnavigate(widget, widget => {\n\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t\twidget.setFocus([parent], fakeKeyboardEvent);\n\t\t\t});\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.expand',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, ContextKeyExpr.or(WorkbenchTreeElementCanExpand, WorkbenchTreeElementHasChild)),\n\tprimary: KeyCode.RightArrow,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (widget instanceof ObjectTree || widget instanceof DataTree) {\n\t\t\t// TODO@Joao: instead of doing this here, just delegate to a tree method\n\t\t\tconst focusedElements = widget.getFocus();\n\n\t\t\tif (focusedElements.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst focus = focusedElements[0];\n\n\t\t\tif (!widget.expand(focus)) {\n\t\t\t\tconst child = widget.getFirstElementChild(focus);\n\n\t\t\t\tif (child) {\n\t\t\t\t\tconst node = widget.getNode(child);\n\n\t\t\t\t\tif (node.visible) {\n\t\t\t\t\t\tnavigate(widget, widget => {\n\t\t\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t\t\t\t\twidget.setFocus([child], fakeKeyboardEvent);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (widget instanceof AsyncDataTree) {\n\t\t\t// TODO@Joao: instead of doing this here, just delegate to a tree method\n\t\t\tconst focusedElements = widget.getFocus();\n\n\t\t\tif (focusedElements.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst focus = focusedElements[0];\n\t\t\twidget.expand(focus).then(didExpand => {\n\t\t\t\tif (focus && !didExpand) {\n\t\t\t\t\tconst child = widget.getFirstElementChild(focus);\n\n\t\t\t\t\tif (child) {\n\t\t\t\t\t\tconst node = widget.getNode(child);\n\n\t\t\t\t\t\tif (node.visible) {\n\t\t\t\t\t\t\tnavigate(widget, widget => {\n\t\t\t\t\t\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\t\t\t\t\t\twidget.setFocus([child], fakeKeyboardEvent);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n});\n\nfunction selectElement(accessor: ServicesAccessor, retainCurrentFocus: boolean): void {\n\tconst focused = accessor.get(IListService).lastFocusedList;\n\tconst fakeKeyboardEvent = getSelectionKeyboardEvent('keydown', retainCurrentFocus);\n\t// List\n\tif (focused instanceof List || focused instanceof PagedList || focused instanceof Table) {\n\t\tconst list = focused;\n\t\tlist.setAnchor(list.getFocus()[0]);\n\t\tlist.setSelection(list.getFocus(), fakeKeyboardEvent);\n\t}\n\n\t// Trees\n\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\tconst tree = focused;\n\t\tconst focus = tree.getFocus();\n\n\t\tif (focus.length > 0) {\n\t\t\tlet toggleCollapsed = true;\n\n\t\t\tif (tree.expandOnlyOnTwistieClick === true) {\n\t\t\t\ttoggleCollapsed = false;\n\t\t\t} else if (typeof tree.expandOnlyOnTwistieClick !== 'boolean' && tree.expandOnlyOnTwistieClick(focus[0])) {\n\t\t\t\ttoggleCollapsed = false;\n\t\t\t}\n\n\t\t\tif (toggleCollapsed) {\n\t\t\t\ttree.toggleCollapsed(focus[0]);\n\t\t\t}\n\t\t}\n\t\ttree.setAnchor(focus[0]);\n\t\ttree.setSelection(focus, fakeKeyboardEvent);\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.select',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Enter,\n\tmac: {\n\t\tprimary: KeyCode.Enter,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.DownArrow]\n\t},\n\thandler: (accessor) => {\n\t\tselectElement(accessor, false);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.stickyScrollselect',\n\tweight: KeybindingWeight.WorkbenchContrib + 50, // priorities over file explorer\n\twhen: WorkbenchTreeStickyScrollFocused,\n\tprimary: KeyCode.Enter,\n\tmac: {\n\t\tprimary: KeyCode.Enter,\n\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.DownArrow]\n\t},\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget || !(widget instanceof ObjectTree || widget instanceof DataTree || widget instanceof AsyncDataTree)) {\n\t\t\treturn;\n\t\t}\n\n\t\trevealFocusedStickyScroll(widget, focus => widget.setSelection([focus]));\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.selectAndPreserveFocus',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: accessor => {\n\t\tselectElement(accessor, true);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.selectAll',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, WorkbenchListSupportsMultiSelectContextKey),\n\tprimary: KeyMod.CtrlCmd | KeyCode.KeyA,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (focused instanceof List || focused instanceof PagedList || focused instanceof Table) {\n\t\t\tconst list = focused;\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\tlist.setSelection(range(list.length), fakeKeyboardEvent);\n\t\t}\n\n\t\t// Trees\n\t\telse if (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst tree = focused;\n\t\t\tconst focus = tree.getFocus();\n\t\t\tconst selection = tree.getSelection();\n\n\t\t\t// Which element should be considered to start selecting all?\n\t\t\tlet start: unknown | undefined = undefined;\n\n\t\t\tif (focus.length > 0 && (selection.length === 0 || !selection.includes(focus[0]))) {\n\t\t\t\tstart = focus[0];\n\t\t\t}\n\n\t\t\tif (!start && selection.length > 0) {\n\t\t\t\tstart = selection[0];\n\t\t\t}\n\n\t\t\t// What is the scope of select all?\n\t\t\tlet scope: unknown | undefined = undefined;\n\n\t\t\tif (!start) {\n\t\t\t\tscope = undefined;\n\t\t\t} else {\n\t\t\t\tscope = tree.getParentElement(start);\n\t\t\t}\n\n\t\t\tconst newSelection: unknown[] = [];\n\t\t\tconst visit = (node: ITreeNode<unknown, unknown>) => {\n\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\tif (child.visible) {\n\t\t\t\t\t\tnewSelection.push(child.element);\n\n\t\t\t\t\t\tif (!child.collapsed) {\n\t\t\t\t\t\t\tvisit(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Add the whole scope subtree to the new selection\n\t\t\tvisit(tree.getNode(scope));\n\n\t\t\t// If the scope isn't the tree root, it should be part of the new selection\n\t\t\tif (scope && selection.length === newSelection.length) {\n\t\t\t\tnewSelection.unshift(scope);\n\t\t\t}\n\n\t\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\t\t\ttree.setSelection(newSelection, fakeKeyboardEvent);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.toggleSelection',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Enter,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus = widget.getFocus();\n\n\t\tif (focus.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = widget.getSelection();\n\t\tconst index = selection.indexOf(focus[0]);\n\n\t\tif (index > -1) {\n\t\t\twidget.setSelection([...selection.slice(0, index), ...selection.slice(index + 1)]);\n\t\t} else {\n\t\t\twidget.setSelection([...selection, focus[0]]);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.showHover',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyI),\n\twhen: WorkbenchListFocusContextKey,\n\thandler: async (accessor: ServicesAccessor, ...args: any[]) => {\n\t\tconst listService = accessor.get(IListService);\n\t\tconst lastFocusedList = listService.lastFocusedList;\n\t\tif (!lastFocusedList) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if a tree element is focused\n\t\tconst focus = lastFocusedList.getFocus();\n\t\tif (!focus || (focus.length === 0)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// As the tree does not know anything about the rendered DOM elements\n\t\t// we have to traverse the dom to find the HTMLElements\n\t\tconst treeDOM = lastFocusedList.getHTMLElement();\n\t\tconst scrollableElement = treeDOM.querySelector('.monaco-scrollable-element');\n\t\tconst listRows = scrollableElement?.querySelector('.monaco-list-rows');\n\t\tconst focusedElement = listRows?.querySelector('.focused');\n\t\tif (!focusedElement) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst elementWithHover = getCustomHoverForElement(focusedElement as HTMLElement);\n\t\tif (elementWithHover) {\n\t\t\taccessor.get(IHoverService).showManagedHover(elementWithHover as HTMLElement);\n\t\t}\n\t},\n});\n\nfunction getCustomHoverForElement(element: HTMLElement): HTMLElement | undefined {\n\t// Check if the element itself has a hover\n\tif (element.matches('[custom-hover=\"true\"]')) {\n\t\treturn element;\n\t}\n\n\t// Only consider children that are not action items or have a tabindex\n\t// as these element are focusable and the user is able to trigger them already\n\tconst noneFocusableElementWithHover = element.querySelector('[custom-hover=\"true\"]:not([tabindex]):not(.action-item)');\n\tif (noneFocusableElementWithHover) {\n\t\treturn noneFocusableElementWithHover as HTMLElement;\n\t}\n\n\treturn undefined;\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.toggleExpand',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\tprimary: KeyCode.Space,\n\thandler: (accessor) => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\t// Tree only\n\t\tif (focused instanceof ObjectTree || focused instanceof DataTree || focused instanceof AsyncDataTree) {\n\t\t\tconst tree = focused;\n\t\t\tconst focus = tree.getFocus();\n\n\t\t\tif (focus.length > 0 && tree.isCollapsible(focus[0])) {\n\t\t\t\ttree.toggleCollapsed(focus[0]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tselectElement(accessor, true);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.stickyScrolltoggleExpand',\n\tweight: KeybindingWeight.WorkbenchContrib + 50, // priorities over file explorer\n\twhen: WorkbenchTreeStickyScrollFocused,\n\tprimary: KeyCode.Space,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget || !(widget instanceof ObjectTree || widget instanceof DataTree || widget instanceof AsyncDataTree)) {\n\t\t\treturn;\n\t\t}\n\n\t\trevealFocusedStickyScroll(widget);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.clear',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(WorkbenchListFocusContextKey, WorkbenchListHasSelectionOrFocus),\n\tprimary: KeyCode.Escape,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = widget.getSelection();\n\t\tconst fakeKeyboardEvent = new KeyboardEvent('keydown');\n\n\t\tif (selection.length > 1) {\n\t\t\tconst useSelectionNavigation = WorkbenchListSelectionNavigation.getValue(widget.contextKeyService);\n\t\t\tif (useSelectionNavigation) {\n\t\t\t\tconst focus = widget.getFocus();\n\t\t\t\twidget.setSelection([focus[0]], fakeKeyboardEvent);\n\t\t\t} else {\n\t\t\t\twidget.setSelection([], fakeKeyboardEvent);\n\t\t\t}\n\t\t} else {\n\t\t\twidget.setSelection([], fakeKeyboardEvent);\n\t\t\twidget.setFocus([], fakeKeyboardEvent);\n\t\t}\n\n\t\twidget.setAnchor(undefined);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'list.triggerTypeNavigation',\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\t\twidget?.triggerTypeNavigation();\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'list.toggleFindMode',\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (widget instanceof AbstractTree || widget instanceof AsyncDataTree) {\n\t\t\tconst tree = widget;\n\t\t\ttree.findMode = tree.findMode === TreeFindMode.Filter ? TreeFindMode.Highlight : TreeFindMode.Filter;\n\t\t}\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'list.toggleFindMatchType',\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (widget instanceof AbstractTree || widget instanceof AsyncDataTree) {\n\t\t\tconst tree = widget;\n\t\t\ttree.findMatchType = tree.findMatchType === TreeFindMatchType.Contiguous ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous;\n\t\t}\n\t}\n});\n\n// Deprecated commands\nCommandsRegistry.registerCommandAlias('list.toggleKeyboardNavigation', 'list.triggerTypeNavigation');\nCommandsRegistry.registerCommandAlias('list.toggleFilterOnType', 'list.toggleFindMode');\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.find',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(RawWorkbenchListFocusContextKey, WorkbenchListSupportsFind),\n\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyF,\n\tsecondary: [KeyCode.F3],\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\t// List\n\t\tif (widget instanceof List || widget instanceof PagedList || widget instanceof Table) {\n\t\t\t// TODO@joao\n\t\t}\n\n\t\t// Tree\n\t\telse if (widget instanceof AbstractTree || widget instanceof AsyncDataTree) {\n\t\t\tconst tree = widget;\n\t\t\ttree.openFind();\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.closeFind',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(RawWorkbenchListFocusContextKey, WorkbenchTreeFindOpen),\n\tprimary: KeyCode.Escape,\n\thandler: (accessor) => {\n\t\tconst widget = accessor.get(IListService).lastFocusedList;\n\n\t\tif (widget instanceof AbstractTree || widget instanceof AsyncDataTree) {\n\t\t\tconst tree = widget;\n\t\t\ttree.closeFind();\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.scrollUp',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\t// Since the default keybindings for list.scrollUp and widgetNavigation.focusPrevious\n\t// are both Ctrl+UpArrow, we disable this command when the scrollbar is at\n\t// top-most position. This will give chance for widgetNavigation.focusPrevious to execute\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tWorkbenchListScrollAtTopContextKey?.negate()),\n\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\thandler: accessor => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocused.scrollTop -= 10;\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.scrollDown',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\t// same as above\n\twhen: ContextKeyExpr.and(\n\t\tWorkbenchListFocusContextKey,\n\t\tWorkbenchListScrollAtBottomContextKey?.negate()),\n\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\thandler: accessor => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocused.scrollTop += 10;\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.scrollLeft',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: accessor => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocused.scrollLeft -= 10;\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'list.scrollRight',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: WorkbenchListFocusContextKey,\n\thandler: accessor => {\n\t\tconst focused = accessor.get(IListService).lastFocusedList;\n\n\t\tif (!focused) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocused.scrollLeft += 10;\n\t}\n});\n\nregisterAction2(class ToggleStickyScroll extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'tree.toggleStickyScroll',\n\t\t\ttitle: {\n\t\t\t\t...localize2('toggleTreeStickyScroll', \"Toggle Tree Sticky Scroll\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'mitoggleTreeStickyScroll', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Tree Sticky Scroll\"),\n\t\t\t},\n\t\t\tcategory: 'View',\n\t\t\tmetadata: { description: localize('toggleTreeStickyScrollDescription', \"Toggles Sticky Scroll widget at the top of tree structures such as the File Explorer and Debug variables View.\") },\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst newValue = !configurationService.getValue<boolean>('workbench.tree.enableStickyScroll');\n\t\tconfigurationService.updateValue('workbench.tree.enableStickyScroll', newValue);\n\t}\n});\n"],
  "mappings": "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",
  "names": ["widget"]
}
