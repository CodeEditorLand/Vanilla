{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/actions/textInputActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction, Action, Separator } from '../../../base/common/actions.js';\nimport { localize } from '../../../nls.js';\nimport { IWorkbenchLayoutService } from '../../services/layout/browser/layoutService.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { EventHelper, addDisposableListener, getActiveDocument, getWindow, isHTMLElement, isHTMLInputElement, isHTMLTextAreaElement } from '../../../base/browser/dom.js';\nimport { IWorkbenchContribution, WorkbenchPhase, registerWorkbenchContribution2 } from '../../common/contributions.js';\nimport { isNative } from '../../../base/common/platform.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { StandardMouseEvent } from '../../../base/browser/mouseEvent.js';\nimport { Event as BaseEvent } from '../../../base/common/event.js';\nimport { Lazy } from '../../../base/common/lazy.js';\n\nexport class TextInputActionsProvider extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.textInputActionsProvider';\n\n\tprivate readonly textInputActions = new Lazy<IAction[]>(() => this.createActions());\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate createActions(): IAction[] {\n\t\treturn [\n\n\t\t\t// Undo/Redo\n\t\t\tnew Action('undo', localize('undo', \"Undo\"), undefined, true, async () => getActiveDocument().execCommand('undo')),\n\t\t\tnew Action('redo', localize('redo', \"Redo\"), undefined, true, async () => getActiveDocument().execCommand('redo')),\n\t\t\tnew Separator(),\n\n\t\t\t// Cut / Copy / Paste\n\t\t\tnew Action('editor.action.clipboardCutAction', localize('cut', \"Cut\"), undefined, true, async () => getActiveDocument().execCommand('cut')),\n\t\t\tnew Action('editor.action.clipboardCopyAction', localize('copy', \"Copy\"), undefined, true, async () => getActiveDocument().execCommand('copy')),\n\t\t\tnew Action('editor.action.clipboardPasteAction', localize('paste', \"Paste\"), undefined, true, async element => {\n\n\t\t\t\t// Native: paste is supported\n\t\t\t\tif (isNative) {\n\t\t\t\t\tgetActiveDocument().execCommand('paste');\n\t\t\t\t}\n\n\t\t\t\t// Web: paste is not supported due to security reasons\n\t\t\t\telse {\n\t\t\t\t\tconst clipboardText = await this.clipboardService.readText();\n\t\t\t\t\tif (\n\t\t\t\t\t\tisHTMLTextAreaElement(element) ||\n\t\t\t\t\t\tisHTMLInputElement(element)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst selectionStart = element.selectionStart || 0;\n\t\t\t\t\t\tconst selectionEnd = element.selectionEnd || 0;\n\n\t\t\t\t\t\telement.value = `${element.value.substring(0, selectionStart)}${clipboardText}${element.value.substring(selectionEnd, element.value.length)}`;\n\t\t\t\t\t\telement.selectionStart = selectionStart + clipboardText.length;\n\t\t\t\t\t\telement.selectionEnd = element.selectionStart;\n\t\t\t\t\t\telement.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t\tnew Separator(),\n\n\t\t\t// Select All\n\t\t\tnew Action('editor.action.selectAll', localize('selectAll', \"Select All\"), undefined, true, async () => getActiveDocument().execCommand('selectAll'))\n\t\t];\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Context menu support in input/textarea\n\t\tthis._register(BaseEvent.runAndSubscribe(this.layoutService.onDidAddContainer, ({ container, disposables }) => {\n\t\t\tdisposables.add(addDisposableListener(container, 'contextmenu', e => this.onContextMenu(getWindow(container), e)));\n\t\t}, { container: this.layoutService.mainContainer, disposables: this._store }));\n\t}\n\n\tprivate onContextMenu(targetWindow: Window, e: MouseEvent): void {\n\t\tif (e.defaultPrevented) {\n\t\t\treturn; // make sure to not show these actions by accident if component indicated to prevent\n\t\t}\n\n\t\tconst target = e.target;\n\t\tif (!(isHTMLElement(target)) || (target.nodeName.toLowerCase() !== 'input' && target.nodeName.toLowerCase() !== 'textarea')) {\n\t\t\treturn; // only for inputs or textareas\n\t\t}\n\n\t\tEventHelper.stop(e, true);\n\n\t\tconst event = new StandardMouseEvent(targetWindow, e);\n\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => event,\n\t\t\tgetActions: () => this.textInputActions.value,\n\t\t\tgetActionsContext: () => target,\n\t\t});\n\t}\n}\n\nregisterWorkbenchContribution2(\n\tTextInputActionsProvider.ID,\n\tTextInputActionsProvider,\n\tWorkbenchPhase.BlockRestore // Block to allow right-click into input fields before restore finished\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,SAAS,QAAQ,iBAAiB;AAC3C,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;AACxC,SAAS,2BAA2B;AACpC,SAAS,kBAAkB;AAC3B,SAAS,aAAa,uBAAuB,mBAAmB,WAAW,eAAe,oBAAoB,6BAA6B;AAC3I,SAAS,wBAAwB,gBAAgB,sCAAsC;AACvF,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC,SAAS,0BAA0B;AACnC,SAAS,SAAS,iBAAiB;AACnC,SAAS,YAAY;AAEd,IAAM,2BAAN,cAAuC,WAA6C;AAAA,EAM1F,YAC2C,eACJ,oBACF,kBACnC;AACD,UAAM;AAJoC;AACJ;AACF;AAIpC,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAhCD,OAkB2F;AAAA;AAAA;AAAA,EAE1F,OAAgB,KAAK;AAAA,EAEJ,mBAAmB,IAAI,KAAgB,MAAM,KAAK,cAAc,CAAC;AAAA,EAY1E,gBAA2B;AAClC,WAAO;AAAA;AAAA,MAGN,IAAI,OAAO,QAAQ,SAAS,QAAQ,MAAM,GAAG,QAAW,MAAM,YAAY,kBAAkB,EAAE,YAAY,MAAM,CAAC;AAAA,MACjH,IAAI,OAAO,QAAQ,SAAS,QAAQ,MAAM,GAAG,QAAW,MAAM,YAAY,kBAAkB,EAAE,YAAY,MAAM,CAAC;AAAA,MACjH,IAAI,UAAU;AAAA;AAAA,MAGd,IAAI,OAAO,oCAAoC,SAAS,OAAO,KAAK,GAAG,QAAW,MAAM,YAAY,kBAAkB,EAAE,YAAY,KAAK,CAAC;AAAA,MAC1I,IAAI,OAAO,qCAAqC,SAAS,QAAQ,MAAM,GAAG,QAAW,MAAM,YAAY,kBAAkB,EAAE,YAAY,MAAM,CAAC;AAAA,MAC9I,IAAI,OAAO,sCAAsC,SAAS,SAAS,OAAO,GAAG,QAAW,MAAM,OAAM,YAAW;AAG9G,YAAI,UAAU;AACb,4BAAkB,EAAE,YAAY,OAAO;AAAA,QACxC,OAGK;AACJ,gBAAM,gBAAgB,MAAM,KAAK,iBAAiB,SAAS;AAC3D,cACC,sBAAsB,OAAO,KAC7B,mBAAmB,OAAO,GACzB;AACD,kBAAM,iBAAiB,QAAQ,kBAAkB;AACjD,kBAAM,eAAe,QAAQ,gBAAgB;AAE7C,oBAAQ,QAAQ,GAAG,QAAQ,MAAM,UAAU,GAAG,cAAc,CAAC,GAAG,aAAa,GAAG,QAAQ,MAAM,UAAU,cAAc,QAAQ,MAAM,MAAM,CAAC;AAC3I,oBAAQ,iBAAiB,iBAAiB,cAAc;AACxD,oBAAQ,eAAe,QAAQ;AAC/B,oBAAQ,cAAc,IAAI,MAAM,SAAS,EAAE,SAAS,MAAM,YAAY,KAAK,CAAC,CAAC;AAAA,UAC9E;AAAA,QACD;AAAA,MACD,CAAC;AAAA,MACD,IAAI,UAAU;AAAA;AAAA,MAGd,IAAI,OAAO,2BAA2B,SAAS,aAAa,YAAY,GAAG,QAAW,MAAM,YAAY,kBAAkB,EAAE,YAAY,WAAW,CAAC;AAAA,IACrJ;AAAA,EACD;AAAA,EAEQ,oBAA0B;AAGjC,SAAK,UAAU,UAAU,gBAAgB,KAAK,cAAc,mBAAmB,CAAC,EAAE,WAAW,YAAY,MAAM;AAC9G,kBAAY,IAAI,sBAAsB,WAAW,eAAe,OAAK,KAAK,cAAc,UAAU,SAAS,GAAG,CAAC,CAAC,CAAC;AAAA,IAClH,GAAG,EAAE,WAAW,KAAK,cAAc,eAAe,aAAa,KAAK,OAAO,CAAC,CAAC;AAAA,EAC9E;AAAA,EAEQ,cAAc,cAAsB,GAAqB;AAChE,QAAI,EAAE,kBAAkB;AACvB;AAAA,IACD;AAEA,UAAM,SAAS,EAAE;AACjB,QAAI,CAAE,cAAc,MAAM,KAAO,OAAO,SAAS,YAAY,MAAM,WAAW,OAAO,SAAS,YAAY,MAAM,YAAa;AAC5H;AAAA,IACD;AAEA,gBAAY,KAAK,GAAG,IAAI;AAExB,UAAM,QAAQ,IAAI,mBAAmB,cAAc,CAAC;AAEpD,SAAK,mBAAmB,gBAAgB;AAAA,MACvC,WAAW,6BAAM,OAAN;AAAA,MACX,YAAY,6BAAM,KAAK,iBAAiB,OAA5B;AAAA,MACZ,mBAAmB,6BAAM,QAAN;AAAA,IACpB,CAAC;AAAA,EACF;AACD;AAtFa,2BAAN;AAAA,EAOJ;AAAA,EACA;AAAA,EACA;AAAA,GATU;AAwFb;AAAA,EACC,yBAAyB;AAAA,EACzB;AAAA,EACA,eAAe;AAAA;AAChB;",
  "names": []
}
