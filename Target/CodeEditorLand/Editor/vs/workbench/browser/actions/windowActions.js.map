{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/actions/windowActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../nls.js';\nimport { IWindowOpenable } from '../../../platform/window/common/window.js';\nimport { IDialogService } from '../../../platform/dialogs/common/dialogs.js';\nimport { MenuRegistry, MenuId, Action2, registerAction2, IAction2Options } from '../../../platform/actions/common/actions.js';\nimport { KeyChord, KeyCode, KeyMod } from '../../../base/common/keyCodes.js';\nimport { IsMainWindowFullscreenContext } from '../../common/contextkeys.js';\nimport { IsMacNativeContext, IsDevelopmentContext, IsWebContext, IsIOSContext } from '../../../platform/contextkey/common/contextkeys.js';\nimport { Categories } from '../../../platform/action/common/actionCommonCategories.js';\nimport { KeybindingsRegistry, KeybindingWeight } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { IQuickInputButton, IQuickInputService, IQuickPickSeparator, IKeyMods, IQuickPickItem } from '../../../platform/quickinput/common/quickInput.js';\nimport { IWorkspaceContextService, IWorkspaceIdentifier } from '../../../platform/workspace/common/workspace.js';\nimport { ILabelService, Verbosity } from '../../../platform/label/common/label.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { IModelService } from '../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../editor/common/languages/language.js';\nimport { IRecent, isRecentFolder, isRecentWorkspace, IWorkspacesService } from '../../../platform/workspaces/common/workspaces.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { getIconClasses } from '../../../editor/common/services/getIconClasses.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nimport { splitRecentLabel } from '../../../base/common/labels.js';\nimport { isMacintosh, isWeb, isWindows } from '../../../base/common/platform.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { inQuickPickContext, getQuickNavigateHandler } from '../quickaccess.js';\nimport { IHostService } from '../../services/host/browser/host.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';\nimport { isFolderBackupInfo, isWorkspaceBackupInfo } from '../../../platform/backup/common/backup.js';\nimport { getActiveElement, getActiveWindow, isHTMLElement } from '../../../base/browser/dom.js';\n\nexport const inRecentFilesPickerContextKey = 'inRecentFilesPicker';\n\ninterface IRecentlyOpenedPick extends IQuickPickItem {\n\tresource: URI;\n\topenable: IWindowOpenable;\n\tremoteAuthority: string | undefined;\n}\n\nabstract class BaseOpenRecentAction extends Action2 {\n\n\tprivate readonly removeFromRecentlyOpened: IQuickInputButton = {\n\t\ticonClass: ThemeIcon.asClassName(Codicon.removeClose),\n\t\ttooltip: localize('remove', \"Remove from Recently Opened\")\n\t};\n\n\tprivate readonly dirtyRecentlyOpenedFolder: IQuickInputButton = {\n\t\ticonClass: 'dirty-workspace ' + ThemeIcon.asClassName(Codicon.closeDirty),\n\t\ttooltip: localize('dirtyRecentlyOpenedFolder', \"Folder With Unsaved Files\"),\n\t\talwaysVisible: true\n\t};\n\n\tprivate readonly dirtyRecentlyOpenedWorkspace: IQuickInputButton = {\n\t\t...this.dirtyRecentlyOpenedFolder,\n\t\ttooltip: localize('dirtyRecentlyOpenedWorkspace', \"Workspace With Unsaved Files\"),\n\t};\n\n\tconstructor(desc: Readonly<IAction2Options>) {\n\t\tsuper(desc);\n\t}\n\n\tprotected abstract isQuickNavigate(): boolean;\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst workspacesService = accessor.get(IWorkspacesService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst contextService = accessor.get(IWorkspaceContextService);\n\t\tconst labelService = accessor.get(ILabelService);\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst hostService = accessor.get(IHostService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\n\t\tconst recentlyOpened = await workspacesService.getRecentlyOpened();\n\t\tconst dirtyWorkspacesAndFolders = await workspacesService.getDirtyWorkspaces();\n\n\t\tlet hasWorkspaces = false;\n\n\t\t// Identify all folders and workspaces with unsaved files\n\t\tconst dirtyFolders = new ResourceMap<boolean>();\n\t\tconst dirtyWorkspaces = new ResourceMap<IWorkspaceIdentifier>();\n\t\tfor (const dirtyWorkspace of dirtyWorkspacesAndFolders) {\n\t\t\tif (isFolderBackupInfo(dirtyWorkspace)) {\n\t\t\t\tdirtyFolders.set(dirtyWorkspace.folderUri, true);\n\t\t\t} else {\n\t\t\t\tdirtyWorkspaces.set(dirtyWorkspace.workspace.configPath, dirtyWorkspace.workspace);\n\t\t\t\thasWorkspaces = true;\n\t\t\t}\n\t\t}\n\n\t\t// Identify all recently opened folders and workspaces\n\t\tconst recentFolders = new ResourceMap<boolean>();\n\t\tconst recentWorkspaces = new ResourceMap<IWorkspaceIdentifier>();\n\t\tfor (const recent of recentlyOpened.workspaces) {\n\t\t\tif (isRecentFolder(recent)) {\n\t\t\t\trecentFolders.set(recent.folderUri, true);\n\t\t\t} else {\n\t\t\t\trecentWorkspaces.set(recent.workspace.configPath, recent.workspace);\n\t\t\t\thasWorkspaces = true;\n\t\t\t}\n\t\t}\n\n\t\t// Fill in all known recently opened workspaces\n\t\tconst workspacePicks: IRecentlyOpenedPick[] = [];\n\t\tfor (const recent of recentlyOpened.workspaces) {\n\t\t\tconst isDirty = isRecentFolder(recent) ? dirtyFolders.has(recent.folderUri) : dirtyWorkspaces.has(recent.workspace.configPath);\n\n\t\t\tworkspacePicks.push(this.toQuickPick(modelService, languageService, labelService, recent, isDirty));\n\t\t}\n\n\t\t// Fill any backup workspace that is not yet shown at the end\n\t\tfor (const dirtyWorkspaceOrFolder of dirtyWorkspacesAndFolders) {\n\t\t\tif (isFolderBackupInfo(dirtyWorkspaceOrFolder) && !recentFolders.has(dirtyWorkspaceOrFolder.folderUri)) {\n\t\t\t\tworkspacePicks.push(this.toQuickPick(modelService, languageService, labelService, dirtyWorkspaceOrFolder, true));\n\t\t\t} else if (isWorkspaceBackupInfo(dirtyWorkspaceOrFolder) && !recentWorkspaces.has(dirtyWorkspaceOrFolder.workspace.configPath)) {\n\t\t\t\tworkspacePicks.push(this.toQuickPick(modelService, languageService, labelService, dirtyWorkspaceOrFolder, true));\n\t\t\t}\n\t\t}\n\n\t\tconst filePicks = recentlyOpened.files.map(p => this.toQuickPick(modelService, languageService, labelService, p, false));\n\n\t\t// focus second entry if the first recent workspace is the current workspace\n\t\tconst firstEntry = recentlyOpened.workspaces[0];\n\t\tconst autoFocusSecondEntry: boolean = firstEntry && contextService.isCurrentWorkspace(isRecentWorkspace(firstEntry) ? firstEntry.workspace : firstEntry.folderUri);\n\n\t\tlet keyMods: IKeyMods | undefined;\n\n\t\tconst workspaceSeparator: IQuickPickSeparator = { type: 'separator', label: hasWorkspaces ? localize('workspacesAndFolders', \"folders & workspaces\") : localize('folders', \"folders\") };\n\t\tconst fileSeparator: IQuickPickSeparator = { type: 'separator', label: localize('files', \"files\") };\n\t\tconst picks = [workspaceSeparator, ...workspacePicks, fileSeparator, ...filePicks];\n\n\t\tconst pick = await quickInputService.pick(picks, {\n\t\t\tcontextKey: inRecentFilesPickerContextKey,\n\t\t\tactiveItem: [...workspacePicks, ...filePicks][autoFocusSecondEntry ? 1 : 0],\n\t\t\tplaceHolder: isMacintosh ? localize('openRecentPlaceholderMac', \"Select to open (hold Cmd-key to force new window or Option-key for same window)\") : localize('openRecentPlaceholder', \"Select to open (hold Ctrl-key to force new window or Alt-key for same window)\"),\n\t\t\tmatchOnDescription: true,\n\t\t\tonKeyMods: mods => keyMods = mods,\n\t\t\tquickNavigate: this.isQuickNavigate() ? { keybindings: keybindingService.lookupKeybindings(this.desc.id) } : undefined,\n\t\t\thideInput: this.isQuickNavigate(),\n\t\t\tonDidTriggerItemButton: async context => {\n\n\t\t\t\t// Remove\n\t\t\t\tif (context.button === this.removeFromRecentlyOpened) {\n\t\t\t\t\tawait workspacesService.removeRecentlyOpened([context.item.resource]);\n\t\t\t\t\tcontext.removeItem();\n\t\t\t\t}\n\n\t\t\t\t// Dirty Folder/Workspace\n\t\t\t\telse if (context.button === this.dirtyRecentlyOpenedFolder || context.button === this.dirtyRecentlyOpenedWorkspace) {\n\t\t\t\t\tconst isDirtyWorkspace = context.button === this.dirtyRecentlyOpenedWorkspace;\n\t\t\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\t\t\ttitle: isDirtyWorkspace ? localize('dirtyWorkspace', \"Workspace with Unsaved Files\") : localize('dirtyFolder', \"Folder with Unsaved Files\"),\n\t\t\t\t\t\tmessage: isDirtyWorkspace ? localize('dirtyWorkspaceConfirm', \"Do you want to open the workspace to review the unsaved files?\") : localize('dirtyFolderConfirm', \"Do you want to open the folder to review the unsaved files?\"),\n\t\t\t\t\t\tdetail: isDirtyWorkspace ? localize('dirtyWorkspaceConfirmDetail', \"Workspaces with unsaved files cannot be removed until all unsaved files have been saved or reverted.\") : localize('dirtyFolderConfirmDetail', \"Folders with unsaved files cannot be removed until all unsaved files have been saved or reverted.\")\n\t\t\t\t\t});\n\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\thostService.openWindow(\n\t\t\t\t\t\t\t[context.item.openable], {\n\t\t\t\t\t\t\tremoteAuthority: context.item.remoteAuthority || null // local window if remoteAuthority is not set or can not be deducted from the openable\n\t\t\t\t\t\t});\n\t\t\t\t\t\tquickInputService.cancel();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (pick) {\n\t\t\treturn hostService.openWindow([pick.openable], {\n\t\t\t\tforceNewWindow: keyMods?.ctrlCmd,\n\t\t\t\tforceReuseWindow: keyMods?.alt,\n\t\t\t\tremoteAuthority: pick.remoteAuthority || null // local window if remoteAuthority is not set or can not be deducted from the openable\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate toQuickPick(modelService: IModelService, languageService: ILanguageService, labelService: ILabelService, recent: IRecent, isDirty: boolean): IRecentlyOpenedPick {\n\t\tlet openable: IWindowOpenable | undefined;\n\t\tlet iconClasses: string[];\n\t\tlet fullLabel: string | undefined;\n\t\tlet resource: URI | undefined;\n\t\tlet isWorkspace = false;\n\n\t\t// Folder\n\t\tif (isRecentFolder(recent)) {\n\t\t\tresource = recent.folderUri;\n\t\t\ticonClasses = getIconClasses(modelService, languageService, resource, FileKind.FOLDER);\n\t\t\topenable = { folderUri: resource };\n\t\t\tfullLabel = recent.label || labelService.getWorkspaceLabel(resource, { verbose: Verbosity.LONG });\n\t\t}\n\n\t\t// Workspace\n\t\telse if (isRecentWorkspace(recent)) {\n\t\t\tresource = recent.workspace.configPath;\n\t\t\ticonClasses = getIconClasses(modelService, languageService, resource, FileKind.ROOT_FOLDER);\n\t\t\topenable = { workspaceUri: resource };\n\t\t\tfullLabel = recent.label || labelService.getWorkspaceLabel(recent.workspace, { verbose: Verbosity.LONG });\n\t\t\tisWorkspace = true;\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tresource = recent.fileUri;\n\t\t\ticonClasses = getIconClasses(modelService, languageService, resource, FileKind.FILE);\n\t\t\topenable = { fileUri: resource };\n\t\t\tfullLabel = recent.label || labelService.getUriLabel(resource);\n\t\t}\n\n\t\tconst { name, parentPath } = splitRecentLabel(fullLabel);\n\n\t\treturn {\n\t\t\ticonClasses,\n\t\t\tlabel: name,\n\t\t\tariaLabel: isDirty ? isWorkspace ? localize('recentDirtyWorkspaceAriaLabel', \"{0}, workspace with unsaved changes\", name) : localize('recentDirtyFolderAriaLabel', \"{0}, folder with unsaved changes\", name) : name,\n\t\t\tdescription: parentPath,\n\t\t\tbuttons: isDirty ? [isWorkspace ? this.dirtyRecentlyOpenedWorkspace : this.dirtyRecentlyOpenedFolder] : [this.removeFromRecentlyOpened],\n\t\t\topenable,\n\t\t\tresource,\n\t\t\tremoteAuthority: recent.remoteAuthority\n\t\t};\n\t}\n}\n\nexport class OpenRecentAction extends BaseOpenRecentAction {\n\n\tstatic ID = 'workbench.action.openRecent';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenRecentAction.ID,\n\t\t\ttitle: {\n\t\t\t\t...localize2('openRecent', \"Open Recent...\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'miMore', comment: ['&& denotes a mnemonic'] }, \"&&More...\"),\n\t\t\t},\n\t\t\tcategory: Categories.File,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyR,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyR }\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarRecentMenu,\n\t\t\t\tgroup: 'y_more',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected isQuickNavigate(): boolean {\n\t\treturn false;\n\t}\n}\n\nclass QuickPickRecentAction extends BaseOpenRecentAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.quickOpenRecent',\n\t\t\ttitle: localize2('quickOpenRecent', 'Quick Open Recent...'),\n\t\t\tcategory: Categories.File,\n\t\t\tf1: false // hide quick pickers from command palette to not confuse with the other entry that shows a input field\n\t\t});\n\t}\n\n\tprotected isQuickNavigate(): boolean {\n\t\treturn true;\n\t}\n}\n\nclass ToggleFullScreenAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.toggleFullScreen',\n\t\t\ttitle: {\n\t\t\t\t...localize2('toggleFullScreen', \"Toggle Full Screen\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'miToggleFullScreen', comment: ['&& denotes a mnemonic'] }, \"&&Full Screen\"),\n\t\t\t},\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyCode.F11,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyF\n\t\t\t\t}\n\t\t\t},\n\t\t\tprecondition: IsIOSContext.toNegated(),\n\t\t\ttoggled: IsMainWindowFullscreenContext,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.MenubarAppearanceMenu,\n\t\t\t\tgroup: '1_toggle_view',\n\t\t\t\torder: 1\n\t\t\t}]\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst hostService = accessor.get(IHostService);\n\n\t\treturn hostService.toggleFullScreen(getActiveWindow());\n\t}\n}\n\nexport class ReloadWindowAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.reloadWindow';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ReloadWindowAction.ID,\n\t\t\ttitle: localize2('reloadWindow', 'Reload Window'),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\t\t\t\twhen: IsDevelopmentContext,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyR\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst hostService = accessor.get(IHostService);\n\n\t\treturn hostService.reload();\n\t}\n}\n\nclass ShowAboutDialogAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.showAboutDialog',\n\t\t\ttitle: {\n\t\t\t\t...localize2('about', \"About\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'miAbout', comment: ['&& denotes a mnemonic'] }, \"&&About\"),\n\t\t\t},\n\t\t\tcategory: Categories.Help,\n\t\t\tf1: true,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarHelpMenu,\n\t\t\t\tgroup: 'z_about',\n\t\t\t\torder: 1,\n\t\t\t\twhen: IsMacNativeContext.toNegated()\n\t\t\t}\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst dialogService = accessor.get(IDialogService);\n\n\t\treturn dialogService.about();\n\t}\n}\n\nclass NewWindowAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.newWindow',\n\t\t\ttitle: {\n\t\t\t\t...localize2('newWindow', \"New Window\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'miNewWindow', comment: ['&& denotes a mnemonic'] }, \"New &&Window\"),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: isWeb ? (isWindows ? KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.Shift | KeyCode.KeyN) : KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift | KeyCode.KeyN) : KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyN,\n\t\t\t\tsecondary: isWeb ? [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyN] : undefined\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarFileMenu,\n\t\t\t\tgroup: '1_new',\n\t\t\t\torder: 3\n\t\t\t}\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst hostService = accessor.get(IHostService);\n\n\t\treturn hostService.openWindow({ remoteAuthority: null });\n\t}\n}\n\nclass BlurAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.blur',\n\t\t\ttitle: localize2('blur', 'Remove keyboard focus from focused element')\n\t\t});\n\t}\n\n\trun(): void {\n\t\tconst activeElement = getActiveElement();\n\t\tif (isHTMLElement(activeElement)) {\n\t\t\tactiveElement.blur();\n\t\t}\n\t}\n}\n\n// --- Actions Registration\n\nregisterAction2(NewWindowAction);\nregisterAction2(ToggleFullScreenAction);\nregisterAction2(QuickPickRecentAction);\nregisterAction2(OpenRecentAction);\nregisterAction2(ReloadWindowAction);\nregisterAction2(ShowAboutDialogAction);\nregisterAction2(BlurAction);\n\n// --- Commands/Keybindings Registration\n\nconst recentFilesPickerContext = ContextKeyExpr.and(inQuickPickContext, ContextKeyExpr.has(inRecentFilesPickerContextKey));\n\nconst quickPickNavigateNextInRecentFilesPickerId = 'workbench.action.quickOpenNavigateNextInRecentFilesPicker';\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: quickPickNavigateNextInRecentFilesPickerId,\n\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\thandler: getQuickNavigateHandler(quickPickNavigateNextInRecentFilesPickerId, true),\n\twhen: recentFilesPickerContext,\n\tprimary: KeyMod.CtrlCmd | KeyCode.KeyR,\n\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyR }\n});\n\nconst quickPickNavigatePreviousInRecentFilesPicker = 'workbench.action.quickOpenNavigatePreviousInRecentFilesPicker';\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: quickPickNavigatePreviousInRecentFilesPicker,\n\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\thandler: getQuickNavigateHandler(quickPickNavigatePreviousInRecentFilesPicker, false),\n\twhen: recentFilesPickerContext,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyR,\n\tmac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyR }\n});\n\nCommandsRegistry.registerCommand('workbench.action.toggleConfirmBeforeClose', accessor => {\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst setting = configurationService.inspect<'always' | 'keyboardOnly' | 'never'>('window.confirmBeforeClose').userValue;\n\n\treturn configurationService.updateValue('window.confirmBeforeClose', setting === 'never' ? 'keyboardOnly' : 'never');\n});\n\n// --- Menu Registration\n\nMenuRegistry.appendMenuItem(MenuId.MenubarFileMenu, {\n\tgroup: 'z_ConfirmClose',\n\tcommand: {\n\t\tid: 'workbench.action.toggleConfirmBeforeClose',\n\t\ttitle: localize('miConfirmClose', \"Confirm Before Close\"),\n\t\ttoggled: ContextKeyExpr.notEquals('config.window.confirmBeforeClose', 'never')\n\t},\n\torder: 1,\n\twhen: IsWebContext\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarFileMenu, {\n\ttitle: localize({ key: 'miOpenRecent', comment: ['&& denotes a mnemonic'] }, \"Open &&Recent\"),\n\tsubmenu: MenuId.MenubarRecentMenu,\n\tgroup: '2_open',\n\torder: 4\n});\n"],
  "mappings": "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",
  "names": []
}
