{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/actions/workspaceCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../nls.js';\nimport { hasWorkspaceFileExtension, IWorkspaceContextService } from '../../../platform/workspace/common/workspace.js';\nimport { IWorkspaceEditingService } from '../../services/workspaces/common/workspaceEditing.js';\nimport { dirname } from '../../../base/common/resources.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { mnemonicButtonLabel } from '../../../base/common/labels.js';\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nimport { ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../platform/label/common/label.js';\nimport { IQuickInputService, IPickOptions, IQuickPickItem } from '../../../platform/quickinput/common/quickInput.js';\nimport { getIconClasses } from '../../../editor/common/services/getIconClasses.js';\nimport { IModelService } from '../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../editor/common/languages/language.js';\nimport { IFileDialogService, IPickAndOpenOptions } from '../../../platform/dialogs/common/dialogs.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { IOpenEmptyWindowOptions, IOpenWindowOptions, IWindowOpenable } from '../../../platform/window/common/window.js';\nimport { IRecent, IWorkspacesService } from '../../../platform/workspaces/common/workspaces.js';\nimport { IPathService } from '../../services/path/common/pathService.js';\nimport { ILocalizedString } from '../../../platform/action/common/action.js';\n\nexport const ADD_ROOT_FOLDER_COMMAND_ID = 'addRootFolder';\nexport const ADD_ROOT_FOLDER_LABEL: ILocalizedString = localize2('addFolderToWorkspace', 'Add Folder to Workspace...');\n\nexport const SET_ROOT_FOLDER_COMMAND_ID = 'setRootFolder';\n\nexport const PICK_WORKSPACE_FOLDER_COMMAND_ID = '_workbench.pickWorkspaceFolder';\n\n// Command registration\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.action.files.openFileFolderInNewWindow',\n\thandler: (accessor: ServicesAccessor) => accessor.get(IFileDialogService).pickFileFolderAndOpen({ forceNewWindow: true })\n});\n\nCommandsRegistry.registerCommand({\n\tid: '_files.pickFolderAndOpen',\n\thandler: (accessor: ServicesAccessor, options: { forceNewWindow: boolean }) => accessor.get(IFileDialogService).pickFolderAndOpen(options)\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.action.files.openFolderInNewWindow',\n\thandler: (accessor: ServicesAccessor) => accessor.get(IFileDialogService).pickFolderAndOpen({ forceNewWindow: true })\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.action.files.openFileInNewWindow',\n\thandler: (accessor: ServicesAccessor) => accessor.get(IFileDialogService).pickFileAndOpen({ forceNewWindow: true })\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'workbench.action.openWorkspaceInNewWindow',\n\thandler: (accessor: ServicesAccessor) => accessor.get(IFileDialogService).pickWorkspaceAndOpen({ forceNewWindow: true })\n});\n\nCommandsRegistry.registerCommand({\n\tid: ADD_ROOT_FOLDER_COMMAND_ID,\n\thandler: async (accessor) => {\n\t\tconst workspaceEditingService = accessor.get(IWorkspaceEditingService);\n\n\t\tconst folders = await selectWorkspaceFolders(accessor);\n\t\tif (!folders || !folders.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait workspaceEditingService.addFolders(folders.map(folder => ({ uri: folder })));\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: SET_ROOT_FOLDER_COMMAND_ID,\n\thandler: async (accessor) => {\n\t\tconst workspaceEditingService = accessor.get(IWorkspaceEditingService);\n\t\tconst contextService = accessor.get(IWorkspaceContextService);\n\n\t\tconst folders = await selectWorkspaceFolders(accessor);\n\t\tif (!folders || !folders.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait workspaceEditingService.updateFolders(0, contextService.getWorkspace().folders.length, folders.map(folder => ({ uri: folder })));\n\t}\n});\n\nasync function selectWorkspaceFolders(accessor: ServicesAccessor): Promise<URI[] | undefined> {\n\tconst dialogsService = accessor.get(IFileDialogService);\n\tconst pathService = accessor.get(IPathService);\n\n\tconst folders = await dialogsService.showOpenDialog({\n\t\topenLabel: mnemonicButtonLabel(localize({ key: 'add', comment: ['&& denotes a mnemonic'] }, \"&&Add\")),\n\t\ttitle: localize('addFolderToWorkspaceTitle', \"Add Folder to Workspace\"),\n\t\tcanSelectFolders: true,\n\t\tcanSelectMany: true,\n\t\tdefaultUri: await dialogsService.defaultFolderPath(),\n\t\tavailableFileSystems: [pathService.defaultUriScheme]\n\t});\n\n\treturn folders;\n}\n\nCommandsRegistry.registerCommand(PICK_WORKSPACE_FOLDER_COMMAND_ID, async function (accessor, args?: [IPickOptions<IQuickPickItem>, CancellationToken]) {\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst labelService = accessor.get(ILabelService);\n\tconst contextService = accessor.get(IWorkspaceContextService);\n\tconst modelService = accessor.get(IModelService);\n\tconst languageService = accessor.get(ILanguageService);\n\n\tconst folders = contextService.getWorkspace().folders;\n\tif (!folders.length) {\n\t\treturn;\n\t}\n\n\tconst folderPicks: IQuickPickItem[] = folders.map(folder => {\n\t\tconst label = folder.name;\n\t\tconst description = labelService.getUriLabel(dirname(folder.uri), { relative: true });\n\n\t\treturn {\n\t\t\tlabel,\n\t\t\tdescription: description !== label ? description : undefined, // https://github.com/microsoft/vscode/issues/183418\n\t\t\tfolder,\n\t\t\ticonClasses: getIconClasses(modelService, languageService, folder.uri, FileKind.ROOT_FOLDER)\n\t\t};\n\t});\n\n\tconst options: IPickOptions<IQuickPickItem> = (args ? args[0] : undefined) || Object.create(null);\n\n\tif (!options.activeItem) {\n\t\toptions.activeItem = folderPicks[0];\n\t}\n\n\tif (!options.placeHolder) {\n\t\toptions.placeHolder = localize('workspaceFolderPickerPlaceholder', \"Select workspace folder\");\n\t}\n\n\tif (typeof options.matchOnDescription !== 'boolean') {\n\t\toptions.matchOnDescription = true;\n\t}\n\n\tconst token: CancellationToken = (args ? args[1] : undefined) || CancellationToken.None;\n\tconst pick = await quickInputService.pick(folderPicks, options, token);\n\tif (pick) {\n\t\treturn folders[folderPicks.indexOf(pick)];\n\t}\n\n\treturn;\n});\n\n// API Command registration\n\ninterface IOpenFolderAPICommandOptions {\n\tforceNewWindow?: boolean;\n\tforceReuseWindow?: boolean;\n\tnoRecentEntry?: boolean;\n\tforceLocalWindow?: boolean;\n\tforceProfile?: string;\n\tforceTempProfile?: boolean;\n}\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.openFolder',\n\thandler: (accessor: ServicesAccessor, uriComponents?: UriComponents, arg?: boolean | IOpenFolderAPICommandOptions) => {\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\t// Be compatible to previous args by converting to options\n\t\tif (typeof arg === 'boolean') {\n\t\t\targ = { forceNewWindow: arg };\n\t\t}\n\n\t\t// Without URI, ask to pick a folder or workspace to open\n\t\tif (!uriComponents) {\n\t\t\tconst options: IPickAndOpenOptions = {\n\t\t\t\tforceNewWindow: arg?.forceNewWindow\n\t\t\t};\n\n\t\t\tif (arg?.forceLocalWindow) {\n\t\t\t\toptions.remoteAuthority = null;\n\t\t\t\toptions.availableFileSystems = ['file'];\n\t\t\t}\n\n\t\t\treturn commandService.executeCommand('_files.pickFolderAndOpen', options);\n\t\t}\n\n\t\tconst uri = URI.from(uriComponents, true);\n\n\t\tconst options: IOpenWindowOptions = {\n\t\t\tforceNewWindow: arg?.forceNewWindow,\n\t\t\tforceReuseWindow: arg?.forceReuseWindow,\n\t\t\tnoRecentEntry: arg?.noRecentEntry,\n\t\t\tremoteAuthority: arg?.forceLocalWindow ? null : undefined,\n\t\t\tforceProfile: arg?.forceProfile,\n\t\t\tforceTempProfile: arg?.forceTempProfile,\n\t\t};\n\n\t\tconst uriToOpen: IWindowOpenable = (hasWorkspaceFileExtension(uri) || uri.scheme === Schemas.untitled) ? { workspaceUri: uri } : { folderUri: uri };\n\t\treturn commandService.executeCommand('_files.windowOpen', [uriToOpen], options);\n\t},\n\tmetadata: {\n\t\tdescription: 'Open a folder or workspace in the current window or new window depending on the newWindow argument. Note that opening in the same window will shutdown the current extension host process and start a new one on the given folder/workspace unless the newWindow parameter is set to true.',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'uri', description: '(optional) Uri of the folder or workspace file to open. If not provided, a native dialog will ask the user for the folder',\n\t\t\t\tconstraint: (value: any) => value === undefined || value === null || value instanceof URI\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'options',\n\t\t\t\tdescription: '(optional) Options. Object with the following properties: ' +\n\t\t\t\t\t'`forceNewWindow`: Whether to open the folder/workspace in a new window or the same. Defaults to opening in the same window. ' +\n\t\t\t\t\t'`forceReuseWindow`: Whether to force opening the folder/workspace in the same window.  Defaults to false. ' +\n\t\t\t\t\t'`noRecentEntry`: Whether the opened URI will appear in the \\'Open Recent\\' list. Defaults to false. ' +\n\t\t\t\t\t'Note, for backward compatibility, options can also be of type boolean, representing the `forceNewWindow` setting.',\n\t\t\t\tconstraint: (value: any) => value === undefined || typeof value === 'object' || typeof value === 'boolean'\n\t\t\t}\n\t\t]\n\t}\n});\n\ninterface INewWindowAPICommandOptions {\n\treuseWindow?: boolean;\n\t/**\n\t * If set, defines the remoteAuthority of the new window. `null` will open a local window.\n\t * If not set, defaults to remoteAuthority of the current window.\n\t */\n\tremoteAuthority?: string | null;\n}\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.newWindow',\n\thandler: (accessor: ServicesAccessor, options?: INewWindowAPICommandOptions) => {\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\tconst commandOptions: IOpenEmptyWindowOptions = {\n\t\t\tforceReuseWindow: options && options.reuseWindow,\n\t\t\tremoteAuthority: options && options.remoteAuthority\n\t\t};\n\n\t\treturn commandService.executeCommand('_files.newWindow', commandOptions);\n\t},\n\tmetadata: {\n\t\tdescription: 'Opens an new window depending on the newWindow argument.',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'options',\n\t\t\t\tdescription: '(optional) Options. Object with the following properties: ' +\n\t\t\t\t\t'`reuseWindow`: Whether to open a new window or the same. Defaults to opening in a new window. ',\n\t\t\t\tconstraint: (value: any) => value === undefined || typeof value === 'object'\n\t\t\t}\n\t\t]\n\t}\n});\n\n// recent history commands\n\nCommandsRegistry.registerCommand('_workbench.removeFromRecentlyOpened', function (accessor: ServicesAccessor, uri: URI) {\n\tconst workspacesService = accessor.get(IWorkspacesService);\n\treturn workspacesService.removeRecentlyOpened([uri]);\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.removeFromRecentlyOpened',\n\thandler: (accessor: ServicesAccessor, path: string | URI): Promise<any> => {\n\t\tconst workspacesService = accessor.get(IWorkspacesService);\n\n\t\tif (typeof path === 'string') {\n\t\t\tpath = path.match(/^[^:/?#]+:\\/\\//) ? URI.parse(path) : URI.file(path);\n\t\t} else {\n\t\t\tpath = URI.revive(path); // called from extension host\n\t\t}\n\n\t\treturn workspacesService.removeRecentlyOpened([path]);\n\t},\n\tmetadata: {\n\t\tdescription: 'Removes an entry with the given path from the recently opened list.',\n\t\targs: [\n\t\t\t{ name: 'path', description: 'URI or URI string to remove from recently opened.', constraint: (value: any) => typeof value === 'string' || value instanceof URI }\n\t\t]\n\t}\n});\n\ninterface RecentEntry {\n\turi: URI;\n\ttype: 'workspace' | 'folder' | 'file';\n\tlabel?: string;\n\tremoteAuthority?: string;\n}\n\nCommandsRegistry.registerCommand('_workbench.addToRecentlyOpened', async function (accessor: ServicesAccessor, recentEntry: RecentEntry) {\n\tconst workspacesService = accessor.get(IWorkspacesService);\n\tconst uri = recentEntry.uri;\n\tconst label = recentEntry.label;\n\tconst remoteAuthority = recentEntry.remoteAuthority;\n\n\tlet recent: IRecent | undefined = undefined;\n\tif (recentEntry.type === 'workspace') {\n\t\tconst workspace = await workspacesService.getWorkspaceIdentifier(uri);\n\t\trecent = { workspace, label, remoteAuthority };\n\t} else if (recentEntry.type === 'folder') {\n\t\trecent = { folderUri: uri, label, remoteAuthority };\n\t} else {\n\t\trecent = { fileUri: uri, label, remoteAuthority };\n\t}\n\n\treturn workspacesService.addRecentlyOpened([recent]);\n});\n\nCommandsRegistry.registerCommand('_workbench.getRecentlyOpened', async function (accessor: ServicesAccessor) {\n\tconst workspacesService = accessor.get(IWorkspacesService);\n\n\treturn workspacesService.getRecentlyOpened();\n});\n"],
  "mappings": "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",
  "names": ["options"]
}
