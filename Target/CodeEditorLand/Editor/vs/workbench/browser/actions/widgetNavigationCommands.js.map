{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/actions/widgetNavigationCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport { KeyCode, KeyMod } from \"../../../base/common/keyCodes.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tcombinedDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { IConfigurationService } from \"../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\tWorkbenchListFocusContextKey,\n\tWorkbenchListScrollAtBottomContextKey,\n\tWorkbenchListScrollAtTopContextKey,\n} from \"../../../platform/list/browser/listService.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../common/contributions.js\";\n\n/** INavigableContainer represents a logical container composed of widgets that can\n\tbe navigated back and forth with key shortcuts */\ninterface INavigableContainer {\n\t/**\n\t * The container may coomposed of multiple parts that share no DOM ancestor\n\t * (e.g., the main body and filter box of MarkersView may be separated).\n\t * To track the focus of container we must pass in focus/blur events of all parts\n\t * as `focusNotifiers`.\n\t *\n\t * Each element of `focusNotifiers` notifies the focus/blur event for a part of\n\t * the container. The container is considered focused if at least one part being\n\t * focused, and blurred if all parts being blurred.\n\t */\n\treadonly focusNotifiers: readonly IFocusNotifier[];\n\treadonly name?: string; // for debugging\n\tfocusPreviousWidget(): void;\n\tfocusNextWidget(): void;\n}\n\ninterface IFocusNotifier {\n\treadonly onDidFocus: Event<any>;\n\treadonly onDidBlur: Event<any>;\n}\n\nfunction handleFocusEventsGroup(\n\tgroup: readonly IFocusNotifier[],\n\thandler: (isFocus: boolean) => void,\n\tonPartFocusChange?: (index: number, state: string) => void,\n): IDisposable {\n\tconst focusedIndices = new Set<number>();\n\treturn combinedDisposable(\n\t\t...group.map((events, index) =>\n\t\t\tcombinedDisposable(\n\t\t\t\tevents.onDidFocus(() => {\n\t\t\t\t\tonPartFocusChange?.(index, \"focus\");\n\t\t\t\t\tif (!focusedIndices.size) {\n\t\t\t\t\t\thandler(true);\n\t\t\t\t\t}\n\t\t\t\t\tfocusedIndices.add(index);\n\t\t\t\t}),\n\t\t\t\tevents.onDidBlur(() => {\n\t\t\t\t\tonPartFocusChange?.(index, \"blur\");\n\t\t\t\t\tfocusedIndices.delete(index);\n\t\t\t\t\tif (!focusedIndices.size) {\n\t\t\t\t\t\thandler(false);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t),\n\t\t),\n\t);\n}\n\nconst NavigableContainerFocusedContextKey = new RawContextKey<boolean>(\n\t\"navigableContainerFocused\",\n\tfalse,\n);\n\nclass NavigableContainerManager implements IDisposable {\n\tstatic readonly ID = \"workbench.contrib.navigableContainerManager\";\n\n\tprivate static INSTANCE: NavigableContainerManager | undefined;\n\n\tprivate readonly containers = new Set<INavigableContainer>();\n\tprivate lastContainer: INavigableContainer | undefined;\n\tprivate focused: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILogService private logService: ILogService,\n\t\t@IConfigurationService private configurationService: IConfigurationService) {\n\t\tthis.focused = NavigableContainerFocusedContextKey.bindTo(contextKeyService);\n\t\tNavigableContainerManager.INSTANCE = this;\n\t}\n\n\tdispose(): void {\n\t\tthis.containers.clear();\n\t\tthis.focused.reset();\n\t\tNavigableContainerManager.INSTANCE = undefined;\n\t}\n\n\tprivate get debugEnabled(): boolean {\n\t\treturn this.configurationService.getValue(\n\t\t\t\"workbench.navigibleContainer.enableDebug\",\n\t\t);\n\t}\n\n\tprivate log(msg: string, ...args: any[]): void {\n\t\tif (this.debugEnabled) {\n\t\t\tthis.logService.debug(msg, ...args);\n\t\t}\n\t}\n\n\tstatic register(container: INavigableContainer): IDisposable {\n\t\tconst instance = this.INSTANCE;\n\t\tif (!instance) {\n\t\t\treturn Disposable.None;\n\t\t}\n\t\tinstance.containers.add(container);\n\t\tinstance.log(\"NavigableContainerManager.register\", container.name);\n\n\t\treturn combinedDisposable(\n\t\t\thandleFocusEventsGroup(\n\t\t\t\tcontainer.focusNotifiers,\n\t\t\t\t(isFocus) => {\n\t\t\t\t\tif (isFocus) {\n\t\t\t\t\t\tinstance.log(\n\t\t\t\t\t\t\t\"NavigableContainerManager.focus\",\n\t\t\t\t\t\t\tcontainer.name,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tinstance.focused.set(true);\n\t\t\t\t\t\tinstance.lastContainer = container;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinstance.log(\n\t\t\t\t\t\t\t\"NavigableContainerManager.blur\",\n\t\t\t\t\t\t\tcontainer.name,\n\t\t\t\t\t\t\tinstance.lastContainer?.name,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (instance.lastContainer === container) {\n\t\t\t\t\t\t\tinstance.focused.set(false);\n\t\t\t\t\t\t\tinstance.lastContainer = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(index: number, event: string) => {\n\t\t\t\t\tinstance.log(\n\t\t\t\t\t\t\"NavigableContainerManager.partFocusChange\",\n\t\t\t\t\t\tcontainer.name,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tevent,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t),\n\t\t\ttoDisposable(() => {\n\t\t\t\tinstance.containers.delete(container);\n\t\t\t\tinstance.log(\n\t\t\t\t\t\"NavigableContainerManager.unregister\",\n\t\t\t\t\tcontainer.name,\n\t\t\t\t\tinstance.lastContainer?.name,\n\t\t\t\t);\n\t\t\t\tif (instance.lastContainer === container) {\n\t\t\t\t\tinstance.focused.set(false);\n\t\t\t\t\tinstance.lastContainer = undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tstatic getActive(): INavigableContainer | undefined {\n\t\treturn this.INSTANCE?.lastContainer;\n\t}\n}\n\nexport function registerNavigableContainer(\n\tcontainer: INavigableContainer,\n): IDisposable {\n\treturn NavigableContainerManager.register(container);\n}\n\nregisterWorkbenchContribution2(\n\tNavigableContainerManager.ID,\n\tNavigableContainerManager,\n\tWorkbenchPhase.BlockStartup,\n);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"widgetNavigation.focusPrevious\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tNavigableContainerFocusedContextKey,\n\t\tContextKeyExpr.or(\n\t\t\tWorkbenchListFocusContextKey?.negate(),\n\t\t\tWorkbenchListScrollAtTopContextKey,\n\t\t),\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\thandler: () => {\n\t\tconst activeContainer = NavigableContainerManager.getActive();\n\t\tactiveContainer?.focusPreviousWidget();\n\t},\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: \"widgetNavigation.focusNext\",\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tNavigableContainerFocusedContextKey,\n\t\tContextKeyExpr.or(\n\t\t\tWorkbenchListFocusContextKey?.negate(),\n\t\t\tWorkbenchListScrollAtBottomContextKey,\n\t\t),\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\thandler: () => {\n\t\tconst activeContainer = NavigableContainerManager.getActive();\n\t\tactiveContainer?.focusNextWidget();\n\t},\n});\n"],
  "mappings": "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",
  "names": []
}
