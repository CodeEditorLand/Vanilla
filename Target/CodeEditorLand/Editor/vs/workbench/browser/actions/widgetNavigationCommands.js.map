{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/actions/widgetNavigationCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyMod, KeyCode } from '../../../base/common/keyCodes.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingWeight, KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { WorkbenchListFocusContextKey, WorkbenchListScrollAtBottomContextKey, WorkbenchListScrollAtTopContextKey } from '../../../platform/list/browser/listService.js';\nimport { Event } from '../../../base/common/event.js';\nimport { combinedDisposable, toDisposable, IDisposable, Disposable } from '../../../base/common/lifecycle.js';\nimport { WorkbenchPhase, registerWorkbenchContribution2 } from '../../common/contributions.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\n\n/** INavigableContainer represents a logical container composed of widgets that can\n\tbe navigated back and forth with key shortcuts */\ninterface INavigableContainer {\n\t/**\n\t * The container may coomposed of multiple parts that share no DOM ancestor\n\t * (e.g., the main body and filter box of MarkersView may be separated).\n\t * To track the focus of container we must pass in focus/blur events of all parts\n\t * as `focusNotifiers`.\n\t *\n\t * Each element of `focusNotifiers` notifies the focus/blur event for a part of\n\t * the container. The container is considered focused if at least one part being\n\t * focused, and blurred if all parts being blurred.\n\t */\n\treadonly focusNotifiers: readonly IFocusNotifier[];\n\treadonly name?: string; // for debugging\n\tfocusPreviousWidget(): void;\n\tfocusNextWidget(): void;\n}\n\ninterface IFocusNotifier {\n\treadonly onDidFocus: Event<any>;\n\treadonly onDidBlur: Event<any>;\n}\n\nfunction handleFocusEventsGroup(group: readonly IFocusNotifier[], handler: (isFocus: boolean) => void, onPartFocusChange?: (index: number, state: string) => void): IDisposable {\n\tconst focusedIndices = new Set<number>();\n\treturn combinedDisposable(...group.map((events, index) => combinedDisposable(\n\t\tevents.onDidFocus(() => {\n\t\t\tonPartFocusChange?.(index, 'focus');\n\t\t\tif (!focusedIndices.size) {\n\t\t\t\thandler(true);\n\t\t\t}\n\t\t\tfocusedIndices.add(index);\n\t\t}),\n\t\tevents.onDidBlur(() => {\n\t\t\tonPartFocusChange?.(index, 'blur');\n\t\t\tfocusedIndices.delete(index);\n\t\t\tif (!focusedIndices.size) {\n\t\t\t\thandler(false);\n\t\t\t}\n\t\t}),\n\t)));\n}\n\nconst NavigableContainerFocusedContextKey = new RawContextKey<boolean>('navigableContainerFocused', false);\n\nclass NavigableContainerManager implements IDisposable {\n\n\tstatic readonly ID = 'workbench.contrib.navigableContainerManager';\n\n\tprivate static INSTANCE: NavigableContainerManager | undefined;\n\n\tprivate readonly containers = new Set<INavigableContainer>();\n\tprivate lastContainer: INavigableContainer | undefined;\n\tprivate focused: IContextKey<boolean>;\n\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILogService private logService: ILogService,\n\t\t@IConfigurationService private configurationService: IConfigurationService) {\n\t\tthis.focused = NavigableContainerFocusedContextKey.bindTo(contextKeyService);\n\t\tNavigableContainerManager.INSTANCE = this;\n\t}\n\n\tdispose(): void {\n\t\tthis.containers.clear();\n\t\tthis.focused.reset();\n\t\tNavigableContainerManager.INSTANCE = undefined;\n\t}\n\n\tprivate get debugEnabled(): boolean {\n\t\treturn this.configurationService.getValue('workbench.navigibleContainer.enableDebug');\n\t}\n\n\tprivate log(msg: string, ...args: any[]): void {\n\t\tif (this.debugEnabled) {\n\t\t\tthis.logService.debug(msg, ...args);\n\t\t}\n\t}\n\n\tstatic register(container: INavigableContainer): IDisposable {\n\t\tconst instance = this.INSTANCE;\n\t\tif (!instance) {\n\t\t\treturn Disposable.None;\n\t\t}\n\t\tinstance.containers.add(container);\n\t\tinstance.log('NavigableContainerManager.register', container.name);\n\n\t\treturn combinedDisposable(\n\t\t\thandleFocusEventsGroup(container.focusNotifiers, (isFocus) => {\n\t\t\t\tif (isFocus) {\n\t\t\t\t\tinstance.log('NavigableContainerManager.focus', container.name);\n\t\t\t\t\tinstance.focused.set(true);\n\t\t\t\t\tinstance.lastContainer = container;\n\t\t\t\t} else {\n\t\t\t\t\tinstance.log('NavigableContainerManager.blur', container.name, instance.lastContainer?.name);\n\t\t\t\t\tif (instance.lastContainer === container) {\n\t\t\t\t\t\tinstance.focused.set(false);\n\t\t\t\t\t\tinstance.lastContainer = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, (index: number, event: string) => {\n\t\t\t\tinstance.log('NavigableContainerManager.partFocusChange', container.name, index, event);\n\t\t\t}),\n\t\t\ttoDisposable(() => {\n\t\t\t\tinstance.containers.delete(container);\n\t\t\t\tinstance.log('NavigableContainerManager.unregister', container.name, instance.lastContainer?.name);\n\t\t\t\tif (instance.lastContainer === container) {\n\t\t\t\t\tinstance.focused.set(false);\n\t\t\t\t\tinstance.lastContainer = undefined;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tstatic getActive(): INavigableContainer | undefined {\n\t\treturn this.INSTANCE?.lastContainer;\n\t}\n}\n\nexport function registerNavigableContainer(container: INavigableContainer): IDisposable {\n\treturn NavigableContainerManager.register(container);\n}\n\nregisterWorkbenchContribution2(NavigableContainerManager.ID, NavigableContainerManager, WorkbenchPhase.BlockStartup);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'widgetNavigation.focusPrevious',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tNavigableContainerFocusedContextKey,\n\t\tContextKeyExpr.or(\n\t\t\tWorkbenchListFocusContextKey?.negate(),\n\t\t\tWorkbenchListScrollAtTopContextKey,\n\t\t)\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\thandler: () => {\n\t\tconst activeContainer = NavigableContainerManager.getActive();\n\t\tactiveContainer?.focusPreviousWidget();\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'widgetNavigation.focusNext',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tNavigableContainerFocusedContextKey,\n\t\tContextKeyExpr.or(\n\t\t\tWorkbenchListFocusContextKey?.negate(),\n\t\t\tWorkbenchListScrollAtBottomContextKey,\n\t\t)\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\thandler: () => {\n\t\tconst activeContainer = NavigableContainerManager.getActive();\n\t\tactiveContainer?.focusNextWidget();\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
