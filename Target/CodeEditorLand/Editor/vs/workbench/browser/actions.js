var A=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var d=(r,o,t,n)=>{for(var e=n>1?void 0:n?y(o,t):o,i=r.length-1,s;i>=0;i--)(s=r[i])&&(e=(n?s(o,t,e):s(e))||e);return n&&e&&A(o,t,e),e},c=(r,o)=>(t,n)=>o(t,n,r);import"../../base/common/actions.js";import{Emitter as u}from"../../base/common/event.js";import{Disposable as p,DisposableStore as h}from"../../base/common/lifecycle.js";import{createAndFillInActionBarActions as m}from"../../platform/actions/browser/menuEntryActionViewItem.js";import{IMenuService as v,SubmenuItemAction as I}from"../../platform/actions/common/actions.js";import{IContextKeyService as l}from"../../platform/contextkey/common/contextkey.js";class g extends p{constructor(t,n,e,i){super();this.options=n;this.menuService=e;this.contextKeyService=i;this.menu=this._register(e.createMenu(t,i)),this._register(this.menu.onDidChange(()=>this.updateActions())),this.updateActions()}menu;_primaryActions=[];get primaryActions(){return this._primaryActions}_secondaryActions=[];get secondaryActions(){return this._secondaryActions}_onDidChange=this._register(new u);onDidChange=this._onDidChange.event;disposables=this._register(new h);updateActions(){this.disposables.clear(),this._primaryActions=[],this._secondaryActions=[],m(this.menu,this.options,{primary:this._primaryActions,secondary:this._secondaryActions}),this.disposables.add(this.updateSubmenus([...this._primaryActions,...this._secondaryActions],{})),this._onDidChange.fire()}updateSubmenus(t,n){const e=new h;for(const i of t)if(i instanceof I&&!n[i.item.submenu.id]){const s=n[i.item.submenu.id]=e.add(this.menuService.createMenu(i.item.submenu,this.contextKeyService));e.add(s.onDidChange(()=>this.updateActions())),e.add(this.updateSubmenus(i.actions,n))}return e}}let a=class extends p{constructor(t,n,e,i,s){super();this.menuId=t;this.contextMenuId=n;this.options=e;this.contextKeyService=i;this.menuService=s;this.menuActions=this._register(new g(t,this.options,s,i)),this._register(this.menuActions.onDidChange(()=>this._onDidChange.fire()))}menuActions;_onDidChange=this._register(new u);onDidChange=this._onDidChange.event;getPrimaryActions(){return this.menuActions.primaryActions}getSecondaryActions(){return this.menuActions.secondaryActions}getContextMenuActions(){const t=[];if(this.contextMenuId){const n=this.menuService.getMenuActions(this.contextMenuId,this.contextKeyService,this.options);m(n,{primary:[],secondary:t})}return t}};a=d([c(3,l),c(4,v)],a);export{a as CompositeMenuActions};
