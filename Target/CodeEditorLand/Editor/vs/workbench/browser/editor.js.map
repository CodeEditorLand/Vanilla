{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/editor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from \"../../base/common/async.js\";\nimport { Emitter } from \"../../base/common/event.js\";\nimport { Iterable } from \"../../base/common/iterator.js\";\nimport { type IDisposable, toDisposable } from \"../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../base/common/network.js\";\nimport type { URI } from \"../../base/common/uri.js\";\nimport { localize } from \"../../nls.js\";\nimport type { SyncDescriptor } from \"../../platform/instantiation/common/descriptors.js\";\nimport type {\n\tBrandedService,\n\tIConstructorSignature,\n\tIInstantiationService,\n\tServicesAccessor,\n} from \"../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../platform/registry/common/platform.js\";\nimport { IUriIdentityService } from \"../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tEditorCloseContext,\n\tEditorExtensions,\n\tEditorResourceAccessor,\n\ttype IEditorDescriptor as ICommonEditorDescriptor,\n\ttype IWillInstantiateEditorPaneEvent,\n\tSideBySideEditor,\n} from \"../common/editor.js\";\nimport type { EditorInput } from \"../common/editor/editorInput.js\";\nimport type { IEditorGroup } from \"../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../services/editor/common/editorService.js\";\nimport { IWorkingCopyService } from \"../services/workingCopy/common/workingCopyService.js\";\nimport type { EditorPane } from \"./parts/editor/editorPane.js\";\n\n//#region Editor Pane Registry\n\nexport interface IEditorPaneDescriptor\n\textends ICommonEditorDescriptor<EditorPane> {}\n\nexport interface IEditorPaneRegistry {\n\t/**\n\t * Registers an editor pane to the platform for the given editor type. The second parameter also supports an\n\t * array of input classes to be passed in. If the more than one editor is registered for the same editor\n\t * input, the input itself will be asked which editor it prefers if this method is provided. Otherwise\n\t * the first editor in the list will be returned.\n\t *\n\t * @param editorDescriptors A set of constructor functions that return an instance of `EditorInput` for which the\n\t * registered editor should be used for.\n\t */\n\tregisterEditorPane(\n\t\teditorPaneDescriptor: IEditorPaneDescriptor,\n\t\teditorDescriptors: readonly SyncDescriptor<EditorInput>[],\n\t): IDisposable;\n\n\t/**\n\t * Returns the editor pane descriptor for the given editor or `undefined` if none.\n\t */\n\tgetEditorPane(editor: EditorInput): IEditorPaneDescriptor | undefined;\n}\n\n/**\n * A lightweight descriptor of an editor pane. The descriptor is deferred so that heavy editor\n * panes can load lazily in the workbench.\n */\nexport class EditorPaneDescriptor implements IEditorPaneDescriptor {\n\tprivate static readonly instantiatedEditorPanes = new Set<string>();\n\tstatic didInstantiateEditorPane(typeId: string): boolean {\n\t\treturn EditorPaneDescriptor.instantiatedEditorPanes.has(typeId);\n\t}\n\n\tprivate static readonly _onWillInstantiateEditorPane =\n\t\tnew Emitter<IWillInstantiateEditorPaneEvent>();\n\tstatic readonly onWillInstantiateEditorPane =\n\t\tEditorPaneDescriptor._onWillInstantiateEditorPane.event;\n\n\tstatic create<Services extends BrandedService[]>(\n\t\tctor: { new (group: IEditorGroup, ...services: Services): EditorPane },\n\t\ttypeId: string,\n\t\tname: string,\n\t): EditorPaneDescriptor {\n\t\treturn new EditorPaneDescriptor(\n\t\t\tctor as IConstructorSignature<EditorPane, [IEditorGroup]>,\n\t\t\ttypeId,\n\t\t\tname,\n\t\t);\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly ctor: IConstructorSignature<\n\t\t\tEditorPane,\n\t\t\t[IEditorGroup]\n\t\t>,\n\t\treadonly typeId: string,\n\t\treadonly name: string,\n\t) {}\n\n\tinstantiate(\n\t\tinstantiationService: IInstantiationService,\n\t\tgroup: IEditorGroup,\n\t): EditorPane {\n\t\tEditorPaneDescriptor._onWillInstantiateEditorPane.fire({\n\t\t\ttypeId: this.typeId,\n\t\t});\n\n\t\tconst pane = instantiationService.createInstance(this.ctor, group);\n\t\tEditorPaneDescriptor.instantiatedEditorPanes.add(this.typeId);\n\n\t\treturn pane;\n\t}\n\n\tdescribes(editorPane: EditorPane): boolean {\n\t\treturn editorPane.getId() === this.typeId;\n\t}\n}\n\nexport class EditorPaneRegistry implements IEditorPaneRegistry {\n\tprivate readonly mapEditorPanesToEditors = new Map<\n\t\tEditorPaneDescriptor,\n\t\treadonly SyncDescriptor<EditorInput>[]\n\t>();\n\n\tregisterEditorPane(\n\t\teditorPaneDescriptor: EditorPaneDescriptor,\n\t\teditorDescriptors: readonly SyncDescriptor<EditorInput>[],\n\t): IDisposable {\n\t\tthis.mapEditorPanesToEditors.set(\n\t\t\teditorPaneDescriptor,\n\t\t\teditorDescriptors,\n\t\t);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.mapEditorPanesToEditors.delete(editorPaneDescriptor);\n\t\t});\n\t}\n\n\tgetEditorPane(editor: EditorInput): EditorPaneDescriptor | undefined {\n\t\tconst descriptors = this.findEditorPaneDescriptors(editor);\n\n\t\tif (descriptors.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (descriptors.length === 1) {\n\t\t\treturn descriptors[0];\n\t\t}\n\n\t\treturn editor.prefersEditorPane(descriptors);\n\t}\n\n\tprivate findEditorPaneDescriptors(\n\t\teditor: EditorInput,\n\t\tbyInstanceOf?: boolean,\n\t): EditorPaneDescriptor[] {\n\t\tconst matchingEditorPaneDescriptors: EditorPaneDescriptor[] = [];\n\n\t\tfor (const editorPane of this.mapEditorPanesToEditors.keys()) {\n\t\t\tconst editorDescriptors =\n\t\t\t\tthis.mapEditorPanesToEditors.get(editorPane) || [];\n\t\t\tfor (const editorDescriptor of editorDescriptors) {\n\t\t\t\tconst editorClass = editorDescriptor.ctor;\n\n\t\t\t\t// Direct check on constructor type (ignores prototype chain)\n\t\t\t\tif (!byInstanceOf && editor.constructor === editorClass) {\n\t\t\t\t\tmatchingEditorPaneDescriptors.push(editorPane);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Normal instanceof check\n\t\t\t\telse if (byInstanceOf && editor instanceof editorClass) {\n\t\t\t\t\tmatchingEditorPaneDescriptors.push(editorPane);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If no descriptors found, continue search using instanceof and prototype chain\n\t\tif (!byInstanceOf && matchingEditorPaneDescriptors.length === 0) {\n\t\t\treturn this.findEditorPaneDescriptors(editor, true);\n\t\t}\n\n\t\treturn matchingEditorPaneDescriptors;\n\t}\n\n\t//#region Used for tests only\n\n\tgetEditorPaneByType(typeId: string): EditorPaneDescriptor | undefined {\n\t\treturn Iterable.find(\n\t\t\tthis.mapEditorPanesToEditors.keys(),\n\t\t\t(editor) => editor.typeId === typeId,\n\t\t);\n\t}\n\n\tgetEditorPanes(): readonly EditorPaneDescriptor[] {\n\t\treturn Array.from(this.mapEditorPanesToEditors.keys());\n\t}\n\n\tgetEditors(): SyncDescriptor<EditorInput>[] {\n\t\tconst editorClasses: SyncDescriptor<EditorInput>[] = [];\n\t\tfor (const editorPane of this.mapEditorPanesToEditors.keys()) {\n\t\t\tconst editorDescriptors =\n\t\t\t\tthis.mapEditorPanesToEditors.get(editorPane);\n\t\t\tif (editorDescriptors) {\n\t\t\t\teditorClasses.push(\n\t\t\t\t\t...editorDescriptors.map(\n\t\t\t\t\t\t(editorDescriptor) => editorDescriptor.ctor,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn editorClasses;\n\t}\n\n\t//#endregion\n}\n\nRegistry.add(EditorExtensions.EditorPane, new EditorPaneRegistry());\n\n//#endregion\n\n//#region Editor Close Tracker\n\nexport function whenEditorClosed(\n\taccessor: ServicesAccessor,\n\tresources: URI[],\n): Promise<void> {\n\tconst editorService = accessor.get(IEditorService);\n\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\tconst workingCopyService = accessor.get(IWorkingCopyService);\n\n\treturn new Promise((resolve) => {\n\t\tlet remainingResources = [...resources];\n\n\t\t// Observe any editor closing from this moment on\n\t\tconst listener = editorService.onDidCloseEditor(async (event) => {\n\t\t\tif (event.context === EditorCloseContext.MOVE) {\n\t\t\t\treturn; // ignore move events where the editor will open in another group\n\t\t\t}\n\n\t\t\tlet primaryResource = EditorResourceAccessor.getOriginalUri(\n\t\t\t\tevent.editor,\n\t\t\t\t{ supportSideBySide: SideBySideEditor.PRIMARY },\n\t\t\t);\n\t\t\tlet secondaryResource = EditorResourceAccessor.getOriginalUri(\n\t\t\t\tevent.editor,\n\t\t\t\t{ supportSideBySide: SideBySideEditor.SECONDARY },\n\t\t\t);\n\n\t\t\t// Specially handle an editor getting replaced: if the new active editor\n\t\t\t// matches any of the resources from the closed editor, ignore those\n\t\t\t// resources because they were actually not closed, but replaced.\n\t\t\t// (see https://github.com/microsoft/vscode/issues/134299)\n\t\t\tif (event.context === EditorCloseContext.REPLACE) {\n\t\t\t\tconst newPrimaryResource =\n\t\t\t\t\tEditorResourceAccessor.getOriginalUri(\n\t\t\t\t\t\teditorService.activeEditor,\n\t\t\t\t\t\t{ supportSideBySide: SideBySideEditor.PRIMARY },\n\t\t\t\t\t);\n\t\t\t\tconst newSecondaryResource =\n\t\t\t\t\tEditorResourceAccessor.getOriginalUri(\n\t\t\t\t\t\teditorService.activeEditor,\n\t\t\t\t\t\t{ supportSideBySide: SideBySideEditor.SECONDARY },\n\t\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\tprimaryResource,\n\t\t\t\t\t\tnewPrimaryResource,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tprimaryResource = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\tsecondaryResource,\n\t\t\t\t\t\tnewSecondaryResource,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tsecondaryResource = undefined;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove from resources to wait for being closed based on the\n\t\t\t// resources from editors that got closed\n\t\t\tremainingResources = remainingResources.filter((resource) => {\n\t\t\t\t// Closing editor matches resource directly: remove from remaining\n\t\t\t\tif (\n\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tprimaryResource,\n\t\t\t\t\t) ||\n\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tsecondaryResource,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Closing editor is untitled with associated resource\n\t\t\t\t// that matches resource directly: remove from remaining\n\t\t\t\t// but only if the editor was not replaced, otherwise\n\t\t\t\t// saving an untitled with associated resource would\n\t\t\t\t// release the `--wait` call.\n\t\t\t\t// (see https://github.com/microsoft/vscode/issues/141237)\n\t\t\t\tif (event.context !== EditorCloseContext.REPLACE) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(primaryResource?.scheme === Schemas.untitled &&\n\t\t\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\tprimaryResource.with({\n\t\t\t\t\t\t\t\t\tscheme: resource.scheme,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t)) ||\n\t\t\t\t\t\t(secondaryResource?.scheme === Schemas.untitled &&\n\t\t\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\tsecondaryResource.with({\n\t\t\t\t\t\t\t\t\tscheme: resource.scheme,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t))\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Editor is not yet closed, so keep it in waiting mode\n\t\t\t\treturn true;\n\t\t\t});\n\n\t\t\t// All resources to wait for being closed are closed\n\t\t\tif (remainingResources.length === 0) {\n\t\t\t\t// If auto save is configured with the default delay (1s) it is possible\n\t\t\t\t// to close the editor while the save still continues in the background. As such\n\t\t\t\t// we have to also check if the editors to track for are dirty and if so wait\n\t\t\t\t// for them to get saved.\n\t\t\t\tconst dirtyResources = resources.filter((resource) =>\n\t\t\t\t\tworkingCopyService.isDirty(resource),\n\t\t\t\t);\n\t\t\t\tif (dirtyResources.length > 0) {\n\t\t\t\t\tawait Promises.settled(\n\t\t\t\t\t\tdirtyResources.map(\n\t\t\t\t\t\t\tasync (resource) =>\n\t\t\t\t\t\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\t\t\t\t\t\tif (!workingCopyService.isDirty(resource)) {\n\t\t\t\t\t\t\t\t\t\treturn resolve(); // return early if resource is not dirty\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Otherwise resolve promise when resource is saved\n\t\t\t\t\t\t\t\t\tconst listener =\n\t\t\t\t\t\t\t\t\t\tworkingCopyService.onDidChangeDirty(\n\t\t\t\t\t\t\t\t\t\t\t(workingCopy) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t!workingCopy.isDirty() &&\n\t\t\t\t\t\t\t\t\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tworkingCopy.resource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlistener.dispose();\n\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlistener.dispose();\n\n\t\t\t\treturn resolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\n//#endregion\n\n//#region ARIA\n\nexport function computeEditorAriaLabel(\n\tinput: EditorInput,\n\tindex: number | undefined,\n\tgroup: IEditorGroup | undefined,\n\tgroupCount: number | undefined,\n): string {\n\tlet ariaLabel = input.getAriaLabel();\n\tif (group && !group.isPinned(input)) {\n\t\tariaLabel = localize(\"preview\", \"{0}, preview\", ariaLabel);\n\t}\n\n\tif (group?.isSticky(index ?? input)) {\n\t\tariaLabel = localize(\"pinned\", \"{0}, pinned\", ariaLabel);\n\t}\n\n\t// Apply group information to help identify in\n\t// which group we are (only if more than one group\n\t// is actually opened)\n\tif (group && typeof groupCount === \"number\" && groupCount > 1) {\n\t\tariaLabel = `${ariaLabel}, ${group.ariaLabel}`;\n\t}\n\n\treturn ariaLabel;\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["resolve", "listener"]
}
