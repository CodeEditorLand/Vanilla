{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/web.main.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mark } from '../../base/common/performance.js';\nimport { domContentLoaded, detectFullscreen, getCookieValue, getWindow } from '../../base/browser/dom.js';\nimport { assertIsDefined } from '../../base/common/types.js';\nimport { ServiceCollection } from '../../platform/instantiation/common/serviceCollection.js';\nimport { ILogService, ConsoleLogger, getLogLevel, ILoggerService, ILogger } from '../../platform/log/common/log.js';\nimport { ConsoleLogInAutomationLogger } from '../../platform/log/browser/log.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../base/common/lifecycle.js';\nimport { BrowserWorkbenchEnvironmentService, IBrowserWorkbenchEnvironmentService } from '../services/environment/browser/environmentService.js';\nimport { Workbench } from './workbench.js';\nimport { RemoteFileSystemProviderClient } from '../services/remote/common/remoteFileSystemProviderClient.js';\nimport { IWorkbenchEnvironmentService } from '../services/environment/common/environmentService.js';\nimport { IProductService } from '../../platform/product/common/productService.js';\nimport product from '../../platform/product/common/product.js';\nimport { RemoteAgentService } from '../services/remote/browser/remoteAgentService.js';\nimport { RemoteAuthorityResolverService } from '../../platform/remote/browser/remoteAuthorityResolverService.js';\nimport { IRemoteAuthorityResolverService, RemoteConnectionType } from '../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IRemoteAgentService } from '../services/remote/common/remoteAgentService.js';\nimport { IFileService } from '../../platform/files/common/files.js';\nimport { FileService } from '../../platform/files/common/fileService.js';\nimport { Schemas, connectionTokenCookieName } from '../../base/common/network.js';\nimport { IAnyWorkspaceIdentifier, IWorkspaceContextService, UNKNOWN_EMPTY_WINDOW_WORKSPACE, isTemporaryWorkspace, isWorkspaceIdentifier } from '../../platform/workspace/common/workspace.js';\nimport { IWorkbenchConfigurationService } from '../services/configuration/common/configuration.js';\nimport { onUnexpectedError } from '../../base/common/errors.js';\nimport { setFullscreen } from '../../base/browser/browser.js';\nimport { URI } from '../../base/common/uri.js';\nimport { WorkspaceService } from '../services/configuration/browser/configurationService.js';\nimport { ConfigurationCache } from '../services/configuration/common/configurationCache.js';\nimport { ISignService } from '../../platform/sign/common/sign.js';\nimport { SignService } from '../../platform/sign/browser/signService.js';\nimport { IWorkbenchConstructionOptions, IWorkbench, IWorkspace, ITunnel } from './web.api.js';\nimport { BrowserStorageService } from '../services/storage/browser/storageService.js';\nimport { IStorageService } from '../../platform/storage/common/storage.js';\nimport { toLocalISOString } from '../../base/common/date.js';\nimport { isWorkspaceToOpen, isFolderToOpen } from '../../platform/window/common/window.js';\nimport { getSingleFolderWorkspaceIdentifier, getWorkspaceIdentifier } from '../services/workspaces/browser/workspaces.js';\nimport { InMemoryFileSystemProvider } from '../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { ICommandService } from '../../platform/commands/common/commands.js';\nimport { IndexedDBFileSystemProviderErrorDataClassification, IndexedDBFileSystemProvider, IndexedDBFileSystemProviderErrorData } from '../../platform/files/browser/indexedDBFileSystemProvider.js';\nimport { BrowserRequestService } from '../services/request/browser/requestService.js';\nimport { IRequestService } from '../../platform/request/common/request.js';\nimport { IUserDataInitializationService, IUserDataInitializer, UserDataInitializationService } from '../services/userData/browser/userDataInit.js';\nimport { UserDataSyncStoreManagementService } from '../../platform/userDataSync/common/userDataSyncStoreService.js';\nimport { IUserDataSyncStoreManagementService } from '../../platform/userDataSync/common/userDataSync.js';\nimport { ILifecycleService } from '../services/lifecycle/common/lifecycle.js';\nimport { Action2, MenuId, registerAction2 } from '../../platform/actions/common/actions.js';\nimport { IInstantiationService, ServicesAccessor } from '../../platform/instantiation/common/instantiation.js';\nimport { localize, localize2 } from '../../nls.js';\nimport { Categories } from '../../platform/action/common/actionCommonCategories.js';\nimport { IDialogService } from '../../platform/dialogs/common/dialogs.js';\nimport { IHostService } from '../services/host/browser/host.js';\nimport { IUriIdentityService } from '../../platform/uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../platform/uriIdentity/common/uriIdentityService.js';\nimport { BrowserWindow } from './window.js';\nimport { ITimerService } from '../services/timer/browser/timerService.js';\nimport { WorkspaceTrustEnablementService, WorkspaceTrustManagementService } from '../services/workspaces/common/workspaceTrust.js';\nimport { IWorkspaceTrustEnablementService, IWorkspaceTrustManagementService } from '../../platform/workspace/common/workspaceTrust.js';\nimport { HTMLFileSystemProvider } from '../../platform/files/browser/htmlFileSystemProvider.js';\nimport { IOpenerService } from '../../platform/opener/common/opener.js';\nimport { mixin, safeStringify } from '../../base/common/objects.js';\nimport { IndexedDB } from '../../base/browser/indexedDB.js';\nimport { WebFileSystemAccess } from '../../platform/files/browser/webFileSystemAccess.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { IProgressService } from '../../platform/progress/common/progress.js';\nimport { DelayedLogChannel } from '../services/output/common/delayedLogChannel.js';\nimport { dirname, joinPath } from '../../base/common/resources.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../platform/userDataProfile/common/userDataProfile.js';\nimport { NullPolicyService } from '../../platform/policy/common/policy.js';\nimport { IRemoteExplorerService } from '../services/remote/common/remoteExplorerService.js';\nimport { DisposableTunnel, TunnelProtocol } from '../../platform/tunnel/common/tunnel.js';\nimport { ILabelService } from '../../platform/label/common/label.js';\nimport { UserDataProfileService } from '../services/userDataProfile/common/userDataProfileService.js';\nimport { IUserDataProfileService } from '../services/userDataProfile/common/userDataProfile.js';\nimport { BrowserUserDataProfilesService } from '../../platform/userDataProfile/browser/userDataProfile.js';\nimport { DeferredPromise, timeout } from '../../base/common/async.js';\nimport { windowLogId } from '../services/log/common/logConstants.js';\nimport { LogService } from '../../platform/log/common/logService.js';\nimport { IRemoteSocketFactoryService, RemoteSocketFactoryService } from '../../platform/remote/common/remoteSocketFactoryService.js';\nimport { BrowserSocketFactory } from '../../platform/remote/browser/browserSocketFactory.js';\nimport { VSBuffer } from '../../base/common/buffer.js';\nimport { IStoredWorkspace } from '../../platform/workspaces/common/workspaces.js';\nimport { UserDataProfileInitializer } from '../services/userDataProfile/browser/userDataProfileInit.js';\nimport { UserDataSyncInitializer } from '../services/userDataSync/browser/userDataSyncInit.js';\nimport { BrowserRemoteResourceLoader } from '../services/remote/browser/browserRemoteResourceHandler.js';\nimport { BufferLogger } from '../../platform/log/common/bufferLog.js';\nimport { FileLoggerService } from '../../platform/log/common/fileLog.js';\nimport { IEmbedderTerminalService } from '../services/terminal/common/embedderTerminalService.js';\nimport { BrowserSecretStorageService } from '../services/secrets/browser/secretStorageService.js';\nimport { EncryptionService } from '../services/encryption/browser/encryptionService.js';\nimport { IEncryptionService } from '../../platform/encryption/common/encryptionService.js';\nimport { ISecretStorageService } from '../../platform/secrets/common/secrets.js';\nimport { TunnelSource } from '../services/remote/common/tunnelModel.js';\nimport { mainWindow } from '../../base/browser/window.js';\nimport { INotificationService, Severity } from '../../platform/notification/common/notification.js';\n\nexport class BrowserMain extends Disposable {\n\n\tprivate readonly onWillShutdownDisposables = this._register(new DisposableStore());\n\tprivate readonly indexedDBFileSystemProviders: IndexedDBFileSystemProvider[] = [];\n\n\tconstructor(\n\t\tprivate readonly domElement: HTMLElement,\n\t\tprivate readonly configuration: IWorkbenchConstructionOptions\n\t) {\n\t\tsuper();\n\n\t\tthis.init();\n\t}\n\n\tprivate init(): void {\n\n\t\t// Browser config\n\t\tsetFullscreen(!!detectFullscreen(mainWindow), mainWindow);\n\t}\n\n\tasync open(): Promise<IWorkbench> {\n\n\t\t// Init services and wait for DOM to be ready in parallel\n\t\tconst [services] = await Promise.all([this.initServices(), domContentLoaded(getWindow(this.domElement))]);\n\n\t\t// Create Workbench\n\t\tconst workbench = new Workbench(this.domElement, undefined, services.serviceCollection, services.logService);\n\n\t\t// Listeners\n\t\tthis.registerListeners(workbench);\n\n\t\t// Startup\n\t\tconst instantiationService = workbench.startup();\n\n\t\t// Window\n\t\tthis._register(instantiationService.createInstance(BrowserWindow));\n\n\t\t// Logging\n\t\tservices.logService.trace('workbench#open with configuration', safeStringify(this.configuration));\n\n\t\tinstantiationService.invokeFunction(accessor => {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tfor (const indexedDbFileSystemProvider of this.indexedDBFileSystemProviders) {\n\t\t\t\tthis._register(indexedDbFileSystemProvider.onReportError(e => telemetryService.publicLog2<IndexedDBFileSystemProviderErrorData, IndexedDBFileSystemProviderErrorDataClassification>('indexedDBFileSystemProviderError', e)));\n\t\t\t}\n\t\t});\n\n\t\t// Return API Facade\n\t\treturn instantiationService.invokeFunction(accessor => {\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst lifecycleService = accessor.get(ILifecycleService);\n\t\t\tconst timerService = accessor.get(ITimerService);\n\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\tconst productService = accessor.get(IProductService);\n\t\t\tconst progressService = accessor.get(IProgressService);\n\t\t\tconst environmentService = accessor.get(IBrowserWorkbenchEnvironmentService);\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst labelService = accessor.get(ILabelService);\n\t\t\tconst embedderTerminalService = accessor.get(IEmbedderTerminalService);\n\t\t\tconst remoteAuthorityResolverService = accessor.get(IRemoteAuthorityResolverService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\t\tasync function showMessage<T extends string>(severity: Severity, message: string, ...items: T[]): Promise<T | undefined> {\n\t\t\t\tconst choice = new DeferredPromise<T | undefined>();\n\t\t\t\tconst handle = notificationService.prompt(severity, message, items.map(item => ({\n\t\t\t\t\tlabel: item,\n\t\t\t\t\trun: () => choice.complete(item)\n\t\t\t\t})));\n\t\t\t\tconst disposable = handle.onDidClose(() => {\n\t\t\t\t\tchoice.complete(undefined);\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t});\n\t\t\t\tconst result = await choice.p;\n\t\t\t\thandle.close();\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tlet logger: DelayedLogChannel | undefined = undefined;\n\n\t\t\treturn {\n\t\t\t\tcommands: {\n\t\t\t\t\texecuteCommand: (command, ...args) => commandService.executeCommand(command, ...args)\n\t\t\t\t},\n\t\t\t\tenv: {\n\t\t\t\t\tasync getUriScheme(): Promise<string> {\n\t\t\t\t\t\treturn productService.urlProtocol;\n\t\t\t\t\t},\n\t\t\t\t\tasync retrievePerformanceMarks() {\n\t\t\t\t\t\tawait timerService.whenReady();\n\n\t\t\t\t\t\treturn timerService.getPerformanceMarks();\n\t\t\t\t\t},\n\t\t\t\t\tasync openUri(uri: URI): Promise<boolean> {\n\t\t\t\t\t\treturn openerService.open(uri, {});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tlogger: {\n\t\t\t\t\tlog: (level, message) => {\n\t\t\t\t\t\tif (!logger) {\n\t\t\t\t\t\t\tlogger = instantiationService.createInstance(DelayedLogChannel, 'webEmbedder', productService.embedderIdentifier || productService.nameShort, joinPath(dirname(environmentService.logFile), 'webEmbedder.log'));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlogger.log(level, message);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\twindow: {\n\t\t\t\t\twithProgress: (options, task) => progressService.withProgress(options, task),\n\t\t\t\t\tcreateTerminal: async (options) => embedderTerminalService.createTerminal(options),\n\t\t\t\t\tshowInformationMessage: (message, ...items) => showMessage(Severity.Info, message, ...items),\n\t\t\t\t},\n\t\t\t\tworkspace: {\n\t\t\t\t\tdidResolveRemoteAuthority: async () => {\n\t\t\t\t\t\tif (!this.configuration.remoteAuthority) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait remoteAuthorityResolverService.resolveAuthority(this.configuration.remoteAuthority);\n\t\t\t\t\t},\n\t\t\t\t\topenTunnel: async tunnelOptions => {\n\t\t\t\t\t\tconst tunnel = assertIsDefined(await remoteExplorerService.forward({\n\t\t\t\t\t\t\tremote: tunnelOptions.remoteAddress,\n\t\t\t\t\t\t\tlocal: tunnelOptions.localAddressPort,\n\t\t\t\t\t\t\tname: tunnelOptions.label,\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\t\t\t\t\tdescription: labelService.getHostLabel(Schemas.vscodeRemote, this.configuration.remoteAuthority)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\televateIfNeeded: false,\n\t\t\t\t\t\t\tprivacy: tunnelOptions.privacy\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\tlabel: tunnelOptions.label,\n\t\t\t\t\t\t\televateIfNeeded: undefined,\n\t\t\t\t\t\t\tonAutoForward: undefined,\n\t\t\t\t\t\t\trequireLocalPort: undefined,\n\t\t\t\t\t\t\tprotocol: tunnelOptions.protocol === TunnelProtocol.Https ? tunnelOptions.protocol : TunnelProtocol.Http\n\t\t\t\t\t\t}));\n\n\t\t\t\t\t\tif (typeof tunnel === 'string') {\n\t\t\t\t\t\t\tthrow new Error(tunnel);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn new class extends DisposableTunnel implements ITunnel {\n\t\t\t\t\t\t\tdeclare localAddress: string;\n\t\t\t\t\t\t}({\n\t\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t\t\thost: tunnel.tunnelRemoteHost\n\t\t\t\t\t\t}, tunnel.localAddress, () => tunnel.dispose());\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tshutdown: () => lifecycleService.shutdown()\n\t\t\t} satisfies IWorkbench;\n\t\t});\n\t}\n\n\tprivate registerListeners(workbench: Workbench): void {\n\n\t\t// Workbench Lifecycle\n\t\tthis._register(workbench.onWillShutdown(() => this.onWillShutdownDisposables.clear()));\n\t\tthis._register(workbench.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprivate async initServices(): Promise<{ serviceCollection: ServiceCollection; configurationService: IWorkbenchConfigurationService; logService: ILogService }> {\n\t\tconst serviceCollection = new ServiceCollection();\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\tconst workspace = this.resolveWorkspace();\n\n\t\t// Product\n\t\tconst productService: IProductService = mixin({ _serviceBrand: undefined, ...product }, this.configuration.productConfiguration);\n\t\tserviceCollection.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst logsPath = URI.file(toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')).with({ scheme: 'vscode-log' });\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService(workspace.id, logsPath, this.configuration, productService);\n\t\tserviceCollection.set(IBrowserWorkbenchEnvironmentService, environmentService);\n\n\t\t// Files\n\t\tconst fileLogger = new BufferLogger();\n\t\tconst fileService = this._register(new FileService(fileLogger));\n\t\tserviceCollection.set(IFileService, fileService);\n\n\t\t// Logger\n\t\tconst loggerService = new FileLoggerService(getLogLevel(environmentService), logsPath, fileService);\n\t\tserviceCollection.set(ILoggerService, loggerService);\n\n\t\t// Log Service\n\t\tconst otherLoggers: ILogger[] = [new ConsoleLogger(loggerService.getLogLevel())];\n\t\tif (environmentService.isExtensionDevelopment && !!environmentService.extensionTestsLocationURI) {\n\t\t\totherLoggers.push(new ConsoleLogInAutomationLogger(loggerService.getLogLevel()));\n\t\t}\n\t\tconst logger = loggerService.createLogger(environmentService.logFile, { id: windowLogId, name: localize('rendererLog', \"Window\") });\n\t\tconst logService = new LogService(logger, otherLoggers);\n\t\tserviceCollection.set(ILogService, logService);\n\n\t\t// Set the logger of the fileLogger after the log service is ready.\n\t\t// This is to avoid cyclic dependency\n\t\tfileLogger.logger = logService;\n\n\t\t// Register File System Providers depending on IndexedDB support\n\t\t// Register them early because they are needed for the profiles initialization\n\t\tawait this.registerIndexedDBFileSystemProviders(environmentService, fileService, logService, loggerService, logsPath);\n\n\n\t\tconst connectionToken = environmentService.options.connectionToken || getCookieValue(connectionTokenCookieName);\n\t\tconst remoteResourceLoader = this.configuration.remoteResourceProvider ? new BrowserRemoteResourceLoader(fileService, this.configuration.remoteResourceProvider) : undefined;\n\t\tconst resourceUriProvider = this.configuration.resourceUriProvider ?? remoteResourceLoader?.getResourceUriProvider();\n\t\tconst remoteAuthorityResolverService = new RemoteAuthorityResolverService(!environmentService.expectsResolverExtension, connectionToken, resourceUriProvider, this.configuration.serverBasePath, productService, logService);\n\t\tserviceCollection.set(IRemoteAuthorityResolverService, remoteAuthorityResolverService);\n\n\t\t// Signing\n\t\tconst signService = new SignService(productService);\n\t\tserviceCollection.set(ISignService, signService);\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tserviceCollection.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = new BrowserUserDataProfilesService(environmentService, fileService, uriIdentityService, logService);\n\t\tserviceCollection.set(IUserDataProfilesService, userDataProfilesService);\n\n\t\tconst currentProfile = await this.getCurrentProfile(workspace, userDataProfilesService, environmentService);\n\t\tconst userDataProfileService = new UserDataProfileService(currentProfile);\n\t\tserviceCollection.set(IUserDataProfileService, userDataProfileService);\n\n\t\t// Remote Agent\n\t\tconst remoteSocketFactoryService = new RemoteSocketFactoryService();\n\t\tremoteSocketFactoryService.register(RemoteConnectionType.WebSocket, new BrowserSocketFactory(this.configuration.webSocketFactory));\n\t\tserviceCollection.set(IRemoteSocketFactoryService, remoteSocketFactoryService);\n\t\tconst remoteAgentService = this._register(new RemoteAgentService(remoteSocketFactoryService, userDataProfileService, environmentService, productService, remoteAuthorityResolverService, signService, logService));\n\t\tserviceCollection.set(IRemoteAgentService, remoteAgentService);\n\t\tthis._register(RemoteFileSystemProviderClient.register(remoteAgentService, fileService, logService));\n\n\t\t// Long running services (workspace, config, storage)\n\t\tconst [configurationService, storageService] = await Promise.all([\n\t\t\tthis.createWorkspaceService(workspace, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService).then(service => {\n\n\t\t\t\t// Workspace\n\t\t\t\tserviceCollection.set(IWorkspaceContextService, service);\n\n\t\t\t\t// Configuration\n\t\t\t\tserviceCollection.set(IWorkbenchConfigurationService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createStorageService(workspace, logService, userDataProfileService).then(service => {\n\n\t\t\t\t// Storage\n\t\t\t\tserviceCollection.set(IStorageService, service);\n\n\t\t\t\treturn service;\n\t\t\t})\n\t\t]);\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\t// Workspace Trust Service\n\t\tconst workspaceTrustEnablementService = new WorkspaceTrustEnablementService(configurationService, environmentService);\n\t\tserviceCollection.set(IWorkspaceTrustEnablementService, workspaceTrustEnablementService);\n\n\t\tconst workspaceTrustManagementService = new WorkspaceTrustManagementService(configurationService, remoteAuthorityResolverService, storageService, uriIdentityService, environmentService, configurationService, workspaceTrustEnablementService, fileService);\n\t\tserviceCollection.set(IWorkspaceTrustManagementService, workspaceTrustManagementService);\n\n\t\t// Update workspace trust so that configuration is updated accordingly\n\t\tconfigurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted());\n\t\tthis._register(workspaceTrustManagementService.onDidChangeTrust(() => configurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted())));\n\n\t\t// Request Service\n\t\tconst requestService = new BrowserRequestService(remoteAgentService, configurationService, logService);\n\t\tserviceCollection.set(IRequestService, requestService);\n\n\t\t// Userdata Sync Store Management Service\n\t\tconst userDataSyncStoreManagementService = new UserDataSyncStoreManagementService(productService, configurationService, storageService);\n\t\tserviceCollection.set(IUserDataSyncStoreManagementService, userDataSyncStoreManagementService);\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\tconst encryptionService = new EncryptionService();\n\t\tserviceCollection.set(IEncryptionService, encryptionService);\n\t\tconst secretStorageService = new BrowserSecretStorageService(storageService, encryptionService, environmentService, logService);\n\t\tserviceCollection.set(ISecretStorageService, secretStorageService);\n\n\t\t// Userdata Initialize Service\n\t\tconst userDataInitializers: IUserDataInitializer[] = [];\n\t\tuserDataInitializers.push(new UserDataSyncInitializer(environmentService, secretStorageService, userDataSyncStoreManagementService, fileService, userDataProfilesService, storageService, productService, requestService, logService, uriIdentityService));\n\t\tif (environmentService.options.profile) {\n\t\t\tuserDataInitializers.push(new UserDataProfileInitializer(environmentService, fileService, userDataProfileService, storageService, logService, uriIdentityService, requestService));\n\t\t}\n\t\tconst userDataInitializationService = new UserDataInitializationService(userDataInitializers);\n\t\tserviceCollection.set(IUserDataInitializationService, userDataInitializationService);\n\n\t\ttry {\n\t\t\tawait Promise.race([\n\t\t\t\t// Do not block more than 5s\n\t\t\t\ttimeout(5000),\n\t\t\t\tthis.initializeUserData(userDataInitializationService, configurationService)]\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogService.error(error);\n\t\t}\n\n\t\treturn { serviceCollection, configurationService, logService };\n\t}\n\n\tprivate async initializeUserData(userDataInitializationService: UserDataInitializationService, configurationService: WorkspaceService) {\n\t\tif (await userDataInitializationService.requiresInitialization()) {\n\t\t\tmark('code/willInitRequiredUserData');\n\n\t\t\t// Initialize required resources - settings & global state\n\t\t\tawait userDataInitializationService.initializeRequiredResources();\n\n\t\t\t// Important: Reload only local user configuration after initializing\n\t\t\t// Reloading complete configuration blocks workbench until remote configuration is loaded.\n\t\t\tawait configurationService.reloadLocalUserConfiguration();\n\n\t\t\tmark('code/didInitRequiredUserData');\n\t\t}\n\t}\n\n\tprivate async registerIndexedDBFileSystemProviders(environmentService: IWorkbenchEnvironmentService, fileService: IFileService, logService: ILogService, loggerService: ILoggerService, logsPath: URI): Promise<void> {\n\n\t\t// IndexedDB is used for logging and user data\n\t\tlet indexedDB: IndexedDB | undefined;\n\t\tconst userDataStore = 'vscode-userdata-store';\n\t\tconst logsStore = 'vscode-logs-store';\n\t\tconst handlesStore = 'vscode-filehandles-store';\n\t\ttry {\n\t\t\tindexedDB = await IndexedDB.create('vscode-web-db', 3, [userDataStore, logsStore, handlesStore]);\n\n\t\t\t// Close onWillShutdown\n\t\t\tthis.onWillShutdownDisposables.add(toDisposable(() => indexedDB?.close()));\n\t\t} catch (error) {\n\t\t\tlogService.error('Error while creating IndexedDB', error);\n\t\t}\n\n\t\t// Logger\n\t\tif (indexedDB) {\n\t\t\tconst logFileSystemProvider = new IndexedDBFileSystemProvider(logsPath.scheme, indexedDB, logsStore, false);\n\t\t\tthis.indexedDBFileSystemProviders.push(logFileSystemProvider);\n\t\t\tfileService.registerProvider(logsPath.scheme, logFileSystemProvider);\n\t\t} else {\n\t\t\tfileService.registerProvider(logsPath.scheme, new InMemoryFileSystemProvider());\n\t\t}\n\n\t\t// User data\n\t\tlet userDataProvider;\n\t\tif (indexedDB) {\n\t\t\tuserDataProvider = new IndexedDBFileSystemProvider(Schemas.vscodeUserData, indexedDB, userDataStore, true);\n\t\t\tthis.indexedDBFileSystemProviders.push(userDataProvider);\n\t\t\tthis.registerDeveloperActions(<IndexedDBFileSystemProvider>userDataProvider);\n\t\t} else {\n\t\t\tlogService.info('Using in-memory user data provider');\n\t\t\tuserDataProvider = new InMemoryFileSystemProvider();\n\t\t}\n\t\tfileService.registerProvider(Schemas.vscodeUserData, userDataProvider);\n\n\t\t// Local file access (if supported by browser)\n\t\tif (WebFileSystemAccess.supported(mainWindow)) {\n\t\t\tfileService.registerProvider(Schemas.file, new HTMLFileSystemProvider(indexedDB, handlesStore, logService));\n\t\t}\n\n\t\t// In-memory\n\t\tfileService.registerProvider(Schemas.tmp, new InMemoryFileSystemProvider());\n\t}\n\n\tprivate registerDeveloperActions(provider: IndexedDBFileSystemProvider): void {\n\t\tthis._register(registerAction2(class ResetUserDataAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.action.resetUserData',\n\t\t\t\t\ttitle: localize2('reset', \"Reset User Data\"),\n\t\t\t\t\tcategory: Categories.Developer,\n\t\t\t\t\tmenu: {\n\t\t\t\t\t\tid: MenuId.CommandPalette\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\tconst logService = accessor.get(ILogService);\n\t\t\t\tconst result = await dialogService.confirm({\n\t\t\t\t\tmessage: localize('reset user data message', \"Would you like to reset your data (settings, keybindings, extensions, snippets and UI State) and reload?\")\n\t\t\t\t});\n\n\t\t\t\tif (result.confirmed) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait provider?.reset();\n\t\t\t\t\t\tif (storageService instanceof BrowserStorageService) {\n\t\t\t\t\t\t\tawait storageService.clear();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogService.error(error);\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\thostService.reload();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async createStorageService(workspace: IAnyWorkspaceIdentifier, logService: ILogService, userDataProfileService: IUserDataProfileService): Promise<IStorageService> {\n\t\tconst storageService = new BrowserStorageService(workspace, userDataProfileService, logService);\n\n\t\ttry {\n\t\t\tawait storageService.initialize();\n\n\t\t\t// Register to close on shutdown\n\t\t\tthis.onWillShutdownDisposables.add(toDisposable(() => storageService.close()));\n\n\t\t\treturn storageService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn storageService;\n\t\t}\n\t}\n\n\tprivate async createWorkspaceService(workspace: IAnyWorkspaceIdentifier, environmentService: IBrowserWorkbenchEnvironmentService, userDataProfileService: IUserDataProfileService, userDataProfilesService: IUserDataProfilesService, fileService: FileService, remoteAgentService: IRemoteAgentService, uriIdentityService: IUriIdentityService, logService: ILogService): Promise<WorkspaceService> {\n\n\t\t// Temporary workspaces do not exist on startup because they are\n\t\t// just in memory. As such, detect this case and eagerly create\n\t\t// the workspace file empty so that it is a valid workspace.\n\n\t\tif (isWorkspaceIdentifier(workspace) && isTemporaryWorkspace(workspace.configPath)) {\n\t\t\ttry {\n\t\t\t\tconst emptyWorkspace: IStoredWorkspace = { folders: [] };\n\t\t\t\tawait fileService.createFile(workspace.configPath, VSBuffer.fromString(JSON.stringify(emptyWorkspace, null, '\\t')), { overwrite: false });\n\t\t\t} catch (error) {\n\t\t\t\t// ignore if workspace file already exists\n\t\t\t}\n\t\t}\n\n\t\tconst configurationCache = new ConfigurationCache([Schemas.file, Schemas.vscodeUserData, Schemas.tmp] /* Cache all non native resources */, environmentService, fileService);\n\t\tconst workspaceService = new WorkspaceService({ remoteAuthority: this.configuration.remoteAuthority, configurationCache }, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, new NullPolicyService());\n\n\t\ttry {\n\t\t\tawait workspaceService.initialize(workspace);\n\n\t\t\treturn workspaceService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn workspaceService;\n\t\t}\n\t}\n\n\tprivate async getCurrentProfile(workspace: IAnyWorkspaceIdentifier, userDataProfilesService: BrowserUserDataProfilesService, environmentService: BrowserWorkbenchEnvironmentService): Promise<IUserDataProfile> {\n\t\tconst profileName = environmentService.options?.profile?.name ?? environmentService.profile;\n\t\tif (profileName) {\n\t\t\tconst profile = userDataProfilesService.profiles.find(p => p.name === profileName);\n\t\t\tif (profile) {\n\t\t\t\treturn profile;\n\t\t\t}\n\t\t\treturn userDataProfilesService.createNamedProfile(profileName, undefined, workspace);\n\t\t}\n\t\treturn userDataProfilesService.getProfileForWorkspace(workspace) ?? userDataProfilesService.defaultProfile;\n\t}\n\n\tprivate resolveWorkspace(): IAnyWorkspaceIdentifier {\n\t\tlet workspace: IWorkspace | undefined = undefined;\n\t\tif (this.configuration.workspaceProvider) {\n\t\t\tworkspace = this.configuration.workspaceProvider.workspace;\n\t\t}\n\n\t\t// Multi-root workspace\n\t\tif (workspace && isWorkspaceToOpen(workspace)) {\n\t\t\treturn getWorkspaceIdentifier(workspace.workspaceUri);\n\t\t}\n\n\t\t// Single-folder workspace\n\t\tif (workspace && isFolderToOpen(workspace)) {\n\t\t\treturn getSingleFolderWorkspaceIdentifier(workspace.folderUri);\n\t\t}\n\n\t\t// Empty window workspace\n\t\treturn UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["instantiationService"]
}
