{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/web.main.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { setFullscreen } from \"../../base/browser/browser.js\";\nimport {\n\tdetectFullscreen,\n\tdomContentLoaded,\n\tgetCookieValue,\n\tgetWindow,\n} from \"../../base/browser/dom.js\";\nimport { IndexedDB } from \"../../base/browser/indexedDB.js\";\nimport { mainWindow } from \"../../base/browser/window.js\";\nimport { DeferredPromise, timeout } from \"../../base/common/async.js\";\nimport { VSBuffer } from \"../../base/common/buffer.js\";\nimport { toLocalISOString } from \"../../base/common/date.js\";\nimport { onUnexpectedError } from \"../../base/common/errors.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../base/common/lifecycle.js\";\nimport {\n\tSchemas,\n\tconnectionTokenCookieName,\n} from \"../../base/common/network.js\";\nimport { mixin, safeStringify } from \"../../base/common/objects.js\";\nimport { mark } from \"../../base/common/performance.js\";\nimport { dirname, joinPath } from \"../../base/common/resources.js\";\nimport { assertIsDefined } from \"../../base/common/types.js\";\nimport { URI } from \"../../base/common/uri.js\";\nimport { localize, localize2 } from \"../../nls.js\";\nimport { Categories } from \"../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../platform/commands/common/commands.js\";\nimport { IDialogService } from \"../../platform/dialogs/common/dialogs.js\";\nimport { IEncryptionService } from \"../../platform/encryption/common/encryptionService.js\";\nimport { HTMLFileSystemProvider } from \"../../platform/files/browser/htmlFileSystemProvider.js\";\nimport {\n\tIndexedDBFileSystemProvider,\n\ttype IndexedDBFileSystemProviderErrorData,\n\ttype IndexedDBFileSystemProviderErrorDataClassification,\n} from \"../../platform/files/browser/indexedDBFileSystemProvider.js\";\nimport { WebFileSystemAccess } from \"../../platform/files/browser/webFileSystemAccess.js\";\nimport { FileService } from \"../../platform/files/common/fileService.js\";\nimport { IFileService } from \"../../platform/files/common/files.js\";\nimport { InMemoryFileSystemProvider } from \"../../platform/files/common/inMemoryFilesystemProvider.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../platform/instantiation/common/instantiation.js\";\nimport { ServiceCollection } from \"../../platform/instantiation/common/serviceCollection.js\";\nimport { ILabelService } from \"../../platform/label/common/label.js\";\nimport { ConsoleLogInAutomationLogger } from \"../../platform/log/browser/log.js\";\nimport { BufferLogger } from \"../../platform/log/common/bufferLog.js\";\nimport { FileLoggerService } from \"../../platform/log/common/fileLog.js\";\nimport {\n\tConsoleLogger,\n\tILogService,\n\ttype ILogger,\n\tILoggerService,\n\tgetLogLevel,\n} from \"../../platform/log/common/log.js\";\nimport { LogService } from \"../../platform/log/common/logService.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../platform/opener/common/opener.js\";\nimport { NullPolicyService } from \"../../platform/policy/common/policy.js\";\nimport product from \"../../platform/product/common/product.js\";\nimport { IProductService } from \"../../platform/product/common/productService.js\";\nimport { IProgressService } from \"../../platform/progress/common/progress.js\";\nimport { BrowserSocketFactory } from \"../../platform/remote/browser/browserSocketFactory.js\";\nimport { RemoteAuthorityResolverService } from \"../../platform/remote/browser/remoteAuthorityResolverService.js\";\nimport {\n\tIRemoteAuthorityResolverService,\n\tRemoteConnectionType,\n} from \"../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\tIRemoteSocketFactoryService,\n\tRemoteSocketFactoryService,\n} from \"../../platform/remote/common/remoteSocketFactoryService.js\";\nimport { IRequestService } from \"../../platform/request/common/request.js\";\nimport { ISecretStorageService } from \"../../platform/secrets/common/secrets.js\";\nimport { SignService } from \"../../platform/sign/browser/signService.js\";\nimport { ISignService } from \"../../platform/sign/common/sign.js\";\nimport { IStorageService } from \"../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../platform/telemetry/common/telemetry.js\";\nimport {\n\tDisposableTunnel,\n\tTunnelProtocol,\n} from \"../../platform/tunnel/common/tunnel.js\";\nimport { IUriIdentityService } from \"../../platform/uriIdentity/common/uriIdentity.js\";\nimport { UriIdentityService } from \"../../platform/uriIdentity/common/uriIdentityService.js\";\nimport { BrowserUserDataProfilesService } from \"../../platform/userDataProfile/browser/userDataProfile.js\";\nimport {\n\ttype IUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../platform/userDataProfile/common/userDataProfile.js\";\nimport { IUserDataSyncStoreManagementService } from \"../../platform/userDataSync/common/userDataSync.js\";\nimport { UserDataSyncStoreManagementService } from \"../../platform/userDataSync/common/userDataSyncStoreService.js\";\nimport {\n\tisFolderToOpen,\n\tisWorkspaceToOpen,\n} from \"../../platform/window/common/window.js\";\nimport {\n\ttype IAnyWorkspaceIdentifier,\n\tIWorkspaceContextService,\n\tUNKNOWN_EMPTY_WINDOW_WORKSPACE,\n\tisTemporaryWorkspace,\n\tisWorkspaceIdentifier,\n} from \"../../platform/workspace/common/workspace.js\";\nimport {\n\tIWorkspaceTrustEnablementService,\n\tIWorkspaceTrustManagementService,\n} from \"../../platform/workspace/common/workspaceTrust.js\";\nimport type { IStoredWorkspace } from \"../../platform/workspaces/common/workspaces.js\";\nimport { WorkspaceService } from \"../services/configuration/browser/configurationService.js\";\nimport { IWorkbenchConfigurationService } from \"../services/configuration/common/configuration.js\";\nimport { ConfigurationCache } from \"../services/configuration/common/configurationCache.js\";\nimport { EncryptionService } from \"../services/encryption/browser/encryptionService.js\";\nimport {\n\tBrowserWorkbenchEnvironmentService,\n\tIBrowserWorkbenchEnvironmentService,\n} from \"../services/environment/browser/environmentService.js\";\nimport type { IWorkbenchEnvironmentService } from \"../services/environment/common/environmentService.js\";\nimport { IHostService } from \"../services/host/browser/host.js\";\nimport { ILifecycleService } from \"../services/lifecycle/common/lifecycle.js\";\nimport { windowLogId } from \"../services/log/common/logConstants.js\";\nimport { DelayedLogChannel } from \"../services/output/common/delayedLogChannel.js\";\nimport { BrowserRemoteResourceLoader } from \"../services/remote/browser/browserRemoteResourceHandler.js\";\nimport { RemoteAgentService } from \"../services/remote/browser/remoteAgentService.js\";\nimport { IRemoteAgentService } from \"../services/remote/common/remoteAgentService.js\";\nimport { IRemoteExplorerService } from \"../services/remote/common/remoteExplorerService.js\";\nimport { RemoteFileSystemProviderClient } from \"../services/remote/common/remoteFileSystemProviderClient.js\";\nimport { TunnelSource } from \"../services/remote/common/tunnelModel.js\";\nimport { BrowserRequestService } from \"../services/request/browser/requestService.js\";\nimport { BrowserSecretStorageService } from \"../services/secrets/browser/secretStorageService.js\";\nimport { BrowserStorageService } from \"../services/storage/browser/storageService.js\";\nimport { IEmbedderTerminalService } from \"../services/terminal/common/embedderTerminalService.js\";\nimport { ITimerService } from \"../services/timer/browser/timerService.js\";\nimport {\n\tIUserDataInitializationService,\n\ttype IUserDataInitializer,\n\tUserDataInitializationService,\n} from \"../services/userData/browser/userDataInit.js\";\nimport { UserDataProfileInitializer } from \"../services/userDataProfile/browser/userDataProfileInit.js\";\nimport { IUserDataProfileService } from \"../services/userDataProfile/common/userDataProfile.js\";\nimport { UserDataProfileService } from \"../services/userDataProfile/common/userDataProfileService.js\";\nimport { UserDataSyncInitializer } from \"../services/userDataSync/browser/userDataSyncInit.js\";\nimport {\n\tgetSingleFolderWorkspaceIdentifier,\n\tgetWorkspaceIdentifier,\n} from \"../services/workspaces/browser/workspaces.js\";\nimport {\n\tWorkspaceTrustEnablementService,\n\tWorkspaceTrustManagementService,\n} from \"../services/workspaces/common/workspaceTrust.js\";\nimport type {\n\tITunnel,\n\tIWorkbench,\n\tIWorkbenchConstructionOptions,\n\tIWorkspace,\n} from \"./web.api.js\";\nimport { BrowserWindow } from \"./window.js\";\nimport { Workbench } from \"./workbench.js\";\n\nexport class BrowserMain extends Disposable {\n\tprivate readonly onWillShutdownDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate readonly indexedDBFileSystemProviders: IndexedDBFileSystemProvider[] =\n\t\t[];\n\n\tconstructor(\n\t\tprivate readonly domElement: HTMLElement,\n\t\tprivate readonly configuration: IWorkbenchConstructionOptions,\n\t) {\n\t\tsuper();\n\n\t\tthis.init();\n\t}\n\n\tprivate init(): void {\n\t\t// Browser config\n\t\tsetFullscreen(!!detectFullscreen(mainWindow), mainWindow);\n\t}\n\n\tasync open(): Promise<IWorkbench> {\n\t\t// Init services and wait for DOM to be ready in parallel\n\t\tconst [services] = await Promise.all([\n\t\t\tthis.initServices(),\n\t\t\tdomContentLoaded(getWindow(this.domElement)),\n\t\t]);\n\n\t\t// Create Workbench\n\t\tconst workbench = new Workbench(\n\t\t\tthis.domElement,\n\t\t\tundefined,\n\t\t\tservices.serviceCollection,\n\t\t\tservices.logService,\n\t\t);\n\n\t\t// Listeners\n\t\tthis.registerListeners(workbench);\n\n\t\t// Startup\n\t\tconst instantiationService = workbench.startup();\n\n\t\t// Window\n\t\tthis._register(instantiationService.createInstance(BrowserWindow));\n\n\t\t// Logging\n\t\tservices.logService.trace(\n\t\t\t\"workbench#open with configuration\",\n\t\t\tsafeStringify(this.configuration),\n\t\t);\n\n\t\tinstantiationService.invokeFunction((accessor) => {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tfor (const indexedDbFileSystemProvider of this\n\t\t\t\t.indexedDBFileSystemProviders) {\n\t\t\t\tthis._register(\n\t\t\t\t\tindexedDbFileSystemProvider.onReportError((e) =>\n\t\t\t\t\t\ttelemetryService.publicLog2<\n\t\t\t\t\t\t\tIndexedDBFileSystemProviderErrorData,\n\t\t\t\t\t\t\tIndexedDBFileSystemProviderErrorDataClassification\n\t\t\t\t\t\t>(\"indexedDBFileSystemProviderError\", e),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t// Return API Facade\n\t\treturn instantiationService.invokeFunction((accessor) => {\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst lifecycleService = accessor.get(ILifecycleService);\n\t\t\tconst timerService = accessor.get(ITimerService);\n\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\tconst productService = accessor.get(IProductService);\n\t\t\tconst progressService = accessor.get(IProgressService);\n\t\t\tconst environmentService = accessor.get(\n\t\t\t\tIBrowserWorkbenchEnvironmentService,\n\t\t\t);\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst labelService = accessor.get(ILabelService);\n\t\t\tconst embedderTerminalService = accessor.get(\n\t\t\t\tIEmbedderTerminalService,\n\t\t\t);\n\t\t\tconst remoteAuthorityResolverService = accessor.get(\n\t\t\t\tIRemoteAuthorityResolverService,\n\t\t\t);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\t\tasync function showMessage<T extends string>(\n\t\t\t\tseverity: Severity,\n\t\t\t\tmessage: string,\n\t\t\t\t...items: T[]\n\t\t\t): Promise<T | undefined> {\n\t\t\t\tconst choice = new DeferredPromise<T | undefined>();\n\t\t\t\tconst handle = notificationService.prompt(\n\t\t\t\t\tseverity,\n\t\t\t\t\tmessage,\n\t\t\t\t\titems.map((item) => ({\n\t\t\t\t\t\tlabel: item,\n\t\t\t\t\t\trun: () => choice.complete(item),\n\t\t\t\t\t})),\n\t\t\t\t);\n\t\t\t\tconst disposable = handle.onDidClose(() => {\n\t\t\t\t\tchoice.complete(undefined);\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t});\n\t\t\t\tconst result = await choice.p;\n\t\t\t\thandle.close();\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tlet logger: DelayedLogChannel | undefined;\n\n\t\t\treturn {\n\t\t\t\tcommands: {\n\t\t\t\t\texecuteCommand: (command, ...args) =>\n\t\t\t\t\t\tcommandService.executeCommand(command, ...args),\n\t\t\t\t},\n\t\t\t\tenv: {\n\t\t\t\t\tasync getUriScheme(): Promise<string> {\n\t\t\t\t\t\treturn productService.urlProtocol;\n\t\t\t\t\t},\n\t\t\t\t\tasync retrievePerformanceMarks() {\n\t\t\t\t\t\tawait timerService.whenReady();\n\n\t\t\t\t\t\treturn timerService.getPerformanceMarks();\n\t\t\t\t\t},\n\t\t\t\t\tasync openUri(uri: URI): Promise<boolean> {\n\t\t\t\t\t\treturn openerService.open(uri, {});\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlogger: {\n\t\t\t\t\tlog: (level, message) => {\n\t\t\t\t\t\tif (!logger) {\n\t\t\t\t\t\t\tlogger = instantiationService.createInstance(\n\t\t\t\t\t\t\t\tDelayedLogChannel,\n\t\t\t\t\t\t\t\t\"webEmbedder\",\n\t\t\t\t\t\t\t\tproductService.embedderIdentifier ||\n\t\t\t\t\t\t\t\t\tproductService.nameShort,\n\t\t\t\t\t\t\t\tjoinPath(\n\t\t\t\t\t\t\t\t\tdirname(environmentService.logFile),\n\t\t\t\t\t\t\t\t\t\"webEmbedder.log\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlogger.log(level, message);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\twindow: {\n\t\t\t\t\twithProgress: (options, task) =>\n\t\t\t\t\t\tprogressService.withProgress(options, task),\n\t\t\t\t\tcreateTerminal: async (options) =>\n\t\t\t\t\t\tembedderTerminalService.createTerminal(options),\n\t\t\t\t\tshowInformationMessage: (message, ...items) =>\n\t\t\t\t\t\tshowMessage(Severity.Info, message, ...items),\n\t\t\t\t},\n\t\t\t\tworkspace: {\n\t\t\t\t\tdidResolveRemoteAuthority: async () => {\n\t\t\t\t\t\tif (!this.configuration.remoteAuthority) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait remoteAuthorityResolverService.resolveAuthority(\n\t\t\t\t\t\t\tthis.configuration.remoteAuthority,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\topenTunnel: async (tunnelOptions) => {\n\t\t\t\t\t\tconst tunnel = assertIsDefined(\n\t\t\t\t\t\t\tawait remoteExplorerService.forward(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tremote: tunnelOptions.remoteAddress,\n\t\t\t\t\t\t\t\t\tlocal: tunnelOptions.localAddressPort,\n\t\t\t\t\t\t\t\t\tname: tunnelOptions.label,\n\t\t\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\t\t\t\t\t\t\tdescription: labelService.getHostLabel(\n\t\t\t\t\t\t\t\t\t\t\tSchemas.vscodeRemote,\n\t\t\t\t\t\t\t\t\t\t\tthis.configuration.remoteAuthority,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\televateIfNeeded: false,\n\t\t\t\t\t\t\t\t\tprivacy: tunnelOptions.privacy,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: tunnelOptions.label,\n\t\t\t\t\t\t\t\t\televateIfNeeded: undefined,\n\t\t\t\t\t\t\t\t\tonAutoForward: undefined,\n\t\t\t\t\t\t\t\t\trequireLocalPort: undefined,\n\t\t\t\t\t\t\t\t\tprotocol:\n\t\t\t\t\t\t\t\t\t\ttunnelOptions.protocol ===\n\t\t\t\t\t\t\t\t\t\tTunnelProtocol.Https\n\t\t\t\t\t\t\t\t\t\t\t? tunnelOptions.protocol\n\t\t\t\t\t\t\t\t\t\t\t: TunnelProtocol.Http,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (typeof tunnel === \"string\") {\n\t\t\t\t\t\t\tthrow new Error(tunnel);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn new (class\n\t\t\t\t\t\t\textends DisposableTunnel\n\t\t\t\t\t\t\timplements ITunnel\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeclare localAddress: string;\n\t\t\t\t\t\t})(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttunnel.localAddress,\n\t\t\t\t\t\t\t() => tunnel.dispose(),\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tshutdown: () => lifecycleService.shutdown(),\n\t\t\t} satisfies IWorkbench;\n\t\t});\n\t}\n\n\tprivate registerListeners(workbench: Workbench): void {\n\t\t// Workbench Lifecycle\n\t\tthis._register(\n\t\t\tworkbench.onWillShutdown(() =>\n\t\t\t\tthis.onWillShutdownDisposables.clear(),\n\t\t\t),\n\t\t);\n\t\tthis._register(workbench.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprivate async initServices(): Promise<{\n\t\tserviceCollection: ServiceCollection;\n\t\tconfigurationService: IWorkbenchConfigurationService;\n\t\tlogService: ILogService;\n\t}> {\n\t\tconst serviceCollection = new ServiceCollection();\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\tconst workspace = this.resolveWorkspace();\n\n\t\t// Product\n\t\tconst productService: IProductService = mixin(\n\t\t\t{ _serviceBrand: undefined, ...product },\n\t\t\tthis.configuration.productConfiguration,\n\t\t);\n\t\tserviceCollection.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst logsPath = URI.file(\n\t\t\ttoLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, \"\"),\n\t\t).with({ scheme: \"vscode-log\" });\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService(\n\t\t\tworkspace.id,\n\t\t\tlogsPath,\n\t\t\tthis.configuration,\n\t\t\tproductService,\n\t\t);\n\t\tserviceCollection.set(\n\t\t\tIBrowserWorkbenchEnvironmentService,\n\t\t\tenvironmentService,\n\t\t);\n\n\t\t// Files\n\t\tconst fileLogger = new BufferLogger();\n\t\tconst fileService = this._register(new FileService(fileLogger));\n\t\tserviceCollection.set(IFileService, fileService);\n\n\t\t// Logger\n\t\tconst loggerService = new FileLoggerService(\n\t\t\tgetLogLevel(environmentService),\n\t\t\tlogsPath,\n\t\t\tfileService,\n\t\t);\n\t\tserviceCollection.set(ILoggerService, loggerService);\n\n\t\t// Log Service\n\t\tconst otherLoggers: ILogger[] = [\n\t\t\tnew ConsoleLogger(loggerService.getLogLevel()),\n\t\t];\n\t\tif (\n\t\t\tenvironmentService.isExtensionDevelopment &&\n\t\t\t!!environmentService.extensionTestsLocationURI\n\t\t) {\n\t\t\totherLoggers.push(\n\t\t\t\tnew ConsoleLogInAutomationLogger(loggerService.getLogLevel()),\n\t\t\t);\n\t\t}\n\t\tconst logger = loggerService.createLogger(environmentService.logFile, {\n\t\t\tid: windowLogId,\n\t\t\tname: localize(\"rendererLog\", \"Window\"),\n\t\t});\n\t\tconst logService = new LogService(logger, otherLoggers);\n\t\tserviceCollection.set(ILogService, logService);\n\n\t\t// Set the logger of the fileLogger after the log service is ready.\n\t\t// This is to avoid cyclic dependency\n\t\tfileLogger.logger = logService;\n\n\t\t// Register File System Providers depending on IndexedDB support\n\t\t// Register them early because they are needed for the profiles initialization\n\t\tawait this.registerIndexedDBFileSystemProviders(\n\t\t\tenvironmentService,\n\t\t\tfileService,\n\t\t\tlogService,\n\t\t\tloggerService,\n\t\t\tlogsPath,\n\t\t);\n\n\t\tconst connectionToken =\n\t\t\tenvironmentService.options.connectionToken ||\n\t\t\tgetCookieValue(connectionTokenCookieName);\n\t\tconst remoteResourceLoader = this.configuration.remoteResourceProvider\n\t\t\t? new BrowserRemoteResourceLoader(\n\t\t\t\t\tfileService,\n\t\t\t\t\tthis.configuration.remoteResourceProvider,\n\t\t\t\t)\n\t\t\t: undefined;\n\t\tconst resourceUriProvider =\n\t\t\tthis.configuration.resourceUriProvider ??\n\t\t\tremoteResourceLoader?.getResourceUriProvider();\n\t\tconst remoteAuthorityResolverService =\n\t\t\tnew RemoteAuthorityResolverService(\n\t\t\t\t!environmentService.expectsResolverExtension,\n\t\t\t\tconnectionToken,\n\t\t\t\tresourceUriProvider,\n\t\t\t\tthis.configuration.serverBasePath,\n\t\t\t\tproductService,\n\t\t\t\tlogService,\n\t\t\t);\n\t\tserviceCollection.set(\n\t\t\tIRemoteAuthorityResolverService,\n\t\t\tremoteAuthorityResolverService,\n\t\t);\n\n\t\t// Signing\n\t\tconst signService = new SignService(productService);\n\t\tserviceCollection.set(ISignService, signService);\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tserviceCollection.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = new BrowserUserDataProfilesService(\n\t\t\tenvironmentService,\n\t\t\tfileService,\n\t\t\turiIdentityService,\n\t\t\tlogService,\n\t\t);\n\t\tserviceCollection.set(\n\t\t\tIUserDataProfilesService,\n\t\t\tuserDataProfilesService,\n\t\t);\n\n\t\tconst currentProfile = await this.getCurrentProfile(\n\t\t\tworkspace,\n\t\t\tuserDataProfilesService,\n\t\t\tenvironmentService,\n\t\t);\n\t\tconst userDataProfileService = new UserDataProfileService(\n\t\t\tcurrentProfile,\n\t\t);\n\t\tserviceCollection.set(IUserDataProfileService, userDataProfileService);\n\n\t\t// Remote Agent\n\t\tconst remoteSocketFactoryService = new RemoteSocketFactoryService();\n\t\tremoteSocketFactoryService.register(\n\t\t\tRemoteConnectionType.WebSocket,\n\t\t\tnew BrowserSocketFactory(this.configuration.webSocketFactory),\n\t\t);\n\t\tserviceCollection.set(\n\t\t\tIRemoteSocketFactoryService,\n\t\t\tremoteSocketFactoryService,\n\t\t);\n\t\tconst remoteAgentService = this._register(\n\t\t\tnew RemoteAgentService(\n\t\t\t\tremoteSocketFactoryService,\n\t\t\t\tuserDataProfileService,\n\t\t\t\tenvironmentService,\n\t\t\t\tproductService,\n\t\t\t\tremoteAuthorityResolverService,\n\t\t\t\tsignService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\t\tserviceCollection.set(IRemoteAgentService, remoteAgentService);\n\t\tthis._register(\n\t\t\tRemoteFileSystemProviderClient.register(\n\t\t\t\tremoteAgentService,\n\t\t\t\tfileService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\n\t\t// Long running services (workspace, config, storage)\n\t\tconst [configurationService, storageService] = await Promise.all([\n\t\t\tthis.createWorkspaceService(\n\t\t\t\tworkspace,\n\t\t\t\tenvironmentService,\n\t\t\t\tuserDataProfileService,\n\t\t\t\tuserDataProfilesService,\n\t\t\t\tfileService,\n\t\t\t\tremoteAgentService,\n\t\t\t\turiIdentityService,\n\t\t\t\tlogService,\n\t\t\t).then((service) => {\n\t\t\t\t// Workspace\n\t\t\t\tserviceCollection.set(IWorkspaceContextService, service);\n\n\t\t\t\t// Configuration\n\t\t\t\tserviceCollection.set(IWorkbenchConfigurationService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createStorageService(\n\t\t\t\tworkspace,\n\t\t\t\tlogService,\n\t\t\t\tuserDataProfileService,\n\t\t\t).then((service) => {\n\t\t\t\t// Storage\n\t\t\t\tserviceCollection.set(IStorageService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\t\t]);\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t// Workspace Trust Service\n\t\tconst workspaceTrustEnablementService =\n\t\t\tnew WorkspaceTrustEnablementService(\n\t\t\t\tconfigurationService,\n\t\t\t\tenvironmentService,\n\t\t\t);\n\t\tserviceCollection.set(\n\t\t\tIWorkspaceTrustEnablementService,\n\t\t\tworkspaceTrustEnablementService,\n\t\t);\n\n\t\tconst workspaceTrustManagementService =\n\t\t\tnew WorkspaceTrustManagementService(\n\t\t\t\tconfigurationService,\n\t\t\t\tremoteAuthorityResolverService,\n\t\t\t\tstorageService,\n\t\t\t\turiIdentityService,\n\t\t\t\tenvironmentService,\n\t\t\t\tconfigurationService,\n\t\t\t\tworkspaceTrustEnablementService,\n\t\t\t\tfileService,\n\t\t\t);\n\t\tserviceCollection.set(\n\t\t\tIWorkspaceTrustManagementService,\n\t\t\tworkspaceTrustManagementService,\n\t\t);\n\n\t\t// Update workspace trust so that configuration is updated accordingly\n\t\tconfigurationService.updateWorkspaceTrust(\n\t\t\tworkspaceTrustManagementService.isWorkspaceTrusted(),\n\t\t);\n\t\tthis._register(\n\t\t\tworkspaceTrustManagementService.onDidChangeTrust(() =>\n\t\t\t\tconfigurationService.updateWorkspaceTrust(\n\t\t\t\t\tworkspaceTrustManagementService.isWorkspaceTrusted(),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\t// Request Service\n\t\tconst requestService = new BrowserRequestService(\n\t\t\tremoteAgentService,\n\t\t\tconfigurationService,\n\t\t\tlogService,\n\t\t);\n\t\tserviceCollection.set(IRequestService, requestService);\n\n\t\t// Userdata Sync Store Management Service\n\t\tconst userDataSyncStoreManagementService =\n\t\t\tnew UserDataSyncStoreManagementService(\n\t\t\t\tproductService,\n\t\t\t\tconfigurationService,\n\t\t\t\tstorageService,\n\t\t\t);\n\t\tserviceCollection.set(\n\t\t\tIUserDataSyncStoreManagementService,\n\t\t\tuserDataSyncStoreManagementService,\n\t\t);\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\tconst encryptionService = new EncryptionService();\n\t\tserviceCollection.set(IEncryptionService, encryptionService);\n\t\tconst secretStorageService = new BrowserSecretStorageService(\n\t\t\tstorageService,\n\t\t\tencryptionService,\n\t\t\tenvironmentService,\n\t\t\tlogService,\n\t\t);\n\t\tserviceCollection.set(ISecretStorageService, secretStorageService);\n\n\t\t// Userdata Initialize Service\n\t\tconst userDataInitializers: IUserDataInitializer[] = [];\n\t\tuserDataInitializers.push(\n\t\t\tnew UserDataSyncInitializer(\n\t\t\t\tenvironmentService,\n\t\t\t\tsecretStorageService,\n\t\t\t\tuserDataSyncStoreManagementService,\n\t\t\t\tfileService,\n\t\t\t\tuserDataProfilesService,\n\t\t\t\tstorageService,\n\t\t\t\tproductService,\n\t\t\t\trequestService,\n\t\t\t\tlogService,\n\t\t\t\turiIdentityService,\n\t\t\t),\n\t\t);\n\t\tif (environmentService.options.profile) {\n\t\t\tuserDataInitializers.push(\n\t\t\t\tnew UserDataProfileInitializer(\n\t\t\t\t\tenvironmentService,\n\t\t\t\t\tfileService,\n\t\t\t\t\tuserDataProfileService,\n\t\t\t\t\tstorageService,\n\t\t\t\t\tlogService,\n\t\t\t\t\turiIdentityService,\n\t\t\t\t\trequestService,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tconst userDataInitializationService = new UserDataInitializationService(\n\t\t\tuserDataInitializers,\n\t\t);\n\t\tserviceCollection.set(\n\t\t\tIUserDataInitializationService,\n\t\t\tuserDataInitializationService,\n\t\t);\n\n\t\ttry {\n\t\t\tawait Promise.race([\n\t\t\t\t// Do not block more than 5s\n\t\t\t\ttimeout(5000),\n\t\t\t\tthis.initializeUserData(\n\t\t\t\t\tuserDataInitializationService,\n\t\t\t\t\tconfigurationService,\n\t\t\t\t),\n\t\t\t]);\n\t\t} catch (error) {\n\t\t\tlogService.error(error);\n\t\t}\n\n\t\treturn { serviceCollection, configurationService, logService };\n\t}\n\n\tprivate async initializeUserData(\n\t\tuserDataInitializationService: UserDataInitializationService,\n\t\tconfigurationService: WorkspaceService,\n\t) {\n\t\tif (await userDataInitializationService.requiresInitialization()) {\n\t\t\tmark(\"code/willInitRequiredUserData\");\n\n\t\t\t// Initialize required resources - settings & global state\n\t\t\tawait userDataInitializationService.initializeRequiredResources();\n\n\t\t\t// Important: Reload only local user configuration after initializing\n\t\t\t// Reloading complete configuration blocks workbench until remote configuration is loaded.\n\t\t\tawait configurationService.reloadLocalUserConfiguration();\n\n\t\t\tmark(\"code/didInitRequiredUserData\");\n\t\t}\n\t}\n\n\tprivate async registerIndexedDBFileSystemProviders(\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\tfileService: IFileService,\n\t\tlogService: ILogService,\n\t\tloggerService: ILoggerService,\n\t\tlogsPath: URI,\n\t): Promise<void> {\n\t\t// IndexedDB is used for logging and user data\n\t\tlet indexedDB: IndexedDB | undefined;\n\t\tconst userDataStore = \"vscode-userdata-store\";\n\t\tconst logsStore = \"vscode-logs-store\";\n\t\tconst handlesStore = \"vscode-filehandles-store\";\n\t\ttry {\n\t\t\tindexedDB = await IndexedDB.create(\"vscode-web-db\", 3, [\n\t\t\t\tuserDataStore,\n\t\t\t\tlogsStore,\n\t\t\t\thandlesStore,\n\t\t\t]);\n\n\t\t\t// Close onWillShutdown\n\t\t\tthis.onWillShutdownDisposables.add(\n\t\t\t\ttoDisposable(() => indexedDB?.close()),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogService.error(\"Error while creating IndexedDB\", error);\n\t\t}\n\n\t\t// Logger\n\t\tif (indexedDB) {\n\t\t\tconst logFileSystemProvider = new IndexedDBFileSystemProvider(\n\t\t\t\tlogsPath.scheme,\n\t\t\t\tindexedDB,\n\t\t\t\tlogsStore,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis.indexedDBFileSystemProviders.push(logFileSystemProvider);\n\t\t\tfileService.registerProvider(\n\t\t\t\tlogsPath.scheme,\n\t\t\t\tlogFileSystemProvider,\n\t\t\t);\n\t\t} else {\n\t\t\tfileService.registerProvider(\n\t\t\t\tlogsPath.scheme,\n\t\t\t\tnew InMemoryFileSystemProvider(),\n\t\t\t);\n\t\t}\n\n\t\t// User data\n\t\tlet userDataProvider;\n\t\tif (indexedDB) {\n\t\t\tuserDataProvider = new IndexedDBFileSystemProvider(\n\t\t\t\tSchemas.vscodeUserData,\n\t\t\t\tindexedDB,\n\t\t\t\tuserDataStore,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis.indexedDBFileSystemProviders.push(userDataProvider);\n\t\t\tthis.registerDeveloperActions(\n\t\t\t\t<IndexedDBFileSystemProvider>userDataProvider,\n\t\t\t);\n\t\t} else {\n\t\t\tlogService.info(\"Using in-memory user data provider\");\n\t\t\tuserDataProvider = new InMemoryFileSystemProvider();\n\t\t}\n\t\tfileService.registerProvider(Schemas.vscodeUserData, userDataProvider);\n\n\t\t// Local file access (if supported by browser)\n\t\tif (WebFileSystemAccess.supported(mainWindow)) {\n\t\t\tfileService.registerProvider(\n\t\t\t\tSchemas.file,\n\t\t\t\tnew HTMLFileSystemProvider(indexedDB, handlesStore, logService),\n\t\t\t);\n\t\t}\n\n\t\t// In-memory\n\t\tfileService.registerProvider(\n\t\t\tSchemas.tmp,\n\t\t\tnew InMemoryFileSystemProvider(),\n\t\t);\n\t}\n\n\tprivate registerDeveloperActions(\n\t\tprovider: IndexedDBFileSystemProvider,\n\t): void {\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass ResetUserDataAction extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: \"workbench.action.resetUserData\",\n\t\t\t\t\t\t\ttitle: localize2(\"reset\", \"Reset User Data\"),\n\t\t\t\t\t\t\tcategory: Categories.Developer,\n\t\t\t\t\t\t\tmenu: {\n\t\t\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\t\t\tconst logService = accessor.get(ILogService);\n\t\t\t\t\t\tconst result = await dialogService.confirm({\n\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\"reset user data message\",\n\t\t\t\t\t\t\t\t\"Would you like to reset your data (settings, keybindings, extensions, snippets and UI State) and reload?\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (result.confirmed) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait provider?.reset();\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tstorageService instanceof\n\t\t\t\t\t\t\t\t\tBrowserStorageService\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tawait storageService.clear();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tlogService.error(error);\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\thostService.reload();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async createStorageService(\n\t\tworkspace: IAnyWorkspaceIdentifier,\n\t\tlogService: ILogService,\n\t\tuserDataProfileService: IUserDataProfileService,\n\t): Promise<IStorageService> {\n\t\tconst storageService = new BrowserStorageService(\n\t\t\tworkspace,\n\t\t\tuserDataProfileService,\n\t\t\tlogService,\n\t\t);\n\n\t\ttry {\n\t\t\tawait storageService.initialize();\n\n\t\t\t// Register to close on shutdown\n\t\t\tthis.onWillShutdownDisposables.add(\n\t\t\t\ttoDisposable(() => storageService.close()),\n\t\t\t);\n\n\t\t\treturn storageService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn storageService;\n\t\t}\n\t}\n\n\tprivate async createWorkspaceService(\n\t\tworkspace: IAnyWorkspaceIdentifier,\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\tuserDataProfileService: IUserDataProfileService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\tfileService: FileService,\n\t\tremoteAgentService: IRemoteAgentService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tlogService: ILogService,\n\t): Promise<WorkspaceService> {\n\t\t// Temporary workspaces do not exist on startup because they are\n\t\t// just in memory. As such, detect this case and eagerly create\n\t\t// the workspace file empty so that it is a valid workspace.\n\n\t\tif (\n\t\t\tisWorkspaceIdentifier(workspace) &&\n\t\t\tisTemporaryWorkspace(workspace.configPath)\n\t\t) {\n\t\t\ttry {\n\t\t\t\tconst emptyWorkspace: IStoredWorkspace = { folders: [] };\n\t\t\t\tawait fileService.createFile(\n\t\t\t\t\tworkspace.configPath,\n\t\t\t\t\tVSBuffer.fromString(\n\t\t\t\t\t\tJSON.stringify(emptyWorkspace, null, \"\\t\"),\n\t\t\t\t\t),\n\t\t\t\t\t{ overwrite: false },\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// ignore if workspace file already exists\n\t\t\t}\n\t\t}\n\n\t\tconst configurationCache = new ConfigurationCache(\n\t\t\t[\n\t\t\t\tSchemas.file,\n\t\t\t\tSchemas.vscodeUserData,\n\t\t\t\tSchemas.tmp,\n\t\t\t] /* Cache all non native resources */,\n\t\t\tenvironmentService,\n\t\t\tfileService,\n\t\t);\n\t\tconst workspaceService = new WorkspaceService(\n\t\t\t{\n\t\t\t\tremoteAuthority: this.configuration.remoteAuthority,\n\t\t\t\tconfigurationCache,\n\t\t\t},\n\t\t\tenvironmentService,\n\t\t\tuserDataProfileService,\n\t\t\tuserDataProfilesService,\n\t\t\tfileService,\n\t\t\tremoteAgentService,\n\t\t\turiIdentityService,\n\t\t\tlogService,\n\t\t\tnew NullPolicyService(),\n\t\t);\n\n\t\ttry {\n\t\t\tawait workspaceService.initialize(workspace);\n\n\t\t\treturn workspaceService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn workspaceService;\n\t\t}\n\t}\n\n\tprivate async getCurrentProfile(\n\t\tworkspace: IAnyWorkspaceIdentifier,\n\t\tuserDataProfilesService: BrowserUserDataProfilesService,\n\t\tenvironmentService: BrowserWorkbenchEnvironmentService,\n\t): Promise<IUserDataProfile> {\n\t\tconst profileName =\n\t\t\tenvironmentService.options?.profile?.name ??\n\t\t\tenvironmentService.profile;\n\t\tif (profileName) {\n\t\t\tconst profile = userDataProfilesService.profiles.find(\n\t\t\t\t(p) => p.name === profileName,\n\t\t\t);\n\t\t\tif (profile) {\n\t\t\t\treturn profile;\n\t\t\t}\n\t\t\treturn userDataProfilesService.createNamedProfile(\n\t\t\t\tprofileName,\n\t\t\t\tundefined,\n\t\t\t\tworkspace,\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\tuserDataProfilesService.getProfileForWorkspace(workspace) ??\n\t\t\tuserDataProfilesService.defaultProfile\n\t\t);\n\t}\n\n\tprivate resolveWorkspace(): IAnyWorkspaceIdentifier {\n\t\tlet workspace: IWorkspace | undefined;\n\t\tif (this.configuration.workspaceProvider) {\n\t\t\tworkspace = this.configuration.workspaceProvider.workspace;\n\t\t}\n\n\t\t// Multi-root workspace\n\t\tif (workspace && isWorkspaceToOpen(workspace)) {\n\t\t\treturn getWorkspaceIdentifier(workspace.workspaceUri);\n\t\t}\n\n\t\t// Single-folder workspace\n\t\tif (workspace && isFolderToOpen(workspace)) {\n\t\t\treturn getSingleFolderWorkspaceIdentifier(workspace.folderUri);\n\t\t}\n\n\t\t// Empty window workspace\n\t\treturn UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["instantiationService"]
}
