{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/web.factory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from \"../../base/common/arrays.js\";\nimport { DeferredPromise } from \"../../base/common/async.js\";\nimport { type IDisposable, toDisposable } from \"../../base/common/lifecycle.js\";\nimport { type PerformanceMark, mark } from \"../../base/common/performance.js\";\nimport type { URI } from \"../../base/common/uri.js\";\nimport { MenuId, MenuRegistry } from \"../../platform/actions/common/actions.js\";\nimport { CommandsRegistry } from \"../../platform/commands/common/commands.js\";\nimport type { LogLevel } from \"../../platform/log/common/log.js\";\nimport type {\n\tIProgress,\n\tIProgressCompositeOptions,\n\tIProgressDialogOptions,\n\tIProgressNotificationOptions,\n\tIProgressOptions,\n\tIProgressStep,\n\tIProgressWindowOptions,\n} from \"../../platform/progress/common/progress.js\";\nimport type { IEmbedderTerminalOptions } from \"../services/terminal/common/embedderTerminalService.js\";\nimport {\n\ttype ITunnel,\n\ttype ITunnelOptions,\n\ttype IWorkbench,\n\ttype IWorkbenchConstructionOptions,\n\tMenu,\n} from \"./web.api.js\";\nimport { BrowserMain } from \"./web.main.js\";\n\nlet created = false;\nconst workbenchPromise = new DeferredPromise<IWorkbench>();\n\n/**\n * Creates the workbench with the provided options in the provided container.\n *\n * @param domElement the container to create the workbench in\n * @param options for setting up the workbench\n */\nexport function create(\n\tdomElement: HTMLElement,\n\toptions: IWorkbenchConstructionOptions,\n): IDisposable {\n\t// Mark start of workbench\n\tmark(\"code/didLoadWorkbenchMain\");\n\n\t// Assert that the workbench is not created more than once. We currently\n\t// do not support this and require a full context switch to clean-up.\n\tif (created) {\n\t\tthrow new Error(\n\t\t\t\"Unable to create the VSCode workbench more than once.\",\n\t\t);\n\t} else {\n\t\tcreated = true;\n\t}\n\n\t// Register commands if any\n\tif (Array.isArray(options.commands)) {\n\t\tfor (const command of options.commands) {\n\t\t\tCommandsRegistry.registerCommand(\n\t\t\t\tcommand.id,\n\t\t\t\t(accessor, ...args) => {\n\t\t\t\t\t// we currently only pass on the arguments but not the accessor\n\t\t\t\t\t// to the command to reduce our exposure of internal API.\n\t\t\t\t\treturn command.handler(...args);\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// Commands with labels appear in the command palette\n\t\t\tif (command.label) {\n\t\t\t\tfor (const menu of asArray(\n\t\t\t\t\tcommand.menu ?? Menu.CommandPalette,\n\t\t\t\t)) {\n\t\t\t\t\tMenuRegistry.appendMenuItem(asMenuId(menu), {\n\t\t\t\t\t\tcommand: { id: command.id, title: command.label },\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Startup workbench and resolve waiters\n\tlet instantiatedWorkbench: IWorkbench | undefined;\n\tnew BrowserMain(domElement, options).open().then((workbench) => {\n\t\tinstantiatedWorkbench = workbench;\n\t\tworkbenchPromise.complete(workbench);\n\t});\n\n\treturn toDisposable(() => {\n\t\tif (instantiatedWorkbench) {\n\t\t\tinstantiatedWorkbench.shutdown();\n\t\t} else {\n\t\t\tworkbenchPromise.p.then((instantiatedWorkbench) =>\n\t\t\t\tinstantiatedWorkbench.shutdown(),\n\t\t\t);\n\t\t}\n\t});\n}\n\nfunction asMenuId(menu: Menu): MenuId {\n\tswitch (menu) {\n\t\tcase Menu.CommandPalette:\n\t\t\treturn MenuId.CommandPalette;\n\t\tcase Menu.StatusBarWindowIndicatorMenu:\n\t\t\treturn MenuId.StatusBarWindowIndicatorMenu;\n\t}\n}\n\nexport namespace commands {\n\t/**\n\t * {@linkcode IWorkbench.commands IWorkbench.commands.executeCommand}\n\t */\n\texport async function executeCommand(\n\t\tcommand: string,\n\t\t...args: any[]\n\t): Promise<unknown> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.commands.executeCommand(command, ...args);\n\t}\n}\n\nexport namespace logger {\n\t/**\n\t * {@linkcode IWorkbench.logger IWorkbench.logger.log}\n\t */\n\texport function log(level: LogLevel, message: string) {\n\t\tworkbenchPromise.p.then((workbench) =>\n\t\t\tworkbench.logger.log(level, message),\n\t\t);\n\t}\n}\n\nexport namespace env {\n\t/**\n\t * {@linkcode IWorkbench.env IWorkbench.env.retrievePerformanceMarks}\n\t */\n\texport async function retrievePerformanceMarks(): Promise<\n\t\t[string, readonly PerformanceMark[]][]\n\t> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.env.retrievePerformanceMarks();\n\t}\n\n\t/**\n\t * {@linkcode IWorkbench.env IWorkbench.env.getUriScheme}\n\t */\n\texport async function getUriScheme(): Promise<string> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.env.getUriScheme();\n\t}\n\n\t/**\n\t * {@linkcode IWorkbench.env IWorkbench.env.openUri}\n\t */\n\texport async function openUri(target: URI): Promise<boolean> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.env.openUri(target);\n\t}\n}\n\nexport namespace window {\n\t/**\n\t * {@linkcode IWorkbench.window IWorkbench.window.withProgress}\n\t */\n\texport async function withProgress<R>(\n\t\toptions:\n\t\t\t| IProgressOptions\n\t\t\t| IProgressDialogOptions\n\t\t\t| IProgressNotificationOptions\n\t\t\t| IProgressWindowOptions\n\t\t\t| IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t): Promise<R> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.window.withProgress(options, task);\n\t}\n\n\texport async function createTerminal(\n\t\toptions: IEmbedderTerminalOptions,\n\t): Promise<void> {\n\t\tconst workbench = await workbenchPromise.p;\n\t\tworkbench.window.createTerminal(options);\n\t}\n\n\texport async function showInformationMessage<T extends string>(\n\t\tmessage: string,\n\t\t...items: T[]\n\t): Promise<T | undefined> {\n\t\tconst workbench = await workbenchPromise.p;\n\t\treturn await workbench.window.showInformationMessage(message, ...items);\n\t}\n}\n\nexport namespace workspace {\n\t/**\n\t * {@linkcode IWorkbench.workspace IWorkbench.workspace.didResolveRemoteAuthority}\n\t */\n\texport async function didResolveRemoteAuthority() {\n\t\tconst workbench = await workbenchPromise.p;\n\t\tawait workbench.workspace.didResolveRemoteAuthority();\n\t}\n\n\t/**\n\t * {@linkcode IWorkbench.workspace IWorkbench.workspace.openTunnel}\n\t */\n\texport async function openTunnel(\n\t\ttunnelOptions: ITunnelOptions,\n\t): Promise<ITunnel> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.workspace.openTunnel(tunnelOptions);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["instantiatedWorkbench", "commands", "logger", "env", "window", "workspace"]
}
