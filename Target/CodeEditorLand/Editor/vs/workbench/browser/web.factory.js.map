{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/web.factory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITunnel, ITunnelOptions, IWorkbench, IWorkbenchConstructionOptions, Menu } from './web.api.js';\nimport { BrowserMain } from './web.main.js';\nimport { URI } from '../../base/common/uri.js';\nimport { IDisposable, toDisposable } from '../../base/common/lifecycle.js';\nimport { CommandsRegistry } from '../../platform/commands/common/commands.js';\nimport { mark, PerformanceMark } from '../../base/common/performance.js';\nimport { MenuId, MenuRegistry } from '../../platform/actions/common/actions.js';\nimport { DeferredPromise } from '../../base/common/async.js';\nimport { asArray } from '../../base/common/arrays.js';\nimport { IProgress, IProgressCompositeOptions, IProgressDialogOptions, IProgressNotificationOptions, IProgressOptions, IProgressStep, IProgressWindowOptions } from '../../platform/progress/common/progress.js';\nimport { LogLevel } from '../../platform/log/common/log.js';\nimport { IEmbedderTerminalOptions } from '../services/terminal/common/embedderTerminalService.js';\n\nlet created = false;\nconst workbenchPromise = new DeferredPromise<IWorkbench>();\n\n/**\n * Creates the workbench with the provided options in the provided container.\n *\n * @param domElement the container to create the workbench in\n * @param options for setting up the workbench\n */\nexport function create(domElement: HTMLElement, options: IWorkbenchConstructionOptions): IDisposable {\n\n\t// Mark start of workbench\n\tmark('code/didLoadWorkbenchMain');\n\n\t// Assert that the workbench is not created more than once. We currently\n\t// do not support this and require a full context switch to clean-up.\n\tif (created) {\n\t\tthrow new Error('Unable to create the VSCode workbench more than once.');\n\t} else {\n\t\tcreated = true;\n\t}\n\n\t// Register commands if any\n\tif (Array.isArray(options.commands)) {\n\t\tfor (const command of options.commands) {\n\n\t\t\tCommandsRegistry.registerCommand(command.id, (accessor, ...args) => {\n\t\t\t\t// we currently only pass on the arguments but not the accessor\n\t\t\t\t// to the command to reduce our exposure of internal API.\n\t\t\t\treturn command.handler(...args);\n\t\t\t});\n\n\t\t\t// Commands with labels appear in the command palette\n\t\t\tif (command.label) {\n\t\t\t\tfor (const menu of asArray(command.menu ?? Menu.CommandPalette)) {\n\t\t\t\t\tMenuRegistry.appendMenuItem(asMenuId(menu), { command: { id: command.id, title: command.label } });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Startup workbench and resolve waiters\n\tlet instantiatedWorkbench: IWorkbench | undefined = undefined;\n\tnew BrowserMain(domElement, options).open().then(workbench => {\n\t\tinstantiatedWorkbench = workbench;\n\t\tworkbenchPromise.complete(workbench);\n\t});\n\n\treturn toDisposable(() => {\n\t\tif (instantiatedWorkbench) {\n\t\t\tinstantiatedWorkbench.shutdown();\n\t\t} else {\n\t\t\tworkbenchPromise.p.then(instantiatedWorkbench => instantiatedWorkbench.shutdown());\n\t\t}\n\t});\n}\n\nfunction asMenuId(menu: Menu): MenuId {\n\tswitch (menu) {\n\t\tcase Menu.CommandPalette: return MenuId.CommandPalette;\n\t\tcase Menu.StatusBarWindowIndicatorMenu: return MenuId.StatusBarWindowIndicatorMenu;\n\t}\n}\n\nexport namespace commands {\n\n\t/**\n\t * {@linkcode IWorkbench.commands IWorkbench.commands.executeCommand}\n\t */\n\texport async function executeCommand(command: string, ...args: any[]): Promise<unknown> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.commands.executeCommand(command, ...args);\n\t}\n}\n\nexport namespace logger {\n\n\t/**\n\t * {@linkcode IWorkbench.logger IWorkbench.logger.log}\n\t */\n\texport function log(level: LogLevel, message: string) {\n\t\tworkbenchPromise.p.then(workbench => workbench.logger.log(level, message));\n\t}\n}\n\nexport namespace env {\n\n\t/**\n\t * {@linkcode IWorkbench.env IWorkbench.env.retrievePerformanceMarks}\n\t */\n\texport async function retrievePerformanceMarks(): Promise<[string, readonly PerformanceMark[]][]> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.env.retrievePerformanceMarks();\n\t}\n\n\t/**\n\t * {@linkcode IWorkbench.env IWorkbench.env.getUriScheme}\n\t */\n\texport async function getUriScheme(): Promise<string> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.env.getUriScheme();\n\t}\n\n\t/**\n\t * {@linkcode IWorkbench.env IWorkbench.env.openUri}\n\t */\n\texport async function openUri(target: URI): Promise<boolean> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.env.openUri(target);\n\t}\n}\n\nexport namespace window {\n\n\t/**\n\t * {@linkcode IWorkbench.window IWorkbench.window.withProgress}\n\t */\n\texport async function withProgress<R>(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>\n\t): Promise<R> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.window.withProgress(options, task);\n\t}\n\n\texport async function createTerminal(options: IEmbedderTerminalOptions): Promise<void> {\n\t\tconst workbench = await workbenchPromise.p;\n\t\tworkbench.window.createTerminal(options);\n\t}\n\n\texport async function showInformationMessage<T extends string>(message: string, ...items: T[]): Promise<T | undefined> {\n\t\tconst workbench = await workbenchPromise.p;\n\t\treturn await workbench.window.showInformationMessage(message, ...items);\n\t}\n}\n\nexport namespace workspace {\n\n\t/**\n\t * {@linkcode IWorkbench.workspace IWorkbench.workspace.didResolveRemoteAuthority}\n\t */\n\texport async function didResolveRemoteAuthority() {\n\t\tconst workbench = await workbenchPromise.p;\n\t\tawait workbench.workspace.didResolveRemoteAuthority();\n\t}\n\n\t/**\n\t * {@linkcode IWorkbench.workspace IWorkbench.workspace.openTunnel}\n\t */\n\texport async function openTunnel(tunnelOptions: ITunnelOptions): Promise<ITunnel> {\n\t\tconst workbench = await workbenchPromise.p;\n\n\t\treturn workbench.workspace.openTunnel(tunnelOptions);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["instantiatedWorkbench", "commands", "logger", "env", "window", "workspace"]
}
