{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsTelemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hash } from \"../../../../base/common/hash.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tINotificationService,\n\ttype NotificationMessage,\n\tNotificationPriority,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\n\nexport interface NotificationMetrics {\n\treadonly id: string;\n\treadonly silent: boolean;\n\treadonly source?: string;\n}\n\nexport type NotificationMetricsClassification = {\n\tid: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The identifier of the source of the notification.\";\n\t};\n\tsilent: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Whether the notification is silent or not.\";\n\t};\n\tsource?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The source of the notification.\";\n\t};\n\towner: \"bpasero\";\n\tcomment: \"Helps us gain insights to what notifications are being shown, how many, and if they are silent or not.\";\n};\n\nexport function notificationToMetrics(\n\tmessage: NotificationMessage,\n\tsource: string | undefined,\n\tsilent: boolean,\n): NotificationMetrics {\n\treturn {\n\t\tid: hash(message.toString()).toString(),\n\t\tsilent,\n\t\tsource: source || \"core\",\n\t};\n}\n\nexport class NotificationsTelemetry\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.notificationService.onDidAddNotification((notification) => {\n\t\t\t\tconst source =\n\t\t\t\t\tnotification.source &&\n\t\t\t\t\ttypeof notification.source !== \"string\"\n\t\t\t\t\t\t? notification.source.id\n\t\t\t\t\t\t: notification.source;\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tNotificationMetrics,\n\t\t\t\t\tNotificationMetricsClassification\n\t\t\t\t>(\n\t\t\t\t\t\"notification:show\",\n\t\t\t\t\tnotificationToMetrics(\n\t\t\t\t\t\tnotification.message,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\tnotification.priority === NotificationPriority.SILENT,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.notificationService.onDidRemoveNotification((notification) => {\n\t\t\t\tconst source =\n\t\t\t\t\tnotification.source &&\n\t\t\t\t\ttypeof notification.source !== \"string\"\n\t\t\t\t\t\t? notification.source.id\n\t\t\t\t\t\t: notification.source;\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tNotificationMetrics,\n\t\t\t\t\tNotificationMetricsClassification\n\t\t\t\t>(\n\t\t\t\t\t\"notification:close\",\n\t\t\t\t\tnotificationToMetrics(\n\t\t\t\t\t\tnotification.message,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\tnotification.priority === NotificationPriority.SILENT,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,yBAAyB;AA6B3B,SAAS,sBACf,SACA,QACA,QACsB;AACtB,SAAO;AAAA,IACN,IAAI,KAAK,QAAQ,SAAS,CAAC,EAAE,SAAS;AAAA,IACtC;AAAA,IACA,QAAQ,UAAU;AAAA,EACnB;AACD;AAVgB;AAYT,IAAM,yBAAN,cACE,WAET;AAAA,EACC,YACqC,kBACG,qBACtC;AACD,UAAM;AAH8B;AACG;AAGvC,SAAK,kBAAkB;AAAA,EACxB;AAAA,EA/DD,OAwDA;AAAA;AAAA;AAAA,EASS,oBAA0B;AACjC,SAAK;AAAA,MACJ,KAAK,oBAAoB,qBAAqB,CAAC,iBAAiB;AAC/D,cAAM,SACL,aAAa,UACb,OAAO,aAAa,WAAW,WAC5B,aAAa,OAAO,KACpB,aAAa;AACjB,aAAK,iBAAiB;AAAA,UAIrB;AAAA,UACA;AAAA,YACC,aAAa;AAAA,YACb;AAAA,YACA,aAAa,aAAa,qBAAqB;AAAA,UAChD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK;AAAA,MACJ,KAAK,oBAAoB,wBAAwB,CAAC,iBAAiB;AAClE,cAAM,SACL,aAAa,UACb,OAAO,aAAa,WAAW,WAC5B,aAAa,OAAO,KACpB,aAAa;AACjB,aAAK,iBAAiB;AAAA,UAIrB;AAAA,UACA;AAAA,YACC,aAAa;AAAA,YACb;AAAA,YACA,aAAa,aAAa,qBAAqB;AAAA,UAChD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAvDa,yBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,GANU;",
  "names": []
}
