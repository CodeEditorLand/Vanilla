{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INotificationsModel, INotificationChangeEvent, NotificationChangeType, IStatusMessageChangeEvent, StatusMessageChangeType, IStatusMessageViewItem } from '../../../common/notifications.js';\nimport { IStatusbarService, StatusbarAlignment, IStatusbarEntryAccessor, IStatusbarEntry } from '../../../services/statusbar/browser/statusbar.js';\nimport { Disposable, IDisposable, dispose } from '../../../../base/common/lifecycle.js';\nimport { HIDE_NOTIFICATIONS_CENTER, SHOW_NOTIFICATIONS_CENTER } from './notificationsCommands.js';\nimport { localize } from '../../../../nls.js';\nimport { INotificationService, NotificationsFilter } from '../../../../platform/notification/common/notification.js';\n\nexport class NotificationsStatus extends Disposable {\n\n\tprivate notificationsCenterStatusItem: IStatusbarEntryAccessor | undefined;\n\tprivate newNotificationsCount = 0;\n\n\tprivate currentStatusMessage: [IStatusMessageViewItem, IDisposable] | undefined;\n\n\tprivate isNotificationsCenterVisible: boolean = false;\n\tprivate isNotificationsToastsVisible: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateNotificationsCenterStatusItem();\n\n\t\tif (model.statusMessage) {\n\t\t\tthis.doSetStatusMessage(model.statusMessage);\n\t\t}\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n\t\tthis._register(this.model.onDidChangeStatusMessage(e => this.onDidChangeStatusMessage(e)));\n\t\tthis._register(this.notificationService.onDidChangeFilter(() => this.updateNotificationsCenterStatusItem()));\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\n\t\t// Consider a notification as unread as long as it only\n\t\t// appeared as toast and not in the notification center\n\t\tif (!this.isNotificationsCenterVisible) {\n\t\t\tif (e.kind === NotificationChangeType.ADD) {\n\t\t\t\tthis.newNotificationsCount++;\n\t\t\t} else if (e.kind === NotificationChangeType.REMOVE && this.newNotificationsCount > 0) {\n\t\t\t\tthis.newNotificationsCount--;\n\t\t\t}\n\t\t}\n\n\t\t// Update in status bar\n\t\tthis.updateNotificationsCenterStatusItem();\n\t}\n\n\tprivate updateNotificationsCenterStatusItem(): void {\n\n\t\t// Figure out how many notifications have progress only if neither\n\t\t// toasts are visible nor center is visible. In that case we still\n\t\t// want to give a hint to the user that something is running.\n\t\tlet notificationsInProgress = 0;\n\t\tif (!this.isNotificationsCenterVisible && !this.isNotificationsToastsVisible) {\n\t\t\tfor (const notification of this.model.notifications) {\n\t\t\t\tif (notification.hasProgress) {\n\t\t\t\t\tnotificationsInProgress++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Show the status bar entry depending on do not disturb setting\n\n\t\tlet statusProperties: IStatusbarEntry = {\n\t\t\tname: localize('status.notifications', \"Notifications\"),\n\t\t\ttext: `${notificationsInProgress > 0 || this.newNotificationsCount > 0 ? '$(bell-dot)' : '$(bell)'}`,\n\t\t\tariaLabel: localize('status.notifications', \"Notifications\"),\n\t\t\tcommand: this.isNotificationsCenterVisible ? HIDE_NOTIFICATIONS_CENTER : SHOW_NOTIFICATIONS_CENTER,\n\t\t\ttooltip: this.getTooltip(notificationsInProgress),\n\t\t\tshowBeak: this.isNotificationsCenterVisible\n\t\t};\n\n\t\tif (this.notificationService.getFilter() === NotificationsFilter.ERROR) {\n\t\t\tstatusProperties = {\n\t\t\t\t...statusProperties,\n\t\t\t\ttext: `${notificationsInProgress > 0 || this.newNotificationsCount > 0 ? '$(bell-slash-dot)' : '$(bell-slash)'}`,\n\t\t\t\tariaLabel: localize('status.doNotDisturb', \"Do Not Disturb\"),\n\t\t\t\ttooltip: localize('status.doNotDisturbTooltip', \"Do Not Disturb Mode is Enabled\")\n\t\t\t};\n\t\t}\n\n\t\tif (!this.notificationsCenterStatusItem) {\n\t\t\tthis.notificationsCenterStatusItem = this.statusbarService.addEntry(\n\t\t\t\tstatusProperties,\n\t\t\t\t'status.notifications',\n\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t-Number.MAX_VALUE /* towards the far end of the right hand side */\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationsCenterStatusItem.update(statusProperties);\n\t\t}\n\t}\n\n\tprivate getTooltip(notificationsInProgress: number): string {\n\t\tif (this.isNotificationsCenterVisible) {\n\t\t\treturn localize('hideNotifications', \"Hide Notifications\");\n\t\t}\n\n\t\tif (this.model.notifications.length === 0) {\n\t\t\treturn localize('zeroNotifications', \"No Notifications\");\n\t\t}\n\n\t\tif (notificationsInProgress === 0) {\n\t\t\tif (this.newNotificationsCount === 0) {\n\t\t\t\treturn localize('noNotifications', \"No New Notifications\");\n\t\t\t}\n\n\t\t\tif (this.newNotificationsCount === 1) {\n\t\t\t\treturn localize('oneNotification', \"1 New Notification\");\n\t\t\t}\n\n\t\t\treturn localize({ key: 'notifications', comment: ['{0} will be replaced by a number'] }, \"{0} New Notifications\", this.newNotificationsCount);\n\t\t}\n\n\t\tif (this.newNotificationsCount === 0) {\n\t\t\treturn localize({ key: 'noNotificationsWithProgress', comment: ['{0} will be replaced by a number'] }, \"No New Notifications ({0} in progress)\", notificationsInProgress);\n\t\t}\n\n\t\tif (this.newNotificationsCount === 1) {\n\t\t\treturn localize({ key: 'oneNotificationWithProgress', comment: ['{0} will be replaced by a number'] }, \"1 New Notification ({0} in progress)\", notificationsInProgress);\n\t\t}\n\n\t\treturn localize({ key: 'notificationsWithProgress', comment: ['{0} and {1} will be replaced by a number'] }, \"{0} New Notifications ({1} in progress)\", this.newNotificationsCount, notificationsInProgress);\n\t}\n\n\tupdate(isCenterVisible: boolean, isToastsVisible: boolean): void {\n\t\tlet updateNotificationsCenterStatusItem = false;\n\n\t\tif (this.isNotificationsCenterVisible !== isCenterVisible) {\n\t\t\tthis.isNotificationsCenterVisible = isCenterVisible;\n\t\t\tthis.newNotificationsCount = 0; // Showing the notification center resets the unread counter to 0\n\t\t\tupdateNotificationsCenterStatusItem = true;\n\t\t}\n\n\t\tif (this.isNotificationsToastsVisible !== isToastsVisible) {\n\t\t\tthis.isNotificationsToastsVisible = isToastsVisible;\n\t\t\tupdateNotificationsCenterStatusItem = true;\n\t\t}\n\n\t\t// Update in status bar as needed\n\t\tif (updateNotificationsCenterStatusItem) {\n\t\t\tthis.updateNotificationsCenterStatusItem();\n\t\t}\n\t}\n\n\tprivate onDidChangeStatusMessage(e: IStatusMessageChangeEvent): void {\n\t\tconst statusItem = e.item;\n\n\t\tswitch (e.kind) {\n\n\t\t\t// Show status notification\n\t\t\tcase StatusMessageChangeType.ADD:\n\t\t\t\tthis.doSetStatusMessage(statusItem);\n\n\t\t\t\tbreak;\n\n\t\t\t// Hide status notification (if its still the current one)\n\t\t\tcase StatusMessageChangeType.REMOVE:\n\t\t\t\tif (this.currentStatusMessage && this.currentStatusMessage[0] === statusItem) {\n\t\t\t\t\tdispose(this.currentStatusMessage[1]);\n\t\t\t\t\tthis.currentStatusMessage = undefined;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate doSetStatusMessage(item: IStatusMessageViewItem): void {\n\t\tconst message = item.message;\n\n\t\tconst showAfter = item.options && typeof item.options.showAfter === 'number' ? item.options.showAfter : 0;\n\t\tconst hideAfter = item.options && typeof item.options.hideAfter === 'number' ? item.options.hideAfter : -1;\n\n\t\t// Dismiss any previous\n\t\tif (this.currentStatusMessage) {\n\t\t\tdispose(this.currentStatusMessage[1]);\n\t\t}\n\n\t\t// Create new\n\t\tlet statusMessageEntry: IStatusbarEntryAccessor;\n\t\tlet showHandle: any = setTimeout(() => {\n\t\t\tstatusMessageEntry = this.statusbarService.addEntry(\n\t\t\t\t{\n\t\t\t\t\tname: localize('status.message', \"Status Message\"),\n\t\t\t\t\ttext: message,\n\t\t\t\t\tariaLabel: message\n\t\t\t\t},\n\t\t\t\t'status.message',\n\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t-Number.MAX_VALUE /* far right on left hand side */\n\t\t\t);\n\t\t\tshowHandle = null;\n\t\t}, showAfter);\n\n\t\t// Dispose function takes care of timeouts and actual entry\n\t\tlet hideHandle: any;\n\t\tconst statusMessageDispose = {\n\t\t\tdispose: () => {\n\t\t\t\tif (showHandle) {\n\t\t\t\t\tclearTimeout(showHandle);\n\t\t\t\t}\n\n\t\t\t\tif (hideHandle) {\n\t\t\t\t\tclearTimeout(hideHandle);\n\t\t\t\t}\n\n\t\t\t\tstatusMessageEntry?.dispose();\n\t\t\t}\n\t\t};\n\n\t\tif (hideAfter > 0) {\n\t\t\thideHandle = setTimeout(() => statusMessageDispose.dispose(), hideAfter);\n\t\t}\n\n\t\t// Remember as current status message\n\t\tthis.currentStatusMessage = [item, statusMessageDispose];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
