{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tINotificationService,\n\tNotificationsFilter,\n} from \"../../../../platform/notification/common/notification.js\";\nimport {\n\ttype INotificationChangeEvent,\n\ttype INotificationsModel,\n\ttype IStatusMessageChangeEvent,\n\ttype IStatusMessageViewItem,\n\tNotificationChangeType,\n\tStatusMessageChangeType,\n} from \"../../../common/notifications.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\nimport {\n\tHIDE_NOTIFICATIONS_CENTER,\n\tSHOW_NOTIFICATIONS_CENTER,\n} from \"./notificationsCommands.js\";\n\nexport class NotificationsStatus extends Disposable {\n\tprivate notificationsCenterStatusItem: IStatusbarEntryAccessor | undefined;\n\tprivate newNotificationsCount = 0;\n\n\tprivate currentStatusMessage:\n\t\t| [IStatusMessageViewItem, IDisposable]\n\t\t| undefined;\n\n\tprivate isNotificationsCenterVisible = false;\n\tprivate isNotificationsToastsVisible = false;\n\n\tconstructor(\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateNotificationsCenterStatusItem();\n\n\t\tif (model.statusMessage) {\n\t\t\tthis.doSetStatusMessage(model.statusMessage);\n\t\t}\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.model.onDidChangeNotification((e) =>\n\t\t\t\tthis.onDidChangeNotification(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.model.onDidChangeStatusMessage((e) =>\n\t\t\t\tthis.onDidChangeStatusMessage(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.notificationService.onDidChangeFilter(() =>\n\t\t\t\tthis.updateNotificationsCenterStatusItem(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\t\t// Consider a notification as unread as long as it only\n\t\t// appeared as toast and not in the notification center\n\t\tif (!this.isNotificationsCenterVisible) {\n\t\t\tif (e.kind === NotificationChangeType.ADD) {\n\t\t\t\tthis.newNotificationsCount++;\n\t\t\t} else if (\n\t\t\t\te.kind === NotificationChangeType.REMOVE &&\n\t\t\t\tthis.newNotificationsCount > 0\n\t\t\t) {\n\t\t\t\tthis.newNotificationsCount--;\n\t\t\t}\n\t\t}\n\n\t\t// Update in status bar\n\t\tthis.updateNotificationsCenterStatusItem();\n\t}\n\n\tprivate updateNotificationsCenterStatusItem(): void {\n\t\t// Figure out how many notifications have progress only if neither\n\t\t// toasts are visible nor center is visible. In that case we still\n\t\t// want to give a hint to the user that something is running.\n\t\tlet notificationsInProgress = 0;\n\t\tif (\n\t\t\t!this.isNotificationsCenterVisible &&\n\t\t\t!this.isNotificationsToastsVisible\n\t\t) {\n\t\t\tfor (const notification of this.model.notifications) {\n\t\t\t\tif (notification.hasProgress) {\n\t\t\t\t\tnotificationsInProgress++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Show the status bar entry depending on do not disturb setting\n\n\t\tlet statusProperties: IStatusbarEntry = {\n\t\t\tname: localize(\"status.notifications\", \"Notifications\"),\n\t\t\ttext: `${notificationsInProgress > 0 || this.newNotificationsCount > 0 ? \"$(bell-dot)\" : \"$(bell)\"}`,\n\t\t\tariaLabel: localize(\"status.notifications\", \"Notifications\"),\n\t\t\tcommand: this.isNotificationsCenterVisible\n\t\t\t\t? HIDE_NOTIFICATIONS_CENTER\n\t\t\t\t: SHOW_NOTIFICATIONS_CENTER,\n\t\t\ttooltip: this.getTooltip(notificationsInProgress),\n\t\t\tshowBeak: this.isNotificationsCenterVisible,\n\t\t};\n\n\t\tif (\n\t\t\tthis.notificationService.getFilter() === NotificationsFilter.ERROR\n\t\t) {\n\t\t\tstatusProperties = {\n\t\t\t\t...statusProperties,\n\t\t\t\ttext: `${notificationsInProgress > 0 || this.newNotificationsCount > 0 ? \"$(bell-slash-dot)\" : \"$(bell-slash)\"}`,\n\t\t\t\tariaLabel: localize(\"status.doNotDisturb\", \"Do Not Disturb\"),\n\t\t\t\ttooltip: localize(\n\t\t\t\t\t\"status.doNotDisturbTooltip\",\n\t\t\t\t\t\"Do Not Disturb Mode is Enabled\",\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (this.notificationsCenterStatusItem) {\n\t\t\tthis.notificationsCenterStatusItem.update(statusProperties);\n\t\t} else {\n\t\t\tthis.notificationsCenterStatusItem = this.statusbarService.addEntry(\n\t\t\t\tstatusProperties,\n\t\t\t\t\"status.notifications\",\n\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t-Number.MAX_VALUE /* towards the far end of the right hand side */,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate getTooltip(notificationsInProgress: number): string {\n\t\tif (this.isNotificationsCenterVisible) {\n\t\t\treturn localize(\"hideNotifications\", \"Hide Notifications\");\n\t\t}\n\n\t\tif (this.model.notifications.length === 0) {\n\t\t\treturn localize(\"zeroNotifications\", \"No Notifications\");\n\t\t}\n\n\t\tif (notificationsInProgress === 0) {\n\t\t\tif (this.newNotificationsCount === 0) {\n\t\t\t\treturn localize(\"noNotifications\", \"No New Notifications\");\n\t\t\t}\n\n\t\t\tif (this.newNotificationsCount === 1) {\n\t\t\t\treturn localize(\"oneNotification\", \"1 New Notification\");\n\t\t\t}\n\n\t\t\treturn localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"notifications\",\n\t\t\t\t\tcomment: [\"{0} will be replaced by a number\"],\n\t\t\t\t},\n\t\t\t\t\"{0} New Notifications\",\n\t\t\t\tthis.newNotificationsCount,\n\t\t\t);\n\t\t}\n\n\t\tif (this.newNotificationsCount === 0) {\n\t\t\treturn localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"noNotificationsWithProgress\",\n\t\t\t\t\tcomment: [\"{0} will be replaced by a number\"],\n\t\t\t\t},\n\t\t\t\t\"No New Notifications ({0} in progress)\",\n\t\t\t\tnotificationsInProgress,\n\t\t\t);\n\t\t}\n\n\t\tif (this.newNotificationsCount === 1) {\n\t\t\treturn localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"oneNotificationWithProgress\",\n\t\t\t\t\tcomment: [\"{0} will be replaced by a number\"],\n\t\t\t\t},\n\t\t\t\t\"1 New Notification ({0} in progress)\",\n\t\t\t\tnotificationsInProgress,\n\t\t\t);\n\t\t}\n\n\t\treturn localize(\n\t\t\t{\n\t\t\t\tkey: \"notificationsWithProgress\",\n\t\t\t\tcomment: [\"{0} and {1} will be replaced by a number\"],\n\t\t\t},\n\t\t\t\"{0} New Notifications ({1} in progress)\",\n\t\t\tthis.newNotificationsCount,\n\t\t\tnotificationsInProgress,\n\t\t);\n\t}\n\n\tupdate(isCenterVisible: boolean, isToastsVisible: boolean): void {\n\t\tlet updateNotificationsCenterStatusItem = false;\n\n\t\tif (this.isNotificationsCenterVisible !== isCenterVisible) {\n\t\t\tthis.isNotificationsCenterVisible = isCenterVisible;\n\t\t\tthis.newNotificationsCount = 0; // Showing the notification center resets the unread counter to 0\n\t\t\tupdateNotificationsCenterStatusItem = true;\n\t\t}\n\n\t\tif (this.isNotificationsToastsVisible !== isToastsVisible) {\n\t\t\tthis.isNotificationsToastsVisible = isToastsVisible;\n\t\t\tupdateNotificationsCenterStatusItem = true;\n\t\t}\n\n\t\t// Update in status bar as needed\n\t\tif (updateNotificationsCenterStatusItem) {\n\t\t\tthis.updateNotificationsCenterStatusItem();\n\t\t}\n\t}\n\n\tprivate onDidChangeStatusMessage(e: IStatusMessageChangeEvent): void {\n\t\tconst statusItem = e.item;\n\n\t\tswitch (e.kind) {\n\t\t\t// Show status notification\n\t\t\tcase StatusMessageChangeType.ADD:\n\t\t\t\tthis.doSetStatusMessage(statusItem);\n\n\t\t\t\tbreak;\n\n\t\t\t// Hide status notification (if its still the current one)\n\t\t\tcase StatusMessageChangeType.REMOVE:\n\t\t\t\tif (\n\t\t\t\t\tthis.currentStatusMessage &&\n\t\t\t\t\tthis.currentStatusMessage[0] === statusItem\n\t\t\t\t) {\n\t\t\t\t\tdispose(this.currentStatusMessage[1]);\n\t\t\t\t\tthis.currentStatusMessage = undefined;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate doSetStatusMessage(item: IStatusMessageViewItem): void {\n\t\tconst message = item.message;\n\n\t\tconst showAfter =\n\t\t\titem.options && typeof item.options.showAfter === \"number\"\n\t\t\t\t? item.options.showAfter\n\t\t\t\t: 0;\n\t\tconst hideAfter =\n\t\t\titem.options && typeof item.options.hideAfter === \"number\"\n\t\t\t\t? item.options.hideAfter\n\t\t\t\t: -1;\n\n\t\t// Dismiss any previous\n\t\tif (this.currentStatusMessage) {\n\t\t\tdispose(this.currentStatusMessage[1]);\n\t\t}\n\n\t\t// Create new\n\t\tlet statusMessageEntry: IStatusbarEntryAccessor;\n\t\tlet showHandle: any = setTimeout(() => {\n\t\t\tstatusMessageEntry = this.statusbarService.addEntry(\n\t\t\t\t{\n\t\t\t\t\tname: localize(\"status.message\", \"Status Message\"),\n\t\t\t\t\ttext: message,\n\t\t\t\t\tariaLabel: message,\n\t\t\t\t},\n\t\t\t\t\"status.message\",\n\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t-Number.MAX_VALUE /* far right on left hand side */,\n\t\t\t);\n\t\t\tshowHandle = null;\n\t\t}, showAfter);\n\n\t\t// Dispose function takes care of timeouts and actual entry\n\t\tlet hideHandle: any;\n\t\tconst statusMessageDispose = {\n\t\t\tdispose: () => {\n\t\t\t\tif (showHandle) {\n\t\t\t\t\tclearTimeout(showHandle);\n\t\t\t\t}\n\n\t\t\t\tif (hideHandle) {\n\t\t\t\t\tclearTimeout(hideHandle);\n\t\t\t\t}\n\n\t\t\t\tstatusMessageEntry?.dispose();\n\t\t\t},\n\t\t};\n\n\t\tif (hideAfter > 0) {\n\t\t\thideHandle = setTimeout(\n\t\t\t\t() => statusMessageDispose.dispose(),\n\t\t\t\thideAfter,\n\t\t\t);\n\t\t}\n\n\t\t// Remember as current status message\n\t\tthis.currentStatusMessage = [item, statusMessageDispose];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
