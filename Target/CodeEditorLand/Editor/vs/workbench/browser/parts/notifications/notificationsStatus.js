var m=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var N=(r,o,t,i)=>{for(var e=i>1?void 0:i?S(o,t):o,a=r.length-1,n;a>=0;a--)(n=r[a])&&(e=(i?n(o,t,e):n(e))||e);return i&&e&&m(o,t,e),e},h=(r,o)=>(t,i)=>o(t,i,r);import{Disposable as C,dispose as d}from"../../../../base/common/lifecycle.js";import{localize as s}from"../../../../nls.js";import{INotificationService as I,NotificationsFilter as v}from"../../../../platform/notification/common/notification.js";import{NotificationChangeType as p,StatusMessageChangeType as b}from"../../../common/notifications.js";import{IStatusbarService as w,StatusbarAlignment as g}from"../../../services/statusbar/browser/statusbar.js";import{HIDE_NOTIFICATIONS_CENTER as M,SHOW_NOTIFICATIONS_CENTER as E}from"./notificationsCommands.js";let c=class extends C{constructor(t,i,e){super();this.model=t;this.statusbarService=i;this.notificationService=e;this.updateNotificationsCenterStatusItem(),t.statusMessage&&this.doSetStatusMessage(t.statusMessage),this.registerListeners()}notificationsCenterStatusItem;newNotificationsCount=0;currentStatusMessage;isNotificationsCenterVisible=!1;isNotificationsToastsVisible=!1;registerListeners(){this._register(this.model.onDidChangeNotification(t=>this.onDidChangeNotification(t))),this._register(this.model.onDidChangeStatusMessage(t=>this.onDidChangeStatusMessage(t))),this._register(this.notificationService.onDidChangeFilter(()=>this.updateNotificationsCenterStatusItem()))}onDidChangeNotification(t){this.isNotificationsCenterVisible||(t.kind===p.ADD?this.newNotificationsCount++:t.kind===p.REMOVE&&this.newNotificationsCount>0&&this.newNotificationsCount--),this.updateNotificationsCenterStatusItem()}updateNotificationsCenterStatusItem(){let t=0;if(!this.isNotificationsCenterVisible&&!this.isNotificationsToastsVisible)for(const e of this.model.notifications)e.hasProgress&&t++;let i={name:s("status.notifications","Notifications"),text:`${t>0||this.newNotificationsCount>0?"$(bell-dot)":"$(bell)"}`,ariaLabel:s("status.notifications","Notifications"),command:this.isNotificationsCenterVisible?M:E,tooltip:this.getTooltip(t),showBeak:this.isNotificationsCenterVisible};this.notificationService.getFilter()===v.ERROR&&(i={...i,text:`${t>0||this.newNotificationsCount>0?"$(bell-slash-dot)":"$(bell-slash)"}`,ariaLabel:s("status.doNotDisturb","Do Not Disturb"),tooltip:s("status.doNotDisturbTooltip","Do Not Disturb Mode is Enabled")}),this.notificationsCenterStatusItem?this.notificationsCenterStatusItem.update(i):this.notificationsCenterStatusItem=this.statusbarService.addEntry(i,"status.notifications",g.RIGHT,-Number.MAX_VALUE)}getTooltip(t){return this.isNotificationsCenterVisible?s("hideNotifications","Hide Notifications"):this.model.notifications.length===0?s("zeroNotifications","No Notifications"):t===0?this.newNotificationsCount===0?s("noNotifications","No New Notifications"):this.newNotificationsCount===1?s("oneNotification","1 New Notification"):s({key:"notifications",comment:["{0} will be replaced by a number"]},"{0} New Notifications",this.newNotificationsCount):this.newNotificationsCount===0?s({key:"noNotificationsWithProgress",comment:["{0} will be replaced by a number"]},"No New Notifications ({0} in progress)",t):this.newNotificationsCount===1?s({key:"oneNotificationWithProgress",comment:["{0} will be replaced by a number"]},"1 New Notification ({0} in progress)",t):s({key:"notificationsWithProgress",comment:["{0} and {1} will be replaced by a number"]},"{0} New Notifications ({1} in progress)",this.newNotificationsCount,t)}update(t,i){let e=!1;this.isNotificationsCenterVisible!==t&&(this.isNotificationsCenterVisible=t,this.newNotificationsCount=0,e=!0),this.isNotificationsToastsVisible!==i&&(this.isNotificationsToastsVisible=i,e=!0),e&&this.updateNotificationsCenterStatusItem()}onDidChangeStatusMessage(t){const i=t.item;switch(t.kind){case b.ADD:this.doSetStatusMessage(i);break;case b.REMOVE:this.currentStatusMessage&&this.currentStatusMessage[0]===i&&(d(this.currentStatusMessage[1]),this.currentStatusMessage=void 0);break}}doSetStatusMessage(t){const i=t.message,e=t.options&&typeof t.options.showAfter=="number"?t.options.showAfter:0,a=t.options&&typeof t.options.hideAfter=="number"?t.options.hideAfter:-1;this.currentStatusMessage&&d(this.currentStatusMessage[1]);let n,u=setTimeout(()=>{n=this.statusbarService.addEntry({name:s("status.message","Status Message"),text:i,ariaLabel:i},"status.message",g.LEFT,-Number.MAX_VALUE),u=null},e),f;const l={dispose:()=>{u&&clearTimeout(u),f&&clearTimeout(f),n?.dispose()}};a>0&&(f=setTimeout(()=>l.dispose(),a)),this.currentStatusMessage=[t,l]}};c=N([h(1,w),h(2,I)],c);export{c as NotificationsStatus};
