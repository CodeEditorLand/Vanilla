{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsList.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/notificationsList.css';\nimport { localize } from '../../../../nls.js';\nimport { getWindow, isAncestorOfActiveElement, trackFocus } from '../../../../base/browser/dom.js';\nimport { WorkbenchList } from '../../../../platform/list/browser/listService.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IListAccessibilityProvider, IListOptions } from '../../../../base/browser/ui/list/listWidget.js';\nimport { NOTIFICATIONS_BACKGROUND } from '../../../common/theme.js';\nimport { INotificationViewItem } from '../../../common/notifications.js';\nimport { NotificationsListDelegate, NotificationRenderer } from './notificationsViewer.js';\nimport { CopyNotificationMessageAction } from './notificationsActions.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { assertAllDefined } from '../../../../base/common/types.js';\nimport { NotificationFocusedContext } from '../../../common/contextkeys.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { AriaRole } from '../../../../base/browser/ui/aria/aria.js';\nimport { NotificationActionRunner } from './notificationsCommands.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\nexport interface INotificationsListOptions extends IListOptions<INotificationViewItem> {\n\treadonly widgetAriaLabel?: string;\n}\n\nexport class NotificationsList extends Disposable {\n\n\tprivate listContainer: HTMLElement | undefined;\n\tprivate list: WorkbenchList<INotificationViewItem> | undefined;\n\tprivate listDelegate: NotificationsListDelegate | undefined;\n\tprivate viewModel: INotificationViewItem[] = [];\n\tprivate isVisible: boolean | undefined;\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly options: INotificationsListOptions,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService\n\t) {\n\t\tsuper();\n\t}\n\n\tshow(): void {\n\t\tif (this.isVisible) {\n\t\t\treturn; // already visible\n\t\t}\n\n\t\t// Lazily create if showing for the first time\n\t\tif (!this.list) {\n\t\t\tthis.createNotificationsList();\n\t\t}\n\n\t\t// Make visible\n\t\tthis.isVisible = true;\n\t}\n\n\tprivate createNotificationsList(): void {\n\n\t\t// List Container\n\t\tthis.listContainer = document.createElement('div');\n\t\tthis.listContainer.classList.add('notifications-list-container');\n\n\t\tconst actionRunner = this._register(this.instantiationService.createInstance(NotificationActionRunner));\n\n\t\t// Notification Renderer\n\t\tconst renderer = this.instantiationService.createInstance(NotificationRenderer, actionRunner);\n\n\t\t// List\n\t\tconst listDelegate = this.listDelegate = new NotificationsListDelegate(this.listContainer);\n\t\tconst options = this.options;\n\t\tconst list = this.list = <WorkbenchList<INotificationViewItem>>this._register(this.instantiationService.createInstance(\n\t\t\tWorkbenchList,\n\t\t\t'NotificationsList',\n\t\t\tthis.listContainer,\n\t\t\tlistDelegate,\n\t\t\t[renderer],\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t\tsetRowLineHeight: false,\n\t\t\t\thorizontalScrolling: false,\n\t\t\t\toverrideStyles: {\n\t\t\t\t\tlistBackground: NOTIFICATIONS_BACKGROUND\n\t\t\t\t},\n\t\t\t\taccessibilityProvider: this.instantiationService.createInstance(NotificationAccessibilityProvider, options)\n\t\t\t}\n\t\t));\n\n\t\t// Context menu to copy message\n\t\tconst copyAction = this._register(this.instantiationService.createInstance(CopyNotificationMessageAction, CopyNotificationMessageAction.ID, CopyNotificationMessageAction.LABEL));\n\t\tthis._register((list.onContextMenu(e => {\n\t\t\tif (!e.element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\tgetAnchor: () => e.anchor,\n\t\t\t\tgetActions: () => [copyAction],\n\t\t\t\tgetActionsContext: () => e.element,\n\t\t\t\tactionRunner\n\t\t\t});\n\t\t})));\n\n\t\t// Toggle on double click\n\t\tthis._register((list.onMouseDblClick(event => (event.element as INotificationViewItem).toggle())));\n\n\t\t// Clear focus when DOM focus moves out\n\t\t// Use document.hasFocus() to not clear the focus when the entire window lost focus\n\t\t// This ensures that when the focus comes back, the notification is still focused\n\t\tconst listFocusTracker = this._register(trackFocus(list.getHTMLElement()));\n\t\tthis._register(listFocusTracker.onDidBlur(() => {\n\t\t\tif (getWindow(this.listContainer).document.hasFocus()) {\n\t\t\t\tlist.setFocus([]);\n\t\t\t}\n\t\t}));\n\n\t\t// Context key\n\t\tNotificationFocusedContext.bindTo(list.contextKeyService);\n\n\t\t// Only allow for focus in notifications, as the\n\t\t// selection is too strong over the contents of\n\t\t// the notification\n\t\tthis._register(list.onDidChangeSelection(e => {\n\t\t\tif (e.indexes.length > 0) {\n\t\t\t\tlist.setSelection([]);\n\t\t\t}\n\t\t}));\n\n\t\tthis.container.appendChild(this.listContainer);\n\t}\n\n\tupdateNotificationsList(start: number, deleteCount: number, items: INotificationViewItem[] = []) {\n\t\tconst [list, listContainer] = assertAllDefined(this.list, this.listContainer);\n\t\tconst listHasDOMFocus = isAncestorOfActiveElement(listContainer);\n\n\t\t// Remember focus and relative top of that item\n\t\tconst focusedIndex = list.getFocus()[0];\n\t\tconst focusedItem = this.viewModel[focusedIndex];\n\n\t\tlet focusRelativeTop: number | null = null;\n\t\tif (typeof focusedIndex === 'number') {\n\t\t\tfocusRelativeTop = list.getRelativeTop(focusedIndex);\n\t\t}\n\n\t\t// Update view model\n\t\tthis.viewModel.splice(start, deleteCount, ...items);\n\n\t\t// Update list\n\t\tlist.splice(start, deleteCount, items);\n\t\tlist.layout();\n\n\t\t// Hide if no more notifications to show\n\t\tif (this.viewModel.length === 0) {\n\t\t\tthis.hide();\n\t\t}\n\n\t\t// Otherwise restore focus if we had\n\t\telse if (typeof focusedIndex === 'number') {\n\t\t\tlet indexToFocus = 0;\n\t\t\tif (focusedItem) {\n\t\t\t\tlet indexToFocusCandidate = this.viewModel.indexOf(focusedItem);\n\t\t\t\tif (indexToFocusCandidate === -1) {\n\t\t\t\t\tindexToFocusCandidate = focusedIndex - 1; // item could have been removed\n\t\t\t\t}\n\n\t\t\t\tif (indexToFocusCandidate < this.viewModel.length && indexToFocusCandidate >= 0) {\n\t\t\t\t\tindexToFocus = indexToFocusCandidate;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof focusRelativeTop === 'number') {\n\t\t\t\tlist.reveal(indexToFocus, focusRelativeTop);\n\t\t\t}\n\n\t\t\tlist.setFocus([indexToFocus]);\n\t\t}\n\n\t\t// Restore DOM focus if we had focus before\n\t\tif (this.isVisible && listHasDOMFocus) {\n\t\t\tlist.domFocus();\n\t\t}\n\t}\n\n\tupdateNotificationHeight(item: INotificationViewItem): void {\n\t\tconst index = this.viewModel.indexOf(item);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [list, listDelegate] = assertAllDefined(this.list, this.listDelegate);\n\t\tlist.updateElementHeight(index, listDelegate.getHeight(item));\n\t\tlist.layout();\n\t}\n\n\thide(): void {\n\t\tif (!this.isVisible || !this.list) {\n\t\t\treturn; // already hidden\n\t\t}\n\n\t\t// Hide\n\t\tthis.isVisible = false;\n\n\t\t// Clear list\n\t\tthis.list.splice(0, this.viewModel.length);\n\n\t\t// Clear view model\n\t\tthis.viewModel = [];\n\t}\n\n\tfocusFirst(): void {\n\t\tif (!this.list) {\n\t\t\treturn; // not created yet\n\t\t}\n\n\t\tthis.list.focusFirst();\n\t\tthis.list.domFocus();\n\t}\n\n\thasFocus(): boolean {\n\t\tif (!this.listContainer) {\n\t\t\treturn false; // not created yet\n\t\t}\n\n\t\treturn isAncestorOfActiveElement(this.listContainer);\n\t}\n\n\tlayout(width: number, maxHeight?: number): void {\n\t\tif (this.listContainer && this.list) {\n\t\t\tthis.listContainer.style.width = `${width}px`;\n\n\t\t\tif (typeof maxHeight === 'number') {\n\t\t\t\tthis.list.getHTMLElement().style.maxHeight = `${maxHeight}px`;\n\t\t\t}\n\n\t\t\tthis.list.layout();\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.hide();\n\n\t\tsuper.dispose();\n\t}\n}\n\nclass NotificationAccessibilityProvider implements IListAccessibilityProvider<INotificationViewItem> {\n\tconstructor(\n\t\tprivate readonly _options: INotificationsListOptions,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) { }\n\tgetAriaLabel(element: INotificationViewItem): string {\n\t\tlet accessibleViewHint: string | undefined;\n\t\tconst keybinding = this._keybindingService.lookupKeybinding('editor.action.accessibleView')?.getAriaLabel();\n\t\tif (this._configurationService.getValue('accessibility.verbosity.notification')) {\n\t\t\taccessibleViewHint = keybinding ? localize('notificationAccessibleViewHint', \"Inspect the response in the accessible view with {0}\", keybinding) : localize('notificationAccessibleViewHintNoKb', \"Inspect the response in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding\");\n\t\t}\n\t\tif (!element.source) {\n\t\t\treturn accessibleViewHint ? localize('notificationAriaLabelHint', \"{0}, notification, {1}\", element.message.raw, accessibleViewHint) : localize('notificationAriaLabel', \"{0}, notification\", element.message.raw);\n\t\t}\n\n\t\treturn accessibleViewHint ? localize('notificationWithSourceAriaLabelHint', \"{0}, source: {1}, notification, {2}\", element.message.raw, element.source, accessibleViewHint) : localize('notificationWithSourceAriaLabel', \"{0}, source: {1}, notification\", element.message.raw, element.source);\n\t}\n\tgetWidgetAriaLabel(): string {\n\t\treturn this._options.widgetAriaLabel ?? localize('notificationsList', \"Notifications List\");\n\t}\n\tgetRole(): AriaRole {\n\t\treturn 'dialog'; // https://github.com/microsoft/vscode/issues/82728\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
