{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsList.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/notificationsList.css\";\nimport {\n\tgetWindow,\n\tisAncestorOfActiveElement,\n\ttrackFocus,\n} from \"../../../../base/browser/dom.js\";\nimport type { AriaRole } from \"../../../../base/browser/ui/aria/aria.js\";\nimport type {\n\tIListAccessibilityProvider,\n\tIListOptions,\n} from \"../../../../base/browser/ui/list/listWidget.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { assertAllDefined } from \"../../../../base/common/types.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { WorkbenchList } from \"../../../../platform/list/browser/listService.js\";\nimport { NotificationFocusedContext } from \"../../../common/contextkeys.js\";\nimport type { INotificationViewItem } from \"../../../common/notifications.js\";\nimport { NOTIFICATIONS_BACKGROUND } from \"../../../common/theme.js\";\nimport { CopyNotificationMessageAction } from \"./notificationsActions.js\";\nimport { NotificationActionRunner } from \"./notificationsCommands.js\";\nimport {\n\tNotificationRenderer,\n\tNotificationsListDelegate,\n} from \"./notificationsViewer.js\";\n\nexport interface INotificationsListOptions\n\textends IListOptions<INotificationViewItem> {\n\treadonly widgetAriaLabel?: string;\n}\n\nexport class NotificationsList extends Disposable {\n\tprivate listContainer: HTMLElement | undefined;\n\tprivate list: WorkbenchList<INotificationViewItem> | undefined;\n\tprivate listDelegate: NotificationsListDelegate | undefined;\n\tprivate viewModel: INotificationViewItem[] = [];\n\tprivate isVisible: boolean | undefined;\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly options: INotificationsListOptions,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService\n\t) {\n\t\tsuper();\n\t}\n\n\tshow(): void {\n\t\tif (this.isVisible) {\n\t\t\treturn; // already visible\n\t\t}\n\n\t\t// Lazily create if showing for the first time\n\t\tif (!this.list) {\n\t\t\tthis.createNotificationsList();\n\t\t}\n\n\t\t// Make visible\n\t\tthis.isVisible = true;\n\t}\n\n\tprivate createNotificationsList(): void {\n\t\t// List Container\n\t\tthis.listContainer = document.createElement(\"div\");\n\t\tthis.listContainer.classList.add(\"notifications-list-container\");\n\n\t\tconst actionRunner = this._register(\n\t\t\tthis.instantiationService.createInstance(NotificationActionRunner),\n\t\t);\n\n\t\t// Notification Renderer\n\t\tconst renderer = this.instantiationService.createInstance(\n\t\t\tNotificationRenderer,\n\t\t\tactionRunner,\n\t\t);\n\n\t\t// List\n\t\tconst listDelegate = (this.listDelegate = new NotificationsListDelegate(\n\t\t\tthis.listContainer,\n\t\t));\n\t\tconst options = this.options;\n\t\tconst list = (this.list = <WorkbenchList<INotificationViewItem>>(\n\t\t\tthis._register(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tWorkbenchList,\n\t\t\t\t\t\"NotificationsList\",\n\t\t\t\t\tthis.listContainer,\n\t\t\t\t\tlistDelegate,\n\t\t\t\t\t[renderer],\n\t\t\t\t\t{\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\tsetRowLineHeight: false,\n\t\t\t\t\t\thorizontalScrolling: false,\n\t\t\t\t\t\toverrideStyles: {\n\t\t\t\t\t\t\tlistBackground: NOTIFICATIONS_BACKGROUND,\n\t\t\t\t\t\t},\n\t\t\t\t\t\taccessibilityProvider:\n\t\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\t\tNotificationAccessibilityProvider,\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t)\n\t\t));\n\n\t\t// Context menu to copy message\n\t\tconst copyAction = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tCopyNotificationMessageAction,\n\t\t\t\tCopyNotificationMessageAction.ID,\n\t\t\t\tCopyNotificationMessageAction.LABEL,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tlist.onContextMenu((e) => {\n\t\t\t\tif (!e.element) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\t\tgetAnchor: () => e.anchor,\n\t\t\t\t\tgetActions: () => [copyAction],\n\t\t\t\t\tgetActionsContext: () => e.element,\n\t\t\t\t\tactionRunner,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\t// Toggle on double click\n\t\tthis._register(\n\t\t\tlist.onMouseDblClick((event) =>\n\t\t\t\t(event.element as INotificationViewItem).toggle(),\n\t\t\t),\n\t\t);\n\n\t\t// Clear focus when DOM focus moves out\n\t\t// Use document.hasFocus() to not clear the focus when the entire window lost focus\n\t\t// This ensures that when the focus comes back, the notification is still focused\n\t\tconst listFocusTracker = this._register(\n\t\t\ttrackFocus(list.getHTMLElement()),\n\t\t);\n\t\tthis._register(\n\t\t\tlistFocusTracker.onDidBlur(() => {\n\t\t\t\tif (getWindow(this.listContainer).document.hasFocus()) {\n\t\t\t\t\tlist.setFocus([]);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Context key\n\t\tNotificationFocusedContext.bindTo(list.contextKeyService);\n\n\t\t// Only allow for focus in notifications, as the\n\t\t// selection is too strong over the contents of\n\t\t// the notification\n\t\tthis._register(\n\t\t\tlist.onDidChangeSelection((e) => {\n\t\t\t\tif (e.indexes.length > 0) {\n\t\t\t\t\tlist.setSelection([]);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.container.appendChild(this.listContainer);\n\t}\n\n\tupdateNotificationsList(\n\t\tstart: number,\n\t\tdeleteCount: number,\n\t\titems: INotificationViewItem[] = [],\n\t) {\n\t\tconst [list, listContainer] = assertAllDefined(\n\t\t\tthis.list,\n\t\t\tthis.listContainer,\n\t\t);\n\t\tconst listHasDOMFocus = isAncestorOfActiveElement(listContainer);\n\n\t\t// Remember focus and relative top of that item\n\t\tconst focusedIndex = list.getFocus()[0];\n\t\tconst focusedItem = this.viewModel[focusedIndex];\n\n\t\tlet focusRelativeTop: number | null = null;\n\t\tif (typeof focusedIndex === \"number\") {\n\t\t\tfocusRelativeTop = list.getRelativeTop(focusedIndex);\n\t\t}\n\n\t\t// Update view model\n\t\tthis.viewModel.splice(start, deleteCount, ...items);\n\n\t\t// Update list\n\t\tlist.splice(start, deleteCount, items);\n\t\tlist.layout();\n\n\t\t// Hide if no more notifications to show\n\t\tif (this.viewModel.length === 0) {\n\t\t\tthis.hide();\n\t\t}\n\n\t\t// Otherwise restore focus if we had\n\t\telse if (typeof focusedIndex === \"number\") {\n\t\t\tlet indexToFocus = 0;\n\t\t\tif (focusedItem) {\n\t\t\t\tlet indexToFocusCandidate = this.viewModel.indexOf(focusedItem);\n\t\t\t\tif (indexToFocusCandidate === -1) {\n\t\t\t\t\tindexToFocusCandidate = focusedIndex - 1; // item could have been removed\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tindexToFocusCandidate < this.viewModel.length &&\n\t\t\t\t\tindexToFocusCandidate >= 0\n\t\t\t\t) {\n\t\t\t\t\tindexToFocus = indexToFocusCandidate;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof focusRelativeTop === \"number\") {\n\t\t\t\tlist.reveal(indexToFocus, focusRelativeTop);\n\t\t\t}\n\n\t\t\tlist.setFocus([indexToFocus]);\n\t\t}\n\n\t\t// Restore DOM focus if we had focus before\n\t\tif (this.isVisible && listHasDOMFocus) {\n\t\t\tlist.domFocus();\n\t\t}\n\t}\n\n\tupdateNotificationHeight(item: INotificationViewItem): void {\n\t\tconst index = this.viewModel.indexOf(item);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [list, listDelegate] = assertAllDefined(\n\t\t\tthis.list,\n\t\t\tthis.listDelegate,\n\t\t);\n\t\tlist.updateElementHeight(index, listDelegate.getHeight(item));\n\t\tlist.layout();\n\t}\n\n\thide(): void {\n\t\tif (!this.isVisible || !this.list) {\n\t\t\treturn; // already hidden\n\t\t}\n\n\t\t// Hide\n\t\tthis.isVisible = false;\n\n\t\t// Clear list\n\t\tthis.list.splice(0, this.viewModel.length);\n\n\t\t// Clear view model\n\t\tthis.viewModel = [];\n\t}\n\n\tfocusFirst(): void {\n\t\tif (!this.list) {\n\t\t\treturn; // not created yet\n\t\t}\n\n\t\tthis.list.focusFirst();\n\t\tthis.list.domFocus();\n\t}\n\n\thasFocus(): boolean {\n\t\tif (!this.listContainer) {\n\t\t\treturn false; // not created yet\n\t\t}\n\n\t\treturn isAncestorOfActiveElement(this.listContainer);\n\t}\n\n\tlayout(width: number, maxHeight?: number): void {\n\t\tif (this.listContainer && this.list) {\n\t\t\tthis.listContainer.style.width = `${width}px`;\n\n\t\t\tif (typeof maxHeight === \"number\") {\n\t\t\t\tthis.list.getHTMLElement().style.maxHeight = `${maxHeight}px`;\n\t\t\t}\n\n\t\t\tthis.list.layout();\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.hide();\n\n\t\tsuper.dispose();\n\t}\n}\n\nclass NotificationAccessibilityProvider\n\timplements IListAccessibilityProvider<INotificationViewItem>\n{\n\tconstructor(\n\t\tprivate readonly _options: INotificationsListOptions,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) { }\n\tgetAriaLabel(element: INotificationViewItem): string {\n\t\tlet accessibleViewHint: string | undefined;\n\t\tconst keybinding = this._keybindingService\n\t\t\t.lookupKeybinding(\"editor.action.accessibleView\")\n\t\t\t?.getAriaLabel();\n\t\tif (\n\t\t\tthis._configurationService.getValue(\n\t\t\t\t\"accessibility.verbosity.notification\",\n\t\t\t)\n\t\t) {\n\t\t\taccessibleViewHint = keybinding\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"notificationAccessibleViewHint\",\n\t\t\t\t\t\t\"Inspect the response in the accessible view with {0}\",\n\t\t\t\t\t\tkeybinding,\n\t\t\t\t\t)\n\t\t\t\t: localize(\n\t\t\t\t\t\t\"notificationAccessibleViewHintNoKb\",\n\t\t\t\t\t\t\"Inspect the response in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding\",\n\t\t\t\t\t);\n\t\t}\n\t\tif (!element.source) {\n\t\t\treturn accessibleViewHint\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"notificationAriaLabelHint\",\n\t\t\t\t\t\t\"{0}, notification, {1}\",\n\t\t\t\t\t\telement.message.raw,\n\t\t\t\t\t\taccessibleViewHint,\n\t\t\t\t\t)\n\t\t\t\t: localize(\n\t\t\t\t\t\t\"notificationAriaLabel\",\n\t\t\t\t\t\t\"{0}, notification\",\n\t\t\t\t\t\telement.message.raw,\n\t\t\t\t\t);\n\t\t}\n\n\t\treturn accessibleViewHint\n\t\t\t? localize(\n\t\t\t\t\t\"notificationWithSourceAriaLabelHint\",\n\t\t\t\t\t\"{0}, source: {1}, notification, {2}\",\n\t\t\t\t\telement.message.raw,\n\t\t\t\t\telement.source,\n\t\t\t\t\taccessibleViewHint,\n\t\t\t\t)\n\t\t\t: localize(\n\t\t\t\t\t\"notificationWithSourceAriaLabel\",\n\t\t\t\t\t\"{0}, source: {1}, notification\",\n\t\t\t\t\telement.message.raw,\n\t\t\t\t\telement.source,\n\t\t\t\t);\n\t}\n\tgetWidgetAriaLabel(): string {\n\t\treturn (\n\t\t\tthis._options.widgetAriaLabel ??\n\t\t\tlocalize(\"notificationsList\", \"Notifications List\")\n\t\t);\n\t}\n\tgetRole(): AriaRole {\n\t\treturn \"dialog\"; // https://github.com/microsoft/vscode/issues/82728\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,OAAO;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAMP,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AACnC,SAAS,qBAAqB;AAC9B,SAAS,kCAAkC;AAE3C,SAAS,gCAAgC;AACzC,SAAS,qCAAqC;AAC9C,SAAS,gCAAgC;AACzC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAOA,IAAM,oBAAN,cAAgC,WAAW;AAAA,EAOjD,YACkB,WACA,SACuB,sBACF,oBACrC;AACD,UAAM;AALW;AACA;AACuB;AACF;AAAA,EAGvC;AAAA,EArDD,OAuCkD;AAAA;AAAA;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAqC,CAAC;AAAA,EACtC;AAAA,EAWR,OAAa;AACZ,QAAI,KAAK,WAAW;AACnB;AAAA,IACD;AAGA,QAAI,CAAC,KAAK,MAAM;AACf,WAAK,wBAAwB;AAAA,IAC9B;AAGA,SAAK,YAAY;AAAA,EAClB;AAAA,EAEQ,0BAAgC;AAEvC,SAAK,gBAAgB,SAAS,cAAc,KAAK;AACjD,SAAK,cAAc,UAAU,IAAI,8BAA8B;AAE/D,UAAM,eAAe,KAAK;AAAA,MACzB,KAAK,qBAAqB,eAAe,wBAAwB;AAAA,IAClE;AAGA,UAAM,WAAW,KAAK,qBAAqB;AAAA,MAC1C;AAAA,MACA;AAAA,IACD;AAGA,UAAM,eAAgB,KAAK,eAAe,IAAI;AAAA,MAC7C,KAAK;AAAA,IACN;AACA,UAAM,UAAU,KAAK;AACrB,UAAM,OAAQ,KAAK,OAClB,KAAK;AAAA,MACJ,KAAK,qBAAqB;AAAA,QACzB;AAAA,QACA;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,CAAC,QAAQ;AAAA,QACT;AAAA,UACC,GAAG;AAAA,UACH,kBAAkB;AAAA,UAClB,qBAAqB;AAAA,UACrB,gBAAgB;AAAA,YACf,gBAAgB;AAAA,UACjB;AAAA,UACA,uBACC,KAAK,qBAAqB;AAAA,YACzB;AAAA,YACA;AAAA,UACD;AAAA,QACF;AAAA,MACD;AAAA,IACD;AAID,UAAM,aAAa,KAAK;AAAA,MACvB,KAAK,qBAAqB;AAAA,QACzB;AAAA,QACA,8BAA8B;AAAA,QAC9B,8BAA8B;AAAA,MAC/B;AAAA,IACD;AACA,SAAK;AAAA,MACJ,KAAK,cAAc,CAAC,MAAM;AACzB,YAAI,CAAC,EAAE,SAAS;AACf;AAAA,QACD;AAEA,aAAK,mBAAmB,gBAAgB;AAAA,UACvC,WAAW,6BAAM,EAAE,QAAR;AAAA,UACX,YAAY,6BAAM,CAAC,UAAU,GAAjB;AAAA,UACZ,mBAAmB,6BAAM,EAAE,SAAR;AAAA,UACnB;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAGA,SAAK;AAAA,MACJ,KAAK;AAAA,QAAgB,CAAC,UACpB,MAAM,QAAkC,OAAO;AAAA,MACjD;AAAA,IACD;AAKA,UAAM,mBAAmB,KAAK;AAAA,MAC7B,WAAW,KAAK,eAAe,CAAC;AAAA,IACjC;AACA,SAAK;AAAA,MACJ,iBAAiB,UAAU,MAAM;AAChC,YAAI,UAAU,KAAK,aAAa,EAAE,SAAS,SAAS,GAAG;AACtD,eAAK,SAAS,CAAC,CAAC;AAAA,QACjB;AAAA,MACD,CAAC;AAAA,IACF;AAGA,+BAA2B,OAAO,KAAK,iBAAiB;AAKxD,SAAK;AAAA,MACJ,KAAK,qBAAqB,CAAC,MAAM;AAChC,YAAI,EAAE,QAAQ,SAAS,GAAG;AACzB,eAAK,aAAa,CAAC,CAAC;AAAA,QACrB;AAAA,MACD,CAAC;AAAA,IACF;AAEA,SAAK,UAAU,YAAY,KAAK,aAAa;AAAA,EAC9C;AAAA,EAEA,wBACC,OACA,aACA,QAAiC,CAAC,GACjC;AACD,UAAM,CAAC,MAAM,aAAa,IAAI;AAAA,MAC7B,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AACA,UAAM,kBAAkB,0BAA0B,aAAa;AAG/D,UAAM,eAAe,KAAK,SAAS,EAAE,CAAC;AACtC,UAAM,cAAc,KAAK,UAAU,YAAY;AAE/C,QAAI,mBAAkC;AACtC,QAAI,OAAO,iBAAiB,UAAU;AACrC,yBAAmB,KAAK,eAAe,YAAY;AAAA,IACpD;AAGA,SAAK,UAAU,OAAO,OAAO,aAAa,GAAG,KAAK;AAGlD,SAAK,OAAO,OAAO,aAAa,KAAK;AACrC,SAAK,OAAO;AAGZ,QAAI,KAAK,UAAU,WAAW,GAAG;AAChC,WAAK,KAAK;AAAA,IACX,WAGS,OAAO,iBAAiB,UAAU;AAC1C,UAAI,eAAe;AACnB,UAAI,aAAa;AAChB,YAAI,wBAAwB,KAAK,UAAU,QAAQ,WAAW;AAC9D,YAAI,0BAA0B,IAAI;AACjC,kCAAwB,eAAe;AAAA,QACxC;AAEA,YACC,wBAAwB,KAAK,UAAU,UACvC,yBAAyB,GACxB;AACD,yBAAe;AAAA,QAChB;AAAA,MACD;AAEA,UAAI,OAAO,qBAAqB,UAAU;AACzC,aAAK,OAAO,cAAc,gBAAgB;AAAA,MAC3C;AAEA,WAAK,SAAS,CAAC,YAAY,CAAC;AAAA,IAC7B;AAGA,QAAI,KAAK,aAAa,iBAAiB;AACtC,WAAK,SAAS;AAAA,IACf;AAAA,EACD;AAAA,EAEA,yBAAyB,MAAmC;AAC3D,UAAM,QAAQ,KAAK,UAAU,QAAQ,IAAI;AACzC,QAAI,UAAU,IAAI;AACjB;AAAA,IACD;AAEA,UAAM,CAAC,MAAM,YAAY,IAAI;AAAA,MAC5B,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AACA,SAAK,oBAAoB,OAAO,aAAa,UAAU,IAAI,CAAC;AAC5D,SAAK,OAAO;AAAA,EACb;AAAA,EAEA,OAAa;AACZ,QAAI,CAAC,KAAK,aAAa,CAAC,KAAK,MAAM;AAClC;AAAA,IACD;AAGA,SAAK,YAAY;AAGjB,SAAK,KAAK,OAAO,GAAG,KAAK,UAAU,MAAM;AAGzC,SAAK,YAAY,CAAC;AAAA,EACnB;AAAA,EAEA,aAAmB;AAClB,QAAI,CAAC,KAAK,MAAM;AACf;AAAA,IACD;AAEA,SAAK,KAAK,WAAW;AACrB,SAAK,KAAK,SAAS;AAAA,EACpB;AAAA,EAEA,WAAoB;AACnB,QAAI,CAAC,KAAK,eAAe;AACxB,aAAO;AAAA,IACR;AAEA,WAAO,0BAA0B,KAAK,aAAa;AAAA,EACpD;AAAA,EAEA,OAAO,OAAe,WAA0B;AAC/C,QAAI,KAAK,iBAAiB,KAAK,MAAM;AACpC,WAAK,cAAc,MAAM,QAAQ,GAAG,KAAK;AAEzC,UAAI,OAAO,cAAc,UAAU;AAClC,aAAK,KAAK,eAAe,EAAE,MAAM,YAAY,GAAG,SAAS;AAAA,MAC1D;AAEA,WAAK,KAAK,OAAO;AAAA,IAClB;AAAA,EACD;AAAA,EAES,UAAgB;AACxB,SAAK,KAAK;AAEV,UAAM,QAAQ;AAAA,EACf;AACD;AArQa,oBAAN;AAAA,EAUJ;AAAA,EACA;AAAA,GAXU;AAuQb,IAAM,oCAAN,MAEA;AAAA,EACC,YACkB,UACoB,oBACG,uBACvC;AAHgB;AACoB;AACG;AAAA,EACrC;AAAA,EArTL,OAgTA;AAAA;AAAA;AAAA,EAMC,aAAa,SAAwC;AACpD,QAAI;AACJ,UAAM,aAAa,KAAK,mBACtB,iBAAiB,8BAA8B,GAC9C,aAAa;AAChB,QACC,KAAK,sBAAsB;AAAA,MAC1B;AAAA,IACD,GACC;AACD,2BAAqB,aAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,IACC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACH;AACA,QAAI,CAAC,QAAQ,QAAQ;AACpB,aAAO,qBACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ,QAAQ;AAAA,QAChB;AAAA,MACD,IACC;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ,QAAQ;AAAA,MACjB;AAAA,IACH;AAEA,WAAO,qBACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,QAAQ;AAAA,MAChB,QAAQ;AAAA,MACR;AAAA,IACD,IACC;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,QAAQ;AAAA,MAChB,QAAQ;AAAA,IACT;AAAA,EACH;AAAA,EACA,qBAA6B;AAC5B,WACC,KAAK,SAAS,mBACd,SAAS,qBAAqB,oBAAoB;AAAA,EAEpD;AAAA,EACA,UAAoB;AACnB,WAAO;AAAA,EACR;AACD;AApEM,oCAAN;AAAA,EAKG;AAAA,EACA;AAAA,GANG;",
  "names": []
}
