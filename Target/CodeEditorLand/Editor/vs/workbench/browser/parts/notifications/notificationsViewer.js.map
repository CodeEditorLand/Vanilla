{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsViewer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IListVirtualDelegate, IListRenderer } from '../../../../base/browser/ui/list/list.js';\nimport { clearNode, addDisposableListener, EventType, EventHelper, $, isEventLike } from '../../../../base/browser/dom.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { ButtonBar, IButtonOptions } from '../../../../base/browser/ui/button/button.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { ActionRunner, IAction, IActionRunner, Separator, toAction } from '../../../../base/common/actions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { dispose, DisposableStore, Disposable } from '../../../../base/common/lifecycle.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { INotificationViewItem, NotificationViewItem, NotificationViewItemContentChangeKind, INotificationMessage, ChoiceAction } from '../../../common/notifications.js';\nimport { ClearNotificationAction, ExpandNotificationAction, CollapseNotificationAction, ConfigureNotificationAction } from './notificationsActions.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ProgressBar } from '../../../../base/browser/ui/progressbar/progressbar.js';\nimport { INotificationService, NotificationsFilter, Severity, isNotificationSource } from '../../../../platform/notification/common/notification.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { DropdownMenuActionViewItem } from '../../../../base/browser/ui/dropdown/dropdownActionViewItem.js';\nimport { DomEmitter } from '../../../../base/browser/event.js';\nimport { Gesture, EventType as GestureEventType } from '../../../../base/browser/touch.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { defaultButtonStyles, defaultProgressBarStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';\nimport type { IManagedHover } from '../../../../base/browser/ui/hover/hover.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\n\nexport class NotificationsListDelegate implements IListVirtualDelegate<INotificationViewItem> {\n\n\tprivate static readonly ROW_HEIGHT = 42;\n\tprivate static readonly LINE_HEIGHT = 22;\n\n\tprivate offsetHelper: HTMLElement;\n\n\tconstructor(container: HTMLElement) {\n\t\tthis.offsetHelper = this.createOffsetHelper(container);\n\t}\n\n\tprivate createOffsetHelper(container: HTMLElement): HTMLElement {\n\t\tconst offsetHelper = document.createElement('div');\n\t\toffsetHelper.classList.add('notification-offset-helper');\n\n\t\tcontainer.appendChild(offsetHelper);\n\n\t\treturn offsetHelper;\n\t}\n\n\tgetHeight(notification: INotificationViewItem): number {\n\t\tif (!notification.expanded) {\n\t\t\treturn NotificationsListDelegate.ROW_HEIGHT; // return early if there are no more rows to show\n\t\t}\n\n\t\t// First row: message and actions\n\t\tlet expandedHeight = NotificationsListDelegate.ROW_HEIGHT;\n\n\t\t// Dynamic height: if message overflows\n\t\tconst preferredMessageHeight = this.computePreferredHeight(notification);\n\t\tconst messageOverflows = NotificationsListDelegate.LINE_HEIGHT < preferredMessageHeight;\n\t\tif (messageOverflows) {\n\t\t\tconst overflow = preferredMessageHeight - NotificationsListDelegate.LINE_HEIGHT;\n\t\t\texpandedHeight += overflow;\n\t\t}\n\n\t\t// Last row: source and buttons if we have any\n\t\tif (notification.source || isNonEmptyArray(notification.actions && notification.actions.primary)) {\n\t\t\texpandedHeight += NotificationsListDelegate.ROW_HEIGHT;\n\t\t}\n\n\t\t// If the expanded height is same as collapsed, unset the expanded state\n\t\t// but skip events because there is no change that has visual impact\n\t\tif (expandedHeight === NotificationsListDelegate.ROW_HEIGHT) {\n\t\t\tnotification.collapse(true /* skip events, no change in height */);\n\t\t}\n\n\t\treturn expandedHeight;\n\t}\n\n\tprivate computePreferredHeight(notification: INotificationViewItem): number {\n\n\t\t// Prepare offset helper depending on toolbar actions count\n\t\tlet actions = 0;\n\t\tif (!notification.hasProgress) {\n\t\t\tactions++; // close\n\t\t}\n\t\tif (notification.canCollapse) {\n\t\t\tactions++; // expand/collapse\n\t\t}\n\t\tif (isNonEmptyArray(notification.actions && notification.actions.secondary)) {\n\t\t\tactions++; // secondary actions\n\t\t}\n\t\tthis.offsetHelper.style.width = `${450 /* notifications container width */ - (10 /* padding */ + 30 /* severity icon */ + (actions * 30) /* actions */ - (Math.max(actions - 1, 0) * 4) /* less padding for actions > 1 */)}px`;\n\n\t\t// Render message into offset helper\n\t\tconst renderedMessage = NotificationMessageRenderer.render(notification.message);\n\t\tthis.offsetHelper.appendChild(renderedMessage);\n\n\t\t// Compute height\n\t\tconst preferredHeight = Math.max(this.offsetHelper.offsetHeight, this.offsetHelper.scrollHeight);\n\n\t\t// Always clear offset helper after use\n\t\tclearNode(this.offsetHelper);\n\n\t\treturn preferredHeight;\n\t}\n\n\tgetTemplateId(element: INotificationViewItem): string {\n\t\tif (element instanceof NotificationViewItem) {\n\t\t\treturn NotificationRenderer.TEMPLATE_ID;\n\t\t}\n\n\t\tthrow new Error('unknown element type: ' + element);\n\t}\n}\n\nexport interface INotificationTemplateData {\n\tcontainer: HTMLElement;\n\ttoDispose: DisposableStore;\n\n\tmainRow: HTMLElement;\n\ticon: HTMLElement;\n\tmessage: HTMLElement;\n\ttoolbar: ActionBar;\n\n\tdetailsRow: HTMLElement;\n\tsource: HTMLElement;\n\tbuttonsContainer: HTMLElement;\n\tprogress: ProgressBar;\n\n\trenderer: NotificationTemplateRenderer;\n}\n\ninterface IMessageActionHandler {\n\treadonly toDispose: DisposableStore;\n\n\tcallback: (href: string) => void;\n}\n\nclass NotificationMessageRenderer {\n\n\tstatic render(message: INotificationMessage, actionHandler?: IMessageActionHandler): HTMLElement {\n\t\tconst messageContainer = document.createElement('span');\n\n\t\tfor (const node of message.linkedText.nodes) {\n\t\t\tif (typeof node === 'string') {\n\t\t\t\tmessageContainer.appendChild(document.createTextNode(node));\n\t\t\t} else {\n\t\t\t\tlet title = node.title;\n\n\t\t\t\tif (!title && node.href.startsWith('command:')) {\n\t\t\t\t\ttitle = localize('executeCommand', \"Click to execute command '{0}'\", node.href.substr('command:'.length));\n\t\t\t\t} else if (!title) {\n\t\t\t\t\ttitle = node.href;\n\t\t\t\t}\n\n\t\t\t\tconst anchor = $('a', { href: node.href, title, tabIndex: 0 }, node.label);\n\n\t\t\t\tif (actionHandler) {\n\t\t\t\t\tconst handleOpen = (e: unknown) => {\n\t\t\t\t\t\tif (isEventLike(e)) {\n\t\t\t\t\t\t\tEventHelper.stop(e, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tactionHandler.callback(node.href);\n\t\t\t\t\t};\n\n\t\t\t\t\tconst onClick = actionHandler.toDispose.add(new DomEmitter(anchor, EventType.CLICK)).event;\n\n\t\t\t\t\tconst onKeydown = actionHandler.toDispose.add(new DomEmitter(anchor, EventType.KEY_DOWN)).event;\n\t\t\t\t\tconst onSpaceOrEnter = Event.chain(onKeydown, $ => $.filter(e => {\n\t\t\t\t\t\tconst event = new StandardKeyboardEvent(e);\n\n\t\t\t\t\t\treturn event.equals(KeyCode.Space) || event.equals(KeyCode.Enter);\n\t\t\t\t\t}));\n\n\t\t\t\t\tactionHandler.toDispose.add(Gesture.addTarget(anchor));\n\t\t\t\t\tconst onTap = actionHandler.toDispose.add(new DomEmitter(anchor, GestureEventType.Tap)).event;\n\n\t\t\t\t\tEvent.any(onClick, onTap, onSpaceOrEnter)(handleOpen, null, actionHandler.toDispose);\n\t\t\t\t}\n\n\t\t\t\tmessageContainer.appendChild(anchor);\n\t\t\t}\n\t\t}\n\n\t\treturn messageContainer;\n\t}\n}\n\nexport class NotificationRenderer implements IListRenderer<INotificationViewItem, INotificationTemplateData> {\n\n\tstatic readonly TEMPLATE_ID = 'notification';\n\n\tconstructor(\n\t\tprivate actionRunner: IActionRunner,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t}\n\n\tget templateId() {\n\t\treturn NotificationRenderer.TEMPLATE_ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): INotificationTemplateData {\n\t\tconst data: INotificationTemplateData = Object.create(null);\n\t\tdata.toDispose = new DisposableStore();\n\n\t\t// Container\n\t\tdata.container = document.createElement('div');\n\t\tdata.container.classList.add('notification-list-item');\n\n\t\t// Main Row\n\t\tdata.mainRow = document.createElement('div');\n\t\tdata.mainRow.classList.add('notification-list-item-main-row');\n\n\t\t// Icon\n\t\tdata.icon = document.createElement('div');\n\t\tdata.icon.classList.add('notification-list-item-icon', 'codicon');\n\n\t\t// Message\n\t\tdata.message = document.createElement('div');\n\t\tdata.message.classList.add('notification-list-item-message');\n\n\t\t// Toolbar\n\t\tconst that = this;\n\t\tconst toolbarContainer = document.createElement('div');\n\t\ttoolbarContainer.classList.add('notification-list-item-toolbar-container');\n\t\tdata.toolbar = new ActionBar(\n\t\t\ttoolbarContainer,\n\t\t\t{\n\t\t\t\tariaLabel: localize('notificationActions', \"Notification Actions\"),\n\t\t\t\tactionViewItemProvider: (action, options) => {\n\t\t\t\t\tif (action instanceof ConfigureNotificationAction) {\n\t\t\t\t\t\treturn data.toDispose.add(new DropdownMenuActionViewItem(action, {\n\t\t\t\t\t\t\tgetActions() {\n\t\t\t\t\t\t\t\tconst actions: IAction[] = [];\n\n\t\t\t\t\t\t\t\tconst source = { id: action.notification.sourceId, label: action.notification.source };\n\t\t\t\t\t\t\t\tif (isNotificationSource(source)) {\n\t\t\t\t\t\t\t\t\tconst isSourceFiltered = that.notificationService.getFilter(source) === NotificationsFilter.ERROR;\n\t\t\t\t\t\t\t\t\tactions.push(toAction({\n\t\t\t\t\t\t\t\t\t\tid: source.id,\n\t\t\t\t\t\t\t\t\t\tlabel: isSourceFiltered ? localize('turnOnNotifications', \"Turn On All Notifications from '{0}'\", source.label) : localize('turnOffNotifications', \"Turn Off Info and Warning Notifications from '{0}'\", source.label),\n\t\t\t\t\t\t\t\t\t\trun: () => that.notificationService.setFilter({ ...source, filter: isSourceFiltered ? NotificationsFilter.OFF : NotificationsFilter.ERROR })\n\t\t\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t\t\t\tif (action.notification.actions?.secondary?.length) {\n\t\t\t\t\t\t\t\t\t\tactions.push(new Separator());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (Array.isArray(action.notification.actions?.secondary)) {\n\t\t\t\t\t\t\t\t\tactions.push(...action.notification.actions.secondary);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn actions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}, this.contextMenuService, {\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\tactionRunner: this.actionRunner,\n\t\t\t\t\t\t\tclassNames: action.class\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tactionRunner: this.actionRunner\n\t\t\t}\n\t\t);\n\t\tdata.toDispose.add(data.toolbar);\n\n\t\t// Details Row\n\t\tdata.detailsRow = document.createElement('div');\n\t\tdata.detailsRow.classList.add('notification-list-item-details-row');\n\n\t\t// Source\n\t\tdata.source = document.createElement('div');\n\t\tdata.source.classList.add('notification-list-item-source');\n\n\t\t// Buttons Container\n\t\tdata.buttonsContainer = document.createElement('div');\n\t\tdata.buttonsContainer.classList.add('notification-list-item-buttons-container');\n\n\t\tcontainer.appendChild(data.container);\n\n\t\t// the details row appears first in order for better keyboard access to notification buttons\n\t\tdata.container.appendChild(data.detailsRow);\n\t\tdata.detailsRow.appendChild(data.source);\n\t\tdata.detailsRow.appendChild(data.buttonsContainer);\n\n\t\t// main row\n\t\tdata.container.appendChild(data.mainRow);\n\t\tdata.mainRow.appendChild(data.icon);\n\t\tdata.mainRow.appendChild(data.message);\n\t\tdata.mainRow.appendChild(toolbarContainer);\n\n\t\t// Progress: below the rows to span the entire width of the item\n\t\tdata.progress = new ProgressBar(container, defaultProgressBarStyles);\n\t\tdata.toDispose.add(data.progress);\n\n\t\t// Renderer\n\t\tdata.renderer = this.instantiationService.createInstance(NotificationTemplateRenderer, data, this.actionRunner);\n\t\tdata.toDispose.add(data.renderer);\n\n\t\treturn data;\n\t}\n\n\trenderElement(notification: INotificationViewItem, index: number, data: INotificationTemplateData): void {\n\t\tdata.renderer.setInput(notification);\n\t}\n\n\tdisposeTemplate(templateData: INotificationTemplateData): void {\n\t\tdispose(templateData.toDispose);\n\t}\n}\n\nexport class NotificationTemplateRenderer extends Disposable {\n\n\tprivate static closeNotificationAction: ClearNotificationAction;\n\tprivate static expandNotificationAction: ExpandNotificationAction;\n\tprivate static collapseNotificationAction: CollapseNotificationAction;\n\n\tprivate static readonly SEVERITIES = [Severity.Info, Severity.Warning, Severity.Error];\n\n\tprivate readonly inputDisposables = this._register(new DisposableStore());\n\n\tconstructor(\n\t\tprivate template: INotificationTemplateData,\n\t\tprivate actionRunner: IActionRunner,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t) {\n\t\tsuper();\n\n\t\tif (!NotificationTemplateRenderer.closeNotificationAction) {\n\t\t\tNotificationTemplateRenderer.closeNotificationAction = instantiationService.createInstance(ClearNotificationAction, ClearNotificationAction.ID, ClearNotificationAction.LABEL);\n\t\t\tNotificationTemplateRenderer.expandNotificationAction = instantiationService.createInstance(ExpandNotificationAction, ExpandNotificationAction.ID, ExpandNotificationAction.LABEL);\n\t\t\tNotificationTemplateRenderer.collapseNotificationAction = instantiationService.createInstance(CollapseNotificationAction, CollapseNotificationAction.ID, CollapseNotificationAction.LABEL);\n\t\t}\n\t}\n\n\tsetInput(notification: INotificationViewItem): void {\n\t\tthis.inputDisposables.clear();\n\n\t\tthis.render(notification);\n\t}\n\n\tprivate render(notification: INotificationViewItem): void {\n\n\t\t// Container\n\t\tthis.template.container.classList.toggle('expanded', notification.expanded);\n\t\tthis.inputDisposables.add(addDisposableListener(this.template.container, EventType.MOUSE_UP, e => {\n\t\t\tif (e.button === 1 /* Middle Button */) {\n\t\t\t\t// Prevent firing the 'paste' event in the editor textarea - #109322\n\t\t\t\tEventHelper.stop(e, true);\n\t\t\t}\n\t\t}));\n\t\tthis.inputDisposables.add(addDisposableListener(this.template.container, EventType.AUXCLICK, e => {\n\t\t\tif (!notification.hasProgress && e.button === 1 /* Middle Button */) {\n\t\t\t\tEventHelper.stop(e, true);\n\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t}));\n\n\t\t// Severity Icon\n\t\tthis.renderSeverity(notification);\n\n\t\t// Message\n\t\tconst messageCustomHover = this.inputDisposables.add(this.hoverService.setupManagedHover(getDefaultHoverDelegate('mouse'), this.template.message, ''));\n\t\tconst messageOverflows = this.renderMessage(notification, messageCustomHover);\n\n\t\t// Secondary Actions\n\t\tthis.renderSecondaryActions(notification, messageOverflows);\n\n\t\t// Source\n\t\tconst sourceCustomHover = this.inputDisposables.add(this.hoverService.setupManagedHover(getDefaultHoverDelegate('mouse'), this.template.source, ''));\n\t\tthis.renderSource(notification, sourceCustomHover);\n\n\t\t// Buttons\n\t\tthis.renderButtons(notification);\n\n\t\t// Progress\n\t\tthis.renderProgress(notification);\n\n\t\t// Label Change Events that we can handle directly\n\t\t// (changes to actions require an entire redraw of\n\t\t// the notification because it has an impact on\n\t\t// epxansion state)\n\t\tthis.inputDisposables.add(notification.onDidChangeContent(event => {\n\t\t\tswitch (event.kind) {\n\t\t\t\tcase NotificationViewItemContentChangeKind.SEVERITY:\n\t\t\t\t\tthis.renderSeverity(notification);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotificationViewItemContentChangeKind.PROGRESS:\n\t\t\t\t\tthis.renderProgress(notification);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotificationViewItemContentChangeKind.MESSAGE:\n\t\t\t\t\tthis.renderMessage(notification, messageCustomHover);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate renderSeverity(notification: INotificationViewItem): void {\n\t\t// first remove, then set as the codicon class names overlap\n\t\tNotificationTemplateRenderer.SEVERITIES.forEach(severity => {\n\t\t\tif (notification.severity !== severity) {\n\t\t\t\tthis.template.icon.classList.remove(...ThemeIcon.asClassNameArray(this.toSeverityIcon(severity)));\n\t\t\t}\n\t\t});\n\t\tthis.template.icon.classList.add(...ThemeIcon.asClassNameArray(this.toSeverityIcon(notification.severity)));\n\t}\n\n\tprivate renderMessage(notification: INotificationViewItem, customHover: IManagedHover): boolean {\n\t\tclearNode(this.template.message);\n\t\tthis.template.message.appendChild(NotificationMessageRenderer.render(notification.message, {\n\t\t\tcallback: link => this.openerService.open(URI.parse(link), { allowCommands: true }),\n\t\t\ttoDispose: this.inputDisposables\n\t\t}));\n\n\t\tconst messageOverflows = notification.canCollapse && !notification.expanded && this.template.message.scrollWidth > this.template.message.clientWidth;\n\n\t\tcustomHover.update(messageOverflows ? this.template.message.textContent + '' : '');\n\n\t\treturn messageOverflows;\n\t}\n\n\tprivate renderSecondaryActions(notification: INotificationViewItem, messageOverflows: boolean): void {\n\t\tconst actions: IAction[] = [];\n\n\t\t// Secondary Actions\n\t\tif (isNonEmptyArray(notification.actions?.secondary)) {\n\t\t\tconst configureNotificationAction = this.instantiationService.createInstance(ConfigureNotificationAction, ConfigureNotificationAction.ID, ConfigureNotificationAction.LABEL, notification);\n\t\t\tactions.push(configureNotificationAction);\n\t\t\tthis.inputDisposables.add(configureNotificationAction);\n\t\t}\n\n\t\t// Expand / Collapse\n\t\tlet showExpandCollapseAction = false;\n\t\tif (notification.canCollapse) {\n\t\t\tif (notification.expanded) {\n\t\t\t\tshowExpandCollapseAction = true; // allow to collapse an expanded message\n\t\t\t} else if (notification.source) {\n\t\t\t\tshowExpandCollapseAction = true; // allow to expand to details row\n\t\t\t} else if (messageOverflows) {\n\t\t\t\tshowExpandCollapseAction = true; // allow to expand if message overflows\n\t\t\t}\n\t\t}\n\n\t\tif (showExpandCollapseAction) {\n\t\t\tactions.push(notification.expanded ? NotificationTemplateRenderer.collapseNotificationAction : NotificationTemplateRenderer.expandNotificationAction);\n\t\t}\n\n\t\t// Close (unless progress is showing)\n\t\tif (!notification.hasProgress) {\n\t\t\tactions.push(NotificationTemplateRenderer.closeNotificationAction);\n\t\t}\n\n\t\tthis.template.toolbar.clear();\n\t\tthis.template.toolbar.context = notification;\n\t\tactions.forEach(action => this.template.toolbar.push(action, { icon: true, label: false, keybinding: this.getKeybindingLabel(action) }));\n\t}\n\n\tprivate renderSource(notification: INotificationViewItem, sourceCustomHover: IManagedHover): void {\n\t\tif (notification.expanded && notification.source) {\n\t\t\tthis.template.source.textContent = localize('notificationSource', \"Source: {0}\", notification.source);\n\t\t\tsourceCustomHover.update(notification.source);\n\t\t} else {\n\t\t\tthis.template.source.textContent = '';\n\t\t\tsourceCustomHover.update('');\n\t\t}\n\t}\n\n\tprivate renderButtons(notification: INotificationViewItem): void {\n\t\tclearNode(this.template.buttonsContainer);\n\n\t\tconst primaryActions = notification.actions ? notification.actions.primary : undefined;\n\t\tif (notification.expanded && isNonEmptyArray(primaryActions)) {\n\t\t\tconst that = this;\n\n\t\t\tconst actionRunner: IActionRunner = new class extends ActionRunner {\n\t\t\t\tprotected override async runAction(action: IAction): Promise<void> {\n\n\t\t\t\t\t// Run action\n\t\t\t\t\tthat.actionRunner.run(action, notification);\n\n\t\t\t\t\t// Hide notification (unless explicitly prevented)\n\t\t\t\t\tif (!(action instanceof ChoiceAction) || !action.keepOpen) {\n\t\t\t\t\t\tnotification.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}();\n\n\t\t\tconst buttonToolbar = this.inputDisposables.add(new ButtonBar(this.template.buttonsContainer));\n\t\t\tfor (let i = 0; i < primaryActions.length; i++) {\n\t\t\t\tconst action = primaryActions[i];\n\n\t\t\t\tconst options: IButtonOptions = {\n\t\t\t\t\ttitle: true,  // assign titles to buttons in case they overflow\n\t\t\t\t\tsecondary: i > 0,\n\t\t\t\t\t...defaultButtonStyles\n\t\t\t\t};\n\n\t\t\t\tconst dropdownActions = action instanceof ChoiceAction ? action.menu : undefined;\n\t\t\t\tconst button = this.inputDisposables.add(dropdownActions ?\n\t\t\t\t\tbuttonToolbar.addButtonWithDropdown({\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\tcontextMenuProvider: this.contextMenuService,\n\t\t\t\t\t\tactions: dropdownActions,\n\t\t\t\t\t\tactionRunner\n\t\t\t\t\t}) :\n\t\t\t\t\tbuttonToolbar.addButton(options)\n\t\t\t\t);\n\n\t\t\t\tbutton.label = action.label;\n\n\t\t\t\tthis.inputDisposables.add(button.onDidClick(e => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\tEventHelper.stop(e, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tactionRunner.run(action);\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderProgress(notification: INotificationViewItem): void {\n\n\t\t// Return early if the item has no progress\n\t\tif (!notification.hasProgress) {\n\t\t\tthis.template.progress.stop().hide();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Infinite\n\t\tconst state = notification.progress.state;\n\t\tif (state.infinite) {\n\t\t\tthis.template.progress.infinite().show();\n\t\t}\n\n\t\t// Total / Worked\n\t\telse if (typeof state.total === 'number' || typeof state.worked === 'number') {\n\t\t\tif (typeof state.total === 'number' && !this.template.progress.hasTotal()) {\n\t\t\t\tthis.template.progress.total(state.total);\n\t\t\t}\n\n\t\t\tif (typeof state.worked === 'number') {\n\t\t\t\tthis.template.progress.setWorked(state.worked).show();\n\t\t\t}\n\t\t}\n\n\t\t// Done\n\t\telse {\n\t\t\tthis.template.progress.done().hide();\n\t\t}\n\t}\n\n\tprivate toSeverityIcon(severity: Severity): ThemeIcon {\n\t\tswitch (severity) {\n\t\t\tcase Severity.Warning:\n\t\t\t\treturn Codicon.warning;\n\t\t\tcase Severity.Error:\n\t\t\t\treturn Codicon.error;\n\t\t}\n\t\treturn Codicon.info;\n\t}\n\n\tprivate getKeybindingLabel(action: IAction): string | null {\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\n\t\treturn keybinding ? keybinding.getLabel() : null;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["$"]
}
