{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsCenter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/notificationsCenter.css';\nimport './media/notificationsActions.css';\nimport { NOTIFICATIONS_CENTER_HEADER_FOREGROUND, NOTIFICATIONS_CENTER_HEADER_BACKGROUND, NOTIFICATIONS_CENTER_BORDER } from '../../../common/theme.js';\nimport { IThemeService, Themable } from '../../../../platform/theme/common/themeService.js';\nimport { INotificationsModel, INotificationChangeEvent, NotificationChangeType, NotificationViewItemContentChangeKind } from '../../../common/notifications.js';\nimport { IWorkbenchLayoutService, Parts } from '../../../services/layout/browser/layoutService.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { INotificationsCenterController, NotificationActionRunner } from './notificationsCommands.js';\nimport { NotificationsList } from './notificationsList.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Dimension, isAncestorOfActiveElement } from '../../../../base/browser/dom.js';\nimport { widgetShadow } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { localize } from '../../../../nls.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { ClearAllNotificationsAction, ConfigureDoNotDisturbAction, ToggleDoNotDisturbBySourceAction, HideNotificationsCenterAction, ToggleDoNotDisturbAction } from './notificationsActions.js';\nimport { IAction, Separator, toAction } from '../../../../base/common/actions.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { assertAllDefined, assertIsDefined } from '../../../../base/common/types.js';\nimport { NotificationsCenterVisibleContext } from '../../../common/contextkeys.js';\nimport { INotificationService, NotificationsFilter } from '../../../../platform/notification/common/notification.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { DropdownMenuActionViewItem } from '../../../../base/browser/ui/dropdown/dropdownActionViewItem.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\n\nexport class NotificationsCenter extends Themable implements INotificationsCenterController {\n\n\tprivate static readonly MAX_DIMENSIONS = new Dimension(450, 400);\n\n\tprivate static readonly MAX_NOTIFICATION_SOURCES = 10; // maximum number of notification sources to show in configure dropdown\n\n\tprivate readonly _onDidChangeVisibility = this._register(new Emitter<void>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate notificationsCenterContainer: HTMLElement | undefined;\n\tprivate notificationsCenterHeader: HTMLElement | undefined;\n\tprivate notificationsCenterTitle: HTMLSpanElement | undefined;\n\tprivate notificationsList: NotificationsList | undefined;\n\tprivate _isVisible: boolean | undefined;\n\tprivate workbenchDimensions: Dimension | undefined;\n\tprivate readonly notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(this.contextKeyService);\n\tprivate clearAllAction: ClearAllNotificationsAction | undefined;\n\tprivate configureDoNotDisturbAction: ConfigureDoNotDisturbAction | undefined;\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IAccessibilitySignalService private readonly accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(contextKeyService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n\t\tthis._register(this.layoutService.onDidLayoutMainContainer(dimension => this.layout(Dimension.lift(dimension))));\n\t\tthis._register(this.notificationService.onDidChangeFilter(() => this.onDidChangeFilter()));\n\t}\n\n\tprivate onDidChangeFilter(): void {\n\t\tif (this.notificationService.getFilter() === NotificationsFilter.ERROR) {\n\t\t\tthis.hide(); // hide the notification center when we have a error filter enabled\n\t\t}\n\t}\n\n\tget isVisible(): boolean {\n\t\treturn !!this._isVisible;\n\t}\n\n\tshow(): void {\n\t\tif (this._isVisible) {\n\t\t\tconst notificationsList = assertIsDefined(this.notificationsList);\n\n\t\t\t// Make visible\n\t\t\tnotificationsList.show();\n\n\t\t\t// Focus first\n\t\t\tnotificationsList.focusFirst();\n\n\t\t\treturn; // already visible\n\t\t}\n\n\t\t// Lazily create if showing for the first time\n\t\tif (!this.notificationsCenterContainer) {\n\t\t\tthis.create();\n\t\t}\n\n\t\t// Title\n\t\tthis.updateTitle();\n\n\t\t// Make visible\n\t\tconst [notificationsList, notificationsCenterContainer] = assertAllDefined(this.notificationsList, this.notificationsCenterContainer);\n\t\tthis._isVisible = true;\n\t\tnotificationsCenterContainer.classList.add('visible');\n\t\tnotificationsList.show();\n\n\t\t// Layout\n\t\tthis.layout(this.workbenchDimensions);\n\n\t\t// Show all notifications that are present now\n\t\tnotificationsList.updateNotificationsList(0, 0, this.model.notifications);\n\n\t\t// Focus first\n\t\tnotificationsList.focusFirst();\n\n\t\t// Theming\n\t\tthis.updateStyles();\n\n\t\t// Mark as visible\n\t\tthis.model.notifications.forEach(notification => notification.updateVisibility(true));\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(true);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\t}\n\n\tprivate updateTitle(): void {\n\t\tconst [notificationsCenterTitle, clearAllAction] = assertAllDefined(this.notificationsCenterTitle, this.clearAllAction);\n\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tnotificationsCenterTitle.textContent = localize('notificationsEmpty', \"No new notifications\");\n\t\t\tclearAllAction.enabled = false;\n\t\t} else {\n\t\t\tnotificationsCenterTitle.textContent = localize('notifications', \"Notifications\");\n\t\t\tclearAllAction.enabled = this.model.notifications.some(notification => !notification.hasProgress);\n\t\t}\n\t}\n\n\tprivate create(): void {\n\n\t\t// Container\n\t\tthis.notificationsCenterContainer = document.createElement('div');\n\t\tthis.notificationsCenterContainer.classList.add('notifications-center');\n\n\t\t// Header\n\t\tthis.notificationsCenterHeader = document.createElement('div');\n\t\tthis.notificationsCenterHeader.classList.add('notifications-center-header');\n\t\tthis.notificationsCenterContainer.appendChild(this.notificationsCenterHeader);\n\n\t\t// Header Title\n\t\tthis.notificationsCenterTitle = document.createElement('span');\n\t\tthis.notificationsCenterTitle.classList.add('notifications-center-header-title');\n\t\tthis.notificationsCenterHeader.appendChild(this.notificationsCenterTitle);\n\n\t\t// Header Toolbar\n\t\tconst toolbarContainer = document.createElement('div');\n\t\ttoolbarContainer.classList.add('notifications-center-header-toolbar');\n\t\tthis.notificationsCenterHeader.appendChild(toolbarContainer);\n\n\t\tconst actionRunner = this._register(this.instantiationService.createInstance(NotificationActionRunner));\n\n\t\tconst that = this;\n\t\tconst notificationsToolBar = this._register(new ActionBar(toolbarContainer, {\n\t\t\tariaLabel: localize('notificationsToolbar', \"Notification Center Actions\"),\n\t\t\tactionRunner,\n\t\t\tactionViewItemProvider: (action, options) => {\n\t\t\t\tif (action.id === ConfigureDoNotDisturbAction.ID) {\n\t\t\t\t\treturn this._register(this.instantiationService.createInstance(DropdownMenuActionViewItem, action, {\n\t\t\t\t\t\tgetActions() {\n\t\t\t\t\t\t\tconst actions = [toAction({\n\t\t\t\t\t\t\t\tid: ToggleDoNotDisturbAction.ID,\n\t\t\t\t\t\t\t\tlabel: that.notificationService.getFilter() === NotificationsFilter.OFF ? localize('turnOnNotifications', \"Enable Do Not Disturb Mode\") : localize('turnOffNotifications', \"Disable Do Not Disturb Mode\"),\n\t\t\t\t\t\t\t\trun: () => that.notificationService.setFilter(that.notificationService.getFilter() === NotificationsFilter.OFF ? NotificationsFilter.ERROR : NotificationsFilter.OFF)\n\t\t\t\t\t\t\t})];\n\n\t\t\t\t\t\t\tconst sortedFilters = that.notificationService.getFilters().sort((a, b) => a.label.localeCompare(b.label));\n\t\t\t\t\t\t\tfor (const source of sortedFilters.slice(0, NotificationsCenter.MAX_NOTIFICATION_SOURCES)) {\n\t\t\t\t\t\t\t\tif (actions.length === 1) {\n\t\t\t\t\t\t\t\t\tactions.push(new Separator());\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tactions.push(toAction({\n\t\t\t\t\t\t\t\t\tid: `${ToggleDoNotDisturbAction.ID}.${source.id}`,\n\t\t\t\t\t\t\t\t\tlabel: source.label,\n\t\t\t\t\t\t\t\t\tchecked: source.filter !== NotificationsFilter.ERROR,\n\t\t\t\t\t\t\t\t\trun: () => that.notificationService.setFilter({\n\t\t\t\t\t\t\t\t\t\t...source,\n\t\t\t\t\t\t\t\t\t\tfilter: source.filter === NotificationsFilter.ERROR ? NotificationsFilter.OFF : NotificationsFilter.ERROR\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (sortedFilters.length > NotificationsCenter.MAX_NOTIFICATION_SOURCES) {\n\t\t\t\t\t\t\t\tactions.push(new Separator());\n\t\t\t\t\t\t\t\tactions.push(that._register(that.instantiationService.createInstance(ToggleDoNotDisturbBySourceAction, ToggleDoNotDisturbBySourceAction.ID, localize('moreSources', \"More\u2026\"))));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn actions;\n\t\t\t\t\t\t},\n\t\t\t\t\t}, this.contextMenuService, {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\tactionRunner,\n\t\t\t\t\t\tclassNames: action.class,\n\t\t\t\t\t\tkeybindingProvider: action => this.keybindingService.lookupKeybinding(action.id)\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\tthis.clearAllAction = this._register(this.instantiationService.createInstance(ClearAllNotificationsAction, ClearAllNotificationsAction.ID, ClearAllNotificationsAction.LABEL));\n\t\tnotificationsToolBar.push(this.clearAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(this.clearAllAction) });\n\n\t\tthis.configureDoNotDisturbAction = this._register(this.instantiationService.createInstance(ConfigureDoNotDisturbAction, ConfigureDoNotDisturbAction.ID, ConfigureDoNotDisturbAction.LABEL));\n\t\tnotificationsToolBar.push(this.configureDoNotDisturbAction, { icon: true, label: false });\n\n\t\tconst hideAllAction = this._register(this.instantiationService.createInstance(HideNotificationsCenterAction, HideNotificationsCenterAction.ID, HideNotificationsCenterAction.LABEL));\n\t\tnotificationsToolBar.push(hideAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(hideAllAction) });\n\n\t\t// Notifications List\n\t\tthis.notificationsList = this.instantiationService.createInstance(NotificationsList, this.notificationsCenterContainer, {\n\t\t\twidgetAriaLabel: localize('notificationsCenterWidgetAriaLabel', \"Notifications Center\")\n\t\t});\n\t\tthis.container.appendChild(this.notificationsCenterContainer);\n\t}\n\n\tprivate getKeybindingLabel(action: IAction): string | null {\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\n\t\treturn keybinding ? keybinding.getLabel() : null;\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\t\tif (!this._isVisible) {\n\t\t\treturn; // only if visible\n\t\t}\n\n\t\tlet focusEditor = false;\n\n\t\t// Update notifications list based on event kind\n\t\tconst [notificationsList, notificationsCenterContainer] = assertAllDefined(this.notificationsList, this.notificationsCenterContainer);\n\t\tswitch (e.kind) {\n\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 0, [e.item]);\n\t\t\t\te.item.updateVisibility(true);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.CHANGE:\n\t\t\t\t// Handle content changes\n\t\t\t\t// - actions: re-draw to properly show them\n\t\t\t\t// - message: update notification height unless collapsed\n\t\t\t\tswitch (e.detail) {\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.ACTIONS:\n\t\t\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1, [e.item]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.MESSAGE:\n\t\t\t\t\t\tif (e.item.expanded) {\n\t\t\t\t\t\t\tnotificationsList.updateNotificationHeight(e.item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.EXPAND_COLLAPSE:\n\t\t\t\t// Re-draw entire item when expansion changes to reveal or hide details\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1, [e.item]);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.REMOVE:\n\t\t\t\tfocusEditor = isAncestorOfActiveElement(notificationsCenterContainer);\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1);\n\t\t\t\te.item.updateVisibility(false);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Update title\n\t\tthis.updateTitle();\n\n\t\t// Hide if no more notifications to show\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tthis.hide();\n\n\t\t\t// Restore focus to editor group if we had focus\n\t\t\tif (focusEditor) {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (!this._isVisible || !this.notificationsCenterContainer || !this.notificationsList) {\n\t\t\treturn; // already hidden\n\t\t}\n\n\t\tconst focusEditor = isAncestorOfActiveElement(this.notificationsCenterContainer);\n\n\t\t// Hide\n\t\tthis._isVisible = false;\n\t\tthis.notificationsCenterContainer.classList.remove('visible');\n\t\tthis.notificationsList.hide();\n\n\t\t// Mark as hidden\n\t\tthis.model.notifications.forEach(notification => notification.updateVisibility(false));\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(false);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\n\t\t// Restore focus to editor group if we had focus\n\t\tif (focusEditor) {\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t}\n\t}\n\n\toverride updateStyles(): void {\n\t\tif (this.notificationsCenterContainer && this.notificationsCenterHeader) {\n\t\t\tconst widgetShadowColor = this.getColor(widgetShadow);\n\t\t\tthis.notificationsCenterContainer.style.boxShadow = widgetShadowColor ? `0 0 8px 2px ${widgetShadowColor}` : '';\n\n\t\t\tconst borderColor = this.getColor(NOTIFICATIONS_CENTER_BORDER);\n\t\t\tthis.notificationsCenterContainer.style.border = borderColor ? `1px solid ${borderColor}` : '';\n\n\t\t\tconst headerForeground = this.getColor(NOTIFICATIONS_CENTER_HEADER_FOREGROUND);\n\t\t\tthis.notificationsCenterHeader.style.color = headerForeground ?? '';\n\n\t\t\tconst headerBackground = this.getColor(NOTIFICATIONS_CENTER_HEADER_BACKGROUND);\n\t\t\tthis.notificationsCenterHeader.style.background = headerBackground ?? '';\n\n\t\t}\n\t}\n\n\tlayout(dimension: Dimension | undefined): void {\n\t\tthis.workbenchDimensions = dimension;\n\n\t\tif (this._isVisible && this.notificationsCenterContainer) {\n\t\t\tconst maxWidth = NotificationsCenter.MAX_DIMENSIONS.width;\n\t\t\tconst maxHeight = NotificationsCenter.MAX_DIMENSIONS.height;\n\n\t\t\tlet availableWidth = maxWidth;\n\t\t\tlet availableHeight = maxHeight;\n\n\t\t\tif (this.workbenchDimensions) {\n\n\t\t\t\t// Make sure notifications are not exceding available width\n\t\t\t\tavailableWidth = this.workbenchDimensions.width;\n\t\t\t\tavailableWidth -= (2 * 8); // adjust for paddings left and right\n\n\t\t\t\t// Make sure notifications are not exceeding available height\n\t\t\t\tavailableHeight = this.workbenchDimensions.height - 35 /* header */;\n\t\t\t\tif (this.layoutService.isVisible(Parts.STATUSBAR_PART, mainWindow)) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for status bar\n\t\t\t\t}\n\n\t\t\t\tif (this.layoutService.isVisible(Parts.TITLEBAR_PART, mainWindow)) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for title bar\n\t\t\t\t}\n\n\t\t\t\tavailableHeight -= (2 * 12); // adjust for paddings top and bottom\n\t\t\t}\n\n\t\t\t// Apply to list\n\t\t\tconst notificationsList = assertIsDefined(this.notificationsList);\n\t\t\tnotificationsList.layout(Math.min(maxWidth, availableWidth), Math.min(maxHeight, availableHeight));\n\t\t}\n\t}\n\n\tclearAll(): void {\n\n\t\t// Hide notifications center first\n\t\tthis.hide();\n\n\t\t// Close all\n\t\tfor (const notification of [...this.model.notifications] /* copy array since we modify it from closing */) {\n\t\t\tif (!notification.hasProgress) {\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t\tthis.accessibilitySignalService.playSignal(AccessibilitySignal.clear);\n\t\t}\n\t}\n}\n\n"],
  "mappings": "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",
  "names": ["notificationsList", "action"]
}
