{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsCenter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/notificationsCenter.css\";\nimport \"./media/notificationsActions.css\";\nimport {\n\tDimension,\n\tisAncestorOfActiveElement,\n} from \"../../../../base/browser/dom.js\";\nimport { ActionBar } from \"../../../../base/browser/ui/actionbar/actionbar.js\";\nimport { DropdownMenuActionViewItem } from \"../../../../base/browser/ui/dropdown/dropdownActionViewItem.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport {\n\ttype IAction,\n\tSeparator,\n\ttoAction,\n} from \"../../../../base/common/actions.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\tassertAllDefined,\n\tassertIsDefined,\n} from \"../../../../base/common/types.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tAccessibilitySignal,\n\tIAccessibilitySignalService,\n} from \"../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport {\n\tINotificationService,\n\tNotificationsFilter,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { widgetShadow } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport {\n\tIThemeService,\n\tThemable,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport { NotificationsCenterVisibleContext } from \"../../../common/contextkeys.js\";\nimport {\n\ttype INotificationChangeEvent,\n\ttype INotificationsModel,\n\tNotificationChangeType,\n\tNotificationViewItemContentChangeKind,\n} from \"../../../common/notifications.js\";\nimport {\n\tNOTIFICATIONS_CENTER_BORDER,\n\tNOTIFICATIONS_CENTER_HEADER_BACKGROUND,\n\tNOTIFICATIONS_CENTER_HEADER_FOREGROUND,\n} from \"../../../common/theme.js\";\nimport { IEditorGroupsService } from \"../../../services/editor/common/editorGroupsService.js\";\nimport {\n\tIWorkbenchLayoutService,\n\tParts,\n} from \"../../../services/layout/browser/layoutService.js\";\nimport {\n\tClearAllNotificationsAction,\n\tConfigureDoNotDisturbAction,\n\tHideNotificationsCenterAction,\n\tToggleDoNotDisturbAction,\n\tToggleDoNotDisturbBySourceAction,\n} from \"./notificationsActions.js\";\nimport {\n\ttype INotificationsCenterController,\n\tNotificationActionRunner,\n} from \"./notificationsCommands.js\";\nimport { NotificationsList } from \"./notificationsList.js\";\n\nexport class NotificationsCenter\n\textends Themable\n\timplements INotificationsCenterController\n{\n\tprivate static readonly MAX_DIMENSIONS = new Dimension(450, 400);\n\n\tprivate static readonly MAX_NOTIFICATION_SOURCES = 10; // maximum number of notification sources to show in configure dropdown\n\n\tprivate readonly _onDidChangeVisibility = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate notificationsCenterContainer: HTMLElement | undefined;\n\tprivate notificationsCenterHeader: HTMLElement | undefined;\n\tprivate notificationsCenterTitle: HTMLSpanElement | undefined;\n\tprivate notificationsList: NotificationsList | undefined;\n\tprivate _isVisible: boolean | undefined;\n\tprivate workbenchDimensions: Dimension | undefined;\n\tprivate readonly notificationsCenterVisibleContextKey =\n\t\tNotificationsCenterVisibleContext.bindTo(this.contextKeyService);\n\tprivate clearAllAction: ClearAllNotificationsAction | undefined;\n\tprivate configureDoNotDisturbAction:\n\t\t| ConfigureDoNotDisturbAction\n\t\t| undefined;\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IAccessibilitySignalService private readonly accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(contextKeyService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.model.onDidChangeNotification((e) =>\n\t\t\t\tthis.onDidChangeNotification(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.layoutService.onDidLayoutMainContainer((dimension) =>\n\t\t\t\tthis.layout(Dimension.lift(dimension)),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.notificationService.onDidChangeFilter(() =>\n\t\t\t\tthis.onDidChangeFilter(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onDidChangeFilter(): void {\n\t\tif (\n\t\t\tthis.notificationService.getFilter() === NotificationsFilter.ERROR\n\t\t) {\n\t\t\tthis.hide(); // hide the notification center when we have a error filter enabled\n\t\t}\n\t}\n\n\tget isVisible(): boolean {\n\t\treturn !!this._isVisible;\n\t}\n\n\tshow(): void {\n\t\tif (this._isVisible) {\n\t\t\tconst notificationsList = assertIsDefined(this.notificationsList);\n\n\t\t\t// Make visible\n\t\t\tnotificationsList.show();\n\n\t\t\t// Focus first\n\t\t\tnotificationsList.focusFirst();\n\n\t\t\treturn; // already visible\n\t\t}\n\n\t\t// Lazily create if showing for the first time\n\t\tif (!this.notificationsCenterContainer) {\n\t\t\tthis.create();\n\t\t}\n\n\t\t// Title\n\t\tthis.updateTitle();\n\n\t\t// Make visible\n\t\tconst [notificationsList, notificationsCenterContainer] =\n\t\t\tassertAllDefined(\n\t\t\t\tthis.notificationsList,\n\t\t\t\tthis.notificationsCenterContainer,\n\t\t\t);\n\t\tthis._isVisible = true;\n\t\tnotificationsCenterContainer.classList.add(\"visible\");\n\t\tnotificationsList.show();\n\n\t\t// Layout\n\t\tthis.layout(this.workbenchDimensions);\n\n\t\t// Show all notifications that are present now\n\t\tnotificationsList.updateNotificationsList(\n\t\t\t0,\n\t\t\t0,\n\t\t\tthis.model.notifications,\n\t\t);\n\n\t\t// Focus first\n\t\tnotificationsList.focusFirst();\n\n\t\t// Theming\n\t\tthis.updateStyles();\n\n\t\t// Mark as visible\n\t\tthis.model.notifications.forEach((notification) =>\n\t\t\tnotification.updateVisibility(true),\n\t\t);\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(true);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\t}\n\n\tprivate updateTitle(): void {\n\t\tconst [notificationsCenterTitle, clearAllAction] = assertAllDefined(\n\t\t\tthis.notificationsCenterTitle,\n\t\t\tthis.clearAllAction,\n\t\t);\n\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tnotificationsCenterTitle.textContent = localize(\n\t\t\t\t\"notificationsEmpty\",\n\t\t\t\t\"No new notifications\",\n\t\t\t);\n\t\t\tclearAllAction.enabled = false;\n\t\t} else {\n\t\t\tnotificationsCenterTitle.textContent = localize(\n\t\t\t\t\"notifications\",\n\t\t\t\t\"Notifications\",\n\t\t\t);\n\t\t\tclearAllAction.enabled = this.model.notifications.some(\n\t\t\t\t(notification) => !notification.hasProgress,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate create(): void {\n\t\t// Container\n\t\tthis.notificationsCenterContainer = document.createElement(\"div\");\n\t\tthis.notificationsCenterContainer.classList.add(\"notifications-center\");\n\n\t\t// Header\n\t\tthis.notificationsCenterHeader = document.createElement(\"div\");\n\t\tthis.notificationsCenterHeader.classList.add(\n\t\t\t\"notifications-center-header\",\n\t\t);\n\t\tthis.notificationsCenterContainer.appendChild(\n\t\t\tthis.notificationsCenterHeader,\n\t\t);\n\n\t\t// Header Title\n\t\tthis.notificationsCenterTitle = document.createElement(\"span\");\n\t\tthis.notificationsCenterTitle.classList.add(\n\t\t\t\"notifications-center-header-title\",\n\t\t);\n\t\tthis.notificationsCenterHeader.appendChild(\n\t\t\tthis.notificationsCenterTitle,\n\t\t);\n\n\t\t// Header Toolbar\n\t\tconst toolbarContainer = document.createElement(\"div\");\n\t\ttoolbarContainer.classList.add(\"notifications-center-header-toolbar\");\n\t\tthis.notificationsCenterHeader.appendChild(toolbarContainer);\n\n\t\tconst actionRunner = this._register(\n\t\t\tthis.instantiationService.createInstance(NotificationActionRunner),\n\t\t);\n\n\t\tconst that = this;\n\t\tconst notificationsToolBar = this._register(\n\t\t\tnew ActionBar(toolbarContainer, {\n\t\t\t\tariaLabel: localize(\n\t\t\t\t\t\"notificationsToolbar\",\n\t\t\t\t\t\"Notification Center Actions\",\n\t\t\t\t),\n\t\t\t\tactionRunner,\n\t\t\t\tactionViewItemProvider: (action, options) => {\n\t\t\t\t\tif (action.id === ConfigureDoNotDisturbAction.ID) {\n\t\t\t\t\t\treturn this._register(\n\t\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\t\tDropdownMenuActionViewItem,\n\t\t\t\t\t\t\t\taction,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgetActions() {\n\t\t\t\t\t\t\t\t\t\tconst actions = [\n\t\t\t\t\t\t\t\t\t\t\ttoAction({\n\t\t\t\t\t\t\t\t\t\t\t\tid: ToggleDoNotDisturbAction.ID,\n\t\t\t\t\t\t\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat.notificationService.getFilter() ===\n\t\t\t\t\t\t\t\t\t\t\t\t\tNotificationsFilter.OFF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"turnOnNotifications\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Enable Do Not Disturb Mode\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"turnOffNotifications\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Disable Do Not Disturb Mode\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat.notificationService.setFilter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthat.notificationService.getFilter() ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNotificationsFilter.OFF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? NotificationsFilter.ERROR\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: NotificationsFilter.OFF,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t\t\tconst sortedFilters =\n\t\t\t\t\t\t\t\t\t\t\tthat.notificationService\n\t\t\t\t\t\t\t\t\t\t\t\t.getFilters()\n\t\t\t\t\t\t\t\t\t\t\t\t.sort((a, b) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\ta.label.localeCompare(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tb.label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tfor (const source of sortedFilters.slice(\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\tNotificationsCenter.MAX_NOTIFICATION_SOURCES,\n\t\t\t\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\t\t\t\tif (actions.length === 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tactions.push(new Separator());\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tactions.push(\n\t\t\t\t\t\t\t\t\t\t\t\ttoAction({\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: `${ToggleDoNotDisturbAction.ID}.${source.id}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: source.label,\n\t\t\t\t\t\t\t\t\t\t\t\t\tchecked:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource.filter !==\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNotificationsFilter.ERROR,\n\t\t\t\t\t\t\t\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthat.notificationService.setFilter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...source,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfilter:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource.filter ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNotificationsFilter.ERROR\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? NotificationsFilter.OFF\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: NotificationsFilter.ERROR,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tsortedFilters.length >\n\t\t\t\t\t\t\t\t\t\t\tNotificationsCenter.MAX_NOTIFICATION_SOURCES\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tactions.push(new Separator());\n\t\t\t\t\t\t\t\t\t\t\tactions.push(\n\t\t\t\t\t\t\t\t\t\t\t\tthat._register(\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat.instantiationService.createInstance(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tToggleDoNotDisturbBySourceAction,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tToggleDoNotDisturbBySourceAction.ID,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"moreSources\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"More\u2026\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn actions;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tthis.contextMenuService,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\t\t\tactionRunner,\n\t\t\t\t\t\t\t\t\tclassNames: action.class,\n\t\t\t\t\t\t\t\t\tkeybindingProvider: (action) =>\n\t\t\t\t\t\t\t\t\t\tthis.keybindingService.lookupKeybinding(\n\t\t\t\t\t\t\t\t\t\t\taction.id,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\t\tthis.clearAllAction = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tClearAllNotificationsAction,\n\t\t\t\tClearAllNotificationsAction.ID,\n\t\t\t\tClearAllNotificationsAction.LABEL,\n\t\t\t),\n\t\t);\n\t\tnotificationsToolBar.push(this.clearAllAction, {\n\t\t\ticon: true,\n\t\t\tlabel: false,\n\t\t\tkeybinding: this.getKeybindingLabel(this.clearAllAction),\n\t\t});\n\n\t\tthis.configureDoNotDisturbAction = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tConfigureDoNotDisturbAction,\n\t\t\t\tConfigureDoNotDisturbAction.ID,\n\t\t\t\tConfigureDoNotDisturbAction.LABEL,\n\t\t\t),\n\t\t);\n\t\tnotificationsToolBar.push(this.configureDoNotDisturbAction, {\n\t\t\ticon: true,\n\t\t\tlabel: false,\n\t\t});\n\n\t\tconst hideAllAction = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tHideNotificationsCenterAction,\n\t\t\t\tHideNotificationsCenterAction.ID,\n\t\t\t\tHideNotificationsCenterAction.LABEL,\n\t\t\t),\n\t\t);\n\t\tnotificationsToolBar.push(hideAllAction, {\n\t\t\ticon: true,\n\t\t\tlabel: false,\n\t\t\tkeybinding: this.getKeybindingLabel(hideAllAction),\n\t\t});\n\n\t\t// Notifications List\n\t\tthis.notificationsList = this.instantiationService.createInstance(\n\t\t\tNotificationsList,\n\t\t\tthis.notificationsCenterContainer,\n\t\t\t{\n\t\t\t\twidgetAriaLabel: localize(\n\t\t\t\t\t\"notificationsCenterWidgetAriaLabel\",\n\t\t\t\t\t\"Notifications Center\",\n\t\t\t\t),\n\t\t\t},\n\t\t);\n\t\tthis.container.appendChild(this.notificationsCenterContainer);\n\t}\n\n\tprivate getKeybindingLabel(action: IAction): string | null {\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\n\t\treturn keybinding ? keybinding.getLabel() : null;\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\t\tif (!this._isVisible) {\n\t\t\treturn; // only if visible\n\t\t}\n\n\t\tlet focusEditor = false;\n\n\t\t// Update notifications list based on event kind\n\t\tconst [notificationsList, notificationsCenterContainer] =\n\t\t\tassertAllDefined(\n\t\t\t\tthis.notificationsList,\n\t\t\t\tthis.notificationsCenterContainer,\n\t\t\t);\n\t\tswitch (e.kind) {\n\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 0, [e.item]);\n\t\t\t\te.item.updateVisibility(true);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.CHANGE:\n\t\t\t\t// Handle content changes\n\t\t\t\t// - actions: re-draw to properly show them\n\t\t\t\t// - message: update notification height unless collapsed\n\t\t\t\tswitch (e.detail) {\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.ACTIONS:\n\t\t\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1, [\n\t\t\t\t\t\t\te.item,\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.MESSAGE:\n\t\t\t\t\t\tif (e.item.expanded) {\n\t\t\t\t\t\t\tnotificationsList.updateNotificationHeight(e.item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.EXPAND_COLLAPSE:\n\t\t\t\t// Re-draw entire item when expansion changes to reveal or hide details\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1, [e.item]);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.REMOVE:\n\t\t\t\tfocusEditor = isAncestorOfActiveElement(\n\t\t\t\t\tnotificationsCenterContainer,\n\t\t\t\t);\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1);\n\t\t\t\te.item.updateVisibility(false);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Update title\n\t\tthis.updateTitle();\n\n\t\t// Hide if no more notifications to show\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tthis.hide();\n\n\t\t\t// Restore focus to editor group if we had focus\n\t\t\tif (focusEditor) {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (\n\t\t\t!this._isVisible ||\n\t\t\t!this.notificationsCenterContainer ||\n\t\t\t!this.notificationsList\n\t\t) {\n\t\t\treturn; // already hidden\n\t\t}\n\n\t\tconst focusEditor = isAncestorOfActiveElement(\n\t\t\tthis.notificationsCenterContainer,\n\t\t);\n\n\t\t// Hide\n\t\tthis._isVisible = false;\n\t\tthis.notificationsCenterContainer.classList.remove(\"visible\");\n\t\tthis.notificationsList.hide();\n\n\t\t// Mark as hidden\n\t\tthis.model.notifications.forEach((notification) =>\n\t\t\tnotification.updateVisibility(false),\n\t\t);\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(false);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\n\t\t// Restore focus to editor group if we had focus\n\t\tif (focusEditor) {\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t}\n\t}\n\n\toverride updateStyles(): void {\n\t\tif (\n\t\t\tthis.notificationsCenterContainer &&\n\t\t\tthis.notificationsCenterHeader\n\t\t) {\n\t\t\tconst widgetShadowColor = this.getColor(widgetShadow);\n\t\t\tthis.notificationsCenterContainer.style.boxShadow =\n\t\t\t\twidgetShadowColor ? `0 0 8px 2px ${widgetShadowColor}` : \"\";\n\n\t\t\tconst borderColor = this.getColor(NOTIFICATIONS_CENTER_BORDER);\n\t\t\tthis.notificationsCenterContainer.style.border = borderColor\n\t\t\t\t? `1px solid ${borderColor}`\n\t\t\t\t: \"\";\n\n\t\t\tconst headerForeground = this.getColor(\n\t\t\t\tNOTIFICATIONS_CENTER_HEADER_FOREGROUND,\n\t\t\t);\n\t\t\tthis.notificationsCenterHeader.style.color = headerForeground ?? \"\";\n\n\t\t\tconst headerBackground = this.getColor(\n\t\t\t\tNOTIFICATIONS_CENTER_HEADER_BACKGROUND,\n\t\t\t);\n\t\t\tthis.notificationsCenterHeader.style.background =\n\t\t\t\theaderBackground ?? \"\";\n\t\t}\n\t}\n\n\tlayout(dimension: Dimension | undefined): void {\n\t\tthis.workbenchDimensions = dimension;\n\n\t\tif (this._isVisible && this.notificationsCenterContainer) {\n\t\t\tconst maxWidth = NotificationsCenter.MAX_DIMENSIONS.width;\n\t\t\tconst maxHeight = NotificationsCenter.MAX_DIMENSIONS.height;\n\n\t\t\tlet availableWidth = maxWidth;\n\t\t\tlet availableHeight = maxHeight;\n\n\t\t\tif (this.workbenchDimensions) {\n\t\t\t\t// Make sure notifications are not exceding available width\n\t\t\t\tavailableWidth = this.workbenchDimensions.width;\n\t\t\t\tavailableWidth -= 2 * 8; // adjust for paddings left and right\n\n\t\t\t\t// Make sure notifications are not exceeding available height\n\t\t\t\tavailableHeight =\n\t\t\t\t\tthis.workbenchDimensions.height - 35 /* header */;\n\t\t\t\tif (\n\t\t\t\t\tthis.layoutService.isVisible(\n\t\t\t\t\t\tParts.STATUSBAR_PART,\n\t\t\t\t\t\tmainWindow,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for status bar\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tthis.layoutService.isVisible(\n\t\t\t\t\t\tParts.TITLEBAR_PART,\n\t\t\t\t\t\tmainWindow,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for title bar\n\t\t\t\t}\n\n\t\t\t\tavailableHeight -= 2 * 12; // adjust for paddings top and bottom\n\t\t\t}\n\n\t\t\t// Apply to list\n\t\t\tconst notificationsList = assertIsDefined(this.notificationsList);\n\t\t\tnotificationsList.layout(\n\t\t\t\tMath.min(maxWidth, availableWidth),\n\t\t\t\tMath.min(maxHeight, availableHeight),\n\t\t\t);\n\t\t}\n\t}\n\n\tclearAll(): void {\n\t\t// Hide notifications center first\n\t\tthis.hide();\n\n\t\t// Close all\n\t\tfor (const notification of [\n\t\t\t...this.model.notifications,\n\t\t] /* copy array since we modify it from closing */) {\n\t\t\tif (!notification.hasProgress) {\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t\tthis.accessibilitySignalService.playSignal(\n\t\t\t\tAccessibilitySignal.clear,\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["notificationsList", "action"]
}
