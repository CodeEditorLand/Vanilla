{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tActionRunner,\n\ttype IAction,\n\ttype WorkbenchActionExecutedClassification,\n\ttype WorkbenchActionExecutedEvent,\n} from \"../../../../base/common/actions.js\";\nimport { hash } from \"../../../../base/common/hash.js\";\nimport { KeyChord, KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tAccessibilitySignal,\n\tIAccessibilitySignalService,\n} from \"../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js\";\nimport {\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\tIListService,\n\tWorkbenchList,\n} from \"../../../../platform/list/browser/listService.js\";\nimport {\n\tINotificationService,\n\ttype INotificationSourceFilter,\n\tNotificationPriority,\n\tNotificationsFilter,\n} from \"../../../../platform/notification/common/notification.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\tNotificationFocusedContext,\n\tNotificationsCenterVisibleContext,\n\tNotificationsToastsVisibleContext,\n} from \"../../../common/contextkeys.js\";\nimport {\n\ttype INotificationViewItem,\n\ttype NotificationsModel,\n\tisNotificationViewItem,\n} from \"../../../common/notifications.js\";\nimport {\n\ttype NotificationMetrics,\n\ttype NotificationMetricsClassification,\n\tnotificationToMetrics,\n} from \"./notificationsTelemetry.js\";\n\n// Center\nexport const SHOW_NOTIFICATIONS_CENTER = \"notifications.showList\";\nexport const HIDE_NOTIFICATIONS_CENTER = \"notifications.hideList\";\nconst TOGGLE_NOTIFICATIONS_CENTER = \"notifications.toggleList\";\n\n// Toasts\nexport const HIDE_NOTIFICATION_TOAST = \"notifications.hideToasts\";\nconst FOCUS_NOTIFICATION_TOAST = \"notifications.focusToasts\";\nconst FOCUS_NEXT_NOTIFICATION_TOAST = \"notifications.focusNextToast\";\nconst FOCUS_PREVIOUS_NOTIFICATION_TOAST = \"notifications.focusPreviousToast\";\nconst FOCUS_FIRST_NOTIFICATION_TOAST = \"notifications.focusFirstToast\";\nconst FOCUS_LAST_NOTIFICATION_TOAST = \"notifications.focusLastToast\";\n\n// Notification\nexport const COLLAPSE_NOTIFICATION = \"notification.collapse\";\nexport const EXPAND_NOTIFICATION = \"notification.expand\";\nexport const ACCEPT_PRIMARY_ACTION_NOTIFICATION =\n\t\"notification.acceptPrimaryAction\";\nconst TOGGLE_NOTIFICATION = \"notification.toggle\";\nexport const CLEAR_NOTIFICATION = \"notification.clear\";\nexport const CLEAR_ALL_NOTIFICATIONS = \"notifications.clearAll\";\nexport const TOGGLE_DO_NOT_DISTURB_MODE =\n\t\"notifications.toggleDoNotDisturbMode\";\nexport const TOGGLE_DO_NOT_DISTURB_MODE_BY_SOURCE =\n\t\"notifications.toggleDoNotDisturbModeBySource\";\n\nexport interface INotificationsCenterController {\n\treadonly isVisible: boolean;\n\n\tshow(): void;\n\thide(): void;\n\n\tclearAll(): void;\n}\n\nexport interface INotificationsToastController {\n\tfocus(): void;\n\tfocusNext(): void;\n\tfocusPrevious(): void;\n\tfocusFirst(): void;\n\tfocusLast(): void;\n\n\thide(): void;\n}\n\nexport function getNotificationFromContext(\n\tlistService: IListService,\n\tcontext?: unknown,\n): INotificationViewItem | undefined {\n\tif (isNotificationViewItem(context)) {\n\t\treturn context;\n\t}\n\n\tconst list = listService.lastFocusedList;\n\tif (list instanceof WorkbenchList) {\n\t\tlet element = list.getFocusedElements()[0];\n\t\tif (!isNotificationViewItem(element)) {\n\t\t\tif (list.isDOMFocused()) {\n\t\t\t\t// the notification list might have received focus\n\t\t\t\t// via keyboard and might not have a focused element.\n\t\t\t\t// in that case just return the first element\n\t\t\t\t// https://github.com/microsoft/vscode/issues/191705\n\t\t\t\telement = list.element(0);\n\t\t\t}\n\t\t}\n\n\t\tif (isNotificationViewItem(element)) {\n\t\t\treturn element;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function registerNotificationCommands(\n\tcenter: INotificationsCenterController,\n\ttoasts: INotificationsToastController,\n\tmodel: NotificationsModel,\n): void {\n\t// Show Notifications Cneter\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: SHOW_NOTIFICATIONS_CENTER,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyChord(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyK,\n\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyN,\n\t\t),\n\t\thandler: () => {\n\t\t\ttoasts.hide();\n\t\t\tcenter.show();\n\t\t},\n\t});\n\n\t// Hide Notifications Center\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: HIDE_NOTIFICATIONS_CENTER,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\t\twhen: NotificationsCenterVisibleContext,\n\t\tprimary: KeyCode.Escape,\n\t\thandler: (accessor) => {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tfor (const notification of model.notifications) {\n\t\t\t\tif (notification.visible) {\n\t\t\t\t\ttelemetryService.publicLog2<\n\t\t\t\t\t\tNotificationMetrics,\n\t\t\t\t\t\tNotificationMetricsClassification\n\t\t\t\t\t>(\n\t\t\t\t\t\t\"notification:hide\",\n\t\t\t\t\t\tnotificationToMetrics(\n\t\t\t\t\t\t\tnotification.message.original,\n\t\t\t\t\t\t\tnotification.sourceId,\n\t\t\t\t\t\t\tnotification.priority ===\n\t\t\t\t\t\t\t\tNotificationPriority.SILENT,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcenter.hide();\n\t\t},\n\t});\n\n\t// Toggle Notifications Center\n\tCommandsRegistry.registerCommand(TOGGLE_NOTIFICATIONS_CENTER, () => {\n\t\tif (center.isVisible) {\n\t\t\tcenter.hide();\n\t\t} else {\n\t\t\ttoasts.hide();\n\t\t\tcenter.show();\n\t\t}\n\t});\n\n\t// Clear Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLEAR_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Delete,\n\t\tmac: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t\t},\n\t\thandler: (accessor, args?) => {\n\t\t\tconst accessibilitySignalService = accessor.get(\n\t\t\t\tIAccessibilitySignalService,\n\t\t\t);\n\t\t\tconst notification = getNotificationFromContext(\n\t\t\t\taccessor.get(IListService),\n\t\t\t\targs,\n\t\t\t);\n\t\t\tif (notification && !notification.hasProgress) {\n\t\t\t\tnotification.close();\n\t\t\t\taccessibilitySignalService.playSignal(\n\t\t\t\t\tAccessibilitySignal.clear,\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t});\n\n\t// Expand Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: EXPAND_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.RightArrow,\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(\n\t\t\t\taccessor.get(IListService),\n\t\t\t\targs,\n\t\t\t);\n\t\t\tnotification?.expand();\n\t\t},\n\t});\n\n\t// Accept Primary Action\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: ACCEPT_PRIMARY_ACTION_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.or(\n\t\t\tNotificationFocusedContext,\n\t\t\tNotificationsToastsVisibleContext,\n\t\t),\n\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA,\n\t\thandler: (accessor) => {\n\t\t\tconst actionRunner = accessor\n\t\t\t\t.get(IInstantiationService)\n\t\t\t\t.createInstance(NotificationActionRunner);\n\t\t\tconst notification =\n\t\t\t\tgetNotificationFromContext(accessor.get(IListService)) ||\n\t\t\t\tmodel.notifications.at(0);\n\t\t\tif (!notification) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst primaryAction = notification.actions?.primary\n\t\t\t\t? notification.actions.primary.at(0)\n\t\t\t\t: undefined;\n\t\t\tif (!primaryAction) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tactionRunner.run(primaryAction, notification);\n\t\t\tnotification.close();\n\t\t},\n\t});\n\n\t// Collapse Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: COLLAPSE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.LeftArrow,\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(\n\t\t\t\taccessor.get(IListService),\n\t\t\t\targs,\n\t\t\t);\n\t\t\tnotification?.collapse();\n\t\t},\n\t});\n\n\t// Toggle Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Space,\n\t\tsecondary: [KeyCode.Enter],\n\t\thandler: (accessor) => {\n\t\t\tconst notification = getNotificationFromContext(\n\t\t\t\taccessor.get(IListService),\n\t\t\t);\n\t\t\tnotification?.toggle();\n\t\t},\n\t});\n\n\t// Hide Toasts\n\tCommandsRegistry.registerCommand(HIDE_NOTIFICATION_TOAST, (accessor) => {\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tfor (const notification of model.notifications) {\n\t\t\tif (notification.visible) {\n\t\t\t\ttelemetryService.publicLog2<\n\t\t\t\t\tNotificationMetrics,\n\t\t\t\t\tNotificationMetricsClassification\n\t\t\t\t>(\n\t\t\t\t\t\"notification:hide\",\n\t\t\t\t\tnotificationToMetrics(\n\t\t\t\t\t\tnotification.message.original,\n\t\t\t\t\t\tnotification.sourceId,\n\t\t\t\t\t\tnotification.priority === NotificationPriority.SILENT,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\ttoasts.hide();\n\t});\n\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib - 50, // lower when not focused (e.g. let editor suggest win over this command)\n\t\twhen: NotificationsToastsVisibleContext,\n\t\tprimary: KeyCode.Escape,\n\t});\n\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 100, // higher when focused\n\t\twhen: ContextKeyExpr.and(\n\t\t\tNotificationsToastsVisibleContext,\n\t\t\tNotificationFocusedContext,\n\t\t),\n\t\tprimary: KeyCode.Escape,\n\t});\n\n\t// Focus Toasts\n\tCommandsRegistry.registerCommand(FOCUS_NOTIFICATION_TOAST, () =>\n\t\ttoasts.focus(),\n\t);\n\n\t// Focus Next Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_NEXT_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tNotificationFocusedContext,\n\t\t\tNotificationsToastsVisibleContext,\n\t\t),\n\t\tprimary: KeyCode.DownArrow,\n\t\thandler: () => {\n\t\t\ttoasts.focusNext();\n\t\t},\n\t});\n\n\t// Focus Previous Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_PREVIOUS_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tNotificationFocusedContext,\n\t\t\tNotificationsToastsVisibleContext,\n\t\t),\n\t\tprimary: KeyCode.UpArrow,\n\t\thandler: () => {\n\t\t\ttoasts.focusPrevious();\n\t\t},\n\t});\n\n\t// Focus First Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_FIRST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tNotificationFocusedContext,\n\t\t\tNotificationsToastsVisibleContext,\n\t\t),\n\t\tprimary: KeyCode.PageUp,\n\t\tsecondary: [KeyCode.Home],\n\t\thandler: () => {\n\t\t\ttoasts.focusFirst();\n\t\t},\n\t});\n\n\t// Focus Last Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_LAST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tNotificationFocusedContext,\n\t\t\tNotificationsToastsVisibleContext,\n\t\t),\n\t\tprimary: KeyCode.PageDown,\n\t\tsecondary: [KeyCode.End],\n\t\thandler: () => {\n\t\t\ttoasts.focusLast();\n\t\t},\n\t});\n\n\t// Clear All Notifications\n\tCommandsRegistry.registerCommand(CLEAR_ALL_NOTIFICATIONS, () =>\n\t\tcenter.clearAll(),\n\t);\n\n\t// Toggle Do Not Disturb Mode\n\tCommandsRegistry.registerCommand(TOGGLE_DO_NOT_DISTURB_MODE, (accessor) => {\n\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\tnotificationService.setFilter(\n\t\t\tnotificationService.getFilter() === NotificationsFilter.ERROR\n\t\t\t\t? NotificationsFilter.OFF\n\t\t\t\t: NotificationsFilter.ERROR,\n\t\t);\n\t});\n\n\t// Configure Do Not Disturb by Source\n\tCommandsRegistry.registerCommand(\n\t\tTOGGLE_DO_NOT_DISTURB_MODE_BY_SOURCE,\n\t\t(accessor) => {\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\t\tconst sortedFilters = notificationService\n\t\t\t\t.getFilters()\n\t\t\t\t.sort((a, b) => a.label.localeCompare(b.label));\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst picker = disposables.add(\n\t\t\t\tquickInputService.createQuickPick<\n\t\t\t\t\tIQuickPickItem & INotificationSourceFilter\n\t\t\t\t>(),\n\t\t\t);\n\n\t\t\tpicker.items = sortedFilters.map((source) => ({\n\t\t\t\tid: source.id,\n\t\t\t\tlabel: source.label,\n\t\t\t\ttooltip: `${source.label} (${source.id})`,\n\t\t\t\tfilter: source.filter,\n\t\t\t}));\n\n\t\t\tpicker.canSelectMany = true;\n\t\t\tpicker.placeholder = localize(\n\t\t\t\t\"selectSources\",\n\t\t\t\t\"Select sources to enable all notifications from\",\n\t\t\t);\n\t\t\tpicker.selectedItems = picker.items.filter(\n\t\t\t\t(item) => item.filter === NotificationsFilter.OFF,\n\t\t\t);\n\n\t\t\tpicker.show();\n\n\t\t\tdisposables.add(\n\t\t\t\tpicker.onDidAccept(async () => {\n\t\t\t\t\tfor (const item of picker.items) {\n\t\t\t\t\t\tnotificationService.setFilter({\n\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\tlabel: item.label,\n\t\t\t\t\t\t\tfilter: picker.selectedItems.includes(item)\n\t\t\t\t\t\t\t\t? NotificationsFilter.OFF\n\t\t\t\t\t\t\t\t: NotificationsFilter.ERROR,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tpicker.hide();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposables.add(picker.onDidHide(() => disposables.dispose()));\n\t\t},\n\t);\n\n\t// Commands for Command Palette\n\tconst category = localize2(\"notifications\", \"Notifications\");\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: SHOW_NOTIFICATIONS_CENTER,\n\t\t\ttitle: localize2(\"showNotifications\", \"Show Notifications\"),\n\t\t\tcategory,\n\t\t},\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: HIDE_NOTIFICATIONS_CENTER,\n\t\t\ttitle: localize2(\"hideNotifications\", \"Hide Notifications\"),\n\t\t\tcategory,\n\t\t},\n\t\twhen: NotificationsCenterVisibleContext,\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: CLEAR_ALL_NOTIFICATIONS,\n\t\t\ttitle: localize2(\n\t\t\t\t\"clearAllNotifications\",\n\t\t\t\t\"Clear All Notifications\",\n\t\t\t),\n\t\t\tcategory,\n\t\t},\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: ACCEPT_PRIMARY_ACTION_NOTIFICATION,\n\t\t\ttitle: localize2(\n\t\t\t\t\"acceptNotificationPrimaryAction\",\n\t\t\t\t\"Accept Notification Primary Action\",\n\t\t\t),\n\t\t\tcategory,\n\t\t},\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: TOGGLE_DO_NOT_DISTURB_MODE,\n\t\t\ttitle: localize2(\n\t\t\t\t\"toggleDoNotDisturbMode\",\n\t\t\t\t\"Toggle Do Not Disturb Mode\",\n\t\t\t),\n\t\t\tcategory,\n\t\t},\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: TOGGLE_DO_NOT_DISTURB_MODE_BY_SOURCE,\n\t\t\ttitle: localize2(\n\t\t\t\t\"toggleDoNotDisturbModeBySource\",\n\t\t\t\t\"Toggle Do Not Disturb Mode By Source...\",\n\t\t\t),\n\t\t\tcategory,\n\t\t},\n\t});\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: FOCUS_NOTIFICATION_TOAST,\n\t\t\ttitle: localize2(\n\t\t\t\t\"focusNotificationToasts\",\n\t\t\t\t\"Focus Notification Toast\",\n\t\t\t),\n\t\t\tcategory,\n\t\t},\n\t\twhen: NotificationsToastsVisibleContext,\n\t});\n}\n\ninterface NotificationActionMetrics {\n\treadonly id: string;\n\treadonly actionLabel: string;\n\treadonly source: string;\n\treadonly silent: boolean;\n}\n\ntype NotificationActionMetricsClassification = {\n\tid: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The identifier of the action that was run from a notification.\";\n\t};\n\tactionLabel: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The label of the action that was run from a notification.\";\n\t};\n\tsource: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The source of the notification where an action was run.\";\n\t};\n\tsilent: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Whether the notification where an action was run is silent or not.\";\n\t};\n\towner: \"bpasero\";\n\tcomment: \"Tracks when actions are fired from notifcations and how they were fired.\";\n};\n\nexport class NotificationActionRunner extends ActionRunner {\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected override async runAction(\n\t\taction: IAction,\n\t\tcontext: unknown,\n\t): Promise<void> {\n\t\tthis.telemetryService.publicLog2<\n\t\t\tWorkbenchActionExecutedEvent,\n\t\t\tWorkbenchActionExecutedClassification\n\t\t>(\"workbenchActionExecuted\", { id: action.id, from: \"message\" });\n\n\t\tif (isNotificationViewItem(context)) {\n\t\t\t// Log some additional telemetry specifically for actions\n\t\t\t// that are triggered from within notifications.\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tNotificationActionMetrics,\n\t\t\t\tNotificationActionMetricsClassification\n\t\t\t>(\"notification:actionExecuted\", {\n\t\t\t\tid: hash(context.message.original.toString()).toString(),\n\t\t\t\tactionLabel: action.label,\n\t\t\t\tsource: context.sourceId || \"core\",\n\t\t\t\tsilent: context.priority === NotificationPriority.SILENT,\n\t\t\t});\n\t\t}\n\n\t\t// Run and make sure to notify on any error again\n\t\ttry {\n\t\t\tawait super.runAction(action, context);\n\t\t} catch (error) {\n\t\t\tthis.notificationService.error(error);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EACC;AAAA,OAIM;AACP,SAAS,YAAY;AACrB,SAAS,UAAU,SAAS,cAAc;AAC1C,SAAS,uBAAuB;AAChC,SAAS,UAAU,iBAAiB;AACpC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAC/B,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,OAEM;AACP,SAAS,yBAAyB;AAClC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAGC;AAAA,OACM;AACP;AAAA,EAGC;AAAA,OACM;AAGA,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AACzC,MAAM,8BAA8B;AAG7B,MAAM,0BAA0B;AACvC,MAAM,2BAA2B;AACjC,MAAM,gCAAgC;AACtC,MAAM,oCAAoC;AAC1C,MAAM,iCAAiC;AACvC,MAAM,gCAAgC;AAG/B,MAAM,wBAAwB;AAC9B,MAAM,sBAAsB;AAC5B,MAAM,qCACZ;AACD,MAAM,sBAAsB;AACrB,MAAM,qBAAqB;AAC3B,MAAM,0BAA0B;AAChC,MAAM,6BACZ;AACM,MAAM,uCACZ;AAqBM,SAAS,2BACf,aACA,SACoC;AACpC,MAAI,uBAAuB,OAAO,GAAG;AACpC,WAAO;AAAA,EACR;AAEA,QAAM,OAAO,YAAY;AACzB,MAAI,gBAAgB,eAAe;AAClC,QAAI,UAAU,KAAK,mBAAmB,EAAE,CAAC;AACzC,QAAI,CAAC,uBAAuB,OAAO,GAAG;AACrC,UAAI,KAAK,aAAa,GAAG;AAKxB,kBAAU,KAAK,QAAQ,CAAC;AAAA,MACzB;AAAA,IACD;AAEA,QAAI,uBAAuB,OAAO,GAAG;AACpC,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AA3BgB;AA6BT,SAAS,6BACf,QACA,QACA,OACO;AAEP,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,SAAS;AAAA,MACR,OAAO,UAAU,QAAQ;AAAA,MACzB,OAAO,UAAU,OAAO,QAAQ,QAAQ;AAAA,IACzC;AAAA,IACA,SAAS,6BAAM;AACd,aAAO,KAAK;AACZ,aAAO,KAAK;AAAA,IACb,GAHS;AAAA,EAIV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB,mBAAmB;AAAA,IAC5C,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,SAAS,wBAAC,aAAa;AACtB,YAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,iBAAW,gBAAgB,MAAM,eAAe;AAC/C,YAAI,aAAa,SAAS;AACzB,2BAAiB;AAAA,YAIhB;AAAA,YACA;AAAA,cACC,aAAa,QAAQ;AAAA,cACrB,aAAa;AAAA,cACb,aAAa,aACZ,qBAAqB;AAAA,YACvB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,aAAO,KAAK;AAAA,IACb,GApBS;AAAA,EAqBV,CAAC;AAGD,mBAAiB,gBAAgB,6BAA6B,MAAM;AACnE,QAAI,OAAO,WAAW;AACrB,aAAO,KAAK;AAAA,IACb,OAAO;AACN,aAAO,KAAK;AACZ,aAAO,KAAK;AAAA,IACb;AAAA,EACD,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,KAAK;AAAA,MACJ,SAAS,OAAO,UAAU,QAAQ;AAAA,IACnC;AAAA,IACA,SAAS,wBAAC,UAAU,SAAU;AAC7B,YAAM,6BAA6B,SAAS;AAAA,QAC3C;AAAA,MACD;AACA,YAAM,eAAe;AAAA,QACpB,SAAS,IAAI,YAAY;AAAA,QACzB;AAAA,MACD;AACA,UAAI,gBAAgB,CAAC,aAAa,aAAa;AAC9C,qBAAa,MAAM;AACnB,mCAA2B;AAAA,UAC1B,oBAAoB;AAAA,QACrB;AAAA,MACD;AAAA,IACD,GAdS;AAAA,EAeV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,SAAS,wBAAC,UAAU,SAAU;AAC7B,YAAM,eAAe;AAAA,QACpB,SAAS,IAAI,YAAY;AAAA,QACzB;AAAA,MACD;AACA,oBAAc,OAAO;AAAA,IACtB,GANS;AAAA,EAOV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,SAAS,OAAO,UAAU,OAAO,QAAQ,QAAQ;AAAA,IACjD,SAAS,wBAAC,aAAa;AACtB,YAAM,eAAe,SACnB,IAAI,qBAAqB,EACzB,eAAe,wBAAwB;AACzC,YAAM,eACL,2BAA2B,SAAS,IAAI,YAAY,CAAC,KACrD,MAAM,cAAc,GAAG,CAAC;AACzB,UAAI,CAAC,cAAc;AAClB;AAAA,MACD;AACA,YAAM,gBAAgB,aAAa,SAAS,UACzC,aAAa,QAAQ,QAAQ,GAAG,CAAC,IACjC;AACH,UAAI,CAAC,eAAe;AACnB;AAAA,MACD;AACA,mBAAa,IAAI,eAAe,YAAY;AAC5C,mBAAa,MAAM;AAAA,IACpB,GAlBS;AAAA,EAmBV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,SAAS,wBAAC,UAAU,SAAU;AAC7B,YAAM,eAAe;AAAA,QACpB,SAAS,IAAI,YAAY;AAAA,QACzB;AAAA,MACD;AACA,oBAAc,SAAS;AAAA,IACxB,GANS;AAAA,EAOV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,WAAW,CAAC,QAAQ,KAAK;AAAA,IACzB,SAAS,wBAAC,aAAa;AACtB,YAAM,eAAe;AAAA,QACpB,SAAS,IAAI,YAAY;AAAA,MAC1B;AACA,oBAAc,OAAO;AAAA,IACtB,GALS;AAAA,EAMV,CAAC;AAGD,mBAAiB,gBAAgB,yBAAyB,CAAC,aAAa;AACvE,UAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,eAAW,gBAAgB,MAAM,eAAe;AAC/C,UAAI,aAAa,SAAS;AACzB,yBAAiB;AAAA,UAIhB;AAAA,UACA;AAAA,YACC,aAAa,QAAQ;AAAA,YACrB,aAAa;AAAA,YACb,aAAa,aAAa,qBAAqB;AAAA,UAChD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,WAAO,KAAK;AAAA,EACb,CAAC;AAED,sBAAoB,uBAAuB;AAAA,IAC1C,IAAI;AAAA,IACJ,QAAQ,iBAAiB,mBAAmB;AAAA;AAAA,IAC5C,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,EAClB,CAAC;AAED,sBAAoB,uBAAuB;AAAA,IAC1C,IAAI;AAAA,IACJ,QAAQ,iBAAiB,mBAAmB;AAAA;AAAA,IAC5C,MAAM,eAAe;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,SAAS,QAAQ;AAAA,EAClB,CAAC;AAGD,mBAAiB;AAAA,IAAgB;AAAA,IAA0B,MAC1D,OAAO,MAAM;AAAA,EACd;AAGA,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,SAAS,QAAQ;AAAA,IACjB,SAAS,6BAAM;AACd,aAAO,UAAU;AAAA,IAClB,GAFS;AAAA,EAGV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,SAAS,QAAQ;AAAA,IACjB,SAAS,6BAAM;AACd,aAAO,cAAc;AAAA,IACtB,GAFS;AAAA,EAGV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,SAAS,QAAQ;AAAA,IACjB,WAAW,CAAC,QAAQ,IAAI;AAAA,IACxB,SAAS,6BAAM;AACd,aAAO,WAAW;AAAA,IACnB,GAFS;AAAA,EAGV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe;AAAA,MACpB;AAAA,MACA;AAAA,IACD;AAAA,IACA,SAAS,QAAQ;AAAA,IACjB,WAAW,CAAC,QAAQ,GAAG;AAAA,IACvB,SAAS,6BAAM;AACd,aAAO,UAAU;AAAA,IAClB,GAFS;AAAA,EAGV,CAAC;AAGD,mBAAiB;AAAA,IAAgB;AAAA,IAAyB,MACzD,OAAO,SAAS;AAAA,EACjB;AAGA,mBAAiB,gBAAgB,4BAA4B,CAAC,aAAa;AAC1E,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,wBAAoB;AAAA,MACnB,oBAAoB,UAAU,MAAM,oBAAoB,QACrD,oBAAoB,MACpB,oBAAoB;AAAA,IACxB;AAAA,EACD,CAAC;AAGD,mBAAiB;AAAA,IAChB;AAAA,IACA,CAAC,aAAa;AACb,YAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAC7D,YAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,YAAM,gBAAgB,oBACpB,WAAW,EACX,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,cAAc,EAAE,KAAK,CAAC;AAE/C,YAAM,cAAc,IAAI,gBAAgB;AACxC,YAAM,SAAS,YAAY;AAAA,QAC1B,kBAAkB,gBAEhB;AAAA,MACH;AAEA,aAAO,QAAQ,cAAc,IAAI,CAAC,YAAY;AAAA,QAC7C,IAAI,OAAO;AAAA,QACX,OAAO,OAAO;AAAA,QACd,SAAS,GAAG,OAAO,KAAK,KAAK,OAAO,EAAE;AAAA,QACtC,QAAQ,OAAO;AAAA,MAChB,EAAE;AAEF,aAAO,gBAAgB;AACvB,aAAO,cAAc;AAAA,QACpB;AAAA,QACA;AAAA,MACD;AACA,aAAO,gBAAgB,OAAO,MAAM;AAAA,QACnC,CAAC,SAAS,KAAK,WAAW,oBAAoB;AAAA,MAC/C;AAEA,aAAO,KAAK;AAEZ,kBAAY;AAAA,QACX,OAAO,YAAY,YAAY;AAC9B,qBAAW,QAAQ,OAAO,OAAO;AAChC,gCAAoB,UAAU;AAAA,cAC7B,IAAI,KAAK;AAAA,cACT,OAAO,KAAK;AAAA,cACZ,QAAQ,OAAO,cAAc,SAAS,IAAI,IACvC,oBAAoB,MACpB,oBAAoB;AAAA,YACxB,CAAC;AAAA,UACF;AAEA,iBAAO,KAAK;AAAA,QACb,CAAC;AAAA,MACF;AAEA,kBAAY,IAAI,OAAO,UAAU,MAAM,YAAY,QAAQ,CAAC,CAAC;AAAA,IAC9D;AAAA,EACD;AAGA,QAAM,WAAW,UAAU,iBAAiB,eAAe;AAC3D,eAAa,eAAe,OAAO,gBAAgB;AAAA,IAClD,SAAS;AAAA,MACR,IAAI;AAAA,MACJ,OAAO,UAAU,qBAAqB,oBAAoB;AAAA,MAC1D;AAAA,IACD;AAAA,EACD,CAAC;AACD,eAAa,eAAe,OAAO,gBAAgB;AAAA,IAClD,SAAS;AAAA,MACR,IAAI;AAAA,MACJ,OAAO,UAAU,qBAAqB,oBAAoB;AAAA,MAC1D;AAAA,IACD;AAAA,IACA,MAAM;AAAA,EACP,CAAC;AACD,eAAa,eAAe,OAAO,gBAAgB;AAAA,IAClD,SAAS;AAAA,MACR,IAAI;AAAA,MACJ,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAAA,EACD,CAAC;AACD,eAAa,eAAe,OAAO,gBAAgB;AAAA,IAClD,SAAS;AAAA,MACR,IAAI;AAAA,MACJ,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAAA,EACD,CAAC;AACD,eAAa,eAAe,OAAO,gBAAgB;AAAA,IAClD,SAAS;AAAA,MACR,IAAI;AAAA,MACJ,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAAA,EACD,CAAC;AACD,eAAa,eAAe,OAAO,gBAAgB;AAAA,IAClD,SAAS;AAAA,MACR,IAAI;AAAA,MACJ,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAAA,EACD,CAAC;AACD,eAAa,eAAe,OAAO,gBAAgB;AAAA,IAClD,SAAS;AAAA,MACR,IAAI;AAAA,MACJ,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAAA,IACA,MAAM;AAAA,EACP,CAAC;AACF;AAhZgB;AAkbT,IAAM,2BAAN,cAAuC,aAAa;AAAA,EAC1D,YACqC,kBACG,qBACtC;AACD,UAAM;AAH8B;AACG;AAAA,EAGxC;AAAA,EA/jBD,OAyjB2D;AAAA;AAAA;AAAA,EAQ1D,MAAyB,UACxB,QACA,SACgB;AAChB,SAAK,iBAAiB,WAGpB,2BAA2B,EAAE,IAAI,OAAO,IAAI,MAAM,UAAU,CAAC;AAE/D,QAAI,uBAAuB,OAAO,GAAG;AAGpC,WAAK,iBAAiB,WAGpB,+BAA+B;AAAA,QAChC,IAAI,KAAK,QAAQ,QAAQ,SAAS,SAAS,CAAC,EAAE,SAAS;AAAA,QACvD,aAAa,OAAO;AAAA,QACpB,QAAQ,QAAQ,YAAY;AAAA,QAC5B,QAAQ,QAAQ,aAAa,qBAAqB;AAAA,MACnD,CAAC;AAAA,IACF;AAGA,QAAI;AACH,YAAM,MAAM,UAAU,QAAQ,OAAO;AAAA,IACtC,SAAS,OAAO;AACf,WAAK,oBAAoB,MAAM,KAAK;AAAA,IACrC;AAAA,EACD;AACD;AAtCa,2BAAN;AAAA,EAEJ;AAAA,EACA;AAAA,GAHU;",
  "names": []
}
