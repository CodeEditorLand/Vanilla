{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry, KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { INotificationViewItem, isNotificationViewItem, NotificationsModel } from '../../../common/notifications.js';\nimport { MenuRegistry, MenuId } from '../../../../platform/actions/common/actions.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IListService, WorkbenchList } from '../../../../platform/list/browser/listService.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { NotificationMetrics, NotificationMetricsClassification, notificationToMetrics } from './notificationsTelemetry.js';\nimport { NotificationFocusedContext, NotificationsCenterVisibleContext, NotificationsToastsVisibleContext } from '../../../common/contextkeys.js';\nimport { INotificationService, INotificationSourceFilter, NotificationPriority, NotificationsFilter } from '../../../../platform/notification/common/notification.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ActionRunner, IAction, WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification } from '../../../../base/common/actions.js';\nimport { hash } from '../../../../base/common/hash.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\n\n// Center\nexport const SHOW_NOTIFICATIONS_CENTER = 'notifications.showList';\nexport const HIDE_NOTIFICATIONS_CENTER = 'notifications.hideList';\nconst TOGGLE_NOTIFICATIONS_CENTER = 'notifications.toggleList';\n\n// Toasts\nexport const HIDE_NOTIFICATION_TOAST = 'notifications.hideToasts';\nconst FOCUS_NOTIFICATION_TOAST = 'notifications.focusToasts';\nconst FOCUS_NEXT_NOTIFICATION_TOAST = 'notifications.focusNextToast';\nconst FOCUS_PREVIOUS_NOTIFICATION_TOAST = 'notifications.focusPreviousToast';\nconst FOCUS_FIRST_NOTIFICATION_TOAST = 'notifications.focusFirstToast';\nconst FOCUS_LAST_NOTIFICATION_TOAST = 'notifications.focusLastToast';\n\n// Notification\nexport const COLLAPSE_NOTIFICATION = 'notification.collapse';\nexport const EXPAND_NOTIFICATION = 'notification.expand';\nexport const ACCEPT_PRIMARY_ACTION_NOTIFICATION = 'notification.acceptPrimaryAction';\nconst TOGGLE_NOTIFICATION = 'notification.toggle';\nexport const CLEAR_NOTIFICATION = 'notification.clear';\nexport const CLEAR_ALL_NOTIFICATIONS = 'notifications.clearAll';\nexport const TOGGLE_DO_NOT_DISTURB_MODE = 'notifications.toggleDoNotDisturbMode';\nexport const TOGGLE_DO_NOT_DISTURB_MODE_BY_SOURCE = 'notifications.toggleDoNotDisturbModeBySource';\n\nexport interface INotificationsCenterController {\n\treadonly isVisible: boolean;\n\n\tshow(): void;\n\thide(): void;\n\n\tclearAll(): void;\n}\n\nexport interface INotificationsToastController {\n\tfocus(): void;\n\tfocusNext(): void;\n\tfocusPrevious(): void;\n\tfocusFirst(): void;\n\tfocusLast(): void;\n\n\thide(): void;\n}\n\nexport function getNotificationFromContext(listService: IListService, context?: unknown): INotificationViewItem | undefined {\n\tif (isNotificationViewItem(context)) {\n\t\treturn context;\n\t}\n\n\tconst list = listService.lastFocusedList;\n\tif (list instanceof WorkbenchList) {\n\t\tlet element = list.getFocusedElements()[0];\n\t\tif (!isNotificationViewItem(element)) {\n\t\t\tif (list.isDOMFocused()) {\n\t\t\t\t// the notification list might have received focus\n\t\t\t\t// via keyboard and might not have a focused element.\n\t\t\t\t// in that case just return the first element\n\t\t\t\t// https://github.com/microsoft/vscode/issues/191705\n\t\t\t\telement = list.element(0);\n\t\t\t}\n\t\t}\n\n\t\tif (isNotificationViewItem(element)) {\n\t\t\treturn element;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function registerNotificationCommands(center: INotificationsCenterController, toasts: INotificationsToastController, model: NotificationsModel): void {\n\n\t// Show Notifications Cneter\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: SHOW_NOTIFICATIONS_CENTER,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyN),\n\t\thandler: () => {\n\t\t\ttoasts.hide();\n\t\t\tcenter.show();\n\t\t}\n\t});\n\n\t// Hide Notifications Center\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: HIDE_NOTIFICATIONS_CENTER,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\t\twhen: NotificationsCenterVisibleContext,\n\t\tprimary: KeyCode.Escape,\n\t\thandler: accessor => {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tfor (const notification of model.notifications) {\n\t\t\t\tif (notification.visible) {\n\t\t\t\t\ttelemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:hide', notificationToMetrics(notification.message.original, notification.sourceId, notification.priority === NotificationPriority.SILENT));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcenter.hide();\n\t\t}\n\t});\n\n\t// Toggle Notifications Center\n\tCommandsRegistry.registerCommand(TOGGLE_NOTIFICATIONS_CENTER, () => {\n\t\tif (center.isVisible) {\n\t\t\tcenter.hide();\n\t\t} else {\n\t\t\ttoasts.hide();\n\t\t\tcenter.show();\n\t\t}\n\t});\n\n\t// Clear Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLEAR_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Delete,\n\t\tmac: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace\n\t\t},\n\t\thandler: (accessor, args?) => {\n\t\t\tconst accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tif (notification && !notification.hasProgress) {\n\t\t\t\tnotification.close();\n\t\t\t\taccessibilitySignalService.playSignal(AccessibilitySignal.clear);\n\t\t\t}\n\t\t}\n\t});\n\n\t// Expand Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: EXPAND_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.RightArrow,\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tnotification?.expand();\n\t\t}\n\t});\n\n\t// Accept Primary Action\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: ACCEPT_PRIMARY_ACTION_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.or(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA,\n\t\thandler: (accessor) => {\n\t\t\tconst actionRunner = accessor.get(IInstantiationService).createInstance(NotificationActionRunner);\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService)) || model.notifications.at(0);\n\t\t\tif (!notification) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst primaryAction = notification.actions?.primary ? notification.actions.primary.at(0) : undefined;\n\t\t\tif (!primaryAction) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tactionRunner.run(primaryAction, notification);\n\t\t\tnotification.close();\n\t\t}\n\t});\n\n\t// Collapse Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: COLLAPSE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.LeftArrow,\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tnotification?.collapse();\n\t\t}\n\t});\n\n\t// Toggle Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Space,\n\t\tsecondary: [KeyCode.Enter],\n\t\thandler: accessor => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService));\n\t\t\tnotification?.toggle();\n\t\t}\n\t});\n\n\t// Hide Toasts\n\tCommandsRegistry.registerCommand(HIDE_NOTIFICATION_TOAST, accessor => {\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tfor (const notification of model.notifications) {\n\t\t\tif (notification.visible) {\n\t\t\t\ttelemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:hide', notificationToMetrics(notification.message.original, notification.sourceId, notification.priority === NotificationPriority.SILENT));\n\t\t\t}\n\t\t}\n\t\ttoasts.hide();\n\t});\n\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib - 50, // lower when not focused (e.g. let editor suggest win over this command)\n\t\twhen: NotificationsToastsVisibleContext,\n\t\tprimary: KeyCode.Escape\n\t});\n\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 100, // higher when focused\n\t\twhen: ContextKeyExpr.and(NotificationsToastsVisibleContext, NotificationFocusedContext),\n\t\tprimary: KeyCode.Escape\n\t});\n\n\t// Focus Toasts\n\tCommandsRegistry.registerCommand(FOCUS_NOTIFICATION_TOAST, () => toasts.focus());\n\n\t// Focus Next Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_NEXT_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.DownArrow,\n\t\thandler: () => {\n\t\t\ttoasts.focusNext();\n\t\t}\n\t});\n\n\t// Focus Previous Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_PREVIOUS_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.UpArrow,\n\t\thandler: () => {\n\t\t\ttoasts.focusPrevious();\n\t\t}\n\t});\n\n\t// Focus First Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_FIRST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.PageUp,\n\t\tsecondary: [KeyCode.Home],\n\t\thandler: () => {\n\t\t\ttoasts.focusFirst();\n\t\t}\n\t});\n\n\t// Focus Last Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_LAST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.PageDown,\n\t\tsecondary: [KeyCode.End],\n\t\thandler: () => {\n\t\t\ttoasts.focusLast();\n\t\t}\n\t});\n\n\t// Clear All Notifications\n\tCommandsRegistry.registerCommand(CLEAR_ALL_NOTIFICATIONS, () => center.clearAll());\n\n\t// Toggle Do Not Disturb Mode\n\tCommandsRegistry.registerCommand(TOGGLE_DO_NOT_DISTURB_MODE, accessor => {\n\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\tnotificationService.setFilter(notificationService.getFilter() === NotificationsFilter.ERROR ? NotificationsFilter.OFF : NotificationsFilter.ERROR);\n\t});\n\n\t// Configure Do Not Disturb by Source\n\tCommandsRegistry.registerCommand(TOGGLE_DO_NOT_DISTURB_MODE_BY_SOURCE, accessor => {\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst sortedFilters = notificationService.getFilters().sort((a, b) => a.label.localeCompare(b.label));\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = disposables.add(quickInputService.createQuickPick<IQuickPickItem & INotificationSourceFilter>());\n\n\t\tpicker.items = sortedFilters.map(source => ({\n\t\t\tid: source.id,\n\t\t\tlabel: source.label,\n\t\t\ttooltip: `${source.label} (${source.id})`,\n\t\t\tfilter: source.filter\n\t\t}));\n\n\t\tpicker.canSelectMany = true;\n\t\tpicker.placeholder = localize('selectSources', \"Select sources to enable all notifications from\");\n\t\tpicker.selectedItems = picker.items.filter(item => item.filter === NotificationsFilter.OFF);\n\n\t\tpicker.show();\n\n\t\tdisposables.add(picker.onDidAccept(async () => {\n\t\t\tfor (const item of picker.items) {\n\t\t\t\tnotificationService.setFilter({\n\t\t\t\t\tid: item.id,\n\t\t\t\t\tlabel: item.label,\n\t\t\t\t\tfilter: picker.selectedItems.includes(item) ? NotificationsFilter.OFF : NotificationsFilter.ERROR\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpicker.hide();\n\t\t}));\n\n\t\tdisposables.add(picker.onDidHide(() => disposables.dispose()));\n\t});\n\n\t// Commands for Command Palette\n\tconst category = localize2('notifications', 'Notifications');\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: SHOW_NOTIFICATIONS_CENTER, title: localize2('showNotifications', 'Show Notifications'), category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: HIDE_NOTIFICATIONS_CENTER, title: localize2('hideNotifications', 'Hide Notifications'), category }, when: NotificationsCenterVisibleContext });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLEAR_ALL_NOTIFICATIONS, title: localize2('clearAllNotifications', 'Clear All Notifications'), category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: ACCEPT_PRIMARY_ACTION_NOTIFICATION, title: localize2('acceptNotificationPrimaryAction', 'Accept Notification Primary Action'), category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: TOGGLE_DO_NOT_DISTURB_MODE, title: localize2('toggleDoNotDisturbMode', 'Toggle Do Not Disturb Mode'), category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: TOGGLE_DO_NOT_DISTURB_MODE_BY_SOURCE, title: localize2('toggleDoNotDisturbModeBySource', 'Toggle Do Not Disturb Mode By Source...'), category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: FOCUS_NOTIFICATION_TOAST, title: localize2('focusNotificationToasts', 'Focus Notification Toast'), category }, when: NotificationsToastsVisibleContext });\n}\n\n\ninterface NotificationActionMetrics {\n\treadonly id: string;\n\treadonly actionLabel: string;\n\treadonly source: string;\n\treadonly silent: boolean;\n}\n\ntype NotificationActionMetricsClassification = {\n\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the action that was run from a notification.' };\n\tactionLabel: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The label of the action that was run from a notification.' };\n\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The source of the notification where an action was run.' };\n\tsilent: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the notification where an action was run is silent or not.' };\n\towner: 'bpasero';\n\tcomment: 'Tracks when actions are fired from notifcations and how they were fired.';\n};\n\nexport class NotificationActionRunner extends ActionRunner {\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected override async runAction(action: IAction, context: unknown): Promise<void> {\n\t\tthis.telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: action.id, from: 'message' });\n\n\t\tif (isNotificationViewItem(context)) {\n\t\t\t// Log some additional telemetry specifically for actions\n\t\t\t// that are triggered from within notifications.\n\t\t\tthis.telemetryService.publicLog2<NotificationActionMetrics, NotificationActionMetricsClassification>('notification:actionExecuted', {\n\t\t\t\tid: hash(context.message.original.toString()).toString(),\n\t\t\t\tactionLabel: action.label,\n\t\t\t\tsource: context.sourceId || 'core',\n\t\t\t\tsilent: context.priority === NotificationPriority.SILENT\n\t\t\t});\n\t\t}\n\n\t\t// Run and make sure to notify on any error again\n\t\ttry {\n\t\t\tawait super.runAction(action, context);\n\t\t} catch (error) {\n\t\t\tthis.notificationService.error(error);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB,wBAAwB;AACtD,SAAS,UAAU,SAAS,cAAc;AAC1C,SAAS,uBAAuB,wBAAwB,0BAA0B;AAClF,SAAS,cAAc,cAAc;AACrC,SAAS,UAAU,iBAAiB;AACpC,SAAS,cAAc,qBAAqB;AAC5C,SAAS,yBAAyB;AAClC,SAAS,qBAAqB,mCAAmC,6BAA6B;AAC9F,SAAS,4BAA4B,mCAAmC,yCAAyC;AACjH,SAAS,sBAAsB,2BAA2B,sBAAsB,2BAA2B;AAC3G,SAAS,6BAA6B;AACtC,SAAS,cAAc,SAAS,8BAA8B,6CAA6C;AAC3G,SAAS,YAAY;AACrB,SAAS,oBAAoB,sBAAsB;AACnD,SAAS,uBAAuB;AAChC,SAAS,qBAAqB,mCAAmC;AAG1D,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AACzC,MAAM,8BAA8B;AAG7B,MAAM,0BAA0B;AACvC,MAAM,2BAA2B;AACjC,MAAM,gCAAgC;AACtC,MAAM,oCAAoC;AAC1C,MAAM,iCAAiC;AACvC,MAAM,gCAAgC;AAG/B,MAAM,wBAAwB;AAC9B,MAAM,sBAAsB;AAC5B,MAAM,qCAAqC;AAClD,MAAM,sBAAsB;AACrB,MAAM,qBAAqB;AAC3B,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,uCAAuC;AAqB7C,SAAS,2BAA2B,aAA2B,SAAsD;AAC3H,MAAI,uBAAuB,OAAO,GAAG;AACpC,WAAO;AAAA,EACR;AAEA,QAAM,OAAO,YAAY;AACzB,MAAI,gBAAgB,eAAe;AAClC,QAAI,UAAU,KAAK,mBAAmB,EAAE,CAAC;AACzC,QAAI,CAAC,uBAAuB,OAAO,GAAG;AACrC,UAAI,KAAK,aAAa,GAAG;AAKxB,kBAAU,KAAK,QAAQ,CAAC;AAAA,MACzB;AAAA,IACD;AAEA,QAAI,uBAAuB,OAAO,GAAG;AACpC,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAxBgB;AA0BT,SAAS,6BAA6B,QAAwC,QAAuC,OAAiC;AAG5J,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,SAAS,SAAS,OAAO,UAAU,QAAQ,MAAM,OAAO,UAAU,OAAO,QAAQ,QAAQ,IAAI;AAAA,IAC7F,SAAS,6BAAM;AACd,aAAO,KAAK;AACZ,aAAO,KAAK;AAAA,IACb,GAHS;AAAA,EAIV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB,mBAAmB;AAAA,IAC5C,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,SAAS,qCAAY;AACpB,YAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,iBAAW,gBAAgB,MAAM,eAAe;AAC/C,YAAI,aAAa,SAAS;AACzB,2BAAiB,WAAmE,qBAAqB,sBAAsB,aAAa,QAAQ,UAAU,aAAa,UAAU,aAAa,aAAa,qBAAqB,MAAM,CAAC;AAAA,QAC5O;AAAA,MACD;AAEA,aAAO,KAAK;AAAA,IACb,GATS;AAAA,EAUV,CAAC;AAGD,mBAAiB,gBAAgB,6BAA6B,MAAM;AACnE,QAAI,OAAO,WAAW;AACrB,aAAO,KAAK;AAAA,IACb,OAAO;AACN,aAAO,KAAK;AACZ,aAAO,KAAK;AAAA,IACb;AAAA,EACD,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,KAAK;AAAA,MACJ,SAAS,OAAO,UAAU,QAAQ;AAAA,IACnC;AAAA,IACA,SAAS,wBAAC,UAAU,SAAU;AAC7B,YAAM,6BAA6B,SAAS,IAAI,2BAA2B;AAC3E,YAAM,eAAe,2BAA2B,SAAS,IAAI,YAAY,GAAG,IAAI;AAChF,UAAI,gBAAgB,CAAC,aAAa,aAAa;AAC9C,qBAAa,MAAM;AACnB,mCAA2B,WAAW,oBAAoB,KAAK;AAAA,MAChE;AAAA,IACD,GAPS;AAAA,EAQV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,SAAS,wBAAC,UAAU,SAAU;AAC7B,YAAM,eAAe,2BAA2B,SAAS,IAAI,YAAY,GAAG,IAAI;AAChF,oBAAc,OAAO;AAAA,IACtB,GAHS;AAAA,EAIV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe,GAAG,4BAA4B,iCAAiC;AAAA,IACrF,SAAS,OAAO,UAAU,OAAO,QAAQ,QAAQ;AAAA,IACjD,SAAS,wBAAC,aAAa;AACtB,YAAM,eAAe,SAAS,IAAI,qBAAqB,EAAE,eAAe,wBAAwB;AAChG,YAAM,eAAe,2BAA2B,SAAS,IAAI,YAAY,CAAC,KAAK,MAAM,cAAc,GAAG,CAAC;AACvG,UAAI,CAAC,cAAc;AAClB;AAAA,MACD;AACA,YAAM,gBAAgB,aAAa,SAAS,UAAU,aAAa,QAAQ,QAAQ,GAAG,CAAC,IAAI;AAC3F,UAAI,CAAC,eAAe;AACnB;AAAA,MACD;AACA,mBAAa,IAAI,eAAe,YAAY;AAC5C,mBAAa,MAAM;AAAA,IACpB,GAZS;AAAA,EAaV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,SAAS,wBAAC,UAAU,SAAU;AAC7B,YAAM,eAAe,2BAA2B,SAAS,IAAI,YAAY,GAAG,IAAI;AAChF,oBAAc,SAAS;AAAA,IACxB,GAHS;AAAA,EAIV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,IACjB,WAAW,CAAC,QAAQ,KAAK;AAAA,IACzB,SAAS,qCAAY;AACpB,YAAM,eAAe,2BAA2B,SAAS,IAAI,YAAY,CAAC;AAC1E,oBAAc,OAAO;AAAA,IACtB,GAHS;AAAA,EAIV,CAAC;AAGD,mBAAiB,gBAAgB,yBAAyB,cAAY;AACrE,UAAM,mBAAmB,SAAS,IAAI,iBAAiB;AACvD,eAAW,gBAAgB,MAAM,eAAe;AAC/C,UAAI,aAAa,SAAS;AACzB,yBAAiB,WAAmE,qBAAqB,sBAAsB,aAAa,QAAQ,UAAU,aAAa,UAAU,aAAa,aAAa,qBAAqB,MAAM,CAAC;AAAA,MAC5O;AAAA,IACD;AACA,WAAO,KAAK;AAAA,EACb,CAAC;AAED,sBAAoB,uBAAuB;AAAA,IAC1C,IAAI;AAAA,IACJ,QAAQ,iBAAiB,mBAAmB;AAAA;AAAA,IAC5C,MAAM;AAAA,IACN,SAAS,QAAQ;AAAA,EAClB,CAAC;AAED,sBAAoB,uBAAuB;AAAA,IAC1C,IAAI;AAAA,IACJ,QAAQ,iBAAiB,mBAAmB;AAAA;AAAA,IAC5C,MAAM,eAAe,IAAI,mCAAmC,0BAA0B;AAAA,IACtF,SAAS,QAAQ;AAAA,EAClB,CAAC;AAGD,mBAAiB,gBAAgB,0BAA0B,MAAM,OAAO,MAAM,CAAC;AAG/E,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe,IAAI,4BAA4B,iCAAiC;AAAA,IACtF,SAAS,QAAQ;AAAA,IACjB,SAAS,6BAAM;AACd,aAAO,UAAU;AAAA,IAClB,GAFS;AAAA,EAGV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe,IAAI,4BAA4B,iCAAiC;AAAA,IACtF,SAAS,QAAQ;AAAA,IACjB,SAAS,6BAAM;AACd,aAAO,cAAc;AAAA,IACtB,GAFS;AAAA,EAGV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe,IAAI,4BAA4B,iCAAiC;AAAA,IACtF,SAAS,QAAQ;AAAA,IACjB,WAAW,CAAC,QAAQ,IAAI;AAAA,IACxB,SAAS,6BAAM;AACd,aAAO,WAAW;AAAA,IACnB,GAFS;AAAA,EAGV,CAAC;AAGD,sBAAoB,iCAAiC;AAAA,IACpD,IAAI;AAAA,IACJ,QAAQ,iBAAiB;AAAA,IACzB,MAAM,eAAe,IAAI,4BAA4B,iCAAiC;AAAA,IACtF,SAAS,QAAQ;AAAA,IACjB,WAAW,CAAC,QAAQ,GAAG;AAAA,IACvB,SAAS,6BAAM;AACd,aAAO,UAAU;AAAA,IAClB,GAFS;AAAA,EAGV,CAAC;AAGD,mBAAiB,gBAAgB,yBAAyB,MAAM,OAAO,SAAS,CAAC;AAGjF,mBAAiB,gBAAgB,4BAA4B,cAAY;AACxE,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,wBAAoB,UAAU,oBAAoB,UAAU,MAAM,oBAAoB,QAAQ,oBAAoB,MAAM,oBAAoB,KAAK;AAAA,EAClJ,CAAC;AAGD,mBAAiB,gBAAgB,sCAAsC,cAAY;AAClF,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAC7D,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,UAAM,gBAAgB,oBAAoB,WAAW,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,cAAc,EAAE,KAAK,CAAC;AAEpG,UAAM,cAAc,IAAI,gBAAgB;AACxC,UAAM,SAAS,YAAY,IAAI,kBAAkB,gBAA4D,CAAC;AAE9G,WAAO,QAAQ,cAAc,IAAI,aAAW;AAAA,MAC3C,IAAI,OAAO;AAAA,MACX,OAAO,OAAO;AAAA,MACd,SAAS,GAAG,OAAO,KAAK,KAAK,OAAO,EAAE;AAAA,MACtC,QAAQ,OAAO;AAAA,IAChB,EAAE;AAEF,WAAO,gBAAgB;AACvB,WAAO,cAAc,SAAS,iBAAiB,iDAAiD;AAChG,WAAO,gBAAgB,OAAO,MAAM,OAAO,UAAQ,KAAK,WAAW,oBAAoB,GAAG;AAE1F,WAAO,KAAK;AAEZ,gBAAY,IAAI,OAAO,YAAY,YAAY;AAC9C,iBAAW,QAAQ,OAAO,OAAO;AAChC,4BAAoB,UAAU;AAAA,UAC7B,IAAI,KAAK;AAAA,UACT,OAAO,KAAK;AAAA,UACZ,QAAQ,OAAO,cAAc,SAAS,IAAI,IAAI,oBAAoB,MAAM,oBAAoB;AAAA,QAC7F,CAAC;AAAA,MACF;AAEA,aAAO,KAAK;AAAA,IACb,CAAC,CAAC;AAEF,gBAAY,IAAI,OAAO,UAAU,MAAM,YAAY,QAAQ,CAAC,CAAC;AAAA,EAC9D,CAAC;AAGD,QAAM,WAAW,UAAU,iBAAiB,eAAe;AAC3D,eAAa,eAAe,OAAO,gBAAgB,EAAE,SAAS,EAAE,IAAI,2BAA2B,OAAO,UAAU,qBAAqB,oBAAoB,GAAG,SAAS,EAAE,CAAC;AACxK,eAAa,eAAe,OAAO,gBAAgB,EAAE,SAAS,EAAE,IAAI,2BAA2B,OAAO,UAAU,qBAAqB,oBAAoB,GAAG,SAAS,GAAG,MAAM,kCAAkC,CAAC;AACjN,eAAa,eAAe,OAAO,gBAAgB,EAAE,SAAS,EAAE,IAAI,yBAAyB,OAAO,UAAU,yBAAyB,yBAAyB,GAAG,SAAS,EAAE,CAAC;AAC/K,eAAa,eAAe,OAAO,gBAAgB,EAAE,SAAS,EAAE,IAAI,oCAAoC,OAAO,UAAU,mCAAmC,oCAAoC,GAAG,SAAS,EAAE,CAAC;AAC/M,eAAa,eAAe,OAAO,gBAAgB,EAAE,SAAS,EAAE,IAAI,4BAA4B,OAAO,UAAU,0BAA0B,4BAA4B,GAAG,SAAS,EAAE,CAAC;AACtL,eAAa,eAAe,OAAO,gBAAgB,EAAE,SAAS,EAAE,IAAI,sCAAsC,OAAO,UAAU,kCAAkC,yCAAyC,GAAG,SAAS,EAAE,CAAC;AACrN,eAAa,eAAe,OAAO,gBAAgB,EAAE,SAAS,EAAE,IAAI,0BAA0B,OAAO,UAAU,2BAA2B,0BAA0B,GAAG,SAAS,GAAG,MAAM,kCAAkC,CAAC;AAC7N;AAzPgB;AA4QT,IAAM,2BAAN,cAAuC,aAAa;AAAA,EAE1D,YACqC,kBACG,qBACtC;AACD,UAAM;AAH8B;AACG;AAAA,EAGxC;AAAA,EA/WD,OAwW2D;AAAA;AAAA;AAAA,EAS1D,MAAyB,UAAU,QAAiB,SAAiC;AACpF,SAAK,iBAAiB,WAAgF,2BAA2B,EAAE,IAAI,OAAO,IAAI,MAAM,UAAU,CAAC;AAEnK,QAAI,uBAAuB,OAAO,GAAG;AAGpC,WAAK,iBAAiB,WAA+E,+BAA+B;AAAA,QACnI,IAAI,KAAK,QAAQ,QAAQ,SAAS,SAAS,CAAC,EAAE,SAAS;AAAA,QACvD,aAAa,OAAO;AAAA,QACpB,QAAQ,QAAQ,YAAY;AAAA,QAC5B,QAAQ,QAAQ,aAAa,qBAAqB;AAAA,MACnD,CAAC;AAAA,IACF;AAGA,QAAI;AACH,YAAM,MAAM,UAAU,QAAQ,OAAO;AAAA,IACtC,SAAS,OAAO;AACf,WAAK,oBAAoB,MAAM,KAAK;AAAA,IACrC;AAAA,EACD;AACD;AA9Ba,2BAAN;AAAA,EAGJ;AAAA,EACA;AAAA,GAJU;",
  "names": []
}
