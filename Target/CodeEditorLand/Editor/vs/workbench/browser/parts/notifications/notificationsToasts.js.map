{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/notifications/notificationsToasts.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/notificationsToasts.css\";\nimport {\n\tDimension,\n\tEventType,\n\taddDisposableListener,\n\tgetWindow,\n\tisAncestorOfActiveElement,\n\tscheduleAtNextAnimationFrame,\n} from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { IntervalCounter } from \"../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ScrollbarVisibility } from \"../../../../base/common/scrollable.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tNotificationPriority,\n\tNotificationsFilter,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { widgetShadow } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport {\n\tIThemeService,\n\tThemable,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport { NotificationsToastsVisibleContext } from \"../../../common/contextkeys.js\";\nimport {\n\ttype INotificationChangeEvent,\n\ttype INotificationViewItem,\n\ttype INotificationsModel,\n\tNotificationChangeType,\n\tNotificationViewItemContentChangeKind,\n} from \"../../../common/notifications.js\";\nimport {\n\tNOTIFICATIONS_BACKGROUND,\n\tNOTIFICATIONS_TOAST_BORDER,\n} from \"../../../common/theme.js\";\nimport { IEditorGroupsService } from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport {\n\tIWorkbenchLayoutService,\n\tParts,\n} from \"../../../services/layout/browser/layoutService.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../../services/lifecycle/common/lifecycle.js\";\nimport type { INotificationsToastController } from \"./notificationsCommands.js\";\nimport { NotificationsList } from \"./notificationsList.js\";\n\ninterface INotificationToast {\n\treadonly item: INotificationViewItem;\n\treadonly list: NotificationsList;\n\treadonly container: HTMLElement;\n\treadonly toast: HTMLElement;\n}\n\nenum ToastVisibility {\n\tHIDDEN_OR_VISIBLE = 0,\n\tHIDDEN = 1,\n\tVISIBLE = 2,\n}\n\nexport class NotificationsToasts\n\textends Themable\n\timplements INotificationsToastController\n{\n\tprivate static readonly MAX_WIDTH = 450;\n\tprivate static readonly MAX_NOTIFICATIONS = 3;\n\n\tprivate static readonly PURGE_TIMEOUT: { [severity: number]: number } = {\n\t\t[Severity.Info]: 15000,\n\t\t[Severity.Warning]: 18000,\n\t\t[Severity.Error]: 20000,\n\t};\n\n\tprivate static readonly SPAM_PROTECTION = {\n\t\t// Count for the number of notifications over 800ms...\n\t\tinterval: 800,\n\t\t// ...and ensure we are not showing more than MAX_NOTIFICATIONS\n\t\tlimit: this.MAX_NOTIFICATIONS,\n\t};\n\n\tprivate readonly _onDidChangeVisibility = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate _isVisible = false;\n\tget isVisible(): boolean {\n\t\treturn !!this._isVisible;\n\t}\n\n\tprivate notificationsToastsContainer: HTMLElement | undefined;\n\tprivate workbenchDimensions: Dimension | undefined;\n\tprivate isNotificationsCenterVisible: boolean | undefined;\n\n\tprivate readonly mapNotificationToToast = new Map<\n\t\tINotificationViewItem,\n\t\tINotificationToast\n\t>();\n\tprivate readonly mapNotificationToDisposable = new Map<\n\t\tINotificationViewItem,\n\t\tIDisposable\n\t>();\n\n\tprivate readonly notificationsToastsVisibleContextKey =\n\t\tNotificationsToastsVisibleContext.bindTo(this.contextKeyService);\n\n\tprivate readonly addedToastsIntervalCounter = new IntervalCounter(\n\t\tNotificationsToasts.SPAM_PROTECTION.interval,\n\t);\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Layout\n\t\tthis._register(\n\t\t\tthis.layoutService.onDidLayoutMainContainer((dimension) =>\n\t\t\t\tthis.layout(Dimension.lift(dimension)),\n\t\t\t),\n\t\t);\n\n\t\t// Delay some tasks until after we have restored\n\t\t// to reduce UI pressure from the startup phase\n\t\tthis.lifecycleService.when(LifecyclePhase.Restored).then(() => {\n\t\t\t// Show toast for initial notifications if any\n\t\t\tthis.model.notifications.forEach((notification) =>\n\t\t\t\tthis.addToast(notification),\n\t\t\t);\n\n\t\t\t// Update toasts on notification changes\n\t\t\tthis._register(\n\t\t\t\tthis.model.onDidChangeNotification((e) =>\n\t\t\t\t\tthis.onDidChangeNotification(e),\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\n\t\t// Filter\n\t\tthis._register(\n\t\t\tthis.model.onDidChangeFilter(({ global, sources }) => {\n\t\t\t\tif (global === NotificationsFilter.ERROR) {\n\t\t\t\t\tthis.hide();\n\t\t\t\t} else if (sources) {\n\t\t\t\t\tfor (const [notification] of this.mapNotificationToToast) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof notification.sourceId === \"string\" &&\n\t\t\t\t\t\t\tsources.get(notification.sourceId) ===\n\t\t\t\t\t\t\t\tNotificationsFilter.ERROR &&\n\t\t\t\t\t\t\tnotification.severity !== Severity.Error &&\n\t\t\t\t\t\t\tnotification.priority !==\n\t\t\t\t\t\t\t\tNotificationPriority.URGENT\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.removeToast(notification);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\t\tswitch (e.kind) {\n\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\treturn this.addToast(e.item);\n\t\t\tcase NotificationChangeType.REMOVE:\n\t\t\t\treturn this.removeToast(e.item);\n\t\t}\n\t}\n\n\tprivate addToast(item: INotificationViewItem): void {\n\t\tif (this.isNotificationsCenterVisible) {\n\t\t\treturn; // do not show toasts while notification center is visible\n\t\t}\n\n\t\tif (item.priority === NotificationPriority.SILENT) {\n\t\t\treturn; // do not show toasts for silenced notifications\n\t\t}\n\n\t\t// Optimization: it is possible that a lot of notifications are being\n\t\t// added in a very short time. To prevent this kind of spam, we protect\n\t\t// against showing too many notifications at once. Since they can always\n\t\t// be accessed from the notification center, a user can always get to\n\t\t// them later on.\n\t\t// (see also https://github.com/microsoft/vscode/issues/107935)\n\t\tif (\n\t\t\tthis.addedToastsIntervalCounter.increment() >\n\t\t\tNotificationsToasts.SPAM_PROTECTION.limit\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Optimization: showing a notification toast can be expensive\n\t\t// because of the associated animation. If the renderer is busy\n\t\t// doing actual work, the animation can cause a lot of slowdown\n\t\t// As such we use `scheduleAtNextAnimationFrame` to push out\n\t\t// the toast until the renderer has time to process it.\n\t\t// (see also https://github.com/microsoft/vscode/issues/107935)\n\t\tconst itemDisposables = new DisposableStore();\n\t\tthis.mapNotificationToDisposable.set(item, itemDisposables);\n\t\titemDisposables.add(\n\t\t\tscheduleAtNextAnimationFrame(getWindow(this.container), () =>\n\t\t\t\tthis.doAddToast(item, itemDisposables),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate doAddToast(\n\t\titem: INotificationViewItem,\n\t\titemDisposables: DisposableStore,\n\t): void {\n\t\t// Lazily create toasts containers\n\t\tlet notificationsToastsContainer = this.notificationsToastsContainer;\n\t\tif (!notificationsToastsContainer) {\n\t\t\tnotificationsToastsContainer = this.notificationsToastsContainer =\n\t\t\t\tdocument.createElement(\"div\");\n\t\t\tnotificationsToastsContainer.classList.add(\"notifications-toasts\");\n\n\t\t\tthis.container.appendChild(notificationsToastsContainer);\n\t\t}\n\n\t\t// Make Visible\n\t\tnotificationsToastsContainer.classList.add(\"visible\");\n\n\t\t// Container\n\t\tconst notificationToastContainer = document.createElement(\"div\");\n\t\tnotificationToastContainer.classList.add(\n\t\t\t\"notification-toast-container\",\n\t\t);\n\n\t\tconst firstToast = notificationsToastsContainer.firstChild;\n\t\tif (firstToast) {\n\t\t\tnotificationsToastsContainer.insertBefore(\n\t\t\t\tnotificationToastContainer,\n\t\t\t\tfirstToast,\n\t\t\t); // always first\n\t\t} else {\n\t\t\tnotificationsToastsContainer.appendChild(\n\t\t\t\tnotificationToastContainer,\n\t\t\t);\n\t\t}\n\n\t\t// Toast\n\t\tconst notificationToast = document.createElement(\"div\");\n\t\tnotificationToast.classList.add(\"notification-toast\");\n\t\tnotificationToastContainer.appendChild(notificationToast);\n\n\t\t// Create toast with item and show\n\t\tconst notificationList = this.instantiationService.createInstance(\n\t\t\tNotificationsList,\n\t\t\tnotificationToast,\n\t\t\t{\n\t\t\t\tverticalScrollMode: ScrollbarVisibility.Hidden,\n\t\t\t\twidgetAriaLabel: (() => {\n\t\t\t\t\tif (!item.source) {\n\t\t\t\t\t\treturn localize(\n\t\t\t\t\t\t\t\"notificationAriaLabel\",\n\t\t\t\t\t\t\t\"{0}, notification\",\n\t\t\t\t\t\t\titem.message.raw,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn localize(\n\t\t\t\t\t\t\"notificationWithSourceAriaLabel\",\n\t\t\t\t\t\t\"{0}, source: {1}, notification\",\n\t\t\t\t\t\titem.message.raw,\n\t\t\t\t\t\titem.source,\n\t\t\t\t\t);\n\t\t\t\t})(),\n\t\t\t},\n\t\t);\n\t\titemDisposables.add(notificationList);\n\n\t\tconst toast: INotificationToast = {\n\t\t\titem,\n\t\t\tlist: notificationList,\n\t\t\tcontainer: notificationToastContainer,\n\t\t\ttoast: notificationToast,\n\t\t};\n\t\tthis.mapNotificationToToast.set(item, toast);\n\n\t\t// When disposed, remove as visible\n\t\titemDisposables.add(\n\t\t\ttoDisposable(() => this.updateToastVisibility(toast, false)),\n\t\t);\n\n\t\t// Make visible\n\t\tnotificationList.show();\n\n\t\t// Layout lists\n\t\tconst maxDimensions = this.computeMaxDimensions();\n\t\tthis.layoutLists(maxDimensions.width);\n\n\t\t// Show notification\n\t\tnotificationList.updateNotificationsList(0, 0, [item]);\n\n\t\t// Layout container: only after we show the notification to ensure that\n\t\t// the height computation takes the content of it into account!\n\t\tthis.layoutContainer(maxDimensions.height);\n\n\t\t// Re-draw entire item when expansion changes to reveal or hide details\n\t\titemDisposables.add(\n\t\t\titem.onDidChangeExpansion(() => {\n\t\t\t\tnotificationList.updateNotificationsList(0, 1, [item]);\n\t\t\t}),\n\t\t);\n\n\t\t// Handle content changes\n\t\t// - actions: re-draw to properly show them\n\t\t// - message: update notification height unless collapsed\n\t\titemDisposables.add(\n\t\t\titem.onDidChangeContent((e) => {\n\t\t\t\tswitch (e.kind) {\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.ACTIONS:\n\t\t\t\t\t\tnotificationList.updateNotificationsList(0, 1, [item]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.MESSAGE:\n\t\t\t\t\t\tif (item.expanded) {\n\t\t\t\t\t\t\tnotificationList.updateNotificationHeight(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Remove when item gets closed\n\t\tEvent.once(item.onDidClose)(() => {\n\t\t\tthis.removeToast(item);\n\t\t});\n\n\t\t// Automatically purge non-sticky notifications\n\t\tthis.purgeNotification(\n\t\t\titem,\n\t\t\tnotificationToastContainer,\n\t\t\tnotificationList,\n\t\t\titemDisposables,\n\t\t);\n\n\t\t// Theming\n\t\tthis.updateStyles();\n\n\t\t// Context Key\n\t\tthis.notificationsToastsVisibleContextKey.set(true);\n\n\t\t// Animate in\n\t\tnotificationToast.classList.add(\"notification-fade-in\");\n\t\titemDisposables.add(\n\t\t\taddDisposableListener(notificationToast, \"transitionend\", () => {\n\t\t\t\tnotificationToast.classList.remove(\"notification-fade-in\");\n\t\t\t\tnotificationToast.classList.add(\"notification-fade-in-done\");\n\t\t\t}),\n\t\t);\n\n\t\t// Mark as visible\n\t\titem.updateVisibility(true);\n\n\t\t// Events\n\t\tif (!this._isVisible) {\n\t\t\tthis._isVisible = true;\n\t\t\tthis._onDidChangeVisibility.fire();\n\t\t}\n\t}\n\n\tprivate purgeNotification(\n\t\titem: INotificationViewItem,\n\t\tnotificationToastContainer: HTMLElement,\n\t\tnotificationList: NotificationsList,\n\t\tdisposables: DisposableStore,\n\t): void {\n\t\t// Track mouse over item\n\t\tlet isMouseOverToast = false;\n\t\tdisposables.add(\n\t\t\taddDisposableListener(\n\t\t\t\tnotificationToastContainer,\n\t\t\t\tEventType.MOUSE_OVER,\n\t\t\t\t() => (isMouseOverToast = true),\n\t\t\t),\n\t\t);\n\t\tdisposables.add(\n\t\t\taddDisposableListener(\n\t\t\t\tnotificationToastContainer,\n\t\t\t\tEventType.MOUSE_OUT,\n\t\t\t\t() => (isMouseOverToast = false),\n\t\t\t),\n\t\t);\n\n\t\t// Install Timers to Purge Notification\n\t\tlet purgeTimeoutHandle: any;\n\t\tlet listener: IDisposable;\n\n\t\tconst hideAfterTimeout = () => {\n\t\t\tpurgeTimeoutHandle = setTimeout(() => {\n\t\t\t\t// If the window does not have focus, we wait for the window to gain focus\n\t\t\t\t// again before triggering the timeout again. This prevents an issue where\n\t\t\t\t// focussing the window could immediately hide the notification because the\n\t\t\t\t// timeout was triggered again.\n\t\t\t\tif (!this.hostService.hasFocus) {\n\t\t\t\t\tif (!listener) {\n\t\t\t\t\t\tlistener = this.hostService.onDidChangeFocus(\n\t\t\t\t\t\t\t(focus) => {\n\t\t\t\t\t\t\t\tif (focus) {\n\t\t\t\t\t\t\t\t\thideAfterTimeout();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdisposables.add(listener);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Otherwise...\n\t\t\t\telse if (\n\t\t\t\t\titem.sticky || // never hide sticky notifications\n\t\t\t\t\tnotificationList.hasFocus() || // never hide notifications with focus\n\t\t\t\t\tisMouseOverToast // never hide notifications under mouse\n\t\t\t\t) {\n\t\t\t\t\thideAfterTimeout();\n\t\t\t\t} else {\n\t\t\t\t\tthis.removeToast(item);\n\t\t\t\t}\n\t\t\t}, NotificationsToasts.PURGE_TIMEOUT[item.severity]);\n\t\t};\n\n\t\thideAfterTimeout();\n\n\t\tdisposables.add(toDisposable(() => clearTimeout(purgeTimeoutHandle)));\n\t}\n\n\tprivate removeToast(item: INotificationViewItem): void {\n\t\tlet focusEditor = false;\n\n\t\t// UI\n\t\tconst notificationToast = this.mapNotificationToToast.get(item);\n\t\tif (notificationToast) {\n\t\t\tconst toastHasDOMFocus = isAncestorOfActiveElement(\n\t\t\t\tnotificationToast.container,\n\t\t\t);\n\t\t\tif (toastHasDOMFocus) {\n\t\t\t\tfocusEditor = !(this.focusNext() || this.focusPrevious()); // focus next if any, otherwise focus editor\n\t\t\t}\n\n\t\t\tthis.mapNotificationToToast.delete(item);\n\t\t}\n\n\t\t// Disposables\n\t\tconst notificationDisposables =\n\t\t\tthis.mapNotificationToDisposable.get(item);\n\t\tif (notificationDisposables) {\n\t\t\tdispose(notificationDisposables);\n\n\t\t\tthis.mapNotificationToDisposable.delete(item);\n\t\t}\n\n\t\t// Layout if we still have toasts\n\t\tif (this.mapNotificationToToast.size > 0) {\n\t\t\tthis.layout(this.workbenchDimensions);\n\t\t}\n\n\t\t// Otherwise hide if no more toasts to show\n\t\telse {\n\t\t\tthis.doHide();\n\n\t\t\t// Move focus back to editor group as needed\n\t\t\tif (focusEditor) {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeToasts(): void {\n\t\t// Toast\n\t\tthis.mapNotificationToToast.clear();\n\n\t\t// Disposables\n\t\tthis.mapNotificationToDisposable.forEach((disposable) =>\n\t\t\tdispose(disposable),\n\t\t);\n\t\tthis.mapNotificationToDisposable.clear();\n\n\t\tthis.doHide();\n\t}\n\n\tprivate doHide(): void {\n\t\tthis.notificationsToastsContainer?.classList.remove(\"visible\");\n\n\t\t// Context Key\n\t\tthis.notificationsToastsVisibleContextKey.set(false);\n\n\t\t// Events\n\t\tif (this._isVisible) {\n\t\t\tthis._isVisible = false;\n\t\t\tthis._onDidChangeVisibility.fire();\n\t\t}\n\t}\n\n\thide(): void {\n\t\tconst focusEditor = this.notificationsToastsContainer\n\t\t\t? isAncestorOfActiveElement(this.notificationsToastsContainer)\n\t\t\t: false;\n\n\t\tthis.removeToasts();\n\n\t\tif (focusEditor) {\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t}\n\t}\n\n\tfocus(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tif (toasts.length > 0) {\n\t\t\ttoasts[0].list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusNext(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tfor (let i = 0; i < toasts.length; i++) {\n\t\t\tconst toast = toasts[i];\n\t\t\tif (toast.list.hasFocus()) {\n\t\t\t\tconst nextToast = toasts[i + 1];\n\t\t\t\tif (nextToast) {\n\t\t\t\t\tnextToast.list.focusFirst();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusPrevious(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tfor (let i = 0; i < toasts.length; i++) {\n\t\t\tconst toast = toasts[i];\n\t\t\tif (toast.list.hasFocus()) {\n\t\t\t\tconst previousToast = toasts[i - 1];\n\t\t\t\tif (previousToast) {\n\t\t\t\t\tpreviousToast.list.focusFirst();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusFirst(): boolean {\n\t\tconst toast = this.getToasts(ToastVisibility.VISIBLE)[0];\n\t\tif (toast) {\n\t\t\ttoast.list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusLast(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tif (toasts.length > 0) {\n\t\t\ttoasts[toasts.length - 1].list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tupdate(isCenterVisible: boolean): void {\n\t\tif (this.isNotificationsCenterVisible !== isCenterVisible) {\n\t\t\tthis.isNotificationsCenterVisible = isCenterVisible;\n\n\t\t\t// Hide all toasts when the notificationcenter gets visible\n\t\t\tif (this.isNotificationsCenterVisible) {\n\t\t\t\tthis.removeToasts();\n\t\t\t}\n\t\t}\n\t}\n\n\toverride updateStyles(): void {\n\t\tthis.mapNotificationToToast.forEach(({ toast }) => {\n\t\t\tconst backgroundColor = this.getColor(NOTIFICATIONS_BACKGROUND);\n\t\t\ttoast.style.background = backgroundColor ? backgroundColor : \"\";\n\n\t\t\tconst widgetShadowColor = this.getColor(widgetShadow);\n\t\t\ttoast.style.boxShadow = widgetShadowColor\n\t\t\t\t? `0 0 8px 2px ${widgetShadowColor}`\n\t\t\t\t: \"\";\n\n\t\t\tconst borderColor = this.getColor(NOTIFICATIONS_TOAST_BORDER);\n\t\t\ttoast.style.border = borderColor ? `1px solid ${borderColor}` : \"\";\n\t\t});\n\t}\n\n\tprivate getToasts(state: ToastVisibility): INotificationToast[] {\n\t\tconst notificationToasts: INotificationToast[] = [];\n\n\t\tthis.mapNotificationToToast.forEach((toast) => {\n\t\t\tswitch (state) {\n\t\t\t\tcase ToastVisibility.HIDDEN_OR_VISIBLE:\n\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ToastVisibility.HIDDEN:\n\t\t\t\t\tif (!this.isToastInDOM(toast)) {\n\t\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase ToastVisibility.VISIBLE:\n\t\t\t\t\tif (this.isToastInDOM(toast)) {\n\t\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\treturn notificationToasts.reverse(); // from newest to oldest\n\t}\n\n\tlayout(dimension: Dimension | undefined): void {\n\t\tthis.workbenchDimensions = dimension;\n\n\t\tconst maxDimensions = this.computeMaxDimensions();\n\n\t\t// Hide toasts that exceed height\n\t\tif (maxDimensions.height) {\n\t\t\tthis.layoutContainer(maxDimensions.height);\n\t\t}\n\n\t\t// Layout all lists of toasts\n\t\tthis.layoutLists(maxDimensions.width);\n\t}\n\n\tprivate computeMaxDimensions(): Dimension {\n\t\tconst maxWidth = NotificationsToasts.MAX_WIDTH;\n\n\t\tlet availableWidth = maxWidth;\n\t\tlet availableHeight: number | undefined;\n\n\t\tif (this.workbenchDimensions) {\n\t\t\t// Make sure notifications are not exceding available width\n\t\t\tavailableWidth = this.workbenchDimensions.width;\n\t\t\tavailableWidth -= 2 * 8; // adjust for paddings left and right\n\n\t\t\t// Make sure notifications are not exceeding available height\n\t\t\tavailableHeight = this.workbenchDimensions.height;\n\t\t\tif (\n\t\t\t\tthis.layoutService.isVisible(Parts.STATUSBAR_PART, mainWindow)\n\t\t\t) {\n\t\t\t\tavailableHeight -= 22; // adjust for status bar\n\t\t\t}\n\n\t\t\tif (this.layoutService.isVisible(Parts.TITLEBAR_PART, mainWindow)) {\n\t\t\t\tavailableHeight -= 22; // adjust for title bar\n\t\t\t}\n\n\t\t\tavailableHeight -= 2 * 12; // adjust for paddings top and bottom\n\t\t}\n\n\t\tavailableHeight =\n\t\t\ttypeof availableHeight === \"number\"\n\t\t\t\t? Math.round(availableHeight * 0.618) // try to not cover the full height for stacked toasts\n\t\t\t\t: 0;\n\n\t\treturn new Dimension(\n\t\t\tMath.min(maxWidth, availableWidth),\n\t\t\tavailableHeight,\n\t\t);\n\t}\n\n\tprivate layoutLists(width: number): void {\n\t\tthis.mapNotificationToToast.forEach(({ list }) => list.layout(width));\n\t}\n\n\tprivate layoutContainer(heightToGive: number): void {\n\t\tlet visibleToasts = 0;\n\t\tfor (const toast of this.getToasts(ToastVisibility.HIDDEN_OR_VISIBLE)) {\n\t\t\t// In order to measure the client height, the element cannot have display: none\n\t\t\ttoast.container.style.opacity = \"0\";\n\t\t\tthis.updateToastVisibility(toast, true);\n\n\t\t\theightToGive -= toast.container.offsetHeight;\n\n\t\t\tlet makeVisible = false;\n\t\t\tif (visibleToasts === NotificationsToasts.MAX_NOTIFICATIONS) {\n\t\t\t\tmakeVisible = false; // never show more than MAX_NOTIFICATIONS\n\t\t\t} else if (heightToGive >= 0) {\n\t\t\t\tmakeVisible = true; // hide toast if available height is too little\n\t\t\t}\n\n\t\t\t// Hide or show toast based on context\n\t\t\tthis.updateToastVisibility(toast, makeVisible);\n\t\t\ttoast.container.style.opacity = \"\";\n\n\t\t\tif (makeVisible) {\n\t\t\t\tvisibleToasts++;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateToastVisibility(\n\t\ttoast: INotificationToast,\n\t\tvisible: boolean,\n\t): void {\n\t\tif (this.isToastInDOM(toast) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update visibility in DOM\n\t\tconst notificationsToastsContainer = assertIsDefined(\n\t\t\tthis.notificationsToastsContainer,\n\t\t);\n\t\tif (visible) {\n\t\t\tnotificationsToastsContainer.appendChild(toast.container);\n\t\t} else {\n\t\t\ttoast.container.remove();\n\t\t}\n\n\t\t// Update visibility in model\n\t\ttoast.item.updateVisibility(visible);\n\t}\n\n\tprivate isToastInDOM(toast: INotificationToast): boolean {\n\t\treturn !!toast.container.parentElement;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ToastVisibility"]
}
