import "vs/css!./media/activitybarpart";
import "vs/css!./media/activityaction";
import { IAction } from "vs/base/common/actions";
import { IMenuService } from "vs/platform/actions/common/actions";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IStorageService } from "vs/platform/storage/common/storage";
import { IThemeService } from "vs/platform/theme/common/themeService";
import { Part } from "vs/workbench/browser/part";
import { IPaneCompositeBarOptions, PaneCompositeBar } from "vs/workbench/browser/parts/paneCompositeBar";
import { IPaneCompositePart } from "vs/workbench/browser/parts/paneCompositePart";
import { IViewDescriptorService } from "vs/workbench/common/views";
import { IWorkbenchEnvironmentService } from "vs/workbench/services/environment/common/environmentService";
import { IExtensionService } from "vs/workbench/services/extensions/common/extensions";
import { IWorkbenchLayoutService, Parts } from "vs/workbench/services/layout/browser/layoutService";
export declare class ActivitybarPart extends Part {
    private readonly paneCompositePart;
    private readonly instantiationService;
    static readonly ACTION_HEIGHT = 48;
    static readonly pinnedViewContainersKey = "workbench.activity.pinnedViewlets2";
    static readonly placeholderViewContainersKey = "workbench.activity.placeholderViewlets";
    static readonly viewContainersWorkspaceStateKey = "workbench.activity.viewletsWorkspaceState";
    readonly minimumWidth: number;
    readonly maximumWidth: number;
    readonly minimumHeight: number;
    readonly maximumHeight: number;
    private readonly compositeBar;
    private content;
    constructor(paneCompositePart: IPaneCompositePart, instantiationService: IInstantiationService, layoutService: IWorkbenchLayoutService, themeService: IThemeService, storageService: IStorageService);
    private createCompositeBar;
    protected createContentArea(parent: HTMLElement): HTMLElement;
    getPinnedPaneCompositeIds(): string[];
    getVisiblePaneCompositeIds(): string[];
    focus(): void;
    updateStyles(): void;
    show(focus?: boolean): void;
    hide(): void;
    layout(width: number, height: number): void;
    toJSON(): object;
}
export declare class ActivityBarCompositeBar extends PaneCompositeBar {
    private readonly configurationService;
    private readonly menuService;
    private element;
    private menuBar;
    private menuBarContainer;
    private compositeBarContainer;
    private readonly globalCompositeBar;
    private readonly keyboardNavigationDisposables;
    constructor(options: IPaneCompositeBarOptions, part: Parts, paneCompositePart: IPaneCompositePart, showGlobalActivities: boolean, instantiationService: IInstantiationService, storageService: IStorageService, extensionService: IExtensionService, viewDescriptorService: IViewDescriptorService, contextKeyService: IContextKeyService, environmentService: IWorkbenchEnvironmentService, configurationService: IConfigurationService, menuService: IMenuService, layoutService: IWorkbenchLayoutService);
    private fillContextMenuActions;
    private uninstallMenubar;
    private installMenubar;
    private registerKeyboardNavigationListeners;
    create(parent: HTMLElement): HTMLElement;
    layout(width: number, height: number): void;
    getActivityBarContextMenuActions(): IAction[];
}
