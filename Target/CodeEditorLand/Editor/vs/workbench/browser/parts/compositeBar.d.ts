import { Dimension } from "vs/base/browser/dom";
import { GestureEvent } from "vs/base/browser/touch";
import { ActionsOrientation } from "vs/base/browser/ui/actionbar/actionbar";
import { Widget } from "vs/base/browser/ui/widget";
import { IAction } from "vs/base/common/actions";
import { IContextMenuService } from "vs/platform/contextview/browser/contextView";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IColorTheme } from "vs/platform/theme/common/themeService";
import { Before2D, CompositeDragAndDropData, ICompositeDragAndDrop } from "vs/workbench/browser/dnd";
import { CompositeBarAction, IActivityHoverOptions, ICompositeBar, ICompositeBarColors } from "vs/workbench/browser/parts/compositeBarActions";
import { IComposite } from "vs/workbench/common/composite";
import { IPaneComposite } from "vs/workbench/common/panecomposite";
import { IViewDescriptorService, ViewContainerLocation } from "vs/workbench/common/views";
export interface ICompositeBarItem {
    readonly id: string;
    name?: string;
    pinned: boolean;
    order?: number;
    visible: boolean;
}
export declare class CompositeDragAndDrop implements ICompositeDragAndDrop {
    private viewDescriptorService;
    private targetContainerLocation;
    private orientation;
    private openComposite;
    private moveComposite;
    private getItems;
    constructor(viewDescriptorService: IViewDescriptorService, targetContainerLocation: ViewContainerLocation, orientation: ActionsOrientation, openComposite: (id: string, focus?: boolean) => Promise<IPaneComposite | null>, moveComposite: (from: string, to: string, before?: Before2D) => void, getItems: () => ICompositeBarItem[]);
    drop(data: CompositeDragAndDropData, targetCompositeId: string | undefined, originalEvent: DragEvent, before?: Before2D): void;
    onDragEnter(data: CompositeDragAndDropData, targetCompositeId: string | undefined, originalEvent: DragEvent): boolean;
    onDragOver(data: CompositeDragAndDropData, targetCompositeId: string | undefined, originalEvent: DragEvent): boolean;
    private getTargetIndex;
    private canDrop;
}
export interface ICompositeBarOptions {
    readonly icon: boolean;
    readonly orientation: ActionsOrientation;
    readonly colors: (theme: IColorTheme) => ICompositeBarColors;
    readonly compact?: boolean;
    readonly compositeSize: number;
    readonly overflowActionSize: number;
    readonly dndHandler: ICompositeDragAndDrop;
    readonly activityHoverOptions: IActivityHoverOptions;
    readonly preventLoopNavigation?: boolean;
    readonly getActivityAction: (compositeId: string) => CompositeBarAction;
    readonly getCompositePinnedAction: (compositeId: string) => IAction;
    readonly getCompositeBadgeAction: (compositeId: string) => IAction;
    readonly getOnCompositeClickAction: (compositeId: string) => IAction;
    readonly fillExtraContextMenuActions: (actions: IAction[], e?: MouseEvent | GestureEvent) => void;
    readonly getContextMenuActionsForComposite: (compositeId: string) => IAction[];
    readonly openComposite: (compositeId: string, preserveFocus?: boolean) => Promise<IComposite | null>;
    readonly getDefaultCompositeId: () => string | undefined;
}
export declare class CompositeBar extends Widget implements ICompositeBar {
    private readonly options;
    private readonly instantiationService;
    private readonly contextMenuService;
    private readonly viewDescriptorService;
    private readonly _onDidChange;
    readonly onDidChange: any;
    private dimension;
    private compositeSwitcherBar;
    private compositeOverflowAction;
    private compositeOverflowActionViewItem;
    private readonly model;
    private readonly visibleComposites;
    private readonly compositeSizeInBar;
    constructor(items: ICompositeBarItem[], options: ICompositeBarOptions, instantiationService: IInstantiationService, contextMenuService: IContextMenuService, viewDescriptorService: IViewDescriptorService);
    getCompositeBarItems(): ICompositeBarItem[];
    setCompositeBarItems(items: ICompositeBarItem[]): void;
    getPinnedComposites(): ICompositeBarItem[];
    getVisibleComposites(): ICompositeBarItem[];
    create(parent: HTMLElement): HTMLElement;
    private insertAtFront;
    private updateFromDragging;
    focus(index?: number): void;
    recomputeSizes(): void;
    layout(dimension: Dimension): void;
    addComposite({ id, name, order, requestedIndex, }: {
        id: string;
        name: string;
        order?: number;
        requestedIndex?: number;
    }): void;
    removeComposite(id: string): void;
    hideComposite(id: string): void;
    activateComposite(id: string): void;
    deactivateComposite(id: string): void;
    pin(compositeId: string, open?: boolean): Promise<void>;
    unpin(compositeId: string): void;
    areBadgesEnabled(compositeId: string): boolean;
    toggleBadgeEnablement(compositeId: string): void;
    private resetActiveComposite;
    isPinned(compositeId: string): boolean;
    move(compositeId: string, toCompositeId: string, before?: boolean): void;
    getAction(compositeId: string): CompositeBarAction;
    private computeSizes;
    private updateCompositeSwitcher;
    private getOverflowingComposites;
    private showContextMenu;
    getContextMenuActions(e?: MouseEvent | GestureEvent): IAction[];
}
