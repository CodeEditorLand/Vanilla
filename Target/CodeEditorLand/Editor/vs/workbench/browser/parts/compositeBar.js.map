{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/compositeBar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\t$,\n\ttype Dimension,\n\tEventHelper,\n\tEventType,\n\taddDisposableListener,\n\tgetWindow,\n\tisAncestor,\n} from \"../../../base/browser/dom.js\";\nimport { StandardMouseEvent } from \"../../../base/browser/mouseEvent.js\";\nimport {\n\tGesture,\n\ttype GestureEvent,\n\tEventType as TouchEventType,\n} from \"../../../base/browser/touch.js\";\nimport {\n\tActionBar,\n\tActionsOrientation,\n} from \"../../../base/browser/ui/actionbar/actionbar.js\";\nimport { Widget } from \"../../../base/browser/ui/widget.js\";\nimport { type IAction, toAction } from \"../../../base/common/actions.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { isUndefinedOrNull } from \"../../../base/common/types.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IContextMenuService } from \"../../../platform/contextview/browser/contextView.js\";\nimport { IInstantiationService } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type { IColorTheme } from \"../../../platform/theme/common/themeService.js\";\nimport type { IComposite } from \"../../common/composite.js\";\nimport type { IPaneComposite } from \"../../common/panecomposite.js\";\nimport {\n\tIViewDescriptorService,\n\ttype ViewContainerLocation,\n} from \"../../common/views.js\";\nimport type { IActivity } from \"../../services/activity/common/activity.js\";\nimport {\n\ttype Before2D,\n\ttype CompositeDragAndDropData,\n\tCompositeDragAndDropObserver,\n\ttype ICompositeDragAndDrop,\n\ttype ICompositeDragAndDropObserverCallbacks,\n\ttype IDraggedCompositeData,\n\ttoggleDropEffect,\n} from \"../dnd.js\";\nimport {\n\tCompositeActionViewItem,\n\ttype CompositeBarAction,\n\tCompositeOverflowActivityAction,\n\tCompositeOverflowActivityActionViewItem,\n\ttype IActivityHoverOptions,\n\ttype ICompositeBar,\n\ttype ICompositeBarColors,\n} from \"./compositeBarActions.js\";\n\nexport interface ICompositeBarItem {\n\treadonly id: string;\n\n\tname?: string;\n\tpinned: boolean;\n\torder?: number;\n\tvisible: boolean;\n}\n\nexport class CompositeDragAndDrop implements ICompositeDragAndDrop {\n\tconstructor(\n\t\tprivate viewDescriptorService: IViewDescriptorService,\n\t\tprivate targetContainerLocation: ViewContainerLocation,\n\t\tprivate orientation: ActionsOrientation,\n\t\tprivate openComposite: (\n\t\t\tid: string,\n\t\t\tfocus?: boolean,\n\t\t) => Promise<IPaneComposite | null>,\n\t\tprivate moveComposite: (\n\t\t\tfrom: string,\n\t\t\tto: string,\n\t\t\tbefore?: Before2D,\n\t\t) => void,\n\t\tprivate getItems: () => ICompositeBarItem[],\n\t) {}\n\n\tdrop(\n\t\tdata: CompositeDragAndDropData,\n\t\ttargetCompositeId: string | undefined,\n\t\toriginalEvent: DragEvent,\n\t\tbefore?: Before2D,\n\t): void {\n\t\tconst dragData = data.getData();\n\n\t\tif (dragData.type === \"composite\") {\n\t\t\tconst currentContainer =\n\t\t\t\tthis.viewDescriptorService.getViewContainerById(dragData.id)!;\n\t\t\tconst currentLocation =\n\t\t\t\tthis.viewDescriptorService.getViewContainerLocation(\n\t\t\t\t\tcurrentContainer,\n\t\t\t\t);\n\n\t\t\t// ... on the same composite bar\n\t\t\tif (currentLocation === this.targetContainerLocation) {\n\t\t\t\tif (targetCompositeId) {\n\t\t\t\t\tthis.moveComposite(dragData.id, targetCompositeId, before);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// ... on a different composite bar\n\t\t\telse {\n\t\t\t\tthis.viewDescriptorService.moveViewContainerToLocation(\n\t\t\t\t\tcurrentContainer,\n\t\t\t\t\tthis.targetContainerLocation,\n\t\t\t\t\tthis.getTargetIndex(targetCompositeId, before),\n\t\t\t\t\t\"dnd\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (dragData.type === \"view\") {\n\t\t\tconst viewToMove = this.viewDescriptorService.getViewDescriptorById(\n\t\t\t\tdragData.id,\n\t\t\t)!;\n\t\t\tif (viewToMove && viewToMove.canMoveView) {\n\t\t\t\tthis.viewDescriptorService.moveViewToLocation(\n\t\t\t\t\tviewToMove,\n\t\t\t\t\tthis.targetContainerLocation,\n\t\t\t\t\t\"dnd\",\n\t\t\t\t);\n\n\t\t\t\tconst newContainer =\n\t\t\t\t\tthis.viewDescriptorService.getViewContainerByViewId(\n\t\t\t\t\t\tviewToMove.id,\n\t\t\t\t\t)!;\n\n\t\t\t\tif (targetCompositeId) {\n\t\t\t\t\tthis.moveComposite(\n\t\t\t\t\t\tnewContainer.id,\n\t\t\t\t\t\ttargetCompositeId,\n\t\t\t\t\t\tbefore,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tthis.openComposite(newContainer.id, true).then((composite) => {\n\t\t\t\t\tcomposite?.openView(viewToMove.id, true);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tonDragEnter(\n\t\tdata: CompositeDragAndDropData,\n\t\ttargetCompositeId: string | undefined,\n\t\toriginalEvent: DragEvent,\n\t): boolean {\n\t\treturn this.canDrop(data, targetCompositeId);\n\t}\n\n\tonDragOver(\n\t\tdata: CompositeDragAndDropData,\n\t\ttargetCompositeId: string | undefined,\n\t\toriginalEvent: DragEvent,\n\t): boolean {\n\t\treturn this.canDrop(data, targetCompositeId);\n\t}\n\n\tprivate getTargetIndex(\n\t\ttargetId: string | undefined,\n\t\tbefore2d: Before2D | undefined,\n\t): number | undefined {\n\t\tif (!targetId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst items = this.getItems();\n\t\tconst before =\n\t\t\tthis.orientation === ActionsOrientation.HORIZONTAL\n\t\t\t\t? before2d?.horizontallyBefore\n\t\t\t\t: before2d?.verticallyBefore;\n\t\treturn (\n\t\t\titems\n\t\t\t\t.filter((item) => item.visible)\n\t\t\t\t.findIndex((item) => item.id === targetId) + (before ? 0 : 1)\n\t\t);\n\t}\n\n\tprivate canDrop(\n\t\tdata: CompositeDragAndDropData,\n\t\ttargetCompositeId: string | undefined,\n\t): boolean {\n\t\tconst dragData = data.getData();\n\n\t\tif (dragData.type === \"composite\") {\n\t\t\t// Dragging a composite\n\t\t\tconst currentContainer =\n\t\t\t\tthis.viewDescriptorService.getViewContainerById(dragData.id)!;\n\t\t\tconst currentLocation =\n\t\t\t\tthis.viewDescriptorService.getViewContainerLocation(\n\t\t\t\t\tcurrentContainer,\n\t\t\t\t);\n\n\t\t\t// ... to the same composite location\n\t\t\tif (currentLocation === this.targetContainerLocation) {\n\t\t\t\treturn dragData.id !== targetCompositeId;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\t// Dragging an individual view\n\t\t\tconst viewDescriptor =\n\t\t\t\tthis.viewDescriptorService.getViewDescriptorById(dragData.id);\n\n\t\t\t// ... that cannot move\n\t\t\tif (!viewDescriptor || !viewDescriptor.canMoveView) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// ... to create a view container\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\nexport interface ICompositeBarOptions {\n\treadonly icon: boolean;\n\treadonly orientation: ActionsOrientation;\n\treadonly colors: (theme: IColorTheme) => ICompositeBarColors;\n\treadonly compact?: boolean;\n\treadonly compositeSize: number;\n\treadonly overflowActionSize: number;\n\treadonly dndHandler: ICompositeDragAndDrop;\n\treadonly activityHoverOptions: IActivityHoverOptions;\n\treadonly preventLoopNavigation?: boolean;\n\n\treadonly getActivityAction: (compositeId: string) => CompositeBarAction;\n\treadonly getCompositePinnedAction: (compositeId: string) => IAction;\n\treadonly getCompositeBadgeAction: (compositeId: string) => IAction;\n\treadonly getOnCompositeClickAction: (compositeId: string) => IAction;\n\treadonly fillExtraContextMenuActions: (\n\t\tactions: IAction[],\n\t\te?: MouseEvent | GestureEvent,\n\t) => void;\n\treadonly getContextMenuActionsForComposite: (\n\t\tcompositeId: string,\n\t) => IAction[];\n\n\treadonly openComposite: (\n\t\tcompositeId: string,\n\t\tpreserveFocus?: boolean,\n\t) => Promise<IComposite | null>;\n\treadonly getDefaultCompositeId: () => string | undefined;\n}\n\nclass CompositeBarDndCallbacks\n\timplements ICompositeDragAndDropObserverCallbacks\n{\n\tprivate insertDropBefore: Before2D | undefined = undefined;\n\n\tconstructor(\n\t\tprivate readonly compositeBarContainer: HTMLElement,\n\t\tprivate readonly actionBarContainer: HTMLElement,\n\t\tprivate readonly compositeBarModel: CompositeBarModel,\n\t\tprivate readonly dndHandler: ICompositeDragAndDrop,\n\t\tprivate readonly orientation: ActionsOrientation,\n\t) {}\n\n\tonDragOver(e: IDraggedCompositeData) {\n\t\t// don't add feedback if this is over the composite bar actions or there are no actions\n\t\tconst visibleItems = this.compositeBarModel.visibleItems;\n\t\tif (\n\t\t\t!visibleItems.length ||\n\t\t\t(e.eventData.target &&\n\t\t\t\tisAncestor(\n\t\t\t\t\te.eventData.target as HTMLElement,\n\t\t\t\t\tthis.actionBarContainer,\n\t\t\t\t))\n\t\t) {\n\t\t\tthis.insertDropBefore = this.updateFromDragging(\n\t\t\t\tthis.compositeBarContainer,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst insertAtFront = this.insertAtFront(\n\t\t\tthis.actionBarContainer,\n\t\t\te.eventData,\n\t\t);\n\t\tconst target = insertAtFront\n\t\t\t? visibleItems[0]\n\t\t\t: visibleItems[visibleItems.length - 1];\n\t\tconst validDropTarget = this.dndHandler.onDragOver(\n\t\t\te.dragAndDropData,\n\t\t\ttarget.id,\n\t\t\te.eventData,\n\t\t);\n\t\ttoggleDropEffect(e.eventData.dataTransfer, \"move\", validDropTarget);\n\t\tthis.insertDropBefore = this.updateFromDragging(\n\t\t\tthis.compositeBarContainer,\n\t\t\tvalidDropTarget,\n\t\t\tinsertAtFront,\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tonDragLeave(e: IDraggedCompositeData) {\n\t\tthis.insertDropBefore = this.updateFromDragging(\n\t\t\tthis.compositeBarContainer,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t);\n\t}\n\n\tonDragEnd(e: IDraggedCompositeData) {\n\t\tthis.insertDropBefore = this.updateFromDragging(\n\t\t\tthis.compositeBarContainer,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t);\n\t}\n\n\tonDrop(e: IDraggedCompositeData) {\n\t\tconst visibleItems = this.compositeBarModel.visibleItems;\n\t\tlet targetId;\n\t\tif (visibleItems.length) {\n\t\t\ttargetId = this.insertAtFront(this.actionBarContainer, e.eventData)\n\t\t\t\t? visibleItems[0].id\n\t\t\t\t: visibleItems[visibleItems.length - 1].id;\n\t\t}\n\t\tthis.dndHandler.drop(\n\t\t\te.dragAndDropData,\n\t\t\ttargetId,\n\t\t\te.eventData,\n\t\t\tthis.insertDropBefore,\n\t\t);\n\t\tthis.insertDropBefore = this.updateFromDragging(\n\t\t\tthis.compositeBarContainer,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t);\n\t}\n\n\tprivate insertAtFront(element: HTMLElement, event: DragEvent): boolean {\n\t\tconst rect = element.getBoundingClientRect();\n\t\tconst posX = event.clientX;\n\t\tconst posY = event.clientY;\n\n\t\tswitch (this.orientation) {\n\t\t\tcase ActionsOrientation.HORIZONTAL:\n\t\t\t\treturn posX < rect.left;\n\t\t\tcase ActionsOrientation.VERTICAL:\n\t\t\t\treturn posY < rect.top;\n\t\t}\n\t}\n\n\tprivate updateFromDragging(\n\t\telement: HTMLElement,\n\t\tshowFeedback: boolean,\n\t\tfront: boolean,\n\t\tisDragging: boolean,\n\t): Before2D | undefined {\n\t\telement.classList.toggle(\"dragged-over\", isDragging);\n\t\telement.classList.toggle(\"dragged-over-head\", showFeedback && front);\n\t\telement.classList.toggle(\"dragged-over-tail\", showFeedback && !front);\n\n\t\tif (!showFeedback) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn { verticallyBefore: front, horizontallyBefore: front };\n\t}\n}\n\nexport class CompositeBar extends Widget implements ICompositeBar {\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate dimension: Dimension | undefined;\n\n\tprivate compositeSwitcherBar: ActionBar | undefined;\n\tprivate compositeOverflowAction:\n\t\t| CompositeOverflowActivityAction\n\t\t| undefined;\n\tprivate compositeOverflowActionViewItem:\n\t\t| CompositeOverflowActivityActionViewItem\n\t\t| undefined;\n\n\tprivate readonly model: CompositeBarModel;\n\tprivate readonly visibleComposites: string[];\n\tprivate readonly compositeSizeInBar: Map<string, number>;\n\n\tconstructor(\n\t\titems: ICompositeBarItem[],\n\t\tprivate readonly options: ICompositeBarOptions,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t) {\n\t\tsuper();\n\n\t\tthis.model = new CompositeBarModel(items, options);\n\t\tthis.visibleComposites = [];\n\t\tthis.compositeSizeInBar = new Map<string, number>();\n\t\tthis.computeSizes(this.model.visibleItems);\n\t}\n\n\tgetCompositeBarItems(): ICompositeBarItem[] {\n\t\treturn [...this.model.items];\n\t}\n\n\tsetCompositeBarItems(items: ICompositeBarItem[]): void {\n\t\tthis.model.setItems(items);\n\t\tthis.updateCompositeSwitcher();\n\t}\n\n\tgetPinnedComposites(): ICompositeBarItem[] {\n\t\treturn this.model.pinnedItems;\n\t}\n\n\tgetVisibleComposites(): ICompositeBarItem[] {\n\t\treturn this.model.visibleItems;\n\t}\n\n\tcreate(parent: HTMLElement): HTMLElement {\n\t\tconst actionBarDiv = parent.appendChild($(\".composite-bar\"));\n\t\tthis.compositeSwitcherBar = this._register(\n\t\t\tnew ActionBar(actionBarDiv, {\n\t\t\t\tactionViewItemProvider: (action, options) => {\n\t\t\t\t\tif (action instanceof CompositeOverflowActivityAction) {\n\t\t\t\t\t\treturn this.compositeOverflowActionViewItem;\n\t\t\t\t\t}\n\t\t\t\t\tconst item = this.model.findItem(action.id);\n\t\t\t\t\treturn (\n\t\t\t\t\t\titem &&\n\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\tCompositeActionViewItem,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\t\tdraggable: true,\n\t\t\t\t\t\t\t\tcolors: this.options.colors,\n\t\t\t\t\t\t\t\ticon: this.options.icon,\n\t\t\t\t\t\t\t\thoverOptions: this.options.activityHoverOptions,\n\t\t\t\t\t\t\t\tcompact: this.options.compact,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\taction as CompositeBarAction,\n\t\t\t\t\t\t\titem.pinnedAction,\n\t\t\t\t\t\t\titem.toggleBadgeAction,\n\t\t\t\t\t\t\t(compositeId) =>\n\t\t\t\t\t\t\t\tthis.options.getContextMenuActionsForComposite(\n\t\t\t\t\t\t\t\t\tcompositeId,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t() => this.getContextMenuActions(),\n\t\t\t\t\t\t\tthis.options.dndHandler,\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\torientation: this.options.orientation,\n\t\t\t\tariaLabel: localize(\n\t\t\t\t\t\"activityBarAriaLabel\",\n\t\t\t\t\t\"Active View Switcher\",\n\t\t\t\t),\n\t\t\t\tariaRole: \"tablist\",\n\t\t\t\tpreventLoopNavigation: this.options.preventLoopNavigation,\n\t\t\t\ttriggerKeys: { keyDown: true },\n\t\t\t}),\n\t\t);\n\n\t\t// Contextmenu for composites\n\t\tthis._register(\n\t\t\taddDisposableListener(parent, EventType.CONTEXT_MENU, (e) =>\n\t\t\t\tthis.showContextMenu(getWindow(parent), e),\n\t\t\t),\n\t\t);\n\t\tthis._register(Gesture.addTarget(parent));\n\t\tthis._register(\n\t\t\taddDisposableListener(parent, TouchEventType.Contextmenu, (e) =>\n\t\t\t\tthis.showContextMenu(getWindow(parent), e),\n\t\t\t),\n\t\t);\n\n\t\t// Register a drop target on the whole bar to prevent forbidden feedback\n\t\tconst dndCallback = new CompositeBarDndCallbacks(\n\t\t\tparent,\n\t\t\tactionBarDiv,\n\t\t\tthis.model,\n\t\t\tthis.options.dndHandler,\n\t\t\tthis.options.orientation,\n\t\t);\n\t\tthis._register(\n\t\t\tCompositeDragAndDropObserver.INSTANCE.registerTarget(\n\t\t\t\tparent,\n\t\t\t\tdndCallback,\n\t\t\t),\n\t\t);\n\n\t\treturn actionBarDiv;\n\t}\n\n\tfocus(index?: number): void {\n\t\tthis.compositeSwitcherBar?.focus(index);\n\t}\n\n\trecomputeSizes(): void {\n\t\tthis.computeSizes(this.model.visibleItems);\n\t\tthis.updateCompositeSwitcher();\n\t}\n\n\tlayout(dimension: Dimension): void {\n\t\tthis.dimension = dimension;\n\n\t\tif (dimension.height === 0 || dimension.width === 0) {\n\t\t\t// Do not layout if not visible. Otherwise the size measurment would be computed wrongly\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.compositeSizeInBar.size === 0) {\n\t\t\t// Compute size of each composite by getting the size from the css renderer\n\t\t\t// Size is later used for overflow computation\n\t\t\tthis.computeSizes(this.model.visibleItems);\n\t\t}\n\n\t\tthis.updateCompositeSwitcher();\n\t}\n\n\taddComposite({\n\t\tid,\n\t\tname,\n\t\torder,\n\t\trequestedIndex,\n\t}: {\n\t\tid: string;\n\t\tname: string;\n\t\torder?: number;\n\t\trequestedIndex?: number;\n\t}): void {\n\t\tif (this.model.add(id, name, order, requestedIndex)) {\n\t\t\tthis.computeSizes([this.model.findItem(id)]);\n\t\t\tthis.updateCompositeSwitcher();\n\t\t}\n\t}\n\n\tremoveComposite(id: string): void {\n\t\t// If it pinned, unpin it first\n\t\tif (this.isPinned(id)) {\n\t\t\tthis.unpin(id);\n\t\t}\n\n\t\t// Remove from the model\n\t\tif (this.model.remove(id)) {\n\t\t\tthis.updateCompositeSwitcher();\n\t\t}\n\t}\n\n\thideComposite(id: string): void {\n\t\tif (this.model.hide(id)) {\n\t\t\tthis.resetActiveComposite(id);\n\t\t\tthis.updateCompositeSwitcher();\n\t\t}\n\t}\n\n\tactivateComposite(id: string): void {\n\t\tconst previousActiveItem = this.model.activeItem;\n\t\tif (this.model.activate(id)) {\n\t\t\t// Update if current composite is neither visible nor pinned\n\t\t\t// or previous active composite is not pinned\n\t\t\tif (\n\t\t\t\tthis.visibleComposites.indexOf(id) === -1 ||\n\t\t\t\t(!!this.model.activeItem && !this.model.activeItem.pinned) ||\n\t\t\t\t(previousActiveItem && !previousActiveItem.pinned)\n\t\t\t) {\n\t\t\t\tthis.updateCompositeSwitcher();\n\t\t\t}\n\t\t}\n\t}\n\n\tdeactivateComposite(id: string): void {\n\t\tconst previousActiveItem = this.model.activeItem;\n\t\tif (this.model.deactivate()) {\n\t\t\tif (previousActiveItem && !previousActiveItem.pinned) {\n\t\t\t\tthis.updateCompositeSwitcher();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync pin(compositeId: string, open?: boolean): Promise<void> {\n\t\tif (this.model.setPinned(compositeId, true)) {\n\t\t\tthis.updateCompositeSwitcher();\n\n\t\t\tif (open) {\n\t\t\t\tawait this.options.openComposite(compositeId);\n\t\t\t\tthis.activateComposite(compositeId); // Activate after opening\n\t\t\t}\n\t\t}\n\t}\n\n\tunpin(compositeId: string): void {\n\t\tif (this.model.setPinned(compositeId, false)) {\n\t\t\tthis.updateCompositeSwitcher();\n\n\t\t\tthis.resetActiveComposite(compositeId);\n\t\t}\n\t}\n\n\tareBadgesEnabled(compositeId: string): boolean {\n\t\treturn this.viewDescriptorService.getViewContainerBadgeEnablementState(\n\t\t\tcompositeId,\n\t\t);\n\t}\n\n\ttoggleBadgeEnablement(compositeId: string): void {\n\t\tthis.viewDescriptorService.setViewContainerBadgeEnablementState(\n\t\t\tcompositeId,\n\t\t\t!this.areBadgesEnabled(compositeId),\n\t\t);\n\t\tthis.updateCompositeSwitcher();\n\t\tconst item = this.model.findItem(compositeId);\n\t\tif (item) {\n\t\t\t// TODO @lramos15 how do we tell the activity to re-render the badge? This triggers an onDidChange but isn't the right way to do it.\n\t\t\t// I could add another specific function like `activity.updateBadgeEnablement` would then the activity store the sate?\n\t\t\titem.activityAction.activity = item.activityAction.activity;\n\t\t}\n\t}\n\n\tprivate resetActiveComposite(compositeId: string) {\n\t\tconst defaultCompositeId = this.options.getDefaultCompositeId();\n\n\t\t// Case: composite is not the active one or the active one is a different one\n\t\t// Solv: we do nothing\n\t\tif (\n\t\t\t!this.model.activeItem ||\n\t\t\tthis.model.activeItem.id !== compositeId\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Deactivate itself\n\t\tthis.deactivateComposite(compositeId);\n\n\t\t// Case: composite is not the default composite and default composite is still showing\n\t\t// Solv: we open the default composite\n\t\tif (\n\t\t\tdefaultCompositeId &&\n\t\t\tdefaultCompositeId !== compositeId &&\n\t\t\tthis.isPinned(defaultCompositeId)\n\t\t) {\n\t\t\tthis.options.openComposite(defaultCompositeId, true);\n\t\t}\n\n\t\t// Case: we closed the default composite\n\t\t// Solv: we open the next visible composite from top\n\t\telse {\n\t\t\tthis.options.openComposite(\n\t\t\t\tthis.visibleComposites.filter((cid) => cid !== compositeId)[0],\n\t\t\t);\n\t\t}\n\t}\n\n\tisPinned(compositeId: string): boolean {\n\t\tconst item = this.model.findItem(compositeId);\n\t\treturn item?.pinned;\n\t}\n\n\tmove(compositeId: string, toCompositeId: string, before?: boolean): void {\n\t\tif (before !== undefined) {\n\t\t\tconst fromIndex = this.model.items.findIndex(\n\t\t\t\t(c) => c.id === compositeId,\n\t\t\t);\n\t\t\tlet toIndex = this.model.items.findIndex(\n\t\t\t\t(c) => c.id === toCompositeId,\n\t\t\t);\n\n\t\t\tif (fromIndex >= 0 && toIndex >= 0) {\n\t\t\t\tif (!before && fromIndex > toIndex) {\n\t\t\t\t\ttoIndex++;\n\t\t\t\t}\n\n\t\t\t\tif (before && fromIndex < toIndex) {\n\t\t\t\t\ttoIndex--;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\ttoIndex < this.model.items.length &&\n\t\t\t\t\ttoIndex >= 0 &&\n\t\t\t\t\ttoIndex !== fromIndex\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.model.move(\n\t\t\t\t\t\t\tthis.model.items[fromIndex].id,\n\t\t\t\t\t\t\tthis.model.items[toIndex].id,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// timeout helps to prevent artifacts from showing up\n\t\t\t\t\t\tsetTimeout(() => this.updateCompositeSwitcher(), 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.model.move(compositeId, toCompositeId)) {\n\t\t\t// timeout helps to prevent artifacts from showing up\n\t\t\tsetTimeout(() => this.updateCompositeSwitcher(), 0);\n\t\t}\n\t}\n\n\tgetAction(compositeId: string): CompositeBarAction {\n\t\tconst item = this.model.findItem(compositeId);\n\n\t\treturn item?.activityAction;\n\t}\n\n\tprivate computeSizes(items: ICompositeBarModelItem[]): void {\n\t\tconst size = this.options.compositeSize;\n\t\tif (size) {\n\t\t\titems.forEach((composite) =>\n\t\t\t\tthis.compositeSizeInBar.set(composite.id, size),\n\t\t\t);\n\t\t} else {\n\t\t\tconst compositeSwitcherBar = this.compositeSwitcherBar;\n\t\t\tif (\n\t\t\t\tcompositeSwitcherBar &&\n\t\t\t\tthis.dimension &&\n\t\t\t\tthis.dimension.height !== 0 &&\n\t\t\t\tthis.dimension.width !== 0\n\t\t\t) {\n\t\t\t\t// Compute sizes only if visible. Otherwise the size measurment would be computed wrongly.\n\t\t\t\tconst currentItemsLength =\n\t\t\t\t\tcompositeSwitcherBar.viewItems.length;\n\t\t\t\tcompositeSwitcherBar.push(\n\t\t\t\t\titems.map((composite) => composite.activityAction),\n\t\t\t\t);\n\t\t\t\titems.map((composite, index) =>\n\t\t\t\t\tthis.compositeSizeInBar.set(\n\t\t\t\t\t\tcomposite.id,\n\t\t\t\t\t\tthis.options.orientation === ActionsOrientation.VERTICAL\n\t\t\t\t\t\t\t? compositeSwitcherBar.getHeight(\n\t\t\t\t\t\t\t\t\tcurrentItemsLength + index,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: compositeSwitcherBar.getWidth(\n\t\t\t\t\t\t\t\t\tcurrentItemsLength + index,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\titems.forEach(() =>\n\t\t\t\t\tcompositeSwitcherBar.pull(\n\t\t\t\t\t\tcompositeSwitcherBar.viewItems.length - 1,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateCompositeSwitcher(): void {\n\t\tconst compositeSwitcherBar = this.compositeSwitcherBar;\n\t\tif (!compositeSwitcherBar || !this.dimension) {\n\t\t\treturn; // We have not been rendered yet so there is nothing to update.\n\t\t}\n\n\t\tlet compositesToShow = this.model.visibleItems\n\t\t\t.filter(\n\t\t\t\t(item) =>\n\t\t\t\t\titem.pinned ||\n\t\t\t\t\t(this.model.activeItem &&\n\t\t\t\t\t\tthis.model.activeItem.id ===\n\t\t\t\t\t\t\titem.id) /* Show the active composite even if it is not pinned */,\n\t\t\t)\n\t\t\t.map((item) => item.id);\n\n\t\t// Ensure we are not showing more composites than we have height for\n\t\tlet maxVisible = compositesToShow.length;\n\t\tconst totalComposites = compositesToShow.length;\n\t\tlet size = 0;\n\t\tconst limit =\n\t\t\tthis.options.orientation === ActionsOrientation.VERTICAL\n\t\t\t\t? this.dimension.height\n\t\t\t\t: this.dimension.width;\n\n\t\t// Add composites while they fit\n\t\tfor (let i = 0; i < compositesToShow.length; i++) {\n\t\t\tconst compositeSize = this.compositeSizeInBar.get(\n\t\t\t\tcompositesToShow[i],\n\t\t\t)!;\n\t\t\t// Adding this composite will overflow available size, so don't\n\t\t\tif (size + compositeSize > limit) {\n\t\t\t\tmaxVisible = i;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsize += compositeSize;\n\t\t}\n\n\t\t// Remove the tail of composites that did not fit\n\t\tif (totalComposites > maxVisible) {\n\t\t\tcompositesToShow = compositesToShow.slice(0, maxVisible);\n\t\t}\n\n\t\t// We always try show the active composite, so re-add it if it was sliced out\n\t\tif (\n\t\t\tthis.model.activeItem &&\n\t\t\tcompositesToShow.every(\n\t\t\t\t(compositeId) =>\n\t\t\t\t\t!!this.model.activeItem &&\n\t\t\t\t\tcompositeId !== this.model.activeItem.id,\n\t\t\t)\n\t\t) {\n\t\t\tsize += this.compositeSizeInBar.get(this.model.activeItem.id)!;\n\t\t\tcompositesToShow.push(this.model.activeItem.id);\n\t\t}\n\n\t\t// The active composite might have pushed us over the limit\n\t\t// Keep popping the composite before the active one until it fits\n\t\t// If even the active one doesn't fit, we will resort to overflow\n\t\twhile (size > limit && compositesToShow.length) {\n\t\t\tconst removedComposite =\n\t\t\t\tcompositesToShow.length > 1\n\t\t\t\t\t? compositesToShow.splice(compositesToShow.length - 2, 1)[0]\n\t\t\t\t\t: compositesToShow.pop();\n\t\t\tsize -= this.compositeSizeInBar.get(removedComposite!)!;\n\t\t}\n\n\t\t// We are overflowing, add the overflow size\n\t\tif (totalComposites > compositesToShow.length) {\n\t\t\tsize += this.options.overflowActionSize;\n\t\t}\n\n\t\t// Check if we need to make extra room for the overflow action\n\t\twhile (size > limit && compositesToShow.length) {\n\t\t\tconst removedComposite =\n\t\t\t\tcompositesToShow.length > 1 &&\n\t\t\t\tcompositesToShow[compositesToShow.length - 1] ===\n\t\t\t\t\tthis.model.activeItem?.id\n\t\t\t\t\t? compositesToShow.splice(compositesToShow.length - 2, 1)[0]\n\t\t\t\t\t: compositesToShow.pop();\n\t\t\tsize -= this.compositeSizeInBar.get(removedComposite!)!;\n\t\t}\n\n\t\t// Remove the overflow action if there are no overflows\n\t\tif (\n\t\t\ttotalComposites === compositesToShow.length &&\n\t\t\tthis.compositeOverflowAction\n\t\t) {\n\t\t\tcompositeSwitcherBar.pull(compositeSwitcherBar.length() - 1);\n\n\t\t\tthis.compositeOverflowAction.dispose();\n\t\t\tthis.compositeOverflowAction = undefined;\n\n\t\t\tthis.compositeOverflowActionViewItem?.dispose();\n\t\t\tthis.compositeOverflowActionViewItem = undefined;\n\t\t}\n\n\t\t// Pull out composites that overflow or got hidden\n\t\tconst compositesToRemove: number[] = [];\n\t\tthis.visibleComposites.forEach((compositeId, index) => {\n\t\t\tif (!compositesToShow.includes(compositeId)) {\n\t\t\t\tcompositesToRemove.push(index);\n\t\t\t}\n\t\t});\n\t\tcompositesToRemove.reverse().forEach((index) => {\n\t\t\tcompositeSwitcherBar.pull(index);\n\t\t\tthis.visibleComposites.splice(index, 1);\n\t\t});\n\n\t\t// Update the positions of the composites\n\t\tcompositesToShow.forEach((compositeId, newIndex) => {\n\t\t\tconst currentIndex = this.visibleComposites.indexOf(compositeId);\n\t\t\tif (newIndex !== currentIndex) {\n\t\t\t\tif (currentIndex !== -1) {\n\t\t\t\t\tcompositeSwitcherBar.pull(currentIndex);\n\t\t\t\t\tthis.visibleComposites.splice(currentIndex, 1);\n\t\t\t\t}\n\n\t\t\t\tcompositeSwitcherBar.push(\n\t\t\t\t\tthis.model.findItem(compositeId).activityAction,\n\t\t\t\t\t{ label: true, icon: this.options.icon, index: newIndex },\n\t\t\t\t);\n\t\t\t\tthis.visibleComposites.splice(newIndex, 0, compositeId);\n\t\t\t}\n\t\t});\n\n\t\t// Add overflow action as needed\n\t\tif (\n\t\t\ttotalComposites > compositesToShow.length &&\n\t\t\t!this.compositeOverflowAction\n\t\t) {\n\t\t\tthis.compositeOverflowAction = this._register(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tCompositeOverflowActivityAction,\n\t\t\t\t\t() => {\n\t\t\t\t\t\tthis.compositeOverflowActionViewItem?.showMenu();\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.compositeOverflowActionViewItem = this._register(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tCompositeOverflowActivityActionViewItem,\n\t\t\t\t\tthis.compositeOverflowAction,\n\t\t\t\t\t() => this.getOverflowingComposites(),\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis.model.activeItem\n\t\t\t\t\t\t\t? this.model.activeItem.id\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t(compositeId) => {\n\t\t\t\t\t\tconst item = this.model.findItem(compositeId);\n\t\t\t\t\t\treturn item?.activity[0]?.badge;\n\t\t\t\t\t},\n\t\t\t\t\tthis.options.getOnCompositeClickAction,\n\t\t\t\t\tthis.options.colors,\n\t\t\t\t\tthis.options.activityHoverOptions,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tcompositeSwitcherBar.push(this.compositeOverflowAction, {\n\t\t\t\tlabel: false,\n\t\t\t\ticon: true,\n\t\t\t});\n\t\t}\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate getOverflowingComposites(): { id: string; name?: string }[] {\n\t\tlet overflowingIds = this.model.visibleItems\n\t\t\t.filter((item) => item.pinned)\n\t\t\t.map((item) => item.id);\n\n\t\t// Show the active composite even if it is not pinned\n\t\tif (this.model.activeItem && !this.model.activeItem.pinned) {\n\t\t\toverflowingIds.push(this.model.activeItem.id);\n\t\t}\n\n\t\toverflowingIds = overflowingIds.filter(\n\t\t\t(compositeId) => !this.visibleComposites.includes(compositeId),\n\t\t);\n\t\treturn this.model.visibleItems\n\t\t\t.filter((c) => overflowingIds.includes(c.id))\n\t\t\t.map((item) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: item.id,\n\t\t\t\t\tname: this.getAction(item.id)?.label || item.name,\n\t\t\t\t};\n\t\t\t});\n\t}\n\n\tprivate showContextMenu(\n\t\ttargetWindow: Window,\n\t\te: MouseEvent | GestureEvent,\n\t): void {\n\t\tEventHelper.stop(e, true);\n\n\t\tconst event = new StandardMouseEvent(targetWindow, e);\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => event,\n\t\t\tgetActions: () => this.getContextMenuActions(e),\n\t\t});\n\t}\n\n\tgetContextMenuActions(e?: MouseEvent | GestureEvent): IAction[] {\n\t\tconst actions: IAction[] = this.model.visibleItems.map(\n\t\t\t({ id, name, activityAction }) =>\n\t\t\t\ttoAction({\n\t\t\t\t\tid,\n\t\t\t\t\tlabel: this.getAction(id).label || name || id,\n\t\t\t\t\tchecked: this.isPinned(id),\n\t\t\t\t\tenabled: activityAction.enabled,\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tif (this.isPinned(id)) {\n\t\t\t\t\t\t\tthis.unpin(id);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.pin(id, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t);\n\n\t\tthis.options.fillExtraContextMenuActions(actions, e);\n\n\t\treturn actions;\n\t}\n}\n\ninterface ICompositeBarModelItem extends ICompositeBarItem {\n\treadonly activityAction: CompositeBarAction;\n\treadonly pinnedAction: IAction;\n\treadonly toggleBadgeAction: IAction;\n\treadonly activity: IActivity[];\n}\n\nclass CompositeBarModel {\n\tprivate _items: ICompositeBarModelItem[] = [];\n\tget items(): ICompositeBarModelItem[] {\n\t\treturn this._items;\n\t}\n\n\tprivate readonly options: ICompositeBarOptions;\n\n\tactiveItem?: ICompositeBarModelItem;\n\n\tconstructor(items: ICompositeBarItem[], options: ICompositeBarOptions) {\n\t\tthis.options = options;\n\t\tthis.setItems(items);\n\t}\n\n\tsetItems(items: ICompositeBarItem[]): void {\n\t\tthis._items = [];\n\t\tthis._items = items.map((i) =>\n\t\t\tthis.createCompositeBarItem(\n\t\t\t\ti.id,\n\t\t\t\ti.name,\n\t\t\t\ti.order,\n\t\t\t\ti.pinned,\n\t\t\t\ti.visible,\n\t\t\t),\n\t\t);\n\t}\n\n\tget visibleItems(): ICompositeBarModelItem[] {\n\t\treturn this.items.filter((item) => item.visible);\n\t}\n\n\tget pinnedItems(): ICompositeBarModelItem[] {\n\t\treturn this.items.filter((item) => item.visible && item.pinned);\n\t}\n\n\tprivate createCompositeBarItem(\n\t\tid: string,\n\t\tname: string | undefined,\n\t\torder: number | undefined,\n\t\tpinned: boolean,\n\t\tvisible: boolean,\n\t): ICompositeBarModelItem {\n\t\tconst options = this.options;\n\t\treturn {\n\t\t\tid,\n\t\t\tname,\n\t\t\tpinned,\n\t\t\torder,\n\t\t\tvisible,\n\t\t\tactivity: [],\n\t\t\tget activityAction() {\n\t\t\t\treturn options.getActivityAction(id);\n\t\t\t},\n\t\t\tget pinnedAction() {\n\t\t\t\treturn options.getCompositePinnedAction(id);\n\t\t\t},\n\t\t\tget toggleBadgeAction() {\n\t\t\t\treturn options.getCompositeBadgeAction(id);\n\t\t\t},\n\t\t};\n\t}\n\n\tadd(\n\t\tid: string,\n\t\tname: string,\n\t\torder: number | undefined,\n\t\trequestedIndex: number | undefined,\n\t): boolean {\n\t\tconst item = this.findItem(id);\n\t\tif (item) {\n\t\t\tlet changed = false;\n\t\t\titem.name = name;\n\t\t\tif (!isUndefinedOrNull(order)) {\n\t\t\t\tchanged = item.order !== order;\n\t\t\t\titem.order = order;\n\t\t\t}\n\t\t\tif (!item.visible) {\n\t\t\t\titem.visible = true;\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} else {\n\t\t\tconst item = this.createCompositeBarItem(\n\t\t\t\tid,\n\t\t\t\tname,\n\t\t\t\torder,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tif (!isUndefinedOrNull(requestedIndex)) {\n\t\t\t\tlet index = 0;\n\t\t\t\tlet rIndex = requestedIndex;\n\t\t\t\twhile (rIndex > 0 && index < this.items.length) {\n\t\t\t\t\tif (this.items[index++].visible) {\n\t\t\t\t\t\trIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.items.splice(index, 0, item);\n\t\t\t} else if (isUndefinedOrNull(order)) {\n\t\t\t\tthis.items.push(item);\n\t\t\t} else {\n\t\t\t\tlet index = 0;\n\t\t\t\twhile (\n\t\t\t\t\tindex < this.items.length &&\n\t\t\t\t\ttypeof this.items[index].order === \"number\" &&\n\t\t\t\t\tthis.items[index].order! < order\n\t\t\t\t) {\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tthis.items.splice(index, 0, item);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tremove(id: string): boolean {\n\t\tfor (let index = 0; index < this.items.length; index++) {\n\t\t\tif (this.items[index].id === id) {\n\t\t\t\tthis.items.splice(index, 1);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\thide(id: string): boolean {\n\t\tfor (const item of this.items) {\n\t\t\tif (item.id === id) {\n\t\t\t\tif (item.visible) {\n\t\t\t\t\titem.visible = false;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tmove(compositeId: string, toCompositeId: string): boolean {\n\t\tconst fromIndex = this.findIndex(compositeId);\n\t\tconst toIndex = this.findIndex(toCompositeId);\n\n\t\t// Make sure both items are known to the model\n\t\tif (fromIndex === -1 || toIndex === -1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst sourceItem = this.items.splice(fromIndex, 1)[0];\n\t\tthis.items.splice(toIndex, 0, sourceItem);\n\n\t\t// Make sure a moved composite gets pinned\n\t\tsourceItem.pinned = true;\n\n\t\treturn true;\n\t}\n\n\tsetPinned(id: string, pinned: boolean): boolean {\n\t\tfor (const item of this.items) {\n\t\t\tif (item.id === id) {\n\t\t\t\tif (item.pinned !== pinned) {\n\t\t\t\t\titem.pinned = pinned;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tactivate(id: string): boolean {\n\t\tif (!this.activeItem || this.activeItem.id !== id) {\n\t\t\tif (this.activeItem) {\n\t\t\t\tthis.deactivate();\n\t\t\t}\n\t\t\tfor (const item of this.items) {\n\t\t\t\tif (item.id === id) {\n\t\t\t\t\tthis.activeItem = item;\n\t\t\t\t\tthis.activeItem.activityAction.activate();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tdeactivate(): boolean {\n\t\tif (this.activeItem) {\n\t\t\tthis.activeItem.activityAction.deactivate();\n\t\t\tthis.activeItem = undefined;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfindItem(id: string): ICompositeBarModelItem {\n\t\treturn this.items.filter((item) => item.id === id)[0];\n\t}\n\n\tprivate findIndex(id: string): number {\n\t\tfor (let index = 0; index < this.items.length; index++) {\n\t\t\tif (this.items[index].id === id) {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["item"]
}
