{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/titlebar/windowTitle.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { dirname, basename } from '../../../../base/common/resources.js';\nimport { ITitleProperties, ITitleVariable } from './titlebarPart.js';\nimport { IConfigurationService, IConfigurationChangeEvent } from '../../../../platform/configuration/common/configuration.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorResourceAccessor, Verbosity, SideBySideEditor } from '../../../common/editor.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../../services/environment/browser/environmentService.js';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { isWindows, isWeb, isMacintosh, isNative } from '../../../../base/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { trim } from '../../../../base/common/strings.js';\nimport { IEditorGroupsContainer } from '../../../services/editor/common/editorGroupsService.js';\nimport { template } from '../../../../base/common/labels.js';\nimport { ILabelService, Verbosity as LabelVerbosity } from '../../../../platform/label/common/label.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { getVirtualWorkspaceLocation } from '../../../../platform/workspace/common/virtualWorkspace.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { ICodeEditor, isCodeEditor, isDiffEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { getWindowById } from '../../../../base/browser/dom.js';\nimport { CodeWindow } from '../../../../base/browser/window.js';\n\nconst enum WindowSettingNames {\n\ttitleSeparator = 'window.titleSeparator',\n\ttitle = 'window.title'\n}\n\nexport const defaultWindowTitle = (() => {\n\tif (isMacintosh && isNative) {\n\t\treturn '${activeEditorShort}${separator}${rootName}${separator}${profileName}'; // macOS has native dirty indicator\n\t}\n\n\tconst base = '${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}';\n\tif (isWeb) {\n\t\treturn base + '${separator}${remoteName}'; // Web: always show remote name\n\t}\n\n\treturn base;\n})();\nexport const defaultWindowTitleSeparator = isMacintosh ? ' \\u2014 ' : ' - ';\n\nexport class WindowTitle extends Disposable {\n\n\tprivate static readonly NLS_USER_IS_ADMIN = isWindows ? localize('userIsAdmin', \"[Administrator]\") : localize('userIsSudo', \"[Superuser]\");\n\tprivate static readonly NLS_EXTENSION_HOST = localize('devExtensionWindowTitlePrefix', \"[Extension Development Host]\");\n\tprivate static readonly TITLE_DIRTY = '\\u25cf ';\n\n\tprivate readonly properties: ITitleProperties = { isPure: true, isAdmin: false, prefix: undefined };\n\tprivate readonly variables = new Map<string /* context key */, string /* name */>();\n\n\tprivate readonly activeEditorListeners = this._register(new DisposableStore());\n\tprivate readonly titleUpdater = this._register(new RunOnceScheduler(() => this.doUpdateTitle(), 0));\n\n\tprivate readonly onDidChangeEmitter = new Emitter<void>();\n\treadonly onDidChange = this.onDidChangeEmitter.event;\n\n\tget value() { return this.title ?? ''; }\n\tget workspaceName() { return this.labelService.getWorkspaceLabel(this.contextService.getWorkspace()); }\n\tget fileName() {\n\t\tconst activeEditor = this.editorService.activeEditor;\n\t\tif (!activeEditor) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst fileName = activeEditor.getTitle(Verbosity.SHORT);\n\t\tconst dirty = activeEditor?.isDirty() && !activeEditor.isSaving() ? WindowTitle.TITLE_DIRTY : '';\n\t\treturn `${dirty}${fileName}`;\n\t}\n\n\tprivate title: string | undefined;\n\tprivate titleIncludesFocusedView: boolean = false;\n\n\tprivate readonly editorService: IEditorService;\n\n\tprivate readonly windowId: number;\n\n\tconstructor(\n\t\ttargetWindow: CodeWindow,\n\t\teditorGroupsContainer: IEditorGroupsContainer | 'main',\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IBrowserWorkbenchEnvironmentService protected readonly environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IViewsService private readonly viewsService: IViewsService\n\t) {\n\t\tsuper();\n\n\t\tthis.editorService = editorService.createScoped(editorGroupsContainer, this._store);\n\t\tthis.windowId = targetWindow.vscodeWindowId;\n\n\t\tthis.updateTitleIncludesFocusedView();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChanged(e)));\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.onActiveEditorChange()));\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.titleUpdater.schedule()));\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this.titleUpdater.schedule()));\n\t\tthis._register(this.contextService.onDidChangeWorkspaceName(() => this.titleUpdater.schedule()));\n\t\tthis._register(this.labelService.onDidChangeFormatters(() => this.titleUpdater.schedule()));\n\t\tthis._register(this.userDataProfileService.onDidChangeCurrentProfile(() => this.titleUpdater.schedule()));\n\t\tthis._register(this.viewsService.onDidChangeFocusedView(() => {\n\t\t\tif (this.titleIncludesFocusedView) {\n\t\t\t\tthis.titleUpdater.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.contextKeyService.onDidChangeContext(e => {\n\t\t\tif (e.affectsSome(this.variables)) {\n\t\t\t\tthis.titleUpdater.schedule();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate onConfigurationChanged(event: IConfigurationChangeEvent): void {\n\t\tif (event.affectsConfiguration(WindowSettingNames.title)) {\n\t\t\tthis.updateTitleIncludesFocusedView();\n\t\t}\n\n\t\tif (event.affectsConfiguration(WindowSettingNames.title) || event.affectsConfiguration(WindowSettingNames.titleSeparator)) {\n\t\t\tthis.titleUpdater.schedule();\n\t\t}\n\t}\n\n\tprivate updateTitleIncludesFocusedView(): void {\n\t\tconst titleTemplate = this.configurationService.getValue<unknown>(WindowSettingNames.title);\n\t\tthis.titleIncludesFocusedView = typeof titleTemplate === 'string' && titleTemplate.includes('${focusedView}');\n\t}\n\n\tprivate onActiveEditorChange(): void {\n\n\t\t// Dispose old listeners\n\t\tthis.activeEditorListeners.clear();\n\n\t\t// Calculate New Window Title\n\t\tthis.titleUpdater.schedule();\n\n\t\t// Apply listener for dirty and label changes\n\t\tconst activeEditor = this.editorService.activeEditor;\n\t\tif (activeEditor) {\n\t\t\tthis.activeEditorListeners.add(activeEditor.onDidChangeDirty(() => this.titleUpdater.schedule()));\n\t\t\tthis.activeEditorListeners.add(activeEditor.onDidChangeLabel(() => this.titleUpdater.schedule()));\n\t\t}\n\n\t\t// Apply listeners for tracking focused code editor\n\t\tif (this.titleIncludesFocusedView) {\n\t\t\tconst activeTextEditorControl = this.editorService.activeTextEditorControl;\n\t\t\tconst textEditorControls: ICodeEditor[] = [];\n\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\ttextEditorControls.push(activeTextEditorControl);\n\t\t\t} else if (isDiffEditor(activeTextEditorControl)) {\n\t\t\t\ttextEditorControls.push(activeTextEditorControl.getOriginalEditor(), activeTextEditorControl.getModifiedEditor());\n\t\t\t}\n\n\t\t\tfor (const textEditorControl of textEditorControls) {\n\t\t\t\tthis.activeEditorListeners.add(textEditorControl.onDidBlurEditorText(() => this.titleUpdater.schedule()));\n\t\t\t\tthis.activeEditorListeners.add(textEditorControl.onDidFocusEditorText(() => this.titleUpdater.schedule()));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doUpdateTitle(): void {\n\t\tconst title = this.getFullWindowTitle();\n\t\tif (title !== this.title) {\n\n\t\t\t// Always set the native window title to identify us properly to the OS\n\t\t\tlet nativeTitle = title;\n\t\t\tif (!trim(nativeTitle)) {\n\t\t\t\tnativeTitle = this.productService.nameLong;\n\t\t\t}\n\n\t\t\tconst window = getWindowById(this.windowId, true).window;\n\t\t\tif (!window.document.title && isMacintosh && nativeTitle === this.productService.nameLong) {\n\t\t\t\t// TODO@electron macOS: if we set a window title for\n\t\t\t\t// the first time and it matches the one we set in\n\t\t\t\t// `windowImpl.ts` somehow the window does not appear\n\t\t\t\t// in the \"Windows\" menu. As such, we set the title\n\t\t\t\t// briefly to something different to ensure macOS\n\t\t\t\t// recognizes we have a window.\n\t\t\t\t// See: https://github.com/microsoft/vscode/issues/191288\n\t\t\t\twindow.document.title = `${this.productService.nameLong} ${WindowTitle.TITLE_DIRTY}`;\n\t\t\t}\n\n\t\t\twindow.document.title = nativeTitle;\n\t\t\tthis.title = title;\n\n\t\t\tthis.onDidChangeEmitter.fire();\n\t\t}\n\t}\n\n\tprivate getFullWindowTitle(): string {\n\t\tconst { prefix, suffix } = this.getTitleDecorations();\n\n\t\tlet title = this.getWindowTitle() || this.productService.nameLong;\n\t\tif (prefix) {\n\t\t\ttitle = `${prefix} ${title}`;\n\t\t}\n\n\t\tif (suffix) {\n\t\t\ttitle = `${title} ${suffix}`;\n\t\t}\n\n\t\t// Replace non-space whitespace\n\t\treturn title.replace(/[^\\S ]/g, ' ');\n\t}\n\n\tgetTitleDecorations() {\n\t\tlet prefix: string | undefined;\n\t\tlet suffix: string | undefined;\n\n\t\tif (this.properties.prefix) {\n\t\t\tprefix = this.properties.prefix;\n\t\t}\n\n\t\tif (this.environmentService.isExtensionDevelopment) {\n\t\t\tprefix = !prefix\n\t\t\t\t? WindowTitle.NLS_EXTENSION_HOST\n\t\t\t\t: `${WindowTitle.NLS_EXTENSION_HOST} - ${prefix}`;\n\t\t}\n\n\t\tif (this.properties.isAdmin) {\n\t\t\tsuffix = WindowTitle.NLS_USER_IS_ADMIN;\n\t\t}\n\n\t\treturn { prefix, suffix };\n\t}\n\n\tupdateProperties(properties: ITitleProperties): void {\n\t\tconst isAdmin = typeof properties.isAdmin === 'boolean' ? properties.isAdmin : this.properties.isAdmin;\n\t\tconst isPure = typeof properties.isPure === 'boolean' ? properties.isPure : this.properties.isPure;\n\t\tconst prefix = typeof properties.prefix === 'string' ? properties.prefix : this.properties.prefix;\n\n\t\tif (isAdmin !== this.properties.isAdmin || isPure !== this.properties.isPure || prefix !== this.properties.prefix) {\n\t\t\tthis.properties.isAdmin = isAdmin;\n\t\t\tthis.properties.isPure = isPure;\n\t\t\tthis.properties.prefix = prefix;\n\n\t\t\tthis.titleUpdater.schedule();\n\t\t}\n\t}\n\n\tregisterVariables(variables: ITitleVariable[]): void {\n\t\tlet changed = false;\n\n\t\tfor (const { name, contextKey } of variables) {\n\t\t\tif (!this.variables.has(contextKey)) {\n\t\t\t\tthis.variables.set(contextKey, name);\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif (changed) {\n\t\t\tthis.titleUpdater.schedule();\n\t\t}\n\t}\n\n\t/**\n\t * Possible template values:\n\t *\n\t * {activeEditorLong}: e.g. /Users/Development/myFolder/myFileFolder/myFile.txt\n\t * {activeEditorMedium}: e.g. myFolder/myFileFolder/myFile.txt\n\t * {activeEditorShort}: e.g. myFile.txt\n\t * {activeFolderLong}: e.g. /Users/Development/myFolder/myFileFolder\n\t * {activeFolderMedium}: e.g. myFolder/myFileFolder\n\t * {activeFolderShort}: e.g. myFileFolder\n\t * {rootName}: e.g. myFolder1, myFolder2, myFolder3\n\t * {rootPath}: e.g. /Users/Development\n\t * {folderName}: e.g. myFolder\n\t * {folderPath}: e.g. /Users/Development/myFolder\n\t * {appName}: e.g. VS Code\n\t * {remoteName}: e.g. SSH\n\t * {dirty}: indicator\n\t * {focusedView}: e.g. Terminal\n\t * {separator}: conditional separator\n\t */\n\tgetWindowTitle(): string {\n\t\tconst editor = this.editorService.activeEditor;\n\t\tconst workspace = this.contextService.getWorkspace();\n\n\t\t// Compute root\n\t\tlet root: URI | undefined;\n\t\tif (workspace.configuration) {\n\t\t\troot = workspace.configuration;\n\t\t} else if (workspace.folders.length) {\n\t\t\troot = workspace.folders[0].uri;\n\t\t}\n\n\t\t// Compute active editor folder\n\t\tconst editorResource = EditorResourceAccessor.getOriginalUri(editor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\tlet editorFolderResource = editorResource ? dirname(editorResource) : undefined;\n\t\tif (editorFolderResource?.path === '.') {\n\t\t\teditorFolderResource = undefined;\n\t\t}\n\n\t\t// Compute folder resource\n\t\t// Single Root Workspace: always the root single workspace in this case\n\t\t// Otherwise: root folder of the currently active file if any\n\t\tlet folder: IWorkspaceFolder | undefined = undefined;\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tfolder = workspace.folders[0];\n\t\t} else if (editorResource) {\n\t\t\tfolder = this.contextService.getWorkspaceFolder(editorResource) ?? undefined;\n\t\t}\n\n\t\t// Compute remote\n\t\t// vscode-remtoe: use as is\n\t\t// otherwise figure out if we have a virtual folder opened\n\t\tlet remoteName: string | undefined = undefined;\n\t\tif (this.environmentService.remoteAuthority && !isWeb) {\n\t\t\tremoteName = this.labelService.getHostLabel(Schemas.vscodeRemote, this.environmentService.remoteAuthority);\n\t\t} else {\n\t\t\tconst virtualWorkspaceLocation = getVirtualWorkspaceLocation(workspace);\n\t\t\tif (virtualWorkspaceLocation) {\n\t\t\t\tremoteName = this.labelService.getHostLabel(virtualWorkspaceLocation.scheme, virtualWorkspaceLocation.authority);\n\t\t\t}\n\t\t}\n\n\t\t// Variables\n\t\tconst activeEditorShort = editor ? editor.getTitle(Verbosity.SHORT) : '';\n\t\tconst activeEditorMedium = editor ? editor.getTitle(Verbosity.MEDIUM) : activeEditorShort;\n\t\tconst activeEditorLong = editor ? editor.getTitle(Verbosity.LONG) : activeEditorMedium;\n\t\tconst activeFolderShort = editorFolderResource ? basename(editorFolderResource) : '';\n\t\tconst activeFolderMedium = editorFolderResource ? this.labelService.getUriLabel(editorFolderResource, { relative: true }) : '';\n\t\tconst activeFolderLong = editorFolderResource ? this.labelService.getUriLabel(editorFolderResource) : '';\n\t\tconst rootName = this.labelService.getWorkspaceLabel(workspace);\n\t\tconst rootNameShort = this.labelService.getWorkspaceLabel(workspace, { verbose: LabelVerbosity.SHORT });\n\t\tconst rootPath = root ? this.labelService.getUriLabel(root) : '';\n\t\tconst folderName = folder ? folder.name : '';\n\t\tconst folderPath = folder ? this.labelService.getUriLabel(folder.uri) : '';\n\t\tconst dirty = editor?.isDirty() && !editor.isSaving() ? WindowTitle.TITLE_DIRTY : '';\n\t\tconst appName = this.productService.nameLong;\n\t\tconst profileName = this.userDataProfileService.currentProfile.isDefault ? '' : this.userDataProfileService.currentProfile.name;\n\t\tconst focusedView: string = this.viewsService.getFocusedViewName();\n\t\tconst variables: Record<string, string> = {};\n\t\tfor (const [contextKey, name] of this.variables) {\n\t\t\tvariables[name] = this.contextKeyService.getContextKeyValue(contextKey) ?? '';\n\t\t}\n\n\t\tlet titleTemplate = this.configurationService.getValue<string>(WindowSettingNames.title);\n\t\tif (typeof titleTemplate !== 'string') {\n\t\t\ttitleTemplate = defaultWindowTitle;\n\t\t}\n\n\t\tlet separator = this.configurationService.getValue<string>(WindowSettingNames.titleSeparator);\n\t\tif (typeof separator !== 'string') {\n\t\t\tseparator = defaultWindowTitleSeparator;\n\t\t}\n\n\t\treturn template(titleTemplate, {\n\t\t\t...variables,\n\t\t\tactiveEditorShort,\n\t\t\tactiveEditorLong,\n\t\t\tactiveEditorMedium,\n\t\t\tactiveFolderShort,\n\t\t\tactiveFolderMedium,\n\t\t\tactiveFolderLong,\n\t\t\trootName,\n\t\t\trootPath,\n\t\t\trootNameShort,\n\t\t\tfolderName,\n\t\t\tfolderPath,\n\t\t\tdirty,\n\t\t\tappName,\n\t\t\tremoteName,\n\t\t\tprofileName,\n\t\t\tfocusedView,\n\t\t\tseparator: { label: separator }\n\t\t});\n\t}\n\n\tisCustomTitleFormat(): boolean {\n\t\tconst title = this.configurationService.inspect<string>(WindowSettingNames.title);\n\t\tconst titleSeparator = this.configurationService.inspect<string>(WindowSettingNames.titleSeparator);\n\n\t\treturn title.value !== title.defaultValue || titleSeparator.value !== titleSeparator.defaultValue;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["WindowSettingNames"]
}
