{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/titlebar/windowTitle.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindowById } from \"../../../../base/browser/dom.js\";\nimport type { CodeWindow } from \"../../../../base/browser/window.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { template } from \"../../../../base/common/labels.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport {\n\tisMacintosh,\n\tisNative,\n\tisWeb,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport { basename, dirname } from \"../../../../base/common/resources.js\";\nimport { trim } from \"../../../../base/common/strings.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\ttype ICodeEditor,\n\tisCodeEditor,\n\tisDiffEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\ttype IConfigurationChangeEvent,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tILabelService,\n\tVerbosity as LabelVerbosity,\n} from \"../../../../platform/label/common/label.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { getVirtualWorkspaceLocation } from \"../../../../platform/workspace/common/virtualWorkspace.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tEditorResourceAccessor,\n\tSideBySideEditor,\n\tVerbosity,\n} from \"../../../common/editor.js\";\nimport type { IEditorGroupsContainer } from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../../services/environment/browser/environmentService.js\";\nimport { IUserDataProfileService } from \"../../../services/userDataProfile/common/userDataProfile.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\nimport type { ITitleProperties, ITitleVariable } from \"./titlebarPart.js\";\n\nenum WindowSettingNames {\n\ttitleSeparator = \"window.titleSeparator\",\n\ttitle = \"window.title\",\n}\n\nexport const defaultWindowTitle = (() => {\n\tif (isMacintosh && isNative) {\n\t\treturn \"${activeEditorShort}${separator}${rootName}${separator}${profileName}\"; // macOS has native dirty indicator\n\t}\n\n\tconst base =\n\t\t\"${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}\";\n\tif (isWeb) {\n\t\treturn base + \"${separator}${remoteName}\"; // Web: always show remote name\n\t}\n\n\treturn base;\n})();\nexport const defaultWindowTitleSeparator = isMacintosh ? \" \\u2014 \" : \" - \";\n\nexport class WindowTitle extends Disposable {\n\tprivate static readonly NLS_USER_IS_ADMIN = isWindows\n\t\t? localize(\"userIsAdmin\", \"[Administrator]\")\n\t\t: localize(\"userIsSudo\", \"[Superuser]\");\n\tprivate static readonly NLS_EXTENSION_HOST = localize(\n\t\t\"devExtensionWindowTitlePrefix\",\n\t\t\"[Extension Development Host]\",\n\t);\n\tprivate static readonly TITLE_DIRTY = \"\\u25cf \";\n\n\tprivate readonly properties: ITitleProperties = {\n\t\tisPure: true,\n\t\tisAdmin: false,\n\t\tprefix: undefined,\n\t};\n\tprivate readonly variables = new Map<\n\t\tstring /* context key */,\n\t\tstring /* name */\n\t>();\n\n\tprivate readonly activeEditorListeners = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate readonly titleUpdater = this._register(\n\t\tnew RunOnceScheduler(() => this.doUpdateTitle(), 0),\n\t);\n\n\tprivate readonly onDidChangeEmitter = new Emitter<void>();\n\treadonly onDidChange = this.onDidChangeEmitter.event;\n\n\tget value() {\n\t\treturn this.title ?? \"\";\n\t}\n\tget workspaceName() {\n\t\treturn this.labelService.getWorkspaceLabel(\n\t\t\tthis.contextService.getWorkspace(),\n\t\t);\n\t}\n\tget fileName() {\n\t\tconst activeEditor = this.editorService.activeEditor;\n\t\tif (!activeEditor) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst fileName = activeEditor.getTitle(Verbosity.SHORT);\n\t\tconst dirty =\n\t\t\tactiveEditor?.isDirty() && !activeEditor.isSaving()\n\t\t\t\t? WindowTitle.TITLE_DIRTY\n\t\t\t\t: \"\";\n\t\treturn `${dirty}${fileName}`;\n\t}\n\n\tprivate title: string | undefined;\n\tprivate titleIncludesFocusedView = false;\n\n\tprivate readonly editorService: IEditorService;\n\n\tprivate readonly windowId: number;\n\n\tconstructor(\n\t\ttargetWindow: CodeWindow,\n\t\teditorGroupsContainer: IEditorGroupsContainer | 'main',\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IBrowserWorkbenchEnvironmentService protected readonly environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IViewsService private readonly viewsService: IViewsService\n\t) {\n\t\tsuper();\n\n\t\tthis.editorService = editorService.createScoped(editorGroupsContainer, this._store);\n\t\tthis.windowId = targetWindow.vscodeWindowId;\n\n\t\tthis.updateTitleIncludesFocusedView();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) =>\n\t\t\t\tthis.onConfigurationChanged(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editorService.onDidActiveEditorChange(() =>\n\t\t\t\tthis.onActiveEditorChange(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.contextService.onDidChangeWorkspaceFolders(() =>\n\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.contextService.onDidChangeWorkbenchState(() =>\n\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.contextService.onDidChangeWorkspaceName(() =>\n\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.labelService.onDidChangeFormatters(() =>\n\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.userDataProfileService.onDidChangeCurrentProfile(() =>\n\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.viewsService.onDidChangeFocusedView(() => {\n\t\t\t\tif (this.titleIncludesFocusedView) {\n\t\t\t\t\tthis.titleUpdater.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.contextKeyService.onDidChangeContext((e) => {\n\t\t\t\tif (e.affectsSome(this.variables)) {\n\t\t\t\t\tthis.titleUpdater.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate onConfigurationChanged(event: IConfigurationChangeEvent): void {\n\t\tif (event.affectsConfiguration(WindowSettingNames.title)) {\n\t\t\tthis.updateTitleIncludesFocusedView();\n\t\t}\n\n\t\tif (\n\t\t\tevent.affectsConfiguration(WindowSettingNames.title) ||\n\t\t\tevent.affectsConfiguration(WindowSettingNames.titleSeparator)\n\t\t) {\n\t\t\tthis.titleUpdater.schedule();\n\t\t}\n\t}\n\n\tprivate updateTitleIncludesFocusedView(): void {\n\t\tconst titleTemplate = this.configurationService.getValue<unknown>(\n\t\t\tWindowSettingNames.title,\n\t\t);\n\t\tthis.titleIncludesFocusedView =\n\t\t\ttypeof titleTemplate === \"string\" &&\n\t\t\ttitleTemplate.includes(\"${focusedView}\");\n\t}\n\n\tprivate onActiveEditorChange(): void {\n\t\t// Dispose old listeners\n\t\tthis.activeEditorListeners.clear();\n\n\t\t// Calculate New Window Title\n\t\tthis.titleUpdater.schedule();\n\n\t\t// Apply listener for dirty and label changes\n\t\tconst activeEditor = this.editorService.activeEditor;\n\t\tif (activeEditor) {\n\t\t\tthis.activeEditorListeners.add(\n\t\t\t\tactiveEditor.onDidChangeDirty(() =>\n\t\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.activeEditorListeners.add(\n\t\t\t\tactiveEditor.onDidChangeLabel(() =>\n\t\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Apply listeners for tracking focused code editor\n\t\tif (this.titleIncludesFocusedView) {\n\t\t\tconst activeTextEditorControl =\n\t\t\t\tthis.editorService.activeTextEditorControl;\n\t\t\tconst textEditorControls: ICodeEditor[] = [];\n\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\ttextEditorControls.push(activeTextEditorControl);\n\t\t\t} else if (isDiffEditor(activeTextEditorControl)) {\n\t\t\t\ttextEditorControls.push(\n\t\t\t\t\tactiveTextEditorControl.getOriginalEditor(),\n\t\t\t\t\tactiveTextEditorControl.getModifiedEditor(),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const textEditorControl of textEditorControls) {\n\t\t\t\tthis.activeEditorListeners.add(\n\t\t\t\t\ttextEditorControl.onDidBlurEditorText(() =>\n\t\t\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis.activeEditorListeners.add(\n\t\t\t\t\ttextEditorControl.onDidFocusEditorText(() =>\n\t\t\t\t\t\tthis.titleUpdater.schedule(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doUpdateTitle(): void {\n\t\tconst title = this.getFullWindowTitle();\n\t\tif (title !== this.title) {\n\t\t\t// Always set the native window title to identify us properly to the OS\n\t\t\tlet nativeTitle = title;\n\t\t\tif (!trim(nativeTitle)) {\n\t\t\t\tnativeTitle = this.productService.nameLong;\n\t\t\t}\n\n\t\t\tconst window = getWindowById(this.windowId, true).window;\n\t\t\tif (\n\t\t\t\t!window.document.title &&\n\t\t\t\tisMacintosh &&\n\t\t\t\tnativeTitle === this.productService.nameLong\n\t\t\t) {\n\t\t\t\t// TODO@electron macOS: if we set a window title for\n\t\t\t\t// the first time and it matches the one we set in\n\t\t\t\t// `windowImpl.ts` somehow the window does not appear\n\t\t\t\t// in the \"Windows\" menu. As such, we set the title\n\t\t\t\t// briefly to something different to ensure macOS\n\t\t\t\t// recognizes we have a window.\n\t\t\t\t// See: https://github.com/microsoft/vscode/issues/191288\n\t\t\t\twindow.document.title = `${this.productService.nameLong} ${WindowTitle.TITLE_DIRTY}`;\n\t\t\t}\n\n\t\t\twindow.document.title = nativeTitle;\n\t\t\tthis.title = title;\n\n\t\t\tthis.onDidChangeEmitter.fire();\n\t\t}\n\t}\n\n\tprivate getFullWindowTitle(): string {\n\t\tconst { prefix, suffix } = this.getTitleDecorations();\n\n\t\tlet title = this.getWindowTitle() || this.productService.nameLong;\n\t\tif (prefix) {\n\t\t\ttitle = `${prefix} ${title}`;\n\t\t}\n\n\t\tif (suffix) {\n\t\t\ttitle = `${title} ${suffix}`;\n\t\t}\n\n\t\t// Replace non-space whitespace\n\t\treturn title.replace(/[^\\S ]/g, \" \");\n\t}\n\n\tgetTitleDecorations() {\n\t\tlet prefix: string | undefined;\n\t\tlet suffix: string | undefined;\n\n\t\tif (this.properties.prefix) {\n\t\t\tprefix = this.properties.prefix;\n\t\t}\n\n\t\tif (this.environmentService.isExtensionDevelopment) {\n\t\t\tprefix = prefix\n\t\t\t\t? `${WindowTitle.NLS_EXTENSION_HOST} - ${prefix}`\n\t\t\t\t: WindowTitle.NLS_EXTENSION_HOST;\n\t\t}\n\n\t\tif (this.properties.isAdmin) {\n\t\t\tsuffix = WindowTitle.NLS_USER_IS_ADMIN;\n\t\t}\n\n\t\treturn { prefix, suffix };\n\t}\n\n\tupdateProperties(properties: ITitleProperties): void {\n\t\tconst isAdmin =\n\t\t\ttypeof properties.isAdmin === \"boolean\"\n\t\t\t\t? properties.isAdmin\n\t\t\t\t: this.properties.isAdmin;\n\t\tconst isPure =\n\t\t\ttypeof properties.isPure === \"boolean\"\n\t\t\t\t? properties.isPure\n\t\t\t\t: this.properties.isPure;\n\t\tconst prefix =\n\t\t\ttypeof properties.prefix === \"string\"\n\t\t\t\t? properties.prefix\n\t\t\t\t: this.properties.prefix;\n\n\t\tif (\n\t\t\tisAdmin !== this.properties.isAdmin ||\n\t\t\tisPure !== this.properties.isPure ||\n\t\t\tprefix !== this.properties.prefix\n\t\t) {\n\t\t\tthis.properties.isAdmin = isAdmin;\n\t\t\tthis.properties.isPure = isPure;\n\t\t\tthis.properties.prefix = prefix;\n\n\t\t\tthis.titleUpdater.schedule();\n\t\t}\n\t}\n\n\tregisterVariables(variables: ITitleVariable[]): void {\n\t\tlet changed = false;\n\n\t\tfor (const { name, contextKey } of variables) {\n\t\t\tif (!this.variables.has(contextKey)) {\n\t\t\t\tthis.variables.set(contextKey, name);\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif (changed) {\n\t\t\tthis.titleUpdater.schedule();\n\t\t}\n\t}\n\n\t/**\n\t * Possible template values:\n\t *\n\t * {activeEditorLong}: e.g. /Users/Development/myFolder/myFileFolder/myFile.txt\n\t * {activeEditorMedium}: e.g. myFolder/myFileFolder/myFile.txt\n\t * {activeEditorShort}: e.g. myFile.txt\n\t * {activeFolderLong}: e.g. /Users/Development/myFolder/myFileFolder\n\t * {activeFolderMedium}: e.g. myFolder/myFileFolder\n\t * {activeFolderShort}: e.g. myFileFolder\n\t * {rootName}: e.g. myFolder1, myFolder2, myFolder3\n\t * {rootPath}: e.g. /Users/Development\n\t * {folderName}: e.g. myFolder\n\t * {folderPath}: e.g. /Users/Development/myFolder\n\t * {appName}: e.g. VS Code\n\t * {remoteName}: e.g. SSH\n\t * {dirty}: indicator\n\t * {focusedView}: e.g. Terminal\n\t * {separator}: conditional separator\n\t */\n\tgetWindowTitle(): string {\n\t\tconst editor = this.editorService.activeEditor;\n\t\tconst workspace = this.contextService.getWorkspace();\n\n\t\t// Compute root\n\t\tlet root: URI | undefined;\n\t\tif (workspace.configuration) {\n\t\t\troot = workspace.configuration;\n\t\t} else if (workspace.folders.length) {\n\t\t\troot = workspace.folders[0].uri;\n\t\t}\n\n\t\t// Compute active editor folder\n\t\tconst editorResource = EditorResourceAccessor.getOriginalUri(editor, {\n\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t});\n\t\tlet editorFolderResource = editorResource\n\t\t\t? dirname(editorResource)\n\t\t\t: undefined;\n\t\tif (editorFolderResource?.path === \".\") {\n\t\t\teditorFolderResource = undefined;\n\t\t}\n\n\t\t// Compute folder resource\n\t\t// Single Root Workspace: always the root single workspace in this case\n\t\t// Otherwise: root folder of the currently active file if any\n\t\tlet folder: IWorkspaceFolder | undefined;\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tfolder = workspace.folders[0];\n\t\t} else if (editorResource) {\n\t\t\tfolder =\n\t\t\t\tthis.contextService.getWorkspaceFolder(editorResource) ??\n\t\t\t\tundefined;\n\t\t}\n\n\t\t// Compute remote\n\t\t// vscode-remtoe: use as is\n\t\t// otherwise figure out if we have a virtual folder opened\n\t\tlet remoteName: string | undefined;\n\t\tif (this.environmentService.remoteAuthority && !isWeb) {\n\t\t\tremoteName = this.labelService.getHostLabel(\n\t\t\t\tSchemas.vscodeRemote,\n\t\t\t\tthis.environmentService.remoteAuthority,\n\t\t\t);\n\t\t} else {\n\t\t\tconst virtualWorkspaceLocation =\n\t\t\t\tgetVirtualWorkspaceLocation(workspace);\n\t\t\tif (virtualWorkspaceLocation) {\n\t\t\t\tremoteName = this.labelService.getHostLabel(\n\t\t\t\t\tvirtualWorkspaceLocation.scheme,\n\t\t\t\t\tvirtualWorkspaceLocation.authority,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Variables\n\t\tconst activeEditorShort = editor\n\t\t\t? editor.getTitle(Verbosity.SHORT)\n\t\t\t: \"\";\n\t\tconst activeEditorMedium = editor\n\t\t\t? editor.getTitle(Verbosity.MEDIUM)\n\t\t\t: activeEditorShort;\n\t\tconst activeEditorLong = editor\n\t\t\t? editor.getTitle(Verbosity.LONG)\n\t\t\t: activeEditorMedium;\n\t\tconst activeFolderShort = editorFolderResource\n\t\t\t? basename(editorFolderResource)\n\t\t\t: \"\";\n\t\tconst activeFolderMedium = editorFolderResource\n\t\t\t? this.labelService.getUriLabel(editorFolderResource, {\n\t\t\t\t\trelative: true,\n\t\t\t\t})\n\t\t\t: \"\";\n\t\tconst activeFolderLong = editorFolderResource\n\t\t\t? this.labelService.getUriLabel(editorFolderResource)\n\t\t\t: \"\";\n\t\tconst rootName = this.labelService.getWorkspaceLabel(workspace);\n\t\tconst rootNameShort = this.labelService.getWorkspaceLabel(workspace, {\n\t\t\tverbose: LabelVerbosity.SHORT,\n\t\t});\n\t\tconst rootPath = root ? this.labelService.getUriLabel(root) : \"\";\n\t\tconst folderName = folder ? folder.name : \"\";\n\t\tconst folderPath = folder\n\t\t\t? this.labelService.getUriLabel(folder.uri)\n\t\t\t: \"\";\n\t\tconst dirty =\n\t\t\teditor?.isDirty() && !editor.isSaving()\n\t\t\t\t? WindowTitle.TITLE_DIRTY\n\t\t\t\t: \"\";\n\t\tconst appName = this.productService.nameLong;\n\t\tconst profileName = this.userDataProfileService.currentProfile.isDefault\n\t\t\t? \"\"\n\t\t\t: this.userDataProfileService.currentProfile.name;\n\t\tconst focusedView: string = this.viewsService.getFocusedViewName();\n\t\tconst variables: Record<string, string> = {};\n\t\tfor (const [contextKey, name] of this.variables) {\n\t\t\tvariables[name] =\n\t\t\t\tthis.contextKeyService.getContextKeyValue(contextKey) ?? \"\";\n\t\t}\n\n\t\tlet titleTemplate = this.configurationService.getValue<string>(\n\t\t\tWindowSettingNames.title,\n\t\t);\n\t\tif (typeof titleTemplate !== \"string\") {\n\t\t\ttitleTemplate = defaultWindowTitle;\n\t\t}\n\n\t\tlet separator = this.configurationService.getValue<string>(\n\t\t\tWindowSettingNames.titleSeparator,\n\t\t);\n\t\tif (typeof separator !== \"string\") {\n\t\t\tseparator = defaultWindowTitleSeparator;\n\t\t}\n\n\t\treturn template(titleTemplate, {\n\t\t\t...variables,\n\t\t\tactiveEditorShort,\n\t\t\tactiveEditorLong,\n\t\t\tactiveEditorMedium,\n\t\t\tactiveFolderShort,\n\t\t\tactiveFolderMedium,\n\t\t\tactiveFolderLong,\n\t\t\trootName,\n\t\t\trootPath,\n\t\t\trootNameShort,\n\t\t\tfolderName,\n\t\t\tfolderPath,\n\t\t\tdirty,\n\t\t\tappName,\n\t\t\tremoteName,\n\t\t\tprofileName,\n\t\t\tfocusedView,\n\t\t\tseparator: { label: separator },\n\t\t});\n\t}\n\n\tisCustomTitleFormat(): boolean {\n\t\tconst title = this.configurationService.inspect<string>(\n\t\t\tWindowSettingNames.title,\n\t\t);\n\t\tconst titleSeparator = this.configurationService.inspect<string>(\n\t\t\tWindowSettingNames.titleSeparator,\n\t\t);\n\n\t\treturn (\n\t\t\ttitle.value !== title.defaultValue ||\n\t\t\ttitleSeparator.value !== titleSeparator.defaultValue\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["WindowSettingNames"]
}
