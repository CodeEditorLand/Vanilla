import { IDisposable } from "vs/base/common/lifecycle";
import { ContextKeyValue, IContextKey, IContextKeyService, RawContextKey } from "vs/platform/contextkey/common/contextkey";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IStorageService } from "vs/platform/storage/common/storage";
import { IThemeService } from "vs/platform/theme/common/themeService";
import { MultiWindowParts } from "vs/workbench/browser/part";
import { IAuxiliaryEditorPartOpenOptions } from "vs/workbench/browser/parts/editor/auxiliaryEditorPart";
import { IEditorGroupView, IEditorPartsView } from "vs/workbench/browser/parts/editor/editor";
import { EditorPart, MainEditorPart } from "vs/workbench/browser/parts/editor/editorPart";
import { GroupIdentifier } from "vs/workbench/common/editor";
import { IAuxiliaryWindowService } from "vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService";
import { EditorGroupLayout, GroupDirection, GroupOrientation, GroupsArrangement, IAuxiliaryEditorPart, IEditorDropTargetDelegate, IEditorGroupContextKeyProvider, IEditorGroupsService, IEditorPart, IEditorSideGroup, IEditorWorkingSet, IEditorWorkingSetOptions, IFindGroupScope, IMergeGroupOptions } from "vs/workbench/services/editor/common/editorGroupsService";
export declare class EditorParts extends MultiWindowParts<EditorPart> implements IEditorGroupsService, IEditorPartsView {
    protected readonly instantiationService: IInstantiationService;
    private readonly storageService;
    private readonly auxiliaryWindowService;
    private readonly contextKeyService;
    readonly _serviceBrand: undefined;
    readonly mainPart: any;
    private mostRecentActiveParts;
    constructor(instantiationService: IInstantiationService, storageService: IStorageService, themeService: IThemeService, auxiliaryWindowService: IAuxiliaryWindowService, contextKeyService: IContextKeyService);
    private registerListeners;
    protected createMainEditorPart(): MainEditorPart;
    private readonly mapPartToInstantiationService;
    getScopedInstantiationService(part: IEditorPart): IInstantiationService;
    private readonly _onDidCreateAuxiliaryEditorPart;
    readonly onDidCreateAuxiliaryEditorPart: any;
    createAuxiliaryEditorPart(options?: IAuxiliaryEditorPartOpenOptions): Promise<IAuxiliaryEditorPart>;
    registerPart(part: EditorPart): IDisposable;
    protected unregisterPart(part: EditorPart): void;
    private registerEditorPartListeners;
    private doUpdateMostRecentActive;
    private getGroupsLabel;
    getPart(group: IEditorGroupView | GroupIdentifier): EditorPart;
    getPart(element: HTMLElement): EditorPart;
    private static readonly EDITOR_PARTS_UI_STATE_STORAGE_KEY;
    private readonly workspaceMemento;
    private _isReady;
    get isReady(): boolean;
    private readonly whenReadyPromise;
    readonly whenReady: any;
    private readonly whenRestoredPromise;
    readonly whenRestored: any;
    private restoreParts;
    private loadState;
    protected saveState(): void;
    private createState;
    private restoreState;
    get hasRestorableState(): boolean;
    private onDidChangeMementoState;
    private applyState;
    private static readonly EDITOR_WORKING_SETS_STORAGE_KEY;
    private editorWorkingSets;
    saveWorkingSet(name: string): IEditorWorkingSet;
    getWorkingSets(): IEditorWorkingSet[];
    deleteWorkingSet(workingSet: IEditorWorkingSet): void;
    applyWorkingSet(workingSet: IEditorWorkingSet | "empty", options?: IEditorWorkingSetOptions): Promise<boolean>;
    private indexOfWorkingSet;
    private saveWorkingSets;
    private readonly _onDidActiveGroupChange;
    readonly onDidChangeActiveGroup: any;
    private readonly _onDidAddGroup;
    readonly onDidAddGroup: any;
    private readonly _onDidRemoveGroup;
    readonly onDidRemoveGroup: any;
    private readonly _onDidMoveGroup;
    readonly onDidMoveGroup: any;
    private readonly _onDidActivateGroup;
    readonly onDidActivateGroup: any;
    private readonly _onDidChangeGroupIndex;
    readonly onDidChangeGroupIndex: any;
    private readonly _onDidChangeGroupLocked;
    readonly onDidChangeGroupLocked: any;
    private readonly _onDidChangeGroupMaximized;
    readonly onDidChangeGroupMaximized: any;
    get activeGroup(): IEditorGroupView;
    get sideGroup(): IEditorSideGroup;
    get groups(): IEditorGroupView[];
    get count(): number;
    getGroups(order?: any): IEditorGroupView[];
    getGroup(identifier: GroupIdentifier): IEditorGroupView | undefined;
    private assertGroupView;
    activateGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView;
    getSize(group: IEditorGroupView | GroupIdentifier): {
        width: number;
        height: number;
    };
    setSize(group: IEditorGroupView | GroupIdentifier, size: {
        width: number;
        height: number;
    }): void;
    arrangeGroups(arrangement: GroupsArrangement, group?: IEditorGroupView | GroupIdentifier): void;
    toggleMaximizeGroup(group?: IEditorGroupView | GroupIdentifier): void;
    toggleExpandGroup(group?: IEditorGroupView | GroupIdentifier): void;
    restoreGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView;
    applyLayout(layout: EditorGroupLayout): void;
    getLayout(): EditorGroupLayout;
    get orientation(): any;
    setGroupOrientation(orientation: GroupOrientation): void;
    findGroup(scope: IFindGroupScope, source?: IEditorGroupView | GroupIdentifier, wrap?: boolean): IEditorGroupView | undefined;
    addGroup(location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;
    removeGroup(group: IEditorGroupView | GroupIdentifier): void;
    moveGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;
    mergeGroup(group: IEditorGroupView | GroupIdentifier, target: IEditorGroupView | GroupIdentifier, options?: IMergeGroupOptions): boolean;
    mergeAllGroups(target: IEditorGroupView | GroupIdentifier): boolean;
    copyGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;
    createEditorDropTarget(container: HTMLElement, delegate: IEditorDropTargetDelegate): IDisposable;
    private readonly globalContextKeys;
    private readonly scopedContextKeys;
    private registerGroupsContextKeyListeners;
    private updateGlobalContextKeys;
    bind<T extends ContextKeyValue>(contextKey: RawContextKey<T>, group: IEditorGroupView): IContextKey<T>;
    private readonly contextKeyProviders;
    private readonly registeredContextKeys;
    registerContextKeyProvider<T extends ContextKeyValue>(provider: IEditorGroupContextKeyProvider<T>): IDisposable;
    private readonly contextKeyProviderDisposables;
    private registerGroupContextKeyProvidersListeners;
    private updateRegisteredContextKey;
    get partOptions(): any;
    get onDidChangeEditorPartOptions(): any;
}
