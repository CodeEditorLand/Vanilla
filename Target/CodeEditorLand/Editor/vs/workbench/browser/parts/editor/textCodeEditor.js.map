{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/textCodeEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { ITextEditorPane } from '../../../common/editor.js';\nimport { applyTextEditorOptions } from '../../../common/editor/editorOptions.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ITextEditorOptions } from '../../../../platform/editor/common/editor.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { IEditorOptions as ICodeEditorOptions } from '../../../../editor/common/config/editorOptions.js';\nimport { CodeEditorWidget, ICodeEditorWidgetOptions } from '../../../../editor/browser/widget/codeEditor/codeEditorWidget.js';\nimport { IEditorViewState, ScrollType } from '../../../../editor/common/editorCommon.js';\nimport { ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { AbstractTextEditor } from './textEditor.js';\nimport { Dimension } from '../../../../base/browser/dom.js';\n\n/**\n * A text editor using the code editor widget.\n */\nexport abstract class AbstractTextCodeEditor<T extends IEditorViewState> extends AbstractTextEditor<T> implements ITextEditorPane {\n\n\tprotected editorControl: ICodeEditor | undefined = undefined;\n\n\toverride get scopedContextKeyService(): IContextKeyService | undefined {\n\t\treturn this.editorControl?.invokeWithinContext(accessor => accessor.get(IContextKeyService));\n\t}\n\n\toverride getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize('textEditor', \"Text Editor\");\n\t}\n\n\tprotected createEditorControl(parent: HTMLElement, initialOptions: ICodeEditorOptions): void {\n\t\tthis.editorControl = this._register(this.instantiationService.createInstance(CodeEditorWidget, parent, initialOptions, this.getCodeEditorWidgetOptions()));\n\t}\n\n\tprotected getCodeEditorWidgetOptions(): ICodeEditorWidgetOptions {\n\t\treturn Object.create(null);\n\t}\n\n\tprotected updateEditorControlOptions(options: ICodeEditorOptions): void {\n\t\tthis.editorControl?.updateOptions(options);\n\t}\n\n\tprotected getMainControl(): ICodeEditor | undefined {\n\t\treturn this.editorControl;\n\t}\n\n\toverride getControl(): ICodeEditor | undefined {\n\t\treturn this.editorControl;\n\t}\n\n\tprotected override computeEditorViewState(resource: URI): T | undefined {\n\t\tif (!this.editorControl) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst model = this.editorControl.getModel();\n\t\tif (!model) {\n\t\t\treturn undefined; // view state always needs a model\n\t\t}\n\n\t\tconst modelUri = model.uri;\n\t\tif (!modelUri) {\n\t\t\treturn undefined; // model URI is needed to make sure we save the view state correctly\n\t\t}\n\n\t\tif (!isEqual(modelUri, resource)) {\n\t\t\treturn undefined; // prevent saving view state for a model that is not the expected one\n\t\t}\n\n\t\treturn this.editorControl.saveViewState() as unknown as T ?? undefined;\n\t}\n\n\toverride setOptions(options: ITextEditorOptions | undefined): void {\n\t\tsuper.setOptions(options);\n\n\t\tif (options) {\n\t\t\tapplyTextEditorOptions(options, assertIsDefined(this.editorControl), ScrollType.Smooth);\n\t\t}\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\n\t\tthis.editorControl?.focus();\n\t}\n\n\toverride hasFocus(): boolean {\n\t\treturn this.editorControl?.hasTextFocus() || super.hasFocus();\n\t}\n\n\tprotected override setEditorVisible(visible: boolean): void {\n\t\tsuper.setEditorVisible(visible);\n\n\t\tif (visible) {\n\t\t\tthis.editorControl?.onVisible();\n\t\t} else {\n\t\t\tthis.editorControl?.onHide();\n\t\t}\n\t}\n\n\toverride layout(dimension: Dimension): void {\n\t\tthis.editorControl?.layout(dimension);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,WAAW;AACpB,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,SAAS,8BAA8B;AACvC,SAAS,0BAA0B;AACnC,SAAS,0BAA0B;AACnC,SAAS,eAAe;AACxB,SAAS,kBAAkB,0BAA0B;AACrD,SAAS,kBAAkB,gCAAgC;AAC3D,SAAS,kBAAkB,kBAAkB;AAC7C,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,iBAAiB;AAKnB,MAAe,+BAA2D,mBAAiD;AAAA,EAvBlI,OAuBkI;AAAA;AAAA;AAAA,EAEvH,gBAAyC;AAAA,EAEnD,IAAa,0BAA0D;AACtE,WAAO,KAAK,eAAe,oBAAoB,cAAY,SAAS,IAAI,kBAAkB,CAAC;AAAA,EAC5F;AAAA,EAES,WAAmB;AAC3B,QAAI,KAAK,OAAO;AACf,aAAO,KAAK,MAAM,QAAQ;AAAA,IAC3B;AAEA,WAAO,SAAS,cAAc,aAAa;AAAA,EAC5C;AAAA,EAEU,oBAAoB,QAAqB,gBAA0C;AAC5F,SAAK,gBAAgB,KAAK,UAAU,KAAK,qBAAqB,eAAe,kBAAkB,QAAQ,gBAAgB,KAAK,2BAA2B,CAAC,CAAC;AAAA,EAC1J;AAAA,EAEU,6BAAuD;AAChE,WAAO,uBAAO,OAAO,IAAI;AAAA,EAC1B;AAAA,EAEU,2BAA2B,SAAmC;AACvE,SAAK,eAAe,cAAc,OAAO;AAAA,EAC1C;AAAA,EAEU,iBAA0C;AACnD,WAAO,KAAK;AAAA,EACb;AAAA,EAES,aAAsC;AAC9C,WAAO,KAAK;AAAA,EACb;AAAA,EAEmB,uBAAuB,UAA8B;AACvE,QAAI,CAAC,KAAK,eAAe;AACxB,aAAO;AAAA,IACR;AAEA,UAAM,QAAQ,KAAK,cAAc,SAAS;AAC1C,QAAI,CAAC,OAAO;AACX,aAAO;AAAA,IACR;AAEA,UAAM,WAAW,MAAM;AACvB,QAAI,CAAC,UAAU;AACd,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,QAAQ,UAAU,QAAQ,GAAG;AACjC,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,cAAc,cAAc,KAAqB;AAAA,EAC9D;AAAA,EAES,WAAW,SAA+C;AAClE,UAAM,WAAW,OAAO;AAExB,QAAI,SAAS;AACZ,6BAAuB,SAAS,gBAAgB,KAAK,aAAa,GAAG,WAAW,MAAM;AAAA,IACvF;AAAA,EACD;AAAA,EAES,QAAc;AACtB,UAAM,MAAM;AAEZ,SAAK,eAAe,MAAM;AAAA,EAC3B;AAAA,EAES,WAAoB;AAC5B,WAAO,KAAK,eAAe,aAAa,KAAK,MAAM,SAAS;AAAA,EAC7D;AAAA,EAEmB,iBAAiB,SAAwB;AAC3D,UAAM,iBAAiB,OAAO;AAE9B,QAAI,SAAS;AACZ,WAAK,eAAe,UAAU;AAAA,IAC/B,OAAO;AACN,WAAK,eAAe,OAAO;AAAA,IAC5B;AAAA,EACD;AAAA,EAES,OAAO,WAA4B;AAC3C,SAAK,eAAe,OAAO,SAAS;AAAA,EACrC;AACD;",
  "names": []
}
