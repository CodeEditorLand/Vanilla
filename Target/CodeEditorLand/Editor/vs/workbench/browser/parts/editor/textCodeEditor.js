import"../../../../base/browser/dom.js";import{isEqual as i}from"../../../../base/common/resources.js";import{assertIsDefined as r}from"../../../../base/common/types.js";import"../../../../base/common/uri.js";import"../../../../editor/browser/editorBrowser.js";import{CodeEditorWidget as d}from"../../../../editor/browser/widget/codeEditor/codeEditorWidget.js";import"../../../../editor/common/config/editorOptions.js";import{ScrollType as n}from"../../../../editor/common/editorCommon.js";import{localize as s}from"../../../../nls.js";import{IContextKeyService as p}from"../../../../platform/contextkey/common/contextkey.js";import"../../../../platform/editor/common/editor.js";import"../../../common/editor.js";import{applyTextEditorOptions as u}from"../../../common/editor/editorOptions.js";import{AbstractTextEditor as l}from"./textEditor.js";class U extends l{editorControl=void 0;get scopedContextKeyService(){return this.editorControl?.invokeWithinContext(t=>t.get(p))}getTitle(){return this.input?this.input.getName():s("textEditor","Text Editor")}createEditorControl(t,e){this.editorControl=this._register(this.instantiationService.createInstance(d,t,e,this.getCodeEditorWidgetOptions()))}getCodeEditorWidgetOptions(){return Object.create(null)}updateEditorControlOptions(t){this.editorControl?.updateOptions(t)}getMainControl(){return this.editorControl}getControl(){return this.editorControl}computeEditorViewState(t){if(!this.editorControl)return;const e=this.editorControl.getModel();if(!e)return;const o=e.uri;if(o&&i(o,t))return this.editorControl.saveViewState()??void 0}setOptions(t){super.setOptions(t),t&&u(t,r(this.editorControl),n.Smooth)}focus(){super.focus(),this.editorControl?.focus()}hasFocus(){return this.editorControl?.hasTextFocus()||super.hasFocus()}setEditorVisible(t){super.setEditorVisible(t),t?this.editorControl?.onVisible():this.editorControl?.onHide()}layout(t){this.editorControl?.layout(t)}}export{U as AbstractTextCodeEditor};
