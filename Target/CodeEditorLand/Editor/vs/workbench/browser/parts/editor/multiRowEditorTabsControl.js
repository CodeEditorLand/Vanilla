var C=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var E=(n,e,t,i)=>{for(var o=i>1?void 0:i?b(e,t):e,s=n.length-1,r;s>=0;s--)(r=n[s])&&(o=(i?r(e,t,o):r(o))||o);return i&&o&&C(e,t,o),o},c=(n,e)=>(t,i)=>e(t,i,n);import{Dimension as p}from"../../../../base/browser/dom.js";import{IInstantiationService as y}from"../../../../platform/instantiation/common/instantiation.js";import"./editor.js";import"./editorTabsControl.js";import{MultiEditorTabsControl as u}from"./multiEditorTabsControl.js";import"../../../common/editor.js";import"../../../common/editor/editorInput.js";import{Disposable as T}from"../../../../base/common/lifecycle.js";import{StickyEditorGroupModel as v,UnstickyEditorGroupModel as k}from"../../../common/editor/filteredEditorGroupModel.js";import"./editorTitleControl.js";import"../../../common/editor/editorGroupModel.js";let l=class extends T{constructor(t,i,o,s,r,h){super();this.parent=t;this.groupsView=o;this.groupView=s;this.model=r;this.instantiationService=h;const a=this._register(new v(this.model)),d=this._register(new k(this.model));this.stickyEditorTabsControl=this._register(this.instantiationService.createInstance(u,this.parent,i,this.groupsView,this.groupView,a)),this.unstickyEditorTabsControl=this._register(this.instantiationService.createInstance(u,this.parent,i,this.groupsView,this.groupView,d)),this.handleTabBarsStateChange()}stickyEditorTabsControl;unstickyEditorTabsControl;activeControl;handleTabBarsStateChange(){this.activeControl=this.model.activeEditor?this.getEditorTabsController(this.model.activeEditor):void 0,this.handleTabBarsLayoutChange()}handleTabBarsLayoutChange(){if(this.groupView.count===0)return;const t=this.parent.classList.contains("two-tab-bars"),i=this.groupView.count!==this.groupView.stickyCount&&this.groupView.stickyCount>0;this.parent.classList.toggle("two-tab-bars",i),t!==i&&this.groupView.relayout()}didActiveControlChange(){return this.activeControl!==(this.model.activeEditor?this.getEditorTabsController(this.model.activeEditor):void 0)}getEditorTabsController(t){return this.model.isSticky(t)?this.stickyEditorTabsControl:this.unstickyEditorTabsControl}openEditor(t,i){const o=this.didActiveControlChange(),r=this.getEditorTabsController(t).openEditor(t,i)||o;return r&&this.handleOpenedEditors(),r}openEditors(t){const i=t.filter(d=>this.model.isSticky(d)),o=t.filter(d=>!this.model.isSticky(d)),s=this.didActiveControlChange(),r=this.stickyEditorTabsControl.openEditors(i),h=this.unstickyEditorTabsControl.openEditors(o),a=r||h||s;return a&&this.handleOpenedEditors(),a}handleOpenedEditors(){this.handleTabBarsStateChange()}beforeCloseEditor(t){this.getEditorTabsController(t).beforeCloseEditor(t)}closeEditor(t){this.stickyEditorTabsControl.closeEditor(t),this.unstickyEditorTabsControl.closeEditor(t),this.handleClosedEditors()}closeEditors(t){const i=t.filter(s=>this.model.isSticky(s)),o=t.filter(s=>!this.model.isSticky(s));this.stickyEditorTabsControl.closeEditors(i),this.unstickyEditorTabsControl.closeEditors(o),this.handleClosedEditors()}handleClosedEditors(){this.handleTabBarsStateChange()}moveEditor(t,i,o,s){s?(this.model.isSticky(t)?(this.stickyEditorTabsControl.openEditor(t),this.unstickyEditorTabsControl.closeEditor(t)):(this.stickyEditorTabsControl.closeEditor(t),this.unstickyEditorTabsControl.openEditor(t)),this.handleTabBarsStateChange()):this.model.isSticky(t)?this.stickyEditorTabsControl.moveEditor(t,i,o,s):this.unstickyEditorTabsControl.moveEditor(t,i-this.model.stickyCount,o-this.model.stickyCount,s)}pinEditor(t){this.getEditorTabsController(t).pinEditor(t)}stickEditor(t){this.unstickyEditorTabsControl.closeEditor(t),this.stickyEditorTabsControl.openEditor(t),this.handleTabBarsStateChange()}unstickEditor(t){this.stickyEditorTabsControl.closeEditor(t),this.unstickyEditorTabsControl.openEditor(t),this.handleTabBarsStateChange()}setActive(t){this.stickyEditorTabsControl.setActive(t),this.unstickyEditorTabsControl.setActive(t)}updateEditorSelections(){this.stickyEditorTabsControl.updateEditorSelections(),this.unstickyEditorTabsControl.updateEditorSelections()}updateEditorLabel(t){this.getEditorTabsController(t).updateEditorLabel(t)}updateEditorDirty(t){this.getEditorTabsController(t).updateEditorDirty(t)}updateOptions(t,i){this.stickyEditorTabsControl.updateOptions(t,i),this.unstickyEditorTabsControl.updateOptions(t,i)}layout(t){const i=this.stickyEditorTabsControl.layout(t),o={container:t.container,available:new p(t.available.width,t.available.height-i.height)},s=this.unstickyEditorTabsControl.layout(o);return new p(t.container.width,i.height+s.height)}getHeight(){return this.stickyEditorTabsControl.getHeight()+this.unstickyEditorTabsControl.getHeight()}dispose(){this.parent.classList.toggle("two-tab-bars",!1),super.dispose()}};l=E([c(5,y)],l);export{l as MultiRowEditorControl};
