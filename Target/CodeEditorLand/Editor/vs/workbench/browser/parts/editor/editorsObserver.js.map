{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorsObserver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LinkedMap, ResourceMap, Touch } from \"../../../../base/common/map.js\";\nimport { equals } from \"../../../../base/common/objects.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IResourceEditorInputIdentifier } from \"../../../../platform/editor/common/editor.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tEditorExtensions,\n\tEditorInputCapabilities,\n\tEditorsOrder,\n\ttype GroupIdentifier,\n\tGroupModelChangeKind,\n\ttype IEditorFactoryRegistry,\n\ttype IEditorIdentifier,\n\ttype IEditorPartOptionsChangeEvent,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { SideBySideEditorInput } from \"../../../common/editor/sideBySideEditorInput.js\";\nimport {\n\tGroupsOrder,\n\ttype IEditorGroup,\n\ttype IEditorGroupsContainer,\n\tIEditorGroupsService,\n} from \"../../../services/editor/common/editorGroupsService.js\";\n\ninterface ISerializedEditorsList {\n\tentries: ISerializedEditorIdentifier[];\n}\n\ninterface ISerializedEditorIdentifier {\n\tgroupId: GroupIdentifier;\n\tindex: number;\n}\n\n/**\n * A observer of opened editors across all editor groups by most recently used.\n * Rules:\n * - the last editor in the list is the one most recently activated\n * - the first editor in the list is the one that was activated the longest time ago\n * - an editor that opens inactive will be placed behind the currently active editor\n *\n * The observer may start to close editors based on the workbench.editor.limit setting.\n */\nexport class EditorsObserver extends Disposable {\n\tprivate static readonly STORAGE_KEY = \"editors.mru\";\n\n\tprivate readonly keyMap = new Map<\n\t\tGroupIdentifier,\n\t\tMap<EditorInput, IEditorIdentifier>\n\t>();\n\tprivate readonly mostRecentEditorsMap = new LinkedMap<\n\t\tIEditorIdentifier,\n\t\tIEditorIdentifier\n\t>();\n\tprivate readonly editorsPerResourceCounter = new ResourceMap<\n\t\tMap<string /* typeId/editorId */, number /* counter */>\n\t>();\n\n\tprivate readonly _onDidMostRecentlyActiveEditorsChange = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidMostRecentlyActiveEditorsChange =\n\t\tthis._onDidMostRecentlyActiveEditorsChange.event;\n\n\tget count(): number {\n\t\treturn this.mostRecentEditorsMap.size;\n\t}\n\n\tget editors(): IEditorIdentifier[] {\n\t\treturn [...this.mostRecentEditorsMap.values()];\n\t}\n\n\thasEditor(editor: IResourceEditorInputIdentifier): boolean {\n\t\tconst editors = this.editorsPerResourceCounter.get(editor.resource);\n\n\t\treturn editors?.has(this.toIdentifier(editor)) ?? false;\n\t}\n\n\thasEditors(resource: URI): boolean {\n\t\treturn this.editorsPerResourceCounter.has(resource);\n\t}\n\n\tprivate toIdentifier(typeId: string, editorId: string | undefined): string;\n\tprivate toIdentifier(editor: IResourceEditorInputIdentifier): string;\n\tprivate toIdentifier(\n\t\targ1: string | IResourceEditorInputIdentifier,\n\t\teditorId?: string | undefined,\n\t): string {\n\t\tif (typeof arg1 !== \"string\") {\n\t\t\treturn this.toIdentifier(arg1.typeId, arg1.editorId);\n\t\t}\n\n\t\tif (editorId) {\n\t\t\treturn `${arg1}/${editorId}`;\n\t\t}\n\n\t\treturn arg1;\n\t}\n\n\tprivate readonly editorGroupsContainer: IEditorGroupsContainer;\n\tprivate readonly isScoped: boolean;\n\n\tconstructor(\n\t\teditorGroupsContainer: IEditorGroupsContainer | undefined,\n\t\t@IEditorGroupsService private editorGroupService: IEditorGroupsService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tthis.editorGroupsContainer = editorGroupsContainer ?? editorGroupService;\n\t\tthis.isScoped = !!editorGroupsContainer;\n\n\t\tthis.registerListeners();\n\t\tthis.loadState();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.editorGroupsContainer.onDidAddGroup((group) =>\n\t\t\t\tthis.onGroupAdded(group),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editorGroupService.onDidChangeEditorPartOptions((e) =>\n\t\t\t\tthis.onDidChangeEditorPartOptions(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.storageService.onWillSaveState(() => this.saveState()),\n\t\t);\n\t}\n\n\tprivate onGroupAdded(group: IEditorGroup): void {\n\t\t// Make sure to add any already existing editor\n\t\t// of the new group into our list in LRU order\n\t\tconst groupEditorsMru = group.getEditors(\n\t\t\tEditorsOrder.MOST_RECENTLY_ACTIVE,\n\t\t);\n\t\tfor (let i = groupEditorsMru.length - 1; i >= 0; i--) {\n\t\t\tthis.addMostRecentEditor(\n\t\t\t\tgroup,\n\t\t\t\tgroupEditorsMru[i],\n\t\t\t\tfalse /* is not active */,\n\t\t\t\ttrue /* is new */,\n\t\t\t);\n\t\t}\n\n\t\t// Make sure that active editor is put as first if group is active\n\t\tif (\n\t\t\tthis.editorGroupsContainer.activeGroup === group &&\n\t\t\tgroup.activeEditor\n\t\t) {\n\t\t\tthis.addMostRecentEditor(\n\t\t\t\tgroup,\n\t\t\t\tgroup.activeEditor,\n\t\t\t\ttrue /* is active */,\n\t\t\t\tfalse /* already added before */,\n\t\t\t);\n\t\t}\n\n\t\t// Group Listeners\n\t\tthis.registerGroupListeners(group);\n\t}\n\n\tprivate registerGroupListeners(group: IEditorGroup): void {\n\t\tconst groupDisposables = new DisposableStore();\n\t\tgroupDisposables.add(\n\t\t\tgroup.onDidModelChange((e) => {\n\t\t\t\tswitch (e.kind) {\n\t\t\t\t\t// Group gets active: put active editor as most recent\n\t\t\t\t\tcase GroupModelChangeKind.GROUP_ACTIVE: {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis.editorGroupsContainer.activeGroup === group &&\n\t\t\t\t\t\t\tgroup.activeEditor\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.addMostRecentEditor(\n\t\t\t\t\t\t\t\tgroup,\n\t\t\t\t\t\t\t\tgroup.activeEditor,\n\t\t\t\t\t\t\t\ttrue /* is active */,\n\t\t\t\t\t\t\t\tfalse /* editor already opened */,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Editor opens: put it as second most recent\n\t\t\t\t\t//\n\t\t\t\t\t// Also check for maximum allowed number of editors and\n\t\t\t\t\t// start to close oldest ones if needed.\n\t\t\t\t\tcase GroupModelChangeKind.EDITOR_OPEN: {\n\t\t\t\t\t\tif (e.editor) {\n\t\t\t\t\t\t\tthis.addMostRecentEditor(\n\t\t\t\t\t\t\t\tgroup,\n\t\t\t\t\t\t\t\te.editor,\n\t\t\t\t\t\t\t\tfalse /* is not active */,\n\t\t\t\t\t\t\t\ttrue /* is new */,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.ensureOpenedEditorsLimit(\n\t\t\t\t\t\t\t\t{ groupId: group.id, editor: e.editor },\n\t\t\t\t\t\t\t\tgroup.id,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Editor closes: remove from recently opened\n\t\tgroupDisposables.add(\n\t\t\tgroup.onDidCloseEditor((e) => {\n\t\t\t\tthis.removeMostRecentEditor(group, e.editor);\n\t\t\t}),\n\t\t);\n\n\t\t// Editor gets active: put active editor as most recent\n\t\t// if group is active, otherwise second most recent\n\t\tgroupDisposables.add(\n\t\t\tgroup.onDidActiveEditorChange((e) => {\n\t\t\t\tif (e.editor) {\n\t\t\t\t\tthis.addMostRecentEditor(\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\te.editor,\n\t\t\t\t\t\tthis.editorGroupsContainer.activeGroup === group,\n\t\t\t\t\t\tfalse /* editor already opened */,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Make sure to cleanup on dispose\n\t\tEvent.once(group.onWillDispose)(() => dispose(groupDisposables));\n\t}\n\n\tprivate onDidChangeEditorPartOptions(\n\t\tevent: IEditorPartOptionsChangeEvent,\n\t): void {\n\t\tif (!equals(event.newPartOptions.limit, event.oldPartOptions.limit)) {\n\t\t\tconst activeGroup = this.editorGroupsContainer.activeGroup;\n\t\t\tlet exclude: IEditorIdentifier | undefined;\n\t\t\tif (activeGroup.activeEditor) {\n\t\t\t\texclude = {\n\t\t\t\t\teditor: activeGroup.activeEditor,\n\t\t\t\t\tgroupId: activeGroup.id,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.ensureOpenedEditorsLimit(exclude);\n\t\t}\n\t}\n\n\tprivate addMostRecentEditor(\n\t\tgroup: IEditorGroup,\n\t\teditor: EditorInput,\n\t\tisActive: boolean,\n\t\tisNew: boolean,\n\t): void {\n\t\tconst key = this.ensureKey(group, editor);\n\t\tconst mostRecentEditor = this.mostRecentEditorsMap.first;\n\n\t\t// Active or first entry: add to end of map\n\t\tif (isActive || !mostRecentEditor) {\n\t\t\tthis.mostRecentEditorsMap.set(\n\t\t\t\tkey,\n\t\t\t\tkey,\n\t\t\t\tmostRecentEditor ? Touch.AsOld /* make first */ : undefined,\n\t\t\t);\n\t\t}\n\n\t\t// Otherwise: insert before most recent\n\t\telse {\n\t\t\t// we have most recent editors. as such we\n\t\t\t// put this newly opened editor right before\n\t\t\t// the current most recent one because it cannot\n\t\t\t// be the most recently active one unless\n\t\t\t// it becomes active. but it is still more\n\t\t\t// active then any other editor in the list.\n\t\t\tthis.mostRecentEditorsMap.set(\n\t\t\t\tkey,\n\t\t\t\tkey,\n\t\t\t\tTouch.AsOld /* make first */,\n\t\t\t);\n\t\t\tthis.mostRecentEditorsMap.set(\n\t\t\t\tmostRecentEditor,\n\t\t\t\tmostRecentEditor,\n\t\t\t\tTouch.AsOld /* make first */,\n\t\t\t);\n\t\t}\n\n\t\t// Update in resource map if this is a new editor\n\t\tif (isNew) {\n\t\t\tthis.updateEditorResourcesMap(editor, true);\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidMostRecentlyActiveEditorsChange.fire();\n\t}\n\n\tprivate updateEditorResourcesMap(editor: EditorInput, add: boolean): void {\n\t\t// Distill the editor resource and type id with support\n\t\t// for side by side editor's primary side too.\n\t\tlet resource: URI | undefined;\n\t\tlet typeId: string | undefined;\n\t\tlet editorId: string | undefined;\n\t\tif (editor instanceof SideBySideEditorInput) {\n\t\t\tresource = editor.primary.resource;\n\t\t\ttypeId = editor.primary.typeId;\n\t\t\teditorId = editor.primary.editorId;\n\t\t} else {\n\t\t\tresource = editor.resource;\n\t\t\ttypeId = editor.typeId;\n\t\t\teditorId = editor.editorId;\n\t\t}\n\n\t\tif (!resource) {\n\t\t\treturn; // require a resource\n\t\t}\n\n\t\tconst identifier = this.toIdentifier(typeId, editorId);\n\n\t\t// Add entry\n\t\tif (add) {\n\t\t\tlet editorsPerResource =\n\t\t\t\tthis.editorsPerResourceCounter.get(resource);\n\t\t\tif (!editorsPerResource) {\n\t\t\t\teditorsPerResource = new Map<string, number>();\n\t\t\t\tthis.editorsPerResourceCounter.set(\n\t\t\t\t\tresource,\n\t\t\t\t\teditorsPerResource,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\teditorsPerResource.set(\n\t\t\t\tidentifier,\n\t\t\t\t(editorsPerResource.get(identifier) ?? 0) + 1,\n\t\t\t);\n\t\t}\n\n\t\t// Remove entry\n\t\telse {\n\t\t\tconst editorsPerResource =\n\t\t\t\tthis.editorsPerResourceCounter.get(resource);\n\t\t\tif (editorsPerResource) {\n\t\t\t\tconst counter = editorsPerResource.get(identifier) ?? 0;\n\t\t\t\tif (counter > 1) {\n\t\t\t\t\teditorsPerResource.set(identifier, counter - 1);\n\t\t\t\t} else {\n\t\t\t\t\teditorsPerResource.delete(identifier);\n\n\t\t\t\t\tif (editorsPerResource.size === 0) {\n\t\t\t\t\t\tthis.editorsPerResourceCounter.delete(resource);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeMostRecentEditor(\n\t\tgroup: IEditorGroup,\n\t\teditor: EditorInput,\n\t): void {\n\t\t// Update in resource map\n\t\tthis.updateEditorResourcesMap(editor, false);\n\n\t\t// Update in MRU list\n\t\tconst key = this.findKey(group, editor);\n\t\tif (key) {\n\t\t\t// Remove from most recent editors\n\t\t\tthis.mostRecentEditorsMap.delete(key);\n\n\t\t\t// Remove from key map\n\t\t\tconst map = this.keyMap.get(group.id);\n\t\t\tif (map && map.delete(key.editor) && map.size === 0) {\n\t\t\t\tthis.keyMap.delete(group.id);\n\t\t\t}\n\n\t\t\t// Event\n\t\t\tthis._onDidMostRecentlyActiveEditorsChange.fire();\n\t\t}\n\t}\n\n\tprivate findKey(\n\t\tgroup: IEditorGroup,\n\t\teditor: EditorInput,\n\t): IEditorIdentifier | undefined {\n\t\tconst groupMap = this.keyMap.get(group.id);\n\t\tif (!groupMap) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn groupMap.get(editor);\n\t}\n\n\tprivate ensureKey(\n\t\tgroup: IEditorGroup,\n\t\teditor: EditorInput,\n\t): IEditorIdentifier {\n\t\tlet groupMap = this.keyMap.get(group.id);\n\t\tif (!groupMap) {\n\t\t\tgroupMap = new Map();\n\n\t\t\tthis.keyMap.set(group.id, groupMap);\n\t\t}\n\n\t\tlet key = groupMap.get(editor);\n\t\tif (!key) {\n\t\t\tkey = { groupId: group.id, editor };\n\t\t\tgroupMap.set(editor, key);\n\t\t}\n\n\t\treturn key;\n\t}\n\n\tprivate async ensureOpenedEditorsLimit(\n\t\texclude: IEditorIdentifier | undefined,\n\t\tgroupId?: GroupIdentifier,\n\t): Promise<void> {\n\t\tif (\n\t\t\t!this.editorGroupService.partOptions.limit?.enabled ||\n\t\t\ttypeof this.editorGroupService.partOptions.limit.value !==\n\t\t\t\t\"number\" ||\n\t\t\tthis.editorGroupService.partOptions.limit.value <= 0\n\t\t) {\n\t\t\treturn; // return early if not enabled or invalid\n\t\t}\n\n\t\tconst limit = this.editorGroupService.partOptions.limit.value;\n\n\t\t// In editor group\n\t\tif (this.editorGroupService.partOptions.limit?.perEditorGroup) {\n\t\t\t// For specific editor groups\n\t\t\tif (typeof groupId === \"number\") {\n\t\t\t\tconst group = this.editorGroupsContainer.getGroup(groupId);\n\t\t\t\tif (group) {\n\t\t\t\t\tawait this.doEnsureOpenedEditorsLimit(\n\t\t\t\t\t\tlimit,\n\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE)\n\t\t\t\t\t\t\t.map((editor) => ({ editor, groupId })),\n\t\t\t\t\t\texclude,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For all editor groups\n\t\t\telse {\n\t\t\t\tfor (const group of this.editorGroupsContainer.groups) {\n\t\t\t\t\tawait this.ensureOpenedEditorsLimit(exclude, group.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Across all editor groups\n\t\telse {\n\t\t\tawait this.doEnsureOpenedEditorsLimit(\n\t\t\t\tlimit,\n\t\t\t\t[...this.mostRecentEditorsMap.values()],\n\t\t\t\texclude,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async doEnsureOpenedEditorsLimit(\n\t\tlimit: number,\n\t\tmostRecentEditors: IEditorIdentifier[],\n\t\texclude?: IEditorIdentifier,\n\t): Promise<void> {\n\t\t// Check for `excludeDirty` setting and apply it by excluding\n\t\t// any recent editor that is dirty from the opened editors limit\n\t\tlet mostRecentEditorsCountingForLimit: IEditorIdentifier[];\n\t\tif (this.editorGroupService.partOptions.limit?.excludeDirty) {\n\t\t\tmostRecentEditorsCountingForLimit = mostRecentEditors.filter(\n\t\t\t\t({ editor }) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(editor.isDirty() && !editor.isSaving()) ||\n\t\t\t\t\t\teditor.hasCapability(EditorInputCapabilities.Scratchpad)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false; // not dirty editors (unless in the process of saving) or scratchpads\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\tmostRecentEditorsCountingForLimit = mostRecentEditors;\n\t\t}\n\n\t\tif (limit >= mostRecentEditorsCountingForLimit.length) {\n\t\t\treturn; // only if opened editors exceed setting and is valid and enabled\n\t\t}\n\n\t\t// Extract least recently used editors that can be closed\n\t\tconst leastRecentlyClosableEditors = mostRecentEditorsCountingForLimit\n\t\t\t.reverse()\n\t\t\t.filter(({ editor, groupId }) => {\n\t\t\t\tif (\n\t\t\t\t\t(editor.isDirty() && !editor.isSaving()) ||\n\t\t\t\t\teditor.hasCapability(EditorInputCapabilities.Scratchpad)\n\t\t\t\t) {\n\t\t\t\t\treturn false; // not dirty editors (unless in the process of saving) or scratchpads\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\texclude &&\n\t\t\t\t\teditor === exclude.editor &&\n\t\t\t\t\tgroupId === exclude.groupId\n\t\t\t\t) {\n\t\t\t\t\treturn false; // never the editor that should be excluded\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tthis.editorGroupsContainer\n\t\t\t\t\t\t.getGroup(groupId)\n\t\t\t\t\t\t?.isSticky(editor)\n\t\t\t\t) {\n\t\t\t\t\treturn false; // never sticky editors\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\n\t\t// Close editors until we reached the limit again\n\t\tlet editorsToCloseCount =\n\t\t\tmostRecentEditorsCountingForLimit.length - limit;\n\t\tconst mapGroupToEditorsToClose = new Map<\n\t\t\tGroupIdentifier,\n\t\t\tEditorInput[]\n\t\t>();\n\t\tfor (const { groupId, editor } of leastRecentlyClosableEditors) {\n\t\t\tlet editorsInGroupToClose = mapGroupToEditorsToClose.get(groupId);\n\t\t\tif (!editorsInGroupToClose) {\n\t\t\t\teditorsInGroupToClose = [];\n\t\t\t\tmapGroupToEditorsToClose.set(groupId, editorsInGroupToClose);\n\t\t\t}\n\n\t\t\teditorsInGroupToClose.push(editor);\n\t\t\teditorsToCloseCount--;\n\n\t\t\tif (editorsToCloseCount === 0) {\n\t\t\t\tbreak; // limit reached\n\t\t\t}\n\t\t}\n\n\t\tfor (const [groupId, editors] of mapGroupToEditorsToClose) {\n\t\t\tconst group = this.editorGroupsContainer.getGroup(groupId);\n\t\t\tif (group) {\n\t\t\t\tawait group.closeEditors(editors, { preserveFocus: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate saveState(): void {\n\t\tif (this.isScoped) {\n\t\t\treturn; // do not persist state when scoped\n\t\t}\n\n\t\tif (this.mostRecentEditorsMap.isEmpty()) {\n\t\t\tthis.storageService.remove(\n\t\t\t\tEditorsObserver.STORAGE_KEY,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.store(\n\t\t\t\tEditorsObserver.STORAGE_KEY,\n\t\t\t\tJSON.stringify(this.serialize()),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate serialize(): ISerializedEditorsList {\n\t\tconst registry = Registry.as<IEditorFactoryRegistry>(\n\t\t\tEditorExtensions.EditorFactory,\n\t\t);\n\n\t\tconst entries = [...this.mostRecentEditorsMap.values()];\n\t\tconst mapGroupToSerializableEditorsOfGroup = new Map<\n\t\t\tIEditorGroup,\n\t\t\tEditorInput[]\n\t\t>();\n\n\t\treturn {\n\t\t\tentries: coalesce(\n\t\t\t\tentries.map(({ editor, groupId }) => {\n\t\t\t\t\t// Find group for entry\n\t\t\t\t\tconst group = this.editorGroupsContainer.getGroup(groupId);\n\t\t\t\t\tif (!group) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find serializable editors of group\n\t\t\t\t\tlet serializableEditorsOfGroup =\n\t\t\t\t\t\tmapGroupToSerializableEditorsOfGroup.get(group);\n\t\t\t\t\tif (!serializableEditorsOfGroup) {\n\t\t\t\t\t\tserializableEditorsOfGroup = group\n\t\t\t\t\t\t\t.getEditors(EditorsOrder.SEQUENTIAL)\n\t\t\t\t\t\t\t.filter((editor) => {\n\t\t\t\t\t\t\t\tconst editorSerializer =\n\t\t\t\t\t\t\t\t\tregistry.getEditorSerializer(editor);\n\n\t\t\t\t\t\t\t\treturn editorSerializer?.canSerialize(editor);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tmapGroupToSerializableEditorsOfGroup.set(\n\t\t\t\t\t\t\tgroup,\n\t\t\t\t\t\t\tserializableEditorsOfGroup,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only store the index of the editor of that group\n\t\t\t\t\t// which can be undefined if the editor is not serializable\n\t\t\t\t\tconst index = serializableEditorsOfGroup.indexOf(editor);\n\t\t\t\t\tif (index === -1) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn { groupId, index };\n\t\t\t\t}),\n\t\t\t),\n\t\t};\n\t}\n\n\tprivate async loadState(): Promise<void> {\n\t\tif (\n\t\t\tthis.editorGroupsContainer === this.editorGroupService.mainPart ||\n\t\t\tthis.editorGroupsContainer === this.editorGroupService\n\t\t) {\n\t\t\tawait this.editorGroupService.whenReady;\n\t\t}\n\n\t\t// Previous state: Load editors map from persisted state\n\t\t// unless we are running in scoped mode\n\t\tlet hasRestorableState = false;\n\t\tif (!this.isScoped) {\n\t\t\tconst serialized = this.storageService.get(\n\t\t\t\tEditorsObserver.STORAGE_KEY,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t\tif (serialized) {\n\t\t\t\thasRestorableState = true;\n\t\t\t\tthis.deserialize(JSON.parse(serialized));\n\t\t\t}\n\t\t}\n\n\t\t// No previous state: best we can do is add each editor\n\t\t// from oldest to most recently used editor group\n\t\tif (!hasRestorableState) {\n\t\t\tconst groups = this.editorGroupsContainer.getGroups(\n\t\t\t\tGroupsOrder.MOST_RECENTLY_ACTIVE,\n\t\t\t);\n\t\t\tfor (let i = groups.length - 1; i >= 0; i--) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst groupEditorsMru = group.getEditors(\n\t\t\t\t\tEditorsOrder.MOST_RECENTLY_ACTIVE,\n\t\t\t\t);\n\t\t\t\tfor (let i = groupEditorsMru.length - 1; i >= 0; i--) {\n\t\t\t\t\tthis.addMostRecentEditor(\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\tgroupEditorsMru[i],\n\t\t\t\t\t\ttrue /* enforce as active to preserve order */,\n\t\t\t\t\t\ttrue /* is new */,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we listen on group changes for those that exist on startup\n\t\tfor (const group of this.editorGroupsContainer.groups) {\n\t\t\tthis.registerGroupListeners(group);\n\t\t}\n\t}\n\n\tprivate deserialize(serialized: ISerializedEditorsList): void {\n\t\tconst mapValues: [IEditorIdentifier, IEditorIdentifier][] = [];\n\n\t\tfor (const { groupId, index } of serialized.entries) {\n\t\t\t// Find group for entry\n\t\t\tconst group = this.editorGroupsContainer.getGroup(groupId);\n\t\t\tif (!group) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Find editor for entry\n\t\t\tconst editor = group.getEditorByIndex(index);\n\t\t\tif (!editor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Make sure key is registered as well\n\t\t\tconst editorIdentifier = this.ensureKey(group, editor);\n\t\t\tmapValues.push([editorIdentifier, editorIdentifier]);\n\n\t\t\t// Update in resource map\n\t\t\tthis.updateEditorResourcesMap(editor, true);\n\t\t}\n\n\t\t// Fill map with deserialized values\n\t\tthis.mostRecentEditorsMap.fromJSON(mapValues);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["editor", "i"]
}
