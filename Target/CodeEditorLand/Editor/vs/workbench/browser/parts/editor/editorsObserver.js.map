{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorsObserver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorFactoryRegistry, IEditorIdentifier, GroupIdentifier, EditorExtensions, IEditorPartOptionsChangeEvent, EditorsOrder, GroupModelChangeKind, EditorInputCapabilities } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';\nimport { dispose, Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { IEditorGroupsService, IEditorGroup, GroupsOrder, IEditorGroupsContainer } from '../../../services/editor/common/editorGroupsService.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { LinkedMap, Touch, ResourceMap } from '../../../../base/common/map.js';\nimport { equals } from '../../../../base/common/objects.js';\nimport { IResourceEditorInputIdentifier } from '../../../../platform/editor/common/editor.js';\nimport { URI } from '../../../../base/common/uri.js';\n\ninterface ISerializedEditorsList {\n\tentries: ISerializedEditorIdentifier[];\n}\n\ninterface ISerializedEditorIdentifier {\n\tgroupId: GroupIdentifier;\n\tindex: number;\n}\n\n/**\n * A observer of opened editors across all editor groups by most recently used.\n * Rules:\n * - the last editor in the list is the one most recently activated\n * - the first editor in the list is the one that was activated the longest time ago\n * - an editor that opens inactive will be placed behind the currently active editor\n *\n * The observer may start to close editors based on the workbench.editor.limit setting.\n */\nexport class EditorsObserver extends Disposable {\n\n\tprivate static readonly STORAGE_KEY = 'editors.mru';\n\n\tprivate readonly keyMap = new Map<GroupIdentifier, Map<EditorInput, IEditorIdentifier>>();\n\tprivate readonly mostRecentEditorsMap = new LinkedMap<IEditorIdentifier, IEditorIdentifier>();\n\tprivate readonly editorsPerResourceCounter = new ResourceMap<Map<string /* typeId/editorId */, number /* counter */>>();\n\n\tprivate readonly _onDidMostRecentlyActiveEditorsChange = this._register(new Emitter<void>());\n\treadonly onDidMostRecentlyActiveEditorsChange = this._onDidMostRecentlyActiveEditorsChange.event;\n\n\tget count(): number {\n\t\treturn this.mostRecentEditorsMap.size;\n\t}\n\n\tget editors(): IEditorIdentifier[] {\n\t\treturn [...this.mostRecentEditorsMap.values()];\n\t}\n\n\thasEditor(editor: IResourceEditorInputIdentifier): boolean {\n\t\tconst editors = this.editorsPerResourceCounter.get(editor.resource);\n\n\t\treturn editors?.has(this.toIdentifier(editor)) ?? false;\n\t}\n\n\thasEditors(resource: URI): boolean {\n\t\treturn this.editorsPerResourceCounter.has(resource);\n\t}\n\n\tprivate toIdentifier(typeId: string, editorId: string | undefined): string;\n\tprivate toIdentifier(editor: IResourceEditorInputIdentifier): string;\n\tprivate toIdentifier(arg1: string | IResourceEditorInputIdentifier, editorId?: string | undefined): string {\n\t\tif (typeof arg1 !== 'string') {\n\t\t\treturn this.toIdentifier(arg1.typeId, arg1.editorId);\n\t\t}\n\n\t\tif (editorId) {\n\t\t\treturn `${arg1}/${editorId}`;\n\t\t}\n\n\t\treturn arg1;\n\t}\n\n\tprivate readonly editorGroupsContainer: IEditorGroupsContainer;\n\tprivate readonly isScoped: boolean;\n\n\tconstructor(\n\t\teditorGroupsContainer: IEditorGroupsContainer | undefined,\n\t\t@IEditorGroupsService private editorGroupService: IEditorGroupsService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tthis.editorGroupsContainer = editorGroupsContainer ?? editorGroupService;\n\t\tthis.isScoped = !!editorGroupsContainer;\n\n\t\tthis.registerListeners();\n\t\tthis.loadState();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.editorGroupsContainer.onDidAddGroup(group => this.onGroupAdded(group)));\n\t\tthis._register(this.editorGroupService.onDidChangeEditorPartOptions(e => this.onDidChangeEditorPartOptions(e)));\n\t\tthis._register(this.storageService.onWillSaveState(() => this.saveState()));\n\t}\n\n\tprivate onGroupAdded(group: IEditorGroup): void {\n\n\t\t// Make sure to add any already existing editor\n\t\t// of the new group into our list in LRU order\n\t\tconst groupEditorsMru = group.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE);\n\t\tfor (let i = groupEditorsMru.length - 1; i >= 0; i--) {\n\t\t\tthis.addMostRecentEditor(group, groupEditorsMru[i], false /* is not active */, true /* is new */);\n\t\t}\n\n\t\t// Make sure that active editor is put as first if group is active\n\t\tif (this.editorGroupsContainer.activeGroup === group && group.activeEditor) {\n\t\t\tthis.addMostRecentEditor(group, group.activeEditor, true /* is active */, false /* already added before */);\n\t\t}\n\n\t\t// Group Listeners\n\t\tthis.registerGroupListeners(group);\n\t}\n\n\tprivate registerGroupListeners(group: IEditorGroup): void {\n\t\tconst groupDisposables = new DisposableStore();\n\t\tgroupDisposables.add(group.onDidModelChange(e => {\n\t\t\tswitch (e.kind) {\n\n\t\t\t\t// Group gets active: put active editor as most recent\n\t\t\t\tcase GroupModelChangeKind.GROUP_ACTIVE: {\n\t\t\t\t\tif (this.editorGroupsContainer.activeGroup === group && group.activeEditor) {\n\t\t\t\t\t\tthis.addMostRecentEditor(group, group.activeEditor, true /* is active */, false /* editor already opened */);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Editor opens: put it as second most recent\n\t\t\t\t//\n\t\t\t\t// Also check for maximum allowed number of editors and\n\t\t\t\t// start to close oldest ones if needed.\n\t\t\t\tcase GroupModelChangeKind.EDITOR_OPEN: {\n\t\t\t\t\tif (e.editor) {\n\t\t\t\t\t\tthis.addMostRecentEditor(group, e.editor, false /* is not active */, true /* is new */);\n\t\t\t\t\t\tthis.ensureOpenedEditorsLimit({ groupId: group.id, editor: e.editor }, group.id);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Editor closes: remove from recently opened\n\t\tgroupDisposables.add(group.onDidCloseEditor(e => {\n\t\t\tthis.removeMostRecentEditor(group, e.editor);\n\t\t}));\n\n\t\t// Editor gets active: put active editor as most recent\n\t\t// if group is active, otherwise second most recent\n\t\tgroupDisposables.add(group.onDidActiveEditorChange(e => {\n\t\t\tif (e.editor) {\n\t\t\t\tthis.addMostRecentEditor(group, e.editor, this.editorGroupsContainer.activeGroup === group, false /* editor already opened */);\n\t\t\t}\n\t\t}));\n\n\t\t// Make sure to cleanup on dispose\n\t\tEvent.once(group.onWillDispose)(() => dispose(groupDisposables));\n\t}\n\n\tprivate onDidChangeEditorPartOptions(event: IEditorPartOptionsChangeEvent): void {\n\t\tif (!equals(event.newPartOptions.limit, event.oldPartOptions.limit)) {\n\t\t\tconst activeGroup = this.editorGroupsContainer.activeGroup;\n\t\t\tlet exclude: IEditorIdentifier | undefined = undefined;\n\t\t\tif (activeGroup.activeEditor) {\n\t\t\t\texclude = { editor: activeGroup.activeEditor, groupId: activeGroup.id };\n\t\t\t}\n\n\t\t\tthis.ensureOpenedEditorsLimit(exclude);\n\t\t}\n\t}\n\n\tprivate addMostRecentEditor(group: IEditorGroup, editor: EditorInput, isActive: boolean, isNew: boolean): void {\n\t\tconst key = this.ensureKey(group, editor);\n\t\tconst mostRecentEditor = this.mostRecentEditorsMap.first;\n\n\t\t// Active or first entry: add to end of map\n\t\tif (isActive || !mostRecentEditor) {\n\t\t\tthis.mostRecentEditorsMap.set(key, key, mostRecentEditor ? Touch.AsOld /* make first */ : undefined);\n\t\t}\n\n\t\t// Otherwise: insert before most recent\n\t\telse {\n\t\t\t// we have most recent editors. as such we\n\t\t\t// put this newly opened editor right before\n\t\t\t// the current most recent one because it cannot\n\t\t\t// be the most recently active one unless\n\t\t\t// it becomes active. but it is still more\n\t\t\t// active then any other editor in the list.\n\t\t\tthis.mostRecentEditorsMap.set(key, key, Touch.AsOld /* make first */);\n\t\t\tthis.mostRecentEditorsMap.set(mostRecentEditor, mostRecentEditor, Touch.AsOld /* make first */);\n\t\t}\n\n\t\t// Update in resource map if this is a new editor\n\t\tif (isNew) {\n\t\t\tthis.updateEditorResourcesMap(editor, true);\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidMostRecentlyActiveEditorsChange.fire();\n\t}\n\n\tprivate updateEditorResourcesMap(editor: EditorInput, add: boolean): void {\n\n\t\t// Distill the editor resource and type id with support\n\t\t// for side by side editor's primary side too.\n\t\tlet resource: URI | undefined = undefined;\n\t\tlet typeId: string | undefined = undefined;\n\t\tlet editorId: string | undefined = undefined;\n\t\tif (editor instanceof SideBySideEditorInput) {\n\t\t\tresource = editor.primary.resource;\n\t\t\ttypeId = editor.primary.typeId;\n\t\t\teditorId = editor.primary.editorId;\n\t\t} else {\n\t\t\tresource = editor.resource;\n\t\t\ttypeId = editor.typeId;\n\t\t\teditorId = editor.editorId;\n\t\t}\n\n\t\tif (!resource) {\n\t\t\treturn; // require a resource\n\t\t}\n\n\t\tconst identifier = this.toIdentifier(typeId, editorId);\n\n\t\t// Add entry\n\t\tif (add) {\n\t\t\tlet editorsPerResource = this.editorsPerResourceCounter.get(resource);\n\t\t\tif (!editorsPerResource) {\n\t\t\t\teditorsPerResource = new Map<string, number>();\n\t\t\t\tthis.editorsPerResourceCounter.set(resource, editorsPerResource);\n\t\t\t}\n\n\t\t\teditorsPerResource.set(identifier, (editorsPerResource.get(identifier) ?? 0) + 1);\n\t\t}\n\n\t\t// Remove entry\n\t\telse {\n\t\t\tconst editorsPerResource = this.editorsPerResourceCounter.get(resource);\n\t\t\tif (editorsPerResource) {\n\t\t\t\tconst counter = editorsPerResource.get(identifier) ?? 0;\n\t\t\t\tif (counter > 1) {\n\t\t\t\t\teditorsPerResource.set(identifier, counter - 1);\n\t\t\t\t} else {\n\t\t\t\t\teditorsPerResource.delete(identifier);\n\n\t\t\t\t\tif (editorsPerResource.size === 0) {\n\t\t\t\t\t\tthis.editorsPerResourceCounter.delete(resource);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeMostRecentEditor(group: IEditorGroup, editor: EditorInput): void {\n\n\t\t// Update in resource map\n\t\tthis.updateEditorResourcesMap(editor, false);\n\n\t\t// Update in MRU list\n\t\tconst key = this.findKey(group, editor);\n\t\tif (key) {\n\n\t\t\t// Remove from most recent editors\n\t\t\tthis.mostRecentEditorsMap.delete(key);\n\n\t\t\t// Remove from key map\n\t\t\tconst map = this.keyMap.get(group.id);\n\t\t\tif (map && map.delete(key.editor) && map.size === 0) {\n\t\t\t\tthis.keyMap.delete(group.id);\n\t\t\t}\n\n\t\t\t// Event\n\t\t\tthis._onDidMostRecentlyActiveEditorsChange.fire();\n\t\t}\n\t}\n\n\tprivate findKey(group: IEditorGroup, editor: EditorInput): IEditorIdentifier | undefined {\n\t\tconst groupMap = this.keyMap.get(group.id);\n\t\tif (!groupMap) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn groupMap.get(editor);\n\t}\n\n\tprivate ensureKey(group: IEditorGroup, editor: EditorInput): IEditorIdentifier {\n\t\tlet groupMap = this.keyMap.get(group.id);\n\t\tif (!groupMap) {\n\t\t\tgroupMap = new Map();\n\n\t\t\tthis.keyMap.set(group.id, groupMap);\n\t\t}\n\n\t\tlet key = groupMap.get(editor);\n\t\tif (!key) {\n\t\t\tkey = { groupId: group.id, editor };\n\t\t\tgroupMap.set(editor, key);\n\t\t}\n\n\t\treturn key;\n\t}\n\n\tprivate async ensureOpenedEditorsLimit(exclude: IEditorIdentifier | undefined, groupId?: GroupIdentifier): Promise<void> {\n\t\tif (\n\t\t\t!this.editorGroupService.partOptions.limit?.enabled ||\n\t\t\ttypeof this.editorGroupService.partOptions.limit.value !== 'number' ||\n\t\t\tthis.editorGroupService.partOptions.limit.value <= 0\n\t\t) {\n\t\t\treturn; // return early if not enabled or invalid\n\t\t}\n\n\t\tconst limit = this.editorGroupService.partOptions.limit.value;\n\n\t\t// In editor group\n\t\tif (this.editorGroupService.partOptions.limit?.perEditorGroup) {\n\n\t\t\t// For specific editor groups\n\t\t\tif (typeof groupId === 'number') {\n\t\t\t\tconst group = this.editorGroupsContainer.getGroup(groupId);\n\t\t\t\tif (group) {\n\t\t\t\t\tawait this.doEnsureOpenedEditorsLimit(limit, group.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE).map(editor => ({ editor, groupId })), exclude);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For all editor groups\n\t\t\telse {\n\t\t\t\tfor (const group of this.editorGroupsContainer.groups) {\n\t\t\t\t\tawait this.ensureOpenedEditorsLimit(exclude, group.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Across all editor groups\n\t\telse {\n\t\t\tawait this.doEnsureOpenedEditorsLimit(limit, [...this.mostRecentEditorsMap.values()], exclude);\n\t\t}\n\t}\n\n\tprivate async doEnsureOpenedEditorsLimit(limit: number, mostRecentEditors: IEditorIdentifier[], exclude?: IEditorIdentifier): Promise<void> {\n\n\t\t// Check for `excludeDirty` setting and apply it by excluding\n\t\t// any recent editor that is dirty from the opened editors limit\n\t\tlet mostRecentEditorsCountingForLimit: IEditorIdentifier[];\n\t\tif (this.editorGroupService.partOptions.limit?.excludeDirty) {\n\t\t\tmostRecentEditorsCountingForLimit = mostRecentEditors.filter(({ editor }) => {\n\t\t\t\tif ((editor.isDirty() && !editor.isSaving()) || editor.hasCapability(EditorInputCapabilities.Scratchpad)) {\n\t\t\t\t\treturn false; // not dirty editors (unless in the process of saving) or scratchpads\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t} else {\n\t\t\tmostRecentEditorsCountingForLimit = mostRecentEditors;\n\t\t}\n\n\t\tif (limit >= mostRecentEditorsCountingForLimit.length) {\n\t\t\treturn; // only if opened editors exceed setting and is valid and enabled\n\t\t}\n\n\t\t// Extract least recently used editors that can be closed\n\t\tconst leastRecentlyClosableEditors = mostRecentEditorsCountingForLimit.reverse().filter(({ editor, groupId }) => {\n\t\t\tif ((editor.isDirty() && !editor.isSaving()) || editor.hasCapability(EditorInputCapabilities.Scratchpad)) {\n\t\t\t\treturn false; // not dirty editors (unless in the process of saving) or scratchpads\n\t\t\t}\n\n\t\t\tif (exclude && editor === exclude.editor && groupId === exclude.groupId) {\n\t\t\t\treturn false; // never the editor that should be excluded\n\t\t\t}\n\n\t\t\tif (this.editorGroupsContainer.getGroup(groupId)?.isSticky(editor)) {\n\t\t\t\treturn false; // never sticky editors\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\t// Close editors until we reached the limit again\n\t\tlet editorsToCloseCount = mostRecentEditorsCountingForLimit.length - limit;\n\t\tconst mapGroupToEditorsToClose = new Map<GroupIdentifier, EditorInput[]>();\n\t\tfor (const { groupId, editor } of leastRecentlyClosableEditors) {\n\t\t\tlet editorsInGroupToClose = mapGroupToEditorsToClose.get(groupId);\n\t\t\tif (!editorsInGroupToClose) {\n\t\t\t\teditorsInGroupToClose = [];\n\t\t\t\tmapGroupToEditorsToClose.set(groupId, editorsInGroupToClose);\n\t\t\t}\n\n\t\t\teditorsInGroupToClose.push(editor);\n\t\t\teditorsToCloseCount--;\n\n\t\t\tif (editorsToCloseCount === 0) {\n\t\t\t\tbreak; // limit reached\n\t\t\t}\n\t\t}\n\n\t\tfor (const [groupId, editors] of mapGroupToEditorsToClose) {\n\t\t\tconst group = this.editorGroupsContainer.getGroup(groupId);\n\t\t\tif (group) {\n\t\t\t\tawait group.closeEditors(editors, { preserveFocus: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate saveState(): void {\n\t\tif (this.isScoped) {\n\t\t\treturn; // do not persist state when scoped\n\t\t}\n\n\t\tif (this.mostRecentEditorsMap.isEmpty()) {\n\t\t\tthis.storageService.remove(EditorsObserver.STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.store(EditorsObserver.STORAGE_KEY, JSON.stringify(this.serialize()), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t}\n\t}\n\n\tprivate serialize(): ISerializedEditorsList {\n\t\tconst registry = Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory);\n\n\t\tconst entries = [...this.mostRecentEditorsMap.values()];\n\t\tconst mapGroupToSerializableEditorsOfGroup = new Map<IEditorGroup, EditorInput[]>();\n\n\t\treturn {\n\t\t\tentries: coalesce(entries.map(({ editor, groupId }) => {\n\n\t\t\t\t// Find group for entry\n\t\t\t\tconst group = this.editorGroupsContainer.getGroup(groupId);\n\t\t\t\tif (!group) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// Find serializable editors of group\n\t\t\t\tlet serializableEditorsOfGroup = mapGroupToSerializableEditorsOfGroup.get(group);\n\t\t\t\tif (!serializableEditorsOfGroup) {\n\t\t\t\t\tserializableEditorsOfGroup = group.getEditors(EditorsOrder.SEQUENTIAL).filter(editor => {\n\t\t\t\t\t\tconst editorSerializer = registry.getEditorSerializer(editor);\n\n\t\t\t\t\t\treturn editorSerializer?.canSerialize(editor);\n\t\t\t\t\t});\n\t\t\t\t\tmapGroupToSerializableEditorsOfGroup.set(group, serializableEditorsOfGroup);\n\t\t\t\t}\n\n\t\t\t\t// Only store the index of the editor of that group\n\t\t\t\t// which can be undefined if the editor is not serializable\n\t\t\t\tconst index = serializableEditorsOfGroup.indexOf(editor);\n\t\t\t\tif (index === -1) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn { groupId, index };\n\t\t\t}))\n\t\t};\n\t}\n\n\tprivate async loadState(): Promise<void> {\n\t\tif (this.editorGroupsContainer === this.editorGroupService.mainPart || this.editorGroupsContainer === this.editorGroupService) {\n\t\t\tawait this.editorGroupService.whenReady;\n\t\t}\n\n\t\t// Previous state: Load editors map from persisted state\n\t\t// unless we are running in scoped mode\n\t\tlet hasRestorableState = false;\n\t\tif (!this.isScoped) {\n\t\t\tconst serialized = this.storageService.get(EditorsObserver.STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t\tif (serialized) {\n\t\t\t\thasRestorableState = true;\n\t\t\t\tthis.deserialize(JSON.parse(serialized));\n\t\t\t}\n\t\t}\n\n\t\t// No previous state: best we can do is add each editor\n\t\t// from oldest to most recently used editor group\n\t\tif (!hasRestorableState) {\n\t\t\tconst groups = this.editorGroupsContainer.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\t\t\tfor (let i = groups.length - 1; i >= 0; i--) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst groupEditorsMru = group.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE);\n\t\t\t\tfor (let i = groupEditorsMru.length - 1; i >= 0; i--) {\n\t\t\t\t\tthis.addMostRecentEditor(group, groupEditorsMru[i], true /* enforce as active to preserve order */, true /* is new */);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we listen on group changes for those that exist on startup\n\t\tfor (const group of this.editorGroupsContainer.groups) {\n\t\t\tthis.registerGroupListeners(group);\n\t\t}\n\t}\n\n\tprivate deserialize(serialized: ISerializedEditorsList): void {\n\t\tconst mapValues: [IEditorIdentifier, IEditorIdentifier][] = [];\n\n\t\tfor (const { groupId, index } of serialized.entries) {\n\n\t\t\t// Find group for entry\n\t\t\tconst group = this.editorGroupsContainer.getGroup(groupId);\n\t\t\tif (!group) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Find editor for entry\n\t\t\tconst editor = group.getEditorByIndex(index);\n\t\t\tif (!editor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Make sure key is registered as well\n\t\t\tconst editorIdentifier = this.ensureKey(group, editor);\n\t\t\tmapValues.push([editorIdentifier, editorIdentifier]);\n\n\t\t\t// Update in resource map\n\t\t\tthis.updateEditorResourcesMap(editor, true);\n\t\t}\n\n\t\t// Fill map with deserialized values\n\t\tthis.mostRecentEditorsMap.fromJSON(mapValues);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB,mBAAmB,iBAAiB,kBAAkB,+BAA+B,cAAc,sBAAsB,+BAA+B;AACzL,SAAS,mBAAmB;AAC5B,SAAS,6BAA6B;AACtC,SAAS,SAAS,YAAY,uBAAuB;AACrD,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,gBAAgB;AACzB,SAAS,OAAO,eAAe;AAC/B,SAAS,sBAAsB,cAAc,aAAa,8BAA8B;AACxF,SAAS,gBAAgB;AACzB,SAAS,WAAW,OAAO,mBAAmB;AAC9C,SAAS,cAAc;AACvB,SAAS,sCAAsC;AAC/C,SAAS,WAAW;AAoBb,IAAM,kBAAN,cAA8B,WAAW;AAAA,EA8C/C,YACC,uBAC8B,oBACI,gBACjC;AACD,UAAM;AAHwB;AACI;AAIlC,SAAK,wBAAwB,yBAAyB;AACtD,SAAK,WAAW,CAAC,CAAC;AAElB,SAAK,kBAAkB;AACvB,SAAK,UAAU;AAAA,EAChB;AAAA,EA/FD,OAqCgD;AAAA;AAAA;AAAA,EAE/C,OAAwB,cAAc;AAAA,EAErB,SAAS,oBAAI,IAA0D;AAAA,EACvE,uBAAuB,IAAI,UAAgD;AAAA,EAC3E,4BAA4B,IAAI,YAAqE;AAAA,EAErG,wCAAwC,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAClF,uCAAuC,KAAK,sCAAsC;AAAA,EAE3F,IAAI,QAAgB;AACnB,WAAO,KAAK,qBAAqB;AAAA,EAClC;AAAA,EAEA,IAAI,UAA+B;AAClC,WAAO,CAAC,GAAG,KAAK,qBAAqB,OAAO,CAAC;AAAA,EAC9C;AAAA,EAEA,UAAU,QAAiD;AAC1D,UAAM,UAAU,KAAK,0BAA0B,IAAI,OAAO,QAAQ;AAElE,WAAO,SAAS,IAAI,KAAK,aAAa,MAAM,CAAC,KAAK;AAAA,EACnD;AAAA,EAEA,WAAW,UAAwB;AAClC,WAAO,KAAK,0BAA0B,IAAI,QAAQ;AAAA,EACnD;AAAA,EAIQ,aAAa,MAA+C,UAAuC;AAC1G,QAAI,OAAO,SAAS,UAAU;AAC7B,aAAO,KAAK,aAAa,KAAK,QAAQ,KAAK,QAAQ;AAAA,IACpD;AAEA,QAAI,UAAU;AACb,aAAO,GAAG,IAAI,IAAI,QAAQ;AAAA,IAC3B;AAEA,WAAO;AAAA,EACR;AAAA,EAEiB;AAAA,EACA;AAAA,EAgBT,oBAA0B;AACjC,SAAK,UAAU,KAAK,sBAAsB,cAAc,WAAS,KAAK,aAAa,KAAK,CAAC,CAAC;AAC1F,SAAK,UAAU,KAAK,mBAAmB,6BAA6B,OAAK,KAAK,6BAA6B,CAAC,CAAC,CAAC;AAC9G,SAAK,UAAU,KAAK,eAAe,gBAAgB,MAAM,KAAK,UAAU,CAAC,CAAC;AAAA,EAC3E;AAAA,EAEQ,aAAa,OAA2B;AAI/C,UAAM,kBAAkB,MAAM,WAAW,aAAa,oBAAoB;AAC1E,aAAS,IAAI,gBAAgB,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,WAAK;AAAA,QAAoB;AAAA,QAAO,gBAAgB,CAAC;AAAA,QAAG;AAAA,QAA2B;AAAA;AAAA,MAAiB;AAAA,IACjG;AAGA,QAAI,KAAK,sBAAsB,gBAAgB,SAAS,MAAM,cAAc;AAC3E,WAAK;AAAA,QAAoB;AAAA,QAAO,MAAM;AAAA,QAAc;AAAA,QAAsB;AAAA;AAAA,MAAgC;AAAA,IAC3G;AAGA,SAAK,uBAAuB,KAAK;AAAA,EAClC;AAAA,EAEQ,uBAAuB,OAA2B;AACzD,UAAM,mBAAmB,IAAI,gBAAgB;AAC7C,qBAAiB,IAAI,MAAM,iBAAiB,OAAK;AAChD,cAAQ,EAAE,MAAM;AAAA;AAAA,QAGf,KAAK,qBAAqB,cAAc;AACvC,cAAI,KAAK,sBAAsB,gBAAgB,SAAS,MAAM,cAAc;AAC3E,iBAAK;AAAA,cAAoB;AAAA,cAAO,MAAM;AAAA,cAAc;AAAA,cAAsB;AAAA;AAAA,YAAiC;AAAA,UAC5G;AAEA;AAAA,QACD;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA,KAAK,qBAAqB,aAAa;AACtC,cAAI,EAAE,QAAQ;AACb,iBAAK;AAAA,cAAoB;AAAA,cAAO,EAAE;AAAA,cAAQ;AAAA,cAA2B;AAAA;AAAA,YAAiB;AACtF,iBAAK,yBAAyB,EAAE,SAAS,MAAM,IAAI,QAAQ,EAAE,OAAO,GAAG,MAAM,EAAE;AAAA,UAChF;AAEA;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAGF,qBAAiB,IAAI,MAAM,iBAAiB,OAAK;AAChD,WAAK,uBAAuB,OAAO,EAAE,MAAM;AAAA,IAC5C,CAAC,CAAC;AAIF,qBAAiB,IAAI,MAAM,wBAAwB,OAAK;AACvD,UAAI,EAAE,QAAQ;AACb,aAAK;AAAA,UAAoB;AAAA,UAAO,EAAE;AAAA,UAAQ,KAAK,sBAAsB,gBAAgB;AAAA,UAAO;AAAA;AAAA,QAAiC;AAAA,MAC9H;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,KAAK,MAAM,aAAa,EAAE,MAAM,QAAQ,gBAAgB,CAAC;AAAA,EAChE;AAAA,EAEQ,6BAA6B,OAA4C;AAChF,QAAI,CAAC,OAAO,MAAM,eAAe,OAAO,MAAM,eAAe,KAAK,GAAG;AACpE,YAAM,cAAc,KAAK,sBAAsB;AAC/C,UAAI,UAAyC;AAC7C,UAAI,YAAY,cAAc;AAC7B,kBAAU,EAAE,QAAQ,YAAY,cAAc,SAAS,YAAY,GAAG;AAAA,MACvE;AAEA,WAAK,yBAAyB,OAAO;AAAA,IACtC;AAAA,EACD;AAAA,EAEQ,oBAAoB,OAAqB,QAAqB,UAAmB,OAAsB;AAC9G,UAAM,MAAM,KAAK,UAAU,OAAO,MAAM;AACxC,UAAM,mBAAmB,KAAK,qBAAqB;AAGnD,QAAI,YAAY,CAAC,kBAAkB;AAClC,WAAK,qBAAqB,IAAI,KAAK,KAAK,mBAAmB,MAAM,QAAyB,MAAS;AAAA,IACpG,OAGK;AAOJ,WAAK,qBAAqB;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK,MAAM;AAAA;AAAA,MAAsB;AACpE,WAAK,qBAAqB;AAAA,QAAI;AAAA,QAAkB;AAAA,QAAkB,MAAM;AAAA;AAAA,MAAsB;AAAA,IAC/F;AAGA,QAAI,OAAO;AACV,WAAK,yBAAyB,QAAQ,IAAI;AAAA,IAC3C;AAGA,SAAK,sCAAsC,KAAK;AAAA,EACjD;AAAA,EAEQ,yBAAyB,QAAqB,KAAoB;AAIzE,QAAI,WAA4B;AAChC,QAAI,SAA6B;AACjC,QAAI,WAA+B;AACnC,QAAI,kBAAkB,uBAAuB;AAC5C,iBAAW,OAAO,QAAQ;AAC1B,eAAS,OAAO,QAAQ;AACxB,iBAAW,OAAO,QAAQ;AAAA,IAC3B,OAAO;AACN,iBAAW,OAAO;AAClB,eAAS,OAAO;AAChB,iBAAW,OAAO;AAAA,IACnB;AAEA,QAAI,CAAC,UAAU;AACd;AAAA,IACD;AAEA,UAAM,aAAa,KAAK,aAAa,QAAQ,QAAQ;AAGrD,QAAI,KAAK;AACR,UAAI,qBAAqB,KAAK,0BAA0B,IAAI,QAAQ;AACpE,UAAI,CAAC,oBAAoB;AACxB,6BAAqB,oBAAI,IAAoB;AAC7C,aAAK,0BAA0B,IAAI,UAAU,kBAAkB;AAAA,MAChE;AAEA,yBAAmB,IAAI,aAAa,mBAAmB,IAAI,UAAU,KAAK,KAAK,CAAC;AAAA,IACjF,OAGK;AACJ,YAAM,qBAAqB,KAAK,0BAA0B,IAAI,QAAQ;AACtE,UAAI,oBAAoB;AACvB,cAAM,UAAU,mBAAmB,IAAI,UAAU,KAAK;AACtD,YAAI,UAAU,GAAG;AAChB,6BAAmB,IAAI,YAAY,UAAU,CAAC;AAAA,QAC/C,OAAO;AACN,6BAAmB,OAAO,UAAU;AAEpC,cAAI,mBAAmB,SAAS,GAAG;AAClC,iBAAK,0BAA0B,OAAO,QAAQ;AAAA,UAC/C;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,uBAAuB,OAAqB,QAA2B;AAG9E,SAAK,yBAAyB,QAAQ,KAAK;AAG3C,UAAM,MAAM,KAAK,QAAQ,OAAO,MAAM;AACtC,QAAI,KAAK;AAGR,WAAK,qBAAqB,OAAO,GAAG;AAGpC,YAAM,MAAM,KAAK,OAAO,IAAI,MAAM,EAAE;AACpC,UAAI,OAAO,IAAI,OAAO,IAAI,MAAM,KAAK,IAAI,SAAS,GAAG;AACpD,aAAK,OAAO,OAAO,MAAM,EAAE;AAAA,MAC5B;AAGA,WAAK,sCAAsC,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEQ,QAAQ,OAAqB,QAAoD;AACxF,UAAM,WAAW,KAAK,OAAO,IAAI,MAAM,EAAE;AACzC,QAAI,CAAC,UAAU;AACd,aAAO;AAAA,IACR;AAEA,WAAO,SAAS,IAAI,MAAM;AAAA,EAC3B;AAAA,EAEQ,UAAU,OAAqB,QAAwC;AAC9E,QAAI,WAAW,KAAK,OAAO,IAAI,MAAM,EAAE;AACvC,QAAI,CAAC,UAAU;AACd,iBAAW,oBAAI,IAAI;AAEnB,WAAK,OAAO,IAAI,MAAM,IAAI,QAAQ;AAAA,IACnC;AAEA,QAAI,MAAM,SAAS,IAAI,MAAM;AAC7B,QAAI,CAAC,KAAK;AACT,YAAM,EAAE,SAAS,MAAM,IAAI,OAAO;AAClC,eAAS,IAAI,QAAQ,GAAG;AAAA,IACzB;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,yBAAyB,SAAwC,SAA0C;AACxH,QACC,CAAC,KAAK,mBAAmB,YAAY,OAAO,WAC5C,OAAO,KAAK,mBAAmB,YAAY,MAAM,UAAU,YAC3D,KAAK,mBAAmB,YAAY,MAAM,SAAS,GAClD;AACD;AAAA,IACD;AAEA,UAAM,QAAQ,KAAK,mBAAmB,YAAY,MAAM;AAGxD,QAAI,KAAK,mBAAmB,YAAY,OAAO,gBAAgB;AAG9D,UAAI,OAAO,YAAY,UAAU;AAChC,cAAM,QAAQ,KAAK,sBAAsB,SAAS,OAAO;AACzD,YAAI,OAAO;AACV,gBAAM,KAAK,2BAA2B,OAAO,MAAM,WAAW,aAAa,oBAAoB,EAAE,IAAI,aAAW,EAAE,QAAQ,QAAQ,EAAE,GAAG,OAAO;AAAA,QAC/I;AAAA,MACD,OAGK;AACJ,mBAAW,SAAS,KAAK,sBAAsB,QAAQ;AACtD,gBAAM,KAAK,yBAAyB,SAAS,MAAM,EAAE;AAAA,QACtD;AAAA,MACD;AAAA,IACD,OAGK;AACJ,YAAM,KAAK,2BAA2B,OAAO,CAAC,GAAG,KAAK,qBAAqB,OAAO,CAAC,GAAG,OAAO;AAAA,IAC9F;AAAA,EACD;AAAA,EAEA,MAAc,2BAA2B,OAAe,mBAAwC,SAA4C;AAI3I,QAAI;AACJ,QAAI,KAAK,mBAAmB,YAAY,OAAO,cAAc;AAC5D,0CAAoC,kBAAkB,OAAO,CAAC,EAAE,OAAO,MAAM;AAC5E,YAAK,OAAO,QAAQ,KAAK,CAAC,OAAO,SAAS,KAAM,OAAO,cAAc,wBAAwB,UAAU,GAAG;AACzG,iBAAO;AAAA,QACR;AAEA,eAAO;AAAA,MACR,CAAC;AAAA,IACF,OAAO;AACN,0CAAoC;AAAA,IACrC;AAEA,QAAI,SAAS,kCAAkC,QAAQ;AACtD;AAAA,IACD;AAGA,UAAM,+BAA+B,kCAAkC,QAAQ,EAAE,OAAO,CAAC,EAAE,QAAQ,QAAQ,MAAM;AAChH,UAAK,OAAO,QAAQ,KAAK,CAAC,OAAO,SAAS,KAAM,OAAO,cAAc,wBAAwB,UAAU,GAAG;AACzG,eAAO;AAAA,MACR;AAEA,UAAI,WAAW,WAAW,QAAQ,UAAU,YAAY,QAAQ,SAAS;AACxE,eAAO;AAAA,MACR;AAEA,UAAI,KAAK,sBAAsB,SAAS,OAAO,GAAG,SAAS,MAAM,GAAG;AACnE,eAAO;AAAA,MACR;AAEA,aAAO;AAAA,IACR,CAAC;AAGD,QAAI,sBAAsB,kCAAkC,SAAS;AACrE,UAAM,2BAA2B,oBAAI,IAAoC;AACzE,eAAW,EAAE,SAAS,OAAO,KAAK,8BAA8B;AAC/D,UAAI,wBAAwB,yBAAyB,IAAI,OAAO;AAChE,UAAI,CAAC,uBAAuB;AAC3B,gCAAwB,CAAC;AACzB,iCAAyB,IAAI,SAAS,qBAAqB;AAAA,MAC5D;AAEA,4BAAsB,KAAK,MAAM;AACjC;AAEA,UAAI,wBAAwB,GAAG;AAC9B;AAAA,MACD;AAAA,IACD;AAEA,eAAW,CAAC,SAAS,OAAO,KAAK,0BAA0B;AAC1D,YAAM,QAAQ,KAAK,sBAAsB,SAAS,OAAO;AACzD,UAAI,OAAO;AACV,cAAM,MAAM,aAAa,SAAS,EAAE,eAAe,KAAK,CAAC;AAAA,MAC1D;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,YAAkB;AACzB,QAAI,KAAK,UAAU;AAClB;AAAA,IACD;AAEA,QAAI,KAAK,qBAAqB,QAAQ,GAAG;AACxC,WAAK,eAAe,OAAO,gBAAgB,aAAa,aAAa,SAAS;AAAA,IAC/E,OAAO;AACN,WAAK,eAAe,MAAM,gBAAgB,aAAa,KAAK,UAAU,KAAK,UAAU,CAAC,GAAG,aAAa,WAAW,cAAc,OAAO;AAAA,IACvI;AAAA,EACD;AAAA,EAEQ,YAAoC;AAC3C,UAAM,WAAW,SAAS,GAA2B,iBAAiB,aAAa;AAEnF,UAAM,UAAU,CAAC,GAAG,KAAK,qBAAqB,OAAO,CAAC;AACtD,UAAM,uCAAuC,oBAAI,IAAiC;AAElF,WAAO;AAAA,MACN,SAAS,SAAS,QAAQ,IAAI,CAAC,EAAE,QAAQ,QAAQ,MAAM;AAGtD,cAAM,QAAQ,KAAK,sBAAsB,SAAS,OAAO;AACzD,YAAI,CAAC,OAAO;AACX,iBAAO;AAAA,QACR;AAGA,YAAI,6BAA6B,qCAAqC,IAAI,KAAK;AAC/E,YAAI,CAAC,4BAA4B;AAChC,uCAA6B,MAAM,WAAW,aAAa,UAAU,EAAE,OAAO,CAAAA,YAAU;AACvF,kBAAM,mBAAmB,SAAS,oBAAoBA,OAAM;AAE5D,mBAAO,kBAAkB,aAAaA,OAAM;AAAA,UAC7C,CAAC;AACD,+CAAqC,IAAI,OAAO,0BAA0B;AAAA,QAC3E;AAIA,cAAM,QAAQ,2BAA2B,QAAQ,MAAM;AACvD,YAAI,UAAU,IAAI;AACjB,iBAAO;AAAA,QACR;AAEA,eAAO,EAAE,SAAS,MAAM;AAAA,MACzB,CAAC,CAAC;AAAA,IACH;AAAA,EACD;AAAA,EAEA,MAAc,YAA2B;AACxC,QAAI,KAAK,0BAA0B,KAAK,mBAAmB,YAAY,KAAK,0BAA0B,KAAK,oBAAoB;AAC9H,YAAM,KAAK,mBAAmB;AAAA,IAC/B;AAIA,QAAI,qBAAqB;AACzB,QAAI,CAAC,KAAK,UAAU;AACnB,YAAM,aAAa,KAAK,eAAe,IAAI,gBAAgB,aAAa,aAAa,SAAS;AAC9F,UAAI,YAAY;AACf,6BAAqB;AACrB,aAAK,YAAY,KAAK,MAAM,UAAU,CAAC;AAAA,MACxC;AAAA,IACD;AAIA,QAAI,CAAC,oBAAoB;AACxB,YAAM,SAAS,KAAK,sBAAsB,UAAU,YAAY,oBAAoB;AACpF,eAAS,IAAI,OAAO,SAAS,GAAG,KAAK,GAAG,KAAK;AAC5C,cAAM,QAAQ,OAAO,CAAC;AACtB,cAAM,kBAAkB,MAAM,WAAW,aAAa,oBAAoB;AAC1E,iBAASC,KAAI,gBAAgB,SAAS,GAAGA,MAAK,GAAGA,MAAK;AACrD,eAAK;AAAA,YAAoB;AAAA,YAAO,gBAAgBA,EAAC;AAAA,YAAG;AAAA,YAAgD;AAAA;AAAA,UAAiB;AAAA,QACtH;AAAA,MACD;AAAA,IACD;AAGA,eAAW,SAAS,KAAK,sBAAsB,QAAQ;AACtD,WAAK,uBAAuB,KAAK;AAAA,IAClC;AAAA,EACD;AAAA,EAEQ,YAAY,YAA0C;AAC7D,UAAM,YAAsD,CAAC;AAE7D,eAAW,EAAE,SAAS,MAAM,KAAK,WAAW,SAAS;AAGpD,YAAM,QAAQ,KAAK,sBAAsB,SAAS,OAAO;AACzD,UAAI,CAAC,OAAO;AACX;AAAA,MACD;AAGA,YAAM,SAAS,MAAM,iBAAiB,KAAK;AAC3C,UAAI,CAAC,QAAQ;AACZ;AAAA,MACD;AAGA,YAAM,mBAAmB,KAAK,UAAU,OAAO,MAAM;AACrD,gBAAU,KAAK,CAAC,kBAAkB,gBAAgB,CAAC;AAGnD,WAAK,yBAAyB,QAAQ,IAAI;AAAA,IAC3C;AAGA,SAAK,qBAAqB,SAAS,SAAS;AAAA,EAC7C;AACD;AAtea,kBAAN;AAAA,EAgDJ;AAAA,EACA;AAAA,GAjDU;",
  "names": ["editor", "i"]
}
