var O=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var m=(u,i,t,r)=>{for(var e=r>1?void 0:r?w(i,t):i,n=u.length-1,a;n>=0;n--)(a=u[n])&&(e=(r?a(i,t,e):a(e))||e);return r&&e&&O(i,t,e),e},o=(u,i)=>(t,r)=>i(t,r,u);import{assertIsDefined as b}from"../../../../base/common/types.js";import"../../../../editor/browser/editorBrowser.js";import{isTextEditorViewState as G}from"../../../common/editor.js";import"../../../common/editor/editorInput.js";import{applyTextEditorOptions as N}from"../../../common/editor/editorOptions.js";import{TextResourceEditorInput as D}from"../../../common/editor/textResourceEditorInput.js";import{BaseTextEditorModel as P}from"../../../common/editor/textEditorModel.js";import{UntitledTextEditorInput as p}from"../../../services/untitled/common/untitledTextEditorInput.js";import{AbstractTextCodeEditor as F}from"./textCodeEditor.js";import{ITelemetryService as f}from"../../../../platform/telemetry/common/telemetry.js";import{IStorageService as v}from"../../../../platform/storage/common/storage.js";import{ITextResourceConfigurationService as S}from"../../../../editor/common/services/textResourceConfiguration.js";import{IInstantiationService as E}from"../../../../platform/instantiation/common/instantiation.js";import{IThemeService as C}from"../../../../platform/theme/common/themeService.js";import{ScrollType as L}from"../../../../editor/common/editorCommon.js";import{IEditorGroupsService as h}from"../../../services/editor/common/editorGroupsService.js";import"../../../../base/common/cancellation.js";import{IEditorService as T}from"../../../services/editor/common/editorService.js";import{IModelService as V}from"../../../../editor/common/services/model.js";import{ILanguageService as _}from"../../../../editor/common/languages/language.js";import{PLAINTEXT_LANGUAGE_ID as x}from"../../../../editor/common/languages/modesRegistry.js";import{EditorOption as R}from"../../../../editor/common/config/editorOptions.js";import{ModelConstants as k}from"../../../../editor/common/model.js";import"../../../../platform/editor/common/editor.js";import{IFileService as M}from"../../../../platform/files/common/files.js";let l=class extends F{constructor(i,t,r,e,n,a,s,d,I,g){super(i,t,r,e,n,a,s,I,d,g)}async setInput(i,t,r,e){await super.setInput(i,t,r,e);const n=await i.resolve();if(e.isCancellationRequested)return;if(!(n instanceof P))throw new Error("Unable to open file as text");const a=b(this.editorControl),s=n.textEditorModel;if(a.setModel(s),!G(t?.viewState)){const d=this.loadEditorViewState(i,r);d&&(t?.selection&&(d.cursorState=[]),a.restoreViewState(d))}t&&N(t,a,L.Immediate),a.updateOptions(this.getReadonlyConfiguration(n.isReadonly()))}revealLastLine(){const i=this.editorControl;if(!i)return;const t=i.getModel();if(t){const r=t.getLineCount();i.revealPosition({lineNumber:r,column:t.getLineMaxColumn(r)},L.Smooth)}}clearInput(){super.clearInput(),this.editorControl?.setModel(null)}tracksEditorViewState(i){return i instanceof p||i instanceof D}};l=m([o(2,f),o(3,E),o(4,v),o(5,S),o(6,C),o(7,h),o(8,T),o(9,M)],l);let c=class extends l{constructor(t,r,e,n,a,s,d,I,g,A,y){super(c.ID,t,r,e,n,a,s,I,d,y);this.modelService=g;this.languageService=A}static ID="workbench.editors.textResourceEditor";createEditorControl(t,r){super.createEditorControl(t,r);const e=this.editorControl;e&&this._register(e.onDidPaste(n=>this.onDidEditorPaste(n,e)))}onDidEditorPaste(t,r){if(this.input instanceof p&&this.input.hasLanguageSetExplicitly||t.range.startLineNumber!==1||t.range.startColumn!==1||r.getOption(R.readOnly))return;const e=r.getModel();if(!e||!(e.getLineCount()===t.range.endLineNumber&&e.getLineMaxColumn(t.range.endLineNumber)===t.range.endColumn)||e.getLanguageId()!==x)return;let s;if(t.languageId)s={id:t.languageId,source:"event"};else{const d=this.languageService.guessLanguageIdByFilepathOrFirstLine(e.uri,e.getLineContent(1).substr(0,k.FIRST_LINE_DETECTION_LENGTH_LIMIT))??void 0;d&&(s={id:d,source:"guess"})}if(s&&s.id!==x){this.input instanceof p&&s.source==="event"?this.input.setLanguageId(s.id):e.setLanguage(this.languageService.createById(s.id));const d=this.modelService.getCreationOptions(e.getLanguageId(),e.uri,e.isForSimpleWidget);e.detectIndentation(d.insertSpaces,d.tabSize)}}};c=m([o(1,f),o(2,E),o(3,v),o(4,S),o(5,C),o(6,T),o(7,h),o(8,V),o(9,_),o(10,M)],c);export{l as AbstractTextResourceEditor,c as TextResourceEditor};
