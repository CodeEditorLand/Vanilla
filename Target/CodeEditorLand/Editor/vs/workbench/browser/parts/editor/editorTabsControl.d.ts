import "vs/css!./media/editortabscontrol";
import { Dimension } from "vs/base/browser/dom";
import { IHoverDelegate } from "vs/base/browser/ui/hover/hoverDelegate";
import { ActionRunner, IAction } from "vs/base/common/actions";
import { ResolvedKeybinding } from "vs/base/common/keybindings";
import { IDisposable } from "vs/base/common/lifecycle";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IContextMenuService } from "vs/platform/contextview/browser/contextView";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "vs/platform/keybinding/common/keybinding";
import { INotificationService } from "vs/platform/notification/common/notification";
import { IQuickInputService } from "vs/platform/quickinput/common/quickInput";
import { IThemeService, Themable } from "vs/platform/theme/common/themeService";
import { IEditorGroupsView, IEditorGroupView, IEditorPartsView, IInternalEditorOpenOptions } from "vs/workbench/browser/parts/editor/editor";
import { IEditorTitleControlDimensions } from "vs/workbench/browser/parts/editor/editorTitleControl";
import { GroupIdentifier, IEditorCommandsContext, IEditorPartOptions, IToolbarActions } from "vs/workbench/common/editor";
import { IReadonlyEditorGroupModel } from "vs/workbench/common/editor/editorGroupModel";
import { EditorInput } from "vs/workbench/common/editor/editorInput";
import { IAuxiliaryEditorPart } from "vs/workbench/services/editor/common/editorGroupsService";
import { IEditorResolverService } from "vs/workbench/services/editor/common/editorResolverService";
import { IHostService } from "vs/workbench/services/host/browser/host";
export declare class EditorCommandsContextActionRunner extends ActionRunner {
    private context;
    constructor(context: IEditorCommandsContext);
    run(action: IAction, context?: {
        preserveFocus?: boolean;
    }): Promise<void>;
}
export interface IEditorTabsControl extends IDisposable {
    updateOptions(oldOptions: IEditorPartOptions, newOptions: IEditorPartOptions): void;
    openEditor(editor: EditorInput, options?: IInternalEditorOpenOptions): boolean;
    openEditors(editors: EditorInput[]): boolean;
    beforeCloseEditor(editor: EditorInput): void;
    closeEditor(editor: EditorInput): void;
    closeEditors(editors: EditorInput[]): void;
    moveEditor(editor: EditorInput, fromIndex: number, targetIndex: number, stickyStateChange: boolean): void;
    pinEditor(editor: EditorInput): void;
    stickEditor(editor: EditorInput): void;
    unstickEditor(editor: EditorInput): void;
    setActive(isActive: boolean): void;
    updateEditorSelections(): void;
    updateEditorLabel(editor: EditorInput): void;
    updateEditorDirty(editor: EditorInput): void;
    layout(dimensions: IEditorTitleControlDimensions): Dimension;
    getHeight(): number;
}
export declare abstract class EditorTabsControl extends Themable implements IEditorTabsControl {
    protected readonly parent: HTMLElement;
    protected readonly editorPartsView: IEditorPartsView;
    protected readonly groupsView: IEditorGroupsView;
    protected readonly groupView: IEditorGroupView;
    protected readonly tabsModel: IReadonlyEditorGroupModel;
    protected readonly contextMenuService: IContextMenuService;
    protected instantiationService: IInstantiationService;
    protected readonly contextKeyService: IContextKeyService;
    private readonly keybindingService;
    private readonly notificationService;
    protected quickInputService: IQuickInputService;
    private readonly editorResolverService;
    private readonly hostService;
    protected readonly editorTransfer: any;
    protected readonly groupTransfer: any;
    protected readonly treeItemsTransfer: any;
    private static readonly EDITOR_TAB_HEIGHT;
    protected editorActionsToolbarContainer: HTMLElement | undefined;
    private editorActionsToolbar;
    private readonly editorActionsToolbarDisposables;
    private readonly editorActionsDisposables;
    private readonly contextMenuContextKeyService;
    private resourceContext;
    private editorPinnedContext;
    private editorIsFirstContext;
    private editorIsLastContext;
    private editorStickyContext;
    private editorAvailableEditorIds;
    private editorCanSplitInGroupContext;
    private sideBySideEditorContext;
    private groupLockedContext;
    private renderDropdownAsChildElement;
    private readonly tabsHoverDelegate;
    constructor(parent: HTMLElement, editorPartsView: IEditorPartsView, groupsView: IEditorGroupsView, groupView: IEditorGroupView, tabsModel: IReadonlyEditorGroupModel, contextMenuService: IContextMenuService, instantiationService: IInstantiationService, contextKeyService: IContextKeyService, keybindingService: IKeybindingService, notificationService: INotificationService, quickInputService: IQuickInputService, themeService: IThemeService, editorResolverService: IEditorResolverService, hostService: IHostService);
    protected create(parent: HTMLElement): void;
    private get editorActionsEnabled();
    protected createEditorActionsToolBar(parent: HTMLElement, classes: string[]): void;
    private handleEditorActionToolBarVisibility;
    private doCreateEditorActionsToolBar;
    private actionViewItemProvider;
    protected updateEditorActionsToolbar(): void;
    protected abstract prepareEditorActions(editorActions: IToolbarActions): IToolbarActions;
    private getEditorPaneAwareContextKeyService;
    protected clearEditorActionsToolbar(): void;
    protected onGroupDragStart(e: DragEvent, element: HTMLElement): boolean;
    protected onGroupDragEnd(e: DragEvent, previousDragEvent: DragEvent | undefined, element: HTMLElement, isNewWindowOperation: boolean): Promise<void>;
    protected maybeCreateAuxiliaryEditorPartAt(e: DragEvent, offsetElement: HTMLElement): Promise<IAuxiliaryEditorPart | undefined>;
    protected isNewWindowOperation(e: DragEvent): boolean;
    protected isMoveOperation(e: DragEvent, sourceGroup: GroupIdentifier, sourceEditor?: EditorInput): boolean;
    protected doFillResourceDataTransfers(editors: readonly EditorInput[], e: DragEvent, disableStandardTransfer: boolean): boolean;
    protected onTabContextMenu(editor: EditorInput, e: Event, node: HTMLElement): void;
    protected getKeybinding(action: IAction): ResolvedKeybinding | undefined;
    protected getKeybindingLabel(action: IAction): string | undefined;
    protected get tabHeight(): 22 | 35;
    protected getHoverTitle(editor: EditorInput): string;
    protected getHoverDelegate(): IHoverDelegate;
    protected updateTabHeight(): void;
    updateOptions(oldOptions: IEditorPartOptions, newOptions: IEditorPartOptions): void;
    abstract openEditor(editor: EditorInput): boolean;
    abstract openEditors(editors: EditorInput[]): boolean;
    abstract beforeCloseEditor(editor: EditorInput): void;
    abstract closeEditor(editor: EditorInput): void;
    abstract closeEditors(editors: EditorInput[]): void;
    abstract moveEditor(editor: EditorInput, fromIndex: number, targetIndex: number): void;
    abstract pinEditor(editor: EditorInput): void;
    abstract stickEditor(editor: EditorInput): void;
    abstract unstickEditor(editor: EditorInput): void;
    abstract setActive(isActive: boolean): void;
    abstract updateEditorSelections(): void;
    abstract updateEditorLabel(editor: EditorInput): void;
    abstract updateEditorDirty(editor: EditorInput): void;
    abstract layout(dimensions: IEditorTitleControlDimensions): Dimension;
    abstract getHeight(): number;
}
