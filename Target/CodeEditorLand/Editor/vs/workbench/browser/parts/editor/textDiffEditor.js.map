{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/textDiffEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { deepClone } from '../../../../base/common/objects.js';\nimport { isObject, assertIsDefined } from '../../../../base/common/types.js';\nimport { ICodeEditor, IDiffEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IDiffEditorOptions, IEditorOptions as ICodeEditorOptions } from '../../../../editor/common/config/editorOptions.js';\nimport { AbstractTextEditor, IEditorConfiguration } from './textEditor.js';\nimport { TEXT_DIFF_EDITOR_ID, IEditorFactoryRegistry, EditorExtensions, ITextDiffEditorPane, IEditorOpenContext, isEditorInput, isTextEditorViewState, createTooLargeFileError } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { applyTextEditorOptions } from '../../../common/editor/editorOptions.js';\nimport { DiffEditorInput } from '../../../common/editor/diffEditorInput.js';\nimport { TextDiffEditorModel } from '../../../common/editor/textDiffEditorModel.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { ITextResourceConfigurationChangeEvent, ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { TextFileOperationError, TextFileOperationResult } from '../../../services/textfile/common/textfiles.js';\nimport { ScrollType, IDiffEditorViewState, IDiffEditorModel, IDiffEditorViewModel } from '../../../../editor/common/editorCommon.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IEditorGroup, IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { EditorActivation, ITextEditorOptions } from '../../../../platform/editor/common/editor.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { Dimension, multibyteAwareBtoa } from '../../../../base/browser/dom.js';\nimport { ByteSize, FileOperationError, FileOperationResult, IFileService, TooLargeFileOperationError } from '../../../../platform/files/common/files.js';\nimport { IBoundarySashes } from '../../../../base/browser/ui/sash/sash.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { DiffEditorWidget } from '../../../../editor/browser/widget/diffEditor/diffEditorWidget.js';\n\n/**\n * The text editor that leverages the diff text editor for the editing experience.\n */\nexport class TextDiffEditor extends AbstractTextEditor<IDiffEditorViewState> implements ITextDiffEditorPane {\n\tstatic readonly ID = TEXT_DIFF_EDITOR_ID;\n\n\tprivate diffEditorControl: IDiffEditor | undefined = undefined;\n\n\tprivate inputLifecycleStopWatch: StopWatch | undefined = undefined;\n\n\toverride get scopedContextKeyService(): IContextKeyService | undefined {\n\t\tif (!this.diffEditorControl) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst originalEditor = this.diffEditorControl.getOriginalEditor();\n\t\tconst modifiedEditor = this.diffEditorControl.getModifiedEditor();\n\n\t\treturn (originalEditor.hasTextFocus() ? originalEditor : modifiedEditor).invokeWithinContext(accessor => accessor.get(IContextKeyService));\n\t}\n\n\tconstructor(\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(TextDiffEditor.ID, group, telemetryService, instantiationService, storageService, configurationService, themeService, editorService, editorGroupService, fileService);\n\t}\n\n\toverride getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize('textDiffEditor', \"Text Diff Editor\");\n\t}\n\n\tprotected override createEditorControl(parent: HTMLElement, configuration: ICodeEditorOptions): void {\n\t\tthis.diffEditorControl = this._register(this.instantiationService.createInstance(DiffEditorWidget, parent, configuration, {}));\n\t}\n\n\tprotected updateEditorControlOptions(options: ICodeEditorOptions): void {\n\t\tthis.diffEditorControl?.updateOptions(options);\n\t}\n\n\tprotected getMainControl(): ICodeEditor | undefined {\n\t\treturn this.diffEditorControl?.getModifiedEditor();\n\t}\n\n\tprivate _previousViewModel: IDiffEditorViewModel | null = null;\n\n\toverride async setInput(input: DiffEditorInput, options: ITextEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\t\tif (this._previousViewModel) {\n\t\t\tthis._previousViewModel.dispose();\n\t\t\tthis._previousViewModel = null;\n\t\t}\n\n\t\t// Cleanup previous things associated with the input\n\t\tthis.inputLifecycleStopWatch = undefined;\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\n\t\ttry {\n\t\t\tconst resolvedModel = await input.resolve();\n\n\t\t\t// Check for cancellation\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Fallback to open as binary if not text\n\t\t\tif (!(resolvedModel instanceof TextDiffEditorModel)) {\n\t\t\t\tthis.openAsBinary(input, options);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Set Editor Model\n\t\t\tconst control = assertIsDefined(this.diffEditorControl);\n\t\t\tconst resolvedDiffEditorModel = resolvedModel as TextDiffEditorModel;\n\n\t\t\tconst vm = resolvedDiffEditorModel.textDiffEditorModel ? control.createViewModel(resolvedDiffEditorModel.textDiffEditorModel) : null;\n\t\t\tthis._previousViewModel = vm;\n\t\t\tawait vm?.waitForDiff();\n\t\t\tcontrol.setModel(vm);\n\n\t\t\t// Restore view state (unless provided by options)\n\t\t\tlet hasPreviousViewState = false;\n\t\t\tif (!isTextEditorViewState(options?.viewState)) {\n\t\t\t\thasPreviousViewState = this.restoreTextDiffEditorViewState(input, options, context, control);\n\t\t\t}\n\n\t\t\t// Apply options to editor if any\n\t\t\tlet optionsGotApplied = false;\n\t\t\tif (options) {\n\t\t\t\toptionsGotApplied = applyTextEditorOptions(options, control, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\tif (!optionsGotApplied && !hasPreviousViewState) {\n\t\t\t\tcontrol.revealFirstDiff();\n\t\t\t}\n\n\t\t\t// Since the resolved model provides information about being readonly\n\t\t\t// or not, we apply it here to the editor even though the editor input\n\t\t\t// was already asked for being readonly or not. The rationale is that\n\t\t\t// a resolved model might have more specific information about being\n\t\t\t// readonly or not that the input did not have.\n\t\t\tcontrol.updateOptions({\n\t\t\t\t...this.getReadonlyConfiguration(resolvedDiffEditorModel.modifiedModel?.isReadonly()),\n\t\t\t\toriginalEditable: !resolvedDiffEditorModel.originalModel?.isReadonly()\n\t\t\t});\n\n\t\t\tcontrol.handleInitialized();\n\n\t\t\t// Start to measure input lifecycle\n\t\t\tthis.inputLifecycleStopWatch = new StopWatch(false);\n\t\t} catch (error) {\n\t\t\tawait this.handleSetInputError(error, input, options);\n\t\t}\n\t}\n\n\tprivate async handleSetInputError(error: Error, input: DiffEditorInput, options: ITextEditorOptions | undefined): Promise<void> {\n\n\t\t// Handle case where content appears to be binary\n\t\tif (this.isFileBinaryError(error)) {\n\t\t\treturn this.openAsBinary(input, options);\n\t\t}\n\n\t\t// Handle case where a file is too large to open without confirmation\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\n\t\t\tlet message: string;\n\t\t\tif (error instanceof TooLargeFileOperationError) {\n\t\t\t\tmessage = localize('fileTooLargeForHeapErrorWithSize', \"At least one file is not displayed in the text compare editor because it is very large ({0}).\", ByteSize.formatSize(error.size));\n\t\t\t} else {\n\t\t\t\tmessage = localize('fileTooLargeForHeapErrorWithoutSize', \"At least one file is not displayed in the text compare editor because it is very large.\");\n\t\t\t}\n\n\t\t\tthrow createTooLargeFileError(this.group, input, options, message, this.preferencesService);\n\t\t}\n\n\t\t// Otherwise make sure the error bubbles up\n\t\tthrow error;\n\t}\n\n\tprivate restoreTextDiffEditorViewState(editor: DiffEditorInput, options: ITextEditorOptions | undefined, context: IEditorOpenContext, control: IDiffEditor): boolean {\n\t\tconst editorViewState = this.loadEditorViewState(editor, context);\n\t\tif (editorViewState) {\n\t\t\tif (options?.selection && editorViewState.modified) {\n\t\t\t\teditorViewState.modified.cursorState = []; // prevent duplicate selections via options\n\t\t\t}\n\n\t\t\tcontrol.restoreViewState(editorViewState);\n\n\t\t\tif (options?.revealIfVisible) {\n\t\t\t\tcontrol.revealFirstDiff();\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate openAsBinary(input: DiffEditorInput, options: ITextEditorOptions | undefined): void {\n\t\tconst original = input.original;\n\t\tconst modified = input.modified;\n\n\t\tconst binaryDiffInput = this.instantiationService.createInstance(DiffEditorInput, input.getName(), input.getDescription(), original, modified, true);\n\n\t\t// Forward binary flag to input if supported\n\t\tconst fileEditorFactory = Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).getFileEditorFactory();\n\t\tif (fileEditorFactory.isFileEditor(original)) {\n\t\t\toriginal.setForceOpenAsBinary();\n\t\t}\n\n\t\tif (fileEditorFactory.isFileEditor(modified)) {\n\t\t\tmodified.setForceOpenAsBinary();\n\t\t}\n\n\t\t// Replace this editor with the binary one\n\t\tthis.group.replaceEditors([{\n\t\t\teditor: input,\n\t\t\treplacement: binaryDiffInput,\n\t\t\toptions: {\n\t\t\t\t...options,\n\t\t\t\t// Make sure to not steal away the currently active group\n\t\t\t\t// because we are triggering another openEditor() call\n\t\t\t\t// and do not control the initial intent that resulted\n\t\t\t\t// in us now opening as binary.\n\t\t\t\tactivation: EditorActivation.PRESERVE,\n\t\t\t\tpinned: this.group.isPinned(input),\n\t\t\t\tsticky: this.group.isSticky(input)\n\t\t\t}\n\t\t}]);\n\t}\n\n\toverride setOptions(options: ITextEditorOptions | undefined): void {\n\t\tsuper.setOptions(options);\n\n\t\tif (options) {\n\t\t\tapplyTextEditorOptions(options, assertIsDefined(this.diffEditorControl), ScrollType.Smooth);\n\t\t}\n\t}\n\n\tprotected override shouldHandleConfigurationChangeEvent(e: ITextResourceConfigurationChangeEvent, resource: URI): boolean {\n\t\tif (super.shouldHandleConfigurationChangeEvent(e, resource)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn e.affectsConfiguration(resource, 'diffEditor') || e.affectsConfiguration(resource, 'accessibility.verbosity.diffEditor');\n\t}\n\n\tprotected override computeConfiguration(configuration: IEditorConfiguration): ICodeEditorOptions {\n\t\tconst editorConfiguration = super.computeConfiguration(configuration);\n\n\t\t// Handle diff editor specially by merging in diffEditor configuration\n\t\tif (isObject(configuration.diffEditor)) {\n\t\t\tconst diffEditorConfiguration: IDiffEditorOptions = deepClone(configuration.diffEditor);\n\n\t\t\t// User settings defines `diffEditor.codeLens`, but here we rename that to `diffEditor.diffCodeLens` to avoid collisions with `editor.codeLens`.\n\t\t\tdiffEditorConfiguration.diffCodeLens = diffEditorConfiguration.codeLens;\n\t\t\tdelete diffEditorConfiguration.codeLens;\n\n\t\t\t// User settings defines `diffEditor.wordWrap`, but here we rename that to `diffEditor.diffWordWrap` to avoid collisions with `editor.wordWrap`.\n\t\t\tdiffEditorConfiguration.diffWordWrap = <'off' | 'on' | 'inherit' | undefined>diffEditorConfiguration.wordWrap;\n\t\t\tdelete diffEditorConfiguration.wordWrap;\n\n\t\t\tObject.assign(editorConfiguration, diffEditorConfiguration);\n\t\t}\n\n\t\tconst verbose = configuration.accessibility?.verbosity?.diffEditor ?? false;\n\t\t(editorConfiguration as IDiffEditorOptions).accessibilityVerbose = verbose;\n\n\t\treturn editorConfiguration;\n\t}\n\n\tprotected override getConfigurationOverrides(configuration: IEditorConfiguration): IDiffEditorOptions {\n\t\treturn {\n\t\t\t...super.getConfigurationOverrides(configuration),\n\t\t\t...this.getReadonlyConfiguration(this.input?.isReadonly()),\n\t\t\toriginalEditable: this.input instanceof DiffEditorInput && !this.input.original.isReadonly(),\n\t\t\tlineDecorationsWidth: '2ch'\n\t\t};\n\t}\n\n\tprotected override updateReadonly(input: EditorInput): void {\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\tthis.diffEditorControl?.updateOptions({\n\t\t\t\t...this.getReadonlyConfiguration(input.isReadonly()),\n\t\t\t\toriginalEditable: !input.original.isReadonly(),\n\t\t\t});\n\t\t} else {\n\t\t\tsuper.updateReadonly(input);\n\t\t}\n\t}\n\n\tprivate isFileBinaryError(error: Error[]): boolean;\n\tprivate isFileBinaryError(error: Error): boolean;\n\tprivate isFileBinaryError(error: Error | Error[]): boolean {\n\t\tif (Array.isArray(error)) {\n\t\t\tconst errors = <Error[]>error;\n\n\t\t\treturn errors.some(error => this.isFileBinaryError(error));\n\t\t}\n\n\t\treturn (<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY;\n\t}\n\n\toverride clearInput(): void {\n\t\tif (this._previousViewModel) {\n\t\t\tthis._previousViewModel.dispose();\n\t\t\tthis._previousViewModel = null;\n\t\t}\n\n\t\tsuper.clearInput();\n\n\t\t// Log input lifecycle telemetry\n\t\tconst inputLifecycleElapsed = this.inputLifecycleStopWatch?.elapsed();\n\t\tthis.inputLifecycleStopWatch = undefined;\n\t\tif (typeof inputLifecycleElapsed === 'number') {\n\t\t\tthis.logInputLifecycleTelemetry(inputLifecycleElapsed, this.getControl()?.getModel()?.modified?.getLanguageId());\n\t\t}\n\n\t\t// Clear Model\n\t\tthis.diffEditorControl?.setModel(null);\n\t}\n\n\tprivate logInputLifecycleTelemetry(duration: number, languageId: string | undefined): void {\n\t\tlet collapseUnchangedRegions = false;\n\t\tif (this.diffEditorControl instanceof DiffEditorWidget) {\n\t\t\tcollapseUnchangedRegions = this.diffEditorControl.collapseUnchangedRegions;\n\t\t}\n\t\tthis.telemetryService.publicLog2<{\n\t\t\teditorVisibleTimeMs: number;\n\t\t\tlanguageId: string;\n\t\t\tcollapseUnchangedRegions: boolean;\n\t\t}, {\n\t\t\towner: 'hediet';\n\t\t\teditorVisibleTimeMs: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Indicates the time the diff editor was visible to the user' };\n\t\t\tlanguageId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Indicates for which language the diff editor was shown' };\n\t\t\tcollapseUnchangedRegions: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Indicates whether unchanged regions were collapsed' };\n\t\t\tcomment: 'This event gives insight about how long the diff editor was visible to the user.';\n\t\t}>('diffEditor.editorVisibleTime', {\n\t\t\teditorVisibleTimeMs: duration,\n\t\t\tlanguageId: languageId ?? '',\n\t\t\tcollapseUnchangedRegions,\n\t\t});\n\t}\n\n\toverride getControl(): IDiffEditor | undefined {\n\t\treturn this.diffEditorControl;\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\n\t\tthis.diffEditorControl?.focus();\n\t}\n\n\toverride hasFocus(): boolean {\n\t\treturn this.diffEditorControl?.hasTextFocus() || super.hasFocus();\n\t}\n\n\tprotected override setEditorVisible(visible: boolean): void {\n\t\tsuper.setEditorVisible(visible);\n\n\t\tif (visible) {\n\t\t\tthis.diffEditorControl?.onVisible();\n\t\t} else {\n\t\t\tthis.diffEditorControl?.onHide();\n\t\t}\n\t}\n\n\toverride layout(dimension: Dimension): void {\n\t\tthis.diffEditorControl?.layout(dimension);\n\t}\n\n\toverride setBoundarySashes(sashes: IBoundarySashes) {\n\t\tthis.diffEditorControl?.setBoundarySashes(sashes);\n\t}\n\n\tprotected override tracksEditorViewState(input: EditorInput): boolean {\n\t\treturn input instanceof DiffEditorInput;\n\t}\n\n\tprotected override computeEditorViewState(resource: URI): IDiffEditorViewState | undefined {\n\t\tif (!this.diffEditorControl) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst model = this.diffEditorControl.getModel();\n\t\tif (!model || !model.modified || !model.original) {\n\t\t\treturn undefined; // view state always needs a model\n\t\t}\n\n\t\tconst modelUri = this.toEditorViewStateResource(model);\n\t\tif (!modelUri) {\n\t\t\treturn undefined; // model URI is needed to make sure we save the view state correctly\n\t\t}\n\n\t\tif (!isEqual(modelUri, resource)) {\n\t\t\treturn undefined; // prevent saving view state for a model that is not the expected one\n\t\t}\n\n\t\treturn this.diffEditorControl.saveViewState() ?? undefined;\n\t}\n\n\tprotected override toEditorViewStateResource(modelOrInput: IDiffEditorModel | EditorInput): URI | undefined {\n\t\tlet original: URI | undefined;\n\t\tlet modified: URI | undefined;\n\n\t\tif (modelOrInput instanceof DiffEditorInput) {\n\t\t\toriginal = modelOrInput.original.resource;\n\t\t\tmodified = modelOrInput.modified.resource;\n\t\t} else if (!isEditorInput(modelOrInput)) {\n\t\t\toriginal = modelOrInput.original.uri;\n\t\t\tmodified = modelOrInput.modified.uri;\n\t\t}\n\n\t\tif (!original || !modified) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// create a URI that is the Base64 concatenation of original + modified resource\n\t\treturn URI.from({ scheme: 'diff', path: `${multibyteAwareBtoa(original.toString())}${multibyteAwareBtoa(modified.toString())}` });\n\t}\n}\n"],
  "mappings": "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",
  "names": ["error"]
}
