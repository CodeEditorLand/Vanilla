{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorPanes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { IAction } from '../../../../base/common/actions.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorExtensions, EditorInputCapabilities, IEditorOpenContext, IVisibleEditorPane, isEditorOpenError } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { Dimension, show, hide, IDomNodePagePosition, isAncestor, getActiveElement, getWindowById, isEditableElement } from '../../../../base/browser/dom.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IEditorPaneRegistry, IEditorPaneDescriptor } from '../../editor.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { EditorPane } from './editorPane.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorProgressService, LongRunningOperation } from '../../../../platform/progress/common/progress.js';\nimport { IEditorGroupView, DEFAULT_EDITOR_MIN_DIMENSIONS, DEFAULT_EDITOR_MAX_DIMENSIONS, IInternalEditorOpenOptions } from './editor.js';\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { IWorkspaceTrustManagementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { ErrorPlaceholderEditor, IErrorEditorPlaceholderOptions, WorkspaceTrustRequiredPlaceholderEditor } from './editorPlaceholder.js';\nimport { EditorOpenSource, IEditorOptions } from '../../../../platform/editor/common/editor.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IDialogService, IPromptButton, IPromptCancelButton } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IBoundarySashes } from '../../../../base/browser/ui/sash/sash.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\n\nexport interface IOpenEditorResult {\n\n\t/**\n\t * The editor pane used for opening. This can be a generic\n\t * placeholder in certain cases, e.g. when workspace trust\n\t * is required, or an editor fails to restore.\n\t *\n\t * Will be `undefined` if an error occurred while trying to\n\t * open the editor and in cases where no placeholder is being\n\t * used.\n\t */\n\treadonly pane?: EditorPane;\n\n\t/**\n\t * Whether the editor changed as a result of opening.\n\t */\n\treadonly changed?: boolean;\n\n\t/**\n\t * This property is set when an editor fails to restore and\n\t * is shown with a generic place holder. It allows callers\n\t * to still present the error to the user in that case.\n\t */\n\treadonly error?: Error;\n\n\t/**\n\t * This property indicates whether the open editor operation was\n\t * cancelled or not. The operation may have been cancelled\n\t * in case another editor open operation was triggered right\n\t * after cancelling this one out.\n\t */\n\treadonly cancelled?: boolean;\n}\n\nexport class EditorPanes extends Disposable {\n\n\t//#region Events\n\n\tprivate readonly _onDidFocus = this._register(new Emitter<void>());\n\treadonly onDidFocus = this._onDidFocus.event;\n\n\tprivate _onDidChangeSizeConstraints = this._register(new Emitter<{ width: number; height: number } | undefined>());\n\treadonly onDidChangeSizeConstraints = this._onDidChangeSizeConstraints.event;\n\n\t//#endregion\n\n\tget minimumWidth() { return this._activeEditorPane?.minimumWidth ?? DEFAULT_EDITOR_MIN_DIMENSIONS.width; }\n\tget minimumHeight() { return this._activeEditorPane?.minimumHeight ?? DEFAULT_EDITOR_MIN_DIMENSIONS.height; }\n\tget maximumWidth() { return this._activeEditorPane?.maximumWidth ?? DEFAULT_EDITOR_MAX_DIMENSIONS.width; }\n\tget maximumHeight() { return this._activeEditorPane?.maximumHeight ?? DEFAULT_EDITOR_MAX_DIMENSIONS.height; }\n\n\tprivate _activeEditorPane: EditorPane | null = null;\n\tget activeEditorPane(): IVisibleEditorPane | null { return this._activeEditorPane as IVisibleEditorPane | null; }\n\n\tprivate readonly editorPanes: EditorPane[] = [];\n\tprivate readonly mapEditorPaneToPendingSetInput = new Map<EditorPane, Promise<void>>();\n\n\tprivate readonly activeEditorPaneDisposables = this._register(new DisposableStore());\n\tprivate pagePosition: IDomNodePagePosition | undefined;\n\tprivate boundarySashes: IBoundarySashes | undefined;\n\tprivate readonly editorOperation = this._register(new LongRunningOperation(this.editorProgressService));\n\tprivate readonly editorPanesRegistry = Registry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane);\n\n\tconstructor(\n\t\tprivate readonly editorGroupParent: HTMLElement,\n\t\tprivate readonly editorPanesParent: HTMLElement,\n\t\tprivate readonly groupView: IEditorGroupView,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IEditorProgressService private readonly editorProgressService: IEditorProgressService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustService: IWorkspaceTrustManagementService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.workspaceTrustService.onDidChangeTrust(() => this.onDidChangeWorkspaceTrust()));\n\t}\n\n\tprivate onDidChangeWorkspaceTrust() {\n\n\t\t// If the active editor pane requires workspace trust\n\t\t// we need to re-open it anytime trust changes to\n\t\t// account for it.\n\t\t// For that we explicitly call into the group-view\n\t\t// to handle errors properly.\n\t\tconst editor = this._activeEditorPane?.input;\n\t\tconst options = this._activeEditorPane?.options;\n\t\tif (editor?.hasCapability(EditorInputCapabilities.RequiresTrust)) {\n\t\t\tthis.groupView.openEditor(editor, options);\n\t\t}\n\t}\n\n\tasync openEditor(editor: EditorInput, options: IEditorOptions | undefined, internalOptions: IInternalEditorOpenOptions | undefined, context: IEditorOpenContext = Object.create(null)): Promise<IOpenEditorResult> {\n\t\ttry {\n\t\t\treturn await this.doOpenEditor(this.getEditorPaneDescriptor(editor), editor, options, internalOptions, context);\n\t\t} catch (error) {\n\n\t\t\t// First check if caller instructed us to ignore error handling\n\t\t\tif (options?.ignoreError) {\n\t\t\t\treturn { error };\n\t\t\t}\n\n\t\t\t// In case of an error when opening an editor, we still want to show\n\t\t\t// an editor in the desired location to preserve the user intent and\n\t\t\t// view state (e.g. when restoring).\n\t\t\t//\n\t\t\t// For that reason we have place holder editors that can convey a\n\t\t\t// message with actions the user can click on.\n\n\t\t\treturn this.doShowError(error, editor, options, internalOptions, context);\n\t\t}\n\t}\n\n\tprivate async doShowError(error: Error, editor: EditorInput, options: IEditorOptions | undefined, internalOptions: IInternalEditorOpenOptions | undefined, context?: IEditorOpenContext): Promise<IOpenEditorResult> {\n\n\t\t// Always log the error to figure out what is going on\n\t\tthis.logService.error(error);\n\n\t\t// Show as modal dialog when explicit user action unless disabled\n\t\tlet errorHandled = false;\n\t\tif (options?.source === EditorOpenSource.USER && (!isEditorOpenError(error) || error.allowDialog)) {\n\t\t\terrorHandled = await this.doShowErrorDialog(error, editor);\n\t\t}\n\n\t\t// Return early if the user dealt with the error already\n\t\tif (errorHandled) {\n\t\t\treturn { error };\n\t\t}\n\n\t\t// Show as editor placeholder: pass over the error to display\n\t\tconst editorPlaceholderOptions: IErrorEditorPlaceholderOptions = { ...options };\n\t\tif (!isCancellationError(error)) {\n\t\t\teditorPlaceholderOptions.error = error;\n\t\t}\n\n\t\treturn {\n\t\t\t...(await this.doOpenEditor(ErrorPlaceholderEditor.DESCRIPTOR, editor, editorPlaceholderOptions, internalOptions, context)),\n\t\t\terror\n\t\t};\n\t}\n\n\tprivate async doShowErrorDialog(error: Error, editor: EditorInput): Promise<boolean> {\n\t\tlet severity = Severity.Error;\n\t\tlet message: string | undefined = undefined;\n\t\tlet detail: string | undefined = toErrorMessage(error);\n\t\tlet errorActions: readonly IAction[] | undefined = undefined;\n\n\t\tif (isEditorOpenError(error)) {\n\t\t\terrorActions = error.actions;\n\t\t\tseverity = error.forceSeverity ?? Severity.Error;\n\t\t\tif (error.forceMessage) {\n\t\t\t\tmessage = error.message;\n\t\t\t\tdetail = undefined;\n\t\t\t}\n\t\t}\n\n\t\tif (!message) {\n\t\t\tmessage = localize('editorOpenErrorDialog', \"Unable to open '{0}'\", editor.getName());\n\t\t}\n\n\t\tconst buttons: IPromptButton<IAction | undefined>[] = [];\n\t\tif (errorActions && errorActions.length > 0) {\n\t\t\tfor (const errorAction of errorActions) {\n\t\t\t\tbuttons.push({\n\t\t\t\t\tlabel: errorAction.label,\n\t\t\t\t\trun: () => errorAction\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tbuttons.push({\n\t\t\t\tlabel: localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, \"&&OK\"),\n\t\t\t\trun: () => undefined\n\t\t\t});\n\t\t}\n\n\t\tlet cancelButton: IPromptCancelButton<undefined> | undefined = undefined;\n\t\tif (buttons.length === 1) {\n\t\t\tcancelButton = {\n\t\t\t\trun: () => {\n\t\t\t\t\terrorHandled = true; // treat cancel as handled and do not show placeholder\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tlet errorHandled = false;  // by default, show placeholder\n\n\t\tconst { result } = await this.dialogService.prompt({\n\t\t\ttype: severity,\n\t\t\tmessage,\n\t\t\tdetail,\n\t\t\tbuttons,\n\t\t\tcancelButton\n\t\t});\n\n\t\tif (result) {\n\t\t\tconst errorActionResult = result.run();\n\t\t\tif (errorActionResult instanceof Promise) {\n\t\t\t\terrorActionResult.catch(error => this.dialogService.error(toErrorMessage(error)));\n\t\t\t}\n\n\t\t\terrorHandled = true; // treat custom error action as handled and do not show placeholder\n\t\t}\n\n\t\treturn errorHandled;\n\t}\n\n\tprivate async doOpenEditor(descriptor: IEditorPaneDescriptor, editor: EditorInput, options: IEditorOptions | undefined, internalOptions: IInternalEditorOpenOptions | undefined, context: IEditorOpenContext = Object.create(null)): Promise<IOpenEditorResult> {\n\n\t\t// Editor pane\n\t\tconst pane = this.doShowEditorPane(descriptor);\n\n\t\t// Remember current active element for deciding to restore focus later\n\t\tconst activeElement = getActiveElement();\n\n\t\t// Apply input to pane\n\t\tconst { changed, cancelled } = await this.doSetInput(pane, editor, options, context);\n\n\t\t// Make sure to pass focus to the pane or otherwise\n\t\t// make sure that the pane window is visible unless\n\t\t// this has been explicitly disabled.\n\t\tif (!cancelled) {\n\t\t\tconst focus = !options || !options.preserveFocus;\n\t\t\tif (focus && this.shouldRestoreFocus(activeElement)) {\n\t\t\t\tpane.focus();\n\t\t\t} else if (!internalOptions?.preserveWindowOrder) {\n\t\t\t\tthis.hostService.moveTop(getWindowById(this.groupView.windowId, true).window);\n\t\t\t}\n\t\t}\n\n\t\treturn { pane, changed, cancelled };\n\t}\n\n\tprivate shouldRestoreFocus(expectedActiveElement: Element | null): boolean {\n\t\tif (!this.layoutService.isRestored()) {\n\t\t\treturn true; // restore focus if we are not restored yet on startup\n\t\t}\n\n\t\tif (!expectedActiveElement) {\n\t\t\treturn true; // restore focus if nothing was focused\n\t\t}\n\n\t\tconst activeElement = getActiveElement();\n\t\tif (!activeElement || activeElement === expectedActiveElement.ownerDocument.body) {\n\t\t\treturn true; // restore focus if nothing is focused currently\n\t\t}\n\n\t\tconst same = expectedActiveElement === activeElement;\n\t\tif (same) {\n\t\t\treturn true; // restore focus if same element is still active\n\t\t}\n\n\t\tif (!isEditableElement(activeElement)) {\n\n\t\t\t// This is to avoid regressions from not restoring focus as we used to:\n\t\t\t// Only allow a different input element (or textarea) to remain focused\n\t\t\t// but not other elements that do not accept text input.\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (isAncestor(activeElement, this.editorGroupParent)) {\n\t\t\treturn true; // restore focus if active element is still inside our editor group\n\t\t}\n\n\t\treturn false; // do not restore focus\n\t}\n\n\tprivate getEditorPaneDescriptor(editor: EditorInput): IEditorPaneDescriptor {\n\t\tif (editor.hasCapability(EditorInputCapabilities.RequiresTrust) && !this.workspaceTrustService.isWorkspaceTrusted()) {\n\t\t\t// Workspace trust: if an editor signals it needs workspace trust\n\t\t\t// but the current workspace is untrusted, we fallback to a generic\n\t\t\t// editor descriptor to indicate this an do NOT load the registered\n\t\t\t// editor.\n\t\t\treturn WorkspaceTrustRequiredPlaceholderEditor.DESCRIPTOR;\n\t\t}\n\n\t\treturn assertIsDefined(this.editorPanesRegistry.getEditorPane(editor));\n\t}\n\n\tprivate doShowEditorPane(descriptor: IEditorPaneDescriptor): EditorPane {\n\n\t\t// Return early if the currently active editor pane can handle the input\n\t\tif (this._activeEditorPane && descriptor.describes(this._activeEditorPane)) {\n\t\t\treturn this._activeEditorPane;\n\t\t}\n\n\t\t// Hide active one first\n\t\tthis.doHideActiveEditorPane();\n\n\t\t// Create editor pane\n\t\tconst editorPane = this.doCreateEditorPane(descriptor);\n\n\t\t// Set editor as active\n\t\tthis.doSetActiveEditorPane(editorPane);\n\n\t\t// Show editor\n\t\tconst container = assertIsDefined(editorPane.getContainer());\n\t\tthis.editorPanesParent.appendChild(container);\n\t\tshow(container);\n\n\t\t// Indicate to editor that it is now visible\n\t\teditorPane.setVisible(true);\n\n\t\t// Layout\n\t\tif (this.pagePosition) {\n\t\t\teditorPane.layout(new Dimension(this.pagePosition.width, this.pagePosition.height), { top: this.pagePosition.top, left: this.pagePosition.left });\n\t\t}\n\n\t\t// Boundary sashes\n\t\tif (this.boundarySashes) {\n\t\t\teditorPane.setBoundarySashes(this.boundarySashes);\n\t\t}\n\n\t\treturn editorPane;\n\t}\n\n\tprivate doCreateEditorPane(descriptor: IEditorPaneDescriptor): EditorPane {\n\n\t\t// Instantiate editor\n\t\tconst editorPane = this.doInstantiateEditorPane(descriptor);\n\n\t\t// Create editor container as needed\n\t\tif (!editorPane.getContainer()) {\n\t\t\tconst editorPaneContainer = document.createElement('div');\n\t\t\teditorPaneContainer.classList.add('editor-instance');\n\n\t\t\t// It is cruicial to append the container to its parent before\n\t\t\t// passing on to the create() method of the pane so that the\n\t\t\t// right `window` can be determined in floating window cases.\n\t\t\tthis.editorPanesParent.appendChild(editorPaneContainer);\n\n\t\t\teditorPane.create(editorPaneContainer);\n\t\t}\n\n\t\treturn editorPane;\n\t}\n\n\tprivate doInstantiateEditorPane(descriptor: IEditorPaneDescriptor): EditorPane {\n\n\t\t// Return early if already instantiated\n\t\tconst existingEditorPane = this.editorPanes.find(editorPane => descriptor.describes(editorPane));\n\t\tif (existingEditorPane) {\n\t\t\treturn existingEditorPane;\n\t\t}\n\n\t\t// Otherwise instantiate new\n\t\tconst editorPane = this._register(descriptor.instantiate(this.instantiationService, this.groupView));\n\t\tthis.editorPanes.push(editorPane);\n\n\t\treturn editorPane;\n\t}\n\n\tprivate doSetActiveEditorPane(editorPane: EditorPane | null) {\n\t\tthis._activeEditorPane = editorPane;\n\n\t\t// Clear out previous active editor pane listeners\n\t\tthis.activeEditorPaneDisposables.clear();\n\n\t\t// Listen to editor pane changes\n\t\tif (editorPane) {\n\t\t\tthis.activeEditorPaneDisposables.add(editorPane.onDidChangeSizeConstraints(e => this._onDidChangeSizeConstraints.fire(e)));\n\t\t\tthis.activeEditorPaneDisposables.add(editorPane.onDidFocus(() => this._onDidFocus.fire()));\n\t\t}\n\n\t\t// Indicate that size constraints could have changed due to new editor\n\t\tthis._onDidChangeSizeConstraints.fire(undefined);\n\t}\n\n\tprivate async doSetInput(editorPane: EditorPane, editor: EditorInput, options: IEditorOptions | undefined, context: IEditorOpenContext): Promise<{ changed: boolean; cancelled: boolean }> {\n\n\t\t// If the input did not change, return early and only\n\t\t// apply the options unless the options instruct us to\n\t\t// force open it even if it is the same\n\t\tlet inputMatches = editorPane.input?.matches(editor);\n\t\tif (inputMatches && !options?.forceReload) {\n\n\t\t\t// We have to await a pending `setInput()` call for this\n\t\t\t// pane before we can call into `setOptions()`, otherwise\n\t\t\t// we risk calling when the input is not yet fully applied.\n\t\t\tif (this.mapEditorPaneToPendingSetInput.has(editorPane)) {\n\t\t\t\tawait this.mapEditorPaneToPendingSetInput.get(editorPane);\n\t\t\t}\n\n\t\t\t// At this point, the input might have changed, so we check again\n\t\t\tinputMatches = editorPane.input?.matches(editor);\n\t\t\tif (inputMatches) {\n\t\t\t\teditorPane.setOptions(options);\n\t\t\t}\n\n\t\t\treturn { changed: false, cancelled: !inputMatches };\n\t\t}\n\n\t\t// Start a new editor input operation to report progress\n\t\t// and to support cancellation. Any new operation that is\n\t\t// started will cancel the previous one.\n\t\tconst operation = this.editorOperation.start(this.layoutService.isRestored() ? 800 : 3200);\n\n\t\tlet cancelled = false;\n\t\ttry {\n\n\t\t\t// Clear the current input before setting new input\n\t\t\t// This ensures that a slow loading input will not\n\t\t\t// be visible for the duration of the new input to\n\t\t\t// load (https://github.com/microsoft/vscode/issues/34697)\n\t\t\teditorPane.clearInput();\n\n\t\t\t// Set the input to the editor pane and keep track of it\n\t\t\tconst pendingSetInput = editorPane.setInput(editor, options, context, operation.token);\n\t\t\tthis.mapEditorPaneToPendingSetInput.set(editorPane, pendingSetInput);\n\t\t\tawait pendingSetInput;\n\n\t\t\tif (!operation.isCurrent()) {\n\t\t\t\tcancelled = true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (!operation.isCurrent()) {\n\t\t\t\tcancelled = true;\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t} finally {\n\t\t\tif (operation.isCurrent()) {\n\t\t\t\tthis.mapEditorPaneToPendingSetInput.delete(editorPane);\n\t\t\t}\n\t\t\toperation.stop();\n\t\t}\n\n\t\treturn { changed: !inputMatches, cancelled };\n\t}\n\n\tprivate doHideActiveEditorPane(): void {\n\t\tif (!this._activeEditorPane) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Stop any running operation\n\t\tthis.editorOperation.stop();\n\n\t\t// Indicate to editor pane before removing the editor from\n\t\t// the DOM to give a chance to persist certain state that\n\t\t// might depend on still being the active DOM element.\n\t\tthis.safeRun(() => this._activeEditorPane?.clearInput());\n\t\tthis.safeRun(() => this._activeEditorPane?.setVisible(false));\n\n\t\t// Clear any pending setInput promise\n\t\tthis.mapEditorPaneToPendingSetInput.delete(this._activeEditorPane);\n\n\t\t// Remove editor pane from parent\n\t\tconst editorPaneContainer = this._activeEditorPane.getContainer();\n\t\tif (editorPaneContainer) {\n\t\t\teditorPaneContainer.remove();\n\t\t\thide(editorPaneContainer);\n\t\t}\n\n\t\t// Clear active editor pane\n\t\tthis.doSetActiveEditorPane(null);\n\t}\n\n\tcloseEditor(editor: EditorInput): void {\n\t\tif (this._activeEditorPane?.input && editor.matches(this._activeEditorPane.input)) {\n\t\t\tthis.doHideActiveEditorPane();\n\t\t}\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tthis.safeRun(() => this._activeEditorPane?.setVisible(visible));\n\t}\n\n\tlayout(pagePosition: IDomNodePagePosition): void {\n\t\tthis.pagePosition = pagePosition;\n\n\t\tthis.safeRun(() => this._activeEditorPane?.layout(new Dimension(pagePosition.width, pagePosition.height), pagePosition));\n\t}\n\n\tsetBoundarySashes(sashes: IBoundarySashes): void {\n\t\tthis.boundarySashes = sashes;\n\n\t\tthis.safeRun(() => this._activeEditorPane?.setBoundarySashes(sashes));\n\t}\n\n\tprivate safeRun(fn: () => void): void {\n\n\t\t// We delegate many calls to the active editor pane which\n\t\t// can be any kind of editor. We must ensure that our calls\n\t\t// do not throw, for example in `layout()` because that can\n\t\t// mess with the grid layout.\n\n\t\ttry {\n\t\t\tfn();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["error", "editorPane"]
}
