{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorParts.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { EditorGroupLayout, GroupDirection, GroupLocation, GroupOrientation, GroupsArrangement, GroupsOrder, IAuxiliaryEditorPart, IEditorGroupContextKeyProvider, IEditorDropTargetDelegate, IEditorGroupsService, IEditorSideGroup, IEditorWorkingSet, IFindGroupScope, IMergeGroupOptions, IEditorWorkingSetOptions, IEditorPart } from '../../../services/editor/common/editorGroupsService.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { DisposableMap, DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { GroupIdentifier } from '../../../common/editor.js';\nimport { EditorPart, IEditorPartUIState, MainEditorPart } from './editorPart.js';\nimport { IEditorGroupView, IEditorPartsView } from './editor.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { AuxiliaryEditorPart, IAuxiliaryEditorPartOpenOptions } from './auxiliaryEditorPart.js';\nimport { MultiWindowParts } from '../../part.js';\nimport { DeferredPromise } from '../../../../base/common/async.js';\nimport { IStorageService, IStorageValueChangeEvent, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IAuxiliaryWindowOpenOptions, IAuxiliaryWindowService } from '../../../services/auxiliaryWindow/browser/auxiliaryWindowService.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ContextKeyValue, IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { isHTMLElement } from '../../../../base/browser/dom.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\ninterface IEditorPartsUIState {\n\treadonly auxiliary: IAuxiliaryEditorPartState[];\n\treadonly mru: number[];\n\t// main state is managed by the main part\n}\n\ninterface IAuxiliaryEditorPartState extends IAuxiliaryWindowOpenOptions {\n\treadonly state: IEditorPartUIState;\n}\n\ninterface IEditorWorkingSetState extends IEditorWorkingSet {\n\treadonly main: IEditorPartUIState;\n\treadonly auxiliary: IEditorPartsUIState;\n}\n\nexport class EditorParts extends MultiWindowParts<EditorPart> implements IEditorGroupsService, IEditorPartsView {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly mainPart = this._register(this.createMainEditorPart());\n\n\tprivate mostRecentActiveParts = [this.mainPart];\n\n\tconstructor(\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IAuxiliaryWindowService private readonly auxiliaryWindowService: IAuxiliaryWindowService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper('workbench.editorParts', themeService, storageService);\n\n\t\tthis._register(this.registerPart(this.mainPart));\n\n\t\tthis.restoreParts();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.onDidChangeMementoValue(StorageScope.WORKSPACE, this._store)(e => this.onDidChangeMementoState(e)));\n\t\tthis.whenReady.then(() => this.registerGroupsContextKeyListeners());\n\t}\n\n\tprotected createMainEditorPart(): MainEditorPart {\n\t\treturn this.instantiationService.createInstance(MainEditorPart, this);\n\t}\n\n\t//#region Scoped Instantiation Services\n\n\tprivate readonly mapPartToInstantiationService = new Map<number /* window ID */, IInstantiationService>();\n\n\tgetScopedInstantiationService(part: IEditorPart): IInstantiationService {\n\t\tif (part === this.mainPart) {\n\t\t\tif (!this.mapPartToInstantiationService.has(part.windowId)) {\n\t\t\t\tthis.instantiationService.invokeFunction(accessor => {\n\t\t\t\t\tconst editorService = accessor.get(IEditorService); // using `invokeFunction` to get hold of `IEditorService` lazily\n\n\t\t\t\t\tthis.mapPartToInstantiationService.set(part.windowId, this._register(this.instantiationService.createChild(new ServiceCollection(\n\t\t\t\t\t\t[IEditorService, editorService.createScoped('main', this._store)]\n\t\t\t\t\t))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn this.mapPartToInstantiationService.get(part.windowId) ?? this.instantiationService;\n\t}\n\n\t//#endregion\n\n\t//#region Auxiliary Editor Parts\n\n\tprivate readonly _onDidCreateAuxiliaryEditorPart = this._register(new Emitter<IAuxiliaryEditorPart>());\n\treadonly onDidCreateAuxiliaryEditorPart = this._onDidCreateAuxiliaryEditorPart.event;\n\n\tasync createAuxiliaryEditorPart(options?: IAuxiliaryEditorPartOpenOptions): Promise<IAuxiliaryEditorPart> {\n\t\tconst { part, instantiationService, disposables } = await this.instantiationService.createInstance(AuxiliaryEditorPart, this).create(this.getGroupsLabel(this._parts.size), options);\n\n\t\t// Keep instantiation service\n\t\tthis.mapPartToInstantiationService.set(part.windowId, instantiationService);\n\t\tdisposables.add(toDisposable(() => this.mapPartToInstantiationService.delete(part.windowId)));\n\n\t\t// Events\n\t\tthis._onDidAddGroup.fire(part.activeGroup);\n\n\t\tthis._onDidCreateAuxiliaryEditorPart.fire(part);\n\n\t\treturn part;\n\t}\n\n\t//#endregion\n\n\t//#region Registration\n\n\toverride registerPart(part: EditorPart): IDisposable {\n\t\tconst disposables = this._register(new DisposableStore());\n\t\tdisposables.add(super.registerPart(part));\n\n\t\tthis.registerEditorPartListeners(part, disposables);\n\n\t\treturn disposables;\n\t}\n\n\tprotected override unregisterPart(part: EditorPart): void {\n\t\tsuper.unregisterPart(part);\n\n\t\t// Notify all parts about a groups label change\n\t\t// given it is computed based on the index\n\n\t\tthis.parts.forEach((part, index) => {\n\t\t\tif (part === this.mainPart) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tpart.notifyGroupsLabelChange(this.getGroupsLabel(index));\n\t\t});\n\t}\n\n\tprivate registerEditorPartListeners(part: EditorPart, disposables: DisposableStore): void {\n\t\tdisposables.add(part.onDidFocus(() => {\n\t\t\tthis.doUpdateMostRecentActive(part, true);\n\n\t\t\tif (this._parts.size > 1) {\n\t\t\t\tthis._onDidActiveGroupChange.fire(this.activeGroup); // this can only happen when we have more than 1 editor part\n\t\t\t}\n\t\t}));\n\t\tdisposables.add(toDisposable(() => this.doUpdateMostRecentActive(part)));\n\n\t\tdisposables.add(part.onDidChangeActiveGroup(group => this._onDidActiveGroupChange.fire(group)));\n\t\tdisposables.add(part.onDidAddGroup(group => this._onDidAddGroup.fire(group)));\n\t\tdisposables.add(part.onDidRemoveGroup(group => this._onDidRemoveGroup.fire(group)));\n\t\tdisposables.add(part.onDidMoveGroup(group => this._onDidMoveGroup.fire(group)));\n\t\tdisposables.add(part.onDidActivateGroup(group => this._onDidActivateGroup.fire(group)));\n\t\tdisposables.add(part.onDidChangeGroupMaximized(maximized => this._onDidChangeGroupMaximized.fire(maximized)));\n\n\t\tdisposables.add(part.onDidChangeGroupIndex(group => this._onDidChangeGroupIndex.fire(group)));\n\t\tdisposables.add(part.onDidChangeGroupLocked(group => this._onDidChangeGroupLocked.fire(group)));\n\t}\n\n\tprivate doUpdateMostRecentActive(part: EditorPart, makeMostRecentlyActive?: boolean): void {\n\t\tconst index = this.mostRecentActiveParts.indexOf(part);\n\n\t\t// Remove from MRU list\n\t\tif (index !== -1) {\n\t\t\tthis.mostRecentActiveParts.splice(index, 1);\n\t\t}\n\n\t\t// Add to front as needed\n\t\tif (makeMostRecentlyActive) {\n\t\t\tthis.mostRecentActiveParts.unshift(part);\n\t\t}\n\t}\n\n\tprivate getGroupsLabel(index: number): string {\n\t\treturn localize('groupLabel', \"Window {0}\", index + 1);\n\t}\n\n\t//#endregion\n\n\t//#region Helpers\n\n\toverride getPart(group: IEditorGroupView | GroupIdentifier): EditorPart;\n\toverride getPart(element: HTMLElement): EditorPart;\n\toverride getPart(groupOrElement: IEditorGroupView | GroupIdentifier | HTMLElement): EditorPart {\n\t\tif (this._parts.size > 1) {\n\t\t\tif (isHTMLElement(groupOrElement)) {\n\t\t\t\tconst element = groupOrElement;\n\n\t\t\t\treturn this.getPartByDocument(element.ownerDocument);\n\t\t\t} else {\n\t\t\t\tconst group = groupOrElement;\n\n\t\t\t\tlet id: GroupIdentifier;\n\t\t\t\tif (typeof group === 'number') {\n\t\t\t\t\tid = group;\n\t\t\t\t} else {\n\t\t\t\t\tid = group.id;\n\t\t\t\t}\n\n\t\t\t\tfor (const part of this._parts) {\n\t\t\t\t\tif (part.hasGroup(id)) {\n\t\t\t\t\t\treturn part;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.mainPart;\n\t}\n\n\t//#endregion\n\n\t//#region Lifecycle / State\n\n\tprivate static readonly EDITOR_PARTS_UI_STATE_STORAGE_KEY = 'editorparts.state';\n\n\tprivate readonly workspaceMemento = this.getMemento(StorageScope.WORKSPACE, StorageTarget.USER);\n\n\tprivate _isReady = false;\n\tget isReady(): boolean { return this._isReady; }\n\n\tprivate readonly whenReadyPromise = new DeferredPromise<void>();\n\treadonly whenReady = this.whenReadyPromise.p;\n\n\tprivate readonly whenRestoredPromise = new DeferredPromise<void>();\n\treadonly whenRestored = this.whenRestoredPromise.p;\n\n\tprivate async restoreParts(): Promise<void> {\n\n\t\t// Join on the main part being ready to pick\n\t\t// the right moment to begin restoring.\n\t\t// The main part is automatically being created\n\t\t// as part of the overall startup process.\n\t\tawait this.mainPart.whenReady;\n\n\t\t// Only attempt to restore auxiliary editor parts\n\t\t// when the main part did restore. It is possible\n\t\t// that restoring was not attempted because specific\n\t\t// editors were opened.\n\t\tif (this.mainPart.willRestoreState) {\n\t\t\tconst state = this.loadState();\n\t\t\tif (state) {\n\t\t\t\tawait this.restoreState(state);\n\t\t\t}\n\t\t}\n\n\t\tconst mostRecentActivePart = this.mostRecentActiveParts.at(0);\n\t\tmostRecentActivePart?.activeGroup.focus();\n\n\t\tthis._isReady = true;\n\t\tthis.whenReadyPromise.complete();\n\n\t\t// Await restored\n\t\tawait Promise.allSettled(this.parts.map(part => part.whenRestored));\n\t\tthis.whenRestoredPromise.complete();\n\t}\n\n\tprivate loadState(): IEditorPartsUIState | undefined {\n\t\treturn this.workspaceMemento[EditorParts.EDITOR_PARTS_UI_STATE_STORAGE_KEY];\n\t}\n\n\tprotected override saveState(): void {\n\t\tconst state = this.createState();\n\t\tif (state.auxiliary.length === 0) {\n\t\t\tdelete this.workspaceMemento[EditorParts.EDITOR_PARTS_UI_STATE_STORAGE_KEY];\n\t\t} else {\n\t\t\tthis.workspaceMemento[EditorParts.EDITOR_PARTS_UI_STATE_STORAGE_KEY] = state;\n\t\t}\n\t}\n\n\tprivate createState(): IEditorPartsUIState {\n\t\treturn {\n\t\t\tauxiliary: this.parts.filter(part => part !== this.mainPart).map(part => {\n\t\t\t\tconst auxiliaryWindow = this.auxiliaryWindowService.getWindow(part.windowId);\n\n\t\t\t\treturn {\n\t\t\t\t\tstate: part.createState(),\n\t\t\t\t\t...auxiliaryWindow?.createState()\n\t\t\t\t};\n\t\t\t}),\n\t\t\tmru: this.mostRecentActiveParts.map(part => this.parts.indexOf(part))\n\t\t};\n\t}\n\n\tprivate async restoreState(state: IEditorPartsUIState): Promise<void> {\n\t\tif (state.auxiliary.length) {\n\t\t\tconst auxiliaryEditorPartPromises: Promise<IAuxiliaryEditorPart>[] = [];\n\n\t\t\t// Create auxiliary editor parts\n\t\t\tfor (const auxiliaryEditorPartState of state.auxiliary) {\n\t\t\t\tauxiliaryEditorPartPromises.push(this.createAuxiliaryEditorPart(auxiliaryEditorPartState));\n\t\t\t}\n\n\t\t\t// Await creation\n\t\t\tawait Promise.allSettled(auxiliaryEditorPartPromises);\n\n\t\t\t// Update MRU list\n\t\t\tif (state.mru.length === this.parts.length) {\n\t\t\t\tthis.mostRecentActiveParts = state.mru.map(index => this.parts[index]);\n\t\t\t} else {\n\t\t\t\tthis.mostRecentActiveParts = [...this.parts];\n\t\t\t}\n\n\t\t\t// Await ready\n\t\t\tawait Promise.allSettled(this.parts.map(part => part.whenReady));\n\t\t}\n\t}\n\n\tget hasRestorableState(): boolean {\n\t\treturn this.parts.some(part => part.hasRestorableState);\n\t}\n\n\tprivate onDidChangeMementoState(e: IStorageValueChangeEvent): void {\n\t\tif (e.external && e.scope === StorageScope.WORKSPACE) {\n\t\t\tthis.reloadMemento(e.scope);\n\n\t\t\tconst state = this.loadState();\n\t\t\tif (state) {\n\t\t\t\tthis.applyState(state);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async applyState(state: IEditorPartsUIState | 'empty'): Promise<boolean> {\n\n\t\t// Before closing windows, try to close as many editors as\n\t\t// possible, but skip over those that would trigger a dialog\n\t\t// (for example when being dirty). This is to be able to have\n\t\t// them merge into the main part.\n\n\t\tfor (const part of this.parts) {\n\t\t\tif (part === this.mainPart) {\n\t\t\t\tcontinue; // main part takes care on its own\n\t\t\t}\n\n\t\t\tfor (const group of part.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\t\tawait group.closeAllEditors({ excludeConfirming: true });\n\t\t\t}\n\n\t\t\tconst closed = (part as unknown as IAuxiliaryEditorPart).close(); // will move remaining editors to main part\n\t\t\tif (!closed) {\n\t\t\t\treturn false; // this indicates that closing was vetoed\n\t\t\t}\n\t\t}\n\n\t\t// Restore auxiliary state unless we are in an empty state\n\t\tif (state !== 'empty') {\n\t\t\tawait this.restoreState(state);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t//#endregion\n\n\t//#region Working Sets\n\n\tprivate static readonly EDITOR_WORKING_SETS_STORAGE_KEY = 'editor.workingSets';\n\n\tprivate editorWorkingSets: IEditorWorkingSetState[] = (() => {\n\t\tconst workingSetsRaw = this.storageService.get(EditorParts.EDITOR_WORKING_SETS_STORAGE_KEY, StorageScope.WORKSPACE);\n\t\tif (workingSetsRaw) {\n\t\t\treturn JSON.parse(workingSetsRaw);\n\t\t}\n\n\t\treturn [];\n\t})();\n\n\tsaveWorkingSet(name: string): IEditorWorkingSet {\n\t\tconst workingSet: IEditorWorkingSetState = {\n\t\t\tid: generateUuid(),\n\t\t\tname,\n\t\t\tmain: this.mainPart.createState(),\n\t\t\tauxiliary: this.createState()\n\t\t};\n\n\t\tthis.editorWorkingSets.push(workingSet);\n\n\t\tthis.saveWorkingSets();\n\n\t\treturn {\n\t\t\tid: workingSet.id,\n\t\t\tname: workingSet.name\n\t\t};\n\t}\n\n\tgetWorkingSets(): IEditorWorkingSet[] {\n\t\treturn this.editorWorkingSets.map(workingSet => ({ id: workingSet.id, name: workingSet.name }));\n\t}\n\n\tdeleteWorkingSet(workingSet: IEditorWorkingSet): void {\n\t\tconst index = this.indexOfWorkingSet(workingSet);\n\t\tif (typeof index === 'number') {\n\t\t\tthis.editorWorkingSets.splice(index, 1);\n\n\t\t\tthis.saveWorkingSets();\n\t\t}\n\t}\n\n\tasync applyWorkingSet(workingSet: IEditorWorkingSet | 'empty', options?: IEditorWorkingSetOptions): Promise<boolean> {\n\t\tlet workingSetState: IEditorWorkingSetState | 'empty' | undefined;\n\t\tif (workingSet === 'empty') {\n\t\t\tworkingSetState = 'empty';\n\t\t} else {\n\t\t\tworkingSetState = this.editorWorkingSets[this.indexOfWorkingSet(workingSet) ?? -1];\n\t\t}\n\n\t\tif (!workingSetState) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Apply state: begin with auxiliary windows first because it helps to keep\n\t\t// editors around that need confirmation by moving them into the main part.\n\t\t// Also, in rare cases, the auxiliary part may not be able to apply the state\n\t\t// for certain editors that cannot move to the main part.\n\t\tconst applied = await this.applyState(workingSetState === 'empty' ? workingSetState : workingSetState.auxiliary);\n\t\tif (!applied) {\n\t\t\treturn false;\n\t\t}\n\t\tawait this.mainPart.applyState(workingSetState === 'empty' ? workingSetState : workingSetState.main, options);\n\n\t\t// Restore Focus unless instructed otherwise\n\t\tif (!options?.preserveFocus) {\n\t\t\tconst mostRecentActivePart = this.mostRecentActiveParts.at(0);\n\t\t\tif (mostRecentActivePart) {\n\t\t\t\tawait mostRecentActivePart.whenReady;\n\t\t\t\tmostRecentActivePart.activeGroup.focus();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate indexOfWorkingSet(workingSet: IEditorWorkingSet): number | undefined {\n\t\tfor (let i = 0; i < this.editorWorkingSets.length; i++) {\n\t\t\tif (this.editorWorkingSets[i].id === workingSet.id) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate saveWorkingSets(): void {\n\t\tthis.storageService.store(EditorParts.EDITOR_WORKING_SETS_STORAGE_KEY, JSON.stringify(this.editorWorkingSets), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\t//#endregion\n\n\t//#region Events\n\n\tprivate readonly _onDidActiveGroupChange = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidChangeActiveGroup = this._onDidActiveGroupChange.event;\n\n\tprivate readonly _onDidAddGroup = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidAddGroup = this._onDidAddGroup.event;\n\n\tprivate readonly _onDidRemoveGroup = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidRemoveGroup = this._onDidRemoveGroup.event;\n\n\tprivate readonly _onDidMoveGroup = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidMoveGroup = this._onDidMoveGroup.event;\n\n\tprivate readonly _onDidActivateGroup = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidActivateGroup = this._onDidActivateGroup.event;\n\n\tprivate readonly _onDidChangeGroupIndex = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidChangeGroupIndex = this._onDidChangeGroupIndex.event;\n\n\tprivate readonly _onDidChangeGroupLocked = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidChangeGroupLocked = this._onDidChangeGroupLocked.event;\n\n\tprivate readonly _onDidChangeGroupMaximized = this._register(new Emitter<boolean>());\n\treadonly onDidChangeGroupMaximized = this._onDidChangeGroupMaximized.event;\n\n\t//#endregion\n\n\t//#region Group Management\n\n\tget activeGroup(): IEditorGroupView {\n\t\treturn this.activePart.activeGroup;\n\t}\n\n\tget sideGroup(): IEditorSideGroup {\n\t\treturn this.activePart.sideGroup;\n\t}\n\n\tget groups(): IEditorGroupView[] {\n\t\treturn this.getGroups();\n\t}\n\n\tget count(): number {\n\t\treturn this.groups.length;\n\t}\n\n\tgetGroups(order = GroupsOrder.CREATION_TIME): IEditorGroupView[] {\n\t\tif (this._parts.size > 1) {\n\t\t\tlet parts: EditorPart[];\n\t\t\tswitch (order) {\n\t\t\t\tcase GroupsOrder.GRID_APPEARANCE: // we currently do not have a way to compute by appearance over multiple windows\n\t\t\t\tcase GroupsOrder.CREATION_TIME:\n\t\t\t\t\tparts = this.parts;\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupsOrder.MOST_RECENTLY_ACTIVE:\n\t\t\t\t\tparts = distinct([...this.mostRecentActiveParts, ...this.parts]); // always ensure all parts are included\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn parts.map(part => part.getGroups(order)).flat();\n\t\t}\n\n\t\treturn this.mainPart.getGroups(order);\n\t}\n\n\tgetGroup(identifier: GroupIdentifier): IEditorGroupView | undefined {\n\t\tif (this._parts.size > 1) {\n\t\t\tfor (const part of this._parts) {\n\t\t\t\tconst group = part.getGroup(identifier);\n\t\t\t\tif (group) {\n\t\t\t\t\treturn group;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.mainPart.getGroup(identifier);\n\t}\n\n\tprivate assertGroupView(group: IEditorGroupView | GroupIdentifier): IEditorGroupView {\n\t\tlet groupView: IEditorGroupView | undefined;\n\t\tif (typeof group === 'number') {\n\t\t\tgroupView = this.getGroup(group);\n\t\t} else {\n\t\t\tgroupView = group;\n\t\t}\n\n\t\tif (!groupView) {\n\t\t\tthrow new Error('Invalid editor group provided!');\n\t\t}\n\n\t\treturn groupView;\n\t}\n\n\tactivateGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView {\n\t\treturn this.getPart(group).activateGroup(group);\n\t}\n\n\tgetSize(group: IEditorGroupView | GroupIdentifier): { width: number; height: number } {\n\t\treturn this.getPart(group).getSize(group);\n\t}\n\n\tsetSize(group: IEditorGroupView | GroupIdentifier, size: { width: number; height: number }): void {\n\t\tthis.getPart(group).setSize(group, size);\n\t}\n\n\tarrangeGroups(arrangement: GroupsArrangement, group: IEditorGroupView | GroupIdentifier = this.activePart.activeGroup): void {\n\t\tthis.getPart(group).arrangeGroups(arrangement, group);\n\t}\n\n\ttoggleMaximizeGroup(group: IEditorGroupView | GroupIdentifier = this.activePart.activeGroup): void {\n\t\tthis.getPart(group).toggleMaximizeGroup(group);\n\t}\n\n\ttoggleExpandGroup(group: IEditorGroupView | GroupIdentifier = this.activePart.activeGroup): void {\n\t\tthis.getPart(group).toggleExpandGroup(group);\n\t}\n\n\trestoreGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView {\n\t\treturn this.getPart(group).restoreGroup(group);\n\t}\n\n\tapplyLayout(layout: EditorGroupLayout): void {\n\t\tthis.activePart.applyLayout(layout);\n\t}\n\n\tgetLayout(): EditorGroupLayout {\n\t\treturn this.activePart.getLayout();\n\t}\n\n\tget orientation() {\n\t\treturn this.activePart.orientation;\n\t}\n\n\tsetGroupOrientation(orientation: GroupOrientation): void {\n\t\tthis.activePart.setGroupOrientation(orientation);\n\t}\n\n\tfindGroup(scope: IFindGroupScope, source: IEditorGroupView | GroupIdentifier = this.activeGroup, wrap?: boolean): IEditorGroupView | undefined {\n\t\tconst sourcePart = this.getPart(source);\n\t\tif (this._parts.size > 1) {\n\t\t\tconst groups = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\n\t\t\t// Ensure that FIRST/LAST dispatches globally over all parts\n\t\t\tif (scope.location === GroupLocation.FIRST || scope.location === GroupLocation.LAST) {\n\t\t\t\treturn scope.location === GroupLocation.FIRST ? groups[0] : groups[groups.length - 1];\n\t\t\t}\n\n\t\t\t// Try to find in target part first without wrapping\n\t\t\tconst group = sourcePart.findGroup(scope, source, false);\n\t\t\tif (group) {\n\t\t\t\treturn group;\n\t\t\t}\n\n\t\t\t// Ensure that NEXT/PREVIOUS dispatches globally over all parts\n\t\t\tif (scope.location === GroupLocation.NEXT || scope.location === GroupLocation.PREVIOUS) {\n\t\t\t\tconst sourceGroup = this.assertGroupView(source);\n\t\t\t\tconst index = groups.indexOf(sourceGroup);\n\n\t\t\t\tif (scope.location === GroupLocation.NEXT) {\n\t\t\t\t\tlet nextGroup: IEditorGroupView | undefined = groups[index + 1];\n\t\t\t\t\tif (!nextGroup && wrap) {\n\t\t\t\t\t\tnextGroup = groups[0];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextGroup;\n\t\t\t\t} else {\n\t\t\t\t\tlet previousGroup: IEditorGroupView | undefined = groups[index - 1];\n\t\t\t\t\tif (!previousGroup && wrap) {\n\t\t\t\t\t\tpreviousGroup = groups[groups.length - 1];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn previousGroup;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sourcePart.findGroup(scope, source, wrap);\n\t}\n\n\taddGroup(location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView {\n\t\treturn this.getPart(location).addGroup(location, direction);\n\t}\n\n\tremoveGroup(group: IEditorGroupView | GroupIdentifier): void {\n\t\tthis.getPart(group).removeGroup(group);\n\t}\n\n\tmoveGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView {\n\t\treturn this.getPart(group).moveGroup(group, location, direction);\n\t}\n\n\tmergeGroup(group: IEditorGroupView | GroupIdentifier, target: IEditorGroupView | GroupIdentifier, options?: IMergeGroupOptions): boolean {\n\t\treturn this.getPart(group).mergeGroup(group, target, options);\n\t}\n\n\tmergeAllGroups(target: IEditorGroupView | GroupIdentifier): boolean {\n\t\treturn this.activePart.mergeAllGroups(target);\n\t}\n\n\tcopyGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView {\n\t\treturn this.getPart(group).copyGroup(group, location, direction);\n\t}\n\n\tcreateEditorDropTarget(container: HTMLElement, delegate: IEditorDropTargetDelegate): IDisposable {\n\t\treturn this.getPart(container).createEditorDropTarget(container, delegate);\n\t}\n\n\t//#endregion\n\n\t//#region Editor Group Context Key Handling\n\n\tprivate readonly globalContextKeys = new Map<string, IContextKey<ContextKeyValue>>();\n\tprivate readonly scopedContextKeys = new Map<GroupIdentifier, Map<string, IContextKey<ContextKeyValue>>>();\n\n\tprivate registerGroupsContextKeyListeners(): void {\n\t\tthis._register(this.onDidChangeActiveGroup(() => this.updateGlobalContextKeys()));\n\t\tthis.groups.forEach(group => this.registerGroupContextKeyProvidersListeners(group));\n\t\tthis._register(this.onDidAddGroup(group => this.registerGroupContextKeyProvidersListeners(group)));\n\t\tthis._register(this.onDidRemoveGroup(group => {\n\t\t\tthis.scopedContextKeys.delete(group.id);\n\t\t\tthis.registeredContextKeys.delete(group.id);\n\t\t\tthis.contextKeyProviderDisposables.deleteAndDispose(group.id);\n\t\t}));\n\t}\n\n\tprivate updateGlobalContextKeys(): void {\n\t\tconst activeGroupScopedContextKeys = this.scopedContextKeys.get(this.activeGroup.id);\n\t\tif (!activeGroupScopedContextKeys) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const [key, globalContextKey] of this.globalContextKeys) {\n\t\t\tconst scopedContextKey = activeGroupScopedContextKeys.get(key);\n\t\t\tif (scopedContextKey) {\n\t\t\t\tglobalContextKey.set(scopedContextKey.get());\n\t\t\t} else {\n\t\t\t\tglobalContextKey.reset();\n\t\t\t}\n\t\t}\n\t}\n\n\tbind<T extends ContextKeyValue>(contextKey: RawContextKey<T>, group: IEditorGroupView): IContextKey<T> {\n\n\t\t// Ensure we only bind to the same context key once globaly\n\t\tlet globalContextKey = this.globalContextKeys.get(contextKey.key);\n\t\tif (!globalContextKey) {\n\t\t\tglobalContextKey = contextKey.bindTo(this.contextKeyService);\n\t\t\tthis.globalContextKeys.set(contextKey.key, globalContextKey);\n\t\t}\n\n\t\t// Ensure we only bind to the same context key once per group\n\t\tlet groupScopedContextKeys = this.scopedContextKeys.get(group.id);\n\t\tif (!groupScopedContextKeys) {\n\t\t\tgroupScopedContextKeys = new Map<string, IContextKey<ContextKeyValue>>();\n\t\t\tthis.scopedContextKeys.set(group.id, groupScopedContextKeys);\n\t\t}\n\t\tlet scopedContextKey = groupScopedContextKeys.get(contextKey.key);\n\t\tif (!scopedContextKey) {\n\t\t\tscopedContextKey = contextKey.bindTo(group.scopedContextKeyService);\n\t\t\tgroupScopedContextKeys.set(contextKey.key, scopedContextKey);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn {\n\t\t\tget(): T | undefined {\n\t\t\t\treturn scopedContextKey.get() as T | undefined;\n\t\t\t},\n\t\t\tset(value: T): void {\n\t\t\t\tif (that.activeGroup === group) {\n\t\t\t\t\tglobalContextKey.set(value);\n\t\t\t\t}\n\t\t\t\tscopedContextKey.set(value);\n\t\t\t},\n\t\t\treset(): void {\n\t\t\t\tif (that.activeGroup === group) {\n\t\t\t\t\tglobalContextKey.reset();\n\t\t\t\t}\n\t\t\t\tscopedContextKey.reset();\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate readonly contextKeyProviders = new Map<string, IEditorGroupContextKeyProvider<ContextKeyValue>>();\n\tprivate readonly registeredContextKeys = new Map<GroupIdentifier, Map<string, IContextKey>>();\n\n\tregisterContextKeyProvider<T extends ContextKeyValue>(provider: IEditorGroupContextKeyProvider<T>): IDisposable {\n\t\tif (this.contextKeyProviders.has(provider.contextKey.key) || this.globalContextKeys.has(provider.contextKey.key)) {\n\t\t\tthrow new Error(`A context key provider for key ${provider.contextKey.key} already exists.`);\n\t\t}\n\n\t\tthis.contextKeyProviders.set(provider.contextKey.key, provider);\n\n\t\tconst setContextKeyForGroups = () => {\n\t\t\tfor (const group of this.groups) {\n\t\t\t\tthis.updateRegisteredContextKey(group, provider);\n\t\t\t}\n\t\t};\n\n\t\t// Run initially and on change\n\t\tsetContextKeyForGroups();\n\t\tconst onDidChange = provider.onDidChange?.(() => setContextKeyForGroups());\n\n\t\treturn toDisposable(() => {\n\t\t\tonDidChange?.dispose();\n\n\t\t\tthis.globalContextKeys.delete(provider.contextKey.key);\n\t\t\tthis.scopedContextKeys.forEach(scopedContextKeys => scopedContextKeys.delete(provider.contextKey.key));\n\n\t\t\tthis.contextKeyProviders.delete(provider.contextKey.key);\n\t\t\tthis.registeredContextKeys.forEach(registeredContextKeys => registeredContextKeys.delete(provider.contextKey.key));\n\t\t});\n\t}\n\n\tprivate readonly contextKeyProviderDisposables = this._register(new DisposableMap<GroupIdentifier, IDisposable>());\n\tprivate registerGroupContextKeyProvidersListeners(group: IEditorGroupView): void {\n\n\t\t// Update context keys from providers for the group when its active editor changes\n\t\tconst disposable = group.onDidActiveEditorChange(() => {\n\t\t\tfor (const contextKeyProvider of this.contextKeyProviders.values()) {\n\t\t\t\tthis.updateRegisteredContextKey(group, contextKeyProvider);\n\t\t\t}\n\t\t});\n\n\t\tthis.contextKeyProviderDisposables.set(group.id, disposable);\n\t}\n\n\tprivate updateRegisteredContextKey<T extends ContextKeyValue>(group: IEditorGroupView, provider: IEditorGroupContextKeyProvider<T>): void {\n\n\t\t// Get the group scoped context keys for the provider\n\t\t// If the providers context key has not yet been bound\n\t\t// to the group, do so now.\n\n\t\tlet groupRegisteredContextKeys = this.registeredContextKeys.get(group.id);\n\t\tif (!groupRegisteredContextKeys) {\n\t\t\tgroupRegisteredContextKeys = new Map<string, IContextKey>();\n\t\t\tthis.registeredContextKeys.set(group.id, groupRegisteredContextKeys);\n\t\t}\n\n\t\tlet scopedRegisteredContextKey = groupRegisteredContextKeys.get(provider.contextKey.key);\n\t\tif (!scopedRegisteredContextKey) {\n\t\t\tscopedRegisteredContextKey = this.bind(provider.contextKey, group);\n\t\t\tgroupRegisteredContextKeys.set(provider.contextKey.key, scopedRegisteredContextKey);\n\t\t}\n\n\t\t// Set the context key value for the group context\n\t\tscopedRegisteredContextKey.set(provider.getGroupContextKeyValue(group));\n\t}\n\n\t//#endregion\n\n\t//#region Main Editor Part Only\n\n\tget partOptions() { return this.mainPart.partOptions; }\n\tget onDidChangeEditorPartOptions() { return this.mainPart.onDidChangeEditorPartOptions; }\n\n\t//#endregion\n}\n\nregisterSingleton(IEditorGroupsService, EditorParts, InstantiationType.Eager);\n"],
  "mappings": "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",
  "names": ["part"]
}
