{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorPane.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindowById } from \"../../../../base/browser/dom.js\";\nimport type { IBoundarySashes } from \"../../../../base/browser/ui/sash/sash.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { indexOfPath } from \"../../../../base/common/extpath.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LRUCache, Touch } from \"../../../../base/common/map.js\";\nimport {\n\ttype IExtUri,\n\tisEqual,\n\tjoinPath,\n} from \"../../../../base/common/resources.js\";\nimport { isEmptyObject } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tITextResourceConfigurationChangeEvent,\n\tITextResourceConfigurationService,\n} from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport type { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { IEditorOptions } from \"../../../../platform/editor/common/editor.js\";\nimport {\n\ttype IStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\ttype GroupIdentifier,\n\ttype IEditorMemento,\n\ttype IEditorOpenContext,\n\ttype IEditorPane,\n\tisEditorInput,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport type { MementoObject } from \"../../../common/memento.js\";\nimport type {\n\tIEditorGroup,\n\tIEditorGroupsService,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport { Composite } from \"../../composite.js\";\nimport {\n\tDEFAULT_EDITOR_MAX_DIMENSIONS,\n\tDEFAULT_EDITOR_MIN_DIMENSIONS,\n} from \"./editor.js\";\n\n/**\n * The base class of editors in the workbench. Editors register themselves for specific editor inputs.\n * Editors are layed out in the editor part of the workbench in editor groups. Multiple editors can be\n * open at the same time. Each editor has a minimized representation that is good enough to provide some\n * information about the state of the editor data.\n *\n * The workbench will keep an editor alive after it has been created and show/hide it based on\n * user interaction. The lifecycle of a editor goes in the order:\n *\n * - `createEditor()`\n * - `setEditorVisible()`\n * - `layout()`\n * - `setInput()`\n * - `focus()`\n * - `dispose()`: when the editor group the editor is in closes\n *\n * During use of the workbench, a editor will often receive a `clearInput()`, `setEditorVisible()`, `layout()` and\n * `focus()` calls, but only one `create()` and `dispose()` call.\n *\n * This class is only intended to be subclassed and not instantiated.\n */\nexport abstract class EditorPane extends Composite implements IEditorPane {\n\t//#region Events\n\n\treadonly onDidChangeSizeConstraints = Event.None;\n\n\tprotected readonly _onDidChangeControl = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeControl = this._onDidChangeControl.event;\n\n\t//#endregion\n\n\tprivate static readonly EDITOR_MEMENTOS = new Map<\n\t\tstring,\n\t\tEditorMemento<any>\n\t>();\n\n\tget minimumWidth() {\n\t\treturn DEFAULT_EDITOR_MIN_DIMENSIONS.width;\n\t}\n\tget maximumWidth() {\n\t\treturn DEFAULT_EDITOR_MAX_DIMENSIONS.width;\n\t}\n\tget minimumHeight() {\n\t\treturn DEFAULT_EDITOR_MIN_DIMENSIONS.height;\n\t}\n\tget maximumHeight() {\n\t\treturn DEFAULT_EDITOR_MAX_DIMENSIONS.height;\n\t}\n\n\tprotected _input: EditorInput | undefined;\n\tget input(): EditorInput | undefined {\n\t\treturn this._input;\n\t}\n\n\tprotected _options: IEditorOptions | undefined;\n\tget options(): IEditorOptions | undefined {\n\t\treturn this._options;\n\t}\n\n\tget window() {\n\t\treturn getWindowById(this.group.windowId, true).window;\n\t}\n\n\t/**\n\t * Should be overridden by editors that have their own ScopedContextKeyService\n\t */\n\tget scopedContextKeyService(): IContextKeyService | undefined {\n\t\treturn undefined;\n\t}\n\n\tconstructor(\n\t\tid: string,\n\t\treadonly group: IEditorGroup,\n\t\ttelemetryService: ITelemetryService,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService,\n\t) {\n\t\tsuper(id, telemetryService, themeService, storageService);\n\t}\n\n\toverride create(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\n\t\t// Create Editor\n\t\tthis.createEditor(parent);\n\t}\n\n\t/**\n\t * Called to create the editor in the parent HTMLElement. Subclasses implement\n\t * this method to construct the editor widget.\n\t */\n\tprotected abstract createEditor(parent: HTMLElement): void;\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Sets the given input with the options to the editor. The input is guaranteed\n\t * to be different from the previous input that was set using the `input.matches()`\n\t * method.\n\t *\n\t * The provided context gives more information around how the editor was opened.\n\t *\n\t * The provided cancellation token should be used to test if the operation\n\t * was cancelled.\n\t */\n\tasync setInput(\n\t\tinput: EditorInput,\n\t\toptions: IEditorOptions | undefined,\n\t\tcontext: IEditorOpenContext,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tthis._input = input;\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * Called to indicate to the editor that the input should be cleared and\n\t * resources associated with the input should be freed.\n\t *\n\t * This method can be called based on different contexts, e.g. when opening\n\t * a different input or different editor control or when closing all editors\n\t * in a group.\n\t *\n\t * To monitor the lifecycle of editor inputs, you should not rely on this\n\t * method, rather refer to the listeners on `IEditorGroup` via `IEditorGroupsService`.\n\t */\n\tclearInput(): void {\n\t\tthis._input = undefined;\n\t\tthis._options = undefined;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Sets the given options to the editor. Clients should apply the options\n\t * to the current input.\n\t */\n\tsetOptions(options: IEditorOptions | undefined): void {\n\t\tthis._options = options;\n\t}\n\n\toverride setVisible(visible: boolean): void {\n\t\tsuper.setVisible(visible);\n\n\t\t// Propagate to Editor\n\t\tthis.setEditorVisible(visible);\n\t}\n\n\t/**\n\t * Indicates that the editor control got visible or hidden.\n\t *\n\t * @param visible the state of visibility of this editor\n\t */\n\tprotected setEditorVisible(visible: boolean): void {\n\t\t// Subclasses can implement\n\t}\n\n\tsetBoundarySashes(_sashes: IBoundarySashes) {\n\t\t// Subclasses can implement\n\t}\n\n\tprotected getEditorMemento<T>(\n\t\teditorGroupService: IEditorGroupsService,\n\t\tconfigurationService: ITextResourceConfigurationService,\n\t\tkey: string,\n\t\tlimit = 10,\n\t): IEditorMemento<T> {\n\t\tconst mementoKey = `${this.getId()}${key}`;\n\n\t\tlet editorMemento = EditorPane.EDITOR_MEMENTOS.get(mementoKey);\n\t\tif (!editorMemento) {\n\t\t\teditorMemento = this._register(\n\t\t\t\tnew EditorMemento(\n\t\t\t\t\tthis.getId(),\n\t\t\t\t\tkey,\n\t\t\t\t\tthis.getMemento(\n\t\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t\t),\n\t\t\t\t\tlimit,\n\t\t\t\t\teditorGroupService,\n\t\t\t\t\tconfigurationService,\n\t\t\t\t),\n\t\t\t);\n\t\t\tEditorPane.EDITOR_MEMENTOS.set(mementoKey, editorMemento);\n\t\t}\n\n\t\treturn editorMemento;\n\t}\n\n\tgetViewState(): object | undefined {\n\t\t// Subclasses to override\n\t\treturn undefined;\n\t}\n\n\tprotected override saveState(): void {\n\t\t// Save all editor memento for this editor type\n\t\tfor (const [, editorMemento] of EditorPane.EDITOR_MEMENTOS) {\n\t\t\tif (editorMemento.id === this.getId()) {\n\t\t\t\teditorMemento.saveState();\n\t\t\t}\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\toverride dispose(): void {\n\t\tthis._input = undefined;\n\t\tthis._options = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n\ninterface MapGroupToMemento<T> {\n\t[group: GroupIdentifier]: T;\n}\n\nexport class EditorMemento<T> extends Disposable implements IEditorMemento<T> {\n\tprivate static readonly SHARED_EDITOR_STATE = -1; // pick a number < 0 to be outside group id range\n\n\tprivate cache: LRUCache<string, MapGroupToMemento<T>> | undefined;\n\tprivate cleanedUp = false;\n\tprivate editorDisposables: Map<EditorInput, IDisposable> | undefined;\n\tprivate shareEditorState = false;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\tprivate readonly key: string,\n\t\tprivate readonly memento: MementoObject,\n\t\tprivate readonly limit: number,\n\t\tprivate readonly editorGroupService: IEditorGroupsService,\n\t\tprivate readonly configurationService: ITextResourceConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.updateConfiguration(undefined);\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) =>\n\t\t\t\tthis.updateConfiguration(e),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate updateConfiguration(\n\t\te: ITextResourceConfigurationChangeEvent | undefined,\n\t): void {\n\t\tif (\n\t\t\t!e ||\n\t\t\te.affectsConfiguration(\n\t\t\t\tundefined,\n\t\t\t\t\"workbench.editor.sharedViewState\",\n\t\t\t)\n\t\t) {\n\t\t\tthis.shareEditorState =\n\t\t\t\tthis.configurationService.getValue(\n\t\t\t\t\tundefined,\n\t\t\t\t\t\"workbench.editor.sharedViewState\",\n\t\t\t\t) === true;\n\t\t}\n\t}\n\n\tsaveEditorState(group: IEditorGroup, resource: URI, state: T): void;\n\tsaveEditorState(group: IEditorGroup, editor: EditorInput, state: T): void;\n\tsaveEditorState(\n\t\tgroup: IEditorGroup,\n\t\tresourceOrEditor: URI | EditorInput,\n\t\tstate: T,\n\t): void {\n\t\tconst resource = this.doGetResource(resourceOrEditor);\n\t\tif (!resource || !group) {\n\t\t\treturn; // we are not in a good state to save any state for a resource\n\t\t}\n\n\t\tconst cache = this.doLoad();\n\n\t\t// Ensure mementos for resource map\n\t\tlet mementosForResource = cache.get(resource.toString());\n\t\tif (!mementosForResource) {\n\t\t\tmementosForResource = Object.create(null) as MapGroupToMemento<T>;\n\t\t\tcache.set(resource.toString(), mementosForResource);\n\t\t}\n\n\t\t// Store state for group\n\t\tmementosForResource[group.id] = state;\n\n\t\t// Store state as most recent one based on settings\n\t\tif (this.shareEditorState) {\n\t\t\tmementosForResource[EditorMemento.SHARED_EDITOR_STATE] = state;\n\t\t}\n\n\t\t// Automatically clear when editor input gets disposed if any\n\t\tif (isEditorInput(resourceOrEditor)) {\n\t\t\tthis.clearEditorStateOnDispose(resource, resourceOrEditor);\n\t\t}\n\t}\n\n\tloadEditorState(group: IEditorGroup, resource: URI): T | undefined;\n\tloadEditorState(group: IEditorGroup, editor: EditorInput): T | undefined;\n\tloadEditorState(\n\t\tgroup: IEditorGroup,\n\t\tresourceOrEditor: URI | EditorInput,\n\t): T | undefined {\n\t\tconst resource = this.doGetResource(resourceOrEditor);\n\t\tif (!resource || !group) {\n\t\t\treturn; // we are not in a good state to load any state for a resource\n\t\t}\n\n\t\tconst cache = this.doLoad();\n\n\t\tconst mementosForResource = cache.get(resource.toString());\n\t\tif (mementosForResource) {\n\t\t\tconst mementoForResourceAndGroup = mementosForResource[group.id];\n\n\t\t\t// Return state for group if present\n\t\t\tif (mementoForResourceAndGroup) {\n\t\t\t\treturn mementoForResourceAndGroup;\n\t\t\t}\n\n\t\t\t// Return most recent state based on settings otherwise\n\t\t\tif (this.shareEditorState) {\n\t\t\t\treturn mementosForResource[EditorMemento.SHARED_EDITOR_STATE];\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tclearEditorState(resource: URI, group?: IEditorGroup): void;\n\tclearEditorState(editor: EditorInput, group?: IEditorGroup): void;\n\tclearEditorState(\n\t\tresourceOrEditor: URI | EditorInput,\n\t\tgroup?: IEditorGroup,\n\t): void {\n\t\tif (isEditorInput(resourceOrEditor)) {\n\t\t\tthis.editorDisposables?.delete(resourceOrEditor);\n\t\t}\n\n\t\tconst resource = this.doGetResource(resourceOrEditor);\n\t\tif (resource) {\n\t\t\tconst cache = this.doLoad();\n\n\t\t\t// Clear state for group\n\t\t\tif (group) {\n\t\t\t\tconst mementosForResource = cache.get(resource.toString());\n\t\t\t\tif (mementosForResource) {\n\t\t\t\t\tdelete mementosForResource[group.id];\n\n\t\t\t\t\tif (isEmptyObject(mementosForResource)) {\n\t\t\t\t\t\tcache.delete(resource.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clear state across all groups for resource\n\t\t\telse {\n\t\t\t\tcache.delete(resource.toString());\n\t\t\t}\n\t\t}\n\t}\n\n\tclearEditorStateOnDispose(resource: URI, editor: EditorInput): void {\n\t\tif (!this.editorDisposables) {\n\t\t\tthis.editorDisposables = new Map<EditorInput, IDisposable>();\n\t\t}\n\n\t\tif (!this.editorDisposables.has(editor)) {\n\t\t\tthis.editorDisposables.set(\n\t\t\t\teditor,\n\t\t\t\tEvent.once(editor.onWillDispose)(() => {\n\t\t\t\t\tthis.clearEditorState(resource);\n\t\t\t\t\tthis.editorDisposables?.delete(editor);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tmoveEditorState(source: URI, target: URI, comparer: IExtUri): void {\n\t\tconst cache = this.doLoad();\n\n\t\t// We need a copy of the keys to not iterate over\n\t\t// newly inserted elements.\n\t\tconst cacheKeys = [...cache.keys()];\n\t\tfor (const cacheKey of cacheKeys) {\n\t\t\tconst resource = URI.parse(cacheKey);\n\n\t\t\tif (!comparer.isEqualOrParent(resource, source)) {\n\t\t\t\tcontinue; // not matching our resource\n\t\t\t}\n\n\t\t\t// Determine new resulting target resource\n\t\t\tlet targetResource: URI;\n\t\t\tif (isEqual(source, resource)) {\n\t\t\t\ttargetResource = target; // file got moved\n\t\t\t} else {\n\t\t\t\tconst index = indexOfPath(resource.path, source.path);\n\t\t\t\ttargetResource = joinPath(\n\t\t\t\t\ttarget,\n\t\t\t\t\tresource.path.substr(index + source.path.length + 1),\n\t\t\t\t); // parent folder got moved\n\t\t\t}\n\n\t\t\t// Don't modify LRU state\n\t\t\tconst value = cache.get(cacheKey, Touch.None);\n\t\t\tif (value) {\n\t\t\t\tcache.delete(cacheKey);\n\t\t\t\tcache.set(targetResource.toString(), value);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doGetResource(\n\t\tresourceOrEditor: URI | EditorInput,\n\t): URI | undefined {\n\t\tif (isEditorInput(resourceOrEditor)) {\n\t\t\treturn resourceOrEditor.resource;\n\t\t}\n\n\t\treturn resourceOrEditor;\n\t}\n\n\tprivate doLoad(): LRUCache<string, MapGroupToMemento<T>> {\n\t\tif (!this.cache) {\n\t\t\tthis.cache = new LRUCache<string, MapGroupToMemento<T>>(this.limit);\n\n\t\t\t// Restore from serialized map state\n\t\t\tconst rawEditorMemento = this.memento[this.key];\n\t\t\tif (Array.isArray(rawEditorMemento)) {\n\t\t\t\tthis.cache.fromJSON(rawEditorMemento);\n\t\t\t}\n\t\t}\n\n\t\treturn this.cache;\n\t}\n\n\tsaveState(): void {\n\t\tconst cache = this.doLoad();\n\n\t\t// Cleanup once during session\n\t\tif (!this.cleanedUp) {\n\t\t\tthis.cleanUp();\n\t\t\tthis.cleanedUp = true;\n\t\t}\n\n\t\tthis.memento[this.key] = cache.toJSON();\n\t}\n\n\tprivate cleanUp(): void {\n\t\tconst cache = this.doLoad();\n\n\t\t// Remove groups from states that no longer exist. Since we modify the\n\t\t// cache and its is a LRU cache make a copy to ensure iteration succeeds\n\t\tconst entries = [...cache.entries()];\n\t\tfor (const [resource, mapGroupToMementos] of entries) {\n\t\t\tfor (const group of Object.keys(mapGroupToMementos)) {\n\t\t\t\tconst groupId: GroupIdentifier = Number(group);\n\t\t\t\tif (\n\t\t\t\t\tgroupId === EditorMemento.SHARED_EDITOR_STATE &&\n\t\t\t\t\tthis.shareEditorState\n\t\t\t\t) {\n\t\t\t\t\tcontinue; // skip over shared entries if sharing is enabled\n\t\t\t\t}\n\n\t\t\t\tif (!this.editorGroupService.getGroup(groupId)) {\n\t\t\t\t\tdelete mapGroupToMementos[groupId];\n\t\t\t\t\tif (isEmptyObject(mapGroupToMementos)) {\n\t\t\t\t\t\tcache.delete(resource);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
