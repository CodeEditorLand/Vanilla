var h=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=(o,n,e,i)=>{for(var t=i>1?void 0:i?f(n,e):n,r=o.length-1,a;r>=0;r--)(a=o[r])&&(t=(i?a(n,e,t):a(t))||t);return i&&t&&h(n,e,t),t},l=(o,n)=>(e,i)=>n(e,i,o);import{localize as s}from"../../../../nls.js";import{Emitter as m}from"../../../../base/common/event.js";import{BinaryEditorModel as I}from"../../../common/editor/binaryEditorModel.js";import{IStorageService as g}from"../../../../platform/storage/common/storage.js";import{ByteSize as u}from"../../../../platform/files/common/files.js";import{EditorPlaceholder as v}from"./editorPlaceholder.js";let d=class extends v{constructor(e,i,t,r,a,c){super(e,i,r,a,c);this.callbacks=t}_onDidChangeMetadata=this._register(new m);onDidChangeMetadata=this._onDidChangeMetadata.event;_onDidOpenInPlace=this._register(new m);onDidOpenInPlace=this._onDidOpenInPlace.event;metadata;getTitle(){return this.input?this.input.getName():s("binaryEditor","Binary Viewer")}async getContents(e,i){const t=await e.resolve();if(!(t instanceof I))throw new Error("Unable to open file as binary");const r=t.getSize();return this.handleMetadataChanged(typeof r=="number"?u.formatSize(r):""),{icon:"$(warning)",label:s("binaryError","The file is not displayed in the text editor because it is either binary or uses an unsupported text encoding."),actions:[{label:s("openAnyway","Open Anyway"),run:async()=>{await this.callbacks.openInternal(e,i),this._onDidOpenInPlace.fire()}}]}}handleMetadataChanged(e){this.metadata=e,this._onDidChangeMetadata.fire()}getMetadata(){return this.metadata}};d=p([l(5,g)],d);export{d as BaseBinaryResourceEditor};
