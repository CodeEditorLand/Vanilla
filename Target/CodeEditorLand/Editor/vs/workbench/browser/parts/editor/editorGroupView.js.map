{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorGroupView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/editorgroupview.css\";\nimport {\n\tDimension,\n\tEventHelper,\n\tEventType,\n\ttype IDomNodePagePosition,\n\taddDisposableListener,\n\tfindParentWithClass,\n\tgetActiveElement,\n\tgetWindow,\n\tisActiveElement,\n\tisAncestor,\n\tisMouseEvent,\n\ttrackFocus,\n} from \"../../../../base/browser/dom.js\";\nimport { StandardMouseEvent } from \"../../../../base/browser/mouseEvent.js\";\nimport {\n\ttype GestureEvent,\n\tEventType as TouchEventType,\n} from \"../../../../base/browser/touch.js\";\nimport { ActionBar } from \"../../../../base/browser/ui/actionbar/actionbar.js\";\nimport { ProgressBar } from \"../../../../base/browser/ui/progressbar/progressbar.js\";\nimport type { IBoundarySashes } from \"../../../../base/browser/ui/sash/sash.js\";\nimport type {\n\tIAction,\n\tSubmenuAction,\n} from \"../../../../base/common/actions.js\";\nimport { coalesce } from \"../../../../base/common/arrays.js\";\nimport {\n\tDeferredPromise,\n\tPromises,\n\tRunOnceWorker,\n} from \"../../../../base/common/async.js\";\nimport { Emitter, Relay } from \"../../../../base/common/event.js\";\nimport { hash } from \"../../../../base/common/hash.js\";\nimport {\n\ttype DisposableStore,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport {\n\tisLinux,\n\tisMacintosh,\n\tisNative,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport { extname, isEqual } from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { getMimeTypes } from \"../../../../editor/common/services/languagesAssociations.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { createAndFillInActionBarActions } from \"../../../../platform/actions/browser/menuEntryActionViewItem.js\";\nimport {\n\tIMenuService,\n\tMenuId,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport {\n\tConfirmResult,\n\tIDialogService,\n\tIFileDialogService,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tEditorActivation,\n\ttype IEditorOptions,\n} from \"../../../../platform/editor/common/editor.js\";\nimport {\n\tFileSystemProviderCapabilities,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ServiceCollection } from \"../../../../platform/instantiation/common/serviceCollection.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IEditorProgressService } from \"../../../../platform/progress/common/progress.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { TelemetryTrustedValue } from \"../../../../platform/telemetry/common/telemetryUtils.js\";\nimport { defaultProgressBarStyles } from \"../../../../platform/theme/browser/defaultStyles.js\";\nimport {\n\tcontrastBorder,\n\teditorBackground,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport {\n\tIThemeService,\n\tThemable,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tActiveCompareEditorCanSwapContext,\n\tActiveEditorAvailableEditorIdsContext,\n\tActiveEditorCanRevertContext,\n\tActiveEditorCanSplitInGroupContext,\n\tActiveEditorCanToggleReadonlyContext,\n\tActiveEditorContext,\n\tActiveEditorDirtyContext,\n\tActiveEditorFirstInGroupContext,\n\tActiveEditorGroupLockedContext,\n\tActiveEditorLastInGroupContext,\n\tActiveEditorPinnedContext,\n\tActiveEditorReadonlyContext,\n\tActiveEditorStickyContext,\n\tEditorGroupEditorsCountContext,\n\tMultipleEditorsSelectedInGroupContext,\n\tResourceContextKey,\n\tSelectedEditorsInGroupFileOrUntitledResourceContextKey,\n\tSideBySideEditorActiveContext,\n\tTextCompareEditorActiveContext,\n\tTextCompareEditorVisibleContext,\n\tTwoEditorsSelectedInGroupContext,\n\tapplyAvailableEditorIds,\n} from \"../../../common/contextkeys.js\";\nimport {\n\tCloseDirection,\n\tDEFAULT_EDITOR_ASSOCIATION,\n\tEditorCloseContext,\n\tEditorInputCapabilities,\n\tEditorResourceAccessor,\n\tEditorsOrder,\n\ttype GroupIdentifier,\n\tGroupModelChangeKind,\n\ttype IActiveEditorChangeEvent,\n\ttype IEditorCloseEvent,\n\ttype IEditorPane,\n\ttype IEditorPartOptionsChangeEvent,\n\ttype IEditorWillMoveEvent,\n\ttype IEditorWillOpenEvent,\n\ttype IFindEditorOptions,\n\ttype IMatchEditorOptions,\n\ttype IToolbarActions,\n\ttype IUntypedEditorInput,\n\ttype IVisibleEditorPane,\n\tSaveReason,\n\tSideBySideEditor,\n\tTEXT_DIFF_EDITOR_ID,\n} from \"../../../common/editor.js\";\nimport { DiffEditorInput } from \"../../../common/editor/diffEditorInput.js\";\nimport {\n\tEditorGroupModel,\n\ttype IEditorOpenOptions,\n\ttype IGroupModelChangeEvent,\n\ttype ISerializedEditorGroupModel,\n\tisGroupEditorCloseEvent,\n\tisGroupEditorOpenEvent,\n\tisSerializedEditorGroupModel,\n} from \"../../../common/editor/editorGroupModel.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { SideBySideEditorInput } from \"../../../common/editor/sideBySideEditorInput.js\";\nimport {\n\tEDITOR_GROUP_EMPTY_BACKGROUND,\n\tEDITOR_GROUP_HEADER_BORDER,\n\tEDITOR_GROUP_HEADER_NO_TABS_BACKGROUND,\n\tEDITOR_GROUP_HEADER_TABS_BACKGROUND,\n} from \"../../../common/theme.js\";\nimport {\n\tGroupsOrder,\n\ttype IActiveEditorActions,\n\ttype ICloseAllEditorsOptions,\n\ttype ICloseEditorOptions,\n\ttype ICloseEditorsFilter,\n\ttype IEditorReplacement,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorResolverService } from \"../../../services/editor/common/editorResolverService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport {\n\tAutoSaveMode,\n\tIFilesConfigurationService,\n} from \"../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { EditorProgressIndicator } from \"../../../services/progress/browser/progressIndicator.js\";\nimport {\n\ttype EditorServiceImpl,\n\ttype IEditorGroupTitleHeight,\n\ttype IEditorGroupView,\n\ttype IEditorGroupViewOptions,\n\ttype IEditorGroupsView,\n\ttype IEditorPartsView,\n\ttype IInternalEditorCloseOptions,\n\ttype IInternalEditorOpenOptions,\n\ttype IInternalEditorTitleControlOptions,\n\ttype IInternalMoveCopyOptions,\n\tfillActiveEditorViewState,\n} from \"./editor.js\";\nimport { EditorGroupWatermark } from \"./editorGroupWatermark.js\";\nimport { EditorPane } from \"./editorPane.js\";\nimport { EditorPanes } from \"./editorPanes.js\";\nimport { EditorTitleControl } from \"./editorTitleControl.js\";\n\nexport class EditorGroupView extends Themable implements IEditorGroupView {\n\t//#region factory\n\n\tstatic createNew(\n\t\teditorPartsView: IEditorPartsView,\n\t\tgroupsView: IEditorGroupsView,\n\t\tgroupsLabel: string,\n\t\tgroupIndex: number,\n\t\tinstantiationService: IInstantiationService,\n\t\toptions?: IEditorGroupViewOptions,\n\t): IEditorGroupView {\n\t\treturn instantiationService.createInstance(\n\t\t\tEditorGroupView,\n\t\t\tnull,\n\t\t\teditorPartsView,\n\t\t\tgroupsView,\n\t\t\tgroupsLabel,\n\t\t\tgroupIndex,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tstatic createFromSerialized(\n\t\tserialized: ISerializedEditorGroupModel,\n\t\teditorPartsView: IEditorPartsView,\n\t\tgroupsView: IEditorGroupsView,\n\t\tgroupsLabel: string,\n\t\tgroupIndex: number,\n\t\tinstantiationService: IInstantiationService,\n\t\toptions?: IEditorGroupViewOptions,\n\t): IEditorGroupView {\n\t\treturn instantiationService.createInstance(\n\t\t\tEditorGroupView,\n\t\t\tserialized,\n\t\t\teditorPartsView,\n\t\t\tgroupsView,\n\t\t\tgroupsLabel,\n\t\t\tgroupIndex,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tstatic createCopy(\n\t\tcopyFrom: IEditorGroupView,\n\t\teditorPartsView: IEditorPartsView,\n\t\tgroupsView: IEditorGroupsView,\n\t\tgroupsLabel: string,\n\t\tgroupIndex: number,\n\t\tinstantiationService: IInstantiationService,\n\t\toptions?: IEditorGroupViewOptions,\n\t): IEditorGroupView {\n\t\treturn instantiationService.createInstance(\n\t\t\tEditorGroupView,\n\t\t\tcopyFrom,\n\t\t\teditorPartsView,\n\t\t\tgroupsView,\n\t\t\tgroupsLabel,\n\t\t\tgroupIndex,\n\t\t\toptions,\n\t\t);\n\t}\n\n\t//#endregion\n\n\t/**\n\t * Access to the context key service scoped to this editor group.\n\t */\n\treadonly scopedContextKeyService: IContextKeyService;\n\n\t//#region events\n\n\tprivate readonly _onDidFocus = this._register(new Emitter<void>());\n\treadonly onDidFocus = this._onDidFocus.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate readonly _onDidModelChange = this._register(\n\t\tnew Emitter<IGroupModelChangeEvent>(),\n\t);\n\treadonly onDidModelChange = this._onDidModelChange.event;\n\n\tprivate readonly _onDidActiveEditorChange = this._register(\n\t\tnew Emitter<IActiveEditorChangeEvent>(),\n\t);\n\treadonly onDidActiveEditorChange = this._onDidActiveEditorChange.event;\n\n\tprivate readonly _onDidOpenEditorFail = this._register(\n\t\tnew Emitter<EditorInput>(),\n\t);\n\treadonly onDidOpenEditorFail = this._onDidOpenEditorFail.event;\n\n\tprivate readonly _onWillCloseEditor = this._register(\n\t\tnew Emitter<IEditorCloseEvent>(),\n\t);\n\treadonly onWillCloseEditor = this._onWillCloseEditor.event;\n\n\tprivate readonly _onDidCloseEditor = this._register(\n\t\tnew Emitter<IEditorCloseEvent>(),\n\t);\n\treadonly onDidCloseEditor = this._onDidCloseEditor.event;\n\n\tprivate readonly _onWillMoveEditor = this._register(\n\t\tnew Emitter<IEditorWillMoveEvent>(),\n\t);\n\treadonly onWillMoveEditor = this._onWillMoveEditor.event;\n\n\tprivate readonly _onWillOpenEditor = this._register(\n\t\tnew Emitter<IEditorWillOpenEvent>(),\n\t);\n\treadonly onWillOpenEditor = this._onWillOpenEditor.event;\n\n\t//#endregion\n\n\tprivate readonly model: EditorGroupModel;\n\n\tprivate active: boolean | undefined;\n\tprivate lastLayout: IDomNodePagePosition | undefined;\n\n\tprivate readonly scopedInstantiationService: IInstantiationService;\n\n\tprivate readonly resourceContext: ResourceContextKey;\n\n\tprivate readonly titleContainer: HTMLElement;\n\tprivate readonly titleControl: EditorTitleControl;\n\n\tprivate readonly progressBar: ProgressBar;\n\n\tprivate readonly editorContainer: HTMLElement;\n\tprivate readonly editorPane: EditorPanes;\n\n\tprivate readonly disposedEditorsWorker = this._register(\n\t\tnew RunOnceWorker<EditorInput>(\n\t\t\t(editors) => this.handleDisposedEditors(editors),\n\t\t\t0,\n\t\t),\n\t);\n\n\tprivate readonly mapEditorToPendingConfirmation = new Map<\n\t\tEditorInput,\n\t\tPromise<boolean>\n\t>();\n\n\tprivate readonly containerToolBarMenuDisposable = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tprivate readonly whenRestoredPromise = new DeferredPromise<void>();\n\treadonly whenRestored = this.whenRestoredPromise.p;\n\n\tconstructor(\n\t\tfrom: IEditorGroupView | ISerializedEditorGroupModel | null,\n\t\tprivate readonly editorPartsView: IEditorPartsView,\n\t\treadonly groupsView: IEditorGroupsView,\n\t\tprivate groupsLabel: string,\n\t\tprivate _index: number,\n\t\toptions: IEditorGroupViewOptions | undefined,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IEditorService private readonly editorService: EditorServiceImpl,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEditorResolverService private readonly editorResolverService: IEditorResolverService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper(themeService);\n\n\t\tif (from instanceof EditorGroupView) {\n\t\t\tthis.model = this._register(from.model.clone());\n\t\t} else if (isSerializedEditorGroupModel(from)) {\n\t\t\tthis.model = this._register(instantiationService.createInstance(EditorGroupModel, from));\n\t\t} else {\n\t\t\tthis.model = this._register(instantiationService.createInstance(EditorGroupModel, undefined));\n\t\t}\n\n\t\t//#region create()\n\t\t{\n\t\t\t// Scoped context key service\n\t\t\tthis.scopedContextKeyService = this._register(this.contextKeyService.createScoped(this.element));\n\n\t\t\t// Container\n\t\t\tthis.element.classList.add(...coalesce(['editor-group-container', this.model.isLocked ? 'locked' : undefined]));\n\n\t\t\t// Container listeners\n\t\t\tthis.registerContainerListeners();\n\n\t\t\t// Container toolbar\n\t\t\tthis.createContainerToolbar();\n\n\t\t\t// Container context menu\n\t\t\tthis.createContainerContextMenu();\n\n\t\t\t// Watermark & shortcuts\n\t\t\tthis._register(this.instantiationService.createInstance(EditorGroupWatermark, this.element));\n\n\t\t\t// Progress bar\n\t\t\tthis.progressBar = this._register(new ProgressBar(this.element, defaultProgressBarStyles));\n\t\t\tthis.progressBar.hide();\n\n\t\t\t// Scoped instantiation service\n\t\t\tthis.scopedInstantiationService = this._register(this.instantiationService.createChild(new ServiceCollection(\n\t\t\t\t[IContextKeyService, this.scopedContextKeyService],\n\t\t\t\t[IEditorProgressService, this._register(new EditorProgressIndicator(this.progressBar, this))]\n\t\t\t)));\n\n\t\t\t// Context keys\n\t\t\tthis.resourceContext = this._register(this.scopedInstantiationService.createInstance(ResourceContextKey));\n\t\t\tthis.handleGroupContextKeys();\n\n\t\t\t// Title container\n\t\t\tthis.titleContainer = document.createElement('div');\n\t\t\tthis.titleContainer.classList.add('title');\n\t\t\tthis.element.appendChild(this.titleContainer);\n\n\t\t\t// Title control\n\t\t\tthis.titleControl = this._register(this.scopedInstantiationService.createInstance(EditorTitleControl, this.titleContainer, this.editorPartsView, this.groupsView, this, this.model));\n\n\t\t\t// Editor container\n\t\t\tthis.editorContainer = document.createElement('div');\n\t\t\tthis.editorContainer.classList.add('editor-container');\n\t\t\tthis.element.appendChild(this.editorContainer);\n\n\t\t\t// Editor pane\n\t\t\tthis.editorPane = this._register(this.scopedInstantiationService.createInstance(EditorPanes, this.element, this.editorContainer, this));\n\t\t\tthis._onDidChange.input = this.editorPane.onDidChangeSizeConstraints;\n\n\t\t\t// Track Focus\n\t\t\tthis.doTrackFocus();\n\n\t\t\t// Update containers\n\t\t\tthis.updateTitleContainer();\n\t\t\tthis.updateContainer();\n\n\t\t\t// Update styles\n\t\t\tthis.updateStyles();\n\t\t}\n\t\t//#endregion\n\n\t\t// Restore editors if provided\n\t\tconst restoreEditorsPromise = this.restoreEditors(from, options) ?? Promise.resolve();\n\n\t\t// Signal restored once editors have restored\n\t\trestoreEditorsPromise.finally(() => {\n\t\t\tthis.whenRestoredPromise.complete();\n\t\t});\n\n\t\t// Register Listeners\n\t\tthis.registerListeners();\n\t}\n\n\tprivate handleGroupContextKeys(): void {\n\t\tconst groupActiveEditorDirtyContext = this.editorPartsView.bind(\n\t\t\tActiveEditorDirtyContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveEditorPinnedContext = this.editorPartsView.bind(\n\t\t\tActiveEditorPinnedContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveEditorFirstContext = this.editorPartsView.bind(\n\t\t\tActiveEditorFirstInGroupContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveEditorLastContext = this.editorPartsView.bind(\n\t\t\tActiveEditorLastInGroupContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveEditorStickyContext = this.editorPartsView.bind(\n\t\t\tActiveEditorStickyContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupEditorsCountContext = this.editorPartsView.bind(\n\t\t\tEditorGroupEditorsCountContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupLockedContext = this.editorPartsView.bind(\n\t\t\tActiveEditorGroupLockedContext,\n\t\t\tthis,\n\t\t);\n\n\t\tconst multipleEditorsSelectedContext =\n\t\t\tMultipleEditorsSelectedInGroupContext.bindTo(\n\t\t\t\tthis.scopedContextKeyService,\n\t\t\t);\n\t\tconst twoEditorsSelectedContext =\n\t\t\tTwoEditorsSelectedInGroupContext.bindTo(\n\t\t\t\tthis.scopedContextKeyService,\n\t\t\t);\n\t\tconst selectedEditorsHaveFileOrUntitledResourceContext =\n\t\t\tSelectedEditorsInGroupFileOrUntitledResourceContextKey.bindTo(\n\t\t\t\tthis.scopedContextKeyService,\n\t\t\t);\n\n\t\tconst groupActiveEditorContext = this.editorPartsView.bind(\n\t\t\tActiveEditorContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveEditorIsReadonly = this.editorPartsView.bind(\n\t\t\tActiveEditorReadonlyContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveEditorCanRevert = this.editorPartsView.bind(\n\t\t\tActiveEditorCanRevertContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveEditorCanToggleReadonly = this.editorPartsView.bind(\n\t\t\tActiveEditorCanToggleReadonlyContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveCompareEditorCanSwap = this.editorPartsView.bind(\n\t\t\tActiveCompareEditorCanSwapContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupTextCompareEditorVisibleContext = this.editorPartsView.bind(\n\t\t\tTextCompareEditorVisibleContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupTextCompareEditorActiveContext = this.editorPartsView.bind(\n\t\t\tTextCompareEditorActiveContext,\n\t\t\tthis,\n\t\t);\n\n\t\tconst groupActiveEditorAvailableEditorIds = this.editorPartsView.bind(\n\t\t\tActiveEditorAvailableEditorIdsContext,\n\t\t\tthis,\n\t\t);\n\t\tconst groupActiveEditorCanSplitInGroupContext =\n\t\t\tthis.editorPartsView.bind(ActiveEditorCanSplitInGroupContext, this);\n\t\tconst groupActiveEditorIsSideBySideEditorContext =\n\t\t\tthis.editorPartsView.bind(SideBySideEditorActiveContext, this);\n\n\t\tconst activeEditorListener = this._register(new MutableDisposable());\n\n\t\tconst observeActiveEditor = () => {\n\t\t\tactiveEditorListener.clear();\n\n\t\t\tthis.scopedContextKeyService.bufferChangeEvents(() => {\n\t\t\t\tconst activeEditor = this.activeEditor;\n\t\t\t\tconst activeEditorPane = this.activeEditorPane;\n\n\t\t\t\tthis.resourceContext.set(\n\t\t\t\t\tEditorResourceAccessor.getOriginalUri(activeEditor, {\n\t\t\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tapplyAvailableEditorIds(\n\t\t\t\t\tgroupActiveEditorAvailableEditorIds,\n\t\t\t\t\tactiveEditor,\n\t\t\t\t\tthis.editorResolverService,\n\t\t\t\t);\n\n\t\t\t\tif (activeEditor) {\n\t\t\t\t\tgroupActiveEditorCanSplitInGroupContext.set(\n\t\t\t\t\t\tactiveEditor.hasCapability(\n\t\t\t\t\t\t\tEditorInputCapabilities.CanSplitInGroup,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tgroupActiveEditorIsSideBySideEditorContext.set(\n\t\t\t\t\t\tactiveEditor.typeId === SideBySideEditorInput.ID,\n\t\t\t\t\t);\n\n\t\t\t\t\tgroupActiveEditorDirtyContext.set(\n\t\t\t\t\t\tactiveEditor.isDirty() && !activeEditor.isSaving(),\n\t\t\t\t\t);\n\t\t\t\t\tactiveEditorListener.value = activeEditor.onDidChangeDirty(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tgroupActiveEditorDirtyContext.set(\n\t\t\t\t\t\t\t\tactiveEditor.isDirty() &&\n\t\t\t\t\t\t\t\t\t!activeEditor.isSaving(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tgroupActiveEditorCanSplitInGroupContext.set(false);\n\t\t\t\t\tgroupActiveEditorIsSideBySideEditorContext.set(false);\n\t\t\t\t\tgroupActiveEditorDirtyContext.set(false);\n\t\t\t\t}\n\n\t\t\t\tif (activeEditorPane) {\n\t\t\t\t\tgroupActiveEditorContext.set(activeEditorPane.getId());\n\t\t\t\t\tgroupActiveEditorCanRevert.set(\n\t\t\t\t\t\t!activeEditorPane.input.hasCapability(\n\t\t\t\t\t\t\tEditorInputCapabilities.Untitled,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tgroupActiveEditorIsReadonly.set(\n\t\t\t\t\t\t!!activeEditorPane.input.isReadonly(),\n\t\t\t\t\t);\n\n\t\t\t\t\tconst primaryEditorResource =\n\t\t\t\t\t\tEditorResourceAccessor.getOriginalUri(\n\t\t\t\t\t\t\tactiveEditorPane.input,\n\t\t\t\t\t\t\t{ supportSideBySide: SideBySideEditor.PRIMARY },\n\t\t\t\t\t\t);\n\t\t\t\t\tconst secondaryEditorResource =\n\t\t\t\t\t\tEditorResourceAccessor.getOriginalUri(\n\t\t\t\t\t\t\tactiveEditorPane.input,\n\t\t\t\t\t\t\t{ supportSideBySide: SideBySideEditor.SECONDARY },\n\t\t\t\t\t\t);\n\t\t\t\t\tgroupActiveCompareEditorCanSwap.set(\n\t\t\t\t\t\tactiveEditorPane.input instanceof DiffEditorInput &&\n\t\t\t\t\t\t\t!activeEditorPane.input.original.isReadonly() &&\n\t\t\t\t\t\t\t!!primaryEditorResource &&\n\t\t\t\t\t\t\t(this.fileService.hasProvider(\n\t\t\t\t\t\t\t\tprimaryEditorResource,\n\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\tprimaryEditorResource.scheme ===\n\t\t\t\t\t\t\t\t\tSchemas.untitled) &&\n\t\t\t\t\t\t\t!!secondaryEditorResource &&\n\t\t\t\t\t\t\t(this.fileService.hasProvider(\n\t\t\t\t\t\t\t\tsecondaryEditorResource,\n\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\tsecondaryEditorResource.scheme ===\n\t\t\t\t\t\t\t\t\tSchemas.untitled),\n\t\t\t\t\t);\n\t\t\t\t\tgroupActiveEditorCanToggleReadonly.set(\n\t\t\t\t\t\t!!primaryEditorResource &&\n\t\t\t\t\t\t\tthis.fileService.hasProvider(\n\t\t\t\t\t\t\t\tprimaryEditorResource,\n\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t!this.fileService.hasCapability(\n\t\t\t\t\t\t\t\tprimaryEditorResource,\n\t\t\t\t\t\t\t\tFileSystemProviderCapabilities.Readonly,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\tconst activePaneDiffEditor =\n\t\t\t\t\t\tactiveEditorPane?.getId() === TEXT_DIFF_EDITOR_ID;\n\t\t\t\t\tgroupTextCompareEditorActiveContext.set(\n\t\t\t\t\t\tactivePaneDiffEditor,\n\t\t\t\t\t);\n\t\t\t\t\tgroupTextCompareEditorVisibleContext.set(\n\t\t\t\t\t\tactivePaneDiffEditor,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tgroupActiveEditorContext.reset();\n\t\t\t\t\tgroupActiveEditorCanRevert.reset();\n\t\t\t\t\tgroupActiveEditorIsReadonly.reset();\n\t\t\t\t\tgroupActiveCompareEditorCanSwap.reset();\n\t\t\t\t\tgroupActiveEditorCanToggleReadonly.reset();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Update group contexts based on group changes\n\t\tconst updateGroupContextKeys = (e: IGroupModelChangeEvent) => {\n\t\t\tswitch (e.kind) {\n\t\t\t\tcase GroupModelChangeKind.GROUP_LOCKED:\n\t\t\t\t\tgroupLockedContext.set(this.isLocked);\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.EDITOR_ACTIVE:\n\t\t\t\t\tgroupActiveEditorFirstContext.set(\n\t\t\t\t\t\tthis.model.isFirst(this.model.activeEditor),\n\t\t\t\t\t);\n\t\t\t\t\tgroupActiveEditorLastContext.set(\n\t\t\t\t\t\tthis.model.isLast(this.model.activeEditor),\n\t\t\t\t\t);\n\t\t\t\t\tgroupActiveEditorPinnedContext.set(\n\t\t\t\t\t\tthis.model.activeEditor\n\t\t\t\t\t\t\t? this.model.isPinned(this.model.activeEditor)\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\t);\n\t\t\t\t\tgroupActiveEditorStickyContext.set(\n\t\t\t\t\t\tthis.model.activeEditor\n\t\t\t\t\t\t\t? this.model.isSticky(this.model.activeEditor)\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.EDITOR_CLOSE:\n\t\t\t\t\tgroupActiveEditorPinnedContext.set(\n\t\t\t\t\t\tthis.model.activeEditor\n\t\t\t\t\t\t\t? this.model.isPinned(this.model.activeEditor)\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\t);\n\t\t\t\t\tgroupActiveEditorStickyContext.set(\n\t\t\t\t\t\tthis.model.activeEditor\n\t\t\t\t\t\t\t? this.model.isSticky(this.model.activeEditor)\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\t);\n\t\t\t\tcase GroupModelChangeKind.EDITOR_OPEN:\n\t\t\t\tcase GroupModelChangeKind.EDITOR_MOVE:\n\t\t\t\t\tgroupActiveEditorFirstContext.set(\n\t\t\t\t\t\tthis.model.isFirst(this.model.activeEditor),\n\t\t\t\t\t);\n\t\t\t\t\tgroupActiveEditorLastContext.set(\n\t\t\t\t\t\tthis.model.isLast(this.model.activeEditor),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.EDITOR_PIN:\n\t\t\t\t\tif (e.editor && e.editor === this.model.activeEditor) {\n\t\t\t\t\t\tgroupActiveEditorPinnedContext.set(\n\t\t\t\t\t\t\tthis.model.isPinned(this.model.activeEditor),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.EDITOR_STICKY:\n\t\t\t\t\tif (e.editor && e.editor === this.model.activeEditor) {\n\t\t\t\t\t\tgroupActiveEditorStickyContext.set(\n\t\t\t\t\t\t\tthis.model.isSticky(this.model.activeEditor),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.EDITORS_SELECTION:\n\t\t\t\t\tmultipleEditorsSelectedContext.set(\n\t\t\t\t\t\tthis.model.selectedEditors.length > 1,\n\t\t\t\t\t);\n\t\t\t\t\ttwoEditorsSelectedContext.set(\n\t\t\t\t\t\tthis.model.selectedEditors.length === 2,\n\t\t\t\t\t);\n\t\t\t\t\tselectedEditorsHaveFileOrUntitledResourceContext.set(\n\t\t\t\t\t\tthis.model.selectedEditors.every(\n\t\t\t\t\t\t\t(e) =>\n\t\t\t\t\t\t\t\te.resource &&\n\t\t\t\t\t\t\t\t(this.fileService.hasProvider(e.resource) ||\n\t\t\t\t\t\t\t\t\te.resource.scheme === Schemas.untitled),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Group editors count context\n\t\t\tgroupEditorsCountContext.set(this.count);\n\t\t};\n\n\t\tthis._register(this.onDidModelChange((e) => updateGroupContextKeys(e)));\n\n\t\t// Track the active editor and update context key that reflects\n\t\t// the dirty state of this editor\n\t\tthis._register(\n\t\t\tthis.onDidActiveEditorChange(() => observeActiveEditor()),\n\t\t);\n\n\t\t// Update context keys on startup\n\t\tobserveActiveEditor();\n\t\tupdateGroupContextKeys({ kind: GroupModelChangeKind.EDITOR_ACTIVE });\n\t\tupdateGroupContextKeys({ kind: GroupModelChangeKind.GROUP_LOCKED });\n\t}\n\n\tprivate registerContainerListeners(): void {\n\t\t// Open new file via doubleclick on empty container\n\t\tthis._register(\n\t\t\taddDisposableListener(this.element, EventType.DBLCLICK, (e) => {\n\t\t\t\tif (this.isEmpty) {\n\t\t\t\t\tEventHelper.stop(e);\n\n\t\t\t\t\tthis.editorService.openEditor(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresource: undefined,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\t\t\toverride: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.id,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Close empty editor group via middle mouse click\n\t\tthis._register(\n\t\t\taddDisposableListener(this.element, EventType.AUXCLICK, (e) => {\n\t\t\t\tif (this.isEmpty && e.button === 1 /* Middle Button */) {\n\t\t\t\t\tEventHelper.stop(e, true);\n\n\t\t\t\t\tthis.groupsView.removeGroup(this);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate createContainerToolbar(): void {\n\t\t// Toolbar Container\n\t\tconst toolbarContainer = document.createElement(\"div\");\n\t\ttoolbarContainer.classList.add(\"editor-group-container-toolbar\");\n\t\tthis.element.appendChild(toolbarContainer);\n\n\t\t// Toolbar\n\t\tconst containerToolbar = this._register(\n\t\t\tnew ActionBar(toolbarContainer, {\n\t\t\t\tariaLabel: localize(\n\t\t\t\t\t\"ariaLabelGroupActions\",\n\t\t\t\t\t\"Empty editor group actions\",\n\t\t\t\t),\n\t\t\t\thighlightToggledItems: true,\n\t\t\t}),\n\t\t);\n\n\t\t// Toolbar actions\n\t\tconst containerToolbarMenu = this._register(\n\t\t\tthis.menuService.createMenu(\n\t\t\t\tMenuId.EmptyEditorGroup,\n\t\t\t\tthis.scopedContextKeyService,\n\t\t\t),\n\t\t);\n\t\tconst updateContainerToolbar = () => {\n\t\t\tconst actions: IToolbarActions = { primary: [], secondary: [] };\n\n\t\t\t// Clear old actions\n\t\t\tthis.containerToolBarMenuDisposable.value = toDisposable(() =>\n\t\t\t\tcontainerToolbar.clear(),\n\t\t\t);\n\n\t\t\t// Create new actions\n\t\t\tcreateAndFillInActionBarActions(\n\t\t\t\tcontainerToolbarMenu,\n\t\t\t\t{ arg: { groupId: this.id }, shouldForwardArgs: true },\n\t\t\t\tactions,\n\t\t\t\t\"navigation\",\n\t\t\t);\n\n\t\t\tfor (const action of [...actions.primary, ...actions.secondary]) {\n\t\t\t\tconst keybinding = this.keybindingService.lookupKeybinding(\n\t\t\t\t\taction.id,\n\t\t\t\t);\n\t\t\t\tcontainerToolbar.push(action, {\n\t\t\t\t\ticon: true,\n\t\t\t\t\tlabel: false,\n\t\t\t\t\tkeybinding: keybinding?.getLabel(),\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tupdateContainerToolbar();\n\t\tthis._register(\n\t\t\tcontainerToolbarMenu.onDidChange(updateContainerToolbar),\n\t\t);\n\t}\n\n\tprivate createContainerContextMenu(): void {\n\t\tthis._register(\n\t\t\taddDisposableListener(this.element, EventType.CONTEXT_MENU, (e) =>\n\t\t\t\tthis.onShowContainerContextMenu(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(\n\t\t\t\tthis.element,\n\t\t\t\tTouchEventType.Contextmenu,\n\t\t\t\t() => this.onShowContainerContextMenu(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onShowContainerContextMenu(e?: MouseEvent): void {\n\t\tif (!this.isEmpty) {\n\t\t\treturn; // only for empty editor groups\n\t\t}\n\n\t\t// Find target anchor\n\t\tlet anchor: HTMLElement | StandardMouseEvent = this.element;\n\t\tif (e) {\n\t\t\tanchor = new StandardMouseEvent(getWindow(this.element), e);\n\t\t}\n\n\t\t// Show it\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tmenuId: MenuId.EmptyEditorGroupContext,\n\t\t\tcontextKeyService: this.contextKeyService,\n\t\t\tgetAnchor: () => anchor,\n\t\t\tonHide: () => {\n\t\t\t\tthis.focus();\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate doTrackFocus(): void {\n\t\t// Container\n\t\tconst containerFocusTracker = this._register(trackFocus(this.element));\n\t\tthis._register(\n\t\t\tcontainerFocusTracker.onDidFocus(() => {\n\t\t\t\tif (this.isEmpty) {\n\t\t\t\t\tthis._onDidFocus.fire(); // only when empty to prevent duplicate events from `editorPane.onDidFocus`\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Title Container\n\t\tconst handleTitleClickOrTouch = (\n\t\t\te: MouseEvent | GestureEvent,\n\t\t): void => {\n\t\t\tlet target: HTMLElement;\n\t\t\tif (isMouseEvent(e)) {\n\t\t\t\tif (\n\t\t\t\t\te.button !== 0 /* middle/right mouse button */ ||\n\t\t\t\t\t(isMacintosh && e.ctrlKey) /* macOS context menu */\n\t\t\t\t) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\ttarget = e.target as HTMLElement;\n\t\t\t} else {\n\t\t\t\ttarget = (e as GestureEvent).initialTarget as HTMLElement;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tfindParentWithClass(\n\t\t\t\t\ttarget,\n\t\t\t\t\t\"monaco-action-bar\",\n\t\t\t\t\tthis.titleContainer,\n\t\t\t\t) ||\n\t\t\t\tfindParentWithClass(\n\t\t\t\t\ttarget,\n\t\t\t\t\t\"monaco-breadcrumb-item\",\n\t\t\t\t\tthis.titleContainer,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn; // not when clicking on actions or breadcrumbs\n\t\t\t}\n\n\t\t\t// timeout to keep focus in editor after mouse up\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.focus();\n\t\t\t});\n\t\t};\n\n\t\tthis._register(\n\t\t\taddDisposableListener(\n\t\t\t\tthis.titleContainer,\n\t\t\t\tEventType.MOUSE_DOWN,\n\t\t\t\t(e) => handleTitleClickOrTouch(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(\n\t\t\t\tthis.titleContainer,\n\t\t\t\tTouchEventType.Tap,\n\t\t\t\t(e) => handleTitleClickOrTouch(e),\n\t\t\t),\n\t\t);\n\n\t\t// Editor pane\n\t\tthis._register(\n\t\t\tthis.editorPane.onDidFocus(() => {\n\t\t\t\tthis._onDidFocus.fire();\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate updateContainer(): void {\n\t\t// Empty Container: add some empty container attributes\n\t\tif (this.isEmpty) {\n\t\t\tthis.element.classList.add(\"empty\");\n\t\t\tthis.element.tabIndex = 0;\n\t\t\tthis.element.setAttribute(\n\t\t\t\t\"aria-label\",\n\t\t\t\tlocalize(\"emptyEditorGroup\", \"{0} (empty)\", this.ariaLabel),\n\t\t\t);\n\t\t}\n\n\t\t// Non-Empty Container: revert empty container attributes\n\t\telse {\n\t\t\tthis.element.classList.remove(\"empty\");\n\t\t\tthis.element.removeAttribute(\"tabIndex\");\n\t\t\tthis.element.removeAttribute(\"aria-label\");\n\t\t}\n\n\t\t// Update styles\n\t\tthis.updateStyles();\n\t}\n\n\tprivate updateTitleContainer(): void {\n\t\tthis.titleContainer.classList.toggle(\n\t\t\t\"tabs\",\n\t\t\tthis.groupsView.partOptions.showTabs === \"multiple\",\n\t\t);\n\t\tthis.titleContainer.classList.toggle(\n\t\t\t\"show-file-icons\",\n\t\t\tthis.groupsView.partOptions.showIcons,\n\t\t);\n\t}\n\n\tprivate restoreEditors(\n\t\tfrom: IEditorGroupView | ISerializedEditorGroupModel | null,\n\t\tgroupViewOptions?: IEditorGroupViewOptions,\n\t): Promise<void> | undefined {\n\t\tif (this.count === 0) {\n\t\t\treturn; // nothing to show\n\t\t}\n\n\t\t// Determine editor options\n\t\tlet options: IEditorOptions;\n\t\tif (from instanceof EditorGroupView) {\n\t\t\toptions = fillActiveEditorViewState(from); // if we copy from another group, ensure to copy its active editor viewstate\n\t\t} else {\n\t\t\toptions = Object.create(null);\n\t\t}\n\n\t\tconst activeEditor = this.model.activeEditor;\n\t\tif (!activeEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\toptions.pinned = this.model.isPinned(activeEditor); // preserve pinned state\n\t\toptions.sticky = this.model.isSticky(activeEditor); // preserve sticky state\n\t\toptions.preserveFocus = true; // handle focus after editor is restored\n\n\t\tconst internalOptions: IInternalEditorOpenOptions = {\n\t\t\tpreserveWindowOrder: true, // handle window order after editor is restored\n\t\t\tskipTitleUpdate: true, // update the title later for all editors at once\n\t\t};\n\n\t\tconst activeElement = getActiveElement();\n\n\t\t// Show active editor (intentionally not using async to keep\n\t\t// `restoreEditors` from executing in same stack)\n\t\tconst result = this.doShowEditor(\n\t\t\tactiveEditor,\n\t\t\t{ active: true, isNew: false /* restored */ },\n\t\t\toptions,\n\t\t\tinternalOptions,\n\t\t).then(() => {\n\t\t\t// Set focused now if this is the active group and focus has\n\t\t\t// not changed meanwhile. This prevents focus from being\n\t\t\t// stolen accidentally on startup when the user already\n\t\t\t// clicked somewhere.\n\n\t\t\tif (\n\t\t\t\tthis.groupsView.activeGroup === this &&\n\t\t\t\tactiveElement &&\n\t\t\t\tisActiveElement(activeElement) &&\n\t\t\t\t!groupViewOptions?.preserveFocus\n\t\t\t) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\t\t});\n\n\t\t// Restore editors in title control\n\t\tthis.titleControl.openEditors(this.editors);\n\n\t\treturn result;\n\t}\n\n\t//#region event handling\n\n\tprivate registerListeners(): void {\n\t\t// Model Events\n\t\tthis._register(\n\t\t\tthis.model.onDidModelChange((e) => this.onDidGroupModelChange(e)),\n\t\t);\n\n\t\t// Option Changes\n\t\tthis._register(\n\t\t\tthis.groupsView.onDidChangeEditorPartOptions((e) =>\n\t\t\t\tthis.onDidChangeEditorPartOptions(e),\n\t\t\t),\n\t\t);\n\n\t\t// Visibility\n\t\tthis._register(\n\t\t\tthis.groupsView.onDidVisibilityChange((e) =>\n\t\t\t\tthis.onDidVisibilityChange(e),\n\t\t\t),\n\t\t);\n\n\t\t// Focus\n\t\tthis._register(this.onDidFocus(() => this.onDidGainFocus()));\n\t}\n\n\tprivate onDidGroupModelChange(e: IGroupModelChangeEvent): void {\n\t\t// Re-emit to outside\n\t\tthis._onDidModelChange.fire(e);\n\n\t\t// Handle within\n\n\t\tswitch (e.kind) {\n\t\t\tcase GroupModelChangeKind.GROUP_LOCKED:\n\t\t\t\tthis.element.classList.toggle(\"locked\", this.isLocked);\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITORS_SELECTION:\n\t\t\t\tthis.onDidChangeEditorSelection();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!e.editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (e.kind) {\n\t\t\tcase GroupModelChangeKind.EDITOR_OPEN:\n\t\t\t\tif (isGroupEditorOpenEvent(e)) {\n\t\t\t\t\tthis.onDidOpenEditor(e.editor, e.editorIndex);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_CLOSE:\n\t\t\t\tif (isGroupEditorCloseEvent(e)) {\n\t\t\t\t\tthis.handleOnDidCloseEditor(\n\t\t\t\t\t\te.editor,\n\t\t\t\t\t\te.editorIndex,\n\t\t\t\t\t\te.context,\n\t\t\t\t\t\te.sticky,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_WILL_DISPOSE:\n\t\t\t\tthis.onWillDisposeEditor(e.editor);\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_DIRTY:\n\t\t\t\tthis.onDidChangeEditorDirty(e.editor);\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_TRANSIENT:\n\t\t\t\tthis.onDidChangeEditorTransient(e.editor);\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_LABEL:\n\t\t\t\tthis.onDidChangeEditorLabel(e.editor);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate onDidOpenEditor(editor: EditorInput, editorIndex: number): void {\n\t\t/* __GDPR__\n\t\t\t\"editorOpened\" : {\n\t\t\t\t\"owner\": \"bpasero\",\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${EditorTelemetryDescriptor}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(\n\t\t\t\"editorOpened\",\n\t\t\tthis.toEditorTelemetryDescriptor(editor),\n\t\t);\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\t}\n\n\tprivate handleOnDidCloseEditor(\n\t\teditor: EditorInput,\n\t\teditorIndex: number,\n\t\tcontext: EditorCloseContext,\n\t\tsticky: boolean,\n\t): void {\n\t\t// Before close\n\t\tthis._onWillCloseEditor.fire({\n\t\t\tgroupId: this.id,\n\t\t\teditor,\n\t\t\tcontext,\n\t\t\tindex: editorIndex,\n\t\t\tsticky,\n\t\t});\n\n\t\t// Handle event\n\t\tconst editorsToClose: EditorInput[] = [editor];\n\n\t\t// Include both sides of side by side editors when being closed\n\t\tif (editor instanceof SideBySideEditorInput) {\n\t\t\teditorsToClose.push(editor.primary, editor.secondary);\n\t\t}\n\n\t\t// For each editor to close, we call dispose() to free up any resources.\n\t\t// However, certain editors might be shared across multiple editor groups\n\t\t// (including being visible in side by side / diff editors) and as such we\n\t\t// only dispose when they are not opened elsewhere.\n\t\tfor (const editor of editorsToClose) {\n\t\t\tif (this.canDispose(editor)) {\n\t\t\t\teditor.dispose();\n\t\t\t}\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"editorClosed\" : {\n\t\t\t\t\"owner\": \"bpasero\",\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${EditorTelemetryDescriptor}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(\n\t\t\t\"editorClosed\",\n\t\t\tthis.toEditorTelemetryDescriptor(editor),\n\t\t);\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Event\n\t\tthis._onDidCloseEditor.fire({\n\t\t\tgroupId: this.id,\n\t\t\teditor,\n\t\t\tcontext,\n\t\t\tindex: editorIndex,\n\t\t\tsticky,\n\t\t});\n\t}\n\n\tprivate canDispose(editor: EditorInput): boolean {\n\t\tfor (const groupView of this.editorPartsView.groups) {\n\t\t\tif (\n\t\t\t\tgroupView instanceof EditorGroupView &&\n\t\t\t\tgroupView.model.contains(editor, {\n\t\t\t\t\tstrictEquals: true, // only if this input is not shared across editor groups\n\t\t\t\t\tsupportSideBySide: SideBySideEditor.ANY, // include any side of an opened side by side editor\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate toResourceTelemetryDescriptor(resource: URI): object | undefined {\n\t\tif (!resource) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst path = resource\n\t\t\t? resource.scheme === Schemas.file\n\t\t\t\t? resource.fsPath\n\t\t\t\t: resource.path\n\t\t\t: undefined;\n\t\tif (!path) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Remove query parameters from the resource extension\n\t\tlet resourceExt = extname(resource);\n\t\tconst queryStringLocation = resourceExt.indexOf(\"?\");\n\t\tresourceExt =\n\t\t\tqueryStringLocation !== -1\n\t\t\t\t? resourceExt.substr(0, queryStringLocation)\n\t\t\t\t: resourceExt;\n\n\t\treturn {\n\t\t\tmimeType: new TelemetryTrustedValue(\n\t\t\t\tgetMimeTypes(resource).join(\", \"),\n\t\t\t),\n\t\t\tscheme: resource.scheme,\n\t\t\text: resourceExt,\n\t\t\tpath: hash(path),\n\t\t};\n\t}\n\n\tprivate toEditorTelemetryDescriptor(editor: EditorInput): object {\n\t\tconst descriptor = editor.getTelemetryDescriptor();\n\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(editor, {\n\t\t\tsupportSideBySide: SideBySideEditor.BOTH,\n\t\t});\n\t\tif (URI.isUri(resource)) {\n\t\t\tdescriptor[\"resource\"] =\n\t\t\t\tthis.toResourceTelemetryDescriptor(resource);\n\n\t\t\t/* __GDPR__FRAGMENT__\n\t\t\t\t\"EditorTelemetryDescriptor\" : {\n\t\t\t\t\t\"resource\": { \"${inline}\": [ \"${URIDescriptor}\" ] }\n\t\t\t\t}\n\t\t\t*/\n\t\t\treturn descriptor;\n\t\t} else if (resource) {\n\t\t\tif (resource.primary) {\n\t\t\t\tdescriptor[\"resource\"] = this.toResourceTelemetryDescriptor(\n\t\t\t\t\tresource.primary,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (resource.secondary) {\n\t\t\t\tdescriptor[\"resourceSecondary\"] =\n\t\t\t\t\tthis.toResourceTelemetryDescriptor(resource.secondary);\n\t\t\t}\n\t\t\t/* __GDPR__FRAGMENT__\n\t\t\t\t\"EditorTelemetryDescriptor\" : {\n\t\t\t\t\t\"resource\": { \"${inline}\": [ \"${URIDescriptor}\" ] },\n\t\t\t\t\t\"resourceSecondary\": { \"${inline}\": [ \"${URIDescriptor}\" ] }\n\t\t\t\t}\n\t\t\t*/\n\t\t\treturn descriptor;\n\t\t}\n\n\t\treturn descriptor;\n\t}\n\n\tprivate onWillDisposeEditor(editor: EditorInput): void {\n\t\t// To prevent race conditions, we handle disposed editors in our worker with a timeout\n\t\t// because it can happen that an input is being disposed with the intent to replace\n\t\t// it with some other input right after.\n\t\tthis.disposedEditorsWorker.work(editor);\n\t}\n\n\tprivate handleDisposedEditors(disposedEditors: EditorInput[]): void {\n\t\t// Split between visible and hidden editors\n\t\tlet activeEditor: EditorInput | undefined;\n\t\tconst inactiveEditors: EditorInput[] = [];\n\t\tfor (const disposedEditor of disposedEditors) {\n\t\t\tconst editorFindResult = this.model.findEditor(disposedEditor);\n\t\t\tif (!editorFindResult) {\n\t\t\t\tcontinue; // not part of the model anymore\n\t\t\t}\n\n\t\t\tconst editor = editorFindResult[0];\n\t\t\tif (!editor.isDisposed()) {\n\t\t\t\tcontinue; // editor got reopened meanwhile\n\t\t\t}\n\n\t\t\tif (this.model.isActive(editor)) {\n\t\t\t\tactiveEditor = editor;\n\t\t\t} else {\n\t\t\t\tinactiveEditors.push(editor);\n\t\t\t}\n\t\t}\n\n\t\t// Close all inactive editors first to prevent UI flicker\n\t\tfor (const inactiveEditor of inactiveEditors) {\n\t\t\tthis.doCloseEditor(inactiveEditor, true);\n\t\t}\n\n\t\t// Close active one last\n\t\tif (activeEditor) {\n\t\t\tthis.doCloseEditor(activeEditor, true);\n\t\t}\n\t}\n\n\tprivate onDidChangeEditorPartOptions(\n\t\tevent: IEditorPartOptionsChangeEvent,\n\t): void {\n\t\t// Title container\n\t\tthis.updateTitleContainer();\n\n\t\t// Title control\n\t\tthis.titleControl.updateOptions(\n\t\t\tevent.oldPartOptions,\n\t\t\tevent.newPartOptions,\n\t\t);\n\n\t\t// Title control switch between singleEditorTabs, multiEditorTabs and multiRowEditorTabs\n\t\tif (\n\t\t\tevent.oldPartOptions.showTabs !== event.newPartOptions.showTabs ||\n\t\t\tevent.oldPartOptions.tabHeight !== event.newPartOptions.tabHeight ||\n\t\t\t(event.oldPartOptions.showTabs === \"multiple\" &&\n\t\t\t\tevent.oldPartOptions.pinnedTabsOnSeparateRow !==\n\t\t\t\t\tevent.newPartOptions.pinnedTabsOnSeparateRow)\n\t\t) {\n\t\t\t// Re-layout\n\t\t\tthis.relayout();\n\n\t\t\t// Ensure to show active editor if any\n\t\t\tif (this.model.activeEditor) {\n\t\t\t\tthis.titleControl.openEditors(\n\t\t\t\t\tthis.model.getEditors(EditorsOrder.SEQUENTIAL),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Styles\n\t\tthis.updateStyles();\n\n\t\t// Pin preview editor once user disables preview\n\t\tif (\n\t\t\tevent.oldPartOptions.enablePreview &&\n\t\t\t!event.newPartOptions.enablePreview\n\t\t) {\n\t\t\tif (this.model.previewEditor) {\n\t\t\t\tthis.pinEditor(this.model.previewEditor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidChangeEditorDirty(editor: EditorInput): void {\n\t\t// Always show dirty editors pinned\n\t\tthis.pinEditor(editor);\n\n\t\t// Forward to title control\n\t\tthis.titleControl.updateEditorDirty(editor);\n\t}\n\n\tprivate onDidChangeEditorTransient(editor: EditorInput): void {\n\t\tconst transient = this.model.isTransient(editor);\n\n\t\t// Transient state overrides the `enablePreview` setting,\n\t\t// so when an editor leaves the transient state, we have\n\t\t// to ensure its preview state is also cleared.\n\t\tif (!transient && !this.groupsView.partOptions.enablePreview) {\n\t\t\tthis.pinEditor(editor);\n\t\t}\n\t}\n\n\tprivate onDidChangeEditorLabel(editor: EditorInput): void {\n\t\t// Forward to title control\n\t\tthis.titleControl.updateEditorLabel(editor);\n\t}\n\n\tprivate onDidChangeEditorSelection(): void {\n\t\t// Forward to title control\n\t\tthis.titleControl.updateEditorSelections();\n\t}\n\n\tprivate onDidVisibilityChange(visible: boolean): void {\n\t\t// Forward to active editor pane\n\t\tthis.editorPane.setVisible(visible);\n\t}\n\n\tprivate onDidGainFocus(): void {\n\t\tif (this.activeEditor) {\n\t\t\t// We aggressively clear the transient state of editors\n\t\t\t// as soon as the group gains focus. This is to ensure\n\t\t\t// that the transient state is not staying around when\n\t\t\t// the user interacts with the editor.\n\n\t\t\tthis.model.setTransient(this.activeEditor, false);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region IEditorGroupView\n\n\tget index(): number {\n\t\treturn this._index;\n\t}\n\n\tget label(): string {\n\t\tif (this.groupsLabel) {\n\t\t\treturn localize(\n\t\t\t\t\"groupLabelLong\",\n\t\t\t\t\"{0}: Group {1}\",\n\t\t\t\tthis.groupsLabel,\n\t\t\t\tthis._index + 1,\n\t\t\t);\n\t\t}\n\n\t\treturn localize(\"groupLabel\", \"Group {0}\", this._index + 1);\n\t}\n\n\tget ariaLabel(): string {\n\t\tif (this.groupsLabel) {\n\t\t\treturn localize(\n\t\t\t\t\"groupAriaLabelLong\",\n\t\t\t\t\"{0}: Editor Group {1}\",\n\t\t\t\tthis.groupsLabel,\n\t\t\t\tthis._index + 1,\n\t\t\t);\n\t\t}\n\n\t\treturn localize(\"groupAriaLabel\", \"Editor Group {0}\", this._index + 1);\n\t}\n\n\tprivate _disposed = false;\n\tget disposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tget isEmpty(): boolean {\n\t\treturn this.count === 0;\n\t}\n\n\tget titleHeight(): IEditorGroupTitleHeight {\n\t\treturn this.titleControl.getHeight();\n\t}\n\n\tnotifyIndexChanged(newIndex: number): void {\n\t\tif (this._index !== newIndex) {\n\t\t\tthis._index = newIndex;\n\t\t\tthis.model.setIndex(newIndex);\n\t\t}\n\t}\n\n\tnotifyLabelChanged(newLabel: string): void {\n\t\tif (this.groupsLabel !== newLabel) {\n\t\t\tthis.groupsLabel = newLabel;\n\t\t\tthis.model.setLabel(newLabel);\n\t\t}\n\t}\n\n\tsetActive(isActive: boolean): void {\n\t\tthis.active = isActive;\n\n\t\t// Clear selection when group no longer active\n\t\tif (!isActive && this.activeEditor && this.selectedEditors.length > 1) {\n\t\t\tthis.setSelection(this.activeEditor, []);\n\t\t}\n\n\t\t// Update container\n\t\tthis.element.classList.toggle(\"active\", isActive);\n\t\tthis.element.classList.toggle(\"inactive\", !isActive);\n\n\t\t// Update title control\n\t\tthis.titleControl.setActive(isActive);\n\n\t\t// Update styles\n\t\tthis.updateStyles();\n\n\t\t// Update model\n\t\tthis.model.setActive(undefined /* entire group got active */);\n\t}\n\n\t//#endregion\n\n\t//#region basics()\n\n\tget id(): GroupIdentifier {\n\t\treturn this.model.id;\n\t}\n\n\tget windowId(): number {\n\t\treturn this.groupsView.windowId;\n\t}\n\n\tget editors(): EditorInput[] {\n\t\treturn this.model.getEditors(EditorsOrder.SEQUENTIAL);\n\t}\n\n\tget count(): number {\n\t\treturn this.model.count;\n\t}\n\n\tget stickyCount(): number {\n\t\treturn this.model.stickyCount;\n\t}\n\n\tget activeEditorPane(): IVisibleEditorPane | undefined {\n\t\treturn this.editorPane\n\t\t\t? (this.editorPane.activeEditorPane ?? undefined)\n\t\t\t: undefined;\n\t}\n\n\tget activeEditor(): EditorInput | null {\n\t\treturn this.model.activeEditor;\n\t}\n\n\tget selectedEditors(): EditorInput[] {\n\t\treturn this.model.selectedEditors;\n\t}\n\n\tget previewEditor(): EditorInput | null {\n\t\treturn this.model.previewEditor;\n\t}\n\n\tisPinned(editorOrIndex: EditorInput | number): boolean {\n\t\treturn this.model.isPinned(editorOrIndex);\n\t}\n\n\tisSticky(editorOrIndex: EditorInput | number): boolean {\n\t\treturn this.model.isSticky(editorOrIndex);\n\t}\n\n\tisSelected(editor: EditorInput): boolean {\n\t\treturn this.model.isSelected(editor);\n\t}\n\n\tisTransient(editorOrIndex: EditorInput | number): boolean {\n\t\treturn this.model.isTransient(editorOrIndex);\n\t}\n\n\tisActive(editor: EditorInput | IUntypedEditorInput): boolean {\n\t\treturn this.model.isActive(editor);\n\t}\n\n\tasync setSelection(\n\t\tactiveSelectedEditor: EditorInput,\n\t\tinactiveSelectedEditors: EditorInput[],\n\t): Promise<void> {\n\t\tif (this.isActive(activeSelectedEditor)) {\n\t\t\tthis.model.setSelection(\n\t\t\t\tactiveSelectedEditor,\n\t\t\t\tinactiveSelectedEditors,\n\t\t\t);\n\t\t} else {\n\t\t\t// The active selected editor is not yet opened, so we go\n\t\t\t// through `openEditor` to show it. We pass the inactive\n\t\t\t// selection as internal options\n\t\t\tawait this.openEditor(\n\t\t\t\tactiveSelectedEditor,\n\t\t\t\t{ activation: EditorActivation.ACTIVATE },\n\t\t\t\t{ inactiveSelection: inactiveSelectedEditors },\n\t\t\t);\n\t\t}\n\t}\n\n\tcontains(\n\t\tcandidate: EditorInput | IUntypedEditorInput,\n\t\toptions?: IMatchEditorOptions,\n\t): boolean {\n\t\treturn this.model.contains(candidate, options);\n\t}\n\n\tgetEditors(\n\t\torder: EditorsOrder,\n\t\toptions?: { excludeSticky?: boolean },\n\t): EditorInput[] {\n\t\treturn this.model.getEditors(order, options);\n\t}\n\n\tfindEditors(resource: URI, options?: IFindEditorOptions): EditorInput[] {\n\t\tconst canonicalResource =\n\t\t\tthis.uriIdentityService.asCanonicalUri(resource);\n\t\treturn this.getEditors(EditorsOrder.SEQUENTIAL).filter((editor) => {\n\t\t\tif (\n\t\t\t\teditor.resource &&\n\t\t\t\tisEqual(editor.resource, canonicalResource)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Support side by side editor primary side if specified\n\t\t\tif (\n\t\t\t\toptions?.supportSideBySide === SideBySideEditor.PRIMARY ||\n\t\t\t\toptions?.supportSideBySide === SideBySideEditor.ANY\n\t\t\t) {\n\t\t\t\tconst primaryResource = EditorResourceAccessor.getCanonicalUri(\n\t\t\t\t\teditor,\n\t\t\t\t\t{ supportSideBySide: SideBySideEditor.PRIMARY },\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tprimaryResource &&\n\t\t\t\t\tisEqual(primaryResource, canonicalResource)\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Support side by side editor secondary side if specified\n\t\t\tif (\n\t\t\t\toptions?.supportSideBySide === SideBySideEditor.SECONDARY ||\n\t\t\t\toptions?.supportSideBySide === SideBySideEditor.ANY\n\t\t\t) {\n\t\t\t\tconst secondaryResource =\n\t\t\t\t\tEditorResourceAccessor.getCanonicalUri(editor, {\n\t\t\t\t\t\tsupportSideBySide: SideBySideEditor.SECONDARY,\n\t\t\t\t\t});\n\t\t\t\tif (\n\t\t\t\t\tsecondaryResource &&\n\t\t\t\t\tisEqual(secondaryResource, canonicalResource)\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tgetEditorByIndex(index: number): EditorInput | undefined {\n\t\treturn this.model.getEditorByIndex(index);\n\t}\n\n\tgetIndexOfEditor(editor: EditorInput): number {\n\t\treturn this.model.indexOf(editor);\n\t}\n\n\tisFirst(editor: EditorInput): boolean {\n\t\treturn this.model.isFirst(editor);\n\t}\n\n\tisLast(editor: EditorInput): boolean {\n\t\treturn this.model.isLast(editor);\n\t}\n\n\tfocus(): void {\n\t\t// Pass focus to editor panes\n\t\tif (this.activeEditorPane) {\n\t\t\tthis.activeEditorPane.focus();\n\t\t} else {\n\t\t\tthis.element.focus();\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidFocus.fire();\n\t}\n\n\tpinEditor(\n\t\tcandidate: EditorInput | undefined = this.activeEditor || undefined,\n\t): void {\n\t\tif (candidate && !this.model.isPinned(candidate)) {\n\t\t\t// Update model\n\t\t\tconst editor = this.model.pin(candidate);\n\n\t\t\t// Forward to title control\n\t\t\tif (editor) {\n\t\t\t\tthis.titleControl.pinEditor(editor);\n\t\t\t}\n\t\t}\n\t}\n\n\tstickEditor(\n\t\tcandidate: EditorInput | undefined = this.activeEditor || undefined,\n\t): void {\n\t\tthis.doStickEditor(candidate, true);\n\t}\n\n\tunstickEditor(\n\t\tcandidate: EditorInput | undefined = this.activeEditor || undefined,\n\t): void {\n\t\tthis.doStickEditor(candidate, false);\n\t}\n\n\tprivate doStickEditor(\n\t\tcandidate: EditorInput | undefined,\n\t\tsticky: boolean,\n\t): void {\n\t\tif (candidate && this.model.isSticky(candidate) !== sticky) {\n\t\t\tconst oldIndexOfEditor = this.getIndexOfEditor(candidate);\n\n\t\t\t// Update model\n\t\t\tconst editor = sticky\n\t\t\t\t? this.model.stick(candidate)\n\t\t\t\t: this.model.unstick(candidate);\n\t\t\tif (!editor) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the index of the editor changed, we need to forward this to\n\t\t\t// title control and also make sure to emit this as an event\n\t\t\tconst newIndexOfEditor = this.getIndexOfEditor(editor);\n\t\t\tif (newIndexOfEditor !== oldIndexOfEditor) {\n\t\t\t\tthis.titleControl.moveEditor(\n\t\t\t\t\teditor,\n\t\t\t\t\toldIndexOfEditor,\n\t\t\t\t\tnewIndexOfEditor,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Forward sticky state to title control\n\t\t\tif (sticky) {\n\t\t\t\tthis.titleControl.stickEditor(editor);\n\t\t\t} else {\n\t\t\t\tthis.titleControl.unstickEditor(editor);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region openEditor()\n\n\tasync openEditor(\n\t\teditor: EditorInput,\n\t\toptions?: IEditorOptions,\n\t\tinternalOptions?: IInternalEditorOpenOptions,\n\t): Promise<IEditorPane | undefined> {\n\t\treturn this.doOpenEditor(editor, options, {\n\t\t\t// Appply given internal open options\n\t\t\t...internalOptions,\n\t\t\t// Allow to match on a side-by-side editor when same\n\t\t\t// editor is opened on both sides. In that case we\n\t\t\t// do not want to open a new editor but reuse that one.\n\t\t\tsupportSideBySide: SideBySideEditor.BOTH,\n\t\t});\n\t}\n\n\tprivate async doOpenEditor(\n\t\teditor: EditorInput,\n\t\toptions?: IEditorOptions,\n\t\tinternalOptions?: IInternalEditorOpenOptions,\n\t): Promise<IEditorPane | undefined> {\n\t\t// Guard against invalid editors. Disposed editors\n\t\t// should never open because they emit no events\n\t\t// e.g. to indicate dirty changes.\n\t\tif (!editor || editor.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fire the event letting everyone know we are about to open an editor\n\t\tthis._onWillOpenEditor.fire({ editor, groupId: this.id });\n\n\t\t// Determine options\n\t\tconst pinned =\n\t\t\toptions?.sticky ||\n\t\t\t(!this.groupsView.partOptions.enablePreview &&\n\t\t\t\t!options?.transient) ||\n\t\t\teditor.isDirty() ||\n\t\t\t(options?.pinned ??\n\t\t\t\ttypeof options?.index ===\n\t\t\t\t\t\"number\") /* unless specified, prefer to pin when opening with index */ ||\n\t\t\t(typeof options?.index === \"number\" &&\n\t\t\t\tthis.model.isSticky(options.index)) ||\n\t\t\teditor.hasCapability(EditorInputCapabilities.Scratchpad);\n\t\tconst openEditorOptions: IEditorOpenOptions = {\n\t\t\tindex: options ? options.index : undefined,\n\t\t\tpinned,\n\t\t\tsticky:\n\t\t\t\toptions?.sticky ||\n\t\t\t\t(typeof options?.index === \"number\" &&\n\t\t\t\t\tthis.model.isSticky(options.index)),\n\t\t\ttransient: !!options?.transient,\n\t\t\tinactiveSelection: internalOptions?.inactiveSelection,\n\t\t\tactive: this.count === 0 || !options || !options.inactive,\n\t\t\tsupportSideBySide: internalOptions?.supportSideBySide,\n\t\t};\n\n\t\tif (\n\t\t\t!openEditorOptions.active &&\n\t\t\t!openEditorOptions.pinned &&\n\t\t\tthis.model.activeEditor &&\n\t\t\t!this.model.isPinned(this.model.activeEditor)\n\t\t) {\n\t\t\t// Special case: we are to open an editor inactive and not pinned, but the current active\n\t\t\t// editor is also not pinned, which means it will get replaced with this one. As such,\n\t\t\t// the editor can only be active.\n\t\t\topenEditorOptions.active = true;\n\t\t}\n\n\t\tlet activateGroup = false;\n\t\tlet restoreGroup = false;\n\n\t\tif (options?.activation === EditorActivation.ACTIVATE) {\n\t\t\t// Respect option to force activate an editor group.\n\t\t\tactivateGroup = true;\n\t\t} else if (options?.activation === EditorActivation.RESTORE) {\n\t\t\t// Respect option to force restore an editor group.\n\t\t\trestoreGroup = true;\n\t\t} else if (options?.activation === EditorActivation.PRESERVE) {\n\t\t\t// Respect option to preserve active editor group.\n\t\t\tactivateGroup = false;\n\t\t\trestoreGroup = false;\n\t\t} else if (openEditorOptions.active) {\n\t\t\t// Finally, we only activate/restore an editor which is\n\t\t\t// opening as active editor.\n\t\t\t// If preserveFocus is enabled, we only restore but never\n\t\t\t// activate the group.\n\t\t\tactivateGroup = !options || !options.preserveFocus;\n\t\t\trestoreGroup = !activateGroup;\n\t\t}\n\n\t\t// Actually move the editor if a specific index is provided and we figure\n\t\t// out that the editor is already opened at a different index. This\n\t\t// ensures the right set of events are fired to the outside.\n\t\tif (typeof openEditorOptions.index === \"number\") {\n\t\t\tconst indexOfEditor = this.model.indexOf(editor);\n\t\t\tif (\n\t\t\t\tindexOfEditor !== -1 &&\n\t\t\t\tindexOfEditor !== openEditorOptions.index\n\t\t\t) {\n\t\t\t\tthis.doMoveEditorInsideGroup(editor, openEditorOptions);\n\t\t\t}\n\t\t}\n\n\t\t// Update model and make sure to continue to use the editor we get from\n\t\t// the model. It is possible that the editor was already opened and we\n\t\t// want to ensure that we use the existing instance in that case.\n\t\tconst { editor: openedEditor, isNew } = this.model.openEditor(\n\t\t\teditor,\n\t\t\topenEditorOptions,\n\t\t);\n\n\t\t// Conditionally lock the group\n\t\tif (\n\t\t\tisNew && // only if this editor was new for the group\n\t\t\tthis.count === 1 && // only when this editor was the first editor in the group\n\t\t\tthis.editorPartsView.groups.length > 1 // only allow auto locking if more than 1 group is opened\n\t\t) {\n\t\t\t// only when the editor identifier is configured as such\n\t\t\tif (\n\t\t\t\topenedEditor.editorId &&\n\t\t\t\tthis.groupsView.partOptions.autoLockGroups?.has(\n\t\t\t\t\topenedEditor.editorId,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.lock(true);\n\t\t\t}\n\t\t}\n\n\t\t// Show editor\n\t\tconst showEditorResult = this.doShowEditor(\n\t\t\topenedEditor,\n\t\t\t{ active: !!openEditorOptions.active, isNew },\n\t\t\toptions,\n\t\t\tinternalOptions,\n\t\t);\n\n\t\t// Finally make sure the group is active or restored as instructed\n\t\tif (activateGroup) {\n\t\t\tthis.groupsView.activateGroup(this);\n\t\t} else if (restoreGroup) {\n\t\t\tthis.groupsView.restoreGroup(this);\n\t\t}\n\n\t\treturn showEditorResult;\n\t}\n\n\tprivate doShowEditor(\n\t\teditor: EditorInput,\n\t\tcontext: { active: boolean; isNew: boolean },\n\t\toptions?: IEditorOptions,\n\t\tinternalOptions?: IInternalEditorOpenOptions,\n\t): Promise<IEditorPane | undefined> {\n\t\t// Show in editor control if the active editor changed\n\t\tlet openEditorPromise: Promise<IEditorPane | undefined>;\n\t\tif (context.active) {\n\t\t\topenEditorPromise = (async () => {\n\t\t\t\tconst { pane, changed, cancelled, error } =\n\t\t\t\t\tawait this.editorPane.openEditor(\n\t\t\t\t\t\teditor,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tinternalOptions,\n\t\t\t\t\t\t{ newInGroup: context.isNew },\n\t\t\t\t\t);\n\n\t\t\t\t// Return early if the operation was cancelled by another operation\n\t\t\t\tif (cancelled) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// Editor change event\n\t\t\t\tif (changed) {\n\t\t\t\t\tthis._onDidActiveEditorChange.fire({ editor });\n\t\t\t\t}\n\n\t\t\t\t// Indicate error as an event but do not bubble them up\n\t\t\t\tif (error) {\n\t\t\t\t\tthis._onDidOpenEditorFail.fire(editor);\n\t\t\t\t}\n\n\t\t\t\t// Without an editor pane, recover by closing the active editor\n\t\t\t\t// (if the input is still the active one)\n\t\t\t\tif (!pane && this.activeEditor === editor) {\n\t\t\t\t\tthis.doCloseEditor(editor, options?.preserveFocus, {\n\t\t\t\t\t\tfromError: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn pane;\n\t\t\t})();\n\t\t} else {\n\t\t\topenEditorPromise = Promise.resolve(undefined); // inactive: return undefined as result to signal this\n\t\t}\n\n\t\t// Show in title control after editor control because some actions depend on it\n\t\t// but respect the internal options in case title control updates should skip.\n\t\tif (!internalOptions?.skipTitleUpdate) {\n\t\t\tthis.titleControl.openEditor(editor, internalOptions);\n\t\t}\n\n\t\treturn openEditorPromise;\n\t}\n\n\t//#endregion\n\n\t//#region openEditors()\n\n\tasync openEditors(\n\t\teditors: { editor: EditorInput; options?: IEditorOptions }[],\n\t): Promise<IEditorPane | undefined> {\n\t\t// Guard against invalid editors. Disposed editors\n\t\t// should never open because they emit no events\n\t\t// e.g. to indicate dirty changes.\n\t\tconst editorsToOpen = coalesce(editors).filter(\n\t\t\t({ editor }) => !editor.isDisposed(),\n\t\t);\n\n\t\t// Use the first editor as active editor\n\t\tconst firstEditor = editorsToOpen.at(0);\n\t\tif (!firstEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst openEditorsOptions: IInternalEditorOpenOptions = {\n\t\t\t// Allow to match on a side-by-side editor when same\n\t\t\t// editor is opened on both sides. In that case we\n\t\t\t// do not want to open a new editor but reuse that one.\n\t\t\tsupportSideBySide: SideBySideEditor.BOTH,\n\t\t};\n\n\t\tawait this.doOpenEditor(\n\t\t\tfirstEditor.editor,\n\t\t\tfirstEditor.options,\n\t\t\topenEditorsOptions,\n\t\t);\n\n\t\t// Open the other ones inactive\n\t\tconst inactiveEditors = editorsToOpen.slice(1);\n\t\tconst startingIndex = this.getIndexOfEditor(firstEditor.editor) + 1;\n\t\tawait Promises.settled(\n\t\t\tinactiveEditors.map(({ editor, options }, index) => {\n\t\t\t\treturn this.doOpenEditor(\n\t\t\t\t\teditor,\n\t\t\t\t\t{\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\tinactive: true,\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\tindex: startingIndex + index,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t...openEditorsOptions,\n\t\t\t\t\t\t// optimization: update the title control later\n\t\t\t\t\t\t// https://github.com/microsoft/vscode/issues/130634\n\t\t\t\t\t\tskipTitleUpdate: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// Update the title control all at once with all editors\n\t\tthis.titleControl.openEditors(\n\t\t\tinactiveEditors.map(({ editor }) => editor),\n\t\t);\n\n\t\t// Opening many editors at once can put any editor to be\n\t\t// the active one depending on options. As such, we simply\n\t\t// return the active editor pane after this operation.\n\t\treturn this.editorPane.activeEditorPane ?? undefined;\n\t}\n\n\t//#endregion\n\n\t//#region moveEditor()\n\n\tmoveEditors(\n\t\teditors: { editor: EditorInput; options?: IEditorOptions }[],\n\t\ttarget: EditorGroupView,\n\t): boolean {\n\t\t// Optimization: knowing that we move many editors, we\n\t\t// delay the title update to a later point for this group\n\t\t// through a method that allows for bulk updates but only\n\t\t// when moving to a different group where many editors\n\t\t// are more likely to occur.\n\t\tconst internalOptions: IInternalMoveCopyOptions = {\n\t\t\tskipTitleUpdate: this !== target,\n\t\t};\n\n\t\tlet moveFailed = false;\n\n\t\tconst movedEditors = new Set<EditorInput>();\n\t\tfor (const { editor, options } of editors) {\n\t\t\tif (this.moveEditor(editor, target, options, internalOptions)) {\n\t\t\t\tmovedEditors.add(editor);\n\t\t\t} else {\n\t\t\t\tmoveFailed = true;\n\t\t\t}\n\t\t}\n\n\t\t// Update the title control all at once with all editors\n\t\t// in source and target if the title update was skipped\n\t\tif (internalOptions.skipTitleUpdate) {\n\t\t\ttarget.titleControl.openEditors(Array.from(movedEditors));\n\t\t\tthis.titleControl.closeEditors(Array.from(movedEditors));\n\t\t}\n\n\t\treturn !moveFailed;\n\t}\n\n\tmoveEditor(\n\t\teditor: EditorInput,\n\t\ttarget: EditorGroupView,\n\t\toptions?: IEditorOptions,\n\t\tinternalOptions?: IInternalMoveCopyOptions,\n\t): boolean {\n\t\t// Move within same group\n\t\tif (this === target) {\n\t\t\tthis.doMoveEditorInsideGroup(editor, options);\n\t\t\treturn true;\n\t\t}\n\n\t\t// Move across groups\n\t\telse {\n\t\t\treturn this.doMoveOrCopyEditorAcrossGroups(\n\t\t\t\teditor,\n\t\t\t\ttarget,\n\t\t\t\toptions,\n\t\t\t\t{ ...internalOptions, keepCopy: false },\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate doMoveEditorInsideGroup(\n\t\tcandidate: EditorInput,\n\t\toptions?: IEditorOpenOptions,\n\t): void {\n\t\tconst moveToIndex = options ? options.index : undefined;\n\t\tif (typeof moveToIndex !== \"number\") {\n\t\t\treturn; // do nothing if we move into same group without index\n\t\t}\n\n\t\t// Update model and make sure to continue to use the editor we get from\n\t\t// the model. It is possible that the editor was already opened and we\n\t\t// want to ensure that we use the existing instance in that case.\n\t\tconst currentIndex = this.model.indexOf(candidate);\n\t\tconst editor = this.model.getEditorByIndex(currentIndex);\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Move when index has actually changed\n\t\tif (currentIndex !== moveToIndex) {\n\t\t\tconst oldStickyCount = this.model.stickyCount;\n\n\t\t\t// Update model\n\t\t\tthis.model.moveEditor(editor, moveToIndex);\n\t\t\tthis.model.pin(editor);\n\n\t\t\t// Forward to title control\n\t\t\tthis.titleControl.moveEditor(\n\t\t\t\teditor,\n\t\t\t\tcurrentIndex,\n\t\t\t\tmoveToIndex,\n\t\t\t\toldStickyCount !== this.model.stickyCount,\n\t\t\t);\n\t\t\tthis.titleControl.pinEditor(editor);\n\t\t}\n\n\t\t// Support the option to stick the editor even if it is moved.\n\t\t// It is important that we call this method after we have moved\n\t\t// the editor because the result of moving the editor could have\n\t\t// caused a change in sticky state.\n\t\tif (options?.sticky) {\n\t\t\tthis.stickEditor(editor);\n\t\t}\n\t}\n\n\tprivate doMoveOrCopyEditorAcrossGroups(\n\t\teditor: EditorInput,\n\t\ttarget: EditorGroupView,\n\t\topenOptions?: IEditorOpenOptions,\n\t\tinternalOptions?: IInternalMoveCopyOptions,\n\t): boolean {\n\t\tconst keepCopy = internalOptions?.keepCopy;\n\n\t\t// Validate that we can move\n\t\tif (\n\t\t\t!keepCopy ||\n\t\t\teditor.hasCapability(\n\t\t\t\tEditorInputCapabilities.Singleton,\n\t\t\t) /* singleton editors will always move */\n\t\t) {\n\t\t\tconst canMoveVeto = editor.canMove(this.id, target.id);\n\t\t\tif (typeof canMoveVeto === \"string\") {\n\t\t\t\tthis.dialogService.error(\n\t\t\t\t\tcanMoveVeto,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"moveErrorDetails\",\n\t\t\t\t\t\t\"Try saving or reverting the editor first and then try again.\",\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// When moving/copying an editor, try to preserve as much view state as possible\n\t\t// by checking for the editor to be a text editor and creating the options accordingly\n\t\t// if so\n\t\tconst options = fillActiveEditorViewState(this, editor, {\n\t\t\t...openOptions,\n\t\t\tpinned: true, // always pin moved editor\n\t\t\tsticky:\n\t\t\t\topenOptions?.sticky ??\n\t\t\t\t(!keepCopy && this.model.isSticky(editor)), // preserve sticky state only if editor is moved or eplicitly wanted (https://github.com/microsoft/vscode/issues/99035)\n\t\t});\n\n\t\t// Indicate will move event\n\t\tif (!keepCopy) {\n\t\t\tthis._onWillMoveEditor.fire({\n\t\t\t\tgroupId: this.id,\n\t\t\t\teditor,\n\t\t\t\ttarget: target.id,\n\t\t\t});\n\t\t}\n\n\t\t// A move to another group is an open first...\n\t\ttarget.doOpenEditor(\n\t\t\tkeepCopy ? editor.copy() : editor,\n\t\t\toptions,\n\t\t\tinternalOptions,\n\t\t);\n\n\t\t// ...and a close afterwards (unless we copy)\n\t\tif (!keepCopy) {\n\t\t\tthis.doCloseEditor(\n\t\t\t\teditor,\n\t\t\t\ttrue /* do not focus next one behind if any */,\n\t\t\t\t{ ...internalOptions, context: EditorCloseContext.MOVE },\n\t\t\t);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t//#endregion\n\n\t//#region copyEditor()\n\n\tcopyEditors(\n\t\teditors: { editor: EditorInput; options?: IEditorOptions }[],\n\t\ttarget: EditorGroupView,\n\t): void {\n\t\t// Optimization: knowing that we move many editors, we\n\t\t// delay the title update to a later point for this group\n\t\t// through a method that allows for bulk updates but only\n\t\t// when moving to a different group where many editors\n\t\t// are more likely to occur.\n\t\tconst internalOptions: IInternalMoveCopyOptions = {\n\t\t\tskipTitleUpdate: this !== target,\n\t\t};\n\n\t\tfor (const { editor, options } of editors) {\n\t\t\tthis.copyEditor(editor, target, options, internalOptions);\n\t\t}\n\n\t\t// Update the title control all at once with all editors\n\t\t// in target if the title update was skipped\n\t\tif (internalOptions.skipTitleUpdate) {\n\t\t\tconst copiedEditors = editors.map(({ editor }) => editor);\n\t\t\ttarget.titleControl.openEditors(copiedEditors);\n\t\t}\n\t}\n\n\tcopyEditor(\n\t\teditor: EditorInput,\n\t\ttarget: EditorGroupView,\n\t\toptions?: IEditorOptions,\n\t\tinternalOptions?: IInternalEditorTitleControlOptions,\n\t): void {\n\t\t// Move within same group because we do not support to show the same editor\n\t\t// multiple times in the same group\n\t\tif (this === target) {\n\t\t\tthis.doMoveEditorInsideGroup(editor, options);\n\t\t}\n\n\t\t// Copy across groups\n\t\telse {\n\t\t\tthis.doMoveOrCopyEditorAcrossGroups(editor, target, options, {\n\t\t\t\t...internalOptions,\n\t\t\t\tkeepCopy: true,\n\t\t\t});\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region closeEditor()\n\n\tasync closeEditor(\n\t\teditor: EditorInput | undefined = this.activeEditor || undefined,\n\t\toptions?: ICloseEditorOptions,\n\t): Promise<boolean> {\n\t\treturn this.doCloseEditorWithConfirmationHandling(editor, options);\n\t}\n\n\tprivate async doCloseEditorWithConfirmationHandling(\n\t\teditor: EditorInput | undefined = this.activeEditor || undefined,\n\t\toptions?: ICloseEditorOptions,\n\t\tinternalOptions?: IInternalEditorCloseOptions,\n\t): Promise<boolean> {\n\t\tif (!editor) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for confirmation and veto\n\t\tconst veto = await this.handleCloseConfirmation([editor]);\n\t\tif (veto) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Do close\n\t\tthis.doCloseEditor(editor, options?.preserveFocus, internalOptions);\n\n\t\treturn true;\n\t}\n\n\tprivate doCloseEditor(\n\t\teditor: EditorInput,\n\t\tpreserveFocus = this.groupsView.activeGroup !== this,\n\t\tinternalOptions?: IInternalEditorCloseOptions,\n\t): void {\n\t\t// Forward to title control unless skipped via internal options\n\t\tif (!internalOptions?.skipTitleUpdate) {\n\t\t\tthis.titleControl.beforeCloseEditor(editor);\n\t\t}\n\n\t\t// Closing the active editor of the group is a bit more work\n\t\tif (this.model.isActive(editor)) {\n\t\t\tthis.doCloseActiveEditor(preserveFocus, internalOptions);\n\t\t}\n\n\t\t// Closing inactive editor is just a model update\n\t\telse {\n\t\t\tthis.doCloseInactiveEditor(editor, internalOptions);\n\t\t}\n\n\t\t// Forward to title control unless skipped via internal options\n\t\tif (!internalOptions?.skipTitleUpdate) {\n\t\t\tthis.titleControl.closeEditor(editor);\n\t\t}\n\t}\n\n\tprivate doCloseActiveEditor(\n\t\tpreserveFocus = this.groupsView.activeGroup !== this,\n\t\tinternalOptions?: IInternalEditorCloseOptions,\n\t): void {\n\t\tconst editorToClose = this.activeEditor;\n\t\tconst restoreFocus =\n\t\t\t!preserveFocus && this.shouldRestoreFocus(this.element);\n\n\t\t// Optimization: if we are about to close the last editor in this group and settings\n\t\t// are configured to close the group since it will be empty, we first set the last\n\t\t// active group as empty before closing the editor. This reduces the amount of editor\n\t\t// change events that this operation emits and will reduce flicker. Without this\n\t\t// optimization, this group (if active) would first trigger a active editor change\n\t\t// event because it became empty, only to then trigger another one when the next\n\t\t// group gets active.\n\t\tconst closeEmptyGroup = this.groupsView.partOptions.closeEmptyGroups;\n\t\tif (closeEmptyGroup && this.active && this.count === 1) {\n\t\t\tconst mostRecentlyActiveGroups = this.groupsView.getGroups(\n\t\t\t\tGroupsOrder.MOST_RECENTLY_ACTIVE,\n\t\t\t);\n\t\t\tconst nextActiveGroup = mostRecentlyActiveGroups[1]; // [0] will be the current one, so take [1]\n\t\t\tif (nextActiveGroup) {\n\t\t\t\tif (restoreFocus) {\n\t\t\t\t\tnextActiveGroup.focus();\n\t\t\t\t} else {\n\t\t\t\t\tthis.groupsView.activateGroup(nextActiveGroup, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update model\n\t\tif (editorToClose) {\n\t\t\tthis.model.closeEditor(editorToClose, internalOptions?.context);\n\t\t}\n\n\t\t// Open next active if there are more to show\n\t\tconst nextActiveEditor = this.model.activeEditor;\n\t\tif (nextActiveEditor) {\n\t\t\tlet activation: EditorActivation | undefined;\n\t\t\tif (preserveFocus && this.groupsView.activeGroup !== this) {\n\t\t\t\t// If we are opening the next editor in an inactive group\n\t\t\t\t// without focussing it, ensure we preserve the editor\n\t\t\t\t// group sizes in case that group is minimized.\n\t\t\t\t// https://github.com/microsoft/vscode/issues/117686\n\t\t\t\tactivation = EditorActivation.PRESERVE;\n\t\t\t}\n\n\t\t\tconst options: IEditorOptions = {\n\t\t\t\tpreserveFocus,\n\t\t\t\tactivation,\n\t\t\t\t// When closing an editor due to an error we can end up in a loop where we continue closing\n\t\t\t\t// editors that fail to open (e.g. when the file no longer exists). We do not want to show\n\t\t\t\t// repeated errors in this case to the user. As such, if we open the next editor and we are\n\t\t\t\t// in a scope of a previous editor failing, we silence the input errors until the editor is\n\t\t\t\t// opened by setting ignoreError: true.\n\t\t\t\tignoreError: internalOptions?.fromError,\n\t\t\t};\n\n\t\t\tconst internalEditorOpenOptions: IInternalEditorOpenOptions = {\n\t\t\t\t// When closing an editor, we reveal the next one in the group.\n\t\t\t\t// However, this can be a result of moving an editor to another\n\t\t\t\t// window so we explicitly disable window reordering in this case.\n\t\t\t\tpreserveWindowOrder: true,\n\t\t\t};\n\n\t\t\tthis.doOpenEditor(\n\t\t\t\tnextActiveEditor,\n\t\t\t\toptions,\n\t\t\t\tinternalEditorOpenOptions,\n\t\t\t);\n\t\t}\n\n\t\t// Otherwise we are empty, so clear from editor control and send event\n\t\telse {\n\t\t\t// Forward to editor pane\n\t\t\tif (editorToClose) {\n\t\t\t\tthis.editorPane.closeEditor(editorToClose);\n\t\t\t}\n\n\t\t\t// Restore focus to group container as needed unless group gets closed\n\t\t\tif (restoreFocus && !closeEmptyGroup) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\n\t\t\t// Events\n\t\t\tthis._onDidActiveEditorChange.fire({ editor: undefined });\n\n\t\t\t// Remove empty group if we should\n\t\t\tif (closeEmptyGroup) {\n\t\t\t\tthis.groupsView.removeGroup(this, preserveFocus);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate shouldRestoreFocus(target: Element): boolean {\n\t\tconst activeElement = getActiveElement();\n\t\tif (activeElement === target.ownerDocument.body) {\n\t\t\treturn true; // always restore focus if nothing is focused currently\n\t\t}\n\n\t\t// otherwise check for the active element being an ancestor of the target\n\t\treturn isAncestor(activeElement, target);\n\t}\n\n\tprivate doCloseInactiveEditor(\n\t\teditor: EditorInput,\n\t\tinternalOptions?: IInternalEditorCloseOptions,\n\t): void {\n\t\t// Update model\n\t\tthis.model.closeEditor(editor, internalOptions?.context);\n\t}\n\n\tprivate async handleCloseConfirmation(\n\t\teditors: EditorInput[],\n\t): Promise<boolean /* veto */> {\n\t\tif (!editors.length) {\n\t\t\treturn false; // no veto\n\t\t}\n\n\t\tconst editor = editors.shift()!;\n\n\t\t// To prevent multiple confirmation dialogs from showing up one after the other\n\t\t// we check if a pending confirmation is currently showing and if so, join that\n\t\tlet handleCloseConfirmationPromise =\n\t\t\tthis.mapEditorToPendingConfirmation.get(editor);\n\t\tif (!handleCloseConfirmationPromise) {\n\t\t\thandleCloseConfirmationPromise =\n\t\t\t\tthis.doHandleCloseConfirmation(editor);\n\t\t\tthis.mapEditorToPendingConfirmation.set(\n\t\t\t\teditor,\n\t\t\t\thandleCloseConfirmationPromise,\n\t\t\t);\n\t\t}\n\n\t\tlet veto: boolean;\n\t\ttry {\n\t\t\tveto = await handleCloseConfirmationPromise;\n\t\t} finally {\n\t\t\tthis.mapEditorToPendingConfirmation.delete(editor);\n\t\t}\n\n\t\t// Return for the first veto we got\n\t\tif (veto) {\n\t\t\treturn veto;\n\t\t}\n\n\t\t// Otherwise continue with the remainders\n\t\treturn this.handleCloseConfirmation(editors);\n\t}\n\n\tprivate async doHandleCloseConfirmation(\n\t\teditor: EditorInput,\n\t\toptions?: { skipAutoSave: boolean },\n\t): Promise<boolean /* veto */> {\n\t\tif (!this.shouldConfirmClose(editor)) {\n\t\t\treturn false; // no veto\n\t\t}\n\n\t\tif (\n\t\t\teditor instanceof SideBySideEditorInput &&\n\t\t\tthis.model.contains(editor.primary)\n\t\t) {\n\t\t\treturn false; // primary-side of editor is still opened somewhere else\n\t\t}\n\n\t\t// Note: we explicitly decide to ask for confirm if closing a normal editor even\n\t\t// if it is opened in a side-by-side editor in the group. This decision is made\n\t\t// because it may be less obvious that one side of a side by side editor is dirty\n\t\t// and can still be changed.\n\t\t// The only exception is when the same editor is opened on both sides of a side\n\t\t// by side editor (https://github.com/microsoft/vscode/issues/138442)\n\n\t\tif (\n\t\t\tthis.editorPartsView.groups.some((groupView) => {\n\t\t\t\tif (groupView === this) {\n\t\t\t\t\treturn false; // skip (we already handled our group above)\n\t\t\t\t}\n\n\t\t\t\tconst otherGroup = groupView;\n\t\t\t\tif (\n\t\t\t\t\totherGroup.contains(editor, {\n\t\t\t\t\t\tsupportSideBySide: SideBySideEditor.BOTH,\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\treturn true; // exact editor still opened (either single, or split-in-group)\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\teditor instanceof SideBySideEditorInput &&\n\t\t\t\t\totherGroup.contains(editor.primary)\n\t\t\t\t) {\n\t\t\t\t\treturn true; // primary side of side by side editor still opened\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t})\n\t\t) {\n\t\t\treturn false; // editor is still editable somewhere else\n\t\t}\n\n\t\t// In some cases trigger save before opening the dialog depending\n\t\t// on auto-save configuration.\n\t\t// However, make sure to respect `skipAutoSave` option in case the automated\n\t\t// save fails which would result in the editor never closing.\n\t\t// Also, we only do this if no custom confirmation handling is implemented.\n\t\tlet confirmation = ConfirmResult.CANCEL;\n\t\tlet saveReason = SaveReason.EXPLICIT;\n\t\tlet autoSave = false;\n\t\tif (\n\t\t\t!editor.hasCapability(EditorInputCapabilities.Untitled) &&\n\t\t\t!options?.skipAutoSave &&\n\t\t\t!editor.closeHandler\n\t\t) {\n\t\t\t// Auto-save on focus change: save, because a dialog would steal focus\n\t\t\t// (see https://github.com/microsoft/vscode/issues/108752)\n\t\t\tif (\n\t\t\t\tthis.filesConfigurationService.getAutoSaveMode(editor).mode ===\n\t\t\t\tAutoSaveMode.ON_FOCUS_CHANGE\n\t\t\t) {\n\t\t\t\tautoSave = true;\n\t\t\t\tconfirmation = ConfirmResult.SAVE;\n\t\t\t\tsaveReason = SaveReason.FOCUS_CHANGE;\n\t\t\t}\n\n\t\t\t// Auto-save on window change: save, because on Windows and Linux, a\n\t\t\t// native dialog triggers the window focus change\n\t\t\t// (see https://github.com/microsoft/vscode/issues/134250)\n\t\t\telse if (\n\t\t\t\tisNative &&\n\t\t\t\t(isWindows || isLinux) &&\n\t\t\t\tthis.filesConfigurationService.getAutoSaveMode(editor).mode ===\n\t\t\t\t\tAutoSaveMode.ON_WINDOW_CHANGE\n\t\t\t) {\n\t\t\t\tautoSave = true;\n\t\t\t\tconfirmation = ConfirmResult.SAVE;\n\t\t\t\tsaveReason = SaveReason.WINDOW_CHANGE;\n\t\t\t}\n\t\t}\n\n\t\t// No auto-save on focus change or custom confirmation handler: ask user\n\t\tif (!autoSave) {\n\t\t\t// Switch to editor that we want to handle for confirmation unless showing already\n\t\t\tif (!this.activeEditor || !this.activeEditor.matches(editor)) {\n\t\t\t\tawait this.doOpenEditor(editor);\n\t\t\t}\n\n\t\t\t// Ensure our window has focus since we are about to show a dialog\n\t\t\tawait this.hostService.focus(getWindow(this.element));\n\n\t\t\t// Let editor handle confirmation if implemented\n\t\t\tif (typeof editor.closeHandler?.confirm === \"function\") {\n\t\t\t\tconfirmation = await editor.closeHandler.confirm([\n\t\t\t\t\t{ editor, groupId: this.id },\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Show a file specific confirmation\n\t\t\telse {\n\t\t\t\tlet name: string;\n\t\t\t\tif (editor instanceof SideBySideEditorInput) {\n\t\t\t\t\tname = editor.primary.getName(); // prefer shorter names by using primary's name in this case\n\t\t\t\t} else {\n\t\t\t\t\tname = editor.getName();\n\t\t\t\t}\n\n\t\t\t\tconfirmation = await this.fileDialogService.showSaveConfirm([\n\t\t\t\t\tname,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// It could be that the editor's choice of confirmation has changed\n\t\t// given the check for confirmation is long running, so we check\n\t\t// again to see if anything needs to happen before closing for good.\n\t\t// This can happen for example if `autoSave: onFocusChange` is configured\n\t\t// so that the save happens when the dialog opens.\n\t\t// However, we only do this unless a custom confirm handler is installed\n\t\t// that may not be fit to be asked a second time right after.\n\t\tif (!editor.closeHandler && !this.shouldConfirmClose(editor)) {\n\t\t\treturn confirmation === ConfirmResult.CANCEL ? true : false;\n\t\t}\n\n\t\t// Otherwise, handle accordingly\n\t\tswitch (confirmation) {\n\t\t\tcase ConfirmResult.SAVE: {\n\t\t\t\tconst result = await editor.save(this.id, {\n\t\t\t\t\treason: saveReason,\n\t\t\t\t});\n\t\t\t\tif (!result && autoSave) {\n\t\t\t\t\t// Save failed and we need to signal this back to the user, so\n\t\t\t\t\t// we handle the dirty editor again but this time ensuring to\n\t\t\t\t\t// show the confirm dialog\n\t\t\t\t\t// (see https://github.com/microsoft/vscode/issues/108752)\n\t\t\t\t\treturn this.doHandleCloseConfirmation(editor, {\n\t\t\t\t\t\tskipAutoSave: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn editor.isDirty(); // veto if still dirty\n\t\t\t}\n\t\t\tcase ConfirmResult.DONT_SAVE:\n\t\t\t\ttry {\n\t\t\t\t\t// first try a normal revert where the contents of the editor are restored\n\t\t\t\t\tawait editor.revert(this.id);\n\n\t\t\t\t\treturn editor.isDirty(); // veto if still dirty\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\n\t\t\t\t\t// if that fails, since we are about to close the editor, we accept that\n\t\t\t\t\t// the editor cannot be reverted and instead do a soft revert that just\n\t\t\t\t\t// enables us to close the editor. With this, a user can always close a\n\t\t\t\t\t// dirty editor even when reverting fails.\n\n\t\t\t\t\tawait editor.revert(this.id, { soft: true });\n\n\t\t\t\t\treturn editor.isDirty(); // veto if still dirty\n\t\t\t\t}\n\t\t\tcase ConfirmResult.CANCEL:\n\t\t\t\treturn true; // veto\n\t\t}\n\t}\n\n\tprivate shouldConfirmClose(editor: EditorInput): boolean {\n\t\tif (editor.closeHandler) {\n\t\t\treturn editor.closeHandler.showConfirm(); // custom handling of confirmation on close\n\t\t}\n\n\t\treturn editor.isDirty() && !editor.isSaving(); // editor must be dirty and not saving\n\t}\n\n\t//#endregion\n\n\t//#region closeEditors()\n\n\tasync closeEditors(\n\t\targs: EditorInput[] | ICloseEditorsFilter,\n\t\toptions?: ICloseEditorOptions,\n\t): Promise<boolean> {\n\t\tif (this.isEmpty) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst editors = this.doGetEditorsToClose(args);\n\n\t\t// Check for confirmation and veto\n\t\tconst veto = await this.handleCloseConfirmation(editors.slice(0));\n\t\tif (veto) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Do close\n\t\tthis.doCloseEditors(editors, options);\n\n\t\treturn true;\n\t}\n\n\tprivate doGetEditorsToClose(\n\t\targs: EditorInput[] | ICloseEditorsFilter,\n\t): EditorInput[] {\n\t\tif (Array.isArray(args)) {\n\t\t\treturn args;\n\t\t}\n\n\t\tconst filter = args;\n\t\tconst hasDirection = typeof filter.direction === \"number\";\n\n\t\tlet editorsToClose = this.model.getEditors(\n\t\t\thasDirection\n\t\t\t\t? EditorsOrder.SEQUENTIAL\n\t\t\t\t: EditorsOrder.MOST_RECENTLY_ACTIVE,\n\t\t\tfilter,\n\t\t); // in MRU order only if direction is not specified\n\n\t\t// Filter: saved or saving only\n\t\tif (filter.savedOnly) {\n\t\t\teditorsToClose = editorsToClose.filter(\n\t\t\t\t(editor) => !editor.isDirty() || editor.isSaving(),\n\t\t\t);\n\t\t}\n\n\t\t// Filter: direction (left / right)\n\t\telse if (hasDirection && filter.except) {\n\t\t\teditorsToClose =\n\t\t\t\tfilter.direction === CloseDirection.LEFT\n\t\t\t\t\t? editorsToClose.slice(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tthis.model.indexOf(filter.except, editorsToClose),\n\t\t\t\t\t\t)\n\t\t\t\t\t: editorsToClose.slice(\n\t\t\t\t\t\t\tthis.model.indexOf(filter.except, editorsToClose) +\n\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t);\n\t\t}\n\n\t\t// Filter: except\n\t\telse if (filter.except) {\n\t\t\teditorsToClose = editorsToClose.filter(\n\t\t\t\t(editor) => filter.except && !editor.matches(filter.except),\n\t\t\t);\n\t\t}\n\n\t\treturn editorsToClose;\n\t}\n\n\tprivate doCloseEditors(\n\t\teditors: EditorInput[],\n\t\toptions?: ICloseEditorOptions,\n\t): void {\n\t\t// Close all inactive editors first\n\t\tlet closeActiveEditor = false;\n\t\tfor (const editor of editors) {\n\t\t\tif (this.isActive(editor)) {\n\t\t\t\tcloseActiveEditor = true;\n\t\t\t} else {\n\t\t\t\tthis.doCloseInactiveEditor(editor);\n\t\t\t}\n\t\t}\n\n\t\t// Close active editor last if contained in editors list to close\n\t\tif (closeActiveEditor) {\n\t\t\tthis.doCloseActiveEditor(options?.preserveFocus);\n\t\t}\n\n\t\t// Forward to title control\n\t\tif (editors.length) {\n\t\t\tthis.titleControl.closeEditors(editors);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region closeAllEditors()\n\n\tasync closeAllEditors(options?: ICloseAllEditorsOptions): Promise<boolean> {\n\t\tif (this.isEmpty) {\n\t\t\t// If the group is empty and the request is to close all editors, we still close\n\t\t\t// the editor group is the related setting to close empty groups is enabled for\n\t\t\t// a convenient way of removing empty editor groups for the user.\n\t\t\tif (this.groupsView.partOptions.closeEmptyGroups) {\n\t\t\t\tthis.groupsView.removeGroup(this);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Apply the `excludeConfirming` filter if present\n\t\tlet editors = this.model.getEditors(\n\t\t\tEditorsOrder.MOST_RECENTLY_ACTIVE,\n\t\t\toptions,\n\t\t);\n\t\tif (options?.excludeConfirming) {\n\t\t\teditors = editors.filter(\n\t\t\t\t(editor) => !this.shouldConfirmClose(editor),\n\t\t\t);\n\t\t}\n\n\t\t// Check for confirmation and veto\n\t\tconst veto = await this.handleCloseConfirmation(editors);\n\t\tif (veto) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Do close\n\t\tthis.doCloseAllEditors(options);\n\n\t\treturn true;\n\t}\n\n\tprivate doCloseAllEditors(options?: ICloseAllEditorsOptions): void {\n\t\tlet editors = this.model.getEditors(EditorsOrder.SEQUENTIAL, options);\n\t\tif (options?.excludeConfirming) {\n\t\t\teditors = editors.filter(\n\t\t\t\t(editor) => !this.shouldConfirmClose(editor),\n\t\t\t);\n\t\t}\n\n\t\t// Close all inactive editors first\n\t\tconst editorsToClose: EditorInput[] = [];\n\t\tfor (const editor of editors) {\n\t\t\tif (!this.isActive(editor)) {\n\t\t\t\tthis.doCloseInactiveEditor(editor);\n\t\t\t}\n\n\t\t\teditorsToClose.push(editor);\n\t\t}\n\n\t\t// Close active editor last (unless we skip it, e.g. because it is sticky)\n\t\tif (this.activeEditor && editorsToClose.includes(this.activeEditor)) {\n\t\t\tthis.doCloseActiveEditor();\n\t\t}\n\n\t\t// Forward to title control\n\t\tif (editorsToClose.length) {\n\t\t\tthis.titleControl.closeEditors(editorsToClose);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region replaceEditors()\n\n\tasync replaceEditors(editors: EditorReplacement[]): Promise<void> {\n\t\t// Extract active vs. inactive replacements\n\t\tlet activeReplacement: EditorReplacement | undefined;\n\t\tconst inactiveReplacements: EditorReplacement[] = [];\n\t\tfor (let {\n\t\t\teditor,\n\t\t\treplacement,\n\t\t\tforceReplaceDirty,\n\t\t\toptions,\n\t\t} of editors) {\n\t\t\tconst index = this.getIndexOfEditor(editor);\n\t\t\tif (index >= 0) {\n\t\t\t\tconst isActiveEditor = this.isActive(editor);\n\n\t\t\t\t// make sure we respect the index of the editor to replace\n\t\t\t\tif (options) {\n\t\t\t\t\toptions.index = index;\n\t\t\t\t} else {\n\t\t\t\t\toptions = { index };\n\t\t\t\t}\n\n\t\t\t\toptions.inactive = !isActiveEditor;\n\t\t\t\toptions.pinned = options.pinned ?? true; // unless specified, prefer to pin upon replace\n\n\t\t\t\tconst editorToReplace = {\n\t\t\t\t\teditor,\n\t\t\t\t\treplacement,\n\t\t\t\t\tforceReplaceDirty,\n\t\t\t\t\toptions,\n\t\t\t\t};\n\t\t\t\tif (isActiveEditor) {\n\t\t\t\t\tactiveReplacement = editorToReplace;\n\t\t\t\t} else {\n\t\t\t\t\tinactiveReplacements.push(editorToReplace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle inactive first\n\t\tfor (const {\n\t\t\teditor,\n\t\t\treplacement,\n\t\t\tforceReplaceDirty,\n\t\t\toptions,\n\t\t} of inactiveReplacements) {\n\t\t\t// Open inactive editor\n\t\t\tawait this.doOpenEditor(replacement, options);\n\n\t\t\t// Close replaced inactive editor unless they match\n\t\t\tif (!editor.matches(replacement)) {\n\t\t\t\tlet closed = false;\n\t\t\t\tif (forceReplaceDirty) {\n\t\t\t\t\tthis.doCloseEditor(editor, true, {\n\t\t\t\t\t\tcontext: EditorCloseContext.REPLACE,\n\t\t\t\t\t});\n\t\t\t\t\tclosed = true;\n\t\t\t\t} else {\n\t\t\t\t\tclosed = await this.doCloseEditorWithConfirmationHandling(\n\t\t\t\t\t\teditor,\n\t\t\t\t\t\t{ preserveFocus: true },\n\t\t\t\t\t\t{ context: EditorCloseContext.REPLACE },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!closed) {\n\t\t\t\t\treturn; // canceled\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle active last\n\t\tif (activeReplacement) {\n\t\t\t// Open replacement as active editor\n\t\t\tconst openEditorResult = this.doOpenEditor(\n\t\t\t\tactiveReplacement.replacement,\n\t\t\t\tactiveReplacement.options,\n\t\t\t);\n\n\t\t\t// Close replaced active editor unless they match\n\t\t\tif (\n\t\t\t\t!activeReplacement.editor.matches(activeReplacement.replacement)\n\t\t\t) {\n\t\t\t\tif (activeReplacement.forceReplaceDirty) {\n\t\t\t\t\tthis.doCloseEditor(activeReplacement.editor, true, {\n\t\t\t\t\t\tcontext: EditorCloseContext.REPLACE,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tawait this.doCloseEditorWithConfirmationHandling(\n\t\t\t\t\t\tactiveReplacement.editor,\n\t\t\t\t\t\t{ preserveFocus: true },\n\t\t\t\t\t\t{ context: EditorCloseContext.REPLACE },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait openEditorResult;\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Locking\n\n\tget isLocked(): boolean {\n\t\treturn this.model.isLocked;\n\t}\n\n\tlock(locked: boolean): void {\n\t\tthis.model.lock(locked);\n\t}\n\n\t//#endregion\n\n\t//#region Editor Actions\n\n\tcreateEditorActions(disposables: DisposableStore): IActiveEditorActions {\n\t\tconst primary: IAction[] = [];\n\t\tconst secondary: IAction[] = [];\n\n\t\tlet onDidChange;\n\n\t\t// Editor actions require the editor control to be there, so we retrieve it via service\n\t\tconst activeEditorPane = this.activeEditorPane;\n\t\tif (activeEditorPane instanceof EditorPane) {\n\t\t\tconst editorScopedContextKeyService =\n\t\t\t\tactiveEditorPane.scopedContextKeyService ??\n\t\t\t\tthis.scopedContextKeyService;\n\t\t\tconst editorTitleMenu = disposables.add(\n\t\t\t\tthis.menuService.createMenu(\n\t\t\t\t\tMenuId.EditorTitle,\n\t\t\t\t\teditorScopedContextKeyService,\n\t\t\t\t\t{\n\t\t\t\t\t\temitEventsForSubmenuChanges: true,\n\t\t\t\t\t\teventDebounceDelay: 0,\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t\tonDidChange = editorTitleMenu.onDidChange;\n\n\t\t\tconst shouldInlineGroup = (action: SubmenuAction, group: string) =>\n\t\t\t\tgroup === \"navigation\" && action.actions.length <= 1;\n\n\t\t\tcreateAndFillInActionBarActions(\n\t\t\t\teditorTitleMenu,\n\t\t\t\t{ arg: this.resourceContext.get(), shouldForwardArgs: true },\n\t\t\t\t{ primary, secondary },\n\t\t\t\t\"navigation\",\n\t\t\t\tshouldInlineGroup,\n\t\t\t);\n\t\t} else {\n\t\t\t// If there is no active pane in the group (it's the last group and it's empty)\n\t\t\t// Trigger the change event when the active editor changes\n\t\t\tconst _onDidChange = disposables.add(new Emitter<void>());\n\t\t\tonDidChange = _onDidChange.event;\n\t\t\tdisposables.add(\n\t\t\t\tthis.onDidActiveEditorChange(() => _onDidChange.fire()),\n\t\t\t);\n\t\t}\n\n\t\treturn { actions: { primary, secondary }, onDidChange };\n\t}\n\n\t//#endregion\n\n\t//#region Themable\n\n\toverride updateStyles(): void {\n\t\tconst isEmpty = this.isEmpty;\n\n\t\t// Container\n\t\tif (isEmpty) {\n\t\t\tthis.element.style.backgroundColor =\n\t\t\t\tthis.getColor(EDITOR_GROUP_EMPTY_BACKGROUND) || \"\";\n\t\t} else {\n\t\t\tthis.element.style.backgroundColor = \"\";\n\t\t}\n\n\t\t// Title control\n\t\tconst borderColor =\n\t\t\tthis.getColor(EDITOR_GROUP_HEADER_BORDER) ||\n\t\t\tthis.getColor(contrastBorder);\n\t\tif (!isEmpty && borderColor) {\n\t\t\tthis.titleContainer.classList.add(\"title-border-bottom\");\n\t\t\tthis.titleContainer.style.setProperty(\n\t\t\t\t\"--title-border-bottom-color\",\n\t\t\t\tborderColor,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.titleContainer.classList.remove(\"title-border-bottom\");\n\t\t\tthis.titleContainer.style.removeProperty(\n\t\t\t\t\"--title-border-bottom-color\",\n\t\t\t);\n\t\t}\n\n\t\tconst { showTabs } = this.groupsView.partOptions;\n\t\tthis.titleContainer.style.backgroundColor =\n\t\t\tthis.getColor(\n\t\t\t\tshowTabs === \"multiple\"\n\t\t\t\t\t? EDITOR_GROUP_HEADER_TABS_BACKGROUND\n\t\t\t\t\t: EDITOR_GROUP_HEADER_NO_TABS_BACKGROUND,\n\t\t\t) || \"\";\n\n\t\t// Editor container\n\t\tthis.editorContainer.style.backgroundColor =\n\t\t\tthis.getColor(editorBackground) || \"\";\n\t}\n\n\t//#endregion\n\n\t//#region ISerializableView\n\n\treadonly element: HTMLElement = document.createElement(\"div\");\n\n\tget minimumWidth(): number {\n\t\treturn this.editorPane.minimumWidth;\n\t}\n\tget minimumHeight(): number {\n\t\treturn this.editorPane.minimumHeight;\n\t}\n\tget maximumWidth(): number {\n\t\treturn this.editorPane.maximumWidth;\n\t}\n\tget maximumHeight(): number {\n\t\treturn this.editorPane.maximumHeight;\n\t}\n\n\tget proportionalLayout(): boolean {\n\t\tif (!this.lastLayout) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !(\n\t\t\tthis.lastLayout.width === this.minimumWidth ||\n\t\t\tthis.lastLayout.height === this.minimumHeight\n\t\t);\n\t}\n\n\tprivate _onDidChange = this._register(\n\t\tnew Relay<{ width: number; height: number } | undefined>(),\n\t);\n\treadonly onDidChange = this._onDidChange.event;\n\n\tlayout(width: number, height: number, top: number, left: number): void {\n\t\tthis.lastLayout = { width, height, top, left };\n\t\tthis.element.classList.toggle(\"max-height-478px\", height <= 478);\n\n\t\t// Layout the title control first to receive the size it occupies\n\t\tconst titleControlSize = this.titleControl.layout({\n\t\t\tcontainer: new Dimension(width, height),\n\t\t\tavailable: new Dimension(\n\t\t\t\twidth,\n\t\t\t\theight - this.editorPane.minimumHeight,\n\t\t\t),\n\t\t});\n\n\t\t// Update progress bar location\n\t\tthis.progressBar.getContainer().style.top = `${Math.max(this.titleHeight.offset - 2, 0)}px`;\n\n\t\t// Pass the container width and remaining height to the editor layout\n\t\tconst editorHeight = Math.max(0, height - titleControlSize.height);\n\t\tthis.editorContainer.style.height = `${editorHeight}px`;\n\t\tthis.editorPane.layout({\n\t\t\twidth,\n\t\t\theight: editorHeight,\n\t\t\ttop: top + titleControlSize.height,\n\t\t\tleft,\n\t\t});\n\t}\n\n\trelayout(): void {\n\t\tif (this.lastLayout) {\n\t\t\tconst { width, height, top, left } = this.lastLayout;\n\t\t\tthis.layout(width, height, top, left);\n\t\t}\n\t}\n\n\tsetBoundarySashes(sashes: IBoundarySashes): void {\n\t\tthis.editorPane.setBoundarySashes(sashes);\n\t}\n\n\ttoJSON(): ISerializedEditorGroupModel {\n\t\treturn this.model.serialize();\n\t}\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tthis._disposed = true;\n\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface EditorReplacement extends IEditorReplacement {\n\treadonly editor: EditorInput;\n\treadonly replacement: EditorInput;\n\treadonly options?: IEditorOptions;\n}\n"],
  "mappings": "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",
  "names": ["e", "editor"]
}
