{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorDropTarget.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/editordroptarget.css';\nimport { DataTransfers } from '../../../../base/browser/dnd.js';\nimport { addDisposableListener, DragAndDropObserver, EventHelper, EventType, getWindow, isAncestor } from '../../../../base/browser/dom.js';\nimport { renderFormattedText } from '../../../../base/browser/formattedTextRenderer.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { toDisposable } from '../../../../base/common/lifecycle.js';\nimport { isMacintosh, isWeb } from '../../../../base/common/platform.js';\nimport { assertAllDefined, assertIsDefined } from '../../../../base/common/types.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { activeContrastBorder } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService, Themable } from '../../../../platform/theme/common/themeService.js';\nimport { isTemporaryWorkspace, IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { CodeDataTransfers, containsDragType, Extensions as DragAndDropExtensions, IDragAndDropContributionRegistry, LocalSelectionTransfer } from '../../../../platform/dnd/browser/dnd.js';\nimport { DraggedEditorGroupIdentifier, DraggedEditorIdentifier, extractTreeDropData, ResourcesDropHandler } from '../../dnd.js';\nimport { fillActiveEditorViewState, IEditorGroupView } from './editor.js';\nimport { EditorInputCapabilities, IEditorIdentifier, IUntypedEditorInput } from '../../../common/editor.js';\nimport { EDITOR_DRAG_AND_DROP_BACKGROUND, EDITOR_DROP_INTO_PROMPT_BACKGROUND, EDITOR_DROP_INTO_PROMPT_BORDER, EDITOR_DROP_INTO_PROMPT_FOREGROUND } from '../../../common/theme.js';\nimport { GroupDirection, IEditorDropTargetDelegate, IEditorGroup, IEditorGroupsService, IMergeGroupOptions, MergeGroupMode } from '../../../services/editor/common/editorGroupsService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { ITreeViewsDnDService } from '../../../../editor/common/services/treeViewsDndService.js';\nimport { DraggedTreeItemsIdentifier } from '../../../../editor/common/services/treeViewsDnd.js';\n\ninterface IDropOperation {\n\tsplitDirection?: GroupDirection;\n}\n\nfunction isDropIntoEditorEnabledGlobally(configurationService: IConfigurationService) {\n\treturn configurationService.getValue<boolean>('editor.dropIntoEditor.enabled');\n}\n\nfunction isDragIntoEditorEvent(e: DragEvent): boolean {\n\treturn e.shiftKey;\n}\n\nclass DropOverlay extends Themable {\n\n\tprivate static readonly OVERLAY_ID = 'monaco-workbench-editor-drop-overlay';\n\n\tprivate container: HTMLElement | undefined;\n\tprivate overlay: HTMLElement | undefined;\n\tprivate dropIntoPromptElement?: HTMLSpanElement;\n\n\tprivate currentDropOperation: IDropOperation | undefined;\n\n\tprivate _disposed: boolean | undefined;\n\tget disposed(): boolean { return !!this._disposed; }\n\n\tprivate cleanupOverlayScheduler: RunOnceScheduler;\n\n\tprivate readonly editorTransfer = LocalSelectionTransfer.getInstance<DraggedEditorIdentifier>();\n\tprivate readonly groupTransfer = LocalSelectionTransfer.getInstance<DraggedEditorGroupIdentifier>();\n\tprivate readonly treeItemsTransfer = LocalSelectionTransfer.getInstance<DraggedTreeItemsIdentifier>();\n\n\tprivate readonly enableDropIntoEditor: boolean;\n\n\tconstructor(\n\t\tprivate readonly groupView: IEditorGroupView,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@ITreeViewsDnDService private readonly treeViewsDragAndDropService: ITreeViewsDnDService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.cleanupOverlayScheduler = this._register(new RunOnceScheduler(() => this.dispose(), 300));\n\n\t\tthis.enableDropIntoEditor = isDropIntoEditorEnabledGlobally(this.configurationService) && this.isDropIntoActiveEditorEnabled();\n\n\t\tthis.create();\n\t}\n\n\tprivate create(): void {\n\t\tconst overlayOffsetHeight = this.getOverlayOffsetHeight();\n\n\t\t// Container\n\t\tconst container = this.container = document.createElement('div');\n\t\tcontainer.id = DropOverlay.OVERLAY_ID;\n\t\tcontainer.style.top = `${overlayOffsetHeight}px`;\n\n\t\t// Parent\n\t\tthis.groupView.element.appendChild(container);\n\t\tthis.groupView.element.classList.add('dragged-over');\n\t\tthis._register(toDisposable(() => {\n\t\t\tcontainer.remove();\n\t\t\tthis.groupView.element.classList.remove('dragged-over');\n\t\t}));\n\n\t\t// Overlay\n\t\tthis.overlay = document.createElement('div');\n\t\tthis.overlay.classList.add('editor-group-overlay-indicator');\n\t\tcontainer.appendChild(this.overlay);\n\n\t\tif (this.enableDropIntoEditor) {\n\t\t\tthis.dropIntoPromptElement = renderFormattedText(localize('dropIntoEditorPrompt', \"Hold __{0}__ to drop into editor\", isMacintosh ? '\u21E7' : 'Shift'), {});\n\t\t\tthis.dropIntoPromptElement.classList.add('editor-group-overlay-drop-into-prompt');\n\t\t\tthis.overlay.appendChild(this.dropIntoPromptElement);\n\t\t}\n\n\t\t// Overlay Event Handling\n\t\tthis.registerListeners(container);\n\n\t\t// Styles\n\t\tthis.updateStyles();\n\t}\n\n\toverride updateStyles(): void {\n\t\tconst overlay = assertIsDefined(this.overlay);\n\n\t\t// Overlay drop background\n\t\toverlay.style.backgroundColor = this.getColor(EDITOR_DRAG_AND_DROP_BACKGROUND) || '';\n\n\t\t// Overlay contrast border (if any)\n\t\tconst activeContrastBorderColor = this.getColor(activeContrastBorder);\n\t\toverlay.style.outlineColor = activeContrastBorderColor || '';\n\t\toverlay.style.outlineOffset = activeContrastBorderColor ? '-2px' : '';\n\t\toverlay.style.outlineStyle = activeContrastBorderColor ? 'dashed' : '';\n\t\toverlay.style.outlineWidth = activeContrastBorderColor ? '2px' : '';\n\n\t\tif (this.dropIntoPromptElement) {\n\t\t\tthis.dropIntoPromptElement.style.backgroundColor = this.getColor(EDITOR_DROP_INTO_PROMPT_BACKGROUND) ?? '';\n\t\t\tthis.dropIntoPromptElement.style.color = this.getColor(EDITOR_DROP_INTO_PROMPT_FOREGROUND) ?? '';\n\n\t\t\tconst borderColor = this.getColor(EDITOR_DROP_INTO_PROMPT_BORDER);\n\t\t\tif (borderColor) {\n\t\t\t\tthis.dropIntoPromptElement.style.borderWidth = '1px';\n\t\t\t\tthis.dropIntoPromptElement.style.borderStyle = 'solid';\n\t\t\t\tthis.dropIntoPromptElement.style.borderColor = borderColor;\n\t\t\t} else {\n\t\t\t\tthis.dropIntoPromptElement.style.borderWidth = '0';\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerListeners(container: HTMLElement): void {\n\t\tthis._register(new DragAndDropObserver(container, {\n\t\t\tonDragOver: e => {\n\t\t\t\tif (this.enableDropIntoEditor && isDragIntoEditorEvent(e)) {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst isDraggingGroup = this.groupTransfer.hasData(DraggedEditorGroupIdentifier.prototype);\n\t\t\t\tconst isDraggingEditor = this.editorTransfer.hasData(DraggedEditorIdentifier.prototype);\n\n\t\t\t\t// Update the dropEffect to \"copy\" if there is no local data to be dragged because\n\t\t\t\t// in that case we can only copy the data into and not move it from its source\n\t\t\t\tif (!isDraggingEditor && !isDraggingGroup && e.dataTransfer) {\n\t\t\t\t\te.dataTransfer.dropEffect = 'copy';\n\t\t\t\t}\n\n\t\t\t\t// Find out if operation is valid\n\t\t\t\tlet isCopy = true;\n\t\t\t\tif (isDraggingGroup) {\n\t\t\t\t\tisCopy = this.isCopyOperation(e);\n\t\t\t\t} else if (isDraggingEditor) {\n\t\t\t\t\tconst data = this.editorTransfer.getData(DraggedEditorIdentifier.prototype);\n\t\t\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\t\t\tisCopy = this.isCopyOperation(e, data[0].identifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!isCopy) {\n\t\t\t\t\tconst sourceGroupView = this.findSourceGroupView();\n\t\t\t\t\tif (sourceGroupView === this.groupView) {\n\t\t\t\t\t\tif (isDraggingGroup || (isDraggingEditor && sourceGroupView.count < 2)) {\n\t\t\t\t\t\t\tthis.hideOverlay();\n\t\t\t\t\t\t\treturn; // do not allow to drop group/editor on itself if this results in an empty group\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Position overlay and conditionally enable or disable\n\t\t\t\t// editor group splitting support based on setting and\n\t\t\t\t// keymodifiers used.\n\t\t\t\tlet splitOnDragAndDrop = !!this.editorGroupService.partOptions.splitOnDragAndDrop;\n\t\t\t\tif (this.isToggleSplitOperation(e)) {\n\t\t\t\t\tsplitOnDragAndDrop = !splitOnDragAndDrop;\n\t\t\t\t}\n\t\t\t\tthis.positionOverlay(e.offsetX, e.offsetY, isDraggingGroup, splitOnDragAndDrop);\n\n\t\t\t\t// Make sure to stop any running cleanup scheduler to remove the overlay\n\t\t\t\tif (this.cleanupOverlayScheduler.isScheduled()) {\n\t\t\t\t\tthis.cleanupOverlayScheduler.cancel();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tonDragLeave: e => this.dispose(),\n\t\t\tonDragEnd: e => this.dispose(),\n\n\t\t\tonDrop: e => {\n\t\t\t\tEventHelper.stop(e, true);\n\n\t\t\t\t// Dispose overlay\n\t\t\t\tthis.dispose();\n\n\t\t\t\t// Handle drop if we have a valid operation\n\t\t\t\tif (this.currentDropOperation) {\n\t\t\t\t\tthis.handleDrop(e, this.currentDropOperation.splitDirection);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(addDisposableListener(container, EventType.MOUSE_OVER, () => {\n\t\t\t// Under some circumstances we have seen reports where the drop overlay is not being\n\t\t\t// cleaned up and as such the editor area remains under the overlay so that you cannot\n\t\t\t// type into the editor anymore. This seems related to using VMs and DND via host and\n\t\t\t// guest OS, though some users also saw it without VMs.\n\t\t\t// To protect against this issue we always destroy the overlay as soon as we detect a\n\t\t\t// mouse event over it. The delay is used to guarantee we are not interfering with the\n\t\t\t// actual DROP event that can also trigger a mouse over event.\n\t\t\tif (!this.cleanupOverlayScheduler.isScheduled()) {\n\t\t\t\tthis.cleanupOverlayScheduler.schedule();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate isDropIntoActiveEditorEnabled(): boolean {\n\t\treturn !!this.groupView.activeEditor?.hasCapability(EditorInputCapabilities.CanDropIntoEditor);\n\t}\n\n\tprivate findSourceGroupView(): IEditorGroup | undefined {\n\n\t\t// Check for group transfer\n\t\tif (this.groupTransfer.hasData(DraggedEditorGroupIdentifier.prototype)) {\n\t\t\tconst data = this.groupTransfer.getData(DraggedEditorGroupIdentifier.prototype);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\treturn this.editorGroupService.getGroup(data[0].identifier);\n\t\t\t}\n\t\t}\n\n\t\t// Check for editor transfer\n\t\telse if (this.editorTransfer.hasData(DraggedEditorIdentifier.prototype)) {\n\t\t\tconst data = this.editorTransfer.getData(DraggedEditorIdentifier.prototype);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\treturn this.editorGroupService.getGroup(data[0].identifier.groupId);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async handleDrop(event: DragEvent, splitDirection?: GroupDirection): Promise<void> {\n\n\t\t// Determine target group\n\t\tconst ensureTargetGroup = () => {\n\t\t\tlet targetGroup: IEditorGroup;\n\t\t\tif (typeof splitDirection === 'number') {\n\t\t\t\ttargetGroup = this.editorGroupService.addGroup(this.groupView, splitDirection);\n\t\t\t} else {\n\t\t\t\ttargetGroup = this.groupView;\n\t\t\t}\n\n\t\t\treturn targetGroup;\n\t\t};\n\n\t\t// Check for group transfer\n\t\tif (this.groupTransfer.hasData(DraggedEditorGroupIdentifier.prototype)) {\n\t\t\tconst data = this.groupTransfer.getData(DraggedEditorGroupIdentifier.prototype);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\tconst sourceGroup = this.editorGroupService.getGroup(data[0].identifier);\n\t\t\t\tif (sourceGroup) {\n\t\t\t\t\tif (typeof splitDirection !== 'number' && sourceGroup === this.groupView) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Split to new group\n\t\t\t\t\tlet targetGroup: IEditorGroup | undefined;\n\t\t\t\t\tif (typeof splitDirection === 'number') {\n\t\t\t\t\t\tif (this.isCopyOperation(event)) {\n\t\t\t\t\t\t\ttargetGroup = this.editorGroupService.copyGroup(sourceGroup, this.groupView, splitDirection);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetGroup = this.editorGroupService.moveGroup(sourceGroup, this.groupView, splitDirection);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Merge into existing group\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet mergeGroupOptions: IMergeGroupOptions | undefined = undefined;\n\t\t\t\t\t\tif (this.isCopyOperation(event)) {\n\t\t\t\t\t\t\tmergeGroupOptions = { mode: MergeGroupMode.COPY_EDITORS };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.editorGroupService.mergeGroup(sourceGroup, this.groupView, mergeGroupOptions);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetGroup) {\n\t\t\t\t\t\tthis.editorGroupService.activateGroup(targetGroup);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.groupTransfer.clearData(DraggedEditorGroupIdentifier.prototype);\n\t\t\t}\n\t\t}\n\n\t\t// Check for editor transfer\n\t\telse if (this.editorTransfer.hasData(DraggedEditorIdentifier.prototype)) {\n\t\t\tconst data = this.editorTransfer.getData(DraggedEditorIdentifier.prototype);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\tconst draggedEditors = data;\n\t\t\t\tconst firstDraggedEditor = data[0].identifier;\n\n\t\t\t\tconst sourceGroup = this.editorGroupService.getGroup(firstDraggedEditor.groupId);\n\t\t\t\tif (sourceGroup) {\n\t\t\t\t\tconst copyEditor = this.isCopyOperation(event, firstDraggedEditor);\n\t\t\t\t\tlet targetGroup: IEditorGroup | undefined = undefined;\n\n\t\t\t\t\t// Optimization: if we move the last editor of an editor group\n\t\t\t\t\t// and we are configured to close empty editor groups, we can\n\t\t\t\t\t// rather move the entire editor group according to the direction\n\t\t\t\t\tif (this.editorGroupService.partOptions.closeEmptyGroups && sourceGroup.count === 1 && typeof splitDirection === 'number' && !copyEditor) {\n\t\t\t\t\t\ttargetGroup = this.editorGroupService.moveGroup(sourceGroup, this.groupView, splitDirection);\n\t\t\t\t\t}\n\n\t\t\t\t\t// In any other case do a normal move/copy operation\n\t\t\t\t\telse {\n\t\t\t\t\t\ttargetGroup = ensureTargetGroup();\n\t\t\t\t\t\tif (sourceGroup === targetGroup) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst editors = draggedEditors.map(draggedEditor => (\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\teditor: draggedEditor.identifier.editor,\n\t\t\t\t\t\t\t\toptions: fillActiveEditorViewState(sourceGroup, draggedEditor.identifier.editor, {\n\t\t\t\t\t\t\t\t\tpinned: true,\t\t\t\t\t\t\t\t\t\t\t\t\t// always pin dropped editor\n\t\t\t\t\t\t\t\t\tsticky: sourceGroup.isSticky(draggedEditor.identifier.editor)\t// preserve sticky state\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t));\n\n\t\t\t\t\t\tif (!copyEditor) {\n\t\t\t\t\t\t\tsourceGroup.moveEditors(editors, targetGroup);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsourceGroup.copyEditors(editors, targetGroup);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ensure target has focus\n\t\t\t\t\ttargetGroup.focus();\n\t\t\t\t}\n\n\t\t\t\tthis.editorTransfer.clearData(DraggedEditorIdentifier.prototype);\n\t\t\t}\n\t\t}\n\n\t\t// Check for tree items\n\t\telse if (this.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)) {\n\t\t\tconst data = this.treeItemsTransfer.getData(DraggedTreeItemsIdentifier.prototype);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\tconst editors: IUntypedEditorInput[] = [];\n\t\t\t\tfor (const id of data) {\n\t\t\t\t\tconst dataTransferItem = await this.treeViewsDragAndDropService.removeDragOperationTransfer(id.identifier);\n\t\t\t\t\tif (dataTransferItem) {\n\t\t\t\t\t\tconst treeDropData = await extractTreeDropData(dataTransferItem);\n\t\t\t\t\t\teditors.push(...treeDropData.map(editor => ({ ...editor, options: { ...editor.options, pinned: true } })));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (editors.length) {\n\t\t\t\t\tthis.editorService.openEditors(editors, ensureTargetGroup(), { validateTrust: true });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.treeItemsTransfer.clearData(DraggedTreeItemsIdentifier.prototype);\n\t\t}\n\n\t\t// Check for URI transfer\n\t\telse {\n\t\t\tconst dropHandler = this.instantiationService.createInstance(ResourcesDropHandler, { allowWorkspaceOpen: !isWeb || isTemporaryWorkspace(this.contextService.getWorkspace()) });\n\t\t\tdropHandler.handleDrop(event, getWindow(this.groupView.element), () => ensureTargetGroup(), targetGroup => targetGroup?.focus());\n\t\t}\n\t}\n\n\tprivate isCopyOperation(e: DragEvent, draggedEditor?: IEditorIdentifier): boolean {\n\t\tif (draggedEditor?.editor.hasCapability(EditorInputCapabilities.Singleton)) {\n\t\t\treturn false; // Singleton editors cannot be split\n\t\t}\n\n\t\treturn (e.ctrlKey && !isMacintosh) || (e.altKey && isMacintosh);\n\t}\n\n\tprivate isToggleSplitOperation(e: DragEvent): boolean {\n\t\treturn (e.altKey && !isMacintosh) || (e.shiftKey && isMacintosh);\n\t}\n\n\tprivate positionOverlay(mousePosX: number, mousePosY: number, isDraggingGroup: boolean, enableSplitting: boolean): void {\n\t\tconst preferSplitVertically = this.editorGroupService.partOptions.openSideBySideDirection === 'right';\n\n\t\tconst editorControlWidth = this.groupView.element.clientWidth;\n\t\tconst editorControlHeight = this.groupView.element.clientHeight - this.getOverlayOffsetHeight();\n\n\t\tlet edgeWidthThresholdFactor: number;\n\t\tlet edgeHeightThresholdFactor: number;\n\t\tif (enableSplitting) {\n\t\t\tif (isDraggingGroup) {\n\t\t\t\tedgeWidthThresholdFactor = preferSplitVertically ? 0.3 : 0.1; // give larger threshold when dragging group depending on preferred split direction\n\t\t\t} else {\n\t\t\t\tedgeWidthThresholdFactor = 0.1; // 10% threshold to split if dragging editors\n\t\t\t}\n\n\t\t\tif (isDraggingGroup) {\n\t\t\t\tedgeHeightThresholdFactor = preferSplitVertically ? 0.1 : 0.3; // give larger threshold when dragging group depending on preferred split direction\n\t\t\t} else {\n\t\t\t\tedgeHeightThresholdFactor = 0.1; // 10% threshold to split if dragging editors\n\t\t\t}\n\t\t} else {\n\t\t\tedgeWidthThresholdFactor = 0;\n\t\t\tedgeHeightThresholdFactor = 0;\n\t\t}\n\n\t\tconst edgeWidthThreshold = editorControlWidth * edgeWidthThresholdFactor;\n\t\tconst edgeHeightThreshold = editorControlHeight * edgeHeightThresholdFactor;\n\n\t\tconst splitWidthThreshold = editorControlWidth / 3;\t\t// offer to split left/right at 33%\n\t\tconst splitHeightThreshold = editorControlHeight / 3;\t// offer to split up/down at 33%\n\n\t\t// No split if mouse is above certain threshold in the center of the view\n\t\tlet splitDirection: GroupDirection | undefined;\n\t\tif (\n\t\t\tmousePosX > edgeWidthThreshold && mousePosX < editorControlWidth - edgeWidthThreshold &&\n\t\t\tmousePosY > edgeHeightThreshold && mousePosY < editorControlHeight - edgeHeightThreshold\n\t\t) {\n\t\t\tsplitDirection = undefined;\n\t\t}\n\n\t\t// Offer to split otherwise\n\t\telse {\n\n\t\t\t// User prefers to split vertically: offer a larger hitzone\n\t\t\t// for this direction like so:\n\t\t\t// ----------------------------------------------\n\t\t\t// |\t\t|\t\tSPLIT UP\t\t|\t\t\t|\n\t\t\t// | SPLIT \t|-----------------------|\tSPLIT\t|\n\t\t\t// |\t\t|\t\t  MERGE\t\t\t|\t\t\t|\n\t\t\t// | LEFT\t|-----------------------|\tRIGHT\t|\n\t\t\t// |\t\t|\t\tSPLIT DOWN\t\t|\t\t\t|\n\t\t\t// ----------------------------------------------\n\t\t\tif (preferSplitVertically) {\n\t\t\t\tif (mousePosX < splitWidthThreshold) {\n\t\t\t\t\tsplitDirection = GroupDirection.LEFT;\n\t\t\t\t} else if (mousePosX > splitWidthThreshold * 2) {\n\t\t\t\t\tsplitDirection = GroupDirection.RIGHT;\n\t\t\t\t} else if (mousePosY < editorControlHeight / 2) {\n\t\t\t\t\tsplitDirection = GroupDirection.UP;\n\t\t\t\t} else {\n\t\t\t\t\tsplitDirection = GroupDirection.DOWN;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// User prefers to split horizontally: offer a larger hitzone\n\t\t\t// for this direction like so:\n\t\t\t// ----------------------------------------------\n\t\t\t// |\t\t\t\tSPLIT UP\t\t\t\t\t|\n\t\t\t// |--------------------------------------------|\n\t\t\t// |  SPLIT LEFT  |\t   MERGE\t|  SPLIT RIGHT  |\n\t\t\t// |--------------------------------------------|\n\t\t\t// |\t\t\t\tSPLIT DOWN\t\t\t\t\t|\n\t\t\t// ----------------------------------------------\n\t\t\telse {\n\t\t\t\tif (mousePosY < splitHeightThreshold) {\n\t\t\t\t\tsplitDirection = GroupDirection.UP;\n\t\t\t\t} else if (mousePosY > splitHeightThreshold * 2) {\n\t\t\t\t\tsplitDirection = GroupDirection.DOWN;\n\t\t\t\t} else if (mousePosX < editorControlWidth / 2) {\n\t\t\t\t\tsplitDirection = GroupDirection.LEFT;\n\t\t\t\t} else {\n\t\t\t\t\tsplitDirection = GroupDirection.RIGHT;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Draw overlay based on split direction\n\t\tswitch (splitDirection) {\n\t\t\tcase GroupDirection.UP:\n\t\t\t\tthis.doPositionOverlay({ top: '0', left: '0', width: '100%', height: '50%' });\n\t\t\t\tthis.toggleDropIntoPrompt(false);\n\t\t\t\tbreak;\n\t\t\tcase GroupDirection.DOWN:\n\t\t\t\tthis.doPositionOverlay({ top: '50%', left: '0', width: '100%', height: '50%' });\n\t\t\t\tthis.toggleDropIntoPrompt(false);\n\t\t\t\tbreak;\n\t\t\tcase GroupDirection.LEFT:\n\t\t\t\tthis.doPositionOverlay({ top: '0', left: '0', width: '50%', height: '100%' });\n\t\t\t\tthis.toggleDropIntoPrompt(false);\n\t\t\t\tbreak;\n\t\t\tcase GroupDirection.RIGHT:\n\t\t\t\tthis.doPositionOverlay({ top: '0', left: '50%', width: '50%', height: '100%' });\n\t\t\t\tthis.toggleDropIntoPrompt(false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.doPositionOverlay({ top: '0', left: '0', width: '100%', height: '100%' });\n\t\t\t\tthis.toggleDropIntoPrompt(true);\n\t\t}\n\n\t\t// Make sure the overlay is visible now\n\t\tconst overlay = assertIsDefined(this.overlay);\n\t\toverlay.style.opacity = '1';\n\n\t\t// Enable transition after a timeout to prevent initial animation\n\t\tsetTimeout(() => overlay.classList.add('overlay-move-transition'), 0);\n\n\t\t// Remember as current split direction\n\t\tthis.currentDropOperation = { splitDirection };\n\t}\n\n\tprivate doPositionOverlay(options: { top: string; left: string; width: string; height: string }): void {\n\t\tconst [container, overlay] = assertAllDefined(this.container, this.overlay);\n\n\t\t// Container\n\t\tconst offsetHeight = this.getOverlayOffsetHeight();\n\t\tif (offsetHeight) {\n\t\t\tcontainer.style.height = `calc(100% - ${offsetHeight}px)`;\n\t\t} else {\n\t\t\tcontainer.style.height = '100%';\n\t\t}\n\n\t\t// Overlay\n\t\toverlay.style.top = options.top;\n\t\toverlay.style.left = options.left;\n\t\toverlay.style.width = options.width;\n\t\toverlay.style.height = options.height;\n\t}\n\n\tprivate getOverlayOffsetHeight(): number {\n\n\t\t// With tabs and opened editors: use the area below tabs as drop target\n\t\tif (!this.groupView.isEmpty && this.editorGroupService.partOptions.showTabs === 'multiple') {\n\t\t\treturn this.groupView.titleHeight.offset;\n\t\t}\n\n\t\t// Without tabs or empty group: use entire editor area as drop target\n\t\treturn 0;\n\t}\n\n\tprivate hideOverlay(): void {\n\t\tconst overlay = assertIsDefined(this.overlay);\n\n\t\t// Reset overlay\n\t\tthis.doPositionOverlay({ top: '0', left: '0', width: '100%', height: '100%' });\n\t\toverlay.style.opacity = '0';\n\t\toverlay.classList.remove('overlay-move-transition');\n\n\t\t// Reset current operation\n\t\tthis.currentDropOperation = undefined;\n\t}\n\n\tprivate toggleDropIntoPrompt(showing: boolean) {\n\t\tif (!this.dropIntoPromptElement) {\n\t\t\treturn;\n\t\t}\n\t\tthis.dropIntoPromptElement.style.opacity = showing ? '1' : '0';\n\t}\n\n\tcontains(element: HTMLElement): boolean {\n\t\treturn element === this.container || element === this.overlay;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._disposed = true;\n\t}\n}\n\nexport class EditorDropTarget extends Themable {\n\n\tprivate _overlay?: DropOverlay;\n\n\tprivate counter = 0;\n\n\tprivate readonly editorTransfer = LocalSelectionTransfer.getInstance<DraggedEditorIdentifier>();\n\tprivate readonly groupTransfer = LocalSelectionTransfer.getInstance<DraggedEditorGroupIdentifier>();\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly delegate: IEditorDropTargetDelegate,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate get overlay(): DropOverlay | undefined {\n\t\tif (this._overlay && !this._overlay.disposed) {\n\t\t\treturn this._overlay;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(addDisposableListener(this.container, EventType.DRAG_ENTER, e => this.onDragEnter(e)));\n\t\tthis._register(addDisposableListener(this.container, EventType.DRAG_LEAVE, () => this.onDragLeave()));\n\t\tfor (const target of [this.container, getWindow(this.container)]) {\n\t\t\tthis._register(addDisposableListener(target, EventType.DRAG_END, () => this.onDragEnd()));\n\t\t}\n\t}\n\n\tprivate onDragEnter(event: DragEvent): void {\n\t\tif (isDropIntoEditorEnabledGlobally(this.configurationService) && isDragIntoEditorEvent(event)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.counter++;\n\n\t\t// Validate transfer\n\t\tif (\n\t\t\t!this.editorTransfer.hasData(DraggedEditorIdentifier.prototype) &&\n\t\t\t!this.groupTransfer.hasData(DraggedEditorGroupIdentifier.prototype) &&\n\t\t\tevent.dataTransfer\n\t\t) {\n\t\t\tconst dndContributions = Registry.as<IDragAndDropContributionRegistry>(DragAndDropExtensions.DragAndDropContribution).getAll();\n\t\t\tconst dndContributionKeys = Array.from(dndContributions).map(e => e.dataFormatKey);\n\t\t\tif (!containsDragType(event, DataTransfers.FILES, CodeDataTransfers.FILES, DataTransfers.RESOURCES, CodeDataTransfers.EDITORS, ...dndContributionKeys)) { // see https://github.com/microsoft/vscode/issues/25789\n\t\t\t\tevent.dataTransfer.dropEffect = 'none';\n\t\t\t\treturn; // unsupported transfer\n\t\t\t}\n\t\t}\n\n\t\t// Signal DND start\n\t\tthis.updateContainer(true);\n\n\t\tconst target = event.target as HTMLElement;\n\t\tif (target) {\n\n\t\t\t// Somehow we managed to move the mouse quickly out of the current overlay, so destroy it\n\t\t\tif (this.overlay && !this.overlay.contains(target)) {\n\t\t\t\tthis.disposeOverlay();\n\t\t\t}\n\n\t\t\t// Create overlay over target\n\t\t\tif (!this.overlay) {\n\t\t\t\tconst targetGroupView = this.findTargetGroupView(target);\n\t\t\t\tif (targetGroupView) {\n\t\t\t\t\tthis._overlay = this.instantiationService.createInstance(DropOverlay, targetGroupView);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDragLeave(): void {\n\t\tthis.counter--;\n\n\t\tif (this.counter === 0) {\n\t\t\tthis.updateContainer(false);\n\t\t}\n\t}\n\n\tprivate onDragEnd(): void {\n\t\tthis.counter = 0;\n\n\t\tthis.updateContainer(false);\n\t\tthis.disposeOverlay();\n\t}\n\n\tprivate findTargetGroupView(child: HTMLElement): IEditorGroupView | undefined {\n\t\tconst groups = this.editorGroupService.groups as IEditorGroupView[];\n\n\t\treturn groups.find(groupView => isAncestor(child, groupView.element) || this.delegate.containsGroup?.(groupView));\n\t}\n\n\tprivate updateContainer(isDraggedOver: boolean): void {\n\t\tthis.container.classList.toggle('dragged-over', isDraggedOver);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.disposeOverlay();\n\t}\n\n\tprivate disposeOverlay(): void {\n\t\tif (this.overlay) {\n\t\t\tthis.overlay.dispose();\n\t\t\tthis._overlay = undefined;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
