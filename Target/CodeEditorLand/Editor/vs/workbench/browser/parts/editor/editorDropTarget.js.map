{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorDropTarget.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/editordroptarget.css\";\nimport { DataTransfers } from \"../../../../base/browser/dnd.js\";\nimport {\n\tDragAndDropObserver,\n\tEventHelper,\n\tEventType,\n\taddDisposableListener,\n\tgetWindow,\n\tisAncestor,\n} from \"../../../../base/browser/dom.js\";\nimport { renderFormattedText } from \"../../../../base/browser/formattedTextRenderer.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { toDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { isMacintosh, isWeb } from \"../../../../base/common/platform.js\";\nimport {\n\tassertAllDefined,\n\tassertIsDefined,\n} from \"../../../../base/common/types.js\";\nimport { DraggedTreeItemsIdentifier } from \"../../../../editor/common/services/treeViewsDnd.js\";\nimport { ITreeViewsDnDService } from \"../../../../editor/common/services/treeViewsDndService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tCodeDataTransfers,\n\tExtensions as DragAndDropExtensions,\n\ttype IDragAndDropContributionRegistry,\n\tLocalSelectionTransfer,\n\tcontainsDragType,\n} from \"../../../../platform/dnd/browser/dnd.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { activeContrastBorder } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport {\n\tIThemeService,\n\tThemable,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tIWorkspaceContextService,\n\tisTemporaryWorkspace,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tEditorInputCapabilities,\n\ttype IEditorIdentifier,\n\ttype IUntypedEditorInput,\n} from \"../../../common/editor.js\";\nimport {\n\tEDITOR_DRAG_AND_DROP_BACKGROUND,\n\tEDITOR_DROP_INTO_PROMPT_BACKGROUND,\n\tEDITOR_DROP_INTO_PROMPT_BORDER,\n\tEDITOR_DROP_INTO_PROMPT_FOREGROUND,\n} from \"../../../common/theme.js\";\nimport {\n\tGroupDirection,\n\ttype IEditorDropTargetDelegate,\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n\ttype IMergeGroupOptions,\n\tMergeGroupMode,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport {\n\tDraggedEditorGroupIdentifier,\n\tDraggedEditorIdentifier,\n\tResourcesDropHandler,\n\textractTreeDropData,\n} from \"../../dnd.js\";\nimport { type IEditorGroupView, fillActiveEditorViewState } from \"./editor.js\";\n\ninterface IDropOperation {\n\tsplitDirection?: GroupDirection;\n}\n\nfunction isDropIntoEditorEnabledGlobally(\n\tconfigurationService: IConfigurationService,\n) {\n\treturn configurationService.getValue<boolean>(\n\t\t\"editor.dropIntoEditor.enabled\",\n\t);\n}\n\nfunction isDragIntoEditorEvent(e: DragEvent): boolean {\n\treturn e.shiftKey;\n}\n\nclass DropOverlay extends Themable {\n\tprivate static readonly OVERLAY_ID = \"monaco-workbench-editor-drop-overlay\";\n\n\tprivate container: HTMLElement | undefined;\n\tprivate overlay: HTMLElement | undefined;\n\tprivate dropIntoPromptElement?: HTMLSpanElement;\n\n\tprivate currentDropOperation: IDropOperation | undefined;\n\n\tprivate _disposed: boolean | undefined;\n\tget disposed(): boolean {\n\t\treturn !!this._disposed;\n\t}\n\n\tprivate cleanupOverlayScheduler: RunOnceScheduler;\n\n\tprivate readonly editorTransfer =\n\t\tLocalSelectionTransfer.getInstance<DraggedEditorIdentifier>();\n\tprivate readonly groupTransfer =\n\t\tLocalSelectionTransfer.getInstance<DraggedEditorGroupIdentifier>();\n\tprivate readonly treeItemsTransfer =\n\t\tLocalSelectionTransfer.getInstance<DraggedTreeItemsIdentifier>();\n\n\tprivate readonly enableDropIntoEditor: boolean;\n\n\tconstructor(\n\t\tprivate readonly groupView: IEditorGroupView,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@ITreeViewsDnDService private readonly treeViewsDragAndDropService: ITreeViewsDnDService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.cleanupOverlayScheduler = this._register(new RunOnceScheduler(() => this.dispose(), 300));\n\n\t\tthis.enableDropIntoEditor = isDropIntoEditorEnabledGlobally(this.configurationService) && this.isDropIntoActiveEditorEnabled();\n\n\t\tthis.create();\n\t}\n\n\tprivate create(): void {\n\t\tconst overlayOffsetHeight = this.getOverlayOffsetHeight();\n\n\t\t// Container\n\t\tconst container = (this.container = document.createElement(\"div\"));\n\t\tcontainer.id = DropOverlay.OVERLAY_ID;\n\t\tcontainer.style.top = `${overlayOffsetHeight}px`;\n\n\t\t// Parent\n\t\tthis.groupView.element.appendChild(container);\n\t\tthis.groupView.element.classList.add(\"dragged-over\");\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tcontainer.remove();\n\t\t\t\tthis.groupView.element.classList.remove(\"dragged-over\");\n\t\t\t}),\n\t\t);\n\n\t\t// Overlay\n\t\tthis.overlay = document.createElement(\"div\");\n\t\tthis.overlay.classList.add(\"editor-group-overlay-indicator\");\n\t\tcontainer.appendChild(this.overlay);\n\n\t\tif (this.enableDropIntoEditor) {\n\t\t\tthis.dropIntoPromptElement = renderFormattedText(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"dropIntoEditorPrompt\",\n\t\t\t\t\t\"Hold __{0}__ to drop into editor\",\n\t\t\t\t\tisMacintosh ? \"\u21E7\" : \"Shift\",\n\t\t\t\t),\n\t\t\t\t{},\n\t\t\t);\n\t\t\tthis.dropIntoPromptElement.classList.add(\n\t\t\t\t\"editor-group-overlay-drop-into-prompt\",\n\t\t\t);\n\t\t\tthis.overlay.appendChild(this.dropIntoPromptElement);\n\t\t}\n\n\t\t// Overlay Event Handling\n\t\tthis.registerListeners(container);\n\n\t\t// Styles\n\t\tthis.updateStyles();\n\t}\n\n\toverride updateStyles(): void {\n\t\tconst overlay = assertIsDefined(this.overlay);\n\n\t\t// Overlay drop background\n\t\toverlay.style.backgroundColor =\n\t\t\tthis.getColor(EDITOR_DRAG_AND_DROP_BACKGROUND) || \"\";\n\n\t\t// Overlay contrast border (if any)\n\t\tconst activeContrastBorderColor = this.getColor(activeContrastBorder);\n\t\toverlay.style.outlineColor = activeContrastBorderColor || \"\";\n\t\toverlay.style.outlineOffset = activeContrastBorderColor ? \"-2px\" : \"\";\n\t\toverlay.style.outlineStyle = activeContrastBorderColor ? \"dashed\" : \"\";\n\t\toverlay.style.outlineWidth = activeContrastBorderColor ? \"2px\" : \"\";\n\n\t\tif (this.dropIntoPromptElement) {\n\t\t\tthis.dropIntoPromptElement.style.backgroundColor =\n\t\t\t\tthis.getColor(EDITOR_DROP_INTO_PROMPT_BACKGROUND) ?? \"\";\n\t\t\tthis.dropIntoPromptElement.style.color =\n\t\t\t\tthis.getColor(EDITOR_DROP_INTO_PROMPT_FOREGROUND) ?? \"\";\n\n\t\t\tconst borderColor = this.getColor(EDITOR_DROP_INTO_PROMPT_BORDER);\n\t\t\tif (borderColor) {\n\t\t\t\tthis.dropIntoPromptElement.style.borderWidth = \"1px\";\n\t\t\t\tthis.dropIntoPromptElement.style.borderStyle = \"solid\";\n\t\t\t\tthis.dropIntoPromptElement.style.borderColor = borderColor;\n\t\t\t} else {\n\t\t\t\tthis.dropIntoPromptElement.style.borderWidth = \"0\";\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerListeners(container: HTMLElement): void {\n\t\tthis._register(\n\t\t\tnew DragAndDropObserver(container, {\n\t\t\t\tonDragOver: (e) => {\n\t\t\t\t\tif (this.enableDropIntoEditor && isDragIntoEditorEvent(e)) {\n\t\t\t\t\t\tthis.dispose();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isDraggingGroup = this.groupTransfer.hasData(\n\t\t\t\t\t\tDraggedEditorGroupIdentifier.prototype,\n\t\t\t\t\t);\n\t\t\t\t\tconst isDraggingEditor = this.editorTransfer.hasData(\n\t\t\t\t\t\tDraggedEditorIdentifier.prototype,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Update the dropEffect to \"copy\" if there is no local data to be dragged because\n\t\t\t\t\t// in that case we can only copy the data into and not move it from its source\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isDraggingEditor &&\n\t\t\t\t\t\t!isDraggingGroup &&\n\t\t\t\t\t\te.dataTransfer\n\t\t\t\t\t) {\n\t\t\t\t\t\te.dataTransfer.dropEffect = \"copy\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find out if operation is valid\n\t\t\t\t\tlet isCopy = true;\n\t\t\t\t\tif (isDraggingGroup) {\n\t\t\t\t\t\tisCopy = this.isCopyOperation(e);\n\t\t\t\t\t} else if (isDraggingEditor) {\n\t\t\t\t\t\tconst data = this.editorTransfer.getData(\n\t\t\t\t\t\t\tDraggedEditorIdentifier.prototype,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\t\t\t\tisCopy = this.isCopyOperation(\n\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\tdata[0].identifier,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!isCopy) {\n\t\t\t\t\t\tconst sourceGroupView = this.findSourceGroupView();\n\t\t\t\t\t\tif (sourceGroupView === this.groupView) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tisDraggingGroup ||\n\t\t\t\t\t\t\t\t(isDraggingEditor && sourceGroupView.count < 2)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.hideOverlay();\n\t\t\t\t\t\t\t\treturn; // do not allow to drop group/editor on itself if this results in an empty group\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Position overlay and conditionally enable or disable\n\t\t\t\t\t// editor group splitting support based on setting and\n\t\t\t\t\t// keymodifiers used.\n\t\t\t\t\tlet splitOnDragAndDrop =\n\t\t\t\t\t\t!!this.editorGroupService.partOptions\n\t\t\t\t\t\t\t.splitOnDragAndDrop;\n\t\t\t\t\tif (this.isToggleSplitOperation(e)) {\n\t\t\t\t\t\tsplitOnDragAndDrop = !splitOnDragAndDrop;\n\t\t\t\t\t}\n\t\t\t\t\tthis.positionOverlay(\n\t\t\t\t\t\te.offsetX,\n\t\t\t\t\t\te.offsetY,\n\t\t\t\t\t\tisDraggingGroup,\n\t\t\t\t\t\tsplitOnDragAndDrop,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Make sure to stop any running cleanup scheduler to remove the overlay\n\t\t\t\t\tif (this.cleanupOverlayScheduler.isScheduled()) {\n\t\t\t\t\t\tthis.cleanupOverlayScheduler.cancel();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tonDragLeave: (e) => this.dispose(),\n\t\t\t\tonDragEnd: (e) => this.dispose(),\n\n\t\t\t\tonDrop: (e) => {\n\t\t\t\t\tEventHelper.stop(e, true);\n\n\t\t\t\t\t// Dispose overlay\n\t\t\t\t\tthis.dispose();\n\n\t\t\t\t\t// Handle drop if we have a valid operation\n\t\t\t\t\tif (this.currentDropOperation) {\n\t\t\t\t\t\tthis.handleDrop(\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\tthis.currentDropOperation.splitDirection,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\taddDisposableListener(container, EventType.MOUSE_OVER, () => {\n\t\t\t\t// Under some circumstances we have seen reports where the drop overlay is not being\n\t\t\t\t// cleaned up and as such the editor area remains under the overlay so that you cannot\n\t\t\t\t// type into the editor anymore. This seems related to using VMs and DND via host and\n\t\t\t\t// guest OS, though some users also saw it without VMs.\n\t\t\t\t// To protect against this issue we always destroy the overlay as soon as we detect a\n\t\t\t\t// mouse event over it. The delay is used to guarantee we are not interfering with the\n\t\t\t\t// actual DROP event that can also trigger a mouse over event.\n\t\t\t\tif (!this.cleanupOverlayScheduler.isScheduled()) {\n\t\t\t\t\tthis.cleanupOverlayScheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate isDropIntoActiveEditorEnabled(): boolean {\n\t\treturn !!this.groupView.activeEditor?.hasCapability(\n\t\t\tEditorInputCapabilities.CanDropIntoEditor,\n\t\t);\n\t}\n\n\tprivate findSourceGroupView(): IEditorGroup | undefined {\n\t\t// Check for group transfer\n\t\tif (\n\t\t\tthis.groupTransfer.hasData(DraggedEditorGroupIdentifier.prototype)\n\t\t) {\n\t\t\tconst data = this.groupTransfer.getData(\n\t\t\t\tDraggedEditorGroupIdentifier.prototype,\n\t\t\t);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\treturn this.editorGroupService.getGroup(data[0].identifier);\n\t\t\t}\n\t\t}\n\n\t\t// Check for editor transfer\n\t\telse if (\n\t\t\tthis.editorTransfer.hasData(DraggedEditorIdentifier.prototype)\n\t\t) {\n\t\t\tconst data = this.editorTransfer.getData(\n\t\t\t\tDraggedEditorIdentifier.prototype,\n\t\t\t);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\treturn this.editorGroupService.getGroup(\n\t\t\t\t\tdata[0].identifier.groupId,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async handleDrop(\n\t\tevent: DragEvent,\n\t\tsplitDirection?: GroupDirection,\n\t): Promise<void> {\n\t\t// Determine target group\n\t\tconst ensureTargetGroup = () => {\n\t\t\tlet targetGroup: IEditorGroup;\n\t\t\tif (typeof splitDirection === \"number\") {\n\t\t\t\ttargetGroup = this.editorGroupService.addGroup(\n\t\t\t\t\tthis.groupView,\n\t\t\t\t\tsplitDirection,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\ttargetGroup = this.groupView;\n\t\t\t}\n\n\t\t\treturn targetGroup;\n\t\t};\n\n\t\t// Check for group transfer\n\t\tif (\n\t\t\tthis.groupTransfer.hasData(DraggedEditorGroupIdentifier.prototype)\n\t\t) {\n\t\t\tconst data = this.groupTransfer.getData(\n\t\t\t\tDraggedEditorGroupIdentifier.prototype,\n\t\t\t);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\tconst sourceGroup = this.editorGroupService.getGroup(\n\t\t\t\t\tdata[0].identifier,\n\t\t\t\t);\n\t\t\t\tif (sourceGroup) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof splitDirection !== \"number\" &&\n\t\t\t\t\t\tsourceGroup === this.groupView\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Split to new group\n\t\t\t\t\tlet targetGroup: IEditorGroup | undefined;\n\t\t\t\t\tif (typeof splitDirection === \"number\") {\n\t\t\t\t\t\tif (this.isCopyOperation(event)) {\n\t\t\t\t\t\t\ttargetGroup = this.editorGroupService.copyGroup(\n\t\t\t\t\t\t\t\tsourceGroup,\n\t\t\t\t\t\t\t\tthis.groupView,\n\t\t\t\t\t\t\t\tsplitDirection,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetGroup = this.editorGroupService.moveGroup(\n\t\t\t\t\t\t\t\tsourceGroup,\n\t\t\t\t\t\t\t\tthis.groupView,\n\t\t\t\t\t\t\t\tsplitDirection,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Merge into existing group\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet mergeGroupOptions: IMergeGroupOptions | undefined;\n\t\t\t\t\t\tif (this.isCopyOperation(event)) {\n\t\t\t\t\t\t\tmergeGroupOptions = {\n\t\t\t\t\t\t\t\tmode: MergeGroupMode.COPY_EDITORS,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.editorGroupService.mergeGroup(\n\t\t\t\t\t\t\tsourceGroup,\n\t\t\t\t\t\t\tthis.groupView,\n\t\t\t\t\t\t\tmergeGroupOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetGroup) {\n\t\t\t\t\t\tthis.editorGroupService.activateGroup(targetGroup);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.groupTransfer.clearData(\n\t\t\t\t\tDraggedEditorGroupIdentifier.prototype,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Check for editor transfer\n\t\telse if (\n\t\t\tthis.editorTransfer.hasData(DraggedEditorIdentifier.prototype)\n\t\t) {\n\t\t\tconst data = this.editorTransfer.getData(\n\t\t\t\tDraggedEditorIdentifier.prototype,\n\t\t\t);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\tconst draggedEditors = data;\n\t\t\t\tconst firstDraggedEditor = data[0].identifier;\n\n\t\t\t\tconst sourceGroup = this.editorGroupService.getGroup(\n\t\t\t\t\tfirstDraggedEditor.groupId,\n\t\t\t\t);\n\t\t\t\tif (sourceGroup) {\n\t\t\t\t\tconst copyEditor = this.isCopyOperation(\n\t\t\t\t\t\tevent,\n\t\t\t\t\t\tfirstDraggedEditor,\n\t\t\t\t\t);\n\t\t\t\t\tlet targetGroup: IEditorGroup | undefined;\n\n\t\t\t\t\t// Optimization: if we move the last editor of an editor group\n\t\t\t\t\t// and we are configured to close empty editor groups, we can\n\t\t\t\t\t// rather move the entire editor group according to the direction\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.editorGroupService.partOptions.closeEmptyGroups &&\n\t\t\t\t\t\tsourceGroup.count === 1 &&\n\t\t\t\t\t\ttypeof splitDirection === \"number\" &&\n\t\t\t\t\t\t!copyEditor\n\t\t\t\t\t) {\n\t\t\t\t\t\ttargetGroup = this.editorGroupService.moveGroup(\n\t\t\t\t\t\t\tsourceGroup,\n\t\t\t\t\t\t\tthis.groupView,\n\t\t\t\t\t\t\tsplitDirection,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// In any other case do a normal move/copy operation\n\t\t\t\t\telse {\n\t\t\t\t\t\ttargetGroup = ensureTargetGroup();\n\t\t\t\t\t\tif (sourceGroup === targetGroup) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst editors = draggedEditors.map((draggedEditor) => ({\n\t\t\t\t\t\t\teditor: draggedEditor.identifier.editor,\n\t\t\t\t\t\t\toptions: fillActiveEditorViewState(\n\t\t\t\t\t\t\t\tsourceGroup,\n\t\t\t\t\t\t\t\tdraggedEditor.identifier.editor,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpinned: true, // always pin dropped editor\n\t\t\t\t\t\t\t\t\tsticky: sourceGroup.isSticky(\n\t\t\t\t\t\t\t\t\t\tdraggedEditor.identifier.editor,\n\t\t\t\t\t\t\t\t\t), // preserve sticky state\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}));\n\n\t\t\t\t\t\tif (copyEditor) {\n\t\t\t\t\t\t\tsourceGroup.copyEditors(editors, targetGroup);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsourceGroup.moveEditors(editors, targetGroup);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ensure target has focus\n\t\t\t\t\ttargetGroup.focus();\n\t\t\t\t}\n\n\t\t\t\tthis.editorTransfer.clearData(\n\t\t\t\t\tDraggedEditorIdentifier.prototype,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Check for tree items\n\t\telse if (\n\t\t\tthis.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)\n\t\t) {\n\t\t\tconst data = this.treeItemsTransfer.getData(\n\t\t\t\tDraggedTreeItemsIdentifier.prototype,\n\t\t\t);\n\t\t\tif (Array.isArray(data) && data.length > 0) {\n\t\t\t\tconst editors: IUntypedEditorInput[] = [];\n\t\t\t\tfor (const id of data) {\n\t\t\t\t\tconst dataTransferItem =\n\t\t\t\t\t\tawait this.treeViewsDragAndDropService.removeDragOperationTransfer(\n\t\t\t\t\t\t\tid.identifier,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (dataTransferItem) {\n\t\t\t\t\t\tconst treeDropData =\n\t\t\t\t\t\t\tawait extractTreeDropData(dataTransferItem);\n\t\t\t\t\t\teditors.push(\n\t\t\t\t\t\t\t...treeDropData.map((editor) => ({\n\t\t\t\t\t\t\t\t...editor,\n\t\t\t\t\t\t\t\toptions: { ...editor.options, pinned: true },\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (editors.length) {\n\t\t\t\t\tthis.editorService.openEditors(\n\t\t\t\t\t\teditors,\n\t\t\t\t\t\tensureTargetGroup(),\n\t\t\t\t\t\t{ validateTrust: true },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.treeItemsTransfer.clearData(\n\t\t\t\tDraggedTreeItemsIdentifier.prototype,\n\t\t\t);\n\t\t}\n\n\t\t// Check for URI transfer\n\t\telse {\n\t\t\tconst dropHandler = this.instantiationService.createInstance(\n\t\t\t\tResourcesDropHandler,\n\t\t\t\t{\n\t\t\t\t\tallowWorkspaceOpen:\n\t\t\t\t\t\t!isWeb ||\n\t\t\t\t\t\tisTemporaryWorkspace(\n\t\t\t\t\t\t\tthis.contextService.getWorkspace(),\n\t\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t);\n\t\t\tdropHandler.handleDrop(\n\t\t\t\tevent,\n\t\t\t\tgetWindow(this.groupView.element),\n\t\t\t\t() => ensureTargetGroup(),\n\t\t\t\t(targetGroup) => targetGroup?.focus(),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate isCopyOperation(\n\t\te: DragEvent,\n\t\tdraggedEditor?: IEditorIdentifier,\n\t): boolean {\n\t\tif (\n\t\t\tdraggedEditor?.editor.hasCapability(\n\t\t\t\tEditorInputCapabilities.Singleton,\n\t\t\t)\n\t\t) {\n\t\t\treturn false; // Singleton editors cannot be split\n\t\t}\n\n\t\treturn (e.ctrlKey && !isMacintosh) || (e.altKey && isMacintosh);\n\t}\n\n\tprivate isToggleSplitOperation(e: DragEvent): boolean {\n\t\treturn (e.altKey && !isMacintosh) || (e.shiftKey && isMacintosh);\n\t}\n\n\tprivate positionOverlay(\n\t\tmousePosX: number,\n\t\tmousePosY: number,\n\t\tisDraggingGroup: boolean,\n\t\tenableSplitting: boolean,\n\t): void {\n\t\tconst preferSplitVertically =\n\t\t\tthis.editorGroupService.partOptions.openSideBySideDirection ===\n\t\t\t\"right\";\n\n\t\tconst editorControlWidth = this.groupView.element.clientWidth;\n\t\tconst editorControlHeight =\n\t\t\tthis.groupView.element.clientHeight - this.getOverlayOffsetHeight();\n\n\t\tlet edgeWidthThresholdFactor: number;\n\t\tlet edgeHeightThresholdFactor: number;\n\t\tif (enableSplitting) {\n\t\t\tif (isDraggingGroup) {\n\t\t\t\tedgeWidthThresholdFactor = preferSplitVertically ? 0.3 : 0.1; // give larger threshold when dragging group depending on preferred split direction\n\t\t\t} else {\n\t\t\t\tedgeWidthThresholdFactor = 0.1; // 10% threshold to split if dragging editors\n\t\t\t}\n\n\t\t\tif (isDraggingGroup) {\n\t\t\t\tedgeHeightThresholdFactor = preferSplitVertically ? 0.1 : 0.3; // give larger threshold when dragging group depending on preferred split direction\n\t\t\t} else {\n\t\t\t\tedgeHeightThresholdFactor = 0.1; // 10% threshold to split if dragging editors\n\t\t\t}\n\t\t} else {\n\t\t\tedgeWidthThresholdFactor = 0;\n\t\t\tedgeHeightThresholdFactor = 0;\n\t\t}\n\n\t\tconst edgeWidthThreshold =\n\t\t\teditorControlWidth * edgeWidthThresholdFactor;\n\t\tconst edgeHeightThreshold =\n\t\t\teditorControlHeight * edgeHeightThresholdFactor;\n\n\t\tconst splitWidthThreshold = editorControlWidth / 3; // offer to split left/right at 33%\n\t\tconst splitHeightThreshold = editorControlHeight / 3; // offer to split up/down at 33%\n\n\t\t// No split if mouse is above certain threshold in the center of the view\n\t\tlet splitDirection: GroupDirection | undefined;\n\t\tif (\n\t\t\tmousePosX > edgeWidthThreshold &&\n\t\t\tmousePosX < editorControlWidth - edgeWidthThreshold &&\n\t\t\tmousePosY > edgeHeightThreshold &&\n\t\t\tmousePosY < editorControlHeight - edgeHeightThreshold\n\t\t) {\n\t\t\tsplitDirection = undefined;\n\t\t}\n\n\t\t// Offer to split otherwise\n\t\telse {\n\t\t\t// User prefers to split vertically: offer a larger hitzone\n\t\t\t// for this direction like so:\n\t\t\t// ----------------------------------------------\n\t\t\t// |\t\t|\t\tSPLIT UP\t\t|\t\t\t|\n\t\t\t// | SPLIT \t|-----------------------|\tSPLIT\t|\n\t\t\t// |\t\t|\t\t  MERGE\t\t\t|\t\t\t|\n\t\t\t// | LEFT\t|-----------------------|\tRIGHT\t|\n\t\t\t// |\t\t|\t\tSPLIT DOWN\t\t|\t\t\t|\n\t\t\t// ----------------------------------------------\n\t\t\tif (preferSplitVertically) {\n\t\t\t\tif (mousePosX < splitWidthThreshold) {\n\t\t\t\t\tsplitDirection = GroupDirection.LEFT;\n\t\t\t\t} else if (mousePosX > splitWidthThreshold * 2) {\n\t\t\t\t\tsplitDirection = GroupDirection.RIGHT;\n\t\t\t\t} else if (mousePosY < editorControlHeight / 2) {\n\t\t\t\t\tsplitDirection = GroupDirection.UP;\n\t\t\t\t} else {\n\t\t\t\t\tsplitDirection = GroupDirection.DOWN;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// User prefers to split horizontally: offer a larger hitzone\n\t\t\t// for this direction like so:\n\t\t\t// ----------------------------------------------\n\t\t\t// |\t\t\t\tSPLIT UP\t\t\t\t\t|\n\t\t\t// |--------------------------------------------|\n\t\t\t// |  SPLIT LEFT  |\t   MERGE\t|  SPLIT RIGHT  |\n\t\t\t// |--------------------------------------------|\n\t\t\t// |\t\t\t\tSPLIT DOWN\t\t\t\t\t|\n\t\t\t// ----------------------------------------------\n\t\t\telse if (mousePosY < splitHeightThreshold) {\n\t\t\t\tsplitDirection = GroupDirection.UP;\n\t\t\t} else if (mousePosY > splitHeightThreshold * 2) {\n\t\t\t\tsplitDirection = GroupDirection.DOWN;\n\t\t\t} else if (mousePosX < editorControlWidth / 2) {\n\t\t\t\tsplitDirection = GroupDirection.LEFT;\n\t\t\t} else {\n\t\t\t\tsplitDirection = GroupDirection.RIGHT;\n\t\t\t}\n\t\t}\n\n\t\t// Draw overlay based on split direction\n\t\tswitch (splitDirection) {\n\t\t\tcase GroupDirection.UP:\n\t\t\t\tthis.doPositionOverlay({\n\t\t\t\t\ttop: \"0\",\n\t\t\t\t\tleft: \"0\",\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\theight: \"50%\",\n\t\t\t\t});\n\t\t\t\tthis.toggleDropIntoPrompt(false);\n\t\t\t\tbreak;\n\t\t\tcase GroupDirection.DOWN:\n\t\t\t\tthis.doPositionOverlay({\n\t\t\t\t\ttop: \"50%\",\n\t\t\t\t\tleft: \"0\",\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\theight: \"50%\",\n\t\t\t\t});\n\t\t\t\tthis.toggleDropIntoPrompt(false);\n\t\t\t\tbreak;\n\t\t\tcase GroupDirection.LEFT:\n\t\t\t\tthis.doPositionOverlay({\n\t\t\t\t\ttop: \"0\",\n\t\t\t\t\tleft: \"0\",\n\t\t\t\t\twidth: \"50%\",\n\t\t\t\t\theight: \"100%\",\n\t\t\t\t});\n\t\t\t\tthis.toggleDropIntoPrompt(false);\n\t\t\t\tbreak;\n\t\t\tcase GroupDirection.RIGHT:\n\t\t\t\tthis.doPositionOverlay({\n\t\t\t\t\ttop: \"0\",\n\t\t\t\t\tleft: \"50%\",\n\t\t\t\t\twidth: \"50%\",\n\t\t\t\t\theight: \"100%\",\n\t\t\t\t});\n\t\t\t\tthis.toggleDropIntoPrompt(false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.doPositionOverlay({\n\t\t\t\t\ttop: \"0\",\n\t\t\t\t\tleft: \"0\",\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\theight: \"100%\",\n\t\t\t\t});\n\t\t\t\tthis.toggleDropIntoPrompt(true);\n\t\t}\n\n\t\t// Make sure the overlay is visible now\n\t\tconst overlay = assertIsDefined(this.overlay);\n\t\toverlay.style.opacity = \"1\";\n\n\t\t// Enable transition after a timeout to prevent initial animation\n\t\tsetTimeout(() => overlay.classList.add(\"overlay-move-transition\"), 0);\n\n\t\t// Remember as current split direction\n\t\tthis.currentDropOperation = { splitDirection };\n\t}\n\n\tprivate doPositionOverlay(options: {\n\t\ttop: string;\n\t\tleft: string;\n\t\twidth: string;\n\t\theight: string;\n\t}): void {\n\t\tconst [container, overlay] = assertAllDefined(\n\t\t\tthis.container,\n\t\t\tthis.overlay,\n\t\t);\n\n\t\t// Container\n\t\tconst offsetHeight = this.getOverlayOffsetHeight();\n\t\tif (offsetHeight) {\n\t\t\tcontainer.style.height = `calc(100% - ${offsetHeight}px)`;\n\t\t} else {\n\t\t\tcontainer.style.height = \"100%\";\n\t\t}\n\n\t\t// Overlay\n\t\toverlay.style.top = options.top;\n\t\toverlay.style.left = options.left;\n\t\toverlay.style.width = options.width;\n\t\toverlay.style.height = options.height;\n\t}\n\n\tprivate getOverlayOffsetHeight(): number {\n\t\t// With tabs and opened editors: use the area below tabs as drop target\n\t\tif (\n\t\t\t!this.groupView.isEmpty &&\n\t\t\tthis.editorGroupService.partOptions.showTabs === \"multiple\"\n\t\t) {\n\t\t\treturn this.groupView.titleHeight.offset;\n\t\t}\n\n\t\t// Without tabs or empty group: use entire editor area as drop target\n\t\treturn 0;\n\t}\n\n\tprivate hideOverlay(): void {\n\t\tconst overlay = assertIsDefined(this.overlay);\n\n\t\t// Reset overlay\n\t\tthis.doPositionOverlay({\n\t\t\ttop: \"0\",\n\t\t\tleft: \"0\",\n\t\t\twidth: \"100%\",\n\t\t\theight: \"100%\",\n\t\t});\n\t\toverlay.style.opacity = \"0\";\n\t\toverlay.classList.remove(\"overlay-move-transition\");\n\n\t\t// Reset current operation\n\t\tthis.currentDropOperation = undefined;\n\t}\n\n\tprivate toggleDropIntoPrompt(showing: boolean) {\n\t\tif (!this.dropIntoPromptElement) {\n\t\t\treturn;\n\t\t}\n\t\tthis.dropIntoPromptElement.style.opacity = showing ? \"1\" : \"0\";\n\t}\n\n\tcontains(element: HTMLElement): boolean {\n\t\treturn element === this.container || element === this.overlay;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._disposed = true;\n\t}\n}\n\nexport class EditorDropTarget extends Themable {\n\tprivate _overlay?: DropOverlay;\n\n\tprivate counter = 0;\n\n\tprivate readonly editorTransfer =\n\t\tLocalSelectionTransfer.getInstance<DraggedEditorIdentifier>();\n\tprivate readonly groupTransfer =\n\t\tLocalSelectionTransfer.getInstance<DraggedEditorGroupIdentifier>();\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly delegate: IEditorDropTargetDelegate,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate get overlay(): DropOverlay | undefined {\n\t\tif (this._overlay && !this._overlay.disposed) {\n\t\t\treturn this._overlay;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\taddDisposableListener(this.container, EventType.DRAG_ENTER, (e) =>\n\t\t\t\tthis.onDragEnter(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(this.container, EventType.DRAG_LEAVE, () =>\n\t\t\t\tthis.onDragLeave(),\n\t\t\t),\n\t\t);\n\t\tfor (const target of [this.container, getWindow(this.container)]) {\n\t\t\tthis._register(\n\t\t\t\taddDisposableListener(target, EventType.DRAG_END, () =>\n\t\t\t\t\tthis.onDragEnd(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate onDragEnter(event: DragEvent): void {\n\t\tif (\n\t\t\tisDropIntoEditorEnabledGlobally(this.configurationService) &&\n\t\t\tisDragIntoEditorEvent(event)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.counter++;\n\n\t\t// Validate transfer\n\t\tif (\n\t\t\t!this.editorTransfer.hasData(DraggedEditorIdentifier.prototype) &&\n\t\t\t!this.groupTransfer.hasData(\n\t\t\t\tDraggedEditorGroupIdentifier.prototype,\n\t\t\t) &&\n\t\t\tevent.dataTransfer\n\t\t) {\n\t\t\tconst dndContributions =\n\t\t\t\tRegistry.as<IDragAndDropContributionRegistry>(\n\t\t\t\t\tDragAndDropExtensions.DragAndDropContribution,\n\t\t\t\t).getAll();\n\t\t\tconst dndContributionKeys = Array.from(dndContributions).map(\n\t\t\t\t(e) => e.dataFormatKey,\n\t\t\t);\n\t\t\tif (\n\t\t\t\t!containsDragType(\n\t\t\t\t\tevent,\n\t\t\t\t\tDataTransfers.FILES,\n\t\t\t\t\tCodeDataTransfers.FILES,\n\t\t\t\t\tDataTransfers.RESOURCES,\n\t\t\t\t\tCodeDataTransfers.EDITORS,\n\t\t\t\t\t...dndContributionKeys,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// see https://github.com/microsoft/vscode/issues/25789\n\t\t\t\tevent.dataTransfer.dropEffect = \"none\";\n\t\t\t\treturn; // unsupported transfer\n\t\t\t}\n\t\t}\n\n\t\t// Signal DND start\n\t\tthis.updateContainer(true);\n\n\t\tconst target = event.target as HTMLElement;\n\t\tif (target) {\n\t\t\t// Somehow we managed to move the mouse quickly out of the current overlay, so destroy it\n\t\t\tif (this.overlay && !this.overlay.contains(target)) {\n\t\t\t\tthis.disposeOverlay();\n\t\t\t}\n\n\t\t\t// Create overlay over target\n\t\t\tif (!this.overlay) {\n\t\t\t\tconst targetGroupView = this.findTargetGroupView(target);\n\t\t\t\tif (targetGroupView) {\n\t\t\t\t\tthis._overlay = this.instantiationService.createInstance(\n\t\t\t\t\t\tDropOverlay,\n\t\t\t\t\t\ttargetGroupView,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDragLeave(): void {\n\t\tthis.counter--;\n\n\t\tif (this.counter === 0) {\n\t\t\tthis.updateContainer(false);\n\t\t}\n\t}\n\n\tprivate onDragEnd(): void {\n\t\tthis.counter = 0;\n\n\t\tthis.updateContainer(false);\n\t\tthis.disposeOverlay();\n\t}\n\n\tprivate findTargetGroupView(\n\t\tchild: HTMLElement,\n\t): IEditorGroupView | undefined {\n\t\tconst groups = this.editorGroupService.groups as IEditorGroupView[];\n\n\t\treturn groups.find(\n\t\t\t(groupView) =>\n\t\t\t\tisAncestor(child, groupView.element) ||\n\t\t\t\tthis.delegate.containsGroup?.(groupView),\n\t\t);\n\t}\n\n\tprivate updateContainer(isDraggedOver: boolean): void {\n\t\tthis.container.classList.toggle(\"dragged-over\", isDraggedOver);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.disposeOverlay();\n\t}\n\n\tprivate disposeOverlay(): void {\n\t\tif (this.overlay) {\n\t\t\tthis.overlay.dispose();\n\t\t\tthis._overlay = undefined;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
