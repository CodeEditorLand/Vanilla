{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorWithViewState.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\ttype IDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { IExtUri } from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ITextResourceConfigurationService } from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tEditorResourceAccessor,\n\ttype IEditorCloseEvent,\n\ttype IEditorMemento,\n\ttype IEditorOpenContext,\n\tSideBySideEditor,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport {\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { EditorPane } from \"./editorPane.js\";\n\n/**\n * Base class of editors that want to store and restore view state.\n */\nexport abstract class AbstractEditorWithViewState<\n\tT extends object,\n> extends EditorPane {\n\tprivate viewState: IEditorMemento<T>;\n\n\tprivate readonly groupListener = this._register(new MutableDisposable());\n\n\tprivate editorViewStateDisposables:\n\t\t| Map<EditorInput, IDisposable>\n\t\t| undefined;\n\n\tconstructor(\n\t\tid: string,\n\t\tgroup: IEditorGroup,\n\t\tviewStateStorageKey: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService protected readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService protected readonly editorService: IEditorService,\n\t\t@IEditorGroupsService protected readonly editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(id, group, telemetryService, themeService, storageService);\n\n\t\tthis.viewState = this.getEditorMemento<T>(editorGroupService, textResourceConfigurationService, viewStateStorageKey, 100);\n\t}\n\n\tprotected override setEditorVisible(visible: boolean): void {\n\t\t// Listen to close events to trigger `onWillCloseEditorInGroup`\n\t\tthis.groupListener.value = this.group.onWillCloseEditor((e) =>\n\t\t\tthis.onWillCloseEditor(e),\n\t\t);\n\n\t\tsuper.setEditorVisible(visible);\n\t}\n\n\tprivate onWillCloseEditor(e: IEditorCloseEvent): void {\n\t\tconst editor = e.editor;\n\t\tif (editor === this.input) {\n\t\t\t// React to editors closing to preserve or clear view state. This needs to happen\n\t\t\t// in the `onWillCloseEditor` because at that time the editor has not yet\n\t\t\t// been disposed and we can safely persist the view state.\n\t\t\tthis.updateEditorViewState(editor);\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\t\t// Preserve current input view state before clearing\n\t\tthis.updateEditorViewState(this.input);\n\n\t\tsuper.clearInput();\n\t}\n\n\tprotected override saveState(): void {\n\t\t// Preserve current input view state before shutting down\n\t\tthis.updateEditorViewState(this.input);\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate updateEditorViewState(input: EditorInput | undefined): void {\n\t\tif (!input || !this.tracksEditorViewState(input)) {\n\t\t\treturn; // ensure we have an input to handle view state for\n\t\t}\n\n\t\tconst resource = this.toEditorViewStateResource(input);\n\t\tif (!resource) {\n\t\t\treturn; // we need a resource\n\t\t}\n\n\t\t// If we are not tracking disposed editor view state\n\t\t// make sure to clear the view state once the editor\n\t\t// is disposed.\n\t\tif (!this.tracksDisposedEditorViewState()) {\n\t\t\tif (!this.editorViewStateDisposables) {\n\t\t\t\tthis.editorViewStateDisposables = new Map<\n\t\t\t\t\tEditorInput,\n\t\t\t\t\tIDisposable\n\t\t\t\t>();\n\t\t\t}\n\n\t\t\tif (!this.editorViewStateDisposables.has(input)) {\n\t\t\t\tthis.editorViewStateDisposables.set(\n\t\t\t\t\tinput,\n\t\t\t\t\tEvent.once(input.onWillDispose)(() => {\n\t\t\t\t\t\tthis.clearEditorViewState(resource, this.group);\n\t\t\t\t\t\tthis.editorViewStateDisposables?.delete(input);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Clear the editor view state if:\n\t\t// - the editor view state should not be tracked for disposed editors\n\t\t// - the user configured to not restore view state unless the editor is still opened in the group\n\t\tif (\n\t\t\t(input.isDisposed() && !this.tracksDisposedEditorViewState()) ||\n\t\t\t(!this.shouldRestoreEditorViewState(input) &&\n\t\t\t\t!this.group.contains(input))\n\t\t) {\n\t\t\tthis.clearEditorViewState(resource, this.group);\n\t\t}\n\n\t\t// Otherwise we save the view state\n\t\telse if (!input.isDisposed()) {\n\t\t\tthis.saveEditorViewState(resource);\n\t\t}\n\t}\n\n\tprivate shouldRestoreEditorViewState(\n\t\tinput: EditorInput,\n\t\tcontext?: IEditorOpenContext,\n\t): boolean {\n\t\t// new editor: check with workbench.editor.restoreViewState setting\n\t\tif (context?.newInGroup) {\n\t\t\treturn this.textResourceConfigurationService.getValue<boolean>(\n\t\t\t\tEditorResourceAccessor.getOriginalUri(input, {\n\t\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t\t}),\n\t\t\t\t\"workbench.editor.restoreViewState\",\n\t\t\t) === false\n\t\t\t\t? false\n\t\t\t\t: true /* restore by default */;\n\t\t}\n\n\t\t// existing editor: always restore viewstate\n\t\treturn true;\n\t}\n\n\toverride getViewState(): T | undefined {\n\t\tconst input = this.input;\n\t\tif (!input || !this.tracksEditorViewState(input)) {\n\t\t\treturn; // need valid input for view state\n\t\t}\n\n\t\tconst resource = this.toEditorViewStateResource(input);\n\t\tif (!resource) {\n\t\t\treturn; // need a resource for finding view state\n\t\t}\n\n\t\treturn this.computeEditorViewState(resource);\n\t}\n\n\tprivate saveEditorViewState(resource: URI): void {\n\t\tconst editorViewState = this.computeEditorViewState(resource);\n\t\tif (!editorViewState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.viewState.saveEditorState(this.group, resource, editorViewState);\n\t}\n\n\tprotected loadEditorViewState(\n\t\tinput: EditorInput | undefined,\n\t\tcontext?: IEditorOpenContext,\n\t): T | undefined {\n\t\tif (!input) {\n\t\t\treturn undefined; // we need valid input\n\t\t}\n\n\t\tif (!this.tracksEditorViewState(input)) {\n\t\t\treturn undefined; // not tracking for input\n\t\t}\n\n\t\tif (!this.shouldRestoreEditorViewState(input, context)) {\n\t\t\treturn undefined; // not enabled for input\n\t\t}\n\n\t\tconst resource = this.toEditorViewStateResource(input);\n\t\tif (!resource) {\n\t\t\treturn; // need a resource for finding view state\n\t\t}\n\n\t\treturn this.viewState.loadEditorState(this.group, resource);\n\t}\n\n\tprotected moveEditorViewState(\n\t\tsource: URI,\n\t\ttarget: URI,\n\t\tcomparer: IExtUri,\n\t): void {\n\t\treturn this.viewState.moveEditorState(source, target, comparer);\n\t}\n\n\tprotected clearEditorViewState(resource: URI, group?: IEditorGroup): void {\n\t\tthis.viewState.clearEditorState(resource, group);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tif (this.editorViewStateDisposables) {\n\t\t\tfor (const [, disposables] of this.editorViewStateDisposables) {\n\t\t\t\tdisposables.dispose();\n\t\t\t}\n\n\t\t\tthis.editorViewStateDisposables = undefined;\n\t\t}\n\t}\n\n\t//#region Subclasses should/could override based on needs\n\n\t/**\n\t * The actual method to provide for gathering the view state\n\t * object for the control.\n\t *\n\t * @param resource the expected `URI` for the view state. This\n\t * should be used as a way to ensure the view state in the\n\t * editor control is matching the resource expected, for example\n\t * by comparing with the underlying model (this was a fix for\n\t * https://github.com/microsoft/vscode/issues/40114).\n\t */\n\tprotected abstract computeEditorViewState(resource: URI): T | undefined;\n\n\t/**\n\t * Whether view state should be associated with the given input.\n\t * Subclasses need to ensure that the editor input is expected\n\t * for the editor.\n\t */\n\tprotected abstract tracksEditorViewState(input: EditorInput): boolean;\n\n\t/**\n\t * Whether view state should be tracked even when the editor is\n\t * disposed.\n\t *\n\t * Subclasses should override this if the input can be restored\n\t * from the resource at a later point, e.g. if backed by files.\n\t */\n\tprotected tracksDisposedEditorViewState(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Asks to return the `URI` to associate with the view state.\n\t */\n\tprotected abstract toEditorViewStateResource(\n\t\tinput: EditorInput,\n\t): URI | undefined;\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
