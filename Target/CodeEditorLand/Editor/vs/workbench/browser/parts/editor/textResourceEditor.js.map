{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/textResourceEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { ICodeEditor, IPasteEvent } from '../../../../editor/browser/editorBrowser.js';\nimport { IEditorOpenContext, isTextEditorViewState } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { applyTextEditorOptions } from '../../../common/editor/editorOptions.js';\nimport { AbstractTextResourceEditorInput, TextResourceEditorInput } from '../../../common/editor/textResourceEditorInput.js';\nimport { BaseTextEditorModel } from '../../../common/editor/textEditorModel.js';\nimport { UntitledTextEditorInput } from '../../../services/untitled/common/untitledTextEditorInput.js';\nimport { AbstractTextCodeEditor } from './textCodeEditor.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ScrollType, ICodeEditorViewState } from '../../../../editor/common/editorCommon.js';\nimport { IEditorGroup, IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../editor/common/languages/modesRegistry.js';\nimport { EditorOption, IEditorOptions as ICodeEditorOptions } from '../../../../editor/common/config/editorOptions.js';\nimport { ModelConstants } from '../../../../editor/common/model.js';\nimport { ITextEditorOptions } from '../../../../platform/editor/common/editor.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\n\n/**\n * An editor implementation that is capable of showing the contents of resource inputs. Uses\n * the TextEditor widget to show the contents.\n */\nexport abstract class AbstractTextResourceEditor extends AbstractTextCodeEditor<ICodeEditorViewState> {\n\n\tconstructor(\n\t\tid: string,\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper(id, group, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService, fileService);\n\t}\n\n\toverride async setInput(input: AbstractTextResourceEditorInput, options: ITextEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\t\tconst resolvedModel = await input.resolve();\n\n\t\t// Check for cancellation\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Assert Model instance\n\t\tif (!(resolvedModel instanceof BaseTextEditorModel)) {\n\t\t\tthrow new Error('Unable to open file as text');\n\t\t}\n\n\t\t// Set Editor Model\n\t\tconst control = assertIsDefined(this.editorControl);\n\t\tconst textEditorModel = resolvedModel.textEditorModel;\n\t\tcontrol.setModel(textEditorModel);\n\n\t\t// Restore view state (unless provided by options)\n\t\tif (!isTextEditorViewState(options?.viewState)) {\n\t\t\tconst editorViewState = this.loadEditorViewState(input, context);\n\t\t\tif (editorViewState) {\n\t\t\t\tif (options?.selection) {\n\t\t\t\t\teditorViewState.cursorState = []; // prevent duplicate selections via options\n\t\t\t\t}\n\n\t\t\t\tcontrol.restoreViewState(editorViewState);\n\t\t\t}\n\t\t}\n\n\t\t// Apply options to editor if any\n\t\tif (options) {\n\t\t\tapplyTextEditorOptions(options, control, ScrollType.Immediate);\n\t\t}\n\n\t\t// Since the resolved model provides information about being readonly\n\t\t// or not, we apply it here to the editor even though the editor input\n\t\t// was already asked for being readonly or not. The rationale is that\n\t\t// a resolved model might have more specific information about being\n\t\t// readonly or not that the input did not have.\n\t\tcontrol.updateOptions(this.getReadonlyConfiguration(resolvedModel.isReadonly()));\n\t}\n\n\t/**\n\t * Reveals the last line of this editor if it has a model set.\n\t */\n\trevealLastLine(): void {\n\t\tconst control = this.editorControl;\n\t\tif (!control) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = control.getModel();\n\n\t\tif (model) {\n\t\t\tconst lastLine = model.getLineCount();\n\t\t\tcontrol.revealPosition({ lineNumber: lastLine, column: model.getLineMaxColumn(lastLine) }, ScrollType.Smooth);\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\t\tsuper.clearInput();\n\n\t\t// Clear Model\n\t\tthis.editorControl?.setModel(null);\n\t}\n\n\tprotected override tracksEditorViewState(input: EditorInput): boolean {\n\t\t// editor view state persistence is only enabled for untitled and resource inputs\n\t\treturn input instanceof UntitledTextEditorInput || input instanceof TextResourceEditorInput;\n\t}\n}\n\nexport class TextResourceEditor extends AbstractTextResourceEditor {\n\n\tstatic readonly ID = 'workbench.editors.textResourceEditor';\n\n\tconstructor(\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper(TextResourceEditor.ID, group, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService, fileService);\n\t}\n\n\tprotected override createEditorControl(parent: HTMLElement, configuration: ICodeEditorOptions): void {\n\t\tsuper.createEditorControl(parent, configuration);\n\n\t\t// Install a listener for paste to update this editors\n\t\t// language if the paste includes a specific language\n\t\tconst control = this.editorControl;\n\t\tif (control) {\n\t\t\tthis._register(control.onDidPaste(e => this.onDidEditorPaste(e, control)));\n\t\t}\n\t}\n\n\tprivate onDidEditorPaste(e: IPasteEvent, codeEditor: ICodeEditor): void {\n\t\tif (this.input instanceof UntitledTextEditorInput && this.input.hasLanguageSetExplicitly) {\n\t\t\treturn; // do not override language if it was set explicitly\n\t\t}\n\n\t\tif (e.range.startLineNumber !== 1 || e.range.startColumn !== 1) {\n\t\t\treturn; // document had existing content before the pasted text, don't override.\n\t\t}\n\n\t\tif (codeEditor.getOption(EditorOption.readOnly)) {\n\t\t\treturn; // not for readonly editors\n\t\t}\n\n\t\tconst textModel = codeEditor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn; // require a live model\n\t\t}\n\n\t\tconst pasteIsWholeContents = textModel.getLineCount() === e.range.endLineNumber && textModel.getLineMaxColumn(e.range.endLineNumber) === e.range.endColumn;\n\t\tif (!pasteIsWholeContents) {\n\t\t\treturn; // document had existing content after the pasted text, don't override.\n\t\t}\n\n\t\tconst currentLanguageId = textModel.getLanguageId();\n\t\tif (currentLanguageId !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\treturn; // require current languageId to be unspecific\n\t\t}\n\n\t\tlet candidateLanguage: { id: string; source: 'event' | 'guess' } | undefined = undefined;\n\n\t\t// A languageId is provided via the paste event so text was copied using\n\t\t// VSCode. As such we trust this languageId and use it if specific\n\t\tif (e.languageId) {\n\t\t\tcandidateLanguage = { id: e.languageId, source: 'event' };\n\t\t}\n\n\t\t// A languageId was not provided, so the data comes from outside VSCode\n\t\t// We can still try to guess a good languageId from the first line if\n\t\t// the paste changed the first line\n\t\telse {\n\t\t\tconst guess = this.languageService.guessLanguageIdByFilepathOrFirstLine(textModel.uri, textModel.getLineContent(1).substr(0, ModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT)) ?? undefined;\n\t\t\tif (guess) {\n\t\t\t\tcandidateLanguage = { id: guess, source: 'guess' };\n\t\t\t}\n\t\t}\n\n\t\t// Finally apply languageId to model if specified\n\t\tif (candidateLanguage && candidateLanguage.id !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\tif (this.input instanceof UntitledTextEditorInput && candidateLanguage.source === 'event') {\n\t\t\t\t// High confidence, set language id at TextEditorModel level to block future auto-detection\n\t\t\t\tthis.input.setLanguageId(candidateLanguage.id);\n\t\t\t} else {\n\t\t\t\ttextModel.setLanguage(this.languageService.createById(candidateLanguage.id));\n\t\t\t}\n\n\t\t\tconst opts = this.modelService.getCreationOptions(textModel.getLanguageId(), textModel.uri, textModel.isForSimpleWidget);\n\t\t\ttextModel.detectIndentation(opts.insertSpaces, opts.tabSize);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
