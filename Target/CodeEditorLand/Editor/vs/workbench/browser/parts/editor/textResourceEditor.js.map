{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/textResourceEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport type {\n\tICodeEditor,\n\tIPasteEvent,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport {\n\tEditorOption,\n\ttype IEditorOptions as ICodeEditorOptions,\n} from \"../../../../editor/common/config/editorOptions.js\";\nimport {\n\ttype ICodeEditorViewState,\n\tScrollType,\n} from \"../../../../editor/common/editorCommon.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../../../../editor/common/languages/modesRegistry.js\";\nimport { ModelConstants } from \"../../../../editor/common/model.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { ITextResourceConfigurationService } from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport type { ITextEditorOptions } from \"../../../../platform/editor/common/editor.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\ttype IEditorOpenContext,\n\tisTextEditorViewState,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { applyTextEditorOptions } from \"../../../common/editor/editorOptions.js\";\nimport { BaseTextEditorModel } from \"../../../common/editor/textEditorModel.js\";\nimport {\n\ttype AbstractTextResourceEditorInput,\n\tTextResourceEditorInput,\n} from \"../../../common/editor/textResourceEditorInput.js\";\nimport {\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { UntitledTextEditorInput } from \"../../../services/untitled/common/untitledTextEditorInput.js\";\nimport { AbstractTextCodeEditor } from \"./textCodeEditor.js\";\n\n/**\n * An editor implementation that is capable of showing the contents of resource inputs. Uses\n * the TextEditor widget to show the contents.\n */\nexport abstract class AbstractTextResourceEditor extends AbstractTextCodeEditor<ICodeEditorViewState> {\n\tconstructor(\n\t\tid: string,\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t) {\n\t\tsuper(\n\t\t\tid,\n\t\t\tgroup,\n\t\t\ttelemetryService,\n\t\t\tinstantiationService,\n\t\t\tstorageService,\n\t\t\ttextResourceConfigurationService,\n\t\t\tthemeService,\n\t\t\teditorService,\n\t\t\teditorGroupService,\n\t\t\tfileService,\n\t\t);\n\t}\n\n\toverride async setInput(\n\t\tinput: AbstractTextResourceEditorInput,\n\t\toptions: ITextEditorOptions | undefined,\n\t\tcontext: IEditorOpenContext,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\t\tconst resolvedModel = await input.resolve();\n\n\t\t// Check for cancellation\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Assert Model instance\n\t\tif (!(resolvedModel instanceof BaseTextEditorModel)) {\n\t\t\tthrow new Error(\"Unable to open file as text\");\n\t\t}\n\n\t\t// Set Editor Model\n\t\tconst control = assertIsDefined(this.editorControl);\n\t\tconst textEditorModel = resolvedModel.textEditorModel;\n\t\tcontrol.setModel(textEditorModel);\n\n\t\t// Restore view state (unless provided by options)\n\t\tif (!isTextEditorViewState(options?.viewState)) {\n\t\t\tconst editorViewState = this.loadEditorViewState(input, context);\n\t\t\tif (editorViewState) {\n\t\t\t\tif (options?.selection) {\n\t\t\t\t\teditorViewState.cursorState = []; // prevent duplicate selections via options\n\t\t\t\t}\n\n\t\t\t\tcontrol.restoreViewState(editorViewState);\n\t\t\t}\n\t\t}\n\n\t\t// Apply options to editor if any\n\t\tif (options) {\n\t\t\tapplyTextEditorOptions(options, control, ScrollType.Immediate);\n\t\t}\n\n\t\t// Since the resolved model provides information about being readonly\n\t\t// or not, we apply it here to the editor even though the editor input\n\t\t// was already asked for being readonly or not. The rationale is that\n\t\t// a resolved model might have more specific information about being\n\t\t// readonly or not that the input did not have.\n\t\tcontrol.updateOptions(\n\t\t\tthis.getReadonlyConfiguration(resolvedModel.isReadonly()),\n\t\t);\n\t}\n\n\t/**\n\t * Reveals the last line of this editor if it has a model set.\n\t */\n\trevealLastLine(): void {\n\t\tconst control = this.editorControl;\n\t\tif (!control) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = control.getModel();\n\n\t\tif (model) {\n\t\t\tconst lastLine = model.getLineCount();\n\t\t\tcontrol.revealPosition(\n\t\t\t\t{\n\t\t\t\t\tlineNumber: lastLine,\n\t\t\t\t\tcolumn: model.getLineMaxColumn(lastLine),\n\t\t\t\t},\n\t\t\t\tScrollType.Smooth,\n\t\t\t);\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\t\tsuper.clearInput();\n\n\t\t// Clear Model\n\t\tthis.editorControl?.setModel(null);\n\t}\n\n\tprotected override tracksEditorViewState(input: EditorInput): boolean {\n\t\t// editor view state persistence is only enabled for untitled and resource inputs\n\t\treturn (\n\t\t\tinput instanceof UntitledTextEditorInput ||\n\t\t\tinput instanceof TextResourceEditorInput\n\t\t);\n\t}\n}\n\nexport class TextResourceEditor extends AbstractTextResourceEditor {\n\tstatic readonly ID = \"workbench.editors.textResourceEditor\";\n\n\tconstructor(\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper(TextResourceEditor.ID, group, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService, fileService);\n\t}\n\n\tprotected override createEditorControl(\n\t\tparent: HTMLElement,\n\t\tconfiguration: ICodeEditorOptions,\n\t): void {\n\t\tsuper.createEditorControl(parent, configuration);\n\n\t\t// Install a listener for paste to update this editors\n\t\t// language if the paste includes a specific language\n\t\tconst control = this.editorControl;\n\t\tif (control) {\n\t\t\tthis._register(\n\t\t\t\tcontrol.onDidPaste((e) => this.onDidEditorPaste(e, control)),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate onDidEditorPaste(e: IPasteEvent, codeEditor: ICodeEditor): void {\n\t\tif (\n\t\t\tthis.input instanceof UntitledTextEditorInput &&\n\t\t\tthis.input.hasLanguageSetExplicitly\n\t\t) {\n\t\t\treturn; // do not override language if it was set explicitly\n\t\t}\n\n\t\tif (e.range.startLineNumber !== 1 || e.range.startColumn !== 1) {\n\t\t\treturn; // document had existing content before the pasted text, don't override.\n\t\t}\n\n\t\tif (codeEditor.getOption(EditorOption.readOnly)) {\n\t\t\treturn; // not for readonly editors\n\t\t}\n\n\t\tconst textModel = codeEditor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn; // require a live model\n\t\t}\n\n\t\tconst pasteIsWholeContents =\n\t\t\ttextModel.getLineCount() === e.range.endLineNumber &&\n\t\t\ttextModel.getLineMaxColumn(e.range.endLineNumber) ===\n\t\t\t\te.range.endColumn;\n\t\tif (!pasteIsWholeContents) {\n\t\t\treturn; // document had existing content after the pasted text, don't override.\n\t\t}\n\n\t\tconst currentLanguageId = textModel.getLanguageId();\n\t\tif (currentLanguageId !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\treturn; // require current languageId to be unspecific\n\t\t}\n\n\t\tlet candidateLanguage:\n\t\t\t| { id: string; source: \"event\" | \"guess\" }\n\t\t\t| undefined;\n\n\t\t// A languageId is provided via the paste event so text was copied using\n\t\t// VSCode. As such we trust this languageId and use it if specific\n\t\tif (e.languageId) {\n\t\t\tcandidateLanguage = { id: e.languageId, source: \"event\" };\n\t\t}\n\n\t\t// A languageId was not provided, so the data comes from outside VSCode\n\t\t// We can still try to guess a good languageId from the first line if\n\t\t// the paste changed the first line\n\t\telse {\n\t\t\tconst guess =\n\t\t\t\tthis.languageService.guessLanguageIdByFilepathOrFirstLine(\n\t\t\t\t\ttextModel.uri,\n\t\t\t\t\ttextModel\n\t\t\t\t\t\t.getLineContent(1)\n\t\t\t\t\t\t.substr(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT,\n\t\t\t\t\t\t),\n\t\t\t\t) ?? undefined;\n\t\t\tif (guess) {\n\t\t\t\tcandidateLanguage = { id: guess, source: \"guess\" };\n\t\t\t}\n\t\t}\n\n\t\t// Finally apply languageId to model if specified\n\t\tif (\n\t\t\tcandidateLanguage &&\n\t\t\tcandidateLanguage.id !== PLAINTEXT_LANGUAGE_ID\n\t\t) {\n\t\t\tif (\n\t\t\t\tthis.input instanceof UntitledTextEditorInput &&\n\t\t\t\tcandidateLanguage.source === \"event\"\n\t\t\t) {\n\t\t\t\t// High confidence, set language id at TextEditorModel level to block future auto-detection\n\t\t\t\tthis.input.setLanguageId(candidateLanguage.id);\n\t\t\t} else {\n\t\t\t\ttextModel.setLanguage(\n\t\t\t\t\tthis.languageService.createById(candidateLanguage.id),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst opts = this.modelService.getCreationOptions(\n\t\t\t\ttextModel.getLanguageId(),\n\t\t\t\ttextModel.uri,\n\t\t\t\ttextModel.isForSimpleWidget,\n\t\t\t);\n\t\t\ttextModel.detectIndentation(opts.insertSpaces, opts.tabSize);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
