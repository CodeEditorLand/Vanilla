{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/diffEditorCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingsRegistry, KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { TextDiffEditor } from './textDiffEditor.js';\nimport { ActiveCompareEditorCanSwapContext, TextCompareEditorActiveContext, TextCompareEditorVisibleContext } from '../../../common/contextkeys.js';\nimport { DiffEditorInput } from '../../../common/editor/diffEditorInput.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nexport const TOGGLE_DIFF_SIDE_BY_SIDE = 'toggle.diff.renderSideBySide';\nexport const GOTO_NEXT_CHANGE = 'workbench.action.compareEditor.nextChange';\nexport const GOTO_PREVIOUS_CHANGE = 'workbench.action.compareEditor.previousChange';\nexport const DIFF_FOCUS_PRIMARY_SIDE = 'workbench.action.compareEditor.focusPrimarySide';\nexport const DIFF_FOCUS_SECONDARY_SIDE = 'workbench.action.compareEditor.focusSecondarySide';\nexport const DIFF_FOCUS_OTHER_SIDE = 'workbench.action.compareEditor.focusOtherSide';\nexport const DIFF_OPEN_SIDE = 'workbench.action.compareEditor.openSide';\nexport const TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE = 'toggle.diff.ignoreTrimWhitespace';\nexport const DIFF_SWAP_SIDES = 'workbench.action.compareEditor.swapSides';\n\nexport function registerDiffEditorCommands(): void {\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: GOTO_NEXT_CHANGE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: TextCompareEditorVisibleContext,\n\t\tprimary: KeyMod.Alt | KeyCode.F5,\n\t\thandler: (accessor, ...args) => navigateInDiffEditor(accessor, args, true)\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: GOTO_NEXT_CHANGE,\n\t\t\ttitle: localize2('compare.nextChange', 'Go to Next Change'),\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: GOTO_PREVIOUS_CHANGE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: TextCompareEditorVisibleContext,\n\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.F5,\n\t\thandler: (accessor, ...args) => navigateInDiffEditor(accessor, args, false)\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: GOTO_PREVIOUS_CHANGE,\n\t\t\ttitle: localize2('compare.previousChange', 'Go to Previous Change'),\n\t\t}\n\t});\n\n\tfunction getActiveTextDiffEditor(accessor: ServicesAccessor, args: any[]): TextDiffEditor | undefined {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst resource = args.length > 0 && args[0] instanceof URI ? args[0] : undefined;\n\n\t\tfor (const editor of [editorService.activeEditorPane, ...editorService.visibleEditorPanes]) {\n\t\t\tif (editor instanceof TextDiffEditor && (!resource || editor.input instanceof DiffEditorInput && isEqual(editor.input.primary.resource, resource))) {\n\t\t\t\treturn editor;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tfunction navigateInDiffEditor(accessor: ServicesAccessor, args: any[], next: boolean): void {\n\t\tconst activeTextDiffEditor = getActiveTextDiffEditor(accessor, args);\n\n\t\tif (activeTextDiffEditor) {\n\t\t\tactiveTextDiffEditor.getControl()?.goToDiff(next ? 'next' : 'previous');\n\t\t}\n\t}\n\n\tenum FocusTextDiffEditorMode {\n\t\tOriginal,\n\t\tModified,\n\t\tToggle\n\t}\n\n\tfunction focusInDiffEditor(accessor: ServicesAccessor, args: any[], mode: FocusTextDiffEditorMode): void {\n\t\tconst activeTextDiffEditor = getActiveTextDiffEditor(accessor, args);\n\n\t\tif (activeTextDiffEditor) {\n\t\t\tswitch (mode) {\n\t\t\t\tcase FocusTextDiffEditorMode.Original:\n\t\t\t\t\tactiveTextDiffEditor.getControl()?.getOriginalEditor().focus();\n\t\t\t\t\tbreak;\n\t\t\t\tcase FocusTextDiffEditorMode.Modified:\n\t\t\t\t\tactiveTextDiffEditor.getControl()?.getModifiedEditor().focus();\n\t\t\t\t\tbreak;\n\t\t\t\tcase FocusTextDiffEditorMode.Toggle:\n\t\t\t\t\tif (activeTextDiffEditor.getControl()?.getModifiedEditor().hasWidgetFocus()) {\n\t\t\t\t\t\treturn focusInDiffEditor(accessor, args, FocusTextDiffEditorMode.Original);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn focusInDiffEditor(accessor, args, FocusTextDiffEditorMode.Modified);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction toggleDiffSideBySide(accessor: ServicesAccessor, args: any[]): void {\n\t\tconst configService = accessor.get(ITextResourceConfigurationService);\n\t\tconst activeTextDiffEditor = getActiveTextDiffEditor(accessor, args);\n\n\t\tconst m = activeTextDiffEditor?.getControl()?.getModifiedEditor()?.getModel();\n\t\tif (!m) { return; }\n\n\t\tconst key = 'diffEditor.renderSideBySide';\n\t\tconst val = configService.getValue(m.uri, key);\n\t\tconfigService.updateValue(m.uri, key, !val);\n\t}\n\n\tfunction toggleDiffIgnoreTrimWhitespace(accessor: ServicesAccessor, args: any[]): void {\n\t\tconst configService = accessor.get(ITextResourceConfigurationService);\n\t\tconst activeTextDiffEditor = getActiveTextDiffEditor(accessor, args);\n\n\t\tconst m = activeTextDiffEditor?.getControl()?.getModifiedEditor()?.getModel();\n\t\tif (!m) { return; }\n\n\t\tconst key = 'diffEditor.ignoreTrimWhitespace';\n\t\tconst val = configService.getValue(m.uri, key);\n\t\tconfigService.updateValue(m.uri, key, !val);\n\t}\n\n\tasync function swapDiffSides(accessor: ServicesAccessor, args: any[]): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\tconst diffEditor = getActiveTextDiffEditor(accessor, args);\n\t\tconst activeGroup = diffEditor?.group;\n\t\tconst diffInput = diffEditor?.input;\n\t\tif (!diffEditor || typeof activeGroup === 'undefined' || !(diffInput instanceof DiffEditorInput) || !diffInput.modified.resource) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst untypedDiffInput = diffInput.toUntyped({ preserveViewState: activeGroup.id, preserveResource: true });\n\t\tif (!untypedDiffInput) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we are about to replace the diff editor, make\n\t\t// sure to first open the modified side if it is not\n\t\t// yet opened. This ensures that the swapping is not\n\t\t// bringing up a confirmation dialog to save.\n\t\tif (diffInput.modified.isModified() && editorService.findEditors({ resource: diffInput.modified.resource, typeId: diffInput.modified.typeId, editorId: diffInput.modified.editorId }).length === 0) {\n\t\t\tawait editorService.openEditor({\n\t\t\t\t...untypedDiffInput.modified,\n\t\t\t\toptions: {\n\t\t\t\t\t...untypedDiffInput.modified.options,\n\t\t\t\t\tpinned: true,\n\t\t\t\t\tinactive: true\n\t\t\t\t}\n\t\t\t}, activeGroup);\n\t\t}\n\n\t\t// Replace the input with the swapped variant\n\t\tawait editorService.replaceEditors([\n\t\t\t{\n\t\t\t\teditor: diffInput,\n\t\t\t\treplacement: {\n\t\t\t\t\t...untypedDiffInput,\n\t\t\t\t\toriginal: untypedDiffInput.modified,\n\t\t\t\t\tmodified: untypedDiffInput.original,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\t...untypedDiffInput.options,\n\t\t\t\t\t\tpinned: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t], activeGroup);\n\t}\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_DIFF_SIDE_BY_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) => toggleDiffSideBySide(accessor, args)\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: DIFF_FOCUS_PRIMARY_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) => focusInDiffEditor(accessor, args, FocusTextDiffEditorMode.Modified)\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: DIFF_FOCUS_SECONDARY_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) => focusInDiffEditor(accessor, args, FocusTextDiffEditorMode.Original)\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: DIFF_FOCUS_OTHER_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) => focusInDiffEditor(accessor, args, FocusTextDiffEditorMode.Toggle)\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) => toggleDiffIgnoreTrimWhitespace(accessor, args)\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: DIFF_SWAP_SIDES,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) => swapDiffSides(accessor, args)\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: TOGGLE_DIFF_SIDE_BY_SIDE,\n\t\t\ttitle: localize2('toggleInlineView', \"Toggle Inline View\"),\n\t\t\tcategory: localize('compare', \"Compare\")\n\t\t},\n\t\twhen: TextCompareEditorActiveContext\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: DIFF_SWAP_SIDES,\n\t\t\ttitle: localize2('swapDiffSides', \"Swap Left and Right Editor Side\"),\n\t\t\tcategory: localize('compare', \"Compare\")\n\t\t},\n\t\twhen: ContextKeyExpr.and(TextCompareEditorActiveContext, ActiveCompareEditorCanSwapContext)\n\t});\n}\n"],
  "mappings": "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",
  "names": ["FocusTextDiffEditorMode"]
}
