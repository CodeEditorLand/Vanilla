{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/diffEditorCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport { isEqual } from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { ITextResourceConfigurationService } from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport {\n\tActiveCompareEditorCanSwapContext,\n\tTextCompareEditorActiveContext,\n\tTextCompareEditorVisibleContext,\n} from \"../../../common/contextkeys.js\";\nimport { DiffEditorInput } from \"../../../common/editor/diffEditorInput.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { TextDiffEditor } from \"./textDiffEditor.js\";\n\nexport const TOGGLE_DIFF_SIDE_BY_SIDE = \"toggle.diff.renderSideBySide\";\nexport const GOTO_NEXT_CHANGE = \"workbench.action.compareEditor.nextChange\";\nexport const GOTO_PREVIOUS_CHANGE =\n\t\"workbench.action.compareEditor.previousChange\";\nexport const DIFF_FOCUS_PRIMARY_SIDE =\n\t\"workbench.action.compareEditor.focusPrimarySide\";\nexport const DIFF_FOCUS_SECONDARY_SIDE =\n\t\"workbench.action.compareEditor.focusSecondarySide\";\nexport const DIFF_FOCUS_OTHER_SIDE =\n\t\"workbench.action.compareEditor.focusOtherSide\";\nexport const DIFF_OPEN_SIDE = \"workbench.action.compareEditor.openSide\";\nexport const TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE =\n\t\"toggle.diff.ignoreTrimWhitespace\";\nexport const DIFF_SWAP_SIDES = \"workbench.action.compareEditor.swapSides\";\n\nexport function registerDiffEditorCommands(): void {\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: GOTO_NEXT_CHANGE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: TextCompareEditorVisibleContext,\n\t\tprimary: KeyMod.Alt | KeyCode.F5,\n\t\thandler: (accessor, ...args) =>\n\t\t\tnavigateInDiffEditor(accessor, args, true),\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: GOTO_NEXT_CHANGE,\n\t\t\ttitle: localize2(\"compare.nextChange\", \"Go to Next Change\"),\n\t\t},\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: GOTO_PREVIOUS_CHANGE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: TextCompareEditorVisibleContext,\n\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.F5,\n\t\thandler: (accessor, ...args) =>\n\t\t\tnavigateInDiffEditor(accessor, args, false),\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: GOTO_PREVIOUS_CHANGE,\n\t\t\ttitle: localize2(\"compare.previousChange\", \"Go to Previous Change\"),\n\t\t},\n\t});\n\n\tfunction getActiveTextDiffEditor(\n\t\taccessor: ServicesAccessor,\n\t\targs: any[],\n\t): TextDiffEditor | undefined {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst resource =\n\t\t\targs.length > 0 && args[0] instanceof URI ? args[0] : undefined;\n\n\t\tfor (const editor of [\n\t\t\teditorService.activeEditorPane,\n\t\t\t...editorService.visibleEditorPanes,\n\t\t]) {\n\t\t\tif (\n\t\t\t\teditor instanceof TextDiffEditor &&\n\t\t\t\t(!resource ||\n\t\t\t\t\t(editor.input instanceof DiffEditorInput &&\n\t\t\t\t\t\tisEqual(editor.input.primary.resource, resource)))\n\t\t\t) {\n\t\t\t\treturn editor;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tfunction navigateInDiffEditor(\n\t\taccessor: ServicesAccessor,\n\t\targs: any[],\n\t\tnext: boolean,\n\t): void {\n\t\tconst activeTextDiffEditor = getActiveTextDiffEditor(accessor, args);\n\n\t\tif (activeTextDiffEditor) {\n\t\t\tactiveTextDiffEditor\n\t\t\t\t.getControl()\n\t\t\t\t?.goToDiff(next ? \"next\" : \"previous\");\n\t\t}\n\t}\n\n\tenum FocusTextDiffEditorMode {\n\t\tOriginal = 0,\n\t\tModified = 1,\n\t\tToggle = 2,\n\t}\n\n\tfunction focusInDiffEditor(\n\t\taccessor: ServicesAccessor,\n\t\targs: any[],\n\t\tmode: FocusTextDiffEditorMode,\n\t): void {\n\t\tconst activeTextDiffEditor = getActiveTextDiffEditor(accessor, args);\n\n\t\tif (activeTextDiffEditor) {\n\t\t\tswitch (mode) {\n\t\t\t\tcase FocusTextDiffEditorMode.Original:\n\t\t\t\t\tactiveTextDiffEditor\n\t\t\t\t\t\t.getControl()\n\t\t\t\t\t\t?.getOriginalEditor()\n\t\t\t\t\t\t.focus();\n\t\t\t\t\tbreak;\n\t\t\t\tcase FocusTextDiffEditorMode.Modified:\n\t\t\t\t\tactiveTextDiffEditor\n\t\t\t\t\t\t.getControl()\n\t\t\t\t\t\t?.getModifiedEditor()\n\t\t\t\t\t\t.focus();\n\t\t\t\t\tbreak;\n\t\t\t\tcase FocusTextDiffEditorMode.Toggle:\n\t\t\t\t\tif (\n\t\t\t\t\t\tactiveTextDiffEditor\n\t\t\t\t\t\t\t.getControl()\n\t\t\t\t\t\t\t?.getModifiedEditor()\n\t\t\t\t\t\t\t.hasWidgetFocus()\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn focusInDiffEditor(\n\t\t\t\t\t\t\taccessor,\n\t\t\t\t\t\t\targs,\n\t\t\t\t\t\t\tFocusTextDiffEditorMode.Original,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn focusInDiffEditor(\n\t\t\t\t\t\t\taccessor,\n\t\t\t\t\t\t\targs,\n\t\t\t\t\t\t\tFocusTextDiffEditorMode.Modified,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction toggleDiffSideBySide(\n\t\taccessor: ServicesAccessor,\n\t\targs: any[],\n\t): void {\n\t\tconst configService = accessor.get(ITextResourceConfigurationService);\n\t\tconst activeTextDiffEditor = getActiveTextDiffEditor(accessor, args);\n\n\t\tconst m = activeTextDiffEditor\n\t\t\t?.getControl()\n\t\t\t?.getModifiedEditor()\n\t\t\t?.getModel();\n\t\tif (!m) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst key = \"diffEditor.renderSideBySide\";\n\t\tconst val = configService.getValue(m.uri, key);\n\t\tconfigService.updateValue(m.uri, key, !val);\n\t}\n\n\tfunction toggleDiffIgnoreTrimWhitespace(\n\t\taccessor: ServicesAccessor,\n\t\targs: any[],\n\t): void {\n\t\tconst configService = accessor.get(ITextResourceConfigurationService);\n\t\tconst activeTextDiffEditor = getActiveTextDiffEditor(accessor, args);\n\n\t\tconst m = activeTextDiffEditor\n\t\t\t?.getControl()\n\t\t\t?.getModifiedEditor()\n\t\t\t?.getModel();\n\t\tif (!m) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst key = \"diffEditor.ignoreTrimWhitespace\";\n\t\tconst val = configService.getValue(m.uri, key);\n\t\tconfigService.updateValue(m.uri, key, !val);\n\t}\n\n\tasync function swapDiffSides(\n\t\taccessor: ServicesAccessor,\n\t\targs: any[],\n\t): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\tconst diffEditor = getActiveTextDiffEditor(accessor, args);\n\t\tconst activeGroup = diffEditor?.group;\n\t\tconst diffInput = diffEditor?.input;\n\t\tif (\n\t\t\t!diffEditor ||\n\t\t\ttypeof activeGroup === \"undefined\" ||\n\t\t\t!(diffInput instanceof DiffEditorInput) ||\n\t\t\t!diffInput.modified.resource\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst untypedDiffInput = diffInput.toUntyped({\n\t\t\tpreserveViewState: activeGroup.id,\n\t\t\tpreserveResource: true,\n\t\t});\n\t\tif (!untypedDiffInput) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we are about to replace the diff editor, make\n\t\t// sure to first open the modified side if it is not\n\t\t// yet opened. This ensures that the swapping is not\n\t\t// bringing up a confirmation dialog to save.\n\t\tif (\n\t\t\tdiffInput.modified.isModified() &&\n\t\t\teditorService.findEditors({\n\t\t\t\tresource: diffInput.modified.resource,\n\t\t\t\ttypeId: diffInput.modified.typeId,\n\t\t\t\teditorId: diffInput.modified.editorId,\n\t\t\t}).length === 0\n\t\t) {\n\t\t\tawait editorService.openEditor(\n\t\t\t\t{\n\t\t\t\t\t...untypedDiffInput.modified,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\t...untypedDiffInput.modified.options,\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\tinactive: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tactiveGroup,\n\t\t\t);\n\t\t}\n\n\t\t// Replace the input with the swapped variant\n\t\tawait editorService.replaceEditors(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\teditor: diffInput,\n\t\t\t\t\treplacement: {\n\t\t\t\t\t\t...untypedDiffInput,\n\t\t\t\t\t\toriginal: untypedDiffInput.modified,\n\t\t\t\t\t\tmodified: untypedDiffInput.original,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t...untypedDiffInput.options,\n\t\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tactiveGroup,\n\t\t);\n\t}\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_DIFF_SIDE_BY_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) => toggleDiffSideBySide(accessor, args),\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: DIFF_FOCUS_PRIMARY_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) =>\n\t\t\tfocusInDiffEditor(accessor, args, FocusTextDiffEditorMode.Modified),\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: DIFF_FOCUS_SECONDARY_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) =>\n\t\t\tfocusInDiffEditor(accessor, args, FocusTextDiffEditorMode.Original),\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: DIFF_FOCUS_OTHER_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) =>\n\t\t\tfocusInDiffEditor(accessor, args, FocusTextDiffEditorMode.Toggle),\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) =>\n\t\t\ttoggleDiffIgnoreTrimWhitespace(accessor, args),\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: DIFF_SWAP_SIDES,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, ...args) => swapDiffSides(accessor, args),\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: TOGGLE_DIFF_SIDE_BY_SIDE,\n\t\t\ttitle: localize2(\"toggleInlineView\", \"Toggle Inline View\"),\n\t\t\tcategory: localize(\"compare\", \"Compare\"),\n\t\t},\n\t\twhen: TextCompareEditorActiveContext,\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: DIFF_SWAP_SIDES,\n\t\t\ttitle: localize2(\n\t\t\t\t\"swapDiffSides\",\n\t\t\t\t\"Swap Left and Right Editor Side\",\n\t\t\t),\n\t\t\tcategory: localize(\"compare\", \"Compare\"),\n\t\t},\n\t\twhen: ContextKeyExpr.and(\n\t\t\tTextCompareEditorActiveContext,\n\t\t\tActiveCompareEditorCanSwapContext,\n\t\t),\n\t});\n}\n"],
  "mappings": "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",
  "names": ["FocusTextDiffEditorMode"]
}
