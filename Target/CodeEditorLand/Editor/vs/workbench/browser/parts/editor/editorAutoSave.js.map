{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorAutoSave.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IMarkerService } from \"../../../../platform/markers/common/markers.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tEditorInputCapabilities,\n\ttype GroupIdentifier,\n\ttype IEditorIdentifier,\n\tSaveReason,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { IEditorGroupsService } from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport {\n\tAutoSaveDisabledReason,\n\tAutoSaveMode,\n\tIFilesConfigurationService,\n} from \"../../../services/filesConfiguration/common/filesConfigurationService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport {\n\ttype IWorkingCopy,\n\tWorkingCopyCapabilities,\n} from \"../../../services/workingCopy/common/workingCopy.js\";\nimport { IWorkingCopyService } from \"../../../services/workingCopy/common/workingCopyService.js\";\n\nexport class EditorAutoSave\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.editorAutoSave\";\n\n\t// Auto save: after delay\n\tprivate readonly scheduledAutoSavesAfterDelay = new Map<\n\t\tIWorkingCopy,\n\t\tIDisposable\n\t>();\n\n\t// Auto save: focus change & window change\n\tprivate lastActiveEditor: EditorInput | undefined = undefined;\n\tprivate lastActiveGroupId: GroupIdentifier | undefined = undefined;\n\tprivate readonly lastActiveEditorControlDisposable = this._register(\n\t\tnew DisposableStore(),\n\t);\n\n\t// Auto save: waiting on specific condition\n\tprivate readonly waitingOnConditionAutoSaveWorkingCopies = new ResourceMap<{\n\t\treadonly workingCopy: IWorkingCopy;\n\t\treadonly reason: SaveReason;\n\t\tcondition: AutoSaveDisabledReason;\n\t}>((resource) => this.uriIdentityService.extUri.getComparisonKey(resource));\n\tprivate readonly waitingOnConditionAutoSaveEditors = new ResourceMap<{\n\t\treadonly editor: IEditorIdentifier;\n\t\treadonly reason: SaveReason;\n\t\tcondition: AutoSaveDisabledReason;\n\t}>((resource) => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tconstructor(\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\t// Fill in initial dirty working copies\n\t\tfor (const dirtyWorkingCopy of this.workingCopyService.dirtyWorkingCopies) {\n\t\t\tthis.onDidRegister(dirtyWorkingCopy);\n\t\t}\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.hostService.onDidChangeFocus((focused) =>\n\t\t\t\tthis.onWindowFocusChange(focused),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.hostService.onDidChangeActiveWindow(() =>\n\t\t\t\tthis.onActiveWindowChange(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editorService.onDidActiveEditorChange(() =>\n\t\t\t\tthis.onDidActiveEditorChange(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.filesConfigurationService.onDidChangeAutoSaveConfiguration(\n\t\t\t\t() => this.onDidChangeAutoSaveConfiguration(),\n\t\t\t),\n\t\t);\n\n\t\t// Working Copy events\n\t\tthis._register(\n\t\t\tthis.workingCopyService.onDidRegister((workingCopy) =>\n\t\t\t\tthis.onDidRegister(workingCopy),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workingCopyService.onDidUnregister((workingCopy) =>\n\t\t\t\tthis.onDidUnregister(workingCopy),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workingCopyService.onDidChangeDirty((workingCopy) =>\n\t\t\t\tthis.onDidChangeDirty(workingCopy),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workingCopyService.onDidChangeContent((workingCopy) =>\n\t\t\t\tthis.onDidChangeContent(workingCopy),\n\t\t\t),\n\t\t);\n\n\t\t// Condition changes\n\t\tthis._register(\n\t\t\tthis.markerService.onMarkerChanged((e) =>\n\t\t\t\tthis.onConditionChanged(e, AutoSaveDisabledReason.ERRORS),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.filesConfigurationService.onDidChangeAutoSaveDisabled(\n\t\t\t\t(resource) =>\n\t\t\t\t\tthis.onConditionChanged(\n\t\t\t\t\t\t[resource],\n\t\t\t\t\t\tAutoSaveDisabledReason.DISABLED,\n\t\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onConditionChanged(\n\t\tresources: readonly URI[],\n\t\tcondition:\n\t\t\t| AutoSaveDisabledReason.ERRORS\n\t\t\t| AutoSaveDisabledReason.DISABLED,\n\t): void {\n\t\tfor (const resource of resources) {\n\t\t\t// Waiting working copies\n\t\t\tconst workingCopyResult =\n\t\t\t\tthis.waitingOnConditionAutoSaveWorkingCopies.get(resource);\n\t\t\tif (workingCopyResult?.condition === condition) {\n\t\t\t\tif (\n\t\t\t\t\tworkingCopyResult.workingCopy.isDirty() &&\n\t\t\t\t\tthis.filesConfigurationService.getAutoSaveMode(\n\t\t\t\t\t\tworkingCopyResult.workingCopy.resource,\n\t\t\t\t\t\tworkingCopyResult.reason,\n\t\t\t\t\t).mode !== AutoSaveMode.OFF\n\t\t\t\t) {\n\t\t\t\t\tthis.discardAutoSave(workingCopyResult.workingCopy);\n\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`[editor auto save] running auto save from condition change event`,\n\t\t\t\t\t\tworkingCopyResult.workingCopy.resource.toString(),\n\t\t\t\t\t\tworkingCopyResult.workingCopy.typeId,\n\t\t\t\t\t);\n\t\t\t\t\tworkingCopyResult.workingCopy.save({\n\t\t\t\t\t\treason: workingCopyResult.reason,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Waiting editors\n\t\t\telse {\n\t\t\t\tconst editorResult =\n\t\t\t\t\tthis.waitingOnConditionAutoSaveEditors.get(resource);\n\t\t\t\tif (\n\t\t\t\t\teditorResult?.condition === condition &&\n\t\t\t\t\t!editorResult.editor.editor.isDisposed() &&\n\t\t\t\t\teditorResult.editor.editor.isDirty() &&\n\t\t\t\t\tthis.filesConfigurationService.getAutoSaveMode(\n\t\t\t\t\t\teditorResult.editor.editor,\n\t\t\t\t\t\teditorResult.reason,\n\t\t\t\t\t).mode !== AutoSaveMode.OFF\n\t\t\t\t) {\n\t\t\t\t\tthis.waitingOnConditionAutoSaveEditors.delete(resource);\n\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`[editor auto save] running auto save from condition change event with reason ${editorResult.reason}`,\n\t\t\t\t\t);\n\t\t\t\t\tthis.editorService.save(editorResult.editor, {\n\t\t\t\t\t\treason: editorResult.reason,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onWindowFocusChange(focused: boolean): void {\n\t\tif (!focused) {\n\t\t\tthis.maybeTriggerAutoSave(SaveReason.WINDOW_CHANGE);\n\t\t}\n\t}\n\n\tprivate onActiveWindowChange(): void {\n\t\tthis.maybeTriggerAutoSave(SaveReason.WINDOW_CHANGE);\n\t}\n\n\tprivate onDidActiveEditorChange(): void {\n\t\t// Treat editor change like a focus change for our last active editor if any\n\t\tif (\n\t\t\tthis.lastActiveEditor &&\n\t\t\ttypeof this.lastActiveGroupId === \"number\"\n\t\t) {\n\t\t\tthis.maybeTriggerAutoSave(SaveReason.FOCUS_CHANGE, {\n\t\t\t\tgroupId: this.lastActiveGroupId,\n\t\t\t\teditor: this.lastActiveEditor,\n\t\t\t});\n\t\t}\n\n\t\t// Remember as last active\n\t\tconst activeGroup = this.editorGroupService.activeGroup;\n\t\tconst activeEditor = (this.lastActiveEditor =\n\t\t\tactiveGroup.activeEditor ?? undefined);\n\t\tthis.lastActiveGroupId = activeGroup.id;\n\n\t\t// Dispose previous active control listeners\n\t\tthis.lastActiveEditorControlDisposable.clear();\n\n\t\t// Listen to focus changes on control for auto save\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tif (activeEditor && activeEditorPane) {\n\t\t\tthis.lastActiveEditorControlDisposable.add(\n\t\t\t\tactiveEditorPane.onDidBlur(() => {\n\t\t\t\t\tthis.maybeTriggerAutoSave(SaveReason.FOCUS_CHANGE, {\n\t\t\t\t\t\tgroupId: activeGroup.id,\n\t\t\t\t\t\teditor: activeEditor,\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate maybeTriggerAutoSave(\n\t\treason: SaveReason.WINDOW_CHANGE | SaveReason.FOCUS_CHANGE,\n\t\teditorIdentifier?: IEditorIdentifier,\n\t): void {\n\t\tif (editorIdentifier) {\n\t\t\tif (\n\t\t\t\t!editorIdentifier.editor.isDirty() ||\n\t\t\t\teditorIdentifier.editor.isReadonly() ||\n\t\t\t\teditorIdentifier.editor.hasCapability(\n\t\t\t\t\tEditorInputCapabilities.Untitled,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn; // no auto save for non-dirty, readonly or untitled editors\n\t\t\t}\n\n\t\t\tconst autoSaveMode = this.filesConfigurationService.getAutoSaveMode(\n\t\t\t\teditorIdentifier.editor,\n\t\t\t\treason,\n\t\t\t);\n\t\t\tif (autoSaveMode.mode !== AutoSaveMode.OFF) {\n\t\t\t\t// Determine if we need to save all. In case of a window focus change we also save if\n\t\t\t\t// auto save mode is configured to be ON_FOCUS_CHANGE (editor focus change)\n\t\t\t\tif (\n\t\t\t\t\t(reason === SaveReason.WINDOW_CHANGE &&\n\t\t\t\t\t\t(autoSaveMode.mode === AutoSaveMode.ON_FOCUS_CHANGE ||\n\t\t\t\t\t\t\tautoSaveMode.mode ===\n\t\t\t\t\t\t\t\tAutoSaveMode.ON_WINDOW_CHANGE)) ||\n\t\t\t\t\t(reason === SaveReason.FOCUS_CHANGE &&\n\t\t\t\t\t\tautoSaveMode.mode === AutoSaveMode.ON_FOCUS_CHANGE)\n\t\t\t\t) {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`[editor auto save] triggering auto save with reason ${reason}`,\n\t\t\t\t\t);\n\t\t\t\t\tthis.editorService.save(editorIdentifier, { reason });\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\teditorIdentifier.editor.resource &&\n\t\t\t\t(autoSaveMode.reason === AutoSaveDisabledReason.ERRORS ||\n\t\t\t\t\tautoSaveMode.reason === AutoSaveDisabledReason.DISABLED)\n\t\t\t) {\n\t\t\t\tthis.waitingOnConditionAutoSaveEditors.set(\n\t\t\t\t\teditorIdentifier.editor.resource,\n\t\t\t\t\t{\n\t\t\t\t\t\teditor: editorIdentifier,\n\t\t\t\t\t\treason,\n\t\t\t\t\t\tcondition: autoSaveMode.reason,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.saveAllDirtyAutoSaveables(reason);\n\t\t}\n\t}\n\n\tprivate onDidChangeAutoSaveConfiguration(): void {\n\t\t// Trigger a save-all when auto save is enabled\n\t\tlet reason: SaveReason | undefined;\n\t\tswitch (\n\t\t\tthis.filesConfigurationService.getAutoSaveMode(undefined).mode\n\t\t) {\n\t\t\tcase AutoSaveMode.ON_FOCUS_CHANGE:\n\t\t\t\treason = SaveReason.FOCUS_CHANGE;\n\t\t\t\tbreak;\n\t\t\tcase AutoSaveMode.ON_WINDOW_CHANGE:\n\t\t\t\treason = SaveReason.WINDOW_CHANGE;\n\t\t\t\tbreak;\n\t\t\tcase AutoSaveMode.AFTER_SHORT_DELAY:\n\t\t\tcase AutoSaveMode.AFTER_LONG_DELAY:\n\t\t\t\treason = SaveReason.AUTO;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (reason) {\n\t\t\tthis.saveAllDirtyAutoSaveables(reason);\n\t\t}\n\t}\n\n\tprivate saveAllDirtyAutoSaveables(reason: SaveReason): void {\n\t\tfor (const workingCopy of this.workingCopyService.dirtyWorkingCopies) {\n\t\t\tif (workingCopy.capabilities & WorkingCopyCapabilities.Untitled) {\n\t\t\t\tcontinue; // we never auto save untitled working copies\n\t\t\t}\n\n\t\t\tconst autoSaveMode = this.filesConfigurationService.getAutoSaveMode(\n\t\t\t\tworkingCopy.resource,\n\t\t\t\treason,\n\t\t\t);\n\t\t\tif (autoSaveMode.mode !== AutoSaveMode.OFF) {\n\t\t\t\tworkingCopy.save({ reason });\n\t\t\t} else if (\n\t\t\t\tautoSaveMode.reason === AutoSaveDisabledReason.ERRORS ||\n\t\t\t\tautoSaveMode.reason === AutoSaveDisabledReason.DISABLED\n\t\t\t) {\n\t\t\t\tthis.waitingOnConditionAutoSaveWorkingCopies.set(\n\t\t\t\t\tworkingCopy.resource,\n\t\t\t\t\t{ workingCopy, reason, condition: autoSaveMode.reason },\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRegister(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate onDidUnregister(workingCopy: IWorkingCopy): void {\n\t\tthis.discardAutoSave(workingCopy);\n\t}\n\n\tprivate onDidChangeDirty(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t} else {\n\t\t\tthis.discardAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate onDidChangeContent(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\t// this listener will make sure that the auto save is\n\t\t\t// pushed out for as long as the user is still changing\n\t\t\t// the content of the working copy.\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate scheduleAutoSave(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.capabilities & WorkingCopyCapabilities.Untitled) {\n\t\t\treturn; // we never auto save untitled working copies\n\t\t}\n\n\t\tconst autoSaveAfterDelay =\n\t\t\tthis.filesConfigurationService.getAutoSaveConfiguration(\n\t\t\t\tworkingCopy.resource,\n\t\t\t).autoSaveDelay;\n\t\tif (typeof autoSaveAfterDelay !== \"number\") {\n\t\t\treturn; // auto save after delay must be enabled\n\t\t}\n\n\t\t// Clear any running auto save operation\n\t\tthis.discardAutoSave(workingCopy);\n\n\t\tthis.logService.trace(\n\t\t\t`[editor auto save] scheduling auto save after ${autoSaveAfterDelay}ms`,\n\t\t\tworkingCopy.resource.toString(),\n\t\t\tworkingCopy.typeId,\n\t\t);\n\n\t\t// Schedule new auto save\n\t\tconst handle = setTimeout(() => {\n\t\t\t// Clear pending\n\t\t\tthis.discardAutoSave(workingCopy);\n\n\t\t\t// Save if dirty and unless prevented by other conditions such as error markers\n\t\t\tif (workingCopy.isDirty()) {\n\t\t\t\tconst reason = SaveReason.AUTO;\n\t\t\t\tconst autoSaveMode =\n\t\t\t\t\tthis.filesConfigurationService.getAutoSaveMode(\n\t\t\t\t\t\tworkingCopy.resource,\n\t\t\t\t\t\treason,\n\t\t\t\t\t);\n\t\t\t\tif (autoSaveMode.mode !== AutoSaveMode.OFF) {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`[editor auto save] running auto save`,\n\t\t\t\t\t\tworkingCopy.resource.toString(),\n\t\t\t\t\t\tworkingCopy.typeId,\n\t\t\t\t\t);\n\t\t\t\t\tworkingCopy.save({ reason });\n\t\t\t\t} else if (\n\t\t\t\t\tautoSaveMode.reason === AutoSaveDisabledReason.ERRORS ||\n\t\t\t\t\tautoSaveMode.reason === AutoSaveDisabledReason.DISABLED\n\t\t\t\t) {\n\t\t\t\t\tthis.waitingOnConditionAutoSaveWorkingCopies.set(\n\t\t\t\t\t\tworkingCopy.resource,\n\t\t\t\t\t\t{ workingCopy, reason, condition: autoSaveMode.reason },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}, autoSaveAfterDelay);\n\n\t\t// Keep in map for disposal as needed\n\t\tthis.scheduledAutoSavesAfterDelay.set(\n\t\t\tworkingCopy,\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`[editor auto save] clearing pending auto save`,\n\t\t\t\t\tworkingCopy.resource.toString(),\n\t\t\t\t\tworkingCopy.typeId,\n\t\t\t\t);\n\n\t\t\t\tclearTimeout(handle);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate discardAutoSave(workingCopy: IWorkingCopy): void {\n\t\tdispose(this.scheduledAutoSavesAfterDelay.get(workingCopy));\n\t\tthis.scheduledAutoSavesAfterDelay.delete(workingCopy);\n\n\t\tthis.waitingOnConditionAutoSaveWorkingCopies.delete(\n\t\t\tworkingCopy.resource,\n\t\t);\n\t\tthis.waitingOnConditionAutoSaveEditors.delete(workingCopy.resource);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
