{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorAutoSave.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { Disposable, DisposableStore, IDisposable, dispose, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IFilesConfigurationService, AutoSaveMode, AutoSaveDisabledReason } from '../../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { SaveReason, IEditorIdentifier, GroupIdentifier, EditorInputCapabilities } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { IWorkingCopyService } from '../../../services/workingCopy/common/workingCopyService.js';\nimport { IWorkingCopy, WorkingCopyCapabilities } from '../../../services/workingCopy/common/workingCopy.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IMarkerService } from '../../../../platform/markers/common/markers.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\n\nexport class EditorAutoSave extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.editorAutoSave';\n\n\t// Auto save: after delay\n\tprivate readonly scheduledAutoSavesAfterDelay = new Map<IWorkingCopy, IDisposable>();\n\n\t// Auto save: focus change & window change\n\tprivate lastActiveEditor: EditorInput | undefined = undefined;\n\tprivate lastActiveGroupId: GroupIdentifier | undefined = undefined;\n\tprivate readonly lastActiveEditorControlDisposable = this._register(new DisposableStore());\n\n\t// Auto save: waiting on specific condition\n\tprivate readonly waitingOnConditionAutoSaveWorkingCopies = new ResourceMap<{ readonly workingCopy: IWorkingCopy; readonly reason: SaveReason; condition: AutoSaveDisabledReason }>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\tprivate readonly waitingOnConditionAutoSaveEditors = new ResourceMap<{ readonly editor: IEditorIdentifier; readonly reason: SaveReason; condition: AutoSaveDisabledReason }>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tconstructor(\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\t// Fill in initial dirty working copies\n\t\tfor (const dirtyWorkingCopy of this.workingCopyService.dirtyWorkingCopies) {\n\t\t\tthis.onDidRegister(dirtyWorkingCopy);\n\t\t}\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.hostService.onDidChangeFocus(focused => this.onWindowFocusChange(focused)));\n\t\tthis._register(this.hostService.onDidChangeActiveWindow(() => this.onActiveWindowChange()));\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.onDidActiveEditorChange()));\n\t\tthis._register(this.filesConfigurationService.onDidChangeAutoSaveConfiguration(() => this.onDidChangeAutoSaveConfiguration()));\n\n\t\t// Working Copy events\n\t\tthis._register(this.workingCopyService.onDidRegister(workingCopy => this.onDidRegister(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidUnregister(workingCopy => this.onDidUnregister(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidChangeDirty(workingCopy => this.onDidChangeDirty(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidChangeContent(workingCopy => this.onDidChangeContent(workingCopy)));\n\n\t\t// Condition changes\n\t\tthis._register(this.markerService.onMarkerChanged(e => this.onConditionChanged(e, AutoSaveDisabledReason.ERRORS)));\n\t\tthis._register(this.filesConfigurationService.onDidChangeAutoSaveDisabled(resource => this.onConditionChanged([resource], AutoSaveDisabledReason.DISABLED)));\n\t}\n\n\tprivate onConditionChanged(resources: readonly URI[], condition: AutoSaveDisabledReason.ERRORS | AutoSaveDisabledReason.DISABLED): void {\n\t\tfor (const resource of resources) {\n\n\t\t\t// Waiting working copies\n\t\t\tconst workingCopyResult = this.waitingOnConditionAutoSaveWorkingCopies.get(resource);\n\t\t\tif (workingCopyResult?.condition === condition) {\n\t\t\t\tif (\n\t\t\t\t\tworkingCopyResult.workingCopy.isDirty() &&\n\t\t\t\t\tthis.filesConfigurationService.getAutoSaveMode(workingCopyResult.workingCopy.resource, workingCopyResult.reason).mode !== AutoSaveMode.OFF\n\t\t\t\t) {\n\t\t\t\t\tthis.discardAutoSave(workingCopyResult.workingCopy);\n\n\t\t\t\t\tthis.logService.trace(`[editor auto save] running auto save from condition change event`, workingCopyResult.workingCopy.resource.toString(), workingCopyResult.workingCopy.typeId);\n\t\t\t\t\tworkingCopyResult.workingCopy.save({ reason: workingCopyResult.reason });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Waiting editors\n\t\t\telse {\n\t\t\t\tconst editorResult = this.waitingOnConditionAutoSaveEditors.get(resource);\n\t\t\t\tif (\n\t\t\t\t\teditorResult?.condition === condition &&\n\t\t\t\t\t!editorResult.editor.editor.isDisposed() &&\n\t\t\t\t\teditorResult.editor.editor.isDirty() &&\n\t\t\t\t\tthis.filesConfigurationService.getAutoSaveMode(editorResult.editor.editor, editorResult.reason).mode !== AutoSaveMode.OFF\n\t\t\t\t) {\n\t\t\t\t\tthis.waitingOnConditionAutoSaveEditors.delete(resource);\n\n\t\t\t\t\tthis.logService.trace(`[editor auto save] running auto save from condition change event with reason ${editorResult.reason}`);\n\t\t\t\t\tthis.editorService.save(editorResult.editor, { reason: editorResult.reason });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onWindowFocusChange(focused: boolean): void {\n\t\tif (!focused) {\n\t\t\tthis.maybeTriggerAutoSave(SaveReason.WINDOW_CHANGE);\n\t\t}\n\t}\n\n\tprivate onActiveWindowChange(): void {\n\t\tthis.maybeTriggerAutoSave(SaveReason.WINDOW_CHANGE);\n\t}\n\n\tprivate onDidActiveEditorChange(): void {\n\n\t\t// Treat editor change like a focus change for our last active editor if any\n\t\tif (this.lastActiveEditor && typeof this.lastActiveGroupId === 'number') {\n\t\t\tthis.maybeTriggerAutoSave(SaveReason.FOCUS_CHANGE, { groupId: this.lastActiveGroupId, editor: this.lastActiveEditor });\n\t\t}\n\n\t\t// Remember as last active\n\t\tconst activeGroup = this.editorGroupService.activeGroup;\n\t\tconst activeEditor = this.lastActiveEditor = activeGroup.activeEditor ?? undefined;\n\t\tthis.lastActiveGroupId = activeGroup.id;\n\n\t\t// Dispose previous active control listeners\n\t\tthis.lastActiveEditorControlDisposable.clear();\n\n\t\t// Listen to focus changes on control for auto save\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tif (activeEditor && activeEditorPane) {\n\t\t\tthis.lastActiveEditorControlDisposable.add(activeEditorPane.onDidBlur(() => {\n\t\t\t\tthis.maybeTriggerAutoSave(SaveReason.FOCUS_CHANGE, { groupId: activeGroup.id, editor: activeEditor });\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate maybeTriggerAutoSave(reason: SaveReason.WINDOW_CHANGE | SaveReason.FOCUS_CHANGE, editorIdentifier?: IEditorIdentifier): void {\n\t\tif (editorIdentifier) {\n\t\t\tif (\n\t\t\t\t!editorIdentifier.editor.isDirty() ||\n\t\t\t\teditorIdentifier.editor.isReadonly() ||\n\t\t\t\teditorIdentifier.editor.hasCapability(EditorInputCapabilities.Untitled)\n\t\t\t) {\n\t\t\t\treturn; // no auto save for non-dirty, readonly or untitled editors\n\t\t\t}\n\n\t\t\tconst autoSaveMode = this.filesConfigurationService.getAutoSaveMode(editorIdentifier.editor, reason);\n\t\t\tif (autoSaveMode.mode !== AutoSaveMode.OFF) {\n\t\t\t\t// Determine if we need to save all. In case of a window focus change we also save if\n\t\t\t\t// auto save mode is configured to be ON_FOCUS_CHANGE (editor focus change)\n\t\t\t\tif (\n\t\t\t\t\t(reason === SaveReason.WINDOW_CHANGE && (autoSaveMode.mode === AutoSaveMode.ON_FOCUS_CHANGE || autoSaveMode.mode === AutoSaveMode.ON_WINDOW_CHANGE)) ||\n\t\t\t\t\t(reason === SaveReason.FOCUS_CHANGE && autoSaveMode.mode === AutoSaveMode.ON_FOCUS_CHANGE)\n\t\t\t\t) {\n\t\t\t\t\tthis.logService.trace(`[editor auto save] triggering auto save with reason ${reason}`);\n\t\t\t\t\tthis.editorService.save(editorIdentifier, { reason });\n\t\t\t\t}\n\t\t\t} else if (editorIdentifier.editor.resource && (autoSaveMode.reason === AutoSaveDisabledReason.ERRORS || autoSaveMode.reason === AutoSaveDisabledReason.DISABLED)) {\n\t\t\t\tthis.waitingOnConditionAutoSaveEditors.set(editorIdentifier.editor.resource, { editor: editorIdentifier, reason, condition: autoSaveMode.reason });\n\t\t\t}\n\t\t} else {\n\t\t\tthis.saveAllDirtyAutoSaveables(reason);\n\t\t}\n\t}\n\n\tprivate onDidChangeAutoSaveConfiguration(): void {\n\n\t\t// Trigger a save-all when auto save is enabled\n\t\tlet reason: SaveReason | undefined = undefined;\n\t\tswitch (this.filesConfigurationService.getAutoSaveMode(undefined).mode) {\n\t\t\tcase AutoSaveMode.ON_FOCUS_CHANGE:\n\t\t\t\treason = SaveReason.FOCUS_CHANGE;\n\t\t\t\tbreak;\n\t\t\tcase AutoSaveMode.ON_WINDOW_CHANGE:\n\t\t\t\treason = SaveReason.WINDOW_CHANGE;\n\t\t\t\tbreak;\n\t\t\tcase AutoSaveMode.AFTER_SHORT_DELAY:\n\t\t\tcase AutoSaveMode.AFTER_LONG_DELAY:\n\t\t\t\treason = SaveReason.AUTO;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (reason) {\n\t\t\tthis.saveAllDirtyAutoSaveables(reason);\n\t\t}\n\t}\n\n\tprivate saveAllDirtyAutoSaveables(reason: SaveReason): void {\n\t\tfor (const workingCopy of this.workingCopyService.dirtyWorkingCopies) {\n\t\t\tif (workingCopy.capabilities & WorkingCopyCapabilities.Untitled) {\n\t\t\t\tcontinue; // we never auto save untitled working copies\n\t\t\t}\n\n\t\t\tconst autoSaveMode = this.filesConfigurationService.getAutoSaveMode(workingCopy.resource, reason);\n\t\t\tif (autoSaveMode.mode !== AutoSaveMode.OFF) {\n\t\t\t\tworkingCopy.save({ reason });\n\t\t\t} else if (autoSaveMode.reason === AutoSaveDisabledReason.ERRORS || autoSaveMode.reason === AutoSaveDisabledReason.DISABLED) {\n\t\t\t\tthis.waitingOnConditionAutoSaveWorkingCopies.set(workingCopy.resource, { workingCopy, reason, condition: autoSaveMode.reason });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRegister(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate onDidUnregister(workingCopy: IWorkingCopy): void {\n\t\tthis.discardAutoSave(workingCopy);\n\t}\n\n\tprivate onDidChangeDirty(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t} else {\n\t\t\tthis.discardAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate onDidChangeContent(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\t// this listener will make sure that the auto save is\n\t\t\t// pushed out for as long as the user is still changing\n\t\t\t// the content of the working copy.\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate scheduleAutoSave(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.capabilities & WorkingCopyCapabilities.Untitled) {\n\t\t\treturn; // we never auto save untitled working copies\n\t\t}\n\n\t\tconst autoSaveAfterDelay = this.filesConfigurationService.getAutoSaveConfiguration(workingCopy.resource).autoSaveDelay;\n\t\tif (typeof autoSaveAfterDelay !== 'number') {\n\t\t\treturn; // auto save after delay must be enabled\n\t\t}\n\n\t\t// Clear any running auto save operation\n\t\tthis.discardAutoSave(workingCopy);\n\n\t\tthis.logService.trace(`[editor auto save] scheduling auto save after ${autoSaveAfterDelay}ms`, workingCopy.resource.toString(), workingCopy.typeId);\n\n\t\t// Schedule new auto save\n\t\tconst handle = setTimeout(() => {\n\n\t\t\t// Clear pending\n\t\t\tthis.discardAutoSave(workingCopy);\n\n\t\t\t// Save if dirty and unless prevented by other conditions such as error markers\n\t\t\tif (workingCopy.isDirty()) {\n\t\t\t\tconst reason = SaveReason.AUTO;\n\t\t\t\tconst autoSaveMode = this.filesConfigurationService.getAutoSaveMode(workingCopy.resource, reason);\n\t\t\t\tif (autoSaveMode.mode !== AutoSaveMode.OFF) {\n\t\t\t\t\tthis.logService.trace(`[editor auto save] running auto save`, workingCopy.resource.toString(), workingCopy.typeId);\n\t\t\t\t\tworkingCopy.save({ reason });\n\t\t\t\t} else if (autoSaveMode.reason === AutoSaveDisabledReason.ERRORS || autoSaveMode.reason === AutoSaveDisabledReason.DISABLED) {\n\t\t\t\t\tthis.waitingOnConditionAutoSaveWorkingCopies.set(workingCopy.resource, { workingCopy, reason, condition: autoSaveMode.reason });\n\t\t\t\t}\n\t\t\t}\n\t\t}, autoSaveAfterDelay);\n\n\t\t// Keep in map for disposal as needed\n\t\tthis.scheduledAutoSavesAfterDelay.set(workingCopy, toDisposable(() => {\n\t\t\tthis.logService.trace(`[editor auto save] clearing pending auto save`, workingCopy.resource.toString(), workingCopy.typeId);\n\n\t\t\tclearTimeout(handle);\n\t\t}));\n\t}\n\n\tprivate discardAutoSave(workingCopy: IWorkingCopy): void {\n\t\tdispose(this.scheduledAutoSavesAfterDelay.get(workingCopy));\n\t\tthis.scheduledAutoSavesAfterDelay.delete(workingCopy);\n\n\t\tthis.waitingOnConditionAutoSaveWorkingCopies.delete(workingCopy.resource);\n\t\tthis.waitingOnConditionAutoSaveEditors.delete(workingCopy.resource);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
