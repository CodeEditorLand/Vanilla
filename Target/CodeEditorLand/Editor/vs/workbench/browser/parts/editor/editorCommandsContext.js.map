{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorCommandsContext.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveElement } from '../../../../base/browser/dom.js';\nimport { List } from '../../../../base/browser/ui/list/listWidget.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IListService } from '../../../../platform/list/browser/listService.js';\nimport { IEditorCommandsContext, isEditorCommandsContext, IEditorIdentifier, isEditorIdentifier } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IEditorGroup, IEditorGroupsService, isEditorGroup } from '../../../services/editor/common/editorGroupsService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\n\nexport interface IResolvedEditorCommandsContext {\n\treadonly groupedEditors: {\n\t\treadonly group: IEditorGroup;\n\t\treadonly editors: EditorInput[];\n\t}[];\n\treadonly preserveFocus: boolean;\n}\n\nexport function resolveCommandsContext(commandArgs: unknown[], editorService: IEditorService, editorGroupsService: IEditorGroupsService, listService: IListService): IResolvedEditorCommandsContext {\n\n\tconst commandContext = getCommandsContext(commandArgs, editorService, editorGroupsService, listService);\n\tconst preserveFocus = commandContext.length ? commandContext[0].preserveFocus || false : false;\n\tconst resolvedContext: IResolvedEditorCommandsContext = { groupedEditors: [], preserveFocus };\n\n\tfor (const editorContext of commandContext) {\n\t\tconst groupAndEditor = getEditorAndGroupFromContext(editorContext, editorGroupsService);\n\t\tif (!groupAndEditor) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { group, editor } = groupAndEditor;\n\n\t\t// Find group context if already added\n\t\tlet groupContext = undefined;\n\t\tfor (const targetGroupContext of resolvedContext.groupedEditors) {\n\t\t\tif (targetGroupContext.group.id === group.id) {\n\t\t\t\tgroupContext = targetGroupContext;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise add new group context\n\t\tif (!groupContext) {\n\t\t\tgroupContext = { group, editors: [] };\n\t\t\tresolvedContext.groupedEditors.push(groupContext);\n\t\t}\n\n\t\t// Add editor to group context\n\t\tif (editor) {\n\t\t\tgroupContext.editors.push(editor);\n\t\t}\n\t}\n\n\treturn resolvedContext;\n}\n\nfunction getCommandsContext(commandArgs: unknown[], editorService: IEditorService, editorGroupsService: IEditorGroupsService, listService: IListService): IEditorCommandsContext[] {\n\t// Figure out if command is executed from a list\n\tconst list = listService.lastFocusedList;\n\tlet isListAction = list instanceof List && list.getHTMLElement() === getActiveElement();\n\n\t// Get editor context for which the command was triggered\n\tlet editorContext = getEditorContextFromCommandArgs(commandArgs, isListAction, editorService, editorGroupsService, listService);\n\n\t// If the editor context can not be determind use the active editor\n\tif (!editorContext) {\n\t\tconst activeGroup = editorGroupsService.activeGroup;\n\t\tconst activeEditor = activeGroup.activeEditor;\n\t\teditorContext = { groupId: activeGroup.id, editorIndex: activeEditor ? activeGroup.getIndexOfEditor(activeEditor) : undefined };\n\t\tisListAction = false;\n\t}\n\n\tconst multiEditorContext = getMultiSelectContext(editorContext, isListAction, editorService, editorGroupsService, listService);\n\n\t// Make sure the command context is the first one in the list\n\treturn moveCurrentEditorContextToFront(editorContext, multiEditorContext);\n}\n\nfunction moveCurrentEditorContextToFront(editorContext: IEditorCommandsContext, multiEditorContext: IEditorCommandsContext[]): IEditorCommandsContext[] {\n\tif (multiEditorContext.length <= 1) {\n\t\treturn multiEditorContext;\n\t}\n\n\tconst editorContextIndex = multiEditorContext.findIndex(context =>\n\t\tcontext.groupId === editorContext.groupId &&\n\t\tcontext.editorIndex === editorContext.editorIndex\n\t);\n\n\tif (editorContextIndex !== -1) {\n\t\tmultiEditorContext.splice(editorContextIndex, 1);\n\t\tmultiEditorContext.unshift(editorContext);\n\t} else if (editorContext.editorIndex === undefined) {\n\t\tmultiEditorContext.unshift(editorContext);\n\t} else {\n\t\tthrow new Error('Editor context not found in multi editor context');\n\t}\n\n\treturn multiEditorContext;\n}\n\nfunction getEditorContextFromCommandArgs(commandArgs: unknown[], isListAction: boolean, editorService: IEditorService, editorGroupsService: IEditorGroupsService, listService: IListService): IEditorCommandsContext | undefined {\n\t// We only know how to extraxt the command context from URI and IEditorCommandsContext arguments\n\tconst filteredArgs = commandArgs.filter(arg => isEditorCommandsContext(arg) || URI.isUri(arg));\n\n\t// If the command arguments contain an editor context, use it\n\tfor (const arg of filteredArgs) {\n\t\tif (isEditorCommandsContext(arg)) {\n\t\t\treturn arg;\n\t\t}\n\t}\n\n\t// Otherwise, try to find the editor group by the URI of the resource\n\tfor (const uri of filteredArgs as URI[]) {\n\t\tconst editorIdentifiers = editorService.findEditors(uri);\n\t\tif (editorIdentifiers.length) {\n\t\t\tconst editorIdentifier = editorIdentifiers[0];\n\t\t\tconst group = editorGroupsService.getGroup(editorIdentifier.groupId);\n\t\t\treturn { groupId: editorIdentifier.groupId, editorIndex: group?.getIndexOfEditor(editorIdentifier.editor) };\n\t\t}\n\t}\n\n\t// If there is no context in the arguments, try to find the context from the focused list\n\t// if the action was executed from a list\n\tif (isListAction) {\n\t\tconst list = listService.lastFocusedList as List<unknown>;\n\t\tfor (const focusedElement of list.getFocusedElements()) {\n\t\t\tif (isGroupOrEditor(focusedElement)) {\n\t\t\t\treturn groupOrEditorToEditorContext(focusedElement, undefined, editorGroupsService);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nfunction getMultiSelectContext(editorContext: IEditorCommandsContext, isListAction: boolean, editorService: IEditorService, editorGroupsService: IEditorGroupsService, listService: IListService): IEditorCommandsContext[] {\n\n\t// If the action was executed from a list, return all selected editors\n\tif (isListAction) {\n\t\tconst list = listService.lastFocusedList as List<unknown>;\n\t\tconst selection = list.getSelectedElements().filter(isGroupOrEditor);\n\n\t\tif (selection.length > 1) {\n\t\t\treturn selection.map(e => groupOrEditorToEditorContext(e, editorContext.preserveFocus, editorGroupsService));\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\t// TODO@benibenj workaround for https://github.com/microsoft/vscode/issues/224050\n\t\t\t// Explainer: the `isListAction` flag can be a false positive in certain cases because\n\t\t\t// it will be `true` if the active element is a `List` even if it is part of the editor\n\t\t\t// area. The workaround here is to fallback to `isListAction: false` if the list is not\n\t\t\t// having any editor or group selected.\n\t\t\treturn getMultiSelectContext(editorContext, false, editorService, editorGroupsService, listService);\n\t\t}\n\t}\n\t// Check editors selected in the group (tabs)\n\telse {\n\t\tconst group = editorGroupsService.getGroup(editorContext.groupId);\n\t\tconst editor = editorContext.editorIndex !== undefined ? group?.getEditorByIndex(editorContext.editorIndex) : group?.activeEditor;\n\t\t// If the editor is selected, return all selected editors otherwise only use the editors context\n\t\tif (group && editor && group.isSelected(editor)) {\n\t\t\treturn group.selectedEditors.map(editor => groupOrEditorToEditorContext({ editor, groupId: group.id }, editorContext.preserveFocus, editorGroupsService));\n\t\t}\n\t}\n\n\t// Otherwise go with passed in context\n\treturn [editorContext];\n}\n\nfunction groupOrEditorToEditorContext(element: IEditorIdentifier | IEditorGroup, preserveFocus: boolean | undefined, editorGroupsService: IEditorGroupsService): IEditorCommandsContext {\n\tif (isEditorGroup(element)) {\n\t\treturn { groupId: element.id, editorIndex: undefined, preserveFocus };\n\t}\n\n\tconst group = editorGroupsService.getGroup(element.groupId);\n\n\treturn { groupId: element.groupId, editorIndex: group ? group.getIndexOfEditor(element.editor) : -1, preserveFocus };\n}\n\nfunction isGroupOrEditor(element: unknown): element is IEditorIdentifier | IEditorGroup {\n\treturn isEditorGroup(element) || isEditorIdentifier(element);\n}\n\nfunction getEditorAndGroupFromContext(commandContext: IEditorCommandsContext, editorGroupsService: IEditorGroupsService): { group: IEditorGroup; editor: EditorInput | undefined } | undefined {\n\tconst group = editorGroupsService.getGroup(commandContext.groupId);\n\tif (!group) {\n\t\treturn undefined;\n\t}\n\n\tif (commandContext.editorIndex === undefined) {\n\t\treturn { group, editor: undefined };\n\t}\n\n\tconst editor = group.getEditorByIndex(commandContext.editorIndex);\n\treturn { group, editor };\n}\n"],
  "mappings": "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",
  "names": ["editor"]
}
