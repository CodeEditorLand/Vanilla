{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorCommandsContext.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveElement } from \"../../../../base/browser/dom.js\";\nimport { List } from \"../../../../base/browser/ui/list/listWidget.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type { IListService } from \"../../../../platform/list/browser/listService.js\";\nimport {\n\ttype IEditorCommandsContext,\n\ttype IEditorIdentifier,\n\tisEditorCommandsContext,\n\tisEditorIdentifier,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport {\n\ttype IEditorGroup,\n\ttype IEditorGroupsService,\n\tisEditorGroup,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport type { IEditorService } from \"../../../services/editor/common/editorService.js\";\n\nexport interface IResolvedEditorCommandsContext {\n\treadonly groupedEditors: {\n\t\treadonly group: IEditorGroup;\n\t\treadonly editors: EditorInput[];\n\t}[];\n\treadonly preserveFocus: boolean;\n}\n\nexport function resolveCommandsContext(\n\tcommandArgs: unknown[],\n\teditorService: IEditorService,\n\teditorGroupsService: IEditorGroupsService,\n\tlistService: IListService,\n): IResolvedEditorCommandsContext {\n\tconst commandContext = getCommandsContext(\n\t\tcommandArgs,\n\t\teditorService,\n\t\teditorGroupsService,\n\t\tlistService,\n\t);\n\tconst preserveFocus = commandContext.length\n\t\t? commandContext[0].preserveFocus || false\n\t\t: false;\n\tconst resolvedContext: IResolvedEditorCommandsContext = {\n\t\tgroupedEditors: [],\n\t\tpreserveFocus,\n\t};\n\n\tfor (const editorContext of commandContext) {\n\t\tconst groupAndEditor = getEditorAndGroupFromContext(\n\t\t\teditorContext,\n\t\t\teditorGroupsService,\n\t\t);\n\t\tif (!groupAndEditor) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { group, editor } = groupAndEditor;\n\n\t\t// Find group context if already added\n\t\tlet groupContext;\n\t\tfor (const targetGroupContext of resolvedContext.groupedEditors) {\n\t\t\tif (targetGroupContext.group.id === group.id) {\n\t\t\t\tgroupContext = targetGroupContext;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise add new group context\n\t\tif (!groupContext) {\n\t\t\tgroupContext = { group, editors: [] };\n\t\t\tresolvedContext.groupedEditors.push(groupContext);\n\t\t}\n\n\t\t// Add editor to group context\n\t\tif (editor) {\n\t\t\tgroupContext.editors.push(editor);\n\t\t}\n\t}\n\n\treturn resolvedContext;\n}\n\nfunction getCommandsContext(\n\tcommandArgs: unknown[],\n\teditorService: IEditorService,\n\teditorGroupsService: IEditorGroupsService,\n\tlistService: IListService,\n): IEditorCommandsContext[] {\n\t// Figure out if command is executed from a list\n\tconst list = listService.lastFocusedList;\n\tlet isListAction =\n\t\tlist instanceof List && list.getHTMLElement() === getActiveElement();\n\n\t// Get editor context for which the command was triggered\n\tlet editorContext = getEditorContextFromCommandArgs(\n\t\tcommandArgs,\n\t\tisListAction,\n\t\teditorService,\n\t\teditorGroupsService,\n\t\tlistService,\n\t);\n\n\t// If the editor context can not be determind use the active editor\n\tif (!editorContext) {\n\t\tconst activeGroup = editorGroupsService.activeGroup;\n\t\tconst activeEditor = activeGroup.activeEditor;\n\t\teditorContext = {\n\t\t\tgroupId: activeGroup.id,\n\t\t\teditorIndex: activeEditor\n\t\t\t\t? activeGroup.getIndexOfEditor(activeEditor)\n\t\t\t\t: undefined,\n\t\t};\n\t\tisListAction = false;\n\t}\n\n\tconst multiEditorContext = getMultiSelectContext(\n\t\teditorContext,\n\t\tisListAction,\n\t\teditorService,\n\t\teditorGroupsService,\n\t\tlistService,\n\t);\n\n\t// Make sure the command context is the first one in the list\n\treturn moveCurrentEditorContextToFront(editorContext, multiEditorContext);\n}\n\nfunction moveCurrentEditorContextToFront(\n\teditorContext: IEditorCommandsContext,\n\tmultiEditorContext: IEditorCommandsContext[],\n): IEditorCommandsContext[] {\n\tif (multiEditorContext.length <= 1) {\n\t\treturn multiEditorContext;\n\t}\n\n\tconst editorContextIndex = multiEditorContext.findIndex(\n\t\t(context) =>\n\t\t\tcontext.groupId === editorContext.groupId &&\n\t\t\tcontext.editorIndex === editorContext.editorIndex,\n\t);\n\n\tif (editorContextIndex !== -1) {\n\t\tmultiEditorContext.splice(editorContextIndex, 1);\n\t\tmultiEditorContext.unshift(editorContext);\n\t} else if (editorContext.editorIndex === undefined) {\n\t\tmultiEditorContext.unshift(editorContext);\n\t} else {\n\t\tthrow new Error(\"Editor context not found in multi editor context\");\n\t}\n\n\treturn multiEditorContext;\n}\n\nfunction getEditorContextFromCommandArgs(\n\tcommandArgs: unknown[],\n\tisListAction: boolean,\n\teditorService: IEditorService,\n\teditorGroupsService: IEditorGroupsService,\n\tlistService: IListService,\n): IEditorCommandsContext | undefined {\n\t// We only know how to extraxt the command context from URI and IEditorCommandsContext arguments\n\tconst filteredArgs = commandArgs.filter(\n\t\t(arg) => isEditorCommandsContext(arg) || URI.isUri(arg),\n\t);\n\n\t// If the command arguments contain an editor context, use it\n\tfor (const arg of filteredArgs) {\n\t\tif (isEditorCommandsContext(arg)) {\n\t\t\treturn arg;\n\t\t}\n\t}\n\n\t// Otherwise, try to find the editor group by the URI of the resource\n\tfor (const uri of filteredArgs as URI[]) {\n\t\tconst editorIdentifiers = editorService.findEditors(uri);\n\t\tif (editorIdentifiers.length) {\n\t\t\tconst editorIdentifier = editorIdentifiers[0];\n\t\t\tconst group = editorGroupsService.getGroup(\n\t\t\t\teditorIdentifier.groupId,\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tgroupId: editorIdentifier.groupId,\n\t\t\t\teditorIndex: group?.getIndexOfEditor(editorIdentifier.editor),\n\t\t\t};\n\t\t}\n\t}\n\n\t// If there is no context in the arguments, try to find the context from the focused list\n\t// if the action was executed from a list\n\tif (isListAction) {\n\t\tconst list = listService.lastFocusedList as List<unknown>;\n\t\tfor (const focusedElement of list.getFocusedElements()) {\n\t\t\tif (isGroupOrEditor(focusedElement)) {\n\t\t\t\treturn groupOrEditorToEditorContext(\n\t\t\t\t\tfocusedElement,\n\t\t\t\t\tundefined,\n\t\t\t\t\teditorGroupsService,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nfunction getMultiSelectContext(\n\teditorContext: IEditorCommandsContext,\n\tisListAction: boolean,\n\teditorService: IEditorService,\n\teditorGroupsService: IEditorGroupsService,\n\tlistService: IListService,\n): IEditorCommandsContext[] {\n\t// If the action was executed from a list, return all selected editors\n\tif (isListAction) {\n\t\tconst list = listService.lastFocusedList as List<unknown>;\n\t\tconst selection = list.getSelectedElements().filter(isGroupOrEditor);\n\n\t\tif (selection.length > 1) {\n\t\t\treturn selection.map((e) =>\n\t\t\t\tgroupOrEditorToEditorContext(\n\t\t\t\t\te,\n\t\t\t\t\teditorContext.preserveFocus,\n\t\t\t\t\teditorGroupsService,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\t// TODO@benibenj workaround for https://github.com/microsoft/vscode/issues/224050\n\t\t\t// Explainer: the `isListAction` flag can be a false positive in certain cases because\n\t\t\t// it will be `true` if the active element is a `List` even if it is part of the editor\n\t\t\t// area. The workaround here is to fallback to `isListAction: false` if the list is not\n\t\t\t// having any editor or group selected.\n\t\t\treturn getMultiSelectContext(\n\t\t\t\teditorContext,\n\t\t\t\tfalse,\n\t\t\t\teditorService,\n\t\t\t\teditorGroupsService,\n\t\t\t\tlistService,\n\t\t\t);\n\t\t}\n\t}\n\t// Check editors selected in the group (tabs)\n\telse {\n\t\tconst group = editorGroupsService.getGroup(editorContext.groupId);\n\t\tconst editor =\n\t\t\teditorContext.editorIndex !== undefined\n\t\t\t\t? group?.getEditorByIndex(editorContext.editorIndex)\n\t\t\t\t: group?.activeEditor;\n\t\t// If the editor is selected, return all selected editors otherwise only use the editors context\n\t\tif (group && editor && group.isSelected(editor)) {\n\t\t\treturn group.selectedEditors.map((editor) =>\n\t\t\t\tgroupOrEditorToEditorContext(\n\t\t\t\t\t{ editor, groupId: group.id },\n\t\t\t\t\teditorContext.preserveFocus,\n\t\t\t\t\teditorGroupsService,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\t// Otherwise go with passed in context\n\treturn [editorContext];\n}\n\nfunction groupOrEditorToEditorContext(\n\telement: IEditorIdentifier | IEditorGroup,\n\tpreserveFocus: boolean | undefined,\n\teditorGroupsService: IEditorGroupsService,\n): IEditorCommandsContext {\n\tif (isEditorGroup(element)) {\n\t\treturn { groupId: element.id, editorIndex: undefined, preserveFocus };\n\t}\n\n\tconst group = editorGroupsService.getGroup(element.groupId);\n\n\treturn {\n\t\tgroupId: element.groupId,\n\t\teditorIndex: group ? group.getIndexOfEditor(element.editor) : -1,\n\t\tpreserveFocus,\n\t};\n}\n\nfunction isGroupOrEditor(\n\telement: unknown,\n): element is IEditorIdentifier | IEditorGroup {\n\treturn isEditorGroup(element) || isEditorIdentifier(element);\n}\n\nfunction getEditorAndGroupFromContext(\n\tcommandContext: IEditorCommandsContext,\n\teditorGroupsService: IEditorGroupsService,\n): { group: IEditorGroup; editor: EditorInput | undefined } | undefined {\n\tconst group = editorGroupsService.getGroup(commandContext.groupId);\n\tif (!group) {\n\t\treturn undefined;\n\t}\n\n\tif (commandContext.editorIndex === undefined) {\n\t\treturn { group, editor: undefined };\n\t}\n\n\tconst editor = group.getEditorByIndex(commandContext.editorIndex);\n\treturn { group, editor };\n}\n"],
  "mappings": "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",
  "names": ["editor"]
}
