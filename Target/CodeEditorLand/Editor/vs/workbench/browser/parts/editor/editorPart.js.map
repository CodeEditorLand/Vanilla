{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\t$,\n\tDimension,\n\tEventHelper,\n\taddDisposableGenericMouseDownListener,\n\tgetActiveElement,\n\tgetWindow,\n\tisAncestorOfActiveElement,\n\tisHTMLElement,\n} from \"../../../../base/browser/dom.js\";\nimport { CenteredViewLayout } from \"../../../../base/browser/ui/centered/centeredViewLayout.js\";\nimport {\n\tDirection,\n\ttype Grid,\n\ttype GridBranchNode,\n\ttype GridNode,\n\ttype ISerializedGrid,\n\ttype ISerializedNode,\n\ttype IView,\n\ttype IViewSize,\n\tLayoutPriority,\n\tOrientation,\n\tSerializableGrid,\n\tSizing,\n\tcreateSerializedGrid,\n\tisGridBranchNode,\n\torthogonal,\n} from \"../../../../base/browser/ui/grid/grid.js\";\nimport type { IBoundarySashes } from \"../../../../base/browser/ui/sash/sash.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { coalesce, distinct } from \"../../../../base/common/arrays.js\";\nimport { DeferredPromise, Promises } from \"../../../../base/common/async.js\";\nimport { Color } from \"../../../../base/common/color.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport {\n\tEmitter,\n\tEvent,\n\tPauseableEmitter,\n\tRelay,\n} from \"../../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype DeepPartial,\n\tassertIsDefined,\n\tassertType,\n} from \"../../../../base/common/types.js\";\nimport {\n\ttype IConfigurationChangeEvent,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ServiceCollection } from \"../../../../platform/instantiation/common/serviceCollection.js\";\nimport {\n\tIStorageService,\n\ttype IStorageValueChangeEvent,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tcontrastBorder,\n\teditorBackground,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tEditorPartMaximizedEditorGroupContext,\n\tEditorPartMultipleEditorGroupsContext,\n\tIsAuxiliaryEditorPartContext,\n} from \"../../../common/contextkeys.js\";\nimport {\n\ttype EditorInputWithOptions,\n\ttype GroupIdentifier,\n\tGroupModelChangeKind,\n\ttype IEditorPartOptions,\n\ttype IEditorPartOptionsChangeEvent,\n} from \"../../../common/editor.js\";\nimport {\n\ttype ISerializedEditorGroupModel,\n\tisSerializedEditorGroupModel,\n} from \"../../../common/editor/editorGroupModel.js\";\nimport {\n\tEDITOR_GROUP_BORDER,\n\tEDITOR_PANE_BACKGROUND,\n} from \"../../../common/theme.js\";\nimport { findGroup } from \"../../../services/editor/common/editorGroupFinder.js\";\nimport {\n\ttype EditorGroupLayout,\n\tGroupDirection,\n\ttype GroupLayoutArgument,\n\tGroupLocation,\n\tGroupOrientation,\n\tGroupsArrangement,\n\tGroupsOrder,\n\ttype IEditorDropTargetDelegate,\n\ttype IEditorPart,\n\ttype IEditorSideGroup,\n\ttype IFindGroupScope,\n\ttype IMergeGroupOptions,\n\tMergeGroupMode,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport { SIDE_GROUP } from \"../../../services/editor/common/editorService.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport {\n\tIWorkbenchLayoutService,\n\tParts,\n\tPosition,\n} from \"../../../services/layout/browser/layoutService.js\";\nimport { CompositeDragAndDropObserver } from \"../../dnd.js\";\nimport { Part } from \"../../part.js\";\nimport {\n\ttype IEditorGroupView,\n\ttype IEditorGroupViewOptions,\n\ttype IEditorGroupsView,\n\ttype IEditorPartCreationOptions,\n\ttype IEditorPartsView,\n\tgetEditorPartOptions,\n\timpactsEditorPartOptions,\n} from \"./editor.js\";\nimport { EditorDropTarget } from \"./editorDropTarget.js\";\nimport { EditorGroupView } from \"./editorGroupView.js\";\n\nexport interface IEditorPartUIState {\n\treadonly serializedGrid: ISerializedGrid;\n\treadonly activeGroup: GroupIdentifier;\n\treadonly mostRecentActiveGroups: GroupIdentifier[];\n}\n\nclass GridWidgetView<T extends IView> implements IView {\n\treadonly element: HTMLElement = $(\".grid-view-container\");\n\n\tget minimumWidth(): number {\n\t\treturn this.gridWidget ? this.gridWidget.minimumWidth : 0;\n\t}\n\tget maximumWidth(): number {\n\t\treturn this.gridWidget\n\t\t\t? this.gridWidget.maximumWidth\n\t\t\t: Number.POSITIVE_INFINITY;\n\t}\n\tget minimumHeight(): number {\n\t\treturn this.gridWidget ? this.gridWidget.minimumHeight : 0;\n\t}\n\tget maximumHeight(): number {\n\t\treturn this.gridWidget\n\t\t\t? this.gridWidget.maximumHeight\n\t\t\t: Number.POSITIVE_INFINITY;\n\t}\n\n\tprivate _onDidChange = new Relay<\n\t\t{ width: number; height: number } | undefined\n\t>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate _gridWidget: Grid<T> | undefined;\n\n\tget gridWidget(): Grid<T> | undefined {\n\t\treturn this._gridWidget;\n\t}\n\n\tset gridWidget(grid: Grid<T> | undefined) {\n\t\tthis.element.innerText = \"\";\n\n\t\tif (grid) {\n\t\t\tthis.element.appendChild(grid.element);\n\t\t\tthis._onDidChange.input = grid.onDidChange;\n\t\t} else {\n\t\t\tthis._onDidChange.input = Event.None;\n\t\t}\n\n\t\tthis._gridWidget = grid;\n\t}\n\n\tlayout(width: number, height: number, top: number, left: number): void {\n\t\tthis.gridWidget?.layout(width, height, top, left);\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t}\n}\n\nexport class EditorPart extends Part implements IEditorPart, IEditorGroupsView {\n\tprivate static readonly EDITOR_PART_UI_STATE_STORAGE_KEY =\n\t\t\"editorpart.state\";\n\tprivate static readonly EDITOR_PART_CENTERED_VIEW_STORAGE_KEY =\n\t\t\"editorpart.centeredview\";\n\n\t//#region Events\n\n\tprivate readonly _onDidFocus = this._register(new Emitter<void>());\n\treadonly onDidFocus = this._onDidFocus.event;\n\n\tprivate readonly _onDidLayout = this._register(new Emitter<Dimension>());\n\treadonly onDidLayout = this._onDidLayout.event;\n\n\tprivate readonly _onDidChangeActiveGroup = this._register(\n\t\tnew Emitter<IEditorGroupView>(),\n\t);\n\treadonly onDidChangeActiveGroup = this._onDidChangeActiveGroup.event;\n\n\tprivate readonly _onDidChangeGroupIndex = this._register(\n\t\tnew Emitter<IEditorGroupView>(),\n\t);\n\treadonly onDidChangeGroupIndex = this._onDidChangeGroupIndex.event;\n\n\tprivate readonly _onDidChangeGroupLabel = this._register(\n\t\tnew Emitter<IEditorGroupView>(),\n\t);\n\treadonly onDidChangeGroupLabel = this._onDidChangeGroupLabel.event;\n\n\tprivate readonly _onDidChangeGroupLocked = this._register(\n\t\tnew Emitter<IEditorGroupView>(),\n\t);\n\treadonly onDidChangeGroupLocked = this._onDidChangeGroupLocked.event;\n\n\tprivate readonly _onDidChangeGroupMaximized = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\treadonly onDidChangeGroupMaximized = this._onDidChangeGroupMaximized.event;\n\n\tprivate readonly _onDidActivateGroup = this._register(\n\t\tnew Emitter<IEditorGroupView>(),\n\t);\n\treadonly onDidActivateGroup = this._onDidActivateGroup.event;\n\n\tprivate readonly _onDidAddGroup = this._register(\n\t\tnew PauseableEmitter<IEditorGroupView>(),\n\t);\n\treadonly onDidAddGroup = this._onDidAddGroup.event;\n\n\tprivate readonly _onDidRemoveGroup = this._register(\n\t\tnew PauseableEmitter<IEditorGroupView>(),\n\t);\n\treadonly onDidRemoveGroup = this._onDidRemoveGroup.event;\n\n\tprivate readonly _onDidMoveGroup = this._register(\n\t\tnew Emitter<IEditorGroupView>(),\n\t);\n\treadonly onDidMoveGroup = this._onDidMoveGroup.event;\n\n\tprivate readonly onDidSetGridWidget = this._register(\n\t\tnew Emitter<{ width: number; height: number } | undefined>(),\n\t);\n\n\tprivate readonly _onDidChangeSizeConstraints = this._register(\n\t\tnew Relay<{ width: number; height: number } | undefined>(),\n\t);\n\treadonly onDidChangeSizeConstraints = Event.any(\n\t\tthis.onDidSetGridWidget.event,\n\t\tthis._onDidChangeSizeConstraints.event,\n\t);\n\n\tprivate readonly _onDidScroll = this._register(new Relay<void>());\n\treadonly onDidScroll = Event.any(\n\t\tthis.onDidSetGridWidget.event,\n\t\tthis._onDidScroll.event,\n\t);\n\n\tprivate readonly _onDidChangeEditorPartOptions = this._register(\n\t\tnew Emitter<IEditorPartOptionsChangeEvent>(),\n\t);\n\treadonly onDidChangeEditorPartOptions =\n\t\tthis._onDidChangeEditorPartOptions.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\t//#endregion\n\n\tprivate readonly workspaceMemento = this.getMemento(\n\t\tStorageScope.WORKSPACE,\n\t\tStorageTarget.USER,\n\t);\n\tprivate readonly profileMemento = this.getMemento(\n\t\tStorageScope.PROFILE,\n\t\tStorageTarget.MACHINE,\n\t);\n\n\tprivate readonly groupViews = new Map<GroupIdentifier, IEditorGroupView>();\n\tprivate mostRecentActiveGroups: GroupIdentifier[] = [];\n\n\tprotected container: HTMLElement | undefined;\n\n\tprivate scopedInstantiationService!: IInstantiationService;\n\n\tprivate centeredLayoutWidget!: CenteredViewLayout;\n\n\tprivate gridWidget!: SerializableGrid<IEditorGroupView>;\n\tprivate readonly gridWidgetDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate readonly gridWidgetView = this._register(\n\t\tnew GridWidgetView<IEditorGroupView>(),\n\t);\n\n\tconstructor(\n\t\tprotected readonly editorPartsView: IEditorPartsView,\n\t\tid: string,\n\t\tprivate readonly groupsLabel: string,\n\t\treadonly windowId: number,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(id, { hasTitle: false }, themeService, storageService, layoutService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) =>\n\t\t\t\tthis.onConfigurationUpdated(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.themeService.onDidFileIconThemeChange(() =>\n\t\t\t\tthis.handleChangedPartOptions(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.onDidChangeMementoValue(\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tthis._store,\n\t\t\t)((e) => this.onDidChangeMementoState(e)),\n\t\t);\n\t}\n\n\tprivate onConfigurationUpdated(event: IConfigurationChangeEvent): void {\n\t\tif (impactsEditorPartOptions(event)) {\n\t\t\tthis.handleChangedPartOptions();\n\t\t}\n\t}\n\n\tprivate handleChangedPartOptions(): void {\n\t\tconst oldPartOptions = this._partOptions;\n\t\tconst newPartOptions = getEditorPartOptions(\n\t\t\tthis.configurationService,\n\t\t\tthis.themeService,\n\t\t);\n\n\t\tfor (const enforcedPartOptions of this.enforcedPartOptions) {\n\t\t\tObject.assign(newPartOptions, enforcedPartOptions); // check for overrides\n\t\t}\n\n\t\tthis._partOptions = newPartOptions;\n\n\t\tthis._onDidChangeEditorPartOptions.fire({\n\t\t\toldPartOptions,\n\t\t\tnewPartOptions,\n\t\t});\n\t}\n\n\tprivate enforcedPartOptions: DeepPartial<IEditorPartOptions>[] = [];\n\n\tprivate _partOptions = getEditorPartOptions(\n\t\tthis.configurationService,\n\t\tthis.themeService,\n\t);\n\tget partOptions(): IEditorPartOptions {\n\t\treturn this._partOptions;\n\t}\n\n\tenforcePartOptions(options: DeepPartial<IEditorPartOptions>): IDisposable {\n\t\tthis.enforcedPartOptions.push(options);\n\t\tthis.handleChangedPartOptions();\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.enforcedPartOptions.splice(\n\t\t\t\tthis.enforcedPartOptions.indexOf(options),\n\t\t\t\t1,\n\t\t\t);\n\t\t\tthis.handleChangedPartOptions();\n\t\t});\n\t}\n\n\tprivate top = 0;\n\tprivate left = 0;\n\tprivate _contentDimension!: Dimension;\n\tget contentDimension(): Dimension {\n\t\treturn this._contentDimension;\n\t}\n\n\tprivate _activeGroup!: IEditorGroupView;\n\tget activeGroup(): IEditorGroupView {\n\t\treturn this._activeGroup;\n\t}\n\n\treadonly sideGroup: IEditorSideGroup = {\n\t\topenEditor: (editor, options) => {\n\t\t\tconst [group] = this.scopedInstantiationService.invokeFunction(\n\t\t\t\t(accessor) =>\n\t\t\t\t\tfindGroup(accessor, { editor, options }, SIDE_GROUP),\n\t\t\t);\n\n\t\t\treturn group.openEditor(editor, options);\n\t\t},\n\t};\n\n\tget groups(): IEditorGroupView[] {\n\t\treturn Array.from(this.groupViews.values());\n\t}\n\n\tget count(): number {\n\t\treturn this.groupViews.size;\n\t}\n\n\tget orientation(): GroupOrientation {\n\t\treturn this.gridWidget &&\n\t\t\tthis.gridWidget.orientation === Orientation.VERTICAL\n\t\t\t? GroupOrientation.VERTICAL\n\t\t\t: GroupOrientation.HORIZONTAL;\n\t}\n\n\tprivate _isReady = false;\n\tget isReady(): boolean {\n\t\treturn this._isReady;\n\t}\n\n\tprivate readonly whenReadyPromise = new DeferredPromise<void>();\n\treadonly whenReady = this.whenReadyPromise.p;\n\n\tprivate readonly whenRestoredPromise = new DeferredPromise<void>();\n\treadonly whenRestored = this.whenRestoredPromise.p;\n\n\tget hasRestorableState(): boolean {\n\t\treturn !!this.workspaceMemento[\n\t\t\tEditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY\n\t\t];\n\t}\n\n\tprivate _willRestoreState = false;\n\tget willRestoreState(): boolean {\n\t\treturn this._willRestoreState;\n\t}\n\n\tgetGroups(order = GroupsOrder.CREATION_TIME): IEditorGroupView[] {\n\t\tswitch (order) {\n\t\t\tcase GroupsOrder.CREATION_TIME:\n\t\t\t\treturn this.groups;\n\n\t\t\tcase GroupsOrder.MOST_RECENTLY_ACTIVE: {\n\t\t\t\tconst mostRecentActive = coalesce(\n\t\t\t\t\tthis.mostRecentActiveGroups.map((groupId) =>\n\t\t\t\t\t\tthis.getGroup(groupId),\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t\t// there can be groups that got never active, even though they exist. in this case\n\t\t\t\t// make sure to just append them at the end so that all groups are returned properly\n\t\t\t\treturn distinct([...mostRecentActive, ...this.groups]);\n\t\t\t}\n\t\t\tcase GroupsOrder.GRID_APPEARANCE: {\n\t\t\t\tconst views: IEditorGroupView[] = [];\n\t\t\t\tif (this.gridWidget) {\n\t\t\t\t\tthis.fillGridNodes(views, this.gridWidget.getViews());\n\t\t\t\t}\n\n\t\t\t\treturn views;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate fillGridNodes(\n\t\ttarget: IEditorGroupView[],\n\t\tnode: GridBranchNode<IEditorGroupView> | GridNode<IEditorGroupView>,\n\t): void {\n\t\tif (isGridBranchNode(node)) {\n\t\t\tnode.children.forEach((child) => this.fillGridNodes(target, child));\n\t\t} else {\n\t\t\ttarget.push(node.view);\n\t\t}\n\t}\n\n\thasGroup(identifier: GroupIdentifier): boolean {\n\t\treturn this.groupViews.has(identifier);\n\t}\n\n\tgetGroup(identifier: GroupIdentifier): IEditorGroupView | undefined {\n\t\treturn this.groupViews.get(identifier);\n\t}\n\n\tfindGroup(\n\t\tscope: IFindGroupScope,\n\t\tsource: IEditorGroupView | GroupIdentifier = this.activeGroup,\n\t\twrap?: boolean,\n\t): IEditorGroupView | undefined {\n\t\t// by direction\n\t\tif (typeof scope.direction === \"number\") {\n\t\t\treturn this.doFindGroupByDirection(scope.direction, source, wrap);\n\t\t}\n\n\t\t// by location\n\t\tif (typeof scope.location === \"number\") {\n\t\t\treturn this.doFindGroupByLocation(scope.location, source, wrap);\n\t\t}\n\n\t\tthrow new Error(\"invalid arguments\");\n\t}\n\n\tprivate doFindGroupByDirection(\n\t\tdirection: GroupDirection,\n\t\tsource: IEditorGroupView | GroupIdentifier,\n\t\twrap?: boolean,\n\t): IEditorGroupView | undefined {\n\t\tconst sourceGroupView = this.assertGroupView(source);\n\n\t\t// Find neighbours and sort by our MRU list\n\t\tconst neighbours = this.gridWidget.getNeighborViews(\n\t\t\tsourceGroupView,\n\t\t\tthis.toGridViewDirection(direction),\n\t\t\twrap,\n\t\t);\n\t\tneighbours.sort(\n\t\t\t(n1, n2) =>\n\t\t\t\tthis.mostRecentActiveGroups.indexOf(n1.id) -\n\t\t\t\tthis.mostRecentActiveGroups.indexOf(n2.id),\n\t\t);\n\n\t\treturn neighbours[0];\n\t}\n\n\tprivate doFindGroupByLocation(\n\t\tlocation: GroupLocation,\n\t\tsource: IEditorGroupView | GroupIdentifier,\n\t\twrap?: boolean,\n\t): IEditorGroupView | undefined {\n\t\tconst sourceGroupView = this.assertGroupView(source);\n\t\tconst groups = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\tconst index = groups.indexOf(sourceGroupView);\n\n\t\tswitch (location) {\n\t\t\tcase GroupLocation.FIRST:\n\t\t\t\treturn groups[0];\n\t\t\tcase GroupLocation.LAST:\n\t\t\t\treturn groups[groups.length - 1];\n\t\t\tcase GroupLocation.NEXT: {\n\t\t\t\tlet nextGroup: IEditorGroupView | undefined = groups[index + 1];\n\t\t\t\tif (!nextGroup && wrap) {\n\t\t\t\t\tnextGroup = this.doFindGroupByLocation(\n\t\t\t\t\t\tGroupLocation.FIRST,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn nextGroup;\n\t\t\t}\n\t\t\tcase GroupLocation.PREVIOUS: {\n\t\t\t\tlet previousGroup: IEditorGroupView | undefined =\n\t\t\t\t\tgroups[index - 1];\n\t\t\t\tif (!previousGroup && wrap) {\n\t\t\t\t\tpreviousGroup = this.doFindGroupByLocation(\n\t\t\t\t\t\tGroupLocation.LAST,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn previousGroup;\n\t\t\t}\n\t\t}\n\t}\n\n\tactivateGroup(\n\t\tgroup: IEditorGroupView | GroupIdentifier,\n\t\tpreserveWindowOrder?: boolean,\n\t): IEditorGroupView {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tthis.doSetGroupActive(groupView);\n\n\t\t// Ensure window on top unless disabled\n\t\tif (!preserveWindowOrder) {\n\t\t\tthis.hostService.moveTop(getWindow(this.element));\n\t\t}\n\n\t\treturn groupView;\n\t}\n\n\trestoreGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tthis.doRestoreGroup(groupView);\n\n\t\treturn groupView;\n\t}\n\n\tgetSize(group: IEditorGroupView | GroupIdentifier): {\n\t\twidth: number;\n\t\theight: number;\n\t} {\n\t\tconst groupView = this.assertGroupView(group);\n\n\t\treturn this.gridWidget.getViewSize(groupView);\n\t}\n\n\tsetSize(\n\t\tgroup: IEditorGroupView | GroupIdentifier,\n\t\tsize: { width: number; height: number },\n\t): void {\n\t\tconst groupView = this.assertGroupView(group);\n\n\t\tthis.gridWidget.resizeView(groupView, size);\n\t}\n\n\tarrangeGroups(\n\t\tarrangement: GroupsArrangement,\n\t\ttarget: IEditorGroupView | GroupIdentifier = this.activeGroup,\n\t): void {\n\t\tif (this.count < 2) {\n\t\t\treturn; // require at least 2 groups to show\n\t\t}\n\n\t\tif (!this.gridWidget) {\n\t\t\treturn; // we have not been created yet\n\t\t}\n\n\t\tconst groupView = this.assertGroupView(target);\n\n\t\tswitch (arrangement) {\n\t\t\tcase GroupsArrangement.EVEN:\n\t\t\t\tthis.gridWidget.distributeViewSizes();\n\t\t\t\tbreak;\n\t\t\tcase GroupsArrangement.MAXIMIZE:\n\t\t\t\tif (this.groups.length < 2) {\n\t\t\t\t\treturn; // need at least 2 groups to be maximized\n\t\t\t\t}\n\t\t\t\tthis.gridWidget.maximizeView(groupView);\n\t\t\t\tgroupView.focus();\n\t\t\t\tbreak;\n\t\t\tcase GroupsArrangement.EXPAND:\n\t\t\t\tthis.gridWidget.expandView(groupView);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\ttoggleMaximizeGroup(\n\t\ttarget: IEditorGroupView | GroupIdentifier = this.activeGroup,\n\t): void {\n\t\tif (this.hasMaximizedGroup()) {\n\t\t\tthis.unmaximizeGroup();\n\t\t} else {\n\t\t\tthis.arrangeGroups(GroupsArrangement.MAXIMIZE, target);\n\t\t}\n\t}\n\n\ttoggleExpandGroup(\n\t\ttarget: IEditorGroupView | GroupIdentifier = this.activeGroup,\n\t): void {\n\t\tif (this.isGroupExpanded(this.activeGroup)) {\n\t\t\tthis.arrangeGroups(GroupsArrangement.EVEN);\n\t\t} else {\n\t\t\tthis.arrangeGroups(GroupsArrangement.EXPAND, target);\n\t\t}\n\t}\n\n\tprivate unmaximizeGroup(): void {\n\t\tthis.gridWidget.exitMaximizedView();\n\t\tthis._activeGroup.focus(); // When making views visible the focus can be affected, so restore it\n\t}\n\n\thasMaximizedGroup(): boolean {\n\t\treturn this.gridWidget.hasMaximizedView();\n\t}\n\n\tprivate isGroupMaximized(targetGroup: IEditorGroupView): boolean {\n\t\treturn this.gridWidget.isViewMaximized(targetGroup);\n\t}\n\n\tisGroupExpanded(targetGroup: IEditorGroupView): boolean {\n\t\treturn this.gridWidget.isViewExpanded(targetGroup);\n\t}\n\n\tsetGroupOrientation(orientation: GroupOrientation): void {\n\t\tif (!this.gridWidget) {\n\t\t\treturn; // we have not been created yet\n\t\t}\n\n\t\tconst newOrientation =\n\t\t\torientation === GroupOrientation.HORIZONTAL\n\t\t\t\t? Orientation.HORIZONTAL\n\t\t\t\t: Orientation.VERTICAL;\n\t\tif (this.gridWidget.orientation !== newOrientation) {\n\t\t\tthis.gridWidget.orientation = newOrientation;\n\t\t}\n\t}\n\n\tapplyLayout(layout: EditorGroupLayout): void {\n\t\tconst restoreFocus = this.shouldRestoreFocus(this.container);\n\n\t\t// Determine how many groups we need overall\n\t\tlet layoutGroupsCount = 0;\n\t\tfunction countGroups(groups: GroupLayoutArgument[]): void {\n\t\t\tfor (const group of groups) {\n\t\t\t\tif (Array.isArray(group.groups)) {\n\t\t\t\t\tcountGroups(group.groups);\n\t\t\t\t} else {\n\t\t\t\t\tlayoutGroupsCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcountGroups(layout.groups);\n\n\t\t// If we currently have too many groups, merge them into the last one\n\t\tlet currentGroupViews = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\tif (layoutGroupsCount < currentGroupViews.length) {\n\t\t\tconst lastGroupInLayout = currentGroupViews[layoutGroupsCount - 1];\n\t\t\tcurrentGroupViews.forEach((group, index) => {\n\t\t\t\tif (index >= layoutGroupsCount) {\n\t\t\t\t\tthis.mergeGroup(group, lastGroupInLayout);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcurrentGroupViews = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\t}\n\n\t\tconst activeGroup = this.activeGroup;\n\n\t\t// Prepare grid descriptor to create new grid from\n\t\tconst gridDescriptor = createSerializedGrid({\n\t\t\torientation: this.toGridViewOrientation(\n\t\t\t\tlayout.orientation,\n\t\t\t\tthis.isTwoDimensionalGrid()\n\t\t\t\t\t? this.gridWidget.orientation\n\t\t\t\t\t: // preserve original orientation for 2-dimensional grids\n\t\t\t\t\t\torthogonal(this.gridWidget.orientation), // otherwise flip (fix https://github.com/microsoft/vscode/issues/52975)\n\t\t\t),\n\t\t\tgroups: layout.groups,\n\t\t});\n\n\t\t// Recreate gridwidget with descriptor\n\t\tthis.doApplyGridState(\n\t\t\tgridDescriptor,\n\t\t\tactiveGroup.id,\n\t\t\tcurrentGroupViews,\n\t\t);\n\n\t\t// Restore focus as needed\n\t\tif (restoreFocus) {\n\t\t\tthis._activeGroup.focus();\n\t\t}\n\t}\n\n\tgetLayout(): EditorGroupLayout {\n\t\t// Example return value:\n\t\t// { orientation: 0, groups: [ { groups: [ { size: 0.4 }, { size: 0.6 } ], size: 0.5 }, { groups: [ {}, {} ], size: 0.5 } ] }\n\n\t\tconst serializedGrid = this.gridWidget.serialize();\n\t\tconst orientation =\n\t\t\tserializedGrid.orientation === Orientation.HORIZONTAL\n\t\t\t\t? GroupOrientation.HORIZONTAL\n\t\t\t\t: GroupOrientation.VERTICAL;\n\t\tconst root = this.serializedNodeToGroupLayoutArgument(\n\t\t\tserializedGrid.root,\n\t\t);\n\n\t\treturn {\n\t\t\torientation,\n\t\t\tgroups: root.groups as GroupLayoutArgument[],\n\t\t};\n\t}\n\n\tprivate serializedNodeToGroupLayoutArgument(\n\t\tserializedNode: ISerializedNode,\n\t): GroupLayoutArgument {\n\t\tif (serializedNode.type === \"branch\") {\n\t\t\treturn {\n\t\t\t\tsize: serializedNode.size,\n\t\t\t\tgroups: serializedNode.data.map((node) =>\n\t\t\t\t\tthis.serializedNodeToGroupLayoutArgument(node),\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\treturn { size: serializedNode.size };\n\t}\n\n\tprotected shouldRestoreFocus(target: Element | undefined): boolean {\n\t\tif (!target) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst activeElement = getActiveElement();\n\t\tif (activeElement === target.ownerDocument.body) {\n\t\t\treturn true; // always restore focus if nothing is focused currently\n\t\t}\n\n\t\t// otherwise check for the active element being an ancestor of the target\n\t\treturn isAncestorOfActiveElement(target);\n\t}\n\n\tprivate isTwoDimensionalGrid(): boolean {\n\t\tconst views = this.gridWidget.getViews();\n\t\tif (isGridBranchNode(views)) {\n\t\t\t// the grid is 2-dimensional if any children\n\t\t\t// of the grid is a branch node\n\t\t\treturn views.children.some((child) => isGridBranchNode(child));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\taddGroup(\n\t\tlocation: IEditorGroupView | GroupIdentifier,\n\t\tdirection: GroupDirection,\n\t\tgroupToCopy?: IEditorGroupView,\n\t): IEditorGroupView {\n\t\tconst locationView = this.assertGroupView(location);\n\n\t\tlet newGroupView: IEditorGroupView;\n\n\t\t// Same groups view: add to grid widget directly\n\t\tif (locationView.groupsView === this) {\n\t\t\tconst restoreFocus = this.shouldRestoreFocus(locationView.element);\n\n\t\t\tconst shouldExpand =\n\t\t\t\tthis.groupViews.size > 1 && this.isGroupExpanded(locationView);\n\t\t\tnewGroupView = this.doCreateGroupView(groupToCopy);\n\n\t\t\t// Add to grid widget\n\t\t\tthis.gridWidget.addView(\n\t\t\t\tnewGroupView,\n\t\t\t\tthis.getSplitSizingStyle(),\n\t\t\t\tlocationView,\n\t\t\t\tthis.toGridViewDirection(direction),\n\t\t\t);\n\n\t\t\t// Update container\n\t\t\tthis.updateContainer();\n\n\t\t\t// Event\n\t\t\tthis._onDidAddGroup.fire(newGroupView);\n\n\t\t\t// Notify group index change given a new group was added\n\t\t\tthis.notifyGroupIndexChange();\n\n\t\t\t// Expand new group, if the reference view was previously expanded\n\t\t\tif (shouldExpand) {\n\t\t\t\tthis.arrangeGroups(GroupsArrangement.EXPAND, newGroupView);\n\t\t\t}\n\n\t\t\t// Restore focus if we had it previously after completing the grid\n\t\t\t// operation. That operation might cause reparenting of grid views\n\t\t\t// which moves focus to the <body> element otherwise.\n\t\t\tif (restoreFocus) {\n\t\t\t\tlocationView.focus();\n\t\t\t}\n\t\t}\n\n\t\t// Different group view: add to grid widget of that group\n\t\telse {\n\t\t\tnewGroupView = locationView.groupsView.addGroup(\n\t\t\t\tlocationView,\n\t\t\t\tdirection,\n\t\t\t\tgroupToCopy,\n\t\t\t);\n\t\t}\n\n\t\treturn newGroupView;\n\t}\n\n\tprivate getSplitSizingStyle(): Sizing {\n\t\tswitch (this._partOptions.splitSizing) {\n\t\t\tcase \"distribute\":\n\t\t\t\treturn Sizing.Distribute;\n\t\t\tcase \"split\":\n\t\t\t\treturn Sizing.Split;\n\t\t\tdefault:\n\t\t\t\treturn Sizing.Auto;\n\t\t}\n\t}\n\n\tprivate doCreateGroupView(\n\t\tfrom?: IEditorGroupView | ISerializedEditorGroupModel | null,\n\t\toptions?: IEditorGroupViewOptions,\n\t): IEditorGroupView {\n\t\t// Create group view\n\t\tlet groupView: IEditorGroupView;\n\t\tif (from instanceof EditorGroupView) {\n\t\t\tgroupView = EditorGroupView.createCopy(\n\t\t\t\tfrom,\n\t\t\t\tthis.editorPartsView,\n\t\t\t\tthis,\n\t\t\t\tthis.groupsLabel,\n\t\t\t\tthis.count,\n\t\t\t\tthis.scopedInstantiationService,\n\t\t\t\toptions,\n\t\t\t);\n\t\t} else if (isSerializedEditorGroupModel(from)) {\n\t\t\tgroupView = EditorGroupView.createFromSerialized(\n\t\t\t\tfrom,\n\t\t\t\tthis.editorPartsView,\n\t\t\t\tthis,\n\t\t\t\tthis.groupsLabel,\n\t\t\t\tthis.count,\n\t\t\t\tthis.scopedInstantiationService,\n\t\t\t\toptions,\n\t\t\t);\n\t\t} else {\n\t\t\tgroupView = EditorGroupView.createNew(\n\t\t\t\tthis.editorPartsView,\n\t\t\t\tthis,\n\t\t\t\tthis.groupsLabel,\n\t\t\t\tthis.count,\n\t\t\t\tthis.scopedInstantiationService,\n\t\t\t\toptions,\n\t\t\t);\n\t\t}\n\n\t\t// Keep in map\n\t\tthis.groupViews.set(groupView.id, groupView);\n\n\t\t// Track focus\n\t\tconst groupDisposables = new DisposableStore();\n\t\tgroupDisposables.add(\n\t\t\tgroupView.onDidFocus(() => {\n\t\t\t\tthis.doSetGroupActive(groupView);\n\n\t\t\t\tthis._onDidFocus.fire();\n\t\t\t}),\n\t\t);\n\n\t\t// Track group changes\n\t\tgroupDisposables.add(\n\t\t\tgroupView.onDidModelChange((e) => {\n\t\t\t\tswitch (e.kind) {\n\t\t\t\t\tcase GroupModelChangeKind.GROUP_LOCKED:\n\t\t\t\t\t\tthis._onDidChangeGroupLocked.fire(groupView);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GroupModelChangeKind.GROUP_INDEX:\n\t\t\t\t\t\tthis._onDidChangeGroupIndex.fire(groupView);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GroupModelChangeKind.GROUP_LABEL:\n\t\t\t\t\t\tthis._onDidChangeGroupLabel.fire(groupView);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Track active editor change after it occurred\n\t\tgroupDisposables.add(\n\t\t\tgroupView.onDidActiveEditorChange(() => {\n\t\t\t\tthis.updateContainer();\n\t\t\t}),\n\t\t);\n\n\t\t// Track dispose\n\t\tEvent.once(groupView.onWillDispose)(() => {\n\t\t\tdispose(groupDisposables);\n\t\t\tthis.groupViews.delete(groupView.id);\n\t\t\tthis.doUpdateMostRecentActive(groupView);\n\t\t});\n\n\t\treturn groupView;\n\t}\n\n\tprivate doSetGroupActive(group: IEditorGroupView): void {\n\t\tif (this._activeGroup !== group) {\n\t\t\tconst previousActiveGroup = this._activeGroup;\n\t\t\tthis._activeGroup = group;\n\n\t\t\t// Update list of most recently active groups\n\t\t\tthis.doUpdateMostRecentActive(group, true);\n\n\t\t\t// Mark previous one as inactive\n\t\t\tif (previousActiveGroup && !previousActiveGroup.disposed) {\n\t\t\t\tpreviousActiveGroup.setActive(false);\n\t\t\t}\n\n\t\t\t// Mark group as new active\n\t\t\tgroup.setActive(true);\n\n\t\t\t// Expand the group if it is currently minimized\n\t\t\tthis.doRestoreGroup(group);\n\n\t\t\t// Event\n\t\t\tthis._onDidChangeActiveGroup.fire(group);\n\t\t}\n\n\t\t// Always fire the event that a group has been activated\n\t\t// even if its the same group that is already active to\n\t\t// signal the intent even when nothing has changed.\n\t\tthis._onDidActivateGroup.fire(group);\n\t}\n\n\tprivate doRestoreGroup(group: IEditorGroupView): void {\n\t\tif (!this.gridWidget) {\n\t\t\treturn; // method is called as part of state restore very early\n\t\t}\n\n\t\tif (this.hasMaximizedGroup() && !this.isGroupMaximized(group)) {\n\t\t\tthis.unmaximizeGroup();\n\t\t}\n\n\t\ttry {\n\t\t\tconst viewSize = this.gridWidget.getViewSize(group);\n\t\t\tif (\n\t\t\t\tviewSize.width === group.minimumWidth ||\n\t\t\t\tviewSize.height === group.minimumHeight\n\t\t\t) {\n\t\t\t\tthis.arrangeGroups(GroupsArrangement.EXPAND, group);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore: method might be called too early before view is known to grid\n\t\t}\n\t}\n\n\tprivate doUpdateMostRecentActive(\n\t\tgroup: IEditorGroupView,\n\t\tmakeMostRecentlyActive?: boolean,\n\t): void {\n\t\tconst index = this.mostRecentActiveGroups.indexOf(group.id);\n\n\t\t// Remove from MRU list\n\t\tif (index !== -1) {\n\t\t\tthis.mostRecentActiveGroups.splice(index, 1);\n\t\t}\n\n\t\t// Add to front as needed\n\t\tif (makeMostRecentlyActive) {\n\t\t\tthis.mostRecentActiveGroups.unshift(group.id);\n\t\t}\n\t}\n\n\tprivate toGridViewDirection(direction: GroupDirection): Direction {\n\t\tswitch (direction) {\n\t\t\tcase GroupDirection.UP:\n\t\t\t\treturn Direction.Up;\n\t\t\tcase GroupDirection.DOWN:\n\t\t\t\treturn Direction.Down;\n\t\t\tcase GroupDirection.LEFT:\n\t\t\t\treturn Direction.Left;\n\t\t\tcase GroupDirection.RIGHT:\n\t\t\t\treturn Direction.Right;\n\t\t}\n\t}\n\n\tprivate toGridViewOrientation(\n\t\torientation: GroupOrientation,\n\t\tfallback: Orientation,\n\t): Orientation {\n\t\tif (typeof orientation === \"number\") {\n\t\t\treturn orientation === GroupOrientation.HORIZONTAL\n\t\t\t\t? Orientation.HORIZONTAL\n\t\t\t\t: Orientation.VERTICAL;\n\t\t}\n\n\t\treturn fallback;\n\t}\n\n\tremoveGroup(\n\t\tgroup: IEditorGroupView | GroupIdentifier,\n\t\tpreserveFocus?: boolean,\n\t): void {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tif (this.count === 1) {\n\t\t\treturn; // Cannot remove the last root group\n\t\t}\n\n\t\t// Remove empty group\n\t\tif (groupView.isEmpty) {\n\t\t\tthis.doRemoveEmptyGroup(groupView, preserveFocus);\n\t\t}\n\n\t\t// Remove group with editors\n\t\telse {\n\t\t\tthis.doRemoveGroupWithEditors(groupView);\n\t\t}\n\t}\n\n\tprivate doRemoveGroupWithEditors(groupView: IEditorGroupView): void {\n\t\tconst mostRecentlyActiveGroups = this.getGroups(\n\t\t\tGroupsOrder.MOST_RECENTLY_ACTIVE,\n\t\t);\n\n\t\tlet lastActiveGroup: IEditorGroupView;\n\t\tif (this._activeGroup === groupView) {\n\t\t\tlastActiveGroup = mostRecentlyActiveGroups[1];\n\t\t} else {\n\t\t\tlastActiveGroup = mostRecentlyActiveGroups[0];\n\t\t}\n\n\t\t// Removing a group with editors should merge these editors into the\n\t\t// last active group and then remove this group.\n\t\tthis.mergeGroup(groupView, lastActiveGroup);\n\t}\n\n\tprivate doRemoveEmptyGroup(\n\t\tgroupView: IEditorGroupView,\n\t\tpreserveFocus?: boolean,\n\t): void {\n\t\tconst restoreFocus =\n\t\t\t!preserveFocus && this.shouldRestoreFocus(this.container);\n\n\t\t// Activate next group if the removed one was active\n\t\tif (this._activeGroup === groupView) {\n\t\t\tconst mostRecentlyActiveGroups = this.getGroups(\n\t\t\t\tGroupsOrder.MOST_RECENTLY_ACTIVE,\n\t\t\t);\n\t\t\tconst nextActiveGroup = mostRecentlyActiveGroups[1]; // [0] will be the current group we are about to dispose\n\t\t\tthis.doSetGroupActive(nextActiveGroup);\n\t\t}\n\n\t\t// Remove from grid widget & dispose\n\t\tthis.gridWidget.removeView(groupView, this.getSplitSizingStyle());\n\t\tgroupView.dispose();\n\n\t\t// Restore focus if we had it previously after completing the grid\n\t\t// operation. That operation might cause reparenting of grid views\n\t\t// which moves focus to the <body> element otherwise.\n\t\tif (restoreFocus) {\n\t\t\tthis._activeGroup.focus();\n\t\t}\n\n\t\t// Notify group index change given a group was removed\n\t\tthis.notifyGroupIndexChange();\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Event\n\t\tthis._onDidRemoveGroup.fire(groupView);\n\t}\n\n\tmoveGroup(\n\t\tgroup: IEditorGroupView | GroupIdentifier,\n\t\tlocation: IEditorGroupView | GroupIdentifier,\n\t\tdirection: GroupDirection,\n\t): IEditorGroupView {\n\t\tconst sourceView = this.assertGroupView(group);\n\t\tconst targetView = this.assertGroupView(location);\n\n\t\tif (sourceView.id === targetView.id) {\n\t\t\tthrow new Error(\"Cannot move group into its own\");\n\t\t}\n\n\t\tconst restoreFocus = this.shouldRestoreFocus(sourceView.element);\n\t\tlet movedView: IEditorGroupView;\n\n\t\t// Same groups view: move via grid widget API\n\t\tif (sourceView.groupsView === targetView.groupsView) {\n\t\t\tthis.gridWidget.moveView(\n\t\t\t\tsourceView,\n\t\t\t\tthis.getSplitSizingStyle(),\n\t\t\t\ttargetView,\n\t\t\t\tthis.toGridViewDirection(direction),\n\t\t\t);\n\t\t\tmovedView = sourceView;\n\t\t}\n\n\t\t// Different groups view: move via groups view API\n\t\telse {\n\t\t\tmovedView = targetView.groupsView.addGroup(\n\t\t\t\ttargetView,\n\t\t\t\tdirection,\n\t\t\t\tsourceView,\n\t\t\t);\n\t\t\tsourceView.closeAllEditors();\n\t\t\tthis.removeGroup(sourceView, restoreFocus);\n\t\t}\n\n\t\t// Restore focus if we had it previously after completing the grid\n\t\t// operation. That operation might cause reparenting of grid views\n\t\t// which moves focus to the <body> element otherwise.\n\t\tif (restoreFocus) {\n\t\t\tmovedView.focus();\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidMoveGroup.fire(movedView);\n\n\t\t// Notify group index change given a group was moved\n\t\tthis.notifyGroupIndexChange();\n\n\t\treturn movedView;\n\t}\n\n\tcopyGroup(\n\t\tgroup: IEditorGroupView | GroupIdentifier,\n\t\tlocation: IEditorGroupView | GroupIdentifier,\n\t\tdirection: GroupDirection,\n\t): IEditorGroupView {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tconst locationView = this.assertGroupView(location);\n\n\t\tconst restoreFocus = this.shouldRestoreFocus(groupView.element);\n\n\t\t// Copy the group view\n\t\tconst copiedGroupView = this.addGroup(\n\t\t\tlocationView,\n\t\t\tdirection,\n\t\t\tgroupView,\n\t\t);\n\n\t\t// Restore focus if we had it\n\t\tif (restoreFocus) {\n\t\t\tcopiedGroupView.focus();\n\t\t}\n\n\t\treturn copiedGroupView;\n\t}\n\n\tmergeGroup(\n\t\tgroup: IEditorGroupView | GroupIdentifier,\n\t\ttarget: IEditorGroupView | GroupIdentifier,\n\t\toptions?: IMergeGroupOptions,\n\t): boolean {\n\t\tconst sourceView = this.assertGroupView(group);\n\t\tconst targetView = this.assertGroupView(target);\n\n\t\t// Collect editors to move/copy\n\t\tconst editors: EditorInputWithOptions[] = [];\n\t\tlet index =\n\t\t\toptions && typeof options.index === \"number\"\n\t\t\t\t? options.index\n\t\t\t\t: targetView.count;\n\t\tfor (const editor of sourceView.editors) {\n\t\t\tconst inactive =\n\t\t\t\t!sourceView.isActive(editor) ||\n\t\t\t\tthis._activeGroup !== sourceView;\n\t\t\tconst sticky = sourceView.isSticky(editor);\n\t\t\tconst options = {\n\t\t\t\tindex: sticky\n\t\t\t\t\t? undefined /* do not set index to preserve sticky flag */\n\t\t\t\t\t: index /* do not set index to preserve sticky flag */,\n\t\t\t\tinactive,\n\t\t\t\tpreserveFocus: inactive,\n\t\t\t};\n\n\t\t\teditors.push({ editor, options });\n\n\t\t\tindex++;\n\t\t}\n\n\t\t// Move/Copy editors over into target\n\t\tlet result = true;\n\t\tif (options?.mode === MergeGroupMode.COPY_EDITORS) {\n\t\t\tsourceView.copyEditors(editors, targetView);\n\t\t} else {\n\t\t\tresult = sourceView.moveEditors(editors, targetView);\n\t\t}\n\n\t\t// Remove source if the view is now empty and not already removed\n\t\tif (\n\t\t\tsourceView.isEmpty &&\n\t\t\t!sourceView.disposed /* could have been disposed already via workbench.editor.closeEmptyGroups setting */\n\t\t) {\n\t\t\tthis.removeGroup(sourceView, true);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tmergeAllGroups(target: IEditorGroupView | GroupIdentifier): boolean {\n\t\tconst targetView = this.assertGroupView(target);\n\n\t\tlet result = true;\n\t\tfor (const group of this.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\tif (group === targetView) {\n\t\t\t\tcontinue; // keep target\n\t\t\t}\n\n\t\t\tconst merged = this.mergeGroup(group, targetView);\n\t\t\tif (!merged) {\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprotected assertGroupView(\n\t\tgroup: IEditorGroupView | GroupIdentifier,\n\t): IEditorGroupView {\n\t\tlet groupView: IEditorGroupView | undefined;\n\t\tif (typeof group === \"number\") {\n\t\t\tgroupView = this.editorPartsView.getGroup(group);\n\t\t} else {\n\t\t\tgroupView = group;\n\t\t}\n\n\t\tif (!groupView) {\n\t\t\tthrow new Error(\"Invalid editor group provided!\");\n\t\t}\n\n\t\treturn groupView;\n\t}\n\n\tcreateEditorDropTarget(\n\t\tcontainer: unknown,\n\t\tdelegate: IEditorDropTargetDelegate,\n\t): IDisposable {\n\t\tassertType(isHTMLElement(container));\n\n\t\treturn this.scopedInstantiationService.createInstance(\n\t\t\tEditorDropTarget,\n\t\t\tcontainer,\n\t\t\tdelegate,\n\t\t);\n\t}\n\n\t//#region Part\n\n\t// TODO @sbatten @joao find something better to prevent editor taking over #79897\n\tget minimumWidth(): number {\n\t\treturn Math.min(\n\t\t\tthis.centeredLayoutWidget.minimumWidth,\n\t\t\tthis.layoutService.getMaximumEditorDimensions(\n\t\t\t\tthis.layoutService.getContainer(getWindow(this.container)),\n\t\t\t).width,\n\t\t);\n\t}\n\tget maximumWidth(): number {\n\t\treturn this.centeredLayoutWidget.maximumWidth;\n\t}\n\tget minimumHeight(): number {\n\t\treturn Math.min(\n\t\t\tthis.centeredLayoutWidget.minimumHeight,\n\t\t\tthis.layoutService.getMaximumEditorDimensions(\n\t\t\t\tthis.layoutService.getContainer(getWindow(this.container)),\n\t\t\t).height,\n\t\t);\n\t}\n\tget maximumHeight(): number {\n\t\treturn this.centeredLayoutWidget.maximumHeight;\n\t}\n\n\tget snap(): boolean {\n\t\treturn this.layoutService.getPanelAlignment() === \"center\";\n\t}\n\n\toverride get onDidChange(): Event<IViewSize | undefined> {\n\t\treturn Event.any(\n\t\t\tthis.centeredLayoutWidget.onDidChange,\n\t\t\tthis.onDidSetGridWidget.event,\n\t\t);\n\t}\n\treadonly priority: LayoutPriority = LayoutPriority.High;\n\n\tprivate get gridSeparatorBorder(): Color {\n\t\treturn (\n\t\t\tthis.theme.getColor(EDITOR_GROUP_BORDER) ||\n\t\t\tthis.theme.getColor(contrastBorder) ||\n\t\t\tColor.transparent\n\t\t);\n\t}\n\n\toverride updateStyles(): void {\n\t\tconst container = assertIsDefined(this.container);\n\t\tcontainer.style.backgroundColor = this.getColor(editorBackground) || \"\";\n\n\t\tconst separatorBorderStyle = {\n\t\t\tseparatorBorder: this.gridSeparatorBorder,\n\t\t\tbackground:\n\t\t\t\tthis.theme.getColor(EDITOR_PANE_BACKGROUND) ||\n\t\t\t\tColor.transparent,\n\t\t};\n\t\tthis.gridWidget.style(separatorBorderStyle);\n\t\tthis.centeredLayoutWidget.styles(separatorBorderStyle);\n\t}\n\n\tprotected override createContentArea(\n\t\tparent: HTMLElement,\n\t\toptions?: IEditorPartCreationOptions,\n\t): HTMLElement {\n\t\t// Container\n\t\tthis.element = parent;\n\t\tthis.container = document.createElement(\"div\");\n\t\tthis.container.classList.add(\"content\");\n\t\tif (this.windowId !== mainWindow.vscodeWindowId) {\n\t\t\tthis.container.classList.add(\"auxiliary\");\n\t\t}\n\t\tparent.appendChild(this.container);\n\n\t\t// Scoped instantiation service\n\t\tconst scopedContextKeyService = this._register(\n\t\t\tthis.contextKeyService.createScoped(this.container),\n\t\t);\n\t\tthis.scopedInstantiationService = this._register(\n\t\t\tthis.instantiationService.createChild(\n\t\t\t\tnew ServiceCollection([\n\t\t\t\t\tIContextKeyService,\n\t\t\t\t\tscopedContextKeyService,\n\t\t\t\t]),\n\t\t\t),\n\t\t);\n\n\t\t// Grid control\n\t\tthis._willRestoreState = !options || options.restorePreviousState;\n\t\tthis.doCreateGridControl();\n\n\t\t// Centered layout widget\n\t\tthis.centeredLayoutWidget = this._register(\n\t\t\tnew CenteredViewLayout(\n\t\t\t\tthis.container,\n\t\t\t\tthis.gridWidgetView,\n\t\t\t\tthis.profileMemento[\n\t\t\t\t\tEditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY\n\t\t\t\t],\n\t\t\t\tthis._partOptions.centeredLayoutFixedWidth,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.onDidChangeEditorPartOptions((e) =>\n\t\t\t\tthis.centeredLayoutWidget.setFixedWidth(\n\t\t\t\t\te.newPartOptions.centeredLayoutFixedWidth ?? false,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\t// Drag & Drop support\n\t\tthis.setupDragAndDropSupport(parent, this.container);\n\n\t\t// Context keys\n\t\tthis.handleContextKeys(scopedContextKeyService);\n\n\t\t// Signal ready\n\t\tthis.whenReadyPromise.complete();\n\t\tthis._isReady = true;\n\n\t\t// Signal restored\n\t\tPromises.settled(\n\t\t\tthis.groups.map((group) => group.whenRestored),\n\t\t).finally(() => {\n\t\t\tthis.whenRestoredPromise.complete();\n\t\t});\n\n\t\treturn this.container;\n\t}\n\n\tprivate handleContextKeys(contextKeyService: IContextKeyService): void {\n\t\tconst isAuxiliaryEditorPartContext =\n\t\t\tIsAuxiliaryEditorPartContext.bindTo(contextKeyService);\n\t\tisAuxiliaryEditorPartContext.set(\n\t\t\tthis.windowId !== mainWindow.vscodeWindowId,\n\t\t);\n\n\t\tconst multipleEditorGroupsContext =\n\t\t\tEditorPartMultipleEditorGroupsContext.bindTo(contextKeyService);\n\t\tconst maximizedEditorGroupContext =\n\t\t\tEditorPartMaximizedEditorGroupContext.bindTo(contextKeyService);\n\n\t\tconst updateContextKeys = () => {\n\t\t\tconst groupCount = this.count;\n\t\t\tif (groupCount > 1) {\n\t\t\t\tmultipleEditorGroupsContext.set(true);\n\t\t\t} else {\n\t\t\t\tmultipleEditorGroupsContext.reset();\n\t\t\t}\n\n\t\t\tif (this.hasMaximizedGroup()) {\n\t\t\t\tmaximizedEditorGroupContext.set(true);\n\t\t\t} else {\n\t\t\t\tmaximizedEditorGroupContext.reset();\n\t\t\t}\n\t\t};\n\n\t\tupdateContextKeys();\n\n\t\tthis._register(this.onDidAddGroup(() => updateContextKeys()));\n\t\tthis._register(this.onDidRemoveGroup(() => updateContextKeys()));\n\t\tthis._register(\n\t\t\tthis.onDidChangeGroupMaximized(() => updateContextKeys()),\n\t\t);\n\t}\n\n\tprivate setupDragAndDropSupport(\n\t\tparent: HTMLElement,\n\t\tcontainer: HTMLElement,\n\t): void {\n\t\t// Editor drop target\n\t\tthis._register(\n\t\t\tthis.createEditorDropTarget(container, Object.create(null)),\n\t\t);\n\n\t\t// No drop in the editor\n\t\tconst overlay = document.createElement(\"div\");\n\t\toverlay.classList.add(\"drop-block-overlay\");\n\t\tparent.appendChild(overlay);\n\n\t\t// Hide the block if a mouse down event occurs #99065\n\t\tthis._register(\n\t\t\taddDisposableGenericMouseDownListener(overlay, () =>\n\t\t\t\toverlay.classList.remove(\"visible\"),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tCompositeDragAndDropObserver.INSTANCE.registerTarget(this.element, {\n\t\t\t\tonDragStart: (e) => overlay.classList.add(\"visible\"),\n\t\t\t\tonDragEnd: (e) => overlay.classList.remove(\"visible\"),\n\t\t\t}),\n\t\t);\n\n\t\tlet horizontalOpenerTimeout: any;\n\t\tlet verticalOpenerTimeout: any;\n\t\tlet lastOpenHorizontalPosition: Position | undefined;\n\t\tlet lastOpenVerticalPosition: Position | undefined;\n\t\tconst openPartAtPosition = (position: Position) => {\n\t\t\tif (\n\t\t\t\t!this.layoutService.isVisible(Parts.PANEL_PART) &&\n\t\t\t\tposition === this.layoutService.getPanelPosition()\n\t\t\t) {\n\t\t\t\tthis.layoutService.setPartHidden(false, Parts.PANEL_PART);\n\t\t\t} else if (\n\t\t\t\t!this.layoutService.isVisible(Parts.AUXILIARYBAR_PART) &&\n\t\t\t\tposition ===\n\t\t\t\t\t(this.layoutService.getSideBarPosition() === Position.RIGHT\n\t\t\t\t\t\t? Position.LEFT\n\t\t\t\t\t\t: Position.RIGHT)\n\t\t\t) {\n\t\t\t\tthis.layoutService.setPartHidden(\n\t\t\t\t\tfalse,\n\t\t\t\t\tParts.AUXILIARYBAR_PART,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\tconst clearAllTimeouts = () => {\n\t\t\tif (horizontalOpenerTimeout) {\n\t\t\t\tclearTimeout(horizontalOpenerTimeout);\n\t\t\t\thorizontalOpenerTimeout = undefined;\n\t\t\t}\n\n\t\t\tif (verticalOpenerTimeout) {\n\t\t\t\tclearTimeout(verticalOpenerTimeout);\n\t\t\t\tverticalOpenerTimeout = undefined;\n\t\t\t}\n\t\t};\n\n\t\tthis._register(\n\t\t\tCompositeDragAndDropObserver.INSTANCE.registerTarget(overlay, {\n\t\t\t\tonDragOver: (e) => {\n\t\t\t\t\tEventHelper.stop(e.eventData, true);\n\t\t\t\t\tif (e.eventData.dataTransfer) {\n\t\t\t\t\t\te.eventData.dataTransfer.dropEffect = \"none\";\n\t\t\t\t\t}\n\n\t\t\t\t\tconst boundingRect = overlay.getBoundingClientRect();\n\n\t\t\t\t\tlet openHorizontalPosition: Position | undefined;\n\t\t\t\t\tlet openVerticalPosition: Position | undefined;\n\t\t\t\t\tconst proximity = 100;\n\t\t\t\t\tif (e.eventData.clientX < boundingRect.left + proximity) {\n\t\t\t\t\t\topenHorizontalPosition = Position.LEFT;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.eventData.clientX > boundingRect.right - proximity) {\n\t\t\t\t\t\topenHorizontalPosition = Position.RIGHT;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.eventData.clientY > boundingRect.bottom - proximity) {\n\t\t\t\t\t\topenVerticalPosition = Position.BOTTOM;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.eventData.clientY < boundingRect.top + proximity) {\n\t\t\t\t\t\topenVerticalPosition = Position.TOP;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\thorizontalOpenerTimeout &&\n\t\t\t\t\t\topenHorizontalPosition !== lastOpenHorizontalPosition\n\t\t\t\t\t) {\n\t\t\t\t\t\tclearTimeout(horizontalOpenerTimeout);\n\t\t\t\t\t\thorizontalOpenerTimeout = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tverticalOpenerTimeout &&\n\t\t\t\t\t\topenVerticalPosition !== lastOpenVerticalPosition\n\t\t\t\t\t) {\n\t\t\t\t\t\tclearTimeout(verticalOpenerTimeout);\n\t\t\t\t\t\tverticalOpenerTimeout = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!horizontalOpenerTimeout &&\n\t\t\t\t\t\topenHorizontalPosition !== undefined\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastOpenHorizontalPosition = openHorizontalPosition;\n\t\t\t\t\t\thorizontalOpenerTimeout = setTimeout(\n\t\t\t\t\t\t\t() => openPartAtPosition(openHorizontalPosition),\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!verticalOpenerTimeout &&\n\t\t\t\t\t\topenVerticalPosition !== undefined\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastOpenVerticalPosition = openVerticalPosition;\n\t\t\t\t\t\tverticalOpenerTimeout = setTimeout(\n\t\t\t\t\t\t\t() => openPartAtPosition(openVerticalPosition),\n\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonDragLeave: () => clearAllTimeouts(),\n\t\t\t\tonDragEnd: () => clearAllTimeouts(),\n\t\t\t\tonDrop: () => clearAllTimeouts(),\n\t\t\t}),\n\t\t);\n\t}\n\n\tcenterLayout(active: boolean): void {\n\t\tthis.centeredLayoutWidget.activate(active);\n\n\t\tthis._activeGroup.focus();\n\t}\n\n\tisLayoutCentered(): boolean {\n\t\tif (this.centeredLayoutWidget) {\n\t\t\treturn this.centeredLayoutWidget.isActive();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate doCreateGridControl(): void {\n\t\t// Grid Widget (with previous UI state)\n\t\tlet restoreError = false;\n\t\tif (this._willRestoreState) {\n\t\t\trestoreError = !this.doCreateGridControlWithPreviousState();\n\t\t}\n\n\t\t// Grid Widget (no previous UI state or failed to restore)\n\t\tif (!this.gridWidget || restoreError) {\n\t\t\tconst initialGroup = this.doCreateGroupView();\n\t\t\tthis.doSetGridWidget(new SerializableGrid(initialGroup));\n\n\t\t\t// Ensure a group is active\n\t\t\tthis.doSetGroupActive(initialGroup);\n\t\t}\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Notify group index change we created the entire grid\n\t\tthis.notifyGroupIndexChange();\n\t}\n\n\tprivate doCreateGridControlWithPreviousState(): boolean {\n\t\tconst state: IEditorPartUIState | undefined = this.loadState();\n\t\tif (state?.serializedGrid) {\n\t\t\ttry {\n\t\t\t\t// MRU\n\t\t\t\tthis.mostRecentActiveGroups = state.mostRecentActiveGroups;\n\n\t\t\t\t// Grid Widget\n\t\t\t\tthis.doCreateGridControlWithState(\n\t\t\t\t\tstate.serializedGrid,\n\t\t\t\t\tstate.activeGroup,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// Log error\n\t\t\t\tonUnexpectedError(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`Error restoring editor grid widget: ${error} (with state: ${JSON.stringify(state)})`,\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t\t// Clear any state we have from the failing restore\n\t\t\t\tthis.disposeGroups();\n\n\t\t\t\treturn false; // failure\n\t\t\t}\n\t\t}\n\n\t\treturn true; // success\n\t}\n\n\tprivate doCreateGridControlWithState(\n\t\tserializedGrid: ISerializedGrid,\n\t\tactiveGroupId: GroupIdentifier,\n\t\teditorGroupViewsToReuse?: IEditorGroupView[],\n\t\toptions?: IEditorGroupViewOptions,\n\t): void {\n\t\t// Determine group views to reuse if any\n\t\tlet reuseGroupViews: IEditorGroupView[];\n\t\tif (editorGroupViewsToReuse) {\n\t\t\treuseGroupViews = editorGroupViewsToReuse.slice(0); // do not modify original array\n\t\t} else {\n\t\t\treuseGroupViews = [];\n\t\t}\n\n\t\t// Create new\n\t\tconst groupViews: IEditorGroupView[] = [];\n\t\tconst gridWidget = SerializableGrid.deserialize(\n\t\t\tserializedGrid,\n\t\t\t{\n\t\t\t\tfromJSON: (\n\t\t\t\t\tserializedEditorGroup: ISerializedEditorGroupModel | null,\n\t\t\t\t) => {\n\t\t\t\t\tlet groupView: IEditorGroupView;\n\t\t\t\t\tif (reuseGroupViews.length > 0) {\n\t\t\t\t\t\tgroupView = reuseGroupViews.shift()!;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgroupView = this.doCreateGroupView(\n\t\t\t\t\t\t\tserializedEditorGroup,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupViews.push(groupView);\n\n\t\t\t\t\tif (groupView.id === activeGroupId) {\n\t\t\t\t\t\tthis.doSetGroupActive(groupView);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn groupView;\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ styles: { separatorBorder: this.gridSeparatorBorder } },\n\t\t);\n\n\t\t// If the active group was not found when restoring the grid\n\t\t// make sure to make at least one group active. We always need\n\t\t// an active group.\n\t\tif (!this._activeGroup) {\n\t\t\tthis.doSetGroupActive(groupViews[0]);\n\t\t}\n\n\t\t// Validate MRU group views matches grid widget state\n\t\tif (\n\t\t\tthis.mostRecentActiveGroups.some(\n\t\t\t\t(groupId) => !this.getGroup(groupId),\n\t\t\t)\n\t\t) {\n\t\t\tthis.mostRecentActiveGroups = groupViews.map((group) => group.id);\n\t\t}\n\n\t\t// Set it\n\t\tthis.doSetGridWidget(gridWidget);\n\t}\n\n\tprivate doSetGridWidget(\n\t\tgridWidget: SerializableGrid<IEditorGroupView>,\n\t): void {\n\t\tlet boundarySashes: IBoundarySashes = {};\n\n\t\tif (this.gridWidget) {\n\t\t\tboundarySashes = this.gridWidget.boundarySashes;\n\t\t\tthis.gridWidget.dispose();\n\t\t}\n\n\t\tthis.gridWidget = gridWidget;\n\t\tthis.gridWidget.boundarySashes = boundarySashes;\n\t\tthis.gridWidgetView.gridWidget = gridWidget;\n\n\t\tthis._onDidChangeSizeConstraints.input = gridWidget.onDidChange;\n\t\tthis._onDidScroll.input = gridWidget.onDidScroll;\n\t\tthis.gridWidgetDisposables.clear();\n\t\tthis.gridWidgetDisposables.add(\n\t\t\tgridWidget.onDidChangeViewMaximized((maximized) =>\n\t\t\t\tthis._onDidChangeGroupMaximized.fire(maximized),\n\t\t\t),\n\t\t);\n\n\t\tthis._onDidChangeGroupMaximized.fire(this.hasMaximizedGroup());\n\n\t\tthis.onDidSetGridWidget.fire(undefined);\n\t}\n\n\tprivate updateContainer(): void {\n\t\tconst container = assertIsDefined(this.container);\n\t\tcontainer.classList.toggle(\"empty\", this.isEmpty);\n\t}\n\n\tprivate notifyGroupIndexChange(): void {\n\t\tthis.getGroups(GroupsOrder.GRID_APPEARANCE).forEach((group, index) =>\n\t\t\tgroup.notifyIndexChanged(index),\n\t\t);\n\t}\n\n\tnotifyGroupsLabelChange(newLabel: string) {\n\t\tfor (const group of this.groups) {\n\t\t\tgroup.notifyLabelChanged(newLabel);\n\t\t}\n\t}\n\n\tprivate get isEmpty(): boolean {\n\t\treturn this.count === 1 && this._activeGroup.isEmpty;\n\t}\n\n\tsetBoundarySashes(sashes: IBoundarySashes): void {\n\t\tthis.gridWidget.boundarySashes = sashes;\n\t\tthis.centeredLayoutWidget.boundarySashes = sashes;\n\t}\n\n\toverride layout(\n\t\twidth: number,\n\t\theight: number,\n\t\ttop: number,\n\t\tleft: number,\n\t): void {\n\t\tthis.top = top;\n\t\tthis.left = left;\n\n\t\t// Layout contents\n\t\tconst contentAreaSize = super.layoutContents(width, height).contentSize;\n\n\t\t// Layout editor container\n\t\tthis.doLayout(Dimension.lift(contentAreaSize), top, left);\n\t}\n\n\tprivate doLayout(\n\t\tdimension: Dimension,\n\t\ttop = this.top,\n\t\tleft = this.left,\n\t): void {\n\t\tthis._contentDimension = dimension;\n\n\t\t// Layout Grid\n\t\tthis.centeredLayoutWidget.layout(\n\t\t\tthis._contentDimension.width,\n\t\t\tthis._contentDimension.height,\n\t\t\ttop,\n\t\t\tleft,\n\t\t);\n\n\t\t// Event\n\t\tthis._onDidLayout.fire(dimension);\n\t}\n\n\tprotected override saveState(): void {\n\t\t// Persist grid UI state\n\t\tif (this.gridWidget) {\n\t\t\tif (this.isEmpty) {\n\t\t\t\tdelete this.workspaceMemento[\n\t\t\t\t\tEditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\tthis.workspaceMemento[\n\t\t\t\t\tEditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY\n\t\t\t\t] = this.createState();\n\t\t\t}\n\t\t}\n\n\t\t// Persist centered view state\n\t\tif (this.centeredLayoutWidget) {\n\t\t\tconst centeredLayoutState = this.centeredLayoutWidget.state;\n\t\t\tif (this.centeredLayoutWidget.isDefault(centeredLayoutState)) {\n\t\t\t\tdelete this.profileMemento[\n\t\t\t\t\tEditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\tthis.profileMemento[\n\t\t\t\t\tEditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY\n\t\t\t\t] = centeredLayoutState;\n\t\t\t}\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\tprotected loadState(): IEditorPartUIState | undefined {\n\t\treturn this.workspaceMemento[\n\t\t\tEditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY\n\t\t];\n\t}\n\n\tcreateState(): IEditorPartUIState {\n\t\treturn {\n\t\t\tserializedGrid: this.gridWidget.serialize(),\n\t\t\tactiveGroup: this._activeGroup.id,\n\t\t\tmostRecentActiveGroups: this.mostRecentActiveGroups,\n\t\t};\n\t}\n\n\tapplyState(\n\t\tstate: IEditorPartUIState | \"empty\",\n\t\toptions?: IEditorGroupViewOptions,\n\t): Promise<void> {\n\t\tif (state === \"empty\") {\n\t\t\treturn this.doApplyEmptyState();\n\t\t} else {\n\t\t\treturn this.doApplyState(state, options);\n\t\t}\n\t}\n\n\tprivate async doApplyState(\n\t\tstate: IEditorPartUIState,\n\t\toptions?: IEditorGroupViewOptions,\n\t): Promise<void> {\n\t\tconst groups = await this.doPrepareApplyState();\n\n\t\t// Pause add/remove events for groups during the duration of applying the state\n\t\t// This ensures that we can do this transition atomically with the new state\n\t\t// being ready when the events are fired. This is important because usually there\n\t\t// is never the state where no groups are present, but for this transition we\n\t\t// need to temporarily dispose all groups to restore the new set.\n\n\t\tthis._onDidAddGroup.pause();\n\t\tthis._onDidRemoveGroup.pause();\n\n\t\tthis.disposeGroups();\n\n\t\t// MRU\n\t\tthis.mostRecentActiveGroups = state.mostRecentActiveGroups;\n\n\t\t// Grid Widget\n\t\ttry {\n\t\t\tthis.doApplyGridState(\n\t\t\t\tstate.serializedGrid,\n\t\t\t\tstate.activeGroup,\n\t\t\t\tundefined,\n\t\t\t\toptions,\n\t\t\t);\n\t\t} finally {\n\t\t\t// It is very important to keep this order: first resume the events for\n\t\t\t// removed groups and then for added groups. Many listeners may store\n\t\t\t// groups in sets by their identifier and groups can have the same\n\t\t\t// identifier before and after.\n\t\t\tthis._onDidRemoveGroup.resume();\n\t\t\tthis._onDidAddGroup.resume();\n\t\t}\n\n\t\t// Restore editors that were not closed before and are now opened now\n\t\tawait this.activeGroup.openEditors(\n\t\t\tgroups\n\t\t\t\t.flatMap((group) => group.editors)\n\t\t\t\t.filter((editor) =>\n\t\t\t\t\tthis.editorPartsView.groups.every(\n\t\t\t\t\t\t(groupView) => !groupView.contains(editor),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.map((editor) => ({\n\t\t\t\t\teditor,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\tpreserveFocus: true,\n\t\t\t\t\t\tinactive: true,\n\t\t\t\t\t},\n\t\t\t\t})),\n\t\t);\n\t}\n\n\tprivate async doApplyEmptyState(): Promise<void> {\n\t\tawait this.doPrepareApplyState();\n\n\t\tthis.mergeAllGroups(this.activeGroup);\n\t}\n\n\tprivate async doPrepareApplyState(): Promise<IEditorGroupView[]> {\n\t\t// Before disposing groups, try to close as many editors as\n\t\t// possible, but skip over those that would trigger a dialog\n\t\t// (for example when being dirty). This is to be able to later\n\t\t// restore these editors after state has been applied.\n\n\t\tconst groups = this.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\t\tfor (const group of groups) {\n\t\t\tawait group.closeAllEditors({ excludeConfirming: true });\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\tprivate doApplyGridState(\n\t\tgridState: ISerializedGrid,\n\t\tactiveGroupId: GroupIdentifier,\n\t\teditorGroupViewsToReuse?: IEditorGroupView[],\n\t\toptions?: IEditorGroupViewOptions,\n\t): void {\n\t\t// Recreate grid widget from state\n\t\tthis.doCreateGridControlWithState(\n\t\t\tgridState,\n\t\t\tactiveGroupId,\n\t\t\teditorGroupViewsToReuse,\n\t\t\toptions,\n\t\t);\n\n\t\t// Layout\n\t\tthis.doLayout(this._contentDimension);\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Events for groups that got added\n\t\tfor (const groupView of this.getGroups(GroupsOrder.GRID_APPEARANCE)) {\n\t\t\tif (!editorGroupViewsToReuse?.includes(groupView)) {\n\t\t\t\tthis._onDidAddGroup.fire(groupView);\n\t\t\t}\n\t\t}\n\n\t\t// Notify group index change given layout has changed\n\t\tthis.notifyGroupIndexChange();\n\t}\n\n\tprivate onDidChangeMementoState(e: IStorageValueChangeEvent): void {\n\t\tif (e.external && e.scope === StorageScope.WORKSPACE) {\n\t\t\tthis.reloadMemento(e.scope);\n\n\t\t\tconst state = this.loadState();\n\t\t\tif (state) {\n\t\t\t\tthis.applyState(state);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\ttype: Parts.EDITOR_PART,\n\t\t};\n\t}\n\n\tprivate disposeGroups(): void {\n\t\tfor (const group of this.groups) {\n\t\t\tgroup.dispose();\n\n\t\t\tthis._onDidRemoveGroup.fire(group);\n\t\t}\n\n\t\tthis.groupViews.clear();\n\t\tthis.mostRecentActiveGroups = [];\n\t}\n\n\toverride dispose(): void {\n\t\t// Event\n\t\tthis._onWillDispose.fire();\n\n\t\t// Forward to all groups\n\t\tthis.disposeGroups();\n\n\t\t// Grid widget\n\t\tthis.gridWidget?.dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\t//#endregion\n}\n\nexport class MainEditorPart extends EditorPart {\n\tconstructor(\n\t\teditorPartsView: IEditorPartsView,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper(\n\t\t\teditorPartsView,\n\t\t\tParts.EDITOR_PART,\n\t\t\t\"\",\n\t\t\tmainWindow.vscodeWindowId,\n\t\t\tinstantiationService,\n\t\t\tthemeService,\n\t\t\tconfigurationService,\n\t\t\tstorageService,\n\t\t\tlayoutService,\n\t\t\thostService,\n\t\t\tcontextKeyService,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["options"]
}
