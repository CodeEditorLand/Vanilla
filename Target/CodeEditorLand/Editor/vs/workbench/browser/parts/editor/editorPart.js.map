{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { Part } from '../../part.js';\nimport { Dimension, $, EventHelper, addDisposableGenericMouseDownListener, getWindow, isAncestorOfActiveElement, getActiveElement, isHTMLElement } from '../../../../base/browser/dom.js';\nimport { Event, Emitter, Relay, PauseableEmitter } from '../../../../base/common/event.js';\nimport { contrastBorder, editorBackground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { GroupDirection, GroupsArrangement, GroupOrientation, IMergeGroupOptions, MergeGroupMode, GroupsOrder, GroupLocation, IFindGroupScope, EditorGroupLayout, GroupLayoutArgument, IEditorSideGroup, IEditorDropTargetDelegate, IEditorPart } from '../../../services/editor/common/editorGroupsService.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IView, orthogonal, LayoutPriority, IViewSize, Direction, SerializableGrid, Sizing, ISerializedGrid, ISerializedNode, Orientation, GridBranchNode, isGridBranchNode, GridNode, createSerializedGrid, Grid } from '../../../../base/browser/ui/grid/grid.js';\nimport { GroupIdentifier, EditorInputWithOptions, IEditorPartOptions, IEditorPartOptionsChangeEvent, GroupModelChangeKind } from '../../../common/editor.js';\nimport { EDITOR_GROUP_BORDER, EDITOR_PANE_BACKGROUND } from '../../../common/theme.js';\nimport { distinct, coalesce } from '../../../../base/common/arrays.js';\nimport { IEditorGroupView, getEditorPartOptions, impactsEditorPartOptions, IEditorPartCreationOptions, IEditorPartsView, IEditorGroupsView, IEditorGroupViewOptions } from './editor.js';\nimport { EditorGroupView } from './editorGroupView.js';\nimport { IConfigurationService, IConfigurationChangeEvent } from '../../../../platform/configuration/common/configuration.js';\nimport { IDisposable, dispose, toDisposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IStorageService, IStorageValueChangeEvent, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ISerializedEditorGroupModel, isSerializedEditorGroupModel } from '../../../common/editor/editorGroupModel.js';\nimport { EditorDropTarget } from './editorDropTarget.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { CenteredViewLayout } from '../../../../base/browser/ui/centered/centeredViewLayout.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Parts, IWorkbenchLayoutService, Position } from '../../../services/layout/browser/layoutService.js';\nimport { DeepPartial, assertIsDefined, assertType } from '../../../../base/common/types.js';\nimport { CompositeDragAndDropObserver } from '../../dnd.js';\nimport { DeferredPromise, Promises } from '../../../../base/common/async.js';\nimport { findGroup } from '../../../services/editor/common/editorGroupFinder.js';\nimport { SIDE_GROUP } from '../../../services/editor/common/editorService.js';\nimport { IBoundarySashes } from '../../../../base/browser/ui/sash/sash.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { EditorPartMaximizedEditorGroupContext, EditorPartMultipleEditorGroupsContext, IsAuxiliaryEditorPartContext } from '../../../common/contextkeys.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\n\nexport interface IEditorPartUIState {\n\treadonly serializedGrid: ISerializedGrid;\n\treadonly activeGroup: GroupIdentifier;\n\treadonly mostRecentActiveGroups: GroupIdentifier[];\n}\n\nclass GridWidgetView<T extends IView> implements IView {\n\n\treadonly element: HTMLElement = $('.grid-view-container');\n\n\tget minimumWidth(): number { return this.gridWidget ? this.gridWidget.minimumWidth : 0; }\n\tget maximumWidth(): number { return this.gridWidget ? this.gridWidget.maximumWidth : Number.POSITIVE_INFINITY; }\n\tget minimumHeight(): number { return this.gridWidget ? this.gridWidget.minimumHeight : 0; }\n\tget maximumHeight(): number { return this.gridWidget ? this.gridWidget.maximumHeight : Number.POSITIVE_INFINITY; }\n\n\tprivate _onDidChange = new Relay<{ width: number; height: number } | undefined>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate _gridWidget: Grid<T> | undefined;\n\n\tget gridWidget(): Grid<T> | undefined {\n\t\treturn this._gridWidget;\n\t}\n\n\tset gridWidget(grid: Grid<T> | undefined) {\n\t\tthis.element.innerText = '';\n\n\t\tif (grid) {\n\t\t\tthis.element.appendChild(grid.element);\n\t\t\tthis._onDidChange.input = grid.onDidChange;\n\t\t} else {\n\t\t\tthis._onDidChange.input = Event.None;\n\t\t}\n\n\t\tthis._gridWidget = grid;\n\t}\n\n\tlayout(width: number, height: number, top: number, left: number): void {\n\t\tthis.gridWidget?.layout(width, height, top, left);\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t}\n}\n\nexport class EditorPart extends Part implements IEditorPart, IEditorGroupsView {\n\n\tprivate static readonly EDITOR_PART_UI_STATE_STORAGE_KEY = 'editorpart.state';\n\tprivate static readonly EDITOR_PART_CENTERED_VIEW_STORAGE_KEY = 'editorpart.centeredview';\n\n\t//#region Events\n\n\tprivate readonly _onDidFocus = this._register(new Emitter<void>());\n\treadonly onDidFocus = this._onDidFocus.event;\n\n\tprivate readonly _onDidLayout = this._register(new Emitter<Dimension>());\n\treadonly onDidLayout = this._onDidLayout.event;\n\n\tprivate readonly _onDidChangeActiveGroup = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidChangeActiveGroup = this._onDidChangeActiveGroup.event;\n\n\tprivate readonly _onDidChangeGroupIndex = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidChangeGroupIndex = this._onDidChangeGroupIndex.event;\n\n\tprivate readonly _onDidChangeGroupLabel = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidChangeGroupLabel = this._onDidChangeGroupLabel.event;\n\n\tprivate readonly _onDidChangeGroupLocked = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidChangeGroupLocked = this._onDidChangeGroupLocked.event;\n\n\tprivate readonly _onDidChangeGroupMaximized = this._register(new Emitter<boolean>());\n\treadonly onDidChangeGroupMaximized = this._onDidChangeGroupMaximized.event;\n\n\tprivate readonly _onDidActivateGroup = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidActivateGroup = this._onDidActivateGroup.event;\n\n\tprivate readonly _onDidAddGroup = this._register(new PauseableEmitter<IEditorGroupView>());\n\treadonly onDidAddGroup = this._onDidAddGroup.event;\n\n\tprivate readonly _onDidRemoveGroup = this._register(new PauseableEmitter<IEditorGroupView>());\n\treadonly onDidRemoveGroup = this._onDidRemoveGroup.event;\n\n\tprivate readonly _onDidMoveGroup = this._register(new Emitter<IEditorGroupView>());\n\treadonly onDidMoveGroup = this._onDidMoveGroup.event;\n\n\tprivate readonly onDidSetGridWidget = this._register(new Emitter<{ width: number; height: number } | undefined>());\n\n\tprivate readonly _onDidChangeSizeConstraints = this._register(new Relay<{ width: number; height: number } | undefined>());\n\treadonly onDidChangeSizeConstraints = Event.any(this.onDidSetGridWidget.event, this._onDidChangeSizeConstraints.event);\n\n\tprivate readonly _onDidScroll = this._register(new Relay<void>());\n\treadonly onDidScroll = Event.any(this.onDidSetGridWidget.event, this._onDidScroll.event);\n\n\tprivate readonly _onDidChangeEditorPartOptions = this._register(new Emitter<IEditorPartOptionsChangeEvent>());\n\treadonly onDidChangeEditorPartOptions = this._onDidChangeEditorPartOptions.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\t//#endregion\n\n\tprivate readonly workspaceMemento = this.getMemento(StorageScope.WORKSPACE, StorageTarget.USER);\n\tprivate readonly profileMemento = this.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\n\tprivate readonly groupViews = new Map<GroupIdentifier, IEditorGroupView>();\n\tprivate mostRecentActiveGroups: GroupIdentifier[] = [];\n\n\tprotected container: HTMLElement | undefined;\n\n\tprivate scopedInstantiationService!: IInstantiationService;\n\n\tprivate centeredLayoutWidget!: CenteredViewLayout;\n\n\tprivate gridWidget!: SerializableGrid<IEditorGroupView>;\n\tprivate readonly gridWidgetDisposables = this._register(new DisposableStore());\n\tprivate readonly gridWidgetView = this._register(new GridWidgetView<IEditorGroupView>());\n\n\tconstructor(\n\t\tprotected readonly editorPartsView: IEditorPartsView,\n\t\tid: string,\n\t\tprivate readonly groupsLabel: string,\n\t\treadonly windowId: number,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(id, { hasTitle: false }, themeService, storageService, layoutService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n\t\tthis._register(this.themeService.onDidFileIconThemeChange(() => this.handleChangedPartOptions()));\n\t\tthis._register(this.onDidChangeMementoValue(StorageScope.WORKSPACE, this._store)(e => this.onDidChangeMementoState(e)));\n\t}\n\n\tprivate onConfigurationUpdated(event: IConfigurationChangeEvent): void {\n\t\tif (impactsEditorPartOptions(event)) {\n\t\t\tthis.handleChangedPartOptions();\n\t\t}\n\t}\n\n\tprivate handleChangedPartOptions(): void {\n\t\tconst oldPartOptions = this._partOptions;\n\t\tconst newPartOptions = getEditorPartOptions(this.configurationService, this.themeService);\n\n\t\tfor (const enforcedPartOptions of this.enforcedPartOptions) {\n\t\t\tObject.assign(newPartOptions, enforcedPartOptions); // check for overrides\n\t\t}\n\n\t\tthis._partOptions = newPartOptions;\n\n\t\tthis._onDidChangeEditorPartOptions.fire({ oldPartOptions, newPartOptions });\n\t}\n\n\tprivate enforcedPartOptions: DeepPartial<IEditorPartOptions>[] = [];\n\n\tprivate _partOptions = getEditorPartOptions(this.configurationService, this.themeService);\n\tget partOptions(): IEditorPartOptions { return this._partOptions; }\n\n\tenforcePartOptions(options: DeepPartial<IEditorPartOptions>): IDisposable {\n\t\tthis.enforcedPartOptions.push(options);\n\t\tthis.handleChangedPartOptions();\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.enforcedPartOptions.splice(this.enforcedPartOptions.indexOf(options), 1);\n\t\t\tthis.handleChangedPartOptions();\n\t\t});\n\t}\n\n\tprivate top = 0;\n\tprivate left = 0;\n\tprivate _contentDimension!: Dimension;\n\tget contentDimension(): Dimension { return this._contentDimension; }\n\n\tprivate _activeGroup!: IEditorGroupView;\n\tget activeGroup(): IEditorGroupView {\n\t\treturn this._activeGroup;\n\t}\n\n\treadonly sideGroup: IEditorSideGroup = {\n\t\topenEditor: (editor, options) => {\n\t\t\tconst [group] = this.scopedInstantiationService.invokeFunction(accessor => findGroup(accessor, { editor, options }, SIDE_GROUP));\n\n\t\t\treturn group.openEditor(editor, options);\n\t\t}\n\t};\n\n\tget groups(): IEditorGroupView[] {\n\t\treturn Array.from(this.groupViews.values());\n\t}\n\n\tget count(): number {\n\t\treturn this.groupViews.size;\n\t}\n\n\tget orientation(): GroupOrientation {\n\t\treturn (this.gridWidget && this.gridWidget.orientation === Orientation.VERTICAL) ? GroupOrientation.VERTICAL : GroupOrientation.HORIZONTAL;\n\t}\n\n\tprivate _isReady = false;\n\tget isReady(): boolean { return this._isReady; }\n\n\tprivate readonly whenReadyPromise = new DeferredPromise<void>();\n\treadonly whenReady = this.whenReadyPromise.p;\n\n\tprivate readonly whenRestoredPromise = new DeferredPromise<void>();\n\treadonly whenRestored = this.whenRestoredPromise.p;\n\n\tget hasRestorableState(): boolean {\n\t\treturn !!this.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY];\n\t}\n\n\tprivate _willRestoreState = false;\n\tget willRestoreState(): boolean { return this._willRestoreState; }\n\n\tgetGroups(order = GroupsOrder.CREATION_TIME): IEditorGroupView[] {\n\t\tswitch (order) {\n\t\t\tcase GroupsOrder.CREATION_TIME:\n\t\t\t\treturn this.groups;\n\n\t\t\tcase GroupsOrder.MOST_RECENTLY_ACTIVE: {\n\t\t\t\tconst mostRecentActive = coalesce(this.mostRecentActiveGroups.map(groupId => this.getGroup(groupId)));\n\n\t\t\t\t// there can be groups that got never active, even though they exist. in this case\n\t\t\t\t// make sure to just append them at the end so that all groups are returned properly\n\t\t\t\treturn distinct([...mostRecentActive, ...this.groups]);\n\t\t\t}\n\t\t\tcase GroupsOrder.GRID_APPEARANCE: {\n\t\t\t\tconst views: IEditorGroupView[] = [];\n\t\t\t\tif (this.gridWidget) {\n\t\t\t\t\tthis.fillGridNodes(views, this.gridWidget.getViews());\n\t\t\t\t}\n\n\t\t\t\treturn views;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate fillGridNodes(target: IEditorGroupView[], node: GridBranchNode<IEditorGroupView> | GridNode<IEditorGroupView>): void {\n\t\tif (isGridBranchNode(node)) {\n\t\t\tnode.children.forEach(child => this.fillGridNodes(target, child));\n\t\t} else {\n\t\t\ttarget.push(node.view);\n\t\t}\n\t}\n\n\thasGroup(identifier: GroupIdentifier): boolean {\n\t\treturn this.groupViews.has(identifier);\n\t}\n\n\tgetGroup(identifier: GroupIdentifier): IEditorGroupView | undefined {\n\t\treturn this.groupViews.get(identifier);\n\t}\n\n\tfindGroup(scope: IFindGroupScope, source: IEditorGroupView | GroupIdentifier = this.activeGroup, wrap?: boolean): IEditorGroupView | undefined {\n\n\t\t// by direction\n\t\tif (typeof scope.direction === 'number') {\n\t\t\treturn this.doFindGroupByDirection(scope.direction, source, wrap);\n\t\t}\n\n\t\t// by location\n\t\tif (typeof scope.location === 'number') {\n\t\t\treturn this.doFindGroupByLocation(scope.location, source, wrap);\n\t\t}\n\n\t\tthrow new Error('invalid arguments');\n\t}\n\n\tprivate doFindGroupByDirection(direction: GroupDirection, source: IEditorGroupView | GroupIdentifier, wrap?: boolean): IEditorGroupView | undefined {\n\t\tconst sourceGroupView = this.assertGroupView(source);\n\n\t\t// Find neighbours and sort by our MRU list\n\t\tconst neighbours = this.gridWidget.getNeighborViews(sourceGroupView, this.toGridViewDirection(direction), wrap);\n\t\tneighbours.sort(((n1, n2) => this.mostRecentActiveGroups.indexOf(n1.id) - this.mostRecentActiveGroups.indexOf(n2.id)));\n\n\t\treturn neighbours[0];\n\t}\n\n\tprivate doFindGroupByLocation(location: GroupLocation, source: IEditorGroupView | GroupIdentifier, wrap?: boolean): IEditorGroupView | undefined {\n\t\tconst sourceGroupView = this.assertGroupView(source);\n\t\tconst groups = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\tconst index = groups.indexOf(sourceGroupView);\n\n\t\tswitch (location) {\n\t\t\tcase GroupLocation.FIRST:\n\t\t\t\treturn groups[0];\n\t\t\tcase GroupLocation.LAST:\n\t\t\t\treturn groups[groups.length - 1];\n\t\t\tcase GroupLocation.NEXT: {\n\t\t\t\tlet nextGroup: IEditorGroupView | undefined = groups[index + 1];\n\t\t\t\tif (!nextGroup && wrap) {\n\t\t\t\t\tnextGroup = this.doFindGroupByLocation(GroupLocation.FIRST, source);\n\t\t\t\t}\n\n\t\t\t\treturn nextGroup;\n\t\t\t}\n\t\t\tcase GroupLocation.PREVIOUS: {\n\t\t\t\tlet previousGroup: IEditorGroupView | undefined = groups[index - 1];\n\t\t\t\tif (!previousGroup && wrap) {\n\t\t\t\t\tpreviousGroup = this.doFindGroupByLocation(GroupLocation.LAST, source);\n\t\t\t\t}\n\n\t\t\t\treturn previousGroup;\n\t\t\t}\n\t\t}\n\t}\n\n\tactivateGroup(group: IEditorGroupView | GroupIdentifier, preserveWindowOrder?: boolean): IEditorGroupView {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tthis.doSetGroupActive(groupView);\n\n\t\t// Ensure window on top unless disabled\n\t\tif (!preserveWindowOrder) {\n\t\t\tthis.hostService.moveTop(getWindow(this.element));\n\t\t}\n\n\t\treturn groupView;\n\t}\n\n\trestoreGroup(group: IEditorGroupView | GroupIdentifier): IEditorGroupView {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tthis.doRestoreGroup(groupView);\n\n\t\treturn groupView;\n\t}\n\n\tgetSize(group: IEditorGroupView | GroupIdentifier): { width: number; height: number } {\n\t\tconst groupView = this.assertGroupView(group);\n\n\t\treturn this.gridWidget.getViewSize(groupView);\n\t}\n\n\tsetSize(group: IEditorGroupView | GroupIdentifier, size: { width: number; height: number }): void {\n\t\tconst groupView = this.assertGroupView(group);\n\n\t\tthis.gridWidget.resizeView(groupView, size);\n\t}\n\n\tarrangeGroups(arrangement: GroupsArrangement, target: IEditorGroupView | GroupIdentifier = this.activeGroup): void {\n\t\tif (this.count < 2) {\n\t\t\treturn; // require at least 2 groups to show\n\t\t}\n\n\t\tif (!this.gridWidget) {\n\t\t\treturn; // we have not been created yet\n\t\t}\n\n\t\tconst groupView = this.assertGroupView(target);\n\n\t\tswitch (arrangement) {\n\t\t\tcase GroupsArrangement.EVEN:\n\t\t\t\tthis.gridWidget.distributeViewSizes();\n\t\t\t\tbreak;\n\t\t\tcase GroupsArrangement.MAXIMIZE:\n\t\t\t\tif (this.groups.length < 2) {\n\t\t\t\t\treturn; // need at least 2 groups to be maximized\n\t\t\t\t}\n\t\t\t\tthis.gridWidget.maximizeView(groupView);\n\t\t\t\tgroupView.focus();\n\t\t\t\tbreak;\n\t\t\tcase GroupsArrangement.EXPAND:\n\t\t\t\tthis.gridWidget.expandView(groupView);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\ttoggleMaximizeGroup(target: IEditorGroupView | GroupIdentifier = this.activeGroup): void {\n\t\tif (this.hasMaximizedGroup()) {\n\t\t\tthis.unmaximizeGroup();\n\t\t} else {\n\t\t\tthis.arrangeGroups(GroupsArrangement.MAXIMIZE, target);\n\t\t}\n\t}\n\n\ttoggleExpandGroup(target: IEditorGroupView | GroupIdentifier = this.activeGroup): void {\n\t\tif (this.isGroupExpanded(this.activeGroup)) {\n\t\t\tthis.arrangeGroups(GroupsArrangement.EVEN);\n\t\t} else {\n\t\t\tthis.arrangeGroups(GroupsArrangement.EXPAND, target);\n\t\t}\n\t}\n\n\tprivate unmaximizeGroup(): void {\n\t\tthis.gridWidget.exitMaximizedView();\n\t\tthis._activeGroup.focus(); // When making views visible the focus can be affected, so restore it\n\t}\n\n\thasMaximizedGroup(): boolean {\n\t\treturn this.gridWidget.hasMaximizedView();\n\t}\n\n\tprivate isGroupMaximized(targetGroup: IEditorGroupView): boolean {\n\t\treturn this.gridWidget.isViewMaximized(targetGroup);\n\t}\n\n\tisGroupExpanded(targetGroup: IEditorGroupView): boolean {\n\t\treturn this.gridWidget.isViewExpanded(targetGroup);\n\t}\n\n\tsetGroupOrientation(orientation: GroupOrientation): void {\n\t\tif (!this.gridWidget) {\n\t\t\treturn; // we have not been created yet\n\t\t}\n\n\t\tconst newOrientation = (orientation === GroupOrientation.HORIZONTAL) ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n\t\tif (this.gridWidget.orientation !== newOrientation) {\n\t\t\tthis.gridWidget.orientation = newOrientation;\n\t\t}\n\t}\n\n\tapplyLayout(layout: EditorGroupLayout): void {\n\t\tconst restoreFocus = this.shouldRestoreFocus(this.container);\n\n\t\t// Determine how many groups we need overall\n\t\tlet layoutGroupsCount = 0;\n\t\tfunction countGroups(groups: GroupLayoutArgument[]): void {\n\t\t\tfor (const group of groups) {\n\t\t\t\tif (Array.isArray(group.groups)) {\n\t\t\t\t\tcountGroups(group.groups);\n\t\t\t\t} else {\n\t\t\t\t\tlayoutGroupsCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcountGroups(layout.groups);\n\n\t\t// If we currently have too many groups, merge them into the last one\n\t\tlet currentGroupViews = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\tif (layoutGroupsCount < currentGroupViews.length) {\n\t\t\tconst lastGroupInLayout = currentGroupViews[layoutGroupsCount - 1];\n\t\t\tcurrentGroupViews.forEach((group, index) => {\n\t\t\t\tif (index >= layoutGroupsCount) {\n\t\t\t\t\tthis.mergeGroup(group, lastGroupInLayout);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcurrentGroupViews = this.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\t}\n\n\t\tconst activeGroup = this.activeGroup;\n\n\t\t// Prepare grid descriptor to create new grid from\n\t\tconst gridDescriptor = createSerializedGrid({\n\t\t\torientation: this.toGridViewOrientation(\n\t\t\t\tlayout.orientation,\n\t\t\t\tthis.isTwoDimensionalGrid() ?\n\t\t\t\t\tthis.gridWidget.orientation :\t\t\t// preserve original orientation for 2-dimensional grids\n\t\t\t\t\torthogonal(this.gridWidget.orientation) // otherwise flip (fix https://github.com/microsoft/vscode/issues/52975)\n\t\t\t),\n\t\t\tgroups: layout.groups\n\t\t});\n\n\t\t// Recreate gridwidget with descriptor\n\t\tthis.doApplyGridState(gridDescriptor, activeGroup.id, currentGroupViews);\n\n\t\t// Restore focus as needed\n\t\tif (restoreFocus) {\n\t\t\tthis._activeGroup.focus();\n\t\t}\n\t}\n\n\tgetLayout(): EditorGroupLayout {\n\n\t\t// Example return value:\n\t\t// { orientation: 0, groups: [ { groups: [ { size: 0.4 }, { size: 0.6 } ], size: 0.5 }, { groups: [ {}, {} ], size: 0.5 } ] }\n\n\t\tconst serializedGrid = this.gridWidget.serialize();\n\t\tconst orientation = serializedGrid.orientation === Orientation.HORIZONTAL ? GroupOrientation.HORIZONTAL : GroupOrientation.VERTICAL;\n\t\tconst root = this.serializedNodeToGroupLayoutArgument(serializedGrid.root);\n\n\t\treturn {\n\t\t\torientation,\n\t\t\tgroups: root.groups as GroupLayoutArgument[]\n\t\t};\n\t}\n\n\tprivate serializedNodeToGroupLayoutArgument(serializedNode: ISerializedNode): GroupLayoutArgument {\n\t\tif (serializedNode.type === 'branch') {\n\t\t\treturn {\n\t\t\t\tsize: serializedNode.size,\n\t\t\t\tgroups: serializedNode.data.map(node => this.serializedNodeToGroupLayoutArgument(node))\n\t\t\t};\n\t\t}\n\n\t\treturn { size: serializedNode.size };\n\t}\n\n\tprotected shouldRestoreFocus(target: Element | undefined): boolean {\n\t\tif (!target) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst activeElement = getActiveElement();\n\t\tif (activeElement === target.ownerDocument.body) {\n\t\t\treturn true; // always restore focus if nothing is focused currently\n\t\t}\n\n\t\t// otherwise check for the active element being an ancestor of the target\n\t\treturn isAncestorOfActiveElement(target);\n\t}\n\n\tprivate isTwoDimensionalGrid(): boolean {\n\t\tconst views = this.gridWidget.getViews();\n\t\tif (isGridBranchNode(views)) {\n\t\t\t// the grid is 2-dimensional if any children\n\t\t\t// of the grid is a branch node\n\t\t\treturn views.children.some(child => isGridBranchNode(child));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\taddGroup(location: IEditorGroupView | GroupIdentifier, direction: GroupDirection, groupToCopy?: IEditorGroupView): IEditorGroupView {\n\t\tconst locationView = this.assertGroupView(location);\n\n\t\tlet newGroupView: IEditorGroupView;\n\n\t\t// Same groups view: add to grid widget directly\n\t\tif (locationView.groupsView === this) {\n\t\t\tconst restoreFocus = this.shouldRestoreFocus(locationView.element);\n\n\t\t\tconst shouldExpand = this.groupViews.size > 1 && this.isGroupExpanded(locationView);\n\t\t\tnewGroupView = this.doCreateGroupView(groupToCopy);\n\n\t\t\t// Add to grid widget\n\t\t\tthis.gridWidget.addView(\n\t\t\t\tnewGroupView,\n\t\t\t\tthis.getSplitSizingStyle(),\n\t\t\t\tlocationView,\n\t\t\t\tthis.toGridViewDirection(direction),\n\t\t\t);\n\n\t\t\t// Update container\n\t\t\tthis.updateContainer();\n\n\t\t\t// Event\n\t\t\tthis._onDidAddGroup.fire(newGroupView);\n\n\t\t\t// Notify group index change given a new group was added\n\t\t\tthis.notifyGroupIndexChange();\n\n\t\t\t// Expand new group, if the reference view was previously expanded\n\t\t\tif (shouldExpand) {\n\t\t\t\tthis.arrangeGroups(GroupsArrangement.EXPAND, newGroupView);\n\t\t\t}\n\n\t\t\t// Restore focus if we had it previously after completing the grid\n\t\t\t// operation. That operation might cause reparenting of grid views\n\t\t\t// which moves focus to the <body> element otherwise.\n\t\t\tif (restoreFocus) {\n\t\t\t\tlocationView.focus();\n\t\t\t}\n\t\t}\n\n\t\t// Different group view: add to grid widget of that group\n\t\telse {\n\t\t\tnewGroupView = locationView.groupsView.addGroup(locationView, direction, groupToCopy);\n\t\t}\n\n\t\treturn newGroupView;\n\t}\n\n\tprivate getSplitSizingStyle(): Sizing {\n\t\tswitch (this._partOptions.splitSizing) {\n\t\t\tcase 'distribute':\n\t\t\t\treturn Sizing.Distribute;\n\t\t\tcase 'split':\n\t\t\t\treturn Sizing.Split;\n\t\t\tdefault:\n\t\t\t\treturn Sizing.Auto;\n\t\t}\n\t}\n\n\tprivate doCreateGroupView(from?: IEditorGroupView | ISerializedEditorGroupModel | null, options?: IEditorGroupViewOptions): IEditorGroupView {\n\n\t\t// Create group view\n\t\tlet groupView: IEditorGroupView;\n\t\tif (from instanceof EditorGroupView) {\n\t\t\tgroupView = EditorGroupView.createCopy(from, this.editorPartsView, this, this.groupsLabel, this.count, this.scopedInstantiationService, options);\n\t\t} else if (isSerializedEditorGroupModel(from)) {\n\t\t\tgroupView = EditorGroupView.createFromSerialized(from, this.editorPartsView, this, this.groupsLabel, this.count, this.scopedInstantiationService, options);\n\t\t} else {\n\t\t\tgroupView = EditorGroupView.createNew(this.editorPartsView, this, this.groupsLabel, this.count, this.scopedInstantiationService, options);\n\t\t}\n\n\t\t// Keep in map\n\t\tthis.groupViews.set(groupView.id, groupView);\n\n\t\t// Track focus\n\t\tconst groupDisposables = new DisposableStore();\n\t\tgroupDisposables.add(groupView.onDidFocus(() => {\n\t\t\tthis.doSetGroupActive(groupView);\n\n\t\t\tthis._onDidFocus.fire();\n\t\t}));\n\n\t\t// Track group changes\n\t\tgroupDisposables.add(groupView.onDidModelChange(e => {\n\t\t\tswitch (e.kind) {\n\t\t\t\tcase GroupModelChangeKind.GROUP_LOCKED:\n\t\t\t\t\tthis._onDidChangeGroupLocked.fire(groupView);\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.GROUP_INDEX:\n\t\t\t\t\tthis._onDidChangeGroupIndex.fire(groupView);\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.GROUP_LABEL:\n\t\t\t\t\tthis._onDidChangeGroupLabel.fire(groupView);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\t// Track active editor change after it occurred\n\t\tgroupDisposables.add(groupView.onDidActiveEditorChange(() => {\n\t\t\tthis.updateContainer();\n\t\t}));\n\n\t\t// Track dispose\n\t\tEvent.once(groupView.onWillDispose)(() => {\n\t\t\tdispose(groupDisposables);\n\t\t\tthis.groupViews.delete(groupView.id);\n\t\t\tthis.doUpdateMostRecentActive(groupView);\n\t\t});\n\n\t\treturn groupView;\n\t}\n\n\tprivate doSetGroupActive(group: IEditorGroupView): void {\n\t\tif (this._activeGroup !== group) {\n\t\t\tconst previousActiveGroup = this._activeGroup;\n\t\t\tthis._activeGroup = group;\n\n\t\t\t// Update list of most recently active groups\n\t\t\tthis.doUpdateMostRecentActive(group, true);\n\n\t\t\t// Mark previous one as inactive\n\t\t\tif (previousActiveGroup && !previousActiveGroup.disposed) {\n\t\t\t\tpreviousActiveGroup.setActive(false);\n\t\t\t}\n\n\t\t\t// Mark group as new active\n\t\t\tgroup.setActive(true);\n\n\t\t\t// Expand the group if it is currently minimized\n\t\t\tthis.doRestoreGroup(group);\n\n\t\t\t// Event\n\t\t\tthis._onDidChangeActiveGroup.fire(group);\n\t\t}\n\n\t\t// Always fire the event that a group has been activated\n\t\t// even if its the same group that is already active to\n\t\t// signal the intent even when nothing has changed.\n\t\tthis._onDidActivateGroup.fire(group);\n\t}\n\n\tprivate doRestoreGroup(group: IEditorGroupView): void {\n\t\tif (!this.gridWidget) {\n\t\t\treturn; // method is called as part of state restore very early\n\t\t}\n\n\t\tif (this.hasMaximizedGroup() && !this.isGroupMaximized(group)) {\n\t\t\tthis.unmaximizeGroup();\n\t\t}\n\n\t\ttry {\n\t\t\tconst viewSize = this.gridWidget.getViewSize(group);\n\t\t\tif (viewSize.width === group.minimumWidth || viewSize.height === group.minimumHeight) {\n\t\t\t\tthis.arrangeGroups(GroupsArrangement.EXPAND, group);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore: method might be called too early before view is known to grid\n\t\t}\n\t}\n\n\tprivate doUpdateMostRecentActive(group: IEditorGroupView, makeMostRecentlyActive?: boolean): void {\n\t\tconst index = this.mostRecentActiveGroups.indexOf(group.id);\n\n\t\t// Remove from MRU list\n\t\tif (index !== -1) {\n\t\t\tthis.mostRecentActiveGroups.splice(index, 1);\n\t\t}\n\n\t\t// Add to front as needed\n\t\tif (makeMostRecentlyActive) {\n\t\t\tthis.mostRecentActiveGroups.unshift(group.id);\n\t\t}\n\t}\n\n\tprivate toGridViewDirection(direction: GroupDirection): Direction {\n\t\tswitch (direction) {\n\t\t\tcase GroupDirection.UP: return Direction.Up;\n\t\t\tcase GroupDirection.DOWN: return Direction.Down;\n\t\t\tcase GroupDirection.LEFT: return Direction.Left;\n\t\t\tcase GroupDirection.RIGHT: return Direction.Right;\n\t\t}\n\t}\n\n\tprivate toGridViewOrientation(orientation: GroupOrientation, fallback: Orientation): Orientation {\n\t\tif (typeof orientation === 'number') {\n\t\t\treturn orientation === GroupOrientation.HORIZONTAL ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n\t\t}\n\n\t\treturn fallback;\n\t}\n\n\tremoveGroup(group: IEditorGroupView | GroupIdentifier, preserveFocus?: boolean): void {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tif (this.count === 1) {\n\t\t\treturn; // Cannot remove the last root group\n\t\t}\n\n\t\t// Remove empty group\n\t\tif (groupView.isEmpty) {\n\t\t\tthis.doRemoveEmptyGroup(groupView, preserveFocus);\n\t\t}\n\n\t\t// Remove group with editors\n\t\telse {\n\t\t\tthis.doRemoveGroupWithEditors(groupView);\n\t\t}\n\t}\n\n\tprivate doRemoveGroupWithEditors(groupView: IEditorGroupView): void {\n\t\tconst mostRecentlyActiveGroups = this.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\n\t\tlet lastActiveGroup: IEditorGroupView;\n\t\tif (this._activeGroup === groupView) {\n\t\t\tlastActiveGroup = mostRecentlyActiveGroups[1];\n\t\t} else {\n\t\t\tlastActiveGroup = mostRecentlyActiveGroups[0];\n\t\t}\n\n\t\t// Removing a group with editors should merge these editors into the\n\t\t// last active group and then remove this group.\n\t\tthis.mergeGroup(groupView, lastActiveGroup);\n\t}\n\n\tprivate doRemoveEmptyGroup(groupView: IEditorGroupView, preserveFocus?: boolean): void {\n\t\tconst restoreFocus = !preserveFocus && this.shouldRestoreFocus(this.container);\n\n\t\t// Activate next group if the removed one was active\n\t\tif (this._activeGroup === groupView) {\n\t\t\tconst mostRecentlyActiveGroups = this.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\t\t\tconst nextActiveGroup = mostRecentlyActiveGroups[1]; // [0] will be the current group we are about to dispose\n\t\t\tthis.doSetGroupActive(nextActiveGroup);\n\t\t}\n\n\t\t// Remove from grid widget & dispose\n\t\tthis.gridWidget.removeView(groupView, this.getSplitSizingStyle());\n\t\tgroupView.dispose();\n\n\t\t// Restore focus if we had it previously after completing the grid\n\t\t// operation. That operation might cause reparenting of grid views\n\t\t// which moves focus to the <body> element otherwise.\n\t\tif (restoreFocus) {\n\t\t\tthis._activeGroup.focus();\n\t\t}\n\n\t\t// Notify group index change given a group was removed\n\t\tthis.notifyGroupIndexChange();\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Event\n\t\tthis._onDidRemoveGroup.fire(groupView);\n\t}\n\n\tmoveGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView {\n\t\tconst sourceView = this.assertGroupView(group);\n\t\tconst targetView = this.assertGroupView(location);\n\n\t\tif (sourceView.id === targetView.id) {\n\t\t\tthrow new Error('Cannot move group into its own');\n\t\t}\n\n\t\tconst restoreFocus = this.shouldRestoreFocus(sourceView.element);\n\t\tlet movedView: IEditorGroupView;\n\n\t\t// Same groups view: move via grid widget API\n\t\tif (sourceView.groupsView === targetView.groupsView) {\n\t\t\tthis.gridWidget.moveView(sourceView, this.getSplitSizingStyle(), targetView, this.toGridViewDirection(direction));\n\t\t\tmovedView = sourceView;\n\t\t}\n\n\t\t// Different groups view: move via groups view API\n\t\telse {\n\t\t\tmovedView = targetView.groupsView.addGroup(targetView, direction, sourceView);\n\t\t\tsourceView.closeAllEditors();\n\t\t\tthis.removeGroup(sourceView, restoreFocus);\n\t\t}\n\n\t\t// Restore focus if we had it previously after completing the grid\n\t\t// operation. That operation might cause reparenting of grid views\n\t\t// which moves focus to the <body> element otherwise.\n\t\tif (restoreFocus) {\n\t\t\tmovedView.focus();\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidMoveGroup.fire(movedView);\n\n\t\t// Notify group index change given a group was moved\n\t\tthis.notifyGroupIndexChange();\n\n\t\treturn movedView;\n\t}\n\n\tcopyGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView {\n\t\tconst groupView = this.assertGroupView(group);\n\t\tconst locationView = this.assertGroupView(location);\n\n\t\tconst restoreFocus = this.shouldRestoreFocus(groupView.element);\n\n\t\t// Copy the group view\n\t\tconst copiedGroupView = this.addGroup(locationView, direction, groupView);\n\n\t\t// Restore focus if we had it\n\t\tif (restoreFocus) {\n\t\t\tcopiedGroupView.focus();\n\t\t}\n\n\t\treturn copiedGroupView;\n\t}\n\n\tmergeGroup(group: IEditorGroupView | GroupIdentifier, target: IEditorGroupView | GroupIdentifier, options?: IMergeGroupOptions): boolean {\n\t\tconst sourceView = this.assertGroupView(group);\n\t\tconst targetView = this.assertGroupView(target);\n\n\t\t// Collect editors to move/copy\n\t\tconst editors: EditorInputWithOptions[] = [];\n\t\tlet index = (options && typeof options.index === 'number') ? options.index : targetView.count;\n\t\tfor (const editor of sourceView.editors) {\n\t\t\tconst inactive = !sourceView.isActive(editor) || this._activeGroup !== sourceView;\n\t\t\tconst sticky = sourceView.isSticky(editor);\n\t\t\tconst options = { index: !sticky ? index : undefined /* do not set index to preserve sticky flag */, inactive, preserveFocus: inactive };\n\n\t\t\teditors.push({ editor, options });\n\n\t\t\tindex++;\n\t\t}\n\n\t\t// Move/Copy editors over into target\n\t\tlet result = true;\n\t\tif (options?.mode === MergeGroupMode.COPY_EDITORS) {\n\t\t\tsourceView.copyEditors(editors, targetView);\n\t\t} else {\n\t\t\tresult = sourceView.moveEditors(editors, targetView);\n\t\t}\n\n\t\t// Remove source if the view is now empty and not already removed\n\t\tif (sourceView.isEmpty && !sourceView.disposed /* could have been disposed already via workbench.editor.closeEmptyGroups setting */) {\n\t\t\tthis.removeGroup(sourceView, true);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tmergeAllGroups(target: IEditorGroupView | GroupIdentifier): boolean {\n\t\tconst targetView = this.assertGroupView(target);\n\n\t\tlet result = true;\n\t\tfor (const group of this.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\tif (group === targetView) {\n\t\t\t\tcontinue; // keep target\n\t\t\t}\n\n\t\t\tconst merged = this.mergeGroup(group, targetView);\n\t\t\tif (!merged) {\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprotected assertGroupView(group: IEditorGroupView | GroupIdentifier): IEditorGroupView {\n\t\tlet groupView: IEditorGroupView | undefined;\n\t\tif (typeof group === 'number') {\n\t\t\tgroupView = this.editorPartsView.getGroup(group);\n\t\t} else {\n\t\t\tgroupView = group;\n\t\t}\n\n\t\tif (!groupView) {\n\t\t\tthrow new Error('Invalid editor group provided!');\n\t\t}\n\n\t\treturn groupView;\n\t}\n\n\tcreateEditorDropTarget(container: unknown, delegate: IEditorDropTargetDelegate): IDisposable {\n\t\tassertType(isHTMLElement(container));\n\n\t\treturn this.scopedInstantiationService.createInstance(EditorDropTarget, container, delegate);\n\t}\n\n\t//#region Part\n\n\t// TODO @sbatten @joao find something better to prevent editor taking over #79897\n\tget minimumWidth(): number { return Math.min(this.centeredLayoutWidget.minimumWidth, this.layoutService.getMaximumEditorDimensions(this.layoutService.getContainer(getWindow(this.container))).width); }\n\tget maximumWidth(): number { return this.centeredLayoutWidget.maximumWidth; }\n\tget minimumHeight(): number { return Math.min(this.centeredLayoutWidget.minimumHeight, this.layoutService.getMaximumEditorDimensions(this.layoutService.getContainer(getWindow(this.container))).height); }\n\tget maximumHeight(): number { return this.centeredLayoutWidget.maximumHeight; }\n\n\tget snap(): boolean { return this.layoutService.getPanelAlignment() === 'center'; }\n\n\toverride get onDidChange(): Event<IViewSize | undefined> { return Event.any(this.centeredLayoutWidget.onDidChange, this.onDidSetGridWidget.event); }\n\treadonly priority: LayoutPriority = LayoutPriority.High;\n\n\tprivate get gridSeparatorBorder(): Color {\n\t\treturn this.theme.getColor(EDITOR_GROUP_BORDER) || this.theme.getColor(contrastBorder) || Color.transparent;\n\t}\n\n\toverride updateStyles(): void {\n\t\tconst container = assertIsDefined(this.container);\n\t\tcontainer.style.backgroundColor = this.getColor(editorBackground) || '';\n\n\t\tconst separatorBorderStyle = { separatorBorder: this.gridSeparatorBorder, background: this.theme.getColor(EDITOR_PANE_BACKGROUND) || Color.transparent };\n\t\tthis.gridWidget.style(separatorBorderStyle);\n\t\tthis.centeredLayoutWidget.styles(separatorBorderStyle);\n\t}\n\n\tprotected override createContentArea(parent: HTMLElement, options?: IEditorPartCreationOptions): HTMLElement {\n\n\t\t// Container\n\t\tthis.element = parent;\n\t\tthis.container = document.createElement('div');\n\t\tthis.container.classList.add('content');\n\t\tif (this.windowId !== mainWindow.vscodeWindowId) {\n\t\t\tthis.container.classList.add('auxiliary');\n\t\t}\n\t\tparent.appendChild(this.container);\n\n\t\t// Scoped instantiation service\n\t\tconst scopedContextKeyService = this._register(this.contextKeyService.createScoped(this.container));\n\t\tthis.scopedInstantiationService = this._register(this.instantiationService.createChild(new ServiceCollection(\n\t\t\t[IContextKeyService, scopedContextKeyService]\n\t\t)));\n\n\t\t// Grid control\n\t\tthis._willRestoreState = !options || options.restorePreviousState;\n\t\tthis.doCreateGridControl();\n\n\t\t// Centered layout widget\n\t\tthis.centeredLayoutWidget = this._register(new CenteredViewLayout(this.container, this.gridWidgetView, this.profileMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY], this._partOptions.centeredLayoutFixedWidth));\n\t\tthis._register(this.onDidChangeEditorPartOptions(e => this.centeredLayoutWidget.setFixedWidth(e.newPartOptions.centeredLayoutFixedWidth ?? false)));\n\n\t\t// Drag & Drop support\n\t\tthis.setupDragAndDropSupport(parent, this.container);\n\n\t\t// Context keys\n\t\tthis.handleContextKeys(scopedContextKeyService);\n\n\t\t// Signal ready\n\t\tthis.whenReadyPromise.complete();\n\t\tthis._isReady = true;\n\n\t\t// Signal restored\n\t\tPromises.settled(this.groups.map(group => group.whenRestored)).finally(() => {\n\t\t\tthis.whenRestoredPromise.complete();\n\t\t});\n\n\t\treturn this.container;\n\t}\n\n\tprivate handleContextKeys(contextKeyService: IContextKeyService): void {\n\t\tconst isAuxiliaryEditorPartContext = IsAuxiliaryEditorPartContext.bindTo(contextKeyService);\n\t\tisAuxiliaryEditorPartContext.set(this.windowId !== mainWindow.vscodeWindowId);\n\n\t\tconst multipleEditorGroupsContext = EditorPartMultipleEditorGroupsContext.bindTo(contextKeyService);\n\t\tconst maximizedEditorGroupContext = EditorPartMaximizedEditorGroupContext.bindTo(contextKeyService);\n\n\t\tconst updateContextKeys = () => {\n\t\t\tconst groupCount = this.count;\n\t\t\tif (groupCount > 1) {\n\t\t\t\tmultipleEditorGroupsContext.set(true);\n\t\t\t} else {\n\t\t\t\tmultipleEditorGroupsContext.reset();\n\t\t\t}\n\n\t\t\tif (this.hasMaximizedGroup()) {\n\t\t\t\tmaximizedEditorGroupContext.set(true);\n\t\t\t} else {\n\t\t\t\tmaximizedEditorGroupContext.reset();\n\t\t\t}\n\t\t};\n\n\t\tupdateContextKeys();\n\n\t\tthis._register(this.onDidAddGroup(() => updateContextKeys()));\n\t\tthis._register(this.onDidRemoveGroup(() => updateContextKeys()));\n\t\tthis._register(this.onDidChangeGroupMaximized(() => updateContextKeys()));\n\t}\n\n\tprivate setupDragAndDropSupport(parent: HTMLElement, container: HTMLElement): void {\n\n\t\t// Editor drop target\n\t\tthis._register(this.createEditorDropTarget(container, Object.create(null)));\n\n\t\t// No drop in the editor\n\t\tconst overlay = document.createElement('div');\n\t\toverlay.classList.add('drop-block-overlay');\n\t\tparent.appendChild(overlay);\n\n\t\t// Hide the block if a mouse down event occurs #99065\n\t\tthis._register(addDisposableGenericMouseDownListener(overlay, () => overlay.classList.remove('visible')));\n\n\t\tthis._register(CompositeDragAndDropObserver.INSTANCE.registerTarget(this.element, {\n\t\t\tonDragStart: e => overlay.classList.add('visible'),\n\t\t\tonDragEnd: e => overlay.classList.remove('visible')\n\t\t}));\n\n\t\tlet horizontalOpenerTimeout: any;\n\t\tlet verticalOpenerTimeout: any;\n\t\tlet lastOpenHorizontalPosition: Position | undefined;\n\t\tlet lastOpenVerticalPosition: Position | undefined;\n\t\tconst openPartAtPosition = (position: Position) => {\n\t\t\tif (!this.layoutService.isVisible(Parts.PANEL_PART) && position === this.layoutService.getPanelPosition()) {\n\t\t\t\tthis.layoutService.setPartHidden(false, Parts.PANEL_PART);\n\t\t\t} else if (!this.layoutService.isVisible(Parts.AUXILIARYBAR_PART) && position === (this.layoutService.getSideBarPosition() === Position.RIGHT ? Position.LEFT : Position.RIGHT)) {\n\t\t\t\tthis.layoutService.setPartHidden(false, Parts.AUXILIARYBAR_PART);\n\t\t\t}\n\t\t};\n\n\t\tconst clearAllTimeouts = () => {\n\t\t\tif (horizontalOpenerTimeout) {\n\t\t\t\tclearTimeout(horizontalOpenerTimeout);\n\t\t\t\thorizontalOpenerTimeout = undefined;\n\t\t\t}\n\n\t\t\tif (verticalOpenerTimeout) {\n\t\t\t\tclearTimeout(verticalOpenerTimeout);\n\t\t\t\tverticalOpenerTimeout = undefined;\n\t\t\t}\n\t\t};\n\n\t\tthis._register(CompositeDragAndDropObserver.INSTANCE.registerTarget(overlay, {\n\t\t\tonDragOver: e => {\n\t\t\t\tEventHelper.stop(e.eventData, true);\n\t\t\t\tif (e.eventData.dataTransfer) {\n\t\t\t\t\te.eventData.dataTransfer.dropEffect = 'none';\n\t\t\t\t}\n\n\t\t\t\tconst boundingRect = overlay.getBoundingClientRect();\n\n\t\t\t\tlet openHorizontalPosition: Position | undefined = undefined;\n\t\t\t\tlet openVerticalPosition: Position | undefined = undefined;\n\t\t\t\tconst proximity = 100;\n\t\t\t\tif (e.eventData.clientX < boundingRect.left + proximity) {\n\t\t\t\t\topenHorizontalPosition = Position.LEFT;\n\t\t\t\t}\n\n\t\t\t\tif (e.eventData.clientX > boundingRect.right - proximity) {\n\t\t\t\t\topenHorizontalPosition = Position.RIGHT;\n\t\t\t\t}\n\n\t\t\t\tif (e.eventData.clientY > boundingRect.bottom - proximity) {\n\t\t\t\t\topenVerticalPosition = Position.BOTTOM;\n\t\t\t\t}\n\n\t\t\t\tif (e.eventData.clientY < boundingRect.top + proximity) {\n\t\t\t\t\topenVerticalPosition = Position.TOP;\n\t\t\t\t}\n\n\t\t\t\tif (horizontalOpenerTimeout && openHorizontalPosition !== lastOpenHorizontalPosition) {\n\t\t\t\t\tclearTimeout(horizontalOpenerTimeout);\n\t\t\t\t\thorizontalOpenerTimeout = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (verticalOpenerTimeout && openVerticalPosition !== lastOpenVerticalPosition) {\n\t\t\t\t\tclearTimeout(verticalOpenerTimeout);\n\t\t\t\t\tverticalOpenerTimeout = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (!horizontalOpenerTimeout && openHorizontalPosition !== undefined) {\n\t\t\t\t\tlastOpenHorizontalPosition = openHorizontalPosition;\n\t\t\t\t\thorizontalOpenerTimeout = setTimeout(() => openPartAtPosition(openHorizontalPosition), 200);\n\t\t\t\t}\n\n\t\t\t\tif (!verticalOpenerTimeout && openVerticalPosition !== undefined) {\n\t\t\t\t\tlastOpenVerticalPosition = openVerticalPosition;\n\t\t\t\t\tverticalOpenerTimeout = setTimeout(() => openPartAtPosition(openVerticalPosition), 200);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonDragLeave: () => clearAllTimeouts(),\n\t\t\tonDragEnd: () => clearAllTimeouts(),\n\t\t\tonDrop: () => clearAllTimeouts()\n\t\t}));\n\t}\n\n\tcenterLayout(active: boolean): void {\n\t\tthis.centeredLayoutWidget.activate(active);\n\n\t\tthis._activeGroup.focus();\n\t}\n\n\tisLayoutCentered(): boolean {\n\t\tif (this.centeredLayoutWidget) {\n\t\t\treturn this.centeredLayoutWidget.isActive();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate doCreateGridControl(): void {\n\n\t\t// Grid Widget (with previous UI state)\n\t\tlet restoreError = false;\n\t\tif (this._willRestoreState) {\n\t\t\trestoreError = !this.doCreateGridControlWithPreviousState();\n\t\t}\n\n\t\t// Grid Widget (no previous UI state or failed to restore)\n\t\tif (!this.gridWidget || restoreError) {\n\t\t\tconst initialGroup = this.doCreateGroupView();\n\t\t\tthis.doSetGridWidget(new SerializableGrid(initialGroup));\n\n\t\t\t// Ensure a group is active\n\t\t\tthis.doSetGroupActive(initialGroup);\n\t\t}\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Notify group index change we created the entire grid\n\t\tthis.notifyGroupIndexChange();\n\t}\n\n\tprivate doCreateGridControlWithPreviousState(): boolean {\n\t\tconst state: IEditorPartUIState | undefined = this.loadState();\n\t\tif (state?.serializedGrid) {\n\t\t\ttry {\n\n\t\t\t\t// MRU\n\t\t\t\tthis.mostRecentActiveGroups = state.mostRecentActiveGroups;\n\n\t\t\t\t// Grid Widget\n\t\t\t\tthis.doCreateGridControlWithState(state.serializedGrid, state.activeGroup);\n\t\t\t} catch (error) {\n\n\t\t\t\t// Log error\n\t\t\t\tonUnexpectedError(new Error(`Error restoring editor grid widget: ${error} (with state: ${JSON.stringify(state)})`));\n\n\t\t\t\t// Clear any state we have from the failing restore\n\t\t\t\tthis.disposeGroups();\n\n\t\t\t\treturn false; // failure\n\t\t\t}\n\t\t}\n\n\t\treturn true; // success\n\t}\n\n\tprivate doCreateGridControlWithState(serializedGrid: ISerializedGrid, activeGroupId: GroupIdentifier, editorGroupViewsToReuse?: IEditorGroupView[], options?: IEditorGroupViewOptions): void {\n\n\t\t// Determine group views to reuse if any\n\t\tlet reuseGroupViews: IEditorGroupView[];\n\t\tif (editorGroupViewsToReuse) {\n\t\t\treuseGroupViews = editorGroupViewsToReuse.slice(0); // do not modify original array\n\t\t} else {\n\t\t\treuseGroupViews = [];\n\t\t}\n\n\t\t// Create new\n\t\tconst groupViews: IEditorGroupView[] = [];\n\t\tconst gridWidget = SerializableGrid.deserialize(serializedGrid, {\n\t\t\tfromJSON: (serializedEditorGroup: ISerializedEditorGroupModel | null) => {\n\t\t\t\tlet groupView: IEditorGroupView;\n\t\t\t\tif (reuseGroupViews.length > 0) {\n\t\t\t\t\tgroupView = reuseGroupViews.shift()!;\n\t\t\t\t} else {\n\t\t\t\t\tgroupView = this.doCreateGroupView(serializedEditorGroup, options);\n\t\t\t\t}\n\n\t\t\t\tgroupViews.push(groupView);\n\n\t\t\t\tif (groupView.id === activeGroupId) {\n\t\t\t\t\tthis.doSetGroupActive(groupView);\n\t\t\t\t}\n\n\t\t\t\treturn groupView;\n\t\t\t}\n\t\t}, { styles: { separatorBorder: this.gridSeparatorBorder } });\n\n\t\t// If the active group was not found when restoring the grid\n\t\t// make sure to make at least one group active. We always need\n\t\t// an active group.\n\t\tif (!this._activeGroup) {\n\t\t\tthis.doSetGroupActive(groupViews[0]);\n\t\t}\n\n\t\t// Validate MRU group views matches grid widget state\n\t\tif (this.mostRecentActiveGroups.some(groupId => !this.getGroup(groupId))) {\n\t\t\tthis.mostRecentActiveGroups = groupViews.map(group => group.id);\n\t\t}\n\n\t\t// Set it\n\t\tthis.doSetGridWidget(gridWidget);\n\t}\n\n\tprivate doSetGridWidget(gridWidget: SerializableGrid<IEditorGroupView>): void {\n\t\tlet boundarySashes: IBoundarySashes = {};\n\n\t\tif (this.gridWidget) {\n\t\t\tboundarySashes = this.gridWidget.boundarySashes;\n\t\t\tthis.gridWidget.dispose();\n\t\t}\n\n\t\tthis.gridWidget = gridWidget;\n\t\tthis.gridWidget.boundarySashes = boundarySashes;\n\t\tthis.gridWidgetView.gridWidget = gridWidget;\n\n\t\tthis._onDidChangeSizeConstraints.input = gridWidget.onDidChange;\n\t\tthis._onDidScroll.input = gridWidget.onDidScroll;\n\t\tthis.gridWidgetDisposables.clear();\n\t\tthis.gridWidgetDisposables.add(gridWidget.onDidChangeViewMaximized(maximized => this._onDidChangeGroupMaximized.fire(maximized)));\n\n\t\tthis._onDidChangeGroupMaximized.fire(this.hasMaximizedGroup());\n\n\t\tthis.onDidSetGridWidget.fire(undefined);\n\t}\n\n\tprivate updateContainer(): void {\n\t\tconst container = assertIsDefined(this.container);\n\t\tcontainer.classList.toggle('empty', this.isEmpty);\n\t}\n\n\tprivate notifyGroupIndexChange(): void {\n\t\tthis.getGroups(GroupsOrder.GRID_APPEARANCE).forEach((group, index) => group.notifyIndexChanged(index));\n\t}\n\n\tnotifyGroupsLabelChange(newLabel: string) {\n\t\tfor (const group of this.groups) {\n\t\t\tgroup.notifyLabelChanged(newLabel);\n\t\t}\n\t}\n\n\tprivate get isEmpty(): boolean {\n\t\treturn this.count === 1 && this._activeGroup.isEmpty;\n\t}\n\n\tsetBoundarySashes(sashes: IBoundarySashes): void {\n\t\tthis.gridWidget.boundarySashes = sashes;\n\t\tthis.centeredLayoutWidget.boundarySashes = sashes;\n\t}\n\n\toverride layout(width: number, height: number, top: number, left: number): void {\n\t\tthis.top = top;\n\t\tthis.left = left;\n\n\t\t// Layout contents\n\t\tconst contentAreaSize = super.layoutContents(width, height).contentSize;\n\n\t\t// Layout editor container\n\t\tthis.doLayout(Dimension.lift(contentAreaSize), top, left);\n\t}\n\n\tprivate doLayout(dimension: Dimension, top = this.top, left = this.left): void {\n\t\tthis._contentDimension = dimension;\n\n\t\t// Layout Grid\n\t\tthis.centeredLayoutWidget.layout(this._contentDimension.width, this._contentDimension.height, top, left);\n\n\t\t// Event\n\t\tthis._onDidLayout.fire(dimension);\n\t}\n\n\tprotected override saveState(): void {\n\n\t\t// Persist grid UI state\n\t\tif (this.gridWidget) {\n\t\t\tif (this.isEmpty) {\n\t\t\t\tdelete this.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY];\n\t\t\t} else {\n\t\t\t\tthis.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY] = this.createState();\n\t\t\t}\n\t\t}\n\n\t\t// Persist centered view state\n\t\tif (this.centeredLayoutWidget) {\n\t\t\tconst centeredLayoutState = this.centeredLayoutWidget.state;\n\t\t\tif (this.centeredLayoutWidget.isDefault(centeredLayoutState)) {\n\t\t\t\tdelete this.profileMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY];\n\t\t\t} else {\n\t\t\t\tthis.profileMemento[EditorPart.EDITOR_PART_CENTERED_VIEW_STORAGE_KEY] = centeredLayoutState;\n\t\t\t}\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\tprotected loadState(): IEditorPartUIState | undefined {\n\t\treturn this.workspaceMemento[EditorPart.EDITOR_PART_UI_STATE_STORAGE_KEY];\n\t}\n\n\tcreateState(): IEditorPartUIState {\n\t\treturn {\n\t\t\tserializedGrid: this.gridWidget.serialize(),\n\t\t\tactiveGroup: this._activeGroup.id,\n\t\t\tmostRecentActiveGroups: this.mostRecentActiveGroups\n\t\t};\n\t}\n\n\tapplyState(state: IEditorPartUIState | 'empty', options?: IEditorGroupViewOptions): Promise<void> {\n\t\tif (state === 'empty') {\n\t\t\treturn this.doApplyEmptyState();\n\t\t} else {\n\t\t\treturn this.doApplyState(state, options);\n\t\t}\n\t}\n\n\tprivate async doApplyState(state: IEditorPartUIState, options?: IEditorGroupViewOptions): Promise<void> {\n\t\tconst groups = await this.doPrepareApplyState();\n\n\t\t// Pause add/remove events for groups during the duration of applying the state\n\t\t// This ensures that we can do this transition atomically with the new state\n\t\t// being ready when the events are fired. This is important because usually there\n\t\t// is never the state where no groups are present, but for this transition we\n\t\t// need to temporarily dispose all groups to restore the new set.\n\n\t\tthis._onDidAddGroup.pause();\n\t\tthis._onDidRemoveGroup.pause();\n\n\t\tthis.disposeGroups();\n\n\t\t// MRU\n\t\tthis.mostRecentActiveGroups = state.mostRecentActiveGroups;\n\n\t\t// Grid Widget\n\t\ttry {\n\t\t\tthis.doApplyGridState(state.serializedGrid, state.activeGroup, undefined, options);\n\t\t} finally {\n\t\t\t// It is very important to keep this order: first resume the events for\n\t\t\t// removed groups and then for added groups. Many listeners may store\n\t\t\t// groups in sets by their identifier and groups can have the same\n\t\t\t// identifier before and after.\n\t\t\tthis._onDidRemoveGroup.resume();\n\t\t\tthis._onDidAddGroup.resume();\n\t\t}\n\n\t\t// Restore editors that were not closed before and are now opened now\n\t\tawait this.activeGroup.openEditors(\n\t\t\tgroups\n\t\t\t\t.flatMap(group => group.editors)\n\t\t\t\t.filter(editor => this.editorPartsView.groups.every(groupView => !groupView.contains(editor)))\n\t\t\t\t.map(editor => ({\n\t\t\t\t\teditor, options: { pinned: true, preserveFocus: true, inactive: true }\n\t\t\t\t}))\n\t\t);\n\t}\n\n\tprivate async doApplyEmptyState(): Promise<void> {\n\t\tawait this.doPrepareApplyState();\n\n\t\tthis.mergeAllGroups(this.activeGroup);\n\t}\n\n\tprivate async doPrepareApplyState(): Promise<IEditorGroupView[]> {\n\n\t\t// Before disposing groups, try to close as many editors as\n\t\t// possible, but skip over those that would trigger a dialog\n\t\t// (for example when being dirty). This is to be able to later\n\t\t// restore these editors after state has been applied.\n\n\t\tconst groups = this.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\t\tfor (const group of groups) {\n\t\t\tawait group.closeAllEditors({ excludeConfirming: true });\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\tprivate doApplyGridState(gridState: ISerializedGrid, activeGroupId: GroupIdentifier, editorGroupViewsToReuse?: IEditorGroupView[], options?: IEditorGroupViewOptions): void {\n\n\t\t// Recreate grid widget from state\n\t\tthis.doCreateGridControlWithState(gridState, activeGroupId, editorGroupViewsToReuse, options);\n\n\t\t// Layout\n\t\tthis.doLayout(this._contentDimension);\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Events for groups that got added\n\t\tfor (const groupView of this.getGroups(GroupsOrder.GRID_APPEARANCE)) {\n\t\t\tif (!editorGroupViewsToReuse?.includes(groupView)) {\n\t\t\t\tthis._onDidAddGroup.fire(groupView);\n\t\t\t}\n\t\t}\n\n\t\t// Notify group index change given layout has changed\n\t\tthis.notifyGroupIndexChange();\n\t}\n\n\tprivate onDidChangeMementoState(e: IStorageValueChangeEvent): void {\n\t\tif (e.external && e.scope === StorageScope.WORKSPACE) {\n\t\t\tthis.reloadMemento(e.scope);\n\n\t\t\tconst state = this.loadState();\n\t\t\tif (state) {\n\t\t\t\tthis.applyState(state);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\ttype: Parts.EDITOR_PART\n\t\t};\n\t}\n\n\tprivate disposeGroups(): void {\n\t\tfor (const group of this.groups) {\n\t\t\tgroup.dispose();\n\n\t\t\tthis._onDidRemoveGroup.fire(group);\n\t\t}\n\n\t\tthis.groupViews.clear();\n\t\tthis.mostRecentActiveGroups = [];\n\t}\n\n\toverride dispose(): void {\n\n\t\t// Event\n\t\tthis._onWillDispose.fire();\n\n\t\t// Forward to all groups\n\t\tthis.disposeGroups();\n\n\t\t// Grid widget\n\t\tthis.gridWidget?.dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\t//#endregion\n}\n\nexport class MainEditorPart extends EditorPart {\n\n\tconstructor(\n\t\teditorPartsView: IEditorPartsView,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(editorPartsView, Parts.EDITOR_PART, '', mainWindow.vscodeWindowId, instantiationService, themeService, configurationService, storageService, layoutService, hostService, contextKeyService);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,qBAAqB;AAC9B,SAAS,YAAY;AACrB,SAAS,WAAW,GAAG,aAAa,uCAAuC,WAAW,2BAA2B,kBAAkB,qBAAqB;AACxJ,SAAS,OAAO,SAAS,OAAO,wBAAwB;AACxD,SAAS,gBAAgB,wBAAwB;AACjD,SAAS,gBAAgB,mBAAmB,kBAAkB,oBAAoB,gBAAgB,aAAa,eAAe,iBAAiB,mBAAmB,qBAAqB,kBAAkB,2BAA2B,mBAAmB;AACvP,SAAS,6BAA6B;AACtC,SAAS,OAAO,YAAY,gBAAgB,WAAW,WAAW,kBAAkB,QAAQ,iBAAiB,iBAAiB,aAAa,gBAAgB,kBAAkB,UAAU,sBAAsB,YAAY;AACzN,SAAS,iBAAiB,wBAAwB,oBAAoB,+BAA+B,4BAA4B;AACjI,SAAS,qBAAqB,8BAA8B;AAC5D,SAAS,UAAU,gBAAgB;AACnC,SAAS,kBAAkB,sBAAsB,0BAA0B,4BAA4B,kBAAkB,mBAAmB,+BAA+B;AAC3K,SAAS,uBAAuB;AAChC,SAAS,uBAAuB,iCAAiC;AACjE,SAAS,aAAa,SAAS,cAAc,uBAAuB;AACpE,SAAS,iBAAiB,0BAA0B,cAAc,qBAAqB;AACvF,SAAS,6BAA6B,oCAAoC;AAC1E,SAAS,wBAAwB;AACjC,SAAS,aAAa;AACtB,SAAS,0BAA0B;AACnC,SAAS,yBAAyB;AAClC,SAAS,OAAO,yBAAyB,gBAAgB;AACzD,SAAS,aAAa,iBAAiB,kBAAkB;AACzD,SAAS,oCAAoC;AAC7C,SAAS,iBAAiB,gBAAgB;AAC1C,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,uBAAuB;AAChC,SAAS,oBAAoB;AAC7B,SAAS,0BAA0B;AACnC,SAAS,yBAAyB;AAClC,SAAS,uCAAuC,uCAAuC,oCAAoC;AAC3H,SAAS,kBAAkB;AAQ3B,MAAM,eAAiD;AAAA,EA7CvD,OA6CuD;AAAA;AAAA;AAAA,EAE7C,UAAuB,EAAE,sBAAsB;AAAA,EAExD,IAAI,eAAuB;AAAE,WAAO,KAAK,aAAa,KAAK,WAAW,eAAe;AAAA,EAAG;AAAA,EACxF,IAAI,eAAuB;AAAE,WAAO,KAAK,aAAa,KAAK,WAAW,eAAe,OAAO;AAAA,EAAmB;AAAA,EAC/G,IAAI,gBAAwB;AAAE,WAAO,KAAK,aAAa,KAAK,WAAW,gBAAgB;AAAA,EAAG;AAAA,EAC1F,IAAI,gBAAwB;AAAE,WAAO,KAAK,aAAa,KAAK,WAAW,gBAAgB,OAAO;AAAA,EAAmB;AAAA,EAEzG,eAAe,IAAI,MAAqD;AAAA,EACvE,cAAc,KAAK,aAAa;AAAA,EAEjC;AAAA,EAER,IAAI,aAAkC;AACrC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,WAAW,MAA2B;AACzC,SAAK,QAAQ,YAAY;AAEzB,QAAI,MAAM;AACT,WAAK,QAAQ,YAAY,KAAK,OAAO;AACrC,WAAK,aAAa,QAAQ,KAAK;AAAA,IAChC,OAAO;AACN,WAAK,aAAa,QAAQ,MAAM;AAAA,IACjC;AAEA,SAAK,cAAc;AAAA,EACpB;AAAA,EAEA,OAAO,OAAe,QAAgB,KAAa,MAAoB;AACtE,SAAK,YAAY,OAAO,OAAO,QAAQ,KAAK,IAAI;AAAA,EACjD;AAAA,EAEA,UAAgB;AACf,SAAK,aAAa,QAAQ;AAAA,EAC3B;AACD;AAEO,IAAM,aAAN,cAAyB,KAA+C;AAAA,EAwE9E,YACoB,iBACnB,IACiB,aACR,UAC+B,sBACzB,cACyB,sBACvB,gBACQ,eACM,aACM,mBACpC;AACD,UAAM,IAAI,EAAE,UAAU,MAAM,GAAG,cAAc,gBAAgB,aAAa;AAZvD;AAEF;AACR;AAC+B;AAEA;AAGT;AACM;AAIrC,SAAK,kBAAkB;AAAA,EACxB;AAAA,EA7KD,OAqF+E;AAAA;AAAA;AAAA,EAE9E,OAAwB,mCAAmC;AAAA,EAC3D,OAAwB,wCAAwC;AAAA;AAAA,EAI/C,cAAc,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACxD,aAAa,KAAK,YAAY;AAAA,EAEtB,eAAe,KAAK,UAAU,IAAI,QAAmB,CAAC;AAAA,EAC9D,cAAc,KAAK,aAAa;AAAA,EAExB,0BAA0B,KAAK,UAAU,IAAI,QAA0B,CAAC;AAAA,EAChF,yBAAyB,KAAK,wBAAwB;AAAA,EAE9C,yBAAyB,KAAK,UAAU,IAAI,QAA0B,CAAC;AAAA,EAC/E,wBAAwB,KAAK,uBAAuB;AAAA,EAE5C,yBAAyB,KAAK,UAAU,IAAI,QAA0B,CAAC;AAAA,EAC/E,wBAAwB,KAAK,uBAAuB;AAAA,EAE5C,0BAA0B,KAAK,UAAU,IAAI,QAA0B,CAAC;AAAA,EAChF,yBAAyB,KAAK,wBAAwB;AAAA,EAE9C,6BAA6B,KAAK,UAAU,IAAI,QAAiB,CAAC;AAAA,EAC1E,4BAA4B,KAAK,2BAA2B;AAAA,EAEpD,sBAAsB,KAAK,UAAU,IAAI,QAA0B,CAAC;AAAA,EAC5E,qBAAqB,KAAK,oBAAoB;AAAA,EAEtC,iBAAiB,KAAK,UAAU,IAAI,iBAAmC,CAAC;AAAA,EAChF,gBAAgB,KAAK,eAAe;AAAA,EAE5B,oBAAoB,KAAK,UAAU,IAAI,iBAAmC,CAAC;AAAA,EACnF,mBAAmB,KAAK,kBAAkB;AAAA,EAElC,kBAAkB,KAAK,UAAU,IAAI,QAA0B,CAAC;AAAA,EACxE,iBAAiB,KAAK,gBAAgB;AAAA,EAE9B,qBAAqB,KAAK,UAAU,IAAI,QAAuD,CAAC;AAAA,EAEhG,8BAA8B,KAAK,UAAU,IAAI,MAAqD,CAAC;AAAA,EAC/G,6BAA6B,MAAM,IAAI,KAAK,mBAAmB,OAAO,KAAK,4BAA4B,KAAK;AAAA,EAEpG,eAAe,KAAK,UAAU,IAAI,MAAY,CAAC;AAAA,EACvD,cAAc,MAAM,IAAI,KAAK,mBAAmB,OAAO,KAAK,aAAa,KAAK;AAAA,EAEtE,gCAAgC,KAAK,UAAU,IAAI,QAAuC,CAAC;AAAA,EACnG,+BAA+B,KAAK,8BAA8B;AAAA,EAE1D,iBAAiB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC3D,gBAAgB,KAAK,eAAe;AAAA;AAAA,EAI5B,mBAAmB,KAAK,WAAW,aAAa,WAAW,cAAc,IAAI;AAAA,EAC7E,iBAAiB,KAAK,WAAW,aAAa,SAAS,cAAc,OAAO;AAAA,EAE5E,aAAa,oBAAI,IAAuC;AAAA,EACjE,yBAA4C,CAAC;AAAA,EAE3C;AAAA,EAEF;AAAA,EAEA;AAAA,EAEA;AAAA,EACS,wBAAwB,KAAK,UAAU,IAAI,gBAAgB,CAAC;AAAA,EAC5D,iBAAiB,KAAK,UAAU,IAAI,eAAiC,CAAC;AAAA,EAoB/E,oBAA0B;AACjC,SAAK,UAAU,KAAK,qBAAqB,yBAAyB,OAAK,KAAK,uBAAuB,CAAC,CAAC,CAAC;AACtG,SAAK,UAAU,KAAK,aAAa,yBAAyB,MAAM,KAAK,yBAAyB,CAAC,CAAC;AAChG,SAAK,UAAU,KAAK,wBAAwB,aAAa,WAAW,KAAK,MAAM,EAAE,OAAK,KAAK,wBAAwB,CAAC,CAAC,CAAC;AAAA,EACvH;AAAA,EAEQ,uBAAuB,OAAwC;AACtE,QAAI,yBAAyB,KAAK,GAAG;AACpC,WAAK,yBAAyB;AAAA,IAC/B;AAAA,EACD;AAAA,EAEQ,2BAAiC;AACxC,UAAM,iBAAiB,KAAK;AAC5B,UAAM,iBAAiB,qBAAqB,KAAK,sBAAsB,KAAK,YAAY;AAExF,eAAW,uBAAuB,KAAK,qBAAqB;AAC3D,aAAO,OAAO,gBAAgB,mBAAmB;AAAA,IAClD;AAEA,SAAK,eAAe;AAEpB,SAAK,8BAA8B,KAAK,EAAE,gBAAgB,eAAe,CAAC;AAAA,EAC3E;AAAA,EAEQ,sBAAyD,CAAC;AAAA,EAE1D,eAAe,qBAAqB,KAAK,sBAAsB,KAAK,YAAY;AAAA,EACxF,IAAI,cAAkC;AAAE,WAAO,KAAK;AAAA,EAAc;AAAA,EAElE,mBAAmB,SAAuD;AACzE,SAAK,oBAAoB,KAAK,OAAO;AACrC,SAAK,yBAAyB;AAE9B,WAAO,aAAa,MAAM;AACzB,WAAK,oBAAoB,OAAO,KAAK,oBAAoB,QAAQ,OAAO,GAAG,CAAC;AAC5E,WAAK,yBAAyB;AAAA,IAC/B,CAAC;AAAA,EACF;AAAA,EAEQ,MAAM;AAAA,EACN,OAAO;AAAA,EACP;AAAA,EACR,IAAI,mBAA8B;AAAE,WAAO,KAAK;AAAA,EAAmB;AAAA,EAE3D;AAAA,EACR,IAAI,cAAgC;AACnC,WAAO,KAAK;AAAA,EACb;AAAA,EAES,YAA8B;AAAA,IACtC,YAAY,wBAAC,QAAQ,YAAY;AAChC,YAAM,CAAC,KAAK,IAAI,KAAK,2BAA2B,eAAe,cAAY,UAAU,UAAU,EAAE,QAAQ,QAAQ,GAAG,UAAU,CAAC;AAE/H,aAAO,MAAM,WAAW,QAAQ,OAAO;AAAA,IACxC,GAJY;AAAA,EAKb;AAAA,EAEA,IAAI,SAA6B;AAChC,WAAO,MAAM,KAAK,KAAK,WAAW,OAAO,CAAC;AAAA,EAC3C;AAAA,EAEA,IAAI,QAAgB;AACnB,WAAO,KAAK,WAAW;AAAA,EACxB;AAAA,EAEA,IAAI,cAAgC;AACnC,WAAQ,KAAK,cAAc,KAAK,WAAW,gBAAgB,YAAY,WAAY,iBAAiB,WAAW,iBAAiB;AAAA,EACjI;AAAA,EAEQ,WAAW;AAAA,EACnB,IAAI,UAAmB;AAAE,WAAO,KAAK;AAAA,EAAU;AAAA,EAE9B,mBAAmB,IAAI,gBAAsB;AAAA,EACrD,YAAY,KAAK,iBAAiB;AAAA,EAE1B,sBAAsB,IAAI,gBAAsB;AAAA,EACxD,eAAe,KAAK,oBAAoB;AAAA,EAEjD,IAAI,qBAA8B;AACjC,WAAO,CAAC,CAAC,KAAK,iBAAiB,WAAW,gCAAgC;AAAA,EAC3E;AAAA,EAEQ,oBAAoB;AAAA,EAC5B,IAAI,mBAA4B;AAAE,WAAO,KAAK;AAAA,EAAmB;AAAA,EAEjE,UAAU,QAAQ,YAAY,eAAmC;AAChE,YAAQ,OAAO;AAAA,MACd,KAAK,YAAY;AAChB,eAAO,KAAK;AAAA,MAEb,KAAK,YAAY,sBAAsB;AACtC,cAAM,mBAAmB,SAAS,KAAK,uBAAuB,IAAI,aAAW,KAAK,SAAS,OAAO,CAAC,CAAC;AAIpG,eAAO,SAAS,CAAC,GAAG,kBAAkB,GAAG,KAAK,MAAM,CAAC;AAAA,MACtD;AAAA,MACA,KAAK,YAAY,iBAAiB;AACjC,cAAM,QAA4B,CAAC;AACnC,YAAI,KAAK,YAAY;AACpB,eAAK,cAAc,OAAO,KAAK,WAAW,SAAS,CAAC;AAAA,QACrD;AAEA,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,cAAc,QAA4B,MAA2E;AAC5H,QAAI,iBAAiB,IAAI,GAAG;AAC3B,WAAK,SAAS,QAAQ,WAAS,KAAK,cAAc,QAAQ,KAAK,CAAC;AAAA,IACjE,OAAO;AACN,aAAO,KAAK,KAAK,IAAI;AAAA,IACtB;AAAA,EACD;AAAA,EAEA,SAAS,YAAsC;AAC9C,WAAO,KAAK,WAAW,IAAI,UAAU;AAAA,EACtC;AAAA,EAEA,SAAS,YAA2D;AACnE,WAAO,KAAK,WAAW,IAAI,UAAU;AAAA,EACtC;AAAA,EAEA,UAAU,OAAwB,SAA6C,KAAK,aAAa,MAA8C;AAG9I,QAAI,OAAO,MAAM,cAAc,UAAU;AACxC,aAAO,KAAK,uBAAuB,MAAM,WAAW,QAAQ,IAAI;AAAA,IACjE;AAGA,QAAI,OAAO,MAAM,aAAa,UAAU;AACvC,aAAO,KAAK,sBAAsB,MAAM,UAAU,QAAQ,IAAI;AAAA,IAC/D;AAEA,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACpC;AAAA,EAEQ,uBAAuB,WAA2B,QAA4C,MAA8C;AACnJ,UAAM,kBAAkB,KAAK,gBAAgB,MAAM;AAGnD,UAAM,aAAa,KAAK,WAAW,iBAAiB,iBAAiB,KAAK,oBAAoB,SAAS,GAAG,IAAI;AAC9G,eAAW,KAAM,CAAC,IAAI,OAAO,KAAK,uBAAuB,QAAQ,GAAG,EAAE,IAAI,KAAK,uBAAuB,QAAQ,GAAG,EAAE,CAAE;AAErH,WAAO,WAAW,CAAC;AAAA,EACpB;AAAA,EAEQ,sBAAsB,UAAyB,QAA4C,MAA8C;AAChJ,UAAM,kBAAkB,KAAK,gBAAgB,MAAM;AACnD,UAAM,SAAS,KAAK,UAAU,YAAY,eAAe;AACzD,UAAM,QAAQ,OAAO,QAAQ,eAAe;AAE5C,YAAQ,UAAU;AAAA,MACjB,KAAK,cAAc;AAClB,eAAO,OAAO,CAAC;AAAA,MAChB,KAAK,cAAc;AAClB,eAAO,OAAO,OAAO,SAAS,CAAC;AAAA,MAChC,KAAK,cAAc,MAAM;AACxB,YAAI,YAA0C,OAAO,QAAQ,CAAC;AAC9D,YAAI,CAAC,aAAa,MAAM;AACvB,sBAAY,KAAK,sBAAsB,cAAc,OAAO,MAAM;AAAA,QACnE;AAEA,eAAO;AAAA,MACR;AAAA,MACA,KAAK,cAAc,UAAU;AAC5B,YAAI,gBAA8C,OAAO,QAAQ,CAAC;AAClE,YAAI,CAAC,iBAAiB,MAAM;AAC3B,0BAAgB,KAAK,sBAAsB,cAAc,MAAM,MAAM;AAAA,QACtE;AAEA,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EAEA,cAAc,OAA2C,qBAAiD;AACzG,UAAM,YAAY,KAAK,gBAAgB,KAAK;AAC5C,SAAK,iBAAiB,SAAS;AAG/B,QAAI,CAAC,qBAAqB;AACzB,WAAK,YAAY,QAAQ,UAAU,KAAK,OAAO,CAAC;AAAA,IACjD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,aAAa,OAA6D;AACzE,UAAM,YAAY,KAAK,gBAAgB,KAAK;AAC5C,SAAK,eAAe,SAAS;AAE7B,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ,OAA8E;AACrF,UAAM,YAAY,KAAK,gBAAgB,KAAK;AAE5C,WAAO,KAAK,WAAW,YAAY,SAAS;AAAA,EAC7C;AAAA,EAEA,QAAQ,OAA2C,MAA+C;AACjG,UAAM,YAAY,KAAK,gBAAgB,KAAK;AAE5C,SAAK,WAAW,WAAW,WAAW,IAAI;AAAA,EAC3C;AAAA,EAEA,cAAc,aAAgC,SAA6C,KAAK,aAAmB;AAClH,QAAI,KAAK,QAAQ,GAAG;AACnB;AAAA,IACD;AAEA,QAAI,CAAC,KAAK,YAAY;AACrB;AAAA,IACD;AAEA,UAAM,YAAY,KAAK,gBAAgB,MAAM;AAE7C,YAAQ,aAAa;AAAA,MACpB,KAAK,kBAAkB;AACtB,aAAK,WAAW,oBAAoB;AACpC;AAAA,MACD,KAAK,kBAAkB;AACtB,YAAI,KAAK,OAAO,SAAS,GAAG;AAC3B;AAAA,QACD;AACA,aAAK,WAAW,aAAa,SAAS;AACtC,kBAAU,MAAM;AAChB;AAAA,MACD,KAAK,kBAAkB;AACtB,aAAK,WAAW,WAAW,SAAS;AACpC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,oBAAoB,SAA6C,KAAK,aAAmB;AACxF,QAAI,KAAK,kBAAkB,GAAG;AAC7B,WAAK,gBAAgB;AAAA,IACtB,OAAO;AACN,WAAK,cAAc,kBAAkB,UAAU,MAAM;AAAA,IACtD;AAAA,EACD;AAAA,EAEA,kBAAkB,SAA6C,KAAK,aAAmB;AACtF,QAAI,KAAK,gBAAgB,KAAK,WAAW,GAAG;AAC3C,WAAK,cAAc,kBAAkB,IAAI;AAAA,IAC1C,OAAO;AACN,WAAK,cAAc,kBAAkB,QAAQ,MAAM;AAAA,IACpD;AAAA,EACD;AAAA,EAEQ,kBAAwB;AAC/B,SAAK,WAAW,kBAAkB;AAClC,SAAK,aAAa,MAAM;AAAA,EACzB;AAAA,EAEA,oBAA6B;AAC5B,WAAO,KAAK,WAAW,iBAAiB;AAAA,EACzC;AAAA,EAEQ,iBAAiB,aAAwC;AAChE,WAAO,KAAK,WAAW,gBAAgB,WAAW;AAAA,EACnD;AAAA,EAEA,gBAAgB,aAAwC;AACvD,WAAO,KAAK,WAAW,eAAe,WAAW;AAAA,EAClD;AAAA,EAEA,oBAAoB,aAAqC;AACxD,QAAI,CAAC,KAAK,YAAY;AACrB;AAAA,IACD;AAEA,UAAM,iBAAkB,gBAAgB,iBAAiB,aAAc,YAAY,aAAa,YAAY;AAC5G,QAAI,KAAK,WAAW,gBAAgB,gBAAgB;AACnD,WAAK,WAAW,cAAc;AAAA,IAC/B;AAAA,EACD;AAAA,EAEA,YAAY,QAAiC;AAC5C,UAAM,eAAe,KAAK,mBAAmB,KAAK,SAAS;AAG3D,QAAI,oBAAoB;AACxB,aAAS,YAAY,QAAqC;AACzD,iBAAW,SAAS,QAAQ;AAC3B,YAAI,MAAM,QAAQ,MAAM,MAAM,GAAG;AAChC,sBAAY,MAAM,MAAM;AAAA,QACzB,OAAO;AACN;AAAA,QACD;AAAA,MACD;AAAA,IACD;AARS;AAST,gBAAY,OAAO,MAAM;AAGzB,QAAI,oBAAoB,KAAK,UAAU,YAAY,eAAe;AAClE,QAAI,oBAAoB,kBAAkB,QAAQ;AACjD,YAAM,oBAAoB,kBAAkB,oBAAoB,CAAC;AACjE,wBAAkB,QAAQ,CAAC,OAAO,UAAU;AAC3C,YAAI,SAAS,mBAAmB;AAC/B,eAAK,WAAW,OAAO,iBAAiB;AAAA,QACzC;AAAA,MACD,CAAC;AAED,0BAAoB,KAAK,UAAU,YAAY,eAAe;AAAA,IAC/D;AAEA,UAAM,cAAc,KAAK;AAGzB,UAAM,iBAAiB,qBAAqB;AAAA,MAC3C,aAAa,KAAK;AAAA,QACjB,OAAO;AAAA,QACP,KAAK,qBAAqB,IACzB,KAAK,WAAW;AAAA;AAAA,UAChB,WAAW,KAAK,WAAW,WAAW;AAAA;AAAA;AAAA,MACxC;AAAA,MACA,QAAQ,OAAO;AAAA,IAChB,CAAC;AAGD,SAAK,iBAAiB,gBAAgB,YAAY,IAAI,iBAAiB;AAGvE,QAAI,cAAc;AACjB,WAAK,aAAa,MAAM;AAAA,IACzB;AAAA,EACD;AAAA,EAEA,YAA+B;AAK9B,UAAM,iBAAiB,KAAK,WAAW,UAAU;AACjD,UAAM,cAAc,eAAe,gBAAgB,YAAY,aAAa,iBAAiB,aAAa,iBAAiB;AAC3H,UAAM,OAAO,KAAK,oCAAoC,eAAe,IAAI;AAEzE,WAAO;AAAA,MACN;AAAA,MACA,QAAQ,KAAK;AAAA,IACd;AAAA,EACD;AAAA,EAEQ,oCAAoC,gBAAsD;AACjG,QAAI,eAAe,SAAS,UAAU;AACrC,aAAO;AAAA,QACN,MAAM,eAAe;AAAA,QACrB,QAAQ,eAAe,KAAK,IAAI,UAAQ,KAAK,oCAAoC,IAAI,CAAC;AAAA,MACvF;AAAA,IACD;AAEA,WAAO,EAAE,MAAM,eAAe,KAAK;AAAA,EACpC;AAAA,EAEU,mBAAmB,QAAsC;AAClE,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,IACR;AAEA,UAAM,gBAAgB,iBAAiB;AACvC,QAAI,kBAAkB,OAAO,cAAc,MAAM;AAChD,aAAO;AAAA,IACR;AAGA,WAAO,0BAA0B,MAAM;AAAA,EACxC;AAAA,EAEQ,uBAAgC;AACvC,UAAM,QAAQ,KAAK,WAAW,SAAS;AACvC,QAAI,iBAAiB,KAAK,GAAG;AAG5B,aAAO,MAAM,SAAS,KAAK,WAAS,iBAAiB,KAAK,CAAC;AAAA,IAC5D;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,SAAS,UAA8C,WAA2B,aAAkD;AACnI,UAAM,eAAe,KAAK,gBAAgB,QAAQ;AAElD,QAAI;AAGJ,QAAI,aAAa,eAAe,MAAM;AACrC,YAAM,eAAe,KAAK,mBAAmB,aAAa,OAAO;AAEjE,YAAM,eAAe,KAAK,WAAW,OAAO,KAAK,KAAK,gBAAgB,YAAY;AAClF,qBAAe,KAAK,kBAAkB,WAAW;AAGjD,WAAK,WAAW;AAAA,QACf;AAAA,QACA,KAAK,oBAAoB;AAAA,QACzB;AAAA,QACA,KAAK,oBAAoB,SAAS;AAAA,MACnC;AAGA,WAAK,gBAAgB;AAGrB,WAAK,eAAe,KAAK,YAAY;AAGrC,WAAK,uBAAuB;AAG5B,UAAI,cAAc;AACjB,aAAK,cAAc,kBAAkB,QAAQ,YAAY;AAAA,MAC1D;AAKA,UAAI,cAAc;AACjB,qBAAa,MAAM;AAAA,MACpB;AAAA,IACD,OAGK;AACJ,qBAAe,aAAa,WAAW,SAAS,cAAc,WAAW,WAAW;AAAA,IACrF;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,sBAA8B;AACrC,YAAQ,KAAK,aAAa,aAAa;AAAA,MACtC,KAAK;AACJ,eAAO,OAAO;AAAA,MACf,KAAK;AACJ,eAAO,OAAO;AAAA,MACf;AACC,eAAO,OAAO;AAAA,IAChB;AAAA,EACD;AAAA,EAEQ,kBAAkB,MAA8D,SAAqD;AAG5I,QAAI;AACJ,QAAI,gBAAgB,iBAAiB;AACpC,kBAAY,gBAAgB,WAAW,MAAM,KAAK,iBAAiB,MAAM,KAAK,aAAa,KAAK,OAAO,KAAK,4BAA4B,OAAO;AAAA,IAChJ,WAAW,6BAA6B,IAAI,GAAG;AAC9C,kBAAY,gBAAgB,qBAAqB,MAAM,KAAK,iBAAiB,MAAM,KAAK,aAAa,KAAK,OAAO,KAAK,4BAA4B,OAAO;AAAA,IAC1J,OAAO;AACN,kBAAY,gBAAgB,UAAU,KAAK,iBAAiB,MAAM,KAAK,aAAa,KAAK,OAAO,KAAK,4BAA4B,OAAO;AAAA,IACzI;AAGA,SAAK,WAAW,IAAI,UAAU,IAAI,SAAS;AAG3C,UAAM,mBAAmB,IAAI,gBAAgB;AAC7C,qBAAiB,IAAI,UAAU,WAAW,MAAM;AAC/C,WAAK,iBAAiB,SAAS;AAE/B,WAAK,YAAY,KAAK;AAAA,IACvB,CAAC,CAAC;AAGF,qBAAiB,IAAI,UAAU,iBAAiB,OAAK;AACpD,cAAQ,EAAE,MAAM;AAAA,QACf,KAAK,qBAAqB;AACzB,eAAK,wBAAwB,KAAK,SAAS;AAC3C;AAAA,QACD,KAAK,qBAAqB;AACzB,eAAK,uBAAuB,KAAK,SAAS;AAC1C;AAAA,QACD,KAAK,qBAAqB;AACzB,eAAK,uBAAuB,KAAK,SAAS;AAC1C;AAAA,MACF;AAAA,IACD,CAAC,CAAC;AAGF,qBAAiB,IAAI,UAAU,wBAAwB,MAAM;AAC5D,WAAK,gBAAgB;AAAA,IACtB,CAAC,CAAC;AAGF,UAAM,KAAK,UAAU,aAAa,EAAE,MAAM;AACzC,cAAQ,gBAAgB;AACxB,WAAK,WAAW,OAAO,UAAU,EAAE;AACnC,WAAK,yBAAyB,SAAS;AAAA,IACxC,CAAC;AAED,WAAO;AAAA,EACR;AAAA,EAEQ,iBAAiB,OAA+B;AACvD,QAAI,KAAK,iBAAiB,OAAO;AAChC,YAAM,sBAAsB,KAAK;AACjC,WAAK,eAAe;AAGpB,WAAK,yBAAyB,OAAO,IAAI;AAGzC,UAAI,uBAAuB,CAAC,oBAAoB,UAAU;AACzD,4BAAoB,UAAU,KAAK;AAAA,MACpC;AAGA,YAAM,UAAU,IAAI;AAGpB,WAAK,eAAe,KAAK;AAGzB,WAAK,wBAAwB,KAAK,KAAK;AAAA,IACxC;AAKA,SAAK,oBAAoB,KAAK,KAAK;AAAA,EACpC;AAAA,EAEQ,eAAe,OAA+B;AACrD,QAAI,CAAC,KAAK,YAAY;AACrB;AAAA,IACD;AAEA,QAAI,KAAK,kBAAkB,KAAK,CAAC,KAAK,iBAAiB,KAAK,GAAG;AAC9D,WAAK,gBAAgB;AAAA,IACtB;AAEA,QAAI;AACH,YAAM,WAAW,KAAK,WAAW,YAAY,KAAK;AAClD,UAAI,SAAS,UAAU,MAAM,gBAAgB,SAAS,WAAW,MAAM,eAAe;AACrF,aAAK,cAAc,kBAAkB,QAAQ,KAAK;AAAA,MACnD;AAAA,IACD,SAAS,OAAO;AAAA,IAEhB;AAAA,EACD;AAAA,EAEQ,yBAAyB,OAAyB,wBAAwC;AACjG,UAAM,QAAQ,KAAK,uBAAuB,QAAQ,MAAM,EAAE;AAG1D,QAAI,UAAU,IAAI;AACjB,WAAK,uBAAuB,OAAO,OAAO,CAAC;AAAA,IAC5C;AAGA,QAAI,wBAAwB;AAC3B,WAAK,uBAAuB,QAAQ,MAAM,EAAE;AAAA,IAC7C;AAAA,EACD;AAAA,EAEQ,oBAAoB,WAAsC;AACjE,YAAQ,WAAW;AAAA,MAClB,KAAK,eAAe;AAAI,eAAO,UAAU;AAAA,MACzC,KAAK,eAAe;AAAM,eAAO,UAAU;AAAA,MAC3C,KAAK,eAAe;AAAM,eAAO,UAAU;AAAA,MAC3C,KAAK,eAAe;AAAO,eAAO,UAAU;AAAA,IAC7C;AAAA,EACD;AAAA,EAEQ,sBAAsB,aAA+B,UAAoC;AAChG,QAAI,OAAO,gBAAgB,UAAU;AACpC,aAAO,gBAAgB,iBAAiB,aAAa,YAAY,aAAa,YAAY;AAAA,IAC3F;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,OAA2C,eAA+B;AACrF,UAAM,YAAY,KAAK,gBAAgB,KAAK;AAC5C,QAAI,KAAK,UAAU,GAAG;AACrB;AAAA,IACD;AAGA,QAAI,UAAU,SAAS;AACtB,WAAK,mBAAmB,WAAW,aAAa;AAAA,IACjD,OAGK;AACJ,WAAK,yBAAyB,SAAS;AAAA,IACxC;AAAA,EACD;AAAA,EAEQ,yBAAyB,WAAmC;AACnE,UAAM,2BAA2B,KAAK,UAAU,YAAY,oBAAoB;AAEhF,QAAI;AACJ,QAAI,KAAK,iBAAiB,WAAW;AACpC,wBAAkB,yBAAyB,CAAC;AAAA,IAC7C,OAAO;AACN,wBAAkB,yBAAyB,CAAC;AAAA,IAC7C;AAIA,SAAK,WAAW,WAAW,eAAe;AAAA,EAC3C;AAAA,EAEQ,mBAAmB,WAA6B,eAA+B;AACtF,UAAM,eAAe,CAAC,iBAAiB,KAAK,mBAAmB,KAAK,SAAS;AAG7E,QAAI,KAAK,iBAAiB,WAAW;AACpC,YAAM,2BAA2B,KAAK,UAAU,YAAY,oBAAoB;AAChF,YAAM,kBAAkB,yBAAyB,CAAC;AAClD,WAAK,iBAAiB,eAAe;AAAA,IACtC;AAGA,SAAK,WAAW,WAAW,WAAW,KAAK,oBAAoB,CAAC;AAChE,cAAU,QAAQ;AAKlB,QAAI,cAAc;AACjB,WAAK,aAAa,MAAM;AAAA,IACzB;AAGA,SAAK,uBAAuB;AAG5B,SAAK,gBAAgB;AAGrB,SAAK,kBAAkB,KAAK,SAAS;AAAA,EACtC;AAAA,EAEA,UAAU,OAA2C,UAA8C,WAA6C;AAC/I,UAAM,aAAa,KAAK,gBAAgB,KAAK;AAC7C,UAAM,aAAa,KAAK,gBAAgB,QAAQ;AAEhD,QAAI,WAAW,OAAO,WAAW,IAAI;AACpC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACjD;AAEA,UAAM,eAAe,KAAK,mBAAmB,WAAW,OAAO;AAC/D,QAAI;AAGJ,QAAI,WAAW,eAAe,WAAW,YAAY;AACpD,WAAK,WAAW,SAAS,YAAY,KAAK,oBAAoB,GAAG,YAAY,KAAK,oBAAoB,SAAS,CAAC;AAChH,kBAAY;AAAA,IACb,OAGK;AACJ,kBAAY,WAAW,WAAW,SAAS,YAAY,WAAW,UAAU;AAC5E,iBAAW,gBAAgB;AAC3B,WAAK,YAAY,YAAY,YAAY;AAAA,IAC1C;AAKA,QAAI,cAAc;AACjB,gBAAU,MAAM;AAAA,IACjB;AAGA,SAAK,gBAAgB,KAAK,SAAS;AAGnC,SAAK,uBAAuB;AAE5B,WAAO;AAAA,EACR;AAAA,EAEA,UAAU,OAA2C,UAA8C,WAA6C;AAC/I,UAAM,YAAY,KAAK,gBAAgB,KAAK;AAC5C,UAAM,eAAe,KAAK,gBAAgB,QAAQ;AAElD,UAAM,eAAe,KAAK,mBAAmB,UAAU,OAAO;AAG9D,UAAM,kBAAkB,KAAK,SAAS,cAAc,WAAW,SAAS;AAGxE,QAAI,cAAc;AACjB,sBAAgB,MAAM;AAAA,IACvB;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,WAAW,OAA2C,QAA4C,SAAuC;AACxI,UAAM,aAAa,KAAK,gBAAgB,KAAK;AAC7C,UAAM,aAAa,KAAK,gBAAgB,MAAM;AAG9C,UAAM,UAAoC,CAAC;AAC3C,QAAI,QAAS,WAAW,OAAO,QAAQ,UAAU,WAAY,QAAQ,QAAQ,WAAW;AACxF,eAAW,UAAU,WAAW,SAAS;AACxC,YAAM,WAAW,CAAC,WAAW,SAAS,MAAM,KAAK,KAAK,iBAAiB;AACvE,YAAM,SAAS,WAAW,SAAS,MAAM;AACzC,YAAMA,WAAU,EAAE,OAAO,CAAC,SAAS,QAAQ,QAA0D,UAAU,eAAe,SAAS;AAEvI,cAAQ,KAAK,EAAE,QAAQ,SAAAA,SAAQ,CAAC;AAEhC;AAAA,IACD;AAGA,QAAI,SAAS;AACb,QAAI,SAAS,SAAS,eAAe,cAAc;AAClD,iBAAW,YAAY,SAAS,UAAU;AAAA,IAC3C,OAAO;AACN,eAAS,WAAW,YAAY,SAAS,UAAU;AAAA,IACpD;AAGA,QAAI,WAAW,WAAW,CAAC,WAAW,UAA+F;AACpI,WAAK,YAAY,YAAY,IAAI;AAAA,IAClC;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,eAAe,QAAqD;AACnE,UAAM,aAAa,KAAK,gBAAgB,MAAM;AAE9C,QAAI,SAAS;AACb,eAAW,SAAS,KAAK,UAAU,YAAY,oBAAoB,GAAG;AACrE,UAAI,UAAU,YAAY;AACzB;AAAA,MACD;AAEA,YAAM,SAAS,KAAK,WAAW,OAAO,UAAU;AAChD,UAAI,CAAC,QAAQ;AACZ,iBAAS;AAAA,MACV;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEU,gBAAgB,OAA6D;AACtF,QAAI;AACJ,QAAI,OAAO,UAAU,UAAU;AAC9B,kBAAY,KAAK,gBAAgB,SAAS,KAAK;AAAA,IAChD,OAAO;AACN,kBAAY;AAAA,IACb;AAEA,QAAI,CAAC,WAAW;AACf,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACjD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,uBAAuB,WAAoB,UAAkD;AAC5F,eAAW,cAAc,SAAS,CAAC;AAEnC,WAAO,KAAK,2BAA2B,eAAe,kBAAkB,WAAW,QAAQ;AAAA,EAC5F;AAAA;AAAA;AAAA,EAKA,IAAI,eAAuB;AAAE,WAAO,KAAK,IAAI,KAAK,qBAAqB,cAAc,KAAK,cAAc,2BAA2B,KAAK,cAAc,aAAa,UAAU,KAAK,SAAS,CAAC,CAAC,EAAE,KAAK;AAAA,EAAG;AAAA,EACvM,IAAI,eAAuB;AAAE,WAAO,KAAK,qBAAqB;AAAA,EAAc;AAAA,EAC5E,IAAI,gBAAwB;AAAE,WAAO,KAAK,IAAI,KAAK,qBAAqB,eAAe,KAAK,cAAc,2BAA2B,KAAK,cAAc,aAAa,UAAU,KAAK,SAAS,CAAC,CAAC,EAAE,MAAM;AAAA,EAAG;AAAA,EAC1M,IAAI,gBAAwB;AAAE,WAAO,KAAK,qBAAqB;AAAA,EAAe;AAAA,EAE9E,IAAI,OAAgB;AAAE,WAAO,KAAK,cAAc,kBAAkB,MAAM;AAAA,EAAU;AAAA,EAElF,IAAa,cAA4C;AAAE,WAAO,MAAM,IAAI,KAAK,qBAAqB,aAAa,KAAK,mBAAmB,KAAK;AAAA,EAAG;AAAA,EAC1I,WAA2B,eAAe;AAAA,EAEnD,IAAY,sBAA6B;AACxC,WAAO,KAAK,MAAM,SAAS,mBAAmB,KAAK,KAAK,MAAM,SAAS,cAAc,KAAK,MAAM;AAAA,EACjG;AAAA,EAES,eAAqB;AAC7B,UAAM,YAAY,gBAAgB,KAAK,SAAS;AAChD,cAAU,MAAM,kBAAkB,KAAK,SAAS,gBAAgB,KAAK;AAErE,UAAM,uBAAuB,EAAE,iBAAiB,KAAK,qBAAqB,YAAY,KAAK,MAAM,SAAS,sBAAsB,KAAK,MAAM,YAAY;AACvJ,SAAK,WAAW,MAAM,oBAAoB;AAC1C,SAAK,qBAAqB,OAAO,oBAAoB;AAAA,EACtD;AAAA,EAEmB,kBAAkB,QAAqB,SAAmD;AAG5G,SAAK,UAAU;AACf,SAAK,YAAY,SAAS,cAAc,KAAK;AAC7C,SAAK,UAAU,UAAU,IAAI,SAAS;AACtC,QAAI,KAAK,aAAa,WAAW,gBAAgB;AAChD,WAAK,UAAU,UAAU,IAAI,WAAW;AAAA,IACzC;AACA,WAAO,YAAY,KAAK,SAAS;AAGjC,UAAM,0BAA0B,KAAK,UAAU,KAAK,kBAAkB,aAAa,KAAK,SAAS,CAAC;AAClG,SAAK,6BAA6B,KAAK,UAAU,KAAK,qBAAqB,YAAY,IAAI;AAAA,MAC1F,CAAC,oBAAoB,uBAAuB;AAAA,IAC7C,CAAC,CAAC;AAGF,SAAK,oBAAoB,CAAC,WAAW,QAAQ;AAC7C,SAAK,oBAAoB;AAGzB,SAAK,uBAAuB,KAAK,UAAU,IAAI,mBAAmB,KAAK,WAAW,KAAK,gBAAgB,KAAK,eAAe,WAAW,qCAAqC,GAAG,KAAK,aAAa,wBAAwB,CAAC;AACzN,SAAK,UAAU,KAAK,6BAA6B,OAAK,KAAK,qBAAqB,cAAc,EAAE,eAAe,4BAA4B,KAAK,CAAC,CAAC;AAGlJ,SAAK,wBAAwB,QAAQ,KAAK,SAAS;AAGnD,SAAK,kBAAkB,uBAAuB;AAG9C,SAAK,iBAAiB,SAAS;AAC/B,SAAK,WAAW;AAGhB,aAAS,QAAQ,KAAK,OAAO,IAAI,WAAS,MAAM,YAAY,CAAC,EAAE,QAAQ,MAAM;AAC5E,WAAK,oBAAoB,SAAS;AAAA,IACnC,CAAC;AAED,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,kBAAkB,mBAA6C;AACtE,UAAM,+BAA+B,6BAA6B,OAAO,iBAAiB;AAC1F,iCAA6B,IAAI,KAAK,aAAa,WAAW,cAAc;AAE5E,UAAM,8BAA8B,sCAAsC,OAAO,iBAAiB;AAClG,UAAM,8BAA8B,sCAAsC,OAAO,iBAAiB;AAElG,UAAM,oBAAoB,6BAAM;AAC/B,YAAM,aAAa,KAAK;AACxB,UAAI,aAAa,GAAG;AACnB,oCAA4B,IAAI,IAAI;AAAA,MACrC,OAAO;AACN,oCAA4B,MAAM;AAAA,MACnC;AAEA,UAAI,KAAK,kBAAkB,GAAG;AAC7B,oCAA4B,IAAI,IAAI;AAAA,MACrC,OAAO;AACN,oCAA4B,MAAM;AAAA,MACnC;AAAA,IACD,GAb0B;AAe1B,sBAAkB;AAElB,SAAK,UAAU,KAAK,cAAc,MAAM,kBAAkB,CAAC,CAAC;AAC5D,SAAK,UAAU,KAAK,iBAAiB,MAAM,kBAAkB,CAAC,CAAC;AAC/D,SAAK,UAAU,KAAK,0BAA0B,MAAM,kBAAkB,CAAC,CAAC;AAAA,EACzE;AAAA,EAEQ,wBAAwB,QAAqB,WAA8B;AAGlF,SAAK,UAAU,KAAK,uBAAuB,WAAW,uBAAO,OAAO,IAAI,CAAC,CAAC;AAG1E,UAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,YAAQ,UAAU,IAAI,oBAAoB;AAC1C,WAAO,YAAY,OAAO;AAG1B,SAAK,UAAU,sCAAsC,SAAS,MAAM,QAAQ,UAAU,OAAO,SAAS,CAAC,CAAC;AAExG,SAAK,UAAU,6BAA6B,SAAS,eAAe,KAAK,SAAS;AAAA,MACjF,aAAa,8BAAK,QAAQ,UAAU,IAAI,SAAS,GAApC;AAAA,MACb,WAAW,8BAAK,QAAQ,UAAU,OAAO,SAAS,GAAvC;AAAA,IACZ,CAAC,CAAC;AAEF,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,UAAM,qBAAqB,wBAAC,aAAuB;AAClD,UAAI,CAAC,KAAK,cAAc,UAAU,MAAM,UAAU,KAAK,aAAa,KAAK,cAAc,iBAAiB,GAAG;AAC1G,aAAK,cAAc,cAAc,OAAO,MAAM,UAAU;AAAA,MACzD,WAAW,CAAC,KAAK,cAAc,UAAU,MAAM,iBAAiB,KAAK,cAAc,KAAK,cAAc,mBAAmB,MAAM,SAAS,QAAQ,SAAS,OAAO,SAAS,QAAQ;AAChL,aAAK,cAAc,cAAc,OAAO,MAAM,iBAAiB;AAAA,MAChE;AAAA,IACD,GAN2B;AAQ3B,UAAM,mBAAmB,6BAAM;AAC9B,UAAI,yBAAyB;AAC5B,qBAAa,uBAAuB;AACpC,kCAA0B;AAAA,MAC3B;AAEA,UAAI,uBAAuB;AAC1B,qBAAa,qBAAqB;AAClC,gCAAwB;AAAA,MACzB;AAAA,IACD,GAVyB;AAYzB,SAAK,UAAU,6BAA6B,SAAS,eAAe,SAAS;AAAA,MAC5E,YAAY,8BAAK;AAChB,oBAAY,KAAK,EAAE,WAAW,IAAI;AAClC,YAAI,EAAE,UAAU,cAAc;AAC7B,YAAE,UAAU,aAAa,aAAa;AAAA,QACvC;AAEA,cAAM,eAAe,QAAQ,sBAAsB;AAEnD,YAAI,yBAA+C;AACnD,YAAI,uBAA6C;AACjD,cAAM,YAAY;AAClB,YAAI,EAAE,UAAU,UAAU,aAAa,OAAO,WAAW;AACxD,mCAAyB,SAAS;AAAA,QACnC;AAEA,YAAI,EAAE,UAAU,UAAU,aAAa,QAAQ,WAAW;AACzD,mCAAyB,SAAS;AAAA,QACnC;AAEA,YAAI,EAAE,UAAU,UAAU,aAAa,SAAS,WAAW;AAC1D,iCAAuB,SAAS;AAAA,QACjC;AAEA,YAAI,EAAE,UAAU,UAAU,aAAa,MAAM,WAAW;AACvD,iCAAuB,SAAS;AAAA,QACjC;AAEA,YAAI,2BAA2B,2BAA2B,4BAA4B;AACrF,uBAAa,uBAAuB;AACpC,oCAA0B;AAAA,QAC3B;AAEA,YAAI,yBAAyB,yBAAyB,0BAA0B;AAC/E,uBAAa,qBAAqB;AAClC,kCAAwB;AAAA,QACzB;AAEA,YAAI,CAAC,2BAA2B,2BAA2B,QAAW;AACrE,uCAA6B;AAC7B,oCAA0B,WAAW,MAAM,mBAAmB,sBAAsB,GAAG,GAAG;AAAA,QAC3F;AAEA,YAAI,CAAC,yBAAyB,yBAAyB,QAAW;AACjE,qCAA2B;AAC3B,kCAAwB,WAAW,MAAM,mBAAmB,oBAAoB,GAAG,GAAG;AAAA,QACvF;AAAA,MACD,GA9CY;AAAA,MA+CZ,aAAa,6BAAM,iBAAiB,GAAvB;AAAA,MACb,WAAW,6BAAM,iBAAiB,GAAvB;AAAA,MACX,QAAQ,6BAAM,iBAAiB,GAAvB;AAAA,IACT,CAAC,CAAC;AAAA,EACH;AAAA,EAEA,aAAa,QAAuB;AACnC,SAAK,qBAAqB,SAAS,MAAM;AAEzC,SAAK,aAAa,MAAM;AAAA,EACzB;AAAA,EAEA,mBAA4B;AAC3B,QAAI,KAAK,sBAAsB;AAC9B,aAAO,KAAK,qBAAqB,SAAS;AAAA,IAC3C;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,sBAA4B;AAGnC,QAAI,eAAe;AACnB,QAAI,KAAK,mBAAmB;AAC3B,qBAAe,CAAC,KAAK,qCAAqC;AAAA,IAC3D;AAGA,QAAI,CAAC,KAAK,cAAc,cAAc;AACrC,YAAM,eAAe,KAAK,kBAAkB;AAC5C,WAAK,gBAAgB,IAAI,iBAAiB,YAAY,CAAC;AAGvD,WAAK,iBAAiB,YAAY;AAAA,IACnC;AAGA,SAAK,gBAAgB;AAGrB,SAAK,uBAAuB;AAAA,EAC7B;AAAA,EAEQ,uCAAgD;AACvD,UAAM,QAAwC,KAAK,UAAU;AAC7D,QAAI,OAAO,gBAAgB;AAC1B,UAAI;AAGH,aAAK,yBAAyB,MAAM;AAGpC,aAAK,6BAA6B,MAAM,gBAAgB,MAAM,WAAW;AAAA,MAC1E,SAAS,OAAO;AAGf,0BAAkB,IAAI,MAAM,uCAAuC,KAAK,iBAAiB,KAAK,UAAU,KAAK,CAAC,GAAG,CAAC;AAGlH,aAAK,cAAc;AAEnB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,6BAA6B,gBAAiC,eAAgC,yBAA8C,SAAyC;AAG5L,QAAI;AACJ,QAAI,yBAAyB;AAC5B,wBAAkB,wBAAwB,MAAM,CAAC;AAAA,IAClD,OAAO;AACN,wBAAkB,CAAC;AAAA,IACpB;AAGA,UAAM,aAAiC,CAAC;AACxC,UAAM,aAAa,iBAAiB,YAAY,gBAAgB;AAAA,MAC/D,UAAU,wBAAC,0BAA8D;AACxE,YAAI;AACJ,YAAI,gBAAgB,SAAS,GAAG;AAC/B,sBAAY,gBAAgB,MAAM;AAAA,QACnC,OAAO;AACN,sBAAY,KAAK,kBAAkB,uBAAuB,OAAO;AAAA,QAClE;AAEA,mBAAW,KAAK,SAAS;AAEzB,YAAI,UAAU,OAAO,eAAe;AACnC,eAAK,iBAAiB,SAAS;AAAA,QAChC;AAEA,eAAO;AAAA,MACR,GAfU;AAAA,IAgBX,GAAG,EAAE,QAAQ,EAAE,iBAAiB,KAAK,oBAAoB,EAAE,CAAC;AAK5D,QAAI,CAAC,KAAK,cAAc;AACvB,WAAK,iBAAiB,WAAW,CAAC,CAAC;AAAA,IACpC;AAGA,QAAI,KAAK,uBAAuB,KAAK,aAAW,CAAC,KAAK,SAAS,OAAO,CAAC,GAAG;AACzE,WAAK,yBAAyB,WAAW,IAAI,WAAS,MAAM,EAAE;AAAA,IAC/D;AAGA,SAAK,gBAAgB,UAAU;AAAA,EAChC;AAAA,EAEQ,gBAAgB,YAAsD;AAC7E,QAAI,iBAAkC,CAAC;AAEvC,QAAI,KAAK,YAAY;AACpB,uBAAiB,KAAK,WAAW;AACjC,WAAK,WAAW,QAAQ;AAAA,IACzB;AAEA,SAAK,aAAa;AAClB,SAAK,WAAW,iBAAiB;AACjC,SAAK,eAAe,aAAa;AAEjC,SAAK,4BAA4B,QAAQ,WAAW;AACpD,SAAK,aAAa,QAAQ,WAAW;AACrC,SAAK,sBAAsB,MAAM;AACjC,SAAK,sBAAsB,IAAI,WAAW,yBAAyB,eAAa,KAAK,2BAA2B,KAAK,SAAS,CAAC,CAAC;AAEhI,SAAK,2BAA2B,KAAK,KAAK,kBAAkB,CAAC;AAE7D,SAAK,mBAAmB,KAAK,MAAS;AAAA,EACvC;AAAA,EAEQ,kBAAwB;AAC/B,UAAM,YAAY,gBAAgB,KAAK,SAAS;AAChD,cAAU,UAAU,OAAO,SAAS,KAAK,OAAO;AAAA,EACjD;AAAA,EAEQ,yBAA+B;AACtC,SAAK,UAAU,YAAY,eAAe,EAAE,QAAQ,CAAC,OAAO,UAAU,MAAM,mBAAmB,KAAK,CAAC;AAAA,EACtG;AAAA,EAEA,wBAAwB,UAAkB;AACzC,eAAW,SAAS,KAAK,QAAQ;AAChC,YAAM,mBAAmB,QAAQ;AAAA,IAClC;AAAA,EACD;AAAA,EAEA,IAAY,UAAmB;AAC9B,WAAO,KAAK,UAAU,KAAK,KAAK,aAAa;AAAA,EAC9C;AAAA,EAEA,kBAAkB,QAA+B;AAChD,SAAK,WAAW,iBAAiB;AACjC,SAAK,qBAAqB,iBAAiB;AAAA,EAC5C;AAAA,EAES,OAAO,OAAe,QAAgB,KAAa,MAAoB;AAC/E,SAAK,MAAM;AACX,SAAK,OAAO;AAGZ,UAAM,kBAAkB,MAAM,eAAe,OAAO,MAAM,EAAE;AAG5D,SAAK,SAAS,UAAU,KAAK,eAAe,GAAG,KAAK,IAAI;AAAA,EACzD;AAAA,EAEQ,SAAS,WAAsB,MAAM,KAAK,KAAK,OAAO,KAAK,MAAY;AAC9E,SAAK,oBAAoB;AAGzB,SAAK,qBAAqB,OAAO,KAAK,kBAAkB,OAAO,KAAK,kBAAkB,QAAQ,KAAK,IAAI;AAGvG,SAAK,aAAa,KAAK,SAAS;AAAA,EACjC;AAAA,EAEmB,YAAkB;AAGpC,QAAI,KAAK,YAAY;AACpB,UAAI,KAAK,SAAS;AACjB,eAAO,KAAK,iBAAiB,WAAW,gCAAgC;AAAA,MACzE,OAAO;AACN,aAAK,iBAAiB,WAAW,gCAAgC,IAAI,KAAK,YAAY;AAAA,MACvF;AAAA,IACD;AAGA,QAAI,KAAK,sBAAsB;AAC9B,YAAM,sBAAsB,KAAK,qBAAqB;AACtD,UAAI,KAAK,qBAAqB,UAAU,mBAAmB,GAAG;AAC7D,eAAO,KAAK,eAAe,WAAW,qCAAqC;AAAA,MAC5E,OAAO;AACN,aAAK,eAAe,WAAW,qCAAqC,IAAI;AAAA,MACzE;AAAA,IACD;AAEA,UAAM,UAAU;AAAA,EACjB;AAAA,EAEU,YAA4C;AACrD,WAAO,KAAK,iBAAiB,WAAW,gCAAgC;AAAA,EACzE;AAAA,EAEA,cAAkC;AACjC,WAAO;AAAA,MACN,gBAAgB,KAAK,WAAW,UAAU;AAAA,MAC1C,aAAa,KAAK,aAAa;AAAA,MAC/B,wBAAwB,KAAK;AAAA,IAC9B;AAAA,EACD;AAAA,EAEA,WAAW,OAAqC,SAAkD;AACjG,QAAI,UAAU,SAAS;AACtB,aAAO,KAAK,kBAAkB;AAAA,IAC/B,OAAO;AACN,aAAO,KAAK,aAAa,OAAO,OAAO;AAAA,IACxC;AAAA,EACD;AAAA,EAEA,MAAc,aAAa,OAA2B,SAAkD;AACvG,UAAM,SAAS,MAAM,KAAK,oBAAoB;AAQ9C,SAAK,eAAe,MAAM;AAC1B,SAAK,kBAAkB,MAAM;AAE7B,SAAK,cAAc;AAGnB,SAAK,yBAAyB,MAAM;AAGpC,QAAI;AACH,WAAK,iBAAiB,MAAM,gBAAgB,MAAM,aAAa,QAAW,OAAO;AAAA,IAClF,UAAE;AAKD,WAAK,kBAAkB,OAAO;AAC9B,WAAK,eAAe,OAAO;AAAA,IAC5B;AAGA,UAAM,KAAK,YAAY;AAAA,MACtB,OACE,QAAQ,WAAS,MAAM,OAAO,EAC9B,OAAO,YAAU,KAAK,gBAAgB,OAAO,MAAM,eAAa,CAAC,UAAU,SAAS,MAAM,CAAC,CAAC,EAC5F,IAAI,aAAW;AAAA,QACf;AAAA,QAAQ,SAAS,EAAE,QAAQ,MAAM,eAAe,MAAM,UAAU,KAAK;AAAA,MACtE,EAAE;AAAA,IACJ;AAAA,EACD;AAAA,EAEA,MAAc,oBAAmC;AAChD,UAAM,KAAK,oBAAoB;AAE/B,SAAK,eAAe,KAAK,WAAW;AAAA,EACrC;AAAA,EAEA,MAAc,sBAAmD;AAOhE,UAAM,SAAS,KAAK,UAAU,YAAY,oBAAoB;AAC9D,eAAW,SAAS,QAAQ;AAC3B,YAAM,MAAM,gBAAgB,EAAE,mBAAmB,KAAK,CAAC;AAAA,IACxD;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,iBAAiB,WAA4B,eAAgC,yBAA8C,SAAyC;AAG3K,SAAK,6BAA6B,WAAW,eAAe,yBAAyB,OAAO;AAG5F,SAAK,SAAS,KAAK,iBAAiB;AAGpC,SAAK,gBAAgB;AAGrB,eAAW,aAAa,KAAK,UAAU,YAAY,eAAe,GAAG;AACpE,UAAI,CAAC,yBAAyB,SAAS,SAAS,GAAG;AAClD,aAAK,eAAe,KAAK,SAAS;AAAA,MACnC;AAAA,IACD;AAGA,SAAK,uBAAuB;AAAA,EAC7B;AAAA,EAEQ,wBAAwB,GAAmC;AAClE,QAAI,EAAE,YAAY,EAAE,UAAU,aAAa,WAAW;AACrD,WAAK,cAAc,EAAE,KAAK;AAE1B,YAAM,QAAQ,KAAK,UAAU;AAC7B,UAAI,OAAO;AACV,aAAK,WAAW,KAAK;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AAAA,EAEA,SAAiB;AAChB,WAAO;AAAA,MACN,MAAM,MAAM;AAAA,IACb;AAAA,EACD;AAAA,EAEQ,gBAAsB;AAC7B,eAAW,SAAS,KAAK,QAAQ;AAChC,YAAM,QAAQ;AAEd,WAAK,kBAAkB,KAAK,KAAK;AAAA,IAClC;AAEA,SAAK,WAAW,MAAM;AACtB,SAAK,yBAAyB,CAAC;AAAA,EAChC;AAAA,EAES,UAAgB;AAGxB,SAAK,eAAe,KAAK;AAGzB,SAAK,cAAc;AAGnB,SAAK,YAAY,QAAQ;AAEzB,UAAM,QAAQ;AAAA,EACf;AAAA;AAGD;AAx3Ca,aAAN;AAAA,EA6EJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAnFU;AA03CN,IAAM,iBAAN,cAA6B,WAAW;AAAA,EA/8C/C,OA+8C+C;AAAA;AAAA;AAAA,EAE9C,YACC,iBACuB,sBACR,cACQ,sBACN,gBACQ,eACX,aACM,mBACnB;AACD,UAAM,iBAAiB,MAAM,aAAa,IAAI,WAAW,gBAAgB,sBAAsB,cAAc,sBAAsB,gBAAgB,eAAe,aAAa,iBAAiB;AAAA,EACjM;AACD;AAda,iBAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAVU;",
  "names": ["options"]
}
