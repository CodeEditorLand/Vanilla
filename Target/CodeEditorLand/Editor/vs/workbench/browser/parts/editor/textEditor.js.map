{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/textEditor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { MutableDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { deepClone, distinct } from \"../../../../base/common/objects.js\";\nimport { assertIsDefined, isObject } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { ICodeEditor } from \"../../../../editor/browser/editorBrowser.js\";\nimport type { IEditorOptions as ICodeEditorOptions } from \"../../../../editor/common/config/editorOptions.js\";\nimport type { Selection } from \"../../../../editor/common/core/selection.js\";\nimport type { ICursorPositionChangedEvent } from \"../../../../editor/common/cursorEvents.js\";\nimport type { IEditorViewState } from \"../../../../editor/common/editorCommon.js\";\nimport {\n\ttype ITextResourceConfigurationChangeEvent,\n\tITextResourceConfigurationService,\n} from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\ttype IEditorOptions,\n\ttype ITextEditorOptions,\n\tTextEditorSelectionRevealType,\n\tTextEditorSelectionSource,\n} from \"../../../../platform/editor/common/editor.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tEditorPaneSelectionChangeReason,\n\tEditorPaneSelectionCompareResult,\n\ttype IEditorOpenContext,\n\ttype IEditorPaneScrollPosition,\n\ttype IEditorPaneSelection,\n\ttype IEditorPaneSelectionChangeEvent,\n\ttype IEditorPaneWithScrolling,\n\ttype IEditorPaneWithSelection,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport {\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n} from \"../../../services/editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { computeEditorAriaLabel } from \"../../editor.js\";\nimport { AbstractEditorWithViewState } from \"./editorWithViewState.js\";\n\nexport interface IEditorConfiguration {\n\teditor: object;\n\tdiffEditor: object;\n\taccessibility?: {\n\t\tverbosity?: {\n\t\t\tdiffEditor?: boolean;\n\t\t};\n\t};\n\tproblems?: {\n\t\tvisibility?: boolean;\n\t};\n}\n\n/**\n * The base class of editors that leverage any kind of text editor for the editing experience.\n */\nexport abstract class AbstractTextEditor<T extends IEditorViewState>\n\textends AbstractEditorWithViewState<T>\n\timplements IEditorPaneWithSelection, IEditorPaneWithScrolling\n{\n\tprivate static readonly VIEW_STATE_PREFERENCE_KEY = \"textEditorViewState\";\n\n\tprotected readonly _onDidChangeSelection = this._register(\n\t\tnew Emitter<IEditorPaneSelectionChangeEvent>(),\n\t);\n\treadonly onDidChangeSelection = this._onDidChangeSelection.event;\n\n\tprotected readonly _onDidChangeScroll = this._register(new Emitter<void>());\n\treadonly onDidChangeScroll = this._onDidChangeScroll.event;\n\n\tprivate editorContainer: HTMLElement | undefined;\n\n\tprivate hasPendingConfigurationChange: boolean | undefined;\n\tprivate lastAppliedEditorOptions?: ICodeEditorOptions;\n\n\tprivate readonly inputListener = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tid: string,\n\t\tgroup: IEditorGroup,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IFileService protected readonly fileService: IFileService\n\t) {\n\t\tsuper(id, group, AbstractTextEditor.VIEW_STATE_PREFERENCE_KEY, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService);\n\n\t\t// Listen to configuration changes\n\t\tthis._register(this.textResourceConfigurationService.onDidChangeConfiguration(e => this.handleConfigurationChangeEvent(e)));\n\n\t\t// ARIA: if a group is added or removed, update the editor's ARIA\n\t\t// label so that it appears in the label for when there are > 1 groups\n\n\t\tthis._register(Event.any(this.editorGroupService.onDidAddGroup, this.editorGroupService.onDidRemoveGroup)(() => {\n\t\t\tconst ariaLabel = this.computeAriaLabel();\n\n\t\t\tthis.editorContainer?.setAttribute('aria-label', ariaLabel);\n\t\t\tthis.updateEditorControlOptions({ ariaLabel });\n\t\t}));\n\n\t\t// Listen to file system provider changes\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderCapabilities(e => this.onDidChangeFileSystemProvider(e.scheme)));\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e => this.onDidChangeFileSystemProvider(e.scheme)));\n\t}\n\n\tprivate handleConfigurationChangeEvent(\n\t\te: ITextResourceConfigurationChangeEvent,\n\t): void {\n\t\tconst resource = this.getActiveResource();\n\t\tif (!this.shouldHandleConfigurationChangeEvent(e, resource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.isVisible()) {\n\t\t\tthis.updateEditorConfiguration(resource);\n\t\t} else {\n\t\t\tthis.hasPendingConfigurationChange = true;\n\t\t}\n\t}\n\n\tprotected shouldHandleConfigurationChangeEvent(\n\t\te: ITextResourceConfigurationChangeEvent,\n\t\tresource: URI | undefined,\n\t): boolean {\n\t\treturn (\n\t\t\te.affectsConfiguration(resource, \"editor\") ||\n\t\t\te.affectsConfiguration(resource, \"problems.visibility\")\n\t\t);\n\t}\n\n\tprivate consumePendingConfigurationChangeEvent(): void {\n\t\tif (this.hasPendingConfigurationChange) {\n\t\t\tthis.updateEditorConfiguration();\n\t\t\tthis.hasPendingConfigurationChange = false;\n\t\t}\n\t}\n\n\tprotected computeConfiguration(\n\t\tconfiguration: IEditorConfiguration,\n\t): ICodeEditorOptions {\n\t\t// Specific editor options always overwrite user configuration\n\t\tconst editorConfiguration: ICodeEditorOptions = isObject(\n\t\t\tconfiguration.editor,\n\t\t)\n\t\t\t? deepClone(configuration.editor)\n\t\t\t: Object.create(null);\n\t\tObject.assign(\n\t\t\teditorConfiguration,\n\t\t\tthis.getConfigurationOverrides(configuration),\n\t\t);\n\n\t\t// ARIA label\n\t\teditorConfiguration.ariaLabel = this.computeAriaLabel();\n\n\t\treturn editorConfiguration;\n\t}\n\n\tprotected computeAriaLabel(): string {\n\t\treturn this.input\n\t\t\t? computeEditorAriaLabel(\n\t\t\t\t\tthis.input,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.group,\n\t\t\t\t\tthis.editorGroupService.count,\n\t\t\t\t)\n\t\t\t: localize(\"editor\", \"Editor\");\n\t}\n\n\tprivate onDidChangeFileSystemProvider(scheme: string): void {\n\t\tif (!this.input) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.getActiveResource()?.scheme === scheme) {\n\t\t\tthis.updateReadonly(this.input);\n\t\t}\n\t}\n\n\tprivate onDidChangeInputCapabilities(input: EditorInput): void {\n\t\tif (this.input === input) {\n\t\t\tthis.updateReadonly(input);\n\t\t}\n\t}\n\n\tprotected updateReadonly(input: EditorInput): void {\n\t\tthis.updateEditorControlOptions({\n\t\t\t...this.getReadonlyConfiguration(input.isReadonly()),\n\t\t});\n\t}\n\n\tprotected getReadonlyConfiguration(\n\t\tisReadonly: boolean | IMarkdownString | undefined,\n\t): { readOnly: boolean; readOnlyMessage: IMarkdownString | undefined } {\n\t\treturn {\n\t\t\treadOnly: !!isReadonly,\n\t\t\treadOnlyMessage:\n\t\t\t\ttypeof isReadonly !== \"boolean\" ? isReadonly : undefined,\n\t\t};\n\t}\n\n\tprotected getConfigurationOverrides(\n\t\tconfiguration: IEditorConfiguration,\n\t): ICodeEditorOptions {\n\t\treturn {\n\t\t\toverviewRulerLanes: 3,\n\t\t\tlineNumbersMinChars: 3,\n\t\t\tfixedOverflowWidgets: true,\n\t\t\t...this.getReadonlyConfiguration(this.input?.isReadonly()),\n\t\t\trenderValidationDecorations:\n\t\t\t\tconfiguration.problems?.visibility !== false ? \"on\" : \"off\",\n\t\t};\n\t}\n\n\tprotected createEditor(parent: HTMLElement): void {\n\t\t// Create editor control\n\t\tthis.editorContainer = parent;\n\t\tthis.createEditorControl(\n\t\t\tparent,\n\t\t\tthis.computeConfiguration(\n\t\t\t\tthis.textResourceConfigurationService.getValue<IEditorConfiguration>(\n\t\t\t\t\tthis.getActiveResource(),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\t// Listeners\n\t\tthis.registerCodeEditorListeners();\n\t}\n\n\tprivate registerCodeEditorListeners(): void {\n\t\tconst mainControl = this.getMainControl();\n\t\tif (mainControl) {\n\t\t\tthis._register(\n\t\t\t\tmainControl.onDidChangeModelLanguage(() =>\n\t\t\t\t\tthis.updateEditorConfiguration(),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tmainControl.onDidChangeModel(() =>\n\t\t\t\t\tthis.updateEditorConfiguration(),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tmainControl.onDidChangeCursorPosition((e) =>\n\t\t\t\t\tthis._onDidChangeSelection.fire({\n\t\t\t\t\t\treason: this.toEditorPaneSelectionChangeReason(e),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tmainControl.onDidChangeModelContent(() =>\n\t\t\t\t\tthis._onDidChangeSelection.fire({\n\t\t\t\t\t\treason: EditorPaneSelectionChangeReason.EDIT,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tmainControl.onDidScrollChange(() =>\n\t\t\t\t\tthis._onDidChangeScroll.fire(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate toEditorPaneSelectionChangeReason(\n\t\te: ICursorPositionChangedEvent,\n\t): EditorPaneSelectionChangeReason {\n\t\tswitch (e.source) {\n\t\t\tcase TextEditorSelectionSource.PROGRAMMATIC:\n\t\t\t\treturn EditorPaneSelectionChangeReason.PROGRAMMATIC;\n\t\t\tcase TextEditorSelectionSource.NAVIGATION:\n\t\t\t\treturn EditorPaneSelectionChangeReason.NAVIGATION;\n\t\t\tcase TextEditorSelectionSource.JUMP:\n\t\t\t\treturn EditorPaneSelectionChangeReason.JUMP;\n\t\t\tdefault:\n\t\t\t\treturn EditorPaneSelectionChangeReason.USER;\n\t\t}\n\t}\n\n\tgetSelection(): IEditorPaneSelection | undefined {\n\t\tconst mainControl = this.getMainControl();\n\t\tif (mainControl) {\n\t\t\tconst selection = mainControl.getSelection();\n\t\t\tif (selection) {\n\t\t\t\treturn new TextEditorPaneSelection(selection);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * This method creates and returns the text editor control to be used.\n\t * Subclasses must override to provide their own editor control that\n\t * should be used (e.g. a text diff editor).\n\t *\n\t * The passed in configuration object should be passed to the editor\n\t * control when creating it.\n\t */\n\tprotected abstract createEditorControl(\n\t\tparent: HTMLElement,\n\t\tinitialOptions: ICodeEditorOptions,\n\t): void;\n\n\t/**\n\t * The method asks to update the editor control options and is called\n\t * whenever there is change to the options.\n\t */\n\tprotected abstract updateEditorControlOptions(\n\t\toptions: ICodeEditorOptions,\n\t): void;\n\n\t/**\n\t * This method returns the main, dominant instance of `ICodeEditor`\n\t * for the editor pane. E.g. for a diff editor, this is the right\n\t * hand (modified) side.\n\t */\n\tprotected abstract getMainControl(): ICodeEditor | undefined;\n\n\toverride async setInput(\n\t\tinput: EditorInput,\n\t\toptions: ITextEditorOptions | undefined,\n\t\tcontext: IEditorOpenContext,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tawait super.setInput(input, options, context, token);\n\n\t\t// Update our listener for input capabilities\n\t\tthis.inputListener.value = input.onDidChangeCapabilities(() =>\n\t\t\tthis.onDidChangeInputCapabilities(input),\n\t\t);\n\n\t\t// Update editor options after having set the input. We do this because there can be\n\t\t// editor input specific options (e.g. an ARIA label depending on the input showing)\n\t\tthis.updateEditorConfiguration();\n\n\t\t// Update aria label on editor\n\t\tconst editorContainer = assertIsDefined(this.editorContainer);\n\t\teditorContainer.setAttribute(\"aria-label\", this.computeAriaLabel());\n\t}\n\n\toverride clearInput(): void {\n\t\t// Clear input listener\n\t\tthis.inputListener.clear();\n\n\t\tsuper.clearInput();\n\t}\n\n\tgetScrollPosition(): IEditorPaneScrollPosition {\n\t\tconst editor = this.getMainControl();\n\t\tif (!editor) {\n\t\t\tthrow new Error(\"Control has not yet been initialized\");\n\t\t}\n\n\t\treturn {\n\t\t\t// The top position can vary depending on the view zones (find widget for example)\n\t\t\tscrollTop: editor.getScrollTop() - editor.getTopForLineNumber(1),\n\t\t\tscrollLeft: editor.getScrollLeft(),\n\t\t};\n\t}\n\n\tsetScrollPosition(scrollPosition: IEditorPaneScrollPosition): void {\n\t\tconst editor = this.getMainControl();\n\t\tif (!editor) {\n\t\t\tthrow new Error(\"Control has not yet been initialized\");\n\t\t}\n\n\t\teditor.setScrollTop(scrollPosition.scrollTop);\n\t\tif (scrollPosition.scrollLeft) {\n\t\t\teditor.setScrollLeft(scrollPosition.scrollLeft);\n\t\t}\n\t}\n\n\tprotected override setEditorVisible(visible: boolean): void {\n\t\tif (visible) {\n\t\t\tthis.consumePendingConfigurationChangeEvent();\n\t\t}\n\n\t\tsuper.setEditorVisible(visible);\n\t}\n\n\tprotected override toEditorViewStateResource(\n\t\tinput: EditorInput,\n\t): URI | undefined {\n\t\treturn input.resource;\n\t}\n\n\tprivate updateEditorConfiguration(\n\t\tresource = this.getActiveResource(),\n\t): void {\n\t\tlet configuration: IEditorConfiguration | undefined;\n\t\tif (resource) {\n\t\t\tconfiguration =\n\t\t\t\tthis.textResourceConfigurationService.getValue<IEditorConfiguration>(\n\t\t\t\t\tresource,\n\t\t\t\t);\n\t\t}\n\n\t\tif (!configuration) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorConfiguration = this.computeConfiguration(configuration);\n\n\t\t// Try to figure out the actual editor options that changed from the last time we updated the editor.\n\t\t// We do this so that we are not overwriting some dynamic editor settings (e.g. word wrap) that might\n\t\t// have been applied to the editor directly.\n\t\tlet editorSettingsToApply = editorConfiguration;\n\t\tif (this.lastAppliedEditorOptions) {\n\t\t\teditorSettingsToApply = distinct(\n\t\t\t\tthis.lastAppliedEditorOptions,\n\t\t\t\teditorSettingsToApply,\n\t\t\t);\n\t\t}\n\n\t\tif (Object.keys(editorSettingsToApply).length > 0) {\n\t\t\tthis.lastAppliedEditorOptions = editorConfiguration;\n\n\t\t\tthis.updateEditorControlOptions(editorSettingsToApply);\n\t\t}\n\t}\n\n\tprivate getActiveResource(): URI | undefined {\n\t\tconst mainControl = this.getMainControl();\n\t\tif (mainControl) {\n\t\t\tconst model = mainControl.getModel();\n\t\t\tif (model) {\n\t\t\t\treturn model.uri;\n\t\t\t}\n\t\t}\n\n\t\tif (this.input) {\n\t\t\treturn this.input.resource;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.lastAppliedEditorOptions = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport class TextEditorPaneSelection implements IEditorPaneSelection {\n\tprivate static readonly TEXT_EDITOR_SELECTION_THRESHOLD = 10; // number of lines to move in editor to justify for significant change\n\n\tconstructor(private readonly textSelection: Selection) {}\n\n\tcompare(other: IEditorPaneSelection): EditorPaneSelectionCompareResult {\n\t\tif (!(other instanceof TextEditorPaneSelection)) {\n\t\t\treturn EditorPaneSelectionCompareResult.DIFFERENT;\n\t\t}\n\n\t\tconst thisLineNumber = Math.min(\n\t\t\tthis.textSelection.selectionStartLineNumber,\n\t\t\tthis.textSelection.positionLineNumber,\n\t\t);\n\t\tconst otherLineNumber = Math.min(\n\t\t\tother.textSelection.selectionStartLineNumber,\n\t\t\tother.textSelection.positionLineNumber,\n\t\t);\n\n\t\tif (thisLineNumber === otherLineNumber) {\n\t\t\treturn EditorPaneSelectionCompareResult.IDENTICAL;\n\t\t}\n\n\t\tif (\n\t\t\tMath.abs(thisLineNumber - otherLineNumber) <\n\t\t\tTextEditorPaneSelection.TEXT_EDITOR_SELECTION_THRESHOLD\n\t\t) {\n\t\t\treturn EditorPaneSelectionCompareResult.SIMILAR; // when in close proximity, treat selection as being similar\n\t\t}\n\n\t\treturn EditorPaneSelectionCompareResult.DIFFERENT;\n\t}\n\n\trestore(options: IEditorOptions): ITextEditorOptions {\n\t\tconst textEditorOptions: ITextEditorOptions = {\n\t\t\t...options,\n\t\t\tselection: this.textSelection,\n\t\t\tselectionRevealType:\n\t\t\t\tTextEditorSelectionRevealType.CenterIfOutsideViewport,\n\t\t};\n\n\t\treturn textEditorOptions;\n\t}\n\n\tlog(): string {\n\t\treturn `line: ${this.textSelection.startLineNumber}-${this.textSelection.endLineNumber}, col:  ${this.textSelection.startColumn}-${this.textSelection.endColumn}`;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
