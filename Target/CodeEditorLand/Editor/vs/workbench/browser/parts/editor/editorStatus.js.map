{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/editor/editorStatus.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/editorstatus.css';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { getWindowById, runAtThisOrScheduleAtNextAnimationFrame } from '../../../../base/browser/dom.js';\nimport { format, compare, splitLines } from '../../../../base/common/strings.js';\nimport { extname, basename, isEqual } from '../../../../base/common/resources.js';\nimport { areFunctions, assertIsDefined } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Action } from '../../../../base/common/actions.js';\nimport { Language } from '../../../../base/common/platform.js';\nimport { UntitledTextEditorInput } from '../../../services/untitled/common/untitledTextEditorInput.js';\nimport { IFileEditorInput, EditorResourceAccessor, IEditorPane, SideBySideEditor } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { Disposable, MutableDisposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IEditorAction } from '../../../../editor/common/editorCommon.js';\nimport { EndOfLineSequence } from '../../../../editor/common/model.js';\nimport { TrimTrailingWhitespaceAction } from '../../../../editor/contrib/linesOperations/browser/linesOperations.js';\nimport { IndentUsingSpaces, IndentUsingTabs, ChangeTabDisplaySize, DetectIndentation, IndentationToSpacesAction, IndentationToTabsAction } from '../../../../editor/contrib/indentation/browser/indentation.js';\nimport { BaseBinaryResourceEditor } from './binaryEditor.js';\nimport { BinaryResourceDiffEditor } from './binaryDiffEditor.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IFileService, FILES_ASSOCIATIONS_CONFIG } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILanguageService, ILanguageSelection } from '../../../../editor/common/languages/language.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { Selection } from '../../../../editor/common/core/selection.js';\nimport { ICommandService, CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { IExtensionGalleryService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { EncodingMode, IEncodingSupport, ILanguageSupport, ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { SUPPORTED_ENCODINGS } from '../../../services/textfile/common/encoding.js';\nimport { ConfigurationChangedEvent, EditorOption } from '../../../../editor/common/config/editorOptions.js';\nimport { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { deepClone } from '../../../../base/common/objects.js';\nimport { ICodeEditor, getCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { IQuickInputService, IQuickPickItem, QuickPickInput } from '../../../../platform/quickinput/common/quickInput.js';\nimport { getIconClassesForLanguageId } from '../../../../editor/common/services/getIconClasses.js';\nimport { Promises, timeout } from '../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment, IStatusbarEntry } from '../../../services/statusbar/browser/statusbar.js';\nimport { IMarker, IMarkerService, MarkerSeverity, IMarkerData } from '../../../../platform/markers/common/markers.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';\nimport { AutomaticLanguageDetectionLikelyWrongClassification, AutomaticLanguageDetectionLikelyWrongId, IAutomaticLanguageDetectionLikelyWrongData, ILanguageDetectionService } from '../../../services/languageDetection/common/languageDetectionWorkerService.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Action2 } from '../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { TabFocus } from '../../../../editor/browser/config/tabFocus.js';\nimport { IEditorGroupsService, IEditorPart } from '../../../services/editor/common/editorGroupsService.js';\n\nclass SideBySideEditorEncodingSupport implements IEncodingSupport {\n\tconstructor(private primary: IEncodingSupport, private secondary: IEncodingSupport) { }\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.primary.getEncoding(); // always report from modified (right hand) side\n\t}\n\n\tasync setEncoding(encoding: string, mode: EncodingMode): Promise<void> {\n\t\tawait Promises.settled([this.primary, this.secondary].map(editor => editor.setEncoding(encoding, mode)));\n\t}\n}\n\nclass SideBySideEditorLanguageSupport implements ILanguageSupport {\n\n\tconstructor(private primary: ILanguageSupport, private secondary: ILanguageSupport) { }\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\t[this.primary, this.secondary].forEach(editor => editor.setLanguageId(languageId, source));\n\t}\n}\n\nfunction toEditorWithEncodingSupport(input: EditorInput): IEncodingSupport | null {\n\n\t// Untitled Text Editor\n\tif (input instanceof UntitledTextEditorInput) {\n\t\treturn input;\n\t}\n\n\t// Side by Side (diff) Editor\n\tif (input instanceof SideBySideEditorInput) {\n\t\tconst primaryEncodingSupport = toEditorWithEncodingSupport(input.primary);\n\t\tconst secondaryEncodingSupport = toEditorWithEncodingSupport(input.secondary);\n\n\t\tif (primaryEncodingSupport && secondaryEncodingSupport) {\n\t\t\treturn new SideBySideEditorEncodingSupport(primaryEncodingSupport, secondaryEncodingSupport);\n\t\t}\n\n\t\treturn primaryEncodingSupport;\n\t}\n\n\t// File or Resource Editor\n\tconst encodingSupport = input as IFileEditorInput;\n\tif (areFunctions(encodingSupport.setEncoding, encodingSupport.getEncoding)) {\n\t\treturn encodingSupport;\n\t}\n\n\t// Unsupported for any other editor\n\treturn null;\n}\n\nfunction toEditorWithLanguageSupport(input: EditorInput): ILanguageSupport | null {\n\n\t// Untitled Text Editor\n\tif (input instanceof UntitledTextEditorInput) {\n\t\treturn input;\n\t}\n\n\t// Side by Side (diff) Editor\n\tif (input instanceof SideBySideEditorInput) {\n\t\tconst primaryLanguageSupport = toEditorWithLanguageSupport(input.primary);\n\t\tconst secondaryLanguageSupport = toEditorWithLanguageSupport(input.secondary);\n\n\t\tif (primaryLanguageSupport && secondaryLanguageSupport) {\n\t\t\treturn new SideBySideEditorLanguageSupport(primaryLanguageSupport, secondaryLanguageSupport);\n\t\t}\n\n\t\treturn primaryLanguageSupport;\n\t}\n\n\t// File or Resource Editor\n\tconst languageSupport = input as IFileEditorInput;\n\tif (typeof languageSupport.setLanguageId === 'function') {\n\t\treturn languageSupport;\n\t}\n\n\t// Unsupported for any other editor\n\treturn null;\n}\n\ninterface IEditorSelectionStatus {\n\tselections?: Selection[];\n\tcharactersSelected?: number;\n}\n\nclass StateChange {\n\tindentation: boolean = false;\n\tselectionStatus: boolean = false;\n\tlanguageId: boolean = false;\n\tlanguageStatus: boolean = false;\n\tencoding: boolean = false;\n\tEOL: boolean = false;\n\ttabFocusMode: boolean = false;\n\tcolumnSelectionMode: boolean = false;\n\tmetadata: boolean = false;\n\n\tcombine(other: StateChange) {\n\t\tthis.indentation = this.indentation || other.indentation;\n\t\tthis.selectionStatus = this.selectionStatus || other.selectionStatus;\n\t\tthis.languageId = this.languageId || other.languageId;\n\t\tthis.languageStatus = this.languageStatus || other.languageStatus;\n\t\tthis.encoding = this.encoding || other.encoding;\n\t\tthis.EOL = this.EOL || other.EOL;\n\t\tthis.tabFocusMode = this.tabFocusMode || other.tabFocusMode;\n\t\tthis.columnSelectionMode = this.columnSelectionMode || other.columnSelectionMode;\n\t\tthis.metadata = this.metadata || other.metadata;\n\t}\n\n\thasChanges(): boolean {\n\t\treturn this.indentation\n\t\t\t|| this.selectionStatus\n\t\t\t|| this.languageId\n\t\t\t|| this.languageStatus\n\t\t\t|| this.encoding\n\t\t\t|| this.EOL\n\t\t\t|| this.tabFocusMode\n\t\t\t|| this.columnSelectionMode\n\t\t\t|| this.metadata;\n\t}\n}\n\ntype StateDelta = (\n\t{ type: 'selectionStatus'; selectionStatus: string | undefined }\n\t| { type: 'languageId'; languageId: string | undefined }\n\t| { type: 'encoding'; encoding: string | undefined }\n\t| { type: 'EOL'; EOL: string | undefined }\n\t| { type: 'indentation'; indentation: string | undefined }\n\t| { type: 'tabFocusMode'; tabFocusMode: boolean }\n\t| { type: 'columnSelectionMode'; columnSelectionMode: boolean }\n\t| { type: 'metadata'; metadata: string | undefined }\n);\n\nclass State {\n\n\tprivate _selectionStatus: string | undefined;\n\tget selectionStatus(): string | undefined { return this._selectionStatus; }\n\n\tprivate _languageId: string | undefined;\n\tget languageId(): string | undefined { return this._languageId; }\n\n\tprivate _encoding: string | undefined;\n\tget encoding(): string | undefined { return this._encoding; }\n\n\tprivate _EOL: string | undefined;\n\tget EOL(): string | undefined { return this._EOL; }\n\n\tprivate _indentation: string | undefined;\n\tget indentation(): string | undefined { return this._indentation; }\n\n\tprivate _tabFocusMode: boolean | undefined;\n\tget tabFocusMode(): boolean | undefined { return this._tabFocusMode; }\n\n\tprivate _columnSelectionMode: boolean | undefined;\n\tget columnSelectionMode(): boolean | undefined { return this._columnSelectionMode; }\n\n\tprivate _metadata: string | undefined;\n\tget metadata(): string | undefined { return this._metadata; }\n\n\tupdate(update: StateDelta): StateChange {\n\t\tconst change = new StateChange();\n\n\t\tswitch (update.type) {\n\t\t\tcase 'selectionStatus':\n\t\t\t\tif (this._selectionStatus !== update.selectionStatus) {\n\t\t\t\t\tthis._selectionStatus = update.selectionStatus;\n\t\t\t\t\tchange.selectionStatus = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'indentation':\n\t\t\t\tif (this._indentation !== update.indentation) {\n\t\t\t\t\tthis._indentation = update.indentation;\n\t\t\t\t\tchange.indentation = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'languageId':\n\t\t\t\tif (this._languageId !== update.languageId) {\n\t\t\t\t\tthis._languageId = update.languageId;\n\t\t\t\t\tchange.languageId = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'encoding':\n\t\t\t\tif (this._encoding !== update.encoding) {\n\t\t\t\t\tthis._encoding = update.encoding;\n\t\t\t\t\tchange.encoding = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'EOL':\n\t\t\t\tif (this._EOL !== update.EOL) {\n\t\t\t\t\tthis._EOL = update.EOL;\n\t\t\t\t\tchange.EOL = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'tabFocusMode':\n\t\t\t\tif (this._tabFocusMode !== update.tabFocusMode) {\n\t\t\t\t\tthis._tabFocusMode = update.tabFocusMode;\n\t\t\t\t\tchange.tabFocusMode = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'columnSelectionMode':\n\t\t\t\tif (this._columnSelectionMode !== update.columnSelectionMode) {\n\t\t\t\t\tthis._columnSelectionMode = update.columnSelectionMode;\n\t\t\t\t\tchange.columnSelectionMode = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'metadata':\n\t\t\t\tif (this._metadata !== update.metadata) {\n\t\t\t\t\tthis._metadata = update.metadata;\n\t\t\t\t\tchange.metadata = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn change;\n\t}\n}\n\nclass TabFocusMode extends Disposable {\n\n\tprivate readonly _onDidChange = this._register(new Emitter<boolean>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tconstructor(@IConfigurationService private readonly configurationService: IConfigurationService) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\n\t\tconst tabFocusModeConfig = configurationService.getValue<boolean>('editor.tabFocusMode') === true ? true : false;\n\t\tTabFocus.setTabFocusMode(tabFocusModeConfig);\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(TabFocus.onDidChangeTabFocus(tabFocusMode => this._onDidChange.fire(tabFocusMode)));\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('editor.tabFocusMode')) {\n\t\t\t\tconst tabFocusModeConfig = this.configurationService.getValue<boolean>('editor.tabFocusMode') === true ? true : false;\n\t\t\t\tTabFocus.setTabFocusMode(tabFocusModeConfig);\n\n\t\t\t\tthis._onDidChange.fire(tabFocusModeConfig);\n\t\t\t}\n\t\t}));\n\t}\n}\n\nconst nlsSingleSelectionRange = localize('singleSelectionRange', \"Ln {0}, Col {1} ({2} selected)\");\nconst nlsSingleSelection = localize('singleSelection', \"Ln {0}, Col {1}\");\nconst nlsMultiSelectionRange = localize('multiSelectionRange', \"{0} selections ({1} characters selected)\");\nconst nlsMultiSelection = localize('multiSelection', \"{0} selections\");\nconst nlsEOLLF = localize('endOfLineLineFeed', \"LF\");\nconst nlsEOLCRLF = localize('endOfLineCarriageReturnLineFeed', \"CRLF\");\n\nclass EditorStatus extends Disposable {\n\n\tprivate readonly tabFocusModeElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\tprivate readonly columnSelectionModeElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\tprivate readonly indentationElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\tprivate readonly selectionElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\tprivate readonly encodingElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\tprivate readonly eolElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\tprivate readonly languageElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\tprivate readonly metadataElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\tprivate readonly currentMarkerStatus = this._register(this.instantiationService.createInstance(ShowCurrentMarkerInStatusbarContribution));\n\tprivate readonly tabFocusMode = this._register(this.instantiationService.createInstance(TabFocusMode));\n\n\tprivate readonly state = new State();\n\tprivate toRender: StateChange | undefined = undefined;\n\n\tprivate readonly activeEditorListeners = this._register(new DisposableStore());\n\tprivate readonly delayedRender = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate readonly targetWindowId: number,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerCommands();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.updateStatusBar()));\n\t\tthis._register(this.textFileService.untitled.onDidChangeEncoding(model => this.onResourceEncodingChange(model.resource)));\n\t\tthis._register(this.textFileService.files.onDidChangeEncoding(model => this.onResourceEncodingChange((model.resource))));\n\t\tthis._register(Event.runAndSubscribe(this.tabFocusMode.onDidChange, (tabFocusMode) => {\n\t\t\tif (tabFocusMode !== undefined) {\n\t\t\t\tthis.onTabFocusModeChange(tabFocusMode);\n\t\t\t} else {\n\t\t\t\tthis.onTabFocusModeChange(this.configurationService.getValue('editor.tabFocusMode'));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate registerCommands(): void {\n\t\tthis._register(CommandsRegistry.registerCommand({ id: `changeEditorIndentation${this.targetWindowId}`, handler: () => this.showIndentationPicker() }));\n\t}\n\n\tprivate async showIndentationPicker(): Promise<unknown> {\n\t\tconst activeTextEditorControl = getCodeEditor(this.editorService.activeTextEditorControl);\n\t\tif (!activeTextEditorControl) {\n\t\t\treturn this.quickInputService.pick([{ label: localize('noEditor', \"No text editor active at this time\") }]);\n\t\t}\n\n\t\tif (this.editorService.activeEditor?.isReadonly()) {\n\t\t\treturn this.quickInputService.pick([{ label: localize('noWritableCodeEditor', \"The active code editor is read-only.\") }]);\n\t\t}\n\n\t\tconst picks: QuickPickInput<IQuickPickItem & { run(): void }>[] = [\n\t\t\tassertIsDefined(activeTextEditorControl.getAction(IndentUsingSpaces.ID)),\n\t\t\tassertIsDefined(activeTextEditorControl.getAction(IndentUsingTabs.ID)),\n\t\t\tassertIsDefined(activeTextEditorControl.getAction(ChangeTabDisplaySize.ID)),\n\t\t\tassertIsDefined(activeTextEditorControl.getAction(DetectIndentation.ID)),\n\t\t\tassertIsDefined(activeTextEditorControl.getAction(IndentationToSpacesAction.ID)),\n\t\t\tassertIsDefined(activeTextEditorControl.getAction(IndentationToTabsAction.ID)),\n\t\t\tassertIsDefined(activeTextEditorControl.getAction(TrimTrailingWhitespaceAction.ID))\n\t\t].map((a: IEditorAction) => {\n\t\t\treturn {\n\t\t\t\tid: a.id,\n\t\t\t\tlabel: a.label,\n\t\t\t\tdetail: (Language.isDefaultVariant() || a.label === a.alias) ? undefined : a.alias,\n\t\t\t\trun: () => {\n\t\t\t\t\tactiveTextEditorControl.focus();\n\t\t\t\t\ta.run();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t\tpicks.splice(3, 0, { type: 'separator', label: localize('indentConvert', \"convert file\") });\n\t\tpicks.unshift({ type: 'separator', label: localize('indentView', \"change view\") });\n\n\t\tconst action = await this.quickInputService.pick(picks, { placeHolder: localize('pickAction', \"Select Action\"), matchOnDetail: true });\n\t\treturn action?.run();\n\t}\n\n\tprivate updateTabFocusModeElement(visible: boolean): void {\n\t\tif (visible) {\n\t\t\tif (!this.tabFocusModeElement.value) {\n\t\t\t\tconst text = localize('tabFocusModeEnabled', \"Tab Moves Focus\");\n\t\t\t\tthis.tabFocusModeElement.value = this.statusbarService.addEntry({\n\t\t\t\t\tname: localize('status.editor.tabFocusMode', \"Accessibility Mode\"),\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\ttooltip: localize('disableTabMode', \"Disable Accessibility Mode\"),\n\t\t\t\t\tcommand: 'editor.action.toggleTabFocusMode',\n\t\t\t\t\tkind: 'prominent'\n\t\t\t\t}, 'status.editor.tabFocusMode', StatusbarAlignment.RIGHT, 100.7);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.tabFocusModeElement.clear();\n\t\t}\n\t}\n\n\tprivate updateColumnSelectionModeElement(visible: boolean): void {\n\t\tif (visible) {\n\t\t\tif (!this.columnSelectionModeElement.value) {\n\t\t\t\tconst text = localize('columnSelectionModeEnabled', \"Column Selection\");\n\t\t\t\tthis.columnSelectionModeElement.value = this.statusbarService.addEntry({\n\t\t\t\t\tname: localize('status.editor.columnSelectionMode', \"Column Selection Mode\"),\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\ttooltip: localize('disableColumnSelectionMode', \"Disable Column Selection Mode\"),\n\t\t\t\t\tcommand: 'editor.action.toggleColumnSelection',\n\t\t\t\t\tkind: 'prominent'\n\t\t\t\t}, 'status.editor.columnSelectionMode', StatusbarAlignment.RIGHT, 100.8);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.columnSelectionModeElement.clear();\n\t\t}\n\t}\n\n\tprivate updateSelectionElement(text: string | undefined): void {\n\t\tif (!text) {\n\t\t\tthis.selectionElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorURI = getCodeEditor(this.editorService.activeTextEditorControl)?.getModel()?.uri;\n\t\tif (editorURI?.scheme === Schemas.vscodeNotebookCell) {\n\t\t\tthis.selectionElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst props: IStatusbarEntry = {\n\t\t\tname: localize('status.editor.selection', \"Editor Selection\"),\n\t\t\ttext,\n\t\t\tariaLabel: text,\n\t\t\ttooltip: localize('gotoLine', \"Go to Line/Column\"),\n\t\t\tcommand: 'workbench.action.gotoLine'\n\t\t};\n\n\t\tthis.updateElement(this.selectionElement, props, 'status.editor.selection', StatusbarAlignment.RIGHT, 100.5);\n\t}\n\n\tprivate updateIndentationElement(text: string | undefined): void {\n\t\tif (!text) {\n\t\t\tthis.indentationElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorURI = getCodeEditor(this.editorService.activeTextEditorControl)?.getModel()?.uri;\n\t\tif (editorURI?.scheme === Schemas.vscodeNotebookCell) {\n\t\t\tthis.indentationElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst props: IStatusbarEntry = {\n\t\t\tname: localize('status.editor.indentation', \"Editor Indentation\"),\n\t\t\ttext,\n\t\t\tariaLabel: text,\n\t\t\ttooltip: localize('selectIndentation', \"Select Indentation\"),\n\t\t\tcommand: `changeEditorIndentation${this.targetWindowId}`\n\t\t};\n\n\t\tthis.updateElement(this.indentationElement, props, 'status.editor.indentation', StatusbarAlignment.RIGHT, 100.4);\n\t}\n\n\tprivate updateEncodingElement(text: string | undefined): void {\n\t\tif (!text) {\n\t\t\tthis.encodingElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst props: IStatusbarEntry = {\n\t\t\tname: localize('status.editor.encoding', \"Editor Encoding\"),\n\t\t\ttext,\n\t\t\tariaLabel: text,\n\t\t\ttooltip: localize('selectEncoding', \"Select Encoding\"),\n\t\t\tcommand: 'workbench.action.editor.changeEncoding'\n\t\t};\n\n\t\tthis.updateElement(this.encodingElement, props, 'status.editor.encoding', StatusbarAlignment.RIGHT, 100.3);\n\t}\n\n\tprivate updateEOLElement(text: string | undefined): void {\n\t\tif (!text) {\n\t\t\tthis.eolElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst props: IStatusbarEntry = {\n\t\t\tname: localize('status.editor.eol', \"Editor End of Line\"),\n\t\t\ttext,\n\t\t\tariaLabel: text,\n\t\t\ttooltip: localize('selectEOL', \"Select End of Line Sequence\"),\n\t\t\tcommand: 'workbench.action.editor.changeEOL'\n\t\t};\n\n\t\tthis.updateElement(this.eolElement, props, 'status.editor.eol', StatusbarAlignment.RIGHT, 100.2);\n\t}\n\n\tprivate updateLanguageIdElement(text: string | undefined): void {\n\t\tif (!text) {\n\t\t\tthis.languageElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst props: IStatusbarEntry = {\n\t\t\tname: localize('status.editor.mode', \"Editor Language\"),\n\t\t\ttext,\n\t\t\tariaLabel: text,\n\t\t\ttooltip: localize('selectLanguageMode', \"Select Language Mode\"),\n\t\t\tcommand: 'workbench.action.editor.changeLanguageMode'\n\t\t};\n\n\t\tthis.updateElement(this.languageElement, props, 'status.editor.mode', StatusbarAlignment.RIGHT, 100.1);\n\t}\n\n\tprivate updateMetadataElement(text: string | undefined): void {\n\t\tif (!text) {\n\t\t\tthis.metadataElement.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst props: IStatusbarEntry = {\n\t\t\tname: localize('status.editor.info', \"File Information\"),\n\t\t\ttext,\n\t\t\tariaLabel: text,\n\t\t\ttooltip: localize('fileInfo', \"File Information\")\n\t\t};\n\n\t\tthis.updateElement(this.metadataElement, props, 'status.editor.info', StatusbarAlignment.RIGHT, 100);\n\t}\n\n\tprivate updateElement(element: MutableDisposable<IStatusbarEntryAccessor>, props: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority: number) {\n\t\tif (!element.value) {\n\t\t\telement.value = this.statusbarService.addEntry(props, id, alignment, priority);\n\t\t} else {\n\t\t\telement.value.update(props);\n\t\t}\n\t}\n\n\tprivate updateState(update: StateDelta): void {\n\t\tconst changed = this.state.update(update);\n\t\tif (!changed.hasChanges()) {\n\t\t\treturn; // Nothing really changed\n\t\t}\n\n\t\tif (!this.toRender) {\n\t\t\tthis.toRender = changed;\n\n\t\t\tthis.delayedRender.value = runAtThisOrScheduleAtNextAnimationFrame(getWindowById(this.targetWindowId, true).window, () => {\n\t\t\t\tthis.delayedRender.clear();\n\n\t\t\t\tconst toRender = this.toRender;\n\t\t\t\tthis.toRender = undefined;\n\t\t\t\tif (toRender) {\n\t\t\t\t\tthis.doRenderNow();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis.toRender.combine(changed);\n\t\t}\n\t}\n\n\tprivate doRenderNow(): void {\n\t\tthis.updateTabFocusModeElement(!!this.state.tabFocusMode);\n\t\tthis.updateColumnSelectionModeElement(!!this.state.columnSelectionMode);\n\t\tthis.updateIndentationElement(this.state.indentation);\n\t\tthis.updateSelectionElement(this.state.selectionStatus);\n\t\tthis.updateEncodingElement(this.state.encoding);\n\t\tthis.updateEOLElement(this.state.EOL ? this.state.EOL === '\\r\\n' ? nlsEOLCRLF : nlsEOLLF : undefined);\n\t\tthis.updateLanguageIdElement(this.state.languageId);\n\t\tthis.updateMetadataElement(this.state.metadata);\n\t}\n\n\tprivate getSelectionLabel(info: IEditorSelectionStatus): string | undefined {\n\t\tif (!info || !info.selections) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (info.selections.length === 1) {\n\t\t\tif (info.charactersSelected) {\n\t\t\t\treturn format(nlsSingleSelectionRange, info.selections[0].positionLineNumber, info.selections[0].positionColumn, info.charactersSelected);\n\t\t\t}\n\n\t\t\treturn format(nlsSingleSelection, info.selections[0].positionLineNumber, info.selections[0].positionColumn);\n\t\t}\n\n\t\tif (info.charactersSelected) {\n\t\t\treturn format(nlsMultiSelectionRange, info.selections.length, info.charactersSelected);\n\t\t}\n\n\t\tif (info.selections.length > 0) {\n\t\t\treturn format(nlsMultiSelection, info.selections.length);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate updateStatusBar(): void {\n\t\tconst activeInput = this.editorService.activeEditor;\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tconst activeCodeEditor = activeEditorPane ? getCodeEditor(activeEditorPane.getControl()) ?? undefined : undefined;\n\n\t\t// Update all states\n\t\tthis.onColumnSelectionModeChange(activeCodeEditor);\n\t\tthis.onSelectionChange(activeCodeEditor);\n\t\tthis.onLanguageChange(activeCodeEditor, activeInput);\n\t\tthis.onEOLChange(activeCodeEditor);\n\t\tthis.onEncodingChange(activeEditorPane, activeCodeEditor);\n\t\tthis.onIndentationChange(activeCodeEditor);\n\t\tthis.onMetadataChange(activeEditorPane);\n\t\tthis.currentMarkerStatus.update(activeCodeEditor);\n\n\t\t// Dispose old active editor listeners\n\t\tthis.activeEditorListeners.clear();\n\n\t\t// Attach new listeners to active editor\n\t\tif (activeEditorPane) {\n\t\t\tthis.activeEditorListeners.add(activeEditorPane.onDidChangeControl(() => {\n\t\t\t\t// Since our editor status is mainly observing the\n\t\t\t\t// active editor control, do a full update whenever\n\t\t\t\t// the control changes.\n\t\t\t\tthis.updateStatusBar();\n\t\t\t}));\n\t\t}\n\n\t\t// Attach new listeners to active code editor\n\t\tif (activeCodeEditor) {\n\n\t\t\t// Hook Listener for Configuration changes\n\t\t\tthis.activeEditorListeners.add(activeCodeEditor.onDidChangeConfiguration((event: ConfigurationChangedEvent) => {\n\t\t\t\tif (event.hasChanged(EditorOption.columnSelection)) {\n\t\t\t\t\tthis.onColumnSelectionModeChange(activeCodeEditor);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Hook Listener for Selection changes\n\t\t\tthis.activeEditorListeners.add(Event.defer(activeCodeEditor.onDidChangeCursorPosition)(() => {\n\t\t\t\tthis.onSelectionChange(activeCodeEditor);\n\t\t\t\tthis.currentMarkerStatus.update(activeCodeEditor);\n\t\t\t}));\n\n\t\t\t// Hook Listener for language changes\n\t\t\tthis.activeEditorListeners.add(activeCodeEditor.onDidChangeModelLanguage(() => {\n\t\t\t\tthis.onLanguageChange(activeCodeEditor, activeInput);\n\t\t\t}));\n\n\t\t\t// Hook Listener for content changes\n\t\t\tthis.activeEditorListeners.add(Event.accumulate(activeCodeEditor.onDidChangeModelContent)(e => {\n\t\t\t\tthis.onEOLChange(activeCodeEditor);\n\t\t\t\tthis.currentMarkerStatus.update(activeCodeEditor);\n\n\t\t\t\tconst selections = activeCodeEditor.getSelections();\n\t\t\t\tif (selections) {\n\t\t\t\t\tfor (const inner of e) {\n\t\t\t\t\t\tfor (const change of inner.changes) {\n\t\t\t\t\t\t\tif (selections.some(selection => Range.areIntersecting(selection, change.range))) {\n\t\t\t\t\t\t\t\tthis.onSelectionChange(activeCodeEditor);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Hook Listener for content options changes\n\t\t\tthis.activeEditorListeners.add(activeCodeEditor.onDidChangeModelOptions(() => {\n\t\t\t\tthis.onIndentationChange(activeCodeEditor);\n\t\t\t}));\n\t\t}\n\n\t\t// Handle binary editors\n\t\telse if (activeEditorPane instanceof BaseBinaryResourceEditor || activeEditorPane instanceof BinaryResourceDiffEditor) {\n\t\t\tconst binaryEditors: BaseBinaryResourceEditor[] = [];\n\t\t\tif (activeEditorPane instanceof BinaryResourceDiffEditor) {\n\t\t\t\tconst primary = activeEditorPane.getPrimaryEditorPane();\n\t\t\t\tif (primary instanceof BaseBinaryResourceEditor) {\n\t\t\t\t\tbinaryEditors.push(primary);\n\t\t\t\t}\n\n\t\t\t\tconst secondary = activeEditorPane.getSecondaryEditorPane();\n\t\t\t\tif (secondary instanceof BaseBinaryResourceEditor) {\n\t\t\t\t\tbinaryEditors.push(secondary);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbinaryEditors.push(activeEditorPane);\n\t\t\t}\n\n\t\t\tfor (const editor of binaryEditors) {\n\t\t\t\tthis.activeEditorListeners.add(editor.onDidChangeMetadata(() => {\n\t\t\t\t\tthis.onMetadataChange(activeEditorPane);\n\t\t\t\t}));\n\n\t\t\t\tthis.activeEditorListeners.add(editor.onDidOpenInPlace(() => {\n\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onLanguageChange(editorWidget: ICodeEditor | undefined, editorInput: EditorInput | undefined): void {\n\t\tconst info: StateDelta = { type: 'languageId', languageId: undefined };\n\n\t\t// We only support text based editors\n\t\tif (editorWidget && editorInput && toEditorWithLanguageSupport(editorInput)) {\n\t\t\tconst textModel = editorWidget.getModel();\n\t\t\tif (textModel) {\n\t\t\t\tconst languageId = textModel.getLanguageId();\n\t\t\t\tinfo.languageId = this.languageService.getLanguageName(languageId) ?? undefined;\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState(info);\n\t}\n\n\tprivate onIndentationChange(editorWidget: ICodeEditor | undefined): void {\n\t\tconst update: StateDelta = { type: 'indentation', indentation: undefined };\n\n\t\tif (editorWidget) {\n\t\t\tconst model = editorWidget.getModel();\n\t\t\tif (model) {\n\t\t\t\tconst modelOpts = model.getOptions();\n\t\t\t\tupdate.indentation = (\n\t\t\t\t\tmodelOpts.insertSpaces\n\t\t\t\t\t\t? modelOpts.tabSize === modelOpts.indentSize\n\t\t\t\t\t\t\t? localize('spacesSize', \"Spaces: {0}\", modelOpts.indentSize)\n\t\t\t\t\t\t\t: localize('spacesAndTabsSize', \"Spaces: {0} (Tab Size: {1})\", modelOpts.indentSize, modelOpts.tabSize)\n\t\t\t\t\t\t: localize({ key: 'tabSize', comment: ['Tab corresponds to the tab key'] }, \"Tab Size: {0}\", modelOpts.tabSize)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState(update);\n\t}\n\n\tprivate onMetadataChange(editor: IEditorPane | undefined): void {\n\t\tconst update: StateDelta = { type: 'metadata', metadata: undefined };\n\n\t\tif (editor instanceof BaseBinaryResourceEditor || editor instanceof BinaryResourceDiffEditor) {\n\t\t\tupdate.metadata = editor.getMetadata();\n\t\t}\n\n\t\tthis.updateState(update);\n\t}\n\n\tprivate onColumnSelectionModeChange(editorWidget: ICodeEditor | undefined): void {\n\t\tconst info: StateDelta = { type: 'columnSelectionMode', columnSelectionMode: false };\n\n\t\tif (editorWidget?.getOption(EditorOption.columnSelection)) {\n\t\t\tinfo.columnSelectionMode = true;\n\t\t}\n\n\t\tthis.updateState(info);\n\t}\n\n\tprivate onSelectionChange(editorWidget: ICodeEditor | undefined): void {\n\t\tconst info: IEditorSelectionStatus = Object.create(null);\n\n\t\t// We only support text based editors\n\t\tif (editorWidget) {\n\n\t\t\t// Compute selection(s)\n\t\t\tinfo.selections = editorWidget.getSelections() || [];\n\n\t\t\t// Compute selection length\n\t\t\tinfo.charactersSelected = 0;\n\t\t\tconst textModel = editorWidget.getModel();\n\t\t\tif (textModel) {\n\t\t\t\tfor (const selection of info.selections) {\n\t\t\t\t\tif (typeof info.charactersSelected !== 'number') {\n\t\t\t\t\t\tinfo.charactersSelected = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tinfo.charactersSelected += textModel.getCharacterCountInRange(selection);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compute the visible column for one selection. This will properly handle tabs and their configured widths\n\t\t\tif (info.selections.length === 1) {\n\t\t\t\tconst editorPosition = editorWidget.getPosition();\n\n\t\t\t\tconst selectionClone = new Selection(\n\t\t\t\t\tinfo.selections[0].selectionStartLineNumber,\n\t\t\t\t\tinfo.selections[0].selectionStartColumn,\n\t\t\t\t\tinfo.selections[0].positionLineNumber,\n\t\t\t\t\teditorPosition ? editorWidget.getStatusbarColumn(editorPosition) : info.selections[0].positionColumn\n\t\t\t\t);\n\n\t\t\t\tinfo.selections[0] = selectionClone;\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState({ type: 'selectionStatus', selectionStatus: this.getSelectionLabel(info) });\n\t}\n\n\tprivate onEOLChange(editorWidget: ICodeEditor | undefined): void {\n\t\tconst info: StateDelta = { type: 'EOL', EOL: undefined };\n\n\t\tif (editorWidget && !editorWidget.getOption(EditorOption.readOnly)) {\n\t\t\tconst codeEditorModel = editorWidget.getModel();\n\t\t\tif (codeEditorModel) {\n\t\t\t\tinfo.EOL = codeEditorModel.getEOL();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState(info);\n\t}\n\n\tprivate onEncodingChange(editor: IEditorPane | undefined, editorWidget: ICodeEditor | undefined): void {\n\t\tif (editor && !this.isActiveEditor(editor)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst info: StateDelta = { type: 'encoding', encoding: undefined };\n\n\t\t// We only support text based editors that have a model associated\n\t\t// This ensures we do not show the encoding picker while an editor\n\t\t// is still loading.\n\t\tif (editor && editorWidget?.hasModel()) {\n\t\t\tconst encodingSupport: IEncodingSupport | null = editor.input ? toEditorWithEncodingSupport(editor.input) : null;\n\t\t\tif (encodingSupport) {\n\t\t\t\tconst rawEncoding = encodingSupport.getEncoding();\n\t\t\t\tconst encodingInfo = typeof rawEncoding === 'string' ? SUPPORTED_ENCODINGS[rawEncoding] : undefined;\n\t\t\t\tif (encodingInfo) {\n\t\t\t\t\tinfo.encoding = encodingInfo.labelShort; // if we have a label, take it from there\n\t\t\t\t} else {\n\t\t\t\t\tinfo.encoding = rawEncoding; // otherwise use it raw\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState(info);\n\t}\n\n\tprivate onResourceEncodingChange(resource: URI): void {\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tif (activeEditorPane) {\n\t\t\tconst activeResource = EditorResourceAccessor.getCanonicalUri(activeEditorPane.input, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\t\tif (activeResource && isEqual(activeResource, resource)) {\n\t\t\t\tconst activeCodeEditor = getCodeEditor(activeEditorPane.getControl()) ?? undefined;\n\n\t\t\t\treturn this.onEncodingChange(activeEditorPane, activeCodeEditor); // only update if the encoding changed for the active resource\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTabFocusModeChange(tabFocusMode: boolean): void {\n\t\tconst info: StateDelta = { type: 'tabFocusMode', tabFocusMode };\n\t\tthis.updateState(info);\n\t}\n\n\tprivate isActiveEditor(control: IEditorPane): boolean {\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\n\t\treturn !!activeEditorPane && activeEditorPane === control;\n\t}\n}\n\nexport class EditorStatusContribution extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.editorStatus';\n\n\tconstructor(\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t) {\n\t\tsuper();\n\n\t\tfor (const part of editorGroupService.parts) {\n\t\t\tthis.createEditorStatus(part);\n\t\t}\n\n\t\tthis._register(editorGroupService.onDidCreateAuxiliaryEditorPart(part => this.createEditorStatus(part)));\n\t}\n\n\tprivate createEditorStatus(part: IEditorPart): void {\n\t\tconst disposables = new DisposableStore();\n\t\tEvent.once(part.onWillDispose)(() => disposables.dispose());\n\n\t\tconst scopedInstantiationService = this.editorGroupService.getScopedInstantiationService(part);\n\t\tdisposables.add(scopedInstantiationService.createInstance(EditorStatus, part.windowId));\n\t}\n}\n\nclass ShowCurrentMarkerInStatusbarContribution extends Disposable {\n\n\tprivate readonly statusBarEntryAccessor: MutableDisposable<IStatusbarEntryAccessor>;\n\tprivate editor: ICodeEditor | undefined = undefined;\n\tprivate markers: IMarker[] = [];\n\tprivate currentMarker: IMarker | null = null;\n\n\tconstructor(\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.statusBarEntryAccessor = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\t\tthis._register(markerService.onMarkerChanged(changedResources => this.onMarkerChanged(changedResources)));\n\t\tthis._register(Event.filter(configurationService.onDidChangeConfiguration, e => e.affectsConfiguration('problems.showCurrentInStatus'))(() => this.updateStatus()));\n\t}\n\n\tupdate(editor: ICodeEditor | undefined): void {\n\t\tthis.editor = editor;\n\n\t\tthis.updateMarkers();\n\t\tthis.updateStatus();\n\t}\n\n\tprivate updateStatus(): void {\n\t\tconst previousMarker = this.currentMarker;\n\t\tthis.currentMarker = this.getMarker();\n\t\tif (this.hasToUpdateStatus(previousMarker, this.currentMarker)) {\n\t\t\tif (this.currentMarker) {\n\t\t\t\tconst line = splitLines(this.currentMarker.message)[0];\n\t\t\t\tconst text = `${this.getType(this.currentMarker)} ${line}`;\n\t\t\t\tif (!this.statusBarEntryAccessor.value) {\n\t\t\t\t\tthis.statusBarEntryAccessor.value = this.statusbarService.addEntry({ name: localize('currentProblem', \"Current Problem\"), text: '', ariaLabel: '' }, 'statusbar.currentProblem', StatusbarAlignment.LEFT);\n\t\t\t\t}\n\t\t\t\tthis.statusBarEntryAccessor.value.update({ name: localize('currentProblem', \"Current Problem\"), text, ariaLabel: text });\n\t\t\t} else {\n\t\t\t\tthis.statusBarEntryAccessor.clear();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate hasToUpdateStatus(previousMarker: IMarker | null, currentMarker: IMarker | null): boolean {\n\t\tif (!currentMarker) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!previousMarker) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn IMarkerData.makeKey(previousMarker) !== IMarkerData.makeKey(currentMarker);\n\t}\n\n\tprivate getType(marker: IMarker): string {\n\t\tswitch (marker.severity) {\n\t\t\tcase MarkerSeverity.Error: return '$(error)';\n\t\t\tcase MarkerSeverity.Warning: return '$(warning)';\n\t\t\tcase MarkerSeverity.Info: return '$(info)';\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tprivate getMarker(): IMarker | null {\n\t\tif (!this.configurationService.getValue<boolean>('problems.showCurrentInStatus')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.editor) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst position = this.editor.getPosition();\n\t\tif (!position) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.markers.find(marker => Range.containsPosition(marker, position)) || null;\n\t}\n\n\tprivate onMarkerChanged(changedResources: readonly URI[]): void {\n\t\tif (!this.editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (model && !changedResources.some(r => isEqual(model.uri, r))) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updateMarkers();\n\t}\n\n\tprivate updateMarkers(): void {\n\t\tif (!this.editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (model) {\n\t\t\tthis.markers = this.markerService.read({\n\t\t\t\tresource: model.uri,\n\t\t\t\tseverities: MarkerSeverity.Error | MarkerSeverity.Warning | MarkerSeverity.Info\n\t\t\t});\n\t\t\tthis.markers.sort(this.compareMarker);\n\t\t} else {\n\t\t\tthis.markers = [];\n\t\t}\n\n\t\tthis.updateStatus();\n\t}\n\n\tprivate compareMarker(a: IMarker, b: IMarker): number {\n\t\tlet res = compare(a.resource.toString(), b.resource.toString());\n\t\tif (res === 0) {\n\t\t\tres = MarkerSeverity.compare(a.severity, b.severity);\n\t\t}\n\n\t\tif (res === 0) {\n\t\t\tres = Range.compareRangesUsingStarts(a, b);\n\t\t}\n\n\t\treturn res;\n\t}\n}\n\nexport class ShowLanguageExtensionsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.showLanguageExtensions';\n\n\tconstructor(\n\t\tprivate fileExtension: string,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IExtensionGalleryService galleryService: IExtensionGalleryService\n\t) {\n\t\tsuper(ShowLanguageExtensionsAction.ID, localize('showLanguageExtensions', \"Search Marketplace Extensions for '{0}'...\", fileExtension));\n\n\t\tthis.enabled = galleryService.isEnabled();\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tawait this.commandService.executeCommand('workbench.extensions.action.showExtensionsForLanguage', this.fileExtension);\n\t}\n}\n\nexport class ChangeLanguageAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.editor.changeLanguageMode';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ChangeLanguageAction.ID,\n\t\t\ttitle: localize2('changeMode', 'Change Language Mode'),\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyCode.KeyM)\n\t\t\t},\n\t\t\tprecondition: ContextKeyExpr.not('notebookEditorFocused'),\n\t\t\tmetadata: {\n\t\t\t\tdescription: localize('changeLanguageMode.description', \"Change the language mode of the active text editor.\"),\n\t\t\t\targs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: localize('changeLanguageMode.arg.name', \"The name of the language mode to change to.\"),\n\t\t\t\t\t\tconstraint: (value: any) => typeof value === 'string',\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor, languageMode?: string): Promise<void> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst languageDetectionService = accessor.get(ILanguageDetectionService);\n\t\tconst textFileService = accessor.get(ITextFileService);\n\t\tconst preferencesService = accessor.get(IPreferencesService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\tconst activeTextEditorControl = getCodeEditor(editorService.activeTextEditorControl);\n\t\tif (!activeTextEditorControl) {\n\t\t\tawait quickInputService.pick([{ label: localize('noEditor', \"No text editor active at this time\") }]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst textModel = activeTextEditorControl.getModel();\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(editorService.activeEditor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\n\t\t// Compute language\n\t\tlet currentLanguageName: string | undefined;\n\t\tlet currentLanguageId: string | undefined;\n\t\tif (textModel) {\n\t\t\tcurrentLanguageId = textModel.getLanguageId();\n\t\t\tcurrentLanguageName = languageService.getLanguageName(currentLanguageId) ?? undefined;\n\t\t}\n\n\t\tlet hasLanguageSupport = !!resource;\n\t\tif (resource?.scheme === Schemas.untitled && !textFileService.untitled.get(resource)?.hasAssociatedFilePath) {\n\t\t\thasLanguageSupport = false; // no configuration for untitled resources (e.g. \"Untitled-1\")\n\t\t}\n\n\t\t// All languages are valid picks\n\t\tconst languages = languageService.getSortedRegisteredLanguageNames();\n\t\tconst picks: QuickPickInput[] = languages\n\t\t\t.map(({ languageName, languageId }) => {\n\t\t\t\tconst extensions = languageService.getExtensions(languageId).join(' ');\n\t\t\t\tlet description: string;\n\t\t\t\tif (currentLanguageName === languageName) {\n\t\t\t\t\tdescription = localize('languageDescription', \"({0}) - Configured Language\", languageId);\n\t\t\t\t} else {\n\t\t\t\t\tdescription = localize('languageDescriptionConfigured', \"({0})\", languageId);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tlabel: languageName,\n\t\t\t\t\tmeta: extensions,\n\t\t\t\t\ticonClasses: getIconClassesForLanguageId(languageId),\n\t\t\t\t\tdescription\n\t\t\t\t};\n\t\t\t});\n\n\t\tpicks.unshift({ type: 'separator', label: localize('languagesPicks', \"languages (identifier)\") });\n\n\t\t// Offer action to configure via settings\n\t\tlet configureLanguageAssociations: IQuickPickItem | undefined;\n\t\tlet configureLanguageSettings: IQuickPickItem | undefined;\n\t\tlet galleryAction: Action | undefined;\n\t\tif (hasLanguageSupport && resource) {\n\t\t\tconst ext = extname(resource) || basename(resource);\n\n\t\t\tgalleryAction = instantiationService.createInstance(ShowLanguageExtensionsAction, ext);\n\t\t\tif (galleryAction.enabled) {\n\t\t\t\tpicks.unshift(galleryAction);\n\t\t\t}\n\n\t\t\tconfigureLanguageSettings = { label: localize('configureModeSettings', \"Configure '{0}' language based settings...\", currentLanguageName) };\n\t\t\tpicks.unshift(configureLanguageSettings);\n\t\t\tconfigureLanguageAssociations = { label: localize('configureAssociationsExt', \"Configure File Association for '{0}'...\", ext) };\n\t\t\tpicks.unshift(configureLanguageAssociations);\n\t\t}\n\n\t\t// Offer to \"Auto Detect\"\n\t\tconst autoDetectLanguage: IQuickPickItem = {\n\t\t\tlabel: localize('autoDetect', \"Auto Detect\")\n\t\t};\n\t\tpicks.unshift(autoDetectLanguage);\n\n\t\tconst pick = typeof languageMode === 'string' ? { label: languageMode } : await quickInputService.pick(picks, { placeHolder: localize('pickLanguage', \"Select Language Mode\"), matchOnDescription: true });\n\t\tif (!pick) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (pick === galleryAction) {\n\t\t\tgalleryAction.run();\n\t\t\treturn;\n\t\t}\n\n\t\t// User decided to permanently configure associations, return right after\n\t\tif (pick === configureLanguageAssociations) {\n\t\t\tif (resource) {\n\t\t\t\tthis.configureFileAssociation(resource, languageService, quickInputService, configurationService);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// User decided to configure settings for current language\n\t\tif (pick === configureLanguageSettings) {\n\t\t\tpreferencesService.openUserSettings({ jsonEditor: true, revealSetting: { key: `[${currentLanguageId ?? null}]`, edit: true } });\n\t\t\treturn;\n\t\t}\n\n\t\t// Change language for active editor\n\t\tconst activeEditor = editorService.activeEditor;\n\t\tif (activeEditor) {\n\t\t\tconst languageSupport = toEditorWithLanguageSupport(activeEditor);\n\t\t\tif (languageSupport) {\n\n\t\t\t\t// Find language\n\t\t\t\tlet languageSelection: ILanguageSelection | undefined;\n\t\t\t\tlet detectedLanguage: string | undefined;\n\t\t\t\tif (pick === autoDetectLanguage) {\n\t\t\t\t\tif (textModel) {\n\t\t\t\t\t\tconst resource = EditorResourceAccessor.getOriginalUri(activeEditor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\t\t\t\t\tif (resource) {\n\t\t\t\t\t\t\t// Detect languages since we are in an untitled file\n\t\t\t\t\t\t\tlet languageId: string | undefined = languageService.guessLanguageIdByFilepathOrFirstLine(resource, textModel.getLineContent(1)) ?? undefined;\n\t\t\t\t\t\t\tif (!languageId || languageId === 'unknown') {\n\t\t\t\t\t\t\t\tdetectedLanguage = await languageDetectionService.detectLanguage(resource);\n\t\t\t\t\t\t\t\tlanguageId = detectedLanguage;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (languageId) {\n\t\t\t\t\t\t\t\tlanguageSelection = languageService.createById(languageId);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst languageId = languageService.getLanguageIdByLanguageName(pick.label);\n\t\t\t\t\tlanguageSelection = languageService.createById(languageId);\n\n\t\t\t\t\tif (resource) {\n\t\t\t\t\t\t// fire and forget to not slow things down\n\t\t\t\t\t\tlanguageDetectionService.detectLanguage(resource).then(detectedLanguageId => {\n\t\t\t\t\t\t\tconst chosenLanguageId = languageService.getLanguageIdByLanguageName(pick.label) || 'unknown';\n\t\t\t\t\t\t\tif (detectedLanguageId === currentLanguageId && currentLanguageId !== chosenLanguageId) {\n\t\t\t\t\t\t\t\t// If they didn't choose the detected language (which should also be the active language if automatic detection is enabled)\n\t\t\t\t\t\t\t\t// then the automatic language detection was likely wrong and the user is correcting it. In this case, we want telemetry.\n\t\t\t\t\t\t\t\t// Keep track of what model was preferred and length of input to help track down potential differences between the result quality across models and content size.\n\t\t\t\t\t\t\t\tconst modelPreference = configurationService.getValue<boolean>('workbench.editor.preferHistoryBasedLanguageDetection') ? 'history' : 'classic';\n\t\t\t\t\t\t\t\ttelemetryService.publicLog2<IAutomaticLanguageDetectionLikelyWrongData, AutomaticLanguageDetectionLikelyWrongClassification>(AutomaticLanguageDetectionLikelyWrongId, {\n\t\t\t\t\t\t\t\t\tcurrentLanguageId: currentLanguageName ?? 'unknown',\n\t\t\t\t\t\t\t\t\tnextLanguageId: pick.label,\n\t\t\t\t\t\t\t\t\tlineCount: textModel?.getLineCount() ?? -1,\n\t\t\t\t\t\t\t\t\tmodelPreference,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Change language\n\t\t\t\tif (typeof languageSelection !== 'undefined') {\n\t\t\t\t\tlanguageSupport.setLanguageId(languageSelection.languageId, ChangeLanguageAction.ID);\n\n\t\t\t\t\tif (resource?.scheme === Schemas.untitled) {\n\t\t\t\t\t\ttype SetUntitledDocumentLanguageEvent = { to: string; from: string; modelPreference: string };\n\t\t\t\t\t\ttype SetUntitledDocumentLanguageClassification = {\n\t\t\t\t\t\t\towner: 'TylerLeonhardt';\n\t\t\t\t\t\t\tcomment: 'Helps understand what the automatic language detection does for untitled files';\n\t\t\t\t\t\t\tto: {\n\t\t\t\t\t\t\t\tclassification: 'SystemMetaData';\n\t\t\t\t\t\t\t\tpurpose: 'FeatureInsight';\n\t\t\t\t\t\t\t\towner: 'TylerLeonhardt';\n\t\t\t\t\t\t\t\tcomment: 'Help understand effectiveness of automatic language detection';\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfrom: {\n\t\t\t\t\t\t\t\tclassification: 'SystemMetaData';\n\t\t\t\t\t\t\t\tpurpose: 'FeatureInsight';\n\t\t\t\t\t\t\t\towner: 'TylerLeonhardt';\n\t\t\t\t\t\t\t\tcomment: 'Help understand effectiveness of automatic language detection';\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tmodelPreference: {\n\t\t\t\t\t\t\t\tclassification: 'SystemMetaData';\n\t\t\t\t\t\t\t\tpurpose: 'FeatureInsight';\n\t\t\t\t\t\t\t\towner: 'TylerLeonhardt';\n\t\t\t\t\t\t\t\tcomment: 'Help understand effectiveness of automatic language detection';\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst modelPreference = configurationService.getValue<boolean>('workbench.editor.preferHistoryBasedLanguageDetection') ? 'history' : 'classic';\n\t\t\t\t\t\ttelemetryService.publicLog2<SetUntitledDocumentLanguageEvent, SetUntitledDocumentLanguageClassification>('setUntitledDocumentLanguage', {\n\t\t\t\t\t\t\tto: languageSelection.languageId,\n\t\t\t\t\t\t\tfrom: currentLanguageId ?? 'none',\n\t\t\t\t\t\t\tmodelPreference,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tactiveTextEditorControl.focus();\n\t\t}\n\t}\n\n\tprivate configureFileAssociation(resource: URI, languageService: ILanguageService, quickInputService: IQuickInputService, configurationService: IConfigurationService): void {\n\t\tconst extension = extname(resource);\n\t\tconst base = basename(resource);\n\t\tconst currentAssociation = languageService.guessLanguageIdByFilepathOrFirstLine(URI.file(base));\n\n\t\tconst languages = languageService.getSortedRegisteredLanguageNames();\n\t\tconst picks: IQuickPickItem[] = languages.map(({ languageName, languageId }) => {\n\t\t\treturn {\n\t\t\t\tid: languageId,\n\t\t\t\tlabel: languageName,\n\t\t\t\ticonClasses: getIconClassesForLanguageId(languageId),\n\t\t\t\tdescription: (languageId === currentAssociation) ? localize('currentAssociation', \"Current Association\") : undefined\n\t\t\t};\n\t\t});\n\n\t\tsetTimeout(async () => {\n\t\t\tconst language = await quickInputService.pick(picks, { placeHolder: localize('pickLanguageToConfigure', \"Select Language Mode to Associate with '{0}'\", extension || base) });\n\t\t\tif (language) {\n\t\t\t\tconst fileAssociationsConfig = configurationService.inspect<{}>(FILES_ASSOCIATIONS_CONFIG);\n\n\t\t\t\tlet associationKey: string;\n\t\t\t\tif (extension && base[0] !== '.') {\n\t\t\t\t\tassociationKey = `*${extension}`; // only use \"*.ext\" if the file path is in the form of <name>.<ext>\n\t\t\t\t} else {\n\t\t\t\t\tassociationKey = base; // otherwise use the basename (e.g. .gitignore, Dockerfile)\n\t\t\t\t}\n\n\t\t\t\t// If the association is already being made in the workspace, make sure to target workspace settings\n\t\t\t\tlet target = ConfigurationTarget.USER;\n\t\t\t\tif (fileAssociationsConfig.workspaceValue && !!(fileAssociationsConfig.workspaceValue as any)[associationKey]) {\n\t\t\t\t\ttarget = ConfigurationTarget.WORKSPACE;\n\t\t\t\t}\n\n\t\t\t\t// Make sure to write into the value of the target and not the merged value from USER and WORKSPACE config\n\t\t\t\tconst currentAssociations = deepClone((target === ConfigurationTarget.WORKSPACE) ? fileAssociationsConfig.workspaceValue : fileAssociationsConfig.userValue) || Object.create(null);\n\t\t\t\tcurrentAssociations[associationKey] = language.id;\n\n\t\t\t\tconfigurationService.updateValue(FILES_ASSOCIATIONS_CONFIG, currentAssociations, target);\n\t\t\t}\n\t\t}, 50 /* quick input is sensitive to being opened so soon after another */);\n\t}\n}\n\ninterface IChangeEOLEntry extends IQuickPickItem {\n\teol: EndOfLineSequence;\n}\n\nexport class ChangeEOLAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.editor.changeEOL',\n\t\t\ttitle: localize2('changeEndOfLine', 'Change End of Line Sequence'),\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst activeTextEditorControl = getCodeEditor(editorService.activeTextEditorControl);\n\t\tif (!activeTextEditorControl) {\n\t\t\tawait quickInputService.pick([{ label: localize('noEditor', \"No text editor active at this time\") }]);\n\t\t\treturn;\n\t\t}\n\n\t\tif (editorService.activeEditor?.isReadonly()) {\n\t\t\tawait quickInputService.pick([{ label: localize('noWritableCodeEditor', \"The active code editor is read-only.\") }]);\n\t\t\treturn;\n\t\t}\n\n\t\tlet textModel = activeTextEditorControl.getModel();\n\n\t\tconst EOLOptions: IChangeEOLEntry[] = [\n\t\t\t{ label: nlsEOLLF, eol: EndOfLineSequence.LF },\n\t\t\t{ label: nlsEOLCRLF, eol: EndOfLineSequence.CRLF },\n\t\t];\n\n\t\tconst selectedIndex = (textModel?.getEOL() === '\\n') ? 0 : 1;\n\n\t\tconst eol = await quickInputService.pick(EOLOptions, { placeHolder: localize('pickEndOfLine', \"Select End of Line Sequence\"), activeItem: EOLOptions[selectedIndex] });\n\t\tif (eol) {\n\t\t\tconst activeCodeEditor = getCodeEditor(editorService.activeTextEditorControl);\n\t\t\tif (activeCodeEditor?.hasModel() && !editorService.activeEditor?.isReadonly()) {\n\t\t\t\ttextModel = activeCodeEditor.getModel();\n\t\t\t\ttextModel.pushStackElement();\n\t\t\t\ttextModel.pushEOL(eol.eol);\n\t\t\t\ttextModel.pushStackElement();\n\t\t\t}\n\t\t}\n\n\t\tactiveTextEditorControl.focus();\n\t}\n}\n\nexport class ChangeEncodingAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.editor.changeEncoding',\n\t\t\ttitle: localize2('changeEncoding', 'Change File Encoding'),\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst textFileService = accessor.get(ITextFileService);\n\t\tconst textResourceConfigurationService = accessor.get(ITextResourceConfigurationService);\n\n\t\tconst activeTextEditorControl = getCodeEditor(editorService.activeTextEditorControl);\n\t\tif (!activeTextEditorControl) {\n\t\t\tawait quickInputService.pick([{ label: localize('noEditor', \"No text editor active at this time\") }]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeEditorPane = editorService.activeEditorPane;\n\t\tif (!activeEditorPane) {\n\t\t\tawait quickInputService.pick([{ label: localize('noEditor', \"No text editor active at this time\") }]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst encodingSupport: IEncodingSupport | null = toEditorWithEncodingSupport(activeEditorPane.input);\n\t\tif (!encodingSupport) {\n\t\t\tawait quickInputService.pick([{ label: localize('noFileEditor', \"No file active at this time\") }]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst saveWithEncodingPick: IQuickPickItem = { label: localize('saveWithEncoding', \"Save with Encoding\") };\n\t\tconst reopenWithEncodingPick: IQuickPickItem = { label: localize('reopenWithEncoding', \"Reopen with Encoding\") };\n\n\t\tif (!Language.isDefaultVariant()) {\n\t\t\tconst saveWithEncodingAlias = 'Save with Encoding';\n\t\t\tif (saveWithEncodingAlias !== saveWithEncodingPick.label) {\n\t\t\t\tsaveWithEncodingPick.detail = saveWithEncodingAlias;\n\t\t\t}\n\n\t\t\tconst reopenWithEncodingAlias = 'Reopen with Encoding';\n\t\t\tif (reopenWithEncodingAlias !== reopenWithEncodingPick.label) {\n\t\t\t\treopenWithEncodingPick.detail = reopenWithEncodingAlias;\n\t\t\t}\n\t\t}\n\n\t\tlet action: IQuickPickItem | undefined;\n\t\tif (encodingSupport instanceof UntitledTextEditorInput) {\n\t\t\taction = saveWithEncodingPick;\n\t\t} else if (activeEditorPane.input.isReadonly()) {\n\t\t\taction = reopenWithEncodingPick;\n\t\t} else {\n\t\t\taction = await quickInputService.pick([reopenWithEncodingPick, saveWithEncodingPick], { placeHolder: localize('pickAction', \"Select Action\"), matchOnDetail: true });\n\t\t}\n\n\t\tif (!action) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait timeout(50); // quick input is sensitive to being opened so soon after another\n\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(activeEditorPane.input, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\tif (!resource || (!fileService.hasProvider(resource) && resource.scheme !== Schemas.untitled)) {\n\t\t\treturn; // encoding detection only possible for resources the file service can handle or that are untitled\n\t\t}\n\n\t\tlet guessedEncoding: string | undefined = undefined;\n\t\tif (fileService.hasProvider(resource)) {\n\t\t\tconst content = await textFileService.readStream(resource, {\n\t\t\t\tautoGuessEncoding: true,\n\t\t\t\tcandidateGuessEncodings: textResourceConfigurationService.getValue(resource, 'files.candidateGuessEncodings')\n\t\t\t});\n\t\t\tguessedEncoding = content.encoding;\n\t\t}\n\n\t\tconst isReopenWithEncoding = (action === reopenWithEncodingPick);\n\n\t\tconst configuredEncoding = textResourceConfigurationService.getValue(resource, 'files.encoding');\n\n\t\tlet directMatchIndex: number | undefined;\n\t\tlet aliasMatchIndex: number | undefined;\n\n\t\t// All encodings are valid picks\n\t\tconst picks: QuickPickInput[] = Object.keys(SUPPORTED_ENCODINGS)\n\t\t\t.sort((k1, k2) => {\n\t\t\t\tif (k1 === configuredEncoding) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else if (k2 === configuredEncoding) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\n\t\t\t\treturn SUPPORTED_ENCODINGS[k1].order - SUPPORTED_ENCODINGS[k2].order;\n\t\t\t})\n\t\t\t.filter(k => {\n\t\t\t\tif (k === guessedEncoding && guessedEncoding !== configuredEncoding) {\n\t\t\t\t\treturn false; // do not show encoding if it is the guessed encoding that does not match the configured\n\t\t\t\t}\n\n\t\t\t\treturn !isReopenWithEncoding || !SUPPORTED_ENCODINGS[k].encodeOnly; // hide those that can only be used for encoding if we are about to decode\n\t\t\t})\n\t\t\t.map((key, index) => {\n\t\t\t\tif (key === encodingSupport.getEncoding()) {\n\t\t\t\t\tdirectMatchIndex = index;\n\t\t\t\t} else if (SUPPORTED_ENCODINGS[key].alias === encodingSupport.getEncoding()) {\n\t\t\t\t\taliasMatchIndex = index;\n\t\t\t\t}\n\n\t\t\t\treturn { id: key, label: SUPPORTED_ENCODINGS[key].labelLong, description: key };\n\t\t\t});\n\n\t\tconst items = picks.slice() as IQuickPickItem[];\n\n\t\t// If we have a guessed encoding, show it first unless it matches the configured encoding\n\t\tif (guessedEncoding && configuredEncoding !== guessedEncoding && SUPPORTED_ENCODINGS[guessedEncoding]) {\n\t\t\tpicks.unshift({ type: 'separator' });\n\t\t\tpicks.unshift({ id: guessedEncoding, label: SUPPORTED_ENCODINGS[guessedEncoding].labelLong, description: localize('guessedEncoding', \"Guessed from content\") });\n\t\t}\n\n\t\tconst encoding = await quickInputService.pick(picks, {\n\t\t\tplaceHolder: isReopenWithEncoding ? localize('pickEncodingForReopen', \"Select File Encoding to Reopen File\") : localize('pickEncodingForSave', \"Select File Encoding to Save with\"),\n\t\t\tactiveItem: items[typeof directMatchIndex === 'number' ? directMatchIndex : typeof aliasMatchIndex === 'number' ? aliasMatchIndex : -1]\n\t\t});\n\n\t\tif (!encoding) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!editorService.activeEditorPane) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeEncodingSupport = toEditorWithEncodingSupport(editorService.activeEditorPane.input);\n\t\tif (typeof encoding.id !== 'undefined' && activeEncodingSupport) {\n\t\t\tawait activeEncodingSupport.setEncoding(encoding.id, isReopenWithEncoding ? EncodingMode.Decode : EncodingMode.Encode); // Set new encoding\n\t\t}\n\n\t\tactiveTextEditorControl.focus();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["resource"]
}
