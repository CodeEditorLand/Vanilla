{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/panel/panelActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/panelpart.css\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { KeyCode, KeyMod } from \"../../../../base/common/keyCodes.js\";\nimport type { ServicesAccessor } from \"../../../../editor/browser/editorExtensions.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport type { ICommandActionTitle } from \"../../../../platform/action/common/action.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\ttype IAction2Options,\n\tMenuId,\n\tMenuRegistry,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tContextKeyExpr,\n\ttype ContextKeyExpression,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { KeybindingWeight } from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { registerIcon } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport {\n\tAuxiliaryBarVisibleContext,\n\tPanelAlignmentContext,\n\tPanelMaximizedContext,\n\tPanelPositionContext,\n\tPanelVisibleContext,\n} from \"../../../common/contextkeys.js\";\nimport {\n\tIViewDescriptorService,\n\tViewContainerLocation,\n\tViewContainerLocationToString,\n} from \"../../../common/views.js\";\nimport {\n\tActivityBarPosition,\n\tIWorkbenchLayoutService,\n\tLayoutSettings,\n\ttype PanelAlignment,\n\tParts,\n\tPosition,\n\tisHorizontal,\n\tpositionToString,\n} from \"../../../services/layout/browser/layoutService.js\";\nimport { IPaneCompositePartService } from \"../../../services/panecomposite/browser/panecomposite.js\";\nimport { IViewsService } from \"../../../services/views/common/viewsService.js\";\n\nconst maximizeIcon = registerIcon(\n\t\"panel-maximize\",\n\tCodicon.chevronUp,\n\tlocalize(\"maximizeIcon\", \"Icon to maximize a panel.\"),\n);\nconst restoreIcon = registerIcon(\n\t\"panel-restore\",\n\tCodicon.chevronDown,\n\tlocalize(\"restoreIcon\", \"Icon to restore a panel.\"),\n);\nconst closeIcon = registerIcon(\n\t\"panel-close\",\n\tCodicon.close,\n\tlocalize(\"closeIcon\", \"Icon to close a panel.\"),\n);\nconst panelIcon = registerIcon(\n\t\"panel-layout-icon\",\n\tCodicon.layoutPanel,\n\tlocalize(\n\t\t\"togglePanelOffIcon\",\n\t\t\"Icon to toggle the panel off when it is on.\",\n\t),\n);\nconst panelOffIcon = registerIcon(\n\t\"panel-layout-icon-off\",\n\tCodicon.layoutPanelOff,\n\tlocalize(\n\t\t\"togglePanelOnIcon\",\n\t\t\"Icon to toggle the panel on when it is off.\",\n\t),\n);\n\nexport class TogglePanelAction extends Action2 {\n\tstatic readonly ID = \"workbench.action.togglePanel\";\n\tstatic readonly LABEL = localize2(\n\t\t\"togglePanelVisibility\",\n\t\t\"Toggle Panel Visibility\",\n\t);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TogglePanelAction.ID,\n\t\t\ttitle: TogglePanelAction.LABEL,\n\t\t\ttoggled: {\n\t\t\t\tcondition: PanelVisibleContext,\n\t\t\t\ttitle: localize(\"toggle panel\", \"Panel\"),\n\t\t\t\tmnemonicTitle: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"toggle panel mnemonic\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Panel\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tcategory: Categories.View,\n\t\t\tkeybinding: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyJ,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t},\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.MenubarAppearanceMenu,\n\t\t\t\t\tgroup: \"2_workbench_layout\",\n\t\t\t\t\torder: 5,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.LayoutControlMenuSubmenu,\n\t\t\t\t\tgroup: \"0_workbench_layout\",\n\t\t\t\t\torder: 4,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tlayoutService.setPartHidden(\n\t\t\tlayoutService.isVisible(Parts.PANEL_PART),\n\t\t\tParts.PANEL_PART,\n\t\t);\n\t}\n}\n\nregisterAction2(TogglePanelAction);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tstatic readonly ID = \"workbench.action.focusPanel\";\n\t\tstatic readonly LABEL = localize(\"focusPanel\", \"Focus into Panel\");\n\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"workbench.action.focusPanel\",\n\t\t\t\ttitle: localize2(\"focusPanel\", \"Focus into Panel\"),\n\t\t\t\tcategory: Categories.View,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\t\tconst paneCompositeService = accessor.get(\n\t\t\t\tIPaneCompositePartService,\n\t\t\t);\n\n\t\t\t// Show panel\n\t\t\tif (!layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\t\tlayoutService.setPartHidden(false, Parts.PANEL_PART);\n\t\t\t}\n\n\t\t\t// Focus into active panel\n\t\t\tconst panel = paneCompositeService.getActivePaneComposite(\n\t\t\t\tViewContainerLocation.Panel,\n\t\t\t);\n\t\t\tpanel?.focus();\n\t\t}\n\t},\n);\n\nconst PositionPanelActionId = {\n\tLEFT: \"workbench.action.positionPanelLeft\",\n\tRIGHT: \"workbench.action.positionPanelRight\",\n\tBOTTOM: \"workbench.action.positionPanelBottom\",\n\tTOP: \"workbench.action.positionPanelTop\",\n};\n\nconst AlignPanelActionId = {\n\tLEFT: \"workbench.action.alignPanelLeft\",\n\tRIGHT: \"workbench.action.alignPanelRight\",\n\tCENTER: \"workbench.action.alignPanelCenter\",\n\tJUSTIFY: \"workbench.action.alignPanelJustify\",\n};\n\ninterface PanelActionConfig<T> {\n\tid: string;\n\twhen: ContextKeyExpression;\n\ttitle: ICommandActionTitle;\n\tshortLabel: string;\n\tvalue: T;\n}\n\nfunction createPanelActionConfig<T>(\n\tid: string,\n\ttitle: ICommandActionTitle,\n\tshortLabel: string,\n\tvalue: T,\n\twhen: ContextKeyExpression,\n): PanelActionConfig<T> {\n\treturn {\n\t\tid,\n\t\ttitle,\n\t\tshortLabel,\n\t\tvalue,\n\t\twhen,\n\t};\n}\n\nfunction createPositionPanelActionConfig(\n\tid: string,\n\ttitle: ICommandActionTitle,\n\tshortLabel: string,\n\tposition: Position,\n): PanelActionConfig<Position> {\n\treturn createPanelActionConfig<Position>(\n\t\tid,\n\t\ttitle,\n\t\tshortLabel,\n\t\tposition,\n\t\tPanelPositionContext.notEqualsTo(positionToString(position)),\n\t);\n}\n\nfunction createAlignmentPanelActionConfig(\n\tid: string,\n\ttitle: ICommandActionTitle,\n\tshortLabel: string,\n\talignment: PanelAlignment,\n): PanelActionConfig<PanelAlignment> {\n\treturn createPanelActionConfig<PanelAlignment>(\n\t\tid,\n\t\ttitle,\n\t\tshortLabel,\n\t\talignment,\n\t\tPanelAlignmentContext.notEqualsTo(alignment),\n\t);\n}\n\nconst PositionPanelActionConfigs: PanelActionConfig<Position>[] = [\n\tcreatePositionPanelActionConfig(\n\t\tPositionPanelActionId.TOP,\n\t\tlocalize2(\"positionPanelTop\", \"Move Panel To Top\"),\n\t\tlocalize(\"positionPanelTopShort\", \"Top\"),\n\t\tPosition.TOP,\n\t),\n\tcreatePositionPanelActionConfig(\n\t\tPositionPanelActionId.LEFT,\n\t\tlocalize2(\"positionPanelLeft\", \"Move Panel Left\"),\n\t\tlocalize(\"positionPanelLeftShort\", \"Left\"),\n\t\tPosition.LEFT,\n\t),\n\tcreatePositionPanelActionConfig(\n\t\tPositionPanelActionId.RIGHT,\n\t\tlocalize2(\"positionPanelRight\", \"Move Panel Right\"),\n\t\tlocalize(\"positionPanelRightShort\", \"Right\"),\n\t\tPosition.RIGHT,\n\t),\n\tcreatePositionPanelActionConfig(\n\t\tPositionPanelActionId.BOTTOM,\n\t\tlocalize2(\"positionPanelBottom\", \"Move Panel To Bottom\"),\n\t\tlocalize(\"positionPanelBottomShort\", \"Bottom\"),\n\t\tPosition.BOTTOM,\n\t),\n];\n\nconst AlignPanelActionConfigs: PanelActionConfig<PanelAlignment>[] = [\n\tcreateAlignmentPanelActionConfig(\n\t\tAlignPanelActionId.LEFT,\n\t\tlocalize2(\"alignPanelLeft\", \"Set Panel Alignment to Left\"),\n\t\tlocalize(\"alignPanelLeftShort\", \"Left\"),\n\t\t\"left\",\n\t),\n\tcreateAlignmentPanelActionConfig(\n\t\tAlignPanelActionId.RIGHT,\n\t\tlocalize2(\"alignPanelRight\", \"Set Panel Alignment to Right\"),\n\t\tlocalize(\"alignPanelRightShort\", \"Right\"),\n\t\t\"right\",\n\t),\n\tcreateAlignmentPanelActionConfig(\n\t\tAlignPanelActionId.CENTER,\n\t\tlocalize2(\"alignPanelCenter\", \"Set Panel Alignment to Center\"),\n\t\tlocalize(\"alignPanelCenterShort\", \"Center\"),\n\t\t\"center\",\n\t),\n\tcreateAlignmentPanelActionConfig(\n\t\tAlignPanelActionId.JUSTIFY,\n\t\tlocalize2(\"alignPanelJustify\", \"Set Panel Alignment to Justify\"),\n\t\tlocalize(\"alignPanelJustifyShort\", \"Justify\"),\n\t\t\"justify\",\n\t),\n];\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tsubmenu: MenuId.PanelPositionMenu,\n\ttitle: localize(\"positionPanel\", \"Panel Position\"),\n\tgroup: \"3_workbench_layout_move\",\n\torder: 4,\n});\n\nPositionPanelActionConfigs.forEach((positionPanelAction, index) => {\n\tconst { id, title, shortLabel, value, when } = positionPanelAction;\n\n\tregisterAction2(\n\t\tclass extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid,\n\t\t\t\t\ttitle,\n\t\t\t\t\tcategory: Categories.View,\n\t\t\t\t\tf1: true,\n\t\t\t\t});\n\t\t\t}\n\t\t\trun(accessor: ServicesAccessor): void {\n\t\t\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\t\t\tlayoutService.setPanelPosition(\n\t\t\t\t\tvalue === undefined ? Position.BOTTOM : value,\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t);\n\n\tMenuRegistry.appendMenuItem(MenuId.PanelPositionMenu, {\n\t\tcommand: {\n\t\t\tid,\n\t\t\ttitle: shortLabel,\n\t\t\ttoggled: when.negate(),\n\t\t},\n\t\torder: 5 + index,\n\t});\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tsubmenu: MenuId.PanelAlignmentMenu,\n\ttitle: localize(\"alignPanel\", \"Align Panel\"),\n\tgroup: \"3_workbench_layout_move\",\n\torder: 5,\n});\n\nAlignPanelActionConfigs.forEach((alignPanelAction) => {\n\tconst { id, title, shortLabel, value, when } = alignPanelAction;\n\tregisterAction2(\n\t\tclass extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid,\n\t\t\t\t\ttitle,\n\t\t\t\t\tcategory: Categories.View,\n\t\t\t\t\ttoggled: when.negate(),\n\t\t\t\t\tf1: true,\n\t\t\t\t});\n\t\t\t}\n\t\t\trun(accessor: ServicesAccessor): void {\n\t\t\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\t\t\tlayoutService.setPanelAlignment(\n\t\t\t\t\tvalue === undefined ? \"center\" : value,\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t);\n\n\tMenuRegistry.appendMenuItem(MenuId.PanelAlignmentMenu, {\n\t\tcommand: {\n\t\t\tid,\n\t\t\ttitle: shortLabel,\n\t\t\ttoggled: when.negate(),\n\t\t},\n\t\torder: 5,\n\t});\n});\n\nclass SwitchPanelViewAction extends Action2 {\n\tconstructor(id: string, title: ICommandActionTitle) {\n\t\tsuper({\n\t\t\tid,\n\t\t\ttitle,\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async run(\n\t\taccessor: ServicesAccessor,\n\t\toffset: number,\n\t): Promise<void> {\n\t\tconst paneCompositeService = accessor.get(IPaneCompositePartService);\n\t\tconst pinnedPanels = paneCompositeService.getVisiblePaneCompositeIds(\n\t\t\tViewContainerLocation.Panel,\n\t\t);\n\t\tconst activePanel = paneCompositeService.getActivePaneComposite(\n\t\t\tViewContainerLocation.Panel,\n\t\t);\n\t\tif (!activePanel) {\n\t\t\treturn;\n\t\t}\n\t\tlet targetPanelId: string | undefined;\n\t\tfor (let i = 0; i < pinnedPanels.length; i++) {\n\t\t\tif (pinnedPanels[i] === activePanel.getId()) {\n\t\t\t\ttargetPanelId =\n\t\t\t\t\tpinnedPanels[\n\t\t\t\t\t\t(i + pinnedPanels.length + offset) % pinnedPanels.length\n\t\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (typeof targetPanelId === \"string\") {\n\t\t\tawait paneCompositeService.openPaneComposite(\n\t\t\t\ttargetPanelId,\n\t\t\t\tViewContainerLocation.Panel,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\t}\n}\n\nregisterAction2(\n\tclass extends SwitchPanelViewAction {\n\t\tconstructor() {\n\t\t\tsuper(\n\t\t\t\t\"workbench.action.previousPanelView\",\n\t\t\t\tlocalize2(\"previousPanelView\", \"Previous Panel View\"),\n\t\t\t);\n\t\t}\n\n\t\toverride run(accessor: ServicesAccessor): Promise<void> {\n\t\t\treturn super.run(accessor, -1);\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass extends SwitchPanelViewAction {\n\t\tconstructor() {\n\t\t\tsuper(\n\t\t\t\t\"workbench.action.nextPanelView\",\n\t\t\t\tlocalize2(\"nextPanelView\", \"Next Panel View\"),\n\t\t\t);\n\t\t}\n\n\t\toverride run(accessor: ServicesAccessor): Promise<void> {\n\t\t\treturn super.run(accessor, 1);\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"workbench.action.toggleMaximizedPanel\",\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"toggleMaximizedPanel\",\n\t\t\t\t\t\"Toggle Maximized Panel\",\n\t\t\t\t),\n\t\t\t\ttooltip: localize(\"maximizePanel\", \"Maximize Panel Size\"),\n\t\t\t\tcategory: Categories.View,\n\t\t\t\tf1: true,\n\t\t\t\ticon: maximizeIcon, // This is being rotated in CSS depending on the panel position\n\t\t\t\t// the workbench grid currently prevents us from supporting panel maximization with non-center panel alignment\n\t\t\t\tprecondition: ContextKeyExpr.or(\n\t\t\t\t\tPanelAlignmentContext.isEqualTo(\"center\"),\n\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\tPanelPositionContext.notEqualsTo(\"bottom\"),\n\t\t\t\t\t\tPanelPositionContext.notEqualsTo(\"top\"),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttoggled: {\n\t\t\t\t\tcondition: PanelMaximizedContext,\n\t\t\t\t\ticon: restoreIcon,\n\t\t\t\t\ttooltip: localize(\"minimizePanel\", \"Restore Panel Size\"),\n\t\t\t\t},\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.PanelTitle,\n\t\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\t\torder: 1,\n\t\t\t\t\t\t// the workbench grid currently prevents us from supporting panel maximization with non-center panel alignment\n\t\t\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\t\t\tPanelAlignmentContext.isEqualTo(\"center\"),\n\t\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\t\tPanelPositionContext.notEqualsTo(\"bottom\"),\n\t\t\t\t\t\t\t\tPanelPositionContext.notEqualsTo(\"top\"),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t\trun(accessor: ServicesAccessor) {\n\t\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tif (\n\t\t\t\tlayoutService.getPanelAlignment() !== \"center\" &&\n\t\t\t\tisHorizontal(layoutService.getPanelPosition())\n\t\t\t) {\n\t\t\t\tnotificationService.warn(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"panelMaxNotSupported\",\n\t\t\t\t\t\t\"Maximizing the panel is only supported when it is center aligned.\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\t\tlayoutService.toggleMaximizedPanel();\n\t\t\t} else {\n\t\t\t\tlayoutService.setPartHidden(false, Parts.PANEL_PART);\n\t\t\t\t// If the panel is not already maximized, maximize it\n\t\t\t\tif (!layoutService.isPanelMaximized()) {\n\t\t\t\t\tlayoutService.toggleMaximizedPanel();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"workbench.action.closePanel\",\n\t\t\t\ttitle: localize2(\"closePanel\", \"Hide Panel\"),\n\t\t\t\tcategory: Categories.View,\n\t\t\t\ticon: closeIcon,\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: PanelVisibleContext,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.PanelTitle,\n\t\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\t\torder: 2,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t\trun(accessor: ServicesAccessor) {\n\t\t\taccessor\n\t\t\t\t.get(IWorkbenchLayoutService)\n\t\t\t\t.setPartHidden(true, Parts.PANEL_PART);\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"workbench.action.closeAuxiliaryBar\",\n\t\t\t\ttitle: localize2(\n\t\t\t\t\t\"closeSecondarySideBar\",\n\t\t\t\t\t\"Hide Secondary Side Bar\",\n\t\t\t\t),\n\t\t\t\tcategory: Categories.View,\n\t\t\t\ticon: closeIcon,\n\t\t\t\tmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: AuxiliaryBarVisibleContext,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.AuxiliaryBarTitle,\n\t\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\t\torder: 2,\n\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(\n\t\t\t\t\t\t\t`config.${LayoutSettings.ACTIVITY_BAR_LOCATION}`,\n\t\t\t\t\t\t\tActivityBarPosition.TOP,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t\trun(accessor: ServicesAccessor) {\n\t\t\taccessor\n\t\t\t\t.get(IWorkbenchLayoutService)\n\t\t\t\t.setPartHidden(true, Parts.AUXILIARYBAR_PART);\n\t\t}\n\t},\n);\n\nMenuRegistry.appendMenuItems([\n\t{\n\t\tid: MenuId.LayoutControlMenu,\n\t\titem: {\n\t\t\tgroup: \"0_workbench_toggles\",\n\t\t\tcommand: {\n\t\t\t\tid: TogglePanelAction.ID,\n\t\t\t\ttitle: localize(\"togglePanel\", \"Toggle Panel\"),\n\t\t\t\ticon: panelOffIcon,\n\t\t\t\ttoggled: { condition: PanelVisibleContext, icon: panelIcon },\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\"config.workbench.layoutControl.type\",\n\t\t\t\t\t\"toggles\",\n\t\t\t\t),\n\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\"config.workbench.layoutControl.type\",\n\t\t\t\t\t\"both\",\n\t\t\t\t),\n\t\t\t),\n\t\t\torder: 1,\n\t\t},\n\t},\n\t{\n\t\tid: MenuId.ViewTitleContext,\n\t\titem: {\n\t\t\tgroup: \"3_workbench_layout_move\",\n\t\t\tcommand: {\n\t\t\t\tid: TogglePanelAction.ID,\n\t\t\t\ttitle: localize2(\"hidePanel\", \"Hide Panel\"),\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\tPanelVisibleContext,\n\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\"viewLocation\",\n\t\t\t\t\tViewContainerLocationToString(ViewContainerLocation.Panel),\n\t\t\t\t),\n\t\t\t),\n\t\t\torder: 2,\n\t\t},\n\t},\n]);\n\nclass MoveViewsBetweenPanelsAction extends Action2 {\n\tconstructor(\n\t\tprivate readonly source: ViewContainerLocation,\n\t\tprivate readonly destination: ViewContainerLocation,\n\t\tdesc: Readonly<IAction2Options>,\n\t) {\n\t\tsuper(desc);\n\t}\n\n\trun(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tconst viewDescriptorService = accessor.get(IViewDescriptorService);\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\n\t\tconst srcContainers = viewDescriptorService.getViewContainersByLocation(\n\t\t\tthis.source,\n\t\t);\n\t\tconst destContainers =\n\t\t\tviewDescriptorService.getViewContainersByLocation(this.destination);\n\n\t\tif (srcContainers.length) {\n\t\t\tconst activeViewContainer = viewsService.getVisibleViewContainer(\n\t\t\t\tthis.source,\n\t\t\t);\n\n\t\t\tsrcContainers.forEach((viewContainer) =>\n\t\t\t\tviewDescriptorService.moveViewContainerToLocation(\n\t\t\t\t\tviewContainer,\n\t\t\t\t\tthis.destination,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.desc.id,\n\t\t\t\t),\n\t\t\t);\n\t\t\tlayoutService.setPartHidden(\n\t\t\t\tfalse,\n\t\t\t\tthis.destination === ViewContainerLocation.Panel\n\t\t\t\t\t? Parts.PANEL_PART\n\t\t\t\t\t: Parts.AUXILIARYBAR_PART,\n\t\t\t);\n\n\t\t\tif (activeViewContainer && destContainers.length === 0) {\n\t\t\t\tviewsService.openViewContainer(activeViewContainer.id, true);\n\t\t\t}\n\t\t}\n\t}\n}\n\n// --- Move Panel Views To Secondary Side Bar\n\nclass MovePanelToSidePanelAction extends MoveViewsBetweenPanelsAction {\n\tstatic readonly ID = \"workbench.action.movePanelToSidePanel\";\n\tconstructor() {\n\t\tsuper(ViewContainerLocation.Panel, ViewContainerLocation.AuxiliaryBar, {\n\t\t\tid: MovePanelToSidePanelAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"movePanelToSecondarySideBar\",\n\t\t\t\t\"Move Panel Views To Secondary Side Bar\",\n\t\t\t),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: false,\n\t\t});\n\t}\n}\n\nexport class MovePanelToSecondarySideBarAction extends MoveViewsBetweenPanelsAction {\n\tstatic readonly ID = \"workbench.action.movePanelToSecondarySideBar\";\n\tconstructor() {\n\t\tsuper(ViewContainerLocation.Panel, ViewContainerLocation.AuxiliaryBar, {\n\t\t\tid: MovePanelToSecondarySideBarAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"movePanelToSecondarySideBar\",\n\t\t\t\t\"Move Panel Views To Secondary Side Bar\",\n\t\t\t),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true,\n\t\t});\n\t}\n}\n\nregisterAction2(MovePanelToSidePanelAction);\nregisterAction2(MovePanelToSecondarySideBarAction);\n\n// --- Move Secondary Side Bar Views To Panel\n\nclass MoveSidePanelToPanelAction extends MoveViewsBetweenPanelsAction {\n\tstatic readonly ID = \"workbench.action.moveSidePanelToPanel\";\n\n\tconstructor() {\n\t\tsuper(ViewContainerLocation.AuxiliaryBar, ViewContainerLocation.Panel, {\n\t\t\tid: MoveSidePanelToPanelAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"moveSidePanelToPanel\",\n\t\t\t\t\"Move Secondary Side Bar Views To Panel\",\n\t\t\t),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: false,\n\t\t});\n\t}\n}\n\nexport class MoveSecondarySideBarToPanelAction extends MoveViewsBetweenPanelsAction {\n\tstatic readonly ID = \"workbench.action.moveSecondarySideBarToPanel\";\n\n\tconstructor() {\n\t\tsuper(ViewContainerLocation.AuxiliaryBar, ViewContainerLocation.Panel, {\n\t\t\tid: MoveSecondarySideBarToPanelAction.ID,\n\t\t\ttitle: localize2(\n\t\t\t\t\"moveSidePanelToPanel\",\n\t\t\t\t\"Move Secondary Side Bar Views To Panel\",\n\t\t\t),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true,\n\t\t});\n\t}\n}\nregisterAction2(MoveSidePanelToPanelAction);\nregisterAction2(MoveSecondarySideBarToPanelAction);\n"],
  "mappings": ";;AAKA,OAAO;AACP,SAAS,eAAe;AACxB,SAAS,SAAS,cAAc;AAEhC,SAAS,UAAU,iBAAiB;AAEpC,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,OAEM;AACP,SAAS,wBAAwB;AACjC,SAAS,4BAA4B;AACrC,SAAS,oBAAoB;AAC7B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,iCAAiC;AAC1C,SAAS,qBAAqB;AAE9B,MAAM,eAAe;AAAA,EACpB;AAAA,EACA,QAAQ;AAAA,EACR,SAAS,gBAAgB,2BAA2B;AACrD;AACA,MAAM,cAAc;AAAA,EACnB;AAAA,EACA,QAAQ;AAAA,EACR,SAAS,eAAe,0BAA0B;AACnD;AACA,MAAM,YAAY;AAAA,EACjB;AAAA,EACA,QAAQ;AAAA,EACR,SAAS,aAAa,wBAAwB;AAC/C;AACA,MAAM,YAAY;AAAA,EACjB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;AACA,MAAM,eAAe;AAAA,EACpB;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,0BAA0B,QAAQ;AAAA,EAnF/C,OAmF+C;AAAA;AAAA;AAAA,EAC9C,OAAgB,KAAK;AAAA,EACrB,OAAgB,QAAQ;AAAA,IACvB;AAAA,IACA;AAAA,EACD;AAAA,EAEA,cAAc;AACb,UAAM;AAAA,MACL,IAAI,kBAAkB;AAAA,MACtB,OAAO,kBAAkB;AAAA,MACzB,SAAS;AAAA,QACR,WAAW;AAAA,QACX,OAAO,SAAS,gBAAgB,OAAO;AAAA,QACvC,eAAe;AAAA,UACd;AAAA,YACC,KAAK;AAAA,YACL,SAAS,CAAC,uBAAuB;AAAA,UAClC;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,IAAI;AAAA,MACJ,UAAU,WAAW;AAAA,MACrB,YAAY;AAAA,QACX,SAAS,OAAO,UAAU,QAAQ;AAAA,QAClC,QAAQ,iBAAiB;AAAA,MAC1B;AAAA,MACA,MAAM;AAAA,QACL;AAAA,UACC,IAAI,OAAO;AAAA,UACX,OAAO;AAAA,UACP,OAAO;AAAA,QACR;AAAA,QACA;AAAA,UACC,IAAI,OAAO;AAAA,UACX,OAAO;AAAA,UACP,OAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAe,IAAI,UAA2C;AAC7D,UAAM,gBAAgB,SAAS,IAAI,uBAAuB;AAC1D,kBAAc;AAAA,MACb,cAAc,UAAU,MAAM,UAAU;AAAA,MACxC,MAAM;AAAA,IACP;AAAA,EACD;AACD;AAEA,gBAAgB,iBAAiB;AAEjC;AAAA,EACC,cAAc,QAAQ;AAAA,IACrB,OAAgB,KAAK;AAAA,IACrB,OAAgB,QAAQ,SAAS,cAAc,kBAAkB;AAAA,IAEjE,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO,UAAU,cAAc,kBAAkB;AAAA,QACjD,UAAU,WAAW;AAAA,QACrB,IAAI;AAAA,MACL,CAAC;AAAA,IACF;AAAA,IAEA,MAAe,IAAI,UAA2C;AAC7D,YAAM,gBAAgB,SAAS,IAAI,uBAAuB;AAC1D,YAAM,uBAAuB,SAAS;AAAA,QACrC;AAAA,MACD;AAGA,UAAI,CAAC,cAAc,UAAU,MAAM,UAAU,GAAG;AAC/C,sBAAc,cAAc,OAAO,MAAM,UAAU;AAAA,MACpD;AAGA,YAAM,QAAQ,qBAAqB;AAAA,QAClC,sBAAsB;AAAA,MACvB;AACA,aAAO,MAAM;AAAA,IACd;AAAA,EACD;AACD;AAEA,MAAM,wBAAwB;AAAA,EAC7B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,KAAK;AACN;AAEA,MAAM,qBAAqB;AAAA,EAC1B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACV;AAUA,SAAS,wBACR,IACA,OACA,YACA,OACA,MACuB;AACvB,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;AAdS;AAgBT,SAAS,gCACR,IACA,OACA,YACA,UAC8B;AAC9B,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,qBAAqB,YAAY,iBAAiB,QAAQ,CAAC;AAAA,EAC5D;AACD;AAbS;AAeT,SAAS,iCACR,IACA,OACA,YACA,WACoC;AACpC,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,sBAAsB,YAAY,SAAS;AAAA,EAC5C;AACD;AAbS;AAeT,MAAM,6BAA4D;AAAA,EACjE;AAAA,IACC,sBAAsB;AAAA,IACtB,UAAU,oBAAoB,mBAAmB;AAAA,IACjD,SAAS,yBAAyB,KAAK;AAAA,IACvC,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,sBAAsB;AAAA,IACtB,UAAU,qBAAqB,iBAAiB;AAAA,IAChD,SAAS,0BAA0B,MAAM;AAAA,IACzC,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,sBAAsB;AAAA,IACtB,UAAU,sBAAsB,kBAAkB;AAAA,IAClD,SAAS,2BAA2B,OAAO;AAAA,IAC3C,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,sBAAsB;AAAA,IACtB,UAAU,uBAAuB,sBAAsB;AAAA,IACvD,SAAS,4BAA4B,QAAQ;AAAA,IAC7C,SAAS;AAAA,EACV;AACD;AAEA,MAAM,0BAA+D;AAAA,EACpE;AAAA,IACC,mBAAmB;AAAA,IACnB,UAAU,kBAAkB,6BAA6B;AAAA,IACzD,SAAS,uBAAuB,MAAM;AAAA,IACtC;AAAA,EACD;AAAA,EACA;AAAA,IACC,mBAAmB;AAAA,IACnB,UAAU,mBAAmB,8BAA8B;AAAA,IAC3D,SAAS,wBAAwB,OAAO;AAAA,IACxC;AAAA,EACD;AAAA,EACA;AAAA,IACC,mBAAmB;AAAA,IACnB,UAAU,oBAAoB,+BAA+B;AAAA,IAC7D,SAAS,yBAAyB,QAAQ;AAAA,IAC1C;AAAA,EACD;AAAA,EACA;AAAA,IACC,mBAAmB;AAAA,IACnB,UAAU,qBAAqB,gCAAgC;AAAA,IAC/D,SAAS,0BAA0B,SAAS;AAAA,IAC5C;AAAA,EACD;AACD;AAEA,aAAa,eAAe,OAAO,uBAAuB;AAAA,EACzD,SAAS,OAAO;AAAA,EAChB,OAAO,SAAS,iBAAiB,gBAAgB;AAAA,EACjD,OAAO;AAAA,EACP,OAAO;AACR,CAAC;AAED,2BAA2B,QAAQ,CAAC,qBAAqB,UAAU;AAClE,QAAM,EAAE,IAAI,OAAO,YAAY,OAAO,KAAK,IAAI;AAE/C;AAAA,IACC,cAAc,QAAQ;AAAA,MACrB,cAAc;AACb,cAAM;AAAA,UACL;AAAA,UACA;AAAA,UACA,UAAU,WAAW;AAAA,UACrB,IAAI;AAAA,QACL,CAAC;AAAA,MACF;AAAA,MACA,IAAI,UAAkC;AACrC,cAAM,gBAAgB,SAAS,IAAI,uBAAuB;AAC1D,sBAAc;AAAA,UACb,UAAU,SAAY,SAAS,SAAS;AAAA,QACzC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,eAAa,eAAe,OAAO,mBAAmB;AAAA,IACrD,SAAS;AAAA,MACR;AAAA,MACA,OAAO;AAAA,MACP,SAAS,KAAK,OAAO;AAAA,IACtB;AAAA,IACA,OAAO,IAAI;AAAA,EACZ,CAAC;AACF,CAAC;AAED,aAAa,eAAe,OAAO,uBAAuB;AAAA,EACzD,SAAS,OAAO;AAAA,EAChB,OAAO,SAAS,cAAc,aAAa;AAAA,EAC3C,OAAO;AAAA,EACP,OAAO;AACR,CAAC;AAED,wBAAwB,QAAQ,CAAC,qBAAqB;AACrD,QAAM,EAAE,IAAI,OAAO,YAAY,OAAO,KAAK,IAAI;AAC/C;AAAA,IACC,cAAc,QAAQ;AAAA,MACrB,cAAc;AACb,cAAM;AAAA,UACL;AAAA,UACA;AAAA,UACA,UAAU,WAAW;AAAA,UACrB,SAAS,KAAK,OAAO;AAAA,UACrB,IAAI;AAAA,QACL,CAAC;AAAA,MACF;AAAA,MACA,IAAI,UAAkC;AACrC,cAAM,gBAAgB,SAAS,IAAI,uBAAuB;AAC1D,sBAAc;AAAA,UACb,UAAU,SAAY,WAAW;AAAA,QAClC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,eAAa,eAAe,OAAO,oBAAoB;AAAA,IACtD,SAAS;AAAA,MACR;AAAA,MACA,OAAO;AAAA,MACP,SAAS,KAAK,OAAO;AAAA,IACtB;AAAA,IACA,OAAO;AAAA,EACR,CAAC;AACF,CAAC;AAED,MAAM,8BAA8B,QAAQ;AAAA,EAnX5C,OAmX4C;AAAA;AAAA;AAAA,EAC3C,YAAY,IAAY,OAA4B;AACnD,UAAM;AAAA,MACL;AAAA,MACA;AAAA,MACA,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAe,IACd,UACA,QACgB;AAChB,UAAM,uBAAuB,SAAS,IAAI,yBAAyB;AACnE,UAAM,eAAe,qBAAqB;AAAA,MACzC,sBAAsB;AAAA,IACvB;AACA,UAAM,cAAc,qBAAqB;AAAA,MACxC,sBAAsB;AAAA,IACvB;AACA,QAAI,CAAC,aAAa;AACjB;AAAA,IACD;AACA,QAAI;AACJ,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC7C,UAAI,aAAa,CAAC,MAAM,YAAY,MAAM,GAAG;AAC5C,wBACC,cACE,IAAI,aAAa,SAAS,UAAU,aAAa,MACnD;AACD;AAAA,MACD;AAAA,IACD;AACA,QAAI,OAAO,kBAAkB,UAAU;AACtC,YAAM,qBAAqB;AAAA,QAC1B;AAAA,QACA,sBAAsB;AAAA,QACtB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA;AAAA,EACC,cAAc,sBAAsB;AAAA,IACnC,cAAc;AACb;AAAA,QACC;AAAA,QACA,UAAU,qBAAqB,qBAAqB;AAAA,MACrD;AAAA,IACD;AAAA,IAES,IAAI,UAA2C;AACvD,aAAO,MAAM,IAAI,UAAU,EAAE;AAAA,IAC9B;AAAA,EACD;AACD;AAEA;AAAA,EACC,cAAc,sBAAsB;AAAA,IACnC,cAAc;AACb;AAAA,QACC;AAAA,QACA,UAAU,iBAAiB,iBAAiB;AAAA,MAC7C;AAAA,IACD;AAAA,IAES,IAAI,UAA2C;AACvD,aAAO,MAAM,IAAI,UAAU,CAAC;AAAA,IAC7B;AAAA,EACD;AACD;AAEA;AAAA,EACC,cAAc,QAAQ;AAAA,IACrB,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO;AAAA,UACN;AAAA,UACA;AAAA,QACD;AAAA,QACA,SAAS,SAAS,iBAAiB,qBAAqB;AAAA,QACxD,UAAU,WAAW;AAAA,QACrB,IAAI;AAAA,QACJ,MAAM;AAAA;AAAA;AAAA,QAEN,cAAc,eAAe;AAAA,UAC5B,sBAAsB,UAAU,QAAQ;AAAA,UACxC,eAAe;AAAA,YACd,qBAAqB,YAAY,QAAQ;AAAA,YACzC,qBAAqB,YAAY,KAAK;AAAA,UACvC;AAAA,QACD;AAAA,QACA,SAAS;AAAA,UACR,WAAW;AAAA,UACX,MAAM;AAAA,UACN,SAAS,SAAS,iBAAiB,oBAAoB;AAAA,QACxD;AAAA,QACA,MAAM;AAAA,UACL;AAAA,YACC,IAAI,OAAO;AAAA,YACX,OAAO;AAAA,YACP,OAAO;AAAA;AAAA,YAEP,MAAM,eAAe;AAAA,cACpB,sBAAsB,UAAU,QAAQ;AAAA,cACxC,eAAe;AAAA,gBACd,qBAAqB,YAAY,QAAQ;AAAA,gBACzC,qBAAqB,YAAY,KAAK;AAAA,cACvC;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IACA,IAAI,UAA4B;AAC/B,YAAM,gBAAgB,SAAS,IAAI,uBAAuB;AAC1D,YAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAC7D,UACC,cAAc,kBAAkB,MAAM,YACtC,aAAa,cAAc,iBAAiB,CAAC,GAC5C;AACD,4BAAoB;AAAA,UACnB;AAAA,YACC;AAAA,YACA;AAAA,UACD;AAAA,QACD;AACA;AAAA,MACD;AAEA,UAAI,cAAc,UAAU,MAAM,UAAU,GAAG;AAC9C,sBAAc,qBAAqB;AAAA,MACpC,OAAO;AACN,sBAAc,cAAc,OAAO,MAAM,UAAU;AAEnD,YAAI,CAAC,cAAc,iBAAiB,GAAG;AACtC,wBAAc,qBAAqB;AAAA,QACpC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA;AAAA,EACC,cAAc,QAAQ;AAAA,IACrB,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO,UAAU,cAAc,YAAY;AAAA,QAC3C,UAAU,WAAW;AAAA,QACrB,MAAM;AAAA,QACN,MAAM;AAAA,UACL;AAAA,YACC,IAAI,OAAO;AAAA,YACX,MAAM;AAAA,UACP;AAAA,UACA;AAAA,YACC,IAAI,OAAO;AAAA,YACX,OAAO;AAAA,YACP,OAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IACA,IAAI,UAA4B;AAC/B,eACE,IAAI,uBAAuB,EAC3B,cAAc,MAAM,MAAM,UAAU;AAAA,IACvC;AAAA,EACD;AACD;AAEA;AAAA,EACC,cAAc,QAAQ;AAAA,IACrB,cAAc;AACb,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,OAAO;AAAA,UACN;AAAA,UACA;AAAA,QACD;AAAA,QACA,UAAU,WAAW;AAAA,QACrB,MAAM;AAAA,QACN,MAAM;AAAA,UACL;AAAA,YACC,IAAI,OAAO;AAAA,YACX,MAAM;AAAA,UACP;AAAA,UACA;AAAA,YACC,IAAI,OAAO;AAAA,YACX,OAAO;AAAA,YACP,OAAO;AAAA,YACP,MAAM,eAAe;AAAA,cACpB,UAAU,eAAe,qBAAqB;AAAA,cAC9C,oBAAoB;AAAA,YACrB;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IACA,IAAI,UAA4B;AAC/B,eACE,IAAI,uBAAuB,EAC3B,cAAc,MAAM,MAAM,iBAAiB;AAAA,IAC9C;AAAA,EACD;AACD;AAEA,aAAa,gBAAgB;AAAA,EAC5B;AAAA,IACC,IAAI,OAAO;AAAA,IACX,MAAM;AAAA,MACL,OAAO;AAAA,MACP,SAAS;AAAA,QACR,IAAI,kBAAkB;AAAA,QACtB,OAAO,SAAS,eAAe,cAAc;AAAA,QAC7C,MAAM;AAAA,QACN,SAAS,EAAE,WAAW,qBAAqB,MAAM,UAAU;AAAA,MAC5D;AAAA,MACA,MAAM,eAAe;AAAA,QACpB,eAAe;AAAA,UACd;AAAA,UACA;AAAA,QACD;AAAA,QACA,eAAe;AAAA,UACd;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,OAAO;AAAA,IACR;AAAA,EACD;AAAA,EACA;AAAA,IACC,IAAI,OAAO;AAAA,IACX,MAAM;AAAA,MACL,OAAO;AAAA,MACP,SAAS;AAAA,QACR,IAAI,kBAAkB;AAAA,QACtB,OAAO,UAAU,aAAa,YAAY;AAAA,MAC3C;AAAA,MACA,MAAM,eAAe;AAAA,QACpB;AAAA,QACA,eAAe;AAAA,UACd;AAAA,UACA,8BAA8B,sBAAsB,KAAK;AAAA,QAC1D;AAAA,MACD;AAAA,MACA,OAAO;AAAA,IACR;AAAA,EACD;AACD,CAAC;AAED,MAAM,qCAAqC,QAAQ;AAAA,EAClD,YACkB,QACA,aACjB,MACC;AACD,UAAM,IAAI;AAJO;AACA;AAAA,EAIlB;AAAA,EAznBD,OAknBmD;AAAA;AAAA;AAAA,EASlD,IAAI,aAA+B,MAAmB;AACrD,UAAM,wBAAwB,SAAS,IAAI,sBAAsB;AACjE,UAAM,gBAAgB,SAAS,IAAI,uBAAuB;AAC1D,UAAM,eAAe,SAAS,IAAI,aAAa;AAE/C,UAAM,gBAAgB,sBAAsB;AAAA,MAC3C,KAAK;AAAA,IACN;AACA,UAAM,iBACL,sBAAsB,4BAA4B,KAAK,WAAW;AAEnE,QAAI,cAAc,QAAQ;AACzB,YAAM,sBAAsB,aAAa;AAAA,QACxC,KAAK;AAAA,MACN;AAEA,oBAAc;AAAA,QAAQ,CAAC,kBACtB,sBAAsB;AAAA,UACrB;AAAA,UACA,KAAK;AAAA,UACL;AAAA,UACA,KAAK,KAAK;AAAA,QACX;AAAA,MACD;AACA,oBAAc;AAAA,QACb;AAAA,QACA,KAAK,gBAAgB,sBAAsB,QACxC,MAAM,aACN,MAAM;AAAA,MACV;AAEA,UAAI,uBAAuB,eAAe,WAAW,GAAG;AACvD,qBAAa,kBAAkB,oBAAoB,IAAI,IAAI;AAAA,MAC5D;AAAA,IACD;AAAA,EACD;AACD;AAIA,MAAM,mCAAmC,6BAA6B;AAAA,EAnqBtE,OAmqBsE;AAAA;AAAA;AAAA,EACrE,OAAgB,KAAK;AAAA,EACrB,cAAc;AACb,UAAM,sBAAsB,OAAO,sBAAsB,cAAc;AAAA,MACtE,IAAI,2BAA2B;AAAA,MAC/B,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AACD;AAEO,MAAM,0CAA0C,6BAA6B;AAAA,EAlrBpF,OAkrBoF;AAAA;AAAA;AAAA,EACnF,OAAgB,KAAK;AAAA,EACrB,cAAc;AACb,UAAM,sBAAsB,OAAO,sBAAsB,cAAc;AAAA,MACtE,IAAI,kCAAkC;AAAA,MACtC,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AACD;AAEA,gBAAgB,0BAA0B;AAC1C,gBAAgB,iCAAiC;AAIjD,MAAM,mCAAmC,6BAA6B;AAAA,EAtsBtE,OAssBsE;AAAA;AAAA;AAAA,EACrE,OAAgB,KAAK;AAAA,EAErB,cAAc;AACb,UAAM,sBAAsB,cAAc,sBAAsB,OAAO;AAAA,MACtE,IAAI,2BAA2B;AAAA,MAC/B,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AACD;AAEO,MAAM,0CAA0C,6BAA6B;AAAA,EAttBpF,OAstBoF;AAAA;AAAA;AAAA,EACnF,OAAgB,KAAK;AAAA,EAErB,cAAc;AACb,UAAM,sBAAsB,cAAc,sBAAsB,OAAO;AAAA,MACtE,IAAI,kCAAkC;AAAA,MACtC,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AACD;AACA,gBAAgB,0BAA0B;AAC1C,gBAAgB,iCAAiC;",
  "names": []
}
