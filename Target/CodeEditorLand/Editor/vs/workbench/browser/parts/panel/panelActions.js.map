{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/panel/panelActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/panelpart.css';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { KeyMod, KeyCode } from '../../../../base/common/keyCodes.js';\nimport { MenuId, MenuRegistry, registerAction2, Action2, IAction2Options } from '../../../../platform/actions/common/actions.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { ActivityBarPosition, isHorizontal, IWorkbenchLayoutService, LayoutSettings, PanelAlignment, Parts, Position, positionToString } from '../../../services/layout/browser/layoutService.js';\nimport { AuxiliaryBarVisibleContext, PanelAlignmentContext, PanelMaximizedContext, PanelPositionContext, PanelVisibleContext } from '../../../common/contextkeys.js';\nimport { ContextKeyExpr, ContextKeyExpression } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\nimport { ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { ViewContainerLocationToString, ViewContainerLocation, IViewDescriptorService } from '../../../common/views.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport { IPaneCompositePartService } from '../../../services/panecomposite/browser/panecomposite.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ICommandActionTitle } from '../../../../platform/action/common/action.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\n\nconst maximizeIcon = registerIcon('panel-maximize', Codicon.chevronUp, localize('maximizeIcon', 'Icon to maximize a panel.'));\nconst restoreIcon = registerIcon('panel-restore', Codicon.chevronDown, localize('restoreIcon', 'Icon to restore a panel.'));\nconst closeIcon = registerIcon('panel-close', Codicon.close, localize('closeIcon', 'Icon to close a panel.'));\nconst panelIcon = registerIcon('panel-layout-icon', Codicon.layoutPanel, localize('togglePanelOffIcon', 'Icon to toggle the panel off when it is on.'));\nconst panelOffIcon = registerIcon('panel-layout-icon-off', Codicon.layoutPanelOff, localize('togglePanelOnIcon', 'Icon to toggle the panel on when it is off.'));\n\nexport class TogglePanelAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.togglePanel';\n\tstatic readonly LABEL = localize2('togglePanelVisibility', \"Toggle Panel Visibility\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TogglePanelAction.ID,\n\t\t\ttitle: TogglePanelAction.LABEL,\n\t\t\ttoggled: {\n\t\t\t\tcondition: PanelVisibleContext,\n\t\t\t\ttitle: localize('toggle panel', \"Panel\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'toggle panel mnemonic', comment: ['&& denotes a mnemonic'] }, \"&&Panel\"),\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tcategory: Categories.View,\n\t\t\tkeybinding: { primary: KeyMod.CtrlCmd | KeyCode.KeyJ, weight: KeybindingWeight.WorkbenchContrib },\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.MenubarAppearanceMenu,\n\t\t\t\t\tgroup: '2_workbench_layout',\n\t\t\t\t\torder: 5\n\t\t\t\t}, {\n\t\t\t\t\tid: MenuId.LayoutControlMenuSubmenu,\n\t\t\t\t\tgroup: '0_workbench_layout',\n\t\t\t\t\torder: 4\n\t\t\t\t},\n\t\t\t]\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tlayoutService.setPartHidden(layoutService.isVisible(Parts.PANEL_PART), Parts.PANEL_PART);\n\t}\n}\n\nregisterAction2(TogglePanelAction);\n\nregisterAction2(class extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.focusPanel';\n\tstatic readonly LABEL = localize('focusPanel', \"Focus into Panel\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.focusPanel',\n\t\t\ttitle: localize2('focusPanel', \"Focus into Panel\"),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tconst paneCompositeService = accessor.get(IPaneCompositePartService);\n\n\t\t// Show panel\n\t\tif (!layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\tlayoutService.setPartHidden(false, Parts.PANEL_PART);\n\t\t}\n\n\t\t// Focus into active panel\n\t\tconst panel = paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel);\n\t\tpanel?.focus();\n\t}\n});\n\nconst PositionPanelActionId = {\n\tLEFT: 'workbench.action.positionPanelLeft',\n\tRIGHT: 'workbench.action.positionPanelRight',\n\tBOTTOM: 'workbench.action.positionPanelBottom',\n\tTOP: 'workbench.action.positionPanelTop'\n};\n\nconst AlignPanelActionId = {\n\tLEFT: 'workbench.action.alignPanelLeft',\n\tRIGHT: 'workbench.action.alignPanelRight',\n\tCENTER: 'workbench.action.alignPanelCenter',\n\tJUSTIFY: 'workbench.action.alignPanelJustify',\n};\n\ninterface PanelActionConfig<T> {\n\tid: string;\n\twhen: ContextKeyExpression;\n\ttitle: ICommandActionTitle;\n\tshortLabel: string;\n\tvalue: T;\n}\n\nfunction createPanelActionConfig<T>(id: string, title: ICommandActionTitle, shortLabel: string, value: T, when: ContextKeyExpression): PanelActionConfig<T> {\n\treturn {\n\t\tid,\n\t\ttitle,\n\t\tshortLabel,\n\t\tvalue,\n\t\twhen,\n\t};\n}\n\nfunction createPositionPanelActionConfig(id: string, title: ICommandActionTitle, shortLabel: string, position: Position): PanelActionConfig<Position> {\n\treturn createPanelActionConfig<Position>(id, title, shortLabel, position, PanelPositionContext.notEqualsTo(positionToString(position)));\n}\n\nfunction createAlignmentPanelActionConfig(id: string, title: ICommandActionTitle, shortLabel: string, alignment: PanelAlignment): PanelActionConfig<PanelAlignment> {\n\treturn createPanelActionConfig<PanelAlignment>(id, title, shortLabel, alignment, PanelAlignmentContext.notEqualsTo(alignment));\n}\n\n\nconst PositionPanelActionConfigs: PanelActionConfig<Position>[] = [\n\tcreatePositionPanelActionConfig(PositionPanelActionId.TOP, localize2('positionPanelTop', \"Move Panel To Top\"), localize('positionPanelTopShort', \"Top\"), Position.TOP),\n\tcreatePositionPanelActionConfig(PositionPanelActionId.LEFT, localize2('positionPanelLeft', \"Move Panel Left\"), localize('positionPanelLeftShort', \"Left\"), Position.LEFT),\n\tcreatePositionPanelActionConfig(PositionPanelActionId.RIGHT, localize2('positionPanelRight', \"Move Panel Right\"), localize('positionPanelRightShort', \"Right\"), Position.RIGHT),\n\tcreatePositionPanelActionConfig(PositionPanelActionId.BOTTOM, localize2('positionPanelBottom', \"Move Panel To Bottom\"), localize('positionPanelBottomShort', \"Bottom\"), Position.BOTTOM),\n];\n\n\nconst AlignPanelActionConfigs: PanelActionConfig<PanelAlignment>[] = [\n\tcreateAlignmentPanelActionConfig(AlignPanelActionId.LEFT, localize2('alignPanelLeft', \"Set Panel Alignment to Left\"), localize('alignPanelLeftShort', \"Left\"), 'left'),\n\tcreateAlignmentPanelActionConfig(AlignPanelActionId.RIGHT, localize2('alignPanelRight', \"Set Panel Alignment to Right\"), localize('alignPanelRightShort', \"Right\"), 'right'),\n\tcreateAlignmentPanelActionConfig(AlignPanelActionId.CENTER, localize2('alignPanelCenter', \"Set Panel Alignment to Center\"), localize('alignPanelCenterShort', \"Center\"), 'center'),\n\tcreateAlignmentPanelActionConfig(AlignPanelActionId.JUSTIFY, localize2('alignPanelJustify', \"Set Panel Alignment to Justify\"), localize('alignPanelJustifyShort', \"Justify\"), 'justify'),\n];\n\n\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tsubmenu: MenuId.PanelPositionMenu,\n\ttitle: localize('positionPanel', \"Panel Position\"),\n\tgroup: '3_workbench_layout_move',\n\torder: 4\n});\n\nPositionPanelActionConfigs.forEach((positionPanelAction, index) => {\n\tconst { id, title, shortLabel, value, when } = positionPanelAction;\n\n\tregisterAction2(class extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid,\n\t\t\t\ttitle,\n\t\t\t\tcategory: Categories.View,\n\t\t\t\tf1: true\n\t\t\t});\n\t\t}\n\t\trun(accessor: ServicesAccessor): void {\n\t\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\t\tlayoutService.setPanelPosition(value === undefined ? Position.BOTTOM : value);\n\t\t}\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.PanelPositionMenu, {\n\t\tcommand: {\n\t\t\tid,\n\t\t\ttitle: shortLabel,\n\t\t\ttoggled: when.negate()\n\t\t},\n\t\torder: 5 + index\n\t});\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {\n\tsubmenu: MenuId.PanelAlignmentMenu,\n\ttitle: localize('alignPanel', \"Align Panel\"),\n\tgroup: '3_workbench_layout_move',\n\torder: 5\n});\n\nAlignPanelActionConfigs.forEach(alignPanelAction => {\n\tconst { id, title, shortLabel, value, when } = alignPanelAction;\n\tregisterAction2(class extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid,\n\t\t\t\ttitle,\n\t\t\t\tcategory: Categories.View,\n\t\t\t\ttoggled: when.negate(),\n\t\t\t\tf1: true\n\t\t\t});\n\t\t}\n\t\trun(accessor: ServicesAccessor): void {\n\t\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\t\tlayoutService.setPanelAlignment(value === undefined ? 'center' : value);\n\t\t}\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.PanelAlignmentMenu, {\n\t\tcommand: {\n\t\t\tid,\n\t\t\ttitle: shortLabel,\n\t\t\ttoggled: when.negate()\n\t\t},\n\t\torder: 5\n\t});\n});\n\nclass SwitchPanelViewAction extends Action2 {\n\n\tconstructor(id: string, title: ICommandActionTitle) {\n\t\tsuper({\n\t\t\tid,\n\t\t\ttitle,\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor, offset: number): Promise<void> {\n\t\tconst paneCompositeService = accessor.get(IPaneCompositePartService);\n\t\tconst pinnedPanels = paneCompositeService.getVisiblePaneCompositeIds(ViewContainerLocation.Panel);\n\t\tconst activePanel = paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel);\n\t\tif (!activePanel) {\n\t\t\treturn;\n\t\t}\n\t\tlet targetPanelId: string | undefined;\n\t\tfor (let i = 0; i < pinnedPanels.length; i++) {\n\t\t\tif (pinnedPanels[i] === activePanel.getId()) {\n\t\t\t\ttargetPanelId = pinnedPanels[(i + pinnedPanels.length + offset) % pinnedPanels.length];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (typeof targetPanelId === 'string') {\n\t\t\tawait paneCompositeService.openPaneComposite(targetPanelId, ViewContainerLocation.Panel, true);\n\t\t}\n\t}\n}\n\nregisterAction2(class extends SwitchPanelViewAction {\n\tconstructor() {\n\t\tsuper('workbench.action.previousPanelView', localize2('previousPanelView', \"Previous Panel View\"));\n\t}\n\n\toverride run(accessor: ServicesAccessor): Promise<void> {\n\t\treturn super.run(accessor, -1);\n\t}\n});\n\nregisterAction2(class extends SwitchPanelViewAction {\n\tconstructor() {\n\t\tsuper('workbench.action.nextPanelView', localize2('nextPanelView', \"Next Panel View\"));\n\t}\n\n\toverride run(accessor: ServicesAccessor): Promise<void> {\n\t\treturn super.run(accessor, 1);\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.toggleMaximizedPanel',\n\t\t\ttitle: localize2('toggleMaximizedPanel', 'Toggle Maximized Panel'),\n\t\t\ttooltip: localize('maximizePanel', \"Maximize Panel Size\"),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true,\n\t\t\ticon: maximizeIcon, // This is being rotated in CSS depending on the panel position\n\t\t\t// the workbench grid currently prevents us from supporting panel maximization with non-center panel alignment\n\t\t\tprecondition: ContextKeyExpr.or(PanelAlignmentContext.isEqualTo('center'), ContextKeyExpr.and(PanelPositionContext.notEqualsTo('bottom'), PanelPositionContext.notEqualsTo('top'))),\n\t\t\ttoggled: { condition: PanelMaximizedContext, icon: restoreIcon, tooltip: localize('minimizePanel', \"Restore Panel Size\") },\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.PanelTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 1,\n\t\t\t\t// the workbench grid currently prevents us from supporting panel maximization with non-center panel alignment\n\t\t\t\twhen: ContextKeyExpr.or(PanelAlignmentContext.isEqualTo('center'), ContextKeyExpr.and(PanelPositionContext.notEqualsTo('bottom'), PanelPositionContext.notEqualsTo('top')))\n\t\t\t}]\n\t\t});\n\t}\n\trun(accessor: ServicesAccessor) {\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tif (layoutService.getPanelAlignment() !== 'center' && isHorizontal(layoutService.getPanelPosition())) {\n\t\t\tnotificationService.warn(localize('panelMaxNotSupported', \"Maximizing the panel is only supported when it is center aligned.\"));\n\t\t\treturn;\n\t\t}\n\n\t\tif (!layoutService.isVisible(Parts.PANEL_PART)) {\n\t\t\tlayoutService.setPartHidden(false, Parts.PANEL_PART);\n\t\t\t// If the panel is not already maximized, maximize it\n\t\t\tif (!layoutService.isPanelMaximized()) {\n\t\t\t\tlayoutService.toggleMaximizedPanel();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlayoutService.toggleMaximizedPanel();\n\t\t}\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.closePanel',\n\t\t\ttitle: localize2('closePanel', 'Hide Panel'),\n\t\t\tcategory: Categories.View,\n\t\t\ticon: closeIcon,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: PanelVisibleContext,\n\t\t\t}, {\n\t\t\t\tid: MenuId.PanelTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 2\n\t\t\t}]\n\t\t});\n\t}\n\trun(accessor: ServicesAccessor) {\n\t\taccessor.get(IWorkbenchLayoutService).setPartHidden(true, Parts.PANEL_PART);\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.closeAuxiliaryBar',\n\t\t\ttitle: localize2('closeSecondarySideBar', 'Hide Secondary Side Bar'),\n\t\t\tcategory: Categories.View,\n\t\t\ticon: closeIcon,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: AuxiliaryBarVisibleContext,\n\t\t\t}, {\n\t\t\t\tid: MenuId.AuxiliaryBarTitle,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 2,\n\t\t\t\twhen: ContextKeyExpr.notEquals(`config.${LayoutSettings.ACTIVITY_BAR_LOCATION}`, ActivityBarPosition.TOP)\n\t\t\t}]\n\t\t});\n\t}\n\trun(accessor: ServicesAccessor) {\n\t\taccessor.get(IWorkbenchLayoutService).setPartHidden(true, Parts.AUXILIARYBAR_PART);\n\t}\n});\n\nMenuRegistry.appendMenuItems([\n\t{\n\t\tid: MenuId.LayoutControlMenu,\n\t\titem: {\n\t\t\tgroup: '0_workbench_toggles',\n\t\t\tcommand: {\n\t\t\t\tid: TogglePanelAction.ID,\n\t\t\t\ttitle: localize('togglePanel', \"Toggle Panel\"),\n\t\t\t\ticon: panelOffIcon,\n\t\t\t\ttoggled: { condition: PanelVisibleContext, icon: panelIcon }\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.or(ContextKeyExpr.equals('config.workbench.layoutControl.type', 'toggles'), ContextKeyExpr.equals('config.workbench.layoutControl.type', 'both')),\n\t\t\torder: 1\n\t\t}\n\t}, {\n\t\tid: MenuId.ViewTitleContext,\n\t\titem: {\n\t\t\tgroup: '3_workbench_layout_move',\n\t\t\tcommand: {\n\t\t\t\tid: TogglePanelAction.ID,\n\t\t\t\ttitle: localize2('hidePanel', 'Hide Panel'),\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(PanelVisibleContext, ContextKeyExpr.equals('viewLocation', ViewContainerLocationToString(ViewContainerLocation.Panel))),\n\t\t\torder: 2\n\t\t}\n\t}\n]);\n\nclass MoveViewsBetweenPanelsAction extends Action2 {\n\tconstructor(private readonly source: ViewContainerLocation, private readonly destination: ViewContainerLocation, desc: Readonly<IAction2Options>) {\n\t\tsuper(desc);\n\t}\n\n\trun(accessor: ServicesAccessor, ...args: any[]): void {\n\t\tconst viewDescriptorService = accessor.get(IViewDescriptorService);\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\n\t\tconst srcContainers = viewDescriptorService.getViewContainersByLocation(this.source);\n\t\tconst destContainers = viewDescriptorService.getViewContainersByLocation(this.destination);\n\n\t\tif (srcContainers.length) {\n\t\t\tconst activeViewContainer = viewsService.getVisibleViewContainer(this.source);\n\n\t\t\tsrcContainers.forEach(viewContainer => viewDescriptorService.moveViewContainerToLocation(viewContainer, this.destination, undefined, this.desc.id));\n\t\t\tlayoutService.setPartHidden(false, this.destination === ViewContainerLocation.Panel ? Parts.PANEL_PART : Parts.AUXILIARYBAR_PART);\n\n\t\t\tif (activeViewContainer && destContainers.length === 0) {\n\t\t\t\tviewsService.openViewContainer(activeViewContainer.id, true);\n\t\t\t}\n\t\t}\n\t}\n}\n\n// --- Move Panel Views To Secondary Side Bar\n\nclass MovePanelToSidePanelAction extends MoveViewsBetweenPanelsAction {\n\tstatic readonly ID = 'workbench.action.movePanelToSidePanel';\n\tconstructor() {\n\t\tsuper(ViewContainerLocation.Panel, ViewContainerLocation.AuxiliaryBar, {\n\t\t\tid: MovePanelToSidePanelAction.ID,\n\t\t\ttitle: localize2('movePanelToSecondarySideBar', \"Move Panel Views To Secondary Side Bar\"),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: false\n\t\t});\n\t}\n}\n\nexport class MovePanelToSecondarySideBarAction extends MoveViewsBetweenPanelsAction {\n\tstatic readonly ID = 'workbench.action.movePanelToSecondarySideBar';\n\tconstructor() {\n\t\tsuper(ViewContainerLocation.Panel, ViewContainerLocation.AuxiliaryBar, {\n\t\t\tid: MovePanelToSecondarySideBarAction.ID,\n\t\t\ttitle: localize2('movePanelToSecondarySideBar', \"Move Panel Views To Secondary Side Bar\"),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true\n\t\t});\n\t}\n}\n\nregisterAction2(MovePanelToSidePanelAction);\nregisterAction2(MovePanelToSecondarySideBarAction);\n\n// --- Move Secondary Side Bar Views To Panel\n\nclass MoveSidePanelToPanelAction extends MoveViewsBetweenPanelsAction {\n\tstatic readonly ID = 'workbench.action.moveSidePanelToPanel';\n\n\tconstructor() {\n\t\tsuper(ViewContainerLocation.AuxiliaryBar, ViewContainerLocation.Panel, {\n\t\t\tid: MoveSidePanelToPanelAction.ID,\n\t\t\ttitle: localize2('moveSidePanelToPanel', \"Move Secondary Side Bar Views To Panel\"),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: false\n\t\t});\n\t}\n}\n\nexport class MoveSecondarySideBarToPanelAction extends MoveViewsBetweenPanelsAction {\n\tstatic readonly ID = 'workbench.action.moveSecondarySideBarToPanel';\n\n\tconstructor() {\n\t\tsuper(ViewContainerLocation.AuxiliaryBar, ViewContainerLocation.Panel, {\n\t\t\tid: MoveSecondarySideBarToPanelAction.ID,\n\t\t\ttitle: localize2('moveSidePanelToPanel', \"Move Secondary Side Bar Views To Panel\"),\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true\n\t\t});\n\t}\n}\nregisterAction2(MoveSidePanelToPanelAction);\nregisterAction2(MoveSecondarySideBarToPanelAction);\n"],
  "mappings": "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",
  "names": []
}
