{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/statusbar/statusbarPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/statusbarpart.css';\nimport { localize } from '../../../../nls.js';\nimport { Disposable, DisposableStore, dispose, disposeIfDisposable, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { MultiWindowParts, Part } from '../../part.js';\nimport { EventType as TouchEventType, Gesture, GestureEvent } from '../../../../base/browser/touch.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarStyleOverride, isStatusbarEntryLocation, IStatusbarEntryLocation, isStatusbarEntryPriority, IStatusbarEntryPriority } from '../../../services/statusbar/browser/statusbar.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IAction, Separator, toAction } from '../../../../base/common/actions.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { STATUS_BAR_BACKGROUND, STATUS_BAR_FOREGROUND, STATUS_BAR_NO_FOLDER_BACKGROUND, STATUS_BAR_ITEM_HOVER_BACKGROUND, STATUS_BAR_BORDER, STATUS_BAR_NO_FOLDER_FOREGROUND, STATUS_BAR_NO_FOLDER_BORDER, STATUS_BAR_ITEM_COMPACT_HOVER_BACKGROUND, STATUS_BAR_ITEM_FOCUS_BORDER, STATUS_BAR_FOCUS_BORDER } from '../../../common/theme.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { contrastBorder, activeContrastBorder } from '../../../../platform/theme/common/colorRegistry.js';\nimport { EventHelper, createStyleSheet, addDisposableListener, EventType, clearNode, getWindow } from '../../../../base/browser/dom.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { Parts, IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { equals } from '../../../../base/common/arrays.js';\nimport { StandardMouseEvent } from '../../../../base/browser/mouseEvent.js';\nimport { ToggleStatusbarVisibilityAction } from '../../actions/layoutActions.js';\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { hash } from '../../../../base/common/hash.js';\nimport { WorkbenchHoverDelegate } from '../../../../platform/hover/browser/hover.js';\nimport { HideStatusbarEntryAction, ToggleStatusbarEntryVisibilityAction } from './statusbarActions.js';\nimport { IStatusbarViewModelEntry, StatusbarViewModel } from './statusbarModel.js';\nimport { StatusbarEntryItem } from './statusbarItem.js';\nimport { StatusBarFocused } from '../../../common/contextkeys.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IView } from '../../../../base/browser/ui/grid/grid.js';\n\nexport interface IStatusbarEntryContainer extends IDisposable {\n\n\t/**\n\t * An event that is triggered when an entry's visibility is changed.\n\t */\n\treadonly onDidChangeEntryVisibility: Event<{ id: string; visible: boolean }>;\n\n\t/**\n\t * Adds an entry to the statusbar with the given alignment and priority. Use the returned accessor\n\t * to update or remove the statusbar entry.\n\t *\n\t * @param id identifier of the entry is needed to allow users to hide entries via settings\n\t * @param alignment either LEFT or RIGHT side in the status bar\n\t * @param priority items get arranged from highest priority to lowest priority from left to right\n\t * in their respective alignment slot\n\t */\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority?: number | IStatusbarEntryPriority): IStatusbarEntryAccessor;\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority?: number | IStatusbarEntryPriority | IStatusbarEntryLocation): IStatusbarEntryAccessor;\n\n\t/**\n\t * Adds an entry to the statusbar with the given alignment relative to another entry. Use the returned\n\t * accessor to update or remove the statusbar entry.\n\t *\n\t * @param id identifier of the entry is needed to allow users to hide entries via settings\n\t * @param alignment either LEFT or RIGHT side in the status bar\n\t * @param location a reference to another entry to position relative to\n\t */\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, location?: IStatusbarEntryLocation): IStatusbarEntryAccessor;\n\n\t/**\n\t * Return if an entry is visible or not.\n\t */\n\tisEntryVisible(id: string): boolean;\n\n\t/**\n\t * Allows to update an entry's visibility with the provided ID.\n\t */\n\tupdateEntryVisibility(id: string, visible: boolean): void;\n\n\t/**\n\t * Focused the status bar. If one of the status bar entries was focused, focuses it directly.\n\t */\n\tfocus(preserveEntryFocus?: boolean): void;\n\n\t/**\n\t * Focuses the next status bar entry. If none focused, focuses the first.\n\t */\n\tfocusNextEntry(): void;\n\n\t/**\n\t * Focuses the previous status bar entry. If none focused, focuses the last.\n\t */\n\tfocusPreviousEntry(): void;\n\n\t/**\n\t *\tReturns true if a status bar entry is focused.\n\t */\n\tisEntryFocused(): boolean;\n\n\t/**\n\t * Temporarily override statusbar style.\n\t */\n\toverrideStyle(style: IStatusbarStyleOverride): IDisposable;\n}\n\ninterface IPendingStatusbarEntry {\n\treadonly id: string;\n\treadonly alignment: StatusbarAlignment;\n\treadonly priority: IStatusbarEntryPriority;\n\n\tentry: IStatusbarEntry;\n\taccessor?: IStatusbarEntryAccessor;\n}\n\nclass StatusbarPart extends Part implements IStatusbarEntryContainer {\n\n\tstatic readonly HEIGHT = 22;\n\n\t//#region IView\n\n\treadonly minimumWidth: number = 0;\n\treadonly maximumWidth: number = Number.POSITIVE_INFINITY;\n\treadonly minimumHeight: number = StatusbarPart.HEIGHT;\n\treadonly maximumHeight: number = StatusbarPart.HEIGHT;\n\n\t//#endregion\n\n\tprivate styleElement: HTMLStyleElement | undefined;\n\n\tprivate pendingEntries: IPendingStatusbarEntry[] = [];\n\n\tprivate readonly viewModel = this._register(new StatusbarViewModel(this.storageService));\n\n\treadonly onDidChangeEntryVisibility = this.viewModel.onDidChangeEntryVisibility;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate leftItemsContainer: HTMLElement | undefined;\n\tprivate rightItemsContainer: HTMLElement | undefined;\n\n\tprivate readonly hoverDelegate = this._register(this.instantiationService.createInstance(WorkbenchHoverDelegate, 'element', true, (_, focus?: boolean) => (\n\t\t{\n\t\t\tpersistence: {\n\t\t\t\thideOnKeyDown: true,\n\t\t\t\tsticky: focus\n\t\t\t}\n\t\t}\n\t)));\n\n\tprivate readonly compactEntriesDisposable = this._register(new MutableDisposable<DisposableStore>());\n\tprivate readonly styleOverrides = new Set<IStatusbarStyleOverride>();\n\n\tconstructor(\n\t\tid: string,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper(id, { hasTitle: false }, themeService, storageService, layoutService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Entry visibility changes\n\t\tthis._register(this.onDidChangeEntryVisibility(() => this.updateCompactEntries()));\n\n\t\t// Workbench state changes\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this.updateStyles()));\n\t}\n\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priorityOrLocation: number | IStatusbarEntryLocation | IStatusbarEntryPriority = 0): IStatusbarEntryAccessor {\n\t\tlet priority: IStatusbarEntryPriority;\n\t\tif (isStatusbarEntryPriority(priorityOrLocation)) {\n\t\t\tpriority = priorityOrLocation;\n\t\t} else {\n\t\t\tpriority = {\n\t\t\t\tprimary: priorityOrLocation,\n\t\t\t\tsecondary: hash(id) // derive from identifier to accomplish uniqueness\n\t\t\t};\n\t\t}\n\n\t\t// As long as we have not been created into a container yet, record all entries\n\t\t// that are pending so that they can get created at a later point\n\t\tif (!this.element) {\n\t\t\treturn this.doAddPendingEntry(entry, id, alignment, priority);\n\t\t}\n\n\t\t// Otherwise add to view\n\t\treturn this.doAddEntry(entry, id, alignment, priority);\n\t}\n\n\tprivate doAddPendingEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority: IStatusbarEntryPriority): IStatusbarEntryAccessor {\n\t\tconst pendingEntry: IPendingStatusbarEntry = { entry, id, alignment, priority };\n\t\tthis.pendingEntries.push(pendingEntry);\n\n\t\tconst accessor: IStatusbarEntryAccessor = {\n\t\t\tupdate: (entry: IStatusbarEntry) => {\n\t\t\t\tif (pendingEntry.accessor) {\n\t\t\t\t\tpendingEntry.accessor.update(entry);\n\t\t\t\t} else {\n\t\t\t\t\tpendingEntry.entry = entry;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdispose: () => {\n\t\t\t\tif (pendingEntry.accessor) {\n\t\t\t\t\tpendingEntry.accessor.dispose();\n\t\t\t\t} else {\n\t\t\t\t\tthis.pendingEntries = this.pendingEntries.filter(entry => entry !== pendingEntry);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn accessor;\n\t}\n\n\tprivate doAddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority: IStatusbarEntryPriority): IStatusbarEntryAccessor {\n\n\t\t// View model item\n\t\tconst itemContainer = this.doCreateStatusItem(id, alignment);\n\t\tconst item = this.instantiationService.createInstance(StatusbarEntryItem, itemContainer, entry, this.hoverDelegate);\n\n\t\t// View model entry\n\t\tconst viewModelEntry: IStatusbarViewModelEntry = new class implements IStatusbarViewModelEntry {\n\t\t\treadonly id = id;\n\t\t\treadonly alignment = alignment;\n\t\t\treadonly priority = priority;\n\t\t\treadonly container = itemContainer;\n\t\t\treadonly labelContainer = item.labelContainer;\n\n\t\t\tget name() { return item.name; }\n\t\t\tget hasCommand() { return item.hasCommand; }\n\t\t};\n\n\t\t// Add to view model\n\t\tconst { needsFullRefresh } = this.doAddOrRemoveModelEntry(viewModelEntry, true);\n\t\tif (needsFullRefresh) {\n\t\t\tthis.appendStatusbarEntries();\n\t\t} else {\n\t\t\tthis.appendStatusbarEntry(viewModelEntry);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: entry => {\n\t\t\t\titem.update(entry);\n\t\t\t},\n\t\t\tdispose: () => {\n\t\t\t\tconst { needsFullRefresh } = this.doAddOrRemoveModelEntry(viewModelEntry, false);\n\t\t\t\tif (needsFullRefresh) {\n\t\t\t\t\tthis.appendStatusbarEntries();\n\t\t\t\t} else {\n\t\t\t\t\titemContainer.remove();\n\t\t\t\t}\n\t\t\t\tdispose(item);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate doCreateStatusItem(id: string, alignment: StatusbarAlignment, ...extraClasses: string[]): HTMLElement {\n\t\tconst itemContainer = document.createElement('div');\n\t\titemContainer.id = id;\n\n\t\titemContainer.classList.add('statusbar-item');\n\t\tif (extraClasses) {\n\t\t\titemContainer.classList.add(...extraClasses);\n\t\t}\n\n\t\tif (alignment === StatusbarAlignment.RIGHT) {\n\t\t\titemContainer.classList.add('right');\n\t\t} else {\n\t\t\titemContainer.classList.add('left');\n\t\t}\n\n\t\treturn itemContainer;\n\t}\n\n\tprivate doAddOrRemoveModelEntry(entry: IStatusbarViewModelEntry, add: boolean) {\n\n\t\t// Update model but remember previous entries\n\t\tconst entriesBefore = this.viewModel.entries;\n\t\tif (add) {\n\t\t\tthis.viewModel.add(entry);\n\t\t} else {\n\t\t\tthis.viewModel.remove(entry);\n\t\t}\n\t\tconst entriesAfter = this.viewModel.entries;\n\n\t\t// Apply operation onto the entries from before\n\t\tif (add) {\n\t\t\tentriesBefore.splice(entriesAfter.indexOf(entry), 0, entry);\n\t\t} else {\n\t\t\tentriesBefore.splice(entriesBefore.indexOf(entry), 1);\n\t\t}\n\n\t\t// Figure out if a full refresh is needed by comparing arrays\n\t\tconst needsFullRefresh = !equals(entriesBefore, entriesAfter);\n\n\t\treturn { needsFullRefresh };\n\t}\n\n\tisEntryVisible(id: string): boolean {\n\t\treturn !this.viewModel.isHidden(id);\n\t}\n\n\tupdateEntryVisibility(id: string, visible: boolean): void {\n\t\tif (visible) {\n\t\t\tthis.viewModel.show(id);\n\t\t} else {\n\t\t\tthis.viewModel.hide(id);\n\t\t}\n\t}\n\n\tfocusNextEntry(): void {\n\t\tthis.viewModel.focusNextEntry();\n\t}\n\n\tfocusPreviousEntry(): void {\n\t\tthis.viewModel.focusPreviousEntry();\n\t}\n\n\tisEntryFocused(): boolean {\n\t\treturn this.viewModel.isEntryFocused();\n\t}\n\n\tfocus(preserveEntryFocus = true): void {\n\t\tthis.getContainer()?.focus();\n\t\tconst lastFocusedEntry = this.viewModel.lastFocusedEntry;\n\t\tif (preserveEntryFocus && lastFocusedEntry) {\n\t\t\tsetTimeout(() => lastFocusedEntry.labelContainer.focus(), 0); // Need a timeout, for some reason without it the inner label container will not get focused\n\t\t}\n\t}\n\n\tprotected override createContentArea(parent: HTMLElement): HTMLElement {\n\t\tthis.element = parent;\n\n\t\t// Track focus within container\n\t\tconst scopedContextKeyService = this._register(this.contextKeyService.createScoped(this.element));\n\t\tStatusBarFocused.bindTo(scopedContextKeyService).set(true);\n\n\t\t// Left items container\n\t\tthis.leftItemsContainer = document.createElement('div');\n\t\tthis.leftItemsContainer.classList.add('left-items', 'items-container');\n\t\tthis.element.appendChild(this.leftItemsContainer);\n\t\tthis.element.tabIndex = 0;\n\n\t\t// Right items container\n\t\tthis.rightItemsContainer = document.createElement('div');\n\t\tthis.rightItemsContainer.classList.add('right-items', 'items-container');\n\t\tthis.element.appendChild(this.rightItemsContainer);\n\n\t\t// Context menu support\n\t\tthis._register(addDisposableListener(parent, EventType.CONTEXT_MENU, e => this.showContextMenu(e)));\n\t\tthis._register(Gesture.addTarget(parent));\n\t\tthis._register(addDisposableListener(parent, TouchEventType.Contextmenu, e => this.showContextMenu(e)));\n\n\t\t// Initial status bar entries\n\t\tthis.createInitialStatusbarEntries();\n\n\t\treturn this.element;\n\t}\n\n\tprivate createInitialStatusbarEntries(): void {\n\n\t\t// Add items in order according to alignment\n\t\tthis.appendStatusbarEntries();\n\n\t\t// Fill in pending entries if any\n\t\twhile (this.pendingEntries.length) {\n\t\t\tconst pending = this.pendingEntries.shift();\n\t\t\tif (pending) {\n\t\t\t\tpending.accessor = this.addEntry(pending.entry, pending.id, pending.alignment, pending.priority.primary);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate appendStatusbarEntries(): void {\n\t\tconst leftItemsContainer = assertIsDefined(this.leftItemsContainer);\n\t\tconst rightItemsContainer = assertIsDefined(this.rightItemsContainer);\n\n\t\t// Clear containers\n\t\tclearNode(leftItemsContainer);\n\t\tclearNode(rightItemsContainer);\n\n\t\t// Append all\n\t\tfor (const entry of [\n\t\t\t...this.viewModel.getEntries(StatusbarAlignment.LEFT),\n\t\t\t...this.viewModel.getEntries(StatusbarAlignment.RIGHT).reverse() // reversing due to flex: row-reverse\n\t\t]) {\n\t\t\tconst target = entry.alignment === StatusbarAlignment.LEFT ? leftItemsContainer : rightItemsContainer;\n\n\t\t\ttarget.appendChild(entry.container);\n\t\t}\n\n\t\t// Update compact entries\n\t\tthis.updateCompactEntries();\n\t}\n\n\tprivate appendStatusbarEntry(entry: IStatusbarViewModelEntry): void {\n\t\tconst entries = this.viewModel.getEntries(entry.alignment);\n\n\t\tif (entry.alignment === StatusbarAlignment.RIGHT) {\n\t\t\tentries.reverse(); // reversing due to flex: row-reverse\n\t\t}\n\n\t\tconst target = assertIsDefined(entry.alignment === StatusbarAlignment.LEFT ? this.leftItemsContainer : this.rightItemsContainer);\n\n\t\tconst index = entries.indexOf(entry);\n\t\tif (index + 1 === entries.length) {\n\t\t\ttarget.appendChild(entry.container); // append at the end if last\n\t\t} else {\n\t\t\ttarget.insertBefore(entry.container, entries[index + 1].container); // insert before next element otherwise\n\t\t}\n\n\t\t// Update compact entries\n\t\tthis.updateCompactEntries();\n\t}\n\n\tprivate updateCompactEntries(): void {\n\t\tconst entries = this.viewModel.entries;\n\n\t\t// Find visible entries and clear compact related CSS classes if any\n\t\tconst mapIdToVisibleEntry = new Map<string, IStatusbarViewModelEntry>();\n\t\tfor (const entry of entries) {\n\t\t\tif (!this.viewModel.isHidden(entry.id)) {\n\t\t\t\tmapIdToVisibleEntry.set(entry.id, entry);\n\t\t\t}\n\n\t\t\tentry.container.classList.remove('compact-left', 'compact-right');\n\t\t}\n\n\t\t// Figure out groups of entries with `compact` alignment\n\t\tconst compactEntryGroups = new Map<string, Map<string, IStatusbarViewModelEntry>>();\n\t\tfor (const entry of mapIdToVisibleEntry.values()) {\n\t\t\tif (\n\t\t\t\tisStatusbarEntryLocation(entry.priority.primary) && // entry references another entry as location\n\t\t\t\tentry.priority.primary.compact\t\t\t\t\t\t// entry wants to be compact\n\t\t\t) {\n\t\t\t\tconst locationId = entry.priority.primary.id;\n\t\t\t\tconst location = mapIdToVisibleEntry.get(locationId);\n\t\t\t\tif (!location) {\n\t\t\t\t\tcontinue; // skip if location does not exist\n\t\t\t\t}\n\n\t\t\t\t// Build a map of entries that are compact among each other\n\t\t\t\tlet compactEntryGroup = compactEntryGroups.get(locationId);\n\t\t\t\tif (!compactEntryGroup) {\n\n\t\t\t\t\t// It is possible that this entry references another entry\n\t\t\t\t\t// that itself references an entry. In that case, we want\n\t\t\t\t\t// to add it to the entries of the referenced entry.\n\n\t\t\t\t\tfor (const group of compactEntryGroups.values()) {\n\t\t\t\t\t\tif (group.has(locationId)) {\n\t\t\t\t\t\t\tcompactEntryGroup = group;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!compactEntryGroup) {\n\t\t\t\t\t\tcompactEntryGroup = new Map<string, IStatusbarViewModelEntry>();\n\t\t\t\t\t\tcompactEntryGroups.set(locationId, compactEntryGroup);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcompactEntryGroup.set(entry.id, entry);\n\t\t\t\tcompactEntryGroup.set(location.id, location);\n\n\t\t\t\t// Adjust CSS classes to move compact items closer together\n\t\t\t\tif (entry.priority.primary.alignment === StatusbarAlignment.LEFT) {\n\t\t\t\t\tlocation.container.classList.add('compact-left');\n\t\t\t\t\tentry.container.classList.add('compact-right');\n\t\t\t\t} else {\n\t\t\t\t\tlocation.container.classList.add('compact-right');\n\t\t\t\t\tentry.container.classList.add('compact-left');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Install mouse listeners to update hover feedback for\n\t\t// all compact entries that belong to each other\n\t\tconst statusBarItemHoverBackground = this.getColor(STATUS_BAR_ITEM_HOVER_BACKGROUND);\n\t\tconst statusBarItemCompactHoverBackground = this.getColor(STATUS_BAR_ITEM_COMPACT_HOVER_BACKGROUND);\n\t\tthis.compactEntriesDisposable.value = new DisposableStore();\n\t\tif (statusBarItemHoverBackground && statusBarItemCompactHoverBackground && !isHighContrast(this.theme.type)) {\n\t\t\tfor (const [, compactEntryGroup] of compactEntryGroups) {\n\t\t\t\tfor (const compactEntry of compactEntryGroup.values()) {\n\t\t\t\t\tif (!compactEntry.hasCommand) {\n\t\t\t\t\t\tcontinue; // only show hover feedback when we have a command\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.compactEntriesDisposable.value.add(addDisposableListener(compactEntry.labelContainer, EventType.MOUSE_OVER, () => {\n\t\t\t\t\t\tcompactEntryGroup.forEach(compactEntry => compactEntry.labelContainer.style.backgroundColor = statusBarItemHoverBackground);\n\t\t\t\t\t\tcompactEntry.labelContainer.style.backgroundColor = statusBarItemCompactHoverBackground;\n\t\t\t\t\t}));\n\n\t\t\t\t\tthis.compactEntriesDisposable.value.add(addDisposableListener(compactEntry.labelContainer, EventType.MOUSE_OUT, () => {\n\t\t\t\t\t\tcompactEntryGroup.forEach(compactEntry => compactEntry.labelContainer.style.backgroundColor = '');\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate showContextMenu(e: MouseEvent | GestureEvent): void {\n\t\tEventHelper.stop(e, true);\n\n\t\tconst event = new StandardMouseEvent(getWindow(this.element), e);\n\n\t\tlet actions: IAction[] | undefined = undefined;\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => event,\n\t\t\tgetActions: () => {\n\t\t\t\tactions = this.getContextMenuActions(event);\n\n\t\t\t\treturn actions;\n\t\t\t},\n\t\t\tonHide: () => {\n\t\t\t\tif (actions) {\n\t\t\t\t\tdisposeIfDisposable(actions);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getContextMenuActions(event: StandardMouseEvent): IAction[] {\n\t\tconst actions: IAction[] = [];\n\n\t\t// Provide an action to hide the status bar at last\n\t\tactions.push(toAction({ id: ToggleStatusbarVisibilityAction.ID, label: localize('hideStatusBar', \"Hide Status Bar\"), run: () => this.instantiationService.invokeFunction(accessor => new ToggleStatusbarVisibilityAction().run(accessor)) }));\n\t\tactions.push(new Separator());\n\n\t\t// Show an entry per known status entry\n\t\t// Note: even though entries have an identifier, there can be multiple entries\n\t\t// having the same identifier (e.g. from extensions). So we make sure to only\n\t\t// show a single entry per identifier we handled.\n\t\tconst handledEntries = new Set<string>();\n\t\tfor (const entry of this.viewModel.entries) {\n\t\t\tif (!handledEntries.has(entry.id)) {\n\t\t\t\tactions.push(new ToggleStatusbarEntryVisibilityAction(entry.id, entry.name, this.viewModel));\n\t\t\t\thandledEntries.add(entry.id);\n\t\t\t}\n\t\t}\n\n\t\t// Figure out if mouse is over an entry\n\t\tlet statusEntryUnderMouse: IStatusbarViewModelEntry | undefined = undefined;\n\t\tfor (let element: HTMLElement | null = event.target; element; element = element.parentElement) {\n\t\t\tconst entry = this.viewModel.findEntry(element);\n\t\t\tif (entry) {\n\t\t\t\tstatusEntryUnderMouse = entry;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (statusEntryUnderMouse) {\n\t\t\tactions.push(new Separator());\n\t\t\tactions.push(new HideStatusbarEntryAction(statusEntryUnderMouse.id, statusEntryUnderMouse.name, this.viewModel));\n\t\t}\n\n\t\treturn actions;\n\t}\n\n\toverride updateStyles(): void {\n\t\tsuper.updateStyles();\n\n\t\tconst container = assertIsDefined(this.getContainer());\n\t\tconst styleOverride: IStatusbarStyleOverride | undefined = [...this.styleOverrides].sort((a, b) => a.priority - b.priority)[0];\n\n\t\t// Background / foreground colors\n\t\tconst backgroundColor = this.getColor(styleOverride?.background ?? (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? STATUS_BAR_BACKGROUND : STATUS_BAR_NO_FOLDER_BACKGROUND)) || '';\n\t\tcontainer.style.backgroundColor = backgroundColor;\n\t\tconst foregroundColor = this.getColor(styleOverride?.foreground ?? (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? STATUS_BAR_FOREGROUND : STATUS_BAR_NO_FOLDER_FOREGROUND)) || '';\n\t\tcontainer.style.color = foregroundColor;\n\t\tconst itemBorderColor = this.getColor(STATUS_BAR_ITEM_FOCUS_BORDER);\n\n\t\t// Border color\n\t\tconst borderColor = this.getColor(styleOverride?.border ?? (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? STATUS_BAR_BORDER : STATUS_BAR_NO_FOLDER_BORDER)) || this.getColor(contrastBorder);\n\t\tif (borderColor) {\n\t\t\tcontainer.classList.add('status-border-top');\n\t\t\tcontainer.style.setProperty('--status-border-top-color', borderColor);\n\t\t} else {\n\t\t\tcontainer.classList.remove('status-border-top');\n\t\t\tcontainer.style.removeProperty('--status-border-top-color');\n\t\t}\n\n\t\t// Colors and focus outlines via dynamic stylesheet\n\n\t\tconst statusBarFocusColor = this.getColor(STATUS_BAR_FOCUS_BORDER);\n\n\t\tif (!this.styleElement) {\n\t\t\tthis.styleElement = createStyleSheet(container);\n\t\t}\n\n\t\tthis.styleElement.textContent = `\n\n\t\t\t\t/* Status bar focus outline */\n\t\t\t\t.monaco-workbench .part.statusbar:focus {\n\t\t\t\t\toutline-color: ${statusBarFocusColor};\n\t\t\t\t}\n\n\t\t\t\t/* Status bar item focus outline */\n\t\t\t\t.monaco-workbench .part.statusbar > .items-container > .statusbar-item a:focus-visible {\n\t\t\t\t\toutline: 1px solid ${this.getColor(activeContrastBorder) ?? itemBorderColor};\n\t\t\t\t\toutline-offset: ${borderColor ? '-2px' : '-1px'};\n\t\t\t\t}\n\n\t\t\t\t/* Notification Beak */\n\t\t\t\t.monaco-workbench .part.statusbar > .items-container > .statusbar-item.has-beak > .status-bar-item-beak-container:before {\n\t\t\t\t\tborder-bottom-color: ${backgroundColor};\n\t\t\t\t}\n\t\t\t`;\n\t}\n\n\toverride layout(width: number, height: number, top: number, left: number): void {\n\t\tsuper.layout(width, height, top, left);\n\t\tsuper.layoutContents(width, height);\n\t}\n\n\toverrideStyle(style: IStatusbarStyleOverride): IDisposable {\n\t\tthis.styleOverrides.add(style);\n\t\tthis.updateStyles();\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.styleOverrides.delete(style);\n\t\t\tthis.updateStyles();\n\t\t});\n\t}\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\ttype: Parts.STATUSBAR_PART\n\t\t};\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport class MainStatusbarPart extends StatusbarPart {\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper(Parts.STATUSBAR_PART, instantiationService, themeService, contextService, storageService, layoutService, contextMenuService, contextKeyService);\n\t}\n}\n\nexport interface IAuxiliaryStatusbarPart extends IStatusbarEntryContainer, IView {\n\treadonly container: HTMLElement;\n\treadonly height: number;\n}\n\nexport class AuxiliaryStatusbarPart extends StatusbarPart implements IAuxiliaryStatusbarPart {\n\n\tprivate static COUNTER = 1;\n\n\treadonly height = StatusbarPart.HEIGHT;\n\n\tconstructor(\n\t\treadonly container: HTMLElement,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tconst id = AuxiliaryStatusbarPart.COUNTER++;\n\t\tsuper(`workbench.parts.auxiliaryStatus.${id}`, instantiationService, themeService, contextService, storageService, layoutService, contextMenuService, contextKeyService);\n\t}\n}\n\nexport class StatusbarService extends MultiWindowParts<StatusbarPart> implements IStatusbarService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly mainPart = this._register(this.instantiationService.createInstance(MainStatusbarPart));\n\n\tprivate readonly _onDidCreateAuxiliaryStatusbarPart = this._register(new Emitter<AuxiliaryStatusbarPart>());\n\tprivate readonly onDidCreateAuxiliaryStatusbarPart = this._onDidCreateAuxiliaryStatusbarPart.event;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IThemeService themeService: IThemeService\n\t) {\n\t\tsuper('workbench.statusBarService', themeService, storageService);\n\n\t\tthis._register(this.registerPart(this.mainPart));\n\t}\n\n\t//#region Auxiliary Statusbar Parts\n\n\tcreateAuxiliaryStatusbarPart(container: HTMLElement): IAuxiliaryStatusbarPart {\n\n\t\t// Container\n\t\tconst statusbarPartContainer = document.createElement('footer');\n\t\tstatusbarPartContainer.classList.add('part', 'statusbar');\n\t\tstatusbarPartContainer.setAttribute('role', 'status');\n\t\tstatusbarPartContainer.style.position = 'relative';\n\t\tstatusbarPartContainer.setAttribute('aria-live', 'off');\n\t\tstatusbarPartContainer.setAttribute('tabindex', '0');\n\t\tcontainer.appendChild(statusbarPartContainer);\n\n\t\t// Statusbar Part\n\t\tconst statusbarPart = this.instantiationService.createInstance(AuxiliaryStatusbarPart, statusbarPartContainer);\n\t\tconst disposable = this.registerPart(statusbarPart);\n\n\t\tstatusbarPart.create(statusbarPartContainer);\n\n\t\tEvent.once(statusbarPart.onWillDispose)(() => disposable.dispose());\n\n\t\t// Emit internal event\n\t\tthis._onDidCreateAuxiliaryStatusbarPart.fire(statusbarPart);\n\n\t\treturn statusbarPart;\n\t}\n\n\tcreateScoped(statusbarEntryContainer: IStatusbarEntryContainer, disposables: DisposableStore): IStatusbarService {\n\t\treturn disposables.add(this.instantiationService.createInstance(ScopedStatusbarService, statusbarEntryContainer));\n\t}\n\n\t//#endregion\n\n\t//#region Service Implementation\n\n\treadonly onDidChangeEntryVisibility = this.mainPart.onDidChangeEntryVisibility;\n\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priorityOrLocation: number | IStatusbarEntryLocation | IStatusbarEntryPriority = 0): IStatusbarEntryAccessor {\n\t\tif (entry.showInAllWindows) {\n\t\t\treturn this.doAddEntryToAllWindows(entry, id, alignment, priorityOrLocation);\n\t\t}\n\n\t\treturn this.mainPart.addEntry(entry, id, alignment, priorityOrLocation);\n\t}\n\n\tprivate doAddEntryToAllWindows(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priorityOrLocation: number | IStatusbarEntryLocation | IStatusbarEntryPriority = 0): IStatusbarEntryAccessor {\n\t\tconst entryDisposables = new DisposableStore();\n\n\t\tconst accessors = new Set<IStatusbarEntryAccessor>();\n\n\t\tfunction addEntry(part: StatusbarPart | AuxiliaryStatusbarPart): void {\n\t\t\tconst partDisposables = new DisposableStore();\n\t\t\tpartDisposables.add(part.onWillDispose(() => partDisposables.dispose()));\n\n\t\t\tconst accessor = partDisposables.add(part.addEntry(entry, id, alignment, priorityOrLocation));\n\t\t\taccessors.add(accessor);\n\t\t\tpartDisposables.add(toDisposable(() => accessors.delete(accessor)));\n\n\t\t\tentryDisposables.add(partDisposables);\n\t\t\tpartDisposables.add(toDisposable(() => entryDisposables.delete(partDisposables)));\n\t\t}\n\n\t\tfor (const part of this.parts) {\n\t\t\taddEntry(part);\n\t\t}\n\n\t\tentryDisposables.add(this.onDidCreateAuxiliaryStatusbarPart(part => addEntry(part)));\n\n\t\treturn {\n\t\t\tupdate: (entry: IStatusbarEntry) => {\n\t\t\t\tfor (const update of accessors) {\n\t\t\t\t\tupdate.update(entry);\n\t\t\t\t}\n\t\t\t},\n\t\t\tdispose: () => entryDisposables.dispose()\n\t\t};\n\t}\n\n\tisEntryVisible(id: string): boolean {\n\t\treturn this.mainPart.isEntryVisible(id);\n\t}\n\n\tupdateEntryVisibility(id: string, visible: boolean): void {\n\t\tfor (const part of this.parts) {\n\t\t\tpart.updateEntryVisibility(id, visible);\n\t\t}\n\t}\n\n\tfocus(preserveEntryFocus?: boolean): void {\n\t\tthis.activePart.focus(preserveEntryFocus);\n\t}\n\n\tfocusNextEntry(): void {\n\t\tthis.activePart.focusNextEntry();\n\t}\n\n\tfocusPreviousEntry(): void {\n\t\tthis.activePart.focusPreviousEntry();\n\t}\n\n\tisEntryFocused(): boolean {\n\t\treturn this.activePart.isEntryFocused();\n\t}\n\n\toverrideStyle(style: IStatusbarStyleOverride): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\tfor (const part of this.parts) {\n\t\t\tdisposables.add(part.overrideStyle(style));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\t//#endregion\n}\n\nexport class ScopedStatusbarService extends Disposable implements IStatusbarService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\tprivate readonly statusbarEntryContainer: IStatusbarEntryContainer,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService\n\t) {\n\t\tsuper();\n\t}\n\n\tcreateAuxiliaryStatusbarPart(container: HTMLElement): IAuxiliaryStatusbarPart {\n\t\treturn this.statusbarService.createAuxiliaryStatusbarPart(container);\n\t}\n\n\tcreateScoped(statusbarEntryContainer: IStatusbarEntryContainer, disposables: DisposableStore): IStatusbarService {\n\t\treturn this.statusbarService.createScoped(statusbarEntryContainer, disposables);\n\t}\n\n\tgetPart(): IStatusbarEntryContainer {\n\t\treturn this.statusbarEntryContainer;\n\t}\n\n\treadonly onDidChangeEntryVisibility = this.statusbarEntryContainer.onDidChangeEntryVisibility;\n\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priorityOrLocation: number | IStatusbarEntryLocation | IStatusbarEntryPriority = 0): IStatusbarEntryAccessor {\n\t\treturn this.statusbarEntryContainer.addEntry(entry, id, alignment, priorityOrLocation);\n\t}\n\n\tisEntryVisible(id: string): boolean {\n\t\treturn this.statusbarEntryContainer.isEntryVisible(id);\n\t}\n\n\tupdateEntryVisibility(id: string, visible: boolean): void {\n\t\tthis.statusbarEntryContainer.updateEntryVisibility(id, visible);\n\t}\n\n\tfocus(preserveEntryFocus?: boolean): void {\n\t\tthis.statusbarEntryContainer.focus(preserveEntryFocus);\n\t}\n\n\tfocusNextEntry(): void {\n\t\tthis.statusbarEntryContainer.focusNextEntry();\n\t}\n\n\tfocusPreviousEntry(): void {\n\t\tthis.statusbarEntryContainer.focusPreviousEntry();\n\t}\n\n\tisEntryFocused(): boolean {\n\t\treturn this.statusbarEntryContainer.isEntryFocused();\n\t}\n\n\toverrideStyle(style: IStatusbarStyleOverride): IDisposable {\n\t\treturn this.statusbarEntryContainer.overrideStyle(style);\n\t}\n}\n\nregisterSingleton(IStatusbarService, StatusbarService, InstantiationType.Eager);\n"],
  "mappings": "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",
  "names": ["entry", "needsFullRefresh", "compactEntry"]
}
