import{getActiveWindow as m}from"../../../../base/browser/dom.js";import{Action as u}from"../../../../base/common/actions.js";import{KeyCode as i}from"../../../../base/common/keyCodes.js";import{localize as h,localize2 as f}from"../../../../nls.js";import{Categories as g}from"../../../../platform/action/common/actionCommonCategories.js";import{Action2 as l,registerAction2 as b}from"../../../../platform/actions/common/actions.js";import{KeybindingWeight as s,KeybindingsRegistry as o}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{StatusBarFocused as n}from"../../../common/contextkeys.js";import{IEditorService as v}from"../../../services/editor/common/editorService.js";import{IWorkbenchLayoutService as y,Parts as S}from"../../../services/layout/browser/layoutService.js";import{IStatusbarService as c}from"../../../services/statusbar/browser/statusbar.js";class F extends u{constructor(t,a,d){super(t,a,void 0,!0);this.model=d;this.checked=!d.isHidden(t)}async run(){this.model.isHidden(this.id)?this.model.show(this.id):this.model.hide(this.id)}}class H extends u{constructor(t,a,d){super(t,h("hide","Hide '{0}'",a),void 0,!0);this.model=d}async run(){this.model.hide(this.id)}}o.registerCommandAndKeybindingRule({id:"workbench.statusBar.focusPrevious",weight:s.WorkbenchContrib,primary:i.LeftArrow,secondary:[i.UpArrow],when:n,handler:r=>{r.get(c).focusPreviousEntry()}}),o.registerCommandAndKeybindingRule({id:"workbench.statusBar.focusNext",weight:s.WorkbenchContrib,primary:i.RightArrow,secondary:[i.DownArrow],when:n,handler:r=>{r.get(c).focusNextEntry()}}),o.registerCommandAndKeybindingRule({id:"workbench.statusBar.focusFirst",weight:s.WorkbenchContrib,primary:i.Home,when:n,handler:r=>{const e=r.get(c);e.focus(!1),e.focusNextEntry()}}),o.registerCommandAndKeybindingRule({id:"workbench.statusBar.focusLast",weight:s.WorkbenchContrib,primary:i.End,when:n,handler:r=>{const e=r.get(c);e.focus(!1),e.focusPreviousEntry()}}),o.registerCommandAndKeybindingRule({id:"workbench.statusBar.clearFocus",weight:s.WorkbenchContrib,primary:i.Escape,when:n,handler:r=>{const e=r.get(c),t=r.get(v);e.isEntryFocused()?e.focus(!1):t.activeEditorPane&&t.activeEditorPane.focus()}});class p extends l{constructor(){super({id:"workbench.action.focusStatusBar",title:f("focusStatusBar","Focus Status Bar"),category:g.View,f1:!0})}async run(e){e.get(y).focusPart(S.STATUSBAR_PART,m())}}b(p);export{H as HideStatusbarEntryAction,F as ToggleStatusbarEntryVisibilityAction};
