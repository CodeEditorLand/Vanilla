{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/statusbar/statusbarModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { isStatusbarEntryLocation, IStatusbarEntryPriority, StatusbarAlignment } from '../../../services/statusbar/browser/statusbar.js';\nimport { hide, show, isAncestorOfActiveElement } from '../../../../base/browser/dom.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { Emitter } from '../../../../base/common/event.js';\n\nexport interface IStatusbarViewModelEntry {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly hasCommand: boolean;\n\treadonly alignment: StatusbarAlignment;\n\treadonly priority: IStatusbarEntryPriority;\n\treadonly container: HTMLElement;\n\treadonly labelContainer: HTMLElement;\n}\n\nexport class StatusbarViewModel extends Disposable {\n\n\tprivate static readonly HIDDEN_ENTRIES_KEY = 'workbench.statusbar.hidden';\n\n\tprivate readonly _onDidChangeEntryVisibility = this._register(new Emitter<{ id: string; visible: boolean }>());\n\treadonly onDidChangeEntryVisibility = this._onDidChangeEntryVisibility.event;\n\n\tprivate _entries: IStatusbarViewModelEntry[] = []; // Intentionally not using a map here since multiple entries can have the same ID\n\tget entries(): IStatusbarViewModelEntry[] { return this._entries.slice(0); }\n\n\tprivate _lastFocusedEntry: IStatusbarViewModelEntry | undefined;\n\tget lastFocusedEntry(): IStatusbarViewModelEntry | undefined {\n\t\treturn this._lastFocusedEntry && !this.isHidden(this._lastFocusedEntry.id) ? this._lastFocusedEntry : undefined;\n\t}\n\n\tprivate hidden = new Set<string>();\n\n\tconstructor(private readonly storageService: IStorageService) {\n\t\tsuper();\n\n\t\tthis.restoreState();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate restoreState(): void {\n\t\tconst hiddenRaw = this.storageService.get(StatusbarViewModel.HIDDEN_ENTRIES_KEY, StorageScope.PROFILE);\n\t\tif (hiddenRaw) {\n\t\t\ttry {\n\t\t\t\tthis.hidden = new Set(JSON.parse(hiddenRaw));\n\t\t\t} catch (error) {\n\t\t\t\t// ignore parsing errors\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, StatusbarViewModel.HIDDEN_ENTRIES_KEY, this._register(new DisposableStore()))(() => this.onDidStorageValueChange()));\n\t}\n\n\tprivate onDidStorageValueChange(): void {\n\n\t\t// Keep current hidden entries\n\t\tconst currentlyHidden = new Set(this.hidden);\n\n\t\t// Load latest state of hidden entries\n\t\tthis.hidden.clear();\n\t\tthis.restoreState();\n\n\t\tconst changed = new Set<string>();\n\n\t\t// Check for each entry that is now visible\n\t\tfor (const id of currentlyHidden) {\n\t\t\tif (!this.hidden.has(id)) {\n\t\t\t\tchanged.add(id);\n\t\t\t}\n\t\t}\n\n\t\t// Check for each entry that is now hidden\n\t\tfor (const id of this.hidden) {\n\t\t\tif (!currentlyHidden.has(id)) {\n\t\t\t\tchanged.add(id);\n\t\t\t}\n\t\t}\n\n\t\t// Update visibility for entries have changed\n\t\tif (changed.size > 0) {\n\t\t\tfor (const entry of this._entries) {\n\t\t\t\tif (changed.has(entry.id)) {\n\t\t\t\t\tthis.updateVisibility(entry.id, true);\n\n\t\t\t\t\tchanged.delete(entry.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(entry: IStatusbarViewModelEntry): void {\n\n\t\t// Add to set of entries\n\t\tthis._entries.push(entry);\n\n\t\t// Update visibility directly\n\t\tthis.updateVisibility(entry, false);\n\n\t\t// Sort according to priority\n\t\tthis.sort();\n\n\t\t// Mark first/last visible entry\n\t\tthis.markFirstLastVisibleEntry();\n\t}\n\n\tremove(entry: IStatusbarViewModelEntry): void {\n\t\tconst index = this._entries.indexOf(entry);\n\t\tif (index >= 0) {\n\n\t\t\t// Remove from entries\n\t\t\tthis._entries.splice(index, 1);\n\n\t\t\t// Re-sort entries if this one was used\n\t\t\t// as reference from other entries\n\t\t\tif (this._entries.some(otherEntry => isStatusbarEntryLocation(otherEntry.priority.primary) && otherEntry.priority.primary.id === entry.id)) {\n\t\t\t\tthis.sort();\n\t\t\t}\n\n\t\t\t// Mark first/last visible entry\n\t\t\tthis.markFirstLastVisibleEntry();\n\t\t}\n\t}\n\n\tisHidden(id: string): boolean {\n\t\treturn this.hidden.has(id);\n\t}\n\n\thide(id: string): void {\n\t\tif (!this.hidden.has(id)) {\n\t\t\tthis.hidden.add(id);\n\n\t\t\tthis.updateVisibility(id, true);\n\n\t\t\tthis.saveState();\n\t\t}\n\t}\n\n\tshow(id: string): void {\n\t\tif (this.hidden.has(id)) {\n\t\t\tthis.hidden.delete(id);\n\n\t\t\tthis.updateVisibility(id, true);\n\n\t\t\tthis.saveState();\n\t\t}\n\t}\n\n\tfindEntry(container: HTMLElement): IStatusbarViewModelEntry | undefined {\n\t\treturn this._entries.find(entry => entry.container === container);\n\t}\n\n\tgetEntries(alignment: StatusbarAlignment): IStatusbarViewModelEntry[] {\n\t\treturn this._entries.filter(entry => entry.alignment === alignment);\n\t}\n\n\tfocusNextEntry(): void {\n\t\tthis.focusEntry(+1, 0);\n\t}\n\n\tfocusPreviousEntry(): void {\n\t\tthis.focusEntry(-1, this.entries.length - 1);\n\t}\n\n\tisEntryFocused(): boolean {\n\t\treturn !!this.getFocusedEntry();\n\t}\n\n\tprivate getFocusedEntry(): IStatusbarViewModelEntry | undefined {\n\t\treturn this._entries.find(entry => isAncestorOfActiveElement(entry.container));\n\t}\n\n\tprivate focusEntry(delta: number, restartPosition: number): void {\n\n\t\tconst getVisibleEntry = (start: number) => {\n\t\t\tlet indexToFocus = start;\n\t\t\tlet entry = (indexToFocus >= 0 && indexToFocus < this._entries.length) ? this._entries[indexToFocus] : undefined;\n\t\t\twhile (entry && this.isHidden(entry.id)) {\n\t\t\t\tindexToFocus += delta;\n\t\t\t\tentry = (indexToFocus >= 0 && indexToFocus < this._entries.length) ? this._entries[indexToFocus] : undefined;\n\t\t\t}\n\n\t\t\treturn entry;\n\t\t};\n\n\t\tconst focused = this.getFocusedEntry();\n\t\tif (focused) {\n\t\t\tconst entry = getVisibleEntry(this._entries.indexOf(focused) + delta);\n\t\t\tif (entry) {\n\t\t\t\tthis._lastFocusedEntry = entry;\n\n\t\t\t\tentry.labelContainer.focus();\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst entry = getVisibleEntry(restartPosition);\n\t\tif (entry) {\n\t\t\tthis._lastFocusedEntry = entry;\n\t\t\tentry.labelContainer.focus();\n\t\t}\n\t}\n\n\tprivate updateVisibility(id: string, trigger: boolean): void;\n\tprivate updateVisibility(entry: IStatusbarViewModelEntry, trigger: boolean): void;\n\tprivate updateVisibility(arg1: string | IStatusbarViewModelEntry, trigger: boolean): void {\n\n\t\t// By identifier\n\t\tif (typeof arg1 === 'string') {\n\t\t\tconst id = arg1;\n\n\t\t\tfor (const entry of this._entries) {\n\t\t\t\tif (entry.id === id) {\n\t\t\t\t\tthis.updateVisibility(entry, trigger);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// By entry\n\t\telse {\n\t\t\tconst entry = arg1;\n\t\t\tconst isHidden = this.isHidden(entry.id);\n\n\t\t\t// Use CSS to show/hide item container\n\t\t\tif (isHidden) {\n\t\t\t\thide(entry.container);\n\t\t\t} else {\n\t\t\t\tshow(entry.container);\n\t\t\t}\n\n\t\t\tif (trigger) {\n\t\t\t\tthis._onDidChangeEntryVisibility.fire({ id: entry.id, visible: !isHidden });\n\t\t\t}\n\n\t\t\t// Mark first/last visible entry\n\t\t\tthis.markFirstLastVisibleEntry();\n\t\t}\n\t}\n\n\tprivate saveState(): void {\n\t\tif (this.hidden.size > 0) {\n\t\t\tthis.storageService.store(StatusbarViewModel.HIDDEN_ENTRIES_KEY, JSON.stringify(Array.from(this.hidden.values())), StorageScope.PROFILE, StorageTarget.USER);\n\t\t} else {\n\t\t\tthis.storageService.remove(StatusbarViewModel.HIDDEN_ENTRIES_KEY, StorageScope.PROFILE);\n\t\t}\n\t}\n\n\tprivate sort(): void {\n\n\t\t// Split up entries into 2 buckets:\n\t\t// - those with `priority: number` that can be compared\n\t\t// - those with `priority: string` that must be sorted\n\t\t//   relative to another entry if possible\n\t\tconst mapEntryWithNumberedPriorityToIndex = new Map<IStatusbarViewModelEntry, number /* priority of entry as number */>();\n\t\tconst mapEntryWithRelativePriority = new Map<string /* id of entry to position after */, Map<string, IStatusbarViewModelEntry>>();\n\t\tfor (let i = 0; i < this._entries.length; i++) {\n\t\t\tconst entry = this._entries[i];\n\t\t\tif (typeof entry.priority.primary === 'number') {\n\t\t\t\tmapEntryWithNumberedPriorityToIndex.set(entry, i);\n\t\t\t} else {\n\t\t\t\tconst referenceEntryId = entry.priority.primary.id;\n\t\t\t\tlet entries = mapEntryWithRelativePriority.get(referenceEntryId);\n\t\t\t\tif (!entries) {\n\n\t\t\t\t\t// It is possible that this entry references another entry\n\t\t\t\t\t// that itself references an entry. In that case, we want\n\t\t\t\t\t// to add it to the entries of the referenced entry.\n\n\t\t\t\t\tfor (const relativeEntries of mapEntryWithRelativePriority.values()) {\n\t\t\t\t\t\tif (relativeEntries.has(referenceEntryId)) {\n\t\t\t\t\t\t\tentries = relativeEntries;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!entries) {\n\t\t\t\t\t\tentries = new Map();\n\t\t\t\t\t\tmapEntryWithRelativePriority.set(referenceEntryId, entries);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tentries.set(entry.id, entry);\n\t\t\t}\n\t\t}\n\n\t\t// Sort the entries with `priority: number` according to that\n\t\tconst sortedEntriesWithNumberedPriority = Array.from(mapEntryWithNumberedPriorityToIndex.keys());\n\t\tsortedEntriesWithNumberedPriority.sort((entryA, entryB) => {\n\t\t\tif (entryA.alignment === entryB.alignment) {\n\n\t\t\t\t// Sort by primary/secondary priority: higher values move towards the left\n\n\t\t\t\tif (entryA.priority.primary !== entryB.priority.primary) {\n\t\t\t\t\treturn Number(entryB.priority.primary) - Number(entryA.priority.primary);\n\t\t\t\t}\n\n\t\t\t\tif (entryA.priority.secondary !== entryB.priority.secondary) {\n\t\t\t\t\treturn entryB.priority.secondary - entryA.priority.secondary;\n\t\t\t\t}\n\n\t\t\t\t// otherwise maintain stable order (both values known to be in map)\n\t\t\t\treturn mapEntryWithNumberedPriorityToIndex.get(entryA)! - mapEntryWithNumberedPriorityToIndex.get(entryB)!;\n\t\t\t}\n\n\t\t\tif (entryA.alignment === StatusbarAlignment.LEFT) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tif (entryB.alignment === StatusbarAlignment.LEFT) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t});\n\n\t\tlet sortedEntries: IStatusbarViewModelEntry[];\n\n\t\t// Entries with location: sort in accordingly\n\t\tif (mapEntryWithRelativePriority.size > 0) {\n\t\t\tsortedEntries = [];\n\n\t\t\tfor (const entry of sortedEntriesWithNumberedPriority) {\n\t\t\t\tconst relativeEntriesMap = mapEntryWithRelativePriority.get(entry.id);\n\t\t\t\tconst relativeEntries = relativeEntriesMap ? Array.from(relativeEntriesMap.values()) : undefined;\n\n\t\t\t\t// Fill relative entries to LEFT\n\t\t\t\tif (relativeEntries) {\n\t\t\t\t\tsortedEntries.push(...relativeEntries.filter(entry => isStatusbarEntryLocation(entry.priority.primary) && entry.priority.primary.alignment === StatusbarAlignment.LEFT));\n\t\t\t\t}\n\n\t\t\t\t// Fill referenced entry\n\t\t\t\tsortedEntries.push(entry);\n\n\t\t\t\t// Fill relative entries to RIGHT\n\t\t\t\tif (relativeEntries) {\n\t\t\t\t\tsortedEntries.push(...relativeEntries.filter(entry => isStatusbarEntryLocation(entry.priority.primary) && entry.priority.primary.alignment === StatusbarAlignment.RIGHT));\n\t\t\t\t}\n\n\t\t\t\t// Delete from map to mark as handled\n\t\t\t\tmapEntryWithRelativePriority.delete(entry.id);\n\t\t\t}\n\n\t\t\t// Finally, just append all entries that reference another entry\n\t\t\t// that does not exist to the end of the list\n\t\t\tfor (const [, entries] of mapEntryWithRelativePriority) {\n\t\t\t\tsortedEntries.push(...entries.values());\n\t\t\t}\n\t\t}\n\n\t\t// No entries with relative priority: take sorted entries as is\n\t\telse {\n\t\t\tsortedEntries = sortedEntriesWithNumberedPriority;\n\t\t}\n\n\t\t// Take over as new truth of entries\n\t\tthis._entries = sortedEntries;\n\t}\n\n\tprivate markFirstLastVisibleEntry(): void {\n\t\tthis.doMarkFirstLastVisibleStatusbarItem(this.getEntries(StatusbarAlignment.LEFT));\n\t\tthis.doMarkFirstLastVisibleStatusbarItem(this.getEntries(StatusbarAlignment.RIGHT));\n\t}\n\n\tprivate doMarkFirstLastVisibleStatusbarItem(entries: IStatusbarViewModelEntry[]): void {\n\t\tlet firstVisibleItem: IStatusbarViewModelEntry | undefined;\n\t\tlet lastVisibleItem: IStatusbarViewModelEntry | undefined;\n\n\t\tfor (const entry of entries) {\n\n\t\t\t// Clear previous first\n\t\t\tentry.container.classList.remove('first-visible-item', 'last-visible-item');\n\n\t\t\tconst isVisible = !this.isHidden(entry.id);\n\t\t\tif (isVisible) {\n\t\t\t\tif (!firstVisibleItem) {\n\t\t\t\t\tfirstVisibleItem = entry;\n\t\t\t\t}\n\n\t\t\t\tlastVisibleItem = entry;\n\t\t\t}\n\t\t}\n\n\t\t// Mark: first visible item\n\t\tfirstVisibleItem?.container.classList.add('first-visible-item');\n\n\t\t// Mark: last visible item\n\t\tlastVisibleItem?.container.classList.add('last-visible-item');\n\t}\n}\n"],
  "mappings": "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",
  "names": ["entry"]
}
