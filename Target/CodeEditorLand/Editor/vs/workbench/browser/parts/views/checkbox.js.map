{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/views/checkbox.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from \"../../../../base/browser/dom.js\";\nimport type { IManagedHover } from \"../../../../base/browser/ui/hover/hover.js\";\nimport type { IHoverDelegate } from \"../../../../base/browser/ui/hover/hoverDelegate.js\";\nimport { Toggle } from \"../../../../base/browser/ui/toggle/toggle.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { IHoverService } from \"../../../../platform/hover/browser/hover.js\";\nimport { defaultToggleStyles } from \"../../../../platform/theme/browser/defaultStyles.js\";\nimport type {\n\tITreeItem,\n\tITreeItemCheckboxState,\n} from \"../../../common/views.js\";\n\nexport class CheckboxStateHandler extends Disposable {\n\tprivate readonly _onDidChangeCheckboxState = this._register(\n\t\tnew Emitter<ITreeItem[]>(),\n\t);\n\treadonly onDidChangeCheckboxState: Event<ITreeItem[]> =\n\t\tthis._onDidChangeCheckboxState.event;\n\n\tpublic setCheckboxState(node: ITreeItem) {\n\t\tthis._onDidChangeCheckboxState.fire([node]);\n\t}\n}\n\nexport class TreeItemCheckbox extends Disposable {\n\tpublic toggle: Toggle | undefined;\n\tprivate checkboxContainer: HTMLDivElement;\n\tpublic isDisposed = false;\n\tprivate hover: IManagedHover | undefined;\n\n\tpublic static readonly checkboxClass =\n\t\t\"custom-view-tree-node-item-checkbox\";\n\n\tprivate readonly _onDidChangeState = new Emitter<boolean>();\n\treadonly onDidChangeState: Event<boolean> = this._onDidChangeState.event;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate checkboxStateHandler: CheckboxStateHandler,\n\t\tprivate readonly hoverDelegate: IHoverDelegate,\n\t\tprivate readonly hoverService: IHoverService,\n\t) {\n\t\tsuper();\n\t\tthis.checkboxContainer = <HTMLDivElement>container;\n\t}\n\n\tpublic render(node: ITreeItem) {\n\t\tif (node.checkbox) {\n\t\t\tif (this.toggle) {\n\t\t\t\tthis.toggle.checked = node.checkbox.isChecked;\n\t\t\t\tthis.toggle.setIcon(\n\t\t\t\t\tthis.toggle.checked ? Codicon.check : undefined,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.createCheckbox(node);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createCheckbox(node: ITreeItem) {\n\t\tif (node.checkbox) {\n\t\t\tthis.toggle = new Toggle({\n\t\t\t\tisChecked: node.checkbox.isChecked,\n\t\t\t\ttitle: \"\",\n\t\t\t\ticon: node.checkbox.isChecked ? Codicon.check : undefined,\n\t\t\t\t...defaultToggleStyles,\n\t\t\t});\n\t\t\tthis.setHover(node.checkbox);\n\t\t\tthis.setAccessibilityInformation(node.checkbox);\n\t\t\tthis.toggle.domNode.classList.add(TreeItemCheckbox.checkboxClass);\n\t\t\tthis.toggle.domNode.tabIndex = 1;\n\t\t\tDOM.append(this.checkboxContainer, this.toggle.domNode);\n\t\t\tthis.registerListener(node);\n\t\t}\n\t}\n\n\tprivate registerListener(node: ITreeItem) {\n\t\tif (this.toggle) {\n\t\t\tthis._register({ dispose: () => this.removeCheckbox() });\n\t\t\tthis._register(this.toggle);\n\t\t\tthis._register(\n\t\t\t\tthis.toggle.onChange(() => {\n\t\t\t\t\tthis.setCheckbox(node);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate setHover(checkbox: ITreeItemCheckboxState) {\n\t\tif (this.toggle) {\n\t\t\tif (this.hover) {\n\t\t\t\tthis.hover.update(checkbox.tooltip);\n\t\t\t} else {\n\t\t\t\tthis.hover = this._register(\n\t\t\t\t\tthis.hoverService.setupManagedHover(\n\t\t\t\t\t\tthis.hoverDelegate,\n\t\t\t\t\t\tthis.toggle.domNode,\n\t\t\t\t\t\tthis.checkboxHoverContent(checkbox),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setCheckbox(node: ITreeItem) {\n\t\tif (this.toggle && node.checkbox) {\n\t\t\tnode.checkbox.isChecked = this.toggle.checked;\n\t\t\tthis.toggle.setIcon(\n\t\t\t\tthis.toggle.checked ? Codicon.check : undefined,\n\t\t\t);\n\t\t\tthis.setHover(node.checkbox);\n\n\t\t\tthis.setAccessibilityInformation(node.checkbox);\n\t\t\tthis.checkboxStateHandler.setCheckboxState(node);\n\t\t}\n\t}\n\n\tprivate checkboxHoverContent(checkbox: ITreeItemCheckboxState): string {\n\t\treturn checkbox.tooltip\n\t\t\t? checkbox.tooltip\n\t\t\t: checkbox.isChecked\n\t\t\t\t? localize(\"checked\", \"Checked\")\n\t\t\t\t: localize(\"unchecked\", \"Unchecked\");\n\t}\n\n\tprivate setAccessibilityInformation(checkbox: ITreeItemCheckboxState) {\n\t\tif (this.toggle && checkbox.accessibilityInformation) {\n\t\t\tthis.toggle.domNode.ariaLabel =\n\t\t\t\tcheckbox.accessibilityInformation.label;\n\t\t\tif (checkbox.accessibilityInformation.role) {\n\t\t\t\tthis.toggle.domNode.role =\n\t\t\t\t\tcheckbox.accessibilityInformation.role;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeCheckbox() {\n\t\tconst children = this.checkboxContainer.children;\n\t\tfor (const child of children) {\n\t\t\tchild.remove();\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
