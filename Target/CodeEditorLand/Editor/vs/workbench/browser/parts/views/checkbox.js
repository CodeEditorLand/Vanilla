import*as a from"../../../../base/browser/dom.js";import"../../../../base/browser/ui/hover/hoverDelegate.js";import{Toggle as n}from"../../../../base/browser/ui/toggle/toggle.js";import{Codicon as t}from"../../../../base/common/codicons.js";import{Emitter as r}from"../../../../base/common/event.js";import{Disposable as s}from"../../../../base/common/lifecycle.js";import{localize as h}from"../../../../nls.js";import{defaultToggleStyles as l}from"../../../../platform/theme/browser/defaultStyles.js";import"../../../common/views.js";class y extends s{_onDidChangeCheckboxState=this._register(new r);onDidChangeCheckboxState=this._onDidChangeCheckboxState.event;setCheckboxState(o){this._onDidChangeCheckboxState.fire([o])}}class c extends s{constructor(e,i,d,m){super();this.checkboxStateHandler=i;this.hoverDelegate=d;this.hoverService=m;this.checkboxContainer=e}toggle;checkboxContainer;isDisposed=!1;hover;static checkboxClass="custom-view-tree-node-item-checkbox";_onDidChangeState=new r;onDidChangeState=this._onDidChangeState.event;render(e){e.checkbox&&(this.toggle?(this.toggle.checked=e.checkbox.isChecked,this.toggle.setIcon(this.toggle.checked?t.check:void 0)):this.createCheckbox(e))}createCheckbox(e){e.checkbox&&(this.toggle=new n({isChecked:e.checkbox.isChecked,title:"",icon:e.checkbox.isChecked?t.check:void 0,...l}),this.setHover(e.checkbox),this.setAccessibilityInformation(e.checkbox),this.toggle.domNode.classList.add(c.checkboxClass),this.toggle.domNode.tabIndex=1,a.append(this.checkboxContainer,this.toggle.domNode),this.registerListener(e))}registerListener(e){this.toggle&&(this._register({dispose:()=>this.removeCheckbox()}),this._register(this.toggle),this._register(this.toggle.onChange(()=>{this.setCheckbox(e)})))}setHover(e){this.toggle&&(this.hover?this.hover.update(e.tooltip):this.hover=this._register(this.hoverService.setupManagedHover(this.hoverDelegate,this.toggle.domNode,this.checkboxHoverContent(e))))}setCheckbox(e){this.toggle&&e.checkbox&&(e.checkbox.isChecked=this.toggle.checked,this.toggle.setIcon(this.toggle.checked?t.check:void 0),this.setHover(e.checkbox),this.setAccessibilityInformation(e.checkbox),this.checkboxStateHandler.setCheckboxState(e))}checkboxHoverContent(e){return e.tooltip?e.tooltip:e.isChecked?h("checked","Checked"):h("unchecked","Unchecked")}setAccessibilityInformation(e){this.toggle&&e.accessibilityInformation&&(this.toggle.domNode.ariaLabel=e.accessibilityInformation.label,e.accessibilityInformation.role&&(this.toggle.domNode.role=e.accessibilityInformation.role))}removeCheckbox(){const e=this.checkboxContainer.children;for(const i of e)i.remove()}}export{y as CheckboxStateHandler,c as TreeItemCheckbox};
