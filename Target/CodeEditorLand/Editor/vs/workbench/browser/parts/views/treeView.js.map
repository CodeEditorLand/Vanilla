{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/views/treeView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DataTransfers, IDragAndDropData } from '../../../../base/browser/dnd.js';\nimport * as DOM from '../../../../base/browser/dom.js';\nimport { renderMarkdownAsPlaintext } from '../../../../base/browser/markdownRenderer.js';\nimport { ActionBar, IActionViewItemProvider } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { ActionViewItem } from '../../../../base/browser/ui/actionbar/actionViewItems.js';\nimport { IHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegate.js';\nimport { IIdentityProvider, IListVirtualDelegate } from '../../../../base/browser/ui/list/list.js';\nimport { ElementsDragAndDropData, ListViewTargetSector } from '../../../../base/browser/ui/list/listView.js';\nimport { IAsyncDataSource, ITreeContextMenuEvent, ITreeDragAndDrop, ITreeDragOverReaction, ITreeNode, ITreeRenderer, TreeDragOverBubble } from '../../../../base/browser/ui/tree/tree.js';\nimport { CollapseAllAction } from '../../../../base/browser/ui/tree/treeDefaults.js';\nimport { ActionRunner, IAction, Separator } from '../../../../base/common/actions.js';\nimport { timeout } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { createMatches, FuzzyScore } from '../../../../base/common/filters.js';\nimport { IMarkdownString, isMarkdownString, MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { basename, dirname } from '../../../../base/common/resources.js';\nimport { isFalsyOrWhitespace } from '../../../../base/common/strings.js';\nimport { isString } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport './media/views.css';\nimport { VSDataTransfer } from '../../../../base/common/dataTransfer.js';\nimport { localize } from '../../../../nls.js';\nimport { createActionViewItem, createAndFillInContextMenuActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { Action2, IMenuService, MenuId, MenuRegistry, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, ContextKeyExpression, IContextKey, IContextKeyChangeEvent, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { FileKind } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { WorkbenchAsyncDataTree } from '../../../../platform/list/browser/listService.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\nimport { FileThemeIcon, FolderThemeIcon, IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { fillEditorsDragData } from '../../dnd.js';\nimport { IResourceLabel, ResourceLabels } from '../../labels.js';\nimport { API_OPEN_DIFF_EDITOR_COMMAND_ID, API_OPEN_EDITOR_COMMAND_ID } from '../editor/editorCommands.js';\nimport { getLocationBasedViewColors, IViewPaneOptions, ViewPane } from './viewPane.js';\nimport { IViewletViewOptions } from './viewsViewlet.js';\nimport { Extensions, ITreeItem, ITreeItemLabel, ITreeView, ITreeViewDataProvider, ITreeViewDescriptor, ITreeViewDragAndDropController, IViewBadge, IViewDescriptorService, IViewsRegistry, ResolvableTreeItem, TreeCommand, TreeItemCollapsibleState, TreeViewItemHandleArg, TreeViewPaneHandleArg, ViewContainer, ViewContainerLocation } from '../../../common/views.js';\nimport { IActivityService, NumberBadge } from '../../../services/activity/common/activity.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IHoverService, WorkbenchHoverDelegate } from '../../../../platform/hover/browser/hover.js';\nimport { CodeDataTransfers, LocalSelectionTransfer } from '../../../../platform/dnd/browser/dnd.js';\nimport { toExternalVSDataTransfer } from '../../../../editor/browser/dnd.js';\nimport { CheckboxStateHandler, TreeItemCheckbox } from './checkbox.js';\nimport { setTimeout0 } from '../../../../base/common/platform.js';\nimport { AriaRole } from '../../../../base/browser/ui/aria/aria.js';\nimport { TelemetryTrustedValue } from '../../../../platform/telemetry/common/telemetryUtils.js';\nimport { ITreeViewsDnDService } from '../../../../editor/common/services/treeViewsDndService.js';\nimport { DraggedTreeItemsIdentifier } from '../../../../editor/common/services/treeViewsDnd.js';\nimport { IMarkdownRenderResult, MarkdownRenderer } from '../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';\nimport type { IManagedHoverTooltipMarkdownString } from '../../../../base/browser/ui/hover/hover.js';\nimport { parseLinkedText } from '../../../../base/common/linkedText.js';\nimport { Button } from '../../../../base/browser/ui/button/button.js';\nimport { defaultButtonStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { IAccessibleViewInformationService } from '../../../services/accessibility/common/accessibleViewInformationService.js';\nimport { Command } from '../../../../editor/common/languages.js';\n\nexport class TreeViewPane extends ViewPane {\n\n\tprotected readonly treeView: ITreeView;\n\tprivate _container: HTMLElement | undefined;\n\tprivate _actionRunner: MultipleSelectionActionRunner;\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IAccessibleViewInformationService accessibleViewService: IAccessibleViewInformationService,\n\t) {\n\t\tsuper({ ...(options as IViewPaneOptions), titleMenuId: MenuId.ViewTitle, donotForwardArgs: false }, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService, accessibleViewService);\n\t\tconst { treeView } = (<ITreeViewDescriptor>Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).getView(options.id));\n\t\tthis.treeView = treeView;\n\t\tthis._register(this.treeView.onDidChangeActions(() => this.updateActions(), this));\n\t\tthis._register(this.treeView.onDidChangeTitle((newTitle) => this.updateTitle(newTitle)));\n\t\tthis._register(this.treeView.onDidChangeDescription((newDescription) => this.updateTitleDescription(newDescription)));\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this._container && this.treeView.container && (this._container === this.treeView.container)) {\n\t\t\t\tthis.treeView.setVisibility(false);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.onDidChangeBodyVisibility(() => this.updateTreeVisibility()));\n\t\tthis._register(this.treeView.onDidChangeWelcomeState(() => this._onDidChangeViewWelcomeState.fire()));\n\t\tif (options.title !== this.treeView.title) {\n\t\t\tthis.updateTitle(this.treeView.title);\n\t\t}\n\t\tif (options.titleDescription !== this.treeView.description) {\n\t\t\tthis.updateTitleDescription(this.treeView.description);\n\t\t}\n\t\tthis._actionRunner = new MultipleSelectionActionRunner(notificationService, () => this.treeView.getSelection());\n\n\t\tthis.updateTreeVisibility();\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis.treeView.focus();\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tthis._container = container;\n\t\tsuper.renderBody(container);\n\t\tthis.renderTreeView(container);\n\t}\n\n\toverride shouldShowWelcome(): boolean {\n\t\treturn ((this.treeView.dataProvider === undefined) || !!this.treeView.dataProvider.isTreeEmpty) && ((this.treeView.message === undefined) || (this.treeView.message === ''));\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.layoutTreeView(height, width);\n\t}\n\n\toverride getOptimalWidth(): number {\n\t\treturn this.treeView.getOptimalWidth();\n\t}\n\n\tprotected renderTreeView(container: HTMLElement): void {\n\t\tthis.treeView.show(container);\n\t}\n\n\tprotected layoutTreeView(height: number, width: number): void {\n\t\tthis.treeView.layout(height, width);\n\t}\n\n\tprivate updateTreeVisibility(): void {\n\t\tthis.treeView.setVisibility(this.isBodyVisible());\n\t}\n\n\toverride getActionRunner() {\n\t\treturn this._actionRunner;\n\t}\n\n\toverride getActionsContext(): TreeViewPaneHandleArg {\n\t\treturn { $treeViewId: this.id, $focusedTreeItem: true, $selectedTreeItems: true };\n\t}\n\n}\n\nclass Root implements ITreeItem {\n\tlabel = { label: 'root' };\n\thandle = '0';\n\tparentHandle: string | undefined = undefined;\n\tcollapsibleState = TreeItemCollapsibleState.Expanded;\n\tchildren: ITreeItem[] | undefined = undefined;\n}\n\nfunction commandPreconditions(commandId: string): ContextKeyExpression | undefined {\n\tconst command = CommandsRegistry.getCommand(commandId);\n\tif (command) {\n\t\tconst commandAction = MenuRegistry.getCommand(command.id);\n\t\treturn commandAction && commandAction.precondition;\n\t}\n\treturn undefined;\n}\n\nfunction isTreeCommandEnabled(treeCommand: TreeCommand | Command, contextKeyService: IContextKeyService): boolean {\n\tconst commandId: string = (treeCommand as TreeCommand).originalId ? (treeCommand as TreeCommand).originalId! : treeCommand.id;\n\tconst precondition = commandPreconditions(commandId);\n\tif (precondition) {\n\t\treturn contextKeyService.contextMatchesRules(precondition);\n\t}\n\n\treturn true;\n}\n\ninterface RenderedMessage { element: HTMLElement; disposables: DisposableStore }\n\nfunction isRenderedMessageValue(messageValue: string | RenderedMessage | undefined): messageValue is RenderedMessage {\n\treturn !!messageValue && typeof messageValue !== 'string' && 'element' in messageValue && 'disposables' in messageValue;\n}\n\nconst noDataProviderMessage = localize('no-dataprovider', \"There is no data provider registered that can provide view data.\");\n\nexport const RawCustomTreeViewContextKey = new RawContextKey<boolean>('customTreeView', false);\n\nclass Tree extends WorkbenchAsyncDataTree<ITreeItem, ITreeItem, FuzzyScore> { }\n\nabstract class AbstractTreeView extends Disposable implements ITreeView {\n\n\tprivate isVisible: boolean = false;\n\tprivate _hasIconForParentNode = false;\n\tprivate _hasIconForLeafNode = false;\n\n\tprivate collapseAllContextKey: RawContextKey<boolean> | undefined;\n\tprivate collapseAllContext: IContextKey<boolean> | undefined;\n\tprivate collapseAllToggleContextKey: RawContextKey<boolean> | undefined;\n\tprivate collapseAllToggleContext: IContextKey<boolean> | undefined;\n\tprivate refreshContextKey: RawContextKey<boolean> | undefined;\n\tprivate refreshContext: IContextKey<boolean> | undefined;\n\n\tprivate focused: boolean = false;\n\tprivate domNode!: HTMLElement;\n\tprivate treeContainer: HTMLElement | undefined;\n\tprivate _messageValue: string | { element: HTMLElement; disposables: DisposableStore } | undefined;\n\tprivate _canSelectMany: boolean = false;\n\tprivate _manuallyManageCheckboxes: boolean = false;\n\tprivate messageElement: HTMLElement | undefined;\n\tprivate tree: Tree | undefined;\n\tprivate treeLabels: ResourceLabels | undefined;\n\tprivate treeViewDnd: CustomTreeViewDragAndDrop | undefined;\n\tprivate _container: HTMLElement | undefined;\n\n\tprivate root: ITreeItem;\n\tprivate markdownRenderer: MarkdownRenderer | undefined;\n\tprivate elementsToRefresh: ITreeItem[] = [];\n\tprivate lastSelection: readonly ITreeItem[] = [];\n\tprivate lastActive: ITreeItem;\n\n\tprivate readonly _onDidExpandItem: Emitter<ITreeItem> = this._register(new Emitter<ITreeItem>());\n\treadonly onDidExpandItem: Event<ITreeItem> = this._onDidExpandItem.event;\n\n\tprivate readonly _onDidCollapseItem: Emitter<ITreeItem> = this._register(new Emitter<ITreeItem>());\n\treadonly onDidCollapseItem: Event<ITreeItem> = this._onDidCollapseItem.event;\n\n\tprivate _onDidChangeSelectionAndFocus: Emitter<{ selection: readonly ITreeItem[]; focus: ITreeItem }> = this._register(new Emitter<{ selection: readonly ITreeItem[]; focus: ITreeItem }>());\n\treadonly onDidChangeSelectionAndFocus: Event<{ selection: readonly ITreeItem[]; focus: ITreeItem }> = this._onDidChangeSelectionAndFocus.event;\n\n\tprivate readonly _onDidChangeVisibility: Emitter<boolean> = this._register(new Emitter<boolean>());\n\treadonly onDidChangeVisibility: Event<boolean> = this._onDidChangeVisibility.event;\n\n\tprivate readonly _onDidChangeActions: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChangeActions: Event<void> = this._onDidChangeActions.event;\n\n\tprivate readonly _onDidChangeWelcomeState: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChangeWelcomeState: Event<void> = this._onDidChangeWelcomeState.event;\n\n\tprivate readonly _onDidChangeTitle: Emitter<string> = this._register(new Emitter<string>());\n\treadonly onDidChangeTitle: Event<string> = this._onDidChangeTitle.event;\n\n\tprivate readonly _onDidChangeDescription: Emitter<string | undefined> = this._register(new Emitter<string | undefined>());\n\treadonly onDidChangeDescription: Event<string | undefined> = this._onDidChangeDescription.event;\n\n\tprivate readonly _onDidChangeCheckboxState: Emitter<readonly ITreeItem[]> = this._register(new Emitter<readonly ITreeItem[]>());\n\treadonly onDidChangeCheckboxState: Event<readonly ITreeItem[]> = this._onDidChangeCheckboxState.event;\n\n\tprivate readonly _onDidCompleteRefresh: Emitter<void> = this._register(new Emitter<void>());\n\n\tconstructor(\n\t\treadonly id: string,\n\t\tprivate _title: string,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProgressService protected readonly progressService: IProgressService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IOpenerService private readonly openerService: IOpenerService\n\t) {\n\t\tsuper();\n\t\tthis.root = new Root();\n\t\tthis.lastActive = this.root;\n\t\t// Try not to add anything that could be costly to this constructor. It gets called once per tree view\n\t\t// during startup, and anything added here can affect performance.\n\t}\n\n\tprivate _isInitialized: boolean = false;\n\tprivate initialize() {\n\t\tif (this._isInitialized) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isInitialized = true;\n\n\t\t// Remember when adding to this method that it isn't called until the the view is visible, meaning that\n\t\t// properties could be set and events could be fired before we're initialized and that this needs to be handled.\n\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.initializeShowCollapseAllAction();\n\t\t\tthis.initializeCollapseAllToggle();\n\t\t\tthis.initializeShowRefreshAction();\n\t\t});\n\n\t\tthis.treeViewDnd = this.instantiationService.createInstance(CustomTreeViewDragAndDrop, this.id);\n\t\tif (this._dragAndDropController) {\n\t\t\tthis.treeViewDnd.controller = this._dragAndDropController;\n\t\t}\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('explorer.decorations')) {\n\t\t\t\tthis.doRefresh([this.root]); /** soft refresh **/\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.viewDescriptorService.onDidChangeLocation(({ views, from, to }) => {\n\t\t\tif (views.some(v => v.id === this.id)) {\n\t\t\t\tthis.tree?.updateOptions({ overrideStyles: getLocationBasedViewColors(this.viewLocation).listOverrideStyles });\n\t\t\t}\n\t\t}));\n\t\tthis.registerActions();\n\n\t\tthis.create();\n\t}\n\n\tget viewContainer(): ViewContainer {\n\t\treturn this.viewDescriptorService.getViewContainerByViewId(this.id)!;\n\t}\n\n\tget viewLocation(): ViewContainerLocation {\n\t\treturn this.viewDescriptorService.getViewLocationById(this.id)!;\n\t}\n\tprivate _dragAndDropController: ITreeViewDragAndDropController | undefined;\n\tget dragAndDropController(): ITreeViewDragAndDropController | undefined {\n\t\treturn this._dragAndDropController;\n\t}\n\tset dragAndDropController(dnd: ITreeViewDragAndDropController | undefined) {\n\t\tthis._dragAndDropController = dnd;\n\t\tif (this.treeViewDnd) {\n\t\t\tthis.treeViewDnd.controller = dnd;\n\t\t}\n\t}\n\n\tprivate _dataProvider: ITreeViewDataProvider | undefined;\n\tget dataProvider(): ITreeViewDataProvider | undefined {\n\t\treturn this._dataProvider;\n\t}\n\n\tset dataProvider(dataProvider: ITreeViewDataProvider | undefined) {\n\t\tif (dataProvider) {\n\t\t\tif (this.visible) {\n\t\t\t\tthis.activate();\n\t\t\t}\n\t\t\tconst self = this;\n\t\t\tthis._dataProvider = new class implements ITreeViewDataProvider {\n\t\t\t\tprivate _isEmpty: boolean = true;\n\t\t\t\tprivate _onDidChangeEmpty: Emitter<void> = new Emitter();\n\t\t\t\tpublic onDidChangeEmpty: Event<void> = this._onDidChangeEmpty.event;\n\n\t\t\t\tget isTreeEmpty(): boolean {\n\t\t\t\t\treturn this._isEmpty;\n\t\t\t\t}\n\n\t\t\t\tasync getChildren(node?: ITreeItem): Promise<ITreeItem[]> {\n\t\t\t\t\tlet children: ITreeItem[];\n\t\t\t\t\tconst checkboxesUpdated: ITreeItem[] = [];\n\t\t\t\t\tif (node && node.children) {\n\t\t\t\t\t\tchildren = node.children;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode = node ?? self.root;\n\t\t\t\t\t\tnode.children = await (node instanceof Root ? dataProvider.getChildren() : dataProvider.getChildren(node));\n\t\t\t\t\t\tchildren = node.children ?? [];\n\t\t\t\t\t\tchildren.forEach(child => {\n\t\t\t\t\t\t\tchild.parent = node;\n\t\t\t\t\t\t\tif (!self.manuallyManageCheckboxes && (node?.checkbox?.isChecked === true) && (child.checkbox?.isChecked === false)) {\n\t\t\t\t\t\t\t\tchild.checkbox.isChecked = true;\n\t\t\t\t\t\t\t\tcheckboxesUpdated.push(child);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (node instanceof Root) {\n\t\t\t\t\t\tconst oldEmpty = this._isEmpty;\n\t\t\t\t\t\tthis._isEmpty = children.length === 0;\n\t\t\t\t\t\tif (oldEmpty !== this._isEmpty) {\n\t\t\t\t\t\t\tthis._onDidChangeEmpty.fire();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (checkboxesUpdated.length > 0) {\n\t\t\t\t\t\tself._onDidChangeCheckboxState.fire(checkboxesUpdated);\n\t\t\t\t\t}\n\t\t\t\t\treturn children;\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (this._dataProvider.onDidChangeEmpty) {\n\t\t\t\tthis._register(this._dataProvider.onDidChangeEmpty(() => {\n\t\t\t\t\tthis.updateCollapseAllToggle();\n\t\t\t\t\tthis._onDidChangeWelcomeState.fire();\n\t\t\t\t}));\n\t\t\t}\n\t\t\tthis.updateMessage();\n\t\t\tthis.refresh();\n\t\t} else {\n\t\t\tthis._dataProvider = undefined;\n\t\t\tthis.treeDisposables.clear();\n\t\t\tthis.activated = false;\n\t\t\tthis.updateMessage();\n\t\t}\n\n\t\tthis._onDidChangeWelcomeState.fire();\n\t}\n\n\tprivate _message: string | IMarkdownString | undefined;\n\tget message(): string | IMarkdownString | undefined {\n\t\treturn this._message;\n\t}\n\n\tset message(message: string | IMarkdownString | undefined) {\n\t\tthis._message = message;\n\t\tthis.updateMessage();\n\t\tthis._onDidChangeWelcomeState.fire();\n\t}\n\n\tget title(): string {\n\t\treturn this._title;\n\t}\n\n\tset title(name: string) {\n\t\tthis._title = name;\n\t\tthis._onDidChangeTitle.fire(this._title);\n\t}\n\n\tprivate _description: string | undefined;\n\tget description(): string | undefined {\n\t\treturn this._description;\n\t}\n\n\tset description(description: string | undefined) {\n\t\tthis._description = description;\n\t\tthis._onDidChangeDescription.fire(this._description);\n\t}\n\n\tprivate _badge: IViewBadge | undefined;\n\tprivate readonly _activity = this._register(new MutableDisposable<IDisposable>());\n\n\tget badge(): IViewBadge | undefined {\n\t\treturn this._badge;\n\t}\n\n\tset badge(badge: IViewBadge | undefined) {\n\n\t\tif (this._badge?.value === badge?.value &&\n\t\t\tthis._badge?.tooltip === badge?.tooltip) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._badge = badge;\n\t\tif (badge) {\n\t\t\tconst activity = {\n\t\t\t\tbadge: new NumberBadge(badge.value, () => badge.tooltip),\n\t\t\t\tpriority: 50\n\t\t\t};\n\t\t\tthis._activity.value = this.activityService.showViewActivity(this.id, activity);\n\t\t} else {\n\t\t\tthis._activity.clear();\n\t\t}\n\t}\n\n\tget canSelectMany(): boolean {\n\t\treturn this._canSelectMany;\n\t}\n\n\tset canSelectMany(canSelectMany: boolean) {\n\t\tconst oldCanSelectMany = this._canSelectMany;\n\t\tthis._canSelectMany = canSelectMany;\n\t\tif (this._canSelectMany !== oldCanSelectMany) {\n\t\t\tthis.tree?.updateOptions({ multipleSelectionSupport: this.canSelectMany });\n\t\t}\n\t}\n\n\tget manuallyManageCheckboxes(): boolean {\n\t\treturn this._manuallyManageCheckboxes;\n\t}\n\n\tset manuallyManageCheckboxes(manuallyManageCheckboxes: boolean) {\n\t\tthis._manuallyManageCheckboxes = manuallyManageCheckboxes;\n\t}\n\n\tget hasIconForParentNode(): boolean {\n\t\treturn this._hasIconForParentNode;\n\t}\n\n\tget hasIconForLeafNode(): boolean {\n\t\treturn this._hasIconForLeafNode;\n\t}\n\n\tget visible(): boolean {\n\t\treturn this.isVisible;\n\t}\n\n\tprivate initializeShowCollapseAllAction(startingValue: boolean = false) {\n\t\tif (!this.collapseAllContext) {\n\t\t\tthis.collapseAllContextKey = new RawContextKey<boolean>(`treeView.${this.id}.enableCollapseAll`, startingValue, localize('treeView.enableCollapseAll', \"Whether the the tree view with id {0} enables collapse all.\", this.id));\n\t\t\tthis.collapseAllContext = this.collapseAllContextKey.bindTo(this.contextKeyService);\n\t\t}\n\t\treturn true;\n\t}\n\n\tget showCollapseAllAction(): boolean {\n\t\tthis.initializeShowCollapseAllAction();\n\t\treturn !!this.collapseAllContext?.get();\n\t}\n\n\tset showCollapseAllAction(showCollapseAllAction: boolean) {\n\t\tthis.initializeShowCollapseAllAction(showCollapseAllAction);\n\t\tthis.collapseAllContext?.set(showCollapseAllAction);\n\t}\n\n\n\tprivate initializeShowRefreshAction(startingValue: boolean = false) {\n\t\tif (!this.refreshContext) {\n\t\t\tthis.refreshContextKey = new RawContextKey<boolean>(`treeView.${this.id}.enableRefresh`, startingValue, localize('treeView.enableRefresh', \"Whether the tree view with id {0} enables refresh.\", this.id));\n\t\t\tthis.refreshContext = this.refreshContextKey.bindTo(this.contextKeyService);\n\t\t}\n\t}\n\n\tget showRefreshAction(): boolean {\n\t\tthis.initializeShowRefreshAction();\n\t\treturn !!this.refreshContext?.get();\n\t}\n\n\tset showRefreshAction(showRefreshAction: boolean) {\n\t\tthis.initializeShowRefreshAction(showRefreshAction);\n\t\tthis.refreshContext?.set(showRefreshAction);\n\t}\n\n\tprivate registerActions() {\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: `workbench.actions.treeView.${that.id}.refresh`,\n\t\t\t\t\ttitle: localize('refresh', \"Refresh\"),\n\t\t\t\t\tmenu: {\n\t\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.equals('view', that.id), that.refreshContextKey),\n\t\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\t\torder: Number.MAX_SAFE_INTEGER - 1,\n\t\t\t\t\t},\n\t\t\t\t\ticon: Codicon.refresh\n\t\t\t\t});\n\t\t\t}\n\t\t\tasync run(): Promise<void> {\n\t\t\t\treturn that.refresh();\n\t\t\t}\n\t\t}));\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: `workbench.actions.treeView.${that.id}.collapseAll`,\n\t\t\t\t\ttitle: localize('collapseAll', \"Collapse All\"),\n\t\t\t\t\tmenu: {\n\t\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.equals('view', that.id), that.collapseAllContextKey),\n\t\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\t\torder: Number.MAX_SAFE_INTEGER,\n\t\t\t\t\t},\n\t\t\t\t\tprecondition: that.collapseAllToggleContextKey,\n\t\t\t\t\ticon: Codicon.collapseAll\n\t\t\t\t});\n\t\t\t}\n\t\t\tasync run(): Promise<void> {\n\t\t\t\tif (that.tree) {\n\t\t\t\t\treturn new CollapseAllAction<ITreeItem, ITreeItem, FuzzyScore>(that.tree, true).run();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tsetVisibility(isVisible: boolean): void {\n\t\t// Throughout setVisibility we need to check if the tree view's data provider still exists.\n\t\t// This can happen because the `getChildren` call to the extension can return\n\t\t// after the tree has been disposed.\n\n\t\tthis.initialize();\n\t\tisVisible = !!isVisible;\n\t\tif (this.isVisible === isVisible) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isVisible = isVisible;\n\n\t\tif (this.tree) {\n\t\t\tif (this.isVisible) {\n\t\t\t\tDOM.show(this.tree.getHTMLElement());\n\t\t\t} else {\n\t\t\t\tDOM.hide(this.tree.getHTMLElement()); // make sure the tree goes out of the tabindex world by hiding it\n\t\t\t}\n\n\t\t\tif (this.isVisible && this.elementsToRefresh.length && this.dataProvider) {\n\t\t\t\tthis.doRefresh(this.elementsToRefresh);\n\t\t\t\tthis.elementsToRefresh = [];\n\t\t\t}\n\t\t}\n\n\t\tsetTimeout0(() => {\n\t\t\tif (this.dataProvider) {\n\t\t\t\tthis._onDidChangeVisibility.fire(this.isVisible);\n\t\t\t}\n\t\t});\n\n\t\tif (this.visible) {\n\t\t\tthis.activate();\n\t\t}\n\t}\n\n\tprotected activated: boolean = false;\n\tprotected abstract activate(): void;\n\n\tfocus(reveal: boolean = true, revealItem?: ITreeItem): void {\n\t\tif (this.tree && this.root.children && this.root.children.length > 0) {\n\t\t\t// Make sure the current selected element is revealed\n\t\t\tconst element = revealItem ?? this.tree.getSelection()[0];\n\t\t\tif (element && reveal) {\n\t\t\t\tthis.tree.reveal(element, 0.5);\n\t\t\t}\n\n\t\t\t// Pass Focus to Viewer\n\t\t\tthis.tree.domFocus();\n\t\t} else if (this.tree && this.treeContainer && !this.treeContainer.classList.contains('hide')) {\n\t\t\tthis.tree.domFocus();\n\t\t} else {\n\t\t\tthis.domNode.focus();\n\t\t}\n\t}\n\n\tshow(container: HTMLElement): void {\n\t\tthis._container = container;\n\t\tDOM.append(container, this.domNode);\n\t}\n\n\tprivate create() {\n\t\tthis.domNode = DOM.$('.tree-explorer-viewlet-tree-view');\n\t\tthis.messageElement = DOM.append(this.domNode, DOM.$('.message'));\n\t\tthis.updateMessage();\n\t\tthis.treeContainer = DOM.append(this.domNode, DOM.$('.customview-tree'));\n\t\tthis.treeContainer.classList.add('file-icon-themable-tree', 'show-file-icons');\n\t\tconst focusTracker = this._register(DOM.trackFocus(this.domNode));\n\t\tthis._register(focusTracker.onDidFocus(() => this.focused = true));\n\t\tthis._register(focusTracker.onDidBlur(() => this.focused = false));\n\t}\n\n\tprivate readonly treeDisposables: DisposableStore = this._register(new DisposableStore());\n\tprotected createTree() {\n\t\tthis.treeDisposables.clear();\n\t\tconst actionViewItemProvider = createActionViewItem.bind(undefined, this.instantiationService);\n\t\tconst treeMenus = this.treeDisposables.add(this.instantiationService.createInstance(TreeMenus, this.id));\n\t\tthis.treeLabels = this.treeDisposables.add(this.instantiationService.createInstance(ResourceLabels, this));\n\t\tconst dataSource = this.instantiationService.createInstance(TreeDataSource, this, <T>(task: Promise<T>) => this.progressService.withProgress({ location: this.id }, () => task));\n\t\tconst aligner = new Aligner(this.themeService);\n\t\tconst checkboxStateHandler = this.treeDisposables.add(new CheckboxStateHandler());\n\t\tconst renderer = this.instantiationService.createInstance(TreeRenderer, this.id, treeMenus, this.treeLabels, actionViewItemProvider, aligner, checkboxStateHandler, () => this.manuallyManageCheckboxes);\n\t\tthis.treeDisposables.add(renderer.onDidChangeCheckboxState(e => this._onDidChangeCheckboxState.fire(e)));\n\n\t\tconst widgetAriaLabel = this._title;\n\n\t\tthis.tree = this.treeDisposables.add(this.instantiationService.createInstance(Tree, this.id, this.treeContainer!, new TreeViewDelegate(), [renderer],\n\t\t\tdataSource, {\n\t\t\tidentityProvider: new TreeViewIdentityProvider(),\n\t\t\taccessibilityProvider: {\n\t\t\t\tgetAriaLabel(element: ITreeItem): string | null {\n\t\t\t\t\tif (element.accessibilityInformation) {\n\t\t\t\t\t\treturn element.accessibilityInformation.label;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isString(element.tooltip)) {\n\t\t\t\t\t\treturn element.tooltip;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (element.resourceUri && !element.label) {\n\t\t\t\t\t\t\t// The custom tree has no good information on what should be used for the aria label.\n\t\t\t\t\t\t\t// Allow the tree widget's default aria label to be used.\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet buildAriaLabel: string = '';\n\t\t\t\t\t\tif (element.label) {\n\t\t\t\t\t\t\tbuildAriaLabel += element.label.label + ' ';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (element.description) {\n\t\t\t\t\t\t\tbuildAriaLabel += element.description;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn buildAriaLabel;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgetRole(element: ITreeItem): AriaRole | undefined {\n\t\t\t\t\treturn element.accessibilityInformation?.role ?? 'treeitem';\n\t\t\t\t},\n\t\t\t\tgetWidgetAriaLabel(): string {\n\t\t\t\t\treturn widgetAriaLabel;\n\t\t\t\t}\n\t\t\t},\n\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\tgetKeyboardNavigationLabel: (item: ITreeItem) => {\n\t\t\t\t\treturn item.label ? item.label.label : (item.resourceUri ? basename(URI.revive(item.resourceUri)) : undefined);\n\t\t\t\t}\n\t\t\t},\n\t\t\texpandOnlyOnTwistieClick: (e: ITreeItem) => {\n\t\t\t\treturn !!e.command || !!e.checkbox || this.configurationService.getValue<'singleClick' | 'doubleClick'>('workbench.tree.expandMode') === 'doubleClick';\n\t\t\t},\n\t\t\tcollapseByDefault: (e: ITreeItem): boolean => {\n\t\t\t\treturn e.collapsibleState !== TreeItemCollapsibleState.Expanded;\n\t\t\t},\n\t\t\tmultipleSelectionSupport: this.canSelectMany,\n\t\t\tdnd: this.treeViewDnd,\n\t\t\toverrideStyles: getLocationBasedViewColors(this.viewLocation).listOverrideStyles\n\t\t}) as WorkbenchAsyncDataTree<ITreeItem, ITreeItem, FuzzyScore>);\n\n\t\tthis.treeDisposables.add(renderer.onDidChangeMenuContext(e => e.forEach(e => this.tree?.rerender(e))));\n\n\t\tthis.treeDisposables.add(this.tree);\n\t\ttreeMenus.setContextKeyService(this.tree.contextKeyService);\n\t\taligner.tree = this.tree;\n\t\tconst actionRunner = new MultipleSelectionActionRunner(this.notificationService, () => this.tree!.getSelection());\n\t\trenderer.actionRunner = actionRunner;\n\n\t\tthis.tree.contextKeyService.createKey<boolean>(this.id, true);\n\t\tconst customTreeKey = RawCustomTreeViewContextKey.bindTo(this.tree.contextKeyService);\n\t\tcustomTreeKey.set(true);\n\t\tthis.treeDisposables.add(this.tree.onContextMenu(e => this.onContextMenu(treeMenus, e, actionRunner)));\n\n\t\tthis.treeDisposables.add(this.tree.onDidChangeSelection(e => {\n\t\t\tthis.lastSelection = e.elements;\n\t\t\tthis.lastActive = this.tree?.getFocus()[0] ?? this.lastActive;\n\t\t\tthis._onDidChangeSelectionAndFocus.fire({ selection: this.lastSelection, focus: this.lastActive });\n\t\t}));\n\t\tthis.treeDisposables.add(this.tree.onDidChangeFocus(e => {\n\t\t\tif (e.elements.length && (e.elements[0] !== this.lastActive)) {\n\t\t\t\tthis.lastActive = e.elements[0];\n\t\t\t\tthis.lastSelection = this.tree?.getSelection() ?? this.lastSelection;\n\t\t\t\tthis._onDidChangeSelectionAndFocus.fire({ selection: this.lastSelection, focus: this.lastActive });\n\t\t\t}\n\t\t}));\n\t\tthis.treeDisposables.add(this.tree.onDidChangeCollapseState(e => {\n\t\t\tif (!e.node.element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst element: ITreeItem = Array.isArray(e.node.element.element) ? e.node.element.element[0] : e.node.element.element;\n\t\t\tif (e.node.collapsed) {\n\t\t\t\tthis._onDidCollapseItem.fire(element);\n\t\t\t} else {\n\t\t\t\tthis._onDidExpandItem.fire(element);\n\t\t\t}\n\t\t}));\n\t\tthis.tree.setInput(this.root).then(() => this.updateContentAreas());\n\n\t\tthis.treeDisposables.add(this.tree.onDidOpen(async (e) => {\n\t\t\tif (!e.browserEvent) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.browserEvent.target && (e.browserEvent.target as HTMLElement).classList.contains(TreeItemCheckbox.checkboxClass)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selection = this.tree!.getSelection();\n\t\t\tconst command = await this.resolveCommand(selection.length === 1 ? selection[0] : undefined);\n\n\t\t\tif (command && isTreeCommandEnabled(command, this.contextKeyService)) {\n\t\t\t\tlet args = command.arguments || [];\n\t\t\t\tif (command.id === API_OPEN_EDITOR_COMMAND_ID || command.id === API_OPEN_DIFF_EDITOR_COMMAND_ID) {\n\t\t\t\t\t// Some commands owned by us should receive the\n\t\t\t\t\t// `IOpenEvent` as context to open properly\n\t\t\t\t\targs = [...args, e];\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.commandService.executeCommand(command.id, ...args);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.notificationService.error(err);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.treeDisposables.add(treeMenus.onDidChange((changed) => {\n\t\t\tif (this.tree?.hasNode(changed)) {\n\t\t\t\tthis.tree?.rerender(changed);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async resolveCommand(element: ITreeItem | undefined): Promise<TreeCommand | undefined> {\n\t\tlet command = element?.command;\n\t\tif (element && !command) {\n\t\t\tif ((element instanceof ResolvableTreeItem) && element.hasResolve) {\n\t\t\t\tawait element.resolve(CancellationToken.None);\n\t\t\t\tcommand = element.command;\n\t\t\t}\n\t\t}\n\t\treturn command;\n\t}\n\n\tprivate onContextMenu(treeMenus: TreeMenus, treeEvent: ITreeContextMenuEvent<ITreeItem>, actionRunner: MultipleSelectionActionRunner): void {\n\t\tthis.hoverService.hideHover();\n\t\tconst node: ITreeItem | null = treeEvent.element;\n\t\tif (node === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst event: UIEvent = treeEvent.browserEvent;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tthis.tree!.setFocus([node]);\n\t\tlet selected = this.canSelectMany ? this.getSelection() : [];\n\t\tif (!selected.find(item => item.handle === node.handle)) {\n\t\t\tselected = [node];\n\t\t}\n\n\t\tconst actions = treeMenus.getResourceContextActions(selected);\n\t\tif (!actions.length) {\n\t\t\treturn;\n\t\t}\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => treeEvent.anchor,\n\n\t\t\tgetActions: () => actions,\n\n\t\t\tgetActionViewItem: (action) => {\n\t\t\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\t\t\t\tif (keybinding) {\n\t\t\t\t\treturn new ActionViewItem(action, action, { label: true, keybinding: keybinding.getLabel() });\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\n\t\t\tonHide: (wasCancelled?: boolean) => {\n\t\t\t\tif (wasCancelled) {\n\t\t\t\t\tthis.tree!.domFocus();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetActionsContext: () => ({ $treeViewId: this.id, $treeItemHandle: node.handle } satisfies TreeViewItemHandleArg),\n\n\t\t\tactionRunner\n\t\t});\n\t}\n\n\tprotected updateMessage(): void {\n\t\tif (this._message) {\n\t\t\tthis.showMessage(this._message);\n\t\t} else if (!this.dataProvider) {\n\t\t\tthis.showMessage(noDataProviderMessage);\n\t\t} else {\n\t\t\tthis.hideMessage();\n\t\t}\n\t\tthis.updateContentAreas();\n\t}\n\n\tprivate processMessage(message: IMarkdownString, disposables: DisposableStore): HTMLElement {\n\t\tconst lines = message.value.split('\\n');\n\t\tconst result: (IMarkdownRenderResult | HTMLElement)[] = [];\n\t\tlet hasFoundButton = false;\n\t\tfor (const line of lines) {\n\t\t\tconst linkedText = parseLinkedText(line);\n\n\t\t\tif (linkedText.nodes.length === 1 && typeof linkedText.nodes[0] !== 'string') {\n\t\t\t\tconst node = linkedText.nodes[0];\n\t\t\t\tconst buttonContainer = document.createElement('div');\n\t\t\t\tbuttonContainer.classList.add('button-container');\n\t\t\t\tconst button = new Button(buttonContainer, { title: node.title, secondary: hasFoundButton, supportIcons: true, ...defaultButtonStyles });\n\t\t\t\tbutton.label = node.label;\n\t\t\t\tbutton.onDidClick(_ => {\n\t\t\t\t\tthis.openerService.open(node.href, { allowCommands: true });\n\t\t\t\t}, null, disposables);\n\n\t\t\t\tconst href = URI.parse(node.href);\n\t\t\t\tif (href.scheme === Schemas.command) {\n\t\t\t\t\tconst preConditions = commandPreconditions(href.path);\n\t\t\t\t\tif (preConditions) {\n\t\t\t\t\t\tbutton.enabled = this.contextKeyService.contextMatchesRules(preConditions);\n\t\t\t\t\t\tdisposables.add(this.contextKeyService.onDidChangeContext(e => {\n\t\t\t\t\t\t\tif (e.affectsSome(new Set(preConditions.keys()))) {\n\t\t\t\t\t\t\t\tbutton.enabled = this.contextKeyService.contextMatchesRules(preConditions);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdisposables.add(button);\n\t\t\t\thasFoundButton = true;\n\t\t\t\tresult.push(buttonContainer);\n\t\t\t} else {\n\t\t\t\thasFoundButton = false;\n\t\t\t\tconst rendered = this.markdownRenderer!.render(new MarkdownString(line, { isTrusted: message.isTrusted, supportThemeIcons: message.supportThemeIcons, supportHtml: message.supportHtml }));\n\t\t\t\tresult.push(rendered.element);\n\t\t\t\tdisposables.add(rendered);\n\t\t\t}\n\t\t}\n\n\t\tconst container = document.createElement('div');\n\t\tcontainer.classList.add('rendered-message');\n\t\tfor (const child of result) {\n\t\t\tif (DOM.isHTMLElement(child)) {\n\t\t\t\tcontainer.appendChild(child);\n\t\t\t} else {\n\t\t\t\tcontainer.appendChild(child.element);\n\t\t\t}\n\t\t}\n\t\treturn container;\n\t}\n\n\tprivate showMessage(message: string | IMarkdownString): void {\n\t\tif (isRenderedMessageValue(this._messageValue)) {\n\t\t\tthis._messageValue.disposables.dispose();\n\t\t}\n\t\tif (isMarkdownString(message) && !this.markdownRenderer) {\n\t\t\tthis.markdownRenderer = this.instantiationService.createInstance(MarkdownRenderer, {});\n\t\t}\n\t\tif (isMarkdownString(message)) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst renderedMessage = this.processMessage(message, disposables);\n\t\t\tthis._messageValue = { element: renderedMessage, disposables };\n\t\t} else {\n\t\t\tthis._messageValue = message;\n\t\t}\n\t\tif (!this.messageElement) {\n\t\t\treturn;\n\t\t}\n\t\tthis.messageElement.classList.remove('hide');\n\t\tthis.resetMessageElement();\n\t\tif (typeof this._messageValue === 'string' && !isFalsyOrWhitespace(this._messageValue)) {\n\t\t\tthis.messageElement.textContent = this._messageValue;\n\t\t} else if (isRenderedMessageValue(this._messageValue)) {\n\t\t\tthis.messageElement.appendChild(this._messageValue.element);\n\t\t}\n\t\tthis.layout(this._height, this._width);\n\t}\n\n\tprivate hideMessage(): void {\n\t\tthis.resetMessageElement();\n\t\tthis.messageElement?.classList.add('hide');\n\t\tthis.layout(this._height, this._width);\n\t}\n\n\tprivate resetMessageElement(): void {\n\t\tif (this.messageElement) {\n\t\t\tDOM.clearNode(this.messageElement);\n\t\t}\n\t}\n\n\tprivate _height: number = 0;\n\tprivate _width: number = 0;\n\tlayout(height: number, width: number) {\n\t\tif (height && width && this.messageElement && this.treeContainer) {\n\t\t\tthis._height = height;\n\t\t\tthis._width = width;\n\t\t\tconst treeHeight = height - DOM.getTotalHeight(this.messageElement);\n\t\t\tthis.treeContainer.style.height = treeHeight + 'px';\n\t\t\tthis.tree?.layout(treeHeight, width);\n\t\t}\n\t}\n\n\tgetOptimalWidth(): number {\n\t\tif (this.tree) {\n\t\t\tconst parentNode = this.tree.getHTMLElement();\n\t\t\tconst childNodes = ([] as HTMLElement[]).slice.call(parentNode.querySelectorAll('.outline-item-label > a'));\n\t\t\treturn DOM.getLargestChildWidth(parentNode, childNodes);\n\t\t}\n\t\treturn 0;\n\t}\n\n\tasync refresh(elements?: readonly ITreeItem[]): Promise<void> {\n\t\tif (this.dataProvider && this.tree) {\n\t\t\tif (this.refreshing) {\n\t\t\t\tawait Event.toPromise(this._onDidCompleteRefresh.event);\n\t\t\t}\n\t\t\tif (!elements) {\n\t\t\t\telements = [this.root];\n\t\t\t\t// remove all waiting elements to refresh if root is asked to refresh\n\t\t\t\tthis.elementsToRefresh = [];\n\t\t\t}\n\t\t\tfor (const element of elements) {\n\t\t\t\telement.children = undefined; // reset children\n\t\t\t}\n\t\t\tif (this.isVisible) {\n\t\t\t\treturn this.doRefresh(elements);\n\t\t\t} else {\n\t\t\t\tif (this.elementsToRefresh.length) {\n\t\t\t\t\tconst seen: Set<string> = new Set<string>();\n\t\t\t\t\tthis.elementsToRefresh.forEach(element => seen.add(element.handle));\n\t\t\t\t\tfor (const element of elements) {\n\t\t\t\t\t\tif (!seen.has(element.handle)) {\n\t\t\t\t\t\t\tthis.elementsToRefresh.push(element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.elementsToRefresh.push(...elements);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync expand(itemOrItems: ITreeItem | ITreeItem[]): Promise<void> {\n\t\tconst tree = this.tree;\n\t\tif (!tree) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\titemOrItems = Array.isArray(itemOrItems) ? itemOrItems : [itemOrItems];\n\t\t\tfor (const element of itemOrItems) {\n\t\t\t\tawait tree.expand(element, false);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// The extension could have changed the tree during the reveal.\n\t\t\t// Because of that, we ignore errors.\n\t\t}\n\t}\n\n\tisCollapsed(item: ITreeItem): boolean {\n\t\treturn !!this.tree?.isCollapsed(item);\n\t}\n\n\tsetSelection(items: ITreeItem[]): void {\n\t\tthis.tree?.setSelection(items);\n\t}\n\n\tgetSelection(): ITreeItem[] {\n\t\treturn this.tree?.getSelection() ?? [];\n\t}\n\n\tsetFocus(item?: ITreeItem): void {\n\t\tif (this.tree) {\n\t\t\tif (item) {\n\t\t\t\tthis.focus(true, item);\n\t\t\t\tthis.tree.setFocus([item]);\n\t\t\t} else if (this.tree.getFocus().length === 0) {\n\t\t\t\tthis.tree.setFocus([]);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync reveal(item: ITreeItem): Promise<void> {\n\t\tif (this.tree) {\n\t\t\treturn this.tree.reveal(item);\n\t\t}\n\t}\n\n\tprivate refreshing: boolean = false;\n\tprivate async doRefresh(elements: readonly ITreeItem[]): Promise<void> {\n\t\tconst tree = this.tree;\n\t\tif (tree && this.visible) {\n\t\t\tthis.refreshing = true;\n\t\t\tconst oldSelection = tree.getSelection();\n\t\t\ttry {\n\t\t\t\tawait Promise.all(elements.map(element => tree.updateChildren(element, true, true)));\n\t\t\t} catch (e) {\n\t\t\t\t// When multiple calls are made to refresh the tree in quick succession,\n\t\t\t\t// we can get a \"Tree element not found\" error. This is expected.\n\t\t\t\t// Ideally this is fixable, so log instead of ignoring so the error is preserved.\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t\tconst newSelection = tree.getSelection();\n\t\t\tif (oldSelection.length !== newSelection.length || oldSelection.some((value, index) => value.handle !== newSelection[index].handle)) {\n\t\t\t\tthis.lastSelection = newSelection;\n\t\t\t\tthis._onDidChangeSelectionAndFocus.fire({ selection: this.lastSelection, focus: this.lastActive });\n\t\t\t}\n\t\t\tthis.refreshing = false;\n\t\t\tthis._onDidCompleteRefresh.fire();\n\t\t\tthis.updateContentAreas();\n\t\t\tif (this.focused) {\n\t\t\t\tthis.focus(false);\n\t\t\t}\n\t\t\tthis.updateCollapseAllToggle();\n\t\t}\n\t}\n\n\tprivate initializeCollapseAllToggle() {\n\t\tif (!this.collapseAllToggleContext) {\n\t\t\tthis.collapseAllToggleContextKey = new RawContextKey<boolean>(`treeView.${this.id}.toggleCollapseAll`, false, localize('treeView.toggleCollapseAll', \"Whether collapse all is toggled for the tree view with id {0}.\", this.id));\n\t\t\tthis.collapseAllToggleContext = this.collapseAllToggleContextKey.bindTo(this.contextKeyService);\n\t\t}\n\t}\n\n\tprivate updateCollapseAllToggle() {\n\t\tif (this.showCollapseAllAction) {\n\t\t\tthis.initializeCollapseAllToggle();\n\t\t\tthis.collapseAllToggleContext?.set(!!this.root.children && (this.root.children.length > 0) &&\n\t\t\t\tthis.root.children.some(value => value.collapsibleState !== TreeItemCollapsibleState.None));\n\t\t}\n\t}\n\n\tprivate updateContentAreas(): void {\n\t\tconst isTreeEmpty = !this.root.children || this.root.children.length === 0;\n\t\t// Hide tree container only when there is a message and tree is empty and not refreshing\n\t\tif (this._messageValue && isTreeEmpty && !this.refreshing && this.treeContainer) {\n\t\t\t// If there's a dnd controller then hiding the tree prevents it from being dragged into.\n\t\t\tif (!this.dragAndDropController) {\n\t\t\t\tthis.treeContainer.classList.add('hide');\n\t\t\t}\n\t\t\tthis.domNode.setAttribute('tabindex', '0');\n\t\t} else if (this.treeContainer) {\n\t\t\tthis.treeContainer.classList.remove('hide');\n\t\t\tif (this.domNode === DOM.getActiveElement()) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\t\t\tthis.domNode.removeAttribute('tabindex');\n\t\t}\n\t}\n\n\tget container(): HTMLElement | undefined {\n\t\treturn this._container;\n\t}\n}\n\nclass TreeViewIdentityProvider implements IIdentityProvider<ITreeItem> {\n\tgetId(element: ITreeItem): { toString(): string } {\n\t\treturn element.handle;\n\t}\n}\n\nclass TreeViewDelegate implements IListVirtualDelegate<ITreeItem> {\n\n\tgetHeight(element: ITreeItem): number {\n\t\treturn TreeRenderer.ITEM_HEIGHT;\n\t}\n\n\tgetTemplateId(element: ITreeItem): string {\n\t\treturn TreeRenderer.TREE_TEMPLATE_ID;\n\t}\n}\n\nclass TreeDataSource implements IAsyncDataSource<ITreeItem, ITreeItem> {\n\n\tconstructor(\n\t\tprivate treeView: ITreeView,\n\t\tprivate withProgress: <T>(task: Promise<T>) => Promise<T>\n\t) {\n\t}\n\n\thasChildren(element: ITreeItem): boolean {\n\t\treturn !!this.treeView.dataProvider && (element.collapsibleState !== TreeItemCollapsibleState.None);\n\t}\n\n\tasync getChildren(element: ITreeItem): Promise<ITreeItem[]> {\n\t\tlet result: ITreeItem[] = [];\n\t\tif (this.treeView.dataProvider) {\n\t\t\ttry {\n\t\t\t\tresult = (await this.withProgress(this.treeView.dataProvider.getChildren(element))) ?? [];\n\t\t\t} catch (e) {\n\t\t\t\tif (!(<string>e.message).startsWith('Bad progress location:')) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\ninterface ITreeExplorerTemplateData {\n\treadonly container: HTMLElement;\n\treadonly resourceLabel: IResourceLabel;\n\treadonly icon: HTMLElement;\n\treadonly checkboxContainer: HTMLElement;\n\tcheckbox?: TreeItemCheckbox;\n\treadonly actionBar: ActionBar;\n}\n\nclass TreeRenderer extends Disposable implements ITreeRenderer<ITreeItem, FuzzyScore, ITreeExplorerTemplateData> {\n\tstatic readonly ITEM_HEIGHT = 22;\n\tstatic readonly TREE_TEMPLATE_ID = 'treeExplorer';\n\n\tprivate readonly _onDidChangeCheckboxState: Emitter<readonly ITreeItem[]> = this._register(new Emitter<readonly ITreeItem[]>());\n\treadonly onDidChangeCheckboxState: Event<readonly ITreeItem[]> = this._onDidChangeCheckboxState.event;\n\n\tprivate _onDidChangeMenuContext: Emitter<readonly ITreeItem[]> = this._register(new Emitter<readonly ITreeItem[]>());\n\treadonly onDidChangeMenuContext: Event<readonly ITreeItem[]> = this._onDidChangeMenuContext.event;\n\n\tprivate _actionRunner: MultipleSelectionActionRunner | undefined;\n\tprivate _hoverDelegate: IHoverDelegate;\n\tprivate _hasCheckbox: boolean = false;\n\tprivate _renderedElements = new Map<string, { original: ITreeNode<ITreeItem, FuzzyScore>; rendered: ITreeExplorerTemplateData }[]>(); // tree item handle to template data\n\n\tconstructor(\n\t\tprivate treeViewId: string,\n\t\tprivate menus: TreeMenus,\n\t\tprivate labels: ResourceLabels,\n\t\tprivate actionViewItemProvider: IActionViewItemProvider,\n\t\tprivate aligner: Aligner,\n\t\tprivate checkboxStateHandler: CheckboxStateHandler,\n\t\tprivate readonly manuallyManageCheckboxes: () => boolean,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._hoverDelegate = this._register(instantiationService.createInstance(WorkbenchHoverDelegate, 'mouse', false, {}));\n\t\tthis._register(this.themeService.onDidFileIconThemeChange(() => this.rerender()));\n\t\tthis._register(this.themeService.onDidColorThemeChange(() => this.rerender()));\n\t\tthis._register(checkboxStateHandler.onDidChangeCheckboxState(items => {\n\t\t\tthis.updateCheckboxes(items);\n\t\t}));\n\t\tthis._register(this.contextKeyService.onDidChangeContext(e => this.onDidChangeContext(e)));\n\t}\n\n\tget templateId(): string {\n\t\treturn TreeRenderer.TREE_TEMPLATE_ID;\n\t}\n\n\tset actionRunner(actionRunner: MultipleSelectionActionRunner) {\n\t\tthis._actionRunner = actionRunner;\n\t}\n\n\trenderTemplate(container: HTMLElement): ITreeExplorerTemplateData {\n\t\tcontainer.classList.add('custom-view-tree-node-item');\n\n\t\tconst checkboxContainer = DOM.append(container, DOM.$(''));\n\t\tconst resourceLabel = this.labels.create(container, { supportHighlights: true, hoverDelegate: this._hoverDelegate });\n\t\tconst icon = DOM.prepend(resourceLabel.element, DOM.$('.custom-view-tree-node-item-icon'));\n\t\tconst actionsContainer = DOM.append(resourceLabel.element, DOM.$('.actions'));\n\t\tconst actionBar = new ActionBar(actionsContainer, {\n\t\t\tactionViewItemProvider: this.actionViewItemProvider\n\t\t});\n\n\t\treturn { resourceLabel, icon, checkboxContainer, actionBar, container };\n\t}\n\n\tprivate getHover(label: string | undefined, resource: URI | null, node: ITreeItem): string | IManagedHoverTooltipMarkdownString | undefined {\n\t\tif (!(node instanceof ResolvableTreeItem) || !node.hasResolve) {\n\t\t\tif (resource && !node.tooltip) {\n\t\t\t\treturn undefined;\n\t\t\t} else if (node.tooltip === undefined) {\n\t\t\t\treturn label;\n\t\t\t} else if (!isString(node.tooltip)) {\n\t\t\t\treturn { markdown: node.tooltip, markdownNotSupportedFallback: resource ? undefined : renderMarkdownAsPlaintext(node.tooltip) }; // Passing undefined as the fallback for a resource falls back to the old native hover\n\t\t\t} else if (node.tooltip !== '') {\n\t\t\t\treturn node.tooltip;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tmarkdown: typeof node.tooltip === 'string' ? node.tooltip :\n\t\t\t\t(token: CancellationToken): Promise<IMarkdownString | string | undefined> => {\n\t\t\t\t\treturn new Promise<IMarkdownString | string | undefined>((resolve) => {\n\t\t\t\t\t\tnode.resolve(token).then(() => resolve(node.tooltip));\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\tmarkdownNotSupportedFallback: resource ? undefined : (label ?? '') // Passing undefined as the fallback for a resource falls back to the old native hover\n\t\t};\n\t}\n\n\trenderElement(element: ITreeNode<ITreeItem, FuzzyScore>, index: number, templateData: ITreeExplorerTemplateData): void {\n\t\tconst node = element.element;\n\t\tconst resource = node.resourceUri ? URI.revive(node.resourceUri) : null;\n\t\tconst treeItemLabel: ITreeItemLabel | undefined = node.label ? node.label : (resource ? { label: basename(resource) } : undefined);\n\t\tconst description = isString(node.description) ? node.description : resource && node.description === true ? this.labelService.getUriLabel(dirname(resource), { relative: true }) : undefined;\n\t\tconst label = treeItemLabel ? treeItemLabel.label : undefined;\n\t\tconst matches = (treeItemLabel && treeItemLabel.highlights && label) ? treeItemLabel.highlights.map(([start, end]) => {\n\t\t\tif (start < 0) {\n\t\t\t\tstart = label.length + start;\n\t\t\t}\n\t\t\tif (end < 0) {\n\t\t\t\tend = label.length + end;\n\t\t\t}\n\t\t\tif ((start >= label.length) || (end > label.length)) {\n\t\t\t\treturn ({ start: 0, end: 0 });\n\t\t\t}\n\t\t\tif (start > end) {\n\t\t\t\tconst swap = start;\n\t\t\t\tstart = end;\n\t\t\t\tend = swap;\n\t\t\t}\n\t\t\treturn ({ start, end });\n\t\t}) : undefined;\n\t\tconst icon = this.themeService.getColorTheme().type === ColorScheme.LIGHT ? node.icon : node.iconDark;\n\t\tconst iconUrl = icon ? URI.revive(icon) : undefined;\n\t\tconst title = this.getHover(label, resource, node);\n\n\t\t// reset\n\t\ttemplateData.actionBar.clear();\n\t\ttemplateData.icon.style.color = '';\n\n\t\tlet commandEnabled = true;\n\t\tif (node.command) {\n\t\t\tcommandEnabled = isTreeCommandEnabled(node.command, this.contextKeyService);\n\t\t}\n\n\t\tthis.renderCheckbox(node, templateData);\n\n\t\tif (resource) {\n\t\t\tconst fileDecorations = this.configurationService.getValue<{ colors: boolean; badges: boolean }>('explorer.decorations');\n\t\t\tconst labelResource = resource ? resource : URI.parse('missing:_icon_resource');\n\t\t\ttemplateData.resourceLabel.setResource({ name: label, description, resource: labelResource }, {\n\t\t\t\tfileKind: this.getFileKind(node),\n\t\t\t\ttitle,\n\t\t\t\thideIcon: this.shouldHideResourceLabelIcon(iconUrl, node.themeIcon),\n\t\t\t\tfileDecorations,\n\t\t\t\textraClasses: ['custom-view-tree-node-item-resourceLabel'],\n\t\t\t\tmatches: matches ? matches : createMatches(element.filterData),\n\t\t\t\tstrikethrough: treeItemLabel?.strikethrough,\n\t\t\t\tdisabledCommand: !commandEnabled,\n\t\t\t\tlabelEscapeNewLines: true,\n\t\t\t\tforceLabel: !!node.label\n\t\t\t});\n\t\t} else {\n\t\t\ttemplateData.resourceLabel.setResource({ name: label, description }, {\n\t\t\t\ttitle,\n\t\t\t\thideIcon: true,\n\t\t\t\textraClasses: ['custom-view-tree-node-item-resourceLabel'],\n\t\t\t\tmatches: matches ? matches : createMatches(element.filterData),\n\t\t\t\tstrikethrough: treeItemLabel?.strikethrough,\n\t\t\t\tdisabledCommand: !commandEnabled,\n\t\t\t\tlabelEscapeNewLines: true\n\t\t\t});\n\t\t}\n\n\t\tif (iconUrl) {\n\t\t\ttemplateData.icon.className = 'custom-view-tree-node-item-icon';\n\t\t\ttemplateData.icon.style.backgroundImage = DOM.asCSSUrl(iconUrl);\n\t\t} else {\n\t\t\tlet iconClass: string | undefined;\n\t\t\tif (this.shouldShowThemeIcon(!!resource, node.themeIcon)) {\n\t\t\t\ticonClass = ThemeIcon.asClassName(node.themeIcon);\n\t\t\t\tif (node.themeIcon.color) {\n\t\t\t\t\ttemplateData.icon.style.color = this.themeService.getColorTheme().getColor(node.themeIcon.color.id)?.toString() ?? '';\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemplateData.icon.className = iconClass ? `custom-view-tree-node-item-icon ${iconClass}` : '';\n\t\t\ttemplateData.icon.style.backgroundImage = '';\n\t\t}\n\n\t\tif (!commandEnabled) {\n\t\t\ttemplateData.icon.className = templateData.icon.className + ' disabled';\n\t\t\tif (templateData.container.parentElement) {\n\t\t\t\ttemplateData.container.parentElement.className = templateData.container.parentElement.className + ' disabled';\n\t\t\t}\n\t\t}\n\n\t\ttemplateData.actionBar.context = { $treeViewId: this.treeViewId, $treeItemHandle: node.handle } satisfies TreeViewItemHandleArg;\n\n\t\tconst menuActions = this.menus.getResourceActions([node]);\n\t\ttemplateData.actionBar.push(menuActions, { icon: true, label: false });\n\n\t\tif (this._actionRunner) {\n\t\t\ttemplateData.actionBar.actionRunner = this._actionRunner;\n\t\t}\n\t\tthis.setAlignment(templateData.container, node);\n\n\t\t// remember rendered element, an element can be rendered multiple times\n\t\tconst renderedItems = this._renderedElements.get(element.element.handle) ?? [];\n\t\tthis._renderedElements.set(element.element.handle, [...renderedItems, { original: element, rendered: templateData }]);\n\t}\n\n\tprivate rerender() {\n\t\t// As we add items to the map during this call we can't directly use the map in the for loop\n\t\t// but have to create a copy of the keys first\n\t\tconst keys = new Set(this._renderedElements.keys());\n\t\tfor (const key of keys) {\n\t\t\tconst values = this._renderedElements.get(key) ?? [];\n\t\t\tfor (const value of values) {\n\t\t\t\tthis.disposeElement(value.original, 0, value.rendered);\n\t\t\t\tthis.renderElement(value.original, 0, value.rendered);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderCheckbox(node: ITreeItem, templateData: ITreeExplorerTemplateData) {\n\t\tif (node.checkbox) {\n\t\t\t// The first time we find a checkbox we want to rerender the visible tree to adapt the alignment\n\t\t\tif (!this._hasCheckbox) {\n\t\t\t\tthis._hasCheckbox = true;\n\t\t\t\tthis.rerender();\n\t\t\t}\n\t\t\tif (!templateData.checkbox) {\n\t\t\t\tconst checkbox = new TreeItemCheckbox(templateData.checkboxContainer, this.checkboxStateHandler, this._hoverDelegate, this.hoverService);\n\t\t\t\ttemplateData.checkbox = checkbox;\n\t\t\t}\n\t\t\ttemplateData.checkbox.render(node);\n\t\t}\n\t\telse if (templateData.checkbox) {\n\t\t\ttemplateData.checkbox.dispose();\n\t\t\ttemplateData.checkbox = undefined;\n\t\t}\n\t}\n\n\tprivate setAlignment(container: HTMLElement, treeItem: ITreeItem) {\n\t\tcontainer.parentElement!.classList.toggle('align-icon-with-twisty', !this._hasCheckbox && this.aligner.alignIconWithTwisty(treeItem));\n\t}\n\n\tprivate shouldHideResourceLabelIcon(iconUrl: URI | undefined, icon: ThemeIcon | undefined): boolean {\n\t\t// We always hide the resource label in favor of the iconUrl when it's provided.\n\t\t// When `ThemeIcon` is provided, we hide the resource label icon in favor of it only if it's a not a file icon.\n\t\treturn (!!iconUrl || (!!icon && !this.isFileKindThemeIcon(icon)));\n\t}\n\n\tprivate shouldShowThemeIcon(hasResource: boolean, icon: ThemeIcon | undefined): icon is ThemeIcon {\n\t\tif (!icon) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If there's a resource and the icon is a file icon, then the icon (or lack thereof) will already be coming from the\n\t\t// icon theme and should use whatever the icon theme has provided.\n\t\treturn !(hasResource && this.isFileKindThemeIcon(icon));\n\t}\n\n\tprivate isFolderThemeIcon(icon: ThemeIcon | undefined): boolean {\n\t\treturn icon?.id === FolderThemeIcon.id;\n\t}\n\n\tprivate isFileKindThemeIcon(icon: ThemeIcon | undefined): boolean {\n\t\tif (icon) {\n\t\t\treturn icon.id === FileThemeIcon.id || this.isFolderThemeIcon(icon);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate getFileKind(node: ITreeItem): FileKind {\n\t\tif (node.themeIcon) {\n\t\t\tswitch (node.themeIcon.id) {\n\t\t\t\tcase FileThemeIcon.id:\n\t\t\t\t\treturn FileKind.FILE;\n\t\t\t\tcase FolderThemeIcon.id:\n\t\t\t\t\treturn FileKind.FOLDER;\n\t\t\t}\n\t\t}\n\t\treturn node.collapsibleState === TreeItemCollapsibleState.Collapsed || node.collapsibleState === TreeItemCollapsibleState.Expanded ? FileKind.FOLDER : FileKind.FILE;\n\t}\n\n\tprivate onDidChangeContext(e: IContextKeyChangeEvent) {\n\t\tconst items: ITreeItem[] = [];\n\t\tfor (const [_, elements] of this._renderedElements) {\n\t\t\tfor (const element of elements) {\n\t\t\t\tif (e.affectsSome(this.menus.getElementOverlayContexts(element.original.element)) || e.affectsSome(this.menus.getEntireMenuContexts())) {\n\t\t\t\t\titems.push(element.original.element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (items.length) {\n\t\t\tthis._onDidChangeMenuContext.fire(items);\n\t\t}\n\t}\n\n\tprivate updateCheckboxes(items: ITreeItem[]) {\n\t\tconst additionalItems: ITreeItem[] = [];\n\n\t\tif (!this.manuallyManageCheckboxes()) {\n\t\t\tfor (const item of items) {\n\t\t\t\tif (item.checkbox !== undefined) {\n\n\t\t\t\t\tfunction checkChildren(currentItem: ITreeItem) {\n\t\t\t\t\t\tfor (const child of (currentItem.children ?? [])) {\n\t\t\t\t\t\t\tif ((child.checkbox !== undefined) && (currentItem.checkbox !== undefined) && (child.checkbox.isChecked !== currentItem.checkbox.isChecked)) {\n\t\t\t\t\t\t\t\tchild.checkbox.isChecked = currentItem.checkbox.isChecked;\n\t\t\t\t\t\t\t\tadditionalItems.push(child);\n\t\t\t\t\t\t\t\tcheckChildren(child);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcheckChildren(item);\n\n\t\t\t\t\tconst visitedParents: Set<ITreeItem> = new Set();\n\t\t\t\t\tfunction checkParents(currentItem: ITreeItem) {\n\t\t\t\t\t\tif (currentItem.parent && (currentItem.parent.checkbox !== undefined) && currentItem.parent.children) {\n\t\t\t\t\t\t\tif (visitedParents.has(currentItem.parent)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvisitedParents.add(currentItem.parent);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet someUnchecked = false;\n\t\t\t\t\t\t\tlet someChecked = false;\n\t\t\t\t\t\t\tfor (const child of currentItem.parent.children) {\n\t\t\t\t\t\t\t\tif (someUnchecked && someChecked) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (child.checkbox !== undefined) {\n\t\t\t\t\t\t\t\t\tif (child.checkbox.isChecked) {\n\t\t\t\t\t\t\t\t\t\tsomeChecked = true;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsomeUnchecked = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (someChecked && !someUnchecked && (currentItem.parent.checkbox.isChecked !== true)) {\n\t\t\t\t\t\t\t\tcurrentItem.parent.checkbox.isChecked = true;\n\t\t\t\t\t\t\t\tadditionalItems.push(currentItem.parent);\n\t\t\t\t\t\t\t\tcheckParents(currentItem.parent);\n\t\t\t\t\t\t\t} else if (someUnchecked && (currentItem.parent.checkbox.isChecked !== false)) {\n\t\t\t\t\t\t\t\tcurrentItem.parent.checkbox.isChecked = false;\n\t\t\t\t\t\t\t\tadditionalItems.push(currentItem.parent);\n\t\t\t\t\t\t\t\tcheckParents(currentItem.parent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcheckParents(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\titems = items.concat(additionalItems);\n\t\titems.forEach(item => {\n\t\t\tconst renderedItems = this._renderedElements.get(item.handle);\n\t\t\tif (renderedItems) {\n\t\t\t\trenderedItems.forEach(renderedItems => renderedItems.rendered.checkbox?.render(item));\n\t\t\t}\n\t\t});\n\t\tthis._onDidChangeCheckboxState.fire(items);\n\t}\n\n\tdisposeElement(resource: ITreeNode<ITreeItem, FuzzyScore>, index: number, templateData: ITreeExplorerTemplateData): void {\n\t\tconst itemRenders = this._renderedElements.get(resource.element.handle) ?? [];\n\t\tconst renderedIndex = itemRenders.findIndex(renderedItem => templateData === renderedItem.rendered);\n\n\t\tif (itemRenders.length === 1) {\n\t\t\tthis._renderedElements.delete(resource.element.handle);\n\t\t} else if (itemRenders.length > 0) {\n\t\t\titemRenders.splice(renderedIndex, 1);\n\t\t}\n\n\t\ttemplateData.checkbox?.dispose();\n\t\ttemplateData.checkbox = undefined;\n\t}\n\n\tdisposeTemplate(templateData: ITreeExplorerTemplateData): void {\n\t\ttemplateData.resourceLabel.dispose();\n\t\ttemplateData.actionBar.dispose();\n\t}\n}\n\nclass Aligner extends Disposable {\n\tprivate _tree: WorkbenchAsyncDataTree<ITreeItem, ITreeItem, FuzzyScore> | undefined;\n\n\tconstructor(private themeService: IThemeService) {\n\t\tsuper();\n\t}\n\n\tset tree(tree: WorkbenchAsyncDataTree<ITreeItem, ITreeItem, FuzzyScore>) {\n\t\tthis._tree = tree;\n\t}\n\n\tpublic alignIconWithTwisty(treeItem: ITreeItem): boolean {\n\t\tif (treeItem.collapsibleState !== TreeItemCollapsibleState.None) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.hasIcon(treeItem)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._tree) {\n\t\t\tconst parent: ITreeItem = this._tree.getParentElement(treeItem) || this._tree.getInput();\n\t\t\tif (this.hasIcon(parent)) {\n\t\t\t\treturn !!parent.children && parent.children.some(c => c.collapsibleState !== TreeItemCollapsibleState.None && !this.hasIcon(c));\n\t\t\t}\n\t\t\treturn !!parent.children && parent.children.every(c => c.collapsibleState === TreeItemCollapsibleState.None || !this.hasIcon(c));\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate hasIcon(node: ITreeItem): boolean {\n\t\tconst icon = this.themeService.getColorTheme().type === ColorScheme.LIGHT ? node.icon : node.iconDark;\n\t\tif (icon) {\n\t\t\treturn true;\n\t\t}\n\t\tif (node.resourceUri || node.themeIcon) {\n\t\t\tconst fileIconTheme = this.themeService.getFileIconTheme();\n\t\t\tconst isFolder = node.themeIcon ? node.themeIcon.id === FolderThemeIcon.id : node.collapsibleState !== TreeItemCollapsibleState.None;\n\t\t\tif (isFolder) {\n\t\t\t\treturn fileIconTheme.hasFileIcons && fileIconTheme.hasFolderIcons;\n\t\t\t}\n\t\t\treturn fileIconTheme.hasFileIcons;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nclass MultipleSelectionActionRunner extends ActionRunner {\n\n\tconstructor(notificationService: INotificationService, private getSelectedResources: (() => ITreeItem[])) {\n\t\tsuper();\n\t\tthis._register(this.onDidRun(e => {\n\t\t\tif (e.error && !isCancellationError(e.error)) {\n\t\t\t\tnotificationService.error(localize('command-error', 'Error running command {1}: {0}. This is likely caused by the extension that contributes {1}.', e.error.message, e.action.id));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected override async runAction(action: IAction, context: TreeViewItemHandleArg | TreeViewPaneHandleArg): Promise<void> {\n\t\tconst selection = this.getSelectedResources();\n\t\tlet selectionHandleArgs: TreeViewItemHandleArg[] | undefined = undefined;\n\t\tlet actionInSelected: boolean = false;\n\t\tif (selection.length > 1) {\n\t\t\tselectionHandleArgs = selection.map(selected => {\n\t\t\t\tif ((selected.handle === (context as TreeViewItemHandleArg).$treeItemHandle) || (context as TreeViewPaneHandleArg).$selectedTreeItems) {\n\t\t\t\t\tactionInSelected = true;\n\t\t\t\t}\n\t\t\t\treturn { $treeViewId: context.$treeViewId, $treeItemHandle: selected.handle };\n\t\t\t});\n\t\t}\n\n\t\tif (!actionInSelected && selectionHandleArgs) {\n\t\t\tselectionHandleArgs = undefined;\n\t\t}\n\n\t\tawait action.run(context, selectionHandleArgs);\n\t}\n}\n\nclass TreeMenus implements IDisposable {\n\tprivate contextKeyService: IContextKeyService | undefined;\n\tprivate _onDidChange = new Emitter<ITreeItem>();\n\tpublic readonly onDidChange = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate id: string,\n\t\t@IMenuService private readonly menuService: IMenuService\n\t) { }\n\n\t/**\n\t * Gets only the actions that apply to all of the given elements.\n\t */\n\tgetResourceActions(elements: ITreeItem[]): IAction[] {\n\t\tconst actions = this.getActions(this.getMenuId(), elements);\n\t\treturn actions.primary;\n\t}\n\n\t/**\n\t * Gets only the actions that apply to all of the given elements.\n\t */\n\tgetResourceContextActions(elements: ITreeItem[]): IAction[] {\n\t\treturn this.getActions(this.getMenuId(), elements).secondary;\n\t}\n\n\tpublic setContextKeyService(service: IContextKeyService) {\n\t\tthis.contextKeyService = service;\n\t}\n\n\tprivate filterNonUniversalActions(groups: Map<string, IAction>[], newActions: IAction[]) {\n\t\tconst newActionsSet: Set<string> = new Set(newActions.map(a => a.id));\n\t\tfor (const group of groups) {\n\t\t\tconst actions = group.keys();\n\t\t\tfor (const action of actions) {\n\t\t\t\tif (!newActionsSet.has(action)) {\n\t\t\t\t\tgroup.delete(action);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate buildMenu(groups: Map<string, IAction>[]): IAction[] {\n\t\tconst result: IAction[] = [];\n\t\tfor (const group of groups) {\n\t\t\tif (group.size > 0) {\n\t\t\t\tif (result.length) {\n\t\t\t\t\tresult.push(new Separator());\n\t\t\t\t}\n\t\t\t\tresult.push(...group.values());\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate createGroups(actions: IAction[]): Map<string, IAction>[] {\n\t\tconst groups: Map<string, IAction>[] = [];\n\t\tlet group: Map<string, IAction> = new Map();\n\t\tfor (const action of actions) {\n\t\t\tif (action instanceof Separator) {\n\t\t\t\tgroups.push(group);\n\t\t\t\tgroup = new Map();\n\t\t\t} else {\n\t\t\t\tgroup.set(action.id, action);\n\t\t\t}\n\t\t}\n\t\tgroups.push(group);\n\t\treturn groups;\n\t}\n\n\tpublic getElementOverlayContexts(element: ITreeItem): Map<string, any> {\n\t\treturn new Map([\n\t\t\t['view', this.id],\n\t\t\t['viewItem', element.contextValue]\n\t\t]);\n\t}\n\n\tpublic getEntireMenuContexts(): ReadonlySet<string> {\n\t\treturn this.menuService.getMenuContexts(this.getMenuId());\n\t}\n\n\tpublic getMenuId(): MenuId {\n\t\treturn MenuId.ViewItemContext;\n\t}\n\n\tprivate getActions(menuId: MenuId, elements: ITreeItem[]): { primary: IAction[]; secondary: IAction[] } {\n\t\tif (!this.contextKeyService) {\n\t\t\treturn { primary: [], secondary: [] };\n\t\t}\n\n\t\tlet primaryGroups: Map<string, IAction>[] = [];\n\t\tlet secondaryGroups: Map<string, IAction>[] = [];\n\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\tconst element = elements[i];\n\t\t\tconst contextKeyService = this.contextKeyService.createOverlay(this.getElementOverlayContexts(element));\n\n\t\t\tconst menuData = this.menuService.getMenuActions(menuId, contextKeyService, { shouldForwardArgs: true });\n\n\t\t\tconst primary: IAction[] = [];\n\t\t\tconst secondary: IAction[] = [];\n\t\t\tconst result = { primary, secondary };\n\t\t\tcreateAndFillInContextMenuActions(menuData, result, 'inline');\n\t\t\tif (i === 0) {\n\t\t\t\tprimaryGroups = this.createGroups(result.primary);\n\t\t\t\tsecondaryGroups = this.createGroups(result.secondary);\n\t\t\t} else {\n\t\t\t\tthis.filterNonUniversalActions(primaryGroups, result.primary);\n\t\t\t\tthis.filterNonUniversalActions(secondaryGroups, result.secondary);\n\t\t\t}\n\t\t}\n\n\t\treturn { primary: this.buildMenu(primaryGroups), secondary: this.buildMenu(secondaryGroups) };\n\t}\n\n\tdispose() {\n\t\tthis.contextKeyService = undefined;\n\t}\n}\n\nexport class CustomTreeView extends AbstractTreeView {\n\n\tconstructor(\n\t\tid: string,\n\t\ttitle: string,\n\t\tprivate readonly extensionId: string,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IActivityService activityService: IActivityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IOpenerService openerService: IOpenerService\n\t) {\n\t\tsuper(id, title, themeService, instantiationService, commandService, configurationService, progressService, contextMenuService, keybindingService, notificationService, viewDescriptorService, hoverService, contextKeyService, activityService, logService, openerService);\n\t}\n\n\tprotected activate() {\n\t\tif (!this.activated) {\n\t\t\ttype ExtensionViewTelemetry = {\n\t\t\t\textensionId: TelemetryTrustedValue<string>;\n\t\t\t\tid: string;\n\t\t\t};\n\t\t\ttype ExtensionViewTelemetryMeta = {\n\t\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the extension' };\n\t\t\t\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the view' };\n\t\t\t\towner: 'digitarald';\n\t\t\t\tcomment: 'Helps to gain insights on what extension contributed views are most popular';\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<ExtensionViewTelemetry, ExtensionViewTelemetryMeta>('Extension:ViewActivate', {\n\t\t\t\textensionId: new TelemetryTrustedValue(this.extensionId),\n\t\t\t\tid: this.id,\n\t\t\t});\n\t\t\tthis.createTree();\n\t\t\tthis.progressService.withProgress({ location: this.id }, () => this.extensionService.activateByEvent(`onView:${this.id}`))\n\t\t\t\t.then(() => timeout(2000))\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.updateMessage();\n\t\t\t\t});\n\t\t\tthis.activated = true;\n\t\t}\n\t}\n}\n\nexport class TreeView extends AbstractTreeView {\n\n\tprotected activate() {\n\t\tif (!this.activated) {\n\t\t\tthis.createTree();\n\t\t\tthis.activated = true;\n\t\t}\n\t}\n}\n\ninterface TreeDragSourceInfo {\n\tid: string;\n\titemHandles: string[];\n}\n\nexport class CustomTreeViewDragAndDrop implements ITreeDragAndDrop<ITreeItem> {\n\tprivate readonly treeMimeType: string;\n\tprivate readonly treeItemsTransfer = LocalSelectionTransfer.getInstance<DraggedTreeItemsIdentifier>();\n\tprivate dragCancellationToken: CancellationTokenSource | undefined;\n\n\tconstructor(\n\t\tprivate readonly treeId: string,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITreeViewsDnDService private readonly treeViewsDragAndDropService: ITreeViewsDnDService,\n\t\t@ILogService private readonly logService: ILogService) {\n\t\tthis.treeMimeType = `application/vnd.code.tree.${treeId.toLowerCase()}`;\n\t}\n\n\tprivate dndController: ITreeViewDragAndDropController | undefined;\n\tset controller(controller: ITreeViewDragAndDropController | undefined) {\n\t\tthis.dndController = controller;\n\t}\n\n\tprivate handleDragAndLog(dndController: ITreeViewDragAndDropController, itemHandles: string[], uuid: string, dragCancellationToken: CancellationToken): Promise<VSDataTransfer | undefined> {\n\t\treturn dndController.handleDrag(itemHandles, uuid, dragCancellationToken).then(additionalDataTransfer => {\n\t\t\tif (additionalDataTransfer) {\n\t\t\t\tconst unlistedTypes: string[] = [];\n\t\t\t\tfor (const item of additionalDataTransfer) {\n\t\t\t\t\tif ((item[0] !== this.treeMimeType) && (dndController.dragMimeTypes.findIndex(value => value === item[0]) < 0)) {\n\t\t\t\t\t\tunlistedTypes.push(item[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (unlistedTypes.length) {\n\t\t\t\t\tthis.logService.warn(`Drag and drop controller for tree ${this.treeId} adds the following data transfer types but does not declare them in dragMimeTypes: ${unlistedTypes.join(', ')}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn additionalDataTransfer;\n\t\t});\n\t}\n\n\tprivate addExtensionProvidedTransferTypes(originalEvent: DragEvent, itemHandles: string[]) {\n\t\tif (!originalEvent.dataTransfer || !this.dndController) {\n\t\t\treturn;\n\t\t}\n\t\tconst uuid = generateUuid();\n\n\t\tthis.dragCancellationToken = new CancellationTokenSource();\n\t\tthis.treeViewsDragAndDropService.addDragOperationTransfer(uuid, this.handleDragAndLog(this.dndController, itemHandles, uuid, this.dragCancellationToken.token));\n\t\tthis.treeItemsTransfer.setData([new DraggedTreeItemsIdentifier(uuid)], DraggedTreeItemsIdentifier.prototype);\n\t\toriginalEvent.dataTransfer.clearData(Mimes.text);\n\t\tif (this.dndController.dragMimeTypes.find((element) => element === Mimes.uriList)) {\n\t\t\t// Add the type that the editor knows\n\t\t\toriginalEvent.dataTransfer?.setData(DataTransfers.RESOURCES, '');\n\t\t}\n\t\tthis.dndController.dragMimeTypes.forEach(supportedType => {\n\t\t\toriginalEvent.dataTransfer?.setData(supportedType, '');\n\t\t});\n\t}\n\n\tprivate addResourceInfoToTransfer(originalEvent: DragEvent, resources: URI[]) {\n\t\tif (resources.length && originalEvent.dataTransfer) {\n\t\t\t// Apply some datatransfer types to allow for dragging the element outside of the application\n\t\t\tthis.instantiationService.invokeFunction(accessor => fillEditorsDragData(accessor, resources, originalEvent));\n\n\t\t\t// The only custom data transfer we set from the explorer is a file transfer\n\t\t\t// to be able to DND between multiple code file explorers across windows\n\t\t\tconst fileResources = resources.filter(s => s.scheme === Schemas.file).map(r => r.fsPath);\n\t\t\tif (fileResources.length) {\n\t\t\t\toriginalEvent.dataTransfer.setData(CodeDataTransfers.FILES, JSON.stringify(fileResources));\n\t\t\t}\n\t\t}\n\t}\n\n\tonDragStart(data: IDragAndDropData, originalEvent: DragEvent): void {\n\t\tif (originalEvent.dataTransfer) {\n\t\t\tconst treeItemsData = (data as ElementsDragAndDropData<ITreeItem, ITreeItem[]>).getData();\n\t\t\tconst resources: URI[] = [];\n\t\t\tconst sourceInfo: TreeDragSourceInfo = {\n\t\t\t\tid: this.treeId,\n\t\t\t\titemHandles: []\n\t\t\t};\n\t\t\ttreeItemsData.forEach(item => {\n\t\t\t\tsourceInfo.itemHandles.push(item.handle);\n\t\t\t\tif (item.resourceUri) {\n\t\t\t\t\tresources.push(URI.revive(item.resourceUri));\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.addResourceInfoToTransfer(originalEvent, resources);\n\t\t\tthis.addExtensionProvidedTransferTypes(originalEvent, sourceInfo.itemHandles);\n\t\t\toriginalEvent.dataTransfer.setData(this.treeMimeType,\n\t\t\t\tJSON.stringify(sourceInfo));\n\t\t}\n\t}\n\n\tprivate debugLog(types: Set<string>) {\n\t\tif (types.size) {\n\t\t\tthis.logService.debug(`TreeView dragged mime types: ${Array.from(types).join(', ')}`);\n\t\t} else {\n\t\t\tthis.logService.debug(`TreeView dragged with no supported mime types.`);\n\t\t}\n\t}\n\n\tonDragOver(data: IDragAndDropData, targetElement: ITreeItem, targetIndex: number, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): boolean | ITreeDragOverReaction {\n\t\tconst dataTransfer = toExternalVSDataTransfer(originalEvent.dataTransfer!);\n\n\t\tconst types = new Set<string>(Array.from(dataTransfer, x => x[0]));\n\n\t\tif (originalEvent.dataTransfer) {\n\t\t\t// Also add uri-list if we have any files. At this stage we can't actually access the file itself though.\n\t\t\tfor (const item of originalEvent.dataTransfer.items) {\n\t\t\t\tif (item.kind === 'file' || item.type === DataTransfers.RESOURCES.toLowerCase()) {\n\t\t\t\t\ttypes.add(Mimes.uriList);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.debugLog(types);\n\n\t\tconst dndController = this.dndController;\n\t\tif (!dndController || !originalEvent.dataTransfer || (dndController.dropMimeTypes.length === 0)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst dragContainersSupportedType = Array.from(types).some((value, index) => {\n\t\t\tif (value === this.treeMimeType) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn dndController.dropMimeTypes.indexOf(value) >= 0;\n\t\t\t}\n\t\t});\n\t\tif (dragContainersSupportedType) {\n\t\t\treturn { accept: true, bubble: TreeDragOverBubble.Down, autoExpand: true };\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetDragURI(element: ITreeItem): string | null {\n\t\tif (!this.dndController) {\n\t\t\treturn null;\n\t\t}\n\t\treturn element.resourceUri ? URI.revive(element.resourceUri).toString() : element.handle;\n\t}\n\n\tgetDragLabel?(elements: ITreeItem[]): string | undefined {\n\t\tif (!this.dndController) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (elements.length > 1) {\n\t\t\treturn String(elements.length);\n\t\t}\n\t\tconst element = elements[0];\n\t\treturn element.label ? element.label.label : (element.resourceUri ? this.labelService.getUriLabel(URI.revive(element.resourceUri)) : undefined);\n\t}\n\n\tasync drop(data: IDragAndDropData, targetNode: ITreeItem | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): Promise<void> {\n\t\tconst dndController = this.dndController;\n\t\tif (!originalEvent.dataTransfer || !dndController) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet treeSourceInfo: TreeDragSourceInfo | undefined;\n\t\tlet willDropUuid: string | undefined;\n\t\tif (this.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)) {\n\t\t\twillDropUuid = this.treeItemsTransfer.getData(DraggedTreeItemsIdentifier.prototype)![0].identifier;\n\t\t}\n\n\t\tconst originalDataTransfer = toExternalVSDataTransfer(originalEvent.dataTransfer, true);\n\n\t\tconst outDataTransfer = new VSDataTransfer();\n\t\tfor (const [type, item] of originalDataTransfer) {\n\t\t\tif (type === this.treeMimeType || dndController.dropMimeTypes.includes(type) || (item.asFile() && dndController.dropMimeTypes.includes(DataTransfers.FILES.toLowerCase()))) {\n\t\t\t\toutDataTransfer.append(type, item);\n\t\t\t\tif (type === this.treeMimeType) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttreeSourceInfo = JSON.parse(await item.asString());\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// noop\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst additionalDataTransfer = await this.treeViewsDragAndDropService.removeDragOperationTransfer(willDropUuid);\n\t\tif (additionalDataTransfer) {\n\t\t\tfor (const [type, item] of additionalDataTransfer) {\n\t\t\t\toutDataTransfer.append(type, item);\n\t\t\t}\n\t\t}\n\t\treturn dndController.handleDrop(outDataTransfer, targetNode, CancellationToken.None, willDropUuid, treeSourceInfo?.id, treeSourceInfo?.itemHandles);\n\t}\n\n\tonDragEnd(originalEvent: DragEvent): void {\n\t\t// Check if the drag was cancelled.\n\t\tif (originalEvent.dataTransfer?.dropEffect === 'none') {\n\t\t\tthis.dragCancellationToken?.cancel();\n\t\t}\n\t}\n\n\tdispose(): void { }\n}\n"],
  "mappings": "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",
  "names": ["e", "checkChildren", "checkParents", "renderedItems"]
}
