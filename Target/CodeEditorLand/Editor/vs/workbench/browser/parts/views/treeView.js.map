{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/views/treeView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDataTransfers,\n\ttype IDragAndDropData,\n} from \"../../../../base/browser/dnd.js\";\nimport * as DOM from \"../../../../base/browser/dom.js\";\nimport { renderMarkdownAsPlaintext } from \"../../../../base/browser/markdownRenderer.js\";\nimport { ActionViewItem } from \"../../../../base/browser/ui/actionbar/actionViewItems.js\";\nimport {\n\tActionBar,\n\ttype IActionViewItemProvider,\n} from \"../../../../base/browser/ui/actionbar/actionbar.js\";\nimport type { IHoverDelegate } from \"../../../../base/browser/ui/hover/hoverDelegate.js\";\nimport type {\n\tIIdentityProvider,\n\tIListVirtualDelegate,\n} from \"../../../../base/browser/ui/list/list.js\";\nimport type {\n\tElementsDragAndDropData,\n\tListViewTargetSector,\n} from \"../../../../base/browser/ui/list/listView.js\";\nimport {\n\ttype IAsyncDataSource,\n\ttype ITreeContextMenuEvent,\n\ttype ITreeDragAndDrop,\n\ttype ITreeDragOverReaction,\n\ttype ITreeNode,\n\ttype ITreeRenderer,\n\tTreeDragOverBubble,\n} from \"../../../../base/browser/ui/tree/tree.js\";\nimport { CollapseAllAction } from \"../../../../base/browser/ui/tree/treeDefaults.js\";\nimport {\n\tActionRunner,\n\ttype IAction,\n\tSeparator,\n} from \"../../../../base/common/actions.js\";\nimport { timeout } from \"../../../../base/common/async.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { isCancellationError } from \"../../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\ttype FuzzyScore,\n\tcreateMatches,\n} from \"../../../../base/common/filters.js\";\nimport {\n\ttype IMarkdownString,\n\tMarkdownString,\n\tisMarkdownString,\n} from \"../../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Mimes } from \"../../../../base/common/mime.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { basename, dirname } from \"../../../../base/common/resources.js\";\nimport { isFalsyOrWhitespace } from \"../../../../base/common/strings.js\";\nimport { isString } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport \"./media/views.css\";\nimport type { AriaRole } from \"../../../../base/browser/ui/aria/aria.js\";\nimport { Button } from \"../../../../base/browser/ui/button/button.js\";\nimport type { IManagedHoverTooltipMarkdownString } from \"../../../../base/browser/ui/hover/hover.js\";\nimport { VSDataTransfer } from \"../../../../base/common/dataTransfer.js\";\nimport { parseLinkedText } from \"../../../../base/common/linkedText.js\";\nimport { setTimeout0 } from \"../../../../base/common/platform.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { toExternalVSDataTransfer } from \"../../../../editor/browser/dnd.js\";\nimport {\n\ttype IMarkdownRenderResult,\n\tMarkdownRenderer,\n} from \"../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js\";\nimport type { Command } from \"../../../../editor/common/languages.js\";\nimport { DraggedTreeItemsIdentifier } from \"../../../../editor/common/services/treeViewsDnd.js\";\nimport { ITreeViewsDnDService } from \"../../../../editor/common/services/treeViewsDndService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tcreateActionViewItem,\n\tcreateAndFillInContextMenuActions,\n} from \"../../../../platform/actions/browser/menuEntryActionViewItem.js\";\nimport {\n\tAction2,\n\tIMenuService,\n\tMenuId,\n\tMenuRegistry,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tCommandsRegistry,\n\tICommandService,\n} from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tContextKeyExpr,\n\ttype ContextKeyExpression,\n\ttype IContextKey,\n\ttype IContextKeyChangeEvent,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport {\n\tCodeDataTransfers,\n\tLocalSelectionTransfer,\n} from \"../../../../platform/dnd/browser/dnd.js\";\nimport { FileKind } from \"../../../../platform/files/common/files.js\";\nimport {\n\tIHoverService,\n\tWorkbenchHoverDelegate,\n} from \"../../../../platform/hover/browser/hover.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { WorkbenchAsyncDataTree } from \"../../../../platform/list/browser/listService.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProgressService } from \"../../../../platform/progress/common/progress.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { TelemetryTrustedValue } from \"../../../../platform/telemetry/common/telemetryUtils.js\";\nimport { defaultButtonStyles } from \"../../../../platform/theme/browser/defaultStyles.js\";\nimport { ColorScheme } from \"../../../../platform/theme/common/theme.js\";\nimport {\n\tFileThemeIcon,\n\tFolderThemeIcon,\n\tIThemeService,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\tExtensions,\n\ttype ITreeItem,\n\ttype ITreeItemLabel,\n\ttype ITreeView,\n\ttype ITreeViewDataProvider,\n\ttype ITreeViewDescriptor,\n\ttype ITreeViewDragAndDropController,\n\ttype IViewBadge,\n\tIViewDescriptorService,\n\ttype IViewsRegistry,\n\tResolvableTreeItem,\n\ttype TreeCommand,\n\tTreeItemCollapsibleState,\n\ttype TreeViewItemHandleArg,\n\ttype TreeViewPaneHandleArg,\n\ttype ViewContainer,\n\ttype ViewContainerLocation,\n} from \"../../../common/views.js\";\nimport { IAccessibleViewInformationService } from \"../../../services/accessibility/common/accessibleViewInformationService.js\";\nimport {\n\tIActivityService,\n\tNumberBadge,\n} from \"../../../services/activity/common/activity.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { fillEditorsDragData } from \"../../dnd.js\";\nimport { type IResourceLabel, ResourceLabels } from \"../../labels.js\";\nimport {\n\tAPI_OPEN_DIFF_EDITOR_COMMAND_ID,\n\tAPI_OPEN_EDITOR_COMMAND_ID,\n} from \"../editor/editorCommands.js\";\nimport { CheckboxStateHandler, TreeItemCheckbox } from \"./checkbox.js\";\nimport {\n\ttype IViewPaneOptions,\n\tViewPane,\n\tgetLocationBasedViewColors,\n} from \"./viewPane.js\";\nimport type { IViewletViewOptions } from \"./viewsViewlet.js\";\n\nexport class TreeViewPane extends ViewPane {\n\tprotected readonly treeView: ITreeView;\n\tprivate _container: HTMLElement | undefined;\n\tprivate _actionRunner: MultipleSelectionActionRunner;\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IAccessibleViewInformationService accessibleViewService: IAccessibleViewInformationService,\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\t...(options as IViewPaneOptions),\n\t\t\t\ttitleMenuId: MenuId.ViewTitle,\n\t\t\t\tdonotForwardArgs: false,\n\t\t\t},\n\t\t\tkeybindingService,\n\t\t\tcontextMenuService,\n\t\t\tconfigurationService,\n\t\t\tcontextKeyService,\n\t\t\tviewDescriptorService,\n\t\t\tinstantiationService,\n\t\t\topenerService,\n\t\t\tthemeService,\n\t\t\ttelemetryService,\n\t\t\thoverService,\n\t\t\taccessibleViewService,\n\t\t);\n\t\tconst { treeView } = <ITreeViewDescriptor>(\n\t\t\tRegistry.as<IViewsRegistry>(Extensions.ViewsRegistry).getView(\n\t\t\t\toptions.id,\n\t\t\t)\n\t\t);\n\t\tthis.treeView = treeView;\n\t\tthis._register(\n\t\t\tthis.treeView.onDidChangeActions(() => this.updateActions(), this),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.treeView.onDidChangeTitle((newTitle) =>\n\t\t\t\tthis.updateTitle(newTitle),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.treeView.onDidChangeDescription((newDescription) =>\n\t\t\t\tthis.updateTitleDescription(newDescription),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tif (\n\t\t\t\t\tthis._container &&\n\t\t\t\t\tthis.treeView.container &&\n\t\t\t\t\tthis._container === this.treeView.container\n\t\t\t\t) {\n\t\t\t\t\tthis.treeView.setVisibility(false);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.onDidChangeBodyVisibility(() => this.updateTreeVisibility()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.treeView.onDidChangeWelcomeState(() =>\n\t\t\t\tthis._onDidChangeViewWelcomeState.fire(),\n\t\t\t),\n\t\t);\n\t\tif (options.title !== this.treeView.title) {\n\t\t\tthis.updateTitle(this.treeView.title);\n\t\t}\n\t\tif (options.titleDescription !== this.treeView.description) {\n\t\t\tthis.updateTitleDescription(this.treeView.description);\n\t\t}\n\t\tthis._actionRunner = new MultipleSelectionActionRunner(\n\t\t\tnotificationService,\n\t\t\t() => this.treeView.getSelection(),\n\t\t);\n\n\t\tthis.updateTreeVisibility();\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis.treeView.focus();\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tthis._container = container;\n\t\tsuper.renderBody(container);\n\t\tthis.renderTreeView(container);\n\t}\n\n\toverride shouldShowWelcome(): boolean {\n\t\treturn (\n\t\t\t(this.treeView.dataProvider === undefined ||\n\t\t\t\t!!this.treeView.dataProvider.isTreeEmpty) &&\n\t\t\t(this.treeView.message === undefined ||\n\t\t\t\tthis.treeView.message === \"\")\n\t\t);\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.layoutTreeView(height, width);\n\t}\n\n\toverride getOptimalWidth(): number {\n\t\treturn this.treeView.getOptimalWidth();\n\t}\n\n\tprotected renderTreeView(container: HTMLElement): void {\n\t\tthis.treeView.show(container);\n\t}\n\n\tprotected layoutTreeView(height: number, width: number): void {\n\t\tthis.treeView.layout(height, width);\n\t}\n\n\tprivate updateTreeVisibility(): void {\n\t\tthis.treeView.setVisibility(this.isBodyVisible());\n\t}\n\n\toverride getActionRunner() {\n\t\treturn this._actionRunner;\n\t}\n\n\toverride getActionsContext(): TreeViewPaneHandleArg {\n\t\treturn {\n\t\t\t$treeViewId: this.id,\n\t\t\t$focusedTreeItem: true,\n\t\t\t$selectedTreeItems: true,\n\t\t};\n\t}\n}\n\nclass Root implements ITreeItem {\n\tlabel = { label: \"root\" };\n\thandle = \"0\";\n\tparentHandle: string | undefined = undefined;\n\tcollapsibleState = TreeItemCollapsibleState.Expanded;\n\tchildren: ITreeItem[] | undefined = undefined;\n}\n\nfunction commandPreconditions(\n\tcommandId: string,\n): ContextKeyExpression | undefined {\n\tconst command = CommandsRegistry.getCommand(commandId);\n\tif (command) {\n\t\tconst commandAction = MenuRegistry.getCommand(command.id);\n\t\treturn commandAction && commandAction.precondition;\n\t}\n\treturn undefined;\n}\n\nfunction isTreeCommandEnabled(\n\ttreeCommand: TreeCommand | Command,\n\tcontextKeyService: IContextKeyService,\n): boolean {\n\tconst commandId: string = (treeCommand as TreeCommand).originalId\n\t\t? (treeCommand as TreeCommand).originalId!\n\t\t: treeCommand.id;\n\tconst precondition = commandPreconditions(commandId);\n\tif (precondition) {\n\t\treturn contextKeyService.contextMatchesRules(precondition);\n\t}\n\n\treturn true;\n}\n\ninterface RenderedMessage {\n\telement: HTMLElement;\n\tdisposables: DisposableStore;\n}\n\nfunction isRenderedMessageValue(\n\tmessageValue: string | RenderedMessage | undefined,\n): messageValue is RenderedMessage {\n\treturn (\n\t\t!!messageValue &&\n\t\ttypeof messageValue !== \"string\" &&\n\t\t\"element\" in messageValue &&\n\t\t\"disposables\" in messageValue\n\t);\n}\n\nconst noDataProviderMessage = localize(\n\t\"no-dataprovider\",\n\t\"There is no data provider registered that can provide view data.\",\n);\n\nexport const RawCustomTreeViewContextKey = new RawContextKey<boolean>(\n\t\"customTreeView\",\n\tfalse,\n);\n\nclass Tree extends WorkbenchAsyncDataTree<ITreeItem, ITreeItem, FuzzyScore> {}\n\nabstract class AbstractTreeView extends Disposable implements ITreeView {\n\tprivate isVisible = false;\n\tprivate _hasIconForParentNode = false;\n\tprivate _hasIconForLeafNode = false;\n\n\tprivate collapseAllContextKey: RawContextKey<boolean> | undefined;\n\tprivate collapseAllContext: IContextKey<boolean> | undefined;\n\tprivate collapseAllToggleContextKey: RawContextKey<boolean> | undefined;\n\tprivate collapseAllToggleContext: IContextKey<boolean> | undefined;\n\tprivate refreshContextKey: RawContextKey<boolean> | undefined;\n\tprivate refreshContext: IContextKey<boolean> | undefined;\n\n\tprivate focused = false;\n\tprivate domNode!: HTMLElement;\n\tprivate treeContainer: HTMLElement | undefined;\n\tprivate _messageValue:\n\t\t| string\n\t\t| { element: HTMLElement; disposables: DisposableStore }\n\t\t| undefined;\n\tprivate _canSelectMany = false;\n\tprivate _manuallyManageCheckboxes = false;\n\tprivate messageElement: HTMLElement | undefined;\n\tprivate tree: Tree | undefined;\n\tprivate treeLabels: ResourceLabels | undefined;\n\tprivate treeViewDnd: CustomTreeViewDragAndDrop | undefined;\n\tprivate _container: HTMLElement | undefined;\n\n\tprivate root: ITreeItem;\n\tprivate markdownRenderer: MarkdownRenderer | undefined;\n\tprivate elementsToRefresh: ITreeItem[] = [];\n\tprivate lastSelection: readonly ITreeItem[] = [];\n\tprivate lastActive: ITreeItem;\n\n\tprivate readonly _onDidExpandItem: Emitter<ITreeItem> = this._register(\n\t\tnew Emitter<ITreeItem>(),\n\t);\n\treadonly onDidExpandItem: Event<ITreeItem> = this._onDidExpandItem.event;\n\n\tprivate readonly _onDidCollapseItem: Emitter<ITreeItem> = this._register(\n\t\tnew Emitter<ITreeItem>(),\n\t);\n\treadonly onDidCollapseItem: Event<ITreeItem> =\n\t\tthis._onDidCollapseItem.event;\n\n\tprivate _onDidChangeSelectionAndFocus: Emitter<{\n\t\tselection: readonly ITreeItem[];\n\t\tfocus: ITreeItem;\n\t}> = this._register(\n\t\tnew Emitter<{ selection: readonly ITreeItem[]; focus: ITreeItem }>(),\n\t);\n\treadonly onDidChangeSelectionAndFocus: Event<{\n\t\tselection: readonly ITreeItem[];\n\t\tfocus: ITreeItem;\n\t}> = this._onDidChangeSelectionAndFocus.event;\n\n\tprivate readonly _onDidChangeVisibility: Emitter<boolean> = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\treadonly onDidChangeVisibility: Event<boolean> =\n\t\tthis._onDidChangeVisibility.event;\n\n\tprivate readonly _onDidChangeActions: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeActions: Event<void> = this._onDidChangeActions.event;\n\n\tprivate readonly _onDidChangeWelcomeState: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeWelcomeState: Event<void> =\n\t\tthis._onDidChangeWelcomeState.event;\n\n\tprivate readonly _onDidChangeTitle: Emitter<string> = this._register(\n\t\tnew Emitter<string>(),\n\t);\n\treadonly onDidChangeTitle: Event<string> = this._onDidChangeTitle.event;\n\n\tprivate readonly _onDidChangeDescription: Emitter<string | undefined> =\n\t\tthis._register(new Emitter<string | undefined>());\n\treadonly onDidChangeDescription: Event<string | undefined> =\n\t\tthis._onDidChangeDescription.event;\n\n\tprivate readonly _onDidChangeCheckboxState: Emitter<readonly ITreeItem[]> =\n\t\tthis._register(new Emitter<readonly ITreeItem[]>());\n\treadonly onDidChangeCheckboxState: Event<readonly ITreeItem[]> =\n\t\tthis._onDidChangeCheckboxState.event;\n\n\tprivate readonly _onDidCompleteRefresh: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\n\tconstructor(\n\t\treadonly id: string,\n\t\tprivate _title: string,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProgressService protected readonly progressService: IProgressService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IOpenerService private readonly openerService: IOpenerService\n\t) {\n\t\tsuper();\n\t\tthis.root = new Root();\n\t\tthis.lastActive = this.root;\n\t\t// Try not to add anything that could be costly to this constructor. It gets called once per tree view\n\t\t// during startup, and anything added here can affect performance.\n\t}\n\n\tprivate _isInitialized = false;\n\tprivate initialize() {\n\t\tif (this._isInitialized) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isInitialized = true;\n\n\t\t// Remember when adding to this method that it isn't called until the the view is visible, meaning that\n\t\t// properties could be set and events could be fired before we're initialized and that this needs to be handled.\n\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.initializeShowCollapseAllAction();\n\t\t\tthis.initializeCollapseAllToggle();\n\t\t\tthis.initializeShowRefreshAction();\n\t\t});\n\n\t\tthis.treeViewDnd = this.instantiationService.createInstance(\n\t\t\tCustomTreeViewDragAndDrop,\n\t\t\tthis.id,\n\t\t);\n\t\tif (this._dragAndDropController) {\n\t\t\tthis.treeViewDnd.controller = this._dragAndDropController;\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(\"explorer.decorations\")) {\n\t\t\t\t\tthis.doRefresh([this.root]); /** soft refresh **/\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.viewDescriptorService.onDidChangeLocation(\n\t\t\t\t({ views, from, to }) => {\n\t\t\t\t\tif (views.some((v) => v.id === this.id)) {\n\t\t\t\t\t\tthis.tree?.updateOptions({\n\t\t\t\t\t\t\toverrideStyles: getLocationBasedViewColors(\n\t\t\t\t\t\t\t\tthis.viewLocation,\n\t\t\t\t\t\t\t).listOverrideStyles,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis.registerActions();\n\n\t\tthis.create();\n\t}\n\n\tget viewContainer(): ViewContainer {\n\t\treturn this.viewDescriptorService.getViewContainerByViewId(this.id)!;\n\t}\n\n\tget viewLocation(): ViewContainerLocation {\n\t\treturn this.viewDescriptorService.getViewLocationById(this.id)!;\n\t}\n\tprivate _dragAndDropController: ITreeViewDragAndDropController | undefined;\n\tget dragAndDropController(): ITreeViewDragAndDropController | undefined {\n\t\treturn this._dragAndDropController;\n\t}\n\tset dragAndDropController(dnd: ITreeViewDragAndDropController | undefined) {\n\t\tthis._dragAndDropController = dnd;\n\t\tif (this.treeViewDnd) {\n\t\t\tthis.treeViewDnd.controller = dnd;\n\t\t}\n\t}\n\n\tprivate _dataProvider: ITreeViewDataProvider | undefined;\n\tget dataProvider(): ITreeViewDataProvider | undefined {\n\t\treturn this._dataProvider;\n\t}\n\n\tset dataProvider(dataProvider: ITreeViewDataProvider | undefined) {\n\t\tif (dataProvider) {\n\t\t\tif (this.visible) {\n\t\t\t\tthis.activate();\n\t\t\t}\n\t\t\tconst self = this;\n\t\t\tthis._dataProvider = new (class implements ITreeViewDataProvider {\n\t\t\t\tprivate _isEmpty = true;\n\t\t\t\tprivate _onDidChangeEmpty: Emitter<void> = new Emitter();\n\t\t\t\tpublic onDidChangeEmpty: Event<void> =\n\t\t\t\t\tthis._onDidChangeEmpty.event;\n\n\t\t\t\tget isTreeEmpty(): boolean {\n\t\t\t\t\treturn this._isEmpty;\n\t\t\t\t}\n\n\t\t\t\tasync getChildren(node?: ITreeItem): Promise<ITreeItem[]> {\n\t\t\t\t\tlet children: ITreeItem[];\n\t\t\t\t\tconst checkboxesUpdated: ITreeItem[] = [];\n\t\t\t\t\tif (node && node.children) {\n\t\t\t\t\t\tchildren = node.children;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode = node ?? self.root;\n\t\t\t\t\t\tnode.children = await (node instanceof Root\n\t\t\t\t\t\t\t? dataProvider.getChildren()\n\t\t\t\t\t\t\t: dataProvider.getChildren(node));\n\t\t\t\t\t\tchildren = node.children ?? [];\n\t\t\t\t\t\tchildren.forEach((child) => {\n\t\t\t\t\t\t\tchild.parent = node;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!self.manuallyManageCheckboxes &&\n\t\t\t\t\t\t\t\tnode?.checkbox?.isChecked === true &&\n\t\t\t\t\t\t\t\tchild.checkbox?.isChecked === false\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tchild.checkbox.isChecked = true;\n\t\t\t\t\t\t\t\tcheckboxesUpdated.push(child);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (node instanceof Root) {\n\t\t\t\t\t\tconst oldEmpty = this._isEmpty;\n\t\t\t\t\t\tthis._isEmpty = children.length === 0;\n\t\t\t\t\t\tif (oldEmpty !== this._isEmpty) {\n\t\t\t\t\t\t\tthis._onDidChangeEmpty.fire();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (checkboxesUpdated.length > 0) {\n\t\t\t\t\t\tself._onDidChangeCheckboxState.fire(checkboxesUpdated);\n\t\t\t\t\t}\n\t\t\t\t\treturn children;\n\t\t\t\t}\n\t\t\t})();\n\t\t\tif (this._dataProvider.onDidChangeEmpty) {\n\t\t\t\tthis._register(\n\t\t\t\t\tthis._dataProvider.onDidChangeEmpty(() => {\n\t\t\t\t\t\tthis.updateCollapseAllToggle();\n\t\t\t\t\t\tthis._onDidChangeWelcomeState.fire();\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.updateMessage();\n\t\t\tthis.refresh();\n\t\t} else {\n\t\t\tthis._dataProvider = undefined;\n\t\t\tthis.treeDisposables.clear();\n\t\t\tthis.activated = false;\n\t\t\tthis.updateMessage();\n\t\t}\n\n\t\tthis._onDidChangeWelcomeState.fire();\n\t}\n\n\tprivate _message: string | IMarkdownString | undefined;\n\tget message(): string | IMarkdownString | undefined {\n\t\treturn this._message;\n\t}\n\n\tset message(message: string | IMarkdownString | undefined) {\n\t\tthis._message = message;\n\t\tthis.updateMessage();\n\t\tthis._onDidChangeWelcomeState.fire();\n\t}\n\n\tget title(): string {\n\t\treturn this._title;\n\t}\n\n\tset title(name: string) {\n\t\tthis._title = name;\n\t\tthis._onDidChangeTitle.fire(this._title);\n\t}\n\n\tprivate _description: string | undefined;\n\tget description(): string | undefined {\n\t\treturn this._description;\n\t}\n\n\tset description(description: string | undefined) {\n\t\tthis._description = description;\n\t\tthis._onDidChangeDescription.fire(this._description);\n\t}\n\n\tprivate _badge: IViewBadge | undefined;\n\tprivate readonly _activity = this._register(\n\t\tnew MutableDisposable<IDisposable>(),\n\t);\n\n\tget badge(): IViewBadge | undefined {\n\t\treturn this._badge;\n\t}\n\n\tset badge(badge: IViewBadge | undefined) {\n\t\tif (\n\t\t\tthis._badge?.value === badge?.value &&\n\t\t\tthis._badge?.tooltip === badge?.tooltip\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._badge = badge;\n\t\tif (badge) {\n\t\t\tconst activity = {\n\t\t\t\tbadge: new NumberBadge(badge.value, () => badge.tooltip),\n\t\t\t\tpriority: 50,\n\t\t\t};\n\t\t\tthis._activity.value = this.activityService.showViewActivity(\n\t\t\t\tthis.id,\n\t\t\t\tactivity,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._activity.clear();\n\t\t}\n\t}\n\n\tget canSelectMany(): boolean {\n\t\treturn this._canSelectMany;\n\t}\n\n\tset canSelectMany(canSelectMany: boolean) {\n\t\tconst oldCanSelectMany = this._canSelectMany;\n\t\tthis._canSelectMany = canSelectMany;\n\t\tif (this._canSelectMany !== oldCanSelectMany) {\n\t\t\tthis.tree?.updateOptions({\n\t\t\t\tmultipleSelectionSupport: this.canSelectMany,\n\t\t\t});\n\t\t}\n\t}\n\n\tget manuallyManageCheckboxes(): boolean {\n\t\treturn this._manuallyManageCheckboxes;\n\t}\n\n\tset manuallyManageCheckboxes(manuallyManageCheckboxes: boolean) {\n\t\tthis._manuallyManageCheckboxes = manuallyManageCheckboxes;\n\t}\n\n\tget hasIconForParentNode(): boolean {\n\t\treturn this._hasIconForParentNode;\n\t}\n\n\tget hasIconForLeafNode(): boolean {\n\t\treturn this._hasIconForLeafNode;\n\t}\n\n\tget visible(): boolean {\n\t\treturn this.isVisible;\n\t}\n\n\tprivate initializeShowCollapseAllAction(startingValue = false) {\n\t\tif (!this.collapseAllContext) {\n\t\t\tthis.collapseAllContextKey = new RawContextKey<boolean>(\n\t\t\t\t`treeView.${this.id}.enableCollapseAll`,\n\t\t\t\tstartingValue,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"treeView.enableCollapseAll\",\n\t\t\t\t\t\"Whether the the tree view with id {0} enables collapse all.\",\n\t\t\t\t\tthis.id,\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.collapseAllContext = this.collapseAllContextKey.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\t}\n\t\treturn true;\n\t}\n\n\tget showCollapseAllAction(): boolean {\n\t\tthis.initializeShowCollapseAllAction();\n\t\treturn !!this.collapseAllContext?.get();\n\t}\n\n\tset showCollapseAllAction(showCollapseAllAction: boolean) {\n\t\tthis.initializeShowCollapseAllAction(showCollapseAllAction);\n\t\tthis.collapseAllContext?.set(showCollapseAllAction);\n\t}\n\n\tprivate initializeShowRefreshAction(startingValue = false) {\n\t\tif (!this.refreshContext) {\n\t\t\tthis.refreshContextKey = new RawContextKey<boolean>(\n\t\t\t\t`treeView.${this.id}.enableRefresh`,\n\t\t\t\tstartingValue,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"treeView.enableRefresh\",\n\t\t\t\t\t\"Whether the tree view with id {0} enables refresh.\",\n\t\t\t\t\tthis.id,\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.refreshContext = this.refreshContextKey.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\t}\n\t}\n\n\tget showRefreshAction(): boolean {\n\t\tthis.initializeShowRefreshAction();\n\t\treturn !!this.refreshContext?.get();\n\t}\n\n\tset showRefreshAction(showRefreshAction: boolean) {\n\t\tthis.initializeShowRefreshAction(showRefreshAction);\n\t\tthis.refreshContext?.set(showRefreshAction);\n\t}\n\n\tprivate registerActions() {\n\t\tconst that = this;\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: `workbench.actions.treeView.${that.id}.refresh`,\n\t\t\t\t\t\t\ttitle: localize(\"refresh\", \"Refresh\"),\n\t\t\t\t\t\t\tmenu: {\n\t\t\t\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.equals(\"view\", that.id),\n\t\t\t\t\t\t\t\t\tthat.refreshContextKey,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\t\t\t\torder: Number.MAX_SAFE_INTEGER - 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ticon: Codicon.refresh,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tasync run(): Promise<void> {\n\t\t\t\t\t\treturn that.refresh();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tregisterAction2(\n\t\t\t\tclass extends Action2 {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: `workbench.actions.treeView.${that.id}.collapseAll`,\n\t\t\t\t\t\t\ttitle: localize(\"collapseAll\", \"Collapse All\"),\n\t\t\t\t\t\t\tmenu: {\n\t\t\t\t\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.equals(\"view\", that.id),\n\t\t\t\t\t\t\t\t\tthat.collapseAllContextKey,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tgroup: \"navigation\",\n\t\t\t\t\t\t\t\torder: Number.MAX_SAFE_INTEGER,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tprecondition: that.collapseAllToggleContextKey,\n\t\t\t\t\t\t\ticon: Codicon.collapseAll,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tasync run(): Promise<void> {\n\t\t\t\t\t\tif (that.tree) {\n\t\t\t\t\t\t\treturn new CollapseAllAction<\n\t\t\t\t\t\t\t\tITreeItem,\n\t\t\t\t\t\t\t\tITreeItem,\n\t\t\t\t\t\t\t\tFuzzyScore\n\t\t\t\t\t\t\t>(that.tree, true).run();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tsetVisibility(isVisible: boolean): void {\n\t\t// Throughout setVisibility we need to check if the tree view's data provider still exists.\n\t\t// This can happen because the `getChildren` call to the extension can return\n\t\t// after the tree has been disposed.\n\n\t\tthis.initialize();\n\t\tisVisible = !!isVisible;\n\t\tif (this.isVisible === isVisible) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isVisible = isVisible;\n\n\t\tif (this.tree) {\n\t\t\tif (this.isVisible) {\n\t\t\t\tDOM.show(this.tree.getHTMLElement());\n\t\t\t} else {\n\t\t\t\tDOM.hide(this.tree.getHTMLElement()); // make sure the tree goes out of the tabindex world by hiding it\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.isVisible &&\n\t\t\t\tthis.elementsToRefresh.length &&\n\t\t\t\tthis.dataProvider\n\t\t\t) {\n\t\t\t\tthis.doRefresh(this.elementsToRefresh);\n\t\t\t\tthis.elementsToRefresh = [];\n\t\t\t}\n\t\t}\n\n\t\tsetTimeout0(() => {\n\t\t\tif (this.dataProvider) {\n\t\t\t\tthis._onDidChangeVisibility.fire(this.isVisible);\n\t\t\t}\n\t\t});\n\n\t\tif (this.visible) {\n\t\t\tthis.activate();\n\t\t}\n\t}\n\n\tprotected activated = false;\n\tprotected abstract activate(): void;\n\n\tfocus(reveal = true, revealItem?: ITreeItem): void {\n\t\tif (this.tree && this.root.children && this.root.children.length > 0) {\n\t\t\t// Make sure the current selected element is revealed\n\t\t\tconst element = revealItem ?? this.tree.getSelection()[0];\n\t\t\tif (element && reveal) {\n\t\t\t\tthis.tree.reveal(element, 0.5);\n\t\t\t}\n\n\t\t\t// Pass Focus to Viewer\n\t\t\tthis.tree.domFocus();\n\t\t} else if (\n\t\t\tthis.tree &&\n\t\t\tthis.treeContainer &&\n\t\t\t!this.treeContainer.classList.contains(\"hide\")\n\t\t) {\n\t\t\tthis.tree.domFocus();\n\t\t} else {\n\t\t\tthis.domNode.focus();\n\t\t}\n\t}\n\n\tshow(container: HTMLElement): void {\n\t\tthis._container = container;\n\t\tDOM.append(container, this.domNode);\n\t}\n\n\tprivate create() {\n\t\tthis.domNode = DOM.$(\".tree-explorer-viewlet-tree-view\");\n\t\tthis.messageElement = DOM.append(this.domNode, DOM.$(\".message\"));\n\t\tthis.updateMessage();\n\t\tthis.treeContainer = DOM.append(\n\t\t\tthis.domNode,\n\t\t\tDOM.$(\".customview-tree\"),\n\t\t);\n\t\tthis.treeContainer.classList.add(\n\t\t\t\"file-icon-themable-tree\",\n\t\t\t\"show-file-icons\",\n\t\t);\n\t\tconst focusTracker = this._register(DOM.trackFocus(this.domNode));\n\t\tthis._register(focusTracker.onDidFocus(() => (this.focused = true)));\n\t\tthis._register(focusTracker.onDidBlur(() => (this.focused = false)));\n\t}\n\n\tprivate readonly treeDisposables: DisposableStore = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprotected createTree() {\n\t\tthis.treeDisposables.clear();\n\t\tconst actionViewItemProvider = createActionViewItem.bind(\n\t\t\tundefined,\n\t\t\tthis.instantiationService,\n\t\t);\n\t\tconst treeMenus = this.treeDisposables.add(\n\t\t\tthis.instantiationService.createInstance(TreeMenus, this.id),\n\t\t);\n\t\tthis.treeLabels = this.treeDisposables.add(\n\t\t\tthis.instantiationService.createInstance(ResourceLabels, this),\n\t\t);\n\t\tconst dataSource = this.instantiationService.createInstance(\n\t\t\tTreeDataSource,\n\t\t\tthis,\n\t\t\t<T>(task: Promise<T>) =>\n\t\t\t\tthis.progressService.withProgress(\n\t\t\t\t\t{ location: this.id },\n\t\t\t\t\t() => task,\n\t\t\t\t),\n\t\t);\n\t\tconst aligner = new Aligner(this.themeService);\n\t\tconst checkboxStateHandler = this.treeDisposables.add(\n\t\t\tnew CheckboxStateHandler(),\n\t\t);\n\t\tconst renderer = this.instantiationService.createInstance(\n\t\t\tTreeRenderer,\n\t\t\tthis.id,\n\t\t\ttreeMenus,\n\t\t\tthis.treeLabels,\n\t\t\tactionViewItemProvider,\n\t\t\taligner,\n\t\t\tcheckboxStateHandler,\n\t\t\t() => this.manuallyManageCheckboxes,\n\t\t);\n\t\tthis.treeDisposables.add(\n\t\t\trenderer.onDidChangeCheckboxState((e) =>\n\t\t\t\tthis._onDidChangeCheckboxState.fire(e),\n\t\t\t),\n\t\t);\n\n\t\tconst widgetAriaLabel = this._title;\n\n\t\tthis.tree = this.treeDisposables.add(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tTree,\n\t\t\t\tthis.id,\n\t\t\t\tthis.treeContainer!,\n\t\t\t\tnew TreeViewDelegate(),\n\t\t\t\t[renderer],\n\t\t\t\tdataSource,\n\t\t\t\t{\n\t\t\t\t\tidentityProvider: new TreeViewIdentityProvider(),\n\t\t\t\t\taccessibilityProvider: {\n\t\t\t\t\t\tgetAriaLabel(element: ITreeItem): string | null {\n\t\t\t\t\t\t\tif (element.accessibilityInformation) {\n\t\t\t\t\t\t\t\treturn element.accessibilityInformation.label;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (isString(element.tooltip)) {\n\t\t\t\t\t\t\t\treturn element.tooltip;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (element.resourceUri && !element.label) {\n\t\t\t\t\t\t\t\t\t// The custom tree has no good information on what should be used for the aria label.\n\t\t\t\t\t\t\t\t\t// Allow the tree widget's default aria label to be used.\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet buildAriaLabel = \"\";\n\t\t\t\t\t\t\t\tif (element.label) {\n\t\t\t\t\t\t\t\t\tbuildAriaLabel += element.label.label + \" \";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (element.description) {\n\t\t\t\t\t\t\t\t\tbuildAriaLabel += element.description;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn buildAriaLabel;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetRole(element: ITreeItem): AriaRole | undefined {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\telement.accessibilityInformation?.role ??\n\t\t\t\t\t\t\t\t\"treeitem\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetWidgetAriaLabel(): string {\n\t\t\t\t\t\t\treturn widgetAriaLabel;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\t\t\tgetKeyboardNavigationLabel: (item: ITreeItem) => {\n\t\t\t\t\t\t\treturn item.label\n\t\t\t\t\t\t\t\t? item.label.label\n\t\t\t\t\t\t\t\t: item.resourceUri\n\t\t\t\t\t\t\t\t\t? basename(URI.revive(item.resourceUri))\n\t\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\texpandOnlyOnTwistieClick: (e: ITreeItem) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t!!e.command ||\n\t\t\t\t\t\t\t!!e.checkbox ||\n\t\t\t\t\t\t\tthis.configurationService.getValue<\n\t\t\t\t\t\t\t\t\"singleClick\" | \"doubleClick\"\n\t\t\t\t\t\t\t>(\"workbench.tree.expandMode\") === \"doubleClick\"\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tcollapseByDefault: (e: ITreeItem): boolean => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\te.collapsibleState !==\n\t\t\t\t\t\t\tTreeItemCollapsibleState.Expanded\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tmultipleSelectionSupport: this.canSelectMany,\n\t\t\t\t\tdnd: this.treeViewDnd,\n\t\t\t\t\toverrideStyles: getLocationBasedViewColors(\n\t\t\t\t\t\tthis.viewLocation,\n\t\t\t\t\t).listOverrideStyles,\n\t\t\t\t},\n\t\t\t) as WorkbenchAsyncDataTree<ITreeItem, ITreeItem, FuzzyScore>,\n\t\t);\n\n\t\tthis.treeDisposables.add(\n\t\t\trenderer.onDidChangeMenuContext((e) =>\n\t\t\t\te.forEach((e) => this.tree?.rerender(e)),\n\t\t\t),\n\t\t);\n\n\t\tthis.treeDisposables.add(this.tree);\n\t\ttreeMenus.setContextKeyService(this.tree.contextKeyService);\n\t\taligner.tree = this.tree;\n\t\tconst actionRunner = new MultipleSelectionActionRunner(\n\t\t\tthis.notificationService,\n\t\t\t() => this.tree!.getSelection(),\n\t\t);\n\t\trenderer.actionRunner = actionRunner;\n\n\t\tthis.tree.contextKeyService.createKey<boolean>(this.id, true);\n\t\tconst customTreeKey = RawCustomTreeViewContextKey.bindTo(\n\t\t\tthis.tree.contextKeyService,\n\t\t);\n\t\tcustomTreeKey.set(true);\n\t\tthis.treeDisposables.add(\n\t\t\tthis.tree.onContextMenu((e) =>\n\t\t\t\tthis.onContextMenu(treeMenus, e, actionRunner),\n\t\t\t),\n\t\t);\n\n\t\tthis.treeDisposables.add(\n\t\t\tthis.tree.onDidChangeSelection((e) => {\n\t\t\t\tthis.lastSelection = e.elements;\n\t\t\t\tthis.lastActive = this.tree?.getFocus()[0] ?? this.lastActive;\n\t\t\t\tthis._onDidChangeSelectionAndFocus.fire({\n\t\t\t\t\tselection: this.lastSelection,\n\t\t\t\t\tfocus: this.lastActive,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t\tthis.treeDisposables.add(\n\t\t\tthis.tree.onDidChangeFocus((e) => {\n\t\t\t\tif (e.elements.length && e.elements[0] !== this.lastActive) {\n\t\t\t\t\tthis.lastActive = e.elements[0];\n\t\t\t\t\tthis.lastSelection =\n\t\t\t\t\t\tthis.tree?.getSelection() ?? this.lastSelection;\n\t\t\t\t\tthis._onDidChangeSelectionAndFocus.fire({\n\t\t\t\t\t\tselection: this.lastSelection,\n\t\t\t\t\t\tfocus: this.lastActive,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.treeDisposables.add(\n\t\t\tthis.tree.onDidChangeCollapseState((e) => {\n\t\t\t\tif (!e.node.element) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst element: ITreeItem = Array.isArray(e.node.element.element)\n\t\t\t\t\t? e.node.element.element[0]\n\t\t\t\t\t: e.node.element.element;\n\t\t\t\tif (e.node.collapsed) {\n\t\t\t\t\tthis._onDidCollapseItem.fire(element);\n\t\t\t\t} else {\n\t\t\t\t\tthis._onDidExpandItem.fire(element);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.tree.setInput(this.root).then(() => this.updateContentAreas());\n\n\t\tthis.treeDisposables.add(\n\t\t\tthis.tree.onDidOpen(async (e) => {\n\t\t\t\tif (!e.browserEvent) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\te.browserEvent.target &&\n\t\t\t\t\t(e.browserEvent.target as HTMLElement).classList.contains(\n\t\t\t\t\t\tTreeItemCheckbox.checkboxClass,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst selection = this.tree!.getSelection();\n\t\t\t\tconst command = await this.resolveCommand(\n\t\t\t\t\tselection.length === 1 ? selection[0] : undefined,\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\tcommand &&\n\t\t\t\t\tisTreeCommandEnabled(command, this.contextKeyService)\n\t\t\t\t) {\n\t\t\t\t\tlet args = command.arguments || [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tcommand.id === API_OPEN_EDITOR_COMMAND_ID ||\n\t\t\t\t\t\tcommand.id === API_OPEN_DIFF_EDITOR_COMMAND_ID\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Some commands owned by us should receive the\n\t\t\t\t\t\t// `IOpenEvent` as context to open properly\n\t\t\t\t\t\targs = [...args, e];\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.commandService.executeCommand(\n\t\t\t\t\t\t\tcommand.id,\n\t\t\t\t\t\t\t...args,\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.notificationService.error(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.treeDisposables.add(\n\t\t\ttreeMenus.onDidChange((changed) => {\n\t\t\t\tif (this.tree?.hasNode(changed)) {\n\t\t\t\t\tthis.tree?.rerender(changed);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async resolveCommand(\n\t\telement: ITreeItem | undefined,\n\t): Promise<TreeCommand | undefined> {\n\t\tlet command = element?.command;\n\t\tif (element && !command) {\n\t\t\tif (element instanceof ResolvableTreeItem && element.hasResolve) {\n\t\t\t\tawait element.resolve(CancellationToken.None);\n\t\t\t\tcommand = element.command;\n\t\t\t}\n\t\t}\n\t\treturn command;\n\t}\n\n\tprivate onContextMenu(\n\t\ttreeMenus: TreeMenus,\n\t\ttreeEvent: ITreeContextMenuEvent<ITreeItem>,\n\t\tactionRunner: MultipleSelectionActionRunner,\n\t): void {\n\t\tthis.hoverService.hideHover();\n\t\tconst node: ITreeItem | null = treeEvent.element;\n\t\tif (node === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst event: UIEvent = treeEvent.browserEvent;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tthis.tree!.setFocus([node]);\n\t\tlet selected = this.canSelectMany ? this.getSelection() : [];\n\t\tif (!selected.find((item) => item.handle === node.handle)) {\n\t\t\tselected = [node];\n\t\t}\n\n\t\tconst actions = treeMenus.getResourceContextActions(selected);\n\t\tif (!actions.length) {\n\t\t\treturn;\n\t\t}\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => treeEvent.anchor,\n\n\t\t\tgetActions: () => actions,\n\n\t\t\tgetActionViewItem: (action) => {\n\t\t\t\tconst keybinding = this.keybindingService.lookupKeybinding(\n\t\t\t\t\taction.id,\n\t\t\t\t);\n\t\t\t\tif (keybinding) {\n\t\t\t\t\treturn new ActionViewItem(action, action, {\n\t\t\t\t\t\tlabel: true,\n\t\t\t\t\t\tkeybinding: keybinding.getLabel(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\n\t\t\tonHide: (wasCancelled?: boolean) => {\n\t\t\t\tif (wasCancelled) {\n\t\t\t\t\tthis.tree!.domFocus();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetActionsContext: () =>\n\t\t\t\t({\n\t\t\t\t\t$treeViewId: this.id,\n\t\t\t\t\t$treeItemHandle: node.handle,\n\t\t\t\t}) satisfies TreeViewItemHandleArg,\n\n\t\t\tactionRunner,\n\t\t});\n\t}\n\n\tprotected updateMessage(): void {\n\t\tif (this._message) {\n\t\t\tthis.showMessage(this._message);\n\t\t} else if (this.dataProvider) {\n\t\t\tthis.hideMessage();\n\t\t} else {\n\t\t\tthis.showMessage(noDataProviderMessage);\n\t\t}\n\t\tthis.updateContentAreas();\n\t}\n\n\tprivate processMessage(\n\t\tmessage: IMarkdownString,\n\t\tdisposables: DisposableStore,\n\t): HTMLElement {\n\t\tconst lines = message.value.split(\"\\n\");\n\t\tconst result: (IMarkdownRenderResult | HTMLElement)[] = [];\n\t\tlet hasFoundButton = false;\n\t\tfor (const line of lines) {\n\t\t\tconst linkedText = parseLinkedText(line);\n\n\t\t\tif (\n\t\t\t\tlinkedText.nodes.length === 1 &&\n\t\t\t\ttypeof linkedText.nodes[0] !== \"string\"\n\t\t\t) {\n\t\t\t\tconst node = linkedText.nodes[0];\n\t\t\t\tconst buttonContainer = document.createElement(\"div\");\n\t\t\t\tbuttonContainer.classList.add(\"button-container\");\n\t\t\t\tconst button = new Button(buttonContainer, {\n\t\t\t\t\ttitle: node.title,\n\t\t\t\t\tsecondary: hasFoundButton,\n\t\t\t\t\tsupportIcons: true,\n\t\t\t\t\t...defaultButtonStyles,\n\t\t\t\t});\n\t\t\t\tbutton.label = node.label;\n\t\t\t\tbutton.onDidClick(\n\t\t\t\t\t(_) => {\n\t\t\t\t\t\tthis.openerService.open(node.href, {\n\t\t\t\t\t\t\tallowCommands: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\tdisposables,\n\t\t\t\t);\n\n\t\t\t\tconst href = URI.parse(node.href);\n\t\t\t\tif (href.scheme === Schemas.command) {\n\t\t\t\t\tconst preConditions = commandPreconditions(href.path);\n\t\t\t\t\tif (preConditions) {\n\t\t\t\t\t\tbutton.enabled =\n\t\t\t\t\t\t\tthis.contextKeyService.contextMatchesRules(\n\t\t\t\t\t\t\t\tpreConditions,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\t\tthis.contextKeyService.onDidChangeContext((e) => {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\te.affectsSome(new Set(preConditions.keys()))\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tbutton.enabled =\n\t\t\t\t\t\t\t\t\t\tthis.contextKeyService.contextMatchesRules(\n\t\t\t\t\t\t\t\t\t\t\tpreConditions,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdisposables.add(button);\n\t\t\t\thasFoundButton = true;\n\t\t\t\tresult.push(buttonContainer);\n\t\t\t} else {\n\t\t\t\thasFoundButton = false;\n\t\t\t\tconst rendered = this.markdownRenderer!.render(\n\t\t\t\t\tnew MarkdownString(line, {\n\t\t\t\t\t\tisTrusted: message.isTrusted,\n\t\t\t\t\t\tsupportThemeIcons: message.supportThemeIcons,\n\t\t\t\t\t\tsupportHtml: message.supportHtml,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tresult.push(rendered.element);\n\t\t\t\tdisposables.add(rendered);\n\t\t\t}\n\t\t}\n\n\t\tconst container = document.createElement(\"div\");\n\t\tcontainer.classList.add(\"rendered-message\");\n\t\tfor (const child of result) {\n\t\t\tif (DOM.isHTMLElement(child)) {\n\t\t\t\tcontainer.appendChild(child);\n\t\t\t} else {\n\t\t\t\tcontainer.appendChild(child.element);\n\t\t\t}\n\t\t}\n\t\treturn container;\n\t}\n\n\tprivate showMessage(message: string | IMarkdownString): void {\n\t\tif (isRenderedMessageValue(this._messageValue)) {\n\t\t\tthis._messageValue.disposables.dispose();\n\t\t}\n\t\tif (isMarkdownString(message) && !this.markdownRenderer) {\n\t\t\tthis.markdownRenderer = this.instantiationService.createInstance(\n\t\t\t\tMarkdownRenderer,\n\t\t\t\t{},\n\t\t\t);\n\t\t}\n\t\tif (isMarkdownString(message)) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst renderedMessage = this.processMessage(message, disposables);\n\t\t\tthis._messageValue = { element: renderedMessage, disposables };\n\t\t} else {\n\t\t\tthis._messageValue = message;\n\t\t}\n\t\tif (!this.messageElement) {\n\t\t\treturn;\n\t\t}\n\t\tthis.messageElement.classList.remove(\"hide\");\n\t\tthis.resetMessageElement();\n\t\tif (\n\t\t\ttypeof this._messageValue === \"string\" &&\n\t\t\t!isFalsyOrWhitespace(this._messageValue)\n\t\t) {\n\t\t\tthis.messageElement.textContent = this._messageValue;\n\t\t} else if (isRenderedMessageValue(this._messageValue)) {\n\t\t\tthis.messageElement.appendChild(this._messageValue.element);\n\t\t}\n\t\tthis.layout(this._height, this._width);\n\t}\n\n\tprivate hideMessage(): void {\n\t\tthis.resetMessageElement();\n\t\tthis.messageElement?.classList.add(\"hide\");\n\t\tthis.layout(this._height, this._width);\n\t}\n\n\tprivate resetMessageElement(): void {\n\t\tif (this.messageElement) {\n\t\t\tDOM.clearNode(this.messageElement);\n\t\t}\n\t}\n\n\tprivate _height = 0;\n\tprivate _width = 0;\n\tlayout(height: number, width: number) {\n\t\tif (height && width && this.messageElement && this.treeContainer) {\n\t\t\tthis._height = height;\n\t\t\tthis._width = width;\n\t\t\tconst treeHeight = height - DOM.getTotalHeight(this.messageElement);\n\t\t\tthis.treeContainer.style.height = treeHeight + \"px\";\n\t\t\tthis.tree?.layout(treeHeight, width);\n\t\t}\n\t}\n\n\tgetOptimalWidth(): number {\n\t\tif (this.tree) {\n\t\t\tconst parentNode = this.tree.getHTMLElement();\n\t\t\tconst childNodes = ([] as HTMLElement[]).slice.call(\n\t\t\t\tparentNode.querySelectorAll(\".outline-item-label > a\"),\n\t\t\t);\n\t\t\treturn DOM.getLargestChildWidth(parentNode, childNodes);\n\t\t}\n\t\treturn 0;\n\t}\n\n\tasync refresh(elements?: readonly ITreeItem[]): Promise<void> {\n\t\tif (this.dataProvider && this.tree) {\n\t\t\tif (this.refreshing) {\n\t\t\t\tawait Event.toPromise(this._onDidCompleteRefresh.event);\n\t\t\t}\n\t\t\tif (!elements) {\n\t\t\t\telements = [this.root];\n\t\t\t\t// remove all waiting elements to refresh if root is asked to refresh\n\t\t\t\tthis.elementsToRefresh = [];\n\t\t\t}\n\t\t\tfor (const element of elements) {\n\t\t\t\telement.children = undefined; // reset children\n\t\t\t}\n\t\t\tif (this.isVisible) {\n\t\t\t\treturn this.doRefresh(elements);\n\t\t\t} else if (this.elementsToRefresh.length) {\n\t\t\t\tconst seen: Set<string> = new Set<string>();\n\t\t\t\tthis.elementsToRefresh.forEach((element) =>\n\t\t\t\t\tseen.add(element.handle),\n\t\t\t\t);\n\t\t\t\tfor (const element of elements) {\n\t\t\t\t\tif (!seen.has(element.handle)) {\n\t\t\t\t\t\tthis.elementsToRefresh.push(element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.elementsToRefresh.push(...elements);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync expand(itemOrItems: ITreeItem | ITreeItem[]): Promise<void> {\n\t\tconst tree = this.tree;\n\t\tif (!tree) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\titemOrItems = Array.isArray(itemOrItems)\n\t\t\t\t? itemOrItems\n\t\t\t\t: [itemOrItems];\n\t\t\tfor (const element of itemOrItems) {\n\t\t\t\tawait tree.expand(element, false);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// The extension could have changed the tree during the reveal.\n\t\t\t// Because of that, we ignore errors.\n\t\t}\n\t}\n\n\tisCollapsed(item: ITreeItem): boolean {\n\t\treturn !!this.tree?.isCollapsed(item);\n\t}\n\n\tsetSelection(items: ITreeItem[]): void {\n\t\tthis.tree?.setSelection(items);\n\t}\n\n\tgetSelection(): ITreeItem[] {\n\t\treturn this.tree?.getSelection() ?? [];\n\t}\n\n\tsetFocus(item?: ITreeItem): void {\n\t\tif (this.tree) {\n\t\t\tif (item) {\n\t\t\t\tthis.focus(true, item);\n\t\t\t\tthis.tree.setFocus([item]);\n\t\t\t} else if (this.tree.getFocus().length === 0) {\n\t\t\t\tthis.tree.setFocus([]);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync reveal(item: ITreeItem): Promise<void> {\n\t\tif (this.tree) {\n\t\t\treturn this.tree.reveal(item);\n\t\t}\n\t}\n\n\tprivate refreshing = false;\n\tprivate async doRefresh(elements: readonly ITreeItem[]): Promise<void> {\n\t\tconst tree = this.tree;\n\t\tif (tree && this.visible) {\n\t\t\tthis.refreshing = true;\n\t\t\tconst oldSelection = tree.getSelection();\n\t\t\ttry {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\telements.map((element) =>\n\t\t\t\t\t\ttree.updateChildren(element, true, true),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\t// When multiple calls are made to refresh the tree in quick succession,\n\t\t\t\t// we can get a \"Tree element not found\" error. This is expected.\n\t\t\t\t// Ideally this is fixable, so log instead of ignoring so the error is preserved.\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t\tconst newSelection = tree.getSelection();\n\t\t\tif (\n\t\t\t\toldSelection.length !== newSelection.length ||\n\t\t\t\toldSelection.some(\n\t\t\t\t\t(value, index) =>\n\t\t\t\t\t\tvalue.handle !== newSelection[index].handle,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.lastSelection = newSelection;\n\t\t\t\tthis._onDidChangeSelectionAndFocus.fire({\n\t\t\t\t\tselection: this.lastSelection,\n\t\t\t\t\tfocus: this.lastActive,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.refreshing = false;\n\t\t\tthis._onDidCompleteRefresh.fire();\n\t\t\tthis.updateContentAreas();\n\t\t\tif (this.focused) {\n\t\t\t\tthis.focus(false);\n\t\t\t}\n\t\t\tthis.updateCollapseAllToggle();\n\t\t}\n\t}\n\n\tprivate initializeCollapseAllToggle() {\n\t\tif (!this.collapseAllToggleContext) {\n\t\t\tthis.collapseAllToggleContextKey = new RawContextKey<boolean>(\n\t\t\t\t`treeView.${this.id}.toggleCollapseAll`,\n\t\t\t\tfalse,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"treeView.toggleCollapseAll\",\n\t\t\t\t\t\"Whether collapse all is toggled for the tree view with id {0}.\",\n\t\t\t\t\tthis.id,\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.collapseAllToggleContext =\n\t\t\t\tthis.collapseAllToggleContextKey.bindTo(this.contextKeyService);\n\t\t}\n\t}\n\n\tprivate updateCollapseAllToggle() {\n\t\tif (this.showCollapseAllAction) {\n\t\t\tthis.initializeCollapseAllToggle();\n\t\t\tthis.collapseAllToggleContext?.set(\n\t\t\t\t!!this.root.children &&\n\t\t\t\t\tthis.root.children.length > 0 &&\n\t\t\t\t\tthis.root.children.some(\n\t\t\t\t\t\t(value) =>\n\t\t\t\t\t\t\tvalue.collapsibleState !==\n\t\t\t\t\t\t\tTreeItemCollapsibleState.None,\n\t\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateContentAreas(): void {\n\t\tconst isTreeEmpty =\n\t\t\t!this.root.children || this.root.children.length === 0;\n\t\t// Hide tree container only when there is a message and tree is empty and not refreshing\n\t\tif (\n\t\t\tthis._messageValue &&\n\t\t\tisTreeEmpty &&\n\t\t\t!this.refreshing &&\n\t\t\tthis.treeContainer\n\t\t) {\n\t\t\t// If there's a dnd controller then hiding the tree prevents it from being dragged into.\n\t\t\tif (!this.dragAndDropController) {\n\t\t\t\tthis.treeContainer.classList.add(\"hide\");\n\t\t\t}\n\t\t\tthis.domNode.setAttribute(\"tabindex\", \"0\");\n\t\t} else if (this.treeContainer) {\n\t\t\tthis.treeContainer.classList.remove(\"hide\");\n\t\t\tif (this.domNode === DOM.getActiveElement()) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\t\t\tthis.domNode.removeAttribute(\"tabindex\");\n\t\t}\n\t}\n\n\tget container(): HTMLElement | undefined {\n\t\treturn this._container;\n\t}\n}\n\nclass TreeViewIdentityProvider implements IIdentityProvider<ITreeItem> {\n\tgetId(element: ITreeItem): { toString(): string } {\n\t\treturn element.handle;\n\t}\n}\n\nclass TreeViewDelegate implements IListVirtualDelegate<ITreeItem> {\n\tgetHeight(element: ITreeItem): number {\n\t\treturn TreeRenderer.ITEM_HEIGHT;\n\t}\n\n\tgetTemplateId(element: ITreeItem): string {\n\t\treturn TreeRenderer.TREE_TEMPLATE_ID;\n\t}\n}\n\nclass TreeDataSource implements IAsyncDataSource<ITreeItem, ITreeItem> {\n\tconstructor(\n\t\tprivate treeView: ITreeView,\n\t\tprivate withProgress: <T>(task: Promise<T>) => Promise<T>,\n\t) {}\n\n\thasChildren(element: ITreeItem): boolean {\n\t\treturn (\n\t\t\t!!this.treeView.dataProvider &&\n\t\t\telement.collapsibleState !== TreeItemCollapsibleState.None\n\t\t);\n\t}\n\n\tasync getChildren(element: ITreeItem): Promise<ITreeItem[]> {\n\t\tlet result: ITreeItem[] = [];\n\t\tif (this.treeView.dataProvider) {\n\t\t\ttry {\n\t\t\t\tresult =\n\t\t\t\t\t(await this.withProgress(\n\t\t\t\t\t\tthis.treeView.dataProvider.getChildren(element),\n\t\t\t\t\t)) ?? [];\n\t\t\t} catch (e) {\n\t\t\t\tif (!(<string>e.message).startsWith(\"Bad progress location:\")) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\ninterface ITreeExplorerTemplateData {\n\treadonly container: HTMLElement;\n\treadonly resourceLabel: IResourceLabel;\n\treadonly icon: HTMLElement;\n\treadonly checkboxContainer: HTMLElement;\n\tcheckbox?: TreeItemCheckbox;\n\treadonly actionBar: ActionBar;\n}\n\nclass TreeRenderer\n\textends Disposable\n\timplements ITreeRenderer<ITreeItem, FuzzyScore, ITreeExplorerTemplateData>\n{\n\tstatic readonly ITEM_HEIGHT = 22;\n\tstatic readonly TREE_TEMPLATE_ID = \"treeExplorer\";\n\n\tprivate readonly _onDidChangeCheckboxState: Emitter<readonly ITreeItem[]> =\n\t\tthis._register(new Emitter<readonly ITreeItem[]>());\n\treadonly onDidChangeCheckboxState: Event<readonly ITreeItem[]> =\n\t\tthis._onDidChangeCheckboxState.event;\n\n\tprivate _onDidChangeMenuContext: Emitter<readonly ITreeItem[]> =\n\t\tthis._register(new Emitter<readonly ITreeItem[]>());\n\treadonly onDidChangeMenuContext: Event<readonly ITreeItem[]> =\n\t\tthis._onDidChangeMenuContext.event;\n\n\tprivate _actionRunner: MultipleSelectionActionRunner | undefined;\n\tprivate _hoverDelegate: IHoverDelegate;\n\tprivate _hasCheckbox = false;\n\tprivate _renderedElements = new Map<\n\t\tstring,\n\t\t{\n\t\t\toriginal: ITreeNode<ITreeItem, FuzzyScore>;\n\t\t\trendered: ITreeExplorerTemplateData;\n\t\t}[]\n\t>(); // tree item handle to template data\n\n\tconstructor(\n\t\tprivate treeViewId: string,\n\t\tprivate menus: TreeMenus,\n\t\tprivate labels: ResourceLabels,\n\t\tprivate actionViewItemProvider: IActionViewItemProvider,\n\t\tprivate aligner: Aligner,\n\t\tprivate checkboxStateHandler: CheckboxStateHandler,\n\t\tprivate readonly manuallyManageCheckboxes: () => boolean,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._hoverDelegate = this._register(instantiationService.createInstance(WorkbenchHoverDelegate, 'mouse', false, {}));\n\t\tthis._register(this.themeService.onDidFileIconThemeChange(() => this.rerender()));\n\t\tthis._register(this.themeService.onDidColorThemeChange(() => this.rerender()));\n\t\tthis._register(checkboxStateHandler.onDidChangeCheckboxState(items => {\n\t\t\tthis.updateCheckboxes(items);\n\t\t}));\n\t\tthis._register(this.contextKeyService.onDidChangeContext(e => this.onDidChangeContext(e)));\n\t}\n\n\tget templateId(): string {\n\t\treturn TreeRenderer.TREE_TEMPLATE_ID;\n\t}\n\n\tset actionRunner(actionRunner: MultipleSelectionActionRunner) {\n\t\tthis._actionRunner = actionRunner;\n\t}\n\n\trenderTemplate(container: HTMLElement): ITreeExplorerTemplateData {\n\t\tcontainer.classList.add(\"custom-view-tree-node-item\");\n\n\t\tconst checkboxContainer = DOM.append(container, DOM.$(\"\"));\n\t\tconst resourceLabel = this.labels.create(container, {\n\t\t\tsupportHighlights: true,\n\t\t\thoverDelegate: this._hoverDelegate,\n\t\t});\n\t\tconst icon = DOM.prepend(\n\t\t\tresourceLabel.element,\n\t\t\tDOM.$(\".custom-view-tree-node-item-icon\"),\n\t\t);\n\t\tconst actionsContainer = DOM.append(\n\t\t\tresourceLabel.element,\n\t\t\tDOM.$(\".actions\"),\n\t\t);\n\t\tconst actionBar = new ActionBar(actionsContainer, {\n\t\t\tactionViewItemProvider: this.actionViewItemProvider,\n\t\t});\n\n\t\treturn { resourceLabel, icon, checkboxContainer, actionBar, container };\n\t}\n\n\tprivate getHover(\n\t\tlabel: string | undefined,\n\t\tresource: URI | null,\n\t\tnode: ITreeItem,\n\t): string | IManagedHoverTooltipMarkdownString | undefined {\n\t\tif (!(node instanceof ResolvableTreeItem) || !node.hasResolve) {\n\t\t\tif (resource && !node.tooltip) {\n\t\t\t\treturn undefined;\n\t\t\t} else if (node.tooltip === undefined) {\n\t\t\t\treturn label;\n\t\t\t} else if (!isString(node.tooltip)) {\n\t\t\t\treturn {\n\t\t\t\t\tmarkdown: node.tooltip,\n\t\t\t\t\tmarkdownNotSupportedFallback: resource\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: renderMarkdownAsPlaintext(node.tooltip),\n\t\t\t\t}; // Passing undefined as the fallback for a resource falls back to the old native hover\n\t\t\t} else if (node.tooltip !== \"\") {\n\t\t\t\treturn node.tooltip;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tmarkdown:\n\t\t\t\ttypeof node.tooltip === \"string\"\n\t\t\t\t\t? node.tooltip\n\t\t\t\t\t: (\n\t\t\t\t\t\t\ttoken: CancellationToken,\n\t\t\t\t\t\t): Promise<IMarkdownString | string | undefined> => {\n\t\t\t\t\t\t\treturn new Promise<\n\t\t\t\t\t\t\t\tIMarkdownString | string | undefined\n\t\t\t\t\t\t\t>((resolve) => {\n\t\t\t\t\t\t\t\tnode.resolve(token).then(() =>\n\t\t\t\t\t\t\t\t\tresolve(node.tooltip),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\tmarkdownNotSupportedFallback: resource ? undefined : (label ?? \"\"), // Passing undefined as the fallback for a resource falls back to the old native hover\n\t\t};\n\t}\n\n\trenderElement(\n\t\telement: ITreeNode<ITreeItem, FuzzyScore>,\n\t\tindex: number,\n\t\ttemplateData: ITreeExplorerTemplateData,\n\t): void {\n\t\tconst node = element.element;\n\t\tconst resource = node.resourceUri ? URI.revive(node.resourceUri) : null;\n\t\tconst treeItemLabel: ITreeItemLabel | undefined = node.label\n\t\t\t? node.label\n\t\t\t: resource\n\t\t\t\t? { label: basename(resource) }\n\t\t\t\t: undefined;\n\t\tconst description = isString(node.description)\n\t\t\t? node.description\n\t\t\t: resource && node.description === true\n\t\t\t\t? this.labelService.getUriLabel(dirname(resource), {\n\t\t\t\t\t\trelative: true,\n\t\t\t\t\t})\n\t\t\t\t: undefined;\n\t\tconst label = treeItemLabel ? treeItemLabel.label : undefined;\n\t\tconst matches =\n\t\t\ttreeItemLabel && treeItemLabel.highlights && label\n\t\t\t\t? treeItemLabel.highlights.map(([start, end]) => {\n\t\t\t\t\t\tif (start < 0) {\n\t\t\t\t\t\t\tstart = label.length + start;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (end < 0) {\n\t\t\t\t\t\t\tend = label.length + end;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (start >= label.length || end > label.length) {\n\t\t\t\t\t\t\treturn { start: 0, end: 0 };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (start > end) {\n\t\t\t\t\t\t\tconst swap = start;\n\t\t\t\t\t\t\tstart = end;\n\t\t\t\t\t\t\tend = swap;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { start, end };\n\t\t\t\t\t})\n\t\t\t\t: undefined;\n\t\tconst icon =\n\t\t\tthis.themeService.getColorTheme().type === ColorScheme.LIGHT\n\t\t\t\t? node.icon\n\t\t\t\t: node.iconDark;\n\t\tconst iconUrl = icon ? URI.revive(icon) : undefined;\n\t\tconst title = this.getHover(label, resource, node);\n\n\t\t// reset\n\t\ttemplateData.actionBar.clear();\n\t\ttemplateData.icon.style.color = \"\";\n\n\t\tlet commandEnabled = true;\n\t\tif (node.command) {\n\t\t\tcommandEnabled = isTreeCommandEnabled(\n\t\t\t\tnode.command,\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\t}\n\n\t\tthis.renderCheckbox(node, templateData);\n\n\t\tif (resource) {\n\t\t\tconst fileDecorations = this.configurationService.getValue<{\n\t\t\t\tcolors: boolean;\n\t\t\t\tbadges: boolean;\n\t\t\t}>(\"explorer.decorations\");\n\t\t\tconst labelResource = resource\n\t\t\t\t? resource\n\t\t\t\t: URI.parse(\"missing:_icon_resource\");\n\t\t\ttemplateData.resourceLabel.setResource(\n\t\t\t\t{ name: label, description, resource: labelResource },\n\t\t\t\t{\n\t\t\t\t\tfileKind: this.getFileKind(node),\n\t\t\t\t\ttitle,\n\t\t\t\t\thideIcon: this.shouldHideResourceLabelIcon(\n\t\t\t\t\t\ticonUrl,\n\t\t\t\t\t\tnode.themeIcon,\n\t\t\t\t\t),\n\t\t\t\t\tfileDecorations,\n\t\t\t\t\textraClasses: [\"custom-view-tree-node-item-resourceLabel\"],\n\t\t\t\t\tmatches: matches\n\t\t\t\t\t\t? matches\n\t\t\t\t\t\t: createMatches(element.filterData),\n\t\t\t\t\tstrikethrough: treeItemLabel?.strikethrough,\n\t\t\t\t\tdisabledCommand: !commandEnabled,\n\t\t\t\t\tlabelEscapeNewLines: true,\n\t\t\t\t\tforceLabel: !!node.label,\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\ttemplateData.resourceLabel.setResource(\n\t\t\t\t{ name: label, description },\n\t\t\t\t{\n\t\t\t\t\ttitle,\n\t\t\t\t\thideIcon: true,\n\t\t\t\t\textraClasses: [\"custom-view-tree-node-item-resourceLabel\"],\n\t\t\t\t\tmatches: matches\n\t\t\t\t\t\t? matches\n\t\t\t\t\t\t: createMatches(element.filterData),\n\t\t\t\t\tstrikethrough: treeItemLabel?.strikethrough,\n\t\t\t\t\tdisabledCommand: !commandEnabled,\n\t\t\t\t\tlabelEscapeNewLines: true,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (iconUrl) {\n\t\t\ttemplateData.icon.className = \"custom-view-tree-node-item-icon\";\n\t\t\ttemplateData.icon.style.backgroundImage = DOM.asCSSUrl(iconUrl);\n\t\t} else {\n\t\t\tlet iconClass: string | undefined;\n\t\t\tif (this.shouldShowThemeIcon(!!resource, node.themeIcon)) {\n\t\t\t\ticonClass = ThemeIcon.asClassName(node.themeIcon);\n\t\t\t\tif (node.themeIcon.color) {\n\t\t\t\t\ttemplateData.icon.style.color =\n\t\t\t\t\t\tthis.themeService\n\t\t\t\t\t\t\t.getColorTheme()\n\t\t\t\t\t\t\t.getColor(node.themeIcon.color.id)\n\t\t\t\t\t\t\t?.toString() ?? \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemplateData.icon.className = iconClass\n\t\t\t\t? `custom-view-tree-node-item-icon ${iconClass}`\n\t\t\t\t: \"\";\n\t\t\ttemplateData.icon.style.backgroundImage = \"\";\n\t\t}\n\n\t\tif (!commandEnabled) {\n\t\t\ttemplateData.icon.className =\n\t\t\t\ttemplateData.icon.className + \" disabled\";\n\t\t\tif (templateData.container.parentElement) {\n\t\t\t\ttemplateData.container.parentElement.className =\n\t\t\t\t\ttemplateData.container.parentElement.className +\n\t\t\t\t\t\" disabled\";\n\t\t\t}\n\t\t}\n\n\t\ttemplateData.actionBar.context = {\n\t\t\t$treeViewId: this.treeViewId,\n\t\t\t$treeItemHandle: node.handle,\n\t\t} satisfies TreeViewItemHandleArg;\n\n\t\tconst menuActions = this.menus.getResourceActions([node]);\n\t\ttemplateData.actionBar.push(menuActions, { icon: true, label: false });\n\n\t\tif (this._actionRunner) {\n\t\t\ttemplateData.actionBar.actionRunner = this._actionRunner;\n\t\t}\n\t\tthis.setAlignment(templateData.container, node);\n\n\t\t// remember rendered element, an element can be rendered multiple times\n\t\tconst renderedItems =\n\t\t\tthis._renderedElements.get(element.element.handle) ?? [];\n\t\tthis._renderedElements.set(element.element.handle, [\n\t\t\t...renderedItems,\n\t\t\t{ original: element, rendered: templateData },\n\t\t]);\n\t}\n\n\tprivate rerender() {\n\t\t// As we add items to the map during this call we can't directly use the map in the for loop\n\t\t// but have to create a copy of the keys first\n\t\tconst keys = new Set(this._renderedElements.keys());\n\t\tfor (const key of keys) {\n\t\t\tconst values = this._renderedElements.get(key) ?? [];\n\t\t\tfor (const value of values) {\n\t\t\t\tthis.disposeElement(value.original, 0, value.rendered);\n\t\t\t\tthis.renderElement(value.original, 0, value.rendered);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderCheckbox(\n\t\tnode: ITreeItem,\n\t\ttemplateData: ITreeExplorerTemplateData,\n\t) {\n\t\tif (node.checkbox) {\n\t\t\t// The first time we find a checkbox we want to rerender the visible tree to adapt the alignment\n\t\t\tif (!this._hasCheckbox) {\n\t\t\t\tthis._hasCheckbox = true;\n\t\t\t\tthis.rerender();\n\t\t\t}\n\t\t\tif (!templateData.checkbox) {\n\t\t\t\tconst checkbox = new TreeItemCheckbox(\n\t\t\t\t\ttemplateData.checkboxContainer,\n\t\t\t\t\tthis.checkboxStateHandler,\n\t\t\t\t\tthis._hoverDelegate,\n\t\t\t\t\tthis.hoverService,\n\t\t\t\t);\n\t\t\t\ttemplateData.checkbox = checkbox;\n\t\t\t}\n\t\t\ttemplateData.checkbox.render(node);\n\t\t} else if (templateData.checkbox) {\n\t\t\ttemplateData.checkbox.dispose();\n\t\t\ttemplateData.checkbox = undefined;\n\t\t}\n\t}\n\n\tprivate setAlignment(container: HTMLElement, treeItem: ITreeItem) {\n\t\tcontainer.parentElement!.classList.toggle(\n\t\t\t\"align-icon-with-twisty\",\n\t\t\t!this._hasCheckbox && this.aligner.alignIconWithTwisty(treeItem),\n\t\t);\n\t}\n\n\tprivate shouldHideResourceLabelIcon(\n\t\ticonUrl: URI | undefined,\n\t\ticon: ThemeIcon | undefined,\n\t): boolean {\n\t\t// We always hide the resource label in favor of the iconUrl when it's provided.\n\t\t// When `ThemeIcon` is provided, we hide the resource label icon in favor of it only if it's a not a file icon.\n\t\treturn !!iconUrl || (!!icon && !this.isFileKindThemeIcon(icon));\n\t}\n\n\tprivate shouldShowThemeIcon(\n\t\thasResource: boolean,\n\t\ticon: ThemeIcon | undefined,\n\t): icon is ThemeIcon {\n\t\tif (!icon) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If there's a resource and the icon is a file icon, then the icon (or lack thereof) will already be coming from the\n\t\t// icon theme and should use whatever the icon theme has provided.\n\t\treturn !(hasResource && this.isFileKindThemeIcon(icon));\n\t}\n\n\tprivate isFolderThemeIcon(icon: ThemeIcon | undefined): boolean {\n\t\treturn icon?.id === FolderThemeIcon.id;\n\t}\n\n\tprivate isFileKindThemeIcon(icon: ThemeIcon | undefined): boolean {\n\t\tif (icon) {\n\t\t\treturn icon.id === FileThemeIcon.id || this.isFolderThemeIcon(icon);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate getFileKind(node: ITreeItem): FileKind {\n\t\tif (node.themeIcon) {\n\t\t\tswitch (node.themeIcon.id) {\n\t\t\t\tcase FileThemeIcon.id:\n\t\t\t\t\treturn FileKind.FILE;\n\t\t\t\tcase FolderThemeIcon.id:\n\t\t\t\t\treturn FileKind.FOLDER;\n\t\t\t}\n\t\t}\n\t\treturn node.collapsibleState === TreeItemCollapsibleState.Collapsed ||\n\t\t\tnode.collapsibleState === TreeItemCollapsibleState.Expanded\n\t\t\t? FileKind.FOLDER\n\t\t\t: FileKind.FILE;\n\t}\n\n\tprivate onDidChangeContext(e: IContextKeyChangeEvent) {\n\t\tconst items: ITreeItem[] = [];\n\t\tfor (const [_, elements] of this._renderedElements) {\n\t\t\tfor (const element of elements) {\n\t\t\t\tif (\n\t\t\t\t\te.affectsSome(\n\t\t\t\t\t\tthis.menus.getElementOverlayContexts(\n\t\t\t\t\t\t\telement.original.element,\n\t\t\t\t\t\t),\n\t\t\t\t\t) ||\n\t\t\t\t\te.affectsSome(this.menus.getEntireMenuContexts())\n\t\t\t\t) {\n\t\t\t\t\titems.push(element.original.element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (items.length) {\n\t\t\tthis._onDidChangeMenuContext.fire(items);\n\t\t}\n\t}\n\n\tprivate updateCheckboxes(items: ITreeItem[]) {\n\t\tconst additionalItems: ITreeItem[] = [];\n\n\t\tif (!this.manuallyManageCheckboxes()) {\n\t\t\tfor (const item of items) {\n\t\t\t\tif (item.checkbox !== undefined) {\n\t\t\t\t\tfunction checkChildren(currentItem: ITreeItem) {\n\t\t\t\t\t\tfor (const child of currentItem.children ?? []) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tchild.checkbox !== undefined &&\n\t\t\t\t\t\t\t\tcurrentItem.checkbox !== undefined &&\n\t\t\t\t\t\t\t\tchild.checkbox.isChecked !==\n\t\t\t\t\t\t\t\t\tcurrentItem.checkbox.isChecked\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tchild.checkbox.isChecked =\n\t\t\t\t\t\t\t\t\tcurrentItem.checkbox.isChecked;\n\t\t\t\t\t\t\t\tadditionalItems.push(child);\n\t\t\t\t\t\t\t\tcheckChildren(child);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcheckChildren(item);\n\n\t\t\t\t\tconst visitedParents: Set<ITreeItem> = new Set();\n\t\t\t\t\tfunction checkParents(currentItem: ITreeItem) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcurrentItem.parent &&\n\t\t\t\t\t\t\tcurrentItem.parent.checkbox !== undefined &&\n\t\t\t\t\t\t\tcurrentItem.parent.children\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (visitedParents.has(currentItem.parent)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvisitedParents.add(currentItem.parent);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet someUnchecked = false;\n\t\t\t\t\t\t\tlet someChecked = false;\n\t\t\t\t\t\t\tfor (const child of currentItem.parent.children) {\n\t\t\t\t\t\t\t\tif (someUnchecked && someChecked) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (child.checkbox !== undefined) {\n\t\t\t\t\t\t\t\t\tif (child.checkbox.isChecked) {\n\t\t\t\t\t\t\t\t\t\tsomeChecked = true;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsomeUnchecked = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tsomeChecked &&\n\t\t\t\t\t\t\t\t!someUnchecked &&\n\t\t\t\t\t\t\t\tcurrentItem.parent.checkbox.isChecked !== true\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcurrentItem.parent.checkbox.isChecked = true;\n\t\t\t\t\t\t\t\tadditionalItems.push(currentItem.parent);\n\t\t\t\t\t\t\t\tcheckParents(currentItem.parent);\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\tsomeUnchecked &&\n\t\t\t\t\t\t\t\tcurrentItem.parent.checkbox.isChecked !== false\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcurrentItem.parent.checkbox.isChecked = false;\n\t\t\t\t\t\t\t\tadditionalItems.push(currentItem.parent);\n\t\t\t\t\t\t\t\tcheckParents(currentItem.parent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcheckParents(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\titems = items.concat(additionalItems);\n\t\titems.forEach((item) => {\n\t\t\tconst renderedItems = this._renderedElements.get(item.handle);\n\t\t\tif (renderedItems) {\n\t\t\t\trenderedItems.forEach((renderedItems) =>\n\t\t\t\t\trenderedItems.rendered.checkbox?.render(item),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\tthis._onDidChangeCheckboxState.fire(items);\n\t}\n\n\tdisposeElement(\n\t\tresource: ITreeNode<ITreeItem, FuzzyScore>,\n\t\tindex: number,\n\t\ttemplateData: ITreeExplorerTemplateData,\n\t): void {\n\t\tconst itemRenders =\n\t\t\tthis._renderedElements.get(resource.element.handle) ?? [];\n\t\tconst renderedIndex = itemRenders.findIndex(\n\t\t\t(renderedItem) => templateData === renderedItem.rendered,\n\t\t);\n\n\t\tif (itemRenders.length === 1) {\n\t\t\tthis._renderedElements.delete(resource.element.handle);\n\t\t} else if (itemRenders.length > 0) {\n\t\t\titemRenders.splice(renderedIndex, 1);\n\t\t}\n\n\t\ttemplateData.checkbox?.dispose();\n\t\ttemplateData.checkbox = undefined;\n\t}\n\n\tdisposeTemplate(templateData: ITreeExplorerTemplateData): void {\n\t\ttemplateData.resourceLabel.dispose();\n\t\ttemplateData.actionBar.dispose();\n\t}\n}\n\nclass Aligner extends Disposable {\n\tprivate _tree:\n\t\t| WorkbenchAsyncDataTree<ITreeItem, ITreeItem, FuzzyScore>\n\t\t| undefined;\n\n\tconstructor(private themeService: IThemeService) {\n\t\tsuper();\n\t}\n\n\tset tree(tree: WorkbenchAsyncDataTree<ITreeItem, ITreeItem, FuzzyScore>) {\n\t\tthis._tree = tree;\n\t}\n\n\tpublic alignIconWithTwisty(treeItem: ITreeItem): boolean {\n\t\tif (treeItem.collapsibleState !== TreeItemCollapsibleState.None) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.hasIcon(treeItem)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._tree) {\n\t\t\tconst parent: ITreeItem =\n\t\t\t\tthis._tree.getParentElement(treeItem) || this._tree.getInput();\n\t\t\tif (this.hasIcon(parent)) {\n\t\t\t\treturn (\n\t\t\t\t\t!!parent.children &&\n\t\t\t\t\tparent.children.some(\n\t\t\t\t\t\t(c) =>\n\t\t\t\t\t\t\tc.collapsibleState !==\n\t\t\t\t\t\t\t\tTreeItemCollapsibleState.None &&\n\t\t\t\t\t\t\t!this.hasIcon(c),\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t!!parent.children &&\n\t\t\t\tparent.children.every(\n\t\t\t\t\t(c) =>\n\t\t\t\t\t\tc.collapsibleState === TreeItemCollapsibleState.None ||\n\t\t\t\t\t\t!this.hasIcon(c),\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate hasIcon(node: ITreeItem): boolean {\n\t\tconst icon =\n\t\t\tthis.themeService.getColorTheme().type === ColorScheme.LIGHT\n\t\t\t\t? node.icon\n\t\t\t\t: node.iconDark;\n\t\tif (icon) {\n\t\t\treturn true;\n\t\t}\n\t\tif (node.resourceUri || node.themeIcon) {\n\t\t\tconst fileIconTheme = this.themeService.getFileIconTheme();\n\t\t\tconst isFolder = node.themeIcon\n\t\t\t\t? node.themeIcon.id === FolderThemeIcon.id\n\t\t\t\t: node.collapsibleState !== TreeItemCollapsibleState.None;\n\t\t\tif (isFolder) {\n\t\t\t\treturn (\n\t\t\t\t\tfileIconTheme.hasFileIcons && fileIconTheme.hasFolderIcons\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn fileIconTheme.hasFileIcons;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nclass MultipleSelectionActionRunner extends ActionRunner {\n\tconstructor(\n\t\tnotificationService: INotificationService,\n\t\tprivate getSelectedResources: () => ITreeItem[],\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tthis.onDidRun((e) => {\n\t\t\t\tif (e.error && !isCancellationError(e.error)) {\n\t\t\t\t\tnotificationService.error(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"command-error\",\n\t\t\t\t\t\t\t\"Error running command {1}: {0}. This is likely caused by the extension that contributes {1}.\",\n\t\t\t\t\t\t\te.error.message,\n\t\t\t\t\t\t\te.action.id,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprotected override async runAction(\n\t\taction: IAction,\n\t\tcontext: TreeViewItemHandleArg | TreeViewPaneHandleArg,\n\t): Promise<void> {\n\t\tconst selection = this.getSelectedResources();\n\t\tlet selectionHandleArgs: TreeViewItemHandleArg[] | undefined;\n\t\tlet actionInSelected = false;\n\t\tif (selection.length > 1) {\n\t\t\tselectionHandleArgs = selection.map((selected) => {\n\t\t\t\tif (\n\t\t\t\t\tselected.handle ===\n\t\t\t\t\t\t(context as TreeViewItemHandleArg).$treeItemHandle ||\n\t\t\t\t\t(context as TreeViewPaneHandleArg).$selectedTreeItems\n\t\t\t\t) {\n\t\t\t\t\tactionInSelected = true;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t$treeViewId: context.$treeViewId,\n\t\t\t\t\t$treeItemHandle: selected.handle,\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tif (!actionInSelected && selectionHandleArgs) {\n\t\t\tselectionHandleArgs = undefined;\n\t\t}\n\n\t\tawait action.run(context, selectionHandleArgs);\n\t}\n}\n\nclass TreeMenus implements IDisposable {\n\tprivate contextKeyService: IContextKeyService | undefined;\n\tprivate _onDidChange = new Emitter<ITreeItem>();\n\tpublic readonly onDidChange = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate id: string,\n\t\t@IMenuService private readonly menuService: IMenuService\n\t) { }\n\n\t/**\n\t * Gets only the actions that apply to all of the given elements.\n\t */\n\tgetResourceActions(elements: ITreeItem[]): IAction[] {\n\t\tconst actions = this.getActions(this.getMenuId(), elements);\n\t\treturn actions.primary;\n\t}\n\n\t/**\n\t * Gets only the actions that apply to all of the given elements.\n\t */\n\tgetResourceContextActions(elements: ITreeItem[]): IAction[] {\n\t\treturn this.getActions(this.getMenuId(), elements).secondary;\n\t}\n\n\tpublic setContextKeyService(service: IContextKeyService) {\n\t\tthis.contextKeyService = service;\n\t}\n\n\tprivate filterNonUniversalActions(\n\t\tgroups: Map<string, IAction>[],\n\t\tnewActions: IAction[],\n\t) {\n\t\tconst newActionsSet: Set<string> = new Set(newActions.map((a) => a.id));\n\t\tfor (const group of groups) {\n\t\t\tconst actions = group.keys();\n\t\t\tfor (const action of actions) {\n\t\t\t\tif (!newActionsSet.has(action)) {\n\t\t\t\t\tgroup.delete(action);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate buildMenu(groups: Map<string, IAction>[]): IAction[] {\n\t\tconst result: IAction[] = [];\n\t\tfor (const group of groups) {\n\t\t\tif (group.size > 0) {\n\t\t\t\tif (result.length) {\n\t\t\t\t\tresult.push(new Separator());\n\t\t\t\t}\n\t\t\t\tresult.push(...group.values());\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate createGroups(actions: IAction[]): Map<string, IAction>[] {\n\t\tconst groups: Map<string, IAction>[] = [];\n\t\tlet group: Map<string, IAction> = new Map();\n\t\tfor (const action of actions) {\n\t\t\tif (action instanceof Separator) {\n\t\t\t\tgroups.push(group);\n\t\t\t\tgroup = new Map();\n\t\t\t} else {\n\t\t\t\tgroup.set(action.id, action);\n\t\t\t}\n\t\t}\n\t\tgroups.push(group);\n\t\treturn groups;\n\t}\n\n\tpublic getElementOverlayContexts(element: ITreeItem): Map<string, any> {\n\t\treturn new Map([\n\t\t\t[\"view\", this.id],\n\t\t\t[\"viewItem\", element.contextValue],\n\t\t]);\n\t}\n\n\tpublic getEntireMenuContexts(): ReadonlySet<string> {\n\t\treturn this.menuService.getMenuContexts(this.getMenuId());\n\t}\n\n\tpublic getMenuId(): MenuId {\n\t\treturn MenuId.ViewItemContext;\n\t}\n\n\tprivate getActions(\n\t\tmenuId: MenuId,\n\t\telements: ITreeItem[],\n\t): { primary: IAction[]; secondary: IAction[] } {\n\t\tif (!this.contextKeyService) {\n\t\t\treturn { primary: [], secondary: [] };\n\t\t}\n\n\t\tlet primaryGroups: Map<string, IAction>[] = [];\n\t\tlet secondaryGroups: Map<string, IAction>[] = [];\n\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\tconst element = elements[i];\n\t\t\tconst contextKeyService = this.contextKeyService.createOverlay(\n\t\t\t\tthis.getElementOverlayContexts(element),\n\t\t\t);\n\n\t\t\tconst menuData = this.menuService.getMenuActions(\n\t\t\t\tmenuId,\n\t\t\t\tcontextKeyService,\n\t\t\t\t{ shouldForwardArgs: true },\n\t\t\t);\n\n\t\t\tconst primary: IAction[] = [];\n\t\t\tconst secondary: IAction[] = [];\n\t\t\tconst result = { primary, secondary };\n\t\t\tcreateAndFillInContextMenuActions(menuData, result, \"inline\");\n\t\t\tif (i === 0) {\n\t\t\t\tprimaryGroups = this.createGroups(result.primary);\n\t\t\t\tsecondaryGroups = this.createGroups(result.secondary);\n\t\t\t} else {\n\t\t\t\tthis.filterNonUniversalActions(primaryGroups, result.primary);\n\t\t\t\tthis.filterNonUniversalActions(\n\t\t\t\t\tsecondaryGroups,\n\t\t\t\t\tresult.secondary,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tprimary: this.buildMenu(primaryGroups),\n\t\t\tsecondary: this.buildMenu(secondaryGroups),\n\t\t};\n\t}\n\n\tdispose() {\n\t\tthis.contextKeyService = undefined;\n\t}\n}\n\nexport class CustomTreeView extends AbstractTreeView {\n\tconstructor(\n\t\tid: string,\n\t\ttitle: string,\n\t\tprivate readonly extensionId: string,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IActivityService activityService: IActivityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IOpenerService openerService: IOpenerService\n\t) {\n\t\tsuper(id, title, themeService, instantiationService, commandService, configurationService, progressService, contextMenuService, keybindingService, notificationService, viewDescriptorService, hoverService, contextKeyService, activityService, logService, openerService);\n\t}\n\n\tprotected activate() {\n\t\tif (!this.activated) {\n\t\t\ttype ExtensionViewTelemetry = {\n\t\t\t\textensionId: TelemetryTrustedValue<string>;\n\t\t\t\tid: string;\n\t\t\t};\n\t\t\ttype ExtensionViewTelemetryMeta = {\n\t\t\t\textensionId: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Id of the extension\";\n\t\t\t\t};\n\t\t\t\tid: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Id of the view\";\n\t\t\t\t};\n\t\t\t\towner: \"digitarald\";\n\t\t\t\tcomment: \"Helps to gain insights on what extension contributed views are most popular\";\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tExtensionViewTelemetry,\n\t\t\t\tExtensionViewTelemetryMeta\n\t\t\t>(\"Extension:ViewActivate\", {\n\t\t\t\textensionId: new TelemetryTrustedValue(this.extensionId),\n\t\t\t\tid: this.id,\n\t\t\t});\n\t\t\tthis.createTree();\n\t\t\tthis.progressService\n\t\t\t\t.withProgress({ location: this.id }, () =>\n\t\t\t\t\tthis.extensionService.activateByEvent(`onView:${this.id}`),\n\t\t\t\t)\n\t\t\t\t.then(() => timeout(2000))\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.updateMessage();\n\t\t\t\t});\n\t\t\tthis.activated = true;\n\t\t}\n\t}\n}\n\nexport class TreeView extends AbstractTreeView {\n\tprotected activate() {\n\t\tif (!this.activated) {\n\t\t\tthis.createTree();\n\t\t\tthis.activated = true;\n\t\t}\n\t}\n}\n\ninterface TreeDragSourceInfo {\n\tid: string;\n\titemHandles: string[];\n}\n\nexport class CustomTreeViewDragAndDrop implements ITreeDragAndDrop<ITreeItem> {\n\tprivate readonly treeMimeType: string;\n\tprivate readonly treeItemsTransfer =\n\t\tLocalSelectionTransfer.getInstance<DraggedTreeItemsIdentifier>();\n\tprivate dragCancellationToken: CancellationTokenSource | undefined;\n\n\tconstructor(\n\t\tprivate readonly treeId: string,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITreeViewsDnDService private readonly treeViewsDragAndDropService: ITreeViewsDnDService,\n\t\t@ILogService private readonly logService: ILogService) {\n\t\tthis.treeMimeType = `application/vnd.code.tree.${treeId.toLowerCase()}`;\n\t}\n\n\tprivate dndController: ITreeViewDragAndDropController | undefined;\n\tset controller(controller: ITreeViewDragAndDropController | undefined) {\n\t\tthis.dndController = controller;\n\t}\n\n\tprivate handleDragAndLog(\n\t\tdndController: ITreeViewDragAndDropController,\n\t\titemHandles: string[],\n\t\tuuid: string,\n\t\tdragCancellationToken: CancellationToken,\n\t): Promise<VSDataTransfer | undefined> {\n\t\treturn dndController\n\t\t\t.handleDrag(itemHandles, uuid, dragCancellationToken)\n\t\t\t.then((additionalDataTransfer) => {\n\t\t\t\tif (additionalDataTransfer) {\n\t\t\t\t\tconst unlistedTypes: string[] = [];\n\t\t\t\t\tfor (const item of additionalDataTransfer) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\titem[0] !== this.treeMimeType &&\n\t\t\t\t\t\t\tdndController.dragMimeTypes.findIndex(\n\t\t\t\t\t\t\t\t(value) => value === item[0],\n\t\t\t\t\t\t\t) < 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tunlistedTypes.push(item[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (unlistedTypes.length) {\n\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t`Drag and drop controller for tree ${this.treeId} adds the following data transfer types but does not declare them in dragMimeTypes: ${unlistedTypes.join(\", \")}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn additionalDataTransfer;\n\t\t\t});\n\t}\n\n\tprivate addExtensionProvidedTransferTypes(\n\t\toriginalEvent: DragEvent,\n\t\titemHandles: string[],\n\t) {\n\t\tif (!originalEvent.dataTransfer || !this.dndController) {\n\t\t\treturn;\n\t\t}\n\t\tconst uuid = generateUuid();\n\n\t\tthis.dragCancellationToken = new CancellationTokenSource();\n\t\tthis.treeViewsDragAndDropService.addDragOperationTransfer(\n\t\t\tuuid,\n\t\t\tthis.handleDragAndLog(\n\t\t\t\tthis.dndController,\n\t\t\t\titemHandles,\n\t\t\t\tuuid,\n\t\t\t\tthis.dragCancellationToken.token,\n\t\t\t),\n\t\t);\n\t\tthis.treeItemsTransfer.setData(\n\t\t\t[new DraggedTreeItemsIdentifier(uuid)],\n\t\t\tDraggedTreeItemsIdentifier.prototype,\n\t\t);\n\t\toriginalEvent.dataTransfer.clearData(Mimes.text);\n\t\tif (\n\t\t\tthis.dndController.dragMimeTypes.find(\n\t\t\t\t(element) => element === Mimes.uriList,\n\t\t\t)\n\t\t) {\n\t\t\t// Add the type that the editor knows\n\t\t\toriginalEvent.dataTransfer?.setData(DataTransfers.RESOURCES, \"\");\n\t\t}\n\t\tthis.dndController.dragMimeTypes.forEach((supportedType) => {\n\t\t\toriginalEvent.dataTransfer?.setData(supportedType, \"\");\n\t\t});\n\t}\n\n\tprivate addResourceInfoToTransfer(\n\t\toriginalEvent: DragEvent,\n\t\tresources: URI[],\n\t) {\n\t\tif (resources.length && originalEvent.dataTransfer) {\n\t\t\t// Apply some datatransfer types to allow for dragging the element outside of the application\n\t\t\tthis.instantiationService.invokeFunction((accessor) =>\n\t\t\t\tfillEditorsDragData(accessor, resources, originalEvent),\n\t\t\t);\n\n\t\t\t// The only custom data transfer we set from the explorer is a file transfer\n\t\t\t// to be able to DND between multiple code file explorers across windows\n\t\t\tconst fileResources = resources\n\t\t\t\t.filter((s) => s.scheme === Schemas.file)\n\t\t\t\t.map((r) => r.fsPath);\n\t\t\tif (fileResources.length) {\n\t\t\t\toriginalEvent.dataTransfer.setData(\n\t\t\t\t\tCodeDataTransfers.FILES,\n\t\t\t\t\tJSON.stringify(fileResources),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tonDragStart(data: IDragAndDropData, originalEvent: DragEvent): void {\n\t\tif (originalEvent.dataTransfer) {\n\t\t\tconst treeItemsData = (\n\t\t\t\tdata as ElementsDragAndDropData<ITreeItem, ITreeItem[]>\n\t\t\t).getData();\n\t\t\tconst resources: URI[] = [];\n\t\t\tconst sourceInfo: TreeDragSourceInfo = {\n\t\t\t\tid: this.treeId,\n\t\t\t\titemHandles: [],\n\t\t\t};\n\t\t\ttreeItemsData.forEach((item) => {\n\t\t\t\tsourceInfo.itemHandles.push(item.handle);\n\t\t\t\tif (item.resourceUri) {\n\t\t\t\t\tresources.push(URI.revive(item.resourceUri));\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.addResourceInfoToTransfer(originalEvent, resources);\n\t\t\tthis.addExtensionProvidedTransferTypes(\n\t\t\t\toriginalEvent,\n\t\t\t\tsourceInfo.itemHandles,\n\t\t\t);\n\t\t\toriginalEvent.dataTransfer.setData(\n\t\t\t\tthis.treeMimeType,\n\t\t\t\tJSON.stringify(sourceInfo),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate debugLog(types: Set<string>) {\n\t\tif (types.size) {\n\t\t\tthis.logService.debug(\n\t\t\t\t`TreeView dragged mime types: ${Array.from(types).join(\", \")}`,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.logService.debug(\n\t\t\t\t`TreeView dragged with no supported mime types.`,\n\t\t\t);\n\t\t}\n\t}\n\n\tonDragOver(\n\t\tdata: IDragAndDropData,\n\t\ttargetElement: ITreeItem,\n\t\ttargetIndex: number,\n\t\ttargetSector: ListViewTargetSector | undefined,\n\t\toriginalEvent: DragEvent,\n\t): boolean | ITreeDragOverReaction {\n\t\tconst dataTransfer = toExternalVSDataTransfer(\n\t\t\toriginalEvent.dataTransfer!,\n\t\t);\n\n\t\tconst types = new Set<string>(Array.from(dataTransfer, (x) => x[0]));\n\n\t\tif (originalEvent.dataTransfer) {\n\t\t\t// Also add uri-list if we have any files. At this stage we can't actually access the file itself though.\n\t\t\tfor (const item of originalEvent.dataTransfer.items) {\n\t\t\t\tif (\n\t\t\t\t\titem.kind === \"file\" ||\n\t\t\t\t\titem.type === DataTransfers.RESOURCES.toLowerCase()\n\t\t\t\t) {\n\t\t\t\t\ttypes.add(Mimes.uriList);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.debugLog(types);\n\n\t\tconst dndController = this.dndController;\n\t\tif (\n\t\t\t!dndController ||\n\t\t\t!originalEvent.dataTransfer ||\n\t\t\tdndController.dropMimeTypes.length === 0\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tconst dragContainersSupportedType = Array.from(types).some(\n\t\t\t(value, index) => {\n\t\t\t\tif (value === this.treeMimeType) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn dndController.dropMimeTypes.indexOf(value) >= 0;\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\tif (dragContainersSupportedType) {\n\t\t\treturn {\n\t\t\t\taccept: true,\n\t\t\t\tbubble: TreeDragOverBubble.Down,\n\t\t\t\tautoExpand: true,\n\t\t\t};\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetDragURI(element: ITreeItem): string | null {\n\t\tif (!this.dndController) {\n\t\t\treturn null;\n\t\t}\n\t\treturn element.resourceUri\n\t\t\t? URI.revive(element.resourceUri).toString()\n\t\t\t: element.handle;\n\t}\n\n\tgetDragLabel?(elements: ITreeItem[]): string | undefined {\n\t\tif (!this.dndController) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (elements.length > 1) {\n\t\t\treturn String(elements.length);\n\t\t}\n\t\tconst element = elements[0];\n\t\treturn element.label\n\t\t\t? element.label.label\n\t\t\t: element.resourceUri\n\t\t\t\t? this.labelService.getUriLabel(URI.revive(element.resourceUri))\n\t\t\t\t: undefined;\n\t}\n\n\tasync drop(\n\t\tdata: IDragAndDropData,\n\t\ttargetNode: ITreeItem | undefined,\n\t\ttargetIndex: number | undefined,\n\t\ttargetSector: ListViewTargetSector | undefined,\n\t\toriginalEvent: DragEvent,\n\t): Promise<void> {\n\t\tconst dndController = this.dndController;\n\t\tif (!originalEvent.dataTransfer || !dndController) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet treeSourceInfo: TreeDragSourceInfo | undefined;\n\t\tlet willDropUuid: string | undefined;\n\t\tif (\n\t\t\tthis.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)\n\t\t) {\n\t\t\twillDropUuid = this.treeItemsTransfer.getData(\n\t\t\t\tDraggedTreeItemsIdentifier.prototype,\n\t\t\t)![0].identifier;\n\t\t}\n\n\t\tconst originalDataTransfer = toExternalVSDataTransfer(\n\t\t\toriginalEvent.dataTransfer,\n\t\t\ttrue,\n\t\t);\n\n\t\tconst outDataTransfer = new VSDataTransfer();\n\t\tfor (const [type, item] of originalDataTransfer) {\n\t\t\tif (\n\t\t\t\ttype === this.treeMimeType ||\n\t\t\t\tdndController.dropMimeTypes.includes(type) ||\n\t\t\t\t(item.asFile() &&\n\t\t\t\t\tdndController.dropMimeTypes.includes(\n\t\t\t\t\t\tDataTransfers.FILES.toLowerCase(),\n\t\t\t\t\t))\n\t\t\t) {\n\t\t\t\toutDataTransfer.append(type, item);\n\t\t\t\tif (type === this.treeMimeType) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttreeSourceInfo = JSON.parse(await item.asString());\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// noop\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst additionalDataTransfer =\n\t\t\tawait this.treeViewsDragAndDropService.removeDragOperationTransfer(\n\t\t\t\twillDropUuid,\n\t\t\t);\n\t\tif (additionalDataTransfer) {\n\t\t\tfor (const [type, item] of additionalDataTransfer) {\n\t\t\t\toutDataTransfer.append(type, item);\n\t\t\t}\n\t\t}\n\t\treturn dndController.handleDrop(\n\t\t\toutDataTransfer,\n\t\t\ttargetNode,\n\t\t\tCancellationToken.None,\n\t\t\twillDropUuid,\n\t\t\ttreeSourceInfo?.id,\n\t\t\ttreeSourceInfo?.itemHandles,\n\t\t);\n\t}\n\n\tonDragEnd(originalEvent: DragEvent): void {\n\t\t// Check if the drag was cancelled.\n\t\tif (originalEvent.dataTransfer?.dropEffect === \"none\") {\n\t\t\tthis.dragCancellationToken?.cancel();\n\t\t}\n\t}\n\n\tdispose(): void {}\n}\n"],
  "mappings": "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",
  "names": ["e", "checkChildren", "checkParents", "renderedItems"]
}
