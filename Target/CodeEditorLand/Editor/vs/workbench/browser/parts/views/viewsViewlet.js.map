{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/views/viewsViewlet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextMenuService } from \"../../../../platform/contextview/browser/contextView.js\";\nimport type { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IAddedViewDescriptorRef,\n\ttype IView,\n\ttype IViewDescriptor,\n\tIViewDescriptorService,\n} from \"../../../common/views.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { IWorkbenchLayoutService } from \"../../../services/layout/browser/layoutService.js\";\nimport type { IViewPaneOptions, ViewPane } from \"./viewPane.js\";\nimport { ViewPaneContainer } from \"./viewPaneContainer.js\";\n\nexport interface IViewletViewOptions extends IViewPaneOptions {\n\treadonly fromExtensionId?: ExtensionIdentifier;\n}\n\nexport abstract class FilterViewPaneContainer extends ViewPaneContainer {\n\tprivate constantViewDescriptors: Map<string, IViewDescriptor> = new Map();\n\tprivate allViews: Map<string, Map<string, IViewDescriptor>> = new Map();\n\tprivate filterValue: string[] | undefined;\n\n\tconstructor(\n\t\tviewletId: string,\n\t\tonDidChangeFilterValue: Event<string[]>,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t) {\n\t\tsuper(\n\t\t\tviewletId,\n\t\t\t{ mergeViewWithContainerWhenSingleView: false },\n\t\t\tinstantiationService,\n\t\t\tconfigurationService,\n\t\t\tlayoutService,\n\t\t\tcontextMenuService,\n\t\t\ttelemetryService,\n\t\t\textensionService,\n\t\t\tthemeService,\n\t\t\tstorageService,\n\t\t\tcontextService,\n\t\t\tviewDescriptorService,\n\t\t);\n\t\tthis._register(\n\t\t\tonDidChangeFilterValue((newFilterValue) => {\n\t\t\t\tthis.filterValue = newFilterValue;\n\t\t\t\tthis.onFilterChanged(newFilterValue);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.viewContainerModel.onDidChangeActiveViewDescriptors(() => {\n\t\t\t\tthis.updateAllViews(\n\t\t\t\t\tthis.viewContainerModel.activeViewDescriptors,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate updateAllViews(viewDescriptors: ReadonlyArray<IViewDescriptor>) {\n\t\tviewDescriptors.forEach((descriptor) => {\n\t\t\tconst filterOnValue = this.getFilterOn(descriptor);\n\t\t\tif (!filterOnValue) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this.allViews.has(filterOnValue)) {\n\t\t\t\tthis.allViews.set(filterOnValue, new Map());\n\t\t\t}\n\t\t\tthis.allViews.get(filterOnValue)!.set(descriptor.id, descriptor);\n\t\t\tif (\n\t\t\t\tthis.filterValue &&\n\t\t\t\t!this.filterValue.includes(filterOnValue) &&\n\t\t\t\tthis.panes.find((pane) => pane.id === descriptor.id)\n\t\t\t) {\n\t\t\t\tthis.viewContainerModel.setVisible(descriptor.id, false);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected addConstantViewDescriptors(\n\t\tconstantViewDescriptors: IViewDescriptor[],\n\t) {\n\t\tconstantViewDescriptors.forEach((viewDescriptor) =>\n\t\t\tthis.constantViewDescriptors.set(viewDescriptor.id, viewDescriptor),\n\t\t);\n\t}\n\n\tprotected abstract getFilterOn(\n\t\tviewDescriptor: IViewDescriptor,\n\t): string | undefined;\n\n\tprotected abstract setFilter(viewDescriptor: IViewDescriptor): void;\n\n\tprivate onFilterChanged(newFilterValue: string[]) {\n\t\tif (this.allViews.size === 0) {\n\t\t\tthis.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n\t\t}\n\t\tthis.getViewsNotForTarget(newFilterValue).forEach((item) =>\n\t\t\tthis.viewContainerModel.setVisible(item.id, false),\n\t\t);\n\t\tthis.getViewsForTarget(newFilterValue).forEach((item) =>\n\t\t\tthis.viewContainerModel.setVisible(item.id, true),\n\t\t);\n\t}\n\n\tprivate getViewsForTarget(target: string[]): IViewDescriptor[] {\n\t\tconst views: IViewDescriptor[] = [];\n\t\tfor (let i = 0; i < target.length; i++) {\n\t\t\tif (this.allViews.has(target[i])) {\n\t\t\t\tviews.push(\n\t\t\t\t\t...Array.from(this.allViews.get(target[i])!.values()),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn views;\n\t}\n\n\tprivate getViewsNotForTarget(target: string[]): IViewDescriptor[] {\n\t\tconst iterable = this.allViews.keys();\n\t\tlet key = iterable.next();\n\t\tlet views: IViewDescriptor[] = [];\n\t\twhile (!key.done) {\n\t\t\tlet isForTarget = false;\n\t\t\ttarget.forEach((value) => {\n\t\t\t\tif (key.value === value) {\n\t\t\t\t\tisForTarget = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!isForTarget) {\n\t\t\t\tviews = views.concat(this.getViewsForTarget([key.value]));\n\t\t\t}\n\n\t\t\tkey = iterable.next();\n\t\t}\n\t\treturn views;\n\t}\n\n\tprotected override onDidAddViewDescriptors(\n\t\tadded: IAddedViewDescriptorRef[],\n\t): ViewPane[] {\n\t\tconst panes: ViewPane[] = super.onDidAddViewDescriptors(added);\n\t\tfor (let i = 0; i < added.length; i++) {\n\t\t\tif (this.constantViewDescriptors.has(added[i].viewDescriptor.id)) {\n\t\t\t\tpanes[i].setExpanded(false);\n\t\t\t}\n\t\t}\n\t\t// Check that allViews is ready\n\t\tif (this.allViews.size === 0) {\n\t\t\tthis.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n\t\t}\n\t\treturn panes;\n\t}\n\n\toverride openView(id: string, focus?: boolean): IView | undefined {\n\t\tconst result = super.openView(id, focus);\n\t\tif (result) {\n\t\t\tconst descriptorMap = Array.from(this.allViews.entries()).find(\n\t\t\t\t(entry) => entry[1].has(id),\n\t\t\t);\n\t\t\tif (\n\t\t\t\tdescriptorMap &&\n\t\t\t\t!this.filterValue?.includes(descriptorMap[0])\n\t\t\t) {\n\t\t\t\tthis.setFilter(descriptorMap[1].get(id)!);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tabstract override getTitle(): string;\n}\n"],
  "mappings": "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",
  "names": []
}
