{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/views/viewsViewlet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IViewDescriptor, IViewDescriptorService, IAddedViewDescriptorRef, IView } from '../../../common/views.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { ViewPaneContainer } from './viewPaneContainer.js';\nimport { ViewPane, IViewPaneOptions } from './viewPane.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\n\nexport interface IViewletViewOptions extends IViewPaneOptions {\n\treadonly fromExtensionId?: ExtensionIdentifier;\n}\n\nexport abstract class FilterViewPaneContainer extends ViewPaneContainer {\n\tprivate constantViewDescriptors: Map<string, IViewDescriptor> = new Map();\n\tprivate allViews: Map<string, Map<string, IViewDescriptor>> = new Map();\n\tprivate filterValue: string[] | undefined;\n\n\tconstructor(\n\t\tviewletId: string,\n\t\tonDidChangeFilterValue: Event<string[]>,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService\n\t) {\n\n\t\tsuper(viewletId, { mergeViewWithContainerWhenSingleView: false }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService);\n\t\tthis._register(onDidChangeFilterValue(newFilterValue => {\n\t\t\tthis.filterValue = newFilterValue;\n\t\t\tthis.onFilterChanged(newFilterValue);\n\t\t}));\n\n\t\tthis._register(this.viewContainerModel.onDidChangeActiveViewDescriptors(() => {\n\t\t\tthis.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n\t\t}));\n\t}\n\n\tprivate updateAllViews(viewDescriptors: ReadonlyArray<IViewDescriptor>) {\n\t\tviewDescriptors.forEach(descriptor => {\n\t\t\tconst filterOnValue = this.getFilterOn(descriptor);\n\t\t\tif (!filterOnValue) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this.allViews.has(filterOnValue)) {\n\t\t\t\tthis.allViews.set(filterOnValue, new Map());\n\t\t\t}\n\t\t\tthis.allViews.get(filterOnValue)!.set(descriptor.id, descriptor);\n\t\t\tif (this.filterValue && !this.filterValue.includes(filterOnValue) && this.panes.find(pane => pane.id === descriptor.id)) {\n\t\t\t\tthis.viewContainerModel.setVisible(descriptor.id, false);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected addConstantViewDescriptors(constantViewDescriptors: IViewDescriptor[]) {\n\t\tconstantViewDescriptors.forEach(viewDescriptor => this.constantViewDescriptors.set(viewDescriptor.id, viewDescriptor));\n\t}\n\n\tprotected abstract getFilterOn(viewDescriptor: IViewDescriptor): string | undefined;\n\n\tprotected abstract setFilter(viewDescriptor: IViewDescriptor): void;\n\n\tprivate onFilterChanged(newFilterValue: string[]) {\n\t\tif (this.allViews.size === 0) {\n\t\t\tthis.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n\t\t}\n\t\tthis.getViewsNotForTarget(newFilterValue).forEach(item => this.viewContainerModel.setVisible(item.id, false));\n\t\tthis.getViewsForTarget(newFilterValue).forEach(item => this.viewContainerModel.setVisible(item.id, true));\n\t}\n\n\tprivate getViewsForTarget(target: string[]): IViewDescriptor[] {\n\t\tconst views: IViewDescriptor[] = [];\n\t\tfor (let i = 0; i < target.length; i++) {\n\t\t\tif (this.allViews.has(target[i])) {\n\t\t\t\tviews.push(...Array.from(this.allViews.get(target[i])!.values()));\n\t\t\t}\n\t\t}\n\n\t\treturn views;\n\t}\n\n\tprivate getViewsNotForTarget(target: string[]): IViewDescriptor[] {\n\t\tconst iterable = this.allViews.keys();\n\t\tlet key = iterable.next();\n\t\tlet views: IViewDescriptor[] = [];\n\t\twhile (!key.done) {\n\t\t\tlet isForTarget: boolean = false;\n\t\t\ttarget.forEach(value => {\n\t\t\t\tif (key.value === value) {\n\t\t\t\t\tisForTarget = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!isForTarget) {\n\t\t\t\tviews = views.concat(this.getViewsForTarget([key.value]));\n\t\t\t}\n\n\t\t\tkey = iterable.next();\n\t\t}\n\t\treturn views;\n\t}\n\n\tprotected override onDidAddViewDescriptors(added: IAddedViewDescriptorRef[]): ViewPane[] {\n\t\tconst panes: ViewPane[] = super.onDidAddViewDescriptors(added);\n\t\tfor (let i = 0; i < added.length; i++) {\n\t\t\tif (this.constantViewDescriptors.has(added[i].viewDescriptor.id)) {\n\t\t\t\tpanes[i].setExpanded(false);\n\t\t\t}\n\t\t}\n\t\t// Check that allViews is ready\n\t\tif (this.allViews.size === 0) {\n\t\t\tthis.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n\t\t}\n\t\treturn panes;\n\t}\n\n\toverride openView(id: string, focus?: boolean): IView | undefined {\n\t\tconst result = super.openView(id, focus);\n\t\tif (result) {\n\t\t\tconst descriptorMap = Array.from(this.allViews.entries()).find(entry => entry[1].has(id));\n\t\t\tif (descriptorMap && !this.filterValue?.includes(descriptorMap[0])) {\n\t\t\t\tthis.setFilter(descriptorMap[1].get(id)!);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tabstract override getTitle(): string;\n\n}\n"],
  "mappings": "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",
  "names": []
}
