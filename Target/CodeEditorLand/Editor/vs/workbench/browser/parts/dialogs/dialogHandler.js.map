{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/browser/parts/dialogs/dialogHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EventHelper } from \"../../../../base/browser/dom.js\";\nimport type { StandardKeyboardEvent } from \"../../../../base/browser/keyboardEvent.js\";\nimport {\n\tDialog,\n\ttype IDialogResult,\n} from \"../../../../base/browser/ui/dialog/dialog.js\";\nimport { fromNow } from \"../../../../base/common/date.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { MarkdownRenderer } from \"../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport {\n\tAbstractDialogHandler,\n\ttype DialogType,\n\ttype IAsyncPromptResult,\n\ttype ICheckbox,\n\ttype IConfirmation,\n\ttype IConfirmationResult,\n\ttype ICustomDialogOptions,\n\ttype IInput,\n\ttype IInputElement,\n\ttype IInputResult,\n\ttype IPrompt,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ResultKind } from \"../../../../platform/keybinding/common/keybindingResolver.js\";\nimport { ILayoutService } from \"../../../../platform/layout/browser/layoutService.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tdefaultButtonStyles,\n\tdefaultCheckboxStyles,\n\tdefaultDialogStyles,\n\tdefaultInputBoxStyles,\n} from \"../../../../platform/theme/browser/defaultStyles.js\";\n\nexport class BrowserDialogHandler extends AbstractDialogHandler {\n\tprivate static readonly ALLOWABLE_COMMANDS = [\n\t\t\"copy\",\n\t\t\"cut\",\n\t\t\"editor.action.selectAll\",\n\t\t\"editor.action.clipboardCopyAction\",\n\t\t\"editor.action.clipboardCutAction\",\n\t\t\"editor.action.clipboardPasteAction\",\n\t];\n\n\tprivate readonly markdownRenderer =\n\t\tthis.instantiationService.createInstance(MarkdownRenderer, {});\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IKeybindingService\n\t\tprivate readonly keybindingService: IKeybindingService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync prompt<T>(prompt: IPrompt<T>): Promise<IAsyncPromptResult<T>> {\n\t\tthis.logService.trace(\"DialogService#prompt\", prompt.message);\n\n\t\tconst buttons = this.getPromptButtons(prompt);\n\n\t\tconst { button, checkboxChecked } = await this.doShow(\n\t\t\tprompt.type,\n\t\t\tprompt.message,\n\t\t\tbuttons,\n\t\t\tprompt.detail,\n\t\t\tprompt.cancelButton ? buttons.length - 1 : -1 /* Disabled */,\n\t\t\tprompt.checkbox,\n\t\t\tundefined,\n\t\t\ttypeof prompt?.custom === \"object\" ? prompt.custom : undefined,\n\t\t);\n\n\t\treturn this.getPromptResult(prompt, button, checkboxChecked);\n\t}\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tthis.logService.trace(\"DialogService#confirm\", confirmation.message);\n\n\t\tconst buttons = this.getConfirmationButtons(confirmation);\n\n\t\tconst { button, checkboxChecked } = await this.doShow(\n\t\t\tconfirmation.type ?? \"question\",\n\t\t\tconfirmation.message,\n\t\t\tbuttons,\n\t\t\tconfirmation.detail,\n\t\t\tbuttons.length - 1,\n\t\t\tconfirmation.checkbox,\n\t\t\tundefined,\n\t\t\ttypeof confirmation?.custom === \"object\"\n\t\t\t\t? confirmation.custom\n\t\t\t\t: undefined,\n\t\t);\n\n\t\treturn { confirmed: button === 0, checkboxChecked };\n\t}\n\n\tasync input(input: IInput): Promise<IInputResult> {\n\t\tthis.logService.trace(\"DialogService#input\", input.message);\n\n\t\tconst buttons = this.getInputButtons(input);\n\n\t\tconst { button, checkboxChecked, values } = await this.doShow(\n\t\t\tinput.type ?? \"question\",\n\t\t\tinput.message,\n\t\t\tbuttons,\n\t\t\tinput.detail,\n\t\t\tbuttons.length - 1,\n\t\t\tinput?.checkbox,\n\t\t\tinput.inputs,\n\t\t\ttypeof input.custom === \"object\" ? input.custom : undefined,\n\t\t);\n\n\t\treturn { confirmed: button === 0, checkboxChecked, values };\n\t}\n\n\tasync about(): Promise<void> {\n\t\tconst detailString = (useAgo: boolean): string => {\n\t\t\treturn localize(\n\t\t\t\t\"aboutDetail\",\n\t\t\t\t\"Version: {0}\\nCommit: {1}\\nDate: {2}\\nBrowser: {3}\",\n\t\t\t\tthis.productService.version || \"Unknown\",\n\t\t\t\tthis.productService.commit || \"Unknown\",\n\t\t\t\tthis.productService.date\n\t\t\t\t\t? `${this.productService.date}${useAgo ? \" (\" + fromNow(new Date(this.productService.date), true) + \")\" : \"\"}`\n\t\t\t\t\t: \"Unknown\",\n\t\t\t\tnavigator.userAgent,\n\t\t\t);\n\t\t};\n\n\t\tconst detail = detailString(true);\n\t\tconst detailToCopy = detailString(false);\n\n\t\tconst { button } = await this.doShow(\n\t\t\tSeverity.Info,\n\t\t\tthis.productService.nameLong,\n\t\t\t[\n\t\t\t\tlocalize(\n\t\t\t\t\t{ key: \"copy\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Copy\",\n\t\t\t\t),\n\t\t\t\tlocalize(\"ok\", \"OK\"),\n\t\t\t],\n\t\t\tdetail,\n\t\t\t1,\n\t\t);\n\n\t\tif (button === 0) {\n\t\t\tthis.clipboardService.writeText(detailToCopy);\n\t\t}\n\t}\n\n\tprivate async doShow(\n\t\ttype: Severity | DialogType | undefined,\n\t\tmessage: string,\n\t\tbuttons?: string[],\n\t\tdetail?: string,\n\t\tcancelId?: number,\n\t\tcheckbox?: ICheckbox,\n\t\tinputs?: IInputElement[],\n\t\tcustomOptions?: ICustomDialogOptions,\n\t): Promise<IDialogResult> {\n\t\tconst dialogDisposables = new DisposableStore();\n\n\t\tconst renderBody = customOptions\n\t\t\t? (parent: HTMLElement) => {\n\t\t\t\t\tparent.classList.add(...(customOptions.classes || []));\n\t\t\t\t\tcustomOptions.markdownDetails?.forEach((markdownDetail) => {\n\t\t\t\t\t\tconst result = this.markdownRenderer.render(\n\t\t\t\t\t\t\tmarkdownDetail.markdown,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tparent.appendChild(result.element);\n\t\t\t\t\t\tresult.element.classList.add(\n\t\t\t\t\t\t\t...(markdownDetail.classes || []),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdialogDisposables.add(result);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t: undefined;\n\n\t\tconst dialog = new Dialog(\n\t\t\tthis.layoutService.activeContainer,\n\t\t\tmessage,\n\t\t\tbuttons,\n\t\t\t{\n\t\t\t\tdetail,\n\t\t\t\tcancelId,\n\t\t\t\ttype: this.getDialogType(type),\n\t\t\t\tkeyEventProcessor: (event: StandardKeyboardEvent) => {\n\t\t\t\t\tconst resolved = this.keybindingService.softDispatch(\n\t\t\t\t\t\tevent,\n\t\t\t\t\t\tthis.layoutService.activeContainer,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\tresolved.kind === ResultKind.KbFound &&\n\t\t\t\t\t\tresolved.commandId\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tBrowserDialogHandler.ALLOWABLE_COMMANDS.indexOf(\n\t\t\t\t\t\t\t\tresolved.commandId,\n\t\t\t\t\t\t\t) === -1\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tEventHelper.stop(event, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trenderBody,\n\t\t\t\ticon: customOptions?.icon,\n\t\t\t\tdisableCloseAction: customOptions?.disableCloseAction,\n\t\t\t\tbuttonDetails: customOptions?.buttonDetails,\n\t\t\t\tcheckboxLabel: checkbox?.label,\n\t\t\t\tcheckboxChecked: checkbox?.checked,\n\t\t\t\tinputs,\n\t\t\t\tbuttonStyles: defaultButtonStyles,\n\t\t\t\tcheckboxStyles: defaultCheckboxStyles,\n\t\t\t\tinputBoxStyles: defaultInputBoxStyles,\n\t\t\t\tdialogStyles: defaultDialogStyles,\n\t\t\t},\n\t\t);\n\n\t\tdialogDisposables.add(dialog);\n\n\t\tconst result = await dialog.show();\n\t\tdialogDisposables.dispose();\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
