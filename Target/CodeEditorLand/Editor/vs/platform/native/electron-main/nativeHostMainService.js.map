{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/native/electron-main/nativeHostMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { exec } from 'child_process';\nimport { app, BrowserWindow, clipboard, Display, Menu, MessageBoxOptions, MessageBoxReturnValue, OpenDialogOptions, OpenDialogReturnValue, powerMonitor, SaveDialogOptions, SaveDialogReturnValue, screen, shell, webContents } from 'electron';\nimport { arch, cpus, freemem, loadavg, platform, release, totalmem, type } from 'os';\nimport { promisify } from 'util';\nimport { memoize } from '../../../base/common/decorators.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { matchesSomeScheme, Schemas } from '../../../base/common/network.js';\nimport { dirname, join, posix, resolve, win32 } from '../../../base/common/path.js';\nimport { isLinux, isMacintosh, isWindows } from '../../../base/common/platform.js';\nimport { AddFirstParameterToFunctions } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { realpath } from '../../../base/node/extpath.js';\nimport { virtualMachineHint } from '../../../base/node/id.js';\nimport { Promises, SymlinkSupport } from '../../../base/node/pfs.js';\nimport { findFreePort } from '../../../base/node/ports.js';\nimport { localize } from '../../../nls.js';\nimport { ISerializableCommandAction } from '../../action/common/action.js';\nimport { INativeOpenDialogOptions } from '../../dialogs/common/dialogs.js';\nimport { IDialogMainService } from '../../dialogs/electron-main/dialogMainService.js';\nimport { IEnvironmentMainService } from '../../environment/electron-main/environmentMainService.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILifecycleMainService, IRelaunchOptions } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { ICommonNativeHostService, INativeHostOptions, IOSProperties, IOSStatistics } from '../common/native.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IPartsSplash } from '../../theme/common/themeService.js';\nimport { IThemeMainService } from '../../theme/electron-main/themeMainService.js';\nimport { ICodeWindow } from '../../window/electron-main/window.js';\nimport { IColorScheme, IOpenedAuxiliaryWindow, IOpenedMainWindow, IOpenEmptyWindowOptions, IOpenWindowOptions, IPoint, IRectangle, IWindowOpenable, useWindowControlsOverlay } from '../../window/common/window.js';\nimport { IWindowsMainService, OpenContext } from '../../windows/electron-main/windows.js';\nimport { isWorkspaceIdentifier, toWorkspaceIdentifier } from '../../workspace/common/workspace.js';\nimport { IWorkspacesManagementMainService } from '../../workspaces/electron-main/workspacesManagementMainService.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { hasWSLFeatureInstalled } from '../../remote/node/wsl.js';\nimport { WindowProfiler } from '../../profiling/electron-main/windowProfiling.js';\nimport { IV8Profile } from '../../profiling/common/profiling.js';\nimport { IAuxiliaryWindowsMainService } from '../../auxiliaryWindow/electron-main/auxiliaryWindows.js';\nimport { IAuxiliaryWindow } from '../../auxiliaryWindow/electron-main/auxiliaryWindow.js';\nimport { CancellationError } from '../../../base/common/errors.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IProxyAuthService } from './auth.js';\nimport { AuthInfo, Credentials, IRequestService } from '../../request/common/request.js';\n\nexport interface INativeHostMainService extends AddFirstParameterToFunctions<ICommonNativeHostService, Promise<unknown> /* only methods, not events */, number | undefined /* window ID */> { }\n\nexport const INativeHostMainService = createDecorator<INativeHostMainService>('nativeHostMainService');\n\nexport class NativeHostMainService extends Disposable implements INativeHostMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IAuxiliaryWindowsMainService private readonly auxiliaryWindowsMainService: IAuxiliaryWindowsMainService,\n\t\t@IDialogMainService private readonly dialogMainService: IDialogMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IThemeMainService private readonly themeMainService: IThemeMainService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IProxyAuthService private readonly proxyAuthService: IProxyAuthService\n\t) {\n\t\tsuper();\n\t}\n\n\n\t//#region Properties\n\n\tget windowId(): never { throw new Error('Not implemented in electron-main'); }\n\n\t//#endregion\n\n\n\t//#region Events\n\n\treadonly onDidOpenMainWindow = Event.map(this.windowsMainService.onDidOpenWindow, window => window.id);\n\n\treadonly onDidTriggerWindowSystemContextMenu = Event.any(\n\t\tEvent.map(this.windowsMainService.onDidTriggerSystemContextMenu, ({ window, x, y }) => ({ windowId: window.id, x, y })),\n\t\tEvent.map(this.auxiliaryWindowsMainService.onDidTriggerSystemContextMenu, ({ window, x, y }) => ({ windowId: window.id, x, y }))\n\t);\n\n\treadonly onDidMaximizeWindow = Event.any(\n\t\tEvent.map(this.windowsMainService.onDidMaximizeWindow, window => window.id),\n\t\tEvent.map(this.auxiliaryWindowsMainService.onDidMaximizeWindow, window => window.id)\n\t);\n\treadonly onDidUnmaximizeWindow = Event.any(\n\t\tEvent.map(this.windowsMainService.onDidUnmaximizeWindow, window => window.id),\n\t\tEvent.map(this.auxiliaryWindowsMainService.onDidUnmaximizeWindow, window => window.id)\n\t);\n\n\treadonly onDidChangeWindowFullScreen = Event.any(\n\t\tEvent.map(this.windowsMainService.onDidChangeFullScreen, e => ({ windowId: e.window.id, fullscreen: e.fullscreen })),\n\t\tEvent.map(this.auxiliaryWindowsMainService.onDidChangeFullScreen, e => ({ windowId: e.window.id, fullscreen: e.fullscreen }))\n\t);\n\n\treadonly onDidBlurMainWindow = Event.filter(Event.fromNodeEventEmitter(app, 'browser-window-blur', (event, window: BrowserWindow) => window.id), windowId => !!this.windowsMainService.getWindowById(windowId));\n\treadonly onDidFocusMainWindow = Event.any(\n\t\tEvent.map(Event.filter(Event.map(this.windowsMainService.onDidChangeWindowsCount, () => this.windowsMainService.getLastActiveWindow()), window => !!window), window => window!.id),\n\t\tEvent.filter(Event.fromNodeEventEmitter(app, 'browser-window-focus', (event, window: BrowserWindow) => window.id), windowId => !!this.windowsMainService.getWindowById(windowId))\n\t);\n\n\treadonly onDidBlurMainOrAuxiliaryWindow = Event.any(\n\t\tthis.onDidBlurMainWindow,\n\t\tEvent.map(Event.filter(Event.fromNodeEventEmitter(app, 'browser-window-blur', (event, window: BrowserWindow) => this.auxiliaryWindowsMainService.getWindowByWebContents(window.webContents)), window => !!window), window => window!.id)\n\t);\n\treadonly onDidFocusMainOrAuxiliaryWindow = Event.any(\n\t\tthis.onDidFocusMainWindow,\n\t\tEvent.map(Event.filter(Event.fromNodeEventEmitter(app, 'browser-window-focus', (event, window: BrowserWindow) => this.auxiliaryWindowsMainService.getWindowByWebContents(window.webContents)), window => !!window), window => window!.id)\n\t);\n\n\treadonly onDidResumeOS = Event.fromNodeEventEmitter(powerMonitor, 'resume');\n\n\treadonly onDidChangeColorScheme = this.themeMainService.onDidChangeColorScheme;\n\n\tprivate readonly _onDidChangePassword = this._register(new Emitter<{ account: string; service: string }>());\n\treadonly onDidChangePassword = this._onDidChangePassword.event;\n\n\treadonly onDidChangeDisplay = Event.debounce(Event.any(\n\t\tEvent.filter(Event.fromNodeEventEmitter(screen, 'display-metrics-changed', (event: Electron.Event, display: Display, changedMetrics?: string[]) => changedMetrics), changedMetrics => {\n\t\t\t// Electron will emit 'display-metrics-changed' events even when actually\n\t\t\t// going fullscreen, because the dock hides. However, we do not want to\n\t\t\t// react on this event as there is no change in display bounds.\n\t\t\treturn !(Array.isArray(changedMetrics) && changedMetrics.length === 1 && changedMetrics[0] === 'workArea');\n\t\t}),\n\t\tEvent.fromNodeEventEmitter(screen, 'display-added'),\n\t\tEvent.fromNodeEventEmitter(screen, 'display-removed')\n\t), () => { }, 100);\n\n\t//#endregion\n\n\n\t//#region Window\n\n\tgetWindows(windowId: number | undefined, options: { includeAuxiliaryWindows: true }): Promise<Array<IOpenedMainWindow | IOpenedAuxiliaryWindow>>;\n\tgetWindows(windowId: number | undefined, options: { includeAuxiliaryWindows: false }): Promise<Array<IOpenedMainWindow>>;\n\tasync getWindows(windowId: number | undefined, options: { includeAuxiliaryWindows: boolean }): Promise<Array<IOpenedMainWindow | IOpenedAuxiliaryWindow>> {\n\t\tconst mainWindows = this.windowsMainService.getWindows().map(window => ({\n\t\t\tid: window.id,\n\t\t\tworkspace: window.openedWorkspace ?? toWorkspaceIdentifier(window.backupPath, window.isExtensionDevelopmentHost),\n\t\t\ttitle: window.win?.getTitle() ?? '',\n\t\t\tfilename: window.getRepresentedFilename(),\n\t\t\tdirty: window.isDocumentEdited()\n\t\t}));\n\n\t\tconst auxiliaryWindows = [];\n\t\tif (options.includeAuxiliaryWindows) {\n\t\t\tauxiliaryWindows.push(...this.auxiliaryWindowsMainService.getWindows().map(window => ({\n\t\t\t\tid: window.id,\n\t\t\t\tparentId: window.parentId,\n\t\t\t\ttitle: window.win?.getTitle() ?? '',\n\t\t\t\tfilename: window.getRepresentedFilename()\n\t\t\t})));\n\t\t}\n\n\t\treturn [...mainWindows, ...auxiliaryWindows];\n\t}\n\n\tasync getWindowCount(windowId: number | undefined): Promise<number> {\n\t\treturn this.windowsMainService.getWindowCount();\n\t}\n\n\tasync getActiveWindowId(windowId: number | undefined): Promise<number | undefined> {\n\t\tconst activeWindow = this.windowsMainService.getFocusedWindow() || this.windowsMainService.getLastActiveWindow();\n\t\tif (activeWindow) {\n\t\t\treturn activeWindow.id;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync getActiveWindowPosition(): Promise<IRectangle | undefined> {\n\t\tconst activeWindow = this.windowsMainService.getFocusedWindow() || this.windowsMainService.getLastActiveWindow();\n\t\tif (activeWindow) {\n\t\t\treturn activeWindow.getBounds();\n\t\t}\n\t\treturn undefined;\n\t}\n\n\topenWindow(windowId: number | undefined, options?: IOpenEmptyWindowOptions): Promise<void>;\n\topenWindow(windowId: number | undefined, toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;\n\topenWindow(windowId: number | undefined, arg1?: IOpenEmptyWindowOptions | IWindowOpenable[], arg2?: IOpenWindowOptions): Promise<void> {\n\t\tif (Array.isArray(arg1)) {\n\t\t\treturn this.doOpenWindow(windowId, arg1, arg2);\n\t\t}\n\n\t\treturn this.doOpenEmptyWindow(windowId, arg1);\n\t}\n\n\tprivate async doOpenWindow(windowId: number | undefined, toOpen: IWindowOpenable[], options: IOpenWindowOptions = Object.create(null)): Promise<void> {\n\t\tif (toOpen.length > 0) {\n\t\t\tawait this.windowsMainService.open({\n\t\t\t\tcontext: OpenContext.API,\n\t\t\t\tcontextWindowId: windowId,\n\t\t\t\turisToOpen: toOpen,\n\t\t\t\tcli: this.environmentMainService.args,\n\t\t\t\tforceNewWindow: options.forceNewWindow,\n\t\t\t\tforceReuseWindow: options.forceReuseWindow,\n\t\t\t\tpreferNewWindow: options.preferNewWindow,\n\t\t\t\tdiffMode: options.diffMode,\n\t\t\t\tmergeMode: options.mergeMode,\n\t\t\t\taddMode: options.addMode,\n\t\t\t\tgotoLineMode: options.gotoLineMode,\n\t\t\t\tnoRecentEntry: options.noRecentEntry,\n\t\t\t\twaitMarkerFileURI: options.waitMarkerFileURI,\n\t\t\t\tremoteAuthority: options.remoteAuthority || undefined,\n\t\t\t\tforceProfile: options.forceProfile,\n\t\t\t\tforceTempProfile: options.forceTempProfile,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async doOpenEmptyWindow(windowId: number | undefined, options?: IOpenEmptyWindowOptions): Promise<void> {\n\t\tawait this.windowsMainService.openEmptyWindow({\n\t\t\tcontext: OpenContext.API,\n\t\t\tcontextWindowId: windowId\n\t\t}, options);\n\t}\n\n\tasync isFullScreen(windowId: number | undefined, options?: INativeHostOptions): Promise<boolean> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\treturn window?.isFullScreen ?? false;\n\t}\n\n\tasync toggleFullScreen(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.toggleFullScreen();\n\t}\n\n\tasync handleTitleDoubleClick(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.handleTitleDoubleClick();\n\t}\n\n\tasync getCursorScreenPoint(windowId: number | undefined): Promise<{ readonly point: IPoint; readonly display: IRectangle }> {\n\t\tconst point = screen.getCursorScreenPoint();\n\t\tconst display = screen.getDisplayNearestPoint(point);\n\n\t\treturn { point, display: display.bounds };\n\t}\n\n\tasync isMaximized(windowId: number | undefined, options?: INativeHostOptions): Promise<boolean> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\treturn window?.win?.isMaximized() ?? false;\n\t}\n\n\tasync maximizeWindow(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.win?.maximize();\n\t}\n\n\tasync unmaximizeWindow(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.win?.unmaximize();\n\t}\n\n\tasync minimizeWindow(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.win?.minimize();\n\t}\n\n\tasync moveWindowTop(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.win?.moveTop();\n\t}\n\n\tasync positionWindow(windowId: number | undefined, position: IRectangle, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\tif (window?.win) {\n\t\t\tif (window.win.isFullScreen()) {\n\t\t\t\tconst fullscreenLeftFuture = Event.toPromise(Event.once(Event.fromNodeEventEmitter(window.win, 'leave-full-screen')));\n\t\t\t\twindow.win.setFullScreen(false);\n\t\t\t\tawait fullscreenLeftFuture;\n\t\t\t}\n\n\t\t\twindow.win.setBounds(position);\n\t\t}\n\t}\n\n\tasync updateWindowControls(windowId: number | undefined, options: INativeHostOptions & { height?: number; backgroundColor?: string; foregroundColor?: string }): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.updateWindowControls(options);\n\t}\n\n\tasync focusWindow(windowId: number | undefined, options?: INativeHostOptions & { force?: boolean }): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.focus({ force: options?.force ?? false });\n\t}\n\n\tasync setMinimumSize(windowId: number | undefined, width: number | undefined, height: number | undefined): Promise<void> {\n\t\tconst window = this.codeWindowById(windowId);\n\t\tif (window?.win) {\n\t\t\tconst [windowWidth, windowHeight] = window.win.getSize();\n\t\t\tconst [minWindowWidth, minWindowHeight] = window.win.getMinimumSize();\n\t\t\tconst [newMinWindowWidth, newMinWindowHeight] = [width ?? minWindowWidth, height ?? minWindowHeight];\n\t\t\tconst [newWindowWidth, newWindowHeight] = [Math.max(windowWidth, newMinWindowWidth), Math.max(windowHeight, newMinWindowHeight)];\n\n\t\t\tif (minWindowWidth !== newMinWindowWidth || minWindowHeight !== newMinWindowHeight) {\n\t\t\t\twindow.win.setMinimumSize(newMinWindowWidth, newMinWindowHeight);\n\t\t\t}\n\t\t\tif (windowWidth !== newWindowWidth || windowHeight !== newWindowHeight) {\n\t\t\t\twindow.win.setSize(newWindowWidth, newWindowHeight);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync saveWindowSplash(windowId: number | undefined, splash: IPartsSplash): Promise<void> {\n\t\tthis.themeMainService.saveWindowSplash(windowId, splash);\n\t}\n\n\t//#endregion\n\n\n\t//#region macOS Shell Command\n\n\tasync installShellCommand(windowId: number | undefined): Promise<void> {\n\t\tconst { source, target } = await this.getShellCommandLink();\n\n\t\t// Only install unless already existing\n\t\ttry {\n\t\t\tconst { symbolicLink } = await SymlinkSupport.stat(source);\n\t\t\tif (symbolicLink && !symbolicLink.dangling) {\n\t\t\t\tconst linkTargetRealPath = await realpath(source);\n\t\t\t\tif (target === linkTargetRealPath) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Different source, delete it first\n\t\t\tawait fs.promises.unlink(source);\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'ENOENT') {\n\t\t\t\tthrow error; // throw on any error but file not found\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tawait fs.promises.symlink(target, source);\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'EACCES' && error.code !== 'ENOENT') {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst { response } = await this.showMessageBox(windowId, {\n\t\t\t\ttype: 'info',\n\t\t\t\tmessage: localize('warnEscalation', \"{0} will now prompt with 'osascript' for Administrator privileges to install the shell command.\", this.productService.nameShort),\n\t\t\t\tbuttons: [\n\t\t\t\t\tlocalize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, \"&&OK\"),\n\t\t\t\t\tlocalize('cancel', \"Cancel\")\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tif (response === 1 /* Cancel */) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst command = `osascript -e \"do shell script \\\\\"mkdir -p /usr/local/bin && ln -sf \\'${target}\\' \\'${source}\\'\\\\\" with administrator privileges\"`;\n\t\t\t\tawait promisify(exec)(command);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(localize('cantCreateBinFolder', \"Unable to install the shell command '{0}'.\", source));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync uninstallShellCommand(windowId: number | undefined): Promise<void> {\n\t\tconst { source } = await this.getShellCommandLink();\n\n\t\ttry {\n\t\t\tawait fs.promises.unlink(source);\n\t\t} catch (error) {\n\t\t\tswitch (error.code) {\n\t\t\t\tcase 'EACCES': {\n\t\t\t\t\tconst { response } = await this.showMessageBox(windowId, {\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tmessage: localize('warnEscalationUninstall', \"{0} will now prompt with 'osascript' for Administrator privileges to uninstall the shell command.\", this.productService.nameShort),\n\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\tlocalize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, \"&&OK\"),\n\t\t\t\t\t\t\tlocalize('cancel', \"Cancel\")\n\t\t\t\t\t\t]\n\t\t\t\t\t});\n\n\t\t\t\t\tif (response === 1 /* Cancel */) {\n\t\t\t\t\t\tthrow new CancellationError();\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst command = `osascript -e \"do shell script \\\\\"rm \\'${source}\\'\\\\\" with administrator privileges\"`;\n\t\t\t\t\t\tawait promisify(exec)(command);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthrow new Error(localize('cantUninstall', \"Unable to uninstall the shell command '{0}'.\", source));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'ENOENT':\n\t\t\t\t\tbreak; // ignore file not found\n\t\t\t\tdefault:\n\t\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getShellCommandLink(): Promise<{ readonly source: string; readonly target: string }> {\n\t\tconst target = resolve(this.environmentMainService.appRoot, 'bin', 'code');\n\t\tconst source = `/usr/local/bin/${this.productService.applicationName}`;\n\n\t\t// Ensure source exists\n\t\tconst sourceExists = await Promises.exists(target);\n\t\tif (!sourceExists) {\n\t\t\tthrow new Error(localize('sourceMissing', \"Unable to find shell script in '{0}'\", target));\n\t\t}\n\n\t\treturn { source, target };\n\t}\n\n\t//#endregion\n\n\t//#region Dialog\n\n\tasync showMessageBox(windowId: number | undefined, options: MessageBoxOptions & INativeHostOptions): Promise<MessageBoxReturnValue> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\treturn this.dialogMainService.showMessageBox(options, window?.win ?? undefined);\n\t}\n\n\tasync showSaveDialog(windowId: number | undefined, options: SaveDialogOptions & INativeHostOptions): Promise<SaveDialogReturnValue> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\treturn this.dialogMainService.showSaveDialog(options, window?.win ?? undefined);\n\t}\n\n\tasync showOpenDialog(windowId: number | undefined, options: OpenDialogOptions & INativeHostOptions): Promise<OpenDialogReturnValue> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\treturn this.dialogMainService.showOpenDialog(options, window?.win ?? undefined);\n\t}\n\n\tasync pickFileFolderAndOpen(windowId: number | undefined, options: INativeOpenDialogOptions): Promise<void> {\n\t\tconst paths = await this.dialogMainService.pickFileFolder(options);\n\t\tif (paths) {\n\t\t\tawait this.doOpenPicked(await Promise.all(paths.map(async path => (await SymlinkSupport.existsDirectory(path)) ? { folderUri: URI.file(path) } : { fileUri: URI.file(path) })), options, windowId);\n\t\t}\n\t}\n\n\tasync pickFolderAndOpen(windowId: number | undefined, options: INativeOpenDialogOptions): Promise<void> {\n\t\tconst paths = await this.dialogMainService.pickFolder(options);\n\t\tif (paths) {\n\t\t\tawait this.doOpenPicked(paths.map(path => ({ folderUri: URI.file(path) })), options, windowId);\n\t\t}\n\t}\n\n\tasync pickFileAndOpen(windowId: number | undefined, options: INativeOpenDialogOptions): Promise<void> {\n\t\tconst paths = await this.dialogMainService.pickFile(options);\n\t\tif (paths) {\n\t\t\tawait this.doOpenPicked(paths.map(path => ({ fileUri: URI.file(path) })), options, windowId);\n\t\t}\n\t}\n\n\tasync pickWorkspaceAndOpen(windowId: number | undefined, options: INativeOpenDialogOptions): Promise<void> {\n\t\tconst paths = await this.dialogMainService.pickWorkspace(options);\n\t\tif (paths) {\n\t\t\tawait this.doOpenPicked(paths.map(path => ({ workspaceUri: URI.file(path) })), options, windowId);\n\t\t}\n\t}\n\n\tprivate async doOpenPicked(openable: IWindowOpenable[], options: INativeOpenDialogOptions, windowId: number | undefined): Promise<void> {\n\t\tawait this.windowsMainService.open({\n\t\t\tcontext: OpenContext.DIALOG,\n\t\t\tcontextWindowId: windowId,\n\t\t\tcli: this.environmentMainService.args,\n\t\t\turisToOpen: openable,\n\t\t\tforceNewWindow: options.forceNewWindow,\n\t\t\t/* remoteAuthority will be determined based on openable */\n\t\t});\n\t}\n\n\t//#endregion\n\n\n\t//#region OS\n\n\tasync showItemInFolder(windowId: number | undefined, path: string): Promise<void> {\n\t\tshell.showItemInFolder(path);\n\t}\n\n\tasync setRepresentedFilename(windowId: number | undefined, path: string, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.setRepresentedFilename(path);\n\t}\n\n\tasync setDocumentEdited(windowId: number | undefined, edited: boolean, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\twindow?.setDocumentEdited(edited);\n\t}\n\n\tasync openExternal(windowId: number | undefined, url: string, defaultApplication?: string): Promise<boolean> {\n\t\tthis.environmentMainService.unsetSnapExportedVariables();\n\t\ttry {\n\t\t\tif (matchesSomeScheme(url, Schemas.http, Schemas.https)) {\n\t\t\t\tthis.openExternalBrowser(url, defaultApplication);\n\t\t\t} else {\n\t\t\t\tshell.openExternal(url);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.environmentMainService.restoreSnapExportedVariables();\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async openExternalBrowser(url: string, defaultApplication?: string): Promise<void> {\n\t\tconst configuredBrowser = defaultApplication ?? this.configurationService.getValue<string>('workbench.externalBrowser');\n\t\tif (!configuredBrowser) {\n\t\t\treturn shell.openExternal(url);\n\t\t}\n\n\t\tif (configuredBrowser.includes(posix.sep) || configuredBrowser.includes(win32.sep)) {\n\t\t\tconst browserPathExists = await Promises.exists(configuredBrowser);\n\t\t\tif (!browserPathExists) {\n\t\t\t\tthis.logService.error(`Configured external browser path does not exist: ${configuredBrowser}`);\n\t\t\t\treturn shell.openExternal(url);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst { default: open } = await import('open');\n\t\t\tconst res = await open(url, {\n\t\t\t\tapp: {\n\t\t\t\t\t// Use `open.apps` helper to allow cross-platform browser\n\t\t\t\t\t// aliases to be looked up properly. Fallback to the\n\t\t\t\t\t// configured value if not found.\n\t\t\t\t\tname: Object.hasOwn(open.apps, configuredBrowser) ? open.apps[(configuredBrowser as keyof typeof open['apps'])] : configuredBrowser\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.stderr?.once('data', (data: Buffer) => {\n\t\t\t\tthis.logService.error(`Error openening external URL '${url}' using browser '${configuredBrowser}': ${data.toString()}`);\n\t\t\t\treturn shell.openExternal(url);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`Unable to open external URL '${url}' using browser '${configuredBrowser}' due to ${error}.`);\n\t\t\treturn shell.openExternal(url);\n\t\t}\n\t}\n\n\tmoveItemToTrash(windowId: number | undefined, fullPath: string): Promise<void> {\n\t\treturn shell.trashItem(fullPath);\n\t}\n\n\tasync isAdmin(): Promise<boolean> {\n\t\tlet isAdmin: boolean;\n\t\tif (isWindows) {\n\t\t\tisAdmin = (await import('native-is-elevated')).default();\n\t\t} else {\n\t\t\tisAdmin = process.getuid?.() === 0;\n\t\t}\n\n\t\treturn isAdmin;\n\t}\n\n\tasync writeElevated(windowId: number | undefined, source: URI, target: URI, options?: { unlock?: boolean }): Promise<void> {\n\t\tconst sudoPrompt = await import('@vscode/sudo-prompt');\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst sudoCommand: string[] = [`\"${this.cliPath}\"`];\n\t\t\tif (options?.unlock) {\n\t\t\t\tsudoCommand.push('--file-chmod');\n\t\t\t}\n\n\t\t\tsudoCommand.push('--file-write', `\"${source.fsPath}\"`, `\"${target.fsPath}\"`);\n\n\t\t\tconst promptOptions = {\n\t\t\t\tname: this.productService.nameLong.replace('-', ''),\n\t\t\t\ticns: (isMacintosh && this.environmentMainService.isBuilt) ? join(dirname(this.environmentMainService.appRoot), `${this.productService.nameShort}.icns`) : undefined\n\t\t\t};\n\n\t\t\tsudoPrompt.exec(sudoCommand.join(' '), promptOptions, (error?, stdout?, stderr?) => {\n\t\t\t\tif (stdout) {\n\t\t\t\t\tthis.logService.trace(`[sudo-prompt] received stdout: ${stdout}`);\n\t\t\t\t}\n\n\t\t\t\tif (stderr) {\n\t\t\t\t\tthis.logService.trace(`[sudo-prompt] received stderr: ${stderr}`);\n\t\t\t\t}\n\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync isRunningUnderARM64Translation(): Promise<boolean> {\n\t\tif (isLinux || isWindows) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn app.runningUnderARM64Translation;\n\t}\n\n\t@memoize\n\tprivate get cliPath(): string {\n\n\t\t// Windows\n\t\tif (isWindows) {\n\t\t\tif (this.environmentMainService.isBuilt) {\n\t\t\t\treturn join(dirname(process.execPath), 'bin', `${this.productService.applicationName}.cmd`);\n\t\t\t}\n\n\t\t\treturn join(this.environmentMainService.appRoot, 'scripts', 'code-cli.bat');\n\t\t}\n\n\t\t// Linux\n\t\tif (isLinux) {\n\t\t\tif (this.environmentMainService.isBuilt) {\n\t\t\t\treturn join(dirname(process.execPath), 'bin', `${this.productService.applicationName}`);\n\t\t\t}\n\n\t\t\treturn join(this.environmentMainService.appRoot, 'scripts', 'code-cli.sh');\n\t\t}\n\n\t\t// macOS\n\t\tif (this.environmentMainService.isBuilt) {\n\t\t\treturn join(this.environmentMainService.appRoot, 'bin', 'code');\n\t\t}\n\n\t\treturn join(this.environmentMainService.appRoot, 'scripts', 'code-cli.sh');\n\t}\n\n\tasync getOSStatistics(): Promise<IOSStatistics> {\n\t\treturn {\n\t\t\ttotalmem: totalmem(),\n\t\t\tfreemem: freemem(),\n\t\t\tloadavg: loadavg()\n\t\t};\n\t}\n\n\tasync getOSProperties(): Promise<IOSProperties> {\n\t\treturn {\n\t\t\tarch: arch(),\n\t\t\tplatform: platform(),\n\t\t\trelease: release(),\n\t\t\ttype: type(),\n\t\t\tcpus: cpus()\n\t\t};\n\t}\n\n\tasync getOSVirtualMachineHint(): Promise<number> {\n\t\treturn virtualMachineHint.value();\n\t}\n\n\tasync getOSColorScheme(): Promise<IColorScheme> {\n\t\treturn this.themeMainService.getColorScheme();\n\t}\n\n\t// WSL\n\tasync hasWSLFeatureInstalled(): Promise<boolean> {\n\t\treturn isWindows && hasWSLFeatureInstalled();\n\t}\n\n\t//#endregion\n\n\n\t//#region Process\n\n\tasync getProcessId(windowId: number | undefined): Promise<number | undefined> {\n\t\tconst window = this.windowById(undefined, windowId);\n\t\treturn window?.win?.webContents.getOSProcessId();\n\t}\n\n\tasync killProcess(windowId: number | undefined, pid: number, code: string): Promise<void> {\n\t\tprocess.kill(pid, code);\n\t}\n\n\t//#endregion\n\n\n\t//#region Clipboard\n\n\tasync readClipboardText(windowId: number | undefined, type?: 'selection' | 'clipboard'): Promise<string> {\n\t\treturn clipboard.readText(type);\n\t}\n\n\tasync writeClipboardText(windowId: number | undefined, text: string, type?: 'selection' | 'clipboard'): Promise<void> {\n\t\treturn clipboard.writeText(text, type);\n\t}\n\n\tasync readClipboardFindText(windowId: number | undefined,): Promise<string> {\n\t\treturn clipboard.readFindText();\n\t}\n\n\tasync writeClipboardFindText(windowId: number | undefined, text: string): Promise<void> {\n\t\treturn clipboard.writeFindText(text);\n\t}\n\n\tasync writeClipboardBuffer(windowId: number | undefined, format: string, buffer: VSBuffer, type?: 'selection' | 'clipboard'): Promise<void> {\n\t\treturn clipboard.writeBuffer(format, Buffer.from(buffer.buffer), type);\n\t}\n\n\tasync readClipboardBuffer(windowId: number | undefined, format: string): Promise<VSBuffer> {\n\t\treturn VSBuffer.wrap(clipboard.readBuffer(format));\n\t}\n\n\tasync hasClipboard(windowId: number | undefined, format: string, type?: 'selection' | 'clipboard'): Promise<boolean> {\n\t\treturn clipboard.has(format, type);\n\t}\n\n\t//#endregion\n\n\n\t//#region macOS Touchbar\n\n\tasync newWindowTab(): Promise<void> {\n\t\tawait this.windowsMainService.open({\n\t\t\tcontext: OpenContext.API,\n\t\t\tcli: this.environmentMainService.args,\n\t\t\tforceNewTabbedWindow: true,\n\t\t\tforceEmpty: true,\n\t\t\tremoteAuthority: this.environmentMainService.args.remote || undefined\n\t\t});\n\t}\n\n\tasync showPreviousWindowTab(): Promise<void> {\n\t\tMenu.sendActionToFirstResponder('selectPreviousTab:');\n\t}\n\n\tasync showNextWindowTab(): Promise<void> {\n\t\tMenu.sendActionToFirstResponder('selectNextTab:');\n\t}\n\n\tasync moveWindowTabToNewWindow(): Promise<void> {\n\t\tMenu.sendActionToFirstResponder('moveTabToNewWindow:');\n\t}\n\n\tasync mergeAllWindowTabs(): Promise<void> {\n\t\tMenu.sendActionToFirstResponder('mergeAllWindows:');\n\t}\n\n\tasync toggleWindowTabsBar(): Promise<void> {\n\t\tMenu.sendActionToFirstResponder('toggleTabBar:');\n\t}\n\n\tasync updateTouchBar(windowId: number | undefined, items: ISerializableCommandAction[][]): Promise<void> {\n\t\tconst window = this.codeWindowById(windowId);\n\t\twindow?.updateTouchBar(items);\n\t}\n\n\t//#endregion\n\n\n\t//#region Lifecycle\n\n\tasync notifyReady(windowId: number | undefined): Promise<void> {\n\t\tconst window = this.codeWindowById(windowId);\n\t\twindow?.setReady();\n\t}\n\n\tasync relaunch(windowId: number | undefined, options?: IRelaunchOptions): Promise<void> {\n\t\treturn this.lifecycleMainService.relaunch(options);\n\t}\n\n\tasync reload(windowId: number | undefined, options?: { disableExtensions?: boolean }): Promise<void> {\n\t\tconst window = this.codeWindowById(windowId);\n\t\tif (window) {\n\n\t\t\t// Special case: support `transient` workspaces by preventing\n\t\t\t// the reload and rather go back to an empty window. Transient\n\t\t\t// workspaces should never restore, even when the user wants\n\t\t\t// to reload.\n\t\t\t// For: https://github.com/microsoft/vscode/issues/119695\n\t\t\tif (isWorkspaceIdentifier(window.openedWorkspace)) {\n\t\t\t\tconst configPath = window.openedWorkspace.configPath;\n\t\t\t\tif (configPath.scheme === Schemas.file) {\n\t\t\t\t\tconst workspace = await this.workspacesManagementMainService.resolveLocalWorkspace(configPath);\n\t\t\t\t\tif (workspace?.transient) {\n\t\t\t\t\t\treturn this.openWindow(window.id, { forceReuseWindow: true });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Proceed normally to reload the window\n\t\t\treturn this.lifecycleMainService.reload(window, options?.disableExtensions !== undefined ? { _: [], 'disable-extensions': options.disableExtensions } : undefined);\n\t\t}\n\t}\n\n\tasync closeWindow(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\treturn window?.win?.close();\n\t}\n\n\tasync quit(windowId: number | undefined): Promise<void> {\n\n\t\t// If the user selected to exit from an extension development host window, do not quit, but just\n\t\t// close the window unless this is the last window that is opened.\n\t\tconst window = this.windowsMainService.getLastActiveWindow();\n\t\tif (window?.isExtensionDevelopmentHost && this.windowsMainService.getWindowCount() > 1 && window.win) {\n\t\t\twindow.win.close();\n\t\t}\n\n\t\t// Otherwise: normal quit\n\t\telse {\n\t\t\tthis.lifecycleMainService.quit();\n\t\t}\n\t}\n\n\tasync exit(windowId: number | undefined, code: number): Promise<void> {\n\t\tawait this.lifecycleMainService.kill(code);\n\t}\n\n\t//#endregion\n\n\n\t//#region Connectivity\n\n\tasync resolveProxy(windowId: number | undefined, url: string): Promise<string | undefined> {\n\t\tif (this.environmentMainService.extensionTestsLocationURI) {\n\t\t\tconst testProxy = this.configurationService.getValue<string>('integration-test.http.proxy');\n\t\t\tif (testProxy) {\n\t\t\t\treturn testProxy;\n\t\t\t}\n\t\t}\n\t\tconst window = this.codeWindowById(windowId);\n\t\tconst session = window?.win?.webContents?.session;\n\n\t\treturn session?.resolveProxy(url);\n\t}\n\n\tasync lookupAuthorization(_windowId: number | undefined, authInfo: AuthInfo): Promise<Credentials | undefined> {\n\t\treturn this.proxyAuthService.lookupAuthorization(authInfo);\n\t}\n\n\tasync lookupKerberosAuthorization(_windowId: number | undefined, url: string): Promise<string | undefined> {\n\t\treturn this.requestService.lookupKerberosAuthorization(url);\n\t}\n\n\tasync loadCertificates(_windowId: number | undefined): Promise<string[]> {\n\t\treturn this.requestService.loadCertificates();\n\t}\n\n\tfindFreePort(windowId: number | undefined, startPort: number, giveUpAfter: number, timeout: number, stride = 1): Promise<number> {\n\t\treturn findFreePort(startPort, giveUpAfter, timeout, stride);\n\t}\n\n\t//#endregion\n\n\n\t//#region Development\n\n\tasync openDevTools(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\n\t\tlet mode: 'bottom' | undefined = undefined;\n\t\tif (isLinux && useWindowControlsOverlay(this.configurationService)) {\n\t\t\tmode = 'bottom'; // TODO@bpasero WCO and devtools collide with default option 'right'\n\t\t}\n\t\twindow?.win?.webContents.openDevTools(mode ? { mode } : undefined);\n\t}\n\n\tasync toggleDevTools(windowId: number | undefined, options?: INativeHostOptions): Promise<void> {\n\t\tconst window = this.windowById(options?.targetWindowId, windowId);\n\t\tconst webContents = window?.win?.webContents;\n\t\tif (!webContents) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isLinux && useWindowControlsOverlay(this.configurationService) && !webContents.isDevToolsOpened()) {\n\t\t\twebContents.openDevTools({ mode: 'bottom' }); // TODO@bpasero WCO and devtools collide with default option 'right'\n\t\t} else {\n\t\t\twebContents.toggleDevTools();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t// #region Performance\n\n\tasync profileRenderer(windowId: number | undefined, session: string, duration: number): Promise<IV8Profile> {\n\t\tconst window = this.codeWindowById(windowId);\n\t\tif (!window || !window.win) {\n\t\t\tthrow new Error();\n\t\t}\n\n\t\tconst profiler = new WindowProfiler(window.win, session, this.logService);\n\t\tconst result = await profiler.inspect(duration);\n\t\treturn result;\n\t}\n\n\t// #endregion\n\n\t//#region Registry (windows)\n\n\tasync windowsGetStringRegKey(windowId: number | undefined, hive: 'HKEY_CURRENT_USER' | 'HKEY_LOCAL_MACHINE' | 'HKEY_CLASSES_ROOT' | 'HKEY_USERS' | 'HKEY_CURRENT_CONFIG', path: string, name: string): Promise<string | undefined> {\n\t\tif (!isWindows) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst Registry = await import('@vscode/windows-registry');\n\t\ttry {\n\t\t\treturn Registry.GetStringRegKey(hive, path, name);\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t//#endregion\n\n\tprivate windowById(windowId: number | undefined, fallbackCodeWindowId?: number): ICodeWindow | IAuxiliaryWindow | undefined {\n\t\treturn this.codeWindowById(windowId) ?? this.auxiliaryWindowById(windowId) ?? this.codeWindowById(fallbackCodeWindowId);\n\t}\n\n\tprivate codeWindowById(windowId: number | undefined): ICodeWindow | undefined {\n\t\tif (typeof windowId !== 'number') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.windowsMainService.getWindowById(windowId);\n\t}\n\n\tprivate auxiliaryWindowById(windowId: number | undefined): IAuxiliaryWindow | undefined {\n\t\tif (typeof windowId !== 'number') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst contents = webContents.fromId(windowId);\n\t\tif (!contents) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.auxiliaryWindowsMainService.getWindowByWebContents(contents);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["error", "resolve", "type", "webContents"]
}
