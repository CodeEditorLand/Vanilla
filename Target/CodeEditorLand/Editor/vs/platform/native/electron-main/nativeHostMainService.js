var F=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var x=(y,c,e,i)=>{for(var n=i>1?void 0:i?H(c,e):c,o=y.length-1,r;o>=0;o--)(r=y[o])&&(n=(i?r(c,e,n):r(n))||n);return i&&n&&F(c,e,n),n},d=(y,c)=>(e,i)=>c(e,i,y);import{exec as A}from"child_process";import*as E from"fs";import{arch as U,cpus as z,freemem as L,loadavg as $,platform as _,release as V,totalmem as K,type as q}from"os";import{promisify as D}from"util";import{app as I,clipboard as l,Menu as S,powerMonitor as Y,screen as W,shell as u,webContents as j}from"electron";import{VSBuffer as G}from"../../../../vs/base/common/buffer.js";import{memoize as J}from"../../../../vs/base/common/decorators.js";import{CancellationError as k}from"../../../../vs/base/common/errors.js";import{Emitter as Q,Event as t}from"../../../../vs/base/common/event.js";import{Disposable as X}from"../../../../vs/base/common/lifecycle.js";import{matchesSomeScheme as Z,Schemas as C}from"../../../../vs/base/common/network.js";import{dirname as B,join as p,posix as ee,resolve as ie,win32 as ne}from"../../../../vs/base/common/path.js";import{isLinux as N,isMacintosh as oe,isWindows as b}from"../../../../vs/base/common/platform.js";import"../../../../vs/base/common/types.js";import{URI as P}from"../../../../vs/base/common/uri.js";import{realpath as re}from"../../../../vs/base/node/extpath.js";import{virtualMachineHint as te}from"../../../../vs/base/node/id.js";import{Promises as T,SymlinkSupport as R}from"../../../../vs/base/node/pfs.js";import{findFreePort as de}from"../../../../vs/base/node/ports.js";import{localize as a}from"../../../../vs/nls.js";import"../../../../vs/platform/action/common/action.js";import"../../../../vs/platform/auxiliaryWindow/electron-main/auxiliaryWindow.js";import{IAuxiliaryWindowsMainService as se}from"../../../../vs/platform/auxiliaryWindow/electron-main/auxiliaryWindows.js";import{IConfigurationService as ae}from"../../../../vs/platform/configuration/common/configuration.js";import"../../../../vs/platform/dialogs/common/dialogs.js";import{IDialogMainService as ce}from"../../../../vs/platform/dialogs/electron-main/dialogMainService.js";import{IEnvironmentMainService as we}from"../../../../vs/platform/environment/electron-main/environmentMainService.js";import{createDecorator as me}from"../../../../vs/platform/instantiation/common/instantiation.js";import{ILifecycleMainService as le}from"../../../../vs/platform/lifecycle/electron-main/lifecycleMainService.js";import{ILogService as ue}from"../../../../vs/platform/log/common/log.js";import"../../../../vs/platform/native/common/native.js";import{IProxyAuthService as pe}from"../../../../vs/platform/native/electron-main/auth.js";import{IProductService as fe}from"../../../../vs/platform/product/common/productService.js";import"../../../../vs/platform/profiling/common/profiling.js";import{WindowProfiler as ve}from"../../../../vs/platform/profiling/electron-main/windowProfiling.js";import{hasWSLFeatureInstalled as he}from"../../../../vs/platform/remote/node/wsl.js";import{IRequestService as ye}from"../../../../vs/platform/request/common/request.js";import"../../../../vs/platform/theme/common/themeService.js";import{IThemeMainService as ge}from"../../../../vs/platform/theme/electron-main/themeMainService.js";import"../../../../vs/platform/window/common/window.js";import"../../../../vs/platform/window/electron-main/window.js";import{IWindowsMainService as Ie,OpenContext as O}from"../../../../vs/platform/windows/electron-main/windows.js";import{isWorkspaceIdentifier as Se,toWorkspaceIdentifier as We}from"../../../../vs/platform/workspace/common/workspace.js";import{IWorkspacesManagementMainService as be}from"../../../../vs/platform/workspaces/electron-main/workspacesManagementMainService.js";const Ki=me("nativeHostMainService");let M=class extends X{constructor(e,i,n,o,r,s,g,w,f,m,v,h){super();this.windowsMainService=e;this.auxiliaryWindowsMainService=i;this.dialogMainService=n;this.lifecycleMainService=o;this.environmentMainService=r;this.logService=s;this.productService=g;this.themeMainService=w;this.workspacesManagementMainService=f;this.configurationService=m;this.requestService=v;this.proxyAuthService=h}get windowId(){throw new Error("Not implemented in electron-main")}onDidOpenMainWindow=t.map(this.windowsMainService.onDidOpenWindow,e=>e.id);onDidTriggerWindowSystemContextMenu=t.any(t.map(this.windowsMainService.onDidTriggerSystemContextMenu,({window:e,x:i,y:n})=>({windowId:e.id,x:i,y:n})),t.map(this.auxiliaryWindowsMainService.onDidTriggerSystemContextMenu,({window:e,x:i,y:n})=>({windowId:e.id,x:i,y:n})));onDidMaximizeWindow=t.any(t.map(this.windowsMainService.onDidMaximizeWindow,e=>e.id),t.map(this.auxiliaryWindowsMainService.onDidMaximizeWindow,e=>e.id));onDidUnmaximizeWindow=t.any(t.map(this.windowsMainService.onDidUnmaximizeWindow,e=>e.id),t.map(this.auxiliaryWindowsMainService.onDidUnmaximizeWindow,e=>e.id));onDidChangeWindowFullScreen=t.any(t.map(this.windowsMainService.onDidChangeFullScreen,e=>({windowId:e.window.id,fullscreen:e.fullscreen})),t.map(this.auxiliaryWindowsMainService.onDidChangeFullScreen,e=>({windowId:e.window.id,fullscreen:e.fullscreen})));onDidBlurMainWindow=t.filter(t.fromNodeEventEmitter(I,"browser-window-blur",(e,i)=>i.id),e=>!!this.windowsMainService.getWindowById(e));onDidFocusMainWindow=t.any(t.map(t.filter(t.map(this.windowsMainService.onDidChangeWindowsCount,()=>this.windowsMainService.getLastActiveWindow()),e=>!!e),e=>e.id),t.filter(t.fromNodeEventEmitter(I,"browser-window-focus",(e,i)=>i.id),e=>!!this.windowsMainService.getWindowById(e)));onDidBlurMainOrAuxiliaryWindow=t.any(this.onDidBlurMainWindow,t.map(t.filter(t.fromNodeEventEmitter(I,"browser-window-blur",(e,i)=>this.auxiliaryWindowsMainService.getWindowByWebContents(i.webContents)),e=>!!e),e=>e.id));onDidFocusMainOrAuxiliaryWindow=t.any(this.onDidFocusMainWindow,t.map(t.filter(t.fromNodeEventEmitter(I,"browser-window-focus",(e,i)=>this.auxiliaryWindowsMainService.getWindowByWebContents(i.webContents)),e=>!!e),e=>e.id));onDidResumeOS=t.fromNodeEventEmitter(Y,"resume");onDidChangeColorScheme=this.themeMainService.onDidChangeColorScheme;_onDidChangePassword=this._register(new Q);onDidChangePassword=this._onDidChangePassword.event;onDidChangeDisplay=t.debounce(t.any(t.filter(t.fromNodeEventEmitter(W,"display-metrics-changed",(e,i,n)=>n),e=>!(Array.isArray(e)&&e.length===1&&e[0]==="workArea")),t.fromNodeEventEmitter(W,"display-added"),t.fromNodeEventEmitter(W,"display-removed")),()=>{},100);async getWindows(e,i){const n=this.windowsMainService.getWindows().map(r=>({id:r.id,workspace:r.openedWorkspace??We(r.backupPath,r.isExtensionDevelopmentHost),title:r.win?.getTitle()??"",filename:r.getRepresentedFilename(),dirty:r.isDocumentEdited()})),o=[];return i.includeAuxiliaryWindows&&o.push(...this.auxiliaryWindowsMainService.getWindows().map(r=>({id:r.id,parentId:r.parentId,title:r.win?.getTitle()??"",filename:r.getRepresentedFilename()}))),[...n,...o]}async getWindowCount(e){return this.windowsMainService.getWindowCount()}async getActiveWindowId(e){const i=this.windowsMainService.getFocusedWindow()||this.windowsMainService.getLastActiveWindow();if(i)return i.id}async getActiveWindowPosition(){const e=this.windowsMainService.getFocusedWindow()||this.windowsMainService.getLastActiveWindow();if(e)return e.getBounds()}openWindow(e,i,n){return Array.isArray(i)?this.doOpenWindow(e,i,n):this.doOpenEmptyWindow(e,i)}async doOpenWindow(e,i,n=Object.create(null)){i.length>0&&await this.windowsMainService.open({context:O.API,contextWindowId:e,urisToOpen:i,cli:this.environmentMainService.args,forceNewWindow:n.forceNewWindow,forceReuseWindow:n.forceReuseWindow,preferNewWindow:n.preferNewWindow,diffMode:n.diffMode,mergeMode:n.mergeMode,addMode:n.addMode,gotoLineMode:n.gotoLineMode,noRecentEntry:n.noRecentEntry,waitMarkerFileURI:n.waitMarkerFileURI,remoteAuthority:n.remoteAuthority||void 0,forceProfile:n.forceProfile,forceTempProfile:n.forceTempProfile})}async doOpenEmptyWindow(e,i){await this.windowsMainService.openEmptyWindow({context:O.API,contextWindowId:e},i)}async isFullScreen(e,i){return this.windowById(i?.targetWindowId,e)?.isFullScreen??!1}async toggleFullScreen(e,i){this.windowById(i?.targetWindowId,e)?.toggleFullScreen()}async handleTitleDoubleClick(e,i){this.windowById(i?.targetWindowId,e)?.handleTitleDoubleClick()}async getCursorScreenPoint(e){const i=W.getCursorScreenPoint(),n=W.getDisplayNearestPoint(i);return{point:i,display:n.bounds}}async isMaximized(e,i){return this.windowById(i?.targetWindowId,e)?.win?.isMaximized()??!1}async maximizeWindow(e,i){this.windowById(i?.targetWindowId,e)?.win?.maximize()}async unmaximizeWindow(e,i){this.windowById(i?.targetWindowId,e)?.win?.unmaximize()}async minimizeWindow(e,i){this.windowById(i?.targetWindowId,e)?.win?.minimize()}async moveWindowTop(e,i){this.windowById(i?.targetWindowId,e)?.win?.moveTop()}async positionWindow(e,i,n){const o=this.windowById(n?.targetWindowId,e);if(o?.win){if(o.win.isFullScreen()){const r=t.toPromise(t.once(t.fromNodeEventEmitter(o.win,"leave-full-screen")));o.win.setFullScreen(!1),await r}o.win.setBounds(i)}}async updateWindowControls(e,i){this.windowById(i?.targetWindowId,e)?.updateWindowControls(i)}async focusWindow(e,i){this.windowById(i?.targetWindowId,e)?.focus({force:i?.force??!1})}async setMinimumSize(e,i,n){const o=this.codeWindowById(e);if(o?.win){const[r,s]=o.win.getSize(),[g,w]=o.win.getMinimumSize(),[f,m]=[i??g,n??w],[v,h]=[Math.max(r,f),Math.max(s,m)];(g!==f||w!==m)&&o.win.setMinimumSize(f,m),(r!==v||s!==h)&&o.win.setSize(v,h)}}async saveWindowSplash(e,i){this.themeMainService.saveWindowSplash(e,i)}async installShellCommand(e){const{source:i,target:n}=await this.getShellCommandLink();try{const{symbolicLink:o}=await R.stat(i);if(o&&!o.dangling){const r=await re(i);if(n===r)return}await E.promises.unlink(i)}catch(o){if(o.code!=="ENOENT")throw o}try{await E.promises.symlink(n,i)}catch(o){if(o.code!=="EACCES"&&o.code!=="ENOENT")throw o;const{response:r}=await this.showMessageBox(e,{type:"info",message:a("warnEscalation","{0} will now prompt with 'osascript' for Administrator privileges to install the shell command.",this.productService.nameShort),buttons:[a({key:"ok",comment:["&& denotes a mnemonic"]},"&&OK"),a("cancel","Cancel")]});if(r===1)throw new k;try{const s=`osascript -e "do shell script \\"mkdir -p /usr/local/bin && ln -sf '${n}' '${i}'\\" with administrator privileges"`;await D(A)(s)}catch{throw new Error(a("cantCreateBinFolder","Unable to install the shell command '{0}'.",i))}}}async uninstallShellCommand(e){const{source:i}=await this.getShellCommandLink();try{await E.promises.unlink(i)}catch(n){switch(n.code){case"EACCES":{const{response:o}=await this.showMessageBox(e,{type:"info",message:a("warnEscalationUninstall","{0} will now prompt with 'osascript' for Administrator privileges to uninstall the shell command.",this.productService.nameShort),buttons:[a({key:"ok",comment:["&& denotes a mnemonic"]},"&&OK"),a("cancel","Cancel")]});if(o===1)throw new k;try{const r=`osascript -e "do shell script \\"rm '${i}'\\" with administrator privileges"`;await D(A)(r)}catch{throw new Error(a("cantUninstall","Unable to uninstall the shell command '{0}'.",i))}break}case"ENOENT":break;default:throw n}}}async getShellCommandLink(){const e=ie(this.environmentMainService.appRoot,"bin","code"),i=`/usr/local/bin/${this.productService.applicationName}`;if(!await T.exists(e))throw new Error(a("sourceMissing","Unable to find shell script in '{0}'",e));return{source:i,target:e}}async showMessageBox(e,i){const n=this.windowById(i?.targetWindowId,e);return this.dialogMainService.showMessageBox(i,n?.win??void 0)}async showSaveDialog(e,i){const n=this.windowById(i?.targetWindowId,e);return this.dialogMainService.showSaveDialog(i,n?.win??void 0)}async showOpenDialog(e,i){const n=this.windowById(i?.targetWindowId,e);return this.dialogMainService.showOpenDialog(i,n?.win??void 0)}async pickFileFolderAndOpen(e,i){const n=await this.dialogMainService.pickFileFolder(i);n&&await this.doOpenPicked(await Promise.all(n.map(async o=>await R.existsDirectory(o)?{folderUri:P.file(o)}:{fileUri:P.file(o)})),i,e)}async pickFolderAndOpen(e,i){const n=await this.dialogMainService.pickFolder(i);n&&await this.doOpenPicked(n.map(o=>({folderUri:P.file(o)})),i,e)}async pickFileAndOpen(e,i){const n=await this.dialogMainService.pickFile(i);n&&await this.doOpenPicked(n.map(o=>({fileUri:P.file(o)})),i,e)}async pickWorkspaceAndOpen(e,i){const n=await this.dialogMainService.pickWorkspace(i);n&&await this.doOpenPicked(n.map(o=>({workspaceUri:P.file(o)})),i,e)}async doOpenPicked(e,i,n){await this.windowsMainService.open({context:O.DIALOG,contextWindowId:n,cli:this.environmentMainService.args,urisToOpen:e,forceNewWindow:i.forceNewWindow})}async showItemInFolder(e,i){u.showItemInFolder(i)}async setRepresentedFilename(e,i,n){this.windowById(n?.targetWindowId,e)?.setRepresentedFilename(i)}async setDocumentEdited(e,i,n){this.windowById(n?.targetWindowId,e)?.setDocumentEdited(i)}async openExternal(e,i,n){this.environmentMainService.unsetSnapExportedVariables();try{Z(i,C.http,C.https)?this.openExternalBrowser(i,n):u.openExternal(i)}finally{this.environmentMainService.restoreSnapExportedVariables()}return!0}async openExternalBrowser(e,i){const n=i??this.configurationService.getValue("workbench.externalBrowser");if(!n)return u.openExternal(e);if((n.includes(ee.sep)||n.includes(ne.sep))&&!await T.exists(n))return this.logService.error(`Configured external browser path does not exist: ${n}`),u.openExternal(e);try{const{default:o}=await import("open");(await o(e,{app:{name:Object.hasOwn(o.apps,n)?o.apps[n]:n}})).stderr?.once("data",s=>(this.logService.error(`Error openening external URL '${e}' using browser '${n}': ${s.toString()}`),u.openExternal(e)))}catch(o){return this.logService.error(`Unable to open external URL '${e}' using browser '${n}' due to ${o}.`),u.openExternal(e)}}moveItemToTrash(e,i){return u.trashItem(i)}async isAdmin(){let e;return b?e=(await import("native-is-elevated")).default():e=process.getuid?.()===0,e}async writeElevated(e,i,n,o){const r=await import("@vscode/sudo-prompt");return new Promise((s,g)=>{const w=[`"${this.cliPath}"`];o?.unlock&&w.push("--file-chmod"),w.push("--file-write",`"${i.fsPath}"`,`"${n.fsPath}"`);const f={name:this.productService.nameLong.replace("-",""),icns:oe&&this.environmentMainService.isBuilt?p(B(this.environmentMainService.appRoot),`${this.productService.nameShort}.icns`):void 0};r.exec(w.join(" "),f,(m,v,h)=>{v&&this.logService.trace(`[sudo-prompt] received stdout: ${v}`),h&&this.logService.trace(`[sudo-prompt] received stderr: ${h}`),m?g(m):s(void 0)})})}async isRunningUnderARM64Translation(){return N||b?!1:I.runningUnderARM64Translation}get cliPath(){return b?this.environmentMainService.isBuilt?p(B(process.execPath),"bin",`${this.productService.applicationName}.cmd`):p(this.environmentMainService.appRoot,"scripts","code-cli.bat"):N?this.environmentMainService.isBuilt?p(B(process.execPath),"bin",`${this.productService.applicationName}`):p(this.environmentMainService.appRoot,"scripts","code-cli.sh"):this.environmentMainService.isBuilt?p(this.environmentMainService.appRoot,"bin","code"):p(this.environmentMainService.appRoot,"scripts","code-cli.sh")}async getOSStatistics(){return{totalmem:K(),freemem:L(),loadavg:$()}}async getOSProperties(){return{arch:U(),platform:_(),release:V(),type:q(),cpus:z()}}async getOSVirtualMachineHint(){return te.value()}async getOSColorScheme(){return this.themeMainService.getColorScheme()}async hasWSLFeatureInstalled(){return b&&he()}async getProcessId(e){return this.windowById(void 0,e)?.win?.webContents.getOSProcessId()}async killProcess(e,i,n){process.kill(i,n)}async readClipboardText(e,i){return l.readText(i)}async writeClipboardText(e,i,n){return l.writeText(i,n)}async readClipboardFindText(e){return l.readFindText()}async writeClipboardFindText(e,i){return l.writeFindText(i)}async writeClipboardBuffer(e,i,n,o){return l.writeBuffer(i,Buffer.from(n.buffer),o)}async readClipboardBuffer(e,i){return G.wrap(l.readBuffer(i))}async hasClipboard(e,i,n){return l.has(i,n)}async newWindowTab(){await this.windowsMainService.open({context:O.API,cli:this.environmentMainService.args,forceNewTabbedWindow:!0,forceEmpty:!0,remoteAuthority:this.environmentMainService.args.remote||void 0})}async showPreviousWindowTab(){S.sendActionToFirstResponder("selectPreviousTab:")}async showNextWindowTab(){S.sendActionToFirstResponder("selectNextTab:")}async moveWindowTabToNewWindow(){S.sendActionToFirstResponder("moveTabToNewWindow:")}async mergeAllWindowTabs(){S.sendActionToFirstResponder("mergeAllWindows:")}async toggleWindowTabsBar(){S.sendActionToFirstResponder("toggleTabBar:")}async updateTouchBar(e,i){this.codeWindowById(e)?.updateTouchBar(i)}async notifyReady(e){this.codeWindowById(e)?.setReady()}async relaunch(e,i){return this.lifecycleMainService.relaunch(i)}async reload(e,i){const n=this.codeWindowById(e);if(n){if(Se(n.openedWorkspace)){const o=n.openedWorkspace.configPath;if(o.scheme===C.file&&(await this.workspacesManagementMainService.resolveLocalWorkspace(o))?.transient)return this.openWindow(n.id,{forceReuseWindow:!0})}return this.lifecycleMainService.reload(n,i?.disableExtensions!==void 0?{_:[],"disable-extensions":i.disableExtensions}:void 0)}}async closeWindow(e,i){return this.windowById(i?.targetWindowId,e)?.win?.close()}async quit(e){const i=this.windowsMainService.getLastActiveWindow();i?.isExtensionDevelopmentHost&&this.windowsMainService.getWindowCount()>1&&i.win?i.win.close():this.lifecycleMainService.quit()}async exit(e,i){await this.lifecycleMainService.kill(i)}async resolveProxy(e,i){if(this.environmentMainService.extensionTestsLocationURI){const r=this.configurationService.getValue("integration-test.http.proxy");if(r)return r}return this.codeWindowById(e)?.win?.webContents?.session?.resolveProxy(i)}async lookupAuthorization(e,i){return this.proxyAuthService.lookupAuthorization(i)}async lookupKerberosAuthorization(e,i){return this.requestService.lookupKerberosAuthorization(i)}async loadCertificates(e){return this.requestService.loadCertificates()}findFreePort(e,i,n,o,r=1){return de(i,n,o,r)}async openDevTools(e,i){this.windowById(i?.targetWindowId,e)?.win?.webContents.openDevTools(i?.mode?{mode:i.mode,activate:i.activate}:void 0)}async toggleDevTools(e,i){this.windowById(i?.targetWindowId,e)?.win?.webContents.toggleDevTools()}async profileRenderer(e,i,n){const o=this.codeWindowById(e);if(!o||!o.win)throw new Error;return await new ve(o.win,i,this.logService).inspect(n)}async windowsGetStringRegKey(e,i,n,o){if(!b)return;const r=await import("@vscode/windows-registry");try{return r.GetStringRegKey(i,n,o)}catch{return}}windowById(e,i){return this.codeWindowById(e)??this.auxiliaryWindowById(e)??this.codeWindowById(i)}codeWindowById(e){if(typeof e=="number")return this.windowsMainService.getWindowById(e)}auxiliaryWindowById(e){if(typeof e!="number")return;const i=j.fromId(e);if(i)return this.auxiliaryWindowsMainService.getWindowByWebContents(i)}};x([J],M.prototype,"cliPath",1),M=x([d(0,Ie),d(1,se),d(2,ce),d(3,le),d(4,we),d(5,ue),d(6,fe),d(7,ge),d(8,be),d(9,ae),d(10,ye),d(11,pe)],M);export{Ki as INativeHostMainService,M as NativeHostMainService};
