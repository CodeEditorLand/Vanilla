{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/native/common/native.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { VSBuffer } from \"../../../base/common/buffer.js\";\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type {\n\tMessageBoxOptions,\n\tMessageBoxReturnValue,\n\tOpenDialogOptions,\n\tOpenDialogReturnValue,\n\tSaveDialogOptions,\n\tSaveDialogReturnValue,\n} from \"../../../base/parts/sandbox/common/electronTypes.js\";\nimport type { ISerializableCommandAction } from \"../../action/common/action.js\";\nimport type { INativeOpenDialogOptions } from \"../../dialogs/common/dialogs.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type { IV8Profile } from \"../../profiling/common/profiling.js\";\nimport type { AuthInfo, Credentials } from \"../../request/common/request.js\";\nimport type { IPartsSplash } from \"../../theme/common/themeService.js\";\nimport type {\n\tIColorScheme,\n\tIOpenEmptyWindowOptions,\n\tIOpenWindowOptions,\n\tIOpenedAuxiliaryWindow,\n\tIOpenedMainWindow,\n\tIPoint,\n\tIRectangle,\n\tIWindowOpenable,\n} from \"../../window/common/window.js\";\n\nexport interface ICPUProperties {\n\tmodel: string;\n\tspeed: number;\n}\n\nexport interface IOSProperties {\n\ttype: string;\n\trelease: string;\n\tarch: string;\n\tplatform: string;\n\tcpus: ICPUProperties[];\n}\n\nexport interface IOSStatistics {\n\ttotalmem: number;\n\tfreemem: number;\n\tloadavg: number[];\n}\n\nexport interface INativeHostOptions {\n\treadonly targetWindowId?: number;\n}\n\nexport interface ICommonNativeHostService {\n\treadonly _serviceBrand: undefined;\n\n\t// Properties\n\treadonly windowId: number;\n\n\t// Events\n\treadonly onDidOpenMainWindow: Event<number>;\n\n\treadonly onDidMaximizeWindow: Event<number>;\n\treadonly onDidUnmaximizeWindow: Event<number>;\n\n\treadonly onDidFocusMainWindow: Event<number>;\n\treadonly onDidBlurMainWindow: Event<number>;\n\n\treadonly onDidChangeWindowFullScreen: Event<{\n\t\twindowId: number;\n\t\tfullscreen: boolean;\n\t}>;\n\n\treadonly onDidFocusMainOrAuxiliaryWindow: Event<number>;\n\treadonly onDidBlurMainOrAuxiliaryWindow: Event<number>;\n\n\treadonly onDidChangeDisplay: Event<void>;\n\n\treadonly onDidResumeOS: Event<unknown>;\n\n\treadonly onDidChangeColorScheme: Event<IColorScheme>;\n\n\treadonly onDidChangePassword: Event<{\n\t\treadonly service: string;\n\t\treadonly account: string;\n\t}>;\n\n\treadonly onDidTriggerWindowSystemContextMenu: Event<{\n\t\treadonly windowId: number;\n\t\treadonly x: number;\n\t\treadonly y: number;\n\t}>;\n\n\t// Window\n\tgetWindows(options: { includeAuxiliaryWindows: true }): Promise<\n\t\tArray<IOpenedMainWindow | IOpenedAuxiliaryWindow>\n\t>;\n\tgetWindows(options: { includeAuxiliaryWindows: false }): Promise<\n\t\tArray<IOpenedMainWindow>\n\t>;\n\tgetWindowCount(): Promise<number>;\n\tgetActiveWindowId(): Promise<number | undefined>;\n\tgetActiveWindowPosition(): Promise<IRectangle | undefined>;\n\n\topenWindow(options?: IOpenEmptyWindowOptions): Promise<void>;\n\topenWindow(\n\t\ttoOpen: IWindowOpenable[],\n\t\toptions?: IOpenWindowOptions,\n\t): Promise<void>;\n\n\tisFullScreen(options?: INativeHostOptions): Promise<boolean>;\n\ttoggleFullScreen(options?: INativeHostOptions): Promise<void>;\n\n\thandleTitleDoubleClick(options?: INativeHostOptions): Promise<void>;\n\n\tgetCursorScreenPoint(): Promise<{\n\t\treadonly point: IPoint;\n\t\treadonly display: IRectangle;\n\t}>;\n\n\tisMaximized(options?: INativeHostOptions): Promise<boolean>;\n\tmaximizeWindow(options?: INativeHostOptions): Promise<void>;\n\tunmaximizeWindow(options?: INativeHostOptions): Promise<void>;\n\tminimizeWindow(options?: INativeHostOptions): Promise<void>;\n\tmoveWindowTop(options?: INativeHostOptions): Promise<void>;\n\tpositionWindow(\n\t\tposition: IRectangle,\n\t\toptions?: INativeHostOptions,\n\t): Promise<void>;\n\n\t/**\n\t * Only supported on Windows and macOS. Updates the window controls to match the title bar size.\n\t *\n\t * @param options `backgroundColor` and `foregroundColor` are only supported on Windows\n\t */\n\tupdateWindowControls(\n\t\toptions: INativeHostOptions & {\n\t\t\theight?: number;\n\t\t\tbackgroundColor?: string;\n\t\t\tforegroundColor?: string;\n\t\t},\n\t): Promise<void>;\n\n\tsetMinimumSize(\n\t\twidth: number | undefined,\n\t\theight: number | undefined,\n\t): Promise<void>;\n\n\tsaveWindowSplash(splash: IPartsSplash): Promise<void>;\n\n\t/**\n\t * Make the window focused.\n\t *\n\t * @param options Pass `force: true` if you want to make the window take\n\t * focus even if the application does not have focus currently. This option\n\t * should only be used if it is necessary to steal focus from the current\n\t * focused application which may not be VSCode.\n\t */\n\tfocusWindow(\n\t\toptions?: INativeHostOptions & { force?: boolean },\n\t): Promise<void>;\n\n\t// Dialogs\n\tshowMessageBox(\n\t\toptions: MessageBoxOptions & INativeHostOptions,\n\t): Promise<MessageBoxReturnValue>;\n\tshowSaveDialog(\n\t\toptions: SaveDialogOptions & INativeHostOptions,\n\t): Promise<SaveDialogReturnValue>;\n\tshowOpenDialog(\n\t\toptions: OpenDialogOptions & INativeHostOptions,\n\t): Promise<OpenDialogReturnValue>;\n\n\tpickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\n\t// OS\n\tshowItemInFolder(path: string): Promise<void>;\n\tsetRepresentedFilename(\n\t\tpath: string,\n\t\toptions?: INativeHostOptions,\n\t): Promise<void>;\n\tsetDocumentEdited(\n\t\tedited: boolean,\n\t\toptions?: INativeHostOptions,\n\t): Promise<void>;\n\topenExternal(url: string, defaultApplication?: string): Promise<boolean>;\n\tmoveItemToTrash(fullPath: string): Promise<void>;\n\n\tisAdmin(): Promise<boolean>;\n\twriteElevated(\n\t\tsource: URI,\n\t\ttarget: URI,\n\t\toptions?: { unlock?: boolean },\n\t): Promise<void>;\n\tisRunningUnderARM64Translation(): Promise<boolean>;\n\n\tgetOSProperties(): Promise<IOSProperties>;\n\tgetOSStatistics(): Promise<IOSStatistics>;\n\tgetOSVirtualMachineHint(): Promise<number>;\n\n\tgetOSColorScheme(): Promise<IColorScheme>;\n\n\thasWSLFeatureInstalled(): Promise<boolean>;\n\n\t// Process\n\tgetProcessId(): Promise<number | undefined>;\n\tkillProcess(pid: number, code: string): Promise<void>;\n\n\t// Clipboard\n\treadClipboardText(type?: \"selection\" | \"clipboard\"): Promise<string>;\n\twriteClipboardText(\n\t\ttext: string,\n\t\ttype?: \"selection\" | \"clipboard\",\n\t): Promise<void>;\n\treadClipboardFindText(): Promise<string>;\n\twriteClipboardFindText(text: string): Promise<void>;\n\twriteClipboardBuffer(\n\t\tformat: string,\n\t\tbuffer: VSBuffer,\n\t\ttype?: \"selection\" | \"clipboard\",\n\t): Promise<void>;\n\treadClipboardBuffer(format: string): Promise<VSBuffer>;\n\thasClipboard(\n\t\tformat: string,\n\t\ttype?: \"selection\" | \"clipboard\",\n\t): Promise<boolean>;\n\n\t// macOS Touchbar\n\tnewWindowTab(): Promise<void>;\n\tshowPreviousWindowTab(): Promise<void>;\n\tshowNextWindowTab(): Promise<void>;\n\tmoveWindowTabToNewWindow(): Promise<void>;\n\tmergeAllWindowTabs(): Promise<void>;\n\ttoggleWindowTabsBar(): Promise<void>;\n\tupdateTouchBar(items: ISerializableCommandAction[][]): Promise<void>;\n\n\t// macOS Shell command\n\tinstallShellCommand(): Promise<void>;\n\tuninstallShellCommand(): Promise<void>;\n\n\t// Lifecycle\n\tnotifyReady(): Promise<void>;\n\trelaunch(options?: {\n\t\taddArgs?: string[];\n\t\tremoveArgs?: string[];\n\t}): Promise<void>;\n\treload(options?: { disableExtensions?: boolean }): Promise<void>;\n\tcloseWindow(options?: INativeHostOptions): Promise<void>;\n\tquit(): Promise<void>;\n\texit(code: number): Promise<void>;\n\n\t// Development\n\topenDevTools(options?: INativeHostOptions): Promise<void>;\n\ttoggleDevTools(options?: INativeHostOptions): Promise<void>;\n\n\t// Perf Introspection\n\tprofileRenderer(session: string, duration: number): Promise<IV8Profile>;\n\n\t// Connectivity\n\tresolveProxy(url: string): Promise<string | undefined>;\n\tlookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;\n\tlookupKerberosAuthorization(url: string): Promise<string | undefined>;\n\tloadCertificates(): Promise<string[]>;\n\tfindFreePort(\n\t\tstartPort: number,\n\t\tgiveUpAfter: number,\n\t\ttimeout: number,\n\t\tstride?: number,\n\t): Promise<number>;\n\n\t// Registry (windows only)\n\twindowsGetStringRegKey(\n\t\thive:\n\t\t\t| \"HKEY_CURRENT_USER\"\n\t\t\t| \"HKEY_LOCAL_MACHINE\"\n\t\t\t| \"HKEY_CLASSES_ROOT\"\n\t\t\t| \"HKEY_USERS\"\n\t\t\t| \"HKEY_CURRENT_CONFIG\",\n\t\tpath: string,\n\t\tname: string,\n\t): Promise<string | undefined>;\n}\n\nexport const INativeHostService =\n\tcreateDecorator<INativeHostService>(\"nativeHostService\");\n\n/**\n * A set of methods specific to a native host, i.e. unsupported in web\n * environments.\n *\n * @see {@link IHostService} for methods that can be used in native and web\n * hosts.\n */\nexport interface INativeHostService extends ICommonNativeHostService {}\n"],
  "mappings": "AAkBA,SAAS,uBAAuB;AA+QzB,MAAM,qBACZ,gBAAoC,mBAAmB;",
  "names": []
}
