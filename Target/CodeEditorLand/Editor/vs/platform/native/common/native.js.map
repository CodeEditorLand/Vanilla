{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/native/common/native.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Event } from '../../../base/common/event.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { MessageBoxOptions, MessageBoxReturnValue, OpenDialogOptions, OpenDialogReturnValue, SaveDialogOptions, SaveDialogReturnValue } from '../../../base/parts/sandbox/common/electronTypes.js';\nimport { ISerializableCommandAction } from '../../action/common/action.js';\nimport { INativeOpenDialogOptions } from '../../dialogs/common/dialogs.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IV8Profile } from '../../profiling/common/profiling.js';\nimport { AuthInfo, Credentials } from '../../request/common/request.js';\nimport { IPartsSplash } from '../../theme/common/themeService.js';\nimport { IColorScheme, IOpenedAuxiliaryWindow, IOpenedMainWindow, IOpenEmptyWindowOptions, IOpenWindowOptions, IPoint, IRectangle, IWindowOpenable } from '../../window/common/window.js';\n\nexport interface ICPUProperties {\n\tmodel: string;\n\tspeed: number;\n}\n\nexport interface IOSProperties {\n\ttype: string;\n\trelease: string;\n\tarch: string;\n\tplatform: string;\n\tcpus: ICPUProperties[];\n}\n\nexport interface IOSStatistics {\n\ttotalmem: number;\n\tfreemem: number;\n\tloadavg: number[];\n}\n\nexport interface INativeHostOptions {\n\treadonly targetWindowId?: number;\n}\n\nexport interface ICommonNativeHostService {\n\n\treadonly _serviceBrand: undefined;\n\n\t// Properties\n\treadonly windowId: number;\n\n\t// Events\n\treadonly onDidOpenMainWindow: Event<number>;\n\n\treadonly onDidMaximizeWindow: Event<number>;\n\treadonly onDidUnmaximizeWindow: Event<number>;\n\n\treadonly onDidFocusMainWindow: Event<number>;\n\treadonly onDidBlurMainWindow: Event<number>;\n\n\treadonly onDidChangeWindowFullScreen: Event<{ windowId: number; fullscreen: boolean }>;\n\n\treadonly onDidFocusMainOrAuxiliaryWindow: Event<number>;\n\treadonly onDidBlurMainOrAuxiliaryWindow: Event<number>;\n\n\treadonly onDidChangeDisplay: Event<void>;\n\n\treadonly onDidResumeOS: Event<unknown>;\n\n\treadonly onDidChangeColorScheme: Event<IColorScheme>;\n\n\treadonly onDidChangePassword: Event<{ readonly service: string; readonly account: string }>;\n\n\treadonly onDidTriggerWindowSystemContextMenu: Event<{ readonly windowId: number; readonly x: number; readonly y: number }>;\n\n\t// Window\n\tgetWindows(options: { includeAuxiliaryWindows: true }): Promise<Array<IOpenedMainWindow | IOpenedAuxiliaryWindow>>;\n\tgetWindows(options: { includeAuxiliaryWindows: false }): Promise<Array<IOpenedMainWindow>>;\n\tgetWindowCount(): Promise<number>;\n\tgetActiveWindowId(): Promise<number | undefined>;\n\tgetActiveWindowPosition(): Promise<IRectangle | undefined>;\n\n\topenWindow(options?: IOpenEmptyWindowOptions): Promise<void>;\n\topenWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;\n\n\tisFullScreen(options?: INativeHostOptions): Promise<boolean>;\n\ttoggleFullScreen(options?: INativeHostOptions): Promise<void>;\n\n\thandleTitleDoubleClick(options?: INativeHostOptions): Promise<void>;\n\n\tgetCursorScreenPoint(): Promise<{ readonly point: IPoint; readonly display: IRectangle }>;\n\n\tisMaximized(options?: INativeHostOptions): Promise<boolean>;\n\tmaximizeWindow(options?: INativeHostOptions): Promise<void>;\n\tunmaximizeWindow(options?: INativeHostOptions): Promise<void>;\n\tminimizeWindow(options?: INativeHostOptions): Promise<void>;\n\tmoveWindowTop(options?: INativeHostOptions): Promise<void>;\n\tpositionWindow(position: IRectangle, options?: INativeHostOptions): Promise<void>;\n\n\t/**\n\t * Only supported on Windows and macOS. Updates the window controls to match the title bar size.\n\t *\n\t * @param options `backgroundColor` and `foregroundColor` are only supported on Windows\n\t */\n\tupdateWindowControls(options: INativeHostOptions & { height?: number; backgroundColor?: string; foregroundColor?: string }): Promise<void>;\n\n\tsetMinimumSize(width: number | undefined, height: number | undefined): Promise<void>;\n\n\tsaveWindowSplash(splash: IPartsSplash): Promise<void>;\n\n\t/**\n\t * Make the window focused.\n\t *\n\t * @param options Pass `force: true` if you want to make the window take\n\t * focus even if the application does not have focus currently. This option\n\t * should only be used if it is necessary to steal focus from the current\n\t * focused application which may not be VSCode.\n\t */\n\tfocusWindow(options?: INativeHostOptions & { force?: boolean }): Promise<void>;\n\n\t// Dialogs\n\tshowMessageBox(options: MessageBoxOptions & INativeHostOptions): Promise<MessageBoxReturnValue>;\n\tshowSaveDialog(options: SaveDialogOptions & INativeHostOptions): Promise<SaveDialogReturnValue>;\n\tshowOpenDialog(options: OpenDialogOptions & INativeHostOptions): Promise<OpenDialogReturnValue>;\n\n\tpickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\n\t// OS\n\tshowItemInFolder(path: string): Promise<void>;\n\tsetRepresentedFilename(path: string, options?: INativeHostOptions): Promise<void>;\n\tsetDocumentEdited(edited: boolean, options?: INativeHostOptions): Promise<void>;\n\topenExternal(url: string, defaultApplication?: string): Promise<boolean>;\n\tmoveItemToTrash(fullPath: string): Promise<void>;\n\n\tisAdmin(): Promise<boolean>;\n\twriteElevated(source: URI, target: URI, options?: { unlock?: boolean }): Promise<void>;\n\tisRunningUnderARM64Translation(): Promise<boolean>;\n\n\tgetOSProperties(): Promise<IOSProperties>;\n\tgetOSStatistics(): Promise<IOSStatistics>;\n\tgetOSVirtualMachineHint(): Promise<number>;\n\n\tgetOSColorScheme(): Promise<IColorScheme>;\n\n\thasWSLFeatureInstalled(): Promise<boolean>;\n\n\t// Process\n\tgetProcessId(): Promise<number | undefined>;\n\tkillProcess(pid: number, code: string): Promise<void>;\n\n\t// Clipboard\n\treadClipboardText(type?: 'selection' | 'clipboard'): Promise<string>;\n\twriteClipboardText(text: string, type?: 'selection' | 'clipboard'): Promise<void>;\n\treadClipboardFindText(): Promise<string>;\n\twriteClipboardFindText(text: string): Promise<void>;\n\twriteClipboardBuffer(format: string, buffer: VSBuffer, type?: 'selection' | 'clipboard'): Promise<void>;\n\treadClipboardBuffer(format: string): Promise<VSBuffer>;\n\thasClipboard(format: string, type?: 'selection' | 'clipboard'): Promise<boolean>;\n\n\t// macOS Touchbar\n\tnewWindowTab(): Promise<void>;\n\tshowPreviousWindowTab(): Promise<void>;\n\tshowNextWindowTab(): Promise<void>;\n\tmoveWindowTabToNewWindow(): Promise<void>;\n\tmergeAllWindowTabs(): Promise<void>;\n\ttoggleWindowTabsBar(): Promise<void>;\n\tupdateTouchBar(items: ISerializableCommandAction[][]): Promise<void>;\n\n\t// macOS Shell command\n\tinstallShellCommand(): Promise<void>;\n\tuninstallShellCommand(): Promise<void>;\n\n\t// Lifecycle\n\tnotifyReady(): Promise<void>;\n\trelaunch(options?: { addArgs?: string[]; removeArgs?: string[] }): Promise<void>;\n\treload(options?: { disableExtensions?: boolean }): Promise<void>;\n\tcloseWindow(options?: INativeHostOptions): Promise<void>;\n\tquit(): Promise<void>;\n\texit(code: number): Promise<void>;\n\n\t// Development\n\topenDevTools(options?: INativeHostOptions): Promise<void>;\n\ttoggleDevTools(options?: INativeHostOptions): Promise<void>;\n\n\t// Perf Introspection\n\tprofileRenderer(session: string, duration: number): Promise<IV8Profile>;\n\n\t// Connectivity\n\tresolveProxy(url: string): Promise<string | undefined>;\n\tlookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;\n\tlookupKerberosAuthorization(url: string): Promise<string | undefined>;\n\tloadCertificates(): Promise<string[]>;\n\tfindFreePort(startPort: number, giveUpAfter: number, timeout: number, stride?: number): Promise<number>;\n\n\t// Registry (windows only)\n\twindowsGetStringRegKey(hive: 'HKEY_CURRENT_USER' | 'HKEY_LOCAL_MACHINE' | 'HKEY_CLASSES_ROOT' | 'HKEY_USERS' | 'HKEY_CURRENT_CONFIG', path: string, name: string): Promise<string | undefined>;\n}\n\nexport const INativeHostService = createDecorator<INativeHostService>('nativeHostService');\n\n/**\n * A set of methods specific to a native host, i.e. unsupported in web\n * environments.\n *\n * @see {@link IHostService} for methods that can be used in native and web\n * hosts.\n */\nexport interface INativeHostService extends ICommonNativeHostService { }\n"],
  "mappings": "AAKA,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,WAAW;AACpB,SAAS,mBAAmB,uBAAuB,mBAAmB,uBAAuB,mBAAmB,6BAA6B;AAC7I,SAAS,kCAAkC;AAC3C,SAAS,gCAAgC;AACzC,SAAS,uBAAuB;AAChC,SAAS,kBAAkB;AAC3B,SAAS,UAAU,mBAAmB;AACtC,SAAS,oBAAoB;AAC7B,SAAS,cAAc,wBAAwB,mBAAmB,yBAAyB,oBAAoB,QAAQ,YAAY,uBAAuB;AAsLnJ,MAAM,qBAAqB,gBAAoC,mBAAmB;",
  "names": []
}
