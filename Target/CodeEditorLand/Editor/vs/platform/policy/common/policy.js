import"../../../base/common/collections.js";import{Emitter as l,Event as a}from"../../../base/common/event.js";import{Iterable as o}from"../../../base/common/iterator.js";import{Disposable as y}from"../../../base/common/lifecycle.js";import{createDecorator as s}from"../../instantiation/common/instantiation.js";const m=s("policy");class g extends y{_serviceBrand;policyDefinitions={};policies=new Map;_onDidChange=this._register(new l);onDidChange=this._onDidChange.event;async updatePolicyDefinitions(i){const e=Object.keys(this.policyDefinitions).length;return this.policyDefinitions={...i,...this.policyDefinitions},e!==Object.keys(this.policyDefinitions).length&&await this._updatePolicyDefinitions(i),o.reduce(this.policies.entries(),(n,[r,c])=>({...n,[r]:c}),{})}getPolicyValue(i){return this.policies.get(i)}serialize(){return o.reduce(Object.entries(this.policyDefinitions),(i,[e,n])=>({...i,[e]:{definition:n,value:this.policies.get(e)}}),{})}}class h{_serviceBrand;onDidChange=a.None;async updatePolicyDefinitions(){return{}}getPolicyValue(){}serialize(){}}export{g as AbstractPolicyService,m as IPolicyService,h as NullPolicyService};
