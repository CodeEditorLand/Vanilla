var p=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var l=(s,t,i,e)=>{for(var r=e>1?void 0:e?f(t,i):t,o=s.length-1,a;o>=0;o--)(a=s[o])&&(r=(e?a(t,i,r):a(r))||r);return e&&r&&p(t,i,r),r},c=(s,t)=>(i,e)=>t(i,e,s);import{ThrottledDelayer as h}from"../../../../vs/base/common/async.js";import{Event as y}from"../../../../vs/base/common/event.js";import{Iterable as m}from"../../../../vs/base/common/iterator.js";import{isObject as d}from"../../../../vs/base/common/types.js";import"../../../../vs/base/common/uri.js";import{FileOperationResult as g,IFileService as v}from"../../../../vs/platform/files/common/files.js";import{ILogService as u}from"../../../../vs/platform/log/common/log.js";import{AbstractPolicyService as P}from"../../../../vs/platform/policy/common/policy.js";function S(s,t){const i=[];for(const e of new Set(m.concat(s.keys(),t.keys())))s.get(e)!==t.get(e)&&i.push(e);return i}let n=class extends P{constructor(i,e,r){super();this.file=i;this.fileService=e;this.logService=r;const o=y.filter(e.onDidFilesChange,a=>a.affects(i));this._register(e.watch(i)),this._register(o(()=>this.throttledDelayer.trigger(()=>this.refresh())))}throttledDelayer=this._register(new h(500));async _updatePolicyDefinitions(){await this.refresh()}async read(){const i=new Map;try{const e=await this.fileService.readFile(this.file),r=JSON.parse(e.value.toString());if(!d(r))throw new Error("Policy file isn't a JSON object");for(const o of Object.keys(r))this.policyDefinitions[o]&&i.set(o,r[o])}catch(e){e.fileOperationResult!==g.FILE_NOT_FOUND&&this.logService.error("[FilePolicyService] Failed to read policies",e)}return i}async refresh(){const i=await this.read(),e=S(this.policies,i);this.policies=i,e.length>0&&this._onDidChange.fire(e)}};n=l([c(1,v),c(2,u)],n);export{n as FilePolicyService};
