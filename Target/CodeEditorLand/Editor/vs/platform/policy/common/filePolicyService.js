var p=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var l=(s,r,i,e)=>{for(var t=e>1?void 0:e?f(r,i):r,o=s.length-1,a;o>=0;o--)(a=s[o])&&(t=(e?a(r,i,t):a(t))||t);return e&&t&&p(r,i,t),t},c=(s,r)=>(i,e)=>r(i,e,s);import{ThrottledDelayer as y}from"../../../base/common/async.js";import{Event as h}from"../../../base/common/event.js";import{Iterable as m}from"../../../base/common/iterator.js";import{isObject as d}from"../../../base/common/types.js";import{FileOperationResult as g,IFileService as v}from"../../files/common/files.js";import{ILogService as u}from"../../log/common/log.js";import{AbstractPolicyService as P}from"./policy.js";function S(s,r){const i=[];for(const e of new Set(m.concat(s.keys(),r.keys())))s.get(e)!==r.get(e)&&i.push(e);return i}let n=class extends P{constructor(i,e,t){super();this.file=i;this.fileService=e;this.logService=t;const o=h.filter(e.onDidFilesChange,a=>a.affects(i));this._register(e.watch(i)),this._register(o(()=>this.throttledDelayer.trigger(()=>this.refresh())))}throttledDelayer=this._register(new y(500));async _updatePolicyDefinitions(){await this.refresh()}async read(){const i=new Map;try{const e=await this.fileService.readFile(this.file),t=JSON.parse(e.value.toString());if(!d(t))throw new Error("Policy file isn't a JSON object");for(const o of Object.keys(t))this.policyDefinitions[o]&&i.set(o,t[o])}catch(e){e.fileOperationResult!==g.FILE_NOT_FOUND&&this.logService.error("[FilePolicyService] Failed to read policies",e)}return i}async refresh(){const i=await this.read(),e=S(this.policies,i);this.policies=i,e.length>0&&this._onDidChange.fire(e)}};n=l([c(1,v),c(2,u)],n);export{n as FilePolicyService};
