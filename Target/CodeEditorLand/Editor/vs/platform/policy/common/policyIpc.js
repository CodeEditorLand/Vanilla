import{Event as r}from"../../../base/common/event.js";import{DisposableStore as l}from"../../../base/common/lifecycle.js";import{AbstractPolicyService as a}from"./policy.js";class f{constructor(s){this.service=s}disposables=new l;listen(s,e){switch(e){case"onDidChange":return r.map(this.service.onDidChange,o=>o.reduce((i,n)=>({...i,[n]:this.service.getPolicyValue(n)??null}),{}),this.disposables)}throw new Error(`Event not found: ${e}`)}call(s,e,o){switch(e){case"updatePolicyDefinitions":return this.service.updatePolicyDefinitions(o)}throw new Error(`Call not found: ${e}`)}dispose(){this.disposables.dispose()}}class d extends a{constructor(e,o){super();this.channel=o;for(const i in e){const{definition:n,value:t}=e[i];this.policyDefinitions[i]=n,t!==void 0&&this.policies.set(i,t)}this.channel.listen("onDidChange")(i=>{for(const n in i){const t=i[n];t===null?this.policies.delete(n):this.policies.set(n,t)}this._onDidChange.fire(Object.keys(i))})}async _updatePolicyDefinitions(e){const o=await this.channel.call("updatePolicyDefinitions",e);for(const i in o)this.policies.set(i,o[i])}}export{f as PolicyChannel,d as PolicyChannelClient};
