{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/policy/node/nativePolicyService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AbstractPolicyService, IPolicyService, PolicyDefinition } from '../common/policy.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Throttler } from '../../../base/common/async.js';\nimport type { PolicyUpdate, Watcher } from '@vscode/policy-watcher';\nimport { MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { ILogService } from '../../log/common/log.js';\n\nexport class NativePolicyService extends AbstractPolicyService implements IPolicyService {\n\n\tprivate throttler = new Throttler();\n\tprivate readonly watcher = this._register(new MutableDisposable<Watcher>());\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\tprivate readonly productName: string\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void> {\n\t\tthis.logService.trace(`NativePolicyService#_updatePolicyDefinitions - Found ${Object.keys(policyDefinitions).length} policy definitions`);\n\n\t\tconst { createWatcher } = await import('@vscode/policy-watcher');\n\n\t\tawait this.throttler.queue(() => new Promise<void>((c, e) => {\n\t\t\ttry {\n\t\t\t\tthis.watcher.value = createWatcher(this.productName, policyDefinitions, update => {\n\t\t\t\t\tthis._onDidPolicyChange(update);\n\t\t\t\t\tc();\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tthis.logService.error(`NativePolicyService#_updatePolicyDefinitions - Error creating watcher:`, err);\n\t\t\t\te(err);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _onDidPolicyChange(update: PolicyUpdate<IStringDictionary<PolicyDefinition>>): void {\n\t\tthis.logService.trace(`NativePolicyService#_onDidPolicyChange - Updated policy values: ${JSON.stringify(update)}`);\n\n\t\tfor (const key in update) {\n\t\t\tconst value = update[key] as any;\n\n\t\t\tif (value === undefined) {\n\t\t\t\tthis.policies.delete(key);\n\t\t\t} else {\n\t\t\t\tthis.policies.set(key, value);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChange.fire(Object.keys(update));\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB,gBAAgB,wBAAwB;AACxE,SAAS,yBAAyB;AAClC,SAAS,iBAAiB;AAE1B,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAErB,IAAM,sBAAN,cAAkC,sBAAgD;AAAA,EAKxF,YAC+B,YACb,aAChB;AACD,UAAM;AAHwB;AACb;AAAA,EAGlB;AAAA,EAtBD,OAYyF;AAAA;AAAA;AAAA,EAEhF,YAAY,IAAI,UAAU;AAAA,EACjB,UAAU,KAAK,UAAU,IAAI,kBAA2B,CAAC;AAAA,EAS1E,MAAgB,yBAAyB,mBAAuE;AAC/G,SAAK,WAAW,MAAM,wDAAwD,OAAO,KAAK,iBAAiB,EAAE,MAAM,qBAAqB;AAExI,UAAM,EAAE,cAAc,IAAI,MAAM,OAAO,wBAAwB;AAE/D,UAAM,KAAK,UAAU,MAAM,MAAM,IAAI,QAAc,CAAC,GAAG,MAAM;AAC5D,UAAI;AACH,aAAK,QAAQ,QAAQ,cAAc,KAAK,aAAa,mBAAmB,YAAU;AACjF,eAAK,mBAAmB,MAAM;AAC9B,YAAE;AAAA,QACH,CAAC;AAAA,MACF,SAAS,KAAK;AACb,aAAK,WAAW,MAAM,0EAA0E,GAAG;AACnG,UAAE,GAAG;AAAA,MACN;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAEQ,mBAAmB,QAAiE;AAC3F,SAAK,WAAW,MAAM,mEAAmE,KAAK,UAAU,MAAM,CAAC,EAAE;AAEjH,eAAW,OAAO,QAAQ;AACzB,YAAM,QAAQ,OAAO,GAAG;AAExB,UAAI,UAAU,QAAW;AACxB,aAAK,SAAS,OAAO,GAAG;AAAA,MACzB,OAAO;AACN,aAAK,SAAS,IAAI,KAAK,KAAK;AAAA,MAC7B;AAAA,IACD;AAEA,SAAK,aAAa,KAAK,OAAO,KAAK,MAAM,CAAC;AAAA,EAC3C;AACD;AA7Ca,sBAAN;AAAA,EAMJ;AAAA,GANU;",
  "names": []
}
