{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/policy/node/nativePolicyService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { PolicyUpdate, Watcher } from \"@vscode/policy-watcher\";\nimport { Throttler } from \"../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { MutableDisposable } from \"../../../base/common/lifecycle.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport {\n\tAbstractPolicyService,\n\ttype IPolicyService,\n\ttype PolicyDefinition,\n} from \"../common/policy.js\";\n\nexport class NativePolicyService\n\textends AbstractPolicyService\n\timplements IPolicyService\n{\n\tprivate throttler = new Throttler();\n\tprivate readonly watcher = this._register(new MutableDisposable<Watcher>());\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\tprivate readonly productName: string\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async _updatePolicyDefinitions(\n\t\tpolicyDefinitions: IStringDictionary<PolicyDefinition>,\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t`NativePolicyService#_updatePolicyDefinitions - Found ${Object.keys(policyDefinitions).length} policy definitions`,\n\t\t);\n\n\t\tconst { createWatcher } = await import(\"@vscode/policy-watcher\");\n\n\t\tawait this.throttler.queue(\n\t\t\t() =>\n\t\t\t\tnew Promise<void>((c, e) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.watcher.value = createWatcher(\n\t\t\t\t\t\t\tthis.productName,\n\t\t\t\t\t\t\tpolicyDefinitions,\n\t\t\t\t\t\t\t(update) => {\n\t\t\t\t\t\t\t\tthis._onDidPolicyChange(update);\n\t\t\t\t\t\t\t\tc();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`NativePolicyService#_updatePolicyDefinitions - Error creating watcher:`,\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t);\n\t\t\t\t\t\te(err);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _onDidPolicyChange(\n\t\tupdate: PolicyUpdate<IStringDictionary<PolicyDefinition>>,\n\t): void {\n\t\tthis.logService.trace(\n\t\t\t`NativePolicyService#_onDidPolicyChange - Updated policy values: ${JSON.stringify(update)}`,\n\t\t);\n\n\t\tfor (const key in update) {\n\t\t\tconst value = update[key] as any;\n\n\t\t\tif (value === undefined) {\n\t\t\t\tthis.policies.delete(key);\n\t\t\t} else {\n\t\t\t\tthis.policies.set(key, value);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChange.fire(Object.keys(update));\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,iBAAiB;AAE1B,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B;AAAA,EACC;AAAA,OAGM;AAEA,IAAM,sBAAN,cACE,sBAET;AAAA,EAIC,YAC+B,YACb,aAChB;AACD,UAAM;AAHwB;AACb;AAAA,EAGlB;AAAA,EA5BD,OAmBA;AAAA;AAAA;AAAA,EACS,YAAY,IAAI,UAAU;AAAA,EACjB,UAAU,KAAK,UAAU,IAAI,kBAA2B,CAAC;AAAA,EAS1E,MAAgB,yBACf,mBACgB;AAChB,SAAK,WAAW;AAAA,MACf,wDAAwD,OAAO,KAAK,iBAAiB,EAAE,MAAM;AAAA,IAC9F;AAEA,UAAM,EAAE,cAAc,IAAI,MAAM,OAAO,wBAAwB;AAE/D,UAAM,KAAK,UAAU;AAAA,MACpB,MACC,IAAI,QAAc,CAAC,GAAG,MAAM;AAC3B,YAAI;AACH,eAAK,QAAQ,QAAQ;AAAA,YACpB,KAAK;AAAA,YACL;AAAA,YACA,CAAC,WAAW;AACX,mBAAK,mBAAmB,MAAM;AAC9B,gBAAE;AAAA,YACH;AAAA,UACD;AAAA,QACD,SAAS,KAAK;AACb,eAAK,WAAW;AAAA,YACf;AAAA,YACA;AAAA,UACD;AACA,YAAE,GAAG;AAAA,QACN;AAAA,MACD,CAAC;AAAA,IACH;AAAA,EACD;AAAA,EAEQ,mBACP,QACO;AACP,SAAK,WAAW;AAAA,MACf,mEAAmE,KAAK,UAAU,MAAM,CAAC;AAAA,IAC1F;AAEA,eAAW,OAAO,QAAQ;AACzB,YAAM,QAAQ,OAAO,GAAG;AAExB,UAAI,UAAU,QAAW;AACxB,aAAK,SAAS,OAAO,GAAG;AAAA,MACzB,OAAO;AACN,aAAK,SAAS,IAAI,KAAK,KAAK;AAAA,MAC7B;AAAA,IACD;AAEA,SAAK,aAAa,KAAK,OAAO,KAAK,MAAM,CAAC;AAAA,EAC3C;AACD;AAjEa,sBAAN;AAAA,EAQJ;AAAA,GARU;",
  "names": []
}
