var y=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var s=(c,r,e,i)=>{for(var t=i>1?void 0:i?p(r,e):r,n=c.length-1,o;n>=0;n--)(o=c[n])&&(t=(i?o(r,e,t):o(t))||t);return i&&t&&y(r,e,t),t},l=(c,r)=>(e,i)=>r(e,i,c);import{Throttler as h}from"../../../base/common/async.js";import{MutableDisposable as d}from"../../../base/common/lifecycle.js";import{ILogService as m}from"../../log/common/log.js";import{AbstractPolicyService as v}from"../common/policy.js";let a=class extends v{constructor(e,i){super();this.logService=e;this.productName=i}throttler=new h;watcher=this._register(new d);async _updatePolicyDefinitions(e){this.logService.trace(`NativePolicyService#_updatePolicyDefinitions - Found ${Object.keys(e).length} policy definitions`);const{createWatcher:i}=await import("@vscode/policy-watcher");await this.throttler.queue(()=>new Promise((t,n)=>{try{this.watcher.value=i(this.productName,e,o=>{this._onDidPolicyChange(o),t()})}catch(o){this.logService.error("NativePolicyService#_updatePolicyDefinitions - Error creating watcher:",o),n(o)}}))}_onDidPolicyChange(e){this.logService.trace(`NativePolicyService#_onDidPolicyChange - Updated policy values: ${JSON.stringify(e)}`);for(const i in e){const t=e[i];t===void 0?this.policies.delete(i):this.policies.set(i,t)}this._onDidChange.fire(Object.keys(e))}};a=s([l(0,m)],a);export{a as NativePolicyService};
