{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/externalTerminal/test/electron-main/externalTerminalService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual } from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { DEFAULT_TERMINAL_OSX, IExternalTerminalConfiguration } from '../../common/externalTerminal.js';\nimport { LinuxExternalTerminalService, MacExternalTerminalService, WindowsExternalTerminalService } from '../../node/externalTerminalService.js';\n\nconst mockConfig = Object.freeze<IExternalTerminalConfiguration>({\n\tterminal: {\n\t\texplorerKind: 'external',\n\t\texternal: {\n\t\t\twindowsExec: 'testWindowsShell',\n\t\t\tosxExec: 'testOSXShell',\n\t\t\tlinuxExec: 'testLinuxShell'\n\t\t}\n\t}\n});\n\nsuite('ExternalTerminalService', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest(`WinTerminalService - uses terminal from configuration`, done => {\n\t\tconst testShell = 'cmd';\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(command, testShell, 'shell should equal expected');\n\t\t\t\tstrictEqual(args[args.length - 1], mockConfig.terminal.external.windowsExec);\n\t\t\t\tstrictEqual(opts.cwd, testCwd);\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - uses default terminal when configuration.terminal.external.windowsExec is undefined`, done => {\n\t\tconst testShell = 'cmd';\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(args[args.length - 1], WindowsExternalTerminalService.getDefaultTerminalWindows());\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tmockConfig.terminal.external.windowsExec = undefined;\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - cwd is correct regardless of case`, done => {\n\t\tconst testShell = 'cmd';\n\t\tconst testCwd = 'c:/foo';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(opts.cwd, 'C:/foo', 'cwd should be uppercase regardless of the case that\\'s passed in');\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - cmder should be spawned differently`, done => {\n\t\tconst testShell = 'cmd';\n\t\tconst testCwd = 'c:/foo';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tdeepStrictEqual(args, ['C:/foo']);\n\t\t\t\tstrictEqual(opts, undefined);\n\t\t\t\tdone();\n\t\t\t\treturn { on: (evt: any) => evt };\n\t\t\t}\n\t\t};\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\t{ windowsExec: 'cmder' },\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - windows terminal should open workspace directory`, done => {\n\t\tconst testShell = 'wt';\n\t\tconst testCwd = 'c:/foo';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(opts.cwd, 'C:/foo');\n\t\t\t\tdone();\n\t\t\t\treturn { on: (evt: any) => evt };\n\t\t\t}\n\t\t};\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`MacTerminalService - uses terminal from configuration`, done => {\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(args[1], mockConfig.terminal.external.osxExec);\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new MacExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`MacTerminalService - uses default terminal when configuration.terminal.external.osxExec is undefined`, done => {\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(args[1], DEFAULT_TERMINAL_OSX);\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new MacExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\t{ osxExec: undefined },\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`LinuxTerminalService - uses terminal from configuration`, done => {\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(command, mockConfig.terminal.external.linuxExec);\n\t\t\t\tstrictEqual(opts.cwd, testCwd);\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new LinuxExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`LinuxTerminalService - uses default terminal when configuration.terminal.external.linuxExec is undefined`, done => {\n\t\tLinuxExternalTerminalService.getDefaultTerminalLinuxReady().then(defaultTerminalLinux => {\n\t\t\tconst testCwd = 'path/to/workspace';\n\t\t\tconst mockSpawner: any = {\n\t\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t\tstrictEqual(command, defaultTerminalLinux);\n\t\t\t\t\tdone();\n\t\t\t\t\treturn {\n\t\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t\tmockConfig.terminal.external.linuxExec = undefined;\n\t\t\tconst testService = new LinuxExternalTerminalService();\n\t\t\ttestService.spawnTerminal(\n\t\t\t\tmockSpawner,\n\t\t\t\tmockConfig.terminal.external,\n\t\t\t\ttestCwd\n\t\t\t);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
