import{deepStrictEqual as u,strictEqual as o}from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as S}from"../../../../base/test/common/utils.js";import{DEFAULT_TERMINAL_OSX as x}from"../../common/externalTerminal.js";import{LinuxExternalTerminalService as d,MacExternalTerminalService as p,WindowsExternalTerminalService as w}from"../../node/externalTerminalService.js";const c=Object.freeze({terminal:{explorerKind:"external",external:{windowsExec:"testWindowsShell",osxExec:"testOSXShell",linuxExec:"testLinuxShell"}}});suite("ExternalTerminalService",()=>{S(),test("WinTerminalService - uses terminal from configuration",t=>{const e="cmd",n="path/to/workspace",r={spawn:(i,s,a)=>(o(i,e,"shell should equal expected"),o(s[s.length-1],c.terminal.external.windowsExec),o(a.cwd,n),t(),{on:l=>l})};new w().spawnTerminal(r,c.terminal.external,e,n)}),test("WinTerminalService - uses default terminal when configuration.terminal.external.windowsExec is undefined",t=>{const e="cmd",n="path/to/workspace",r={spawn:(i,s,a)=>(o(s[s.length-1],w.getDefaultTerminalWindows()),t(),{on:l=>l})};c.terminal.external.windowsExec=void 0,new w().spawnTerminal(r,c.terminal.external,e,n)}),test("WinTerminalService - cwd is correct regardless of case",t=>{const e="cmd",n="c:/foo",r={spawn:(i,s,a)=>(o(a.cwd,"C:/foo","cwd should be uppercase regardless of the case that's passed in"),t(),{on:l=>l})};new w().spawnTerminal(r,c.terminal.external,e,n)}),test("WinTerminalService - cmder should be spawned differently",t=>{const e="cmd",n="c:/foo",r={spawn:(i,s,a)=>(u(s,["C:/foo"]),o(a,void 0),t(),{on:l=>l})};new w().spawnTerminal(r,{windowsExec:"cmder"},e,n)}),test("WinTerminalService - windows terminal should open workspace directory",t=>{const e="wt",n="c:/foo",r={spawn:(i,s,a)=>(o(a.cwd,"C:/foo"),t(),{on:l=>l})};new w().spawnTerminal(r,c.terminal.external,e,n)}),test("MacTerminalService - uses terminal from configuration",t=>{const e="path/to/workspace",n={spawn:(m,i,s)=>(o(i[1],c.terminal.external.osxExec),t(),{on:a=>a})};new p().spawnTerminal(n,c.terminal.external,e)}),test("MacTerminalService - uses default terminal when configuration.terminal.external.osxExec is undefined",t=>{const e="path/to/workspace",n={spawn:(m,i,s)=>(o(i[1],x),t(),{on:a=>a})};new p().spawnTerminal(n,{osxExec:void 0},e)}),test("LinuxTerminalService - uses terminal from configuration",t=>{const e="path/to/workspace",n={spawn:(m,i,s)=>(o(m,c.terminal.external.linuxExec),o(s.cwd,e),t(),{on:a=>a})};new d().spawnTerminal(n,c.terminal.external,e)}),test("LinuxTerminalService - uses default terminal when configuration.terminal.external.linuxExec is undefined",t=>{d.getDefaultTerminalLinuxReady().then(e=>{const n="path/to/workspace",r={spawn:(i,s,a)=>(o(i,e),t(),{on:l=>l})};c.terminal.external.linuxExec=void 0,new d().spawnTerminal(r,c.terminal.external,n)})})});
