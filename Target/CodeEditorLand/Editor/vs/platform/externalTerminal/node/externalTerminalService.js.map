{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/externalTerminal/node/externalTerminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from \"child_process\";\nimport { memoize } from \"../../../base/common/decorators.js\";\nimport { FileAccess } from \"../../../base/common/network.js\";\nimport * as path from \"../../../base/common/path.js\";\nimport * as env from \"../../../base/common/platform.js\";\nimport { sanitizeProcessEnvironment } from \"../../../base/common/processes.js\";\nimport * as pfs from \"../../../base/node/pfs.js\";\nimport * as processes from \"../../../base/node/processes.js\";\nimport * as nls from \"../../../nls.js\";\nimport type { ITerminalEnvironment } from \"../../terminal/common/terminal.js\";\nimport {\n\tDEFAULT_TERMINAL_OSX,\n\ttype IExternalTerminalService,\n\ttype IExternalTerminalSettings,\n\ttype ITerminalForPlatform,\n} from \"../common/externalTerminal.js\";\n\nconst TERMINAL_TITLE = nls.localize(\"console.title\", \"VS Code Console\");\n\nabstract class ExternalTerminalService {\n\tpublic _serviceBrand: undefined;\n\n\tasync getDefaultTerminalForPlatforms(): Promise<ITerminalForPlatform> {\n\t\treturn {\n\t\t\twindows: WindowsExternalTerminalService.getDefaultTerminalWindows(),\n\t\t\tlinux:\n\t\t\t\tawait LinuxExternalTerminalService.getDefaultTerminalLinuxReady(),\n\t\t\tosx: \"xterm\",\n\t\t};\n\t}\n}\n\nexport class WindowsExternalTerminalService\n\textends ExternalTerminalService\n\timplements IExternalTerminalService\n{\n\tprivate static readonly CMD = \"cmd.exe\";\n\tprivate static _DEFAULT_TERMINAL_WINDOWS: string;\n\n\tpublic openTerminal(\n\t\tconfiguration: IExternalTerminalSettings,\n\t\tcwd?: string,\n\t): Promise<void> {\n\t\treturn this.spawnTerminal(\n\t\t\tcp,\n\t\t\tconfiguration,\n\t\t\tprocesses.getWindowsShell(),\n\t\t\tcwd,\n\t\t);\n\t}\n\n\tpublic spawnTerminal(\n\t\tspawner: typeof cp,\n\t\tconfiguration: IExternalTerminalSettings,\n\t\tcommand: string,\n\t\tcwd?: string,\n\t): Promise<void> {\n\t\tconst exec =\n\t\t\tconfiguration.windowsExec ||\n\t\t\tWindowsExternalTerminalService.getDefaultTerminalWindows();\n\n\t\t// Make the drive letter uppercase on Windows (see #9448)\n\t\tif (cwd && cwd[1] === \":\") {\n\t\t\tcwd = cwd[0].toUpperCase() + cwd.substr(1);\n\t\t}\n\n\t\t// cmder ignores the environment cwd and instead opts to always open in %USERPROFILE%\n\t\t// unless otherwise specified\n\t\tconst basename = path.basename(exec, \".exe\").toLowerCase();\n\t\tif (basename === \"cmder\") {\n\t\t\tspawner.spawn(exec, cwd ? [cwd] : undefined);\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst cmdArgs = [\"/c\", \"start\", \"/wait\"];\n\t\tif (exec.indexOf(\" \") >= 0) {\n\t\t\t// The \"\" argument is the window title. Without this, exec doesn't work when the path\n\t\t\t// contains spaces. #6590\n\t\t\t// Title is Execution Path. #220129\n\t\t\tcmdArgs.push(exec);\n\t\t}\n\t\tcmdArgs.push(exec);\n\t\t// Add starting directory parameter for Windows Terminal (see #90734)\n\t\tif (basename === \"wt\") {\n\t\t\tcmdArgs.push(\"-d .\");\n\t\t}\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\tconst child = spawner.spawn(command, cmdArgs, {\n\t\t\t\tcwd,\n\t\t\t\tenv,\n\t\t\t\tdetached: true,\n\t\t\t});\n\t\t\tchild.on(\"error\", e);\n\t\t\tchild.on(\"exit\", () => c());\n\t\t});\n\t}\n\n\tpublic async runInTerminal(\n\t\ttitle: string,\n\t\tdir: string,\n\t\targs: string[],\n\t\tenvVars: ITerminalEnvironment,\n\t\tsettings: IExternalTerminalSettings,\n\t): Promise<number | undefined> {\n\t\tconst exec =\n\t\t\t\"windowsExec\" in settings && settings.windowsExec\n\t\t\t\t? settings.windowsExec\n\t\t\t\t: WindowsExternalTerminalService.getDefaultTerminalWindows();\n\t\tconst wt = await WindowsExternalTerminalService.getWtExePath();\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\t\t\tconst title = `\"${dir} - ${TERMINAL_TITLE}\"`;\n\t\t\tconst command = `\"${args.join('\" \"')}\" & pause`; // use '|' to only pause on non-zero exit code\n\n\t\t\t// merge environment variables into a copy of the process.env\n\t\t\tconst env = Object.assign(\n\t\t\t\t{},\n\t\t\t\tgetSanitizedEnvironment(process),\n\t\t\t\tenvVars,\n\t\t\t);\n\n\t\t\t// delete environment variables that have a null value\n\t\t\tObject.keys(env)\n\t\t\t\t.filter((v) => env[v] === null)\n\t\t\t\t.forEach((key) => delete env[key]);\n\n\t\t\tconst options: any = {\n\t\t\t\tcwd: dir,\n\t\t\t\tenv: env,\n\t\t\t\twindowsVerbatimArguments: true,\n\t\t\t};\n\n\t\t\tlet spawnExec: string;\n\t\t\tlet cmdArgs: string[];\n\n\t\t\tif (path.basename(exec, \".exe\") === \"wt\") {\n\t\t\t\t// Handle Windows Terminal specially; -d to set the cwd and run a cmd.exe instance\n\t\t\t\t// inside it\n\t\t\t\tspawnExec = exec;\n\t\t\t\tcmdArgs = [\n\t\t\t\t\t\"-d\",\n\t\t\t\t\t\".\",\n\t\t\t\t\tWindowsExternalTerminalService.CMD,\n\t\t\t\t\t\"/c\",\n\t\t\t\t\tcommand,\n\t\t\t\t];\n\t\t\t} else if (wt) {\n\t\t\t\t// prefer to use the window terminal to spawn if it's available instead\n\t\t\t\t// of start, since that allows ctrl+c handling (#81322)\n\t\t\t\tspawnExec = wt;\n\t\t\t\tcmdArgs = [\"-d\", \".\", exec, \"/c\", command];\n\t\t\t} else {\n\t\t\t\tspawnExec = WindowsExternalTerminalService.CMD;\n\t\t\t\tcmdArgs = [\n\t\t\t\t\t\"/c\",\n\t\t\t\t\t\"start\",\n\t\t\t\t\ttitle,\n\t\t\t\t\t\"/wait\",\n\t\t\t\t\texec,\n\t\t\t\t\t\"/c\",\n\t\t\t\t\t`\"${command}\"`,\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tconst cmd = cp.spawn(spawnExec, cmdArgs, options);\n\n\t\t\tcmd.on(\"error\", (err) => {\n\t\t\t\treject(improveError(err));\n\t\t\t});\n\n\t\t\tresolve(undefined);\n\t\t});\n\t}\n\n\tpublic static getDefaultTerminalWindows(): string {\n\t\tif (!WindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS) {\n\t\t\tconst isWoW64 = !!process.env.hasOwnProperty(\n\t\t\t\t\"PROCESSOR_ARCHITEW6432\",\n\t\t\t);\n\t\t\tWindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS = `${process.env.windir ? process.env.windir : \"C:\\\\Windows\"}\\\\${isWoW64 ? \"Sysnative\" : \"System32\"}\\\\cmd.exe`;\n\t\t}\n\t\treturn WindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS;\n\t}\n\n\t@memoize\n\tprivate static async getWtExePath() {\n\t\ttry {\n\t\t\tconst wtPath = await processes.win32.findExecutable(\"wt\");\n\t\t\treturn (await pfs.Promises.exists(wtPath)) ? wtPath : undefined;\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nexport class MacExternalTerminalService\n\textends ExternalTerminalService\n\timplements IExternalTerminalService\n{\n\tprivate static readonly OSASCRIPT = \"/usr/bin/osascript\"; // osascript is the AppleScript interpreter on OS X\n\n\tpublic openTerminal(\n\t\tconfiguration: IExternalTerminalSettings,\n\t\tcwd?: string,\n\t): Promise<void> {\n\t\treturn this.spawnTerminal(cp, configuration, cwd);\n\t}\n\n\tpublic runInTerminal(\n\t\ttitle: string,\n\t\tdir: string,\n\t\targs: string[],\n\t\tenvVars: ITerminalEnvironment,\n\t\tsettings: IExternalTerminalSettings,\n\t): Promise<number | undefined> {\n\t\tconst terminalApp = settings.osxExec || DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\t\t\tif (\n\t\t\t\tterminalApp === DEFAULT_TERMINAL_OSX ||\n\t\t\t\tterminalApp === \"iTerm.app\"\n\t\t\t) {\n\t\t\t\t// On OS X we launch an AppleScript that creates (or reuses) a Terminal window\n\t\t\t\t// and then launches the program inside that window.\n\n\t\t\t\tconst script =\n\t\t\t\t\tterminalApp === DEFAULT_TERMINAL_OSX\n\t\t\t\t\t\t? \"TerminalHelper\"\n\t\t\t\t\t\t: \"iTermHelper\";\n\t\t\t\tconst scriptpath = FileAccess.asFileUri(\n\t\t\t\t\t`vs/workbench/contrib/externalTerminal/node/${script}.scpt`,\n\t\t\t\t).fsPath;\n\n\t\t\t\tconst osaArgs = [\n\t\t\t\t\tscriptpath,\n\t\t\t\t\t\"-t\",\n\t\t\t\t\ttitle || TERMINAL_TITLE,\n\t\t\t\t\t\"-w\",\n\t\t\t\t\tdir,\n\t\t\t\t];\n\n\t\t\t\tfor (const a of args) {\n\t\t\t\t\tosaArgs.push(\"-a\");\n\t\t\t\t\tosaArgs.push(a);\n\t\t\t\t}\n\n\t\t\t\tif (envVars) {\n\t\t\t\t\t// merge environment variables into a copy of the process.env\n\t\t\t\t\tconst env = Object.assign(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tgetSanitizedEnvironment(process),\n\t\t\t\t\t\tenvVars,\n\t\t\t\t\t);\n\n\t\t\t\t\tfor (const key in env) {\n\t\t\t\t\t\tconst value = env[key];\n\t\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\t\tosaArgs.push(\"-u\");\n\t\t\t\t\t\t\tosaArgs.push(key);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tosaArgs.push(\"-e\");\n\t\t\t\t\t\t\tosaArgs.push(`${key}=${value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet stderr = \"\";\n\t\t\t\tconst osa = cp.spawn(\n\t\t\t\t\tMacExternalTerminalService.OSASCRIPT,\n\t\t\t\t\tosaArgs,\n\t\t\t\t);\n\t\t\t\tosa.on(\"error\", (err) => {\n\t\t\t\t\treject(improveError(err));\n\t\t\t\t});\n\t\t\t\tosa.stderr.on(\"data\", (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tosa.on(\"exit\", (code: number) => {\n\t\t\t\t\tif (code === 0) {\n\t\t\t\t\t\t// OK\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t} else if (stderr) {\n\t\t\t\t\t\tconst lines = stderr.split(\"\\n\", 1);\n\t\t\t\t\t\treject(new Error(lines[0]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"mac.terminal.script.failed\",\n\t\t\t\t\t\t\t\t\t\"Script '{0}' failed with exit code {1}\",\n\t\t\t\t\t\t\t\t\tscript,\n\t\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"mac.terminal.type.not.supported\",\n\t\t\t\t\t\t\t\"'{0}' not supported\",\n\t\t\t\t\t\t\tterminalApp,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tspawnTerminal(\n\t\tspawner: typeof cp,\n\t\tconfiguration: IExternalTerminalSettings,\n\t\tcwd?: string,\n\t): Promise<void> {\n\t\tconst terminalApp = configuration.osxExec || DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst args = [\"-a\", terminalApp];\n\t\t\tif (cwd) {\n\t\t\t\targs.push(cwd);\n\t\t\t}\n\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\tconst child = spawner.spawn(\"/usr/bin/open\", args, { cwd, env });\n\t\t\tchild.on(\"error\", e);\n\t\t\tchild.on(\"exit\", () => c());\n\t\t});\n\t}\n}\n\nexport class LinuxExternalTerminalService\n\textends ExternalTerminalService\n\timplements IExternalTerminalService\n{\n\tprivate static readonly WAIT_MESSAGE = nls.localize(\n\t\t\"press.any.key\",\n\t\t\"Press any key to continue...\",\n\t);\n\n\tpublic openTerminal(\n\t\tconfiguration: IExternalTerminalSettings,\n\t\tcwd?: string,\n\t): Promise<void> {\n\t\treturn this.spawnTerminal(cp, configuration, cwd);\n\t}\n\n\tpublic runInTerminal(\n\t\ttitle: string,\n\t\tdir: string,\n\t\targs: string[],\n\t\tenvVars: ITerminalEnvironment,\n\t\tsettings: IExternalTerminalSettings,\n\t): Promise<number | undefined> {\n\t\tconst execPromise = settings.linuxExec\n\t\t\t? Promise.resolve(settings.linuxExec)\n\t\t\t: LinuxExternalTerminalService.getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\t\t\tconst termArgs: string[] = [];\n\t\t\t//termArgs.push('--title');\n\t\t\t//termArgs.push(`\"${TERMINAL_TITLE}\"`);\n\t\t\texecPromise.then((exec) => {\n\t\t\t\tif (exec.indexOf(\"gnome-terminal\") >= 0) {\n\t\t\t\t\ttermArgs.push(\"-x\");\n\t\t\t\t} else {\n\t\t\t\t\ttermArgs.push(\"-e\");\n\t\t\t\t}\n\t\t\t\ttermArgs.push(\"bash\");\n\t\t\t\ttermArgs.push(\"-c\");\n\n\t\t\t\tconst bashCommand = `${quote(args)}; echo; read -p \"${LinuxExternalTerminalService.WAIT_MESSAGE}\" -n1;`;\n\t\t\t\ttermArgs.push(`''${bashCommand}''`); // wrapping argument in two sets of ' because node is so \"friendly\" that it removes one set...\n\n\t\t\t\t// merge environment variables into a copy of the process.env\n\t\t\t\tconst env = Object.assign(\n\t\t\t\t\t{},\n\t\t\t\t\tgetSanitizedEnvironment(process),\n\t\t\t\t\tenvVars,\n\t\t\t\t);\n\n\t\t\t\t// delete environment variables that have a null value\n\t\t\t\tObject.keys(env)\n\t\t\t\t\t.filter((v) => env[v] === null)\n\t\t\t\t\t.forEach((key) => delete env[key]);\n\n\t\t\t\tconst options: any = {\n\t\t\t\t\tcwd: dir,\n\t\t\t\t\tenv: env,\n\t\t\t\t};\n\n\t\t\t\tlet stderr = \"\";\n\t\t\t\tconst cmd = cp.spawn(exec, termArgs, options);\n\t\t\t\tcmd.on(\"error\", (err) => {\n\t\t\t\t\treject(improveError(err));\n\t\t\t\t});\n\t\t\t\tcmd.stderr.on(\"data\", (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tcmd.on(\"exit\", (code: number) => {\n\t\t\t\t\tif (code === 0) {\n\t\t\t\t\t\t// OK\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t} else if (stderr) {\n\t\t\t\t\t\tconst lines = stderr.split(\"\\n\", 1);\n\t\t\t\t\t\treject(new Error(lines[0]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"linux.term.failed\",\n\t\t\t\t\t\t\t\t\t\"'{0}' failed with exit code {1}\",\n\t\t\t\t\t\t\t\t\texec,\n\t\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static _DEFAULT_TERMINAL_LINUX_READY: Promise<string>;\n\n\tpublic static async getDefaultTerminalLinuxReady(): Promise<string> {\n\t\tif (!LinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY) {\n\t\t\tif (env.isLinux) {\n\t\t\t\tconst isDebian = await pfs.Promises.exists(\n\t\t\t\t\t\"/etc/debian_version\",\n\t\t\t\t);\n\t\t\t\tLinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY =\n\t\t\t\t\tnew Promise<string>((r) => {\n\t\t\t\t\t\tif (isDebian) {\n\t\t\t\t\t\t\tr(\"x-terminal-emulator\");\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tprocess.env.DESKTOP_SESSION === \"gnome\" ||\n\t\t\t\t\t\t\tprocess.env.DESKTOP_SESSION === \"gnome-classic\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tr(\"gnome-terminal\");\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tprocess.env.DESKTOP_SESSION === \"kde-plasma\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tr(\"konsole\");\n\t\t\t\t\t\t} else if (process.env.COLORTERM) {\n\t\t\t\t\t\t\tr(process.env.COLORTERM);\n\t\t\t\t\t\t} else if (process.env.TERM) {\n\t\t\t\t\t\t\tr(process.env.TERM);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr(\"xterm\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tLinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY =\n\t\t\t\t\tPromise.resolve(\"xterm\");\n\t\t\t}\n\t\t}\n\t\treturn LinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY;\n\t}\n\n\tspawnTerminal(\n\t\tspawner: typeof cp,\n\t\tconfiguration: IExternalTerminalSettings,\n\t\tcwd?: string,\n\t): Promise<void> {\n\t\tconst execPromise = configuration.linuxExec\n\t\t\t? Promise.resolve(configuration.linuxExec)\n\t\t\t: LinuxExternalTerminalService.getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\texecPromise.then((exec) => {\n\t\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\t\tconst child = spawner.spawn(exec, [], { cwd, env });\n\t\t\t\tchild.on(\"error\", e);\n\t\t\t\tchild.on(\"exit\", () => c());\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction getSanitizedEnvironment(process: NodeJS.Process) {\n\tconst env = { ...process.env };\n\tsanitizeProcessEnvironment(env);\n\treturn env;\n}\n\n/**\n * tries to turn OS errors into more meaningful error messages\n */\nfunction improveError(err: Error & { errno?: string; path?: string }): Error {\n\tif (\n\t\t\"errno\" in err &&\n\t\terr[\"errno\"] === \"ENOENT\" &&\n\t\t\"path\" in err &&\n\t\ttypeof err[\"path\"] === \"string\"\n\t) {\n\t\treturn new Error(\n\t\t\tnls.localize(\n\t\t\t\t\"ext.term.app.not.found\",\n\t\t\t\t\"can't find terminal application '{0}'\",\n\t\t\t\terr[\"path\"],\n\t\t\t),\n\t\t);\n\t}\n\treturn err;\n}\n\n/**\n * Quote args if necessary and combine into a space separated string.\n */\nfunction quote(args: string[]): string {\n\tlet r = \"\";\n\tfor (const a of args) {\n\t\tif (a.indexOf(\" \") >= 0) {\n\t\t\tr += '\"' + a + '\"';\n\t\t} else {\n\t\t\tr += a;\n\t\t}\n\t\tr += \" \";\n\t}\n\treturn r;\n}\n"],
  "mappings": "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",
  "names": ["env", "title", "process"]
}
