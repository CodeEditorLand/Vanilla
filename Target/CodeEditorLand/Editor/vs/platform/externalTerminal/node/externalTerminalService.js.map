{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/externalTerminal/node/externalTerminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport { memoize } from '../../../base/common/decorators.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport * as path from '../../../base/common/path.js';\nimport * as env from '../../../base/common/platform.js';\nimport { sanitizeProcessEnvironment } from '../../../base/common/processes.js';\nimport * as pfs from '../../../base/node/pfs.js';\nimport * as processes from '../../../base/node/processes.js';\nimport * as nls from '../../../nls.js';\nimport { DEFAULT_TERMINAL_OSX, IExternalTerminalService, IExternalTerminalSettings, ITerminalForPlatform } from '../common/externalTerminal.js';\nimport { ITerminalEnvironment } from '../../terminal/common/terminal.js';\n\nconst TERMINAL_TITLE = nls.localize('console.title', \"VS Code Console\");\n\nabstract class ExternalTerminalService {\n\tpublic _serviceBrand: undefined;\n\n\tasync getDefaultTerminalForPlatforms(): Promise<ITerminalForPlatform> {\n\t\treturn {\n\t\t\twindows: WindowsExternalTerminalService.getDefaultTerminalWindows(),\n\t\t\tlinux: await LinuxExternalTerminalService.getDefaultTerminalLinuxReady(),\n\t\t\tosx: 'xterm'\n\t\t};\n\t}\n}\n\nexport class WindowsExternalTerminalService extends ExternalTerminalService implements IExternalTerminalService {\n\tprivate static readonly CMD = 'cmd.exe';\n\tprivate static _DEFAULT_TERMINAL_WINDOWS: string;\n\n\tpublic openTerminal(configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\treturn this.spawnTerminal(cp, configuration, processes.getWindowsShell(), cwd);\n\t}\n\n\tpublic spawnTerminal(spawner: typeof cp, configuration: IExternalTerminalSettings, command: string, cwd?: string): Promise<void> {\n\t\tconst exec = configuration.windowsExec || WindowsExternalTerminalService.getDefaultTerminalWindows();\n\n\t\t// Make the drive letter uppercase on Windows (see #9448)\n\t\tif (cwd && cwd[1] === ':') {\n\t\t\tcwd = cwd[0].toUpperCase() + cwd.substr(1);\n\t\t}\n\n\t\t// cmder ignores the environment cwd and instead opts to always open in %USERPROFILE%\n\t\t// unless otherwise specified\n\t\tconst basename = path.basename(exec, '.exe').toLowerCase();\n\t\tif (basename === 'cmder') {\n\t\t\tspawner.spawn(exec, cwd ? [cwd] : undefined);\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst cmdArgs = ['/c', 'start', '/wait'];\n\t\tif (exec.indexOf(' ') >= 0) {\n\t\t\t// The \"\" argument is the window title. Without this, exec doesn't work when the path\n\t\t\t// contains spaces. #6590\n\t\t\t// Title is Execution Path. #220129\n\t\t\tcmdArgs.push(exec);\n\t\t}\n\t\tcmdArgs.push(exec);\n\t\t// Add starting directory parameter for Windows Terminal (see #90734)\n\t\tif (basename === 'wt') {\n\t\t\tcmdArgs.push('-d .');\n\t\t}\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\tconst child = spawner.spawn(command, cmdArgs, { cwd, env, detached: true });\n\t\t\tchild.on('error', e);\n\t\t\tchild.on('exit', () => c());\n\t\t});\n\t}\n\n\tpublic async runInTerminal(title: string, dir: string, args: string[], envVars: ITerminalEnvironment, settings: IExternalTerminalSettings): Promise<number | undefined> {\n\t\tconst exec = 'windowsExec' in settings && settings.windowsExec ? settings.windowsExec : WindowsExternalTerminalService.getDefaultTerminalWindows();\n\t\tconst wt = await WindowsExternalTerminalService.getWtExePath();\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\n\t\t\tconst title = `\"${dir} - ${TERMINAL_TITLE}\"`;\n\t\t\tconst command = `\"${args.join('\" \"')}\" & pause`; // use '|' to only pause on non-zero exit code\n\n\t\t\t// merge environment variables into a copy of the process.env\n\t\t\tconst env = Object.assign({}, getSanitizedEnvironment(process), envVars);\n\n\t\t\t// delete environment variables that have a null value\n\t\t\tObject.keys(env).filter(v => env[v] === null).forEach(key => delete env[key]);\n\n\t\t\tconst options: any = {\n\t\t\t\tcwd: dir,\n\t\t\t\tenv: env,\n\t\t\t\twindowsVerbatimArguments: true\n\t\t\t};\n\n\t\t\tlet spawnExec: string;\n\t\t\tlet cmdArgs: string[];\n\n\t\t\tif (path.basename(exec, '.exe') === 'wt') {\n\t\t\t\t// Handle Windows Terminal specially; -d to set the cwd and run a cmd.exe instance\n\t\t\t\t// inside it\n\t\t\t\tspawnExec = exec;\n\t\t\t\tcmdArgs = ['-d', '.', WindowsExternalTerminalService.CMD, '/c', command];\n\t\t\t} else if (wt) {\n\t\t\t\t// prefer to use the window terminal to spawn if it's available instead\n\t\t\t\t// of start, since that allows ctrl+c handling (#81322)\n\t\t\t\tspawnExec = wt;\n\t\t\t\tcmdArgs = ['-d', '.', exec, '/c', command];\n\t\t\t} else {\n\t\t\t\tspawnExec = WindowsExternalTerminalService.CMD;\n\t\t\t\tcmdArgs = ['/c', 'start', title, '/wait', exec, '/c', `\"${command}\"`];\n\t\t\t}\n\n\t\t\tconst cmd = cp.spawn(spawnExec, cmdArgs, options);\n\n\t\t\tcmd.on('error', err => {\n\t\t\t\treject(improveError(err));\n\t\t\t});\n\n\t\t\tresolve(undefined);\n\t\t});\n\t}\n\n\tpublic static getDefaultTerminalWindows(): string {\n\t\tif (!WindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS) {\n\t\t\tconst isWoW64 = !!process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\t\tWindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS = `${process.env.windir ? process.env.windir : 'C:\\\\Windows'}\\\\${isWoW64 ? 'Sysnative' : 'System32'}\\\\cmd.exe`;\n\t\t}\n\t\treturn WindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS;\n\t}\n\n\t@memoize\n\tprivate static async getWtExePath() {\n\t\ttry {\n\t\t\tconst wtPath = await processes.win32.findExecutable('wt');\n\t\t\treturn await pfs.Promises.exists(wtPath) ? wtPath : undefined;\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nexport class MacExternalTerminalService extends ExternalTerminalService implements IExternalTerminalService {\n\tprivate static readonly OSASCRIPT = '/usr/bin/osascript';\t// osascript is the AppleScript interpreter on OS X\n\n\tpublic openTerminal(configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\treturn this.spawnTerminal(cp, configuration, cwd);\n\t}\n\n\tpublic runInTerminal(title: string, dir: string, args: string[], envVars: ITerminalEnvironment, settings: IExternalTerminalSettings): Promise<number | undefined> {\n\n\t\tconst terminalApp = settings.osxExec || DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\n\t\t\tif (terminalApp === DEFAULT_TERMINAL_OSX || terminalApp === 'iTerm.app') {\n\n\t\t\t\t// On OS X we launch an AppleScript that creates (or reuses) a Terminal window\n\t\t\t\t// and then launches the program inside that window.\n\n\t\t\t\tconst script = terminalApp === DEFAULT_TERMINAL_OSX ? 'TerminalHelper' : 'iTermHelper';\n\t\t\t\tconst scriptpath = FileAccess.asFileUri(`vs/workbench/contrib/externalTerminal/node/${script}.scpt`).fsPath;\n\n\t\t\t\tconst osaArgs = [\n\t\t\t\t\tscriptpath,\n\t\t\t\t\t'-t', title || TERMINAL_TITLE,\n\t\t\t\t\t'-w', dir,\n\t\t\t\t];\n\n\t\t\t\tfor (const a of args) {\n\t\t\t\t\tosaArgs.push('-a');\n\t\t\t\t\tosaArgs.push(a);\n\t\t\t\t}\n\n\t\t\t\tif (envVars) {\n\t\t\t\t\t// merge environment variables into a copy of the process.env\n\t\t\t\t\tconst env = Object.assign({}, getSanitizedEnvironment(process), envVars);\n\n\t\t\t\t\tfor (const key in env) {\n\t\t\t\t\t\tconst value = env[key];\n\t\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\t\tosaArgs.push('-u');\n\t\t\t\t\t\t\tosaArgs.push(key);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tosaArgs.push('-e');\n\t\t\t\t\t\t\tosaArgs.push(`${key}=${value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet stderr = '';\n\t\t\t\tconst osa = cp.spawn(MacExternalTerminalService.OSASCRIPT, osaArgs);\n\t\t\t\tosa.on('error', err => {\n\t\t\t\t\treject(improveError(err));\n\t\t\t\t});\n\t\t\t\tosa.stderr.on('data', (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tosa.on('exit', (code: number) => {\n\t\t\t\t\tif (code === 0) {\t// OK\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stderr) {\n\t\t\t\t\t\t\tconst lines = stderr.split('\\n', 1);\n\t\t\t\t\t\t\treject(new Error(lines[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(new Error(nls.localize('mac.terminal.script.failed', \"Script '{0}' failed with exit code {1}\", script, code)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(new Error(nls.localize('mac.terminal.type.not.supported', \"'{0}' not supported\", terminalApp)));\n\t\t\t}\n\t\t});\n\t}\n\n\tspawnTerminal(spawner: typeof cp, configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\tconst terminalApp = configuration.osxExec || DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst args = ['-a', terminalApp];\n\t\t\tif (cwd) {\n\t\t\t\targs.push(cwd);\n\t\t\t}\n\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\tconst child = spawner.spawn('/usr/bin/open', args, { cwd, env });\n\t\t\tchild.on('error', e);\n\t\t\tchild.on('exit', () => c());\n\t\t});\n\t}\n}\n\nexport class LinuxExternalTerminalService extends ExternalTerminalService implements IExternalTerminalService {\n\n\tprivate static readonly WAIT_MESSAGE = nls.localize('press.any.key', \"Press any key to continue...\");\n\n\tpublic openTerminal(configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\treturn this.spawnTerminal(cp, configuration, cwd);\n\t}\n\n\tpublic runInTerminal(title: string, dir: string, args: string[], envVars: ITerminalEnvironment, settings: IExternalTerminalSettings): Promise<number | undefined> {\n\n\t\tconst execPromise = settings.linuxExec ? Promise.resolve(settings.linuxExec) : LinuxExternalTerminalService.getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\n\t\t\tconst termArgs: string[] = [];\n\t\t\t//termArgs.push('--title');\n\t\t\t//termArgs.push(`\"${TERMINAL_TITLE}\"`);\n\t\t\texecPromise.then(exec => {\n\t\t\t\tif (exec.indexOf('gnome-terminal') >= 0) {\n\t\t\t\t\ttermArgs.push('-x');\n\t\t\t\t} else {\n\t\t\t\t\ttermArgs.push('-e');\n\t\t\t\t}\n\t\t\t\ttermArgs.push('bash');\n\t\t\t\ttermArgs.push('-c');\n\n\t\t\t\tconst bashCommand = `${quote(args)}; echo; read -p \"${LinuxExternalTerminalService.WAIT_MESSAGE}\" -n1;`;\n\t\t\t\ttermArgs.push(`''${bashCommand}''`);\t// wrapping argument in two sets of ' because node is so \"friendly\" that it removes one set...\n\n\n\t\t\t\t// merge environment variables into a copy of the process.env\n\t\t\t\tconst env = Object.assign({}, getSanitizedEnvironment(process), envVars);\n\n\t\t\t\t// delete environment variables that have a null value\n\t\t\t\tObject.keys(env).filter(v => env[v] === null).forEach(key => delete env[key]);\n\n\t\t\t\tconst options: any = {\n\t\t\t\t\tcwd: dir,\n\t\t\t\t\tenv: env\n\t\t\t\t};\n\n\t\t\t\tlet stderr = '';\n\t\t\t\tconst cmd = cp.spawn(exec, termArgs, options);\n\t\t\t\tcmd.on('error', err => {\n\t\t\t\t\treject(improveError(err));\n\t\t\t\t});\n\t\t\t\tcmd.stderr.on('data', (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tcmd.on('exit', (code: number) => {\n\t\t\t\t\tif (code === 0) {\t// OK\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stderr) {\n\t\t\t\t\t\t\tconst lines = stderr.split('\\n', 1);\n\t\t\t\t\t\t\treject(new Error(lines[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(new Error(nls.localize('linux.term.failed', \"'{0}' failed with exit code {1}\", exec, code)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static _DEFAULT_TERMINAL_LINUX_READY: Promise<string>;\n\n\tpublic static async getDefaultTerminalLinuxReady(): Promise<string> {\n\t\tif (!LinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY) {\n\t\t\tif (!env.isLinux) {\n\t\t\t\tLinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY = Promise.resolve('xterm');\n\t\t\t} else {\n\t\t\t\tconst isDebian = await pfs.Promises.exists('/etc/debian_version');\n\t\t\t\tLinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY = new Promise<string>(r => {\n\t\t\t\t\tif (isDebian) {\n\t\t\t\t\t\tr('x-terminal-emulator');\n\t\t\t\t\t} else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {\n\t\t\t\t\t\tr('gnome-terminal');\n\t\t\t\t\t} else if (process.env.DESKTOP_SESSION === 'kde-plasma') {\n\t\t\t\t\t\tr('konsole');\n\t\t\t\t\t} else if (process.env.COLORTERM) {\n\t\t\t\t\t\tr(process.env.COLORTERM);\n\t\t\t\t\t} else if (process.env.TERM) {\n\t\t\t\t\t\tr(process.env.TERM);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr('xterm');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn LinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY;\n\t}\n\n\tspawnTerminal(spawner: typeof cp, configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\tconst execPromise = configuration.linuxExec ? Promise.resolve(configuration.linuxExec) : LinuxExternalTerminalService.getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\texecPromise.then(exec => {\n\t\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\t\tconst child = spawner.spawn(exec, [], { cwd, env });\n\t\t\t\tchild.on('error', e);\n\t\t\t\tchild.on('exit', () => c());\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction getSanitizedEnvironment(process: NodeJS.Process) {\n\tconst env = { ...process.env };\n\tsanitizeProcessEnvironment(env);\n\treturn env;\n}\n\n/**\n * tries to turn OS errors into more meaningful error messages\n */\nfunction improveError(err: Error & { errno?: string; path?: string }): Error {\n\tif ('errno' in err && err['errno'] === 'ENOENT' && 'path' in err && typeof err['path'] === 'string') {\n\t\treturn new Error(nls.localize('ext.term.app.not.found', \"can't find terminal application '{0}'\", err['path']));\n\t}\n\treturn err;\n}\n\n/**\n * Quote args if necessary and combine into a space separated string.\n */\nfunction quote(args: string[]): string {\n\tlet r = '';\n\tfor (const a of args) {\n\t\tif (a.indexOf(' ') >= 0) {\n\t\t\tr += '\"' + a + '\"';\n\t\t} else {\n\t\t\tr += a;\n\t\t}\n\t\tr += ' ';\n\t}\n\treturn r;\n}\n"],
  "mappings": "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",
  "names": ["env", "title", "process"]
}
