{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/notification/test/common/testNotificationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { INotification, INotificationHandle, INotificationService, INotificationSource, INotificationSourceFilter, IPromptChoice, IPromptOptions, IStatusMessageOptions, NoOpNotification, NotificationsFilter, Severity } from '../../common/notification.js';\n\nexport class TestNotificationService implements INotificationService {\n\n\treadonly onDidAddNotification: Event<INotification> = Event.None;\n\n\treadonly onDidRemoveNotification: Event<INotification> = Event.None;\n\n\treadonly onDidChangeFilter: Event<void> = Event.None;\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly NO_OP: INotificationHandle = new NoOpNotification();\n\n\tinfo(message: string): INotificationHandle {\n\t\treturn this.notify({ severity: Severity.Info, message });\n\t}\n\n\twarn(message: string): INotificationHandle {\n\t\treturn this.notify({ severity: Severity.Warning, message });\n\t}\n\n\terror(error: string | Error): INotificationHandle {\n\t\treturn this.notify({ severity: Severity.Error, message: error });\n\t}\n\n\tnotify(notification: INotification): INotificationHandle {\n\t\treturn TestNotificationService.NO_OP;\n\t}\n\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\treturn TestNotificationService.NO_OP;\n\t}\n\n\tstatus(message: string | Error, options?: IStatusMessageOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\tsetFilter(): void { }\n\n\tgetFilter(source?: INotificationSource | undefined): NotificationsFilter {\n\t\treturn NotificationsFilter.OFF;\n\t}\n\n\tgetFilters(): INotificationSourceFilter[] {\n\t\treturn [];\n\t}\n\n\tremoveFilter(sourceId: string): void { }\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,YAAY,mBAAmB;AACxC,SAAS,eAAe,qBAAqB,sBAAsB,qBAAqB,2BAA2B,eAAe,gBAAgB,uBAAuB,kBAAkB,qBAAqB,gBAAgB;AAEzN,MAAM,wBAAwD;AAAA,EATrE,OASqE;AAAA;AAAA;AAAA,EAE3D,uBAA6C,MAAM;AAAA,EAEnD,0BAAgD,MAAM;AAAA,EAEtD,oBAAiC,MAAM;AAAA,EAIhD,OAAwB,QAA6B,IAAI,iBAAiB;AAAA,EAE1E,KAAK,SAAsC;AAC1C,WAAO,KAAK,OAAO,EAAE,UAAU,SAAS,MAAM,QAAQ,CAAC;AAAA,EACxD;AAAA,EAEA,KAAK,SAAsC;AAC1C,WAAO,KAAK,OAAO,EAAE,UAAU,SAAS,SAAS,QAAQ,CAAC;AAAA,EAC3D;AAAA,EAEA,MAAM,OAA4C;AACjD,WAAO,KAAK,OAAO,EAAE,UAAU,SAAS,OAAO,SAAS,MAAM,CAAC;AAAA,EAChE;AAAA,EAEA,OAAO,cAAkD;AACxD,WAAO,wBAAwB;AAAA,EAChC;AAAA,EAEA,OAAO,UAAoB,SAAiB,SAA0B,SAA+C;AACpH,WAAO,wBAAwB;AAAA,EAChC;AAAA,EAEA,OAAO,SAAyB,SAA8C;AAC7E,WAAO,WAAW;AAAA,EACnB;AAAA,EAEA,YAAkB;AAAA,EAAE;AAAA,EAEpB,UAAU,QAA+D;AACxE,WAAO,oBAAoB;AAAA,EAC5B;AAAA,EAEA,aAA0C;AACzC,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,aAAa,UAAwB;AAAA,EAAE;AACxC;",
  "names": []
}
