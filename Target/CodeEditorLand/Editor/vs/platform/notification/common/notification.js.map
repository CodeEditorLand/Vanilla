{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/notification/common/notification.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction } from '../../../base/common/actions.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport BaseSeverity from '../../../base/common/severity.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport import Severity = BaseSeverity;\n\nexport const INotificationService = createDecorator<INotificationService>('notificationService');\n\nexport type NotificationMessage = string | Error;\n\nexport enum NotificationPriority {\n\n\t/**\n\t * Default priority: notification will be visible unless do not disturb mode is enabled.\n\t */\n\tDEFAULT,\n\n\t/**\n\t * Silent priority: notification will only be visible from the notifications center.\n\t */\n\tSILENT,\n\n\t/**\n\t * Urgent priority: notification will be visible even when do not disturb mode is enabled.\n\t */\n\tURGENT\n}\n\nexport interface INotificationProperties {\n\n\t/**\n\t * Sticky notifications are not automatically removed after a certain timeout.\n\t *\n\t * Currently, only 2 kinds of notifications are sticky:\n\t * - Error notifications with primary actions\n\t * - Notifications that show progress\n\t */\n\treadonly sticky?: boolean;\n\n\t/**\n\t * Allows to override the priority of the notification based on needs.\n\t */\n\treadonly priority?: NotificationPriority;\n\n\t/**\n\t * Adds an action to never show the notification again. The choice will be persisted\n\t * such as future requests will not cause the notification to show again.\n\t */\n\treadonly neverShowAgain?: INeverShowAgainOptions;\n}\n\nexport enum NeverShowAgainScope {\n\n\t/**\n\t * Will never show this notification on the current workspace again.\n\t */\n\tWORKSPACE,\n\n\t/**\n\t * Will never show this notification on any workspace of the same\n\t * profile again.\n\t */\n\tPROFILE,\n\n\t/**\n\t * Will never show this notification on any workspace across all\n\t * profiles again.\n\t */\n\tAPPLICATION\n}\n\nexport interface INeverShowAgainOptions {\n\n\t/**\n\t * The id is used to persist the selection of not showing the notification again.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * By default the action will show up as primary action. Setting this to true will\n\t * make it a secondary action instead.\n\t */\n\treadonly isSecondary?: boolean;\n\n\t/**\n\t * Whether to persist the choice in the current workspace or for all workspaces. By\n\t * default it will be persisted for all workspaces across all profiles\n\t * (= `NeverShowAgainScope.APPLICATION`).\n\t */\n\treadonly scope?: NeverShowAgainScope;\n}\n\nexport interface INotificationSource {\n\n\t/**\n\t * The id of the source.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * The label of the source.\n\t */\n\treadonly label: string;\n}\n\nexport function isNotificationSource(thing: unknown): thing is INotificationSource {\n\tif (thing) {\n\t\tconst candidate = thing as INotificationSource;\n\n\t\treturn typeof candidate.id === 'string' && typeof candidate.label === 'string';\n\t}\n\n\treturn false;\n}\n\nexport interface INotification extends INotificationProperties {\n\n\t/**\n\t * The id of the notification. If provided, will be used to compare\n\t * notifications with others to decide whether a notification is\n\t * duplicate or not.\n\t */\n\treadonly id?: string;\n\n\t/**\n\t * The severity of the notification. Either `Info`, `Warning` or `Error`.\n\t */\n\treadonly severity: Severity;\n\n\t/**\n\t * The message of the notification. This can either be a `string` or `Error`. Messages\n\t * can optionally include links in the format: `[text](link)`\n\t */\n\treadonly message: NotificationMessage;\n\n\t/**\n\t * The source of the notification appears as additional information.\n\t */\n\treadonly source?: string | INotificationSource;\n\n\t/**\n\t * Actions to show as part of the notification. Primary actions show up as\n\t * buttons as part of the message and will close the notification once clicked.\n\t *\n\t * Secondary actions are meant to provide additional configuration or context\n\t * for the notification and will show up less prominent. A notification does not\n\t * close automatically when invoking a secondary action.\n\t *\n\t * **Note:** If your intent is to show a message with actions to the user, consider\n\t * the `INotificationService.prompt()` method instead which are optimized for\n\t * this usecase and much easier to use!\n\t */\n\tactions?: INotificationActions;\n\n\t/**\n\t * The initial set of progress properties for the notification. To update progress\n\t * later on, access the `INotificationHandle.progress` property.\n\t */\n\treadonly progress?: INotificationProgressProperties;\n}\n\nexport interface INotificationActions {\n\n\t/**\n\t * Primary actions show up as buttons as part of the message and will close\n\t * the notification once clicked.\n\t *\n\t * Pass `ActionWithMenuAction` for an action that has additional menu actions.\n\t */\n\treadonly primary?: readonly IAction[];\n\n\t/**\n\t * Secondary actions are meant to provide additional configuration or context\n\t * for the notification and will show up less prominent. A notification does not\n\t * close automatically when invoking a secondary action.\n\t */\n\treadonly secondary?: readonly IAction[];\n}\n\nexport interface INotificationProgressProperties {\n\n\t/**\n\t * Causes the progress bar to spin infinitley.\n\t */\n\treadonly infinite?: boolean;\n\n\t/**\n\t * Indicate the total amount of work.\n\t */\n\treadonly total?: number;\n\n\t/**\n\t * Indicate that a specific chunk of work is done.\n\t */\n\treadonly worked?: number;\n}\n\nexport interface INotificationProgress {\n\n\t/**\n\t * Causes the progress bar to spin infinitley.\n\t */\n\tinfinite(): void;\n\n\t/**\n\t * Indicate the total amount of work.\n\t */\n\ttotal(value: number): void;\n\n\t/**\n\t * Indicate that a specific chunk of work is done.\n\t */\n\tworked(value: number): void;\n\n\t/**\n\t * Indicate that the long running operation is done.\n\t */\n\tdone(): void;\n}\n\nexport interface INotificationHandle {\n\n\t/**\n\t * Will be fired once the notification is closed.\n\t */\n\treadonly onDidClose: Event<void>;\n\n\t/**\n\t * Will be fired whenever the visibility of the notification changes.\n\t * A notification can either be visible as toast or inside the notification\n\t * center if it is visible.\n\t */\n\treadonly onDidChangeVisibility: Event<boolean>;\n\n\t/**\n\t * Allows to indicate progress on the notification even after the\n\t * notification is already visible.\n\t */\n\treadonly progress: INotificationProgress;\n\n\t/**\n\t * Allows to update the severity of the notification.\n\t */\n\tupdateSeverity(severity: Severity): void;\n\n\t/**\n\t * Allows to update the message of the notification even after the\n\t * notification is already visible.\n\t */\n\tupdateMessage(message: NotificationMessage): void;\n\n\t/**\n\t * Allows to update the actions of the notification even after the\n\t * notification is already visible.\n\t */\n\tupdateActions(actions?: INotificationActions): void;\n\n\t/**\n\t * Hide the notification and remove it from the notification center.\n\t */\n\tclose(): void;\n}\n\ninterface IBasePromptChoice {\n\n\t/**\n\t * Label to show for the choice to the user.\n\t */\n\treadonly label: string;\n\n\t/**\n\t * Whether to keep the notification open after the choice was selected\n\t * by the user. By default, will close the notification upon click.\n\t */\n\treadonly keepOpen?: boolean;\n\n\t/**\n\t * Triggered when the user selects the choice.\n\t */\n\trun: () => void;\n}\n\nexport interface IPromptChoice extends IBasePromptChoice {\n\n\t/**\n\t * Primary choices show up as buttons in the notification below the message.\n\t * Secondary choices show up under the gear icon in the header of the notification.\n\t */\n\treadonly isSecondary?: boolean;\n}\n\nexport interface IPromptChoiceWithMenu extends IPromptChoice {\n\n\t/**\n\t * Additional choices those will be shown in the dropdown menu for this choice.\n\t */\n\treadonly menu: IBasePromptChoice[];\n\n\t/**\n\t * Menu is not supported on secondary choices\n\t */\n\treadonly isSecondary: false | undefined;\n}\n\nexport interface IPromptOptions extends INotificationProperties {\n\n\t/**\n\t * Will be called if the user closed the notification without picking\n\t * any of the provided choices.\n\t */\n\tonCancel?: () => void;\n}\n\nexport interface IStatusMessageOptions {\n\n\t/**\n\t * An optional timeout after which the status message should show. By default\n\t * the status message will show immediately.\n\t */\n\treadonly showAfter?: number;\n\n\t/**\n\t * An optional timeout after which the status message is to be hidden. By default\n\t * the status message will not hide until another status message is displayed.\n\t */\n\treadonly hideAfter?: number;\n}\n\nexport enum NotificationsFilter {\n\n\t/**\n\t * No filter is enabled.\n\t */\n\tOFF,\n\n\t/**\n\t * All notifications are silent except error notifications.\n\t*/\n\tERROR\n}\n\nexport interface INotificationSourceFilter extends INotificationSource {\n\treadonly filter: NotificationsFilter;\n}\n\n/**\n * A service to bring up notifications and non-modal prompts.\n *\n * Note: use the `IDialogService` for a modal way to ask the user for input.\n */\nexport interface INotificationService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emitted when a new notification is added.\n\t */\n\treadonly onDidAddNotification: Event<INotification>;\n\n\t/**\n\t * Emitted when a notification is removed.\n\t */\n\treadonly onDidRemoveNotification: Event<INotification>;\n\n\t/**\n\t * Emitted when the notifications filter changed.\n\t */\n\treadonly onDidChangeFilter: Event<void>;\n\n\t/**\n\t * Sets a notification filter either for all notifications\n\t * or for a specific source.\n\t */\n\tsetFilter(filter: NotificationsFilter | INotificationSourceFilter): void;\n\n\t/**\n\t * Gets the notification filter either for all notifications\n\t * or for a specific source.\n\t */\n\tgetFilter(source?: INotificationSource): NotificationsFilter;\n\n\t/**\n\t * Returns all filters with their sources.\n\t */\n\tgetFilters(): INotificationSourceFilter[];\n\n\t/**\n\t * Removes a filter for a specific source.\n\t */\n\tremoveFilter(sourceId: string): void;\n\n\t/**\n\t * Show the provided notification to the user. The returned `INotificationHandle`\n\t * can be used to control the notification afterwards.\n\t *\n\t * **Note:** If your intent is to show a message with actions to the user, consider\n\t * the `INotificationService.prompt()` method instead which are optimized for\n\t * this usecase and much easier to use!\n\t *\n\t * @returns a handle on the notification to e.g. hide it or update message, buttons, etc.\n\t */\n\tnotify(notification: INotification): INotificationHandle;\n\n\t/**\n\t * A convenient way of reporting infos. Use the `INotificationService.notify`\n\t * method if you need more control over the notification.\n\t */\n\tinfo(message: NotificationMessage | NotificationMessage[]): void;\n\n\t/**\n\t * A convenient way of reporting warnings. Use the `INotificationService.notify`\n\t * method if you need more control over the notification.\n\t */\n\twarn(message: NotificationMessage | NotificationMessage[]): void;\n\n\t/**\n\t * A convenient way of reporting errors. Use the `INotificationService.notify`\n\t * method if you need more control over the notification.\n\t */\n\terror(message: NotificationMessage | NotificationMessage[]): void;\n\n\t/**\n\t * Shows a prompt in the notification area with the provided choices. The prompt\n\t * is non-modal. If you want to show a modal dialog instead, use `IDialogService`.\n\t *\n\t * @param severity the severity of the notification. Either `Info`, `Warning` or `Error`.\n\t * @param message the message to show as status.\n\t * @param choices options to be chosen from.\n\t * @param options provides some optional configuration options.\n\t *\n\t * @returns a handle on the notification to e.g. hide it or update message, buttons, etc.\n\t */\n\tprompt(severity: Severity, message: string, choices: (IPromptChoice | IPromptChoiceWithMenu)[], options?: IPromptOptions): INotificationHandle;\n\n\t/**\n\t * Shows a status message in the status area with the provided text.\n\t *\n\t * @param message the message to show as status\n\t * @param options provides some optional configuration options\n\t *\n\t * @returns a disposable to hide the status message\n\t */\n\tstatus(message: NotificationMessage, options?: IStatusMessageOptions): IDisposable;\n}\n\nexport class NoOpNotification implements INotificationHandle {\n\n\treadonly progress = new NoOpProgress();\n\n\treadonly onDidClose = Event.None;\n\treadonly onDidChangeVisibility = Event.None;\n\n\tupdateSeverity(severity: Severity): void { }\n\tupdateMessage(message: NotificationMessage): void { }\n\tupdateActions(actions?: INotificationActions): void { }\n\n\tclose(): void { }\n}\n\nexport class NoOpProgress implements INotificationProgress {\n\tinfinite(): void { }\n\tdone(): void { }\n\ttotal(value: number): void { }\n\tworked(value: number): void { }\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,OAAO,kBAAkB;AACzB,SAAS,uBAAuB;AAEzB,MAAO,WAAW;AAElB,MAAM,uBAAuB,gBAAsC,qBAAqB;AAIxF,IAAK,uBAAL,kBAAKA,0BAAL;AAKN,EAAAA,4CAAA;AAKA,EAAAA,4CAAA;AAKA,EAAAA,4CAAA;AAfW,SAAAA;AAAA,GAAA;AAyCL,IAAK,sBAAL,kBAAKC,yBAAL;AAKN,EAAAA,0CAAA;AAMA,EAAAA,0CAAA;AAMA,EAAAA,0CAAA;AAjBW,SAAAA;AAAA,GAAA;AAsDL,SAAS,qBAAqB,OAA8C;AAClF,MAAI,OAAO;AACV,UAAM,YAAY;AAElB,WAAO,OAAO,UAAU,OAAO,YAAY,OAAO,UAAU,UAAU;AAAA,EACvE;AAEA,SAAO;AACR;AARgB;AA+NT,IAAK,sBAAL,kBAAKC,yBAAL;AAKN,EAAAA,0CAAA;AAKA,EAAAA,0CAAA;AAVW,SAAAA;AAAA,GAAA;AAqHL,MAAM,iBAAgD;AAAA,EApc7D,OAoc6D;AAAA;AAAA;AAAA,EAEnD,WAAW,IAAI,aAAa;AAAA,EAE5B,aAAa,MAAM;AAAA,EACnB,wBAAwB,MAAM;AAAA,EAEvC,eAAe,UAA0B;AAAA,EAAE;AAAA,EAC3C,cAAc,SAAoC;AAAA,EAAE;AAAA,EACpD,cAAc,SAAsC;AAAA,EAAE;AAAA,EAEtD,QAAc;AAAA,EAAE;AACjB;AAEO,MAAM,aAA8C;AAAA,EAld3D,OAkd2D;AAAA;AAAA;AAAA,EAC1D,WAAiB;AAAA,EAAE;AAAA,EACnB,OAAa;AAAA,EAAE;AAAA,EACf,MAAM,OAAqB;AAAA,EAAE;AAAA,EAC7B,OAAO,OAAqB;AAAA,EAAE;AAC/B;",
  "names": ["NotificationPriority", "NeverShowAgainScope", "NotificationsFilter"]
}
