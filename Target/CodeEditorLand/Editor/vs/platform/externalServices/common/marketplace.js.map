{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/externalServices/common/marketplace.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IHeaders } from '../../../base/parts/request/common/request.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { getServiceMachineId } from './serviceMachineId.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService, TelemetryLevel } from '../../telemetry/common/telemetry.js';\nimport { getTelemetryLevel, supportsTelemetry } from '../../telemetry/common/telemetryUtils.js';\n\nexport async function resolveMarketplaceHeaders(version: string,\n\tproductService: IProductService,\n\tenvironmentService: IEnvironmentService,\n\tconfigurationService: IConfigurationService,\n\tfileService: IFileService,\n\tstorageService: IStorageService | undefined,\n\ttelemetryService: ITelemetryService): Promise<IHeaders> {\n\n\tconst headers: IHeaders = {\n\t\t'X-Market-Client-Id': `VSCode ${version}`,\n\t\t'User-Agent': `VSCode ${version} (${productService.nameShort})`\n\t};\n\n\tif (supportsTelemetry(productService, environmentService) && getTelemetryLevel(configurationService) === TelemetryLevel.USAGE) {\n\t\tconst serviceMachineId = await getServiceMachineId(environmentService, fileService, storageService);\n\t\theaders['X-Market-User-Id'] = serviceMachineId;\n\t\t// Send machineId as VSCode-SessionId so we can correlate telemetry events across different services\n\t\t// machineId can be undefined sometimes (eg: when launching from CLI), so send serviceMachineId instead otherwise\n\t\t// Marketplace will reject the request if there is no VSCode-SessionId header\n\t\theaders['VSCode-SessionId'] = telemetryService.machineId || serviceMachineId;\n\t}\n\n\treturn headers;\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,SAAS,mBAAmB,sBAAsB;AAClD,SAAS,mBAAmB,yBAAyB;AAErD,eAAsB,0BAA0B,SAC/C,gBACA,oBACA,sBACA,aACA,gBACA,kBAAwD;AAExD,QAAM,UAAoB;AAAA,IACzB,sBAAsB,UAAU,OAAO;AAAA,IACvC,cAAc,UAAU,OAAO,KAAK,eAAe,SAAS;AAAA,EAC7D;AAEA,MAAI,kBAAkB,gBAAgB,kBAAkB,KAAK,kBAAkB,oBAAoB,MAAM,eAAe,OAAO;AAC9H,UAAM,mBAAmB,MAAM,oBAAoB,oBAAoB,aAAa,cAAc;AAClG,YAAQ,kBAAkB,IAAI;AAI9B,YAAQ,kBAAkB,IAAI,iBAAiB,aAAa;AAAA,EAC7D;AAEA,SAAO;AACR;AAvBsB;",
  "names": []
}
