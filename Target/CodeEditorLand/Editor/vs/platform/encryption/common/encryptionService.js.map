{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/encryption/common/encryptionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport const IEncryptionService =\n\tcreateDecorator<IEncryptionService>(\"encryptionService\");\nexport interface IEncryptionService extends ICommonEncryptionService {\n\tsetUsePlainTextEncryption(): Promise<void>;\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider>;\n}\n\nexport const IEncryptionMainService = createDecorator<IEncryptionMainService>(\n\t\"encryptionMainService\",\n);\nexport interface IEncryptionMainService extends IEncryptionService {}\n\nexport interface ICommonEncryptionService {\n\treadonly _serviceBrand: undefined;\n\n\tencrypt(value: string): Promise<string>;\n\n\tdecrypt(value: string): Promise<string>;\n\n\tisEncryptionAvailable(): Promise<boolean>;\n}\n\n// The values provided to the `password-store` command line switch.\n// Notice that they are not the same as the values returned by\n// `getSelectedStorageBackend` in the `safeStorage` API.\nexport enum PasswordStoreCLIOption {\n\tkwallet = \"kwallet\",\n\tkwallet5 = \"kwallet5\",\n\tgnomeLibsecret = \"gnome-libsecret\",\n\tbasic = \"basic\",\n}\n\n// The values returned by `getSelectedStorageBackend` in the `safeStorage` API.\nexport enum KnownStorageProvider {\n\tunknown = \"unknown\",\n\tbasicText = \"basic_text\",\n\n\t// Linux\n\tgnomeAny = \"gnome_any\",\n\tgnomeLibsecret = \"gnome_libsecret\",\n\tgnomeKeyring = \"gnome_keyring\",\n\tkwallet = \"kwallet\",\n\tkwallet5 = \"kwallet5\",\n\tkwallet6 = \"kwallet6\",\n\n\t// The rest of these are not returned by `getSelectedStorageBackend`\n\t// but these were added for platform completeness.\n\n\t// Windows\n\tdplib = \"dpapi\",\n\n\t// macOS\n\tkeychainAccess = \"keychain_access\",\n}\n\nexport function isKwallet(backend: string): boolean {\n\treturn (\n\t\tbackend === KnownStorageProvider.kwallet ||\n\t\tbackend === KnownStorageProvider.kwallet5 ||\n\t\tbackend === KnownStorageProvider.kwallet6\n\t);\n}\n\nexport function isGnome(backend: string): boolean {\n\treturn (\n\t\tbackend === KnownStorageProvider.gnomeAny ||\n\t\tbackend === KnownStorageProvider.gnomeLibsecret ||\n\t\tbackend === KnownStorageProvider.gnomeKeyring\n\t);\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAEzB,MAAM,qBACZ,gBAAoC,mBAAmB;AAMjD,MAAM,yBAAyB;AAAA,EACrC;AACD;AAgBO,IAAK,yBAAL,kBAAKA,4BAAL;AACN,EAAAA,wBAAA,aAAU;AACV,EAAAA,wBAAA,cAAW;AACX,EAAAA,wBAAA,oBAAiB;AACjB,EAAAA,wBAAA,WAAQ;AAJG,SAAAA;AAAA,GAAA;AAQL,IAAK,uBAAL,kBAAKC,0BAAL;AACN,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,eAAY;AAGZ,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,oBAAiB;AACjB,EAAAA,sBAAA,kBAAe;AACf,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,cAAW;AAMX,EAAAA,sBAAA,WAAQ;AAGR,EAAAA,sBAAA,oBAAiB;AAnBN,SAAAA;AAAA,GAAA;AAsBL,SAAS,UAAU,SAA0B;AACnD,SACC,YAAY,2BACZ,YAAY,6BACZ,YAAY;AAEd;AANgB;AAQT,SAAS,QAAQ,SAA0B;AACjD,SACC,YAAY,8BACZ,YAAY,0CACZ,YAAY;AAEd;AANgB;",
  "names": ["PasswordStoreCLIOption", "KnownStorageProvider"]
}
