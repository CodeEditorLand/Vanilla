{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/encryption/common/encryptionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const IEncryptionService = createDecorator<IEncryptionService>('encryptionService');\nexport interface IEncryptionService extends ICommonEncryptionService {\n\tsetUsePlainTextEncryption(): Promise<void>;\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider>;\n}\n\nexport const IEncryptionMainService = createDecorator<IEncryptionMainService>('encryptionMainService');\nexport interface IEncryptionMainService extends IEncryptionService { }\n\nexport interface ICommonEncryptionService {\n\n\treadonly _serviceBrand: undefined;\n\n\tencrypt(value: string): Promise<string>;\n\n\tdecrypt(value: string): Promise<string>;\n\n\tisEncryptionAvailable(): Promise<boolean>;\n}\n\n// The values provided to the `password-store` command line switch.\n// Notice that they are not the same as the values returned by\n// `getSelectedStorageBackend` in the `safeStorage` API.\nexport const enum PasswordStoreCLIOption {\n\tkwallet = 'kwallet',\n\tkwallet5 = 'kwallet5',\n\tgnomeLibsecret = 'gnome-libsecret',\n\tbasic = 'basic'\n}\n\n// The values returned by `getSelectedStorageBackend` in the `safeStorage` API.\nexport const enum KnownStorageProvider {\n\tunknown = 'unknown',\n\tbasicText = 'basic_text',\n\n\t// Linux\n\tgnomeAny = 'gnome_any',\n\tgnomeLibsecret = 'gnome_libsecret',\n\tgnomeKeyring = 'gnome_keyring',\n\tkwallet = 'kwallet',\n\tkwallet5 = 'kwallet5',\n\tkwallet6 = 'kwallet6',\n\n\t// The rest of these are not returned by `getSelectedStorageBackend`\n\t// but these were added for platform completeness.\n\n\t// Windows\n\tdplib = 'dpapi',\n\n\t// macOS\n\tkeychainAccess = 'keychain_access',\n}\n\nexport function isKwallet(backend: string): boolean {\n\treturn backend === KnownStorageProvider.kwallet\n\t\t|| backend === KnownStorageProvider.kwallet5\n\t\t|| backend === KnownStorageProvider.kwallet6;\n}\n\nexport function isGnome(backend: string): boolean {\n\treturn backend === KnownStorageProvider.gnomeAny\n\t\t|| backend === KnownStorageProvider.gnomeLibsecret\n\t\t|| backend === KnownStorageProvider.gnomeKeyring;\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAEzB,MAAM,qBAAqB,gBAAoC,mBAAmB;AAMlF,MAAM,yBAAyB,gBAAwC,uBAAuB;AAiB9F,IAAW,yBAAX,kBAAWA,4BAAX;AACN,EAAAA,wBAAA,aAAU;AACV,EAAAA,wBAAA,cAAW;AACX,EAAAA,wBAAA,oBAAiB;AACjB,EAAAA,wBAAA,WAAQ;AAJS,SAAAA;AAAA,GAAA;AAQX,IAAW,uBAAX,kBAAWC,0BAAX;AACN,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,eAAY;AAGZ,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,oBAAiB;AACjB,EAAAA,sBAAA,kBAAe;AACf,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,cAAW;AAMX,EAAAA,sBAAA,WAAQ;AAGR,EAAAA,sBAAA,oBAAiB;AAnBA,SAAAA;AAAA,GAAA;AAsBX,SAAS,UAAU,SAA0B;AACnD,SAAO,YAAY,2BACf,YAAY,6BACZ,YAAY;AACjB;AAJgB;AAMT,SAAS,QAAQ,SAA0B;AACjD,SAAO,YAAY,8BACf,YAAY,0CACZ,YAAY;AACjB;AAJgB;",
  "names": ["PasswordStoreCLIOption", "KnownStorageProvider"]
}
