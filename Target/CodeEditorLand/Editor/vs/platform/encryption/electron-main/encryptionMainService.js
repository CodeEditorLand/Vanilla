var y=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=(o,e,r,t)=>{for(var i=t>1?void 0:t?d(e,r):e,a=o.length-1,s;a>=0;a--)(s=o[a])&&(i=(t?s(e,r,i):s(i))||i);return t&&i&&y(e,r,i),i},S=(o,e)=>(r,t)=>e(r,t,o);import{app as u,safeStorage as E}from"electron";import{isMacintosh as g,isWindows as v}from"../../../../vs/base/common/platform.js";import{KnownStorageProvider as l,PasswordStoreCLIOption as f}from"../../../../vs/platform/encryption/common/encryptionService.js";import{ILogService as h}from"../../../../vs/platform/log/common/log.js";const n=E;let c=class{constructor(e){this.logService=e;u.commandLine.getSwitchValue("password-store")===f.basic&&(this.logService.trace("[EncryptionMainService] setting usePlainTextEncryption to true..."),n.setUsePlainTextEncryption?.(!0),this.logService.trace("[EncryptionMainService] set usePlainTextEncryption to true"))}_serviceBrand;async encrypt(e){this.logService.trace("[EncryptionMainService] Encrypting value...");try{const r=JSON.stringify(n.encryptString(e));return this.logService.trace("[EncryptionMainService] Encrypted value."),r}catch(r){throw this.logService.error(r),r}}async decrypt(e){let r;try{if(r=JSON.parse(e),!r.data)throw new Error(`[EncryptionMainService] Invalid encrypted value: ${e}`);const t=Buffer.from(r.data);this.logService.trace("[EncryptionMainService] Decrypting value...");const i=n.decryptString(t);return this.logService.trace("[EncryptionMainService] Decrypted value."),i}catch(t){throw this.logService.error(t),t}}isEncryptionAvailable(){this.logService.trace("[EncryptionMainService] Checking if encryption is available...");const e=n.isEncryptionAvailable();return this.logService.trace("[EncryptionMainService] Encryption is available: ",e),Promise.resolve(e)}getKeyStorageProvider(){if(v)return Promise.resolve(l.dplib);if(g)return Promise.resolve(l.keychainAccess);if(n.getSelectedStorageBackend)try{this.logService.trace("[EncryptionMainService] Getting selected storage backend...");const e=n.getSelectedStorageBackend();return this.logService.trace("[EncryptionMainService] Selected storage backend: ",e),Promise.resolve(e)}catch(e){this.logService.error(e)}return Promise.resolve(l.unknown)}async setUsePlainTextEncryption(){if(v)throw new Error("Setting plain text encryption is not supported on Windows.");if(g)throw new Error("Setting plain text encryption is not supported on macOS.");if(!n.setUsePlainTextEncryption)throw new Error("Setting plain text encryption is not supported.");this.logService.trace("[EncryptionMainService] Setting usePlainTextEncryption to true..."),n.setUsePlainTextEncryption(!0),this.logService.trace("[EncryptionMainService] Set usePlainTextEncryption to true")}};c=p([S(0,h)],c);export{c as EncryptionMainService};
