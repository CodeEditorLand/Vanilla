{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/encryption/electron-main/encryptionMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, safeStorage as safeStorageElectron } from \"electron\";\nimport { isMacintosh, isWindows } from \"../../../base/common/platform.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport {\n\ttype IEncryptionMainService,\n\tKnownStorageProvider,\n\tPasswordStoreCLIOption,\n} from \"../common/encryptionService.js\";\n\n// These APIs are currently only supported in our custom build of electron so\n// we need to guard against them not being available.\ninterface ISafeStorageAdditionalAPIs {\n\tsetUsePlainTextEncryption(usePlainText: boolean): void;\n\tgetSelectedStorageBackend(): string;\n}\n\nconst safeStorage: typeof import(\"electron\").safeStorage &\n\tPartial<ISafeStorageAdditionalAPIs> = safeStorageElectron;\n\nexport class EncryptionMainService implements IEncryptionMainService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\t// if this commandLine switch is set, the user has opted in to using basic text encryption\n\t\tif (app.commandLine.getSwitchValue('password-store') === PasswordStoreCLIOption.basic) {\n\t\t\tthis.logService.trace('[EncryptionMainService] setting usePlainTextEncryption to true...');\n\t\t\tsafeStorage.setUsePlainTextEncryption?.(true);\n\t\t\tthis.logService.trace('[EncryptionMainService] set usePlainTextEncryption to true');\n\t\t}\n\t}\n\n\tasync encrypt(value: string): Promise<string> {\n\t\tthis.logService.trace(\"[EncryptionMainService] Encrypting value...\");\n\t\ttry {\n\t\t\tconst result = JSON.stringify(safeStorage.encryptString(value));\n\t\t\tthis.logService.trace(\"[EncryptionMainService] Encrypted value.\");\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync decrypt(value: string): Promise<string> {\n\t\tlet parsedValue: { data: string };\n\t\ttry {\n\t\t\tparsedValue = JSON.parse(value);\n\t\t\tif (!parsedValue.data) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`[EncryptionMainService] Invalid encrypted value: ${value}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst bufferToDecrypt = Buffer.from(parsedValue.data);\n\n\t\t\tthis.logService.trace(\n\t\t\t\t\"[EncryptionMainService] Decrypting value...\",\n\t\t\t);\n\t\t\tconst result = safeStorage.decryptString(bufferToDecrypt);\n\t\t\tthis.logService.trace(\"[EncryptionMainService] Decrypted value.\");\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tisEncryptionAvailable(): Promise<boolean> {\n\t\tthis.logService.trace(\n\t\t\t\"[EncryptionMainService] Checking if encryption is available...\",\n\t\t);\n\t\tconst result = safeStorage.isEncryptionAvailable();\n\t\tthis.logService.trace(\n\t\t\t\"[EncryptionMainService] Encryption is available: \",\n\t\t\tresult,\n\t\t);\n\t\treturn Promise.resolve(result);\n\t}\n\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider> {\n\t\tif (isWindows) {\n\t\t\treturn Promise.resolve(KnownStorageProvider.dplib);\n\t\t}\n\t\tif (isMacintosh) {\n\t\t\treturn Promise.resolve(KnownStorageProvider.keychainAccess);\n\t\t}\n\t\tif (safeStorage.getSelectedStorageBackend) {\n\t\t\ttry {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"[EncryptionMainService] Getting selected storage backend...\",\n\t\t\t\t);\n\t\t\t\tconst result =\n\t\t\t\t\tsafeStorage.getSelectedStorageBackend() as KnownStorageProvider;\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"[EncryptionMainService] Selected storage backend: \",\n\t\t\t\t\tresult,\n\t\t\t\t);\n\t\t\t\treturn Promise.resolve(result);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(KnownStorageProvider.unknown);\n\t}\n\n\tasync setUsePlainTextEncryption(): Promise<void> {\n\t\tif (isWindows) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Setting plain text encryption is not supported on Windows.\",\n\t\t\t);\n\t\t}\n\n\t\tif (isMacintosh) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Setting plain text encryption is not supported on macOS.\",\n\t\t\t);\n\t\t}\n\n\t\tif (!safeStorage.setUsePlainTextEncryption) {\n\t\t\tthrow new Error(\"Setting plain text encryption is not supported.\");\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t\"[EncryptionMainService] Setting usePlainTextEncryption to true...\",\n\t\t);\n\t\tsafeStorage.setUsePlainTextEncryption(true);\n\t\tthis.logService.trace(\n\t\t\t\"[EncryptionMainService] Set usePlainTextEncryption to true\",\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,KAAK,eAAe,2BAA2B;AACxD,SAAS,aAAa,iBAAiB;AACvC,SAAS,mBAAmB;AAC5B;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AASP,MAAM,cACiC;AAEhC,IAAM,wBAAN,MAA8D;AAAA,EAGpE,YAC+B,YAC7B;AAD6B;AAG9B,QAAI,IAAI,YAAY,eAAe,gBAAgB,MAAM,uBAAuB,OAAO;AACtF,WAAK,WAAW,MAAM,mEAAmE;AACzF,kBAAY,4BAA4B,IAAI;AAC5C,WAAK,WAAW,MAAM,4DAA4D;AAAA,IACnF;AAAA,EACD;AAAA,EApCD,OAwBqE;AAAA;AAAA;AAAA,EACpE;AAAA,EAaA,MAAM,QAAQ,OAAgC;AAC7C,SAAK,WAAW,MAAM,6CAA6C;AACnE,QAAI;AACH,YAAM,SAAS,KAAK,UAAU,YAAY,cAAc,KAAK,CAAC;AAC9D,WAAK,WAAW,MAAM,0CAA0C;AAChE,aAAO;AAAA,IACR,SAAS,GAAG;AACX,WAAK,WAAW,MAAM,CAAC;AACvB,YAAM;AAAA,IACP;AAAA,EACD;AAAA,EAEA,MAAM,QAAQ,OAAgC;AAC7C,QAAI;AACJ,QAAI;AACH,oBAAc,KAAK,MAAM,KAAK;AAC9B,UAAI,CAAC,YAAY,MAAM;AACtB,cAAM,IAAI;AAAA,UACT,oDAAoD,KAAK;AAAA,QAC1D;AAAA,MACD;AACA,YAAM,kBAAkB,OAAO,KAAK,YAAY,IAAI;AAEpD,WAAK,WAAW;AAAA,QACf;AAAA,MACD;AACA,YAAM,SAAS,YAAY,cAAc,eAAe;AACxD,WAAK,WAAW,MAAM,0CAA0C;AAChE,aAAO;AAAA,IACR,SAAS,GAAG;AACX,WAAK,WAAW,MAAM,CAAC;AACvB,YAAM;AAAA,IACP;AAAA,EACD;AAAA,EAEA,wBAA0C;AACzC,SAAK,WAAW;AAAA,MACf;AAAA,IACD;AACA,UAAM,SAAS,YAAY,sBAAsB;AACjD,SAAK,WAAW;AAAA,MACf;AAAA,MACA;AAAA,IACD;AACA,WAAO,QAAQ,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,wBAAuD;AACtD,QAAI,WAAW;AACd,aAAO,QAAQ,QAAQ,qBAAqB,KAAK;AAAA,IAClD;AACA,QAAI,aAAa;AAChB,aAAO,QAAQ,QAAQ,qBAAqB,cAAc;AAAA,IAC3D;AACA,QAAI,YAAY,2BAA2B;AAC1C,UAAI;AACH,aAAK,WAAW;AAAA,UACf;AAAA,QACD;AACA,cAAM,SACL,YAAY,0BAA0B;AACvC,aAAK,WAAW;AAAA,UACf;AAAA,UACA;AAAA,QACD;AACA,eAAO,QAAQ,QAAQ,MAAM;AAAA,MAC9B,SAAS,GAAG;AACX,aAAK,WAAW,MAAM,CAAC;AAAA,MACxB;AAAA,IACD;AACA,WAAO,QAAQ,QAAQ,qBAAqB,OAAO;AAAA,EACpD;AAAA,EAEA,MAAM,4BAA2C;AAChD,QAAI,WAAW;AACd,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAEA,QAAI,aAAa;AAChB,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAEA,QAAI,CAAC,YAAY,2BAA2B;AAC3C,YAAM,IAAI,MAAM,iDAAiD;AAAA,IAClE;AAEA,SAAK,WAAW;AAAA,MACf;AAAA,IACD;AACA,gBAAY,0BAA0B,IAAI;AAC1C,SAAK,WAAW;AAAA,MACf;AAAA,IACD;AAAA,EACD;AACD;AAhHa,wBAAN;AAAA,EAIJ;AAAA,GAJU;",
  "names": []
}
