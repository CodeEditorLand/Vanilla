var b=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var m=(c,s,e,t)=>{for(var r=t>1?void 0:t?f(s,e):s,i=c.length-1,d;i>=0;i--)(d=c[i])&&(r=(t?d(s,e,r):d(r))||r);return t&&r&&b(s,e,r),r},l=(c,s)=>(e,t)=>s(e,t,c);import{isSafari as v,isWebkitWebView as g}from"../../../base/browser/browser.js";import{$ as w,addDisposableListener as u,getActiveDocument as y,getActiveWindow as o,isHTMLElement as S,onDidRegisterWindow as T}from"../../../base/browser/dom.js";import{mainWindow as R}from"../../../base/browser/window.js";import{DeferredPromise as x}from"../../../base/common/async.js";import{Event as p}from"../../../base/common/event.js";import{hash as P}from"../../../base/common/hash.js";import{Disposable as W}from"../../../base/common/lifecycle.js";import{URI as E}from"../../../base/common/uri.js";import{ILayoutService as C}from"../../layout/browser/layoutService.js";import{ILogService as I}from"../../log/common/log.js";const n="application/vnd.code.resources";let a=class extends W{constructor(e,t){super();this.layoutService=e;this.logService=t;(v||g)&&this.installWebKitWriteTextWorkaround(),this._register(p.runAndSubscribe(T,({window:r,disposables:i})=>{i.add(u(r.document,"copy",()=>this.clearResourcesState()))},{window:R,disposables:this._store}))}webKitPendingClipboardWritePromise;installWebKitWriteTextWorkaround(){const e=()=>{const t=new x;this.webKitPendingClipboardWritePromise&&!this.webKitPendingClipboardWritePromise.isSettled&&this.webKitPendingClipboardWritePromise.cancel(),this.webKitPendingClipboardWritePromise=t,o().navigator.clipboard.write([new ClipboardItem({"text/plain":t.p})]).catch(async r=>{(!(r instanceof Error)||r.name!=="NotAllowedError"||!t.isRejected)&&this.logService.error(r)})};this._register(p.runAndSubscribe(this.layoutService.onDidAddContainer,({container:t,disposables:r})=>{r.add(u(t,"click",e)),r.add(u(t,"keydown",e))},{container:this.layoutService.mainContainer,disposables:this._store}))}mapTextToType=new Map;async writeText(e,t){if(this.clearResourcesState(),t){this.mapTextToType.set(t,e);return}if(this.webKitPendingClipboardWritePromise)return this.webKitPendingClipboardWritePromise.complete(e);try{return await o().navigator.clipboard.writeText(e)}catch(r){console.error(r)}this.fallbackWriteText(e)}fallbackWriteText(e){const t=y(),r=t.activeElement,i=t.body.appendChild(w("textarea",{"aria-hidden":!0}));i.style.height="1px",i.style.width="1px",i.style.position="absolute",i.value=e,i.focus(),i.select(),t.execCommand("copy"),S(r)&&r.focus(),i.remove()}async readText(e){if(e)return this.mapTextToType.get(e)||"";try{return await o().navigator.clipboard.readText()}catch(t){console.error(t)}return""}findText="";async readFindText(){return this.findText}async writeFindText(e){this.findText=e}resources=[];resourcesStateHash=void 0;static MAX_RESOURCE_STATE_SOURCE_LENGTH=1e3;async writeResources(e){try{await o().navigator.clipboard.write([new ClipboardItem({[`web ${n}`]:new Blob([JSON.stringify(e.map(t=>t.toJSON()))],{type:n})})])}catch{}e.length===0?this.clearResourcesState():(this.resources=e,this.resourcesStateHash=await this.computeResourcesStateHash())}async readResources(){try{const t=await o().navigator.clipboard.read();for(const r of t)if(r.types.includes(`web ${n}`)){const i=await r.getType(`web ${n}`);return JSON.parse(await i.text()).map(h=>E.from(h))}}catch{}const e=await this.computeResourcesStateHash();return this.resourcesStateHash!==e&&this.clearResourcesState(),this.resources}async computeResourcesStateHash(){if(this.resources.length===0)return;const e=await this.readText();return P(e.substring(0,a.MAX_RESOURCE_STATE_SOURCE_LENGTH))}async hasResources(){try{const e=await o().navigator.clipboard.read();for(const t of e)if(t.types.includes(`web ${n}`))return!0}catch{}return this.resources.length>0}clearInternalState(){this.clearResourcesState()}clearResourcesState(){this.resources=[],this.resourcesStateHash=void 0}};a=m([l(0,C),l(1,I)],a);export{a as BrowserClipboardService};
