{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/clipboard/browser/clipboardService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isSafari, isWebkitWebView } from '../../../base/browser/browser.js';\nimport { $, addDisposableListener, getActiveDocument, getActiveWindow, isHTMLElement, onDidRegisterWindow } from '../../../base/browser/dom.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { Event } from '../../../base/common/event.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IClipboardService } from '../common/clipboardService.js';\nimport { ILayoutService } from '../../layout/browser/layoutService.js';\nimport { ILogService } from '../../log/common/log.js';\n\n/**\n * Custom mime type used for storing a list of uris in the clipboard.\n *\n * Requires support for custom web clipboards https://github.com/w3c/clipboard-apis/pull/175\n */\nconst vscodeResourcesMime = 'application/vnd.code.resources';\n\nexport class BrowserClipboardService extends Disposable implements IClipboardService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tif (isSafari || isWebkitWebView) {\n\t\t\tthis.installWebKitWriteTextWorkaround();\n\t\t}\n\n\t\t// Keep track of copy operations to reset our set of\n\t\t// copied resources: since we keep resources in memory\n\t\t// and not in the clipboard, we have to invalidate\n\t\t// that state when the user copies other data.\n\t\tthis._register(Event.runAndSubscribe(onDidRegisterWindow, ({ window, disposables }) => {\n\t\t\tdisposables.add(addDisposableListener(window.document, 'copy', () => this.clearResourcesState()));\n\t\t}, { window: mainWindow, disposables: this._store }));\n\t}\n\n\tprivate webKitPendingClipboardWritePromise: DeferredPromise<string> | undefined;\n\n\t// In Safari, it has the following note:\n\t//\n\t// \"The request to write to the clipboard must be triggered during a user gesture.\n\t// A call to clipboard.write or clipboard.writeText outside the scope of a user\n\t// gesture(such as \"click\" or \"touch\" event handlers) will result in the immediate\n\t// rejection of the promise returned by the API call.\"\n\t// From: https://webkit.org/blog/10855/async-clipboard-api/\n\t//\n\t// Since extensions run in a web worker, and handle gestures in an asynchronous way,\n\t// they are not classified by Safari as \"in response to a user gesture\" and will reject.\n\t//\n\t// This function sets up some handlers to work around that behavior.\n\tprivate installWebKitWriteTextWorkaround(): void {\n\t\tconst handler = () => {\n\t\t\tconst currentWritePromise = new DeferredPromise<string>();\n\n\t\t\t// Cancel the previous promise since we just created a new one in response to this new event\n\t\t\tif (this.webKitPendingClipboardWritePromise && !this.webKitPendingClipboardWritePromise.isSettled) {\n\t\t\t\tthis.webKitPendingClipboardWritePromise.cancel();\n\t\t\t}\n\t\t\tthis.webKitPendingClipboardWritePromise = currentWritePromise;\n\n\t\t\t// The ctor of ClipboardItem allows you to pass in a promise that will resolve to a string.\n\t\t\t// This allows us to pass in a Promise that will either be cancelled by another event or\n\t\t\t// resolved with the contents of the first call to this.writeText.\n\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/ClipboardItem#parameters\n\t\t\tgetActiveWindow().navigator.clipboard.write([new ClipboardItem({\n\t\t\t\t'text/plain': currentWritePromise.p,\n\t\t\t})]).catch(async err => {\n\t\t\t\tif (!(err instanceof Error) || err.name !== 'NotAllowedError' || !currentWritePromise.isRejected) {\n\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tthis._register(Event.runAndSubscribe(this.layoutService.onDidAddContainer, ({ container, disposables }) => {\n\t\t\tdisposables.add(addDisposableListener(container, 'click', handler));\n\t\t\tdisposables.add(addDisposableListener(container, 'keydown', handler));\n\t\t}, { container: this.layoutService.mainContainer, disposables: this._store }));\n\t}\n\n\tprivate readonly mapTextToType = new Map<string, string>(); // unsupported in web (only in-memory)\n\n\tasync writeText(text: string, type?: string): Promise<void> {\n\n\t\t// Clear resources given we are writing text\n\t\tthis.clearResourcesState();\n\n\t\t// With type: only in-memory is supported\n\t\tif (type) {\n\t\t\tthis.mapTextToType.set(type, text);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.webKitPendingClipboardWritePromise) {\n\t\t\t// For Safari, we complete this Promise which allows the call to `navigator.clipboard.write()`\n\t\t\t// above to resolve and successfully copy to the clipboard. If we let this continue, Safari\n\t\t\t// would throw an error because this call stack doesn't appear to originate from a user gesture.\n\t\t\treturn this.webKitPendingClipboardWritePromise.complete(text);\n\t\t}\n\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\treturn await getActiveWindow().navigator.clipboard.writeText(text);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\n\t\t// Fallback to textarea and execCommand solution\n\t\tthis.fallbackWriteText(text);\n\t}\n\n\tprivate fallbackWriteText(text: string): void {\n\t\tconst activeDocument = getActiveDocument();\n\t\tconst activeElement = activeDocument.activeElement;\n\n\t\tconst textArea: HTMLTextAreaElement = activeDocument.body.appendChild($('textarea', { 'aria-hidden': true }));\n\t\ttextArea.style.height = '1px';\n\t\ttextArea.style.width = '1px';\n\t\ttextArea.style.position = 'absolute';\n\n\t\ttextArea.value = text;\n\t\ttextArea.focus();\n\t\ttextArea.select();\n\n\t\tactiveDocument.execCommand('copy');\n\n\t\tif (isHTMLElement(activeElement)) {\n\t\t\tactiveElement.focus();\n\t\t}\n\n\t\ttextArea.remove();\n\t}\n\n\tasync readText(type?: string): Promise<string> {\n\n\t\t// With type: only in-memory is supported\n\t\tif (type) {\n\t\t\treturn this.mapTextToType.get(type) || '';\n\t\t}\n\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\treturn await getActiveWindow().navigator.clipboard.readText();\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tprivate findText = ''; // unsupported in web (only in-memory)\n\n\tasync readFindText(): Promise<string> {\n\t\treturn this.findText;\n\t}\n\n\tasync writeFindText(text: string): Promise<void> {\n\t\tthis.findText = text;\n\t}\n\n\tprivate resources: URI[] = []; // unsupported in web (only in-memory)\n\tprivate resourcesStateHash: number | undefined = undefined;\n\n\tprivate static readonly MAX_RESOURCE_STATE_SOURCE_LENGTH = 1000;\n\n\tasync writeResources(resources: URI[]): Promise<void> {\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\tawait getActiveWindow().navigator.clipboard.write([\n\t\t\t\tnew ClipboardItem({\n\t\t\t\t\t[`web ${vscodeResourcesMime}`]: new Blob([\n\t\t\t\t\t\tJSON.stringify(resources.map(x => x.toJSON()))\n\t\t\t\t\t], {\n\t\t\t\t\t\ttype: vscodeResourcesMime\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t]);\n\n\t\t\t// Continue to write to the in-memory clipboard as well.\n\t\t\t// This is needed because some browsers allow the paste but then can't read the custom resources.\n\t\t} catch (error) {\n\t\t\t// Noop\n\t\t}\n\n\t\tif (resources.length === 0) {\n\t\t\tthis.clearResourcesState();\n\t\t} else {\n\t\t\tthis.resources = resources;\n\t\t\tthis.resourcesStateHash = await this.computeResourcesStateHash();\n\t\t}\n\t}\n\n\tasync readResources(): Promise<URI[]> {\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\tconst items = await getActiveWindow().navigator.clipboard.read();\n\t\t\tfor (const item of items) {\n\t\t\t\tif (item.types.includes(`web ${vscodeResourcesMime}`)) {\n\t\t\t\t\tconst blob = await item.getType(`web ${vscodeResourcesMime}`);\n\t\t\t\t\tconst resources = (JSON.parse(await blob.text()) as URI[]).map(x => URI.from(x));\n\t\t\t\t\treturn resources;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Noop\n\t\t}\n\n\t\tconst resourcesStateHash = await this.computeResourcesStateHash();\n\t\tif (this.resourcesStateHash !== resourcesStateHash) {\n\t\t\tthis.clearResourcesState(); // state mismatch, resources no longer valid\n\t\t}\n\n\t\treturn this.resources;\n\t}\n\n\tprivate async computeResourcesStateHash(): Promise<number | undefined> {\n\t\tif (this.resources.length === 0) {\n\t\t\treturn undefined; // no resources, no hash needed\n\t\t}\n\n\t\t// Resources clipboard is managed in-memory only and thus\n\t\t// fails to invalidate when clipboard data is changing.\n\t\t// As such, we compute the hash of the current clipboard\n\t\t// and use that to later validate the resources clipboard.\n\n\t\tconst clipboardText = await this.readText();\n\t\treturn hash(clipboardText.substring(0, BrowserClipboardService.MAX_RESOURCE_STATE_SOURCE_LENGTH));\n\t}\n\n\tasync hasResources(): Promise<boolean> {\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\tconst items = await getActiveWindow().navigator.clipboard.read();\n\t\t\tfor (const item of items) {\n\t\t\t\tif (item.types.includes(`web ${vscodeResourcesMime}`)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Noop\n\t\t}\n\n\t\treturn this.resources.length > 0;\n\t}\n\n\tpublic clearInternalState(): void {\n\t\tthis.clearResourcesState();\n\t}\n\n\tprivate clearResourcesState(): void {\n\t\tthis.resources = [];\n\t\tthis.resourcesStateHash = undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
