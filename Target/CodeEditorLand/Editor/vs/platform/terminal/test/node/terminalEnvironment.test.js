import{deepStrictEqual as h,ok as u,strictEqual as d}from"assert";import{homedir as v,userInfo as C}from"os";import{isWindows as O}from"../../../../base/common/platform.js";import{ensureNoDisposablesAreLeakedInTestSuite as E}from"../../../../base/test/common/utils.js";import{NullLogService as y}from"../../../log/common/log.js";import"../../../product/common/productService.js";import"../../common/terminal.js";import{getShellIntegrationInjection as e,getWindowsBuildNumber as x}from"../../node/terminalEnvironment.js";const i={shellIntegration:{enabled:!0,suggestEnabled:!1,nonce:""},windowsEnableConpty:!0,windowsUseConptyDll:!1,environmentVariableCollections:void 0,workspaceFolder:void 0},g={shellIntegration:{enabled:!1,suggestEnabled:!1,nonce:""},windowsEnableConpty:!0,windowsUseConptyDll:!1,environmentVariableCollections:void 0,workspaceFolder:void 0},z={shellIntegration:{enabled:!0,suggestEnabled:!1,nonce:""},windowsEnableConpty:!1,windowsUseConptyDll:!1,environmentVariableCollections:void 0,workspaceFolder:void 0},r=process.platform==="win32"?"pwsh.exe":"pwsh",w=process.platform==="win32"?process.cwd()[0].toLowerCase()+process.cwd().substring(1):process.cwd(),n=new y,s={applicationName:"vscode"},t={};function c(a,l){a?.envMixin&&delete a.envMixin.VSCODE_STABLE,h(a,l)}suite("platform - terminalEnvironment",()=>{E(),suite("getShellIntegrationInjection",()=>{suite("should not enable",()=>{(x()<18309?test.skip:test)("when isFeatureTerminal or when no executable is provided",()=>{u(!e({executable:r,args:["-l","-NoLogo"],isFeatureTerminal:!0},i,t,n,s)),u(e({executable:r,args:["-l","-NoLogo"],isFeatureTerminal:!1},i,t,n,s))}),O&&test("when on windows with conpty false",()=>{u(!e({executable:r,args:["-l"],isFeatureTerminal:!1},z,t,n,s))})}),(x()<18309?suite.skip:suite)("pwsh",()=>{const a=process.platform==="win32"?`try { . "${w}\\out\\vs\\workbench\\contrib\\terminal\\common\\scripts\\shellIntegration.ps1" } catch {}`:`. "${w}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration.ps1"`;suite("should override args",()=>{const l=Object.freeze({newArgs:["-noexit","-command",a],envMixin:{VSCODE_INJECTION:"1"}});test("when undefined, []",()=>{c(e({executable:r,args:[]},i,t,n,s),l),c(e({executable:r,args:void 0},i,t,n,s),l)}),suite("when no logo",()=>{test("array - case insensitive",()=>{c(e({executable:r,args:["-NoLogo"]},i,t,n,s),l),c(e({executable:r,args:["-NOLOGO"]},i,t,n,s),l),c(e({executable:r,args:["-nol"]},i,t,n,s),l),c(e({executable:r,args:["-NOL"]},i,t,n,s),l)}),test("string - case insensitive",()=>{c(e({executable:r,args:"-NoLogo"},i,t,n,s),l),c(e({executable:r,args:"-NOLOGO"},i,t,n,s),l),c(e({executable:r,args:"-nol"},i,t,n,s),l),c(e({executable:r,args:"-NOL"},i,t,n,s),l)})})}),suite("should incorporate login arg",()=>{const l=Object.freeze({newArgs:["-l","-noexit","-command",a],envMixin:{VSCODE_INJECTION:"1"}});test("when array contains no logo and login",()=>{c(e({executable:r,args:["-l","-NoLogo"]},i,t,n,s),l)}),test("when string",()=>{c(e({executable:r,args:"-l"},i,t,n,s),l)})}),suite("should not modify args",()=>{test("when shell integration is disabled",()=>{d(e({executable:r,args:["-l"]},g,t,n,s),void 0),d(e({executable:r,args:"-l"},g,t,n,s),void 0),d(e({executable:r,args:void 0},g,t,n,s),void 0)}),test("when using unrecognized arg",()=>{d(e({executable:r,args:["-l","-NoLogo","-i"]},g,t,n,s),void 0)}),test("when using unrecognized arg (string)",()=>{d(e({executable:r,args:"-i"},g,t,n,s),void 0)})})}),process.platform!=="win32"&&(suite("zsh",()=>{suite("should override args",()=>{const a=C().username,l=new RegExp(`.+/${a}-vscode-zsh`),I="/custom/zsh/dotdir",f=[new RegExp(`.+\\/${a}-vscode-zsh\\/\\.zshrc`),new RegExp(`.+\\/${a}-vscode-zsh\\/\\.zprofile`),new RegExp(`.+\\/${a}-vscode-zsh\\/\\.zshenv`),new RegExp(`.+\\/${a}-vscode-zsh\\/\\.zlogin`)],p=[/.+\/out\/vs\/workbench\/contrib\/terminal\/common\/scripts\/shellIntegration-rc.zsh/,/.+\/out\/vs\/workbench\/contrib\/terminal\/common\/scripts\/shellIntegration-profile.zsh/,/.+\/out\/vs\/workbench\/contrib\/terminal\/common\/scripts\/shellIntegration-env.zsh/,/.+\/out\/vs\/workbench\/contrib\/terminal\/common\/scripts\/shellIntegration-login.zsh/];function b(o,m=v()){d(Object.keys(o.envMixin).length,3),u(o.envMixin.ZDOTDIR?.match(l)),d(o.envMixin.USER_ZDOTDIR,m),u(o.envMixin.VSCODE_INJECTION?.match("1")),d(o.filesToCopy?.length,4),u(o.filesToCopy[0].dest.match(f[0])),u(o.filesToCopy[1].dest.match(f[1])),u(o.filesToCopy[2].dest.match(f[2])),u(o.filesToCopy[3].dest.match(f[3])),u(o.filesToCopy[0].source.match(p[0])),u(o.filesToCopy[1].source.match(p[1])),u(o.filesToCopy[2].source.match(p[2])),u(o.filesToCopy[3].source.match(p[3]))}test("when undefined, []",()=>{const o=e({executable:"zsh",args:[]},i,t,n,s);h(o?.newArgs,["-i"]),b(o);const m=e({executable:"zsh",args:void 0},i,t,n,s);h(m?.newArgs,["-i"]),b(m)}),suite("should incorporate login arg",()=>{test("when array",()=>{const o=e({executable:"zsh",args:["-l"]},i,t,n,s);h(o?.newArgs,["-il"]),b(o)})}),suite("should not modify args",()=>{test("when shell integration is disabled",()=>{d(e({executable:"zsh",args:["-l"]},g,t,n,s),void 0),d(e({executable:"zsh",args:void 0},g,t,n,s),void 0)}),test("when using unrecognized arg",()=>{d(e({executable:"zsh",args:["-l","-fake"]},g,t,n,s),void 0)})}),suite("should incorporate global ZDOTDIR env variable",()=>{test("when custom ZDOTDIR",()=>{const o=e({executable:"zsh",args:[]},i,{...t,ZDOTDIR:I},n,s);h(o?.newArgs,["-i"]),b(o,I)}),test("when undefined",()=>{const o=e({executable:"zsh",args:[]},i,void 0,n,s);h(o?.newArgs,["-i"]),b(o)})})})}),suite("bash",()=>{suite("should override args",()=>{test("when undefined, [], empty string",()=>{const a=Object.freeze({newArgs:["--init-file",`${w}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-bash.sh`],envMixin:{VSCODE_INJECTION:"1"}});c(e({executable:"bash",args:[]},i,t,n,s),a),c(e({executable:"bash",args:""},i,t,n,s),a),c(e({executable:"bash",args:void 0},i,t,n,s),a)}),suite("should set login env variable and not modify args",()=>{const a=Object.freeze({newArgs:["--init-file",`${w}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-bash.sh`],envMixin:{VSCODE_INJECTION:"1",VSCODE_SHELL_LOGIN:"1"}});test("when array",()=>{c(e({executable:"bash",args:["-l"]},i,t,n,s),a)})}),suite("should not modify args",()=>{test("when shell integration is disabled",()=>{d(e({executable:"bash",args:["-l"]},g,t,n,s),void 0),d(e({executable:"bash",args:void 0},g,t,n,s),void 0)}),test("when custom array entry",()=>{d(e({executable:"bash",args:["-l","-i"]},g,t,n,s),void 0)})})})}))})});
