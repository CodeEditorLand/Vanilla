{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/test/node/terminalEnvironment.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, ok, strictEqual } from 'assert';\nimport { homedir, userInfo } from 'os';\nimport { isWindows } from '../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { IProductService } from '../../../product/common/productService.js';\nimport { ITerminalProcessOptions } from '../../common/terminal.js';\nimport { getShellIntegrationInjection, getWindowsBuildNumber, IShellIntegrationConfigInjection } from '../../node/terminalEnvironment.js';\n\nconst enabledProcessOptions: ITerminalProcessOptions = { shellIntegration: { enabled: true, suggestEnabled: false, nonce: '' }, windowsEnableConpty: true, windowsUseConptyDll: false, environmentVariableCollections: undefined, workspaceFolder: undefined };\nconst disabledProcessOptions: ITerminalProcessOptions = { shellIntegration: { enabled: false, suggestEnabled: false, nonce: '' }, windowsEnableConpty: true, windowsUseConptyDll: false, environmentVariableCollections: undefined, workspaceFolder: undefined };\nconst winptyProcessOptions: ITerminalProcessOptions = { shellIntegration: { enabled: true, suggestEnabled: false, nonce: '' }, windowsEnableConpty: false, windowsUseConptyDll: false, environmentVariableCollections: undefined, workspaceFolder: undefined };\nconst pwshExe = process.platform === 'win32' ? 'pwsh.exe' : 'pwsh';\nconst repoRoot = process.platform === 'win32' ? process.cwd()[0].toLowerCase() + process.cwd().substring(1) : process.cwd();\nconst logService = new NullLogService();\nconst productService = { applicationName: 'vscode' } as IProductService;\nconst defaultEnvironment = {};\n\nfunction deepStrictEqualIgnoreStableVar(actual: IShellIntegrationConfigInjection | undefined, expected: IShellIntegrationConfigInjection) {\n\tif (actual?.envMixin) {\n\t\tdelete actual.envMixin['VSCODE_STABLE'];\n\t}\n\tdeepStrictEqual(actual, expected);\n}\n\nsuite('platform - terminalEnvironment', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\tsuite('getShellIntegrationInjection', () => {\n\t\tsuite('should not enable', () => {\n\t\t\t// This test is only expected to work on Windows 10 build 18309 and above\n\t\t\t(getWindowsBuildNumber() < 18309 ? test.skip : test)('when isFeatureTerminal or when no executable is provided', () => {\n\t\t\t\tok(!getShellIntegrationInjection({ executable: pwshExe, args: ['-l', '-NoLogo'], isFeatureTerminal: true }, enabledProcessOptions, defaultEnvironment, logService, productService));\n\t\t\t\tok(getShellIntegrationInjection({ executable: pwshExe, args: ['-l', '-NoLogo'], isFeatureTerminal: false }, enabledProcessOptions, defaultEnvironment, logService, productService));\n\t\t\t});\n\t\t\tif (isWindows) {\n\t\t\t\ttest('when on windows with conpty false', () => {\n\t\t\t\t\tok(!getShellIntegrationInjection({ executable: pwshExe, args: ['-l'], isFeatureTerminal: false }, winptyProcessOptions, defaultEnvironment, logService, productService));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// These tests are only expected to work on Windows 10 build 18309 and above\n\t\t(getWindowsBuildNumber() < 18309 ? suite.skip : suite)('pwsh', () => {\n\t\t\tconst expectedPs1 = process.platform === 'win32'\n\t\t\t\t? `try { . \"${repoRoot}\\\\out\\\\vs\\\\workbench\\\\contrib\\\\terminal\\\\common\\\\scripts\\\\shellIntegration.ps1\" } catch {}`\n\t\t\t\t: `. \"${repoRoot}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration.ps1\"`;\n\t\t\tsuite('should override args', () => {\n\t\t\t\tconst enabledExpectedResult = Object.freeze<IShellIntegrationConfigInjection>({\n\t\t\t\t\tnewArgs: [\n\t\t\t\t\t\t'-noexit',\n\t\t\t\t\t\t'-command',\n\t\t\t\t\t\texpectedPs1\n\t\t\t\t\t],\n\t\t\t\t\tenvMixin: {\n\t\t\t\t\t\tVSCODE_INJECTION: '1'\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttest('when undefined, []', () => {\n\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: [] }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: undefined }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t});\n\t\t\t\tsuite('when no logo', () => {\n\t\t\t\t\ttest('array - case insensitive', () => {\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: ['-NoLogo'] }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: ['-NOLOGO'] }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: ['-nol'] }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: ['-NOL'] }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t});\n\t\t\t\t\ttest('string - case insensitive', () => {\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: '-NoLogo' }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: '-NOLOGO' }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: '-nol' }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: '-NOL' }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('should incorporate login arg', () => {\n\t\t\t\tconst enabledExpectedResult = Object.freeze<IShellIntegrationConfigInjection>({\n\t\t\t\t\tnewArgs: [\n\t\t\t\t\t\t'-l',\n\t\t\t\t\t\t'-noexit',\n\t\t\t\t\t\t'-command',\n\t\t\t\t\t\texpectedPs1\n\t\t\t\t\t],\n\t\t\t\t\tenvMixin: {\n\t\t\t\t\t\tVSCODE_INJECTION: '1'\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttest('when array contains no logo and login', () => {\n\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: ['-l', '-NoLogo'] }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t});\n\t\t\t\ttest('when string', () => {\n\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: pwshExe, args: '-l' }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('should not modify args', () => {\n\t\t\t\ttest('when shell integration is disabled', () => {\n\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: pwshExe, args: ['-l'] }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: pwshExe, args: '-l' }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: pwshExe, args: undefined }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t});\n\t\t\t\ttest('when using unrecognized arg', () => {\n\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: pwshExe, args: ['-l', '-NoLogo', '-i'] }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t});\n\t\t\t\ttest('when using unrecognized arg (string)', () => {\n\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: pwshExe, args: '-i' }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tif (process.platform !== 'win32') {\n\t\t\tsuite('zsh', () => {\n\t\t\t\tsuite('should override args', () => {\n\t\t\t\t\tconst username = userInfo().username;\n\t\t\t\t\tconst expectedDir = new RegExp(`.+\\/${username}-vscode-zsh`);\n\t\t\t\t\tconst customZdotdir = '/custom/zsh/dotdir';\n\t\t\t\t\tconst expectedDests = [\n\t\t\t\t\t\tnew RegExp(`.+\\\\/${username}-vscode-zsh\\\\/\\\\.zshrc`),\n\t\t\t\t\t\tnew RegExp(`.+\\\\/${username}-vscode-zsh\\\\/\\\\.zprofile`),\n\t\t\t\t\t\tnew RegExp(`.+\\\\/${username}-vscode-zsh\\\\/\\\\.zshenv`),\n\t\t\t\t\t\tnew RegExp(`.+\\\\/${username}-vscode-zsh\\\\/\\\\.zlogin`)\n\t\t\t\t\t];\n\t\t\t\t\tconst expectedSources = [\n\t\t\t\t\t\t/.+\\/out\\/vs\\/workbench\\/contrib\\/terminal\\/common\\/scripts\\/shellIntegration-rc.zsh/,\n\t\t\t\t\t\t/.+\\/out\\/vs\\/workbench\\/contrib\\/terminal\\/common\\/scripts\\/shellIntegration-profile.zsh/,\n\t\t\t\t\t\t/.+\\/out\\/vs\\/workbench\\/contrib\\/terminal\\/common\\/scripts\\/shellIntegration-env.zsh/,\n\t\t\t\t\t\t/.+\\/out\\/vs\\/workbench\\/contrib\\/terminal\\/common\\/scripts\\/shellIntegration-login.zsh/\n\t\t\t\t\t];\n\t\t\t\t\tfunction assertIsEnabled(result: IShellIntegrationConfigInjection, globalZdotdir = homedir()) {\n\t\t\t\t\t\tstrictEqual(Object.keys(result.envMixin!).length, 3);\n\t\t\t\t\t\tok(result.envMixin!['ZDOTDIR']?.match(expectedDir));\n\t\t\t\t\t\tstrictEqual(result.envMixin!['USER_ZDOTDIR'], globalZdotdir);\n\t\t\t\t\t\tok(result.envMixin!['VSCODE_INJECTION']?.match('1'));\n\t\t\t\t\t\tstrictEqual(result.filesToCopy?.length, 4);\n\t\t\t\t\t\tok(result.filesToCopy[0].dest.match(expectedDests[0]));\n\t\t\t\t\t\tok(result.filesToCopy[1].dest.match(expectedDests[1]));\n\t\t\t\t\t\tok(result.filesToCopy[2].dest.match(expectedDests[2]));\n\t\t\t\t\t\tok(result.filesToCopy[3].dest.match(expectedDests[3]));\n\t\t\t\t\t\tok(result.filesToCopy[0].source.match(expectedSources[0]));\n\t\t\t\t\t\tok(result.filesToCopy[1].source.match(expectedSources[1]));\n\t\t\t\t\t\tok(result.filesToCopy[2].source.match(expectedSources[2]));\n\t\t\t\t\t\tok(result.filesToCopy[3].source.match(expectedSources[3]));\n\t\t\t\t\t}\n\t\t\t\t\ttest('when undefined, []', () => {\n\t\t\t\t\t\tconst result1 = getShellIntegrationInjection({ executable: 'zsh', args: [] }, enabledProcessOptions, defaultEnvironment, logService, productService);\n\t\t\t\t\t\tdeepStrictEqual(result1?.newArgs, ['-i']);\n\t\t\t\t\t\tassertIsEnabled(result1);\n\t\t\t\t\t\tconst result2 = getShellIntegrationInjection({ executable: 'zsh', args: undefined }, enabledProcessOptions, defaultEnvironment, logService, productService);\n\t\t\t\t\t\tdeepStrictEqual(result2?.newArgs, ['-i']);\n\t\t\t\t\t\tassertIsEnabled(result2);\n\t\t\t\t\t});\n\t\t\t\t\tsuite('should incorporate login arg', () => {\n\t\t\t\t\t\ttest('when array', () => {\n\t\t\t\t\t\t\tconst result = getShellIntegrationInjection({ executable: 'zsh', args: ['-l'] }, enabledProcessOptions, defaultEnvironment, logService, productService);\n\t\t\t\t\t\t\tdeepStrictEqual(result?.newArgs, ['-il']);\n\t\t\t\t\t\t\tassertIsEnabled(result);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tsuite('should not modify args', () => {\n\t\t\t\t\t\ttest('when shell integration is disabled', () => {\n\t\t\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: 'zsh', args: ['-l'] }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: 'zsh', args: undefined }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttest('when using unrecognized arg', () => {\n\t\t\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: 'zsh', args: ['-l', '-fake'] }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tsuite('should incorporate global ZDOTDIR env variable', () => {\n\t\t\t\t\t\ttest('when custom ZDOTDIR', () => {\n\t\t\t\t\t\t\tconst result1 = getShellIntegrationInjection({ executable: 'zsh', args: [] }, enabledProcessOptions, { ...defaultEnvironment, ZDOTDIR: customZdotdir }, logService, productService);\n\t\t\t\t\t\t\tdeepStrictEqual(result1?.newArgs, ['-i']);\n\t\t\t\t\t\t\tassertIsEnabled(result1, customZdotdir);\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttest('when undefined', () => {\n\t\t\t\t\t\t\tconst result1 = getShellIntegrationInjection({ executable: 'zsh', args: [] }, enabledProcessOptions, undefined, logService, productService);\n\t\t\t\t\t\t\tdeepStrictEqual(result1?.newArgs, ['-i']);\n\t\t\t\t\t\t\tassertIsEnabled(result1);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('bash', () => {\n\t\t\t\tsuite('should override args', () => {\n\t\t\t\t\ttest('when undefined, [], empty string', () => {\n\t\t\t\t\t\tconst enabledExpectedResult = Object.freeze<IShellIntegrationConfigInjection>({\n\t\t\t\t\t\t\tnewArgs: [\n\t\t\t\t\t\t\t\t'--init-file',\n\t\t\t\t\t\t\t\t`${repoRoot}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-bash.sh`\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tenvMixin: {\n\t\t\t\t\t\t\t\tVSCODE_INJECTION: '1'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: 'bash', args: [] }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: 'bash', args: '' }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: 'bash', args: undefined }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t});\n\t\t\t\t\tsuite('should set login env variable and not modify args', () => {\n\t\t\t\t\t\tconst enabledExpectedResult = Object.freeze<IShellIntegrationConfigInjection>({\n\t\t\t\t\t\t\tnewArgs: [\n\t\t\t\t\t\t\t\t'--init-file',\n\t\t\t\t\t\t\t\t`${repoRoot}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-bash.sh`\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tenvMixin: {\n\t\t\t\t\t\t\t\tVSCODE_INJECTION: '1',\n\t\t\t\t\t\t\t\tVSCODE_SHELL_LOGIN: '1'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttest('when array', () => {\n\t\t\t\t\t\t\tdeepStrictEqualIgnoreStableVar(getShellIntegrationInjection({ executable: 'bash', args: ['-l'] }, enabledProcessOptions, defaultEnvironment, logService, productService), enabledExpectedResult);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tsuite('should not modify args', () => {\n\t\t\t\t\t\ttest('when shell integration is disabled', () => {\n\t\t\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: 'bash', args: ['-l'] }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: 'bash', args: undefined }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttest('when custom array entry', () => {\n\t\t\t\t\t\t\tstrictEqual(getShellIntegrationInjection({ executable: 'bash', args: ['-l', '-i'] }, disabledProcessOptions, defaultEnvironment, logService, productService), undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
