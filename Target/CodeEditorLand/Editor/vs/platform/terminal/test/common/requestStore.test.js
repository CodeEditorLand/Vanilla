import{fail as c,strictEqual as o}from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as d}from"../../../../base/test/common/utils.js";import{TestInstantiationService as g}from"../../../instantiation/test/common/instantiationServiceMock.js";import{ConsoleLogger as q,ILogService as m}from"../../../log/common/log.js";import{LogService as f}from"../../../log/common/logService.js";import{RequestStore as i}from"../../common/requestStore.js";suite("RequestStore",()=>{let t;setup(()=>{t=new g,t.stub(m,new f(new q))});const a=d();test("should resolve requests",async()=>{const r=a.add(t.createInstance(i,void 0));let e;a.add(r.onCreateRequest(u=>e=u));const s=r.createRequest({arg:"foo"});o(typeof e?.requestId,"number"),o(e?.arg,"foo"),r.acceptReply(e.requestId,{data:"bar"});const n=await s;o(n.data,"bar")}),test("should reject the promise when the request times out",async()=>{const e=a.add(t.createInstance(i,1)).createRequest({arg:"foo"});let s=!1;try{await e}catch{s=!0}s||c()})});
