{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/test/common/requestStore.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { fail, strictEqual } from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { TestInstantiationService } from '../../../instantiation/test/common/instantiationServiceMock.js';\nimport { ConsoleLogger, ILogService } from '../../../log/common/log.js';\nimport { LogService } from '../../../log/common/logService.js';\nimport { RequestStore } from '../../common/requestStore.js';\n\nsuite('RequestStore', () => {\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(ILogService, new LogService(new ConsoleLogger()));\n\t});\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should resolve requests', async () => {\n\t\tconst requestStore: RequestStore<{ data: string }, { arg: string }> = store.add(instantiationService.createInstance(RequestStore<{ data: string }, { arg: string }>, undefined));\n\t\tlet eventArgs: { requestId: number; arg: string } | undefined;\n\t\tstore.add(requestStore.onCreateRequest(e => eventArgs = e));\n\t\tconst request = requestStore.createRequest({ arg: 'foo' });\n\t\tstrictEqual(typeof eventArgs?.requestId, 'number');\n\t\tstrictEqual(eventArgs?.arg, 'foo');\n\t\trequestStore.acceptReply(eventArgs.requestId, { data: 'bar' });\n\t\tconst result = await request;\n\t\tstrictEqual(result.data, 'bar');\n\t});\n\n\ttest('should reject the promise when the request times out', async () => {\n\t\tconst requestStore: RequestStore<{ data: string }, { arg: string }> = store.add(instantiationService.createInstance(RequestStore<{ data: string }, { arg: string }>, 1));\n\t\tconst request = requestStore.createRequest({ arg: 'foo' });\n\t\tlet threw = false;\n\t\ttry {\n\t\t\tawait request;\n\t\t} catch (e) {\n\t\t\tthrew = true;\n\t\t}\n\t\tif (!threw) {\n\t\t\tfail();\n\t\t}\n\t});\n});\n"],
  "mappings": "AAKA,SAAS,MAAM,mBAAmB;AAClC,SAAS,+CAA+C;AACxD,SAAS,gCAAgC;AACzC,SAAS,eAAe,mBAAmB;AAC3C,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;AAE7B,MAAM,gBAAgB,MAAM;AAC3B,MAAI;AAEJ,QAAM,MAAM;AACX,2BAAuB,IAAI,yBAAyB;AACpD,yBAAqB,KAAK,aAAa,IAAI,WAAW,IAAI,cAAc,CAAC,CAAC;AAAA,EAC3E,CAAC;AAED,QAAM,QAAQ,wCAAwC;AAEtD,OAAK,2BAA2B,YAAY;AAC3C,UAAM,eAAgE,MAAM,IAAI,qBAAqB,eAAe,cAAiD,MAAS,CAAC;AAC/K,QAAI;AACJ,UAAM,IAAI,aAAa,gBAAgB,OAAK,YAAY,CAAC,CAAC;AAC1D,UAAM,UAAU,aAAa,cAAc,EAAE,KAAK,MAAM,CAAC;AACzD,gBAAY,OAAO,WAAW,WAAW,QAAQ;AACjD,gBAAY,WAAW,KAAK,KAAK;AACjC,iBAAa,YAAY,UAAU,WAAW,EAAE,MAAM,MAAM,CAAC;AAC7D,UAAM,SAAS,MAAM;AACrB,gBAAY,OAAO,MAAM,KAAK;AAAA,EAC/B,CAAC;AAED,OAAK,wDAAwD,YAAY;AACxE,UAAM,eAAgE,MAAM,IAAI,qBAAqB,eAAe,cAAiD,CAAC,CAAC;AACvK,UAAM,UAAU,aAAa,cAAc,EAAE,KAAK,MAAM,CAAC;AACzD,QAAI,QAAQ;AACZ,QAAI;AACH,YAAM;AAAA,IACP,SAAS,GAAG;AACX,cAAQ;AAAA,IACT;AACA,QAAI,CAAC,OAAO;AACX,WAAK;AAAA,IACN;AAAA,EACD,CAAC;AACF,CAAC;",
  "names": []
}
