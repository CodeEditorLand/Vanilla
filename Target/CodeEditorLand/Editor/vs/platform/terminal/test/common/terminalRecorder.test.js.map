{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/test/common/terminalRecorder.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ReplayEntry } from '../../common/terminalProcess.js';\nimport { TerminalRecorder } from '../../common/terminalRecorder.js';\n\nasync function eventsEqual(recorder: TerminalRecorder, expected: ReplayEntry[]) {\n\tconst actual = (await recorder.generateReplayEvent()).events;\n\tfor (let i = 0; i < expected.length; i++) {\n\t\tassert.deepStrictEqual(actual[i], expected[i]);\n\t}\n}\n\nsuite('TerminalRecorder', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should record dimensions', async () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: '' }\n\t\t]);\n\t\trecorder.handleData('a');\n\t\trecorder.handleResize(3, 4);\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: 'a' },\n\t\t\t{ cols: 3, rows: 4, data: '' }\n\t\t]);\n\t});\n\ttest('should ignore resize events without data', async () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: '' }\n\t\t]);\n\t\trecorder.handleResize(3, 4);\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 3, rows: 4, data: '' }\n\t\t]);\n\t});\n\ttest('should record data and combine it into the previous resize event', async () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\trecorder.handleData('a');\n\t\trecorder.handleData('b');\n\t\trecorder.handleResize(3, 4);\n\t\trecorder.handleData('c');\n\t\trecorder.handleData('d');\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: 'ab' },\n\t\t\t{ cols: 3, rows: 4, data: 'cd' }\n\t\t]);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,mBAAmB;AAC5B,SAAS,wBAAwB;AAEjC,eAAe,YAAY,UAA4B,UAAyB;AAC/E,QAAM,UAAU,MAAM,SAAS,oBAAoB,GAAG;AACtD,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACzC,WAAO,gBAAgB,OAAO,CAAC,GAAG,SAAS,CAAC,CAAC;AAAA,EAC9C;AACD;AALe;AAOf,MAAM,oBAAoB,MAAM;AAC/B,0CAAwC;AAExC,OAAK,4BAA4B,YAAY;AAC5C,UAAM,WAAW,IAAI,iBAAiB,GAAG,CAAC;AAC1C,UAAM,YAAY,UAAU;AAAA,MAC3B,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG;AAAA,IAC9B,CAAC;AACD,aAAS,WAAW,GAAG;AACvB,aAAS,aAAa,GAAG,CAAC;AAC1B,UAAM,YAAY,UAAU;AAAA,MAC3B,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,IAAI;AAAA,MAC9B,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG;AAAA,IAC9B,CAAC;AAAA,EACF,CAAC;AACD,OAAK,4CAA4C,YAAY;AAC5D,UAAM,WAAW,IAAI,iBAAiB,GAAG,CAAC;AAC1C,UAAM,YAAY,UAAU;AAAA,MAC3B,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG;AAAA,IAC9B,CAAC;AACD,aAAS,aAAa,GAAG,CAAC;AAC1B,UAAM,YAAY,UAAU;AAAA,MAC3B,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG;AAAA,IAC9B,CAAC;AAAA,EACF,CAAC;AACD,OAAK,oEAAoE,YAAY;AACpF,UAAM,WAAW,IAAI,iBAAiB,GAAG,CAAC;AAC1C,aAAS,WAAW,GAAG;AACvB,aAAS,WAAW,GAAG;AACvB,aAAS,aAAa,GAAG,CAAC;AAC1B,aAAS,WAAW,GAAG;AACvB,aAAS,WAAW,GAAG;AACvB,UAAM,YAAY,UAAU;AAAA,MAC3B,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,KAAK;AAAA,MAC/B,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,KAAK;AAAA,IAChC,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
