{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/test/common/terminalEnvironment.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { strictEqual } from 'assert';\nimport { OperatingSystem, OS } from '../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { collapseTildePath, sanitizeCwd } from '../../common/terminalEnvironment.js';\n\nsuite('terminalEnvironment', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('collapseTildePath', () => {\n\t\ttest('should return empty string for a falsy path', () => {\n\t\t\tstrictEqual(collapseTildePath('', '/foo', '/'), '');\n\t\t\tstrictEqual(collapseTildePath(undefined, '/foo', '/'), '');\n\t\t});\n\t\ttest('should return path for a falsy user home', () => {\n\t\t\tstrictEqual(collapseTildePath('/foo', '', '/'), '/foo');\n\t\t\tstrictEqual(collapseTildePath('/foo', undefined, '/'), '/foo');\n\t\t});\n\t\ttest('should not collapse when user home isn\\'t present', () => {\n\t\t\tstrictEqual(collapseTildePath('/foo', '/bar', '/'), '/foo');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo', 'C:\\\\bar', '\\\\'), 'C:\\\\foo');\n\t\t});\n\t\ttest('should collapse with Windows separators', () => {\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar', 'C:\\\\foo', '\\\\'), '~\\\\bar');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar', 'C:\\\\foo\\\\', '\\\\'), '~\\\\bar');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar\\\\baz', 'C:\\\\foo\\\\', '\\\\'), '~\\\\bar\\\\baz');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar\\\\baz', 'C:\\\\foo', '\\\\'), '~\\\\bar\\\\baz');\n\t\t});\n\t\ttest('should collapse mixed case with Windows separators', () => {\n\t\t\tstrictEqual(collapseTildePath('c:\\\\foo\\\\bar', 'C:\\\\foo', '\\\\'), '~\\\\bar');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar\\\\baz', 'c:\\\\foo', '\\\\'), '~\\\\bar\\\\baz');\n\t\t});\n\t\ttest('should collapse with Posix separators', () => {\n\t\t\tstrictEqual(collapseTildePath('/foo/bar', '/foo', '/'), '~/bar');\n\t\t\tstrictEqual(collapseTildePath('/foo/bar', '/foo/', '/'), '~/bar');\n\t\t\tstrictEqual(collapseTildePath('/foo/bar/baz', '/foo', '/'), '~/bar/baz');\n\t\t\tstrictEqual(collapseTildePath('/foo/bar/baz', '/foo/', '/'), '~/bar/baz');\n\t\t});\n\t});\n\tsuite('sanitizeCwd', () => {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\ttest('should make the Windows drive letter uppercase', () => {\n\t\t\t\tstrictEqual(sanitizeCwd('c:\\\\foo\\\\bar'), 'C:\\\\foo\\\\bar');\n\t\t\t});\n\t\t}\n\t\ttest('should remove any wrapping quotes', () => {\n\t\t\tstrictEqual(sanitizeCwd('\\'/foo/bar\\''), '/foo/bar');\n\t\t\tstrictEqual(sanitizeCwd('\"/foo/bar\"'), '/foo/bar');\n\t\t});\n\t});\n});\n"],
  "mappings": "AAKA,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB,UAAU;AACpC,SAAS,+CAA+C;AACxD,SAAS,mBAAmB,mBAAmB;AAE/C,MAAM,uBAAuB,MAAM;AAClC,0CAAwC;AAExC,QAAM,qBAAqB,MAAM;AAChC,SAAK,+CAA+C,MAAM;AACzD,kBAAY,kBAAkB,IAAI,QAAQ,GAAG,GAAG,EAAE;AAClD,kBAAY,kBAAkB,QAAW,QAAQ,GAAG,GAAG,EAAE;AAAA,IAC1D,CAAC;AACD,SAAK,4CAA4C,MAAM;AACtD,kBAAY,kBAAkB,QAAQ,IAAI,GAAG,GAAG,MAAM;AACtD,kBAAY,kBAAkB,QAAQ,QAAW,GAAG,GAAG,MAAM;AAAA,IAC9D,CAAC;AACD,SAAK,oDAAqD,MAAM;AAC/D,kBAAY,kBAAkB,QAAQ,QAAQ,GAAG,GAAG,MAAM;AAC1D,kBAAY,kBAAkB,WAAW,WAAW,IAAI,GAAG,SAAS;AAAA,IACrE,CAAC;AACD,SAAK,2CAA2C,MAAM;AACrD,kBAAY,kBAAkB,gBAAgB,WAAW,IAAI,GAAG,QAAQ;AACxE,kBAAY,kBAAkB,gBAAgB,aAAa,IAAI,GAAG,QAAQ;AAC1E,kBAAY,kBAAkB,qBAAqB,aAAa,IAAI,GAAG,aAAa;AACpF,kBAAY,kBAAkB,qBAAqB,WAAW,IAAI,GAAG,aAAa;AAAA,IACnF,CAAC;AACD,SAAK,sDAAsD,MAAM;AAChE,kBAAY,kBAAkB,gBAAgB,WAAW,IAAI,GAAG,QAAQ;AACxE,kBAAY,kBAAkB,qBAAqB,WAAW,IAAI,GAAG,aAAa;AAAA,IACnF,CAAC;AACD,SAAK,yCAAyC,MAAM;AACnD,kBAAY,kBAAkB,YAAY,QAAQ,GAAG,GAAG,OAAO;AAC/D,kBAAY,kBAAkB,YAAY,SAAS,GAAG,GAAG,OAAO;AAChE,kBAAY,kBAAkB,gBAAgB,QAAQ,GAAG,GAAG,WAAW;AACvE,kBAAY,kBAAkB,gBAAgB,SAAS,GAAG,GAAG,WAAW;AAAA,IACzE,CAAC;AAAA,EACF,CAAC;AACD,QAAM,eAAe,MAAM;AAC1B,QAAI,OAAO,gBAAgB,SAAS;AACnC,WAAK,kDAAkD,MAAM;AAC5D,oBAAY,YAAY,cAAc,GAAG,cAAc;AAAA,MACxD,CAAC;AAAA,IACF;AACA,SAAK,qCAAqC,MAAM;AAC/C,kBAAY,YAAY,YAAc,GAAG,UAAU;AACnD,kBAAY,YAAY,YAAY,GAAG,UAAU;AAAA,IAClD,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
