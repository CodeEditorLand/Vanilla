import n from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as d}from"../../../../base/test/common/utils.js";import"../../common/terminalProcess.js";import{TerminalRecorder as r}from"../../common/terminalRecorder.js";async function a(e,o){const s=(await e.generateReplayEvent()).events;for(let t=0;t<o.length;t++)n.deepStrictEqual(s[t],o[t])}suite("TerminalRecorder",()=>{d(),test("should record dimensions",async()=>{const e=new r(1,2);await a(e,[{cols:1,rows:2,data:""}]),e.handleData("a"),e.handleResize(3,4),await a(e,[{cols:1,rows:2,data:"a"},{cols:3,rows:4,data:""}])}),test("should ignore resize events without data",async()=>{const e=new r(1,2);await a(e,[{cols:1,rows:2,data:""}]),e.handleResize(3,4),await a(e,[{cols:3,rows:4,data:""}])}),test("should record data and combine it into the previous resize event",async()=>{const e=new r(1,2);e.handleData("a"),e.handleData("b"),e.handleResize(3,4),e.handleData("c"),e.handleData("d"),await a(e,[{cols:1,rows:2,data:"ab"},{cols:3,rows:4,data:"cd"}])})});
