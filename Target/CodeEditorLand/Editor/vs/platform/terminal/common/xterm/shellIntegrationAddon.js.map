{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/common/xterm/shellIntegrationAddon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IShellIntegration, ShellIntegrationStatus } from '../terminal.js';\nimport { Disposable, dispose, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { TerminalCapabilityStore } from '../capabilities/terminalCapabilityStore.js';\nimport { CommandDetectionCapability } from '../capabilities/commandDetectionCapability.js';\nimport { CwdDetectionCapability } from '../capabilities/cwdDetectionCapability.js';\nimport { IBufferMarkCapability, ICommandDetectionCapability, ICwdDetectionCapability, ISerializedCommandDetectionCapability, TerminalCapability } from '../capabilities/capabilities.js';\nimport { PartialCommandDetectionCapability } from '../capabilities/partialCommandDetectionCapability.js';\nimport { ILogService } from '../../../log/common/log.js';\nimport { ITelemetryService } from '../../../telemetry/common/telemetry.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { BufferMarkCapability } from '../capabilities/bufferMarkCapability.js';\nimport type { ITerminalAddon, Terminal } from '@xterm/headless';\nimport { URI } from '../../../../base/common/uri.js';\nimport { sanitizeCwd } from '../terminalEnvironment.js';\nimport { removeAnsiEscapeCodesFromPrompt } from '../../../../base/common/strings.js';\n\n\n/**\n * Shell integration is a feature that enhances the terminal's understanding of what's happening\n * in the shell by injecting special sequences into the shell's prompt using the \"Set Text\n * Parameters\" sequence (`OSC Ps ; Pt ST`).\n *\n * Definitions:\n * - OSC: `\\x1b]`\n * - Ps:  A single (usually optional) numeric parameter, composed of one or more digits.\n * - Pt:  A text parameter composed of printable characters.\n * - ST: `\\x7`\n *\n * This is inspired by a feature of the same name in the FinalTerm, iTerm2 and kitty terminals.\n */\n\n/**\n * The identifier for the first numeric parameter (`Ps`) for OSC commands used by shell integration.\n */\nexport const enum ShellIntegrationOscPs {\n\t/**\n\t * Sequences pioneered by FinalTerm.\n\t */\n\tFinalTerm = 133,\n\t/**\n\t * Sequences pioneered by VS Code. The number is derived from the least significant digit of\n\t * \"VSC\" when encoded in hex (\"VSC\" = 0x56, 0x53, 0x43).\n\t */\n\tVSCode = 633,\n\t/**\n\t * Sequences pioneered by iTerm.\n\t */\n\tITerm = 1337,\n\tSetCwd = 7,\n\tSetWindowsFriendlyCwd = 9\n}\n\n/**\n * Sequences pioneered by FinalTerm.\n */\nconst enum FinalTermOscPt {\n\t/**\n\t * The start of the prompt, this is expected to always appear at the start of a line.\n\t *\n\t * Format: `OSC 133 ; A ST`\n\t */\n\tPromptStart = 'A',\n\n\t/**\n\t * The start of a command, ie. where the user inputs their command.\n\t *\n\t * Format: `OSC 133 ; B ST`\n\t */\n\tCommandStart = 'B',\n\n\t/**\n\t * Sent just before the command output begins.\n\t *\n\t * Format: `OSC 133 ; C ST`\n\t */\n\tCommandExecuted = 'C',\n\n\t/**\n\t * Sent just after a command has finished. The exit code is optional, when not specified it\n\t * means no command was run (ie. enter on empty prompt or ctrl+c).\n\t *\n\t * Format: `OSC 133 ; D [; <ExitCode>] ST`\n\t */\n\tCommandFinished = 'D',\n}\n\n/**\n * VS Code-specific shell integration sequences. Some of these are based on more common alternatives\n * like those pioneered in {@link FinalTermOscPt FinalTerm}. The decision to move to entirely custom\n * sequences was to try to improve reliability and prevent the possibility of applications confusing\n * the terminal. If multiple shell integration scripts run, VS Code will prioritize the VS\n * Code-specific ones.\n *\n * It's recommended that authors of shell integration scripts use the common sequences (`133`)\n * when building general purpose scripts and the VS Code-specific (`633`) when targeting only VS\n * Code or when there are no other alternatives (eg. {@link CommandLine `633 ; E`}). These sequences\n * support mix-and-matching.\n */\nconst enum VSCodeOscPt {\n\t/**\n\t * The start of the prompt, this is expected to always appear at the start of a line.\n\t *\n\t * Format: `OSC 633 ; A ST`\n\t *\n\t * Based on {@link FinalTermOscPt.PromptStart}.\n\t */\n\tPromptStart = 'A',\n\n\t/**\n\t * The start of a command, ie. where the user inputs their command.\n\t *\n\t * Format: `OSC 633 ; B ST`\n\t *\n\t * Based on  {@link FinalTermOscPt.CommandStart}.\n\t */\n\tCommandStart = 'B',\n\n\t/**\n\t * Sent just before the command output begins.\n\t *\n\t * Format: `OSC 633 ; C ST`\n\t *\n\t * Based on {@link FinalTermOscPt.CommandExecuted}.\n\t */\n\tCommandExecuted = 'C',\n\n\t/**\n\t * Sent just after a command has finished. The exit code is optional, when not specified it\n\t * means no command was run (ie. enter on empty prompt or ctrl+c).\n\t *\n\t * Format: `OSC 633 ; D [; <ExitCode>] ST`\n\t *\n\t * Based on {@link FinalTermOscPt.CommandFinished}.\n\t */\n\tCommandFinished = 'D',\n\n\t/**\n\t * Explicitly set the command line. This helps workaround performance and reliability problems\n\t * with parsing out the command, such as conpty not guaranteeing the position of the sequence or\n\t * the shell not guaranteeing that the entire command is even visible. Ideally this is called\n\t * immediately before {@link CommandExecuted}, immediately before {@link CommandFinished} will\n\t * also work but that means terminal will only know the accurate command line when the command is\n\t * finished.\n\t *\n\t * The command line can escape ascii characters using the `\\xAB` format, where AB are the\n\t * hexadecimal representation of the character code (case insensitive), and escape the `\\`\n\t * character using `\\\\`. It's required to escape semi-colon (`0x3b`) and characters 0x20 and\n\t * below, this is particularly important for new line and semi-colon.\n\t *\n\t * Some examples:\n\t *\n\t * ```\n\t * \"\\\"  -> \"\\\\\"\n\t * \"\\n\" -> \"\\x0a\"\n\t * \";\"  -> \"\\x3b\"\n\t * ```\n\t *\n\t * An optional nonce can be provided which is may be required by the terminal in order enable\n\t * some features. This helps ensure no malicious command injection has occurred.\n\t *\n\t * Format: `OSC 633 ; E [; <CommandLine> [; <Nonce>]] ST`\n\t */\n\tCommandLine = 'E',\n\n\t/**\n\t * Similar to prompt start but for line continuations.\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tContinuationStart = 'F',\n\n\t/**\n\t * Similar to command start but for line continuations.\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tContinuationEnd = 'G',\n\n\t/**\n\t * The start of the right prompt.\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tRightPromptStart = 'H',\n\n\t/**\n\t * The end of the right prompt.\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tRightPromptEnd = 'I',\n\n\t/**\n\t * Set the value of an arbitrary property, only known properties will be handled by VS Code.\n\t *\n\t * Format: `OSC 633 ; P ; <Property>=<Value> ST`\n\t *\n\t * Known properties:\n\t *\n\t * - `Cwd` - Reports the current working directory to the terminal.\n\t * - `IsWindows` - Indicates whether the terminal is using a Windows backend like winpty or\n\t *   conpty. This may be used to enable additional heuristics as the positioning of the shell\n\t *   integration sequences are not guaranteed to be correct. Valid values: `True`, `False`.\n\t * - `ContinuationPrompt` - Reports the continuation prompt that is printed at the start of\n\t *   multi-line inputs.\n\t *\n\t * WARNING: Any other properties may be changed and are not guaranteed to work in the future.\n\t */\n\tProperty = 'P',\n\n\t/**\n\t * Sets a mark/point-of-interest in the buffer.\n\t *\n\t * Format: `OSC 633 ; SetMark [; Id=<string>] [; Hidden]`\n\t *\n\t * `Id` - The identifier of the mark that can be used to reference it\n\t * `Hidden` - When set, the mark will be available to reference internally but will not visible\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tSetMark = 'SetMark',\n}\n\n/**\n * ITerm sequences\n */\nconst enum ITermOscPt {\n\t/**\n\t * Sets a mark/point-of-interest in the buffer.\n\t *\n\t * Format: `OSC 1337 ; SetMark`\n\t */\n\tSetMark = 'SetMark',\n\n\t/**\n\t * Reports current working directory (CWD).\n\t *\n\t * Format: `OSC 1337 ; CurrentDir=<Cwd> ST`\n\t */\n\tCurrentDir = 'CurrentDir'\n}\n\n/**\n * The shell integration addon extends xterm by reading shell integration sequences and creating\n * capabilities and passing along relevant sequences to the capabilities. This is meant to\n * encapsulate all handling/parsing of sequences so the capabilities don't need to.\n */\nexport class ShellIntegrationAddon extends Disposable implements IShellIntegration, ITerminalAddon {\n\tprivate _terminal?: Terminal;\n\treadonly capabilities = this._register(new TerminalCapabilityStore());\n\tprivate _hasUpdatedTelemetry: boolean = false;\n\tprivate _activationTimeout: any;\n\tprivate _commonProtocolDisposables: IDisposable[] = [];\n\tprivate _status: ShellIntegrationStatus = ShellIntegrationStatus.Off;\n\n\tget status(): ShellIntegrationStatus { return this._status; }\n\n\tprivate readonly _onDidChangeStatus = new Emitter<ShellIntegrationStatus>();\n\treadonly onDidChangeStatus = this._onDidChangeStatus.event;\n\n\tconstructor(\n\t\tprivate _nonce: string,\n\t\tprivate readonly _disableTelemetry: boolean | undefined,\n\t\tprivate readonly _telemetryService: ITelemetryService | undefined,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis._clearActivationTimeout();\n\t\t\tthis._disposeCommonProtocol();\n\t\t}));\n\t}\n\n\tprivate _disposeCommonProtocol(): void {\n\t\tdispose(this._commonProtocolDisposables);\n\t\tthis._commonProtocolDisposables.length = 0;\n\t}\n\n\tactivate(xterm: Terminal) {\n\t\tthis._terminal = xterm;\n\t\tthis.capabilities.add(TerminalCapability.PartialCommandDetection, this._register(new PartialCommandDetectionCapability(this._terminal)));\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.VSCode, data => this._handleVSCodeSequence(data)));\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.ITerm, data => this._doHandleITermSequence(data)));\n\t\tthis._commonProtocolDisposables.push(\n\t\t\txterm.parser.registerOscHandler(ShellIntegrationOscPs.FinalTerm, data => this._handleFinalTermSequence(data))\n\t\t);\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.SetCwd, data => this._doHandleSetCwd(data)));\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.SetWindowsFriendlyCwd, data => this._doHandleSetWindowsFriendlyCwd(data)));\n\t\tthis._ensureCapabilitiesOrAddFailureTelemetry();\n\t}\n\n\tgetMarkerId(terminal: Terminal, vscodeMarkerId: string) {\n\t\tthis._createOrGetBufferMarkDetection(terminal).getMark(vscodeMarkerId);\n\t}\n\n\tprivate _handleFinalTermSequence(data: string): boolean {\n\t\tconst didHandle = this._doHandleFinalTermSequence(data);\n\t\tif (this._status === ShellIntegrationStatus.Off) {\n\t\t\tthis._status = ShellIntegrationStatus.FinalTerm;\n\t\t\tthis._onDidChangeStatus.fire(this._status);\n\t\t}\n\t\treturn didHandle;\n\t}\n\n\tprivate _doHandleFinalTermSequence(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass the sequence along to the capability\n\t\t// It was considered to disable the common protocol in order to not confuse the VS Code\n\t\t// shell integration if both happen for some reason. This doesn't work for powerlevel10k\n\t\t// when instant prompt is enabled though. If this does end up being a problem we could pass\n\t\t// a type flag through the capability calls\n\t\tconst [command, ...args] = data.split(';');\n\t\tswitch (command) {\n\t\t\tcase FinalTermOscPt.PromptStart:\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handlePromptStart();\n\t\t\t\treturn true;\n\t\t\tcase FinalTermOscPt.CommandStart:\n\t\t\t\t// Ignore the command line for these sequences as it's unreliable for example in powerlevel10k\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandStart({ ignoreCommandLine: true });\n\t\t\t\treturn true;\n\t\t\tcase FinalTermOscPt.CommandExecuted:\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandExecuted();\n\t\t\t\treturn true;\n\t\t\tcase FinalTermOscPt.CommandFinished: {\n\t\t\t\tconst exitCode = args.length === 1 ? parseInt(args[0]) : undefined;\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandFinished(exitCode);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _handleVSCodeSequence(data: string): boolean {\n\t\tconst didHandle = this._doHandleVSCodeSequence(data);\n\t\tif (!this._hasUpdatedTelemetry && didHandle) {\n\t\t\tthis._telemetryService?.publicLog2<{}, { owner: 'meganrogge'; comment: 'Indicates shell integration was activated' }>('terminal/shellIntegrationActivationSucceeded');\n\t\t\tthis._hasUpdatedTelemetry = true;\n\t\t\tthis._clearActivationTimeout();\n\t\t}\n\t\tif (this._status !== ShellIntegrationStatus.VSCode) {\n\t\t\tthis._status = ShellIntegrationStatus.VSCode;\n\t\t\tthis._onDidChangeStatus.fire(this._status);\n\t\t}\n\t\treturn didHandle;\n\t}\n\n\tprivate async _ensureCapabilitiesOrAddFailureTelemetry(): Promise<void> {\n\t\tif (!this._telemetryService || this._disableTelemetry) {\n\t\t\treturn;\n\t\t}\n\t\tthis._activationTimeout = setTimeout(() => {\n\t\t\tif (!this.capabilities.get(TerminalCapability.CommandDetection) && !this.capabilities.get(TerminalCapability.CwdDetection)) {\n\t\t\t\tthis._telemetryService?.publicLog2<{ classification: 'SystemMetaData'; purpose: 'FeatureInsight' }>('terminal/shellIntegrationActivationTimeout');\n\t\t\t\tthis._logService.warn('Shell integration failed to add capabilities within 10 seconds');\n\t\t\t}\n\t\t\tthis._hasUpdatedTelemetry = true;\n\t\t}, 10000);\n\t}\n\n\tprivate _clearActivationTimeout(): void {\n\t\tif (this._activationTimeout !== undefined) {\n\t\t\tclearTimeout(this._activationTimeout);\n\t\t\tthis._activationTimeout = undefined;\n\t\t}\n\t}\n\n\tprivate _doHandleVSCodeSequence(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass the sequence along to the capability\n\t\tconst argsIndex = data.indexOf(';');\n\t\tconst sequenceCommand = argsIndex === -1 ? data : data.substring(0, argsIndex);\n\t\t// Cast to strict checked index access\n\t\tconst args: (string | undefined)[] = argsIndex === -1 ? [] : data.substring(argsIndex + 1).split(';');\n\t\tswitch (sequenceCommand) {\n\t\t\tcase VSCodeOscPt.PromptStart:\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handlePromptStart();\n\t\t\t\treturn true;\n\t\t\tcase VSCodeOscPt.CommandStart:\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandStart();\n\t\t\t\treturn true;\n\t\t\tcase VSCodeOscPt.CommandExecuted:\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandExecuted();\n\t\t\t\treturn true;\n\t\t\tcase VSCodeOscPt.CommandFinished: {\n\t\t\t\tconst arg0 = args[0];\n\t\t\t\tconst exitCode = arg0 !== undefined ? parseInt(arg0) : undefined;\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandFinished(exitCode);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.CommandLine: {\n\t\t\t\tconst arg0 = args[0];\n\t\t\t\tconst arg1 = args[1];\n\t\t\t\tlet commandLine: string;\n\t\t\t\tif (arg0 !== undefined) {\n\t\t\t\t\tcommandLine = deserializeMessage(arg0);\n\t\t\t\t} else {\n\t\t\t\t\tcommandLine = '';\n\t\t\t\t}\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).setCommandLine(commandLine, arg1 === this._nonce);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.ContinuationStart: {\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleContinuationStart();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.ContinuationEnd: {\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleContinuationEnd();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.RightPromptStart: {\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleRightPromptStart();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.RightPromptEnd: {\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleRightPromptEnd();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.Property: {\n\t\t\t\tconst arg0 = args[0];\n\t\t\t\tconst deserialized = arg0 !== undefined ? deserializeMessage(arg0) : '';\n\t\t\t\tconst { key, value } = parseKeyValueAssignment(deserialized);\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase 'ContinuationPrompt': {\n\t\t\t\t\t\tthis._updateContinuationPrompt(removeAnsiEscapeCodesFromPrompt(value));\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'Cwd': {\n\t\t\t\t\t\tthis._updateCwd(value);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'IsWindows': {\n\t\t\t\t\t\tthis._createOrGetCommandDetection(this._terminal).setIsWindowsPty(value === 'True' ? true : false);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'Prompt': {\n\t\t\t\t\t\t// Remove escape sequences from the user's prompt\n\t\t\t\t\t\tconst sanitizedValue = value.replace(/\\x1b\\[[0-9;]*m/g, '');\n\t\t\t\t\t\tthis._updatePromptTerminator(sanitizedValue);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'Task': {\n\t\t\t\t\t\tthis._createOrGetBufferMarkDetection(this._terminal);\n\t\t\t\t\t\tthis.capabilities.get(TerminalCapability.CommandDetection)?.setIsCommandStorageDisabled();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase VSCodeOscPt.SetMark: {\n\t\t\t\tthis._createOrGetBufferMarkDetection(this._terminal).addMark(parseMarkSequence(args));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\tprivate _updateContinuationPrompt(value: string) {\n\t\tif (!this._terminal) {\n\t\t\treturn;\n\t\t}\n\t\tthis._createOrGetCommandDetection(this._terminal).setContinuationPrompt(value);\n\t}\n\n\tprivate _updatePromptTerminator(prompt: string) {\n\t\tif (!this._terminal) {\n\t\t\treturn;\n\t\t}\n\t\tconst lastPromptLine = prompt.substring(prompt.lastIndexOf('\\n') + 1);\n\t\tconst promptTerminator = lastPromptLine.substring(lastPromptLine.lastIndexOf(' '));\n\t\tif (promptTerminator) {\n\t\t\tthis._createOrGetCommandDetection(this._terminal).setPromptTerminator(promptTerminator, lastPromptLine);\n\t\t}\n\t}\n\n\tprivate _updateCwd(value: string) {\n\t\tvalue = sanitizeCwd(value);\n\t\tthis._createOrGetCwdDetection().updateCwd(value);\n\t\tconst commandDetection = this.capabilities.get(TerminalCapability.CommandDetection);\n\t\tcommandDetection?.setCwd(value);\n\t}\n\n\tprivate _doHandleITermSequence(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [command] = data.split(';');\n\t\tswitch (command) {\n\t\t\tcase ITermOscPt.SetMark: {\n\t\t\t\tthis._createOrGetBufferMarkDetection(this._terminal).addMark();\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\t// Checking for known `<key>=<value>` pairs.\n\t\t\t\t// Note that unlike `VSCodeOscPt.Property`, iTerm2 does not interpret backslash or hex-escape sequences.\n\t\t\t\t// See: https://github.com/gnachman/iTerm2/blob/bb0882332cec5196e4de4a4225978d746e935279/sources/VT100Terminal.m#L2089-L2105\n\t\t\t\tconst { key, value } = parseKeyValueAssignment(command);\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\t// No '=' was found, so it's not a property assignment.\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase ITermOscPt.CurrentDir:\n\t\t\t\t\t\t// Encountered: `OSC 1337 ; CurrentDir=<Cwd> ST`\n\t\t\t\t\t\tthis._updateCwd(value);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\tprivate _doHandleSetWindowsFriendlyCwd(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [command, ...args] = data.split(';');\n\t\tswitch (command) {\n\t\t\tcase '9':\n\t\t\t\t// Encountered `OSC 9 ; 9 ; <cwd> ST`\n\t\t\t\tif (args.length) {\n\t\t\t\t\tthis._updateCwd(args[0]);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\t/**\n\t * Handles the sequence: `OSC 7 ; scheme://cwd ST`\n\t */\n\tprivate _doHandleSetCwd(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [command] = data.split(';');\n\n\t\tif (command.match(/^file:\\/\\/.*\\//)) {\n\t\t\tconst uri = URI.parse(command);\n\t\t\tif (uri.path && uri.path.length > 0) {\n\t\t\t\tthis._updateCwd(uri.path);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\tserialize(): ISerializedCommandDetectionCapability {\n\t\tif (!this._terminal || !this.capabilities.has(TerminalCapability.CommandDetection)) {\n\t\t\treturn {\n\t\t\t\tisWindowsPty: false,\n\t\t\t\tcommands: [],\n\t\t\t\tpromptInputModel: undefined,\n\t\t\t};\n\t\t}\n\t\tconst result = this._createOrGetCommandDetection(this._terminal).serialize();\n\t\treturn result;\n\t}\n\n\tdeserialize(serialized: ISerializedCommandDetectionCapability): void {\n\t\tif (!this._terminal) {\n\t\t\tthrow new Error('Cannot restore commands before addon is activated');\n\t\t}\n\t\tthis._createOrGetCommandDetection(this._terminal).deserialize(serialized);\n\t}\n\n\tprotected _createOrGetCwdDetection(): ICwdDetectionCapability {\n\t\tlet cwdDetection = this.capabilities.get(TerminalCapability.CwdDetection);\n\t\tif (!cwdDetection) {\n\t\t\tcwdDetection = this._register(new CwdDetectionCapability());\n\t\t\tthis.capabilities.add(TerminalCapability.CwdDetection, cwdDetection);\n\t\t}\n\t\treturn cwdDetection;\n\t}\n\n\tprotected _createOrGetCommandDetection(terminal: Terminal): ICommandDetectionCapability {\n\t\tlet commandDetection = this.capabilities.get(TerminalCapability.CommandDetection);\n\t\tif (!commandDetection) {\n\t\t\tcommandDetection = this._register(new CommandDetectionCapability(terminal, this._logService));\n\t\t\tthis.capabilities.add(TerminalCapability.CommandDetection, commandDetection);\n\t\t}\n\t\treturn commandDetection;\n\t}\n\n\tprotected _createOrGetBufferMarkDetection(terminal: Terminal): IBufferMarkCapability {\n\t\tlet bufferMarkDetection = this.capabilities.get(TerminalCapability.BufferMarkDetection);\n\t\tif (!bufferMarkDetection) {\n\t\t\tbufferMarkDetection = this._register(new BufferMarkCapability(terminal));\n\t\t\tthis.capabilities.add(TerminalCapability.BufferMarkDetection, bufferMarkDetection);\n\t\t}\n\t\treturn bufferMarkDetection;\n\t}\n}\n\nexport function deserializeMessage(message: string): string {\n\treturn message.replaceAll(\n\t\t// Backslash ('\\') followed by an escape operator: either another '\\', or 'x' and two hex chars.\n\t\t/\\\\(\\\\|x([0-9a-f]{2}))/gi,\n\t\t// If it's a hex value, parse it to a character.\n\t\t// Otherwise the operator is '\\', which we return literally, now unescaped.\n\t\t(_match: string, op: string, hex?: string) => hex ? String.fromCharCode(parseInt(hex, 16)) : op);\n}\n\nexport function parseKeyValueAssignment(message: string): { key: string; value: string | undefined } {\n\tconst separatorIndex = message.indexOf('=');\n\tif (separatorIndex === -1) {\n\t\treturn { key: message, value: undefined }; // No '=' was found.\n\t}\n\treturn {\n\t\tkey: message.substring(0, separatorIndex),\n\t\tvalue: message.substring(1 + separatorIndex)\n\t};\n}\n\n\nexport function parseMarkSequence(sequence: (string | undefined)[]): { id?: string; hidden?: boolean } {\n\tlet id = undefined;\n\tlet hidden = false;\n\tfor (const property of sequence) {\n\t\t// Sanity check, this shouldn't happen in practice\n\t\tif (property === undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (property === 'Hidden') {\n\t\t\thidden = true;\n\t\t}\n\t\tif (property.startsWith('Id=')) {\n\t\t\tid = property.substring(3);\n\t\t}\n\t}\n\treturn { id, hidden };\n}\n"],
  "mappings": "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",
  "names": ["ShellIntegrationOscPs", "FinalTermOscPt", "VSCodeOscPt", "ITermOscPt"]
}
