{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/common/terminalProcess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { UriComponents } from \"../../../base/common/uri.js\";\nimport type {\n\tISerializableEnvironmentVariableCollection,\n\tISerializableEnvironmentVariableCollections,\n} from \"./environmentVariable.js\";\nimport type {\n\tIFixedTerminalDimensions,\n\tIRawTerminalTabLayoutInfo,\n\tIReconnectionProperties,\n\tITerminalEnvironment,\n\tITerminalTabLayoutInfoById,\n\tTerminalIcon,\n\tTerminalType,\n\tTitleEventSource,\n\tWaitOnExitValue,\n} from \"./terminal.js\";\n\nexport interface ISingleTerminalConfiguration<T> {\n\tuserValue: T | undefined;\n\tvalue: T | undefined;\n\tdefaultValue: T | undefined;\n}\n\nexport interface ICompleteTerminalConfiguration {\n\t\"terminal.integrated.env.windows\": ISingleTerminalConfiguration<ITerminalEnvironment>;\n\t\"terminal.integrated.env.osx\": ISingleTerminalConfiguration<ITerminalEnvironment>;\n\t\"terminal.integrated.env.linux\": ISingleTerminalConfiguration<ITerminalEnvironment>;\n\t\"terminal.integrated.cwd\": string;\n\t\"terminal.integrated.detectLocale\": \"auto\" | \"off\" | \"on\";\n}\n\nexport type ITerminalEnvironmentVariableCollections = [\n\tstring,\n\tISerializableEnvironmentVariableCollection,\n][];\n\nexport interface IWorkspaceFolderData {\n\turi: UriComponents;\n\tname: string;\n\tindex: number;\n}\n\nexport interface ISetTerminalLayoutInfoArgs {\n\tworkspaceId: string;\n\ttabs: ITerminalTabLayoutInfoById[];\n}\n\nexport interface IGetTerminalLayoutInfoArgs {\n\tworkspaceId: string;\n}\n\nexport interface IProcessDetails {\n\tid: number;\n\tpid: number;\n\ttitle: string;\n\ttitleSource: TitleEventSource;\n\tcwd: string;\n\tworkspaceId: string;\n\tworkspaceName: string;\n\tisOrphan: boolean;\n\ticon: TerminalIcon | undefined;\n\tcolor: string | undefined;\n\tfixedDimensions: IFixedTerminalDimensions | undefined;\n\tenvironmentVariableCollections:\n\t\t| ISerializableEnvironmentVariableCollections\n\t\t| undefined;\n\treconnectionProperties?: IReconnectionProperties;\n\twaitOnExit?: WaitOnExitValue;\n\thideFromUser?: boolean;\n\tisFeatureTerminal?: boolean;\n\ttype?: TerminalType;\n\thasChildProcesses: boolean;\n\tshellIntegrationNonce: string;\n}\n\nexport type ITerminalTabLayoutInfoDto =\n\tIRawTerminalTabLayoutInfo<IProcessDetails>;\n\nexport interface ReplayEntry {\n\tcols: number;\n\trows: number;\n\tdata: string;\n}\n\nenum Constants {\n\t/**\n\t * Writing large amounts of data can be corrupted for some reason, after looking into this is\n\t * appears to be a race condition around writing to the FD which may be based on how powerful\n\t * the hardware is. The workaround for this is to space out when large amounts of data is being\n\t * written to the terminal. See https://github.com/microsoft/vscode/issues/38137\n\t */\n\tWriteMaxChunkSize = 50,\n}\n\n/**\n * Splits incoming pty data into chunks to try prevent data corruption that could occur when pasting\n * large amounts of data.\n */\nexport function chunkInput(data: string): string[] {\n\tconst chunks: string[] = [];\n\tlet nextChunkStartIndex = 0;\n\tfor (let i = 0; i < data.length - 1; i++) {\n\t\tif (\n\t\t\t// If the max chunk size is reached\n\t\t\ti - nextChunkStartIndex + 1 >= Constants.WriteMaxChunkSize ||\n\t\t\t// If the next character is ESC, send the pending data to avoid splitting the escape\n\t\t\t// sequence.\n\t\t\tdata[i + 1] === \"\\x1b\"\n\t\t) {\n\t\t\tchunks.push(data.substring(nextChunkStartIndex, i + 1));\n\t\t\tnextChunkStartIndex = i + 1;\n\t\t\t// Skip the next character as the chunk would be a single character\n\t\t\ti++;\n\t\t}\n\t}\n\t// Push final chunk\n\tif (nextChunkStartIndex !== data.length) {\n\t\tchunks.push(data.substring(nextChunkStartIndex));\n\t}\n\treturn chunks;\n}\n"],
  "mappings": ";;AAyFA,IAAK,YAAL,kBAAKA,eAAL;AAOC,EAAAA,sBAAA,uBAAoB,MAApB;AAPI,SAAAA;AAAA,GAAA;AAcE,SAAS,WAAW,MAAwB;AAClD,QAAM,SAAmB,CAAC;AAC1B,MAAI,sBAAsB;AAC1B,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KAAK;AACzC;AAAA;AAAA,MAEC,IAAI,sBAAsB,KAAK;AAAA;AAAA,MAG/B,KAAK,IAAI,CAAC,MAAM;AAAA,MACf;AACD,aAAO,KAAK,KAAK,UAAU,qBAAqB,IAAI,CAAC,CAAC;AACtD,4BAAsB,IAAI;AAE1B;AAAA,IACD;AAAA,EACD;AAEA,MAAI,wBAAwB,KAAK,QAAQ;AACxC,WAAO,KAAK,KAAK,UAAU,mBAAmB,CAAC;AAAA,EAChD;AACA,SAAO;AACR;AAtBgB;",
  "names": ["Constants"]
}
