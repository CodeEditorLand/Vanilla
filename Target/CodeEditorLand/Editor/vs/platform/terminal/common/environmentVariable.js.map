{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/common/environmentVariable.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IProcessEnvironment } from '../../../base/common/platform.js';\nimport { IWorkspaceFolderData } from '../../workspace/common/workspace.js';\n\nexport enum EnvironmentVariableMutatorType {\n\tReplace = 1,\n\tAppend = 2,\n\tPrepend = 3\n}\nexport interface IEnvironmentVariableMutator {\n\treadonly variable: string;\n\treadonly value: string;\n\treadonly type: EnvironmentVariableMutatorType;\n\treadonly scope?: EnvironmentVariableScope;\n\treadonly options?: IEnvironmentVariableMutatorOptions;\n}\n\nexport interface IEnvironmentVariableCollectionDescription {\n\treadonly description: string | undefined;\n\treadonly scope?: EnvironmentVariableScope;\n}\n\nexport interface IEnvironmentVariableMutatorOptions {\n\tapplyAtProcessCreation?: boolean;\n\tapplyAtShellIntegration?: boolean;\n}\n\nexport type EnvironmentVariableScope = {\n\tworkspaceFolder?: IWorkspaceFolderData;\n};\n\nexport interface IEnvironmentVariableCollection {\n\treadonly map: ReadonlyMap<string, IEnvironmentVariableMutator>;\n\treadonly descriptionMap?: ReadonlyMap<string, IEnvironmentVariableCollectionDescription>;\n}\n\n/** [variable, mutator] */\nexport type ISerializableEnvironmentVariableCollection = [string, IEnvironmentVariableMutator][];\n\nexport type ISerializableEnvironmentDescriptionMap = [string, IEnvironmentVariableCollectionDescription][];\nexport interface IExtensionOwnedEnvironmentDescriptionMutator extends IEnvironmentVariableCollectionDescription {\n\treadonly extensionIdentifier: string;\n}\n\n/** [extension, collection, description] */\nexport type ISerializableEnvironmentVariableCollections = [string, ISerializableEnvironmentVariableCollection, ISerializableEnvironmentDescriptionMap][];\n\nexport interface IExtensionOwnedEnvironmentVariableMutator extends IEnvironmentVariableMutator {\n\treadonly extensionIdentifier: string;\n}\n\nexport interface IMergedEnvironmentVariableCollectionDiff {\n\tadded: ReadonlyMap<string, IExtensionOwnedEnvironmentVariableMutator[]>;\n\tchanged: ReadonlyMap<string, IExtensionOwnedEnvironmentVariableMutator[]>;\n\tremoved: ReadonlyMap<string, IExtensionOwnedEnvironmentVariableMutator[]>;\n}\n\ntype VariableResolver = (str: string) => Promise<string>;\n\n/**\n * Represents an environment variable collection that results from merging several collections\n * together.\n */\nexport interface IMergedEnvironmentVariableCollection {\n\treadonly collections: ReadonlyMap<string, IEnvironmentVariableCollection>;\n\t/**\n\t * Gets the variable map for a given scope.\n\t * @param scope The scope to get the variable map for. If undefined, the global scope is used.\n\t */\n\tgetVariableMap(scope: EnvironmentVariableScope | undefined): Map<string, IExtensionOwnedEnvironmentVariableMutator[]>;\n\t/**\n\t * Gets the description map for a given scope.\n\t * @param scope The scope to get the description map for. If undefined, description map for the\n\t * global scope is returned.\n\t */\n\tgetDescriptionMap(scope: EnvironmentVariableScope | undefined): Map<string, string | undefined>;\n\t/**\n\t * Applies this collection to a process environment.\n\t * @param variableResolver An optional function to use to resolve variables within the\n\t * environment values.\n\t */\n\tapplyToProcessEnvironment(env: IProcessEnvironment, scope: EnvironmentVariableScope | undefined, variableResolver?: VariableResolver): Promise<void>;\n\n\t/**\n\t * Generates a diff of this collection against another. Returns undefined if the collections are\n\t * the same.\n\t */\n\tdiff(other: IMergedEnvironmentVariableCollection, scope: EnvironmentVariableScope | undefined): IMergedEnvironmentVariableCollectionDiff | undefined;\n}\n"],
  "mappings": "AAKA,SAAS,2BAA2B;AACpC,SAAS,4BAA4B;AAE9B,IAAK,iCAAL,kBAAKA,oCAAL;AACN,EAAAA,gEAAA,aAAU,KAAV;AACA,EAAAA,gEAAA,YAAS,KAAT;AACA,EAAAA,gEAAA,aAAU,KAAV;AAHW,SAAAA;AAAA,GAAA;",
  "names": ["EnvironmentVariableMutatorType"]
}
