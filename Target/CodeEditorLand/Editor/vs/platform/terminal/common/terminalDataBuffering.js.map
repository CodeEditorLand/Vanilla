{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/common/terminalDataBuffering.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { IProcessDataEvent } from './terminal.js';\n\ninterface TerminalDataBuffer extends IDisposable {\n\tdata: string[];\n\ttimeoutId: any;\n}\n\nexport class TerminalDataBufferer implements IDisposable {\n\tprivate readonly _terminalBufferMap = new Map<number, TerminalDataBuffer>();\n\n\tconstructor(private readonly _callback: (id: number, data: string) => void) {\n\t}\n\n\tdispose() {\n\t\tfor (const buffer of this._terminalBufferMap.values()) {\n\t\t\tbuffer.dispose();\n\t\t}\n\t}\n\n\tstartBuffering(id: number, event: Event<string | IProcessDataEvent>, throttleBy: number = 5): IDisposable {\n\n\t\tconst disposable = event((e: string | IProcessDataEvent) => {\n\t\t\tconst data = (typeof e === 'string' ? e : e.data);\n\t\t\tlet buffer = this._terminalBufferMap.get(id);\n\t\t\tif (buffer) {\n\t\t\t\tbuffer.data.push(data);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst timeoutId = setTimeout(() => this.flushBuffer(id), throttleBy);\n\t\t\tbuffer = {\n\t\t\t\tdata: [data],\n\t\t\t\ttimeoutId: timeoutId,\n\t\t\t\tdispose: () => {\n\t\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\t\tthis.flushBuffer(id);\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._terminalBufferMap.set(id, buffer);\n\t\t});\n\t\treturn disposable;\n\t}\n\n\tstopBuffering(id: number) {\n\t\tconst buffer = this._terminalBufferMap.get(id);\n\t\tbuffer?.dispose();\n\t}\n\n\tflushBuffer(id: number): void {\n\t\tconst buffer = this._terminalBufferMap.get(id);\n\t\tif (buffer) {\n\t\t\tthis._terminalBufferMap.delete(id);\n\t\t\tthis._callback(id, buffer.data.join(''));\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAO3B,MAAM,qBAA4C;AAAA,EAGxD,YAA6B,WAA+C;AAA/C;AAAA,EAC7B;AAAA,EAlBD,OAcyD;AAAA;AAAA;AAAA,EACvC,qBAAqB,oBAAI,IAAgC;AAAA,EAK1E,UAAU;AACT,eAAW,UAAU,KAAK,mBAAmB,OAAO,GAAG;AACtD,aAAO,QAAQ;AAAA,IAChB;AAAA,EACD;AAAA,EAEA,eAAe,IAAY,OAA0C,aAAqB,GAAgB;AAEzG,UAAM,aAAa,MAAM,CAAC,MAAkC;AAC3D,YAAM,OAAQ,OAAO,MAAM,WAAW,IAAI,EAAE;AAC5C,UAAI,SAAS,KAAK,mBAAmB,IAAI,EAAE;AAC3C,UAAI,QAAQ;AACX,eAAO,KAAK,KAAK,IAAI;AACrB;AAAA,MACD;AAEA,YAAM,YAAY,WAAW,MAAM,KAAK,YAAY,EAAE,GAAG,UAAU;AACnE,eAAS;AAAA,QACR,MAAM,CAAC,IAAI;AAAA,QACX;AAAA,QACA,SAAS,6BAAM;AACd,uBAAa,SAAS;AACtB,eAAK,YAAY,EAAE;AACnB,qBAAW,QAAQ;AAAA,QACpB,GAJS;AAAA,MAKV;AACA,WAAK,mBAAmB,IAAI,IAAI,MAAM;AAAA,IACvC,CAAC;AACD,WAAO;AAAA,EACR;AAAA,EAEA,cAAc,IAAY;AACzB,UAAM,SAAS,KAAK,mBAAmB,IAAI,EAAE;AAC7C,YAAQ,QAAQ;AAAA,EACjB;AAAA,EAEA,YAAY,IAAkB;AAC7B,UAAM,SAAS,KAAK,mBAAmB,IAAI,EAAE;AAC7C,QAAI,QAAQ;AACX,WAAK,mBAAmB,OAAO,EAAE;AACjC,WAAK,UAAU,IAAI,OAAO,KAAK,KAAK,EAAE,CAAC;AAAA,IACxC;AAAA,EACD;AACD;",
  "names": []
}
