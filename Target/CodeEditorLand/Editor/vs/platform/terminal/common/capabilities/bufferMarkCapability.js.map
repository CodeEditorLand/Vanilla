{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/common/capabilities/bufferMarkCapability.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IMarker, Terminal } from \"@xterm/headless\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IBufferMarkCapability,\n\ttype IMarkProperties,\n\tTerminalCapability,\n} from \"./capabilities.js\";\n\n/**\n * Manages \"marks\" in the buffer which are lines that are tracked when lines are added to or removed\n * from the buffer.\n */\nexport class BufferMarkCapability\n\textends Disposable\n\timplements IBufferMarkCapability\n{\n\treadonly type = TerminalCapability.BufferMarkDetection;\n\n\tprivate _idToMarkerMap: Map<string, IMarker> = new Map();\n\tprivate _anonymousMarkers: Map<number, IMarker> = new Map();\n\n\tprivate readonly _onMarkAdded = this._register(\n\t\tnew Emitter<IMarkProperties>(),\n\t);\n\treadonly onMarkAdded = this._onMarkAdded.event;\n\n\tconstructor(private readonly _terminal: Terminal) {\n\t\tsuper();\n\t}\n\n\t*markers(): IterableIterator<IMarker> {\n\t\tfor (const m of this._idToMarkerMap.values()) {\n\t\t\tyield m;\n\t\t}\n\t\tfor (const m of this._anonymousMarkers.values()) {\n\t\t\tyield m;\n\t\t}\n\t}\n\n\taddMark(properties?: IMarkProperties): void {\n\t\tconst marker = properties?.marker || this._terminal.registerMarker();\n\t\tconst id = properties?.id;\n\t\tif (!marker) {\n\t\t\treturn;\n\t\t}\n\t\tif (id) {\n\t\t\tthis._idToMarkerMap.set(id, marker);\n\t\t\tmarker.onDispose(() => this._idToMarkerMap.delete(id));\n\t\t} else {\n\t\t\tthis._anonymousMarkers.set(marker.id, marker);\n\t\t\tmarker.onDispose(() => this._anonymousMarkers.delete(marker.id));\n\t\t}\n\t\tthis._onMarkAdded.fire({\n\t\t\tmarker,\n\t\t\tid,\n\t\t\thidden: properties?.hidden,\n\t\t\thoverMessage: properties?.hoverMessage,\n\t\t});\n\t}\n\n\tgetMark(id: string): IMarker | undefined {\n\t\treturn this._idToMarkerMap.get(id);\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B;AAAA,EAGC;AAAA,OACM;AAMA,MAAM,6BACJ,WAET;AAAA,EAWC,YAA6B,WAAqB;AACjD,UAAM;AADsB;AAAA,EAE7B;AAAA,EAlCD,OAqBA;AAAA;AAAA;AAAA,EACU,OAAO,mBAAmB;AAAA,EAE3B,iBAAuC,oBAAI,IAAI;AAAA,EAC/C,oBAA0C,oBAAI,IAAI;AAAA,EAEzC,eAAe,KAAK;AAAA,IACpC,IAAI,QAAyB;AAAA,EAC9B;AAAA,EACS,cAAc,KAAK,aAAa;AAAA,EAMzC,CAAC,UAAqC;AACrC,eAAW,KAAK,KAAK,eAAe,OAAO,GAAG;AAC7C,YAAM;AAAA,IACP;AACA,eAAW,KAAK,KAAK,kBAAkB,OAAO,GAAG;AAChD,YAAM;AAAA,IACP;AAAA,EACD;AAAA,EAEA,QAAQ,YAAoC;AAC3C,UAAM,SAAS,YAAY,UAAU,KAAK,UAAU,eAAe;AACnE,UAAM,KAAK,YAAY;AACvB,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AACA,QAAI,IAAI;AACP,WAAK,eAAe,IAAI,IAAI,MAAM;AAClC,aAAO,UAAU,MAAM,KAAK,eAAe,OAAO,EAAE,CAAC;AAAA,IACtD,OAAO;AACN,WAAK,kBAAkB,IAAI,OAAO,IAAI,MAAM;AAC5C,aAAO,UAAU,MAAM,KAAK,kBAAkB,OAAO,OAAO,EAAE,CAAC;AAAA,IAChE;AACA,SAAK,aAAa,KAAK;AAAA,MACtB;AAAA,MACA;AAAA,MACA,QAAQ,YAAY;AAAA,MACpB,cAAc,YAAY;AAAA,IAC3B,CAAC;AAAA,EACF;AAAA,EAEA,QAAQ,IAAiC;AACxC,WAAO,KAAK,eAAe,IAAI,EAAE;AAAA,EAClC;AACD;",
  "names": []
}
