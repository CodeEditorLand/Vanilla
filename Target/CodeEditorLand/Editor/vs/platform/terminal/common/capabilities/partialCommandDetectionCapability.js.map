{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/common/capabilities/partialCommandDetectionCapability.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IPartialCommandDetectionCapability, TerminalCapability } from './capabilities.js';\nimport type { IMarker, Terminal } from '@xterm/headless';\n\nconst enum Constants {\n\t/**\n\t * The minimum size of the prompt in which to assume the line is a command.\n\t */\n\tMinimumPromptLength = 2\n}\n\n/**\n * This capability guesses where commands are based on where the cursor was when enter was pressed.\n * It's very hit or miss but it's often correct and better than nothing.\n */\nexport class PartialCommandDetectionCapability extends DisposableStore implements IPartialCommandDetectionCapability {\n\treadonly type = TerminalCapability.PartialCommandDetection;\n\n\tprivate readonly _commands: IMarker[] = [];\n\n\tget commands(): readonly IMarker[] { return this._commands; }\n\n\tprivate readonly _onCommandFinished = this.add(new Emitter<IMarker>());\n\treadonly onCommandFinished = this._onCommandFinished.event;\n\n\tconstructor(\n\t\tprivate readonly _terminal: Terminal,\n\t) {\n\t\tsuper();\n\t\tthis.add(this._terminal.onData(e => this._onData(e)));\n\t\tthis.add(this._terminal.parser.registerCsiHandler({ final: 'J' }, params => {\n\t\t\tif (params.length >= 1 && (params[0] === 2 || params[0] === 3)) {\n\t\t\t\tthis._clearCommandsInViewport();\n\t\t\t}\n\t\t\t// We don't want to override xterm.js' default behavior, just augment it\n\t\t\treturn false;\n\t\t}));\n\t}\n\n\tprivate _onData(data: string): void {\n\t\tif (data === '\\x0d') {\n\t\t\tthis._onEnter();\n\t\t}\n\t}\n\n\tprivate _onEnter(): void {\n\t\tif (!this._terminal) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._terminal.buffer.active.cursorX >= Constants.MinimumPromptLength) {\n\t\t\tconst marker = this._terminal.registerMarker(0);\n\t\t\tif (marker) {\n\t\t\t\tthis._commands.push(marker);\n\t\t\t\tthis._onCommandFinished.fire(marker);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _clearCommandsInViewport(): void {\n\t\t// Find the number of commands on the tail end of the array that are within the viewport\n\t\tlet count = 0;\n\t\tfor (let i = this._commands.length - 1; i >= 0; i--) {\n\t\t\tif (this._commands[i].line < this._terminal.buffer.active.baseY) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\t// Remove them\n\t\tthis._commands.splice(this._commands.length - count, count);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,oCAAoC,0BAA0B;AAGvE,IAAW,YAAX,kBAAWA,eAAX;AAIC,EAAAA,sBAAA,yBAAsB,KAAtB;AAJU,SAAAA;AAAA,GAAA;AAWJ,MAAM,0CAA0C,gBAA8D;AAAA,EAUpH,YACkB,WAChB;AACD,UAAM;AAFW;AAGjB,SAAK,IAAI,KAAK,UAAU,OAAO,OAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;AACpD,SAAK,IAAI,KAAK,UAAU,OAAO,mBAAmB,EAAE,OAAO,IAAI,GAAG,YAAU;AAC3E,UAAI,OAAO,UAAU,MAAM,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,IAAI;AAC/D,aAAK,yBAAyB;AAAA,MAC/B;AAEA,aAAO;AAAA,IACR,CAAC,CAAC;AAAA,EACH;AAAA,EA3CD,OAqBqH;AAAA;AAAA;AAAA,EAC3G,OAAO,mBAAmB;AAAA,EAElB,YAAuB,CAAC;AAAA,EAEzC,IAAI,WAA+B;AAAE,WAAO,KAAK;AAAA,EAAW;AAAA,EAE3C,qBAAqB,KAAK,IAAI,IAAI,QAAiB,CAAC;AAAA,EAC5D,oBAAoB,KAAK,mBAAmB;AAAA,EAgB7C,QAAQ,MAAoB;AACnC,QAAI,SAAS,MAAQ;AACpB,WAAK,SAAS;AAAA,IACf;AAAA,EACD;AAAA,EAEQ,WAAiB;AACxB,QAAI,CAAC,KAAK,WAAW;AACpB;AAAA,IACD;AACA,QAAI,KAAK,UAAU,OAAO,OAAO,WAAW,6BAA+B;AAC1E,YAAM,SAAS,KAAK,UAAU,eAAe,CAAC;AAC9C,UAAI,QAAQ;AACX,aAAK,UAAU,KAAK,MAAM;AAC1B,aAAK,mBAAmB,KAAK,MAAM;AAAA,MACpC;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,2BAAiC;AAExC,QAAI,QAAQ;AACZ,aAAS,IAAI,KAAK,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AACpD,UAAI,KAAK,UAAU,CAAC,EAAE,OAAO,KAAK,UAAU,OAAO,OAAO,OAAO;AAChE;AAAA,MACD;AACA;AAAA,IACD;AAEA,SAAK,UAAU,OAAO,KAAK,UAAU,SAAS,OAAO,KAAK;AAAA,EAC3D;AACD;",
  "names": ["Constants"]
}
