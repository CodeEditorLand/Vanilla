{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/common/capabilities/partialCommandDetectionCapability.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IMarker, Terminal } from \"@xterm/headless\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IPartialCommandDetectionCapability,\n\tTerminalCapability,\n} from \"./capabilities.js\";\n\nenum Constants {\n\t/**\n\t * The minimum size of the prompt in which to assume the line is a command.\n\t */\n\tMinimumPromptLength = 2,\n}\n\n/**\n * This capability guesses where commands are based on where the cursor was when enter was pressed.\n * It's very hit or miss but it's often correct and better than nothing.\n */\nexport class PartialCommandDetectionCapability\n\textends DisposableStore\n\timplements IPartialCommandDetectionCapability\n{\n\treadonly type = TerminalCapability.PartialCommandDetection;\n\n\tprivate readonly _commands: IMarker[] = [];\n\n\tget commands(): readonly IMarker[] {\n\t\treturn this._commands;\n\t}\n\n\tprivate readonly _onCommandFinished = this.add(new Emitter<IMarker>());\n\treadonly onCommandFinished = this._onCommandFinished.event;\n\n\tconstructor(private readonly _terminal: Terminal) {\n\t\tsuper();\n\t\tthis.add(this._terminal.onData((e) => this._onData(e)));\n\t\tthis.add(\n\t\t\tthis._terminal.parser.registerCsiHandler(\n\t\t\t\t{ final: \"J\" },\n\t\t\t\t(params) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tparams.length >= 1 &&\n\t\t\t\t\t\t(params[0] === 2 || params[0] === 3)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._clearCommandsInViewport();\n\t\t\t\t\t}\n\t\t\t\t\t// We don't want to override xterm.js' default behavior, just augment it\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _onData(data: string): void {\n\t\tif (data === \"\\x0d\") {\n\t\t\tthis._onEnter();\n\t\t}\n\t}\n\n\tprivate _onEnter(): void {\n\t\tif (!this._terminal) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\tthis._terminal.buffer.active.cursorX >=\n\t\t\tConstants.MinimumPromptLength\n\t\t) {\n\t\t\tconst marker = this._terminal.registerMarker(0);\n\t\t\tif (marker) {\n\t\t\t\tthis._commands.push(marker);\n\t\t\t\tthis._onCommandFinished.fire(marker);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _clearCommandsInViewport(): void {\n\t\t// Find the number of commands on the tail end of the array that are within the viewport\n\t\tlet count = 0;\n\t\tfor (let i = this._commands.length - 1; i >= 0; i--) {\n\t\t\tif (this._commands[i].line < this._terminal.buffer.active.baseY) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\t// Remove them\n\t\tthis._commands.splice(this._commands.length - count, count);\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC;AAAA,EAEC;AAAA,OACM;AAEP,IAAK,YAAL,kBAAKA,eAAL;AAIC,EAAAA,sBAAA,yBAAsB,KAAtB;AAJI,SAAAA;AAAA,GAAA;AAWE,MAAM,0CACJ,gBAET;AAAA,EAYC,YAA6B,WAAqB;AACjD,UAAM;AADsB;AAE5B,SAAK,IAAI,KAAK,UAAU,OAAO,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;AACtD,SAAK;AAAA,MACJ,KAAK,UAAU,OAAO;AAAA,QACrB,EAAE,OAAO,IAAI;AAAA,QACb,CAAC,WAAW;AACX,cACC,OAAO,UAAU,MAChB,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,IACjC;AACD,iBAAK,yBAAyB;AAAA,UAC/B;AAEA,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAzDD,OA2BA;AAAA;AAAA;AAAA,EACU,OAAO,mBAAmB;AAAA,EAElB,YAAuB,CAAC;AAAA,EAEzC,IAAI,WAA+B;AAClC,WAAO,KAAK;AAAA,EACb;AAAA,EAEiB,qBAAqB,KAAK,IAAI,IAAI,QAAiB,CAAC;AAAA,EAC5D,oBAAoB,KAAK,mBAAmB;AAAA,EAsB7C,QAAQ,MAAoB;AACnC,QAAI,SAAS,MAAQ;AACpB,WAAK,SAAS;AAAA,IACf;AAAA,EACD;AAAA,EAEQ,WAAiB;AACxB,QAAI,CAAC,KAAK,WAAW;AACpB;AAAA,IACD;AACA,QACC,KAAK,UAAU,OAAO,OAAO,WAC7B,6BACC;AACD,YAAM,SAAS,KAAK,UAAU,eAAe,CAAC;AAC9C,UAAI,QAAQ;AACX,aAAK,UAAU,KAAK,MAAM;AAC1B,aAAK,mBAAmB,KAAK,MAAM;AAAA,MACpC;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,2BAAiC;AAExC,QAAI,QAAQ;AACZ,aAAS,IAAI,KAAK,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AACpD,UAAI,KAAK,UAAU,CAAC,EAAE,OAAO,KAAK,UAAU,OAAO,OAAO,OAAO;AAChE;AAAA,MACD;AACA;AAAA,IACD;AAEA,SAAK,UAAU,OAAO,KAAK,UAAU,SAAS,OAAO,KAAK;AAAA,EAC3D;AACD;",
  "names": ["Constants"]
}
