class u{constructor(e){this._callback=e}_terminalBufferMap=new Map;dispose(){for(const e of this._terminalBufferMap.values())e.dispose()}startBuffering(e,t,n=5){const s=t(r=>{const f=typeof r=="string"?r:r.data;let a=this._terminalBufferMap.get(e);if(a){a.data.push(f);return}const i=setTimeout(()=>this.flushBuffer(e),n);a={data:[f],timeoutId:i,dispose:()=>{clearTimeout(i),this.flushBuffer(e),s.dispose()}},this._terminalBufferMap.set(e,a)});return s}stopBuffering(e){this._terminalBufferMap.get(e)?.dispose()}flushBuffer(e){const t=this._terminalBufferMap.get(e);t&&(this._terminalBufferMap.delete(e),this._callback(e,t.data.join("")))}}export{u as TerminalDataBufferer};
