{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/terminalEnvironment.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as os from \"os\";\nimport { FileAccess } from \"../../../base/common/network.js\";\nimport { getCaseInsensitive } from \"../../../base/common/objects.js\";\nimport * as path from \"../../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport * as process from \"../../../base/common/process.js\";\nimport { format } from \"../../../base/common/strings.js\";\nimport { isString } from \"../../../base/common/types.js\";\nimport * as pfs from \"../../../base/node/pfs.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { IProductService } from \"../../product/common/productService.js\";\nimport { EnvironmentVariableMutatorType } from \"../common/environmentVariable.js\";\nimport { MergedEnvironmentVariableCollection } from \"../common/environmentVariableCollection.js\";\nimport { deserializeEnvironmentVariableCollections } from \"../common/environmentVariableShared.js\";\nimport type {\n\tIShellLaunchConfig,\n\tITerminalEnvironment,\n\tITerminalProcessOptions,\n} from \"../common/terminal.js\";\n\nexport function getWindowsBuildNumber(): number {\n\tconst osVersion = /(\\d+)\\.(\\d+)\\.(\\d+)/g.exec(os.release());\n\tlet buildNumber = 0;\n\tif (osVersion && osVersion.length === 4) {\n\t\tbuildNumber = Number.parseInt(osVersion[3]);\n\t}\n\treturn buildNumber;\n}\n\nexport async function findExecutable(\n\tcommand: string,\n\tcwd?: string,\n\tpaths?: string[],\n\tenv: IProcessEnvironment = process.env as IProcessEnvironment,\n\texists: (path: string) => Promise<boolean> = pfs.Promises.exists,\n): Promise<string | undefined> {\n\t// If we have an absolute path then we take it.\n\tif (path.isAbsolute(command)) {\n\t\treturn (await exists(command)) ? command : undefined;\n\t}\n\tif (cwd === undefined) {\n\t\tcwd = process.cwd();\n\t}\n\tconst dir = path.dirname(command);\n\tif (dir !== \".\") {\n\t\t// We have a directory and the directory is relative (see above). Make the path absolute\n\t\t// to the current working directory.\n\t\tconst fullPath = path.join(cwd, command);\n\t\treturn (await exists(fullPath)) ? fullPath : undefined;\n\t}\n\tconst envPath = getCaseInsensitive(env, \"PATH\");\n\tif (paths === undefined && isString(envPath)) {\n\t\tpaths = envPath.split(path.delimiter);\n\t}\n\t// No PATH environment. Make path absolute to the cwd.\n\tif (paths === undefined || paths.length === 0) {\n\t\tconst fullPath = path.join(cwd, command);\n\t\treturn (await exists(fullPath)) ? fullPath : undefined;\n\t}\n\t// We have a simple file name. We get the path variable from the env\n\t// and try to find the executable on the path.\n\tfor (const pathEntry of paths) {\n\t\t// The path entry is absolute.\n\t\tlet fullPath: string;\n\t\tif (path.isAbsolute(pathEntry)) {\n\t\t\tfullPath = path.join(pathEntry, command);\n\t\t} else {\n\t\t\tfullPath = path.join(cwd, pathEntry, command);\n\t\t}\n\n\t\tif (await exists(fullPath)) {\n\t\t\treturn fullPath;\n\t\t}\n\t\tif (isWindows) {\n\t\t\tlet withExtension = fullPath + \".com\";\n\t\t\tif (await exists(withExtension)) {\n\t\t\t\treturn withExtension;\n\t\t\t}\n\t\t\twithExtension = fullPath + \".exe\";\n\t\t\tif (await exists(withExtension)) {\n\t\t\t\treturn withExtension;\n\t\t\t}\n\t\t}\n\t}\n\tconst fullPath = path.join(cwd, command);\n\treturn (await exists(fullPath)) ? fullPath : undefined;\n}\n\nexport interface IShellIntegrationConfigInjection {\n\t/**\n\t * A new set of arguments to use.\n\t */\n\tnewArgs: string[] | undefined;\n\t/**\n\t * An optional environment to mixing to the real environment.\n\t */\n\tenvMixin?: IProcessEnvironment;\n\t/**\n\t * An optional array of files to copy from `source` to `dest`.\n\t */\n\tfilesToCopy?: {\n\t\tsource: string;\n\t\tdest: string;\n\t}[];\n}\n\n/**\n * For a given shell launch config, returns arguments to replace and an optional environment to\n * mixin to the SLC's environment to enable shell integration. This must be run within the context\n * that creates the process to ensure accuracy. Returns undefined if shell integration cannot be\n * enabled.\n */\nexport function getShellIntegrationInjection(\n\tshellLaunchConfig: IShellLaunchConfig,\n\toptions: ITerminalProcessOptions,\n\tenv: ITerminalEnvironment | undefined,\n\tlogService: ILogService,\n\tproductService: IProductService,\n): IShellIntegrationConfigInjection | undefined {\n\t// Conditionally disable shell integration arg injection\n\t// - The global setting is disabled\n\t// - There is no executable (not sure what script to run)\n\t// - The terminal is used by a feature like tasks or debugging\n\tconst useWinpty =\n\t\tisWindows &&\n\t\t(!options.windowsEnableConpty || getWindowsBuildNumber() < 18309);\n\tif (\n\t\t// The global setting is disabled\n\t\t!options.shellIntegration.enabled ||\n\t\t// There is no executable (so there's no way to determine how to inject)\n\t\t!shellLaunchConfig.executable ||\n\t\t// It's a feature terminal (tasks, debug), unless it's explicitly being forced\n\t\t(shellLaunchConfig.isFeatureTerminal &&\n\t\t\t!shellLaunchConfig.forceShellIntegration) ||\n\t\t// The ignoreShellIntegration flag is passed (eg. relaunching without shell integration)\n\t\tshellLaunchConfig.ignoreShellIntegration ||\n\t\t// Winpty is unsupported\n\t\tuseWinpty\n\t) {\n\t\treturn undefined;\n\t}\n\n\tconst originalArgs = shellLaunchConfig.args;\n\tconst shell =\n\t\tprocess.platform === \"win32\"\n\t\t\t? path.basename(shellLaunchConfig.executable).toLowerCase()\n\t\t\t: path.basename(shellLaunchConfig.executable);\n\tconst appRoot = path.dirname(FileAccess.asFileUri(\"\").fsPath);\n\tlet newArgs: string[] | undefined;\n\tconst envMixin: IProcessEnvironment = {\n\t\tVSCODE_INJECTION: \"1\",\n\t};\n\n\tif (options.shellIntegration.nonce) {\n\t\tenvMixin[\"VSCODE_NONCE\"] = options.shellIntegration.nonce;\n\t}\n\n\t// Windows\n\tif (isWindows) {\n\t\tif (shell === \"pwsh.exe\" || shell === \"powershell.exe\") {\n\t\t\tif (!originalArgs || arePwshImpliedArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.WindowsPwsh,\n\t\t\t\t);\n\t\t\t} else if (arePwshLoginArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.WindowsPwshLogin,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(\n\t\t\t\tnewArgs[newArgs.length - 1],\n\t\t\t\tappRoot,\n\t\t\t\t\"\",\n\t\t\t);\n\t\t\tenvMixin[\"VSCODE_STABLE\"] =\n\t\t\t\tproductService.quality === \"stable\" ? \"1\" : \"0\";\n\t\t\tif (options.shellIntegration.suggestEnabled) {\n\t\t\t\tenvMixin[\"VSCODE_SUGGEST\"] = \"1\";\n\t\t\t}\n\t\t\treturn { newArgs, envMixin };\n\t\t} else if (shell === \"bash.exe\") {\n\t\t\tif (!originalArgs || originalArgs.length === 0) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.Bash,\n\t\t\t\t);\n\t\t\t} else if (areZshBashLoginArgs(originalArgs)) {\n\t\t\t\tenvMixin[\"VSCODE_SHELL_LOGIN\"] = \"1\";\n\t\t\t\taddEnvMixinPathPrefix(options, envMixin);\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.Bash,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(\n\t\t\t\tnewArgs[newArgs.length - 1],\n\t\t\t\tappRoot,\n\t\t\t);\n\t\t\tenvMixin[\"VSCODE_STABLE\"] =\n\t\t\t\tproductService.quality === \"stable\" ? \"1\" : \"0\";\n\t\t\treturn { newArgs, envMixin };\n\t\t}\n\t\tlogService.warn(\n\t\t\t`Shell integration cannot be enabled for executable \"${shellLaunchConfig.executable}\" and args`,\n\t\t\tshellLaunchConfig.args,\n\t\t);\n\t\treturn undefined;\n\t}\n\n\t// Linux & macOS\n\tswitch (shell) {\n\t\tcase \"bash\": {\n\t\t\tif (!originalArgs || originalArgs.length === 0) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.Bash,\n\t\t\t\t);\n\t\t\t} else if (areZshBashLoginArgs(originalArgs)) {\n\t\t\t\tenvMixin[\"VSCODE_SHELL_LOGIN\"] = \"1\";\n\t\t\t\taddEnvMixinPathPrefix(options, envMixin);\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.Bash,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(\n\t\t\t\tnewArgs[newArgs.length - 1],\n\t\t\t\tappRoot,\n\t\t\t);\n\t\t\tenvMixin[\"VSCODE_STABLE\"] =\n\t\t\t\tproductService.quality === \"stable\" ? \"1\" : \"0\";\n\t\t\treturn { newArgs, envMixin };\n\t\t}\n\t\tcase \"fish\": {\n\t\t\t// The injection mechanism used for fish is to add a custom dir to $XDG_DATA_DIRS which\n\t\t\t// is similar to $ZDOTDIR in zsh but contains a list of directories to run from.\n\t\t\tconst oldDataDirs =\n\t\t\t\tenv?.XDG_DATA_DIRS ?? \"/usr/local/share:/usr/share\";\n\t\t\tconst newDataDir = path.join(\n\t\t\t\tappRoot,\n\t\t\t\t\"out/vs/workbench/contrib/terminal/common/scripts/fish_xdg_data\",\n\t\t\t);\n\t\t\tenvMixin[\"XDG_DATA_DIRS\"] = `${oldDataDirs}:${newDataDir}`;\n\t\t\taddEnvMixinPathPrefix(options, envMixin);\n\t\t\treturn { newArgs: undefined, envMixin };\n\t\t}\n\t\tcase \"pwsh\": {\n\t\t\tif (!originalArgs || arePwshImpliedArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.Pwsh,\n\t\t\t\t);\n\t\t\t} else if (arePwshLoginArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.PwshLogin,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (options.shellIntegration.suggestEnabled) {\n\t\t\t\tenvMixin[\"VSCODE_SUGGEST\"] = \"1\";\n\t\t\t}\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(\n\t\t\t\tnewArgs[newArgs.length - 1],\n\t\t\t\tappRoot,\n\t\t\t\t\"\",\n\t\t\t);\n\t\t\tenvMixin[\"VSCODE_STABLE\"] =\n\t\t\t\tproductService.quality === \"stable\" ? \"1\" : \"0\";\n\t\t\treturn { newArgs, envMixin };\n\t\t}\n\t\tcase \"zsh\": {\n\t\t\tif (!originalArgs || originalArgs.length === 0) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.Zsh,\n\t\t\t\t);\n\t\t\t} else if (areZshBashLoginArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(\n\t\t\t\t\tShellIntegrationExecutable.ZshLogin,\n\t\t\t\t);\n\t\t\t\taddEnvMixinPathPrefix(options, envMixin);\n\t\t\t} else if (\n\t\t\t\toriginalArgs ===\n\t\t\t\t\tshellIntegrationArgs.get(ShellIntegrationExecutable.Zsh) ||\n\t\t\t\toriginalArgs ===\n\t\t\t\t\tshellIntegrationArgs.get(\n\t\t\t\t\t\tShellIntegrationExecutable.ZshLogin,\n\t\t\t\t\t)\n\t\t\t) {\n\t\t\t\tnewArgs = originalArgs;\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(\n\t\t\t\tnewArgs[newArgs.length - 1],\n\t\t\t\tappRoot,\n\t\t\t);\n\n\t\t\t// Move .zshrc into $ZDOTDIR as the way to activate the script\n\t\t\tlet username: string;\n\t\t\ttry {\n\t\t\t\tusername = os.userInfo().username;\n\t\t\t} catch {\n\t\t\t\tusername = \"unknown\";\n\t\t\t}\n\t\t\tconst zdotdir = path.join(\n\t\t\t\tos.tmpdir(),\n\t\t\t\t`${username}-${productService.applicationName}-zsh`,\n\t\t\t);\n\t\t\tenvMixin[\"ZDOTDIR\"] = zdotdir;\n\t\t\tconst userZdotdir = env?.ZDOTDIR ?? os.homedir() ?? `~`;\n\t\t\tenvMixin[\"USER_ZDOTDIR\"] = userZdotdir;\n\t\t\tconst filesToCopy: IShellIntegrationConfigInjection[\"filesToCopy\"] =\n\t\t\t\t[];\n\t\t\tfilesToCopy.push({\n\t\t\t\tsource: path.join(\n\t\t\t\t\tappRoot,\n\t\t\t\t\t\"out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-rc.zsh\",\n\t\t\t\t),\n\t\t\t\tdest: path.join(zdotdir, \".zshrc\"),\n\t\t\t});\n\t\t\tfilesToCopy.push({\n\t\t\t\tsource: path.join(\n\t\t\t\t\tappRoot,\n\t\t\t\t\t\"out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-profile.zsh\",\n\t\t\t\t),\n\t\t\t\tdest: path.join(zdotdir, \".zprofile\"),\n\t\t\t});\n\t\t\tfilesToCopy.push({\n\t\t\t\tsource: path.join(\n\t\t\t\t\tappRoot,\n\t\t\t\t\t\"out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-env.zsh\",\n\t\t\t\t),\n\t\t\t\tdest: path.join(zdotdir, \".zshenv\"),\n\t\t\t});\n\t\t\tfilesToCopy.push({\n\t\t\t\tsource: path.join(\n\t\t\t\t\tappRoot,\n\t\t\t\t\t\"out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-login.zsh\",\n\t\t\t\t),\n\t\t\t\tdest: path.join(zdotdir, \".zlogin\"),\n\t\t\t});\n\t\t\treturn { newArgs, envMixin, filesToCopy };\n\t\t}\n\t}\n\tlogService.warn(\n\t\t`Shell integration cannot be enabled for executable \"${shellLaunchConfig.executable}\" and args`,\n\t\tshellLaunchConfig.args,\n\t);\n\treturn undefined;\n}\n\n/**\n * On macOS the profile calls path_helper which adds a bunch of standard bin directories to the\n * beginning of the PATH. This causes significant problems for the environment variable\n * collection API as the custom paths added to the end will now be somewhere in the middle of\n * the PATH. To combat this, VSCODE_PATH_PREFIX is used to re-apply any prefix after the profile\n * has run. This will cause duplication in the PATH but should fix the issue.\n *\n * See #99878 for more information.\n */\nfunction addEnvMixinPathPrefix(\n\toptions: ITerminalProcessOptions,\n\tenvMixin: IProcessEnvironment,\n): void {\n\tif (isMacintosh && options.environmentVariableCollections) {\n\t\t// Deserialize and merge\n\t\tconst deserialized = deserializeEnvironmentVariableCollections(\n\t\t\toptions.environmentVariableCollections,\n\t\t);\n\t\tconst merged = new MergedEnvironmentVariableCollection(deserialized);\n\n\t\t// Get all prepend PATH entries\n\t\tconst pathEntry = merged\n\t\t\t.getVariableMap({ workspaceFolder: options.workspaceFolder })\n\t\t\t.get(\"PATH\");\n\t\tconst prependToPath: string[] = [];\n\t\tif (pathEntry) {\n\t\t\tfor (const mutator of pathEntry) {\n\t\t\t\tif (mutator.type === EnvironmentVariableMutatorType.Prepend) {\n\t\t\t\t\tprependToPath.push(mutator.value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add to the environment mixin to be applied in the shell integration script\n\t\tif (prependToPath.length > 0) {\n\t\t\tenvMixin[\"VSCODE_PATH_PREFIX\"] = prependToPath.join(\"\");\n\t\t}\n\t}\n}\n\nenum ShellIntegrationExecutable {\n\tWindowsPwsh = \"windows-pwsh\",\n\tWindowsPwshLogin = \"windows-pwsh-login\",\n\tPwsh = \"pwsh\",\n\tPwshLogin = \"pwsh-login\",\n\tZsh = \"zsh\",\n\tZshLogin = \"zsh-login\",\n\tBash = \"bash\",\n}\n\nconst shellIntegrationArgs: Map<ShellIntegrationExecutable, string[]> =\n\tnew Map();\n// The try catch swallows execution policy errors in the case of the archive distributable\nshellIntegrationArgs.set(ShellIntegrationExecutable.WindowsPwsh, [\n\t\"-noexit\",\n\t\"-command\",\n\t'try { . \"{0}\\\\out\\\\vs\\\\workbench\\\\contrib\\\\terminal\\\\common\\\\scripts\\\\shellIntegration.ps1\" } catch {}{1}',\n]);\nshellIntegrationArgs.set(ShellIntegrationExecutable.WindowsPwshLogin, [\n\t\"-l\",\n\t\"-noexit\",\n\t\"-command\",\n\t'try { . \"{0}\\\\out\\\\vs\\\\workbench\\\\contrib\\\\terminal\\\\common\\\\scripts\\\\shellIntegration.ps1\" } catch {}{1}',\n]);\nshellIntegrationArgs.set(ShellIntegrationExecutable.Pwsh, [\n\t\"-noexit\",\n\t\"-command\",\n\t'. \"{0}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration.ps1\"{1}',\n]);\nshellIntegrationArgs.set(ShellIntegrationExecutable.PwshLogin, [\n\t\"-l\",\n\t\"-noexit\",\n\t\"-command\",\n\t'. \"{0}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration.ps1\"',\n]);\nshellIntegrationArgs.set(ShellIntegrationExecutable.Zsh, [\"-i\"]);\nshellIntegrationArgs.set(ShellIntegrationExecutable.ZshLogin, [\"-il\"]);\nshellIntegrationArgs.set(ShellIntegrationExecutable.Bash, [\n\t\"--init-file\",\n\t\"{0}/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-bash.sh\",\n]);\nconst pwshLoginArgs = [\"-login\", \"-l\"];\nconst shLoginArgs = [\"--login\", \"-l\"];\nconst shInteractiveArgs = [\"-i\", \"--interactive\"];\nconst pwshImpliedArgs = [\"-nol\", \"-nologo\"];\n\nfunction arePwshLoginArgs(originalArgs: string | string[]): boolean {\n\tif (typeof originalArgs === \"string\") {\n\t\treturn pwshLoginArgs.includes(originalArgs.toLowerCase());\n\t} else {\n\t\treturn (\n\t\t\t(originalArgs.length === 1 &&\n\t\t\t\tpwshLoginArgs.includes(originalArgs[0].toLowerCase())) ||\n\t\t\t(originalArgs.length === 2 &&\n\t\t\t\t(pwshLoginArgs.includes(originalArgs[0].toLowerCase()) ||\n\t\t\t\t\tpwshLoginArgs.includes(originalArgs[1].toLowerCase())) &&\n\t\t\t\t(pwshImpliedArgs.includes(originalArgs[0].toLowerCase()) ||\n\t\t\t\t\tpwshImpliedArgs.includes(originalArgs[1].toLowerCase())))\n\t\t);\n\t}\n}\n\nfunction arePwshImpliedArgs(originalArgs: string | string[]): boolean {\n\tif (typeof originalArgs === \"string\") {\n\t\treturn pwshImpliedArgs.includes(originalArgs.toLowerCase());\n\t} else {\n\t\treturn (\n\t\t\toriginalArgs.length === 0 ||\n\t\t\t(originalArgs?.length === 1 &&\n\t\t\t\tpwshImpliedArgs.includes(originalArgs[0].toLowerCase()))\n\t\t);\n\t}\n}\n\nfunction areZshBashLoginArgs(originalArgs: string | string[]): boolean {\n\tif (typeof originalArgs !== \"string\") {\n\t\toriginalArgs = originalArgs.filter(\n\t\t\t(arg) => !shInteractiveArgs.includes(arg.toLowerCase()),\n\t\t);\n\t}\n\treturn (\n\t\t(originalArgs === \"string\" &&\n\t\t\tshLoginArgs.includes(originalArgs.toLowerCase())) ||\n\t\t(typeof originalArgs !== \"string\" &&\n\t\t\toriginalArgs.length === 1 &&\n\t\t\tshLoginArgs.includes(originalArgs[0].toLowerCase()))\n\t);\n}\n"],
  "mappings": "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",
  "names": ["fullPath", "ShellIntegrationExecutable"]
}
