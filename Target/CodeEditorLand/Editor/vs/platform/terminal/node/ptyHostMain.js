import{timeout as f}from"../../../base/common/async.js";import{DisposableStore as g}from"../../../base/common/lifecycle.js";import{DefaultURITransformer as _}from"../../../base/common/uriIpc.js";import{ProxyChannel as v}from"../../../base/parts/ipc/common/ipc.js";import{Server as y}from"../../../base/parts/ipc/node/ipc.cp.js";import{Server as d}from"../../../base/parts/ipc/node/ipc.mp.js";import{isUtilityProcess as T}from"../../../base/parts/sandbox/node/electronTypes.js";import{localize as O}from"../../../nls.js";import{OPTIONS as N,parseArgs as P}from"../../environment/node/argv.js";import{NativeEnvironmentService as u}from"../../environment/node/environmentService.js";import{getLogLevel as R}from"../../log/common/log.js";import{LoggerChannel as I}from"../../log/common/logIpc.js";import{LogService as L}from"../../log/common/logService.js";import{LoggerService as h}from"../../log/node/loggerService.js";import D from"../../product/common/product.js";import{TerminalIpcChannels as t}from"../common/terminal.js";import{HeartbeatService as w}from"./heartbeatService.js";import{PtyService as A}from"./ptyService.js";H();async function H(){const o=Number.parseInt(process.env.VSCODE_STARTUP_DELAY??"0"),s=Number.parseInt(process.env.VSCODE_LATENCY??"0"),l={graceTime:Number.parseInt(process.env.VSCODE_RECONNECT_GRACE_TIME||"0"),shortGraceTime:Number.parseInt(process.env.VSCODE_RECONNECT_SHORT_GRACE_TIME||"0"),scrollback:Number.parseInt(process.env.VSCODE_RECONNECT_SCROLLBACK||"100")};delete process.env.VSCODE_RECONNECT_GRACE_TIME,delete process.env.VSCODE_RECONNECT_SHORT_GRACE_TIME,delete process.env.VSCODE_RECONNECT_SCROLLBACK,delete process.env.VSCODE_LATENCY,delete process.env.VSCODE_STARTUP_DELAY,o&&await f(o);const n=T(process);let e;n?e=new d:e=new y(t.PtyHost);const i={_serviceBrand:void 0,...D},c=new u(P(process.argv,N),i),m=new h(R(c),c.logsHome);e.registerChannel(t.Logger,new I(m,()=>_));const E=m.createLogger("ptyhost",{name:O("ptyHost","Pty Host")}),r=new L(E);o&&r.warn(`Pty Host startup is delayed ${o}ms`),s&&r.warn(`Pty host is simulating ${s}ms latency`);const p=new g,a=new w;e.registerChannel(t.Heartbeat,v.fromService(a,p));const C=new A(r,i,l,s),S=v.fromService(C,p);e.registerChannel(t.PtyHost,S),n&&e.registerChannel(t.PtyHostWindow,S),process.once("exit",()=>{r.trace("Pty host exiting"),r.dispose(),a.dispose(),C.dispose()})}
