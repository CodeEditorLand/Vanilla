{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/nodePtyHostStarter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { FileAccess, Schemas } from '../../../base/common/network.js';\nimport { Client, IIPCOptions } from '../../../base/parts/ipc/node/ipc.cp.js';\nimport { IEnvironmentService, INativeEnvironmentService } from '../../environment/common/environment.js';\nimport { parsePtyHostDebugPort } from '../../environment/node/environmentService.js';\nimport { IReconnectConstants } from '../common/terminal.js';\nimport { IPtyHostConnection, IPtyHostStarter } from './ptyHost.js';\n\nexport class NodePtyHostStarter extends Disposable implements IPtyHostStarter {\n\tconstructor(\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\t@IEnvironmentService private readonly _environmentService: INativeEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(): IPtyHostConnection {\n\t\tconst opts: IIPCOptions = {\n\t\t\tserverName: 'Pty Host',\n\t\t\targs: ['--type=ptyHost', '--logsPath', this._environmentService.logsHome.with({ scheme: Schemas.file }).fsPath],\n\t\t\tenv: {\n\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/platform/terminal/node/ptyHostMain',\n\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\tVSCODE_VERBOSE_LOGGING: 'true', // transmit console logs from server to client,\n\t\t\t\tVSCODE_RECONNECT_GRACE_TIME: this._reconnectConstants.graceTime,\n\t\t\t\tVSCODE_RECONNECT_SHORT_GRACE_TIME: this._reconnectConstants.shortGraceTime,\n\t\t\t\tVSCODE_RECONNECT_SCROLLBACK: this._reconnectConstants.scrollback\n\t\t\t}\n\t\t};\n\n\t\tconst ptyHostDebug = parsePtyHostDebugPort(this._environmentService.args, this._environmentService.isBuilt);\n\t\tif (ptyHostDebug) {\n\t\t\tif (ptyHostDebug.break && ptyHostDebug.port) {\n\t\t\t\topts.debugBrk = ptyHostDebug.port;\n\t\t\t} else if (!ptyHostDebug.break && ptyHostDebug.port) {\n\t\t\t\topts.debug = ptyHostDebug.port;\n\t\t\t}\n\t\t}\n\n\t\tconst client = new Client(FileAccess.asFileUri('bootstrap-fork').fsPath, opts);\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(client);\n\n\t\treturn {\n\t\t\tclient,\n\t\t\tstore,\n\t\t\tonDidProcessExit: client.onDidProcessExit\n\t\t};\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,YAAY,uBAAuB;AAC5C,SAAS,YAAY,eAAe;AACpC,SAAS,QAAQ,mBAAmB;AACpC,SAAS,qBAAqB,iCAAiC;AAC/D,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,oBAAoB,uBAAuB;AAE7C,IAAM,qBAAN,cAAiC,WAAsC;AAAA,EAC7E,YACkB,qBACqB,qBACrC;AACD,UAAM;AAHW;AACqB;AAAA,EAGvC;AAAA,EAnBD,OAa8E;AAAA;AAAA;AAAA,EAQ7E,QAA4B;AAC3B,UAAM,OAAoB;AAAA,MACzB,YAAY;AAAA,MACZ,MAAM,CAAC,kBAAkB,cAAc,KAAK,oBAAoB,SAAS,KAAK,EAAE,QAAQ,QAAQ,KAAK,CAAC,EAAE,MAAM;AAAA,MAC9G,KAAK;AAAA,QACJ,uBAAuB;AAAA,QACvB,qBAAqB;AAAA,QACrB,wBAAwB;AAAA;AAAA,QACxB,6BAA6B,KAAK,oBAAoB;AAAA,QACtD,mCAAmC,KAAK,oBAAoB;AAAA,QAC5D,6BAA6B,KAAK,oBAAoB;AAAA,MACvD;AAAA,IACD;AAEA,UAAM,eAAe,sBAAsB,KAAK,oBAAoB,MAAM,KAAK,oBAAoB,OAAO;AAC1G,QAAI,cAAc;AACjB,UAAI,aAAa,SAAS,aAAa,MAAM;AAC5C,aAAK,WAAW,aAAa;AAAA,MAC9B,WAAW,CAAC,aAAa,SAAS,aAAa,MAAM;AACpD,aAAK,QAAQ,aAAa;AAAA,MAC3B;AAAA,IACD;AAEA,UAAM,SAAS,IAAI,OAAO,WAAW,UAAU,gBAAgB,EAAE,QAAQ,IAAI;AAE7E,UAAM,QAAQ,IAAI,gBAAgB;AAClC,UAAM,IAAI,MAAM;AAEhB,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA,kBAAkB,OAAO;AAAA,IAC1B;AAAA,EACD;AACD;AA1Ca,qBAAN;AAAA,EAGJ;AAAA,GAHU;",
  "names": []
}
