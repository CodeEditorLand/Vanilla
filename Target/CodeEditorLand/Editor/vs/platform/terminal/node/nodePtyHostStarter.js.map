{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/nodePtyHostStarter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { FileAccess, Schemas } from \"../../../base/common/network.js\";\nimport {\n\tClient,\n\ttype IIPCOptions,\n} from \"../../../base/parts/ipc/node/ipc.cp.js\";\nimport {\n\tIEnvironmentService,\n\ttype INativeEnvironmentService,\n} from \"../../environment/common/environment.js\";\nimport { parsePtyHostDebugPort } from \"../../environment/node/environmentService.js\";\nimport type { IReconnectConstants } from \"../common/terminal.js\";\nimport type { IPtyHostConnection, IPtyHostStarter } from \"./ptyHost.js\";\n\nexport class NodePtyHostStarter extends Disposable implements IPtyHostStarter {\n\tconstructor(\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\t@IEnvironmentService private readonly _environmentService: INativeEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(): IPtyHostConnection {\n\t\tconst opts: IIPCOptions = {\n\t\t\tserverName: \"Pty Host\",\n\t\t\targs: [\n\t\t\t\t\"--type=ptyHost\",\n\t\t\t\t\"--logsPath\",\n\t\t\t\tthis._environmentService.logsHome.with({ scheme: Schemas.file })\n\t\t\t\t\t.fsPath,\n\t\t\t],\n\t\t\tenv: {\n\t\t\t\tVSCODE_AMD_ENTRYPOINT: \"vs/platform/terminal/node/ptyHostMain\",\n\t\t\t\tVSCODE_PIPE_LOGGING: \"true\",\n\t\t\t\tVSCODE_VERBOSE_LOGGING: \"true\", // transmit console logs from server to client,\n\t\t\t\tVSCODE_RECONNECT_GRACE_TIME: this._reconnectConstants.graceTime,\n\t\t\t\tVSCODE_RECONNECT_SHORT_GRACE_TIME:\n\t\t\t\t\tthis._reconnectConstants.shortGraceTime,\n\t\t\t\tVSCODE_RECONNECT_SCROLLBACK:\n\t\t\t\t\tthis._reconnectConstants.scrollback,\n\t\t\t},\n\t\t};\n\n\t\tconst ptyHostDebug = parsePtyHostDebugPort(\n\t\t\tthis._environmentService.args,\n\t\t\tthis._environmentService.isBuilt,\n\t\t);\n\t\tif (ptyHostDebug) {\n\t\t\tif (ptyHostDebug.break && ptyHostDebug.port) {\n\t\t\t\topts.debugBrk = ptyHostDebug.port;\n\t\t\t} else if (!ptyHostDebug.break && ptyHostDebug.port) {\n\t\t\t\topts.debug = ptyHostDebug.port;\n\t\t\t}\n\t\t}\n\n\t\tconst client = new Client(\n\t\t\tFileAccess.asFileUri(\"bootstrap-fork\").fsPath,\n\t\t\topts,\n\t\t);\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(client);\n\n\t\treturn {\n\t\t\tclient,\n\t\t\tstore,\n\t\t\tonDidProcessExit: client.onDidProcessExit,\n\t\t};\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,YAAY,uBAAuB;AAC5C,SAAS,YAAY,eAAe;AACpC;AAAA,EACC;AAAA,OAEM;AACP;AAAA,EACC;AAAA,OAEM;AACP,SAAS,6BAA6B;AAI/B,IAAM,qBAAN,cAAiC,WAAsC;AAAA,EAC7E,YACkB,qBACqB,qBACrC;AACD,UAAM;AAHW;AACqB;AAAA,EAGvC;AAAA,EAzBD,OAmB8E;AAAA;AAAA;AAAA,EAQ7E,QAA4B;AAC3B,UAAM,OAAoB;AAAA,MACzB,YAAY;AAAA,MACZ,MAAM;AAAA,QACL;AAAA,QACA;AAAA,QACA,KAAK,oBAAoB,SAAS,KAAK,EAAE,QAAQ,QAAQ,KAAK,CAAC,EAC7D;AAAA,MACH;AAAA,MACA,KAAK;AAAA,QACJ,uBAAuB;AAAA,QACvB,qBAAqB;AAAA,QACrB,wBAAwB;AAAA;AAAA,QACxB,6BAA6B,KAAK,oBAAoB;AAAA,QACtD,mCACC,KAAK,oBAAoB;AAAA,QAC1B,6BACC,KAAK,oBAAoB;AAAA,MAC3B;AAAA,IACD;AAEA,UAAM,eAAe;AAAA,MACpB,KAAK,oBAAoB;AAAA,MACzB,KAAK,oBAAoB;AAAA,IAC1B;AACA,QAAI,cAAc;AACjB,UAAI,aAAa,SAAS,aAAa,MAAM;AAC5C,aAAK,WAAW,aAAa;AAAA,MAC9B,WAAW,CAAC,aAAa,SAAS,aAAa,MAAM;AACpD,aAAK,QAAQ,aAAa;AAAA,MAC3B;AAAA,IACD;AAEA,UAAM,SAAS,IAAI;AAAA,MAClB,WAAW,UAAU,gBAAgB,EAAE;AAAA,MACvC;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,gBAAgB;AAClC,UAAM,IAAI,MAAM;AAEhB,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA,kBAAkB,OAAO;AAAA,IAC1B;AAAA,EACD;AACD;AAvDa,qBAAN;AAAA,EAGJ;AAAA,GAHU;",
  "names": []
}
