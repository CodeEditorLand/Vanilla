{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/terminalProcess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exec } from \"child_process\";\nimport * as fs from \"fs\";\nimport {\n\ttype IPty,\n\ttype IPtyForkOptions,\n\ttype IWindowsPtyForkOptions,\n\tspawn,\n} from \"node-pty\";\nimport { timeout } from \"../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable, toDisposable } from \"../../../base/common/lifecycle.js\";\nimport * as path from \"../../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tisLinux,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport { ILogService, LogLevel } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\tFlowControlConstants,\n\tGeneralShellType,\n\ttype IProcessProperty,\n\ttype IProcessPropertyMap,\n\ttype IProcessReadyEvent,\n\ttype IProcessReadyWindowsPty,\n\ttype IShellLaunchConfig,\n\ttype ITerminalChildProcess,\n\ttype ITerminalLaunchError,\n\ttype ITerminalProcessOptions,\n\tPosixShellType,\n\tProcessPropertyType,\n\ttype TerminalShellType,\n} from \"../common/terminal.js\";\nimport { chunkInput } from \"../common/terminalProcess.js\";\nimport { ChildProcessMonitor } from \"./childProcessMonitor.js\";\nimport {\n\ttype IShellIntegrationConfigInjection,\n\tfindExecutable,\n\tgetShellIntegrationInjection,\n\tgetWindowsBuildNumber,\n} from \"./terminalEnvironment.js\";\nimport { WindowsShellHelper } from \"./windowsShellHelper.js\";\n\nenum ShutdownConstants {\n\t/**\n\t * The amount of ms that must pass between data events after exit is queued before the actual\n\t * kill call is triggered. This data flush mechanism works around an [issue in node-pty][1]\n\t * where not all data is flushed which causes problems for task problem matchers. Additionally\n\t * on Windows under conpty, killing a process while data is being output will cause the [conhost\n\t * flush to hang the pty host][2] because [conhost should be hosted on another thread][3].\n\t *\n\t * [1]: https://github.com/Tyriar/node-pty/issues/72\n\t * [2]: https://github.com/microsoft/vscode/issues/71966\n\t * [3]: https://github.com/microsoft/node-pty/pull/415\n\t */\n\tDataFlushTimeout = 250,\n\t/**\n\t * The maximum ms to allow after dispose is called because forcefully killing the process.\n\t */\n\tMaximumShutdownTime = 5000,\n}\n\nenum Constants {\n\t/**\n\t * The minimum duration between kill and spawn calls on Windows/conpty as a mitigation for a\n\t * hang issue. See:\n\t * - https://github.com/microsoft/vscode/issues/71966\n\t * - https://github.com/microsoft/vscode/issues/117956\n\t * - https://github.com/microsoft/vscode/issues/121336\n\t */\n\tKillSpawnThrottleInterval = 250,\n\t/**\n\t * The amount of time to wait when a call is throttles beyond the exact amount, this is used to\n\t * try prevent early timeouts causing a kill/spawn call to happen at double the regular\n\t * interval.\n\t */\n\tKillSpawnSpacingDuration = 50,\n\t/**\n\t * How long to wait between chunk writes.\n\t */\n\tWriteInterval = 5,\n}\n\ninterface IWriteObject {\n\tdata: string;\n\tisBinary: boolean;\n}\n\nconst posixShellTypeMap = new Map<string, PosixShellType>([\n\t[\"bash\", PosixShellType.Bash],\n\t[\"csh\", PosixShellType.Csh],\n\t[\"fish\", PosixShellType.Fish],\n\t[\"ksh\", PosixShellType.Ksh],\n\t[\"sh\", PosixShellType.Sh],\n\t[\"zsh\", PosixShellType.Zsh],\n]);\n\nconst generalShellTypeMap = new Map<string, GeneralShellType>([\n\t[\"pwsh\", GeneralShellType.PowerShell],\n\t[\"python\", GeneralShellType.Python],\n\t[\"julia\", GeneralShellType.Julia],\n\t[\"nu\", GeneralShellType.NuShell],\n]);\nexport class TerminalProcess\n\textends Disposable\n\timplements ITerminalChildProcess\n{\n\treadonly id = 0;\n\treadonly shouldPersist = false;\n\n\tprivate _properties: IProcessPropertyMap = {\n\t\tcwd: \"\",\n\t\tinitialCwd: \"\",\n\t\tfixedDimensions: { cols: undefined, rows: undefined },\n\t\ttitle: \"\",\n\t\tshellType: undefined,\n\t\thasChildProcesses: true,\n\t\tresolvedShellLaunchConfig: {},\n\t\toverrideDimensions: undefined,\n\t\tfailedShellIntegrationActivation: false,\n\t\tusedShellIntegrationInjection: undefined,\n\t};\n\tprivate static _lastKillOrStart = 0;\n\tprivate _exitCode: number | undefined;\n\tprivate _exitMessage: string | undefined;\n\tprivate _closeTimeout: any;\n\tprivate _ptyProcess: IPty | undefined;\n\tprivate _currentTitle = \"\";\n\tprivate _processStartupComplete: Promise<void> | undefined;\n\tprivate _windowsShellHelper: WindowsShellHelper | undefined;\n\tprivate _childProcessMonitor: ChildProcessMonitor | undefined;\n\tprivate _titleInterval: NodeJS.Timeout | null = null;\n\tprivate _writeQueue: IWriteObject[] = [];\n\tprivate _writeTimeout: NodeJS.Timeout | undefined;\n\tprivate _delayedResizer: DelayedResizer | undefined;\n\tprivate readonly _initialCwd: string;\n\tprivate readonly _ptyOptions: IPtyForkOptions | IWindowsPtyForkOptions;\n\n\tprivate _isPtyPaused = false;\n\tprivate _unacknowledgedCharCount = 0;\n\tget exitMessage(): string | undefined {\n\t\treturn this._exitMessage;\n\t}\n\n\tget currentTitle(): string {\n\t\treturn this._windowsShellHelper?.shellTitle || this._currentTitle;\n\t}\n\tget shellType(): TerminalShellType | undefined {\n\t\treturn isWindows\n\t\t\t? this._windowsShellHelper?.shellType\n\t\t\t: posixShellTypeMap.get(this._currentTitle) ||\n\t\t\t\t\tgeneralShellTypeMap.get(this._currentTitle);\n\t}\n\tget hasChildProcesses(): boolean {\n\t\treturn this._childProcessMonitor?.hasChildProcesses || false;\n\t}\n\n\tprivate readonly _onProcessData = this._register(new Emitter<string>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReady = this._register(\n\t\tnew Emitter<IProcessReadyEvent>(),\n\t);\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onDidChangeProperty = this._register(\n\t\tnew Emitter<IProcessProperty<any>>(),\n\t);\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\n\tconstructor(\n\t\treadonly shellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tenv: IProcessEnvironment,\n\t\t/**\n\t\t * environment used for `findExecutable`\n\t\t */\n\t\tprivate readonly _executableEnv: IProcessEnvironment,\n\t\tprivate readonly _options: ITerminalProcessOptions,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tlet name: string;\n\t\tif (isWindows) {\n\t\t\tname = path.basename(this.shellLaunchConfig.executable || \"\");\n\t\t} else {\n\t\t\t// Using 'xterm-256color' here helps ensure that the majority of Linux distributions will use a\n\t\t\t// color prompt as defined in the default ~/.bashrc file.\n\t\t\tname = \"xterm-256color\";\n\t\t}\n\t\tthis._initialCwd = cwd;\n\t\tthis._properties[ProcessPropertyType.InitialCwd] = this._initialCwd;\n\t\tthis._properties[ProcessPropertyType.Cwd] = this._initialCwd;\n\t\tconst useConpty =\n\t\t\tthis._options.windowsEnableConpty &&\n\t\t\tprocess.platform === \"win32\" &&\n\t\t\tgetWindowsBuildNumber() >= 18309;\n\t\tconst useConptyDll = useConpty && this._options.windowsUseConptyDll;\n\t\tthis._ptyOptions = {\n\t\t\tname,\n\t\t\tcwd,\n\t\t\t// TODO: When node-pty is updated this cast can be removed\n\t\t\tenv: env as { [key: string]: string },\n\t\t\tcols,\n\t\t\trows,\n\t\t\tuseConpty,\n\t\t\tuseConptyDll,\n\t\t\t// This option will force conpty to not redraw the whole viewport on launch\n\t\t\tconptyInheritCursor: useConpty && !!shellLaunchConfig.initialText,\n\t\t};\n\t\t// Delay resizes to avoid conpty not respecting very early resize calls\n\t\tif (isWindows) {\n\t\t\tif (\n\t\t\t\tuseConpty &&\n\t\t\t\tcols === 0 &&\n\t\t\t\trows === 0 &&\n\t\t\t\tthis.shellLaunchConfig.executable?.endsWith(\n\t\t\t\t\t\"Git\\\\bin\\\\bash.exe\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis._delayedResizer = new DelayedResizer();\n\t\t\t\tthis._register(\n\t\t\t\t\tthis._delayedResizer.onTrigger((dimensions) => {\n\t\t\t\t\t\tthis._delayedResizer?.dispose();\n\t\t\t\t\t\tthis._delayedResizer = undefined;\n\t\t\t\t\t\tif (dimensions.cols && dimensions.rows) {\n\t\t\t\t\t\t\tthis.resize(dimensions.cols, dimensions.rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t\t// WindowsShellHelper is used to fetch the process title and shell type\n\t\t\tthis.onProcessReady((e) => {\n\t\t\t\tthis._windowsShellHelper = this._register(\n\t\t\t\t\tnew WindowsShellHelper(e.pid),\n\t\t\t\t);\n\t\t\t\tthis._register(\n\t\t\t\t\tthis._windowsShellHelper.onShellTypeChanged((e) =>\n\t\t\t\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\t\t\t\ttype: ProcessPropertyType.ShellType,\n\t\t\t\t\t\t\tvalue: e,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._register(\n\t\t\t\t\tthis._windowsShellHelper.onShellNameChanged((e) =>\n\t\t\t\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\t\t\t\ttype: ProcessPropertyType.Title,\n\t\t\t\t\t\t\tvalue: e,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tif (this._titleInterval) {\n\t\t\t\t\tclearInterval(this._titleInterval);\n\t\t\t\t\tthis._titleInterval = null;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync start(): Promise<\n\t\tITerminalLaunchError | { injectedArgs: string[] } | undefined\n\t> {\n\t\tconst results = await Promise.all([\n\t\t\tthis._validateCwd(),\n\t\t\tthis._validateExecutable(),\n\t\t]);\n\t\tconst firstError = results.find((r) => r !== undefined);\n\t\tif (firstError) {\n\t\t\treturn firstError;\n\t\t}\n\n\t\tlet injection: IShellIntegrationConfigInjection | undefined;\n\t\tif (this._options.shellIntegration.enabled) {\n\t\t\tinjection = getShellIntegrationInjection(\n\t\t\t\tthis.shellLaunchConfig,\n\t\t\t\tthis._options,\n\t\t\t\tthis._ptyOptions.env,\n\t\t\t\tthis._logService,\n\t\t\t\tthis._productService,\n\t\t\t);\n\t\t\tif (injection) {\n\t\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\t\ttype: ProcessPropertyType.UsedShellIntegrationInjection,\n\t\t\t\t\tvalue: true,\n\t\t\t\t});\n\t\t\t\tif (injection.envMixin) {\n\t\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\t\tinjection.envMixin,\n\t\t\t\t\t)) {\n\t\t\t\t\t\tthis._ptyOptions.env ||= {};\n\t\t\t\t\t\tthis._ptyOptions.env[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (injection.filesToCopy) {\n\t\t\t\t\tfor (const f of injection.filesToCopy) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait fs.promises.mkdir(path.dirname(f.dest), {\n\t\t\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait fs.promises.copyFile(f.source, f.dest);\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t// Swallow error, this should only happen when multiple users are on the same\n\t\t\t\t\t\t\t// machine. Since the shell integration scripts rarely change, plus the other user\n\t\t\t\t\t\t\t// should be using the same version of the server in this case, assume the script is\n\t\t\t\t\t\t\t// fine if copy fails and swallow the error.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\t\ttype: ProcessPropertyType.FailedShellIntegrationActivation,\n\t\t\t\t\tvalue: true,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.setupPtyProcess(\n\t\t\t\tthis.shellLaunchConfig,\n\t\t\t\tthis._ptyOptions,\n\t\t\t\tinjection,\n\t\t\t);\n\t\t\tif (injection?.newArgs) {\n\t\t\t\treturn { injectedArgs: injection.newArgs };\n\t\t\t}\n\t\t\treturn undefined;\n\t\t} catch (err) {\n\t\t\tthis._logService.trace(\n\t\t\t\t\"node-pty.node-pty.IPty#spawn native exception\",\n\t\t\t\terr,\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tmessage: `A native exception occurred during launch (${err.message})`,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate async _validateCwd(): Promise<undefined | ITerminalLaunchError> {\n\t\ttry {\n\t\t\tconst result = await fs.promises.stat(this._initialCwd);\n\t\t\tif (!result.isDirectory()) {\n\t\t\t\treturn {\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\"launchFail.cwdNotDirectory\",\n\t\t\t\t\t\t'Starting directory (cwd) \"{0}\" is not a directory',\n\t\t\t\t\t\tthis._initialCwd.toString(),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err?.code === \"ENOENT\") {\n\t\t\t\treturn {\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\"launchFail.cwdDoesNotExist\",\n\t\t\t\t\t\t'Starting directory (cwd) \"{0}\" does not exist',\n\t\t\t\t\t\tthis._initialCwd.toString(),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tthis._onDidChangeProperty.fire({\n\t\t\ttype: ProcessPropertyType.InitialCwd,\n\t\t\tvalue: this._initialCwd,\n\t\t});\n\t\treturn undefined;\n\t}\n\n\tprivate async _validateExecutable(): Promise<\n\t\tundefined | ITerminalLaunchError\n\t> {\n\t\tconst slc = this.shellLaunchConfig;\n\t\tif (!slc.executable) {\n\t\t\tthrow new Error(\"IShellLaunchConfig.executable not set\");\n\t\t}\n\n\t\tconst cwd = slc.cwd instanceof URI ? slc.cwd.path : slc.cwd;\n\t\tconst envPaths: string[] | undefined =\n\t\t\tslc.env && slc.env.PATH\n\t\t\t\t? slc.env.PATH.split(path.delimiter)\n\t\t\t\t: undefined;\n\t\tconst executable = await findExecutable(\n\t\t\tslc.executable,\n\t\t\tcwd,\n\t\t\tenvPaths,\n\t\t\tthis._executableEnv,\n\t\t);\n\t\tif (!executable) {\n\t\t\treturn {\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"launchFail.executableDoesNotExist\",\n\t\t\t\t\t'Path to shell executable \"{0}\" does not exist',\n\t\t\t\t\tslc.executable,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tconst result = await fs.promises.stat(executable);\n\t\t\tif (!result.isFile() && !result.isSymbolicLink()) {\n\t\t\t\treturn {\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\"launchFail.executableIsNotFileOrSymlink\",\n\t\t\t\t\t\t'Path to shell executable \"{0}\" is not a file or a symlink',\n\t\t\t\t\t\tslc.executable,\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t\t// Set the executable explicitly here so that node-pty doesn't need to search the\n\t\t\t// $PATH too.\n\t\t\tslc.executable = executable;\n\t\t} catch (err) {\n\t\t\tif (err?.code === \"EACCES\") {\n\t\t\t\t// Swallow\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async setupPtyProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\toptions: IPtyForkOptions,\n\t\tshellIntegrationInjection: IShellIntegrationConfigInjection | undefined,\n\t): Promise<void> {\n\t\tconst args =\n\t\t\tshellIntegrationInjection?.newArgs || shellLaunchConfig.args || [];\n\t\tawait this._throttleKillSpawn();\n\t\tthis._logService.trace(\n\t\t\t\"node-pty.IPty#spawn\",\n\t\t\tshellLaunchConfig.executable,\n\t\t\targs,\n\t\t\toptions,\n\t\t);\n\t\tconst ptyProcess = spawn(shellLaunchConfig.executable!, args, options);\n\t\tthis._ptyProcess = ptyProcess;\n\t\tthis._childProcessMonitor = this._register(\n\t\t\tnew ChildProcessMonitor(ptyProcess.pid, this._logService),\n\t\t);\n\t\tthis._childProcessMonitor.onDidChangeHasChildProcesses((value) =>\n\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\ttype: ProcessPropertyType.HasChildProcesses,\n\t\t\t\tvalue,\n\t\t\t}),\n\t\t);\n\t\tthis._processStartupComplete = new Promise<void>((c) => {\n\t\t\tthis.onProcessReady(() => c());\n\t\t});\n\t\tptyProcess.onData((data) => {\n\t\t\t// Handle flow control\n\t\t\tthis._unacknowledgedCharCount += data.length;\n\t\t\tif (\n\t\t\t\t!this._isPtyPaused &&\n\t\t\t\tthis._unacknowledgedCharCount >\n\t\t\t\t\tFlowControlConstants.HighWatermarkChars\n\t\t\t) {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t`Flow control: Pause (${this._unacknowledgedCharCount} > ${FlowControlConstants.HighWatermarkChars})`,\n\t\t\t\t);\n\t\t\t\tthis._isPtyPaused = true;\n\t\t\t\tptyProcess.pause();\n\t\t\t}\n\n\t\t\t// Refire the data event\n\t\t\tthis._logService.trace(\"node-pty.IPty#onData\", data);\n\t\t\tthis._onProcessData.fire(data);\n\t\t\tif (this._closeTimeout) {\n\t\t\t\tthis._queueProcessExit();\n\t\t\t}\n\t\t\tthis._windowsShellHelper?.checkShell();\n\t\t\tthis._childProcessMonitor?.handleOutput();\n\t\t});\n\t\tptyProcess.onExit((e) => {\n\t\t\tthis._exitCode = e.exitCode;\n\t\t\tthis._queueProcessExit();\n\t\t});\n\t\tthis._sendProcessId(ptyProcess.pid);\n\t\tthis._setupTitlePolling(ptyProcess);\n\t}\n\n\tprivate _setupTitlePolling(ptyProcess: IPty) {\n\t\t// Send initial timeout async to give event listeners a chance to init\n\t\tsetTimeout(() => this._sendProcessTitle(ptyProcess));\n\t\t// Setup polling for non-Windows, for Windows `process` doesn't change\n\t\tif (!isWindows) {\n\t\t\tthis._titleInterval = setInterval(() => {\n\t\t\t\tif (this._currentTitle !== ptyProcess.process) {\n\t\t\t\t\tthis._sendProcessTitle(ptyProcess);\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t}\n\t}\n\n\t// Allow any trailing data events to be sent before the exit event is sent.\n\t// See https://github.com/Tyriar/node-pty/issues/72\n\tprivate _queueProcessExit() {\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace(\n\t\t\t\t\"TerminalProcess#_queueProcessExit\",\n\t\t\t\tnew Error().stack?.replace(/^Error/, \"\"),\n\t\t\t);\n\t\t}\n\t\tif (this._closeTimeout) {\n\t\t\tclearTimeout(this._closeTimeout);\n\t\t}\n\t\tthis._closeTimeout = setTimeout(() => {\n\t\t\tthis._closeTimeout = undefined;\n\t\t\tthis._kill();\n\t\t}, ShutdownConstants.DataFlushTimeout);\n\t}\n\n\tprivate async _kill(): Promise<void> {\n\t\t// Wait to kill to process until the start up code has run. This prevents us from firing a process exit before a\n\t\t// process start.\n\t\tawait this._processStartupComplete;\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\t// Attempt to kill the pty, it may have already been killed at this\n\t\t// point but we want to make sure\n\t\ttry {\n\t\t\tif (this._ptyProcess) {\n\t\t\t\tawait this._throttleKillSpawn();\n\t\t\t\tthis._logService.trace(\"node-pty.IPty#kill\");\n\t\t\t\tthis._ptyProcess.kill();\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\t// Swallow, the pty has already been killed\n\t\t}\n\t\tthis._onProcessExit.fire(this._exitCode || 0);\n\t\tthis.dispose();\n\t}\n\n\tprivate async _throttleKillSpawn(): Promise<void> {\n\t\t// Only throttle on Windows/conpty\n\t\tif (\n\t\t\t!isWindows ||\n\t\t\t!(\"useConpty\" in this._ptyOptions) ||\n\t\t\t!this._ptyOptions.useConpty\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\t// Use a loop to ensure multiple calls in a single interval space out\n\t\twhile (\n\t\t\tDate.now() - TerminalProcess._lastKillOrStart <\n\t\t\tConstants.KillSpawnThrottleInterval\n\t\t) {\n\t\t\tthis._logService.trace(\"Throttling kill/spawn call\");\n\t\t\tawait timeout(\n\t\t\t\tConstants.KillSpawnThrottleInterval -\n\t\t\t\t\t(Date.now() - TerminalProcess._lastKillOrStart) +\n\t\t\t\t\tConstants.KillSpawnSpacingDuration,\n\t\t\t);\n\t\t}\n\t\tTerminalProcess._lastKillOrStart = Date.now();\n\t}\n\n\tprivate _sendProcessId(pid: number) {\n\t\tthis._onProcessReady.fire({\n\t\t\tpid,\n\t\t\tcwd: this._initialCwd,\n\t\t\twindowsPty: this.getWindowsPty(),\n\t\t});\n\t}\n\n\tprivate _sendProcessTitle(ptyProcess: IPty): void {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\t// HACK: The node-pty API can return undefined somehow https://github.com/microsoft/vscode/issues/222323\n\t\tthis._currentTitle = ptyProcess.process ?? \"\";\n\t\tthis._onDidChangeProperty.fire({\n\t\t\ttype: ProcessPropertyType.Title,\n\t\t\tvalue: this._currentTitle,\n\t\t});\n\t\t// If fig is installed it may change the title of the process\n\t\tconst sanitizedTitle = this.currentTitle.replace(/ \\(figterm\\)$/g, \"\");\n\n\t\tif (sanitizedTitle.toLowerCase().startsWith(\"python\")) {\n\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\ttype: ProcessPropertyType.ShellType,\n\t\t\t\tvalue: GeneralShellType.Python,\n\t\t\t});\n\t\t} else if (sanitizedTitle.toLowerCase().startsWith(\"julia\")) {\n\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\ttype: ProcessPropertyType.ShellType,\n\t\t\t\tvalue: GeneralShellType.Julia,\n\t\t\t});\n\t\t} else {\n\t\t\tconst shellTypeValue =\n\t\t\t\tposixShellTypeMap.get(sanitizedTitle) ||\n\t\t\t\tgeneralShellTypeMap.get(sanitizedTitle);\n\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\ttype: ProcessPropertyType.ShellType,\n\t\t\t\tvalue: shellTypeValue,\n\t\t\t});\n\t\t}\n\t}\n\n\tshutdown(immediate: boolean): void {\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace(\n\t\t\t\t\"TerminalProcess#shutdown\",\n\t\t\t\tnew Error().stack?.replace(/^Error/, \"\"),\n\t\t\t);\n\t\t}\n\t\t// don't force immediate disposal of the terminal processes on Windows as an additional\n\t\t// mitigation for https://github.com/microsoft/vscode/issues/71966 which causes the pty host\n\t\t// to become unresponsive, disconnecting all terminals across all windows.\n\t\tif (immediate && !isWindows) {\n\t\t\tthis._kill();\n\t\t} else if (!this._closeTimeout && !this._store.isDisposed) {\n\t\t\tthis._queueProcessExit();\n\t\t\t// Allow a maximum amount of time for the process to exit, otherwise force kill it\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this._closeTimeout && !this._store.isDisposed) {\n\t\t\t\t\tthis._closeTimeout = undefined;\n\t\t\t\t\tthis._kill();\n\t\t\t\t}\n\t\t\t}, ShutdownConstants.MaximumShutdownTime);\n\t\t}\n\t}\n\n\tinput(data: string, isBinary = false): void {\n\t\tif (this._store.isDisposed || !this._ptyProcess) {\n\t\t\treturn;\n\t\t}\n\t\tthis._writeQueue.push(\n\t\t\t...chunkInput(data).map((e) => {\n\t\t\t\treturn { isBinary, data: e };\n\t\t\t}),\n\t\t);\n\t\tthis._startWrite();\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\tthis.input(data, true);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t): Promise<IProcessPropertyMap[T]> {\n\t\tswitch (type) {\n\t\t\tcase ProcessPropertyType.Cwd: {\n\t\t\t\tconst newCwd = await this.getCwd();\n\t\t\t\tif (newCwd !== this._properties.cwd) {\n\t\t\t\t\tthis._properties.cwd = newCwd;\n\t\t\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\t\t\ttype: ProcessPropertyType.Cwd,\n\t\t\t\t\t\tvalue: this._properties.cwd,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn newCwd as IProcessPropertyMap[T];\n\t\t\t}\n\t\t\tcase ProcessPropertyType.InitialCwd: {\n\t\t\t\tconst initialCwd = await this.getInitialCwd();\n\t\t\t\tif (initialCwd !== this._properties.initialCwd) {\n\t\t\t\t\tthis._properties.initialCwd = initialCwd;\n\t\t\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\t\t\ttype: ProcessPropertyType.InitialCwd,\n\t\t\t\t\t\tvalue: this._properties.initialCwd,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn initialCwd as IProcessPropertyMap[T];\n\t\t\t}\n\t\t\tcase ProcessPropertyType.Title:\n\t\t\t\treturn this.currentTitle as IProcessPropertyMap[T];\n\t\t\tdefault:\n\t\t\t\treturn this.shellType as IProcessPropertyMap[T];\n\t\t}\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\tif (type === ProcessPropertyType.FixedDimensions) {\n\t\t\tthis._properties.fixedDimensions =\n\t\t\t\tvalue as IProcessPropertyMap[ProcessPropertyType.FixedDimensions];\n\t\t}\n\t}\n\n\tprivate _startWrite(): void {\n\t\t// Don't write if it's already queued of is there is nothing to write\n\t\tif (this._writeTimeout !== undefined || this._writeQueue.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._doWrite();\n\n\t\t// Don't queue more writes if the queue is empty\n\t\tif (this._writeQueue.length === 0) {\n\t\t\tthis._writeTimeout = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\t// Queue the next write\n\t\tthis._writeTimeout = setTimeout(() => {\n\t\t\tthis._writeTimeout = undefined;\n\t\t\tthis._startWrite();\n\t\t}, Constants.WriteInterval);\n\t}\n\n\tprivate _doWrite(): void {\n\t\tconst object = this._writeQueue.shift()!;\n\t\tthis._logService.trace(\"node-pty.IPty#write\", object.data);\n\t\tif (object.isBinary) {\n\t\t\tthis._ptyProcess!.write(Buffer.from(object.data, \"binary\") as any);\n\t\t} else {\n\t\t\tthis._ptyProcess!.write(object.data);\n\t\t}\n\t\tthis._childProcessMonitor?.handleInput();\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\ttypeof cols !== \"number\" ||\n\t\t\ttypeof rows !== \"number\" ||\n\t\t\tisNaN(cols) ||\n\t\t\tisNaN(rows)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\t// Ensure that cols and rows are always >= 1, this prevents a native\n\t\t// exception in winpty.\n\t\tif (this._ptyProcess) {\n\t\t\tcols = Math.max(cols, 1);\n\t\t\trows = Math.max(rows, 1);\n\n\t\t\t// Delay resize if needed\n\t\t\tif (this._delayedResizer) {\n\t\t\t\tthis._delayedResizer.cols = cols;\n\t\t\t\tthis._delayedResizer.rows = rows;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._logService.trace(\"node-pty.IPty#resize\", cols, rows);\n\t\t\ttry {\n\t\t\t\tthis._ptyProcess.resize(cols, rows);\n\t\t\t} catch (e) {\n\t\t\t\t// Swallow error if the pty has already exited\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"node-pty.IPty#resize exception \" + e.message,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tthis._exitCode !== undefined &&\n\t\t\t\t\te.message !== \"ioctl(2) failed, EBADF\" &&\n\t\t\t\t\te.message !== \"Cannot resize a pty that has already exited\"\n\t\t\t\t) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tclearBuffer(): void {\n\t\tthis._ptyProcess?.clear();\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\t// Prevent lower than 0 to heal from errors\n\t\tthis._unacknowledgedCharCount = Math.max(\n\t\t\tthis._unacknowledgedCharCount - charCount,\n\t\t\t0,\n\t\t);\n\t\tthis._logService.trace(\n\t\t\t`Flow control: Ack ${charCount} chars (unacknowledged: ${this._unacknowledgedCharCount})`,\n\t\t);\n\t\tif (\n\t\t\tthis._isPtyPaused &&\n\t\t\tthis._unacknowledgedCharCount <\n\t\t\t\tFlowControlConstants.LowWatermarkChars\n\t\t) {\n\t\t\tthis._logService.trace(\n\t\t\t\t`Flow control: Resume (${this._unacknowledgedCharCount} < ${FlowControlConstants.LowWatermarkChars})`,\n\t\t\t);\n\t\t\tthis._ptyProcess?.resume();\n\t\t\tthis._isPtyPaused = false;\n\t\t}\n\t}\n\n\tclearUnacknowledgedChars(): void {\n\t\tthis._unacknowledgedCharCount = 0;\n\t\tthis._logService.trace(\n\t\t\t`Flow control: Cleared all unacknowledged chars, forcing resume`,\n\t\t);\n\t\tif (this._isPtyPaused) {\n\t\t\tthis._ptyProcess?.resume();\n\t\t\tthis._isPtyPaused = false;\n\t\t}\n\t}\n\n\tasync setUnicodeVersion(version: \"6\" | \"11\"): Promise<void> {\n\t\t// No-op\n\t}\n\n\tgetInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve(this._initialCwd);\n\t}\n\n\tasync getCwd(): Promise<string> {\n\t\tif (isMacintosh) {\n\t\t\t// From Big Sur (darwin v20) there is a spawn blocking thread issue on Electron,\n\t\t\t// this is fixed in VS Code's internal Electron.\n\t\t\t// https://github.com/Microsoft/vscode/issues/105446\n\t\t\treturn new Promise<string>((resolve) => {\n\t\t\t\tif (!this._ptyProcess) {\n\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._logService.trace(\"node-pty.IPty#pid\");\n\t\t\t\texec(\n\t\t\t\t\t\"lsof -OPln -p \" + this._ptyProcess.pid + \" | grep cwd\",\n\t\t\t\t\t{ env: { ...process.env, LANG: \"en_US.UTF-8\" } },\n\t\t\t\t\t(error, stdout, stderr) => {\n\t\t\t\t\t\tif (!error && stdout !== \"\") {\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\tstdout.substring(\n\t\t\t\t\t\t\t\t\tstdout.indexOf(\"/\"),\n\t\t\t\t\t\t\t\t\tstdout.length - 1,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._logService.error(\n\t\t\t\t\t\t\t\t\"lsof did not run successfully, it may not be on the $PATH?\",\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\tstdout,\n\t\t\t\t\t\t\t\tstderr,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\tif (!this._ptyProcess) {\n\t\t\t\treturn this._initialCwd;\n\t\t\t}\n\t\t\tthis._logService.trace(\"node-pty.IPty#pid\");\n\t\t\ttry {\n\t\t\t\treturn await fs.promises.readlink(\n\t\t\t\t\t`/proc/${this._ptyProcess.pid}/cwd`,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\treturn this._initialCwd;\n\t\t\t}\n\t\t}\n\n\t\treturn this._initialCwd;\n\t}\n\n\tgetWindowsPty(): IProcessReadyWindowsPty | undefined {\n\t\treturn isWindows\n\t\t\t? {\n\t\t\t\t\tbackend:\n\t\t\t\t\t\t\"useConpty\" in this._ptyOptions &&\n\t\t\t\t\t\tthis._ptyOptions.useConpty\n\t\t\t\t\t\t\t? \"conpty\"\n\t\t\t\t\t\t\t: \"winpty\",\n\t\t\t\t\tbuildNumber: getWindowsBuildNumber(),\n\t\t\t\t}\n\t\t\t: undefined;\n\t}\n}\n\n/**\n * Tracks the latest resize event to be trigger at a later point.\n */\nclass DelayedResizer extends Disposable {\n\trows: number | undefined;\n\tcols: number | undefined;\n\tprivate _timeout: NodeJS.Timeout;\n\n\tprivate readonly _onTrigger = this._register(\n\t\tnew Emitter<{ rows?: number; cols?: number }>(),\n\t);\n\tget onTrigger(): Event<{ rows?: number; cols?: number }> {\n\t\treturn this._onTrigger.event;\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._onTrigger.fire({ rows: this.rows, cols: this.cols });\n\t\t}, 1000);\n\t\tthis._register(toDisposable(() => clearTimeout(this._timeout)));\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ShutdownConstants", "Constants", "e"]
}
