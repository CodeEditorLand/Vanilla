{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/terminalProcess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { exec } from 'child_process';\nimport { timeout } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as path from '../../../base/common/path.js';\nimport { IProcessEnvironment, isLinux, isMacintosh, isWindows } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { ILogService, LogLevel } from '../../log/common/log.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { FlowControlConstants, IShellLaunchConfig, ITerminalChildProcess, ITerminalLaunchError, IProcessProperty, IProcessPropertyMap as IProcessPropertyMap, ProcessPropertyType, TerminalShellType, IProcessReadyEvent, ITerminalProcessOptions, PosixShellType, IProcessReadyWindowsPty, GeneralShellType } from '../common/terminal.js';\nimport { ChildProcessMonitor } from './childProcessMonitor.js';\nimport { findExecutable, getShellIntegrationInjection, getWindowsBuildNumber, IShellIntegrationConfigInjection } from './terminalEnvironment.js';\nimport { WindowsShellHelper } from './windowsShellHelper.js';\nimport { IPty, IPtyForkOptions, IWindowsPtyForkOptions, spawn } from 'node-pty';\nimport { chunkInput } from '../common/terminalProcess.js';\n\nconst enum ShutdownConstants {\n\t/**\n\t * The amount of ms that must pass between data events after exit is queued before the actual\n\t * kill call is triggered. This data flush mechanism works around an [issue in node-pty][1]\n\t * where not all data is flushed which causes problems for task problem matchers. Additionally\n\t * on Windows under conpty, killing a process while data is being output will cause the [conhost\n\t * flush to hang the pty host][2] because [conhost should be hosted on another thread][3].\n\t *\n\t * [1]: https://github.com/Tyriar/node-pty/issues/72\n\t * [2]: https://github.com/microsoft/vscode/issues/71966\n\t * [3]: https://github.com/microsoft/node-pty/pull/415\n\t */\n\tDataFlushTimeout = 250,\n\t/**\n\t * The maximum ms to allow after dispose is called because forcefully killing the process.\n\t */\n\tMaximumShutdownTime = 5000\n}\n\nconst enum Constants {\n\t/**\n\t * The minimum duration between kill and spawn calls on Windows/conpty as a mitigation for a\n\t * hang issue. See:\n\t * - https://github.com/microsoft/vscode/issues/71966\n\t * - https://github.com/microsoft/vscode/issues/117956\n\t * - https://github.com/microsoft/vscode/issues/121336\n\t */\n\tKillSpawnThrottleInterval = 250,\n\t/**\n\t * The amount of time to wait when a call is throttles beyond the exact amount, this is used to\n\t * try prevent early timeouts causing a kill/spawn call to happen at double the regular\n\t * interval.\n\t */\n\tKillSpawnSpacingDuration = 50,\n\t/**\n\t * How long to wait between chunk writes.\n\t */\n\tWriteInterval = 5,\n}\n\ninterface IWriteObject {\n\tdata: string;\n\tisBinary: boolean;\n}\n\nconst posixShellTypeMap = new Map<string, PosixShellType>([\n\t['bash', PosixShellType.Bash],\n\t['csh', PosixShellType.Csh],\n\t['fish', PosixShellType.Fish],\n\t['ksh', PosixShellType.Ksh],\n\t['sh', PosixShellType.Sh],\n\t['zsh', PosixShellType.Zsh]\n]);\n\nconst generalShellTypeMap = new Map<string, GeneralShellType>([\n\t['pwsh', GeneralShellType.PowerShell],\n\t['python', GeneralShellType.Python],\n\t['julia', GeneralShellType.Julia],\n\t['nu', GeneralShellType.NuShell],\n\n]);\nexport class TerminalProcess extends Disposable implements ITerminalChildProcess {\n\treadonly id = 0;\n\treadonly shouldPersist = false;\n\n\tprivate _properties: IProcessPropertyMap = {\n\t\tcwd: '',\n\t\tinitialCwd: '',\n\t\tfixedDimensions: { cols: undefined, rows: undefined },\n\t\ttitle: '',\n\t\tshellType: undefined,\n\t\thasChildProcesses: true,\n\t\tresolvedShellLaunchConfig: {},\n\t\toverrideDimensions: undefined,\n\t\tfailedShellIntegrationActivation: false,\n\t\tusedShellIntegrationInjection: undefined\n\t};\n\tprivate static _lastKillOrStart = 0;\n\tprivate _exitCode: number | undefined;\n\tprivate _exitMessage: string | undefined;\n\tprivate _closeTimeout: any;\n\tprivate _ptyProcess: IPty | undefined;\n\tprivate _currentTitle: string = '';\n\tprivate _processStartupComplete: Promise<void> | undefined;\n\tprivate _windowsShellHelper: WindowsShellHelper | undefined;\n\tprivate _childProcessMonitor: ChildProcessMonitor | undefined;\n\tprivate _titleInterval: NodeJS.Timeout | null = null;\n\tprivate _writeQueue: IWriteObject[] = [];\n\tprivate _writeTimeout: NodeJS.Timeout | undefined;\n\tprivate _delayedResizer: DelayedResizer | undefined;\n\tprivate readonly _initialCwd: string;\n\tprivate readonly _ptyOptions: IPtyForkOptions | IWindowsPtyForkOptions;\n\n\tprivate _isPtyPaused: boolean = false;\n\tprivate _unacknowledgedCharCount: number = 0;\n\tget exitMessage(): string | undefined { return this._exitMessage; }\n\n\tget currentTitle(): string { return this._windowsShellHelper?.shellTitle || this._currentTitle; }\n\tget shellType(): TerminalShellType | undefined { return isWindows ? this._windowsShellHelper?.shellType : posixShellTypeMap.get(this._currentTitle) || generalShellTypeMap.get(this._currentTitle); }\n\tget hasChildProcesses(): boolean { return this._childProcessMonitor?.hasChildProcesses || false; }\n\n\tprivate readonly _onProcessData = this._register(new Emitter<string>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\n\tconstructor(\n\t\treadonly shellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tenv: IProcessEnvironment,\n\t\t/**\n\t\t * environment used for `findExecutable`\n\t\t */\n\t\tprivate readonly _executableEnv: IProcessEnvironment,\n\t\tprivate readonly _options: ITerminalProcessOptions,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t\tsuper();\n\t\tlet name: string;\n\t\tif (isWindows) {\n\t\t\tname = path.basename(this.shellLaunchConfig.executable || '');\n\t\t} else {\n\t\t\t// Using 'xterm-256color' here helps ensure that the majority of Linux distributions will use a\n\t\t\t// color prompt as defined in the default ~/.bashrc file.\n\t\t\tname = 'xterm-256color';\n\t\t}\n\t\tthis._initialCwd = cwd;\n\t\tthis._properties[ProcessPropertyType.InitialCwd] = this._initialCwd;\n\t\tthis._properties[ProcessPropertyType.Cwd] = this._initialCwd;\n\t\tconst useConpty = this._options.windowsEnableConpty && process.platform === 'win32' && getWindowsBuildNumber() >= 18309;\n\t\tconst useConptyDll = useConpty && this._options.windowsUseConptyDll;\n\t\tthis._ptyOptions = {\n\t\t\tname,\n\t\t\tcwd,\n\t\t\t// TODO: When node-pty is updated this cast can be removed\n\t\t\tenv: env as { [key: string]: string },\n\t\t\tcols,\n\t\t\trows,\n\t\t\tuseConpty,\n\t\t\tuseConptyDll,\n\t\t\t// This option will force conpty to not redraw the whole viewport on launch\n\t\t\tconptyInheritCursor: useConpty && !!shellLaunchConfig.initialText\n\t\t};\n\t\t// Delay resizes to avoid conpty not respecting very early resize calls\n\t\tif (isWindows) {\n\t\t\tif (useConpty && cols === 0 && rows === 0 && this.shellLaunchConfig.executable?.endsWith('Git\\\\bin\\\\bash.exe')) {\n\t\t\t\tthis._delayedResizer = new DelayedResizer();\n\t\t\t\tthis._register(this._delayedResizer.onTrigger(dimensions => {\n\t\t\t\t\tthis._delayedResizer?.dispose();\n\t\t\t\t\tthis._delayedResizer = undefined;\n\t\t\t\t\tif (dimensions.cols && dimensions.rows) {\n\t\t\t\t\t\tthis.resize(dimensions.cols, dimensions.rows);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t\t// WindowsShellHelper is used to fetch the process title and shell type\n\t\t\tthis.onProcessReady(e => {\n\t\t\t\tthis._windowsShellHelper = this._register(new WindowsShellHelper(e.pid));\n\t\t\t\tthis._register(this._windowsShellHelper.onShellTypeChanged(e => this._onDidChangeProperty.fire({ type: ProcessPropertyType.ShellType, value: e })));\n\t\t\t\tthis._register(this._windowsShellHelper.onShellNameChanged(e => this._onDidChangeProperty.fire({ type: ProcessPropertyType.Title, value: e })));\n\t\t\t});\n\t\t}\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this._titleInterval) {\n\t\t\t\tclearInterval(this._titleInterval);\n\t\t\t\tthis._titleInterval = null;\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync start(): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tconst results = await Promise.all([this._validateCwd(), this._validateExecutable()]);\n\t\tconst firstError = results.find(r => r !== undefined);\n\t\tif (firstError) {\n\t\t\treturn firstError;\n\t\t}\n\n\t\tlet injection: IShellIntegrationConfigInjection | undefined;\n\t\tif (this._options.shellIntegration.enabled) {\n\t\t\tinjection = getShellIntegrationInjection(this.shellLaunchConfig, this._options, this._ptyOptions.env, this._logService, this._productService);\n\t\t\tif (injection) {\n\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.UsedShellIntegrationInjection, value: true });\n\t\t\t\tif (injection.envMixin) {\n\t\t\t\t\tfor (const [key, value] of Object.entries(injection.envMixin)) {\n\t\t\t\t\t\tthis._ptyOptions.env ||= {};\n\t\t\t\t\t\tthis._ptyOptions.env[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (injection.filesToCopy) {\n\t\t\t\t\tfor (const f of injection.filesToCopy) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait fs.promises.mkdir(path.dirname(f.dest), { recursive: true });\n\t\t\t\t\t\t\tawait fs.promises.copyFile(f.source, f.dest);\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t// Swallow error, this should only happen when multiple users are on the same\n\t\t\t\t\t\t\t// machine. Since the shell integration scripts rarely change, plus the other user\n\t\t\t\t\t\t\t// should be using the same version of the server in this case, assume the script is\n\t\t\t\t\t\t\t// fine if copy fails and swallow the error.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.FailedShellIntegrationActivation, value: true });\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.setupPtyProcess(this.shellLaunchConfig, this._ptyOptions, injection);\n\t\t\tif (injection?.newArgs) {\n\t\t\t\treturn { injectedArgs: injection.newArgs };\n\t\t\t}\n\t\t\treturn undefined;\n\t\t} catch (err) {\n\t\t\tthis._logService.trace('node-pty.node-pty.IPty#spawn native exception', err);\n\t\t\treturn { message: `A native exception occurred during launch (${err.message})` };\n\t\t}\n\t}\n\n\tprivate async _validateCwd(): Promise<undefined | ITerminalLaunchError> {\n\t\ttry {\n\t\t\tconst result = await fs.promises.stat(this._initialCwd);\n\t\t\tif (!result.isDirectory()) {\n\t\t\t\treturn { message: localize('launchFail.cwdNotDirectory', \"Starting directory (cwd) \\\"{0}\\\" is not a directory\", this._initialCwd.toString()) };\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err?.code === 'ENOENT') {\n\t\t\t\treturn { message: localize('launchFail.cwdDoesNotExist', \"Starting directory (cwd) \\\"{0}\\\" does not exist\", this._initialCwd.toString()) };\n\t\t\t}\n\t\t}\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.InitialCwd, value: this._initialCwd });\n\t\treturn undefined;\n\t}\n\n\tprivate async _validateExecutable(): Promise<undefined | ITerminalLaunchError> {\n\t\tconst slc = this.shellLaunchConfig;\n\t\tif (!slc.executable) {\n\t\t\tthrow new Error('IShellLaunchConfig.executable not set');\n\t\t}\n\n\t\tconst cwd = slc.cwd instanceof URI ? slc.cwd.path : slc.cwd;\n\t\tconst envPaths: string[] | undefined = (slc.env && slc.env.PATH) ? slc.env.PATH.split(path.delimiter) : undefined;\n\t\tconst executable = await findExecutable(slc.executable, cwd, envPaths, this._executableEnv);\n\t\tif (!executable) {\n\t\t\treturn { message: localize('launchFail.executableDoesNotExist', \"Path to shell executable \\\"{0}\\\" does not exist\", slc.executable) };\n\t\t}\n\n\t\ttry {\n\t\t\tconst result = await fs.promises.stat(executable);\n\t\t\tif (!result.isFile() && !result.isSymbolicLink()) {\n\t\t\t\treturn { message: localize('launchFail.executableIsNotFileOrSymlink', \"Path to shell executable \\\"{0}\\\" is not a file or a symlink\", slc.executable) };\n\t\t\t}\n\t\t\t// Set the executable explicitly here so that node-pty doesn't need to search the\n\t\t\t// $PATH too.\n\t\t\tslc.executable = executable;\n\t\t} catch (err) {\n\t\t\tif (err?.code === 'EACCES') {\n\t\t\t\t// Swallow\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async setupPtyProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\toptions: IPtyForkOptions,\n\t\tshellIntegrationInjection: IShellIntegrationConfigInjection | undefined\n\t): Promise<void> {\n\t\tconst args = shellIntegrationInjection?.newArgs || shellLaunchConfig.args || [];\n\t\tawait this._throttleKillSpawn();\n\t\tthis._logService.trace('node-pty.IPty#spawn', shellLaunchConfig.executable, args, options);\n\t\tconst ptyProcess = spawn(shellLaunchConfig.executable!, args, options);\n\t\tthis._ptyProcess = ptyProcess;\n\t\tthis._childProcessMonitor = this._register(new ChildProcessMonitor(ptyProcess.pid, this._logService));\n\t\tthis._childProcessMonitor.onDidChangeHasChildProcesses(value => this._onDidChangeProperty.fire({ type: ProcessPropertyType.HasChildProcesses, value }));\n\t\tthis._processStartupComplete = new Promise<void>(c => {\n\t\t\tthis.onProcessReady(() => c());\n\t\t});\n\t\tptyProcess.onData(data => {\n\t\t\t// Handle flow control\n\t\t\tthis._unacknowledgedCharCount += data.length;\n\t\t\tif (!this._isPtyPaused && this._unacknowledgedCharCount > FlowControlConstants.HighWatermarkChars) {\n\t\t\t\tthis._logService.trace(`Flow control: Pause (${this._unacknowledgedCharCount} > ${FlowControlConstants.HighWatermarkChars})`);\n\t\t\t\tthis._isPtyPaused = true;\n\t\t\t\tptyProcess.pause();\n\t\t\t}\n\n\t\t\t// Refire the data event\n\t\t\tthis._logService.trace('node-pty.IPty#onData', data);\n\t\t\tthis._onProcessData.fire(data);\n\t\t\tif (this._closeTimeout) {\n\t\t\t\tthis._queueProcessExit();\n\t\t\t}\n\t\t\tthis._windowsShellHelper?.checkShell();\n\t\t\tthis._childProcessMonitor?.handleOutput();\n\t\t});\n\t\tptyProcess.onExit(e => {\n\t\t\tthis._exitCode = e.exitCode;\n\t\t\tthis._queueProcessExit();\n\t\t});\n\t\tthis._sendProcessId(ptyProcess.pid);\n\t\tthis._setupTitlePolling(ptyProcess);\n\t}\n\n\tprivate _setupTitlePolling(ptyProcess: IPty) {\n\t\t// Send initial timeout async to give event listeners a chance to init\n\t\tsetTimeout(() => this._sendProcessTitle(ptyProcess));\n\t\t// Setup polling for non-Windows, for Windows `process` doesn't change\n\t\tif (!isWindows) {\n\t\t\tthis._titleInterval = setInterval(() => {\n\t\t\t\tif (this._currentTitle !== ptyProcess.process) {\n\t\t\t\t\tthis._sendProcessTitle(ptyProcess);\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t}\n\t}\n\n\t// Allow any trailing data events to be sent before the exit event is sent.\n\t// See https://github.com/Tyriar/node-pty/issues/72\n\tprivate _queueProcessExit() {\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace('TerminalProcess#_queueProcessExit', new Error().stack?.replace(/^Error/, ''));\n\t\t}\n\t\tif (this._closeTimeout) {\n\t\t\tclearTimeout(this._closeTimeout);\n\t\t}\n\t\tthis._closeTimeout = setTimeout(() => {\n\t\t\tthis._closeTimeout = undefined;\n\t\t\tthis._kill();\n\t\t}, ShutdownConstants.DataFlushTimeout);\n\t}\n\n\tprivate async _kill(): Promise<void> {\n\t\t// Wait to kill to process until the start up code has run. This prevents us from firing a process exit before a\n\t\t// process start.\n\t\tawait this._processStartupComplete;\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\t// Attempt to kill the pty, it may have already been killed at this\n\t\t// point but we want to make sure\n\t\ttry {\n\t\t\tif (this._ptyProcess) {\n\t\t\t\tawait this._throttleKillSpawn();\n\t\t\t\tthis._logService.trace('node-pty.IPty#kill');\n\t\t\t\tthis._ptyProcess.kill();\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\t// Swallow, the pty has already been killed\n\t\t}\n\t\tthis._onProcessExit.fire(this._exitCode || 0);\n\t\tthis.dispose();\n\t}\n\n\tprivate async _throttleKillSpawn(): Promise<void> {\n\t\t// Only throttle on Windows/conpty\n\t\tif (!isWindows || !('useConpty' in this._ptyOptions) || !this._ptyOptions.useConpty) {\n\t\t\treturn;\n\t\t}\n\t\t// Use a loop to ensure multiple calls in a single interval space out\n\t\twhile (Date.now() - TerminalProcess._lastKillOrStart < Constants.KillSpawnThrottleInterval) {\n\t\t\tthis._logService.trace('Throttling kill/spawn call');\n\t\t\tawait timeout(Constants.KillSpawnThrottleInterval - (Date.now() - TerminalProcess._lastKillOrStart) + Constants.KillSpawnSpacingDuration);\n\t\t}\n\t\tTerminalProcess._lastKillOrStart = Date.now();\n\t}\n\n\tprivate _sendProcessId(pid: number) {\n\t\tthis._onProcessReady.fire({\n\t\t\tpid,\n\t\t\tcwd: this._initialCwd,\n\t\t\twindowsPty: this.getWindowsPty()\n\t\t});\n\t}\n\n\tprivate _sendProcessTitle(ptyProcess: IPty): void {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\t// HACK: The node-pty API can return undefined somehow https://github.com/microsoft/vscode/issues/222323\n\t\tthis._currentTitle = (ptyProcess.process ?? '');\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.Title, value: this._currentTitle });\n\t\t// If fig is installed it may change the title of the process\n\t\tconst sanitizedTitle = this.currentTitle.replace(/ \\(figterm\\)$/g, '');\n\n\t\tif (sanitizedTitle.toLowerCase().startsWith('python')) {\n\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.ShellType, value: GeneralShellType.Python });\n\t\t} else if (sanitizedTitle.toLowerCase().startsWith('julia')) {\n\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.ShellType, value: GeneralShellType.Julia });\n\t\t} else {\n\t\t\tconst shellTypeValue = posixShellTypeMap.get(sanitizedTitle) || generalShellTypeMap.get(sanitizedTitle);\n\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.ShellType, value: shellTypeValue });\n\t\t}\n\t}\n\n\tshutdown(immediate: boolean): void {\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace('TerminalProcess#shutdown', new Error().stack?.replace(/^Error/, ''));\n\t\t}\n\t\t// don't force immediate disposal of the terminal processes on Windows as an additional\n\t\t// mitigation for https://github.com/microsoft/vscode/issues/71966 which causes the pty host\n\t\t// to become unresponsive, disconnecting all terminals across all windows.\n\t\tif (immediate && !isWindows) {\n\t\t\tthis._kill();\n\t\t} else {\n\t\t\tif (!this._closeTimeout && !this._store.isDisposed) {\n\t\t\t\tthis._queueProcessExit();\n\t\t\t\t// Allow a maximum amount of time for the process to exit, otherwise force kill it\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (this._closeTimeout && !this._store.isDisposed) {\n\t\t\t\t\t\tthis._closeTimeout = undefined;\n\t\t\t\t\t\tthis._kill();\n\t\t\t\t\t}\n\t\t\t\t}, ShutdownConstants.MaximumShutdownTime);\n\t\t\t}\n\t\t}\n\t}\n\n\tinput(data: string, isBinary: boolean = false): void {\n\t\tif (this._store.isDisposed || !this._ptyProcess) {\n\t\t\treturn;\n\t\t}\n\t\tthis._writeQueue.push(...chunkInput(data).map(e => {\n\t\t\treturn { isBinary, data: e };\n\t\t}));\n\t\tthis._startWrite();\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\tthis.input(data, true);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\tswitch (type) {\n\t\t\tcase ProcessPropertyType.Cwd: {\n\t\t\t\tconst newCwd = await this.getCwd();\n\t\t\t\tif (newCwd !== this._properties.cwd) {\n\t\t\t\t\tthis._properties.cwd = newCwd;\n\t\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.Cwd, value: this._properties.cwd });\n\t\t\t\t}\n\t\t\t\treturn newCwd as IProcessPropertyMap[T];\n\t\t\t}\n\t\t\tcase ProcessPropertyType.InitialCwd: {\n\t\t\t\tconst initialCwd = await this.getInitialCwd();\n\t\t\t\tif (initialCwd !== this._properties.initialCwd) {\n\t\t\t\t\tthis._properties.initialCwd = initialCwd;\n\t\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.InitialCwd, value: this._properties.initialCwd });\n\t\t\t\t}\n\t\t\t\treturn initialCwd as IProcessPropertyMap[T];\n\t\t\t}\n\t\t\tcase ProcessPropertyType.Title:\n\t\t\t\treturn this.currentTitle as IProcessPropertyMap[T];\n\t\t\tdefault:\n\t\t\t\treturn this.shellType as IProcessPropertyMap[T];\n\t\t}\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\tif (type === ProcessPropertyType.FixedDimensions) {\n\t\t\tthis._properties.fixedDimensions = value as IProcessPropertyMap[ProcessPropertyType.FixedDimensions];\n\t\t}\n\t}\n\n\tprivate _startWrite(): void {\n\t\t// Don't write if it's already queued of is there is nothing to write\n\t\tif (this._writeTimeout !== undefined || this._writeQueue.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._doWrite();\n\n\t\t// Don't queue more writes if the queue is empty\n\t\tif (this._writeQueue.length === 0) {\n\t\t\tthis._writeTimeout = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\t// Queue the next write\n\t\tthis._writeTimeout = setTimeout(() => {\n\t\t\tthis._writeTimeout = undefined;\n\t\t\tthis._startWrite();\n\t\t}, Constants.WriteInterval);\n\t}\n\n\tprivate _doWrite(): void {\n\t\tconst object = this._writeQueue.shift()!;\n\t\tthis._logService.trace('node-pty.IPty#write', object.data);\n\t\tif (object.isBinary) {\n\t\t\tthis._ptyProcess!.write(Buffer.from(object.data, 'binary') as any);\n\t\t} else {\n\t\t\tthis._ptyProcess!.write(object.data);\n\t\t}\n\t\tthis._childProcessMonitor?.handleInput();\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof cols !== 'number' || typeof rows !== 'number' || isNaN(cols) || isNaN(rows)) {\n\t\t\treturn;\n\t\t}\n\t\t// Ensure that cols and rows are always >= 1, this prevents a native\n\t\t// exception in winpty.\n\t\tif (this._ptyProcess) {\n\t\t\tcols = Math.max(cols, 1);\n\t\t\trows = Math.max(rows, 1);\n\n\t\t\t// Delay resize if needed\n\t\t\tif (this._delayedResizer) {\n\t\t\t\tthis._delayedResizer.cols = cols;\n\t\t\t\tthis._delayedResizer.rows = rows;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._logService.trace('node-pty.IPty#resize', cols, rows);\n\t\t\ttry {\n\t\t\t\tthis._ptyProcess.resize(cols, rows);\n\t\t\t} catch (e) {\n\t\t\t\t// Swallow error if the pty has already exited\n\t\t\t\tthis._logService.trace('node-pty.IPty#resize exception ' + e.message);\n\t\t\t\tif (this._exitCode !== undefined &&\n\t\t\t\t\te.message !== 'ioctl(2) failed, EBADF' &&\n\t\t\t\t\te.message !== 'Cannot resize a pty that has already exited') {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tclearBuffer(): void {\n\t\tthis._ptyProcess?.clear();\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\t// Prevent lower than 0 to heal from errors\n\t\tthis._unacknowledgedCharCount = Math.max(this._unacknowledgedCharCount - charCount, 0);\n\t\tthis._logService.trace(`Flow control: Ack ${charCount} chars (unacknowledged: ${this._unacknowledgedCharCount})`);\n\t\tif (this._isPtyPaused && this._unacknowledgedCharCount < FlowControlConstants.LowWatermarkChars) {\n\t\t\tthis._logService.trace(`Flow control: Resume (${this._unacknowledgedCharCount} < ${FlowControlConstants.LowWatermarkChars})`);\n\t\t\tthis._ptyProcess?.resume();\n\t\t\tthis._isPtyPaused = false;\n\t\t}\n\t}\n\n\tclearUnacknowledgedChars(): void {\n\t\tthis._unacknowledgedCharCount = 0;\n\t\tthis._logService.trace(`Flow control: Cleared all unacknowledged chars, forcing resume`);\n\t\tif (this._isPtyPaused) {\n\t\t\tthis._ptyProcess?.resume();\n\t\t\tthis._isPtyPaused = false;\n\t\t}\n\t}\n\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\t// No-op\n\t}\n\n\tgetInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve(this._initialCwd);\n\t}\n\n\tasync getCwd(): Promise<string> {\n\t\tif (isMacintosh) {\n\t\t\t// From Big Sur (darwin v20) there is a spawn blocking thread issue on Electron,\n\t\t\t// this is fixed in VS Code's internal Electron.\n\t\t\t// https://github.com/Microsoft/vscode/issues/105446\n\t\t\treturn new Promise<string>(resolve => {\n\t\t\t\tif (!this._ptyProcess) {\n\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._logService.trace('node-pty.IPty#pid');\n\t\t\t\texec('lsof -OPln -p ' + this._ptyProcess.pid + ' | grep cwd', { env: { ...process.env, LANG: 'en_US.UTF-8' } }, (error, stdout, stderr) => {\n\t\t\t\t\tif (!error && stdout !== '') {\n\t\t\t\t\t\tresolve(stdout.substring(stdout.indexOf('/'), stdout.length - 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logService.error('lsof did not run successfully, it may not be on the $PATH?', error, stdout, stderr);\n\t\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\tif (!this._ptyProcess) {\n\t\t\t\treturn this._initialCwd;\n\t\t\t}\n\t\t\tthis._logService.trace('node-pty.IPty#pid');\n\t\t\ttry {\n\t\t\t\treturn await fs.promises.readlink(`/proc/${this._ptyProcess.pid}/cwd`);\n\t\t\t} catch (error) {\n\t\t\t\treturn this._initialCwd;\n\t\t\t}\n\t\t}\n\n\t\treturn this._initialCwd;\n\t}\n\n\tgetWindowsPty(): IProcessReadyWindowsPty | undefined {\n\t\treturn isWindows ? {\n\t\t\tbackend: 'useConpty' in this._ptyOptions && this._ptyOptions.useConpty ? 'conpty' : 'winpty',\n\t\t\tbuildNumber: getWindowsBuildNumber()\n\t\t} : undefined;\n\t}\n}\n\n/**\n * Tracks the latest resize event to be trigger at a later point.\n */\nclass DelayedResizer extends Disposable {\n\trows: number | undefined;\n\tcols: number | undefined;\n\tprivate _timeout: NodeJS.Timeout;\n\n\tprivate readonly _onTrigger = this._register(new Emitter<{ rows?: number; cols?: number }>());\n\tget onTrigger(): Event<{ rows?: number; cols?: number }> { return this._onTrigger.event; }\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._onTrigger.fire({ rows: this.rows, cols: this.cols });\n\t\t}, 1000);\n\t\tthis._register(toDisposable(() => clearTimeout(this._timeout)));\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ShutdownConstants", "Constants", "e"]
}
