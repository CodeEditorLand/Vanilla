{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/windowsShellHelper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as WindowsProcessTreeType from \"@vscode/windows-process-tree\";\nimport { timeout } from \"../../../base/common/async.js\";\nimport { debounce } from \"../../../base/common/decorators.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { isWindows, platform } from \"../../../base/common/platform.js\";\nimport {\n\tGeneralShellType,\n\ttype TerminalShellType,\n\tWindowsShellType,\n} from \"../common/terminal.js\";\n\nexport interface IWindowsShellHelper extends IDisposable {\n\treadonly onShellNameChanged: Event<string>;\n\treadonly onShellTypeChanged: Event<TerminalShellType | undefined>;\n\tgetShellType(title: string): TerminalShellType | undefined;\n\tgetShellName(): Promise<string>;\n}\n\nconst SHELL_EXECUTABLES = [\n\t\"cmd.exe\",\n\t\"powershell.exe\",\n\t\"pwsh.exe\",\n\t\"bash.exe\",\n\t\"wsl.exe\",\n\t\"ubuntu.exe\",\n\t\"ubuntu1804.exe\",\n\t\"kali.exe\",\n\t\"debian.exe\",\n\t\"opensuse-42.exe\",\n\t\"sles-12.exe\",\n];\n\nlet windowsProcessTree: typeof WindowsProcessTreeType;\n\nexport class WindowsShellHelper\n\textends Disposable\n\timplements IWindowsShellHelper\n{\n\tprivate _currentRequest: Promise<string> | undefined;\n\tprivate _shellType: TerminalShellType | undefined;\n\tget shellType(): TerminalShellType | undefined {\n\t\treturn this._shellType;\n\t}\n\tprivate _shellTitle = \"\";\n\tget shellTitle(): string {\n\t\treturn this._shellTitle;\n\t}\n\tprivate readonly _onShellNameChanged = new Emitter<string>();\n\tget onShellNameChanged(): Event<string> {\n\t\treturn this._onShellNameChanged.event;\n\t}\n\tprivate readonly _onShellTypeChanged = new Emitter<\n\t\tTerminalShellType | undefined\n\t>();\n\tget onShellTypeChanged(): Event<TerminalShellType | undefined> {\n\t\treturn this._onShellTypeChanged.event;\n\t}\n\n\tconstructor(private _rootProcessId: number) {\n\t\tsuper();\n\n\t\tif (!isWindows) {\n\t\t\tthrow new Error(\n\t\t\t\t`WindowsShellHelper cannot be instantiated on ${platform}`,\n\t\t\t);\n\t\t}\n\n\t\tthis._startMonitoringShell();\n\t}\n\n\tprivate async _startMonitoringShell(): Promise<void> {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis.checkShell();\n\t}\n\n\t@debounce(500)\n\tasync checkShell(): Promise<void> {\n\t\tif (isWindows) {\n\t\t\t// Wait to give the shell some time to actually launch a process, this\n\t\t\t// could lead to a race condition but it would be recovered from when\n\t\t\t// data stops and should cover the majority of cases\n\t\t\tawait timeout(300);\n\t\t\tthis.getShellName().then((title) => {\n\t\t\t\tconst type = this.getShellType(title);\n\t\t\t\tif (type !== this._shellType) {\n\t\t\t\t\tthis._onShellTypeChanged.fire(type);\n\t\t\t\t\tthis._onShellNameChanged.fire(title);\n\t\t\t\t\tthis._shellType = type;\n\t\t\t\t\tthis._shellTitle = title;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate traverseTree(tree: any): string {\n\t\tif (!tree) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (SHELL_EXECUTABLES.indexOf(tree.name) === -1) {\n\t\t\treturn tree.name;\n\t\t}\n\t\tif (!tree.children || tree.children.length === 0) {\n\t\t\treturn tree.name;\n\t\t}\n\t\tlet favouriteChild = 0;\n\t\tfor (; favouriteChild < tree.children.length; favouriteChild++) {\n\t\t\tconst child = tree.children[favouriteChild];\n\t\t\tif (!child.children || child.children.length === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (child.children[0].name !== \"conhost.exe\") {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (favouriteChild >= tree.children.length) {\n\t\t\treturn tree.name;\n\t\t}\n\t\treturn this.traverseTree(tree.children[favouriteChild]);\n\t}\n\n\t/**\n\t * Returns the innermost shell executable running in the terminal\n\t */\n\tasync getShellName(): Promise<string> {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn Promise.resolve(\"\");\n\t\t}\n\t\t// Prevent multiple requests at once, instead return current request\n\t\tif (this._currentRequest) {\n\t\t\treturn this._currentRequest;\n\t\t}\n\t\tif (!windowsProcessTree) {\n\t\t\twindowsProcessTree = await import(\"@vscode/windows-process-tree\");\n\t\t}\n\t\tthis._currentRequest = new Promise<string>((resolve) => {\n\t\t\twindowsProcessTree.getProcessTree(this._rootProcessId, (tree) => {\n\t\t\t\tconst name = this.traverseTree(tree);\n\t\t\t\tthis._currentRequest = undefined;\n\t\t\t\tresolve(name);\n\t\t\t});\n\t\t});\n\t\treturn this._currentRequest;\n\t}\n\n\tgetShellType(executable: string): TerminalShellType | undefined {\n\t\tswitch (executable.toLowerCase()) {\n\t\t\tcase \"cmd.exe\":\n\t\t\t\treturn WindowsShellType.CommandPrompt;\n\t\t\tcase \"powershell.exe\":\n\t\t\tcase \"pwsh.exe\":\n\t\t\t\treturn GeneralShellType.PowerShell;\n\t\t\tcase \"bash.exe\":\n\t\t\tcase \"git-cmd.exe\":\n\t\t\t\treturn WindowsShellType.GitBash;\n\t\t\tcase \"julialauncher.exe\":\n\t\t\t\treturn GeneralShellType.Julia;\n\t\t\tcase \"nu.exe\":\n\t\t\t\treturn GeneralShellType.NuShell;\n\t\t\tcase \"wsl.exe\":\n\t\t\tcase \"ubuntu.exe\":\n\t\t\tcase \"ubuntu1804.exe\":\n\t\t\tcase \"kali.exe\":\n\t\t\tcase \"debian.exe\":\n\t\t\tcase \"opensuse-42.exe\":\n\t\t\tcase \"sles-12.exe\":\n\t\t\t\treturn WindowsShellType.Wsl;\n\t\t\tdefault:\n\t\t\t\tif (executable.match(/python(\\d(\\.\\d{0,2})?)?\\.exe/)) {\n\t\t\t\t\treturn GeneralShellType.Python;\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
