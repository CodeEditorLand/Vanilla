{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/ptyService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { execFile, exec } from 'child_process';\nimport { AutoOpenBarrier, ProcessTimeRunOnceScheduler, Promises, Queue, timeout } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IProcessEnvironment, isWindows, OperatingSystem, OS } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { getSystemShell } from '../../../base/node/shell.js';\nimport { ILogService, LogLevel } from '../../log/common/log.js';\nimport { RequestStore } from '../common/requestStore.js';\nimport { IProcessDataEvent, IProcessReadyEvent, IPtyService, IRawTerminalInstanceLayoutInfo, IReconnectConstants, IShellLaunchConfig, ITerminalInstanceLayoutInfoById, ITerminalLaunchError, ITerminalsLayoutInfo, ITerminalTabLayoutInfoById, TerminalIcon, IProcessProperty, TitleEventSource, ProcessPropertyType, IProcessPropertyMap, IFixedTerminalDimensions, IPersistentTerminalProcessLaunchConfig, ICrossVersionSerializedTerminalState, ISerializedTerminalState, ITerminalProcessOptions, IPtyHostLatencyMeasurement } from '../common/terminal.js';\nimport { TerminalDataBufferer } from '../common/terminalDataBuffering.js';\nimport { escapeNonWindowsPath } from '../common/terminalEnvironment.js';\nimport type { ISerializeOptions, SerializeAddon as XtermSerializeAddon } from '@xterm/addon-serialize';\nimport type { Unicode11Addon as XtermUnicode11Addon } from '@xterm/addon-unicode11';\nimport { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs, ITerminalTabLayoutInfoDto } from '../common/terminalProcess.js';\nimport { getWindowsBuildNumber } from './terminalEnvironment.js';\nimport { TerminalProcess } from './terminalProcess.js';\nimport { localize } from '../../../nls.js';\nimport { ignoreProcessNames } from './childProcessMonitor.js';\nimport { TerminalAutoResponder } from '../common/terminalAutoResponder.js';\nimport { ErrorNoTelemetry } from '../../../base/common/errors.js';\nimport { ShellIntegrationAddon } from '../common/xterm/shellIntegrationAddon.js';\nimport { formatMessageForTerminal } from '../common/terminalStrings.js';\nimport { IPtyHostProcessReplayEvent } from '../common/capabilities/capabilities.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { join } from 'path';\nimport { memoize } from '../../../base/common/decorators.js';\nimport * as performance from '../../../base/common/performance.js';\n// ESM-comment-begin\n// import { Terminal as XtermTerminal } from '@xterm/headless';\n// ESM-comment-end\n// ESM-uncomment-begin\nimport pkg from '@xterm/headless';\ntype XtermTerminal = pkg.Terminal;\nconst { Terminal: XtermTerminal } = pkg;\n// ESM-uncomment-end\n\nexport function traceRpc(_target: any, key: string, descriptor: any) {\n\tif (typeof descriptor.value !== 'function') {\n\t\tthrow new Error('not supported');\n\t}\n\tconst fnKey = 'value';\n\tconst fn = descriptor.value;\n\tdescriptor[fnKey] = async function (...args: any[]) {\n\t\tif (this.traceRpcArgs.logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis.traceRpcArgs.logService.trace(`[RPC Request] PtyService#${fn.name}(${args.map(e => JSON.stringify(e)).join(', ')})`);\n\t\t}\n\t\tif (this.traceRpcArgs.simulatedLatency) {\n\t\t\tawait timeout(this.traceRpcArgs.simulatedLatency);\n\t\t}\n\t\tlet result: any;\n\t\ttry {\n\t\t\tresult = await fn.apply(this, args);\n\t\t} catch (e) {\n\t\t\tthis.traceRpcArgs.logService.error(`[RPC Response] PtyService#${fn.name}`, e);\n\t\t\tthrow e;\n\t\t}\n\t\tif (this.traceRpcArgs.logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis.traceRpcArgs.logService.trace(`[RPC Response] PtyService#${fn.name}`, result);\n\t\t}\n\t\treturn result;\n\t};\n}\n\ntype WorkspaceId = string;\n\nlet SerializeAddon: typeof XtermSerializeAddon;\nlet Unicode11Addon: typeof XtermUnicode11Addon;\n\nexport class PtyService extends Disposable implements IPtyService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _ptys: Map<number, PersistentTerminalProcess> = new Map();\n\tprivate readonly _workspaceLayoutInfos = new Map<WorkspaceId, ISetTerminalLayoutInfoArgs>();\n\tprivate readonly _detachInstanceRequestStore: RequestStore<IProcessDetails | undefined, { workspaceId: string; instanceId: number }>;\n\tprivate readonly _revivedPtyIdMap: Map<string, { newId: number; state: ISerializedTerminalState }> = new Map();\n\tprivate readonly _autoReplies: Map<string, string> = new Map();\n\n\tprivate _lastPtyId: number = 0;\n\n\tprivate readonly _onHeartbeat = this._register(new Emitter<void>());\n\treadonly onHeartbeat = this._traceEvent('_onHeartbeat', this._onHeartbeat.event);\n\n\tprivate readonly _onProcessData = this._register(new Emitter<{ id: number; event: IProcessDataEvent | string }>());\n\treadonly onProcessData = this._traceEvent('_onProcessData', this._onProcessData.event);\n\tprivate readonly _onProcessReplay = this._register(new Emitter<{ id: number; event: IPtyHostProcessReplayEvent }>());\n\treadonly onProcessReplay = this._traceEvent('_onProcessReplay', this._onProcessReplay.event);\n\tprivate readonly _onProcessReady = this._register(new Emitter<{ id: number; event: IProcessReadyEvent }>());\n\treadonly onProcessReady = this._traceEvent('_onProcessReady', this._onProcessReady.event);\n\tprivate readonly _onProcessExit = this._register(new Emitter<{ id: number; event: number | undefined }>());\n\treadonly onProcessExit = this._traceEvent('_onProcessExit', this._onProcessExit.event);\n\tprivate readonly _onProcessOrphanQuestion = this._register(new Emitter<{ id: number }>());\n\treadonly onProcessOrphanQuestion = this._traceEvent('_onProcessOrphanQuestion', this._onProcessOrphanQuestion.event);\n\tprivate readonly _onDidRequestDetach = this._register(new Emitter<{ requestId: number; workspaceId: string; instanceId: number }>());\n\treadonly onDidRequestDetach = this._traceEvent('_onDidRequestDetach', this._onDidRequestDetach.event);\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<{ id: number; property: IProcessProperty<any> }>());\n\treadonly onDidChangeProperty = this._traceEvent('_onDidChangeProperty', this._onDidChangeProperty.event);\n\n\tprivate _traceEvent<T>(name: string, event: Event<T>): Event<T> {\n\t\tevent(e => {\n\t\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\t\tthis._logService.trace(`[RPC Event] PtyService#${name}.fire(${JSON.stringify(e)})`);\n\t\t\t}\n\t\t});\n\t\treturn event;\n\t}\n\n\t@memoize\n\tget traceRpcArgs(): { logService: ILogService; simulatedLatency: number } {\n\t\treturn {\n\t\t\tlogService: this._logService,\n\t\t\tsimulatedLatency: this._simulatedLatency\n\t\t};\n\t}\n\n\tconstructor(\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _productService: IProductService,\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\tprivate readonly _simulatedLatency: number\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const pty of this._ptys.values()) {\n\t\t\t\tpty.shutdown(true);\n\t\t\t}\n\t\t\tthis._ptys.clear();\n\t\t}));\n\n\t\tthis._detachInstanceRequestStore = this._register(new RequestStore(undefined, this._logService));\n\t\tthis._detachInstanceRequestStore.onCreateRequest(this._onDidRequestDetach.fire, this._onDidRequestDetach);\n\t}\n\n\t@traceRpc\n\tasync refreshIgnoreProcessNames(names: string[]): Promise<void> {\n\t\tignoreProcessNames.length = 0;\n\t\tignoreProcessNames.push(...names);\n\t}\n\n\t@traceRpc\n\tasync requestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\treturn this._detachInstanceRequestStore.createRequest({ workspaceId, instanceId });\n\t}\n\n\t@traceRpc\n\tasync acceptDetachInstanceReply(requestId: number, persistentProcessId: number): Promise<void> {\n\t\tlet processDetails: IProcessDetails | undefined = undefined;\n\t\tconst pty = this._ptys.get(persistentProcessId);\n\t\tif (pty) {\n\t\t\tprocessDetails = await this._buildProcessDetails(persistentProcessId, pty);\n\t\t}\n\t\tthis._detachInstanceRequestStore.acceptReply(requestId, processDetails);\n\t}\n\n\t@traceRpc\n\tasync freePortKillProcess(port: string): Promise<{ port: string; processId: string }> {\n\t\tconst stdout = await new Promise<string>((resolve, reject) => {\n\t\t\texec(isWindows ? `netstat -ano | findstr \"${port}\"` : `lsof -nP -iTCP -sTCP:LISTEN | grep ${port}`, {}, (err, stdout) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject('Problem occurred when listing active processes');\n\t\t\t\t}\n\t\t\t\tresolve(stdout);\n\t\t\t});\n\t\t});\n\t\tconst processesForPort = stdout.split(/\\r?\\n/).filter(s => !!s.trim());\n\t\tif (processesForPort.length >= 1) {\n\t\t\tconst capturePid = /\\s+(\\d+)(?:\\s+|$)/;\n\t\t\tconst processId = processesForPort[0].match(capturePid)?.[1];\n\t\t\tif (processId) {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.kill(Number.parseInt(processId));\n\t\t\t\t} catch { }\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Processes for port ${port} were not found`);\n\t\t\t}\n\t\t\treturn { port, processId };\n\t\t}\n\t\tthrow new Error(`Could not kill process with port ${port}`);\n\t}\n\n\t@traceRpc\n\tasync serializeTerminalState(ids: number[]): Promise<string> {\n\t\tconst promises: Promise<ISerializedTerminalState>[] = [];\n\t\tfor (const [persistentProcessId, persistentProcess] of this._ptys.entries()) {\n\t\t\t// Only serialize persistent processes that have had data written or performed a replay\n\t\t\tif (persistentProcess.hasWrittenData && ids.indexOf(persistentProcessId) !== -1) {\n\t\t\t\tpromises.push(Promises.withAsyncBody<ISerializedTerminalState>(async r => {\n\t\t\t\t\tr({\n\t\t\t\t\t\tid: persistentProcessId,\n\t\t\t\t\t\tshellLaunchConfig: persistentProcess.shellLaunchConfig,\n\t\t\t\t\t\tprocessDetails: await this._buildProcessDetails(persistentProcessId, persistentProcess),\n\t\t\t\t\t\tprocessLaunchConfig: persistentProcess.processLaunchOptions,\n\t\t\t\t\t\tunicodeVersion: persistentProcess.unicodeVersion,\n\t\t\t\t\t\treplayEvent: await persistentProcess.serializeNormalBuffer(),\n\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\tconst serialized: ICrossVersionSerializedTerminalState = {\n\t\t\tversion: 1,\n\t\t\tstate: await Promise.all(promises)\n\t\t};\n\t\treturn JSON.stringify(serialized);\n\t}\n\n\t@traceRpc\n\tasync reviveTerminalProcesses(workspaceId: string, state: ISerializedTerminalState[], dateTimeFormatLocale: string) {\n\t\tconst promises: Promise<void>[] = [];\n\t\tfor (const terminal of state) {\n\t\t\tpromises.push(this._reviveTerminalProcess(workspaceId, terminal));\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n\n\tprivate async _reviveTerminalProcess(workspaceId: string, terminal: ISerializedTerminalState): Promise<void> {\n\t\tconst restoreMessage = localize('terminal-history-restored', \"History restored\");\n\t\t// TODO: We may at some point want to show date information in a hover via a custom sequence:\n\t\t//   new Date(terminal.timestamp).toLocaleDateString(dateTimeFormatLocale)\n\t\t//   new Date(terminal.timestamp).toLocaleTimeString(dateTimeFormatLocale)\n\t\tconst newId = await this.createProcess(\n\t\t\t{\n\t\t\t\t...terminal.shellLaunchConfig,\n\t\t\t\tcwd: terminal.processDetails.cwd,\n\t\t\t\tcolor: terminal.processDetails.color,\n\t\t\t\ticon: terminal.processDetails.icon,\n\t\t\t\tname: terminal.processDetails.titleSource === TitleEventSource.Api ? terminal.processDetails.title : undefined,\n\t\t\t\tinitialText: terminal.replayEvent.events[0].data + formatMessageForTerminal(restoreMessage, { loudFormatting: true })\n\t\t\t},\n\t\t\tterminal.processDetails.cwd,\n\t\t\tterminal.replayEvent.events[0].cols,\n\t\t\tterminal.replayEvent.events[0].rows,\n\t\t\tterminal.unicodeVersion,\n\t\t\tterminal.processLaunchConfig.env,\n\t\t\tterminal.processLaunchConfig.executableEnv,\n\t\t\tterminal.processLaunchConfig.options,\n\t\t\ttrue,\n\t\t\tterminal.processDetails.workspaceId,\n\t\t\tterminal.processDetails.workspaceName,\n\t\t\ttrue,\n\t\t\tterminal.replayEvent.events[0].data\n\t\t);\n\t\t// Don't start the process here as there's no terminal to answer CPR\n\t\tconst oldId = this._getRevivingProcessId(workspaceId, terminal.id);\n\t\tthis._revivedPtyIdMap.set(oldId, { newId, state: terminal });\n\t\tthis._logService.info(`Revived process, old id ${oldId} -> new id ${newId}`);\n\t}\n\n\t@traceRpc\n\tasync shutdownAll(): Promise<void> {\n\t\tthis.dispose();\n\t}\n\n\t@traceRpc\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11',\n\t\tenv: IProcessEnvironment,\n\t\texecutableEnv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean,\n\t\tworkspaceId: string,\n\t\tworkspaceName: string,\n\t\tisReviving?: boolean,\n\t\trawReviveBuffer?: string\n\t): Promise<number> {\n\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\tthrow new Error('Attempt to create a process when attach object was provided');\n\t\t}\n\t\tconst id = ++this._lastPtyId;\n\t\tconst process = new TerminalProcess(shellLaunchConfig, cwd, cols, rows, env, executableEnv, options, this._logService, this._productService);\n\t\tconst processLaunchOptions: IPersistentTerminalProcessLaunchConfig = {\n\t\t\tenv,\n\t\t\texecutableEnv,\n\t\t\toptions\n\t\t};\n\t\tconst persistentProcess = new PersistentTerminalProcess(id, process, workspaceId, workspaceName, shouldPersist, cols, rows, processLaunchOptions, unicodeVersion, this._reconnectConstants, this._logService, isReviving && typeof shellLaunchConfig.initialText === 'string' ? shellLaunchConfig.initialText : undefined, rawReviveBuffer, shellLaunchConfig.icon, shellLaunchConfig.color, shellLaunchConfig.name, shellLaunchConfig.fixedDimensions);\n\t\tprocess.onProcessExit(event => {\n\t\t\tpersistentProcess.dispose();\n\t\t\tthis._ptys.delete(id);\n\t\t\tthis._onProcessExit.fire({ id, event });\n\t\t});\n\t\tpersistentProcess.onProcessData(event => this._onProcessData.fire({ id, event }));\n\t\tpersistentProcess.onProcessReplay(event => this._onProcessReplay.fire({ id, event }));\n\t\tpersistentProcess.onProcessReady(event => this._onProcessReady.fire({ id, event }));\n\t\tpersistentProcess.onProcessOrphanQuestion(() => this._onProcessOrphanQuestion.fire({ id }));\n\t\tpersistentProcess.onDidChangeProperty(property => this._onDidChangeProperty.fire({ id, property }));\n\t\tpersistentProcess.onPersistentProcessReady(() => {\n\t\t\tfor (const e of this._autoReplies.entries()) {\n\t\t\t\tpersistentProcess.installAutoReply(e[0], e[1]);\n\t\t\t}\n\t\t});\n\t\tthis._ptys.set(id, persistentProcess);\n\t\treturn id;\n\t}\n\n\t@traceRpc\n\tasync attachToProcess(id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._throwIfNoPty(id).attach();\n\t\t\tthis._logService.info(`Persistent process reconnection \"${id}\"`);\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Persistent process reconnection \"${id}\" failed`, e.message);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync updateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<void> {\n\t\tthis._throwIfNoPty(id).setTitle(title, titleSource);\n\t}\n\n\t@traceRpc\n\tasync updateIcon(id: number, userInitiated: boolean, icon: URI | { light: URI; dark: URI } | { id: string; color?: { id: string } }, color?: string): Promise<void> {\n\t\tthis._throwIfNoPty(id).setIcon(userInitiated, icon, color);\n\t}\n\n\t@traceRpc\n\tasync clearBuffer(id: number): Promise<void> {\n\t\tthis._throwIfNoPty(id).clearBuffer();\n\t}\n\n\t@traceRpc\n\tasync refreshProperty<T extends ProcessPropertyType>(id: number, type: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._throwIfNoPty(id).refreshProperty(type);\n\t}\n\n\t@traceRpc\n\tasync updateProperty<T extends ProcessPropertyType>(id: number, type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._throwIfNoPty(id).updateProperty(type, value);\n\t}\n\n\t@traceRpc\n\tasync detachFromProcess(id: number, forcePersist?: boolean): Promise<void> {\n\t\treturn this._throwIfNoPty(id).detach(forcePersist);\n\t}\n\n\t@traceRpc\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tfor (const pty of this._ptys.values()) {\n\t\t\tpty.reduceGraceTime();\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\tconst persistentProcesses = Array.from(this._ptys.entries()).filter(([_, pty]) => pty.shouldPersistTerminal);\n\n\t\tthis._logService.info(`Listing ${persistentProcesses.length} persistent terminals, ${this._ptys.size} total terminals`);\n\t\tconst promises = persistentProcesses.map(async ([id, terminalProcessData]) => this._buildProcessDetails(id, terminalProcessData));\n\t\tconst allTerminals = await Promise.all(promises);\n\t\treturn allTerminals.filter(entry => entry.isOrphan);\n\t}\n\n\t@traceRpc\n\tasync getPerformanceMarks(): Promise<performance.PerformanceMark[]> {\n\t\treturn performance.getMarks();\n\t}\n\n\t@traceRpc\n\tasync start(id: number): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tconst pty = this._ptys.get(id);\n\t\treturn pty ? pty.start() : { message: `Could not find pty with id \"${id}\"` };\n\t}\n\n\t@traceRpc\n\tasync shutdown(id: number, immediate: boolean): Promise<void> {\n\t\t// Don't throw if the pty is already shutdown\n\t\treturn this._ptys.get(id)?.shutdown(immediate);\n\t}\n\t@traceRpc\n\tasync input(id: number, data: string): Promise<void> {\n\t\treturn this._throwIfNoPty(id).input(data);\n\t}\n\t@traceRpc\n\tasync processBinary(id: number, data: string): Promise<void> {\n\t\treturn this._throwIfNoPty(id).writeBinary(data);\n\t}\n\t@traceRpc\n\tasync resize(id: number, cols: number, rows: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).resize(cols, rows);\n\t}\n\t@traceRpc\n\tasync getInitialCwd(id: number): Promise<string> {\n\t\treturn this._throwIfNoPty(id).getInitialCwd();\n\t}\n\t@traceRpc\n\tasync getCwd(id: number): Promise<string> {\n\t\treturn this._throwIfNoPty(id).getCwd();\n\t}\n\t@traceRpc\n\tasync acknowledgeDataEvent(id: number, charCount: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).acknowledgeDataEvent(charCount);\n\t}\n\t@traceRpc\n\tasync setUnicodeVersion(id: number, version: '6' | '11'): Promise<void> {\n\t\treturn this._throwIfNoPty(id).setUnicodeVersion(version);\n\t}\n\t@traceRpc\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\treturn [];\n\t}\n\t@traceRpc\n\tasync orphanQuestionReply(id: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).orphanQuestionReply();\n\t}\n\n\t@traceRpc\n\tasync installAutoReply(match: string, reply: string) {\n\t\tthis._autoReplies.set(match, reply);\n\t\t// If the auto reply exists on any existing terminals it will be overridden\n\t\tfor (const p of this._ptys.values()) {\n\t\t\tp.installAutoReply(match, reply);\n\t\t}\n\t}\n\t@traceRpc\n\tasync uninstallAllAutoReplies() {\n\t\tfor (const match of this._autoReplies.keys()) {\n\t\t\tfor (const p of this._ptys.values()) {\n\t\t\t\tp.uninstallAutoReply(match);\n\t\t\t}\n\t\t}\n\t}\n\t@traceRpc\n\tasync uninstallAutoReply(match: string) {\n\t\tfor (const p of this._ptys.values()) {\n\t\t\tp.uninstallAutoReply(match);\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync getDefaultSystemShell(osOverride: OperatingSystem = OS): Promise<string> {\n\t\treturn getSystemShell(osOverride, process.env);\n\t}\n\n\t@traceRpc\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn { ...process.env };\n\t}\n\n\t@traceRpc\n\tasync getWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix' | unknown): Promise<string> {\n\t\tif (direction === 'win-to-unix') {\n\t\t\tif (!isWindows) {\n\t\t\t\treturn original;\n\t\t\t}\n\t\t\tif (getWindowsBuildNumber() < 17063) {\n\t\t\t\treturn original.replace(/\\\\/g, '/');\n\t\t\t}\n\t\t\tconst wslExecutable = this._getWSLExecutablePath();\n\t\t\tif (!wslExecutable) {\n\t\t\t\treturn original;\n\t\t\t}\n\t\t\treturn new Promise<string>(c => {\n\t\t\t\tconst proc = execFile(wslExecutable, ['-e', 'wslpath', original], {}, (error, stdout, stderr) => {\n\t\t\t\t\tc(error ? original : escapeNonWindowsPath(stdout.trim()));\n\t\t\t\t});\n\t\t\t\tproc.stdin!.end();\n\t\t\t});\n\t\t}\n\t\tif (direction === 'unix-to-win') {\n\t\t\t// The backend is Windows, for example a local Windows workspace with a wsl session in\n\t\t\t// the terminal.\n\t\t\tif (isWindows) {\n\t\t\t\tif (getWindowsBuildNumber() < 17063) {\n\t\t\t\t\treturn original;\n\t\t\t\t}\n\t\t\t\tconst wslExecutable = this._getWSLExecutablePath();\n\t\t\t\tif (!wslExecutable) {\n\t\t\t\t\treturn original;\n\t\t\t\t}\n\t\t\t\treturn new Promise<string>(c => {\n\t\t\t\t\tconst proc = execFile(wslExecutable, ['-e', 'wslpath', '-w', original], {}, (error, stdout, stderr) => {\n\t\t\t\t\t\tc(error ? original : stdout.trim());\n\t\t\t\t\t});\n\t\t\t\t\tproc.stdin!.end();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t// Fallback just in case\n\t\treturn original;\n\t}\n\n\tprivate _getWSLExecutablePath(): string | undefined {\n\t\tconst useWSLexe = getWindowsBuildNumber() >= 16299;\n\t\tconst is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\tconst systemRoot = process.env['SystemRoot'];\n\t\tif (systemRoot) {\n\t\t\treturn join(systemRoot, is32ProcessOn64Windows ? 'Sysnative' : 'System32', useWSLexe ? 'wsl.exe' : 'bash.exe');\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t@traceRpc\n\tasync getRevivedPtyNewId(workspaceId: string, id: number): Promise<number | undefined> {\n\t\ttry {\n\t\t\treturn this._revivedPtyIdMap.get(this._getRevivingProcessId(workspaceId, id))?.newId;\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't find terminal ID ${workspaceId}-${id}`, e.message);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t@traceRpc\n\tasync setTerminalLayoutInfo(args: ISetTerminalLayoutInfoArgs): Promise<void> {\n\t\tthis._workspaceLayoutInfos.set(args.workspaceId, args);\n\t}\n\n\t@traceRpc\n\tasync getTerminalLayoutInfo(args: IGetTerminalLayoutInfoArgs): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tperformance.mark('code/willGetTerminalLayoutInfo');\n\t\tconst layout = this._workspaceLayoutInfos.get(args.workspaceId);\n\t\tif (layout) {\n\t\t\tconst doneSet: Set<number> = new Set();\n\t\t\tconst expandedTabs = await Promise.all(layout.tabs.map(async tab => this._expandTerminalTab(args.workspaceId, tab, doneSet)));\n\t\t\tconst tabs = expandedTabs.filter(t => t.terminals.length > 0);\n\t\t\tperformance.mark('code/didGetTerminalLayoutInfo');\n\t\t\treturn { tabs };\n\t\t}\n\t\tperformance.mark('code/didGetTerminalLayoutInfo');\n\t\treturn undefined;\n\t}\n\n\tprivate async _expandTerminalTab(workspaceId: string, tab: ITerminalTabLayoutInfoById, doneSet: Set<number>): Promise<ITerminalTabLayoutInfoDto> {\n\t\tconst expandedTerminals = (await Promise.all(tab.terminals.map(t => this._expandTerminalInstance(workspaceId, t, doneSet))));\n\t\tconst filtered = expandedTerminals.filter(term => term.terminal !== null) as IRawTerminalInstanceLayoutInfo<IProcessDetails>[];\n\t\treturn {\n\t\t\tisActive: tab.isActive,\n\t\t\tactivePersistentProcessId: tab.activePersistentProcessId,\n\t\t\tterminals: filtered\n\t\t};\n\t}\n\n\tprivate async _expandTerminalInstance(workspaceId: string, t: ITerminalInstanceLayoutInfoById, doneSet: Set<number>): Promise<IRawTerminalInstanceLayoutInfo<IProcessDetails | null>> {\n\t\ttry {\n\t\t\tconst oldId = this._getRevivingProcessId(workspaceId, t.terminal);\n\t\t\tconst revivedPtyId = this._revivedPtyIdMap.get(oldId)?.newId;\n\t\t\tthis._logService.info(`Expanding terminal instance, old id ${oldId} -> new id ${revivedPtyId}`);\n\t\t\tthis._revivedPtyIdMap.delete(oldId);\n\t\t\tconst persistentProcessId = revivedPtyId ?? t.terminal;\n\t\t\tif (doneSet.has(persistentProcessId)) {\n\t\t\t\tthrow new Error(`Terminal ${persistentProcessId} has already been expanded`);\n\t\t\t}\n\t\t\tdoneSet.add(persistentProcessId);\n\t\t\tconst persistentProcess = this._throwIfNoPty(persistentProcessId);\n\t\t\tconst processDetails = persistentProcess && await this._buildProcessDetails(t.terminal, persistentProcess, revivedPtyId !== undefined);\n\t\t\treturn {\n\t\t\t\tterminal: { ...processDetails, id: persistentProcessId },\n\t\t\t\trelativeSize: t.relativeSize\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't get layout info, a terminal was probably disconnected`, e.message);\n\t\t\tthis._logService.debug('Reattach to wrong terminal debug info - layout info by id', t);\n\t\t\tthis._logService.debug('Reattach to wrong terminal debug info - _revivePtyIdMap', Array.from(this._revivedPtyIdMap.values()));\n\t\t\tthis._logService.debug('Reattach to wrong terminal debug info - _ptys ids', Array.from(this._ptys.keys()));\n\t\t\t// this will be filtered out and not reconnected\n\t\t\treturn {\n\t\t\t\tterminal: null,\n\t\t\t\trelativeSize: t.relativeSize\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate _getRevivingProcessId(workspaceId: string, ptyId: number): string {\n\t\treturn `${workspaceId}-${ptyId}`;\n\t}\n\n\tprivate async _buildProcessDetails(id: number, persistentProcess: PersistentTerminalProcess, wasRevived: boolean = false): Promise<IProcessDetails> {\n\t\tperformance.mark(`code/willBuildProcessDetails/${id}`);\n\t\t// If the process was just revived, don't do the orphan check as it will\n\t\t// take some time\n\t\tconst [cwd, isOrphan] = await Promise.all([persistentProcess.getCwd(), wasRevived ? true : persistentProcess.isOrphaned()]);\n\t\tconst result = {\n\t\t\tid,\n\t\t\ttitle: persistentProcess.title,\n\t\t\ttitleSource: persistentProcess.titleSource,\n\t\t\tpid: persistentProcess.pid,\n\t\t\tworkspaceId: persistentProcess.workspaceId,\n\t\t\tworkspaceName: persistentProcess.workspaceName,\n\t\t\tcwd,\n\t\t\tisOrphan,\n\t\t\ticon: persistentProcess.icon,\n\t\t\tcolor: persistentProcess.color,\n\t\t\tfixedDimensions: persistentProcess.fixedDimensions,\n\t\t\tenvironmentVariableCollections: persistentProcess.processLaunchOptions.options.environmentVariableCollections,\n\t\t\treconnectionProperties: persistentProcess.shellLaunchConfig.reconnectionProperties,\n\t\t\twaitOnExit: persistentProcess.shellLaunchConfig.waitOnExit,\n\t\t\thideFromUser: persistentProcess.shellLaunchConfig.hideFromUser,\n\t\t\tisFeatureTerminal: persistentProcess.shellLaunchConfig.isFeatureTerminal,\n\t\t\ttype: persistentProcess.shellLaunchConfig.type,\n\t\t\thasChildProcesses: persistentProcess.hasChildProcesses,\n\t\t\tshellIntegrationNonce: persistentProcess.processLaunchOptions.options.shellIntegration.nonce\n\t\t};\n\t\tperformance.mark(`code/didBuildProcessDetails/${id}`);\n\t\treturn result;\n\t}\n\n\tprivate _throwIfNoPty(id: number): PersistentTerminalProcess {\n\t\tconst pty = this._ptys.get(id);\n\t\tif (!pty) {\n\t\t\tthrow new ErrorNoTelemetry(`Could not find pty ${id} on pty host`);\n\t\t}\n\t\treturn pty;\n\t}\n}\n\nconst enum InteractionState {\n\t/** The terminal has not been interacted with. */\n\tNone = 'None',\n\t/** The terminal has only been interacted with by the replay mechanism. */\n\tReplayOnly = 'ReplayOnly',\n\t/** The terminal has been directly interacted with this session. */\n\tSession = 'Session'\n}\n\nclass PersistentTerminalProcess extends Disposable {\n\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\tprivate readonly _autoReplies: Map<string, TerminalAutoResponder> = new Map();\n\n\tprivate readonly _pendingCommands = new Map<number, { resolve: (data: any) => void; reject: (err: any) => void }>();\n\n\tprivate _isStarted: boolean = false;\n\tprivate _interactionState: MutationLogger<InteractionState>;\n\n\tprivate _orphanQuestionBarrier: AutoOpenBarrier | null;\n\tprivate _orphanQuestionReplyTime: number;\n\tprivate _orphanRequestQueue = new Queue<boolean>();\n\tprivate _disconnectRunner1: ProcessTimeRunOnceScheduler;\n\tprivate _disconnectRunner2: ProcessTimeRunOnceScheduler;\n\n\tprivate readonly _onProcessReplay = this._register(new Emitter<IPtyHostProcessReplayEvent>());\n\treadonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onPersistentProcessReady = this._register(new Emitter<void>());\n\t/** Fired when the persistent process has a ready process and has finished its replay. */\n\treadonly onPersistentProcessReady = this._onPersistentProcessReady.event;\n\tprivate readonly _onProcessData = this._register(new Emitter<string>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessOrphanQuestion = this._register(new Emitter<void>());\n\treadonly onProcessOrphanQuestion = this._onProcessOrphanQuestion.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\n\tprivate _inReplay = false;\n\n\tprivate _pid = -1;\n\tprivate _cwd = '';\n\tprivate _title: string | undefined;\n\tprivate _titleSource: TitleEventSource = TitleEventSource.Process;\n\tprivate _serializer: ITerminalSerializer;\n\tprivate _wasRevived: boolean;\n\tprivate _fixedDimensions: IFixedTerminalDimensions | undefined;\n\n\tget pid(): number { return this._pid; }\n\tget shellLaunchConfig(): IShellLaunchConfig { return this._terminalProcess.shellLaunchConfig; }\n\tget hasWrittenData(): boolean { return this._interactionState.value !== InteractionState.None; }\n\tget title(): string { return this._title || this._terminalProcess.currentTitle; }\n\tget titleSource(): TitleEventSource { return this._titleSource; }\n\tget icon(): TerminalIcon | undefined { return this._icon; }\n\tget color(): string | undefined { return this._color; }\n\tget fixedDimensions(): IFixedTerminalDimensions | undefined { return this._fixedDimensions; }\n\tget hasChildProcesses(): boolean { return this._terminalProcess.hasChildProcesses; }\n\n\tsetTitle(title: string, titleSource: TitleEventSource): void {\n\t\tif (titleSource === TitleEventSource.Api) {\n\t\t\tthis._interactionState.setValue(InteractionState.Session, 'setTitle');\n\t\t\tthis._serializer.freeRawReviveBuffer();\n\t\t}\n\t\tthis._title = title;\n\t\tthis._titleSource = titleSource;\n\t}\n\n\tsetIcon(userInitiated: boolean, icon: TerminalIcon, color?: string): void {\n\t\tif (!this._icon || 'id' in icon && 'id' in this._icon && icon.id !== this._icon.id ||\n\t\t\t!this.color || color !== this._color) {\n\n\t\t\tthis._serializer.freeRawReviveBuffer();\n\t\t\tif (userInitiated) {\n\t\t\t\tthis._interactionState.setValue(InteractionState.Session, 'setIcon');\n\t\t\t}\n\t\t}\n\t\tthis._icon = icon;\n\t\tthis._color = color;\n\t}\n\n\tprivate _setFixedDimensions(fixedDimensions?: IFixedTerminalDimensions): void {\n\t\tthis._fixedDimensions = fixedDimensions;\n\t}\n\n\tconstructor(\n\t\tprivate _persistentProcessId: number,\n\t\tprivate readonly _terminalProcess: TerminalProcess,\n\t\treadonly workspaceId: string,\n\t\treadonly workspaceName: string,\n\t\treadonly shouldPersistTerminal: boolean,\n\t\tcols: number,\n\t\trows: number,\n\t\treadonly processLaunchOptions: IPersistentTerminalProcessLaunchConfig,\n\t\tpublic unicodeVersion: '6' | '11',\n\t\treconnectConstants: IReconnectConstants,\n\t\tprivate readonly _logService: ILogService,\n\t\treviveBuffer: string | undefined,\n\t\trawReviveBuffer: string | undefined,\n\t\tprivate _icon?: TerminalIcon,\n\t\tprivate _color?: string,\n\t\tname?: string,\n\t\tfixedDimensions?: IFixedTerminalDimensions\n\t) {\n\t\tsuper();\n\t\tthis._interactionState = new MutationLogger(`Persistent process \"${this._persistentProcessId}\" interaction state`, InteractionState.None, this._logService);\n\t\tthis._wasRevived = reviveBuffer !== undefined;\n\t\tthis._serializer = new XtermSerializer(\n\t\t\tcols,\n\t\t\trows,\n\t\t\treconnectConstants.scrollback,\n\t\t\tunicodeVersion,\n\t\t\treviveBuffer,\n\t\t\tprocessLaunchOptions.options.shellIntegration.nonce,\n\t\t\tshouldPersistTerminal ? rawReviveBuffer : undefined,\n\t\t\tthis._logService\n\t\t);\n\t\tif (name) {\n\t\t\tthis.setTitle(name, TitleEventSource.Api);\n\t\t}\n\t\tthis._fixedDimensions = fixedDimensions;\n\t\tthis._orphanQuestionBarrier = null;\n\t\tthis._orphanQuestionReplyTime = 0;\n\t\tthis._disconnectRunner1 = this._register(new ProcessTimeRunOnceScheduler(() => {\n\t\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": The reconnection grace time of ${printTime(reconnectConstants.graceTime)} has expired, shutting down pid \"${this._pid}\"`);\n\t\t\tthis.shutdown(true);\n\t\t}, reconnectConstants.graceTime));\n\t\tthis._disconnectRunner2 = this._register(new ProcessTimeRunOnceScheduler(() => {\n\t\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": The short reconnection grace time of ${printTime(reconnectConstants.shortGraceTime)} has expired, shutting down pid ${this._pid}`);\n\t\t\tthis.shutdown(true);\n\t\t}, reconnectConstants.shortGraceTime));\n\t\tthis._register(this._terminalProcess.onProcessExit(() => this._bufferer.stopBuffering(this._persistentProcessId)));\n\t\tthis._register(this._terminalProcess.onProcessReady(e => {\n\t\t\tthis._pid = e.pid;\n\t\t\tthis._cwd = e.cwd;\n\t\t\tthis._onProcessReady.fire(e);\n\t\t}));\n\t\tthis._register(this._terminalProcess.onDidChangeProperty(e => {\n\t\t\tthis._onDidChangeProperty.fire(e);\n\t\t}));\n\n\t\t// Data buffering to reduce the amount of messages going to the renderer\n\t\tthis._bufferer = new TerminalDataBufferer((_, data) => this._onProcessData.fire(data));\n\t\tthis._register(this._bufferer.startBuffering(this._persistentProcessId, this._terminalProcess.onProcessData));\n\n\t\t// Data recording for reconnect\n\t\tthis._register(this.onProcessData(e => this._serializer.handleData(e)));\n\n\t\t// Clean up other disposables\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const e of this._autoReplies.values()) {\n\t\t\t\te.dispose();\n\t\t\t}\n\t\t\tthis._autoReplies.clear();\n\t\t}));\n\t}\n\n\tasync attach(): Promise<void> {\n\t\tif (!this._disconnectRunner1.isScheduled() && !this._disconnectRunner2.isScheduled()) {\n\t\t\tthis._logService.warn(`Persistent process \"${this._persistentProcessId}\": Process had no disconnect runners but was an orphan`);\n\t\t}\n\t\tthis._disconnectRunner1.cancel();\n\t\tthis._disconnectRunner2.cancel();\n\t}\n\n\tasync detach(forcePersist?: boolean): Promise<void> {\n\t\t// Keep the process around if it was indicated to persist and it has had some iteraction or\n\t\t// was replayed\n\t\tif (this.shouldPersistTerminal && (this._interactionState.value !== InteractionState.None || forcePersist)) {\n\t\t\tthis._disconnectRunner1.schedule();\n\t\t} else {\n\t\t\tthis.shutdown(true);\n\t\t}\n\t}\n\n\tserializeNormalBuffer(): Promise<IPtyHostProcessReplayEvent> {\n\t\treturn this._serializer.generateReplayEvent(true, this._interactionState.value !== InteractionState.Session);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._terminalProcess.refreshProperty(type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\tif (type === ProcessPropertyType.FixedDimensions) {\n\t\t\treturn this._setFixedDimensions(value as IProcessPropertyMap[ProcessPropertyType.FixedDimensions]);\n\t\t}\n\t}\n\n\tasync start(): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tif (!this._isStarted) {\n\t\t\tconst result = await this._terminalProcess.start();\n\t\t\tif (result && 'message' in result) {\n\t\t\t\t// it's a terminal launch error\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthis._isStarted = true;\n\n\t\t\t// If the process was revived, trigger a replay on first start. An alternative approach\n\t\t\t// could be to start it on the pty host before attaching but this fails on Windows as\n\t\t\t// conpty's inherit cursor option which is required, ends up sending DSR CPR which\n\t\t\t// causes conhost to hang when no response is received from the terminal (which wouldn't\n\t\t\t// be attached yet). https://github.com/microsoft/terminal/issues/11213\n\t\t\tif (this._wasRevived) {\n\t\t\t\tthis.triggerReplay();\n\t\t\t} else {\n\t\t\t\tthis._onPersistentProcessReady.fire();\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tthis._onProcessReady.fire({ pid: this._pid, cwd: this._cwd, windowsPty: this._terminalProcess.getWindowsPty() });\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.Title, value: this._terminalProcess.currentTitle });\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.ShellType, value: this._terminalProcess.shellType });\n\t\tthis.triggerReplay();\n\t\treturn undefined;\n\t}\n\tshutdown(immediate: boolean): void {\n\t\treturn this._terminalProcess.shutdown(immediate);\n\t}\n\tinput(data: string): void {\n\t\tthis._interactionState.setValue(InteractionState.Session, 'input');\n\t\tthis._serializer.freeRawReviveBuffer();\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const listener of this._autoReplies.values()) {\n\t\t\tlistener.handleInput();\n\t\t}\n\t\treturn this._terminalProcess.input(data);\n\t}\n\twriteBinary(data: string): Promise<void> {\n\t\treturn this._terminalProcess.processBinary(data);\n\t}\n\tresize(cols: number, rows: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._serializer.handleResize(cols, rows);\n\n\t\t// Buffered events should flush when a resize occurs\n\t\tthis._bufferer.flushBuffer(this._persistentProcessId);\n\n\t\tfor (const listener of this._autoReplies.values()) {\n\t\t\tlistener.handleResize();\n\t\t}\n\t\treturn this._terminalProcess.resize(cols, rows);\n\t}\n\tasync clearBuffer(): Promise<void> {\n\t\tthis._serializer.clearBuffer();\n\t\tthis._terminalProcess.clearBuffer();\n\t}\n\tsetUnicodeVersion(version: '6' | '11'): void {\n\t\tthis.unicodeVersion = version;\n\t\tthis._serializer.setUnicodeVersion?.(version);\n\t\t// TODO: Pass in unicode version in ctor\n\t}\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._terminalProcess.acknowledgeDataEvent(charCount);\n\t}\n\tgetInitialCwd(): Promise<string> {\n\t\treturn this._terminalProcess.getInitialCwd();\n\t}\n\tgetCwd(): Promise<string> {\n\t\treturn this._terminalProcess.getCwd();\n\t}\n\n\tasync triggerReplay(): Promise<void> {\n\t\tif (this._interactionState.value === InteractionState.None) {\n\t\t\tthis._interactionState.setValue(InteractionState.ReplayOnly, 'triggerReplay');\n\t\t}\n\t\tconst ev = await this._serializer.generateReplayEvent();\n\t\tlet dataLength = 0;\n\t\tfor (const e of ev.events) {\n\t\t\tdataLength += e.data.length;\n\t\t}\n\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": Replaying ${dataLength} chars and ${ev.events.length} size events`);\n\t\tthis._onProcessReplay.fire(ev);\n\t\tthis._terminalProcess.clearUnacknowledgedChars();\n\t\tthis._onPersistentProcessReady.fire();\n\t}\n\n\tinstallAutoReply(match: string, reply: string) {\n\t\tthis._autoReplies.get(match)?.dispose();\n\t\tthis._autoReplies.set(match, new TerminalAutoResponder(this._terminalProcess, match, reply, this._logService));\n\t}\n\n\tuninstallAutoReply(match: string) {\n\t\tconst autoReply = this._autoReplies.get(match);\n\t\tautoReply?.dispose();\n\t\tthis._autoReplies.delete(match);\n\t}\n\n\tsendCommandResult(reqId: number, isError: boolean, serializedPayload: any): void {\n\t\tconst data = this._pendingCommands.get(reqId);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingCommands.delete(reqId);\n\t}\n\n\torphanQuestionReply(): void {\n\t\tthis._orphanQuestionReplyTime = Date.now();\n\t\tif (this._orphanQuestionBarrier) {\n\t\t\tconst barrier = this._orphanQuestionBarrier;\n\t\t\tthis._orphanQuestionBarrier = null;\n\t\t\tbarrier.open();\n\t\t}\n\t}\n\n\treduceGraceTime(): void {\n\t\tif (this._disconnectRunner2.isScheduled()) {\n\t\t\t// we are disconnected and already running the short reconnection timer\n\t\t\treturn;\n\t\t}\n\t\tif (this._disconnectRunner1.isScheduled()) {\n\t\t\t// we are disconnected and running the long reconnection timer\n\t\t\tthis._disconnectRunner2.schedule();\n\t\t}\n\t}\n\n\tasync isOrphaned(): Promise<boolean> {\n\t\treturn await this._orphanRequestQueue.queue(async () => this._isOrphaned());\n\t}\n\n\tprivate async _isOrphaned(): Promise<boolean> {\n\t\t// The process is already known to be orphaned\n\t\tif (this._disconnectRunner1.isScheduled() || this._disconnectRunner2.isScheduled()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ask whether the renderer(s) whether the process is orphaned and await the reply\n\t\tif (!this._orphanQuestionBarrier) {\n\t\t\t// the barrier opens after 4 seconds with or without a reply\n\t\t\tthis._orphanQuestionBarrier = new AutoOpenBarrier(4000);\n\t\t\tthis._orphanQuestionReplyTime = 0;\n\t\t\tthis._onProcessOrphanQuestion.fire();\n\t\t}\n\n\t\tawait this._orphanQuestionBarrier.wait();\n\t\treturn (Date.now() - this._orphanQuestionReplyTime > 500);\n\t}\n}\n\nclass MutationLogger<T> {\n\tget value(): T { return this._value; }\n\tsetValue(value: T, reason: string) {\n\t\tif (this._value !== value) {\n\t\t\tthis._value = value;\n\t\t\tthis._log(reason);\n\t\t}\n\t}\n\n\tconstructor(\n\t\tprivate readonly _name: string,\n\t\tprivate _value: T,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tthis._log('initialized');\n\t}\n\n\tprivate _log(reason: string): void {\n\t\tthis._logService.debug(`MutationLogger \"${this._name}\" set to \"${this._value}\", reason: ${reason}`);\n\t}\n}\n\nclass XtermSerializer implements ITerminalSerializer {\n\tprivate readonly _xterm: XtermTerminal;\n\tprivate readonly _shellIntegrationAddon: ShellIntegrationAddon;\n\tprivate _unicodeAddon?: XtermUnicode11Addon;\n\n\tconstructor(\n\t\tcols: number,\n\t\trows: number,\n\t\tscrollback: number,\n\t\tunicodeVersion: '6' | '11',\n\t\treviveBufferWithRestoreMessage: string | undefined,\n\t\tshellIntegrationNonce: string,\n\t\tprivate _rawReviveBuffer: string | undefined,\n\t\tlogService: ILogService\n\t) {\n\t\tthis._xterm = new XtermTerminal({\n\t\t\tcols,\n\t\t\trows,\n\t\t\tscrollback,\n\t\t\tallowProposedApi: true\n\t\t});\n\t\tif (reviveBufferWithRestoreMessage) {\n\t\t\tthis._xterm.writeln(reviveBufferWithRestoreMessage);\n\t\t}\n\t\tthis.setUnicodeVersion(unicodeVersion);\n\t\tthis._shellIntegrationAddon = new ShellIntegrationAddon(shellIntegrationNonce, true, undefined, logService);\n\t\tthis._xterm.loadAddon(this._shellIntegrationAddon);\n\t}\n\n\tfreeRawReviveBuffer(): void {\n\t\t// Free the memory of the terminal if it will need to be re-serialized\n\t\tthis._rawReviveBuffer = undefined;\n\t}\n\n\thandleData(data: string): void {\n\t\tthis._xterm.write(data);\n\t}\n\n\thandleResize(cols: number, rows: number): void {\n\t\tthis._xterm.resize(cols, rows);\n\t}\n\n\tclearBuffer(): void {\n\t\tthis._xterm.clear();\n\t}\n\n\tasync generateReplayEvent(normalBufferOnly?: boolean, restoreToLastReviveBuffer?: boolean): Promise<IPtyHostProcessReplayEvent> {\n\t\tconst serialize = new (await this._getSerializeConstructor());\n\t\tthis._xterm.loadAddon(serialize);\n\t\tconst options: ISerializeOptions = {\n\t\t\tscrollback: this._xterm.options.scrollback\n\t\t};\n\t\tif (normalBufferOnly) {\n\t\t\toptions.excludeAltBuffer = true;\n\t\t\toptions.excludeModes = true;\n\t\t}\n\t\tlet serialized: string;\n\t\tif (restoreToLastReviveBuffer && this._rawReviveBuffer) {\n\t\t\tserialized = this._rawReviveBuffer;\n\t\t} else {\n\t\t\tserialized = serialize.serialize(options);\n\t\t}\n\t\treturn {\n\t\t\tevents: [\n\t\t\t\t{\n\t\t\t\t\tcols: this._xterm.cols,\n\t\t\t\t\trows: this._xterm.rows,\n\t\t\t\t\tdata: serialized\n\t\t\t\t}\n\t\t\t],\n\t\t\tcommands: this._shellIntegrationAddon.serialize()\n\t\t};\n\t}\n\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\tif (this._xterm.unicode.activeVersion === version) {\n\t\t\treturn;\n\t\t}\n\t\tif (version === '11') {\n\t\t\tthis._unicodeAddon = new (await this._getUnicode11Constructor());\n\t\t\tthis._xterm.loadAddon(this._unicodeAddon);\n\t\t} else {\n\t\t\tthis._unicodeAddon?.dispose();\n\t\t\tthis._unicodeAddon = undefined;\n\t\t}\n\t\tthis._xterm.unicode.activeVersion = version;\n\t}\n\n\tasync _getUnicode11Constructor(): Promise<typeof Unicode11Addon> {\n\t\tif (!Unicode11Addon) {\n\t\t\tUnicode11Addon = (await import('@xterm/addon-unicode11')).Unicode11Addon;\n\t\t}\n\t\treturn Unicode11Addon;\n\t}\n\n\tasync _getSerializeConstructor(): Promise<typeof SerializeAddon> {\n\t\tif (!SerializeAddon) {\n\t\t\tSerializeAddon = (await import('@xterm/addon-serialize')).SerializeAddon;\n\t\t}\n\t\treturn SerializeAddon;\n\t}\n}\n\nfunction printTime(ms: number): string {\n\tlet h = 0;\n\tlet m = 0;\n\tlet s = 0;\n\tif (ms >= 1000) {\n\t\ts = Math.floor(ms / 1000);\n\t\tms -= s * 1000;\n\t}\n\tif (s >= 60) {\n\t\tm = Math.floor(s / 60);\n\t\ts -= m * 60;\n\t}\n\tif (m >= 60) {\n\t\th = Math.floor(m / 60);\n\t\tm -= h * 60;\n\t}\n\tconst _h = h ? `${h}h` : ``;\n\tconst _m = m ? `${m}m` : ``;\n\tconst _s = s ? `${s}s` : ``;\n\tconst _ms = ms ? `${ms}ms` : ``;\n\treturn `${_h}${_m}${_s}${_ms}`;\n}\n\ninterface ITerminalSerializer {\n\thandleData(data: string): void;\n\tfreeRawReviveBuffer(): void;\n\thandleResize(cols: number, rows: number): void;\n\tclearBuffer(): void;\n\tgenerateReplayEvent(normalBufferOnly?: boolean, restoreToLastReviveBuffer?: boolean): Promise<IPtyHostProcessReplayEvent>;\n\tsetUnicodeVersion?(version: '6' | '11'): void;\n}\n"],
  "mappings": "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",
  "names": ["stdout", "process", "InteractionState"]
}
