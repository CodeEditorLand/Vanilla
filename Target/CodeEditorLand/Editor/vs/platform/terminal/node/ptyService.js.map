{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/ptyService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exec, execFile } from \"child_process\";\nimport { join } from \"path\";\nimport type {\n\tISerializeOptions,\n\tSerializeAddon as XtermSerializeAddon,\n} from \"@xterm/addon-serialize\";\nimport type { Unicode11Addon as XtermUnicode11Addon } from \"@xterm/addon-unicode11\";\n// ESM-comment-begin\n// import { Terminal as XtermTerminal } from '@xterm/headless';\n// ESM-comment-end\n// ESM-uncomment-begin\nimport pkg from \"@xterm/headless\";\nimport {\n\tAutoOpenBarrier,\n\tProcessTimeRunOnceScheduler,\n\tPromises,\n\tQueue,\n\ttimeout,\n} from \"../../../base/common/async.js\";\nimport { memoize } from \"../../../base/common/decorators.js\";\nimport { ErrorNoTelemetry } from \"../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable, toDisposable } from \"../../../base/common/lifecycle.js\";\nimport * as performance from \"../../../base/common/performance.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOS,\n\ttype OperatingSystem,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { getSystemShell } from \"../../../base/node/shell.js\";\nimport { localize } from \"../../../nls.js\";\nimport { type ILogService, LogLevel } from \"../../log/common/log.js\";\nimport type { IProductService } from \"../../product/common/productService.js\";\nimport type { IPtyHostProcessReplayEvent } from \"../common/capabilities/capabilities.js\";\nimport { RequestStore } from \"../common/requestStore.js\";\nimport {\n\ttype ICrossVersionSerializedTerminalState,\n\ttype IFixedTerminalDimensions,\n\ttype IPersistentTerminalProcessLaunchConfig,\n\ttype IProcessDataEvent,\n\ttype IProcessProperty,\n\ttype IProcessPropertyMap,\n\ttype IProcessReadyEvent,\n\ttype IPtyHostLatencyMeasurement,\n\ttype IPtyService,\n\ttype IRawTerminalInstanceLayoutInfo,\n\ttype IReconnectConstants,\n\ttype ISerializedTerminalState,\n\ttype IShellLaunchConfig,\n\ttype ITerminalInstanceLayoutInfoById,\n\ttype ITerminalLaunchError,\n\ttype ITerminalProcessOptions,\n\ttype ITerminalTabLayoutInfoById,\n\ttype ITerminalsLayoutInfo,\n\tProcessPropertyType,\n\ttype TerminalIcon,\n\tTitleEventSource,\n} from \"../common/terminal.js\";\nimport { TerminalAutoResponder } from \"../common/terminalAutoResponder.js\";\nimport { TerminalDataBufferer } from \"../common/terminalDataBuffering.js\";\nimport { escapeNonWindowsPath } from \"../common/terminalEnvironment.js\";\nimport type {\n\tIGetTerminalLayoutInfoArgs,\n\tIProcessDetails,\n\tISetTerminalLayoutInfoArgs,\n\tITerminalTabLayoutInfoDto,\n} from \"../common/terminalProcess.js\";\nimport { formatMessageForTerminal } from \"../common/terminalStrings.js\";\nimport { ShellIntegrationAddon } from \"../common/xterm/shellIntegrationAddon.js\";\nimport { ignoreProcessNames } from \"./childProcessMonitor.js\";\nimport { getWindowsBuildNumber } from \"./terminalEnvironment.js\";\nimport { TerminalProcess } from \"./terminalProcess.js\";\ntype XtermTerminal = pkg.Terminal;\nconst { Terminal: XtermTerminal } = pkg;\n// ESM-uncomment-end\n\nexport function traceRpc(_target: any, key: string, descriptor: any) {\n\tif (typeof descriptor.value !== \"function\") {\n\t\tthrow new Error(\"not supported\");\n\t}\n\tconst fnKey = \"value\";\n\tconst fn = descriptor.value;\n\tdescriptor[fnKey] = async function (...args: any[]) {\n\t\tif (this.traceRpcArgs.logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis.traceRpcArgs.logService.trace(\n\t\t\t\t`[RPC Request] PtyService#${fn.name}(${args.map((e) => JSON.stringify(e)).join(\", \")})`,\n\t\t\t);\n\t\t}\n\t\tif (this.traceRpcArgs.simulatedLatency) {\n\t\t\tawait timeout(this.traceRpcArgs.simulatedLatency);\n\t\t}\n\t\tlet result: any;\n\t\ttry {\n\t\t\tresult = await fn.apply(this, args);\n\t\t} catch (e) {\n\t\t\tthis.traceRpcArgs.logService.error(\n\t\t\t\t`[RPC Response] PtyService#${fn.name}`,\n\t\t\t\te,\n\t\t\t);\n\t\t\tthrow e;\n\t\t}\n\t\tif (this.traceRpcArgs.logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis.traceRpcArgs.logService.trace(\n\t\t\t\t`[RPC Response] PtyService#${fn.name}`,\n\t\t\t\tresult,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t};\n}\n\ntype WorkspaceId = string;\n\nlet SerializeAddon: typeof XtermSerializeAddon;\nlet Unicode11Addon: typeof XtermUnicode11Addon;\n\nexport class PtyService extends Disposable implements IPtyService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _ptys: Map<number, PersistentTerminalProcess> = new Map();\n\tprivate readonly _workspaceLayoutInfos = new Map<\n\t\tWorkspaceId,\n\t\tISetTerminalLayoutInfoArgs\n\t>();\n\tprivate readonly _detachInstanceRequestStore: RequestStore<\n\t\tIProcessDetails | undefined,\n\t\t{ workspaceId: string; instanceId: number }\n\t>;\n\tprivate readonly _revivedPtyIdMap: Map<\n\t\tstring,\n\t\t{ newId: number; state: ISerializedTerminalState }\n\t> = new Map();\n\tprivate readonly _autoReplies: Map<string, string> = new Map();\n\n\tprivate _lastPtyId = 0;\n\n\tprivate readonly _onHeartbeat = this._register(new Emitter<void>());\n\treadonly onHeartbeat = this._traceEvent(\n\t\t\"_onHeartbeat\",\n\t\tthis._onHeartbeat.event,\n\t);\n\n\tprivate readonly _onProcessData = this._register(\n\t\tnew Emitter<{ id: number; event: IProcessDataEvent | string }>(),\n\t);\n\treadonly onProcessData = this._traceEvent(\n\t\t\"_onProcessData\",\n\t\tthis._onProcessData.event,\n\t);\n\tprivate readonly _onProcessReplay = this._register(\n\t\tnew Emitter<{ id: number; event: IPtyHostProcessReplayEvent }>(),\n\t);\n\treadonly onProcessReplay = this._traceEvent(\n\t\t\"_onProcessReplay\",\n\t\tthis._onProcessReplay.event,\n\t);\n\tprivate readonly _onProcessReady = this._register(\n\t\tnew Emitter<{ id: number; event: IProcessReadyEvent }>(),\n\t);\n\treadonly onProcessReady = this._traceEvent(\n\t\t\"_onProcessReady\",\n\t\tthis._onProcessReady.event,\n\t);\n\tprivate readonly _onProcessExit = this._register(\n\t\tnew Emitter<{ id: number; event: number | undefined }>(),\n\t);\n\treadonly onProcessExit = this._traceEvent(\n\t\t\"_onProcessExit\",\n\t\tthis._onProcessExit.event,\n\t);\n\tprivate readonly _onProcessOrphanQuestion = this._register(\n\t\tnew Emitter<{ id: number }>(),\n\t);\n\treadonly onProcessOrphanQuestion = this._traceEvent(\n\t\t\"_onProcessOrphanQuestion\",\n\t\tthis._onProcessOrphanQuestion.event,\n\t);\n\tprivate readonly _onDidRequestDetach = this._register(\n\t\tnew Emitter<{\n\t\t\trequestId: number;\n\t\t\tworkspaceId: string;\n\t\t\tinstanceId: number;\n\t\t}>(),\n\t);\n\treadonly onDidRequestDetach = this._traceEvent(\n\t\t\"_onDidRequestDetach\",\n\t\tthis._onDidRequestDetach.event,\n\t);\n\tprivate readonly _onDidChangeProperty = this._register(\n\t\tnew Emitter<{ id: number; property: IProcessProperty<any> }>(),\n\t);\n\treadonly onDidChangeProperty = this._traceEvent(\n\t\t\"_onDidChangeProperty\",\n\t\tthis._onDidChangeProperty.event,\n\t);\n\n\tprivate _traceEvent<T>(name: string, event: Event<T>): Event<T> {\n\t\tevent((e) => {\n\t\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t`[RPC Event] PtyService#${name}.fire(${JSON.stringify(e)})`,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\treturn event;\n\t}\n\n\t@memoize\n\tget traceRpcArgs(): { logService: ILogService; simulatedLatency: number } {\n\t\treturn {\n\t\t\tlogService: this._logService,\n\t\t\tsimulatedLatency: this._simulatedLatency,\n\t\t};\n\t}\n\n\tconstructor(\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _productService: IProductService,\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\tprivate readonly _simulatedLatency: number,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tfor (const pty of this._ptys.values()) {\n\t\t\t\t\tpty.shutdown(true);\n\t\t\t\t}\n\t\t\t\tthis._ptys.clear();\n\t\t\t}),\n\t\t);\n\n\t\tthis._detachInstanceRequestStore = this._register(\n\t\t\tnew RequestStore(undefined, this._logService),\n\t\t);\n\t\tthis._detachInstanceRequestStore.onCreateRequest(\n\t\t\tthis._onDidRequestDetach.fire,\n\t\t\tthis._onDidRequestDetach,\n\t\t);\n\t}\n\n\t@traceRpc\n\tasync refreshIgnoreProcessNames(names: string[]): Promise<void> {\n\t\tignoreProcessNames.length = 0;\n\t\tignoreProcessNames.push(...names);\n\t}\n\n\t@traceRpc\n\tasync requestDetachInstance(\n\t\tworkspaceId: string,\n\t\tinstanceId: number,\n\t): Promise<IProcessDetails | undefined> {\n\t\treturn this._detachInstanceRequestStore.createRequest({\n\t\t\tworkspaceId,\n\t\t\tinstanceId,\n\t\t});\n\t}\n\n\t@traceRpc\n\tasync acceptDetachInstanceReply(\n\t\trequestId: number,\n\t\tpersistentProcessId: number,\n\t): Promise<void> {\n\t\tlet processDetails: IProcessDetails | undefined;\n\t\tconst pty = this._ptys.get(persistentProcessId);\n\t\tif (pty) {\n\t\t\tprocessDetails = await this._buildProcessDetails(\n\t\t\t\tpersistentProcessId,\n\t\t\t\tpty,\n\t\t\t);\n\t\t}\n\t\tthis._detachInstanceRequestStore.acceptReply(requestId, processDetails);\n\t}\n\n\t@traceRpc\n\tasync freePortKillProcess(\n\t\tport: string,\n\t): Promise<{ port: string; processId: string }> {\n\t\tconst stdout = await new Promise<string>((resolve, reject) => {\n\t\t\texec(\n\t\t\t\tisWindows\n\t\t\t\t\t? `netstat -ano | findstr \"${port}\"`\n\t\t\t\t\t: `lsof -nP -iTCP -sTCP:LISTEN | grep ${port}`,\n\t\t\t\t{},\n\t\t\t\t(err, stdout) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\t\"Problem occurred when listing active processes\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tresolve(stdout);\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t\tconst processesForPort = stdout\n\t\t\t.split(/\\r?\\n/)\n\t\t\t.filter((s) => !!s.trim());\n\t\tif (processesForPort.length >= 1) {\n\t\t\tconst capturePid = /\\s+(\\d+)(?:\\s+|$)/;\n\t\t\tconst processId = processesForPort[0].match(capturePid)?.[1];\n\t\t\tif (processId) {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.kill(Number.parseInt(processId));\n\t\t\t\t} catch {}\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Processes for port ${port} were not found`);\n\t\t\t}\n\t\t\treturn { port, processId };\n\t\t}\n\t\tthrow new Error(`Could not kill process with port ${port}`);\n\t}\n\n\t@traceRpc\n\tasync serializeTerminalState(ids: number[]): Promise<string> {\n\t\tconst promises: Promise<ISerializedTerminalState>[] = [];\n\t\tfor (const [\n\t\t\tpersistentProcessId,\n\t\t\tpersistentProcess,\n\t\t] of this._ptys.entries()) {\n\t\t\t// Only serialize persistent processes that have had data written or performed a replay\n\t\t\tif (\n\t\t\t\tpersistentProcess.hasWrittenData &&\n\t\t\t\tids.indexOf(persistentProcessId) !== -1\n\t\t\t) {\n\t\t\t\tpromises.push(\n\t\t\t\t\tPromises.withAsyncBody<ISerializedTerminalState>(\n\t\t\t\t\t\tasync (r) => {\n\t\t\t\t\t\t\tr({\n\t\t\t\t\t\t\t\tid: persistentProcessId,\n\t\t\t\t\t\t\t\tshellLaunchConfig:\n\t\t\t\t\t\t\t\t\tpersistentProcess.shellLaunchConfig,\n\t\t\t\t\t\t\t\tprocessDetails: await this._buildProcessDetails(\n\t\t\t\t\t\t\t\t\tpersistentProcessId,\n\t\t\t\t\t\t\t\t\tpersistentProcess,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tprocessLaunchConfig:\n\t\t\t\t\t\t\t\t\tpersistentProcess.processLaunchOptions,\n\t\t\t\t\t\t\t\tunicodeVersion:\n\t\t\t\t\t\t\t\t\tpersistentProcess.unicodeVersion,\n\t\t\t\t\t\t\t\treplayEvent:\n\t\t\t\t\t\t\t\t\tawait persistentProcess.serializeNormalBuffer(),\n\t\t\t\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tconst serialized: ICrossVersionSerializedTerminalState = {\n\t\t\tversion: 1,\n\t\t\tstate: await Promise.all(promises),\n\t\t};\n\t\treturn JSON.stringify(serialized);\n\t}\n\n\t@traceRpc\n\tasync reviveTerminalProcesses(\n\t\tworkspaceId: string,\n\t\tstate: ISerializedTerminalState[],\n\t\tdateTimeFormatLocale: string,\n\t) {\n\t\tconst promises: Promise<void>[] = [];\n\t\tfor (const terminal of state) {\n\t\t\tpromises.push(this._reviveTerminalProcess(workspaceId, terminal));\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n\n\tprivate async _reviveTerminalProcess(\n\t\tworkspaceId: string,\n\t\tterminal: ISerializedTerminalState,\n\t): Promise<void> {\n\t\tconst restoreMessage = localize(\n\t\t\t\"terminal-history-restored\",\n\t\t\t\"History restored\",\n\t\t);\n\t\t// TODO: We may at some point want to show date information in a hover via a custom sequence:\n\t\t//   new Date(terminal.timestamp).toLocaleDateString(dateTimeFormatLocale)\n\t\t//   new Date(terminal.timestamp).toLocaleTimeString(dateTimeFormatLocale)\n\t\tconst newId = await this.createProcess(\n\t\t\t{\n\t\t\t\t...terminal.shellLaunchConfig,\n\t\t\t\tcwd: terminal.processDetails.cwd,\n\t\t\t\tcolor: terminal.processDetails.color,\n\t\t\t\ticon: terminal.processDetails.icon,\n\t\t\t\tname:\n\t\t\t\t\tterminal.processDetails.titleSource === TitleEventSource.Api\n\t\t\t\t\t\t? terminal.processDetails.title\n\t\t\t\t\t\t: undefined,\n\t\t\t\tinitialText:\n\t\t\t\t\tterminal.replayEvent.events[0].data +\n\t\t\t\t\tformatMessageForTerminal(restoreMessage, {\n\t\t\t\t\t\tloudFormatting: true,\n\t\t\t\t\t}),\n\t\t\t},\n\t\t\tterminal.processDetails.cwd,\n\t\t\tterminal.replayEvent.events[0].cols,\n\t\t\tterminal.replayEvent.events[0].rows,\n\t\t\tterminal.unicodeVersion,\n\t\t\tterminal.processLaunchConfig.env,\n\t\t\tterminal.processLaunchConfig.executableEnv,\n\t\t\tterminal.processLaunchConfig.options,\n\t\t\ttrue,\n\t\t\tterminal.processDetails.workspaceId,\n\t\t\tterminal.processDetails.workspaceName,\n\t\t\ttrue,\n\t\t\tterminal.replayEvent.events[0].data,\n\t\t);\n\t\t// Don't start the process here as there's no terminal to answer CPR\n\t\tconst oldId = this._getRevivingProcessId(workspaceId, terminal.id);\n\t\tthis._revivedPtyIdMap.set(oldId, { newId, state: terminal });\n\t\tthis._logService.info(\n\t\t\t`Revived process, old id ${oldId} -> new id ${newId}`,\n\t\t);\n\t}\n\n\t@traceRpc\n\tasync shutdownAll(): Promise<void> {\n\t\tthis.dispose();\n\t}\n\n\t@traceRpc\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: \"6\" | \"11\",\n\t\tenv: IProcessEnvironment,\n\t\texecutableEnv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean,\n\t\tworkspaceId: string,\n\t\tworkspaceName: string,\n\t\tisReviving?: boolean,\n\t\trawReviveBuffer?: string,\n\t): Promise<number> {\n\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Attempt to create a process when attach object was provided\",\n\t\t\t);\n\t\t}\n\t\tconst id = ++this._lastPtyId;\n\t\tconst process = new TerminalProcess(\n\t\t\tshellLaunchConfig,\n\t\t\tcwd,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tenv,\n\t\t\texecutableEnv,\n\t\t\toptions,\n\t\t\tthis._logService,\n\t\t\tthis._productService,\n\t\t);\n\t\tconst processLaunchOptions: IPersistentTerminalProcessLaunchConfig = {\n\t\t\tenv,\n\t\t\texecutableEnv,\n\t\t\toptions,\n\t\t};\n\t\tconst persistentProcess = new PersistentTerminalProcess(\n\t\t\tid,\n\t\t\tprocess,\n\t\t\tworkspaceId,\n\t\t\tworkspaceName,\n\t\t\tshouldPersist,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tprocessLaunchOptions,\n\t\t\tunicodeVersion,\n\t\t\tthis._reconnectConstants,\n\t\t\tthis._logService,\n\t\t\tisReviving && typeof shellLaunchConfig.initialText === \"string\"\n\t\t\t\t? shellLaunchConfig.initialText\n\t\t\t\t: undefined,\n\t\t\trawReviveBuffer,\n\t\t\tshellLaunchConfig.icon,\n\t\t\tshellLaunchConfig.color,\n\t\t\tshellLaunchConfig.name,\n\t\t\tshellLaunchConfig.fixedDimensions,\n\t\t);\n\t\tprocess.onProcessExit((event) => {\n\t\t\tpersistentProcess.dispose();\n\t\t\tthis._ptys.delete(id);\n\t\t\tthis._onProcessExit.fire({ id, event });\n\t\t});\n\t\tpersistentProcess.onProcessData((event) =>\n\t\t\tthis._onProcessData.fire({ id, event }),\n\t\t);\n\t\tpersistentProcess.onProcessReplay((event) =>\n\t\t\tthis._onProcessReplay.fire({ id, event }),\n\t\t);\n\t\tpersistentProcess.onProcessReady((event) =>\n\t\t\tthis._onProcessReady.fire({ id, event }),\n\t\t);\n\t\tpersistentProcess.onProcessOrphanQuestion(() =>\n\t\t\tthis._onProcessOrphanQuestion.fire({ id }),\n\t\t);\n\t\tpersistentProcess.onDidChangeProperty((property) =>\n\t\t\tthis._onDidChangeProperty.fire({ id, property }),\n\t\t);\n\t\tpersistentProcess.onPersistentProcessReady(() => {\n\t\t\tfor (const e of this._autoReplies.entries()) {\n\t\t\t\tpersistentProcess.installAutoReply(e[0], e[1]);\n\t\t\t}\n\t\t});\n\t\tthis._ptys.set(id, persistentProcess);\n\t\treturn id;\n\t}\n\n\t@traceRpc\n\tasync attachToProcess(id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._throwIfNoPty(id).attach();\n\t\t\tthis._logService.info(`Persistent process reconnection \"${id}\"`);\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(\n\t\t\t\t`Persistent process reconnection \"${id}\" failed`,\n\t\t\t\te.message,\n\t\t\t);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync updateTitle(\n\t\tid: number,\n\t\ttitle: string,\n\t\ttitleSource: TitleEventSource,\n\t): Promise<void> {\n\t\tthis._throwIfNoPty(id).setTitle(title, titleSource);\n\t}\n\n\t@traceRpc\n\tasync updateIcon(\n\t\tid: number,\n\t\tuserInitiated: boolean,\n\t\ticon:\n\t\t\t| URI\n\t\t\t| { light: URI; dark: URI }\n\t\t\t| { id: string; color?: { id: string } },\n\t\tcolor?: string,\n\t): Promise<void> {\n\t\tthis._throwIfNoPty(id).setIcon(userInitiated, icon, color);\n\t}\n\n\t@traceRpc\n\tasync clearBuffer(id: number): Promise<void> {\n\t\tthis._throwIfNoPty(id).clearBuffer();\n\t}\n\n\t@traceRpc\n\tasync refreshProperty<T extends ProcessPropertyType>(\n\t\tid: number,\n\t\ttype: T,\n\t): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._throwIfNoPty(id).refreshProperty(type);\n\t}\n\n\t@traceRpc\n\tasync updateProperty<T extends ProcessPropertyType>(\n\t\tid: number,\n\t\ttype: T,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\treturn this._throwIfNoPty(id).updateProperty(type, value);\n\t}\n\n\t@traceRpc\n\tasync detachFromProcess(id: number, forcePersist?: boolean): Promise<void> {\n\t\treturn this._throwIfNoPty(id).detach(forcePersist);\n\t}\n\n\t@traceRpc\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tfor (const pty of this._ptys.values()) {\n\t\t\tpty.reduceGraceTime();\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\tconst persistentProcesses = Array.from(this._ptys.entries()).filter(\n\t\t\t([_, pty]) => pty.shouldPersistTerminal,\n\t\t);\n\n\t\tthis._logService.info(\n\t\t\t`Listing ${persistentProcesses.length} persistent terminals, ${this._ptys.size} total terminals`,\n\t\t);\n\t\tconst promises = persistentProcesses.map(\n\t\t\tasync ([id, terminalProcessData]) =>\n\t\t\t\tthis._buildProcessDetails(id, terminalProcessData),\n\t\t);\n\t\tconst allTerminals = await Promise.all(promises);\n\t\treturn allTerminals.filter((entry) => entry.isOrphan);\n\t}\n\n\t@traceRpc\n\tasync getPerformanceMarks(): Promise<performance.PerformanceMark[]> {\n\t\treturn performance.getMarks();\n\t}\n\n\t@traceRpc\n\tasync start(\n\t\tid: number,\n\t): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tconst pty = this._ptys.get(id);\n\t\treturn pty\n\t\t\t? pty.start()\n\t\t\t: { message: `Could not find pty with id \"${id}\"` };\n\t}\n\n\t@traceRpc\n\tasync shutdown(id: number, immediate: boolean): Promise<void> {\n\t\t// Don't throw if the pty is already shutdown\n\t\treturn this._ptys.get(id)?.shutdown(immediate);\n\t}\n\t@traceRpc\n\tasync input(id: number, data: string): Promise<void> {\n\t\treturn this._throwIfNoPty(id).input(data);\n\t}\n\t@traceRpc\n\tasync processBinary(id: number, data: string): Promise<void> {\n\t\treturn this._throwIfNoPty(id).writeBinary(data);\n\t}\n\t@traceRpc\n\tasync resize(id: number, cols: number, rows: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).resize(cols, rows);\n\t}\n\t@traceRpc\n\tasync getInitialCwd(id: number): Promise<string> {\n\t\treturn this._throwIfNoPty(id).getInitialCwd();\n\t}\n\t@traceRpc\n\tasync getCwd(id: number): Promise<string> {\n\t\treturn this._throwIfNoPty(id).getCwd();\n\t}\n\t@traceRpc\n\tasync acknowledgeDataEvent(id: number, charCount: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).acknowledgeDataEvent(charCount);\n\t}\n\t@traceRpc\n\tasync setUnicodeVersion(id: number, version: \"6\" | \"11\"): Promise<void> {\n\t\treturn this._throwIfNoPty(id).setUnicodeVersion(version);\n\t}\n\t@traceRpc\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\treturn [];\n\t}\n\t@traceRpc\n\tasync orphanQuestionReply(id: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).orphanQuestionReply();\n\t}\n\n\t@traceRpc\n\tasync installAutoReply(match: string, reply: string) {\n\t\tthis._autoReplies.set(match, reply);\n\t\t// If the auto reply exists on any existing terminals it will be overridden\n\t\tfor (const p of this._ptys.values()) {\n\t\t\tp.installAutoReply(match, reply);\n\t\t}\n\t}\n\t@traceRpc\n\tasync uninstallAllAutoReplies() {\n\t\tfor (const match of this._autoReplies.keys()) {\n\t\t\tfor (const p of this._ptys.values()) {\n\t\t\t\tp.uninstallAutoReply(match);\n\t\t\t}\n\t\t}\n\t}\n\t@traceRpc\n\tasync uninstallAutoReply(match: string) {\n\t\tfor (const p of this._ptys.values()) {\n\t\t\tp.uninstallAutoReply(match);\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync getDefaultSystemShell(\n\t\tosOverride: OperatingSystem = OS,\n\t): Promise<string> {\n\t\treturn getSystemShell(osOverride, process.env);\n\t}\n\n\t@traceRpc\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn { ...process.env };\n\t}\n\n\t@traceRpc\n\tasync getWslPath(\n\t\toriginal: string,\n\t\tdirection: \"unix-to-win\" | \"win-to-unix\" | unknown,\n\t): Promise<string> {\n\t\tif (direction === \"win-to-unix\") {\n\t\t\tif (!isWindows) {\n\t\t\t\treturn original;\n\t\t\t}\n\t\t\tif (getWindowsBuildNumber() < 17063) {\n\t\t\t\treturn original.replace(/\\\\/g, \"/\");\n\t\t\t}\n\t\t\tconst wslExecutable = this._getWSLExecutablePath();\n\t\t\tif (!wslExecutable) {\n\t\t\t\treturn original;\n\t\t\t}\n\t\t\treturn new Promise<string>((c) => {\n\t\t\t\tconst proc = execFile(\n\t\t\t\t\twslExecutable,\n\t\t\t\t\t[\"-e\", \"wslpath\", original],\n\t\t\t\t\t{},\n\t\t\t\t\t(error, stdout, stderr) => {\n\t\t\t\t\t\tc(\n\t\t\t\t\t\t\terror\n\t\t\t\t\t\t\t\t? original\n\t\t\t\t\t\t\t\t: escapeNonWindowsPath(stdout.trim()),\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tproc.stdin!.end();\n\t\t\t});\n\t\t}\n\t\tif (direction === \"unix-to-win\") {\n\t\t\t// The backend is Windows, for example a local Windows workspace with a wsl session in\n\t\t\t// the terminal.\n\t\t\tif (isWindows) {\n\t\t\t\tif (getWindowsBuildNumber() < 17063) {\n\t\t\t\t\treturn original;\n\t\t\t\t}\n\t\t\t\tconst wslExecutable = this._getWSLExecutablePath();\n\t\t\t\tif (!wslExecutable) {\n\t\t\t\t\treturn original;\n\t\t\t\t}\n\t\t\t\treturn new Promise<string>((c) => {\n\t\t\t\t\tconst proc = execFile(\n\t\t\t\t\t\twslExecutable,\n\t\t\t\t\t\t[\"-e\", \"wslpath\", \"-w\", original],\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t(error, stdout, stderr) => {\n\t\t\t\t\t\t\tc(error ? original : stdout.trim());\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tproc.stdin!.end();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t// Fallback just in case\n\t\treturn original;\n\t}\n\n\tprivate _getWSLExecutablePath(): string | undefined {\n\t\tconst useWSLexe = getWindowsBuildNumber() >= 16299;\n\t\tconst is32ProcessOn64Windows = process.env.hasOwnProperty(\n\t\t\t\"PROCESSOR_ARCHITEW6432\",\n\t\t);\n\t\tconst systemRoot = process.env[\"SystemRoot\"];\n\t\tif (systemRoot) {\n\t\t\treturn join(\n\t\t\t\tsystemRoot,\n\t\t\t\tis32ProcessOn64Windows ? \"Sysnative\" : \"System32\",\n\t\t\t\tuseWSLexe ? \"wsl.exe\" : \"bash.exe\",\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t@traceRpc\n\tasync getRevivedPtyNewId(\n\t\tworkspaceId: string,\n\t\tid: number,\n\t): Promise<number | undefined> {\n\t\ttry {\n\t\t\treturn this._revivedPtyIdMap.get(\n\t\t\t\tthis._getRevivingProcessId(workspaceId, id),\n\t\t\t)?.newId;\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(\n\t\t\t\t`Couldn't find terminal ID ${workspaceId}-${id}`,\n\t\t\t\te.message,\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t@traceRpc\n\tasync setTerminalLayoutInfo(\n\t\targs: ISetTerminalLayoutInfoArgs,\n\t): Promise<void> {\n\t\tthis._workspaceLayoutInfos.set(args.workspaceId, args);\n\t}\n\n\t@traceRpc\n\tasync getTerminalLayoutInfo(\n\t\targs: IGetTerminalLayoutInfoArgs,\n\t): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tperformance.mark(\"code/willGetTerminalLayoutInfo\");\n\t\tconst layout = this._workspaceLayoutInfos.get(args.workspaceId);\n\t\tif (layout) {\n\t\t\tconst doneSet: Set<number> = new Set();\n\t\t\tconst expandedTabs = await Promise.all(\n\t\t\t\tlayout.tabs.map(async (tab) =>\n\t\t\t\t\tthis._expandTerminalTab(args.workspaceId, tab, doneSet),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst tabs = expandedTabs.filter((t) => t.terminals.length > 0);\n\t\t\tperformance.mark(\"code/didGetTerminalLayoutInfo\");\n\t\t\treturn { tabs };\n\t\t}\n\t\tperformance.mark(\"code/didGetTerminalLayoutInfo\");\n\t\treturn undefined;\n\t}\n\n\tprivate async _expandTerminalTab(\n\t\tworkspaceId: string,\n\t\ttab: ITerminalTabLayoutInfoById,\n\t\tdoneSet: Set<number>,\n\t): Promise<ITerminalTabLayoutInfoDto> {\n\t\tconst expandedTerminals = await Promise.all(\n\t\t\ttab.terminals.map((t) =>\n\t\t\t\tthis._expandTerminalInstance(workspaceId, t, doneSet),\n\t\t\t),\n\t\t);\n\t\tconst filtered = expandedTerminals.filter(\n\t\t\t(term) => term.terminal !== null,\n\t\t) as IRawTerminalInstanceLayoutInfo<IProcessDetails>[];\n\t\treturn {\n\t\t\tisActive: tab.isActive,\n\t\t\tactivePersistentProcessId: tab.activePersistentProcessId,\n\t\t\tterminals: filtered,\n\t\t};\n\t}\n\n\tprivate async _expandTerminalInstance(\n\t\tworkspaceId: string,\n\t\tt: ITerminalInstanceLayoutInfoById,\n\t\tdoneSet: Set<number>,\n\t): Promise<IRawTerminalInstanceLayoutInfo<IProcessDetails | null>> {\n\t\ttry {\n\t\t\tconst oldId = this._getRevivingProcessId(workspaceId, t.terminal);\n\t\t\tconst revivedPtyId = this._revivedPtyIdMap.get(oldId)?.newId;\n\t\t\tthis._logService.info(\n\t\t\t\t`Expanding terminal instance, old id ${oldId} -> new id ${revivedPtyId}`,\n\t\t\t);\n\t\t\tthis._revivedPtyIdMap.delete(oldId);\n\t\t\tconst persistentProcessId = revivedPtyId ?? t.terminal;\n\t\t\tif (doneSet.has(persistentProcessId)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Terminal ${persistentProcessId} has already been expanded`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tdoneSet.add(persistentProcessId);\n\t\t\tconst persistentProcess = this._throwIfNoPty(persistentProcessId);\n\t\t\tconst processDetails =\n\t\t\t\tpersistentProcess &&\n\t\t\t\t(await this._buildProcessDetails(\n\t\t\t\t\tt.terminal,\n\t\t\t\t\tpersistentProcess,\n\t\t\t\t\trevivedPtyId !== undefined,\n\t\t\t\t));\n\t\t\treturn {\n\t\t\t\tterminal: { ...processDetails, id: persistentProcessId },\n\t\t\t\trelativeSize: t.relativeSize,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(\n\t\t\t\t`Couldn't get layout info, a terminal was probably disconnected`,\n\t\t\t\te.message,\n\t\t\t);\n\t\t\tthis._logService.debug(\n\t\t\t\t\"Reattach to wrong terminal debug info - layout info by id\",\n\t\t\t\tt,\n\t\t\t);\n\t\t\tthis._logService.debug(\n\t\t\t\t\"Reattach to wrong terminal debug info - _revivePtyIdMap\",\n\t\t\t\tArray.from(this._revivedPtyIdMap.values()),\n\t\t\t);\n\t\t\tthis._logService.debug(\n\t\t\t\t\"Reattach to wrong terminal debug info - _ptys ids\",\n\t\t\t\tArray.from(this._ptys.keys()),\n\t\t\t);\n\t\t\t// this will be filtered out and not reconnected\n\t\t\treturn {\n\t\t\t\tterminal: null,\n\t\t\t\trelativeSize: t.relativeSize,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate _getRevivingProcessId(workspaceId: string, ptyId: number): string {\n\t\treturn `${workspaceId}-${ptyId}`;\n\t}\n\n\tprivate async _buildProcessDetails(\n\t\tid: number,\n\t\tpersistentProcess: PersistentTerminalProcess,\n\t\twasRevived = false,\n\t): Promise<IProcessDetails> {\n\t\tperformance.mark(`code/willBuildProcessDetails/${id}`);\n\t\t// If the process was just revived, don't do the orphan check as it will\n\t\t// take some time\n\t\tconst [cwd, isOrphan] = await Promise.all([\n\t\t\tpersistentProcess.getCwd(),\n\t\t\twasRevived ? true : persistentProcess.isOrphaned(),\n\t\t]);\n\t\tconst result = {\n\t\t\tid,\n\t\t\ttitle: persistentProcess.title,\n\t\t\ttitleSource: persistentProcess.titleSource,\n\t\t\tpid: persistentProcess.pid,\n\t\t\tworkspaceId: persistentProcess.workspaceId,\n\t\t\tworkspaceName: persistentProcess.workspaceName,\n\t\t\tcwd,\n\t\t\tisOrphan,\n\t\t\ticon: persistentProcess.icon,\n\t\t\tcolor: persistentProcess.color,\n\t\t\tfixedDimensions: persistentProcess.fixedDimensions,\n\t\t\tenvironmentVariableCollections:\n\t\t\t\tpersistentProcess.processLaunchOptions.options\n\t\t\t\t\t.environmentVariableCollections,\n\t\t\treconnectionProperties:\n\t\t\t\tpersistentProcess.shellLaunchConfig.reconnectionProperties,\n\t\t\twaitOnExit: persistentProcess.shellLaunchConfig.waitOnExit,\n\t\t\thideFromUser: persistentProcess.shellLaunchConfig.hideFromUser,\n\t\t\tisFeatureTerminal:\n\t\t\t\tpersistentProcess.shellLaunchConfig.isFeatureTerminal,\n\t\t\ttype: persistentProcess.shellLaunchConfig.type,\n\t\t\thasChildProcesses: persistentProcess.hasChildProcesses,\n\t\t\tshellIntegrationNonce:\n\t\t\t\tpersistentProcess.processLaunchOptions.options.shellIntegration\n\t\t\t\t\t.nonce,\n\t\t};\n\t\tperformance.mark(`code/didBuildProcessDetails/${id}`);\n\t\treturn result;\n\t}\n\n\tprivate _throwIfNoPty(id: number): PersistentTerminalProcess {\n\t\tconst pty = this._ptys.get(id);\n\t\tif (!pty) {\n\t\t\tthrow new ErrorNoTelemetry(`Could not find pty ${id} on pty host`);\n\t\t}\n\t\treturn pty;\n\t}\n}\n\nenum InteractionState {\n\t/** The terminal has not been interacted with. */\n\tNone = \"None\",\n\t/** The terminal has only been interacted with by the replay mechanism. */\n\tReplayOnly = \"ReplayOnly\",\n\t/** The terminal has been directly interacted with this session. */\n\tSession = \"Session\",\n}\n\nclass PersistentTerminalProcess extends Disposable {\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\tprivate readonly _autoReplies: Map<string, TerminalAutoResponder> =\n\t\tnew Map();\n\n\tprivate readonly _pendingCommands = new Map<\n\t\tnumber,\n\t\t{ resolve: (data: any) => void; reject: (err: any) => void }\n\t>();\n\n\tprivate _isStarted = false;\n\tprivate _interactionState: MutationLogger<InteractionState>;\n\n\tprivate _orphanQuestionBarrier: AutoOpenBarrier | null;\n\tprivate _orphanQuestionReplyTime: number;\n\tprivate _orphanRequestQueue = new Queue<boolean>();\n\tprivate _disconnectRunner1: ProcessTimeRunOnceScheduler;\n\tprivate _disconnectRunner2: ProcessTimeRunOnceScheduler;\n\n\tprivate readonly _onProcessReplay = this._register(\n\t\tnew Emitter<IPtyHostProcessReplayEvent>(),\n\t);\n\treadonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessReady = this._register(\n\t\tnew Emitter<IProcessReadyEvent>(),\n\t);\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onPersistentProcessReady = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\t/** Fired when the persistent process has a ready process and has finished its replay. */\n\treadonly onPersistentProcessReady = this._onPersistentProcessReady.event;\n\tprivate readonly _onProcessData = this._register(new Emitter<string>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessOrphanQuestion = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onProcessOrphanQuestion = this._onProcessOrphanQuestion.event;\n\tprivate readonly _onDidChangeProperty = this._register(\n\t\tnew Emitter<IProcessProperty<any>>(),\n\t);\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\n\tprivate _inReplay = false;\n\n\tprivate _pid = -1;\n\tprivate _cwd = \"\";\n\tprivate _title: string | undefined;\n\tprivate _titleSource: TitleEventSource = TitleEventSource.Process;\n\tprivate _serializer: ITerminalSerializer;\n\tprivate _wasRevived: boolean;\n\tprivate _fixedDimensions: IFixedTerminalDimensions | undefined;\n\n\tget pid(): number {\n\t\treturn this._pid;\n\t}\n\tget shellLaunchConfig(): IShellLaunchConfig {\n\t\treturn this._terminalProcess.shellLaunchConfig;\n\t}\n\tget hasWrittenData(): boolean {\n\t\treturn this._interactionState.value !== InteractionState.None;\n\t}\n\tget title(): string {\n\t\treturn this._title || this._terminalProcess.currentTitle;\n\t}\n\tget titleSource(): TitleEventSource {\n\t\treturn this._titleSource;\n\t}\n\tget icon(): TerminalIcon | undefined {\n\t\treturn this._icon;\n\t}\n\tget color(): string | undefined {\n\t\treturn this._color;\n\t}\n\tget fixedDimensions(): IFixedTerminalDimensions | undefined {\n\t\treturn this._fixedDimensions;\n\t}\n\tget hasChildProcesses(): boolean {\n\t\treturn this._terminalProcess.hasChildProcesses;\n\t}\n\n\tsetTitle(title: string, titleSource: TitleEventSource): void {\n\t\tif (titleSource === TitleEventSource.Api) {\n\t\t\tthis._interactionState.setValue(\n\t\t\t\tInteractionState.Session,\n\t\t\t\t\"setTitle\",\n\t\t\t);\n\t\t\tthis._serializer.freeRawReviveBuffer();\n\t\t}\n\t\tthis._title = title;\n\t\tthis._titleSource = titleSource;\n\t}\n\n\tsetIcon(userInitiated: boolean, icon: TerminalIcon, color?: string): void {\n\t\tif (\n\t\t\t!this._icon ||\n\t\t\t(\"id\" in icon && \"id\" in this._icon && icon.id !== this._icon.id) ||\n\t\t\t!this.color ||\n\t\t\tcolor !== this._color\n\t\t) {\n\t\t\tthis._serializer.freeRawReviveBuffer();\n\t\t\tif (userInitiated) {\n\t\t\t\tthis._interactionState.setValue(\n\t\t\t\t\tInteractionState.Session,\n\t\t\t\t\t\"setIcon\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._icon = icon;\n\t\tthis._color = color;\n\t}\n\n\tprivate _setFixedDimensions(\n\t\tfixedDimensions?: IFixedTerminalDimensions,\n\t): void {\n\t\tthis._fixedDimensions = fixedDimensions;\n\t}\n\n\tconstructor(\n\t\tprivate _persistentProcessId: number,\n\t\tprivate readonly _terminalProcess: TerminalProcess,\n\t\treadonly workspaceId: string,\n\t\treadonly workspaceName: string,\n\t\treadonly shouldPersistTerminal: boolean,\n\t\tcols: number,\n\t\trows: number,\n\t\treadonly processLaunchOptions: IPersistentTerminalProcessLaunchConfig,\n\t\tpublic unicodeVersion: \"6\" | \"11\",\n\t\treconnectConstants: IReconnectConstants,\n\t\tprivate readonly _logService: ILogService,\n\t\treviveBuffer: string | undefined,\n\t\trawReviveBuffer: string | undefined,\n\t\tprivate _icon?: TerminalIcon,\n\t\tprivate _color?: string,\n\t\tname?: string,\n\t\tfixedDimensions?: IFixedTerminalDimensions,\n\t) {\n\t\tsuper();\n\t\tthis._interactionState = new MutationLogger(\n\t\t\t`Persistent process \"${this._persistentProcessId}\" interaction state`,\n\t\t\tInteractionState.None,\n\t\t\tthis._logService,\n\t\t);\n\t\tthis._wasRevived = reviveBuffer !== undefined;\n\t\tthis._serializer = new XtermSerializer(\n\t\t\tcols,\n\t\t\trows,\n\t\t\treconnectConstants.scrollback,\n\t\t\tunicodeVersion,\n\t\t\treviveBuffer,\n\t\t\tprocessLaunchOptions.options.shellIntegration.nonce,\n\t\t\tshouldPersistTerminal ? rawReviveBuffer : undefined,\n\t\t\tthis._logService,\n\t\t);\n\t\tif (name) {\n\t\t\tthis.setTitle(name, TitleEventSource.Api);\n\t\t}\n\t\tthis._fixedDimensions = fixedDimensions;\n\t\tthis._orphanQuestionBarrier = null;\n\t\tthis._orphanQuestionReplyTime = 0;\n\t\tthis._disconnectRunner1 = this._register(\n\t\t\tnew ProcessTimeRunOnceScheduler(() => {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Persistent process \"${this._persistentProcessId}\": The reconnection grace time of ${printTime(reconnectConstants.graceTime)} has expired, shutting down pid \"${this._pid}\"`,\n\t\t\t\t);\n\t\t\t\tthis.shutdown(true);\n\t\t\t}, reconnectConstants.graceTime),\n\t\t);\n\t\tthis._disconnectRunner2 = this._register(\n\t\t\tnew ProcessTimeRunOnceScheduler(() => {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Persistent process \"${this._persistentProcessId}\": The short reconnection grace time of ${printTime(reconnectConstants.shortGraceTime)} has expired, shutting down pid ${this._pid}`,\n\t\t\t\t);\n\t\t\t\tthis.shutdown(true);\n\t\t\t}, reconnectConstants.shortGraceTime),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._terminalProcess.onProcessExit(() =>\n\t\t\t\tthis._bufferer.stopBuffering(this._persistentProcessId),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._terminalProcess.onProcessReady((e) => {\n\t\t\t\tthis._pid = e.pid;\n\t\t\t\tthis._cwd = e.cwd;\n\t\t\t\tthis._onProcessReady.fire(e);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._terminalProcess.onDidChangeProperty((e) => {\n\t\t\t\tthis._onDidChangeProperty.fire(e);\n\t\t\t}),\n\t\t);\n\n\t\t// Data buffering to reduce the amount of messages going to the renderer\n\t\tthis._bufferer = new TerminalDataBufferer((_, data) =>\n\t\t\tthis._onProcessData.fire(data),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._bufferer.startBuffering(\n\t\t\t\tthis._persistentProcessId,\n\t\t\t\tthis._terminalProcess.onProcessData,\n\t\t\t),\n\t\t);\n\n\t\t// Data recording for reconnect\n\t\tthis._register(\n\t\t\tthis.onProcessData((e) => this._serializer.handleData(e)),\n\t\t);\n\n\t\t// Clean up other disposables\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tfor (const e of this._autoReplies.values()) {\n\t\t\t\t\te.dispose();\n\t\t\t\t}\n\t\t\t\tthis._autoReplies.clear();\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync attach(): Promise<void> {\n\t\tif (\n\t\t\t!this._disconnectRunner1.isScheduled() &&\n\t\t\t!this._disconnectRunner2.isScheduled()\n\t\t) {\n\t\t\tthis._logService.warn(\n\t\t\t\t`Persistent process \"${this._persistentProcessId}\": Process had no disconnect runners but was an orphan`,\n\t\t\t);\n\t\t}\n\t\tthis._disconnectRunner1.cancel();\n\t\tthis._disconnectRunner2.cancel();\n\t}\n\n\tasync detach(forcePersist?: boolean): Promise<void> {\n\t\t// Keep the process around if it was indicated to persist and it has had some iteraction or\n\t\t// was replayed\n\t\tif (\n\t\t\tthis.shouldPersistTerminal &&\n\t\t\t(this._interactionState.value !== InteractionState.None ||\n\t\t\t\tforcePersist)\n\t\t) {\n\t\t\tthis._disconnectRunner1.schedule();\n\t\t} else {\n\t\t\tthis.shutdown(true);\n\t\t}\n\t}\n\n\tserializeNormalBuffer(): Promise<IPtyHostProcessReplayEvent> {\n\t\treturn this._serializer.generateReplayEvent(\n\t\t\ttrue,\n\t\t\tthis._interactionState.value !== InteractionState.Session,\n\t\t);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._terminalProcess.refreshProperty(type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(\n\t\ttype: T,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\tif (type === ProcessPropertyType.FixedDimensions) {\n\t\t\treturn this._setFixedDimensions(\n\t\t\t\tvalue as IProcessPropertyMap[ProcessPropertyType.FixedDimensions],\n\t\t\t);\n\t\t}\n\t}\n\n\tasync start(): Promise<\n\t\tITerminalLaunchError | { injectedArgs: string[] } | undefined\n\t> {\n\t\tif (!this._isStarted) {\n\t\t\tconst result = await this._terminalProcess.start();\n\t\t\tif (result && \"message\" in result) {\n\t\t\t\t// it's a terminal launch error\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthis._isStarted = true;\n\n\t\t\t// If the process was revived, trigger a replay on first start. An alternative approach\n\t\t\t// could be to start it on the pty host before attaching but this fails on Windows as\n\t\t\t// conpty's inherit cursor option which is required, ends up sending DSR CPR which\n\t\t\t// causes conhost to hang when no response is received from the terminal (which wouldn't\n\t\t\t// be attached yet). https://github.com/microsoft/terminal/issues/11213\n\t\t\tif (this._wasRevived) {\n\t\t\t\tthis.triggerReplay();\n\t\t\t} else {\n\t\t\t\tthis._onPersistentProcessReady.fire();\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tthis._onProcessReady.fire({\n\t\t\tpid: this._pid,\n\t\t\tcwd: this._cwd,\n\t\t\twindowsPty: this._terminalProcess.getWindowsPty(),\n\t\t});\n\t\tthis._onDidChangeProperty.fire({\n\t\t\ttype: ProcessPropertyType.Title,\n\t\t\tvalue: this._terminalProcess.currentTitle,\n\t\t});\n\t\tthis._onDidChangeProperty.fire({\n\t\t\ttype: ProcessPropertyType.ShellType,\n\t\t\tvalue: this._terminalProcess.shellType,\n\t\t});\n\t\tthis.triggerReplay();\n\t\treturn undefined;\n\t}\n\tshutdown(immediate: boolean): void {\n\t\treturn this._terminalProcess.shutdown(immediate);\n\t}\n\tinput(data: string): void {\n\t\tthis._interactionState.setValue(InteractionState.Session, \"input\");\n\t\tthis._serializer.freeRawReviveBuffer();\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const listener of this._autoReplies.values()) {\n\t\t\tlistener.handleInput();\n\t\t}\n\t\treturn this._terminalProcess.input(data);\n\t}\n\twriteBinary(data: string): Promise<void> {\n\t\treturn this._terminalProcess.processBinary(data);\n\t}\n\tresize(cols: number, rows: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._serializer.handleResize(cols, rows);\n\n\t\t// Buffered events should flush when a resize occurs\n\t\tthis._bufferer.flushBuffer(this._persistentProcessId);\n\n\t\tfor (const listener of this._autoReplies.values()) {\n\t\t\tlistener.handleResize();\n\t\t}\n\t\treturn this._terminalProcess.resize(cols, rows);\n\t}\n\tasync clearBuffer(): Promise<void> {\n\t\tthis._serializer.clearBuffer();\n\t\tthis._terminalProcess.clearBuffer();\n\t}\n\tsetUnicodeVersion(version: \"6\" | \"11\"): void {\n\t\tthis.unicodeVersion = version;\n\t\tthis._serializer.setUnicodeVersion?.(version);\n\t\t// TODO: Pass in unicode version in ctor\n\t}\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._terminalProcess.acknowledgeDataEvent(charCount);\n\t}\n\tgetInitialCwd(): Promise<string> {\n\t\treturn this._terminalProcess.getInitialCwd();\n\t}\n\tgetCwd(): Promise<string> {\n\t\treturn this._terminalProcess.getCwd();\n\t}\n\n\tasync triggerReplay(): Promise<void> {\n\t\tif (this._interactionState.value === InteractionState.None) {\n\t\t\tthis._interactionState.setValue(\n\t\t\t\tInteractionState.ReplayOnly,\n\t\t\t\t\"triggerReplay\",\n\t\t\t);\n\t\t}\n\t\tconst ev = await this._serializer.generateReplayEvent();\n\t\tlet dataLength = 0;\n\t\tfor (const e of ev.events) {\n\t\t\tdataLength += e.data.length;\n\t\t}\n\t\tthis._logService.info(\n\t\t\t`Persistent process \"${this._persistentProcessId}\": Replaying ${dataLength} chars and ${ev.events.length} size events`,\n\t\t);\n\t\tthis._onProcessReplay.fire(ev);\n\t\tthis._terminalProcess.clearUnacknowledgedChars();\n\t\tthis._onPersistentProcessReady.fire();\n\t}\n\n\tinstallAutoReply(match: string, reply: string) {\n\t\tthis._autoReplies.get(match)?.dispose();\n\t\tthis._autoReplies.set(\n\t\t\tmatch,\n\t\t\tnew TerminalAutoResponder(\n\t\t\t\tthis._terminalProcess,\n\t\t\t\tmatch,\n\t\t\t\treply,\n\t\t\t\tthis._logService,\n\t\t\t),\n\t\t);\n\t}\n\n\tuninstallAutoReply(match: string) {\n\t\tconst autoReply = this._autoReplies.get(match);\n\t\tautoReply?.dispose();\n\t\tthis._autoReplies.delete(match);\n\t}\n\n\tsendCommandResult(\n\t\treqId: number,\n\t\tisError: boolean,\n\t\tserializedPayload: any,\n\t): void {\n\t\tconst data = this._pendingCommands.get(reqId);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingCommands.delete(reqId);\n\t}\n\n\torphanQuestionReply(): void {\n\t\tthis._orphanQuestionReplyTime = Date.now();\n\t\tif (this._orphanQuestionBarrier) {\n\t\t\tconst barrier = this._orphanQuestionBarrier;\n\t\t\tthis._orphanQuestionBarrier = null;\n\t\t\tbarrier.open();\n\t\t}\n\t}\n\n\treduceGraceTime(): void {\n\t\tif (this._disconnectRunner2.isScheduled()) {\n\t\t\t// we are disconnected and already running the short reconnection timer\n\t\t\treturn;\n\t\t}\n\t\tif (this._disconnectRunner1.isScheduled()) {\n\t\t\t// we are disconnected and running the long reconnection timer\n\t\t\tthis._disconnectRunner2.schedule();\n\t\t}\n\t}\n\n\tasync isOrphaned(): Promise<boolean> {\n\t\treturn await this._orphanRequestQueue.queue(async () =>\n\t\t\tthis._isOrphaned(),\n\t\t);\n\t}\n\n\tprivate async _isOrphaned(): Promise<boolean> {\n\t\t// The process is already known to be orphaned\n\t\tif (\n\t\t\tthis._disconnectRunner1.isScheduled() ||\n\t\t\tthis._disconnectRunner2.isScheduled()\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ask whether the renderer(s) whether the process is orphaned and await the reply\n\t\tif (!this._orphanQuestionBarrier) {\n\t\t\t// the barrier opens after 4 seconds with or without a reply\n\t\t\tthis._orphanQuestionBarrier = new AutoOpenBarrier(4000);\n\t\t\tthis._orphanQuestionReplyTime = 0;\n\t\t\tthis._onProcessOrphanQuestion.fire();\n\t\t}\n\n\t\tawait this._orphanQuestionBarrier.wait();\n\t\treturn Date.now() - this._orphanQuestionReplyTime > 500;\n\t}\n}\n\nclass MutationLogger<T> {\n\tget value(): T {\n\t\treturn this._value;\n\t}\n\tsetValue(value: T, reason: string) {\n\t\tif (this._value !== value) {\n\t\t\tthis._value = value;\n\t\t\tthis._log(reason);\n\t\t}\n\t}\n\n\tconstructor(\n\t\tprivate readonly _name: string,\n\t\tprivate _value: T,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t\tthis._log(\"initialized\");\n\t}\n\n\tprivate _log(reason: string): void {\n\t\tthis._logService.debug(\n\t\t\t`MutationLogger \"${this._name}\" set to \"${this._value}\", reason: ${reason}`,\n\t\t);\n\t}\n}\n\nclass XtermSerializer implements ITerminalSerializer {\n\tprivate readonly _xterm: XtermTerminal;\n\tprivate readonly _shellIntegrationAddon: ShellIntegrationAddon;\n\tprivate _unicodeAddon?: XtermUnicode11Addon;\n\n\tconstructor(\n\t\tcols: number,\n\t\trows: number,\n\t\tscrollback: number,\n\t\tunicodeVersion: \"6\" | \"11\",\n\t\treviveBufferWithRestoreMessage: string | undefined,\n\t\tshellIntegrationNonce: string,\n\t\tprivate _rawReviveBuffer: string | undefined,\n\t\tlogService: ILogService,\n\t) {\n\t\tthis._xterm = new XtermTerminal({\n\t\t\tcols,\n\t\t\trows,\n\t\t\tscrollback,\n\t\t\tallowProposedApi: true,\n\t\t});\n\t\tif (reviveBufferWithRestoreMessage) {\n\t\t\tthis._xterm.writeln(reviveBufferWithRestoreMessage);\n\t\t}\n\t\tthis.setUnicodeVersion(unicodeVersion);\n\t\tthis._shellIntegrationAddon = new ShellIntegrationAddon(\n\t\t\tshellIntegrationNonce,\n\t\t\ttrue,\n\t\t\tundefined,\n\t\t\tlogService,\n\t\t);\n\t\tthis._xterm.loadAddon(this._shellIntegrationAddon);\n\t}\n\n\tfreeRawReviveBuffer(): void {\n\t\t// Free the memory of the terminal if it will need to be re-serialized\n\t\tthis._rawReviveBuffer = undefined;\n\t}\n\n\thandleData(data: string): void {\n\t\tthis._xterm.write(data);\n\t}\n\n\thandleResize(cols: number, rows: number): void {\n\t\tthis._xterm.resize(cols, rows);\n\t}\n\n\tclearBuffer(): void {\n\t\tthis._xterm.clear();\n\t}\n\n\tasync generateReplayEvent(\n\t\tnormalBufferOnly?: boolean,\n\t\trestoreToLastReviveBuffer?: boolean,\n\t): Promise<IPtyHostProcessReplayEvent> {\n\t\tconst serialize = new (await this._getSerializeConstructor())();\n\t\tthis._xterm.loadAddon(serialize);\n\t\tconst options: ISerializeOptions = {\n\t\t\tscrollback: this._xterm.options.scrollback,\n\t\t};\n\t\tif (normalBufferOnly) {\n\t\t\toptions.excludeAltBuffer = true;\n\t\t\toptions.excludeModes = true;\n\t\t}\n\t\tlet serialized: string;\n\t\tif (restoreToLastReviveBuffer && this._rawReviveBuffer) {\n\t\t\tserialized = this._rawReviveBuffer;\n\t\t} else {\n\t\t\tserialized = serialize.serialize(options);\n\t\t}\n\t\treturn {\n\t\t\tevents: [\n\t\t\t\t{\n\t\t\t\t\tcols: this._xterm.cols,\n\t\t\t\t\trows: this._xterm.rows,\n\t\t\t\t\tdata: serialized,\n\t\t\t\t},\n\t\t\t],\n\t\t\tcommands: this._shellIntegrationAddon.serialize(),\n\t\t};\n\t}\n\n\tasync setUnicodeVersion(version: \"6\" | \"11\"): Promise<void> {\n\t\tif (this._xterm.unicode.activeVersion === version) {\n\t\t\treturn;\n\t\t}\n\t\tif (version === \"11\") {\n\t\t\tthis._unicodeAddon = new (await this._getUnicode11Constructor())();\n\t\t\tthis._xterm.loadAddon(this._unicodeAddon);\n\t\t} else {\n\t\t\tthis._unicodeAddon?.dispose();\n\t\t\tthis._unicodeAddon = undefined;\n\t\t}\n\t\tthis._xterm.unicode.activeVersion = version;\n\t}\n\n\tasync _getUnicode11Constructor(): Promise<typeof Unicode11Addon> {\n\t\tif (!Unicode11Addon) {\n\t\t\tUnicode11Addon = (await import(\"@xterm/addon-unicode11\"))\n\t\t\t\t.Unicode11Addon;\n\t\t}\n\t\treturn Unicode11Addon;\n\t}\n\n\tasync _getSerializeConstructor(): Promise<typeof SerializeAddon> {\n\t\tif (!SerializeAddon) {\n\t\t\tSerializeAddon = (await import(\"@xterm/addon-serialize\"))\n\t\t\t\t.SerializeAddon;\n\t\t}\n\t\treturn SerializeAddon;\n\t}\n}\n\nfunction printTime(ms: number): string {\n\tlet h = 0;\n\tlet m = 0;\n\tlet s = 0;\n\tif (ms >= 1000) {\n\t\ts = Math.floor(ms / 1000);\n\t\tms -= s * 1000;\n\t}\n\tif (s >= 60) {\n\t\tm = Math.floor(s / 60);\n\t\ts -= m * 60;\n\t}\n\tif (m >= 60) {\n\t\th = Math.floor(m / 60);\n\t\tm -= h * 60;\n\t}\n\tconst _h = h ? `${h}h` : ``;\n\tconst _m = m ? `${m}m` : ``;\n\tconst _s = s ? `${s}s` : ``;\n\tconst _ms = ms ? `${ms}ms` : ``;\n\treturn `${_h}${_m}${_s}${_ms}`;\n}\n\ninterface ITerminalSerializer {\n\thandleData(data: string): void;\n\tfreeRawReviveBuffer(): void;\n\thandleResize(cols: number, rows: number): void;\n\tclearBuffer(): void;\n\tgenerateReplayEvent(\n\t\tnormalBufferOnly?: boolean,\n\t\trestoreToLastReviveBuffer?: boolean,\n\t): Promise<IPtyHostProcessReplayEvent>;\n\tsetUnicodeVersion?(version: \"6\" | \"11\"): void;\n}\n"],
  "mappings": "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",
  "names": ["stdout", "process", "InteractionState"]
}
