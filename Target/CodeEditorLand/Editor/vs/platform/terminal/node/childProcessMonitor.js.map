{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/childProcessMonitor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { debounce, throttle } from \"../../../base/common/decorators.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { parse } from \"../../../base/common/path.js\";\nimport type { ProcessItem } from \"../../../base/common/processes.js\";\nimport { listProcesses } from \"../../../base/node/ps.js\";\nimport { ILogService } from \"../../log/common/log.js\";\n\nenum Constants {\n\t/**\n\t * The amount of time to throttle checks when the process receives output.\n\t */\n\tInactiveThrottleDuration = 5000,\n\t/**\n\t * The amount of time to debounce check when the process receives input.\n\t */\n\tActiveDebounceDuration = 1000,\n}\n\nexport const ignoreProcessNames: string[] = [];\n\n/**\n * Monitors a process for child processes, checking at differing times depending on input and output\n * calls into the monitor.\n */\nexport class ChildProcessMonitor extends Disposable {\n\tprivate _hasChildProcesses = false;\n\tprivate set hasChildProcesses(value: boolean) {\n\t\tif (this._hasChildProcesses !== value) {\n\t\t\tthis._hasChildProcesses = value;\n\t\t\tthis._logService.debug(\n\t\t\t\t\"ChildProcessMonitor: Has child processes changed\",\n\t\t\t\tvalue,\n\t\t\t);\n\t\t\tthis._onDidChangeHasChildProcesses.fire(value);\n\t\t}\n\t}\n\t/**\n\t * Whether the process has child processes.\n\t */\n\tget hasChildProcesses(): boolean {\n\t\treturn this._hasChildProcesses;\n\t}\n\n\tprivate readonly _onDidChangeHasChildProcesses = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\t/**\n\t * An event that fires when whether the process has child processes changes.\n\t */\n\treadonly onDidChangeHasChildProcesses =\n\t\tthis._onDidChangeHasChildProcesses.event;\n\n\tconstructor(\n\t\tprivate readonly _pid: number,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Input was triggered on the process.\n\t */\n\thandleInput() {\n\t\tthis._refreshActive();\n\t}\n\n\t/**\n\t * Output was triggered on the process.\n\t */\n\thandleOutput() {\n\t\tthis._refreshInactive();\n\t}\n\n\t@debounce(Constants.ActiveDebounceDuration)\n\tprivate async _refreshActive(): Promise<void> {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tconst processItem = await listProcesses(this._pid);\n\t\t\tthis.hasChildProcesses = this._processContainsChildren(processItem);\n\t\t} catch (e) {\n\t\t\tthis._logService.debug(\n\t\t\t\t\"ChildProcessMonitor: Fetching process tree failed\",\n\t\t\t\te,\n\t\t\t);\n\t\t}\n\t}\n\n\t@throttle(Constants.InactiveThrottleDuration)\n\tprivate _refreshInactive(): void {\n\t\tthis._refreshActive();\n\t}\n\n\tprivate _processContainsChildren(processItem: ProcessItem): boolean {\n\t\t// No child processes\n\t\tif (!processItem.children) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// A single child process, handle special cases\n\t\tif (processItem.children.length === 1) {\n\t\t\tconst item = processItem.children[0];\n\t\t\tlet cmd: string;\n\t\t\tif (item.cmd.startsWith(`\"`)) {\n\t\t\t\tcmd = item.cmd.substring(1, item.cmd.indexOf(`\"`, 1));\n\t\t\t} else {\n\t\t\t\tconst spaceIndex = item.cmd.indexOf(` `);\n\t\t\t\tif (spaceIndex === -1) {\n\t\t\t\t\tcmd = item.cmd;\n\t\t\t\t} else {\n\t\t\t\t\tcmd = item.cmd.substring(0, spaceIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ignoreProcessNames.indexOf(parse(cmd).name) === -1;\n\t\t}\n\n\t\t// Fallback, count child processes\n\t\treturn processItem.children.length > 0;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,UAAU,gBAAgB;AACnC,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AAEtB,SAAS,qBAAqB;AAC9B,SAAS,mBAAmB;AAE5B,IAAK,YAAL,kBAAKA,eAAL;AAIC,EAAAA,sBAAA,8BAA2B,OAA3B;AAIA,EAAAA,sBAAA,4BAAyB,OAAzB;AARI,SAAAA;AAAA,GAAA;AAWE,MAAM,qBAA+B,CAAC;AAMtC,IAAM,sBAAN,cAAkC,WAAW;AAAA,EA4BnD,YACkB,MACa,aAC7B;AACD,UAAM;AAHW;AACa;AAAA,EAG/B;AAAA,EA/DD,OA8BoD;AAAA;AAAA;AAAA,EAC3C,qBAAqB;AAAA,EAC7B,IAAY,kBAAkB,OAAgB;AAC7C,QAAI,KAAK,uBAAuB,OAAO;AACtC,WAAK,qBAAqB;AAC1B,WAAK,YAAY;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AACA,WAAK,8BAA8B,KAAK,KAAK;AAAA,IAC9C;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,oBAA6B;AAChC,WAAO,KAAK;AAAA,EACb;AAAA,EAEiB,gCAAgC,KAAK;AAAA,IACrD,IAAI,QAAiB;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAIS,+BACR,KAAK,8BAA8B;AAAA;AAAA;AAAA;AAAA,EAYpC,cAAc;AACb,SAAK,eAAe;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACd,SAAK,iBAAiB;AAAA,EACvB;AAAA,EAGA,MAAc,iBAAgC;AAC7C,QAAI,KAAK,OAAO,YAAY;AAC3B;AAAA,IACD;AACA,QAAI;AACH,YAAM,cAAc,MAAM,cAAc,KAAK,IAAI;AACjD,WAAK,oBAAoB,KAAK,yBAAyB,WAAW;AAAA,IACnE,SAAS,GAAG;AACX,WAAK,YAAY;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAGQ,mBAAyB;AAChC,SAAK,eAAe;AAAA,EACrB;AAAA,EAEQ,yBAAyB,aAAmC;AAEnE,QAAI,CAAC,YAAY,UAAU;AAC1B,aAAO;AAAA,IACR;AAGA,QAAI,YAAY,SAAS,WAAW,GAAG;AACtC,YAAM,OAAO,YAAY,SAAS,CAAC;AACnC,UAAI;AACJ,UAAI,KAAK,IAAI,WAAW,GAAG,GAAG;AAC7B,cAAM,KAAK,IAAI,UAAU,GAAG,KAAK,IAAI,QAAQ,KAAK,CAAC,CAAC;AAAA,MACrD,OAAO;AACN,cAAM,aAAa,KAAK,IAAI,QAAQ,GAAG;AACvC,YAAI,eAAe,IAAI;AACtB,gBAAM,KAAK;AAAA,QACZ,OAAO;AACN,gBAAM,KAAK,IAAI,UAAU,GAAG,UAAU;AAAA,QACvC;AAAA,MACD;AACA,aAAO,mBAAmB,QAAQ,MAAM,GAAG,EAAE,IAAI,MAAM;AAAA,IACxD;AAGA,WAAO,YAAY,SAAS,SAAS;AAAA,EACtC;AACD;AA9Ce;AAAA,EADb,SAAS,gCAAgC;AAAA,GAjD9B,oBAkDE;AAgBN;AAAA,EADP,SAAS,kCAAkC;AAAA,GAjEhC,oBAkEJ;AAlEI,sBAAN;AAAA,EA8BJ;AAAA,GA9BU;",
  "names": ["Constants"]
}
