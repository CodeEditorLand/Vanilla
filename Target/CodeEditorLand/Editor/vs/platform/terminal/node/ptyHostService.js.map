{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/ptyHostService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable, toDisposable } from \"../../../base/common/lifecycle.js\";\nimport type * as performance from \"../../../base/common/performance.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOS,\n\ttype OperatingSystem,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport { StopWatch } from \"../../../base/common/stopwatch.js\";\nimport { getSystemShell } from \"../../../base/node/shell.js\";\nimport { ProxyChannel } from \"../../../base/parts/ipc/common/ipc.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { ILogService, ILoggerService, LogLevel } from \"../../log/common/log.js\";\nimport { RemoteLoggerChannelClient } from \"../../log/common/logIpc.js\";\nimport { getResolvedShellEnv } from \"../../shell/node/shellEnv.js\";\nimport type { IPtyHostProcessReplayEvent } from \"../common/capabilities/capabilities.js\";\nimport { RequestStore } from \"../common/requestStore.js\";\nimport {\n\tHeartbeatConstants,\n\ttype IHeartbeatService,\n\ttype IProcessDataEvent,\n\ttype IProcessProperty,\n\ttype IProcessPropertyMap,\n\ttype IProcessReadyEvent,\n\ttype IPtyHostLatencyMeasurement,\n\ttype IPtyHostService,\n\ttype IPtyService,\n\ttype IRequestResolveVariablesEvent,\n\ttype ISerializedTerminalState,\n\ttype IShellLaunchConfig,\n\ttype ITerminalLaunchError,\n\ttype ITerminalProcessOptions,\n\ttype ITerminalProfile,\n\ttype ITerminalsLayoutInfo,\n\ttype ProcessPropertyType,\n\ttype TerminalIcon,\n\tTerminalIpcChannels,\n\tTerminalSettingId,\n\ttype TitleEventSource,\n} from \"../common/terminal.js\";\nimport { registerTerminalPlatformConfiguration } from \"../common/terminalPlatformConfiguration.js\";\nimport type {\n\tIGetTerminalLayoutInfoArgs,\n\tIProcessDetails,\n\tISetTerminalLayoutInfoArgs,\n} from \"../common/terminalProcess.js\";\nimport type { IPtyHostConnection, IPtyHostStarter } from \"./ptyHost.js\";\nimport { detectAvailableProfiles } from \"./terminalProfiles.js\";\n\nenum Constants {\n\tMaxRestarts = 5,\n}\n\n/**\n * This service implements IPtyService by launching a pty host process, forwarding messages to and\n * from the pty host process and manages the connection.\n */\nexport class PtyHostService extends Disposable implements IPtyHostService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate __connection?: IPtyHostConnection;\n\t// ProxyChannel is not used here because events get lost when forwarding across multiple proxies\n\tprivate __proxy?: IPtyService;\n\n\tprivate get _connection(): IPtyHostConnection {\n\t\tthis._ensurePtyHost();\n\t\treturn this.__connection!;\n\t}\n\tprivate get _proxy(): IPtyService {\n\t\tthis._ensurePtyHost();\n\t\treturn this.__proxy!;\n\t}\n\t/**\n\t * Get the proxy if it exists, otherwise undefined. This is used when calls are not needed to be\n\t * passed through to the pty host if it has not yet been spawned.\n\t */\n\tprivate get _optionalProxy(): IPtyService | undefined {\n\t\treturn this.__proxy;\n\t}\n\n\tprivate _ensurePtyHost() {\n\t\tif (!this.__connection) {\n\t\t\tthis._startPtyHost();\n\t\t}\n\t}\n\n\tprivate readonly _resolveVariablesRequestStore: RequestStore<\n\t\tstring[],\n\t\t{ workspaceId: string; originalText: string[] }\n\t>;\n\tprivate _wasQuitRequested = false;\n\tprivate _restartCount = 0;\n\tprivate _isResponsive = true;\n\tprivate _heartbeatFirstTimeout?: NodeJS.Timeout;\n\tprivate _heartbeatSecondTimeout?: NodeJS.Timeout;\n\n\tprivate readonly _onPtyHostExit = this._register(new Emitter<number>());\n\treadonly onPtyHostExit = this._onPtyHostExit.event;\n\tprivate readonly _onPtyHostStart = this._register(new Emitter<void>());\n\treadonly onPtyHostStart = this._onPtyHostStart.event;\n\tprivate readonly _onPtyHostUnresponsive = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onPtyHostUnresponsive = this._onPtyHostUnresponsive.event;\n\tprivate readonly _onPtyHostResponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostResponsive = this._onPtyHostResponsive.event;\n\tprivate readonly _onPtyHostRequestResolveVariables = this._register(\n\t\tnew Emitter<IRequestResolveVariablesEvent>(),\n\t);\n\treadonly onPtyHostRequestResolveVariables =\n\t\tthis._onPtyHostRequestResolveVariables.event;\n\n\tprivate readonly _onProcessData = this._register(\n\t\tnew Emitter<{ id: number; event: IProcessDataEvent | string }>(),\n\t);\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReady = this._register(\n\t\tnew Emitter<{ id: number; event: IProcessReadyEvent }>(),\n\t);\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessReplay = this._register(\n\t\tnew Emitter<{ id: number; event: IPtyHostProcessReplayEvent }>(),\n\t);\n\treadonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessOrphanQuestion = this._register(\n\t\tnew Emitter<{ id: number }>(),\n\t);\n\treadonly onProcessOrphanQuestion = this._onProcessOrphanQuestion.event;\n\tprivate readonly _onDidRequestDetach = this._register(\n\t\tnew Emitter<{\n\t\t\trequestId: number;\n\t\t\tworkspaceId: string;\n\t\t\tinstanceId: number;\n\t\t}>(),\n\t);\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\tprivate readonly _onDidChangeProperty = this._register(\n\t\tnew Emitter<{ id: number; property: IProcessProperty<any> }>(),\n\t);\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(\n\t\tnew Emitter<{ id: number; event: number | undefined }>(),\n\t);\n\treadonly onProcessExit = this._onProcessExit.event;\n\n\tconstructor(\n\t\tprivate readonly _ptyHostStarter: IPtyHostStarter,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILoggerService private readonly _loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\t// Platform configuration is required on the process running the pty host (shared process or\n\t\t// remote server).\n\t\tregisterTerminalPlatformConfiguration();\n\n\t\tthis._register(this._ptyHostStarter);\n\t\tthis._register(toDisposable(() => this._disposePtyHost()));\n\n\t\tthis._resolveVariablesRequestStore = this._register(new RequestStore(undefined, this._logService));\n\t\tthis._register(this._resolveVariablesRequestStore.onCreateRequest(this._onPtyHostRequestResolveVariables.fire, this._onPtyHostRequestResolveVariables));\n\n\t\t// Start the pty host when a window requests a connection, if the starter has that capability.\n\t\tif (this._ptyHostStarter.onRequestConnection) {\n\t\t\tthis._register(Event.once(this._ptyHostStarter.onRequestConnection)(() => this._ensurePtyHost()));\n\t\t}\n\n\t\tif (this._ptyHostStarter.onWillShutdown) {\n\t\t\tthis._register(this._ptyHostStarter.onWillShutdown(() => this._wasQuitRequested = true));\n\t\t}\n\t}\n\n\tprivate get _ignoreProcessNames(): string[] {\n\t\treturn this._configurationService.getValue<string[]>(\n\t\t\tTerminalSettingId.IgnoreProcessNames,\n\t\t);\n\t}\n\n\tprivate async _refreshIgnoreProcessNames(): Promise<void> {\n\t\treturn this._optionalProxy?.refreshIgnoreProcessNames?.(\n\t\t\tthis._ignoreProcessNames,\n\t\t);\n\t}\n\n\tprivate async _resolveShellEnv(): Promise<typeof process.env> {\n\t\tif (isWindows) {\n\t\t\treturn process.env;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await getResolvedShellEnv(\n\t\t\t\tthis._configurationService,\n\t\t\t\tthis._logService,\n\t\t\t\t{ _: [] },\n\t\t\t\tprocess.env,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis._logService.error(\n\t\t\t\t\"ptyHost was unable to resolve shell environment\",\n\t\t\t\terror,\n\t\t\t);\n\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tprivate _startPtyHost(): [IPtyHostConnection, IPtyService] {\n\t\tconst connection = this._ptyHostStarter.start();\n\t\tconst client = connection.client;\n\n\t\t// Log a full stack trace which will tell the exact reason the pty host is starting up\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace(\n\t\t\t\t\"PtyHostService#_startPtyHost\",\n\t\t\t\tnew Error().stack?.replace(/^Error/, \"\"),\n\t\t\t);\n\t\t}\n\n\t\t// Setup heartbeat service and trigger a heartbeat immediately to reset the timeouts\n\t\tconst heartbeatService = ProxyChannel.toService<IHeartbeatService>(\n\t\t\tclient.getChannel(TerminalIpcChannels.Heartbeat),\n\t\t);\n\t\theartbeatService.onBeat(() => this._handleHeartbeat());\n\t\tthis._handleHeartbeat(true);\n\n\t\t// Handle exit\n\t\tthis._register(\n\t\t\tconnection.onDidProcessExit((e) => {\n\t\t\t\tthis._onPtyHostExit.fire(e.code);\n\t\t\t\tif (!this._wasQuitRequested && !this._store.isDisposed) {\n\t\t\t\t\tif (this._restartCount <= Constants.MaxRestarts) {\n\t\t\t\t\t\tthis._logService.error(\n\t\t\t\t\t\t\t`ptyHost terminated unexpectedly with code ${e.code}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._restartCount++;\n\t\t\t\t\t\tthis.restartPtyHost();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logService.error(\n\t\t\t\t\t\t\t`ptyHost terminated unexpectedly with code ${e.code}, giving up`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Create proxy and forward events\n\t\tconst proxy = ProxyChannel.toService<IPtyService>(\n\t\t\tclient.getChannel(TerminalIpcChannels.PtyHost),\n\t\t);\n\t\tthis._register(proxy.onProcessData((e) => this._onProcessData.fire(e)));\n\t\tthis._register(\n\t\t\tproxy.onProcessReady((e) => this._onProcessReady.fire(e)),\n\t\t);\n\t\tthis._register(proxy.onProcessExit((e) => this._onProcessExit.fire(e)));\n\t\tthis._register(\n\t\t\tproxy.onDidChangeProperty((e) => this._onDidChangeProperty.fire(e)),\n\t\t);\n\t\tthis._register(\n\t\t\tproxy.onProcessReplay((e) => this._onProcessReplay.fire(e)),\n\t\t);\n\t\tthis._register(\n\t\t\tproxy.onProcessOrphanQuestion((e) =>\n\t\t\t\tthis._onProcessOrphanQuestion.fire(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tproxy.onDidRequestDetach((e) => this._onDidRequestDetach.fire(e)),\n\t\t);\n\n\t\tthis._register(\n\t\t\tnew RemoteLoggerChannelClient(\n\t\t\t\tthis._loggerService,\n\t\t\t\tclient.getChannel(TerminalIpcChannels.Logger),\n\t\t\t),\n\t\t);\n\n\t\tthis.__connection = connection;\n\t\tthis.__proxy = proxy;\n\n\t\tthis._onPtyHostStart.fire();\n\n\t\tthis._register(\n\t\t\tthis._configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(TerminalSettingId.IgnoreProcessNames)\n\t\t\t\t) {\n\t\t\t\t\tawait this._refreshIgnoreProcessNames();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._refreshIgnoreProcessNames();\n\n\t\treturn [connection, proxy];\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: \"6\" | \"11\",\n\t\tenv: IProcessEnvironment,\n\t\texecutableEnv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean,\n\t\tworkspaceId: string,\n\t\tworkspaceName: string,\n\t): Promise<number> {\n\t\tconst timeout = setTimeout(\n\t\t\t() => this._handleUnresponsiveCreateProcess(),\n\t\t\tHeartbeatConstants.CreateProcessTimeout,\n\t\t);\n\t\tconst id = await this._proxy.createProcess(\n\t\t\tshellLaunchConfig,\n\t\t\tcwd,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tunicodeVersion,\n\t\t\tenv,\n\t\t\texecutableEnv,\n\t\t\toptions,\n\t\t\tshouldPersist,\n\t\t\tworkspaceId,\n\t\t\tworkspaceName,\n\t\t);\n\t\tclearTimeout(timeout);\n\t\treturn id;\n\t}\n\tupdateTitle(\n\t\tid: number,\n\t\ttitle: string,\n\t\ttitleSource: TitleEventSource,\n\t): Promise<void> {\n\t\treturn this._proxy.updateTitle(id, title, titleSource);\n\t}\n\tupdateIcon(\n\t\tid: number,\n\t\tuserInitiated: boolean,\n\t\ticon: TerminalIcon,\n\t\tcolor?: string,\n\t): Promise<void> {\n\t\treturn this._proxy.updateIcon(id, userInitiated, icon, color);\n\t}\n\tattachToProcess(id: number): Promise<void> {\n\t\treturn this._proxy.attachToProcess(id);\n\t}\n\tdetachFromProcess(id: number, forcePersist?: boolean): Promise<void> {\n\t\treturn this._proxy.detachFromProcess(id, forcePersist);\n\t}\n\tshutdownAll(): Promise<void> {\n\t\treturn this._proxy.shutdownAll();\n\t}\n\tlistProcesses(): Promise<IProcessDetails[]> {\n\t\treturn this._proxy.listProcesses();\n\t}\n\tasync getPerformanceMarks(): Promise<performance.PerformanceMark[]> {\n\t\treturn this._optionalProxy?.getPerformanceMarks() ?? [];\n\t}\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\treturn this._optionalProxy?.reduceConnectionGraceTime();\n\t}\n\tstart(\n\t\tid: number,\n\t): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\treturn this._proxy.start(id);\n\t}\n\tshutdown(id: number, immediate: boolean): Promise<void> {\n\t\treturn this._proxy.shutdown(id, immediate);\n\t}\n\tinput(id: number, data: string): Promise<void> {\n\t\treturn this._proxy.input(id, data);\n\t}\n\tprocessBinary(id: number, data: string): Promise<void> {\n\t\treturn this._proxy.processBinary(id, data);\n\t}\n\tresize(id: number, cols: number, rows: number): Promise<void> {\n\t\treturn this._proxy.resize(id, cols, rows);\n\t}\n\tclearBuffer(id: number): Promise<void> {\n\t\treturn this._proxy.clearBuffer(id);\n\t}\n\tacknowledgeDataEvent(id: number, charCount: number): Promise<void> {\n\t\treturn this._proxy.acknowledgeDataEvent(id, charCount);\n\t}\n\tsetUnicodeVersion(id: number, version: \"6\" | \"11\"): Promise<void> {\n\t\treturn this._proxy.setUnicodeVersion(id, version);\n\t}\n\tgetInitialCwd(id: number): Promise<string> {\n\t\treturn this._proxy.getInitialCwd(id);\n\t}\n\tgetCwd(id: number): Promise<string> {\n\t\treturn this._proxy.getCwd(id);\n\t}\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst sw = new StopWatch();\n\t\tconst results = await this._proxy.getLatency();\n\t\tsw.stop();\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: \"ptyhostservice<->ptyhost\",\n\t\t\t\tlatency: sw.elapsed(),\n\t\t\t},\n\t\t\t...results,\n\t\t];\n\t}\n\torphanQuestionReply(id: number): Promise<void> {\n\t\treturn this._proxy.orphanQuestionReply(id);\n\t}\n\n\tinstallAutoReply(match: string, reply: string): Promise<void> {\n\t\treturn this._proxy.installAutoReply(match, reply);\n\t}\n\tuninstallAllAutoReplies(): Promise<void> {\n\t\treturn this._proxy.uninstallAllAutoReplies();\n\t}\n\tuninstallAutoReply(match: string): Promise<void> {\n\t\treturn this._proxy.uninstallAutoReply(match);\n\t}\n\n\tgetDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn (\n\t\t\tthis._optionalProxy?.getDefaultSystemShell(osOverride) ??\n\t\t\tgetSystemShell(osOverride ?? OS, process.env)\n\t\t);\n\t}\n\tasync getProfiles(\n\t\tworkspaceId: string,\n\t\tprofiles: unknown,\n\t\tdefaultProfile: unknown,\n\t\tincludeDetectedProfiles = false,\n\t): Promise<ITerminalProfile[]> {\n\t\tconst shellEnv = await this._resolveShellEnv();\n\t\treturn detectAvailableProfiles(\n\t\t\tprofiles,\n\t\t\tdefaultProfile,\n\t\t\tincludeDetectedProfiles,\n\t\t\tthis._configurationService,\n\t\t\tshellEnv,\n\t\t\tundefined,\n\t\t\tthis._logService,\n\t\t\tthis._resolveVariables.bind(this, workspaceId),\n\t\t);\n\t}\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\t// If the pty host is yet to be launched, just return the environment of this process as it\n\t\t// is essentially the same when used to evaluate terminal profiles.\n\t\tif (!this.__proxy) {\n\t\t\treturn { ...process.env };\n\t\t}\n\t\treturn this._proxy.getEnvironment();\n\t}\n\tgetWslPath(\n\t\toriginal: string,\n\t\tdirection: \"unix-to-win\" | \"win-to-unix\",\n\t): Promise<string> {\n\t\treturn this._proxy.getWslPath(original, direction);\n\t}\n\n\tgetRevivedPtyNewId(\n\t\tworkspaceId: string,\n\t\tid: number,\n\t): Promise<number | undefined> {\n\t\treturn this._proxy.getRevivedPtyNewId(workspaceId, id);\n\t}\n\n\tsetTerminalLayoutInfo(args: ISetTerminalLayoutInfoArgs): Promise<void> {\n\t\treturn this._proxy.setTerminalLayoutInfo(args);\n\t}\n\tasync getTerminalLayoutInfo(\n\t\targs: IGetTerminalLayoutInfoArgs,\n\t): Promise<ITerminalsLayoutInfo | undefined> {\n\t\t// This is optional as we want reconnect requests to go through only if the pty host exists.\n\t\t// Revive is handled specially as reviveTerminalProcesses is guaranteed to be called before\n\t\t// the request for layout info.\n\t\treturn this._optionalProxy?.getTerminalLayoutInfo(args);\n\t}\n\n\tasync requestDetachInstance(\n\t\tworkspaceId: string,\n\t\tinstanceId: number,\n\t): Promise<IProcessDetails | undefined> {\n\t\treturn this._proxy.requestDetachInstance(workspaceId, instanceId);\n\t}\n\n\tasync acceptDetachInstanceReply(\n\t\trequestId: number,\n\t\tpersistentProcessId: number,\n\t): Promise<void> {\n\t\treturn this._proxy.acceptDetachInstanceReply(\n\t\t\trequestId,\n\t\t\tpersistentProcessId,\n\t\t);\n\t}\n\n\tasync freePortKillProcess(\n\t\tport: string,\n\t): Promise<{ port: string; processId: string }> {\n\t\tif (!this._proxy.freePortKillProcess) {\n\t\t\tthrow new Error(\n\t\t\t\t\"freePortKillProcess does not exist on the pty proxy\",\n\t\t\t);\n\t\t}\n\t\treturn this._proxy.freePortKillProcess(port);\n\t}\n\n\tasync serializeTerminalState(ids: number[]): Promise<string> {\n\t\treturn this._proxy.serializeTerminalState(ids);\n\t}\n\n\tasync reviveTerminalProcesses(\n\t\tworkspaceId: string,\n\t\tstate: ISerializedTerminalState[],\n\t\tdateTimeFormatLocate: string,\n\t) {\n\t\treturn this._proxy.reviveTerminalProcesses(\n\t\t\tworkspaceId,\n\t\t\tstate,\n\t\t\tdateTimeFormatLocate,\n\t\t);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(\n\t\tid: number,\n\t\tproperty: T,\n\t): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._proxy.refreshProperty(id, property);\n\t}\n\tasync updateProperty<T extends ProcessPropertyType>(\n\t\tid: number,\n\t\tproperty: T,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\treturn this._proxy.updateProperty(id, property, value);\n\t}\n\n\tasync restartPtyHost(): Promise<void> {\n\t\tthis._disposePtyHost();\n\t\tthis._isResponsive = true;\n\t\tthis._startPtyHost();\n\t}\n\n\tprivate _disposePtyHost(): void {\n\t\tthis._proxy.shutdownAll();\n\t\tthis._connection.store.dispose();\n\t}\n\n\tprivate _handleHeartbeat(isConnecting?: boolean) {\n\t\tthis._clearHeartbeatTimeouts();\n\t\tthis._heartbeatFirstTimeout = setTimeout(\n\t\t\t() => this._handleHeartbeatFirstTimeout(),\n\t\t\tisConnecting\n\t\t\t\t? HeartbeatConstants.ConnectingBeatInterval\n\t\t\t\t: HeartbeatConstants.BeatInterval *\n\t\t\t\t\t\tHeartbeatConstants.FirstWaitMultiplier,\n\t\t);\n\t\tif (!this._isResponsive) {\n\t\t\tthis._isResponsive = true;\n\t\t\tthis._onPtyHostResponsive.fire();\n\t\t}\n\t}\n\n\tprivate _handleHeartbeatFirstTimeout() {\n\t\tthis._logService.warn(\n\t\t\t`No ptyHost heartbeat after ${(HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier) / 1000} seconds`,\n\t\t);\n\t\tthis._heartbeatFirstTimeout = undefined;\n\t\tthis._heartbeatSecondTimeout = setTimeout(\n\t\t\t() => this._handleHeartbeatSecondTimeout(),\n\t\t\tHeartbeatConstants.BeatInterval *\n\t\t\t\tHeartbeatConstants.SecondWaitMultiplier,\n\t\t);\n\t}\n\n\tprivate _handleHeartbeatSecondTimeout() {\n\t\tthis._logService.error(\n\t\t\t`No ptyHost heartbeat after ${(HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier + HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier) / 1000} seconds`,\n\t\t);\n\t\tthis._heartbeatSecondTimeout = undefined;\n\t\tif (this._isResponsive) {\n\t\t\tthis._isResponsive = false;\n\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t}\n\t}\n\n\tprivate _handleUnresponsiveCreateProcess() {\n\t\tthis._clearHeartbeatTimeouts();\n\t\tthis._logService.error(\n\t\t\t`No ptyHost response to createProcess after ${HeartbeatConstants.CreateProcessTimeout / 1000} seconds`,\n\t\t);\n\t\tif (this._isResponsive) {\n\t\t\tthis._isResponsive = false;\n\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t}\n\t}\n\n\tprivate _clearHeartbeatTimeouts() {\n\t\tif (this._heartbeatFirstTimeout) {\n\t\t\tclearTimeout(this._heartbeatFirstTimeout);\n\t\t\tthis._heartbeatFirstTimeout = undefined;\n\t\t}\n\t\tif (this._heartbeatSecondTimeout) {\n\t\t\tclearTimeout(this._heartbeatSecondTimeout);\n\t\t\tthis._heartbeatSecondTimeout = undefined;\n\t\t}\n\t}\n\n\tprivate _resolveVariables(\n\t\tworkspaceId: string,\n\t\ttext: string[],\n\t): Promise<string[]> {\n\t\treturn this._resolveVariablesRequestStore.createRequest({\n\t\t\tworkspaceId,\n\t\t\toriginalText: text,\n\t\t});\n\t}\n\tasync acceptPtyHostResolvedVariables(\n\t\trequestId: number,\n\t\tresolved: string[],\n\t) {\n\t\tthis._resolveVariablesRequestStore.acceptReply(requestId, resolved);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants"]
}
