{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/ptyHostService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IProcessEnvironment, OS, OperatingSystem, isWindows } from '../../../base/common/platform.js';\nimport { ProxyChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { ILogService, ILoggerService, LogLevel } from '../../log/common/log.js';\nimport { RemoteLoggerChannelClient } from '../../log/common/logIpc.js';\nimport { getResolvedShellEnv } from '../../shell/node/shellEnv.js';\nimport { IPtyHostProcessReplayEvent } from '../common/capabilities/capabilities.js';\nimport { RequestStore } from '../common/requestStore.js';\nimport { HeartbeatConstants, IHeartbeatService, IProcessDataEvent, IProcessProperty, IProcessPropertyMap, IProcessReadyEvent, IPtyHostLatencyMeasurement, IPtyHostService, IPtyService, IRequestResolveVariablesEvent, ISerializedTerminalState, IShellLaunchConfig, ITerminalLaunchError, ITerminalProcessOptions, ITerminalProfile, ITerminalsLayoutInfo, ProcessPropertyType, TerminalIcon, TerminalIpcChannels, TerminalSettingId, TitleEventSource } from '../common/terminal.js';\nimport { registerTerminalPlatformConfiguration } from '../common/terminalPlatformConfiguration.js';\nimport { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs } from '../common/terminalProcess.js';\nimport { IPtyHostConnection, IPtyHostStarter } from './ptyHost.js';\nimport { detectAvailableProfiles } from './terminalProfiles.js';\nimport * as performance from '../../../base/common/performance.js';\nimport { getSystemShell } from '../../../base/node/shell.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\n\nenum Constants {\n\tMaxRestarts = 5\n}\n\n/**\n * This service implements IPtyService by launching a pty host process, forwarding messages to and\n * from the pty host process and manages the connection.\n */\nexport class PtyHostService extends Disposable implements IPtyHostService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate __connection?: IPtyHostConnection;\n\t// ProxyChannel is not used here because events get lost when forwarding across multiple proxies\n\tprivate __proxy?: IPtyService;\n\n\tprivate get _connection(): IPtyHostConnection {\n\t\tthis._ensurePtyHost();\n\t\treturn this.__connection!;\n\t}\n\tprivate get _proxy(): IPtyService {\n\t\tthis._ensurePtyHost();\n\t\treturn this.__proxy!;\n\t}\n\t/**\n\t * Get the proxy if it exists, otherwise undefined. This is used when calls are not needed to be\n\t * passed through to the pty host if it has not yet been spawned.\n\t */\n\tprivate get _optionalProxy(): IPtyService | undefined {\n\t\treturn this.__proxy;\n\t}\n\n\tprivate _ensurePtyHost() {\n\t\tif (!this.__connection) {\n\t\t\tthis._startPtyHost();\n\t\t}\n\t}\n\n\tprivate readonly _resolveVariablesRequestStore: RequestStore<string[], { workspaceId: string; originalText: string[] }>;\n\tprivate _wasQuitRequested = false;\n\tprivate _restartCount = 0;\n\tprivate _isResponsive = true;\n\tprivate _heartbeatFirstTimeout?: NodeJS.Timeout;\n\tprivate _heartbeatSecondTimeout?: NodeJS.Timeout;\n\n\tprivate readonly _onPtyHostExit = this._register(new Emitter<number>());\n\treadonly onPtyHostExit = this._onPtyHostExit.event;\n\tprivate readonly _onPtyHostStart = this._register(new Emitter<void>());\n\treadonly onPtyHostStart = this._onPtyHostStart.event;\n\tprivate readonly _onPtyHostUnresponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostUnresponsive = this._onPtyHostUnresponsive.event;\n\tprivate readonly _onPtyHostResponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostResponsive = this._onPtyHostResponsive.event;\n\tprivate readonly _onPtyHostRequestResolveVariables = this._register(new Emitter<IRequestResolveVariablesEvent>());\n\treadonly onPtyHostRequestResolveVariables = this._onPtyHostRequestResolveVariables.event;\n\n\tprivate readonly _onProcessData = this._register(new Emitter<{ id: number; event: IProcessDataEvent | string }>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<{ id: number; event: IProcessReadyEvent }>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessReplay = this._register(new Emitter<{ id: number; event: IPtyHostProcessReplayEvent }>());\n\treadonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessOrphanQuestion = this._register(new Emitter<{ id: number }>());\n\treadonly onProcessOrphanQuestion = this._onProcessOrphanQuestion.event;\n\tprivate readonly _onDidRequestDetach = this._register(new Emitter<{ requestId: number; workspaceId: string; instanceId: number }>());\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<{ id: number; property: IProcessProperty<any> }>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<{ id: number; event: number | undefined }>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\n\tconstructor(\n\t\tprivate readonly _ptyHostStarter: IPtyHostStarter,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILoggerService private readonly _loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\t// Platform configuration is required on the process running the pty host (shared process or\n\t\t// remote server).\n\t\tregisterTerminalPlatformConfiguration();\n\n\t\tthis._register(this._ptyHostStarter);\n\t\tthis._register(toDisposable(() => this._disposePtyHost()));\n\n\t\tthis._resolveVariablesRequestStore = this._register(new RequestStore(undefined, this._logService));\n\t\tthis._register(this._resolveVariablesRequestStore.onCreateRequest(this._onPtyHostRequestResolveVariables.fire, this._onPtyHostRequestResolveVariables));\n\n\t\t// Start the pty host when a window requests a connection, if the starter has that capability.\n\t\tif (this._ptyHostStarter.onRequestConnection) {\n\t\t\tthis._register(Event.once(this._ptyHostStarter.onRequestConnection)(() => this._ensurePtyHost()));\n\t\t}\n\n\t\tif (this._ptyHostStarter.onWillShutdown) {\n\t\t\tthis._register(this._ptyHostStarter.onWillShutdown(() => this._wasQuitRequested = true));\n\t\t}\n\t}\n\n\tprivate get _ignoreProcessNames(): string[] {\n\t\treturn this._configurationService.getValue<string[]>(TerminalSettingId.IgnoreProcessNames);\n\t}\n\n\tprivate async _refreshIgnoreProcessNames(): Promise<void> {\n\t\treturn this._optionalProxy?.refreshIgnoreProcessNames?.(this._ignoreProcessNames);\n\t}\n\n\tprivate async _resolveShellEnv(): Promise<typeof process.env> {\n\t\tif (isWindows) {\n\t\t\treturn process.env;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await getResolvedShellEnv(this._configurationService, this._logService, { _: [] }, process.env);\n\t\t} catch (error) {\n\t\t\tthis._logService.error('ptyHost was unable to resolve shell environment', error);\n\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tprivate _startPtyHost(): [IPtyHostConnection, IPtyService] {\n\t\tconst connection = this._ptyHostStarter.start();\n\t\tconst client = connection.client;\n\n\t\t// Log a full stack trace which will tell the exact reason the pty host is starting up\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace('PtyHostService#_startPtyHost', new Error().stack?.replace(/^Error/, ''));\n\t\t}\n\n\t\t// Setup heartbeat service and trigger a heartbeat immediately to reset the timeouts\n\t\tconst heartbeatService = ProxyChannel.toService<IHeartbeatService>(client.getChannel(TerminalIpcChannels.Heartbeat));\n\t\theartbeatService.onBeat(() => this._handleHeartbeat());\n\t\tthis._handleHeartbeat(true);\n\n\t\t// Handle exit\n\t\tthis._register(connection.onDidProcessExit(e => {\n\t\t\tthis._onPtyHostExit.fire(e.code);\n\t\t\tif (!this._wasQuitRequested && !this._store.isDisposed) {\n\t\t\t\tif (this._restartCount <= Constants.MaxRestarts) {\n\t\t\t\t\tthis._logService.error(`ptyHost terminated unexpectedly with code ${e.code}`);\n\t\t\t\t\tthis._restartCount++;\n\t\t\t\t\tthis.restartPtyHost();\n\t\t\t\t} else {\n\t\t\t\t\tthis._logService.error(`ptyHost terminated unexpectedly with code ${e.code}, giving up`);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Create proxy and forward events\n\t\tconst proxy = ProxyChannel.toService<IPtyService>(client.getChannel(TerminalIpcChannels.PtyHost));\n\t\tthis._register(proxy.onProcessData(e => this._onProcessData.fire(e)));\n\t\tthis._register(proxy.onProcessReady(e => this._onProcessReady.fire(e)));\n\t\tthis._register(proxy.onProcessExit(e => this._onProcessExit.fire(e)));\n\t\tthis._register(proxy.onDidChangeProperty(e => this._onDidChangeProperty.fire(e)));\n\t\tthis._register(proxy.onProcessReplay(e => this._onProcessReplay.fire(e)));\n\t\tthis._register(proxy.onProcessOrphanQuestion(e => this._onProcessOrphanQuestion.fire(e)));\n\t\tthis._register(proxy.onDidRequestDetach(e => this._onDidRequestDetach.fire(e)));\n\n\t\tthis._register(new RemoteLoggerChannelClient(this._loggerService, client.getChannel(TerminalIpcChannels.Logger)));\n\n\t\tthis.__connection = connection;\n\t\tthis.__proxy = proxy;\n\n\t\tthis._onPtyHostStart.fire();\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.IgnoreProcessNames)) {\n\t\t\t\tawait this._refreshIgnoreProcessNames();\n\t\t\t}\n\t\t}));\n\t\tthis._refreshIgnoreProcessNames();\n\n\t\treturn [connection, proxy];\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11',\n\t\tenv: IProcessEnvironment,\n\t\texecutableEnv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean,\n\t\tworkspaceId: string,\n\t\tworkspaceName: string\n\t): Promise<number> {\n\t\tconst timeout = setTimeout(() => this._handleUnresponsiveCreateProcess(), HeartbeatConstants.CreateProcessTimeout);\n\t\tconst id = await this._proxy.createProcess(shellLaunchConfig, cwd, cols, rows, unicodeVersion, env, executableEnv, options, shouldPersist, workspaceId, workspaceName);\n\t\tclearTimeout(timeout);\n\t\treturn id;\n\t}\n\tupdateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<void> {\n\t\treturn this._proxy.updateTitle(id, title, titleSource);\n\t}\n\tupdateIcon(id: number, userInitiated: boolean, icon: TerminalIcon, color?: string): Promise<void> {\n\t\treturn this._proxy.updateIcon(id, userInitiated, icon, color);\n\t}\n\tattachToProcess(id: number): Promise<void> {\n\t\treturn this._proxy.attachToProcess(id);\n\t}\n\tdetachFromProcess(id: number, forcePersist?: boolean): Promise<void> {\n\t\treturn this._proxy.detachFromProcess(id, forcePersist);\n\t}\n\tshutdownAll(): Promise<void> {\n\t\treturn this._proxy.shutdownAll();\n\t}\n\tlistProcesses(): Promise<IProcessDetails[]> {\n\t\treturn this._proxy.listProcesses();\n\t}\n\tasync getPerformanceMarks(): Promise<performance.PerformanceMark[]> {\n\t\treturn this._optionalProxy?.getPerformanceMarks() ?? [];\n\t}\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\treturn this._optionalProxy?.reduceConnectionGraceTime();\n\t}\n\tstart(id: number): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\treturn this._proxy.start(id);\n\t}\n\tshutdown(id: number, immediate: boolean): Promise<void> {\n\t\treturn this._proxy.shutdown(id, immediate);\n\t}\n\tinput(id: number, data: string): Promise<void> {\n\t\treturn this._proxy.input(id, data);\n\t}\n\tprocessBinary(id: number, data: string): Promise<void> {\n\t\treturn this._proxy.processBinary(id, data);\n\t}\n\tresize(id: number, cols: number, rows: number): Promise<void> {\n\t\treturn this._proxy.resize(id, cols, rows);\n\t}\n\tclearBuffer(id: number): Promise<void> {\n\t\treturn this._proxy.clearBuffer(id);\n\t}\n\tacknowledgeDataEvent(id: number, charCount: number): Promise<void> {\n\t\treturn this._proxy.acknowledgeDataEvent(id, charCount);\n\t}\n\tsetUnicodeVersion(id: number, version: '6' | '11'): Promise<void> {\n\t\treturn this._proxy.setUnicodeVersion(id, version);\n\t}\n\tgetInitialCwd(id: number): Promise<string> {\n\t\treturn this._proxy.getInitialCwd(id);\n\t}\n\tgetCwd(id: number): Promise<string> {\n\t\treturn this._proxy.getCwd(id);\n\t}\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst sw = new StopWatch();\n\t\tconst results = await this._proxy.getLatency();\n\t\tsw.stop();\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: 'ptyhostservice<->ptyhost',\n\t\t\t\tlatency: sw.elapsed()\n\t\t\t},\n\t\t\t...results\n\t\t];\n\t}\n\torphanQuestionReply(id: number): Promise<void> {\n\t\treturn this._proxy.orphanQuestionReply(id);\n\t}\n\n\tinstallAutoReply(match: string, reply: string): Promise<void> {\n\t\treturn this._proxy.installAutoReply(match, reply);\n\t}\n\tuninstallAllAutoReplies(): Promise<void> {\n\t\treturn this._proxy.uninstallAllAutoReplies();\n\t}\n\tuninstallAutoReply(match: string): Promise<void> {\n\t\treturn this._proxy.uninstallAutoReply(match);\n\t}\n\n\tgetDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._optionalProxy?.getDefaultSystemShell(osOverride) ?? getSystemShell(osOverride ?? OS, process.env);\n\t}\n\tasync getProfiles(workspaceId: string, profiles: unknown, defaultProfile: unknown, includeDetectedProfiles: boolean = false): Promise<ITerminalProfile[]> {\n\t\tconst shellEnv = await this._resolveShellEnv();\n\t\treturn detectAvailableProfiles(profiles, defaultProfile, includeDetectedProfiles, this._configurationService, shellEnv, undefined, this._logService, this._resolveVariables.bind(this, workspaceId));\n\t}\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\t// If the pty host is yet to be launched, just return the environment of this process as it\n\t\t// is essentially the same when used to evaluate terminal profiles.\n\t\tif (!this.__proxy) {\n\t\t\treturn { ...process.env };\n\t\t}\n\t\treturn this._proxy.getEnvironment();\n\t}\n\tgetWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix'): Promise<string> {\n\t\treturn this._proxy.getWslPath(original, direction);\n\t}\n\n\tgetRevivedPtyNewId(workspaceId: string, id: number): Promise<number | undefined> {\n\t\treturn this._proxy.getRevivedPtyNewId(workspaceId, id);\n\t}\n\n\tsetTerminalLayoutInfo(args: ISetTerminalLayoutInfoArgs): Promise<void> {\n\t\treturn this._proxy.setTerminalLayoutInfo(args);\n\t}\n\tasync getTerminalLayoutInfo(args: IGetTerminalLayoutInfoArgs): Promise<ITerminalsLayoutInfo | undefined> {\n\t\t// This is optional as we want reconnect requests to go through only if the pty host exists.\n\t\t// Revive is handled specially as reviveTerminalProcesses is guaranteed to be called before\n\t\t// the request for layout info.\n\t\treturn this._optionalProxy?.getTerminalLayoutInfo(args);\n\t}\n\n\tasync requestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\treturn this._proxy.requestDetachInstance(workspaceId, instanceId);\n\t}\n\n\tasync acceptDetachInstanceReply(requestId: number, persistentProcessId: number): Promise<void> {\n\t\treturn this._proxy.acceptDetachInstanceReply(requestId, persistentProcessId);\n\t}\n\n\tasync freePortKillProcess(port: string): Promise<{ port: string; processId: string }> {\n\t\tif (!this._proxy.freePortKillProcess) {\n\t\t\tthrow new Error('freePortKillProcess does not exist on the pty proxy');\n\t\t}\n\t\treturn this._proxy.freePortKillProcess(port);\n\t}\n\n\tasync serializeTerminalState(ids: number[]): Promise<string> {\n\t\treturn this._proxy.serializeTerminalState(ids);\n\t}\n\n\tasync reviveTerminalProcesses(workspaceId: string, state: ISerializedTerminalState[], dateTimeFormatLocate: string) {\n\t\treturn this._proxy.reviveTerminalProcesses(workspaceId, state, dateTimeFormatLocate);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(id: number, property: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._proxy.refreshProperty(id, property);\n\n\t}\n\tasync updateProperty<T extends ProcessPropertyType>(id: number, property: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._proxy.updateProperty(id, property, value);\n\t}\n\n\tasync restartPtyHost(): Promise<void> {\n\t\tthis._disposePtyHost();\n\t\tthis._isResponsive = true;\n\t\tthis._startPtyHost();\n\t}\n\n\tprivate _disposePtyHost(): void {\n\t\tthis._proxy.shutdownAll();\n\t\tthis._connection.store.dispose();\n\t}\n\n\tprivate _handleHeartbeat(isConnecting?: boolean) {\n\t\tthis._clearHeartbeatTimeouts();\n\t\tthis._heartbeatFirstTimeout = setTimeout(() => this._handleHeartbeatFirstTimeout(), isConnecting ? HeartbeatConstants.ConnectingBeatInterval : (HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier));\n\t\tif (!this._isResponsive) {\n\t\t\tthis._isResponsive = true;\n\t\t\tthis._onPtyHostResponsive.fire();\n\t\t}\n\t}\n\n\tprivate _handleHeartbeatFirstTimeout() {\n\t\tthis._logService.warn(`No ptyHost heartbeat after ${HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier / 1000} seconds`);\n\t\tthis._heartbeatFirstTimeout = undefined;\n\t\tthis._heartbeatSecondTimeout = setTimeout(() => this._handleHeartbeatSecondTimeout(), HeartbeatConstants.BeatInterval * HeartbeatConstants.SecondWaitMultiplier);\n\t}\n\n\tprivate _handleHeartbeatSecondTimeout() {\n\t\tthis._logService.error(`No ptyHost heartbeat after ${(HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier + HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier) / 1000} seconds`);\n\t\tthis._heartbeatSecondTimeout = undefined;\n\t\tif (this._isResponsive) {\n\t\t\tthis._isResponsive = false;\n\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t}\n\t}\n\n\tprivate _handleUnresponsiveCreateProcess() {\n\t\tthis._clearHeartbeatTimeouts();\n\t\tthis._logService.error(`No ptyHost response to createProcess after ${HeartbeatConstants.CreateProcessTimeout / 1000} seconds`);\n\t\tif (this._isResponsive) {\n\t\t\tthis._isResponsive = false;\n\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t}\n\t}\n\n\tprivate _clearHeartbeatTimeouts() {\n\t\tif (this._heartbeatFirstTimeout) {\n\t\t\tclearTimeout(this._heartbeatFirstTimeout);\n\t\t\tthis._heartbeatFirstTimeout = undefined;\n\t\t}\n\t\tif (this._heartbeatSecondTimeout) {\n\t\t\tclearTimeout(this._heartbeatSecondTimeout);\n\t\t\tthis._heartbeatSecondTimeout = undefined;\n\t\t}\n\t}\n\n\tprivate _resolveVariables(workspaceId: string, text: string[]): Promise<string[]> {\n\t\treturn this._resolveVariablesRequestStore.createRequest({ workspaceId, originalText: text });\n\t}\n\tasync acceptPtyHostResolvedVariables(requestId: number, resolved: string[]) {\n\t\tthis._resolveVariablesRequestStore.acceptReply(requestId, resolved);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Constants"]
}
