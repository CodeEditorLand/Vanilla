{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/ptyHostMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DefaultURITransformer } from '../../../base/common/uriIpc.js';\nimport { ProxyChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { Server as ChildProcessServer } from '../../../base/parts/ipc/node/ipc.cp.js';\nimport { Server as UtilityProcessServer } from '../../../base/parts/ipc/node/ipc.mp.js';\nimport { localize } from '../../../nls.js';\nimport { OPTIONS, parseArgs } from '../../environment/node/argv.js';\nimport { NativeEnvironmentService } from '../../environment/node/environmentService.js';\nimport { getLogLevel } from '../../log/common/log.js';\nimport { LoggerChannel } from '../../log/common/logIpc.js';\nimport { LogService } from '../../log/common/logService.js';\nimport { LoggerService } from '../../log/node/loggerService.js';\nimport product from '../../product/common/product.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IReconnectConstants, TerminalIpcChannels } from '../common/terminal.js';\nimport { HeartbeatService } from './heartbeatService.js';\nimport { PtyService } from './ptyService.js';\nimport { isUtilityProcess } from '../../../base/parts/sandbox/node/electronTypes.js';\nimport { timeout } from '../../../base/common/async.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\n\nstartPtyHost();\n\nasync function startPtyHost() {\n\t// Parse environment variables\n\tconst startupDelay = parseInt(process.env.VSCODE_STARTUP_DELAY ?? '0');\n\tconst simulatedLatency = parseInt(process.env.VSCODE_LATENCY ?? '0');\n\tconst reconnectConstants: IReconnectConstants = {\n\t\tgraceTime: parseInt(process.env.VSCODE_RECONNECT_GRACE_TIME || '0'),\n\t\tshortGraceTime: parseInt(process.env.VSCODE_RECONNECT_SHORT_GRACE_TIME || '0'),\n\t\tscrollback: parseInt(process.env.VSCODE_RECONNECT_SCROLLBACK || '100')\n\t};\n\n\t// Sanitize environment\n\tdelete process.env.VSCODE_RECONNECT_GRACE_TIME;\n\tdelete process.env.VSCODE_RECONNECT_SHORT_GRACE_TIME;\n\tdelete process.env.VSCODE_RECONNECT_SCROLLBACK;\n\tdelete process.env.VSCODE_LATENCY;\n\tdelete process.env.VSCODE_STARTUP_DELAY;\n\n\t// Delay startup if needed, this must occur before RPC is setup to avoid the channel from timing\n\t// out.\n\tif (startupDelay) {\n\t\tawait timeout(startupDelay);\n\t}\n\n\t// Setup RPC\n\tconst _isUtilityProcess = isUtilityProcess(process);\n\tlet server: ChildProcessServer<string> | UtilityProcessServer;\n\tif (_isUtilityProcess) {\n\t\tserver = new UtilityProcessServer();\n\t} else {\n\t\tserver = new ChildProcessServer(TerminalIpcChannels.PtyHost);\n\t}\n\n\t// Services\n\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\tconst environmentService = new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService);\n\tconst loggerService = new LoggerService(getLogLevel(environmentService), environmentService.logsHome);\n\tserver.registerChannel(TerminalIpcChannels.Logger, new LoggerChannel(loggerService, () => DefaultURITransformer));\n\tconst logger = loggerService.createLogger('ptyhost', { name: localize('ptyHost', \"Pty Host\") });\n\tconst logService = new LogService(logger);\n\n\t// Log developer config\n\tif (startupDelay) {\n\t\tlogService.warn(`Pty Host startup is delayed ${startupDelay}ms`);\n\t}\n\tif (simulatedLatency) {\n\t\tlogService.warn(`Pty host is simulating ${simulatedLatency}ms latency`);\n\t}\n\n\tconst disposables = new DisposableStore();\n\n\t// Heartbeat responsiveness tracking\n\tconst heartbeatService = new HeartbeatService();\n\tserver.registerChannel(TerminalIpcChannels.Heartbeat, ProxyChannel.fromService(heartbeatService, disposables));\n\n\t// Init pty service\n\tconst ptyService = new PtyService(logService, productService, reconnectConstants, simulatedLatency);\n\tconst ptyServiceChannel = ProxyChannel.fromService(ptyService, disposables);\n\tserver.registerChannel(TerminalIpcChannels.PtyHost, ptyServiceChannel);\n\n\t// Register a channel for direct communication via Message Port\n\tif (_isUtilityProcess) {\n\t\tserver.registerChannel(TerminalIpcChannels.PtyHostWindow, ptyServiceChannel);\n\t}\n\n\t// Clean up\n\tprocess.once('exit', () => {\n\t\tlogService.trace('Pty host exiting');\n\t\tlogService.dispose();\n\t\theartbeatService.dispose();\n\t\tptyService.dispose();\n\t});\n}\n"],
  "mappings": ";;AAKA,SAAS,6BAA6B;AACtC,SAAS,oBAAoB;AAC7B,SAAS,UAAU,0BAA0B;AAC7C,SAAS,UAAU,4BAA4B;AAC/C,SAAS,gBAAgB;AACzB,SAAS,SAAS,iBAAiB;AACnC,SAAS,gCAAgC;AACzC,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,kBAAkB;AAC3B,SAAS,qBAAqB;AAC9B,OAAO,aAAa;AACpB,SAAS,uBAAuB;AAChC,SAAS,qBAAqB,2BAA2B;AACzD,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AACjC,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAEhC,aAAa;AAEb,eAAe,eAAe;AAE7B,QAAM,eAAe,SAAS,QAAQ,IAAI,wBAAwB,GAAG;AACrE,QAAM,mBAAmB,SAAS,QAAQ,IAAI,kBAAkB,GAAG;AACnE,QAAM,qBAA0C;AAAA,IAC/C,WAAW,SAAS,QAAQ,IAAI,+BAA+B,GAAG;AAAA,IAClE,gBAAgB,SAAS,QAAQ,IAAI,qCAAqC,GAAG;AAAA,IAC7E,YAAY,SAAS,QAAQ,IAAI,+BAA+B,KAAK;AAAA,EACtE;AAGA,SAAO,QAAQ,IAAI;AACnB,SAAO,QAAQ,IAAI;AACnB,SAAO,QAAQ,IAAI;AACnB,SAAO,QAAQ,IAAI;AACnB,SAAO,QAAQ,IAAI;AAInB,MAAI,cAAc;AACjB,UAAM,QAAQ,YAAY;AAAA,EAC3B;AAGA,QAAM,oBAAoB,iBAAiB,OAAO;AAClD,MAAI;AACJ,MAAI,mBAAmB;AACtB,aAAS,IAAI,qBAAqB;AAAA,EACnC,OAAO;AACN,aAAS,IAAI,mBAAmB,oBAAoB,OAAO;AAAA,EAC5D;AAGA,QAAM,iBAAkC,EAAE,eAAe,QAAW,GAAG,QAAQ;AAC/E,QAAM,qBAAqB,IAAI,yBAAyB,UAAU,QAAQ,MAAM,OAAO,GAAG,cAAc;AACxG,QAAM,gBAAgB,IAAI,cAAc,YAAY,kBAAkB,GAAG,mBAAmB,QAAQ;AACpG,SAAO,gBAAgB,oBAAoB,QAAQ,IAAI,cAAc,eAAe,MAAM,qBAAqB,CAAC;AAChH,QAAM,SAAS,cAAc,aAAa,WAAW,EAAE,MAAM,SAAS,WAAW,UAAU,EAAE,CAAC;AAC9F,QAAM,aAAa,IAAI,WAAW,MAAM;AAGxC,MAAI,cAAc;AACjB,eAAW,KAAK,+BAA+B,YAAY,IAAI;AAAA,EAChE;AACA,MAAI,kBAAkB;AACrB,eAAW,KAAK,0BAA0B,gBAAgB,YAAY;AAAA,EACvE;AAEA,QAAM,cAAc,IAAI,gBAAgB;AAGxC,QAAM,mBAAmB,IAAI,iBAAiB;AAC9C,SAAO,gBAAgB,oBAAoB,WAAW,aAAa,YAAY,kBAAkB,WAAW,CAAC;AAG7G,QAAM,aAAa,IAAI,WAAW,YAAY,gBAAgB,oBAAoB,gBAAgB;AAClG,QAAM,oBAAoB,aAAa,YAAY,YAAY,WAAW;AAC1E,SAAO,gBAAgB,oBAAoB,SAAS,iBAAiB;AAGrE,MAAI,mBAAmB;AACtB,WAAO,gBAAgB,oBAAoB,eAAe,iBAAiB;AAAA,EAC5E;AAGA,UAAQ,KAAK,QAAQ,MAAM;AAC1B,eAAW,MAAM,kBAAkB;AACnC,eAAW,QAAQ;AACnB,qBAAiB,QAAQ;AACzB,eAAW,QAAQ;AAAA,EACpB,CAAC;AACF;AAvEe;",
  "names": []
}
