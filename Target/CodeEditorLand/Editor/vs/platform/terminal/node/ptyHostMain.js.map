{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/node/ptyHostMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from \"../../../base/common/async.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { DefaultURITransformer } from \"../../../base/common/uriIpc.js\";\nimport { ProxyChannel } from \"../../../base/parts/ipc/common/ipc.js\";\nimport { Server as ChildProcessServer } from \"../../../base/parts/ipc/node/ipc.cp.js\";\nimport { Server as UtilityProcessServer } from \"../../../base/parts/ipc/node/ipc.mp.js\";\nimport { isUtilityProcess } from \"../../../base/parts/sandbox/node/electronTypes.js\";\nimport { localize } from \"../../../nls.js\";\nimport { OPTIONS, parseArgs } from \"../../environment/node/argv.js\";\nimport { NativeEnvironmentService } from \"../../environment/node/environmentService.js\";\nimport { getLogLevel } from \"../../log/common/log.js\";\nimport { LoggerChannel } from \"../../log/common/logIpc.js\";\nimport { LogService } from \"../../log/common/logService.js\";\nimport { LoggerService } from \"../../log/node/loggerService.js\";\nimport product from \"../../product/common/product.js\";\nimport type { IProductService } from \"../../product/common/productService.js\";\nimport {\n\ttype IReconnectConstants,\n\tTerminalIpcChannels,\n} from \"../common/terminal.js\";\nimport { HeartbeatService } from \"./heartbeatService.js\";\nimport { PtyService } from \"./ptyService.js\";\n\nstartPtyHost();\n\nasync function startPtyHost() {\n\t// Parse environment variables\n\tconst startupDelay = Number.parseInt(\n\t\tprocess.env.VSCODE_STARTUP_DELAY ?? \"0\",\n\t);\n\tconst simulatedLatency = Number.parseInt(process.env.VSCODE_LATENCY ?? \"0\");\n\tconst reconnectConstants: IReconnectConstants = {\n\t\tgraceTime: Number.parseInt(\n\t\t\tprocess.env.VSCODE_RECONNECT_GRACE_TIME || \"0\",\n\t\t),\n\t\tshortGraceTime: Number.parseInt(\n\t\t\tprocess.env.VSCODE_RECONNECT_SHORT_GRACE_TIME || \"0\",\n\t\t),\n\t\tscrollback: Number.parseInt(\n\t\t\tprocess.env.VSCODE_RECONNECT_SCROLLBACK || \"100\",\n\t\t),\n\t};\n\n\t// Sanitize environment\n\tdelete process.env.VSCODE_RECONNECT_GRACE_TIME;\n\tdelete process.env.VSCODE_RECONNECT_SHORT_GRACE_TIME;\n\tdelete process.env.VSCODE_RECONNECT_SCROLLBACK;\n\tdelete process.env.VSCODE_LATENCY;\n\tdelete process.env.VSCODE_STARTUP_DELAY;\n\n\t// Delay startup if needed, this must occur before RPC is setup to avoid the channel from timing\n\t// out.\n\tif (startupDelay) {\n\t\tawait timeout(startupDelay);\n\t}\n\n\t// Setup RPC\n\tconst _isUtilityProcess = isUtilityProcess(process);\n\tlet server: ChildProcessServer<string> | UtilityProcessServer;\n\tif (_isUtilityProcess) {\n\t\tserver = new UtilityProcessServer();\n\t} else {\n\t\tserver = new ChildProcessServer(TerminalIpcChannels.PtyHost);\n\t}\n\n\t// Services\n\tconst productService: IProductService = {\n\t\t_serviceBrand: undefined,\n\t\t...product,\n\t};\n\tconst environmentService = new NativeEnvironmentService(\n\t\tparseArgs(process.argv, OPTIONS),\n\t\tproductService,\n\t);\n\tconst loggerService = new LoggerService(\n\t\tgetLogLevel(environmentService),\n\t\tenvironmentService.logsHome,\n\t);\n\tserver.registerChannel(\n\t\tTerminalIpcChannels.Logger,\n\t\tnew LoggerChannel(loggerService, () => DefaultURITransformer),\n\t);\n\tconst logger = loggerService.createLogger(\"ptyhost\", {\n\t\tname: localize(\"ptyHost\", \"Pty Host\"),\n\t});\n\tconst logService = new LogService(logger);\n\n\t// Log developer config\n\tif (startupDelay) {\n\t\tlogService.warn(`Pty Host startup is delayed ${startupDelay}ms`);\n\t}\n\tif (simulatedLatency) {\n\t\tlogService.warn(`Pty host is simulating ${simulatedLatency}ms latency`);\n\t}\n\n\tconst disposables = new DisposableStore();\n\n\t// Heartbeat responsiveness tracking\n\tconst heartbeatService = new HeartbeatService();\n\tserver.registerChannel(\n\t\tTerminalIpcChannels.Heartbeat,\n\t\tProxyChannel.fromService(heartbeatService, disposables),\n\t);\n\n\t// Init pty service\n\tconst ptyService = new PtyService(\n\t\tlogService,\n\t\tproductService,\n\t\treconnectConstants,\n\t\tsimulatedLatency,\n\t);\n\tconst ptyServiceChannel = ProxyChannel.fromService(ptyService, disposables);\n\tserver.registerChannel(TerminalIpcChannels.PtyHost, ptyServiceChannel);\n\n\t// Register a channel for direct communication via Message Port\n\tif (_isUtilityProcess) {\n\t\tserver.registerChannel(\n\t\t\tTerminalIpcChannels.PtyHostWindow,\n\t\t\tptyServiceChannel,\n\t\t);\n\t}\n\n\t// Clean up\n\tprocess.once(\"exit\", () => {\n\t\tlogService.trace(\"Pty host exiting\");\n\t\tlogService.dispose();\n\t\theartbeatService.dispose();\n\t\tptyService.dispose();\n\t});\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,oBAAoB;AAC7B,SAAS,UAAU,0BAA0B;AAC7C,SAAS,UAAU,4BAA4B;AAC/C,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,SAAS,iBAAiB;AACnC,SAAS,gCAAgC;AACzC,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,kBAAkB;AAC3B,SAAS,qBAAqB;AAC9B,OAAO,aAAa;AAEpB;AAAA,EAEC;AAAA,OACM;AACP,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAE3B,aAAa;AAEb,eAAe,eAAe;AAE7B,QAAM,eAAe,OAAO;AAAA,IAC3B,QAAQ,IAAI,wBAAwB;AAAA,EACrC;AACA,QAAM,mBAAmB,OAAO,SAAS,QAAQ,IAAI,kBAAkB,GAAG;AAC1E,QAAM,qBAA0C;AAAA,IAC/C,WAAW,OAAO;AAAA,MACjB,QAAQ,IAAI,+BAA+B;AAAA,IAC5C;AAAA,IACA,gBAAgB,OAAO;AAAA,MACtB,QAAQ,IAAI,qCAAqC;AAAA,IAClD;AAAA,IACA,YAAY,OAAO;AAAA,MAClB,QAAQ,IAAI,+BAA+B;AAAA,IAC5C;AAAA,EACD;AAGA,SAAO,QAAQ,IAAI;AACnB,SAAO,QAAQ,IAAI;AACnB,SAAO,QAAQ,IAAI;AACnB,SAAO,QAAQ,IAAI;AACnB,SAAO,QAAQ,IAAI;AAInB,MAAI,cAAc;AACjB,UAAM,QAAQ,YAAY;AAAA,EAC3B;AAGA,QAAM,oBAAoB,iBAAiB,OAAO;AAClD,MAAI;AACJ,MAAI,mBAAmB;AACtB,aAAS,IAAI,qBAAqB;AAAA,EACnC,OAAO;AACN,aAAS,IAAI,mBAAmB,oBAAoB,OAAO;AAAA,EAC5D;AAGA,QAAM,iBAAkC;AAAA,IACvC,eAAe;AAAA,IACf,GAAG;AAAA,EACJ;AACA,QAAM,qBAAqB,IAAI;AAAA,IAC9B,UAAU,QAAQ,MAAM,OAAO;AAAA,IAC/B;AAAA,EACD;AACA,QAAM,gBAAgB,IAAI;AAAA,IACzB,YAAY,kBAAkB;AAAA,IAC9B,mBAAmB;AAAA,EACpB;AACA,SAAO;AAAA,IACN,oBAAoB;AAAA,IACpB,IAAI,cAAc,eAAe,MAAM,qBAAqB;AAAA,EAC7D;AACA,QAAM,SAAS,cAAc,aAAa,WAAW;AAAA,IACpD,MAAM,SAAS,WAAW,UAAU;AAAA,EACrC,CAAC;AACD,QAAM,aAAa,IAAI,WAAW,MAAM;AAGxC,MAAI,cAAc;AACjB,eAAW,KAAK,+BAA+B,YAAY,IAAI;AAAA,EAChE;AACA,MAAI,kBAAkB;AACrB,eAAW,KAAK,0BAA0B,gBAAgB,YAAY;AAAA,EACvE;AAEA,QAAM,cAAc,IAAI,gBAAgB;AAGxC,QAAM,mBAAmB,IAAI,iBAAiB;AAC9C,SAAO;AAAA,IACN,oBAAoB;AAAA,IACpB,aAAa,YAAY,kBAAkB,WAAW;AAAA,EACvD;AAGA,QAAM,aAAa,IAAI;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,QAAM,oBAAoB,aAAa,YAAY,YAAY,WAAW;AAC1E,SAAO,gBAAgB,oBAAoB,SAAS,iBAAiB;AAGrE,MAAI,mBAAmB;AACtB,WAAO;AAAA,MACN,oBAAoB;AAAA,MACpB;AAAA,IACD;AAAA,EACD;AAGA,UAAQ,KAAK,QAAQ,MAAM;AAC1B,eAAW,MAAM,kBAAkB;AACnC,eAAW,QAAQ;AACnB,qBAAiB,QAAQ;AACzB,eAAW,QAAQ;AAAA,EACpB,CAAC;AACF;AAxGe;",
  "names": []
}
