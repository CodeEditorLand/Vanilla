var u=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var l=(s,o,e,i)=>{for(var t=i>1?void 0:i?_(o,e):o,r=s.length-1,n;r>=0;r--)(n=s[r])&&(t=(i?n(o,e,t):n(t))||t);return i&&t&&u(o,e,t),t},a=(s,o)=>(e,i)=>o(e,i,s);import"electron";import{Emitter as p}from"../../../../vs/base/common/event.js";import{Disposable as f,DisposableStore as h,toDisposable as m}from"../../../../vs/base/common/lifecycle.js";import{Schemas as C}from"../../../../vs/base/common/network.js";import{deepClone as g}from"../../../../vs/base/common/objects.js";import{Client as P}from"../../../../vs/base/parts/ipc/electron-main/ipc.mp.js";import{validatedIpcMain as v}from"../../../../vs/base/parts/ipc/electron-main/ipcMain.js";import{IConfigurationService as E}from"../../../../vs/platform/configuration/common/configuration.js";import{IEnvironmentMainService as M}from"../../../../vs/platform/environment/electron-main/environmentMainService.js";import{parsePtyHostDebugPort as I}from"../../../../vs/platform/environment/node/environmentService.js";import{ILifecycleMainService as D}from"../../../../vs/platform/lifecycle/electron-main/lifecycleMainService.js";import{ILogService as O}from"../../../../vs/platform/log/common/log.js";import{NullTelemetryService as R}from"../../../../vs/platform/telemetry/common/telemetryUtils.js";import{TerminalSettingId as y}from"../../../../vs/platform/terminal/common/terminal.js";import"../../../../vs/platform/terminal/node/ptyHost.js";import{UtilityProcess as H}from"../../../../vs/platform/utilityProcess/electron-main/utilityProcess.js";let c=class extends f{constructor(e,i,t,r,n){super();this._reconnectConstants=e;this._configurationService=i;this._environmentMainService=t;this._lifecycleMainService=r;this._logService=n;this._register(this._lifecycleMainService.onWillShutdown(()=>this._onWillShutdown.fire())),v.on("vscode:createPtyHostMessageChannel",(S,d)=>this._onWindowConnection(S,d)),this._register(m(()=>{v.removeHandler("vscode:createPtyHostMessageChannel")}))}utilityProcess=void 0;_onRequestConnection=new p;onRequestConnection=this._onRequestConnection.event;_onWillShutdown=new p;onWillShutdown=this._onWillShutdown.event;start(){this.utilityProcess=new H(this._logService,R,this._lifecycleMainService);const e=I(this._environmentMainService.args,this._environmentMainService.isBuilt),i=e.port?["--nolazy",`--inspect${e.break?"-brk":""}=${e.port}`]:void 0;this.utilityProcess.start({type:"ptyHost",entryPoint:"vs/platform/terminal/node/ptyHostMain",execArgv:i,args:["--logsPath",this._environmentMainService.logsHome.with({scheme:C.file}).fsPath],env:this._createPtyHostConfiguration()});const t=this.utilityProcess.connect(),r=new P(t,"ptyHost"),n=new h;return n.add(r),n.add(m(()=>{this.utilityProcess?.kill(),this.utilityProcess?.dispose(),this.utilityProcess=void 0})),{client:r,store:n,onDidProcessExit:this.utilityProcess.onExit}}_createPtyHostConfiguration(){this._environmentMainService.unsetSnapExportedVariables();const e={...g(process.env),VSCODE_AMD_ENTRYPOINT:"vs/platform/terminal/node/ptyHostMain",VSCODE_PIPE_LOGGING:"true",VSCODE_VERBOSE_LOGGING:"true",VSCODE_RECONNECT_GRACE_TIME:String(this._reconnectConstants.graceTime),VSCODE_RECONNECT_SHORT_GRACE_TIME:String(this._reconnectConstants.shortGraceTime),VSCODE_RECONNECT_SCROLLBACK:String(this._reconnectConstants.scrollback)},i=this._configurationService.getValue(y.DeveloperPtyHostLatency);i&&typeof i=="number"&&(e.VSCODE_LATENCY=String(i));const t=this._configurationService.getValue(y.DeveloperPtyHostStartupDelay);return t&&typeof t=="number"&&(e.VSCODE_STARTUP_DELAY=String(t)),this._environmentMainService.restoreSnapExportedVariables(),e}_onWindowConnection(e,i){this._onRequestConnection.fire();const t=this.utilityProcess.connect();if(e.sender.isDestroyed()){t.close();return}e.sender.postMessage("vscode:createPtyHostMessageChannelResult",i,[t])}};c=l([a(1,E),a(2,M),a(3,D),a(4,O)],c);export{c as ElectronPtyHostStarter};
