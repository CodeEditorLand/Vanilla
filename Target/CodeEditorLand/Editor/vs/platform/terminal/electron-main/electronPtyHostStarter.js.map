{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/electron-main/electronPtyHostStarter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEnvironmentMainService } from '../../environment/electron-main/environmentMainService.js';\nimport { parsePtyHostDebugPort } from '../../environment/node/environmentService.js';\nimport { ILifecycleMainService } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { NullTelemetryService } from '../../telemetry/common/telemetryUtils.js';\nimport { IReconnectConstants, TerminalSettingId } from '../common/terminal.js';\nimport { IPtyHostConnection, IPtyHostStarter } from '../node/ptyHost.js';\nimport { UtilityProcess } from '../../utilityProcess/electron-main/utilityProcess.js';\nimport { Client as MessagePortClient } from '../../../base/parts/ipc/electron-main/ipc.mp.js';\nimport { IpcMainEvent } from 'electron';\nimport { validatedIpcMain } from '../../../base/parts/ipc/electron-main/ipcMain.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { deepClone } from '../../../base/common/objects.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { Schemas } from '../../../base/common/network.js';\n\nexport class ElectronPtyHostStarter extends Disposable implements IPtyHostStarter {\n\n\tprivate utilityProcess: UtilityProcess | undefined = undefined;\n\n\tprivate readonly _onRequestConnection = new Emitter<void>();\n\treadonly onRequestConnection = this._onRequestConnection.event;\n\tprivate readonly _onWillShutdown = new Emitter<void>();\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tconstructor(\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IEnvironmentMainService private readonly _environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService private readonly _lifecycleMainService: ILifecycleMainService,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._lifecycleMainService.onWillShutdown(() => this._onWillShutdown.fire()));\n\t\t// Listen for new windows to establish connection directly to pty host\n\t\tvalidatedIpcMain.on('vscode:createPtyHostMessageChannel', (e, nonce) => this._onWindowConnection(e, nonce));\n\t\tthis._register(toDisposable(() => {\n\t\t\tvalidatedIpcMain.removeHandler('vscode:createPtyHostMessageChannel');\n\t\t}));\n\t}\n\n\tstart(): IPtyHostConnection {\n\t\tthis.utilityProcess = new UtilityProcess(this._logService, NullTelemetryService, this._lifecycleMainService);\n\n\t\tconst inspectParams = parsePtyHostDebugPort(this._environmentMainService.args, this._environmentMainService.isBuilt);\n\t\tconst execArgv = inspectParams.port ? [\n\t\t\t'--nolazy',\n\t\t\t`--inspect${inspectParams.break ? '-brk' : ''}=${inspectParams.port}`\n\t\t] : undefined;\n\n\t\tthis.utilityProcess.start({\n\t\t\ttype: 'ptyHost',\n\t\t\tentryPoint: 'vs/platform/terminal/node/ptyHostMain',\n\t\t\texecArgv,\n\t\t\targs: ['--logsPath', this._environmentMainService.logsHome.with({ scheme: Schemas.file }).fsPath],\n\t\t\tenv: this._createPtyHostConfiguration()\n\t\t});\n\n\t\tconst port = this.utilityProcess.connect();\n\t\tconst client = new MessagePortClient(port, 'ptyHost');\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(client);\n\t\tstore.add(toDisposable(() => {\n\t\t\tthis.utilityProcess?.kill();\n\t\t\tthis.utilityProcess?.dispose();\n\t\t\tthis.utilityProcess = undefined;\n\t\t}));\n\n\t\treturn {\n\t\t\tclient,\n\t\t\tstore,\n\t\t\tonDidProcessExit: this.utilityProcess.onExit\n\t\t};\n\t}\n\n\tprivate _createPtyHostConfiguration() {\n\t\tthis._environmentMainService.unsetSnapExportedVariables();\n\t\tconst config: { [key: string]: string } = {\n\t\t\t...deepClone(process.env),\n\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/platform/terminal/node/ptyHostMain',\n\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\tVSCODE_VERBOSE_LOGGING: 'true', // transmit console logs from server to client,\n\t\t\tVSCODE_RECONNECT_GRACE_TIME: String(this._reconnectConstants.graceTime),\n\t\t\tVSCODE_RECONNECT_SHORT_GRACE_TIME: String(this._reconnectConstants.shortGraceTime),\n\t\t\tVSCODE_RECONNECT_SCROLLBACK: String(this._reconnectConstants.scrollback),\n\t\t};\n\t\tconst simulatedLatency = this._configurationService.getValue(TerminalSettingId.DeveloperPtyHostLatency);\n\t\tif (simulatedLatency && typeof simulatedLatency === 'number') {\n\t\t\tconfig.VSCODE_LATENCY = String(simulatedLatency);\n\t\t}\n\t\tconst startupDelay = this._configurationService.getValue(TerminalSettingId.DeveloperPtyHostStartupDelay);\n\t\tif (startupDelay && typeof startupDelay === 'number') {\n\t\t\tconfig.VSCODE_STARTUP_DELAY = String(startupDelay);\n\t\t}\n\t\tthis._environmentMainService.restoreSnapExportedVariables();\n\t\treturn config;\n\t}\n\n\tprivate _onWindowConnection(e: IpcMainEvent, nonce: string) {\n\t\tthis._onRequestConnection.fire();\n\n\t\tconst port = this.utilityProcess!.connect();\n\n\t\t// Check back if the requesting window meanwhile closed\n\t\t// Since shared process is delayed on startup there is\n\t\t// a chance that the window close before the shared process\n\t\t// was ready for a connection.\n\n\t\tif (e.sender.isDestroyed()) {\n\t\t\tport.close();\n\t\t\treturn;\n\t\t}\n\n\t\te.sender.postMessage('vscode:createPtyHostMessageChannelResult', nonce, [port]);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
