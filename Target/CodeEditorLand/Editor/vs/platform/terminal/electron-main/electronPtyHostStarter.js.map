{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/terminal/electron-main/electronPtyHostStarter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IpcMainEvent } from \"electron\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { deepClone } from \"../../../base/common/objects.js\";\nimport { Client as MessagePortClient } from \"../../../base/parts/ipc/electron-main/ipc.mp.js\";\nimport { validatedIpcMain } from \"../../../base/parts/ipc/electron-main/ipcMain.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IEnvironmentMainService } from \"../../environment/electron-main/environmentMainService.js\";\nimport { parsePtyHostDebugPort } from \"../../environment/node/environmentService.js\";\nimport { ILifecycleMainService } from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { NullTelemetryService } from \"../../telemetry/common/telemetryUtils.js\";\nimport { UtilityProcess } from \"../../utilityProcess/electron-main/utilityProcess.js\";\nimport {\n\ttype IReconnectConstants,\n\tTerminalSettingId,\n} from \"../common/terminal.js\";\nimport type { IPtyHostConnection, IPtyHostStarter } from \"../node/ptyHost.js\";\n\nexport class ElectronPtyHostStarter\n\textends Disposable\n\timplements IPtyHostStarter\n{\n\tprivate utilityProcess: UtilityProcess | undefined = undefined;\n\n\tprivate readonly _onRequestConnection = new Emitter<void>();\n\treadonly onRequestConnection = this._onRequestConnection.event;\n\tprivate readonly _onWillShutdown = new Emitter<void>();\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tconstructor(\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@IEnvironmentMainService\n\t\tprivate readonly _environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService\n\t\tprivate readonly _lifecycleMainService: ILifecycleMainService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tthis._lifecycleMainService.onWillShutdown(() =>\n\t\t\t\tthis._onWillShutdown.fire(),\n\t\t\t),\n\t\t);\n\t\t// Listen for new windows to establish connection directly to pty host\n\t\tvalidatedIpcMain.on(\"vscode:createPtyHostMessageChannel\", (e, nonce) =>\n\t\t\tthis._onWindowConnection(e, nonce),\n\t\t);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tvalidatedIpcMain.removeHandler(\n\t\t\t\t\t\"vscode:createPtyHostMessageChannel\",\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tstart(): IPtyHostConnection {\n\t\tthis.utilityProcess = new UtilityProcess(\n\t\t\tthis._logService,\n\t\t\tNullTelemetryService,\n\t\t\tthis._lifecycleMainService,\n\t\t);\n\n\t\tconst inspectParams = parsePtyHostDebugPort(\n\t\t\tthis._environmentMainService.args,\n\t\t\tthis._environmentMainService.isBuilt,\n\t\t);\n\t\tconst execArgv = inspectParams.port\n\t\t\t? [\n\t\t\t\t\t\"--nolazy\",\n\t\t\t\t\t`--inspect${inspectParams.break ? \"-brk\" : \"\"}=${inspectParams.port}`,\n\t\t\t\t]\n\t\t\t: undefined;\n\n\t\tthis.utilityProcess.start({\n\t\t\ttype: \"ptyHost\",\n\t\t\tentryPoint: \"vs/platform/terminal/node/ptyHostMain\",\n\t\t\texecArgv,\n\t\t\targs: [\n\t\t\t\t\"--logsPath\",\n\t\t\t\tthis._environmentMainService.logsHome.with({\n\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t}).fsPath,\n\t\t\t],\n\t\t\tenv: this._createPtyHostConfiguration(),\n\t\t});\n\n\t\tconst port = this.utilityProcess.connect();\n\t\tconst client = new MessagePortClient(port, \"ptyHost\");\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(client);\n\t\tstore.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis.utilityProcess?.kill();\n\t\t\t\tthis.utilityProcess?.dispose();\n\t\t\t\tthis.utilityProcess = undefined;\n\t\t\t}),\n\t\t);\n\n\t\treturn {\n\t\t\tclient,\n\t\t\tstore,\n\t\t\tonDidProcessExit: this.utilityProcess.onExit,\n\t\t};\n\t}\n\n\tprivate _createPtyHostConfiguration() {\n\t\tthis._environmentMainService.unsetSnapExportedVariables();\n\t\tconst config: { [key: string]: string } = {\n\t\t\t...deepClone(process.env),\n\t\t\tVSCODE_AMD_ENTRYPOINT: \"vs/platform/terminal/node/ptyHostMain\",\n\t\t\tVSCODE_PIPE_LOGGING: \"true\",\n\t\t\tVSCODE_VERBOSE_LOGGING: \"true\", // transmit console logs from server to client,\n\t\t\tVSCODE_RECONNECT_GRACE_TIME: String(\n\t\t\t\tthis._reconnectConstants.graceTime,\n\t\t\t),\n\t\t\tVSCODE_RECONNECT_SHORT_GRACE_TIME: String(\n\t\t\t\tthis._reconnectConstants.shortGraceTime,\n\t\t\t),\n\t\t\tVSCODE_RECONNECT_SCROLLBACK: String(\n\t\t\t\tthis._reconnectConstants.scrollback,\n\t\t\t),\n\t\t};\n\t\tconst simulatedLatency = this._configurationService.getValue(\n\t\t\tTerminalSettingId.DeveloperPtyHostLatency,\n\t\t);\n\t\tif (simulatedLatency && typeof simulatedLatency === \"number\") {\n\t\t\tconfig.VSCODE_LATENCY = String(simulatedLatency);\n\t\t}\n\t\tconst startupDelay = this._configurationService.getValue(\n\t\t\tTerminalSettingId.DeveloperPtyHostStartupDelay,\n\t\t);\n\t\tif (startupDelay && typeof startupDelay === \"number\") {\n\t\t\tconfig.VSCODE_STARTUP_DELAY = String(startupDelay);\n\t\t}\n\t\tthis._environmentMainService.restoreSnapExportedVariables();\n\t\treturn config;\n\t}\n\n\tprivate _onWindowConnection(e: IpcMainEvent, nonce: string) {\n\t\tthis._onRequestConnection.fire();\n\n\t\tconst port = this.utilityProcess!.connect();\n\n\t\t// Check back if the requesting window meanwhile closed\n\t\t// Since shared process is delayed on startup there is\n\t\t// a chance that the window close before the shared process\n\t\t// was ready for a connection.\n\n\t\tif (e.sender.isDestroyed()) {\n\t\t\tport.close();\n\t\t\treturn;\n\t\t}\n\n\t\te.sender.postMessage(\n\t\t\t\"vscode:createPtyHostMessageChannelResult\",\n\t\t\tnonce,\n\t\t\t[port],\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
