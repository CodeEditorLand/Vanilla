{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/diagnostics/common/diagnostics.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { ProcessItem } from '../../../base/common/processes.js';\nimport { UriComponents } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IWorkspace } from '../../workspace/common/workspace.js';\n\nexport const ID = 'diagnosticsService';\nexport const IDiagnosticsService = createDecorator<IDiagnosticsService>(ID);\n\nexport interface IDiagnosticsService {\n\treadonly _serviceBrand: undefined;\n\n\tgetPerformanceInfo(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<PerformanceInfo>;\n\tgetSystemInfo(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<SystemInfo>;\n\tgetDiagnostics(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<string>;\n\tgetWorkspaceFileExtensions(workspace: IWorkspace): Promise<{ extensions: string[] }>;\n\treportWorkspaceStats(workspace: IWorkspaceInformation): Promise<void>;\n}\n\nexport interface IMachineInfo {\n\tos: string;\n\tcpus?: string;\n\tmemory: string;\n\tvmHint: string;\n\tlinuxEnv?: ILinuxEnv;\n}\n\nexport interface ILinuxEnv {\n\tdesktopSession?: string;\n\txdgSessionDesktop?: string;\n\txdgCurrentDesktop?: string;\n\txdgSessionType?: string;\n}\n\nexport interface IDiagnosticInfo {\n\tmachineInfo: IMachineInfo;\n\tworkspaceMetadata?: IStringDictionary<WorkspaceStats>;\n\tprocesses?: ProcessItem;\n}\nexport interface SystemInfo extends IMachineInfo {\n\tprocessArgs: string;\n\tgpuStatus: any;\n\tscreenReader: string;\n\tremoteData: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[];\n\tload?: string;\n}\n\nexport interface IRemoteDiagnosticInfo extends IDiagnosticInfo {\n\thostName: string;\n\tlatency?: {\n\t\tcurrent: number;\n\t\taverage: number;\n\t};\n}\n\nexport interface IRemoteDiagnosticError {\n\thostName: string;\n\terrorMessage: string;\n}\n\nexport interface IDiagnosticInfoOptions {\n\tincludeProcesses?: boolean;\n\tfolders?: UriComponents[];\n\tincludeExtensions?: boolean;\n}\n\nexport interface WorkspaceStatItem {\n\tname: string;\n\tcount: number;\n}\n\nexport interface WorkspaceStats {\n\tfileTypes: WorkspaceStatItem[];\n\tconfigFiles: WorkspaceStatItem[];\n\tfileCount: number;\n\tmaxFilesReached: boolean;\n\tlaunchConfigFiles: WorkspaceStatItem[];\n\ttotalScanTime: number;\n\ttotalReaddirCount: number;\n}\n\nexport interface PerformanceInfo {\n\tprocessInfo?: string;\n\tworkspaceInfo?: string;\n}\n\nexport interface IWorkspaceInformation extends IWorkspace {\n\ttelemetryId: string | undefined;\n\trendererSessionId: string;\n}\n\nexport function isRemoteDiagnosticError(x: any): x is IRemoteDiagnosticError {\n\treturn !!x.hostName && !!x.errorMessage;\n}\n\nexport class NullDiagnosticsService implements IDiagnosticsService {\n\t_serviceBrand: undefined;\n\n\tasync getPerformanceInfo(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<PerformanceInfo> {\n\t\treturn {};\n\t}\n\n\tasync getSystemInfo(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<SystemInfo> {\n\t\treturn {\n\t\t\tprocessArgs: 'nullProcessArgs',\n\t\t\tgpuStatus: 'nullGpuStatus',\n\t\t\tscreenReader: 'nullScreenReader',\n\t\t\tremoteData: [],\n\t\t\tos: 'nullOs',\n\t\t\tmemory: 'nullMemory',\n\t\t\tvmHint: 'nullVmHint',\n\t\t};\n\t}\n\n\tasync getDiagnostics(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<string> {\n\t\treturn '';\n\t}\n\n\tasync getWorkspaceFileExtensions(workspace: IWorkspace): Promise<{ extensions: string[] }> {\n\t\treturn { extensions: [] };\n\t}\n\n\tasync reportWorkspaceStats(workspace: IWorkspaceInformation): Promise<void> { }\n\n}\n\nexport interface IWindowDiagnostics {\n\treadonly id: number;\n\treadonly pid: number;\n\treadonly title: string;\n\treadonly folderURIs: UriComponents[];\n\treadonly remoteAuthority?: string;\n}\n\nexport interface IProcessDiagnostics {\n\treadonly pid: number;\n\treadonly name: string;\n}\n\nexport interface IMainProcessDiagnostics {\n\treadonly mainPID: number;\n\treadonly mainArguments: string[]; // All arguments after argv[0], the exec path\n\treadonly windows: IWindowDiagnostics[];\n\treadonly pidToNames: IProcessDiagnostics[];\n\treadonly screenReader: boolean;\n\treadonly gpuFeatureStatus: any;\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,SAAS,kBAAkB;AAEpB,MAAM,KAAK;AACX,MAAM,sBAAsB,gBAAqC,EAAE;AAoFnE,SAAS,wBAAwB,GAAqC;AAC5E,SAAO,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,EAAE;AAC5B;AAFgB;AAIT,MAAM,uBAAsD;AAAA,EApGnE,OAoGmE;AAAA;AAAA;AAAA,EAClE;AAAA,EAEA,MAAM,mBAAmB,iBAA0C,YAA0F;AAC5J,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAM,cAAc,iBAA0C,YAAqF;AAClJ,WAAO;AAAA,MACN,aAAa;AAAA,MACb,WAAW;AAAA,MACX,cAAc;AAAA,MACd,YAAY,CAAC;AAAA,MACb,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,QAAQ;AAAA,IACT;AAAA,EACD;AAAA,EAEA,MAAM,eAAe,iBAA0C,YAAiF;AAC/I,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,2BAA2B,WAA0D;AAC1F,WAAO,EAAE,YAAY,CAAC,EAAE;AAAA,EACzB;AAAA,EAEA,MAAM,qBAAqB,WAAiD;AAAA,EAAE;AAE/E;",
  "names": []
}
