{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/diagnostics/electron-main/diagnosticsMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow, type Event as IpcEvent, app } from \"electron\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { assertIsDefined } from \"../../../base/common/types.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { validatedIpcMain } from \"../../../base/parts/ipc/electron-main/ipcMain.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { UtilityProcess } from \"../../utilityProcess/electron-main/utilityProcess.js\";\nimport type { ICodeWindow } from \"../../window/electron-main/window.js\";\nimport { IWindowsMainService } from \"../../windows/electron-main/windows.js\";\nimport {\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\nimport { IWorkspacesManagementMainService } from \"../../workspaces/electron-main/workspacesManagementMainService.js\";\nimport type {\n\tIDiagnosticInfo,\n\tIDiagnosticInfoOptions,\n\tIMainProcessDiagnostics,\n\tIProcessDiagnostics,\n\tIRemoteDiagnosticError,\n\tIRemoteDiagnosticInfo,\n\tIWindowDiagnostics,\n} from \"../common/diagnostics.js\";\n\nexport const ID = \"diagnosticsMainService\";\nexport const IDiagnosticsMainService =\n\tcreateDecorator<IDiagnosticsMainService>(ID);\n\nexport interface IRemoteDiagnosticOptions {\n\tincludeProcesses?: boolean;\n\tincludeWorkspaceMetadata?: boolean;\n}\n\nexport interface IDiagnosticsMainService {\n\treadonly _serviceBrand: undefined;\n\tgetRemoteDiagnostics(\n\t\toptions: IRemoteDiagnosticOptions,\n\t): Promise<(IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]>;\n\tgetMainDiagnostics(): Promise<IMainProcessDiagnostics>;\n}\n\nexport class DiagnosticsMainService implements IDiagnosticsMainService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IWindowsMainService\n\t\tprivate readonly windowsMainService: IWindowsMainService,\n\t\t@IWorkspacesManagementMainService\n\t\tprivate readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {}\n\n\tasync getRemoteDiagnostics(\n\t\toptions: IRemoteDiagnosticOptions,\n\t): Promise<(IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]> {\n\t\tconst windows = this.windowsMainService.getWindows();\n\t\tconst diagnostics: Array<\n\t\t\tIDiagnosticInfo | IRemoteDiagnosticError | undefined\n\t\t> = await Promise.all(\n\t\t\twindows.map(async (window) => {\n\t\t\t\tconst remoteAuthority = window.remoteAuthority;\n\t\t\t\tif (!remoteAuthority) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst replyChannel = `vscode:getDiagnosticInfoResponse${window.id}`;\n\t\t\t\tconst args: IDiagnosticInfoOptions = {\n\t\t\t\t\tincludeProcesses: options.includeProcesses,\n\t\t\t\t\tfolders: options.includeWorkspaceMetadata\n\t\t\t\t\t\t? await this.getFolderURIs(window)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t};\n\n\t\t\t\treturn new Promise<IDiagnosticInfo | IRemoteDiagnosticError>(\n\t\t\t\t\t(resolve) => {\n\t\t\t\t\t\twindow.sendWhenReady(\n\t\t\t\t\t\t\t\"vscode:getDiagnosticInfo\",\n\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t\t{ replyChannel, args },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tvalidatedIpcMain.once(\n\t\t\t\t\t\t\treplyChannel,\n\t\t\t\t\t\t\t(_: IpcEvent, data: IRemoteDiagnosticInfo) => {\n\t\t\t\t\t\t\t\t// No data is returned if getting the connection fails.\n\t\t\t\t\t\t\t\tif (!data) {\n\t\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t\thostName: remoteAuthority,\n\t\t\t\t\t\t\t\t\t\terrorMessage: `Unable to resolve connection to '${remoteAuthority}'.`,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\thostName: remoteAuthority,\n\t\t\t\t\t\t\t\terrorMessage: `Connection to '${remoteAuthority}' could not be established`,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, 5000);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\treturn diagnostics.filter(\n\t\t\t(x): x is IRemoteDiagnosticInfo | IRemoteDiagnosticError => !!x,\n\t\t);\n\t}\n\n\tasync getMainDiagnostics(): Promise<IMainProcessDiagnostics> {\n\t\tthis.logService.trace(\n\t\t\t\"Received request for main process info from other instance.\",\n\t\t);\n\n\t\tconst windows: IWindowDiagnostics[] = [];\n\t\tfor (const window of BrowserWindow.getAllWindows()) {\n\t\t\tconst codeWindow = this.windowsMainService.getWindowById(window.id);\n\t\t\tif (codeWindow) {\n\t\t\t\twindows.push(await this.codeWindowToInfo(codeWindow));\n\t\t\t} else {\n\t\t\t\twindows.push(this.browserWindowToInfo(window));\n\t\t\t}\n\t\t}\n\n\t\tconst pidToNames: IProcessDiagnostics[] = [];\n\t\tfor (const { pid, name } of UtilityProcess.getAll()) {\n\t\t\tpidToNames.push({ pid, name });\n\t\t}\n\n\t\treturn {\n\t\t\tmainPID: process.pid,\n\t\t\tmainArguments: process.argv.slice(1),\n\t\t\twindows,\n\t\t\tpidToNames,\n\t\t\tscreenReader: !!app.accessibilitySupportEnabled,\n\t\t\tgpuFeatureStatus: app.getGPUFeatureStatus(),\n\t\t};\n\t}\n\n\tprivate async codeWindowToInfo(\n\t\twindow: ICodeWindow,\n\t): Promise<IWindowDiagnostics> {\n\t\tconst folderURIs = await this.getFolderURIs(window);\n\t\tconst win = assertIsDefined(window.win);\n\n\t\treturn this.browserWindowToInfo(\n\t\t\twin,\n\t\t\tfolderURIs,\n\t\t\twindow.remoteAuthority,\n\t\t);\n\t}\n\n\tprivate browserWindowToInfo(\n\t\twindow: BrowserWindow,\n\t\tfolderURIs: URI[] = [],\n\t\tremoteAuthority?: string,\n\t): IWindowDiagnostics {\n\t\treturn {\n\t\t\tid: window.id,\n\t\t\tpid: window.webContents.getOSProcessId(),\n\t\t\ttitle: window.getTitle(),\n\t\t\tfolderURIs,\n\t\t\tremoteAuthority,\n\t\t};\n\t}\n\n\tprivate async getFolderURIs(window: ICodeWindow): Promise<URI[]> {\n\t\tconst folderURIs: URI[] = [];\n\n\t\tconst workspace = window.openedWorkspace;\n\t\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\tfolderURIs.push(workspace.uri);\n\t\t} else if (isWorkspaceIdentifier(workspace)) {\n\t\t\tconst resolvedWorkspace =\n\t\t\t\tawait this.workspacesManagementMainService.resolveLocalWorkspace(\n\t\t\t\t\tworkspace.configPath,\n\t\t\t\t); // workspace folders can only be shown for local (resolved) workspaces\n\t\t\tif (resolvedWorkspace) {\n\t\t\t\tconst rootFolders = resolvedWorkspace.folders;\n\t\t\t\trootFolders.forEach((root) => {\n\t\t\t\t\tfolderURIs.push(root.uri);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn folderURIs;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
