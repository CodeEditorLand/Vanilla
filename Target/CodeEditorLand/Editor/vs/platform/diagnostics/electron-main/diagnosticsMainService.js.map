{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/diagnostics/electron-main/diagnosticsMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, BrowserWindow, Event as IpcEvent } from 'electron';\nimport { validatedIpcMain } from '../../../base/parts/ipc/electron-main/ipcMain.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IDiagnosticInfo, IDiagnosticInfoOptions, IMainProcessDiagnostics, IProcessDiagnostics, IRemoteDiagnosticError, IRemoteDiagnosticInfo, IWindowDiagnostics } from '../common/diagnostics.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ICodeWindow } from '../../window/electron-main/window.js';\nimport { IWindowsMainService } from '../../windows/electron-main/windows.js';\nimport { isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier } from '../../workspace/common/workspace.js';\nimport { IWorkspacesManagementMainService } from '../../workspaces/electron-main/workspacesManagementMainService.js';\nimport { assertIsDefined } from '../../../base/common/types.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { UtilityProcess } from '../../utilityProcess/electron-main/utilityProcess.js';\n\nexport const ID = 'diagnosticsMainService';\nexport const IDiagnosticsMainService = createDecorator<IDiagnosticsMainService>(ID);\n\nexport interface IRemoteDiagnosticOptions {\n\tincludeProcesses?: boolean;\n\tincludeWorkspaceMetadata?: boolean;\n}\n\nexport interface IDiagnosticsMainService {\n\treadonly _serviceBrand: undefined;\n\tgetRemoteDiagnostics(options: IRemoteDiagnosticOptions): Promise<(IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]>;\n\tgetMainDiagnostics(): Promise<IMainProcessDiagnostics>;\n}\n\nexport class DiagnosticsMainService implements IDiagnosticsMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@ILogService private readonly logService: ILogService\n\t) { }\n\n\tasync getRemoteDiagnostics(options: IRemoteDiagnosticOptions): Promise<(IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]> {\n\t\tconst windows = this.windowsMainService.getWindows();\n\t\tconst diagnostics: Array<IDiagnosticInfo | IRemoteDiagnosticError | undefined> = await Promise.all(windows.map(async window => {\n\t\t\tconst remoteAuthority = window.remoteAuthority;\n\t\t\tif (!remoteAuthority) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst replyChannel = `vscode:getDiagnosticInfoResponse${window.id}`;\n\t\t\tconst args: IDiagnosticInfoOptions = {\n\t\t\t\tincludeProcesses: options.includeProcesses,\n\t\t\t\tfolders: options.includeWorkspaceMetadata ? await this.getFolderURIs(window) : undefined\n\t\t\t};\n\n\t\t\treturn new Promise<IDiagnosticInfo | IRemoteDiagnosticError>(resolve => {\n\t\t\t\twindow.sendWhenReady('vscode:getDiagnosticInfo', CancellationToken.None, { replyChannel, args });\n\n\t\t\t\tvalidatedIpcMain.once(replyChannel, (_: IpcEvent, data: IRemoteDiagnosticInfo) => {\n\t\t\t\t\t// No data is returned if getting the connection fails.\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\tresolve({ hostName: remoteAuthority, errorMessage: `Unable to resolve connection to '${remoteAuthority}'.` });\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(data);\n\t\t\t\t});\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve({ hostName: remoteAuthority, errorMessage: `Connection to '${remoteAuthority}' could not be established` });\n\t\t\t\t}, 5000);\n\t\t\t});\n\t\t}));\n\n\t\treturn diagnostics.filter((x): x is IRemoteDiagnosticInfo | IRemoteDiagnosticError => !!x);\n\t}\n\n\tasync getMainDiagnostics(): Promise<IMainProcessDiagnostics> {\n\t\tthis.logService.trace('Received request for main process info from other instance.');\n\n\t\tconst windows: IWindowDiagnostics[] = [];\n\t\tfor (const window of BrowserWindow.getAllWindows()) {\n\t\t\tconst codeWindow = this.windowsMainService.getWindowById(window.id);\n\t\t\tif (codeWindow) {\n\t\t\t\twindows.push(await this.codeWindowToInfo(codeWindow));\n\t\t\t} else {\n\t\t\t\twindows.push(this.browserWindowToInfo(window));\n\t\t\t}\n\t\t}\n\n\t\tconst pidToNames: IProcessDiagnostics[] = [];\n\t\tfor (const { pid, name } of UtilityProcess.getAll()) {\n\t\t\tpidToNames.push({ pid, name });\n\t\t}\n\n\t\treturn {\n\t\t\tmainPID: process.pid,\n\t\t\tmainArguments: process.argv.slice(1),\n\t\t\twindows,\n\t\t\tpidToNames,\n\t\t\tscreenReader: !!app.accessibilitySupportEnabled,\n\t\t\tgpuFeatureStatus: app.getGPUFeatureStatus()\n\t\t};\n\t}\n\n\tprivate async codeWindowToInfo(window: ICodeWindow): Promise<IWindowDiagnostics> {\n\t\tconst folderURIs = await this.getFolderURIs(window);\n\t\tconst win = assertIsDefined(window.win);\n\n\t\treturn this.browserWindowToInfo(win, folderURIs, window.remoteAuthority);\n\t}\n\n\tprivate browserWindowToInfo(window: BrowserWindow, folderURIs: URI[] = [], remoteAuthority?: string): IWindowDiagnostics {\n\t\treturn {\n\t\t\tid: window.id,\n\t\t\tpid: window.webContents.getOSProcessId(),\n\t\t\ttitle: window.getTitle(),\n\t\t\tfolderURIs,\n\t\t\tremoteAuthority\n\t\t};\n\t}\n\n\tprivate async getFolderURIs(window: ICodeWindow): Promise<URI[]> {\n\t\tconst folderURIs: URI[] = [];\n\n\t\tconst workspace = window.openedWorkspace;\n\t\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\tfolderURIs.push(workspace.uri);\n\t\t} else if (isWorkspaceIdentifier(workspace)) {\n\t\t\tconst resolvedWorkspace = await this.workspacesManagementMainService.resolveLocalWorkspace(workspace.configPath); // workspace folders can only be shown for local (resolved) workspaces\n\t\t\tif (resolvedWorkspace) {\n\t\t\t\tconst rootFolders = resolvedWorkspace.folders;\n\t\t\t\trootFolders.forEach(root => {\n\t\t\t\t\tfolderURIs.push(root.uri);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn folderURIs;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
