{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/diagnostics/node/diagnosticsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as osLib from 'os';\nimport { Promises } from '../../../base/common/async.js';\nimport { getNodeType, parse, ParseError } from '../../../base/common/json.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, join } from '../../../base/common/path.js';\nimport { isLinux, isWindows } from '../../../base/common/platform.js';\nimport { ProcessItem } from '../../../base/common/processes.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { virtualMachineHint } from '../../../base/node/id.js';\nimport { IDirent, Promises as pfs } from '../../../base/node/pfs.js';\nimport { listProcesses } from '../../../base/node/ps.js';\nimport { IDiagnosticsService, IMachineInfo, IMainProcessDiagnostics, IRemoteDiagnosticError, IRemoteDiagnosticInfo, isRemoteDiagnosticError, IWorkspaceInformation, PerformanceInfo, SystemInfo, WorkspaceStatItem, WorkspaceStats } from '../common/diagnostics.js';\nimport { ByteSize } from '../../files/common/files.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IWorkspace } from '../../workspace/common/workspace.js';\n\ninterface ConfigFilePatterns {\n\ttag: string;\n\tfilePattern: RegExp;\n\trelativePathPattern?: RegExp;\n}\n\nconst workspaceStatsCache = new Map<string, Promise<WorkspaceStats>>();\nexport async function collectWorkspaceStats(folder: string, filter: string[]): Promise<WorkspaceStats> {\n\tconst cacheKey = `${folder}::${filter.join(':')}`;\n\tconst cached = workspaceStatsCache.get(cacheKey);\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tconst configFilePatterns: ConfigFilePatterns[] = [\n\t\t{ tag: 'grunt.js', filePattern: /^gruntfile\\.js$/i },\n\t\t{ tag: 'gulp.js', filePattern: /^gulpfile\\.js$/i },\n\t\t{ tag: 'tsconfig.json', filePattern: /^tsconfig\\.json$/i },\n\t\t{ tag: 'package.json', filePattern: /^package\\.json$/i },\n\t\t{ tag: 'jsconfig.json', filePattern: /^jsconfig\\.json$/i },\n\t\t{ tag: 'tslint.json', filePattern: /^tslint\\.json$/i },\n\t\t{ tag: 'eslint.json', filePattern: /^eslint\\.json$/i },\n\t\t{ tag: 'tasks.json', filePattern: /^tasks\\.json$/i },\n\t\t{ tag: 'launch.json', filePattern: /^launch\\.json$/i },\n\t\t{ tag: 'settings.json', filePattern: /^settings\\.json$/i },\n\t\t{ tag: 'webpack.config.js', filePattern: /^webpack\\.config\\.js$/i },\n\t\t{ tag: 'project.json', filePattern: /^project\\.json$/i },\n\t\t{ tag: 'makefile', filePattern: /^makefile$/i },\n\t\t{ tag: 'sln', filePattern: /^.+\\.sln$/i },\n\t\t{ tag: 'csproj', filePattern: /^.+\\.csproj$/i },\n\t\t{ tag: 'cmake', filePattern: /^.+\\.cmake$/i },\n\t\t{ tag: 'github-actions', filePattern: /^.+\\.ya?ml$/i, relativePathPattern: /^\\.github(?:\\/|\\\\)workflows$/i },\n\t\t{ tag: 'devcontainer.json', filePattern: /^devcontainer\\.json$/i },\n\t\t{ tag: 'dockerfile', filePattern: /^(dockerfile|docker\\-compose\\.ya?ml)$/i },\n\t\t{ tag: 'cursorrules', filePattern: /^\\.cursorrules$/i },\n\t];\n\n\tconst fileTypes = new Map<string, number>();\n\tconst configFiles = new Map<string, number>();\n\n\tconst MAX_FILES = 20000;\n\n\tfunction collect(root: string, dir: string, filter: string[], token: { count: number; maxReached: boolean; readdirCount: number }): Promise<void> {\n\t\tconst relativePath = dir.substring(root.length + 1);\n\n\t\treturn Promises.withAsyncBody(async resolve => {\n\t\t\tlet files: IDirent[];\n\n\t\t\ttoken.readdirCount++;\n\t\t\ttry {\n\t\t\t\tfiles = await pfs.readdir(dir, { withFileTypes: true });\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore folders that can't be read\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (token.count >= MAX_FILES) {\n\t\t\t\ttoken.count += files.length;\n\t\t\t\ttoken.maxReached = true;\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet pending = files.length;\n\t\t\tif (pending === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet filesToRead = files;\n\t\t\tif (token.count + files.length > MAX_FILES) {\n\t\t\t\ttoken.maxReached = true;\n\t\t\t\tpending = MAX_FILES - token.count;\n\t\t\t\tfilesToRead = files.slice(0, pending);\n\t\t\t}\n\n\t\t\ttoken.count += files.length;\n\n\t\t\tfor (const file of filesToRead) {\n\t\t\t\tif (file.isDirectory()) {\n\t\t\t\t\tif (!filter.includes(file.name)) {\n\t\t\t\t\t\tawait collect(root, join(dir, file.name), filter, token);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (--pending === 0) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst index = file.name.lastIndexOf('.');\n\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\tconst fileType = file.name.substring(index + 1);\n\t\t\t\t\t\tif (fileType) {\n\t\t\t\t\t\t\tfileTypes.set(fileType, (fileTypes.get(fileType) ?? 0) + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const configFile of configFilePatterns) {\n\t\t\t\t\t\tif (configFile.relativePathPattern?.test(relativePath) !== false && configFile.filePattern.test(file.name)) {\n\t\t\t\t\t\t\tconfigFiles.set(configFile.tag, (configFiles.get(configFile.tag) ?? 0) + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (--pending === 0) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tconst statsPromise = Promises.withAsyncBody<WorkspaceStats>(async (resolve) => {\n\t\tconst token: { count: number; maxReached: boolean; readdirCount: number } = { count: 0, maxReached: false, readdirCount: 0 };\n\t\tconst sw = new StopWatch(true);\n\t\tawait collect(folder, folder, filter, token);\n\t\tconst launchConfigs = await collectLaunchConfigs(folder);\n\t\tresolve({\n\t\t\tconfigFiles: asSortedItems(configFiles),\n\t\t\tfileTypes: asSortedItems(fileTypes),\n\t\t\tfileCount: token.count,\n\t\t\tmaxFilesReached: token.maxReached,\n\t\t\tlaunchConfigFiles: launchConfigs,\n\t\t\ttotalScanTime: sw.elapsed(),\n\t\t\ttotalReaddirCount: token.readdirCount\n\t\t});\n\t});\n\n\tworkspaceStatsCache.set(cacheKey, statsPromise);\n\treturn statsPromise;\n}\n\nfunction asSortedItems(items: Map<string, number>): WorkspaceStatItem[] {\n\treturn Array.from(items.entries(), ([name, count]) => ({ name: name, count: count }))\n\t\t.sort((a, b) => b.count - a.count);\n}\n\nexport function getMachineInfo(): IMachineInfo {\n\n\tconst machineInfo: IMachineInfo = {\n\t\tos: `${osLib.type()} ${osLib.arch()} ${osLib.release()}`,\n\t\tmemory: `${(osLib.totalmem() / ByteSize.GB).toFixed(2)}GB (${(osLib.freemem() / ByteSize.GB).toFixed(2)}GB free)`,\n\t\tvmHint: `${Math.round((virtualMachineHint.value() * 100))}%`,\n\t};\n\n\tconst cpus = osLib.cpus();\n\tif (cpus && cpus.length > 0) {\n\t\tmachineInfo.cpus = `${cpus[0].model} (${cpus.length} x ${cpus[0].speed})`;\n\t}\n\n\treturn machineInfo;\n}\n\nexport async function collectLaunchConfigs(folder: string): Promise<WorkspaceStatItem[]> {\n\ttry {\n\t\tconst launchConfigs = new Map<string, number>();\n\t\tconst launchConfig = join(folder, '.vscode', 'launch.json');\n\n\t\tconst contents = await fs.promises.readFile(launchConfig);\n\n\t\tconst errors: ParseError[] = [];\n\t\tconst json = parse(contents.toString(), errors);\n\t\tif (errors.length) {\n\t\t\tconsole.log(`Unable to parse ${launchConfig}`);\n\t\t\treturn [];\n\t\t}\n\n\t\tif (getNodeType(json) === 'object' && json['configurations']) {\n\t\t\tfor (const each of json['configurations']) {\n\t\t\t\tconst type = each['type'];\n\t\t\t\tif (type) {\n\t\t\t\t\tif (launchConfigs.has(type)) {\n\t\t\t\t\t\tlaunchConfigs.set(type, launchConfigs.get(type)! + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlaunchConfigs.set(type, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn asSortedItems(launchConfigs);\n\t} catch (error) {\n\t\treturn [];\n\t}\n}\n\nexport class DiagnosticsService implements IDiagnosticsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tprivate formatMachineInfo(info: IMachineInfo): string {\n\t\tconst output: string[] = [];\n\t\toutput.push(`OS Version:       ${info.os}`);\n\t\toutput.push(`CPUs:             ${info.cpus}`);\n\t\toutput.push(`Memory (System):  ${info.memory}`);\n\t\toutput.push(`VM:               ${info.vmHint}`);\n\n\t\treturn output.join('\\n');\n\t}\n\n\tprivate formatEnvironment(info: IMainProcessDiagnostics): string {\n\t\tconst output: string[] = [];\n\t\toutput.push(`Version:          ${this.productService.nameShort} ${this.productService.version} (${this.productService.commit || 'Commit unknown'}, ${this.productService.date || 'Date unknown'})`);\n\t\toutput.push(`OS Version:       ${osLib.type()} ${osLib.arch()} ${osLib.release()}`);\n\t\tconst cpus = osLib.cpus();\n\t\tif (cpus && cpus.length > 0) {\n\t\t\toutput.push(`CPUs:             ${cpus[0].model} (${cpus.length} x ${cpus[0].speed})`);\n\t\t}\n\t\toutput.push(`Memory (System):  ${(osLib.totalmem() / ByteSize.GB).toFixed(2)}GB (${(osLib.freemem() / ByteSize.GB).toFixed(2)}GB free)`);\n\t\tif (!isWindows) {\n\t\t\toutput.push(`Load (avg):       ${osLib.loadavg().map(l => Math.round(l)).join(', ')}`); // only provided on Linux/macOS\n\t\t}\n\t\toutput.push(`VM:               ${Math.round((virtualMachineHint.value() * 100))}%`);\n\t\toutput.push(`Screen Reader:    ${info.screenReader ? 'yes' : 'no'}`);\n\t\toutput.push(`Process Argv:     ${info.mainArguments.join(' ')}`);\n\t\toutput.push(`GPU Status:       ${this.expandGPUFeatures(info.gpuFeatureStatus)}`);\n\n\t\treturn output.join('\\n');\n\t}\n\n\tpublic async getPerformanceInfo(info: IMainProcessDiagnostics, remoteData: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<PerformanceInfo> {\n\t\treturn Promise.all([listProcesses(info.mainPID), this.formatWorkspaceMetadata(info)]).then(async result => {\n\t\t\tlet [rootProcess, workspaceInfo] = result;\n\t\t\tlet processInfo = this.formatProcessList(info, rootProcess);\n\n\t\t\tremoteData.forEach(diagnostics => {\n\t\t\t\tif (isRemoteDiagnosticError(diagnostics)) {\n\t\t\t\t\tprocessInfo += `\\n${diagnostics.errorMessage}`;\n\t\t\t\t\tworkspaceInfo += `\\n${diagnostics.errorMessage}`;\n\t\t\t\t} else {\n\t\t\t\t\tprocessInfo += `\\n\\nRemote: ${diagnostics.hostName}`;\n\t\t\t\t\tif (diagnostics.processes) {\n\t\t\t\t\t\tprocessInfo += `\\n${this.formatProcessList(info, diagnostics.processes)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagnostics.workspaceMetadata) {\n\t\t\t\t\t\tworkspaceInfo += `\\n|  Remote: ${diagnostics.hostName}`;\n\t\t\t\t\t\tfor (const folder of Object.keys(diagnostics.workspaceMetadata)) {\n\t\t\t\t\t\t\tconst metadata = diagnostics.workspaceMetadata[folder];\n\n\t\t\t\t\t\t\tlet countMessage = `${metadata.fileCount} files`;\n\t\t\t\t\t\t\tif (metadata.maxFilesReached) {\n\t\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tworkspaceInfo += `|    Folder (${folder}): ${countMessage}`;\n\t\t\t\t\t\t\tworkspaceInfo += this.formatWorkspaceStats(metadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tprocessInfo,\n\t\t\t\tworkspaceInfo\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic async getSystemInfo(info: IMainProcessDiagnostics, remoteData: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<SystemInfo> {\n\t\tconst { memory, vmHint, os, cpus } = getMachineInfo();\n\t\tconst systemInfo: SystemInfo = {\n\t\t\tos,\n\t\t\tmemory,\n\t\t\tcpus,\n\t\t\tvmHint,\n\t\t\tprocessArgs: `${info.mainArguments.join(' ')}`,\n\t\t\tgpuStatus: info.gpuFeatureStatus,\n\t\t\tscreenReader: `${info.screenReader ? 'yes' : 'no'}`,\n\t\t\tremoteData\n\t\t};\n\n\t\tif (!isWindows) {\n\t\t\tsystemInfo.load = `${osLib.loadavg().map(l => Math.round(l)).join(', ')}`;\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\tsystemInfo.linuxEnv = {\n\t\t\t\tdesktopSession: process.env['DESKTOP_SESSION'],\n\t\t\t\txdgSessionDesktop: process.env['XDG_SESSION_DESKTOP'],\n\t\t\t\txdgCurrentDesktop: process.env['XDG_CURRENT_DESKTOP'],\n\t\t\t\txdgSessionType: process.env['XDG_SESSION_TYPE']\n\t\t\t};\n\t\t}\n\n\t\treturn Promise.resolve(systemInfo);\n\t}\n\n\tpublic async getDiagnostics(info: IMainProcessDiagnostics, remoteDiagnostics: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<string> {\n\t\tconst output: string[] = [];\n\t\treturn listProcesses(info.mainPID).then(async rootProcess => {\n\n\t\t\t// Environment Info\n\t\t\toutput.push('');\n\t\t\toutput.push(this.formatEnvironment(info));\n\n\t\t\t// Process List\n\t\t\toutput.push('');\n\t\t\toutput.push(this.formatProcessList(info, rootProcess));\n\n\t\t\t// Workspace Stats\n\t\t\tif (info.windows.some(window => window.folderURIs && window.folderURIs.length > 0 && !window.remoteAuthority)) {\n\t\t\t\toutput.push('');\n\t\t\t\toutput.push('Workspace Stats: ');\n\t\t\t\toutput.push(await this.formatWorkspaceMetadata(info));\n\t\t\t}\n\n\t\t\tremoteDiagnostics.forEach(diagnostics => {\n\t\t\t\tif (isRemoteDiagnosticError(diagnostics)) {\n\t\t\t\t\toutput.push(`\\n${diagnostics.errorMessage}`);\n\t\t\t\t} else {\n\t\t\t\t\toutput.push('\\n\\n');\n\t\t\t\t\toutput.push(`Remote:           ${diagnostics.hostName}`);\n\t\t\t\t\toutput.push(this.formatMachineInfo(diagnostics.machineInfo));\n\n\t\t\t\t\tif (diagnostics.processes) {\n\t\t\t\t\t\toutput.push(this.formatProcessList(info, diagnostics.processes));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagnostics.workspaceMetadata) {\n\t\t\t\t\t\tfor (const folder of Object.keys(diagnostics.workspaceMetadata)) {\n\t\t\t\t\t\t\tconst metadata = diagnostics.workspaceMetadata[folder];\n\n\t\t\t\t\t\t\tlet countMessage = `${metadata.fileCount} files`;\n\t\t\t\t\t\t\tif (metadata.maxFilesReached) {\n\t\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toutput.push(`Folder (${folder}): ${countMessage}`);\n\t\t\t\t\t\t\toutput.push(this.formatWorkspaceStats(metadata));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\toutput.push('');\n\t\t\toutput.push('');\n\n\t\t\treturn output.join('\\n');\n\t\t});\n\t}\n\n\tprivate formatWorkspaceStats(workspaceStats: WorkspaceStats): string {\n\t\tconst output: string[] = [];\n\t\tconst lineLength = 60;\n\t\tlet col = 0;\n\n\t\tconst appendAndWrap = (name: string, count: number) => {\n\t\t\tconst item = ` ${name}(${count})`;\n\n\t\t\tif (col + item.length > lineLength) {\n\t\t\t\toutput.push(line);\n\t\t\t\tline = '|                 ';\n\t\t\t\tcol = line.length;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcol += item.length;\n\t\t\t}\n\t\t\tline += item;\n\t\t};\n\n\t\t// File Types\n\t\tlet line = '|      File types:';\n\t\tconst maxShown = 10;\n\t\tconst max = workspaceStats.fileTypes.length > maxShown ? maxShown : workspaceStats.fileTypes.length;\n\t\tfor (let i = 0; i < max; i++) {\n\t\t\tconst item = workspaceStats.fileTypes[i];\n\t\t\tappendAndWrap(item.name, item.count);\n\t\t}\n\t\toutput.push(line);\n\n\t\t// Conf Files\n\t\tif (workspaceStats.configFiles.length >= 0) {\n\t\t\tline = '|      Conf files:';\n\t\t\tcol = 0;\n\t\t\tworkspaceStats.configFiles.forEach((item) => {\n\t\t\t\tappendAndWrap(item.name, item.count);\n\t\t\t});\n\t\t\toutput.push(line);\n\t\t}\n\n\t\tif (workspaceStats.launchConfigFiles.length > 0) {\n\t\t\tlet line = '|      Launch Configs:';\n\t\t\tworkspaceStats.launchConfigFiles.forEach(each => {\n\t\t\t\tconst item = each.count > 1 ? ` ${each.name}(${each.count})` : ` ${each.name}`;\n\t\t\t\tline += item;\n\t\t\t});\n\t\t\toutput.push(line);\n\t\t}\n\t\treturn output.join('\\n');\n\t}\n\n\tprivate expandGPUFeatures(gpuFeatures: any): string {\n\t\tconst longestFeatureName = Math.max(...Object.keys(gpuFeatures).map(feature => feature.length));\n\t\t// Make columns aligned by adding spaces after feature name\n\t\treturn Object.keys(gpuFeatures).map(feature => `${feature}:  ${' '.repeat(longestFeatureName - feature.length)}  ${gpuFeatures[feature]}`).join('\\n                  ');\n\t}\n\n\tprivate formatWorkspaceMetadata(info: IMainProcessDiagnostics): Promise<string> {\n\t\tconst output: string[] = [];\n\t\tconst workspaceStatPromises: Promise<void>[] = [];\n\n\t\tinfo.windows.forEach(window => {\n\t\t\tif (window.folderURIs.length === 0 || !!window.remoteAuthority) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toutput.push(`|  Window (${window.title})`);\n\n\t\t\twindow.folderURIs.forEach(uriComponents => {\n\t\t\t\tconst folderUri = URI.revive(uriComponents);\n\t\t\t\tif (folderUri.scheme === Schemas.file) {\n\t\t\t\t\tconst folder = folderUri.fsPath;\n\t\t\t\t\tworkspaceStatPromises.push(collectWorkspaceStats(folder, ['node_modules', '.git']).then(stats => {\n\t\t\t\t\t\tlet countMessage = `${stats.fileCount} files`;\n\t\t\t\t\t\tif (stats.maxFilesReached) {\n\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutput.push(`|    Folder (${basename(folder)}): ${countMessage}`);\n\t\t\t\t\t\toutput.push(this.formatWorkspaceStats(stats));\n\n\t\t\t\t\t}).catch(error => {\n\t\t\t\t\t\toutput.push(`|      Error: Unable to collect workspace stats for folder ${folder} (${error.toString()})`);\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(`|    Folder (${folderUri.toString()}): Workspace stats not available.`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn Promise.all(workspaceStatPromises)\n\t\t\t.then(_ => output.join('\\n'))\n\t\t\t.catch(e => `Unable to collect workspace stats: ${e}`);\n\t}\n\n\tprivate formatProcessList(info: IMainProcessDiagnostics, rootProcess: ProcessItem): string {\n\t\tconst mapProcessToName = new Map<number, string>();\n\t\tinfo.windows.forEach(window => mapProcessToName.set(window.pid, `window [${window.id}] (${window.title})`));\n\t\tinfo.pidToNames.forEach(({ pid, name }) => mapProcessToName.set(pid, name));\n\n\t\tconst output: string[] = [];\n\n\t\toutput.push('CPU %\\tMem MB\\t   PID\\tProcess');\n\n\t\tif (rootProcess) {\n\t\t\tthis.formatProcessItem(info.mainPID, mapProcessToName, output, rootProcess, 0);\n\t\t}\n\n\t\treturn output.join('\\n');\n\t}\n\n\tprivate formatProcessItem(mainPid: number, mapProcessToName: Map<number, string>, output: string[], item: ProcessItem, indent: number): void {\n\t\tconst isRoot = (indent === 0);\n\n\t\t// Format name with indent\n\t\tlet name: string;\n\t\tif (isRoot) {\n\t\t\tname = item.pid === mainPid ? `${this.productService.applicationName} main` : 'remote agent';\n\t\t} else {\n\t\t\tif (mapProcessToName.has(item.pid)) {\n\t\t\t\tname = mapProcessToName.get(item.pid)!;\n\t\t\t} else {\n\t\t\t\tname = `${'  '.repeat(indent)} ${item.name}`;\n\t\t\t}\n\t\t}\n\n\t\tconst memory = process.platform === 'win32' ? item.mem : (osLib.totalmem() * (item.mem / 100));\n\t\toutput.push(`${item.load.toFixed(0).padStart(5, ' ')}\\t${(memory / ByteSize.MB).toFixed(0).padStart(6, ' ')}\\t${item.pid.toFixed(0).padStart(6, ' ')}\\t${name}`);\n\n\t\t// Recurse into children if any\n\t\tif (Array.isArray(item.children)) {\n\t\t\titem.children.forEach(child => this.formatProcessItem(mainPid, mapProcessToName, output, child, indent + 1));\n\t\t}\n\t}\n\n\tpublic async getWorkspaceFileExtensions(workspace: IWorkspace): Promise<{ extensions: string[] }> {\n\t\tconst items = new Set<string>();\n\t\tfor (const { uri } of workspace.folders) {\n\t\t\tconst folderUri = URI.revive(uri);\n\t\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst folder = folderUri.fsPath;\n\t\t\ttry {\n\t\t\t\tconst stats = await collectWorkspaceStats(folder, ['node_modules', '.git']);\n\t\t\t\tstats.fileTypes.forEach(item => items.add(item.name));\n\t\t\t} catch { }\n\t\t}\n\t\treturn { extensions: [...items] };\n\t}\n\n\tpublic async reportWorkspaceStats(workspace: IWorkspaceInformation): Promise<void> {\n\t\tfor (const { uri } of workspace.folders) {\n\t\t\tconst folderUri = URI.revive(uri);\n\t\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst folder = folderUri.fsPath;\n\t\t\ttry {\n\t\t\t\tconst stats = await collectWorkspaceStats(folder, ['node_modules', '.git']);\n\t\t\t\ttype WorkspaceStatsClassification = {\n\t\t\t\t\towner: 'lramos15';\n\t\t\t\t\tcomment: 'Metadata related to the workspace';\n\t\t\t\t\t'workspace.id': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A UUID given to a workspace to identify it.' };\n\t\t\t\t\trendererSessionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the session' };\n\t\t\t\t};\n\t\t\t\ttype WorkspaceStatsEvent = {\n\t\t\t\t\t'workspace.id': string | undefined;\n\t\t\t\t\trendererSessionId: string;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsEvent, WorkspaceStatsClassification>('workspace.stats', {\n\t\t\t\t\t'workspace.id': workspace.telemetryId,\n\t\t\t\t\trendererSessionId: workspace.rendererSessionId\n\t\t\t\t});\n\t\t\t\ttype WorkspaceStatsFileClassification = {\n\t\t\t\t\towner: 'lramos15';\n\t\t\t\t\tcomment: 'Helps us gain insights into what type of files are being used in a workspace';\n\t\t\t\t\trendererSessionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the session.' };\n\t\t\t\t\ttype: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of file' };\n\t\t\t\t\tcount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'How many types of that file are present' };\n\t\t\t\t};\n\t\t\t\ttype WorkspaceStatsFileEvent = {\n\t\t\t\t\trendererSessionId: string;\n\t\t\t\t\ttype: string;\n\t\t\t\t\tcount: number;\n\t\t\t\t};\n\t\t\t\tstats.fileTypes.forEach(e => {\n\t\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsFileEvent, WorkspaceStatsFileClassification>('workspace.stats.file', {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tstats.launchConfigFiles.forEach(e => {\n\t\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsFileEvent, WorkspaceStatsFileClassification>('workspace.stats.launchConfigFile', {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tstats.configFiles.forEach(e => {\n\t\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsFileEvent, WorkspaceStatsFileClassification>('workspace.stats.configFiles', {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// Workspace stats metadata\n\t\t\t\ttype WorkspaceStatsMetadataClassification = {\n\t\t\t\t\towner: 'jrieken';\n\t\t\t\t\tcomment: 'Metadata about workspace metadata collection';\n\t\t\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'How did it take to make workspace stats' };\n\t\t\t\t\treachedLimit: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Did making workspace stats reach its limits' };\n\t\t\t\t\tfileCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'How many files did workspace stats discover' };\n\t\t\t\t\treaddirCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'How many readdir call were needed' };\n\t\t\t\t};\n\t\t\t\ttype WorkspaceStatsMetadata = {\n\t\t\t\t\tduration: number;\n\t\t\t\t\treachedLimit: boolean;\n\t\t\t\t\tfileCount: number;\n\t\t\t\t\treaddirCount: number;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsMetadata, WorkspaceStatsMetadataClassification>('workspace.stats.metadata', { duration: stats.totalScanTime, reachedLimit: stats.maxFilesReached, fileCount: stats.fileCount, readdirCount: stats.totalReaddirCount });\n\t\t\t} catch {\n\t\t\t\t// Report nothing if collecting metadata fails.\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["filter", "line"]
}
