{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/diagnostics/node/diagnosticsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from \"fs\";\nimport * as osLib from \"os\";\nimport { Promises } from \"../../../base/common/async.js\";\nimport {\n\ttype ParseError,\n\tgetNodeType,\n\tparse,\n} from \"../../../base/common/json.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { basename, join } from \"../../../base/common/path.js\";\nimport { isLinux, isWindows } from \"../../../base/common/platform.js\";\nimport type { ProcessItem } from \"../../../base/common/processes.js\";\nimport { StopWatch } from \"../../../base/common/stopwatch.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { virtualMachineHint } from \"../../../base/node/id.js\";\nimport { type IDirent, Promises as pfs } from \"../../../base/node/pfs.js\";\nimport { listProcesses } from \"../../../base/node/ps.js\";\nimport { ByteSize } from \"../../files/common/files.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport type { IWorkspace } from \"../../workspace/common/workspace.js\";\nimport {\n\ttype IDiagnosticsService,\n\ttype IMachineInfo,\n\ttype IMainProcessDiagnostics,\n\ttype IRemoteDiagnosticError,\n\ttype IRemoteDiagnosticInfo,\n\ttype IWorkspaceInformation,\n\ttype PerformanceInfo,\n\ttype SystemInfo,\n\ttype WorkspaceStatItem,\n\ttype WorkspaceStats,\n\tisRemoteDiagnosticError,\n} from \"../common/diagnostics.js\";\n\ninterface ConfigFilePatterns {\n\ttag: string;\n\tfilePattern: RegExp;\n\trelativePathPattern?: RegExp;\n}\n\nconst workspaceStatsCache = new Map<string, Promise<WorkspaceStats>>();\nexport async function collectWorkspaceStats(\n\tfolder: string,\n\tfilter: string[],\n): Promise<WorkspaceStats> {\n\tconst cacheKey = `${folder}::${filter.join(\":\")}`;\n\tconst cached = workspaceStatsCache.get(cacheKey);\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tconst configFilePatterns: ConfigFilePatterns[] = [\n\t\t{ tag: \"grunt.js\", filePattern: /^gruntfile\\.js$/i },\n\t\t{ tag: \"gulp.js\", filePattern: /^gulpfile\\.js$/i },\n\t\t{ tag: \"tsconfig.json\", filePattern: /^tsconfig\\.json$/i },\n\t\t{ tag: \"package.json\", filePattern: /^package\\.json$/i },\n\t\t{ tag: \"jsconfig.json\", filePattern: /^jsconfig\\.json$/i },\n\t\t{ tag: \"tslint.json\", filePattern: /^tslint\\.json$/i },\n\t\t{ tag: \"eslint.json\", filePattern: /^eslint\\.json$/i },\n\t\t{ tag: \"tasks.json\", filePattern: /^tasks\\.json$/i },\n\t\t{ tag: \"launch.json\", filePattern: /^launch\\.json$/i },\n\t\t{ tag: \"settings.json\", filePattern: /^settings\\.json$/i },\n\t\t{ tag: \"webpack.config.js\", filePattern: /^webpack\\.config\\.js$/i },\n\t\t{ tag: \"project.json\", filePattern: /^project\\.json$/i },\n\t\t{ tag: \"makefile\", filePattern: /^makefile$/i },\n\t\t{ tag: \"sln\", filePattern: /^.+\\.sln$/i },\n\t\t{ tag: \"csproj\", filePattern: /^.+\\.csproj$/i },\n\t\t{ tag: \"cmake\", filePattern: /^.+\\.cmake$/i },\n\t\t{\n\t\t\ttag: \"github-actions\",\n\t\t\tfilePattern: /^.+\\.ya?ml$/i,\n\t\t\trelativePathPattern: /^\\.github(?:\\/|\\\\)workflows$/i,\n\t\t},\n\t\t{ tag: \"devcontainer.json\", filePattern: /^devcontainer\\.json$/i },\n\t\t{\n\t\t\ttag: \"dockerfile\",\n\t\t\tfilePattern: /^(dockerfile|docker-compose\\.ya?ml)$/i,\n\t\t},\n\t\t{ tag: \"cursorrules\", filePattern: /^\\.cursorrules$/i },\n\t];\n\n\tconst fileTypes = new Map<string, number>();\n\tconst configFiles = new Map<string, number>();\n\n\tconst MAX_FILES = 20000;\n\n\tfunction collect(\n\t\troot: string,\n\t\tdir: string,\n\t\tfilter: string[],\n\t\ttoken: { count: number; maxReached: boolean; readdirCount: number },\n\t): Promise<void> {\n\t\tconst relativePath = dir.substring(root.length + 1);\n\n\t\treturn Promises.withAsyncBody(async (resolve) => {\n\t\t\tlet files: IDirent[];\n\n\t\t\ttoken.readdirCount++;\n\t\t\ttry {\n\t\t\t\tfiles = await pfs.readdir(dir, { withFileTypes: true });\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore folders that can't be read\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (token.count >= MAX_FILES) {\n\t\t\t\ttoken.count += files.length;\n\t\t\t\ttoken.maxReached = true;\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet pending = files.length;\n\t\t\tif (pending === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet filesToRead = files;\n\t\t\tif (token.count + files.length > MAX_FILES) {\n\t\t\t\ttoken.maxReached = true;\n\t\t\t\tpending = MAX_FILES - token.count;\n\t\t\t\tfilesToRead = files.slice(0, pending);\n\t\t\t}\n\n\t\t\ttoken.count += files.length;\n\n\t\t\tfor (const file of filesToRead) {\n\t\t\t\tif (file.isDirectory()) {\n\t\t\t\t\tif (!filter.includes(file.name)) {\n\t\t\t\t\t\tawait collect(\n\t\t\t\t\t\t\troot,\n\t\t\t\t\t\t\tjoin(dir, file.name),\n\t\t\t\t\t\t\tfilter,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (--pending === 0) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst index = file.name.lastIndexOf(\".\");\n\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\tconst fileType = file.name.substring(index + 1);\n\t\t\t\t\t\tif (fileType) {\n\t\t\t\t\t\t\tfileTypes.set(\n\t\t\t\t\t\t\t\tfileType,\n\t\t\t\t\t\t\t\t(fileTypes.get(fileType) ?? 0) + 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const configFile of configFilePatterns) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tconfigFile.relativePathPattern?.test(\n\t\t\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\t\t) !== false &&\n\t\t\t\t\t\t\tconfigFile.filePattern.test(file.name)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconfigFiles.set(\n\t\t\t\t\t\t\t\tconfigFile.tag,\n\t\t\t\t\t\t\t\t(configFiles.get(configFile.tag) ?? 0) + 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (--pending === 0) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tconst statsPromise = Promises.withAsyncBody<WorkspaceStats>(\n\t\tasync (resolve) => {\n\t\t\tconst token: {\n\t\t\t\tcount: number;\n\t\t\t\tmaxReached: boolean;\n\t\t\t\treaddirCount: number;\n\t\t\t} = { count: 0, maxReached: false, readdirCount: 0 };\n\t\t\tconst sw = new StopWatch(true);\n\t\t\tawait collect(folder, folder, filter, token);\n\t\t\tconst launchConfigs = await collectLaunchConfigs(folder);\n\t\t\tresolve({\n\t\t\t\tconfigFiles: asSortedItems(configFiles),\n\t\t\t\tfileTypes: asSortedItems(fileTypes),\n\t\t\t\tfileCount: token.count,\n\t\t\t\tmaxFilesReached: token.maxReached,\n\t\t\t\tlaunchConfigFiles: launchConfigs,\n\t\t\t\ttotalScanTime: sw.elapsed(),\n\t\t\t\ttotalReaddirCount: token.readdirCount,\n\t\t\t});\n\t\t},\n\t);\n\n\tworkspaceStatsCache.set(cacheKey, statsPromise);\n\treturn statsPromise;\n}\n\nfunction asSortedItems(items: Map<string, number>): WorkspaceStatItem[] {\n\treturn Array.from(items.entries(), ([name, count]) => ({\n\t\tname: name,\n\t\tcount: count,\n\t})).sort((a, b) => b.count - a.count);\n}\n\nexport function getMachineInfo(): IMachineInfo {\n\tconst machineInfo: IMachineInfo = {\n\t\tos: `${osLib.type()} ${osLib.arch()} ${osLib.release()}`,\n\t\tmemory: `${(osLib.totalmem() / ByteSize.GB).toFixed(2)}GB (${(osLib.freemem() / ByteSize.GB).toFixed(2)}GB free)`,\n\t\tvmHint: `${Math.round(virtualMachineHint.value() * 100)}%`,\n\t};\n\n\tconst cpus = osLib.cpus();\n\tif (cpus && cpus.length > 0) {\n\t\tmachineInfo.cpus = `${cpus[0].model} (${cpus.length} x ${cpus[0].speed})`;\n\t}\n\n\treturn machineInfo;\n}\n\nexport async function collectLaunchConfigs(\n\tfolder: string,\n): Promise<WorkspaceStatItem[]> {\n\ttry {\n\t\tconst launchConfigs = new Map<string, number>();\n\t\tconst launchConfig = join(folder, \".vscode\", \"launch.json\");\n\n\t\tconst contents = await fs.promises.readFile(launchConfig);\n\n\t\tconst errors: ParseError[] = [];\n\t\tconst json = parse(contents.toString(), errors);\n\t\tif (errors.length) {\n\t\t\tconsole.log(`Unable to parse ${launchConfig}`);\n\t\t\treturn [];\n\t\t}\n\n\t\tif (getNodeType(json) === \"object\" && json[\"configurations\"]) {\n\t\t\tfor (const each of json[\"configurations\"]) {\n\t\t\t\tconst type = each[\"type\"];\n\t\t\t\tif (type) {\n\t\t\t\t\tif (launchConfigs.has(type)) {\n\t\t\t\t\t\tlaunchConfigs.set(type, launchConfigs.get(type)! + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlaunchConfigs.set(type, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn asSortedItems(launchConfigs);\n\t} catch (error) {\n\t\treturn [];\n\t}\n}\n\nexport class DiagnosticsService implements IDiagnosticsService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tprivate formatMachineInfo(info: IMachineInfo): string {\n\t\tconst output: string[] = [];\n\t\toutput.push(`OS Version:       ${info.os}`);\n\t\toutput.push(`CPUs:             ${info.cpus}`);\n\t\toutput.push(`Memory (System):  ${info.memory}`);\n\t\toutput.push(`VM:               ${info.vmHint}`);\n\n\t\treturn output.join(\"\\n\");\n\t}\n\n\tprivate formatEnvironment(info: IMainProcessDiagnostics): string {\n\t\tconst output: string[] = [];\n\t\toutput.push(\n\t\t\t`Version:          ${this.productService.nameShort} ${this.productService.version} (${this.productService.commit || \"Commit unknown\"}, ${this.productService.date || \"Date unknown\"})`,\n\t\t);\n\t\toutput.push(\n\t\t\t`OS Version:       ${osLib.type()} ${osLib.arch()} ${osLib.release()}`,\n\t\t);\n\t\tconst cpus = osLib.cpus();\n\t\tif (cpus && cpus.length > 0) {\n\t\t\toutput.push(\n\t\t\t\t`CPUs:             ${cpus[0].model} (${cpus.length} x ${cpus[0].speed})`,\n\t\t\t);\n\t\t}\n\t\toutput.push(\n\t\t\t`Memory (System):  ${(osLib.totalmem() / ByteSize.GB).toFixed(2)}GB (${(osLib.freemem() / ByteSize.GB).toFixed(2)}GB free)`,\n\t\t);\n\t\tif (!isWindows) {\n\t\t\toutput.push(\n\t\t\t\t`Load (avg):       ${osLib\n\t\t\t\t\t.loadavg()\n\t\t\t\t\t.map((l) => Math.round(l))\n\t\t\t\t\t.join(\", \")}`,\n\t\t\t); // only provided on Linux/macOS\n\t\t}\n\t\toutput.push(\n\t\t\t`VM:               ${Math.round(virtualMachineHint.value() * 100)}%`,\n\t\t);\n\t\toutput.push(`Screen Reader:    ${info.screenReader ? \"yes\" : \"no\"}`);\n\t\toutput.push(`Process Argv:     ${info.mainArguments.join(\" \")}`);\n\t\toutput.push(\n\t\t\t`GPU Status:       ${this.expandGPUFeatures(info.gpuFeatureStatus)}`,\n\t\t);\n\n\t\treturn output.join(\"\\n\");\n\t}\n\n\tpublic async getPerformanceInfo(\n\t\tinfo: IMainProcessDiagnostics,\n\t\tremoteData: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[],\n\t): Promise<PerformanceInfo> {\n\t\treturn Promise.all([\n\t\t\tlistProcesses(info.mainPID),\n\t\t\tthis.formatWorkspaceMetadata(info),\n\t\t]).then(async (result) => {\n\t\t\tlet [rootProcess, workspaceInfo] = result;\n\t\t\tlet processInfo = this.formatProcessList(info, rootProcess);\n\n\t\t\tremoteData.forEach((diagnostics) => {\n\t\t\t\tif (isRemoteDiagnosticError(diagnostics)) {\n\t\t\t\t\tprocessInfo += `\\n${diagnostics.errorMessage}`;\n\t\t\t\t\tworkspaceInfo += `\\n${diagnostics.errorMessage}`;\n\t\t\t\t} else {\n\t\t\t\t\tprocessInfo += `\\n\\nRemote: ${diagnostics.hostName}`;\n\t\t\t\t\tif (diagnostics.processes) {\n\t\t\t\t\t\tprocessInfo += `\\n${this.formatProcessList(info, diagnostics.processes)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagnostics.workspaceMetadata) {\n\t\t\t\t\t\tworkspaceInfo += `\\n|  Remote: ${diagnostics.hostName}`;\n\t\t\t\t\t\tfor (const folder of Object.keys(\n\t\t\t\t\t\t\tdiagnostics.workspaceMetadata,\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tconst metadata =\n\t\t\t\t\t\t\t\tdiagnostics.workspaceMetadata[folder];\n\n\t\t\t\t\t\t\tlet countMessage = `${metadata.fileCount} files`;\n\t\t\t\t\t\t\tif (metadata.maxFilesReached) {\n\t\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tworkspaceInfo += `|    Folder (${folder}): ${countMessage}`;\n\t\t\t\t\t\t\tworkspaceInfo +=\n\t\t\t\t\t\t\t\tthis.formatWorkspaceStats(metadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tprocessInfo,\n\t\t\t\tworkspaceInfo,\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic async getSystemInfo(\n\t\tinfo: IMainProcessDiagnostics,\n\t\tremoteData: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[],\n\t): Promise<SystemInfo> {\n\t\tconst { memory, vmHint, os, cpus } = getMachineInfo();\n\t\tconst systemInfo: SystemInfo = {\n\t\t\tos,\n\t\t\tmemory,\n\t\t\tcpus,\n\t\t\tvmHint,\n\t\t\tprocessArgs: `${info.mainArguments.join(\" \")}`,\n\t\t\tgpuStatus: info.gpuFeatureStatus,\n\t\t\tscreenReader: `${info.screenReader ? \"yes\" : \"no\"}`,\n\t\t\tremoteData,\n\t\t};\n\n\t\tif (!isWindows) {\n\t\t\tsystemInfo.load = `${osLib\n\t\t\t\t.loadavg()\n\t\t\t\t.map((l) => Math.round(l))\n\t\t\t\t.join(\", \")}`;\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\tsystemInfo.linuxEnv = {\n\t\t\t\tdesktopSession: process.env[\"DESKTOP_SESSION\"],\n\t\t\t\txdgSessionDesktop: process.env[\"XDG_SESSION_DESKTOP\"],\n\t\t\t\txdgCurrentDesktop: process.env[\"XDG_CURRENT_DESKTOP\"],\n\t\t\t\txdgSessionType: process.env[\"XDG_SESSION_TYPE\"],\n\t\t\t};\n\t\t}\n\n\t\treturn Promise.resolve(systemInfo);\n\t}\n\n\tpublic async getDiagnostics(\n\t\tinfo: IMainProcessDiagnostics,\n\t\tremoteDiagnostics: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[],\n\t): Promise<string> {\n\t\tconst output: string[] = [];\n\t\treturn listProcesses(info.mainPID).then(async (rootProcess) => {\n\t\t\t// Environment Info\n\t\t\toutput.push(\"\");\n\t\t\toutput.push(this.formatEnvironment(info));\n\n\t\t\t// Process List\n\t\t\toutput.push(\"\");\n\t\t\toutput.push(this.formatProcessList(info, rootProcess));\n\n\t\t\t// Workspace Stats\n\t\t\tif (\n\t\t\t\tinfo.windows.some(\n\t\t\t\t\t(window) =>\n\t\t\t\t\t\twindow.folderURIs &&\n\t\t\t\t\t\twindow.folderURIs.length > 0 &&\n\t\t\t\t\t\t!window.remoteAuthority,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\toutput.push(\"\");\n\t\t\t\toutput.push(\"Workspace Stats: \");\n\t\t\t\toutput.push(await this.formatWorkspaceMetadata(info));\n\t\t\t}\n\n\t\t\tremoteDiagnostics.forEach((diagnostics) => {\n\t\t\t\tif (isRemoteDiagnosticError(diagnostics)) {\n\t\t\t\t\toutput.push(`\\n${diagnostics.errorMessage}`);\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(\"\\n\\n\");\n\t\t\t\t\toutput.push(`Remote:           ${diagnostics.hostName}`);\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tthis.formatMachineInfo(diagnostics.machineInfo),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (diagnostics.processes) {\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tthis.formatProcessList(info, diagnostics.processes),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagnostics.workspaceMetadata) {\n\t\t\t\t\t\tfor (const folder of Object.keys(\n\t\t\t\t\t\t\tdiagnostics.workspaceMetadata,\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tconst metadata =\n\t\t\t\t\t\t\t\tdiagnostics.workspaceMetadata[folder];\n\n\t\t\t\t\t\t\tlet countMessage = `${metadata.fileCount} files`;\n\t\t\t\t\t\t\tif (metadata.maxFilesReached) {\n\t\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toutput.push(`Folder (${folder}): ${countMessage}`);\n\t\t\t\t\t\t\toutput.push(this.formatWorkspaceStats(metadata));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\toutput.push(\"\");\n\t\t\toutput.push(\"\");\n\n\t\t\treturn output.join(\"\\n\");\n\t\t});\n\t}\n\n\tprivate formatWorkspaceStats(workspaceStats: WorkspaceStats): string {\n\t\tconst output: string[] = [];\n\t\tconst lineLength = 60;\n\t\tlet col = 0;\n\n\t\tconst appendAndWrap = (name: string, count: number) => {\n\t\t\tconst item = ` ${name}(${count})`;\n\n\t\t\tif (col + item.length > lineLength) {\n\t\t\t\toutput.push(line);\n\t\t\t\tline = \"|                 \";\n\t\t\t\tcol = line.length;\n\t\t\t} else {\n\t\t\t\tcol += item.length;\n\t\t\t}\n\t\t\tline += item;\n\t\t};\n\n\t\t// File Types\n\t\tlet line = \"|      File types:\";\n\t\tconst maxShown = 10;\n\t\tconst max =\n\t\t\tworkspaceStats.fileTypes.length > maxShown\n\t\t\t\t? maxShown\n\t\t\t\t: workspaceStats.fileTypes.length;\n\t\tfor (let i = 0; i < max; i++) {\n\t\t\tconst item = workspaceStats.fileTypes[i];\n\t\t\tappendAndWrap(item.name, item.count);\n\t\t}\n\t\toutput.push(line);\n\n\t\t// Conf Files\n\t\tif (workspaceStats.configFiles.length >= 0) {\n\t\t\tline = \"|      Conf files:\";\n\t\t\tcol = 0;\n\t\t\tworkspaceStats.configFiles.forEach((item) => {\n\t\t\t\tappendAndWrap(item.name, item.count);\n\t\t\t});\n\t\t\toutput.push(line);\n\t\t}\n\n\t\tif (workspaceStats.launchConfigFiles.length > 0) {\n\t\t\tlet line = \"|      Launch Configs:\";\n\t\t\tworkspaceStats.launchConfigFiles.forEach((each) => {\n\t\t\t\tconst item =\n\t\t\t\t\teach.count > 1\n\t\t\t\t\t\t? ` ${each.name}(${each.count})`\n\t\t\t\t\t\t: ` ${each.name}`;\n\t\t\t\tline += item;\n\t\t\t});\n\t\t\toutput.push(line);\n\t\t}\n\t\treturn output.join(\"\\n\");\n\t}\n\n\tprivate expandGPUFeatures(gpuFeatures: any): string {\n\t\tconst longestFeatureName = Math.max(\n\t\t\t...Object.keys(gpuFeatures).map((feature) => feature.length),\n\t\t);\n\t\t// Make columns aligned by adding spaces after feature name\n\t\treturn Object.keys(gpuFeatures)\n\t\t\t.map(\n\t\t\t\t(feature) =>\n\t\t\t\t\t`${feature}:  ${\" \".repeat(longestFeatureName - feature.length)}  ${gpuFeatures[feature]}`,\n\t\t\t)\n\t\t\t.join(\"\\n                  \");\n\t}\n\n\tprivate formatWorkspaceMetadata(\n\t\tinfo: IMainProcessDiagnostics,\n\t): Promise<string> {\n\t\tconst output: string[] = [];\n\t\tconst workspaceStatPromises: Promise<void>[] = [];\n\n\t\tinfo.windows.forEach((window) => {\n\t\t\tif (window.folderURIs.length === 0 || !!window.remoteAuthority) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toutput.push(`|  Window (${window.title})`);\n\n\t\t\twindow.folderURIs.forEach((uriComponents) => {\n\t\t\t\tconst folderUri = URI.revive(uriComponents);\n\t\t\t\tif (folderUri.scheme === Schemas.file) {\n\t\t\t\t\tconst folder = folderUri.fsPath;\n\t\t\t\t\tworkspaceStatPromises.push(\n\t\t\t\t\t\tcollectWorkspaceStats(folder, [\"node_modules\", \".git\"])\n\t\t\t\t\t\t\t.then((stats) => {\n\t\t\t\t\t\t\t\tlet countMessage = `${stats.fileCount} files`;\n\t\t\t\t\t\t\t\tif (stats.maxFilesReached) {\n\t\t\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\t\t\t`|    Folder (${basename(folder)}): ${countMessage}`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\toutput.push(this.formatWorkspaceStats(stats));\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\t\t\t`|      Error: Unable to collect workspace stats for folder ${folder} (${error.toString()})`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\t`|    Folder (${folderUri.toString()}): Workspace stats not available.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn Promise.all(workspaceStatPromises)\n\t\t\t.then((_) => output.join(\"\\n\"))\n\t\t\t.catch((e) => `Unable to collect workspace stats: ${e}`);\n\t}\n\n\tprivate formatProcessList(\n\t\tinfo: IMainProcessDiagnostics,\n\t\trootProcess: ProcessItem,\n\t): string {\n\t\tconst mapProcessToName = new Map<number, string>();\n\t\tinfo.windows.forEach((window) =>\n\t\t\tmapProcessToName.set(\n\t\t\t\twindow.pid,\n\t\t\t\t`window [${window.id}] (${window.title})`,\n\t\t\t),\n\t\t);\n\t\tinfo.pidToNames.forEach(({ pid, name }) =>\n\t\t\tmapProcessToName.set(pid, name),\n\t\t);\n\n\t\tconst output: string[] = [];\n\n\t\toutput.push(\"CPU %\\tMem MB\\t   PID\\tProcess\");\n\n\t\tif (rootProcess) {\n\t\t\tthis.formatProcessItem(\n\t\t\t\tinfo.mainPID,\n\t\t\t\tmapProcessToName,\n\t\t\t\toutput,\n\t\t\t\trootProcess,\n\t\t\t\t0,\n\t\t\t);\n\t\t}\n\n\t\treturn output.join(\"\\n\");\n\t}\n\n\tprivate formatProcessItem(\n\t\tmainPid: number,\n\t\tmapProcessToName: Map<number, string>,\n\t\toutput: string[],\n\t\titem: ProcessItem,\n\t\tindent: number,\n\t): void {\n\t\tconst isRoot = indent === 0;\n\n\t\t// Format name with indent\n\t\tlet name: string;\n\t\tif (isRoot) {\n\t\t\tname =\n\t\t\t\titem.pid === mainPid\n\t\t\t\t\t? `${this.productService.applicationName} main`\n\t\t\t\t\t: \"remote agent\";\n\t\t} else if (mapProcessToName.has(item.pid)) {\n\t\t\tname = mapProcessToName.get(item.pid)!;\n\t\t} else {\n\t\t\tname = `${\"  \".repeat(indent)} ${item.name}`;\n\t\t}\n\n\t\tconst memory =\n\t\t\tprocess.platform === \"win32\"\n\t\t\t\t? item.mem\n\t\t\t\t: osLib.totalmem() * (item.mem / 100);\n\t\toutput.push(\n\t\t\t`${item.load.toFixed(0).padStart(5, \" \")}\\t${(memory / ByteSize.MB).toFixed(0).padStart(6, \" \")}\\t${item.pid.toFixed(0).padStart(6, \" \")}\\t${name}`,\n\t\t);\n\n\t\t// Recurse into children if any\n\t\tif (Array.isArray(item.children)) {\n\t\t\titem.children.forEach((child) =>\n\t\t\t\tthis.formatProcessItem(\n\t\t\t\t\tmainPid,\n\t\t\t\t\tmapProcessToName,\n\t\t\t\t\toutput,\n\t\t\t\t\tchild,\n\t\t\t\t\tindent + 1,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async getWorkspaceFileExtensions(\n\t\tworkspace: IWorkspace,\n\t): Promise<{ extensions: string[] }> {\n\t\tconst items = new Set<string>();\n\t\tfor (const { uri } of workspace.folders) {\n\t\t\tconst folderUri = URI.revive(uri);\n\t\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst folder = folderUri.fsPath;\n\t\t\ttry {\n\t\t\t\tconst stats = await collectWorkspaceStats(folder, [\n\t\t\t\t\t\"node_modules\",\n\t\t\t\t\t\".git\",\n\t\t\t\t]);\n\t\t\t\tstats.fileTypes.forEach((item) => items.add(item.name));\n\t\t\t} catch {}\n\t\t}\n\t\treturn { extensions: [...items] };\n\t}\n\n\tpublic async reportWorkspaceStats(\n\t\tworkspace: IWorkspaceInformation,\n\t): Promise<void> {\n\t\tfor (const { uri } of workspace.folders) {\n\t\t\tconst folderUri = URI.revive(uri);\n\t\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst folder = folderUri.fsPath;\n\t\t\ttry {\n\t\t\t\tconst stats = await collectWorkspaceStats(folder, [\n\t\t\t\t\t\"node_modules\",\n\t\t\t\t\t\".git\",\n\t\t\t\t]);\n\t\t\t\ttype WorkspaceStatsClassification = {\n\t\t\t\t\towner: \"lramos15\";\n\t\t\t\t\tcomment: \"Metadata related to the workspace\";\n\t\t\t\t\t\"workspace.id\": {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"A UUID given to a workspace to identify it.\";\n\t\t\t\t\t};\n\t\t\t\t\trendererSessionId: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"The ID of the session\";\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\ttype WorkspaceStatsEvent = {\n\t\t\t\t\t\"workspace.id\": string | undefined;\n\t\t\t\t\trendererSessionId: string;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tWorkspaceStatsEvent,\n\t\t\t\t\tWorkspaceStatsClassification\n\t\t\t\t>(\"workspace.stats\", {\n\t\t\t\t\t\"workspace.id\": workspace.telemetryId,\n\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t});\n\t\t\t\ttype WorkspaceStatsFileClassification = {\n\t\t\t\t\towner: \"lramos15\";\n\t\t\t\t\tcomment: \"Helps us gain insights into what type of files are being used in a workspace\";\n\t\t\t\t\trendererSessionId: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"The ID of the session.\";\n\t\t\t\t\t};\n\t\t\t\t\ttype: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"The type of file\";\n\t\t\t\t\t};\n\t\t\t\t\tcount: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"How many types of that file are present\";\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\ttype WorkspaceStatsFileEvent = {\n\t\t\t\t\trendererSessionId: string;\n\t\t\t\t\ttype: string;\n\t\t\t\t\tcount: number;\n\t\t\t\t};\n\t\t\t\tstats.fileTypes.forEach((e) => {\n\t\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t\tWorkspaceStatsFileEvent,\n\t\t\t\t\t\tWorkspaceStatsFileClassification\n\t\t\t\t\t>(\"workspace.stats.file\", {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tstats.launchConfigFiles.forEach((e) => {\n\t\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t\tWorkspaceStatsFileEvent,\n\t\t\t\t\t\tWorkspaceStatsFileClassification\n\t\t\t\t\t>(\"workspace.stats.launchConfigFile\", {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tstats.configFiles.forEach((e) => {\n\t\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t\tWorkspaceStatsFileEvent,\n\t\t\t\t\t\tWorkspaceStatsFileClassification\n\t\t\t\t\t>(\"workspace.stats.configFiles\", {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// Workspace stats metadata\n\t\t\t\ttype WorkspaceStatsMetadataClassification = {\n\t\t\t\t\towner: \"jrieken\";\n\t\t\t\t\tcomment: \"Metadata about workspace metadata collection\";\n\t\t\t\t\tduration: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"How did it take to make workspace stats\";\n\t\t\t\t\t};\n\t\t\t\t\treachedLimit: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"Did making workspace stats reach its limits\";\n\t\t\t\t\t};\n\t\t\t\t\tfileCount: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"How many files did workspace stats discover\";\n\t\t\t\t\t};\n\t\t\t\t\treaddirCount: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"How many readdir call were needed\";\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\ttype WorkspaceStatsMetadata = {\n\t\t\t\t\tduration: number;\n\t\t\t\t\treachedLimit: boolean;\n\t\t\t\t\tfileCount: number;\n\t\t\t\t\treaddirCount: number;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tWorkspaceStatsMetadata,\n\t\t\t\t\tWorkspaceStatsMetadataClassification\n\t\t\t\t>(\"workspace.stats.metadata\", {\n\t\t\t\t\tduration: stats.totalScanTime,\n\t\t\t\t\treachedLimit: stats.maxFilesReached,\n\t\t\t\t\tfileCount: stats.fileCount,\n\t\t\t\t\treaddirCount: stats.totalReaddirCount,\n\t\t\t\t});\n\t\t\t} catch {\n\t\t\t\t// Report nothing if collecting metadata fails.\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["filter", "line"]
}
