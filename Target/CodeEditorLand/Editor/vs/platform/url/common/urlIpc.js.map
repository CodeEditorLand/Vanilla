{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/url/common/urlIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../base/common/event.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type {\n\tClient,\n\tIChannel,\n\tIClientRouter,\n\tIConnectionHub,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { IOpenURLOptions, IURLHandler } from \"./url.js\";\n\nexport class URLHandlerChannel implements IServerChannel {\n\tconstructor(private handler: IURLHandler) {}\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase \"handleURL\":\n\t\t\t\treturn this.handler.handleURL(URI.revive(arg[0]), arg[1]);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class URLHandlerChannelClient implements IURLHandler {\n\tconstructor(private channel: IChannel) {}\n\n\thandleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\treturn this.channel.call(\"handleURL\", [uri.toJSON(), options]);\n\t}\n}\n\nexport class URLHandlerRouter implements IClientRouter<string> {\n\tconstructor(\n\t\tprivate next: IClientRouter<string>,\n\t\tprivate readonly logService: ILogService,\n\t) {}\n\n\tasync routeCall(\n\t\thub: IConnectionHub<string>,\n\t\tcommand: string,\n\t\targ?: any,\n\t\tcancellationToken?: CancellationToken,\n\t): Promise<Client<string>> {\n\t\tif (command !== \"handleURL\") {\n\t\t\tthrow new Error(`Call not found: ${command}`);\n\t\t}\n\n\t\tif (Array.isArray(arg) && arg.length > 0) {\n\t\t\tconst uri = URI.revive(arg[0]);\n\n\t\t\tthis.logService.trace(\n\t\t\t\t\"URLHandlerRouter#routeCall() with URI argument\",\n\t\t\t\turi.toString(true),\n\t\t\t);\n\n\t\t\tif (uri.query) {\n\t\t\t\tconst match = /\\bwindowId=(\\d+)/.exec(uri.query);\n\n\t\t\t\tif (match) {\n\t\t\t\t\tconst windowId = match[1];\n\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`URLHandlerRouter#routeCall(): found windowId query parameter with value \"${windowId}\"`,\n\t\t\t\t\t\turi.toString(true),\n\t\t\t\t\t);\n\n\t\t\t\t\tconst regex = new RegExp(`window:${windowId}`);\n\t\t\t\t\tconst connection = hub.connections.find((c) => {\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t\"URLHandlerRouter#routeCall(): testing connection\",\n\t\t\t\t\t\t\tc.ctx,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn regex.test(c.ctx);\n\t\t\t\t\t});\n\t\t\t\t\tif (connection) {\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t\"URLHandlerRouter#routeCall(): found a connection to route\",\n\t\t\t\t\t\t\turi.toString(true),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn connection;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t\"URLHandlerRouter#routeCall(): did not find a connection to route\",\n\t\t\t\t\t\t\turi.toString(true),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\"URLHandlerRouter#routeCall(): did not find windowId query parameter\",\n\t\t\t\t\t\turi.toString(true),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"URLHandlerRouter#routeCall() without URI argument\",\n\t\t\t);\n\t\t}\n\n\t\treturn this.next.routeCall(hub, command, arg, cancellationToken);\n\t}\n\n\trouteEvent(\n\t\t_: IConnectionHub<string>,\n\t\tevent: string,\n\t): Promise<Client<string>> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n}\n"],
  "mappings": ";;AAOA,SAAS,WAAW;AAWb,MAAM,kBAA4C;AAAA,EACxD,YAAoB,SAAsB;AAAtB;AAAA,EAAuB;AAAA,EAnB5C,OAkByD;AAAA;AAAA;AAAA,EAGxD,OAAU,GAAY,OAAyB;AAC9C,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,KAAK,GAAY,SAAiB,KAAyB;AAC1D,YAAQ,SAAS;AAAA,MAChB,KAAK;AACJ,eAAO,KAAK,QAAQ,UAAU,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,IAC1D;AAEA,UAAM,IAAI,MAAM,mBAAmB,OAAO,EAAE;AAAA,EAC7C;AACD;AAEO,MAAM,wBAA+C;AAAA,EAC3D,YAAoB,SAAmB;AAAnB;AAAA,EAAoB;AAAA,EApCzC,OAmC4D;AAAA;AAAA;AAAA,EAG3D,UAAU,KAAU,SAA6C;AAChE,WAAO,KAAK,QAAQ,KAAK,aAAa,CAAC,IAAI,OAAO,GAAG,OAAO,CAAC;AAAA,EAC9D;AACD;AAEO,MAAM,iBAAkD;AAAA,EAC9D,YACS,MACS,YAChB;AAFO;AACS;AAAA,EACf;AAAA,EA/CJ,OA2C+D;AAAA;AAAA;AAAA,EAM9D,MAAM,UACL,KACA,SACA,KACA,mBAC0B;AAC1B,QAAI,YAAY,aAAa;AAC5B,YAAM,IAAI,MAAM,mBAAmB,OAAO,EAAE;AAAA,IAC7C;AAEA,QAAI,MAAM,QAAQ,GAAG,KAAK,IAAI,SAAS,GAAG;AACzC,YAAM,MAAM,IAAI,OAAO,IAAI,CAAC,CAAC;AAE7B,WAAK,WAAW;AAAA,QACf;AAAA,QACA,IAAI,SAAS,IAAI;AAAA,MAClB;AAEA,UAAI,IAAI,OAAO;AACd,cAAM,QAAQ,mBAAmB,KAAK,IAAI,KAAK;AAE/C,YAAI,OAAO;AACV,gBAAM,WAAW,MAAM,CAAC;AAExB,eAAK,WAAW;AAAA,YACf,4EAA4E,QAAQ;AAAA,YACpF,IAAI,SAAS,IAAI;AAAA,UAClB;AAEA,gBAAM,QAAQ,IAAI,OAAO,UAAU,QAAQ,EAAE;AAC7C,gBAAM,aAAa,IAAI,YAAY,KAAK,CAAC,MAAM;AAC9C,iBAAK,WAAW;AAAA,cACf;AAAA,cACA,EAAE;AAAA,YACH;AAEA,mBAAO,MAAM,KAAK,EAAE,GAAG;AAAA,UACxB,CAAC;AACD,cAAI,YAAY;AACf,iBAAK,WAAW;AAAA,cACf;AAAA,cACA,IAAI,SAAS,IAAI;AAAA,YAClB;AAEA,mBAAO;AAAA,UACR,OAAO;AACN,iBAAK,WAAW;AAAA,cACf;AAAA,cACA,IAAI,SAAS,IAAI;AAAA,YAClB;AAAA,UACD;AAAA,QACD,OAAO;AACN,eAAK,WAAW;AAAA,YACf;AAAA,YACA,IAAI,SAAS,IAAI;AAAA,UAClB;AAAA,QACD;AAAA,MACD;AAAA,IACD,OAAO;AACN,WAAK,WAAW;AAAA,QACf;AAAA,MACD;AAAA,IACD;AAEA,WAAO,KAAK,KAAK,UAAU,KAAK,SAAS,KAAK,iBAAiB;AAAA,EAChE;AAAA,EAEA,WACC,GACA,OAC0B;AAC1B,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AACD;",
  "names": []
}
