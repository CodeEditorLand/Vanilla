import{URI as c}from"../../../base/common/uri.js";class h{constructor(t){this.handler=t}listen(t,e){throw new Error(`Event not found: ${e}`)}call(t,e,n){switch(e){case"handleURL":return this.handler.handleURL(c.revive(n[0]),n[1])}throw new Error(`Call not found: ${e}`)}}class p{constructor(t){this.channel=t}handleURL(t,e){return this.channel.call("handleURL",[t.toJSON(),e])}}class g{constructor(t,e){this.next=t;this.logService=e}async routeCall(t,e,n,u){if(e!=="handleURL")throw new Error(`Call not found: ${e}`);if(Array.isArray(n)&&n.length>0){const r=c.revive(n[0]);if(this.logService.trace("URLHandlerRouter#routeCall() with URI argument",r.toString(!0)),r.query){const i=/\bwindowId=(\d+)/.exec(r.query);if(i){const l=i[1];this.logService.trace(`URLHandlerRouter#routeCall(): found windowId query parameter with value "${l}"`,r.toString(!0));const d=new RegExp(`window:${l}`),a=t.connections.find(s=>(this.logService.trace("URLHandlerRouter#routeCall(): testing connection",s.ctx),d.test(s.ctx)));if(a)return this.logService.trace("URLHandlerRouter#routeCall(): found a connection to route",r.toString(!0)),a;this.logService.trace("URLHandlerRouter#routeCall(): did not find a connection to route",r.toString(!0))}else this.logService.trace("URLHandlerRouter#routeCall(): did not find windowId query parameter",r.toString(!0))}}else this.logService.trace("URLHandlerRouter#routeCall() without URI argument");return this.next.routeCall(t,e,n,u)}routeEvent(t,e){throw new Error(`Event not found: ${e}`)}}export{h as URLHandlerChannel,p as URLHandlerChannelClient,g as URLHandlerRouter};
