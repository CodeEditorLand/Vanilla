import{app as a}from"electron";import{disposableTimeout as p}from"../../../base/common/async.js";import{Event as s}from"../../../base/common/event.js";import{Disposable as d}from"../../../base/common/lifecycle.js";import{isWindows as m}from"../../../base/common/platform.js";import{URI as f}from"../../../base/common/uri.js";class I extends d{constructor(r,t,o,l,c,n){super();this.urlService=t;this.logService=n;if(r&&(n.trace("ElectronURLListener initialUrisToHandle:",r.map(e=>e.originalUrl)),this.uris=r),m){const e=l.isBuilt?[]:[`"${l.appRoot}"`];e.push("--open-url","--"),a.setAsDefaultProtocolClient(c.urlProtocol,process.execPath,e)}const u=s.map(s.fromNodeEventEmitter(a,"open-url",(e,i)=>({event:e,url:i})),({event:e,url:i})=>(e.preventDefault(),i));this._register(u(e=>{const i=this.uriFromRawUrl(e);i&&this.urlService.open(i,{originalUrl:e})})),o.getWindows().filter(e=>e.isReady).length>0?(n.trace("ElectronURLListener: window is ready to handle URLs"),this.flush()):(n.trace("ElectronURLListener: waiting for window to be ready to handle URLs..."),this._register(s.once(o.onDidSignalReadyWindow)(()=>this.flush())))}uris=[];retryCount=0;uriFromRawUrl(r){try{return f.parse(r)}catch{return}}async flush(){if(this.retryCount++>10){this.logService.trace("ElectronURLListener#flush(): giving up after 10 retries");return}this.logService.trace("ElectronURLListener#flush(): flushing URLs");const r=[];for(const t of this.uris)await this.urlService.open(t.uri,{originalUrl:t.originalUrl})?this.logService.trace("ElectronURLListener#flush(): URL was handled",t.originalUrl):(this.logService.trace("ElectronURLListener#flush(): URL was not yet handled",t.originalUrl),r.push(t));r.length!==0&&(this.uris=r,p(()=>this.flush(),500,this._store))}}export{I as ElectronURLListener};
