{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/url/electron-main/electronUrlListener.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, Event as ElectronEvent } from 'electron';\nimport { disposableTimeout } from '../../../base/common/async.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isWindows } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IEnvironmentMainService } from '../../environment/electron-main/environmentMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IURLService } from '../common/url.js';\nimport { IProtocolUrl } from './url.js';\nimport { IWindowsMainService } from '../../windows/electron-main/windows.js';\n\n/**\n * A listener for URLs that are opened from the OS and handled by VSCode.\n * Depending on the platform, this works differently:\n * - Windows: we use `app.setAsDefaultProtocolClient()` to register VSCode with the OS\n *            and additionally add the `open-url` command line argument to identify.\n * - macOS:   we rely on `app.on('open-url')` to be called by the OS\n * - Linux:   we have a special shortcut installed (`resources/linux/code-url-handler.desktop`)\n *            that calls VSCode with the `open-url` command line argument\n *            (https://github.com/microsoft/vscode/pull/56727)\n */\nexport class ElectronURLListener extends Disposable {\n\n\tprivate uris: IProtocolUrl[] = [];\n\tprivate retryCount = 0;\n\n\tconstructor(\n\t\tinitialProtocolUrls: IProtocolUrl[] | undefined,\n\t\tprivate readonly urlService: IURLService,\n\t\twindowsMainService: IWindowsMainService,\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\tproductService: IProductService,\n\t\tprivate readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tif (initialProtocolUrls) {\n\t\t\tlogService.trace('ElectronURLListener initialUrisToHandle:', initialProtocolUrls.map(url => url.originalUrl));\n\n\t\t\t// the initial set of URIs we need to handle once the window is ready\n\t\t\tthis.uris = initialProtocolUrls;\n\t\t}\n\n\t\t// Windows: install as protocol handler\n\t\tif (isWindows) {\n\t\t\tconst windowsParameters = environmentMainService.isBuilt ? [] : [`\"${environmentMainService.appRoot}\"`];\n\t\t\twindowsParameters.push('--open-url', '--');\n\t\t\tapp.setAsDefaultProtocolClient(productService.urlProtocol, process.execPath, windowsParameters);\n\t\t}\n\n\t\t// macOS: listen to `open-url` events from here on to handle\n\t\tconst onOpenElectronUrl = Event.map(\n\t\t\tEvent.fromNodeEventEmitter(app, 'open-url', (event: ElectronEvent, url: string) => ({ event, url })),\n\t\t\t({ event, url }) => {\n\t\t\t\tevent.preventDefault(); // always prevent default and return the url as string\n\n\t\t\t\treturn url;\n\t\t\t});\n\n\t\tthis._register(onOpenElectronUrl(url => {\n\t\t\tconst uri = this.uriFromRawUrl(url);\n\t\t\tif (!uri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.urlService.open(uri, { originalUrl: url });\n\t\t}));\n\n\t\t// Send initial links to the window once it has loaded\n\t\tconst isWindowReady = windowsMainService.getWindows()\n\t\t\t.filter(window => window.isReady)\n\t\t\t.length > 0;\n\n\t\tif (isWindowReady) {\n\t\t\tlogService.trace('ElectronURLListener: window is ready to handle URLs');\n\n\t\t\tthis.flush();\n\t\t} else {\n\t\t\tlogService.trace('ElectronURLListener: waiting for window to be ready to handle URLs...');\n\n\t\t\tthis._register(Event.once(windowsMainService.onDidSignalReadyWindow)(() => this.flush()));\n\t\t}\n\t}\n\n\tprivate uriFromRawUrl(url: string): URI | undefined {\n\t\ttry {\n\t\t\treturn URI.parse(url);\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate async flush(): Promise<void> {\n\t\tif (this.retryCount++ > 10) {\n\t\t\tthis.logService.trace('ElectronURLListener#flush(): giving up after 10 retries');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace('ElectronURLListener#flush(): flushing URLs');\n\n\t\tconst uris: IProtocolUrl[] = [];\n\n\t\tfor (const obj of this.uris) {\n\t\t\tconst handled = await this.urlService.open(obj.uri, { originalUrl: obj.originalUrl });\n\t\t\tif (handled) {\n\t\t\t\tthis.logService.trace('ElectronURLListener#flush(): URL was handled', obj.originalUrl);\n\t\t\t} else {\n\t\t\t\tthis.logService.trace('ElectronURLListener#flush(): URL was not yet handled', obj.originalUrl);\n\n\t\t\t\turis.push(obj);\n\t\t\t}\n\t\t}\n\n\t\tif (uris.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.uris = uris;\n\t\tdisposableTimeout(() => this.flush(), 500, this._store);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,KAAK,SAAS,qBAAqB;AAC5C,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AACpB,SAAS,+BAA+B;AACxC,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB;AAC7B,SAAS,2BAA2B;AAY7B,MAAM,4BAA4B,WAAW;AAAA,EAKnD,YACC,qBACiB,YACjB,oBACA,wBACA,gBACiB,YAChB;AACD,UAAM;AANW;AAIA;AAIjB,QAAI,qBAAqB;AACxB,iBAAW,MAAM,4CAA4C,oBAAoB,IAAI,SAAO,IAAI,WAAW,CAAC;AAG5G,WAAK,OAAO;AAAA,IACb;AAGA,QAAI,WAAW;AACd,YAAM,oBAAoB,uBAAuB,UAAU,CAAC,IAAI,CAAC,IAAI,uBAAuB,OAAO,GAAG;AACtG,wBAAkB,KAAK,cAAc,IAAI;AACzC,UAAI,2BAA2B,eAAe,aAAa,QAAQ,UAAU,iBAAiB;AAAA,IAC/F;AAGA,UAAM,oBAAoB,MAAM;AAAA,MAC/B,MAAM,qBAAqB,KAAK,YAAY,CAAC,OAAsB,SAAiB,EAAE,OAAO,IAAI,EAAE;AAAA,MACnG,CAAC,EAAE,OAAO,IAAI,MAAM;AACnB,cAAM,eAAe;AAErB,eAAO;AAAA,MACR;AAAA,IAAC;AAEF,SAAK,UAAU,kBAAkB,SAAO;AACvC,YAAM,MAAM,KAAK,cAAc,GAAG;AAClC,UAAI,CAAC,KAAK;AACT;AAAA,MACD;AAEA,WAAK,WAAW,KAAK,KAAK,EAAE,aAAa,IAAI,CAAC;AAAA,IAC/C,CAAC,CAAC;AAGF,UAAM,gBAAgB,mBAAmB,WAAW,EAClD,OAAO,YAAU,OAAO,OAAO,EAC/B,SAAS;AAEX,QAAI,eAAe;AAClB,iBAAW,MAAM,qDAAqD;AAEtE,WAAK,MAAM;AAAA,IACZ,OAAO;AACN,iBAAW,MAAM,uEAAuE;AAExF,WAAK,UAAU,MAAM,KAAK,mBAAmB,sBAAsB,EAAE,MAAM,KAAK,MAAM,CAAC,CAAC;AAAA,IACzF;AAAA,EACD;AAAA,EAzFD,OA4BoD;AAAA;AAAA;AAAA,EAE3C,OAAuB,CAAC;AAAA,EACxB,aAAa;AAAA,EA4Db,cAAc,KAA8B;AACnD,QAAI;AACH,aAAO,IAAI,MAAM,GAAG;AAAA,IACrB,SAAS,GAAG;AACX,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,MAAc,QAAuB;AACpC,QAAI,KAAK,eAAe,IAAI;AAC3B,WAAK,WAAW,MAAM,yDAAyD;AAE/E;AAAA,IACD;AAEA,SAAK,WAAW,MAAM,4CAA4C;AAElE,UAAM,OAAuB,CAAC;AAE9B,eAAW,OAAO,KAAK,MAAM;AAC5B,YAAM,UAAU,MAAM,KAAK,WAAW,KAAK,IAAI,KAAK,EAAE,aAAa,IAAI,YAAY,CAAC;AACpF,UAAI,SAAS;AACZ,aAAK,WAAW,MAAM,gDAAgD,IAAI,WAAW;AAAA,MACtF,OAAO;AACN,aAAK,WAAW,MAAM,wDAAwD,IAAI,WAAW;AAE7F,aAAK,KAAK,GAAG;AAAA,MACd;AAAA,IACD;AAEA,QAAI,KAAK,WAAW,GAAG;AACtB;AAAA,IACD;AAEA,SAAK,OAAO;AACZ,sBAAkB,MAAM,KAAK,MAAM,GAAG,KAAK,KAAK,MAAM;AAAA,EACvD;AACD;",
  "names": []
}
