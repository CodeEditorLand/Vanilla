{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/url/electron-main/electronUrlListener.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type Event as ElectronEvent, app } from \"electron\";\nimport { disposableTimeout } from \"../../../base/common/async.js\";\nimport { Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { isWindows } from \"../../../base/common/platform.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type { IEnvironmentMainService } from \"../../environment/electron-main/environmentMainService.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { IProductService } from \"../../product/common/productService.js\";\nimport type { IWindowsMainService } from \"../../windows/electron-main/windows.js\";\nimport type { IURLService } from \"../common/url.js\";\nimport type { IProtocolUrl } from \"./url.js\";\n\n/**\n * A listener for URLs that are opened from the OS and handled by VSCode.\n * Depending on the platform, this works differently:\n * - Windows: we use `app.setAsDefaultProtocolClient()` to register VSCode with the OS\n *            and additionally add the `open-url` command line argument to identify.\n * - macOS:   we rely on `app.on('open-url')` to be called by the OS\n * - Linux:   we have a special shortcut installed (`resources/linux/code-url-handler.desktop`)\n *            that calls VSCode with the `open-url` command line argument\n *            (https://github.com/microsoft/vscode/pull/56727)\n */\nexport class ElectronURLListener extends Disposable {\n\tprivate uris: IProtocolUrl[] = [];\n\tprivate retryCount = 0;\n\n\tconstructor(\n\t\tinitialProtocolUrls: IProtocolUrl[] | undefined,\n\t\tprivate readonly urlService: IURLService,\n\t\twindowsMainService: IWindowsMainService,\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\tproductService: IProductService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tif (initialProtocolUrls) {\n\t\t\tlogService.trace(\n\t\t\t\t\"ElectronURLListener initialUrisToHandle:\",\n\t\t\t\tinitialProtocolUrls.map((url) => url.originalUrl),\n\t\t\t);\n\n\t\t\t// the initial set of URIs we need to handle once the window is ready\n\t\t\tthis.uris = initialProtocolUrls;\n\t\t}\n\n\t\t// Windows: install as protocol handler\n\t\tif (isWindows) {\n\t\t\tconst windowsParameters = environmentMainService.isBuilt\n\t\t\t\t? []\n\t\t\t\t: [`\"${environmentMainService.appRoot}\"`];\n\t\t\twindowsParameters.push(\"--open-url\", \"--\");\n\t\t\tapp.setAsDefaultProtocolClient(\n\t\t\t\tproductService.urlProtocol,\n\t\t\t\tprocess.execPath,\n\t\t\t\twindowsParameters,\n\t\t\t);\n\t\t}\n\n\t\t// macOS: listen to `open-url` events from here on to handle\n\t\tconst onOpenElectronUrl = Event.map(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\tapp,\n\t\t\t\t\"open-url\",\n\t\t\t\t(event: ElectronEvent, url: string) => ({ event, url }),\n\t\t\t),\n\t\t\t({ event, url }) => {\n\t\t\t\tevent.preventDefault(); // always prevent default and return the url as string\n\n\t\t\t\treturn url;\n\t\t\t},\n\t\t);\n\n\t\tthis._register(\n\t\t\tonOpenElectronUrl((url) => {\n\t\t\t\tconst uri = this.uriFromRawUrl(url);\n\t\t\t\tif (!uri) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.urlService.open(uri, { originalUrl: url });\n\t\t\t}),\n\t\t);\n\n\t\t// Send initial links to the window once it has loaded\n\t\tconst isWindowReady =\n\t\t\twindowsMainService.getWindows().filter((window) => window.isReady)\n\t\t\t\t.length > 0;\n\n\t\tif (isWindowReady) {\n\t\t\tlogService.trace(\n\t\t\t\t\"ElectronURLListener: window is ready to handle URLs\",\n\t\t\t);\n\n\t\t\tthis.flush();\n\t\t} else {\n\t\t\tlogService.trace(\n\t\t\t\t\"ElectronURLListener: waiting for window to be ready to handle URLs...\",\n\t\t\t);\n\n\t\t\tthis._register(\n\t\t\t\tEvent.once(windowsMainService.onDidSignalReadyWindow)(() =>\n\t\t\t\t\tthis.flush(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate uriFromRawUrl(url: string): URI | undefined {\n\t\ttry {\n\t\t\treturn URI.parse(url);\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate async flush(): Promise<void> {\n\t\tif (this.retryCount++ > 10) {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"ElectronURLListener#flush(): giving up after 10 retries\",\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(\"ElectronURLListener#flush(): flushing URLs\");\n\n\t\tconst uris: IProtocolUrl[] = [];\n\n\t\tfor (const obj of this.uris) {\n\t\t\tconst handled = await this.urlService.open(obj.uri, {\n\t\t\t\toriginalUrl: obj.originalUrl,\n\t\t\t});\n\t\t\tif (handled) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"ElectronURLListener#flush(): URL was handled\",\n\t\t\t\t\tobj.originalUrl,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"ElectronURLListener#flush(): URL was not yet handled\",\n\t\t\t\t\tobj.originalUrl,\n\t\t\t\t);\n\n\t\t\t\turis.push(obj);\n\t\t\t}\n\t\t}\n\n\t\tif (uris.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.uris = uris;\n\t\tdisposableTimeout(() => this.flush(), 500, this._store);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAsC,WAAW;AACjD,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AAkBb,MAAM,4BAA4B,WAAW;AAAA,EAInD,YACC,qBACiB,YACjB,oBACA,wBACA,gBACiB,YAChB;AACD,UAAM;AANW;AAIA;AAIjB,QAAI,qBAAqB;AACxB,iBAAW;AAAA,QACV;AAAA,QACA,oBAAoB,IAAI,CAAC,QAAQ,IAAI,WAAW;AAAA,MACjD;AAGA,WAAK,OAAO;AAAA,IACb;AAGA,QAAI,WAAW;AACd,YAAM,oBAAoB,uBAAuB,UAC9C,CAAC,IACD,CAAC,IAAI,uBAAuB,OAAO,GAAG;AACzC,wBAAkB,KAAK,cAAc,IAAI;AACzC,UAAI;AAAA,QACH,eAAe;AAAA,QACf,QAAQ;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAGA,UAAM,oBAAoB,MAAM;AAAA,MAC/B,MAAM;AAAA,QACL;AAAA,QACA;AAAA,QACA,CAAC,OAAsB,SAAiB,EAAE,OAAO,IAAI;AAAA,MACtD;AAAA,MACA,CAAC,EAAE,OAAO,IAAI,MAAM;AACnB,cAAM,eAAe;AAErB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,SAAK;AAAA,MACJ,kBAAkB,CAAC,QAAQ;AAC1B,cAAM,MAAM,KAAK,cAAc,GAAG;AAClC,YAAI,CAAC,KAAK;AACT;AAAA,QACD;AAEA,aAAK,WAAW,KAAK,KAAK,EAAE,aAAa,IAAI,CAAC;AAAA,MAC/C,CAAC;AAAA,IACF;AAGA,UAAM,gBACL,mBAAmB,WAAW,EAAE,OAAO,CAAC,WAAW,OAAO,OAAO,EAC/D,SAAS;AAEZ,QAAI,eAAe;AAClB,iBAAW;AAAA,QACV;AAAA,MACD;AAEA,WAAK,MAAM;AAAA,IACZ,OAAO;AACN,iBAAW;AAAA,QACV;AAAA,MACD;AAEA,WAAK;AAAA,QACJ,MAAM,KAAK,mBAAmB,sBAAsB;AAAA,UAAE,MACrD,KAAK,MAAM;AAAA,QACZ;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAhHD,OA4BoD;AAAA;AAAA;AAAA,EAC3C,OAAuB,CAAC;AAAA,EACxB,aAAa;AAAA,EAoFb,cAAc,KAA8B;AACnD,QAAI;AACH,aAAO,IAAI,MAAM,GAAG;AAAA,IACrB,SAAS,GAAG;AACX,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,MAAc,QAAuB;AACpC,QAAI,KAAK,eAAe,IAAI;AAC3B,WAAK,WAAW;AAAA,QACf;AAAA,MACD;AAEA;AAAA,IACD;AAEA,SAAK,WAAW,MAAM,4CAA4C;AAElE,UAAM,OAAuB,CAAC;AAE9B,eAAW,OAAO,KAAK,MAAM;AAC5B,YAAM,UAAU,MAAM,KAAK,WAAW,KAAK,IAAI,KAAK;AAAA,QACnD,aAAa,IAAI;AAAA,MAClB,CAAC;AACD,UAAI,SAAS;AACZ,aAAK,WAAW;AAAA,UACf;AAAA,UACA,IAAI;AAAA,QACL;AAAA,MACD,OAAO;AACN,aAAK,WAAW;AAAA,UACf;AAAA,UACA,IAAI;AAAA,QACL;AAEA,aAAK,KAAK,GAAG;AAAA,MACd;AAAA,IACD;AAEA,QAAI,KAAK,WAAW,GAAG;AACtB;AAAA,IACD;AAEA,SAAK,OAAO;AACZ,sBAAkB,MAAM,KAAK,MAAM,GAAG,KAAK,KAAK,MAAM;AAAA,EACvD;AACD;",
  "names": []
}
