{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/browser/remoteAuthorityResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from \"../../../base/browser/window.js\";\nimport { DeferredPromise } from \"../../../base/common/async.js\";\nimport * as errors from \"../../../base/common/errors.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { RemoteAuthorities } from \"../../../base/common/network.js\";\nimport * as performance from \"../../../base/common/performance.js\";\nimport { StopWatch } from \"../../../base/common/stopwatch.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\ttype IRemoteAuthorityResolverService,\n\ttype IRemoteConnectionData,\n\tRemoteConnectionType,\n\ttype ResolvedAuthority,\n\ttype ResolvedOptions,\n\ttype ResolverResult,\n\tWebSocketRemoteConnection,\n\tgetRemoteAuthorityPrefix,\n} from \"../common/remoteAuthorityResolver.js\";\nimport { parseAuthorityWithOptionalPort } from \"../common/remoteHosts.js\";\n\nexport class RemoteAuthorityResolverService\n\textends Disposable\n\timplements IRemoteAuthorityResolverService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeConnectionData = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeConnectionData =\n\t\tthis._onDidChangeConnectionData.event;\n\n\tprivate readonly _resolveAuthorityRequests = new Map<\n\t\tstring,\n\t\tDeferredPromise<ResolverResult>\n\t>();\n\tprivate readonly _cache = new Map<string, ResolverResult>();\n\tprivate readonly _connectionToken: Promise<string> | string | undefined;\n\tprivate readonly _connectionTokens: Map<string, string>;\n\tprivate readonly _isWorkbenchOptionsBasedResolution: boolean;\n\n\tconstructor(\n\t\tisWorkbenchOptionsBasedResolution: boolean,\n\t\tconnectionToken: Promise<string> | string | undefined,\n\t\tresourceUriProvider: ((uri: URI) => URI) | undefined,\n\t\tserverBasePath: string | undefined,\n\t\t@IProductService productService: IProductService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._connectionToken = connectionToken;\n\t\tthis._connectionTokens = new Map<string, string>();\n\t\tthis._isWorkbenchOptionsBasedResolution =\n\t\t\tisWorkbenchOptionsBasedResolution;\n\t\tif (resourceUriProvider) {\n\t\t\tRemoteAuthorities.setDelegate(resourceUriProvider);\n\t\t}\n\t\tRemoteAuthorities.setServerRootPath(productService, serverBasePath);\n\t}\n\n\tasync resolveAuthority(authority: string): Promise<ResolverResult> {\n\t\tlet result = this._resolveAuthorityRequests.get(authority);\n\t\tif (!result) {\n\t\t\tresult = new DeferredPromise<ResolverResult>();\n\t\t\tthis._resolveAuthorityRequests.set(authority, result);\n\t\t\tif (this._isWorkbenchOptionsBasedResolution) {\n\t\t\t\tthis._doResolveAuthority(authority).then(\n\t\t\t\t\t(v) => result!.complete(v),\n\t\t\t\t\t(err) => result!.error(err),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn result.p;\n\t}\n\n\tasync getCanonicalURI(uri: URI): Promise<URI> {\n\t\t// todo@connor4312 make this work for web\n\t\treturn uri;\n\t}\n\n\tgetConnectionData(authority: string): IRemoteConnectionData | null {\n\t\tif (!this._cache.has(authority)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst resolverResult = this._cache.get(authority)!;\n\t\tconst connectionToken =\n\t\t\tthis._connectionTokens.get(authority) ||\n\t\t\tresolverResult.authority.connectionToken;\n\t\treturn {\n\t\t\tconnectTo: resolverResult.authority.connectTo,\n\t\t\tconnectionToken: connectionToken,\n\t\t};\n\t}\n\n\tprivate async _doResolveAuthority(\n\t\tauthority: string,\n\t): Promise<ResolverResult> {\n\t\tconst authorityPrefix = getRemoteAuthorityPrefix(authority);\n\t\tconst sw = StopWatch.create(false);\n\t\tthis._logService.info(\n\t\t\t`Resolving connection token (${authorityPrefix})...`,\n\t\t);\n\t\tperformance.mark(`code/willResolveConnectionToken/${authorityPrefix}`);\n\t\tconst connectionToken = await Promise.resolve(\n\t\t\tthis._connectionTokens.get(authority) || this._connectionToken,\n\t\t);\n\t\tperformance.mark(`code/didResolveConnectionToken/${authorityPrefix}`);\n\t\tthis._logService.info(\n\t\t\t`Resolved connection token (${authorityPrefix}) after ${sw.elapsed()} ms`,\n\t\t);\n\t\tconst defaultPort = /^https:/.test(mainWindow.location.href) ? 443 : 80;\n\t\tconst { host, port } = parseAuthorityWithOptionalPort(\n\t\t\tauthority,\n\t\t\tdefaultPort,\n\t\t);\n\t\tconst result: ResolverResult = {\n\t\t\tauthority: {\n\t\t\t\tauthority,\n\t\t\t\tconnectTo: new WebSocketRemoteConnection(host, port),\n\t\t\t\tconnectionToken,\n\t\t\t},\n\t\t};\n\t\tRemoteAuthorities.set(authority, host, port);\n\t\tthis._cache.set(authority, result);\n\t\tthis._onDidChangeConnectionData.fire();\n\t\treturn result;\n\t}\n\n\t_clearResolvedAuthority(authority: string): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tthis._resolveAuthorityRequests.get(authority)!.cancel();\n\t\t\tthis._resolveAuthorityRequests.delete(authority);\n\t\t}\n\t}\n\n\t_setResolvedAuthority(\n\t\tresolvedAuthority: ResolvedAuthority,\n\t\toptions?: ResolvedOptions,\n\t): void {\n\t\tif (this._resolveAuthorityRequests.has(resolvedAuthority.authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(\n\t\t\t\tresolvedAuthority.authority,\n\t\t\t)!;\n\t\t\t// For non-websocket types, it's expected the embedder passes a `remoteResourceProvider`\n\t\t\t// which is wrapped to a `IResourceUriProvider` and is not handled here.\n\t\t\tif (\n\t\t\t\tresolvedAuthority.connectTo.type ===\n\t\t\t\tRemoteConnectionType.WebSocket\n\t\t\t) {\n\t\t\t\tRemoteAuthorities.set(\n\t\t\t\t\tresolvedAuthority.authority,\n\t\t\t\t\tresolvedAuthority.connectTo.host,\n\t\t\t\t\tresolvedAuthority.connectTo.port,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (resolvedAuthority.connectionToken) {\n\t\t\t\tRemoteAuthorities.setConnectionToken(\n\t\t\t\t\tresolvedAuthority.authority,\n\t\t\t\t\tresolvedAuthority.connectionToken,\n\t\t\t\t);\n\t\t\t}\n\t\t\trequest.complete({ authority: resolvedAuthority, options });\n\t\t\tthis._onDidChangeConnectionData.fire();\n\t\t}\n\t}\n\n\t_setResolvedAuthorityError(authority: string, err: any): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(authority)!;\n\t\t\t// Avoid that this error makes it to telemetry\n\t\t\trequest.error(errors.ErrorNoTelemetry.fromError(err));\n\t\t}\n\t}\n\n\t_setAuthorityConnectionToken(\n\t\tauthority: string,\n\t\tconnectionToken: string,\n\t): void {\n\t\tthis._connectionTokens.set(authority, connectionToken);\n\t\tRemoteAuthorities.setConnectionToken(authority, connectionToken);\n\t\tthis._onDidChangeConnectionData.fire();\n\t}\n\n\t_setCanonicalURIProvider(provider: (uri: URI) => Promise<URI>): void {}\n}\n"],
  "mappings": "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",
  "names": []
}
