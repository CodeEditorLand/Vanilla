{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/browser/browserSocketFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../base/browser/dom.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { ISocket, SocketCloseEvent, SocketCloseEventType, SocketDiagnostics, SocketDiagnosticsEventType } from '../../../base/parts/ipc/common/ipc.net.js';\nimport { ISocketFactory } from '../common/remoteSocketFactoryService.js';\nimport { RemoteAuthorityResolverError, RemoteAuthorityResolverErrorCode, RemoteConnectionType, WebSocketRemoteConnection } from '../common/remoteAuthorityResolver.js';\nimport { mainWindow } from '../../../base/browser/window.js';\n\nexport interface IWebSocketFactory {\n\tcreate(url: string, debugLabel: string): IWebSocket;\n}\n\nexport interface IWebSocketCloseEvent {\n\t/**\n\t * Returns the WebSocket connection close code provided by the server.\n\t */\n\treadonly code: number;\n\t/**\n\t * Returns the WebSocket connection close reason provided by the server.\n\t */\n\treadonly reason: string;\n\t/**\n\t * Returns true if the connection closed cleanly; false otherwise.\n\t */\n\treadonly wasClean: boolean;\n\t/**\n\t * Underlying event.\n\t */\n\treadonly event: any | undefined;\n}\n\nexport interface IWebSocket {\n\treadonly onData: Event<ArrayBuffer>;\n\treadonly onOpen: Event<void>;\n\treadonly onClose: Event<IWebSocketCloseEvent | void>;\n\treadonly onError: Event<any>;\n\n\ttraceSocketEvent?(type: SocketDiagnosticsEventType, data?: VSBuffer | Uint8Array | ArrayBuffer | ArrayBufferView | any): void;\n\tsend(data: ArrayBuffer | ArrayBufferView): void;\n\tclose(): void;\n}\n\nclass BrowserWebSocket extends Disposable implements IWebSocket {\n\n\tprivate readonly _onData = new Emitter<ArrayBuffer>();\n\tpublic readonly onData = this._onData.event;\n\n\tprivate readonly _onOpen = this._register(new Emitter<void>());\n\tpublic readonly onOpen = this._onOpen.event;\n\n\tprivate readonly _onClose = this._register(new Emitter<IWebSocketCloseEvent>());\n\tpublic readonly onClose = this._onClose.event;\n\n\tprivate readonly _onError = this._register(new Emitter<any>());\n\tpublic readonly onError = this._onError.event;\n\n\tprivate readonly _debugLabel: string;\n\tprivate readonly _socket: WebSocket;\n\tprivate readonly _fileReader: FileReader;\n\tprivate readonly _queue: Blob[];\n\tprivate _isReading: boolean;\n\tprivate _isClosed: boolean;\n\n\tprivate readonly _socketMessageListener: (ev: MessageEvent) => void;\n\n\tpublic traceSocketEvent(type: SocketDiagnosticsEventType, data?: VSBuffer | Uint8Array | ArrayBuffer | ArrayBufferView | any): void {\n\t\tSocketDiagnostics.traceSocketEvent(this._socket, this._debugLabel, type, data);\n\t}\n\n\tconstructor(url: string, debugLabel: string) {\n\t\tsuper();\n\t\tthis._debugLabel = debugLabel;\n\t\tthis._socket = new WebSocket(url);\n\t\tthis.traceSocketEvent(SocketDiagnosticsEventType.Created, { type: 'BrowserWebSocket', url });\n\t\tthis._fileReader = new FileReader();\n\t\tthis._queue = [];\n\t\tthis._isReading = false;\n\t\tthis._isClosed = false;\n\n\t\tthis._fileReader.onload = (event) => {\n\t\t\tthis._isReading = false;\n\t\t\tconst buff = <ArrayBuffer>(<any>event.target).result;\n\n\t\t\tthis.traceSocketEvent(SocketDiagnosticsEventType.Read, buff);\n\t\t\tthis._onData.fire(buff);\n\n\t\t\tif (this._queue.length > 0) {\n\t\t\t\tenqueue(this._queue.shift()!);\n\t\t\t}\n\t\t};\n\n\t\tconst enqueue = (blob: Blob) => {\n\t\t\tif (this._isReading) {\n\t\t\t\tthis._queue.push(blob);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._isReading = true;\n\t\t\tthis._fileReader.readAsArrayBuffer(blob);\n\t\t};\n\n\t\tthis._socketMessageListener = (ev: MessageEvent) => {\n\t\t\tconst blob = (<Blob>ev.data);\n\t\t\tthis.traceSocketEvent(SocketDiagnosticsEventType.BrowserWebSocketBlobReceived, { type: blob.type, size: blob.size });\n\t\t\tenqueue(blob);\n\t\t};\n\t\tthis._socket.addEventListener('message', this._socketMessageListener);\n\n\t\tthis._register(dom.addDisposableListener(this._socket, 'open', (e) => {\n\t\t\tthis.traceSocketEvent(SocketDiagnosticsEventType.Open);\n\t\t\tthis._onOpen.fire();\n\t\t}));\n\n\t\t// WebSockets emit error events that do not contain any real information\n\t\t// Our only chance of getting to the root cause of an error is to\n\t\t// listen to the close event which gives out some real information:\n\t\t// - https://www.w3.org/TR/websockets/#closeevent\n\t\t// - https://tools.ietf.org/html/rfc6455#section-11.7\n\t\t//\n\t\t// But the error event is emitted before the close event, so we therefore\n\t\t// delay the error event processing in the hope of receiving a close event\n\t\t// with more information\n\n\t\tlet pendingErrorEvent: any | null = null;\n\n\t\tconst sendPendingErrorNow = () => {\n\t\t\tconst err = pendingErrorEvent;\n\t\t\tpendingErrorEvent = null;\n\t\t\tthis._onError.fire(err);\n\t\t};\n\n\t\tconst errorRunner = this._register(new RunOnceScheduler(sendPendingErrorNow, 0));\n\n\t\tconst sendErrorSoon = (err: any) => {\n\t\t\terrorRunner.cancel();\n\t\t\tpendingErrorEvent = err;\n\t\t\terrorRunner.schedule();\n\t\t};\n\n\t\tconst sendErrorNow = (err: any) => {\n\t\t\terrorRunner.cancel();\n\t\t\tpendingErrorEvent = err;\n\t\t\tsendPendingErrorNow();\n\t\t};\n\n\t\tthis._register(dom.addDisposableListener(this._socket, 'close', (e: CloseEvent) => {\n\t\t\tthis.traceSocketEvent(SocketDiagnosticsEventType.Close, { code: e.code, reason: e.reason, wasClean: e.wasClean });\n\n\t\t\tthis._isClosed = true;\n\n\t\t\tif (pendingErrorEvent) {\n\t\t\t\tif (!navigator.onLine) {\n\t\t\t\t\t// The browser is offline => this is a temporary error which might resolve itself\n\t\t\t\t\tsendErrorNow(new RemoteAuthorityResolverError('Browser is offline', RemoteAuthorityResolverErrorCode.TemporarilyNotAvailable, e));\n\t\t\t\t} else {\n\t\t\t\t\t// An error event is pending\n\t\t\t\t\t// The browser appears to be online...\n\t\t\t\t\tif (!e.wasClean) {\n\t\t\t\t\t\t// Let's be optimistic and hope that perhaps the server could not be reached or something\n\t\t\t\t\t\tsendErrorNow(new RemoteAuthorityResolverError(e.reason || `WebSocket close with status code ${e.code}`, RemoteAuthorityResolverErrorCode.TemporarilyNotAvailable, e));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this was a clean close => send existing error\n\t\t\t\t\t\terrorRunner.cancel();\n\t\t\t\t\t\tsendPendingErrorNow();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onClose.fire({ code: e.code, reason: e.reason, wasClean: e.wasClean, event: e });\n\t\t}));\n\n\t\tthis._register(dom.addDisposableListener(this._socket, 'error', (err) => {\n\t\t\tthis.traceSocketEvent(SocketDiagnosticsEventType.Error, { message: err?.message });\n\t\t\tsendErrorSoon(err);\n\t\t}));\n\t}\n\n\tsend(data: ArrayBuffer | ArrayBufferView): void {\n\t\tif (this._isClosed) {\n\t\t\t// Refuse to write data to closed WebSocket...\n\t\t\treturn;\n\t\t}\n\t\tthis.traceSocketEvent(SocketDiagnosticsEventType.Write, data);\n\t\tthis._socket.send(data);\n\t}\n\n\tclose(): void {\n\t\tthis._isClosed = true;\n\t\tthis.traceSocketEvent(SocketDiagnosticsEventType.Close);\n\t\tthis._socket.close();\n\t\tthis._socket.removeEventListener('message', this._socketMessageListener);\n\t\tthis.dispose();\n\t}\n}\n\nconst defaultWebSocketFactory = new class implements IWebSocketFactory {\n\tcreate(url: string, debugLabel: string): IWebSocket {\n\t\treturn new BrowserWebSocket(url, debugLabel);\n\t}\n};\n\nclass BrowserSocket implements ISocket {\n\n\tpublic readonly socket: IWebSocket;\n\tpublic readonly debugLabel: string;\n\n\tpublic traceSocketEvent(type: SocketDiagnosticsEventType, data?: VSBuffer | Uint8Array | ArrayBuffer | ArrayBufferView | any): void {\n\t\tif (typeof this.socket.traceSocketEvent === 'function') {\n\t\t\tthis.socket.traceSocketEvent(type, data);\n\t\t} else {\n\t\t\tSocketDiagnostics.traceSocketEvent(this.socket, this.debugLabel, type, data);\n\t\t}\n\t}\n\n\tconstructor(socket: IWebSocket, debugLabel: string) {\n\t\tthis.socket = socket;\n\t\tthis.debugLabel = debugLabel;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.socket.close();\n\t}\n\n\tpublic onData(listener: (e: VSBuffer) => void): IDisposable {\n\t\treturn this.socket.onData((data) => listener(VSBuffer.wrap(new Uint8Array(data))));\n\t}\n\n\tpublic onClose(listener: (e: SocketCloseEvent) => void): IDisposable {\n\t\tconst adapter = (e: IWebSocketCloseEvent | void) => {\n\t\t\tif (typeof e === 'undefined') {\n\t\t\t\tlistener(e);\n\t\t\t} else {\n\t\t\t\tlistener({\n\t\t\t\t\ttype: SocketCloseEventType.WebSocketCloseEvent,\n\t\t\t\t\tcode: e.code,\n\t\t\t\t\treason: e.reason,\n\t\t\t\t\twasClean: e.wasClean,\n\t\t\t\t\tevent: e.event\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\treturn this.socket.onClose(adapter);\n\t}\n\n\tpublic onEnd(listener: () => void): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\tpublic write(buffer: VSBuffer): void {\n\t\tthis.socket.send(buffer.buffer);\n\t}\n\n\tpublic end(): void {\n\t\tthis.socket.close();\n\t}\n\n\tpublic drain(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n\n\nexport class BrowserSocketFactory implements ISocketFactory<RemoteConnectionType.WebSocket> {\n\n\tprivate readonly _webSocketFactory: IWebSocketFactory;\n\n\tconstructor(webSocketFactory: IWebSocketFactory | null | undefined) {\n\t\tthis._webSocketFactory = webSocketFactory || defaultWebSocketFactory;\n\t}\n\n\tsupports(connectTo: WebSocketRemoteConnection): boolean {\n\t\treturn true;\n\t}\n\n\tconnect({ host, port }: WebSocketRemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket> {\n\t\treturn new Promise<ISocket>((resolve, reject) => {\n\t\t\tconst webSocketSchema = (/^https:/.test(mainWindow.location.href) ? 'wss' : 'ws');\n\t\t\tconst socket = this._webSocketFactory.create(`${webSocketSchema}://${(/:/.test(host) && !/\\[/.test(host)) ? `[${host}]` : host}:${port}${path}?${query}&skipWebSocketFrames=false`, debugLabel);\n\t\t\tconst errorListener = socket.onError(reject);\n\t\t\tsocket.onOpen(() => {\n\t\t\t\terrorListener.dispose();\n\t\t\t\tresolve(new BrowserSocket(socket, debugLabel));\n\t\t\t});\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
