{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/common/remoteSocketFactoryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport type { ISocket } from \"../../../base/parts/ipc/common/ipc.net.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type {\n\tRemoteConnection,\n\tRemoteConnectionOfType,\n\tRemoteConnectionType,\n} from \"./remoteAuthorityResolver.js\";\n\nexport const IRemoteSocketFactoryService =\n\tcreateDecorator<IRemoteSocketFactoryService>(\"remoteSocketFactoryService\");\n\nexport interface IRemoteSocketFactoryService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Register a socket factory for the given message passing type\n\t * @param type passing type to register for\n\t * @param factory function that returns the socket factory, or undefined if\n\t * it can't handle the data.\n\t */\n\tregister<T extends RemoteConnectionType>(\n\t\ttype: T,\n\t\tfactory: ISocketFactory<T>,\n\t): IDisposable;\n\n\tconnect(\n\t\tconnectTo: RemoteConnection,\n\t\tpath: string,\n\t\tquery: string,\n\t\tdebugLabel: string,\n\t): Promise<ISocket>;\n}\n\nexport interface ISocketFactory<T extends RemoteConnectionType> {\n\tsupports(connectTo: RemoteConnectionOfType<T>): boolean;\n\tconnect(\n\t\tconnectTo: RemoteConnectionOfType<T>,\n\t\tpath: string,\n\t\tquery: string,\n\t\tdebugLabel: string,\n\t): Promise<ISocket>;\n}\n\nexport class RemoteSocketFactoryService implements IRemoteSocketFactoryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly factories: {\n\t\t[T in RemoteConnectionType]?: ISocketFactory<T>[];\n\t} = {};\n\n\tpublic register<T extends RemoteConnectionType>(\n\t\ttype: T,\n\t\tfactory: ISocketFactory<T>,\n\t): IDisposable {\n\t\tthis.factories[type] ??= [];\n\t\tthis.factories[type]!.push(factory);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.factories[type]?.indexOf(factory);\n\t\t\tif (typeof idx === \"number\" && idx >= 0) {\n\t\t\t\tthis.factories[type]?.splice(idx, 1);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSocketFactory<T extends RemoteConnectionType>(\n\t\tmessagePassing: RemoteConnectionOfType<T>,\n\t): ISocketFactory<T> | undefined {\n\t\tconst factories = (this.factories[messagePassing.type] ||\n\t\t\t[]) as ISocketFactory<T>[];\n\t\treturn factories.find((factory) => factory.supports(messagePassing));\n\t}\n\n\tpublic connect(\n\t\tconnectTo: RemoteConnection,\n\t\tpath: string,\n\t\tquery: string,\n\t\tdebugLabel: string,\n\t): Promise<ISocket> {\n\t\tconst socketFactory = this.getSocketFactory(connectTo);\n\t\tif (!socketFactory) {\n\t\t\tthrow new Error(`No socket factory found for ${connectTo}`);\n\t\t}\n\t\treturn socketFactory.connect(connectTo, path, query, debugLabel);\n\t}\n}\n"],
  "mappings": ";;AAKA;AAAA,EAEC;AAAA,OACM;AAEP,SAAS,uBAAuB;AAOzB,MAAM,8BACZ,gBAA6C,4BAA4B;AAkCnE,MAAM,2BAAkE;AAAA,EApD/E,OAoD+E;AAAA;AAAA;AAAA,EAG7D,YAEb,CAAC;AAAA,EAEE,SACN,MACA,SACc;AACd,SAAK,UAAU,IAAI,MAAM,CAAC;AAC1B,SAAK,UAAU,IAAI,EAAG,KAAK,OAAO;AAClC,WAAO,aAAa,MAAM;AACzB,YAAM,MAAM,KAAK,UAAU,IAAI,GAAG,QAAQ,OAAO;AACjD,UAAI,OAAO,QAAQ,YAAY,OAAO,GAAG;AACxC,aAAK,UAAU,IAAI,GAAG,OAAO,KAAK,CAAC;AAAA,MACpC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEQ,iBACP,gBACgC;AAChC,UAAM,YAAa,KAAK,UAAU,eAAe,IAAI,KACpD,CAAC;AACF,WAAO,UAAU,KAAK,CAAC,YAAY,QAAQ,SAAS,cAAc,CAAC;AAAA,EACpE;AAAA,EAEO,QACN,WACA,MACA,OACA,YACmB;AACnB,UAAM,gBAAgB,KAAK,iBAAiB,SAAS;AACrD,QAAI,CAAC,eAAe;AACnB,YAAM,IAAI,MAAM,+BAA+B,SAAS,EAAE;AAAA,IAC3D;AACA,WAAO,cAAc,QAAQ,WAAW,MAAM,OAAO,UAAU;AAAA,EAChE;AACD;",
  "names": []
}
