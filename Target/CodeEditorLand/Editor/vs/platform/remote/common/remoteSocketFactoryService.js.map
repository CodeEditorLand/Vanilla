{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/common/remoteSocketFactoryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { ISocket } from '../../../base/parts/ipc/common/ipc.net.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { RemoteConnectionOfType, RemoteConnectionType, RemoteConnection } from './remoteAuthorityResolver.js';\n\nexport const IRemoteSocketFactoryService = createDecorator<IRemoteSocketFactoryService>('remoteSocketFactoryService');\n\nexport interface IRemoteSocketFactoryService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Register a socket factory for the given message passing type\n\t * @param type passing type to register for\n\t * @param factory function that returns the socket factory, or undefined if\n\t * it can't handle the data.\n\t */\n\tregister<T extends RemoteConnectionType>(type: T, factory: ISocketFactory<T>): IDisposable;\n\n\tconnect(connectTo: RemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket>;\n}\n\nexport interface ISocketFactory<T extends RemoteConnectionType> {\n\tsupports(connectTo: RemoteConnectionOfType<T>): boolean;\n\tconnect(connectTo: RemoteConnectionOfType<T>, path: string, query: string, debugLabel: string): Promise<ISocket>;\n}\n\nexport class RemoteSocketFactoryService implements IRemoteSocketFactoryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly factories: { [T in RemoteConnectionType]?: ISocketFactory<T>[] } = {};\n\n\tpublic register<T extends RemoteConnectionType>(type: T, factory: ISocketFactory<T>): IDisposable {\n\t\tthis.factories[type] ??= [];\n\t\tthis.factories[type]!.push(factory);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.factories[type]?.indexOf(factory);\n\t\t\tif (typeof idx === 'number' && idx >= 0) {\n\t\t\t\tthis.factories[type]?.splice(idx, 1);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSocketFactory<T extends RemoteConnectionType>(messagePassing: RemoteConnectionOfType<T>): ISocketFactory<T> | undefined {\n\t\tconst factories = (this.factories[messagePassing.type] || []) as ISocketFactory<T>[];\n\t\treturn factories.find(factory => factory.supports(messagePassing));\n\t}\n\n\tpublic connect(connectTo: RemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket> {\n\t\tconst socketFactory = this.getSocketFactory(connectTo);\n\t\tif (!socketFactory) {\n\t\t\tthrow new Error(`No socket factory found for ${connectTo}`);\n\t\t}\n\t\treturn socketFactory.connect(connectTo, path, query, debugLabel);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa,oBAAoB;AAC1C,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,wBAAwB,sBAAsB,wBAAwB;AAExE,MAAM,8BAA8B,gBAA6C,4BAA4B;AAqB7G,MAAM,2BAAkE;AAAA,EA/B/E,OA+B+E;AAAA;AAAA;AAAA,EAG7D,YAAmE,CAAC;AAAA,EAE9E,SAAyC,MAAS,SAAyC;AACjG,SAAK,UAAU,IAAI,MAAM,CAAC;AAC1B,SAAK,UAAU,IAAI,EAAG,KAAK,OAAO;AAClC,WAAO,aAAa,MAAM;AACzB,YAAM,MAAM,KAAK,UAAU,IAAI,GAAG,QAAQ,OAAO;AACjD,UAAI,OAAO,QAAQ,YAAY,OAAO,GAAG;AACxC,aAAK,UAAU,IAAI,GAAG,OAAO,KAAK,CAAC;AAAA,MACpC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEQ,iBAAiD,gBAA0E;AAClI,UAAM,YAAa,KAAK,UAAU,eAAe,IAAI,KAAK,CAAC;AAC3D,WAAO,UAAU,KAAK,aAAW,QAAQ,SAAS,cAAc,CAAC;AAAA,EAClE;AAAA,EAEO,QAAQ,WAA6B,MAAc,OAAe,YAAsC;AAC9G,UAAM,gBAAgB,KAAK,iBAAiB,SAAS;AACrD,QAAI,CAAC,eAAe;AACnB,YAAM,IAAI,MAAM,+BAA+B,SAAS,EAAE;AAAA,IAC3D;AACA,WAAO,cAAc,QAAQ,WAAW,MAAM,OAAO,UAAU;AAAA,EAChE;AACD;",
  "names": []
}
