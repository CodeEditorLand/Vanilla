{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/common/sharedProcessTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type { IAddress } from \"./remoteAgentConnection.js\";\n\nexport const ISharedProcessTunnelService =\n\tcreateDecorator<ISharedProcessTunnelService>(\"sharedProcessTunnelService\");\n\nexport const ipcSharedProcessTunnelChannelName = \"sharedProcessTunnel\";\n\nexport interface ISharedProcessTunnel {\n\ttunnelLocalPort: number | undefined;\n\tlocalAddress: string;\n}\n\n/**\n * A service that creates tunnels on the shared process\n */\nexport interface ISharedProcessTunnelService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Create a tunnel.\n\t */\n\tcreateTunnel(): Promise<{ id: string }>;\n\t/**\n\t * Start a previously created tunnel.\n\t * Can only be called once per created tunnel.\n\t */\n\tstartTunnel(\n\t\tauthority: string,\n\t\tid: string,\n\t\ttunnelRemoteHost: string,\n\t\ttunnelRemotePort: number,\n\t\ttunnelLocalHost: string,\n\t\ttunnelLocalPort: number | undefined,\n\t\televateIfNeeded: boolean | undefined,\n\t): Promise<ISharedProcessTunnel>;\n\t/**\n\t * Set the remote address info for a previously created tunnel.\n\t * Should be called as often as the resolver resolves.\n\t */\n\tsetAddress(id: string, address: IAddress): Promise<void>;\n\t/**\n\t * Destroy a previously created tunnel.\n\t */\n\tdestroyTunnel(id: string): Promise<void>;\n}\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAGzB,MAAM,8BACZ,gBAA6C,4BAA4B;AAEnE,MAAM,oCAAoC;",
  "names": []
}
