var u=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=(s,i,e,r)=>{for(var o=r>1?void 0:r?d(i,e):i,t=s.length-1,n;t>=0;t--)(n=s[t])&&(o=(r?n(i,e,o):n(o))||o);return r&&o&&u(i,e,o),o},c=(s,i)=>(e,r)=>i(e,r,s);import{VSBuffer as y,encodeBase64 as h}from"../../../base/common/buffer.js";import{Disposable as f}from"../../../base/common/lifecycle.js";import{getMediaOrTextMime as v}from"../../../base/common/mime.js";import{Schemas as w}from"../../../base/common/network.js";import{URI as E}from"../../../base/common/uri.js";import{FileOperationError as R,FileOperationResult as S,IFileService as I}from"../../files/common/files.js";import{IMainProcessService as C}from"../../ipc/common/mainProcessService.js";import{NODE_REMOTE_RESOURCE_CHANNEL_NAME as O,NODE_REMOTE_RESOURCE_IPC_METHOD_NAME as _}from"../common/electronRemoteResources.js";let m=class extends f{constructor(e,r,o){super();this.windowId=e;this.fileService=o;const t={listen(n,a){throw new Error(`Event not found: ${a}`)},call:(n,a,l)=>{switch(a){case _:return this.doRequest(E.revive(l[0]))}throw new Error(`Call not found: ${a}`)}};r.registerChannel(O,t)}async doRequest(e){let r;try{const t=new URLSearchParams(e.query),n=e.with({scheme:t.get("scheme"),authority:t.get("authority"),query:""});r=await this.fileService.readFile(n)}catch(t){const n=h(y.fromString(t.message));return t instanceof R&&t.fileOperationResult===S.FILE_NOT_FOUND?{statusCode:404,body:n}:{statusCode:500,body:n}}const o=e.path&&v(e.path);return{statusCode:200,body:h(r.value),mimeType:o}}getResourceUriProvider(){return e=>e.with({scheme:w.vscodeManagedRemoteResource,authority:`window:${this.windowId}`,query:new URLSearchParams({authority:e.authority,scheme:e.scheme}).toString()})}};m=p([c(1,C),c(2,I)],m);export{m as ElectronRemoteResourceLoader};
