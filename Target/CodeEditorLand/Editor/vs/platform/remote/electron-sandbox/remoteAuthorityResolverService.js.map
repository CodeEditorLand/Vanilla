{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/electron-sandbox/remoteAuthorityResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n//\nimport { DeferredPromise } from \"../../../base/common/async.js\";\nimport * as errors from \"../../../base/common/errors.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { RemoteAuthorities } from \"../../../base/common/network.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\ttype IRemoteAuthorityResolverService,\n\ttype IRemoteConnectionData,\n\tRemoteConnectionType,\n\ttype ResolvedAuthority,\n\ttype ResolvedOptions,\n\ttype ResolverResult,\n} from \"../common/remoteAuthorityResolver.js\";\nimport type { ElectronRemoteResourceLoader } from \"./electronRemoteResourceLoader.js\";\n\nexport class RemoteAuthorityResolverService\n\textends Disposable\n\timplements IRemoteAuthorityResolverService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeConnectionData = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeConnectionData =\n\t\tthis._onDidChangeConnectionData.event;\n\n\tprivate readonly _resolveAuthorityRequests: Map<\n\t\tstring,\n\t\tDeferredPromise<ResolverResult>\n\t>;\n\tprivate readonly _connectionTokens: Map<string, string>;\n\tprivate readonly _canonicalURIRequests: Map<\n\t\tstring,\n\t\t{ input: URI; result: DeferredPromise<URI> }\n\t>;\n\tprivate _canonicalURIProvider: ((uri: URI) => Promise<URI>) | null;\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\tprivate readonly remoteResourceLoader: ElectronRemoteResourceLoader,\n\t) {\n\t\tsuper();\n\t\tthis._resolveAuthorityRequests = new Map<\n\t\t\tstring,\n\t\t\tDeferredPromise<ResolverResult>\n\t\t>();\n\t\tthis._connectionTokens = new Map<string, string>();\n\t\tthis._canonicalURIRequests = new Map();\n\t\tthis._canonicalURIProvider = null;\n\n\t\tRemoteAuthorities.setServerRootPath(productService, undefined); // on the desktop we don't support custom server base paths\n\t}\n\n\tresolveAuthority(authority: string): Promise<ResolverResult> {\n\t\tif (!this._resolveAuthorityRequests.has(authority)) {\n\t\t\tthis._resolveAuthorityRequests.set(\n\t\t\t\tauthority,\n\t\t\t\tnew DeferredPromise(),\n\t\t\t);\n\t\t}\n\t\treturn this._resolveAuthorityRequests.get(authority)!.p;\n\t}\n\n\tasync getCanonicalURI(uri: URI): Promise<URI> {\n\t\tconst key = uri.toString();\n\t\tconst existing = this._canonicalURIRequests.get(key);\n\t\tif (existing) {\n\t\t\treturn existing.result.p;\n\t\t}\n\n\t\tconst result = new DeferredPromise<URI>();\n\t\tthis._canonicalURIProvider?.(uri).then(\n\t\t\t(uri) => result.complete(uri),\n\t\t\t(err) => result.error(err),\n\t\t);\n\t\tthis._canonicalURIRequests.set(key, { input: uri, result });\n\t\treturn result.p;\n\t}\n\n\tgetConnectionData(authority: string): IRemoteConnectionData | null {\n\t\tif (!this._resolveAuthorityRequests.has(authority)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst request = this._resolveAuthorityRequests.get(authority)!;\n\t\tif (!request.isResolved) {\n\t\t\treturn null;\n\t\t}\n\t\tconst connectionToken = this._connectionTokens.get(authority);\n\t\treturn {\n\t\t\tconnectTo: request.value!.authority.connectTo,\n\t\t\tconnectionToken: connectionToken,\n\t\t};\n\t}\n\n\t_clearResolvedAuthority(authority: string): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tthis._resolveAuthorityRequests.get(authority)!.cancel();\n\t\t\tthis._resolveAuthorityRequests.delete(authority);\n\t\t}\n\t}\n\n\t_setResolvedAuthority(\n\t\tresolvedAuthority: ResolvedAuthority,\n\t\toptions?: ResolvedOptions,\n\t): void {\n\t\tif (this._resolveAuthorityRequests.has(resolvedAuthority.authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(\n\t\t\t\tresolvedAuthority.authority,\n\t\t\t)!;\n\t\t\tif (\n\t\t\t\tresolvedAuthority.connectTo.type ===\n\t\t\t\tRemoteConnectionType.WebSocket\n\t\t\t) {\n\t\t\t\tRemoteAuthorities.set(\n\t\t\t\t\tresolvedAuthority.authority,\n\t\t\t\t\tresolvedAuthority.connectTo.host,\n\t\t\t\t\tresolvedAuthority.connectTo.port,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tRemoteAuthorities.setDelegate(\n\t\t\t\t\tthis.remoteResourceLoader.getResourceUriProvider(),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (resolvedAuthority.connectionToken) {\n\t\t\t\tRemoteAuthorities.setConnectionToken(\n\t\t\t\t\tresolvedAuthority.authority,\n\t\t\t\t\tresolvedAuthority.connectionToken,\n\t\t\t\t);\n\t\t\t}\n\t\t\trequest.complete({ authority: resolvedAuthority, options });\n\t\t\tthis._onDidChangeConnectionData.fire();\n\t\t}\n\t}\n\n\t_setResolvedAuthorityError(authority: string, err: any): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(authority)!;\n\t\t\t// Avoid that this error makes it to telemetry\n\t\t\trequest.error(errors.ErrorNoTelemetry.fromError(err));\n\t\t}\n\t}\n\n\t_setAuthorityConnectionToken(\n\t\tauthority: string,\n\t\tconnectionToken: string,\n\t): void {\n\t\tthis._connectionTokens.set(authority, connectionToken);\n\t\tRemoteAuthorities.setConnectionToken(authority, connectionToken);\n\t\tthis._onDidChangeConnectionData.fire();\n\t}\n\n\t_setCanonicalURIProvider(provider: (uri: URI) => Promise<URI>): void {\n\t\tthis._canonicalURIProvider = provider;\n\t\tthis._canonicalURIRequests.forEach(({ result, input }) => {\n\t\t\tthis._canonicalURIProvider!(input).then(\n\t\t\t\t(uri) => result.complete(uri),\n\t\t\t\t(err) => result.error(err),\n\t\t\t);\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["uri"]
}
