{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/electron-sandbox/remoteAuthorityResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n//\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport * as errors from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { RemoteAuthorities } from '../../../base/common/network.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IRemoteAuthorityResolverService, IRemoteConnectionData, RemoteConnectionType, ResolvedAuthority, ResolvedOptions, ResolverResult } from '../common/remoteAuthorityResolver.js';\nimport { ElectronRemoteResourceLoader } from './electronRemoteResourceLoader.js';\n\nexport class RemoteAuthorityResolverService extends Disposable implements IRemoteAuthorityResolverService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeConnectionData = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeConnectionData = this._onDidChangeConnectionData.event;\n\n\tprivate readonly _resolveAuthorityRequests: Map<string, DeferredPromise<ResolverResult>>;\n\tprivate readonly _connectionTokens: Map<string, string>;\n\tprivate readonly _canonicalURIRequests: Map<string, { input: URI; result: DeferredPromise<URI> }>;\n\tprivate _canonicalURIProvider: ((uri: URI) => Promise<URI>) | null;\n\n\tconstructor(@IProductService productService: IProductService, private readonly remoteResourceLoader: ElectronRemoteResourceLoader) {\n\t\tsuper();\n\t\tthis._resolveAuthorityRequests = new Map<string, DeferredPromise<ResolverResult>>();\n\t\tthis._connectionTokens = new Map<string, string>();\n\t\tthis._canonicalURIRequests = new Map();\n\t\tthis._canonicalURIProvider = null;\n\n\t\tRemoteAuthorities.setServerRootPath(productService, undefined); // on the desktop we don't support custom server base paths\n\t}\n\n\tresolveAuthority(authority: string): Promise<ResolverResult> {\n\t\tif (!this._resolveAuthorityRequests.has(authority)) {\n\t\t\tthis._resolveAuthorityRequests.set(authority, new DeferredPromise());\n\t\t}\n\t\treturn this._resolveAuthorityRequests.get(authority)!.p;\n\t}\n\n\tasync getCanonicalURI(uri: URI): Promise<URI> {\n\t\tconst key = uri.toString();\n\t\tconst existing = this._canonicalURIRequests.get(key);\n\t\tif (existing) {\n\t\t\treturn existing.result.p;\n\t\t}\n\n\t\tconst result = new DeferredPromise<URI>();\n\t\tthis._canonicalURIProvider?.(uri).then((uri) => result.complete(uri), (err) => result.error(err));\n\t\tthis._canonicalURIRequests.set(key, { input: uri, result });\n\t\treturn result.p;\n\t}\n\n\tgetConnectionData(authority: string): IRemoteConnectionData | null {\n\t\tif (!this._resolveAuthorityRequests.has(authority)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst request = this._resolveAuthorityRequests.get(authority)!;\n\t\tif (!request.isResolved) {\n\t\t\treturn null;\n\t\t}\n\t\tconst connectionToken = this._connectionTokens.get(authority);\n\t\treturn {\n\t\t\tconnectTo: request.value!.authority.connectTo,\n\t\t\tconnectionToken: connectionToken\n\t\t};\n\t}\n\n\t_clearResolvedAuthority(authority: string): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tthis._resolveAuthorityRequests.get(authority)!.cancel();\n\t\t\tthis._resolveAuthorityRequests.delete(authority);\n\t\t}\n\t}\n\n\t_setResolvedAuthority(resolvedAuthority: ResolvedAuthority, options?: ResolvedOptions): void {\n\t\tif (this._resolveAuthorityRequests.has(resolvedAuthority.authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(resolvedAuthority.authority)!;\n\t\t\tif (resolvedAuthority.connectTo.type === RemoteConnectionType.WebSocket) {\n\t\t\t\tRemoteAuthorities.set(resolvedAuthority.authority, resolvedAuthority.connectTo.host, resolvedAuthority.connectTo.port);\n\t\t\t} else {\n\t\t\t\tRemoteAuthorities.setDelegate(this.remoteResourceLoader.getResourceUriProvider());\n\t\t\t}\n\t\t\tif (resolvedAuthority.connectionToken) {\n\t\t\t\tRemoteAuthorities.setConnectionToken(resolvedAuthority.authority, resolvedAuthority.connectionToken);\n\t\t\t}\n\t\t\trequest.complete({ authority: resolvedAuthority, options });\n\t\t\tthis._onDidChangeConnectionData.fire();\n\t\t}\n\t}\n\n\t_setResolvedAuthorityError(authority: string, err: any): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(authority)!;\n\t\t\t// Avoid that this error makes it to telemetry\n\t\t\trequest.error(errors.ErrorNoTelemetry.fromError(err));\n\t\t}\n\t}\n\n\t_setAuthorityConnectionToken(authority: string, connectionToken: string): void {\n\t\tthis._connectionTokens.set(authority, connectionToken);\n\t\tRemoteAuthorities.setConnectionToken(authority, connectionToken);\n\t\tthis._onDidChangeConnectionData.fire();\n\t}\n\n\t_setCanonicalURIProvider(provider: (uri: URI) => Promise<URI>): void {\n\t\tthis._canonicalURIProvider = provider;\n\t\tthis._canonicalURIRequests.forEach(({ result, input }) => {\n\t\t\tthis._canonicalURIProvider!(input).then((uri) => result.complete(uri), (err) => result.error(err));\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["uri"]
}
