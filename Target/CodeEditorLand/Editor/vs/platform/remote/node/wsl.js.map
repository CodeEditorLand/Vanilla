{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/node/wsl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from \"child_process\";\nimport * as fs from \"fs\";\nimport * as os from \"os\";\nimport * as path from \"path\";\n\nlet hasWSLFeaturePromise: Promise<boolean> | undefined;\n\nexport async function hasWSLFeatureInstalled(\n\trefresh = false,\n): Promise<boolean> {\n\tif (hasWSLFeaturePromise === undefined || refresh) {\n\t\thasWSLFeaturePromise = testWSLFeatureInstalled();\n\t}\n\treturn hasWSLFeaturePromise;\n}\n\nasync function testWSLFeatureInstalled(): Promise<boolean> {\n\tconst windowsBuildNumber = getWindowsBuildNumber();\n\tif (windowsBuildNumber === undefined) {\n\t\treturn false;\n\t}\n\tif (windowsBuildNumber >= 22000) {\n\t\tconst wslExePath = getWSLExecutablePath();\n\t\tif (wslExePath) {\n\t\t\treturn new Promise<boolean>((s) => {\n\t\t\t\ttry {\n\t\t\t\t\tcp.execFile(wslExePath, [\"--status\"], (err) => s(!err));\n\t\t\t\t} catch (e) {\n\t\t\t\t\ts(false);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} else {\n\t\tconst dllPath = getLxssManagerDllPath();\n\t\tif (dllPath) {\n\t\t\ttry {\n\t\t\t\tif ((await fs.promises.stat(dllPath)).isFile()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction getWindowsBuildNumber(): number | undefined {\n\tconst osVersion = /(\\d+)\\.(\\d+)\\.(\\d+)/g.exec(os.release());\n\tif (osVersion) {\n\t\treturn Number.parseInt(osVersion[3]);\n\t}\n\treturn undefined;\n}\n\nfunction getSystem32Path(subPath: string): string | undefined {\n\tconst systemRoot = process.env[\"SystemRoot\"];\n\tif (systemRoot) {\n\t\tconst is32ProcessOn64Windows = process.env.hasOwnProperty(\n\t\t\t\"PROCESSOR_ARCHITEW6432\",\n\t\t);\n\t\treturn path.join(\n\t\t\tsystemRoot,\n\t\t\tis32ProcessOn64Windows ? \"Sysnative\" : \"System32\",\n\t\t\tsubPath,\n\t\t);\n\t}\n\treturn undefined;\n}\n\nfunction getWSLExecutablePath(): string | undefined {\n\treturn getSystem32Path(\"wsl.exe\");\n}\n\n/**\n * In builds < 22000 this dll inidcates that WSL is installed\n */\nfunction getLxssManagerDllPath(): string | undefined {\n\treturn getSystem32Path(\"lxss\\\\LxssManager.dll\");\n}\n"],
  "mappings": ";;AAKA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,UAAU;AAEtB,IAAI;AAEJ,eAAsB,uBACrB,UAAU,OACS;AACnB,MAAI,yBAAyB,UAAa,SAAS;AAClD,2BAAuB,wBAAwB;AAAA,EAChD;AACA,SAAO;AACR;AAPsB;AAStB,eAAe,0BAA4C;AAC1D,QAAM,qBAAqB,sBAAsB;AACjD,MAAI,uBAAuB,QAAW;AACrC,WAAO;AAAA,EACR;AACA,MAAI,sBAAsB,MAAO;AAChC,UAAM,aAAa,qBAAqB;AACxC,QAAI,YAAY;AACf,aAAO,IAAI,QAAiB,CAAC,MAAM;AAClC,YAAI;AACH,aAAG,SAAS,YAAY,CAAC,UAAU,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC;AAAA,QACvD,SAAS,GAAG;AACX,YAAE,KAAK;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD,OAAO;AACN,UAAM,UAAU,sBAAsB;AACtC,QAAI,SAAS;AACZ,UAAI;AACH,aAAK,MAAM,GAAG,SAAS,KAAK,OAAO,GAAG,OAAO,GAAG;AAC/C,iBAAO;AAAA,QACR;AAAA,MACD,SAAS,GAAG;AAAA,MAAC;AAAA,IACd;AAAA,EACD;AACA,SAAO;AACR;AA3Be;AA6Bf,SAAS,wBAA4C;AACpD,QAAM,YAAY,uBAAuB,KAAK,GAAG,QAAQ,CAAC;AAC1D,MAAI,WAAW;AACd,WAAO,OAAO,SAAS,UAAU,CAAC,CAAC;AAAA,EACpC;AACA,SAAO;AACR;AANS;AAQT,SAAS,gBAAgB,SAAqC;AAC7D,QAAM,aAAa,QAAQ,IAAI,YAAY;AAC3C,MAAI,YAAY;AACf,UAAM,yBAAyB,QAAQ,IAAI;AAAA,MAC1C;AAAA,IACD;AACA,WAAO,KAAK;AAAA,MACX;AAAA,MACA,yBAAyB,cAAc;AAAA,MACvC;AAAA,IACD;AAAA,EACD;AACA,SAAO;AACR;AAbS;AAeT,SAAS,uBAA2C;AACnD,SAAO,gBAAgB,SAAS;AACjC;AAFS;AAOT,SAAS,wBAA4C;AACpD,SAAO,gBAAgB,uBAAuB;AAC/C;AAFS;",
  "names": []
}
