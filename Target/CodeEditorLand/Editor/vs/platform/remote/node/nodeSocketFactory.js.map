{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remote/node/nodeSocketFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as net from \"net\";\nimport type { ISocket } from \"../../../base/parts/ipc/common/ipc.net.js\";\nimport { NodeSocket } from \"../../../base/parts/ipc/node/ipc.net.js\";\nimport { makeRawSocketHeaders } from \"../common/managedSocket.js\";\nimport type {\n\tRemoteConnectionType,\n\tWebSocketRemoteConnection,\n} from \"../common/remoteAuthorityResolver.js\";\nimport type { ISocketFactory } from \"../common/remoteSocketFactoryService.js\";\n\nexport const nodeSocketFactory = new (class\n\timplements ISocketFactory<RemoteConnectionType.WebSocket>\n{\n\tsupports(connectTo: WebSocketRemoteConnection): boolean {\n\t\treturn true;\n\t}\n\n\tconnect(\n\t\t{ host, port }: WebSocketRemoteConnection,\n\t\tpath: string,\n\t\tquery: string,\n\t\tdebugLabel: string,\n\t): Promise<ISocket> {\n\t\treturn new Promise<ISocket>((resolve, reject) => {\n\t\t\tconst socket = net.createConnection(\n\t\t\t\t{ host: host, port: port },\n\t\t\t\t() => {\n\t\t\t\t\tsocket.removeListener(\"error\", reject);\n\n\t\t\t\t\tsocket.write(makeRawSocketHeaders(path, query, debugLabel));\n\n\t\t\t\t\tconst onData = (data: Buffer) => {\n\t\t\t\t\t\tconst strData = data.toString();\n\t\t\t\t\t\tif (strData.indexOf(\"\\r\\n\\r\\n\") >= 0) {\n\t\t\t\t\t\t\t// headers received OK\n\t\t\t\t\t\t\tsocket.off(\"data\", onData);\n\t\t\t\t\t\t\tresolve(new NodeSocket(socket, debugLabel));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tsocket.on(\"data\", onData);\n\t\t\t\t},\n\t\t\t);\n\t\t\t// Disable Nagle's algorithm.\n\t\t\tsocket.setNoDelay(true);\n\t\t\tsocket.once(\"error\", reject);\n\t\t});\n\t}\n})();\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AAErB,SAAS,kBAAkB;AAC3B,SAAS,4BAA4B;AAO9B,MAAM,oBAAoB,IAAK,MAEtC;AAAA,EACC,SAAS,WAA+C;AACvD,WAAO;AAAA,EACR;AAAA,EAEA,QACC,EAAE,MAAM,KAAK,GACb,MACA,OACA,YACmB;AACnB,WAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAChD,YAAM,SAAS,IAAI;AAAA,QAClB,EAAE,MAAY,KAAW;AAAA,QACzB,MAAM;AACL,iBAAO,eAAe,SAAS,MAAM;AAErC,iBAAO,MAAM,qBAAqB,MAAM,OAAO,UAAU,CAAC;AAE1D,gBAAM,SAAS,wBAAC,SAAiB;AAChC,kBAAM,UAAU,KAAK,SAAS;AAC9B,gBAAI,QAAQ,QAAQ,UAAU,KAAK,GAAG;AAErC,qBAAO,IAAI,QAAQ,MAAM;AACzB,sBAAQ,IAAI,WAAW,QAAQ,UAAU,CAAC;AAAA,YAC3C;AAAA,UACD,GAPe;AAQf,iBAAO,GAAG,QAAQ,MAAM;AAAA,QACzB;AAAA,MACD;AAEA,aAAO,WAAW,IAAI;AACtB,aAAO,KAAK,SAAS,MAAM;AAAA,IAC5B,CAAC;AAAA,EACF;AACD,EAAG;",
  "names": []
}
