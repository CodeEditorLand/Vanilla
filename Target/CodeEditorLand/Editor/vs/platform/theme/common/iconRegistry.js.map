{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/iconRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { getCodiconFontCharacters } from '../../../base/common/codiconsUtil.js';\nimport { ThemeIcon, IconIdentifier } from '../../../base/common/themables.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IJSONSchema, IJSONSchemaMap } from '../../../base/common/jsonSchema.js';\nimport { isString } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { Extensions as JSONExtensions, IJSONContributionRegistry } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n\n//  ------ API types\n\n\n// icon registry\nexport const Extensions = {\n\tIconContribution: 'base.contributions.icons'\n};\n\nexport type IconDefaults = ThemeIcon | IconDefinition;\n\nexport interface IconDefinition {\n\tfont?: IconFontContribution; // undefined for the default font (codicon)\n\tfontCharacter: string;\n}\n\n\nexport interface IconContribution {\n\treadonly id: string;\n\tdescription: string | undefined;\n\tdeprecationMessage?: string;\n\treadonly defaults: IconDefaults;\n}\n\nexport namespace IconContribution {\n\texport function getDefinition(contribution: IconContribution, registry: IIconRegistry): IconDefinition | undefined {\n\t\tlet definition = contribution.defaults;\n\t\twhile (ThemeIcon.isThemeIcon(definition)) {\n\t\t\tconst c = iconRegistry.getIcon(definition.id);\n\t\t\tif (!c) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tdefinition = c.defaults;\n\t\t}\n\t\treturn definition;\n\t}\n}\n\nexport interface IconFontContribution {\n\treadonly id: string;\n\treadonly definition: IconFontDefinition;\n}\n\nexport interface IconFontDefinition {\n\treadonly weight?: string;\n\treadonly style?: string;\n\treadonly src: IconFontSource[];\n}\n\nexport namespace IconFontDefinition {\n\texport function toJSONObject(iconFont: IconFontDefinition): any {\n\t\treturn {\n\t\t\tweight: iconFont.weight,\n\t\t\tstyle: iconFont.style,\n\t\t\tsrc: iconFont.src.map(s => ({ format: s.format, location: s.location.toString() }))\n\t\t};\n\t}\n\texport function fromJSONObject(json: any): IconFontDefinition | undefined {\n\t\tconst stringOrUndef = (s: any) => isString(s) ? s : undefined;\n\t\tif (json && Array.isArray(json.src) && json.src.every((s: any) => isString(s.format) && isString(s.location))) {\n\t\t\treturn {\n\t\t\t\tweight: stringOrUndef(json.weight),\n\t\t\t\tstyle: stringOrUndef(json.style),\n\t\t\t\tsrc: json.src.map((s: any) => ({ format: s.format, location: URI.parse(s.location) }))\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\n\nexport interface IconFontSource {\n\treadonly location: URI;\n\treadonly format: string;\n}\n\nexport interface IIconRegistry {\n\n\treadonly onDidChange: Event<void>;\n\n\t/**\n\t * Register a icon to the registry.\n\t * @param id The icon id\n\t * @param defaults The default values\n\t * @param description The description\n\t */\n\tregisterIcon(id: IconIdentifier, defaults: IconDefaults, description?: string): ThemeIcon;\n\n\t/**\n\t * Deregister a icon from the registry.\n\t */\n\tderegisterIcon(id: IconIdentifier): void;\n\n\t/**\n\t * Get all icon contributions\n\t */\n\tgetIcons(): IconContribution[];\n\n\t/**\n\t * Get the icon for the given id\n\t */\n\tgetIcon(id: IconIdentifier): IconContribution | undefined;\n\n\t/**\n\t * JSON schema for an object to assign icon values to one of the icon contributions.\n\t */\n\tgetIconSchema(): IJSONSchema;\n\n\t/**\n\t * JSON schema to for a reference to a icon contribution.\n\t */\n\tgetIconReferenceSchema(): IJSONSchema;\n\n\t/**\n\t * Register a icon font to the registry.\n\t * @param id The icon font id\n\t * @param definition The icon font definition\n\t */\n\tregisterIconFont(id: string, definition: IconFontDefinition): IconFontDefinition;\n\n\t/**\n\t * Deregister an icon font to the registry.\n\t */\n\tderegisterIconFont(id: string): void;\n\n\t/**\n\t * Get the icon font for the given id\n\t */\n\tgetIconFont(id: string): IconFontDefinition | undefined;\n}\n\nclass IconRegistry implements IIconRegistry {\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate iconsById: { [key: string]: IconContribution };\n\tprivate iconSchema: IJSONSchema & { properties: IJSONSchemaMap } = {\n\t\tdefinitions: {\n\t\t\ticons: {\n\t\t\t\ttype: 'object',\n\t\t\t\tproperties: {\n\t\t\t\t\tfontId: { type: 'string', description: localize('iconDefinition.fontId', 'The id of the font to use. If not set, the font that is defined first is used.') },\n\t\t\t\t\tfontCharacter: { type: 'string', description: localize('iconDefinition.fontCharacter', 'The font character associated with the icon definition.') }\n\t\t\t\t},\n\t\t\t\tadditionalProperties: false,\n\t\t\t\tdefaultSnippets: [{ body: { fontCharacter: '\\\\\\\\e030' } }]\n\t\t\t}\n\t\t},\n\t\ttype: 'object',\n\t\tproperties: {}\n\t};\n\tprivate iconReferenceSchema: IJSONSchema & { enum: string[]; enumDescriptions: string[] } = { type: 'string', pattern: `^${ThemeIcon.iconNameExpression}$`, enum: [], enumDescriptions: [] };\n\n\tprivate iconFontsById: { [key: string]: IconFontDefinition };\n\n\tconstructor() {\n\t\tthis.iconsById = {};\n\t\tthis.iconFontsById = {};\n\t}\n\n\tpublic registerIcon(id: string, defaults: IconDefaults, description?: string, deprecationMessage?: string): ThemeIcon {\n\t\tconst existing = this.iconsById[id];\n\t\tif (existing) {\n\t\t\tif (description && !existing.description) {\n\t\t\t\texisting.description = description;\n\t\t\t\tthis.iconSchema.properties[id].markdownDescription = `${description} $(${id})`;\n\t\t\t\tconst enumIndex = this.iconReferenceSchema.enum.indexOf(id);\n\t\t\t\tif (enumIndex !== -1) {\n\t\t\t\t\tthis.iconReferenceSchema.enumDescriptions[enumIndex] = description;\n\t\t\t\t}\n\t\t\t\tthis._onDidChange.fire();\n\t\t\t}\n\t\t\treturn existing;\n\t\t}\n\t\tconst iconContribution: IconContribution = { id, description, defaults, deprecationMessage };\n\t\tthis.iconsById[id] = iconContribution;\n\t\tconst propertySchema: IJSONSchema = { $ref: '#/definitions/icons' };\n\t\tif (deprecationMessage) {\n\t\t\tpropertySchema.deprecationMessage = deprecationMessage;\n\t\t}\n\t\tif (description) {\n\t\t\tpropertySchema.markdownDescription = `${description}: $(${id})`;\n\t\t}\n\t\tthis.iconSchema.properties[id] = propertySchema;\n\t\tthis.iconReferenceSchema.enum.push(id);\n\t\tthis.iconReferenceSchema.enumDescriptions.push(description || '');\n\n\t\tthis._onDidChange.fire();\n\t\treturn { id };\n\t}\n\n\n\tpublic deregisterIcon(id: string): void {\n\t\tdelete this.iconsById[id];\n\t\tdelete this.iconSchema.properties[id];\n\t\tconst index = this.iconReferenceSchema.enum.indexOf(id);\n\t\tif (index !== -1) {\n\t\t\tthis.iconReferenceSchema.enum.splice(index, 1);\n\t\t\tthis.iconReferenceSchema.enumDescriptions.splice(index, 1);\n\t\t}\n\t\tthis._onDidChange.fire();\n\t}\n\n\tpublic getIcons(): IconContribution[] {\n\t\treturn Object.keys(this.iconsById).map(id => this.iconsById[id]);\n\t}\n\n\tpublic getIcon(id: string): IconContribution | undefined {\n\t\treturn this.iconsById[id];\n\t}\n\n\tpublic getIconSchema(): IJSONSchema {\n\t\treturn this.iconSchema;\n\t}\n\n\tpublic getIconReferenceSchema(): IJSONSchema {\n\t\treturn this.iconReferenceSchema;\n\t}\n\n\tpublic registerIconFont(id: string, definition: IconFontDefinition): IconFontDefinition {\n\t\tconst existing = this.iconFontsById[id];\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\t\tthis.iconFontsById[id] = definition;\n\t\tthis._onDidChange.fire();\n\t\treturn definition;\n\t}\n\n\tpublic deregisterIconFont(id: string): void {\n\t\tdelete this.iconFontsById[id];\n\t}\n\n\tpublic getIconFont(id: string): IconFontDefinition | undefined {\n\t\treturn this.iconFontsById[id];\n\t}\n\n\tpublic toString() {\n\t\tconst sorter = (i1: IconContribution, i2: IconContribution) => {\n\t\t\treturn i1.id.localeCompare(i2.id);\n\t\t};\n\t\tconst classNames = (i: IconContribution) => {\n\t\t\twhile (ThemeIcon.isThemeIcon(i.defaults)) {\n\t\t\t\ti = this.iconsById[i.defaults.id];\n\t\t\t}\n\t\t\treturn `codicon codicon-${i ? i.id : ''}`;\n\t\t};\n\n\t\tconst reference = [];\n\n\t\treference.push(`| preview     | identifier                        | default codicon ID                | description`);\n\t\treference.push(`| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |`);\n\t\tconst contributions = Object.keys(this.iconsById).map(key => this.iconsById[key]);\n\n\t\tfor (const i of contributions.filter(i => !!i.description).sort(sorter)) {\n\t\t\treference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|${ThemeIcon.isThemeIcon(i.defaults) ? i.defaults.id : i.id}|${i.description || ''}|`);\n\t\t}\n\n\t\treference.push(`| preview     | identifier                        `);\n\t\treference.push(`| ----------- | --------------------------------- |`);\n\n\t\tfor (const i of contributions.filter(i => !ThemeIcon.isThemeIcon(i.defaults)).sort(sorter)) {\n\t\t\treference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|`);\n\n\t\t}\n\n\t\treturn reference.join('\\n');\n\t}\n\n}\n\nconst iconRegistry = new IconRegistry();\nplatform.Registry.add(Extensions.IconContribution, iconRegistry);\n\nexport function registerIcon(id: string, defaults: IconDefaults, description: string, deprecationMessage?: string): ThemeIcon {\n\treturn iconRegistry.registerIcon(id, defaults, description, deprecationMessage);\n}\n\nexport function getIconRegistry(): IIconRegistry {\n\treturn iconRegistry;\n}\n\nfunction initialize() {\n\tconst codiconFontCharacters = getCodiconFontCharacters();\n\tfor (const icon in codiconFontCharacters) {\n\t\tconst fontCharacter = '\\\\' + codiconFontCharacters[icon].toString(16);\n\t\ticonRegistry.registerIcon(icon, { fontCharacter });\n\t}\n}\ninitialize();\n\nexport const iconsSchemaId = 'vscode://schemas/icons';\n\nconst schemaRegistry = platform.Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(iconsSchemaId, iconRegistry.getIconSchema());\n\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(iconsSchemaId), 200);\niconRegistry.onDidChange(() => {\n\tif (!delayer.isScheduled()) {\n\t\tdelayer.schedule();\n\t}\n});\n\n\n//setTimeout(_ => console.log(iconRegistry.toString()), 5000);\n\n\n// common icons\n\nexport const widgetClose = registerIcon('widget-close', Codicon.close, localize('widgetClose', 'Icon for the close action in widgets.'));\n\nexport const gotoPreviousLocation = registerIcon('goto-previous-location', Codicon.arrowUp, localize('previousChangeIcon', 'Icon for goto previous editor location.'));\nexport const gotoNextLocation = registerIcon('goto-next-location', Codicon.arrowDown, localize('nextChangeIcon', 'Icon for goto next editor location.'));\n\nexport const syncing = ThemeIcon.modify(Codicon.sync, 'spin');\nexport const spinningLoading = ThemeIcon.modify(Codicon.loading, 'spin');\n"],
  "mappings": "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",
  "names": ["IconContribution", "IconFontDefinition", "i"]
}
