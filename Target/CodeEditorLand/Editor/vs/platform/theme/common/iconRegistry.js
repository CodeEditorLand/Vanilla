import{RunOnceScheduler as S}from"../../../base/common/async.js";import{Codicon as d}from"../../../base/common/codicons.js";import{getCodiconFontCharacters as C}from"../../../base/common/codiconsUtil.js";import{Emitter as b}from"../../../base/common/event.js";import{ThemeIcon as s}from"../../../base/common/themables.js";import{isString as h}from"../../../base/common/types.js";import{URI as D}from"../../../base/common/uri.js";import{localize as f}from"../../../nls.js";import{Extensions as x}from"../../jsonschemas/common/jsonContributionRegistry.js";import*as g from"../../registry/common/platform.js";const F={IconContribution:"base.contributions.icons"};var R;(e=>{function r(t,o){let i=t.defaults;for(;s.isThemeIcon(i);){const n=a.getIcon(i.id);if(!n)return;i=n.defaults}return i}e.getDefinition=r})(R||={});var v;(t=>{function r(o){return{weight:o.weight,style:o.style,src:o.src.map(i=>({format:i.format,location:i.location.toString()}))}}t.toJSONObject=r;function e(o){const i=n=>h(n)?n:void 0;if(o&&Array.isArray(o.src)&&o.src.every(n=>h(n.format)&&h(n.location)))return{weight:i(o.weight),style:i(o.style),src:o.src.map(n=>({format:n.format,location:D.parse(n.location)}))}}t.fromJSONObject=e})(v||={});class O{_onDidChange=new b;onDidChange=this._onDidChange.event;iconsById;iconSchema={definitions:{icons:{type:"object",properties:{fontId:{type:"string",description:f("iconDefinition.fontId","The id of the font to use. If not set, the font that is defined first is used.")},fontCharacter:{type:"string",description:f("iconDefinition.fontCharacter","The font character associated with the icon definition.")}},additionalProperties:!1,defaultSnippets:[{body:{fontCharacter:"\\\\e030"}}]}},type:"object",properties:{}};iconReferenceSchema={type:"string",pattern:`^${s.iconNameExpression}$`,enum:[],enumDescriptions:[]};iconFontsById;constructor(){this.iconsById={},this.iconFontsById={}}registerIcon(e,t,o,i){const n=this.iconsById[e];if(n){if(o&&!n.description){n.description=o,this.iconSchema.properties[e].markdownDescription=`${o} $(${e})`;const u=this.iconReferenceSchema.enum.indexOf(e);u!==-1&&(this.iconReferenceSchema.enumDescriptions[u]=o),this._onDidChange.fire()}return n}const c={id:e,description:o,defaults:t,deprecationMessage:i};this.iconsById[e]=c;const I={$ref:"#/definitions/icons"};return i&&(I.deprecationMessage=i),o&&(I.markdownDescription=`${o}: $(${e})`),this.iconSchema.properties[e]=I,this.iconReferenceSchema.enum.push(e),this.iconReferenceSchema.enumDescriptions.push(o||""),this._onDidChange.fire(),{id:e}}deregisterIcon(e){delete this.iconsById[e],delete this.iconSchema.properties[e];const t=this.iconReferenceSchema.enum.indexOf(e);t!==-1&&(this.iconReferenceSchema.enum.splice(t,1),this.iconReferenceSchema.enumDescriptions.splice(t,1)),this._onDidChange.fire()}getIcons(){return Object.keys(this.iconsById).map(e=>this.iconsById[e])}getIcon(e){return this.iconsById[e]}getIconSchema(){return this.iconSchema}getIconReferenceSchema(){return this.iconReferenceSchema}registerIconFont(e,t){const o=this.iconFontsById[e];return o||(this.iconFontsById[e]=t,this._onDidChange.fire(),t)}deregisterIconFont(e){delete this.iconFontsById[e]}getIconFont(e){return this.iconFontsById[e]}toString(){const e=(n,c)=>n.id.localeCompare(c.id),t=n=>{for(;s.isThemeIcon(n.defaults);)n=this.iconsById[n.defaults.id];return`codicon codicon-${n?n.id:""}`},o=[];o.push("| preview     | identifier                        | default codicon ID                | description"),o.push("| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |");const i=Object.keys(this.iconsById).map(n=>this.iconsById[n]);for(const n of i.filter(c=>!!c.description).sort(e))o.push(`|<i class="${t(n)}"></i>|${n.id}|${s.isThemeIcon(n.defaults)?n.defaults.id:n.id}|${n.description||""}|`);o.push("| preview     | identifier                        "),o.push("| ----------- | --------------------------------- |");for(const n of i.filter(c=>!s.isThemeIcon(c.defaults)).sort(e))o.push(`|<i class="${t(n)}"></i>|${n.id}|`);return o.join(`
`)}}const a=new O;g.Registry.add(F.IconContribution,a);function p(r,e,t,o){return a.registerIcon(r,e,t,o)}function U(){return a}function w(){const r=C();for(const e in r){const t="\\"+r[e].toString(16);a.registerIcon(e,{fontCharacter:t})}}w();const m="vscode://schemas/icons",l=g.Registry.as(x.JSONContribution);l.registerSchema(m,a.getIconSchema());const y=new S(()=>l.notifySchemaChanged(m),200);a.onDidChange(()=>{y.isScheduled()||y.schedule()});const L=p("widget-close",d.close,f("widgetClose","Icon for the close action in widgets.")),z=p("goto-previous-location",d.arrowUp,f("previousChangeIcon","Icon for goto previous editor location.")),A=p("goto-next-location",d.arrowDown,f("nextChangeIcon","Icon for goto next editor location.")),M=s.modify(d.sync,"spin"),P=s.modify(d.loading,"spin");export{F as Extensions,R as IconContribution,v as IconFontDefinition,U as getIconRegistry,A as gotoNextLocation,z as gotoPreviousLocation,m as iconsSchemaId,p as registerIcon,P as spinningLoading,M as syncing,L as widgetClose};
