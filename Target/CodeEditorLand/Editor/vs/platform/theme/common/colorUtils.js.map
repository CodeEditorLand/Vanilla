{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colorUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from '../../../base/common/assert.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IJSONSchema, IJSONSchemaSnippet } from '../../../base/common/jsonSchema.js';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { IColorTheme } from './themeService.js';\nimport * as nls from '../../../nls.js';\n\n//  ------ API types\n\nexport type ColorIdentifier = string;\n\nexport interface ColorContribution {\n\treadonly id: ColorIdentifier;\n\treadonly description: string;\n\treadonly defaults: ColorDefaults | ColorValue | null;\n\treadonly needsTransparency: boolean;\n\treadonly deprecationMessage: string | undefined;\n}\n\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent: ColorIdentifier): string {\n\treturn `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\n\nexport function asCssVariable(color: ColorIdentifier): string {\n\treturn `var(${asCssVariableName(color)})`;\n}\n\nexport function asCssVariableWithDefault(color: ColorIdentifier, defaultCssValue: string): string {\n\treturn `var(${asCssVariableName(color)}, ${defaultCssValue})`;\n}\n\nexport const enum ColorTransformType {\n\tDarken,\n\tLighten,\n\tTransparent,\n\tOpaque,\n\tOneOf,\n\tLessProminent,\n\tIfDefinedThenElse\n}\n\nexport type ColorTransform =\n\t| { op: ColorTransformType.Darken; value: ColorValue; factor: number }\n\t| { op: ColorTransformType.Lighten; value: ColorValue; factor: number }\n\t| { op: ColorTransformType.Transparent; value: ColorValue; factor: number }\n\t| { op: ColorTransformType.Opaque; value: ColorValue; background: ColorValue }\n\t| { op: ColorTransformType.OneOf; values: readonly ColorValue[] }\n\t| { op: ColorTransformType.LessProminent; value: ColorValue; background: ColorValue; factor: number; transparency: number }\n\t| { op: ColorTransformType.IfDefinedThenElse; if: ColorIdentifier; then: ColorValue; else: ColorValue };\n\nexport interface ColorDefaults {\n\tlight: ColorValue | null;\n\tdark: ColorValue | null;\n\thcDark: ColorValue | null;\n\thcLight: ColorValue | null;\n}\n\nexport function isColorDefaults(value: unknown): value is ColorDefaults {\n\treturn value !== null && typeof value === 'object' && 'light' in value && 'dark' in value;\n}\n\n/**\n * A Color Value is either a color literal, a reference to an other color or a derived color\n */\nexport type ColorValue = Color | string | ColorIdentifier | ColorTransform;\n\n// color registry\nexport const Extensions = {\n\tColorContribution: 'base.contributions.colors'\n};\n\nexport const DEFAULT_COLOR_CONFIG_VALUE = 'default';\n\nexport interface IColorRegistry {\n\n\treadonly onDidChangeSchema: Event<void>;\n\n\t/**\n\t * Register a color to the registry.\n\t * @param id The color id as used in theme description files\n\t * @param defaults The default values\n\t * @param needsTransparency Whether the color requires transparency\n\t * @description the description\n\t */\n\tregisterColor(id: string, defaults: ColorDefaults, description: string, needsTransparency?: boolean): ColorIdentifier;\n\n\t/**\n\t * Register a color to the registry.\n\t */\n\tderegisterColor(id: string): void;\n\n\t/**\n\t * Get all color contributions\n\t */\n\tgetColors(): ColorContribution[];\n\n\t/**\n\t * Gets the default color of the given id\n\t */\n\tresolveDefaultColor(id: ColorIdentifier, theme: IColorTheme): Color | undefined;\n\n\t/**\n\t * JSON schema for an object to assign color values to one of the color contributions.\n\t */\n\tgetColorSchema(): IJSONSchema;\n\n\t/**\n\t * JSON schema to for a reference to a color contribution.\n\t */\n\tgetColorReferenceSchema(): IJSONSchema;\n\n\t/**\n\t * Notify when the color theme or settings change.\n\t */\n\tnotifyThemeUpdate(theme: IColorTheme): void;\n\n}\n\ntype IJSONSchemaForColors = IJSONSchema & { properties: { [name: string]: { oneOf: [IJSONSchemaWithSnippets, IJSONSchema] } } };\ntype IJSONSchemaWithSnippets = IJSONSchema & { defaultSnippets: IJSONSchemaSnippet[] };\n\nclass ColorRegistry implements IColorRegistry {\n\n\tprivate readonly _onDidChangeSchema = new Emitter<void>();\n\treadonly onDidChangeSchema: Event<void> = this._onDidChangeSchema.event;\n\n\tprivate colorsById: { [key: string]: ColorContribution };\n\tprivate colorSchema: IJSONSchemaForColors = { type: 'object', properties: {} };\n\tprivate colorReferenceSchema: IJSONSchema & { enum: string[]; enumDescriptions: string[] } = { type: 'string', enum: [], enumDescriptions: [] };\n\n\tconstructor() {\n\t\tthis.colorsById = {};\n\t}\n\n\tpublic notifyThemeUpdate(colorThemeData: IColorTheme) {\n\t\tfor (const key of Object.keys(this.colorsById)) {\n\t\t\tconst color = colorThemeData.getColor(key);\n\t\t\tif (color) {\n\t\t\t\tthis.colorSchema.properties[key].oneOf[0].defaultSnippets[0].body = `\\${1:${color.toString()}}`;\n\t\t\t}\n\t\t}\n\t\tthis._onDidChangeSchema.fire();\n\t}\n\n\tpublic registerColor(id: string, defaults: ColorDefaults | ColorValue | null, description: string, needsTransparency = false, deprecationMessage?: string): ColorIdentifier {\n\t\tconst colorContribution: ColorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n\t\tthis.colorsById[id] = colorContribution;\n\t\tconst propertySchema: IJSONSchemaWithSnippets = { type: 'string', format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n\t\tif (deprecationMessage) {\n\t\t\tpropertySchema.deprecationMessage = deprecationMessage;\n\t\t}\n\t\tif (needsTransparency) {\n\t\t\tpropertySchema.pattern = '^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$';\n\t\t\tpropertySchema.patternErrorMessage = nls.localize('transparecyRequired', 'This color must be transparent or it will obscure content');\n\t\t}\n\t\tthis.colorSchema.properties[id] = {\n\t\t\tdescription,\n\t\t\toneOf: [\n\t\t\t\tpropertySchema,\n\t\t\t\t{ type: 'string', const: DEFAULT_COLOR_CONFIG_VALUE, description: nls.localize('useDefault', 'Use the default color.') }\n\t\t\t]\n\t\t};\n\t\tthis.colorReferenceSchema.enum.push(id);\n\t\tthis.colorReferenceSchema.enumDescriptions.push(description);\n\n\t\tthis._onDidChangeSchema.fire();\n\t\treturn id;\n\t}\n\n\n\tpublic deregisterColor(id: string): void {\n\t\tdelete this.colorsById[id];\n\t\tdelete this.colorSchema.properties[id];\n\t\tconst index = this.colorReferenceSchema.enum.indexOf(id);\n\t\tif (index !== -1) {\n\t\t\tthis.colorReferenceSchema.enum.splice(index, 1);\n\t\t\tthis.colorReferenceSchema.enumDescriptions.splice(index, 1);\n\t\t}\n\t\tthis._onDidChangeSchema.fire();\n\t}\n\n\tpublic getColors(): ColorContribution[] {\n\t\treturn Object.keys(this.colorsById).map(id => this.colorsById[id]);\n\t}\n\n\tpublic resolveDefaultColor(id: ColorIdentifier, theme: IColorTheme): Color | undefined {\n\t\tconst colorDesc = this.colorsById[id];\n\t\tif (colorDesc?.defaults) {\n\t\t\tconst colorValue = isColorDefaults(colorDesc.defaults) ? colorDesc.defaults[theme.type] : colorDesc.defaults;\n\t\t\treturn resolveColorValue(colorValue, theme);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic getColorSchema(): IJSONSchema {\n\t\treturn this.colorSchema;\n\t}\n\n\tpublic getColorReferenceSchema(): IJSONSchema {\n\t\treturn this.colorReferenceSchema;\n\t}\n\n\tpublic toString() {\n\t\tconst sorter = (a: string, b: string) => {\n\t\t\tconst cat1 = a.indexOf('.') === -1 ? 0 : 1;\n\t\t\tconst cat2 = b.indexOf('.') === -1 ? 0 : 1;\n\t\t\tif (cat1 !== cat2) {\n\t\t\t\treturn cat1 - cat2;\n\t\t\t}\n\t\t\treturn a.localeCompare(b);\n\t\t};\n\n\t\treturn Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n\t}\n\n}\n\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\n\n\nexport function registerColor(id: string, defaults: ColorDefaults | ColorValue | null, description: string, needsTransparency?: boolean, deprecationMessage?: string): ColorIdentifier {\n\treturn colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n\nexport function getColorRegistry(): IColorRegistry {\n\treturn colorRegistry;\n}\n\n// ----- color functions\n\nexport function executeTransform(transform: ColorTransform, theme: IColorTheme): Color | undefined {\n\tswitch (transform.op) {\n\t\tcase ColorTransformType.Darken:\n\t\t\treturn resolveColorValue(transform.value, theme)?.darken(transform.factor);\n\n\t\tcase ColorTransformType.Lighten:\n\t\t\treturn resolveColorValue(transform.value, theme)?.lighten(transform.factor);\n\n\t\tcase ColorTransformType.Transparent:\n\t\t\treturn resolveColorValue(transform.value, theme)?.transparent(transform.factor);\n\n\t\tcase ColorTransformType.Opaque: {\n\t\t\tconst backgroundColor = resolveColorValue(transform.background, theme);\n\t\t\tif (!backgroundColor) {\n\t\t\t\treturn resolveColorValue(transform.value, theme);\n\t\t\t}\n\t\t\treturn resolveColorValue(transform.value, theme)?.makeOpaque(backgroundColor);\n\t\t}\n\n\t\tcase ColorTransformType.OneOf:\n\t\t\tfor (const candidate of transform.values) {\n\t\t\t\tconst color = resolveColorValue(candidate, theme);\n\t\t\t\tif (color) {\n\t\t\t\t\treturn color;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\n\t\tcase ColorTransformType.IfDefinedThenElse:\n\t\t\treturn resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n\n\t\tcase ColorTransformType.LessProminent: {\n\t\t\tconst from = resolveColorValue(transform.value, theme);\n\t\t\tif (!from) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst backgroundColor = resolveColorValue(transform.background, theme);\n\t\t\tif (!backgroundColor) {\n\t\t\t\treturn from.transparent(transform.factor * transform.transparency);\n\t\t\t}\n\n\t\t\treturn from.isDarkerThan(backgroundColor)\n\t\t\t\t? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n\t\t\t\t: Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n\t\t}\n\t\tdefault:\n\t\t\tthrow assertNever(transform);\n\t}\n}\n\nexport function darken(colorValue: ColorValue, factor: number): ColorTransform {\n\treturn { op: ColorTransformType.Darken, value: colorValue, factor };\n}\n\nexport function lighten(colorValue: ColorValue, factor: number): ColorTransform {\n\treturn { op: ColorTransformType.Lighten, value: colorValue, factor };\n}\n\nexport function transparent(colorValue: ColorValue, factor: number): ColorTransform {\n\treturn { op: ColorTransformType.Transparent, value: colorValue, factor };\n}\n\nexport function opaque(colorValue: ColorValue, background: ColorValue): ColorTransform {\n\treturn { op: ColorTransformType.Opaque, value: colorValue, background };\n}\n\nexport function oneOf(...colorValues: ColorValue[]): ColorTransform {\n\treturn { op: ColorTransformType.OneOf, values: colorValues };\n}\n\nexport function ifDefinedThenElse(ifArg: ColorIdentifier, thenArg: ColorValue, elseArg: ColorValue): ColorTransform {\n\treturn { op: ColorTransformType.IfDefinedThenElse, if: ifArg, then: thenArg, else: elseArg };\n}\n\nexport function lessProminent(colorValue: ColorValue, backgroundColorValue: ColorValue, factor: number, transparency: number): ColorTransform {\n\treturn { op: ColorTransformType.LessProminent, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n\n// ----- implementation\n\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue: ColorValue | null, theme: IColorTheme): Color | undefined {\n\tif (colorValue === null) {\n\t\treturn undefined;\n\t} else if (typeof colorValue === 'string') {\n\t\tif (colorValue[0] === '#') {\n\t\t\treturn Color.fromHex(colorValue);\n\t\t}\n\t\treturn theme.getColor(colorValue);\n\t} else if (colorValue instanceof Color) {\n\t\treturn colorValue;\n\t} else if (typeof colorValue === 'object') {\n\t\treturn executeTransform(colorValue, theme);\n\t}\n\treturn undefined;\n}\n\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\n\nconst schemaRegistry = platform.Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\n\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\n\ncolorRegistry.onDidChangeSchema(() => {\n\tif (!delayer.isScheduled()) {\n\t\tdelayer.schedule();\n\t}\n});\n\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n"],
  "mappings": "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",
  "names": ["ColorTransformType"]
}
