{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colorUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from \"../../../base/common/assert.js\";\nimport { RunOnceScheduler } from \"../../../base/common/async.js\";\nimport { Color } from \"../../../base/common/color.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport type {\n\tIJSONSchema,\n\tIJSONSchemaSnippet,\n} from \"../../../base/common/jsonSchema.js\";\nimport * as nls from \"../../../nls.js\";\nimport {\n\ttype IJSONContributionRegistry,\n\tExtensions as JSONExtensions,\n} from \"../../jsonschemas/common/jsonContributionRegistry.js\";\nimport * as platform from \"../../registry/common/platform.js\";\nimport type { IColorTheme } from \"./themeService.js\";\n\n//  ------ API types\n\nexport type ColorIdentifier = string;\n\nexport interface ColorContribution {\n\treadonly id: ColorIdentifier;\n\treadonly description: string;\n\treadonly defaults: ColorDefaults | ColorValue | null;\n\treadonly needsTransparency: boolean;\n\treadonly deprecationMessage: string | undefined;\n}\n\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent: ColorIdentifier): string {\n\treturn `--vscode-${colorIdent.replace(/\\./g, \"-\")}`;\n}\n\nexport function asCssVariable(color: ColorIdentifier): string {\n\treturn `var(${asCssVariableName(color)})`;\n}\n\nexport function asCssVariableWithDefault(\n\tcolor: ColorIdentifier,\n\tdefaultCssValue: string,\n): string {\n\treturn `var(${asCssVariableName(color)}, ${defaultCssValue})`;\n}\n\nexport enum ColorTransformType {\n\tDarken = 0,\n\tLighten = 1,\n\tTransparent = 2,\n\tOpaque = 3,\n\tOneOf = 4,\n\tLessProminent = 5,\n\tIfDefinedThenElse = 6,\n}\n\nexport type ColorTransform =\n\t| { op: ColorTransformType.Darken; value: ColorValue; factor: number }\n\t| { op: ColorTransformType.Lighten; value: ColorValue; factor: number }\n\t| { op: ColorTransformType.Transparent; value: ColorValue; factor: number }\n\t| {\n\t\t\top: ColorTransformType.Opaque;\n\t\t\tvalue: ColorValue;\n\t\t\tbackground: ColorValue;\n\t  }\n\t| { op: ColorTransformType.OneOf; values: readonly ColorValue[] }\n\t| {\n\t\t\top: ColorTransformType.LessProminent;\n\t\t\tvalue: ColorValue;\n\t\t\tbackground: ColorValue;\n\t\t\tfactor: number;\n\t\t\ttransparency: number;\n\t  }\n\t| {\n\t\t\top: ColorTransformType.IfDefinedThenElse;\n\t\t\tif: ColorIdentifier;\n\t\t\tthen: ColorValue;\n\t\t\telse: ColorValue;\n\t  };\n\nexport interface ColorDefaults {\n\tlight: ColorValue | null;\n\tdark: ColorValue | null;\n\thcDark: ColorValue | null;\n\thcLight: ColorValue | null;\n}\n\nexport function isColorDefaults(value: unknown): value is ColorDefaults {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === \"object\" &&\n\t\t\"light\" in value &&\n\t\t\"dark\" in value\n\t);\n}\n\n/**\n * A Color Value is either a color literal, a reference to an other color or a derived color\n */\nexport type ColorValue = Color | string | ColorIdentifier | ColorTransform;\n\n// color registry\nexport const Extensions = {\n\tColorContribution: \"base.contributions.colors\",\n};\n\nexport const DEFAULT_COLOR_CONFIG_VALUE = \"default\";\n\nexport interface IColorRegistry {\n\treadonly onDidChangeSchema: Event<void>;\n\n\t/**\n\t * Register a color to the registry.\n\t * @param id The color id as used in theme description files\n\t * @param defaults The default values\n\t * @param needsTransparency Whether the color requires transparency\n\t * @description the description\n\t */\n\tregisterColor(\n\t\tid: string,\n\t\tdefaults: ColorDefaults,\n\t\tdescription: string,\n\t\tneedsTransparency?: boolean,\n\t): ColorIdentifier;\n\n\t/**\n\t * Register a color to the registry.\n\t */\n\tderegisterColor(id: string): void;\n\n\t/**\n\t * Get all color contributions\n\t */\n\tgetColors(): ColorContribution[];\n\n\t/**\n\t * Gets the default color of the given id\n\t */\n\tresolveDefaultColor(\n\t\tid: ColorIdentifier,\n\t\ttheme: IColorTheme,\n\t): Color | undefined;\n\n\t/**\n\t * JSON schema for an object to assign color values to one of the color contributions.\n\t */\n\tgetColorSchema(): IJSONSchema;\n\n\t/**\n\t * JSON schema to for a reference to a color contribution.\n\t */\n\tgetColorReferenceSchema(): IJSONSchema;\n\n\t/**\n\t * Notify when the color theme or settings change.\n\t */\n\tnotifyThemeUpdate(theme: IColorTheme): void;\n}\n\ntype IJSONSchemaForColors = IJSONSchema & {\n\tproperties: {\n\t\t[name: string]: { oneOf: [IJSONSchemaWithSnippets, IJSONSchema] };\n\t};\n};\ntype IJSONSchemaWithSnippets = IJSONSchema & {\n\tdefaultSnippets: IJSONSchemaSnippet[];\n};\n\nclass ColorRegistry implements IColorRegistry {\n\tprivate readonly _onDidChangeSchema = new Emitter<void>();\n\treadonly onDidChangeSchema: Event<void> = this._onDidChangeSchema.event;\n\n\tprivate colorsById: { [key: string]: ColorContribution };\n\tprivate colorSchema: IJSONSchemaForColors = {\n\t\ttype: \"object\",\n\t\tproperties: {},\n\t};\n\tprivate colorReferenceSchema: IJSONSchema & {\n\t\tenum: string[];\n\t\tenumDescriptions: string[];\n\t} = { type: \"string\", enum: [], enumDescriptions: [] };\n\n\tconstructor() {\n\t\tthis.colorsById = {};\n\t}\n\n\tpublic notifyThemeUpdate(colorThemeData: IColorTheme) {\n\t\tfor (const key of Object.keys(this.colorsById)) {\n\t\t\tconst color = colorThemeData.getColor(key);\n\t\t\tif (color) {\n\t\t\t\tthis.colorSchema.properties[\n\t\t\t\t\tkey\n\t\t\t\t].oneOf[0].defaultSnippets[0].body =\n\t\t\t\t\t`\\${1:${color.toString()}}`;\n\t\t\t}\n\t\t}\n\t\tthis._onDidChangeSchema.fire();\n\t}\n\n\tpublic registerColor(\n\t\tid: string,\n\t\tdefaults: ColorDefaults | ColorValue | null,\n\t\tdescription: string,\n\t\tneedsTransparency = false,\n\t\tdeprecationMessage?: string,\n\t): ColorIdentifier {\n\t\tconst colorContribution: ColorContribution = {\n\t\t\tid,\n\t\t\tdescription,\n\t\t\tdefaults,\n\t\t\tneedsTransparency,\n\t\t\tdeprecationMessage,\n\t\t};\n\t\tthis.colorsById[id] = colorContribution;\n\t\tconst propertySchema: IJSONSchemaWithSnippets = {\n\t\t\ttype: \"string\",\n\t\t\tformat: \"color-hex\",\n\t\t\tdefaultSnippets: [{ body: \"${1:#ff0000}\" }],\n\t\t};\n\t\tif (deprecationMessage) {\n\t\t\tpropertySchema.deprecationMessage = deprecationMessage;\n\t\t}\n\t\tif (needsTransparency) {\n\t\t\tpropertySchema.pattern =\n\t\t\t\t\"^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$\";\n\t\t\tpropertySchema.patternErrorMessage = nls.localize(\n\t\t\t\t\"transparecyRequired\",\n\t\t\t\t\"This color must be transparent or it will obscure content\",\n\t\t\t);\n\t\t}\n\t\tthis.colorSchema.properties[id] = {\n\t\t\tdescription,\n\t\t\toneOf: [\n\t\t\t\tpropertySchema,\n\t\t\t\t{\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tconst: DEFAULT_COLOR_CONFIG_VALUE,\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"useDefault\",\n\t\t\t\t\t\t\"Use the default color.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\tthis.colorReferenceSchema.enum.push(id);\n\t\tthis.colorReferenceSchema.enumDescriptions.push(description);\n\n\t\tthis._onDidChangeSchema.fire();\n\t\treturn id;\n\t}\n\n\tpublic deregisterColor(id: string): void {\n\t\tdelete this.colorsById[id];\n\t\tdelete this.colorSchema.properties[id];\n\t\tconst index = this.colorReferenceSchema.enum.indexOf(id);\n\t\tif (index !== -1) {\n\t\t\tthis.colorReferenceSchema.enum.splice(index, 1);\n\t\t\tthis.colorReferenceSchema.enumDescriptions.splice(index, 1);\n\t\t}\n\t\tthis._onDidChangeSchema.fire();\n\t}\n\n\tpublic getColors(): ColorContribution[] {\n\t\treturn Object.keys(this.colorsById).map((id) => this.colorsById[id]);\n\t}\n\n\tpublic resolveDefaultColor(\n\t\tid: ColorIdentifier,\n\t\ttheme: IColorTheme,\n\t): Color | undefined {\n\t\tconst colorDesc = this.colorsById[id];\n\t\tif (colorDesc?.defaults) {\n\t\t\tconst colorValue = isColorDefaults(colorDesc.defaults)\n\t\t\t\t? colorDesc.defaults[theme.type]\n\t\t\t\t: colorDesc.defaults;\n\t\t\treturn resolveColorValue(colorValue, theme);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic getColorSchema(): IJSONSchema {\n\t\treturn this.colorSchema;\n\t}\n\n\tpublic getColorReferenceSchema(): IJSONSchema {\n\t\treturn this.colorReferenceSchema;\n\t}\n\n\tpublic toString() {\n\t\tconst sorter = (a: string, b: string) => {\n\t\t\tconst cat1 = a.indexOf(\".\") === -1 ? 0 : 1;\n\t\t\tconst cat2 = b.indexOf(\".\") === -1 ? 0 : 1;\n\t\t\tif (cat1 !== cat2) {\n\t\t\t\treturn cat1 - cat2;\n\t\t\t}\n\t\t\treturn a.localeCompare(b);\n\t\t};\n\n\t\treturn Object.keys(this.colorsById)\n\t\t\t.sort(sorter)\n\t\t\t.map((k) => `- \\`${k}\\`: ${this.colorsById[k].description}`)\n\t\t\t.join(\"\\n\");\n\t}\n}\n\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\n\nexport function registerColor(\n\tid: string,\n\tdefaults: ColorDefaults | ColorValue | null,\n\tdescription: string,\n\tneedsTransparency?: boolean,\n\tdeprecationMessage?: string,\n): ColorIdentifier {\n\treturn colorRegistry.registerColor(\n\t\tid,\n\t\tdefaults,\n\t\tdescription,\n\t\tneedsTransparency,\n\t\tdeprecationMessage,\n\t);\n}\n\nexport function getColorRegistry(): IColorRegistry {\n\treturn colorRegistry;\n}\n\n// ----- color functions\n\nexport function executeTransform(\n\ttransform: ColorTransform,\n\ttheme: IColorTheme,\n): Color | undefined {\n\tswitch (transform.op) {\n\t\tcase ColorTransformType.Darken:\n\t\t\treturn resolveColorValue(transform.value, theme)?.darken(\n\t\t\t\ttransform.factor,\n\t\t\t);\n\n\t\tcase ColorTransformType.Lighten:\n\t\t\treturn resolveColorValue(transform.value, theme)?.lighten(\n\t\t\t\ttransform.factor,\n\t\t\t);\n\n\t\tcase ColorTransformType.Transparent:\n\t\t\treturn resolveColorValue(transform.value, theme)?.transparent(\n\t\t\t\ttransform.factor,\n\t\t\t);\n\n\t\tcase ColorTransformType.Opaque: {\n\t\t\tconst backgroundColor = resolveColorValue(\n\t\t\t\ttransform.background,\n\t\t\t\ttheme,\n\t\t\t);\n\t\t\tif (!backgroundColor) {\n\t\t\t\treturn resolveColorValue(transform.value, theme);\n\t\t\t}\n\t\t\treturn resolveColorValue(transform.value, theme)?.makeOpaque(\n\t\t\t\tbackgroundColor,\n\t\t\t);\n\t\t}\n\n\t\tcase ColorTransformType.OneOf:\n\t\t\tfor (const candidate of transform.values) {\n\t\t\t\tconst color = resolveColorValue(candidate, theme);\n\t\t\t\tif (color) {\n\t\t\t\t\treturn color;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\n\t\tcase ColorTransformType.IfDefinedThenElse:\n\t\t\treturn resolveColorValue(\n\t\t\t\ttheme.defines(transform.if) ? transform.then : transform.else,\n\t\t\t\ttheme,\n\t\t\t);\n\n\t\tcase ColorTransformType.LessProminent: {\n\t\t\tconst from = resolveColorValue(transform.value, theme);\n\t\t\tif (!from) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst backgroundColor = resolveColorValue(\n\t\t\t\ttransform.background,\n\t\t\t\ttheme,\n\t\t\t);\n\t\t\tif (!backgroundColor) {\n\t\t\t\treturn from.transparent(\n\t\t\t\t\ttransform.factor * transform.transparency,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn from.isDarkerThan(backgroundColor)\n\t\t\t\t? Color.getLighterColor(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\ttransform.factor,\n\t\t\t\t\t).transparent(transform.transparency)\n\t\t\t\t: Color.getDarkerColor(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\ttransform.factor,\n\t\t\t\t\t).transparent(transform.transparency);\n\t\t}\n\t\tdefault:\n\t\t\tthrow assertNever(transform);\n\t}\n}\n\nexport function darken(colorValue: ColorValue, factor: number): ColorTransform {\n\treturn { op: ColorTransformType.Darken, value: colorValue, factor };\n}\n\nexport function lighten(\n\tcolorValue: ColorValue,\n\tfactor: number,\n): ColorTransform {\n\treturn { op: ColorTransformType.Lighten, value: colorValue, factor };\n}\n\nexport function transparent(\n\tcolorValue: ColorValue,\n\tfactor: number,\n): ColorTransform {\n\treturn { op: ColorTransformType.Transparent, value: colorValue, factor };\n}\n\nexport function opaque(\n\tcolorValue: ColorValue,\n\tbackground: ColorValue,\n): ColorTransform {\n\treturn { op: ColorTransformType.Opaque, value: colorValue, background };\n}\n\nexport function oneOf(...colorValues: ColorValue[]): ColorTransform {\n\treturn { op: ColorTransformType.OneOf, values: colorValues };\n}\n\nexport function ifDefinedThenElse(\n\tifArg: ColorIdentifier,\n\tthenArg: ColorValue,\n\telseArg: ColorValue,\n): ColorTransform {\n\treturn {\n\t\top: ColorTransformType.IfDefinedThenElse,\n\t\tif: ifArg,\n\t\tthen: thenArg,\n\t\telse: elseArg,\n\t};\n}\n\nexport function lessProminent(\n\tcolorValue: ColorValue,\n\tbackgroundColorValue: ColorValue,\n\tfactor: number,\n\ttransparency: number,\n): ColorTransform {\n\treturn {\n\t\top: ColorTransformType.LessProminent,\n\t\tvalue: colorValue,\n\t\tbackground: backgroundColorValue,\n\t\tfactor,\n\t\ttransparency,\n\t};\n}\n\n// ----- implementation\n\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(\n\tcolorValue: ColorValue | null,\n\ttheme: IColorTheme,\n): Color | undefined {\n\tif (colorValue === null) {\n\t\treturn undefined;\n\t} else if (typeof colorValue === \"string\") {\n\t\tif (colorValue[0] === \"#\") {\n\t\t\treturn Color.fromHex(colorValue);\n\t\t}\n\t\treturn theme.getColor(colorValue);\n\t} else if (colorValue instanceof Color) {\n\t\treturn colorValue;\n\t} else if (typeof colorValue === \"object\") {\n\t\treturn executeTransform(colorValue, theme);\n\t}\n\treturn undefined;\n}\n\nexport const workbenchColorsSchemaId = \"vscode://schemas/workbench-colors\";\n\nconst schemaRegistry = platform.Registry.as<IJSONContributionRegistry>(\n\tJSONExtensions.JSONContribution,\n);\nschemaRegistry.registerSchema(\n\tworkbenchColorsSchemaId,\n\tcolorRegistry.getColorSchema(),\n);\n\nconst delayer = new RunOnceScheduler(\n\t() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId),\n\t200,\n);\n\ncolorRegistry.onDidChangeSchema(() => {\n\tif (!delayer.isScheduled()) {\n\t\tdelayer.schedule();\n\t}\n});\n\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n"],
  "mappings": "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",
  "names": ["ColorTransformType"]
}
