import{Codicon as a}from"../../../base/common/codicons.js";import{Emitter as s}from"../../../base/common/event.js";import{Disposable as c,toDisposable as l}from"../../../base/common/lifecycle.js";import{createDecorator as m}from"../../instantiation/common/instantiation.js";import*as h from"../../registry/common/platform.js";import{ColorScheme as o}from"./theme.js";const y=m("themeService");function b(e){return{id:e}}const v=a.file,P=a.folder;function B(e){switch(e){case o.DARK:return"vs-dark";case o.HIGH_CONTRAST_DARK:return"hc-black";case o.HIGH_CONTRAST_LIGHT:return"hc-light";default:return"vs"}}const g={ThemingContribution:"base.contributions.theming"};class u{themingParticipants=[];onThemingParticipantAddedEmitter;constructor(){this.themingParticipants=[],this.onThemingParticipantAddedEmitter=new s}onColorThemeChange(r){return this.themingParticipants.push(r),this.onThemingParticipantAddedEmitter.fire(r),l(()=>{const n=this.themingParticipants.indexOf(r);this.themingParticipants.splice(n,1)})}get onThemingParticipantAdded(){return this.onThemingParticipantAddedEmitter.event}getThemingParticipants(){return this.themingParticipants}}const d=new u;h.Registry.add(g.ThemingContribution,d);function S(e){return d.onColorThemeChange(e)}class x extends c{constructor(n){super();this.themeService=n;this.theme=n.getColorTheme(),this._register(this.themeService.onDidColorThemeChange(i=>this.onThemeChange(i)))}theme;onThemeChange(n){this.theme=n,this.updateStyles()}updateStyles(){}getColor(n,i){let t=this.theme.getColor(n);return t&&i&&(t=i(t,this.theme)),t?t.toString():null}}export{g as Extensions,v as FileThemeIcon,P as FolderThemeIcon,y as IThemeService,x as Themable,B as getThemeTypeSelector,S as registerThemingParticipant,b as themeColorFromId};
