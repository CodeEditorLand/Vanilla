{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/tokenClassificationRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IJSONSchema, IJSONSchemaMap } from '../../../base/common/jsonSchema.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions, IJSONContributionRegistry } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { IColorTheme } from './themeService.js';\n\nconst TOKEN_TYPE_WILDCARD = '*';\nconst TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR = ':';\nconst CLASSIFIER_MODIFIER_SEPARATOR = '.';\n\n// qualified string [type|*](.modifier)*(/language)!\ntype TokenClassificationString = string;\n\nconst idPattern = '\\\\w+[-_\\\\w+]*';\nexport const typeAndModifierIdPattern = `^${idPattern}$`;\n\nconst selectorPattern = `^(${idPattern}|\\\\*)(\\\\${CLASSIFIER_MODIFIER_SEPARATOR}${idPattern})*(${TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR}${idPattern})?$`;\n\nconst fontStylePattern = '^(\\\\s*(italic|bold|underline|strikethrough))*\\\\s*$';\n\nexport interface TokenSelector {\n\tmatch(type: string, modifiers: string[], language: string): number;\n\treadonly id: string;\n}\n\nexport interface TokenTypeOrModifierContribution {\n\treadonly num: number;\n\treadonly id: string;\n\treadonly superType?: string;\n\treadonly description: string;\n\treadonly deprecationMessage?: string;\n}\n\n\nexport interface TokenStyleData {\n\tforeground: Color | undefined;\n\tbold: boolean | undefined;\n\tunderline: boolean | undefined;\n\tstrikethrough: boolean | undefined;\n\titalic: boolean | undefined;\n}\n\nexport class TokenStyle implements Readonly<TokenStyleData> {\n\tconstructor(\n\t\tpublic readonly foreground: Color | undefined,\n\t\tpublic readonly bold: boolean | undefined,\n\t\tpublic readonly underline: boolean | undefined,\n\t\tpublic readonly strikethrough: boolean | undefined,\n\t\tpublic readonly italic: boolean | undefined,\n\t) {\n\t}\n}\n\nexport namespace TokenStyle {\n\texport function toJSONObject(style: TokenStyle): any {\n\t\treturn {\n\t\t\t_foreground: style.foreground === undefined ? null : Color.Format.CSS.formatHexA(style.foreground, true),\n\t\t\t_bold: style.bold === undefined ? null : style.bold,\n\t\t\t_underline: style.underline === undefined ? null : style.underline,\n\t\t\t_italic: style.italic === undefined ? null : style.italic,\n\t\t\t_strikethrough: style.strikethrough === undefined ? null : style.strikethrough,\n\t\t};\n\t}\n\texport function fromJSONObject(obj: any): TokenStyle | undefined {\n\t\tif (obj) {\n\t\t\tconst boolOrUndef = (b: any) => (typeof b === 'boolean') ? b : undefined;\n\t\t\tconst colorOrUndef = (s: any) => (typeof s === 'string') ? Color.fromHex(s) : undefined;\n\t\t\treturn new TokenStyle(\n\t\t\t\tcolorOrUndef(obj._foreground),\n\t\t\t\tboolOrUndef(obj._bold),\n\t\t\t\tboolOrUndef(obj._underline),\n\t\t\t\tboolOrUndef(obj._strikethrough),\n\t\t\t\tboolOrUndef(obj._italic)\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\texport function equals(s1: any, s2: any): boolean {\n\t\tif (s1 === s2) {\n\t\t\treturn true;\n\t\t}\n\t\treturn s1 !== undefined && s2 !== undefined\n\t\t\t&& (s1.foreground instanceof Color ? s1.foreground.equals(s2.foreground) : s2.foreground === undefined)\n\t\t\t&& s1.bold === s2.bold\n\t\t\t&& s1.underline === s2.underline\n\t\t\t&& s1.strikethrough === s2.strikethrough\n\t\t\t&& s1.italic === s2.italic;\n\t}\n\texport function is(s: any): s is TokenStyle {\n\t\treturn s instanceof TokenStyle;\n\t}\n\texport function fromData(data: { foreground: Color | undefined; bold: boolean | undefined; underline: boolean | undefined; strikethrough: boolean | undefined; italic: boolean | undefined }): TokenStyle {\n\t\treturn new TokenStyle(data.foreground, data.bold, data.underline, data.strikethrough, data.italic);\n\t}\n\texport function fromSettings(foreground: string | undefined, fontStyle: string | undefined): TokenStyle;\n\texport function fromSettings(foreground: string | undefined, fontStyle: string | undefined, bold: boolean | undefined, underline: boolean | undefined, strikethrough: boolean | undefined, italic: boolean | undefined): TokenStyle;\n\texport function fromSettings(foreground: string | undefined, fontStyle: string | undefined, bold?: boolean, underline?: boolean, strikethrough?: boolean, italic?: boolean): TokenStyle {\n\t\tlet foregroundColor = undefined;\n\t\tif (foreground !== undefined) {\n\t\t\tforegroundColor = Color.fromHex(foreground);\n\t\t}\n\t\tif (fontStyle !== undefined) {\n\t\t\tbold = italic = underline = strikethrough = false;\n\t\t\tconst expression = /italic|bold|underline|strikethrough/g;\n\t\t\tlet match;\n\t\t\twhile ((match = expression.exec(fontStyle))) {\n\t\t\t\tswitch (match[0]) {\n\t\t\t\t\tcase 'bold': bold = true; break;\n\t\t\t\t\tcase 'italic': italic = true; break;\n\t\t\t\t\tcase 'underline': underline = true; break;\n\t\t\t\t\tcase 'strikethrough': strikethrough = true; break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new TokenStyle(foregroundColor, bold, underline, strikethrough, italic);\n\t}\n}\n\nexport type ProbeScope = string[];\n\nexport interface TokenStyleFunction {\n\t(theme: IColorTheme): TokenStyle | undefined;\n}\n\nexport interface TokenStyleDefaults {\n\tscopesToProbe?: ProbeScope[];\n\tlight?: TokenStyleValue;\n\tdark?: TokenStyleValue;\n\thcDark?: TokenStyleValue;\n\thcLight?: TokenStyleValue;\n}\n\nexport interface SemanticTokenDefaultRule {\n\tselector: TokenSelector;\n\tdefaults: TokenStyleDefaults;\n}\n\nexport interface SemanticTokenRule {\n\tstyle: TokenStyle;\n\tselector: TokenSelector;\n}\n\nexport namespace SemanticTokenRule {\n\texport function fromJSONObject(registry: ITokenClassificationRegistry, o: any): SemanticTokenRule | undefined {\n\t\tif (o && typeof o._selector === 'string' && o._style) {\n\t\t\tconst style = TokenStyle.fromJSONObject(o._style);\n\t\t\tif (style) {\n\t\t\t\ttry {\n\t\t\t\t\treturn { selector: registry.parseTokenSelector(o._selector), style };\n\t\t\t\t} catch (_ignore) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\texport function toJSONObject(rule: SemanticTokenRule): any {\n\t\treturn {\n\t\t\t_selector: rule.selector.id,\n\t\t\t_style: TokenStyle.toJSONObject(rule.style)\n\t\t};\n\t}\n\texport function equals(r1: SemanticTokenRule | undefined, r2: SemanticTokenRule | undefined) {\n\t\tif (r1 === r2) {\n\t\t\treturn true;\n\t\t}\n\t\treturn r1 !== undefined && r2 !== undefined\n\t\t\t&& r1.selector && r2.selector && r1.selector.id === r2.selector.id\n\t\t\t&& TokenStyle.equals(r1.style, r2.style);\n\t}\n\texport function is(r: any): r is SemanticTokenRule {\n\t\treturn r && r.selector && typeof r.selector.id === 'string' && TokenStyle.is(r.style);\n\t}\n}\n\n/**\n * A TokenStyle Value is either a token style literal, or a TokenClassificationString\n */\nexport type TokenStyleValue = TokenStyle | TokenClassificationString;\n\n// TokenStyle registry\nconst Extensions = {\n\tTokenClassificationContribution: 'base.contributions.tokenClassification'\n};\n\nexport interface ITokenClassificationRegistry {\n\n\treadonly onDidChangeSchema: Event<void>;\n\n\t/**\n\t * Register a token type to the registry.\n\t * @param id The TokenType id as used in theme description files\n\t * @param description the description\n\t */\n\tregisterTokenType(id: string, description: string, superType?: string, deprecationMessage?: string): void;\n\n\t/**\n\t * Register a token modifier to the registry.\n\t * @param id The TokenModifier id as used in theme description files\n\t * @param description the description\n\t */\n\tregisterTokenModifier(id: string, description: string): void;\n\n\t/**\n\t * Parses a token selector from a selector string.\n\t * @param selectorString selector string in the form (*|type)(.modifier)*\n\t * @param language language to which the selector applies or undefined if the selector is for all languafe\n\t * @returns the parsesd selector\n\t * @throws an error if the string is not a valid selector\n\t */\n\tparseTokenSelector(selectorString: string, language?: string): TokenSelector;\n\n\t/**\n\t * Register a TokenStyle default to the registry.\n\t * @param selector The rule selector\n\t * @param defaults The default values\n\t */\n\tregisterTokenStyleDefault(selector: TokenSelector, defaults: TokenStyleDefaults): void;\n\n\t/**\n\t * Deregister a TokenStyle default to the registry.\n\t * @param selector The rule selector\n\t */\n\tderegisterTokenStyleDefault(selector: TokenSelector): void;\n\n\t/**\n\t * Deregister a TokenType from the registry.\n\t */\n\tderegisterTokenType(id: string): void;\n\n\t/**\n\t * Deregister a TokenModifier from the registry.\n\t */\n\tderegisterTokenModifier(id: string): void;\n\n\t/**\n\t * Get all TokenType contributions\n\t */\n\tgetTokenTypes(): TokenTypeOrModifierContribution[];\n\n\t/**\n\t * Get all TokenModifier contributions\n\t */\n\tgetTokenModifiers(): TokenTypeOrModifierContribution[];\n\n\t/**\n\t * The styling rules to used when a schema does not define any styling rules.\n\t */\n\tgetTokenStylingDefaultRules(): SemanticTokenDefaultRule[];\n\n\t/**\n\t * JSON schema for an object to assign styling to token classifications\n\t */\n\tgetTokenStylingSchema(): IJSONSchema;\n}\n\nclass TokenClassificationRegistry implements ITokenClassificationRegistry {\n\n\tprivate readonly _onDidChangeSchema = new Emitter<void>();\n\treadonly onDidChangeSchema: Event<void> = this._onDidChangeSchema.event;\n\n\tprivate currentTypeNumber = 0;\n\tprivate currentModifierBit = 1;\n\n\tprivate tokenTypeById: { [key: string]: TokenTypeOrModifierContribution };\n\tprivate tokenModifierById: { [key: string]: TokenTypeOrModifierContribution };\n\n\tprivate tokenStylingDefaultRules: SemanticTokenDefaultRule[] = [];\n\n\tprivate typeHierarchy: { [id: string]: string[] };\n\n\tprivate tokenStylingSchema: IJSONSchema & { properties: IJSONSchemaMap; patternProperties: IJSONSchemaMap } = {\n\t\ttype: 'object',\n\t\tproperties: {},\n\t\tpatternProperties: {\n\t\t\t[selectorPattern]: getStylingSchemeEntry()\n\t\t},\n\t\t//errorMessage: nls.localize('schema.token.errors', 'Valid token selectors have the form (*|tokenType)(.tokenModifier)*(:tokenLanguage)?.'),\n\t\tadditionalProperties: false,\n\t\tdefinitions: {\n\t\t\tstyle: {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('schema.token.settings', 'Colors and styles for the token.'),\n\t\t\t\tproperties: {\n\t\t\t\t\tforeground: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('schema.token.foreground', 'Foreground color for the token.'),\n\t\t\t\t\t\tformat: 'color-hex',\n\t\t\t\t\t\tdefault: '#ff0000'\n\t\t\t\t\t},\n\t\t\t\t\tbackground: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdeprecationMessage: nls.localize('schema.token.background.warning', 'Token background colors are currently not supported.')\n\t\t\t\t\t},\n\t\t\t\t\tfontStyle: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('schema.token.fontStyle', 'Sets the all font styles of the rule: \\'italic\\', \\'bold\\', \\'underline\\' or \\'strikethrough\\' or a combination. All styles that are not listed are unset. The empty string unsets all styles.'),\n\t\t\t\t\t\tpattern: fontStylePattern,\n\t\t\t\t\t\tpatternErrorMessage: nls.localize('schema.fontStyle.error', 'Font style must be \\'italic\\', \\'bold\\', \\'underline\\' or \\'strikethrough\\' or a combination. The empty string unsets all styles.'),\n\t\t\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t\t\t{ label: nls.localize('schema.token.fontStyle.none', 'None (clear inherited style)'), bodyText: '\"\"' },\n\t\t\t\t\t\t\t{ body: 'italic' },\n\t\t\t\t\t\t\t{ body: 'bold' },\n\t\t\t\t\t\t\t{ body: 'underline' },\n\t\t\t\t\t\t\t{ body: 'strikethrough' },\n\t\t\t\t\t\t\t{ body: 'italic bold' },\n\t\t\t\t\t\t\t{ body: 'italic underline' },\n\t\t\t\t\t\t\t{ body: 'italic strikethrough' },\n\t\t\t\t\t\t\t{ body: 'bold underline' },\n\t\t\t\t\t\t\t{ body: 'bold strikethrough' },\n\t\t\t\t\t\t\t{ body: 'underline strikethrough' },\n\t\t\t\t\t\t\t{ body: 'italic bold underline' },\n\t\t\t\t\t\t\t{ body: 'italic bold strikethrough' },\n\t\t\t\t\t\t\t{ body: 'italic underline strikethrough' },\n\t\t\t\t\t\t\t{ body: 'bold underline strikethrough' },\n\t\t\t\t\t\t\t{ body: 'italic bold underline strikethrough' }\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tbold: {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdescription: nls.localize('schema.token.bold', 'Sets or unsets the font style to bold. Note, the presence of \\'fontStyle\\' overrides this setting.'),\n\t\t\t\t\t},\n\t\t\t\t\titalic: {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdescription: nls.localize('schema.token.italic', 'Sets or unsets the font style to italic. Note, the presence of \\'fontStyle\\' overrides this setting.'),\n\t\t\t\t\t},\n\t\t\t\t\tunderline: {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdescription: nls.localize('schema.token.underline', 'Sets or unsets the font style to underline. Note, the presence of \\'fontStyle\\' overrides this setting.'),\n\t\t\t\t\t},\n\t\t\t\t\tstrikethrough: {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdescription: nls.localize('schema.token.strikethrough', 'Sets or unsets the font style to strikethrough. Note, the presence of \\'fontStyle\\' overrides this setting.'),\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tdefaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n\t\t\t}\n\t\t}\n\t};\n\n\tconstructor() {\n\t\tthis.tokenTypeById = Object.create(null);\n\t\tthis.tokenModifierById = Object.create(null);\n\t\tthis.typeHierarchy = Object.create(null);\n\t}\n\n\tpublic registerTokenType(id: string, description: string, superType?: string, deprecationMessage?: string): void {\n\t\tif (!id.match(typeAndModifierIdPattern)) {\n\t\t\tthrow new Error('Invalid token type id.');\n\t\t}\n\t\tif (superType && !superType.match(typeAndModifierIdPattern)) {\n\t\t\tthrow new Error('Invalid token super type id.');\n\t\t}\n\n\t\tconst num = this.currentTypeNumber++;\n\t\tconst tokenStyleContribution: TokenTypeOrModifierContribution = { num, id, superType, description, deprecationMessage };\n\t\tthis.tokenTypeById[id] = tokenStyleContribution;\n\n\t\tconst stylingSchemeEntry = getStylingSchemeEntry(description, deprecationMessage);\n\t\tthis.tokenStylingSchema.properties[id] = stylingSchemeEntry;\n\t\tthis.typeHierarchy = Object.create(null);\n\t}\n\n\tpublic registerTokenModifier(id: string, description: string, deprecationMessage?: string): void {\n\t\tif (!id.match(typeAndModifierIdPattern)) {\n\t\t\tthrow new Error('Invalid token modifier id.');\n\t\t}\n\n\t\tconst num = this.currentModifierBit;\n\t\tthis.currentModifierBit = this.currentModifierBit * 2;\n\t\tconst tokenStyleContribution: TokenTypeOrModifierContribution = { num, id, description, deprecationMessage };\n\t\tthis.tokenModifierById[id] = tokenStyleContribution;\n\n\t\tthis.tokenStylingSchema.properties[`*.${id}`] = getStylingSchemeEntry(description, deprecationMessage);\n\t}\n\n\tpublic parseTokenSelector(selectorString: string, language?: string): TokenSelector {\n\t\tconst selector = parseClassifierString(selectorString, language);\n\n\t\tif (!selector.type) {\n\t\t\treturn {\n\t\t\t\tmatch: () => -1,\n\t\t\t\tid: '$invalid'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmatch: (type: string, modifiers: string[], language: string) => {\n\t\t\t\tlet score = 0;\n\t\t\t\tif (selector.language !== undefined) {\n\t\t\t\t\tif (selector.language !== language) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tscore += 10;\n\t\t\t\t}\n\t\t\t\tif (selector.type !== TOKEN_TYPE_WILDCARD) {\n\t\t\t\t\tconst hierarchy = this.getTypeHierarchy(type);\n\t\t\t\t\tconst level = hierarchy.indexOf(selector.type);\n\t\t\t\t\tif (level === -1) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tscore += (100 - level);\n\t\t\t\t}\n\t\t\t\t// all selector modifiers must be present\n\t\t\t\tfor (const selectorModifier of selector.modifiers) {\n\t\t\t\t\tif (modifiers.indexOf(selectorModifier) === -1) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn score + selector.modifiers.length * 100;\n\t\t\t},\n\t\t\tid: `${[selector.type, ...selector.modifiers.sort()].join('.')}${selector.language !== undefined ? ':' + selector.language : ''}`\n\t\t};\n\t}\n\n\tpublic registerTokenStyleDefault(selector: TokenSelector, defaults: TokenStyleDefaults): void {\n\t\tthis.tokenStylingDefaultRules.push({ selector, defaults });\n\t}\n\n\tpublic deregisterTokenStyleDefault(selector: TokenSelector): void {\n\t\tconst selectorString = selector.id;\n\t\tthis.tokenStylingDefaultRules = this.tokenStylingDefaultRules.filter(r => r.selector.id !== selectorString);\n\t}\n\n\tpublic deregisterTokenType(id: string): void {\n\t\tdelete this.tokenTypeById[id];\n\t\tdelete this.tokenStylingSchema.properties[id];\n\t\tthis.typeHierarchy = Object.create(null);\n\t}\n\n\tpublic deregisterTokenModifier(id: string): void {\n\t\tdelete this.tokenModifierById[id];\n\t\tdelete this.tokenStylingSchema.properties[`*.${id}`];\n\t}\n\n\tpublic getTokenTypes(): TokenTypeOrModifierContribution[] {\n\t\treturn Object.keys(this.tokenTypeById).map(id => this.tokenTypeById[id]);\n\t}\n\n\tpublic getTokenModifiers(): TokenTypeOrModifierContribution[] {\n\t\treturn Object.keys(this.tokenModifierById).map(id => this.tokenModifierById[id]);\n\t}\n\n\tpublic getTokenStylingSchema(): IJSONSchema {\n\t\treturn this.tokenStylingSchema;\n\t}\n\n\tpublic getTokenStylingDefaultRules(): SemanticTokenDefaultRule[] {\n\t\treturn this.tokenStylingDefaultRules;\n\t}\n\n\tprivate getTypeHierarchy(typeId: string): string[] {\n\t\tlet hierarchy = this.typeHierarchy[typeId];\n\t\tif (!hierarchy) {\n\t\t\tthis.typeHierarchy[typeId] = hierarchy = [typeId];\n\t\t\tlet type = this.tokenTypeById[typeId];\n\t\t\twhile (type && type.superType) {\n\t\t\t\thierarchy.push(type.superType);\n\t\t\t\ttype = this.tokenTypeById[type.superType];\n\t\t\t}\n\t\t}\n\t\treturn hierarchy;\n\t}\n\n\n\tpublic toString() {\n\t\tconst sorter = (a: string, b: string) => {\n\t\t\tconst cat1 = a.indexOf('.') === -1 ? 0 : 1;\n\t\t\tconst cat2 = b.indexOf('.') === -1 ? 0 : 1;\n\t\t\tif (cat1 !== cat2) {\n\t\t\t\treturn cat1 - cat2;\n\t\t\t}\n\t\t\treturn a.localeCompare(b);\n\t\t};\n\n\t\treturn Object.keys(this.tokenTypeById).sort(sorter).map(k => `- \\`${k}\\`: ${this.tokenTypeById[k].description}`).join('\\n');\n\t}\n\n}\n\nconst CHAR_LANGUAGE = TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR.charCodeAt(0);\nconst CHAR_MODIFIER = CLASSIFIER_MODIFIER_SEPARATOR.charCodeAt(0);\n\nexport function parseClassifierString(s: string, defaultLanguage: string): { type: string; modifiers: string[]; language: string };\nexport function parseClassifierString(s: string, defaultLanguage?: string): { type: string; modifiers: string[]; language: string | undefined };\nexport function parseClassifierString(s: string, defaultLanguage: string | undefined): { type: string; modifiers: string[]; language: string | undefined } {\n\tlet k = s.length;\n\tlet language: string | undefined = defaultLanguage;\n\tconst modifiers = [];\n\n\tfor (let i = k - 1; i >= 0; i--) {\n\t\tconst ch = s.charCodeAt(i);\n\t\tif (ch === CHAR_LANGUAGE || ch === CHAR_MODIFIER) {\n\t\t\tconst segment = s.substring(i + 1, k);\n\t\t\tk = i;\n\t\t\tif (ch === CHAR_LANGUAGE) {\n\t\t\t\tlanguage = segment;\n\t\t\t} else {\n\t\t\t\tmodifiers.push(segment);\n\t\t\t}\n\t\t}\n\t}\n\tconst type = s.substring(0, k);\n\treturn { type, modifiers, language };\n}\n\n\nconst tokenClassificationRegistry = createDefaultTokenClassificationRegistry();\nplatform.Registry.add(Extensions.TokenClassificationContribution, tokenClassificationRegistry);\n\n\nfunction createDefaultTokenClassificationRegistry(): TokenClassificationRegistry {\n\n\tconst registry = new TokenClassificationRegistry();\n\n\tfunction registerTokenType(id: string, description: string, scopesToProbe: ProbeScope[] = [], superType?: string, deprecationMessage?: string): string {\n\t\tregistry.registerTokenType(id, description, superType, deprecationMessage);\n\t\tif (scopesToProbe) {\n\t\t\tregisterTokenStyleDefault(id, scopesToProbe);\n\t\t}\n\t\treturn id;\n\t}\n\n\tfunction registerTokenStyleDefault(selectorString: string, scopesToProbe: ProbeScope[]) {\n\t\ttry {\n\t\t\tconst selector = registry.parseTokenSelector(selectorString);\n\t\t\tregistry.registerTokenStyleDefault(selector, { scopesToProbe });\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n\n\t// default token types\n\n\tregisterTokenType('comment', nls.localize('comment', \"Style for comments.\"), [['comment']]);\n\tregisterTokenType('string', nls.localize('string', \"Style for strings.\"), [['string']]);\n\tregisterTokenType('keyword', nls.localize('keyword', \"Style for keywords.\"), [['keyword.control']]);\n\tregisterTokenType('number', nls.localize('number', \"Style for numbers.\"), [['constant.numeric']]);\n\tregisterTokenType('regexp', nls.localize('regexp', \"Style for expressions.\"), [['constant.regexp']]);\n\tregisterTokenType('operator', nls.localize('operator', \"Style for operators.\"), [['keyword.operator']]);\n\n\tregisterTokenType('namespace', nls.localize('namespace', \"Style for namespaces.\"), [['entity.name.namespace']]);\n\n\tregisterTokenType('type', nls.localize('type', \"Style for types.\"), [['entity.name.type'], ['support.type']]);\n\tregisterTokenType('struct', nls.localize('struct', \"Style for structs.\"), [['entity.name.type.struct']]);\n\tregisterTokenType('class', nls.localize('class', \"Style for classes.\"), [['entity.name.type.class'], ['support.class']]);\n\tregisterTokenType('interface', nls.localize('interface', \"Style for interfaces.\"), [['entity.name.type.interface']]);\n\tregisterTokenType('enum', nls.localize('enum', \"Style for enums.\"), [['entity.name.type.enum']]);\n\tregisterTokenType('typeParameter', nls.localize('typeParameter', \"Style for type parameters.\"), [['entity.name.type.parameter']]);\n\n\tregisterTokenType('function', nls.localize('function', \"Style for functions\"), [['entity.name.function'], ['support.function']]);\n\tregisterTokenType('member', nls.localize('member', \"Style for member functions\"), [], 'method', 'Deprecated use `method` instead');\n\tregisterTokenType('method', nls.localize('method', \"Style for method (member functions)\"), [['entity.name.function.member'], ['support.function']]);\n\tregisterTokenType('macro', nls.localize('macro', \"Style for macros.\"), [['entity.name.function.preprocessor']]);\n\n\tregisterTokenType('variable', nls.localize('variable', \"Style for variables.\"), [['variable.other.readwrite'], ['entity.name.variable']]);\n\tregisterTokenType('parameter', nls.localize('parameter', \"Style for parameters.\"), [['variable.parameter']]);\n\tregisterTokenType('property', nls.localize('property', \"Style for properties.\"), [['variable.other.property']]);\n\tregisterTokenType('enumMember', nls.localize('enumMember', \"Style for enum members.\"), [['variable.other.enummember']]);\n\tregisterTokenType('event', nls.localize('event', \"Style for events.\"), [['variable.other.event']]);\n\tregisterTokenType('decorator', nls.localize('decorator', \"Style for decorators & annotations.\"), [['entity.name.decorator'], ['entity.name.function']]);\n\n\tregisterTokenType('label', nls.localize('labels', \"Style for labels. \"), undefined);\n\n\t// default token modifiers\n\n\tregistry.registerTokenModifier('declaration', nls.localize('declaration', \"Style for all symbol declarations.\"), undefined);\n\tregistry.registerTokenModifier('documentation', nls.localize('documentation', \"Style to use for references in documentation.\"), undefined);\n\tregistry.registerTokenModifier('static', nls.localize('static', \"Style to use for symbols that are static.\"), undefined);\n\tregistry.registerTokenModifier('abstract', nls.localize('abstract', \"Style to use for symbols that are abstract.\"), undefined);\n\tregistry.registerTokenModifier('deprecated', nls.localize('deprecated', \"Style to use for symbols that are deprecated.\"), undefined);\n\tregistry.registerTokenModifier('modification', nls.localize('modification', \"Style to use for write accesses.\"), undefined);\n\tregistry.registerTokenModifier('async', nls.localize('async', \"Style to use for symbols that are async.\"), undefined);\n\tregistry.registerTokenModifier('readonly', nls.localize('readonly', \"Style to use for symbols that are read-only.\"), undefined);\n\n\n\tregisterTokenStyleDefault('variable.readonly', [['variable.other.constant']]);\n\tregisterTokenStyleDefault('property.readonly', [['variable.other.constant.property']]);\n\tregisterTokenStyleDefault('type.defaultLibrary', [['support.type']]);\n\tregisterTokenStyleDefault('class.defaultLibrary', [['support.class']]);\n\tregisterTokenStyleDefault('interface.defaultLibrary', [['support.class']]);\n\tregisterTokenStyleDefault('variable.defaultLibrary', [['support.variable'], ['support.other.variable']]);\n\tregisterTokenStyleDefault('variable.defaultLibrary.readonly', [['support.constant']]);\n\tregisterTokenStyleDefault('property.defaultLibrary', [['support.variable.property']]);\n\tregisterTokenStyleDefault('property.defaultLibrary.readonly', [['support.constant.property']]);\n\tregisterTokenStyleDefault('function.defaultLibrary', [['support.function']]);\n\tregisterTokenStyleDefault('member.defaultLibrary', [['support.function']]);\n\treturn registry;\n}\n\nexport function getTokenClassificationRegistry(): ITokenClassificationRegistry {\n\treturn tokenClassificationRegistry;\n}\n\nfunction getStylingSchemeEntry(description?: string, deprecationMessage?: string): IJSONSchema {\n\treturn {\n\t\tdescription,\n\t\tdeprecationMessage,\n\t\tdefaultSnippets: [{ body: '${1:#ff0000}' }],\n\t\tanyOf: [\n\t\t\t{\n\t\t\t\ttype: 'string',\n\t\t\t\tformat: 'color-hex'\n\t\t\t},\n\t\t\t{\n\t\t\t\t$ref: '#/definitions/style'\n\t\t\t}\n\t\t]\n\t};\n}\n\nexport const tokenStylingSchemaId = 'vscode://schemas/token-styling';\n\nconst schemaRegistry = platform.Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(tokenStylingSchemaId, tokenClassificationRegistry.getTokenStylingSchema());\n\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(tokenStylingSchemaId), 200);\ntokenClassificationRegistry.onDidChangeSchema(() => {\n\tif (!delayer.isScheduled()) {\n\t\tdelayer.schedule();\n\t}\n});\n"],
  "mappings": "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",
  "names": ["TokenStyle", "SemanticTokenRule", "language"]
}
