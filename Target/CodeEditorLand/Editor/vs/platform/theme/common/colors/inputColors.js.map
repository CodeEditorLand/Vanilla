{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colors/inputColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\n\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lighten, darken } from '../colorUtils.js';\n\n// Import the colors we need\nimport { foreground, contrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground } from './editorColors.js';\n\n\n// ----- input\n\nexport const inputBackground = registerColor('input.background',\n\t{ dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white },\n\tnls.localize('inputBoxBackground', \"Input box background.\"));\n\nexport const inputForeground = registerColor('input.foreground',\n\tforeground,\n\tnls.localize('inputBoxForeground', \"Input box foreground.\"));\n\nexport const inputBorder = registerColor('input.border',\n\t{ dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('inputBoxBorder', \"Input box border.\"));\n\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder',\n\t{ dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\n\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground',\n\t{ dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null },\n\tnls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\n\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground',\n\t{ dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent },\n\tnls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\n\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground',\n\t{ dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground },\n\tnls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\n\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground',\n\t{ light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) },\n\tnls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\n\n\n// ----- input validation\n\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground',\n\t{ dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white },\n\tnls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\n\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground',\n\t{ dark: null, light: null, hcDark: null, hcLight: foreground },\n\tnls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\n\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder',\n\t{ dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\n\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground',\n\t{ dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white },\n\tnls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\n\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground',\n\t{ dark: null, light: null, hcDark: null, hcLight: foreground },\n\tnls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\n\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder',\n\t{ dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\n\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground',\n\t{ dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white },\n\tnls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\n\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground',\n\t{ dark: null, light: null, hcDark: null, hcLight: foreground },\n\tnls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\n\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder',\n\t{ dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\n\n\n// ----- select\n\nexport const selectBackground = registerColor('dropdown.background',\n\t{ dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white },\n\tnls.localize('dropdownBackground', \"Dropdown background.\"));\n\nexport const selectListBackground = registerColor('dropdown.listBackground',\n\t{ dark: null, light: null, hcDark: Color.black, hcLight: Color.white },\n\tnls.localize('dropdownListBackground', \"Dropdown list background.\"));\n\nexport const selectForeground = registerColor('dropdown.foreground',\n\t{ dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground },\n\tnls.localize('dropdownForeground', \"Dropdown foreground.\"));\n\nexport const selectBorder = registerColor('dropdown.border',\n\t{ dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('dropdownBorder', \"Dropdown border.\"));\n\n\n// ------ button\n\nexport const buttonForeground = registerColor('button.foreground',\n\tColor.white,\n\tnls.localize('buttonForeground', \"Button foreground color.\"));\n\nexport const buttonSeparator = registerColor('button.separator',\n\ttransparent(buttonForeground, .4),\n\tnls.localize('buttonSeparator', \"Button separator color.\"));\n\nexport const buttonBackground = registerColor('button.background',\n\t{ dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' },\n\tnls.localize('buttonBackground', \"Button background color.\"));\n\nexport const buttonHoverBackground = registerColor('button.hoverBackground',\n\t{ dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground },\n\tnls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\n\nexport const buttonBorder = registerColor('button.border',\n\tcontrastBorder,\n\tnls.localize('buttonBorder', \"Button border color.\"));\n\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground',\n\t{ dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground },\n\tnls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\n\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground',\n\t{ dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white },\n\tnls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\n\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground',\n\t{ dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null },\n\tnls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\n\n// ------ radio\n\nexport const radioActiveForeground = registerColor('radio.activeForeground',\n\tinputActiveOptionForeground,\n\tnls.localize('radioActiveForeground', \"Foreground color of active radio option.\"));\n\nexport const radioActiveBackground = registerColor('radio.activeBackground',\n\tinputActiveOptionBackground,\n\tnls.localize('radioBackground', \"Background color of active radio option.\"));\n\nexport const radioActiveBorder = registerColor('radio.activeBorder',\n\tinputActiveOptionBorder,\n\tnls.localize('radioActiveBorder', \"Border color of the active radio option.\"));\n\nexport const radioInactiveForeground = registerColor('radio.inactiveForeground',\n\tnull,\n\tnls.localize('radioInactiveForeground', \"Foreground color of inactive radio option.\"));\n\nexport const radioInactiveBackground = registerColor('radio.inactiveBackground',\n\tnull,\n\tnls.localize('radioInactiveBackground', \"Background color of inactive radio option.\"));\n\nexport const radioInactiveBorder = registerColor('radio.inactiveBorder',\n\t{ light: transparent(radioActiveForeground, .2), dark: transparent(radioActiveForeground, .2), hcDark: transparent(radioActiveForeground, .4), hcLight: transparent(radioActiveForeground, .2) },\n\tnls.localize('radioInactiveBorder', \"Border color of the inactive radio option.\"));\n\nexport const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground',\n\tinputActiveOptionHoverBackground,\n\tnls.localize('radioHoverBackground', \"Background color of inactive active radio option when hovering.\"));\n\n// ------ checkbox\n\nexport const checkboxBackground = registerColor('checkbox.background',\n\tselectBackground,\n\tnls.localize('checkbox.background', \"Background color of checkbox widget.\"));\n\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground',\n\teditorWidgetBackground,\n\tnls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\n\nexport const checkboxForeground = registerColor('checkbox.foreground',\n\tselectForeground,\n\tnls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\n\nexport const checkboxBorder = registerColor('checkbox.border',\n\tselectBorder,\n\tnls.localize('checkbox.border', \"Border color of checkbox widget.\"));\n\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder',\n\ticonForeground,\n\tnls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n\n\n// ------ keybinding label\n\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background',\n\t{ dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent },\n\tnls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\n\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground',\n\t{ dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground },\n\tnls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\n\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border',\n\t{ dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder },\n\tnls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\n\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder',\n\t{ dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground },\n\tnls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n"],
  "mappings": "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",
  "names": []
}
