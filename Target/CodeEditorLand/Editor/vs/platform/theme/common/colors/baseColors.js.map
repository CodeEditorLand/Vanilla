{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colors/baseColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\n\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n\n\nexport const foreground = registerColor('foreground',\n\t{ dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' },\n\tnls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\n\nexport const disabledForeground = registerColor('disabledForeground',\n\t{ dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' },\n\tnls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\n\nexport const errorForeground = registerColor('errorForeground',\n\t{ dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' },\n\tnls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\n\nexport const descriptionForeground = registerColor('descriptionForeground',\n\t{ light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) },\n\tnls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\n\nexport const iconForeground = registerColor('icon.foreground',\n\t{ dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' },\n\tnls.localize('iconForeground', \"The default color for icons in the workbench.\"));\n\nexport const focusBorder = registerColor('focusBorder',\n\t{ dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' },\n\tnls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\n\nexport const contrastBorder = registerColor('contrastBorder',\n\t{ light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' },\n\tnls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\n\nexport const activeContrastBorder = registerColor('contrastActiveBorder',\n\t{ light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder },\n\tnls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\n\nexport const selectionBackground = registerColor('selection.background',\n\tnull,\n\tnls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n\n\n// ------ text link\n\nexport const textLinkForeground = registerColor('textLink.foreground',\n\t{ light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' },\n\tnls.localize('textLinkForeground', \"Foreground color for links in text.\"));\n\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground',\n\t{ light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' },\n\tnls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\n\nexport const textSeparatorForeground = registerColor('textSeparator.foreground',\n\t{ light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' },\n\tnls.localize('textSeparatorForeground', \"Color for text separators.\"));\n\n\n// ------ text preformat\n\nexport const textPreformatForeground = registerColor('textPreformat.foreground',\n\t{ light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' },\n\tnls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\n\nexport const textPreformatBackground = registerColor('textPreformat.background',\n\t{ light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' },\n\tnls.localize('textPreformatBackground', \"Background color for preformatted text segments.\"));\n\n\n// ------ text block quote\n\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background',\n\t{ light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' },\n\tnls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\n\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border',\n\t{ light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' },\n\tnls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\n\n\n// ------ text code block\n\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background',\n\t{ light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' },\n\tnls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n"],
  "mappings": "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",
  "names": []
}
