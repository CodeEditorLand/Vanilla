{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colors/listColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\n\n// Import the effects we need\nimport { Color } from \"../../../../base/common/color.js\";\nimport {\n\tdarken,\n\tifDefinedThenElse,\n\tlighten,\n\tregisterColor,\n\ttransparent,\n} from \"../colorUtils.js\";\n\n// Import the colors we need\nimport {\n\tactiveContrastBorder,\n\tcontrastBorder,\n\tfocusBorder,\n\tforeground,\n\ticonForeground,\n} from \"./baseColors.js\";\nimport {\n\teditorFindMatchHighlight,\n\teditorFindMatchHighlightBorder,\n\teditorWidgetBackground,\n\teditorWidgetForeground,\n\twidgetShadow,\n} from \"./editorColors.js\";\n\nexport const listFocusBackground = registerColor(\n\t\"list.focusBackground\",\n\tnull,\n\tnls.localize(\n\t\t\"listFocusBackground\",\n\t\t\"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listFocusForeground = registerColor(\n\t\"list.focusForeground\",\n\tnull,\n\tnls.localize(\n\t\t\"listFocusForeground\",\n\t\t\"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listFocusOutline = registerColor(\n\t\"list.focusOutline\",\n\t{\n\t\tdark: focusBorder,\n\t\tlight: focusBorder,\n\t\thcDark: activeContrastBorder,\n\t\thcLight: activeContrastBorder,\n\t},\n\tnls.localize(\n\t\t\"listFocusOutline\",\n\t\t\"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listFocusAndSelectionOutline = registerColor(\n\t\"list.focusAndSelectionOutline\",\n\tnull,\n\tnls.localize(\n\t\t\"listFocusAndSelectionOutline\",\n\t\t\"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listActiveSelectionBackground = registerColor(\n\t\"list.activeSelectionBackground\",\n\t{\n\t\tdark: \"#04395E\",\n\t\tlight: \"#0060C0\",\n\t\thcDark: null,\n\t\thcLight: Color.fromHex(\"#0F4A85\").transparent(0.1),\n\t},\n\tnls.localize(\n\t\t\"listActiveSelectionBackground\",\n\t\t\"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listActiveSelectionForeground = registerColor(\n\t\"list.activeSelectionForeground\",\n\t{ dark: Color.white, light: Color.white, hcDark: null, hcLight: null },\n\tnls.localize(\n\t\t\"listActiveSelectionForeground\",\n\t\t\"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listActiveSelectionIconForeground = registerColor(\n\t\"list.activeSelectionIconForeground\",\n\tnull,\n\tnls.localize(\n\t\t\"listActiveSelectionIconForeground\",\n\t\t\"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listInactiveSelectionBackground = registerColor(\n\t\"list.inactiveSelectionBackground\",\n\t{\n\t\tdark: \"#37373D\",\n\t\tlight: \"#E4E6F1\",\n\t\thcDark: null,\n\t\thcLight: Color.fromHex(\"#0F4A85\").transparent(0.1),\n\t},\n\tnls.localize(\n\t\t\"listInactiveSelectionBackground\",\n\t\t\"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listInactiveSelectionForeground = registerColor(\n\t\"list.inactiveSelectionForeground\",\n\tnull,\n\tnls.localize(\n\t\t\"listInactiveSelectionForeground\",\n\t\t\"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listInactiveSelectionIconForeground = registerColor(\n\t\"list.inactiveSelectionIconForeground\",\n\tnull,\n\tnls.localize(\n\t\t\"listInactiveSelectionIconForeground\",\n\t\t\"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listInactiveFocusBackground = registerColor(\n\t\"list.inactiveFocusBackground\",\n\tnull,\n\tnls.localize(\n\t\t\"listInactiveFocusBackground\",\n\t\t\"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listInactiveFocusOutline = registerColor(\n\t\"list.inactiveFocusOutline\",\n\tnull,\n\tnls.localize(\n\t\t\"listInactiveFocusOutline\",\n\t\t\"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\",\n\t),\n);\n\nexport const listHoverBackground = registerColor(\n\t\"list.hoverBackground\",\n\t{\n\t\tdark: \"#2A2D2E\",\n\t\tlight: \"#F0F0F0\",\n\t\thcDark: Color.white.transparent(0.1),\n\t\thcLight: Color.fromHex(\"#0F4A85\").transparent(0.1),\n\t},\n\tnls.localize(\n\t\t\"listHoverBackground\",\n\t\t\"List/Tree background when hovering over items using the mouse.\",\n\t),\n);\n\nexport const listHoverForeground = registerColor(\n\t\"list.hoverForeground\",\n\tnull,\n\tnls.localize(\n\t\t\"listHoverForeground\",\n\t\t\"List/Tree foreground when hovering over items using the mouse.\",\n\t),\n);\n\nexport const listDropOverBackground = registerColor(\n\t\"list.dropBackground\",\n\t{ dark: \"#062F4A\", light: \"#D6EBFF\", hcDark: null, hcLight: null },\n\tnls.localize(\n\t\t\"listDropBackground\",\n\t\t\"List/Tree drag and drop background when moving items over other items when using the mouse.\",\n\t),\n);\n\nexport const listDropBetweenBackground = registerColor(\n\t\"list.dropBetweenBackground\",\n\t{\n\t\tdark: iconForeground,\n\t\tlight: iconForeground,\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tnls.localize(\n\t\t\"listDropBetweenBackground\",\n\t\t\"List/Tree drag and drop border color when moving items between items when using the mouse.\",\n\t),\n);\n\nexport const listHighlightForeground = registerColor(\n\t\"list.highlightForeground\",\n\t{\n\t\tdark: \"#2AAAFF\",\n\t\tlight: \"#0066BF\",\n\t\thcDark: focusBorder,\n\t\thcLight: focusBorder,\n\t},\n\tnls.localize(\n\t\t\"highlight\",\n\t\t\"List/Tree foreground color of the match highlights when searching inside the list/tree.\",\n\t),\n);\n\nexport const listFocusHighlightForeground = registerColor(\n\t\"list.focusHighlightForeground\",\n\t{\n\t\tdark: listHighlightForeground,\n\t\tlight: ifDefinedThenElse(\n\t\t\tlistActiveSelectionBackground,\n\t\t\tlistHighlightForeground,\n\t\t\t\"#BBE7FF\",\n\t\t),\n\t\thcDark: listHighlightForeground,\n\t\thcLight: listHighlightForeground,\n\t},\n\tnls.localize(\n\t\t\"listFocusHighlightForeground\",\n\t\t\"List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.\",\n\t),\n);\n\nexport const listInvalidItemForeground = registerColor(\n\t\"list.invalidItemForeground\",\n\t{\n\t\tdark: \"#B89500\",\n\t\tlight: \"#B89500\",\n\t\thcDark: \"#B89500\",\n\t\thcLight: \"#B5200D\",\n\t},\n\tnls.localize(\n\t\t\"invalidItemForeground\",\n\t\t\"List/Tree foreground color for invalid items, for example an unresolved root in explorer.\",\n\t),\n);\n\nexport const listErrorForeground = registerColor(\n\t\"list.errorForeground\",\n\t{ dark: \"#F88070\", light: \"#B01011\", hcDark: null, hcLight: null },\n\tnls.localize(\n\t\t\"listErrorForeground\",\n\t\t\"Foreground color of list items containing errors.\",\n\t),\n);\n\nexport const listWarningForeground = registerColor(\n\t\"list.warningForeground\",\n\t{ dark: \"#CCA700\", light: \"#855F00\", hcDark: null, hcLight: null },\n\tnls.localize(\n\t\t\"listWarningForeground\",\n\t\t\"Foreground color of list items containing warnings.\",\n\t),\n);\n\nexport const listFilterWidgetBackground = registerColor(\n\t\"listFilterWidget.background\",\n\t{\n\t\tlight: darken(editorWidgetBackground, 0),\n\t\tdark: lighten(editorWidgetBackground, 0),\n\t\thcDark: editorWidgetBackground,\n\t\thcLight: editorWidgetBackground,\n\t},\n\tnls.localize(\n\t\t\"listFilterWidgetBackground\",\n\t\t\"Background color of the type filter widget in lists and trees.\",\n\t),\n);\n\nexport const listFilterWidgetOutline = registerColor(\n\t\"listFilterWidget.outline\",\n\t{\n\t\tdark: Color.transparent,\n\t\tlight: Color.transparent,\n\t\thcDark: \"#f38518\",\n\t\thcLight: \"#007ACC\",\n\t},\n\tnls.localize(\n\t\t\"listFilterWidgetOutline\",\n\t\t\"Outline color of the type filter widget in lists and trees.\",\n\t),\n);\n\nexport const listFilterWidgetNoMatchesOutline = registerColor(\n\t\"listFilterWidget.noMatchesOutline\",\n\t{\n\t\tdark: \"#BE1100\",\n\t\tlight: \"#BE1100\",\n\t\thcDark: contrastBorder,\n\t\thcLight: contrastBorder,\n\t},\n\tnls.localize(\n\t\t\"listFilterWidgetNoMatchesOutline\",\n\t\t\"Outline color of the type filter widget in lists and trees, when there are no matches.\",\n\t),\n);\n\nexport const listFilterWidgetShadow = registerColor(\n\t\"listFilterWidget.shadow\",\n\twidgetShadow,\n\tnls.localize(\n\t\t\"listFilterWidgetShadow\",\n\t\t\"Shadow color of the type filter widget in lists and trees.\",\n\t),\n);\n\nexport const listFilterMatchHighlight = registerColor(\n\t\"list.filterMatchBackground\",\n\t{\n\t\tdark: editorFindMatchHighlight,\n\t\tlight: editorFindMatchHighlight,\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tnls.localize(\n\t\t\"listFilterMatchHighlight\",\n\t\t\"Background color of the filtered match.\",\n\t),\n);\n\nexport const listFilterMatchHighlightBorder = registerColor(\n\t\"list.filterMatchBorder\",\n\t{\n\t\tdark: editorFindMatchHighlightBorder,\n\t\tlight: editorFindMatchHighlightBorder,\n\t\thcDark: contrastBorder,\n\t\thcLight: activeContrastBorder,\n\t},\n\tnls.localize(\n\t\t\"listFilterMatchHighlightBorder\",\n\t\t\"Border color of the filtered match.\",\n\t),\n);\n\nexport const listDeemphasizedForeground = registerColor(\n\t\"list.deemphasizedForeground\",\n\t{\n\t\tdark: \"#8C8C8C\",\n\t\tlight: \"#8E8E90\",\n\t\thcDark: \"#A7A8A9\",\n\t\thcLight: \"#666666\",\n\t},\n\tnls.localize(\n\t\t\"listDeemphasizedForeground\",\n\t\t\"List/Tree foreground color for items that are deemphasized.\",\n\t),\n);\n\n// ------ tree\n\nexport const treeIndentGuidesStroke = registerColor(\n\t\"tree.indentGuidesStroke\",\n\t{\n\t\tdark: \"#585858\",\n\t\tlight: \"#a9a9a9\",\n\t\thcDark: \"#a9a9a9\",\n\t\thcLight: \"#a5a5a5\",\n\t},\n\tnls.localize(\n\t\t\"treeIndentGuidesStroke\",\n\t\t\"Tree stroke color for the indentation guides.\",\n\t),\n);\n\nexport const treeInactiveIndentGuidesStroke = registerColor(\n\t\"tree.inactiveIndentGuidesStroke\",\n\ttransparent(treeIndentGuidesStroke, 0.4),\n\tnls.localize(\n\t\t\"treeInactiveIndentGuidesStroke\",\n\t\t\"Tree stroke color for the indentation guides that are not active.\",\n\t),\n);\n\n// ------ table\n\nexport const tableColumnsBorder = registerColor(\n\t\"tree.tableColumnsBorder\",\n\t{ dark: \"#CCCCCC20\", light: \"#61616120\", hcDark: null, hcLight: null },\n\tnls.localize(\"tableColumnsBorder\", \"Table border color between columns.\"),\n);\n\nexport const tableOddRowsBackgroundColor = registerColor(\n\t\"tree.tableOddRowsBackground\",\n\t{\n\t\tdark: transparent(foreground, 0.04),\n\t\tlight: transparent(foreground, 0.04),\n\t\thcDark: null,\n\t\thcLight: null,\n\t},\n\tnls.localize(\n\t\t\"tableOddRowsBackgroundColor\",\n\t\t\"Background color for odd table rows.\",\n\t),\n);\n\n// ------ action list\n\nexport const editorActionListBackground = registerColor(\n\t\"editorActionList.background\",\n\teditorWidgetBackground,\n\tnls.localize(\"editorActionListBackground\", \"Action List background color.\"),\n);\n\nexport const editorActionListForeground = registerColor(\n\t\"editorActionList.foreground\",\n\teditorWidgetForeground,\n\tnls.localize(\"editorActionListForeground\", \"Action List foreground color.\"),\n);\n\nexport const editorActionListFocusForeground = registerColor(\n\t\"editorActionList.focusForeground\",\n\tlistActiveSelectionForeground,\n\tnls.localize(\n\t\t\"editorActionListFocusForeground\",\n\t\t\"Action List foreground color for the focused item.\",\n\t),\n);\n\nexport const editorActionListFocusBackground = registerColor(\n\t\"editorActionList.focusBackground\",\n\tlistActiveSelectionBackground,\n\tnls.localize(\n\t\t\"editorActionListFocusBackground\",\n\t\t\"Action List background color for the focused item.\",\n\t),\n);\n"],
  "mappings": "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",
  "names": []
}
