{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colors/listColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\n\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, darken, lighten, transparent, ifDefinedThenElse } from '../colorUtils.js';\n\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground, editorFindMatchHighlightBorder, editorFindMatchHighlight, widgetShadow, editorWidgetForeground } from './editorColors.js';\n\n\nexport const listFocusBackground = registerColor('list.focusBackground',\n\tnull,\n\tnls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listFocusForeground = registerColor('list.focusForeground',\n\tnull,\n\tnls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listFocusOutline = registerColor('list.focusOutline',\n\t{ dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder },\n\tnls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline',\n\tnull,\n\tnls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground',\n\t{ dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) },\n\tnls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground',\n\t{ dark: Color.white, light: Color.white, hcDark: null, hcLight: null },\n\tnls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground',\n\tnull,\n\tnls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground',\n\t{ dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) },\n\tnls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground',\n\tnull,\n\tnls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground',\n\tnull,\n\tnls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground',\n\tnull,\n\tnls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline',\n\tnull,\n\tnls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listHoverBackground = registerColor('list.hoverBackground',\n\t{ dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) },\n\tnls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\n\nexport const listHoverForeground = registerColor('list.hoverForeground',\n\tnull,\n\tnls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\n\nexport const listDropOverBackground = registerColor('list.dropBackground',\n\t{ dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null },\n\tnls.localize('listDropBackground', \"List/Tree drag and drop background when moving items over other items when using the mouse.\"));\n\nexport const listDropBetweenBackground = registerColor('list.dropBetweenBackground',\n\t{ dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null },\n\tnls.localize('listDropBetweenBackground', \"List/Tree drag and drop border color when moving items between items when using the mouse.\"));\n\nexport const listHighlightForeground = registerColor('list.highlightForeground',\n\t{ dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder },\n\tnls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\n\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground',\n\t{ dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground },\n\tnls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\n\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground',\n\t{ dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' },\n\tnls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\n\nexport const listErrorForeground = registerColor('list.errorForeground',\n\t{ dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\n\nexport const listWarningForeground = registerColor('list.warningForeground',\n\t{ dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\n\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background',\n\t{ light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground },\n\tnls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\n\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline',\n\t{ dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' },\n\tnls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\n\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline',\n\t{ dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\n\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow',\n\twidgetShadow,\n\tnls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));\n\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground',\n\t{ dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null },\n\tnls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\n\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder',\n\t{ dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder },\n\tnls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\n\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground',\n\t{ dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' },\n\tnls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized.\"));\n\n\n// ------ tree\n\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke',\n\t{ dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' },\n\tnls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\n\nexport const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke',\n\ttransparent(treeIndentGuidesStroke, 0.4),\n\tnls.localize('treeInactiveIndentGuidesStroke', \"Tree stroke color for the indentation guides that are not active.\"));\n\n\n// ------ table\n\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder',\n\t{ dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null },\n\tnls.localize('tableColumnsBorder', \"Table border color between columns.\"));\n\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground',\n\t{ dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null },\n\tnls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\n\n// ------ action list\n\nexport const editorActionListBackground = registerColor('editorActionList.background',\n\teditorWidgetBackground,\n\tnls.localize('editorActionListBackground', \"Action List background color.\"));\n\nexport const editorActionListForeground = registerColor('editorActionList.foreground',\n\teditorWidgetForeground,\n\tnls.localize('editorActionListForeground', \"Action List foreground color.\"));\n\nexport const editorActionListFocusForeground = registerColor('editorActionList.focusForeground',\n\tlistActiveSelectionForeground,\n\tnls.localize('editorActionListFocusForeground', \"Action List foreground color for the focused item.\"));\n\nexport const editorActionListFocusBackground = registerColor('editorActionList.focusBackground',\n\tlistActiveSelectionBackground,\n\tnls.localize('editorActionListFocusBackground', \"Action List background color for the focused item.\"));\n"],
  "mappings": "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",
  "names": []
}
