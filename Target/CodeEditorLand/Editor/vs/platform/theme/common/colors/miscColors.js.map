{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colors/miscColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\n\n// Import the effects we need\nimport { Color } from \"../../../../base/common/color.js\";\nimport { registerColor, transparent } from \"../colorUtils.js\";\n\n// Import the colors we need\nimport { contrastBorder, focusBorder } from \"./baseColors.js\";\n\n// ----- sash\n\nexport const sashHoverBorder = registerColor(\n\t\"sash.hoverBorder\",\n\tfocusBorder,\n\tnls.localize(\"sashActiveBorder\", \"Border color of active sashes.\"),\n);\n\n// ----- badge\n\nexport const badgeBackground = registerColor(\n\t\"badge.background\",\n\t{\n\t\tdark: \"#4D4D4D\",\n\t\tlight: \"#C4C4C4\",\n\t\thcDark: Color.black,\n\t\thcLight: \"#0F4A85\",\n\t},\n\tnls.localize(\n\t\t\"badgeBackground\",\n\t\t\"Badge background color. Badges are small information labels, e.g. for search results count.\",\n\t),\n);\n\nexport const badgeForeground = registerColor(\n\t\"badge.foreground\",\n\t{\n\t\tdark: Color.white,\n\t\tlight: \"#333\",\n\t\thcDark: Color.white,\n\t\thcLight: Color.white,\n\t},\n\tnls.localize(\n\t\t\"badgeForeground\",\n\t\t\"Badge foreground color. Badges are small information labels, e.g. for search results count.\",\n\t),\n);\n\n// ----- scrollbar\n\nexport const scrollbarShadow = registerColor(\n\t\"scrollbar.shadow\",\n\t{ dark: \"#000000\", light: \"#DDDDDD\", hcDark: null, hcLight: null },\n\tnls.localize(\n\t\t\"scrollbarShadow\",\n\t\t\"Scrollbar shadow to indicate that the view is scrolled.\",\n\t),\n);\n\nexport const scrollbarSliderBackground = registerColor(\n\t\"scrollbarSlider.background\",\n\t{\n\t\tdark: Color.fromHex(\"#797979\").transparent(0.4),\n\t\tlight: Color.fromHex(\"#646464\").transparent(0.4),\n\t\thcDark: transparent(contrastBorder, 0.6),\n\t\thcLight: transparent(contrastBorder, 0.4),\n\t},\n\tnls.localize(\n\t\t\"scrollbarSliderBackground\",\n\t\t\"Scrollbar slider background color.\",\n\t),\n);\n\nexport const scrollbarSliderHoverBackground = registerColor(\n\t\"scrollbarSlider.hoverBackground\",\n\t{\n\t\tdark: Color.fromHex(\"#646464\").transparent(0.7),\n\t\tlight: Color.fromHex(\"#646464\").transparent(0.7),\n\t\thcDark: transparent(contrastBorder, 0.8),\n\t\thcLight: transparent(contrastBorder, 0.8),\n\t},\n\tnls.localize(\n\t\t\"scrollbarSliderHoverBackground\",\n\t\t\"Scrollbar slider background color when hovering.\",\n\t),\n);\n\nexport const scrollbarSliderActiveBackground = registerColor(\n\t\"scrollbarSlider.activeBackground\",\n\t{\n\t\tdark: Color.fromHex(\"#BFBFBF\").transparent(0.4),\n\t\tlight: Color.fromHex(\"#000000\").transparent(0.6),\n\t\thcDark: contrastBorder,\n\t\thcLight: contrastBorder,\n\t},\n\tnls.localize(\n\t\t\"scrollbarSliderActiveBackground\",\n\t\t\"Scrollbar slider background color when clicked on.\",\n\t),\n);\n\n// ----- progress bar\n\nexport const progressBarBackground = registerColor(\n\t\"progressBar.background\",\n\t{\n\t\tdark: Color.fromHex(\"#0E70C0\"),\n\t\tlight: Color.fromHex(\"#0E70C0\"),\n\t\thcDark: contrastBorder,\n\t\thcLight: contrastBorder,\n\t},\n\tnls.localize(\n\t\t\"progressBarBackground\",\n\t\t\"Background color of the progress bar that can show for long running operations.\",\n\t),\n);\n"],
  "mappings": "AAKA,YAAY,SAAS;AAGrB,SAAS,aAAa;AACtB,SAAS,eAAe,mBAAmB;AAG3C,SAAS,gBAAgB,mBAAmB;AAIrC,MAAM,kBAAkB;AAAA,EAC9B;AAAA,EACA;AAAA,EACA,IAAI,SAAS,oBAAoB,gCAAgC;AAClE;AAIO,MAAM,kBAAkB;AAAA,EAC9B;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ,MAAM;AAAA,IACd,SAAS;AAAA,EACV;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,kBAAkB;AAAA,EAC9B;AAAA,EACA;AAAA,IACC,MAAM,MAAM;AAAA,IACZ,OAAO;AAAA,IACP,QAAQ,MAAM;AAAA,IACd,SAAS,MAAM;AAAA,EAChB;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAIO,MAAM,kBAAkB;AAAA,EAC9B;AAAA,EACA,EAAE,MAAM,WAAW,OAAO,WAAW,QAAQ,MAAM,SAAS,KAAK;AAAA,EACjE,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,4BAA4B;AAAA,EACxC;AAAA,EACA;AAAA,IACC,MAAM,MAAM,QAAQ,SAAS,EAAE,YAAY,GAAG;AAAA,IAC9C,OAAO,MAAM,QAAQ,SAAS,EAAE,YAAY,GAAG;AAAA,IAC/C,QAAQ,YAAY,gBAAgB,GAAG;AAAA,IACvC,SAAS,YAAY,gBAAgB,GAAG;AAAA,EACzC;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,iCAAiC;AAAA,EAC7C;AAAA,EACA;AAAA,IACC,MAAM,MAAM,QAAQ,SAAS,EAAE,YAAY,GAAG;AAAA,IAC9C,OAAO,MAAM,QAAQ,SAAS,EAAE,YAAY,GAAG;AAAA,IAC/C,QAAQ,YAAY,gBAAgB,GAAG;AAAA,IACvC,SAAS,YAAY,gBAAgB,GAAG;AAAA,EACzC;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,kCAAkC;AAAA,EAC9C;AAAA,EACA;AAAA,IACC,MAAM,MAAM,QAAQ,SAAS,EAAE,YAAY,GAAG;AAAA,IAC9C,OAAO,MAAM,QAAQ,SAAS,EAAE,YAAY,GAAG;AAAA,IAC/C,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAIO,MAAM,wBAAwB;AAAA,EACpC;AAAA,EACA;AAAA,IACC,MAAM,MAAM,QAAQ,SAAS;AAAA,IAC7B,OAAO,MAAM,QAAQ,SAAS;AAAA,IAC9B,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;",
  "names": []
}
