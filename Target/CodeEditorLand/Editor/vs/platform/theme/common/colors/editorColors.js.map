{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colors/editorColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\n\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lessProminent, darken, lighten } from '../colorUtils.js';\n\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { scrollbarShadow, badgeBackground } from './miscColors.js';\n\n\n// ----- editor\n\nexport const editorBackground = registerColor('editor.background',\n\t{ light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white },\n\tnls.localize('editorBackground', \"Editor background color.\"));\n\nexport const editorForeground = registerColor('editor.foreground',\n\t{ light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground },\n\tnls.localize('editorForeground', \"Editor default foreground color.\"));\n\n\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background',\n\teditorBackground,\n\tnls.localize('editorStickyScrollBackground', \"Background color of sticky scroll in the editor\"));\n\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background',\n\t{ dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) },\n\tnls.localize('editorStickyScrollHoverBackground', \"Background color of sticky scroll on hover in the editor\"));\n\nexport const editorStickyScrollBorder = registerColor('editorStickyScroll.border',\n\t{ dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('editorStickyScrollBorder', \"Border color of sticky scroll in the editor\"));\n\nexport const editorStickyScrollShadow = registerColor('editorStickyScroll.shadow',\n\tscrollbarShadow,\n\tnls.localize('editorStickyScrollShadow', \" Shadow color of sticky scroll in the editor\"));\n\n\nexport const editorWidgetBackground = registerColor('editorWidget.background',\n\t{ dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white },\n\tnls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\n\nexport const editorWidgetForeground = registerColor('editorWidget.foreground',\n\tforeground,\n\tnls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\n\nexport const editorWidgetBorder = registerColor('editorWidget.border',\n\t{ dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\n\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder',\n\tnull,\n\tnls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n\n\nexport const editorErrorBackground = registerColor('editorError.background',\n\tnull,\n\tnls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const editorErrorForeground = registerColor('editorError.foreground',\n\t{ dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' },\n\tnls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\n\nexport const editorErrorBorder = registerColor('editorError.border',\n\t{ dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' },\n\tnls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\n\n\nexport const editorWarningBackground = registerColor('editorWarning.background',\n\tnull,\n\tnls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const editorWarningForeground = registerColor('editorWarning.foreground',\n\t{ dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' },\n\tnls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\n\nexport const editorWarningBorder = registerColor('editorWarning.border',\n\t{ dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) },\n\tnls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\n\n\nexport const editorInfoBackground = registerColor('editorInfo.background',\n\tnull,\n\tnls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const editorInfoForeground = registerColor('editorInfo.foreground',\n\t{ dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' },\n\tnls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\n\nexport const editorInfoBorder = registerColor('editorInfo.border',\n\t{ dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' },\n\tnls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\n\n\nexport const editorHintForeground = registerColor('editorHint.foreground',\n\t{ dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null },\n\tnls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\n\nexport const editorHintBorder = registerColor('editorHint.border',\n\t{ dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' },\n\tnls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\n\n\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground',\n\t{ dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' },\n\tnls.localize('activeLinkForeground', 'Color of active links.'));\n\n\n// ----- editor selection\n\nexport const editorSelectionBackground = registerColor('editor.selectionBackground',\n\t{ light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' },\n\tnls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\n\nexport const editorSelectionForeground = registerColor('editor.selectionForeground',\n\t{ light: null, dark: null, hcDark: '#000000', hcLight: Color.white },\n\tnls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\n\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground',\n\t{ light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) },\n\tnls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\n\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground',\n\t{ light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null },\n\tnls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder',\n\t{ light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder },\n\tnls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n\n\n// ----- editor find\n\nexport const editorFindMatch = registerColor('editor.findMatchBackground',\n\t{ light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null },\n\tnls.localize('editorFindMatch', \"Color of the current search match.\"));\n\nexport const editorFindMatchForeground = registerColor('editor.findMatchForeground',\n\tnull,\n\tnls.localize('editorFindMatchForeground', \"Text color of the current search match.\"));\n\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground',\n\t{ light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null },\n\tnls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\n\nexport const editorFindMatchHighlightForeground = registerColor('editor.findMatchHighlightForeground',\n\tnull,\n\tnls.localize('findMatchHighlightForeground', \"Foreground color of the other search matches.\"), true);\n\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground',\n\t{ dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null },\n\tnls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder',\n\t{ light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder },\n\tnls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\n\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder',\n\t{ light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder },\n\tnls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\n\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder',\n\t{ dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) },\n\tnls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n\n\n// ----- editor hover\n\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground',\n\t{ light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null },\n\tnls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const editorHoverBackground = registerColor('editorHoverWidget.background',\n\teditorWidgetBackground,\n\tnls.localize('hoverBackground', 'Background color of the editor hover.'));\n\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground',\n\teditorWidgetForeground,\n\tnls.localize('hoverForeground', 'Foreground color of the editor hover.'));\n\nexport const editorHoverBorder = registerColor('editorHoverWidget.border',\n\teditorWidgetBorder,\n\tnls.localize('hoverBorder', 'Border color of the editor hover.'));\n\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground',\n\t{ dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground },\n\tnls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n\n\n// ----- editor inlay hint\n\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground',\n\t{ dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black },\n\tnls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\n\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background',\n\t{ dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) },\n\tnls.localize('editorInlayHintBackground', 'Background color of inline hints'));\n\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground',\n\teditorInlayHintForeground,\n\tnls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\n\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground',\n\teditorInlayHintBackground,\n\tnls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\n\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground',\n\teditorInlayHintForeground,\n\tnls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\n\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground',\n\teditorInlayHintBackground,\n\tnls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n\n\n// ----- editor lightbulb\n\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground',\n\t{ dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' },\n\tnls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\n\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground',\n\t{ dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' },\n\tnls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n\nexport const editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground',\n\teditorLightBulbForeground,\n\tnls.localize('editorLightBulbAiForeground', \"The color used for the lightbulb AI icon.\"));\n\n\n// ----- editor snippet\n\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground',\n\t{ dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) },\n\tnls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\n\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder',\n\tnull,\n\tnls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\n\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground',\n\tnull,\n\tnls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\n\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder',\n\t{ dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' },\n\tnls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n\n\n// ----- diff editor\n\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\n\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground',\n\t{ dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null },\n\tnls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground',\n\t{ dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null },\n\tnls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\n\n\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground',\n\t{ dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null },\n\tnls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground',\n\t{ dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null },\n\tnls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\n\n\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground',\n\tnull,\n\tnls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\n\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground',\n\tnull,\n\tnls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\n\n\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground',\n\tnull,\n\tnls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\n\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground',\n\tnull,\n\tnls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\n\n\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder',\n\t{ dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' },\n\tnls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\n\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder',\n\t{ dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' },\n\tnls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\n\n\nexport const diffBorder = registerColor('diffEditor.border',\n\t{ dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('diffEditorBorder', 'Border color between the two text editors.'));\n\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill',\n\t{ dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null },\n\tnls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n\n\nexport const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground',\n\t'sideBar.background',\n\tnls.localize('diffEditor.unchangedRegionBackground', \"The background color of unchanged blocks in the diff editor.\"));\n\nexport const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground',\n\t'foreground',\n\tnls.localize('diffEditor.unchangedRegionForeground', \"The foreground color of unchanged blocks in the diff editor.\"));\n\nexport const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground',\n\t{ dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null },\n\tnls.localize('diffEditor.unchangedCodeBackground', \"The background color of unchanged code in the diff editor.\"));\n\n\n// ----- widget\n\nexport const widgetShadow = registerColor('widget.shadow',\n\t{ dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null },\n\tnls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\n\nexport const widgetBorder = registerColor('widget.border',\n\t{ dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\n\n\n// ----- toolbar\n\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground',\n\t{ dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null },\n\tnls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\n\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline',\n\t{ dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder },\n\tnls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\n\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground',\n\t{ dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null },\n\tnls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n\n\n// ----- breadcumbs\n\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground',\n\ttransparent(foreground, 0.8),\n\tnls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\n\nexport const breadcrumbsBackground = registerColor('breadcrumb.background',\n\teditorBackground,\n\tnls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\n\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground',\n\t{ light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) },\n\tnls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\n\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground',\n\t{ light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) },\n\tnls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\n\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background',\n\teditorWidgetBackground,\n\tnls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n\n\n// ----- merge\n\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\n\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground',\n\t{ dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null },\n\tnls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground',\n\ttransparent(mergeCurrentHeaderBackground, contentTransparency),\n\tnls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground',\n\t{ dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null },\n\tnls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground',\n\ttransparent(mergeIncomingHeaderBackground, contentTransparency),\n\tnls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground',\n\t{ dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null },\n\tnls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground',\n\ttransparent(mergeCommonHeaderBackground, contentTransparency),\n\tnls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const mergeBorder = registerColor('merge.border',\n\t{ dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' },\n\tnls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\n\n\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground',\n\t{ dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder },\n\tnls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\n\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground',\n\t{ dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder },\n\tnls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\n\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground',\n\t{ dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder },\n\tnls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\n\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground',\n\t{ dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '#AB5A00' },\n\tnls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground',\n\t'#A0A0A0CC',\n\tnls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n\n\n// ----- problems\n\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground',\n\teditorErrorForeground,\n\tnls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\n\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground',\n\teditorWarningForeground,\n\tnls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\n\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground',\n\teditorInfoForeground,\n\tnls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n"],
  "mappings": "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",
  "names": []
}
