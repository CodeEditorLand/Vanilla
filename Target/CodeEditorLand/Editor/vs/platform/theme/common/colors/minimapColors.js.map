{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/colors/minimapColors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\n\n// Import the effects we need\nimport { Color, RGBA } from \"../../../../base/common/color.js\";\nimport { registerColor, transparent } from \"../colorUtils.js\";\n\n// Import the colors we need\nimport {\n\teditorInfoBorder,\n\teditorInfoForeground,\n\teditorWarningBorder,\n\teditorWarningForeground,\n} from \"./editorColors.js\";\nimport {\n\tscrollbarSliderActiveBackground,\n\tscrollbarSliderBackground,\n\tscrollbarSliderHoverBackground,\n} from \"./miscColors.js\";\n\nexport const minimapFindMatch = registerColor(\n\t\"minimap.findMatchHighlight\",\n\t{\n\t\tlight: \"#d18616\",\n\t\tdark: \"#d18616\",\n\t\thcDark: \"#AB5A00\",\n\t\thcLight: \"#0F4A85\",\n\t},\n\tnls.localize(\n\t\t\"minimapFindMatchHighlight\",\n\t\t\"Minimap marker color for find matches.\",\n\t),\n\ttrue,\n);\n\nexport const minimapSelectionOccurrenceHighlight = registerColor(\n\t\"minimap.selectionOccurrenceHighlight\",\n\t{\n\t\tlight: \"#c9c9c9\",\n\t\tdark: \"#676767\",\n\t\thcDark: \"#ffffff\",\n\t\thcLight: \"#0F4A85\",\n\t},\n\tnls.localize(\n\t\t\"minimapSelectionOccurrenceHighlight\",\n\t\t\"Minimap marker color for repeating editor selections.\",\n\t),\n\ttrue,\n);\n\nexport const minimapSelection = registerColor(\n\t\"minimap.selectionHighlight\",\n\t{\n\t\tlight: \"#ADD6FF\",\n\t\tdark: \"#264F78\",\n\t\thcDark: \"#ffffff\",\n\t\thcLight: \"#0F4A85\",\n\t},\n\tnls.localize(\n\t\t\"minimapSelectionHighlight\",\n\t\t\"Minimap marker color for the editor selection.\",\n\t),\n\ttrue,\n);\n\nexport const minimapInfo = registerColor(\n\t\"minimap.infoHighlight\",\n\t{\n\t\tdark: editorInfoForeground,\n\t\tlight: editorInfoForeground,\n\t\thcDark: editorInfoBorder,\n\t\thcLight: editorInfoBorder,\n\t},\n\tnls.localize(\"minimapInfo\", \"Minimap marker color for infos.\"),\n);\n\nexport const minimapWarning = registerColor(\n\t\"minimap.warningHighlight\",\n\t{\n\t\tdark: editorWarningForeground,\n\t\tlight: editorWarningForeground,\n\t\thcDark: editorWarningBorder,\n\t\thcLight: editorWarningBorder,\n\t},\n\tnls.localize(\"overviewRuleWarning\", \"Minimap marker color for warnings.\"),\n);\n\nexport const minimapError = registerColor(\n\t\"minimap.errorHighlight\",\n\t{\n\t\tdark: new Color(new RGBA(255, 18, 18, 0.7)),\n\t\tlight: new Color(new RGBA(255, 18, 18, 0.7)),\n\t\thcDark: new Color(new RGBA(255, 50, 50, 1)),\n\t\thcLight: \"#B5200D\",\n\t},\n\tnls.localize(\"minimapError\", \"Minimap marker color for errors.\"),\n);\n\nexport const minimapBackground = registerColor(\n\t\"minimap.background\",\n\tnull,\n\tnls.localize(\"minimapBackground\", \"Minimap background color.\"),\n);\n\nexport const minimapForegroundOpacity = registerColor(\n\t\"minimap.foregroundOpacity\",\n\tColor.fromHex(\"#000f\"),\n\tnls.localize(\n\t\t\"minimapForegroundOpacity\",\n\t\t'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.',\n\t),\n);\n\nexport const minimapSliderBackground = registerColor(\n\t\"minimapSlider.background\",\n\ttransparent(scrollbarSliderBackground, 0.5),\n\tnls.localize(\"minimapSliderBackground\", \"Minimap slider background color.\"),\n);\n\nexport const minimapSliderHoverBackground = registerColor(\n\t\"minimapSlider.hoverBackground\",\n\ttransparent(scrollbarSliderHoverBackground, 0.5),\n\tnls.localize(\n\t\t\"minimapSliderHoverBackground\",\n\t\t\"Minimap slider background color when hovering.\",\n\t),\n);\n\nexport const minimapSliderActiveBackground = registerColor(\n\t\"minimapSlider.activeBackground\",\n\ttransparent(scrollbarSliderActiveBackground, 0.5),\n\tnls.localize(\n\t\t\"minimapSliderActiveBackground\",\n\t\t\"Minimap slider background color when clicked on.\",\n\t),\n);\n"],
  "mappings": "AAKA,YAAY,SAAS;AAGrB,SAAS,OAAO,YAAY;AAC5B,SAAS,eAAe,mBAAmB;AAG3C;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEA,MAAM,mBAAmB;AAAA,EAC/B;AAAA,EACA;AAAA,IACC,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AAAA,EACA;AACD;AAEO,MAAM,sCAAsC;AAAA,EAClD;AAAA,EACA;AAAA,IACC,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AAAA,EACA;AACD;AAEO,MAAM,mBAAmB;AAAA,EAC/B;AAAA,EACA;AAAA,IACC,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAAA,EACA,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AAAA,EACA;AACD;AAEO,MAAM,cAAc;AAAA,EAC1B;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAAA,EACA,IAAI,SAAS,eAAe,iCAAiC;AAC9D;AAEO,MAAM,iBAAiB;AAAA,EAC7B;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAAA,EACA,IAAI,SAAS,uBAAuB,oCAAoC;AACzE;AAEO,MAAM,eAAe;AAAA,EAC3B;AAAA,EACA;AAAA,IACC,MAAM,IAAI,MAAM,IAAI,KAAK,KAAK,IAAI,IAAI,GAAG,CAAC;AAAA,IAC1C,OAAO,IAAI,MAAM,IAAI,KAAK,KAAK,IAAI,IAAI,GAAG,CAAC;AAAA,IAC3C,QAAQ,IAAI,MAAM,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,CAAC;AAAA,IAC1C,SAAS;AAAA,EACV;AAAA,EACA,IAAI,SAAS,gBAAgB,kCAAkC;AAChE;AAEO,MAAM,oBAAoB;AAAA,EAChC;AAAA,EACA;AAAA,EACA,IAAI,SAAS,qBAAqB,2BAA2B;AAC9D;AAEO,MAAM,2BAA2B;AAAA,EACvC;AAAA,EACA,MAAM,QAAQ,OAAO;AAAA,EACrB,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,0BAA0B;AAAA,EACtC;AAAA,EACA,YAAY,2BAA2B,GAAG;AAAA,EAC1C,IAAI,SAAS,2BAA2B,kCAAkC;AAC3E;AAEO,MAAM,+BAA+B;AAAA,EAC3C;AAAA,EACA,YAAY,gCAAgC,GAAG;AAAA,EAC/C,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,gCAAgC;AAAA,EAC5C;AAAA,EACA,YAAY,iCAAiC,GAAG;AAAA,EAChD,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;",
  "names": []
}
