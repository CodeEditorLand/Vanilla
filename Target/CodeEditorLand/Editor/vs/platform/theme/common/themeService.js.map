{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/common/themeService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../base/common/codicons.js\";\nimport type { Color } from \"../../../base/common/color.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport type { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport * as platform from \"../../registry/common/platform.js\";\nimport type { ColorIdentifier } from \"./colorRegistry.js\";\nimport type { IconContribution, IconDefinition } from \"./iconRegistry.js\";\nimport { ColorScheme } from \"./theme.js\";\n\nexport const IThemeService = createDecorator<IThemeService>(\"themeService\");\n\nexport function themeColorFromId(id: ColorIdentifier) {\n\treturn { id };\n}\n\nexport const FileThemeIcon = Codicon.file;\nexport const FolderThemeIcon = Codicon.folder;\n\nexport function getThemeTypeSelector(type: ColorScheme): string {\n\tswitch (type) {\n\t\tcase ColorScheme.DARK:\n\t\t\treturn \"vs-dark\";\n\t\tcase ColorScheme.HIGH_CONTRAST_DARK:\n\t\t\treturn \"hc-black\";\n\t\tcase ColorScheme.HIGH_CONTRAST_LIGHT:\n\t\t\treturn \"hc-light\";\n\t\tdefault:\n\t\t\treturn \"vs\";\n\t}\n}\n\nexport interface ITokenStyle {\n\treadonly foreground: number | undefined;\n\treadonly bold: boolean | undefined;\n\treadonly underline: boolean | undefined;\n\treadonly strikethrough: boolean | undefined;\n\treadonly italic: boolean | undefined;\n}\n\nexport interface IColorTheme {\n\treadonly type: ColorScheme;\n\n\treadonly label: string;\n\n\t/**\n\t * Resolves the color of the given color identifier. If the theme does not\n\t * specify the color, the default color is returned unless <code>useDefault</code> is set to false.\n\t * @param color the id of the color\n\t * @param useDefault specifies if the default color should be used. If not set, the default is used.\n\t */\n\tgetColor(color: ColorIdentifier, useDefault?: boolean): Color | undefined;\n\n\t/**\n\t * Returns whether the theme defines a value for the color. If not, that means the\n\t * default color will be used.\n\t */\n\tdefines(color: ColorIdentifier): boolean;\n\n\t/**\n\t * Returns the token style for a given classification. The result uses the <code>MetadataConsts</code> format\n\t */\n\tgetTokenStyleMetadata(\n\t\ttype: string,\n\t\tmodifiers: string[],\n\t\tmodelLanguage: string,\n\t): ITokenStyle | undefined;\n\n\t/**\n\t * List of all colors used with tokens. <code>getTokenStyleMetadata</code> references the colors by index into this list.\n\t */\n\treadonly tokenColorMap: string[];\n\n\t/**\n\t * Defines whether semantic highlighting should be enabled for the theme.\n\t */\n\treadonly semanticHighlighting: boolean;\n}\n\nexport interface IFileIconTheme {\n\treadonly hasFileIcons: boolean;\n\treadonly hasFolderIcons: boolean;\n\treadonly hidesExplorerArrows: boolean;\n}\n\nexport interface IProductIconTheme {\n\t/**\n\t * Resolves the definition for the given icon as defined by the theme.\n\t *\n\t * @param iconContribution The icon\n\t */\n\tgetIcon(iconContribution: IconContribution): IconDefinition | undefined;\n}\n\nexport interface ICssStyleCollector {\n\taddRule(rule: string): void;\n}\n\nexport interface IThemingParticipant {\n\t(\n\t\ttheme: IColorTheme,\n\t\tcollector: ICssStyleCollector,\n\t\tenvironment: IEnvironmentService,\n\t): void;\n}\n\nexport interface IThemeService {\n\treadonly _serviceBrand: undefined;\n\n\tgetColorTheme(): IColorTheme;\n\n\treadonly onDidColorThemeChange: Event<IColorTheme>;\n\n\tgetFileIconTheme(): IFileIconTheme;\n\n\treadonly onDidFileIconThemeChange: Event<IFileIconTheme>;\n\n\tgetProductIconTheme(): IProductIconTheme;\n\n\treadonly onDidProductIconThemeChange: Event<IProductIconTheme>;\n}\n\n// static theming participant\nexport const Extensions = {\n\tThemingContribution: \"base.contributions.theming\",\n};\n\nexport interface IThemingRegistry {\n\t/**\n\t * Register a theming participant that is invoked on every theme change.\n\t */\n\tonColorThemeChange(participant: IThemingParticipant): IDisposable;\n\n\tgetThemingParticipants(): IThemingParticipant[];\n\n\treadonly onThemingParticipantAdded: Event<IThemingParticipant>;\n}\n\nclass ThemingRegistry implements IThemingRegistry {\n\tprivate themingParticipants: IThemingParticipant[] = [];\n\tprivate readonly onThemingParticipantAddedEmitter: Emitter<IThemingParticipant>;\n\n\tconstructor() {\n\t\tthis.themingParticipants = [];\n\t\tthis.onThemingParticipantAddedEmitter =\n\t\t\tnew Emitter<IThemingParticipant>();\n\t}\n\n\tpublic onColorThemeChange(participant: IThemingParticipant): IDisposable {\n\t\tthis.themingParticipants.push(participant);\n\t\tthis.onThemingParticipantAddedEmitter.fire(participant);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.themingParticipants.indexOf(participant);\n\t\t\tthis.themingParticipants.splice(idx, 1);\n\t\t});\n\t}\n\n\tpublic get onThemingParticipantAdded(): Event<IThemingParticipant> {\n\t\treturn this.onThemingParticipantAddedEmitter.event;\n\t}\n\n\tpublic getThemingParticipants(): IThemingParticipant[] {\n\t\treturn this.themingParticipants;\n\t}\n}\n\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\n\nexport function registerThemingParticipant(\n\tparticipant: IThemingParticipant,\n): IDisposable {\n\treturn themingRegistry.onColorThemeChange(participant);\n}\n\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n\tprotected theme: IColorTheme;\n\n\tconstructor(protected themeService: IThemeService) {\n\t\tsuper();\n\n\t\tthis.theme = themeService.getColorTheme();\n\n\t\t// Hook up to theme changes\n\t\tthis._register(\n\t\t\tthis.themeService.onDidColorThemeChange((theme) =>\n\t\t\t\tthis.onThemeChange(theme),\n\t\t\t),\n\t\t);\n\t}\n\n\tprotected onThemeChange(theme: IColorTheme): void {\n\t\tthis.theme = theme;\n\n\t\tthis.updateStyles();\n\t}\n\n\tupdateStyles(): void {\n\t\t// Subclasses to override\n\t}\n\n\tprotected getColor(\n\t\tid: string,\n\t\tmodify?: (color: Color, theme: IColorTheme) => Color,\n\t): string | null {\n\t\tlet color = this.theme.getColor(id);\n\n\t\tif (color && modify) {\n\t\t\tcolor = modify(color, this.theme);\n\t\t}\n\n\t\treturn color ? color.toString() : null;\n\t}\n}\n\nexport interface IPartsSplash {\n\tzoomLevel: number | undefined;\n\tbaseTheme: string;\n\tcolorInfo: {\n\t\tbackground: string;\n\t\tforeground: string | undefined;\n\t\teditorBackground: string | undefined;\n\t\ttitleBarBackground: string | undefined;\n\t\ttitleBarBorder: string | undefined;\n\t\tactivityBarBackground: string | undefined;\n\t\tactivityBarBorder: string | undefined;\n\t\tsideBarBackground: string | undefined;\n\t\tsideBarBorder: string | undefined;\n\t\tstatusBarBackground: string | undefined;\n\t\tstatusBarBorder: string | undefined;\n\t\tstatusBarNoFolderBackground: string | undefined;\n\t\twindowBorder: string | undefined;\n\t};\n\tlayoutInfo:\n\t\t| {\n\t\t\t\tsideBarSide: string;\n\t\t\t\teditorPartMinWidth: number;\n\t\t\t\ttitleBarHeight: number;\n\t\t\t\tactivityBarWidth: number;\n\t\t\t\tsideBarWidth: number;\n\t\t\t\tstatusBarHeight: number;\n\t\t\t\twindowBorder: boolean;\n\t\t\t\twindowBorderRadius: string | undefined;\n\t\t  }\n\t\t| undefined;\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AAExB,SAAS,eAA2B;AACpC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AAEP,SAAS,uBAAuB;AAChC,YAAY,cAAc;AAG1B,SAAS,mBAAmB;AAErB,MAAM,gBAAgB,gBAA+B,cAAc;AAEnE,SAAS,iBAAiB,IAAqB;AACrD,SAAO,EAAE,GAAG;AACb;AAFgB;AAIT,MAAM,gBAAgB,QAAQ;AAC9B,MAAM,kBAAkB,QAAQ;AAEhC,SAAS,qBAAqB,MAA2B;AAC/D,UAAQ,MAAM;AAAA,IACb,KAAK,YAAY;AAChB,aAAO;AAAA,IACR,KAAK,YAAY;AAChB,aAAO;AAAA,IACR,KAAK,YAAY;AAChB,aAAO;AAAA,IACR;AACC,aAAO;AAAA,EACT;AACD;AAXgB;AAwGT,MAAM,aAAa;AAAA,EACzB,qBAAqB;AACtB;AAaA,MAAM,gBAA4C;AAAA,EApJlD,OAoJkD;AAAA;AAAA;AAAA,EACzC,sBAA6C,CAAC;AAAA,EACrC;AAAA,EAEjB,cAAc;AACb,SAAK,sBAAsB,CAAC;AAC5B,SAAK,mCACJ,IAAI,QAA6B;AAAA,EACnC;AAAA,EAEO,mBAAmB,aAA+C;AACxE,SAAK,oBAAoB,KAAK,WAAW;AACzC,SAAK,iCAAiC,KAAK,WAAW;AACtD,WAAO,aAAa,MAAM;AACzB,YAAM,MAAM,KAAK,oBAAoB,QAAQ,WAAW;AACxD,WAAK,oBAAoB,OAAO,KAAK,CAAC;AAAA,IACvC,CAAC;AAAA,EACF;AAAA,EAEA,IAAW,4BAAwD;AAClE,WAAO,KAAK,iCAAiC;AAAA,EAC9C;AAAA,EAEO,yBAAgD;AACtD,WAAO,KAAK;AAAA,EACb;AACD;AAEA,MAAM,kBAAkB,IAAI,gBAAgB;AAC5C,SAAS,SAAS,IAAI,WAAW,qBAAqB,eAAe;AAE9D,SAAS,2BACf,aACc;AACd,SAAO,gBAAgB,mBAAmB,WAAW;AACtD;AAJgB;AAST,MAAM,iBAAiB,WAAW;AAAA,EAGxC,YAAsB,cAA6B;AAClD,UAAM;AADe;AAGrB,SAAK,QAAQ,aAAa,cAAc;AAGxC,SAAK;AAAA,MACJ,KAAK,aAAa;AAAA,QAAsB,CAAC,UACxC,KAAK,cAAc,KAAK;AAAA,MACzB;AAAA,IACD;AAAA,EACD;AAAA,EA1MD,OA4LyC;AAAA;AAAA;AAAA,EAC9B;AAAA,EAeA,cAAc,OAA0B;AACjD,SAAK,QAAQ;AAEb,SAAK,aAAa;AAAA,EACnB;AAAA,EAEA,eAAqB;AAAA,EAErB;AAAA,EAEU,SACT,IACA,QACgB;AAChB,QAAI,QAAQ,KAAK,MAAM,SAAS,EAAE;AAElC,QAAI,SAAS,QAAQ;AACpB,cAAQ,OAAO,OAAO,KAAK,KAAK;AAAA,IACjC;AAEA,WAAO,QAAQ,MAAM,SAAS,IAAI;AAAA,EACnC;AACD;",
  "names": []
}
