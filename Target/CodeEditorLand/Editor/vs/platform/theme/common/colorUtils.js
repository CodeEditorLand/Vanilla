import{assertNever as g}from"../../../base/common/assert.js";import{RunOnceScheduler as S}from"../../../base/common/async.js";import{Color as c}from"../../../base/common/color.js";import{Emitter as y}from"../../../base/common/event.js";import*as u from"../../../nls.js";import{Extensions as b}from"../../jsonschemas/common/jsonContributionRegistry.js";import*as f from"../../registry/common/platform.js";function p(e){return`--vscode-${e.replace(/\./g,"-")}`}function E(e){return`var(${p(e)})`}function L(e,o){return`var(${p(e)}, ${o})`}var I=(t=>(t[t.Darken=0]="Darken",t[t.Lighten=1]="Lighten",t[t.Transparent=2]="Transparent",t[t.Opaque=3]="Opaque",t[t.OneOf=4]="OneOf",t[t.LessProminent=5]="LessProminent",t[t.IfDefinedThenElse=6]="IfDefinedThenElse",t))(I||{});function O(e){return e!==null&&typeof e=="object"&&"light"in e&&"dark"in e}const T={ColorContribution:"base.contributions.colors"},v="default";class D{_onDidChangeSchema=new y;onDidChangeSchema=this._onDidChangeSchema.event;colorsById;colorSchema={type:"object",properties:{}};colorReferenceSchema={type:"string",enum:[],enumDescriptions:[]};constructor(){this.colorsById={}}notifyThemeUpdate(o){for(const r of Object.keys(this.colorsById)){const n=o.getColor(r);n&&(this.colorSchema.properties[r].oneOf[0].defaultSnippets[0].body=`\${1:${n.toString()}}`)}this._onDidChangeSchema.fire()}registerColor(o,r,n,l=!1,a){const m={id:o,description:n,defaults:r,needsTransparency:l,deprecationMessage:a};this.colorsById[o]=m;const t={type:"string",format:"color-hex",defaultSnippets:[{body:"${1:#ff0000}"}]};return a&&(t.deprecationMessage=a),l&&(t.pattern="^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$",t.patternErrorMessage=u.localize("transparecyRequired","This color must be transparent or it will obscure content")),this.colorSchema.properties[o]={description:n,oneOf:[t,{type:"string",const:v,description:u.localize("useDefault","Use the default color.")}]},this.colorReferenceSchema.enum.push(o),this.colorReferenceSchema.enumDescriptions.push(n),this._onDidChangeSchema.fire(),o}deregisterColor(o){delete this.colorsById[o],delete this.colorSchema.properties[o];const r=this.colorReferenceSchema.enum.indexOf(o);r!==-1&&(this.colorReferenceSchema.enum.splice(r,1),this.colorReferenceSchema.enumDescriptions.splice(r,1)),this._onDidChangeSchema.fire()}getColors(){return Object.keys(this.colorsById).map(o=>this.colorsById[o])}resolveDefaultColor(o,r){const n=this.colorsById[o];if(n?.defaults){const l=O(n.defaults)?n.defaults[r.type]:n.defaults;return i(l,r)}}getColorSchema(){return this.colorSchema}getColorReferenceSchema(){return this.colorReferenceSchema}toString(){const o=(r,n)=>{const l=r.indexOf(".")===-1?0:1,a=n.indexOf(".")===-1?0:1;return l!==a?l-a:r.localeCompare(n)};return Object.keys(this.colorsById).sort(o).map(r=>`- \`${r}\`: ${this.colorsById[r].description}`).join(`
`)}}const s=new D;f.Registry.add(T.ColorContribution,s);function j(e,o,r,n,l){return s.registerColor(e,o,r,n,l)}function B(){return s}function x(e,o){switch(e.op){case 0:return i(e.value,o)?.darken(e.factor);case 1:return i(e.value,o)?.lighten(e.factor);case 2:return i(e.value,o)?.transparent(e.factor);case 3:{const r=i(e.background,o);return r?i(e.value,o)?.makeOpaque(r):i(e.value,o)}case 4:for(const r of e.values){const n=i(r,o);if(n)return n}return;case 6:return i(o.defines(e.if)?e.then:e.else,o);case 5:{const r=i(e.value,o);if(!r)return;const n=i(e.background,o);return n?r.isDarkerThan(n)?c.getLighterColor(r,n,e.factor).transparent(e.transparency):c.getDarkerColor(r,n,e.factor).transparent(e.transparency):r.transparent(e.factor*e.transparency)}default:throw g(e)}}function $(e,o){return{op:0,value:e,factor:o}}function w(e,o){return{op:1,value:e,factor:o}}function _(e,o){return{op:2,value:e,factor:o}}function q(e,o){return{op:3,value:e,background:o}}function F(...e){return{op:4,values:e}}function A(e,o,r){return{op:6,if:e,then:o,else:r}}function P(e,o,r,n){return{op:5,value:e,background:o,factor:r,transparency:n}}function i(e,o){if(e!==null){if(typeof e=="string")return e[0]==="#"?c.fromHex(e):o.getColor(e);if(e instanceof c)return e;if(typeof e=="object")return x(e,o)}}const C="vscode://schemas/workbench-colors",d=f.Registry.as(b.JSONContribution);d.registerSchema(C,s.getColorSchema());const h=new S(()=>d.notifySchemaChanged(C),200);s.onDidChangeSchema(()=>{h.isScheduled()||h.schedule()});export{I as ColorTransformType,v as DEFAULT_COLOR_CONFIG_VALUE,T as Extensions,E as asCssVariable,p as asCssVariableName,L as asCssVariableWithDefault,$ as darken,x as executeTransform,B as getColorRegistry,A as ifDefinedThenElse,O as isColorDefaults,P as lessProminent,w as lighten,F as oneOf,q as opaque,j as registerColor,i as resolveColorValue,_ as transparent,C as workbenchColorsSchemaId};
