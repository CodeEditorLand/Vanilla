{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/electron-main/themeMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from 'electron';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isLinux, isMacintosh, isWindows } from '../../../base/common/platform.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IStateService } from '../../state/node/state.js';\nimport { IPartsSplash } from '../common/themeService.js';\nimport { IColorScheme } from '../../window/common/window.js';\n\n// These default colors match our default themes\n// editor background color (\"Dark Modern\", etc...)\nconst DEFAULT_BG_LIGHT = '#FFFFFF';\nconst DEFAULT_BG_DARK = '#1F1F1F';\nconst DEFAULT_BG_HC_BLACK = '#000000';\nconst DEFAULT_BG_HC_LIGHT = '#FFFFFF';\n\nconst THEME_STORAGE_KEY = 'theme';\nconst THEME_BG_STORAGE_KEY = 'themeBackground';\nconst THEME_WINDOW_SPLASH = 'windowSplash';\n\nnamespace ThemeSettings {\n\texport const DETECT_COLOR_SCHEME = 'window.autoDetectColorScheme';\n\texport const SYSTEM_COLOR_THEME = 'window.systemColorTheme';\n}\n\nexport const IThemeMainService = createDecorator<IThemeMainService>('themeMainService');\n\nexport interface IThemeMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeColorScheme: Event<IColorScheme>;\n\n\tgetBackgroundColor(): string;\n\n\tsaveWindowSplash(windowId: number | undefined, splash: IPartsSplash): void;\n\tgetWindowSplash(): IPartsSplash | undefined;\n\n\tgetColorScheme(): IColorScheme;\n}\n\nexport class ThemeMainService extends Disposable implements IThemeMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeColorScheme = this._register(new Emitter<IColorScheme>());\n\treadonly onDidChangeColorScheme = this._onDidChangeColorScheme.event;\n\n\tconstructor(@IStateService private stateService: IStateService, @IConfigurationService private configurationService: IConfigurationService) {\n\t\tsuper();\n\n\t\t// System Theme\n\t\tif (!isLinux) {\n\t\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration(ThemeSettings.SYSTEM_COLOR_THEME) || e.affectsConfiguration(ThemeSettings.DETECT_COLOR_SCHEME)) {\n\t\t\t\t\tthis.updateSystemColorTheme();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\tthis.updateSystemColorTheme();\n\n\t\t// Color Scheme changes\n\t\tthis._register(Event.fromNodeEventEmitter(electron.nativeTheme, 'updated')(() => this._onDidChangeColorScheme.fire(this.getColorScheme())));\n\t}\n\n\tprivate updateSystemColorTheme(): void {\n\t\tif (isLinux || this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n\t\t\t// only with `system` we can detect the system color scheme\n\t\t\telectron.nativeTheme.themeSource = 'system';\n\t\t} else {\n\t\t\tswitch (this.configurationService.getValue<'default' | 'auto' | 'light' | 'dark'>(ThemeSettings.SYSTEM_COLOR_THEME)) {\n\t\t\t\tcase 'dark':\n\t\t\t\t\telectron.nativeTheme.themeSource = 'dark';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'light':\n\t\t\t\t\telectron.nativeTheme.themeSource = 'light';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'auto':\n\t\t\t\t\tswitch (this.getBaseTheme()) {\n\t\t\t\t\t\tcase 'vs': electron.nativeTheme.themeSource = 'light'; break;\n\t\t\t\t\t\tcase 'vs-dark': electron.nativeTheme.themeSource = 'dark'; break;\n\t\t\t\t\t\tdefault: electron.nativeTheme.themeSource = 'system';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\telectron.nativeTheme.themeSource = 'system';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\tgetColorScheme(): IColorScheme {\n\t\tif (isWindows) {\n\t\t\t// high contrast is refelected by the shouldUseInvertedColorScheme property\n\t\t\tif (electron.nativeTheme.shouldUseHighContrastColors) {\n\t\t\t\t// shouldUseInvertedColorScheme is dark, !shouldUseInvertedColorScheme is light\n\t\t\t\treturn { dark: electron.nativeTheme.shouldUseInvertedColorScheme, highContrast: true };\n\t\t\t}\n\t\t} else if (isMacintosh) {\n\t\t\t// high contrast is set if one of shouldUseInvertedColorScheme or shouldUseHighContrastColors is set, reflecting the 'Invert colours' and `Increase contrast` settings in MacOS\n\t\t\tif (electron.nativeTheme.shouldUseInvertedColorScheme || electron.nativeTheme.shouldUseHighContrastColors) {\n\t\t\t\treturn { dark: electron.nativeTheme.shouldUseDarkColors, highContrast: true };\n\t\t\t}\n\t\t} else if (isLinux) {\n\t\t\t// ubuntu gnome seems to have 3 states, light dark and high contrast\n\t\t\tif (electron.nativeTheme.shouldUseHighContrastColors) {\n\t\t\t\treturn { dark: true, highContrast: true };\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tdark: electron.nativeTheme.shouldUseDarkColors,\n\t\t\thighContrast: false\n\t\t};\n\t}\n\n\tgetBackgroundColor(): string {\n\t\tconst colorScheme = this.getColorScheme();\n\t\tif (colorScheme.highContrast && this.configurationService.getValue('window.autoDetectHighContrast')) {\n\t\t\treturn colorScheme.dark ? DEFAULT_BG_HC_BLACK : DEFAULT_BG_HC_LIGHT;\n\t\t}\n\n\t\tlet background = this.stateService.getItem<string | null>(THEME_BG_STORAGE_KEY, null);\n\t\tif (!background) {\n\t\t\tswitch (this.getBaseTheme()) {\n\t\t\t\tcase 'vs': background = DEFAULT_BG_LIGHT; break;\n\t\t\t\tcase 'hc-black': background = DEFAULT_BG_HC_BLACK; break;\n\t\t\t\tcase 'hc-light': background = DEFAULT_BG_HC_LIGHT; break;\n\t\t\t\tdefault: background = DEFAULT_BG_DARK;\n\t\t\t}\n\t\t}\n\n\t\treturn background;\n\t}\n\n\tprivate getBaseTheme(): 'vs' | 'vs-dark' | 'hc-black' | 'hc-light' {\n\t\tconst baseTheme = this.stateService.getItem<string>(THEME_STORAGE_KEY, 'vs-dark').split(' ')[0];\n\t\tswitch (baseTheme) {\n\t\t\tcase 'vs': return 'vs';\n\t\t\tcase 'hc-black': return 'hc-black';\n\t\t\tcase 'hc-light': return 'hc-light';\n\t\t\tdefault: return 'vs-dark';\n\t\t}\n\t}\n\n\tsaveWindowSplash(windowId: number | undefined, splash: IPartsSplash): void {\n\n\t\t// Update in storage\n\t\tthis.stateService.setItems([\n\t\t\t{ key: THEME_STORAGE_KEY, data: splash.baseTheme },\n\t\t\t{ key: THEME_BG_STORAGE_KEY, data: splash.colorInfo.background },\n\t\t\t{ key: THEME_WINDOW_SPLASH, data: splash }\n\t\t]);\n\n\t\t// Update in opened windows\n\t\tif (typeof windowId === 'number') {\n\t\t\tthis.updateBackgroundColor(windowId, splash);\n\t\t}\n\n\t\t// Update system theme\n\t\tthis.updateSystemColorTheme();\n\t}\n\n\tprivate updateBackgroundColor(windowId: number, splash: IPartsSplash): void {\n\t\tfor (const window of electron.BrowserWindow.getAllWindows()) {\n\t\t\tif (window.id === windowId) {\n\t\t\t\twindow.setBackgroundColor(splash.colorInfo.background);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetWindowSplash(): IPartsSplash | undefined {\n\t\treturn this.stateService.getItem<IPartsSplash>(THEME_WINDOW_SPLASH);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ThemeSettings"]
}
