{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/electron-main/themeMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from \"electron\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport {\n\tisLinux,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { IStateService } from \"../../state/node/state.js\";\nimport type { IColorScheme } from \"../../window/common/window.js\";\nimport type { IPartsSplash } from \"../common/themeService.js\";\n\n// These default colors match our default themes\n// editor background color (\"Dark Modern\", etc...)\nconst DEFAULT_BG_LIGHT = \"#FFFFFF\";\nconst DEFAULT_BG_DARK = \"#1F1F1F\";\nconst DEFAULT_BG_HC_BLACK = \"#000000\";\nconst DEFAULT_BG_HC_LIGHT = \"#FFFFFF\";\n\nconst THEME_STORAGE_KEY = \"theme\";\nconst THEME_BG_STORAGE_KEY = \"themeBackground\";\nconst THEME_WINDOW_SPLASH = \"windowSplash\";\n\nnamespace ThemeSettings {\n\texport const DETECT_COLOR_SCHEME = \"window.autoDetectColorScheme\";\n\texport const SYSTEM_COLOR_THEME = \"window.systemColorTheme\";\n}\n\nexport const IThemeMainService =\n\tcreateDecorator<IThemeMainService>(\"themeMainService\");\n\nexport interface IThemeMainService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeColorScheme: Event<IColorScheme>;\n\n\tgetBackgroundColor(): string;\n\n\tsaveWindowSplash(windowId: number | undefined, splash: IPartsSplash): void;\n\tgetWindowSplash(): IPartsSplash | undefined;\n\n\tgetColorScheme(): IColorScheme;\n}\n\nexport class ThemeMainService extends Disposable implements IThemeMainService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeColorScheme = this._register(\n\t\tnew Emitter<IColorScheme>(),\n\t);\n\treadonly onDidChangeColorScheme = this._onDidChangeColorScheme.event;\n\n\tconstructor(\n\t\t@IStateService private stateService: IStateService,\n\t\t@IConfigurationService\n\t\tprivate configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\t// System Theme\n\t\tif (!isLinux) {\n\t\t\tthis._register(\n\t\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\t\tThemeSettings.SYSTEM_COLOR_THEME,\n\t\t\t\t\t\t) ||\n\t\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\t\tThemeSettings.DETECT_COLOR_SCHEME,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.updateSystemColorTheme();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\tthis.updateSystemColorTheme();\n\n\t\t// Color Scheme changes\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\telectron.nativeTheme,\n\t\t\t\t\"updated\",\n\t\t\t)(() => this._onDidChangeColorScheme.fire(this.getColorScheme())),\n\t\t);\n\t}\n\n\tprivate updateSystemColorTheme(): void {\n\t\tif (\n\t\t\tisLinux ||\n\t\t\tthis.configurationService.getValue(\n\t\t\t\tThemeSettings.DETECT_COLOR_SCHEME,\n\t\t\t)\n\t\t) {\n\t\t\t// only with `system` we can detect the system color scheme\n\t\t\telectron.nativeTheme.themeSource = \"system\";\n\t\t} else {\n\t\t\tswitch (\n\t\t\t\tthis.configurationService.getValue<\n\t\t\t\t\t\"default\" | \"auto\" | \"light\" | \"dark\"\n\t\t\t\t>(ThemeSettings.SYSTEM_COLOR_THEME)\n\t\t\t) {\n\t\t\t\tcase \"dark\":\n\t\t\t\t\telectron.nativeTheme.themeSource = \"dark\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"light\":\n\t\t\t\t\telectron.nativeTheme.themeSource = \"light\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"auto\":\n\t\t\t\t\tswitch (this.getBaseTheme()) {\n\t\t\t\t\t\tcase \"vs\":\n\t\t\t\t\t\t\telectron.nativeTheme.themeSource = \"light\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"vs-dark\":\n\t\t\t\t\t\t\telectron.nativeTheme.themeSource = \"dark\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\telectron.nativeTheme.themeSource = \"system\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\telectron.nativeTheme.themeSource = \"system\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetColorScheme(): IColorScheme {\n\t\tif (isWindows) {\n\t\t\t// high contrast is refelected by the shouldUseInvertedColorScheme property\n\t\t\tif (electron.nativeTheme.shouldUseHighContrastColors) {\n\t\t\t\t// shouldUseInvertedColorScheme is dark, !shouldUseInvertedColorScheme is light\n\t\t\t\treturn {\n\t\t\t\t\tdark: electron.nativeTheme.shouldUseInvertedColorScheme,\n\t\t\t\t\thighContrast: true,\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (isMacintosh) {\n\t\t\t// high contrast is set if one of shouldUseInvertedColorScheme or shouldUseHighContrastColors is set, reflecting the 'Invert colours' and `Increase contrast` settings in MacOS\n\t\t\tif (\n\t\t\t\telectron.nativeTheme.shouldUseInvertedColorScheme ||\n\t\t\t\telectron.nativeTheme.shouldUseHighContrastColors\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tdark: electron.nativeTheme.shouldUseDarkColors,\n\t\t\t\t\thighContrast: true,\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (isLinux) {\n\t\t\t// ubuntu gnome seems to have 3 states, light dark and high contrast\n\t\t\tif (electron.nativeTheme.shouldUseHighContrastColors) {\n\t\t\t\treturn { dark: true, highContrast: true };\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tdark: electron.nativeTheme.shouldUseDarkColors,\n\t\t\thighContrast: false,\n\t\t};\n\t}\n\n\tgetBackgroundColor(): string {\n\t\tconst colorScheme = this.getColorScheme();\n\t\tif (\n\t\t\tcolorScheme.highContrast &&\n\t\t\tthis.configurationService.getValue(\"window.autoDetectHighContrast\")\n\t\t) {\n\t\t\treturn colorScheme.dark ? DEFAULT_BG_HC_BLACK : DEFAULT_BG_HC_LIGHT;\n\t\t}\n\n\t\tlet background = this.stateService.getItem<string | null>(\n\t\t\tTHEME_BG_STORAGE_KEY,\n\t\t\tnull,\n\t\t);\n\t\tif (!background) {\n\t\t\tswitch (this.getBaseTheme()) {\n\t\t\t\tcase \"vs\":\n\t\t\t\t\tbackground = DEFAULT_BG_LIGHT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"hc-black\":\n\t\t\t\t\tbackground = DEFAULT_BG_HC_BLACK;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"hc-light\":\n\t\t\t\t\tbackground = DEFAULT_BG_HC_LIGHT;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbackground = DEFAULT_BG_DARK;\n\t\t\t}\n\t\t}\n\n\t\treturn background;\n\t}\n\n\tprivate getBaseTheme(): \"vs\" | \"vs-dark\" | \"hc-black\" | \"hc-light\" {\n\t\tconst baseTheme = this.stateService\n\t\t\t.getItem<string>(THEME_STORAGE_KEY, \"vs-dark\")\n\t\t\t.split(\" \")[0];\n\t\tswitch (baseTheme) {\n\t\t\tcase \"vs\":\n\t\t\t\treturn \"vs\";\n\t\t\tcase \"hc-black\":\n\t\t\t\treturn \"hc-black\";\n\t\t\tcase \"hc-light\":\n\t\t\t\treturn \"hc-light\";\n\t\t\tdefault:\n\t\t\t\treturn \"vs-dark\";\n\t\t}\n\t}\n\n\tsaveWindowSplash(windowId: number | undefined, splash: IPartsSplash): void {\n\t\t// Update in storage\n\t\tthis.stateService.setItems([\n\t\t\t{ key: THEME_STORAGE_KEY, data: splash.baseTheme },\n\t\t\t{ key: THEME_BG_STORAGE_KEY, data: splash.colorInfo.background },\n\t\t\t{ key: THEME_WINDOW_SPLASH, data: splash },\n\t\t]);\n\n\t\t// Update in opened windows\n\t\tif (typeof windowId === \"number\") {\n\t\t\tthis.updateBackgroundColor(windowId, splash);\n\t\t}\n\n\t\t// Update system theme\n\t\tthis.updateSystemColorTheme();\n\t}\n\n\tprivate updateBackgroundColor(\n\t\twindowId: number,\n\t\tsplash: IPartsSplash,\n\t): void {\n\t\tfor (const window of electron.BrowserWindow.getAllWindows()) {\n\t\t\tif (window.id === windowId) {\n\t\t\t\twindow.setBackgroundColor(splash.colorInfo.background);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetWindowSplash(): IPartsSplash | undefined {\n\t\treturn this.stateService.getItem<IPartsSplash>(THEME_WINDOW_SPLASH);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ThemeSettings"]
}
