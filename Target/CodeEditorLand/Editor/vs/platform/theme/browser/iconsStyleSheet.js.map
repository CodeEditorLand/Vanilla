{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/theme/browser/iconsStyleSheet.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asCSSPropertyValue, asCSSUrl } from '../../../base/browser/dom.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { getIconRegistry, IconContribution, IconFontDefinition } from '../common/iconRegistry.js';\nimport { IProductIconTheme, IThemeService } from '../common/themeService.js';\n\nexport interface IIconsStyleSheet extends IDisposable {\n\tgetCSS(): string;\n\treadonly onDidChange: Event<void>;\n}\n\nexport function getIconsStyleSheet(themeService: IThemeService | undefined): IIconsStyleSheet {\n\tconst disposable = new DisposableStore();\n\n\tconst onDidChangeEmmiter = disposable.add(new Emitter<void>());\n\tconst iconRegistry = getIconRegistry();\n\tdisposable.add(iconRegistry.onDidChange(() => onDidChangeEmmiter.fire()));\n\tif (themeService) {\n\t\tdisposable.add(themeService.onDidProductIconThemeChange(() => onDidChangeEmmiter.fire()));\n\t}\n\n\treturn {\n\t\tdispose: () => disposable.dispose(),\n\t\tonDidChange: onDidChangeEmmiter.event,\n\t\tgetCSS() {\n\t\t\tconst productIconTheme = themeService ? themeService.getProductIconTheme() : new UnthemedProductIconTheme();\n\t\t\tconst usedFontIds: { [id: string]: IconFontDefinition } = {};\n\n\t\t\tconst rules: string[] = [];\n\t\t\tconst rootAttribs: string[] = [];\n\t\t\tfor (const contribution of iconRegistry.getIcons()) {\n\t\t\t\tconst definition = productIconTheme.getIcon(contribution);\n\t\t\t\tif (!definition) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst fontContribution = definition.font;\n\t\t\t\tconst fontFamilyVar = `--vscode-icon-${contribution.id}-font-family`;\n\t\t\t\tconst contentVar = `--vscode-icon-${contribution.id}-content`;\n\t\t\t\tif (fontContribution) {\n\t\t\t\t\tusedFontIds[fontContribution.id] = fontContribution.definition;\n\t\t\t\t\trootAttribs.push(\n\t\t\t\t\t\t`${fontFamilyVar}: ${asCSSPropertyValue(fontContribution.id)};`,\n\t\t\t\t\t\t`${contentVar}: '${definition.fontCharacter}';`,\n\t\t\t\t\t);\n\t\t\t\t\trules.push(`.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${asCSSPropertyValue(fontContribution.id)}; }`);\n\t\t\t\t} else {\n\t\t\t\t\trootAttribs.push(`${contentVar}: '${definition.fontCharacter}'; ${fontFamilyVar}: 'codicon';`);\n\t\t\t\t\trules.push(`.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const id in usedFontIds) {\n\t\t\t\tconst definition = usedFontIds[id];\n\t\t\t\tconst fontWeight = definition.weight ? `font-weight: ${definition.weight};` : '';\n\t\t\t\tconst fontStyle = definition.style ? `font-style: ${definition.style};` : '';\n\t\t\t\tconst src = definition.src.map(l => `${asCSSUrl(l.location)} format('${l.format}')`).join(', ');\n\t\t\t\trules.push(`@font-face { src: ${src}; font-family: ${asCSSPropertyValue(id)};${fontWeight}${fontStyle} font-display: block; }`);\n\t\t\t}\n\n\t\t\trules.push(`:root { ${rootAttribs.join(' ')} }`);\n\n\t\t\treturn rules.join('\\n');\n\t\t}\n\t};\n}\n\nexport class UnthemedProductIconTheme implements IProductIconTheme {\n\tgetIcon(contribution: IconContribution) {\n\t\tconst iconRegistry = getIconRegistry();\n\t\tlet definition = contribution.defaults;\n\t\twhile (ThemeIcon.isThemeIcon(definition)) {\n\t\t\tconst c = iconRegistry.getIcon(definition.id);\n\t\t\tif (!c) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tdefinition = c.defaults;\n\t\t}\n\t\treturn definition;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,oBAAoB,gBAAgB;AAC7C,SAAS,SAAS,aAAa;AAC/B,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB,kBAAkB,0BAA0B;AACtE,SAAS,mBAAmB,qBAAqB;AAO1C,SAAS,mBAAmB,cAA2D;AAC7F,QAAM,aAAa,IAAI,gBAAgB;AAEvC,QAAM,qBAAqB,WAAW,IAAI,IAAI,QAAc,CAAC;AAC7D,QAAM,eAAe,gBAAgB;AACrC,aAAW,IAAI,aAAa,YAAY,MAAM,mBAAmB,KAAK,CAAC,CAAC;AACxE,MAAI,cAAc;AACjB,eAAW,IAAI,aAAa,4BAA4B,MAAM,mBAAmB,KAAK,CAAC,CAAC;AAAA,EACzF;AAEA,SAAO;AAAA,IACN,SAAS,6BAAM,WAAW,QAAQ,GAAzB;AAAA,IACT,aAAa,mBAAmB;AAAA,IAChC,SAAS;AACR,YAAM,mBAAmB,eAAe,aAAa,oBAAoB,IAAI,IAAI,yBAAyB;AAC1G,YAAM,cAAoD,CAAC;AAE3D,YAAM,QAAkB,CAAC;AACzB,YAAM,cAAwB,CAAC;AAC/B,iBAAW,gBAAgB,aAAa,SAAS,GAAG;AACnD,cAAM,aAAa,iBAAiB,QAAQ,YAAY;AACxD,YAAI,CAAC,YAAY;AAChB;AAAA,QACD;AAEA,cAAM,mBAAmB,WAAW;AACpC,cAAM,gBAAgB,iBAAiB,aAAa,EAAE;AACtD,cAAM,aAAa,iBAAiB,aAAa,EAAE;AACnD,YAAI,kBAAkB;AACrB,sBAAY,iBAAiB,EAAE,IAAI,iBAAiB;AACpD,sBAAY;AAAA,YACX,GAAG,aAAa,KAAK,mBAAmB,iBAAiB,EAAE,CAAC;AAAA,YAC5D,GAAG,UAAU,MAAM,WAAW,aAAa;AAAA,UAC5C;AACA,gBAAM,KAAK,YAAY,aAAa,EAAE,uBAAuB,WAAW,aAAa,mBAAmB,mBAAmB,iBAAiB,EAAE,CAAC,KAAK;AAAA,QACrJ,OAAO;AACN,sBAAY,KAAK,GAAG,UAAU,MAAM,WAAW,aAAa,MAAM,aAAa,cAAc;AAC7F,gBAAM,KAAK,YAAY,aAAa,EAAE,uBAAuB,WAAW,aAAa,MAAM;AAAA,QAC5F;AAAA,MACD;AAEA,iBAAW,MAAM,aAAa;AAC7B,cAAM,aAAa,YAAY,EAAE;AACjC,cAAM,aAAa,WAAW,SAAS,gBAAgB,WAAW,MAAM,MAAM;AAC9E,cAAM,YAAY,WAAW,QAAQ,eAAe,WAAW,KAAK,MAAM;AAC1E,cAAM,MAAM,WAAW,IAAI,IAAI,OAAK,GAAG,SAAS,EAAE,QAAQ,CAAC,YAAY,EAAE,MAAM,IAAI,EAAE,KAAK,IAAI;AAC9F,cAAM,KAAK,qBAAqB,GAAG,kBAAkB,mBAAmB,EAAE,CAAC,IAAI,UAAU,GAAG,SAAS,yBAAyB;AAAA,MAC/H;AAEA,YAAM,KAAK,WAAW,YAAY,KAAK,GAAG,CAAC,IAAI;AAE/C,aAAO,MAAM,KAAK,IAAI;AAAA,IACvB;AAAA,EACD;AACD;AAtDgB;AAwDT,MAAM,yBAAsD;AAAA,EAzEnE,OAyEmE;AAAA;AAAA;AAAA,EAClE,QAAQ,cAAgC;AACvC,UAAM,eAAe,gBAAgB;AACrC,QAAI,aAAa,aAAa;AAC9B,WAAO,UAAU,YAAY,UAAU,GAAG;AACzC,YAAM,IAAI,aAAa,QAAQ,WAAW,EAAE;AAC5C,UAAI,CAAC,GAAG;AACP,eAAO;AAAA,MACR;AACA,mBAAa,EAAE;AAAA,IAChB;AACA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
