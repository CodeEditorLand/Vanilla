{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/registry/common/platform.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as Assert from \"../../../base/common/assert.js\";\nimport * as Types from \"../../../base/common/types.js\";\n\nexport interface IRegistry {\n\t/**\n\t * Adds the extension functions and properties defined by data to the\n\t * platform. The provided id must be unique.\n\t * @param id a unique identifier\n\t * @param data a contribution\n\t */\n\tadd(id: string, data: any): void;\n\n\t/**\n\t * Returns true iff there is an extension with the provided id.\n\t * @param id an extension identifier\n\t */\n\tknows(id: string): boolean;\n\n\t/**\n\t * Returns the extension functions and properties defined by the specified key or null.\n\t * @param id an extension identifier\n\t */\n\tas<T>(id: string): T;\n}\n\nclass RegistryImpl implements IRegistry {\n\tprivate readonly data = new Map<string, any>();\n\n\tpublic add(id: string, data: any): void {\n\t\tAssert.ok(Types.isString(id));\n\t\tAssert.ok(Types.isObject(data));\n\t\tAssert.ok(\n\t\t\t!this.data.has(id),\n\t\t\t\"There is already an extension with this id\",\n\t\t);\n\n\t\tthis.data.set(id, data);\n\t}\n\n\tpublic knows(id: string): boolean {\n\t\treturn this.data.has(id);\n\t}\n\n\tpublic as(id: string): any {\n\t\treturn this.data.get(id) || null;\n\t}\n}\n\nexport const Registry: IRegistry = new RegistryImpl();\n"],
  "mappings": ";;AAKA,YAAY,YAAY;AACxB,YAAY,WAAW;AAwBvB,MAAM,aAAkC;AAAA,EA9BxC,OA8BwC;AAAA;AAAA;AAAA,EACtB,OAAO,oBAAI,IAAiB;AAAA,EAEtC,IAAI,IAAY,MAAiB;AACvC,WAAO,GAAG,MAAM,SAAS,EAAE,CAAC;AAC5B,WAAO,GAAG,MAAM,SAAS,IAAI,CAAC;AAC9B,WAAO;AAAA,MACN,CAAC,KAAK,KAAK,IAAI,EAAE;AAAA,MACjB;AAAA,IACD;AAEA,SAAK,KAAK,IAAI,IAAI,IAAI;AAAA,EACvB;AAAA,EAEO,MAAM,IAAqB;AACjC,WAAO,KAAK,KAAK,IAAI,EAAE;AAAA,EACxB;AAAA,EAEO,GAAG,IAAiB;AAC1B,WAAO,KAAK,KAAK,IAAI,EAAE,KAAK;AAAA,EAC7B;AACD;AAEO,MAAM,WAAsB,IAAI,aAAa;",
  "names": []
}
