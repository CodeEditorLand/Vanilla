var i=class{unexpectedErrorHandler;listeners;constructor(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout(()=>{throw e.stack?t.isErrorNoTelemetry(e)?new t(e.message+`

`+e.stack):new Error(e.message+`

`+e.stack):e},0)}}addListener(e){return this.listeners.push(e),()=>{this._removeListener(e)}}emit(e){this.listeners.forEach(n=>{n(e)})}_removeListener(e){this.listeners.splice(this.listeners.indexOf(e),1)}setUnexpectedErrorHandler(e){this.unexpectedErrorHandler=e}getUnexpectedErrorHandler(){return this.unexpectedErrorHandler}onUnexpectedError(e){this.unexpectedErrorHandler(e),this.emit(e)}onUnexpectedExternalError(e){this.unexpectedErrorHandler(e)}},d=new i;var t=class r extends Error{name;constructor(e){super(e),this.name="CodeExpectedError"}static fromError(e){if(e instanceof r)return e;let n=new r;return n.message=e.message,n.stack=e.stack,n}static isErrorNoTelemetry(e){return e.name==="CodeExpectedError"}};function o(r,e){if(!r)throw new Error(e?`Assertion failed (${e})`:"Assertion Failed")}function a(r){return typeof r=="string"}function u(r){return typeof r=="object"&&r!==null&&!Array.isArray(r)&&!(r instanceof RegExp)&&!(r instanceof Date)}var s=class{data=new Map;add(e,n){o(a(e)),o(u(n)),o(!this.data.has(e),"There is already an extension with this id"),this.data.set(e,n)}knows(e){return this.data.has(e)}as(e){return this.data.get(e)||null}},x=new s;export{x as Registry};
