{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/secrets/common/secrets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SequencerByKey } from \"../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Lazy } from \"../../../base/common/lazy.js\";\nimport { Disposable, DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { IEncryptionService } from \"../../encryption/common/encryptionService.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport {\n\tIStorageService,\n\tInMemoryStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../storage/common/storage.js\";\n\nexport const ISecretStorageService = createDecorator<ISecretStorageService>(\n\t\"secretStorageService\",\n);\n\nexport interface ISecretStorageProvider {\n\ttype: \"in-memory\" | \"persisted\" | \"unknown\";\n\tget(key: string): Promise<string | undefined>;\n\tset(key: string, value: string): Promise<void>;\n\tdelete(key: string): Promise<void>;\n}\n\nexport interface ISecretStorageService extends ISecretStorageProvider {\n\treadonly _serviceBrand: undefined;\n\tonDidChangeSecret: Event<string>;\n}\n\nexport class BaseSecretStorageService\n\textends Disposable\n\timplements ISecretStorageService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _storagePrefix = \"secret://\";\n\n\tprotected readonly onDidChangeSecretEmitter = this._register(\n\t\tnew Emitter<string>(),\n\t);\n\tonDidChangeSecret: Event<string> = this.onDidChangeSecretEmitter.event;\n\n\tprotected readonly _sequencer = new SequencerByKey<string>();\n\n\tprivate _type: \"in-memory\" | \"persisted\" | \"unknown\" = \"unknown\";\n\n\tprivate readonly _onDidChangeValueDisposable = this._register(\n\t\tnew DisposableStore(),\n\t);\n\n\tconstructor(\n\t\tprivate readonly _useInMemoryStorage: boolean,\n\t\t@IStorageService private _storageService: IStorageService,\n\t\t@IEncryptionService protected _encryptionService: IEncryptionService,\n\t\t@ILogService protected readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @Note initialize must be called first so that this can be resolved properly\n\t * otherwise it will return 'unknown'.\n\t */\n\tget type() {\n\t\treturn this._type;\n\t}\n\n\tprivate _lazyStorageService: Lazy<Promise<IStorageService>> = new Lazy(() =>\n\t\tthis.initialize(),\n\t);\n\tprotected get resolvedStorageService() {\n\t\treturn this._lazyStorageService.value;\n\t}\n\n\tget(key: string): Promise<string | undefined> {\n\t\treturn this._sequencer.queue(key, async () => {\n\t\t\tconst storageService = await this.resolvedStorageService;\n\n\t\t\tconst fullKey = this.getKey(key);\n\t\t\tthis._logService.trace(\n\t\t\t\t\"[secrets] getting secret for key:\",\n\t\t\t\tfullKey,\n\t\t\t);\n\t\t\tconst encrypted = storageService.get(\n\t\t\t\tfullKey,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t\tif (!encrypted) {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"[secrets] no secret found for key:\",\n\t\t\t\t\tfullKey,\n\t\t\t\t);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"[secrets] decrypting gotten secret for key:\",\n\t\t\t\t\tfullKey,\n\t\t\t\t);\n\t\t\t\t// If the storage service is in-memory, we don't need to decrypt\n\t\t\t\tconst result =\n\t\t\t\t\tthis._type === \"in-memory\"\n\t\t\t\t\t\t? encrypted\n\t\t\t\t\t\t: await this._encryptionService.decrypt(encrypted);\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"[secrets] decrypted secret for key:\",\n\t\t\t\t\tfullKey,\n\t\t\t\t);\n\t\t\t\treturn result;\n\t\t\t} catch (e) {\n\t\t\t\tthis._logService.error(e);\n\t\t\t\tthis.delete(key);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tset(key: string, value: string): Promise<void> {\n\t\treturn this._sequencer.queue(key, async () => {\n\t\t\tconst storageService = await this.resolvedStorageService;\n\n\t\t\tthis._logService.trace(\"[secrets] encrypting secret for key:\", key);\n\t\t\tlet encrypted;\n\t\t\ttry {\n\t\t\t\t// If the storage service is in-memory, we don't need to encrypt\n\t\t\t\tencrypted =\n\t\t\t\t\tthis._type === \"in-memory\"\n\t\t\t\t\t\t? value\n\t\t\t\t\t\t: await this._encryptionService.encrypt(value);\n\t\t\t} catch (e) {\n\t\t\t\tthis._logService.error(e);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tconst fullKey = this.getKey(key);\n\t\t\tthis._logService.trace(\n\t\t\t\t\"[secrets] storing encrypted secret for key:\",\n\t\t\t\tfullKey,\n\t\t\t);\n\t\t\tstorageService.store(\n\t\t\t\tfullKey,\n\t\t\t\tencrypted,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t\tthis._logService.trace(\n\t\t\t\t\"[secrets] stored encrypted secret for key:\",\n\t\t\t\tfullKey,\n\t\t\t);\n\t\t});\n\t}\n\n\tdelete(key: string): Promise<void> {\n\t\treturn this._sequencer.queue(key, async () => {\n\t\t\tconst storageService = await this.resolvedStorageService;\n\n\t\t\tconst fullKey = this.getKey(key);\n\t\t\tthis._logService.trace(\n\t\t\t\t\"[secrets] deleting secret for key:\",\n\t\t\t\tfullKey,\n\t\t\t);\n\t\t\tstorageService.remove(fullKey, StorageScope.APPLICATION);\n\t\t\tthis._logService.trace(\n\t\t\t\t\"[secrets] deleted secret for key:\",\n\t\t\t\tfullKey,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async initialize(): Promise<IStorageService> {\n\t\tlet storageService;\n\t\tif (\n\t\t\t!this._useInMemoryStorage &&\n\t\t\t(await this._encryptionService.isEncryptionAvailable())\n\t\t) {\n\t\t\tthis._logService.trace(\n\t\t\t\t`[SecretStorageService] Encryption is available, using persisted storage`,\n\t\t\t);\n\t\t\tthis._type = \"persisted\";\n\t\t\tstorageService = this._storageService;\n\t\t} else {\n\t\t\t// If we already have an in-memory storage service, we don't need to recreate it\n\t\t\tif (this._type === \"in-memory\") {\n\t\t\t\treturn this._storageService;\n\t\t\t}\n\t\t\tthis._logService.trace(\n\t\t\t\t\"[SecretStorageService] Encryption is not available, falling back to in-memory storage\",\n\t\t\t);\n\t\t\tthis._type = \"in-memory\";\n\t\t\tstorageService = this._register(new InMemoryStorageService());\n\t\t}\n\n\t\tthis._onDidChangeValueDisposable.clear();\n\t\tthis._onDidChangeValueDisposable.add(\n\t\t\tstorageService.onDidChangeValue(\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tundefined,\n\t\t\t\tthis._onDidChangeValueDisposable,\n\t\t\t)((e) => {\n\t\t\t\tthis.onDidChangeValue(e.key);\n\t\t\t}),\n\t\t);\n\t\treturn storageService;\n\t}\n\n\tprotected reinitialize(): void {\n\t\tthis._lazyStorageService = new Lazy(() => this.initialize());\n\t}\n\n\tprivate onDidChangeValue(key: string): void {\n\t\tif (!key.startsWith(this._storagePrefix)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst secretKey = key.slice(this._storagePrefix.length);\n\n\t\tthis._logService.trace(\n\t\t\t`[SecretStorageService] Notifying change in value for secret: ${secretKey}`,\n\t\t);\n\t\tthis.onDidChangeSecretEmitter.fire(secretKey);\n\t}\n\n\tprivate getKey(key: string): string {\n\t\treturn `${this._storagePrefix}${key}`;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
