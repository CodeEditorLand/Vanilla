{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/secrets/test/common/secrets.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IEncryptionService, KnownStorageProvider } from '../../../encryption/common/encryptionService.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { BaseSecretStorageService } from '../../common/secrets.js';\nimport { InMemoryStorageService } from '../../../storage/common/storage.js';\n\nclass TestEncryptionService implements IEncryptionService {\n\t_serviceBrand: undefined;\n\tprivate encryptedPrefix = 'encrypted+'; // prefix to simulate encryption\n\tsetUsePlainTextEncryption(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider> {\n\t\treturn Promise.resolve(KnownStorageProvider.basicText);\n\t}\n\tencrypt(value: string): Promise<string> {\n\t\treturn Promise.resolve(this.encryptedPrefix + value);\n\t}\n\tdecrypt(value: string): Promise<string> {\n\t\treturn Promise.resolve(value.substring(this.encryptedPrefix.length));\n\t}\n\tisEncryptionAvailable(): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nclass TestNoEncryptionService implements IEncryptionService {\n\t_serviceBrand: undefined;\n\tsetUsePlainTextEncryption(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tencrypt(value: string): Promise<string> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdecrypt(value: string): Promise<string> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tisEncryptionAvailable(): Promise<boolean> {\n\t\treturn Promise.resolve(false);\n\t}\n}\n\nsuite('secrets', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('BaseSecretStorageService useInMemoryStorage=true', () => {\n\t\tlet service: BaseSecretStorageService;\n\t\tlet spyEncryptionService: sinon.SinonSpiedInstance<TestEncryptionService>;\n\t\tlet sandbox: sinon.SinonSandbox;\n\n\t\tsetup(() => {\n\t\t\tsandbox = sinon.createSandbox();\n\t\t\tspyEncryptionService = sandbox.spy(new TestEncryptionService());\n\t\t\tservice = store.add(new BaseSecretStorageService(\n\t\t\t\ttrue,\n\t\t\t\tstore.add(new InMemoryStorageService()),\n\t\t\t\tspyEncryptionService,\n\t\t\t\tstore.add(new NullLogService())\n\t\t\t));\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tsandbox.restore();\n\t\t});\n\n\t\ttest('type', async () => {\n\t\t\tassert.strictEqual(service.type, 'unknown');\n\t\t\t// trigger lazy initialization\n\t\t\tawait service.set('my-secret', 'my-secret-value');\n\n\t\t\tassert.strictEqual(service.type, 'in-memory');\n\t\t});\n\n\t\ttest('set and get', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, value);\n\n\t\t\t// Additionally ensure the encryptionservice was not used\n\t\t\tassert.strictEqual(spyEncryptionService.encrypt.callCount, 0);\n\t\t\tassert.strictEqual(spyEncryptionService.decrypt.callCount, 0);\n\t\t});\n\n\t\ttest('delete', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tawait service.delete(key);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, undefined);\n\t\t});\n\n\t\ttest('onDidChangeSecret', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tlet eventFired = false;\n\t\t\tstore.add(service.onDidChangeSecret((changedKey) => {\n\t\t\t\tassert.strictEqual(changedKey, key);\n\t\t\t\teventFired = true;\n\t\t\t}));\n\t\t\tawait service.set(key, value);\n\t\t\tassert.strictEqual(eventFired, true);\n\t\t});\n\t});\n\n\tsuite('BaseSecretStorageService useInMemoryStorage=false', () => {\n\t\tlet service: BaseSecretStorageService;\n\t\tlet spyEncryptionService: sinon.SinonSpiedInstance<TestEncryptionService>;\n\t\tlet sandbox: sinon.SinonSandbox;\n\n\t\tsetup(() => {\n\t\t\tsandbox = sinon.createSandbox();\n\t\t\tspyEncryptionService = sandbox.spy(new TestEncryptionService());\n\t\t\tservice = store.add(new BaseSecretStorageService(\n\t\t\t\tfalse,\n\t\t\t\tstore.add(new InMemoryStorageService()),\n\t\t\t\tspyEncryptionService,\n\t\t\t\tstore.add(new NullLogService()))\n\t\t\t);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tsandbox.restore();\n\t\t});\n\n\t\ttest('type', async () => {\n\t\t\tassert.strictEqual(service.type, 'unknown');\n\t\t\t// trigger lazy initialization\n\t\t\tawait service.set('my-secret', 'my-secret-value');\n\n\t\t\tassert.strictEqual(service.type, 'persisted');\n\t\t});\n\n\t\ttest('set and get', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, value);\n\n\t\t\t// Additionally ensure the encryptionservice was not used\n\t\t\tassert.strictEqual(spyEncryptionService.encrypt.callCount, 1);\n\t\t\tassert.strictEqual(spyEncryptionService.decrypt.callCount, 1);\n\t\t});\n\n\t\ttest('delete', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tawait service.delete(key);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, undefined);\n\t\t});\n\n\t\ttest('onDidChangeSecret', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tlet eventFired = false;\n\t\t\tstore.add(service.onDidChangeSecret((changedKey) => {\n\t\t\t\tassert.strictEqual(changedKey, key);\n\t\t\t\teventFired = true;\n\t\t\t}));\n\t\t\tawait service.set(key, value);\n\t\t\tassert.strictEqual(eventFired, true);\n\t\t});\n\t});\n\n\tsuite('BaseSecretStorageService useInMemoryStorage=false, encryption not available', () => {\n\t\tlet service: BaseSecretStorageService;\n\t\tlet spyNoEncryptionService: sinon.SinonSpiedInstance<TestEncryptionService>;\n\t\tlet sandbox: sinon.SinonSandbox;\n\n\t\tsetup(() => {\n\t\t\tsandbox = sinon.createSandbox();\n\t\t\tspyNoEncryptionService = sandbox.spy(new TestNoEncryptionService());\n\t\t\tservice = store.add(new BaseSecretStorageService(\n\t\t\t\tfalse,\n\t\t\t\tstore.add(new InMemoryStorageService()),\n\t\t\t\tspyNoEncryptionService,\n\t\t\t\tstore.add(new NullLogService()))\n\t\t\t);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tsandbox.restore();\n\t\t});\n\n\t\ttest('type', async () => {\n\t\t\tassert.strictEqual(service.type, 'unknown');\n\t\t\t// trigger lazy initialization\n\t\t\tawait service.set('my-secret', 'my-secret-value');\n\n\t\t\tassert.strictEqual(service.type, 'in-memory');\n\t\t});\n\n\t\ttest('set and get', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, value);\n\n\t\t\t// Additionally ensure the encryptionservice was not used\n\t\t\tassert.strictEqual(spyNoEncryptionService.encrypt.callCount, 0);\n\t\t\tassert.strictEqual(spyNoEncryptionService.decrypt.callCount, 0);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
