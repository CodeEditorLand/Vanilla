{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/usLayoutResolvedKeybinding.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE, ScanCode } from '../../../base/common/keyCodes.js';\nimport { SingleModifierChord, Chord, KeyCodeChord, Keybinding } from '../../../base/common/keybindings.js';\nimport { OperatingSystem } from '../../../base/common/platform.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { toEmptyArrayIfContainsNull } from './resolvedKeybindingItem.js';\n\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding<KeyCodeChord> {\n\n\tconstructor(chords: KeyCodeChord[], os: OperatingSystem) {\n\t\tsuper(os, chords);\n\t}\n\n\tprivate _keyCodeToUILabel(keyCode: KeyCode): string {\n\t\tif (this._os === OperatingSystem.Macintosh) {\n\t\t\tswitch (keyCode) {\n\t\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\t\treturn '\u2190';\n\t\t\t\tcase KeyCode.UpArrow:\n\t\t\t\t\treturn '\u2191';\n\t\t\t\tcase KeyCode.RightArrow:\n\t\t\t\t\treturn '\u2192';\n\t\t\t\tcase KeyCode.DownArrow:\n\t\t\t\t\treturn '\u2193';\n\t\t\t}\n\t\t}\n\t\treturn KeyCodeUtils.toString(keyCode);\n\t}\n\n\tprotected _getLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._keyCodeToUILabel(chord.keyCode);\n\t}\n\n\tprotected _getAriaLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn KeyCodeUtils.toString(chord.keyCode);\n\t}\n\n\tprotected _getElectronAccelerator(chord: KeyCodeChord): string | null {\n\t\treturn KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n\t}\n\n\tprotected _getUserSettingsLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\tconst result = KeyCodeUtils.toUserSettingsUS(chord.keyCode);\n\t\treturn (result ? result.toLowerCase() : result);\n\t}\n\n\tprotected _isWYSIWYG(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected _getChordDispatch(chord: KeyCodeChord): string | null {\n\t\treturn USLayoutResolvedKeybinding.getDispatchStr(chord);\n\t}\n\n\tpublic static getDispatchStr(chord: KeyCodeChord): string | null {\n\t\tif (chord.isModifierKey()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = '';\n\n\t\tif (chord.ctrlKey) {\n\t\t\tresult += 'ctrl+';\n\t\t}\n\t\tif (chord.shiftKey) {\n\t\t\tresult += 'shift+';\n\t\t}\n\t\tif (chord.altKey) {\n\t\t\tresult += 'alt+';\n\t\t}\n\t\tif (chord.metaKey) {\n\t\t\tresult += 'meta+';\n\t\t}\n\t\tresult += KeyCodeUtils.toString(chord.keyCode);\n\n\t\treturn result;\n\t}\n\n\tprotected _getSingleModifierChordDispatch(keybinding: KeyCodeChord): SingleModifierChord | null {\n\t\tif (keybinding.keyCode === KeyCode.Ctrl && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n\t\t\treturn 'ctrl';\n\t\t}\n\t\tif (keybinding.keyCode === KeyCode.Shift && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n\t\t\treturn 'shift';\n\t\t}\n\t\tif (keybinding.keyCode === KeyCode.Alt && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n\t\t\treturn 'alt';\n\t\t}\n\t\tif (keybinding.keyCode === KeyCode.Meta && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n\t\t\treturn 'meta';\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * *NOTE*: Check return value for `KeyCode.Unknown`.\n\t */\n\tprivate static _scanCodeToKeyCode(scanCode: ScanCode): KeyCode {\n\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn immutableKeyCode;\n\t\t}\n\n\t\tswitch (scanCode) {\n\t\t\tcase ScanCode.KeyA: return KeyCode.KeyA;\n\t\t\tcase ScanCode.KeyB: return KeyCode.KeyB;\n\t\t\tcase ScanCode.KeyC: return KeyCode.KeyC;\n\t\t\tcase ScanCode.KeyD: return KeyCode.KeyD;\n\t\t\tcase ScanCode.KeyE: return KeyCode.KeyE;\n\t\t\tcase ScanCode.KeyF: return KeyCode.KeyF;\n\t\t\tcase ScanCode.KeyG: return KeyCode.KeyG;\n\t\t\tcase ScanCode.KeyH: return KeyCode.KeyH;\n\t\t\tcase ScanCode.KeyI: return KeyCode.KeyI;\n\t\t\tcase ScanCode.KeyJ: return KeyCode.KeyJ;\n\t\t\tcase ScanCode.KeyK: return KeyCode.KeyK;\n\t\t\tcase ScanCode.KeyL: return KeyCode.KeyL;\n\t\t\tcase ScanCode.KeyM: return KeyCode.KeyM;\n\t\t\tcase ScanCode.KeyN: return KeyCode.KeyN;\n\t\t\tcase ScanCode.KeyO: return KeyCode.KeyO;\n\t\t\tcase ScanCode.KeyP: return KeyCode.KeyP;\n\t\t\tcase ScanCode.KeyQ: return KeyCode.KeyQ;\n\t\t\tcase ScanCode.KeyR: return KeyCode.KeyR;\n\t\t\tcase ScanCode.KeyS: return KeyCode.KeyS;\n\t\t\tcase ScanCode.KeyT: return KeyCode.KeyT;\n\t\t\tcase ScanCode.KeyU: return KeyCode.KeyU;\n\t\t\tcase ScanCode.KeyV: return KeyCode.KeyV;\n\t\t\tcase ScanCode.KeyW: return KeyCode.KeyW;\n\t\t\tcase ScanCode.KeyX: return KeyCode.KeyX;\n\t\t\tcase ScanCode.KeyY: return KeyCode.KeyY;\n\t\t\tcase ScanCode.KeyZ: return KeyCode.KeyZ;\n\t\t\tcase ScanCode.Digit1: return KeyCode.Digit1;\n\t\t\tcase ScanCode.Digit2: return KeyCode.Digit2;\n\t\t\tcase ScanCode.Digit3: return KeyCode.Digit3;\n\t\t\tcase ScanCode.Digit4: return KeyCode.Digit4;\n\t\t\tcase ScanCode.Digit5: return KeyCode.Digit5;\n\t\t\tcase ScanCode.Digit6: return KeyCode.Digit6;\n\t\t\tcase ScanCode.Digit7: return KeyCode.Digit7;\n\t\t\tcase ScanCode.Digit8: return KeyCode.Digit8;\n\t\t\tcase ScanCode.Digit9: return KeyCode.Digit9;\n\t\t\tcase ScanCode.Digit0: return KeyCode.Digit0;\n\t\t\tcase ScanCode.Minus: return KeyCode.Minus;\n\t\t\tcase ScanCode.Equal: return KeyCode.Equal;\n\t\t\tcase ScanCode.BracketLeft: return KeyCode.BracketLeft;\n\t\t\tcase ScanCode.BracketRight: return KeyCode.BracketRight;\n\t\t\tcase ScanCode.Backslash: return KeyCode.Backslash;\n\t\t\tcase ScanCode.IntlHash: return KeyCode.Unknown; // missing\n\t\t\tcase ScanCode.Semicolon: return KeyCode.Semicolon;\n\t\t\tcase ScanCode.Quote: return KeyCode.Quote;\n\t\t\tcase ScanCode.Backquote: return KeyCode.Backquote;\n\t\t\tcase ScanCode.Comma: return KeyCode.Comma;\n\t\t\tcase ScanCode.Period: return KeyCode.Period;\n\t\t\tcase ScanCode.Slash: return KeyCode.Slash;\n\t\t\tcase ScanCode.IntlBackslash: return KeyCode.IntlBackslash;\n\t\t}\n\t\treturn KeyCode.Unknown;\n\t}\n\n\tprivate static _toKeyCodeChord(chord: Chord | null): KeyCodeChord | null {\n\t\tif (!chord) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord instanceof KeyCodeChord) {\n\t\t\treturn chord;\n\t\t}\n\t\tconst keyCode = this._scanCodeToKeyCode(chord.scanCode);\n\t\tif (keyCode === KeyCode.Unknown) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new KeyCodeChord(chord.ctrlKey, chord.shiftKey, chord.altKey, chord.metaKey, keyCode);\n\t}\n\n\tpublic static resolveKeybinding(keybinding: Keybinding, os: OperatingSystem): USLayoutResolvedKeybinding[] {\n\t\tconst chords: KeyCodeChord[] = toEmptyArrayIfContainsNull(keybinding.chords.map(chord => this._toKeyCodeChord(chord)));\n\t\tif (chords.length > 0) {\n\t\t\treturn [new USLayoutResolvedKeybinding(chords, os)];\n\t\t}\n\t\treturn [];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
