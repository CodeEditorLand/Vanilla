{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/usLayoutResolvedKeybinding.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tIMMUTABLE_CODE_TO_KEY_CODE,\n\tKeyCode,\n\tKeyCodeUtils,\n\tScanCode,\n} from \"../../../base/common/keyCodes.js\";\nimport {\n\ttype Chord,\n\tKeyCodeChord,\n\ttype Keybinding,\n\ttype SingleModifierChord,\n} from \"../../../base/common/keybindings.js\";\nimport { OperatingSystem } from \"../../../base/common/platform.js\";\nimport { BaseResolvedKeybinding } from \"./baseResolvedKeybinding.js\";\nimport { toEmptyArrayIfContainsNull } from \"./resolvedKeybindingItem.js\";\n\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding<KeyCodeChord> {\n\tconstructor(chords: KeyCodeChord[], os: OperatingSystem) {\n\t\tsuper(os, chords);\n\t}\n\n\tprivate _keyCodeToUILabel(keyCode: KeyCode): string {\n\t\tif (this._os === OperatingSystem.Macintosh) {\n\t\t\tswitch (keyCode) {\n\t\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\t\treturn \"\u2190\";\n\t\t\t\tcase KeyCode.UpArrow:\n\t\t\t\t\treturn \"\u2191\";\n\t\t\t\tcase KeyCode.RightArrow:\n\t\t\t\t\treturn \"\u2192\";\n\t\t\t\tcase KeyCode.DownArrow:\n\t\t\t\t\treturn \"\u2193\";\n\t\t\t}\n\t\t}\n\t\treturn KeyCodeUtils.toString(keyCode);\n\t}\n\n\tprotected _getLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn this._keyCodeToUILabel(chord.keyCode);\n\t}\n\n\tprotected _getAriaLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn KeyCodeUtils.toString(chord.keyCode);\n\t}\n\n\tprotected _getElectronAccelerator(chord: KeyCodeChord): string | null {\n\t\treturn KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n\t}\n\n\tprotected _getUserSettingsLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst result = KeyCodeUtils.toUserSettingsUS(chord.keyCode);\n\t\treturn result ? result.toLowerCase() : result;\n\t}\n\n\tprotected _isWYSIWYG(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected _getChordDispatch(chord: KeyCodeChord): string | null {\n\t\treturn USLayoutResolvedKeybinding.getDispatchStr(chord);\n\t}\n\n\tpublic static getDispatchStr(chord: KeyCodeChord): string | null {\n\t\tif (chord.isModifierKey()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = \"\";\n\n\t\tif (chord.ctrlKey) {\n\t\t\tresult += \"ctrl+\";\n\t\t}\n\t\tif (chord.shiftKey) {\n\t\t\tresult += \"shift+\";\n\t\t}\n\t\tif (chord.altKey) {\n\t\t\tresult += \"alt+\";\n\t\t}\n\t\tif (chord.metaKey) {\n\t\t\tresult += \"meta+\";\n\t\t}\n\t\tresult += KeyCodeUtils.toString(chord.keyCode);\n\n\t\treturn result;\n\t}\n\n\tprotected _getSingleModifierChordDispatch(\n\t\tkeybinding: KeyCodeChord,\n\t): SingleModifierChord | null {\n\t\tif (\n\t\t\tkeybinding.keyCode === KeyCode.Ctrl &&\n\t\t\t!keybinding.shiftKey &&\n\t\t\t!keybinding.altKey &&\n\t\t\t!keybinding.metaKey\n\t\t) {\n\t\t\treturn \"ctrl\";\n\t\t}\n\t\tif (\n\t\t\tkeybinding.keyCode === KeyCode.Shift &&\n\t\t\t!keybinding.ctrlKey &&\n\t\t\t!keybinding.altKey &&\n\t\t\t!keybinding.metaKey\n\t\t) {\n\t\t\treturn \"shift\";\n\t\t}\n\t\tif (\n\t\t\tkeybinding.keyCode === KeyCode.Alt &&\n\t\t\t!keybinding.ctrlKey &&\n\t\t\t!keybinding.shiftKey &&\n\t\t\t!keybinding.metaKey\n\t\t) {\n\t\t\treturn \"alt\";\n\t\t}\n\t\tif (\n\t\t\tkeybinding.keyCode === KeyCode.Meta &&\n\t\t\t!keybinding.ctrlKey &&\n\t\t\t!keybinding.shiftKey &&\n\t\t\t!keybinding.altKey\n\t\t) {\n\t\t\treturn \"meta\";\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * *NOTE*: Check return value for `KeyCode.Unknown`.\n\t */\n\tprivate static _scanCodeToKeyCode(scanCode: ScanCode): KeyCode {\n\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn immutableKeyCode;\n\t\t}\n\n\t\tswitch (scanCode) {\n\t\t\tcase ScanCode.KeyA:\n\t\t\t\treturn KeyCode.KeyA;\n\t\t\tcase ScanCode.KeyB:\n\t\t\t\treturn KeyCode.KeyB;\n\t\t\tcase ScanCode.KeyC:\n\t\t\t\treturn KeyCode.KeyC;\n\t\t\tcase ScanCode.KeyD:\n\t\t\t\treturn KeyCode.KeyD;\n\t\t\tcase ScanCode.KeyE:\n\t\t\t\treturn KeyCode.KeyE;\n\t\t\tcase ScanCode.KeyF:\n\t\t\t\treturn KeyCode.KeyF;\n\t\t\tcase ScanCode.KeyG:\n\t\t\t\treturn KeyCode.KeyG;\n\t\t\tcase ScanCode.KeyH:\n\t\t\t\treturn KeyCode.KeyH;\n\t\t\tcase ScanCode.KeyI:\n\t\t\t\treturn KeyCode.KeyI;\n\t\t\tcase ScanCode.KeyJ:\n\t\t\t\treturn KeyCode.KeyJ;\n\t\t\tcase ScanCode.KeyK:\n\t\t\t\treturn KeyCode.KeyK;\n\t\t\tcase ScanCode.KeyL:\n\t\t\t\treturn KeyCode.KeyL;\n\t\t\tcase ScanCode.KeyM:\n\t\t\t\treturn KeyCode.KeyM;\n\t\t\tcase ScanCode.KeyN:\n\t\t\t\treturn KeyCode.KeyN;\n\t\t\tcase ScanCode.KeyO:\n\t\t\t\treturn KeyCode.KeyO;\n\t\t\tcase ScanCode.KeyP:\n\t\t\t\treturn KeyCode.KeyP;\n\t\t\tcase ScanCode.KeyQ:\n\t\t\t\treturn KeyCode.KeyQ;\n\t\t\tcase ScanCode.KeyR:\n\t\t\t\treturn KeyCode.KeyR;\n\t\t\tcase ScanCode.KeyS:\n\t\t\t\treturn KeyCode.KeyS;\n\t\t\tcase ScanCode.KeyT:\n\t\t\t\treturn KeyCode.KeyT;\n\t\t\tcase ScanCode.KeyU:\n\t\t\t\treturn KeyCode.KeyU;\n\t\t\tcase ScanCode.KeyV:\n\t\t\t\treturn KeyCode.KeyV;\n\t\t\tcase ScanCode.KeyW:\n\t\t\t\treturn KeyCode.KeyW;\n\t\t\tcase ScanCode.KeyX:\n\t\t\t\treturn KeyCode.KeyX;\n\t\t\tcase ScanCode.KeyY:\n\t\t\t\treturn KeyCode.KeyY;\n\t\t\tcase ScanCode.KeyZ:\n\t\t\t\treturn KeyCode.KeyZ;\n\t\t\tcase ScanCode.Digit1:\n\t\t\t\treturn KeyCode.Digit1;\n\t\t\tcase ScanCode.Digit2:\n\t\t\t\treturn KeyCode.Digit2;\n\t\t\tcase ScanCode.Digit3:\n\t\t\t\treturn KeyCode.Digit3;\n\t\t\tcase ScanCode.Digit4:\n\t\t\t\treturn KeyCode.Digit4;\n\t\t\tcase ScanCode.Digit5:\n\t\t\t\treturn KeyCode.Digit5;\n\t\t\tcase ScanCode.Digit6:\n\t\t\t\treturn KeyCode.Digit6;\n\t\t\tcase ScanCode.Digit7:\n\t\t\t\treturn KeyCode.Digit7;\n\t\t\tcase ScanCode.Digit8:\n\t\t\t\treturn KeyCode.Digit8;\n\t\t\tcase ScanCode.Digit9:\n\t\t\t\treturn KeyCode.Digit9;\n\t\t\tcase ScanCode.Digit0:\n\t\t\t\treturn KeyCode.Digit0;\n\t\t\tcase ScanCode.Minus:\n\t\t\t\treturn KeyCode.Minus;\n\t\t\tcase ScanCode.Equal:\n\t\t\t\treturn KeyCode.Equal;\n\t\t\tcase ScanCode.BracketLeft:\n\t\t\t\treturn KeyCode.BracketLeft;\n\t\t\tcase ScanCode.BracketRight:\n\t\t\t\treturn KeyCode.BracketRight;\n\t\t\tcase ScanCode.Backslash:\n\t\t\t\treturn KeyCode.Backslash;\n\t\t\tcase ScanCode.IntlHash:\n\t\t\t\treturn KeyCode.Unknown; // missing\n\t\t\tcase ScanCode.Semicolon:\n\t\t\t\treturn KeyCode.Semicolon;\n\t\t\tcase ScanCode.Quote:\n\t\t\t\treturn KeyCode.Quote;\n\t\t\tcase ScanCode.Backquote:\n\t\t\t\treturn KeyCode.Backquote;\n\t\t\tcase ScanCode.Comma:\n\t\t\t\treturn KeyCode.Comma;\n\t\t\tcase ScanCode.Period:\n\t\t\t\treturn KeyCode.Period;\n\t\t\tcase ScanCode.Slash:\n\t\t\t\treturn KeyCode.Slash;\n\t\t\tcase ScanCode.IntlBackslash:\n\t\t\t\treturn KeyCode.IntlBackslash;\n\t\t}\n\t\treturn KeyCode.Unknown;\n\t}\n\n\tprivate static _toKeyCodeChord(chord: Chord | null): KeyCodeChord | null {\n\t\tif (!chord) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord instanceof KeyCodeChord) {\n\t\t\treturn chord;\n\t\t}\n\t\tconst keyCode = this._scanCodeToKeyCode(chord.scanCode);\n\t\tif (keyCode === KeyCode.Unknown) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new KeyCodeChord(\n\t\t\tchord.ctrlKey,\n\t\t\tchord.shiftKey,\n\t\t\tchord.altKey,\n\t\t\tchord.metaKey,\n\t\t\tkeyCode,\n\t\t);\n\t}\n\n\tpublic static resolveKeybinding(\n\t\tkeybinding: Keybinding,\n\t\tos: OperatingSystem,\n\t): USLayoutResolvedKeybinding[] {\n\t\tconst chords: KeyCodeChord[] = toEmptyArrayIfContainsNull(\n\t\t\tkeybinding.chords.map((chord) => this._toKeyCodeChord(chord)),\n\t\t);\n\t\tif (chords.length > 0) {\n\t\t\treturn [new USLayoutResolvedKeybinding(chords, os)];\n\t\t}\n\t\treturn [];\n\t}\n}\n"],
  "mappings": "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SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,MAChB,KAAK,SAAS;AACb,eAAO,QAAQ;AAAA,IACjB;AACA,WAAO,QAAQ;AAAA,EAChB;AAAA,EAEA,OAAe,gBAAgB,OAA0C;AACxE,QAAI,CAAC,OAAO;AACX,aAAO;AAAA,IACR;AACA,QAAI,iBAAiB,cAAc;AAClC,aAAO;AAAA,IACR;AACA,UAAM,UAAU,KAAK,mBAAmB,MAAM,QAAQ;AACtD,QAAI,YAAY,QAAQ,SAAS;AAChC,aAAO;AAAA,IACR;AACA,WAAO,IAAI;AAAA,MACV,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN;AAAA,IACD;AAAA,EACD;AAAA,EAEA,OAAc,kBACb,YACA,IAC+B;AAC/B,UAAM,SAAyB;AAAA,MAC9B,WAAW,OAAO,IAAI,CAAC,UAAU,KAAK,gBAAgB,KAAK,CAAC;AAAA,IAC7D;AACA,QAAI,OAAO,SAAS,GAAG;AACtB,aAAO,CAAC,IAAI,2BAA2B,QAAQ,EAAE,CAAC;AAAA,IACnD;AACA,WAAO,CAAC;AAAA,EACT;AACD;",
  "names": []
}
