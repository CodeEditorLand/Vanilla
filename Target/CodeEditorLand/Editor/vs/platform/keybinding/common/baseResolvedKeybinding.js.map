{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/baseResolvedKeybinding.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { illegalArgument } from \"../../../base/common/errors.js\";\nimport {\n\tAriaLabelProvider,\n\tElectronAcceleratorLabelProvider,\n\tUILabelProvider,\n\tUserSettingsLabelProvider,\n} from \"../../../base/common/keybindingLabels.js\";\nimport {\n\ttype Chord,\n\tResolvedChord,\n\tResolvedKeybinding,\n\ttype SingleModifierChord,\n} from \"../../../base/common/keybindings.js\";\nimport type { OperatingSystem } from \"../../../base/common/platform.js\";\n\nexport abstract class BaseResolvedKeybinding<\n\tT extends Chord,\n> extends ResolvedKeybinding {\n\tprotected readonly _os: OperatingSystem;\n\tprotected readonly _chords: readonly T[];\n\n\tconstructor(os: OperatingSystem, chords: readonly T[]) {\n\t\tsuper();\n\t\tif (chords.length === 0) {\n\t\t\tthrow illegalArgument(`chords`);\n\t\t}\n\t\tthis._os = os;\n\t\tthis._chords = chords;\n\t}\n\n\tpublic getLabel(): string | null {\n\t\treturn UILabelProvider.toLabel(this._os, this._chords, (keybinding) =>\n\t\t\tthis._getLabel(keybinding),\n\t\t);\n\t}\n\n\tpublic getAriaLabel(): string | null {\n\t\treturn AriaLabelProvider.toLabel(this._os, this._chords, (keybinding) =>\n\t\t\tthis._getAriaLabel(keybinding),\n\t\t);\n\t}\n\n\tpublic getElectronAccelerator(): string | null {\n\t\tif (this._chords.length > 1) {\n\t\t\t// [Electron Accelerators] Electron cannot handle chords\n\t\t\treturn null;\n\t\t}\n\t\tif (this._chords[0].isDuplicateModifierCase()) {\n\t\t\t// [Electron Accelerators] Electron cannot handle modifier only keybindings\n\t\t\t// e.g. \"shift shift\"\n\t\t\treturn null;\n\t\t}\n\t\treturn ElectronAcceleratorLabelProvider.toLabel(\n\t\t\tthis._os,\n\t\t\tthis._chords,\n\t\t\t(keybinding) => this._getElectronAccelerator(keybinding),\n\t\t);\n\t}\n\n\tpublic getUserSettingsLabel(): string | null {\n\t\treturn UserSettingsLabelProvider.toLabel(\n\t\t\tthis._os,\n\t\t\tthis._chords,\n\t\t\t(keybinding) => this._getUserSettingsLabel(keybinding),\n\t\t);\n\t}\n\n\tpublic isWYSIWYG(): boolean {\n\t\treturn this._chords.every((keybinding) => this._isWYSIWYG(keybinding));\n\t}\n\n\tpublic hasMultipleChords(): boolean {\n\t\treturn this._chords.length > 1;\n\t}\n\n\tpublic getChords(): ResolvedChord[] {\n\t\treturn this._chords.map((keybinding) => this._getChord(keybinding));\n\t}\n\n\tprivate _getChord(keybinding: T): ResolvedChord {\n\t\treturn new ResolvedChord(\n\t\t\tkeybinding.ctrlKey,\n\t\t\tkeybinding.shiftKey,\n\t\t\tkeybinding.altKey,\n\t\t\tkeybinding.metaKey,\n\t\t\tthis._getLabel(keybinding),\n\t\t\tthis._getAriaLabel(keybinding),\n\t\t);\n\t}\n\n\tpublic getDispatchChords(): (string | null)[] {\n\t\treturn this._chords.map((keybinding) =>\n\t\t\tthis._getChordDispatch(keybinding),\n\t\t);\n\t}\n\n\tpublic getSingleModifierDispatchChords(): (SingleModifierChord | null)[] {\n\t\treturn this._chords.map((keybinding) =>\n\t\t\tthis._getSingleModifierChordDispatch(keybinding),\n\t\t);\n\t}\n\n\tprotected abstract _getLabel(keybinding: T): string | null;\n\tprotected abstract _getAriaLabel(keybinding: T): string | null;\n\tprotected abstract _getElectronAccelerator(keybinding: T): string | null;\n\tprotected abstract _getUserSettingsLabel(keybinding: T): string | null;\n\tprotected abstract _isWYSIWYG(keybinding: T): boolean;\n\tprotected abstract _getChordDispatch(keybinding: T): string | null;\n\tprotected abstract _getSingleModifierChordDispatch(\n\t\tkeybinding: T,\n\t): SingleModifierChord | null;\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,OAEM;AAGA,MAAe,+BAEZ,mBAAmB;AAAA,EAtB7B,OAsB6B;AAAA;AAAA;AAAA,EACT;AAAA,EACA;AAAA,EAEnB,YAAY,IAAqB,QAAsB;AACtD,UAAM;AACN,QAAI,OAAO,WAAW,GAAG;AACxB,YAAM,gBAAgB,QAAQ;AAAA,IAC/B;AACA,SAAK,MAAM;AACX,SAAK,UAAU;AAAA,EAChB;AAAA,EAEO,WAA0B;AAChC,WAAO,gBAAgB;AAAA,MAAQ,KAAK;AAAA,MAAK,KAAK;AAAA,MAAS,CAAC,eACvD,KAAK,UAAU,UAAU;AAAA,IAC1B;AAAA,EACD;AAAA,EAEO,eAA8B;AACpC,WAAO,kBAAkB;AAAA,MAAQ,KAAK;AAAA,MAAK,KAAK;AAAA,MAAS,CAAC,eACzD,KAAK,cAAc,UAAU;AAAA,IAC9B;AAAA,EACD;AAAA,EAEO,yBAAwC;AAC9C,QAAI,KAAK,QAAQ,SAAS,GAAG;AAE5B,aAAO;AAAA,IACR;AACA,QAAI,KAAK,QAAQ,CAAC,EAAE,wBAAwB,GAAG;AAG9C,aAAO;AAAA,IACR;AACA,WAAO,iCAAiC;AAAA,MACvC,KAAK;AAAA,MACL,KAAK;AAAA,MACL,CAAC,eAAe,KAAK,wBAAwB,UAAU;AAAA,IACxD;AAAA,EACD;AAAA,EAEO,uBAAsC;AAC5C,WAAO,0BAA0B;AAAA,MAChC,KAAK;AAAA,MACL,KAAK;AAAA,MACL,CAAC,eAAe,KAAK,sBAAsB,UAAU;AAAA,IACtD;AAAA,EACD;AAAA,EAEO,YAAqB;AAC3B,WAAO,KAAK,QAAQ,MAAM,CAAC,eAAe,KAAK,WAAW,UAAU,CAAC;AAAA,EACtE;AAAA,EAEO,oBAA6B;AACnC,WAAO,KAAK,QAAQ,SAAS;AAAA,EAC9B;AAAA,EAEO,YAA6B;AACnC,WAAO,KAAK,QAAQ,IAAI,CAAC,eAAe,KAAK,UAAU,UAAU,CAAC;AAAA,EACnE;AAAA,EAEQ,UAAU,YAA8B;AAC/C,WAAO,IAAI;AAAA,MACV,WAAW;AAAA,MACX,WAAW;AAAA,MACX,WAAW;AAAA,MACX,WAAW;AAAA,MACX,KAAK,UAAU,UAAU;AAAA,MACzB,KAAK,cAAc,UAAU;AAAA,IAC9B;AAAA,EACD;AAAA,EAEO,oBAAuC;AAC7C,WAAO,KAAK,QAAQ;AAAA,MAAI,CAAC,eACxB,KAAK,kBAAkB,UAAU;AAAA,IAClC;AAAA,EACD;AAAA,EAEO,kCAAkE;AACxE,WAAO,KAAK,QAAQ;AAAA,MAAI,CAAC,eACxB,KAAK,gCAAgC,UAAU;AAAA,IAChD;AAAA,EACD;AAWD;",
  "names": []
}
