{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/keybindingsRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype Keybinding,\n\tdecodeKeybinding,\n} from \"../../../base/common/keybindings.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tcombinedDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { LinkedList } from \"../../../base/common/linkedList.js\";\nimport { OS, OperatingSystem } from \"../../../base/common/platform.js\";\nimport {\n\tCommandsRegistry,\n\ttype ICommandHandler,\n\ttype ICommandMetadata,\n} from \"../../commands/common/commands.js\";\nimport type { ContextKeyExpression } from \"../../contextkey/common/contextkey.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\n\nexport interface IKeybindingItem {\n\tkeybinding: Keybinding | null;\n\tcommand: string | null;\n\tcommandArgs?: any;\n\twhen: ContextKeyExpression | null | undefined;\n\tweight1: number;\n\tweight2: number;\n\textensionId: string | null;\n\tisBuiltinExtension: boolean;\n}\n\nexport interface IKeybindings {\n\tprimary?: number;\n\tsecondary?: number[];\n\twin?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n\tlinux?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n\tmac?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n}\n\nexport interface IKeybindingRule extends IKeybindings {\n\tid: string;\n\tweight: number;\n\targs?: any;\n\t/**\n\t * Keybinding is disabled if expression returns false.\n\t */\n\twhen?: ContextKeyExpression | null | undefined;\n}\n\nexport interface IExtensionKeybindingRule {\n\tkeybinding: Keybinding | null;\n\tid: string;\n\targs?: any;\n\tweight: number;\n\twhen: ContextKeyExpression | undefined;\n\textensionId?: string;\n\tisBuiltinExtension?: boolean;\n}\n\nexport enum KeybindingWeight {\n\tEditorCore = 0,\n\tEditorContrib = 100,\n\tWorkbenchContrib = 200,\n\tBuiltinExtension = 300,\n\tExternalExtension = 400,\n}\n\nexport interface ICommandAndKeybindingRule extends IKeybindingRule {\n\thandler: ICommandHandler;\n\tmetadata?: ICommandMetadata | null;\n}\n\nexport interface IKeybindingsRegistry {\n\tregisterKeybindingRule(rule: IKeybindingRule): IDisposable;\n\tsetExtensionKeybindings(rules: IExtensionKeybindingRule[]): void;\n\tregisterCommandAndKeybindingRule(\n\t\tdesc: ICommandAndKeybindingRule,\n\t): IDisposable;\n\tgetDefaultKeybindings(): IKeybindingItem[];\n}\n\n/**\n * Stores all built-in and extension-provided keybindings (but not ones that user defines themselves)\n */\nclass KeybindingsRegistryImpl implements IKeybindingsRegistry {\n\tprivate _coreKeybindings: LinkedList<IKeybindingItem>;\n\tprivate _extensionKeybindings: IKeybindingItem[];\n\tprivate _cachedMergedKeybindings: IKeybindingItem[] | null;\n\n\tconstructor() {\n\t\tthis._coreKeybindings = new LinkedList();\n\t\tthis._extensionKeybindings = [];\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\t/**\n\t * Take current platform into account and reduce to primary & secondary.\n\t */\n\tprivate static bindToCurrentPlatform(kb: IKeybindings): {\n\t\tprimary?: number;\n\t\tsecondary?: number[];\n\t} {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tif (kb && kb.win) {\n\t\t\t\treturn kb.win;\n\t\t\t}\n\t\t} else if (OS === OperatingSystem.Macintosh) {\n\t\t\tif (kb && kb.mac) {\n\t\t\t\treturn kb.mac;\n\t\t\t}\n\t\t} else if (kb && kb.linux) {\n\t\t\treturn kb.linux;\n\t\t}\n\n\t\treturn kb;\n\t}\n\n\tpublic registerKeybindingRule(rule: IKeybindingRule): IDisposable {\n\t\tconst actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\t\tconst result = new DisposableStore();\n\n\t\tif (actualKb && actualKb.primary) {\n\t\t\tconst kk = decodeKeybinding(actualKb.primary, OS);\n\t\t\tif (kk) {\n\t\t\t\tresult.add(\n\t\t\t\t\tthis._registerDefaultKeybinding(\n\t\t\t\t\t\tkk,\n\t\t\t\t\t\trule.id,\n\t\t\t\t\t\trule.args,\n\t\t\t\t\t\trule.weight,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\trule.when,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (actualKb && Array.isArray(actualKb.secondary)) {\n\t\t\tfor (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n\t\t\t\tconst k = actualKb.secondary[i];\n\t\t\t\tconst kk = decodeKeybinding(k, OS);\n\t\t\t\tif (kk) {\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\tthis._registerDefaultKeybinding(\n\t\t\t\t\t\t\tkk,\n\t\t\t\t\t\t\trule.id,\n\t\t\t\t\t\t\trule.args,\n\t\t\t\t\t\t\trule.weight,\n\t\t\t\t\t\t\t-i - 1,\n\t\t\t\t\t\t\trule.when,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic setExtensionKeybindings(rules: IExtensionKeybindingRule[]): void {\n\t\tconst result: IKeybindingItem[] = [];\n\t\tlet keybindingsLen = 0;\n\t\tfor (const rule of rules) {\n\t\t\tif (rule.keybinding) {\n\t\t\t\tresult[keybindingsLen++] = {\n\t\t\t\t\tkeybinding: rule.keybinding,\n\t\t\t\t\tcommand: rule.id,\n\t\t\t\t\tcommandArgs: rule.args,\n\t\t\t\t\twhen: rule.when,\n\t\t\t\t\tweight1: rule.weight,\n\t\t\t\t\tweight2: 0,\n\t\t\t\t\textensionId: rule.extensionId || null,\n\t\t\t\t\tisBuiltinExtension: rule.isBuiltinExtension || false,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis._extensionKeybindings = result;\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\tpublic registerCommandAndKeybindingRule(\n\t\tdesc: ICommandAndKeybindingRule,\n\t): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tthis.registerKeybindingRule(desc),\n\t\t\tCommandsRegistry.registerCommand(desc),\n\t\t);\n\t}\n\n\tprivate _registerDefaultKeybinding(\n\t\tkeybinding: Keybinding,\n\t\tcommandId: string,\n\t\tcommandArgs: any,\n\t\tweight1: number,\n\t\tweight2: number,\n\t\twhen: ContextKeyExpression | null | undefined,\n\t): IDisposable {\n\t\tconst remove = this._coreKeybindings.push({\n\t\t\tkeybinding: keybinding,\n\t\t\tcommand: commandId,\n\t\t\tcommandArgs: commandArgs,\n\t\t\twhen: when,\n\t\t\tweight1: weight1,\n\t\t\tweight2: weight2,\n\t\t\textensionId: null,\n\t\t\tisBuiltinExtension: false,\n\t\t});\n\t\tthis._cachedMergedKeybindings = null;\n\n\t\treturn toDisposable(() => {\n\t\t\tremove();\n\t\t\tthis._cachedMergedKeybindings = null;\n\t\t});\n\t}\n\n\tpublic getDefaultKeybindings(): IKeybindingItem[] {\n\t\tif (!this._cachedMergedKeybindings) {\n\t\t\tthis._cachedMergedKeybindings = Array.from(\n\t\t\t\tthis._coreKeybindings,\n\t\t\t).concat(this._extensionKeybindings);\n\t\t\tthis._cachedMergedKeybindings.sort(sorter);\n\t\t}\n\t\treturn this._cachedMergedKeybindings.slice(0);\n\t}\n}\nexport const KeybindingsRegistry: IKeybindingsRegistry =\n\tnew KeybindingsRegistryImpl();\n\n// Define extension point ids\nexport const Extensions = {\n\tEditorModes: \"platform.keybindingsRegistry\",\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\n\nfunction sorter(a: IKeybindingItem, b: IKeybindingItem): number {\n\tif (a.weight1 !== b.weight1) {\n\t\treturn a.weight1 - b.weight1;\n\t}\n\tif (a.command && b.command) {\n\t\tif (a.command < b.command) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (a.command > b.command) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn a.weight2 - b.weight2;\n}\n"],
  "mappings": "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",
  "names": ["KeybindingWeight"]
}
