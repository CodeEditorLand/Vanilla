{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/abstractKeybindingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tWorkbenchActionExecutedClassification,\n\tWorkbenchActionExecutedEvent,\n} from \"../../../base/common/actions.js\";\nimport * as arrays from \"../../../base/common/arrays.js\";\nimport { IntervalTimer, TimeoutTimer } from \"../../../base/common/async.js\";\nimport { illegalState } from \"../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { IME } from \"../../../base/common/ime.js\";\nimport { KeyCode } from \"../../../base/common/keyCodes.js\";\nimport type {\n\tKeybinding,\n\tResolvedChord,\n\tResolvedKeybinding,\n\tSingleModifierChord,\n} from \"../../../base/common/keybindings.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../nls.js\";\n\nimport type { ICommandService } from \"../../commands/common/commands.js\";\nimport type {\n\tIContextKeyService,\n\tIContextKeyServiceTarget,\n} from \"../../contextkey/common/contextkey.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { INotificationService } from \"../../notification/common/notification.js\";\nimport type { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport type {\n\tIKeybindingService,\n\tIKeyboardEvent,\n\tKeybindingsSchemaContribution,\n} from \"./keybinding.js\";\nimport {\n\ttype KeybindingResolver,\n\tNoMatchingKb,\n\ttype ResolutionResult,\n\tResultKind,\n} from \"./keybindingResolver.js\";\nimport type { ResolvedKeybindingItem } from \"./resolvedKeybindingItem.js\";\n\ninterface CurrentChord {\n\tkeypress: string;\n\tlabel: string | null;\n}\n\nconst HIGH_FREQ_COMMANDS =\n\t/^(cursor|delete|undo|redo|tab|editor\\.action\\.clipboard)/;\n\nexport abstract class AbstractKeybindingService\n\textends Disposable\n\timplements IKeybindingService\n{\n\tpublic _serviceBrand: undefined;\n\n\tprotected readonly _onDidUpdateKeybindings: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tget onDidUpdateKeybindings(): Event<void> {\n\t\treturn this._onDidUpdateKeybindings\n\t\t\t? this._onDidUpdateKeybindings.event\n\t\t\t: Event.None; // Sinon stubbing walks properties on prototype\n\t}\n\n\t/** recently recorded keypresses that can trigger a keybinding;\n\t *\n\t * example: say, there's \"cmd+k cmd+i\" keybinding;\n\t * the user pressed \"cmd+k\" (before they press \"cmd+i\")\n\t * \"cmd+k\" would be stored in this array, when on pressing \"cmd+i\", the service\n\t * would invoke the command bound by the keybinding\n\t */\n\tprivate _currentChords: CurrentChord[];\n\n\tprivate _currentChordChecker: IntervalTimer;\n\tprivate _currentChordStatusMessage: IDisposable | null;\n\tprivate _ignoreSingleModifiers: KeybindingModifierSet;\n\tprivate _currentSingleModifier: SingleModifierChord | null;\n\tprivate _currentSingleModifierClearTimeout: TimeoutTimer;\n\tprotected _currentlyDispatchingCommandId: string | null;\n\n\tprotected _logging: boolean;\n\n\tpublic get inChordMode(): boolean {\n\t\treturn this._currentChords.length > 0;\n\t}\n\n\tconstructor(\n\t\tprivate _contextKeyService: IContextKeyService,\n\t\tprotected _commandService: ICommandService,\n\t\tprotected _telemetryService: ITelemetryService,\n\t\tprivate _notificationService: INotificationService,\n\t\tprotected _logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis._currentChords = [];\n\t\tthis._currentChordChecker = new IntervalTimer();\n\t\tthis._currentChordStatusMessage = null;\n\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\t\tthis._currentSingleModifier = null;\n\t\tthis._currentSingleModifierClearTimeout = new TimeoutTimer();\n\t\tthis._currentlyDispatchingCommandId = null;\n\t\tthis._logging = false;\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprotected abstract _getResolver(): KeybindingResolver;\n\tprotected abstract _documentHasFocus(): boolean;\n\tpublic abstract resolveKeybinding(\n\t\tkeybinding: Keybinding,\n\t): ResolvedKeybinding[];\n\tpublic abstract resolveKeyboardEvent(\n\t\tkeyboardEvent: IKeyboardEvent,\n\t): ResolvedKeybinding;\n\tpublic abstract resolveUserBinding(\n\t\tuserBinding: string,\n\t): ResolvedKeybinding[];\n\tpublic abstract registerSchemaContribution(\n\t\tcontribution: KeybindingsSchemaContribution,\n\t): void;\n\tpublic abstract _dumpDebugInfo(): string;\n\tpublic abstract _dumpDebugInfoJSON(): string;\n\n\tpublic getDefaultKeybindingsContent(): string {\n\t\treturn \"\";\n\t}\n\n\tpublic toggleLogging(): boolean {\n\t\tthis._logging = !this._logging;\n\t\treturn this._logging;\n\t}\n\n\tprotected _log(str: string): void {\n\t\tif (this._logging) {\n\t\t\tthis._logService.info(`[KeybindingService]: ${str}`);\n\t\t}\n\t}\n\n\tpublic getDefaultKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._getResolver().getDefaultKeybindings();\n\t}\n\n\tpublic getKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._getResolver().getKeybindings();\n\t}\n\n\tpublic customKeybindingsCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic lookupKeybindings(commandId: string): ResolvedKeybinding[] {\n\t\treturn arrays.coalesce(\n\t\t\tthis._getResolver()\n\t\t\t\t.lookupKeybindings(commandId)\n\t\t\t\t.map((item) => item.resolvedKeybinding),\n\t\t);\n\t}\n\n\tpublic lookupKeybinding(\n\t\tcommandId: string,\n\t\tcontext?: IContextKeyService,\n\t): ResolvedKeybinding | undefined {\n\t\tconst result = this._getResolver().lookupPrimaryKeybinding(\n\t\t\tcommandId,\n\t\t\tcontext || this._contextKeyService,\n\t\t);\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn result.resolvedKeybinding;\n\t}\n\n\tpublic dispatchEvent(\n\t\te: IKeyboardEvent,\n\t\ttarget: IContextKeyServiceTarget,\n\t): boolean {\n\t\treturn this._dispatch(e, target);\n\t}\n\n\t// TODO@ulugbekna: update namings to align with `_doDispatch`\n\t// TODO@ulugbekna: this fn doesn't seem to take into account single-modifier keybindings, eg `shift shift`\n\tpublic softDispatch(\n\t\te: IKeyboardEvent,\n\t\ttarget: IContextKeyServiceTarget,\n\t): ResolutionResult {\n\t\tthis._log(`/ Soft dispatching keyboard event`);\n\t\tconst keybinding = this.resolveKeyboardEvent(e);\n\t\tif (keybinding.hasMultipleChords()) {\n\t\t\tconsole.warn(\n\t\t\t\t\"keyboard event should not be mapped to multiple chords\",\n\t\t\t);\n\t\t\treturn NoMatchingKb;\n\t\t}\n\t\tconst [firstChord] = keybinding.getDispatchChords();\n\t\tif (firstChord === null) {\n\t\t\t// cannot be dispatched, probably only modifier keys\n\t\t\tthis._log(`\\\\ Keyboard event cannot be dispatched`);\n\t\t\treturn NoMatchingKb;\n\t\t}\n\n\t\tconst contextValue = this._contextKeyService.getContext(target);\n\t\tconst currentChords = this._currentChords.map(\n\t\t\t({ keypress }) => keypress,\n\t\t);\n\t\treturn this._getResolver().resolve(\n\t\t\tcontextValue,\n\t\t\tcurrentChords,\n\t\t\tfirstChord,\n\t\t);\n\t}\n\n\tprivate _scheduleLeaveChordMode(): void {\n\t\tconst chordLastInteractedTime = Date.now();\n\t\tthis._currentChordChecker.cancelAndSet(() => {\n\t\t\tif (!this._documentHasFocus()) {\n\t\t\t\t// Focus has been lost => leave chord mode\n\t\t\t\tthis._leaveChordMode();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Date.now() - chordLastInteractedTime > 5000) {\n\t\t\t\t// 5 seconds elapsed => leave chord mode\n\t\t\t\tthis._leaveChordMode();\n\t\t\t}\n\t\t}, 500);\n\t}\n\n\tprivate _expectAnotherChord(\n\t\tfirstChord: string,\n\t\tkeypressLabel: string | null,\n\t): void {\n\t\tthis._currentChords.push({\n\t\t\tkeypress: firstChord,\n\t\t\tlabel: keypressLabel,\n\t\t});\n\n\t\tswitch (this._currentChords.length) {\n\t\t\tcase 0:\n\t\t\t\tthrow illegalState(\"impossible\");\n\t\t\tcase 1:\n\t\t\t\t// TODO@ulugbekna: revise this message and the one below (at least, fix terminology)\n\t\t\t\tthis._currentChordStatusMessage =\n\t\t\t\t\tthis._notificationService.status(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"first.chord\",\n\t\t\t\t\t\t\t\"({0}) was pressed. Waiting for second key of chord...\",\n\t\t\t\t\t\t\tkeypressLabel,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault: {\n\t\t\t\tconst fullKeypressLabel = this._currentChords\n\t\t\t\t\t.map(({ label }) => label)\n\t\t\t\t\t.join(\", \");\n\t\t\t\tthis._currentChordStatusMessage =\n\t\t\t\t\tthis._notificationService.status(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"next.chord\",\n\t\t\t\t\t\t\t\"({0}) was pressed. Waiting for next key of chord...\",\n\t\t\t\t\t\t\tfullKeypressLabel,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._scheduleLeaveChordMode();\n\n\t\tif (IME.enabled) {\n\t\t\tIME.disable();\n\t\t}\n\t}\n\n\tprivate _leaveChordMode(): void {\n\t\tif (this._currentChordStatusMessage) {\n\t\t\tthis._currentChordStatusMessage.dispose();\n\t\t\tthis._currentChordStatusMessage = null;\n\t\t}\n\t\tthis._currentChordChecker.cancel();\n\t\tthis._currentChords = [];\n\t\tIME.enable();\n\t}\n\n\tpublic dispatchByUserSettingsLabel(\n\t\tuserSettingsLabel: string,\n\t\ttarget: IContextKeyServiceTarget,\n\t): void {\n\t\tthis._log(\n\t\t\t`/ Dispatching keybinding triggered via menu entry accelerator - ${userSettingsLabel}`,\n\t\t);\n\t\tconst keybindings = this.resolveUserBinding(userSettingsLabel);\n\t\tif (keybindings.length === 0) {\n\t\t\tthis._log(`\\\\ Could not resolve - ${userSettingsLabel}`);\n\t\t} else {\n\t\t\tthis._doDispatch(\n\t\t\t\tkeybindings[0],\n\t\t\t\ttarget,\n\t\t\t\t/*isSingleModiferChord*/ false,\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected _dispatch(\n\t\te: IKeyboardEvent,\n\t\ttarget: IContextKeyServiceTarget,\n\t): boolean {\n\t\treturn this._doDispatch(\n\t\t\tthis.resolveKeyboardEvent(e),\n\t\t\ttarget,\n\t\t\t/*isSingleModiferChord*/ false,\n\t\t);\n\t}\n\n\tprotected _singleModifierDispatch(\n\t\te: IKeyboardEvent,\n\t\ttarget: IContextKeyServiceTarget,\n\t): boolean {\n\t\tconst keybinding = this.resolveKeyboardEvent(e);\n\t\tconst [singleModifier] = keybinding.getSingleModifierDispatchChords();\n\n\t\tif (singleModifier) {\n\t\t\tif (this._ignoreSingleModifiers.has(singleModifier)) {\n\t\t\t\tthis._log(\n\t\t\t\t\t`+ Ignoring single modifier ${singleModifier} due to it being pressed together with other keys.`,\n\t\t\t\t);\n\t\t\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\n\t\t\tif (this._currentSingleModifier === null) {\n\t\t\t\t// we have a valid `singleModifier`, store it for the next keyup, but clear it in 300ms\n\t\t\t\tthis._log(\n\t\t\t\t\t`+ Storing single modifier for possible chord ${singleModifier}.`,\n\t\t\t\t);\n\t\t\t\tthis._currentSingleModifier = singleModifier;\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancelAndSet(() => {\n\t\t\t\t\tthis._log(\n\t\t\t\t\t\t`+ Clearing single modifier due to 300ms elapsed.`,\n\t\t\t\t\t);\n\t\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\t}, 300);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (singleModifier === this._currentSingleModifier) {\n\t\t\t\t// bingo!\n\t\t\t\tthis._log(\n\t\t\t\t\t`/ Dispatching single modifier chord ${singleModifier} ${singleModifier}`,\n\t\t\t\t);\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\treturn this._doDispatch(\n\t\t\t\t\tkeybinding,\n\t\t\t\t\ttarget,\n\t\t\t\t\t/*isSingleModiferChord*/ true,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._log(\n\t\t\t\t`+ Clearing single modifier due to modifier mismatch: ${this._currentSingleModifier} ${singleModifier}`,\n\t\t\t);\n\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\tthis._currentSingleModifier = null;\n\t\t\treturn false;\n\t\t}\n\n\t\t// When pressing a modifier and holding it pressed with any other modifier or key combination,\n\t\t// the pressed modifiers should no longer be considered for single modifier dispatch.\n\t\tconst [firstChord] = keybinding.getChords();\n\t\tthis._ignoreSingleModifiers = new KeybindingModifierSet(firstChord);\n\n\t\tif (this._currentSingleModifier !== null) {\n\t\t\tthis._log(`+ Clearing single modifier due to other key up.`);\n\t\t}\n\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\tthis._currentSingleModifier = null;\n\t\treturn false;\n\t}\n\n\tprivate _doDispatch(\n\t\tuserKeypress: ResolvedKeybinding,\n\t\ttarget: IContextKeyServiceTarget,\n\t\tisSingleModiferChord = false,\n\t): boolean {\n\t\tlet shouldPreventDefault = false;\n\n\t\tif (userKeypress.hasMultipleChords()) {\n\t\t\t// warn - because user can press a single chord at a time\n\t\t\tconsole.warn(\"Unexpected keyboard event mapped to multiple chords\");\n\t\t\treturn false;\n\t\t}\n\n\t\tlet userPressedChord: string | null = null;\n\t\tlet currentChords: string[] | null = null;\n\n\t\tif (isSingleModiferChord) {\n\t\t\t// The keybinding is the second keypress of a single modifier chord, e.g. \"shift shift\".\n\t\t\t// A single modifier can only occur when the same modifier is pressed in short sequence,\n\t\t\t// hence we disregard `_currentChord` and use the same modifier instead.\n\t\t\tconst [dispatchKeyname] =\n\t\t\t\tuserKeypress.getSingleModifierDispatchChords();\n\t\t\tuserPressedChord = dispatchKeyname;\n\t\t\tcurrentChords = dispatchKeyname ? [dispatchKeyname] : []; // TODO@ulugbekna: in the `else` case we assign an empty array - make sure `resolve` can handle an empty array well\n\t\t} else {\n\t\t\t[userPressedChord] = userKeypress.getDispatchChords();\n\t\t\tcurrentChords = this._currentChords.map(({ keypress }) => keypress);\n\t\t}\n\n\t\tif (userPressedChord === null) {\n\t\t\tthis._log(\n\t\t\t\t`\\\\ Keyboard event cannot be dispatched in keydown phase.`,\n\t\t\t);\n\t\t\t// cannot be dispatched, probably only modifier keys\n\t\t\treturn shouldPreventDefault;\n\t\t}\n\n\t\tconst contextValue = this._contextKeyService.getContext(target);\n\t\tconst keypressLabel = userKeypress.getLabel();\n\n\t\tconst resolveResult = this._getResolver().resolve(\n\t\t\tcontextValue,\n\t\t\tcurrentChords,\n\t\t\tuserPressedChord,\n\t\t);\n\n\t\tswitch (resolveResult.kind) {\n\t\t\tcase ResultKind.NoMatchingKb: {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"KeybindingService#dispatch\",\n\t\t\t\t\tkeypressLabel,\n\t\t\t\t\t`[ No matching keybinding ]`,\n\t\t\t\t);\n\n\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\tconst currentChordsLabel = this._currentChords\n\t\t\t\t\t\t.map(({ label }) => label)\n\t\t\t\t\t\t.join(\", \");\n\t\t\t\t\tthis._log(\n\t\t\t\t\t\t`+ Leaving multi-chord mode: Nothing bound to \"${currentChordsLabel}, ${keypressLabel}\".`,\n\t\t\t\t\t);\n\t\t\t\t\tthis._notificationService.status(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"missing.chord\",\n\t\t\t\t\t\t\t\"The key combination ({0}, {1}) is not a command.\",\n\t\t\t\t\t\t\tcurrentChordsLabel,\n\t\t\t\t\t\t\tkeypressLabel,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{ hideAfter: 10 * 1000 /* 10s */ },\n\t\t\t\t\t);\n\t\t\t\t\tthis._leaveChordMode();\n\n\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t}\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\n\t\t\tcase ResultKind.MoreChordsNeeded: {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"KeybindingService#dispatch\",\n\t\t\t\t\tkeypressLabel,\n\t\t\t\t\t`[ Several keybindings match - more chords needed ]`,\n\t\t\t\t);\n\n\t\t\t\tshouldPreventDefault = true;\n\t\t\t\tthis._expectAnotherChord(userPressedChord, keypressLabel);\n\t\t\t\tthis._log(\n\t\t\t\t\tthis._currentChords.length === 1\n\t\t\t\t\t\t? `+ Entering multi-chord mode...`\n\t\t\t\t\t\t: `+ Continuing multi-chord mode...`,\n\t\t\t\t);\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\n\t\t\tcase ResultKind.KbFound: {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"KeybindingService#dispatch\",\n\t\t\t\t\tkeypressLabel,\n\t\t\t\t\t`[ Will dispatch command ${resolveResult.commandId} ]`,\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\tresolveResult.commandId === null ||\n\t\t\t\t\tresolveResult.commandId === \"\"\n\t\t\t\t) {\n\t\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\t\tconst currentChordsLabel = this._currentChords\n\t\t\t\t\t\t\t.map(({ label }) => label)\n\t\t\t\t\t\t\t.join(\", \");\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\t`+ Leaving chord mode: Nothing bound to \"${currentChordsLabel}, ${keypressLabel}\".`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._notificationService.status(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"missing.chord\",\n\t\t\t\t\t\t\t\t\"The key combination ({0}, {1}) is not a command.\",\n\t\t\t\t\t\t\t\tcurrentChordsLabel,\n\t\t\t\t\t\t\t\tkeypressLabel,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{ hideAfter: 10 * 1000 /* 10s */ },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._leaveChordMode();\n\t\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\t\tthis._leaveChordMode();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!resolveResult.isBubble) {\n\t\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._log(`+ Invoking command ${resolveResult.commandId}.`);\n\t\t\t\t\tthis._currentlyDispatchingCommandId =\n\t\t\t\t\t\tresolveResult.commandId;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (typeof resolveResult.commandArgs === \"undefined\") {\n\t\t\t\t\t\t\tthis._commandService\n\t\t\t\t\t\t\t\t.executeCommand(resolveResult.commandId)\n\t\t\t\t\t\t\t\t.then(undefined, (err) =>\n\t\t\t\t\t\t\t\t\tthis._notificationService.warn(err),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._commandService\n\t\t\t\t\t\t\t\t.executeCommand(\n\t\t\t\t\t\t\t\t\tresolveResult.commandId,\n\t\t\t\t\t\t\t\t\tresolveResult.commandArgs,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.then(undefined, (err) =>\n\t\t\t\t\t\t\t\t\tthis._notificationService.warn(err),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._currentlyDispatchingCommandId = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!HIGH_FREQ_COMMANDS.test(resolveResult.commandId)) {\n\t\t\t\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\t\t\t\tWorkbenchActionExecutedEvent,\n\t\t\t\t\t\t\tWorkbenchActionExecutedClassification\n\t\t\t\t\t\t>(\"workbenchActionExecuted\", {\n\t\t\t\t\t\t\tid: resolveResult.commandId,\n\t\t\t\t\t\t\tfrom: \"keybinding\",\n\t\t\t\t\t\t\tdetail:\n\t\t\t\t\t\t\t\tuserKeypress.getUserSettingsLabel() ??\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\t\t}\n\t}\n\n\tabstract enableKeybindingHoldMode(\n\t\tcommandId: string,\n\t): Promise<void> | undefined;\n\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean {\n\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t// ignore ctrl/cmd-combination but not shift/alt-combinatios\n\t\t\treturn false;\n\t\t}\n\t\t// weak check for certain ranges. this is properly implemented in a subclass\n\t\t// with access to the KeyboardMapperFactory.\n\t\tif (\n\t\t\t(event.keyCode >= KeyCode.KeyA && event.keyCode <= KeyCode.KeyZ) ||\n\t\t\t(event.keyCode >= KeyCode.Digit0 && event.keyCode <= KeyCode.Digit9)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nclass KeybindingModifierSet {\n\tpublic static EMPTY = new KeybindingModifierSet(null);\n\n\tprivate readonly _ctrlKey: boolean;\n\tprivate readonly _shiftKey: boolean;\n\tprivate readonly _altKey: boolean;\n\tprivate readonly _metaKey: boolean;\n\n\tconstructor(source: ResolvedChord | null) {\n\t\tthis._ctrlKey = source ? source.ctrlKey : false;\n\t\tthis._shiftKey = source ? source.shiftKey : false;\n\t\tthis._altKey = source ? source.altKey : false;\n\t\tthis._metaKey = source ? source.metaKey : false;\n\t}\n\n\thas(modifier: SingleModifierChord) {\n\t\tswitch (modifier) {\n\t\t\tcase \"ctrl\":\n\t\t\t\treturn this._ctrlKey;\n\t\t\tcase \"shift\":\n\t\t\t\treturn this._shiftKey;\n\t\t\tcase \"alt\":\n\t\t\t\treturn this._altKey;\n\t\t\tcase \"meta\":\n\t\t\t\treturn this._metaKey;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
