{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/abstractKeybindingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from '../../../base/common/actions.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { IntervalTimer, TimeoutTimer } from '../../../base/common/async.js';\nimport { illegalState } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IME } from '../../../base/common/ime.js';\nimport { KeyCode } from '../../../base/common/keyCodes.js';\nimport { Keybinding, ResolvedChord, ResolvedKeybinding, SingleModifierChord } from '../../../base/common/keybindings.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport * as nls from '../../../nls.js';\n\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IContextKeyService, IContextKeyServiceTarget } from '../../contextkey/common/contextkey.js';\nimport { IKeybindingService, IKeyboardEvent, KeybindingsSchemaContribution } from './keybinding.js';\nimport { ResolutionResult, KeybindingResolver, ResultKind, NoMatchingKb } from './keybindingResolver.js';\nimport { ResolvedKeybindingItem } from './resolvedKeybindingItem.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n\ninterface CurrentChord {\n\tkeypress: string;\n\tlabel: string | null;\n}\n\nconst HIGH_FREQ_COMMANDS = /^(cursor|delete|undo|redo|tab|editor\\.action\\.clipboard)/;\n\nexport abstract class AbstractKeybindingService extends Disposable implements IKeybindingService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprotected readonly _onDidUpdateKeybindings: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidUpdateKeybindings(): Event<void> {\n\t\treturn this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\n\t}\n\n\t/** recently recorded keypresses that can trigger a keybinding;\n\t *\n\t * example: say, there's \"cmd+k cmd+i\" keybinding;\n\t * the user pressed \"cmd+k\" (before they press \"cmd+i\")\n\t * \"cmd+k\" would be stored in this array, when on pressing \"cmd+i\", the service\n\t * would invoke the command bound by the keybinding\n\t */\n\tprivate _currentChords: CurrentChord[];\n\n\tprivate _currentChordChecker: IntervalTimer;\n\tprivate _currentChordStatusMessage: IDisposable | null;\n\tprivate _ignoreSingleModifiers: KeybindingModifierSet;\n\tprivate _currentSingleModifier: SingleModifierChord | null;\n\tprivate _currentSingleModifierClearTimeout: TimeoutTimer;\n\tprotected _currentlyDispatchingCommandId: string | null;\n\n\tprotected _logging: boolean;\n\n\tpublic get inChordMode(): boolean {\n\t\treturn this._currentChords.length > 0;\n\t}\n\n\tconstructor(\n\t\tprivate _contextKeyService: IContextKeyService,\n\t\tprotected _commandService: ICommandService,\n\t\tprotected _telemetryService: ITelemetryService,\n\t\tprivate _notificationService: INotificationService,\n\t\tprotected _logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis._currentChords = [];\n\t\tthis._currentChordChecker = new IntervalTimer();\n\t\tthis._currentChordStatusMessage = null;\n\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\t\tthis._currentSingleModifier = null;\n\t\tthis._currentSingleModifierClearTimeout = new TimeoutTimer();\n\t\tthis._currentlyDispatchingCommandId = null;\n\t\tthis._logging = false;\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprotected abstract _getResolver(): KeybindingResolver;\n\tprotected abstract _documentHasFocus(): boolean;\n\tpublic abstract resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[];\n\tpublic abstract resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;\n\tpublic abstract resolveUserBinding(userBinding: string): ResolvedKeybinding[];\n\tpublic abstract registerSchemaContribution(contribution: KeybindingsSchemaContribution): void;\n\tpublic abstract _dumpDebugInfo(): string;\n\tpublic abstract _dumpDebugInfoJSON(): string;\n\n\tpublic getDefaultKeybindingsContent(): string {\n\t\treturn '';\n\t}\n\n\tpublic toggleLogging(): boolean {\n\t\tthis._logging = !this._logging;\n\t\treturn this._logging;\n\t}\n\n\tprotected _log(str: string): void {\n\t\tif (this._logging) {\n\t\t\tthis._logService.info(`[KeybindingService]: ${str}`);\n\t\t}\n\t}\n\n\tpublic getDefaultKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._getResolver().getDefaultKeybindings();\n\t}\n\n\tpublic getKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._getResolver().getKeybindings();\n\t}\n\n\tpublic customKeybindingsCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic lookupKeybindings(commandId: string): ResolvedKeybinding[] {\n\t\treturn arrays.coalesce(\n\t\t\tthis._getResolver().lookupKeybindings(commandId).map(item => item.resolvedKeybinding)\n\t\t);\n\t}\n\n\tpublic lookupKeybinding(commandId: string, context?: IContextKeyService): ResolvedKeybinding | undefined {\n\t\tconst result = this._getResolver().lookupPrimaryKeybinding(commandId, context || this._contextKeyService);\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn result.resolvedKeybinding;\n\t}\n\n\tpublic dispatchEvent(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\treturn this._dispatch(e, target);\n\t}\n\n\t// TODO@ulugbekna: update namings to align with `_doDispatch`\n\t// TODO@ulugbekna: this fn doesn't seem to take into account single-modifier keybindings, eg `shift shift`\n\tpublic softDispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): ResolutionResult {\n\t\tthis._log(`/ Soft dispatching keyboard event`);\n\t\tconst keybinding = this.resolveKeyboardEvent(e);\n\t\tif (keybinding.hasMultipleChords()) {\n\t\t\tconsole.warn('keyboard event should not be mapped to multiple chords');\n\t\t\treturn NoMatchingKb;\n\t\t}\n\t\tconst [firstChord,] = keybinding.getDispatchChords();\n\t\tif (firstChord === null) {\n\t\t\t// cannot be dispatched, probably only modifier keys\n\t\t\tthis._log(`\\\\ Keyboard event cannot be dispatched`);\n\t\t\treturn NoMatchingKb;\n\t\t}\n\n\t\tconst contextValue = this._contextKeyService.getContext(target);\n\t\tconst currentChords = this._currentChords.map((({ keypress }) => keypress));\n\t\treturn this._getResolver().resolve(contextValue, currentChords, firstChord);\n\t}\n\n\tprivate _scheduleLeaveChordMode(): void {\n\t\tconst chordLastInteractedTime = Date.now();\n\t\tthis._currentChordChecker.cancelAndSet(() => {\n\n\t\t\tif (!this._documentHasFocus()) {\n\t\t\t\t// Focus has been lost => leave chord mode\n\t\t\t\tthis._leaveChordMode();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Date.now() - chordLastInteractedTime > 5000) {\n\t\t\t\t// 5 seconds elapsed => leave chord mode\n\t\t\t\tthis._leaveChordMode();\n\t\t\t}\n\n\t\t}, 500);\n\t}\n\n\tprivate _expectAnotherChord(firstChord: string, keypressLabel: string | null): void {\n\n\t\tthis._currentChords.push({ keypress: firstChord, label: keypressLabel });\n\n\t\tswitch (this._currentChords.length) {\n\t\t\tcase 0:\n\t\t\t\tthrow illegalState('impossible');\n\t\t\tcase 1:\n\t\t\t\t// TODO@ulugbekna: revise this message and the one below (at least, fix terminology)\n\t\t\t\tthis._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\n\t\t\t\tbreak;\n\t\t\tdefault: {\n\t\t\t\tconst fullKeypressLabel = this._currentChords.map(({ label }) => label).join(', ');\n\t\t\t\tthis._currentChordStatusMessage = this._notificationService.status(nls.localize('next.chord', \"({0}) was pressed. Waiting for next key of chord...\", fullKeypressLabel));\n\t\t\t}\n\t\t}\n\n\t\tthis._scheduleLeaveChordMode();\n\n\t\tif (IME.enabled) {\n\t\t\tIME.disable();\n\t\t}\n\t}\n\n\tprivate _leaveChordMode(): void {\n\t\tif (this._currentChordStatusMessage) {\n\t\t\tthis._currentChordStatusMessage.dispose();\n\t\t\tthis._currentChordStatusMessage = null;\n\t\t}\n\t\tthis._currentChordChecker.cancel();\n\t\tthis._currentChords = [];\n\t\tIME.enable();\n\t}\n\n\tpublic dispatchByUserSettingsLabel(userSettingsLabel: string, target: IContextKeyServiceTarget): void {\n\t\tthis._log(`/ Dispatching keybinding triggered via menu entry accelerator - ${userSettingsLabel}`);\n\t\tconst keybindings = this.resolveUserBinding(userSettingsLabel);\n\t\tif (keybindings.length === 0) {\n\t\t\tthis._log(`\\\\ Could not resolve - ${userSettingsLabel}`);\n\t\t} else {\n\t\t\tthis._doDispatch(keybindings[0], target, /*isSingleModiferChord*/false);\n\t\t}\n\t}\n\n\tprotected _dispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\treturn this._doDispatch(this.resolveKeyboardEvent(e), target, /*isSingleModiferChord*/false);\n\t}\n\n\tprotected _singleModifierDispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\tconst keybinding = this.resolveKeyboardEvent(e);\n\t\tconst [singleModifier,] = keybinding.getSingleModifierDispatchChords();\n\n\t\tif (singleModifier) {\n\n\t\t\tif (this._ignoreSingleModifiers.has(singleModifier)) {\n\t\t\t\tthis._log(`+ Ignoring single modifier ${singleModifier} due to it being pressed together with other keys.`);\n\t\t\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\n\t\t\tif (this._currentSingleModifier === null) {\n\t\t\t\t// we have a valid `singleModifier`, store it for the next keyup, but clear it in 300ms\n\t\t\t\tthis._log(`+ Storing single modifier for possible chord ${singleModifier}.`);\n\t\t\t\tthis._currentSingleModifier = singleModifier;\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancelAndSet(() => {\n\t\t\t\t\tthis._log(`+ Clearing single modifier due to 300ms elapsed.`);\n\t\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\t}, 300);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (singleModifier === this._currentSingleModifier) {\n\t\t\t\t// bingo!\n\t\t\t\tthis._log(`/ Dispatching single modifier chord ${singleModifier} ${singleModifier}`);\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\treturn this._doDispatch(keybinding, target, /*isSingleModiferChord*/true);\n\t\t\t}\n\n\t\t\tthis._log(`+ Clearing single modifier due to modifier mismatch: ${this._currentSingleModifier} ${singleModifier}`);\n\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\tthis._currentSingleModifier = null;\n\t\t\treturn false;\n\t\t}\n\n\t\t// When pressing a modifier and holding it pressed with any other modifier or key combination,\n\t\t// the pressed modifiers should no longer be considered for single modifier dispatch.\n\t\tconst [firstChord,] = keybinding.getChords();\n\t\tthis._ignoreSingleModifiers = new KeybindingModifierSet(firstChord);\n\n\t\tif (this._currentSingleModifier !== null) {\n\t\t\tthis._log(`+ Clearing single modifier due to other key up.`);\n\t\t}\n\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\tthis._currentSingleModifier = null;\n\t\treturn false;\n\t}\n\n\tprivate _doDispatch(userKeypress: ResolvedKeybinding, target: IContextKeyServiceTarget, isSingleModiferChord = false): boolean {\n\t\tlet shouldPreventDefault = false;\n\n\t\tif (userKeypress.hasMultipleChords()) { // warn - because user can press a single chord at a time\n\t\t\tconsole.warn('Unexpected keyboard event mapped to multiple chords');\n\t\t\treturn false;\n\t\t}\n\n\t\tlet userPressedChord: string | null = null;\n\t\tlet currentChords: string[] | null = null;\n\n\t\tif (isSingleModiferChord) {\n\t\t\t// The keybinding is the second keypress of a single modifier chord, e.g. \"shift shift\".\n\t\t\t// A single modifier can only occur when the same modifier is pressed in short sequence,\n\t\t\t// hence we disregard `_currentChord` and use the same modifier instead.\n\t\t\tconst [dispatchKeyname,] = userKeypress.getSingleModifierDispatchChords();\n\t\t\tuserPressedChord = dispatchKeyname;\n\t\t\tcurrentChords = dispatchKeyname ? [dispatchKeyname] : []; // TODO@ulugbekna: in the `else` case we assign an empty array - make sure `resolve` can handle an empty array well\n\t\t} else {\n\t\t\t[userPressedChord,] = userKeypress.getDispatchChords();\n\t\t\tcurrentChords = this._currentChords.map(({ keypress }) => keypress);\n\t\t}\n\n\t\tif (userPressedChord === null) {\n\t\t\tthis._log(`\\\\ Keyboard event cannot be dispatched in keydown phase.`);\n\t\t\t// cannot be dispatched, probably only modifier keys\n\t\t\treturn shouldPreventDefault;\n\t\t}\n\n\t\tconst contextValue = this._contextKeyService.getContext(target);\n\t\tconst keypressLabel = userKeypress.getLabel();\n\n\t\tconst resolveResult = this._getResolver().resolve(contextValue, currentChords, userPressedChord);\n\n\t\tswitch (resolveResult.kind) {\n\n\t\t\tcase ResultKind.NoMatchingKb: {\n\n\t\t\t\tthis._logService.trace('KeybindingService#dispatch', keypressLabel, `[ No matching keybinding ]`);\n\n\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\tconst currentChordsLabel = this._currentChords.map(({ label }) => label).join(', ');\n\t\t\t\t\tthis._log(`+ Leaving multi-chord mode: Nothing bound to \"${currentChordsLabel}, ${keypressLabel}\".`);\n\t\t\t\t\tthis._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", currentChordsLabel, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\n\t\t\t\t\tthis._leaveChordMode();\n\n\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t}\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\n\t\t\tcase ResultKind.MoreChordsNeeded: {\n\n\t\t\t\tthis._logService.trace('KeybindingService#dispatch', keypressLabel, `[ Several keybindings match - more chords needed ]`);\n\n\t\t\t\tshouldPreventDefault = true;\n\t\t\t\tthis._expectAnotherChord(userPressedChord, keypressLabel);\n\t\t\t\tthis._log(this._currentChords.length === 1 ? `+ Entering multi-chord mode...` : `+ Continuing multi-chord mode...`);\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\n\t\t\tcase ResultKind.KbFound: {\n\n\t\t\t\tthis._logService.trace('KeybindingService#dispatch', keypressLabel, `[ Will dispatch command ${resolveResult.commandId} ]`);\n\n\t\t\t\tif (resolveResult.commandId === null || resolveResult.commandId === '') {\n\n\t\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\t\tconst currentChordsLabel = this._currentChords.map(({ label }) => label).join(', ');\n\t\t\t\t\t\tthis._log(`+ Leaving chord mode: Nothing bound to \"${currentChordsLabel}, ${keypressLabel}\".`);\n\t\t\t\t\t\tthis._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", currentChordsLabel, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\n\t\t\t\t\t\tthis._leaveChordMode();\n\t\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\t\tthis._leaveChordMode();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!resolveResult.isBubble) {\n\t\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._log(`+ Invoking command ${resolveResult.commandId}.`);\n\t\t\t\t\tthis._currentlyDispatchingCommandId = resolveResult.commandId;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (typeof resolveResult.commandArgs === 'undefined') {\n\t\t\t\t\t\t\tthis._commandService.executeCommand(resolveResult.commandId).then(undefined, err => this._notificationService.warn(err));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, err => this._notificationService.warn(err));\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._currentlyDispatchingCommandId = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!HIGH_FREQ_COMMANDS.test(resolveResult.commandId)) {\n\t\t\t\t\t\tthis._telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: resolveResult.commandId, from: 'keybinding', detail: userKeypress.getUserSettingsLabel() ?? undefined });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\t\t}\n\t}\n\n\tabstract enableKeybindingHoldMode(commandId: string): Promise<void> | undefined;\n\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean {\n\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t// ignore ctrl/cmd-combination but not shift/alt-combinatios\n\t\t\treturn false;\n\t\t}\n\t\t// weak check for certain ranges. this is properly implemented in a subclass\n\t\t// with access to the KeyboardMapperFactory.\n\t\tif ((event.keyCode >= KeyCode.KeyA && event.keyCode <= KeyCode.KeyZ)\n\t\t\t|| (event.keyCode >= KeyCode.Digit0 && event.keyCode <= KeyCode.Digit9)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nclass KeybindingModifierSet {\n\n\tpublic static EMPTY = new KeybindingModifierSet(null);\n\n\tprivate readonly _ctrlKey: boolean;\n\tprivate readonly _shiftKey: boolean;\n\tprivate readonly _altKey: boolean;\n\tprivate readonly _metaKey: boolean;\n\n\tconstructor(source: ResolvedChord | null) {\n\t\tthis._ctrlKey = source ? source.ctrlKey : false;\n\t\tthis._shiftKey = source ? source.shiftKey : false;\n\t\tthis._altKey = source ? source.altKey : false;\n\t\tthis._metaKey = source ? source.metaKey : false;\n\t}\n\n\thas(modifier: SingleModifierChord) {\n\t\tswitch (modifier) {\n\t\t\tcase 'ctrl': return this._ctrlKey;\n\t\t\tcase 'shift': return this._shiftKey;\n\t\t\tcase 'alt': return this._altKey;\n\t\t\tcase 'meta': return this._metaKey;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
