{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/resolvedKeybindingItem.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../base/common/charCode.js\";\nimport type { ResolvedKeybinding } from \"../../../base/common/keybindings.js\";\nimport type { ContextKeyExpression } from \"../../contextkey/common/contextkey.js\";\n\nexport class ResolvedKeybindingItem {\n\t_resolvedKeybindingItemBrand: void = undefined;\n\n\tpublic readonly resolvedKeybinding: ResolvedKeybinding | undefined;\n\tpublic readonly chords: string[];\n\tpublic readonly bubble: boolean;\n\tpublic readonly command: string | null;\n\tpublic readonly commandArgs: any;\n\tpublic readonly when: ContextKeyExpression | undefined;\n\tpublic readonly isDefault: boolean;\n\tpublic readonly extensionId: string | null;\n\tpublic readonly isBuiltinExtension: boolean;\n\n\tconstructor(\n\t\tresolvedKeybinding: ResolvedKeybinding | undefined,\n\t\tcommand: string | null,\n\t\tcommandArgs: any,\n\t\twhen: ContextKeyExpression | undefined,\n\t\tisDefault: boolean,\n\t\textensionId: string | null,\n\t\tisBuiltinExtension: boolean,\n\t) {\n\t\tthis.resolvedKeybinding = resolvedKeybinding;\n\t\tthis.chords = resolvedKeybinding\n\t\t\t? toEmptyArrayIfContainsNull(resolvedKeybinding.getDispatchChords())\n\t\t\t: [];\n\t\tif (resolvedKeybinding && this.chords.length === 0) {\n\t\t\t// handle possible single modifier chord keybindings\n\t\t\tthis.chords = toEmptyArrayIfContainsNull(\n\t\t\t\tresolvedKeybinding.getSingleModifierDispatchChords(),\n\t\t\t);\n\t\t}\n\t\tthis.bubble = command\n\t\t\t? command.charCodeAt(0) === CharCode.Caret\n\t\t\t: false;\n\t\tthis.command = this.bubble ? command!.substr(1) : command;\n\t\tthis.commandArgs = commandArgs;\n\t\tthis.when = when;\n\t\tthis.isDefault = isDefault;\n\t\tthis.extensionId = extensionId;\n\t\tthis.isBuiltinExtension = isBuiltinExtension;\n\t}\n}\n\nexport function toEmptyArrayIfContainsNull<T>(arr: (T | null)[]): T[] {\n\tconst result: T[] = [];\n\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\tconst element = arr[i];\n\t\tif (!element) {\n\t\t\treturn [];\n\t\t}\n\t\tresult.push(element);\n\t}\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AAIlB,MAAM,uBAAuB;AAAA,EATpC,OASoC;AAAA;AAAA;AAAA,EACnC,+BAAqC;AAAA,EAErB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,YACC,oBACA,SACA,aACA,MACA,WACA,aACA,oBACC;AACD,SAAK,qBAAqB;AAC1B,SAAK,SAAS,qBACX,2BAA2B,mBAAmB,kBAAkB,CAAC,IACjE,CAAC;AACJ,QAAI,sBAAsB,KAAK,OAAO,WAAW,GAAG;AAEnD,WAAK,SAAS;AAAA,QACb,mBAAmB,gCAAgC;AAAA,MACpD;AAAA,IACD;AACA,SAAK,SAAS,UACX,QAAQ,WAAW,CAAC,MAAM,SAAS,QACnC;AACH,SAAK,UAAU,KAAK,SAAS,QAAS,OAAO,CAAC,IAAI;AAClD,SAAK,cAAc;AACnB,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,qBAAqB;AAAA,EAC3B;AACD;AAEO,SAAS,2BAA8B,KAAwB;AACrE,QAAM,SAAc,CAAC;AACrB,WAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC/C,UAAM,UAAU,IAAI,CAAC;AACrB,QAAI,CAAC,SAAS;AACb,aAAO,CAAC;AAAA,IACT;AACA,WAAO,KAAK,OAAO;AAAA,EACpB;AACA,SAAO;AACR;AAVgB;",
  "names": []
}
