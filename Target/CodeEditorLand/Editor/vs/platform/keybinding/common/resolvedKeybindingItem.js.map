{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/resolvedKeybindingItem.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode.js';\nimport { ResolvedKeybinding } from '../../../base/common/keybindings.js';\nimport { ContextKeyExpression } from '../../contextkey/common/contextkey.js';\n\nexport class ResolvedKeybindingItem {\n\t_resolvedKeybindingItemBrand: void = undefined;\n\n\tpublic readonly resolvedKeybinding: ResolvedKeybinding | undefined;\n\tpublic readonly chords: string[];\n\tpublic readonly bubble: boolean;\n\tpublic readonly command: string | null;\n\tpublic readonly commandArgs: any;\n\tpublic readonly when: ContextKeyExpression | undefined;\n\tpublic readonly isDefault: boolean;\n\tpublic readonly extensionId: string | null;\n\tpublic readonly isBuiltinExtension: boolean;\n\n\tconstructor(resolvedKeybinding: ResolvedKeybinding | undefined, command: string | null, commandArgs: any, when: ContextKeyExpression | undefined, isDefault: boolean, extensionId: string | null, isBuiltinExtension: boolean) {\n\t\tthis.resolvedKeybinding = resolvedKeybinding;\n\t\tthis.chords = resolvedKeybinding ? toEmptyArrayIfContainsNull(resolvedKeybinding.getDispatchChords()) : [];\n\t\tif (resolvedKeybinding && this.chords.length === 0) {\n\t\t\t// handle possible single modifier chord keybindings\n\t\t\tthis.chords = toEmptyArrayIfContainsNull(resolvedKeybinding.getSingleModifierDispatchChords());\n\t\t}\n\t\tthis.bubble = (command ? command.charCodeAt(0) === CharCode.Caret : false);\n\t\tthis.command = this.bubble ? command!.substr(1) : command;\n\t\tthis.commandArgs = commandArgs;\n\t\tthis.when = when;\n\t\tthis.isDefault = isDefault;\n\t\tthis.extensionId = extensionId;\n\t\tthis.isBuiltinExtension = isBuiltinExtension;\n\t}\n}\n\nexport function toEmptyArrayIfContainsNull<T>(arr: (T | null)[]): T[] {\n\tconst result: T[] = [];\n\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\tconst element = arr[i];\n\t\tif (!element) {\n\t\t\treturn [];\n\t\t}\n\t\tresult.push(element);\n\t}\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AAE9B,MAAM,uBAAuB;AAAA,EATpC,OASoC;AAAA;AAAA;AAAA,EACnC,+BAAqC;AAAA,EAErB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEhB,YAAY,oBAAoD,SAAwB,aAAkB,MAAwC,WAAoB,aAA4B,oBAA6B;AAC9N,SAAK,qBAAqB;AAC1B,SAAK,SAAS,qBAAqB,2BAA2B,mBAAmB,kBAAkB,CAAC,IAAI,CAAC;AACzG,QAAI,sBAAsB,KAAK,OAAO,WAAW,GAAG;AAEnD,WAAK,SAAS,2BAA2B,mBAAmB,gCAAgC,CAAC;AAAA,IAC9F;AACA,SAAK,SAAU,UAAU,QAAQ,WAAW,CAAC,MAAM,SAAS,QAAQ;AACpE,SAAK,UAAU,KAAK,SAAS,QAAS,OAAO,CAAC,IAAI;AAClD,SAAK,cAAc;AACnB,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,qBAAqB;AAAA,EAC3B;AACD;AAEO,SAAS,2BAA8B,KAAwB;AACrE,QAAM,SAAc,CAAC;AACrB,WAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC/C,UAAM,UAAU,IAAI,CAAC;AACrB,QAAI,CAAC,SAAS;AACb,aAAO,CAAC;AAAA,IACT;AACA,WAAO,KAAK,OAAO;AAAA,EACpB;AACA,SAAO;AACR;AAVgB;",
  "names": []
}
