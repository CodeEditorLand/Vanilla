{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/common/keybinding.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { IJSONSchema } from '../../../base/common/jsonSchema.js';\nimport { KeyCode } from '../../../base/common/keyCodes.js';\nimport { ResolvedKeybinding, Keybinding } from '../../../base/common/keybindings.js';\nimport { IContextKeyService, IContextKeyServiceTarget } from '../../contextkey/common/contextkey.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ResolutionResult } from './keybindingResolver.js';\nimport { ResolvedKeybindingItem } from './resolvedKeybindingItem.js';\n\nexport interface IUserFriendlyKeybinding {\n\tkey: string;\n\tcommand: string;\n\targs?: any;\n\twhen?: string;\n}\n\nexport interface IKeyboardEvent {\n\treadonly _standardKeyboardEventBrand: true;\n\n\treadonly ctrlKey: boolean;\n\treadonly shiftKey: boolean;\n\treadonly altKey: boolean;\n\treadonly metaKey: boolean;\n\treadonly altGraphKey: boolean;\n\treadonly keyCode: KeyCode;\n\treadonly code: string;\n}\n\nexport interface KeybindingsSchemaContribution {\n\treadonly onDidChange?: Event<void>;\n\n\tgetSchemaAdditions(): IJSONSchema[];\n}\n\nexport const IKeybindingService = createDecorator<IKeybindingService>('keybindingService');\n\nexport interface IKeybindingService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly inChordMode: boolean;\n\n\tonDidUpdateKeybindings: Event<void>;\n\n\t/**\n\t * Returns none, one or many (depending on keyboard layout)!\n\t */\n\tresolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[];\n\n\tresolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;\n\n\tresolveUserBinding(userBinding: string): ResolvedKeybinding[];\n\n\t/**\n\t * Resolve and dispatch `keyboardEvent` and invoke the command.\n\t */\n\tdispatchEvent(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean;\n\n\t/**\n\t * Resolve and dispatch `keyboardEvent`, but do not invoke the command or change inner state.\n\t */\n\tsoftDispatch(keyboardEvent: IKeyboardEvent, target: IContextKeyServiceTarget): ResolutionResult;\n\n\t/**\n\t * Enable hold mode for this command. This is only possible if the command is current being dispatched, meaning\n\t * we are after its keydown and before is keyup event.\n\t *\n\t * @returns A promise that resolves when hold stops, returns undefined if hold mode could not be enabled.\n\t */\n\tenableKeybindingHoldMode(commandId: string): Promise<void> | undefined;\n\n\tdispatchByUserSettingsLabel(userSettingsLabel: string, target: IContextKeyServiceTarget): void;\n\n\t/**\n\t * Look up keybindings for a command.\n\t * Use `lookupKeybinding` if you are interested in the preferred keybinding.\n\t */\n\tlookupKeybindings(commandId: string): ResolvedKeybinding[];\n\n\t/**\n\t * Look up the preferred (last defined) keybinding for a command.\n\t * @returns The preferred keybinding or null if the command is not bound.\n\t */\n\tlookupKeybinding(commandId: string, context?: IContextKeyService): ResolvedKeybinding | undefined;\n\n\tgetDefaultKeybindingsContent(): string;\n\n\tgetDefaultKeybindings(): readonly ResolvedKeybindingItem[];\n\n\tgetKeybindings(): readonly ResolvedKeybindingItem[];\n\n\tcustomKeybindingsCount(): number;\n\n\t/**\n\t * Will the given key event produce a character that's rendered on screen, e.g. in a\n\t * text box. *Note* that the results of this function can be incorrect.\n\t */\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean;\n\n\tregisterSchemaContribution(contribution: KeybindingsSchemaContribution): void;\n\n\ttoggleLogging(): boolean;\n\n\t_dumpDebugInfo(): string;\n\t_dumpDebugInfoJSON(): string;\n}\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AACxB,SAAS,oBAAoB,kBAAkB;AAC/C,SAAS,oBAAoB,gCAAgC;AAC7D,SAAS,uBAAuB;AAChC,SAAS,wBAAwB;AACjC,SAAS,8BAA8B;AA2BhC,MAAM,qBAAqB,gBAAoC,mBAAmB;",
  "names": []
}
