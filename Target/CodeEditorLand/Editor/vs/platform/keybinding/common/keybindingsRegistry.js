import{decodeKeybinding as g}from"../../../base/common/keybindings.js";import{DisposableStore as l,combinedDisposable as u,toDisposable as b}from"../../../base/common/lifecycle.js";import{LinkedList as c}from"../../../base/common/linkedList.js";import{OS as o,OperatingSystem as y}from"../../../base/common/platform.js";import{CommandsRegistry as K}from"../../commands/common/commands.js";import{Registry as p}from"../../registry/common/platform.js";var x=(i=>(i[i.EditorCore=0]="EditorCore",i[i.EditorContrib=100]="EditorContrib",i[i.WorkbenchContrib=200]="WorkbenchContrib",i[i.BuiltinExtension=300]="BuiltinExtension",i[i.ExternalExtension=400]="ExternalExtension",i))(x||{});class m{_coreKeybindings;_extensionKeybindings;_cachedMergedKeybindings;constructor(){this._coreKeybindings=new c,this._extensionKeybindings=[],this._cachedMergedKeybindings=null}static bindToCurrentPlatform(e){if(o===y.Windows){if(e&&e.win)return e.win}else if(o===y.Macintosh){if(e&&e.mac)return e.mac}else if(e&&e.linux)return e.linux;return e}registerKeybindingRule(e){const t=m.bindToCurrentPlatform(e),r=new l;if(t&&t.primary){const n=g(t.primary,o);n&&r.add(this._registerDefaultKeybinding(n,e.id,e.args,e.weight,0,e.when))}if(t&&Array.isArray(t.secondary))for(let n=0,i=t.secondary.length;n<i;n++){const a=t.secondary[n],d=g(a,o);d&&r.add(this._registerDefaultKeybinding(d,e.id,e.args,e.weight,-n-1,e.when))}return r}setExtensionKeybindings(e){const t=[];let r=0;for(const n of e)n.keybinding&&(t[r++]={keybinding:n.keybinding,command:n.id,commandArgs:n.args,when:n.when,weight1:n.weight,weight2:0,extensionId:n.extensionId||null,isBuiltinExtension:n.isBuiltinExtension||!1});this._extensionKeybindings=t,this._cachedMergedKeybindings=null}registerCommandAndKeybindingRule(e){return u(this.registerKeybindingRule(e),K.registerCommand(e))}_registerDefaultKeybinding(e,t,r,n,i,a){const d=this._coreKeybindings.push({keybinding:e,command:t,commandArgs:r,when:a,weight1:n,weight2:i,extensionId:null,isBuiltinExtension:!1});return this._cachedMergedKeybindings=null,b(()=>{d(),this._cachedMergedKeybindings=null})}getDefaultKeybindings(){return this._cachedMergedKeybindings||(this._cachedMergedKeybindings=Array.from(this._coreKeybindings).concat(this._extensionKeybindings),this._cachedMergedKeybindings.sort(h)),this._cachedMergedKeybindings.slice(0)}}const I=new m,f={EditorModes:"platform.keybindingsRegistry"};p.add(f.EditorModes,I);function h(s,e){if(s.weight1!==e.weight1)return s.weight1-e.weight1;if(s.command&&e.command){if(s.command<e.command)return-1;if(s.command>e.command)return 1}return s.weight2-e.weight2}export{f as Extensions,x as KeybindingWeight,I as KeybindingsRegistry};
