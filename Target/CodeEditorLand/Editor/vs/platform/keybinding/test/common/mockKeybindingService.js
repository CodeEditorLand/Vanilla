import{Event as r}from"../../../../base/common/event.js";import{KeyCodeChord as d}from"../../../../base/common/keybindings.js";import{OS as u}from"../../../../base/common/platform.js";import"../../../contextkey/common/contextkey.js";import"../../common/keybinding.js";import{NoMatchingKb as l}from"../../common/keybindingResolver.js";import"../../common/resolvedKeybindingItem.js";import{USLayoutResolvedKeybinding as s}from"../../common/usLayoutResolvedKeybinding.js";class c{_defaultValue;_value;constructor(e){this._defaultValue=e,this._value=this._defaultValue}set(e){this._value=e}reset(){this._value=this._defaultValue}get(){return this._value}}class a{_serviceBrand;_keys=new Map;dispose(){}createKey(e,n){const i=new c(n);return this._keys.set(e,i),i}contextMatchesRules(e){return!1}get onDidChangeContext(){return r.None}bufferChangeEvents(e){e()}getContextKeyValue(e){const n=this._keys.get(e);if(n)return n.get()}getContext(e){return null}createScoped(e){return this}createOverlay(){return this}updateParent(e){}}class o extends a{createScoped(e){return new o}}class N{_serviceBrand;inChordMode=!1;get onDidUpdateKeybindings(){return r.None}getDefaultKeybindingsContent(){return""}getDefaultKeybindings(){return[]}getKeybindings(){return[]}resolveKeybinding(e){return s.resolveKeybinding(e,u)}resolveKeyboardEvent(e){const n=new d(e.ctrlKey,e.shiftKey,e.altKey,e.metaKey,e.keyCode);return this.resolveKeybinding(n.toKeybinding())[0]}resolveUserBinding(e){return[]}lookupKeybindings(e){return[]}lookupKeybinding(e){}customKeybindingsCount(){return 0}softDispatch(e,n){return l}dispatchByUserSettingsLabel(e,n){}dispatchEvent(e,n){return!1}enableKeybindingHoldMode(e){}mightProducePrintableCharacter(e){return!1}toggleLogging(){return!1}_dumpDebugInfo(){return""}_dumpDebugInfoJSON(){return""}registerSchemaContribution(){}}export{a as MockContextKeyService,N as MockKeybindingService,o as MockScopableContextKeyService};
