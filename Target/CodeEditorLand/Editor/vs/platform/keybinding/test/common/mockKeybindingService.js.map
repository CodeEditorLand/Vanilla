{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/test/common/mockKeybindingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { ResolvedKeybinding, KeyCodeChord, Keybinding } from '../../../../base/common/keybindings.js';\nimport { OS } from '../../../../base/common/platform.js';\nimport { ContextKeyExpression, ContextKeyValue, IContextKey, IContextKeyChangeEvent, IContextKeyService, IContextKeyServiceTarget, IScopedContextKeyService } from '../../../contextkey/common/contextkey.js';\nimport { IKeybindingService, IKeyboardEvent } from '../../common/keybinding.js';\nimport { NoMatchingKb, ResolutionResult } from '../../common/keybindingResolver.js';\nimport { ResolvedKeybindingItem } from '../../common/resolvedKeybindingItem.js';\nimport { USLayoutResolvedKeybinding } from '../../common/usLayoutResolvedKeybinding.js';\n\nclass MockKeybindingContextKey<T extends ContextKeyValue = ContextKeyValue> implements IContextKey<T> {\n\tprivate _defaultValue: T | undefined;\n\tprivate _value: T | undefined;\n\n\tconstructor(defaultValue: T | undefined) {\n\t\tthis._defaultValue = defaultValue;\n\t\tthis._value = this._defaultValue;\n\t}\n\n\tpublic set(value: T | undefined): void {\n\t\tthis._value = value;\n\t}\n\n\tpublic reset(): void {\n\t\tthis._value = this._defaultValue;\n\t}\n\n\tpublic get(): T | undefined {\n\t\treturn this._value;\n\t}\n}\n\nexport class MockContextKeyService implements IContextKeyService {\n\n\tpublic _serviceBrand: undefined;\n\tprivate _keys = new Map<string, IContextKey<any>>();\n\n\tpublic dispose(): void {\n\t\t//\n\t}\n\tpublic createKey<T extends ContextKeyValue = ContextKeyValue>(key: string, defaultValue: T | undefined): IContextKey<T> {\n\t\tconst ret = new MockKeybindingContextKey(defaultValue);\n\t\tthis._keys.set(key, ret);\n\t\treturn ret;\n\t}\n\tpublic contextMatchesRules(rules: ContextKeyExpression): boolean {\n\t\treturn false;\n\t}\n\tpublic get onDidChangeContext(): Event<IContextKeyChangeEvent> {\n\t\treturn Event.None;\n\t}\n\tpublic bufferChangeEvents(callback: () => void) { callback(); }\n\tpublic getContextKeyValue(key: string) {\n\t\tconst value = this._keys.get(key);\n\t\tif (value) {\n\t\t\treturn value.get();\n\t\t}\n\t}\n\tpublic getContext(domNode: HTMLElement): any {\n\t\treturn null;\n\t}\n\tpublic createScoped(domNode: HTMLElement): IScopedContextKeyService {\n\t\treturn this;\n\t}\n\tpublic createOverlay(): IContextKeyService {\n\t\treturn this;\n\t}\n\tupdateParent(_parentContextKeyService: IContextKeyService): void {\n\t\t// no-op\n\t}\n}\n\nexport class MockScopableContextKeyService extends MockContextKeyService {\n\t/**\n\t * Don't implement this for all tests since we rarely depend on this behavior and it isn't implemented fully\n\t */\n\tpublic override createScoped(domNote: HTMLElement): IScopedContextKeyService {\n\t\treturn new MockScopableContextKeyService();\n\t}\n}\n\nexport class MockKeybindingService implements IKeybindingService {\n\tpublic _serviceBrand: undefined;\n\n\tpublic readonly inChordMode: boolean = false;\n\n\tpublic get onDidUpdateKeybindings(): Event<void> {\n\t\treturn Event.None;\n\t}\n\n\tpublic getDefaultKeybindingsContent(): string {\n\t\treturn '';\n\t}\n\n\tpublic getDefaultKeybindings(): ResolvedKeybindingItem[] {\n\t\treturn [];\n\t}\n\n\tpublic getKeybindings(): ResolvedKeybindingItem[] {\n\t\treturn [];\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[] {\n\t\treturn USLayoutResolvedKeybinding.resolveKeybinding(keybinding, OS);\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding {\n\t\tconst chord = new KeyCodeChord(\n\t\t\tkeyboardEvent.ctrlKey,\n\t\t\tkeyboardEvent.shiftKey,\n\t\t\tkeyboardEvent.altKey,\n\t\t\tkeyboardEvent.metaKey,\n\t\t\tkeyboardEvent.keyCode\n\t\t);\n\t\treturn this.resolveKeybinding(chord.toKeybinding())[0];\n\t}\n\n\tpublic resolveUserBinding(userBinding: string): ResolvedKeybinding[] {\n\t\treturn [];\n\t}\n\n\tpublic lookupKeybindings(commandId: string): ResolvedKeybinding[] {\n\t\treturn [];\n\t}\n\n\tpublic lookupKeybinding(commandId: string): ResolvedKeybinding | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic customKeybindingsCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic softDispatch(keybinding: IKeyboardEvent, target: IContextKeyServiceTarget): ResolutionResult {\n\t\treturn NoMatchingKb;\n\t}\n\n\tpublic dispatchByUserSettingsLabel(userSettingsLabel: string, target: IContextKeyServiceTarget): void {\n\n\t}\n\n\tpublic dispatchEvent(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\treturn false;\n\t}\n\n\tpublic enableKeybindingHoldMode(commandId: string): undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic mightProducePrintableCharacter(e: IKeyboardEvent): boolean {\n\t\treturn false;\n\t}\n\n\tpublic toggleLogging(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic _dumpDebugInfo(): string {\n\t\treturn '';\n\t}\n\n\tpublic _dumpDebugInfoJSON(): string {\n\t\treturn '';\n\t}\n\n\tpublic registerSchemaContribution() {\n\t\t// noop\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
