{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/test/common/keybindingLabels.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { OperatingSystem } from '../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { createUSLayoutResolvedKeybinding } from './keybindingsTestUtils.js';\n\nsuite('KeybindingLabels', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertUSLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\tconst usResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\tassert.strictEqual(usResolvedKeybinding.getLabel(), expected);\n\t}\n\n\ttest('Windows US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Windows, KeyCode.KeyA, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyCode.KeyA, 'Ctrl+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyCode.KeyA, 'Shift+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Alt | KeyCode.KeyA, 'Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.WinCtrl | KeyCode.KeyA, 'Windows+A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA, 'Ctrl+Shift+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyA, 'Ctrl+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'Shift+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Alt+Windows+A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'Ctrl+Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Alt+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Shift+Alt+Windows+A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Windows+A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'Ctrl+A Ctrl+B');\n\t});\n\n\ttest('Linux US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Linux, KeyCode.KeyA, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyCode.KeyA, 'Ctrl+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyCode.KeyA, 'Shift+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Alt | KeyCode.KeyA, 'Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.WinCtrl | KeyCode.KeyA, 'Super+A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA, 'Ctrl+Shift+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyA, 'Ctrl+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'Shift+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Alt+Super+A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'Ctrl+Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Alt+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Shift+Alt+Super+A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Super+A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'Ctrl+A Ctrl+B');\n\t});\n\n\ttest('Mac US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.KeyA, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyCode.KeyA, '\u2318A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyCode.KeyA, '\u21E7A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Alt | KeyCode.KeyA, '\u2325A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.WinCtrl | KeyCode.KeyA, '\u2303A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA, '\u21E7\u2318A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyA, '\u2325\u2318A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyA, '\u2303\u2318A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, '\u21E7\u2325A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, '\u2303\u21E7A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, '\u2303\u2325A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, '\u21E7\u2325\u2318A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, '\u2303\u21E7\u2318A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, '\u2303\u2325\u2318A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, '\u2303\u21E7\u2325A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, '\u2303\u21E7\u2325\u2318A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), '\u2318A \u2318B');\n\n\t\t// special keys\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.LeftArrow, '\u2190');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.UpArrow, '\u2191');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.RightArrow, '\u2192');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.DownArrow, '\u2193');\n\t});\n\n\ttest('Aria label', () => {\n\t\tfunction assertAriaLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\t\tconst usResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\t\tassert.strictEqual(usResolvedKeybinding.getAriaLabel(), expected);\n\t\t}\n\n\t\tassertAriaLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Control+Shift+Alt+Windows+A');\n\t\tassertAriaLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Control+Shift+Alt+Super+A');\n\t\tassertAriaLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Control+Shift+Option+Command+A');\n\t});\n\n\ttest('Electron Accelerator label', () => {\n\t\tfunction assertElectronAcceleratorLabel(OS: OperatingSystem, keybinding: number, expected: string | null): void {\n\t\t\tconst usResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\t\tassert.strictEqual(usResolvedKeybinding.getElectronAccelerator(), expected);\n\t\t}\n\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Super+A');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Super+A');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Cmd+A');\n\n\t\t// electron cannot handle chords\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), null);\n\n\t\t// electron cannot handle numpad keys\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyCode.Numpad1, null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyCode.Numpad1, null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.Numpad1, null);\n\n\t\t// special\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.LeftArrow, 'Left');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.UpArrow, 'Up');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.RightArrow, 'Right');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.DownArrow, 'Down');\n\t});\n\n\ttest('User Settings label', () => {\n\t\tfunction assertElectronAcceleratorLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\t\tconst usResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\t\tassert.strictEqual(usResolvedKeybinding.getUserSettingsLabel(), expected);\n\t\t}\n\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+shift+alt+win+a');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+shift+alt+meta+a');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+shift+alt+cmd+a');\n\n\t\t// electron cannot handle chords\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'ctrl+a ctrl+b');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'ctrl+a ctrl+b');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'cmd+a cmd+b');\n\t});\n\n\ttest('issue #91235: Do not end with a +', () => {\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Alt, 'Ctrl+Alt');\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
