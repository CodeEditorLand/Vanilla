{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keybinding/test/common/abstractKeybindingService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { createSimpleKeybinding, ResolvedKeybinding, KeyCodeChord, Keybinding } from '../../../../base/common/keybindings.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { OS } from '../../../../base/common/platform.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ICommandService } from '../../../commands/common/commands.js';\nimport { ContextKeyExpr, ContextKeyExpression, IContext, IContextKeyService, IContextKeyServiceTarget } from '../../../contextkey/common/contextkey.js';\nimport { AbstractKeybindingService } from '../../common/abstractKeybindingService.js';\nimport { IKeyboardEvent } from '../../common/keybinding.js';\nimport { KeybindingResolver } from '../../common/keybindingResolver.js';\nimport { ResolvedKeybindingItem } from '../../common/resolvedKeybindingItem.js';\nimport { USLayoutResolvedKeybinding } from '../../common/usLayoutResolvedKeybinding.js';\nimport { createUSLayoutResolvedKeybinding } from './keybindingsTestUtils.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { INotification, INotificationService, IPromptChoice, IPromptOptions, IStatusMessageOptions, NoOpNotification } from '../../../notification/common/notification.js';\nimport { NullTelemetryService } from '../../../telemetry/common/telemetryUtils.js';\n\nfunction createContext(ctx: any) {\n\treturn {\n\t\tgetValue: (key: string) => {\n\t\t\treturn ctx[key];\n\t\t}\n\t};\n}\n\nsuite('AbstractKeybindingService', () => {\n\n\tclass TestKeybindingService extends AbstractKeybindingService {\n\t\tprivate _resolver: KeybindingResolver;\n\n\t\tconstructor(\n\t\t\tresolver: KeybindingResolver,\n\t\t\tcontextKeyService: IContextKeyService,\n\t\t\tcommandService: ICommandService,\n\t\t\tnotificationService: INotificationService\n\t\t) {\n\t\t\tsuper(contextKeyService, commandService, NullTelemetryService, notificationService, new NullLogService());\n\t\t\tthis._resolver = resolver;\n\t\t}\n\n\t\tprotected _getResolver(): KeybindingResolver {\n\t\t\treturn this._resolver;\n\t\t}\n\n\t\tprotected _documentHasFocus(): boolean {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic resolveKeybinding(kb: Keybinding): ResolvedKeybinding[] {\n\t\t\treturn USLayoutResolvedKeybinding.resolveKeybinding(kb, OS);\n\t\t}\n\n\t\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding {\n\t\t\tconst chord = new KeyCodeChord(\n\t\t\t\tkeyboardEvent.ctrlKey,\n\t\t\t\tkeyboardEvent.shiftKey,\n\t\t\t\tkeyboardEvent.altKey,\n\t\t\t\tkeyboardEvent.metaKey,\n\t\t\t\tkeyboardEvent.keyCode\n\t\t\t).toKeybinding();\n\t\t\treturn this.resolveKeybinding(chord)[0];\n\t\t}\n\n\t\tpublic resolveUserBinding(userBinding: string): ResolvedKeybinding[] {\n\t\t\treturn [];\n\t\t}\n\n\t\tpublic testDispatch(kb: number): boolean {\n\t\t\tconst keybinding = createSimpleKeybinding(kb, OS);\n\t\t\treturn this._dispatch({\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: keybinding.ctrlKey,\n\t\t\t\tshiftKey: keybinding.shiftKey,\n\t\t\t\taltKey: keybinding.altKey,\n\t\t\t\tmetaKey: keybinding.metaKey,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: keybinding.keyCode,\n\t\t\t\tcode: null!\n\t\t\t}, null!);\n\t\t}\n\n\t\tpublic _dumpDebugInfo(): string {\n\t\t\treturn '';\n\t\t}\n\n\t\tpublic _dumpDebugInfoJSON(): string {\n\t\t\treturn '';\n\t\t}\n\n\t\tpublic registerSchemaContribution() {\n\t\t\t// noop\n\t\t}\n\n\t\tpublic enableKeybindingHoldMode() {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tlet createTestKeybindingService: (items: ResolvedKeybindingItem[], contextValue?: any) => TestKeybindingService = null!;\n\tlet currentContextValue: IContext | null = null;\n\tlet executeCommandCalls: { commandId: string; args: any[] }[] = null!;\n\tlet showMessageCalls: { sev: Severity; message: any }[] = null!;\n\tlet statusMessageCalls: string[] | null = null;\n\tlet statusMessageCallsDisposed: string[] | null = null;\n\n\n\tteardown(() => {\n\t\tcurrentContextValue = null;\n\t\texecuteCommandCalls = null!;\n\t\tshowMessageCalls = null!;\n\t\tcreateTestKeybindingService = null!;\n\t\tstatusMessageCalls = null;\n\t\tstatusMessageCallsDisposed = null;\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tcreateTestKeybindingService = (items: ResolvedKeybindingItem[]): TestKeybindingService => {\n\n\t\t\tconst contextKeyService: IContextKeyService = {\n\t\t\t\t_serviceBrand: undefined,\n\t\t\t\tonDidChangeContext: undefined!,\n\t\t\t\tbufferChangeEvents() { },\n\t\t\t\tcreateKey: undefined!,\n\t\t\t\tcontextMatchesRules: undefined!,\n\t\t\t\tgetContextKeyValue: undefined!,\n\t\t\t\tcreateScoped: undefined!,\n\t\t\t\tcreateOverlay: undefined!,\n\t\t\t\tgetContext: (target: IContextKeyServiceTarget): any => {\n\t\t\t\t\treturn currentContextValue;\n\t\t\t\t},\n\t\t\t\tupdateParent: () => { }\n\t\t\t};\n\n\t\t\tconst commandService: ICommandService = {\n\t\t\t\t_serviceBrand: undefined,\n\t\t\t\tonWillExecuteCommand: () => Disposable.None,\n\t\t\t\tonDidExecuteCommand: () => Disposable.None,\n\t\t\t\texecuteCommand: (commandId: string, ...args: any[]): Promise<any> => {\n\t\t\t\t\texecuteCommandCalls.push({\n\t\t\t\t\t\tcommandId: commandId,\n\t\t\t\t\t\targs: args\n\t\t\t\t\t});\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst notificationService: INotificationService = {\n\t\t\t\t_serviceBrand: undefined,\n\t\t\t\tonDidAddNotification: undefined!,\n\t\t\t\tonDidRemoveNotification: undefined!,\n\t\t\t\tonDidChangeFilter: undefined!,\n\t\t\t\tnotify: (notification: INotification) => {\n\t\t\t\t\tshowMessageCalls.push({ sev: notification.severity, message: notification.message });\n\t\t\t\t\treturn new NoOpNotification();\n\t\t\t\t},\n\t\t\t\tinfo: (message: any) => {\n\t\t\t\t\tshowMessageCalls.push({ sev: Severity.Info, message });\n\t\t\t\t\treturn new NoOpNotification();\n\t\t\t\t},\n\t\t\t\twarn: (message: any) => {\n\t\t\t\t\tshowMessageCalls.push({ sev: Severity.Warning, message });\n\t\t\t\t\treturn new NoOpNotification();\n\t\t\t\t},\n\t\t\t\terror: (message: any) => {\n\t\t\t\t\tshowMessageCalls.push({ sev: Severity.Error, message });\n\t\t\t\t\treturn new NoOpNotification();\n\t\t\t\t},\n\t\t\t\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions) {\n\t\t\t\t\tthrow new Error('not implemented');\n\t\t\t\t},\n\t\t\t\tstatus(message: string, options?: IStatusMessageOptions) {\n\t\t\t\t\tstatusMessageCalls!.push(message);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\t\tstatusMessageCallsDisposed!.push(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tsetFilter() {\n\t\t\t\t\tthrow new Error('not implemented');\n\t\t\t\t},\n\t\t\t\tgetFilter() {\n\t\t\t\t\tthrow new Error('not implemented');\n\t\t\t\t},\n\t\t\t\tgetFilters() {\n\t\t\t\t\tthrow new Error('not implemented');\n\t\t\t\t},\n\t\t\t\tremoveFilter() {\n\t\t\t\t\tthrow new Error('not implemented');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst resolver = new KeybindingResolver(items, [], () => { });\n\n\t\t\treturn new TestKeybindingService(resolver, contextKeyService, commandService, notificationService);\n\t\t};\n\t});\n\n\tfunction kbItem(keybinding: number | number[], command: string | null, when?: ContextKeyExpression): ResolvedKeybindingItem {\n\t\treturn new ResolvedKeybindingItem(\n\t\t\tcreateUSLayoutResolvedKeybinding(keybinding, OS),\n\t\t\tcommand,\n\t\t\tnull,\n\t\t\twhen,\n\t\t\ttrue,\n\t\t\tnull,\n\t\t\tfalse\n\t\t);\n\t}\n\n\tfunction toUsLabel(keybinding: number): string {\n\t\treturn createUSLayoutResolvedKeybinding(keybinding, OS)!.getLabel()!;\n\t}\n\n\tsuite('simple tests: single- and multi-chord keybindings are dispatched', () => {\n\n\t\ttest('a single-chord keybinding is dispatched correctly; this test makes sure the dispatch in general works before we test empty-string/null command ID', () => {\n\n\t\t\tconst key = KeyMod.CtrlCmd | KeyCode.KeyK;\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(key, 'myCommand'),\n\t\t\t]);\n\n\t\t\tcurrentContextValue = createContext({});\n\t\t\tconst shouldPreventDefault = kbService.testDispatch(key);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, ([{ commandId: \"myCommand\", args: [null] }]));\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t\ttest('a multi-chord keybinding is dispatched correctly', () => {\n\n\t\t\tconst chord0 = KeyMod.CtrlCmd | KeyCode.KeyK;\n\t\t\tconst chord1 = KeyMod.CtrlCmd | KeyCode.KeyI;\n\t\t\tconst key = [chord0, chord1];\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(key, 'myCommand'),\n\t\t\t]);\n\n\t\t\tcurrentContextValue = createContext({});\n\n\t\t\tlet shouldPreventDefault = kbService.testDispatch(chord0);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tshouldPreventDefault = kbService.testDispatch(chord1);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, ([{ commandId: \"myCommand\", args: [null] }]));\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\n\t\t\tkbService.dispose();\n\t\t});\n\t});\n\n\tsuite('keybindings with empty-string/null command ID', () => {\n\n\t\ttest('a single-chord keybinding with an empty string command ID unbinds the keybinding (shouldPreventDefault = false)', () => {\n\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, 'myCommand'),\n\t\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, ''),\n\t\t\t]);\n\n\t\t\t// send Ctrl/Cmd + K\n\t\t\tcurrentContextValue = createContext({});\n\t\t\tconst shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, false);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t\ttest('a single-chord keybinding with a null command ID unbinds the keybinding (shouldPreventDefault = false)', () => {\n\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, 'myCommand'),\n\t\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, null),\n\t\t\t]);\n\n\t\t\t// send Ctrl/Cmd + K\n\t\t\tcurrentContextValue = createContext({});\n\t\t\tconst shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, false);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t\ttest('a multi-chord keybinding with an empty-string command ID keeps the keybinding (shouldPreventDefault = true)', () => {\n\n\t\t\tconst chord0 = KeyMod.CtrlCmd | KeyCode.KeyK;\n\t\t\tconst chord1 = KeyMod.CtrlCmd | KeyCode.KeyI;\n\t\t\tconst key = [chord0, chord1];\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(key, 'myCommand'),\n\t\t\t\tkbItem(key, ''),\n\t\t\t]);\n\n\t\t\tcurrentContextValue = createContext({});\n\n\t\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyI);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`, `The key combination (${toUsLabel(chord0)}, ${toUsLabel(chord1)}) is not a command.`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t\ttest('a multi-chord keybinding with a null command ID keeps the keybinding (shouldPreventDefault = true)', () => {\n\n\t\t\tconst chord0 = KeyMod.CtrlCmd | KeyCode.KeyK;\n\t\t\tconst chord1 = KeyMod.CtrlCmd | KeyCode.KeyI;\n\t\t\tconst key = [chord0, chord1];\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(key, 'myCommand'),\n\t\t\t\tkbItem(key, null),\n\t\t\t]);\n\n\t\t\tcurrentContextValue = createContext({});\n\n\t\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyI);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`, `The key combination (${toUsLabel(chord0)}, ${toUsLabel(chord1)}) is not a command.`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t});\n\n\ttest('issue #16498: chord mode is quit for invalid chords', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyX), 'chordCommand'),\n\t\t\tkbItem(KeyCode.Backspace, 'simpleCommand'),\n\t\t]);\n\n\t\t// send Ctrl/Cmd + K\n\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, [\n\t\t\t`(${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}) was pressed. Waiting for second key of chord...`\n\t\t]);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send backspace\n\t\tshouldPreventDefault = kbService.testDispatch(KeyCode.Backspace);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, [\n\t\t\t`The key combination (${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}, ${toUsLabel(KeyCode.Backspace)}) is not a command.`\n\t\t]);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, [\n\t\t\t`(${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}) was pressed. Waiting for second key of chord...`\n\t\t]);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send backspace\n\t\tshouldPreventDefault = kbService.testDispatch(KeyCode.Backspace);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tkbService.dispose();\n\t});\n\n\ttest('issue #16833: Keybinding service should not testDispatch on modifier keys', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyCode.Ctrl, 'nope'),\n\t\t\tkbItem(KeyCode.Meta, 'nope'),\n\t\t\tkbItem(KeyCode.Alt, 'nope'),\n\t\t\tkbItem(KeyCode.Shift, 'nope'),\n\n\t\t\tkbItem(KeyMod.CtrlCmd, 'nope'),\n\t\t\tkbItem(KeyMod.WinCtrl, 'nope'),\n\t\t\tkbItem(KeyMod.Alt, 'nope'),\n\t\t\tkbItem(KeyMod.Shift, 'nope'),\n\t\t]);\n\n\t\tfunction assertIsIgnored(keybinding: number): void {\n\t\t\tconst shouldPreventDefault = kbService.testDispatch(keybinding);\n\t\t\tassert.strictEqual(shouldPreventDefault, false);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\t\texecuteCommandCalls = [];\n\t\t\tshowMessageCalls = [];\n\t\t\tstatusMessageCalls = [];\n\t\t\tstatusMessageCallsDisposed = [];\n\t\t}\n\n\t\tassertIsIgnored(KeyCode.Ctrl);\n\t\tassertIsIgnored(KeyCode.Meta);\n\t\tassertIsIgnored(KeyCode.Alt);\n\t\tassertIsIgnored(KeyCode.Shift);\n\n\t\tassertIsIgnored(KeyMod.CtrlCmd);\n\t\tassertIsIgnored(KeyMod.WinCtrl);\n\t\tassertIsIgnored(KeyMod.Alt);\n\t\tassertIsIgnored(KeyMod.Shift);\n\n\t\tkbService.dispose();\n\t});\n\n\ttest('can trigger command that is sharing keybinding with chord', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyX), 'chordCommand'),\n\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, 'simpleCommand', ContextKeyExpr.has('key1')),\n\t\t]);\n\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({\n\t\t\tkey1: true\n\t\t});\n\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({});\n\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, [\n\t\t\t`(${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}) was pressed. Waiting for second key of chord...`\n\t\t]);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send Ctrl/Cmd + X\n\t\tcurrentContextValue = createContext({});\n\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyX);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'chordCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, [\n\t\t\t`(${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}) was pressed. Waiting for second key of chord...`\n\t\t]);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tkbService.dispose();\n\t});\n\n\ttest('cannot trigger chord if command is overwriting', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyX), 'chordCommand', ContextKeyExpr.has('key1')),\n\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, 'simpleCommand'),\n\t\t]);\n\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({});\n\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({\n\t\t\tkey1: true\n\t\t});\n\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send Ctrl/Cmd + X\n\t\tcurrentContextValue = createContext({\n\t\t\tkey1: true\n\t\t});\n\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyX);\n\t\tassert.strictEqual(shouldPreventDefault, false);\n\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tkbService.dispose();\n\t});\n\n\ttest('can have spying command', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, '^simpleCommand'),\n\t\t]);\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({});\n\t\tconst shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, false);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tkbService.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
