{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/profiling/common/profilingTelemetrySpec.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService } from '../../log/common/log.js';\nimport { BottomUpSample } from './profilingModel.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { errorHandler } from '../../../base/common/errors.js';\n\ntype TelemetrySampleData = {\n\tselfTime: number;\n\ttotalTime: number;\n\tpercentage: number;\n\tperfBaseline: number;\n\tfunctionName: string;\n\tcallers: string;\n\tcallersAnnotated: string;\n\tsource: string;\n};\n\ntype TelemetrySampleDataClassification = {\n\towner: 'jrieken';\n\tcomment: 'A callstack that took a long time to execute';\n\tselfTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Self time of the sample' };\n\ttotalTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Total time of the sample' };\n\tpercentage: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Relative time (percentage) of the sample' };\n\tperfBaseline: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Performance baseline for the machine' };\n\tfunctionName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the sample' };\n\tcallers: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; comment: 'The heaviest call trace into this sample' };\n\tcallersAnnotated: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The heaviest call trace into this sample annotated with respective costs' };\n\tsource: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The source - either renderer or an extension' };\n};\n\nexport interface SampleData {\n\tperfBaseline: number;\n\tsample: BottomUpSample;\n\tsource: string;\n}\n\nexport function reportSample(data: SampleData, telemetryService: ITelemetryService, logService: ILogService, sendAsErrorTelemtry: boolean): void {\n\n\tconst { sample, perfBaseline, source } = data;\n\n\t// send telemetry event\n\ttelemetryService.publicLog2<TelemetrySampleData, TelemetrySampleDataClassification>(`unresponsive.sample`, {\n\t\tperfBaseline,\n\t\tselfTime: sample.selfTime,\n\t\ttotalTime: sample.totalTime,\n\t\tpercentage: sample.percentage,\n\t\tfunctionName: sample.location,\n\t\tcallers: sample.caller.map(c => c.location).join('<'),\n\t\tcallersAnnotated: sample.caller.map(c => `${c.percentage}|${c.location}`).join('<'),\n\t\tsource\n\t});\n\n\t// log a fake error with a clearer stack\n\tconst fakeError = new PerformanceError(data);\n\tif (sendAsErrorTelemtry) {\n\t\terrorHandler.onUnexpectedError(fakeError);\n\t} else {\n\t\tlogService.error(fakeError);\n\t}\n}\n\nclass PerformanceError extends Error {\n\treadonly selfTime: number;\n\n\tconstructor(data: SampleData) {\n\t\tsuper(`PerfSampleError: by ${data.source} in ${data.sample.location}`);\n\t\tthis.name = 'PerfSampleError';\n\t\tthis.selfTime = data.sample.selfTime;\n\n\t\tconst trace = [data.sample.absLocation, ...data.sample.caller.map(c => c.absLocation)];\n\t\tthis.stack = `\\n\\t at ${trace.join('\\n\\t at ')}`;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC,SAAS,oBAAoB;AAgCtB,SAAS,aAAa,MAAkB,kBAAqC,YAAyB,qBAAoC;AAEhJ,QAAM,EAAE,QAAQ,cAAc,OAAO,IAAI;AAGzC,mBAAiB,WAAmE,uBAAuB;AAAA,IAC1G;AAAA,IACA,UAAU,OAAO;AAAA,IACjB,WAAW,OAAO;AAAA,IAClB,YAAY,OAAO;AAAA,IACnB,cAAc,OAAO;AAAA,IACrB,SAAS,OAAO,OAAO,IAAI,OAAK,EAAE,QAAQ,EAAE,KAAK,GAAG;AAAA,IACpD,kBAAkB,OAAO,OAAO,IAAI,OAAK,GAAG,EAAE,UAAU,IAAI,EAAE,QAAQ,EAAE,EAAE,KAAK,GAAG;AAAA,IAClF;AAAA,EACD,CAAC;AAGD,QAAM,YAAY,IAAI,iBAAiB,IAAI;AAC3C,MAAI,qBAAqB;AACxB,iBAAa,kBAAkB,SAAS;AAAA,EACzC,OAAO;AACN,eAAW,MAAM,SAAS;AAAA,EAC3B;AACD;AAvBgB;AAyBhB,MAAM,yBAAyB,MAAM;AAAA,EAjErC,OAiEqC;AAAA;AAAA;AAAA,EAC3B;AAAA,EAET,YAAY,MAAkB;AAC7B,UAAM,uBAAuB,KAAK,MAAM,OAAO,KAAK,OAAO,QAAQ,EAAE;AACrE,SAAK,OAAO;AACZ,SAAK,WAAW,KAAK,OAAO;AAE5B,UAAM,QAAQ,CAAC,KAAK,OAAO,aAAa,GAAG,KAAK,OAAO,OAAO,IAAI,OAAK,EAAE,WAAW,CAAC;AACrF,SAAK,QAAQ;AAAA,OAAW,MAAM,KAAK,SAAU,CAAC;AAAA,EAC/C;AACD;",
  "names": []
}
