{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/profiling/common/profilingTelemetrySpec.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { errorHandler } from \"../../../base/common/errors.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport type { BottomUpSample } from \"./profilingModel.js\";\n\ntype TelemetrySampleData = {\n\tselfTime: number;\n\ttotalTime: number;\n\tpercentage: number;\n\tperfBaseline: number;\n\tfunctionName: string;\n\tcallers: string;\n\tcallersAnnotated: string;\n\tsource: string;\n};\n\ntype TelemetrySampleDataClassification = {\n\towner: \"jrieken\";\n\tcomment: \"A callstack that took a long time to execute\";\n\tselfTime: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"Self time of the sample\";\n\t};\n\ttotalTime: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"Total time of the sample\";\n\t};\n\tpercentage: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"Relative time (percentage) of the sample\";\n\t};\n\tperfBaseline: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"Performance baseline for the machine\";\n\t};\n\tfunctionName: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"The name of the sample\";\n\t};\n\tcallers: {\n\t\tclassification: \"CallstackOrException\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"The heaviest call trace into this sample\";\n\t};\n\tcallersAnnotated: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"The heaviest call trace into this sample annotated with respective costs\";\n\t};\n\tsource: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"The source - either renderer or an extension\";\n\t};\n};\n\nexport interface SampleData {\n\tperfBaseline: number;\n\tsample: BottomUpSample;\n\tsource: string;\n}\n\nexport function reportSample(\n\tdata: SampleData,\n\ttelemetryService: ITelemetryService,\n\tlogService: ILogService,\n\tsendAsErrorTelemtry: boolean,\n): void {\n\tconst { sample, perfBaseline, source } = data;\n\n\t// send telemetry event\n\ttelemetryService.publicLog2<\n\t\tTelemetrySampleData,\n\t\tTelemetrySampleDataClassification\n\t>(`unresponsive.sample`, {\n\t\tperfBaseline,\n\t\tselfTime: sample.selfTime,\n\t\ttotalTime: sample.totalTime,\n\t\tpercentage: sample.percentage,\n\t\tfunctionName: sample.location,\n\t\tcallers: sample.caller.map((c) => c.location).join(\"<\"),\n\t\tcallersAnnotated: sample.caller\n\t\t\t.map((c) => `${c.percentage}|${c.location}`)\n\t\t\t.join(\"<\"),\n\t\tsource,\n\t});\n\n\t// log a fake error with a clearer stack\n\tconst fakeError = new PerformanceError(data);\n\tif (sendAsErrorTelemtry) {\n\t\terrorHandler.onUnexpectedError(fakeError);\n\t} else {\n\t\tlogService.error(fakeError);\n\t}\n}\n\nclass PerformanceError extends Error {\n\treadonly selfTime: number;\n\n\tconstructor(data: SampleData) {\n\t\tsuper(`PerfSampleError: by ${data.source} in ${data.sample.location}`);\n\t\tthis.name = \"PerfSampleError\";\n\t\tthis.selfTime = data.sample.selfTime;\n\n\t\tconst trace = [\n\t\t\tdata.sample.absLocation,\n\t\t\t...data.sample.caller.map((c) => c.absLocation),\n\t\t];\n\t\tthis.stack = `\\n\\t at ${trace.join(\"\\n\\t at \")}`;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,oBAAoB;AAmEtB,SAAS,aACf,MACA,kBACA,YACA,qBACO;AACP,QAAM,EAAE,QAAQ,cAAc,OAAO,IAAI;AAGzC,mBAAiB,WAGf,uBAAuB;AAAA,IACxB;AAAA,IACA,UAAU,OAAO;AAAA,IACjB,WAAW,OAAO;AAAA,IAClB,YAAY,OAAO;AAAA,IACnB,cAAc,OAAO;AAAA,IACrB,SAAS,OAAO,OAAO,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,GAAG;AAAA,IACtD,kBAAkB,OAAO,OACvB,IAAI,CAAC,MAAM,GAAG,EAAE,UAAU,IAAI,EAAE,QAAQ,EAAE,EAC1C,KAAK,GAAG;AAAA,IACV;AAAA,EACD,CAAC;AAGD,QAAM,YAAY,IAAI,iBAAiB,IAAI;AAC3C,MAAI,qBAAqB;AACxB,iBAAa,kBAAkB,SAAS;AAAA,EACzC,OAAO;AACN,eAAW,MAAM,SAAS;AAAA,EAC3B;AACD;AAhCgB;AAkChB,MAAM,yBAAyB,MAAM;AAAA,EA1GrC,OA0GqC;AAAA;AAAA;AAAA,EAC3B;AAAA,EAET,YAAY,MAAkB;AAC7B,UAAM,uBAAuB,KAAK,MAAM,OAAO,KAAK,OAAO,QAAQ,EAAE;AACrE,SAAK,OAAO;AACZ,SAAK,WAAW,KAAK,OAAO;AAE5B,UAAM,QAAQ;AAAA,MACb,KAAK,OAAO;AAAA,MACZ,GAAG,KAAK,OAAO,OAAO,IAAI,CAAC,MAAM,EAAE,WAAW;AAAA,IAC/C;AACA,SAAK,QAAQ;AAAA,OAAW,MAAM,KAAK,SAAU,CAAC;AAAA,EAC/C;AACD;",
  "names": []
}
