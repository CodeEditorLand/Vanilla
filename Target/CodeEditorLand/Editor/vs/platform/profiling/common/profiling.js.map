{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/profiling/common/profiling.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { basename, isAbsolute, join } from '../../../base/common/path.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport interface IV8Profile {\n\tnodes: IV8ProfileNode[];\n\tsamples?: number[];\n\ttimeDeltas?: number[];\n\tstartTime: number;\n\tendTime: number;\n}\n\nexport interface IV8ProfileNode {\n\tid: number;\n\thitCount?: number;\n\tchildren?: number[];\n\tcallFrame: IV8CallFrame;\n\tdeoptReason?: string;\n\tpositionTicks?: { line: number; ticks: number }[];\n}\n\nexport interface IV8CallFrame {\n\turl: string;\n\tscriptId: string;\n\tfunctionName: string;\n\tlineNumber: number;\n\tcolumnNumber: number;\n}\n\nexport const IV8InspectProfilingService = createDecorator<IV8InspectProfilingService>('IV8InspectProfilingService');\n\nexport interface IV8InspectProfilingService {\n\n\t_serviceBrand: undefined;\n\n\tstartProfiling(options: { host: string; port: number }): Promise<string>;\n\n\tstopProfiling(sessionId: string): Promise<IV8Profile>;\n}\n\n\nexport namespace Utils {\n\n\texport function isValidProfile(profile: IV8Profile): profile is Required<IV8Profile> {\n\t\treturn Boolean(profile.samples && profile.timeDeltas);\n\t}\n\n\texport function rewriteAbsolutePaths(profile: IV8Profile, replace: string = 'noAbsolutePaths') {\n\t\tfor (const node of profile.nodes) {\n\t\t\tif (node.callFrame && node.callFrame.url) {\n\t\t\t\tif (isAbsolute(node.callFrame.url) || /^\\w[\\w\\d+.-]*:\\/\\/\\/?/.test(node.callFrame.url)) {\n\t\t\t\t\tnode.callFrame.url = join(replace, basename(node.callFrame.url));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn profile;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,UAAU,YAAY,YAAY;AAC3C,SAAS,uBAAuB;AA2BzB,MAAM,6BAA6B,gBAA4C,4BAA4B;AAY3G,IAAU;AAAA,CAAV,CAAUA,WAAV;AAEC,WAAS,eAAe,SAAsD;AACpF,WAAO,QAAQ,QAAQ,WAAW,QAAQ,UAAU;AAAA,EACrD;AAFO,EAAAA,OAAS;AAAA;AAIT,WAAS,qBAAqB,SAAqB,UAAkB,mBAAmB;AAC9F,eAAW,QAAQ,QAAQ,OAAO;AACjC,UAAI,KAAK,aAAa,KAAK,UAAU,KAAK;AACzC,YAAI,WAAW,KAAK,UAAU,GAAG,KAAK,wBAAwB,KAAK,KAAK,UAAU,GAAG,GAAG;AACvF,eAAK,UAAU,MAAM,KAAK,SAAS,SAAS,KAAK,UAAU,GAAG,CAAC;AAAA,QAChE;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AATO,EAAAA,OAAS;AAAA;AAAA,GANA;",
  "names": ["Utils"]
}
