{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/profiling/electron-sandbox/profileAnalysisWorkerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createWebWorker } from \"../../../base/browser/defaultWorkerFactory.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type { Proxied } from \"../../../base/common/worker/simpleWorker.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport type { IV8Profile } from \"../common/profiling.js\";\nimport type { BottomUpSample } from \"../common/profilingModel.js\";\nimport { reportSample } from \"../common/profilingTelemetrySpec.js\";\n\nexport enum ProfilingOutput {\n\tFailure = 0,\n\tIrrelevant = 1,\n\tInteresting = 2,\n}\n\nexport interface IScriptUrlClassifier {\n\t(scriptUrl: string): string;\n}\n\nexport const IProfileAnalysisWorkerService =\n\tcreateDecorator<IProfileAnalysisWorkerService>(\n\t\t\"IProfileAnalysisWorkerService\",\n\t);\n\nexport interface IProfileAnalysisWorkerService {\n\treadonly _serviceBrand: undefined;\n\tanalyseBottomUp(\n\t\tprofile: IV8Profile,\n\t\tcallFrameClassifier: IScriptUrlClassifier,\n\t\tperfBaseline: number,\n\t\tsendAsErrorTelemtry: boolean,\n\t): Promise<ProfilingOutput>;\n\tanalyseByLocation(\n\t\tprofile: IV8Profile,\n\t\tlocations: [location: URI, id: string][],\n\t): Promise<[category: string, aggregated: number][]>;\n}\n\n// ---- impl\n\nclass ProfileAnalysisWorkerService implements IProfileAnalysisWorkerService {\n\tdeclare _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {}\n\n\tprivate async _withWorker<R>(\n\t\tcallback: (worker: Proxied<IProfileAnalysisWorker>) => Promise<R>,\n\t): Promise<R> {\n\t\tconst worker = createWebWorker<IProfileAnalysisWorker>(\n\t\t\t\"vs/platform/profiling/electron-sandbox/profileAnalysisWorker\",\n\t\t\t\"CpuProfileAnalysisWorker\",\n\t\t);\n\n\t\ttry {\n\t\t\tconst r = await callback(worker.proxy);\n\t\t\treturn r;\n\t\t} finally {\n\t\t\tworker.dispose();\n\t\t}\n\t}\n\n\tasync analyseBottomUp(\n\t\tprofile: IV8Profile,\n\t\tcallFrameClassifier: IScriptUrlClassifier,\n\t\tperfBaseline: number,\n\t\tsendAsErrorTelemtry: boolean,\n\t): Promise<ProfilingOutput> {\n\t\treturn this._withWorker(async (worker) => {\n\t\t\tconst result = await worker.$analyseBottomUp(profile);\n\t\t\tif (result.kind === ProfilingOutput.Interesting) {\n\t\t\t\tfor (const sample of result.samples) {\n\t\t\t\t\treportSample(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsample,\n\t\t\t\t\t\t\tperfBaseline,\n\t\t\t\t\t\t\tsource: callFrameClassifier(sample.url),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis._telemetryService,\n\t\t\t\t\t\tthis._logService,\n\t\t\t\t\t\tsendAsErrorTelemtry,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result.kind;\n\t\t});\n\t}\n\n\tasync analyseByLocation(\n\t\tprofile: IV8Profile,\n\t\tlocations: [location: URI, id: string][],\n\t): Promise<[category: string, aggregated: number][]> {\n\t\treturn this._withWorker(async (worker) => {\n\t\t\tconst result = await worker.$analyseByUrlCategory(\n\t\t\t\tprofile,\n\t\t\t\tlocations,\n\t\t\t);\n\t\t\treturn result;\n\t\t});\n\t}\n}\n\n// ---- worker contract\n\nexport interface BottomUpAnalysis {\n\tkind: ProfilingOutput;\n\tsamples: BottomUpSample[];\n}\n\nexport interface CategoryAnalysis {\n\tcategory: string;\n\tpercentage: number;\n\taggregated: number;\n\toverallDuration: number;\n}\n\nexport interface IProfileAnalysisWorker {\n\t$analyseBottomUp(profile: IV8Profile): BottomUpAnalysis;\n\t$analyseByUrlCategory(\n\t\tprofile: IV8Profile,\n\t\tcategories: [url: URI, category: string][],\n\t): [category: string, aggregated: number][];\n}\n\nregisterSingleton(\n\tIProfileAnalysisWorkerService,\n\tProfileAnalysisWorkerService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB;AAGhC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAGlC,SAAS,oBAAoB;AAEtB,IAAK,kBAAL,kBAAKA,qBAAL;AACN,EAAAA,kCAAA,aAAU,KAAV;AACA,EAAAA,kCAAA,gBAAa,KAAb;AACA,EAAAA,kCAAA,iBAAc,KAAd;AAHW,SAAAA;AAAA,GAAA;AAUL,MAAM,gCACZ;AAAA,EACC;AACD;AAkBD,IAAM,+BAAN,MAA4E;AAAA,EAG3E,YAEkB,mBACa,aAC7B;AAFgB;AACa;AAAA,EAC5B;AAAA,EAzDJ,OAkD4E;AAAA;AAAA;AAAA,EAS3E,MAAc,YACb,UACa;AACb,UAAM,SAAS;AAAA,MACd;AAAA,MACA;AAAA,IACD;AAEA,QAAI;AACH,YAAM,IAAI,MAAM,SAAS,OAAO,KAAK;AACrC,aAAO;AAAA,IACR,UAAE;AACD,aAAO,QAAQ;AAAA,IAChB;AAAA,EACD;AAAA,EAEA,MAAM,gBACL,SACA,qBACA,cACA,qBAC2B;AAC3B,WAAO,KAAK,YAAY,OAAO,WAAW;AACzC,YAAM,SAAS,MAAM,OAAO,iBAAiB,OAAO;AACpD,UAAI,OAAO,SAAS,qBAA6B;AAChD,mBAAW,UAAU,OAAO,SAAS;AACpC;AAAA,YACC;AAAA,cACC;AAAA,cACA;AAAA,cACA,QAAQ,oBAAoB,OAAO,GAAG;AAAA,YACvC;AAAA,YACA,KAAK;AAAA,YACL,KAAK;AAAA,YACL;AAAA,UACD;AAAA,QACD;AAAA,MACD;AACA,aAAO,OAAO;AAAA,IACf,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,kBACL,SACA,WACoD;AACpD,WAAO,KAAK,YAAY,OAAO,WAAW;AACzC,YAAM,SAAS,MAAM,OAAO;AAAA,QAC3B;AAAA,QACA;AAAA,MACD;AACA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AA/DM,+BAAN;AAAA,EAIG;AAAA,EAEA;AAAA,GANG;AAuFN;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": ["ProfilingOutput"]
}
