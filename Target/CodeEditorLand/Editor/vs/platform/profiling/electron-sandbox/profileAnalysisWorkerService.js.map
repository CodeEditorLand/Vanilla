{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/profiling/electron-sandbox/profileAnalysisWorkerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { createWebWorker } from '../../../base/browser/defaultWorkerFactory.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Proxied } from '../../../base/common/worker/simpleWorker.js';\nimport { InstantiationType, registerSingleton } from '../../instantiation/common/extensions.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IV8Profile } from '../common/profiling.js';\nimport { BottomUpSample } from '../common/profilingModel.js';\nimport { reportSample } from '../common/profilingTelemetrySpec.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n\nexport const enum ProfilingOutput {\n\tFailure,\n\tIrrelevant,\n\tInteresting,\n}\n\nexport interface IScriptUrlClassifier {\n\t(scriptUrl: string): string;\n}\n\nexport const IProfileAnalysisWorkerService = createDecorator<IProfileAnalysisWorkerService>('IProfileAnalysisWorkerService');\n\nexport interface IProfileAnalysisWorkerService {\n\treadonly _serviceBrand: undefined;\n\tanalyseBottomUp(profile: IV8Profile, callFrameClassifier: IScriptUrlClassifier, perfBaseline: number, sendAsErrorTelemtry: boolean): Promise<ProfilingOutput>;\n\tanalyseByLocation(profile: IV8Profile, locations: [location: URI, id: string][]): Promise<[category: string, aggregated: number][]>;\n}\n\n\n// ---- impl\n\nclass ProfileAnalysisWorkerService implements IProfileAnalysisWorkerService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tprivate async _withWorker<R>(callback: (worker: Proxied<IProfileAnalysisWorker>) => Promise<R>): Promise<R> {\n\n\t\tconst worker = createWebWorker<IProfileAnalysisWorker>(\n\t\t\t'vs/platform/profiling/electron-sandbox/profileAnalysisWorker',\n\t\t\t'CpuProfileAnalysisWorker'\n\t\t);\n\n\t\ttry {\n\t\t\tconst r = await callback(worker.proxy);\n\t\t\treturn r;\n\t\t} finally {\n\t\t\tworker.dispose();\n\t\t}\n\t}\n\n\tasync analyseBottomUp(profile: IV8Profile, callFrameClassifier: IScriptUrlClassifier, perfBaseline: number, sendAsErrorTelemtry: boolean): Promise<ProfilingOutput> {\n\t\treturn this._withWorker(async worker => {\n\t\t\tconst result = await worker.$analyseBottomUp(profile);\n\t\t\tif (result.kind === ProfilingOutput.Interesting) {\n\t\t\t\tfor (const sample of result.samples) {\n\t\t\t\t\treportSample({\n\t\t\t\t\t\tsample,\n\t\t\t\t\t\tperfBaseline,\n\t\t\t\t\t\tsource: callFrameClassifier(sample.url)\n\t\t\t\t\t}, this._telemetryService, this._logService, sendAsErrorTelemtry);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result.kind;\n\t\t});\n\t}\n\n\tasync analyseByLocation(profile: IV8Profile, locations: [location: URI, id: string][]): Promise<[category: string, aggregated: number][]> {\n\t\treturn this._withWorker(async worker => {\n\t\t\tconst result = await worker.$analyseByUrlCategory(profile, locations);\n\t\t\treturn result;\n\t\t});\n\t}\n}\n\n// ---- worker contract\n\nexport interface BottomUpAnalysis {\n\tkind: ProfilingOutput;\n\tsamples: BottomUpSample[];\n}\n\nexport interface CategoryAnalysis {\n\tcategory: string;\n\tpercentage: number;\n\taggregated: number;\n\toverallDuration: number;\n}\n\nexport interface IProfileAnalysisWorker {\n\t$analyseBottomUp(profile: IV8Profile): BottomUpAnalysis;\n\t$analyseByUrlCategory(profile: IV8Profile, categories: [url: URI, category: string][]): [category: string, aggregated: number][];\n}\n\nregisterSingleton(IProfileAnalysisWorkerService, ProfileAnalysisWorkerService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,uBAAuB;AAChC,SAAS,WAAW;AACpB,SAAS,eAAe;AACxB,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,kBAAkB;AAC3B,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB;AAC7B,SAAS,yBAAyB;AAE3B,IAAW,kBAAX,kBAAWA,qBAAX;AACN,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AAHiB,SAAAA;AAAA,GAAA;AAUX,MAAM,gCAAgC,gBAA+C,+BAA+B;AAW3H,IAAM,+BAAN,MAA4E;AAAA,EAI3E,YACqC,mBACN,aAC7B;AAFmC;AACN;AAAA,EAC3B;AAAA,EA7CL,OAsC4E;AAAA;AAAA;AAAA,EAS3E,MAAc,YAAe,UAA+E;AAE3G,UAAM,SAAS;AAAA,MACd;AAAA,MACA;AAAA,IACD;AAEA,QAAI;AACH,YAAM,IAAI,MAAM,SAAS,OAAO,KAAK;AACrC,aAAO;AAAA,IACR,UAAE;AACD,aAAO,QAAQ;AAAA,IAChB;AAAA,EACD;AAAA,EAEA,MAAM,gBAAgB,SAAqB,qBAA2C,cAAsB,qBAAwD;AACnK,WAAO,KAAK,YAAY,OAAM,WAAU;AACvC,YAAM,SAAS,MAAM,OAAO,iBAAiB,OAAO;AACpD,UAAI,OAAO,SAAS,qBAA6B;AAChD,mBAAW,UAAU,OAAO,SAAS;AACpC,uBAAa;AAAA,YACZ;AAAA,YACA;AAAA,YACA,QAAQ,oBAAoB,OAAO,GAAG;AAAA,UACvC,GAAG,KAAK,mBAAmB,KAAK,aAAa,mBAAmB;AAAA,QACjE;AAAA,MACD;AACA,aAAO,OAAO;AAAA,IACf,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,SAAqB,WAA6F;AACzI,WAAO,KAAK,YAAY,OAAM,WAAU;AACvC,YAAM,SAAS,MAAM,OAAO,sBAAsB,SAAS,SAAS;AACpE,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AA9CM,+BAAN;AAAA,EAKG;AAAA,EACA;AAAA,GANG;AAmEN,kBAAkB,+BAA+B,8BAA8B,kBAAkB,OAAO;",
  "names": ["ProfilingOutput"]
}
