{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/profiling/electron-sandbox/profileAnalysisWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { basename } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IRequestHandler, IWorkerServer } from '../../../base/common/worker/simpleWorker.js';\nimport { IV8Profile, Utils } from '../common/profiling.js';\nimport { IProfileModel, BottomUpSample, buildModel, BottomUpNode, processNode, CdpCallFrame } from '../common/profilingModel.js';\nimport { BottomUpAnalysis, IProfileAnalysisWorker, ProfilingOutput } from './profileAnalysisWorkerService.js';\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(workerServer: IWorkerServer): IRequestHandler {\n\treturn new ProfileAnalysisWorker();\n}\n\nclass ProfileAnalysisWorker implements IRequestHandler, IProfileAnalysisWorker {\n\n\t_requestHandlerBrand: any;\n\n\t$analyseBottomUp(profile: IV8Profile): BottomUpAnalysis {\n\t\tif (!Utils.isValidProfile(profile)) {\n\t\t\treturn { kind: ProfilingOutput.Irrelevant, samples: [] };\n\t\t}\n\n\t\tconst model = buildModel(profile);\n\t\tconst samples = bottomUp(model, 5)\n\t\t\t.filter(s => !s.isSpecial);\n\n\t\tif (samples.length === 0 || samples[0].percentage < 10) {\n\t\t\t// ignore this profile because 90% of the time is spent inside \"special\" frames\n\t\t\t// like idle, GC, or program\n\t\t\treturn { kind: ProfilingOutput.Irrelevant, samples: [] };\n\t\t}\n\n\t\treturn { kind: ProfilingOutput.Interesting, samples };\n\t}\n\n\t$analyseByUrlCategory(profile: IV8Profile, categories: [url: URI, category: string][]): [category: string, aggregated: number][] {\n\n\t\t// build search tree\n\t\tconst searchTree = TernarySearchTree.forUris<string>();\n\t\tsearchTree.fill(categories);\n\n\t\t// cost by categories\n\t\tconst model = buildModel(profile);\n\t\tconst aggegrateByCategory = new Map<string, number>();\n\n\t\tfor (const node of model.nodes) {\n\t\t\tconst loc = model.locations[node.locationId];\n\t\t\tlet category: string | undefined;\n\t\t\ttry {\n\t\t\t\tcategory = searchTree.findSubstr(URI.parse(loc.callFrame.url));\n\t\t\t} catch {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\tif (!category) {\n\t\t\t\tcategory = printCallFrameShort(loc.callFrame);\n\t\t\t}\n\t\t\tconst value = aggegrateByCategory.get(category) ?? 0;\n\t\t\tconst newValue = value + node.selfTime;\n\t\t\taggegrateByCategory.set(category, newValue);\n\t\t}\n\n\t\tconst result: [string, number][] = [];\n\t\tfor (const [key, value] of aggegrateByCategory) {\n\t\t\tresult.push([key, value]);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction isSpecial(call: CdpCallFrame): boolean {\n\treturn call.functionName.startsWith('(') && call.functionName.endsWith(')');\n}\n\nfunction printCallFrameShort(frame: CdpCallFrame): string {\n\tlet result = frame.functionName || '(anonymous)';\n\tif (frame.url) {\n\t\tresult += '#';\n\t\tresult += basename(frame.url);\n\t\tif (frame.lineNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.lineNumber + 1;\n\t\t}\n\t\tif (frame.columnNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.columnNumber + 1;\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction printCallFrameStackLike(frame: CdpCallFrame): string {\n\tlet result = frame.functionName || '(anonymous)';\n\tif (frame.url) {\n\t\tresult += ' (';\n\t\tresult += frame.url;\n\t\tif (frame.lineNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.lineNumber + 1;\n\t\t}\n\t\tif (frame.columnNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.columnNumber + 1;\n\t\t}\n\t\tresult += ')';\n\t}\n\treturn result;\n}\n\nfunction getHeaviestLocationIds(model: IProfileModel, topN: number) {\n\tconst stackSelfTime: { [locationId: number]: number } = {};\n\tfor (const node of model.nodes) {\n\t\tstackSelfTime[node.locationId] = (stackSelfTime[node.locationId] || 0) + node.selfTime;\n\t}\n\n\tconst locationIds = Object.entries(stackSelfTime)\n\t\t.sort(([, a], [, b]) => b - a)\n\t\t.slice(0, topN)\n\t\t.map(([locationId]) => Number(locationId));\n\n\treturn new Set(locationIds);\n}\n\nfunction bottomUp(model: IProfileModel, topN: number) {\n\tconst root = BottomUpNode.root();\n\tconst locationIds = getHeaviestLocationIds(model, topN);\n\n\tfor (const node of model.nodes) {\n\t\tif (locationIds.has(node.locationId)) {\n\t\t\tprocessNode(root, node, model);\n\t\t\troot.addNode(node);\n\t\t}\n\t}\n\n\tconst result = Object.values(root.children)\n\t\t.sort((a, b) => b.selfTime - a.selfTime)\n\t\t.slice(0, topN);\n\n\tconst samples: BottomUpSample[] = [];\n\n\tfor (const node of result) {\n\n\t\tconst sample: BottomUpSample = {\n\t\t\tselfTime: Math.round(node.selfTime / 1000),\n\t\t\ttotalTime: Math.round(node.aggregateTime / 1000),\n\t\t\tlocation: printCallFrameShort(node.callFrame),\n\t\t\tabsLocation: printCallFrameStackLike(node.callFrame),\n\t\t\turl: node.callFrame.url,\n\t\t\tcaller: [],\n\t\t\tpercentage: Math.round(node.selfTime / (model.duration / 100)),\n\t\t\tisSpecial: isSpecial(node.callFrame)\n\t\t};\n\n\t\t// follow the heaviest caller paths\n\t\tconst stack = [node];\n\t\twhile (stack.length) {\n\t\t\tconst node = stack.pop()!;\n\t\t\tlet top: BottomUpNode | undefined;\n\t\t\tfor (const candidate of Object.values(node.children)) {\n\t\t\t\tif (!top || top.selfTime < candidate.selfTime) {\n\t\t\t\t\ttop = candidate;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (top) {\n\t\t\t\tconst percentage = Math.round(top.selfTime / (node.selfTime / 100));\n\t\t\t\tsample.caller.push({\n\t\t\t\t\tpercentage,\n\t\t\t\t\tlocation: printCallFrameShort(top.callFrame),\n\t\t\t\t\tabsLocation: printCallFrameStackLike(top.callFrame),\n\t\t\t\t});\n\t\t\t\tstack.push(top);\n\t\t\t}\n\t\t}\n\n\t\tsamples.push(sample);\n\t}\n\n\treturn samples;\n}\n"],
  "mappings": "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",
  "names": ["node"]
}
