var p=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var c=(a,r,o,e)=>{for(var i=e>1?void 0:e?y(r,o):r,s=a.length-1,t;s>=0;s--)(t=a[s])&&(i=(e?t(r,o,i):t(i))||i);return e&&i&&p(r,o,i),i},l=(a,r)=>(o,e)=>r(o,e,a);import{createWebWorker as f}from"../../../base/browser/defaultWorkerFactory.js";import{InstantiationType as g,registerSingleton as I}from"../../instantiation/common/extensions.js";import{createDecorator as d}from"../../instantiation/common/instantiation.js";import{ILogService as u}from"../../log/common/log.js";import{ITelemetryService as P}from"../../telemetry/common/telemetry.js";import{reportSample as k}from"../common/profilingTelemetrySpec.js";var v=(e=>(e[e.Failure=0]="Failure",e[e.Irrelevant=1]="Irrelevant",e[e.Interesting=2]="Interesting",e))(v||{});const U=d("IProfileAnalysisWorkerService");let n=class{constructor(r,o){this._telemetryService=r;this._logService=o}async _withWorker(r){const o=f("vs/platform/profiling/electron-sandbox/profileAnalysisWorker","CpuProfileAnalysisWorker");try{return await r(o.proxy)}finally{o.dispose()}}async analyseBottomUp(r,o,e,i){return this._withWorker(async s=>{const t=await s.$analyseBottomUp(r);if(t.kind===2)for(const m of t.samples)k({sample:m,perfBaseline:e,source:o(m.url)},this._telemetryService,this._logService,i);return t.kind})}async analyseByLocation(r,o){return this._withWorker(async e=>await e.$analyseByUrlCategory(r,o))}};n=c([l(0,P),l(1,u)],n),I(U,n,g.Delayed);export{U as IProfileAnalysisWorkerService,v as ProfilingOutput};
