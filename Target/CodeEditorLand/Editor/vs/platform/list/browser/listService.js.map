{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/list/browser/listService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tcreateStyleSheet,\n\tisActiveElement,\n\tisKeyboardEvent,\n} from \"../../../base/browser/dom.js\";\nimport type { IContextViewProvider } from \"../../../base/browser/ui/contextview/contextview.js\";\nimport type {\n\tIListMouseEvent,\n\tIListRenderer,\n\tIListTouchEvent,\n\tIListVirtualDelegate,\n} from \"../../../base/browser/ui/list/list.js\";\nimport {\n\ttype IPagedListOptions,\n\ttype IPagedRenderer,\n\tPagedList,\n} from \"../../../base/browser/ui/list/listPaging.js\";\nimport {\n\tDefaultStyleController,\n\ttype IKeyboardNavigationEventFilter,\n\ttype IListAccessibilityProvider,\n\ttype IListOptions,\n\ttype IListOptionsUpdate,\n\ttype IListStyles,\n\ttype IMultipleSelectionController,\n\tList,\n\tTypeNavigationMode,\n\tisSelectionRangeChangeEvent,\n\tisSelectionSingleChangeEvent,\n} from \"../../../base/browser/ui/list/listWidget.js\";\nimport type {\n\tITableColumn,\n\tITableRenderer,\n\tITableVirtualDelegate,\n} from \"../../../base/browser/ui/table/table.js\";\nimport {\n\ttype ITableOptions,\n\ttype ITableOptionsUpdate,\n\ttype ITableStyles,\n\tTable,\n} from \"../../../base/browser/ui/table/tableWidget.js\";\nimport {\n\ttype IAbstractTreeOptions,\n\ttype IAbstractTreeOptionsUpdate,\n\ttype RenderIndentGuides,\n\tTreeFindMatchType,\n\tTreeFindMode,\n} from \"../../../base/browser/ui/tree/abstractTree.js\";\nimport {\n\tAsyncDataTree,\n\tCompressibleAsyncDataTree,\n\ttype IAsyncDataTreeOptions,\n\ttype IAsyncDataTreeOptionsUpdate,\n\ttype ICompressibleAsyncDataTreeOptions,\n\ttype ICompressibleAsyncDataTreeOptionsUpdate,\n\ttype ITreeCompressionDelegate,\n} from \"../../../base/browser/ui/tree/asyncDataTree.js\";\nimport {\n\tDataTree,\n\ttype IDataTreeOptions,\n} from \"../../../base/browser/ui/tree/dataTree.js\";\nimport {\n\tCompressibleObjectTree,\n\ttype ICompressibleObjectTreeOptions,\n\ttype ICompressibleObjectTreeOptionsUpdate,\n\ttype ICompressibleTreeRenderer,\n\ttype IObjectTreeOptions,\n\tObjectTree,\n} from \"../../../base/browser/ui/tree/objectTree.js\";\nimport type {\n\tIAsyncDataSource,\n\tIDataSource,\n\tITreeEvent,\n\tITreeRenderer,\n} from \"../../../base/browser/ui/tree/tree.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tcombinedDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../configuration/common/configurationRegistry.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\ttype IScopedContextKeyService,\n\tRawContextKey,\n} from \"../../contextkey/common/contextkey.js\";\nimport { InputFocusedContextKey } from \"../../contextkey/common/contextkeys.js\";\nimport { IContextViewService } from \"../../contextview/browser/contextView.js\";\nimport type { IEditorOptions } from \"../../editor/common/editor.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n\tcreateDecorator,\n} from \"../../instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../keybinding/common/keybinding.js\";\nimport { ResultKind } from \"../../keybinding/common/keybindingResolver.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\nimport {\n\ttype IStyleOverride,\n\tdefaultFindWidgetStyles,\n\tdefaultListStyles,\n\tgetListStyles,\n} from \"../../theme/browser/defaultStyles.js\";\n\nexport type ListWidget =\n\t| List<any>\n\t| PagedList<any>\n\t| ObjectTree<any, any>\n\t| DataTree<any, any, any>\n\t| AsyncDataTree<any, any, any>\n\t| Table<any>;\nexport type WorkbenchListWidget =\n\t| WorkbenchList<any>\n\t| WorkbenchPagedList<any>\n\t| WorkbenchObjectTree<any, any>\n\t| WorkbenchCompressibleObjectTree<any, any>\n\t| WorkbenchDataTree<any, any, any>\n\t| WorkbenchAsyncDataTree<any, any, any>\n\t| WorkbenchCompressibleAsyncDataTree<any, any, any>\n\t| WorkbenchTable<any>;\n\nexport const IListService = createDecorator<IListService>(\"listService\");\n\nexport interface IListService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Returns the currently focused list widget if any.\n\t */\n\treadonly lastFocusedList: WorkbenchListWidget | undefined;\n}\n\ninterface IRegisteredList {\n\twidget: WorkbenchListWidget;\n\textraContextKeys?: IContextKey<boolean>[];\n}\n\nexport class ListService implements IListService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly disposables = new DisposableStore();\n\tprivate lists: IRegisteredList[] = [];\n\tprivate _lastFocusedWidget: WorkbenchListWidget | undefined = undefined;\n\tprivate _hasCreatedStyleController = false;\n\n\tget lastFocusedList(): WorkbenchListWidget | undefined {\n\t\treturn this._lastFocusedWidget;\n\t}\n\n\tconstructor() {}\n\n\tprivate setLastFocusedList(widget: WorkbenchListWidget | undefined): void {\n\t\tif (widget === this._lastFocusedWidget) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lastFocusedWidget\n\t\t\t?.getHTMLElement()\n\t\t\t.classList.remove(\"last-focused\");\n\t\tthis._lastFocusedWidget = widget;\n\t\tthis._lastFocusedWidget?.getHTMLElement().classList.add(\"last-focused\");\n\t}\n\n\tregister(\n\t\twidget: WorkbenchListWidget,\n\t\textraContextKeys?: IContextKey<boolean>[],\n\t): IDisposable {\n\t\tif (!this._hasCreatedStyleController) {\n\t\t\tthis._hasCreatedStyleController = true;\n\t\t\t// create a shared default tree style sheet for performance reasons\n\t\t\tconst styleController = new DefaultStyleController(\n\t\t\t\tcreateStyleSheet(),\n\t\t\t\t\"\",\n\t\t\t);\n\t\t\tstyleController.style(defaultListStyles);\n\t\t}\n\n\t\tif (this.lists.some((l) => l.widget === widget)) {\n\t\t\tthrow new Error(\"Cannot register the same widget multiple times\");\n\t\t}\n\n\t\t// Keep in our lists list\n\t\tconst registeredList: IRegisteredList = { widget, extraContextKeys };\n\t\tthis.lists.push(registeredList);\n\n\t\t// Check for currently being focused\n\t\tif (isActiveElement(widget.getHTMLElement())) {\n\t\t\tthis.setLastFocusedList(widget);\n\t\t}\n\n\t\treturn combinedDisposable(\n\t\t\twidget.onDidFocus(() => this.setLastFocusedList(widget)),\n\t\t\ttoDisposable(() =>\n\t\t\t\tthis.lists.splice(this.lists.indexOf(registeredList), 1),\n\t\t\t),\n\t\t\twidget.onDidDispose(() => {\n\t\t\t\tthis.lists = this.lists.filter((l) => l !== registeredList);\n\t\t\t\tif (this._lastFocusedWidget === widget) {\n\t\t\t\t\tthis.setLastFocusedList(undefined);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport const RawWorkbenchListScrollAtBoundaryContextKey = new RawContextKey<\n\t\"none\" | \"top\" | \"bottom\" | \"both\"\n>(\"listScrollAtBoundary\", \"none\");\nexport const WorkbenchListScrollAtTopContextKey = ContextKeyExpr.or(\n\tRawWorkbenchListScrollAtBoundaryContextKey.isEqualTo(\"top\"),\n\tRawWorkbenchListScrollAtBoundaryContextKey.isEqualTo(\"both\"),\n);\nexport const WorkbenchListScrollAtBottomContextKey = ContextKeyExpr.or(\n\tRawWorkbenchListScrollAtBoundaryContextKey.isEqualTo(\"bottom\"),\n\tRawWorkbenchListScrollAtBoundaryContextKey.isEqualTo(\"both\"),\n);\n\nexport const RawWorkbenchListFocusContextKey = new RawContextKey<boolean>(\n\t\"listFocus\",\n\ttrue,\n);\nexport const WorkbenchTreeStickyScrollFocused = new RawContextKey<boolean>(\n\t\"treestickyScrollFocused\",\n\tfalse,\n);\nexport const WorkbenchListSupportsMultiSelectContextKey =\n\tnew RawContextKey<boolean>(\"listSupportsMultiselect\", true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(\n\tRawWorkbenchListFocusContextKey,\n\tContextKeyExpr.not(InputFocusedContextKey),\n\tWorkbenchTreeStickyScrollFocused.negate(),\n);\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey<boolean>(\n\t\"listHasSelectionOrFocus\",\n\tfalse,\n);\nexport const WorkbenchListDoubleSelection = new RawContextKey<boolean>(\n\t\"listDoubleSelection\",\n\tfalse,\n);\nexport const WorkbenchListMultiSelection = new RawContextKey<boolean>(\n\t\"listMultiSelection\",\n\tfalse,\n);\nexport const WorkbenchListSelectionNavigation = new RawContextKey<boolean>(\n\t\"listSelectionNavigation\",\n\tfalse,\n);\nexport const WorkbenchListSupportsFind = new RawContextKey<boolean>(\n\t\"listSupportsFind\",\n\ttrue,\n);\nexport const WorkbenchTreeElementCanCollapse = new RawContextKey<boolean>(\n\t\"treeElementCanCollapse\",\n\tfalse,\n);\nexport const WorkbenchTreeElementHasParent = new RawContextKey<boolean>(\n\t\"treeElementHasParent\",\n\tfalse,\n);\nexport const WorkbenchTreeElementCanExpand = new RawContextKey<boolean>(\n\t\"treeElementCanExpand\",\n\tfalse,\n);\nexport const WorkbenchTreeElementHasChild = new RawContextKey<boolean>(\n\t\"treeElementHasChild\",\n\tfalse,\n);\nexport const WorkbenchTreeFindOpen = new RawContextKey<boolean>(\n\t\"treeFindOpen\",\n\tfalse,\n);\nconst WorkbenchListTypeNavigationModeKey = \"listTypeNavigationMode\";\n\n/**\n * @deprecated in favor of WorkbenchListTypeNavigationModeKey\n */\nconst WorkbenchListAutomaticKeyboardNavigationLegacyKey =\n\t\"listAutomaticKeyboardNavigation\";\n\nfunction createScopedContextKeyService(\n\tcontextKeyService: IContextKeyService,\n\twidget: ListWidget,\n): IScopedContextKeyService {\n\tconst result = contextKeyService.createScoped(widget.getHTMLElement());\n\tRawWorkbenchListFocusContextKey.bindTo(result);\n\treturn result;\n}\n\n// Note: We must declare IScrollObservarable as the arithmetic of concrete classes,\n// instead of object type like { onDidScroll: Event<any>; ... }. The latter will not mark\n// those properties as referenced during tree-shaking, causing them to be shaked away.\ntype IScrollObservarable =\n\t| Exclude<WorkbenchListWidget, WorkbenchPagedList<any>>\n\t| List<any>;\n\nfunction createScrollObserver(\n\tcontextKeyService: IContextKeyService,\n\twidget: IScrollObservarable,\n): IDisposable {\n\tconst listScrollAt =\n\t\tRawWorkbenchListScrollAtBoundaryContextKey.bindTo(contextKeyService);\n\tconst update = () => {\n\t\tconst atTop = widget.scrollTop === 0;\n\n\t\t// We need a threshold `1` since scrollHeight is rounded.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#determine_if_an_element_has_been_totally_scrolled\n\t\tconst atBottom =\n\t\t\twidget.scrollHeight - widget.renderHeight - widget.scrollTop < 1;\n\t\tif (atTop && atBottom) {\n\t\t\tlistScrollAt.set(\"both\");\n\t\t} else if (atTop) {\n\t\t\tlistScrollAt.set(\"top\");\n\t\t} else if (atBottom) {\n\t\t\tlistScrollAt.set(\"bottom\");\n\t\t} else {\n\t\t\tlistScrollAt.set(\"none\");\n\t\t}\n\t};\n\tupdate();\n\treturn widget.onDidScroll(update);\n}\n\nconst multiSelectModifierSettingKey = \"workbench.list.multiSelectModifier\";\nconst openModeSettingKey = \"workbench.list.openMode\";\nconst horizontalScrollingKey = \"workbench.list.horizontalScrolling\";\nconst defaultFindModeSettingKey = \"workbench.list.defaultFindMode\";\nconst typeNavigationModeSettingKey = \"workbench.list.typeNavigationMode\";\n/** @deprecated in favor of `workbench.list.defaultFindMode` and `workbench.list.typeNavigationMode` */\nconst keyboardNavigationSettingKey = \"workbench.list.keyboardNavigation\";\nconst scrollByPageKey = \"workbench.list.scrollByPage\";\nconst defaultFindMatchTypeSettingKey = \"workbench.list.defaultFindMatchType\";\nconst treeIndentKey = \"workbench.tree.indent\";\nconst treeRenderIndentGuidesKey = \"workbench.tree.renderIndentGuides\";\nconst listSmoothScrolling = \"workbench.list.smoothScrolling\";\nconst mouseWheelScrollSensitivityKey =\n\t\"workbench.list.mouseWheelScrollSensitivity\";\nconst fastScrollSensitivityKey = \"workbench.list.fastScrollSensitivity\";\nconst treeExpandMode = \"workbench.tree.expandMode\";\nconst treeStickyScroll = \"workbench.tree.enableStickyScroll\";\nconst treeStickyScrollMaxElements = \"workbench.tree.stickyScrollMaxItemCount\";\n\nfunction useAltAsMultipleSelectionModifier(\n\tconfigurationService: IConfigurationService,\n): boolean {\n\treturn (\n\t\tconfigurationService.getValue(multiSelectModifierSettingKey) === \"alt\"\n\t);\n}\n\nclass MultipleSelectionController<T>\n\textends Disposable\n\timplements IMultipleSelectionController<T>\n{\n\tprivate useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(private configurationService: IConfigurationService) {\n\t\tsuper();\n\n\t\tthis.useAltAsMultipleSelectionModifier =\n\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis.useAltAsMultipleSelectionModifier =\n\t\t\t\t\t\tuseAltAsMultipleSelectionModifier(\n\t\t\t\t\t\t\tthis.configurationService,\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tisSelectionSingleChangeEvent(\n\t\tevent: IListMouseEvent<T> | IListTouchEvent<T>,\n\t): boolean {\n\t\tif (this.useAltAsMultipleSelectionModifier) {\n\t\t\treturn event.browserEvent.altKey;\n\t\t}\n\n\t\treturn isSelectionSingleChangeEvent(event);\n\t}\n\n\tisSelectionRangeChangeEvent(\n\t\tevent: IListMouseEvent<T> | IListTouchEvent<T>,\n\t): boolean {\n\t\treturn isSelectionRangeChangeEvent(event);\n\t}\n}\n\nfunction toWorkbenchListOptions<T>(\n\taccessor: ServicesAccessor,\n\toptions: IListOptions<T>,\n): [IListOptions<T>, IDisposable] {\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst keybindingService = accessor.get(IKeybindingService);\n\n\tconst disposables = new DisposableStore();\n\tconst result: IListOptions<T> = {\n\t\t...options,\n\t\tkeyboardNavigationDelegate: {\n\t\t\tmightProducePrintableCharacter(e) {\n\t\t\t\treturn keybindingService.mightProducePrintableCharacter(e);\n\t\t\t},\n\t\t},\n\t\tsmoothScrolling: Boolean(\n\t\t\tconfigurationService.getValue(listSmoothScrolling),\n\t\t),\n\t\tmouseWheelScrollSensitivity: configurationService.getValue<number>(\n\t\t\tmouseWheelScrollSensitivityKey,\n\t\t),\n\t\tfastScrollSensitivity: configurationService.getValue<number>(\n\t\t\tfastScrollSensitivityKey,\n\t\t),\n\t\tmultipleSelectionController:\n\t\t\toptions.multipleSelectionController ??\n\t\t\tdisposables.add(\n\t\t\t\tnew MultipleSelectionController(configurationService),\n\t\t\t),\n\t\tkeyboardNavigationEventFilter:\n\t\t\tcreateKeyboardNavigationEventFilter(keybindingService),\n\t\tscrollByPage: Boolean(configurationService.getValue(scrollByPageKey)),\n\t};\n\n\treturn [result, disposables];\n}\n\nexport interface IWorkbenchListOptionsUpdate extends IListOptionsUpdate {\n\treadonly overrideStyles?: IStyleOverride<IListStyles>;\n}\n\nexport interface IWorkbenchListOptions<T>\n\textends IWorkbenchListOptionsUpdate,\n\t\tIResourceNavigatorOptions,\n\t\tIListOptions<T> {\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchList<T> extends List<T> {\n\treadonly contextKeyService: IScopedContextKeyService;\n\tprivate listSupportsMultiSelect: IContextKey<boolean>;\n\tprivate listHasSelectionOrFocus: IContextKey<boolean>;\n\tprivate listDoubleSelection: IContextKey<boolean>;\n\tprivate listMultiSelection: IContextKey<boolean>;\n\tprivate horizontalScrolling: boolean | undefined;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\tprivate navigator: ListResourceNavigator<T>;\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> {\n\t\treturn this.navigator.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: IListRenderer<T, any>[],\n\t\toptions: IWorkbenchListOptions<T>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tconst horizontalScrolling =\n\t\t\ttypeof options.horizontalScrolling !== \"undefined\"\n\t\t\t\t? options.horizontalScrolling\n\t\t\t\t: Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(horizontalScrollingKey),\n\t\t\t\t\t);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] =\n\t\t\tinstantiationService.invokeFunction(\n\t\t\t\ttoWorkbenchListOptions,\n\t\t\t\toptions,\n\t\t\t);\n\n\t\tsuper(user, container, delegate, renderers, {\n\t\t\tkeyboardSupport: false,\n\t\t\t...workbenchListOptions,\n\t\t\thorizontalScrolling,\n\t\t});\n\n\t\tthis.disposables.add(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(\n\t\t\tcontextKeyService,\n\t\t\tthis,\n\t\t);\n\n\t\tthis.disposables.add(\n\t\t\tcreateScrollObserver(this.contextKeyService, this),\n\t\t);\n\n\t\tthis.listSupportsMultiSelect =\n\t\t\tWorkbenchListSupportsMultiSelectContextKey.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\tthis.listSupportsMultiSelect.set(\n\t\t\toptions.multipleSelectionSupport !== false,\n\t\t);\n\n\t\tconst listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tlistSelectionNavigation.set(Boolean(options.selectionNavigation));\n\n\t\tthis.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.listMultiSelection = WorkbenchListMultiSelection.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.horizontalScrolling = options.horizontalScrolling;\n\n\t\tthis._useAltAsMultipleSelectionModifier =\n\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.add(this.contextKeyService);\n\t\tthis.disposables.add((listService as ListService).register(this));\n\n\t\tthis.updateStyles(options.overrideStyles);\n\n\t\tthis.disposables.add(\n\t\t\tthis.onDidChangeSelection(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\t\tthis.listHasSelectionOrFocus.set(\n\t\t\t\t\t\tselection.length > 0 || focus.length > 0,\n\t\t\t\t\t);\n\t\t\t\t\tthis.listMultiSelection.set(selection.length > 1);\n\t\t\t\t\tthis.listDoubleSelection.set(selection.length === 2);\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t\tthis.disposables.add(\n\t\t\tthis.onDidChangeFocus(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.listHasSelectionOrFocus.set(\n\t\t\t\t\tselection.length > 0 || focus.length > 0,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tthis.disposables.add(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis._useAltAsMultipleSelectionModifier =\n\t\t\t\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\t\t\t\t}\n\n\t\t\t\tlet options: IListOptionsUpdate = {};\n\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(horizontalScrollingKey) &&\n\t\t\t\t\tthis.horizontalScrolling === undefined\n\t\t\t\t) {\n\t\t\t\t\tconst horizontalScrolling = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(horizontalScrollingKey),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, horizontalScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(scrollByPageKey)) {\n\t\t\t\t\tconst scrollByPage = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(scrollByPageKey),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, scrollByPage };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(listSmoothScrolling)) {\n\t\t\t\t\tconst smoothScrolling = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(listSmoothScrolling),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, smoothScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n\t\t\t\t\tconst mouseWheelScrollSensitivity =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\tmouseWheelScrollSensitivityKey,\n\t\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, mouseWheelScrollSensitivity };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(fastScrollSensitivityKey)) {\n\t\t\t\t\tconst fastScrollSensitivity =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\tfastScrollSensitivityKey,\n\t\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, fastScrollSensitivity };\n\t\t\t\t}\n\t\t\t\tif (Object.keys(options).length > 0) {\n\t\t\t\t\tthis.updateOptions(options);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.navigator = new ListResourceNavigator(this, {\n\t\t\tconfigurationService,\n\t\t\t...options,\n\t\t});\n\t\tthis.disposables.add(this.navigator);\n\t}\n\n\toverride updateOptions(options: IWorkbenchListOptionsUpdate): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles !== undefined) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\n\t\tif (options.multipleSelectionSupport !== undefined) {\n\t\t\tthis.listSupportsMultiSelect.set(\n\t\t\t\t!!options.multipleSelectionSupport,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateStyles(\n\t\tstyles: IStyleOverride<IListStyles> | undefined,\n\t): void {\n\t\tthis.style(styles ? getListStyles(styles) : defaultListStyles);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n}\n\nexport interface IWorkbenchPagedListOptions<T>\n\textends IWorkbenchListOptionsUpdate,\n\t\tIResourceNavigatorOptions,\n\t\tIPagedListOptions<T> {\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchPagedList<T> extends PagedList<T> {\n\treadonly contextKeyService: IScopedContextKeyService;\n\tprivate readonly disposables: DisposableStore;\n\tprivate listSupportsMultiSelect: IContextKey<boolean>;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\tprivate horizontalScrolling: boolean | undefined;\n\tprivate navigator: ListResourceNavigator<T>;\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> {\n\t\treturn this.navigator.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<number>,\n\t\trenderers: IPagedRenderer<T, any>[],\n\t\toptions: IWorkbenchPagedListOptions<T>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tconst horizontalScrolling =\n\t\t\ttypeof options.horizontalScrolling !== \"undefined\"\n\t\t\t\t? options.horizontalScrolling\n\t\t\t\t: Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(horizontalScrollingKey),\n\t\t\t\t\t);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] =\n\t\t\tinstantiationService.invokeFunction(\n\t\t\t\ttoWorkbenchListOptions,\n\t\t\t\toptions,\n\t\t\t);\n\t\tsuper(user, container, delegate, renderers, {\n\t\t\tkeyboardSupport: false,\n\t\t\t...workbenchListOptions,\n\t\t\thorizontalScrolling,\n\t\t});\n\n\t\tthis.disposables = new DisposableStore();\n\t\tthis.disposables.add(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(\n\t\t\tcontextKeyService,\n\t\t\tthis,\n\t\t);\n\n\t\tthis.disposables.add(\n\t\t\tcreateScrollObserver(this.contextKeyService, this.widget),\n\t\t);\n\n\t\tthis.horizontalScrolling = options.horizontalScrolling;\n\n\t\tthis.listSupportsMultiSelect =\n\t\t\tWorkbenchListSupportsMultiSelectContextKey.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\tthis.listSupportsMultiSelect.set(\n\t\t\toptions.multipleSelectionSupport !== false,\n\t\t);\n\n\t\tconst listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tlistSelectionNavigation.set(Boolean(options.selectionNavigation));\n\n\t\tthis._useAltAsMultipleSelectionModifier =\n\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.add(this.contextKeyService);\n\t\tthis.disposables.add((listService as ListService).register(this));\n\n\t\tthis.updateStyles(options.overrideStyles);\n\n\t\tthis.disposables.add(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis._useAltAsMultipleSelectionModifier =\n\t\t\t\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\t\t\t\t}\n\n\t\t\t\tlet options: IListOptionsUpdate = {};\n\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(horizontalScrollingKey) &&\n\t\t\t\t\tthis.horizontalScrolling === undefined\n\t\t\t\t) {\n\t\t\t\t\tconst horizontalScrolling = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(horizontalScrollingKey),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, horizontalScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(scrollByPageKey)) {\n\t\t\t\t\tconst scrollByPage = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(scrollByPageKey),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, scrollByPage };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(listSmoothScrolling)) {\n\t\t\t\t\tconst smoothScrolling = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(listSmoothScrolling),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, smoothScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n\t\t\t\t\tconst mouseWheelScrollSensitivity =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\tmouseWheelScrollSensitivityKey,\n\t\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, mouseWheelScrollSensitivity };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(fastScrollSensitivityKey)) {\n\t\t\t\t\tconst fastScrollSensitivity =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\tfastScrollSensitivityKey,\n\t\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, fastScrollSensitivity };\n\t\t\t\t}\n\t\t\t\tif (Object.keys(options).length > 0) {\n\t\t\t\t\tthis.updateOptions(options);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.navigator = new ListResourceNavigator(this, {\n\t\t\tconfigurationService,\n\t\t\t...options,\n\t\t});\n\t\tthis.disposables.add(this.navigator);\n\t}\n\n\toverride updateOptions(options: IWorkbenchListOptionsUpdate): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles !== undefined) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\n\t\tif (options.multipleSelectionSupport !== undefined) {\n\t\t\tthis.listSupportsMultiSelect.set(\n\t\t\t\t!!options.multipleSelectionSupport,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateStyles(\n\t\tstyles: IStyleOverride<IListStyles> | undefined,\n\t): void {\n\t\tthis.style(styles ? getListStyles(styles) : defaultListStyles);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.disposables.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface IWorkbenchTableOptionsUpdate extends ITableOptionsUpdate {\n\treadonly overrideStyles?: IStyleOverride<IListStyles>;\n}\n\nexport interface IWorkbenchTableOptions<T>\n\textends IWorkbenchTableOptionsUpdate,\n\t\tIResourceNavigatorOptions,\n\t\tITableOptions<T> {\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchTable<TRow> extends Table<TRow> {\n\treadonly contextKeyService: IScopedContextKeyService;\n\tprivate listSupportsMultiSelect: IContextKey<boolean>;\n\tprivate listHasSelectionOrFocus: IContextKey<boolean>;\n\tprivate listDoubleSelection: IContextKey<boolean>;\n\tprivate listMultiSelection: IContextKey<boolean>;\n\tprivate horizontalScrolling: boolean | undefined;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\tprivate navigator: TableResourceNavigator<TRow>;\n\tget onDidOpen(): Event<IOpenEvent<TRow | undefined>> {\n\t\treturn this.navigator.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: ITableVirtualDelegate<TRow>,\n\t\tcolumns: ITableColumn<TRow, any>[],\n\t\trenderers: ITableRenderer<TRow, any>[],\n\t\toptions: IWorkbenchTableOptions<TRow>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tconst horizontalScrolling =\n\t\t\ttypeof options.horizontalScrolling !== \"undefined\"\n\t\t\t\t? options.horizontalScrolling\n\t\t\t\t: Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(horizontalScrollingKey),\n\t\t\t\t\t);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] =\n\t\t\tinstantiationService.invokeFunction(\n\t\t\t\ttoWorkbenchListOptions,\n\t\t\t\toptions,\n\t\t\t);\n\n\t\tsuper(user, container, delegate, columns, renderers, {\n\t\t\tkeyboardSupport: false,\n\t\t\t...workbenchListOptions,\n\t\t\thorizontalScrolling,\n\t\t});\n\n\t\tthis.disposables.add(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(\n\t\t\tcontextKeyService,\n\t\t\tthis,\n\t\t);\n\n\t\tthis.disposables.add(\n\t\t\tcreateScrollObserver(this.contextKeyService, this),\n\t\t);\n\n\t\tthis.listSupportsMultiSelect =\n\t\t\tWorkbenchListSupportsMultiSelectContextKey.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\tthis.listSupportsMultiSelect.set(\n\t\t\toptions.multipleSelectionSupport !== false,\n\t\t);\n\n\t\tconst listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tlistSelectionNavigation.set(Boolean(options.selectionNavigation));\n\n\t\tthis.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.listMultiSelection = WorkbenchListMultiSelection.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.horizontalScrolling = options.horizontalScrolling;\n\n\t\tthis._useAltAsMultipleSelectionModifier =\n\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.add(this.contextKeyService);\n\t\tthis.disposables.add((listService as ListService).register(this));\n\n\t\tthis.updateStyles(options.overrideStyles);\n\n\t\tthis.disposables.add(\n\t\t\tthis.onDidChangeSelection(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\t\tthis.listHasSelectionOrFocus.set(\n\t\t\t\t\t\tselection.length > 0 || focus.length > 0,\n\t\t\t\t\t);\n\t\t\t\t\tthis.listMultiSelection.set(selection.length > 1);\n\t\t\t\t\tthis.listDoubleSelection.set(selection.length === 2);\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t\tthis.disposables.add(\n\t\t\tthis.onDidChangeFocus(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.listHasSelectionOrFocus.set(\n\t\t\t\t\tselection.length > 0 || focus.length > 0,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tthis.disposables.add(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis._useAltAsMultipleSelectionModifier =\n\t\t\t\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\t\t\t\t}\n\n\t\t\t\tlet options: IListOptionsUpdate = {};\n\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(horizontalScrollingKey) &&\n\t\t\t\t\tthis.horizontalScrolling === undefined\n\t\t\t\t) {\n\t\t\t\t\tconst horizontalScrolling = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(horizontalScrollingKey),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, horizontalScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(scrollByPageKey)) {\n\t\t\t\t\tconst scrollByPage = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(scrollByPageKey),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, scrollByPage };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(listSmoothScrolling)) {\n\t\t\t\t\tconst smoothScrolling = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(listSmoothScrolling),\n\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, smoothScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n\t\t\t\t\tconst mouseWheelScrollSensitivity =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\tmouseWheelScrollSensitivityKey,\n\t\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, mouseWheelScrollSensitivity };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(fastScrollSensitivityKey)) {\n\t\t\t\t\tconst fastScrollSensitivity =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\tfastScrollSensitivityKey,\n\t\t\t\t\t\t);\n\t\t\t\t\toptions = { ...options, fastScrollSensitivity };\n\t\t\t\t}\n\t\t\t\tif (Object.keys(options).length > 0) {\n\t\t\t\t\tthis.updateOptions(options);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.navigator = new TableResourceNavigator(this, {\n\t\t\tconfigurationService,\n\t\t\t...options,\n\t\t});\n\t\tthis.disposables.add(this.navigator);\n\t}\n\n\toverride updateOptions(options: IWorkbenchTableOptionsUpdate): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles !== undefined) {\n\t\t\tthis.updateStyles(options.overrideStyles);\n\t\t}\n\n\t\tif (options.multipleSelectionSupport !== undefined) {\n\t\t\tthis.listSupportsMultiSelect.set(\n\t\t\t\t!!options.multipleSelectionSupport,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateStyles(\n\t\tstyles: IStyleOverride<ITableStyles> | undefined,\n\t): void {\n\t\tthis.style(styles ? getListStyles(styles) : defaultListStyles);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.disposables.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface IOpenResourceOptions {\n\teditorOptions: IEditorOptions;\n\tsideBySide: boolean;\n\telement: any;\n\tpayload: any;\n}\n\nexport interface IOpenEvent<T> {\n\teditorOptions: IEditorOptions;\n\tsideBySide: boolean;\n\telement: T;\n\tbrowserEvent?: UIEvent;\n}\n\nexport interface IResourceNavigatorOptions {\n\treadonly configurationService?: IConfigurationService;\n\treadonly openOnSingleClick?: boolean;\n}\n\nexport interface SelectionKeyboardEvent extends KeyboardEvent {\n\tpreserveFocus?: boolean;\n\tpinned?: boolean;\n\t__forceEvent?: boolean;\n}\n\nexport function getSelectionKeyboardEvent(\n\ttypeArg = \"keydown\",\n\tpreserveFocus?: boolean,\n\tpinned?: boolean,\n): SelectionKeyboardEvent {\n\tconst e = new KeyboardEvent(typeArg);\n\t(<SelectionKeyboardEvent>e).preserveFocus = preserveFocus;\n\t(<SelectionKeyboardEvent>e).pinned = pinned;\n\t(<SelectionKeyboardEvent>e).__forceEvent = true;\n\n\treturn e;\n}\n\nabstract class ResourceNavigator<T> extends Disposable {\n\tprivate openOnSingleClick: boolean;\n\n\tprivate readonly _onDidOpen = this._register(\n\t\tnew Emitter<IOpenEvent<T | undefined>>(),\n\t);\n\treadonly onDidOpen: Event<IOpenEvent<T | undefined>> =\n\t\tthis._onDidOpen.event;\n\n\tconstructor(\n\t\tprotected readonly widget: ListWidget,\n\t\toptions?: IResourceNavigatorOptions,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tEvent.filter(this.widget.onDidChangeSelection, (e) =>\n\t\t\t\tisKeyboardEvent(e.browserEvent),\n\t\t\t)((e) => this.onSelectionFromKeyboard(e)),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.widget.onPointer(\n\t\t\t\t(e: { browserEvent: MouseEvent; element: T | undefined }) =>\n\t\t\t\t\tthis.onPointer(e.element, e.browserEvent),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.widget.onMouseDblClick(\n\t\t\t\t(e: { browserEvent: MouseEvent; element: T | undefined }) =>\n\t\t\t\t\tthis.onMouseDblClick(e.element, e.browserEvent),\n\t\t\t),\n\t\t);\n\n\t\tif (\n\t\t\ttypeof options?.openOnSingleClick !== \"boolean\" &&\n\t\t\toptions?.configurationService\n\t\t) {\n\t\t\tthis.openOnSingleClick =\n\t\t\t\toptions?.configurationService.getValue(openModeSettingKey) !==\n\t\t\t\t\"doubleClick\";\n\t\t\tthis._register(\n\t\t\t\toptions?.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\t\tif (e.affectsConfiguration(openModeSettingKey)) {\n\t\t\t\t\t\tthis.openOnSingleClick =\n\t\t\t\t\t\t\toptions?.configurationService!.getValue(\n\t\t\t\t\t\t\t\topenModeSettingKey,\n\t\t\t\t\t\t\t) !== \"doubleClick\";\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.openOnSingleClick = options?.openOnSingleClick ?? true;\n\t\t}\n\t}\n\n\tprivate onSelectionFromKeyboard(event: ITreeEvent<any>): void {\n\t\tif (event.elements.length !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectionKeyboardEvent =\n\t\t\tevent.browserEvent as SelectionKeyboardEvent;\n\t\tconst preserveFocus =\n\t\t\ttypeof selectionKeyboardEvent.preserveFocus === \"boolean\"\n\t\t\t\t? selectionKeyboardEvent.preserveFocus\n\t\t\t\t: true;\n\t\tconst pinned =\n\t\t\ttypeof selectionKeyboardEvent.pinned === \"boolean\"\n\t\t\t\t? selectionKeyboardEvent.pinned\n\t\t\t\t: !preserveFocus;\n\t\tconst sideBySide = false;\n\n\t\tthis._open(\n\t\t\tthis.getSelectedElement(),\n\t\t\tpreserveFocus,\n\t\t\tpinned,\n\t\t\tsideBySide,\n\t\t\tevent.browserEvent,\n\t\t);\n\t}\n\n\tprivate onPointer(element: T | undefined, browserEvent: MouseEvent): void {\n\t\tif (!this.openOnSingleClick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isDoubleClick = browserEvent.detail === 2;\n\n\t\tif (isDoubleClick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isMiddleClick = browserEvent.button === 1;\n\t\tconst preserveFocus = true;\n\t\tconst pinned = isMiddleClick;\n\t\tconst sideBySide =\n\t\t\tbrowserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n\n\t\tthis._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n\t}\n\n\tprivate onMouseDblClick(\n\t\telement: T | undefined,\n\t\tbrowserEvent?: MouseEvent,\n\t): void {\n\t\tif (!browserEvent) {\n\t\t\treturn;\n\t\t}\n\n\t\t// copied from AbstractTree\n\t\tconst target = browserEvent.target as HTMLElement;\n\t\tconst onTwistie =\n\t\t\ttarget.classList.contains(\"monaco-tl-twistie\") ||\n\t\t\t(target.classList.contains(\"monaco-icon-label\") &&\n\t\t\t\ttarget.classList.contains(\"folder-icon\") &&\n\t\t\t\tbrowserEvent.offsetX < 16);\n\n\t\tif (onTwistie) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst preserveFocus = false;\n\t\tconst pinned = true;\n\t\tconst sideBySide =\n\t\t\tbrowserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n\n\t\tthis._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n\t}\n\n\tprivate _open(\n\t\telement: T | undefined,\n\t\tpreserveFocus: boolean,\n\t\tpinned: boolean,\n\t\tsideBySide: boolean,\n\t\tbrowserEvent?: UIEvent,\n\t): void {\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDidOpen.fire({\n\t\t\teditorOptions: {\n\t\t\t\tpreserveFocus,\n\t\t\t\tpinned,\n\t\t\t\trevealIfVisible: true,\n\t\t\t},\n\t\t\tsideBySide,\n\t\t\telement,\n\t\t\tbrowserEvent,\n\t\t});\n\t}\n\n\tabstract getSelectedElement(): T | undefined;\n}\n\nclass ListResourceNavigator<T> extends ResourceNavigator<T> {\n\tprotected override readonly widget: List<T> | PagedList<T>;\n\n\tconstructor(\n\t\twidget: List<T> | PagedList<T>,\n\t\toptions: IResourceNavigatorOptions,\n\t) {\n\t\tsuper(widget, options);\n\t\tthis.widget = widget;\n\t}\n\n\tgetSelectedElement(): T | undefined {\n\t\treturn this.widget.getSelectedElements()[0];\n\t}\n}\n\nclass TableResourceNavigator<TRow> extends ResourceNavigator<TRow> {\n\tprotected declare readonly widget: Table<TRow>;\n\n\tconstructor(widget: Table<TRow>, options: IResourceNavigatorOptions) {\n\t\tsuper(widget, options);\n\t}\n\n\tgetSelectedElement(): TRow | undefined {\n\t\treturn this.widget.getSelectedElements()[0];\n\t}\n}\n\nclass TreeResourceNavigator<T, TFilterData> extends ResourceNavigator<T> {\n\tprotected declare readonly widget:\n\t\t| ObjectTree<T, TFilterData>\n\t\t| CompressibleObjectTree<T, TFilterData>\n\t\t| DataTree<any, T, TFilterData>\n\t\t| AsyncDataTree<any, T, TFilterData>\n\t\t| CompressibleAsyncDataTree<any, T, TFilterData>;\n\n\tconstructor(\n\t\twidget:\n\t\t\t| ObjectTree<T, TFilterData>\n\t\t\t| CompressibleObjectTree<T, TFilterData>\n\t\t\t| DataTree<any, T, TFilterData>\n\t\t\t| AsyncDataTree<any, T, TFilterData>\n\t\t\t| CompressibleAsyncDataTree<any, T, TFilterData>,\n\t\toptions: IResourceNavigatorOptions,\n\t) {\n\t\tsuper(widget, options);\n\t}\n\n\tgetSelectedElement(): T | undefined {\n\t\treturn this.widget.getSelection()[0] ?? undefined;\n\t}\n}\n\nfunction createKeyboardNavigationEventFilter(\n\tkeybindingService: IKeybindingService,\n): IKeyboardNavigationEventFilter {\n\tlet inMultiChord = false;\n\n\treturn (event) => {\n\t\tif (event.toKeyCodeChord().isModifierKey()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (inMultiChord) {\n\t\t\tinMultiChord = false;\n\t\t\treturn false;\n\t\t}\n\n\t\tconst result = keybindingService.softDispatch(event, event.target);\n\n\t\tif (result.kind === ResultKind.MoreChordsNeeded) {\n\t\t\tinMultiChord = true;\n\t\t\treturn false;\n\t\t}\n\n\t\tinMultiChord = false;\n\t\treturn result.kind === ResultKind.NoMatchingKb;\n\t};\n}\n\nexport interface IWorkbenchObjectTreeOptions<T, TFilterData>\n\textends IObjectTreeOptions<T, TFilterData>,\n\t\tIResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly overrideStyles?: IStyleOverride<IListStyles>;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchObjectTree<\n\tT extends NonNullable<any>,\n\tTFilterData = void,\n> extends ObjectTree<T, TFilterData> {\n\tprivate internals: WorkbenchTreeInternals<any, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService {\n\t\treturn this.internals.contextKeyService;\n\t}\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this.internals.useAltAsMultipleSelectionModifier;\n\t}\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> {\n\t\treturn this.internals.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\toptions: IWorkbenchObjectTreeOptions<T, TFilterData>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tconst {\n\t\t\toptions: treeOptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\tdisposable,\n\t\t} = instantiationService.invokeFunction(\n\t\t\tworkbenchTreeDataPreamble,\n\t\t\toptions as any,\n\t\t);\n\t\tsuper(user, container, delegate, renderers, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(\n\t\t\tthis,\n\t\t\toptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\toptions.overrideStyles,\n\t\t\tcontextKeyService,\n\t\t\tlistService,\n\t\t\tconfigurationService,\n\t\t);\n\t\tthis.disposables.add(this.internals);\n\t}\n\n\toverride updateOptions(options: IAbstractTreeOptionsUpdate): void {\n\t\tsuper.updateOptions(options);\n\t\tthis.internals.updateOptions(options);\n\t}\n}\n\nexport interface IWorkbenchCompressibleObjectTreeOptionsUpdate\n\textends ICompressibleObjectTreeOptionsUpdate {\n\treadonly overrideStyles?: IStyleOverride<IListStyles>;\n}\n\nexport interface IWorkbenchCompressibleObjectTreeOptions<T, TFilterData>\n\textends IWorkbenchCompressibleObjectTreeOptionsUpdate,\n\t\tICompressibleObjectTreeOptions<T, TFilterData>,\n\t\tIResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchCompressibleObjectTree<\n\tT extends NonNullable<any>,\n\tTFilterData = void,\n> extends CompressibleObjectTree<T, TFilterData> {\n\tprivate internals: WorkbenchTreeInternals<any, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService {\n\t\treturn this.internals.contextKeyService;\n\t}\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this.internals.useAltAsMultipleSelectionModifier;\n\t}\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> {\n\t\treturn this.internals.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ICompressibleTreeRenderer<T, TFilterData, any>[],\n\t\toptions: IWorkbenchCompressibleObjectTreeOptions<T, TFilterData>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tconst {\n\t\t\toptions: treeOptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\tdisposable,\n\t\t} = instantiationService.invokeFunction(\n\t\t\tworkbenchTreeDataPreamble,\n\t\t\toptions as any,\n\t\t);\n\t\tsuper(user, container, delegate, renderers, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(\n\t\t\tthis,\n\t\t\toptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\toptions.overrideStyles,\n\t\t\tcontextKeyService,\n\t\t\tlistService,\n\t\t\tconfigurationService,\n\t\t);\n\t\tthis.disposables.add(this.internals);\n\t}\n\n\toverride updateOptions(\n\t\toptions: IWorkbenchCompressibleObjectTreeOptionsUpdate = {},\n\t): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.internals.updateStyleOverrides(options.overrideStyles);\n\t\t}\n\n\t\tthis.internals.updateOptions(options);\n\t}\n}\n\nexport interface IWorkbenchDataTreeOptionsUpdate\n\textends IAbstractTreeOptionsUpdate {\n\treadonly overrideStyles?: IStyleOverride<IListStyles>;\n}\n\nexport interface IWorkbenchDataTreeOptions<T, TFilterData>\n\textends IWorkbenchDataTreeOptionsUpdate,\n\t\tIDataTreeOptions<T, TFilterData>,\n\t\tIResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchDataTree<TInput, T, TFilterData = void> extends DataTree<\n\tTInput,\n\tT,\n\tTFilterData\n> {\n\tprivate internals: WorkbenchTreeInternals<TInput, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService {\n\t\treturn this.internals.contextKeyService;\n\t}\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this.internals.useAltAsMultipleSelectionModifier;\n\t}\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> {\n\t\treturn this.internals.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tdataSource: IDataSource<TInput, T>,\n\t\toptions: IWorkbenchDataTreeOptions<T, TFilterData>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tconst {\n\t\t\toptions: treeOptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\tdisposable,\n\t\t} = instantiationService.invokeFunction(\n\t\t\tworkbenchTreeDataPreamble,\n\t\t\toptions as any,\n\t\t);\n\t\tsuper(user, container, delegate, renderers, dataSource, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(\n\t\t\tthis,\n\t\t\toptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\toptions.overrideStyles,\n\t\t\tcontextKeyService,\n\t\t\tlistService,\n\t\t\tconfigurationService,\n\t\t);\n\t\tthis.disposables.add(this.internals);\n\t}\n\n\toverride updateOptions(\n\t\toptions: IWorkbenchDataTreeOptionsUpdate = {},\n\t): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles !== undefined) {\n\t\t\tthis.internals.updateStyleOverrides(options.overrideStyles);\n\t\t}\n\n\t\tthis.internals.updateOptions(options);\n\t}\n}\n\nexport interface IWorkbenchAsyncDataTreeOptionsUpdate\n\textends IAsyncDataTreeOptionsUpdate {\n\treadonly overrideStyles?: IStyleOverride<IListStyles>;\n}\n\nexport interface IWorkbenchAsyncDataTreeOptions<T, TFilterData>\n\textends IWorkbenchAsyncDataTreeOptionsUpdate,\n\t\tIAsyncDataTreeOptions<T, TFilterData>,\n\t\tIResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchAsyncDataTree<\n\tTInput,\n\tT,\n\tTFilterData = void,\n> extends AsyncDataTree<TInput, T, TFilterData> {\n\tprivate internals: WorkbenchTreeInternals<TInput, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService {\n\t\treturn this.internals.contextKeyService;\n\t}\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this.internals.useAltAsMultipleSelectionModifier;\n\t}\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> {\n\t\treturn this.internals.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tdataSource: IAsyncDataSource<TInput, T>,\n\t\toptions: IWorkbenchAsyncDataTreeOptions<T, TFilterData>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tconst {\n\t\t\toptions: treeOptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\tdisposable,\n\t\t} = instantiationService.invokeFunction(\n\t\t\tworkbenchTreeDataPreamble,\n\t\t\toptions as any,\n\t\t);\n\t\tsuper(user, container, delegate, renderers, dataSource, treeOptions);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(\n\t\t\tthis,\n\t\t\toptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\toptions.overrideStyles,\n\t\t\tcontextKeyService,\n\t\t\tlistService,\n\t\t\tconfigurationService,\n\t\t);\n\t\tthis.disposables.add(this.internals);\n\t}\n\n\toverride updateOptions(\n\t\toptions: IWorkbenchAsyncDataTreeOptionsUpdate = {},\n\t): void {\n\t\tsuper.updateOptions(options);\n\n\t\tif (options.overrideStyles) {\n\t\t\tthis.internals.updateStyleOverrides(options.overrideStyles);\n\t\t}\n\n\t\tthis.internals.updateOptions(options);\n\t}\n}\n\nexport interface IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData>\n\textends ICompressibleAsyncDataTreeOptions<T, TFilterData>,\n\t\tIResourceNavigatorOptions {\n\treadonly accessibilityProvider: IListAccessibilityProvider<T>;\n\treadonly overrideStyles?: IStyleOverride<IListStyles>;\n\treadonly selectionNavigation?: boolean;\n}\n\nexport class WorkbenchCompressibleAsyncDataTree<\n\tTInput,\n\tT,\n\tTFilterData = void,\n> extends CompressibleAsyncDataTree<TInput, T, TFilterData> {\n\tprivate internals: WorkbenchTreeInternals<TInput, T, TFilterData>;\n\tget contextKeyService(): IContextKeyService {\n\t\treturn this.internals.contextKeyService;\n\t}\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this.internals.useAltAsMultipleSelectionModifier;\n\t}\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> {\n\t\treturn this.internals.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tvirtualDelegate: IListVirtualDelegate<T>,\n\t\tcompressionDelegate: ITreeCompressionDelegate<T>,\n\t\trenderers: ICompressibleTreeRenderer<T, TFilterData, any>[],\n\t\tdataSource: IAsyncDataSource<TInput, T>,\n\t\toptions: IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tconst {\n\t\t\toptions: treeOptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\tdisposable,\n\t\t} = instantiationService.invokeFunction(\n\t\t\tworkbenchTreeDataPreamble,\n\t\t\toptions as any,\n\t\t);\n\t\tsuper(\n\t\t\tuser,\n\t\t\tcontainer,\n\t\t\tvirtualDelegate,\n\t\t\tcompressionDelegate,\n\t\t\trenderers,\n\t\t\tdataSource,\n\t\t\ttreeOptions,\n\t\t);\n\t\tthis.disposables.add(disposable);\n\t\tthis.internals = new WorkbenchTreeInternals(\n\t\t\tthis,\n\t\t\toptions,\n\t\t\tgetTypeNavigationMode,\n\t\t\toptions.overrideStyles,\n\t\t\tcontextKeyService,\n\t\t\tlistService,\n\t\t\tconfigurationService,\n\t\t);\n\t\tthis.disposables.add(this.internals);\n\t}\n\n\toverride updateOptions(\n\t\toptions: ICompressibleAsyncDataTreeOptionsUpdate,\n\t): void {\n\t\tsuper.updateOptions(options);\n\t\tthis.internals.updateOptions(options);\n\t}\n}\n\nfunction getDefaultTreeFindMode(configurationService: IConfigurationService) {\n\tconst value = configurationService.getValue<\"highlight\" | \"filter\">(\n\t\tdefaultFindModeSettingKey,\n\t);\n\n\tif (value === \"highlight\") {\n\t\treturn TreeFindMode.Highlight;\n\t} else if (value === \"filter\") {\n\t\treturn TreeFindMode.Filter;\n\t}\n\n\tconst deprecatedValue = configurationService.getValue<\n\t\t\"simple\" | \"highlight\" | \"filter\"\n\t>(keyboardNavigationSettingKey);\n\n\tif (deprecatedValue === \"simple\" || deprecatedValue === \"highlight\") {\n\t\treturn TreeFindMode.Highlight;\n\t} else if (deprecatedValue === \"filter\") {\n\t\treturn TreeFindMode.Filter;\n\t}\n\n\treturn undefined;\n}\n\nfunction getDefaultTreeFindMatchType(\n\tconfigurationService: IConfigurationService,\n) {\n\tconst value = configurationService.getValue<\"fuzzy\" | \"contiguous\">(\n\t\tdefaultFindMatchTypeSettingKey,\n\t);\n\n\tif (value === \"fuzzy\") {\n\t\treturn TreeFindMatchType.Fuzzy;\n\t} else if (value === \"contiguous\") {\n\t\treturn TreeFindMatchType.Contiguous;\n\t}\n\treturn undefined;\n}\n\nfunction workbenchTreeDataPreamble<\n\tT,\n\tTFilterData,\n\tTOptions extends\n\t\t| IAbstractTreeOptions<T, TFilterData>\n\t\t| IAsyncDataTreeOptions<T, TFilterData>,\n>(\n\taccessor: ServicesAccessor,\n\toptions: TOptions,\n): {\n\toptions: TOptions;\n\tgetTypeNavigationMode: () => TypeNavigationMode | undefined;\n\tdisposable: IDisposable;\n} {\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst contextViewService = accessor.get(IContextViewService);\n\tconst contextKeyService = accessor.get(IContextKeyService);\n\tconst instantiationService = accessor.get(IInstantiationService);\n\n\tconst getTypeNavigationMode = () => {\n\t\t// give priority to the context key value to specify a value\n\t\tconst modeString = contextKeyService.getContextKeyValue<\n\t\t\t\"automatic\" | \"trigger\"\n\t\t>(WorkbenchListTypeNavigationModeKey);\n\n\t\tif (modeString === \"automatic\") {\n\t\t\treturn TypeNavigationMode.Automatic;\n\t\t} else if (modeString === \"trigger\") {\n\t\t\treturn TypeNavigationMode.Trigger;\n\t\t}\n\n\t\t// also check the deprecated context key to set the mode to 'trigger'\n\t\tconst modeBoolean = contextKeyService.getContextKeyValue<boolean>(\n\t\t\tWorkbenchListAutomaticKeyboardNavigationLegacyKey,\n\t\t);\n\n\t\tif (modeBoolean === false) {\n\t\t\treturn TypeNavigationMode.Trigger;\n\t\t}\n\n\t\t// finally, check the setting\n\t\tconst configString = configurationService.getValue<\n\t\t\t\"automatic\" | \"trigger\"\n\t\t>(typeNavigationModeSettingKey);\n\n\t\tif (configString === \"automatic\") {\n\t\t\treturn TypeNavigationMode.Automatic;\n\t\t} else if (configString === \"trigger\") {\n\t\t\treturn TypeNavigationMode.Trigger;\n\t\t}\n\n\t\treturn undefined;\n\t};\n\n\tconst horizontalScrolling =\n\t\toptions.horizontalScrolling !== undefined\n\t\t\t? options.horizontalScrolling\n\t\t\t: Boolean(configurationService.getValue(horizontalScrollingKey));\n\tconst [workbenchListOptions, disposable] =\n\t\tinstantiationService.invokeFunction(toWorkbenchListOptions, options);\n\tconst paddingBottom = options.paddingBottom;\n\tconst renderIndentGuides =\n\t\toptions.renderIndentGuides !== undefined\n\t\t\t? options.renderIndentGuides\n\t\t\t: configurationService.getValue<RenderIndentGuides>(\n\t\t\t\t\ttreeRenderIndentGuidesKey,\n\t\t\t\t);\n\n\treturn {\n\t\tgetTypeNavigationMode,\n\t\tdisposable,\n\t\toptions: {\n\t\t\t// ...options, // TODO@Joao why is this not splatted here?\n\t\t\tkeyboardSupport: false,\n\t\t\t...workbenchListOptions,\n\t\t\tindent:\n\t\t\t\ttypeof configurationService.getValue(treeIndentKey) === \"number\"\n\t\t\t\t\t? configurationService.getValue(treeIndentKey)\n\t\t\t\t\t: undefined,\n\t\t\trenderIndentGuides,\n\t\t\tsmoothScrolling: Boolean(\n\t\t\t\tconfigurationService.getValue(listSmoothScrolling),\n\t\t\t),\n\t\t\tdefaultFindMode: getDefaultTreeFindMode(configurationService),\n\t\t\tdefaultFindMatchType:\n\t\t\t\tgetDefaultTreeFindMatchType(configurationService),\n\t\t\thorizontalScrolling,\n\t\t\tscrollByPage: Boolean(\n\t\t\t\tconfigurationService.getValue(scrollByPageKey),\n\t\t\t),\n\t\t\tpaddingBottom: paddingBottom,\n\t\t\thideTwistiesOfChildlessElements:\n\t\t\t\toptions.hideTwistiesOfChildlessElements,\n\t\t\texpandOnlyOnTwistieClick:\n\t\t\t\toptions.expandOnlyOnTwistieClick ??\n\t\t\t\tconfigurationService.getValue<\"singleClick\" | \"doubleClick\">(\n\t\t\t\t\ttreeExpandMode,\n\t\t\t\t) === \"doubleClick\",\n\t\t\tcontextViewProvider: contextViewService as IContextViewProvider,\n\t\t\tfindWidgetStyles: defaultFindWidgetStyles,\n\t\t\tenableStickyScroll: Boolean(\n\t\t\t\tconfigurationService.getValue(treeStickyScroll),\n\t\t\t),\n\t\t\tstickyScrollMaxItemCount: Number(\n\t\t\t\tconfigurationService.getValue(treeStickyScrollMaxElements),\n\t\t\t),\n\t\t} as TOptions,\n\t};\n}\n\ninterface IWorkbenchTreeInternalsOptionsUpdate {\n\treadonly multipleSelectionSupport?: boolean;\n}\n\nclass WorkbenchTreeInternals<TInput, T, TFilterData> {\n\treadonly contextKeyService: IScopedContextKeyService;\n\tprivate listSupportsMultiSelect: IContextKey<boolean>;\n\tprivate listSupportFindWidget: IContextKey<boolean>;\n\tprivate hasSelectionOrFocus: IContextKey<boolean>;\n\tprivate hasDoubleSelection: IContextKey<boolean>;\n\tprivate hasMultiSelection: IContextKey<boolean>;\n\tprivate treeElementCanCollapse: IContextKey<boolean>;\n\tprivate treeElementHasParent: IContextKey<boolean>;\n\tprivate treeElementCanExpand: IContextKey<boolean>;\n\tprivate treeElementHasChild: IContextKey<boolean>;\n\tprivate treeFindOpen: IContextKey<boolean>;\n\tprivate treeStickyScrollFocused: IContextKey<boolean>;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\tprivate disposables: IDisposable[] = [];\n\n\tprivate navigator: TreeResourceNavigator<T, TFilterData>;\n\n\tget onDidOpen(): Event<IOpenEvent<T | undefined>> {\n\t\treturn this.navigator.onDidOpen;\n\t}\n\n\tconstructor(\n\t\tprivate tree:\n\t\t\t| WorkbenchObjectTree<T, TFilterData>\n\t\t\t| WorkbenchCompressibleObjectTree<T, TFilterData>\n\t\t\t| WorkbenchDataTree<TInput, T, TFilterData>\n\t\t\t| WorkbenchAsyncDataTree<TInput, T, TFilterData>\n\t\t\t| WorkbenchCompressibleAsyncDataTree<TInput, T, TFilterData>,\n\t\toptions:\n\t\t\t| IWorkbenchObjectTreeOptions<T, TFilterData>\n\t\t\t| IWorkbenchCompressibleObjectTreeOptions<T, TFilterData>\n\t\t\t| IWorkbenchDataTreeOptions<T, TFilterData>\n\t\t\t| IWorkbenchAsyncDataTreeOptions<T, TFilterData>\n\t\t\t| IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData>,\n\t\tgetTypeNavigationMode: () => TypeNavigationMode | undefined,\n\t\toverrideStyles: IStyleOverride<IListStyles> | undefined,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tthis.contextKeyService = createScopedContextKeyService(\n\t\t\tcontextKeyService,\n\t\t\ttree,\n\t\t);\n\n\t\tthis.disposables.push(\n\t\t\tcreateScrollObserver(this.contextKeyService, tree),\n\t\t);\n\n\t\tthis.listSupportsMultiSelect =\n\t\t\tWorkbenchListSupportsMultiSelectContextKey.bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\tthis.listSupportsMultiSelect.set(\n\t\t\toptions.multipleSelectionSupport !== false,\n\t\t);\n\n\t\tconst listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tlistSelectionNavigation.set(Boolean(options.selectionNavigation));\n\n\t\tthis.listSupportFindWidget = WorkbenchListSupportsFind.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.listSupportFindWidget.set(options.findWidgetEnabled ?? true);\n\n\t\tthis.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.hasMultiSelection = WorkbenchListMultiSelection.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\n\t\tthis.treeElementCanCollapse = WorkbenchTreeElementCanCollapse.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.treeElementHasParent = WorkbenchTreeElementHasParent.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.treeElementCanExpand = WorkbenchTreeElementCanExpand.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.treeElementHasChild = WorkbenchTreeElementHasChild.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\n\t\tthis.treeFindOpen = WorkbenchTreeFindOpen.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\t\tthis.treeStickyScrollFocused = WorkbenchTreeStickyScrollFocused.bindTo(\n\t\t\tthis.contextKeyService,\n\t\t);\n\n\t\tthis._useAltAsMultipleSelectionModifier =\n\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.updateStyleOverrides(overrideStyles);\n\n\t\tconst updateCollapseContextKeys = () => {\n\t\t\tconst focus = tree.getFocus()[0];\n\n\t\t\tif (!focus) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst node = tree.getNode(focus);\n\t\t\tthis.treeElementCanCollapse.set(\n\t\t\t\tnode.collapsible && !node.collapsed,\n\t\t\t);\n\t\t\tthis.treeElementHasParent.set(!!tree.getParentElement(focus));\n\t\t\tthis.treeElementCanExpand.set(node.collapsible && node.collapsed);\n\t\t\tthis.treeElementHasChild.set(!!tree.getFirstElementChild(focus));\n\t\t};\n\n\t\tconst interestingContextKeys = new Set();\n\t\tinterestingContextKeys.add(WorkbenchListTypeNavigationModeKey);\n\t\tinterestingContextKeys.add(\n\t\t\tWorkbenchListAutomaticKeyboardNavigationLegacyKey,\n\t\t);\n\n\t\tthis.disposables.push(\n\t\t\tthis.contextKeyService,\n\t\t\t(listService as ListService).register(tree),\n\t\t\ttree.onDidChangeSelection(() => {\n\t\t\t\tconst selection = tree.getSelection();\n\t\t\t\tconst focus = tree.getFocus();\n\n\t\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\t\tthis.hasSelectionOrFocus.set(\n\t\t\t\t\t\tselection.length > 0 || focus.length > 0,\n\t\t\t\t\t);\n\t\t\t\t\tthis.hasMultiSelection.set(selection.length > 1);\n\t\t\t\t\tthis.hasDoubleSelection.set(selection.length === 2);\n\t\t\t\t});\n\t\t\t}),\n\t\t\ttree.onDidChangeFocus(() => {\n\t\t\t\tconst selection = tree.getSelection();\n\t\t\t\tconst focus = tree.getFocus();\n\n\t\t\t\tthis.hasSelectionOrFocus.set(\n\t\t\t\t\tselection.length > 0 || focus.length > 0,\n\t\t\t\t);\n\t\t\t\tupdateCollapseContextKeys();\n\t\t\t}),\n\t\t\ttree.onDidChangeCollapseState(updateCollapseContextKeys),\n\t\t\ttree.onDidChangeModel(updateCollapseContextKeys),\n\t\t\ttree.onDidChangeFindOpenState((enabled) =>\n\t\t\t\tthis.treeFindOpen.set(enabled),\n\t\t\t),\n\t\t\ttree.onDidChangeStickyScrollFocused((focused) =>\n\t\t\t\tthis.treeStickyScrollFocused.set(focused),\n\t\t\t),\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tlet newOptions: IAbstractTreeOptionsUpdate = {};\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis._useAltAsMultipleSelectionModifier =\n\t\t\t\t\t\tuseAltAsMultipleSelectionModifier(configurationService);\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeIndentKey)) {\n\t\t\t\t\tconst indent =\n\t\t\t\t\t\tconfigurationService.getValue<number>(treeIndentKey);\n\t\t\t\t\tnewOptions = { ...newOptions, indent };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(treeRenderIndentGuidesKey) &&\n\t\t\t\t\toptions.renderIndentGuides === undefined\n\t\t\t\t) {\n\t\t\t\t\tconst renderIndentGuides =\n\t\t\t\t\t\tconfigurationService.getValue<RenderIndentGuides>(\n\t\t\t\t\t\t\ttreeRenderIndentGuidesKey,\n\t\t\t\t\t\t);\n\t\t\t\t\tnewOptions = { ...newOptions, renderIndentGuides };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(listSmoothScrolling)) {\n\t\t\t\t\tconst smoothScrolling = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(listSmoothScrolling),\n\t\t\t\t\t);\n\t\t\t\t\tnewOptions = { ...newOptions, smoothScrolling };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(defaultFindModeSettingKey) ||\n\t\t\t\t\te.affectsConfiguration(keyboardNavigationSettingKey)\n\t\t\t\t) {\n\t\t\t\t\tconst defaultFindMode =\n\t\t\t\t\t\tgetDefaultTreeFindMode(configurationService);\n\t\t\t\t\tnewOptions = { ...newOptions, defaultFindMode };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(typeNavigationModeSettingKey) ||\n\t\t\t\t\te.affectsConfiguration(keyboardNavigationSettingKey)\n\t\t\t\t) {\n\t\t\t\t\tconst typeNavigationMode = getTypeNavigationMode();\n\t\t\t\t\tnewOptions = { ...newOptions, typeNavigationMode };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(defaultFindMatchTypeSettingKey)) {\n\t\t\t\t\tconst defaultFindMatchType =\n\t\t\t\t\t\tgetDefaultTreeFindMatchType(configurationService);\n\t\t\t\t\tnewOptions = { ...newOptions, defaultFindMatchType };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(horizontalScrollingKey) &&\n\t\t\t\t\toptions.horizontalScrolling === undefined\n\t\t\t\t) {\n\t\t\t\t\tconst horizontalScrolling = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(horizontalScrollingKey),\n\t\t\t\t\t);\n\t\t\t\t\tnewOptions = { ...newOptions, horizontalScrolling };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(scrollByPageKey)) {\n\t\t\t\t\tconst scrollByPage = Boolean(\n\t\t\t\t\t\tconfigurationService.getValue(scrollByPageKey),\n\t\t\t\t\t);\n\t\t\t\t\tnewOptions = { ...newOptions, scrollByPage };\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(treeExpandMode) &&\n\t\t\t\t\toptions.expandOnlyOnTwistieClick === undefined\n\t\t\t\t) {\n\t\t\t\t\tnewOptions = {\n\t\t\t\t\t\t...newOptions,\n\t\t\t\t\t\texpandOnlyOnTwistieClick:\n\t\t\t\t\t\t\tconfigurationService.getValue<\n\t\t\t\t\t\t\t\t\"singleClick\" | \"doubleClick\"\n\t\t\t\t\t\t\t>(treeExpandMode) === \"doubleClick\",\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeStickyScroll)) {\n\t\t\t\t\tconst enableStickyScroll =\n\t\t\t\t\t\tconfigurationService.getValue<boolean>(\n\t\t\t\t\t\t\ttreeStickyScroll,\n\t\t\t\t\t\t);\n\t\t\t\t\tnewOptions = { ...newOptions, enableStickyScroll };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeStickyScrollMaxElements)) {\n\t\t\t\t\tconst stickyScrollMaxItemCount = Math.max(\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\ttreeStickyScrollMaxElements,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tnewOptions = { ...newOptions, stickyScrollMaxItemCount };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n\t\t\t\t\tconst mouseWheelScrollSensitivity =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\tmouseWheelScrollSensitivityKey,\n\t\t\t\t\t\t);\n\t\t\t\t\tnewOptions = { ...newOptions, mouseWheelScrollSensitivity };\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(fastScrollSensitivityKey)) {\n\t\t\t\t\tconst fastScrollSensitivity =\n\t\t\t\t\t\tconfigurationService.getValue<number>(\n\t\t\t\t\t\t\tfastScrollSensitivityKey,\n\t\t\t\t\t\t);\n\t\t\t\t\tnewOptions = { ...newOptions, fastScrollSensitivity };\n\t\t\t\t}\n\t\t\t\tif (Object.keys(newOptions).length > 0) {\n\t\t\t\t\ttree.updateOptions(newOptions);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tthis.contextKeyService.onDidChangeContext((e) => {\n\t\t\t\tif (e.affectsSome(interestingContextKeys)) {\n\t\t\t\t\ttree.updateOptions({\n\t\t\t\t\t\ttypeNavigationMode: getTypeNavigationMode(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.navigator = new TreeResourceNavigator(tree, {\n\t\t\tconfigurationService,\n\t\t\t...options,\n\t\t});\n\t\tthis.disposables.push(this.navigator);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\tupdateOptions(options: IWorkbenchTreeInternalsOptionsUpdate): void {\n\t\tif (options.multipleSelectionSupport !== undefined) {\n\t\t\tthis.listSupportsMultiSelect.set(\n\t\t\t\t!!options.multipleSelectionSupport,\n\t\t\t);\n\t\t}\n\t}\n\n\tupdateStyleOverrides(overrideStyles?: IStyleOverride<IListStyles>): void {\n\t\tthis.tree.style(\n\t\t\toverrideStyles ? getListStyles(overrideStyles) : defaultListStyles,\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\tConfigurationExtensions.Configuration,\n);\n\nconfigurationRegistry.registerConfiguration({\n\tid: \"workbench\",\n\torder: 7,\n\ttitle: localize(\"workbenchConfigurationTitle\", \"Workbench\"),\n\ttype: \"object\",\n\tproperties: {\n\t\t[multiSelectModifierSettingKey]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"ctrlCmd\", \"alt\"],\n\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"multiSelectModifier.ctrlCmd\",\n\t\t\t\t\t\"Maps to `Control` on Windows and Linux and to `Command` on macOS.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"multiSelectModifier.alt\",\n\t\t\t\t\t\"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: \"ctrlCmd\",\n\t\t\tdescription: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"multiSelectModifier\",\n\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\"- `ctrlCmd` refers to a value the setting can take and should not be localized.\",\n\t\t\t\t\t\t\"- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.\",\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\",\n\t\t\t),\n\t\t},\n\t\t[openModeSettingKey]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"singleClick\", \"doubleClick\"],\n\t\t\tdefault: \"singleClick\",\n\t\t\tdescription: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"openModeModifier\",\n\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\"`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.\",\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\"Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.\",\n\t\t\t),\n\t\t},\n\t\t[horizontalScrollingKey]: {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t\tdescription: localize(\n\t\t\t\t\"horizontalScrolling setting\",\n\t\t\t\t\"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\",\n\t\t\t),\n\t\t},\n\t\t[scrollByPageKey]: {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t\tdescription: localize(\n\t\t\t\t\"list.scrollByPage\",\n\t\t\t\t\"Controls whether clicks in the scrollbar scroll page by page.\",\n\t\t\t),\n\t\t},\n\t\t[treeIndentKey]: {\n\t\t\ttype: \"number\",\n\t\t\tdefault: 8,\n\t\t\tminimum: 4,\n\t\t\tmaximum: 40,\n\t\t\tdescription: localize(\n\t\t\t\t\"tree indent setting\",\n\t\t\t\t\"Controls tree indentation in pixels.\",\n\t\t\t),\n\t\t},\n\t\t[treeRenderIndentGuidesKey]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"none\", \"onHover\", \"always\"],\n\t\t\tdefault: \"onHover\",\n\t\t\tdescription: localize(\n\t\t\t\t\"render tree indent guides\",\n\t\t\t\t\"Controls whether the tree should render indent guides.\",\n\t\t\t),\n\t\t},\n\t\t[listSmoothScrolling]: {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t\tdescription: localize(\n\t\t\t\t\"list smoothScrolling setting\",\n\t\t\t\t\"Controls whether lists and trees have smooth scrolling.\",\n\t\t\t),\n\t\t},\n\t\t[mouseWheelScrollSensitivityKey]: {\n\t\t\ttype: \"number\",\n\t\t\tdefault: 1,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"Mouse Wheel Scroll Sensitivity\",\n\t\t\t\t\"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\",\n\t\t\t),\n\t\t},\n\t\t[fastScrollSensitivityKey]: {\n\t\t\ttype: \"number\",\n\t\t\tdefault: 5,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"Fast Scroll Sensitivity\",\n\t\t\t\t\"Scrolling speed multiplier when pressing `Alt`.\",\n\t\t\t),\n\t\t},\n\t\t[defaultFindModeSettingKey]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"highlight\", \"filter\"],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"defaultFindModeSettingKey.highlight\",\n\t\t\t\t\t\"Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"defaultFindModeSettingKey.filter\",\n\t\t\t\t\t\"Filter elements when searching.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: \"highlight\",\n\t\t\tdescription: localize(\n\t\t\t\t\"defaultFindModeSettingKey\",\n\t\t\t\t\"Controls the default find mode for lists and trees in the workbench.\",\n\t\t\t),\n\t\t},\n\t\t[keyboardNavigationSettingKey]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"simple\", \"highlight\", \"filter\"],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"keyboardNavigationSettingKey.simple\",\n\t\t\t\t\t\"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"keyboardNavigationSettingKey.highlight\",\n\t\t\t\t\t\"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"keyboardNavigationSettingKey.filter\",\n\t\t\t\t\t\"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: \"highlight\",\n\t\t\tdescription: localize(\n\t\t\t\t\"keyboardNavigationSettingKey\",\n\t\t\t\t\"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\",\n\t\t\t),\n\t\t\tdeprecated: true,\n\t\t\tdeprecationMessage: localize(\n\t\t\t\t\"keyboardNavigationSettingKeyDeprecated\",\n\t\t\t\t\"Please use 'workbench.list.defaultFindMode' and\t'workbench.list.typeNavigationMode' instead.\",\n\t\t\t),\n\t\t},\n\t\t[defaultFindMatchTypeSettingKey]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"fuzzy\", \"contiguous\"],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"defaultFindMatchTypeSettingKey.fuzzy\",\n\t\t\t\t\t\"Use fuzzy matching when searching.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"defaultFindMatchTypeSettingKey.contiguous\",\n\t\t\t\t\t\"Use contiguous matching when searching.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tdefault: \"fuzzy\",\n\t\t\tdescription: localize(\n\t\t\t\t\"defaultFindMatchTypeSettingKey\",\n\t\t\t\t\"Controls the type of matching used when searching lists and trees in the workbench.\",\n\t\t\t),\n\t\t},\n\t\t[treeExpandMode]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"singleClick\", \"doubleClick\"],\n\t\t\tdefault: \"singleClick\",\n\t\t\tdescription: localize(\n\t\t\t\t\"expand mode\",\n\t\t\t\t\"Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.\",\n\t\t\t),\n\t\t},\n\t\t[treeStickyScroll]: {\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: true,\n\t\t\tdescription: localize(\n\t\t\t\t\"sticky scroll\",\n\t\t\t\t\"Controls whether sticky scrolling is enabled in trees.\",\n\t\t\t),\n\t\t},\n\t\t[treeStickyScrollMaxElements]: {\n\t\t\ttype: \"number\",\n\t\t\tminimum: 1,\n\t\t\tdefault: 7,\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"sticky scroll maximum items\",\n\t\t\t\t\"Controls the number of sticky elements displayed in the tree when {0} is enabled.\",\n\t\t\t\t\"`#workbench.tree.enableStickyScroll#`\",\n\t\t\t),\n\t\t},\n\t\t[typeNavigationModeSettingKey]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"automatic\", \"trigger\"],\n\t\t\tdefault: \"automatic\",\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"typeNavigationMode2\",\n\t\t\t\t\"Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.\",\n\t\t\t),\n\t\t},\n\t},\n});\n"],
  "mappings": "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",
  "names": ["options", "horizontalScrolling"]
}
