{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/editor/common/editor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\n\nexport interface IResolvableEditorModel extends IDisposable {\n\t/**\n\t * Resolves the model.\n\t */\n\tresolve(): Promise<void>;\n\n\t/**\n\t * Find out if the editor model was resolved or not.\n\t */\n\tisResolved(): boolean;\n}\n\nexport function isResolvedEditorModel(\n\tmodel: IDisposable | undefined | null,\n): model is IResolvableEditorModel {\n\tconst candidate = model as IResolvableEditorModel | undefined | null;\n\n\treturn (\n\t\ttypeof candidate?.resolve === \"function\" &&\n\t\ttypeof candidate?.isResolved === \"function\"\n\t);\n}\n\nexport interface IBaseUntypedEditorInput {\n\t/**\n\t * Optional options to use when opening the input.\n\t */\n\toptions?: IEditorOptions;\n\n\t/**\n\t * Label to show for the input.\n\t */\n\treadonly label?: string;\n\n\t/**\n\t * Description to show for the input.\n\t */\n\treadonly description?: string;\n}\n\nexport interface IBaseResourceEditorInput extends IBaseUntypedEditorInput {\n\t/**\n\t * Hint to indicate that this input should be treated as a\n\t * untitled file.\n\t *\n\t * Without this hint, the editor service will make a guess by\n\t * looking at the scheme of the resource(s).\n\t *\n\t * Use `forceUntitled: true` when you pass in a `resource` that\n\t * does not use the `untitled` scheme. The `resource` will then\n\t * be used as associated path when saving the untitled file.\n\t */\n\treadonly forceUntitled?: boolean;\n}\n\nexport interface IBaseTextResourceEditorInput extends IBaseResourceEditorInput {\n\t/**\n\t * Optional options to use when opening the text input.\n\t */\n\toptions?: ITextEditorOptions;\n\n\t/**\n\t * The contents of the text input if known. If provided,\n\t * the input will not attempt to load the contents from\n\t * disk and may appear dirty.\n\t */\n\tcontents?: string;\n\n\t/**\n\t * The encoding of the text input if known.\n\t */\n\tencoding?: string;\n\n\t/**\n\t * The identifier of the language id of the text input\n\t * if known to use when displaying the contents.\n\t */\n\tlanguageId?: string;\n}\n\nexport interface IResourceEditorInput extends IBaseResourceEditorInput {\n\t/**\n\t * The resource URI of the resource to open.\n\t */\n\treadonly resource: URI;\n}\n\nexport interface ITextResourceEditorInput\n\textends IResourceEditorInput,\n\t\tIBaseTextResourceEditorInput {\n\t/**\n\t * Optional options to use when opening the text input.\n\t */\n\toptions?: ITextEditorOptions;\n}\n\n/**\n * This identifier allows to uniquely identify an editor with a\n * resource, type and editor identifier.\n */\nexport interface IResourceEditorInputIdentifier {\n\t/**\n\t * The type of the editor.\n\t */\n\treadonly typeId: string;\n\n\t/**\n\t * The identifier of the editor if provided.\n\t */\n\treadonly editorId: string | undefined;\n\n\t/**\n\t * The resource URI of the editor.\n\t */\n\treadonly resource: URI;\n}\n\nexport enum EditorActivation {\n\t/**\n\t * Activate the editor after it opened. This will automatically restore\n\t * the editor if it is minimized.\n\t */\n\tACTIVATE = 1,\n\n\t/**\n\t * Only restore the editor if it is minimized but do not activate it.\n\t *\n\t * Note: will only work in combination with the `preserveFocus: true` option.\n\t * Otherwise, if focus moves into the editor, it will activate and restore\n\t * automatically.\n\t */\n\tRESTORE = 2,\n\n\t/**\n\t * Preserve the current active editor.\n\t *\n\t * Note: will only work in combination with the `preserveFocus: true` option.\n\t * Otherwise, if focus moves into the editor, it will activate and restore\n\t * automatically.\n\t */\n\tPRESERVE = 3,\n}\n\nexport enum EditorResolution {\n\t/**\n\t * Displays a picker and allows the user to decide which editor to use.\n\t */\n\tPICK = 0,\n\n\t/**\n\t * Only exclusive editors are considered.\n\t */\n\tEXCLUSIVE_ONLY = 1,\n}\n\nexport enum EditorOpenSource {\n\t/**\n\t * Default: the editor is opening via a programmatic call\n\t * to the editor service API.\n\t */\n\tAPI = 0,\n\n\t/**\n\t * Indicates that a user action triggered the opening, e.g.\n\t * via mouse or keyboard use.\n\t */\n\tUSER = 1,\n}\n\nexport interface IEditorOptions {\n\t/**\n\t * Tells the editor to not receive keyboard focus when the editor is being opened.\n\t *\n\t * Will also not activate the group the editor opens in unless the group is already\n\t * the active one. This behaviour can be overridden via the `activation` option.\n\t */\n\tpreserveFocus?: boolean;\n\n\t/**\n\t * This option is only relevant if an editor is opened into a group that is not active\n\t * already and allows to control if the inactive group should become active, restored\n\t * or preserved.\n\t *\n\t * By default, the editor group will become active unless `preserveFocus` or `inactive`\n\t * is specified.\n\t */\n\tactivation?: EditorActivation;\n\n\t/**\n\t * Tells the editor to reload the editor input in the editor even if it is identical to the one\n\t * already showing. By default, the editor will not reload the input if it is identical to the\n\t * one showing.\n\t */\n\tforceReload?: boolean;\n\n\t/**\n\t * Will reveal the editor if it is already opened and visible in any of the opened editor groups.\n\t *\n\t * Note that this option is just a hint that might be ignored if the user wants to open an editor explicitly\n\t * to the side of another one or into a specific editor group.\n\t */\n\trevealIfVisible?: boolean;\n\n\t/**\n\t * Will reveal the editor if it is already opened (even when not visible) in any of the opened editor groups.\n\t *\n\t * Note that this option is just a hint that might be ignored if the user wants to open an editor explicitly\n\t * to the side of another one or into a specific editor group.\n\t */\n\trevealIfOpened?: boolean;\n\n\t/**\n\t * An editor that is pinned remains in the editor stack even when another editor is being opened.\n\t * An editor that is not pinned will always get replaced by another editor that is not pinned.\n\t */\n\tpinned?: boolean;\n\n\t/**\n\t * An editor that is sticky moves to the beginning of the editors list within the group and will remain\n\t * there unless explicitly closed. Operations such as \"Close All\" will not close sticky editors.\n\t */\n\tsticky?: boolean;\n\n\t/**\n\t * The index in the document stack where to insert the editor into when opening.\n\t */\n\tindex?: number;\n\n\t/**\n\t * An active editor that is opened will show its contents directly. Set to true to open an editor\n\t * in the background without loading its contents.\n\t *\n\t * Will also not activate the group the editor opens in unless the group is already\n\t * the active one. This behaviour can be overridden via the `activation` option.\n\t */\n\tinactive?: boolean;\n\n\t/**\n\t * Will not show an error in case opening the editor fails and thus allows to show a custom error\n\t * message as needed. By default, an error will be presented as notification if opening was not possible.\n\t */\n\n\t/**\n\t * In case of an error opening the editor, will not present this error to the user (e.g. by showing\n\t * a generic placeholder in the editor area). So it is up to the caller to provide error information\n\t * in that case.\n\t *\n\t * By default, an error when opening an editor will result in a placeholder editor that shows the error.\n\t * In certain cases a modal dialog may be presented to ask the user for further action.\n\t */\n\tignoreError?: boolean;\n\n\t/**\n\t * Allows to override the editor that should be used to display the input:\n\t * - `undefined`: let the editor decide for itself\n\t * - `string`: specific override by id\n\t * - `EditorResolution`: specific override handling\n\t */\n\toverride?: string | EditorResolution;\n\n\t/**\n\t * A optional hint to signal in which context the editor opens.\n\t *\n\t * If configured to be `EditorOpenSource.USER`, this hint can be\n\t * used in various places to control the experience. For example,\n\t * if the editor to open fails with an error, a notification could\n\t * inform about this in a modal dialog. If the editor opened through\n\t * some background task, the notification would show in the background,\n\t * not as a modal dialog.\n\t */\n\tsource?: EditorOpenSource;\n\n\t/**\n\t * An optional property to signal that certain view state should be\n\t * applied when opening the editor.\n\t */\n\tviewState?: object;\n\n\t/**\n\t * A transient editor will attempt to appear as preview and certain components\n\t * (such as history tracking) may decide to ignore the editor when it becomes\n\t * active.\n\t * This option is meant to be used only when the editor is used for a short\n\t * period of time, for example when opening a preview of the editor from a\n\t * picker control in the background while navigating through results of the picker.\n\t *\n\t * Note: an editor that is already opened in a group that is not transient, will\n\t * not turn transient.\n\t */\n\ttransient?: boolean;\n}\n\nexport interface ITextEditorSelection {\n\treadonly startLineNumber: number;\n\treadonly startColumn: number;\n\treadonly endLineNumber?: number;\n\treadonly endColumn?: number;\n}\n\nexport enum TextEditorSelectionRevealType {\n\t/**\n\t * Option to scroll vertically or horizontally as necessary and reveal a range centered vertically.\n\t */\n\tCenter = 0,\n\n\t/**\n\t * Option to scroll vertically or horizontally as necessary and reveal a range centered vertically only if it lies outside the viewport.\n\t */\n\tCenterIfOutsideViewport = 1,\n\n\t/**\n\t * Option to scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport, but not quite at the top.\n\t */\n\tNearTop = 2,\n\n\t/**\n\t * Option to scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport, but not quite at the top.\n\t * Only if it lies outside the viewport\n\t */\n\tNearTopIfOutsideViewport = 3,\n}\n\nexport enum TextEditorSelectionSource {\n\t/**\n\t * Programmatic source indicates a selection change that\n\t * was not triggered by the user via keyboard or mouse\n\t * but through text editor APIs.\n\t */\n\tPROGRAMMATIC = \"api\",\n\n\t/**\n\t * Navigation source indicates a selection change that\n\t * was caused via some command or UI component such as\n\t * an outline tree.\n\t */\n\tNAVIGATION = \"code.navigation\",\n\n\t/**\n\t * Jump source indicates a selection change that\n\t * was caused from within the text editor to another\n\t * location in the same or different text editor such\n\t * as \"Go to definition\".\n\t */\n\tJUMP = \"code.jump\",\n}\n\nexport interface ITextEditorOptions extends IEditorOptions {\n\t/**\n\t * Text editor selection.\n\t */\n\tselection?: ITextEditorSelection;\n\n\t/**\n\t * Option to control the text editor selection reveal type.\n\t * Defaults to TextEditorSelectionRevealType.Center\n\t */\n\tselectionRevealType?: TextEditorSelectionRevealType;\n\n\t/**\n\t * Source of the call that caused the selection.\n\t */\n\tselectionSource?: TextEditorSelectionSource | string;\n}\n"],
  "mappings": ";;AAoBO,SAAS,sBACf,OACkC;AAClC,QAAM,YAAY;AAElB,SACC,OAAO,WAAW,YAAY,cAC9B,OAAO,WAAW,eAAe;AAEnC;AATgB;AAyGT,IAAK,mBAAL,kBAAKA,sBAAL;AAKN,EAAAA,oCAAA,cAAW,KAAX;AASA,EAAAA,oCAAA,aAAU,KAAV;AASA,EAAAA,oCAAA,cAAW,KAAX;AAvBW,SAAAA;AAAA,GAAA;AA0BL,IAAK,mBAAL,kBAAKC,sBAAL;AAIN,EAAAA,oCAAA,UAAO,KAAP;AAKA,EAAAA,oCAAA,oBAAiB,KAAjB;AATW,SAAAA;AAAA,GAAA;AAYL,IAAK,mBAAL,kBAAKC,sBAAL;AAKN,EAAAA,oCAAA,SAAM,KAAN;AAMA,EAAAA,oCAAA,UAAO,KAAP;AAXW,SAAAA;AAAA,GAAA;AAgJL,IAAK,gCAAL,kBAAKC,mCAAL;AAIN,EAAAA,8DAAA,YAAS,KAAT;AAKA,EAAAA,8DAAA,6BAA0B,KAA1B;AAKA,EAAAA,8DAAA,aAAU,KAAV;AAMA,EAAAA,8DAAA,8BAA2B,KAA3B;AApBW,SAAAA;AAAA,GAAA;AAuBL,IAAK,4BAAL,kBAAKC,+BAAL;AAMN,EAAAA,2BAAA,kBAAe;AAOf,EAAAA,2BAAA,gBAAa;AAQb,EAAAA,2BAAA,UAAO;AArBI,SAAAA;AAAA,GAAA;",
  "names": ["EditorActivation", "EditorResolution", "EditorOpenSource", "TextEditorSelectionRevealType", "TextEditorSelectionSource"]
}
