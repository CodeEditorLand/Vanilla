{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/node/extensionDownloader.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from \"../../../base/common/async.js\";\nimport { getErrorMessage } from \"../../../base/common/errors.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { joinPath } from \"../../../base/common/resources.js\";\nimport * as semver from \"../../../base/common/semver/semver.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport { Promises as FSPromises } from \"../../../base/node/pfs.js\";\nimport { buffer, CorruptZipMessage } from \"../../../base/node/zip.js\";\nimport { INativeEnvironmentService } from \"../../environment/common/environment.js\";\nimport type { TargetPlatform } from \"../../extensions/common/extensions.js\";\nimport {\n\tIFileService,\n\ttype IFileStatWithMetadata,\n} from \"../../files/common/files.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport { toExtensionManagementError } from \"../common/abstractExtensionManagementService.js\";\nimport {\n\tExtensionManagementError,\n\tExtensionManagementErrorCode,\n\tExtensionSignatureVerificationCode,\n\tIExtensionGalleryService,\n\ttype IGalleryExtension,\n\ttype InstallOperation,\n} from \"../common/extensionManagement.js\";\nimport {\n\tExtensionKey,\n\tgroupByExtension,\n} from \"../common/extensionManagementUtil.js\";\nimport { fromExtractError } from \"./extensionManagementUtil.js\";\nimport { IExtensionSignatureVerificationService } from \"./extensionSignatureVerificationService.js\";\n\ntype RetryDownloadClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Event reporting the retry of downloading\";\n\textensionId: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Extension Id\";\n\t};\n\tattempts: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tisMeasurement: true;\n\t\tcomment: \"Number of Attempts\";\n\t};\n};\ntype RetryDownloadEvent = {\n\textensionId: string;\n\tattempts: number;\n};\n\nexport class ExtensionsDownloader extends Disposable {\n\tprivate static readonly SignatureArchiveExtension = \".sigzip\";\n\n\treadonly extensionsDownloadDir: URI;\n\tprivate readonly cache: number;\n\tprivate readonly cleanUpPromise: Promise<void>;\n\n\tconstructor(\n\t\t@INativeEnvironmentService\n\t\tenvironmentService: INativeEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExtensionGalleryService\n\t\tprivate readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IExtensionSignatureVerificationService\n\t\tprivate readonly extensionSignatureVerificationService: IExtensionSignatureVerificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.extensionsDownloadDir =\n\t\t\tenvironmentService.extensionsDownloadLocation;\n\t\tthis.cache = 20; // Cache 20 downloaded VSIX files\n\t\tthis.cleanUpPromise = this.cleanUp();\n\t}\n\n\tasync download(\n\t\textension: IGalleryExtension,\n\t\toperation: InstallOperation,\n\t\tverifySignature: boolean,\n\t\tclientTargetPlatform?: TargetPlatform,\n\t): Promise<{\n\t\treadonly location: URI;\n\t\treadonly verificationStatus:\n\t\t\t| ExtensionSignatureVerificationCode\n\t\t\t| undefined;\n\t}> {\n\t\tawait this.cleanUpPromise;\n\n\t\tconst location = await this.downloadVSIX(extension, operation);\n\n\t\tif (!verifySignature || !extension.isSigned) {\n\t\t\treturn { location, verificationStatus: undefined };\n\t\t}\n\n\t\tlet signatureArchiveLocation;\n\t\ttry {\n\t\t\tsignatureArchiveLocation =\n\t\t\t\tawait this.downloadSignatureArchive(extension);\n\t\t\tconst verificationStatus = (\n\t\t\t\tawait this.extensionSignatureVerificationService.verify(\n\t\t\t\t\textension.identifier.id,\n\t\t\t\t\textension.version,\n\t\t\t\t\tlocation.fsPath,\n\t\t\t\t\tsignatureArchiveLocation.fsPath,\n\t\t\t\t\tclientTargetPlatform,\n\t\t\t\t)\n\t\t\t)?.code;\n\t\t\tif (\n\t\t\t\tverificationStatus ===\n\t\t\t\t\tExtensionSignatureVerificationCode.PackageIsInvalidZip ||\n\t\t\t\tverificationStatus ===\n\t\t\t\t\tExtensionSignatureVerificationCode.SignatureArchiveIsInvalidZip\n\t\t\t) {\n\t\t\t\ttry {\n\t\t\t\t\t// Delete the downloaded vsix if VSIX or signature archive is invalid\n\t\t\t\t\tawait this.delete(location);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\tCorruptZipMessage,\n\t\t\t\t\tExtensionManagementErrorCode.CorruptZip,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn { location, verificationStatus };\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\t// Delete the downloaded VSIX if signature archive download fails\n\t\t\t\tawait this.delete(location);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tif (signatureArchiveLocation) {\n\t\t\t\ttry {\n\t\t\t\t\t// Delete signature archive always\n\t\t\t\t\tawait this.delete(signatureArchiveLocation);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async downloadVSIX(\n\t\textension: IGalleryExtension,\n\t\toperation: InstallOperation,\n\t): Promise<URI> {\n\t\ttry {\n\t\t\tconst location = joinPath(\n\t\t\t\tthis.extensionsDownloadDir,\n\t\t\t\tthis.getName(extension),\n\t\t\t);\n\t\t\tconst attempts = await this.doDownload(\n\t\t\t\textension,\n\t\t\t\t\"vsix\",\n\t\t\t\tasync () => {\n\t\t\t\t\tawait this.downloadFile(extension, location, (location) =>\n\t\t\t\t\t\tthis.extensionGalleryService.download(\n\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\tlocation,\n\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.validate(\n\t\t\t\t\t\t\tlocation.fsPath,\n\t\t\t\t\t\t\t\"extension/package.json\",\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.fileService.del(location);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t`Error while deleting: ${location.path}`,\n\t\t\t\t\t\t\t\tgetErrorMessage(e),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t2,\n\t\t\t);\n\n\t\t\tif (attempts > 1) {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tRetryDownloadEvent,\n\t\t\t\t\tRetryDownloadClassification\n\t\t\t\t>(\"extensiongallery:downloadvsix:retry\", {\n\t\t\t\t\textensionId: extension.identifier.id,\n\t\t\t\t\tattempts,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn location;\n\t\t} catch (e) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\te,\n\t\t\t\tExtensionManagementErrorCode.Download,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async downloadSignatureArchive(\n\t\textension: IGalleryExtension,\n\t): Promise<URI> {\n\t\ttry {\n\t\t\tconst location = joinPath(\n\t\t\t\tthis.extensionsDownloadDir,\n\t\t\t\t`.${generateUuid()}`,\n\t\t\t);\n\t\t\tconst attempts = await this.doDownload(\n\t\t\t\textension,\n\t\t\t\t\"sigzip\",\n\t\t\t\tasync () => {\n\t\t\t\t\tawait this.extensionGalleryService.downloadSignatureArchive(\n\t\t\t\t\t\textension,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.validate(location.fsPath, \".signature.p7s\");\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.fileService.del(location);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t`Error while deleting: ${location.path}`,\n\t\t\t\t\t\t\t\tgetErrorMessage(e),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t2,\n\t\t\t);\n\n\t\t\tif (attempts > 1) {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tRetryDownloadEvent,\n\t\t\t\t\tRetryDownloadClassification\n\t\t\t\t>(\"extensiongallery:downloadsigzip:retry\", {\n\t\t\t\t\textensionId: extension.identifier.id,\n\t\t\t\t\tattempts,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn location;\n\t\t} catch (e) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\te,\n\t\t\t\tExtensionManagementErrorCode.DownloadSignature,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async downloadFile(\n\t\textension: IGalleryExtension,\n\t\tlocation: URI,\n\t\tdownloadFn: (location: URI) => Promise<void>,\n\t): Promise<void> {\n\t\t// Do not download if exists\n\t\tif (await this.fileService.exists(location)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Download directly if locaiton is not file scheme\n\t\tif (location.scheme !== Schemas.file) {\n\t\t\tawait downloadFn(location);\n\t\t\treturn;\n\t\t}\n\n\t\t// Download to temporary location first only if file does not exist\n\t\tconst tempLocation = joinPath(\n\t\t\tthis.extensionsDownloadDir,\n\t\t\t`.${generateUuid()}`,\n\t\t);\n\t\ttry {\n\t\t\tawait downloadFn(tempLocation);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(tempLocation);\n\t\t\t} catch (e) {\n\t\t\t\t/* ignore */\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\n\t\ttry {\n\t\t\t// Rename temp location to original\n\t\t\tawait FSPromises.rename(\n\t\t\t\ttempLocation.fsPath,\n\t\t\t\tlocation.fsPath,\n\t\t\t\t2 * 60 * 1000 /* Retry for 2 minutes */,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(tempLocation);\n\t\t\t} catch (e) {\n\t\t\t\t/* ignore */\n\t\t\t}\n\t\t\tlet exists = false;\n\t\t\ttry {\n\t\t\t\texists = await this.fileService.exists(location);\n\t\t\t} catch (e) {\n\t\t\t\t/* ignore */\n\t\t\t}\n\t\t\tif (exists) {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`Rename failed because the file was downloaded by another source. So ignoring renaming.`,\n\t\t\t\t\textension.identifier.id,\n\t\t\t\t\tlocation.path,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`Rename failed because of ${getErrorMessage(error)}. Deleted the file from downloaded location`,\n\t\t\t\t\ttempLocation.path,\n\t\t\t\t);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async doDownload(\n\t\textension: IGalleryExtension,\n\t\tname: string,\n\t\tdownloadFn: () => Promise<void>,\n\t\tretries: number,\n\t): Promise<number> {\n\t\tlet attempts = 1;\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tawait downloadFn();\n\t\t\t\treturn attempts;\n\t\t\t} catch (e) {\n\t\t\t\tif (attempts++ > retries) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Failed downloading ${name}. ${getErrorMessage(e)}. Retry again...`,\n\t\t\t\t\textension.identifier.id,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async validate(zipPath: string, filePath: string): Promise<void> {\n\t\ttry {\n\t\t\tawait buffer(zipPath, filePath);\n\t\t} catch (e) {\n\t\t\tthrow fromExtractError(e);\n\t\t}\n\t}\n\n\tasync delete(location: URI): Promise<void> {\n\t\tawait this.cleanUpPromise;\n\t\tawait this.fileService.del(location);\n\t}\n\n\tprivate async cleanUp(): Promise<void> {\n\t\ttry {\n\t\t\tif (!(await this.fileService.exists(this.extensionsDownloadDir))) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"Extension VSIX downloads cache dir does not exist\",\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst folderStat = await this.fileService.resolve(\n\t\t\t\tthis.extensionsDownloadDir,\n\t\t\t\t{ resolveMetadata: true },\n\t\t\t);\n\t\t\tif (folderStat.children) {\n\t\t\t\tconst toDelete: URI[] = [];\n\t\t\t\tconst vsixs: [ExtensionKey, IFileStatWithMetadata][] = [];\n\t\t\t\tconst signatureArchives: URI[] = [];\n\n\t\t\t\tfor (const stat of folderStat.children) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstat.name.endsWith(\n\t\t\t\t\t\t\tExtensionsDownloader.SignatureArchiveExtension,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tsignatureArchives.push(stat.resource);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst extension = ExtensionKey.parse(stat.name);\n\t\t\t\t\t\tif (extension) {\n\t\t\t\t\t\t\tvsixs.push([extension, stat]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst byExtension = groupByExtension(\n\t\t\t\t\tvsixs,\n\t\t\t\t\t([extension]) => extension,\n\t\t\t\t);\n\t\t\t\tconst distinct: IFileStatWithMetadata[] = [];\n\t\t\t\tfor (const p of byExtension) {\n\t\t\t\t\tp.sort((a, b) =>\n\t\t\t\t\t\tsemver.rcompare(a[0].version, b[0].version),\n\t\t\t\t\t);\n\t\t\t\t\ttoDelete.push(...p.slice(1).map((e) => e[1].resource)); // Delete outdated extensions\n\t\t\t\t\tdistinct.push(p[0][1]);\n\t\t\t\t}\n\t\t\t\tdistinct.sort((a, b) => a.mtime - b.mtime); // sort by modified time\n\t\t\t\ttoDelete.push(\n\t\t\t\t\t...distinct\n\t\t\t\t\t\t.slice(0, Math.max(0, distinct.length - this.cache))\n\t\t\t\t\t\t.map((s) => s.resource),\n\t\t\t\t); // Retain minimum cacheSize and delete the rest\n\t\t\t\ttoDelete.push(...signatureArchives); // Delete all signature archives\n\n\t\t\t\tawait Promises.settled(\n\t\t\t\t\ttoDelete.map((resource) => {\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t\"Deleting from cache\",\n\t\t\t\t\t\t\tresource.path,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn this.fileService.del(resource);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t}\n\n\tprivate getName(extension: IGalleryExtension): string {\n\t\treturn this.cache\n\t\t\t? ExtensionKey.create(extension).toString().toLowerCase()\n\t\t\t: generateUuid();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["error", "location"]
}
