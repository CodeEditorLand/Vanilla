{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/node/extensionManagementService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from \"fs\";\nimport { Promises, Queue } from \"../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport {\n\tCancellationError,\n\tgetErrorMessage,\n} from \"../../../base/common/errors.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { ResourceMap, ResourceSet } from \"../../../base/common/map.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport * as path from \"../../../base/common/path.js\";\nimport { isLinux } from \"../../../base/common/platform.js\";\nimport { joinPath } from \"../../../base/common/resources.js\";\nimport * as semver from \"../../../base/common/semver/semver.js\";\nimport { isBoolean } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport * as pfs from \"../../../base/node/pfs.js\";\nimport { type IFile, extract, zip } from \"../../../base/node/zip.js\";\nimport * as nls from \"../../../nls.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IDownloadService } from \"../../download/common/download.js\";\nimport { INativeEnvironmentService } from \"../../environment/common/environment.js\";\nimport { isEngineValid } from \"../../extensions/common/extensionValidator.js\";\nimport {\n\tExtensionType,\n\ttype IExtension,\n\ttype IExtensionManifest,\n\ttype TargetPlatform,\n} from \"../../extensions/common/extensions.js\";\nimport {\n\tFileChangeType,\n\ttype FileChangesEvent,\n\tFileOperationResult,\n\tIFileService,\n\ttoFileOperationResult,\n} from \"../../files/common/files.js\";\nimport {\n\tIInstantiationService,\n\trefineServiceDecorator,\n} from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport { IUserDataProfilesService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\tAbstractExtensionManagementService,\n\tAbstractExtensionTask,\n\ttype IInstallExtensionTask,\n\ttype IUninstallExtensionTask,\n\ttype InstallExtensionTaskOptions,\n\ttype UninstallExtensionTaskOptions,\n\ttoExtensionManagementError,\n} from \"../common/abstractExtensionManagementService.js\";\nimport {\n\tEXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT,\n\tExtensionManagementError,\n\tExtensionManagementErrorCode,\n\tExtensionSignatureVerificationCode,\n\tIExtensionGalleryService,\n\ttype IExtensionIdentifier,\n\tIExtensionManagementService,\n\ttype IGalleryExtension,\n\ttype ILocalExtension,\n\ttype IProductVersion,\n\tInstallOperation,\n\ttype InstallOptions,\n\ttype Metadata,\n} from \"../common/extensionManagement.js\";\nimport {\n\tExtensionKey,\n\tareSameExtensions,\n\tcomputeTargetPlatform,\n\tgetGalleryExtensionId,\n\tgroupByExtension,\n} from \"../common/extensionManagementUtil.js\";\nimport {\n\tIExtensionsProfileScannerService,\n\ttype IScannedProfileExtension,\n} from \"../common/extensionsProfileScannerService.js\";\nimport {\n\tIExtensionsScannerService,\n\ttype IScannedExtension,\n\ttype ScanOptions,\n} from \"../common/extensionsScannerService.js\";\nimport { ExtensionsDownloader } from \"./extensionDownloader.js\";\nimport { ExtensionsLifecycle } from \"./extensionLifecycle.js\";\nimport { fromExtractError, getManifest } from \"./extensionManagementUtil.js\";\nimport { ExtensionsManifestCache } from \"./extensionsManifestCache.js\";\nimport {\n\ttype DidChangeProfileExtensionsEvent,\n\tExtensionsWatcher,\n} from \"./extensionsWatcher.js\";\n\nexport const INativeServerExtensionManagementService = refineServiceDecorator<\n\tIExtensionManagementService,\n\tINativeServerExtensionManagementService\n>(IExtensionManagementService);\nexport interface INativeServerExtensionManagementService\n\textends IExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\tscanAllUserInstalledExtensions(): Promise<ILocalExtension[]>;\n\tscanInstalledExtensionAtLocation(\n\t\tlocation: URI,\n\t): Promise<ILocalExtension | null>;\n\tmarkAsUninstalled(...extensions: IExtension[]): Promise<void>;\n}\n\ntype ExtractExtensionResult = {\n\treadonly local: ILocalExtension;\n\treadonly verificationStatus?: ExtensionSignatureVerificationCode;\n};\n\nconst DELETED_FOLDER_POSTFIX = \".vsctmp\";\n\nexport class ExtensionManagementService\n\textends AbstractExtensionManagementService\n\timplements INativeServerExtensionManagementService\n{\n\tprivate readonly extensionsScanner: ExtensionsScanner;\n\tprivate readonly manifestCache: ExtensionsManifestCache;\n\tprivate readonly extensionsDownloader: ExtensionsDownloader;\n\n\tprivate readonly extractingGalleryExtensions = new Map<\n\t\tstring,\n\t\tPromise<ExtractExtensionResult>\n\t>();\n\n\tconstructor(\n\t\t@IExtensionGalleryService galleryService: IExtensionGalleryService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@INativeEnvironmentService\n\t\tprivate readonly environmentService: INativeEnvironmentService,\n\t\t@IExtensionsScannerService\n\t\tprivate readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IExtensionsProfileScannerService\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IDownloadService private downloadService: IDownloadService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IProductService productService: IProductService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IUserDataProfilesService\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t) {\n\t\tsuper(\n\t\t\tgalleryService,\n\t\t\ttelemetryService,\n\t\t\turiIdentityService,\n\t\t\tlogService,\n\t\t\tproductService,\n\t\t\tuserDataProfilesService,\n\t\t);\n\t\tconst extensionLifecycle = this._register(\n\t\t\tinstantiationService.createInstance(ExtensionsLifecycle),\n\t\t);\n\t\tthis.extensionsScanner = this._register(\n\t\t\tinstantiationService.createInstance(\n\t\t\t\tExtensionsScanner,\n\t\t\t\t(extension) => extensionLifecycle.postUninstall(extension),\n\t\t\t),\n\t\t);\n\t\tthis.manifestCache = this._register(\n\t\t\tnew ExtensionsManifestCache(\n\t\t\t\tuserDataProfilesService,\n\t\t\t\tfileService,\n\t\t\t\turiIdentityService,\n\t\t\t\tthis,\n\t\t\t\tthis.logService,\n\t\t\t),\n\t\t);\n\t\tthis.extensionsDownloader = this._register(\n\t\t\tinstantiationService.createInstance(ExtensionsDownloader),\n\t\t);\n\n\t\tconst extensionsWatcher = this._register(\n\t\t\tnew ExtensionsWatcher(\n\t\t\t\tthis,\n\t\t\t\tthis.extensionsScannerService,\n\t\t\t\tuserDataProfilesService,\n\t\t\t\textensionsProfileScannerService,\n\t\t\t\turiIdentityService,\n\t\t\t\tfileService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\textensionsWatcher.onDidChangeExtensionsByAnotherSource((e) =>\n\t\t\t\tthis.onDidChangeExtensionsFromAnotherSource(e),\n\t\t\t),\n\t\t);\n\t\tthis.watchForExtensionsNotInstalledBySystem();\n\t}\n\n\tprivate _targetPlatformPromise: Promise<TargetPlatform> | undefined;\n\tgetTargetPlatform(): Promise<TargetPlatform> {\n\t\tif (!this._targetPlatformPromise) {\n\t\t\tthis._targetPlatformPromise = computeTargetPlatform(\n\t\t\t\tthis.fileService,\n\t\t\t\tthis.logService,\n\t\t\t);\n\t\t}\n\t\treturn this._targetPlatformPromise;\n\t}\n\n\tasync zip(extension: ILocalExtension): Promise<URI> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionManagementService#zip\",\n\t\t\textension.identifier.id,\n\t\t);\n\t\tconst files = await this.collectFiles(extension);\n\t\tconst location = await zip(\n\t\t\tjoinPath(\n\t\t\t\tthis.extensionsDownloader.extensionsDownloadDir,\n\t\t\t\tgenerateUuid(),\n\t\t\t).fsPath,\n\t\t\tfiles,\n\t\t);\n\t\treturn URI.file(location);\n\t}\n\n\tasync getManifest(vsix: URI): Promise<IExtensionManifest> {\n\t\tconst { location, cleanup } = await this.downloadVsix(vsix);\n\t\tconst zipPath = path.resolve(location.fsPath);\n\t\ttry {\n\t\t\treturn await getManifest(zipPath);\n\t\t} finally {\n\t\t\tawait cleanup();\n\t\t}\n\t}\n\n\tgetInstalled(\n\t\ttype?: ExtensionType,\n\t\tprofileLocation: URI = this.userDataProfilesService.defaultProfile\n\t\t\t.extensionsResource,\n\t\tproductVersion: IProductVersion = {\n\t\t\tversion: this.productService.version,\n\t\t\tdate: this.productService.date,\n\t\t},\n\t): Promise<ILocalExtension[]> {\n\t\treturn this.extensionsScanner.scanExtensions(\n\t\t\ttype ?? null,\n\t\t\tprofileLocation,\n\t\t\tproductVersion,\n\t\t);\n\t}\n\n\tscanAllUserInstalledExtensions(): Promise<ILocalExtension[]> {\n\t\treturn this.extensionsScanner.scanAllUserExtensions(false);\n\t}\n\n\tscanInstalledExtensionAtLocation(\n\t\tlocation: URI,\n\t): Promise<ILocalExtension | null> {\n\t\treturn this.extensionsScanner.scanUserExtensionAtLocation(location);\n\t}\n\n\tasync install(\n\t\tvsix: URI,\n\t\toptions: InstallOptions = {},\n\t): Promise<ILocalExtension> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionManagementService#install\",\n\t\t\tvsix.toString(),\n\t\t);\n\n\t\tconst { location, cleanup } = await this.downloadVsix(vsix);\n\n\t\ttry {\n\t\t\tconst manifest = await getManifest(path.resolve(location.fsPath));\n\t\t\tconst extensionId = getGalleryExtensionId(\n\t\t\t\tmanifest.publisher,\n\t\t\t\tmanifest.name,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tmanifest.engines &&\n\t\t\t\tmanifest.engines.vscode &&\n\t\t\t\t!isEngineValid(\n\t\t\t\t\tmanifest.engines.vscode,\n\t\t\t\t\tthis.productService.version,\n\t\t\t\t\tthis.productService.date,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"incompatible\",\n\t\t\t\t\t\t\"Unable to install extension '{0}' as it is not compatible with VS Code '{1}'.\",\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\tthis.productService.version,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst results = await this.installExtensions([\n\t\t\t\t{ manifest, extension: location, options },\n\t\t\t]);\n\t\t\tconst result = results.find(({ identifier }) =>\n\t\t\t\tareSameExtensions(identifier, { id: extensionId }),\n\t\t\t);\n\t\t\tif (result?.local) {\n\t\t\t\treturn result.local;\n\t\t\t}\n\t\t\tif (result?.error) {\n\t\t\t\tthrow result.error;\n\t\t\t}\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\tnew Error(\n\t\t\t\t\t`Unknown error while installing extension ${extensionId}`,\n\t\t\t\t),\n\t\t\t);\n\t\t} finally {\n\t\t\tawait cleanup();\n\t\t}\n\t}\n\n\tasync installFromLocation(\n\t\tlocation: URI,\n\t\tprofileLocation: URI,\n\t): Promise<ILocalExtension> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionManagementService#installFromLocation\",\n\t\t\tlocation.toString(),\n\t\t);\n\t\tconst local =\n\t\t\tawait this.extensionsScanner.scanUserExtensionAtLocation(location);\n\t\tif (!local || !local.manifest.name || !local.manifest.version) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot find a valid extension from the location ${location.toString()}`,\n\t\t\t);\n\t\t}\n\t\tawait this.addExtensionsToProfile(\n\t\t\t[[local, { source: \"resource\" }]],\n\t\t\tprofileLocation,\n\t\t);\n\t\tthis.logService.info(\n\t\t\t\"Successfully installed extension\",\n\t\t\tlocal.identifier.id,\n\t\t\tprofileLocation.toString(),\n\t\t);\n\t\treturn local;\n\t}\n\n\tasync installExtensionsFromProfile(\n\t\textensions: IExtensionIdentifier[],\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t): Promise<ILocalExtension[]> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionManagementService#installExtensionsFromProfile\",\n\t\t\textensions,\n\t\t\tfromProfileLocation.toString(),\n\t\t\ttoProfileLocation.toString(),\n\t\t);\n\t\tconst extensionsToInstall = (\n\t\t\tawait this.getInstalled(ExtensionType.User, fromProfileLocation)\n\t\t).filter((e) =>\n\t\t\textensions.some((id) => areSameExtensions(id, e.identifier)),\n\t\t);\n\t\tif (extensionsToInstall.length) {\n\t\t\tconst metadata = await Promise.all(\n\t\t\t\textensionsToInstall.map((e) =>\n\t\t\t\t\tthis.extensionsScanner.scanMetadata(e, fromProfileLocation),\n\t\t\t\t),\n\t\t\t);\n\t\t\tawait this.addExtensionsToProfile(\n\t\t\t\textensionsToInstall.map((e, index) => [e, metadata[index]]),\n\t\t\t\ttoProfileLocation,\n\t\t\t);\n\t\t\tthis.logService.info(\n\t\t\t\t\"Successfully installed extensions\",\n\t\t\t\textensionsToInstall.map((e) => e.identifier.id),\n\t\t\t\ttoProfileLocation.toString(),\n\t\t\t);\n\t\t}\n\t\treturn extensionsToInstall;\n\t}\n\n\tasync updateMetadata(\n\t\tlocal: ILocalExtension,\n\t\tmetadata: Partial<Metadata>,\n\t\tprofileLocation: URI,\n\t): Promise<ILocalExtension> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionManagementService#updateMetadata\",\n\t\t\tlocal.identifier.id,\n\t\t);\n\t\tif (metadata.isPreReleaseVersion) {\n\t\t\tmetadata.preRelease = true;\n\t\t\tmetadata.hasPreReleaseVersion = true;\n\t\t}\n\t\t// unset if false\n\t\tif (metadata.isMachineScoped === false) {\n\t\t\tmetadata.isMachineScoped = undefined;\n\t\t}\n\t\tif (metadata.isBuiltin === false) {\n\t\t\tmetadata.isBuiltin = undefined;\n\t\t}\n\t\tif (metadata.pinned === false) {\n\t\t\tmetadata.pinned = undefined;\n\t\t}\n\t\tlocal = await this.extensionsScanner.updateMetadata(\n\t\t\tlocal,\n\t\t\tmetadata,\n\t\t\tprofileLocation,\n\t\t);\n\t\tthis.manifestCache.invalidate(profileLocation);\n\t\tthis._onDidUpdateExtensionMetadata.fire({ local, profileLocation });\n\t\treturn local;\n\t}\n\n\tasync reinstallFromGallery(\n\t\textension: ILocalExtension,\n\t): Promise<ILocalExtension> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionManagementService#reinstallFromGallery\",\n\t\t\textension.identifier.id,\n\t\t);\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\tthrow new Error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"MarketPlaceDisabled\",\n\t\t\t\t\t\"Marketplace is not enabled\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst targetPlatform = await this.getTargetPlatform();\n\t\tconst [galleryExtension] = await this.galleryService.getExtensions(\n\t\t\t[{ ...extension.identifier, preRelease: extension.preRelease }],\n\t\t\t{ targetPlatform, compatible: true },\n\t\t\tCancellationToken.None,\n\t\t);\n\t\tif (!galleryExtension) {\n\t\t\tthrow new Error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"Not a Marketplace extension\",\n\t\t\t\t\t\"Only Marketplace Extensions can be reinstalled\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tawait this.extensionsScanner.setUninstalled(extension);\n\t\ttry {\n\t\t\tawait this.extensionsScanner.removeUninstalledExtension(extension);\n\t\t} catch (e) {\n\t\t\tthrow new Error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"removeError\",\n\t\t\t\t\t\"Error while removing the extension: {0}. Please Quit and Start VS Code before trying again.\",\n\t\t\t\t\ttoErrorMessage(e),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn this.installFromGallery(galleryExtension);\n\t}\n\n\tprotected copyExtension(\n\t\textension: ILocalExtension,\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t\tmetadata: Partial<Metadata>,\n\t): Promise<ILocalExtension> {\n\t\treturn this.extensionsScanner.copyExtension(\n\t\t\textension,\n\t\t\tfromProfileLocation,\n\t\t\ttoProfileLocation,\n\t\t\tmetadata,\n\t\t);\n\t}\n\n\tcopyExtensions(\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t): Promise<void> {\n\t\treturn this.extensionsScanner.copyExtensions(\n\t\t\tfromProfileLocation,\n\t\t\ttoProfileLocation,\n\t\t\t{\n\t\t\t\tversion: this.productService.version,\n\t\t\t\tdate: this.productService.date,\n\t\t\t},\n\t\t);\n\t}\n\n\tmarkAsUninstalled(...extensions: IExtension[]): Promise<void> {\n\t\treturn this.extensionsScanner.setUninstalled(...extensions);\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tthis.logService.trace(\"ExtensionManagementService#cleanUp\");\n\t\ttry {\n\t\t\tawait this.extensionsScanner.cleanUp();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tasync download(\n\t\textension: IGalleryExtension,\n\t\toperation: InstallOperation,\n\t\tdonotVerifySignature: boolean,\n\t): Promise<URI> {\n\t\tconst { location } = await this.downloadExtension(\n\t\t\textension,\n\t\t\toperation,\n\t\t\t!donotVerifySignature,\n\t\t);\n\t\treturn location;\n\t}\n\n\tprivate async downloadVsix(\n\t\tvsix: URI,\n\t): Promise<{ location: URI; cleanup: () => Promise<void> }> {\n\t\tif (vsix.scheme === Schemas.file) {\n\t\t\treturn { location: vsix, async cleanup() {} };\n\t\t}\n\t\tthis.logService.trace(\"Downloading extension from\", vsix.toString());\n\t\tconst location = joinPath(\n\t\t\tthis.extensionsDownloader.extensionsDownloadDir,\n\t\t\tgenerateUuid(),\n\t\t);\n\t\tawait this.downloadService.download(vsix, location);\n\t\tthis.logService.info(\"Downloaded extension to\", location.toString());\n\t\tconst cleanup = async () => {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t};\n\t\treturn { location, cleanup };\n\t}\n\n\tprotected getCurrentExtensionsManifestLocation(): URI {\n\t\treturn this.userDataProfilesService.defaultProfile.extensionsResource;\n\t}\n\n\tprotected createInstallExtensionTask(\n\t\tmanifest: IExtensionManifest,\n\t\textension: URI | IGalleryExtension,\n\t\toptions: InstallExtensionTaskOptions,\n\t): IInstallExtensionTask {\n\t\tconst extensionKey =\n\t\t\textension instanceof URI\n\t\t\t\t? new ExtensionKey(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: getGalleryExtensionId(\n\t\t\t\t\t\t\t\tmanifest.publisher,\n\t\t\t\t\t\t\t\tmanifest.name,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmanifest.version,\n\t\t\t\t\t)\n\t\t\t\t: ExtensionKey.create(extension);\n\t\treturn this.instantiationService.createInstance(\n\t\t\tInstallExtensionInProfileTask,\n\t\t\textensionKey,\n\t\t\tmanifest,\n\t\t\textension,\n\t\t\toptions,\n\t\t\t(operation, token) => {\n\t\t\t\tif (extension instanceof URI) {\n\t\t\t\t\treturn this.extractVSIX(\n\t\t\t\t\t\textensionKey,\n\t\t\t\t\t\textension,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tlet promise = this.extractingGalleryExtensions.get(\n\t\t\t\t\textensionKey.toString(),\n\t\t\t\t);\n\t\t\t\tif (!promise) {\n\t\t\t\t\tthis.extractingGalleryExtensions.set(\n\t\t\t\t\t\textensionKey.toString(),\n\t\t\t\t\t\t(promise = this.downloadAndExtractGalleryExtension(\n\t\t\t\t\t\t\textensionKey,\n\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t)),\n\t\t\t\t\t);\n\t\t\t\t\tpromise.finally(() =>\n\t\t\t\t\t\tthis.extractingGalleryExtensions.delete(\n\t\t\t\t\t\t\textensionKey.toString(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\tthis.extensionsScanner,\n\t\t);\n\t}\n\n\tprotected createUninstallExtensionTask(\n\t\textension: ILocalExtension,\n\t\toptions: UninstallExtensionTaskOptions,\n\t): IUninstallExtensionTask {\n\t\treturn new UninstallExtensionInProfileTask(\n\t\t\textension,\n\t\t\toptions,\n\t\t\tthis.extensionsProfileScannerService,\n\t\t);\n\t}\n\n\tprivate async downloadAndExtractGalleryExtension(\n\t\textensionKey: ExtensionKey,\n\t\tgallery: IGalleryExtension,\n\t\toperation: InstallOperation,\n\t\toptions: InstallExtensionTaskOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<ExtractExtensionResult> {\n\t\tconst { verificationStatus, location } = await this.downloadExtension(\n\t\t\tgallery,\n\t\t\toperation,\n\t\t\t!options.donotVerifySignature,\n\t\t\toptions.context?.[EXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT],\n\t\t);\n\t\ttry {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\n\t\t\t// validate manifest\n\t\t\tconst manifest = await getManifest(location.fsPath);\n\t\t\tif (\n\t\t\t\t!new ExtensionKey(gallery.identifier, gallery.version).equals(\n\t\t\t\t\tnew ExtensionKey(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: getGalleryExtensionId(\n\t\t\t\t\t\t\t\tmanifest.publisher,\n\t\t\t\t\t\t\t\tmanifest.name,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmanifest.version,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"invalidManifest\",\n\t\t\t\t\t\t\"Cannot install '{0}' extension because of manifest mismatch with Marketplace\",\n\t\t\t\t\t\tgallery.identifier.id,\n\t\t\t\t\t),\n\t\t\t\t\tExtensionManagementErrorCode.Invalid,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst local = await this.extensionsScanner.extractUserExtension(\n\t\t\t\textensionKey,\n\t\t\t\tlocation.fsPath,\n\t\t\t\t{\n\t\t\t\t\tid: gallery.identifier.uuid,\n\t\t\t\t\tpublisherId: gallery.publisherId,\n\t\t\t\t\tpublisherDisplayName: gallery.publisherDisplayName,\n\t\t\t\t\ttargetPlatform: gallery.properties.targetPlatform,\n\t\t\t\t\tisApplicationScoped: options.isApplicationScoped,\n\t\t\t\t\tisMachineScoped: options.isMachineScoped,\n\t\t\t\t\tisBuiltin: options.isBuiltin,\n\t\t\t\t\tisPreReleaseVersion: gallery.properties.isPreReleaseVersion,\n\t\t\t\t\thasPreReleaseVersion:\n\t\t\t\t\t\tgallery.properties.isPreReleaseVersion,\n\t\t\t\t\tinstalledTimestamp: Date.now(),\n\t\t\t\t\tpinned: options.installGivenVersion\n\t\t\t\t\t\t? true\n\t\t\t\t\t\t: !!options.pinned,\n\t\t\t\t\tpreRelease: isBoolean(options.preRelease)\n\t\t\t\t\t\t? options.preRelease\n\t\t\t\t\t\t: options.installPreReleaseVersion ||\n\t\t\t\t\t\t\tgallery.properties.isPreReleaseVersion,\n\t\t\t\t\tsource: \"gallery\",\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\treturn { local, verificationStatus };\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionsDownloader.delete(location);\n\t\t\t} catch (e) {\n\t\t\t\t/* Ignore */\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Error while deleting the downloaded file`,\n\t\t\t\t\tlocation.toString(),\n\t\t\t\t\tgetErrorMessage(e),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow toExtensionManagementError(error);\n\t\t}\n\t}\n\n\tprivate async downloadExtension(\n\t\textension: IGalleryExtension,\n\t\toperation: InstallOperation,\n\t\tverifySignature: boolean,\n\t\tclientTargetPlatform?: TargetPlatform,\n\t): Promise<{\n\t\treadonly location: URI;\n\t\treadonly verificationStatus:\n\t\t\t| ExtensionSignatureVerificationCode\n\t\t\t| undefined;\n\t}> {\n\t\tif (verifySignature) {\n\t\t\tconst value = this.configurationService.getValue(\n\t\t\t\t\"extensions.verifySignature\",\n\t\t\t);\n\t\t\tverifySignature = isBoolean(value) ? value : true;\n\t\t}\n\t\tconst { location, verificationStatus } =\n\t\t\tawait this.extensionsDownloader.download(\n\t\t\t\textension,\n\t\t\t\toperation,\n\t\t\t\tverifySignature,\n\t\t\t\tclientTargetPlatform,\n\t\t\t);\n\n\t\tif (\n\t\t\tverificationStatus !== ExtensionSignatureVerificationCode.Success &&\n\t\t\tverifySignature &&\n\t\t\tthis.environmentService.isBuilt &&\n\t\t\t!isLinux\n\t\t) {\n\t\t\tif (!extension.isSigned) {\n\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\tnls.localize(\"not signed\", \"Extension is not signed.\"),\n\t\t\t\t\tExtensionManagementErrorCode.PackageNotSigned,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!verificationStatus) {\n\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"signature verification not executed\",\n\t\t\t\t\t\t\"Signature verification was not executed.\",\n\t\t\t\t\t),\n\t\t\t\t\tExtensionManagementErrorCode.SignatureVerificationInternal,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tswitch (verificationStatus) {\n\t\t\t\tcase ExtensionSignatureVerificationCode.PackageIntegrityCheckFailed:\n\t\t\t\tcase ExtensionSignatureVerificationCode.SignatureIsInvalid:\n\t\t\t\tcase ExtensionSignatureVerificationCode.SignatureManifestIsInvalid:\n\t\t\t\tcase ExtensionSignatureVerificationCode.SignatureIntegrityCheckFailed:\n\t\t\t\tcase ExtensionSignatureVerificationCode.EntryIsMissing:\n\t\t\t\tcase ExtensionSignatureVerificationCode.EntryIsTampered:\n\t\t\t\tcase ExtensionSignatureVerificationCode.Untrusted:\n\t\t\t\tcase ExtensionSignatureVerificationCode.CertificateRevoked:\n\t\t\t\tcase ExtensionSignatureVerificationCode.SignatureIsNotValid:\n\t\t\t\tcase ExtensionSignatureVerificationCode.SignatureArchiveHasTooManyEntries:\n\t\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"signature verification failed\",\n\t\t\t\t\t\t\t\"Signature verification failed with '{0}' error.\",\n\t\t\t\t\t\t\tverificationStatus,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tExtensionManagementErrorCode.SignatureVerificationFailed,\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow new ExtensionManagementError(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"signature verification failed\",\n\t\t\t\t\t\"Signature verification failed with '{0}' error.\",\n\t\t\t\t\tverificationStatus,\n\t\t\t\t),\n\t\t\t\tExtensionManagementErrorCode.SignatureVerificationInternal,\n\t\t\t);\n\t\t}\n\n\t\treturn { location, verificationStatus };\n\t}\n\n\tprivate async extractVSIX(\n\t\textensionKey: ExtensionKey,\n\t\tlocation: URI,\n\t\toptions: InstallExtensionTaskOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<ExtractExtensionResult> {\n\t\tconst local = await this.extensionsScanner.extractUserExtension(\n\t\t\textensionKey,\n\t\t\tpath.resolve(location.fsPath),\n\t\t\t{\n\t\t\t\tisApplicationScoped: options.isApplicationScoped,\n\t\t\t\tisMachineScoped: options.isMachineScoped,\n\t\t\t\tisBuiltin: options.isBuiltin,\n\t\t\t\tinstalledTimestamp: Date.now(),\n\t\t\t\tpinned: options.installGivenVersion ? true : !!options.pinned,\n\t\t\t\tsource: \"vsix\",\n\t\t\t},\n\t\t\toptions.keepExisting ?? true,\n\t\t\ttoken,\n\t\t);\n\t\treturn { local };\n\t}\n\n\tprivate async collectFiles(extension: ILocalExtension): Promise<IFile[]> {\n\t\tconst collectFilesFromDirectory = async (\n\t\t\tdir: string,\n\t\t): Promise<string[]> => {\n\t\t\tlet entries = await pfs.Promises.readdir(dir);\n\t\t\tentries = entries.map((e) => path.join(dir, e));\n\t\t\tconst stats = await Promise.all(\n\t\t\t\tentries.map((e) => fs.promises.stat(e)),\n\t\t\t);\n\t\t\tlet promise: Promise<string[]> = Promise.resolve([]);\n\t\t\tstats.forEach((stat, index) => {\n\t\t\t\tconst entry = entries[index];\n\t\t\t\tif (stat.isFile()) {\n\t\t\t\t\tpromise = promise.then((result) => [...result, entry]);\n\t\t\t\t}\n\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\tpromise = promise.then((result) =>\n\t\t\t\t\t\tcollectFilesFromDirectory(entry).then((files) => [\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t...files,\n\t\t\t\t\t\t]),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn promise;\n\t\t};\n\n\t\tconst files = await collectFilesFromDirectory(\n\t\t\textension.location.fsPath,\n\t\t);\n\t\treturn files.map((f) => ({\n\t\t\tpath: `extension/${path.relative(extension.location.fsPath, f)}`,\n\t\t\tlocalPath: f,\n\t\t}));\n\t}\n\n\tprivate async onDidChangeExtensionsFromAnotherSource({\n\t\tadded,\n\t\tremoved,\n\t}: DidChangeProfileExtensionsEvent): Promise<void> {\n\t\tif (removed) {\n\t\t\tconst removedExtensions =\n\t\t\t\tadded &&\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tremoved.profileLocation,\n\t\t\t\t\tadded.profileLocation,\n\t\t\t\t)\n\t\t\t\t\t? removed.extensions.filter((e) =>\n\t\t\t\t\t\t\tadded.extensions.every(\n\t\t\t\t\t\t\t\t(identifier) =>\n\t\t\t\t\t\t\t\t\t!areSameExtensions(identifier, e),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t: removed.extensions;\n\t\t\tfor (const identifier of removedExtensions) {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Extensions removed from another source\",\n\t\t\t\t\tidentifier.id,\n\t\t\t\t\tremoved.profileLocation.toString(),\n\t\t\t\t);\n\t\t\t\tthis._onDidUninstallExtension.fire({\n\t\t\t\t\tidentifier,\n\t\t\t\t\tprofileLocation: removed.profileLocation,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (added) {\n\t\t\tconst extensions = await this.getInstalled(\n\t\t\t\tExtensionType.User,\n\t\t\t\tadded.profileLocation,\n\t\t\t);\n\t\t\tconst addedExtensions = extensions.filter((e) =>\n\t\t\t\tadded.extensions.some((identifier) =>\n\t\t\t\t\tareSameExtensions(identifier, e.identifier),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._onDidInstallExtensions.fire(\n\t\t\t\taddedExtensions.map((local) => {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Extensions added from another source\",\n\t\t\t\t\t\tlocal.identifier.id,\n\t\t\t\t\t\tadded.profileLocation.toString(),\n\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tidentifier: local.identifier,\n\t\t\t\t\t\tlocal,\n\t\t\t\t\t\tprofileLocation: added.profileLocation,\n\t\t\t\t\t\toperation: InstallOperation.None,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate readonly knownDirectories = new ResourceSet();\n\tprivate async watchForExtensionsNotInstalledBySystem(): Promise<void> {\n\t\tthis._register(\n\t\t\tthis.extensionsScanner.onExtract((resource) =>\n\t\t\t\tthis.knownDirectories.add(resource),\n\t\t\t),\n\t\t);\n\t\tconst stat = await this.fileService.resolve(\n\t\t\tthis.extensionsScannerService.userExtensionsLocation,\n\t\t);\n\t\tfor (const childStat of stat.children ?? []) {\n\t\t\tif (childStat.isDirectory) {\n\t\t\t\tthis.knownDirectories.add(childStat.resource);\n\t\t\t}\n\t\t}\n\t\tthis._register(\n\t\t\tthis.fileService.watch(\n\t\t\t\tthis.extensionsScannerService.userExtensionsLocation,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.fileService.onDidFilesChange((e) => this.onDidFilesChange(e)),\n\t\t);\n\t}\n\n\tprivate async onDidFilesChange(e: FileChangesEvent): Promise<void> {\n\t\tif (\n\t\t\t!e.affects(\n\t\t\t\tthis.extensionsScannerService.userExtensionsLocation,\n\t\t\t\tFileChangeType.ADDED,\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst added: ILocalExtension[] = [];\n\t\tfor (const resource of e.rawAdded) {\n\t\t\t// Check if this is a known directory\n\t\t\tif (this.knownDirectories.has(resource)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Is not immediate child of extensions resource\n\t\t\tif (\n\t\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tthis.uriIdentityService.extUri.dirname(resource),\n\t\t\t\t\tthis.extensionsScannerService.userExtensionsLocation,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// .obsolete file changed\n\t\t\tif (\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tresource,\n\t\t\t\t\tthis.uriIdentityService.extUri.joinPath(\n\t\t\t\t\t\tthis.extensionsScannerService.userExtensionsLocation,\n\t\t\t\t\t\t\".obsolete\",\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Ignore changes to files starting with `.`\n\t\t\tif (\n\t\t\t\tthis.uriIdentityService.extUri\n\t\t\t\t\t.basename(resource)\n\t\t\t\t\t.startsWith(\".\")\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if this is a directory\n\t\t\tif (!(await this.fileService.stat(resource)).isDirectory) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if this is an extension added by another source\n\t\t\t// Extension added by another source will not have installed timestamp\n\t\t\tconst extension =\n\t\t\t\tawait this.extensionsScanner.scanUserExtensionAtLocation(\n\t\t\t\t\tresource,\n\t\t\t\t);\n\t\t\tif (extension && extension.installedTimestamp === undefined) {\n\t\t\t\tthis.knownDirectories.add(resource);\n\t\t\t\tadded.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tif (added.length) {\n\t\t\tawait this.addExtensionsToProfile(\n\t\t\t\tadded.map((e) => [e, undefined]),\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t);\n\t\t\tthis.logService.info(\n\t\t\t\t\"Added extensions to default profile from external source\",\n\t\t\t\tadded.map((e) => e.identifier.id),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async addExtensionsToProfile(\n\t\textensions: [ILocalExtension, Metadata | undefined][],\n\t\tprofileLocation: URI,\n\t): Promise<void> {\n\t\tconst localExtensions = extensions.map((e) => e[0]);\n\t\tawait this.setInstalled(localExtensions);\n\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(\n\t\t\textensions,\n\t\t\tprofileLocation,\n\t\t);\n\t\tthis._onDidInstallExtensions.fire(\n\t\t\tlocalExtensions.map((local) => ({\n\t\t\t\tlocal,\n\t\t\t\tidentifier: local.identifier,\n\t\t\t\toperation: InstallOperation.None,\n\t\t\t\tprofileLocation,\n\t\t\t})),\n\t\t);\n\t}\n\n\tprivate async setInstalled(extensions: ILocalExtension[]): Promise<void> {\n\t\tconst uninstalled =\n\t\t\tawait this.extensionsScanner.getUninstalledExtensions();\n\t\tfor (const extension of extensions) {\n\t\t\tconst extensionKey = ExtensionKey.create(extension);\n\t\t\tif (!uninstalled[extensionKey.toString()]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.logService.trace(\n\t\t\t\t\"Removing the extension from uninstalled list:\",\n\t\t\t\textensionKey.id,\n\t\t\t);\n\t\t\tawait this.extensionsScanner.setInstalled(extensionKey);\n\t\t\tthis.logService.info(\n\t\t\t\t\"Removed the extension from uninstalled list:\",\n\t\t\t\textensionKey.id,\n\t\t\t);\n\t\t}\n\t}\n}\n\ntype UpdateMetadataErrorClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Update metadata error\";\n\textensionId: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"extension identifier\";\n\t};\n\tcode?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"error code\";\n\t};\n\tisProfile?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Is writing into profile\";\n\t};\n};\ntype UpdateMetadataErrorEvent = {\n\textensionId: string;\n\tcode?: string;\n\tisProfile?: boolean;\n};\n\nexport class ExtensionsScanner extends Disposable {\n\tprivate readonly uninstalledResource: URI;\n\tprivate readonly uninstalledFileLimiter: Queue<any>;\n\n\tprivate readonly _onExtract = this._register(new Emitter<URI>());\n\treadonly onExtract = this._onExtract.event;\n\n\tprivate scanAllExtensionPromise = new ResourceMap<\n\t\tPromise<IScannedExtension[]>\n\t>();\n\tprivate scanUserExtensionsPromise = new ResourceMap<\n\t\tPromise<IScannedExtension[]>\n\t>();\n\n\tconstructor(\n\t\tprivate readonly beforeRemovingExtension: (\n\t\t\te: ILocalExtension,\n\t\t) => Promise<void>,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExtensionsScannerService\n\t\tprivate readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IExtensionsProfileScannerService\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.uninstalledResource = joinPath(\n\t\t\tthis.extensionsScannerService.userExtensionsLocation,\n\t\t\t\".obsolete\",\n\t\t);\n\t\tthis.uninstalledFileLimiter = new Queue();\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tawait this.removeTemporarilyDeletedFolders();\n\t\tawait this.removeUninstalledExtensions();\n\t}\n\n\tasync scanExtensions(\n\t\ttype: ExtensionType | null,\n\t\tprofileLocation: URI,\n\t\tproductVersion: IProductVersion,\n\t): Promise<ILocalExtension[]> {\n\t\ttry {\n\t\t\tconst userScanOptions: ScanOptions = {\n\t\t\t\tincludeInvalid: true,\n\t\t\t\tprofileLocation,\n\t\t\t\tproductVersion,\n\t\t\t};\n\t\t\tlet scannedExtensions: IScannedExtension[] = [];\n\t\t\tif (type === null || type === ExtensionType.System) {\n\t\t\t\tlet scanAllExtensionsPromise =\n\t\t\t\t\tthis.scanAllExtensionPromise.get(profileLocation);\n\t\t\t\tif (!scanAllExtensionsPromise) {\n\t\t\t\t\tscanAllExtensionsPromise = this.extensionsScannerService\n\t\t\t\t\t\t.scanAllExtensions(\n\t\t\t\t\t\t\t{ includeInvalid: true, useCache: true },\n\t\t\t\t\t\t\tuserScanOptions,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.finally(() =>\n\t\t\t\t\t\t\tthis.scanAllExtensionPromise.delete(\n\t\t\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.scanAllExtensionPromise.set(\n\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\tscanAllExtensionsPromise,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tscannedExtensions.push(...(await scanAllExtensionsPromise));\n\t\t\t} else if (type === ExtensionType.User) {\n\t\t\t\tlet scanUserExtensionsPromise =\n\t\t\t\t\tthis.scanUserExtensionsPromise.get(profileLocation);\n\t\t\t\tif (!scanUserExtensionsPromise) {\n\t\t\t\t\tscanUserExtensionsPromise = this.extensionsScannerService\n\t\t\t\t\t\t.scanUserExtensions(userScanOptions)\n\t\t\t\t\t\t.finally(() =>\n\t\t\t\t\t\t\tthis.scanUserExtensionsPromise.delete(\n\t\t\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.scanUserExtensionsPromise.set(\n\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\tscanUserExtensionsPromise,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tscannedExtensions.push(...(await scanUserExtensionsPromise));\n\t\t\t}\n\t\t\tscannedExtensions =\n\t\t\t\ttype !== null\n\t\t\t\t\t? scannedExtensions.filter((r) => r.type === type)\n\t\t\t\t\t: scannedExtensions;\n\t\t\treturn await Promise.all(\n\t\t\t\tscannedExtensions.map((extension) =>\n\t\t\t\t\tthis.toLocalExtension(extension),\n\t\t\t\t),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\terror,\n\t\t\t\tExtensionManagementErrorCode.Scanning,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync scanAllUserExtensions(\n\t\texcludeOutdated: boolean,\n\t): Promise<ILocalExtension[]> {\n\t\ttry {\n\t\t\tconst scannedExtensions =\n\t\t\t\tawait this.extensionsScannerService.scanUserExtensions({\n\t\t\t\t\tincludeAllVersions: !excludeOutdated,\n\t\t\t\t\tincludeInvalid: true,\n\t\t\t\t});\n\t\t\treturn await Promise.all(\n\t\t\t\tscannedExtensions.map((extension) =>\n\t\t\t\t\tthis.toLocalExtension(extension),\n\t\t\t\t),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\terror,\n\t\t\t\tExtensionManagementErrorCode.Scanning,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync scanUserExtensionAtLocation(\n\t\tlocation: URI,\n\t): Promise<ILocalExtension | null> {\n\t\ttry {\n\t\t\tconst scannedExtension =\n\t\t\t\tawait this.extensionsScannerService.scanExistingExtension(\n\t\t\t\t\tlocation,\n\t\t\t\t\tExtensionType.User,\n\t\t\t\t\t{ includeInvalid: true },\n\t\t\t\t);\n\t\t\tif (scannedExtension) {\n\t\t\t\treturn await this.toLocalExtension(scannedExtension);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync extractUserExtension(\n\t\textensionKey: ExtensionKey,\n\t\tzipPath: string,\n\t\tmetadata: Metadata,\n\t\tremoveIfExists: boolean,\n\t\ttoken: CancellationToken,\n\t): Promise<ILocalExtension> {\n\t\tconst folderName = extensionKey.toString();\n\t\tconst tempLocation = URI.file(\n\t\t\tpath.join(\n\t\t\t\tthis.extensionsScannerService.userExtensionsLocation.fsPath,\n\t\t\t\t`.${generateUuid()}`,\n\t\t\t),\n\t\t);\n\t\tconst extensionLocation = URI.file(\n\t\t\tpath.join(\n\t\t\t\tthis.extensionsScannerService.userExtensionsLocation.fsPath,\n\t\t\t\tfolderName,\n\t\t\t),\n\t\t);\n\n\t\tif (await this.fileService.exists(extensionLocation)) {\n\t\t\tif (!removeIfExists) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await this.scanLocalExtension(\n\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\tExtensionType.User,\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t`Error while scanning the existing extension at ${extensionLocation.path}. Deleting the existing extension and extracting it.`,\n\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait this.deleteExtensionFromLocation(\n\t\t\t\t\textensionKey.id,\n\t\t\t\t\textensionLocation,\n\t\t\t\t\t\"removeExisting\",\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"errorDeleting\",\n\t\t\t\t\t\t\"Unable to delete the existing folder '{0}' while installing the extension '{1}'. Please delete the folder manually and try again\",\n\t\t\t\t\t\textensionLocation.fsPath,\n\t\t\t\t\t\textensionKey.id,\n\t\t\t\t\t),\n\t\t\t\t\tExtensionManagementErrorCode.Delete,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\n\t\t\t// Extract\n\t\t\ttry {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`Started extracting the extension from ${zipPath} to ${extensionLocation.fsPath}`,\n\t\t\t\t);\n\t\t\t\tawait extract(\n\t\t\t\t\tzipPath,\n\t\t\t\t\ttempLocation.fsPath,\n\t\t\t\t\t{ sourcePath: \"extension\", overwrite: true },\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`Extracted extension to ${extensionLocation}:`,\n\t\t\t\t\textensionKey.id,\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\tthrow fromExtractError(e);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait this.extensionsScannerService.updateMetadata(\n\t\t\t\t\ttempLocation,\n\t\t\t\t\tmetadata,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tUpdateMetadataErrorEvent,\n\t\t\t\t\tUpdateMetadataErrorClassification\n\t\t\t\t>(\"extension:extract\", {\n\t\t\t\t\textensionId: extensionKey.id,\n\t\t\t\t\tcode: `${toFileOperationResult(error)}`,\n\t\t\t\t});\n\t\t\t\tthrow toExtensionManagementError(\n\t\t\t\t\terror,\n\t\t\t\t\tExtensionManagementErrorCode.UpdateMetadata,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\n\t\t\t// Rename\n\t\t\ttry {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`Started renaming the extension from ${tempLocation.fsPath} to ${extensionLocation.fsPath}`,\n\t\t\t\t);\n\t\t\t\tawait this.rename(\n\t\t\t\t\ttempLocation.fsPath,\n\t\t\t\t\textensionLocation.fsPath,\n\t\t\t\t);\n\t\t\t\tthis.logService.info(\"Renamed to\", extensionLocation.fsPath);\n\t\t\t} catch (error) {\n\t\t\t\tif (error.code === \"ENOTEMPTY\") {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t`Rename failed because extension was installed by another source. So ignoring renaming.`,\n\t\t\t\t\t\textensionKey.id,\n\t\t\t\t\t);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.fileService.del(tempLocation, {\n\t\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t/* ignore */\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t`Rename failed because of ${getErrorMessage(error)}. Deleted from extracted location`,\n\t\t\t\t\t\ttempLocation,\n\t\t\t\t\t);\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onExtract.fire(extensionLocation);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(tempLocation, { recursive: true });\n\t\t\t} catch (e) {\n\t\t\t\t/* ignore */\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this.scanLocalExtension(extensionLocation, ExtensionType.User);\n\t}\n\n\tasync scanMetadata(\n\t\tlocal: ILocalExtension,\n\t\tprofileLocation?: URI,\n\t): Promise<Metadata | undefined> {\n\t\tif (profileLocation) {\n\t\t\tconst extension = await this.getScannedExtension(\n\t\t\t\tlocal,\n\t\t\t\tprofileLocation,\n\t\t\t);\n\t\t\treturn extension?.metadata;\n\t\t} else {\n\t\t\treturn this.extensionsScannerService.scanMetadata(local.location);\n\t\t}\n\t}\n\n\tprivate async getScannedExtension(\n\t\tlocal: ILocalExtension,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedProfileExtension | undefined> {\n\t\tconst extensions =\n\t\t\tawait this.extensionsProfileScannerService.scanProfileExtensions(\n\t\t\t\tprofileLocation,\n\t\t\t);\n\t\treturn extensions.find((e) =>\n\t\t\tareSameExtensions(e.identifier, local.identifier),\n\t\t);\n\t}\n\n\tasync updateMetadata(\n\t\tlocal: ILocalExtension,\n\t\tmetadata: Partial<Metadata>,\n\t\tprofileLocation?: URI,\n\t): Promise<ILocalExtension> {\n\t\ttry {\n\t\t\tif (profileLocation) {\n\t\t\t\tawait this.extensionsProfileScannerService.updateMetadata(\n\t\t\t\t\t[[local, metadata]],\n\t\t\t\t\tprofileLocation,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tawait this.extensionsScannerService.updateMetadata(\n\t\t\t\t\tlocal.location,\n\t\t\t\t\tmetadata,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tUpdateMetadataErrorEvent,\n\t\t\t\tUpdateMetadataErrorClassification\n\t\t\t>(\"extension:extract\", {\n\t\t\t\textensionId: local.identifier.id,\n\t\t\t\tcode: `${toFileOperationResult(error)}`,\n\t\t\t\tisProfile: !!profileLocation,\n\t\t\t});\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\terror,\n\t\t\t\tExtensionManagementErrorCode.UpdateMetadata,\n\t\t\t);\n\t\t}\n\t\treturn this.scanLocalExtension(\n\t\t\tlocal.location,\n\t\t\tlocal.type,\n\t\t\tprofileLocation,\n\t\t);\n\t}\n\n\tasync getUninstalledExtensions(): Promise<IStringDictionary<boolean>> {\n\t\ttry {\n\t\t\treturn await this.withUninstalledExtensions();\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\terror,\n\t\t\t\tExtensionManagementErrorCode.ReadUninstalled,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync setUninstalled(...extensions: IExtension[]): Promise<void> {\n\t\tconst extensionKeys: ExtensionKey[] = extensions.map((e) =>\n\t\t\tExtensionKey.create(e),\n\t\t);\n\t\tawait this.withUninstalledExtensions((uninstalled) =>\n\t\t\textensionKeys.forEach((extensionKey) => {\n\t\t\t\tuninstalled[extensionKey.toString()] = true;\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Marked extension as uninstalled\",\n\t\t\t\t\textensionKey.toString(),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync setInstalled(extensionKey: ExtensionKey): Promise<void> {\n\t\ttry {\n\t\t\tawait this.withUninstalledExtensions(\n\t\t\t\t(uninstalled) => delete uninstalled[extensionKey.toString()],\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\terror,\n\t\t\t\tExtensionManagementErrorCode.UnsetUninstalled,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync removeExtension(\n\t\textension: ILocalExtension | IScannedExtension,\n\t\ttype: string,\n\t): Promise<void> {\n\t\tif (\n\t\t\tthis.uriIdentityService.extUri.isEqualOrParent(\n\t\t\t\textension.location,\n\t\t\t\tthis.extensionsScannerService.userExtensionsLocation,\n\t\t\t)\n\t\t) {\n\t\t\treturn this.deleteExtensionFromLocation(\n\t\t\t\textension.identifier.id,\n\t\t\t\textension.location,\n\t\t\t\ttype,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync removeUninstalledExtension(\n\t\textension: ILocalExtension | IScannedExtension,\n\t): Promise<void> {\n\t\tawait this.removeExtension(extension, \"uninstalled\");\n\t\tawait this.withUninstalledExtensions(\n\t\t\t(uninstalled) =>\n\t\t\t\tdelete uninstalled[ExtensionKey.create(extension).toString()],\n\t\t);\n\t}\n\n\tasync copyExtension(\n\t\textension: ILocalExtension,\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t\tmetadata: Partial<Metadata>,\n\t): Promise<ILocalExtension> {\n\t\tconst source = await this.getScannedExtension(\n\t\t\textension,\n\t\t\tfromProfileLocation,\n\t\t);\n\t\tconst target = await this.getScannedExtension(\n\t\t\textension,\n\t\t\ttoProfileLocation,\n\t\t);\n\t\tmetadata = { ...source?.metadata, ...metadata };\n\n\t\tif (target) {\n\t\t\tif (\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\ttarget.location,\n\t\t\t\t\textension.location,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tawait this.extensionsProfileScannerService.updateMetadata(\n\t\t\t\t\t[[extension, { ...target.metadata, ...metadata }]],\n\t\t\t\t\ttoProfileLocation,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst targetExtension = await this.scanLocalExtension(\n\t\t\t\t\ttarget.location,\n\t\t\t\t\textension.type,\n\t\t\t\t\ttoProfileLocation,\n\t\t\t\t);\n\t\t\t\tawait this.extensionsProfileScannerService.removeExtensionFromProfile(\n\t\t\t\t\ttargetExtension,\n\t\t\t\t\ttoProfileLocation,\n\t\t\t\t);\n\t\t\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(\n\t\t\t\t\t[[extension, { ...target.metadata, ...metadata }]],\n\t\t\t\t\ttoProfileLocation,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(\n\t\t\t\t[[extension, metadata]],\n\t\t\t\ttoProfileLocation,\n\t\t\t);\n\t\t}\n\n\t\treturn this.scanLocalExtension(\n\t\t\textension.location,\n\t\t\textension.type,\n\t\t\ttoProfileLocation,\n\t\t);\n\t}\n\n\tasync copyExtensions(\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t\tproductVersion: IProductVersion,\n\t): Promise<void> {\n\t\tconst fromExtensions = await this.scanExtensions(\n\t\t\tExtensionType.User,\n\t\t\tfromProfileLocation,\n\t\t\tproductVersion,\n\t\t);\n\t\tconst extensions: [ILocalExtension, Metadata | undefined][] =\n\t\t\tawait Promise.all(\n\t\t\t\tfromExtensions\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(e) => !e.isApplicationScoped,\n\t\t\t\t\t) /* remove application scoped extensions */\n\t\t\t\t\t.map(async (e) => [\n\t\t\t\t\t\te,\n\t\t\t\t\t\tawait this.scanMetadata(e, fromProfileLocation),\n\t\t\t\t\t]),\n\t\t\t);\n\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(\n\t\t\textensions,\n\t\t\ttoProfileLocation,\n\t\t);\n\t}\n\n\tprivate async deleteExtensionFromLocation(\n\t\tid: string,\n\t\tlocation: URI,\n\t\ttype: string,\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t`Deleting ${type} extension from disk`,\n\t\t\tid,\n\t\t\tlocation.fsPath,\n\t\t);\n\t\tconst renamedLocation = this.uriIdentityService.extUri.joinPath(\n\t\t\tthis.uriIdentityService.extUri.dirname(location),\n\t\t\t`${this.uriIdentityService.extUri.basename(location)}.${hash(generateUuid()).toString(16)}${DELETED_FOLDER_POSTFIX}`,\n\t\t);\n\t\tawait this.rename(location.fsPath, renamedLocation.fsPath);\n\t\tawait this.fileService.del(renamedLocation, { recursive: true });\n\t\tthis.logService.info(\n\t\t\t`Deleted ${type} extension from disk`,\n\t\t\tid,\n\t\t\tlocation.fsPath,\n\t\t);\n\t}\n\n\tprivate withUninstalledExtensions(\n\t\tupdateFn?: (uninstalled: IStringDictionary<boolean>) => void,\n\t): Promise<IStringDictionary<boolean>> {\n\t\treturn this.uninstalledFileLimiter.queue(async () => {\n\t\t\tlet raw: string | undefined;\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\t\tthis.uninstalledResource,\n\t\t\t\t\t\"utf8\",\n\t\t\t\t);\n\t\t\t\traw = content.value.toString();\n\t\t\t} catch (error) {\n\t\t\t\tif (\n\t\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet uninstalled = {};\n\t\t\tif (raw) {\n\t\t\t\ttry {\n\t\t\t\t\tuninstalled = JSON.parse(raw);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t/* ignore */\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (updateFn) {\n\t\t\t\tupdateFn(uninstalled);\n\t\t\t\tif (Object.keys(uninstalled).length) {\n\t\t\t\t\tawait this.fileService.writeFile(\n\t\t\t\t\t\tthis.uninstalledResource,\n\t\t\t\t\t\tVSBuffer.fromString(JSON.stringify(uninstalled)),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tawait this.fileService.del(this.uninstalledResource);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uninstalled;\n\t\t});\n\t}\n\n\tprivate async rename(\n\t\textractPath: string,\n\t\trenamePath: string,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tawait pfs.Promises.rename(\n\t\t\t\textractPath,\n\t\t\t\trenamePath,\n\t\t\t\t2 * 60 * 1000 /* Retry for 2 minutes */,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\terror,\n\t\t\t\tExtensionManagementErrorCode.Rename,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync scanLocalExtension(\n\t\tlocation: URI,\n\t\ttype: ExtensionType,\n\t\tprofileLocation?: URI,\n\t): Promise<ILocalExtension> {\n\t\ttry {\n\t\t\tif (profileLocation) {\n\t\t\t\tconst scannedExtensions =\n\t\t\t\t\tawait this.extensionsScannerService.scanUserExtensions({\n\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t});\n\t\t\t\tconst scannedExtension = scannedExtensions.find((e) =>\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\te.location,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (scannedExtension) {\n\t\t\t\t\treturn await this.toLocalExtension(scannedExtension);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst scannedExtension =\n\t\t\t\t\tawait this.extensionsScannerService.scanExistingExtension(\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\t{ includeInvalid: true },\n\t\t\t\t\t);\n\t\t\t\tif (scannedExtension) {\n\t\t\t\t\treturn await this.toLocalExtension(scannedExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new ExtensionManagementError(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"cannot read\",\n\t\t\t\t\t\"Cannot read the extension from {0}\",\n\t\t\t\t\tlocation.path,\n\t\t\t\t),\n\t\t\t\tExtensionManagementErrorCode.ScanningExtension,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\terror,\n\t\t\t\tExtensionManagementErrorCode.ScanningExtension,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async toLocalExtension(\n\t\textension: IScannedExtension,\n\t): Promise<ILocalExtension> {\n\t\tconst stat = await this.fileService.resolve(extension.location);\n\t\tlet readmeUrl: URI | undefined;\n\t\tlet changelogUrl: URI | undefined;\n\t\tif (stat.children) {\n\t\t\treadmeUrl = stat.children.find(({ name }) =>\n\t\t\t\t/^readme(\\.txt|\\.md|)$/i.test(name),\n\t\t\t)?.resource;\n\t\t\tchangelogUrl = stat.children.find(({ name }) =>\n\t\t\t\t/^changelog(\\.txt|\\.md|)$/i.test(name),\n\t\t\t)?.resource;\n\t\t}\n\t\treturn {\n\t\t\tidentifier: extension.identifier,\n\t\t\ttype: extension.type,\n\t\t\tisBuiltin: extension.isBuiltin || !!extension.metadata?.isBuiltin,\n\t\t\tlocation: extension.location,\n\t\t\tmanifest: extension.manifest,\n\t\t\ttargetPlatform: extension.targetPlatform,\n\t\t\tvalidations: extension.validations,\n\t\t\tisValid: extension.isValid,\n\t\t\treadmeUrl,\n\t\t\tchangelogUrl,\n\t\t\tpublisherDisplayName: extension.metadata?.publisherDisplayName,\n\t\t\tpublisherId: extension.metadata?.publisherId || null,\n\t\t\tisApplicationScoped: !!extension.metadata?.isApplicationScoped,\n\t\t\tisMachineScoped: !!extension.metadata?.isMachineScoped,\n\t\t\tisPreReleaseVersion: !!extension.metadata?.isPreReleaseVersion,\n\t\t\thasPreReleaseVersion: !!extension.metadata?.hasPreReleaseVersion,\n\t\t\tpreRelease: !!extension.metadata?.preRelease,\n\t\t\tinstalledTimestamp: extension.metadata?.installedTimestamp,\n\t\t\tupdated: !!extension.metadata?.updated,\n\t\t\tpinned: !!extension.metadata?.pinned,\n\t\t\tisWorkspaceScoped: false,\n\t\t\tsource:\n\t\t\t\textension.metadata?.source ??\n\t\t\t\t(extension.identifier.uuid ? \"gallery\" : \"vsix\"),\n\t\t};\n\t}\n\n\tprivate async removeUninstalledExtensions(): Promise<void> {\n\t\tconst uninstalled = await this.getUninstalledExtensions();\n\t\tif (Object.keys(uninstalled).length === 0) {\n\t\t\tthis.logService.debug(`No uninstalled extensions found.`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.debug(\n\t\t\t`Removing uninstalled extensions:`,\n\t\t\tObject.keys(uninstalled),\n\t\t);\n\n\t\tconst extensions =\n\t\t\tawait this.extensionsScannerService.scanUserExtensions({\n\t\t\t\tincludeAllVersions: true,\n\t\t\t\tincludeUninstalled: true,\n\t\t\t\tincludeInvalid: true,\n\t\t\t}); // All user extensions\n\t\tconst installed: Set<string> = new Set<string>();\n\t\tfor (const e of extensions) {\n\t\t\tif (!uninstalled[ExtensionKey.create(e).toString()]) {\n\t\t\t\tinstalled.add(e.identifier.id.toLowerCase());\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\t// running post uninstall tasks for extensions that are not installed anymore\n\t\t\tconst byExtension = groupByExtension(\n\t\t\t\textensions,\n\t\t\t\t(e) => e.identifier,\n\t\t\t);\n\t\t\tawait Promises.settled(\n\t\t\t\tbyExtension.map(async (e) => {\n\t\t\t\t\tconst latest = e.sort((a, b) =>\n\t\t\t\t\t\tsemver.rcompare(a.manifest.version, b.manifest.version),\n\t\t\t\t\t)[0];\n\t\t\t\t\tif (!installed.has(latest.identifier.id.toLowerCase())) {\n\t\t\t\t\t\tawait this.beforeRemovingExtension(\n\t\t\t\t\t\t\tawait this.toLocalExtension(latest),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\tconst toRemove = extensions.filter(\n\t\t\t(e) =>\n\t\t\t\te.metadata /* Installed by System */ &&\n\t\t\t\tuninstalled[ExtensionKey.create(e).toString()],\n\t\t);\n\t\tawait Promise.allSettled(\n\t\t\ttoRemove.map((e) => this.removeUninstalledExtension(e)),\n\t\t);\n\t}\n\n\tprivate async removeTemporarilyDeletedFolders(): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionManagementService#removeTempDeleteFolders\",\n\t\t);\n\n\t\tlet stat;\n\t\ttry {\n\t\t\tstat = await this.fileService.resolve(\n\t\t\t\tthis.extensionsScannerService.userExtensionsLocation,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!stat?.children) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait Promise.allSettled(\n\t\t\t\tstat.children.map(async (child) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!child.isDirectory ||\n\t\t\t\t\t\t!child.name.endsWith(DELETED_FOLDER_POSTFIX)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\"Deleting the temporarily deleted folder\",\n\t\t\t\t\t\tchild.resource.toString(),\n\t\t\t\t\t);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.fileService.del(child.resource, {\n\t\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t\"Deleted the temporarily deleted folder\",\n\t\t\t\t\t\t\tchild.resource.toString(),\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\t/* ignore */\n\t\t}\n\t}\n}\n\nclass InstallExtensionInProfileTask\n\textends AbstractExtensionTask<ILocalExtension>\n\timplements IInstallExtensionTask\n{\n\tprivate _operation = InstallOperation.Install;\n\tget operation() {\n\t\treturn this.options.operation ?? this._operation;\n\t}\n\n\tprivate _verificationStatus: ExtensionSignatureVerificationCode | undefined;\n\tget verificationStatus() {\n\t\treturn this._verificationStatus;\n\t}\n\n\treadonly identifier: IExtensionIdentifier;\n\n\tconstructor(\n\t\tprivate readonly extensionKey: ExtensionKey,\n\t\treadonly manifest: IExtensionManifest,\n\t\treadonly source: IGalleryExtension | URI,\n\t\treadonly options: InstallExtensionTaskOptions,\n\t\tprivate readonly extractExtensionFn: (\n\t\t\toperation: InstallOperation,\n\t\t\ttoken: CancellationToken,\n\t\t) => Promise<ExtractExtensionResult>,\n\t\tprivate readonly extensionsScanner: ExtensionsScanner,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@IExtensionGalleryService\n\t\tprivate readonly galleryService: IExtensionGalleryService,\n\t\t@IUserDataProfilesService\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IExtensionsScannerService\n\t\tprivate readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IExtensionsProfileScannerService\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.identifier = this.extensionKey.identifier;\n\t}\n\n\tprotected async doRun(token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst installed = await this.extensionsScanner.scanExtensions(\n\t\t\tExtensionType.User,\n\t\t\tthis.options.profileLocation,\n\t\t\tthis.options.productVersion,\n\t\t);\n\t\tconst existingExtension = installed.find((i) =>\n\t\t\tareSameExtensions(i.identifier, this.identifier),\n\t\t);\n\t\tif (existingExtension) {\n\t\t\tthis._operation = InstallOperation.Update;\n\t\t}\n\n\t\tconst metadata: Metadata = {\n\t\t\tisApplicationScoped:\n\t\t\t\tthis.options.isApplicationScoped ||\n\t\t\t\texistingExtension?.isApplicationScoped,\n\t\t\tisMachineScoped:\n\t\t\t\tthis.options.isMachineScoped ||\n\t\t\t\texistingExtension?.isMachineScoped,\n\t\t\tisBuiltin: this.options.isBuiltin || existingExtension?.isBuiltin,\n\t\t\tisSystem:\n\t\t\t\texistingExtension?.type === ExtensionType.System\n\t\t\t\t\t? true\n\t\t\t\t\t: undefined,\n\t\t\tinstalledTimestamp: Date.now(),\n\t\t\tpinned: this.options.installGivenVersion\n\t\t\t\t? true\n\t\t\t\t: (this.options.pinned ?? existingExtension?.pinned),\n\t\t\tsource: this.source instanceof URI ? \"vsix\" : \"gallery\",\n\t\t};\n\n\t\tlet local: ILocalExtension | undefined;\n\n\t\t// VSIX\n\t\tif (this.source instanceof URI) {\n\t\t\tif (existingExtension) {\n\t\t\t\tif (\n\t\t\t\t\tthis.extensionKey.equals(\n\t\t\t\t\t\tnew ExtensionKey(\n\t\t\t\t\t\t\texistingExtension.identifier,\n\t\t\t\t\t\t\texistingExtension.manifest.version,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.extensionsScanner.removeExtension(\n\t\t\t\t\t\t\texistingExtension,\n\t\t\t\t\t\t\t\"existing\",\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"restartCode\",\n\t\t\t\t\t\t\t\t\"Please restart VS Code before reinstalling {0}.\",\n\t\t\t\t\t\t\t\tthis.manifest.displayName || this.manifest.name,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Remove the extension with same version if it is already uninstalled.\n\t\t\t// Installing a VSIX extension shall replace the existing extension always.\n\t\t\tconst existingWithSameVersion = await this.unsetIfUninstalled(\n\t\t\t\tthis.extensionKey,\n\t\t\t);\n\t\t\tif (existingWithSameVersion) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.extensionsScanner.removeExtension(\n\t\t\t\t\t\texistingWithSameVersion,\n\t\t\t\t\t\t\"existing\",\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"restartCode\",\n\t\t\t\t\t\t\t\"Please restart VS Code before reinstalling {0}.\",\n\t\t\t\t\t\t\tthis.manifest.displayName || this.manifest.name,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Gallery\n\t\telse {\n\t\t\tmetadata.id = this.source.identifier.uuid;\n\t\t\tmetadata.publisherId = this.source.publisherId;\n\t\t\tmetadata.publisherDisplayName = this.source.publisherDisplayName;\n\t\t\tmetadata.targetPlatform = this.source.properties.targetPlatform;\n\t\t\tmetadata.updated = !!existingExtension;\n\t\t\tmetadata.isPreReleaseVersion =\n\t\t\t\tthis.source.properties.isPreReleaseVersion;\n\t\t\tmetadata.hasPreReleaseVersion =\n\t\t\t\texistingExtension?.hasPreReleaseVersion ||\n\t\t\t\tthis.source.properties.isPreReleaseVersion;\n\t\t\tmetadata.preRelease = isBoolean(this.options.preRelease)\n\t\t\t\t? this.options.preRelease\n\t\t\t\t: this.options.installPreReleaseVersion ||\n\t\t\t\t\tthis.source.properties.isPreReleaseVersion ||\n\t\t\t\t\texistingExtension?.preRelease;\n\n\t\t\tif (\n\t\t\t\texistingExtension &&\n\t\t\t\texistingExtension.type !== ExtensionType.System &&\n\t\t\t\texistingExtension.manifest.version === this.source.version\n\t\t\t) {\n\t\t\t\treturn this.extensionsScanner.updateMetadata(\n\t\t\t\t\texistingExtension,\n\t\t\t\t\tmetadata,\n\t\t\t\t\tthis.options.profileLocation,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Unset if the extension is uninstalled and return the unset extension.\n\t\t\tlocal = await this.unsetIfUninstalled(this.extensionKey);\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow toExtensionManagementError(new CancellationError());\n\t\t}\n\n\t\tif (!local) {\n\t\t\tconst result = await this.extractExtensionFn(this.operation, token);\n\t\t\tlocal = result.local;\n\t\t\tthis._verificationStatus = result.verificationStatus;\n\t\t}\n\n\t\tif (\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t\tthis.options.profileLocation,\n\t\t\t)\n\t\t) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionsScannerService.initializeDefaultProfileExtensions();\n\t\t\t} catch (error) {\n\t\t\t\tthrow toExtensionManagementError(\n\t\t\t\t\terror,\n\t\t\t\t\tExtensionManagementErrorCode.IntializeDefaultProfile,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow toExtensionManagementError(new CancellationError());\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(\n\t\t\t\t[[local, metadata]],\n\t\t\t\tthis.options.profileLocation,\n\t\t\t\t!local.isValid,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(\n\t\t\t\terror,\n\t\t\t\tExtensionManagementErrorCode.AddToProfile,\n\t\t\t);\n\t\t}\n\n\t\tconst result = await this.extensionsScanner.scanLocalExtension(\n\t\t\tlocal.location,\n\t\t\tExtensionType.User,\n\t\t\tthis.options.profileLocation,\n\t\t);\n\t\tif (!result) {\n\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\"Cannot find the installed extension\",\n\t\t\t\tExtensionManagementErrorCode.InstalledExtensionNotFound,\n\t\t\t);\n\t\t}\n\n\t\tif (this.source instanceof URI) {\n\t\t\tthis.updateMetadata(local, token);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async unsetIfUninstalled(\n\t\textensionKey: ExtensionKey,\n\t): Promise<ILocalExtension | undefined> {\n\t\tconst uninstalled =\n\t\t\tawait this.extensionsScanner.getUninstalledExtensions();\n\t\tif (!uninstalled[extensionKey.toString()]) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t\"Removing the extension from uninstalled list:\",\n\t\t\textensionKey.id,\n\t\t);\n\t\t// If the same version of extension is marked as uninstalled, remove it from there and return the local.\n\t\tawait this.extensionsScanner.setInstalled(extensionKey);\n\t\tthis.logService.info(\n\t\t\t\"Removed the extension from uninstalled list:\",\n\t\t\textensionKey.id,\n\t\t);\n\n\t\tconst userExtensions =\n\t\t\tawait this.extensionsScanner.scanAllUserExtensions(true);\n\t\treturn userExtensions.find((i) =>\n\t\t\tExtensionKey.create(i).equals(extensionKey),\n\t\t);\n\t}\n\n\tprivate async updateMetadata(\n\t\textension: ILocalExtension,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tlet [galleryExtension] = await this.galleryService.getExtensions(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tid: extension.identifier.id,\n\t\t\t\t\t\tversion: extension.manifest.version,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tif (!galleryExtension) {\n\t\t\t\t[galleryExtension] = await this.galleryService.getExtensions(\n\t\t\t\t\t[{ id: extension.identifier.id }],\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (galleryExtension) {\n\t\t\t\tconst metadata = {\n\t\t\t\t\tid: galleryExtension.identifier.uuid,\n\t\t\t\t\tpublisherDisplayName: galleryExtension.publisherDisplayName,\n\t\t\t\t\tpublisherId: galleryExtension.publisherId,\n\t\t\t\t\tisPreReleaseVersion:\n\t\t\t\t\t\tgalleryExtension.properties.isPreReleaseVersion,\n\t\t\t\t\thasPreReleaseVersion:\n\t\t\t\t\t\textension.hasPreReleaseVersion ||\n\t\t\t\t\t\tgalleryExtension.properties.isPreReleaseVersion,\n\t\t\t\t\tpreRelease:\n\t\t\t\t\t\tgalleryExtension.properties.isPreReleaseVersion ||\n\t\t\t\t\t\tthis.options.installPreReleaseVersion,\n\t\t\t\t};\n\t\t\t\tawait this.extensionsScanner.updateMetadata(\n\t\t\t\t\textension,\n\t\t\t\t\tmetadata,\n\t\t\t\t\tthis.options.profileLocation,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* Ignore Error */\n\t\t}\n\t}\n}\n\nclass UninstallExtensionInProfileTask\n\textends AbstractExtensionTask<void>\n\timplements IUninstallExtensionTask\n{\n\tconstructor(\n\t\treadonly extension: ILocalExtension,\n\t\treadonly options: UninstallExtensionTaskOptions,\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doRun(token: CancellationToken): Promise<void> {\n\t\tawait this.extensionsProfileScannerService.removeExtensionFromProfile(\n\t\t\tthis.extension,\n\t\t\tthis.options.profileLocation,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["files", "e", "result"]
}
