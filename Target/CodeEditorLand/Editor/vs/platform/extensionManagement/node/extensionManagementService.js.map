{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/node/extensionManagementService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { Promises, Queue } from '../../../base/common/async.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { CancellationError, getErrorMessage } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ResourceMap, ResourceSet } from '../../../base/common/map.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport * as path from '../../../base/common/path.js';\nimport { joinPath } from '../../../base/common/resources.js';\nimport * as semver from '../../../base/common/semver/semver.js';\nimport { isBoolean } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport * as pfs from '../../../base/node/pfs.js';\nimport { extract, IFile, zip } from '../../../base/node/zip.js';\nimport * as nls from '../../../nls.js';\nimport { IDownloadService } from '../../download/common/download.js';\nimport { INativeEnvironmentService } from '../../environment/common/environment.js';\nimport { AbstractExtensionManagementService, AbstractExtensionTask, ExtensionVerificationStatus, IInstallExtensionTask, InstallExtensionTaskOptions, IUninstallExtensionTask, toExtensionManagementError, UninstallExtensionTaskOptions } from '../common/abstractExtensionManagementService.js';\nimport {\n\tExtensionManagementError, ExtensionManagementErrorCode, IExtensionGalleryService, IExtensionIdentifier, IExtensionManagementService, IGalleryExtension, ILocalExtension, InstallOperation,\n\tMetadata, InstallOptions,\n\tIProductVersion,\n\tEXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT,\n} from '../common/extensionManagement.js';\nimport { areSameExtensions, computeTargetPlatform, ExtensionKey, getGalleryExtensionId, groupByExtension } from '../common/extensionManagementUtil.js';\nimport { IExtensionsProfileScannerService, IScannedProfileExtension } from '../common/extensionsProfileScannerService.js';\nimport { IExtensionsScannerService, IScannedExtension, ScanOptions } from '../common/extensionsScannerService.js';\nimport { ExtensionsDownloader } from './extensionDownloader.js';\nimport { ExtensionsLifecycle } from './extensionLifecycle.js';\nimport { fromExtractError, getManifest } from './extensionManagementUtil.js';\nimport { ExtensionsManifestCache } from './extensionsManifestCache.js';\nimport { DidChangeProfileExtensionsEvent, ExtensionsWatcher } from './extensionsWatcher.js';\nimport { ExtensionType, IExtension, IExtensionManifest, TargetPlatform } from '../../extensions/common/extensions.js';\nimport { isEngineValid } from '../../extensions/common/extensionValidator.js';\nimport { FileChangesEvent, FileChangeType, FileOperationResult, IFileService, toFileOperationResult } from '../../files/common/files.js';\nimport { IInstantiationService, refineServiceDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\n\nexport const INativeServerExtensionManagementService = refineServiceDecorator<IExtensionManagementService, INativeServerExtensionManagementService>(IExtensionManagementService);\nexport interface INativeServerExtensionManagementService extends IExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\tscanAllUserInstalledExtensions(): Promise<ILocalExtension[]>;\n\tscanInstalledExtensionAtLocation(location: URI): Promise<ILocalExtension | null>;\n\tmarkAsUninstalled(...extensions: IExtension[]): Promise<void>;\n}\n\ntype ExtractExtensionResult = { readonly local: ILocalExtension; readonly verificationStatus?: ExtensionVerificationStatus };\n\nconst DELETED_FOLDER_POSTFIX = '.vsctmp';\n\nexport class ExtensionManagementService extends AbstractExtensionManagementService implements INativeServerExtensionManagementService {\n\n\tprivate readonly extensionsScanner: ExtensionsScanner;\n\tprivate readonly manifestCache: ExtensionsManifestCache;\n\tprivate readonly extensionsDownloader: ExtensionsDownloader;\n\n\tprivate readonly extractingGalleryExtensions = new Map<string, Promise<ExtractExtensionResult>>();\n\n\tconstructor(\n\t\t@IExtensionGalleryService galleryService: IExtensionGalleryService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@IExtensionsScannerService private readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IExtensionsProfileScannerService private readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IDownloadService private downloadService: IDownloadService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService\n\t) {\n\t\tsuper(galleryService, telemetryService, uriIdentityService, logService, productService, userDataProfilesService);\n\t\tconst extensionLifecycle = this._register(instantiationService.createInstance(ExtensionsLifecycle));\n\t\tthis.extensionsScanner = this._register(instantiationService.createInstance(ExtensionsScanner, extension => extensionLifecycle.postUninstall(extension)));\n\t\tthis.manifestCache = this._register(new ExtensionsManifestCache(userDataProfilesService, fileService, uriIdentityService, this, this.logService));\n\t\tthis.extensionsDownloader = this._register(instantiationService.createInstance(ExtensionsDownloader));\n\n\t\tconst extensionsWatcher = this._register(new ExtensionsWatcher(this, this.extensionsScannerService, userDataProfilesService, extensionsProfileScannerService, uriIdentityService, fileService, logService));\n\t\tthis._register(extensionsWatcher.onDidChangeExtensionsByAnotherSource(e => this.onDidChangeExtensionsFromAnotherSource(e)));\n\t\tthis.watchForExtensionsNotInstalledBySystem();\n\t}\n\n\tprivate _targetPlatformPromise: Promise<TargetPlatform> | undefined;\n\tgetTargetPlatform(): Promise<TargetPlatform> {\n\t\tif (!this._targetPlatformPromise) {\n\t\t\tthis._targetPlatformPromise = computeTargetPlatform(this.fileService, this.logService);\n\t\t}\n\t\treturn this._targetPlatformPromise;\n\t}\n\n\tasync zip(extension: ILocalExtension): Promise<URI> {\n\t\tthis.logService.trace('ExtensionManagementService#zip', extension.identifier.id);\n\t\tconst files = await this.collectFiles(extension);\n\t\tconst location = await zip(joinPath(this.extensionsDownloader.extensionsDownloadDir, generateUuid()).fsPath, files);\n\t\treturn URI.file(location);\n\t}\n\n\tasync getManifest(vsix: URI): Promise<IExtensionManifest> {\n\t\tconst { location, cleanup } = await this.downloadVsix(vsix);\n\t\tconst zipPath = path.resolve(location.fsPath);\n\t\ttry {\n\t\t\treturn await getManifest(zipPath);\n\t\t} finally {\n\t\t\tawait cleanup();\n\t\t}\n\t}\n\n\tgetInstalled(type?: ExtensionType, profileLocation: URI = this.userDataProfilesService.defaultProfile.extensionsResource, productVersion: IProductVersion = { version: this.productService.version, date: this.productService.date }): Promise<ILocalExtension[]> {\n\t\treturn this.extensionsScanner.scanExtensions(type ?? null, profileLocation, productVersion);\n\t}\n\n\tscanAllUserInstalledExtensions(): Promise<ILocalExtension[]> {\n\t\treturn this.extensionsScanner.scanAllUserExtensions(false);\n\t}\n\n\tscanInstalledExtensionAtLocation(location: URI): Promise<ILocalExtension | null> {\n\t\treturn this.extensionsScanner.scanUserExtensionAtLocation(location);\n\t}\n\n\tasync install(vsix: URI, options: InstallOptions = {}): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#install', vsix.toString());\n\n\t\tconst { location, cleanup } = await this.downloadVsix(vsix);\n\n\t\ttry {\n\t\t\tconst manifest = await getManifest(path.resolve(location.fsPath));\n\t\t\tconst extensionId = getGalleryExtensionId(manifest.publisher, manifest.name);\n\t\t\tif (manifest.engines && manifest.engines.vscode && !isEngineValid(manifest.engines.vscode, this.productService.version, this.productService.date)) {\n\t\t\t\tthrow new Error(nls.localize('incompatible', \"Unable to install extension '{0}' as it is not compatible with VS Code '{1}'.\", extensionId, this.productService.version));\n\t\t\t}\n\n\t\t\tconst results = await this.installExtensions([{ manifest, extension: location, options }]);\n\t\t\tconst result = results.find(({ identifier }) => areSameExtensions(identifier, { id: extensionId }));\n\t\t\tif (result?.local) {\n\t\t\t\treturn result.local;\n\t\t\t}\n\t\t\tif (result?.error) {\n\t\t\t\tthrow result.error;\n\t\t\t}\n\t\t\tthrow toExtensionManagementError(new Error(`Unknown error while installing extension ${extensionId}`));\n\t\t} finally {\n\t\t\tawait cleanup();\n\t\t}\n\t}\n\n\tasync installFromLocation(location: URI, profileLocation: URI): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#installFromLocation', location.toString());\n\t\tconst local = await this.extensionsScanner.scanUserExtensionAtLocation(location);\n\t\tif (!local || !local.manifest.name || !local.manifest.version) {\n\t\t\tthrow new Error(`Cannot find a valid extension from the location ${location.toString()}`);\n\t\t}\n\t\tawait this.addExtensionsToProfile([[local, { source: 'resource' }]], profileLocation);\n\t\tthis.logService.info('Successfully installed extension', local.identifier.id, profileLocation.toString());\n\t\treturn local;\n\t}\n\n\tasync installExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]> {\n\t\tthis.logService.trace('ExtensionManagementService#installExtensionsFromProfile', extensions, fromProfileLocation.toString(), toProfileLocation.toString());\n\t\tconst extensionsToInstall = (await this.getInstalled(ExtensionType.User, fromProfileLocation)).filter(e => extensions.some(id => areSameExtensions(id, e.identifier)));\n\t\tif (extensionsToInstall.length) {\n\t\t\tconst metadata = await Promise.all(extensionsToInstall.map(e => this.extensionsScanner.scanMetadata(e, fromProfileLocation)));\n\t\t\tawait this.addExtensionsToProfile(extensionsToInstall.map((e, index) => [e, metadata[index]]), toProfileLocation);\n\t\t\tthis.logService.info('Successfully installed extensions', extensionsToInstall.map(e => e.identifier.id), toProfileLocation.toString());\n\t\t}\n\t\treturn extensionsToInstall;\n\t}\n\n\tasync updateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation: URI): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#updateMetadata', local.identifier.id);\n\t\tif (metadata.isPreReleaseVersion) {\n\t\t\tmetadata.preRelease = true;\n\t\t\tmetadata.hasPreReleaseVersion = true;\n\t\t}\n\t\t// unset if false\n\t\tif (metadata.isMachineScoped === false) {\n\t\t\tmetadata.isMachineScoped = undefined;\n\t\t}\n\t\tif (metadata.isBuiltin === false) {\n\t\t\tmetadata.isBuiltin = undefined;\n\t\t}\n\t\tif (metadata.pinned === false) {\n\t\t\tmetadata.pinned = undefined;\n\t\t}\n\t\tlocal = await this.extensionsScanner.updateMetadata(local, metadata, profileLocation);\n\t\tthis.manifestCache.invalidate(profileLocation);\n\t\tthis._onDidUpdateExtensionMetadata.fire({ local, profileLocation });\n\t\treturn local;\n\t}\n\n\tasync reinstallFromGallery(extension: ILocalExtension): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#reinstallFromGallery', extension.identifier.id);\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\tthrow new Error(nls.localize('MarketPlaceDisabled', \"Marketplace is not enabled\"));\n\t\t}\n\n\t\tconst targetPlatform = await this.getTargetPlatform();\n\t\tconst [galleryExtension] = await this.galleryService.getExtensions([{ ...extension.identifier, preRelease: extension.preRelease }], { targetPlatform, compatible: true }, CancellationToken.None);\n\t\tif (!galleryExtension) {\n\t\t\tthrow new Error(nls.localize('Not a Marketplace extension', \"Only Marketplace Extensions can be reinstalled\"));\n\t\t}\n\n\t\tawait this.extensionsScanner.setUninstalled(extension);\n\t\ttry {\n\t\t\tawait this.extensionsScanner.removeUninstalledExtension(extension);\n\t\t} catch (e) {\n\t\t\tthrow new Error(nls.localize('removeError', \"Error while removing the extension: {0}. Please Quit and Start VS Code before trying again.\", toErrorMessage(e)));\n\t\t}\n\t\treturn this.installFromGallery(galleryExtension);\n\t}\n\n\tprotected copyExtension(extension: ILocalExtension, fromProfileLocation: URI, toProfileLocation: URI, metadata: Partial<Metadata>): Promise<ILocalExtension> {\n\t\treturn this.extensionsScanner.copyExtension(extension, fromProfileLocation, toProfileLocation, metadata);\n\t}\n\n\tcopyExtensions(fromProfileLocation: URI, toProfileLocation: URI): Promise<void> {\n\t\treturn this.extensionsScanner.copyExtensions(fromProfileLocation, toProfileLocation, { version: this.productService.version, date: this.productService.date });\n\t}\n\n\tmarkAsUninstalled(...extensions: IExtension[]): Promise<void> {\n\t\treturn this.extensionsScanner.setUninstalled(...extensions);\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tthis.logService.trace('ExtensionManagementService#cleanUp');\n\t\ttry {\n\t\t\tawait this.extensionsScanner.cleanUp();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tasync download(extension: IGalleryExtension, operation: InstallOperation, donotVerifySignature: boolean): Promise<URI> {\n\t\tconst { location } = await this.extensionsDownloader.download(extension, operation, !donotVerifySignature);\n\t\treturn location;\n\t}\n\n\tprivate async downloadVsix(vsix: URI): Promise<{ location: URI; cleanup: () => Promise<void> }> {\n\t\tif (vsix.scheme === Schemas.file) {\n\t\t\treturn { location: vsix, async cleanup() { } };\n\t\t}\n\t\tthis.logService.trace('Downloading extension from', vsix.toString());\n\t\tconst location = joinPath(this.extensionsDownloader.extensionsDownloadDir, generateUuid());\n\t\tawait this.downloadService.download(vsix, location);\n\t\tthis.logService.info('Downloaded extension to', location.toString());\n\t\tconst cleanup = async () => {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t};\n\t\treturn { location, cleanup };\n\t}\n\n\tprotected getCurrentExtensionsManifestLocation(): URI {\n\t\treturn this.userDataProfilesService.defaultProfile.extensionsResource;\n\t}\n\n\tprotected createInstallExtensionTask(manifest: IExtensionManifest, extension: URI | IGalleryExtension, options: InstallExtensionTaskOptions): IInstallExtensionTask {\n\t\tconst extensionKey = extension instanceof URI ? new ExtensionKey({ id: getGalleryExtensionId(manifest.publisher, manifest.name) }, manifest.version) : ExtensionKey.create(extension);\n\t\treturn this.instantiationService.createInstance(InstallExtensionInProfileTask, extensionKey, manifest, extension, options, (operation, token) => {\n\t\t\tif (extension instanceof URI) {\n\t\t\t\treturn this.extractVSIX(extensionKey, extension, options, token);\n\t\t\t}\n\t\t\tlet promise = this.extractingGalleryExtensions.get(extensionKey.toString());\n\t\t\tif (!promise) {\n\t\t\t\tthis.extractingGalleryExtensions.set(extensionKey.toString(), promise = this.downloadAndExtractGalleryExtension(extensionKey, extension, operation, options, token));\n\t\t\t\tpromise.finally(() => this.extractingGalleryExtensions.delete(extensionKey.toString()));\n\t\t\t}\n\t\t\treturn promise;\n\t\t}, this.extensionsScanner);\n\t}\n\n\tprotected createUninstallExtensionTask(extension: ILocalExtension, options: UninstallExtensionTaskOptions): IUninstallExtensionTask {\n\t\treturn new UninstallExtensionInProfileTask(extension, options, this.extensionsProfileScannerService);\n\t}\n\n\tprivate async downloadAndExtractGalleryExtension(extensionKey: ExtensionKey, gallery: IGalleryExtension, operation: InstallOperation, options: InstallExtensionTaskOptions, token: CancellationToken): Promise<ExtractExtensionResult> {\n\t\tconst { verificationStatus, location } = await this.extensionsDownloader.download(gallery, operation, !options.donotVerifySignature, options.context?.[EXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT]);\n\t\ttry {\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\n\t\t\t// validate manifest\n\t\t\tconst manifest = await getManifest(location.fsPath);\n\t\t\tif (!new ExtensionKey(gallery.identifier, gallery.version).equals(new ExtensionKey({ id: getGalleryExtensionId(manifest.publisher, manifest.name) }, manifest.version))) {\n\t\t\t\tthrow new ExtensionManagementError(nls.localize('invalidManifest', \"Cannot install '{0}' extension because of manifest mismatch with Marketplace\", gallery.identifier.id), ExtensionManagementErrorCode.Invalid);\n\t\t\t}\n\n\t\t\tconst local = await this.extensionsScanner.extractUserExtension(\n\t\t\t\textensionKey,\n\t\t\t\tlocation.fsPath,\n\t\t\t\t{\n\t\t\t\t\tid: gallery.identifier.uuid,\n\t\t\t\t\tpublisherId: gallery.publisherId,\n\t\t\t\t\tpublisherDisplayName: gallery.publisherDisplayName,\n\t\t\t\t\ttargetPlatform: gallery.properties.targetPlatform,\n\t\t\t\t\tisApplicationScoped: options.isApplicationScoped,\n\t\t\t\t\tisMachineScoped: options.isMachineScoped,\n\t\t\t\t\tisBuiltin: options.isBuiltin,\n\t\t\t\t\tisPreReleaseVersion: gallery.properties.isPreReleaseVersion,\n\t\t\t\t\thasPreReleaseVersion: gallery.properties.isPreReleaseVersion,\n\t\t\t\t\tinstalledTimestamp: Date.now(),\n\t\t\t\t\tpinned: options.installGivenVersion ? true : !!options.pinned,\n\t\t\t\t\tpreRelease: isBoolean(options.preRelease)\n\t\t\t\t\t\t? options.preRelease\n\t\t\t\t\t\t: options.installPreReleaseVersion || gallery.properties.isPreReleaseVersion,\n\t\t\t\t\tsource: 'gallery',\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\ttoken);\n\t\t\treturn { local, verificationStatus };\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionsDownloader.delete(location);\n\t\t\t} catch (e) {\n\t\t\t\t/* Ignore */\n\t\t\t\tthis.logService.warn(`Error while deleting the downloaded file`, location.toString(), getErrorMessage(e));\n\t\t\t}\n\t\t\tthrow toExtensionManagementError(error);\n\t\t}\n\t}\n\n\tprivate async extractVSIX(extensionKey: ExtensionKey, location: URI, options: InstallExtensionTaskOptions, token: CancellationToken): Promise<ExtractExtensionResult> {\n\t\tconst local = await this.extensionsScanner.extractUserExtension(\n\t\t\textensionKey,\n\t\t\tpath.resolve(location.fsPath),\n\t\t\t{\n\t\t\t\tisApplicationScoped: options.isApplicationScoped,\n\t\t\t\tisMachineScoped: options.isMachineScoped,\n\t\t\t\tisBuiltin: options.isBuiltin,\n\t\t\t\tinstalledTimestamp: Date.now(),\n\t\t\t\tpinned: options.installGivenVersion ? true : !!options.pinned,\n\t\t\t\tsource: 'vsix',\n\t\t\t},\n\t\t\toptions.keepExisting ?? true,\n\t\t\ttoken);\n\t\treturn { local };\n\t}\n\n\tprivate async collectFiles(extension: ILocalExtension): Promise<IFile[]> {\n\n\t\tconst collectFilesFromDirectory = async (dir: string): Promise<string[]> => {\n\t\t\tlet entries = await pfs.Promises.readdir(dir);\n\t\t\tentries = entries.map(e => path.join(dir, e));\n\t\t\tconst stats = await Promise.all(entries.map(e => fs.promises.stat(e)));\n\t\t\tlet promise: Promise<string[]> = Promise.resolve([]);\n\t\t\tstats.forEach((stat, index) => {\n\t\t\t\tconst entry = entries[index];\n\t\t\t\tif (stat.isFile()) {\n\t\t\t\t\tpromise = promise.then(result => ([...result, entry]));\n\t\t\t\t}\n\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\tpromise = promise\n\t\t\t\t\t\t.then(result => collectFilesFromDirectory(entry)\n\t\t\t\t\t\t\t.then(files => ([...result, ...files])));\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn promise;\n\t\t};\n\n\t\tconst files = await collectFilesFromDirectory(extension.location.fsPath);\n\t\treturn files.map(f => ({ path: `extension/${path.relative(extension.location.fsPath, f)}`, localPath: f }));\n\t}\n\n\tprivate async onDidChangeExtensionsFromAnotherSource({ added, removed }: DidChangeProfileExtensionsEvent): Promise<void> {\n\t\tif (removed) {\n\t\t\tconst removedExtensions = added && this.uriIdentityService.extUri.isEqual(removed.profileLocation, added.profileLocation)\n\t\t\t\t? removed.extensions.filter(e => added.extensions.every(identifier => !areSameExtensions(identifier, e)))\n\t\t\t\t: removed.extensions;\n\t\t\tfor (const identifier of removedExtensions) {\n\t\t\t\tthis.logService.info('Extensions removed from another source', identifier.id, removed.profileLocation.toString());\n\t\t\t\tthis._onDidUninstallExtension.fire({ identifier, profileLocation: removed.profileLocation });\n\t\t\t}\n\t\t}\n\t\tif (added) {\n\t\t\tconst extensions = await this.getInstalled(ExtensionType.User, added.profileLocation);\n\t\t\tconst addedExtensions = extensions.filter(e => added.extensions.some(identifier => areSameExtensions(identifier, e.identifier)));\n\t\t\tthis._onDidInstallExtensions.fire(addedExtensions.map(local => {\n\t\t\t\tthis.logService.info('Extensions added from another source', local.identifier.id, added.profileLocation.toString());\n\t\t\t\treturn { identifier: local.identifier, local, profileLocation: added.profileLocation, operation: InstallOperation.None };\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate readonly knownDirectories = new ResourceSet();\n\tprivate async watchForExtensionsNotInstalledBySystem(): Promise<void> {\n\t\tthis._register(this.extensionsScanner.onExtract(resource => this.knownDirectories.add(resource)));\n\t\tconst stat = await this.fileService.resolve(this.extensionsScannerService.userExtensionsLocation);\n\t\tfor (const childStat of stat.children ?? []) {\n\t\t\tif (childStat.isDirectory) {\n\t\t\t\tthis.knownDirectories.add(childStat.resource);\n\t\t\t}\n\t\t}\n\t\tthis._register(this.fileService.watch(this.extensionsScannerService.userExtensionsLocation));\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\t}\n\n\tprivate async onDidFilesChange(e: FileChangesEvent): Promise<void> {\n\t\tif (!e.affects(this.extensionsScannerService.userExtensionsLocation, FileChangeType.ADDED)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst added: ILocalExtension[] = [];\n\t\tfor (const resource of e.rawAdded) {\n\t\t\t// Check if this is a known directory\n\t\t\tif (this.knownDirectories.has(resource)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Is not immediate child of extensions resource\n\t\t\tif (!this.uriIdentityService.extUri.isEqual(this.uriIdentityService.extUri.dirname(resource), this.extensionsScannerService.userExtensionsLocation)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// .obsolete file changed\n\t\t\tif (this.uriIdentityService.extUri.isEqual(resource, this.uriIdentityService.extUri.joinPath(this.extensionsScannerService.userExtensionsLocation, '.obsolete'))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Ignore changes to files starting with `.`\n\t\t\tif (this.uriIdentityService.extUri.basename(resource).startsWith('.')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if this is a directory\n\t\t\tif (!(await this.fileService.stat(resource)).isDirectory) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if this is an extension added by another source\n\t\t\t// Extension added by another source will not have installed timestamp\n\t\t\tconst extension = await this.extensionsScanner.scanUserExtensionAtLocation(resource);\n\t\t\tif (extension && extension.installedTimestamp === undefined) {\n\t\t\t\tthis.knownDirectories.add(resource);\n\t\t\t\tadded.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tif (added.length) {\n\t\t\tawait this.addExtensionsToProfile(added.map(e => [e, undefined]), this.userDataProfilesService.defaultProfile.extensionsResource);\n\t\t\tthis.logService.info('Added extensions to default profile from external source', added.map(e => e.identifier.id));\n\t\t}\n\t}\n\n\tprivate async addExtensionsToProfile(extensions: [ILocalExtension, Metadata | undefined][], profileLocation: URI): Promise<void> {\n\t\tconst localExtensions = extensions.map(e => e[0]);\n\t\tawait this.setInstalled(localExtensions);\n\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(extensions, profileLocation);\n\t\tthis._onDidInstallExtensions.fire(localExtensions.map(local => ({ local, identifier: local.identifier, operation: InstallOperation.None, profileLocation })));\n\t}\n\n\tprivate async setInstalled(extensions: ILocalExtension[]): Promise<void> {\n\t\tconst uninstalled = await this.extensionsScanner.getUninstalledExtensions();\n\t\tfor (const extension of extensions) {\n\t\t\tconst extensionKey = ExtensionKey.create(extension);\n\t\t\tif (!uninstalled[extensionKey.toString()]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.logService.trace('Removing the extension from uninstalled list:', extensionKey.id);\n\t\t\tawait this.extensionsScanner.setInstalled(extensionKey);\n\t\t\tthis.logService.info('Removed the extension from uninstalled list:', extensionKey.id);\n\t\t}\n\t}\n}\n\ntype UpdateMetadataErrorClassification = {\n\towner: 'sandy081';\n\tcomment: 'Update metadata error';\n\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'extension identifier' };\n\tcode?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'error code' };\n\tisProfile?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Is writing into profile' };\n};\ntype UpdateMetadataErrorEvent = {\n\textensionId: string;\n\tcode?: string;\n\tisProfile?: boolean;\n};\n\nexport class ExtensionsScanner extends Disposable {\n\n\tprivate readonly uninstalledResource: URI;\n\tprivate readonly uninstalledFileLimiter: Queue<any>;\n\n\tprivate readonly _onExtract = this._register(new Emitter<URI>());\n\treadonly onExtract = this._onExtract.event;\n\n\tprivate scanAllExtensionPromise = new ResourceMap<Promise<IScannedExtension[]>>();\n\tprivate scanUserExtensionsPromise = new ResourceMap<Promise<IScannedExtension[]>>();\n\n\tconstructor(\n\t\tprivate readonly beforeRemovingExtension: (e: ILocalExtension) => Promise<void>,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExtensionsScannerService private readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IExtensionsProfileScannerService private readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.uninstalledResource = joinPath(this.extensionsScannerService.userExtensionsLocation, '.obsolete');\n\t\tthis.uninstalledFileLimiter = new Queue();\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tawait this.removeTemporarilyDeletedFolders();\n\t\tawait this.removeUninstalledExtensions();\n\t}\n\n\tasync scanExtensions(type: ExtensionType | null, profileLocation: URI, productVersion: IProductVersion): Promise<ILocalExtension[]> {\n\t\ttry {\n\t\t\tconst userScanOptions: ScanOptions = { includeInvalid: true, profileLocation, productVersion };\n\t\t\tlet scannedExtensions: IScannedExtension[] = [];\n\t\t\tif (type === null || type === ExtensionType.System) {\n\t\t\t\tlet scanAllExtensionsPromise = this.scanAllExtensionPromise.get(profileLocation);\n\t\t\t\tif (!scanAllExtensionsPromise) {\n\t\t\t\t\tscanAllExtensionsPromise = this.extensionsScannerService.scanAllExtensions({ includeInvalid: true, useCache: true }, userScanOptions, false)\n\t\t\t\t\t\t.finally(() => this.scanAllExtensionPromise.delete(profileLocation));\n\t\t\t\t\tthis.scanAllExtensionPromise.set(profileLocation, scanAllExtensionsPromise);\n\t\t\t\t}\n\t\t\t\tscannedExtensions.push(...await scanAllExtensionsPromise);\n\t\t\t} else if (type === ExtensionType.User) {\n\t\t\t\tlet scanUserExtensionsPromise = this.scanUserExtensionsPromise.get(profileLocation);\n\t\t\t\tif (!scanUserExtensionsPromise) {\n\t\t\t\t\tscanUserExtensionsPromise = this.extensionsScannerService.scanUserExtensions(userScanOptions)\n\t\t\t\t\t\t.finally(() => this.scanUserExtensionsPromise.delete(profileLocation));\n\t\t\t\t\tthis.scanUserExtensionsPromise.set(profileLocation, scanUserExtensionsPromise);\n\t\t\t\t}\n\t\t\t\tscannedExtensions.push(...await scanUserExtensionsPromise);\n\t\t\t}\n\t\t\tscannedExtensions = type !== null ? scannedExtensions.filter(r => r.type === type) : scannedExtensions;\n\t\t\treturn await Promise.all(scannedExtensions.map(extension => this.toLocalExtension(extension)));\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.Scanning);\n\t\t}\n\t}\n\n\tasync scanAllUserExtensions(excludeOutdated: boolean): Promise<ILocalExtension[]> {\n\t\ttry {\n\t\t\tconst scannedExtensions = await this.extensionsScannerService.scanUserExtensions({ includeAllVersions: !excludeOutdated, includeInvalid: true });\n\t\t\treturn await Promise.all(scannedExtensions.map(extension => this.toLocalExtension(extension)));\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.Scanning);\n\t\t}\n\t}\n\n\tasync scanUserExtensionAtLocation(location: URI): Promise<ILocalExtension | null> {\n\t\ttry {\n\t\t\tconst scannedExtension = await this.extensionsScannerService.scanExistingExtension(location, ExtensionType.User, { includeInvalid: true });\n\t\t\tif (scannedExtension) {\n\t\t\t\treturn await this.toLocalExtension(scannedExtension);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync extractUserExtension(extensionKey: ExtensionKey, zipPath: string, metadata: Metadata, removeIfExists: boolean, token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst folderName = extensionKey.toString();\n\t\tconst tempLocation = URI.file(path.join(this.extensionsScannerService.userExtensionsLocation.fsPath, `.${generateUuid()}`));\n\t\tconst extensionLocation = URI.file(path.join(this.extensionsScannerService.userExtensionsLocation.fsPath, folderName));\n\n\t\tif (await this.fileService.exists(extensionLocation)) {\n\t\t\tif (!removeIfExists) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await this.scanLocalExtension(extensionLocation, ExtensionType.User);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.warn(`Error while scanning the existing extension at ${extensionLocation.path}. Deleting the existing extension and extracting it.`, getErrorMessage(error));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait this.deleteExtensionFromLocation(extensionKey.id, extensionLocation, 'removeExisting');\n\t\t\t} catch (error) {\n\t\t\t\tthrow new ExtensionManagementError(nls.localize('errorDeleting', \"Unable to delete the existing folder '{0}' while installing the extension '{1}'. Please delete the folder manually and try again\", extensionLocation.fsPath, extensionKey.id), ExtensionManagementErrorCode.Delete);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\n\t\t\t// Extract\n\t\t\ttry {\n\t\t\t\tthis.logService.trace(`Started extracting the extension from ${zipPath} to ${extensionLocation.fsPath}`);\n\t\t\t\tawait extract(zipPath, tempLocation.fsPath, { sourcePath: 'extension', overwrite: true }, token);\n\t\t\t\tthis.logService.info(`Extracted extension to ${extensionLocation}:`, extensionKey.id);\n\t\t\t} catch (e) {\n\t\t\t\tthrow fromExtractError(e);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait this.extensionsScannerService.updateMetadata(tempLocation, metadata);\n\t\t\t} catch (error) {\n\t\t\t\tthis.telemetryService.publicLog2<UpdateMetadataErrorEvent, UpdateMetadataErrorClassification>('extension:extract', { extensionId: extensionKey.id, code: `${toFileOperationResult(error)}` });\n\t\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.UpdateMetadata);\n\t\t\t}\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\n\t\t\t// Rename\n\t\t\ttry {\n\t\t\t\tthis.logService.trace(`Started renaming the extension from ${tempLocation.fsPath} to ${extensionLocation.fsPath}`);\n\t\t\t\tawait this.rename(tempLocation.fsPath, extensionLocation.fsPath);\n\t\t\t\tthis.logService.info('Renamed to', extensionLocation.fsPath);\n\t\t\t} catch (error) {\n\t\t\t\tif (error.code === 'ENOTEMPTY') {\n\t\t\t\t\tthis.logService.info(`Rename failed because extension was installed by another source. So ignoring renaming.`, extensionKey.id);\n\t\t\t\t\ttry { await this.fileService.del(tempLocation, { recursive: true }); } catch (e) { /* ignore */ }\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.info(`Rename failed because of ${getErrorMessage(error)}. Deleted from extracted location`, tempLocation);\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onExtract.fire(extensionLocation);\n\n\t\t} catch (error) {\n\t\t\ttry { await this.fileService.del(tempLocation, { recursive: true }); } catch (e) { /* ignore */ }\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this.scanLocalExtension(extensionLocation, ExtensionType.User);\n\t}\n\n\tasync scanMetadata(local: ILocalExtension, profileLocation?: URI): Promise<Metadata | undefined> {\n\t\tif (profileLocation) {\n\t\t\tconst extension = await this.getScannedExtension(local, profileLocation);\n\t\t\treturn extension?.metadata;\n\t\t} else {\n\t\t\treturn this.extensionsScannerService.scanMetadata(local.location);\n\t\t}\n\t}\n\n\tprivate async getScannedExtension(local: ILocalExtension, profileLocation: URI): Promise<IScannedProfileExtension | undefined> {\n\t\tconst extensions = await this.extensionsProfileScannerService.scanProfileExtensions(profileLocation);\n\t\treturn extensions.find(e => areSameExtensions(e.identifier, local.identifier));\n\t}\n\n\tasync updateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation?: URI): Promise<ILocalExtension> {\n\t\ttry {\n\t\t\tif (profileLocation) {\n\t\t\t\tawait this.extensionsProfileScannerService.updateMetadata([[local, metadata]], profileLocation);\n\t\t\t} else {\n\t\t\t\tawait this.extensionsScannerService.updateMetadata(local.location, metadata);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.telemetryService.publicLog2<UpdateMetadataErrorEvent, UpdateMetadataErrorClassification>('extension:extract', { extensionId: local.identifier.id, code: `${toFileOperationResult(error)}`, isProfile: !!profileLocation });\n\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.UpdateMetadata);\n\t\t}\n\t\treturn this.scanLocalExtension(local.location, local.type, profileLocation);\n\t}\n\n\tasync getUninstalledExtensions(): Promise<IStringDictionary<boolean>> {\n\t\ttry {\n\t\t\treturn await this.withUninstalledExtensions();\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.ReadUninstalled);\n\t\t}\n\t}\n\n\tasync setUninstalled(...extensions: IExtension[]): Promise<void> {\n\t\tconst extensionKeys: ExtensionKey[] = extensions.map(e => ExtensionKey.create(e));\n\t\tawait this.withUninstalledExtensions(uninstalled =>\n\t\t\textensionKeys.forEach(extensionKey => {\n\t\t\t\tuninstalled[extensionKey.toString()] = true;\n\t\t\t\tthis.logService.info('Marked extension as uninstalled', extensionKey.toString());\n\t\t\t}));\n\t}\n\n\tasync setInstalled(extensionKey: ExtensionKey): Promise<void> {\n\t\ttry {\n\t\t\tawait this.withUninstalledExtensions(uninstalled => delete uninstalled[extensionKey.toString()]);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.UnsetUninstalled);\n\t\t}\n\t}\n\n\tasync removeExtension(extension: ILocalExtension | IScannedExtension, type: string): Promise<void> {\n\t\tif (this.uriIdentityService.extUri.isEqualOrParent(extension.location, this.extensionsScannerService.userExtensionsLocation)) {\n\t\t\treturn this.deleteExtensionFromLocation(extension.identifier.id, extension.location, type);\n\t\t}\n\t}\n\n\tasync removeUninstalledExtension(extension: ILocalExtension | IScannedExtension): Promise<void> {\n\t\tawait this.removeExtension(extension, 'uninstalled');\n\t\tawait this.withUninstalledExtensions(uninstalled => delete uninstalled[ExtensionKey.create(extension).toString()]);\n\t}\n\n\tasync copyExtension(extension: ILocalExtension, fromProfileLocation: URI, toProfileLocation: URI, metadata: Partial<Metadata>): Promise<ILocalExtension> {\n\t\tconst source = await this.getScannedExtension(extension, fromProfileLocation);\n\t\tconst target = await this.getScannedExtension(extension, toProfileLocation);\n\t\tmetadata = { ...source?.metadata, ...metadata };\n\n\t\tif (target) {\n\t\t\tif (this.uriIdentityService.extUri.isEqual(target.location, extension.location)) {\n\t\t\t\tawait this.extensionsProfileScannerService.updateMetadata([[extension, { ...target.metadata, ...metadata }]], toProfileLocation);\n\t\t\t} else {\n\t\t\t\tconst targetExtension = await this.scanLocalExtension(target.location, extension.type, toProfileLocation);\n\t\t\t\tawait this.extensionsProfileScannerService.removeExtensionFromProfile(targetExtension, toProfileLocation);\n\t\t\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile([[extension, { ...target.metadata, ...metadata }]], toProfileLocation);\n\t\t\t}\n\t\t} else {\n\t\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile([[extension, metadata]], toProfileLocation);\n\t\t}\n\n\t\treturn this.scanLocalExtension(extension.location, extension.type, toProfileLocation);\n\t}\n\n\tasync copyExtensions(fromProfileLocation: URI, toProfileLocation: URI, productVersion: IProductVersion): Promise<void> {\n\t\tconst fromExtensions = await this.scanExtensions(ExtensionType.User, fromProfileLocation, productVersion);\n\t\tconst extensions: [ILocalExtension, Metadata | undefined][] = await Promise.all(fromExtensions\n\t\t\t.filter(e => !e.isApplicationScoped) /* remove application scoped extensions */\n\t\t\t.map(async e => ([e, await this.scanMetadata(e, fromProfileLocation)])));\n\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(extensions, toProfileLocation);\n\t}\n\n\tprivate async deleteExtensionFromLocation(id: string, location: URI, type: string): Promise<void> {\n\t\tthis.logService.trace(`Deleting ${type} extension from disk`, id, location.fsPath);\n\t\tconst renamedLocation = this.uriIdentityService.extUri.joinPath(this.uriIdentityService.extUri.dirname(location), `${this.uriIdentityService.extUri.basename(location)}.${hash(generateUuid()).toString(16)}${DELETED_FOLDER_POSTFIX}`);\n\t\tawait this.rename(location.fsPath, renamedLocation.fsPath);\n\t\tawait this.fileService.del(renamedLocation, { recursive: true });\n\t\tthis.logService.info(`Deleted ${type} extension from disk`, id, location.fsPath);\n\t}\n\n\tprivate withUninstalledExtensions(updateFn?: (uninstalled: IStringDictionary<boolean>) => void): Promise<IStringDictionary<boolean>> {\n\t\treturn this.uninstalledFileLimiter.queue(async () => {\n\t\t\tlet raw: string | undefined;\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(this.uninstalledResource, 'utf8');\n\t\t\t\traw = content.value.toString();\n\t\t\t} catch (error) {\n\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet uninstalled = {};\n\t\t\tif (raw) {\n\t\t\t\ttry {\n\t\t\t\t\tuninstalled = JSON.parse(raw);\n\t\t\t\t} catch (e) { /* ignore */ }\n\t\t\t}\n\n\t\t\tif (updateFn) {\n\t\t\t\tupdateFn(uninstalled);\n\t\t\t\tif (Object.keys(uninstalled).length) {\n\t\t\t\t\tawait this.fileService.writeFile(this.uninstalledResource, VSBuffer.fromString(JSON.stringify(uninstalled)));\n\t\t\t\t} else {\n\t\t\t\t\tawait this.fileService.del(this.uninstalledResource);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uninstalled;\n\t\t});\n\t}\n\n\tprivate async rename(extractPath: string, renamePath: string): Promise<void> {\n\t\ttry {\n\t\t\tawait pfs.Promises.rename(extractPath, renamePath, 2 * 60 * 1000 /* Retry for 2 minutes */);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.Rename);\n\t\t}\n\t}\n\n\tasync scanLocalExtension(location: URI, type: ExtensionType, profileLocation?: URI): Promise<ILocalExtension> {\n\t\ttry {\n\t\t\tif (profileLocation) {\n\t\t\t\tconst scannedExtensions = await this.extensionsScannerService.scanUserExtensions({ profileLocation });\n\t\t\t\tconst scannedExtension = scannedExtensions.find(e => this.uriIdentityService.extUri.isEqual(e.location, location));\n\t\t\t\tif (scannedExtension) {\n\t\t\t\t\treturn await this.toLocalExtension(scannedExtension);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst scannedExtension = await this.extensionsScannerService.scanExistingExtension(location, type, { includeInvalid: true });\n\t\t\t\tif (scannedExtension) {\n\t\t\t\t\treturn await this.toLocalExtension(scannedExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new ExtensionManagementError(nls.localize('cannot read', \"Cannot read the extension from {0}\", location.path), ExtensionManagementErrorCode.ScanningExtension);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.ScanningExtension);\n\t\t}\n\t}\n\n\tprivate async toLocalExtension(extension: IScannedExtension): Promise<ILocalExtension> {\n\t\tconst stat = await this.fileService.resolve(extension.location);\n\t\tlet readmeUrl: URI | undefined;\n\t\tlet changelogUrl: URI | undefined;\n\t\tif (stat.children) {\n\t\t\treadmeUrl = stat.children.find(({ name }) => /^readme(\\.txt|\\.md|)$/i.test(name))?.resource;\n\t\t\tchangelogUrl = stat.children.find(({ name }) => /^changelog(\\.txt|\\.md|)$/i.test(name))?.resource;\n\t\t}\n\t\treturn {\n\t\t\tidentifier: extension.identifier,\n\t\t\ttype: extension.type,\n\t\t\tisBuiltin: extension.isBuiltin || !!extension.metadata?.isBuiltin,\n\t\t\tlocation: extension.location,\n\t\t\tmanifest: extension.manifest,\n\t\t\ttargetPlatform: extension.targetPlatform,\n\t\t\tvalidations: extension.validations,\n\t\t\tisValid: extension.isValid,\n\t\t\treadmeUrl,\n\t\t\tchangelogUrl,\n\t\t\tpublisherDisplayName: extension.metadata?.publisherDisplayName,\n\t\t\tpublisherId: extension.metadata?.publisherId || null,\n\t\t\tisApplicationScoped: !!extension.metadata?.isApplicationScoped,\n\t\t\tisMachineScoped: !!extension.metadata?.isMachineScoped,\n\t\t\tisPreReleaseVersion: !!extension.metadata?.isPreReleaseVersion,\n\t\t\thasPreReleaseVersion: !!extension.metadata?.hasPreReleaseVersion,\n\t\t\tpreRelease: !!extension.metadata?.preRelease,\n\t\t\tinstalledTimestamp: extension.metadata?.installedTimestamp,\n\t\t\tupdated: !!extension.metadata?.updated,\n\t\t\tpinned: !!extension.metadata?.pinned,\n\t\t\tisWorkspaceScoped: false,\n\t\t\tsource: extension.metadata?.source ?? (extension.identifier.uuid ? 'gallery' : 'vsix')\n\t\t};\n\t}\n\n\tprivate async removeUninstalledExtensions(): Promise<void> {\n\t\tconst uninstalled = await this.getUninstalledExtensions();\n\t\tif (Object.keys(uninstalled).length === 0) {\n\t\t\tthis.logService.debug(`No uninstalled extensions found.`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.debug(`Removing uninstalled extensions:`, Object.keys(uninstalled));\n\n\t\tconst extensions = await this.extensionsScannerService.scanUserExtensions({ includeAllVersions: true, includeUninstalled: true, includeInvalid: true }); // All user extensions\n\t\tconst installed: Set<string> = new Set<string>();\n\t\tfor (const e of extensions) {\n\t\t\tif (!uninstalled[ExtensionKey.create(e).toString()]) {\n\t\t\t\tinstalled.add(e.identifier.id.toLowerCase());\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\t// running post uninstall tasks for extensions that are not installed anymore\n\t\t\tconst byExtension = groupByExtension(extensions, e => e.identifier);\n\t\t\tawait Promises.settled(byExtension.map(async e => {\n\t\t\t\tconst latest = e.sort((a, b) => semver.rcompare(a.manifest.version, b.manifest.version))[0];\n\t\t\t\tif (!installed.has(latest.identifier.id.toLowerCase())) {\n\t\t\t\t\tawait this.beforeRemovingExtension(await this.toLocalExtension(latest));\n\t\t\t\t}\n\t\t\t}));\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\tconst toRemove = extensions.filter(e => e.metadata /* Installed by System */ && uninstalled[ExtensionKey.create(e).toString()]);\n\t\tawait Promise.allSettled(toRemove.map(e => this.removeUninstalledExtension(e)));\n\t}\n\n\tprivate async removeTemporarilyDeletedFolders(): Promise<void> {\n\t\tthis.logService.trace('ExtensionManagementService#removeTempDeleteFolders');\n\n\t\tlet stat;\n\t\ttry {\n\t\t\tstat = await this.fileService.resolve(this.extensionsScannerService.userExtensionsLocation);\n\t\t} catch (error) {\n\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!stat?.children) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait Promise.allSettled(stat.children.map(async child => {\n\t\t\t\tif (!child.isDirectory || !child.name.endsWith(DELETED_FOLDER_POSTFIX)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.logService.trace('Deleting the temporarily deleted folder', child.resource.toString());\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(child.resource, { recursive: true });\n\t\t\t\t\tthis.logService.trace('Deleted the temporarily deleted folder', child.resource.toString());\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t} catch (error) { /* ignore */ }\n\t}\n\n}\n\nclass InstallExtensionInProfileTask extends AbstractExtensionTask<ILocalExtension> implements IInstallExtensionTask {\n\n\tprivate _operation = InstallOperation.Install;\n\tget operation() { return this.options.operation ?? this._operation; }\n\n\tprivate _verificationStatus: ExtensionVerificationStatus | undefined;\n\tget verificationStatus() { return this._verificationStatus; }\n\n\treadonly identifier: IExtensionIdentifier;\n\n\tconstructor(\n\t\tprivate readonly extensionKey: ExtensionKey,\n\t\treadonly manifest: IExtensionManifest,\n\t\treadonly source: IGalleryExtension | URI,\n\t\treadonly options: InstallExtensionTaskOptions,\n\t\tprivate readonly extractExtensionFn: (operation: InstallOperation, token: CancellationToken) => Promise<ExtractExtensionResult>,\n\t\tprivate readonly extensionsScanner: ExtensionsScanner,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IExtensionsScannerService private readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IExtensionsProfileScannerService private readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.identifier = this.extensionKey.identifier;\n\t}\n\n\tprotected async doRun(token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst installed = await this.extensionsScanner.scanExtensions(ExtensionType.User, this.options.profileLocation, this.options.productVersion);\n\t\tconst existingExtension = installed.find(i => areSameExtensions(i.identifier, this.identifier));\n\t\tif (existingExtension) {\n\t\t\tthis._operation = InstallOperation.Update;\n\t\t}\n\n\t\tconst metadata: Metadata = {\n\t\t\tisApplicationScoped: this.options.isApplicationScoped || existingExtension?.isApplicationScoped,\n\t\t\tisMachineScoped: this.options.isMachineScoped || existingExtension?.isMachineScoped,\n\t\t\tisBuiltin: this.options.isBuiltin || existingExtension?.isBuiltin,\n\t\t\tisSystem: existingExtension?.type === ExtensionType.System ? true : undefined,\n\t\t\tinstalledTimestamp: Date.now(),\n\t\t\tpinned: this.options.installGivenVersion ? true : (this.options.pinned ?? existingExtension?.pinned),\n\t\t\tsource: this.source instanceof URI ? 'vsix' : 'gallery',\n\t\t};\n\n\t\tlet local: ILocalExtension | undefined;\n\n\t\t// VSIX\n\t\tif (this.source instanceof URI) {\n\t\t\tif (existingExtension) {\n\t\t\t\tif (this.extensionKey.equals(new ExtensionKey(existingExtension.identifier, existingExtension.manifest.version))) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.extensionsScanner.removeExtension(existingExtension, 'existing');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthrow new Error(nls.localize('restartCode', \"Please restart VS Code before reinstalling {0}.\", this.manifest.displayName || this.manifest.name));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Remove the extension with same version if it is already uninstalled.\n\t\t\t// Installing a VSIX extension shall replace the existing extension always.\n\t\t\tconst existingWithSameVersion = await this.unsetIfUninstalled(this.extensionKey);\n\t\t\tif (existingWithSameVersion) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.extensionsScanner.removeExtension(existingWithSameVersion, 'existing');\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(nls.localize('restartCode', \"Please restart VS Code before reinstalling {0}.\", this.manifest.displayName || this.manifest.name));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\t// Gallery\n\t\telse {\n\t\t\tmetadata.id = this.source.identifier.uuid;\n\t\t\tmetadata.publisherId = this.source.publisherId;\n\t\t\tmetadata.publisherDisplayName = this.source.publisherDisplayName;\n\t\t\tmetadata.targetPlatform = this.source.properties.targetPlatform;\n\t\t\tmetadata.updated = !!existingExtension;\n\t\t\tmetadata.isPreReleaseVersion = this.source.properties.isPreReleaseVersion;\n\t\t\tmetadata.hasPreReleaseVersion = existingExtension?.hasPreReleaseVersion || this.source.properties.isPreReleaseVersion;\n\t\t\tmetadata.preRelease = isBoolean(this.options.preRelease)\n\t\t\t\t? this.options.preRelease\n\t\t\t\t: this.options.installPreReleaseVersion || this.source.properties.isPreReleaseVersion || existingExtension?.preRelease;\n\n\t\t\tif (existingExtension && existingExtension.type !== ExtensionType.System && existingExtension.manifest.version === this.source.version) {\n\t\t\t\treturn this.extensionsScanner.updateMetadata(existingExtension, metadata, this.options.profileLocation);\n\t\t\t}\n\n\t\t\t// Unset if the extension is uninstalled and return the unset extension.\n\t\t\tlocal = await this.unsetIfUninstalled(this.extensionKey);\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow toExtensionManagementError(new CancellationError());\n\t\t}\n\n\t\tif (!local) {\n\t\t\tconst result = await this.extractExtensionFn(this.operation, token);\n\t\t\tlocal = result.local;\n\t\t\tthis._verificationStatus = result.verificationStatus;\n\t\t}\n\n\t\tif (this.uriIdentityService.extUri.isEqual(this.userDataProfilesService.defaultProfile.extensionsResource, this.options.profileLocation)) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionsScannerService.initializeDefaultProfileExtensions();\n\t\t\t} catch (error) {\n\t\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.IntializeDefaultProfile);\n\t\t\t}\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow toExtensionManagementError(new CancellationError());\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile([[local, metadata]], this.options.profileLocation, !local.isValid);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(error, ExtensionManagementErrorCode.AddToProfile);\n\t\t}\n\n\t\tconst result = await this.extensionsScanner.scanLocalExtension(local.location, ExtensionType.User, this.options.profileLocation);\n\t\tif (!result) {\n\t\t\tthrow new ExtensionManagementError('Cannot find the installed extension', ExtensionManagementErrorCode.InstalledExtensionNotFound);\n\t\t}\n\n\t\tif (this.source instanceof URI) {\n\t\t\tthis.updateMetadata(local, token);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async unsetIfUninstalled(extensionKey: ExtensionKey): Promise<ILocalExtension | undefined> {\n\t\tconst uninstalled = await this.extensionsScanner.getUninstalledExtensions();\n\t\tif (!uninstalled[extensionKey.toString()]) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.logService.trace('Removing the extension from uninstalled list:', extensionKey.id);\n\t\t// If the same version of extension is marked as uninstalled, remove it from there and return the local.\n\t\tawait this.extensionsScanner.setInstalled(extensionKey);\n\t\tthis.logService.info('Removed the extension from uninstalled list:', extensionKey.id);\n\n\t\tconst userExtensions = await this.extensionsScanner.scanAllUserExtensions(true);\n\t\treturn userExtensions.find(i => ExtensionKey.create(i).equals(extensionKey));\n\t}\n\n\tprivate async updateMetadata(extension: ILocalExtension, token: CancellationToken): Promise<void> {\n\t\ttry {\n\t\t\tlet [galleryExtension] = await this.galleryService.getExtensions([{ id: extension.identifier.id, version: extension.manifest.version }], token);\n\t\t\tif (!galleryExtension) {\n\t\t\t\t[galleryExtension] = await this.galleryService.getExtensions([{ id: extension.identifier.id }], token);\n\t\t\t}\n\t\t\tif (galleryExtension) {\n\t\t\t\tconst metadata = {\n\t\t\t\t\tid: galleryExtension.identifier.uuid,\n\t\t\t\t\tpublisherDisplayName: galleryExtension.publisherDisplayName,\n\t\t\t\t\tpublisherId: galleryExtension.publisherId,\n\t\t\t\t\tisPreReleaseVersion: galleryExtension.properties.isPreReleaseVersion,\n\t\t\t\t\thasPreReleaseVersion: extension.hasPreReleaseVersion || galleryExtension.properties.isPreReleaseVersion,\n\t\t\t\t\tpreRelease: galleryExtension.properties.isPreReleaseVersion || this.options.installPreReleaseVersion\n\t\t\t\t};\n\t\t\t\tawait this.extensionsScanner.updateMetadata(extension, metadata, this.options.profileLocation);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* Ignore Error */\n\t\t}\n\t}\n}\n\nclass UninstallExtensionInProfileTask extends AbstractExtensionTask<void> implements IUninstallExtensionTask {\n\n\tconstructor(\n\t\treadonly extension: ILocalExtension,\n\t\treadonly options: UninstallExtensionTaskOptions,\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doRun(token: CancellationToken): Promise<void> {\n\t\tawait this.extensionsProfileScannerService.removeExtensionFromProfile(this.extension, this.options.profileLocation);\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["files", "e", "result"]
}
