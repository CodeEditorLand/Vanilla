{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/node/extensionSignatureVerificationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule } from '../../../amdX.js';\nimport { getErrorMessage } from '../../../base/common/errors.js';\nimport { IGalleryExtension } from '../common/extensionManagement.js';\nimport { TargetPlatform } from '../../extensions/common/extensions.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService, LogLevel } from '../../log/common/log.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n\nexport const IExtensionSignatureVerificationService = createDecorator<IExtensionSignatureVerificationService>('IExtensionSignatureVerificationService');\n\n/**\n * A service for verifying signed extensions.\n */\nexport interface IExtensionSignatureVerificationService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Verifies an extension file (.vsix) against a signature archive file.\n\t * @param { string } extensionId The extension identifier.\n\t * @param { string } vsixFilePath The extension file path.\n\t * @param { string } signatureArchiveFilePath The signature archive file path.\n\t * @returns { Promise<boolean> } A promise with `true` if the extension is validly signed and trusted;\n\t * otherwise, `false` because verification is not enabled (e.g.:  in the OSS version of VS Code).\n\t * @throws { ExtensionSignatureVerificationError } An error with a code indicating the validity, integrity, or trust issue\n\t * found during verification or a more fundamental issue (e.g.:  a required dependency was not found).\n\t */\n\tverify(extension: IGalleryExtension, vsixFilePath: string, signatureArchiveFilePath: string, clientTargetPlatform?: TargetPlatform): Promise<boolean>;\n}\n\ndeclare module vsceSign {\n\texport function verify(vsixFilePath: string, signatureArchiveFilePath: string, verbose: boolean): Promise<ExtensionSignatureVerificationResult>;\n}\n\nexport enum ExtensionSignatureVerificationCode {\n\t'Success' = 'Success',\n\t'RequiredArgumentMissing' = 'RequiredArgumentMissing',\n\t'InvalidArgument' = 'InvalidArgument',\n\t'PackageIsUnreadable' = 'PackageIsUnreadable',\n\t'UnhandledException' = 'UnhandledException',\n\t'SignatureManifestIsMissing' = 'SignatureManifestIsMissing',\n\t'SignatureManifestIsUnreadable' = 'SignatureManifestIsUnreadable',\n\t'SignatureIsMissing' = 'SignatureIsMissing',\n\t'SignatureIsUnreadable' = 'SignatureIsUnreadable',\n\t'CertificateIsUnreadable' = 'CertificateIsUnreadable',\n\t'SignatureArchiveIsUnreadable' = 'SignatureArchiveIsUnreadable',\n\t'FileAlreadyExists' = 'FileAlreadyExists',\n\t'SignatureArchiveIsInvalidZip' = 'SignatureArchiveIsInvalidZip',\n\t'SignatureArchiveHasSameSignatureFile' = 'SignatureArchiveHasSameSignatureFile',\n\n\t'PackageIntegrityCheckFailed' = 'PackageIntegrityCheckFailed',\n\t'SignatureIsInvalid' = 'SignatureIsInvalid',\n\t'SignatureManifestIsInvalid' = 'SignatureManifestIsInvalid',\n\t'SignatureIntegrityCheckFailed' = 'SignatureIntegrityCheckFailed',\n\t'EntryIsMissing' = 'EntryIsMissing',\n\t'EntryIsTampered' = 'EntryIsTampered',\n\t'Untrusted' = 'Untrusted',\n\t'CertificateRevoked' = 'CertificateRevoked',\n\t'SignatureIsNotValid' = 'SignatureIsNotValid',\n\t'UnknownError' = 'UnknownError',\n\t'PackageIsInvalidZip' = 'PackageIsInvalidZip',\n\t'SignatureArchiveHasTooManyEntries' = 'SignatureArchiveHasTooManyEntries',\n}\n\n/**\n * Extension signature verification result\n */\nexport interface ExtensionSignatureVerificationResult {\n\treadonly code: ExtensionSignatureVerificationCode;\n\treadonly didExecute: boolean;\n\treadonly internalCode?: number;\n\treadonly output?: string;\n}\n\nexport class ExtensionSignatureVerificationError extends Error {\n\tconstructor(\n\t\tpublic readonly code: ExtensionSignatureVerificationCode,\n\t) {\n\t\tsuper(code);\n\t}\n}\n\nexport class ExtensionSignatureVerificationService implements IExtensionSignatureVerificationService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate moduleLoadingPromise: Promise<typeof vsceSign> | undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) { }\n\n\tprivate vsceSign(): Promise<typeof vsceSign> {\n\t\tif (!this.moduleLoadingPromise) {\n\t\t\tthis.moduleLoadingPromise = this.resolveVsceSign();\n\t\t}\n\n\t\treturn this.moduleLoadingPromise;\n\t}\n\n\tprivate async resolveVsceSign(): Promise<typeof vsceSign> {\n\t\t// ESM-uncomment-begin\n\t\tif (typeof importAMDNodeModule === 'function') { /* fixes unused import, remove me */ }\n\t\tconst mod = '@vscode/vsce-sign';\n\t\treturn import(mod);\n\t\t// ESM-uncomment-end\n\n\t\t// ESM-comment-begin\n\t\t// return importAMDNodeModule('@vscode/vsce-sign', 'src/main.js');\n\t\t// ESM-comment-end\n\t}\n\n\tpublic async verify(extension: IGalleryExtension, vsixFilePath: string, signatureArchiveFilePath: string, clientTargetPlatform?: TargetPlatform): Promise<boolean> {\n\t\tlet module: typeof vsceSign;\n\t\tconst extensionId = extension.identifier.id;\n\n\t\ttry {\n\t\t\tmodule = await this.vsceSign();\n\t\t} catch (error) {\n\t\t\tthis.logService.error('Could not load vsce-sign module', getErrorMessage(error));\n\t\t\tthis.logService.info(`Extension signature verification is not done: ${extensionId}`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\t\tlet result: ExtensionSignatureVerificationResult;\n\n\t\ttry {\n\t\t\tthis.logService.trace(`Verifying extension signature for ${extensionId}...`);\n\t\t\tresult = await module.verify(vsixFilePath, signatureArchiveFilePath, this.logService.getLevel() === LogLevel.Trace);\n\t\t} catch (e) {\n\t\t\tresult = {\n\t\t\t\tcode: ExtensionSignatureVerificationCode.UnknownError,\n\t\t\t\tdidExecute: false,\n\t\t\t\toutput: getErrorMessage(e)\n\t\t\t};\n\t\t}\n\n\t\tconst duration = new Date().getTime() - startTime;\n\n\t\tthis.logService.info(`Extension signature verification result for ${extensionId}: ${result.code}. Executed: ${result.didExecute}. Duration: ${duration}ms.`);\n\t\tthis.logService.trace(`Extension signature verification output for ${extensionId}:\\n${result.output}`);\n\n\t\ttype ExtensionSignatureVerificationClassification = {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Extension signature verification event';\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'extension identifier' };\n\t\t\textensionVersion: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'extension version' };\n\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'result code of the verification' };\n\t\t\tinternalCode?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; 'isMeasurement': true; comment: 'internal code of the verification' };\n\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; 'isMeasurement': true; comment: 'amount of time taken to verify the signature' };\n\t\t\tdidExecute: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'whether the verification was executed' };\n\t\t\tclientTargetPlatform?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'target platform of the client' };\n\t\t};\n\t\ttype ExtensionSignatureVerificationEvent = {\n\t\t\textensionId: string;\n\t\t\textensionVersion: string;\n\t\t\tcode: string;\n\t\t\tinternalCode?: number;\n\t\t\tduration: number;\n\t\t\tdidExecute: boolean;\n\t\t\tclientTargetPlatform?: string;\n\t\t};\n\t\tthis.telemetryService.publicLog2<ExtensionSignatureVerificationEvent, ExtensionSignatureVerificationClassification>('extensionsignature:verification', {\n\t\t\textensionId,\n\t\t\textensionVersion: extension.version,\n\t\t\tcode: result.code,\n\t\t\tinternalCode: result.internalCode,\n\t\t\tduration,\n\t\t\tdidExecute: result.didExecute,\n\t\t\tclientTargetPlatform,\n\t\t});\n\n\t\tif (result.code === ExtensionSignatureVerificationCode.Success) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthrow new ExtensionSignatureVerificationError(result.code);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ExtensionSignatureVerificationCode"]
}
