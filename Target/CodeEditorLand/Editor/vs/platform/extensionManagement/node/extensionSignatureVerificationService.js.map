{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/node/extensionSignatureVerificationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule } from '../../../amdX.js';\nimport { getErrorMessage } from '../../../base/common/errors.js';\nimport { TargetPlatform } from '../../extensions/common/extensions.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService, LogLevel } from '../../log/common/log.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { ExtensionSignatureVerificationCode } from '../common/extensionManagement.js';\n\nexport const IExtensionSignatureVerificationService = createDecorator<IExtensionSignatureVerificationService>('IExtensionSignatureVerificationService');\n\nexport interface IExtensionSignatureVerificationResult {\n\treadonly code: ExtensionSignatureVerificationCode;\n}\n\n/**\n * A service for verifying signed extensions.\n */\nexport interface IExtensionSignatureVerificationService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Verifies an extension file (.vsix) against a signature archive file.\n\t * @param { string } extensionId The extension identifier.\n\t * @param { string } version The extension version.\n\t * @param { string } vsixFilePath The extension file path.\n\t * @param { string } signatureArchiveFilePath The signature archive file path.\n\t * @returns { Promise<IExtensionSignatureVerificationResult | undefined> } returns the verification result or undefined if the verification was not executed.\n\t */\n\tverify(extensionId: string, version: string, vsixFilePath: string, signatureArchiveFilePath: string, clientTargetPlatform?: TargetPlatform): Promise<IExtensionSignatureVerificationResult | undefined>;\n}\n\ndeclare module vsceSign {\n\texport function verify(vsixFilePath: string, signatureArchiveFilePath: string, verbose: boolean): Promise<ExtensionSignatureVerificationResult>;\n}\n\n/**\n * Extension signature verification result\n */\nexport interface ExtensionSignatureVerificationResult {\n\treadonly code: ExtensionSignatureVerificationCode;\n\treadonly didExecute: boolean;\n\treadonly internalCode?: number;\n\treadonly output?: string;\n}\n\nexport class ExtensionSignatureVerificationService implements IExtensionSignatureVerificationService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate moduleLoadingPromise: Promise<typeof vsceSign> | undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) { }\n\n\tprivate vsceSign(): Promise<typeof vsceSign> {\n\t\tif (!this.moduleLoadingPromise) {\n\t\t\tthis.moduleLoadingPromise = this.resolveVsceSign();\n\t\t}\n\n\t\treturn this.moduleLoadingPromise;\n\t}\n\n\tprivate async resolveVsceSign(): Promise<typeof vsceSign> {\n\t\t// ESM-uncomment-begin\n\t\tif (typeof importAMDNodeModule === 'function') { /* fixes unused import, remove me */ }\n\t\tconst mod = '@vscode/vsce-sign';\n\t\treturn import(mod);\n\t\t// ESM-uncomment-end\n\n\t\t// ESM-comment-begin\n\t\t// return importAMDNodeModule('@vscode/vsce-sign', 'src/main.js');\n\t\t// ESM-comment-end\n\t}\n\n\tpublic async verify(extensionId: string, version: string, vsixFilePath: string, signatureArchiveFilePath: string, clientTargetPlatform?: TargetPlatform): Promise<IExtensionSignatureVerificationResult | undefined> {\n\t\tlet module: typeof vsceSign;\n\n\t\ttry {\n\t\t\tmodule = await this.vsceSign();\n\t\t} catch (error) {\n\t\t\tthis.logService.error('Could not load vsce-sign module', getErrorMessage(error));\n\t\t\tthis.logService.info(`Extension signature verification is not done: ${extensionId}`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\t\tlet result: ExtensionSignatureVerificationResult;\n\n\t\ttry {\n\t\t\tthis.logService.trace(`Verifying extension signature for ${extensionId}...`);\n\t\t\tresult = await module.verify(vsixFilePath, signatureArchiveFilePath, this.logService.getLevel() === LogLevel.Trace);\n\t\t} catch (e) {\n\t\t\tresult = {\n\t\t\t\tcode: ExtensionSignatureVerificationCode.UnknownError,\n\t\t\t\tdidExecute: false,\n\t\t\t\toutput: getErrorMessage(e)\n\t\t\t};\n\t\t}\n\n\t\tconst duration = new Date().getTime() - startTime;\n\n\t\tthis.logService.info(`Extension signature verification result for ${extensionId}: ${result.code}. Executed: ${result.didExecute}. Duration: ${duration}ms.`);\n\t\tthis.logService.trace(`Extension signature verification output for ${extensionId}:\\n${result.output}`);\n\n\t\ttype ExtensionSignatureVerificationClassification = {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Extension signature verification event';\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'extension identifier' };\n\t\t\textensionVersion: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'extension version' };\n\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'result code of the verification' };\n\t\t\tinternalCode?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; 'isMeasurement': true; comment: 'internal code of the verification' };\n\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; 'isMeasurement': true; comment: 'amount of time taken to verify the signature' };\n\t\t\tdidExecute: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'whether the verification was executed' };\n\t\t\tclientTargetPlatform?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'target platform of the client' };\n\t\t};\n\t\ttype ExtensionSignatureVerificationEvent = {\n\t\t\textensionId: string;\n\t\t\textensionVersion: string;\n\t\t\tcode: string;\n\t\t\tinternalCode?: number;\n\t\t\tduration: number;\n\t\t\tdidExecute: boolean;\n\t\t\tclientTargetPlatform?: string;\n\t\t};\n\t\tthis.telemetryService.publicLog2<ExtensionSignatureVerificationEvent, ExtensionSignatureVerificationClassification>('extensionsignature:verification', {\n\t\t\textensionId,\n\t\t\textensionVersion: version,\n\t\t\tcode: result.code,\n\t\t\tinternalCode: result.internalCode,\n\t\t\tduration,\n\t\t\tdidExecute: result.didExecute,\n\t\t\tclientTargetPlatform,\n\t\t});\n\n\t\treturn { code: result.code };\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAChC,SAAS,aAAa,gBAAgB;AACtC,SAAS,yBAAyB;AAClC,SAAS,0CAA0C;AAE5C,MAAM,yCAAyC,gBAAwD,wCAAwC;AAqC/I,IAAM,wCAAN,MAA8F;AAAA,EAKpG,YAC+B,YACM,kBACnC;AAF6B;AACM;AAAA,EACjC;AAAA,EA1DL,OAkDqG;AAAA;AAAA;AAAA,EAG5F;AAAA,EAOA,WAAqC;AAC5C,QAAI,CAAC,KAAK,sBAAsB;AAC/B,WAAK,uBAAuB,KAAK,gBAAgB;AAAA,IAClD;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,kBAA4C;AAEzD,QAAI,OAAO,wBAAwB,YAAY;AAAA,IAAuC;AACtF,UAAM,MAAM;AACZ,WAAO,OAAO;AAAA,EAMf;AAAA,EAEA,MAAa,OAAO,aAAqB,SAAiB,cAAsB,0BAAkC,sBAAmG;AACpN,QAAI;AAEJ,QAAI;AACH,eAAS,MAAM,KAAK,SAAS;AAAA,IAC9B,SAAS,OAAO;AACf,WAAK,WAAW,MAAM,mCAAmC,gBAAgB,KAAK,CAAC;AAC/E,WAAK,WAAW,KAAK,iDAAiD,WAAW,EAAE;AACnF,aAAO;AAAA,IACR;AAEA,UAAM,aAAY,oBAAI,KAAK,GAAE,QAAQ;AACrC,QAAI;AAEJ,QAAI;AACH,WAAK,WAAW,MAAM,qCAAqC,WAAW,KAAK;AAC3E,eAAS,MAAM,OAAO,OAAO,cAAc,0BAA0B,KAAK,WAAW,SAAS,MAAM,SAAS,KAAK;AAAA,IACnH,SAAS,GAAG;AACX,eAAS;AAAA,QACR,MAAM,mCAAmC;AAAA,QACzC,YAAY;AAAA,QACZ,QAAQ,gBAAgB,CAAC;AAAA,MAC1B;AAAA,IACD;AAEA,UAAM,YAAW,oBAAI,KAAK,GAAE,QAAQ,IAAI;AAExC,SAAK,WAAW,KAAK,+CAA+C,WAAW,KAAK,OAAO,IAAI,eAAe,OAAO,UAAU,eAAe,QAAQ,KAAK;AAC3J,SAAK,WAAW,MAAM,+CAA+C,WAAW;AAAA,EAAM,OAAO,MAAM,EAAE;AAsBrG,SAAK,iBAAiB,WAA8F,mCAAmC;AAAA,MACtJ;AAAA,MACA,kBAAkB;AAAA,MAClB,MAAM,OAAO;AAAA,MACb,cAAc,OAAO;AAAA,MACrB;AAAA,MACA,YAAY,OAAO;AAAA,MACnB;AAAA,IACD,CAAC;AAED,WAAO,EAAE,MAAM,OAAO,KAAK;AAAA,EAC5B;AACD;AA5Fa,wCAAN;AAAA,EAMJ;AAAA,EACA;AAAA,GAPU;",
  "names": []
}
