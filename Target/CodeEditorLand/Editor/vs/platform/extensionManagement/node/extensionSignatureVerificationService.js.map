{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/node/extensionSignatureVerificationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule } from \"../../../amdX.js\";\nimport { getErrorMessage } from \"../../../base/common/errors.js\";\nimport type { TargetPlatform } from \"../../extensions/common/extensions.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService, LogLevel } from \"../../log/common/log.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport type { IGalleryExtension } from \"../common/extensionManagement.js\";\n\nexport const IExtensionSignatureVerificationService =\n\tcreateDecorator<IExtensionSignatureVerificationService>(\n\t\t\"IExtensionSignatureVerificationService\",\n\t);\n\n/**\n * A service for verifying signed extensions.\n */\nexport interface IExtensionSignatureVerificationService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Verifies an extension file (.vsix) against a signature archive file.\n\t * @param { string } extensionId The extension identifier.\n\t * @param { string } vsixFilePath The extension file path.\n\t * @param { string } signatureArchiveFilePath The signature archive file path.\n\t * @returns { Promise<boolean> } A promise with `true` if the extension is validly signed and trusted;\n\t * otherwise, `false` because verification is not enabled (e.g.:  in the OSS version of VS Code).\n\t * @throws { ExtensionSignatureVerificationError } An error with a code indicating the validity, integrity, or trust issue\n\t * found during verification or a more fundamental issue (e.g.:  a required dependency was not found).\n\t */\n\tverify(\n\t\textension: IGalleryExtension,\n\t\tvsixFilePath: string,\n\t\tsignatureArchiveFilePath: string,\n\t\tclientTargetPlatform?: TargetPlatform,\n\t): Promise<boolean>;\n}\n\ndeclare namespace vsceSign {\n\texport function verify(\n\t\tvsixFilePath: string,\n\t\tsignatureArchiveFilePath: string,\n\t\tverbose: boolean,\n\t): Promise<ExtensionSignatureVerificationResult>;\n}\n\nexport enum ExtensionSignatureVerificationCode {\n\tSuccess = \"Success\",\n\tRequiredArgumentMissing = \"RequiredArgumentMissing\",\n\tInvalidArgument = \"InvalidArgument\",\n\tPackageIsUnreadable = \"PackageIsUnreadable\",\n\tUnhandledException = \"UnhandledException\",\n\tSignatureManifestIsMissing = \"SignatureManifestIsMissing\",\n\tSignatureManifestIsUnreadable = \"SignatureManifestIsUnreadable\",\n\tSignatureIsMissing = \"SignatureIsMissing\",\n\tSignatureIsUnreadable = \"SignatureIsUnreadable\",\n\tCertificateIsUnreadable = \"CertificateIsUnreadable\",\n\tSignatureArchiveIsUnreadable = \"SignatureArchiveIsUnreadable\",\n\tFileAlreadyExists = \"FileAlreadyExists\",\n\tSignatureArchiveIsInvalidZip = \"SignatureArchiveIsInvalidZip\",\n\tSignatureArchiveHasSameSignatureFile = \"SignatureArchiveHasSameSignatureFile\",\n\n\tPackageIntegrityCheckFailed = \"PackageIntegrityCheckFailed\",\n\tSignatureIsInvalid = \"SignatureIsInvalid\",\n\tSignatureManifestIsInvalid = \"SignatureManifestIsInvalid\",\n\tSignatureIntegrityCheckFailed = \"SignatureIntegrityCheckFailed\",\n\tEntryIsMissing = \"EntryIsMissing\",\n\tEntryIsTampered = \"EntryIsTampered\",\n\tUntrusted = \"Untrusted\",\n\tCertificateRevoked = \"CertificateRevoked\",\n\tSignatureIsNotValid = \"SignatureIsNotValid\",\n\tUnknownError = \"UnknownError\",\n\tPackageIsInvalidZip = \"PackageIsInvalidZip\",\n\tSignatureArchiveHasTooManyEntries = \"SignatureArchiveHasTooManyEntries\",\n}\n\n/**\n * Extension signature verification result\n */\nexport interface ExtensionSignatureVerificationResult {\n\treadonly code: ExtensionSignatureVerificationCode;\n\treadonly didExecute: boolean;\n\treadonly internalCode?: number;\n\treadonly output?: string;\n}\n\nexport class ExtensionSignatureVerificationError extends Error {\n\tconstructor(public readonly code: ExtensionSignatureVerificationCode) {\n\t\tsuper(code);\n\t}\n}\n\nexport class ExtensionSignatureVerificationService\n\timplements IExtensionSignatureVerificationService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate moduleLoadingPromise: Promise<typeof vsceSign> | undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) { }\n\n\tprivate vsceSign(): Promise<typeof vsceSign> {\n\t\tif (!this.moduleLoadingPromise) {\n\t\t\tthis.moduleLoadingPromise = this.resolveVsceSign();\n\t\t}\n\n\t\treturn this.moduleLoadingPromise;\n\t}\n\n\tprivate async resolveVsceSign(): Promise<typeof vsceSign> {\n\t\t// ESM-uncomment-begin\n\t\tif (typeof importAMDNodeModule === \"function\") {\n\t\t\t/* fixes unused import, remove me */\n\t\t}\n\t\tconst mod = \"@vscode/vsce-sign\";\n\t\treturn import(mod);\n\t\t// ESM-uncomment-end\n\n\t\t// ESM-comment-begin\n\t\t// return importAMDNodeModule('@vscode/vsce-sign', 'src/main.js');\n\t\t// ESM-comment-end\n\t}\n\n\tpublic async verify(\n\t\textension: IGalleryExtension,\n\t\tvsixFilePath: string,\n\t\tsignatureArchiveFilePath: string,\n\t\tclientTargetPlatform?: TargetPlatform,\n\t): Promise<boolean> {\n\t\tlet module: typeof vsceSign;\n\t\tconst extensionId = extension.identifier.id;\n\n\t\ttry {\n\t\t\tmodule = await this.vsceSign();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\n\t\t\t\t\"Could not load vsce-sign module\",\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t\tthis.logService.info(\n\t\t\t\t`Extension signature verification is not done: ${extensionId}`,\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\t\tlet result: ExtensionSignatureVerificationResult;\n\n\t\ttry {\n\t\t\tthis.logService.trace(\n\t\t\t\t`Verifying extension signature for ${extensionId}...`,\n\t\t\t);\n\t\t\tresult = await module.verify(\n\t\t\t\tvsixFilePath,\n\t\t\t\tsignatureArchiveFilePath,\n\t\t\t\tthis.logService.getLevel() === LogLevel.Trace,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tresult = {\n\t\t\t\tcode: ExtensionSignatureVerificationCode.UnknownError,\n\t\t\t\tdidExecute: false,\n\t\t\t\toutput: getErrorMessage(e),\n\t\t\t};\n\t\t}\n\n\t\tconst duration = new Date().getTime() - startTime;\n\n\t\tthis.logService.info(\n\t\t\t`Extension signature verification result for ${extensionId}: ${result.code}. Executed: ${result.didExecute}. Duration: ${duration}ms.`,\n\t\t);\n\t\tthis.logService.trace(\n\t\t\t`Extension signature verification output for ${extensionId}:\\n${result.output}`,\n\t\t);\n\n\t\ttype ExtensionSignatureVerificationClassification = {\n\t\t\towner: \"sandy081\";\n\t\t\tcomment: \"Extension signature verification event\";\n\t\t\textensionId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"extension identifier\";\n\t\t\t};\n\t\t\textensionVersion: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"extension version\";\n\t\t\t};\n\t\t\tcode: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"result code of the verification\";\n\t\t\t};\n\t\t\tinternalCode?: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tisMeasurement: true;\n\t\t\t\tcomment: \"internal code of the verification\";\n\t\t\t};\n\t\t\tduration: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tisMeasurement: true;\n\t\t\t\tcomment: \"amount of time taken to verify the signature\";\n\t\t\t};\n\t\t\tdidExecute: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"whether the verification was executed\";\n\t\t\t};\n\t\t\tclientTargetPlatform?: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"target platform of the client\";\n\t\t\t};\n\t\t};\n\t\ttype ExtensionSignatureVerificationEvent = {\n\t\t\textensionId: string;\n\t\t\textensionVersion: string;\n\t\t\tcode: string;\n\t\t\tinternalCode?: number;\n\t\t\tduration: number;\n\t\t\tdidExecute: boolean;\n\t\t\tclientTargetPlatform?: string;\n\t\t};\n\t\tthis.telemetryService.publicLog2<\n\t\t\tExtensionSignatureVerificationEvent,\n\t\t\tExtensionSignatureVerificationClassification\n\t\t>(\"extensionsignature:verification\", {\n\t\t\textensionId,\n\t\t\textensionVersion: extension.version,\n\t\t\tcode: result.code,\n\t\t\tinternalCode: result.internalCode,\n\t\t\tduration,\n\t\t\tdidExecute: result.didExecute,\n\t\t\tclientTargetPlatform,\n\t\t});\n\n\t\tif (result.code === ExtensionSignatureVerificationCode.Success) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthrow new ExtensionSignatureVerificationError(result.code);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAEhC,SAAS,uBAAuB;AAChC,SAAS,aAAa,gBAAgB;AACtC,SAAS,yBAAyB;AAG3B,MAAM,yCACZ;AAAA,EACC;AACD;AAkCM,IAAK,qCAAL,kBAAKA,wCAAL;AACN,EAAAA,oCAAA,aAAU;AACV,EAAAA,oCAAA,6BAA0B;AAC1B,EAAAA,oCAAA,qBAAkB;AAClB,EAAAA,oCAAA,yBAAsB;AACtB,EAAAA,oCAAA,wBAAqB;AACrB,EAAAA,oCAAA,gCAA6B;AAC7B,EAAAA,oCAAA,mCAAgC;AAChC,EAAAA,oCAAA,wBAAqB;AACrB,EAAAA,oCAAA,2BAAwB;AACxB,EAAAA,oCAAA,6BAA0B;AAC1B,EAAAA,oCAAA,kCAA+B;AAC/B,EAAAA,oCAAA,uBAAoB;AACpB,EAAAA,oCAAA,kCAA+B;AAC/B,EAAAA,oCAAA,0CAAuC;AAEvC,EAAAA,oCAAA,iCAA8B;AAC9B,EAAAA,oCAAA,wBAAqB;AACrB,EAAAA,oCAAA,gCAA6B;AAC7B,EAAAA,oCAAA,mCAAgC;AAChC,EAAAA,oCAAA,oBAAiB;AACjB,EAAAA,oCAAA,qBAAkB;AAClB,EAAAA,oCAAA,eAAY;AACZ,EAAAA,oCAAA,wBAAqB;AACrB,EAAAA,oCAAA,yBAAsB;AACtB,EAAAA,oCAAA,kBAAe;AACf,EAAAA,oCAAA,yBAAsB;AACtB,EAAAA,oCAAA,uCAAoC;AA3BzB,SAAAA;AAAA,GAAA;AAwCL,MAAM,4CAA4C,MAAM;AAAA,EAC9D,YAA4B,MAA0C;AACrE,UAAM,IAAI;AADiB;AAAA,EAE5B;AAAA,EA7FD,OA0F+D;AAAA;AAAA;AAI/D;AAEO,IAAM,wCAAN,MAEP;AAAA,EAKC,YAC+B,YACM,kBACnC;AAF6B;AACM;AAAA,EACjC;AAAA,EA1GL,OAkGA;AAAA;AAAA;AAAA,EAGS;AAAA,EAOA,WAAqC;AAC5C,QAAI,CAAC,KAAK,sBAAsB;AAC/B,WAAK,uBAAuB,KAAK,gBAAgB;AAAA,IAClD;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,kBAA4C;AAEzD,QAAI,OAAO,wBAAwB,YAAY;AAAA,IAE/C;AACA,UAAM,MAAM;AACZ,WAAO,OAAO;AAAA,EAMf;AAAA,EAEA,MAAa,OACZ,WACA,cACA,0BACA,sBACmB;AACnB,QAAI;AACJ,UAAM,cAAc,UAAU,WAAW;AAEzC,QAAI;AACH,eAAS,MAAM,KAAK,SAAS;AAAA,IAC9B,SAAS,OAAO;AACf,WAAK,WAAW;AAAA,QACf;AAAA,QACA,gBAAgB,KAAK;AAAA,MACtB;AACA,WAAK,WAAW;AAAA,QACf,iDAAiD,WAAW;AAAA,MAC7D;AACA,aAAO;AAAA,IACR;AAEA,UAAM,aAAY,oBAAI,KAAK,GAAE,QAAQ;AACrC,QAAI;AAEJ,QAAI;AACH,WAAK,WAAW;AAAA,QACf,qCAAqC,WAAW;AAAA,MACjD;AACA,eAAS,MAAM,OAAO;AAAA,QACrB;AAAA,QACA;AAAA,QACA,KAAK,WAAW,SAAS,MAAM,SAAS;AAAA,MACzC;AAAA,IACD,SAAS,GAAG;AACX,eAAS;AAAA,QACR,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,QAAQ,gBAAgB,CAAC;AAAA,MAC1B;AAAA,IACD;AAEA,UAAM,YAAW,oBAAI,KAAK,GAAE,QAAQ,IAAI;AAExC,SAAK,WAAW;AAAA,MACf,+CAA+C,WAAW,KAAK,OAAO,IAAI,eAAe,OAAO,UAAU,eAAe,QAAQ;AAAA,IAClI;AACA,SAAK,WAAW;AAAA,MACf,+CAA+C,WAAW;AAAA,EAAM,OAAO,MAAM;AAAA,IAC9E;AAoDA,SAAK,iBAAiB,WAGpB,mCAAmC;AAAA,MACpC;AAAA,MACA,kBAAkB,UAAU;AAAA,MAC5B,MAAM,OAAO;AAAA,MACb,cAAc,OAAO;AAAA,MACrB;AAAA,MACA,YAAY,OAAO;AAAA,MACnB;AAAA,IACD,CAAC;AAED,QAAI,OAAO,SAAS,yBAA4C;AAC/D,aAAO;AAAA,IACR;AAEA,UAAM,IAAI,oCAAoC,OAAO,IAAI;AAAA,EAC1D;AACD;AA1Ja,wCAAN;AAAA,EAQJ;AAAA,EACA;AAAA,GATU;",
  "names": ["ExtensionSignatureVerificationCode"]
}
