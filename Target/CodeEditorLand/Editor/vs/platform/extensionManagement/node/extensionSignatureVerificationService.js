var v=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=(a,e,n,r)=>{for(var i=r>1?void 0:r?p(e,n):e,s=a.length-1,o;s>=0;s--)(o=a[s])&&(i=(r?o(e,n,i):o(i))||i);return r&&i&&v(e,n,i),i},l=(a,e)=>(n,r)=>e(n,r,a);import{importAMDNodeModule as S}from"../../../amdX.js";import{getErrorMessage as f}from"../../../base/common/errors.js";import"../../extensions/common/extensions.js";import{createDecorator as x}from"../../instantiation/common/instantiation.js";import{ILogService as y,LogLevel as h}from"../../log/common/log.js";import{ITelemetryService as E}from"../../telemetry/common/telemetry.js";import{ExtensionSignatureVerificationCode as P}from"../common/extensionManagement.js";const w=x("IExtensionSignatureVerificationService");let c=class{constructor(e,n){this.logService=e;this.telemetryService=n}moduleLoadingPromise;vsceSign(){return this.moduleLoadingPromise||(this.moduleLoadingPromise=this.resolveVsceSign()),this.moduleLoadingPromise}async resolveVsceSign(){return import("@vscode/vsce-sign")}async verify(e,n,r,i,s){let o;try{o=await this.vsceSign()}catch(u){this.logService.error("Could not load vsce-sign module",f(u)),this.logService.info(`Extension signature verification is not done: ${e}`);return}const g=new Date().getTime();let t;try{this.logService.trace(`Verifying extension signature for ${e}...`),t=await o.verify(r,i,this.logService.getLevel()===h.Trace)}catch(u){t={code:P.UnknownError,didExecute:!1,output:f(u)}}const d=new Date().getTime()-g;return this.logService.info(`Extension signature verification result for ${e}: ${t.code}. Executed: ${t.didExecute}. Duration: ${d}ms.`),this.logService.trace(`Extension signature verification output for ${e}:
${t.output}`),this.telemetryService.publicLog2("extensionsignature:verification",{extensionId:e,extensionVersion:n,code:t.code,internalCode:t.internalCode,duration:d,didExecute:t.didExecute,clientTargetPlatform:s}),{code:t.code}}};c=m([l(0,y),l(1,E)],c);export{c as ExtensionSignatureVerificationService,w as IExtensionSignatureVerificationService};
