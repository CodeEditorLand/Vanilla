{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/node/extensionsWatcher.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from \"../../../base/common/errors.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\tcombinedDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { ResourceSet } from \"../../../base/common/map.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport {\n\tExtensionIdentifier,\n\ttype IExtension,\n\ttype IExtensionIdentifier,\n} from \"../../extensions/common/extensions.js\";\nimport {\n\tFileChangeType,\n\ttype FileChangesEvent,\n\ttype IFileService,\n} from \"../../files/common/files.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport type {\n\tIUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../userDataProfile/common/userDataProfile.js\";\nimport { getIdAndVersion } from \"../common/extensionManagementUtil.js\";\nimport type {\n\tDidAddProfileExtensionsEvent,\n\tDidRemoveProfileExtensionsEvent,\n\tIExtensionsProfileScannerService,\n\tProfileExtensionsEvent,\n} from \"../common/extensionsProfileScannerService.js\";\nimport type { IExtensionsScannerService } from \"../common/extensionsScannerService.js\";\nimport type { INativeServerExtensionManagementService } from \"./extensionManagementService.js\";\n\nexport interface DidChangeProfileExtensionsEvent {\n\treadonly added?: {\n\t\treadonly extensions: readonly IExtensionIdentifier[];\n\t\treadonly profileLocation: URI;\n\t};\n\treadonly removed?: {\n\t\treadonly extensions: readonly IExtensionIdentifier[];\n\t\treadonly profileLocation: URI;\n\t};\n}\n\nexport class ExtensionsWatcher extends Disposable {\n\tprivate readonly _onDidChangeExtensionsByAnotherSource = this._register(\n\t\tnew Emitter<DidChangeProfileExtensionsEvent>(),\n\t);\n\treadonly onDidChangeExtensionsByAnotherSource =\n\t\tthis._onDidChangeExtensionsByAnotherSource.event;\n\n\tprivate readonly allExtensions = new Map<string, ResourceSet>();\n\tprivate readonly extensionsProfileWatchDisposables = this._register(\n\t\tnew DisposableMap<string>(),\n\t);\n\n\tconstructor(\n\t\tprivate readonly extensionManagementService: INativeServerExtensionManagementService,\n\t\tprivate readonly extensionsScannerService: IExtensionsScannerService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.initialize().then(null, (error) =>\n\t\t\tlogService.error(\n\t\t\t\t\"Error while initializing Extensions Watcher\",\n\t\t\t\tgetErrorMessage(error),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tawait this.extensionsScannerService.initializeDefaultProfileExtensions();\n\t\tawait this.onDidChangeProfiles(this.userDataProfilesService.profiles);\n\t\tthis.registerListeners();\n\t\tawait this.uninstallExtensionsNotInProfiles();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.userDataProfilesService.onDidChangeProfiles((e) =>\n\t\t\t\tthis.onDidChangeProfiles(e.added),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.extensionsProfileScannerService.onAddExtensions((e) =>\n\t\t\t\tthis.onAddExtensions(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.extensionsProfileScannerService.onDidAddExtensions((e) =>\n\t\t\t\tthis.onDidAddExtensions(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.extensionsProfileScannerService.onRemoveExtensions((e) =>\n\t\t\t\tthis.onRemoveExtensions(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.extensionsProfileScannerService.onDidRemoveExtensions((e) =>\n\t\t\t\tthis.onDidRemoveExtensions(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.fileService.onDidFilesChange((e) => this.onDidFilesChange(e)),\n\t\t);\n\t}\n\n\tprivate async onDidChangeProfiles(\n\t\tadded: readonly IUserDataProfile[],\n\t): Promise<void> {\n\t\ttry {\n\t\t\tif (added.length) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tadded.map((profile) => {\n\t\t\t\t\t\tthis.extensionsProfileWatchDisposables.set(\n\t\t\t\t\t\t\tprofile.id,\n\t\t\t\t\t\t\tcombinedDisposable(\n\t\t\t\t\t\t\t\tthis.fileService.watch(\n\t\t\t\t\t\t\t\t\tthis.uriIdentityService.extUri.dirname(\n\t\t\t\t\t\t\t\t\t\tprofile.extensionsResource,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t// Also listen to the resource incase the resource is a symlink - https://github.com/microsoft/vscode/issues/118134\n\t\t\t\t\t\t\t\tthis.fileService.watch(\n\t\t\t\t\t\t\t\t\tprofile.extensionsResource,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn this.populateExtensionsFromProfile(\n\t\t\t\t\t\t\tprofile.extensionsResource,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async onAddExtensions(e: ProfileExtensionsEvent): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tthis.addExtensionWithKey(\n\t\t\t\tthis.getKey(extension.identifier, extension.version),\n\t\t\t\te.profileLocation,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async onDidAddExtensions(\n\t\te: DidAddProfileExtensionsEvent,\n\t): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\tif (e.error) {\n\t\t\t\tthis.removeExtensionWithKey(key, e.profileLocation);\n\t\t\t} else {\n\t\t\t\tthis.addExtensionWithKey(key, e.profileLocation);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async onRemoveExtensions(e: ProfileExtensionsEvent): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tthis.removeExtensionWithKey(\n\t\t\t\tthis.getKey(extension.identifier, extension.version),\n\t\t\t\te.profileLocation,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async onDidRemoveExtensions(\n\t\te: DidRemoveProfileExtensionsEvent,\n\t): Promise<void> {\n\t\tconst extensionsToUninstall: IExtension[] = [];\n\t\tconst promises: Promise<void>[] = [];\n\t\tfor (const extension of e.extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\tif (e.error) {\n\t\t\t\tthis.addExtensionWithKey(key, e.profileLocation);\n\t\t\t} else {\n\t\t\t\tthis.removeExtensionWithKey(key, e.profileLocation);\n\t\t\t\tif (!this.allExtensions.has(key)) {\n\t\t\t\t\tthis.logService.debug(\n\t\t\t\t\t\t\"Extension is removed from all profiles\",\n\t\t\t\t\t\textension.identifier.id,\n\t\t\t\t\t\textension.version,\n\t\t\t\t\t);\n\t\t\t\t\tpromises.push(\n\t\t\t\t\t\tthis.extensionManagementService\n\t\t\t\t\t\t\t.scanInstalledExtensionAtLocation(\n\t\t\t\t\t\t\t\textension.location,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t\t(result) => {\n\t\t\t\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t\t\t\textensionsToUninstall.push(result);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\t\t\t\"Extension not found at the location\",\n\t\t\t\t\t\t\t\t\t\t\textension.location.toString(),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t(error) => this.logService.error(error),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tawait Promise.all(promises);\n\t\t\tif (extensionsToUninstall.length) {\n\t\t\t\tawait this.uninstallExtensionsNotInProfiles(\n\t\t\t\t\textensionsToUninstall,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tfor (const profile of this.userDataProfilesService.profiles) {\n\t\t\tif (\n\t\t\t\te.contains(\n\t\t\t\t\tprofile.extensionsResource,\n\t\t\t\t\tFileChangeType.UPDATED,\n\t\t\t\t\tFileChangeType.ADDED,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.onDidExtensionsProfileChange(profile.extensionsResource);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async onDidExtensionsProfileChange(\n\t\tprofileLocation: URI,\n\t): Promise<void> {\n\t\tconst added: IExtensionIdentifier[] = [],\n\t\t\tremoved: IExtensionIdentifier[] = [];\n\t\tconst extensions =\n\t\t\tawait this.extensionsProfileScannerService.scanProfileExtensions(\n\t\t\t\tprofileLocation,\n\t\t\t);\n\t\tconst extensionKeys = new Set<string>();\n\t\tconst cached = new Set<string>();\n\t\tfor (const [key, profiles] of this.allExtensions) {\n\t\t\tif (profiles.has(profileLocation)) {\n\t\t\t\tcached.add(key);\n\t\t\t}\n\t\t}\n\t\tfor (const extension of extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\textensionKeys.add(key);\n\t\t\tif (!cached.has(key)) {\n\t\t\t\tadded.push(extension.identifier);\n\t\t\t\tthis.addExtensionWithKey(key, profileLocation);\n\t\t\t}\n\t\t}\n\t\tfor (const key of cached) {\n\t\t\tif (!extensionKeys.has(key)) {\n\t\t\t\tconst extension = this.fromKey(key);\n\t\t\t\tif (extension) {\n\t\t\t\t\tremoved.push(extension.identifier);\n\t\t\t\t\tthis.removeExtensionWithKey(key, profileLocation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (added.length || removed.length) {\n\t\t\tthis._onDidChangeExtensionsByAnotherSource.fire({\n\t\t\t\tadded: added.length\n\t\t\t\t\t? { extensions: added, profileLocation }\n\t\t\t\t\t: undefined,\n\t\t\t\tremoved: removed.length\n\t\t\t\t\t? { extensions: removed, profileLocation }\n\t\t\t\t\t: undefined,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async populateExtensionsFromProfile(\n\t\textensionsProfileLocation: URI,\n\t): Promise<void> {\n\t\tconst extensions =\n\t\t\tawait this.extensionsProfileScannerService.scanProfileExtensions(\n\t\t\t\textensionsProfileLocation,\n\t\t\t);\n\t\tfor (const extension of extensions) {\n\t\t\tthis.addExtensionWithKey(\n\t\t\t\tthis.getKey(extension.identifier, extension.version),\n\t\t\t\textensionsProfileLocation,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async uninstallExtensionsNotInProfiles(\n\t\ttoUninstall?: IExtension[],\n\t): Promise<void> {\n\t\tif (!toUninstall) {\n\t\t\tconst installed =\n\t\t\t\tawait this.extensionManagementService.scanAllUserInstalledExtensions();\n\t\t\ttoUninstall = installed.filter(\n\t\t\t\t(installedExtension) =>\n\t\t\t\t\t!this.allExtensions.has(\n\t\t\t\t\t\tthis.getKey(\n\t\t\t\t\t\t\tinstalledExtension.identifier,\n\t\t\t\t\t\t\tinstalledExtension.manifest.version,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (toUninstall.length) {\n\t\t\tawait this.extensionManagementService.markAsUninstalled(\n\t\t\t\t...toUninstall,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate addExtensionWithKey(\n\t\tkey: string,\n\t\textensionsProfileLocation: URI,\n\t): void {\n\t\tlet profiles = this.allExtensions.get(key);\n\t\tif (!profiles) {\n\t\t\tthis.allExtensions.set(\n\t\t\t\tkey,\n\t\t\t\t(profiles = new ResourceSet((uri) =>\n\t\t\t\t\tthis.uriIdentityService.extUri.getComparisonKey(uri),\n\t\t\t\t)),\n\t\t\t);\n\t\t}\n\t\tprofiles.add(extensionsProfileLocation);\n\t}\n\n\tprivate removeExtensionWithKey(key: string, profileLocation: URI): void {\n\t\tconst profiles = this.allExtensions.get(key);\n\t\tif (profiles) {\n\t\t\tprofiles.delete(profileLocation);\n\t\t}\n\t\tif (!profiles?.size) {\n\t\t\tthis.allExtensions.delete(key);\n\t\t}\n\t}\n\n\tprivate getKey(identifier: IExtensionIdentifier, version: string): string {\n\t\treturn `${ExtensionIdentifier.toKey(identifier.id)}@${version}`;\n\t}\n\n\tprivate fromKey(\n\t\tkey: string,\n\t): { identifier: IExtensionIdentifier; version: string } | undefined {\n\t\tconst [id, version] = getIdAndVersion(key);\n\t\treturn version ? { identifier: { id }, version } : undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
