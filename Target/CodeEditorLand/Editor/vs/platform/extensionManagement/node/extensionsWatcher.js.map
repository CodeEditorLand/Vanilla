{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/node/extensionsWatcher.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable, DisposableMap } from '../../../base/common/lifecycle.js';\nimport { ResourceSet } from '../../../base/common/map.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { getIdAndVersion } from '../common/extensionManagementUtil.js';\nimport { DidAddProfileExtensionsEvent, DidRemoveProfileExtensionsEvent, IExtensionsProfileScannerService, ProfileExtensionsEvent } from '../common/extensionsProfileScannerService.js';\nimport { IExtensionsScannerService } from '../common/extensionsScannerService.js';\nimport { INativeServerExtensionManagementService } from './extensionManagementService.js';\nimport { ExtensionIdentifier, IExtension, IExtensionIdentifier } from '../../extensions/common/extensions.js';\nimport { FileChangesEvent, FileChangeType, IFileService } from '../../files/common/files.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\n\nexport interface DidChangeProfileExtensionsEvent {\n\treadonly added?: { readonly extensions: readonly IExtensionIdentifier[]; readonly profileLocation: URI };\n\treadonly removed?: { readonly extensions: readonly IExtensionIdentifier[]; readonly profileLocation: URI };\n}\n\nexport class ExtensionsWatcher extends Disposable {\n\n\tprivate readonly _onDidChangeExtensionsByAnotherSource = this._register(new Emitter<DidChangeProfileExtensionsEvent>());\n\treadonly onDidChangeExtensionsByAnotherSource = this._onDidChangeExtensionsByAnotherSource.event;\n\n\tprivate readonly allExtensions = new Map<string, ResourceSet>;\n\tprivate readonly extensionsProfileWatchDisposables = this._register(new DisposableMap<string>());\n\n\tconstructor(\n\t\tprivate readonly extensionManagementService: INativeServerExtensionManagementService,\n\t\tprivate readonly extensionsScannerService: IExtensionsScannerService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.initialize().then(null, error => logService.error('Error while initializing Extensions Watcher', getErrorMessage(error)));\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tawait this.extensionsScannerService.initializeDefaultProfileExtensions();\n\t\tawait this.onDidChangeProfiles(this.userDataProfilesService.profiles);\n\t\tthis.registerListeners();\n\t\tawait this.uninstallExtensionsNotInProfiles();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.userDataProfilesService.onDidChangeProfiles(e => this.onDidChangeProfiles(e.added)));\n\t\tthis._register(this.extensionsProfileScannerService.onAddExtensions(e => this.onAddExtensions(e)));\n\t\tthis._register(this.extensionsProfileScannerService.onDidAddExtensions(e => this.onDidAddExtensions(e)));\n\t\tthis._register(this.extensionsProfileScannerService.onRemoveExtensions(e => this.onRemoveExtensions(e)));\n\t\tthis._register(this.extensionsProfileScannerService.onDidRemoveExtensions(e => this.onDidRemoveExtensions(e)));\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\t}\n\n\tprivate async onDidChangeProfiles(added: readonly IUserDataProfile[]): Promise<void> {\n\t\ttry {\n\t\t\tif (added.length) {\n\t\t\t\tawait Promise.all(added.map(profile => {\n\t\t\t\t\tthis.extensionsProfileWatchDisposables.set(profile.id, combinedDisposable(\n\t\t\t\t\t\tthis.fileService.watch(this.uriIdentityService.extUri.dirname(profile.extensionsResource)),\n\t\t\t\t\t\t// Also listen to the resource incase the resource is a symlink - https://github.com/microsoft/vscode/issues/118134\n\t\t\t\t\t\tthis.fileService.watch(profile.extensionsResource)\n\t\t\t\t\t));\n\t\t\t\t\treturn this.populateExtensionsFromProfile(profile.extensionsResource);\n\t\t\t\t}));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async onAddExtensions(e: ProfileExtensionsEvent): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tthis.addExtensionWithKey(this.getKey(extension.identifier, extension.version), e.profileLocation);\n\t\t}\n\t}\n\n\tprivate async onDidAddExtensions(e: DidAddProfileExtensionsEvent): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\tif (e.error) {\n\t\t\t\tthis.removeExtensionWithKey(key, e.profileLocation);\n\t\t\t} else {\n\t\t\t\tthis.addExtensionWithKey(key, e.profileLocation);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async onRemoveExtensions(e: ProfileExtensionsEvent): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tthis.removeExtensionWithKey(this.getKey(extension.identifier, extension.version), e.profileLocation);\n\t\t}\n\t}\n\n\tprivate async onDidRemoveExtensions(e: DidRemoveProfileExtensionsEvent): Promise<void> {\n\t\tconst extensionsToUninstall: IExtension[] = [];\n\t\tconst promises: Promise<void>[] = [];\n\t\tfor (const extension of e.extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\tif (e.error) {\n\t\t\t\tthis.addExtensionWithKey(key, e.profileLocation);\n\t\t\t} else {\n\t\t\t\tthis.removeExtensionWithKey(key, e.profileLocation);\n\t\t\t\tif (!this.allExtensions.has(key)) {\n\t\t\t\t\tthis.logService.debug('Extension is removed from all profiles', extension.identifier.id, extension.version);\n\t\t\t\t\tpromises.push(this.extensionManagementService.scanInstalledExtensionAtLocation(extension.location)\n\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t\textensionsToUninstall.push(result);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logService.info('Extension not found at the location', extension.location.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, error => this.logService.error(error)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tawait Promise.all(promises);\n\t\t\tif (extensionsToUninstall.length) {\n\t\t\t\tawait this.uninstallExtensionsNotInProfiles(extensionsToUninstall);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tfor (const profile of this.userDataProfilesService.profiles) {\n\t\t\tif (e.contains(profile.extensionsResource, FileChangeType.UPDATED, FileChangeType.ADDED)) {\n\t\t\t\tthis.onDidExtensionsProfileChange(profile.extensionsResource);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async onDidExtensionsProfileChange(profileLocation: URI): Promise<void> {\n\t\tconst added: IExtensionIdentifier[] = [], removed: IExtensionIdentifier[] = [];\n\t\tconst extensions = await this.extensionsProfileScannerService.scanProfileExtensions(profileLocation);\n\t\tconst extensionKeys = new Set<string>();\n\t\tconst cached = new Set<string>();\n\t\tfor (const [key, profiles] of this.allExtensions) {\n\t\t\tif (profiles.has(profileLocation)) {\n\t\t\t\tcached.add(key);\n\t\t\t}\n\t\t}\n\t\tfor (const extension of extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\textensionKeys.add(key);\n\t\t\tif (!cached.has(key)) {\n\t\t\t\tadded.push(extension.identifier);\n\t\t\t\tthis.addExtensionWithKey(key, profileLocation);\n\t\t\t}\n\t\t}\n\t\tfor (const key of cached) {\n\t\t\tif (!extensionKeys.has(key)) {\n\t\t\t\tconst extension = this.fromKey(key);\n\t\t\t\tif (extension) {\n\t\t\t\t\tremoved.push(extension.identifier);\n\t\t\t\t\tthis.removeExtensionWithKey(key, profileLocation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (added.length || removed.length) {\n\t\t\tthis._onDidChangeExtensionsByAnotherSource.fire({ added: added.length ? { extensions: added, profileLocation } : undefined, removed: removed.length ? { extensions: removed, profileLocation } : undefined });\n\t\t}\n\t}\n\n\tprivate async populateExtensionsFromProfile(extensionsProfileLocation: URI): Promise<void> {\n\t\tconst extensions = await this.extensionsProfileScannerService.scanProfileExtensions(extensionsProfileLocation);\n\t\tfor (const extension of extensions) {\n\t\t\tthis.addExtensionWithKey(this.getKey(extension.identifier, extension.version), extensionsProfileLocation);\n\t\t}\n\t}\n\n\tprivate async uninstallExtensionsNotInProfiles(toUninstall?: IExtension[]): Promise<void> {\n\t\tif (!toUninstall) {\n\t\t\tconst installed = await this.extensionManagementService.scanAllUserInstalledExtensions();\n\t\t\ttoUninstall = installed.filter(installedExtension => !this.allExtensions.has(this.getKey(installedExtension.identifier, installedExtension.manifest.version)));\n\t\t}\n\t\tif (toUninstall.length) {\n\t\t\tawait this.extensionManagementService.markAsUninstalled(...toUninstall);\n\t\t}\n\t}\n\n\tprivate addExtensionWithKey(key: string, extensionsProfileLocation: URI): void {\n\t\tlet profiles = this.allExtensions.get(key);\n\t\tif (!profiles) {\n\t\t\tthis.allExtensions.set(key, profiles = new ResourceSet((uri) => this.uriIdentityService.extUri.getComparisonKey(uri)));\n\t\t}\n\t\tprofiles.add(extensionsProfileLocation);\n\t}\n\n\tprivate removeExtensionWithKey(key: string, profileLocation: URI): void {\n\t\tconst profiles = this.allExtensions.get(key);\n\t\tif (profiles) {\n\t\t\tprofiles.delete(profileLocation);\n\t\t}\n\t\tif (!profiles?.size) {\n\t\t\tthis.allExtensions.delete(key);\n\t\t}\n\t}\n\n\tprivate getKey(identifier: IExtensionIdentifier, version: string): string {\n\t\treturn `${ExtensionIdentifier.toKey(identifier.id)}@${version}`;\n\t}\n\n\tprivate fromKey(key: string): { identifier: IExtensionIdentifier; version: string } | undefined {\n\t\tconst [id, version] = getIdAndVersion(key);\n\t\treturn version ? { identifier: { id }, version } : undefined;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
