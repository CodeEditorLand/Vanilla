{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/test/node/extensionDownloader.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { platform } from '../../../../base/common/platform.js';\nimport { arch } from '../../../../base/common/process.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { INativeEnvironmentService } from '../../../environment/common/environment.js';\nimport { ExtensionSignatureVerificationCode, getTargetPlatform, IExtensionGalleryService, IGalleryExtension, IGalleryExtensionAssets, InstallOperation } from '../../common/extensionManagement.js';\nimport { getGalleryExtensionId } from '../../common/extensionManagementUtil.js';\nimport { ExtensionsDownloader } from '../../node/extensionDownloader.js';\nimport { IExtensionSignatureVerificationResult, IExtensionSignatureVerificationService } from '../../node/extensionSignatureVerificationService.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { TestInstantiationService } from '../../../instantiation/test/common/instantiationServiceMock.js';\nimport { ILogService, NullLogService } from '../../../log/common/log.js';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nclass TestExtensionSignatureVerificationService extends mock<IExtensionSignatureVerificationService>() {\n\n\tconstructor(\n\t\tprivate readonly verificationResult: string | boolean) {\n\t\tsuper();\n\t}\n\n\toverride async verify(): Promise<IExtensionSignatureVerificationResult | undefined> {\n\t\tif (this.verificationResult === true) {\n\t\t\treturn {\n\t\t\t\tcode: ExtensionSignatureVerificationCode.Success\n\t\t\t};\n\t\t}\n\t\tif (this.verificationResult === false) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tcode: this.verificationResult as ExtensionSignatureVerificationCode,\n\t\t};\n\t}\n}\n\nclass TestExtensionDownloader extends ExtensionsDownloader {\n\tprotected override async validate(): Promise<void> { }\n}\n\nsuite('ExtensionDownloader Tests', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = disposables.add(new TestInstantiationService());\n\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tinstantiationService.stub(ILogService, logService);\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(ILogService, logService);\n\t\tinstantiationService.stub(INativeEnvironmentService, { extensionsDownloadLocation: joinPath(ROOT, 'CachedExtensionVSIXs') });\n\t\tinstantiationService.stub(IExtensionGalleryService, {\n\t\t\tasync download(extension, location, operation) {\n\t\t\t\tawait fileService.writeFile(location, VSBuffer.fromString('extension vsix'));\n\t\t\t},\n\t\t\tasync downloadSignatureArchive(extension, location) {\n\t\t\t\tawait fileService.writeFile(location, VSBuffer.fromString('extension signature'));\n\t\t\t},\n\t\t});\n\t});\n\n\ttest('download completes successfully if verification is disabled by options', async () => {\n\t\tconst testObject = aTestObject({ verificationResult: 'error' });\n\n\t\tconst actual = await testObject.download(aGalleryExtension('a', { isSigned: true }), InstallOperation.Install, false);\n\n\t\tassert.strictEqual(actual.verificationStatus, undefined);\n\t});\n\n\ttest('download completes successfully if verification is disabled because the module is not loaded', async () => {\n\t\tconst testObject = aTestObject({ verificationResult: false });\n\n\t\tconst actual = await testObject.download(aGalleryExtension('a', { isSigned: true }), InstallOperation.Install, true);\n\n\t\tassert.strictEqual(actual.verificationStatus, undefined);\n\t});\n\n\ttest('download completes successfully if verification fails to execute', async () => {\n\t\tconst errorCode = 'ENOENT';\n\t\tconst testObject = aTestObject({ verificationResult: errorCode });\n\n\t\tconst actual = await testObject.download(aGalleryExtension('a', { isSigned: true }), InstallOperation.Install, true);\n\n\t\tassert.strictEqual(actual.verificationStatus, errorCode);\n\t});\n\n\ttest('download completes successfully if verification fails ', async () => {\n\t\tconst errorCode = 'IntegrityCheckFailed';\n\t\tconst testObject = aTestObject({ verificationResult: errorCode });\n\n\t\tconst actual = await testObject.download(aGalleryExtension('a', { isSigned: true }), InstallOperation.Install, true);\n\n\t\tassert.strictEqual(actual.verificationStatus, errorCode);\n\t});\n\n\ttest('download completes successfully if verification succeeds', async () => {\n\t\tconst testObject = aTestObject({ verificationResult: true });\n\n\t\tconst actual = await testObject.download(aGalleryExtension('a', { isSigned: true }), InstallOperation.Install, true);\n\n\t\tassert.strictEqual(actual.verificationStatus, ExtensionSignatureVerificationCode.Success);\n\t});\n\n\ttest('download completes successfully for unsigned extension', async () => {\n\t\tconst testObject = aTestObject({ verificationResult: true });\n\n\t\tconst actual = await testObject.download(aGalleryExtension('a', { isSigned: false }), InstallOperation.Install, true);\n\n\t\tassert.strictEqual(actual.verificationStatus, undefined);\n\t});\n\n\ttest('download completes successfully for an unsigned extension even when signature verification throws error', async () => {\n\t\tconst testObject = aTestObject({ verificationResult: 'error' });\n\n\t\tconst actual = await testObject.download(aGalleryExtension('a', { isSigned: false }), InstallOperation.Install, true);\n\n\t\tassert.strictEqual(actual.verificationStatus, undefined);\n\t});\n\n\tfunction aTestObject(options: { verificationResult: boolean | string }): ExtensionsDownloader {\n\t\tinstantiationService.stub(IExtensionSignatureVerificationService, new TestExtensionSignatureVerificationService(options.verificationResult));\n\t\treturn disposables.add(instantiationService.createInstance(TestExtensionDownloader));\n\t}\n\n\tfunction aGalleryExtension(name: string, properties: Partial<IGalleryExtension> = {}, galleryExtensionProperties: any = {}, assets: Partial<IGalleryExtensionAssets> = {}): IGalleryExtension {\n\t\tconst targetPlatform = getTargetPlatform(platform, arch);\n\t\tconst galleryExtension = <IGalleryExtension>Object.create({ name, publisher: 'pub', version: '1.0.0', allTargetPlatforms: [targetPlatform], properties: {}, assets: {}, ...properties });\n\t\tgalleryExtension.properties = { ...galleryExtension.properties, dependencies: [], targetPlatform, ...galleryExtensionProperties };\n\t\tgalleryExtension.assets = { ...galleryExtension.assets, ...assets };\n\t\tgalleryExtension.identifier = { id: getGalleryExtensionId(galleryExtension.publisher, galleryExtension.name), uuid: generateUuid() };\n\t\treturn <IGalleryExtension>galleryExtension;\n\t}\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,gBAAgB;AACzB,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,gBAAgB;AACzB,SAAS,WAAW;AACpB,SAAS,oBAAoB;AAC7B,SAAS,YAAY;AACrB,SAAS,+CAA+C;AACxD,SAAS,iCAAiC;AAC1C,SAAS,oCAAoC,mBAAmB,0BAA0B,mBAAmB,yBAAyB,wBAAwB;AAC9J,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,uCAAuC,8CAA8C;AAC9F,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,kCAAkC;AAC3C,SAAS,gCAAgC;AACzC,SAAS,aAAa,sBAAsB;AAE5C,MAAM,OAAO,IAAI,KAAK,OAAO,EAAE,KAAK,EAAE,QAAQ,eAAe,CAAC;AAE9D,MAAM,kDAAkD,KAA6C,EAAE;AAAA,EAEtG,YACkB,oBAAsC;AACvD,UAAM;AADW;AAAA,EAElB;AAAA,EAhCD,OA2BuG;AAAA;AAAA;AAAA,EAOtG,MAAe,SAAqE;AACnF,QAAI,KAAK,uBAAuB,MAAM;AACrC,aAAO;AAAA,QACN,MAAM,mCAAmC;AAAA,MAC1C;AAAA,IACD;AACA,QAAI,KAAK,uBAAuB,OAAO;AACtC,aAAO;AAAA,IACR;AACA,WAAO;AAAA,MACN,MAAM,KAAK;AAAA,IACZ;AAAA,EACD;AACD;AAEA,MAAM,gCAAgC,qBAAqB;AAAA,EAjD3D,OAiD2D;AAAA;AAAA;AAAA,EAC1D,MAAyB,WAA0B;AAAA,EAAE;AACtD;AAEA,MAAM,6BAA6B,MAAM;AAExC,QAAM,cAAc,wCAAwC;AAC5D,MAAI;AAEJ,QAAM,MAAM;AACX,2BAAuB,YAAY,IAAI,IAAI,yBAAyB,CAAC;AAErE,UAAM,aAAa,IAAI,eAAe;AACtC,UAAM,cAAc,YAAY,IAAI,IAAI,YAAY,UAAU,CAAC;AAC/D,UAAM,qBAAqB,YAAY,IAAI,IAAI,2BAA2B,CAAC;AAC3E,gBAAY,IAAI,YAAY,iBAAiB,KAAK,QAAQ,kBAAkB,CAAC;AAE7E,yBAAqB,KAAK,aAAa,UAAU;AACjD,yBAAqB,KAAK,cAAc,WAAW;AACnD,yBAAqB,KAAK,aAAa,UAAU;AACjD,yBAAqB,KAAK,2BAA2B,EAAE,4BAA4B,SAAS,MAAM,sBAAsB,EAAE,CAAC;AAC3H,yBAAqB,KAAK,0BAA0B;AAAA,MACnD,MAAM,SAAS,WAAW,UAAU,WAAW;AAC9C,cAAM,YAAY,UAAU,UAAU,SAAS,WAAW,gBAAgB,CAAC;AAAA,MAC5E;AAAA,MACA,MAAM,yBAAyB,WAAW,UAAU;AACnD,cAAM,YAAY,UAAU,UAAU,SAAS,WAAW,qBAAqB,CAAC;AAAA,MACjF;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,0EAA0E,YAAY;AAC1F,UAAM,aAAa,YAAY,EAAE,oBAAoB,QAAQ,CAAC;AAE9D,UAAM,SAAS,MAAM,WAAW,SAAS,kBAAkB,KAAK,EAAE,UAAU,KAAK,CAAC,GAAG,iBAAiB,SAAS,KAAK;AAEpH,WAAO,YAAY,OAAO,oBAAoB,MAAS;AAAA,EACxD,CAAC;AAED,OAAK,gGAAgG,YAAY;AAChH,UAAM,aAAa,YAAY,EAAE,oBAAoB,MAAM,CAAC;AAE5D,UAAM,SAAS,MAAM,WAAW,SAAS,kBAAkB,KAAK,EAAE,UAAU,KAAK,CAAC,GAAG,iBAAiB,SAAS,IAAI;AAEnH,WAAO,YAAY,OAAO,oBAAoB,MAAS;AAAA,EACxD,CAAC;AAED,OAAK,oEAAoE,YAAY;AACpF,UAAM,YAAY;AAClB,UAAM,aAAa,YAAY,EAAE,oBAAoB,UAAU,CAAC;AAEhE,UAAM,SAAS,MAAM,WAAW,SAAS,kBAAkB,KAAK,EAAE,UAAU,KAAK,CAAC,GAAG,iBAAiB,SAAS,IAAI;AAEnH,WAAO,YAAY,OAAO,oBAAoB,SAAS;AAAA,EACxD,CAAC;AAED,OAAK,0DAA0D,YAAY;AAC1E,UAAM,YAAY;AAClB,UAAM,aAAa,YAAY,EAAE,oBAAoB,UAAU,CAAC;AAEhE,UAAM,SAAS,MAAM,WAAW,SAAS,kBAAkB,KAAK,EAAE,UAAU,KAAK,CAAC,GAAG,iBAAiB,SAAS,IAAI;AAEnH,WAAO,YAAY,OAAO,oBAAoB,SAAS;AAAA,EACxD,CAAC;AAED,OAAK,4DAA4D,YAAY;AAC5E,UAAM,aAAa,YAAY,EAAE,oBAAoB,KAAK,CAAC;AAE3D,UAAM,SAAS,MAAM,WAAW,SAAS,kBAAkB,KAAK,EAAE,UAAU,KAAK,CAAC,GAAG,iBAAiB,SAAS,IAAI;AAEnH,WAAO,YAAY,OAAO,oBAAoB,mCAAmC,OAAO;AAAA,EACzF,CAAC;AAED,OAAK,0DAA0D,YAAY;AAC1E,UAAM,aAAa,YAAY,EAAE,oBAAoB,KAAK,CAAC;AAE3D,UAAM,SAAS,MAAM,WAAW,SAAS,kBAAkB,KAAK,EAAE,UAAU,MAAM,CAAC,GAAG,iBAAiB,SAAS,IAAI;AAEpH,WAAO,YAAY,OAAO,oBAAoB,MAAS;AAAA,EACxD,CAAC;AAED,OAAK,2GAA2G,YAAY;AAC3H,UAAM,aAAa,YAAY,EAAE,oBAAoB,QAAQ,CAAC;AAE9D,UAAM,SAAS,MAAM,WAAW,SAAS,kBAAkB,KAAK,EAAE,UAAU,MAAM,CAAC,GAAG,iBAAiB,SAAS,IAAI;AAEpH,WAAO,YAAY,OAAO,oBAAoB,MAAS;AAAA,EACxD,CAAC;AAED,WAAS,YAAY,SAAyE;AAC7F,yBAAqB,KAAK,wCAAwC,IAAI,0CAA0C,QAAQ,kBAAkB,CAAC;AAC3I,WAAO,YAAY,IAAI,qBAAqB,eAAe,uBAAuB,CAAC;AAAA,EACpF;AAHS;AAKT,WAAS,kBAAkB,MAAc,aAAyC,CAAC,GAAG,6BAAkC,CAAC,GAAG,SAA2C,CAAC,GAAsB;AAC7L,UAAM,iBAAiB,kBAAkB,UAAU,IAAI;AACvD,UAAM,mBAAsC,uBAAO,OAAO,EAAE,MAAM,WAAW,OAAO,SAAS,SAAS,oBAAoB,CAAC,cAAc,GAAG,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,WAAW,CAAC;AACvL,qBAAiB,aAAa,EAAE,GAAG,iBAAiB,YAAY,cAAc,CAAC,GAAG,gBAAgB,GAAG,2BAA2B;AAChI,qBAAiB,SAAS,EAAE,GAAG,iBAAiB,QAAQ,GAAG,OAAO;AAClE,qBAAiB,aAAa,EAAE,IAAI,sBAAsB,iBAAiB,WAAW,iBAAiB,IAAI,GAAG,MAAM,aAAa,EAAE;AACnI,WAA0B;AAAA,EAC3B;AAPS;AAQV,CAAC;",
  "names": []
}
