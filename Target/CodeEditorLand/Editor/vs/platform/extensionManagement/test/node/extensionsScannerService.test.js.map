{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/test/node/extensionsScannerService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { dirname, joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { INativeEnvironmentService } from '../../../environment/common/environment.js';\nimport { IExtensionsProfileScannerService, IProfileExtensionsScanOptions } from '../../common/extensionsProfileScannerService.js';\nimport { AbstractExtensionsScannerService, ExtensionScannerInput, IExtensionsScannerService, IScannedExtensionManifest, Translations } from '../../common/extensionsScannerService.js';\nimport { ExtensionsProfileScannerService } from '../../node/extensionsProfileScannerService.js';\nimport { ExtensionType, IExtensionManifest, TargetPlatform } from '../../../extensions/common/extensions.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { IInstantiationService } from '../../../instantiation/common/instantiation.js';\nimport { TestInstantiationService } from '../../../instantiation/test/common/instantiationServiceMock.js';\nimport { ILogService, NullLogService } from '../../../log/common/log.js';\nimport { IProductService } from '../../../product/common/productService.js';\nimport { NullTelemetryService } from '../../../telemetry/common/telemetryUtils.js';\nimport { IUriIdentityService } from '../../../uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../../uriIdentity/common/uriIdentityService.js';\nimport { IUserDataProfilesService, UserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\n\nlet translations: Translations = Object.create(null);\nconst ROOT = URI.file('/ROOT');\n\nclass ExtensionsScannerService extends AbstractExtensionsScannerService implements IExtensionsScannerService {\n\n\tconstructor(\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IExtensionsProfileScannerService extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t\t@INativeEnvironmentService nativeEnvironmentService: INativeEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper(\n\t\t\tURI.file(nativeEnvironmentService.builtinExtensionsPath),\n\t\t\tURI.file(nativeEnvironmentService.extensionsPath),\n\t\t\tjoinPath(nativeEnvironmentService.userHome, '.vscode-oss-dev', 'extensions', 'control.json'),\n\t\t\tuserDataProfilesService.defaultProfile,\n\t\t\tuserDataProfilesService, extensionsProfileScannerService, fileService, logService, nativeEnvironmentService, productService, uriIdentityService, instantiationService);\n\t}\n\n\tprotected async getTranslations(language: string): Promise<Translations> {\n\t\treturn translations;\n\t}\n\n}\n\nsuite('NativeExtensionsScanerService Test', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(async () => {\n\t\ttranslations = {};\n\t\tinstantiationService = disposables.add(new TestInstantiationService());\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\t\tinstantiationService.stub(ILogService, logService);\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tconst systemExtensionsLocation = joinPath(ROOT, 'system');\n\t\tconst userExtensionsLocation = joinPath(ROOT, 'extensions');\n\t\tconst environmentService = instantiationService.stub(INativeEnvironmentService, {\n\t\t\tuserHome: ROOT,\n\t\t\tuserRoamingDataHome: ROOT,\n\t\t\tbuiltinExtensionsPath: systemExtensionsLocation.fsPath,\n\t\t\textensionsPath: userExtensionsLocation.fsPath,\n\t\t\tcacheHome: joinPath(ROOT, 'cache'),\n\t\t});\n\t\tinstantiationService.stub(IProductService, { version: '1.66.0' });\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tinstantiationService.stub(IUriIdentityService, uriIdentityService);\n\t\tconst userDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tinstantiationService.stub(IUserDataProfilesService, userDataProfilesService);\n\t\tinstantiationService.stub(IExtensionsProfileScannerService, disposables.add(new ExtensionsProfileScannerService(environmentService, fileService, userDataProfilesService, uriIdentityService, NullTelemetryService, logService)));\n\t\tawait fileService.createFolder(systemExtensionsLocation);\n\t\tawait fileService.createFolder(userExtensionsLocation);\n\t});\n\n\ttest('scan system extension', async () => {\n\t\tconst manifest: Partial<IExtensionManifest> = anExtensionManifest({ 'name': 'name', 'publisher': 'pub' });\n\t\tconst extensionLocation = await aSystemExtension(manifest);\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanSystemExtensions({});\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].location.toString(), extensionLocation.toString());\n\t\tassert.deepStrictEqual(actual[0].isBuiltin, true);\n\t\tassert.deepStrictEqual(actual[0].type, ExtensionType.System);\n\t\tassert.deepStrictEqual(actual[0].isValid, true);\n\t\tassert.deepStrictEqual(actual[0].validations, []);\n\t\tassert.deepStrictEqual(actual[0].metadata, undefined);\n\t\tassert.deepStrictEqual(actual[0].targetPlatform, TargetPlatform.UNDEFINED);\n\t\tassert.deepStrictEqual(actual[0].manifest, manifest);\n\t});\n\n\ttest('scan user extension', async () => {\n\t\tconst manifest: Partial<IScannedExtensionManifest> = anExtensionManifest({ 'name': 'name', 'publisher': 'pub', __metadata: { id: 'uuid' } });\n\t\tconst extensionLocation = await aUserExtension(manifest);\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({});\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name', uuid: 'uuid' });\n\t\tassert.deepStrictEqual(actual[0].location.toString(), extensionLocation.toString());\n\t\tassert.deepStrictEqual(actual[0].isBuiltin, false);\n\t\tassert.deepStrictEqual(actual[0].type, ExtensionType.User);\n\t\tassert.deepStrictEqual(actual[0].isValid, true);\n\t\tassert.deepStrictEqual(actual[0].validations, []);\n\t\tassert.deepStrictEqual(actual[0].metadata, { id: 'uuid' });\n\t\tassert.deepStrictEqual(actual[0].targetPlatform, TargetPlatform.UNDEFINED);\n\t\tdelete manifest.__metadata;\n\t\tassert.deepStrictEqual(actual[0].manifest, manifest);\n\t});\n\n\ttest('scan existing extension', async () => {\n\t\tconst manifest: Partial<IExtensionManifest> = anExtensionManifest({ 'name': 'name', 'publisher': 'pub' });\n\t\tconst extensionLocation = await aUserExtension(manifest);\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanExistingExtension(extensionLocation, ExtensionType.User, {});\n\n\t\tassert.notEqual(actual, null);\n\t\tassert.deepStrictEqual(actual!.identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual!.location.toString(), extensionLocation.toString());\n\t\tassert.deepStrictEqual(actual!.isBuiltin, false);\n\t\tassert.deepStrictEqual(actual!.type, ExtensionType.User);\n\t\tassert.deepStrictEqual(actual!.isValid, true);\n\t\tassert.deepStrictEqual(actual!.validations, []);\n\t\tassert.deepStrictEqual(actual!.metadata, undefined);\n\t\tassert.deepStrictEqual(actual!.targetPlatform, TargetPlatform.UNDEFINED);\n\t\tassert.deepStrictEqual(actual!.manifest, manifest);\n\t});\n\n\ttest('scan single extension', async () => {\n\t\tconst manifest: Partial<IExtensionManifest> = anExtensionManifest({ 'name': 'name', 'publisher': 'pub' });\n\t\tconst extensionLocation = await aUserExtension(manifest);\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanOneOrMultipleExtensions(extensionLocation, ExtensionType.User, {});\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].location.toString(), extensionLocation.toString());\n\t\tassert.deepStrictEqual(actual[0].isBuiltin, false);\n\t\tassert.deepStrictEqual(actual[0].type, ExtensionType.User);\n\t\tassert.deepStrictEqual(actual[0].isValid, true);\n\t\tassert.deepStrictEqual(actual[0].validations, []);\n\t\tassert.deepStrictEqual(actual[0].metadata, undefined);\n\t\tassert.deepStrictEqual(actual[0].targetPlatform, TargetPlatform.UNDEFINED);\n\t\tassert.deepStrictEqual(actual[0].manifest, manifest);\n\t});\n\n\ttest('scan multiple extensions', async () => {\n\t\tconst extensionLocation = await aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub' }));\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name2', 'publisher': 'pub' }));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanOneOrMultipleExtensions(dirname(extensionLocation), ExtensionType.User, {});\n\n\t\tassert.deepStrictEqual(actual.length, 2);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[1].identifier, { id: 'pub.name2' });\n\t});\n\n\ttest('scan user extension with different versions', async () => {\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', version: '1.0.1' }));\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', version: '1.0.2' }));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({});\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].manifest.version, '1.0.2');\n\t});\n\n\ttest('scan user extension include all versions', async () => {\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', version: '1.0.1' }));\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', version: '1.0.2' }));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({ includeAllVersions: true });\n\n\t\tassert.deepStrictEqual(actual.length, 2);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].manifest.version, '1.0.1');\n\t\tassert.deepStrictEqual(actual[1].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[1].manifest.version, '1.0.2');\n\t});\n\n\ttest('scan user extension with different versions and higher version is not compatible', async () => {\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', version: '1.0.1' }));\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', version: '1.0.2', engines: { vscode: '^1.67.0' } }));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({});\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].manifest.version, '1.0.1');\n\t});\n\n\ttest('scan exclude invalid extensions', async () => {\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub' }));\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name2', 'publisher': 'pub', engines: { vscode: '^1.67.0' } }));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({});\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t});\n\n\ttest('scan exclude uninstalled extensions', async () => {\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub' }));\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name2', 'publisher': 'pub' }));\n\t\tawait instantiationService.get(IFileService).writeFile(joinPath(URI.file(instantiationService.get(INativeEnvironmentService).extensionsPath), '.obsolete'), VSBuffer.fromString(JSON.stringify({ 'pub.name2-1.0.0': true })));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({});\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t});\n\n\ttest('scan include uninstalled extensions', async () => {\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub' }));\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name2', 'publisher': 'pub' }));\n\t\tawait instantiationService.get(IFileService).writeFile(joinPath(URI.file(instantiationService.get(INativeEnvironmentService).extensionsPath), '.obsolete'), VSBuffer.fromString(JSON.stringify({ 'pub.name2-1.0.0': true })));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({ includeUninstalled: true });\n\n\t\tassert.deepStrictEqual(actual.length, 2);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[1].identifier, { id: 'pub.name2' });\n\t});\n\n\ttest('scan include invalid extensions', async () => {\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub' }));\n\t\tawait aUserExtension(anExtensionManifest({ 'name': 'name2', 'publisher': 'pub', engines: { vscode: '^1.67.0' } }));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({ includeInvalid: true });\n\n\t\tassert.deepStrictEqual(actual.length, 2);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[1].identifier, { id: 'pub.name2' });\n\t});\n\n\ttest('scan system extensions include additional builtin extensions', async () => {\n\t\tinstantiationService.stub(IProductService, {\n\t\t\tversion: '1.66.0',\n\t\t\tbuiltInExtensions: [\n\t\t\t\t{ name: 'pub.name2', version: '', repo: '', metadata: undefined },\n\t\t\t\t{ name: 'pub.name', version: '', repo: '', metadata: undefined }\n\t\t\t]\n\t\t});\n\t\tawait anExtension(anExtensionManifest({ 'name': 'name2', 'publisher': 'pub' }), joinPath(ROOT, 'additional'));\n\t\tconst extensionLocation = await anExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub' }), joinPath(ROOT, 'additional'));\n\t\tawait aSystemExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', version: '1.0.1' }));\n\t\tawait instantiationService.get(IFileService).writeFile(joinPath(instantiationService.get(INativeEnvironmentService).userHome, '.vscode-oss-dev', 'extensions', 'control.json'), VSBuffer.fromString(JSON.stringify({ 'pub.name2': 'disabled', 'pub.name': extensionLocation.fsPath })));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanSystemExtensions({ checkControlFile: true });\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].manifest.version, '1.0.0');\n\t});\n\n\ttest('scan extension with default nls replacements', async () => {\n\t\tconst extensionLocation = await aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', displayName: '%displayName%' }));\n\t\tawait instantiationService.get(IFileService).writeFile(joinPath(extensionLocation, 'package.nls.json'), VSBuffer.fromString(JSON.stringify({ displayName: 'Hello World' })));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\tconst actual = await testObject.scanUserExtensions({});\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].manifest.displayName, 'Hello World');\n\t});\n\n\ttest('scan extension with en nls replacements', async () => {\n\t\tconst extensionLocation = await aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', displayName: '%displayName%' }));\n\t\tawait instantiationService.get(IFileService).writeFile(joinPath(extensionLocation, 'package.nls.json'), VSBuffer.fromString(JSON.stringify({ displayName: 'Hello World' })));\n\t\tconst nlsLocation = joinPath(extensionLocation, 'package.en.json');\n\t\tawait instantiationService.get(IFileService).writeFile(nlsLocation, VSBuffer.fromString(JSON.stringify({ contents: { package: { displayName: 'Hello World EN' } } })));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\ttranslations = { 'pub.name': nlsLocation.fsPath };\n\t\tconst actual = await testObject.scanUserExtensions({ language: 'en' });\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].manifest.displayName, 'Hello World EN');\n\t});\n\n\ttest('scan extension falls back to default nls replacements', async () => {\n\t\tconst extensionLocation = await aUserExtension(anExtensionManifest({ 'name': 'name', 'publisher': 'pub', displayName: '%displayName%' }));\n\t\tawait instantiationService.get(IFileService).writeFile(joinPath(extensionLocation, 'package.nls.json'), VSBuffer.fromString(JSON.stringify({ displayName: 'Hello World' })));\n\t\tconst nlsLocation = joinPath(extensionLocation, 'package.en.json');\n\t\tawait instantiationService.get(IFileService).writeFile(nlsLocation, VSBuffer.fromString(JSON.stringify({ contents: { package: { displayName: 'Hello World EN' } } })));\n\t\tconst testObject: IExtensionsScannerService = disposables.add(instantiationService.createInstance(ExtensionsScannerService));\n\n\t\ttranslations = { 'pub.name2': nlsLocation.fsPath };\n\t\tconst actual = await testObject.scanUserExtensions({ language: 'en' });\n\n\t\tassert.deepStrictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].identifier, { id: 'pub.name' });\n\t\tassert.deepStrictEqual(actual[0].manifest.displayName, 'Hello World');\n\t});\n\n\tasync function aUserExtension(manifest: Partial<IScannedExtensionManifest>): Promise<URI> {\n\t\tconst environmentService = instantiationService.get(INativeEnvironmentService);\n\t\treturn anExtension(manifest, URI.file(environmentService.extensionsPath));\n\t}\n\n\tasync function aSystemExtension(manifest: Partial<IScannedExtensionManifest>): Promise<URI> {\n\t\tconst environmentService = instantiationService.get(INativeEnvironmentService);\n\t\treturn anExtension(manifest, URI.file(environmentService.builtinExtensionsPath));\n\t}\n\n\tasync function anExtension(manifest: Partial<IScannedExtensionManifest>, root: URI): Promise<URI> {\n\t\tconst fileService = instantiationService.get(IFileService);\n\t\tconst extensionLocation = joinPath(root, `${manifest.publisher}.${manifest.name}-${manifest.version}-${manifest.__metadata?.targetPlatform ?? TargetPlatform.UNDEFINED}`);\n\t\tawait fileService.writeFile(joinPath(extensionLocation, 'package.json'), VSBuffer.fromString(JSON.stringify(manifest)));\n\t\treturn extensionLocation;\n\t}\n\n\tfunction anExtensionManifest(manifest: Partial<IScannedExtensionManifest>): Partial<IExtensionManifest> {\n\t\treturn { engines: { vscode: '^1.66.0' }, version: '1.0.0', main: 'main.js', activationEvents: ['*'], ...manifest };\n\t}\n});\n\nsuite('ExtensionScannerInput', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('compare inputs - location', () => {\n\t\tconst anInput = (location: URI, mtime: number | undefined) => new ExtensionScannerInput(location, mtime, undefined, undefined, false, undefined, ExtensionType.User, true, true, '1.1.1', undefined, undefined, true, undefined, {});\n\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ROOT, undefined), anInput(ROOT, undefined)), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ROOT, 100), anInput(ROOT, 100)), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(joinPath(ROOT, 'foo'), undefined), anInput(ROOT, undefined)), false);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ROOT, 100), anInput(ROOT, 200)), false);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ROOT, undefined), anInput(ROOT, 200)), false);\n\t});\n\n\ttest('compare inputs - application location', () => {\n\t\tconst anInput = (location: URI, mtime: number | undefined) => new ExtensionScannerInput(ROOT, undefined, location, mtime, false, undefined, ExtensionType.User, true, true, '1.1.1', undefined, undefined, true, undefined, {});\n\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ROOT, undefined), anInput(ROOT, undefined)), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ROOT, 100), anInput(ROOT, 100)), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(joinPath(ROOT, 'foo'), undefined), anInput(ROOT, undefined)), false);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ROOT, 100), anInput(ROOT, 200)), false);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ROOT, undefined), anInput(ROOT, 200)), false);\n\t});\n\n\ttest('compare inputs - profile', () => {\n\t\tconst anInput = (profile: boolean, profileScanOptions: IProfileExtensionsScanOptions | undefined) => new ExtensionScannerInput(ROOT, undefined, undefined, undefined, profile, profileScanOptions, ExtensionType.User, true, true, '1.1.1', undefined, undefined, true, undefined, {});\n\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(true, { bailOutWhenFileNotFound: true }), anInput(true, { bailOutWhenFileNotFound: true })), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(false, { bailOutWhenFileNotFound: true }), anInput(false, { bailOutWhenFileNotFound: true })), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(true, { bailOutWhenFileNotFound: false }), anInput(true, { bailOutWhenFileNotFound: false })), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(true, {}), anInput(true, {})), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(true, { bailOutWhenFileNotFound: true }), anInput(true, { bailOutWhenFileNotFound: false })), false);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(true, {}), anInput(true, { bailOutWhenFileNotFound: true })), false);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(true, undefined), anInput(true, {})), false);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(false, { bailOutWhenFileNotFound: true }), anInput(true, { bailOutWhenFileNotFound: true })), false);\n\t});\n\n\ttest('compare inputs - extension type', () => {\n\t\tconst anInput = (type: ExtensionType) => new ExtensionScannerInput(ROOT, undefined, undefined, undefined, false, undefined, type, true, true, '1.1.1', undefined, undefined, true, undefined, {});\n\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ExtensionType.System), anInput(ExtensionType.System)), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ExtensionType.User), anInput(ExtensionType.User)), true);\n\t\tassert.strictEqual(ExtensionScannerInput.equals(anInput(ExtensionType.User), anInput(ExtensionType.System)), false);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
