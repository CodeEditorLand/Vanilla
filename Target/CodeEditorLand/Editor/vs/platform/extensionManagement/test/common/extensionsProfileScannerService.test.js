import t from"assert";import*as x from"sinon";import{VSBuffer as m}from"../../../../base/common/buffer.js";import{joinPath as c}from"../../../../base/common/resources.js";import{URI as P}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as O}from"../../../../base/test/common/utils.js";import{IEnvironmentService as w}from"../../../environment/common/environment.js";import{AbstractExtensionsProfileScannerService as q}from"../../common/extensionsProfileScannerService.js";import{ExtensionType as N,TargetPlatform as h}from"../../../extensions/common/extensions.js";import{FileService as J}from"../../../files/common/fileService.js";import{IFileService as S}from"../../../files/common/files.js";import{InMemoryFileSystemProvider as j}from"../../../files/common/inMemoryFilesystemProvider.js";import{TestInstantiationService as y}from"../../../instantiation/test/common/instantiationServiceMock.js";import{ILogService as I,NullLogService as T}from"../../../log/common/log.js";import{ITelemetryService as M}from"../../../telemetry/common/telemetry.js";import{NullTelemetryService as k}from"../../../telemetry/common/telemetryUtils.js";import{IUriIdentityService as L}from"../../../uriIdentity/common/uriIdentity.js";import{UriIdentityService as F}from"../../../uriIdentity/common/uriIdentityService.js";import{IUserDataProfilesService as A,UserDataProfilesService as D}from"../../../userDataProfile/common/userDataProfile.js";class E extends q{}suite("ExtensionsProfileScannerService",()=>{const p=P.file("/ROOT"),r=O(),a=c(p,"extensions");let d;setup(async()=>{d=r.add(new y);const n=new T,e=r.add(new J(n)),i=r.add(new j);r.add(e.registerProvider(p.scheme,i)),d.stub(I,n),d.stub(S,e),d.stub(M,k);const o=d.stub(L,r.add(new F(e))),s=d.stub(w,{userRoamingDataHome:p,cacheHome:c(p,"cache")}),l=r.add(new D(s,e,o,n));d.stub(A,l)}),suiteTeardown(()=>x.restore()),test("write extensions located in the same extensions folder",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json"),i=f("pub.a",c(a,"pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=await n.scanProfileExtensions(e);t.deepStrictEqual(o.map(s=>({...s,location:s.location.toJSON()})),[{identifier:i.identifier,location:i.location.toJSON(),version:i.manifest.version,metadata:void 0}])}),test("write extensions located in the different folder",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json"),i=f("pub.a",c(p,"pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=await n.scanProfileExtensions(e);t.deepStrictEqual(o.map(s=>({...s,location:s.location.toJSON()})),[{identifier:i.identifier,location:i.location.toJSON(),version:i.manifest.version,metadata:void 0}])}),test("write extensions located in the same extensions folder has relative location ",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json"),i=f("pub.a",c(a,"pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=JSON.parse((await d.get(S).readFile(e)).value.toString());t.deepStrictEqual(o,[{identifier:i.identifier,location:i.location.toJSON(),relativeLocation:"pub.a-1.0.0",version:i.manifest.version}])}),test("write extensions located in different extensions folder does not has relative location ",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json"),i=f("pub.a",c(p,"pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=JSON.parse((await d.get(S).readFile(e)).value.toString());t.deepStrictEqual(o,[{identifier:i.identifier,location:i.location.toJSON(),version:i.manifest.version}])}),test("extension in old format is read and migrated",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version}])));const o=await r.add(d.createInstance(E,a)).scanProfileExtensions(n);t.deepStrictEqual(o.map(l=>({...l,location:l.location.toJSON()})),[{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version,metadata:void 0}]);const s=JSON.parse((await d.get(S).readFile(n)).value.toString());t.deepStrictEqual(s,[{identifier:e.identifier,location:e.location.toJSON(),relativeLocation:"pub.a-1.0.0",version:e.manifest.version}])}),test("extension in old format is not migrated if not exists in same location",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(p,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version}])));const o=await r.add(d.createInstance(E,a)).scanProfileExtensions(n);t.deepStrictEqual(o.map(l=>({...l,location:l.location.toJSON()})),[{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version,metadata:void 0}]);const s=JSON.parse((await d.get(S).readFile(n)).value.toString());t.deepStrictEqual(s,[{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version}])}),test("extension in old format is read and migrated during write",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version}])));const i=r.add(d.createInstance(E,a)),o=f("pub.b",c(a,"pub.b-1.0.0"));await i.addExtensionsToProfile([[o,void 0]],n);const s=await i.scanProfileExtensions(n);t.deepStrictEqual(s.map(u=>({...u,location:u.location.toJSON()})),[{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version,metadata:void 0},{identifier:o.identifier,location:o.location.toJSON(),version:o.manifest.version,metadata:void 0}]);const l=JSON.parse((await d.get(S).readFile(n)).value.toString());t.deepStrictEqual(l,[{identifier:e.identifier,location:e.location.toJSON(),relativeLocation:"pub.a-1.0.0",version:e.manifest.version},{identifier:o.identifier,location:o.location.toJSON(),relativeLocation:"pub.b-1.0.0",version:o.manifest.version}])}),test("extensions in old format and new format is read and migrated",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0")),i=f("pub.b",c(a,"pub.b-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version},{identifier:i.identifier,location:i.location.toJSON(),relativeLocation:"pub.b-1.0.0",version:i.manifest.version}])));const s=await r.add(d.createInstance(E,a)).scanProfileExtensions(n);t.deepStrictEqual(s.map(u=>({...u,location:u.location.toJSON()})),[{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version,metadata:void 0},{identifier:i.identifier,location:i.location.toJSON(),version:i.manifest.version,metadata:void 0}]);const l=JSON.parse((await d.get(S).readFile(n)).value.toString());t.deepStrictEqual(l,[{identifier:e.identifier,location:e.location.toJSON(),relativeLocation:"pub.a-1.0.0",version:e.manifest.version},{identifier:i.identifier,location:i.location.toJSON(),relativeLocation:"pub.b-1.0.0",version:i.manifest.version}])}),test("throws error if extension has invalid relativePath",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version,relativePath:2}])));const i=r.add(d.createInstance(E,a));try{await i.scanProfileExtensions(n),t.fail("Should throw error")}catch{}}),test("throws error if extension has no location",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,version:e.manifest.version,relativePath:"pub.a-1.0.0"}])));const i=r.add(d.createInstance(E,a));try{await i.scanProfileExtensions(n),t.fail("Should throw error")}catch{}}),test("throws error if extension location is invalid",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,location:{},version:e.manifest.version,relativePath:"pub.a-1.0.0"}])));const i=r.add(d.createInstance(E,a));try{await i.scanProfileExtensions(n),t.fail("Should throw error")}catch{}}),test("throws error if extension has no identifier",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{location:e.location.toJSON(),version:e.manifest.version}])));const i=r.add(d.createInstance(E,a));try{await i.scanProfileExtensions(n),t.fail("Should throw error")}catch{}}),test("throws error if extension identifier is invalid",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:"pub.a",location:e.location.toJSON(),version:e.manifest.version}])));const i=r.add(d.createInstance(E,a));try{await i.scanProfileExtensions(n),t.fail("Should throw error")}catch{}}),test("throws error if extension has no version",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,location:e.location.toJSON()}])));const i=r.add(d.createInstance(E,a));try{await i.scanProfileExtensions(n),t.fail("Should throw error")}catch{}}),test("read extension when manifest is empty",async()=>{const n=c(a,"extensions.json");await d.get(S).writeFile(n,m.fromString(""));const i=await r.add(d.createInstance(E,a)).scanProfileExtensions(n);t.deepStrictEqual(i,[])}),test("read extension when manifest has empty lines and spaces",async()=>{const n=c(a,"extensions.json");await d.get(S).writeFile(n,m.fromString(`


		`));const i=await r.add(d.createInstance(E,a)).scanProfileExtensions(n);t.deepStrictEqual(i,[])}),test("read extension when the relative location is empty",async()=>{const n=c(a,"extensions.json"),e=f("pub.a",c(a,"pub.a-1.0.0"));await d.get(S).writeFile(n,m.fromString(JSON.stringify([{identifier:e.identifier,location:e.location.toJSON(),relativeLocation:"",version:e.manifest.version}])));const o=await r.add(d.createInstance(E,a)).scanProfileExtensions(n);t.deepStrictEqual(o.map(l=>({...l,location:l.location.toJSON()})),[{identifier:e.identifier,location:e.location.toJSON(),version:e.manifest.version,metadata:void 0}]);const s=JSON.parse((await d.get(S).readFile(n)).value.toString());t.deepStrictEqual(s,[{identifier:e.identifier,location:e.location.toJSON(),relativeLocation:"pub.a-1.0.0",version:e.manifest.version}])}),test("add extension trigger events",async()=>{const n=r.add(d.createInstance(E,a)),e=x.stub(),i=x.stub();r.add(n.onAddExtensions(e)),r.add(n.onDidAddExtensions(i));const o=c(a,"extensions.json"),s=f("pub.a",c(p,"foo","pub.a-1.0.0"));await n.addExtensionsToProfile([[s,void 0]],o);const l=await n.scanProfileExtensions(o);t.deepStrictEqual(l.map(u=>({...u,location:u.location.toJSON()})),[{identifier:s.identifier,location:s.location.toJSON(),version:s.manifest.version,metadata:void 0}]),t.ok(e.calledOnce),t.deepStrictEqual(e.args[0][0].profileLocation.toString(),o.toString()),t.deepStrictEqual(e.args[0][0].extensions.length,1),t.deepStrictEqual(e.args[0][0].extensions[0].identifier,s.identifier),t.deepStrictEqual(e.args[0][0].extensions[0].version,s.manifest.version),t.deepStrictEqual(e.args[0][0].extensions[0].location.toString(),s.location.toString()),t.ok(i.calledOnce),t.deepStrictEqual(i.args[0][0].profileLocation.toString(),o.toString()),t.deepStrictEqual(i.args[0][0].extensions.length,1),t.deepStrictEqual(i.args[0][0].extensions[0].identifier,s.identifier),t.deepStrictEqual(i.args[0][0].extensions[0].version,s.manifest.version),t.deepStrictEqual(i.args[0][0].extensions[0].location.toString(),s.location.toString())}),test("remove extension trigger events",async()=>{const n=r.add(d.createInstance(E,a)),e=x.stub(),i=x.stub();r.add(n.onRemoveExtensions(e)),r.add(n.onDidRemoveExtensions(i));const o=c(a,"extensions.json"),s=f("pub.a",c(p,"foo","pub.a-1.0.0"));await n.addExtensionsToProfile([[s,void 0]],o),await n.removeExtensionFromProfile(s,o);const l=await n.scanProfileExtensions(o);t.deepStrictEqual(l.length,0),t.ok(e.calledOnce),t.deepStrictEqual(e.args[0][0].profileLocation.toString(),o.toString()),t.deepStrictEqual(e.args[0][0].extensions.length,1),t.deepStrictEqual(e.args[0][0].extensions[0].identifier,s.identifier),t.deepStrictEqual(e.args[0][0].extensions[0].version,s.manifest.version),t.deepStrictEqual(e.args[0][0].extensions[0].location.toString(),s.location.toString()),t.ok(i.calledOnce),t.deepStrictEqual(i.args[0][0].profileLocation.toString(),o.toString()),t.deepStrictEqual(i.args[0][0].extensions.length,1),t.deepStrictEqual(i.args[0][0].extensions[0].identifier,s.identifier),t.deepStrictEqual(i.args[0][0].extensions[0].version,s.manifest.version),t.deepStrictEqual(i.args[0][0].extensions[0].location.toString(),s.location.toString())}),test("add extension with same id but different version",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json"),i=f("pub.a",c(p,"pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=x.stub(),s=x.stub(),l=x.stub(),u=x.stub();r.add(n.onAddExtensions(o)),r.add(n.onRemoveExtensions(s)),r.add(n.onDidAddExtensions(l)),r.add(n.onDidRemoveExtensions(u));const v=f("pub.a",c(p,"pub.a-2.0.0"),void 0,{version:"2.0.0"});await n.addExtensionsToProfile([[v,void 0]],e);const g=await n.scanProfileExtensions(e);t.deepStrictEqual(g.map(b=>({...b,location:b.location.toJSON()})),[{identifier:v.identifier,location:v.location.toJSON(),version:v.manifest.version,metadata:void 0}]),t.ok(o.calledOnce),t.deepStrictEqual(o.args[0][0].profileLocation.toString(),e.toString()),t.deepStrictEqual(o.args[0][0].extensions.length,1),t.deepStrictEqual(o.args[0][0].extensions[0].identifier,v.identifier),t.deepStrictEqual(o.args[0][0].extensions[0].version,v.manifest.version),t.deepStrictEqual(o.args[0][0].extensions[0].location.toString(),v.location.toString()),t.ok(s.calledOnce),t.deepStrictEqual(s.args[0][0].profileLocation.toString(),e.toString()),t.deepStrictEqual(s.args[0][0].extensions.length,1),t.deepStrictEqual(s.args[0][0].extensions[0].identifier,i.identifier),t.deepStrictEqual(s.args[0][0].extensions[0].version,i.manifest.version),t.deepStrictEqual(s.args[0][0].extensions[0].location.toString(),i.location.toString()),t.ok(l.calledOnce),t.deepStrictEqual(o.args[0][0].profileLocation.toString(),e.toString()),t.deepStrictEqual(o.args[0][0].extensions.length,1),t.deepStrictEqual(o.args[0][0].extensions[0].identifier,v.identifier),t.deepStrictEqual(o.args[0][0].extensions[0].version,v.manifest.version),t.deepStrictEqual(o.args[0][0].extensions[0].location.toString(),v.location.toString()),t.ok(u.calledOnce),t.deepStrictEqual(s.args[0][0].profileLocation.toString(),e.toString()),t.deepStrictEqual(s.args[0][0].extensions.length,1),t.deepStrictEqual(s.args[0][0].extensions[0].identifier,i.identifier),t.deepStrictEqual(s.args[0][0].extensions[0].version,i.manifest.version),t.deepStrictEqual(s.args[0][0].extensions[0].location.toString(),i.location.toString())}),test("add same extension",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json"),i=f("pub.a",c(p,"pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=x.stub(),s=x.stub(),l=x.stub(),u=x.stub();r.add(n.onAddExtensions(o)),r.add(n.onRemoveExtensions(s)),r.add(n.onDidAddExtensions(l)),r.add(n.onDidRemoveExtensions(u)),await n.addExtensionsToProfile([[i,void 0]],e);const v=await n.scanProfileExtensions(e);t.deepStrictEqual(v.map(g=>({...g,location:g.location.toJSON()})),[{identifier:i.identifier,location:i.location.toJSON(),version:i.manifest.version,metadata:void 0}]),t.ok(o.notCalled),t.ok(s.notCalled),t.ok(l.notCalled),t.ok(u.notCalled)}),test("add same extension with different metadata",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json"),i=f("pub.a",c(p,"pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=x.stub(),s=x.stub(),l=x.stub(),u=x.stub();r.add(n.onAddExtensions(o)),r.add(n.onRemoveExtensions(s)),r.add(n.onDidAddExtensions(l)),r.add(n.onDidRemoveExtensions(u)),await n.addExtensionsToProfile([[i,{isApplicationScoped:!0}]],e);const v=await n.scanProfileExtensions(e);t.deepStrictEqual(v.map(g=>({...g,location:g.location.toJSON(),metadata:g.metadata})),[{identifier:i.identifier,location:i.location.toJSON(),version:i.manifest.version,metadata:{isApplicationScoped:!0}}]),t.ok(o.notCalled),t.ok(s.notCalled),t.ok(l.notCalled),t.ok(u.notCalled)}),test("add extension with different version and metadata",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json"),i=f("pub.a",c(p,"pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=f("pub.a",c(p,"pub.a-2.0.0"),void 0,{version:"2.0.0"}),s=x.stub(),l=x.stub(),u=x.stub(),v=x.stub();r.add(n.onAddExtensions(s)),r.add(n.onRemoveExtensions(l)),r.add(n.onDidAddExtensions(u)),r.add(n.onDidRemoveExtensions(v)),await n.addExtensionsToProfile([[o,{isApplicationScoped:!0}]],e);const g=await n.scanProfileExtensions(e);t.deepStrictEqual(g.map(b=>({...b,location:b.location.toJSON(),metadata:b.metadata})),[{identifier:o.identifier,location:o.location.toJSON(),version:o.manifest.version,metadata:{isApplicationScoped:!0}}]),t.ok(s.calledOnce),t.deepStrictEqual(s.args[0][0].profileLocation.toString(),e.toString()),t.deepStrictEqual(s.args[0][0].extensions.length,1),t.deepStrictEqual(s.args[0][0].extensions[0].identifier,o.identifier),t.deepStrictEqual(s.args[0][0].extensions[0].version,o.manifest.version),t.deepStrictEqual(s.args[0][0].extensions[0].location.toString(),o.location.toString()),t.ok(l.calledOnce),t.deepStrictEqual(l.args[0][0].profileLocation.toString(),e.toString()),t.deepStrictEqual(l.args[0][0].extensions.length,1),t.deepStrictEqual(l.args[0][0].extensions[0].identifier,i.identifier),t.deepStrictEqual(l.args[0][0].extensions[0].version,i.manifest.version),t.deepStrictEqual(l.args[0][0].extensions[0].location.toString(),i.location.toString()),t.ok(u.calledOnce),t.deepStrictEqual(s.args[0][0].profileLocation.toString(),e.toString()),t.deepStrictEqual(s.args[0][0].extensions.length,1),t.deepStrictEqual(s.args[0][0].extensions[0].identifier,o.identifier),t.deepStrictEqual(s.args[0][0].extensions[0].version,o.manifest.version),t.deepStrictEqual(s.args[0][0].extensions[0].location.toString(),o.location.toString()),t.ok(v.calledOnce),t.deepStrictEqual(l.args[0][0].profileLocation.toString(),e.toString()),t.deepStrictEqual(l.args[0][0].extensions.length,1),t.deepStrictEqual(l.args[0][0].extensions[0].identifier,i.identifier),t.deepStrictEqual(l.args[0][0].extensions[0].version,i.manifest.version),t.deepStrictEqual(l.args[0][0].extensions[0].location.toString(),i.location.toString())}),test("add extension with same id and version located in the different folder",async()=>{const n=r.add(d.createInstance(E,a)),e=c(a,"extensions.json");let i=f("pub.a",c(p,"foo","pub.a-1.0.0"));await n.addExtensionsToProfile([[i,void 0]],e);const o=x.stub(),s=x.stub(),l=x.stub(),u=x.stub();r.add(n.onAddExtensions(o)),r.add(n.onRemoveExtensions(s)),r.add(n.onDidAddExtensions(l)),r.add(n.onDidRemoveExtensions(u)),i=f("pub.a",c(p,"pub.a-1.0.0")),await n.addExtensionsToProfile([[i,void 0]],e);const v=await n.scanProfileExtensions(e);t.deepStrictEqual(v.map(g=>({...g,location:g.location.toJSON()})),[{identifier:i.identifier,location:i.location.toJSON(),version:i.manifest.version,metadata:void 0}]),t.ok(o.notCalled),t.ok(s.notCalled),t.ok(l.notCalled),t.ok(u.notCalled)});function f(n,e,i,o){return{identifier:{id:n},location:e,type:N.User,targetPlatform:h.DARWIN_X64,isBuiltin:!1,manifest:{name:"name",publisher:"publisher",version:"1.0.0",engines:{vscode:"1.0.0"},...o},isValid:!0,validations:[],...i}}});
