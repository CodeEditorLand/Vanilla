{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/test/common/extensionManagement.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { EXTENSION_IDENTIFIER_PATTERN } from '../../common/extensionManagement.js';\nimport { ExtensionKey } from '../../common/extensionManagementUtil.js';\nimport { TargetPlatform } from '../../../extensions/common/extensions.js';\n\nsuite('Extension Identifier Pattern', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('extension identifier pattern', () => {\n\t\tconst regEx = new RegExp(EXTENSION_IDENTIFIER_PATTERN);\n\t\tassert.strictEqual(true, regEx.test('publisher.name'));\n\t\tassert.strictEqual(true, regEx.test('publiSher.name'));\n\t\tassert.strictEqual(true, regEx.test('publisher.Name'));\n\t\tassert.strictEqual(true, regEx.test('PUBLISHER.NAME'));\n\t\tassert.strictEqual(true, regEx.test('PUBLISHEr.NAMe'));\n\t\tassert.strictEqual(true, regEx.test('PUBLISHEr.N-AMe'));\n\t\tassert.strictEqual(true, regEx.test('PUB-LISHEr.NAMe'));\n\t\tassert.strictEqual(true, regEx.test('PUB-LISHEr.N-AMe'));\n\t\tassert.strictEqual(true, regEx.test('PUBLISH12Er90.N-A54Me123'));\n\t\tassert.strictEqual(true, regEx.test('111PUBLISH12Er90.N-1111A54Me123'));\n\t\tassert.strictEqual(false, regEx.test('publishername'));\n\t\tassert.strictEqual(false, regEx.test('-publisher.name'));\n\t\tassert.strictEqual(false, regEx.test('publisher.-name'));\n\t\tassert.strictEqual(false, regEx.test('-publisher.-name'));\n\t\tassert.strictEqual(false, regEx.test('publ_isher.name'));\n\t\tassert.strictEqual(false, regEx.test('publisher._name'));\n\t});\n\n\ttest('extension key', () => {\n\t\tassert.strictEqual(new ExtensionKey({ id: 'pub.extension-name' }, '1.0.1').toString(), 'pub.extension-name-1.0.1');\n\t\tassert.strictEqual(new ExtensionKey({ id: 'pub.extension-name' }, '1.0.1', TargetPlatform.UNDEFINED).toString(), 'pub.extension-name-1.0.1');\n\t\tassert.strictEqual(new ExtensionKey({ id: 'pub.extension-name' }, '1.0.1', TargetPlatform.WIN32_X64).toString(), `pub.extension-name-1.0.1-${TargetPlatform.WIN32_X64}`);\n\t});\n\n\ttest('extension key parsing', () => {\n\t\tassert.strictEqual(ExtensionKey.parse('pub.extension-name'), null);\n\t\tassert.strictEqual(ExtensionKey.parse('pub.extension-name@1.2.3'), null);\n\t\tassert.strictEqual(ExtensionKey.parse('pub.extension-name-1.0.1')?.toString(), 'pub.extension-name-1.0.1');\n\t\tassert.strictEqual(ExtensionKey.parse('pub.extension-name-1.0.1-win32-x64')?.toString(), 'pub.extension-name-1.0.1-win32-x64');\n\t});\n});\n"],
  "mappings": "AAIA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,oCAAoC;AAC7C,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAE/B,MAAM,gCAAgC,MAAM;AAE3C,0CAAwC;AAExC,OAAK,gCAAgC,MAAM;AAC1C,UAAM,QAAQ,IAAI,OAAO,4BAA4B;AACrD,WAAO,YAAY,MAAM,MAAM,KAAK,gBAAgB,CAAC;AACrD,WAAO,YAAY,MAAM,MAAM,KAAK,gBAAgB,CAAC;AACrD,WAAO,YAAY,MAAM,MAAM,KAAK,gBAAgB,CAAC;AACrD,WAAO,YAAY,MAAM,MAAM,KAAK,gBAAgB,CAAC;AACrD,WAAO,YAAY,MAAM,MAAM,KAAK,gBAAgB,CAAC;AACrD,WAAO,YAAY,MAAM,MAAM,KAAK,iBAAiB,CAAC;AACtD,WAAO,YAAY,MAAM,MAAM,KAAK,iBAAiB,CAAC;AACtD,WAAO,YAAY,MAAM,MAAM,KAAK,kBAAkB,CAAC;AACvD,WAAO,YAAY,MAAM,MAAM,KAAK,0BAA0B,CAAC;AAC/D,WAAO,YAAY,MAAM,MAAM,KAAK,iCAAiC,CAAC;AACtE,WAAO,YAAY,OAAO,MAAM,KAAK,eAAe,CAAC;AACrD,WAAO,YAAY,OAAO,MAAM,KAAK,iBAAiB,CAAC;AACvD,WAAO,YAAY,OAAO,MAAM,KAAK,iBAAiB,CAAC;AACvD,WAAO,YAAY,OAAO,MAAM,KAAK,kBAAkB,CAAC;AACxD,WAAO,YAAY,OAAO,MAAM,KAAK,iBAAiB,CAAC;AACvD,WAAO,YAAY,OAAO,MAAM,KAAK,iBAAiB,CAAC;AAAA,EACxD,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,WAAO,YAAY,IAAI,aAAa,EAAE,IAAI,qBAAqB,GAAG,OAAO,EAAE,SAAS,GAAG,0BAA0B;AACjH,WAAO,YAAY,IAAI,aAAa,EAAE,IAAI,qBAAqB,GAAG,SAAS,eAAe,SAAS,EAAE,SAAS,GAAG,0BAA0B;AAC3I,WAAO,YAAY,IAAI,aAAa,EAAE,IAAI,qBAAqB,GAAG,SAAS,eAAe,SAAS,EAAE,SAAS,GAAG,4BAA4B,eAAe,SAAS,EAAE;AAAA,EACxK,CAAC;AAED,OAAK,yBAAyB,MAAM;AACnC,WAAO,YAAY,aAAa,MAAM,oBAAoB,GAAG,IAAI;AACjE,WAAO,YAAY,aAAa,MAAM,0BAA0B,GAAG,IAAI;AACvE,WAAO,YAAY,aAAa,MAAM,0BAA0B,GAAG,SAAS,GAAG,0BAA0B;AACzG,WAAO,YAAY,aAAa,MAAM,oCAAoC,GAAG,SAAS,GAAG,oCAAoC;AAAA,EAC9H,CAAC;AACF,CAAC;",
  "names": []
}
