{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/test/common/extensionNls.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { deepClone } from '../../../../base/common/objects.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ILocalizedString } from '../../../action/common/action.js';\nimport { IConfigurationNode } from '../../../configuration/common/configurationRegistry.js';\nimport { localizeManifest } from '../../common/extensionNls.js';\nimport { IExtensionManifest } from '../../../extensions/common/extensions.js';\nimport { NullLogger } from '../../../log/common/log.js';\n\nconst manifest: IExtensionManifest = {\n\tname: 'test',\n\tpublisher: 'test',\n\tversion: '1.0.0',\n\tengines: {\n\t\tvscode: '*'\n\t},\n\tcontributes: {\n\t\tcommands: [\n\t\t\t{\n\t\t\t\tcommand: 'test.command',\n\t\t\t\ttitle: '%test.command.title%',\n\t\t\t\tcategory: '%test.command.category%'\n\t\t\t},\n\t\t],\n\t\tauthentication: [\n\t\t\t{\n\t\t\t\tid: 'test.authentication',\n\t\t\t\tlabel: '%test.authentication.label%',\n\t\t\t}\n\t\t],\n\t\tconfiguration: {\n\t\t\t// to ensure we test another \"title\" property\n\t\t\ttitle: '%test.configuration.title%',\n\t\t\tproperties: {\n\t\t\t\t'test.configuration': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: 'not important',\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nsuite('Localize Manifest', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\ttest('replaces template strings', function () {\n\t\tconst localizedManifest = localizeManifest(\n\t\t\tstore.add(new NullLogger()),\n\t\t\tdeepClone(manifest),\n\t\t\t{\n\t\t\t\t'test.command.title': 'Test Command',\n\t\t\t\t'test.command.category': 'Test Category',\n\t\t\t\t'test.authentication.label': 'Test Authentication',\n\t\t\t\t'test.configuration.title': 'Test Configuration',\n\t\t\t}\n\t\t);\n\n\t\tassert.strictEqual(localizedManifest.contributes?.commands?.[0].title, 'Test Command');\n\t\tassert.strictEqual(localizedManifest.contributes?.commands?.[0].category, 'Test Category');\n\t\tassert.strictEqual(localizedManifest.contributes?.authentication?.[0].label, 'Test Authentication');\n\t\tassert.strictEqual((localizedManifest.contributes?.configuration as IConfigurationNode).title, 'Test Configuration');\n\t});\n\n\ttest('replaces template strings with fallback if not found in translations', function () {\n\t\tconst localizedManifest = localizeManifest(\n\t\t\tstore.add(new NullLogger()),\n\t\t\tdeepClone(manifest),\n\t\t\t{},\n\t\t\t{\n\t\t\t\t'test.command.title': 'Test Command',\n\t\t\t\t'test.command.category': 'Test Category',\n\t\t\t\t'test.authentication.label': 'Test Authentication',\n\t\t\t\t'test.configuration.title': 'Test Configuration',\n\t\t\t}\n\t\t);\n\n\t\tassert.strictEqual(localizedManifest.contributes?.commands?.[0].title, 'Test Command');\n\t\tassert.strictEqual(localizedManifest.contributes?.commands?.[0].category, 'Test Category');\n\t\tassert.strictEqual(localizedManifest.contributes?.authentication?.[0].label, 'Test Authentication');\n\t\tassert.strictEqual((localizedManifest.contributes?.configuration as IConfigurationNode).title, 'Test Configuration');\n\t});\n\n\ttest('replaces template strings - command title & categories become ILocalizedString', function () {\n\t\tconst localizedManifest = localizeManifest(\n\t\t\tstore.add(new NullLogger()),\n\t\t\tdeepClone(manifest),\n\t\t\t{\n\t\t\t\t'test.command.title': 'Befehl test',\n\t\t\t\t'test.command.category': 'Testkategorie',\n\t\t\t\t'test.authentication.label': 'Testauthentifizierung',\n\t\t\t\t'test.configuration.title': 'Testkonfiguration',\n\t\t\t},\n\t\t\t{\n\t\t\t\t'test.command.title': 'Test Command',\n\t\t\t\t'test.command.category': 'Test Category',\n\t\t\t\t'test.authentication.label': 'Test Authentication',\n\t\t\t\t'test.configuration.title': 'Test Configuration',\n\t\t\t}\n\t\t);\n\n\t\tconst title = localizedManifest.contributes?.commands?.[0].title as ILocalizedString;\n\t\tconst category = localizedManifest.contributes?.commands?.[0].category as ILocalizedString;\n\t\tassert.strictEqual(title.value, 'Befehl test');\n\t\tassert.strictEqual(title.original, 'Test Command');\n\t\tassert.strictEqual(category.value, 'Testkategorie');\n\t\tassert.strictEqual(category.original, 'Test Category');\n\n\t\t// Everything else stays as a string.\n\t\tassert.strictEqual(localizedManifest.contributes?.authentication?.[0].label, 'Testauthentifizierung');\n\t\tassert.strictEqual((localizedManifest.contributes?.configuration as IConfigurationNode).title, 'Testkonfiguration');\n\t});\n\n\ttest('replaces template strings - is best effort #164630', function () {\n\t\tconst manifestWithTypo: IExtensionManifest = {\n\t\t\tname: 'test',\n\t\t\tpublisher: 'test',\n\t\t\tversion: '1.0.0',\n\t\t\tengines: {\n\t\t\t\tvscode: '*'\n\t\t\t},\n\t\t\tcontributes: {\n\t\t\t\tauthentication: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'test.authentication',\n\t\t\t\t\t\t// This not existing in the bundle shouldn't cause an error.\n\t\t\t\t\t\tlabel: '%doesnotexist%',\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcommands: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcommand: 'test.command',\n\t\t\t\t\t\ttitle: '%test.command.title%',\n\t\t\t\t\t\tcategory: '%test.command.category%'\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}\n\t\t};\n\n\t\tconst localizedManifest = localizeManifest(\n\t\t\tstore.add(new NullLogger()),\n\t\t\tdeepClone(manifestWithTypo),\n\t\t\t{\n\t\t\t\t'test.command.title': 'Test Command',\n\t\t\t\t'test.command.category': 'Test Category'\n\t\t\t});\n\n\t\tassert.strictEqual(localizedManifest.contributes?.commands?.[0].title, 'Test Command');\n\t\tassert.strictEqual(localizedManifest.contributes?.commands?.[0].category, 'Test Category');\n\t\tassert.strictEqual(localizedManifest.contributes?.authentication?.[0].label, '%doesnotexist%');\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,iBAAiB;AAC1B,SAAS,+CAA+C;AACxD,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,kBAAkB;AAE3B,MAAM,WAA+B;AAAA,EACpC,MAAM;AAAA,EACN,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,IACR,QAAQ;AAAA,EACT;AAAA,EACA,aAAa;AAAA,IACZ,UAAU;AAAA,MACT;AAAA,QACC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IACA,gBAAgB;AAAA,MACf;AAAA,QACC,IAAI;AAAA,QACJ,OAAO;AAAA,MACR;AAAA,IACD;AAAA,IACA,eAAe;AAAA;AAAA,MAEd,OAAO;AAAA,MACP,YAAY;AAAA,QACX,sBAAsB;AAAA,UACrB,MAAM;AAAA,UACN,aAAa;AAAA,QACd;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,qBAAqB,MAAM;AAChC,QAAM,QAAQ,wCAAwC;AACtD,OAAK,6BAA6B,WAAY;AAC7C,UAAM,oBAAoB;AAAA,MACzB,MAAM,IAAI,IAAI,WAAW,CAAC;AAAA,MAC1B,UAAU,QAAQ;AAAA,MAClB;AAAA,QACC,sBAAsB;AAAA,QACtB,yBAAyB;AAAA,QACzB,6BAA6B;AAAA,QAC7B,4BAA4B;AAAA,MAC7B;AAAA,IACD;AAEA,WAAO,YAAY,kBAAkB,aAAa,WAAW,CAAC,EAAE,OAAO,cAAc;AACrF,WAAO,YAAY,kBAAkB,aAAa,WAAW,CAAC,EAAE,UAAU,eAAe;AACzF,WAAO,YAAY,kBAAkB,aAAa,iBAAiB,CAAC,EAAE,OAAO,qBAAqB;AAClG,WAAO,aAAa,kBAAkB,aAAa,eAAqC,OAAO,oBAAoB;AAAA,EACpH,CAAC;AAED,OAAK,wEAAwE,WAAY;AACxF,UAAM,oBAAoB;AAAA,MACzB,MAAM,IAAI,IAAI,WAAW,CAAC;AAAA,MAC1B,UAAU,QAAQ;AAAA,MAClB,CAAC;AAAA,MACD;AAAA,QACC,sBAAsB;AAAA,QACtB,yBAAyB;AAAA,QACzB,6BAA6B;AAAA,QAC7B,4BAA4B;AAAA,MAC7B;AAAA,IACD;AAEA,WAAO,YAAY,kBAAkB,aAAa,WAAW,CAAC,EAAE,OAAO,cAAc;AACrF,WAAO,YAAY,kBAAkB,aAAa,WAAW,CAAC,EAAE,UAAU,eAAe;AACzF,WAAO,YAAY,kBAAkB,aAAa,iBAAiB,CAAC,EAAE,OAAO,qBAAqB;AAClG,WAAO,aAAa,kBAAkB,aAAa,eAAqC,OAAO,oBAAoB;AAAA,EACpH,CAAC;AAED,OAAK,kFAAkF,WAAY;AAClG,UAAM,oBAAoB;AAAA,MACzB,MAAM,IAAI,IAAI,WAAW,CAAC;AAAA,MAC1B,UAAU,QAAQ;AAAA,MAClB;AAAA,QACC,sBAAsB;AAAA,QACtB,yBAAyB;AAAA,QACzB,6BAA6B;AAAA,QAC7B,4BAA4B;AAAA,MAC7B;AAAA,MACA;AAAA,QACC,sBAAsB;AAAA,QACtB,yBAAyB;AAAA,QACzB,6BAA6B;AAAA,QAC7B,4BAA4B;AAAA,MAC7B;AAAA,IACD;AAEA,UAAM,QAAQ,kBAAkB,aAAa,WAAW,CAAC,EAAE;AAC3D,UAAM,WAAW,kBAAkB,aAAa,WAAW,CAAC,EAAE;AAC9D,WAAO,YAAY,MAAM,OAAO,aAAa;AAC7C,WAAO,YAAY,MAAM,UAAU,cAAc;AACjD,WAAO,YAAY,SAAS,OAAO,eAAe;AAClD,WAAO,YAAY,SAAS,UAAU,eAAe;AAGrD,WAAO,YAAY,kBAAkB,aAAa,iBAAiB,CAAC,EAAE,OAAO,uBAAuB;AACpG,WAAO,aAAa,kBAAkB,aAAa,eAAqC,OAAO,mBAAmB;AAAA,EACnH,CAAC;AAED,OAAK,sDAAsD,WAAY;AACtE,UAAM,mBAAuC;AAAA,MAC5C,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,MACT,SAAS;AAAA,QACR,QAAQ;AAAA,MACT;AAAA,MACA,aAAa;AAAA,QACZ,gBAAgB;AAAA,UACf;AAAA,YACC,IAAI;AAAA;AAAA,YAEJ,OAAO;AAAA,UACR;AAAA,QACD;AAAA,QACA,UAAU;AAAA,UACT;AAAA,YACC,SAAS;AAAA,YACT,OAAO;AAAA,YACP,UAAU;AAAA,UACX;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,UAAM,oBAAoB;AAAA,MACzB,MAAM,IAAI,IAAI,WAAW,CAAC;AAAA,MAC1B,UAAU,gBAAgB;AAAA,MAC1B;AAAA,QACC,sBAAsB;AAAA,QACtB,yBAAyB;AAAA,MAC1B;AAAA,IAAC;AAEF,WAAO,YAAY,kBAAkB,aAAa,WAAW,CAAC,EAAE,OAAO,cAAc;AACrF,WAAO,YAAY,kBAAkB,aAAa,WAAW,CAAC,EAAE,UAAU,eAAe;AACzF,WAAO,YAAY,kBAAkB,aAAa,iBAAiB,CAAC,EAAE,OAAO,gBAAgB;AAAA,EAC9F,CAAC;AACF,CAAC;",
  "names": []
}
