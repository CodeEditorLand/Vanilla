{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/test/common/configRemotes.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { getDomainsOfRemotes, getRemotes } from '../../common/configRemotes.js';\n\nsuite('Config Remotes', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst allowedDomains = [\n\t\t'github.com',\n\t\t'github2.com',\n\t\t'github3.com',\n\t\t'example.com',\n\t\t'example2.com',\n\t\t'example3.com',\n\t\t'server.org',\n\t\t'server2.org',\n\t];\n\n\ttest('HTTPS remotes', function () {\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://github.com/microsoft/vscode.git'), allowedDomains), ['github.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://git.example.com/gitproject.git'), allowedDomains), ['example.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://username@github2.com/username/repository.git'), allowedDomains), ['github2.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://username:password@github3.com/username/repository.git'), allowedDomains), ['github3.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://username:password@example2.com:1234/username/repository.git'), allowedDomains), ['example2.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('https://example3.com:1234/username/repository.git'), allowedDomains), ['example3.com']);\n\t});\n\n\ttest('SSH remotes', function () {\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('ssh://user@git.server.org/project.git'), allowedDomains), ['server.org']);\n\t});\n\n\ttest('SCP-like remotes', function () {\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('git@github.com:microsoft/vscode.git'), allowedDomains), ['github.com']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('user@git.server.org:project.git'), allowedDomains), ['server.org']);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('git.server2.org:project.git'), allowedDomains), ['server2.org']);\n\t});\n\n\ttest('Local remotes', function () {\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('/opt/git/project.git'), allowedDomains), []);\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(remote('file:///opt/git/project.git'), allowedDomains), []);\n\t});\n\n\ttest('Multiple remotes', function () {\n\t\tconst config = ['https://github.com/microsoft/vscode.git', 'https://git.example.com/gitproject.git'].map(remote).join('');\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(config, allowedDomains).sort(), ['example.com', 'github.com']);\n\t});\n\n\ttest('Non allowed domains are anonymized', () => {\n\t\tconst config = ['https://github.com/microsoft/vscode.git', 'https://git.foobar.com/gitproject.git'].map(remote).join('');\n\t\tassert.deepStrictEqual(getDomainsOfRemotes(config, allowedDomains).sort(), ['aaaaaa.aaa', 'github.com']);\n\t});\n\n\ttest('HTTPS remotes to be hashed', function () {\n\t\tassert.deepStrictEqual(getRemotes(remote('https://github.com/microsoft/vscode.git')), ['github.com/microsoft/vscode.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://git.example.com/gitproject.git')), ['git.example.com/gitproject.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username@github2.com/username/repository.git')), ['github2.com/username/repository.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@github3.com/username/repository.git')), ['github3.com/username/repository.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@example2.com:1234/username/repository.git')), ['example2.com/username/repository.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://example3.com:1234/username/repository.git')), ['example3.com/username/repository.git']);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(getRemotes(remote('https://github.com/microsoft/vscode.git'), true), ['github.com/microsoft/vscode']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://git.example.com/gitproject.git'), true), ['git.example.com/gitproject']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username@github2.com/username/repository.git'), true), ['github2.com/username/repository']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@github3.com/username/repository.git'), true), ['github3.com/username/repository']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@example2.com:1234/username/repository.git'), true), ['example2.com/username/repository']);\n\t\tassert.deepStrictEqual(getRemotes(remote('https://example3.com:1234/username/repository.git'), true), ['example3.com/username/repository']);\n\n\t\t// Compare Striped .git with no .git\n\t\tassert.deepStrictEqual(getRemotes(remote('https://github.com/microsoft/vscode.git'), true), getRemotes(remote('https://github.com/microsoft/vscode')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://git.example.com/gitproject.git'), true), getRemotes(remote('https://git.example.com/gitproject')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username@github2.com/username/repository.git'), true), getRemotes(remote('https://username@github2.com/username/repository')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@github3.com/username/repository.git'), true), getRemotes(remote('https://username:password@github3.com/username/repository')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://username:password@example2.com:1234/username/repository.git'), true), getRemotes(remote('https://username:password@example2.com:1234/username/repository')));\n\t\tassert.deepStrictEqual(getRemotes(remote('https://example3.com:1234/username/repository.git'), true), getRemotes(remote('https://example3.com:1234/username/repository')));\n\t});\n\n\ttest('SSH remotes to be hashed', function () {\n\t\tassert.deepStrictEqual(getRemotes(remote('ssh://user@git.server.org/project.git')), ['git.server.org/project.git']);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(getRemotes(remote('ssh://user@git.server.org/project.git'), true), ['git.server.org/project']);\n\n\t\t// Compare Striped .git with no .git\n\t\tassert.deepStrictEqual(getRemotes(remote('ssh://user@git.server.org/project.git'), true), getRemotes(remote('ssh://user@git.server.org/project')));\n\t});\n\n\ttest('SCP-like remotes to be hashed', function () {\n\t\tassert.deepStrictEqual(getRemotes(remote('git@github.com:microsoft/vscode.git')), ['github.com/microsoft/vscode.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('user@git.server.org:project.git')), ['git.server.org/project.git']);\n\t\tassert.deepStrictEqual(getRemotes(remote('git.server2.org:project.git')), ['git.server2.org/project.git']);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(getRemotes(remote('git@github.com:microsoft/vscode.git'), true), ['github.com/microsoft/vscode']);\n\t\tassert.deepStrictEqual(getRemotes(remote('user@git.server.org:project.git'), true), ['git.server.org/project']);\n\t\tassert.deepStrictEqual(getRemotes(remote('git.server2.org:project.git'), true), ['git.server2.org/project']);\n\n\t\t// Compare Striped .git with no .git\n\t\tassert.deepStrictEqual(getRemotes(remote('git@github.com:microsoft/vscode.git'), true), getRemotes(remote('git@github.com:microsoft/vscode')));\n\t\tassert.deepStrictEqual(getRemotes(remote('user@git.server.org:project.git'), true), getRemotes(remote('user@git.server.org:project')));\n\t\tassert.deepStrictEqual(getRemotes(remote('git.server2.org:project.git'), true), getRemotes(remote('git.server2.org:project')));\n\t});\n\n\ttest('Local remotes to be hashed', function () {\n\t\tassert.deepStrictEqual(getRemotes(remote('/opt/git/project.git')), []);\n\t\tassert.deepStrictEqual(getRemotes(remote('file:///opt/git/project.git')), []);\n\t});\n\n\ttest('Multiple remotes to be hashed', function () {\n\t\tconst config = ['https://github.com/microsoft/vscode.git', 'https://git.example.com/gitproject.git'].map(remote).join(' ');\n\t\tassert.deepStrictEqual(getRemotes(config), ['github.com/microsoft/vscode.git', 'git.example.com/gitproject.git']);\n\n\t\t// Strip .git\n\t\tassert.deepStrictEqual(getRemotes(config, true), ['github.com/microsoft/vscode', 'git.example.com/gitproject']);\n\n\t\t// Compare Striped .git with no .git\n\t\tconst noDotGitConfig = ['https://github.com/microsoft/vscode', 'https://git.example.com/gitproject'].map(remote).join(' ');\n\t\tassert.deepStrictEqual(getRemotes(config, true), getRemotes(noDotGitConfig));\n\t});\n\n\tfunction remote(url: string): string {\n\t\treturn `[remote \"origin\"]\n\turl = ${url}\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n`;\n\t}\n\n});\n"],
  "mappings": "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",
  "names": []
}
