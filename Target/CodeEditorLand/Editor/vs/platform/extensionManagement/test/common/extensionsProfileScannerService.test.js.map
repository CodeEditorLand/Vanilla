{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/test/common/extensionsProfileScannerService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IEnvironmentService } from '../../../environment/common/environment.js';\nimport { AbstractExtensionsProfileScannerService, ProfileExtensionsEvent } from '../../common/extensionsProfileScannerService.js';\nimport { ExtensionType, IExtension, IExtensionManifest, TargetPlatform } from '../../../extensions/common/extensions.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { TestInstantiationService } from '../../../instantiation/test/common/instantiationServiceMock.js';\nimport { ILogService, NullLogService } from '../../../log/common/log.js';\nimport { ITelemetryService } from '../../../telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../telemetry/common/telemetryUtils.js';\nimport { IUriIdentityService } from '../../../uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../../uriIdentity/common/uriIdentityService.js';\nimport { IUserDataProfilesService, UserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\n\nclass TestObject extends AbstractExtensionsProfileScannerService { }\n\nsuite('ExtensionsProfileScannerService', () => {\n\n\tconst ROOT = URI.file('/ROOT');\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst extensionsLocation = joinPath(ROOT, 'extensions');\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(async () => {\n\t\tinstantiationService = disposables.add(new TestInstantiationService());\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\t\tinstantiationService.stub(ILogService, logService);\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tconst uriIdentityService = instantiationService.stub(IUriIdentityService, disposables.add(new UriIdentityService(fileService)));\n\t\tconst environmentService = instantiationService.stub(IEnvironmentService, { userRoamingDataHome: ROOT, cacheHome: joinPath(ROOT, 'cache'), });\n\t\tconst userDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tinstantiationService.stub(IUserDataProfilesService, userDataProfilesService);\n\t});\n\n\tsuiteTeardown(() => sinon.restore());\n\n\ttest('write extensions located in the same extensions folder', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined }]);\n\t});\n\n\ttest('write extensions located in the different folder', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(ROOT, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined }]);\n\t});\n\n\ttest('write extensions located in the same extensions folder has relative location ', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst actual = JSON.parse((await instantiationService.get(IFileService).readFile(extensionsManifest)).value.toString());\n\t\tassert.deepStrictEqual(actual, [{ identifier: extension.identifier, location: extension.location.toJSON(), relativeLocation: 'pub.a-1.0.0', version: extension.manifest.version }]);\n\t});\n\n\ttest('write extensions located in different extensions folder does not has relative location ', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(ROOT, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst actual = JSON.parse((await instantiationService.get(IFileService).readFile(extensionsManifest)).value.toString());\n\t\tassert.deepStrictEqual(actual, [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version }]);\n\t});\n\n\ttest('extension in old format is read and migrated', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocation: extension.location.toJSON(),\n\t\t\tversion: extension.manifest.version,\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined }]);\n\n\t\tconst manifestContent = JSON.parse((await instantiationService.get(IFileService).readFile(extensionsManifest)).value.toString());\n\t\tassert.deepStrictEqual(manifestContent, [{ identifier: extension.identifier, location: extension.location.toJSON(), relativeLocation: 'pub.a-1.0.0', version: extension.manifest.version }]);\n\t});\n\n\ttest('extension in old format is not migrated if not exists in same location', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(ROOT, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocation: extension.location.toJSON(),\n\t\t\tversion: extension.manifest.version,\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined }]);\n\n\t\tconst manifestContent = JSON.parse((await instantiationService.get(IFileService).readFile(extensionsManifest)).value.toString());\n\t\tassert.deepStrictEqual(manifestContent, [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version }]);\n\t});\n\n\ttest('extension in old format is read and migrated during write', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocation: extension.location.toJSON(),\n\t\t\tversion: extension.manifest.version,\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\t\tconst extension2 = aExtension('pub.b', joinPath(extensionsLocation, 'pub.b-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension2, undefined]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [\n\t\t\t{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined },\n\t\t\t{ identifier: extension2.identifier, location: extension2.location.toJSON(), version: extension2.manifest.version, metadata: undefined }\n\t\t]);\n\n\t\tconst manifestContent = JSON.parse((await instantiationService.get(IFileService).readFile(extensionsManifest)).value.toString());\n\t\tassert.deepStrictEqual(manifestContent, [\n\t\t\t{ identifier: extension.identifier, location: extension.location.toJSON(), relativeLocation: 'pub.a-1.0.0', version: extension.manifest.version },\n\t\t\t{ identifier: extension2.identifier, location: extension2.location.toJSON(), relativeLocation: 'pub.b-1.0.0', version: extension2.manifest.version }\n\t\t]);\n\t});\n\n\ttest('extensions in old format and new format is read and migrated', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tconst extension2 = aExtension('pub.b', joinPath(extensionsLocation, 'pub.b-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocation: extension.location.toJSON(),\n\t\t\tversion: extension.manifest.version,\n\t\t}, {\n\t\t\tidentifier: extension2.identifier,\n\t\t\tlocation: extension2.location.toJSON(),\n\t\t\trelativeLocation: 'pub.b-1.0.0',\n\t\t\tversion: extension2.manifest.version,\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [\n\t\t\t{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined },\n\t\t\t{ identifier: extension2.identifier, location: extension2.location.toJSON(), version: extension2.manifest.version, metadata: undefined }\n\t\t]);\n\n\t\tconst manifestContent = JSON.parse((await instantiationService.get(IFileService).readFile(extensionsManifest)).value.toString());\n\t\tassert.deepStrictEqual(manifestContent, [\n\t\t\t{ identifier: extension.identifier, location: extension.location.toJSON(), relativeLocation: 'pub.a-1.0.0', version: extension.manifest.version },\n\t\t\t{ identifier: extension2.identifier, location: extension2.location.toJSON(), relativeLocation: 'pub.b-1.0.0', version: extension2.manifest.version }\n\t\t]);\n\t});\n\n\ttest('throws error if extension has invalid relativePath', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocation: extension.location.toJSON(),\n\t\t\tversion: extension.manifest.version,\n\t\t\trelativePath: 2\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\ttry {\n\t\t\tawait testObject.scanProfileExtensions(extensionsManifest);\n\t\t\tassert.fail('Should throw error');\n\t\t} catch (error) { /*expected*/ }\n\t});\n\n\ttest('throws error if extension has no location', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tversion: extension.manifest.version,\n\t\t\trelativePath: 'pub.a-1.0.0'\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\ttry {\n\t\t\tawait testObject.scanProfileExtensions(extensionsManifest);\n\t\t\tassert.fail('Should throw error');\n\t\t} catch (error) { /*expected*/ }\n\t});\n\n\ttest('throws error if extension location is invalid', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocation: {},\n\t\t\tversion: extension.manifest.version,\n\t\t\trelativePath: 'pub.a-1.0.0'\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\ttry {\n\t\t\tawait testObject.scanProfileExtensions(extensionsManifest);\n\t\t\tassert.fail('Should throw error');\n\t\t} catch (error) { /*expected*/ }\n\t});\n\n\ttest('throws error if extension has no identifier', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tlocation: extension.location.toJSON(),\n\t\t\tversion: extension.manifest.version,\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\ttry {\n\t\t\tawait testObject.scanProfileExtensions(extensionsManifest);\n\t\t\tassert.fail('Should throw error');\n\t\t} catch (error) { /*expected*/ }\n\t});\n\n\ttest('throws error if extension identifier is invalid', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: 'pub.a',\n\t\t\tlocation: extension.location.toJSON(),\n\t\t\tversion: extension.manifest.version,\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\ttry {\n\t\t\tawait testObject.scanProfileExtensions(extensionsManifest);\n\t\t\tassert.fail('Should throw error');\n\t\t} catch (error) { /*expected*/ }\n\t});\n\n\ttest('throws error if extension has no version', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocation: extension.location.toJSON(),\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\ttry {\n\t\t\tawait testObject.scanProfileExtensions(extensionsManifest);\n\t\t\tassert.fail('Should throw error');\n\t\t} catch (error) { /*expected*/ }\n\t});\n\n\ttest('read extension when manifest is empty', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(''));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual, []);\n\t});\n\n\ttest('read extension when manifest has empty lines and spaces', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(`\n\n\n\t\t`));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual, []);\n\t});\n\n\ttest('read extension when the relative location is empty', async () => {\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(extensionsLocation, 'pub.a-1.0.0'));\n\t\tawait instantiationService.get(IFileService).writeFile(extensionsManifest, VSBuffer.fromString(JSON.stringify([{\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocation: extension.location.toJSON(),\n\t\t\trelativeLocation: '',\n\t\t\tversion: extension.manifest.version,\n\t\t}])));\n\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined }]);\n\n\t\tconst manifestContent = JSON.parse((await instantiationService.get(IFileService).readFile(extensionsManifest)).value.toString());\n\t\tassert.deepStrictEqual(manifestContent, [{ identifier: extension.identifier, location: extension.location.toJSON(), relativeLocation: 'pub.a-1.0.0', version: extension.manifest.version }]);\n\t});\n\n\ttest('add extension trigger events', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\t\tconst target1 = sinon.stub();\n\t\tconst target2 = sinon.stub();\n\t\tdisposables.add(testObject.onAddExtensions(target1));\n\t\tdisposables.add(testObject.onDidAddExtensions(target2));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(ROOT, 'foo', 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined }]);\n\n\t\tassert.ok(target1.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].identifier, extension.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].version, extension.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].location.toString(), extension.location.toString());\n\n\t\tassert.ok(target2.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].identifier, extension.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].version, extension.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].location.toString(), extension.location.toString());\n\t});\n\n\ttest('remove extension trigger events', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\t\tconst target1 = sinon.stub();\n\t\tconst target2 = sinon.stub();\n\t\tdisposables.add(testObject.onRemoveExtensions(target1));\n\t\tdisposables.add(testObject.onDidRemoveExtensions(target2));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\t\tconst extension = aExtension('pub.a', joinPath(ROOT, 'foo', 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\t\tawait testObject.removeExtensionFromProfile(extension, extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.length, 0);\n\n\t\tassert.ok(target1.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].identifier, extension.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].version, extension.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].location.toString(), extension.location.toString());\n\n\t\tassert.ok(target2.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].identifier, extension.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].version, extension.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].location.toString(), extension.location.toString());\n\t});\n\n\ttest('add extension with same id but different version', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\n\t\tconst extension1 = aExtension('pub.a', joinPath(ROOT, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension1, undefined]], extensionsManifest);\n\n\t\tconst target1 = sinon.stub();\n\t\tconst target2 = sinon.stub();\n\t\tconst target3 = sinon.stub();\n\t\tconst target4 = sinon.stub();\n\t\tdisposables.add(testObject.onAddExtensions(target1));\n\t\tdisposables.add(testObject.onRemoveExtensions(target2));\n\t\tdisposables.add(testObject.onDidAddExtensions(target3));\n\t\tdisposables.add(testObject.onDidRemoveExtensions(target4));\n\t\tconst extension2 = aExtension('pub.a', joinPath(ROOT, 'pub.a-2.0.0'), undefined, { version: '2.0.0' });\n\t\tawait testObject.addExtensionsToProfile([[extension2, undefined]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension2.identifier, location: extension2.location.toJSON(), version: extension2.manifest.version, metadata: undefined }]);\n\n\t\tassert.ok(target1.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].identifier, extension2.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].version, extension2.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].location.toString(), extension2.location.toString());\n\n\t\tassert.ok(target2.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].identifier, extension1.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].version, extension1.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].location.toString(), extension1.location.toString());\n\n\t\tassert.ok(target3.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].identifier, extension2.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].version, extension2.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].location.toString(), extension2.location.toString());\n\n\t\tassert.ok(target4.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].identifier, extension1.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].version, extension1.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].location.toString(), extension1.location.toString());\n\t});\n\n\ttest('add same extension', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\n\t\tconst extension = aExtension('pub.a', joinPath(ROOT, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst target1 = sinon.stub();\n\t\tconst target2 = sinon.stub();\n\t\tconst target3 = sinon.stub();\n\t\tconst target4 = sinon.stub();\n\t\tdisposables.add(testObject.onAddExtensions(target1));\n\t\tdisposables.add(testObject.onRemoveExtensions(target2));\n\t\tdisposables.add(testObject.onDidAddExtensions(target3));\n\t\tdisposables.add(testObject.onDidRemoveExtensions(target4));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined }]);\n\t\tassert.ok(target1.notCalled);\n\t\tassert.ok(target2.notCalled);\n\t\tassert.ok(target3.notCalled);\n\t\tassert.ok(target4.notCalled);\n\t});\n\n\ttest('add same extension with different metadata', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\n\t\tconst extension = aExtension('pub.a', joinPath(ROOT, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst target1 = sinon.stub();\n\t\tconst target2 = sinon.stub();\n\t\tconst target3 = sinon.stub();\n\t\tconst target4 = sinon.stub();\n\t\tdisposables.add(testObject.onAddExtensions(target1));\n\t\tdisposables.add(testObject.onRemoveExtensions(target2));\n\t\tdisposables.add(testObject.onDidAddExtensions(target3));\n\t\tdisposables.add(testObject.onDidRemoveExtensions(target4));\n\t\tawait testObject.addExtensionsToProfile([[extension, { isApplicationScoped: true }]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON(), metadata: a.metadata })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: { isApplicationScoped: true } }]);\n\t\tassert.ok(target1.notCalled);\n\t\tassert.ok(target2.notCalled);\n\t\tassert.ok(target3.notCalled);\n\t\tassert.ok(target4.notCalled);\n\t});\n\n\ttest('add extension with different version and metadata', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\n\t\tconst extension1 = aExtension('pub.a', joinPath(ROOT, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension1, undefined]], extensionsManifest);\n\t\tconst extension2 = aExtension('pub.a', joinPath(ROOT, 'pub.a-2.0.0'), undefined, { version: '2.0.0' });\n\n\t\tconst target1 = sinon.stub();\n\t\tconst target2 = sinon.stub();\n\t\tconst target3 = sinon.stub();\n\t\tconst target4 = sinon.stub();\n\t\tdisposables.add(testObject.onAddExtensions(target1));\n\t\tdisposables.add(testObject.onRemoveExtensions(target2));\n\t\tdisposables.add(testObject.onDidAddExtensions(target3));\n\t\tdisposables.add(testObject.onDidRemoveExtensions(target4));\n\t\tawait testObject.addExtensionsToProfile([[extension2, { isApplicationScoped: true }]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON(), metadata: a.metadata })), [{ identifier: extension2.identifier, location: extension2.location.toJSON(), version: extension2.manifest.version, metadata: { isApplicationScoped: true } }]);\n\n\t\tassert.ok(target1.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].identifier, extension2.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].version, extension2.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].location.toString(), extension2.location.toString());\n\n\t\tassert.ok(target2.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].identifier, extension1.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].version, extension1.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].location.toString(), extension1.location.toString());\n\n\t\tassert.ok(target3.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].identifier, extension2.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].version, extension2.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target1.args[0][0])).extensions[0].location.toString(), extension2.location.toString());\n\n\t\tassert.ok(target4.calledOnce);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).profileLocation.toString(), extensionsManifest.toString());\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions.length, 1);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].identifier, extension1.identifier);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].version, extension1.manifest.version);\n\t\tassert.deepStrictEqual((<ProfileExtensionsEvent>(target2.args[0][0])).extensions[0].location.toString(), extension1.location.toString());\n\t});\n\n\ttest('add extension with same id and version located in the different folder', async () => {\n\t\tconst testObject = disposables.add(instantiationService.createInstance(TestObject, extensionsLocation));\n\n\t\tconst extensionsManifest = joinPath(extensionsLocation, 'extensions.json');\n\n\t\tlet extension = aExtension('pub.a', joinPath(ROOT, 'foo', 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst target1 = sinon.stub();\n\t\tconst target2 = sinon.stub();\n\t\tconst target3 = sinon.stub();\n\t\tconst target4 = sinon.stub();\n\t\tdisposables.add(testObject.onAddExtensions(target1));\n\t\tdisposables.add(testObject.onRemoveExtensions(target2));\n\t\tdisposables.add(testObject.onDidAddExtensions(target3));\n\t\tdisposables.add(testObject.onDidRemoveExtensions(target4));\n\t\textension = aExtension('pub.a', joinPath(ROOT, 'pub.a-1.0.0'));\n\t\tawait testObject.addExtensionsToProfile([[extension, undefined]], extensionsManifest);\n\n\t\tconst actual = await testObject.scanProfileExtensions(extensionsManifest);\n\t\tassert.deepStrictEqual(actual.map(a => ({ ...a, location: a.location.toJSON() })), [{ identifier: extension.identifier, location: extension.location.toJSON(), version: extension.manifest.version, metadata: undefined }]);\n\t\tassert.ok(target1.notCalled);\n\t\tassert.ok(target2.notCalled);\n\t\tassert.ok(target3.notCalled);\n\t\tassert.ok(target4.notCalled);\n\t});\n\n\tfunction aExtension(id: string, location: URI, e?: Partial<IExtension>, manifest?: Partial<IExtensionManifest>): IExtension {\n\t\treturn {\n\t\t\tidentifier: { id },\n\t\t\tlocation,\n\t\t\ttype: ExtensionType.User,\n\t\t\ttargetPlatform: TargetPlatform.DARWIN_X64,\n\t\t\tisBuiltin: false,\n\t\t\tmanifest: {\n\t\t\t\tname: 'name',\n\t\t\t\tpublisher: 'publisher',\n\t\t\t\tversion: '1.0.0',\n\t\t\t\tengines: { vscode: '1.0.0' },\n\t\t\t\t...manifest,\n\t\t\t},\n\t\t\tisValid: true,\n\t\t\tvalidations: [],\n\t\t\t...e\n\t\t};\n\t}\n\n});\n"],
  "mappings": "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",
  "names": []
}
