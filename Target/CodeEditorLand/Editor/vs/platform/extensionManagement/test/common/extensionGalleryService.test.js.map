{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/test/common/extensionGalleryService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { isUUID } from '../../../../base/common/uuid.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { IConfigurationService } from '../../../configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../configuration/test/common/testConfigurationService.js';\nimport { IEnvironmentService } from '../../../environment/common/environment.js';\nimport { IRawGalleryExtensionVersion, sortExtensionVersions } from '../../common/extensionGalleryService.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport product from '../../../product/common/product.js';\nimport { IProductService } from '../../../product/common/productService.js';\nimport { resolveMarketplaceHeaders } from '../../../externalServices/common/marketplace.js';\nimport { InMemoryStorageService, IStorageService } from '../../../storage/common/storage.js';\nimport { TelemetryConfiguration, TELEMETRY_SETTING_ID } from '../../../telemetry/common/telemetry.js';\nimport { TargetPlatform } from '../../../extensions/common/extensions.js';\nimport { NullTelemetryService } from '../../../telemetry/common/telemetryUtils.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nclass EnvironmentServiceMock extends mock<IEnvironmentService>() {\n\toverride readonly serviceMachineIdResource: URI;\n\tconstructor(serviceMachineIdResource: URI) {\n\t\tsuper();\n\t\tthis.serviceMachineIdResource = serviceMachineIdResource;\n\t\tthis.isBuilt = true;\n\t}\n}\n\nsuite('Extension Gallery Service', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet fileService: IFileService, environmentService: IEnvironmentService, storageService: IStorageService, productService: IProductService, configurationService: IConfigurationService;\n\n\tsetup(() => {\n\t\tconst serviceMachineIdResource = joinPath(URI.file('tests').with({ scheme: 'vscode-tests' }), 'machineid');\n\t\tenvironmentService = new EnvironmentServiceMock(serviceMachineIdResource);\n\t\tfileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(serviceMachineIdResource.scheme, fileSystemProvider));\n\t\tstorageService = disposables.add(new InMemoryStorageService());\n\t\tconfigurationService = new TestConfigurationService({ [TELEMETRY_SETTING_ID]: TelemetryConfiguration.ON });\n\t\tconfigurationService.updateValue(TELEMETRY_SETTING_ID, TelemetryConfiguration.ON);\n\t\tproductService = { _serviceBrand: undefined, ...product, enableTelemetry: true };\n\t});\n\n\ttest('marketplace machine id', async () => {\n\t\tconst headers = await resolveMarketplaceHeaders(product.version, productService, environmentService, configurationService, fileService, storageService, NullTelemetryService);\n\t\tassert.ok(headers['X-Market-User-Id']);\n\t\tassert.ok(isUUID(headers['X-Market-User-Id']));\n\t\tconst headers2 = await resolveMarketplaceHeaders(product.version, productService, environmentService, configurationService, fileService, storageService, NullTelemetryService);\n\t\tassert.strictEqual(headers['X-Market-User-Id'], headers2['X-Market-User-Id']);\n\t});\n\n\ttest('sorting single extension version without target platform', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2')];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.DARWIN_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with preferred target platform', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.DARWIN_X64)];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.DARWIN_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with not compatible target platform', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.DARWIN_ARM64)];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting multiple extension versions without target platforms', async () => {\n\t\tconst actual = [aExtensionVersion('1.2.4'), aExtensionVersion('1.1.3'), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.1')];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_ARM64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting multiple extension versions with target platforms - 1', async () => {\n\t\tconst actual = [aExtensionVersion('1.2.4', TargetPlatform.DARWIN_ARM64), aExtensionVersion('1.2.4', TargetPlatform.WIN32_ARM64), aExtensionVersion('1.2.4', TargetPlatform.LINUX_ARM64), aExtensionVersion('1.1.3'), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.1')];\n\t\tconst expected = [actual[1], actual[0], actual[2], actual[3], actual[4], actual[5]];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_ARM64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting multiple extension versions with target platforms - 2', async () => {\n\t\tconst actual = [aExtensionVersion('1.2.4'), aExtensionVersion('1.2.3', TargetPlatform.DARWIN_ARM64), aExtensionVersion('1.2.3', TargetPlatform.WIN32_ARM64), aExtensionVersion('1.2.3', TargetPlatform.LINUX_ARM64), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.1')];\n\t\tconst expected = [actual[0], actual[3], actual[1], actual[2], actual[4], actual[5]];\n\t\tsortExtensionVersions(actual, TargetPlatform.LINUX_ARM64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting multiple extension versions with target platforms - 3', async () => {\n\t\tconst actual = [aExtensionVersion('1.2.4'), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.1'), aExtensionVersion('1.0.0', TargetPlatform.DARWIN_ARM64), aExtensionVersion('1.0.0', TargetPlatform.WIN32_ARM64)];\n\t\tconst expected = [actual[0], actual[1], actual[2], actual[4], actual[3]];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_ARM64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\tfunction aExtensionVersion(version: string, targetPlatform?: TargetPlatform): IRawGalleryExtensionVersion {\n\t\treturn { version, targetPlatform } as IRawGalleryExtensionVersion;\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
