{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionManagementUtil.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from \"../../../base/common/errors.js\";\nimport { isLinux, platform } from \"../../../base/common/platform.js\";\nimport { arch } from \"../../../base/common/process.js\";\nimport { compareIgnoreCase } from \"../../../base/common/strings.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport {\n\tExtensionIdentifier,\n\ttype IExtension,\n\tTargetPlatform,\n\tUNDEFINED_PUBLISHER,\n} from \"../../extensions/common/extensions.js\";\nimport type { IFileService } from \"../../files/common/files.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport { TelemetryTrustedValue } from \"../../telemetry/common/telemetryUtils.js\";\nimport {\n\ttype IExtensionIdentifier,\n\ttype IGalleryExtension,\n\ttype ILocalExtension,\n\tgetTargetPlatform,\n} from \"./extensionManagement.js\";\n\nexport function areSameExtensions(\n\ta: IExtensionIdentifier,\n\tb: IExtensionIdentifier,\n): boolean {\n\tif (a.uuid && b.uuid) {\n\t\treturn a.uuid === b.uuid;\n\t}\n\tif (a.id === b.id) {\n\t\treturn true;\n\t}\n\treturn compareIgnoreCase(a.id, b.id) === 0;\n}\n\nconst ExtensionKeyRegex = /^([^.]+\\..+)-(\\d+\\.\\d+\\.\\d+)(-(.+))?$/;\n\nexport class ExtensionKey {\n\tstatic create(extension: IExtension | IGalleryExtension): ExtensionKey {\n\t\tconst version = (extension as IExtension).manifest\n\t\t\t? (extension as IExtension).manifest.version\n\t\t\t: (extension as IGalleryExtension).version;\n\t\tconst targetPlatform = (extension as IExtension).manifest\n\t\t\t? (extension as IExtension).targetPlatform\n\t\t\t: (extension as IGalleryExtension).properties.targetPlatform;\n\t\treturn new ExtensionKey(extension.identifier, version, targetPlatform);\n\t}\n\n\tstatic parse(key: string): ExtensionKey | null {\n\t\tconst matches = ExtensionKeyRegex.exec(key);\n\t\treturn matches && matches[1] && matches[2]\n\t\t\t? new ExtensionKey(\n\t\t\t\t\t{ id: matches[1] },\n\t\t\t\t\tmatches[2],\n\t\t\t\t\t(matches[4] as TargetPlatform) || undefined,\n\t\t\t\t)\n\t\t\t: null;\n\t}\n\n\treadonly id: string;\n\n\tconstructor(\n\t\treadonly identifier: IExtensionIdentifier,\n\t\treadonly version: string,\n\t\treadonly targetPlatform: TargetPlatform = TargetPlatform.UNDEFINED,\n\t) {\n\t\tthis.id = identifier.id;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.id}-${this.version}${this.targetPlatform !== TargetPlatform.UNDEFINED ? `-${this.targetPlatform}` : \"\"}`;\n\t}\n\n\tequals(o: any): boolean {\n\t\tif (!(o instanceof ExtensionKey)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn (\n\t\t\tareSameExtensions(this, o) &&\n\t\t\tthis.version === o.version &&\n\t\t\tthis.targetPlatform === o.targetPlatform\n\t\t);\n\t}\n}\n\nconst EXTENSION_IDENTIFIER_WITH_VERSION_REGEX =\n\t/^([^.]+\\..+)@((prerelease)|(\\d+\\.\\d+\\.\\d+(-.*)?))$/;\nexport function getIdAndVersion(id: string): [string, string | undefined] {\n\tconst matches = EXTENSION_IDENTIFIER_WITH_VERSION_REGEX.exec(id);\n\tif (matches && matches[1]) {\n\t\treturn [adoptToGalleryExtensionId(matches[1]), matches[2]];\n\t}\n\treturn [adoptToGalleryExtensionId(id), undefined];\n}\n\nexport function getExtensionId(publisher: string, name: string): string {\n\treturn `${publisher}.${name}`;\n}\n\nexport function adoptToGalleryExtensionId(id: string): string {\n\treturn id.toLowerCase();\n}\n\nexport function getGalleryExtensionId(\n\tpublisher: string | undefined,\n\tname: string,\n): string {\n\treturn adoptToGalleryExtensionId(\n\t\tgetExtensionId(publisher ?? UNDEFINED_PUBLISHER, name),\n\t);\n}\n\nexport function groupByExtension<T>(\n\textensions: T[],\n\tgetExtensionIdentifier: (t: T) => IExtensionIdentifier,\n): T[][] {\n\tconst byExtension: T[][] = [];\n\tconst findGroup = (extension: T) => {\n\t\tfor (const group of byExtension) {\n\t\t\tif (\n\t\t\t\tgroup.some((e) =>\n\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\tgetExtensionIdentifier(e),\n\t\t\t\t\t\tgetExtensionIdentifier(extension),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\tfor (const extension of extensions) {\n\t\tconst group = findGroup(extension);\n\t\tif (group) {\n\t\t\tgroup.push(extension);\n\t\t} else {\n\t\t\tbyExtension.push([extension]);\n\t\t}\n\t}\n\treturn byExtension;\n}\n\nexport function getLocalExtensionTelemetryData(\n\textension: ILocalExtension,\n): any {\n\treturn {\n\t\tid: extension.identifier.id,\n\t\tname: extension.manifest.name,\n\t\tgalleryId: null,\n\t\tpublisherId: extension.publisherId,\n\t\tpublisherName: extension.manifest.publisher,\n\t\tpublisherDisplayName: extension.publisherDisplayName,\n\t\tdependencies:\n\t\t\textension.manifest.extensionDependencies &&\n\t\t\textension.manifest.extensionDependencies.length > 0,\n\t};\n}\n\n/* __GDPR__FRAGMENT__\n\t\"GalleryExtensionTelemetryData\" : {\n\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"name\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"version\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"galleryId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherDisplayName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"isPreReleaseVersion\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"dependencies\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\"isSigned\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"${include}\": [\n\t\t\t\"${GalleryExtensionTelemetryData2}\"\n\t\t]\n\t}\n*/\nexport function getGalleryExtensionTelemetryData(\n\textension: IGalleryExtension,\n): any {\n\treturn {\n\t\tid: new TelemetryTrustedValue(extension.identifier.id),\n\t\tname: new TelemetryTrustedValue(extension.name),\n\t\tversion: extension.version,\n\t\tgalleryId: extension.identifier.uuid,\n\t\tpublisherId: extension.publisherId,\n\t\tpublisherName: extension.publisher,\n\t\tpublisherDisplayName: extension.publisherDisplayName,\n\t\tisPreReleaseVersion: extension.properties.isPreReleaseVersion,\n\t\tdependencies: !!(\n\t\t\textension.properties.dependencies &&\n\t\t\textension.properties.dependencies.length > 0\n\t\t),\n\t\tisSigned: extension.isSigned,\n\t\t...extension.telemetryData,\n\t};\n}\n\nexport const BetterMergeId = new ExtensionIdentifier(\"pprice.better-merge\");\n\nexport function getExtensionDependencies(\n\tinstalledExtensions: ReadonlyArray<IExtension>,\n\textension: IExtension,\n): IExtension[] {\n\tconst dependencies: IExtension[] = [];\n\tconst extensions = extension.manifest.extensionDependencies?.slice(0) ?? [];\n\n\twhile (extensions.length) {\n\t\tconst id = extensions.shift();\n\n\t\tif (\n\t\t\tid &&\n\t\t\tdependencies.every((e) => !areSameExtensions(e.identifier, { id }))\n\t\t) {\n\t\t\tconst ext = installedExtensions.filter((e) =>\n\t\t\t\tareSameExtensions(e.identifier, { id }),\n\t\t\t);\n\t\t\tif (ext.length === 1) {\n\t\t\t\tdependencies.push(ext[0]);\n\t\t\t\textensions.push(\n\t\t\t\t\t...(ext[0].manifest.extensionDependencies?.slice(0) ?? []),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dependencies;\n}\n\nasync function isAlpineLinux(\n\tfileService: IFileService,\n\tlogService: ILogService,\n): Promise<boolean> {\n\tif (!isLinux) {\n\t\treturn false;\n\t}\n\tlet content: string | undefined;\n\ttry {\n\t\tconst fileContent = await fileService.readFile(\n\t\t\tURI.file(\"/etc/os-release\"),\n\t\t);\n\t\tcontent = fileContent.value.toString();\n\t} catch (error) {\n\t\ttry {\n\t\t\tconst fileContent = await fileService.readFile(\n\t\t\t\tURI.file(\"/usr/lib/os-release\"),\n\t\t\t);\n\t\t\tcontent = fileContent.value.toString();\n\t\t} catch (error) {\n\t\t\t/* Ignore */\n\t\t\tlogService.debug(\n\t\t\t\t`Error while getting the os-release file.`,\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t}\n\t}\n\treturn (\n\t\t!!content &&\n\t\t(content.match(/^ID=([^\\u001b\\r\\n]*)/m) || [])[1] === \"alpine\"\n\t);\n}\n\nexport async function computeTargetPlatform(\n\tfileService: IFileService,\n\tlogService: ILogService,\n): Promise<TargetPlatform> {\n\tconst alpineLinux = await isAlpineLinux(fileService, logService);\n\tconst targetPlatform = getTargetPlatform(\n\t\talpineLinux ? \"alpine\" : platform,\n\t\tarch,\n\t);\n\tlogService.debug(\"ComputeTargetPlatform:\", targetPlatform);\n\treturn targetPlatform;\n}\n"],
  "mappings": "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",
  "names": ["error"]
}
