{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionManagementUtil.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareIgnoreCase } from '../../../base/common/strings.js';\nimport { IExtensionIdentifier, IGalleryExtension, ILocalExtension, getTargetPlatform } from './extensionManagement.js';\nimport { ExtensionIdentifier, IExtension, TargetPlatform, UNDEFINED_PUBLISHER } from '../../extensions/common/extensions.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { isLinux, platform } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { getErrorMessage } from '../../../base/common/errors.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { arch } from '../../../base/common/process.js';\nimport { TelemetryTrustedValue } from '../../telemetry/common/telemetryUtils.js';\n\nexport function areSameExtensions(a: IExtensionIdentifier, b: IExtensionIdentifier): boolean {\n\tif (a.uuid && b.uuid) {\n\t\treturn a.uuid === b.uuid;\n\t}\n\tif (a.id === b.id) {\n\t\treturn true;\n\t}\n\treturn compareIgnoreCase(a.id, b.id) === 0;\n}\n\nconst ExtensionKeyRegex = /^([^.]+\\..+)-(\\d+\\.\\d+\\.\\d+)(-(.+))?$/;\n\nexport class ExtensionKey {\n\n\tstatic create(extension: IExtension | IGalleryExtension): ExtensionKey {\n\t\tconst version = (extension as IExtension).manifest ? (extension as IExtension).manifest.version : (extension as IGalleryExtension).version;\n\t\tconst targetPlatform = (extension as IExtension).manifest ? (extension as IExtension).targetPlatform : (extension as IGalleryExtension).properties.targetPlatform;\n\t\treturn new ExtensionKey(extension.identifier, version, targetPlatform);\n\t}\n\n\tstatic parse(key: string): ExtensionKey | null {\n\t\tconst matches = ExtensionKeyRegex.exec(key);\n\t\treturn matches && matches[1] && matches[2] ? new ExtensionKey({ id: matches[1] }, matches[2], matches[4] as TargetPlatform || undefined) : null;\n\t}\n\n\treadonly id: string;\n\n\tconstructor(\n\t\treadonly identifier: IExtensionIdentifier,\n\t\treadonly version: string,\n\t\treadonly targetPlatform: TargetPlatform = TargetPlatform.UNDEFINED,\n\t) {\n\t\tthis.id = identifier.id;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.id}-${this.version}${this.targetPlatform !== TargetPlatform.UNDEFINED ? `-${this.targetPlatform}` : ''}`;\n\t}\n\n\tequals(o: any): boolean {\n\t\tif (!(o instanceof ExtensionKey)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn areSameExtensions(this, o) && this.version === o.version && this.targetPlatform === o.targetPlatform;\n\t}\n}\n\nconst EXTENSION_IDENTIFIER_WITH_VERSION_REGEX = /^([^.]+\\..+)@((prerelease)|(\\d+\\.\\d+\\.\\d+(-.*)?))$/;\nexport function getIdAndVersion(id: string): [string, string | undefined] {\n\tconst matches = EXTENSION_IDENTIFIER_WITH_VERSION_REGEX.exec(id);\n\tif (matches && matches[1]) {\n\t\treturn [adoptToGalleryExtensionId(matches[1]), matches[2]];\n\t}\n\treturn [adoptToGalleryExtensionId(id), undefined];\n}\n\nexport function getExtensionId(publisher: string, name: string): string {\n\treturn `${publisher}.${name}`;\n}\n\nexport function adoptToGalleryExtensionId(id: string): string {\n\treturn id.toLowerCase();\n}\n\nexport function getGalleryExtensionId(publisher: string | undefined, name: string): string {\n\treturn adoptToGalleryExtensionId(getExtensionId(publisher ?? UNDEFINED_PUBLISHER, name));\n}\n\nexport function groupByExtension<T>(extensions: T[], getExtensionIdentifier: (t: T) => IExtensionIdentifier): T[][] {\n\tconst byExtension: T[][] = [];\n\tconst findGroup = (extension: T) => {\n\t\tfor (const group of byExtension) {\n\t\t\tif (group.some(e => areSameExtensions(getExtensionIdentifier(e), getExtensionIdentifier(extension)))) {\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\tfor (const extension of extensions) {\n\t\tconst group = findGroup(extension);\n\t\tif (group) {\n\t\t\tgroup.push(extension);\n\t\t} else {\n\t\t\tbyExtension.push([extension]);\n\t\t}\n\t}\n\treturn byExtension;\n}\n\nexport function getLocalExtensionTelemetryData(extension: ILocalExtension): any {\n\treturn {\n\t\tid: extension.identifier.id,\n\t\tname: extension.manifest.name,\n\t\tgalleryId: null,\n\t\tpublisherId: extension.publisherId,\n\t\tpublisherName: extension.manifest.publisher,\n\t\tpublisherDisplayName: extension.publisherDisplayName,\n\t\tdependencies: extension.manifest.extensionDependencies && extension.manifest.extensionDependencies.length > 0\n\t};\n}\n\n\n/* __GDPR__FRAGMENT__\n\t\"GalleryExtensionTelemetryData\" : {\n\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"name\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"version\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"galleryId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"publisherDisplayName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"isPreReleaseVersion\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"dependencies\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\"isSigned\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"${include}\": [\n\t\t\t\"${GalleryExtensionTelemetryData2}\"\n\t\t]\n\t}\n*/\nexport function getGalleryExtensionTelemetryData(extension: IGalleryExtension): any {\n\treturn {\n\t\tid: new TelemetryTrustedValue(extension.identifier.id),\n\t\tname: new TelemetryTrustedValue(extension.name),\n\t\tversion: extension.version,\n\t\tgalleryId: extension.identifier.uuid,\n\t\tpublisherId: extension.publisherId,\n\t\tpublisherName: extension.publisher,\n\t\tpublisherDisplayName: extension.publisherDisplayName,\n\t\tisPreReleaseVersion: extension.properties.isPreReleaseVersion,\n\t\tdependencies: !!(extension.properties.dependencies && extension.properties.dependencies.length > 0),\n\t\tisSigned: extension.isSigned,\n\t\t...extension.telemetryData\n\t};\n}\n\nexport const BetterMergeId = new ExtensionIdentifier('pprice.better-merge');\n\nexport function getExtensionDependencies(installedExtensions: ReadonlyArray<IExtension>, extension: IExtension): IExtension[] {\n\tconst dependencies: IExtension[] = [];\n\tconst extensions = extension.manifest.extensionDependencies?.slice(0) ?? [];\n\n\twhile (extensions.length) {\n\t\tconst id = extensions.shift();\n\n\t\tif (id && dependencies.every(e => !areSameExtensions(e.identifier, { id }))) {\n\t\t\tconst ext = installedExtensions.filter(e => areSameExtensions(e.identifier, { id }));\n\t\t\tif (ext.length === 1) {\n\t\t\t\tdependencies.push(ext[0]);\n\t\t\t\textensions.push(...ext[0].manifest.extensionDependencies?.slice(0) ?? []);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dependencies;\n}\n\nasync function isAlpineLinux(fileService: IFileService, logService: ILogService): Promise<boolean> {\n\tif (!isLinux) {\n\t\treturn false;\n\t}\n\tlet content: string | undefined;\n\ttry {\n\t\tconst fileContent = await fileService.readFile(URI.file('/etc/os-release'));\n\t\tcontent = fileContent.value.toString();\n\t} catch (error) {\n\t\ttry {\n\t\t\tconst fileContent = await fileService.readFile(URI.file('/usr/lib/os-release'));\n\t\t\tcontent = fileContent.value.toString();\n\t\t} catch (error) {\n\t\t\t/* Ignore */\n\t\t\tlogService.debug(`Error while getting the os-release file.`, getErrorMessage(error));\n\t\t}\n\t}\n\treturn !!content && (content.match(/^ID=([^\\u001b\\r\\n]*)/m) || [])[1] === 'alpine';\n}\n\nexport async function computeTargetPlatform(fileService: IFileService, logService: ILogService): Promise<TargetPlatform> {\n\tconst alpineLinux = await isAlpineLinux(fileService, logService);\n\tconst targetPlatform = getTargetPlatform(alpineLinux ? 'alpine' : platform, arch);\n\tlogService.debug('ComputeTargetPlatform:', targetPlatform);\n\treturn targetPlatform;\n}\n"],
  "mappings": "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",
  "names": ["error"]
}
