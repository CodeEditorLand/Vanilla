{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionsScannerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../base/common/arrays.js\";\nimport { ThrottledDelayer } from \"../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { getErrorMessage } from \"../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\ttype ParseError,\n\tgetNodeType,\n\tparse,\n} from \"../../../base/common/json.js\";\nimport { getParseErrorMessage } from \"../../../base/common/jsonErrorMessages.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../base/common/marshalling.js\";\nimport { FileAccess, Schemas } from \"../../../base/common/network.js\";\nimport * as objects from \"../../../base/common/objects.js\";\nimport * as path from \"../../../base/common/path.js\";\nimport * as platform from \"../../../base/common/platform.js\";\nimport { basename, isEqual, joinPath } from \"../../../base/common/resources.js\";\nimport * as semver from \"../../../base/common/semver/semver.js\";\nimport Severity from \"../../../base/common/severity.js\";\nimport { isEmptyObject } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport { validateExtensionManifest } from \"../../extensions/common/extensionValidator.js\";\nimport {\n\tBUILTIN_MANIFEST_CACHE_FILE,\n\tExtensionIdentifier,\n\tExtensionIdentifierMap,\n\tExtensionType,\n\ttype IExtensionDescription,\n\ttype IExtensionIdentifier,\n\ttype IExtensionManifest,\n\ttype IRelaxedExtensionManifest,\n\tTargetPlatform,\n\tUNDEFINED_PUBLISHER,\n\tUSER_MANIFEST_CACHE_FILE,\n\tparseEnabledApiProposalNames,\n} from \"../../extensions/common/extensions.js\";\nimport {\n\tFileOperationResult,\n\tIFileService,\n\ttoFileOperationResult,\n} from \"../../files/common/files.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport {\n\ttype IUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../userDataProfile/common/userDataProfile.js\";\nimport type { IProductVersion, Metadata } from \"./extensionManagement.js\";\nimport {\n\tExtensionKey,\n\tareSameExtensions,\n\tcomputeTargetPlatform,\n\tgetExtensionId,\n\tgetGalleryExtensionId,\n} from \"./extensionManagementUtil.js\";\nimport { localizeManifest } from \"./extensionNls.js\";\nimport {\n\tExtensionsProfileScanningError,\n\tExtensionsProfileScanningErrorCode,\n\tIExtensionsProfileScannerService,\n\ttype IProfileExtensionsScanOptions,\n\ttype IScannedProfileExtension,\n} from \"./extensionsProfileScannerService.js\";\n\nexport type IScannedExtensionManifest = IRelaxedExtensionManifest & {\n\t__metadata?: Metadata;\n};\n\ninterface IRelaxedScannedExtension {\n\ttype: ExtensionType;\n\tisBuiltin: boolean;\n\tidentifier: IExtensionIdentifier;\n\tmanifest: IRelaxedExtensionManifest;\n\tlocation: URI;\n\ttargetPlatform: TargetPlatform;\n\tpublisherDisplayName?: string;\n\tmetadata: Metadata | undefined;\n\tisValid: boolean;\n\tvalidations: readonly [Severity, string][];\n}\n\nexport type IScannedExtension = Readonly<IRelaxedScannedExtension> & {\n\tmanifest: IExtensionManifest;\n};\n\nexport interface Translations {\n\t[id: string]: string;\n}\n\nexport namespace Translations {\n\texport function equals(a: Translations, b: Translations): boolean {\n\t\tif (a === b) {\n\t\t\treturn true;\n\t\t}\n\t\tconst aKeys = Object.keys(a);\n\t\tconst bKeys: Set<string> = new Set<string>();\n\t\tfor (const key of Object.keys(b)) {\n\t\t\tbKeys.add(key);\n\t\t}\n\t\tif (aKeys.length !== bKeys.size) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of aKeys) {\n\t\t\tif (a[key] !== b[key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbKeys.delete(key);\n\t\t}\n\t\treturn bKeys.size === 0;\n\t}\n}\n\ninterface MessageBag {\n\t[key: string]: string | { message: string; comment: string[] };\n}\n\ninterface TranslationBundle {\n\tcontents: {\n\t\tpackage: MessageBag;\n\t};\n}\n\ninterface LocalizedMessages {\n\tvalues: MessageBag | undefined;\n\tdefault: URI | null;\n}\n\ninterface IBuiltInExtensionControl {\n\t[name: string]: \"marketplace\" | \"disabled\" | string;\n}\n\nexport type ScanOptions = {\n\treadonly profileLocation?: URI;\n\treadonly includeInvalid?: boolean;\n\treadonly includeAllVersions?: boolean;\n\treadonly includeUninstalled?: boolean;\n\treadonly checkControlFile?: boolean;\n\treadonly language?: string;\n\treadonly useCache?: boolean;\n\treadonly productVersion?: IProductVersion;\n};\n\nexport const IExtensionsScannerService =\n\tcreateDecorator<IExtensionsScannerService>(\"IExtensionsScannerService\");\nexport interface IExtensionsScannerService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly systemExtensionsLocation: URI;\n\treadonly userExtensionsLocation: URI;\n\treadonly onDidChangeCache: Event<ExtensionType>;\n\n\tgetTargetPlatform(): Promise<TargetPlatform>;\n\n\tscanAllExtensions(\n\t\tsystemScanOptions: ScanOptions,\n\t\tuserScanOptions: ScanOptions,\n\t\tincludeExtensionsUnderDev: boolean,\n\t): Promise<IScannedExtension[]>;\n\tscanSystemExtensions(\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension[]>;\n\tscanUserExtensions(scanOptions: ScanOptions): Promise<IScannedExtension[]>;\n\tscanExtensionsUnderDevelopment(\n\t\tscanOptions: ScanOptions,\n\t\texistingExtensions: IScannedExtension[],\n\t): Promise<IScannedExtension[]>;\n\tscanExistingExtension(\n\t\textensionLocation: URI,\n\t\textensionType: ExtensionType,\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension | null>;\n\tscanOneOrMultipleExtensions(\n\t\textensionLocation: URI,\n\t\textensionType: ExtensionType,\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension[]>;\n\tscanMultipleExtensions(\n\t\textensionLocations: URI[],\n\t\textensionType: ExtensionType,\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension[]>;\n\n\tscanMetadata(extensionLocation: URI): Promise<Metadata | undefined>;\n\tupdateMetadata(\n\t\textensionLocation: URI,\n\t\tmetadata: Partial<Metadata>,\n\t): Promise<void>;\n\tinitializeDefaultProfileExtensions(): Promise<void>;\n}\n\nexport abstract class AbstractExtensionsScannerService\n\textends Disposable\n\timplements IExtensionsScannerService\n{\n\treadonly _serviceBrand: undefined;\n\n\tprotected abstract getTranslations(language: string): Promise<Translations>;\n\n\tprivate readonly _onDidChangeCache = this._register(\n\t\tnew Emitter<ExtensionType>(),\n\t);\n\treadonly onDidChangeCache = this._onDidChangeCache.event;\n\n\tprivate readonly obsoleteFile = joinPath(\n\t\tthis.userExtensionsLocation,\n\t\t\".obsolete\",\n\t);\n\tprivate readonly systemExtensionsCachedScanner = this._register(\n\t\tthis.instantiationService.createInstance(\n\t\t\tCachedExtensionsScanner,\n\t\t\tthis.currentProfile,\n\t\t\tthis.obsoleteFile,\n\t\t),\n\t);\n\tprivate readonly userExtensionsCachedScanner = this._register(\n\t\tthis.instantiationService.createInstance(\n\t\t\tCachedExtensionsScanner,\n\t\t\tthis.currentProfile,\n\t\t\tthis.obsoleteFile,\n\t\t),\n\t);\n\tprivate readonly extensionsScanner = this._register(\n\t\tthis.instantiationService.createInstance(\n\t\t\tExtensionsScanner,\n\t\t\tthis.obsoleteFile,\n\t\t),\n\t);\n\n\tconstructor(\n\t\treadonly systemExtensionsLocation: URI,\n\t\treadonly userExtensionsLocation: URI,\n\t\tprivate readonly extensionsControlLocation: URI,\n\t\tprivate readonly currentProfile: IUserDataProfile,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IExtensionsProfileScannerService protected readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.systemExtensionsCachedScanner.onDidChangeCache(() => this._onDidChangeCache.fire(ExtensionType.System)));\n\t\tthis._register(this.userExtensionsCachedScanner.onDidChangeCache(() => this._onDidChangeCache.fire(ExtensionType.User)));\n\t}\n\n\tprivate _targetPlatformPromise: Promise<TargetPlatform> | undefined;\n\tgetTargetPlatform(): Promise<TargetPlatform> {\n\t\tif (!this._targetPlatformPromise) {\n\t\t\tthis._targetPlatformPromise = computeTargetPlatform(\n\t\t\t\tthis.fileService,\n\t\t\t\tthis.logService,\n\t\t\t);\n\t\t}\n\t\treturn this._targetPlatformPromise;\n\t}\n\n\tasync scanAllExtensions(\n\t\tsystemScanOptions: ScanOptions,\n\t\tuserScanOptions: ScanOptions,\n\t\tincludeExtensionsUnderDev: boolean,\n\t): Promise<IScannedExtension[]> {\n\t\tconst [system, user] = await Promise.all([\n\t\t\tthis.scanSystemExtensions(systemScanOptions),\n\t\t\tthis.scanUserExtensions(userScanOptions),\n\t\t]);\n\t\tconst development = includeExtensionsUnderDev\n\t\t\t? await this.scanExtensionsUnderDevelopment(systemScanOptions, [\n\t\t\t\t\t...system,\n\t\t\t\t\t...user,\n\t\t\t\t])\n\t\t\t: [];\n\t\treturn this.dedupExtensions(\n\t\t\tsystem,\n\t\t\tuser,\n\t\t\tdevelopment,\n\t\t\tawait this.getTargetPlatform(),\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tasync scanSystemExtensions(\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tconst promises: Promise<IRelaxedScannedExtension[]>[] = [];\n\t\tpromises.push(\n\t\t\tthis.scanDefaultSystemExtensions(\n\t\t\t\t!!scanOptions.useCache,\n\t\t\t\tscanOptions.language,\n\t\t\t),\n\t\t);\n\t\tpromises.push(\n\t\t\tthis.scanDevSystemExtensions(\n\t\t\t\tscanOptions.language,\n\t\t\t\t!!scanOptions.checkControlFile,\n\t\t\t),\n\t\t);\n\t\tconst [defaultSystemExtensions, devSystemExtensions] =\n\t\t\tawait Promise.all(promises);\n\t\treturn this.applyScanOptions(\n\t\t\t[...defaultSystemExtensions, ...devSystemExtensions],\n\t\t\tExtensionType.System,\n\t\t\tscanOptions,\n\t\t\tfalse,\n\t\t);\n\t}\n\n\tasync scanUserExtensions(\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tconst location =\n\t\t\tscanOptions.profileLocation ?? this.userExtensionsLocation;\n\t\tthis.logService.trace(\"Started scanning user extensions\", location);\n\t\tconst profileScanOptions: IProfileExtensionsScanOptions | undefined =\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\tscanOptions.profileLocation,\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t)\n\t\t\t\t? { bailOutWhenFileNotFound: true }\n\t\t\t\t: undefined;\n\t\tconst extensionsScannerInput = await this.createExtensionScannerInput(\n\t\t\tlocation,\n\t\t\t!!scanOptions.profileLocation,\n\t\t\tExtensionType.User,\n\t\t\t!scanOptions.includeUninstalled,\n\t\t\tscanOptions.language,\n\t\t\ttrue,\n\t\t\tprofileScanOptions,\n\t\t\tscanOptions.productVersion ?? this.getProductVersion(),\n\t\t);\n\t\tconst extensionsScanner =\n\t\t\tscanOptions.useCache &&\n\t\t\t!extensionsScannerInput.devMode &&\n\t\t\textensionsScannerInput.excludeObsolete\n\t\t\t\t? this.userExtensionsCachedScanner\n\t\t\t\t: this.extensionsScanner;\n\t\tlet extensions: IRelaxedScannedExtension[];\n\t\ttry {\n\t\t\textensions = await extensionsScanner.scanExtensions(\n\t\t\t\textensionsScannerInput,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror instanceof ExtensionsProfileScanningError &&\n\t\t\t\terror.code ===\n\t\t\t\t\tExtensionsProfileScanningErrorCode.ERROR_PROFILE_NOT_FOUND\n\t\t\t) {\n\t\t\t\tawait this.doInitializeDefaultProfileExtensions();\n\t\t\t\textensions = await extensionsScanner.scanExtensions(\n\t\t\t\t\textensionsScannerInput,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\textensions = await this.applyScanOptions(\n\t\t\textensions,\n\t\t\tExtensionType.User,\n\t\t\tscanOptions,\n\t\t\ttrue,\n\t\t);\n\t\tthis.logService.trace(\"Scanned user extensions:\", extensions.length);\n\t\treturn extensions;\n\t}\n\n\tasync scanExtensionsUnderDevelopment(\n\t\tscanOptions: ScanOptions,\n\t\texistingExtensions: IScannedExtension[],\n\t): Promise<IScannedExtension[]> {\n\t\tif (\n\t\t\tthis.environmentService.isExtensionDevelopment &&\n\t\t\tthis.environmentService.extensionDevelopmentLocationURI\n\t\t) {\n\t\t\tconst extensions = (\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tthis.environmentService.extensionDevelopmentLocationURI\n\t\t\t\t\t\t.filter((extLoc) => extLoc.scheme === Schemas.file)\n\t\t\t\t\t\t.map(async (extensionDevelopmentLocationURI) => {\n\t\t\t\t\t\t\tconst input =\n\t\t\t\t\t\t\t\tawait this.createExtensionScannerInput(\n\t\t\t\t\t\t\t\t\textensionDevelopmentLocationURI,\n\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\tExtensionType.User,\n\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\tscanOptions.language,\n\t\t\t\t\t\t\t\t\tfalse /* do not validate */,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tscanOptions.productVersion ??\n\t\t\t\t\t\t\t\t\t\tthis.getProductVersion(),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst extensions =\n\t\t\t\t\t\t\t\tawait this.extensionsScanner.scanOneOrMultipleExtensions(\n\t\t\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn extensions.map((extension) => {\n\t\t\t\t\t\t\t\t// Override the extension type from the existing extensions\n\t\t\t\t\t\t\t\textension.type =\n\t\t\t\t\t\t\t\t\texistingExtensions.find((e) =>\n\t\t\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\t\t\te.identifier,\n\t\t\t\t\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t)?.type ?? extension.type;\n\t\t\t\t\t\t\t\t// Validate the extension\n\t\t\t\t\t\t\t\treturn this.extensionsScanner.validate(\n\t\t\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t).flat();\n\t\t\treturn this.applyScanOptions(\n\t\t\t\textensions,\n\t\t\t\t\"development\",\n\t\t\t\tscanOptions,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\t\treturn [];\n\t}\n\n\tasync scanExistingExtension(\n\t\textensionLocation: URI,\n\t\textensionType: ExtensionType,\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension | null> {\n\t\tconst extensionsScannerInput = await this.createExtensionScannerInput(\n\t\t\textensionLocation,\n\t\t\tfalse,\n\t\t\textensionType,\n\t\t\ttrue,\n\t\t\tscanOptions.language,\n\t\t\ttrue,\n\t\t\tundefined,\n\t\t\tscanOptions.productVersion ?? this.getProductVersion(),\n\t\t);\n\t\tconst extension = await this.extensionsScanner.scanExtension(\n\t\t\textensionsScannerInput,\n\t\t);\n\t\tif (!extension) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!scanOptions.includeInvalid && !extension.isValid) {\n\t\t\treturn null;\n\t\t}\n\t\treturn extension;\n\t}\n\n\tasync scanOneOrMultipleExtensions(\n\t\textensionLocation: URI,\n\t\textensionType: ExtensionType,\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tconst extensionsScannerInput = await this.createExtensionScannerInput(\n\t\t\textensionLocation,\n\t\t\tfalse,\n\t\t\textensionType,\n\t\t\ttrue,\n\t\t\tscanOptions.language,\n\t\t\ttrue,\n\t\t\tundefined,\n\t\t\tscanOptions.productVersion ?? this.getProductVersion(),\n\t\t);\n\t\tconst extensions =\n\t\t\tawait this.extensionsScanner.scanOneOrMultipleExtensions(\n\t\t\t\textensionsScannerInput,\n\t\t\t);\n\t\treturn this.applyScanOptions(\n\t\t\textensions,\n\t\t\textensionType,\n\t\t\tscanOptions,\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tasync scanMultipleExtensions(\n\t\textensionLocations: URI[],\n\t\textensionType: ExtensionType,\n\t\tscanOptions: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tconst extensions: IRelaxedScannedExtension[] = [];\n\t\tawait Promise.all(\n\t\t\textensionLocations.map(async (extensionLocation) => {\n\t\t\t\tconst scannedExtensions =\n\t\t\t\t\tawait this.scanOneOrMultipleExtensions(\n\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\textensionType,\n\t\t\t\t\t\tscanOptions,\n\t\t\t\t\t);\n\t\t\t\textensions.push(...scannedExtensions);\n\t\t\t}),\n\t\t);\n\t\treturn this.applyScanOptions(\n\t\t\textensions,\n\t\t\textensionType,\n\t\t\tscanOptions,\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tasync scanMetadata(extensionLocation: URI): Promise<Metadata | undefined> {\n\t\tconst manifestLocation = joinPath(extensionLocation, \"package.json\");\n\t\tconst content = (\n\t\t\tawait this.fileService.readFile(manifestLocation)\n\t\t).value.toString();\n\t\tconst manifest: IScannedExtensionManifest = JSON.parse(content);\n\t\treturn manifest.__metadata;\n\t}\n\n\tasync updateMetadata(\n\t\textensionLocation: URI,\n\t\tmetaData: Partial<Metadata>,\n\t): Promise<void> {\n\t\tconst manifestLocation = joinPath(extensionLocation, \"package.json\");\n\t\tconst content = (\n\t\t\tawait this.fileService.readFile(manifestLocation)\n\t\t).value.toString();\n\t\tconst manifest: IScannedExtensionManifest = JSON.parse(content);\n\n\t\t// unset if false\n\t\tif (metaData.isMachineScoped === false) {\n\t\t\tdelete metaData.isMachineScoped;\n\t\t}\n\t\tif (metaData.isBuiltin === false) {\n\t\t\tdelete metaData.isBuiltin;\n\t\t}\n\t\tmanifest.__metadata = { ...manifest.__metadata, ...metaData };\n\n\t\tawait this.fileService.writeFile(\n\t\t\tjoinPath(extensionLocation, \"package.json\"),\n\t\t\tVSBuffer.fromString(JSON.stringify(manifest, null, \"\\t\")),\n\t\t);\n\t}\n\n\tasync initializeDefaultProfileExtensions(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.extensionsProfileScannerService.scanProfileExtensions(\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t\t{ bailOutWhenFileNotFound: true },\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror instanceof ExtensionsProfileScanningError &&\n\t\t\t\terror.code ===\n\t\t\t\t\tExtensionsProfileScanningErrorCode.ERROR_PROFILE_NOT_FOUND\n\t\t\t) {\n\t\t\t\tawait this.doInitializeDefaultProfileExtensions();\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate initializeDefaultProfileExtensionsPromise:\n\t\t| Promise<void>\n\t\t| undefined = undefined;\n\tprivate async doInitializeDefaultProfileExtensions(): Promise<void> {\n\t\tif (!this.initializeDefaultProfileExtensionsPromise) {\n\t\t\tthis.initializeDefaultProfileExtensionsPromise = (async () => {\n\t\t\t\ttry {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Started initializing default profile extensions in extensions installation folder.\",\n\t\t\t\t\t\tthis.userExtensionsLocation.toString(),\n\t\t\t\t\t);\n\t\t\t\t\tconst userExtensions = await this.scanUserExtensions({\n\t\t\t\t\t\tincludeInvalid: true,\n\t\t\t\t\t});\n\t\t\t\t\tif (userExtensions.length) {\n\t\t\t\t\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(\n\t\t\t\t\t\t\tuserExtensions.map((e) => [e, e.metadata]),\n\t\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.fileService.createFile(\n\t\t\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\t\t\t\tVSBuffer.fromString(JSON.stringify([])),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t\t\"Failed to create default profile extensions manifest in extensions installation folder.\",\n\t\t\t\t\t\t\t\t\tthis.userExtensionsLocation.toString(),\n\t\t\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Completed initializing default profile extensions in extensions installation folder.\",\n\t\t\t\t\t\tthis.userExtensionsLocation.toString(),\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t} finally {\n\t\t\t\t\tthis.initializeDefaultProfileExtensionsPromise = undefined;\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\treturn this.initializeDefaultProfileExtensionsPromise;\n\t}\n\n\tprivate async applyScanOptions(\n\t\textensions: IRelaxedScannedExtension[],\n\t\ttype: ExtensionType | \"development\",\n\t\tscanOptions: ScanOptions,\n\t\tpickLatest: boolean,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\tif (!scanOptions.includeAllVersions) {\n\t\t\textensions = this.dedupExtensions(\n\t\t\t\ttype === ExtensionType.System ? extensions : undefined,\n\t\t\t\ttype === ExtensionType.User ? extensions : undefined,\n\t\t\t\ttype === \"development\" ? extensions : undefined,\n\t\t\t\tawait this.getTargetPlatform(),\n\t\t\t\tpickLatest,\n\t\t\t);\n\t\t}\n\t\tif (!scanOptions.includeInvalid) {\n\t\t\textensions = extensions.filter((extension) => extension.isValid);\n\t\t}\n\t\treturn extensions.sort((a, b) => {\n\t\t\tconst aLastSegment = path.basename(a.location.fsPath);\n\t\t\tconst bLastSegment = path.basename(b.location.fsPath);\n\t\t\tif (aLastSegment < bLastSegment) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (aLastSegment > bLastSegment) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\tprivate dedupExtensions(\n\t\tsystem: IScannedExtension[] | undefined,\n\t\tuser: IScannedExtension[] | undefined,\n\t\tdevelopment: IScannedExtension[] | undefined,\n\t\ttargetPlatform: TargetPlatform,\n\t\tpickLatest: boolean,\n\t): IScannedExtension[] {\n\t\tconst pick = (\n\t\t\texisting: IScannedExtension,\n\t\t\textension: IScannedExtension,\n\t\t\tisDevelopment: boolean,\n\t\t): boolean => {\n\t\t\tif (existing.isValid && !extension.isValid) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (existing.isValid === extension.isValid) {\n\t\t\t\tif (\n\t\t\t\t\tpickLatest &&\n\t\t\t\t\tsemver.gt(\n\t\t\t\t\t\texisting.manifest.version,\n\t\t\t\t\t\textension.manifest.version,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.logService.debug(\n\t\t\t\t\t\t`Skipping extension ${extension.location.path} with lower version ${extension.manifest.version} in favour of ${existing.location.path} with version ${existing.manifest.version}`,\n\t\t\t\t\t);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tsemver.eq(\n\t\t\t\t\t\texisting.manifest.version,\n\t\t\t\t\t\textension.manifest.version,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (existing.type === ExtensionType.System) {\n\t\t\t\t\t\tthis.logService.debug(\n\t\t\t\t\t\t\t`Skipping extension ${extension.location.path} in favour of system extension ${existing.location.path} with same version`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (existing.targetPlatform === targetPlatform) {\n\t\t\t\t\t\tthis.logService.debug(\n\t\t\t\t\t\t\t`Skipping extension ${extension.location.path} from different target platform ${extension.targetPlatform}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isDevelopment) {\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Overwriting user extension ${existing.location.path} with ${extension.location.path}.`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.logService.debug(\n\t\t\t\t\t`Overwriting user extension ${existing.location.path} with ${extension.location.path}.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tconst result = new ExtensionIdentifierMap<IScannedExtension>();\n\t\tsystem?.forEach((extension) => {\n\t\t\tconst existing = result.get(extension.identifier.id);\n\t\t\tif (!existing || pick(existing, extension, false)) {\n\t\t\t\tresult.set(extension.identifier.id, extension);\n\t\t\t}\n\t\t});\n\t\tuser?.forEach((extension) => {\n\t\t\tconst existing = result.get(extension.identifier.id);\n\t\t\tif (\n\t\t\t\t!existing &&\n\t\t\t\tsystem &&\n\t\t\t\textension.type === ExtensionType.System\n\t\t\t) {\n\t\t\t\tthis.logService.debug(\n\t\t\t\t\t`Skipping obsolete system extension ${extension.location.path}.`,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!existing || pick(existing, extension, false)) {\n\t\t\t\tresult.set(extension.identifier.id, extension);\n\t\t\t}\n\t\t});\n\t\tdevelopment?.forEach((extension) => {\n\t\t\tconst existing = result.get(extension.identifier.id);\n\t\t\tif (!existing || pick(existing, extension, true)) {\n\t\t\t\tresult.set(extension.identifier.id, extension);\n\t\t\t}\n\t\t\tresult.set(extension.identifier.id, extension);\n\t\t});\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async scanDefaultSystemExtensions(\n\t\tuseCache: boolean,\n\t\tlanguage: string | undefined,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\tthis.logService.trace(\"Started scanning system extensions\");\n\t\tconst extensionsScannerInput = await this.createExtensionScannerInput(\n\t\t\tthis.systemExtensionsLocation,\n\t\t\tfalse,\n\t\t\tExtensionType.System,\n\t\t\ttrue,\n\t\t\tlanguage,\n\t\t\ttrue,\n\t\t\tundefined,\n\t\t\tthis.getProductVersion(),\n\t\t);\n\t\tconst extensionsScanner =\n\t\t\tuseCache && !extensionsScannerInput.devMode\n\t\t\t\t? this.systemExtensionsCachedScanner\n\t\t\t\t: this.extensionsScanner;\n\t\tconst result = await extensionsScanner.scanExtensions(\n\t\t\textensionsScannerInput,\n\t\t);\n\t\tthis.logService.trace(\"Scanned system extensions:\", result.length);\n\t\treturn result;\n\t}\n\n\tprivate async scanDevSystemExtensions(\n\t\tlanguage: string | undefined,\n\t\tcheckControlFile: boolean,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\tconst devSystemExtensionsList = this.environmentService.isBuilt\n\t\t\t? []\n\t\t\t: this.productService.builtInExtensions;\n\t\tif (!devSystemExtensionsList?.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis.logService.trace(\"Started scanning dev system extensions\");\n\t\tconst builtinExtensionControl = checkControlFile\n\t\t\t? await this.getBuiltInExtensionControl()\n\t\t\t: {};\n\t\tconst devSystemExtensionsLocations: URI[] = [];\n\t\tconst devSystemExtensionsLocation = URI.file(\n\t\t\tpath.normalize(\n\t\t\t\tpath.join(\n\t\t\t\t\tFileAccess.asFileUri(\"\").fsPath,\n\t\t\t\t\t\"..\",\n\t\t\t\t\t\".build\",\n\t\t\t\t\t\"builtInExtensions\",\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tfor (const extension of devSystemExtensionsList) {\n\t\t\tconst controlState =\n\t\t\t\tbuiltinExtensionControl[extension.name] || \"marketplace\";\n\t\t\tswitch (controlState) {\n\t\t\t\tcase \"disabled\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"marketplace\":\n\t\t\t\t\tdevSystemExtensionsLocations.push(\n\t\t\t\t\t\tjoinPath(devSystemExtensionsLocation, extension.name),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdevSystemExtensionsLocations.push(URI.file(controlState));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst result = await Promise.all(\n\t\t\tdevSystemExtensionsLocations.map(async (location) =>\n\t\t\t\tthis.extensionsScanner.scanExtension(\n\t\t\t\t\tawait this.createExtensionScannerInput(\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tExtensionType.System,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tthis.getProductVersion(),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis.logService.trace(\"Scanned dev system extensions:\", result.length);\n\t\treturn coalesce(result);\n\t}\n\n\tprivate async getBuiltInExtensionControl(): Promise<IBuiltInExtensionControl> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\tthis.extensionsControlLocation,\n\t\t\t);\n\t\t\treturn JSON.parse(content.value.toString());\n\t\t} catch (error) {\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tprivate async createExtensionScannerInput(\n\t\tlocation: URI,\n\t\tprofile: boolean,\n\t\ttype: ExtensionType,\n\t\texcludeObsolete: boolean,\n\t\tlanguage: string | undefined,\n\t\tvalidate: boolean,\n\t\tprofileScanOptions: IProfileExtensionsScanOptions | undefined,\n\t\tproductVersion: IProductVersion,\n\t): Promise<ExtensionScannerInput> {\n\t\tconst translations = await this.getTranslations(\n\t\t\tlanguage ?? platform.language,\n\t\t);\n\t\tconst mtime = await this.getMtime(location);\n\t\tconst applicationExtensionsLocation =\n\t\t\tprofile &&\n\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\tlocation,\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t)\n\t\t\t\t? this.userDataProfilesService.defaultProfile.extensionsResource\n\t\t\t\t: undefined;\n\t\tconst applicationExtensionsLocationMtime = applicationExtensionsLocation\n\t\t\t? await this.getMtime(applicationExtensionsLocation)\n\t\t\t: undefined;\n\t\treturn new ExtensionScannerInput(\n\t\t\tlocation,\n\t\t\tmtime,\n\t\t\tapplicationExtensionsLocation,\n\t\t\tapplicationExtensionsLocationMtime,\n\t\t\tprofile,\n\t\t\tprofileScanOptions,\n\t\t\ttype,\n\t\t\texcludeObsolete,\n\t\t\tvalidate,\n\t\t\tproductVersion.version,\n\t\t\tproductVersion.date,\n\t\t\tthis.productService.commit,\n\t\t\t!this.environmentService.isBuilt,\n\t\t\tlanguage,\n\t\t\ttranslations,\n\t\t);\n\t}\n\n\tprivate async getMtime(location: URI): Promise<number | undefined> {\n\t\ttry {\n\t\t\tconst stat = await this.fileService.stat(location);\n\t\t\tif (typeof stat.mtime === \"number\") {\n\t\t\t\treturn stat.mtime;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getProductVersion(): IProductVersion {\n\t\treturn {\n\t\t\tversion: this.productService.version,\n\t\t\tdate: this.productService.date,\n\t\t};\n\t}\n}\n\nexport class ExtensionScannerInput {\n\tconstructor(\n\t\tpublic readonly location: URI,\n\t\tpublic readonly mtime: number | undefined,\n\t\tpublic readonly applicationExtensionslocation: URI | undefined,\n\t\tpublic readonly applicationExtensionslocationMtime: number | undefined,\n\t\tpublic readonly profile: boolean,\n\t\tpublic readonly profileScanOptions:\n\t\t\t| IProfileExtensionsScanOptions\n\t\t\t| undefined,\n\t\tpublic readonly type: ExtensionType,\n\t\tpublic readonly excludeObsolete: boolean,\n\t\tpublic readonly validate: boolean,\n\t\tpublic readonly productVersion: string,\n\t\tpublic readonly productDate: string | undefined,\n\t\tpublic readonly productCommit: string | undefined,\n\t\tpublic readonly devMode: boolean,\n\t\tpublic readonly language: string | undefined,\n\t\tpublic readonly translations: Translations,\n\t) {\n\t\t// Keep empty!! (JSON.parse)\n\t}\n\n\tpublic static createNlsConfiguration(\n\t\tinput: ExtensionScannerInput,\n\t): NlsConfiguration {\n\t\treturn {\n\t\t\tlanguage: input.language,\n\t\t\tpseudo: input.language === \"pseudo\",\n\t\t\tdevMode: input.devMode,\n\t\t\ttranslations: input.translations,\n\t\t};\n\t}\n\n\tpublic static equals(\n\t\ta: ExtensionScannerInput,\n\t\tb: ExtensionScannerInput,\n\t): boolean {\n\t\treturn (\n\t\t\tisEqual(a.location, b.location) &&\n\t\t\ta.mtime === b.mtime &&\n\t\t\tisEqual(\n\t\t\t\ta.applicationExtensionslocation,\n\t\t\t\tb.applicationExtensionslocation,\n\t\t\t) &&\n\t\t\ta.applicationExtensionslocationMtime ===\n\t\t\t\tb.applicationExtensionslocationMtime &&\n\t\t\ta.profile === b.profile &&\n\t\t\tobjects.equals(a.profileScanOptions, b.profileScanOptions) &&\n\t\t\ta.type === b.type &&\n\t\t\ta.excludeObsolete === b.excludeObsolete &&\n\t\t\ta.validate === b.validate &&\n\t\t\ta.productVersion === b.productVersion &&\n\t\t\ta.productDate === b.productDate &&\n\t\t\ta.productCommit === b.productCommit &&\n\t\t\ta.devMode === b.devMode &&\n\t\t\ta.language === b.language &&\n\t\t\tTranslations.equals(a.translations, b.translations)\n\t\t);\n\t}\n}\n\ntype NlsConfiguration = {\n\tlanguage: string | undefined;\n\tpseudo: boolean;\n\tdevMode: boolean;\n\ttranslations: Translations;\n};\n\nclass ExtensionsScanner extends Disposable {\n\tprivate readonly extensionsEnabledWithApiProposalVersion: string[];\n\n\tconstructor(\n\t\tprivate readonly obsoleteFile: URI,\n\t\t@IExtensionsProfileScannerService protected readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ILogService protected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.extensionsEnabledWithApiProposalVersion = productService.extensionsEnabledWithApiProposalVersion?.map(id => id.toLowerCase()) ?? [];\n\t}\n\n\tasync scanExtensions(\n\t\tinput: ExtensionScannerInput,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\tconst extensions = input.profile\n\t\t\t? await this.scanExtensionsFromProfile(input)\n\t\t\t: await this.scanExtensionsFromLocation(input);\n\t\tlet obsolete: IStringDictionary<boolean> = {};\n\t\tif (input.excludeObsolete && input.type === ExtensionType.User) {\n\t\t\ttry {\n\t\t\t\tconst raw = (\n\t\t\t\t\tawait this.fileService.readFile(this.obsoleteFile)\n\t\t\t\t).value.toString();\n\t\t\t\tobsolete = JSON.parse(raw);\n\t\t\t} catch (error) {\n\t\t\t\t/* ignore */\n\t\t\t}\n\t\t}\n\t\treturn isEmptyObject(obsolete)\n\t\t\t? extensions\n\t\t\t: extensions.filter(\n\t\t\t\t\t(e) => !obsolete[ExtensionKey.create(e).toString()],\n\t\t\t\t);\n\t}\n\n\tprivate async scanExtensionsFromLocation(\n\t\tinput: ExtensionScannerInput,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\tconst stat = await this.fileService.resolve(input.location);\n\t\tif (!stat.children?.length) {\n\t\t\treturn [];\n\t\t}\n\t\tconst extensions = await Promise.all<IRelaxedScannedExtension | null>(\n\t\t\tstat.children.map(async (c) => {\n\t\t\t\tif (!c.isDirectory) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t// Do not consider user extension folder starting with `.`\n\t\t\t\tif (\n\t\t\t\t\tinput.type === ExtensionType.User &&\n\t\t\t\t\tbasename(c.resource).indexOf(\".\") === 0\n\t\t\t\t) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst extensionScannerInput = new ExtensionScannerInput(\n\t\t\t\t\tc.resource,\n\t\t\t\t\tinput.mtime,\n\t\t\t\t\tinput.applicationExtensionslocation,\n\t\t\t\t\tinput.applicationExtensionslocationMtime,\n\t\t\t\t\tinput.profile,\n\t\t\t\t\tinput.profileScanOptions,\n\t\t\t\t\tinput.type,\n\t\t\t\t\tinput.excludeObsolete,\n\t\t\t\t\tinput.validate,\n\t\t\t\t\tinput.productVersion,\n\t\t\t\t\tinput.productDate,\n\t\t\t\t\tinput.productCommit,\n\t\t\t\t\tinput.devMode,\n\t\t\t\t\tinput.language,\n\t\t\t\t\tinput.translations,\n\t\t\t\t);\n\t\t\t\treturn this.scanExtension(extensionScannerInput);\n\t\t\t}),\n\t\t);\n\t\treturn (\n\t\t\tcoalesce(extensions)\n\t\t\t\t// Sort: Make sure extensions are in the same order always. Helps cache invalidation even if the order changes.\n\t\t\t\t.sort((a, b) => (a.location.path < b.location.path ? -1 : 1))\n\t\t);\n\t}\n\n\tprivate async scanExtensionsFromProfile(\n\t\tinput: ExtensionScannerInput,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\tlet profileExtensions = await this.scanExtensionsFromProfileResource(\n\t\t\tinput.location,\n\t\t\t() => true,\n\t\t\tinput,\n\t\t);\n\t\tif (\n\t\t\tinput.applicationExtensionslocation &&\n\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\tinput.location,\n\t\t\t\tinput.applicationExtensionslocation,\n\t\t\t)\n\t\t) {\n\t\t\tprofileExtensions = profileExtensions.filter(\n\t\t\t\t(e) => !e.metadata?.isApplicationScoped,\n\t\t\t);\n\t\t\tconst applicationExtensions =\n\t\t\t\tawait this.scanExtensionsFromProfileResource(\n\t\t\t\t\tinput.applicationExtensionslocation,\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\t!!e.metadata?.isBuiltin ||\n\t\t\t\t\t\t!!e.metadata?.isApplicationScoped,\n\t\t\t\t\tinput,\n\t\t\t\t);\n\t\t\tprofileExtensions.push(...applicationExtensions);\n\t\t}\n\t\treturn profileExtensions;\n\t}\n\n\tprivate async scanExtensionsFromProfileResource(\n\t\tprofileResource: URI,\n\t\tfilter: (extensionInfo: IScannedProfileExtension) => boolean,\n\t\tinput: ExtensionScannerInput,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\tconst scannedProfileExtensions =\n\t\t\tawait this.extensionsProfileScannerService.scanProfileExtensions(\n\t\t\t\tprofileResource,\n\t\t\t\tinput.profileScanOptions,\n\t\t\t);\n\t\tif (!scannedProfileExtensions.length) {\n\t\t\treturn [];\n\t\t}\n\t\tconst extensions = await Promise.all<IRelaxedScannedExtension | null>(\n\t\t\tscannedProfileExtensions.map(async (extensionInfo) => {\n\t\t\t\tif (filter(extensionInfo)) {\n\t\t\t\t\tconst extensionScannerInput = new ExtensionScannerInput(\n\t\t\t\t\t\textensionInfo.location,\n\t\t\t\t\t\tinput.mtime,\n\t\t\t\t\t\tinput.applicationExtensionslocation,\n\t\t\t\t\t\tinput.applicationExtensionslocationMtime,\n\t\t\t\t\t\tinput.profile,\n\t\t\t\t\t\tinput.profileScanOptions,\n\t\t\t\t\t\tinput.type,\n\t\t\t\t\t\tinput.excludeObsolete,\n\t\t\t\t\t\tinput.validate,\n\t\t\t\t\t\tinput.productVersion,\n\t\t\t\t\t\tinput.productDate,\n\t\t\t\t\t\tinput.productCommit,\n\t\t\t\t\t\tinput.devMode,\n\t\t\t\t\t\tinput.language,\n\t\t\t\t\t\tinput.translations,\n\t\t\t\t\t);\n\t\t\t\t\treturn this.scanExtension(\n\t\t\t\t\t\textensionScannerInput,\n\t\t\t\t\t\textensionInfo.metadata,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}),\n\t\t);\n\t\treturn coalesce(extensions);\n\t}\n\n\tasync scanOneOrMultipleExtensions(\n\t\tinput: ExtensionScannerInput,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tawait this.fileService.exists(\n\t\t\t\t\tjoinPath(input.location, \"package.json\"),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tconst extension = await this.scanExtension(input);\n\t\t\t\treturn extension ? [extension] : [];\n\t\t\t} else {\n\t\t\t\treturn await this.scanExtensions(input);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\n\t\t\t\t`Error scanning extensions at ${input.location.path}:`,\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tasync scanExtension(\n\t\tinput: ExtensionScannerInput,\n\t\tmetadata?: Metadata,\n\t): Promise<IRelaxedScannedExtension | null> {\n\t\ttry {\n\t\t\tlet manifest = await this.scanExtensionManifest(input.location);\n\t\t\tif (manifest) {\n\t\t\t\t// allow publisher to be undefined to make the initial extension authoring experience smoother\n\t\t\t\tif (!manifest.publisher) {\n\t\t\t\t\tmanifest.publisher = UNDEFINED_PUBLISHER;\n\t\t\t\t}\n\t\t\t\tmetadata = metadata ?? manifest.__metadata;\n\t\t\t\tdelete manifest.__metadata;\n\t\t\t\tconst id = getGalleryExtensionId(\n\t\t\t\t\tmanifest.publisher,\n\t\t\t\t\tmanifest.name,\n\t\t\t\t);\n\t\t\t\tconst identifier = metadata?.id\n\t\t\t\t\t? { id, uuid: metadata.id }\n\t\t\t\t\t: { id };\n\t\t\t\tconst type = metadata?.isSystem\n\t\t\t\t\t? ExtensionType.System\n\t\t\t\t\t: input.type;\n\t\t\t\tconst isBuiltin =\n\t\t\t\t\ttype === ExtensionType.System || !!metadata?.isBuiltin;\n\t\t\t\tmanifest = await this.translateManifest(\n\t\t\t\t\tinput.location,\n\t\t\t\t\tmanifest,\n\t\t\t\t\tExtensionScannerInput.createNlsConfiguration(input),\n\t\t\t\t);\n\t\t\t\tlet extension: IRelaxedScannedExtension = {\n\t\t\t\t\ttype,\n\t\t\t\t\tidentifier,\n\t\t\t\t\tmanifest,\n\t\t\t\t\tlocation: input.location,\n\t\t\t\t\tisBuiltin,\n\t\t\t\t\ttargetPlatform:\n\t\t\t\t\t\tmetadata?.targetPlatform ?? TargetPlatform.UNDEFINED,\n\t\t\t\t\tpublisherDisplayName: metadata?.publisherDisplayName,\n\t\t\t\t\tmetadata,\n\t\t\t\t\tisValid: true,\n\t\t\t\t\tvalidations: [],\n\t\t\t\t};\n\t\t\t\tif (input.validate) {\n\t\t\t\t\textension = this.validate(extension, input);\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tmanifest.enabledApiProposals &&\n\t\t\t\t\t(!this.environmentService.isBuilt ||\n\t\t\t\t\t\tthis.extensionsEnabledWithApiProposalVersion.includes(\n\t\t\t\t\t\t\tid.toLowerCase(),\n\t\t\t\t\t\t))\n\t\t\t\t) {\n\t\t\t\t\tmanifest.originalEnabledApiProposals =\n\t\t\t\t\t\tmanifest.enabledApiProposals;\n\t\t\t\t\tmanifest.enabledApiProposals = parseEnabledApiProposalNames(\n\t\t\t\t\t\t[...manifest.enabledApiProposals],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (input.type !== ExtensionType.System) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tvalidate(\n\t\textension: IRelaxedScannedExtension,\n\t\tinput: ExtensionScannerInput,\n\t): IRelaxedScannedExtension {\n\t\tlet isValid = true;\n\t\tconst validateApiVersion =\n\t\t\tthis.environmentService.isBuilt &&\n\t\t\tthis.extensionsEnabledWithApiProposalVersion.includes(\n\t\t\t\textension.identifier.id.toLowerCase(),\n\t\t\t);\n\t\tconst validations = validateExtensionManifest(\n\t\t\tinput.productVersion,\n\t\t\tinput.productDate,\n\t\t\tinput.location,\n\t\t\textension.manifest,\n\t\t\textension.isBuiltin,\n\t\t\tvalidateApiVersion,\n\t\t);\n\t\tfor (const [severity, message] of validations) {\n\t\t\tif (severity === Severity.Error) {\n\t\t\t\tisValid = false;\n\t\t\t\tthis.logService.error(\n\t\t\t\t\tthis.formatMessage(input.location, message),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\textension.isValid = isValid;\n\t\textension.validations = validations;\n\t\treturn extension;\n\t}\n\n\tprivate async scanExtensionManifest(\n\t\textensionLocation: URI,\n\t): Promise<IScannedExtensionManifest | null> {\n\t\tconst manifestLocation = joinPath(extensionLocation, \"package.json\");\n\t\tlet content;\n\t\ttry {\n\t\t\tcontent = (\n\t\t\t\tawait this.fileService.readFile(manifestLocation)\n\t\t\t).value.toString();\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\tthis.formatMessage(\n\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"fileReadFail\",\n\t\t\t\t\t\t\t\"Cannot read file {0}: {1}.\",\n\t\t\t\t\t\t\tmanifestLocation.path,\n\t\t\t\t\t\t\terror.message,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tlet manifest: IScannedExtensionManifest;\n\t\ttry {\n\t\t\tmanifest = JSON.parse(content);\n\t\t} catch (err) {\n\t\t\t// invalid JSON, let's get good errors\n\t\t\tconst errors: ParseError[] = [];\n\t\t\tparse(content, errors);\n\t\t\tfor (const e of errors) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\tthis.formatMessage(\n\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"jsonParseFail\",\n\t\t\t\t\t\t\t\"Failed to parse {0}: [{1}, {2}] {3}.\",\n\t\t\t\t\t\t\tmanifestLocation.path,\n\t\t\t\t\t\t\te.offset,\n\t\t\t\t\t\t\te.length,\n\t\t\t\t\t\t\tgetParseErrorMessage(e.error),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tif (getNodeType(manifest) !== \"object\") {\n\t\t\tthis.logService.error(\n\t\t\t\tthis.formatMessage(\n\t\t\t\t\textensionLocation,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"jsonParseInvalidType\",\n\t\t\t\t\t\t\"Invalid manifest file {0}: Not a JSON object.\",\n\t\t\t\t\t\tmanifestLocation.path,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\t\treturn manifest;\n\t}\n\n\tprivate async translateManifest(\n\t\textensionLocation: URI,\n\t\textensionManifest: IExtensionManifest,\n\t\tnlsConfiguration: NlsConfiguration,\n\t): Promise<IExtensionManifest> {\n\t\tconst localizedMessages = await this.getLocalizedMessages(\n\t\t\textensionLocation,\n\t\t\textensionManifest,\n\t\t\tnlsConfiguration,\n\t\t);\n\t\tif (localizedMessages) {\n\t\t\ttry {\n\t\t\t\tconst errors: ParseError[] = [];\n\t\t\t\t// resolveOriginalMessageBundle returns null if localizedMessages.default === undefined;\n\t\t\t\tconst defaults = await this.resolveOriginalMessageBundle(\n\t\t\t\t\tlocalizedMessages.default,\n\t\t\t\t\terrors,\n\t\t\t\t);\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\terrors.forEach((error) => {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\tthis.formatMessage(\n\t\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\"jsonsParseReportErrors\",\n\t\t\t\t\t\t\t\t\t\"Failed to parse {0}: {1}.\",\n\t\t\t\t\t\t\t\t\tlocalizedMessages.default?.path,\n\t\t\t\t\t\t\t\t\tgetParseErrorMessage(error.error),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\treturn extensionManifest;\n\t\t\t\t} else if (getNodeType(localizedMessages) !== \"object\") {\n\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\tthis.formatMessage(\n\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"jsonInvalidFormat\",\n\t\t\t\t\t\t\t\t\"Invalid format {0}: JSON object expected.\",\n\t\t\t\t\t\t\t\tlocalizedMessages.default?.path,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn extensionManifest;\n\t\t\t\t}\n\t\t\t\tconst localized =\n\t\t\t\t\tlocalizedMessages.values || Object.create(null);\n\t\t\t\treturn localizeManifest(\n\t\t\t\t\tthis.logService,\n\t\t\t\t\textensionManifest,\n\t\t\t\t\tlocalized,\n\t\t\t\t\tdefaults,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t/*Ignore Error*/\n\t\t\t}\n\t\t}\n\t\treturn extensionManifest;\n\t}\n\n\tprivate async getLocalizedMessages(\n\t\textensionLocation: URI,\n\t\textensionManifest: IExtensionManifest,\n\t\tnlsConfiguration: NlsConfiguration,\n\t): Promise<LocalizedMessages | undefined> {\n\t\tconst defaultPackageNLS = joinPath(\n\t\t\textensionLocation,\n\t\t\t\"package.nls.json\",\n\t\t);\n\t\tconst reportErrors = (\n\t\t\tlocalized: URI | null,\n\t\t\terrors: ParseError[],\n\t\t): void => {\n\t\t\terrors.forEach((error) => {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\tthis.formatMessage(\n\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"jsonsParseReportErrors\",\n\t\t\t\t\t\t\t\"Failed to parse {0}: {1}.\",\n\t\t\t\t\t\t\tlocalized?.path,\n\t\t\t\t\t\t\tgetParseErrorMessage(error.error),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t};\n\t\tconst reportInvalidFormat = (localized: URI | null): void => {\n\t\t\tthis.logService.error(\n\t\t\t\tthis.formatMessage(\n\t\t\t\t\textensionLocation,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"jsonInvalidFormat\",\n\t\t\t\t\t\t\"Invalid format {0}: JSON object expected.\",\n\t\t\t\t\t\tlocalized?.path,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t};\n\n\t\tconst translationId = `${extensionManifest.publisher}.${extensionManifest.name}`;\n\t\tconst translationPath = nlsConfiguration.translations[translationId];\n\n\t\tif (translationPath) {\n\t\t\ttry {\n\t\t\t\tconst translationResource = URI.file(translationPath);\n\t\t\t\tconst content = (\n\t\t\t\t\tawait this.fileService.readFile(translationResource)\n\t\t\t\t).value.toString();\n\t\t\t\tconst errors: ParseError[] = [];\n\t\t\t\tconst translationBundle: TranslationBundle = parse(\n\t\t\t\t\tcontent,\n\t\t\t\t\terrors,\n\t\t\t\t);\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\treportErrors(translationResource, errors);\n\t\t\t\t\treturn { values: undefined, default: defaultPackageNLS };\n\t\t\t\t} else if (getNodeType(translationBundle) !== \"object\") {\n\t\t\t\t\treportInvalidFormat(translationResource);\n\t\t\t\t\treturn { values: undefined, default: defaultPackageNLS };\n\t\t\t\t} else {\n\t\t\t\t\tconst values = translationBundle.contents\n\t\t\t\t\t\t? translationBundle.contents.package\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\treturn { values: values, default: defaultPackageNLS };\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\treturn { values: undefined, default: defaultPackageNLS };\n\t\t\t}\n\t\t} else {\n\t\t\tconst exists = await this.fileService.exists(defaultPackageNLS);\n\t\t\tif (!exists) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tlet messageBundle;\n\t\t\ttry {\n\t\t\t\tmessageBundle = await this.findMessageBundles(\n\t\t\t\t\textensionLocation,\n\t\t\t\t\tnlsConfiguration,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (!messageBundle.localized) {\n\t\t\t\treturn { values: undefined, default: messageBundle.original };\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst messageBundleContent = (\n\t\t\t\t\tawait this.fileService.readFile(messageBundle.localized)\n\t\t\t\t).value.toString();\n\t\t\t\tconst errors: ParseError[] = [];\n\t\t\t\tconst messages: MessageBag = parse(\n\t\t\t\t\tmessageBundleContent,\n\t\t\t\t\terrors,\n\t\t\t\t);\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\treportErrors(messageBundle.localized, errors);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalues: undefined,\n\t\t\t\t\t\tdefault: messageBundle.original,\n\t\t\t\t\t};\n\t\t\t\t} else if (getNodeType(messages) !== \"object\") {\n\t\t\t\t\treportInvalidFormat(messageBundle.localized);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalues: undefined,\n\t\t\t\t\t\tdefault: messageBundle.original,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn { values: messages, default: messageBundle.original };\n\t\t\t} catch (error) {\n\t\t\t\treturn { values: undefined, default: messageBundle.original };\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Parses original message bundle, returns null if the original message bundle is null.\n\t */\n\tprivate async resolveOriginalMessageBundle(\n\t\toriginalMessageBundle: URI | null,\n\t\terrors: ParseError[],\n\t): Promise<{ [key: string]: string } | undefined> {\n\t\tif (originalMessageBundle) {\n\t\t\ttry {\n\t\t\t\tconst originalBundleContent = (\n\t\t\t\t\tawait this.fileService.readFile(originalMessageBundle)\n\t\t\t\t).value.toString();\n\t\t\t\treturn parse(originalBundleContent, errors);\n\t\t\t} catch (error) {\n\t\t\t\t/* Ignore Error */\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * Finds localized message bundle and the original (unlocalized) one.\n\t * If the localized file is not present, returns null for the original and marks original as localized.\n\t */\n\tprivate findMessageBundles(\n\t\textensionLocation: URI,\n\t\tnlsConfiguration: NlsConfiguration,\n\t): Promise<{ localized: URI; original: URI | null }> {\n\t\treturn new Promise<{ localized: URI; original: URI | null }>((c, e) => {\n\t\t\tconst loop = (locale: string): void => {\n\t\t\t\tconst toCheck = joinPath(\n\t\t\t\t\textensionLocation,\n\t\t\t\t\t`package.nls.${locale}.json`,\n\t\t\t\t);\n\t\t\t\tthis.fileService.exists(toCheck).then((exists) => {\n\t\t\t\t\tif (exists) {\n\t\t\t\t\t\tc({\n\t\t\t\t\t\t\tlocalized: toCheck,\n\t\t\t\t\t\t\toriginal: joinPath(\n\t\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\t\t\"package.nls.json\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tconst index = locale.lastIndexOf(\"-\");\n\t\t\t\t\tif (index === -1) {\n\t\t\t\t\t\tc({\n\t\t\t\t\t\t\tlocalized: joinPath(\n\t\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\t\t\"package.nls.json\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\toriginal: null,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocale = locale.substring(0, index);\n\t\t\t\t\t\tloop(locale);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t\tif (\n\t\t\t\tnlsConfiguration.devMode ||\n\t\t\t\tnlsConfiguration.pseudo ||\n\t\t\t\t!nlsConfiguration.language\n\t\t\t) {\n\t\t\t\treturn c({\n\t\t\t\t\tlocalized: joinPath(extensionLocation, \"package.nls.json\"),\n\t\t\t\t\toriginal: null,\n\t\t\t\t});\n\t\t\t}\n\t\t\tloop(nlsConfiguration.language);\n\t\t});\n\t}\n\n\tprivate formatMessage(extensionLocation: URI, message: string): string {\n\t\treturn `[${extensionLocation.path}]: ${message}`;\n\t}\n}\n\ninterface IExtensionCacheData {\n\tinput: ExtensionScannerInput;\n\tresult: IRelaxedScannedExtension[];\n}\n\nclass CachedExtensionsScanner extends ExtensionsScanner {\n\tprivate input: ExtensionScannerInput | undefined;\n\tprivate readonly cacheValidatorThrottler: ThrottledDelayer<void> =\n\t\tthis._register(new ThrottledDelayer(3000));\n\n\tprivate readonly _onDidChangeCache = this._register(new Emitter<void>());\n\treadonly onDidChangeCache = this._onDidChangeCache.event;\n\n\tconstructor(\n\t\tprivate readonly currentProfile: IUserDataProfile,\n\t\tobsoleteFile: URI,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IExtensionsProfileScannerService extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(obsoleteFile, extensionsProfileScannerService, uriIdentityService, fileService, productService, environmentService, logService);\n\t}\n\n\toverride async scanExtensions(\n\t\tinput: ExtensionScannerInput,\n\t): Promise<IRelaxedScannedExtension[]> {\n\t\tconst cacheFile = this.getCacheFile(input);\n\t\tconst cacheContents = await this.readExtensionCache(cacheFile);\n\t\tthis.input = input;\n\t\tif (\n\t\t\tcacheContents &&\n\t\t\tcacheContents.input &&\n\t\t\tExtensionScannerInput.equals(cacheContents.input, this.input)\n\t\t) {\n\t\t\tthis.logService.debug(\n\t\t\t\t\"Using cached extensions scan result\",\n\t\t\t\tinput.type === ExtensionType.System ? \"system\" : \"user\",\n\t\t\t\tinput.location.toString(),\n\t\t\t);\n\t\t\tthis.cacheValidatorThrottler.trigger(() => this.validateCache());\n\t\t\treturn cacheContents.result.map((extension) => {\n\t\t\t\t// revive URI object\n\t\t\t\textension.location = URI.revive(extension.location);\n\t\t\t\treturn extension;\n\t\t\t});\n\t\t}\n\t\tconst result = await super.scanExtensions(input);\n\t\tawait this.writeExtensionCache(cacheFile, { input, result });\n\t\treturn result;\n\t}\n\n\tprivate async readExtensionCache(\n\t\tcacheFile: URI,\n\t): Promise<IExtensionCacheData | null> {\n\t\ttry {\n\t\t\tconst cacheRawContents = await this.fileService.readFile(cacheFile);\n\t\t\tconst extensionCacheData: IExtensionCacheData = JSON.parse(\n\t\t\t\tcacheRawContents.value.toString(),\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tresult: extensionCacheData.result,\n\t\t\t\tinput: revive(extensionCacheData.input),\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis.logService.debug(\n\t\t\t\t\"Error while reading the extension cache file:\",\n\t\t\t\tcacheFile.path,\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async writeExtensionCache(\n\t\tcacheFile: URI,\n\t\tcacheContents: IExtensionCacheData,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.writeFile(\n\t\t\t\tcacheFile,\n\t\t\t\tVSBuffer.fromString(JSON.stringify(cacheContents)),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis.logService.debug(\n\t\t\t\t\"Error while writing the extension cache file:\",\n\t\t\t\tcacheFile.path,\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async validateCache(): Promise<void> {\n\t\tif (!this.input) {\n\t\t\t// Input has been unset by the time we get here, so skip validation\n\t\t\treturn;\n\t\t}\n\n\t\tconst cacheFile = this.getCacheFile(this.input);\n\t\tconst cacheContents = await this.readExtensionCache(cacheFile);\n\t\tif (!cacheContents) {\n\t\t\t// Cache has been deleted by someone else, which is perfectly fine...\n\t\t\treturn;\n\t\t}\n\n\t\tconst actual = cacheContents.result;\n\t\tconst expected = JSON.parse(\n\t\t\tJSON.stringify(await super.scanExtensions(this.input)),\n\t\t);\n\t\tif (objects.equals(expected, actual)) {\n\t\t\t// Cache is valid and running with it is perfectly fine...\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.logService.info(\"Invalidating Cache\", actual, expected);\n\t\t\t// Cache is invalid, delete it\n\t\t\tawait this.fileService.del(cacheFile);\n\t\t\tthis._onDidChangeCache.fire();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tprivate getCacheFile(input: ExtensionScannerInput): URI {\n\t\tconst profile = this.getProfile(input);\n\t\treturn this.uriIdentityService.extUri.joinPath(\n\t\t\tprofile.cacheHome,\n\t\t\tinput.type === ExtensionType.System\n\t\t\t\t? BUILTIN_MANIFEST_CACHE_FILE\n\t\t\t\t: USER_MANIFEST_CACHE_FILE,\n\t\t);\n\t}\n\n\tprivate getProfile(input: ExtensionScannerInput): IUserDataProfile {\n\t\tif (input.type === ExtensionType.System) {\n\t\t\treturn this.userDataProfilesService.defaultProfile;\n\t\t}\n\t\tif (!input.profile) {\n\t\t\treturn this.userDataProfilesService.defaultProfile;\n\t\t}\n\t\tif (\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\tinput.location,\n\t\t\t\tthis.currentProfile.extensionsResource,\n\t\t\t)\n\t\t) {\n\t\t\treturn this.currentProfile;\n\t\t}\n\t\treturn (\n\t\t\tthis.userDataProfilesService.profiles.find((p) =>\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tinput.location,\n\t\t\t\t\tp.extensionsResource,\n\t\t\t\t),\n\t\t\t) ?? this.currentProfile\n\t\t);\n\t}\n}\n\nexport function toExtensionDescription(\n\textension: IScannedExtension,\n\tisUnderDevelopment: boolean,\n): IExtensionDescription {\n\tconst id = getExtensionId(\n\t\textension.manifest.publisher,\n\t\textension.manifest.name,\n\t);\n\treturn {\n\t\tid,\n\t\tidentifier: new ExtensionIdentifier(id),\n\t\tisBuiltin: extension.type === ExtensionType.System,\n\t\tisUserBuiltin:\n\t\t\textension.type === ExtensionType.User && extension.isBuiltin,\n\t\tisUnderDevelopment,\n\t\textensionLocation: extension.location,\n\t\tuuid: extension.identifier.uuid,\n\t\ttargetPlatform: extension.targetPlatform,\n\t\tpublisherDisplayName: extension.publisherDisplayName,\n\t\t...extension.manifest,\n\t};\n}\n\nexport class NativeExtensionsScannerService\n\textends AbstractExtensionsScannerService\n\timplements IExtensionsScannerService\n{\n\tprivate readonly translationsPromise: Promise<Translations>;\n\n\tconstructor(\n\t\tsystemExtensionsLocation: URI,\n\t\tuserExtensionsLocation: URI,\n\t\tuserHome: URI,\n\t\tcurrentProfile: IUserDataProfile,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\textensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\tfileService: IFileService,\n\t\tlogService: ILogService,\n\t\tenvironmentService: IEnvironmentService,\n\t\tproductService: IProductService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tinstantiationService: IInstantiationService,\n\t) {\n\t\tsuper(\n\t\t\tsystemExtensionsLocation,\n\t\t\tuserExtensionsLocation,\n\t\t\tjoinPath(userHome, \".vscode-oss-dev\", \"extensions\", \"control.json\"),\n\t\t\tcurrentProfile,\n\t\t\tuserDataProfilesService,\n\t\t\textensionsProfileScannerService,\n\t\t\tfileService,\n\t\t\tlogService,\n\t\t\tenvironmentService,\n\t\t\tproductService,\n\t\t\turiIdentityService,\n\t\t\tinstantiationService,\n\t\t);\n\t\tthis.translationsPromise = (async () => {\n\t\t\tif (platform.translationsConfigFile) {\n\t\t\t\ttry {\n\t\t\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\t\t\tURI.file(platform.translationsConfigFile),\n\t\t\t\t\t);\n\t\t\t\t\treturn JSON.parse(content.value.toString());\n\t\t\t\t} catch (err) {\n\t\t\t\t\t/* Ignore Error */\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Object.create(null);\n\t\t})();\n\t}\n\n\tprotected getTranslations(language: string): Promise<Translations> {\n\t\treturn this.translationsPromise;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Translations", "extensions"]
}
