import{isObject as y,isString as L}from"../../../../vs/base/common/types.js";import{localize as h}from"../../../../vs/nls.js";import"../../../../vs/platform/action/common/action.js";import"../../../../vs/platform/extensions/common/extensions.js";import"../../../../vs/platform/log/common/log.js";function A(g,t,m,s){try{S(g,t,m,s)}catch(e){g.error(e?.message??e)}return t}function S(g,t,m,s){const e=(i,o,d)=>{const r=i[o];if(L(r)){const n=r,u=n.length;if(u>1&&n[0]==="%"&&n[u-1]==="%"){const f=n.substr(1,u-2);let a=m[f];a===void 0&&s&&(a=s[f]);const l=typeof a=="string"?a:a?.message,I=s?.[f],c=typeof I=="string"?I:I?.message;if(!l){c||g.warn(`[${t.name}]: ${h("missingNLSKey","Couldn't find message for key {0}.",f)}`);return}if(d&&(o==="title"||o==="category")&&c&&c!==l){const p={value:l,original:c};i[o]=p}else i[o]=l}}else if(y(r))for(const n in r)r.hasOwnProperty(n)&&(n==="commands"?e(r,n,!0):e(r,n,d));else if(Array.isArray(r))for(let n=0;n<r.length;n++)e(r,n,d)};for(const i in t)t.hasOwnProperty(i)&&e(t,i)}export{A as localizeManifest};
