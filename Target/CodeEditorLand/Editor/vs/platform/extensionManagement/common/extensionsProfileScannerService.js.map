{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionsProfileScannerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue } from '../../../base/common/async.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { Metadata, isIExtensionIdentifier } from './extensionManagement.js';\nimport { areSameExtensions } from './extensionManagementUtil.js';\nimport { IExtension, IExtensionIdentifier } from '../../extensions/common/extensions.js';\nimport { FileOperationResult, IFileService, toFileOperationResult } from '../../files/common/files.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { Mutable, isObject, isString, isUndefined } from '../../../base/common/types.js';\nimport { getErrorMessage } from '../../../base/common/errors.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n\ninterface IStoredProfileExtension {\n\tidentifier: IExtensionIdentifier;\n\tlocation: UriComponents | string;\n\trelativeLocation: string | undefined;\n\tversion: string;\n\tmetadata?: Metadata;\n}\n\nexport const enum ExtensionsProfileScanningErrorCode {\n\n\t/**\n\t * Error when trying to scan extensions from a profile that does not exist.\n\t */\n\tERROR_PROFILE_NOT_FOUND = 'ERROR_PROFILE_NOT_FOUND',\n\n\t/**\n\t * Error when profile file is invalid.\n\t */\n\tERROR_INVALID_CONTENT = 'ERROR_INVALID_CONTENT',\n\n}\n\nexport class ExtensionsProfileScanningError extends Error {\n\tconstructor(message: string, public code: ExtensionsProfileScanningErrorCode) {\n\t\tsuper(message);\n\t}\n}\n\nexport interface IScannedProfileExtension {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly version: string;\n\treadonly location: URI;\n\treadonly metadata?: Metadata;\n}\n\nexport interface ProfileExtensionsEvent {\n\treadonly extensions: readonly IScannedProfileExtension[];\n\treadonly profileLocation: URI;\n}\n\nexport interface DidAddProfileExtensionsEvent extends ProfileExtensionsEvent {\n\treadonly error?: Error;\n}\n\nexport interface DidRemoveProfileExtensionsEvent extends ProfileExtensionsEvent {\n\treadonly error?: Error;\n}\n\nexport interface IProfileExtensionsScanOptions {\n\treadonly bailOutWhenFileNotFound?: boolean;\n}\n\nexport const IExtensionsProfileScannerService = createDecorator<IExtensionsProfileScannerService>('IExtensionsProfileScannerService');\nexport interface IExtensionsProfileScannerService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onAddExtensions: Event<ProfileExtensionsEvent>;\n\treadonly onDidAddExtensions: Event<DidAddProfileExtensionsEvent>;\n\treadonly onRemoveExtensions: Event<ProfileExtensionsEvent>;\n\treadonly onDidRemoveExtensions: Event<DidRemoveProfileExtensionsEvent>;\n\n\tscanProfileExtensions(profileLocation: URI, options?: IProfileExtensionsScanOptions): Promise<IScannedProfileExtension[]>;\n\taddExtensionsToProfile(extensions: [IExtension, Metadata | undefined][], profileLocation: URI, keepExistingVersions?: boolean): Promise<IScannedProfileExtension[]>;\n\tupdateMetadata(extensions: [IExtension, Metadata | undefined][], profileLocation: URI): Promise<IScannedProfileExtension[]>;\n\tremoveExtensionFromProfile(extension: IExtension, profileLocation: URI): Promise<void>;\n}\n\nexport abstract class AbstractExtensionsProfileScannerService extends Disposable implements IExtensionsProfileScannerService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onAddExtensions = this._register(new Emitter<ProfileExtensionsEvent>());\n\treadonly onAddExtensions = this._onAddExtensions.event;\n\n\tprivate readonly _onDidAddExtensions = this._register(new Emitter<DidAddProfileExtensionsEvent>());\n\treadonly onDidAddExtensions = this._onDidAddExtensions.event;\n\n\tprivate readonly _onRemoveExtensions = this._register(new Emitter<ProfileExtensionsEvent>());\n\treadonly onRemoveExtensions = this._onRemoveExtensions.event;\n\n\tprivate readonly _onDidRemoveExtensions = this._register(new Emitter<DidRemoveProfileExtensionsEvent>());\n\treadonly onDidRemoveExtensions = this._onDidRemoveExtensions.event;\n\n\tprivate readonly resourcesAccessQueueMap = new ResourceMap<Queue<IScannedProfileExtension[]>>();\n\n\tconstructor(\n\t\tprivate readonly extensionsLocation: URI,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tscanProfileExtensions(profileLocation: URI, options?: IProfileExtensionsScanOptions): Promise<IScannedProfileExtension[]> {\n\t\treturn this.withProfileExtensions(profileLocation, undefined, options);\n\t}\n\n\tasync addExtensionsToProfile(extensions: [IExtension, Metadata | undefined][], profileLocation: URI, keepExistingVersions?: boolean): Promise<IScannedProfileExtension[]> {\n\t\tconst extensionsToRemove: IScannedProfileExtension[] = [];\n\t\tconst extensionsToAdd: IScannedProfileExtension[] = [];\n\t\ttry {\n\t\t\tawait this.withProfileExtensions(profileLocation, existingExtensions => {\n\t\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\t\tif (keepExistingVersions) {\n\t\t\t\t\tresult.push(...existingExtensions);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const existing of existingExtensions) {\n\t\t\t\t\t\tif (extensions.some(([e]) => areSameExtensions(e.identifier, existing.identifier) && e.manifest.version !== existing.version)) {\n\t\t\t\t\t\t\t// Remove the existing extension with different version\n\t\t\t\t\t\t\textensionsToRemove.push(existing);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(existing);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const [extension, metadata] of extensions) {\n\t\t\t\t\tconst index = result.findIndex(e => areSameExtensions(e.identifier, extension.identifier) && e.version === extension.manifest.version);\n\t\t\t\t\tconst extensionToAdd = { identifier: extension.identifier, version: extension.manifest.version, location: extension.location, metadata };\n\t\t\t\t\tif (index === -1) {\n\t\t\t\t\t\textensionsToAdd.push(extensionToAdd);\n\t\t\t\t\t\tresult.push(extensionToAdd);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.splice(index, 1, extensionToAdd);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extensionsToAdd.length) {\n\t\t\t\t\tthis._onAddExtensions.fire({ extensions: extensionsToAdd, profileLocation });\n\t\t\t\t}\n\t\t\t\tif (extensionsToRemove.length) {\n\t\t\t\t\tthis._onRemoveExtensions.fire({ extensions: extensionsToRemove, profileLocation });\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tif (extensionsToAdd.length) {\n\t\t\t\tthis._onDidAddExtensions.fire({ extensions: extensionsToAdd, profileLocation });\n\t\t\t}\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({ extensions: extensionsToRemove, profileLocation });\n\t\t\t}\n\t\t\treturn extensionsToAdd;\n\t\t} catch (error) {\n\t\t\tif (extensionsToAdd.length) {\n\t\t\t\tthis._onDidAddExtensions.fire({ extensions: extensionsToAdd, error, profileLocation });\n\t\t\t}\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({ extensions: extensionsToRemove, error, profileLocation });\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync updateMetadata(extensions: [IExtension, Metadata][], profileLocation: URI): Promise<IScannedProfileExtension[]> {\n\t\tconst updatedExtensions: IScannedProfileExtension[] = [];\n\t\tawait this.withProfileExtensions(profileLocation, profileExtensions => {\n\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\tfor (const profileExtension of profileExtensions) {\n\t\t\t\tconst extension = extensions.find(([e]) => areSameExtensions(e.identifier, profileExtension.identifier) && e.manifest.version === profileExtension.version);\n\t\t\t\tif (extension) {\n\t\t\t\t\tprofileExtension.metadata = { ...profileExtension.metadata, ...extension[1] };\n\t\t\t\t\tupdatedExtensions.push(profileExtension);\n\t\t\t\t\tresult.push(profileExtension);\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(profileExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t\treturn updatedExtensions;\n\t}\n\n\tasync removeExtensionFromProfile(extension: IExtension, profileLocation: URI): Promise<void> {\n\t\tconst extensionsToRemove: IScannedProfileExtension[] = [];\n\t\ttry {\n\t\t\tawait this.withProfileExtensions(profileLocation, profileExtensions => {\n\t\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\t\tfor (const e of profileExtensions) {\n\t\t\t\t\tif (areSameExtensions(e.identifier, extension.identifier)) {\n\t\t\t\t\t\textensionsToRemove.push(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extensionsToRemove.length) {\n\t\t\t\t\tthis._onRemoveExtensions.fire({ extensions: extensionsToRemove, profileLocation });\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({ extensions: extensionsToRemove, profileLocation });\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({ extensions: extensionsToRemove, error, profileLocation });\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async withProfileExtensions(file: URI, updateFn?: (extensions: Mutable<IScannedProfileExtension>[]) => IScannedProfileExtension[], options?: IProfileExtensionsScanOptions): Promise<IScannedProfileExtension[]> {\n\t\treturn this.getResourceAccessQueue(file).queue(async () => {\n\t\t\tlet extensions: IScannedProfileExtension[] = [];\n\n\t\t\t// Read\n\t\t\tlet storedProfileExtensions: IStoredProfileExtension[] | undefined;\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(file);\n\t\t\t\tstoredProfileExtensions = JSON.parse(content.value.toString().trim() || '[]');\n\t\t\t} catch (error) {\n\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\t// migrate from old location, remove this after couple of releases\n\t\t\t\tif (this.uriIdentityService.extUri.isEqual(file, this.userDataProfilesService.defaultProfile.extensionsResource)) {\n\t\t\t\t\tstoredProfileExtensions = await this.migrateFromOldDefaultProfileExtensionsLocation();\n\t\t\t\t}\n\t\t\t\tif (!storedProfileExtensions && options?.bailOutWhenFileNotFound) {\n\t\t\t\t\tthrow new ExtensionsProfileScanningError(getErrorMessage(error), ExtensionsProfileScanningErrorCode.ERROR_PROFILE_NOT_FOUND);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (storedProfileExtensions) {\n\t\t\t\tif (!Array.isArray(storedProfileExtensions)) {\n\t\t\t\t\tthis.reportAndThrowInvalidConentError(file);\n\t\t\t\t}\n\t\t\t\t// TODO @sandy081: Remove this migration after couple of releases\n\t\t\t\tlet migrate = false;\n\t\t\t\tfor (const e of storedProfileExtensions) {\n\t\t\t\t\tif (!isStoredProfileExtension(e)) {\n\t\t\t\t\t\tthis.reportAndThrowInvalidConentError(file);\n\t\t\t\t\t}\n\t\t\t\t\tlet location: URI;\n\t\t\t\t\tif (isString(e.relativeLocation) && e.relativeLocation) {\n\t\t\t\t\t\t// Extension in new format. No migration needed.\n\t\t\t\t\t\tlocation = this.resolveExtensionLocation(e.relativeLocation);\n\t\t\t\t\t} else if (isString(e.location)) {\n\t\t\t\t\t\tthis.logService.warn(`Extensions profile: Ignoring extension with invalid location: ${e.location}`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocation = URI.revive(e.location);\n\t\t\t\t\t\tconst relativePath = this.toRelativePath(location);\n\t\t\t\t\t\tif (relativePath) {\n\t\t\t\t\t\t\t// Extension in old format. Migrate to new format.\n\t\t\t\t\t\t\tmigrate = true;\n\t\t\t\t\t\t\te.relativeLocation = relativePath;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isUndefined(e.metadata?.hasPreReleaseVersion) && e.metadata?.preRelease) {\n\t\t\t\t\t\tmigrate = true;\n\t\t\t\t\t\te.metadata.hasPreReleaseVersion = true;\n\t\t\t\t\t}\n\t\t\t\t\textensions.push({\n\t\t\t\t\t\tidentifier: e.identifier,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tversion: e.version,\n\t\t\t\t\t\tmetadata: e.metadata,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (migrate) {\n\t\t\t\t\tawait this.fileService.writeFile(file, VSBuffer.fromString(JSON.stringify(storedProfileExtensions)));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update\n\t\t\tif (updateFn) {\n\t\t\t\textensions = updateFn(extensions);\n\t\t\t\tconst storedProfileExtensions: IStoredProfileExtension[] = extensions.map(e => ({\n\t\t\t\t\tidentifier: e.identifier,\n\t\t\t\t\tversion: e.version,\n\t\t\t\t\t// retain old format so that old clients can read it\n\t\t\t\t\tlocation: e.location.toJSON(),\n\t\t\t\t\trelativeLocation: this.toRelativePath(e.location),\n\t\t\t\t\tmetadata: e.metadata\n\t\t\t\t}));\n\t\t\t\tawait this.fileService.writeFile(file, VSBuffer.fromString(JSON.stringify(storedProfileExtensions)));\n\t\t\t}\n\n\t\t\treturn extensions;\n\t\t});\n\t}\n\n\tprivate reportAndThrowInvalidConentError(file: URI): void {\n\t\ttype ErrorClassification = {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Information about the error that occurred while scanning';\n\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'error code' };\n\t\t};\n\t\tconst error = new ExtensionsProfileScanningError(`Invalid extensions content in ${file.toString()}`, ExtensionsProfileScanningErrorCode.ERROR_INVALID_CONTENT);\n\t\tthis.telemetryService.publicLogError2<{ code: string }, ErrorClassification>('extensionsProfileScanningError', { code: error.code });\n\t\tthrow error;\n\t}\n\n\tprivate toRelativePath(extensionLocation: URI): string | undefined {\n\t\treturn this.uriIdentityService.extUri.isEqual(this.uriIdentityService.extUri.dirname(extensionLocation), this.extensionsLocation)\n\t\t\t? this.uriIdentityService.extUri.basename(extensionLocation)\n\t\t\t: undefined;\n\t}\n\n\tprivate resolveExtensionLocation(path: string): URI {\n\t\treturn this.uriIdentityService.extUri.joinPath(this.extensionsLocation, path);\n\t}\n\n\tprivate _migrationPromise: Promise<IStoredProfileExtension[] | undefined> | undefined;\n\tprivate async migrateFromOldDefaultProfileExtensionsLocation(): Promise<IStoredProfileExtension[] | undefined> {\n\t\tif (!this._migrationPromise) {\n\t\t\tthis._migrationPromise = (async () => {\n\t\t\t\tconst oldDefaultProfileExtensionsLocation = this.uriIdentityService.extUri.joinPath(this.userDataProfilesService.defaultProfile.location, 'extensions.json');\n\t\t\t\tconst oldDefaultProfileExtensionsInitLocation = this.uriIdentityService.extUri.joinPath(this.extensionsLocation, '.init-default-profile-extensions');\n\t\t\t\tlet content: string;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = (await this.fileService.readFile(oldDefaultProfileExtensionsLocation)).value.toString();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (toFileOperationResult(error) === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tthis.logService.info('Migrating extensions from old default profile location', oldDefaultProfileExtensionsLocation.toString());\n\t\t\t\tlet storedProfileExtensions: IStoredProfileExtension[] | undefined;\n\t\t\t\ttry {\n\t\t\t\t\tconst parsedData = JSON.parse(content);\n\t\t\t\t\tif (Array.isArray(parsedData) && parsedData.every(candidate => isStoredProfileExtension(candidate))) {\n\t\t\t\t\t\tstoredProfileExtensions = parsedData;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.warn('Skipping migrating from old default profile locaiton: Found invalid data', parsedData);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t/* Ignore */\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\n\t\t\t\tif (storedProfileExtensions) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.fileService.createFile(this.userDataProfilesService.defaultProfile.extensionsResource, VSBuffer.fromString(JSON.stringify(storedProfileExtensions)), { overwrite: false });\n\t\t\t\t\t\tthis.logService.info('Migrated extensions from old default profile location to new location', oldDefaultProfileExtensionsLocation.toString(), this.userDataProfilesService.defaultProfile.extensionsResource.toString());\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (toFileOperationResult(error) === FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\t\t\t\t\tthis.logService.info('Migration from old default profile location to new location is done by another window', oldDefaultProfileExtensionsLocation.toString(), this.userDataProfilesService.defaultProfile.extensionsResource.toString());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(oldDefaultProfileExtensionsLocation);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(oldDefaultProfileExtensionsInitLocation);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn storedProfileExtensions;\n\t\t\t})();\n\t\t}\n\t\treturn this._migrationPromise;\n\t}\n\n\tprivate getResourceAccessQueue(file: URI): Queue<IScannedProfileExtension[]> {\n\t\tlet resourceQueue = this.resourcesAccessQueueMap.get(file);\n\t\tif (!resourceQueue) {\n\t\t\tresourceQueue = new Queue<IScannedProfileExtension[]>();\n\t\t\tthis.resourcesAccessQueueMap.set(file, resourceQueue);\n\t\t}\n\t\treturn resourceQueue;\n\t}\n}\n\nfunction isStoredProfileExtension(candidate: any): candidate is IStoredProfileExtension {\n\treturn isObject(candidate)\n\t\t&& isIExtensionIdentifier(candidate.identifier)\n\t\t&& (isUriComponents(candidate.location) || (isString(candidate.location) && candidate.location))\n\t\t&& (isUndefined(candidate.relativeLocation) || isString(candidate.relativeLocation))\n\t\t&& candidate.version && isString(candidate.version);\n}\n\nfunction isUriComponents(thing: unknown): thing is UriComponents {\n\tif (!thing) {\n\t\treturn false;\n\t}\n\treturn isString((<any>thing).path) &&\n\t\tisString((<any>thing).scheme);\n}\n"],
  "mappings": "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",
  "names": ["ExtensionsProfileScanningErrorCode", "storedProfileExtensions"]
}
