{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionsProfileScannerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue } from \"../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { getErrorMessage } from \"../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../base/common/map.js\";\nimport {\n\ttype Mutable,\n\tisObject,\n\tisString,\n\tisUndefined,\n} from \"../../../base/common/types.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport type {\n\tIExtension,\n\tIExtensionIdentifier,\n} from \"../../extensions/common/extensions.js\";\nimport {\n\tFileOperationResult,\n\tIFileService,\n\ttoFileOperationResult,\n} from \"../../files/common/files.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport { IUserDataProfilesService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\ttype Metadata,\n\tisIExtensionIdentifier,\n} from \"./extensionManagement.js\";\nimport { areSameExtensions } from \"./extensionManagementUtil.js\";\n\ninterface IStoredProfileExtension {\n\tidentifier: IExtensionIdentifier;\n\tlocation: UriComponents | string;\n\trelativeLocation: string | undefined;\n\tversion: string;\n\tmetadata?: Metadata;\n}\n\nexport enum ExtensionsProfileScanningErrorCode {\n\t/**\n\t * Error when trying to scan extensions from a profile that does not exist.\n\t */\n\tERROR_PROFILE_NOT_FOUND = \"ERROR_PROFILE_NOT_FOUND\",\n\n\t/**\n\t * Error when profile file is invalid.\n\t */\n\tERROR_INVALID_CONTENT = \"ERROR_INVALID_CONTENT\",\n}\n\nexport class ExtensionsProfileScanningError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\tpublic code: ExtensionsProfileScanningErrorCode,\n\t) {\n\t\tsuper(message);\n\t}\n}\n\nexport interface IScannedProfileExtension {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly version: string;\n\treadonly location: URI;\n\treadonly metadata?: Metadata;\n}\n\nexport interface ProfileExtensionsEvent {\n\treadonly extensions: readonly IScannedProfileExtension[];\n\treadonly profileLocation: URI;\n}\n\nexport interface DidAddProfileExtensionsEvent extends ProfileExtensionsEvent {\n\treadonly error?: Error;\n}\n\nexport interface DidRemoveProfileExtensionsEvent\n\textends ProfileExtensionsEvent {\n\treadonly error?: Error;\n}\n\nexport interface IProfileExtensionsScanOptions {\n\treadonly bailOutWhenFileNotFound?: boolean;\n}\n\nexport const IExtensionsProfileScannerService =\n\tcreateDecorator<IExtensionsProfileScannerService>(\n\t\t\"IExtensionsProfileScannerService\",\n\t);\nexport interface IExtensionsProfileScannerService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onAddExtensions: Event<ProfileExtensionsEvent>;\n\treadonly onDidAddExtensions: Event<DidAddProfileExtensionsEvent>;\n\treadonly onRemoveExtensions: Event<ProfileExtensionsEvent>;\n\treadonly onDidRemoveExtensions: Event<DidRemoveProfileExtensionsEvent>;\n\n\tscanProfileExtensions(\n\t\tprofileLocation: URI,\n\t\toptions?: IProfileExtensionsScanOptions,\n\t): Promise<IScannedProfileExtension[]>;\n\taddExtensionsToProfile(\n\t\textensions: [IExtension, Metadata | undefined][],\n\t\tprofileLocation: URI,\n\t\tkeepExistingVersions?: boolean,\n\t): Promise<IScannedProfileExtension[]>;\n\tupdateMetadata(\n\t\textensions: [IExtension, Metadata | undefined][],\n\t\tprofileLocation: URI,\n\t): Promise<IScannedProfileExtension[]>;\n\tremoveExtensionFromProfile(\n\t\textension: IExtension,\n\t\tprofileLocation: URI,\n\t): Promise<void>;\n}\n\nexport abstract class AbstractExtensionsProfileScannerService\n\textends Disposable\n\timplements IExtensionsProfileScannerService\n{\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onAddExtensions = this._register(\n\t\tnew Emitter<ProfileExtensionsEvent>(),\n\t);\n\treadonly onAddExtensions = this._onAddExtensions.event;\n\n\tprivate readonly _onDidAddExtensions = this._register(\n\t\tnew Emitter<DidAddProfileExtensionsEvent>(),\n\t);\n\treadonly onDidAddExtensions = this._onDidAddExtensions.event;\n\n\tprivate readonly _onRemoveExtensions = this._register(\n\t\tnew Emitter<ProfileExtensionsEvent>(),\n\t);\n\treadonly onRemoveExtensions = this._onRemoveExtensions.event;\n\n\tprivate readonly _onDidRemoveExtensions = this._register(\n\t\tnew Emitter<DidRemoveProfileExtensionsEvent>(),\n\t);\n\treadonly onDidRemoveExtensions = this._onDidRemoveExtensions.event;\n\n\tprivate readonly resourcesAccessQueueMap = new ResourceMap<\n\t\tQueue<IScannedProfileExtension[]>\n\t>();\n\n\tconstructor(\n\t\tprivate readonly extensionsLocation: URI,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUserDataProfilesService\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tscanProfileExtensions(\n\t\tprofileLocation: URI,\n\t\toptions?: IProfileExtensionsScanOptions,\n\t): Promise<IScannedProfileExtension[]> {\n\t\treturn this.withProfileExtensions(profileLocation, undefined, options);\n\t}\n\n\tasync addExtensionsToProfile(\n\t\textensions: [IExtension, Metadata | undefined][],\n\t\tprofileLocation: URI,\n\t\tkeepExistingVersions?: boolean,\n\t): Promise<IScannedProfileExtension[]> {\n\t\tconst extensionsToRemove: IScannedProfileExtension[] = [];\n\t\tconst extensionsToAdd: IScannedProfileExtension[] = [];\n\t\ttry {\n\t\t\tawait this.withProfileExtensions(\n\t\t\t\tprofileLocation,\n\t\t\t\t(existingExtensions) => {\n\t\t\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\t\t\tif (keepExistingVersions) {\n\t\t\t\t\t\tresult.push(...existingExtensions);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const existing of existingExtensions) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\textensions.some(\n\t\t\t\t\t\t\t\t\t([e]) =>\n\t\t\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\t\t\te.identifier,\n\t\t\t\t\t\t\t\t\t\t\texisting.identifier,\n\t\t\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\t\t\te.manifest.version !== existing.version,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t// Remove the existing extension with different version\n\t\t\t\t\t\t\t\textensionsToRemove.push(existing);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.push(existing);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const [extension, metadata] of extensions) {\n\t\t\t\t\t\tconst index = result.findIndex(\n\t\t\t\t\t\t\t(e) =>\n\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\te.identifier,\n\t\t\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\t\t) && e.version === extension.manifest.version,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst extensionToAdd = {\n\t\t\t\t\t\t\tidentifier: extension.identifier,\n\t\t\t\t\t\t\tversion: extension.manifest.version,\n\t\t\t\t\t\t\tlocation: extension.location,\n\t\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (index === -1) {\n\t\t\t\t\t\t\textensionsToAdd.push(extensionToAdd);\n\t\t\t\t\t\t\tresult.push(extensionToAdd);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.splice(index, 1, extensionToAdd);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (extensionsToAdd.length) {\n\t\t\t\t\t\tthis._onAddExtensions.fire({\n\t\t\t\t\t\t\textensions: extensionsToAdd,\n\t\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (extensionsToRemove.length) {\n\t\t\t\t\t\tthis._onRemoveExtensions.fire({\n\t\t\t\t\t\t\textensions: extensionsToRemove,\n\t\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (extensionsToAdd.length) {\n\t\t\t\tthis._onDidAddExtensions.fire({\n\t\t\t\t\textensions: extensionsToAdd,\n\t\t\t\t\tprofileLocation,\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({\n\t\t\t\t\textensions: extensionsToRemove,\n\t\t\t\t\tprofileLocation,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn extensionsToAdd;\n\t\t} catch (error) {\n\t\t\tif (extensionsToAdd.length) {\n\t\t\t\tthis._onDidAddExtensions.fire({\n\t\t\t\t\textensions: extensionsToAdd,\n\t\t\t\t\terror,\n\t\t\t\t\tprofileLocation,\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({\n\t\t\t\t\textensions: extensionsToRemove,\n\t\t\t\t\terror,\n\t\t\t\t\tprofileLocation,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync updateMetadata(\n\t\textensions: [IExtension, Metadata][],\n\t\tprofileLocation: URI,\n\t): Promise<IScannedProfileExtension[]> {\n\t\tconst updatedExtensions: IScannedProfileExtension[] = [];\n\t\tawait this.withProfileExtensions(\n\t\t\tprofileLocation,\n\t\t\t(profileExtensions) => {\n\t\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\t\tfor (const profileExtension of profileExtensions) {\n\t\t\t\t\tconst extension = extensions.find(\n\t\t\t\t\t\t([e]) =>\n\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\te.identifier,\n\t\t\t\t\t\t\t\tprofileExtension.identifier,\n\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\te.manifest.version === profileExtension.version,\n\t\t\t\t\t);\n\t\t\t\t\tif (extension) {\n\t\t\t\t\t\tprofileExtension.metadata = {\n\t\t\t\t\t\t\t...profileExtension.metadata,\n\t\t\t\t\t\t\t...extension[1],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tupdatedExtensions.push(profileExtension);\n\t\t\t\t\t\tresult.push(profileExtension);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push(profileExtension);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t);\n\t\treturn updatedExtensions;\n\t}\n\n\tasync removeExtensionFromProfile(\n\t\textension: IExtension,\n\t\tprofileLocation: URI,\n\t): Promise<void> {\n\t\tconst extensionsToRemove: IScannedProfileExtension[] = [];\n\t\ttry {\n\t\t\tawait this.withProfileExtensions(\n\t\t\t\tprofileLocation,\n\t\t\t\t(profileExtensions) => {\n\t\t\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\t\t\tfor (const e of profileExtensions) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\te.identifier,\n\t\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\textensionsToRemove.push(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (extensionsToRemove.length) {\n\t\t\t\t\t\tthis._onRemoveExtensions.fire({\n\t\t\t\t\t\t\textensions: extensionsToRemove,\n\t\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({\n\t\t\t\t\textensions: extensionsToRemove,\n\t\t\t\t\tprofileLocation,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({\n\t\t\t\t\textensions: extensionsToRemove,\n\t\t\t\t\terror,\n\t\t\t\t\tprofileLocation,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async withProfileExtensions(\n\t\tfile: URI,\n\t\tupdateFn?: (\n\t\t\textensions: Mutable<IScannedProfileExtension>[],\n\t\t) => IScannedProfileExtension[],\n\t\toptions?: IProfileExtensionsScanOptions,\n\t): Promise<IScannedProfileExtension[]> {\n\t\treturn this.getResourceAccessQueue(file).queue(async () => {\n\t\t\tlet extensions: IScannedProfileExtension[] = [];\n\n\t\t\t// Read\n\t\t\tlet storedProfileExtensions: IStoredProfileExtension[] | undefined;\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(file);\n\t\t\t\tstoredProfileExtensions = JSON.parse(\n\t\t\t\t\tcontent.value.toString().trim() || \"[]\",\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tif (\n\t\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\t// migrate from old location, remove this after couple of releases\n\t\t\t\tif (\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\tfile,\n\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tstoredProfileExtensions =\n\t\t\t\t\t\tawait this.migrateFromOldDefaultProfileExtensionsLocation();\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!storedProfileExtensions &&\n\t\t\t\t\toptions?.bailOutWhenFileNotFound\n\t\t\t\t) {\n\t\t\t\t\tthrow new ExtensionsProfileScanningError(\n\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\tExtensionsProfileScanningErrorCode.ERROR_PROFILE_NOT_FOUND,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (storedProfileExtensions) {\n\t\t\t\tif (!Array.isArray(storedProfileExtensions)) {\n\t\t\t\t\tthis.reportAndThrowInvalidConentError(file);\n\t\t\t\t}\n\t\t\t\t// TODO @sandy081: Remove this migration after couple of releases\n\t\t\t\tlet migrate = false;\n\t\t\t\tfor (const e of storedProfileExtensions) {\n\t\t\t\t\tif (!isStoredProfileExtension(e)) {\n\t\t\t\t\t\tthis.reportAndThrowInvalidConentError(file);\n\t\t\t\t\t}\n\t\t\t\t\tlet location: URI;\n\t\t\t\t\tif (isString(e.relativeLocation) && e.relativeLocation) {\n\t\t\t\t\t\t// Extension in new format. No migration needed.\n\t\t\t\t\t\tlocation = this.resolveExtensionLocation(\n\t\t\t\t\t\t\te.relativeLocation,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (isString(e.location)) {\n\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t`Extensions profile: Ignoring extension with invalid location: ${e.location}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocation = URI.revive(e.location);\n\t\t\t\t\t\tconst relativePath = this.toRelativePath(location);\n\t\t\t\t\t\tif (relativePath) {\n\t\t\t\t\t\t\t// Extension in old format. Migrate to new format.\n\t\t\t\t\t\t\tmigrate = true;\n\t\t\t\t\t\t\te.relativeLocation = relativePath;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tisUndefined(e.metadata?.hasPreReleaseVersion) &&\n\t\t\t\t\t\te.metadata?.preRelease\n\t\t\t\t\t) {\n\t\t\t\t\t\tmigrate = true;\n\t\t\t\t\t\te.metadata.hasPreReleaseVersion = true;\n\t\t\t\t\t}\n\t\t\t\t\textensions.push({\n\t\t\t\t\t\tidentifier: e.identifier,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tversion: e.version,\n\t\t\t\t\t\tmetadata: e.metadata,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (migrate) {\n\t\t\t\t\tawait this.fileService.writeFile(\n\t\t\t\t\t\tfile,\n\t\t\t\t\t\tVSBuffer.fromString(\n\t\t\t\t\t\t\tJSON.stringify(storedProfileExtensions),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update\n\t\t\tif (updateFn) {\n\t\t\t\textensions = updateFn(extensions);\n\t\t\t\tconst storedProfileExtensions: IStoredProfileExtension[] =\n\t\t\t\t\textensions.map((e) => ({\n\t\t\t\t\t\tidentifier: e.identifier,\n\t\t\t\t\t\tversion: e.version,\n\t\t\t\t\t\t// retain old format so that old clients can read it\n\t\t\t\t\t\tlocation: e.location.toJSON(),\n\t\t\t\t\t\trelativeLocation: this.toRelativePath(e.location),\n\t\t\t\t\t\tmetadata: e.metadata,\n\t\t\t\t\t}));\n\t\t\t\tawait this.fileService.writeFile(\n\t\t\t\t\tfile,\n\t\t\t\t\tVSBuffer.fromString(\n\t\t\t\t\t\tJSON.stringify(storedProfileExtensions),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn extensions;\n\t\t});\n\t}\n\n\tprivate reportAndThrowInvalidConentError(file: URI): void {\n\t\ttype ErrorClassification = {\n\t\t\towner: \"sandy081\";\n\t\t\tcomment: \"Information about the error that occurred while scanning\";\n\t\t\tcode: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"error code\";\n\t\t\t};\n\t\t};\n\t\tconst error = new ExtensionsProfileScanningError(\n\t\t\t`Invalid extensions content in ${file.toString()}`,\n\t\t\tExtensionsProfileScanningErrorCode.ERROR_INVALID_CONTENT,\n\t\t);\n\t\tthis.telemetryService.publicLogError2<\n\t\t\t{ code: string },\n\t\t\tErrorClassification\n\t\t>(\"extensionsProfileScanningError\", { code: error.code });\n\t\tthrow error;\n\t}\n\n\tprivate toRelativePath(extensionLocation: URI): string | undefined {\n\t\treturn this.uriIdentityService.extUri.isEqual(\n\t\t\tthis.uriIdentityService.extUri.dirname(extensionLocation),\n\t\t\tthis.extensionsLocation,\n\t\t)\n\t\t\t? this.uriIdentityService.extUri.basename(extensionLocation)\n\t\t\t: undefined;\n\t}\n\n\tprivate resolveExtensionLocation(path: string): URI {\n\t\treturn this.uriIdentityService.extUri.joinPath(\n\t\t\tthis.extensionsLocation,\n\t\t\tpath,\n\t\t);\n\t}\n\n\tprivate _migrationPromise:\n\t\t| Promise<IStoredProfileExtension[] | undefined>\n\t\t| undefined;\n\tprivate async migrateFromOldDefaultProfileExtensionsLocation(): Promise<\n\t\tIStoredProfileExtension[] | undefined\n\t> {\n\t\tif (!this._migrationPromise) {\n\t\t\tthis._migrationPromise = (async () => {\n\t\t\t\tconst oldDefaultProfileExtensionsLocation =\n\t\t\t\t\tthis.uriIdentityService.extUri.joinPath(\n\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile.location,\n\t\t\t\t\t\t\"extensions.json\",\n\t\t\t\t\t);\n\t\t\t\tconst oldDefaultProfileExtensionsInitLocation =\n\t\t\t\t\tthis.uriIdentityService.extUri.joinPath(\n\t\t\t\t\t\tthis.extensionsLocation,\n\t\t\t\t\t\t\".init-default-profile-extensions\",\n\t\t\t\t\t);\n\t\t\t\tlet content: string;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = (\n\t\t\t\t\t\tawait this.fileService.readFile(\n\t\t\t\t\t\t\toldDefaultProfileExtensionsLocation,\n\t\t\t\t\t\t)\n\t\t\t\t\t).value.toString();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttoFileOperationResult(error) ===\n\t\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Migrating extensions from old default profile location\",\n\t\t\t\t\toldDefaultProfileExtensionsLocation.toString(),\n\t\t\t\t);\n\t\t\t\tlet storedProfileExtensions:\n\t\t\t\t\t| IStoredProfileExtension[]\n\t\t\t\t\t| undefined;\n\t\t\t\ttry {\n\t\t\t\t\tconst parsedData = JSON.parse(content);\n\t\t\t\t\tif (\n\t\t\t\t\t\tArray.isArray(parsedData) &&\n\t\t\t\t\t\tparsedData.every((candidate) =>\n\t\t\t\t\t\t\tisStoredProfileExtension(candidate),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tstoredProfileExtensions = parsedData;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\"Skipping migrating from old default profile locaiton: Found invalid data\",\n\t\t\t\t\t\t\tparsedData,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t/* Ignore */\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\n\t\t\t\tif (storedProfileExtensions) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.fileService.createFile(\n\t\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\t\t\tVSBuffer.fromString(\n\t\t\t\t\t\t\t\tJSON.stringify(storedProfileExtensions),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{ overwrite: false },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\"Migrated extensions from old default profile location to new location\",\n\t\t\t\t\t\t\toldDefaultProfileExtensionsLocation.toString(),\n\t\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource.toString(),\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttoFileOperationResult(error) ===\n\t\t\t\t\t\t\tFileOperationResult.FILE_MODIFIED_SINCE\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\"Migration from old default profile location to new location is done by another window\",\n\t\t\t\t\t\t\t\toldDefaultProfileExtensionsLocation.toString(),\n\t\t\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource.toString(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(\n\t\t\t\t\t\toldDefaultProfileExtensionsLocation,\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(\n\t\t\t\t\t\toldDefaultProfileExtensionsInitLocation,\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn storedProfileExtensions;\n\t\t\t})();\n\t\t}\n\t\treturn this._migrationPromise;\n\t}\n\n\tprivate getResourceAccessQueue(\n\t\tfile: URI,\n\t): Queue<IScannedProfileExtension[]> {\n\t\tlet resourceQueue = this.resourcesAccessQueueMap.get(file);\n\t\tif (!resourceQueue) {\n\t\t\tresourceQueue = new Queue<IScannedProfileExtension[]>();\n\t\t\tthis.resourcesAccessQueueMap.set(file, resourceQueue);\n\t\t}\n\t\treturn resourceQueue;\n\t}\n}\n\nfunction isStoredProfileExtension(\n\tcandidate: any,\n): candidate is IStoredProfileExtension {\n\treturn (\n\t\tisObject(candidate) &&\n\t\tisIExtensionIdentifier(candidate.identifier) &&\n\t\t(isUriComponents(candidate.location) ||\n\t\t\t(isString(candidate.location) && candidate.location)) &&\n\t\t(isUndefined(candidate.relativeLocation) ||\n\t\t\tisString(candidate.relativeLocation)) &&\n\t\tcandidate.version &&\n\t\tisString(candidate.version)\n\t);\n}\n\nfunction isUriComponents(thing: unknown): thing is UriComponents {\n\tif (!thing) {\n\t\treturn false;\n\t}\n\treturn isString((<any>thing).path) && isString((<any>thing).scheme);\n}\n"],
  "mappings": "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",
  "names": ["ExtensionsProfileScanningErrorCode", "storedProfileExtensions"]
}
