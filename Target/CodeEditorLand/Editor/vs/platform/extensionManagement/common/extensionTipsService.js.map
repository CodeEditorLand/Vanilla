{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionTipsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { IConfigBasedExtensionTip as IRawConfigBasedExtensionTip } from '../../../base/common/product.js';\nimport { joinPath } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IConfigBasedExtensionTip, IExecutableBasedExtensionTip, IExtensionManagementService, IExtensionTipsService, ILocalExtension } from './extensionManagement.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { disposableTimeout } from '../../../base/common/async.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Event } from '../../../base/common/event.js';\nimport { join } from '../../../base/common/path.js';\nimport { isWindows } from '../../../base/common/platform.js';\nimport { env } from '../../../base/common/process.js';\nimport { areSameExtensions } from './extensionManagementUtil.js';\nimport { IExtensionRecommendationNotificationService, RecommendationsNotificationResult, RecommendationSource } from '../../extensionRecommendations/common/extensionRecommendations.js';\nimport { ExtensionType } from '../../extensions/common/extensions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n\n//#region Base Extension Tips Service\n\nexport class ExtensionTipsService extends Disposable implements IExtensionTipsService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly allConfigBasedTips: Map<string, IRawConfigBasedExtensionTip> = new Map<string, IRawConfigBasedExtensionTip>();\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tif (this.productService.configBasedExtensionTips) {\n\t\t\tObject.entries(this.productService.configBasedExtensionTips).forEach(([, value]) => this.allConfigBasedTips.set(value.configPath, value));\n\t\t}\n\t}\n\n\tgetConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\treturn this.getValidConfigBasedTips(folder);\n\t}\n\n\tasync getImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn [];\n\t}\n\n\tasync getOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn [];\n\t}\n\n\tprivate async getValidConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\tconst result: IConfigBasedExtensionTip[] = [];\n\t\tfor (const [configPath, tip] of this.allConfigBasedTips) {\n\t\t\tif (tip.configScheme && tip.configScheme !== folder.scheme) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst content = (await this.fileService.readFile(joinPath(folder, configPath))).value.toString();\n\t\t\t\tfor (const [key, value] of Object.entries(tip.recommendations)) {\n\t\t\t\t\tif (!value.contentPattern || new RegExp(value.contentPattern, 'mig').test(content)) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\textensionId: key,\n\t\t\t\t\t\t\textensionName: value.name,\n\t\t\t\t\t\t\tconfigName: tip.configName,\n\t\t\t\t\t\t\timportant: !!value.important,\n\t\t\t\t\t\t\tisExtensionPack: !!value.isExtensionPack,\n\t\t\t\t\t\t\twhenNotInstalled: value.whenNotInstalled\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) { /* Ignore */ }\n\t\t}\n\t\treturn result;\n\t}\n}\n\n//#endregion\n\n//#region Native Extension Tips Service (enables unit testing having it here in \"common\")\n\ntype ExeExtensionRecommendationsClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about executable based extension recommendation';\n\textensionId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'id of the recommended extension' };\n\texeName: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'name of the executable for which extension is being recommended' };\n};\n\ntype IExeBasedExtensionTips = {\n\treadonly exeFriendlyName: string;\n\treadonly windowsPath?: string;\n\treadonly recommendations: { extensionId: string; extensionName: string; isExtensionPack: boolean; whenNotInstalled?: string[] }[];\n};\n\nconst promptedExecutableTipsStorageKey = 'extensionTips/promptedExecutableTips';\nconst lastPromptedMediumImpExeTimeStorageKey = 'extensionTips/lastPromptedMediumImpExeTime';\n\nexport abstract class AbstractNativeExtensionTipsService extends ExtensionTipsService {\n\n\tprivate readonly highImportanceExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\tprivate readonly mediumImportanceExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\tprivate readonly allOtherExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\n\tprivate highImportanceTipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\tprivate mediumImportanceTipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\n\tconstructor(\n\t\tprivate readonly userHome: URI,\n\t\tprivate readonly windowEvents: {\n\t\t\treadonly onDidOpenMainWindow: Event<unknown>;\n\t\t\treadonly onDidFocusMainWindow: Event<unknown>;\n\t\t},\n\t\tprivate readonly telemetryService: ITelemetryService,\n\t\tprivate readonly extensionManagementService: IExtensionManagementService,\n\t\tprivate readonly storageService: IStorageService,\n\t\tprivate readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\tfileService: IFileService,\n\t\tproductService: IProductService\n\t) {\n\t\tsuper(fileService, productService);\n\t\tif (productService.exeBasedExtensionTips) {\n\t\t\tObject.entries(productService.exeBasedExtensionTips).forEach(([key, exeBasedExtensionTip]) => {\n\t\t\t\tconst highImportanceRecommendations: { extensionId: string; extensionName: string; isExtensionPack: boolean }[] = [];\n\t\t\t\tconst mediumImportanceRecommendations: { extensionId: string; extensionName: string; isExtensionPack: boolean }[] = [];\n\t\t\t\tconst otherRecommendations: { extensionId: string; extensionName: string; isExtensionPack: boolean }[] = [];\n\t\t\t\tObject.entries(exeBasedExtensionTip.recommendations).forEach(([extensionId, value]) => {\n\t\t\t\t\tif (value.important) {\n\t\t\t\t\t\tif (exeBasedExtensionTip.important) {\n\t\t\t\t\t\t\thighImportanceRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmediumImportanceRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\totherRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (highImportanceRecommendations.length) {\n\t\t\t\t\tthis.highImportanceExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: highImportanceRecommendations });\n\t\t\t\t}\n\t\t\t\tif (mediumImportanceRecommendations.length) {\n\t\t\t\t\tthis.mediumImportanceExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: mediumImportanceRecommendations });\n\t\t\t\t}\n\t\t\t\tif (otherRecommendations.length) {\n\t\t\t\t\tthis.allOtherExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: otherRecommendations });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\t\t3s has come out to be the good number to fetch and prompt important exe based recommendations\n\t\t\tAlso fetch important exe based recommendations for reporting telemetry\n\t\t*/\n\t\tdisposableTimeout(async () => {\n\t\t\tawait this.collectTips();\n\t\t\tthis.promptHighImportanceExeBasedTip();\n\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t}, 3000, this._store);\n\t}\n\n\toverride async getImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\tconst highImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.highImportanceExecutableTips);\n\t\tconst mediumImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.mediumImportanceExecutableTips);\n\t\treturn [...highImportanceExeTips, ...mediumImportanceExeTips];\n\t}\n\n\toverride getOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn this.getValidExecutableBasedExtensionTips(this.allOtherExecutableTips);\n\t}\n\n\tprivate async collectTips(): Promise<void> {\n\t\tconst highImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.highImportanceExecutableTips);\n\t\tconst mediumImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.mediumImportanceExecutableTips);\n\t\tconst local = await this.extensionManagementService.getInstalled();\n\n\t\tthis.highImportanceTipsByExe = this.groupImportantTipsByExe(highImportanceExeTips, local);\n\t\tthis.mediumImportanceTipsByExe = this.groupImportantTipsByExe(mediumImportanceExeTips, local);\n\t}\n\n\tprivate groupImportantTipsByExe(importantExeBasedTips: IExecutableBasedExtensionTip[], local: ILocalExtension[]): Map<string, IExecutableBasedExtensionTip[]> {\n\t\tconst importantExeBasedRecommendations = new Map<string, IExecutableBasedExtensionTip>();\n\t\timportantExeBasedTips.forEach(tip => importantExeBasedRecommendations.set(tip.extensionId.toLowerCase(), tip));\n\n\t\tconst { installed, uninstalled: recommendations } = this.groupByInstalled([...importantExeBasedRecommendations.keys()], local);\n\n\t\t/* Log installed and uninstalled exe based recommendations */\n\t\tfor (const extensionId of installed) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip) {\n\t\t\t\tthis.telemetryService.publicLog2<{ exeName: string; extensionId: string }, ExeExtensionRecommendationsClassification>('exeExtensionRecommendations:alreadyInstalled', { extensionId, exeName: tip.exeName });\n\t\t\t}\n\t\t}\n\t\tfor (const extensionId of recommendations) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip) {\n\t\t\t\tthis.telemetryService.publicLog2<{ exeName: string; extensionId: string }, ExeExtensionRecommendationsClassification>('exeExtensionRecommendations:notInstalled', { extensionId, exeName: tip.exeName });\n\t\t\t}\n\t\t}\n\n\t\tconst promptedExecutableTips = this.getPromptedExecutableTips();\n\t\tconst tipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\t\tfor (const extensionId of recommendations) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip && (!promptedExecutableTips[tip.exeName] || !promptedExecutableTips[tip.exeName].includes(tip.extensionId))) {\n\t\t\t\tlet tips = tipsByExe.get(tip.exeName);\n\t\t\t\tif (!tips) {\n\t\t\t\t\ttips = [];\n\t\t\t\t\ttipsByExe.set(tip.exeName, tips);\n\t\t\t\t}\n\t\t\t\ttips.push(tip);\n\t\t\t}\n\t\t}\n\n\t\treturn tipsByExe;\n\t}\n\n\t/**\n\t * High importance tips are prompted once per restart session\n\t */\n\tprivate promptHighImportanceExeBasedTip(): void {\n\t\tif (this.highImportanceTipsByExe.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [exeName, tips] = [...this.highImportanceTipsByExe.entries()][0];\n\t\tthis.promptExeRecommendations(tips)\n\t\t\t.then(result => {\n\t\t\t\tswitch (result) {\n\t\t\t\t\tcase RecommendationsNotificationResult.Accepted:\n\t\t\t\t\t\tthis.addToRecommendedExecutables(tips[0].exeName, tips);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RecommendationsNotificationResult.Ignored:\n\t\t\t\t\t\tthis.highImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RecommendationsNotificationResult.IncompatibleWindow: {\n\t\t\t\t\t\t// Recommended in incompatible window. Schedule the prompt after active window change\n\t\t\t\t\t\tconst onActiveWindowChange = Event.once(Event.latch(Event.any(this.windowEvents.onDidOpenMainWindow, this.windowEvents.onDidFocusMainWindow)));\n\t\t\t\t\t\tthis._register(onActiveWindowChange(() => this.promptHighImportanceExeBasedTip()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RecommendationsNotificationResult.TooMany: {\n\t\t\t\t\t\t// Too many notifications. Schedule the prompt after one hour\n\t\t\t\t\t\tconst disposable = this._register(new MutableDisposable());\n\t\t\t\t\t\tdisposable.value = disposableTimeout(() => { disposable.dispose(); this.promptHighImportanceExeBasedTip(); }, 60 * 60 * 1000 /* 1 hour */);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Medium importance tips are prompted once per 7 days\n\t */\n\tprivate promptMediumImportanceExeBasedTip(): void {\n\t\tif (this.mediumImportanceTipsByExe.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lastPromptedMediumExeTime = this.getLastPromptedMediumExeTime();\n\t\tconst timeSinceLastPrompt = Date.now() - lastPromptedMediumExeTime;\n\t\tconst promptInterval = 7 * 24 * 60 * 60 * 1000; // 7 Days\n\t\tif (timeSinceLastPrompt < promptInterval) {\n\t\t\t// Wait until interval and prompt\n\t\t\tconst disposable = this._register(new MutableDisposable());\n\t\t\tdisposable.value = disposableTimeout(() => { disposable.dispose(); this.promptMediumImportanceExeBasedTip(); }, promptInterval - timeSinceLastPrompt);\n\t\t\treturn;\n\t\t}\n\n\t\tconst [exeName, tips] = [...this.mediumImportanceTipsByExe.entries()][0];\n\t\tthis.promptExeRecommendations(tips)\n\t\t\t.then(result => {\n\t\t\t\tswitch (result) {\n\t\t\t\t\tcase RecommendationsNotificationResult.Accepted: {\n\t\t\t\t\t\t// Accepted: Update the last prompted time and caches.\n\t\t\t\t\t\tthis.updateLastPromptedMediumExeTime(Date.now());\n\t\t\t\t\t\tthis.mediumImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tthis.addToRecommendedExecutables(tips[0].exeName, tips);\n\n\t\t\t\t\t\t// Schedule the next recommendation for next internval\n\t\t\t\t\t\tconst disposable1 = this._register(new MutableDisposable());\n\t\t\t\t\t\tdisposable1.value = disposableTimeout(() => { disposable1.dispose(); this.promptMediumImportanceExeBasedTip(); }, promptInterval);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RecommendationsNotificationResult.Ignored:\n\t\t\t\t\t\t// Ignored: Remove from the cache and prompt next recommendation\n\t\t\t\t\t\tthis.mediumImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase RecommendationsNotificationResult.IncompatibleWindow: {\n\t\t\t\t\t\t// Recommended in incompatible window. Schedule the prompt after active window change\n\t\t\t\t\t\tconst onActiveWindowChange = Event.once(Event.latch(Event.any(this.windowEvents.onDidOpenMainWindow, this.windowEvents.onDidFocusMainWindow)));\n\t\t\t\t\t\tthis._register(onActiveWindowChange(() => this.promptMediumImportanceExeBasedTip()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RecommendationsNotificationResult.TooMany: {\n\t\t\t\t\t\t// Too many notifications. Schedule the prompt after one hour\n\t\t\t\t\t\tconst disposable2 = this._register(new MutableDisposable());\n\t\t\t\t\t\tdisposable2.value = disposableTimeout(() => { disposable2.dispose(); this.promptMediumImportanceExeBasedTip(); }, 60 * 60 * 1000 /* 1 hour */);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate async promptExeRecommendations(tips: IExecutableBasedExtensionTip[]): Promise<RecommendationsNotificationResult> {\n\t\tconst installed = await this.extensionManagementService.getInstalled(ExtensionType.User);\n\t\tconst extensions = tips\n\t\t\t.filter(tip => !tip.whenNotInstalled || tip.whenNotInstalled.every(id => installed.every(local => !areSameExtensions(local.identifier, { id }))))\n\t\t\t.map(({ extensionId }) => extensionId.toLowerCase());\n\t\treturn this.extensionRecommendationNotificationService.promptImportantExtensionsInstallNotification({ extensions, source: RecommendationSource.EXE, name: tips[0].exeFriendlyName, searchValue: `@exe:\"${tips[0].exeName}\"` });\n\t}\n\n\tprivate getLastPromptedMediumExeTime(): number {\n\t\tlet value = this.storageService.getNumber(lastPromptedMediumImpExeTimeStorageKey, StorageScope.APPLICATION);\n\t\tif (!value) {\n\t\t\tvalue = Date.now();\n\t\t\tthis.updateLastPromptedMediumExeTime(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate updateLastPromptedMediumExeTime(value: number): void {\n\t\tthis.storageService.store(lastPromptedMediumImpExeTimeStorageKey, value, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tprivate getPromptedExecutableTips(): IStringDictionary<string[]> {\n\t\treturn JSON.parse(this.storageService.get(promptedExecutableTipsStorageKey, StorageScope.APPLICATION, '{}'));\n\t}\n\n\tprivate addToRecommendedExecutables(exeName: string, tips: IExecutableBasedExtensionTip[]) {\n\t\tconst promptedExecutableTips = this.getPromptedExecutableTips();\n\t\tpromptedExecutableTips[exeName] = tips.map(({ extensionId }) => extensionId.toLowerCase());\n\t\tthis.storageService.store(promptedExecutableTipsStorageKey, JSON.stringify(promptedExecutableTips), StorageScope.APPLICATION, StorageTarget.USER);\n\t}\n\n\tprivate groupByInstalled(recommendationsToSuggest: string[], local: ILocalExtension[]): { installed: string[]; uninstalled: string[] } {\n\t\tconst installed: string[] = [], uninstalled: string[] = [];\n\t\tconst installedExtensionsIds = local.reduce((result, i) => { result.add(i.identifier.id.toLowerCase()); return result; }, new Set<string>());\n\t\trecommendationsToSuggest.forEach(id => {\n\t\t\tif (installedExtensionsIds.has(id.toLowerCase())) {\n\t\t\t\tinstalled.push(id);\n\t\t\t} else {\n\t\t\t\tuninstalled.push(id);\n\t\t\t}\n\t\t});\n\t\treturn { installed, uninstalled };\n\t}\n\n\tprivate async getValidExecutableBasedExtensionTips(executableTips: Map<string, IExeBasedExtensionTips>): Promise<IExecutableBasedExtensionTip[]> {\n\t\tconst result: IExecutableBasedExtensionTip[] = [];\n\n\t\tconst checkedExecutables: Map<string, boolean> = new Map<string, boolean>();\n\t\tfor (const exeName of executableTips.keys()) {\n\t\t\tconst extensionTip = executableTips.get(exeName);\n\t\t\tif (!extensionTip || !isNonEmptyArray(extensionTip.recommendations)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst exePaths: string[] = [];\n\t\t\tif (isWindows) {\n\t\t\t\tif (extensionTip.windowsPath) {\n\t\t\t\t\texePaths.push(extensionTip.windowsPath.replace('%USERPROFILE%', () => env['USERPROFILE']!)\n\t\t\t\t\t\t.replace('%ProgramFiles(x86)%', () => env['ProgramFiles(x86)']!)\n\t\t\t\t\t\t.replace('%ProgramFiles%', () => env['ProgramFiles']!)\n\t\t\t\t\t\t.replace('%APPDATA%', () => env['APPDATA']!)\n\t\t\t\t\t\t.replace('%WINDIR%', () => env['WINDIR']!));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texePaths.push(join('/usr/local/bin', exeName));\n\t\t\t\texePaths.push(join('/usr/bin', exeName));\n\t\t\t\texePaths.push(join(this.userHome.fsPath, exeName));\n\t\t\t}\n\n\t\t\tfor (const exePath of exePaths) {\n\t\t\t\tlet exists = checkedExecutables.get(exePath);\n\t\t\t\tif (exists === undefined) {\n\t\t\t\t\texists = await this.fileService.exists(URI.file(exePath));\n\t\t\t\t\tcheckedExecutables.set(exePath, exists);\n\t\t\t\t}\n\t\t\t\tif (exists) {\n\t\t\t\t\tfor (const { extensionId, extensionName, isExtensionPack, whenNotInstalled } of extensionTip.recommendations) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\textensionName,\n\t\t\t\t\t\t\tisExtensionPack,\n\t\t\t\t\t\t\texeName,\n\t\t\t\t\t\t\texeFriendlyName: extensionTip.exeFriendlyName,\n\t\t\t\t\t\t\twindowsPath: extensionTip.windowsPath,\n\t\t\t\t\t\t\twhenNotInstalled: whenNotInstalled\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
