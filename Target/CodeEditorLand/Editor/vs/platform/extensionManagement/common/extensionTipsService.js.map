{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionTipsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from \"../../../base/common/arrays.js\";\nimport { disposableTimeout } from \"../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { join } from \"../../../base/common/path.js\";\nimport { isWindows } from \"../../../base/common/platform.js\";\nimport { env } from \"../../../base/common/process.js\";\nimport type { IConfigBasedExtensionTip as IRawConfigBasedExtensionTip } from \"../../../base/common/product.js\";\nimport { joinPath } from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport {\n\ttype IExtensionRecommendationNotificationService,\n\tRecommendationSource,\n\tRecommendationsNotificationResult,\n} from \"../../extensionRecommendations/common/extensionRecommendations.js\";\nimport { ExtensionType } from \"../../extensions/common/extensions.js\";\nimport { IFileService } from \"../../files/common/files.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\ttype IStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../storage/common/storage.js\";\nimport type { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport type {\n\tIConfigBasedExtensionTip,\n\tIExecutableBasedExtensionTip,\n\tIExtensionManagementService,\n\tIExtensionTipsService,\n\tILocalExtension,\n} from \"./extensionManagement.js\";\nimport { areSameExtensions } from \"./extensionManagementUtil.js\";\n\n//#region Base Extension Tips Service\n\nexport class ExtensionTipsService\n\textends Disposable\n\timplements IExtensionTipsService\n{\n\t_serviceBrand: any;\n\n\tprivate readonly allConfigBasedTips: Map<\n\t\tstring,\n\t\tIRawConfigBasedExtensionTip\n\t> = new Map<string, IRawConfigBasedExtensionTip>();\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tif (this.productService.configBasedExtensionTips) {\n\t\t\tObject.entries(\n\t\t\t\tthis.productService.configBasedExtensionTips,\n\t\t\t).forEach(([, value]) =>\n\t\t\t\tthis.allConfigBasedTips.set(value.configPath, value),\n\t\t\t);\n\t\t}\n\t}\n\n\tgetConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\treturn this.getValidConfigBasedTips(folder);\n\t}\n\n\tasync getImportantExecutableBasedTips(): Promise<\n\t\tIExecutableBasedExtensionTip[]\n\t> {\n\t\treturn [];\n\t}\n\n\tasync getOtherExecutableBasedTips(): Promise<\n\t\tIExecutableBasedExtensionTip[]\n\t> {\n\t\treturn [];\n\t}\n\n\tprivate async getValidConfigBasedTips(\n\t\tfolder: URI,\n\t): Promise<IConfigBasedExtensionTip[]> {\n\t\tconst result: IConfigBasedExtensionTip[] = [];\n\t\tfor (const [configPath, tip] of this.allConfigBasedTips) {\n\t\t\tif (tip.configScheme && tip.configScheme !== folder.scheme) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst content = (\n\t\t\t\t\tawait this.fileService.readFile(\n\t\t\t\t\t\tjoinPath(folder, configPath),\n\t\t\t\t\t)\n\t\t\t\t).value.toString();\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\ttip.recommendations,\n\t\t\t\t)) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!value.contentPattern ||\n\t\t\t\t\t\tnew RegExp(value.contentPattern, \"mig\").test(content)\n\t\t\t\t\t) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\textensionId: key,\n\t\t\t\t\t\t\textensionName: value.name,\n\t\t\t\t\t\t\tconfigName: tip.configName,\n\t\t\t\t\t\t\timportant: !!value.important,\n\t\t\t\t\t\t\tisExtensionPack: !!value.isExtensionPack,\n\t\t\t\t\t\t\twhenNotInstalled: value.whenNotInstalled,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t/* Ignore */\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n//#endregion\n\n//#region Native Extension Tips Service (enables unit testing having it here in \"common\")\n\ntype ExeExtensionRecommendationsClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Information about executable based extension recommendation\";\n\textensionId: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"id of the recommended extension\";\n\t};\n\texeName: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"name of the executable for which extension is being recommended\";\n\t};\n};\n\ntype IExeBasedExtensionTips = {\n\treadonly exeFriendlyName: string;\n\treadonly windowsPath?: string;\n\treadonly recommendations: {\n\t\textensionId: string;\n\t\textensionName: string;\n\t\tisExtensionPack: boolean;\n\t\twhenNotInstalled?: string[];\n\t}[];\n};\n\nconst promptedExecutableTipsStorageKey = \"extensionTips/promptedExecutableTips\";\nconst lastPromptedMediumImpExeTimeStorageKey =\n\t\"extensionTips/lastPromptedMediumImpExeTime\";\n\nexport abstract class AbstractNativeExtensionTipsService extends ExtensionTipsService {\n\tprivate readonly highImportanceExecutableTips: Map<\n\t\tstring,\n\t\tIExeBasedExtensionTips\n\t> = new Map<string, IExeBasedExtensionTips>();\n\tprivate readonly mediumImportanceExecutableTips: Map<\n\t\tstring,\n\t\tIExeBasedExtensionTips\n\t> = new Map<string, IExeBasedExtensionTips>();\n\tprivate readonly allOtherExecutableTips: Map<\n\t\tstring,\n\t\tIExeBasedExtensionTips\n\t> = new Map<string, IExeBasedExtensionTips>();\n\n\tprivate highImportanceTipsByExe = new Map<\n\t\tstring,\n\t\tIExecutableBasedExtensionTip[]\n\t>();\n\tprivate mediumImportanceTipsByExe = new Map<\n\t\tstring,\n\t\tIExecutableBasedExtensionTip[]\n\t>();\n\n\tconstructor(\n\t\tprivate readonly userHome: URI,\n\t\tprivate readonly windowEvents: {\n\t\t\treadonly onDidOpenMainWindow: Event<unknown>;\n\t\t\treadonly onDidFocusMainWindow: Event<unknown>;\n\t\t},\n\t\tprivate readonly telemetryService: ITelemetryService,\n\t\tprivate readonly extensionManagementService: IExtensionManagementService,\n\t\tprivate readonly storageService: IStorageService,\n\t\tprivate readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\tfileService: IFileService,\n\t\tproductService: IProductService,\n\t) {\n\t\tsuper(fileService, productService);\n\t\tif (productService.exeBasedExtensionTips) {\n\t\t\tObject.entries(productService.exeBasedExtensionTips).forEach(\n\t\t\t\t([key, exeBasedExtensionTip]) => {\n\t\t\t\t\tconst highImportanceRecommendations: {\n\t\t\t\t\t\textensionId: string;\n\t\t\t\t\t\textensionName: string;\n\t\t\t\t\t\tisExtensionPack: boolean;\n\t\t\t\t\t}[] = [];\n\t\t\t\t\tconst mediumImportanceRecommendations: {\n\t\t\t\t\t\textensionId: string;\n\t\t\t\t\t\textensionName: string;\n\t\t\t\t\t\tisExtensionPack: boolean;\n\t\t\t\t\t}[] = [];\n\t\t\t\t\tconst otherRecommendations: {\n\t\t\t\t\t\textensionId: string;\n\t\t\t\t\t\textensionName: string;\n\t\t\t\t\t\tisExtensionPack: boolean;\n\t\t\t\t\t}[] = [];\n\t\t\t\t\tObject.entries(\n\t\t\t\t\t\texeBasedExtensionTip.recommendations,\n\t\t\t\t\t).forEach(([extensionId, value]) => {\n\t\t\t\t\t\tif (value.important) {\n\t\t\t\t\t\t\tif (exeBasedExtensionTip.important) {\n\t\t\t\t\t\t\t\thighImportanceRecommendations.push({\n\t\t\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\t\t\textensionName: value.name,\n\t\t\t\t\t\t\t\t\tisExtensionPack: !!value.isExtensionPack,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmediumImportanceRecommendations.push({\n\t\t\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\t\t\textensionName: value.name,\n\t\t\t\t\t\t\t\t\tisExtensionPack: !!value.isExtensionPack,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\totherRecommendations.push({\n\t\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\t\textensionName: value.name,\n\t\t\t\t\t\t\t\tisExtensionPack: !!value.isExtensionPack,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (highImportanceRecommendations.length) {\n\t\t\t\t\t\tthis.highImportanceExecutableTips.set(key, {\n\t\t\t\t\t\t\texeFriendlyName: exeBasedExtensionTip.friendlyName,\n\t\t\t\t\t\t\twindowsPath: exeBasedExtensionTip.windowsPath,\n\t\t\t\t\t\t\trecommendations: highImportanceRecommendations,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (mediumImportanceRecommendations.length) {\n\t\t\t\t\t\tthis.mediumImportanceExecutableTips.set(key, {\n\t\t\t\t\t\t\texeFriendlyName: exeBasedExtensionTip.friendlyName,\n\t\t\t\t\t\t\twindowsPath: exeBasedExtensionTip.windowsPath,\n\t\t\t\t\t\t\trecommendations: mediumImportanceRecommendations,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (otherRecommendations.length) {\n\t\t\t\t\t\tthis.allOtherExecutableTips.set(key, {\n\t\t\t\t\t\t\texeFriendlyName: exeBasedExtensionTip.friendlyName,\n\t\t\t\t\t\t\twindowsPath: exeBasedExtensionTip.windowsPath,\n\t\t\t\t\t\t\trecommendations: otherRecommendations,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t/*\n\t\t\t3s has come out to be the good number to fetch and prompt important exe based recommendations\n\t\t\tAlso fetch important exe based recommendations for reporting telemetry\n\t\t*/\n\t\tdisposableTimeout(\n\t\t\tasync () => {\n\t\t\t\tawait this.collectTips();\n\t\t\t\tthis.promptHighImportanceExeBasedTip();\n\t\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t\t},\n\t\t\t3000,\n\t\t\tthis._store,\n\t\t);\n\t}\n\n\toverride async getImportantExecutableBasedTips(): Promise<\n\t\tIExecutableBasedExtensionTip[]\n\t> {\n\t\tconst highImportanceExeTips =\n\t\t\tawait this.getValidExecutableBasedExtensionTips(\n\t\t\t\tthis.highImportanceExecutableTips,\n\t\t\t);\n\t\tconst mediumImportanceExeTips =\n\t\t\tawait this.getValidExecutableBasedExtensionTips(\n\t\t\t\tthis.mediumImportanceExecutableTips,\n\t\t\t);\n\t\treturn [...highImportanceExeTips, ...mediumImportanceExeTips];\n\t}\n\n\toverride getOtherExecutableBasedTips(): Promise<\n\t\tIExecutableBasedExtensionTip[]\n\t> {\n\t\treturn this.getValidExecutableBasedExtensionTips(\n\t\t\tthis.allOtherExecutableTips,\n\t\t);\n\t}\n\n\tprivate async collectTips(): Promise<void> {\n\t\tconst highImportanceExeTips =\n\t\t\tawait this.getValidExecutableBasedExtensionTips(\n\t\t\t\tthis.highImportanceExecutableTips,\n\t\t\t);\n\t\tconst mediumImportanceExeTips =\n\t\t\tawait this.getValidExecutableBasedExtensionTips(\n\t\t\t\tthis.mediumImportanceExecutableTips,\n\t\t\t);\n\t\tconst local = await this.extensionManagementService.getInstalled();\n\n\t\tthis.highImportanceTipsByExe = this.groupImportantTipsByExe(\n\t\t\thighImportanceExeTips,\n\t\t\tlocal,\n\t\t);\n\t\tthis.mediumImportanceTipsByExe = this.groupImportantTipsByExe(\n\t\t\tmediumImportanceExeTips,\n\t\t\tlocal,\n\t\t);\n\t}\n\n\tprivate groupImportantTipsByExe(\n\t\timportantExeBasedTips: IExecutableBasedExtensionTip[],\n\t\tlocal: ILocalExtension[],\n\t): Map<string, IExecutableBasedExtensionTip[]> {\n\t\tconst importantExeBasedRecommendations = new Map<\n\t\t\tstring,\n\t\t\tIExecutableBasedExtensionTip\n\t\t>();\n\t\timportantExeBasedTips.forEach((tip) =>\n\t\t\timportantExeBasedRecommendations.set(\n\t\t\t\ttip.extensionId.toLowerCase(),\n\t\t\t\ttip,\n\t\t\t),\n\t\t);\n\n\t\tconst { installed, uninstalled: recommendations } =\n\t\t\tthis.groupByInstalled(\n\t\t\t\t[...importantExeBasedRecommendations.keys()],\n\t\t\t\tlocal,\n\t\t\t);\n\n\t\t/* Log installed and uninstalled exe based recommendations */\n\t\tfor (const extensionId of installed) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip) {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t{ exeName: string; extensionId: string },\n\t\t\t\t\tExeExtensionRecommendationsClassification\n\t\t\t\t>(\"exeExtensionRecommendations:alreadyInstalled\", {\n\t\t\t\t\textensionId,\n\t\t\t\t\texeName: tip.exeName,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tfor (const extensionId of recommendations) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip) {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t{ exeName: string; extensionId: string },\n\t\t\t\t\tExeExtensionRecommendationsClassification\n\t\t\t\t>(\"exeExtensionRecommendations:notInstalled\", {\n\t\t\t\t\textensionId,\n\t\t\t\t\texeName: tip.exeName,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst promptedExecutableTips = this.getPromptedExecutableTips();\n\t\tconst tipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\t\tfor (const extensionId of recommendations) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (\n\t\t\t\ttip &&\n\t\t\t\t(!promptedExecutableTips[tip.exeName] ||\n\t\t\t\t\t!promptedExecutableTips[tip.exeName].includes(\n\t\t\t\t\t\ttip.extensionId,\n\t\t\t\t\t))\n\t\t\t) {\n\t\t\t\tlet tips = tipsByExe.get(tip.exeName);\n\t\t\t\tif (!tips) {\n\t\t\t\t\ttips = [];\n\t\t\t\t\ttipsByExe.set(tip.exeName, tips);\n\t\t\t\t}\n\t\t\t\ttips.push(tip);\n\t\t\t}\n\t\t}\n\n\t\treturn tipsByExe;\n\t}\n\n\t/**\n\t * High importance tips are prompted once per restart session\n\t */\n\tprivate promptHighImportanceExeBasedTip(): void {\n\t\tif (this.highImportanceTipsByExe.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [exeName, tips] = [...this.highImportanceTipsByExe.entries()][0];\n\t\tthis.promptExeRecommendations(tips).then((result) => {\n\t\t\tswitch (result) {\n\t\t\t\tcase RecommendationsNotificationResult.Accepted:\n\t\t\t\t\tthis.addToRecommendedExecutables(tips[0].exeName, tips);\n\t\t\t\t\tbreak;\n\t\t\t\tcase RecommendationsNotificationResult.Ignored:\n\t\t\t\t\tthis.highImportanceTipsByExe.delete(exeName);\n\t\t\t\t\tbreak;\n\t\t\t\tcase RecommendationsNotificationResult.IncompatibleWindow: {\n\t\t\t\t\t// Recommended in incompatible window. Schedule the prompt after active window change\n\t\t\t\t\tconst onActiveWindowChange = Event.once(\n\t\t\t\t\t\tEvent.latch(\n\t\t\t\t\t\t\tEvent.any(\n\t\t\t\t\t\t\t\tthis.windowEvents.onDidOpenMainWindow,\n\t\t\t\t\t\t\t\tthis.windowEvents.onDidFocusMainWindow,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tonActiveWindowChange(() =>\n\t\t\t\t\t\t\tthis.promptHighImportanceExeBasedTip(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase RecommendationsNotificationResult.TooMany: {\n\t\t\t\t\t// Too many notifications. Schedule the prompt after one hour\n\t\t\t\t\tconst disposable = this._register(new MutableDisposable());\n\t\t\t\t\tdisposable.value = disposableTimeout(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\t\tthis.promptHighImportanceExeBasedTip();\n\t\t\t\t\t\t},\n\t\t\t\t\t\t60 * 60 * 1000 /* 1 hour */,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Medium importance tips are prompted once per 7 days\n\t */\n\tprivate promptMediumImportanceExeBasedTip(): void {\n\t\tif (this.mediumImportanceTipsByExe.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lastPromptedMediumExeTime = this.getLastPromptedMediumExeTime();\n\t\tconst timeSinceLastPrompt = Date.now() - lastPromptedMediumExeTime;\n\t\tconst promptInterval = 7 * 24 * 60 * 60 * 1000; // 7 Days\n\t\tif (timeSinceLastPrompt < promptInterval) {\n\t\t\t// Wait until interval and prompt\n\t\t\tconst disposable = this._register(new MutableDisposable());\n\t\t\tdisposable.value = disposableTimeout(() => {\n\t\t\t\tdisposable.dispose();\n\t\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t\t}, promptInterval - timeSinceLastPrompt);\n\t\t\treturn;\n\t\t}\n\n\t\tconst [exeName, tips] = [\n\t\t\t...this.mediumImportanceTipsByExe.entries(),\n\t\t][0];\n\t\tthis.promptExeRecommendations(tips).then((result) => {\n\t\t\tswitch (result) {\n\t\t\t\tcase RecommendationsNotificationResult.Accepted: {\n\t\t\t\t\t// Accepted: Update the last prompted time and caches.\n\t\t\t\t\tthis.updateLastPromptedMediumExeTime(Date.now());\n\t\t\t\t\tthis.mediumImportanceTipsByExe.delete(exeName);\n\t\t\t\t\tthis.addToRecommendedExecutables(tips[0].exeName, tips);\n\n\t\t\t\t\t// Schedule the next recommendation for next internval\n\t\t\t\t\tconst disposable1 = this._register(new MutableDisposable());\n\t\t\t\t\tdisposable1.value = disposableTimeout(() => {\n\t\t\t\t\t\tdisposable1.dispose();\n\t\t\t\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t\t\t\t}, promptInterval);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase RecommendationsNotificationResult.Ignored:\n\t\t\t\t\t// Ignored: Remove from the cache and prompt next recommendation\n\t\t\t\t\tthis.mediumImportanceTipsByExe.delete(exeName);\n\t\t\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RecommendationsNotificationResult.IncompatibleWindow: {\n\t\t\t\t\t// Recommended in incompatible window. Schedule the prompt after active window change\n\t\t\t\t\tconst onActiveWindowChange = Event.once(\n\t\t\t\t\t\tEvent.latch(\n\t\t\t\t\t\t\tEvent.any(\n\t\t\t\t\t\t\t\tthis.windowEvents.onDidOpenMainWindow,\n\t\t\t\t\t\t\t\tthis.windowEvents.onDidFocusMainWindow,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tonActiveWindowChange(() =>\n\t\t\t\t\t\t\tthis.promptMediumImportanceExeBasedTip(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase RecommendationsNotificationResult.TooMany: {\n\t\t\t\t\t// Too many notifications. Schedule the prompt after one hour\n\t\t\t\t\tconst disposable2 = this._register(new MutableDisposable());\n\t\t\t\t\tdisposable2.value = disposableTimeout(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tdisposable2.dispose();\n\t\t\t\t\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t\t\t\t\t},\n\t\t\t\t\t\t60 * 60 * 1000 /* 1 hour */,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async promptExeRecommendations(\n\t\ttips: IExecutableBasedExtensionTip[],\n\t): Promise<RecommendationsNotificationResult> {\n\t\tconst installed = await this.extensionManagementService.getInstalled(\n\t\t\tExtensionType.User,\n\t\t);\n\t\tconst extensions = tips\n\t\t\t.filter(\n\t\t\t\t(tip) =>\n\t\t\t\t\t!tip.whenNotInstalled ||\n\t\t\t\t\ttip.whenNotInstalled.every((id) =>\n\t\t\t\t\t\tinstalled.every(\n\t\t\t\t\t\t\t(local) =>\n\t\t\t\t\t\t\t\t!areSameExtensions(local.identifier, { id }),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t)\n\t\t\t.map(({ extensionId }) => extensionId.toLowerCase());\n\t\treturn this.extensionRecommendationNotificationService.promptImportantExtensionsInstallNotification(\n\t\t\t{\n\t\t\t\textensions,\n\t\t\t\tsource: RecommendationSource.EXE,\n\t\t\t\tname: tips[0].exeFriendlyName,\n\t\t\t\tsearchValue: `@exe:\"${tips[0].exeName}\"`,\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate getLastPromptedMediumExeTime(): number {\n\t\tlet value = this.storageService.getNumber(\n\t\t\tlastPromptedMediumImpExeTimeStorageKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tif (!value) {\n\t\t\tvalue = Date.now();\n\t\t\tthis.updateLastPromptedMediumExeTime(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate updateLastPromptedMediumExeTime(value: number): void {\n\t\tthis.storageService.store(\n\t\t\tlastPromptedMediumImpExeTimeStorageKey,\n\t\t\tvalue,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tprivate getPromptedExecutableTips(): IStringDictionary<string[]> {\n\t\treturn JSON.parse(\n\t\t\tthis.storageService.get(\n\t\t\t\tpromptedExecutableTipsStorageKey,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\"{}\",\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate addToRecommendedExecutables(\n\t\texeName: string,\n\t\ttips: IExecutableBasedExtensionTip[],\n\t) {\n\t\tconst promptedExecutableTips = this.getPromptedExecutableTips();\n\t\tpromptedExecutableTips[exeName] = tips.map(({ extensionId }) =>\n\t\t\textensionId.toLowerCase(),\n\t\t);\n\t\tthis.storageService.store(\n\t\t\tpromptedExecutableTipsStorageKey,\n\t\t\tJSON.stringify(promptedExecutableTips),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t}\n\n\tprivate groupByInstalled(\n\t\trecommendationsToSuggest: string[],\n\t\tlocal: ILocalExtension[],\n\t): { installed: string[]; uninstalled: string[] } {\n\t\tconst installed: string[] = [],\n\t\t\tuninstalled: string[] = [];\n\t\tconst installedExtensionsIds = local.reduce((result, i) => {\n\t\t\tresult.add(i.identifier.id.toLowerCase());\n\t\t\treturn result;\n\t\t}, new Set<string>());\n\t\trecommendationsToSuggest.forEach((id) => {\n\t\t\tif (installedExtensionsIds.has(id.toLowerCase())) {\n\t\t\t\tinstalled.push(id);\n\t\t\t} else {\n\t\t\t\tuninstalled.push(id);\n\t\t\t}\n\t\t});\n\t\treturn { installed, uninstalled };\n\t}\n\n\tprivate async getValidExecutableBasedExtensionTips(\n\t\texecutableTips: Map<string, IExeBasedExtensionTips>,\n\t): Promise<IExecutableBasedExtensionTip[]> {\n\t\tconst result: IExecutableBasedExtensionTip[] = [];\n\n\t\tconst checkedExecutables: Map<string, boolean> = new Map<\n\t\t\tstring,\n\t\t\tboolean\n\t\t>();\n\t\tfor (const exeName of executableTips.keys()) {\n\t\t\tconst extensionTip = executableTips.get(exeName);\n\t\t\tif (\n\t\t\t\t!extensionTip ||\n\t\t\t\t!isNonEmptyArray(extensionTip.recommendations)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst exePaths: string[] = [];\n\t\t\tif (isWindows) {\n\t\t\t\tif (extensionTip.windowsPath) {\n\t\t\t\t\texePaths.push(\n\t\t\t\t\t\textensionTip.windowsPath\n\t\t\t\t\t\t\t.replace(\"%USERPROFILE%\", () => env[\"USERPROFILE\"]!)\n\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t\"%ProgramFiles(x86)%\",\n\t\t\t\t\t\t\t\t() => env[\"ProgramFiles(x86)\"]!,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t\"%ProgramFiles%\",\n\t\t\t\t\t\t\t\t() => env[\"ProgramFiles\"]!,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.replace(\"%APPDATA%\", () => env[\"APPDATA\"]!)\n\t\t\t\t\t\t\t.replace(\"%WINDIR%\", () => env[\"WINDIR\"]!),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texePaths.push(join(\"/usr/local/bin\", exeName));\n\t\t\t\texePaths.push(join(\"/usr/bin\", exeName));\n\t\t\t\texePaths.push(join(this.userHome.fsPath, exeName));\n\t\t\t}\n\n\t\t\tfor (const exePath of exePaths) {\n\t\t\t\tlet exists = checkedExecutables.get(exePath);\n\t\t\t\tif (exists === undefined) {\n\t\t\t\t\texists = await this.fileService.exists(URI.file(exePath));\n\t\t\t\t\tcheckedExecutables.set(exePath, exists);\n\t\t\t\t}\n\t\t\t\tif (exists) {\n\t\t\t\t\tfor (const {\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\textensionName,\n\t\t\t\t\t\tisExtensionPack,\n\t\t\t\t\t\twhenNotInstalled,\n\t\t\t\t\t} of extensionTip.recommendations) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\textensionName,\n\t\t\t\t\t\t\tisExtensionPack,\n\t\t\t\t\t\t\texeName,\n\t\t\t\t\t\t\texeFriendlyName: extensionTip.exeFriendlyName,\n\t\t\t\t\t\t\twindowsPath: extensionTip.windowsPath,\n\t\t\t\t\t\t\twhenNotInstalled: whenNotInstalled,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
