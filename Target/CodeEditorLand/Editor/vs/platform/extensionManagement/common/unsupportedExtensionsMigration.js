import{CancellationToken as b}from"../../../base/common/cancellation.js";import{ExtensionType as y}from"../../extensions/common/extensions.js";import{InstallOperation as h}from"./extensionManagement.js";import{areSameExtensions as d,getExtensionId as c}from"./extensionManagementUtil.js";async function P(o,u,E,l,i){try{const r=await o.getExtensionsControlManifest();if(!r.deprecated)return;const f=await o.getInstalled(y.User);for(const[g,p]of Object.entries(r.deprecated)){if(!p?.extension)continue;const{id:s,autoMigrate:x,preRelease:I}=p.extension;if(!x)continue;const e=f.find(n=>d(n.identifier,{id:g}));if(!e)continue;const m=(await u.getExtensions([{id:s,preRelease:I}],{targetPlatform:await o.getTargetPlatform(),compatible:!0},b.None))[0];if(!m){i.info(`Skipping migrating '${e.identifier.id}' extension because, the comaptible target '${s}' extension is not found`);continue}try{i.info(`Migrating '${e.identifier.id}' extension to '${s}' extension...`);const n=!l.getDisabledExtensions().some(a=>d(a,e.identifier));await o.uninstall(e),i.info(`Uninstalled the unsupported extension '${e.identifier.id}'`);let t=f.find(a=>d(a.identifier,{id:s}));(!t||!t.isPreReleaseVersion&&n)&&(t=await o.installFromGallery(m,{installPreReleaseVersion:!0,isMachineScoped:e.isMachineScoped,operation:h.Migrate}),i.info(`Installed the pre-release extension '${t.identifier.id}'`),n||(await l.disableExtension(t.identifier),i.info(`Disabled the pre-release extension '${t.identifier.id}' because the unsupported extension '${e.identifier.id}' is disabled`)),x.storage&&(E.addToMigrationList(c(e.manifest.publisher,e.manifest.name),c(t.manifest.publisher,t.manifest.name)),i.info("Added pre-release extension to the storage migration list"))),i.info(`Migrated '${e.identifier.id}' extension to '${s}' extension.`)}catch(n){i.error(n)}}}catch(r){i.error(r)}}export{P as migrateUnsupportedExtensions};
