{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct, isNonEmptyArray } from \"../../../base/common/arrays.js\";\nimport {\n\tBarrier,\n\ttype CancelablePromise,\n\tcreateCancelablePromise,\n} from \"../../../base/common/async.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\tCancellationError,\n\tgetErrorMessage,\n\tisCancellationError,\n} from \"../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable, toDisposable } from \"../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../base/common/map.js\";\nimport { isWeb } from \"../../../base/common/platform.js\";\nimport { isDefined } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport * as nls from \"../../../nls.js\";\nimport { areApiProposalsCompatible } from \"../../extensions/common/extensionValidator.js\";\nimport {\n\tExtensionType,\n\ttype IExtensionManifest,\n\ttype TargetPlatform,\n\tisApplicationScopedExtension,\n} from \"../../extensions/common/extensions.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport { IUserDataProfilesService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\ttype DidUninstallExtensionEvent,\n\ttype DidUpdateExtensionMetadata,\n\tEXTENSION_INSTALL_DEP_PACK_CONTEXT,\n\tEXTENSION_INSTALL_SOURCE_CONTEXT,\n\tExtensionGalleryError,\n\tExtensionGalleryErrorCode,\n\tExtensionManagementError,\n\tExtensionManagementErrorCode,\n\tIExtensionGalleryService,\n\ttype IExtensionIdentifier,\n\ttype IExtensionManagementParticipant,\n\ttype IExtensionManagementService,\n\ttype IExtensionsControlManifest,\n\ttype IGalleryExtension,\n\ttype ILocalExtension,\n\ttype IProductVersion,\n\ttype InstallExtensionEvent,\n\ttype InstallExtensionInfo,\n\ttype InstallExtensionResult,\n\tInstallOperation,\n\ttype InstallOptions,\n\ttype Metadata,\n\tStatisticType,\n\tTargetPlatformToString,\n\ttype UninstallExtensionEvent,\n\ttype UninstallExtensionInfo,\n\ttype UninstallOptions,\n\tisTargetPlatformCompatible,\n} from \"./extensionManagement.js\";\nimport {\n\tExtensionKey,\n\tareSameExtensions,\n\tgetGalleryExtensionId,\n\tgetGalleryExtensionTelemetryData,\n\tgetLocalExtensionTelemetryData,\n} from \"./extensionManagementUtil.js\";\n\nexport type ExtensionVerificationStatus = boolean | string;\nexport type InstallableExtension = {\n\treadonly manifest: IExtensionManifest;\n\textension: IGalleryExtension | URI;\n\toptions: InstallOptions;\n};\n\nexport type InstallExtensionTaskOptions = InstallOptions & {\n\treadonly profileLocation: URI;\n\treadonly productVersion: IProductVersion;\n};\nexport interface IInstallExtensionTask {\n\treadonly manifest: IExtensionManifest;\n\treadonly identifier: IExtensionIdentifier;\n\treadonly source: IGalleryExtension | URI;\n\treadonly operation: InstallOperation;\n\treadonly options: InstallExtensionTaskOptions;\n\treadonly verificationStatus?: ExtensionVerificationStatus;\n\trun(): Promise<ILocalExtension>;\n\twaitUntilTaskIsFinished(): Promise<ILocalExtension>;\n\tcancel(): void;\n}\n\nexport type UninstallExtensionTaskOptions = UninstallOptions & {\n\treadonly profileLocation: URI;\n};\nexport interface IUninstallExtensionTask {\n\treadonly options: UninstallExtensionTaskOptions;\n\treadonly extension: ILocalExtension;\n\trun(): Promise<void>;\n\twaitUntilTaskIsFinished(): Promise<void>;\n\tcancel(): void;\n}\n\nexport abstract class AbstractExtensionManagementService\n\textends Disposable\n\timplements IExtensionManagementService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate extensionsControlManifest:\n\t\t| Promise<IExtensionsControlManifest>\n\t\t| undefined;\n\tprivate lastReportTimestamp = 0;\n\tprivate readonly installingExtensions = new Map<\n\t\tstring,\n\t\t{ task: IInstallExtensionTask; waitingTasks: IInstallExtensionTask[] }\n\t>();\n\tprivate readonly uninstallingExtensions = new Map<\n\t\tstring,\n\t\tIUninstallExtensionTask\n\t>();\n\n\tprivate readonly _onInstallExtension = this._register(\n\t\tnew Emitter<InstallExtensionEvent>(),\n\t);\n\tget onInstallExtension() {\n\t\treturn this._onInstallExtension.event;\n\t}\n\n\tprotected readonly _onDidInstallExtensions = this._register(\n\t\tnew Emitter<InstallExtensionResult[]>(),\n\t);\n\tget onDidInstallExtensions() {\n\t\treturn this._onDidInstallExtensions.event;\n\t}\n\n\tprotected readonly _onUninstallExtension = this._register(\n\t\tnew Emitter<UninstallExtensionEvent>(),\n\t);\n\tget onUninstallExtension() {\n\t\treturn this._onUninstallExtension.event;\n\t}\n\n\tprotected _onDidUninstallExtension = this._register(\n\t\tnew Emitter<DidUninstallExtensionEvent>(),\n\t);\n\tget onDidUninstallExtension() {\n\t\treturn this._onDidUninstallExtension.event;\n\t}\n\n\tprotected readonly _onDidUpdateExtensionMetadata = this._register(\n\t\tnew Emitter<DidUpdateExtensionMetadata>(),\n\t);\n\tget onDidUpdateExtensionMetadata() {\n\t\treturn this._onDidUpdateExtensionMetadata.event;\n\t}\n\n\tprivate readonly participants: IExtensionManagementParticipant[] = [];\n\n\tconstructor(\n\t\t@IExtensionGalleryService protected readonly galleryService: IExtensionGalleryService,\n\t\t@ITelemetryService protected readonly telemetryService: ITelemetryService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IProductService protected readonly productService: IProductService,\n\t\t@IUserDataProfilesService protected readonly userDataProfilesService: IUserDataProfilesService,\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.installingExtensions.forEach(({ task }) => task.cancel());\n\t\t\tthis.uninstallingExtensions.forEach(promise => promise.cancel());\n\t\t\tthis.installingExtensions.clear();\n\t\t\tthis.uninstallingExtensions.clear();\n\t\t}));\n\t}\n\n\tasync canInstall(extension: IGalleryExtension): Promise<boolean> {\n\t\tconst currentTargetPlatform = await this.getTargetPlatform();\n\t\treturn extension.allTargetPlatforms.some((targetPlatform) =>\n\t\t\tisTargetPlatformCompatible(\n\t\t\t\ttargetPlatform,\n\t\t\t\textension.allTargetPlatforms,\n\t\t\t\tcurrentTargetPlatform,\n\t\t\t),\n\t\t);\n\t}\n\n\tasync installFromGallery(\n\t\textension: IGalleryExtension,\n\t\toptions: InstallOptions = {},\n\t): Promise<ILocalExtension> {\n\t\ttry {\n\t\t\tconst results = await this.installGalleryExtensions([\n\t\t\t\t{ extension, options },\n\t\t\t]);\n\t\t\tconst result = results.find(({ identifier }) =>\n\t\t\t\tareSameExtensions(identifier, extension.identifier),\n\t\t\t);\n\t\t\tif (result?.local) {\n\t\t\t\treturn result?.local;\n\t\t\t}\n\t\t\tif (result?.error) {\n\t\t\t\tthrow result.error;\n\t\t\t}\n\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t`Unknown error while installing extension ${extension.identifier.id}`,\n\t\t\t\tExtensionManagementErrorCode.Unknown,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthrow toExtensionManagementError(error);\n\t\t}\n\t}\n\n\tasync installGalleryExtensions(\n\t\textensions: InstallExtensionInfo[],\n\t): Promise<InstallExtensionResult[]> {\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\tthrow new ExtensionManagementError(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"MarketPlaceDisabled\",\n\t\t\t\t\t\"Marketplace is not enabled\",\n\t\t\t\t),\n\t\t\t\tExtensionManagementErrorCode.NotAllowed,\n\t\t\t);\n\t\t}\n\n\t\tconst results: InstallExtensionResult[] = [];\n\t\tconst installableExtensions: InstallableExtension[] = [];\n\n\t\tawait Promise.allSettled(\n\t\t\textensions.map(async ({ extension, options }) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst compatible = await this.checkAndGetCompatibleVersion(\n\t\t\t\t\t\textension,\n\t\t\t\t\t\t!!options?.installGivenVersion,\n\t\t\t\t\t\t!!options?.installPreReleaseVersion,\n\t\t\t\t\t\toptions.productVersion ?? {\n\t\t\t\t\t\t\tversion: this.productService.version,\n\t\t\t\t\t\t\tdate: this.productService.date,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tinstallableExtensions.push({ ...compatible, options });\n\t\t\t\t} catch (error) {\n\t\t\t\t\tresults.push({\n\t\t\t\t\t\tidentifier: extension.identifier,\n\t\t\t\t\t\toperation: InstallOperation.Install,\n\t\t\t\t\t\tsource: extension,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tprofileLocation:\n\t\t\t\t\t\t\toptions.profileLocation ??\n\t\t\t\t\t\t\tthis.getCurrentExtensionsManifestLocation(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tif (installableExtensions.length) {\n\t\t\tresults.push(\n\t\t\t\t...(await this.installExtensions(installableExtensions)),\n\t\t\t);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tasync uninstall(\n\t\textension: ILocalExtension,\n\t\toptions?: UninstallOptions,\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionManagementService#uninstall\",\n\t\t\textension.identifier.id,\n\t\t);\n\t\treturn this.uninstallExtensions([{ extension, options }]);\n\t}\n\n\tasync toggleAppliationScope(\n\t\textension: ILocalExtension,\n\t\tfromProfileLocation: URI,\n\t): Promise<ILocalExtension> {\n\t\tif (\n\t\t\tisApplicationScopedExtension(extension.manifest) ||\n\t\t\textension.isBuiltin\n\t\t) {\n\t\t\treturn extension;\n\t\t}\n\n\t\tif (extension.isApplicationScoped) {\n\t\t\tlet local = await this.updateMetadata(\n\t\t\t\textension,\n\t\t\t\t{ isApplicationScoped: false },\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t);\n\t\t\tif (\n\t\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tfromProfileLocation,\n\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tlocal = await this.copyExtension(\n\t\t\t\t\textension,\n\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\tfromProfileLocation,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const profile of this.userDataProfilesService.profiles) {\n\t\t\t\tconst existing = (\n\t\t\t\t\tawait this.getInstalled(\n\t\t\t\t\t\tExtensionType.User,\n\t\t\t\t\t\tprofile.extensionsResource,\n\t\t\t\t\t)\n\t\t\t\t).find((e) =>\n\t\t\t\t\tareSameExtensions(e.identifier, extension.identifier),\n\t\t\t\t);\n\t\t\t\tif (existing) {\n\t\t\t\t\tthis._onDidUpdateExtensionMetadata.fire({\n\t\t\t\t\t\tlocal: existing,\n\t\t\t\t\t\tprofileLocation: profile.extensionsResource,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis._onDidUninstallExtension.fire({\n\t\t\t\t\t\tidentifier: extension.identifier,\n\t\t\t\t\t\tprofileLocation: profile.extensionsResource,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn local;\n\t\t} else {\n\t\t\tconst local = this.uriIdentityService.extUri.isEqual(\n\t\t\t\tfromProfileLocation,\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t)\n\t\t\t\t? await this.updateMetadata(\n\t\t\t\t\t\textension,\n\t\t\t\t\t\t{ isApplicationScoped: true },\n\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\t)\n\t\t\t\t: await this.copyExtension(\n\t\t\t\t\t\textension,\n\t\t\t\t\t\tfromProfileLocation,\n\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\t\t{ isApplicationScoped: true },\n\t\t\t\t\t);\n\n\t\t\tthis._onDidInstallExtensions.fire([\n\t\t\t\t{\n\t\t\t\t\tidentifier: local.identifier,\n\t\t\t\t\toperation: InstallOperation.Install,\n\t\t\t\t\tlocal,\n\t\t\t\t\tprofileLocation:\n\t\t\t\t\t\tthis.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\tapplicationScoped: true,\n\t\t\t\t},\n\t\t\t]);\n\t\t\treturn local;\n\t\t}\n\t}\n\n\tgetExtensionsControlManifest(): Promise<IExtensionsControlManifest> {\n\t\tconst now = new Date().getTime();\n\n\t\tif (\n\t\t\t!this.extensionsControlManifest ||\n\t\t\tnow - this.lastReportTimestamp > 1000 * 60 * 5\n\t\t) {\n\t\t\t// 5 minute cache freshness\n\t\t\tthis.extensionsControlManifest = this.updateControlCache();\n\t\t\tthis.lastReportTimestamp = now;\n\t\t}\n\n\t\treturn this.extensionsControlManifest;\n\t}\n\n\tregisterParticipant(participant: IExtensionManagementParticipant): void {\n\t\tthis.participants.push(participant);\n\t}\n\n\tasync resetPinnedStateForAllUserExtensions(pinned: boolean): Promise<void> {\n\t\ttry {\n\t\t\tawait this.joinAllSettled(\n\t\t\t\tthis.userDataProfilesService.profiles.map(async (profile) => {\n\t\t\t\t\tconst extensions = await this.getInstalled(\n\t\t\t\t\t\tExtensionType.User,\n\t\t\t\t\t\tprofile.extensionsResource,\n\t\t\t\t\t);\n\t\t\t\t\tawait this.joinAllSettled(\n\t\t\t\t\t\textensions.map(async (extension) => {\n\t\t\t\t\t\t\tif (extension.pinned !== pinned) {\n\t\t\t\t\t\t\t\tawait this.updateMetadata(\n\t\t\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\t\t\t{ pinned },\n\t\t\t\t\t\t\t\t\tprofile.extensionsResource,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\n\t\t\t\t\"Error while resetting pinned state for all user extensions\",\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprotected async installExtensions(\n\t\textensions: InstallableExtension[],\n\t): Promise<InstallExtensionResult[]> {\n\t\tconst installExtensionResultsMap = new Map<\n\t\t\tstring,\n\t\t\tInstallExtensionResult & { profileLocation: URI }\n\t\t>();\n\t\tconst installingExtensionsMap = new Map<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\ttask: IInstallExtensionTask;\n\t\t\t\troot: IInstallExtensionTask | undefined;\n\t\t\t}\n\t\t>();\n\t\tconst alreadyRequestedInstallations: Promise<any>[] = [];\n\n\t\tconst getInstallExtensionTaskKey = (\n\t\t\textension: IGalleryExtension,\n\t\t\tprofileLocation: URI,\n\t\t) =>\n\t\t\t`${ExtensionKey.create(extension).toString()}-${profileLocation.toString()}`;\n\t\tconst createInstallExtensionTask = (\n\t\t\tmanifest: IExtensionManifest,\n\t\t\textension: IGalleryExtension | URI,\n\t\t\toptions: InstallExtensionTaskOptions,\n\t\t\troot: IInstallExtensionTask | undefined,\n\t\t): void => {\n\t\t\tconst installExtensionTask = this.createInstallExtensionTask(\n\t\t\t\tmanifest,\n\t\t\t\textension,\n\t\t\t\toptions,\n\t\t\t);\n\t\t\tconst key = `${getGalleryExtensionId(manifest.publisher, manifest.name)}-${options.profileLocation.toString()}`;\n\t\t\tinstallingExtensionsMap.set(key, {\n\t\t\t\ttask: installExtensionTask,\n\t\t\t\troot,\n\t\t\t});\n\t\t\tthis._onInstallExtension.fire({\n\t\t\t\tidentifier: installExtensionTask.identifier,\n\t\t\t\tsource: extension,\n\t\t\t\tprofileLocation: options.profileLocation,\n\t\t\t});\n\t\t\tthis.logService.info(\n\t\t\t\t\"Installing extension:\",\n\t\t\t\tinstallExtensionTask.identifier.id,\n\t\t\t\toptions,\n\t\t\t);\n\t\t\t// only cache gallery extensions tasks\n\t\t\tif (!URI.isUri(extension)) {\n\t\t\t\tthis.installingExtensions.set(\n\t\t\t\t\tgetInstallExtensionTaskKey(\n\t\t\t\t\t\textension,\n\t\t\t\t\t\toptions.profileLocation,\n\t\t\t\t\t),\n\t\t\t\t\t{ task: installExtensionTask, waitingTasks: [] },\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\t// Start installing extensions\n\t\t\tfor (const { manifest, extension, options } of extensions) {\n\t\t\t\tconst isApplicationScoped =\n\t\t\t\t\toptions.isApplicationScoped ||\n\t\t\t\t\toptions.isBuiltin ||\n\t\t\t\t\tisApplicationScopedExtension(manifest);\n\t\t\t\tconst installExtensionTaskOptions: InstallExtensionTaskOptions =\n\t\t\t\t\t{\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\tinstallOnlyNewlyAddedFromExtensionPack:\n\t\t\t\t\t\t\toptions.installOnlyNewlyAddedFromExtensionPack ??\n\t\t\t\t\t\t\t!URI.isUri(\n\t\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\t) /* always true for gallery extensions */,\n\t\t\t\t\t\tisApplicationScoped,\n\t\t\t\t\t\tprofileLocation: isApplicationScoped\n\t\t\t\t\t\t\t? this.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t\t\t.extensionsResource\n\t\t\t\t\t\t\t: (options.profileLocation ??\n\t\t\t\t\t\t\t\tthis.getCurrentExtensionsManifestLocation()),\n\t\t\t\t\t\tproductVersion: options.productVersion ?? {\n\t\t\t\t\t\t\tversion: this.productService.version,\n\t\t\t\t\t\t\tdate: this.productService.date,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\tconst existingInstallExtensionTask = URI.isUri(extension)\n\t\t\t\t\t? undefined\n\t\t\t\t\t: this.installingExtensions.get(\n\t\t\t\t\t\t\tgetInstallExtensionTaskKey(\n\t\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\t\tinstallExtensionTaskOptions.profileLocation,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\tif (existingInstallExtensionTask) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Extension is already requested to install\",\n\t\t\t\t\t\texistingInstallExtensionTask.task.identifier.id,\n\t\t\t\t\t\tinstallExtensionTaskOptions.profileLocation.toString(),\n\t\t\t\t\t);\n\t\t\t\t\talreadyRequestedInstallations.push(\n\t\t\t\t\t\texistingInstallExtensionTask.task.waitUntilTaskIsFinished(),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tcreateInstallExtensionTask(\n\t\t\t\t\t\tmanifest,\n\t\t\t\t\t\textension,\n\t\t\t\t\t\tinstallExtensionTaskOptions,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// collect and start installing all dependencies and pack extensions\n\t\t\tawait Promise.all(\n\t\t\t\t[...installingExtensionsMap.values()].map(async ({ task }) => {\n\t\t\t\t\tif (task.options.donotIncludePackAndDependencies) {\n\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\"Installing the extension without checking dependencies and pack\",\n\t\t\t\t\t\t\ttask.identifier.id,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst allDepsAndPackExtensionsToInstall =\n\t\t\t\t\t\t\t\tawait this.getAllDepsAndPackExtensions(\n\t\t\t\t\t\t\t\t\ttask.identifier,\n\t\t\t\t\t\t\t\t\ttask.manifest,\n\t\t\t\t\t\t\t\t\t!!task.options\n\t\t\t\t\t\t\t\t\t\t.installOnlyNewlyAddedFromExtensionPack,\n\t\t\t\t\t\t\t\t\t!!task.options.installPreReleaseVersion,\n\t\t\t\t\t\t\t\t\ttask.options.profileLocation,\n\t\t\t\t\t\t\t\t\ttask.options.productVersion,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst installed = await this.getInstalled(\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\ttask.options.profileLocation,\n\t\t\t\t\t\t\t\ttask.options.productVersion,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst options: InstallExtensionTaskOptions = {\n\t\t\t\t\t\t\t\t...task.options,\n\t\t\t\t\t\t\t\tcontext: {\n\t\t\t\t\t\t\t\t\t...task.options.context,\n\t\t\t\t\t\t\t\t\t[EXTENSION_INSTALL_DEP_PACK_CONTEXT]: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfor (const { gallery, manifest } of distinct(\n\t\t\t\t\t\t\t\tallDepsAndPackExtensionsToInstall,\n\t\t\t\t\t\t\t\t({ gallery }) => gallery.identifier.id,\n\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tinstallingExtensionsMap.has(\n\t\t\t\t\t\t\t\t\t\t`${gallery.identifier.id.toLowerCase()}-${options.profileLocation.toString()}`,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst existingInstallingExtension =\n\t\t\t\t\t\t\t\t\tthis.installingExtensions.get(\n\t\t\t\t\t\t\t\t\t\tgetInstallExtensionTaskKey(\n\t\t\t\t\t\t\t\t\t\t\tgallery,\n\t\t\t\t\t\t\t\t\t\t\toptions.profileLocation,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (existingInstallingExtension) {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tthis.canWaitForTask(\n\t\t\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t\t\texistingInstallingExtension.task,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tconst identifier =\n\t\t\t\t\t\t\t\t\t\t\texistingInstallingExtension.task\n\t\t\t\t\t\t\t\t\t\t\t\t.identifier;\n\t\t\t\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\t\t\t\"Waiting for already requested installing extension\",\n\t\t\t\t\t\t\t\t\t\t\tidentifier.id,\n\t\t\t\t\t\t\t\t\t\t\ttask.identifier.id,\n\t\t\t\t\t\t\t\t\t\t\toptions.profileLocation.toString(),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\texistingInstallingExtension.waitingTasks.push(\n\t\t\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t// add promise that waits until the extension is completely installed, ie., onDidInstallExtensions event is triggered for this extension\n\t\t\t\t\t\t\t\t\t\talreadyRequestedInstallations.push(\n\t\t\t\t\t\t\t\t\t\t\tEvent.toPromise(\n\t\t\t\t\t\t\t\t\t\t\t\tEvent.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.onDidInstallExtensions,\n\t\t\t\t\t\t\t\t\t\t\t\t\t(results) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tresults.some((result) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresult.identifier,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t).then((results) => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Finished waiting for already requested installing extension\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tidentifier.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttask.identifier.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\toptions.profileLocation.toString(),\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tconst result = results.find(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(result) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresult.identifier,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tif (!result?.local) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Extension failed to install\n\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Extension ${identifier.id} is not installed`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\t!installed.some(({ identifier }) =>\n\t\t\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\t\t\t\t\tgallery.identifier,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tcreateInstallExtensionTask(\n\t\t\t\t\t\t\t\t\t\tmanifest,\n\t\t\t\t\t\t\t\t\t\tgallery,\n\t\t\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\t\t\ttask,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// Installing through VSIX\n\t\t\t\t\t\t\tif (URI.isUri(task.source)) {\n\t\t\t\t\t\t\t\t// Ignore installing dependencies and packs\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tisNonEmptyArray(\n\t\t\t\t\t\t\t\t\t\ttask.manifest.extensionDependencies,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t\t\t`Cannot install dependencies of extension:`,\n\t\t\t\t\t\t\t\t\t\ttask.identifier.id,\n\t\t\t\t\t\t\t\t\t\terror.message,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tisNonEmptyArray(task.manifest.extensionPack)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t\t\t`Cannot install packed extensions of extension:`,\n\t\t\t\t\t\t\t\t\t\ttask.identifier.id,\n\t\t\t\t\t\t\t\t\t\terror.message,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t\t\t\"Error while preparing to install dependencies and extension packs of the extension:\",\n\t\t\t\t\t\t\t\t\ttask.identifier.id,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\t// Install extensions in parallel and wait until all extensions are installed / failed\n\t\t\tawait this.joinAllSettled(\n\t\t\t\t[...installingExtensionsMap.entries()].map(\n\t\t\t\t\tasync ([key, { task }]) => {\n\t\t\t\t\t\tconst startTime = new Date().getTime();\n\t\t\t\t\t\tlet local: ILocalExtension;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlocal = await task.run();\n\t\t\t\t\t\t\tawait this.joinAllSettled(\n\t\t\t\t\t\t\t\tthis.participants.map((participant) =>\n\t\t\t\t\t\t\t\t\tparticipant.postInstall(\n\t\t\t\t\t\t\t\t\t\tlocal,\n\t\t\t\t\t\t\t\t\t\ttask.source,\n\t\t\t\t\t\t\t\t\t\ttask.options,\n\t\t\t\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tExtensionManagementErrorCode.PostInstall,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tconst error = toExtensionManagementError(e);\n\t\t\t\t\t\t\tif (!URI.isUri(task.source)) {\n\t\t\t\t\t\t\t\treportTelemetry(\n\t\t\t\t\t\t\t\t\tthis.telemetryService,\n\t\t\t\t\t\t\t\t\ttask.operation === InstallOperation.Update\n\t\t\t\t\t\t\t\t\t\t? \"extensionGallery:update\"\n\t\t\t\t\t\t\t\t\t\t: \"extensionGallery:install\",\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\textensionData:\n\t\t\t\t\t\t\t\t\t\t\tgetGalleryExtensionTelemetryData(\n\t\t\t\t\t\t\t\t\t\t\t\ttask.source,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\t\t\tsource: task.options.context?.[\n\t\t\t\t\t\t\t\t\t\t\tEXTENSION_INSTALL_SOURCE_CONTEXT\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinstallExtensionResultsMap.set(key, {\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\tidentifier: task.identifier,\n\t\t\t\t\t\t\t\toperation: task.operation,\n\t\t\t\t\t\t\t\tsource: task.source,\n\t\t\t\t\t\t\t\tcontext: task.options.context,\n\t\t\t\t\t\t\t\tprofileLocation: task.options.profileLocation,\n\t\t\t\t\t\t\t\tapplicationScoped:\n\t\t\t\t\t\t\t\t\ttask.options.isApplicationScoped,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t\t\"Error while installing the extension\",\n\t\t\t\t\t\t\t\ttask.identifier.id,\n\t\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t\t\ttask.options.profileLocation.toString(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!URI.isUri(task.source)) {\n\t\t\t\t\t\t\tconst isUpdate =\n\t\t\t\t\t\t\t\ttask.operation === InstallOperation.Update;\n\t\t\t\t\t\t\tconst durationSinceUpdate = isUpdate\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: (new Date().getTime() -\n\t\t\t\t\t\t\t\t\t\ttask.source.lastUpdated) /\n\t\t\t\t\t\t\t\t\t1000;\n\t\t\t\t\t\t\treportTelemetry(\n\t\t\t\t\t\t\t\tthis.telemetryService,\n\t\t\t\t\t\t\t\tisUpdate\n\t\t\t\t\t\t\t\t\t? \"extensionGallery:update\"\n\t\t\t\t\t\t\t\t\t: \"extensionGallery:install\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\textensionData:\n\t\t\t\t\t\t\t\t\t\tgetGalleryExtensionTelemetryData(\n\t\t\t\t\t\t\t\t\t\t\ttask.source,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tverificationStatus: task.verificationStatus,\n\t\t\t\t\t\t\t\t\tduration: new Date().getTime() - startTime,\n\t\t\t\t\t\t\t\t\tdurationSinceUpdate,\n\t\t\t\t\t\t\t\t\tsource: task.options.context?.[\n\t\t\t\t\t\t\t\t\t\tEXTENSION_INSTALL_SOURCE_CONTEXT\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t// In web, report extension install statistics explicitly. In Desktop, statistics are automatically updated while downloading the VSIX.\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tisWeb &&\n\t\t\t\t\t\t\t\ttask.operation !== InstallOperation.Update\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait this.galleryService.reportStatistic(\n\t\t\t\t\t\t\t\t\t\tlocal.manifest.publisher,\n\t\t\t\t\t\t\t\t\t\tlocal.manifest.name,\n\t\t\t\t\t\t\t\t\t\tlocal.manifest.version,\n\t\t\t\t\t\t\t\t\t\tStatisticType.Install,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t/* ignore */\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinstallExtensionResultsMap.set(key, {\n\t\t\t\t\t\t\tlocal,\n\t\t\t\t\t\t\tidentifier: task.identifier,\n\t\t\t\t\t\t\toperation: task.operation,\n\t\t\t\t\t\t\tsource: task.source,\n\t\t\t\t\t\t\tcontext: task.options.context,\n\t\t\t\t\t\t\tprofileLocation: task.options.profileLocation,\n\t\t\t\t\t\t\tapplicationScoped: local.isApplicationScoped,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (alreadyRequestedInstallations.length) {\n\t\t\t\tawait this.joinAllSettled(alreadyRequestedInstallations);\n\t\t\t}\n\t\t\treturn [...installExtensionResultsMap.values()];\n\t\t} catch (error) {\n\t\t\tconst getAllDepsAndPacks = (\n\t\t\t\textension: ILocalExtension,\n\t\t\t\tprofileLocation: URI,\n\t\t\t\tallDepsOrPacks: string[],\n\t\t\t) => {\n\t\t\t\tconst depsOrPacks = [];\n\t\t\t\tif (extension.manifest.extensionDependencies?.length) {\n\t\t\t\t\tdepsOrPacks.push(\n\t\t\t\t\t\t...extension.manifest.extensionDependencies,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (extension.manifest.extensionPack?.length) {\n\t\t\t\t\tdepsOrPacks.push(...extension.manifest.extensionPack);\n\t\t\t\t}\n\t\t\t\tfor (const id of depsOrPacks) {\n\t\t\t\t\tif (allDepsOrPacks.includes(id.toLowerCase())) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tallDepsOrPacks.push(id.toLowerCase());\n\t\t\t\t\tconst installed = installExtensionResultsMap.get(\n\t\t\t\t\t\t`${id.toLowerCase()}-${profileLocation.toString()}`,\n\t\t\t\t\t);\n\t\t\t\t\tif (installed?.local) {\n\t\t\t\t\t\tallDepsOrPacks = getAllDepsAndPacks(\n\t\t\t\t\t\t\tinstalled.local,\n\t\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\t\tallDepsOrPacks,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn allDepsOrPacks;\n\t\t\t};\n\t\t\tconst getErrorResult = (task: IInstallExtensionTask) => ({\n\t\t\t\tidentifier: task.identifier,\n\t\t\t\toperation: InstallOperation.Install,\n\t\t\t\tsource: task.source,\n\t\t\t\tcontext: task.options.context,\n\t\t\t\tprofileLocation: task.options.profileLocation,\n\t\t\t\terror,\n\t\t\t});\n\n\t\t\tconst rollbackTasks: IUninstallExtensionTask[] = [];\n\t\t\tfor (const [key, { task, root }] of installingExtensionsMap) {\n\t\t\t\tconst result = installExtensionResultsMap.get(key);\n\t\t\t\tif (!result) {\n\t\t\t\t\ttask.cancel();\n\t\t\t\t\tinstallExtensionResultsMap.set(key, getErrorResult(task));\n\t\t\t\t}\n\t\t\t\t// If the extension is installed by a root task and the root task is failed, then uninstall the extension\n\t\t\t\telse if (\n\t\t\t\t\tresult.local &&\n\t\t\t\t\troot &&\n\t\t\t\t\t!installExtensionResultsMap.get(\n\t\t\t\t\t\t`${root.identifier.id.toLowerCase()}-${task.options.profileLocation.toString()}`,\n\t\t\t\t\t)?.local\n\t\t\t\t) {\n\t\t\t\t\trollbackTasks.push(\n\t\t\t\t\t\tthis.createUninstallExtensionTask(result.local, {\n\t\t\t\t\t\t\tversionOnly: true,\n\t\t\t\t\t\t\tprofileLocation: task.options.profileLocation,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\tinstallExtensionResultsMap.set(key, getErrorResult(task));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const [key, { task }] of installingExtensionsMap) {\n\t\t\t\tconst result = installExtensionResultsMap.get(key);\n\t\t\t\tif (!result?.local) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (task.options.donotIncludePackAndDependencies) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst depsOrPacks = getAllDepsAndPacks(\n\t\t\t\t\tresult.local,\n\t\t\t\t\ttask.options.profileLocation,\n\t\t\t\t\t[result.local.identifier.id.toLowerCase()],\n\t\t\t\t).slice(1);\n\t\t\t\tif (\n\t\t\t\t\tdepsOrPacks.some(\n\t\t\t\t\t\t(depOrPack) =>\n\t\t\t\t\t\t\tinstallingExtensionsMap.has(\n\t\t\t\t\t\t\t\t`${depOrPack.toLowerCase()}-${task.options.profileLocation.toString()}`,\n\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t!installExtensionResultsMap.get(\n\t\t\t\t\t\t\t\t`${depOrPack.toLowerCase()}-${task.options.profileLocation.toString()}`,\n\t\t\t\t\t\t\t)?.local,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\trollbackTasks.push(\n\t\t\t\t\t\tthis.createUninstallExtensionTask(result.local, {\n\t\t\t\t\t\t\tversionOnly: true,\n\t\t\t\t\t\t\tprofileLocation: task.options.profileLocation,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\tinstallExtensionResultsMap.set(key, getErrorResult(task));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rollbackTasks.length) {\n\t\t\t\tawait Promise.allSettled(\n\t\t\t\t\trollbackTasks.map(async (rollbackTask) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait rollbackTask.run();\n\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\"Rollback: Uninstalled extension\",\n\t\t\t\t\t\t\t\trollbackTask.extension.identifier.id,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t\"Rollback: Error while uninstalling extension\",\n\t\t\t\t\t\t\t\trollbackTask.extension.identifier.id,\n\t\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\t// Finally, remove all the tasks from the cache\n\t\t\tfor (const { task } of installingExtensionsMap.values()) {\n\t\t\t\tif (task.source && !URI.isUri(task.source)) {\n\t\t\t\t\tthis.installingExtensions.delete(\n\t\t\t\t\t\tgetInstallExtensionTaskKey(\n\t\t\t\t\t\t\ttask.source,\n\t\t\t\t\t\t\ttask.options.profileLocation,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (installExtensionResultsMap.size) {\n\t\t\t\tconst results = [...installExtensionResultsMap.values()];\n\t\t\t\tfor (const result of results) {\n\t\t\t\t\tif (result.local) {\n\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t`Extension installed successfully:`,\n\t\t\t\t\t\t\tresult.identifier.id,\n\t\t\t\t\t\t\tresult.profileLocation.toString(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._onDidInstallExtensions.fire(results);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate canWaitForTask(\n\t\ttaskToWait: IInstallExtensionTask,\n\t\ttaskToWaitFor: IInstallExtensionTask,\n\t): boolean {\n\t\tfor (const [\n\t\t\t,\n\t\t\t{ task, waitingTasks },\n\t\t] of this.installingExtensions.entries()) {\n\t\t\tif (task === taskToWait) {\n\t\t\t\t// Cannot be waited, If taskToWaitFor is waiting for taskToWait\n\t\t\t\tif (waitingTasks.includes(taskToWaitFor)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Cannot be waited, If taskToWaitFor is waiting for tasks waiting for taskToWait\n\t\t\t\tif (\n\t\t\t\t\twaitingTasks.some((waitingTask) =>\n\t\t\t\t\t\tthis.canWaitForTask(waitingTask, taskToWaitFor),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Cannot be waited, if the taskToWait cannot be waited for the task created the taskToWaitFor\n\t\t\t// Because, the task waits for the tasks it created\n\t\t\tif (\n\t\t\t\ttask === taskToWaitFor &&\n\t\t\t\twaitingTasks[0] &&\n\t\t\t\t!this.canWaitForTask(taskToWait, waitingTasks[0])\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async joinAllSettled<T>(\n\t\tpromises: Promise<T>[],\n\t\terrorCode?: ExtensionManagementErrorCode,\n\t): Promise<T[]> {\n\t\tconst results: T[] = [];\n\t\tconst errors: ExtensionManagementError[] = [];\n\t\tconst promiseResults = await Promise.allSettled(promises);\n\t\tfor (const r of promiseResults) {\n\t\t\tif (r.status === \"fulfilled\") {\n\t\t\t\tresults.push(r.value);\n\t\t\t} else {\n\t\t\t\terrors.push(toExtensionManagementError(r.reason, errorCode));\n\t\t\t}\n\t\t}\n\n\t\tif (!errors.length) {\n\t\t\treturn results;\n\t\t}\n\n\t\t// Throw if there are errors\n\t\tif (errors.length === 1) {\n\t\t\tthrow errors[0];\n\t\t}\n\n\t\tlet error = new ExtensionManagementError(\n\t\t\t\"\",\n\t\t\tExtensionManagementErrorCode.Unknown,\n\t\t);\n\t\tfor (const current of errors) {\n\t\t\terror = new ExtensionManagementError(\n\t\t\t\terror.message\n\t\t\t\t\t? `${error.message}, ${current.message}`\n\t\t\t\t\t: current.message,\n\t\t\t\tcurrent.code !== ExtensionManagementErrorCode.Unknown &&\n\t\t\t\t\tcurrent.code !== ExtensionManagementErrorCode.Internal\n\t\t\t\t\t? current.code\n\t\t\t\t\t: error.code,\n\t\t\t);\n\t\t}\n\t\tthrow error;\n\t}\n\n\tprivate async getAllDepsAndPackExtensions(\n\t\textensionIdentifier: IExtensionIdentifier,\n\t\tmanifest: IExtensionManifest,\n\t\tgetOnlyNewlyAddedFromExtensionPack: boolean,\n\t\tinstallPreRelease: boolean,\n\t\tprofile: URI | undefined,\n\t\tproductVersion: IProductVersion,\n\t): Promise<{ gallery: IGalleryExtension; manifest: IExtensionManifest }[]> {\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst installed = await this.getInstalled(\n\t\t\tundefined,\n\t\t\tprofile,\n\t\t\tproductVersion,\n\t\t);\n\t\tconst knownIdentifiers: IExtensionIdentifier[] = [];\n\n\t\tconst allDependenciesAndPacks: {\n\t\t\tgallery: IGalleryExtension;\n\t\t\tmanifest: IExtensionManifest;\n\t\t}[] = [];\n\t\tconst collectDependenciesAndPackExtensionsToInstall = async (\n\t\t\textensionIdentifier: IExtensionIdentifier,\n\t\t\tmanifest: IExtensionManifest,\n\t\t): Promise<void> => {\n\t\t\tknownIdentifiers.push(extensionIdentifier);\n\t\t\tconst dependecies: string[] = manifest.extensionDependencies || [];\n\t\t\tconst dependenciesAndPackExtensions = [...dependecies];\n\t\t\tif (manifest.extensionPack) {\n\t\t\t\tconst existing = getOnlyNewlyAddedFromExtensionPack\n\t\t\t\t\t? installed.find((e) =>\n\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\te.identifier,\n\t\t\t\t\t\t\t\textensionIdentifier,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined;\n\t\t\t\tfor (const extension of manifest.extensionPack) {\n\t\t\t\t\t// add only those extensions which are new in currently installed extension\n\t\t\t\t\tif (\n\t\t\t\t\t\t!(\n\t\t\t\t\t\t\texisting &&\n\t\t\t\t\t\t\texisting.manifest.extensionPack &&\n\t\t\t\t\t\t\texisting.manifest.extensionPack.some((old) =>\n\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\t{ id: old },\n\t\t\t\t\t\t\t\t\t{ id: extension },\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tdependenciesAndPackExtensions.every(\n\t\t\t\t\t\t\t\t(e) =>\n\t\t\t\t\t\t\t\t\t!areSameExtensions(\n\t\t\t\t\t\t\t\t\t\t{ id: e },\n\t\t\t\t\t\t\t\t\t\t{ id: extension },\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdependenciesAndPackExtensions.push(extension);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (dependenciesAndPackExtensions.length) {\n\t\t\t\t// filter out known extensions\n\t\t\t\tconst ids = dependenciesAndPackExtensions.filter((id) =>\n\t\t\t\t\tknownIdentifiers.every(\n\t\t\t\t\t\t(galleryIdentifier) =>\n\t\t\t\t\t\t\t!areSameExtensions(galleryIdentifier, { id }),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (ids.length) {\n\t\t\t\t\tconst galleryExtensions =\n\t\t\t\t\t\tawait this.galleryService.getExtensions(\n\t\t\t\t\t\t\tids.map((id) => ({\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tpreRelease: installPreRelease,\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t);\n\t\t\t\t\tfor (const galleryExtension of galleryExtensions) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tknownIdentifiers.find((identifier) =>\n\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\t\t\tgalleryExtension.identifier,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst isDependency = dependecies.some((id) =>\n\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t{ id },\n\t\t\t\t\t\t\t\tgalleryExtension.identifier,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlet compatible;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tcompatible =\n\t\t\t\t\t\t\t\tawait this.checkAndGetCompatibleVersion(\n\t\t\t\t\t\t\t\t\tgalleryExtension,\n\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\tinstallPreRelease,\n\t\t\t\t\t\t\t\t\tproductVersion,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tif (isDependency) {\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\t\"Skipping the packed extension as it cannot be installed\",\n\t\t\t\t\t\t\t\t\tgalleryExtension.identifier.id,\n\t\t\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tallDependenciesAndPacks.push({\n\t\t\t\t\t\t\tgallery: compatible.extension,\n\t\t\t\t\t\t\tmanifest: compatible.manifest,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait collectDependenciesAndPackExtensionsToInstall(\n\t\t\t\t\t\t\tcompatible.extension.identifier,\n\t\t\t\t\t\t\tcompatible.manifest,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tawait collectDependenciesAndPackExtensionsToInstall(\n\t\t\textensionIdentifier,\n\t\t\tmanifest,\n\t\t);\n\t\treturn allDependenciesAndPacks;\n\t}\n\n\tprivate async checkAndGetCompatibleVersion(\n\t\textension: IGalleryExtension,\n\t\tsameVersion: boolean,\n\t\tinstallPreRelease: boolean,\n\t\tproductVersion: IProductVersion,\n\t): Promise<{ extension: IGalleryExtension; manifest: IExtensionManifest }> {\n\t\tlet compatibleExtension: IGalleryExtension | null;\n\n\t\tconst extensionsControlManifest =\n\t\t\tawait this.getExtensionsControlManifest();\n\t\tif (\n\t\t\textensionsControlManifest.malicious.some((identifier) =>\n\t\t\t\tareSameExtensions(extension.identifier, identifier),\n\t\t\t)\n\t\t) {\n\t\t\tthrow new ExtensionManagementError(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"malicious extension\",\n\t\t\t\t\t\"Can't install '{0}' extension since it was reported to be problematic.\",\n\t\t\t\t\textension.identifier.id,\n\t\t\t\t),\n\t\t\t\tExtensionManagementErrorCode.Malicious,\n\t\t\t);\n\t\t}\n\n\t\tconst deprecationInfo =\n\t\t\textensionsControlManifest.deprecated[\n\t\t\t\textension.identifier.id.toLowerCase()\n\t\t\t];\n\t\tif (deprecationInfo?.extension?.autoMigrate) {\n\t\t\tthis.logService.info(\n\t\t\t\t`The '${extension.identifier.id}' extension is deprecated, fetching the compatible '${deprecationInfo.extension.id}' extension instead.`,\n\t\t\t);\n\t\t\tcompatibleExtension = (\n\t\t\t\tawait this.galleryService.getExtensions(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: deprecationInfo.extension.id,\n\t\t\t\t\t\t\tpreRelease: deprecationInfo.extension.preRelease,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t{\n\t\t\t\t\t\ttargetPlatform: await this.getTargetPlatform(),\n\t\t\t\t\t\tcompatible: true,\n\t\t\t\t\t\tproductVersion,\n\t\t\t\t\t},\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t)\n\t\t\t)[0];\n\t\t\tif (!compatibleExtension) {\n\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"notFoundDeprecatedReplacementExtension\",\n\t\t\t\t\t\t\"Can't install '{0}' extension since it was deprecated and the replacement extension '{1}' can't be found.\",\n\t\t\t\t\t\textension.identifier.id,\n\t\t\t\t\t\tdeprecationInfo.extension.id,\n\t\t\t\t\t),\n\t\t\t\t\tExtensionManagementErrorCode.Deprecated,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!(await this.canInstall(extension))) {\n\t\t\t\tconst targetPlatform = await this.getTargetPlatform();\n\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"incompatible platform\",\n\t\t\t\t\t\t\"The '{0}' extension is not available in {1} for {2}.\",\n\t\t\t\t\t\textension.identifier.id,\n\t\t\t\t\t\tthis.productService.nameLong,\n\t\t\t\t\t\tTargetPlatformToString(targetPlatform),\n\t\t\t\t\t),\n\t\t\t\t\tExtensionManagementErrorCode.IncompatibleTargetPlatform,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcompatibleExtension = await this.getCompatibleVersion(\n\t\t\t\textension,\n\t\t\t\tsameVersion,\n\t\t\t\tinstallPreRelease,\n\t\t\t\tproductVersion,\n\t\t\t);\n\t\t\tif (!compatibleExtension) {\n\t\t\t\tconst incompatibleApiProposalsMessages: string[] = [];\n\t\t\t\tif (\n\t\t\t\t\t!areApiProposalsCompatible(\n\t\t\t\t\t\textension.properties.enabledApiProposals ?? [],\n\t\t\t\t\t\tincompatibleApiProposalsMessages,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"incompatibleAPI\",\n\t\t\t\t\t\t\t\"Can't install '{0}' extension. {1}\",\n\t\t\t\t\t\t\textension.displayName ?? extension.identifier.id,\n\t\t\t\t\t\t\tincompatibleApiProposalsMessages[0],\n\t\t\t\t\t\t),\n\t\t\t\t\t\tExtensionManagementErrorCode.IncompatibleApi,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t/** If no compatible release version is found, check if the extension has a release version or not and throw relevant error */\n\t\t\t\tif (\n\t\t\t\t\t!installPreRelease &&\n\t\t\t\t\textension.properties.isPreReleaseVersion &&\n\t\t\t\t\t(\n\t\t\t\t\t\tawait this.galleryService.getExtensions(\n\t\t\t\t\t\t\t[extension.identifier],\n\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t)\n\t\t\t\t\t)[0]\n\t\t\t\t) {\n\t\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"notFoundReleaseExtension\",\n\t\t\t\t\t\t\t\"Can't install release version of '{0}' extension because it has no release version.\",\n\t\t\t\t\t\t\textension.displayName ?? extension.identifier.id,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tExtensionManagementErrorCode.ReleaseVersionNotFound,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"notFoundCompatibleDependency\",\n\t\t\t\t\t\t\"Can't install '{0}' extension because it is not compatible with the current version of {1} (version {2}).\",\n\t\t\t\t\t\textension.identifier.id,\n\t\t\t\t\t\tthis.productService.nameLong,\n\t\t\t\t\t\tthis.productService.version,\n\t\t\t\t\t),\n\t\t\t\t\tExtensionManagementErrorCode.Incompatible,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.logService.info(\n\t\t\t\"Getting Manifest...\",\n\t\t\tcompatibleExtension.identifier.id,\n\t\t);\n\t\tconst manifest = await this.galleryService.getManifest(\n\t\t\tcompatibleExtension,\n\t\t\tCancellationToken.None,\n\t\t);\n\t\tif (manifest === null) {\n\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t`Missing manifest for extension ${compatibleExtension.identifier.id}`,\n\t\t\t\tExtensionManagementErrorCode.Invalid,\n\t\t\t);\n\t\t}\n\n\t\tif (manifest.version !== compatibleExtension.version) {\n\t\t\tthrow new ExtensionManagementError(\n\t\t\t\t`Cannot install '${compatibleExtension.identifier.id}' extension because of version mismatch in Marketplace`,\n\t\t\t\tExtensionManagementErrorCode.Invalid,\n\t\t\t);\n\t\t}\n\n\t\treturn { extension: compatibleExtension, manifest };\n\t}\n\n\tprotected async getCompatibleVersion(\n\t\textension: IGalleryExtension,\n\t\tsameVersion: boolean,\n\t\tincludePreRelease: boolean,\n\t\tproductVersion: IProductVersion,\n\t): Promise<IGalleryExtension | null> {\n\t\tconst targetPlatform = await this.getTargetPlatform();\n\t\tlet compatibleExtension: IGalleryExtension | null = null;\n\n\t\tif (\n\t\t\t!sameVersion &&\n\t\t\textension.hasPreReleaseVersion &&\n\t\t\textension.properties.isPreReleaseVersion !== includePreRelease\n\t\t) {\n\t\t\tcompatibleExtension =\n\t\t\t\t(\n\t\t\t\t\tawait this.galleryService.getExtensions(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...extension.identifier,\n\t\t\t\t\t\t\t\tpreRelease: includePreRelease,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\t{ targetPlatform, compatible: true, productVersion },\n\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t)\n\t\t\t\t)[0] || null;\n\t\t}\n\n\t\tif (\n\t\t\t!compatibleExtension &&\n\t\t\t(await this.galleryService.isExtensionCompatible(\n\t\t\t\textension,\n\t\t\t\tincludePreRelease,\n\t\t\t\ttargetPlatform,\n\t\t\t\tproductVersion,\n\t\t\t))\n\t\t) {\n\t\t\tcompatibleExtension = extension;\n\t\t}\n\n\t\tif (!compatibleExtension) {\n\t\t\tif (sameVersion) {\n\t\t\t\tcompatibleExtension =\n\t\t\t\t\t(\n\t\t\t\t\t\tawait this.galleryService.getExtensions(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...extension.identifier,\n\t\t\t\t\t\t\t\t\tversion: extension.version,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttargetPlatform,\n\t\t\t\t\t\t\t\tcompatible: true,\n\t\t\t\t\t\t\t\tproductVersion,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t)\n\t\t\t\t\t)[0] || null;\n\t\t\t} else {\n\t\t\t\tcompatibleExtension =\n\t\t\t\t\tawait this.galleryService.getCompatibleExtension(\n\t\t\t\t\t\textension,\n\t\t\t\t\t\tincludePreRelease,\n\t\t\t\t\t\ttargetPlatform,\n\t\t\t\t\t\tproductVersion,\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn compatibleExtension;\n\t}\n\n\tasync uninstallExtensions(\n\t\textensions: UninstallExtensionInfo[],\n\t): Promise<void> {\n\t\tconst getUninstallExtensionTaskKey = (\n\t\t\textension: ILocalExtension,\n\t\t\tuninstallOptions: UninstallExtensionTaskOptions,\n\t\t) =>\n\t\t\t`${extension.identifier.id.toLowerCase()}${uninstallOptions.versionOnly ? `-${extension.manifest.version}` : \"\"}@${uninstallOptions.profileLocation.toString()}`;\n\n\t\tconst createUninstallExtensionTask = (\n\t\t\textension: ILocalExtension,\n\t\t\tuninstallOptions: UninstallExtensionTaskOptions,\n\t\t): IUninstallExtensionTask => {\n\t\t\tconst uninstallExtensionTask = this.createUninstallExtensionTask(\n\t\t\t\textension,\n\t\t\t\tuninstallOptions,\n\t\t\t);\n\t\t\tthis.uninstallingExtensions.set(\n\t\t\t\tgetUninstallExtensionTaskKey(\n\t\t\t\t\tuninstallExtensionTask.extension,\n\t\t\t\t\tuninstallOptions,\n\t\t\t\t),\n\t\t\t\tuninstallExtensionTask,\n\t\t\t);\n\t\t\tthis.logService.info(\n\t\t\t\t\"Uninstalling extension from the profile:\",\n\t\t\t\t`${extension.identifier.id}@${extension.manifest.version}`,\n\t\t\t\tuninstallOptions.profileLocation.toString(),\n\t\t\t);\n\t\t\tthis._onUninstallExtension.fire({\n\t\t\t\tidentifier: extension.identifier,\n\t\t\t\tprofileLocation: uninstallOptions.profileLocation,\n\t\t\t\tapplicationScoped: extension.isApplicationScoped,\n\t\t\t});\n\t\t\treturn uninstallExtensionTask;\n\t\t};\n\n\t\tconst postUninstallExtension = (\n\t\t\textension: ILocalExtension,\n\t\t\tuninstallOptions: UninstallExtensionTaskOptions,\n\t\t\terror?: ExtensionManagementError,\n\t\t): void => {\n\t\t\tif (error) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t\"Failed to uninstall extension from the profile:\",\n\t\t\t\t\t`${extension.identifier.id}@${extension.manifest.version}`,\n\t\t\t\t\tuninstallOptions.profileLocation.toString(),\n\t\t\t\t\terror.message,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Successfully uninstalled extension from the profile\",\n\t\t\t\t\t`${extension.identifier.id}@${extension.manifest.version}`,\n\t\t\t\t\tuninstallOptions.profileLocation.toString(),\n\t\t\t\t);\n\t\t\t}\n\t\t\treportTelemetry(\n\t\t\t\tthis.telemetryService,\n\t\t\t\t\"extensionGallery:uninstall\",\n\t\t\t\t{\n\t\t\t\t\textensionData: getLocalExtensionTelemetryData(extension),\n\t\t\t\t\terror,\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._onDidUninstallExtension.fire({\n\t\t\t\tidentifier: extension.identifier,\n\t\t\t\terror: error?.code,\n\t\t\t\tprofileLocation: uninstallOptions.profileLocation,\n\t\t\t\tapplicationScoped: extension.isApplicationScoped,\n\t\t\t});\n\t\t};\n\n\t\tconst allTasks: IUninstallExtensionTask[] = [];\n\t\tconst processedTasks: IUninstallExtensionTask[] = [];\n\t\tconst alreadyRequestedUninstalls: Promise<any>[] = [];\n\n\t\tconst installedExtensionsMap = new ResourceMap<ILocalExtension[]>();\n\n\t\tfor (const { extension, options } of extensions) {\n\t\t\tconst uninstallOptions: UninstallExtensionTaskOptions = {\n\t\t\t\t...options,\n\t\t\t\tprofileLocation: extension.isApplicationScoped\n\t\t\t\t\t? this.userDataProfilesService.defaultProfile\n\t\t\t\t\t\t\t.extensionsResource\n\t\t\t\t\t: (options?.profileLocation ??\n\t\t\t\t\t\tthis.getCurrentExtensionsManifestLocation()),\n\t\t\t};\n\t\t\tconst uninstallExtensionTask = this.uninstallingExtensions.get(\n\t\t\t\tgetUninstallExtensionTaskKey(extension, uninstallOptions),\n\t\t\t);\n\t\t\tif (uninstallExtensionTask) {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Extensions is already requested to uninstall\",\n\t\t\t\t\textension.identifier.id,\n\t\t\t\t);\n\t\t\t\talreadyRequestedUninstalls.push(\n\t\t\t\t\tuninstallExtensionTask.waitUntilTaskIsFinished(),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tallTasks.push(\n\t\t\t\t\tcreateUninstallExtensionTask(extension, uninstallOptions),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tfor (const task of allTasks.slice(0)) {\n\t\t\t\tlet installed = installedExtensionsMap.get(\n\t\t\t\t\ttask.options.profileLocation,\n\t\t\t\t);\n\t\t\t\tif (!installed) {\n\t\t\t\t\tinstalledExtensionsMap.set(\n\t\t\t\t\t\ttask.options.profileLocation,\n\t\t\t\t\t\t(installed = await this.getInstalled(\n\t\t\t\t\t\t\tExtensionType.User,\n\t\t\t\t\t\t\ttask.options.profileLocation,\n\t\t\t\t\t\t)),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (task.options.donotIncludePack) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Uninstalling the extension without including packed extension\",\n\t\t\t\t\t\t`${task.extension.identifier.id}@${task.extension.manifest.version}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst packedExtensions =\n\t\t\t\t\t\tthis.getAllPackExtensionsToUninstall(\n\t\t\t\t\t\t\ttask.extension,\n\t\t\t\t\t\t\tinstalled,\n\t\t\t\t\t\t);\n\t\t\t\t\tfor (const packedExtension of packedExtensions) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis.uninstallingExtensions.has(\n\t\t\t\t\t\t\t\tgetUninstallExtensionTaskKey(\n\t\t\t\t\t\t\t\t\tpackedExtension,\n\t\t\t\t\t\t\t\t\ttask.options,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\"Extensions is already requested to uninstall\",\n\t\t\t\t\t\t\t\tpackedExtension.identifier.id,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallTasks.push(\n\t\t\t\t\t\t\t\tcreateUninstallExtensionTask(\n\t\t\t\t\t\t\t\t\tpackedExtension,\n\t\t\t\t\t\t\t\t\ttask.options,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (task.options.donotCheckDependents) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Uninstalling the extension without checking dependents\",\n\t\t\t\t\t\t`${task.extension.identifier.id}@${task.extension.manifest.version}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis.checkForDependents(\n\t\t\t\t\t\tallTasks.map((task) => task.extension),\n\t\t\t\t\t\tinstalled,\n\t\t\t\t\t\ttask.extension,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Uninstall extensions in parallel and wait until all extensions are uninstalled / failed\n\t\t\tawait this.joinAllSettled(\n\t\t\t\tallTasks.map(async (task) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait task.run();\n\t\t\t\t\t\tawait this.joinAllSettled(\n\t\t\t\t\t\t\tthis.participants.map((participant) =>\n\t\t\t\t\t\t\t\tparticipant.postUninstall(\n\t\t\t\t\t\t\t\t\ttask.extension,\n\t\t\t\t\t\t\t\t\ttask.options,\n\t\t\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// only report if extension has a mapped gallery extension. UUID identifies the gallery extension.\n\t\t\t\t\t\tif (task.extension.identifier.uuid) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait this.galleryService.reportStatistic(\n\t\t\t\t\t\t\t\t\ttask.extension.manifest.publisher,\n\t\t\t\t\t\t\t\t\ttask.extension.manifest.name,\n\t\t\t\t\t\t\t\t\ttask.extension.manifest.version,\n\t\t\t\t\t\t\t\t\tStatisticType.Uninstall,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t/* ignore */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconst error = toExtensionManagementError(e);\n\t\t\t\t\t\tpostUninstallExtension(\n\t\t\t\t\t\t\ttask.extension,\n\t\t\t\t\t\t\ttask.options,\n\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tprocessedTasks.push(task);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (alreadyRequestedUninstalls.length) {\n\t\t\t\tawait this.joinAllSettled(alreadyRequestedUninstalls);\n\t\t\t}\n\n\t\t\tfor (const task of allTasks) {\n\t\t\t\tpostUninstallExtension(task.extension, task.options);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconst error = toExtensionManagementError(e);\n\t\t\tfor (const task of allTasks) {\n\t\t\t\t// cancel the tasks\n\t\t\t\ttry {\n\t\t\t\t\ttask.cancel();\n\t\t\t\t} catch (error) {\n\t\t\t\t\t/* ignore */\n\t\t\t\t}\n\t\t\t\tif (!processedTasks.includes(task)) {\n\t\t\t\t\tpostUninstallExtension(task.extension, task.options, error);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\t// Remove tasks from cache\n\t\t\tfor (const task of allTasks) {\n\t\t\t\tif (\n\t\t\t\t\t!this.uninstallingExtensions.delete(\n\t\t\t\t\t\tgetUninstallExtensionTaskKey(\n\t\t\t\t\t\t\ttask.extension,\n\t\t\t\t\t\t\ttask.options,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\"Uninstallation task is not found in the cache\",\n\t\t\t\t\t\ttask.extension.identifier.id,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate checkForDependents(\n\t\textensionsToUninstall: ILocalExtension[],\n\t\tinstalled: ILocalExtension[],\n\t\textensionToUninstall: ILocalExtension,\n\t): void {\n\t\tfor (const extension of extensionsToUninstall) {\n\t\t\tconst dependents = this.getDependents(extension, installed);\n\t\t\tif (dependents.length) {\n\t\t\t\tconst remainingDependents = dependents.filter(\n\t\t\t\t\t(dependent) =>\n\t\t\t\t\t\t!extensionsToUninstall.some((e) =>\n\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\te.identifier,\n\t\t\t\t\t\t\t\tdependent.identifier,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (remainingDependents.length) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tthis.getDependentsErrorMessage(\n\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\tremainingDependents,\n\t\t\t\t\t\t\textensionToUninstall,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getDependentsErrorMessage(\n\t\tdependingExtension: ILocalExtension,\n\t\tdependents: ILocalExtension[],\n\t\textensionToUninstall: ILocalExtension,\n\t): string {\n\t\tif (extensionToUninstall === dependingExtension) {\n\t\t\tif (dependents.length === 1) {\n\t\t\t\treturn nls.localize(\n\t\t\t\t\t\"singleDependentError\",\n\t\t\t\t\t\"Cannot uninstall '{0}' extension. '{1}' extension depends on this.\",\n\t\t\t\t\textensionToUninstall.manifest.displayName ||\n\t\t\t\t\t\textensionToUninstall.manifest.name,\n\t\t\t\t\tdependents[0].manifest.displayName ||\n\t\t\t\t\t\tdependents[0].manifest.name,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (dependents.length === 2) {\n\t\t\t\treturn nls.localize(\n\t\t\t\t\t\"twoDependentsError\",\n\t\t\t\t\t\"Cannot uninstall '{0}' extension. '{1}' and '{2}' extensions depend on this.\",\n\t\t\t\t\textensionToUninstall.manifest.displayName ||\n\t\t\t\t\t\textensionToUninstall.manifest.name,\n\t\t\t\t\tdependents[0].manifest.displayName ||\n\t\t\t\t\t\tdependents[0].manifest.name,\n\t\t\t\t\tdependents[1].manifest.displayName ||\n\t\t\t\t\t\tdependents[1].manifest.name,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn nls.localize(\n\t\t\t\t\"multipleDependentsError\",\n\t\t\t\t\"Cannot uninstall '{0}' extension. '{1}', '{2}' and other extension depend on this.\",\n\t\t\t\textensionToUninstall.manifest.displayName ||\n\t\t\t\t\textensionToUninstall.manifest.name,\n\t\t\t\tdependents[0].manifest.displayName ||\n\t\t\t\t\tdependents[0].manifest.name,\n\t\t\t\tdependents[1].manifest.displayName ||\n\t\t\t\t\tdependents[1].manifest.name,\n\t\t\t);\n\t\t}\n\t\tif (dependents.length === 1) {\n\t\t\treturn nls.localize(\n\t\t\t\t\"singleIndirectDependentError\",\n\t\t\t\t\"Cannot uninstall '{0}' extension . It includes uninstalling '{1}' extension and '{2}' extension depends on this.\",\n\t\t\t\textensionToUninstall.manifest.displayName ||\n\t\t\t\t\textensionToUninstall.manifest.name,\n\t\t\t\tdependingExtension.manifest.displayName ||\n\t\t\t\t\tdependingExtension.manifest.name,\n\t\t\t\tdependents[0].manifest.displayName ||\n\t\t\t\t\tdependents[0].manifest.name,\n\t\t\t);\n\t\t}\n\t\tif (dependents.length === 2) {\n\t\t\treturn nls.localize(\n\t\t\t\t\"twoIndirectDependentsError\",\n\t\t\t\t\"Cannot uninstall '{0}' extension. It includes uninstalling '{1}' extension and '{2}' and '{3}' extensions depend on this.\",\n\t\t\t\textensionToUninstall.manifest.displayName ||\n\t\t\t\t\textensionToUninstall.manifest.name,\n\t\t\t\tdependingExtension.manifest.displayName ||\n\t\t\t\t\tdependingExtension.manifest.name,\n\t\t\t\tdependents[0].manifest.displayName ||\n\t\t\t\t\tdependents[0].manifest.name,\n\t\t\t\tdependents[1].manifest.displayName ||\n\t\t\t\t\tdependents[1].manifest.name,\n\t\t\t);\n\t\t}\n\t\treturn nls.localize(\n\t\t\t\"multipleIndirectDependentsError\",\n\t\t\t\"Cannot uninstall '{0}' extension. It includes uninstalling '{1}' extension and '{2}', '{3}' and other extensions depend on this.\",\n\t\t\textensionToUninstall.manifest.displayName ||\n\t\t\t\textensionToUninstall.manifest.name,\n\t\t\tdependingExtension.manifest.displayName ||\n\t\t\t\tdependingExtension.manifest.name,\n\t\t\tdependents[0].manifest.displayName || dependents[0].manifest.name,\n\t\t\tdependents[1].manifest.displayName || dependents[1].manifest.name,\n\t\t);\n\t}\n\n\tprivate getAllPackExtensionsToUninstall(\n\t\textension: ILocalExtension,\n\t\tinstalled: ILocalExtension[],\n\t\tchecked: ILocalExtension[] = [],\n\t): ILocalExtension[] {\n\t\tif (checked.indexOf(extension) !== -1) {\n\t\t\treturn [];\n\t\t}\n\t\tchecked.push(extension);\n\t\tconst extensionsPack = extension.manifest.extensionPack\n\t\t\t? extension.manifest.extensionPack\n\t\t\t: [];\n\t\tif (extensionsPack.length) {\n\t\t\tconst packedExtensions = installed.filter(\n\t\t\t\t(i) =>\n\t\t\t\t\t!i.isBuiltin &&\n\t\t\t\t\textensionsPack.some((id) =>\n\t\t\t\t\t\tareSameExtensions({ id }, i.identifier),\n\t\t\t\t\t),\n\t\t\t);\n\t\t\tconst packOfPackedExtensions: ILocalExtension[] = [];\n\t\t\tfor (const packedExtension of packedExtensions) {\n\t\t\t\tpackOfPackedExtensions.push(\n\t\t\t\t\t...this.getAllPackExtensionsToUninstall(\n\t\t\t\t\t\tpackedExtension,\n\t\t\t\t\t\tinstalled,\n\t\t\t\t\t\tchecked,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn [...packedExtensions, ...packOfPackedExtensions];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate getDependents(\n\t\textension: ILocalExtension,\n\t\tinstalled: ILocalExtension[],\n\t): ILocalExtension[] {\n\t\treturn installed.filter(\n\t\t\t(e) =>\n\t\t\t\te.manifest.extensionDependencies &&\n\t\t\t\te.manifest.extensionDependencies.some((id) =>\n\t\t\t\t\tareSameExtensions({ id }, extension.identifier),\n\t\t\t\t),\n\t\t);\n\t}\n\n\tprivate async updateControlCache(): Promise<IExtensionsControlManifest> {\n\t\ttry {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"ExtensionManagementService.updateControlCache\",\n\t\t\t);\n\t\t\treturn await this.galleryService.getExtensionsControlManifest();\n\t\t} catch (err) {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"ExtensionManagementService.refreshControlCache - failed to get extension control manifest\",\n\t\t\t\tgetErrorMessage(err),\n\t\t\t);\n\t\t\treturn { malicious: [], deprecated: {}, search: [] };\n\t\t}\n\t}\n\n\tabstract getTargetPlatform(): Promise<TargetPlatform>;\n\tabstract zip(extension: ILocalExtension): Promise<URI>;\n\tabstract getManifest(vsix: URI): Promise<IExtensionManifest>;\n\tabstract install(\n\t\tvsix: URI,\n\t\toptions?: InstallOptions,\n\t): Promise<ILocalExtension>;\n\tabstract installFromLocation(\n\t\tlocation: URI,\n\t\tprofileLocation: URI,\n\t): Promise<ILocalExtension>;\n\tabstract installExtensionsFromProfile(\n\t\textensions: IExtensionIdentifier[],\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t): Promise<ILocalExtension[]>;\n\tabstract getInstalled(\n\t\ttype?: ExtensionType,\n\t\tprofileLocation?: URI,\n\t\tproductVersion?: IProductVersion,\n\t): Promise<ILocalExtension[]>;\n\tabstract copyExtensions(\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t): Promise<void>;\n\tabstract download(\n\t\textension: IGalleryExtension,\n\t\toperation: InstallOperation,\n\t\tdonotVerifySignature: boolean,\n\t): Promise<URI>;\n\tabstract reinstallFromGallery(\n\t\textension: ILocalExtension,\n\t): Promise<ILocalExtension>;\n\tabstract cleanUp(): Promise<void>;\n\n\tabstract updateMetadata(\n\t\tlocal: ILocalExtension,\n\t\tmetadata: Partial<Metadata>,\n\t\tprofileLocation: URI,\n\t): Promise<ILocalExtension>;\n\n\tprotected abstract getCurrentExtensionsManifestLocation(): URI;\n\tprotected abstract createInstallExtensionTask(\n\t\tmanifest: IExtensionManifest,\n\t\textension: URI | IGalleryExtension,\n\t\toptions: InstallExtensionTaskOptions,\n\t): IInstallExtensionTask;\n\tprotected abstract createUninstallExtensionTask(\n\t\textension: ILocalExtension,\n\t\toptions: UninstallExtensionTaskOptions,\n\t): IUninstallExtensionTask;\n\tprotected abstract copyExtension(\n\t\textension: ILocalExtension,\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t\tmetadata?: Partial<Metadata>,\n\t): Promise<ILocalExtension>;\n}\n\nexport function toExtensionManagementError(\n\terror: Error,\n\tcode?: ExtensionManagementErrorCode,\n): ExtensionManagementError {\n\tif (error instanceof ExtensionManagementError) {\n\t\treturn error;\n\t}\n\tlet extensionManagementError: ExtensionManagementError;\n\tif (error instanceof ExtensionGalleryError) {\n\t\textensionManagementError = new ExtensionManagementError(\n\t\t\terror.message,\n\t\t\terror.code === ExtensionGalleryErrorCode.DownloadFailedWriting\n\t\t\t\t? ExtensionManagementErrorCode.DownloadFailedWriting\n\t\t\t\t: ExtensionManagementErrorCode.Gallery,\n\t\t);\n\t} else {\n\t\textensionManagementError = new ExtensionManagementError(\n\t\t\terror.message,\n\t\t\tisCancellationError(error)\n\t\t\t\t? ExtensionManagementErrorCode.Cancelled\n\t\t\t\t: (code ?? ExtensionManagementErrorCode.Internal),\n\t\t);\n\t}\n\textensionManagementError.stack = error.stack;\n\treturn extensionManagementError;\n}\n\nfunction reportTelemetry(\n\ttelemetryService: ITelemetryService,\n\teventName: string,\n\t{\n\t\textensionData,\n\t\tverificationStatus,\n\t\tduration,\n\t\terror,\n\t\tsource,\n\t\tdurationSinceUpdate,\n\t}: {\n\t\textensionData: any;\n\t\tverificationStatus?: ExtensionVerificationStatus;\n\t\tduration?: number;\n\t\tdurationSinceUpdate?: number;\n\t\tsource?: string;\n\t\terror?: ExtensionManagementError | ExtensionGalleryError;\n\t},\n): void {\n\tlet errorcode: string | undefined;\n\tlet errorcodeDetail: string | undefined;\n\n\tif (isDefined(verificationStatus)) {\n\t\tif (verificationStatus === true) {\n\t\t\tverificationStatus = \"Verified\";\n\t\t} else if (verificationStatus === false) {\n\t\t\tverificationStatus = \"Unverified\";\n\t\t} else {\n\t\t\terrorcode = ExtensionManagementErrorCode.Signature;\n\t\t\terrorcodeDetail = verificationStatus;\n\t\t\tverificationStatus = \"Unverified\";\n\t\t}\n\t}\n\n\tif (error) {\n\t\terrorcode = error.code;\n\t\tif (error.code === ExtensionManagementErrorCode.Signature) {\n\t\t\terrorcodeDetail = error.message;\n\t\t}\n\t}\n\n\t/* __GDPR__\n\t\t\"extensionGallery:install\" : {\n\t\t\t\"owner\": \"sandy081\",\n\t\t\t\"success\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\"durationSinceUpdate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\"errorcode\": { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\"errorcodeDetail\": { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\"recommendationReason\": { \"retiredFromVersion\": \"1.23.0\", \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\"verificationStatus\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\"source\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\"${include}\": [\n\t\t\t\t\"${GalleryExtensionTelemetryData}\"\n\t\t\t]\n\t\t}\n\t*/\n\t/* __GDPR__\n\t\t\"extensionGallery:uninstall\" : {\n\t\t\t\"owner\": \"sandy081\",\n\t\t\t\"success\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\"errorcode\": { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\"${include}\": [\n\t\t\t\t\"${GalleryExtensionTelemetryData}\"\n\t\t\t]\n\t\t}\n\t*/\n\t/* __GDPR__\n\t\t\"extensionGallery:update\" : {\n\t\t\t\"owner\": \"sandy081\",\n\t\t\t\"success\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\"errorcode\": { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\"errorcodeDetail\": { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\"verificationStatus\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\"source\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\"${include}\": [\n\t\t\t\t\"${GalleryExtensionTelemetryData}\"\n\t\t\t]\n\t\t}\n\t*/\n\ttelemetryService.publicLog(eventName, {\n\t\t...extensionData,\n\t\tverificationStatus,\n\t\tsuccess: !error,\n\t\tduration,\n\t\terrorcode,\n\t\terrorcodeDetail,\n\t\tdurationSinceUpdate,\n\t\tsource,\n\t});\n}\n\nexport abstract class AbstractExtensionTask<T> {\n\tprivate readonly barrier = new Barrier();\n\tprivate cancellablePromise: CancelablePromise<T> | undefined;\n\n\tasync waitUntilTaskIsFinished(): Promise<T> {\n\t\tawait this.barrier.wait();\n\t\treturn this.cancellablePromise!;\n\t}\n\n\trun(): Promise<T> {\n\t\tif (!this.cancellablePromise) {\n\t\t\tthis.cancellablePromise = createCancelablePromise((token) =>\n\t\t\t\tthis.doRun(token),\n\t\t\t);\n\t\t}\n\t\tthis.barrier.open();\n\t\treturn this.cancellablePromise;\n\t}\n\n\tcancel(): void {\n\t\tif (!this.cancellablePromise) {\n\t\t\tthis.cancellablePromise = createCancelablePromise((token) => {\n\t\t\t\treturn new Promise((c, e) => {\n\t\t\t\t\tconst disposable = token.onCancellationRequested(() => {\n\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\te(new CancellationError());\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.barrier.open();\n\t\t}\n\t\tthis.cancellablePromise.cancel();\n\t}\n\n\tprotected abstract doRun(token: CancellationToken): Promise<T>;\n}\n"],
  "mappings": "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",
  "names": ["gallery", "result", "error", "extensionIdentifier", "manifest", "task"]
}
