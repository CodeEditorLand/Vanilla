{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionNls.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isObject, isString } from '../../../base/common/types.js';\nimport { ILocalizedString } from '../../action/common/action.js';\nimport { IExtensionManifest } from '../../extensions/common/extensions.js';\nimport { localize } from '../../../nls.js';\nimport { ILogger } from '../../log/common/log.js';\n\nexport interface ITranslations {\n\t[key: string]: string | { message: string; comment: string[] } | undefined;\n}\n\nexport function localizeManifest(logger: ILogger, extensionManifest: IExtensionManifest, translations: ITranslations, fallbackTranslations?: ITranslations): IExtensionManifest {\n\ttry {\n\t\treplaceNLStrings(logger, extensionManifest, translations, fallbackTranslations);\n\t} catch (error) {\n\t\tlogger.error(error?.message ?? error);\n\t\t/*Ignore Error*/\n\t}\n\treturn extensionManifest;\n}\n\n/**\n * This routine makes the following assumptions:\n * The root element is an object literal\n */\nfunction replaceNLStrings(logger: ILogger, extensionManifest: IExtensionManifest, messages: ITranslations, originalMessages?: ITranslations): void {\n\tconst processEntry = (obj: any, key: string | number, command?: boolean) => {\n\t\tconst value = obj[key];\n\t\tif (isString(value)) {\n\t\t\tconst str = <string>value;\n\t\t\tconst length = str.length;\n\t\t\tif (length > 1 && str[0] === '%' && str[length - 1] === '%') {\n\t\t\t\tconst messageKey = str.substr(1, length - 2);\n\t\t\t\tlet translated = messages[messageKey];\n\t\t\t\t// If the messages come from a language pack they might miss some keys\n\t\t\t\t// Fill them from the original messages.\n\t\t\t\tif (translated === undefined && originalMessages) {\n\t\t\t\t\ttranslated = originalMessages[messageKey];\n\t\t\t\t}\n\t\t\t\tconst message: string | undefined = typeof translated === 'string' ? translated : translated?.message;\n\n\t\t\t\t// This branch returns ILocalizedString's instead of Strings so that the Command Palette can contain both the localized and the original value.\n\t\t\t\tconst original = originalMessages?.[messageKey];\n\t\t\t\tconst originalMessage: string | undefined = typeof original === 'string' ? original : original?.message;\n\n\t\t\t\tif (!message) {\n\t\t\t\t\tif (!originalMessage) {\n\t\t\t\t\t\tlogger.warn(`[${extensionManifest.name}]: ${localize('missingNLSKey', \"Couldn't find message for key {0}.\", messageKey)}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t// if we are translating the title or category of a command\n\t\t\t\t\tcommand && (key === 'title' || key === 'category') &&\n\t\t\t\t\t// and the original value is not the same as the translated value\n\t\t\t\t\toriginalMessage && originalMessage !== message\n\t\t\t\t) {\n\t\t\t\t\tconst localizedString: ILocalizedString = {\n\t\t\t\t\t\tvalue: message,\n\t\t\t\t\t\toriginal: originalMessage\n\t\t\t\t\t};\n\t\t\t\t\tobj[key] = localizedString;\n\t\t\t\t} else {\n\t\t\t\t\tobj[key] = message;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(value)) {\n\t\t\tfor (const k in value) {\n\t\t\t\tif (value.hasOwnProperty(k)) {\n\t\t\t\t\tk === 'commands' ? processEntry(value, k, true) : processEntry(value, k, command);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Array.isArray(value)) {\n\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\tprocessEntry(value, i, command);\n\t\t\t}\n\t\t}\n\t};\n\n\tfor (const key in extensionManifest) {\n\t\tif (extensionManifest.hasOwnProperty(key)) {\n\t\t\tprocessEntry(extensionManifest, key);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,UAAU,gBAAgB;AACnC,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AACzB,SAAS,eAAe;AAMjB,SAAS,iBAAiB,QAAiB,mBAAuC,cAA6B,sBAA0D;AAC/K,MAAI;AACH,qBAAiB,QAAQ,mBAAmB,cAAc,oBAAoB;AAAA,EAC/E,SAAS,OAAO;AACf,WAAO,MAAM,OAAO,WAAW,KAAK;AAAA,EAErC;AACA,SAAO;AACR;AARgB;AAchB,SAAS,iBAAiB,QAAiB,mBAAuC,UAAyB,kBAAwC;AAClJ,QAAM,eAAe,wBAAC,KAAU,KAAsB,YAAsB;AAC3E,UAAM,QAAQ,IAAI,GAAG;AACrB,QAAI,SAAS,KAAK,GAAG;AACpB,YAAM,MAAc;AACpB,YAAM,SAAS,IAAI;AACnB,UAAI,SAAS,KAAK,IAAI,CAAC,MAAM,OAAO,IAAI,SAAS,CAAC,MAAM,KAAK;AAC5D,cAAM,aAAa,IAAI,OAAO,GAAG,SAAS,CAAC;AAC3C,YAAI,aAAa,SAAS,UAAU;AAGpC,YAAI,eAAe,UAAa,kBAAkB;AACjD,uBAAa,iBAAiB,UAAU;AAAA,QACzC;AACA,cAAM,UAA8B,OAAO,eAAe,WAAW,aAAa,YAAY;AAG9F,cAAM,WAAW,mBAAmB,UAAU;AAC9C,cAAM,kBAAsC,OAAO,aAAa,WAAW,WAAW,UAAU;AAEhG,YAAI,CAAC,SAAS;AACb,cAAI,CAAC,iBAAiB;AACrB,mBAAO,KAAK,IAAI,kBAAkB,IAAI,MAAM,SAAS,iBAAiB,sCAAsC,UAAU,CAAC,EAAE;AAAA,UAC1H;AACA;AAAA,QACD;AAEA;AAAA;AAAA,UAEC,YAAY,QAAQ,WAAW,QAAQ;AAAA,UAEvC,mBAAmB,oBAAoB;AAAA,UACtC;AACD,gBAAM,kBAAoC;AAAA,YACzC,OAAO;AAAA,YACP,UAAU;AAAA,UACX;AACA,cAAI,GAAG,IAAI;AAAA,QACZ,OAAO;AACN,cAAI,GAAG,IAAI;AAAA,QACZ;AAAA,MACD;AAAA,IACD,WAAW,SAAS,KAAK,GAAG;AAC3B,iBAAW,KAAK,OAAO;AACtB,YAAI,MAAM,eAAe,CAAC,GAAG;AAC5B,gBAAM,aAAa,aAAa,OAAO,GAAG,IAAI,IAAI,aAAa,OAAO,GAAG,OAAO;AAAA,QACjF;AAAA,MACD;AAAA,IACD,WAAW,MAAM,QAAQ,KAAK,GAAG;AAChC,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,qBAAa,OAAO,GAAG,OAAO;AAAA,MAC/B;AAAA,IACD;AAAA,EACD,GApDqB;AAsDrB,aAAW,OAAO,mBAAmB;AACpC,QAAI,kBAAkB,eAAe,GAAG,GAAG;AAC1C,mBAAa,mBAAmB,GAAG;AAAA,IACpC;AAAA,EACD;AACD;AA5DS;",
  "names": []
}
