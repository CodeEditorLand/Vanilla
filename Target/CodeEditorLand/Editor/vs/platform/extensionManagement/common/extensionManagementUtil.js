import{getErrorMessage as c}from"../../../base/common/errors.js";import{isLinux as m,platform as g}from"../../../base/common/platform.js";import{arch as I}from"../../../base/common/process.js";import{compareIgnoreCase as E}from"../../../base/common/strings.js";import{URI as u}from"../../../base/common/uri.js";import{ExtensionIdentifier as y,TargetPlatform as d,UNDEFINED_PUBLISHER as h}from"../../extensions/common/extensions.js";import{TelemetryTrustedValue as p}from"../../telemetry/common/telemetryUtils.js";import{getTargetPlatform as x}from"./extensionManagement.js";function o(e,t){return e.uuid&&t.uuid?e.uuid===t.uuid:e.id===t.id?!0:E(e.id,t.id)===0}const P=/^([^.]+\..+)-(\d+\.\d+\.\d+)(-(.+))?$/;class a{constructor(t,r,n=d.UNDEFINED){this.identifier=t;this.version=r;this.targetPlatform=n;this.id=t.id}static create(t){const r=t.manifest?t.manifest.version:t.version,n=t.manifest?t.targetPlatform:t.properties.targetPlatform;return new a(t.identifier,r,n)}static parse(t){const r=P.exec(t);return r&&r[1]&&r[2]?new a({id:r[1]},r[2],r[4]||void 0):null}id;toString(){return`${this.id}-${this.version}${this.targetPlatform!==d.UNDEFINED?`-${this.targetPlatform}`:""}`}equals(t){return t instanceof a?o(this,t)&&this.version===t.version&&this.targetPlatform===t.targetPlatform:!1}}const T=/^([^.]+\..+)@((prerelease)|(\d+\.\d+\.\d+(-.*)?))$/;function $(e){const t=T.exec(e);return t&&t[1]?[f(t[1]),t[2]]:[f(e),void 0]}function D(e,t){return`${e}.${t}`}function f(e){return e.toLowerCase()}function C(e,t){return f(D(e??h,t))}function U(e,t){const r=[],n=i=>{for(const s of r)if(s.some(l=>o(t(l),t(i))))return s;return null};for(const i of e){const s=n(i);s?s.push(i):r.push([i])}return r}function V(e){return{id:e.identifier.id,name:e.manifest.name,galleryId:null,publisherId:e.publisherId,publisherName:e.manifest.publisher,publisherDisplayName:e.publisherDisplayName,dependencies:e.manifest.extensionDependencies&&e.manifest.extensionDependencies.length>0}}function A(e){return{id:new p(e.identifier.id),name:new p(e.name),version:e.version,galleryId:e.identifier.uuid,publisherId:e.publisherId,publisherName:e.publisher,publisherDisplayName:e.publisherDisplayName,isPreReleaseVersion:e.properties.isPreReleaseVersion,dependencies:!!(e.properties.dependencies&&e.properties.dependencies.length>0),isSigned:e.isSigned,...e.telemetryData}}const B=new y("pprice.better-merge");function j(e,t){const r=[],n=t.manifest.extensionDependencies?.slice(0)??[];for(;n.length;){const i=n.shift();if(i&&r.every(s=>!o(s.identifier,{id:i}))){const s=e.filter(l=>o(l.identifier,{id:i}));s.length===1&&(r.push(s[0]),n.push(...s[0].manifest.extensionDependencies?.slice(0)??[]))}}return r}async function b(e,t){if(!m)return!1;let r;try{r=(await e.readFile(u.file("/etc/os-release"))).value.toString()}catch{try{r=(await e.readFile(u.file("/usr/lib/os-release"))).value.toString()}catch(i){t.debug("Error while getting the os-release file.",c(i))}}return!!r&&(r.match(/^ID=([^\u001b\r\n]*)/m)||[])[1]==="alpine"}async function H(e,t){const r=await b(e,t),n=x(r?"alpine":g,I);return t.debug("ComputeTargetPlatform:",n),n}export{B as BetterMergeId,a as ExtensionKey,f as adoptToGalleryExtensionId,o as areSameExtensions,H as computeTargetPlatform,j as getExtensionDependencies,D as getExtensionId,C as getGalleryExtensionId,A as getGalleryExtensionTelemetryData,$ as getIdAndVersion,V as getLocalExtensionTelemetryData,U as groupByExtension};
