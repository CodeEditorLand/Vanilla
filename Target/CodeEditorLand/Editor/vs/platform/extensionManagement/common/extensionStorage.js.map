{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionStorage.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { IProfileStorageValueChangeEvent, IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { adoptToGalleryExtensionId, areSameExtensions, getExtensionId } from './extensionManagementUtil.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { distinct } from '../../../base/common/arrays.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IExtension } from '../../extensions/common/extensions.js';\nimport { isString } from '../../../base/common/types.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { IExtensionManagementService, IGalleryExtension } from './extensionManagement.js';\n\nexport interface IExtensionIdWithVersion {\n\tid: string;\n\tversion: string;\n}\n\nexport const IExtensionStorageService = createDecorator<IExtensionStorageService>('IExtensionStorageService');\n\nexport interface IExtensionStorageService {\n\treadonly _serviceBrand: undefined;\n\n\tgetExtensionState(extension: IExtension | IGalleryExtension | string, global: boolean): IStringDictionary<any> | undefined;\n\tgetExtensionStateRaw(extension: IExtension | IGalleryExtension | string, global: boolean): string | undefined;\n\tsetExtensionState(extension: IExtension | IGalleryExtension | string, state: IStringDictionary<any> | undefined, global: boolean): void;\n\n\treadonly onDidChangeExtensionStorageToSync: Event<void>;\n\tsetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion, keys: string[]): void;\n\tgetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion): string[] | undefined;\n\n\taddToMigrationList(from: string, to: string): void;\n\tgetSourceExtensionToMigrate(target: string): string | undefined;\n}\n\nconst EXTENSION_KEYS_ID_VERSION_REGEX = /^extensionKeys\\/([^.]+\\..+)@(\\d+\\.\\d+\\.\\d+(-.*)?)$/;\n\nexport class ExtensionStorageService extends Disposable implements IExtensionStorageService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate static LARGE_STATE_WARNING_THRESHOLD = 512 * 1024;\n\n\tprivate static toKey(extension: IExtensionIdWithVersion): string {\n\t\treturn `extensionKeys/${adoptToGalleryExtensionId(extension.id)}@${extension.version}`;\n\t}\n\n\tprivate static fromKey(key: string): IExtensionIdWithVersion | undefined {\n\t\tconst matches = EXTENSION_KEYS_ID_VERSION_REGEX.exec(key);\n\t\tif (matches && matches[1]) {\n\t\t\treturn { id: matches[1], version: matches[2] };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/* TODO @sandy081: This has to be done across all profiles */\n\tstatic async removeOutdatedExtensionVersions(extensionManagementService: IExtensionManagementService, storageService: IStorageService): Promise<void> {\n\t\tconst extensions = await extensionManagementService.getInstalled();\n\t\tconst extensionVersionsToRemove: string[] = [];\n\t\tfor (const [id, versions] of ExtensionStorageService.readAllExtensionsWithKeysForSync(storageService)) {\n\t\t\tconst extensionVersion = extensions.find(e => areSameExtensions(e.identifier, { id }))?.manifest.version;\n\t\t\tfor (const version of versions) {\n\t\t\t\tif (extensionVersion !== version) {\n\t\t\t\t\textensionVersionsToRemove.push(ExtensionStorageService.toKey({ id, version }));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const key of extensionVersionsToRemove) {\n\t\t\tstorageService.remove(key, StorageScope.PROFILE);\n\t\t}\n\t}\n\n\tprivate static readAllExtensionsWithKeysForSync(storageService: IStorageService): Map<string, string[]> {\n\t\tconst extensionsWithKeysForSync = new Map<string, string[]>();\n\t\tconst keys = storageService.keys(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tfor (const key of keys) {\n\t\t\tconst extensionIdWithVersion = ExtensionStorageService.fromKey(key);\n\t\t\tif (extensionIdWithVersion) {\n\t\t\t\tlet versions = extensionsWithKeysForSync.get(extensionIdWithVersion.id.toLowerCase());\n\t\t\t\tif (!versions) {\n\t\t\t\t\textensionsWithKeysForSync.set(extensionIdWithVersion.id.toLowerCase(), versions = []);\n\t\t\t\t}\n\t\t\t\tversions.push(extensionIdWithVersion.version);\n\t\t\t}\n\t\t}\n\t\treturn extensionsWithKeysForSync;\n\t}\n\n\tprivate readonly _onDidChangeExtensionStorageToSync = this._register(new Emitter<void>());\n\treadonly onDidChangeExtensionStorageToSync = this._onDidChangeExtensionStorageToSync.event;\n\n\tprivate readonly extensionsWithKeysForSync: Map<string, string[]>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.extensionsWithKeysForSync = ExtensionStorageService.readAllExtensionsWithKeysForSync(storageService);\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, undefined, this._register(new DisposableStore()))(e => this.onDidChangeStorageValue(e)));\n\t}\n\n\tprivate onDidChangeStorageValue(e: IProfileStorageValueChangeEvent): void {\n\n\t\t// State of extension with keys for sync has changed\n\t\tif (this.extensionsWithKeysForSync.has(e.key.toLowerCase())) {\n\t\t\tthis._onDidChangeExtensionStorageToSync.fire();\n\t\t\treturn;\n\t\t}\n\n\t\t// Keys for sync of an extension has changed\n\t\tconst extensionIdWithVersion = ExtensionStorageService.fromKey(e.key);\n\t\tif (extensionIdWithVersion) {\n\t\t\tif (this.storageService.get(e.key, StorageScope.PROFILE) === undefined) {\n\t\t\t\tthis.extensionsWithKeysForSync.delete(extensionIdWithVersion.id.toLowerCase());\n\t\t\t} else {\n\t\t\t\tlet versions = this.extensionsWithKeysForSync.get(extensionIdWithVersion.id.toLowerCase());\n\t\t\t\tif (!versions) {\n\t\t\t\t\tthis.extensionsWithKeysForSync.set(extensionIdWithVersion.id.toLowerCase(), versions = []);\n\t\t\t\t}\n\t\t\t\tversions.push(extensionIdWithVersion.version);\n\t\t\t\tthis._onDidChangeExtensionStorageToSync.fire();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate getExtensionId(extension: IExtension | IGalleryExtension | string): string {\n\t\tif (isString(extension)) {\n\t\t\treturn extension;\n\t\t}\n\t\tconst publisher = (extension as IExtension).manifest ? (extension as IExtension).manifest.publisher : (extension as IGalleryExtension).publisher;\n\t\tconst name = (extension as IExtension).manifest ? (extension as IExtension).manifest.name : (extension as IGalleryExtension).name;\n\t\treturn getExtensionId(publisher, name);\n\t}\n\n\tgetExtensionState(extension: IExtension | IGalleryExtension | string, global: boolean): IStringDictionary<any> | undefined {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tconst jsonValue = this.getExtensionStateRaw(extension, global);\n\t\tif (jsonValue) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(jsonValue);\n\t\t\t} catch (error) {\n\t\t\t\t// Do not fail this call but log it for diagnostics\n\t\t\t\t// https://github.com/microsoft/vscode/issues/132777\n\t\t\t\tthis.logService.error(`[mainThreadStorage] unexpected error parsing storage contents (extensionId: ${extensionId}, global: ${global}): ${error}`);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetExtensionStateRaw(extension: IExtension | IGalleryExtension | string, global: boolean): string | undefined {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tconst rawState = this.storageService.get(extensionId, global ? StorageScope.PROFILE : StorageScope.WORKSPACE);\n\n\t\tif (rawState && rawState?.length > ExtensionStorageService.LARGE_STATE_WARNING_THRESHOLD) {\n\t\t\tthis.logService.warn(`[mainThreadStorage] large extension state detected (extensionId: ${extensionId}, global: ${global}): ${rawState.length / 1024}kb. Consider to use 'storageUri' or 'globalStorageUri' to store this data on disk instead.`);\n\t\t}\n\n\t\treturn rawState;\n\t}\n\n\tsetExtensionState(extension: IExtension | IGalleryExtension | string, state: IStringDictionary<any> | undefined, global: boolean): void {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tif (state === undefined) {\n\t\t\tthis.storageService.remove(extensionId, global ? StorageScope.PROFILE : StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.store(extensionId, JSON.stringify(state), global ? StorageScope.PROFILE : StorageScope.WORKSPACE, StorageTarget.MACHINE /* Extension state is synced separately through extensions */);\n\t\t}\n\t}\n\n\tsetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis.storageService.store(ExtensionStorageService.toKey(extensionIdWithVersion), JSON.stringify(keys), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n\n\tgetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion): string[] | undefined {\n\t\tconst extensionKeysForSyncFromProduct = this.productService.extensionSyncedKeys?.[extensionIdWithVersion.id.toLowerCase()];\n\t\tconst extensionKeysForSyncFromStorageValue = this.storageService.get(ExtensionStorageService.toKey(extensionIdWithVersion), StorageScope.PROFILE);\n\t\tconst extensionKeysForSyncFromStorage = extensionKeysForSyncFromStorageValue ? JSON.parse(extensionKeysForSyncFromStorageValue) : undefined;\n\n\t\treturn extensionKeysForSyncFromStorage && extensionKeysForSyncFromProduct\n\t\t\t? distinct([...extensionKeysForSyncFromStorage, ...extensionKeysForSyncFromProduct])\n\t\t\t: (extensionKeysForSyncFromStorage || extensionKeysForSyncFromProduct);\n\t}\n\n\taddToMigrationList(from: string, to: string): void {\n\t\tif (from !== to) {\n\t\t\t// remove the duplicates\n\t\t\tconst migrationList: [string, string][] = this.migrationList.filter(entry => !entry.includes(from) && !entry.includes(to));\n\t\t\tmigrationList.push([from, to]);\n\t\t\tthis.migrationList = migrationList;\n\t\t}\n\t}\n\n\tgetSourceExtensionToMigrate(toExtensionId: string): string | undefined {\n\t\tconst entry = this.migrationList.find(([, to]) => toExtensionId === to);\n\t\treturn entry ? entry[0] : undefined;\n\t}\n\n\tprivate get migrationList(): [string, string][] {\n\t\tconst value = this.storageService.get('extensionStorage.migrationList', StorageScope.APPLICATION, '[]');\n\t\ttry {\n\t\t\tconst migrationList = JSON.parse(value);\n\t\t\tif (Array.isArray(migrationList)) {\n\t\t\t\treturn migrationList;\n\t\t\t}\n\t\t} catch (error) { /* ignore */ }\n\t\treturn [];\n\t}\n\n\tprivate set migrationList(migrationList: [string, string][]) {\n\t\tif (migrationList.length) {\n\t\t\tthis.storageService.store('extensionStorage.migrationList', JSON.stringify(migrationList), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove('extensionStorage.migrationList', StorageScope.APPLICATION);\n\t\t}\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
