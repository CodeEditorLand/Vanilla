{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionStorage.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../base/common/arrays.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable, DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { isString } from \"../../../base/common/types.js\";\nimport type { IExtension } from \"../../extensions/common/extensions.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\ttype IProfileStorageValueChangeEvent,\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../storage/common/storage.js\";\nimport type {\n\tIExtensionManagementService,\n\tIGalleryExtension,\n} from \"./extensionManagement.js\";\nimport {\n\tadoptToGalleryExtensionId,\n\tareSameExtensions,\n\tgetExtensionId,\n} from \"./extensionManagementUtil.js\";\n\nexport interface IExtensionIdWithVersion {\n\tid: string;\n\tversion: string;\n}\n\nexport const IExtensionStorageService =\n\tcreateDecorator<IExtensionStorageService>(\"IExtensionStorageService\");\n\nexport interface IExtensionStorageService {\n\treadonly _serviceBrand: undefined;\n\n\tgetExtensionState(\n\t\textension: IExtension | IGalleryExtension | string,\n\t\tglobal: boolean,\n\t): IStringDictionary<any> | undefined;\n\tgetExtensionStateRaw(\n\t\textension: IExtension | IGalleryExtension | string,\n\t\tglobal: boolean,\n\t): string | undefined;\n\tsetExtensionState(\n\t\textension: IExtension | IGalleryExtension | string,\n\t\tstate: IStringDictionary<any> | undefined,\n\t\tglobal: boolean,\n\t): void;\n\n\treadonly onDidChangeExtensionStorageToSync: Event<void>;\n\tsetKeysForSync(\n\t\textensionIdWithVersion: IExtensionIdWithVersion,\n\t\tkeys: string[],\n\t): void;\n\tgetKeysForSync(\n\t\textensionIdWithVersion: IExtensionIdWithVersion,\n\t): string[] | undefined;\n\n\taddToMigrationList(from: string, to: string): void;\n\tgetSourceExtensionToMigrate(target: string): string | undefined;\n}\n\nconst EXTENSION_KEYS_ID_VERSION_REGEX =\n\t/^extensionKeys\\/([^.]+\\..+)@(\\d+\\.\\d+\\.\\d+(-.*)?)$/;\n\nexport class ExtensionStorageService\n\textends Disposable\n\timplements IExtensionStorageService\n{\n\treadonly _serviceBrand: undefined;\n\n\tprivate static LARGE_STATE_WARNING_THRESHOLD = 512 * 1024;\n\n\tprivate static toKey(extension: IExtensionIdWithVersion): string {\n\t\treturn `extensionKeys/${adoptToGalleryExtensionId(extension.id)}@${extension.version}`;\n\t}\n\n\tprivate static fromKey(key: string): IExtensionIdWithVersion | undefined {\n\t\tconst matches = EXTENSION_KEYS_ID_VERSION_REGEX.exec(key);\n\t\tif (matches && matches[1]) {\n\t\t\treturn { id: matches[1], version: matches[2] };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/* TODO @sandy081: This has to be done across all profiles */\n\tstatic async removeOutdatedExtensionVersions(\n\t\textensionManagementService: IExtensionManagementService,\n\t\tstorageService: IStorageService,\n\t): Promise<void> {\n\t\tconst extensions = await extensionManagementService.getInstalled();\n\t\tconst extensionVersionsToRemove: string[] = [];\n\t\tfor (const [\n\t\t\tid,\n\t\t\tversions,\n\t\t] of ExtensionStorageService.readAllExtensionsWithKeysForSync(\n\t\t\tstorageService,\n\t\t)) {\n\t\t\tconst extensionVersion = extensions.find((e) =>\n\t\t\t\tareSameExtensions(e.identifier, { id }),\n\t\t\t)?.manifest.version;\n\t\t\tfor (const version of versions) {\n\t\t\t\tif (extensionVersion !== version) {\n\t\t\t\t\textensionVersionsToRemove.push(\n\t\t\t\t\t\tExtensionStorageService.toKey({ id, version }),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const key of extensionVersionsToRemove) {\n\t\t\tstorageService.remove(key, StorageScope.PROFILE);\n\t\t}\n\t}\n\n\tprivate static readAllExtensionsWithKeysForSync(\n\t\tstorageService: IStorageService,\n\t): Map<string, string[]> {\n\t\tconst extensionsWithKeysForSync = new Map<string, string[]>();\n\t\tconst keys = storageService.keys(\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tfor (const key of keys) {\n\t\t\tconst extensionIdWithVersion = ExtensionStorageService.fromKey(key);\n\t\t\tif (extensionIdWithVersion) {\n\t\t\t\tlet versions = extensionsWithKeysForSync.get(\n\t\t\t\t\textensionIdWithVersion.id.toLowerCase(),\n\t\t\t\t);\n\t\t\t\tif (!versions) {\n\t\t\t\t\textensionsWithKeysForSync.set(\n\t\t\t\t\t\textensionIdWithVersion.id.toLowerCase(),\n\t\t\t\t\t\t(versions = []),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tversions.push(extensionIdWithVersion.version);\n\t\t\t}\n\t\t}\n\t\treturn extensionsWithKeysForSync;\n\t}\n\n\tprivate readonly _onDidChangeExtensionStorageToSync = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeExtensionStorageToSync =\n\t\tthis._onDidChangeExtensionStorageToSync.event;\n\n\tprivate readonly extensionsWithKeysForSync: Map<string, string[]>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.extensionsWithKeysForSync = ExtensionStorageService.readAllExtensionsWithKeysForSync(storageService);\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, undefined, this._register(new DisposableStore()))(e => this.onDidChangeStorageValue(e)));\n\t}\n\n\tprivate onDidChangeStorageValue(e: IProfileStorageValueChangeEvent): void {\n\t\t// State of extension with keys for sync has changed\n\t\tif (this.extensionsWithKeysForSync.has(e.key.toLowerCase())) {\n\t\t\tthis._onDidChangeExtensionStorageToSync.fire();\n\t\t\treturn;\n\t\t}\n\n\t\t// Keys for sync of an extension has changed\n\t\tconst extensionIdWithVersion = ExtensionStorageService.fromKey(e.key);\n\t\tif (extensionIdWithVersion) {\n\t\t\tif (\n\t\t\t\tthis.storageService.get(e.key, StorageScope.PROFILE) ===\n\t\t\t\tundefined\n\t\t\t) {\n\t\t\t\tthis.extensionsWithKeysForSync.delete(\n\t\t\t\t\textensionIdWithVersion.id.toLowerCase(),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlet versions = this.extensionsWithKeysForSync.get(\n\t\t\t\t\textensionIdWithVersion.id.toLowerCase(),\n\t\t\t\t);\n\t\t\t\tif (!versions) {\n\t\t\t\t\tthis.extensionsWithKeysForSync.set(\n\t\t\t\t\t\textensionIdWithVersion.id.toLowerCase(),\n\t\t\t\t\t\t(versions = []),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tversions.push(extensionIdWithVersion.version);\n\t\t\t\tthis._onDidChangeExtensionStorageToSync.fire();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate getExtensionId(\n\t\textension: IExtension | IGalleryExtension | string,\n\t): string {\n\t\tif (isString(extension)) {\n\t\t\treturn extension;\n\t\t}\n\t\tconst publisher = (extension as IExtension).manifest\n\t\t\t? (extension as IExtension).manifest.publisher\n\t\t\t: (extension as IGalleryExtension).publisher;\n\t\tconst name = (extension as IExtension).manifest\n\t\t\t? (extension as IExtension).manifest.name\n\t\t\t: (extension as IGalleryExtension).name;\n\t\treturn getExtensionId(publisher, name);\n\t}\n\n\tgetExtensionState(\n\t\textension: IExtension | IGalleryExtension | string,\n\t\tglobal: boolean,\n\t): IStringDictionary<any> | undefined {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tconst jsonValue = this.getExtensionStateRaw(extension, global);\n\t\tif (jsonValue) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(jsonValue);\n\t\t\t} catch (error) {\n\t\t\t\t// Do not fail this call but log it for diagnostics\n\t\t\t\t// https://github.com/microsoft/vscode/issues/132777\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`[mainThreadStorage] unexpected error parsing storage contents (extensionId: ${extensionId}, global: ${global}): ${error}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetExtensionStateRaw(\n\t\textension: IExtension | IGalleryExtension | string,\n\t\tglobal: boolean,\n\t): string | undefined {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tconst rawState = this.storageService.get(\n\t\t\textensionId,\n\t\t\tglobal ? StorageScope.PROFILE : StorageScope.WORKSPACE,\n\t\t);\n\n\t\tif (\n\t\t\trawState &&\n\t\t\trawState?.length >\n\t\t\t\tExtensionStorageService.LARGE_STATE_WARNING_THRESHOLD\n\t\t) {\n\t\t\tthis.logService.warn(\n\t\t\t\t`[mainThreadStorage] large extension state detected (extensionId: ${extensionId}, global: ${global}): ${rawState.length / 1024}kb. Consider to use 'storageUri' or 'globalStorageUri' to store this data on disk instead.`,\n\t\t\t);\n\t\t}\n\n\t\treturn rawState;\n\t}\n\n\tsetExtensionState(\n\t\textension: IExtension | IGalleryExtension | string,\n\t\tstate: IStringDictionary<any> | undefined,\n\t\tglobal: boolean,\n\t): void {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tif (state === undefined) {\n\t\t\tthis.storageService.remove(\n\t\t\t\textensionId,\n\t\t\t\tglobal ? StorageScope.PROFILE : StorageScope.WORKSPACE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.store(\n\t\t\t\textensionId,\n\t\t\t\tJSON.stringify(state),\n\t\t\t\tglobal ? StorageScope.PROFILE : StorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE /* Extension state is synced separately through extensions */,\n\t\t\t);\n\t\t}\n\t}\n\n\tsetKeysForSync(\n\t\textensionIdWithVersion: IExtensionIdWithVersion,\n\t\tkeys: string[],\n\t): void {\n\t\tthis.storageService.store(\n\t\t\tExtensionStorageService.toKey(extensionIdWithVersion),\n\t\t\tJSON.stringify(keys),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tgetKeysForSync(\n\t\textensionIdWithVersion: IExtensionIdWithVersion,\n\t): string[] | undefined {\n\t\tconst extensionKeysForSyncFromProduct =\n\t\t\tthis.productService.extensionSyncedKeys?.[\n\t\t\t\textensionIdWithVersion.id.toLowerCase()\n\t\t\t];\n\t\tconst extensionKeysForSyncFromStorageValue = this.storageService.get(\n\t\t\tExtensionStorageService.toKey(extensionIdWithVersion),\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\t\tconst extensionKeysForSyncFromStorage =\n\t\t\textensionKeysForSyncFromStorageValue\n\t\t\t\t? JSON.parse(extensionKeysForSyncFromStorageValue)\n\t\t\t\t: undefined;\n\n\t\treturn extensionKeysForSyncFromStorage &&\n\t\t\textensionKeysForSyncFromProduct\n\t\t\t? distinct([\n\t\t\t\t\t...extensionKeysForSyncFromStorage,\n\t\t\t\t\t...extensionKeysForSyncFromProduct,\n\t\t\t\t])\n\t\t\t: extensionKeysForSyncFromStorage ||\n\t\t\t\t\textensionKeysForSyncFromProduct;\n\t}\n\n\taddToMigrationList(from: string, to: string): void {\n\t\tif (from !== to) {\n\t\t\t// remove the duplicates\n\t\t\tconst migrationList: [string, string][] = this.migrationList.filter(\n\t\t\t\t(entry) => !entry.includes(from) && !entry.includes(to),\n\t\t\t);\n\t\t\tmigrationList.push([from, to]);\n\t\t\tthis.migrationList = migrationList;\n\t\t}\n\t}\n\n\tgetSourceExtensionToMigrate(toExtensionId: string): string | undefined {\n\t\tconst entry = this.migrationList.find(([, to]) => toExtensionId === to);\n\t\treturn entry ? entry[0] : undefined;\n\t}\n\n\tprivate get migrationList(): [string, string][] {\n\t\tconst value = this.storageService.get(\n\t\t\t\"extensionStorage.migrationList\",\n\t\t\tStorageScope.APPLICATION,\n\t\t\t\"[]\",\n\t\t);\n\t\ttry {\n\t\t\tconst migrationList = JSON.parse(value);\n\t\t\tif (Array.isArray(migrationList)) {\n\t\t\t\treturn migrationList;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* ignore */\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate set migrationList(migrationList: [string, string][]) {\n\t\tif (migrationList.length) {\n\t\t\tthis.storageService.store(\n\t\t\t\t\"extensionStorage.migrationList\",\n\t\t\t\tJSON.stringify(migrationList),\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.remove(\n\t\t\t\t\"extensionStorage.migrationList\",\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
