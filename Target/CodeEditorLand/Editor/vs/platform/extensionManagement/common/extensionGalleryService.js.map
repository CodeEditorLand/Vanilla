{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionGalleryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../base/common/arrays.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport {\n\tCancellationError,\n\tgetErrorMessage,\n\tisCancellationError,\n} from \"../../../base/common/errors.js\";\nimport type { IPager } from \"../../../base/common/paging.js\";\nimport { isWeb, platform } from \"../../../base/common/platform.js\";\nimport { arch } from \"../../../base/common/process.js\";\nimport { StopWatch } from \"../../../base/common/stopwatch.js\";\nimport { isBoolean } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport {\n\ttype IHeaders,\n\ttype IRequestContext,\n\ttype IRequestOptions,\n\tisOfflineError,\n} from \"../../../base/parts/request/common/request.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport {\n\tareApiProposalsCompatible,\n\tisEngineValid,\n} from \"../../extensions/common/extensionValidator.js\";\nimport {\n\ttype IExtensionManifest,\n\tTargetPlatform,\n} from \"../../extensions/common/extensions.js\";\nimport { resolveMarketplaceHeaders } from \"../../externalServices/common/marketplace.js\";\nimport { IFileService } from \"../../files/common/files.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\tIRequestService,\n\tasJson,\n\tasTextOrError,\n\tisSuccess,\n} from \"../../request/common/request.js\";\nimport { IStorageService } from \"../../storage/common/storage.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport {\n\tExtensionGalleryError,\n\tExtensionGalleryErrorCode,\n\ttype IDeprecationInfo,\n\ttype IExtensionGalleryService,\n\ttype IExtensionIdentifier,\n\ttype IExtensionInfo,\n\ttype IExtensionQueryOptions,\n\ttype IExtensionsControlManifest,\n\ttype IGalleryExtension,\n\ttype IGalleryExtensionAsset,\n\ttype IGalleryExtensionAssets,\n\ttype IGalleryExtensionVersion,\n\ttype IProductVersion,\n\ttype IQueryOptions,\n\ttype ISearchPrefferedResults,\n\ttype ITranslation,\n\tInstallOperation,\n\tSortBy,\n\tSortOrder,\n\tStatisticType,\n\tWEB_EXTENSION_TAG,\n\tgetTargetPlatform,\n\tisNotWebExtensionInWebTargetPlatform,\n\tisTargetPlatformCompatible,\n\ttoTargetPlatform,\n} from \"./extensionManagement.js\";\nimport {\n\tadoptToGalleryExtensionId,\n\tareSameExtensions,\n\tgetGalleryExtensionId,\n\tgetGalleryExtensionTelemetryData,\n} from \"./extensionManagementUtil.js\";\n\nconst CURRENT_TARGET_PLATFORM = isWeb\n\t? TargetPlatform.WEB\n\t: getTargetPlatform(platform, arch);\nconst ACTIVITY_HEADER_NAME = \"X-Market-Search-Activity-Id\";\n\ninterface IRawGalleryExtensionFile {\n\treadonly assetType: string;\n\treadonly source: string;\n}\n\ninterface IRawGalleryExtensionProperty {\n\treadonly key: string;\n\treadonly value: string;\n}\n\nexport interface IRawGalleryExtensionVersion {\n\treadonly version: string;\n\treadonly lastUpdated: string;\n\treadonly assetUri: string;\n\treadonly fallbackAssetUri: string;\n\treadonly files: IRawGalleryExtensionFile[];\n\treadonly properties?: IRawGalleryExtensionProperty[];\n\treadonly targetPlatform?: string;\n}\n\ninterface IRawGalleryExtensionStatistics {\n\treadonly statisticName: string;\n\treadonly value: number;\n}\n\ninterface IRawGalleryExtensionPublisher {\n\treadonly displayName: string;\n\treadonly publisherId: string;\n\treadonly publisherName: string;\n\treadonly domain?: string | null;\n\treadonly isDomainVerified?: boolean;\n}\n\ninterface IRawGalleryExtension {\n\treadonly extensionId: string;\n\treadonly extensionName: string;\n\treadonly displayName: string;\n\treadonly shortDescription?: string;\n\treadonly publisher: IRawGalleryExtensionPublisher;\n\treadonly versions: IRawGalleryExtensionVersion[];\n\treadonly statistics: IRawGalleryExtensionStatistics[];\n\treadonly tags: string[] | undefined;\n\treadonly releaseDate: string;\n\treadonly publishedDate: string;\n\treadonly lastUpdated: string;\n\treadonly categories: string[] | undefined;\n\treadonly flags: string;\n}\n\ninterface IRawGalleryExtensionsResult {\n\treadonly galleryExtensions: IRawGalleryExtension[];\n\treadonly total: number;\n\treadonly context?: IStringDictionary<string>;\n}\n\ninterface IRawGalleryQueryResult {\n\treadonly results: {\n\t\treadonly extensions: IRawGalleryExtension[];\n\t\treadonly resultMetadata: {\n\t\t\treadonly metadataType: string;\n\t\t\treadonly metadataItems: {\n\t\t\t\treadonly name: string;\n\t\t\t\treadonly count: number;\n\t\t\t}[];\n\t\t}[];\n\t}[];\n}\n\nenum Flags {\n\t/**\n\t * None is used to retrieve only the basic extension details.\n\t */\n\tNone = 0x0,\n\n\t/**\n\t * IncludeVersions will return version information for extensions returned\n\t */\n\tIncludeVersions = 0x1,\n\n\t/**\n\t * IncludeFiles will return information about which files were found\n\t * within the extension that were stored independent of the manifest.\n\t * When asking for files, versions will be included as well since files\n\t * are returned as a property of the versions.\n\t * These files can be retrieved using the path to the file without\n\t * requiring the entire manifest be downloaded.\n\t */\n\tIncludeFiles = 0x2,\n\n\t/**\n\t * Include the Categories and Tags that were added to the extension definition.\n\t */\n\tIncludeCategoryAndTags = 0x4,\n\n\t/**\n\t * Include the details about which accounts the extension has been shared\n\t * with if the extension is a private extension.\n\t */\n\tIncludeSharedAccounts = 0x8,\n\n\t/**\n\t * Include properties associated with versions of the extension\n\t */\n\tIncludeVersionProperties = 0x10,\n\n\t/**\n\t * Excluding non-validated extensions will remove any extension versions that\n\t * either are in the process of being validated or have failed validation.\n\t */\n\tExcludeNonValidated = 0x20,\n\n\t/**\n\t * Include the set of installation targets the extension has requested.\n\t */\n\tIncludeInstallationTargets = 0x40,\n\n\t/**\n\t * Include the base uri for assets of this extension\n\t */\n\tIncludeAssetUri = 0x80,\n\n\t/**\n\t * Include the statistics associated with this extension\n\t */\n\tIncludeStatistics = 0x100,\n\n\t/**\n\t * When retrieving versions from a query, only include the latest\n\t * version of the extensions that matched. This is useful when the\n\t * caller doesn't need all the published versions. It will save a\n\t * significant size in the returned payload.\n\t */\n\tIncludeLatestVersionOnly = 0x200,\n\n\t/**\n\t * The Unpublished extension flag indicates that the extension can't be installed/downloaded.\n\t * Users who have installed such an extension can continue to use the extension.\n\t */\n\tUnpublished = 0x1000,\n\n\t/**\n\t * Include the details if an extension is in conflict list or not\n\t */\n\tIncludeNameConflictInfo = 0x8000,\n}\n\nfunction flagsToString(...flags: Flags[]): string {\n\treturn String(flags.reduce((r, f) => r | f, 0));\n}\n\nenum FilterType {\n\tTag = 1,\n\tExtensionId = 4,\n\tCategory = 5,\n\tExtensionName = 7,\n\tTarget = 8,\n\tFeatured = 9,\n\tSearchText = 10,\n\tExcludeWithFlags = 12,\n}\n\nconst AssetType = {\n\tIcon: \"Microsoft.VisualStudio.Services.Icons.Default\",\n\tDetails: \"Microsoft.VisualStudio.Services.Content.Details\",\n\tChangelog: \"Microsoft.VisualStudio.Services.Content.Changelog\",\n\tManifest: \"Microsoft.VisualStudio.Code.Manifest\",\n\tVSIX: \"Microsoft.VisualStudio.Services.VSIXPackage\",\n\tLicense: \"Microsoft.VisualStudio.Services.Content.License\",\n\tRepository: \"Microsoft.VisualStudio.Services.Links.Source\",\n\tSignature: \"Microsoft.VisualStudio.Services.VsixSignature\",\n};\n\nconst PropertyType = {\n\tDependency: \"Microsoft.VisualStudio.Code.ExtensionDependencies\",\n\tExtensionPack: \"Microsoft.VisualStudio.Code.ExtensionPack\",\n\tEngine: \"Microsoft.VisualStudio.Code.Engine\",\n\tPreRelease: \"Microsoft.VisualStudio.Code.PreRelease\",\n\tEnabledApiProposals: \"Microsoft.VisualStudio.Code.EnabledApiProposals\",\n\tLocalizedLanguages: \"Microsoft.VisualStudio.Code.LocalizedLanguages\",\n\tWebExtension: \"Microsoft.VisualStudio.Code.WebExtension\",\n\tSponsorLink: \"Microsoft.VisualStudio.Code.SponsorLink\",\n\tSupportLink: \"Microsoft.VisualStudio.Services.Links.Support\",\n\tExecutesCode: \"Microsoft.VisualStudio.Code.ExecutesCode\",\n};\n\ninterface ICriterium {\n\treadonly filterType: FilterType;\n\treadonly value?: string;\n}\n\nconst DefaultPageSize = 10;\n\ninterface IQueryState {\n\treadonly pageNumber: number;\n\treadonly pageSize: number;\n\treadonly sortBy: SortBy;\n\treadonly sortOrder: SortOrder;\n\treadonly flags: Flags;\n\treadonly criteria: ICriterium[];\n\treadonly assetTypes: string[];\n\treadonly source?: string;\n}\n\nconst DefaultQueryState: IQueryState = {\n\tpageNumber: 1,\n\tpageSize: DefaultPageSize,\n\tsortBy: SortBy.NoneOrRelevance,\n\tsortOrder: SortOrder.Default,\n\tflags: Flags.None,\n\tcriteria: [],\n\tassetTypes: [],\n};\n\ntype GalleryServiceQueryClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Information about Marketplace query and its response\";\n\treadonly filterTypes: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Filter types used in the query.\";\n\t};\n\treadonly flags: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Flags passed in the query.\";\n\t};\n\treadonly sortBy: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"sorted by option passed in the query\";\n\t};\n\treadonly sortOrder: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"sort order option passed in the query\";\n\t};\n\treadonly pageNumber: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"requested page number in the query\";\n\t};\n\treadonly duration: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tisMeasurement: true;\n\t\tcomment: \"amount of time taken by the query request\";\n\t};\n\treadonly success: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"whether the query reques is success or not\";\n\t};\n\treadonly requestBodySize: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"size of the request body\";\n\t};\n\treadonly responseBodySize?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"size of the response body\";\n\t};\n\treadonly statusCode?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"status code of the response\";\n\t};\n\treadonly errorCode?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"error code of the response\";\n\t};\n\treadonly count?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"total number of extensions matching the query\";\n\t};\n\treadonly source?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"source that requested this query, eg., recommendations, viewlet\";\n\t};\n\treadonly searchTextLength?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"length of the search text in the query\";\n\t};\n};\n\ntype QueryTelemetryData = {\n\treadonly flags: number;\n\treadonly filterTypes: string[];\n\treadonly sortBy: string;\n\treadonly sortOrder: string;\n\treadonly pageNumber: string;\n\treadonly source?: string;\n\treadonly searchTextLength?: number;\n};\n\ntype GalleryServiceQueryEvent = QueryTelemetryData & {\n\treadonly duration: number;\n\treadonly success: boolean;\n\treadonly requestBodySize: string;\n\treadonly responseBodySize?: string;\n\treadonly statusCode?: string;\n\treadonly errorCode?: string;\n\treadonly count?: string;\n};\n\ntype GalleryServiceAdditionalQueryClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Response information about the additional query to the Marketplace for fetching all versions to get release version\";\n\treadonly duration: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tisMeasurement: true;\n\t\tcomment: \"Amount of time taken by the additional query\";\n\t};\n\treadonly count: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Total number of extensions returned by this additional query\";\n\t};\n};\n\ntype GalleryServiceAdditionalQueryEvent = {\n\treadonly duration: number;\n\treadonly count: number;\n};\n\ninterface IExtensionCriteria {\n\treadonly productVersion: IProductVersion;\n\treadonly targetPlatform: TargetPlatform;\n\treadonly compatible: boolean;\n\treadonly includePreRelease:\n\t\t| boolean\n\t\t| (IExtensionIdentifier & { includePreRelease: boolean })[];\n\treadonly versions?: (IExtensionIdentifier & { version: string })[];\n}\n\nclass Query {\n\tconstructor(private state = DefaultQueryState) {}\n\n\tget pageNumber(): number {\n\t\treturn this.state.pageNumber;\n\t}\n\tget pageSize(): number {\n\t\treturn this.state.pageSize;\n\t}\n\tget sortBy(): number {\n\t\treturn this.state.sortBy;\n\t}\n\tget sortOrder(): number {\n\t\treturn this.state.sortOrder;\n\t}\n\tget flags(): number {\n\t\treturn this.state.flags;\n\t}\n\tget criteria(): ICriterium[] {\n\t\treturn this.state.criteria;\n\t}\n\n\twithPage(\n\t\tpageNumber: number,\n\t\tpageSize: number = this.state.pageSize,\n\t): Query {\n\t\treturn new Query({ ...this.state, pageNumber, pageSize });\n\t}\n\n\twithFilter(filterType: FilterType, ...values: string[]): Query {\n\t\tconst criteria = [\n\t\t\t...this.state.criteria,\n\t\t\t...(values.length\n\t\t\t\t? values.map((value) => ({ filterType, value }))\n\t\t\t\t: [{ filterType }]),\n\t\t];\n\n\t\treturn new Query({ ...this.state, criteria });\n\t}\n\n\twithSortBy(sortBy: SortBy): Query {\n\t\treturn new Query({ ...this.state, sortBy });\n\t}\n\n\twithSortOrder(sortOrder: SortOrder): Query {\n\t\treturn new Query({ ...this.state, sortOrder });\n\t}\n\n\twithFlags(...flags: Flags[]): Query {\n\t\treturn new Query({\n\t\t\t...this.state,\n\t\t\tflags: flags.reduce<number>((r, f) => r | f, 0),\n\t\t});\n\t}\n\n\twithAssetTypes(...assetTypes: string[]): Query {\n\t\treturn new Query({ ...this.state, assetTypes });\n\t}\n\n\twithSource(source: string): Query {\n\t\treturn new Query({ ...this.state, source });\n\t}\n\n\tget raw(): any {\n\t\tconst {\n\t\t\tcriteria,\n\t\t\tpageNumber,\n\t\t\tpageSize,\n\t\t\tsortBy,\n\t\t\tsortOrder,\n\t\t\tflags,\n\t\t\tassetTypes,\n\t\t} = this.state;\n\t\tconst filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];\n\t\treturn { filters, assetTypes, flags };\n\t}\n\n\tget searchText(): string {\n\t\tconst criterium = this.state.criteria.filter(\n\t\t\t(criterium) => criterium.filterType === FilterType.SearchText,\n\t\t)[0];\n\t\treturn criterium && criterium.value ? criterium.value : \"\";\n\t}\n\n\tget telemetryData(): QueryTelemetryData {\n\t\treturn {\n\t\t\tfilterTypes: this.state.criteria.map((criterium) =>\n\t\t\t\tString(criterium.filterType),\n\t\t\t),\n\t\t\tflags: this.state.flags,\n\t\t\tsortBy: String(this.sortBy),\n\t\t\tsortOrder: String(this.sortOrder),\n\t\t\tpageNumber: String(this.pageNumber),\n\t\t\tsource: this.state.source,\n\t\t\tsearchTextLength: this.searchText.length,\n\t\t};\n\t}\n}\n\nfunction getStatistic(\n\tstatistics: IRawGalleryExtensionStatistics[],\n\tname: string,\n): number {\n\tconst result = (statistics || []).filter(\n\t\t(s) => s.statisticName === name,\n\t)[0];\n\treturn result ? result.value : 0;\n}\n\nfunction getCoreTranslationAssets(\n\tversion: IRawGalleryExtensionVersion,\n): [string, IGalleryExtensionAsset][] {\n\tconst coreTranslationAssetPrefix =\n\t\t\"Microsoft.VisualStudio.Code.Translation.\";\n\tconst result = version.files.filter(\n\t\t(f) => f.assetType.indexOf(coreTranslationAssetPrefix) === 0,\n\t);\n\treturn result.reduce<[string, IGalleryExtensionAsset][]>((result, file) => {\n\t\tconst asset = getVersionAsset(version, file.assetType);\n\t\tif (asset) {\n\t\t\tresult.push([\n\t\t\t\tfile.assetType.substring(coreTranslationAssetPrefix.length),\n\t\t\t\tasset,\n\t\t\t]);\n\t\t}\n\t\treturn result;\n\t}, []);\n}\n\nfunction getRepositoryAsset(\n\tversion: IRawGalleryExtensionVersion,\n): IGalleryExtensionAsset | null {\n\tif (version.properties) {\n\t\tconst results = version.properties.filter(\n\t\t\t(p) => p.key === AssetType.Repository,\n\t\t);\n\t\tconst gitRegExp =\n\t\t\t/((git|ssh|http(s)?)|(git@[\\w.]+))(:(\\/\\/)?)([\\w.@:/\\-~]+)(.git)(\\/)?/;\n\n\t\tconst uri = results.filter((r) => gitRegExp.test(r.value))[0];\n\t\treturn uri ? { uri: uri.value, fallbackUri: uri.value } : null;\n\t}\n\treturn getVersionAsset(version, AssetType.Repository);\n}\n\nfunction getDownloadAsset(\n\tversion: IRawGalleryExtensionVersion,\n): IGalleryExtensionAsset {\n\treturn {\n\t\t// always use fallbackAssetUri for download asset to hit the Marketplace API so that downloads are counted\n\t\turi: `${version.fallbackAssetUri}/${AssetType.VSIX}?redirect=true${version.targetPlatform ? `&targetPlatform=${version.targetPlatform}` : \"\"}`,\n\t\tfallbackUri: `${version.fallbackAssetUri}/${AssetType.VSIX}${version.targetPlatform ? `?targetPlatform=${version.targetPlatform}` : \"\"}`,\n\t};\n}\n\nfunction getVersionAsset(\n\tversion: IRawGalleryExtensionVersion,\n\ttype: string,\n): IGalleryExtensionAsset | null {\n\tconst result = version.files.filter((f) => f.assetType === type)[0];\n\treturn result\n\t\t? {\n\t\t\t\turi: `${version.assetUri}/${type}${version.targetPlatform ? `?targetPlatform=${version.targetPlatform}` : \"\"}`,\n\t\t\t\tfallbackUri: `${version.fallbackAssetUri}/${type}${version.targetPlatform ? `?targetPlatform=${version.targetPlatform}` : \"\"}`,\n\t\t\t}\n\t\t: null;\n}\n\nfunction getExtensions(\n\tversion: IRawGalleryExtensionVersion,\n\tproperty: string,\n): string[] {\n\tconst values = version.properties\n\t\t? version.properties.filter((p) => p.key === property)\n\t\t: [];\n\tconst value = values.length > 0 && values[0].value;\n\treturn value\n\t\t? value.split(\",\").map((v) => adoptToGalleryExtensionId(v))\n\t\t: [];\n}\n\nfunction getEngine(version: IRawGalleryExtensionVersion): string {\n\tconst values = version.properties\n\t\t? version.properties.filter((p) => p.key === PropertyType.Engine)\n\t\t: [];\n\treturn (values.length > 0 && values[0].value) || \"\";\n}\n\nfunction isPreReleaseVersion(version: IRawGalleryExtensionVersion): boolean {\n\tconst values = version.properties\n\t\t? version.properties.filter((p) => p.key === PropertyType.PreRelease)\n\t\t: [];\n\treturn values.length > 0 && values[0].value === \"true\";\n}\n\nfunction executesCode(\n\tversion: IRawGalleryExtensionVersion,\n): boolean | undefined {\n\tconst values = version.properties\n\t\t? version.properties.filter((p) => p.key === PropertyType.ExecutesCode)\n\t\t: [];\n\treturn values.length > 0 ? values[0].value === \"true\" : undefined;\n}\n\nfunction getEnabledApiProposals(\n\tversion: IRawGalleryExtensionVersion,\n): string[] {\n\tconst values = version.properties\n\t\t? version.properties.filter(\n\t\t\t\t(p) => p.key === PropertyType.EnabledApiProposals,\n\t\t\t)\n\t\t: [];\n\tconst value = (values.length > 0 && values[0].value) || \"\";\n\treturn value ? value.split(\",\") : [];\n}\n\nfunction getLocalizedLanguages(version: IRawGalleryExtensionVersion): string[] {\n\tconst values = version.properties\n\t\t? version.properties.filter(\n\t\t\t\t(p) => p.key === PropertyType.LocalizedLanguages,\n\t\t\t)\n\t\t: [];\n\tconst value = (values.length > 0 && values[0].value) || \"\";\n\treturn value ? value.split(\",\") : [];\n}\n\nfunction getSponsorLink(\n\tversion: IRawGalleryExtensionVersion,\n): string | undefined {\n\treturn version.properties?.find((p) => p.key === PropertyType.SponsorLink)\n\t\t?.value;\n}\n\nfunction getSupportLink(\n\tversion: IRawGalleryExtensionVersion,\n): string | undefined {\n\treturn version.properties?.find((p) => p.key === PropertyType.SupportLink)\n\t\t?.value;\n}\n\nfunction getIsPreview(flags: string): boolean {\n\treturn flags.indexOf(\"preview\") !== -1;\n}\n\nfunction getTargetPlatformForExtensionVersion(\n\tversion: IRawGalleryExtensionVersion,\n): TargetPlatform {\n\treturn version.targetPlatform\n\t\t? toTargetPlatform(version.targetPlatform)\n\t\t: TargetPlatform.UNDEFINED;\n}\n\nfunction getAllTargetPlatforms(\n\trawGalleryExtension: IRawGalleryExtension,\n): TargetPlatform[] {\n\tconst allTargetPlatforms = distinct(\n\t\trawGalleryExtension.versions.map(getTargetPlatformForExtensionVersion),\n\t);\n\n\t// Is a web extension only if it has WEB_EXTENSION_TAG\n\tconst isWebExtension =\n\t\t!!rawGalleryExtension.tags?.includes(WEB_EXTENSION_TAG);\n\n\t// Include Web Target Platform only if it is a web extension\n\tconst webTargetPlatformIndex = allTargetPlatforms.indexOf(\n\t\tTargetPlatform.WEB,\n\t);\n\tif (isWebExtension) {\n\t\tif (webTargetPlatformIndex === -1) {\n\t\t\t// Web extension but does not has web target platform -> add it\n\t\t\tallTargetPlatforms.push(TargetPlatform.WEB);\n\t\t}\n\t} else if (webTargetPlatformIndex !== -1) {\n\t\t// Not a web extension but has web target platform -> remove it\n\t\tallTargetPlatforms.splice(webTargetPlatformIndex, 1);\n\t}\n\n\treturn allTargetPlatforms;\n}\n\nexport function sortExtensionVersions(\n\tversions: IRawGalleryExtensionVersion[],\n\tpreferredTargetPlatform: TargetPlatform,\n): IRawGalleryExtensionVersion[] {\n\t/* It is expected that versions from Marketplace are sorted by version. So we are just sorting by preferred targetPlatform */\n\tfor (let index = 0; index < versions.length; index++) {\n\t\tconst version = versions[index];\n\t\tif (version.version === versions[index - 1]?.version) {\n\t\t\tlet insertionIndex = index;\n\t\t\tconst versionTargetPlatform =\n\t\t\t\tgetTargetPlatformForExtensionVersion(version);\n\t\t\t/* put it at the beginning */\n\t\t\tif (versionTargetPlatform === preferredTargetPlatform) {\n\t\t\t\twhile (\n\t\t\t\t\tinsertionIndex > 0 &&\n\t\t\t\t\tversions[insertionIndex - 1].version === version.version\n\t\t\t\t) {\n\t\t\t\t\tinsertionIndex--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (insertionIndex !== index) {\n\t\t\t\tversions.splice(index, 1);\n\t\t\t\tversions.splice(insertionIndex, 0, version);\n\t\t\t}\n\t\t}\n\t}\n\treturn versions;\n}\n\nfunction setTelemetry(\n\textension: IGalleryExtension,\n\tindex: number,\n\tquerySource?: string,\n): void {\n\t/* __GDPR__FRAGMENT__\n\t\"GalleryExtensionTelemetryData2\" : {\n\t\t\"index\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\"querySource\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"queryActivityId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t}\n\t*/\n\textension.telemetryData = {\n\t\tindex,\n\t\tquerySource,\n\t\tqueryActivityId: extension.queryContext?.[ACTIVITY_HEADER_NAME],\n\t};\n}\n\nfunction toExtension(\n\tgalleryExtension: IRawGalleryExtension,\n\tversion: IRawGalleryExtensionVersion,\n\tallTargetPlatforms: TargetPlatform[],\n\tqueryContext?: IStringDictionary<any>,\n): IGalleryExtension {\n\tconst latestVersion = galleryExtension.versions[0];\n\tconst assets: IGalleryExtensionAssets = {\n\t\tmanifest: getVersionAsset(version, AssetType.Manifest),\n\t\treadme: getVersionAsset(version, AssetType.Details),\n\t\tchangelog: getVersionAsset(version, AssetType.Changelog),\n\t\tlicense: getVersionAsset(version, AssetType.License),\n\t\trepository: getRepositoryAsset(version),\n\t\tdownload: getDownloadAsset(version),\n\t\ticon: getVersionAsset(version, AssetType.Icon),\n\t\tsignature: getVersionAsset(version, AssetType.Signature),\n\t\tcoreTranslations: getCoreTranslationAssets(version),\n\t};\n\n\treturn {\n\t\ttype: \"gallery\",\n\t\tidentifier: {\n\t\t\tid: getGalleryExtensionId(\n\t\t\t\tgalleryExtension.publisher.publisherName,\n\t\t\t\tgalleryExtension.extensionName,\n\t\t\t),\n\t\t\tuuid: galleryExtension.extensionId,\n\t\t},\n\t\tname: galleryExtension.extensionName,\n\t\tversion: version.version,\n\t\tdisplayName: galleryExtension.displayName,\n\t\tpublisherId: galleryExtension.publisher.publisherId,\n\t\tpublisher: galleryExtension.publisher.publisherName,\n\t\tpublisherDisplayName: galleryExtension.publisher.displayName,\n\t\tpublisherDomain: galleryExtension.publisher.domain\n\t\t\t? {\n\t\t\t\t\tlink: galleryExtension.publisher.domain,\n\t\t\t\t\tverified: !!galleryExtension.publisher.isDomainVerified,\n\t\t\t\t}\n\t\t\t: undefined,\n\t\tpublisherSponsorLink: getSponsorLink(latestVersion),\n\t\tdescription: galleryExtension.shortDescription ?? \"\",\n\t\tinstallCount: getStatistic(galleryExtension.statistics, \"install\"),\n\t\trating: getStatistic(galleryExtension.statistics, \"averagerating\"),\n\t\tratingCount: getStatistic(galleryExtension.statistics, \"ratingcount\"),\n\t\tcategories: galleryExtension.categories || [],\n\t\ttags: galleryExtension.tags || [],\n\t\treleaseDate: Date.parse(galleryExtension.releaseDate),\n\t\tlastUpdated: Date.parse(galleryExtension.lastUpdated),\n\t\tallTargetPlatforms,\n\t\tassets,\n\t\tproperties: {\n\t\t\tdependencies: getExtensions(version, PropertyType.Dependency),\n\t\t\textensionPack: getExtensions(version, PropertyType.ExtensionPack),\n\t\t\tengine: getEngine(version),\n\t\t\tenabledApiProposals: getEnabledApiProposals(version),\n\t\t\tlocalizedLanguages: getLocalizedLanguages(version),\n\t\t\ttargetPlatform: getTargetPlatformForExtensionVersion(version),\n\t\t\tisPreReleaseVersion: isPreReleaseVersion(version),\n\t\t\texecutesCode: executesCode(version),\n\t\t},\n\t\thasPreReleaseVersion: isPreReleaseVersion(latestVersion),\n\t\thasReleaseVersion: true,\n\t\tpreview: getIsPreview(galleryExtension.flags),\n\t\tisSigned: !!assets.signature,\n\t\tqueryContext,\n\t\tsupportLink: getSupportLink(latestVersion),\n\t};\n}\n\ninterface IRawExtensionsControlManifest {\n\tmalicious: string[];\n\tmigrateToPreRelease?: IStringDictionary<{\n\t\tid: string;\n\t\tdisplayName: string;\n\t\tmigrateStorage?: boolean;\n\t\tengine?: string;\n\t}>;\n\tdeprecated?: IStringDictionary<\n\t\t| boolean\n\t\t| {\n\t\t\t\tdisallowInstall?: boolean;\n\t\t\t\textension?: {\n\t\t\t\t\tid: string;\n\t\t\t\t\tdisplayName: string;\n\t\t\t\t};\n\t\t\t\tsettings?: string[];\n\t\t\t\tadditionalInfo?: string;\n\t\t  }\n\t>;\n\tsearch?: ISearchPrefferedResults[];\n\textensionsEnabledWithPreRelease?: string[];\n}\n\nabstract class AbstractExtensionGalleryService\n\timplements IExtensionGalleryService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly extensionsGalleryUrl: string | undefined;\n\tprivate readonly extensionsGallerySearchUrl: string | undefined;\n\tprivate readonly extensionsControlUrl: string | undefined;\n\n\tprivate readonly commonHeadersPromise: Promise<IHeaders>;\n\tprivate readonly extensionsEnabledWithApiProposalVersion: string[];\n\n\tconstructor(\n\t\tstorageService: IStorageService | undefined,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService\n\t\tprivate readonly environmentService: IEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tconst config = productService.extensionsGallery;\n\t\tconst isPPEEnabled =\n\t\t\tconfig?.servicePPEUrl &&\n\t\t\tconfigurationService.getValue(\"_extensionsGallery.enablePPE\");\n\t\tthis.extensionsGalleryUrl = isPPEEnabled\n\t\t\t? config.servicePPEUrl\n\t\t\t: config?.serviceUrl;\n\t\tthis.extensionsGallerySearchUrl = isPPEEnabled\n\t\t\t? undefined\n\t\t\t: config?.searchUrl;\n\t\tthis.extensionsControlUrl = config?.controlUrl;\n\t\tthis.extensionsEnabledWithApiProposalVersion =\n\t\t\tproductService.extensionsEnabledWithApiProposalVersion?.map((id) =>\n\t\t\t\tid.toLowerCase(),\n\t\t\t) ?? [];\n\t\tthis.commonHeadersPromise = resolveMarketplaceHeaders(\n\t\t\tproductService.version,\n\t\t\tproductService,\n\t\t\tthis.environmentService,\n\t\t\tthis.configurationService,\n\t\t\tthis.fileService,\n\t\t\tstorageService,\n\t\t\tthis.telemetryService,\n\t\t);\n\t}\n\n\tprivate api(path = \"\"): string {\n\t\treturn `${this.extensionsGalleryUrl}${path}`;\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn !!this.extensionsGalleryUrl;\n\t}\n\n\tgetExtensions(\n\t\textensionInfos: ReadonlyArray<IExtensionInfo>,\n\t\ttoken: CancellationToken,\n\t): Promise<IGalleryExtension[]>;\n\tgetExtensions(\n\t\textensionInfos: ReadonlyArray<IExtensionInfo>,\n\t\toptions: IExtensionQueryOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IGalleryExtension[]>;\n\tasync getExtensions(\n\t\textensionInfos: ReadonlyArray<IExtensionInfo>,\n\t\targ1: any,\n\t\targ2?: any,\n\t): Promise<IGalleryExtension[]> {\n\t\tconst options = CancellationToken.isCancellationToken(arg1)\n\t\t\t? {}\n\t\t\t: (arg1 as IExtensionQueryOptions);\n\t\tconst token = CancellationToken.isCancellationToken(arg1)\n\t\t\t? arg1\n\t\t\t: (arg2 as CancellationToken);\n\t\tconst result = await this.doGetExtensions(\n\t\t\textensionInfos,\n\t\t\toptions,\n\t\t\ttoken,\n\t\t);\n\n\t\tconst uuids = result.map((r) => r.identifier.uuid);\n\t\tconst extensionInfosByName: IExtensionInfo[] = [];\n\t\tfor (const e of extensionInfos) {\n\t\t\tif (e.uuid && !uuids.includes(e.uuid)) {\n\t\t\t\textensionInfosByName.push({ ...e, uuid: undefined });\n\t\t\t}\n\t\t}\n\n\t\tif (extensionInfosByName.length) {\n\t\t\t// report telemetry data for additional query\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t{ count: number },\n\t\t\t\t{\n\t\t\t\t\towner: \"sandy081\";\n\t\t\t\t\tcomment: \"Report the query to the the Marketplace for fetching extensions by name\";\n\t\t\t\t\treadonly count: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"Number of extensions to fetch\";\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t>(\"galleryService:additionalQueryByName\", {\n\t\t\t\tcount: extensionInfosByName.length,\n\t\t\t});\n\n\t\t\tconst extensions = await this.doGetExtensions(\n\t\t\t\textensionInfosByName,\n\t\t\t\toptions,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tresult.push(...extensions);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async doGetExtensions(\n\t\textensionInfos: ReadonlyArray<IExtensionInfo>,\n\t\toptions: IExtensionQueryOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IGalleryExtension[]> {\n\t\tconst names: string[] = [];\n\t\tconst ids: string[] = [],\n\t\t\tincludePreReleases: (IExtensionIdentifier & {\n\t\t\t\tincludePreRelease: boolean;\n\t\t\t})[] = [],\n\t\t\tversions: (IExtensionIdentifier & { version: string })[] = [];\n\t\tlet isQueryForReleaseVersionFromPreReleaseVersion = true;\n\t\tfor (const extensionInfo of extensionInfos) {\n\t\t\tif (extensionInfo.uuid) {\n\t\t\t\tids.push(extensionInfo.uuid);\n\t\t\t} else {\n\t\t\t\tnames.push(extensionInfo.id);\n\t\t\t}\n\t\t\t// Set includePreRelease to true if version is set, because the version can be a pre-release version\n\t\t\tconst includePreRelease = !!(\n\t\t\t\textensionInfo.version || extensionInfo.preRelease\n\t\t\t);\n\t\t\tincludePreReleases.push({\n\t\t\t\tid: extensionInfo.id,\n\t\t\t\tuuid: extensionInfo.uuid,\n\t\t\t\tincludePreRelease,\n\t\t\t});\n\t\t\tif (extensionInfo.version) {\n\t\t\t\tversions.push({\n\t\t\t\t\tid: extensionInfo.id,\n\t\t\t\t\tuuid: extensionInfo.uuid,\n\t\t\t\t\tversion: extensionInfo.version,\n\t\t\t\t});\n\t\t\t}\n\t\t\tisQueryForReleaseVersionFromPreReleaseVersion =\n\t\t\t\tisQueryForReleaseVersionFromPreReleaseVersion &&\n\t\t\t\t!!extensionInfo.hasPreRelease &&\n\t\t\t\t!includePreRelease;\n\t\t}\n\n\t\tif (!ids.length && !names.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet query = new Query().withPage(1, extensionInfos.length);\n\t\tif (ids.length) {\n\t\t\tquery = query.withFilter(FilterType.ExtensionId, ...ids);\n\t\t}\n\t\tif (names.length) {\n\t\t\tquery = query.withFilter(FilterType.ExtensionName, ...names);\n\t\t}\n\t\tif (\n\t\t\toptions.queryAllVersions ||\n\t\t\tisQueryForReleaseVersionFromPreReleaseVersion /* Inlcude all versions if every requested extension is for release version and has pre-release version  */\n\t\t) {\n\t\t\tquery = query.withFlags(query.flags, Flags.IncludeVersions);\n\t\t}\n\t\tif (options.source) {\n\t\t\tquery = query.withSource(options.source);\n\t\t}\n\n\t\tconst { extensions } = await this.queryGalleryExtensions(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\ttargetPlatform:\n\t\t\t\t\toptions.targetPlatform ?? CURRENT_TARGET_PLATFORM,\n\t\t\t\tincludePreRelease: includePreReleases,\n\t\t\t\tversions,\n\t\t\t\tcompatible: !!options.compatible,\n\t\t\t\tproductVersion: options.productVersion ?? {\n\t\t\t\t\tversion: this.productService.version,\n\t\t\t\t\tdate: this.productService.date,\n\t\t\t\t},\n\t\t\t},\n\t\t\ttoken,\n\t\t);\n\t\tif (options.source) {\n\t\t\textensions.forEach((e, index) =>\n\t\t\t\tsetTelemetry(e, index, options.source),\n\t\t\t);\n\t\t}\n\t\treturn extensions;\n\t}\n\n\tasync getCompatibleExtension(\n\t\textension: IGalleryExtension,\n\t\tincludePreRelease: boolean,\n\t\ttargetPlatform: TargetPlatform,\n\t\tproductVersion: IProductVersion = {\n\t\t\tversion: this.productService.version,\n\t\t\tdate: this.productService.date,\n\t\t},\n\t): Promise<IGalleryExtension | null> {\n\t\tif (\n\t\t\tisNotWebExtensionInWebTargetPlatform(\n\t\t\t\textension.allTargetPlatforms,\n\t\t\t\ttargetPlatform,\n\t\t\t)\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\t\tif (\n\t\t\tawait this.isExtensionCompatible(\n\t\t\t\textension,\n\t\t\t\tincludePreRelease,\n\t\t\t\ttargetPlatform,\n\t\t\t)\n\t\t) {\n\t\t\treturn extension;\n\t\t}\n\t\tconst query = new Query()\n\t\t\t.withFlags(Flags.IncludeVersions)\n\t\t\t.withPage(1, 1)\n\t\t\t.withFilter(FilterType.ExtensionId, extension.identifier.uuid);\n\t\tconst { extensions } = await this.queryGalleryExtensions(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\ttargetPlatform,\n\t\t\t\tcompatible: true,\n\t\t\t\tincludePreRelease,\n\t\t\t\tproductVersion,\n\t\t\t},\n\t\t\tCancellationToken.None,\n\t\t);\n\t\treturn extensions[0] || null;\n\t}\n\n\tasync isExtensionCompatible(\n\t\textension: IGalleryExtension,\n\t\tincludePreRelease: boolean,\n\t\ttargetPlatform: TargetPlatform,\n\t\tproductVersion: IProductVersion = {\n\t\t\tversion: this.productService.version,\n\t\t\tdate: this.productService.date,\n\t\t},\n\t): Promise<boolean> {\n\t\tif (\n\t\t\t!isTargetPlatformCompatible(\n\t\t\t\textension.properties.targetPlatform,\n\t\t\t\textension.allTargetPlatforms,\n\t\t\t\ttargetPlatform,\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!includePreRelease && extension.properties.isPreReleaseVersion) {\n\t\t\t// Pre-releases are not allowed when include pre-release flag is not set\n\t\t\treturn false;\n\t\t}\n\n\t\tlet engine = extension.properties.engine;\n\t\tif (!engine) {\n\t\t\tconst manifest = await this.getManifest(\n\t\t\t\textension,\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t\tif (!manifest) {\n\t\t\t\tthrow new Error(\"Manifest was not found\");\n\t\t\t}\n\t\t\tengine = manifest.engines.vscode;\n\t\t}\n\n\t\tif (\n\t\t\t!isEngineValid(engine, productVersion.version, productVersion.date)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t!this.areApiProposalsCompatible(\n\t\t\t\textension.identifier,\n\t\t\t\textension.properties.enabledApiProposals,\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate areApiProposalsCompatible(\n\t\textensionIdentifier: IExtensionIdentifier,\n\t\tenabledApiProposals: string[] | undefined,\n\t): boolean {\n\t\tif (!enabledApiProposals) {\n\t\t\treturn true;\n\t\t}\n\t\tif (\n\t\t\t!this.extensionsEnabledWithApiProposalVersion.includes(\n\t\t\t\textensionIdentifier.id.toLowerCase(),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn areApiProposalsCompatible(enabledApiProposals);\n\t}\n\n\tprivate async isValidVersion(\n\t\textension: string,\n\t\trawGalleryExtensionVersion: IRawGalleryExtensionVersion,\n\t\tversionType: \"release\" | \"prerelease\" | \"any\",\n\t\tcompatible: boolean,\n\t\tallTargetPlatforms: TargetPlatform[],\n\t\ttargetPlatform: TargetPlatform,\n\t\tproductVersion: IProductVersion = {\n\t\t\tversion: this.productService.version,\n\t\t\tdate: this.productService.date,\n\t\t},\n\t): Promise<boolean> {\n\t\tif (\n\t\t\t!isTargetPlatformCompatible(\n\t\t\t\tgetTargetPlatformForExtensionVersion(\n\t\t\t\t\trawGalleryExtensionVersion,\n\t\t\t\t),\n\t\t\t\tallTargetPlatforms,\n\t\t\t\ttargetPlatform,\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\tversionType !== \"any\" &&\n\t\t\tisPreReleaseVersion(rawGalleryExtensionVersion) !==\n\t\t\t\t(versionType === \"prerelease\")\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (compatible) {\n\t\t\ttry {\n\t\t\t\tconst engine = await this.getEngine(\n\t\t\t\t\textension,\n\t\t\t\t\trawGalleryExtensionVersion,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t!isEngineValid(\n\t\t\t\t\t\tengine,\n\t\t\t\t\t\tproductVersion.version,\n\t\t\t\t\t\tproductVersion.date,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`Error while getting the engine for the version ${rawGalleryExtensionVersion.version}.`,\n\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync query(\n\t\toptions: IQueryOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IPager<IGalleryExtension>> {\n\t\tlet text = options.text || \"\";\n\t\tconst pageSize = options.pageSize ?? 50;\n\n\t\tlet query = new Query().withPage(1, pageSize);\n\n\t\tif (text) {\n\t\t\t// Use category filter instead of \"category:themes\"\n\t\t\ttext = text.replace(\n\t\t\t\t/\\bcategory:(\"([^\"]*)\"|([^\"]\\S*))(\\s+|\\b|$)/g,\n\t\t\t\t(_, quotedCategory, category) => {\n\t\t\t\t\tquery = query.withFilter(\n\t\t\t\t\t\tFilterType.Category,\n\t\t\t\t\t\tcategory || quotedCategory,\n\t\t\t\t\t);\n\t\t\t\t\treturn \"\";\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// Use tag filter instead of \"tag:debuggers\"\n\t\t\ttext = text.replace(\n\t\t\t\t/\\btag:(\"([^\"]*)\"|([^\"]\\S*))(\\s+|\\b|$)/g,\n\t\t\t\t(_, quotedTag, tag) => {\n\t\t\t\t\tquery = query.withFilter(FilterType.Tag, tag || quotedTag);\n\t\t\t\t\treturn \"\";\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// Use featured filter\n\t\t\ttext = text.replace(/\\bfeatured(\\s+|\\b|$)/g, () => {\n\t\t\t\tquery = query.withFilter(FilterType.Featured);\n\t\t\t\treturn \"\";\n\t\t\t});\n\n\t\t\ttext = text.trim();\n\n\t\t\tif (text) {\n\t\t\t\ttext = text.length < 200 ? text : text.substring(0, 200);\n\t\t\t\tquery = query.withFilter(FilterType.SearchText, text);\n\t\t\t}\n\n\t\t\tquery = query.withSortBy(SortBy.NoneOrRelevance);\n\t\t} else if (options.ids) {\n\t\t\tquery = query.withFilter(FilterType.ExtensionId, ...options.ids);\n\t\t} else if (options.names) {\n\t\t\tquery = query.withFilter(\n\t\t\t\tFilterType.ExtensionName,\n\t\t\t\t...options.names,\n\t\t\t);\n\t\t} else {\n\t\t\tquery = query.withSortBy(SortBy.InstallCount);\n\t\t}\n\n\t\tif (typeof options.sortBy === \"number\") {\n\t\t\tquery = query.withSortBy(options.sortBy);\n\t\t}\n\n\t\tif (typeof options.sortOrder === \"number\") {\n\t\t\tquery = query.withSortOrder(options.sortOrder);\n\t\t}\n\n\t\tif (options.source) {\n\t\t\tquery = query.withSource(options.source);\n\t\t}\n\n\t\tconst runQuery = async (query: Query, token: CancellationToken) => {\n\t\t\tconst { extensions, total } = await this.queryGalleryExtensions(\n\t\t\t\tquery,\n\t\t\t\t{\n\t\t\t\t\ttargetPlatform: CURRENT_TARGET_PLATFORM,\n\t\t\t\t\tcompatible: false,\n\t\t\t\t\tincludePreRelease: !!options.includePreRelease,\n\t\t\t\t\tproductVersion: options.productVersion ?? {\n\t\t\t\t\t\tversion: this.productService.version,\n\t\t\t\t\t\tdate: this.productService.date,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\textensions.forEach((e, index) =>\n\t\t\t\tsetTelemetry(\n\t\t\t\t\te,\n\t\t\t\t\t(query.pageNumber - 1) * query.pageSize + index,\n\t\t\t\t\toptions.source,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn { extensions, total };\n\t\t};\n\t\tconst { extensions, total } = await runQuery(query, token);\n\t\tconst getPage = async (pageIndex: number, ct: CancellationToken) => {\n\t\t\tif (ct.isCancellationRequested) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\t\t\tconst { extensions } = await runQuery(\n\t\t\t\tquery.withPage(pageIndex + 1),\n\t\t\t\tct,\n\t\t\t);\n\t\t\treturn extensions;\n\t\t};\n\n\t\treturn {\n\t\t\tfirstPage: extensions,\n\t\t\ttotal,\n\t\t\tpageSize: query.pageSize,\n\t\t\tgetPage,\n\t\t};\n\t}\n\n\tprivate async queryGalleryExtensions(\n\t\tquery: Query,\n\t\tcriteria: IExtensionCriteria,\n\t\ttoken: CancellationToken,\n\t): Promise<{ extensions: IGalleryExtension[]; total: number }> {\n\t\tconst flags = query.flags;\n\n\t\t/**\n\t\t * If both version flags (IncludeLatestVersionOnly and IncludeVersions) are included, then only include latest versions (IncludeLatestVersionOnly) flag.\n\t\t */\n\t\tif (\n\t\t\t!!(query.flags & Flags.IncludeLatestVersionOnly) &&\n\t\t\t!!(query.flags & Flags.IncludeVersions)\n\t\t) {\n\t\t\tquery = query.withFlags(\n\t\t\t\tquery.flags & ~Flags.IncludeVersions,\n\t\t\t\tFlags.IncludeLatestVersionOnly,\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * If version flags (IncludeLatestVersionOnly and IncludeVersions) are not included, default is to query for latest versions (IncludeLatestVersionOnly).\n\t\t */\n\t\tif (\n\t\t\t!(query.flags & Flags.IncludeLatestVersionOnly) &&\n\t\t\t!(query.flags & Flags.IncludeVersions)\n\t\t) {\n\t\t\tquery = query.withFlags(\n\t\t\t\tquery.flags,\n\t\t\t\tFlags.IncludeLatestVersionOnly,\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * If versions criteria exist, then remove IncludeLatestVersionOnly flag and add IncludeVersions flag.\n\t\t */\n\t\tif (criteria.versions?.length) {\n\t\t\tquery = query.withFlags(\n\t\t\t\tquery.flags & ~Flags.IncludeLatestVersionOnly,\n\t\t\t\tFlags.IncludeVersions,\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Add necessary extension flags\n\t\t */\n\t\tquery = query.withFlags(\n\t\t\tquery.flags,\n\t\t\tFlags.IncludeAssetUri,\n\t\t\tFlags.IncludeCategoryAndTags,\n\t\t\tFlags.IncludeFiles,\n\t\t\tFlags.IncludeStatistics,\n\t\t\tFlags.IncludeVersionProperties,\n\t\t);\n\t\tconst {\n\t\t\tgalleryExtensions: rawGalleryExtensions,\n\t\t\ttotal,\n\t\t\tcontext,\n\t\t} = await this.queryRawGalleryExtensions(query, token);\n\n\t\tconst hasAllVersions: boolean = !(\n\t\t\tquery.flags & Flags.IncludeLatestVersionOnly\n\t\t);\n\t\tif (hasAllVersions) {\n\t\t\tconst extensions: IGalleryExtension[] = [];\n\t\t\tfor (const rawGalleryExtension of rawGalleryExtensions) {\n\t\t\t\tconst extension = await this.toGalleryExtensionWithCriteria(\n\t\t\t\t\trawGalleryExtension,\n\t\t\t\t\tcriteria,\n\t\t\t\t\tcontext,\n\t\t\t\t);\n\t\t\t\tif (extension) {\n\t\t\t\t\textensions.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { extensions, total };\n\t\t}\n\n\t\tconst result: [number, IGalleryExtension][] = [];\n\t\tconst needAllVersions = new Map<string, number>();\n\t\tfor (let index = 0; index < rawGalleryExtensions.length; index++) {\n\t\t\tconst rawGalleryExtension = rawGalleryExtensions[index];\n\t\t\tconst extensionIdentifier = {\n\t\t\t\tid: getGalleryExtensionId(\n\t\t\t\t\trawGalleryExtension.publisher.publisherName,\n\t\t\t\t\trawGalleryExtension.extensionName,\n\t\t\t\t),\n\t\t\t\tuuid: rawGalleryExtension.extensionId,\n\t\t\t};\n\t\t\tconst includePreRelease = isBoolean(criteria.includePreRelease)\n\t\t\t\t? criteria.includePreRelease\n\t\t\t\t: !!criteria.includePreRelease.find(\n\t\t\t\t\t\t(extensionIdentifierWithPreRelease) =>\n\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\textensionIdentifierWithPreRelease,\n\t\t\t\t\t\t\t\textensionIdentifier,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t)?.includePreRelease;\n\t\t\tif (\n\t\t\t\tcriteria.compatible &&\n\t\t\t\tisNotWebExtensionInWebTargetPlatform(\n\t\t\t\t\tgetAllTargetPlatforms(rawGalleryExtension),\n\t\t\t\t\tcriteria.targetPlatform,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t/** Skip if requested for a web-compatible extension and it is not a web extension.\n\t\t\t\t * All versions are not needed in this case\n\t\t\t\t */\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst extension = await this.toGalleryExtensionWithCriteria(\n\t\t\t\trawGalleryExtension,\n\t\t\t\tcriteria,\n\t\t\t\tcontext,\n\t\t\t);\n\t\t\tif (\n\t\t\t\t!extension ||\n\t\t\t\t/** Need all versions if the extension is a pre-release version but\n\t\t\t\t * \t\t- the query is to look for a release version or\n\t\t\t\t * \t\t- the extension has no release version\n\t\t\t\t * Get all versions to get or check the release version\n\t\t\t\t */\n\t\t\t\t(extension.properties.isPreReleaseVersion &&\n\t\t\t\t\t(!includePreRelease || !extension.hasReleaseVersion)) ||\n\t\t\t\t/**\n\t\t\t\t * Need all versions if the extension is a release version with a different target platform than requested and also has a pre-release version\n\t\t\t\t * Because, this is a platform specific extension and can have a newer release version supporting this platform.\n\t\t\t\t * See https://github.com/microsoft/vscode/issues/139628\n\t\t\t\t */\n\t\t\t\t(!extension.properties.isPreReleaseVersion &&\n\t\t\t\t\textension.properties.targetPlatform !==\n\t\t\t\t\t\tcriteria.targetPlatform &&\n\t\t\t\t\textension.hasPreReleaseVersion)\n\t\t\t) {\n\t\t\t\tneedAllVersions.set(rawGalleryExtension.extensionId, index);\n\t\t\t} else {\n\t\t\t\tresult.push([index, extension]);\n\t\t\t}\n\t\t}\n\n\t\tif (needAllVersions.size) {\n\t\t\tconst stopWatch = new StopWatch();\n\t\t\tconst query = new Query()\n\t\t\t\t.withFlags(\n\t\t\t\t\tflags & ~Flags.IncludeLatestVersionOnly,\n\t\t\t\t\tFlags.IncludeVersions,\n\t\t\t\t)\n\t\t\t\t.withPage(1, needAllVersions.size)\n\t\t\t\t.withFilter(FilterType.ExtensionId, ...needAllVersions.keys());\n\t\t\tconst { extensions } = await this.queryGalleryExtensions(\n\t\t\t\tquery,\n\t\t\t\tcriteria,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tGalleryServiceAdditionalQueryEvent,\n\t\t\t\tGalleryServiceAdditionalQueryClassification\n\t\t\t>(\"galleryService:additionalQuery\", {\n\t\t\t\tduration: stopWatch.elapsed(),\n\t\t\t\tcount: needAllVersions.size,\n\t\t\t});\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst index = needAllVersions.get(extension.identifier.uuid)!;\n\t\t\t\tresult.push([index, extension]);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\textensions: result\n\t\t\t\t.sort((a, b) => a[0] - b[0])\n\t\t\t\t.map(([, extension]) => extension),\n\t\t\ttotal,\n\t\t};\n\t}\n\n\tprivate async toGalleryExtensionWithCriteria(\n\t\trawGalleryExtension: IRawGalleryExtension,\n\t\tcriteria: IExtensionCriteria,\n\t\tqueryContext?: IStringDictionary<any>,\n\t): Promise<IGalleryExtension | null> {\n\t\tconst extensionIdentifier = {\n\t\t\tid: getGalleryExtensionId(\n\t\t\t\trawGalleryExtension.publisher.publisherName,\n\t\t\t\trawGalleryExtension.extensionName,\n\t\t\t),\n\t\t\tuuid: rawGalleryExtension.extensionId,\n\t\t};\n\t\tconst version = criteria.versions?.find(\n\t\t\t(extensionIdentifierWithVersion) =>\n\t\t\t\tareSameExtensions(\n\t\t\t\t\textensionIdentifierWithVersion,\n\t\t\t\t\textensionIdentifier,\n\t\t\t\t),\n\t\t)?.version;\n\t\tconst includePreRelease = isBoolean(criteria.includePreRelease)\n\t\t\t? criteria.includePreRelease\n\t\t\t: !!criteria.includePreRelease.find(\n\t\t\t\t\t(extensionIdentifierWithPreRelease) =>\n\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\textensionIdentifierWithPreRelease,\n\t\t\t\t\t\t\textensionIdentifier,\n\t\t\t\t\t\t),\n\t\t\t\t)?.includePreRelease;\n\t\tconst allTargetPlatforms = getAllTargetPlatforms(rawGalleryExtension);\n\t\tconst rawGalleryExtensionVersions = sortExtensionVersions(\n\t\t\trawGalleryExtension.versions,\n\t\t\tcriteria.targetPlatform,\n\t\t);\n\n\t\tif (\n\t\t\tcriteria.compatible &&\n\t\t\tisNotWebExtensionInWebTargetPlatform(\n\t\t\t\tallTargetPlatforms,\n\t\t\t\tcriteria.targetPlatform,\n\t\t\t)\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (\n\t\t\tlet index = 0;\n\t\t\tindex < rawGalleryExtensionVersions.length;\n\t\t\tindex++\n\t\t) {\n\t\t\tconst rawGalleryExtensionVersion =\n\t\t\t\trawGalleryExtensionVersions[index];\n\t\t\tif (version && rawGalleryExtensionVersion.version !== version) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Allow any version if includePreRelease flag is set otherwise only release versions are allowed\n\t\t\tif (\n\t\t\t\tawait this.isValidVersion(\n\t\t\t\t\textensionIdentifier.id,\n\t\t\t\t\trawGalleryExtensionVersion,\n\t\t\t\t\tincludePreRelease ? \"any\" : \"release\",\n\t\t\t\t\tcriteria.compatible,\n\t\t\t\t\tallTargetPlatforms,\n\t\t\t\t\tcriteria.targetPlatform,\n\t\t\t\t\tcriteria.productVersion,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\tcriteria.compatible &&\n\t\t\t\t\t!this.areApiProposalsCompatible(\n\t\t\t\t\t\textensionIdentifier,\n\t\t\t\t\t\tgetEnabledApiProposals(rawGalleryExtensionVersion),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn toExtension(\n\t\t\t\t\trawGalleryExtension,\n\t\t\t\t\trawGalleryExtensionVersion,\n\t\t\t\t\tallTargetPlatforms,\n\t\t\t\t\tqueryContext,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (version && rawGalleryExtensionVersion.version === version) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tif (version || criteria.compatible) {\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Fallback: Return the latest version\n\t\t * This can happen when the extension does not have a release version or does not have a version compatible with the given target platform.\n\t\t */\n\t\treturn toExtension(\n\t\t\trawGalleryExtension,\n\t\t\trawGalleryExtension.versions[0],\n\t\t\tallTargetPlatforms,\n\t\t);\n\t}\n\n\tprivate async queryRawGalleryExtensions(\n\t\tquery: Query,\n\t\ttoken: CancellationToken,\n\t): Promise<IRawGalleryExtensionsResult> {\n\t\tif (!this.isEnabled()) {\n\t\t\tthrow new Error(\"No extension gallery service configured.\");\n\t\t}\n\n\t\tquery = query\n\t\t\t/* Always exclude non validated extensions */\n\t\t\t.withFlags(query.flags, Flags.ExcludeNonValidated)\n\t\t\t.withFilter(FilterType.Target, \"Microsoft.VisualStudio.Code\")\n\t\t\t/* Always exclude unpublished extensions */\n\t\t\t.withFilter(\n\t\t\t\tFilterType.ExcludeWithFlags,\n\t\t\t\tflagsToString(Flags.Unpublished),\n\t\t\t);\n\n\t\tconst commonHeaders = await this.commonHeadersPromise;\n\t\tconst data = JSON.stringify(query.raw);\n\t\tconst headers = {\n\t\t\t...commonHeaders,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAccept: \"application/json;api-version=3.0-preview.1\",\n\t\t\t\"Accept-Encoding\": \"gzip\",\n\t\t\t\"Content-Length\": String(data.length),\n\t\t};\n\n\t\tconst stopWatch = new StopWatch();\n\t\tlet context: IRequestContext | undefined,\n\t\t\terrorCode: ExtensionGalleryErrorCode | undefined,\n\t\t\ttotal = 0;\n\n\t\ttry {\n\t\t\tcontext = await this.requestService.request(\n\t\t\t\t{\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\turl:\n\t\t\t\t\t\tthis.extensionsGallerySearchUrl &&\n\t\t\t\t\t\tquery.criteria.some(\n\t\t\t\t\t\t\t(c) => c.filterType === FilterType.SearchText,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t? this.extensionsGallerySearchUrl\n\t\t\t\t\t\t\t: this.api(\"/extensionquery\"),\n\t\t\t\t\tdata,\n\t\t\t\t\theaders,\n\t\t\t\t},\n\t\t\t\ttoken,\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\tcontext.res.statusCode &&\n\t\t\t\tcontext.res.statusCode >= 400 &&\n\t\t\t\tcontext.res.statusCode < 500\n\t\t\t) {\n\t\t\t\treturn { galleryExtensions: [], total };\n\t\t\t}\n\n\t\t\tconst result = await asJson<IRawGalleryQueryResult>(context);\n\t\t\tif (result) {\n\t\t\t\tconst r = result.results[0];\n\t\t\t\tconst galleryExtensions = r.extensions;\n\t\t\t\tconst resultCount =\n\t\t\t\t\tr.resultMetadata &&\n\t\t\t\t\tr.resultMetadata.filter(\n\t\t\t\t\t\t(m) => m.metadataType === \"ResultCount\",\n\t\t\t\t\t)[0];\n\t\t\t\ttotal =\n\t\t\t\t\t(resultCount &&\n\t\t\t\t\t\tresultCount.metadataItems.filter(\n\t\t\t\t\t\t\t(i) => i.name === \"TotalCount\",\n\t\t\t\t\t\t)[0].count) ||\n\t\t\t\t\t0;\n\n\t\t\t\treturn {\n\t\t\t\t\tgalleryExtensions,\n\t\t\t\t\ttotal,\n\t\t\t\t\tcontext: context.res.headers[\"activityid\"]\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t[ACTIVITY_HEADER_NAME]:\n\t\t\t\t\t\t\t\t\tcontext.res.headers[\"activityid\"],\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: {},\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn { galleryExtensions: [], total };\n\t\t} catch (e) {\n\t\t\tif (isCancellationError(e)) {\n\t\t\t\terrorCode = ExtensionGalleryErrorCode.Cancelled;\n\t\t\t\tthrow e;\n\t\t\t} else {\n\t\t\t\tconst errorMessage = getErrorMessage(e);\n\t\t\t\terrorCode = isOfflineError(e)\n\t\t\t\t\t? ExtensionGalleryErrorCode.Offline\n\t\t\t\t\t: errorMessage.startsWith(\"XHR timeout\")\n\t\t\t\t\t\t? ExtensionGalleryErrorCode.Timeout\n\t\t\t\t\t\t: ExtensionGalleryErrorCode.Failed;\n\t\t\t\tthrow new ExtensionGalleryError(errorMessage, errorCode);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tGalleryServiceQueryEvent,\n\t\t\t\tGalleryServiceQueryClassification\n\t\t\t>(\"galleryService:query\", {\n\t\t\t\t...query.telemetryData,\n\t\t\t\trequestBodySize: String(data.length),\n\t\t\t\tduration: stopWatch.elapsed(),\n\t\t\t\tsuccess: !!context && isSuccess(context),\n\t\t\t\tresponseBodySize: context?.res.headers[\"Content-Length\"],\n\t\t\t\tstatusCode: context\n\t\t\t\t\t? String(context.res.statusCode)\n\t\t\t\t\t: undefined,\n\t\t\t\terrorCode,\n\t\t\t\tcount: String(total),\n\t\t\t});\n\t\t}\n\t}\n\n\tasync reportStatistic(\n\t\tpublisher: string,\n\t\tname: string,\n\t\tversion: string,\n\t\ttype: StatisticType,\n\t): Promise<void> {\n\t\tif (!this.isEnabled()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst url = isWeb\n\t\t\t? this.api(\n\t\t\t\t\t`/itemName/${publisher}.${name}/version/${version}/statType/${type === StatisticType.Install ? \"1\" : \"3\"}/vscodewebextension`,\n\t\t\t\t)\n\t\t\t: this.api(\n\t\t\t\t\t`/publishers/${publisher}/extensions/${name}/${version}/stats?statType=${type}`,\n\t\t\t\t);\n\t\tconst Accept = isWeb\n\t\t\t? \"api-version=6.1-preview.1\"\n\t\t\t: \"*/*;api-version=4.0-preview.1\";\n\n\t\tconst commonHeaders = await this.commonHeadersPromise;\n\t\tconst headers = { ...commonHeaders, Accept };\n\t\ttry {\n\t\t\tawait this.requestService.request(\n\t\t\t\t{\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\turl,\n\t\t\t\t\theaders,\n\t\t\t\t},\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\t/* Ignore */\n\t\t}\n\t}\n\n\tasync download(\n\t\textension: IGalleryExtension,\n\t\tlocation: URI,\n\t\toperation: InstallOperation,\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionGalleryService#download\",\n\t\t\textension.identifier.id,\n\t\t);\n\t\tconst data = getGalleryExtensionTelemetryData(extension);\n\t\tconst startTime = new Date().getTime();\n\n\t\tconst operationParam =\n\t\t\toperation === InstallOperation.Install\n\t\t\t\t? \"install\"\n\t\t\t\t: operation === InstallOperation.Update\n\t\t\t\t\t? \"update\"\n\t\t\t\t\t: \"\";\n\t\tconst downloadAsset = operationParam\n\t\t\t? {\n\t\t\t\t\turi: `${extension.assets.download.uri}${URI.parse(extension.assets.download.uri).query ? \"&\" : \"?\"}${operationParam}=true`,\n\t\t\t\t\tfallbackUri: `${extension.assets.download.fallbackUri}${URI.parse(extension.assets.download.fallbackUri).query ? \"&\" : \"?\"}${operationParam}=true`,\n\t\t\t\t}\n\t\t\t: extension.assets.download;\n\n\t\tconst headers: IHeaders | undefined = extension.queryContext?.[\n\t\t\tACTIVITY_HEADER_NAME\n\t\t]\n\t\t\t? {\n\t\t\t\t\t[ACTIVITY_HEADER_NAME]:\n\t\t\t\t\t\textension.queryContext[ACTIVITY_HEADER_NAME],\n\t\t\t\t}\n\t\t\t: undefined;\n\t\tconst context = await this.getAsset(\n\t\t\textension.identifier.id,\n\t\t\tdownloadAsset,\n\t\t\tAssetType.VSIX,\n\t\t\theaders ? { headers } : undefined,\n\t\t);\n\n\t\ttry {\n\t\t\tawait this.fileService.writeFile(location, context.stream);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (e) {\n\t\t\t\t/* ignore */\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Error while deleting the file ${location.toString()}`,\n\t\t\t\t\tgetErrorMessage(e),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new ExtensionGalleryError(\n\t\t\t\tgetErrorMessage(error),\n\t\t\t\tExtensionGalleryErrorCode.DownloadFailedWriting,\n\t\t\t);\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"galleryService:downloadVSIX\" : {\n\t\t\t\t\"owner\": \"sandy081\",\n\t\t\t\t\"duration\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${GalleryExtensionTelemetryData}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(\"galleryService:downloadVSIX\", {\n\t\t\t...data,\n\t\t\tduration: new Date().getTime() - startTime,\n\t\t});\n\t}\n\n\tasync downloadSignatureArchive(\n\t\textension: IGalleryExtension,\n\t\tlocation: URI,\n\t): Promise<void> {\n\t\tif (!extension.assets.signature) {\n\t\t\tthrow new Error(\"No signature asset found\");\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t\"ExtensionGalleryService#downloadSignatureArchive\",\n\t\t\textension.identifier.id,\n\t\t);\n\n\t\tconst context = await this.getAsset(\n\t\t\textension.identifier.id,\n\t\t\textension.assets.signature,\n\t\t\tAssetType.Signature,\n\t\t);\n\t\ttry {\n\t\t\tawait this.fileService.writeFile(location, context.stream);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (e) {\n\t\t\t\t/* ignore */\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Error while deleting the file ${location.toString()}`,\n\t\t\t\t\tgetErrorMessage(e),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new ExtensionGalleryError(\n\t\t\t\tgetErrorMessage(error),\n\t\t\t\tExtensionGalleryErrorCode.DownloadFailedWriting,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync getReadme(\n\t\textension: IGalleryExtension,\n\t\ttoken: CancellationToken,\n\t): Promise<string> {\n\t\tif (extension.assets.readme) {\n\t\t\tconst context = await this.getAsset(\n\t\t\t\textension.identifier.id,\n\t\t\t\textension.assets.readme,\n\t\t\t\tAssetType.Details,\n\t\t\t\t{},\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tconst content = await asTextOrError(context);\n\t\t\treturn content || \"\";\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tasync getManifest(\n\t\textension: IGalleryExtension,\n\t\ttoken: CancellationToken,\n\t): Promise<IExtensionManifest | null> {\n\t\tif (extension.assets.manifest) {\n\t\t\tconst context = await this.getAsset(\n\t\t\t\textension.identifier.id,\n\t\t\t\textension.assets.manifest,\n\t\t\t\tAssetType.Manifest,\n\t\t\t\t{},\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tconst text = await asTextOrError(context);\n\t\t\treturn text ? JSON.parse(text) : null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async getManifestFromRawExtensionVersion(\n\t\textension: string,\n\t\trawExtensionVersion: IRawGalleryExtensionVersion,\n\t\ttoken: CancellationToken,\n\t): Promise<IExtensionManifest | null> {\n\t\tconst manifestAsset = getVersionAsset(\n\t\t\trawExtensionVersion,\n\t\t\tAssetType.Manifest,\n\t\t);\n\t\tif (!manifestAsset) {\n\t\t\tthrow new Error(\"Manifest was not found\");\n\t\t}\n\t\tconst headers = { \"Accept-Encoding\": \"gzip\" };\n\t\tconst context = await this.getAsset(\n\t\t\textension,\n\t\t\tmanifestAsset,\n\t\t\tAssetType.Manifest,\n\t\t\t{ headers },\n\t\t);\n\t\treturn await asJson<IExtensionManifest>(context);\n\t}\n\n\tasync getCoreTranslation(\n\t\textension: IGalleryExtension,\n\t\tlanguageId: string,\n\t): Promise<ITranslation | null> {\n\t\tconst asset = extension.assets.coreTranslations.filter(\n\t\t\t(t) => t[0] === languageId.toUpperCase(),\n\t\t)[0];\n\t\tif (asset) {\n\t\t\tconst context = await this.getAsset(\n\t\t\t\textension.identifier.id,\n\t\t\t\tasset[1],\n\t\t\t\tasset[0],\n\t\t\t);\n\t\t\tconst text = await asTextOrError(context);\n\t\t\treturn text ? JSON.parse(text) : null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync getChangelog(\n\t\textension: IGalleryExtension,\n\t\ttoken: CancellationToken,\n\t): Promise<string> {\n\t\tif (extension.assets.changelog) {\n\t\t\tconst context = await this.getAsset(\n\t\t\t\textension.identifier.id,\n\t\t\t\textension.assets.changelog,\n\t\t\t\tAssetType.Changelog,\n\t\t\t\t{},\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tconst content = await asTextOrError(context);\n\t\t\treturn content || \"\";\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tasync getAllCompatibleVersions(\n\t\textensionIdentifier: IExtensionIdentifier,\n\t\tincludePreRelease: boolean,\n\t\ttargetPlatform: TargetPlatform,\n\t): Promise<IGalleryExtensionVersion[]> {\n\t\tlet query = new Query()\n\t\t\t.withFlags(\n\t\t\t\tFlags.IncludeVersions,\n\t\t\t\tFlags.IncludeCategoryAndTags,\n\t\t\t\tFlags.IncludeFiles,\n\t\t\t\tFlags.IncludeVersionProperties,\n\t\t\t)\n\t\t\t.withPage(1, 1);\n\n\t\tif (extensionIdentifier.uuid) {\n\t\t\tquery = query.withFilter(\n\t\t\t\tFilterType.ExtensionId,\n\t\t\t\textensionIdentifier.uuid,\n\t\t\t);\n\t\t} else {\n\t\t\tquery = query.withFilter(\n\t\t\t\tFilterType.ExtensionName,\n\t\t\t\textensionIdentifier.id,\n\t\t\t);\n\t\t}\n\n\t\tconst { galleryExtensions } = await this.queryRawGalleryExtensions(\n\t\t\tquery,\n\t\t\tCancellationToken.None,\n\t\t);\n\t\tif (!galleryExtensions.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst allTargetPlatforms = getAllTargetPlatforms(galleryExtensions[0]);\n\t\tif (\n\t\t\tisNotWebExtensionInWebTargetPlatform(\n\t\t\t\tallTargetPlatforms,\n\t\t\t\ttargetPlatform,\n\t\t\t)\n\t\t) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst validVersions: IRawGalleryExtensionVersion[] = [];\n\t\tawait Promise.all(\n\t\t\tgalleryExtensions[0].versions.map(async (version) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(await this.isValidVersion(\n\t\t\t\t\t\t\textensionIdentifier.id,\n\t\t\t\t\t\t\tversion,\n\t\t\t\t\t\t\tincludePreRelease ? \"any\" : \"release\",\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tallTargetPlatforms,\n\t\t\t\t\t\t\ttargetPlatform,\n\t\t\t\t\t\t)) &&\n\t\t\t\t\t\tthis.areApiProposalsCompatible(\n\t\t\t\t\t\t\textensionIdentifier,\n\t\t\t\t\t\t\tgetEnabledApiProposals(version),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tvalidVersions.push(version);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t/* Ignore error and skip version */\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst result: IGalleryExtensionVersion[] = [];\n\t\tconst seen = new Set<string>();\n\t\tfor (const version of sortExtensionVersions(\n\t\t\tvalidVersions,\n\t\t\ttargetPlatform,\n\t\t)) {\n\t\t\tif (!seen.has(version.version)) {\n\t\t\t\tseen.add(version.version);\n\t\t\t\tresult.push({\n\t\t\t\t\tversion: version.version,\n\t\t\t\t\tdate: version.lastUpdated,\n\t\t\t\t\tisPreReleaseVersion: isPreReleaseVersion(version),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async getAsset(\n\t\textension: string,\n\t\tasset: IGalleryExtensionAsset,\n\t\tassetType: string,\n\t\toptions: IRequestOptions = {},\n\t\ttoken: CancellationToken = CancellationToken.None,\n\t): Promise<IRequestContext> {\n\t\tconst commonHeaders = await this.commonHeadersPromise;\n\t\tconst baseOptions = { type: \"GET\" };\n\t\tconst headers = { ...commonHeaders, ...(options.headers || {}) };\n\t\toptions = { ...options, ...baseOptions, headers };\n\n\t\tconst url = asset.uri;\n\t\tconst fallbackUrl = asset.fallbackUri;\n\t\tconst firstOptions = { ...options, url };\n\n\t\ttry {\n\t\t\tconst context = await this.requestService.request(\n\t\t\t\tfirstOptions,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tif (context.res.statusCode === 200) {\n\t\t\t\treturn context;\n\t\t\t}\n\t\t\tconst message = await asTextOrError(context);\n\t\t\tthrow new Error(\n\t\t\t\t`Expected 200, got back ${context.res.statusCode} instead.\\n\\n${message}`,\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tif (isCancellationError(err)) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tconst message = getErrorMessage(err);\n\t\t\ttype GalleryServiceCDNFallbackClassification = {\n\t\t\t\towner: \"sandy081\";\n\t\t\t\tcomment: \"Fallback request information when the primary asset request to CDN fails\";\n\t\t\t\textension: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"extension name\";\n\t\t\t\t};\n\t\t\t\tassetType: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"asset that failed\";\n\t\t\t\t};\n\t\t\t\tmessage: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"error message\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype GalleryServiceCDNFallbackEvent = {\n\t\t\t\textension: string;\n\t\t\t\tassetType: string;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tGalleryServiceCDNFallbackEvent,\n\t\t\t\tGalleryServiceCDNFallbackClassification\n\t\t\t>(\"galleryService:cdnFallback\", { extension, assetType, message });\n\n\t\t\tconst fallbackOptions = { ...options, url: fallbackUrl };\n\t\t\treturn this.requestService.request(fallbackOptions, token);\n\t\t}\n\t}\n\n\tprivate async getEngine(\n\t\textension: string,\n\t\trawExtensionVersion: IRawGalleryExtensionVersion,\n\t): Promise<string> {\n\t\tlet engine = getEngine(rawExtensionVersion);\n\t\tif (!engine) {\n\t\t\ttype GalleryServiceEngineFallbackClassification = {\n\t\t\t\towner: \"sandy081\";\n\t\t\t\tcomment: \"Fallback request when engine is not found in properties of an extension version\";\n\t\t\t\textension: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"extension name\";\n\t\t\t\t};\n\t\t\t\tversion: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"version\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype GalleryServiceEngineFallbackEvent = {\n\t\t\t\textension: string;\n\t\t\t\tversion: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tGalleryServiceEngineFallbackEvent,\n\t\t\t\tGalleryServiceEngineFallbackClassification\n\t\t\t>(\"galleryService:engineFallback\", {\n\t\t\t\textension,\n\t\t\t\tversion: rawExtensionVersion.version,\n\t\t\t});\n\t\t\tconst manifest = await this.getManifestFromRawExtensionVersion(\n\t\t\t\textension,\n\t\t\t\trawExtensionVersion,\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t\tif (!manifest) {\n\t\t\t\tthrow new Error(\"Manifest was not found\");\n\t\t\t}\n\t\t\tengine = manifest.engines.vscode;\n\t\t}\n\t\treturn engine;\n\t}\n\n\tasync getExtensionsControlManifest(): Promise<IExtensionsControlManifest> {\n\t\tif (!this.isEnabled()) {\n\t\t\tthrow new Error(\"No extension gallery service configured.\");\n\t\t}\n\n\t\tif (!this.extensionsControlUrl) {\n\t\t\treturn { malicious: [], deprecated: {}, search: [] };\n\t\t}\n\n\t\tconst context = await this.requestService.request(\n\t\t\t{ type: \"GET\", url: this.extensionsControlUrl },\n\t\t\tCancellationToken.None,\n\t\t);\n\t\tif (context.res.statusCode !== 200) {\n\t\t\tthrow new Error(\"Could not get extensions report.\");\n\t\t}\n\n\t\tconst result = await asJson<IRawExtensionsControlManifest>(context);\n\t\tconst malicious: IExtensionIdentifier[] = [];\n\t\tconst deprecated: IStringDictionary<IDeprecationInfo> = {};\n\t\tconst search: ISearchPrefferedResults[] = [];\n\t\tconst extensionsEnabledWithPreRelease: string[] = [];\n\t\tif (result) {\n\t\t\tfor (const id of result.malicious) {\n\t\t\t\tmalicious.push({ id });\n\t\t\t}\n\t\t\tif (result.migrateToPreRelease) {\n\t\t\t\tfor (const [\n\t\t\t\t\tunsupportedPreReleaseExtensionId,\n\t\t\t\t\tpreReleaseExtensionInfo,\n\t\t\t\t] of Object.entries(result.migrateToPreRelease)) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!preReleaseExtensionInfo.engine ||\n\t\t\t\t\t\tisEngineValid(\n\t\t\t\t\t\t\tpreReleaseExtensionInfo.engine,\n\t\t\t\t\t\t\tthis.productService.version,\n\t\t\t\t\t\t\tthis.productService.date,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tdeprecated[\n\t\t\t\t\t\t\tunsupportedPreReleaseExtensionId.toLowerCase()\n\t\t\t\t\t\t] = {\n\t\t\t\t\t\t\tdisallowInstall: true,\n\t\t\t\t\t\t\textension: {\n\t\t\t\t\t\t\t\tid: preReleaseExtensionInfo.id,\n\t\t\t\t\t\t\t\tdisplayName:\n\t\t\t\t\t\t\t\t\tpreReleaseExtensionInfo.displayName,\n\t\t\t\t\t\t\t\tautoMigrate: {\n\t\t\t\t\t\t\t\t\tstorage:\n\t\t\t\t\t\t\t\t\t\t!!preReleaseExtensionInfo.migrateStorage,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpreRelease: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result.deprecated) {\n\t\t\t\tfor (const [\n\t\t\t\t\tdeprecatedExtensionId,\n\t\t\t\t\tdeprecationInfo,\n\t\t\t\t] of Object.entries(result.deprecated)) {\n\t\t\t\t\tif (deprecationInfo) {\n\t\t\t\t\t\tdeprecated[deprecatedExtensionId.toLowerCase()] =\n\t\t\t\t\t\t\tisBoolean(deprecationInfo) ? {} : deprecationInfo;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result.search) {\n\t\t\t\tfor (const s of result.search) {\n\t\t\t\t\tsearch.push(s);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Array.isArray(result.extensionsEnabledWithPreRelease)) {\n\t\t\t\tfor (const id of result.extensionsEnabledWithPreRelease) {\n\t\t\t\t\textensionsEnabledWithPreRelease.push(id.toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tmalicious,\n\t\t\tdeprecated,\n\t\t\tsearch,\n\t\t\textensionsEnabledWithPreRelease,\n\t\t};\n\t}\n}\n\nexport class ExtensionGalleryService extends AbstractExtensionGalleryService {\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper(\n\t\t\tstorageService,\n\t\t\trequestService,\n\t\t\tlogService,\n\t\t\tenvironmentService,\n\t\t\ttelemetryService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\tconfigurationService,\n\t\t);\n\t}\n}\n\nexport class ExtensionGalleryServiceWithNoStorageService extends AbstractExtensionGalleryService {\n\tconstructor(\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper(\n\t\t\tundefined,\n\t\t\trequestService,\n\t\t\tlogService,\n\t\t\tenvironmentService,\n\t\t\ttelemetryService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\tconfigurationService,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Flags", "FilterType", "criterium", "result", "query", "token", "extensions", "total"]
}
