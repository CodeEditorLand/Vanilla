{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionGalleryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { CancellationError, getErrorMessage, isCancellationError } from '../../../base/common/errors.js';\nimport { IPager } from '../../../base/common/paging.js';\nimport { isWeb, platform } from '../../../base/common/platform.js';\nimport { arch } from '../../../base/common/process.js';\nimport { isBoolean } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IHeaders, IRequestContext, IRequestOptions, isOfflineError } from '../../../base/parts/request/common/request.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { getTargetPlatform, IExtensionGalleryService, IExtensionIdentifier, IExtensionInfo, IGalleryExtension, IGalleryExtensionAsset, IGalleryExtensionAssets, IGalleryExtensionVersion, InstallOperation, IQueryOptions, IExtensionsControlManifest, isNotWebExtensionInWebTargetPlatform, isTargetPlatformCompatible, ITranslation, SortBy, SortOrder, StatisticType, toTargetPlatform, WEB_EXTENSION_TAG, IExtensionQueryOptions, IDeprecationInfo, ISearchPrefferedResults, ExtensionGalleryError, ExtensionGalleryErrorCode, IProductVersion } from './extensionManagement.js';\nimport { adoptToGalleryExtensionId, areSameExtensions, getGalleryExtensionId, getGalleryExtensionTelemetryData } from './extensionManagementUtil.js';\nimport { IExtensionManifest, TargetPlatform } from '../../extensions/common/extensions.js';\nimport { areApiProposalsCompatible, isEngineValid } from '../../extensions/common/extensionValidator.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { asJson, asTextOrError, IRequestService, isSuccess } from '../../request/common/request.js';\nimport { resolveMarketplaceHeaders } from '../../externalServices/common/marketplace.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\n\nconst CURRENT_TARGET_PLATFORM = isWeb ? TargetPlatform.WEB : getTargetPlatform(platform, arch);\nconst ACTIVITY_HEADER_NAME = 'X-Market-Search-Activity-Id';\n\ninterface IRawGalleryExtensionFile {\n\treadonly assetType: string;\n\treadonly source: string;\n}\n\ninterface IRawGalleryExtensionProperty {\n\treadonly key: string;\n\treadonly value: string;\n}\n\nexport interface IRawGalleryExtensionVersion {\n\treadonly version: string;\n\treadonly lastUpdated: string;\n\treadonly assetUri: string;\n\treadonly fallbackAssetUri: string;\n\treadonly files: IRawGalleryExtensionFile[];\n\treadonly properties?: IRawGalleryExtensionProperty[];\n\treadonly targetPlatform?: string;\n}\n\ninterface IRawGalleryExtensionStatistics {\n\treadonly statisticName: string;\n\treadonly value: number;\n}\n\ninterface IRawGalleryExtensionPublisher {\n\treadonly displayName: string;\n\treadonly publisherId: string;\n\treadonly publisherName: string;\n\treadonly domain?: string | null;\n\treadonly isDomainVerified?: boolean;\n}\n\ninterface IRawGalleryExtension {\n\treadonly extensionId: string;\n\treadonly extensionName: string;\n\treadonly displayName: string;\n\treadonly shortDescription?: string;\n\treadonly publisher: IRawGalleryExtensionPublisher;\n\treadonly versions: IRawGalleryExtensionVersion[];\n\treadonly statistics: IRawGalleryExtensionStatistics[];\n\treadonly tags: string[] | undefined;\n\treadonly releaseDate: string;\n\treadonly publishedDate: string;\n\treadonly lastUpdated: string;\n\treadonly categories: string[] | undefined;\n\treadonly flags: string;\n}\n\ninterface IRawGalleryExtensionsResult {\n\treadonly galleryExtensions: IRawGalleryExtension[];\n\treadonly total: number;\n\treadonly context?: IStringDictionary<string>;\n}\n\ninterface IRawGalleryQueryResult {\n\treadonly results: {\n\t\treadonly extensions: IRawGalleryExtension[];\n\t\treadonly resultMetadata: {\n\t\t\treadonly metadataType: string;\n\t\t\treadonly metadataItems: {\n\t\t\t\treadonly name: string;\n\t\t\t\treadonly count: number;\n\t\t\t}[];\n\t\t}[];\n\t}[];\n}\n\nenum Flags {\n\n\t/**\n\t * None is used to retrieve only the basic extension details.\n\t */\n\tNone = 0x0,\n\n\t/**\n\t * IncludeVersions will return version information for extensions returned\n\t */\n\tIncludeVersions = 0x1,\n\n\t/**\n\t * IncludeFiles will return information about which files were found\n\t * within the extension that were stored independent of the manifest.\n\t * When asking for files, versions will be included as well since files\n\t * are returned as a property of the versions.\n\t * These files can be retrieved using the path to the file without\n\t * requiring the entire manifest be downloaded.\n\t */\n\tIncludeFiles = 0x2,\n\n\t/**\n\t * Include the Categories and Tags that were added to the extension definition.\n\t */\n\tIncludeCategoryAndTags = 0x4,\n\n\t/**\n\t * Include the details about which accounts the extension has been shared\n\t * with if the extension is a private extension.\n\t */\n\tIncludeSharedAccounts = 0x8,\n\n\t/**\n\t * Include properties associated with versions of the extension\n\t */\n\tIncludeVersionProperties = 0x10,\n\n\t/**\n\t * Excluding non-validated extensions will remove any extension versions that\n\t * either are in the process of being validated or have failed validation.\n\t */\n\tExcludeNonValidated = 0x20,\n\n\t/**\n\t * Include the set of installation targets the extension has requested.\n\t */\n\tIncludeInstallationTargets = 0x40,\n\n\t/**\n\t * Include the base uri for assets of this extension\n\t */\n\tIncludeAssetUri = 0x80,\n\n\t/**\n\t * Include the statistics associated with this extension\n\t */\n\tIncludeStatistics = 0x100,\n\n\t/**\n\t * When retrieving versions from a query, only include the latest\n\t * version of the extensions that matched. This is useful when the\n\t * caller doesn't need all the published versions. It will save a\n\t * significant size in the returned payload.\n\t */\n\tIncludeLatestVersionOnly = 0x200,\n\n\t/**\n\t * The Unpublished extension flag indicates that the extension can't be installed/downloaded.\n\t * Users who have installed such an extension can continue to use the extension.\n\t */\n\tUnpublished = 0x1000,\n\n\t/**\n\t * Include the details if an extension is in conflict list or not\n\t */\n\tIncludeNameConflictInfo = 0x8000,\n}\n\nfunction flagsToString(...flags: Flags[]): string {\n\treturn String(flags.reduce((r, f) => r | f, 0));\n}\n\nenum FilterType {\n\tTag = 1,\n\tExtensionId = 4,\n\tCategory = 5,\n\tExtensionName = 7,\n\tTarget = 8,\n\tFeatured = 9,\n\tSearchText = 10,\n\tExcludeWithFlags = 12\n}\n\nconst AssetType = {\n\tIcon: 'Microsoft.VisualStudio.Services.Icons.Default',\n\tDetails: 'Microsoft.VisualStudio.Services.Content.Details',\n\tChangelog: 'Microsoft.VisualStudio.Services.Content.Changelog',\n\tManifest: 'Microsoft.VisualStudio.Code.Manifest',\n\tVSIX: 'Microsoft.VisualStudio.Services.VSIXPackage',\n\tLicense: 'Microsoft.VisualStudio.Services.Content.License',\n\tRepository: 'Microsoft.VisualStudio.Services.Links.Source',\n\tSignature: 'Microsoft.VisualStudio.Services.VsixSignature'\n};\n\nconst PropertyType = {\n\tDependency: 'Microsoft.VisualStudio.Code.ExtensionDependencies',\n\tExtensionPack: 'Microsoft.VisualStudio.Code.ExtensionPack',\n\tEngine: 'Microsoft.VisualStudio.Code.Engine',\n\tPreRelease: 'Microsoft.VisualStudio.Code.PreRelease',\n\tEnabledApiProposals: 'Microsoft.VisualStudio.Code.EnabledApiProposals',\n\tLocalizedLanguages: 'Microsoft.VisualStudio.Code.LocalizedLanguages',\n\tWebExtension: 'Microsoft.VisualStudio.Code.WebExtension',\n\tSponsorLink: 'Microsoft.VisualStudio.Code.SponsorLink',\n\tSupportLink: 'Microsoft.VisualStudio.Services.Links.Support',\n\tExecutesCode: 'Microsoft.VisualStudio.Code.ExecutesCode',\n};\n\ninterface ICriterium {\n\treadonly filterType: FilterType;\n\treadonly value?: string;\n}\n\nconst DefaultPageSize = 10;\n\ninterface IQueryState {\n\treadonly pageNumber: number;\n\treadonly pageSize: number;\n\treadonly sortBy: SortBy;\n\treadonly sortOrder: SortOrder;\n\treadonly flags: Flags;\n\treadonly criteria: ICriterium[];\n\treadonly assetTypes: string[];\n\treadonly source?: string;\n}\n\nconst DefaultQueryState: IQueryState = {\n\tpageNumber: 1,\n\tpageSize: DefaultPageSize,\n\tsortBy: SortBy.NoneOrRelevance,\n\tsortOrder: SortOrder.Default,\n\tflags: Flags.None,\n\tcriteria: [],\n\tassetTypes: []\n};\n\ntype GalleryServiceQueryClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about Marketplace query and its response';\n\treadonly filterTypes: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Filter types used in the query.' };\n\treadonly flags: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Flags passed in the query.' };\n\treadonly sortBy: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'sorted by option passed in the query' };\n\treadonly sortOrder: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'sort order option passed in the query' };\n\treadonly pageNumber: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'requested page number in the query' };\n\treadonly duration: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; 'isMeasurement': true; comment: 'amount of time taken by the query request' };\n\treadonly success: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'whether the query reques is success or not' };\n\treadonly requestBodySize: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'size of the request body' };\n\treadonly responseBodySize?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'size of the response body' };\n\treadonly statusCode?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'status code of the response' };\n\treadonly errorCode?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'error code of the response' };\n\treadonly count?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'total number of extensions matching the query' };\n\treadonly source?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'source that requested this query, eg., recommendations, viewlet' };\n\treadonly searchTextLength?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'length of the search text in the query' };\n};\n\ntype QueryTelemetryData = {\n\treadonly flags: number;\n\treadonly filterTypes: string[];\n\treadonly sortBy: string;\n\treadonly sortOrder: string;\n\treadonly pageNumber: string;\n\treadonly source?: string;\n\treadonly searchTextLength?: number;\n};\n\ntype GalleryServiceQueryEvent = QueryTelemetryData & {\n\treadonly duration: number;\n\treadonly success: boolean;\n\treadonly requestBodySize: string;\n\treadonly responseBodySize?: string;\n\treadonly statusCode?: string;\n\treadonly errorCode?: string;\n\treadonly count?: string;\n};\n\ntype GalleryServiceAdditionalQueryClassification = {\n\towner: 'sandy081';\n\tcomment: 'Response information about the additional query to the Marketplace for fetching all versions to get release version';\n\treadonly duration: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; 'isMeasurement': true; comment: 'Amount of time taken by the additional query' };\n\treadonly count: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Total number of extensions returned by this additional query' };\n};\n\ntype GalleryServiceAdditionalQueryEvent = {\n\treadonly duration: number;\n\treadonly count: number;\n};\n\ninterface IExtensionCriteria {\n\treadonly productVersion: IProductVersion;\n\treadonly targetPlatform: TargetPlatform;\n\treadonly compatible: boolean;\n\treadonly includePreRelease: boolean | (IExtensionIdentifier & { includePreRelease: boolean })[];\n\treadonly versions?: (IExtensionIdentifier & { version: string })[];\n}\n\nclass Query {\n\n\tconstructor(private state = DefaultQueryState) { }\n\n\tget pageNumber(): number { return this.state.pageNumber; }\n\tget pageSize(): number { return this.state.pageSize; }\n\tget sortBy(): number { return this.state.sortBy; }\n\tget sortOrder(): number { return this.state.sortOrder; }\n\tget flags(): number { return this.state.flags; }\n\tget criteria(): ICriterium[] { return this.state.criteria; }\n\n\twithPage(pageNumber: number, pageSize: number = this.state.pageSize): Query {\n\t\treturn new Query({ ...this.state, pageNumber, pageSize });\n\t}\n\n\twithFilter(filterType: FilterType, ...values: string[]): Query {\n\t\tconst criteria = [\n\t\t\t...this.state.criteria,\n\t\t\t...values.length ? values.map(value => ({ filterType, value })) : [{ filterType }]\n\t\t];\n\n\t\treturn new Query({ ...this.state, criteria });\n\t}\n\n\twithSortBy(sortBy: SortBy): Query {\n\t\treturn new Query({ ...this.state, sortBy });\n\t}\n\n\twithSortOrder(sortOrder: SortOrder): Query {\n\t\treturn new Query({ ...this.state, sortOrder });\n\t}\n\n\twithFlags(...flags: Flags[]): Query {\n\t\treturn new Query({ ...this.state, flags: flags.reduce<number>((r, f) => r | f, 0) });\n\t}\n\n\twithAssetTypes(...assetTypes: string[]): Query {\n\t\treturn new Query({ ...this.state, assetTypes });\n\t}\n\n\twithSource(source: string): Query {\n\t\treturn new Query({ ...this.state, source });\n\t}\n\n\tget raw(): any {\n\t\tconst { criteria, pageNumber, pageSize, sortBy, sortOrder, flags, assetTypes } = this.state;\n\t\tconst filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];\n\t\treturn { filters, assetTypes, flags };\n\t}\n\n\tget searchText(): string {\n\t\tconst criterium = this.state.criteria.filter(criterium => criterium.filterType === FilterType.SearchText)[0];\n\t\treturn criterium && criterium.value ? criterium.value : '';\n\t}\n\n\tget telemetryData(): QueryTelemetryData {\n\t\treturn {\n\t\t\tfilterTypes: this.state.criteria.map(criterium => String(criterium.filterType)),\n\t\t\tflags: this.state.flags,\n\t\t\tsortBy: String(this.sortBy),\n\t\t\tsortOrder: String(this.sortOrder),\n\t\t\tpageNumber: String(this.pageNumber),\n\t\t\tsource: this.state.source,\n\t\t\tsearchTextLength: this.searchText.length\n\t\t};\n\t}\n}\n\nfunction getStatistic(statistics: IRawGalleryExtensionStatistics[], name: string): number {\n\tconst result = (statistics || []).filter(s => s.statisticName === name)[0];\n\treturn result ? result.value : 0;\n}\n\nfunction getCoreTranslationAssets(version: IRawGalleryExtensionVersion): [string, IGalleryExtensionAsset][] {\n\tconst coreTranslationAssetPrefix = 'Microsoft.VisualStudio.Code.Translation.';\n\tconst result = version.files.filter(f => f.assetType.indexOf(coreTranslationAssetPrefix) === 0);\n\treturn result.reduce<[string, IGalleryExtensionAsset][]>((result, file) => {\n\t\tconst asset = getVersionAsset(version, file.assetType);\n\t\tif (asset) {\n\t\t\tresult.push([file.assetType.substring(coreTranslationAssetPrefix.length), asset]);\n\t\t}\n\t\treturn result;\n\t}, []);\n}\n\nfunction getRepositoryAsset(version: IRawGalleryExtensionVersion): IGalleryExtensionAsset | null {\n\tif (version.properties) {\n\t\tconst results = version.properties.filter(p => p.key === AssetType.Repository);\n\t\tconst gitRegExp = new RegExp('((git|ssh|http(s)?)|(git@[\\\\w.]+))(:(//)?)([\\\\w.@:/\\\\-~]+)(.git)(/)?');\n\n\t\tconst uri = results.filter(r => gitRegExp.test(r.value))[0];\n\t\treturn uri ? { uri: uri.value, fallbackUri: uri.value } : null;\n\t}\n\treturn getVersionAsset(version, AssetType.Repository);\n}\n\nfunction getDownloadAsset(version: IRawGalleryExtensionVersion): IGalleryExtensionAsset {\n\treturn {\n\t\t// always use fallbackAssetUri for download asset to hit the Marketplace API so that downloads are counted\n\t\turi: `${version.fallbackAssetUri}/${AssetType.VSIX}?redirect=true${version.targetPlatform ? `&targetPlatform=${version.targetPlatform}` : ''}`,\n\t\tfallbackUri: `${version.fallbackAssetUri}/${AssetType.VSIX}${version.targetPlatform ? `?targetPlatform=${version.targetPlatform}` : ''}`\n\t};\n}\n\nfunction getVersionAsset(version: IRawGalleryExtensionVersion, type: string): IGalleryExtensionAsset | null {\n\tconst result = version.files.filter(f => f.assetType === type)[0];\n\treturn result ? {\n\t\turi: `${version.assetUri}/${type}${version.targetPlatform ? `?targetPlatform=${version.targetPlatform}` : ''}`,\n\t\tfallbackUri: `${version.fallbackAssetUri}/${type}${version.targetPlatform ? `?targetPlatform=${version.targetPlatform}` : ''}`\n\t} : null;\n}\n\nfunction getExtensions(version: IRawGalleryExtensionVersion, property: string): string[] {\n\tconst values = version.properties ? version.properties.filter(p => p.key === property) : [];\n\tconst value = values.length > 0 && values[0].value;\n\treturn value ? value.split(',').map(v => adoptToGalleryExtensionId(v)) : [];\n}\n\nfunction getEngine(version: IRawGalleryExtensionVersion): string {\n\tconst values = version.properties ? version.properties.filter(p => p.key === PropertyType.Engine) : [];\n\treturn (values.length > 0 && values[0].value) || '';\n}\n\nfunction isPreReleaseVersion(version: IRawGalleryExtensionVersion): boolean {\n\tconst values = version.properties ? version.properties.filter(p => p.key === PropertyType.PreRelease) : [];\n\treturn values.length > 0 && values[0].value === 'true';\n}\n\nfunction executesCode(version: IRawGalleryExtensionVersion): boolean | undefined {\n\tconst values = version.properties ? version.properties.filter(p => p.key === PropertyType.ExecutesCode) : [];\n\treturn values.length > 0 ? values[0].value === 'true' : undefined;\n}\n\nfunction getEnabledApiProposals(version: IRawGalleryExtensionVersion): string[] {\n\tconst values = version.properties ? version.properties.filter(p => p.key === PropertyType.EnabledApiProposals) : [];\n\tconst value = (values.length > 0 && values[0].value) || '';\n\treturn value ? value.split(',') : [];\n}\n\nfunction getLocalizedLanguages(version: IRawGalleryExtensionVersion): string[] {\n\tconst values = version.properties ? version.properties.filter(p => p.key === PropertyType.LocalizedLanguages) : [];\n\tconst value = (values.length > 0 && values[0].value) || '';\n\treturn value ? value.split(',') : [];\n}\n\nfunction getSponsorLink(version: IRawGalleryExtensionVersion): string | undefined {\n\treturn version.properties?.find(p => p.key === PropertyType.SponsorLink)?.value;\n}\n\nfunction getSupportLink(version: IRawGalleryExtensionVersion): string | undefined {\n\treturn version.properties?.find(p => p.key === PropertyType.SupportLink)?.value;\n}\n\nfunction getIsPreview(flags: string): boolean {\n\treturn flags.indexOf('preview') !== -1;\n}\n\nfunction getTargetPlatformForExtensionVersion(version: IRawGalleryExtensionVersion): TargetPlatform {\n\treturn version.targetPlatform ? toTargetPlatform(version.targetPlatform) : TargetPlatform.UNDEFINED;\n}\n\nfunction getAllTargetPlatforms(rawGalleryExtension: IRawGalleryExtension): TargetPlatform[] {\n\tconst allTargetPlatforms = distinct(rawGalleryExtension.versions.map(getTargetPlatformForExtensionVersion));\n\n\t// Is a web extension only if it has WEB_EXTENSION_TAG\n\tconst isWebExtension = !!rawGalleryExtension.tags?.includes(WEB_EXTENSION_TAG);\n\n\t// Include Web Target Platform only if it is a web extension\n\tconst webTargetPlatformIndex = allTargetPlatforms.indexOf(TargetPlatform.WEB);\n\tif (isWebExtension) {\n\t\tif (webTargetPlatformIndex === -1) {\n\t\t\t// Web extension but does not has web target platform -> add it\n\t\t\tallTargetPlatforms.push(TargetPlatform.WEB);\n\t\t}\n\t} else {\n\t\tif (webTargetPlatformIndex !== -1) {\n\t\t\t// Not a web extension but has web target platform -> remove it\n\t\t\tallTargetPlatforms.splice(webTargetPlatformIndex, 1);\n\t\t}\n\t}\n\n\treturn allTargetPlatforms;\n}\n\nexport function sortExtensionVersions(versions: IRawGalleryExtensionVersion[], preferredTargetPlatform: TargetPlatform): IRawGalleryExtensionVersion[] {\n\t/* It is expected that versions from Marketplace are sorted by version. So we are just sorting by preferred targetPlatform */\n\tfor (let index = 0; index < versions.length; index++) {\n\t\tconst version = versions[index];\n\t\tif (version.version === versions[index - 1]?.version) {\n\t\t\tlet insertionIndex = index;\n\t\t\tconst versionTargetPlatform = getTargetPlatformForExtensionVersion(version);\n\t\t\t/* put it at the beginning */\n\t\t\tif (versionTargetPlatform === preferredTargetPlatform) {\n\t\t\t\twhile (insertionIndex > 0 && versions[insertionIndex - 1].version === version.version) { insertionIndex--; }\n\t\t\t}\n\t\t\tif (insertionIndex !== index) {\n\t\t\t\tversions.splice(index, 1);\n\t\t\t\tversions.splice(insertionIndex, 0, version);\n\t\t\t}\n\t\t}\n\t}\n\treturn versions;\n}\n\nfunction setTelemetry(extension: IGalleryExtension, index: number, querySource?: string): void {\n\t/* __GDPR__FRAGMENT__\n\t\"GalleryExtensionTelemetryData2\" : {\n\t\t\"index\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\"querySource\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"queryActivityId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t}\n\t*/\n\textension.telemetryData = { index, querySource, queryActivityId: extension.queryContext?.[ACTIVITY_HEADER_NAME] };\n}\n\nfunction toExtension(galleryExtension: IRawGalleryExtension, version: IRawGalleryExtensionVersion, allTargetPlatforms: TargetPlatform[], queryContext?: IStringDictionary<any>): IGalleryExtension {\n\tconst latestVersion = galleryExtension.versions[0];\n\tconst assets: IGalleryExtensionAssets = {\n\t\tmanifest: getVersionAsset(version, AssetType.Manifest),\n\t\treadme: getVersionAsset(version, AssetType.Details),\n\t\tchangelog: getVersionAsset(version, AssetType.Changelog),\n\t\tlicense: getVersionAsset(version, AssetType.License),\n\t\trepository: getRepositoryAsset(version),\n\t\tdownload: getDownloadAsset(version),\n\t\ticon: getVersionAsset(version, AssetType.Icon),\n\t\tsignature: getVersionAsset(version, AssetType.Signature),\n\t\tcoreTranslations: getCoreTranslationAssets(version)\n\t};\n\n\treturn {\n\t\ttype: 'gallery',\n\t\tidentifier: {\n\t\t\tid: getGalleryExtensionId(galleryExtension.publisher.publisherName, galleryExtension.extensionName),\n\t\t\tuuid: galleryExtension.extensionId\n\t\t},\n\t\tname: galleryExtension.extensionName,\n\t\tversion: version.version,\n\t\tdisplayName: galleryExtension.displayName,\n\t\tpublisherId: galleryExtension.publisher.publisherId,\n\t\tpublisher: galleryExtension.publisher.publisherName,\n\t\tpublisherDisplayName: galleryExtension.publisher.displayName,\n\t\tpublisherDomain: galleryExtension.publisher.domain ? { link: galleryExtension.publisher.domain, verified: !!galleryExtension.publisher.isDomainVerified } : undefined,\n\t\tpublisherSponsorLink: getSponsorLink(latestVersion),\n\t\tdescription: galleryExtension.shortDescription ?? '',\n\t\tinstallCount: getStatistic(galleryExtension.statistics, 'install'),\n\t\trating: getStatistic(galleryExtension.statistics, 'averagerating'),\n\t\tratingCount: getStatistic(galleryExtension.statistics, 'ratingcount'),\n\t\tcategories: galleryExtension.categories || [],\n\t\ttags: galleryExtension.tags || [],\n\t\treleaseDate: Date.parse(galleryExtension.releaseDate),\n\t\tlastUpdated: Date.parse(galleryExtension.lastUpdated),\n\t\tallTargetPlatforms,\n\t\tassets,\n\t\tproperties: {\n\t\t\tdependencies: getExtensions(version, PropertyType.Dependency),\n\t\t\textensionPack: getExtensions(version, PropertyType.ExtensionPack),\n\t\t\tengine: getEngine(version),\n\t\t\tenabledApiProposals: getEnabledApiProposals(version),\n\t\t\tlocalizedLanguages: getLocalizedLanguages(version),\n\t\t\ttargetPlatform: getTargetPlatformForExtensionVersion(version),\n\t\t\tisPreReleaseVersion: isPreReleaseVersion(version),\n\t\t\texecutesCode: executesCode(version)\n\t\t},\n\t\thasPreReleaseVersion: isPreReleaseVersion(latestVersion),\n\t\thasReleaseVersion: true,\n\t\tpreview: getIsPreview(galleryExtension.flags),\n\t\tisSigned: !!assets.signature,\n\t\tqueryContext,\n\t\tsupportLink: getSupportLink(latestVersion)\n\t};\n}\n\ninterface IRawExtensionsControlManifest {\n\tmalicious: string[];\n\tmigrateToPreRelease?: IStringDictionary<{\n\t\tid: string;\n\t\tdisplayName: string;\n\t\tmigrateStorage?: boolean;\n\t\tengine?: string;\n\t}>;\n\tdeprecated?: IStringDictionary<boolean | {\n\t\tdisallowInstall?: boolean;\n\t\textension?: {\n\t\t\tid: string;\n\t\t\tdisplayName: string;\n\t\t};\n\t\tsettings?: string[];\n\t\tadditionalInfo?: string;\n\t}>;\n\tsearch?: ISearchPrefferedResults[];\n\textensionsEnabledWithPreRelease?: string[];\n}\n\nabstract class AbstractExtensionGalleryService implements IExtensionGalleryService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly extensionsGalleryUrl: string | undefined;\n\tprivate readonly extensionsGallerySearchUrl: string | undefined;\n\tprivate readonly extensionsControlUrl: string | undefined;\n\n\tprivate readonly commonHeadersPromise: Promise<IHeaders>;\n\tprivate readonly extensionsEnabledWithApiProposalVersion: string[];\n\n\tconstructor(\n\t\tstorageService: IStorageService | undefined,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tconst config = productService.extensionsGallery;\n\t\tconst isPPEEnabled = config?.servicePPEUrl && configurationService.getValue('_extensionsGallery.enablePPE');\n\t\tthis.extensionsGalleryUrl = isPPEEnabled ? config.servicePPEUrl : config?.serviceUrl;\n\t\tthis.extensionsGallerySearchUrl = isPPEEnabled ? undefined : config?.searchUrl;\n\t\tthis.extensionsControlUrl = config?.controlUrl;\n\t\tthis.extensionsEnabledWithApiProposalVersion = productService.extensionsEnabledWithApiProposalVersion?.map(id => id.toLowerCase()) ?? [];\n\t\tthis.commonHeadersPromise = resolveMarketplaceHeaders(\n\t\t\tproductService.version,\n\t\t\tproductService,\n\t\t\tthis.environmentService,\n\t\t\tthis.configurationService,\n\t\t\tthis.fileService,\n\t\t\tstorageService,\n\t\t\tthis.telemetryService);\n\t}\n\n\tprivate api(path = ''): string {\n\t\treturn `${this.extensionsGalleryUrl}${path}`;\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn !!this.extensionsGalleryUrl;\n\t}\n\n\tgetExtensions(extensionInfos: ReadonlyArray<IExtensionInfo>, token: CancellationToken): Promise<IGalleryExtension[]>;\n\tgetExtensions(extensionInfos: ReadonlyArray<IExtensionInfo>, options: IExtensionQueryOptions, token: CancellationToken): Promise<IGalleryExtension[]>;\n\tasync getExtensions(extensionInfos: ReadonlyArray<IExtensionInfo>, arg1: any, arg2?: any): Promise<IGalleryExtension[]> {\n\t\tconst options = CancellationToken.isCancellationToken(arg1) ? {} : arg1 as IExtensionQueryOptions;\n\t\tconst token = CancellationToken.isCancellationToken(arg1) ? arg1 : arg2 as CancellationToken;\n\t\tconst result = await this.doGetExtensions(extensionInfos, options, token);\n\n\t\tconst uuids = result.map(r => r.identifier.uuid);\n\t\tconst extensionInfosByName: IExtensionInfo[] = [];\n\t\tfor (const e of extensionInfos) {\n\t\t\tif (e.uuid && !uuids.includes(e.uuid)) {\n\t\t\t\textensionInfosByName.push({ ...e, uuid: undefined });\n\t\t\t}\n\t\t}\n\n\t\tif (extensionInfosByName.length) {\n\t\t\t// report telemetry data for additional query\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t{ count: number },\n\t\t\t\t{\n\t\t\t\t\towner: 'sandy081';\n\t\t\t\t\tcomment: 'Report the query to the the Marketplace for fetching extensions by name';\n\t\t\t\t\treadonly count: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Number of extensions to fetch' };\n\t\t\t\t}>('galleryService:additionalQueryByName', {\n\t\t\t\t\tcount: extensionInfosByName.length\n\t\t\t\t});\n\n\t\t\tconst extensions = await this.doGetExtensions(extensionInfosByName, options, token);\n\t\t\tresult.push(...extensions);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async doGetExtensions(extensionInfos: ReadonlyArray<IExtensionInfo>, options: IExtensionQueryOptions, token: CancellationToken): Promise<IGalleryExtension[]> {\n\t\tconst names: string[] = []; const ids: string[] = [], includePreReleases: (IExtensionIdentifier & { includePreRelease: boolean })[] = [], versions: (IExtensionIdentifier & { version: string })[] = [];\n\t\tlet isQueryForReleaseVersionFromPreReleaseVersion = true;\n\t\tfor (const extensionInfo of extensionInfos) {\n\t\t\tif (extensionInfo.uuid) {\n\t\t\t\tids.push(extensionInfo.uuid);\n\t\t\t} else {\n\t\t\t\tnames.push(extensionInfo.id);\n\t\t\t}\n\t\t\t// Set includePreRelease to true if version is set, because the version can be a pre-release version\n\t\t\tconst includePreRelease = !!(extensionInfo.version || extensionInfo.preRelease);\n\t\t\tincludePreReleases.push({ id: extensionInfo.id, uuid: extensionInfo.uuid, includePreRelease });\n\t\t\tif (extensionInfo.version) {\n\t\t\t\tversions.push({ id: extensionInfo.id, uuid: extensionInfo.uuid, version: extensionInfo.version });\n\t\t\t}\n\t\t\tisQueryForReleaseVersionFromPreReleaseVersion = isQueryForReleaseVersionFromPreReleaseVersion && (!!extensionInfo.hasPreRelease && !includePreRelease);\n\t\t}\n\n\t\tif (!ids.length && !names.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet query = new Query().withPage(1, extensionInfos.length);\n\t\tif (ids.length) {\n\t\t\tquery = query.withFilter(FilterType.ExtensionId, ...ids);\n\t\t}\n\t\tif (names.length) {\n\t\t\tquery = query.withFilter(FilterType.ExtensionName, ...names);\n\t\t}\n\t\tif (options.queryAllVersions || isQueryForReleaseVersionFromPreReleaseVersion /* Inlcude all versions if every requested extension is for release version and has pre-release version  */) {\n\t\t\tquery = query.withFlags(query.flags, Flags.IncludeVersions);\n\t\t}\n\t\tif (options.source) {\n\t\t\tquery = query.withSource(options.source);\n\t\t}\n\n\t\tconst { extensions } = await this.queryGalleryExtensions(query, { targetPlatform: options.targetPlatform ?? CURRENT_TARGET_PLATFORM, includePreRelease: includePreReleases, versions, compatible: !!options.compatible, productVersion: options.productVersion ?? { version: this.productService.version, date: this.productService.date } }, token);\n\t\tif (options.source) {\n\t\t\textensions.forEach((e, index) => setTelemetry(e, index, options.source));\n\t\t}\n\t\treturn extensions;\n\t}\n\n\tasync getCompatibleExtension(extension: IGalleryExtension, includePreRelease: boolean, targetPlatform: TargetPlatform, productVersion: IProductVersion = { version: this.productService.version, date: this.productService.date }): Promise<IGalleryExtension | null> {\n\t\tif (isNotWebExtensionInWebTargetPlatform(extension.allTargetPlatforms, targetPlatform)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (await this.isExtensionCompatible(extension, includePreRelease, targetPlatform)) {\n\t\t\treturn extension;\n\t\t}\n\t\tconst query = new Query()\n\t\t\t.withFlags(Flags.IncludeVersions)\n\t\t\t.withPage(1, 1)\n\t\t\t.withFilter(FilterType.ExtensionId, extension.identifier.uuid);\n\t\tconst { extensions } = await this.queryGalleryExtensions(query, { targetPlatform, compatible: true, includePreRelease, productVersion }, CancellationToken.None);\n\t\treturn extensions[0] || null;\n\t}\n\n\tasync isExtensionCompatible(extension: IGalleryExtension, includePreRelease: boolean, targetPlatform: TargetPlatform, productVersion: IProductVersion = { version: this.productService.version, date: this.productService.date }): Promise<boolean> {\n\t\tif (!isTargetPlatformCompatible(extension.properties.targetPlatform, extension.allTargetPlatforms, targetPlatform)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!includePreRelease && extension.properties.isPreReleaseVersion) {\n\t\t\t// Pre-releases are not allowed when include pre-release flag is not set\n\t\t\treturn false;\n\t\t}\n\n\t\tlet engine = extension.properties.engine;\n\t\tif (!engine) {\n\t\t\tconst manifest = await this.getManifest(extension, CancellationToken.None);\n\t\t\tif (!manifest) {\n\t\t\t\tthrow new Error('Manifest was not found');\n\t\t\t}\n\t\t\tengine = manifest.engines.vscode;\n\t\t}\n\n\t\tif (!isEngineValid(engine, productVersion.version, productVersion.date)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.areApiProposalsCompatible(extension.identifier, extension.properties.enabledApiProposals)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate areApiProposalsCompatible(extensionIdentifier: IExtensionIdentifier, enabledApiProposals: string[] | undefined): boolean {\n\t\tif (!enabledApiProposals) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!this.extensionsEnabledWithApiProposalVersion.includes(extensionIdentifier.id.toLowerCase())) {\n\t\t\treturn true;\n\t\t}\n\t\treturn areApiProposalsCompatible(enabledApiProposals);\n\t}\n\n\tprivate async isValidVersion(extension: string, rawGalleryExtensionVersion: IRawGalleryExtensionVersion, versionType: 'release' | 'prerelease' | 'any', compatible: boolean, allTargetPlatforms: TargetPlatform[], targetPlatform: TargetPlatform, productVersion: IProductVersion = { version: this.productService.version, date: this.productService.date }): Promise<boolean> {\n\t\tif (!isTargetPlatformCompatible(getTargetPlatformForExtensionVersion(rawGalleryExtensionVersion), allTargetPlatforms, targetPlatform)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (versionType !== 'any' && isPreReleaseVersion(rawGalleryExtensionVersion) !== (versionType === 'prerelease')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (compatible) {\n\t\t\ttry {\n\t\t\t\tconst engine = await this.getEngine(extension, rawGalleryExtensionVersion);\n\t\t\t\tif (!isEngineValid(engine, productVersion.version, productVersion.date)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(`Error while getting the engine for the version ${rawGalleryExtensionVersion.version}.`, getErrorMessage(error));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync query(options: IQueryOptions, token: CancellationToken): Promise<IPager<IGalleryExtension>> {\n\t\tlet text = options.text || '';\n\t\tconst pageSize = options.pageSize ?? 50;\n\n\t\tlet query = new Query()\n\t\t\t.withPage(1, pageSize);\n\n\t\tif (text) {\n\t\t\t// Use category filter instead of \"category:themes\"\n\t\t\ttext = text.replace(/\\bcategory:(\"([^\"]*)\"|([^\"]\\S*))(\\s+|\\b|$)/g, (_, quotedCategory, category) => {\n\t\t\t\tquery = query.withFilter(FilterType.Category, category || quotedCategory);\n\t\t\t\treturn '';\n\t\t\t});\n\n\t\t\t// Use tag filter instead of \"tag:debuggers\"\n\t\t\ttext = text.replace(/\\btag:(\"([^\"]*)\"|([^\"]\\S*))(\\s+|\\b|$)/g, (_, quotedTag, tag) => {\n\t\t\t\tquery = query.withFilter(FilterType.Tag, tag || quotedTag);\n\t\t\t\treturn '';\n\t\t\t});\n\n\t\t\t// Use featured filter\n\t\t\ttext = text.replace(/\\bfeatured(\\s+|\\b|$)/g, () => {\n\t\t\t\tquery = query.withFilter(FilterType.Featured);\n\t\t\t\treturn '';\n\t\t\t});\n\n\t\t\ttext = text.trim();\n\n\t\t\tif (text) {\n\t\t\t\ttext = text.length < 200 ? text : text.substring(0, 200);\n\t\t\t\tquery = query.withFilter(FilterType.SearchText, text);\n\t\t\t}\n\n\t\t\tquery = query.withSortBy(SortBy.NoneOrRelevance);\n\t\t} else if (options.ids) {\n\t\t\tquery = query.withFilter(FilterType.ExtensionId, ...options.ids);\n\t\t} else if (options.names) {\n\t\t\tquery = query.withFilter(FilterType.ExtensionName, ...options.names);\n\t\t} else {\n\t\t\tquery = query.withSortBy(SortBy.InstallCount);\n\t\t}\n\n\t\tif (typeof options.sortBy === 'number') {\n\t\t\tquery = query.withSortBy(options.sortBy);\n\t\t}\n\n\t\tif (typeof options.sortOrder === 'number') {\n\t\t\tquery = query.withSortOrder(options.sortOrder);\n\t\t}\n\n\t\tif (options.source) {\n\t\t\tquery = query.withSource(options.source);\n\t\t}\n\n\t\tconst runQuery = async (query: Query, token: CancellationToken) => {\n\t\t\tconst { extensions, total } = await this.queryGalleryExtensions(query, { targetPlatform: CURRENT_TARGET_PLATFORM, compatible: false, includePreRelease: !!options.includePreRelease, productVersion: options.productVersion ?? { version: this.productService.version, date: this.productService.date } }, token);\n\t\t\textensions.forEach((e, index) => setTelemetry(e, ((query.pageNumber - 1) * query.pageSize) + index, options.source));\n\t\t\treturn { extensions, total };\n\t\t};\n\t\tconst { extensions, total } = await runQuery(query, token);\n\t\tconst getPage = async (pageIndex: number, ct: CancellationToken) => {\n\t\t\tif (ct.isCancellationRequested) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\t\t\tconst { extensions } = await runQuery(query.withPage(pageIndex + 1), ct);\n\t\t\treturn extensions;\n\t\t};\n\n\t\treturn { firstPage: extensions, total, pageSize: query.pageSize, getPage };\n\t}\n\n\tprivate async queryGalleryExtensions(query: Query, criteria: IExtensionCriteria, token: CancellationToken): Promise<{ extensions: IGalleryExtension[]; total: number }> {\n\t\tconst flags = query.flags;\n\n\t\t/**\n\t\t * If both version flags (IncludeLatestVersionOnly and IncludeVersions) are included, then only include latest versions (IncludeLatestVersionOnly) flag.\n\t\t */\n\t\tif (!!(query.flags & Flags.IncludeLatestVersionOnly) && !!(query.flags & Flags.IncludeVersions)) {\n\t\t\tquery = query.withFlags(query.flags & ~Flags.IncludeVersions, Flags.IncludeLatestVersionOnly);\n\t\t}\n\n\t\t/**\n\t\t * If version flags (IncludeLatestVersionOnly and IncludeVersions) are not included, default is to query for latest versions (IncludeLatestVersionOnly).\n\t\t */\n\t\tif (!(query.flags & Flags.IncludeLatestVersionOnly) && !(query.flags & Flags.IncludeVersions)) {\n\t\t\tquery = query.withFlags(query.flags, Flags.IncludeLatestVersionOnly);\n\t\t}\n\n\t\t/**\n\t\t * If versions criteria exist, then remove IncludeLatestVersionOnly flag and add IncludeVersions flag.\n\t\t */\n\t\tif (criteria.versions?.length) {\n\t\t\tquery = query.withFlags(query.flags & ~Flags.IncludeLatestVersionOnly, Flags.IncludeVersions);\n\t\t}\n\n\t\t/**\n\t\t * Add necessary extension flags\n\t\t */\n\t\tquery = query.withFlags(query.flags, Flags.IncludeAssetUri, Flags.IncludeCategoryAndTags, Flags.IncludeFiles, Flags.IncludeStatistics, Flags.IncludeVersionProperties);\n\t\tconst { galleryExtensions: rawGalleryExtensions, total, context } = await this.queryRawGalleryExtensions(query, token);\n\n\t\tconst hasAllVersions: boolean = !(query.flags & Flags.IncludeLatestVersionOnly);\n\t\tif (hasAllVersions) {\n\t\t\tconst extensions: IGalleryExtension[] = [];\n\t\t\tfor (const rawGalleryExtension of rawGalleryExtensions) {\n\t\t\t\tconst extension = await this.toGalleryExtensionWithCriteria(rawGalleryExtension, criteria, context);\n\t\t\t\tif (extension) {\n\t\t\t\t\textensions.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { extensions, total };\n\t\t}\n\n\t\tconst result: [number, IGalleryExtension][] = [];\n\t\tconst needAllVersions = new Map<string, number>();\n\t\tfor (let index = 0; index < rawGalleryExtensions.length; index++) {\n\t\t\tconst rawGalleryExtension = rawGalleryExtensions[index];\n\t\t\tconst extensionIdentifier = { id: getGalleryExtensionId(rawGalleryExtension.publisher.publisherName, rawGalleryExtension.extensionName), uuid: rawGalleryExtension.extensionId };\n\t\t\tconst includePreRelease = isBoolean(criteria.includePreRelease) ? criteria.includePreRelease : !!criteria.includePreRelease.find(extensionIdentifierWithPreRelease => areSameExtensions(extensionIdentifierWithPreRelease, extensionIdentifier))?.includePreRelease;\n\t\t\tif (criteria.compatible && isNotWebExtensionInWebTargetPlatform(getAllTargetPlatforms(rawGalleryExtension), criteria.targetPlatform)) {\n\t\t\t\t/** Skip if requested for a web-compatible extension and it is not a web extension.\n\t\t\t\t * All versions are not needed in this case\n\t\t\t\t*/\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst extension = await this.toGalleryExtensionWithCriteria(rawGalleryExtension, criteria, context);\n\t\t\tif (!extension\n\t\t\t\t/** Need all versions if the extension is a pre-release version but\n\t\t\t\t * \t\t- the query is to look for a release version or\n\t\t\t\t * \t\t- the extension has no release version\n\t\t\t\t * Get all versions to get or check the release version\n\t\t\t\t*/\n\t\t\t\t|| (extension.properties.isPreReleaseVersion && (!includePreRelease || !extension.hasReleaseVersion))\n\t\t\t\t/**\n\t\t\t\t * Need all versions if the extension is a release version with a different target platform than requested and also has a pre-release version\n\t\t\t\t * Because, this is a platform specific extension and can have a newer release version supporting this platform.\n\t\t\t\t * See https://github.com/microsoft/vscode/issues/139628\n\t\t\t\t*/\n\t\t\t\t|| (!extension.properties.isPreReleaseVersion && extension.properties.targetPlatform !== criteria.targetPlatform && extension.hasPreReleaseVersion)\n\t\t\t) {\n\t\t\t\tneedAllVersions.set(rawGalleryExtension.extensionId, index);\n\t\t\t} else {\n\t\t\t\tresult.push([index, extension]);\n\t\t\t}\n\t\t}\n\n\t\tif (needAllVersions.size) {\n\t\t\tconst stopWatch = new StopWatch();\n\t\t\tconst query = new Query()\n\t\t\t\t.withFlags(flags & ~Flags.IncludeLatestVersionOnly, Flags.IncludeVersions)\n\t\t\t\t.withPage(1, needAllVersions.size)\n\t\t\t\t.withFilter(FilterType.ExtensionId, ...needAllVersions.keys());\n\t\t\tconst { extensions } = await this.queryGalleryExtensions(query, criteria, token);\n\t\t\tthis.telemetryService.publicLog2<GalleryServiceAdditionalQueryEvent, GalleryServiceAdditionalQueryClassification>('galleryService:additionalQuery', {\n\t\t\t\tduration: stopWatch.elapsed(),\n\t\t\t\tcount: needAllVersions.size\n\t\t\t});\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst index = needAllVersions.get(extension.identifier.uuid)!;\n\t\t\t\tresult.push([index, extension]);\n\t\t\t}\n\t\t}\n\n\t\treturn { extensions: result.sort((a, b) => a[0] - b[0]).map(([, extension]) => extension), total };\n\t}\n\n\tprivate async toGalleryExtensionWithCriteria(rawGalleryExtension: IRawGalleryExtension, criteria: IExtensionCriteria, queryContext?: IStringDictionary<any>): Promise<IGalleryExtension | null> {\n\n\t\tconst extensionIdentifier = { id: getGalleryExtensionId(rawGalleryExtension.publisher.publisherName, rawGalleryExtension.extensionName), uuid: rawGalleryExtension.extensionId };\n\t\tconst version = criteria.versions?.find(extensionIdentifierWithVersion => areSameExtensions(extensionIdentifierWithVersion, extensionIdentifier))?.version;\n\t\tconst includePreRelease = isBoolean(criteria.includePreRelease) ? criteria.includePreRelease : !!criteria.includePreRelease.find(extensionIdentifierWithPreRelease => areSameExtensions(extensionIdentifierWithPreRelease, extensionIdentifier))?.includePreRelease;\n\t\tconst allTargetPlatforms = getAllTargetPlatforms(rawGalleryExtension);\n\t\tconst rawGalleryExtensionVersions = sortExtensionVersions(rawGalleryExtension.versions, criteria.targetPlatform);\n\n\t\tif (criteria.compatible && isNotWebExtensionInWebTargetPlatform(allTargetPlatforms, criteria.targetPlatform)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (let index = 0; index < rawGalleryExtensionVersions.length; index++) {\n\t\t\tconst rawGalleryExtensionVersion = rawGalleryExtensionVersions[index];\n\t\t\tif (version && rawGalleryExtensionVersion.version !== version) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Allow any version if includePreRelease flag is set otherwise only release versions are allowed\n\t\t\tif (await this.isValidVersion(\n\t\t\t\textensionIdentifier.id,\n\t\t\t\trawGalleryExtensionVersion,\n\t\t\t\tincludePreRelease ? 'any' : 'release',\n\t\t\t\tcriteria.compatible,\n\t\t\t\tallTargetPlatforms,\n\t\t\t\tcriteria.targetPlatform,\n\t\t\t\tcriteria.productVersion)\n\t\t\t) {\n\t\t\t\tif (criteria.compatible && !this.areApiProposalsCompatible(extensionIdentifier, getEnabledApiProposals(rawGalleryExtensionVersion))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn toExtension(rawGalleryExtension, rawGalleryExtensionVersion, allTargetPlatforms, queryContext);\n\t\t\t}\n\t\t\tif (version && rawGalleryExtensionVersion.version === version) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tif (version || criteria.compatible) {\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Fallback: Return the latest version\n\t\t * This can happen when the extension does not have a release version or does not have a version compatible with the given target platform.\n\t\t */\n\t\treturn toExtension(rawGalleryExtension, rawGalleryExtension.versions[0], allTargetPlatforms);\n\t}\n\n\tprivate async queryRawGalleryExtensions(query: Query, token: CancellationToken): Promise<IRawGalleryExtensionsResult> {\n\t\tif (!this.isEnabled()) {\n\t\t\tthrow new Error('No extension gallery service configured.');\n\t\t}\n\n\t\tquery = query\n\t\t\t/* Always exclude non validated extensions */\n\t\t\t.withFlags(query.flags, Flags.ExcludeNonValidated)\n\t\t\t.withFilter(FilterType.Target, 'Microsoft.VisualStudio.Code')\n\t\t\t/* Always exclude unpublished extensions */\n\t\t\t.withFilter(FilterType.ExcludeWithFlags, flagsToString(Flags.Unpublished));\n\n\t\tconst commonHeaders = await this.commonHeadersPromise;\n\t\tconst data = JSON.stringify(query.raw);\n\t\tconst headers = {\n\t\t\t...commonHeaders,\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Accept': 'application/json;api-version=3.0-preview.1',\n\t\t\t'Accept-Encoding': 'gzip',\n\t\t\t'Content-Length': String(data.length),\n\t\t};\n\n\t\tconst stopWatch = new StopWatch();\n\t\tlet context: IRequestContext | undefined, errorCode: ExtensionGalleryErrorCode | undefined, total: number = 0;\n\n\t\ttry {\n\t\t\tcontext = await this.requestService.request({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: this.extensionsGallerySearchUrl && query.criteria.some(c => c.filterType === FilterType.SearchText) ? this.extensionsGallerySearchUrl : this.api('/extensionquery'),\n\t\t\t\tdata,\n\t\t\t\theaders\n\t\t\t}, token);\n\n\t\t\tif (context.res.statusCode && context.res.statusCode >= 400 && context.res.statusCode < 500) {\n\t\t\t\treturn { galleryExtensions: [], total };\n\t\t\t}\n\n\t\t\tconst result = await asJson<IRawGalleryQueryResult>(context);\n\t\t\tif (result) {\n\t\t\t\tconst r = result.results[0];\n\t\t\t\tconst galleryExtensions = r.extensions;\n\t\t\t\tconst resultCount = r.resultMetadata && r.resultMetadata.filter(m => m.metadataType === 'ResultCount')[0];\n\t\t\t\ttotal = resultCount && resultCount.metadataItems.filter(i => i.name === 'TotalCount')[0].count || 0;\n\n\t\t\t\treturn {\n\t\t\t\t\tgalleryExtensions,\n\t\t\t\t\ttotal,\n\t\t\t\t\tcontext: context.res.headers['activityid'] ? {\n\t\t\t\t\t\t[ACTIVITY_HEADER_NAME]: context.res.headers['activityid']\n\t\t\t\t\t} : {}\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn { galleryExtensions: [], total };\n\n\t\t} catch (e) {\n\t\t\tif (isCancellationError(e)) {\n\t\t\t\terrorCode = ExtensionGalleryErrorCode.Cancelled;\n\t\t\t\tthrow e;\n\t\t\t} else {\n\t\t\t\tconst errorMessage = getErrorMessage(e);\n\t\t\t\terrorCode = isOfflineError(e)\n\t\t\t\t\t? ExtensionGalleryErrorCode.Offline\n\t\t\t\t\t: errorMessage.startsWith('XHR timeout')\n\t\t\t\t\t\t? ExtensionGalleryErrorCode.Timeout\n\t\t\t\t\t\t: ExtensionGalleryErrorCode.Failed;\n\t\t\t\tthrow new ExtensionGalleryError(errorMessage, errorCode);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.telemetryService.publicLog2<GalleryServiceQueryEvent, GalleryServiceQueryClassification>('galleryService:query', {\n\t\t\t\t...query.telemetryData,\n\t\t\t\trequestBodySize: String(data.length),\n\t\t\t\tduration: stopWatch.elapsed(),\n\t\t\t\tsuccess: !!context && isSuccess(context),\n\t\t\t\tresponseBodySize: context?.res.headers['Content-Length'],\n\t\t\t\tstatusCode: context ? String(context.res.statusCode) : undefined,\n\t\t\t\terrorCode,\n\t\t\t\tcount: String(total)\n\t\t\t});\n\t\t}\n\t}\n\n\tasync reportStatistic(publisher: string, name: string, version: string, type: StatisticType): Promise<void> {\n\t\tif (!this.isEnabled()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst url = isWeb ? this.api(`/itemName/${publisher}.${name}/version/${version}/statType/${type === StatisticType.Install ? '1' : '3'}/vscodewebextension`) : this.api(`/publishers/${publisher}/extensions/${name}/${version}/stats?statType=${type}`);\n\t\tconst Accept = isWeb ? 'api-version=6.1-preview.1' : '*/*;api-version=4.0-preview.1';\n\n\t\tconst commonHeaders = await this.commonHeadersPromise;\n\t\tconst headers = { ...commonHeaders, Accept };\n\t\ttry {\n\t\t\tawait this.requestService.request({\n\t\t\t\ttype: 'POST',\n\t\t\t\turl,\n\t\t\t\theaders\n\t\t\t}, CancellationToken.None);\n\t\t} catch (error) { /* Ignore */ }\n\t}\n\n\tasync download(extension: IGalleryExtension, location: URI, operation: InstallOperation): Promise<void> {\n\t\tthis.logService.trace('ExtensionGalleryService#download', extension.identifier.id);\n\t\tconst data = getGalleryExtensionTelemetryData(extension);\n\t\tconst startTime = new Date().getTime();\n\n\t\tconst operationParam = operation === InstallOperation.Install ? 'install' : operation === InstallOperation.Update ? 'update' : '';\n\t\tconst downloadAsset = operationParam ? {\n\t\t\turi: `${extension.assets.download.uri}${URI.parse(extension.assets.download.uri).query ? '&' : '?'}${operationParam}=true`,\n\t\t\tfallbackUri: `${extension.assets.download.fallbackUri}${URI.parse(extension.assets.download.fallbackUri).query ? '&' : '?'}${operationParam}=true`\n\t\t} : extension.assets.download;\n\n\t\tconst headers: IHeaders | undefined = extension.queryContext?.[ACTIVITY_HEADER_NAME] ? { [ACTIVITY_HEADER_NAME]: extension.queryContext[ACTIVITY_HEADER_NAME] } : undefined;\n\t\tconst context = await this.getAsset(extension.identifier.id, downloadAsset, AssetType.VSIX, headers ? { headers } : undefined);\n\n\t\ttry {\n\t\t\tawait this.fileService.writeFile(location, context.stream);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (e) {\n\t\t\t\t/* ignore */\n\t\t\t\tthis.logService.warn(`Error while deleting the file ${location.toString()}`, getErrorMessage(e));\n\t\t\t}\n\t\t\tthrow new ExtensionGalleryError(getErrorMessage(error), ExtensionGalleryErrorCode.DownloadFailedWriting);\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"galleryService:downloadVSIX\" : {\n\t\t\t\t\"owner\": \"sandy081\",\n\t\t\t\t\"duration\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${GalleryExtensionTelemetryData}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('galleryService:downloadVSIX', { ...data, duration: new Date().getTime() - startTime });\n\t}\n\n\tasync downloadSignatureArchive(extension: IGalleryExtension, location: URI): Promise<void> {\n\t\tif (!extension.assets.signature) {\n\t\t\tthrow new Error('No signature asset found');\n\t\t}\n\n\t\tthis.logService.trace('ExtensionGalleryService#downloadSignatureArchive', extension.identifier.id);\n\n\t\tconst context = await this.getAsset(extension.identifier.id, extension.assets.signature, AssetType.Signature);\n\t\ttry {\n\t\t\tawait this.fileService.writeFile(location, context.stream);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (e) {\n\t\t\t\t/* ignore */\n\t\t\t\tthis.logService.warn(`Error while deleting the file ${location.toString()}`, getErrorMessage(e));\n\t\t\t}\n\t\t\tthrow new ExtensionGalleryError(getErrorMessage(error), ExtensionGalleryErrorCode.DownloadFailedWriting);\n\t\t}\n\n\t}\n\n\tasync getReadme(extension: IGalleryExtension, token: CancellationToken): Promise<string> {\n\t\tif (extension.assets.readme) {\n\t\t\tconst context = await this.getAsset(extension.identifier.id, extension.assets.readme, AssetType.Details, {}, token);\n\t\t\tconst content = await asTextOrError(context);\n\t\t\treturn content || '';\n\t\t}\n\t\treturn '';\n\t}\n\n\tasync getManifest(extension: IGalleryExtension, token: CancellationToken): Promise<IExtensionManifest | null> {\n\t\tif (extension.assets.manifest) {\n\t\t\tconst context = await this.getAsset(extension.identifier.id, extension.assets.manifest, AssetType.Manifest, {}, token);\n\t\t\tconst text = await asTextOrError(context);\n\t\t\treturn text ? JSON.parse(text) : null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async getManifestFromRawExtensionVersion(extension: string, rawExtensionVersion: IRawGalleryExtensionVersion, token: CancellationToken): Promise<IExtensionManifest | null> {\n\t\tconst manifestAsset = getVersionAsset(rawExtensionVersion, AssetType.Manifest);\n\t\tif (!manifestAsset) {\n\t\t\tthrow new Error('Manifest was not found');\n\t\t}\n\t\tconst headers = { 'Accept-Encoding': 'gzip' };\n\t\tconst context = await this.getAsset(extension, manifestAsset, AssetType.Manifest, { headers });\n\t\treturn await asJson<IExtensionManifest>(context);\n\t}\n\n\tasync getCoreTranslation(extension: IGalleryExtension, languageId: string): Promise<ITranslation | null> {\n\t\tconst asset = extension.assets.coreTranslations.filter(t => t[0] === languageId.toUpperCase())[0];\n\t\tif (asset) {\n\t\t\tconst context = await this.getAsset(extension.identifier.id, asset[1], asset[0]);\n\t\t\tconst text = await asTextOrError(context);\n\t\t\treturn text ? JSON.parse(text) : null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync getChangelog(extension: IGalleryExtension, token: CancellationToken): Promise<string> {\n\t\tif (extension.assets.changelog) {\n\t\t\tconst context = await this.getAsset(extension.identifier.id, extension.assets.changelog, AssetType.Changelog, {}, token);\n\t\t\tconst content = await asTextOrError(context);\n\t\t\treturn content || '';\n\t\t}\n\t\treturn '';\n\t}\n\n\tasync getAllCompatibleVersions(extensionIdentifier: IExtensionIdentifier, includePreRelease: boolean, targetPlatform: TargetPlatform): Promise<IGalleryExtensionVersion[]> {\n\t\tlet query = new Query()\n\t\t\t.withFlags(Flags.IncludeVersions, Flags.IncludeCategoryAndTags, Flags.IncludeFiles, Flags.IncludeVersionProperties)\n\t\t\t.withPage(1, 1);\n\n\t\tif (extensionIdentifier.uuid) {\n\t\t\tquery = query.withFilter(FilterType.ExtensionId, extensionIdentifier.uuid);\n\t\t} else {\n\t\t\tquery = query.withFilter(FilterType.ExtensionName, extensionIdentifier.id);\n\t\t}\n\n\t\tconst { galleryExtensions } = await this.queryRawGalleryExtensions(query, CancellationToken.None);\n\t\tif (!galleryExtensions.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst allTargetPlatforms = getAllTargetPlatforms(galleryExtensions[0]);\n\t\tif (isNotWebExtensionInWebTargetPlatform(allTargetPlatforms, targetPlatform)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst validVersions: IRawGalleryExtensionVersion[] = [];\n\t\tawait Promise.all(galleryExtensions[0].versions.map(async (version) => {\n\t\t\ttry {\n\t\t\t\tif (\n\t\t\t\t\t(await this.isValidVersion(\n\t\t\t\t\t\textensionIdentifier.id,\n\t\t\t\t\t\tversion, includePreRelease ? 'any' : 'release',\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tallTargetPlatforms,\n\t\t\t\t\t\ttargetPlatform))\n\t\t\t\t\t&& this.areApiProposalsCompatible(extensionIdentifier, getEnabledApiProposals(version))\n\t\t\t\t) {\n\t\t\t\t\tvalidVersions.push(version);\n\t\t\t\t}\n\t\t\t} catch (error) { /* Ignore error and skip version */ }\n\t\t}));\n\n\t\tconst result: IGalleryExtensionVersion[] = [];\n\t\tconst seen = new Set<string>();\n\t\tfor (const version of sortExtensionVersions(validVersions, targetPlatform)) {\n\t\t\tif (!seen.has(version.version)) {\n\t\t\t\tseen.add(version.version);\n\t\t\t\tresult.push({ version: version.version, date: version.lastUpdated, isPreReleaseVersion: isPreReleaseVersion(version) });\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async getAsset(extension: string, asset: IGalleryExtensionAsset, assetType: string, options: IRequestOptions = {}, token: CancellationToken = CancellationToken.None): Promise<IRequestContext> {\n\t\tconst commonHeaders = await this.commonHeadersPromise;\n\t\tconst baseOptions = { type: 'GET' };\n\t\tconst headers = { ...commonHeaders, ...(options.headers || {}) };\n\t\toptions = { ...options, ...baseOptions, headers };\n\n\t\tconst url = asset.uri;\n\t\tconst fallbackUrl = asset.fallbackUri;\n\t\tconst firstOptions = { ...options, url };\n\n\t\ttry {\n\t\t\tconst context = await this.requestService.request(firstOptions, token);\n\t\t\tif (context.res.statusCode === 200) {\n\t\t\t\treturn context;\n\t\t\t}\n\t\t\tconst message = await asTextOrError(context);\n\t\t\tthrow new Error(`Expected 200, got back ${context.res.statusCode} instead.\\n\\n${message}`);\n\t\t} catch (err) {\n\t\t\tif (isCancellationError(err)) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tconst message = getErrorMessage(err);\n\t\t\ttype GalleryServiceCDNFallbackClassification = {\n\t\t\t\towner: 'sandy081';\n\t\t\t\tcomment: 'Fallback request information when the primary asset request to CDN fails';\n\t\t\t\textension: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'extension name' };\n\t\t\t\tassetType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'asset that failed' };\n\t\t\t\tmessage: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'error message' };\n\t\t\t};\n\t\t\ttype GalleryServiceCDNFallbackEvent = {\n\t\t\t\textension: string;\n\t\t\t\tassetType: string;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<GalleryServiceCDNFallbackEvent, GalleryServiceCDNFallbackClassification>('galleryService:cdnFallback', { extension, assetType, message });\n\n\t\t\tconst fallbackOptions = { ...options, url: fallbackUrl };\n\t\t\treturn this.requestService.request(fallbackOptions, token);\n\t\t}\n\t}\n\n\tprivate async getEngine(extension: string, rawExtensionVersion: IRawGalleryExtensionVersion): Promise<string> {\n\t\tlet engine = getEngine(rawExtensionVersion);\n\t\tif (!engine) {\n\t\t\ttype GalleryServiceEngineFallbackClassification = {\n\t\t\t\towner: 'sandy081';\n\t\t\t\tcomment: 'Fallback request when engine is not found in properties of an extension version';\n\t\t\t\textension: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'extension name' };\n\t\t\t\tversion: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'version' };\n\t\t\t};\n\t\t\ttype GalleryServiceEngineFallbackEvent = {\n\t\t\t\textension: string;\n\t\t\t\tversion: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<GalleryServiceEngineFallbackEvent, GalleryServiceEngineFallbackClassification>('galleryService:engineFallback', { extension, version: rawExtensionVersion.version });\n\t\t\tconst manifest = await this.getManifestFromRawExtensionVersion(extension, rawExtensionVersion, CancellationToken.None);\n\t\t\tif (!manifest) {\n\t\t\t\tthrow new Error('Manifest was not found');\n\t\t\t}\n\t\t\tengine = manifest.engines.vscode;\n\t\t}\n\t\treturn engine;\n\t}\n\n\tasync getExtensionsControlManifest(): Promise<IExtensionsControlManifest> {\n\t\tif (!this.isEnabled()) {\n\t\t\tthrow new Error('No extension gallery service configured.');\n\t\t}\n\n\t\tif (!this.extensionsControlUrl) {\n\t\t\treturn { malicious: [], deprecated: {}, search: [] };\n\t\t}\n\n\t\tconst context = await this.requestService.request({ type: 'GET', url: this.extensionsControlUrl }, CancellationToken.None);\n\t\tif (context.res.statusCode !== 200) {\n\t\t\tthrow new Error('Could not get extensions report.');\n\t\t}\n\n\t\tconst result = await asJson<IRawExtensionsControlManifest>(context);\n\t\tconst malicious: IExtensionIdentifier[] = [];\n\t\tconst deprecated: IStringDictionary<IDeprecationInfo> = {};\n\t\tconst search: ISearchPrefferedResults[] = [];\n\t\tconst extensionsEnabledWithPreRelease: string[] = [];\n\t\tif (result) {\n\t\t\tfor (const id of result.malicious) {\n\t\t\t\tmalicious.push({ id });\n\t\t\t}\n\t\t\tif (result.migrateToPreRelease) {\n\t\t\t\tfor (const [unsupportedPreReleaseExtensionId, preReleaseExtensionInfo] of Object.entries(result.migrateToPreRelease)) {\n\t\t\t\t\tif (!preReleaseExtensionInfo.engine || isEngineValid(preReleaseExtensionInfo.engine, this.productService.version, this.productService.date)) {\n\t\t\t\t\t\tdeprecated[unsupportedPreReleaseExtensionId.toLowerCase()] = {\n\t\t\t\t\t\t\tdisallowInstall: true,\n\t\t\t\t\t\t\textension: {\n\t\t\t\t\t\t\t\tid: preReleaseExtensionInfo.id,\n\t\t\t\t\t\t\t\tdisplayName: preReleaseExtensionInfo.displayName,\n\t\t\t\t\t\t\t\tautoMigrate: { storage: !!preReleaseExtensionInfo.migrateStorage },\n\t\t\t\t\t\t\t\tpreRelease: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result.deprecated) {\n\t\t\t\tfor (const [deprecatedExtensionId, deprecationInfo] of Object.entries(result.deprecated)) {\n\t\t\t\t\tif (deprecationInfo) {\n\t\t\t\t\t\tdeprecated[deprecatedExtensionId.toLowerCase()] = isBoolean(deprecationInfo) ? {} : deprecationInfo;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result.search) {\n\t\t\t\tfor (const s of result.search) {\n\t\t\t\t\tsearch.push(s);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Array.isArray(result.extensionsEnabledWithPreRelease)) {\n\t\t\t\tfor (const id of result.extensionsEnabledWithPreRelease) {\n\t\t\t\t\textensionsEnabledWithPreRelease.push(id.toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { malicious, deprecated, search, extensionsEnabledWithPreRelease };\n\t}\n}\n\nexport class ExtensionGalleryService extends AbstractExtensionGalleryService {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper(storageService, requestService, logService, environmentService, telemetryService, fileService, productService, configurationService);\n\t}\n}\n\nexport class ExtensionGalleryServiceWithNoStorageService extends AbstractExtensionGalleryService {\n\n\tconstructor(\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper(undefined, requestService, logService, environmentService, telemetryService, fileService, productService, configurationService);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Flags", "FilterType", "criterium", "result", "query", "token", "extensions", "total"]
}
