{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionManagement.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { IPager } from \"../../../base/common/paging.js\";\nimport { Platform } from \"../../../base/common/platform.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { localize2 } from \"../../../nls.js\";\nimport {\n\ttype ExtensionType,\n\ttype IExtension,\n\ttype IExtensionManifest,\n\tTargetPlatform,\n} from \"../../extensions/common/extensions.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport const EXTENSION_IDENTIFIER_PATTERN =\n\t\"^([a-z0-9A-Z][a-z0-9-A-Z]*)\\\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$\";\nexport const EXTENSION_IDENTIFIER_REGEX = new RegExp(\n\tEXTENSION_IDENTIFIER_PATTERN,\n);\nexport const WEB_EXTENSION_TAG = \"__web_extension\";\nexport const EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT = \"skipWalkthrough\";\nexport const EXTENSION_INSTALL_SOURCE_CONTEXT = \"extensionInstallSource\";\nexport const EXTENSION_INSTALL_DEP_PACK_CONTEXT =\n\t\"dependecyOrPackExtensionInstall\";\nexport const EXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT =\n\t\"clientTargetPlatform\";\n\nexport enum ExtensionInstallSource {\n\tCOMMAND = \"command\",\n\tSETTINGS_SYNC = \"settingsSync\",\n}\n\nexport interface IProductVersion {\n\treadonly version: string;\n\treadonly date?: string;\n}\n\nexport function TargetPlatformToString(targetPlatform: TargetPlatform) {\n\tswitch (targetPlatform) {\n\t\tcase TargetPlatform.WIN32_X64:\n\t\t\treturn \"Windows 64 bit\";\n\t\tcase TargetPlatform.WIN32_ARM64:\n\t\t\treturn \"Windows ARM\";\n\n\t\tcase TargetPlatform.LINUX_X64:\n\t\t\treturn \"Linux 64 bit\";\n\t\tcase TargetPlatform.LINUX_ARM64:\n\t\t\treturn \"Linux ARM 64\";\n\t\tcase TargetPlatform.LINUX_ARMHF:\n\t\t\treturn \"Linux ARM\";\n\n\t\tcase TargetPlatform.ALPINE_X64:\n\t\t\treturn \"Alpine Linux 64 bit\";\n\t\tcase TargetPlatform.ALPINE_ARM64:\n\t\t\treturn \"Alpine ARM 64\";\n\n\t\tcase TargetPlatform.DARWIN_X64:\n\t\t\treturn \"Mac\";\n\t\tcase TargetPlatform.DARWIN_ARM64:\n\t\t\treturn \"Mac Silicon\";\n\n\t\tcase TargetPlatform.WEB:\n\t\t\treturn \"Web\";\n\n\t\tcase TargetPlatform.UNIVERSAL:\n\t\t\treturn TargetPlatform.UNIVERSAL;\n\t\tcase TargetPlatform.UNKNOWN:\n\t\t\treturn TargetPlatform.UNKNOWN;\n\t\tcase TargetPlatform.UNDEFINED:\n\t\t\treturn TargetPlatform.UNDEFINED;\n\t}\n}\n\nexport function toTargetPlatform(targetPlatform: string): TargetPlatform {\n\tswitch (targetPlatform) {\n\t\tcase TargetPlatform.WIN32_X64:\n\t\t\treturn TargetPlatform.WIN32_X64;\n\t\tcase TargetPlatform.WIN32_ARM64:\n\t\t\treturn TargetPlatform.WIN32_ARM64;\n\n\t\tcase TargetPlatform.LINUX_X64:\n\t\t\treturn TargetPlatform.LINUX_X64;\n\t\tcase TargetPlatform.LINUX_ARM64:\n\t\t\treturn TargetPlatform.LINUX_ARM64;\n\t\tcase TargetPlatform.LINUX_ARMHF:\n\t\t\treturn TargetPlatform.LINUX_ARMHF;\n\n\t\tcase TargetPlatform.ALPINE_X64:\n\t\t\treturn TargetPlatform.ALPINE_X64;\n\t\tcase TargetPlatform.ALPINE_ARM64:\n\t\t\treturn TargetPlatform.ALPINE_ARM64;\n\n\t\tcase TargetPlatform.DARWIN_X64:\n\t\t\treturn TargetPlatform.DARWIN_X64;\n\t\tcase TargetPlatform.DARWIN_ARM64:\n\t\t\treturn TargetPlatform.DARWIN_ARM64;\n\n\t\tcase TargetPlatform.WEB:\n\t\t\treturn TargetPlatform.WEB;\n\n\t\tcase TargetPlatform.UNIVERSAL:\n\t\t\treturn TargetPlatform.UNIVERSAL;\n\t\tdefault:\n\t\t\treturn TargetPlatform.UNKNOWN;\n\t}\n}\n\nexport function getTargetPlatform(\n\tplatform: Platform | \"alpine\",\n\tarch: string | undefined,\n): TargetPlatform {\n\tswitch (platform) {\n\t\tcase Platform.Windows:\n\t\t\tif (arch === \"x64\") {\n\t\t\t\treturn TargetPlatform.WIN32_X64;\n\t\t\t}\n\t\t\tif (arch === \"arm64\") {\n\t\t\t\treturn TargetPlatform.WIN32_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Linux:\n\t\t\tif (arch === \"x64\") {\n\t\t\t\treturn TargetPlatform.LINUX_X64;\n\t\t\t}\n\t\t\tif (arch === \"arm64\") {\n\t\t\t\treturn TargetPlatform.LINUX_ARM64;\n\t\t\t}\n\t\t\tif (arch === \"arm\") {\n\t\t\t\treturn TargetPlatform.LINUX_ARMHF;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase \"alpine\":\n\t\t\tif (arch === \"x64\") {\n\t\t\t\treturn TargetPlatform.ALPINE_X64;\n\t\t\t}\n\t\t\tif (arch === \"arm64\") {\n\t\t\t\treturn TargetPlatform.ALPINE_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Mac:\n\t\t\tif (arch === \"x64\") {\n\t\t\t\treturn TargetPlatform.DARWIN_X64;\n\t\t\t}\n\t\t\tif (arch === \"arm64\") {\n\t\t\t\treturn TargetPlatform.DARWIN_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Web:\n\t\t\treturn TargetPlatform.WEB;\n\t}\n}\n\nexport function isNotWebExtensionInWebTargetPlatform(\n\tallTargetPlatforms: TargetPlatform[],\n\tproductTargetPlatform: TargetPlatform,\n): boolean {\n\t// Not a web extension in web target platform\n\treturn (\n\t\tproductTargetPlatform === TargetPlatform.WEB &&\n\t\t!allTargetPlatforms.includes(TargetPlatform.WEB)\n\t);\n}\n\nexport function isTargetPlatformCompatible(\n\textensionTargetPlatform: TargetPlatform,\n\tallTargetPlatforms: TargetPlatform[],\n\tproductTargetPlatform: TargetPlatform,\n): boolean {\n\t// Not compatible when extension is not a web extension in web target platform\n\tif (\n\t\tisNotWebExtensionInWebTargetPlatform(\n\t\t\tallTargetPlatforms,\n\t\t\tproductTargetPlatform,\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\n\t// Compatible when extension target platform is not defined\n\tif (extensionTargetPlatform === TargetPlatform.UNDEFINED) {\n\t\treturn true;\n\t}\n\n\t// Compatible when extension target platform is universal\n\tif (extensionTargetPlatform === TargetPlatform.UNIVERSAL) {\n\t\treturn true;\n\t}\n\n\t// Not compatible when extension target platform is unknown\n\tif (extensionTargetPlatform === TargetPlatform.UNKNOWN) {\n\t\treturn false;\n\t}\n\n\t// Compatible when extension and product target platforms matches\n\tif (extensionTargetPlatform === productTargetPlatform) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport interface IGalleryExtensionProperties {\n\tdependencies?: string[];\n\textensionPack?: string[];\n\tengine?: string;\n\tenabledApiProposals?: string[];\n\tlocalizedLanguages?: string[];\n\ttargetPlatform: TargetPlatform;\n\tisPreReleaseVersion: boolean;\n\texecutesCode?: boolean;\n}\n\nexport interface IGalleryExtensionAsset {\n\turi: string;\n\tfallbackUri: string;\n}\n\nexport interface IGalleryExtensionAssets {\n\tmanifest: IGalleryExtensionAsset | null;\n\treadme: IGalleryExtensionAsset | null;\n\tchangelog: IGalleryExtensionAsset | null;\n\tlicense: IGalleryExtensionAsset | null;\n\trepository: IGalleryExtensionAsset | null;\n\tdownload: IGalleryExtensionAsset;\n\ticon: IGalleryExtensionAsset | null;\n\tsignature: IGalleryExtensionAsset | null;\n\tcoreTranslations: [string, IGalleryExtensionAsset][];\n}\n\nexport function isIExtensionIdentifier(\n\tthing: any,\n): thing is IExtensionIdentifier {\n\treturn (\n\t\tthing &&\n\t\ttypeof thing === \"object\" &&\n\t\ttypeof thing.id === \"string\" &&\n\t\t(!thing.uuid || typeof thing.uuid === \"string\")\n\t);\n}\n\nexport interface IExtensionIdentifier {\n\tid: string;\n\tuuid?: string;\n}\n\nexport interface IGalleryExtensionIdentifier extends IExtensionIdentifier {\n\tuuid: string;\n}\n\nexport interface IGalleryExtensionVersion {\n\tversion: string;\n\tdate: string;\n\tisPreReleaseVersion: boolean;\n}\n\nexport interface IGalleryExtension {\n\ttype: \"gallery\";\n\tname: string;\n\tidentifier: IGalleryExtensionIdentifier;\n\tversion: string;\n\tdisplayName: string;\n\tpublisherId: string;\n\tpublisher: string;\n\tpublisherDisplayName: string;\n\tpublisherDomain?: { link: string; verified: boolean };\n\tpublisherSponsorLink?: string;\n\tdescription: string;\n\tinstallCount: number;\n\trating: number;\n\tratingCount: number;\n\tcategories: readonly string[];\n\ttags: readonly string[];\n\treleaseDate: number;\n\tlastUpdated: number;\n\tpreview: boolean;\n\thasPreReleaseVersion: boolean;\n\thasReleaseVersion: boolean;\n\tisSigned: boolean;\n\tallTargetPlatforms: TargetPlatform[];\n\tassets: IGalleryExtensionAssets;\n\tproperties: IGalleryExtensionProperties;\n\ttelemetryData?: any;\n\tqueryContext?: IStringDictionary<any>;\n\tsupportLink?: string;\n}\n\nexport type InstallSource = \"gallery\" | \"vsix\" | \"resource\";\n\nexport interface IGalleryMetadata {\n\tid: string;\n\tpublisherId: string;\n\tpublisherDisplayName: string;\n\tisPreReleaseVersion: boolean;\n\ttargetPlatform?: TargetPlatform;\n}\n\nexport type Metadata = Partial<\n\tIGalleryMetadata & {\n\t\tisApplicationScoped: boolean;\n\t\tisMachineScoped: boolean;\n\t\tisBuiltin: boolean;\n\t\tisSystem: boolean;\n\t\tupdated: boolean;\n\t\tpreRelease: boolean;\n\t\thasPreReleaseVersion: boolean;\n\t\tinstalledTimestamp: number;\n\t\tpinned: boolean;\n\t\tsource: InstallSource;\n\t}\n>;\n\nexport interface ILocalExtension extends IExtension {\n\tisWorkspaceScoped: boolean;\n\tisMachineScoped: boolean;\n\tisApplicationScoped: boolean;\n\tpublisherId: string | null;\n\tinstalledTimestamp?: number;\n\tisPreReleaseVersion: boolean;\n\thasPreReleaseVersion: boolean;\n\tpreRelease: boolean;\n\tupdated: boolean;\n\tpinned: boolean;\n\tsource: InstallSource;\n}\n\nexport enum SortBy {\n\tNoneOrRelevance = 0,\n\tLastUpdatedDate = 1,\n\tTitle = 2,\n\tPublisherName = 3,\n\tInstallCount = 4,\n\tPublishedDate = 10,\n\tAverageRating = 6,\n\tWeightedRating = 12,\n}\n\nexport enum SortOrder {\n\tDefault = 0,\n\tAscending = 1,\n\tDescending = 2,\n}\n\nexport interface IQueryOptions {\n\ttext?: string;\n\tids?: string[];\n\tnames?: string[];\n\tpageSize?: number;\n\tsortBy?: SortBy;\n\tsortOrder?: SortOrder;\n\tsource?: string;\n\tincludePreRelease?: boolean;\n\tproductVersion?: IProductVersion;\n}\n\nexport enum StatisticType {\n\tInstall = \"install\",\n\tUninstall = \"uninstall\",\n}\n\nexport interface IDeprecationInfo {\n\treadonly disallowInstall?: boolean;\n\treadonly extension?: {\n\t\treadonly id: string;\n\t\treadonly displayName: string;\n\t\treadonly autoMigrate?: { readonly storage: boolean };\n\t\treadonly preRelease?: boolean;\n\t};\n\treadonly settings?: readonly string[];\n\treadonly additionalInfo?: string;\n}\n\nexport interface ISearchPrefferedResults {\n\treadonly query?: string;\n\treadonly preferredResults?: string[];\n}\n\nexport interface IExtensionsControlManifest {\n\treadonly malicious: IExtensionIdentifier[];\n\treadonly deprecated: IStringDictionary<IDeprecationInfo>;\n\treadonly search: ISearchPrefferedResults[];\n\treadonly extensionsEnabledWithPreRelease?: string[];\n}\n\nexport enum InstallOperation {\n\tNone = 1,\n\tInstall = 2,\n\tUpdate = 3,\n\tMigrate = 4,\n}\n\nexport interface ITranslation {\n\tcontents: { [key: string]: {} };\n}\n\nexport interface IExtensionInfo extends IExtensionIdentifier {\n\tversion?: string;\n\tpreRelease?: boolean;\n\thasPreRelease?: boolean;\n}\n\nexport interface IExtensionQueryOptions {\n\ttargetPlatform?: TargetPlatform;\n\tproductVersion?: IProductVersion;\n\tcompatible?: boolean;\n\tqueryAllVersions?: boolean;\n\tsource?: string;\n}\n\nexport const IExtensionGalleryService =\n\tcreateDecorator<IExtensionGalleryService>(\"extensionGalleryService\");\n\n/**\n * Service to interact with the Visual Studio Code Marketplace to get extensions.\n * @throws Error if the Marketplace is not enabled or not reachable.\n */\nexport interface IExtensionGalleryService {\n\treadonly _serviceBrand: undefined;\n\tisEnabled(): boolean;\n\tquery(\n\t\toptions: IQueryOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IPager<IGalleryExtension>>;\n\tgetExtensions(\n\t\textensionInfos: ReadonlyArray<IExtensionInfo>,\n\t\ttoken: CancellationToken,\n\t): Promise<IGalleryExtension[]>;\n\tgetExtensions(\n\t\textensionInfos: ReadonlyArray<IExtensionInfo>,\n\t\toptions: IExtensionQueryOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IGalleryExtension[]>;\n\tisExtensionCompatible(\n\t\textension: IGalleryExtension,\n\t\tincludePreRelease: boolean,\n\t\ttargetPlatform: TargetPlatform,\n\t\tproductVersion?: IProductVersion,\n\t): Promise<boolean>;\n\tgetCompatibleExtension(\n\t\textension: IGalleryExtension,\n\t\tincludePreRelease: boolean,\n\t\ttargetPlatform: TargetPlatform,\n\t\tproductVersion?: IProductVersion,\n\t): Promise<IGalleryExtension | null>;\n\tgetAllCompatibleVersions(\n\t\textensionIdentifier: IExtensionIdentifier,\n\t\tincludePreRelease: boolean,\n\t\ttargetPlatform: TargetPlatform,\n\t): Promise<IGalleryExtensionVersion[]>;\n\tdownload(\n\t\textension: IGalleryExtension,\n\t\tlocation: URI,\n\t\toperation: InstallOperation,\n\t): Promise<void>;\n\tdownloadSignatureArchive(\n\t\textension: IGalleryExtension,\n\t\tlocation: URI,\n\t): Promise<void>;\n\treportStatistic(\n\t\tpublisher: string,\n\t\tname: string,\n\t\tversion: string,\n\t\ttype: StatisticType,\n\t): Promise<void>;\n\tgetReadme(\n\t\textension: IGalleryExtension,\n\t\ttoken: CancellationToken,\n\t): Promise<string>;\n\tgetManifest(\n\t\textension: IGalleryExtension,\n\t\ttoken: CancellationToken,\n\t): Promise<IExtensionManifest | null>;\n\tgetChangelog(\n\t\textension: IGalleryExtension,\n\t\ttoken: CancellationToken,\n\t): Promise<string>;\n\tgetCoreTranslation(\n\t\textension: IGalleryExtension,\n\t\tlanguageId: string,\n\t): Promise<ITranslation | null>;\n\tgetExtensionsControlManifest(): Promise<IExtensionsControlManifest>;\n}\n\nexport interface InstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly source: URI | IGalleryExtension;\n\treadonly profileLocation: URI;\n\treadonly applicationScoped?: boolean;\n\treadonly workspaceScoped?: boolean;\n}\n\nexport interface InstallExtensionResult {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly operation: InstallOperation;\n\treadonly source?: URI | IGalleryExtension;\n\treadonly local?: ILocalExtension;\n\treadonly error?: Error;\n\treadonly context?: IStringDictionary<any>;\n\treadonly profileLocation: URI;\n\treadonly applicationScoped?: boolean;\n\treadonly workspaceScoped?: boolean;\n}\n\nexport interface UninstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly profileLocation: URI;\n\treadonly applicationScoped?: boolean;\n\treadonly workspaceScoped?: boolean;\n}\n\nexport interface DidUninstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly error?: string;\n\treadonly profileLocation: URI;\n\treadonly applicationScoped?: boolean;\n\treadonly workspaceScoped?: boolean;\n}\n\nexport interface DidUpdateExtensionMetadata {\n\treadonly profileLocation: URI;\n\treadonly local: ILocalExtension;\n}\n\nexport enum ExtensionGalleryErrorCode {\n\tTimeout = \"Timeout\",\n\tCancelled = \"Cancelled\",\n\tFailed = \"Failed\",\n\tDownloadFailedWriting = \"DownloadFailedWriting\",\n\tOffline = \"Offline\",\n}\n\nexport class ExtensionGalleryError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\treadonly code: ExtensionGalleryErrorCode,\n\t) {\n\t\tsuper(message);\n\t\tthis.name = code;\n\t}\n}\n\nexport enum ExtensionManagementErrorCode {\n\tUnsupported = \"Unsupported\",\n\tDeprecated = \"Deprecated\",\n\tMalicious = \"Malicious\",\n\tIncompatible = \"Incompatible\",\n\tIncompatibleApi = \"IncompatibleApi\",\n\tIncompatibleTargetPlatform = \"IncompatibleTargetPlatform\",\n\tReleaseVersionNotFound = \"ReleaseVersionNotFound\",\n\tInvalid = \"Invalid\",\n\tDownload = \"Download\",\n\tDownloadSignature = \"DownloadSignature\",\n\tDownloadFailedWriting = ExtensionGalleryErrorCode.DownloadFailedWriting,\n\tUpdateMetadata = \"UpdateMetadata\",\n\tExtract = \"Extract\",\n\tScanning = \"Scanning\",\n\tScanningExtension = \"ScanningExtension\",\n\tReadUninstalled = \"ReadUninstalled\",\n\tUnsetUninstalled = \"UnsetUninstalled\",\n\tDelete = \"Delete\",\n\tRename = \"Rename\",\n\tIntializeDefaultProfile = \"IntializeDefaultProfile\",\n\tAddToProfile = \"AddToProfile\",\n\tInstalledExtensionNotFound = \"InstalledExtensionNotFound\",\n\tPostInstall = \"PostInstall\",\n\tCorruptZip = \"CorruptZip\",\n\tIncompleteZip = \"IncompleteZip\",\n\tPackageNotSigned = \"PackageNotSigned\",\n\tSignatureVerificationInternal = \"SignatureVerificationInternal\",\n\tSignatureVerificationFailed = \"SignatureVerificationFailed\",\n\tNotAllowed = \"NotAllowed\",\n\tGallery = \"Gallery\",\n\tCancelled = \"Cancelled\",\n\tUnknown = \"Unknown\",\n\tInternal = \"Internal\",\n}\n\nexport enum ExtensionSignatureVerificationCode {\n\tSuccess = \"Success\",\n\tRequiredArgumentMissing = \"RequiredArgumentMissing\", // A required argument is missing.\n\tInvalidArgument = \"InvalidArgument\", // An argument is invalid.\n\tPackageIsUnreadable = \"PackageIsUnreadable\", // The extension package is unreadable.\n\tUnhandledException = \"UnhandledException\", // An unhandled exception occurred.\n\tSignatureManifestIsMissing = \"SignatureManifestIsMissing\", // The extension is missing a signature manifest file (.signature.manifest).\n\tSignatureManifestIsUnreadable = \"SignatureManifestIsUnreadable\", // The signature manifest is unreadable.\n\tSignatureIsMissing = \"SignatureIsMissing\", // The extension is missing a signature file (.signature.p7s).\n\tSignatureIsUnreadable = \"SignatureIsUnreadable\", // The signature is unreadable.\n\tCertificateIsUnreadable = \"CertificateIsUnreadable\", // The certificate is unreadable.\n\tSignatureArchiveIsUnreadable = \"SignatureArchiveIsUnreadable\",\n\tFileAlreadyExists = \"FileAlreadyExists\", // The output file already exists.\n\tSignatureArchiveIsInvalidZip = \"SignatureArchiveIsInvalidZip\",\n\tSignatureArchiveHasSameSignatureFile = \"SignatureArchiveHasSameSignatureFile\", // The signature archive has the same signature file.\n\tPackageIntegrityCheckFailed = \"PackageIntegrityCheckFailed\", // The package integrity check failed.\n\tSignatureIsInvalid = \"SignatureIsInvalid\", // The extension has an invalid signature file (.signature.p7s).\n\tSignatureManifestIsInvalid = \"SignatureManifestIsInvalid\", // The extension has an invalid signature manifest file (.signature.manifest).\n\tSignatureIntegrityCheckFailed = \"SignatureIntegrityCheckFailed\", // The extension's signature integrity check failed.  Extension integrity is suspect.\n\tEntryIsMissing = \"EntryIsMissing\", // An entry referenced in the signature manifest was not found in the extension.\n\tEntryIsTampered = \"EntryIsTampered\", // The integrity check for an entry referenced in the signature manifest failed.\n\tUntrusted = \"Untrusted\", // An X.509 certificate in the extension signature is untrusted.\n\tCertificateRevoked = \"CertificateRevoked\", // An X.509 certificate in the extension signature has been revoked.\n\tSignatureIsNotValid = \"SignatureIsNotValid\", // The extension signature is invalid.\n\tUnknownError = \"UnknownError\", // An unknown error occurred.\n\tPackageIsInvalidZip = \"PackageIsInvalidZip\", // The extension package is not valid ZIP format.\n\tSignatureArchiveHasTooManyEntries = \"SignatureArchiveHasTooManyEntries\", // The signature archive has too many entries.\n}\n\nexport class ExtensionManagementError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\treadonly code: ExtensionManagementErrorCode,\n\t) {\n\t\tsuper(message);\n\t\tthis.name = code;\n\t}\n}\n\nexport type InstallOptions = {\n\tisBuiltin?: boolean;\n\tisWorkspaceScoped?: boolean;\n\tisMachineScoped?: boolean;\n\tisApplicationScoped?: boolean;\n\tpinned?: boolean;\n\tdonotIncludePackAndDependencies?: boolean;\n\tinstallGivenVersion?: boolean;\n\tpreRelease?: boolean;\n\tinstallPreReleaseVersion?: boolean;\n\tdonotVerifySignature?: boolean;\n\toperation?: InstallOperation;\n\tprofileLocation?: URI;\n\tinstallOnlyNewlyAddedFromExtensionPack?: boolean;\n\tproductVersion?: IProductVersion;\n\tkeepExisting?: boolean;\n\t/**\n\t * Context passed through to InstallExtensionResult\n\t */\n\tcontext?: IStringDictionary<any>;\n};\n\nexport type UninstallOptions = {\n\treadonly profileLocation?: URI;\n\treadonly donotIncludePack?: boolean;\n\treadonly donotCheckDependents?: boolean;\n\treadonly versionOnly?: boolean;\n\treadonly remove?: boolean;\n};\n\nexport interface IExtensionManagementParticipant {\n\tpostInstall(\n\t\tlocal: ILocalExtension,\n\t\tsource: URI | IGalleryExtension,\n\t\toptions: InstallOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<void>;\n\tpostUninstall(\n\t\tlocal: ILocalExtension,\n\t\toptions: UninstallOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<void>;\n}\n\nexport type InstallExtensionInfo = {\n\treadonly extension: IGalleryExtension;\n\treadonly options: InstallOptions;\n};\nexport type UninstallExtensionInfo = {\n\treadonly extension: ILocalExtension;\n\treadonly options?: UninstallOptions;\n};\n\nexport const IExtensionManagementService =\n\tcreateDecorator<IExtensionManagementService>(\"extensionManagementService\");\nexport interface IExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tonInstallExtension: Event<InstallExtensionEvent>;\n\tonDidInstallExtensions: Event<readonly InstallExtensionResult[]>;\n\tonUninstallExtension: Event<UninstallExtensionEvent>;\n\tonDidUninstallExtension: Event<DidUninstallExtensionEvent>;\n\tonDidUpdateExtensionMetadata: Event<DidUpdateExtensionMetadata>;\n\n\tzip(extension: ILocalExtension): Promise<URI>;\n\tgetManifest(vsix: URI): Promise<IExtensionManifest>;\n\tinstall(vsix: URI, options?: InstallOptions): Promise<ILocalExtension>;\n\tcanInstall(extension: IGalleryExtension): Promise<boolean>;\n\tinstallFromGallery(\n\t\textension: IGalleryExtension,\n\t\toptions?: InstallOptions,\n\t): Promise<ILocalExtension>;\n\tinstallGalleryExtensions(\n\t\textensions: InstallExtensionInfo[],\n\t): Promise<InstallExtensionResult[]>;\n\tinstallFromLocation(\n\t\tlocation: URI,\n\t\tprofileLocation: URI,\n\t): Promise<ILocalExtension>;\n\tinstallExtensionsFromProfile(\n\t\textensions: IExtensionIdentifier[],\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t): Promise<ILocalExtension[]>;\n\tuninstall(\n\t\textension: ILocalExtension,\n\t\toptions?: UninstallOptions,\n\t): Promise<void>;\n\tuninstallExtensions(extensions: UninstallExtensionInfo[]): Promise<void>;\n\ttoggleAppliationScope(\n\t\textension: ILocalExtension,\n\t\tfromProfileLocation: URI,\n\t): Promise<ILocalExtension>;\n\treinstallFromGallery(extension: ILocalExtension): Promise<ILocalExtension>;\n\tgetInstalled(\n\t\ttype?: ExtensionType,\n\t\tprofileLocation?: URI,\n\t\tproductVersion?: IProductVersion,\n\t): Promise<ILocalExtension[]>;\n\tgetExtensionsControlManifest(): Promise<IExtensionsControlManifest>;\n\tcopyExtensions(\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t): Promise<void>;\n\tupdateMetadata(\n\t\tlocal: ILocalExtension,\n\t\tmetadata: Partial<Metadata>,\n\t\tprofileLocation: URI,\n\t): Promise<ILocalExtension>;\n\tresetPinnedStateForAllUserExtensions(pinned: boolean): Promise<void>;\n\n\tdownload(\n\t\textension: IGalleryExtension,\n\t\toperation: InstallOperation,\n\t\tdonotVerifySignature: boolean,\n\t): Promise<URI>;\n\n\tregisterParticipant(pariticipant: IExtensionManagementParticipant): void;\n\tgetTargetPlatform(): Promise<TargetPlatform>;\n\n\tcleanUp(): Promise<void>;\n}\n\nexport const DISABLED_EXTENSIONS_STORAGE_PATH =\n\t\"extensionsIdentifiers/disabled\";\nexport const ENABLED_EXTENSIONS_STORAGE_PATH = \"extensionsIdentifiers/enabled\";\nexport const IGlobalExtensionEnablementService =\n\tcreateDecorator<IGlobalExtensionEnablementService>(\n\t\t\"IGlobalExtensionEnablementService\",\n\t);\n\nexport interface IGlobalExtensionEnablementService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChangeEnablement: Event<{\n\t\treadonly extensions: IExtensionIdentifier[];\n\t\treadonly source?: string;\n\t}>;\n\n\tgetDisabledExtensions(): IExtensionIdentifier[];\n\tenableExtension(\n\t\textension: IExtensionIdentifier,\n\t\tsource?: string,\n\t): Promise<boolean>;\n\tdisableExtension(\n\t\textension: IExtensionIdentifier,\n\t\tsource?: string,\n\t): Promise<boolean>;\n}\n\nexport type IConfigBasedExtensionTip = {\n\treadonly extensionId: string;\n\treadonly extensionName: string;\n\treadonly isExtensionPack: boolean;\n\treadonly configName: string;\n\treadonly important: boolean;\n\treadonly whenNotInstalled?: string[];\n};\n\nexport type IExecutableBasedExtensionTip = {\n\treadonly extensionId: string;\n\treadonly extensionName: string;\n\treadonly isExtensionPack: boolean;\n\treadonly exeName: string;\n\treadonly exeFriendlyName: string;\n\treadonly windowsPath?: string;\n\treadonly whenNotInstalled?: string[];\n};\n\nexport const IExtensionTipsService = createDecorator<IExtensionTipsService>(\n\t\"IExtensionTipsService\",\n);\nexport interface IExtensionTipsService {\n\treadonly _serviceBrand: undefined;\n\n\tgetConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]>;\n\tgetImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]>;\n\tgetOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]>;\n}\n\nexport const ExtensionsLocalizedLabel = localize2(\"extensions\", \"Extensions\");\nexport const PreferencesLocalizedLabel = localize2(\n\t\"preferences\",\n\t\"Preferences\",\n);\n"],
  "mappings": "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",
  "names": ["ExtensionInstallSource", "SortBy", "SortOrder", "StatisticType", "InstallOperation", "ExtensionGalleryErrorCode", "ExtensionManagementErrorCode", "ExtensionSignatureVerificationCode"]
}
