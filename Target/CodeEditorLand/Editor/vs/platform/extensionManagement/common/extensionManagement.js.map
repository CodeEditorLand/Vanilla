{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionManagement.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IPager } from '../../../base/common/paging.js';\nimport { Platform } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize2 } from '../../../nls.js';\nimport { ExtensionType, IExtension, IExtensionManifest, TargetPlatform } from '../../extensions/common/extensions.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const EXTENSION_IDENTIFIER_PATTERN = '^([a-z0-9A-Z][a-z0-9-A-Z]*)\\\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$';\nexport const EXTENSION_IDENTIFIER_REGEX = new RegExp(EXTENSION_IDENTIFIER_PATTERN);\nexport const WEB_EXTENSION_TAG = '__web_extension';\nexport const EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT = 'skipWalkthrough';\nexport const EXTENSION_INSTALL_SOURCE_CONTEXT = 'extensionInstallSource';\nexport const EXTENSION_INSTALL_DEP_PACK_CONTEXT = 'dependecyOrPackExtensionInstall';\nexport const EXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT = 'clientTargetPlatform';\n\nexport const enum ExtensionInstallSource {\n\tCOMMAND = 'command',\n\tSETTINGS_SYNC = 'settingsSync',\n}\n\nexport interface IProductVersion {\n\treadonly version: string;\n\treadonly date?: string;\n}\n\nexport function TargetPlatformToString(targetPlatform: TargetPlatform) {\n\tswitch (targetPlatform) {\n\t\tcase TargetPlatform.WIN32_X64: return 'Windows 64 bit';\n\t\tcase TargetPlatform.WIN32_ARM64: return 'Windows ARM';\n\n\t\tcase TargetPlatform.LINUX_X64: return 'Linux 64 bit';\n\t\tcase TargetPlatform.LINUX_ARM64: return 'Linux ARM 64';\n\t\tcase TargetPlatform.LINUX_ARMHF: return 'Linux ARM';\n\n\t\tcase TargetPlatform.ALPINE_X64: return 'Alpine Linux 64 bit';\n\t\tcase TargetPlatform.ALPINE_ARM64: return 'Alpine ARM 64';\n\n\t\tcase TargetPlatform.DARWIN_X64: return 'Mac';\n\t\tcase TargetPlatform.DARWIN_ARM64: return 'Mac Silicon';\n\n\t\tcase TargetPlatform.WEB: return 'Web';\n\n\t\tcase TargetPlatform.UNIVERSAL: return TargetPlatform.UNIVERSAL;\n\t\tcase TargetPlatform.UNKNOWN: return TargetPlatform.UNKNOWN;\n\t\tcase TargetPlatform.UNDEFINED: return TargetPlatform.UNDEFINED;\n\t}\n}\n\nexport function toTargetPlatform(targetPlatform: string): TargetPlatform {\n\tswitch (targetPlatform) {\n\t\tcase TargetPlatform.WIN32_X64: return TargetPlatform.WIN32_X64;\n\t\tcase TargetPlatform.WIN32_ARM64: return TargetPlatform.WIN32_ARM64;\n\n\t\tcase TargetPlatform.LINUX_X64: return TargetPlatform.LINUX_X64;\n\t\tcase TargetPlatform.LINUX_ARM64: return TargetPlatform.LINUX_ARM64;\n\t\tcase TargetPlatform.LINUX_ARMHF: return TargetPlatform.LINUX_ARMHF;\n\n\t\tcase TargetPlatform.ALPINE_X64: return TargetPlatform.ALPINE_X64;\n\t\tcase TargetPlatform.ALPINE_ARM64: return TargetPlatform.ALPINE_ARM64;\n\n\t\tcase TargetPlatform.DARWIN_X64: return TargetPlatform.DARWIN_X64;\n\t\tcase TargetPlatform.DARWIN_ARM64: return TargetPlatform.DARWIN_ARM64;\n\n\t\tcase TargetPlatform.WEB: return TargetPlatform.WEB;\n\n\t\tcase TargetPlatform.UNIVERSAL: return TargetPlatform.UNIVERSAL;\n\t\tdefault: return TargetPlatform.UNKNOWN;\n\t}\n}\n\nexport function getTargetPlatform(platform: Platform | 'alpine', arch: string | undefined): TargetPlatform {\n\tswitch (platform) {\n\t\tcase Platform.Windows:\n\t\t\tif (arch === 'x64') {\n\t\t\t\treturn TargetPlatform.WIN32_X64;\n\t\t\t}\n\t\t\tif (arch === 'arm64') {\n\t\t\t\treturn TargetPlatform.WIN32_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Linux:\n\t\t\tif (arch === 'x64') {\n\t\t\t\treturn TargetPlatform.LINUX_X64;\n\t\t\t}\n\t\t\tif (arch === 'arm64') {\n\t\t\t\treturn TargetPlatform.LINUX_ARM64;\n\t\t\t}\n\t\t\tif (arch === 'arm') {\n\t\t\t\treturn TargetPlatform.LINUX_ARMHF;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase 'alpine':\n\t\t\tif (arch === 'x64') {\n\t\t\t\treturn TargetPlatform.ALPINE_X64;\n\t\t\t}\n\t\t\tif (arch === 'arm64') {\n\t\t\t\treturn TargetPlatform.ALPINE_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Mac:\n\t\t\tif (arch === 'x64') {\n\t\t\t\treturn TargetPlatform.DARWIN_X64;\n\t\t\t}\n\t\t\tif (arch === 'arm64') {\n\t\t\t\treturn TargetPlatform.DARWIN_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Web: return TargetPlatform.WEB;\n\t}\n}\n\nexport function isNotWebExtensionInWebTargetPlatform(allTargetPlatforms: TargetPlatform[], productTargetPlatform: TargetPlatform): boolean {\n\t// Not a web extension in web target platform\n\treturn productTargetPlatform === TargetPlatform.WEB && !allTargetPlatforms.includes(TargetPlatform.WEB);\n}\n\nexport function isTargetPlatformCompatible(extensionTargetPlatform: TargetPlatform, allTargetPlatforms: TargetPlatform[], productTargetPlatform: TargetPlatform): boolean {\n\t// Not compatible when extension is not a web extension in web target platform\n\tif (isNotWebExtensionInWebTargetPlatform(allTargetPlatforms, productTargetPlatform)) {\n\t\treturn false;\n\t}\n\n\t// Compatible when extension target platform is not defined\n\tif (extensionTargetPlatform === TargetPlatform.UNDEFINED) {\n\t\treturn true;\n\t}\n\n\t// Compatible when extension target platform is universal\n\tif (extensionTargetPlatform === TargetPlatform.UNIVERSAL) {\n\t\treturn true;\n\t}\n\n\t// Not compatible when extension target platform is unknown\n\tif (extensionTargetPlatform === TargetPlatform.UNKNOWN) {\n\t\treturn false;\n\t}\n\n\t// Compatible when extension and product target platforms matches\n\tif (extensionTargetPlatform === productTargetPlatform) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport interface IGalleryExtensionProperties {\n\tdependencies?: string[];\n\textensionPack?: string[];\n\tengine?: string;\n\tenabledApiProposals?: string[];\n\tlocalizedLanguages?: string[];\n\ttargetPlatform: TargetPlatform;\n\tisPreReleaseVersion: boolean;\n\texecutesCode?: boolean;\n}\n\nexport interface IGalleryExtensionAsset {\n\turi: string;\n\tfallbackUri: string;\n}\n\nexport interface IGalleryExtensionAssets {\n\tmanifest: IGalleryExtensionAsset | null;\n\treadme: IGalleryExtensionAsset | null;\n\tchangelog: IGalleryExtensionAsset | null;\n\tlicense: IGalleryExtensionAsset | null;\n\trepository: IGalleryExtensionAsset | null;\n\tdownload: IGalleryExtensionAsset;\n\ticon: IGalleryExtensionAsset | null;\n\tsignature: IGalleryExtensionAsset | null;\n\tcoreTranslations: [string, IGalleryExtensionAsset][];\n}\n\nexport function isIExtensionIdentifier(thing: any): thing is IExtensionIdentifier {\n\treturn thing\n\t\t&& typeof thing === 'object'\n\t\t&& typeof thing.id === 'string'\n\t\t&& (!thing.uuid || typeof thing.uuid === 'string');\n}\n\nexport interface IExtensionIdentifier {\n\tid: string;\n\tuuid?: string;\n}\n\nexport interface IGalleryExtensionIdentifier extends IExtensionIdentifier {\n\tuuid: string;\n}\n\nexport interface IGalleryExtensionVersion {\n\tversion: string;\n\tdate: string;\n\tisPreReleaseVersion: boolean;\n}\n\nexport interface IGalleryExtension {\n\ttype: 'gallery';\n\tname: string;\n\tidentifier: IGalleryExtensionIdentifier;\n\tversion: string;\n\tdisplayName: string;\n\tpublisherId: string;\n\tpublisher: string;\n\tpublisherDisplayName: string;\n\tpublisherDomain?: { link: string; verified: boolean };\n\tpublisherSponsorLink?: string;\n\tdescription: string;\n\tinstallCount: number;\n\trating: number;\n\tratingCount: number;\n\tcategories: readonly string[];\n\ttags: readonly string[];\n\treleaseDate: number;\n\tlastUpdated: number;\n\tpreview: boolean;\n\thasPreReleaseVersion: boolean;\n\thasReleaseVersion: boolean;\n\tisSigned: boolean;\n\tallTargetPlatforms: TargetPlatform[];\n\tassets: IGalleryExtensionAssets;\n\tproperties: IGalleryExtensionProperties;\n\ttelemetryData?: any;\n\tqueryContext?: IStringDictionary<any>;\n\tsupportLink?: string;\n}\n\nexport type InstallSource = 'gallery' | 'vsix' | 'resource';\n\nexport interface IGalleryMetadata {\n\tid: string;\n\tpublisherId: string;\n\tpublisherDisplayName: string;\n\tisPreReleaseVersion: boolean;\n\ttargetPlatform?: TargetPlatform;\n}\n\nexport type Metadata = Partial<IGalleryMetadata & {\n\tisApplicationScoped: boolean;\n\tisMachineScoped: boolean;\n\tisBuiltin: boolean;\n\tisSystem: boolean;\n\tupdated: boolean;\n\tpreRelease: boolean;\n\thasPreReleaseVersion: boolean;\n\tinstalledTimestamp: number;\n\tpinned: boolean;\n\tsource: InstallSource;\n}>;\n\nexport interface ILocalExtension extends IExtension {\n\tisWorkspaceScoped: boolean;\n\tisMachineScoped: boolean;\n\tisApplicationScoped: boolean;\n\tpublisherId: string | null;\n\tinstalledTimestamp?: number;\n\tisPreReleaseVersion: boolean;\n\thasPreReleaseVersion: boolean;\n\tpreRelease: boolean;\n\tupdated: boolean;\n\tpinned: boolean;\n\tsource: InstallSource;\n}\n\nexport const enum SortBy {\n\tNoneOrRelevance = 0,\n\tLastUpdatedDate = 1,\n\tTitle = 2,\n\tPublisherName = 3,\n\tInstallCount = 4,\n\tPublishedDate = 10,\n\tAverageRating = 6,\n\tWeightedRating = 12\n}\n\nexport const enum SortOrder {\n\tDefault = 0,\n\tAscending = 1,\n\tDescending = 2\n}\n\nexport interface IQueryOptions {\n\ttext?: string;\n\tids?: string[];\n\tnames?: string[];\n\tpageSize?: number;\n\tsortBy?: SortBy;\n\tsortOrder?: SortOrder;\n\tsource?: string;\n\tincludePreRelease?: boolean;\n\tproductVersion?: IProductVersion;\n}\n\nexport const enum StatisticType {\n\tInstall = 'install',\n\tUninstall = 'uninstall'\n}\n\nexport interface IDeprecationInfo {\n\treadonly disallowInstall?: boolean;\n\treadonly extension?: {\n\t\treadonly id: string;\n\t\treadonly displayName: string;\n\t\treadonly autoMigrate?: { readonly storage: boolean };\n\t\treadonly preRelease?: boolean;\n\t};\n\treadonly settings?: readonly string[];\n\treadonly additionalInfo?: string;\n}\n\nexport interface ISearchPrefferedResults {\n\treadonly query?: string;\n\treadonly preferredResults?: string[];\n}\n\nexport interface IExtensionsControlManifest {\n\treadonly malicious: IExtensionIdentifier[];\n\treadonly deprecated: IStringDictionary<IDeprecationInfo>;\n\treadonly search: ISearchPrefferedResults[];\n\treadonly extensionsEnabledWithPreRelease?: string[];\n}\n\nexport const enum InstallOperation {\n\tNone = 1,\n\tInstall,\n\tUpdate,\n\tMigrate,\n}\n\nexport interface ITranslation {\n\tcontents: { [key: string]: {} };\n}\n\nexport interface IExtensionInfo extends IExtensionIdentifier {\n\tversion?: string;\n\tpreRelease?: boolean;\n\thasPreRelease?: boolean;\n}\n\nexport interface IExtensionQueryOptions {\n\ttargetPlatform?: TargetPlatform;\n\tproductVersion?: IProductVersion;\n\tcompatible?: boolean;\n\tqueryAllVersions?: boolean;\n\tsource?: string;\n}\n\nexport const IExtensionGalleryService = createDecorator<IExtensionGalleryService>('extensionGalleryService');\n\n/**\n * Service to interact with the Visual Studio Code Marketplace to get extensions.\n * @throws Error if the Marketplace is not enabled or not reachable.\n */\nexport interface IExtensionGalleryService {\n\treadonly _serviceBrand: undefined;\n\tisEnabled(): boolean;\n\tquery(options: IQueryOptions, token: CancellationToken): Promise<IPager<IGalleryExtension>>;\n\tgetExtensions(extensionInfos: ReadonlyArray<IExtensionInfo>, token: CancellationToken): Promise<IGalleryExtension[]>;\n\tgetExtensions(extensionInfos: ReadonlyArray<IExtensionInfo>, options: IExtensionQueryOptions, token: CancellationToken): Promise<IGalleryExtension[]>;\n\tisExtensionCompatible(extension: IGalleryExtension, includePreRelease: boolean, targetPlatform: TargetPlatform, productVersion?: IProductVersion): Promise<boolean>;\n\tgetCompatibleExtension(extension: IGalleryExtension, includePreRelease: boolean, targetPlatform: TargetPlatform, productVersion?: IProductVersion): Promise<IGalleryExtension | null>;\n\tgetAllCompatibleVersions(extensionIdentifier: IExtensionIdentifier, includePreRelease: boolean, targetPlatform: TargetPlatform): Promise<IGalleryExtensionVersion[]>;\n\tdownload(extension: IGalleryExtension, location: URI, operation: InstallOperation): Promise<void>;\n\tdownloadSignatureArchive(extension: IGalleryExtension, location: URI): Promise<void>;\n\treportStatistic(publisher: string, name: string, version: string, type: StatisticType): Promise<void>;\n\tgetReadme(extension: IGalleryExtension, token: CancellationToken): Promise<string>;\n\tgetManifest(extension: IGalleryExtension, token: CancellationToken): Promise<IExtensionManifest | null>;\n\tgetChangelog(extension: IGalleryExtension, token: CancellationToken): Promise<string>;\n\tgetCoreTranslation(extension: IGalleryExtension, languageId: string): Promise<ITranslation | null>;\n\tgetExtensionsControlManifest(): Promise<IExtensionsControlManifest>;\n}\n\nexport interface InstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly source: URI | IGalleryExtension;\n\treadonly profileLocation: URI;\n\treadonly applicationScoped?: boolean;\n\treadonly workspaceScoped?: boolean;\n}\n\nexport interface InstallExtensionResult {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly operation: InstallOperation;\n\treadonly source?: URI | IGalleryExtension;\n\treadonly local?: ILocalExtension;\n\treadonly error?: Error;\n\treadonly context?: IStringDictionary<any>;\n\treadonly profileLocation: URI;\n\treadonly applicationScoped?: boolean;\n\treadonly workspaceScoped?: boolean;\n}\n\nexport interface UninstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly profileLocation: URI;\n\treadonly applicationScoped?: boolean;\n\treadonly workspaceScoped?: boolean;\n}\n\nexport interface DidUninstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly error?: string;\n\treadonly profileLocation: URI;\n\treadonly applicationScoped?: boolean;\n\treadonly workspaceScoped?: boolean;\n}\n\nexport interface DidUpdateExtensionMetadata {\n\treadonly profileLocation: URI;\n\treadonly local: ILocalExtension;\n}\n\nexport const enum ExtensionGalleryErrorCode {\n\tTimeout = 'Timeout',\n\tCancelled = 'Cancelled',\n\tFailed = 'Failed',\n\tDownloadFailedWriting = 'DownloadFailedWriting',\n\tOffline = 'Offline',\n}\n\nexport class ExtensionGalleryError extends Error {\n\tconstructor(message: string, readonly code: ExtensionGalleryErrorCode) {\n\t\tsuper(message);\n\t\tthis.name = code;\n\t}\n}\n\nexport const enum ExtensionManagementErrorCode {\n\tUnsupported = 'Unsupported',\n\tDeprecated = 'Deprecated',\n\tMalicious = 'Malicious',\n\tIncompatible = 'Incompatible',\n\tIncompatibleApi = 'IncompatibleApi',\n\tIncompatibleTargetPlatform = 'IncompatibleTargetPlatform',\n\tReleaseVersionNotFound = 'ReleaseVersionNotFound',\n\tInvalid = 'Invalid',\n\tDownload = 'Download',\n\tDownloadSignature = 'DownloadSignature',\n\tDownloadFailedWriting = ExtensionGalleryErrorCode.DownloadFailedWriting,\n\tUpdateMetadata = 'UpdateMetadata',\n\tExtract = 'Extract',\n\tScanning = 'Scanning',\n\tScanningExtension = 'ScanningExtension',\n\tReadUninstalled = 'ReadUninstalled',\n\tUnsetUninstalled = 'UnsetUninstalled',\n\tDelete = 'Delete',\n\tRename = 'Rename',\n\tIntializeDefaultProfile = 'IntializeDefaultProfile',\n\tAddToProfile = 'AddToProfile',\n\tInstalledExtensionNotFound = 'InstalledExtensionNotFound',\n\tPostInstall = 'PostInstall',\n\tCorruptZip = 'CorruptZip',\n\tIncompleteZip = 'IncompleteZip',\n\tPackageNotSigned = 'PackageNotSigned',\n\tSignatureVerificationInternal = 'SignatureVerificationInternal',\n\tSignatureVerificationFailed = 'SignatureVerificationFailed',\n\tNotAllowed = 'NotAllowed',\n\tGallery = 'Gallery',\n\tCancelled = 'Cancelled',\n\tUnknown = 'Unknown',\n\tInternal = 'Internal',\n}\n\nexport enum ExtensionSignatureVerificationCode {\n\t'Success' = 'Success',\n\t'RequiredArgumentMissing' = 'RequiredArgumentMissing', // A required argument is missing.\n\t'InvalidArgument' = 'InvalidArgument', // An argument is invalid.\n\t'PackageIsUnreadable' = 'PackageIsUnreadable', // The extension package is unreadable.\n\t'UnhandledException' = 'UnhandledException', // An unhandled exception occurred.\n\t'SignatureManifestIsMissing' = 'SignatureManifestIsMissing', // The extension is missing a signature manifest file (.signature.manifest).\n\t'SignatureManifestIsUnreadable' = 'SignatureManifestIsUnreadable', // The signature manifest is unreadable.\n\t'SignatureIsMissing' = 'SignatureIsMissing', // The extension is missing a signature file (.signature.p7s).\n\t'SignatureIsUnreadable' = 'SignatureIsUnreadable', // The signature is unreadable.\n\t'CertificateIsUnreadable' = 'CertificateIsUnreadable', // The certificate is unreadable.\n\t'SignatureArchiveIsUnreadable' = 'SignatureArchiveIsUnreadable',\n\t'FileAlreadyExists' = 'FileAlreadyExists', // The output file already exists.\n\t'SignatureArchiveIsInvalidZip' = 'SignatureArchiveIsInvalidZip',\n\t'SignatureArchiveHasSameSignatureFile' = 'SignatureArchiveHasSameSignatureFile', // The signature archive has the same signature file.\n\t'PackageIntegrityCheckFailed' = 'PackageIntegrityCheckFailed', // The package integrity check failed.\n\t'SignatureIsInvalid' = 'SignatureIsInvalid', // The extension has an invalid signature file (.signature.p7s).\n\t'SignatureManifestIsInvalid' = 'SignatureManifestIsInvalid', // The extension has an invalid signature manifest file (.signature.manifest).\n\t'SignatureIntegrityCheckFailed' = 'SignatureIntegrityCheckFailed', // The extension's signature integrity check failed.  Extension integrity is suspect.\n\t'EntryIsMissing' = 'EntryIsMissing', // An entry referenced in the signature manifest was not found in the extension.\n\t'EntryIsTampered' = 'EntryIsTampered', // The integrity check for an entry referenced in the signature manifest failed.\n\t'Untrusted' = 'Untrusted', // An X.509 certificate in the extension signature is untrusted.\n\t'CertificateRevoked' = 'CertificateRevoked', // An X.509 certificate in the extension signature has been revoked.\n\t'SignatureIsNotValid' = 'SignatureIsNotValid', // The extension signature is invalid.\n\t'UnknownError' = 'UnknownError', // An unknown error occurred.\n\t'PackageIsInvalidZip' = 'PackageIsInvalidZip', // The extension package is not valid ZIP format.\n\t'SignatureArchiveHasTooManyEntries' = 'SignatureArchiveHasTooManyEntries', // The signature archive has too many entries.\n}\n\nexport class ExtensionManagementError extends Error {\n\tconstructor(message: string, readonly code: ExtensionManagementErrorCode) {\n\t\tsuper(message);\n\t\tthis.name = code;\n\t}\n}\n\nexport type InstallOptions = {\n\tisBuiltin?: boolean;\n\tisWorkspaceScoped?: boolean;\n\tisMachineScoped?: boolean;\n\tisApplicationScoped?: boolean;\n\tpinned?: boolean;\n\tdonotIncludePackAndDependencies?: boolean;\n\tinstallGivenVersion?: boolean;\n\tpreRelease?: boolean;\n\tinstallPreReleaseVersion?: boolean;\n\tdonotVerifySignature?: boolean;\n\toperation?: InstallOperation;\n\tprofileLocation?: URI;\n\tinstallOnlyNewlyAddedFromExtensionPack?: boolean;\n\tproductVersion?: IProductVersion;\n\tkeepExisting?: boolean;\n\t/**\n\t * Context passed through to InstallExtensionResult\n\t */\n\tcontext?: IStringDictionary<any>;\n};\n\nexport type UninstallOptions = {\n\treadonly profileLocation?: URI;\n\treadonly donotIncludePack?: boolean;\n\treadonly donotCheckDependents?: boolean;\n\treadonly versionOnly?: boolean;\n\treadonly remove?: boolean;\n};\n\nexport interface IExtensionManagementParticipant {\n\tpostInstall(local: ILocalExtension, source: URI | IGalleryExtension, options: InstallOptions, token: CancellationToken): Promise<void>;\n\tpostUninstall(local: ILocalExtension, options: UninstallOptions, token: CancellationToken): Promise<void>;\n}\n\nexport type InstallExtensionInfo = { readonly extension: IGalleryExtension; readonly options: InstallOptions };\nexport type UninstallExtensionInfo = { readonly extension: ILocalExtension; readonly options?: UninstallOptions };\n\nexport const IExtensionManagementService = createDecorator<IExtensionManagementService>('extensionManagementService');\nexport interface IExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tonInstallExtension: Event<InstallExtensionEvent>;\n\tonDidInstallExtensions: Event<readonly InstallExtensionResult[]>;\n\tonUninstallExtension: Event<UninstallExtensionEvent>;\n\tonDidUninstallExtension: Event<DidUninstallExtensionEvent>;\n\tonDidUpdateExtensionMetadata: Event<DidUpdateExtensionMetadata>;\n\n\tzip(extension: ILocalExtension): Promise<URI>;\n\tgetManifest(vsix: URI): Promise<IExtensionManifest>;\n\tinstall(vsix: URI, options?: InstallOptions): Promise<ILocalExtension>;\n\tcanInstall(extension: IGalleryExtension): Promise<boolean>;\n\tinstallFromGallery(extension: IGalleryExtension, options?: InstallOptions): Promise<ILocalExtension>;\n\tinstallGalleryExtensions(extensions: InstallExtensionInfo[]): Promise<InstallExtensionResult[]>;\n\tinstallFromLocation(location: URI, profileLocation: URI): Promise<ILocalExtension>;\n\tinstallExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]>;\n\tuninstall(extension: ILocalExtension, options?: UninstallOptions): Promise<void>;\n\tuninstallExtensions(extensions: UninstallExtensionInfo[]): Promise<void>;\n\ttoggleAppliationScope(extension: ILocalExtension, fromProfileLocation: URI): Promise<ILocalExtension>;\n\treinstallFromGallery(extension: ILocalExtension): Promise<ILocalExtension>;\n\tgetInstalled(type?: ExtensionType, profileLocation?: URI, productVersion?: IProductVersion): Promise<ILocalExtension[]>;\n\tgetExtensionsControlManifest(): Promise<IExtensionsControlManifest>;\n\tcopyExtensions(fromProfileLocation: URI, toProfileLocation: URI): Promise<void>;\n\tupdateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation: URI): Promise<ILocalExtension>;\n\tresetPinnedStateForAllUserExtensions(pinned: boolean): Promise<void>;\n\n\tdownload(extension: IGalleryExtension, operation: InstallOperation, donotVerifySignature: boolean): Promise<URI>;\n\n\tregisterParticipant(pariticipant: IExtensionManagementParticipant): void;\n\tgetTargetPlatform(): Promise<TargetPlatform>;\n\n\tcleanUp(): Promise<void>;\n}\n\nexport const DISABLED_EXTENSIONS_STORAGE_PATH = 'extensionsIdentifiers/disabled';\nexport const ENABLED_EXTENSIONS_STORAGE_PATH = 'extensionsIdentifiers/enabled';\nexport const IGlobalExtensionEnablementService = createDecorator<IGlobalExtensionEnablementService>('IGlobalExtensionEnablementService');\n\nexport interface IGlobalExtensionEnablementService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChangeEnablement: Event<{ readonly extensions: IExtensionIdentifier[]; readonly source?: string }>;\n\n\tgetDisabledExtensions(): IExtensionIdentifier[];\n\tenableExtension(extension: IExtensionIdentifier, source?: string): Promise<boolean>;\n\tdisableExtension(extension: IExtensionIdentifier, source?: string): Promise<boolean>;\n\n}\n\nexport type IConfigBasedExtensionTip = {\n\treadonly extensionId: string;\n\treadonly extensionName: string;\n\treadonly isExtensionPack: boolean;\n\treadonly configName: string;\n\treadonly important: boolean;\n\treadonly whenNotInstalled?: string[];\n};\n\nexport type IExecutableBasedExtensionTip = {\n\treadonly extensionId: string;\n\treadonly extensionName: string;\n\treadonly isExtensionPack: boolean;\n\treadonly exeName: string;\n\treadonly exeFriendlyName: string;\n\treadonly windowsPath?: string;\n\treadonly whenNotInstalled?: string[];\n};\n\nexport const IExtensionTipsService = createDecorator<IExtensionTipsService>('IExtensionTipsService');\nexport interface IExtensionTipsService {\n\treadonly _serviceBrand: undefined;\n\n\tgetConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]>;\n\tgetImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]>;\n\tgetOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]>;\n}\n\nexport const ExtensionsLocalizedLabel = localize2('extensions', \"Extensions\");\nexport const PreferencesLocalizedLabel = localize2('preferences', 'Preferences');\n"],
  "mappings": "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",
  "names": ["ExtensionInstallSource", "SortBy", "SortOrder", "StatisticType", "InstallOperation", "ExtensionGalleryErrorCode", "ExtensionManagementErrorCode", "ExtensionSignatureVerificationCode"]
}
