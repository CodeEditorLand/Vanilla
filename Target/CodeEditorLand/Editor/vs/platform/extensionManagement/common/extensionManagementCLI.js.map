{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionManagementCLI.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\tgetErrorMessage,\n\tisCancellationError,\n} from \"../../../base/common/errors.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { basename } from \"../../../base/common/resources.js\";\nimport { gt } from \"../../../base/common/semver/semver.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport {\n\tEXTENSION_CATEGORIES,\n\tExtensionType,\n\ttype IExtensionManifest,\n} from \"../../extensions/common/extensions.js\";\nimport type { ILogger } from \"../../log/common/log.js\";\nimport {\n\tEXTENSION_IDENTIFIER_REGEX,\n\tIExtensionGalleryService,\n\ttype IExtensionInfo,\n\tIExtensionManagementService,\n\ttype IGalleryExtension,\n\ttype ILocalExtension,\n\ttype InstallExtensionInfo,\n\tInstallOperation,\n\ttype InstallOptions,\n} from \"./extensionManagement.js\";\nimport {\n\tareSameExtensions,\n\tgetExtensionId,\n\tgetGalleryExtensionId,\n\tgetIdAndVersion,\n} from \"./extensionManagementUtil.js\";\n\nconst notFound = (id: string) =>\n\tlocalize(\"notFound\", \"Extension '{0}' not found.\", id);\nconst useId = localize(\n\t\"useId\",\n\t\"Make sure you use the full extension ID, including the publisher, e.g.: {0}\",\n\t\"ms-dotnettools.csharp\",\n);\n\ntype InstallVSIXInfo = { vsix: URI; installOptions: InstallOptions };\ntype InstallGalleryExtensionInfo = {\n\tid: string;\n\tversion?: string;\n\tinstallOptions: InstallOptions;\n};\n\nexport class ExtensionManagementCLI {\n\tconstructor(\n\t\tprotected readonly logger: ILogger,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t) { }\n\n\tprotected get location(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic async listExtensions(\n\t\tshowVersions: boolean,\n\t\tcategory?: string,\n\t\tprofileLocation?: URI,\n\t): Promise<void> {\n\t\tlet extensions = await this.extensionManagementService.getInstalled(\n\t\t\tExtensionType.User,\n\t\t\tprofileLocation,\n\t\t);\n\t\tconst categories = EXTENSION_CATEGORIES.map((c) => c.toLowerCase());\n\t\tif (category && category !== \"\") {\n\t\t\tif (categories.indexOf(category.toLowerCase()) < 0) {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\t\"Invalid category please enter a valid category. To list valid categories run --category without a category specified\",\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\textensions = extensions.filter((e) => {\n\t\t\t\tif (e.manifest.categories) {\n\t\t\t\t\tconst lowerCaseCategories: string[] =\n\t\t\t\t\t\te.manifest.categories.map((c) => c.toLowerCase());\n\t\t\t\t\treturn (\n\t\t\t\t\t\tlowerCaseCategories.indexOf(category.toLowerCase()) > -1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t} else if (category === \"\") {\n\t\t\tthis.logger.info(\"Possible Categories: \");\n\t\t\tcategories.forEach((category) => {\n\t\t\t\tthis.logger.info(category);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (this.location) {\n\t\t\tthis.logger.info(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"listFromLocation\",\n\t\t\t\t\t\"Extensions installed on {0}:\",\n\t\t\t\t\tthis.location,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\textensions = extensions.sort((e1, e2) =>\n\t\t\te1.identifier.id.localeCompare(e2.identifier.id),\n\t\t);\n\t\tlet lastId: string | undefined;\n\t\tfor (const extension of extensions) {\n\t\t\tif (lastId !== extension.identifier.id) {\n\t\t\t\tlastId = extension.identifier.id;\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tshowVersions\n\t\t\t\t\t\t? `${lastId}@${extension.manifest.version}`\n\t\t\t\t\t\t: lastId,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async installExtensions(\n\t\textensions: (string | URI)[],\n\t\tbuiltinExtensions: (string | URI)[],\n\t\tinstallOptions: InstallOptions,\n\t\tforce: boolean,\n\t): Promise<void> {\n\t\tconst failed: string[] = [];\n\n\t\ttry {\n\t\t\tif (extensions.length) {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tthis.location\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"installingExtensionsOnLocation\",\n\t\t\t\t\t\t\t\t\"Installing extensions on {0}...\",\n\t\t\t\t\t\t\t\tthis.location,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\"installingExtensions\",\n\t\t\t\t\t\t\t\t\"Installing extensions...\",\n\t\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst installVSIXInfos: InstallVSIXInfo[] = [];\n\t\t\tconst installExtensionInfos: InstallGalleryExtensionInfo[] = [];\n\t\t\tconst addInstallExtensionInfo = (\n\t\t\t\tid: string,\n\t\t\t\tversion: string | undefined,\n\t\t\t\tisBuiltin: boolean,\n\t\t\t) => {\n\t\t\t\tinstallExtensionInfos.push({\n\t\t\t\t\tid,\n\t\t\t\t\tversion: version !== \"prerelease\" ? version : undefined,\n\t\t\t\t\tinstallOptions: {\n\t\t\t\t\t\t...installOptions,\n\t\t\t\t\t\tisBuiltin,\n\t\t\t\t\t\tinstallPreReleaseVersion:\n\t\t\t\t\t\t\tversion === \"prerelease\" ||\n\t\t\t\t\t\t\tinstallOptions.installPreReleaseVersion,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (extension instanceof URI) {\n\t\t\t\t\tinstallVSIXInfos.push({ vsix: extension, installOptions });\n\t\t\t\t} else {\n\t\t\t\t\tconst [id, version] = getIdAndVersion(extension);\n\t\t\t\t\taddInstallExtensionInfo(id, version, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of builtinExtensions) {\n\t\t\t\tif (extension instanceof URI) {\n\t\t\t\t\tinstallVSIXInfos.push({\n\t\t\t\t\t\tvsix: extension,\n\t\t\t\t\t\tinstallOptions: {\n\t\t\t\t\t\t\t...installOptions,\n\t\t\t\t\t\t\tisBuiltin: true,\n\t\t\t\t\t\t\tdonotIncludePackAndDependencies: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst [id, version] = getIdAndVersion(extension);\n\t\t\t\t\taddInstallExtensionInfo(id, version, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst installed =\n\t\t\t\tawait this.extensionManagementService.getInstalled(\n\t\t\t\t\tundefined,\n\t\t\t\t\tinstallOptions.profileLocation,\n\t\t\t\t);\n\n\t\t\tif (installVSIXInfos.length) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tinstallVSIXInfos.map(async ({ vsix, installOptions }) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.installVSIX(\n\t\t\t\t\t\t\t\tvsix,\n\t\t\t\t\t\t\t\tinstallOptions,\n\t\t\t\t\t\t\t\tforce,\n\t\t\t\t\t\t\t\tinstalled,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tthis.logger.error(err);\n\t\t\t\t\t\t\tfailed.push(vsix.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (installExtensionInfos.length) {\n\t\t\t\tconst failedGalleryExtensions =\n\t\t\t\t\tawait this.installGalleryExtensions(\n\t\t\t\t\t\tinstallExtensionInfos,\n\t\t\t\t\t\tinstalled,\n\t\t\t\t\t\tforce,\n\t\t\t\t\t);\n\t\t\t\tfailed.push(...failedGalleryExtensions);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logger.error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"error while installing extensions\",\n\t\t\t\t\t\"Error while installing extensions: {0}\",\n\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (failed.length) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"installation failed\",\n\t\t\t\t\t\"Failed Installing Extensions: {0}\",\n\t\t\t\t\tfailed.join(\", \"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async updateExtensions(profileLocation?: URI): Promise<void> {\n\t\tconst installedExtensions =\n\t\t\tawait this.extensionManagementService.getInstalled(\n\t\t\t\tExtensionType.User,\n\t\t\t\tprofileLocation,\n\t\t\t);\n\n\t\tconst installedExtensionsQuery: IExtensionInfo[] = [];\n\t\tfor (const extension of installedExtensions) {\n\t\t\tif (!!extension.identifier.uuid) {\n\t\t\t\t// No need to check new version for an unpublished extension\n\t\t\t\tinstalledExtensionsQuery.push({\n\t\t\t\t\t...extension.identifier,\n\t\t\t\t\tpreRelease: extension.preRelease,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.logger.trace(\n\t\t\tlocalize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"updateExtensionsQuery\",\n\t\t\t\t\tcomment: [\"Placeholder is for the count of extensions\"],\n\t\t\t\t},\n\t\t\t\t\"Fetching latest versions for {0} extensions\",\n\t\t\t\tinstalledExtensionsQuery.length,\n\t\t\t),\n\t\t);\n\t\tconst availableVersions =\n\t\t\tawait this.extensionGalleryService.getExtensions(\n\t\t\t\tinstalledExtensionsQuery,\n\t\t\t\t{ compatible: true },\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\n\t\tconst extensionsToUpdate: InstallExtensionInfo[] = [];\n\t\tfor (const newVersion of availableVersions) {\n\t\t\tfor (const oldVersion of installedExtensions) {\n\t\t\t\tif (\n\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\toldVersion.identifier,\n\t\t\t\t\t\tnewVersion.identifier,\n\t\t\t\t\t) &&\n\t\t\t\t\tgt(newVersion.version, oldVersion.manifest.version)\n\t\t\t\t) {\n\t\t\t\t\textensionsToUpdate.push({\n\t\t\t\t\t\textension: newVersion,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\toperation: InstallOperation.Update,\n\t\t\t\t\t\t\tinstallPreReleaseVersion: oldVersion.preRelease,\n\t\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\t\tisApplicationScoped: oldVersion.isApplicationScoped,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!extensionsToUpdate.length) {\n\t\t\tthis.logger.info(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"updateExtensionsNoExtensions\",\n\t\t\t\t\t\"No extension to update\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.info(\n\t\t\tlocalize(\n\t\t\t\t\"updateExtensionsNewVersionsAvailable\",\n\t\t\t\t\"Updating extensions: {0}\",\n\t\t\t\textensionsToUpdate\n\t\t\t\t\t.map((ext) => ext.extension.identifier.id)\n\t\t\t\t\t.join(\", \"),\n\t\t\t),\n\t\t);\n\t\tconst installationResult =\n\t\t\tawait this.extensionManagementService.installGalleryExtensions(\n\t\t\t\textensionsToUpdate,\n\t\t\t);\n\n\t\tfor (const extensionResult of installationResult) {\n\t\t\tif (extensionResult.error) {\n\t\t\t\tthis.logger.error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"errorUpdatingExtension\",\n\t\t\t\t\t\t\"Error while updating extension {0}: {1}\",\n\t\t\t\t\t\textensionResult.identifier.id,\n\t\t\t\t\t\tgetErrorMessage(extensionResult.error),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"successUpdate\",\n\t\t\t\t\t\t\"Extension '{0}' v{1} was successfully updated.\",\n\t\t\t\t\t\textensionResult.identifier.id,\n\t\t\t\t\t\textensionResult.local?.manifest.version,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async installGalleryExtensions(\n\t\tinstallExtensionInfos: InstallGalleryExtensionInfo[],\n\t\tinstalled: ILocalExtension[],\n\t\tforce: boolean,\n\t): Promise<string[]> {\n\t\tinstallExtensionInfos = installExtensionInfos.filter(\n\t\t\t({ id, version }) => {\n\t\t\t\tconst installedExtension = installed.find((i) =>\n\t\t\t\t\tareSameExtensions(i.identifier, { id }),\n\t\t\t\t);\n\t\t\t\tif (installedExtension) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!force &&\n\t\t\t\t\t\t(!version ||\n\t\t\t\t\t\t\t(version === \"prerelease\" &&\n\t\t\t\t\t\t\t\tinstalledExtension.preRelease))\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"alreadyInstalled-checkAndUpdate\",\n\t\t\t\t\t\t\t\t\"Extension '{0}' v{1} is already installed. Use '--force' option to update to latest version or provide '@<version>' to install a specific version, for example: '{2}@1.2.3'.\",\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tinstalledExtension.manifest.version,\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tversion &&\n\t\t\t\t\t\tinstalledExtension.manifest.version === version\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"alreadyInstalled\",\n\t\t\t\t\t\t\t\t\"Extension '{0}' is already installed.\",\n\t\t\t\t\t\t\t\t`${id}@${version}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t);\n\n\t\tif (!installExtensionInfos.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst failed: string[] = [];\n\t\tconst extensionsToInstall: InstallExtensionInfo[] = [];\n\t\tconst galleryExtensions = await this.getGalleryExtensions(\n\t\t\tinstallExtensionInfos,\n\t\t);\n\t\tawait Promise.all(\n\t\t\tinstallExtensionInfos.map(\n\t\t\t\tasync ({ id, version, installOptions }) => {\n\t\t\t\t\tconst gallery = galleryExtensions.get(id.toLowerCase());\n\t\t\t\t\tif (!gallery) {\n\t\t\t\t\t\tthis.logger.error(\n\t\t\t\t\t\t\t`${notFound(version ? `${id}@${version}` : id)}\\n${useId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tfailed.push(id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst manifest =\n\t\t\t\t\t\t\tawait this.extensionGalleryService.getManifest(\n\t\t\t\t\t\t\t\tgallery,\n\t\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (manifest && !this.validateExtensionKind(manifest)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.logger.error(err.message || err.stack || err);\n\t\t\t\t\t\tfailed.push(id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst installedExtension = installed.find((e) =>\n\t\t\t\t\t\tareSameExtensions(e.identifier, gallery.identifier),\n\t\t\t\t\t);\n\t\t\t\t\tif (installedExtension) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tgallery.version ===\n\t\t\t\t\t\t\tinstalledExtension.manifest.version\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\"alreadyInstalled\",\n\t\t\t\t\t\t\t\t\t\"Extension '{0}' is already installed.\",\n\t\t\t\t\t\t\t\t\tversion ? `${id}@${version}` : id,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"updateMessage\",\n\t\t\t\t\t\t\t\t\"Updating the extension '{0}' to the version {1}\",\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tgallery.version,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (installOptions.isBuiltin) {\n\t\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\"installing builtin with version\",\n\t\t\t\t\t\t\t\t\t\t\"Installing builtin extension '{0}' v{1}...\",\n\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t\tversion,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\t\"installing builtin \",\n\t\t\t\t\t\t\t\t\t\t\"Installing builtin extension '{0}'...\",\n\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\"installing with version\",\n\t\t\t\t\t\t\t\t\t\t\"Installing extension '{0}' v{1}...\",\n\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t\tversion,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\t\"installing\",\n\t\t\t\t\t\t\t\t\t\t\"Installing extension '{0}'...\",\n\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\textensionsToInstall.push({\n\t\t\t\t\t\textension: gallery,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t...installOptions,\n\t\t\t\t\t\t\tinstallGivenVersion: !!version,\n\t\t\t\t\t\t\tisApplicationScoped:\n\t\t\t\t\t\t\t\tinstallOptions.isApplicationScoped ||\n\t\t\t\t\t\t\t\tinstalledExtension?.isApplicationScoped,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tif (extensionsToInstall.length) {\n\t\t\tconst installationResult =\n\t\t\t\tawait this.extensionManagementService.installGalleryExtensions(\n\t\t\t\t\textensionsToInstall,\n\t\t\t\t);\n\t\t\tfor (const extensionResult of installationResult) {\n\t\t\t\tif (extensionResult.error) {\n\t\t\t\t\tthis.logger.error(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"errorInstallingExtension\",\n\t\t\t\t\t\t\t\"Error while installing extension {0}: {1}\",\n\t\t\t\t\t\t\textensionResult.identifier.id,\n\t\t\t\t\t\t\tgetErrorMessage(extensionResult.error),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tfailed.push(extensionResult.identifier.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"successInstall\",\n\t\t\t\t\t\t\t\"Extension '{0}' v{1} was successfully installed.\",\n\t\t\t\t\t\t\textensionResult.identifier.id,\n\t\t\t\t\t\t\textensionResult.local?.manifest.version,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn failed;\n\t}\n\n\tprivate async installVSIX(\n\t\tvsix: URI,\n\t\tinstallOptions: InstallOptions,\n\t\tforce: boolean,\n\t\tinstalledExtensions: ILocalExtension[],\n\t): Promise<void> {\n\t\tconst manifest =\n\t\t\tawait this.extensionManagementService.getManifest(vsix);\n\t\tif (!manifest) {\n\t\t\tthrow new Error(\"Invalid vsix\");\n\t\t}\n\n\t\tconst valid = await this.validateVSIX(\n\t\t\tmanifest,\n\t\t\tforce,\n\t\t\tinstallOptions.profileLocation,\n\t\t\tinstalledExtensions,\n\t\t);\n\t\tif (valid) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionManagementService.install(vsix, {\n\t\t\t\t\t...installOptions,\n\t\t\t\t\tinstallGivenVersion: true,\n\t\t\t\t});\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"successVsixInstall\",\n\t\t\t\t\t\t\"Extension '{0}' was successfully installed.\",\n\t\t\t\t\t\tbasename(vsix),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tif (isCancellationError(error)) {\n\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"cancelVsixInstall\",\n\t\t\t\t\t\t\t\"Cancelled installing extension '{0}'.\",\n\t\t\t\t\t\t\tbasename(vsix),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getGalleryExtensions(\n\t\textensions: InstallGalleryExtensionInfo[],\n\t): Promise<Map<string, IGalleryExtension>> {\n\t\tconst galleryExtensions = new Map<string, IGalleryExtension>();\n\t\tconst preRelease = extensions.some(\n\t\t\t(e) => e.installOptions.installPreReleaseVersion,\n\t\t);\n\t\tconst targetPlatform =\n\t\t\tawait this.extensionManagementService.getTargetPlatform();\n\t\tconst extensionInfos: IExtensionInfo[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tif (EXTENSION_IDENTIFIER_REGEX.test(extension.id)) {\n\t\t\t\textensionInfos.push({ ...extension, preRelease });\n\t\t\t}\n\t\t}\n\t\tif (extensionInfos.length) {\n\t\t\tconst result = await this.extensionGalleryService.getExtensions(\n\t\t\t\textensionInfos,\n\t\t\t\t{ targetPlatform },\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t\tfor (const extension of result) {\n\t\t\t\tgalleryExtensions.set(\n\t\t\t\t\textension.identifier.id.toLowerCase(),\n\t\t\t\t\textension,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn galleryExtensions;\n\t}\n\n\tprotected validateExtensionKind(_manifest: IExtensionManifest): boolean {\n\t\treturn true;\n\t}\n\n\tprivate async validateVSIX(\n\t\tmanifest: IExtensionManifest,\n\t\tforce: boolean,\n\t\tprofileLocation: URI | undefined,\n\t\tinstalledExtensions: ILocalExtension[],\n\t): Promise<boolean> {\n\t\tif (!force) {\n\t\t\tconst extensionIdentifier = {\n\t\t\t\tid: getGalleryExtensionId(manifest.publisher, manifest.name),\n\t\t\t};\n\t\t\tconst newer = installedExtensions.find(\n\t\t\t\t(local) =>\n\t\t\t\t\tareSameExtensions(extensionIdentifier, local.identifier) &&\n\t\t\t\t\tgt(local.manifest.version, manifest.version),\n\t\t\t);\n\t\t\tif (newer) {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"forceDowngrade\",\n\t\t\t\t\t\t\"A newer version of extension '{0}' v{1} is already installed. Use '--force' option to downgrade to older version.\",\n\t\t\t\t\t\tnewer.identifier.id,\n\t\t\t\t\t\tnewer.manifest.version,\n\t\t\t\t\t\tmanifest.version,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn this.validateExtensionKind(manifest);\n\t}\n\n\tpublic async uninstallExtensions(\n\t\textensions: (string | URI)[],\n\t\tforce: boolean,\n\t\tprofileLocation?: URI,\n\t): Promise<void> {\n\t\tconst getId = async (\n\t\t\textensionDescription: string | URI,\n\t\t): Promise<string> => {\n\t\t\tif (extensionDescription instanceof URI) {\n\t\t\t\tconst manifest =\n\t\t\t\t\tawait this.extensionManagementService.getManifest(\n\t\t\t\t\t\textensionDescription,\n\t\t\t\t\t);\n\t\t\t\treturn getExtensionId(manifest.publisher, manifest.name);\n\t\t\t}\n\t\t\treturn extensionDescription;\n\t\t};\n\n\t\tconst uninstalledExtensions: ILocalExtension[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tconst id = await getId(extension);\n\t\t\tconst installed =\n\t\t\t\tawait this.extensionManagementService.getInstalled(\n\t\t\t\t\tundefined,\n\t\t\t\t\tprofileLocation,\n\t\t\t\t);\n\t\t\tconst extensionsToUninstall = installed.filter((e) =>\n\t\t\t\tareSameExtensions(e.identifier, { id }),\n\t\t\t);\n\t\t\tif (!extensionsToUninstall.length) {\n\t\t\t\tthrow new Error(`${this.notInstalled(id)}\\n${useId}`);\n\t\t\t}\n\t\t\tif (\n\t\t\t\textensionsToUninstall.some(\n\t\t\t\t\t(e) => e.type === ExtensionType.System,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"builtin\",\n\t\t\t\t\t\t\"Extension '{0}' is a Built-in extension and cannot be uninstalled\",\n\t\t\t\t\t\tid,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!force && extensionsToUninstall.some((e) => e.isBuiltin)) {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"forceUninstall\",\n\t\t\t\t\t\t\"Extension '{0}' is marked as a Built-in extension by user. Please use '--force' option to uninstall it.\",\n\t\t\t\t\t\tid,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.logger.info(\n\t\t\t\tlocalize(\"uninstalling\", \"Uninstalling {0}...\", id),\n\t\t\t);\n\t\t\tfor (const extensionToUninstall of extensionsToUninstall) {\n\t\t\t\tawait this.extensionManagementService.uninstall(\n\t\t\t\t\textensionToUninstall,\n\t\t\t\t\t{ profileLocation },\n\t\t\t\t);\n\t\t\t\tuninstalledExtensions.push(extensionToUninstall);\n\t\t\t}\n\n\t\t\tif (this.location) {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"successUninstallFromLocation\",\n\t\t\t\t\t\t\"Extension '{0}' was successfully uninstalled from {1}!\",\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tthis.location,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.logger.info(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"successUninstall\",\n\t\t\t\t\t\t\"Extension '{0}' was successfully uninstalled!\",\n\t\t\t\t\t\tid,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async locateExtension(extensions: string[]): Promise<void> {\n\t\tconst installed = await this.extensionManagementService.getInstalled();\n\t\textensions.forEach((e) => {\n\t\t\tinstalled.forEach((i) => {\n\t\t\t\tif (i.identifier.id === e) {\n\t\t\t\t\tif (i.location.scheme === Schemas.file) {\n\t\t\t\t\t\tthis.logger.info(i.location.fsPath);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate notInstalled(id: string) {\n\t\treturn this.location\n\t\t\t? localize(\n\t\t\t\t\t\"notInstalleddOnLocation\",\n\t\t\t\t\t\"Extension '{0}' is not installed on {1}.\",\n\t\t\t\t\tid,\n\t\t\t\t\tthis.location,\n\t\t\t\t)\n\t\t\t: localize(\"notInstalled\", \"Extension '{0}' is not installed.\", id);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["category", "installOptions"]
}
