{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/extensionManagementCLI.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { getErrorMessage, isCancellationError } from '../../../base/common/errors.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename } from '../../../base/common/resources.js';\nimport { gt } from '../../../base/common/semver/semver.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { EXTENSION_IDENTIFIER_REGEX, IExtensionGalleryService, IExtensionInfo, IExtensionManagementService, IGalleryExtension, ILocalExtension, InstallOptions, InstallExtensionInfo, InstallOperation } from './extensionManagement.js';\nimport { areSameExtensions, getExtensionId, getGalleryExtensionId, getIdAndVersion } from './extensionManagementUtil.js';\nimport { ExtensionType, EXTENSION_CATEGORIES, IExtensionManifest } from '../../extensions/common/extensions.js';\nimport { ILogger } from '../../log/common/log.js';\n\n\nconst notFound = (id: string) => localize('notFound', \"Extension '{0}' not found.\", id);\nconst useId = localize('useId', \"Make sure you use the full extension ID, including the publisher, e.g.: {0}\", 'ms-dotnettools.csharp');\n\ntype InstallVSIXInfo = { vsix: URI; installOptions: InstallOptions };\ntype InstallGalleryExtensionInfo = { id: string; version?: string; installOptions: InstallOptions };\n\nexport class ExtensionManagementCLI {\n\n\tconstructor(\n\t\tprotected readonly logger: ILogger,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t) { }\n\n\tprotected get location(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic async listExtensions(showVersions: boolean, category?: string, profileLocation?: URI): Promise<void> {\n\t\tlet extensions = await this.extensionManagementService.getInstalled(ExtensionType.User, profileLocation);\n\t\tconst categories = EXTENSION_CATEGORIES.map(c => c.toLowerCase());\n\t\tif (category && category !== '') {\n\t\t\tif (categories.indexOf(category.toLowerCase()) < 0) {\n\t\t\t\tthis.logger.info('Invalid category please enter a valid category. To list valid categories run --category without a category specified');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\textensions = extensions.filter(e => {\n\t\t\t\tif (e.manifest.categories) {\n\t\t\t\t\tconst lowerCaseCategories: string[] = e.manifest.categories.map(c => c.toLowerCase());\n\t\t\t\t\treturn lowerCaseCategories.indexOf(category.toLowerCase()) > -1;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t} else if (category === '') {\n\t\t\tthis.logger.info('Possible Categories: ');\n\t\t\tcategories.forEach(category => {\n\t\t\t\tthis.logger.info(category);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (this.location) {\n\t\t\tthis.logger.info(localize('listFromLocation', \"Extensions installed on {0}:\", this.location));\n\t\t}\n\n\t\textensions = extensions.sort((e1, e2) => e1.identifier.id.localeCompare(e2.identifier.id));\n\t\tlet lastId: string | undefined = undefined;\n\t\tfor (const extension of extensions) {\n\t\t\tif (lastId !== extension.identifier.id) {\n\t\t\t\tlastId = extension.identifier.id;\n\t\t\t\tthis.logger.info(showVersions ? `${lastId}@${extension.manifest.version}` : lastId);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async installExtensions(extensions: (string | URI)[], builtinExtensions: (string | URI)[], installOptions: InstallOptions, force: boolean): Promise<void> {\n\t\tconst failed: string[] = [];\n\n\t\ttry {\n\t\t\tif (extensions.length) {\n\t\t\t\tthis.logger.info(this.location ? localize('installingExtensionsOnLocation', \"Installing extensions on {0}...\", this.location) : localize('installingExtensions', \"Installing extensions...\"));\n\t\t\t}\n\n\t\t\tconst installVSIXInfos: InstallVSIXInfo[] = [];\n\t\t\tconst installExtensionInfos: InstallGalleryExtensionInfo[] = [];\n\t\t\tconst addInstallExtensionInfo = (id: string, version: string | undefined, isBuiltin: boolean) => {\n\t\t\t\tinstallExtensionInfos.push({ id, version: version !== 'prerelease' ? version : undefined, installOptions: { ...installOptions, isBuiltin, installPreReleaseVersion: version === 'prerelease' || installOptions.installPreReleaseVersion } });\n\t\t\t};\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (extension instanceof URI) {\n\t\t\t\t\tinstallVSIXInfos.push({ vsix: extension, installOptions });\n\t\t\t\t} else {\n\t\t\t\t\tconst [id, version] = getIdAndVersion(extension);\n\t\t\t\t\taddInstallExtensionInfo(id, version, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of builtinExtensions) {\n\t\t\t\tif (extension instanceof URI) {\n\t\t\t\t\tinstallVSIXInfos.push({ vsix: extension, installOptions: { ...installOptions, isBuiltin: true, donotIncludePackAndDependencies: true } });\n\t\t\t\t} else {\n\t\t\t\t\tconst [id, version] = getIdAndVersion(extension);\n\t\t\t\t\taddInstallExtensionInfo(id, version, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst installed = await this.extensionManagementService.getInstalled(undefined, installOptions.profileLocation);\n\n\t\t\tif (installVSIXInfos.length) {\n\t\t\t\tawait Promise.all(installVSIXInfos.map(async ({ vsix, installOptions }) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.installVSIX(vsix, installOptions, force, installed);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.logger.error(err);\n\t\t\t\t\t\tfailed.push(vsix.toString());\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tif (installExtensionInfos.length) {\n\t\t\t\tconst failedGalleryExtensions = await this.installGalleryExtensions(installExtensionInfos, installed, force);\n\t\t\t\tfailed.push(...failedGalleryExtensions);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logger.error(localize('error while installing extensions', \"Error while installing extensions: {0}\", getErrorMessage(error)));\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (failed.length) {\n\t\t\tthrow new Error(localize('installation failed', \"Failed Installing Extensions: {0}\", failed.join(', ')));\n\t\t}\n\t}\n\n\tpublic async updateExtensions(profileLocation?: URI): Promise<void> {\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(ExtensionType.User, profileLocation);\n\n\t\tconst installedExtensionsQuery: IExtensionInfo[] = [];\n\t\tfor (const extension of installedExtensions) {\n\t\t\tif (!!extension.identifier.uuid) { // No need to check new version for an unpublished extension\n\t\t\t\tinstalledExtensionsQuery.push({ ...extension.identifier, preRelease: extension.preRelease });\n\t\t\t}\n\t\t}\n\n\t\tthis.logger.trace(localize({ key: 'updateExtensionsQuery', comment: ['Placeholder is for the count of extensions'] }, \"Fetching latest versions for {0} extensions\", installedExtensionsQuery.length));\n\t\tconst availableVersions = await this.extensionGalleryService.getExtensions(installedExtensionsQuery, { compatible: true }, CancellationToken.None);\n\n\t\tconst extensionsToUpdate: InstallExtensionInfo[] = [];\n\t\tfor (const newVersion of availableVersions) {\n\t\t\tfor (const oldVersion of installedExtensions) {\n\t\t\t\tif (areSameExtensions(oldVersion.identifier, newVersion.identifier) && gt(newVersion.version, oldVersion.manifest.version)) {\n\t\t\t\t\textensionsToUpdate.push({\n\t\t\t\t\t\textension: newVersion,\n\t\t\t\t\t\toptions: { operation: InstallOperation.Update, installPreReleaseVersion: oldVersion.preRelease, profileLocation, isApplicationScoped: oldVersion.isApplicationScoped }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!extensionsToUpdate.length) {\n\t\t\tthis.logger.info(localize('updateExtensionsNoExtensions', \"No extension to update\"));\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.info(localize('updateExtensionsNewVersionsAvailable', \"Updating extensions: {0}\", extensionsToUpdate.map(ext => ext.extension.identifier.id).join(', ')));\n\t\tconst installationResult = await this.extensionManagementService.installGalleryExtensions(extensionsToUpdate);\n\n\t\tfor (const extensionResult of installationResult) {\n\t\t\tif (extensionResult.error) {\n\t\t\t\tthis.logger.error(localize('errorUpdatingExtension', \"Error while updating extension {0}: {1}\", extensionResult.identifier.id, getErrorMessage(extensionResult.error)));\n\t\t\t} else {\n\t\t\t\tthis.logger.info(localize('successUpdate', \"Extension '{0}' v{1} was successfully updated.\", extensionResult.identifier.id, extensionResult.local?.manifest.version));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async installGalleryExtensions(installExtensionInfos: InstallGalleryExtensionInfo[], installed: ILocalExtension[], force: boolean): Promise<string[]> {\n\t\tinstallExtensionInfos = installExtensionInfos.filter(({ id, version }) => {\n\t\t\tconst installedExtension = installed.find(i => areSameExtensions(i.identifier, { id }));\n\t\t\tif (installedExtension) {\n\t\t\t\tif (!force && (!version || (version === 'prerelease' && installedExtension.preRelease))) {\n\t\t\t\t\tthis.logger.info(localize('alreadyInstalled-checkAndUpdate', \"Extension '{0}' v{1} is already installed. Use '--force' option to update to latest version or provide '@<version>' to install a specific version, for example: '{2}@1.2.3'.\", id, installedExtension.manifest.version, id));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (version && installedExtension.manifest.version === version) {\n\t\t\t\t\tthis.logger.info(localize('alreadyInstalled', \"Extension '{0}' is already installed.\", `${id}@${version}`));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\t\tif (!installExtensionInfos.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst failed: string[] = [];\n\t\tconst extensionsToInstall: InstallExtensionInfo[] = [];\n\t\tconst galleryExtensions = await this.getGalleryExtensions(installExtensionInfos);\n\t\tawait Promise.all(installExtensionInfos.map(async ({ id, version, installOptions }) => {\n\t\t\tconst gallery = galleryExtensions.get(id.toLowerCase());\n\t\t\tif (!gallery) {\n\t\t\t\tthis.logger.error(`${notFound(version ? `${id}@${version}` : id)}\\n${useId}`);\n\t\t\t\tfailed.push(id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst manifest = await this.extensionGalleryService.getManifest(gallery, CancellationToken.None);\n\t\t\t\tif (manifest && !this.validateExtensionKind(manifest)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis.logger.error(err.message || err.stack || err);\n\t\t\t\tfailed.push(id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst installedExtension = installed.find(e => areSameExtensions(e.identifier, gallery.identifier));\n\t\t\tif (installedExtension) {\n\t\t\t\tif (gallery.version === installedExtension.manifest.version) {\n\t\t\t\t\tthis.logger.info(localize('alreadyInstalled', \"Extension '{0}' is already installed.\", version ? `${id}@${version}` : id));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.logger.info(localize('updateMessage', \"Updating the extension '{0}' to the version {1}\", id, gallery.version));\n\t\t\t}\n\t\t\tif (installOptions.isBuiltin) {\n\t\t\t\tthis.logger.info(version ? localize('installing builtin with version', \"Installing builtin extension '{0}' v{1}...\", id, version) : localize('installing builtin ', \"Installing builtin extension '{0}'...\", id));\n\t\t\t} else {\n\t\t\t\tthis.logger.info(version ? localize('installing with version', \"Installing extension '{0}' v{1}...\", id, version) : localize('installing', \"Installing extension '{0}'...\", id));\n\t\t\t}\n\t\t\textensionsToInstall.push({\n\t\t\t\textension: gallery,\n\t\t\t\toptions: { ...installOptions, installGivenVersion: !!version, isApplicationScoped: installOptions.isApplicationScoped || installedExtension?.isApplicationScoped },\n\t\t\t});\n\t\t}));\n\n\t\tif (extensionsToInstall.length) {\n\t\t\tconst installationResult = await this.extensionManagementService.installGalleryExtensions(extensionsToInstall);\n\t\t\tfor (const extensionResult of installationResult) {\n\t\t\t\tif (extensionResult.error) {\n\t\t\t\t\tthis.logger.error(localize('errorInstallingExtension', \"Error while installing extension {0}: {1}\", extensionResult.identifier.id, getErrorMessage(extensionResult.error)));\n\t\t\t\t\tfailed.push(extensionResult.identifier.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logger.info(localize('successInstall', \"Extension '{0}' v{1} was successfully installed.\", extensionResult.identifier.id, extensionResult.local?.manifest.version));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn failed;\n\t}\n\n\tprivate async installVSIX(vsix: URI, installOptions: InstallOptions, force: boolean, installedExtensions: ILocalExtension[]): Promise<void> {\n\n\t\tconst manifest = await this.extensionManagementService.getManifest(vsix);\n\t\tif (!manifest) {\n\t\t\tthrow new Error('Invalid vsix');\n\t\t}\n\n\t\tconst valid = await this.validateVSIX(manifest, force, installOptions.profileLocation, installedExtensions);\n\t\tif (valid) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionManagementService.install(vsix, { ...installOptions, installGivenVersion: true });\n\t\t\t\tthis.logger.info(localize('successVsixInstall', \"Extension '{0}' was successfully installed.\", basename(vsix)));\n\t\t\t} catch (error) {\n\t\t\t\tif (isCancellationError(error)) {\n\t\t\t\t\tthis.logger.info(localize('cancelVsixInstall', \"Cancelled installing extension '{0}'.\", basename(vsix)));\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getGalleryExtensions(extensions: InstallGalleryExtensionInfo[]): Promise<Map<string, IGalleryExtension>> {\n\t\tconst galleryExtensions = new Map<string, IGalleryExtension>();\n\t\tconst preRelease = extensions.some(e => e.installOptions.installPreReleaseVersion);\n\t\tconst targetPlatform = await this.extensionManagementService.getTargetPlatform();\n\t\tconst extensionInfos: IExtensionInfo[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tif (EXTENSION_IDENTIFIER_REGEX.test(extension.id)) {\n\t\t\t\textensionInfos.push({ ...extension, preRelease });\n\t\t\t}\n\t\t}\n\t\tif (extensionInfos.length) {\n\t\t\tconst result = await this.extensionGalleryService.getExtensions(extensionInfos, { targetPlatform }, CancellationToken.None);\n\t\t\tfor (const extension of result) {\n\t\t\t\tgalleryExtensions.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\t}\n\t\t}\n\t\treturn galleryExtensions;\n\t}\n\n\tprotected validateExtensionKind(_manifest: IExtensionManifest): boolean {\n\t\treturn true;\n\t}\n\n\tprivate async validateVSIX(manifest: IExtensionManifest, force: boolean, profileLocation: URI | undefined, installedExtensions: ILocalExtension[]): Promise<boolean> {\n\t\tif (!force) {\n\t\t\tconst extensionIdentifier = { id: getGalleryExtensionId(manifest.publisher, manifest.name) };\n\t\t\tconst newer = installedExtensions.find(local => areSameExtensions(extensionIdentifier, local.identifier) && gt(local.manifest.version, manifest.version));\n\t\t\tif (newer) {\n\t\t\t\tthis.logger.info(localize('forceDowngrade', \"A newer version of extension '{0}' v{1} is already installed. Use '--force' option to downgrade to older version.\", newer.identifier.id, newer.manifest.version, manifest.version));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn this.validateExtensionKind(manifest);\n\t}\n\n\tpublic async uninstallExtensions(extensions: (string | URI)[], force: boolean, profileLocation?: URI): Promise<void> {\n\t\tconst getId = async (extensionDescription: string | URI): Promise<string> => {\n\t\t\tif (extensionDescription instanceof URI) {\n\t\t\t\tconst manifest = await this.extensionManagementService.getManifest(extensionDescription);\n\t\t\t\treturn getExtensionId(manifest.publisher, manifest.name);\n\t\t\t}\n\t\t\treturn extensionDescription;\n\t\t};\n\n\t\tconst uninstalledExtensions: ILocalExtension[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tconst id = await getId(extension);\n\t\t\tconst installed = await this.extensionManagementService.getInstalled(undefined, profileLocation);\n\t\t\tconst extensionsToUninstall = installed.filter(e => areSameExtensions(e.identifier, { id }));\n\t\t\tif (!extensionsToUninstall.length) {\n\t\t\t\tthrow new Error(`${this.notInstalled(id)}\\n${useId}`);\n\t\t\t}\n\t\t\tif (extensionsToUninstall.some(e => e.type === ExtensionType.System)) {\n\t\t\t\tthis.logger.info(localize('builtin', \"Extension '{0}' is a Built-in extension and cannot be uninstalled\", id));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!force && extensionsToUninstall.some(e => e.isBuiltin)) {\n\t\t\t\tthis.logger.info(localize('forceUninstall', \"Extension '{0}' is marked as a Built-in extension by user. Please use '--force' option to uninstall it.\", id));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.logger.info(localize('uninstalling', \"Uninstalling {0}...\", id));\n\t\t\tfor (const extensionToUninstall of extensionsToUninstall) {\n\t\t\t\tawait this.extensionManagementService.uninstall(extensionToUninstall, { profileLocation });\n\t\t\t\tuninstalledExtensions.push(extensionToUninstall);\n\t\t\t}\n\n\t\t\tif (this.location) {\n\t\t\t\tthis.logger.info(localize('successUninstallFromLocation', \"Extension '{0}' was successfully uninstalled from {1}!\", id, this.location));\n\t\t\t} else {\n\t\t\t\tthis.logger.info(localize('successUninstall', \"Extension '{0}' was successfully uninstalled!\", id));\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic async locateExtension(extensions: string[]): Promise<void> {\n\t\tconst installed = await this.extensionManagementService.getInstalled();\n\t\textensions.forEach(e => {\n\t\t\tinstalled.forEach(i => {\n\t\t\t\tif (i.identifier.id === e) {\n\t\t\t\t\tif (i.location.scheme === Schemas.file) {\n\t\t\t\t\t\tthis.logger.info(i.location.fsPath);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate notInstalled(id: string) {\n\t\treturn this.location ? localize('notInstalleddOnLocation', \"Extension '{0}' is not installed on {1}.\", id, this.location) : localize('notInstalled', \"Extension '{0}' is not installed.\", id);\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["category", "installOptions"]
}
