{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/unsupportedExtensionsMigration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { ExtensionType } from \"../../extensions/common/extensions.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport {\n\ttype IExtensionGalleryService,\n\ttype IExtensionManagementService,\n\ttype IGlobalExtensionEnablementService,\n\tInstallOperation,\n} from \"./extensionManagement.js\";\nimport {\n\tareSameExtensions,\n\tgetExtensionId,\n} from \"./extensionManagementUtil.js\";\nimport type { IExtensionStorageService } from \"./extensionStorage.js\";\n\n/**\n * Migrates the installed unsupported nightly extension to a supported pre-release extension. It includes following:\n * \t- Uninstall the Unsupported extension\n * \t- Install (with optional storage migration) the Pre-release extension only if\n * \t\t- the extension is not installed\n * \t\t- or it is a release version and the unsupported extension is enabled.\n */\nexport async function migrateUnsupportedExtensions(\n\textensionManagementService: IExtensionManagementService,\n\tgalleryService: IExtensionGalleryService,\n\textensionStorageService: IExtensionStorageService,\n\textensionEnablementService: IGlobalExtensionEnablementService,\n\tlogService: ILogService,\n): Promise<void> {\n\ttry {\n\t\tconst extensionsControlManifest =\n\t\t\tawait extensionManagementService.getExtensionsControlManifest();\n\t\tif (!extensionsControlManifest.deprecated) {\n\t\t\treturn;\n\t\t}\n\t\tconst installed = await extensionManagementService.getInstalled(\n\t\t\tExtensionType.User,\n\t\t);\n\t\tfor (const [unsupportedExtensionId, deprecated] of Object.entries(\n\t\t\textensionsControlManifest.deprecated,\n\t\t)) {\n\t\t\tif (!deprecated?.extension) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst {\n\t\t\t\tid: preReleaseExtensionId,\n\t\t\t\tautoMigrate,\n\t\t\t\tpreRelease,\n\t\t\t} = deprecated.extension;\n\t\t\tif (!autoMigrate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst unsupportedExtension = installed.find((i) =>\n\t\t\t\tareSameExtensions(i.identifier, { id: unsupportedExtensionId }),\n\t\t\t);\n\t\t\t// Unsupported Extension is not installed\n\t\t\tif (!unsupportedExtension) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst gallery = (\n\t\t\t\tawait galleryService.getExtensions(\n\t\t\t\t\t[{ id: preReleaseExtensionId, preRelease }],\n\t\t\t\t\t{\n\t\t\t\t\t\ttargetPlatform:\n\t\t\t\t\t\t\tawait extensionManagementService.getTargetPlatform(),\n\t\t\t\t\t\tcompatible: true,\n\t\t\t\t\t},\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t)\n\t\t\t)[0];\n\t\t\tif (!gallery) {\n\t\t\t\tlogService.info(\n\t\t\t\t\t`Skipping migrating '${unsupportedExtension.identifier.id}' extension because, the comaptible target '${preReleaseExtensionId}' extension is not found`,\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlogService.info(\n\t\t\t\t\t`Migrating '${unsupportedExtension.identifier.id}' extension to '${preReleaseExtensionId}' extension...`,\n\t\t\t\t);\n\n\t\t\t\tconst isUnsupportedExtensionEnabled =\n\t\t\t\t\t!extensionEnablementService\n\t\t\t\t\t\t.getDisabledExtensions()\n\t\t\t\t\t\t.some((e) =>\n\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\tunsupportedExtension.identifier,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\tawait extensionManagementService.uninstall(\n\t\t\t\t\tunsupportedExtension,\n\t\t\t\t);\n\t\t\t\tlogService.info(\n\t\t\t\t\t`Uninstalled the unsupported extension '${unsupportedExtension.identifier.id}'`,\n\t\t\t\t);\n\n\t\t\t\tlet preReleaseExtension = installed.find((i) =>\n\t\t\t\t\tareSameExtensions(i.identifier, {\n\t\t\t\t\t\tid: preReleaseExtensionId,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t!preReleaseExtension ||\n\t\t\t\t\t(!preReleaseExtension.isPreReleaseVersion &&\n\t\t\t\t\t\tisUnsupportedExtensionEnabled)\n\t\t\t\t) {\n\t\t\t\t\tpreReleaseExtension =\n\t\t\t\t\t\tawait extensionManagementService.installFromGallery(\n\t\t\t\t\t\t\tgallery,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinstallPreReleaseVersion: true,\n\t\t\t\t\t\t\t\tisMachineScoped:\n\t\t\t\t\t\t\t\t\tunsupportedExtension.isMachineScoped,\n\t\t\t\t\t\t\t\toperation: InstallOperation.Migrate,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\tlogService.info(\n\t\t\t\t\t\t`Installed the pre-release extension '${preReleaseExtension.identifier.id}'`,\n\t\t\t\t\t);\n\t\t\t\t\tif (!isUnsupportedExtensionEnabled) {\n\t\t\t\t\t\tawait extensionEnablementService.disableExtension(\n\t\t\t\t\t\t\tpreReleaseExtension.identifier,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlogService.info(\n\t\t\t\t\t\t\t`Disabled the pre-release extension '${preReleaseExtension.identifier.id}' because the unsupported extension '${unsupportedExtension.identifier.id}' is disabled`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (autoMigrate.storage) {\n\t\t\t\t\t\textensionStorageService.addToMigrationList(\n\t\t\t\t\t\t\tgetExtensionId(\n\t\t\t\t\t\t\t\tunsupportedExtension.manifest.publisher,\n\t\t\t\t\t\t\t\tunsupportedExtension.manifest.name,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tgetExtensionId(\n\t\t\t\t\t\t\t\tpreReleaseExtension.manifest.publisher,\n\t\t\t\t\t\t\t\tpreReleaseExtension.manifest.name,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlogService.info(\n\t\t\t\t\t\t\t`Added pre-release extension to the storage migration list`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlogService.info(\n\t\t\t\t\t`Migrated '${unsupportedExtension.identifier.id}' extension to '${preReleaseExtensionId}' extension.`,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tlogService.error(error);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
