{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionManagement/common/unsupportedExtensionsMigration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IExtensionGalleryService, IExtensionManagementService, IGlobalExtensionEnablementService, InstallOperation } from './extensionManagement.js';\nimport { areSameExtensions, getExtensionId } from './extensionManagementUtil.js';\nimport { IExtensionStorageService } from './extensionStorage.js';\nimport { ExtensionType } from '../../extensions/common/extensions.js';\nimport { ILogService } from '../../log/common/log.js';\n\n/**\n * Migrates the installed unsupported nightly extension to a supported pre-release extension. It includes following:\n * \t- Uninstall the Unsupported extension\n * \t- Install (with optional storage migration) the Pre-release extension only if\n * \t\t- the extension is not installed\n * \t\t- or it is a release version and the unsupported extension is enabled.\n */\nexport async function migrateUnsupportedExtensions(extensionManagementService: IExtensionManagementService, galleryService: IExtensionGalleryService, extensionStorageService: IExtensionStorageService, extensionEnablementService: IGlobalExtensionEnablementService, logService: ILogService): Promise<void> {\n\ttry {\n\t\tconst extensionsControlManifest = await extensionManagementService.getExtensionsControlManifest();\n\t\tif (!extensionsControlManifest.deprecated) {\n\t\t\treturn;\n\t\t}\n\t\tconst installed = await extensionManagementService.getInstalled(ExtensionType.User);\n\t\tfor (const [unsupportedExtensionId, deprecated] of Object.entries(extensionsControlManifest.deprecated)) {\n\t\t\tif (!deprecated?.extension) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { id: preReleaseExtensionId, autoMigrate, preRelease } = deprecated.extension;\n\t\t\tif (!autoMigrate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst unsupportedExtension = installed.find(i => areSameExtensions(i.identifier, { id: unsupportedExtensionId }));\n\t\t\t// Unsupported Extension is not installed\n\t\t\tif (!unsupportedExtension) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst gallery = (await galleryService.getExtensions([{ id: preReleaseExtensionId, preRelease }], { targetPlatform: await extensionManagementService.getTargetPlatform(), compatible: true }, CancellationToken.None))[0];\n\t\t\tif (!gallery) {\n\t\t\t\tlogService.info(`Skipping migrating '${unsupportedExtension.identifier.id}' extension because, the comaptible target '${preReleaseExtensionId}' extension is not found`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlogService.info(`Migrating '${unsupportedExtension.identifier.id}' extension to '${preReleaseExtensionId}' extension...`);\n\n\t\t\t\tconst isUnsupportedExtensionEnabled = !extensionEnablementService.getDisabledExtensions().some(e => areSameExtensions(e, unsupportedExtension.identifier));\n\t\t\t\tawait extensionManagementService.uninstall(unsupportedExtension);\n\t\t\t\tlogService.info(`Uninstalled the unsupported extension '${unsupportedExtension.identifier.id}'`);\n\n\t\t\t\tlet preReleaseExtension = installed.find(i => areSameExtensions(i.identifier, { id: preReleaseExtensionId }));\n\t\t\t\tif (!preReleaseExtension || (!preReleaseExtension.isPreReleaseVersion && isUnsupportedExtensionEnabled)) {\n\t\t\t\t\tpreReleaseExtension = await extensionManagementService.installFromGallery(gallery, { installPreReleaseVersion: true, isMachineScoped: unsupportedExtension.isMachineScoped, operation: InstallOperation.Migrate });\n\t\t\t\t\tlogService.info(`Installed the pre-release extension '${preReleaseExtension.identifier.id}'`);\n\t\t\t\t\tif (!isUnsupportedExtensionEnabled) {\n\t\t\t\t\t\tawait extensionEnablementService.disableExtension(preReleaseExtension.identifier);\n\t\t\t\t\t\tlogService.info(`Disabled the pre-release extension '${preReleaseExtension.identifier.id}' because the unsupported extension '${unsupportedExtension.identifier.id}' is disabled`);\n\t\t\t\t\t}\n\t\t\t\t\tif (autoMigrate.storage) {\n\t\t\t\t\t\textensionStorageService.addToMigrationList(getExtensionId(unsupportedExtension.manifest.publisher, unsupportedExtension.manifest.name), getExtensionId(preReleaseExtension.manifest.publisher, preReleaseExtension.manifest.name));\n\t\t\t\t\t\tlogService.info(`Added pre-release extension to the storage migration list`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlogService.info(`Migrated '${unsupportedExtension.identifier.id}' extension to '${preReleaseExtensionId}' extension.`);\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tlogService.error(error);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,0BAA0B,6BAA6B,mCAAmC,wBAAwB;AAC3H,SAAS,mBAAmB,sBAAsB;AAClD,SAAS,gCAAgC;AACzC,SAAS,qBAAqB;AAC9B,SAAS,mBAAmB;AAS5B,eAAsB,6BAA6B,4BAAyD,gBAA0C,yBAAmD,4BAA+D,YAAwC;AAC/S,MAAI;AACH,UAAM,4BAA4B,MAAM,2BAA2B,6BAA6B;AAChG,QAAI,CAAC,0BAA0B,YAAY;AAC1C;AAAA,IACD;AACA,UAAM,YAAY,MAAM,2BAA2B,aAAa,cAAc,IAAI;AAClF,eAAW,CAAC,wBAAwB,UAAU,KAAK,OAAO,QAAQ,0BAA0B,UAAU,GAAG;AACxG,UAAI,CAAC,YAAY,WAAW;AAC3B;AAAA,MACD;AACA,YAAM,EAAE,IAAI,uBAAuB,aAAa,WAAW,IAAI,WAAW;AAC1E,UAAI,CAAC,aAAa;AACjB;AAAA,MACD;AACA,YAAM,uBAAuB,UAAU,KAAK,OAAK,kBAAkB,EAAE,YAAY,EAAE,IAAI,uBAAuB,CAAC,CAAC;AAEhH,UAAI,CAAC,sBAAsB;AAC1B;AAAA,MACD;AAEA,YAAM,WAAW,MAAM,eAAe,cAAc,CAAC,EAAE,IAAI,uBAAuB,WAAW,CAAC,GAAG,EAAE,gBAAgB,MAAM,2BAA2B,kBAAkB,GAAG,YAAY,KAAK,GAAG,kBAAkB,IAAI,GAAG,CAAC;AACvN,UAAI,CAAC,SAAS;AACb,mBAAW,KAAK,uBAAuB,qBAAqB,WAAW,EAAE,+CAA+C,qBAAqB,0BAA0B;AACvK;AAAA,MACD;AAEA,UAAI;AACH,mBAAW,KAAK,cAAc,qBAAqB,WAAW,EAAE,mBAAmB,qBAAqB,gBAAgB;AAExH,cAAM,gCAAgC,CAAC,2BAA2B,sBAAsB,EAAE,KAAK,OAAK,kBAAkB,GAAG,qBAAqB,UAAU,CAAC;AACzJ,cAAM,2BAA2B,UAAU,oBAAoB;AAC/D,mBAAW,KAAK,0CAA0C,qBAAqB,WAAW,EAAE,GAAG;AAE/F,YAAI,sBAAsB,UAAU,KAAK,OAAK,kBAAkB,EAAE,YAAY,EAAE,IAAI,sBAAsB,CAAC,CAAC;AAC5G,YAAI,CAAC,uBAAwB,CAAC,oBAAoB,uBAAuB,+BAAgC;AACxG,gCAAsB,MAAM,2BAA2B,mBAAmB,SAAS,EAAE,0BAA0B,MAAM,iBAAiB,qBAAqB,iBAAiB,WAAW,iBAAiB,QAAQ,CAAC;AACjN,qBAAW,KAAK,wCAAwC,oBAAoB,WAAW,EAAE,GAAG;AAC5F,cAAI,CAAC,+BAA+B;AACnC,kBAAM,2BAA2B,iBAAiB,oBAAoB,UAAU;AAChF,uBAAW,KAAK,uCAAuC,oBAAoB,WAAW,EAAE,wCAAwC,qBAAqB,WAAW,EAAE,eAAe;AAAA,UAClL;AACA,cAAI,YAAY,SAAS;AACxB,oCAAwB,mBAAmB,eAAe,qBAAqB,SAAS,WAAW,qBAAqB,SAAS,IAAI,GAAG,eAAe,oBAAoB,SAAS,WAAW,oBAAoB,SAAS,IAAI,CAAC;AACjO,uBAAW,KAAK,2DAA2D;AAAA,UAC5E;AAAA,QACD;AACA,mBAAW,KAAK,aAAa,qBAAqB,WAAW,EAAE,mBAAmB,qBAAqB,cAAc;AAAA,MACtH,SAAS,OAAO;AACf,mBAAW,MAAM,KAAK;AAAA,MACvB;AAAA,IACD;AAAA,EACD,SAAS,OAAO;AACf,eAAW,MAAM,KAAK;AAAA,EACvB;AACD;AAvDsB;",
  "names": []
}
