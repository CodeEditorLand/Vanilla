var E=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var S=(d,a,t,e)=>{for(var n=e>1?void 0:e?x(a,t):a,i=d.length-1,o;i>=0;i--)(o=d[i])&&(n=(e?o(a,t,n):o(n))||n);return e&&n&&E(a,t,n),n},y=(d,a)=>(t,e)=>a(t,e,d);import{distinct as h}from"../../../base/common/arrays.js";import{Emitter as f}from"../../../base/common/event.js";import{Disposable as m,DisposableStore as u}from"../../../base/common/lifecycle.js";import{isString as v}from"../../../base/common/types.js";import{createDecorator as p}from"../../instantiation/common/instantiation.js";import{ILogService as L}from"../../log/common/log.js";import{IProductService as K}from"../../product/common/productService.js";import{IStorageService as C,StorageScope as s,StorageTarget as I}from"../../storage/common/storage.js";import{adoptToGalleryExtensionId as F,areSameExtensions as O,getExtensionId as T}from"./extensionManagementUtil.js";const _=p("IExtensionStorageService"),W=/^extensionKeys\/([^.]+\..+)@(\d+\.\d+\.\d+(-.*)?)$/;let r=class extends m{constructor(t,e,n){super();this.storageService=t;this.productService=e;this.logService=n;this.extensionsWithKeysForSync=r.readAllExtensionsWithKeysForSync(t),this._register(this.storageService.onDidChangeValue(s.PROFILE,void 0,this._register(new u))(i=>this.onDidChangeStorageValue(i)))}_serviceBrand;static LARGE_STATE_WARNING_THRESHOLD=512*1024;static toKey(t){return`extensionKeys/${F(t.id)}@${t.version}`}static fromKey(t){const e=W.exec(t);if(e&&e[1])return{id:e[1],version:e[2]}}static async removeOutdatedExtensionVersions(t,e){const n=await t.getInstalled(),i=[];for(const[o,g]of r.readAllExtensionsWithKeysForSync(e)){const l=n.find(c=>O(c.identifier,{id:o}))?.manifest.version;for(const c of g)l!==c&&i.push(r.toKey({id:o,version:c}))}for(const o of i)e.remove(o,s.PROFILE)}static readAllExtensionsWithKeysForSync(t){const e=new Map,n=t.keys(s.PROFILE,I.MACHINE);for(const i of n){const o=r.fromKey(i);if(o){let g=e.get(o.id.toLowerCase());g||e.set(o.id.toLowerCase(),g=[]),g.push(o.version)}}return e}_onDidChangeExtensionStorageToSync=this._register(new f);onDidChangeExtensionStorageToSync=this._onDidChangeExtensionStorageToSync.event;extensionsWithKeysForSync;onDidChangeStorageValue(t){if(this.extensionsWithKeysForSync.has(t.key.toLowerCase())){this._onDidChangeExtensionStorageToSync.fire();return}const e=r.fromKey(t.key);if(e){if(this.storageService.get(t.key,s.PROFILE)===void 0)this.extensionsWithKeysForSync.delete(e.id.toLowerCase());else{let n=this.extensionsWithKeysForSync.get(e.id.toLowerCase());n||this.extensionsWithKeysForSync.set(e.id.toLowerCase(),n=[]),n.push(e.version),this._onDidChangeExtensionStorageToSync.fire()}return}}getExtensionId(t){if(v(t))return t;const e=t.manifest?t.manifest.publisher:t.publisher,n=t.manifest?t.manifest.name:t.name;return T(e,n)}getExtensionState(t,e){const n=this.getExtensionId(t),i=this.getExtensionStateRaw(t,e);if(i)try{return JSON.parse(i)}catch(o){this.logService.error(`[mainThreadStorage] unexpected error parsing storage contents (extensionId: ${n}, global: ${e}): ${o}`)}}getExtensionStateRaw(t,e){const n=this.getExtensionId(t),i=this.storageService.get(n,e?s.PROFILE:s.WORKSPACE);return i&&i?.length>r.LARGE_STATE_WARNING_THRESHOLD&&this.logService.warn(`[mainThreadStorage] large extension state detected (extensionId: ${n}, global: ${e}): ${i.length/1024}kb. Consider to use 'storageUri' or 'globalStorageUri' to store this data on disk instead.`),i}setExtensionState(t,e,n){const i=this.getExtensionId(t);e===void 0?this.storageService.remove(i,n?s.PROFILE:s.WORKSPACE):this.storageService.store(i,JSON.stringify(e),n?s.PROFILE:s.WORKSPACE,I.MACHINE)}setKeysForSync(t,e){this.storageService.store(r.toKey(t),JSON.stringify(e),s.PROFILE,I.MACHINE)}getKeysForSync(t){const e=this.productService.extensionSyncedKeys?.[t.id.toLowerCase()],n=this.storageService.get(r.toKey(t),s.PROFILE),i=n?JSON.parse(n):void 0;return i&&e?h([...i,...e]):i||e}addToMigrationList(t,e){if(t!==e){const n=this.migrationList.filter(i=>!i.includes(t)&&!i.includes(e));n.push([t,e]),this.migrationList=n}}getSourceExtensionToMigrate(t){const e=this.migrationList.find(([,n])=>t===n);return e?e[0]:void 0}get migrationList(){const t=this.storageService.get("extensionStorage.migrationList",s.APPLICATION,"[]");try{const e=JSON.parse(t);if(Array.isArray(e))return e}catch{}return[]}set migrationList(t){t.length?this.storageService.store("extensionStorage.migrationList",JSON.stringify(t),s.APPLICATION,I.MACHINE):this.storageService.remove("extensionStorage.migrationList",s.APPLICATION)}};r=S([y(0,C),y(1,K),y(2,L)],r);export{r as ExtensionStorageService,_ as IExtensionStorageService};
