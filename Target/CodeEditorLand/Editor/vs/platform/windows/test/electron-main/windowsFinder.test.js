import l from"assert";import"../../../../base/common/cancellation.js";import{Event as d}from"../../../../base/common/event.js";import{join as t}from"../../../../base/common/path.js";import{extUriBiasedIgnorePathCase as v}from"../../../../base/common/resources.js";import{URI as i}from"../../../../base/common/uri.js";import"../../../action/common/action.js";import"../../../environment/common/argv.js";import"../../../window/common/window.js";import"../../../window/electron-main/window.js";import{findWindowOnFile as a}from"../../electron-main/windowsFinder.js";import{toWorkspaceFolders as E}from"../../../workspaces/common/workspaces.js";import"../../../workspace/common/workspace.js";import{FileAccess as W}from"../../../../base/common/network.js";import{ensureNoDisposablesAreLeakedInTestSuite as g}from"../../../../base/test/common/utils.js";suite("WindowsFinder",()=>{const o=W.asFileUri("vs/platform/windows/test/electron-main/fixtures").fsPath,m={id:Date.now().toString(),configPath:i.file(t(o,"workspaces.json"))},u=E([{path:t(o,"vscode_workspace_1_folder")},{path:t(o,"vscode_workspace_2_folder")}],m.configPath,v),r=async e=>e===m?{id:m.id,configPath:e.configPath,folders:u}:void 0;function s(e){return new class{onWillLoad=d.None;onDidMaximize=d.None;onDidUnmaximize=d.None;onDidTriggerSystemContextMenu=d.None;onDidSignalReady=d.None;onDidClose=d.None;onDidDestroy=d.None;onDidEnterFullScreen=d.None;onDidLeaveFullScreen=d.None;whenClosedOrLoaded=Promise.resolve();id=-1;win=null;config;openedWorkspace=e.openedFolderUri?{id:"",uri:e.openedFolderUri}:e.openedWorkspace;backupPath;remoteAuthority;isExtensionDevelopmentHost=!1;isExtensionTestHost=!1;lastFocusTime=e.lastFocusTime;isFullScreen=!1;isReady=!0;ready(){throw new Error("Method not implemented.")}setReady(){throw new Error("Method not implemented.")}addTabbedWindow(n){throw new Error("Method not implemented.")}load(n,p){throw new Error("Method not implemented.")}reload(n){throw new Error("Method not implemented.")}focus(n){throw new Error("Method not implemented.")}close(){throw new Error("Method not implemented.")}getBounds(){throw new Error("Method not implemented.")}send(n,...p){throw new Error("Method not implemented.")}sendWhenReady(n,p,...F){throw new Error("Method not implemented.")}toggleFullScreen(){throw new Error("Method not implemented.")}setRepresentedFilename(n){throw new Error("Method not implemented.")}getRepresentedFilename(){throw new Error("Method not implemented.")}setDocumentEdited(n){throw new Error("Method not implemented.")}isDocumentEdited(){throw new Error("Method not implemented.")}handleTitleDoubleClick(){throw new Error("Method not implemented.")}updateTouchBar(n){throw new Error("Method not implemented.")}serializeWindowState(){throw new Error("Method not implemented")}updateWindowControls(n){throw new Error("Method not implemented.")}notifyZoomLevel(n){throw new Error("Method not implemented.")}matches(n){throw new Error("Method not implemented.")}dispose(){}}}const w=s({lastFocusTime:1,openedFolderUri:i.file(t(o,"vscode_folder"))}),h=s({lastFocusTime:3,openedFolderUri:void 0}),c=s({lastFocusTime:2,openedFolderUri:i.file(t(o,"no_vscode_folder"))}),f=[w,h,c];test("New window without folder when no windows exist",async()=>{l.strictEqual(await a([],i.file("nonexisting"),r),void 0),l.strictEqual(await a([],i.file(t(o,"no_vscode_folder","file.txt")),r),void 0)}),test("Existing window with folder",async()=>{l.strictEqual(await a(f,i.file(t(o,"no_vscode_folder","file.txt")),r),c),l.strictEqual(await a(f,i.file(t(o,"vscode_folder","file.txt")),r),w);const e=s({lastFocusTime:1,openedFolderUri:i.file(t(o,"vscode_folder","nested_folder"))});l.strictEqual(await a([e],i.file(t(o,"vscode_folder","nested_folder","subfolder","file.txt")),r),e)}),test("More specific existing window wins",async()=>{const e=s({lastFocusTime:2,openedFolderUri:i.file(t(o,"no_vscode_folder"))}),n=s({lastFocusTime:1,openedFolderUri:i.file(t(o,"no_vscode_folder","nested_folder"))});l.strictEqual(await a([e,n],i.file(t(o,"no_vscode_folder","nested_folder","subfolder","file.txt")),r),n)}),test("Workspace folder wins",async()=>{const e=s({lastFocusTime:1,openedWorkspace:m});l.strictEqual(await a([e],i.file(t(o,"vscode_workspace_2_folder","nested_vscode_folder","subfolder","file.txt")),r),e)}),g()});
