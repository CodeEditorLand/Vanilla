{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/windows/test/electron-main/windowsFinder.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { join } from '../../../../base/common/path.js';\nimport { extUriBiasedIgnorePathCase } from '../../../../base/common/resources.js';\nimport { URI, UriDto } from '../../../../base/common/uri.js';\nimport { ICommandAction } from '../../../action/common/action.js';\nimport { NativeParsedArgs } from '../../../environment/common/argv.js';\nimport { INativeWindowConfiguration } from '../../../window/common/window.js';\nimport { ICodeWindow, ILoadEvent, IWindowState } from '../../../window/electron-main/window.js';\nimport { findWindowOnFile } from '../../electron-main/windowsFinder.js';\nimport { toWorkspaceFolders } from '../../../workspaces/common/workspaces.js';\nimport { IWorkspaceIdentifier } from '../../../workspace/common/workspace.js';\nimport { FileAccess } from '../../../../base/common/network.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('WindowsFinder', () => {\n\n\tconst fixturesFolder = FileAccess.asFileUri('vs/platform/windows/test/electron-main/fixtures').fsPath;\n\n\tconst testWorkspace: IWorkspaceIdentifier = {\n\t\tid: Date.now().toString(),\n\t\tconfigPath: URI.file(join(fixturesFolder, 'workspaces.json'))\n\t};\n\n\tconst testWorkspaceFolders = toWorkspaceFolders([{ path: join(fixturesFolder, 'vscode_workspace_1_folder') }, { path: join(fixturesFolder, 'vscode_workspace_2_folder') }], testWorkspace.configPath, extUriBiasedIgnorePathCase);\n\tconst localWorkspaceResolver = async (workspace: any) => { return workspace === testWorkspace ? { id: testWorkspace.id, configPath: workspace.configPath, folders: testWorkspaceFolders } : undefined; };\n\n\tfunction createTestCodeWindow(options: { lastFocusTime: number; openedFolderUri?: URI; openedWorkspace?: IWorkspaceIdentifier }): ICodeWindow {\n\t\treturn new class implements ICodeWindow {\n\t\t\tonWillLoad: Event<ILoadEvent> = Event.None;\n\t\t\tonDidMaximize = Event.None;\n\t\t\tonDidUnmaximize = Event.None;\n\t\t\tonDidTriggerSystemContextMenu: Event<{ x: number; y: number }> = Event.None;\n\t\t\tonDidSignalReady: Event<void> = Event.None;\n\t\t\tonDidClose: Event<void> = Event.None;\n\t\t\tonDidDestroy: Event<void> = Event.None;\n\t\t\tonDidEnterFullScreen: Event<void> = Event.None;\n\t\t\tonDidLeaveFullScreen: Event<void> = Event.None;\n\t\t\twhenClosedOrLoaded: Promise<void> = Promise.resolve();\n\t\t\tid: number = -1;\n\t\t\twin: Electron.BrowserWindow = null!;\n\t\t\tconfig: INativeWindowConfiguration | undefined;\n\t\t\topenedWorkspace = options.openedFolderUri ? { id: '', uri: options.openedFolderUri } : options.openedWorkspace;\n\t\t\tbackupPath?: string | undefined;\n\t\t\tremoteAuthority?: string | undefined;\n\t\t\tisExtensionDevelopmentHost = false;\n\t\t\tisExtensionTestHost = false;\n\t\t\tlastFocusTime = options.lastFocusTime;\n\t\t\tisFullScreen = false;\n\t\t\tisReady = true;\n\n\t\t\tready(): Promise<ICodeWindow> { throw new Error('Method not implemented.'); }\n\t\t\tsetReady(): void { throw new Error('Method not implemented.'); }\n\t\t\taddTabbedWindow(window: ICodeWindow): void { throw new Error('Method not implemented.'); }\n\t\t\tload(config: INativeWindowConfiguration, options: { isReload?: boolean }): void { throw new Error('Method not implemented.'); }\n\t\t\treload(cli?: NativeParsedArgs): void { throw new Error('Method not implemented.'); }\n\t\t\tfocus(options?: { force: boolean }): void { throw new Error('Method not implemented.'); }\n\t\t\tclose(): void { throw new Error('Method not implemented.'); }\n\t\t\tgetBounds(): Electron.Rectangle { throw new Error('Method not implemented.'); }\n\t\t\tsend(channel: string, ...args: any[]): void { throw new Error('Method not implemented.'); }\n\t\t\tsendWhenReady(channel: string, token: CancellationToken, ...args: any[]): void { throw new Error('Method not implemented.'); }\n\t\t\ttoggleFullScreen(): void { throw new Error('Method not implemented.'); }\n\t\t\tsetRepresentedFilename(name: string): void { throw new Error('Method not implemented.'); }\n\t\t\tgetRepresentedFilename(): string | undefined { throw new Error('Method not implemented.'); }\n\t\t\tsetDocumentEdited(edited: boolean): void { throw new Error('Method not implemented.'); }\n\t\t\tisDocumentEdited(): boolean { throw new Error('Method not implemented.'); }\n\t\t\thandleTitleDoubleClick(): void { throw new Error('Method not implemented.'); }\n\t\t\tupdateTouchBar(items: UriDto<ICommandAction>[][]): void { throw new Error('Method not implemented.'); }\n\t\t\tserializeWindowState(): IWindowState { throw new Error('Method not implemented'); }\n\t\t\tupdateWindowControls(options: { height?: number | undefined; backgroundColor?: string | undefined; foregroundColor?: string | undefined }): void { throw new Error('Method not implemented.'); }\n\t\t\tnotifyZoomLevel(level: number): void { throw new Error('Method not implemented.'); }\n\t\t\tmatches(webContents: any): boolean { throw new Error('Method not implemented.'); }\n\t\t\tdispose(): void { }\n\t\t};\n\t}\n\n\tconst vscodeFolderWindow: ICodeWindow = createTestCodeWindow({ lastFocusTime: 1, openedFolderUri: URI.file(join(fixturesFolder, 'vscode_folder')) });\n\tconst lastActiveWindow: ICodeWindow = createTestCodeWindow({ lastFocusTime: 3, openedFolderUri: undefined });\n\tconst noVscodeFolderWindow: ICodeWindow = createTestCodeWindow({ lastFocusTime: 2, openedFolderUri: URI.file(join(fixturesFolder, 'no_vscode_folder')) });\n\tconst windows: ICodeWindow[] = [\n\t\tvscodeFolderWindow,\n\t\tlastActiveWindow,\n\t\tnoVscodeFolderWindow,\n\t];\n\n\ttest('New window without folder when no windows exist', async () => {\n\t\tassert.strictEqual(await findWindowOnFile([], URI.file('nonexisting'), localWorkspaceResolver), undefined);\n\t\tassert.strictEqual(await findWindowOnFile([], URI.file(join(fixturesFolder, 'no_vscode_folder', 'file.txt')), localWorkspaceResolver), undefined);\n\t});\n\n\ttest('Existing window with folder', async () => {\n\t\tassert.strictEqual(await findWindowOnFile(windows, URI.file(join(fixturesFolder, 'no_vscode_folder', 'file.txt')), localWorkspaceResolver), noVscodeFolderWindow);\n\n\t\tassert.strictEqual(await findWindowOnFile(windows, URI.file(join(fixturesFolder, 'vscode_folder', 'file.txt')), localWorkspaceResolver), vscodeFolderWindow);\n\n\t\tconst window: ICodeWindow = createTestCodeWindow({ lastFocusTime: 1, openedFolderUri: URI.file(join(fixturesFolder, 'vscode_folder', 'nested_folder')) });\n\t\tassert.strictEqual(await findWindowOnFile([window], URI.file(join(fixturesFolder, 'vscode_folder', 'nested_folder', 'subfolder', 'file.txt')), localWorkspaceResolver), window);\n\t});\n\n\ttest('More specific existing window wins', async () => {\n\t\tconst window: ICodeWindow = createTestCodeWindow({ lastFocusTime: 2, openedFolderUri: URI.file(join(fixturesFolder, 'no_vscode_folder')) });\n\t\tconst nestedFolderWindow: ICodeWindow = createTestCodeWindow({ lastFocusTime: 1, openedFolderUri: URI.file(join(fixturesFolder, 'no_vscode_folder', 'nested_folder')) });\n\t\tassert.strictEqual(await findWindowOnFile([window, nestedFolderWindow], URI.file(join(fixturesFolder, 'no_vscode_folder', 'nested_folder', 'subfolder', 'file.txt')), localWorkspaceResolver), nestedFolderWindow);\n\t});\n\n\ttest('Workspace folder wins', async () => {\n\t\tconst window: ICodeWindow = createTestCodeWindow({ lastFocusTime: 1, openedWorkspace: testWorkspace });\n\t\tassert.strictEqual(await findWindowOnFile([window], URI.file(join(fixturesFolder, 'vscode_workspace_2_folder', 'nested_vscode_folder', 'subfolder', 'file.txt')), localWorkspaceResolver), window);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["options"]
}
