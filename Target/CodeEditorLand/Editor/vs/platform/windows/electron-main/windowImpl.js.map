{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/windows/electron-main/windowImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { release } from \"os\";\nimport electron, { type BrowserWindowConstructorOptions } from \"electron\";\nimport { isESM } from \"../../../base/common/amd.js\";\nimport {\n\tDeferredPromise,\n\tRunOnceScheduler,\n\ttimeout,\n} from \"../../../base/common/async.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { FileAccess, Schemas } from \"../../../base/common/network.js\";\nimport { getMarks, mark } from \"../../../base/common/performance.js\";\nimport {\n\tisBigSurOrNewer,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport { ThemeIcon } from \"../../../base/common/themables.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { ISerializableCommandAction } from \"../../action/common/action.js\";\nimport { IBackupMainService } from \"../../backup/electron-main/backup.js\";\nimport {\n\ttype IConfigurationChangeEvent,\n\tIConfigurationService,\n} from \"../../configuration/common/configuration.js\";\nimport { IDialogMainService } from \"../../dialogs/electron-main/dialogMainService.js\";\nimport type { NativeParsedArgs } from \"../../environment/common/argv.js\";\nimport { IEnvironmentMainService } from \"../../environment/electron-main/environmentMainService.js\";\nimport { isLaunchedFromCli } from \"../../environment/node/argvHelper.js\";\nimport { resolveMarketplaceHeaders } from \"../../externalServices/common/marketplace.js\";\nimport { IFileService } from \"../../files/common/files.js\";\nimport { IInstantiationService } from \"../../instantiation/common/instantiation.js\";\nimport { ILifecycleMainService } from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { ILoggerMainService } from \"../../log/electron-main/loggerService.js\";\nimport { IPolicyService } from \"../../policy/common/policy.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { IProtocolMainService } from \"../../protocol/electron-main/protocol.js\";\nimport { IStateService } from \"../../state/node/state.js\";\nimport {\n\tIApplicationStorageMainService,\n\tIStorageMainService,\n} from \"../../storage/electron-main/storageMainService.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport { IThemeMainService } from \"../../theme/electron-main/themeMainService.js\";\nimport type { IUserDataProfile } from \"../../userDataProfile/common/userDataProfile.js\";\nimport { IUserDataProfilesMainService } from \"../../userDataProfile/electron-main/userDataProfile.js\";\nimport {\n\tDEFAULT_CUSTOM_TITLEBAR_HEIGHT,\n\ttype IFolderToOpen,\n\ttype INativeWindowConfiguration,\n\ttype IWindowSettings,\n\ttype IWorkspaceToOpen,\n\ttype MenuBarVisibility,\n\tTitlebarStyle,\n\tgetMenuBarVisibility,\n\thasNativeTitlebar,\n\tuseNativeFullScreen,\n\tuseWindowControlsOverlay,\n} from \"../../window/common/window.js\";\nimport {\n\ttype IBaseWindow,\n\ttype ICodeWindow,\n\ttype ILoadEvent,\n\ttype IWindowState,\n\tLoadReason,\n\tWindowError,\n\tWindowMode,\n\tdefaultWindowState,\n} from \"../../window/electron-main/window.js\";\nimport {\n\ttype ISingleFolderWorkspaceIdentifier,\n\ttype IWorkspaceIdentifier,\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceIdentifier,\n\ttoWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\nimport { IWorkspacesManagementMainService } from \"../../workspaces/electron-main/workspacesManagementMainService.js\";\nimport {\n\tIWindowsMainService,\n\tOpenContext,\n\tWindowStateValidator,\n\tdefaultBrowserWindowOptions,\n} from \"./windows.js\";\n\nexport interface IWindowCreationOptions {\n\treadonly state: IWindowState;\n\treadonly extensionDevelopmentPath?: string[];\n\treadonly isExtensionTestHost?: boolean;\n}\n\ninterface ITouchBarSegment extends electron.SegmentedControlSegment {\n\treadonly id: string;\n}\n\ninterface ILoadOptions {\n\treadonly isReload?: boolean;\n\treadonly disableExtensions?: boolean;\n}\n\nenum ReadyState {\n\t/**\n\t * This window has not loaded anything yet\n\t * and this is the initial state of every\n\t * window.\n\t */\n\tNONE = 0,\n\n\t/**\n\t * This window is navigating, either for the\n\t * first time or subsequent times.\n\t */\n\tNAVIGATING = 1,\n\n\t/**\n\t * This window has finished loading and is ready\n\t * to forward IPC requests to the web contents.\n\t */\n\tREADY = 2,\n}\n\nexport abstract class BaseWindow extends Disposable implements IBaseWindow {\n\t//#region Events\n\n\tprivate readonly _onDidClose = this._register(new Emitter<void>());\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate readonly _onDidMaximize = this._register(new Emitter<void>());\n\treadonly onDidMaximize = this._onDidMaximize.event;\n\n\tprivate readonly _onDidUnmaximize = this._register(new Emitter<void>());\n\treadonly onDidUnmaximize = this._onDidUnmaximize.event;\n\n\tprivate readonly _onDidTriggerSystemContextMenu = this._register(\n\t\tnew Emitter<{ x: number; y: number }>(),\n\t);\n\treadonly onDidTriggerSystemContextMenu =\n\t\tthis._onDidTriggerSystemContextMenu.event;\n\n\tprivate readonly _onDidEnterFullScreen = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidEnterFullScreen = this._onDidEnterFullScreen.event;\n\n\tprivate readonly _onDidLeaveFullScreen = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidLeaveFullScreen = this._onDidLeaveFullScreen.event;\n\n\t//#endregion\n\n\tabstract readonly id: number;\n\n\tprotected _lastFocusTime = Date.now(); // window is shown on creation so take current time\n\tget lastFocusTime(): number {\n\t\treturn this._lastFocusTime;\n\t}\n\n\tprotected _win: electron.BrowserWindow | null = null;\n\tget win() {\n\t\treturn this._win;\n\t}\n\tprotected setWin(\n\t\twin: electron.BrowserWindow,\n\t\toptions?: BrowserWindowConstructorOptions,\n\t): void {\n\t\tthis._win = win;\n\n\t\t// Window Events\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\twin,\n\t\t\t\t\"maximize\",\n\t\t\t)(() => this._onDidMaximize.fire()),\n\t\t);\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\twin,\n\t\t\t\t\"unmaximize\",\n\t\t\t)(() => this._onDidUnmaximize.fire()),\n\t\t);\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\twin,\n\t\t\t\t\"closed\",\n\t\t\t)(() => {\n\t\t\t\tthis._onDidClose.fire();\n\n\t\t\t\tthis.dispose();\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\twin,\n\t\t\t\t\"focus\",\n\t\t\t)(() => {\n\t\t\t\tthis._lastFocusTime = Date.now();\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\tthis._win,\n\t\t\t\t\"enter-full-screen\",\n\t\t\t)(() => this._onDidEnterFullScreen.fire()),\n\t\t);\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\tthis._win,\n\t\t\t\t\"leave-full-screen\",\n\t\t\t)(() => this._onDidLeaveFullScreen.fire()),\n\t\t);\n\n\t\t// Sheet Offsets\n\t\tconst useCustomTitleStyle = !hasNativeTitlebar(\n\t\t\tthis.configurationService,\n\t\t\toptions?.titleBarStyle === \"hidden\"\n\t\t\t\t? TitlebarStyle.CUSTOM\n\t\t\t\t: undefined /* unknown */,\n\t\t);\n\t\tif (isMacintosh && useCustomTitleStyle) {\n\t\t\twin.setSheetOffset(isBigSurOrNewer(release()) ? 28 : 22); // offset dialogs by the height of the custom title bar if we have any\n\t\t}\n\n\t\t// Update the window controls immediately based on cached or default values\n\t\tif (\n\t\t\tuseCustomTitleStyle &&\n\t\t\t(useWindowControlsOverlay(this.configurationService) || isMacintosh)\n\t\t) {\n\t\t\tconst cachedWindowControlHeight = this.stateService.getItem<number>(\n\t\t\t\tBaseWindow.windowControlHeightStateStorageKey,\n\t\t\t);\n\t\t\tif (cachedWindowControlHeight) {\n\t\t\t\tthis.updateWindowControls({\n\t\t\t\t\theight: cachedWindowControlHeight,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.updateWindowControls({\n\t\t\t\t\theight: DEFAULT_CUSTOM_TITLEBAR_HEIGHT,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Windows Custom System Context Menu\n\t\t// See https://github.com/electron/electron/issues/24893\n\t\t//\n\t\t// The purpose of this is to allow for the context menu in the Windows Title Bar\n\t\t//\n\t\t// Currently, all mouse events in the title bar are captured by the OS\n\t\t// thus we need to capture them here with a window hook specific to Windows\n\t\t// and then forward them to the correct window.\n\t\tif (isWindows && useCustomTitleStyle) {\n\t\t\tconst WM_INITMENU = 0x0116; // https://docs.microsoft.com/en-us/windows/win32/menurc/wm-initmenu\n\n\t\t\t// This sets up a listener for the window hook. This is a Windows-only API provided by electron.\n\t\t\twin.hookWindowMessage(WM_INITMENU, () => {\n\t\t\t\tconst [x, y] = win.getPosition();\n\t\t\t\tconst cursorPos = electron.screen.getCursorScreenPoint();\n\t\t\t\tconst cx = cursorPos.x - x;\n\t\t\t\tconst cy = cursorPos.y - y;\n\n\t\t\t\t// In some cases, show the default system context menu\n\t\t\t\t// 1) The mouse position is not within the title bar\n\t\t\t\t// 2) The mouse position is within the title bar, but over the app icon\n\t\t\t\t// We do not know the exact title bar height but we make an estimate based on window height\n\t\t\t\tconst shouldTriggerDefaultSystemContextMenu = () => {\n\t\t\t\t\t// Use the custom context menu when over the title bar, but not over the app icon\n\t\t\t\t\t// The app icon is estimated to be 30px wide\n\t\t\t\t\t// The title bar is estimated to be the max of 35px and 15% of the window height\n\t\t\t\t\tif (\n\t\t\t\t\t\tcx > 30 &&\n\t\t\t\t\t\tcy >= 0 &&\n\t\t\t\t\t\tcy <= Math.max(win.getBounds().height * 0.15, 35)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\n\t\t\t\tif (!shouldTriggerDefaultSystemContextMenu()) {\n\t\t\t\t\t// This is necessary to make sure the native system context menu does not show up.\n\t\t\t\t\twin.setEnabled(false);\n\t\t\t\t\twin.setEnabled(true);\n\n\t\t\t\t\tthis._onDidTriggerSystemContextMenu.fire({ x: cx, y: cy });\n\t\t\t\t}\n\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\n\t\t// Open devtools if instructed from command line args\n\t\tif (this.environmentMainService.args[\"open-devtools\"] === true) {\n\t\t\twin.webContents.openDevTools();\n\t\t}\n\n\t\t// macOS: Window Fullscreen Transitions\n\t\tif (isMacintosh) {\n\t\t\tthis._register(\n\t\t\t\tthis.onDidEnterFullScreen(() => {\n\t\t\t\t\tthis.joinNativeFullScreenTransition?.complete(true);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tthis._register(\n\t\t\t\tthis.onDidLeaveFullScreen(() => {\n\t\t\t\t\tthis.joinNativeFullScreenTransition?.complete(true);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tconstructor(\n\t\tprotected readonly configurationService: IConfigurationService,\n\t\tprotected readonly stateService: IStateService,\n\t\tprotected readonly environmentMainService: IEnvironmentMainService,\n\t\tprotected readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected applyState(\n\t\tstate: IWindowState,\n\t\thasMultipleDisplays = electron.screen.getAllDisplays().length > 0,\n\t): void {\n\t\t// TODO@electron (Electron 4 regression): when running on multiple displays where the target display\n\t\t// to open the window has a larger resolution than the primary display, the window will not size\n\t\t// correctly unless we set the bounds again (https://github.com/microsoft/vscode/issues/74872)\n\t\t//\n\t\t// Extended to cover Windows as well as Mac (https://github.com/microsoft/vscode/issues/146499)\n\t\t//\n\t\t// However, when running with native tabs with multiple windows we cannot use this workaround\n\t\t// because there is a potential that the new window will be added as native tab instead of being\n\t\t// a window on its own. In that case calling setBounds() would cause https://github.com/microsoft/vscode/issues/75830\n\n\t\tconst windowSettings = this.configurationService.getValue<\n\t\t\tIWindowSettings | undefined\n\t\t>(\"window\");\n\t\tconst useNativeTabs =\n\t\t\tisMacintosh && windowSettings?.nativeTabs === true;\n\t\tif (\n\t\t\t(isMacintosh || isWindows) &&\n\t\t\thasMultipleDisplays &&\n\t\t\t(!useNativeTabs ||\n\t\t\t\telectron.BrowserWindow.getAllWindows().length === 1)\n\t\t) {\n\t\t\tif (\n\t\t\t\t[state.width, state.height, state.x, state.y].every(\n\t\t\t\t\t(value) => typeof value === \"number\",\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis._win?.setBounds({\n\t\t\t\t\twidth: state.width,\n\t\t\t\t\theight: state.height,\n\t\t\t\t\tx: state.x,\n\t\t\t\t\ty: state.y,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tstate.mode === WindowMode.Maximized ||\n\t\t\tstate.mode === WindowMode.Fullscreen\n\t\t) {\n\t\t\t// this call may or may not show the window, depends\n\t\t\t// on the platform: currently on Windows and Linux will\n\t\t\t// show the window as active. To be on the safe side,\n\t\t\t// we show the window at the end of this block.\n\t\t\tthis._win?.maximize();\n\n\t\t\tif (state.mode === WindowMode.Fullscreen) {\n\t\t\t\tthis.setFullScreen(true, true);\n\t\t\t}\n\n\t\t\t// to reduce flicker from the default window size\n\t\t\t// to maximize or fullscreen, we only show after\n\t\t\tthis._win?.show();\n\t\t}\n\t}\n\n\tprivate representedFilename: string | undefined;\n\n\tsetRepresentedFilename(filename: string): void {\n\t\tif (isMacintosh) {\n\t\t\tthis.win?.setRepresentedFilename(filename);\n\t\t} else {\n\t\t\tthis.representedFilename = filename;\n\t\t}\n\t}\n\n\tgetRepresentedFilename(): string | undefined {\n\t\tif (isMacintosh) {\n\t\t\treturn this.win?.getRepresentedFilename();\n\t\t}\n\n\t\treturn this.representedFilename;\n\t}\n\n\tprivate documentEdited: boolean | undefined;\n\n\tsetDocumentEdited(edited: boolean): void {\n\t\tif (isMacintosh) {\n\t\t\tthis.win?.setDocumentEdited(edited);\n\t\t}\n\n\t\tthis.documentEdited = edited;\n\t}\n\n\tisDocumentEdited(): boolean {\n\t\tif (isMacintosh) {\n\t\t\treturn Boolean(this.win?.isDocumentEdited());\n\t\t}\n\n\t\treturn !!this.documentEdited;\n\t}\n\n\tfocus(options?: { force: boolean }): void {\n\t\tif (isMacintosh && options?.force) {\n\t\t\telectron.app.focus({ steal: true });\n\t\t}\n\n\t\tconst win = this.win;\n\t\tif (!win) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (win.isMinimized()) {\n\t\t\twin.restore();\n\t\t}\n\n\t\twin.focus();\n\t}\n\n\thandleTitleDoubleClick(): void {\n\t\tconst win = this.win;\n\t\tif (!win) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Respect system settings on mac with regards to title click on windows title\n\t\tif (isMacintosh) {\n\t\t\tconst action = electron.systemPreferences.getUserDefault(\n\t\t\t\t\"AppleActionOnDoubleClick\",\n\t\t\t\t\"string\",\n\t\t\t);\n\t\t\tswitch (action) {\n\t\t\t\tcase \"Minimize\":\n\t\t\t\t\twin.minimize();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"None\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Maximize\":\n\t\t\t\tdefault:\n\t\t\t\t\tif (win.isMaximized()) {\n\t\t\t\t\t\twin.unmaximize();\n\t\t\t\t\t} else {\n\t\t\t\t\t\twin.maximize();\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Linux/Windows: just toggle maximize/minimized state\n\t\telse if (win.isMaximized()) {\n\t\t\twin.unmaximize();\n\t\t} else {\n\t\t\twin.maximize();\n\t\t}\n\t}\n\n\t//#region Window Control Overlays\n\n\tprivate static readonly windowControlHeightStateStorageKey =\n\t\t\"windowControlHeight\";\n\n\tprivate readonly hasWindowControlOverlay = useWindowControlsOverlay(\n\t\tthis.configurationService,\n\t);\n\n\tupdateWindowControls(options: {\n\t\theight?: number;\n\t\tbackgroundColor?: string;\n\t\tforegroundColor?: string;\n\t}): void {\n\t\tconst win = this.win;\n\t\tif (!win) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Cache the height for speeds lookups on startup\n\t\tif (options.height) {\n\t\t\tthis.stateService.setItem(\n\t\t\t\tCodeWindow.windowControlHeightStateStorageKey,\n\t\t\t\toptions.height,\n\t\t\t);\n\t\t}\n\n\t\t// Windows/Linux: window control overlay (WCO)\n\t\tif (this.hasWindowControlOverlay) {\n\t\t\twin.setTitleBarOverlay({\n\t\t\t\tcolor:\n\t\t\t\t\toptions.backgroundColor?.trim() === \"\"\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: options.backgroundColor,\n\t\t\t\tsymbolColor:\n\t\t\t\t\toptions.foregroundColor?.trim() === \"\"\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: options.foregroundColor,\n\t\t\t\theight: options.height ? options.height - 1 : undefined, // account for window border\n\t\t\t});\n\t\t}\n\n\t\t// macOS: traffic lights\n\t\telse if (isMacintosh && options.height !== undefined) {\n\t\t\tconst verticalOffset = (options.height - 15) / 2; // 15px is the height of the traffic lights\n\t\t\tif (verticalOffset) {\n\t\t\t\twin.setWindowButtonPosition({\n\t\t\t\t\tx: verticalOffset,\n\t\t\t\t\ty: verticalOffset,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\twin.setWindowButtonPosition(null);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Fullscreen\n\n\tprivate transientIsNativeFullScreen: boolean | undefined = undefined;\n\tprivate joinNativeFullScreenTransition:\n\t\t| DeferredPromise<boolean>\n\t\t| undefined = undefined;\n\n\ttoggleFullScreen(): void {\n\t\tthis.setFullScreen(!this.isFullScreen, false);\n\t}\n\n\tprotected setFullScreen(fullscreen: boolean, fromRestore: boolean): void {\n\t\t// Set fullscreen state\n\t\tif (useNativeFullScreen(this.configurationService)) {\n\t\t\tthis.setNativeFullScreen(fullscreen, fromRestore);\n\t\t} else {\n\t\t\tthis.setSimpleFullScreen(fullscreen);\n\t\t}\n\t}\n\n\tget isFullScreen(): boolean {\n\t\tif (\n\t\t\tisMacintosh &&\n\t\t\ttypeof this.transientIsNativeFullScreen === \"boolean\"\n\t\t) {\n\t\t\treturn this.transientIsNativeFullScreen;\n\t\t}\n\n\t\tconst win = this.win;\n\t\tconst isFullScreen = win?.isFullScreen();\n\t\tconst isSimpleFullScreen = win?.isSimpleFullScreen();\n\n\t\treturn Boolean(isFullScreen || isSimpleFullScreen);\n\t}\n\n\tprivate setNativeFullScreen(\n\t\tfullscreen: boolean,\n\t\tfromRestore: boolean,\n\t): void {\n\t\tconst win = this.win;\n\t\tif (win?.isSimpleFullScreen()) {\n\t\t\twin?.setSimpleFullScreen(false);\n\t\t}\n\n\t\tthis.doSetNativeFullScreen(fullscreen, fromRestore);\n\t}\n\n\tprivate doSetNativeFullScreen(\n\t\tfullscreen: boolean,\n\t\tfromRestore: boolean,\n\t): void {\n\t\tif (isMacintosh) {\n\t\t\t// macOS: Electron windows report `false` for `isFullScreen()` for as long\n\t\t\t// as the fullscreen transition animation takes place. As such, we need to\n\t\t\t// listen to the transition events and carry around an intermediate state\n\t\t\t// for knowing if we are in fullscreen or not\n\t\t\t// Refs: https://github.com/electron/electron/issues/35360\n\n\t\t\tthis.transientIsNativeFullScreen = fullscreen;\n\n\t\t\tconst joinNativeFullScreenTransition =\n\t\t\t\t(this.joinNativeFullScreenTransition =\n\t\t\t\t\tnew DeferredPromise<boolean>());\n\t\t\t(async () => {\n\t\t\t\tconst transitioned = await Promise.race([\n\t\t\t\t\tjoinNativeFullScreenTransition.p,\n\t\t\t\t\ttimeout(10000).then(() => false),\n\t\t\t\t]);\n\n\t\t\t\tif (\n\t\t\t\t\tthis.joinNativeFullScreenTransition !==\n\t\t\t\t\tjoinNativeFullScreenTransition\n\t\t\t\t) {\n\t\t\t\t\treturn; // another transition was requested later\n\t\t\t\t}\n\n\t\t\t\tthis.transientIsNativeFullScreen = undefined;\n\t\t\t\tthis.joinNativeFullScreenTransition = undefined;\n\n\t\t\t\t// There is one interesting gotcha on macOS: when you are opening a new\n\t\t\t\t// window from a fullscreen window, that new window will immediately\n\t\t\t\t// open fullscreen and emit the `enter-full-screen` event even before we\n\t\t\t\t// reach this method. In that case, we actually will timeout after 10s\n\t\t\t\t// for detecting the transition and as such it is important that we only\n\t\t\t\t// signal to leave fullscreen if the window reports as not being in fullscreen.\n\n\t\t\t\tif (\n\t\t\t\t\t!transitioned &&\n\t\t\t\t\tfullscreen &&\n\t\t\t\t\tfromRestore &&\n\t\t\t\t\tthis.win &&\n\t\t\t\t\t!this.win.isFullScreen()\n\t\t\t\t) {\n\t\t\t\t\t// We have seen requests for fullscreen failing eventually after some\n\t\t\t\t\t// time, for example when an OS update was performed and windows restore.\n\t\t\t\t\t// In those cases a user would find a window that is not in fullscreen\n\t\t\t\t\t// but also does not show any custom titlebar (and thus window controls)\n\t\t\t\t\t// because we think the window is in fullscreen.\n\t\t\t\t\t//\n\t\t\t\t\t// As a workaround in that case we emit a warning and leave fullscreen\n\t\t\t\t\t// so that at least the window controls are back.\n\n\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\"window: native macOS fullscreen transition did not happen within 10s from restoring\",\n\t\t\t\t\t);\n\n\t\t\t\t\tthis._onDidLeaveFullScreen.fire();\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\n\t\tconst win = this.win;\n\t\twin?.setFullScreen(fullscreen);\n\t}\n\n\tprivate setSimpleFullScreen(fullscreen: boolean): void {\n\t\tconst win = this.win;\n\t\tif (win?.isFullScreen()) {\n\t\t\tthis.doSetNativeFullScreen(false, false);\n\t\t}\n\n\t\twin?.setSimpleFullScreen(fullscreen);\n\t\twin?.webContents.focus(); // workaround issue where focus is not going into window\n\t}\n\n\t//#endregion\n\n\tabstract matches(webContents: electron.WebContents): boolean;\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._win = null!; // Important to dereference the window object to allow for GC\n\t}\n}\n\nexport class CodeWindow extends BaseWindow implements ICodeWindow {\n\t//#region Events\n\n\tprivate readonly _onWillLoad = this._register(new Emitter<ILoadEvent>());\n\treadonly onWillLoad = this._onWillLoad.event;\n\n\tprivate readonly _onDidSignalReady = this._register(new Emitter<void>());\n\treadonly onDidSignalReady = this._onDidSignalReady.event;\n\n\tprivate readonly _onDidDestroy = this._register(new Emitter<void>());\n\treadonly onDidDestroy = this._onDidDestroy.event;\n\n\t//#endregion\n\n\t//#region Properties\n\n\tprivate _id: number;\n\tget id(): number {\n\t\treturn this._id;\n\t}\n\n\tprotected override _win: electron.BrowserWindow;\n\n\tget backupPath(): string | undefined {\n\t\treturn this._config?.backupPath;\n\t}\n\n\tget openedWorkspace():\n\t\t| IWorkspaceIdentifier\n\t\t| ISingleFolderWorkspaceIdentifier\n\t\t| undefined {\n\t\treturn this._config?.workspace;\n\t}\n\n\tget profile(): IUserDataProfile | undefined {\n\t\tif (!this.config) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst profile = this.userDataProfilesService.profiles.find(\n\t\t\t(profile) => profile.id === this.config?.profiles.profile.id,\n\t\t);\n\t\tif (this.isExtensionDevelopmentHost && profile) {\n\t\t\treturn profile;\n\t\t}\n\n\t\treturn (\n\t\t\tthis.userDataProfilesService.getProfileForWorkspace(\n\t\t\t\tthis.config.workspace ??\n\t\t\t\t\ttoWorkspaceIdentifier(\n\t\t\t\t\t\tthis.backupPath,\n\t\t\t\t\t\tthis.isExtensionDevelopmentHost,\n\t\t\t\t\t),\n\t\t\t) ?? this.userDataProfilesService.defaultProfile\n\t\t);\n\t}\n\n\tget remoteAuthority(): string | undefined {\n\t\treturn this._config?.remoteAuthority;\n\t}\n\n\tprivate _config: INativeWindowConfiguration | undefined;\n\tget config(): INativeWindowConfiguration | undefined {\n\t\treturn this._config;\n\t}\n\n\tget isExtensionDevelopmentHost(): boolean {\n\t\treturn !!this._config?.extensionDevelopmentPath;\n\t}\n\n\tget isExtensionTestHost(): boolean {\n\t\treturn !!this._config?.extensionTestsPath;\n\t}\n\n\tget isExtensionDevelopmentTestFromCli(): boolean {\n\t\treturn (\n\t\t\tthis.isExtensionDevelopmentHost &&\n\t\t\tthis.isExtensionTestHost &&\n\t\t\t!this._config?.debugId\n\t\t);\n\t}\n\n\t//#endregion\n\n\tprivate readonly windowState: IWindowState;\n\tprivate currentMenuBarVisibility: MenuBarVisibility | undefined;\n\n\tprivate readonly whenReadyCallbacks: { (window: ICodeWindow): void }[] = [];\n\n\tprivate readonly touchBarGroups: electron.TouchBarSegmentedControl[] = [];\n\n\tprivate currentHttpProxy: string | undefined = undefined;\n\tprivate currentNoProxy: string | undefined = undefined;\n\n\tprivate customZoomLevel: number | undefined = undefined;\n\n\tprivate readonly configObjectUrl = this._register(\n\t\tthis.protocolMainService.createIPCObjectUrl<INativeWindowConfiguration>(),\n\t);\n\tprivate pendingLoadConfig: INativeWindowConfiguration | undefined;\n\tprivate wasLoaded = false;\n\n\tconstructor(\n\t\tconfig: IWindowCreationOptions,\n\t\t@ILogService logService: ILogService,\n\t\t@ILoggerMainService private readonly loggerMainService: ILoggerMainService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesService: IUserDataProfilesMainService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IApplicationStorageMainService private readonly applicationStorageMainService: IApplicationStorageMainService,\n\t\t@IStorageMainService private readonly storageMainService: IStorageMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IThemeMainService private readonly themeMainService: IThemeMainService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@IBackupMainService private readonly backupMainService: IBackupMainService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IDialogMainService private readonly dialogMainService: IDialogMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IProtocolMainService private readonly protocolMainService: IProtocolMainService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IStateService stateService: IStateService,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper(configurationService, stateService, environmentMainService, logService);\n\n\t\t//#region create browser window\n\t\t{\n\t\t\t// Load window state\n\t\t\tconst [state, hasMultipleDisplays] = this.restoreWindowState(config.state);\n\t\t\tthis.windowState = state;\n\t\t\tthis.logService.trace('window#ctor: using window state', state);\n\n\t\t\tconst options = instantiationService.invokeFunction(defaultBrowserWindowOptions, this.windowState, undefined, {\n\t\t\t\tpreload: FileAccess.asFileUri('vs/base/parts/sandbox/electron-sandbox/preload.js').fsPath,\n\t\t\t\tadditionalArguments: [`--vscode-window-config=${this.configObjectUrl.resource.toString()}`],\n\t\t\t\tv8CacheOptions: this.environmentMainService.useCodeCache ? 'bypassHeatCheck' : 'none',\n\t\t\t});\n\n\t\t\t// Create the browser window\n\t\t\tmark('code/willCreateCodeBrowserWindow');\n\t\t\tthis._win = new electron.BrowserWindow(options);\n\t\t\tmark('code/didCreateCodeBrowserWindow');\n\n\t\t\tthis._id = this._win.id;\n\t\t\tthis.setWin(this._win, options);\n\n\t\t\t// Apply some state after window creation\n\t\t\tthis.applyState(this.windowState, hasMultipleDisplays);\n\n\t\t\tthis._lastFocusTime = Date.now(); // since we show directly, we need to set the last focus time too\n\t\t}\n\t\t//#endregion\n\n\t\t// respect configured menu bar visibility\n\t\tthis.onConfigurationUpdated();\n\n\t\t// macOS: touch bar support\n\t\tthis.createTouchBar();\n\n\t\t// Eventing\n\t\tthis.registerListeners();\n\t}\n\n\tprivate readyState = ReadyState.NONE;\n\n\tsetReady(): void {\n\t\tthis.logService.trace(\n\t\t\t`window#load: window reported ready (id: ${this._id})`,\n\t\t);\n\n\t\tthis.readyState = ReadyState.READY;\n\n\t\t// inform all waiting promises that we are ready now\n\t\twhile (this.whenReadyCallbacks.length) {\n\t\t\tthis.whenReadyCallbacks.pop()!(this);\n\t\t}\n\n\t\t// Events\n\t\tthis._onDidSignalReady.fire();\n\t}\n\n\tready(): Promise<ICodeWindow> {\n\t\treturn new Promise<ICodeWindow>((resolve) => {\n\t\t\tif (this.isReady) {\n\t\t\t\treturn resolve(this);\n\t\t\t}\n\n\t\t\t// otherwise keep and call later when we are ready\n\t\t\tthis.whenReadyCallbacks.push(resolve);\n\t\t});\n\t}\n\n\tget isReady(): boolean {\n\t\treturn this.readyState === ReadyState.READY;\n\t}\n\n\tget whenClosedOrLoaded(): Promise<void> {\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tfunction handle() {\n\t\t\t\tcloseListener.dispose();\n\t\t\t\tloadListener.dispose();\n\n\t\t\t\tresolve();\n\t\t\t}\n\n\t\t\tconst closeListener = this.onDidClose(() => handle());\n\t\t\tconst loadListener = this.onWillLoad(() => handle());\n\t\t});\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Window error conditions to handle\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\tthis._win,\n\t\t\t\t\"unresponsive\",\n\t\t\t)(() => this.onWindowError(WindowError.UNRESPONSIVE)),\n\t\t);\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\tthis._win.webContents,\n\t\t\t\t\"render-process-gone\",\n\t\t\t\t(event, details) => details,\n\t\t\t)((details) =>\n\t\t\t\tthis.onWindowError(WindowError.PROCESS_GONE, { ...details }),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\tthis._win.webContents,\n\t\t\t\t\"did-fail-load\",\n\t\t\t\t(event, exitCode, reason) => ({ exitCode, reason }),\n\t\t\t)(({ exitCode, reason }) =>\n\t\t\t\tthis.onWindowError(WindowError.LOAD, { reason, exitCode }),\n\t\t\t),\n\t\t);\n\n\t\t// Prevent windows/iframes from blocking the unload\n\t\t// through DOM events. We have our own logic for\n\t\t// unloading a window that should not be confused\n\t\t// with the DOM way.\n\t\t// (https://github.com/microsoft/vscode/issues/122736)\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter<electron.Event>(\n\t\t\t\tthis._win.webContents,\n\t\t\t\t\"will-prevent-unload\",\n\t\t\t)((event) => event.preventDefault()),\n\t\t);\n\n\t\t// Remember that we loaded\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\tthis._win.webContents,\n\t\t\t\t\"did-finish-load\",\n\t\t\t)(() => {\n\t\t\t\t// Associate properties from the load request if provided\n\t\t\t\tif (this.pendingLoadConfig) {\n\t\t\t\t\tthis._config = this.pendingLoadConfig;\n\n\t\t\t\t\tthis.pendingLoadConfig = undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Window (Un)Maximize\n\t\tthis._register(\n\t\t\tthis.onDidMaximize(() => {\n\t\t\t\tif (this._config) {\n\t\t\t\t\tthis._config.maximized = true;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.onDidUnmaximize(() => {\n\t\t\t\tif (this._config) {\n\t\t\t\t\tthis._config.maximized = false;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Window Fullscreen\n\t\tthis._register(\n\t\t\tthis.onDidEnterFullScreen(() => {\n\t\t\t\tthis.sendWhenReady(\n\t\t\t\t\t\"vscode:enterFullScreen\",\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.onDidLeaveFullScreen(() => {\n\t\t\t\tthis.sendWhenReady(\n\t\t\t\t\t\"vscode:leaveFullScreen\",\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// Handle configuration changes\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) =>\n\t\t\t\tthis.onConfigurationUpdated(e),\n\t\t\t),\n\t\t);\n\n\t\t// Handle Workspace events\n\t\tthis._register(\n\t\t\tthis.workspacesManagementMainService.onDidDeleteUntitledWorkspace(\n\t\t\t\t(e) => this.onDidDeleteUntitledWorkspace(e),\n\t\t\t),\n\t\t);\n\n\t\t// Inject headers when requests are incoming\n\t\tconst urls = [\n\t\t\t\"https://marketplace.visualstudio.com/*\",\n\t\t\t\"https://*.vsassets.io/*\",\n\t\t];\n\t\tthis._win.webContents.session.webRequest.onBeforeSendHeaders(\n\t\t\t{ urls },\n\t\t\tasync (details, cb) => {\n\t\t\t\tconst headers = await this.getMarketplaceHeaders();\n\n\t\t\t\tcb({\n\t\t\t\t\tcancel: false,\n\t\t\t\t\trequestHeaders: Object.assign(\n\t\t\t\t\t\tdetails.requestHeaders,\n\t\t\t\t\t\theaders,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate marketplaceHeadersPromise: Promise<object> | undefined;\n\tprivate getMarketplaceHeaders(): Promise<object> {\n\t\tif (!this.marketplaceHeadersPromise) {\n\t\t\tthis.marketplaceHeadersPromise = resolveMarketplaceHeaders(\n\t\t\t\tthis.productService.version,\n\t\t\t\tthis.productService,\n\t\t\t\tthis.environmentMainService,\n\t\t\t\tthis.configurationService,\n\t\t\t\tthis.fileService,\n\t\t\t\tthis.applicationStorageMainService,\n\t\t\t\tthis.telemetryService,\n\t\t\t);\n\t\t}\n\n\t\treturn this.marketplaceHeadersPromise;\n\t}\n\n\tprivate async onWindowError(error: WindowError.UNRESPONSIVE): Promise<void>;\n\tprivate async onWindowError(\n\t\terror: WindowError.PROCESS_GONE,\n\t\tdetails: { reason: string; exitCode: number },\n\t): Promise<void>;\n\tprivate async onWindowError(\n\t\terror: WindowError.LOAD,\n\t\tdetails: { reason: string; exitCode: number },\n\t): Promise<void>;\n\tprivate async onWindowError(\n\t\ttype: WindowError,\n\t\tdetails?: { reason?: string; exitCode?: number },\n\t): Promise<void> {\n\t\tswitch (type) {\n\t\t\tcase WindowError.PROCESS_GONE:\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`CodeWindow: renderer process gone (reason: ${details?.reason || \"<unknown>\"}, code: ${details?.exitCode || \"<unknown>\"})`,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase WindowError.UNRESPONSIVE:\n\t\t\t\tthis.logService.error(\"CodeWindow: detected unresponsive\");\n\t\t\t\tbreak;\n\t\t\tcase WindowError.LOAD:\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`CodeWindow: failed to load (reason: ${details?.reason || \"<unknown>\"}, code: ${details?.exitCode || \"<unknown>\"})`,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Telemetry\n\t\ttype WindowErrorClassification = {\n\t\t\ttype: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The type of window error to understand the nature of the error better.\";\n\t\t\t};\n\t\t\treason: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The reason of the window error to understand the nature of the error better.\";\n\t\t\t};\n\t\t\tcode: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The exit code of the window process to understand the nature of the error better\";\n\t\t\t};\n\t\t\towner: \"bpasero\";\n\t\t\tcomment: \"Provides insight into reasons the vscode window had an error.\";\n\t\t};\n\t\ttype WindowErrorEvent = {\n\t\t\ttype: WindowError;\n\t\t\treason: string | undefined;\n\t\t\tcode: number | undefined;\n\t\t};\n\t\tthis.telemetryService.publicLog2<\n\t\t\tWindowErrorEvent,\n\t\t\tWindowErrorClassification\n\t\t>(\"windowerror\", {\n\t\t\ttype,\n\t\t\treason: details?.reason,\n\t\t\tcode: details?.exitCode,\n\t\t});\n\n\t\t// Inform User if non-recoverable\n\t\tswitch (type) {\n\t\t\tcase WindowError.UNRESPONSIVE:\n\t\t\tcase WindowError.PROCESS_GONE:\n\t\t\t\t// If we run extension tests from CLI, we want to signal\n\t\t\t\t// back this state to the test runner by exiting with a\n\t\t\t\t// non-zero exit code.\n\t\t\t\tif (this.isExtensionDevelopmentTestFromCli) {\n\t\t\t\t\tthis.lifecycleMainService.kill(1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If we run smoke tests, want to proceed with an orderly\n\t\t\t\t// shutdown as much as possible by destroying the window\n\t\t\t\t// and then calling the normal `quit` routine.\n\t\t\t\tif (\n\t\t\t\t\tthis.environmentMainService.args[\"enable-smoke-test-driver\"]\n\t\t\t\t) {\n\t\t\t\t\tawait this.destroyWindow(false, false);\n\t\t\t\t\tthis.lifecycleMainService.quit(); // still allow for an orderly shutdown\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Unresponsive\n\t\t\t\tif (type === WindowError.UNRESPONSIVE) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.isExtensionDevelopmentHost ||\n\t\t\t\t\t\tthis.isExtensionTestHost ||\n\t\t\t\t\t\t(this._win &&\n\t\t\t\t\t\t\tthis._win.webContents &&\n\t\t\t\t\t\t\tthis._win.webContents.isDevToolsOpened())\n\t\t\t\t\t) {\n\t\t\t\t\t\t// TODO@electron Workaround for https://github.com/microsoft/vscode/issues/56994\n\t\t\t\t\t\t// In certain cases the window can report unresponsiveness because a breakpoint was hit\n\t\t\t\t\t\t// and the process is stopped executing. The most typical cases are:\n\t\t\t\t\t\t// - devtools are opened and debugging happens\n\t\t\t\t\t\t// - window is an extensions development host that is being debugged\n\t\t\t\t\t\t// - window is an extension test development host that is being debugged\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Show Dialog\n\t\t\t\t\tconst { response, checkboxChecked } =\n\t\t\t\t\t\tawait this.dialogMainService.showMessageBox(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tkey: \"reopen\",\n\t\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"&&Reopen\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tkey: \"close\",\n\t\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"&&Close\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tkey: \"wait\",\n\t\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"&&Keep Waiting\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\t\"appStalled\",\n\t\t\t\t\t\t\t\t\t\"The window is not responding\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tdetail: localize(\n\t\t\t\t\t\t\t\t\t\"appStalledDetail\",\n\t\t\t\t\t\t\t\t\t\"You can reopen or close the window or keep waiting.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tcheckboxLabel: this._config?.workspace\n\t\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\t\"doNotRestoreEditors\",\n\t\t\t\t\t\t\t\t\t\t\t\"Don't restore editors\",\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tthis._win,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// Handle choice\n\t\t\t\t\tif (response !== 2 /* keep waiting */) {\n\t\t\t\t\t\tconst reopen = response === 0;\n\t\t\t\t\t\tawait this.destroyWindow(reopen, checkboxChecked);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Process gone\n\t\t\t\telse if (type === WindowError.PROCESS_GONE) {\n\t\t\t\t\tlet message: string;\n\t\t\t\t\tif (details) {\n\t\t\t\t\t\tmessage = localize(\n\t\t\t\t\t\t\t\"appGoneDetails\",\n\t\t\t\t\t\t\t\"The window terminated unexpectedly (reason: '{0}', code: '{1}')\",\n\t\t\t\t\t\t\tdetails.reason,\n\t\t\t\t\t\t\tdetails.exitCode ?? \"<unknown>\",\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessage = localize(\n\t\t\t\t\t\t\t\"appGone\",\n\t\t\t\t\t\t\t\"The window terminated unexpectedly\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Show Dialog\n\t\t\t\t\tconst { response, checkboxChecked } =\n\t\t\t\t\t\tawait this.dialogMainService.showMessageBox(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\t\tthis._config?.workspace\n\t\t\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey: \"reopen\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"&& denotes a mnemonic\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"&&Reopen\",\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey: \"newWindow\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"&& denotes a mnemonic\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"&&New Window\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tkey: \"close\",\n\t\t\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"&&Close\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\tdetail: this._config?.workspace\n\t\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\t\"appGoneDetailWorkspace\",\n\t\t\t\t\t\t\t\t\t\t\t\"We are sorry for the inconvenience. You can reopen the window to continue where you left off.\",\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\t\t\"appGoneDetailEmptyWindow\",\n\t\t\t\t\t\t\t\t\t\t\t\"We are sorry for the inconvenience. You can open a new empty window to start again.\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tcheckboxLabel: this._config?.workspace\n\t\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\t\"doNotRestoreEditors\",\n\t\t\t\t\t\t\t\t\t\t\t\"Don't restore editors\",\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tthis._win,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// Handle choice\n\t\t\t\t\tconst reopen = response === 0;\n\t\t\t\t\tawait this.destroyWindow(reopen, checkboxChecked);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async destroyWindow(\n\t\treopen: boolean,\n\t\tskipRestoreEditors: boolean,\n\t): Promise<void> {\n\t\tconst workspace = this._config?.workspace;\n\n\t\t// check to discard editor state first\n\t\tif (skipRestoreEditors && workspace) {\n\t\t\ttry {\n\t\t\t\tconst workspaceStorage =\n\t\t\t\t\tthis.storageMainService.workspaceStorage(workspace);\n\t\t\t\tawait workspaceStorage.init();\n\t\t\t\tworkspaceStorage.delete(\"memento/workbench.parts.editor\");\n\t\t\t\tawait workspaceStorage.close();\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\n\t\t// 'close' event will not be fired on destroy(), so signal crash via explicit event\n\t\tthis._onDidDestroy.fire();\n\n\t\ttry {\n\t\t\t// ask the windows service to open a new fresh window if specified\n\t\t\tif (reopen && this._config) {\n\t\t\t\t// We have to reconstruct a openable from the current workspace\n\t\t\t\tlet uriToOpen: IWorkspaceToOpen | IFolderToOpen | undefined;\n\t\t\t\tlet forceEmpty;\n\t\t\t\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\t\t\turiToOpen = { folderUri: workspace.uri };\n\t\t\t\t} else if (isWorkspaceIdentifier(workspace)) {\n\t\t\t\t\turiToOpen = { workspaceUri: workspace.configPath };\n\t\t\t\t} else {\n\t\t\t\t\tforceEmpty = true;\n\t\t\t\t}\n\n\t\t\t\t// Delegate to windows service\n\t\t\t\tconst window = (\n\t\t\t\t\tawait this.windowsMainService.open({\n\t\t\t\t\t\tcontext: OpenContext.API,\n\t\t\t\t\t\tuserEnv: this._config.userEnv,\n\t\t\t\t\t\tcli: {\n\t\t\t\t\t\t\t...this.environmentMainService.args,\n\t\t\t\t\t\t\t_: [], // we pass in the workspace to open explicitly via `urisToOpen`\n\t\t\t\t\t\t},\n\t\t\t\t\t\turisToOpen: uriToOpen ? [uriToOpen] : undefined,\n\t\t\t\t\t\tforceEmpty,\n\t\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\t\tremoteAuthority: this.remoteAuthority,\n\t\t\t\t\t})\n\t\t\t\t).at(0);\n\t\t\t\twindow?.focus();\n\t\t\t}\n\t\t} finally {\n\t\t\t// make sure to destroy the window as its renderer process is gone. do this\n\t\t\t// after the code for reopening the window, to prevent the entire application\n\t\t\t// from quitting when the last window closes as a result.\n\t\t\tthis._win?.destroy();\n\t\t}\n\t}\n\n\tprivate onDidDeleteUntitledWorkspace(\n\t\tworkspace: IWorkspaceIdentifier,\n\t): void {\n\t\t// Make sure to update our workspace config if we detect that it\n\t\t// was deleted\n\t\tif (this._config?.workspace?.id === workspace.id) {\n\t\t\tthis._config.workspace = undefined;\n\t\t}\n\t}\n\n\tprivate onConfigurationUpdated(e?: IConfigurationChangeEvent): void {\n\t\t// Menubar\n\t\tif (!e || e.affectsConfiguration(\"window.menuBarVisibility\")) {\n\t\t\tconst newMenuBarVisibility = this.getMenuBarVisibility();\n\t\t\tif (newMenuBarVisibility !== this.currentMenuBarVisibility) {\n\t\t\t\tthis.currentMenuBarVisibility = newMenuBarVisibility;\n\t\t\t\tthis.setMenuBarVisibility(newMenuBarVisibility);\n\t\t\t}\n\t\t}\n\n\t\t// Proxy\n\t\tif (\n\t\t\t!e ||\n\t\t\te.affectsConfiguration(\"http.proxy\") ||\n\t\t\te.affectsConfiguration(\"http.noProxy\")\n\t\t) {\n\t\t\tlet newHttpProxy =\n\t\t\t\t(\n\t\t\t\t\tthis.configurationService.getValue<string>(\"http.proxy\") ||\n\t\t\t\t\t\"\"\n\t\t\t\t).trim() ||\n\t\t\t\t(\n\t\t\t\t\tprocess.env[\"https_proxy\"] ||\n\t\t\t\t\tprocess.env[\"HTTPS_PROXY\"] ||\n\t\t\t\t\tprocess.env[\"http_proxy\"] ||\n\t\t\t\t\tprocess.env[\"HTTP_PROXY\"] ||\n\t\t\t\t\t\"\"\n\t\t\t\t).trim() || // Not standardized.\n\t\t\t\tundefined;\n\n\t\t\tif (newHttpProxy?.indexOf(\"@\") !== -1) {\n\t\t\t\tconst uri = URI.parse(newHttpProxy!);\n\t\t\t\tconst i = uri.authority.indexOf(\"@\");\n\t\t\t\tif (i !== -1) {\n\t\t\t\t\tnewHttpProxy = uri\n\t\t\t\t\t\t.with({ authority: uri.authority.substring(i + 1) })\n\t\t\t\t\t\t.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (newHttpProxy?.endsWith(\"/\")) {\n\t\t\t\tnewHttpProxy = newHttpProxy.substr(0, newHttpProxy.length - 1);\n\t\t\t}\n\n\t\t\tconst newNoProxy =\n\t\t\t\t(\n\t\t\t\t\tthis.configurationService.getValue<string[]>(\n\t\t\t\t\t\t\"http.noProxy\",\n\t\t\t\t\t) || []\n\t\t\t\t)\n\t\t\t\t\t.map((item) => item.trim())\n\t\t\t\t\t.join(\",\") ||\n\t\t\t\t(\n\t\t\t\t\tprocess.env[\"no_proxy\"] ||\n\t\t\t\t\tprocess.env[\"NO_PROXY\"] ||\n\t\t\t\t\t\"\"\n\t\t\t\t).trim() ||\n\t\t\t\tundefined; // Not standardized.\n\t\t\tif (\n\t\t\t\t(newHttpProxy || \"\").indexOf(\"@\") === -1 &&\n\t\t\t\t(newHttpProxy !== this.currentHttpProxy ||\n\t\t\t\t\tnewNoProxy !== this.currentNoProxy)\n\t\t\t) {\n\t\t\t\tthis.currentHttpProxy = newHttpProxy;\n\t\t\t\tthis.currentNoProxy = newNoProxy;\n\n\t\t\t\tconst proxyRules = newHttpProxy || \"\";\n\t\t\t\tconst proxyBypassRules = newNoProxy\n\t\t\t\t\t? `${newNoProxy},<local>`\n\t\t\t\t\t: \"<local>\";\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`Setting proxy to '${proxyRules}', bypassing '${proxyBypassRules}'`,\n\t\t\t\t);\n\t\t\t\tthis._win.webContents.session.setProxy({\n\t\t\t\t\tproxyRules,\n\t\t\t\t\tproxyBypassRules,\n\t\t\t\t\tpacScript: \"\",\n\t\t\t\t});\n\t\t\t\telectron.app.setProxy({\n\t\t\t\t\tproxyRules,\n\t\t\t\t\tproxyBypassRules,\n\t\t\t\t\tpacScript: \"\",\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\taddTabbedWindow(window: ICodeWindow): void {\n\t\tif (isMacintosh && window.win) {\n\t\t\tthis._win.addTabbedWindow(window.win);\n\t\t}\n\t}\n\n\tload(\n\t\tconfiguration: INativeWindowConfiguration,\n\t\toptions: ILoadOptions = Object.create(null),\n\t): void {\n\t\tthis.logService.trace(\n\t\t\t`window#load: attempt to load window (id: ${this._id})`,\n\t\t);\n\n\t\t// Clear Document Edited if needed\n\t\tif (this.isDocumentEdited()) {\n\t\t\tif (\n\t\t\t\t!options.isReload ||\n\t\t\t\t!this.backupMainService.isHotExitEnabled()\n\t\t\t) {\n\t\t\t\tthis.setDocumentEdited(false);\n\t\t\t}\n\t\t}\n\n\t\t// Clear Title and Filename if needed\n\t\tif (!options.isReload) {\n\t\t\tif (this.getRepresentedFilename()) {\n\t\t\t\tthis.setRepresentedFilename(\"\");\n\t\t\t}\n\n\t\t\tthis._win.setTitle(this.productService.nameLong);\n\t\t}\n\n\t\t// Update configuration values based on our window context\n\t\t// and set it into the config object URL for usage.\n\t\tthis.updateConfiguration(configuration, options);\n\n\t\t// If this is the first time the window is loaded, we associate the paths\n\t\t// directly with the window because we assume the loading will just work\n\t\tif (this.readyState === ReadyState.NONE) {\n\t\t\tthis._config = configuration;\n\t\t}\n\n\t\t// Otherwise, the window is currently showing a folder and if there is an\n\t\t// unload handler preventing the load, we cannot just associate the paths\n\t\t// because the loading might be vetoed. Instead we associate it later when\n\t\t// the window load event has fired.\n\t\telse {\n\t\t\tthis.pendingLoadConfig = configuration;\n\t\t}\n\n\t\t// Indicate we are navigting now\n\t\tthis.readyState = ReadyState.NAVIGATING;\n\n\t\t// Load URL\n\t\tthis._win.loadURL(\n\t\t\tFileAccess.asBrowserUri(\n\t\t\t\t`vs/code/electron-sandbox/workbench/workbench${this.environmentMainService.isBuilt ? \"\" : \"-dev\"}.${isESM ? \"esm.\" : \"\"}html`,\n\t\t\t).toString(true),\n\t\t);\n\n\t\t// Remember that we did load\n\t\tconst wasLoaded = this.wasLoaded;\n\t\tthis.wasLoaded = true;\n\n\t\t// Make window visible if it did not open in N seconds because this indicates an error\n\t\t// Only do this when running out of sources and not when running tests\n\t\tif (\n\t\t\t!this.environmentMainService.isBuilt &&\n\t\t\t!this.environmentMainService.extensionTestsLocationURI\n\t\t) {\n\t\t\tthis._register(\n\t\t\t\tnew RunOnceScheduler(() => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._win &&\n\t\t\t\t\t\t!this._win.isVisible() &&\n\t\t\t\t\t\t!this._win.isMinimized()\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._win.show();\n\t\t\t\t\t\tthis.focus({ force: true });\n\t\t\t\t\t\tthis._win.webContents.openDevTools();\n\t\t\t\t\t}\n\t\t\t\t}, 10000),\n\t\t\t).schedule();\n\t\t}\n\n\t\t// Event\n\t\tthis._onWillLoad.fire({\n\t\t\tworkspace: configuration.workspace,\n\t\t\treason: options.isReload\n\t\t\t\t? LoadReason.RELOAD\n\t\t\t\t: wasLoaded\n\t\t\t\t\t? LoadReason.LOAD\n\t\t\t\t\t: LoadReason.INITIAL,\n\t\t});\n\t}\n\n\tprivate updateConfiguration(\n\t\tconfiguration: INativeWindowConfiguration,\n\t\toptions: ILoadOptions,\n\t): void {\n\t\t// If this window was loaded before from the command line\n\t\t// (as indicated by VSCODE_CLI environment), make sure to\n\t\t// preserve that user environment in subsequent loads,\n\t\t// unless the new configuration context was also a CLI\n\t\t// (for https://github.com/microsoft/vscode/issues/108571)\n\t\t// Also, preserve the environment if we're loading from an\n\t\t// extension development host that had its environment set\n\t\t// (for https://github.com/microsoft/vscode/issues/123508)\n\t\tconst currentUserEnv = (this._config ?? this.pendingLoadConfig)\n\t\t\t?.userEnv;\n\t\tif (currentUserEnv) {\n\t\t\tconst shouldPreserveLaunchCliEnvironment =\n\t\t\t\tisLaunchedFromCli(currentUserEnv) &&\n\t\t\t\t!isLaunchedFromCli(configuration.userEnv);\n\t\t\tconst shouldPreserveDebugEnvironmnet =\n\t\t\t\tthis.isExtensionDevelopmentHost;\n\t\t\tif (\n\t\t\t\tshouldPreserveLaunchCliEnvironment ||\n\t\t\t\tshouldPreserveDebugEnvironmnet\n\t\t\t) {\n\t\t\t\tconfiguration.userEnv = {\n\t\t\t\t\t...currentUserEnv,\n\t\t\t\t\t...configuration.userEnv,\n\t\t\t\t}; // still allow to override certain environment as passed in\n\t\t\t}\n\t\t}\n\n\t\t// If named pipe was instantiated for the crashpad_handler process, reuse the same\n\t\t// pipe for new app instances connecting to the original app instance.\n\t\t// Ref: https://github.com/microsoft/vscode/issues/115874\n\t\tif (process.env[\"CHROME_CRASHPAD_PIPE_NAME\"]) {\n\t\t\tObject.assign(configuration.userEnv, {\n\t\t\t\tCHROME_CRASHPAD_PIPE_NAME:\n\t\t\t\t\tprocess.env[\"CHROME_CRASHPAD_PIPE_NAME\"],\n\t\t\t});\n\t\t}\n\n\t\t// Add disable-extensions to the config, but do not preserve it on currentConfig or\n\t\t// pendingLoadConfig so that it is applied only on this load\n\t\tif (options.disableExtensions !== undefined) {\n\t\t\tconfiguration[\"disable-extensions\"] = options.disableExtensions;\n\t\t}\n\n\t\t// Update window related properties\n\t\tconfiguration.fullscreen = this.isFullScreen;\n\t\tconfiguration.maximized = this._win.isMaximized();\n\t\tconfiguration.partsSplash = this.themeMainService.getWindowSplash();\n\t\tconfiguration.zoomLevel = this.getZoomLevel();\n\t\tconfiguration.isCustomZoomLevel =\n\t\t\ttypeof this.customZoomLevel === \"number\";\n\t\tif (configuration.isCustomZoomLevel && configuration.partsSplash) {\n\t\t\tconfiguration.partsSplash.zoomLevel = configuration.zoomLevel;\n\t\t}\n\n\t\t// Update with latest perf marks\n\t\tmark(\"code/willOpenNewWindow\");\n\t\tconfiguration.perfMarks = getMarks();\n\n\t\t// Update in config object URL for usage in renderer\n\t\tthis.configObjectUrl.update(configuration);\n\t}\n\n\tasync reload(cli?: NativeParsedArgs): Promise<void> {\n\t\t// Copy our current config for reuse\n\t\tconst configuration = Object.assign({}, this._config);\n\n\t\t// Validate workspace\n\t\tconfiguration.workspace =\n\t\t\tawait this.validateWorkspaceBeforeReload(configuration);\n\n\t\t// Delete some properties we do not want during reload\n\t\tdelete configuration.filesToOpenOrCreate;\n\t\tdelete configuration.filesToDiff;\n\t\tdelete configuration.filesToMerge;\n\t\tdelete configuration.filesToWait;\n\n\t\t// Some configuration things get inherited if the window is being reloaded and we are\n\t\t// in extension development mode. These options are all development related.\n\t\tif (this.isExtensionDevelopmentHost && cli) {\n\t\t\tconfiguration.verbose = cli.verbose;\n\t\t\tconfiguration.debugId = cli.debugId;\n\t\t\tconfiguration.extensionEnvironment = cli.extensionEnvironment;\n\t\t\tconfiguration[\"inspect-extensions\"] = cli[\"inspect-extensions\"];\n\t\t\tconfiguration[\"inspect-brk-extensions\"] =\n\t\t\t\tcli[\"inspect-brk-extensions\"];\n\t\t\tconfiguration[\"extensions-dir\"] = cli[\"extensions-dir\"];\n\t\t}\n\n\t\tconfiguration.accessibilitySupport =\n\t\t\telectron.app.isAccessibilitySupportEnabled();\n\t\tconfiguration.isInitialStartup = false; // since this is a reload\n\t\tconfiguration.policiesData = this.policyService.serialize(); // set policies data again\n\t\tconfiguration.continueOn = this.environmentMainService.continueOn;\n\t\tconfiguration.profiles = {\n\t\t\tall: this.userDataProfilesService.profiles,\n\t\t\tprofile:\n\t\t\t\tthis.profile || this.userDataProfilesService.defaultProfile,\n\t\t\thome: this.userDataProfilesService.profilesHome,\n\t\t};\n\t\tconfiguration.logLevel = this.loggerMainService.getLogLevel();\n\t\tconfiguration.loggers = {\n\t\t\twindow: this.loggerMainService.getRegisteredLoggers(this.id),\n\t\t\tglobal: this.loggerMainService.getRegisteredLoggers(),\n\t\t};\n\n\t\t// Load config\n\t\tthis.load(configuration, {\n\t\t\tisReload: true,\n\t\t\tdisableExtensions: cli?.[\"disable-extensions\"],\n\t\t});\n\t}\n\n\tprivate async validateWorkspaceBeforeReload(\n\t\tconfiguration: INativeWindowConfiguration,\n\t): Promise<\n\t\tIWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined\n\t> {\n\t\t// Multi folder\n\t\tif (isWorkspaceIdentifier(configuration.workspace)) {\n\t\t\tconst configPath = configuration.workspace.configPath;\n\t\t\tif (configPath.scheme === Schemas.file) {\n\t\t\t\tconst workspaceExists =\n\t\t\t\t\tawait this.fileService.exists(configPath);\n\t\t\t\tif (!workspaceExists) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Single folder\n\t\telse if (isSingleFolderWorkspaceIdentifier(configuration.workspace)) {\n\t\t\tconst uri = configuration.workspace.uri;\n\t\t\tif (uri.scheme === Schemas.file) {\n\t\t\t\tconst folderExists = await this.fileService.exists(uri);\n\t\t\t\tif (!folderExists) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Workspace is valid\n\t\treturn configuration.workspace;\n\t}\n\n\tserializeWindowState(): IWindowState {\n\t\tif (!this._win) {\n\t\t\treturn defaultWindowState();\n\t\t}\n\n\t\t// fullscreen gets special treatment\n\t\tif (this.isFullScreen) {\n\t\t\tlet display: electron.Display | undefined;\n\t\t\ttry {\n\t\t\t\tdisplay = electron.screen.getDisplayMatching(this.getBounds());\n\t\t\t} catch (error) {\n\t\t\t\t// Electron has weird conditions under which it throws errors\n\t\t\t\t// e.g. https://github.com/microsoft/vscode/issues/100334 when\n\t\t\t\t// large numbers are passed in\n\t\t\t}\n\n\t\t\tconst defaultState = defaultWindowState();\n\n\t\t\treturn {\n\t\t\t\tmode: WindowMode.Fullscreen,\n\t\t\t\tdisplay: display ? display.id : undefined,\n\n\t\t\t\t// Still carry over window dimensions from previous sessions\n\t\t\t\t// if we can compute it in fullscreen state.\n\t\t\t\t// does not seem possible in all cases on Linux for example\n\t\t\t\t// (https://github.com/microsoft/vscode/issues/58218) so we\n\t\t\t\t// fallback to the defaults in that case.\n\t\t\t\twidth: this.windowState.width || defaultState.width,\n\t\t\t\theight: this.windowState.height || defaultState.height,\n\t\t\t\tx: this.windowState.x || 0,\n\t\t\t\ty: this.windowState.y || 0,\n\t\t\t\tzoomLevel: this.customZoomLevel,\n\t\t\t};\n\t\t}\n\n\t\tconst state: IWindowState = Object.create(null);\n\t\tlet mode: WindowMode;\n\n\t\t// get window mode\n\t\tif (!isMacintosh && this._win.isMaximized()) {\n\t\t\tmode = WindowMode.Maximized;\n\t\t} else {\n\t\t\tmode = WindowMode.Normal;\n\t\t}\n\n\t\t// we don't want to save minimized state, only maximized or normal\n\t\tif (mode === WindowMode.Maximized) {\n\t\t\tstate.mode = WindowMode.Maximized;\n\t\t} else {\n\t\t\tstate.mode = WindowMode.Normal;\n\t\t}\n\n\t\t// only consider non-minimized window states\n\t\tif (mode === WindowMode.Normal || mode === WindowMode.Maximized) {\n\t\t\tlet bounds: electron.Rectangle;\n\t\t\tif (mode === WindowMode.Normal) {\n\t\t\t\tbounds = this.getBounds();\n\t\t\t} else {\n\t\t\t\tbounds = this._win.getNormalBounds(); // make sure to persist the normal bounds when maximized to be able to restore them\n\t\t\t}\n\n\t\t\tstate.x = bounds.x;\n\t\t\tstate.y = bounds.y;\n\t\t\tstate.width = bounds.width;\n\t\t\tstate.height = bounds.height;\n\t\t}\n\n\t\tstate.zoomLevel = this.customZoomLevel;\n\n\t\treturn state;\n\t}\n\n\tprivate restoreWindowState(\n\t\tstate?: IWindowState,\n\t): [IWindowState, boolean? /* has multiple displays */] {\n\t\tmark(\"code/willRestoreCodeWindowState\");\n\n\t\tlet hasMultipleDisplays = false;\n\t\tif (state) {\n\t\t\t// Window zoom\n\t\t\tthis.customZoomLevel = state.zoomLevel;\n\n\t\t\t// Window dimensions\n\t\t\ttry {\n\t\t\t\tconst displays = electron.screen.getAllDisplays();\n\t\t\t\thasMultipleDisplays = displays.length > 1;\n\n\t\t\t\tstate = WindowStateValidator.validateWindowState(\n\t\t\t\t\tthis.logService,\n\t\t\t\t\tstate,\n\t\t\t\t\tdisplays,\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Unexpected error validating window state: ${err}\\n${err.stack}`,\n\t\t\t\t); // somehow display API can be picky about the state to validate\n\t\t\t}\n\t\t}\n\n\t\tmark(\"code/didRestoreCodeWindowState\");\n\n\t\treturn [state || defaultWindowState(), hasMultipleDisplays];\n\t}\n\n\tgetBounds(): electron.Rectangle {\n\t\tconst [x, y] = this._win.getPosition();\n\t\tconst [width, height] = this._win.getSize();\n\n\t\treturn { x, y, width, height };\n\t}\n\n\tprotected override setFullScreen(\n\t\tfullscreen: boolean,\n\t\tfromRestore: boolean,\n\t): void {\n\t\tsuper.setFullScreen(fullscreen, fromRestore);\n\n\t\t// Events\n\t\tthis.sendWhenReady(\n\t\t\tfullscreen ? \"vscode:enterFullScreen\" : \"vscode:leaveFullScreen\",\n\t\t\tCancellationToken.None,\n\t\t);\n\n\t\t// Respect configured menu bar visibility or default to toggle if not set\n\t\tif (this.currentMenuBarVisibility) {\n\t\t\tthis.setMenuBarVisibility(this.currentMenuBarVisibility, false);\n\t\t}\n\t}\n\n\tprivate getMenuBarVisibility(): MenuBarVisibility {\n\t\tlet menuBarVisibility = getMenuBarVisibility(this.configurationService);\n\t\tif ([\"visible\", \"toggle\", \"hidden\"].indexOf(menuBarVisibility) < 0) {\n\t\t\tmenuBarVisibility = \"classic\";\n\t\t}\n\n\t\treturn menuBarVisibility;\n\t}\n\n\tprivate setMenuBarVisibility(\n\t\tvisibility: MenuBarVisibility,\n\t\tnotify = true,\n\t): void {\n\t\tif (isMacintosh) {\n\t\t\treturn; // ignore for macOS platform\n\t\t}\n\n\t\tif (visibility === \"toggle\") {\n\t\t\tif (notify) {\n\t\t\t\tthis.send(\n\t\t\t\t\t\"vscode:showInfoMessage\",\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"hiddenMenuBar\",\n\t\t\t\t\t\t\"You can still access the menu bar by pressing the Alt-key.\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (visibility === \"hidden\") {\n\t\t\t// for some weird reason that I have no explanation for, the menu bar is not hiding when calling\n\t\t\t// this without timeout (see https://github.com/microsoft/vscode/issues/19777). there seems to be\n\t\t\t// a timing issue with us opening the first window and the menu bar getting created. somehow the\n\t\t\t// fact that we want to hide the menu without being able to bring it back via Alt key makes Electron\n\t\t\t// still show the menu. Unable to reproduce from a simple Hello World application though...\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.doSetMenuBarVisibility(visibility);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.doSetMenuBarVisibility(visibility);\n\t\t}\n\t}\n\n\tprivate doSetMenuBarVisibility(visibility: MenuBarVisibility): void {\n\t\tconst isFullscreen = this.isFullScreen;\n\n\t\tswitch (visibility) {\n\t\t\tcase \"classic\":\n\t\t\t\tthis._win.setMenuBarVisibility(!isFullscreen);\n\t\t\t\tthis._win.autoHideMenuBar = isFullscreen;\n\t\t\t\tbreak;\n\n\t\t\tcase \"visible\":\n\t\t\t\tthis._win.setMenuBarVisibility(true);\n\t\t\t\tthis._win.autoHideMenuBar = false;\n\t\t\t\tbreak;\n\n\t\t\tcase \"toggle\":\n\t\t\t\tthis._win.setMenuBarVisibility(false);\n\t\t\t\tthis._win.autoHideMenuBar = true;\n\t\t\t\tbreak;\n\n\t\t\tcase \"hidden\":\n\t\t\t\tthis._win.setMenuBarVisibility(false);\n\t\t\t\tthis._win.autoHideMenuBar = false;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tnotifyZoomLevel(zoomLevel: number | undefined): void {\n\t\tthis.customZoomLevel = zoomLevel;\n\t}\n\n\tprivate getZoomLevel(): number | undefined {\n\t\tif (typeof this.customZoomLevel === \"number\") {\n\t\t\treturn this.customZoomLevel;\n\t\t}\n\n\t\tconst windowSettings = this.configurationService.getValue<\n\t\t\tIWindowSettings | undefined\n\t\t>(\"window\");\n\t\treturn windowSettings?.zoomLevel;\n\t}\n\n\tclose(): void {\n\t\tthis._win?.close();\n\t}\n\n\tsendWhenReady(\n\t\tchannel: string,\n\t\ttoken: CancellationToken,\n\t\t...args: any[]\n\t): void {\n\t\tif (this.isReady) {\n\t\t\tthis.send(channel, ...args);\n\t\t} else {\n\t\t\tthis.ready().then(() => {\n\t\t\t\tif (!token.isCancellationRequested) {\n\t\t\t\t\tthis.send(channel, ...args);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tsend(channel: string, ...args: any[]): void {\n\t\tif (this._win) {\n\t\t\tif (\n\t\t\t\tthis._win.isDestroyed() ||\n\t\t\t\tthis._win.webContents.isDestroyed()\n\t\t\t) {\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Sending IPC message to channel '${channel}' for window that is destroyed`,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis._win.webContents.send(channel, ...args);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Error sending IPC message to channel '${channel}' of window ${this._id}: ${toErrorMessage(error)}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateTouchBar(groups: ISerializableCommandAction[][]): void {\n\t\tif (!isMacintosh) {\n\t\t\treturn; // only supported on macOS\n\t\t}\n\n\t\t// Update segments for all groups. Setting the segments property\n\t\t// of the group directly prevents ugly flickering from happening\n\t\tthis.touchBarGroups.forEach((touchBarGroup, index) => {\n\t\t\tconst commands = groups[index];\n\t\t\ttouchBarGroup.segments = this.createTouchBarGroupSegments(commands);\n\t\t});\n\t}\n\n\tprivate createTouchBar(): void {\n\t\tif (!isMacintosh) {\n\t\t\treturn; // only supported on macOS\n\t\t}\n\n\t\t// To avoid flickering, we try to reuse the touch bar group\n\t\t// as much as possible by creating a large number of groups\n\t\t// for reusing later.\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tconst groupTouchBar = this.createTouchBarGroup();\n\t\t\tthis.touchBarGroups.push(groupTouchBar);\n\t\t}\n\n\t\tthis._win.setTouchBar(\n\t\t\tnew electron.TouchBar({ items: this.touchBarGroups }),\n\t\t);\n\t}\n\n\tprivate createTouchBarGroup(\n\t\titems: ISerializableCommandAction[] = [],\n\t): electron.TouchBarSegmentedControl {\n\t\t// Group Segments\n\t\tconst segments = this.createTouchBarGroupSegments(items);\n\n\t\t// Group Control\n\t\tconst control = new electron.TouchBar.TouchBarSegmentedControl({\n\t\t\tsegments,\n\t\t\tmode: \"buttons\",\n\t\t\tsegmentStyle: \"automatic\",\n\t\t\tchange: (selectedIndex) => {\n\t\t\t\tthis.sendWhenReady(\"vscode:runAction\", CancellationToken.None, {\n\t\t\t\t\tid: (control.segments[selectedIndex] as ITouchBarSegment)\n\t\t\t\t\t\t.id,\n\t\t\t\t\tfrom: \"touchbar\",\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\treturn control;\n\t}\n\n\tprivate createTouchBarGroupSegments(\n\t\titems: ISerializableCommandAction[] = [],\n\t): ITouchBarSegment[] {\n\t\tconst segments: ITouchBarSegment[] = items.map((item) => {\n\t\t\tlet icon: electron.NativeImage | undefined;\n\t\t\tif (\n\t\t\t\titem.icon &&\n\t\t\t\t!ThemeIcon.isThemeIcon(item.icon) &&\n\t\t\t\titem.icon?.dark?.scheme === Schemas.file\n\t\t\t) {\n\t\t\t\ticon = electron.nativeImage.createFromPath(\n\t\t\t\t\tURI.revive(item.icon.dark).fsPath,\n\t\t\t\t);\n\t\t\t\tif (icon.isEmpty()) {\n\t\t\t\t\ticon = undefined;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet title: string;\n\t\t\tif (typeof item.title === \"string\") {\n\t\t\t\ttitle = item.title;\n\t\t\t} else {\n\t\t\t\ttitle = item.title.value;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tid: item.id,\n\t\t\t\tlabel: icon ? undefined : title,\n\t\t\t\ticon,\n\t\t\t};\n\t\t});\n\n\t\treturn segments;\n\t}\n\n\tmatches(webContents: electron.WebContents): boolean {\n\t\treturn this._win?.webContents.id === webContents.id;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\t// Deregister the loggers for this window\n\t\tthis.loggerMainService.deregisterLoggers(this.id);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ReadyState", "profile"]
}
