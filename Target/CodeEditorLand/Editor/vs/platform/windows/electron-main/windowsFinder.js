import{extUriBiasedIgnorePathCase as d}from"../../../../vs/base/common/resources.js";import{URI as a}from"../../../../vs/base/common/uri.js";import"../../../../vs/platform/window/electron-main/window.js";import{isSingleFolderWorkspaceIdentifier as f,isWorkspaceIdentifier as p}from"../../../../vs/platform/workspace/common/workspace.js";async function h(i,n,o){for(const e of i){const t=e.openedWorkspace;if(p(t)){const s=await o(t);if(s){if(s.folders.some(c=>d.isEqualOrParent(n,c.uri)))return e}else if(d.isEqualOrParent(n,t.configPath))return e}}const r=i.filter(e=>f(e.openedWorkspace)&&d.isEqualOrParent(n,e.openedWorkspace.uri));if(r.length)return r.sort((e,t)=>-(e.openedWorkspace.uri.path.length-t.openedWorkspace.uri.path.length))[0]}function P(i,n){for(const o of i)if(p(o.openedWorkspace)&&d.isEqual(o.openedWorkspace.configPath,n)||f(o.openedWorkspace)&&d.isEqual(o.openedWorkspace.uri,n))return o}function F(i,n){const o=r=>n.some(e=>d.isEqual(a.file(e),a.file(r)));for(const r of i)if(r.config?.extensionDevelopmentPath?.some(e=>o(e)))return r}export{F as findWindowOnExtensionDevelopmentPath,h as findWindowOnFile,P as findWindowOnWorkspaceOrFolder};
