{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/windows/electron-main/windowsFinder.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extUriBiasedIgnorePathCase } from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type { ICodeWindow } from \"../../window/electron-main/window.js\";\nimport {\n\ttype IResolvedWorkspace,\n\ttype ISingleFolderWorkspaceIdentifier,\n\ttype IWorkspaceIdentifier,\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\n\nexport async function findWindowOnFile(\n\twindows: ICodeWindow[],\n\tfileUri: URI,\n\tlocalWorkspaceResolver: (\n\t\tworkspace: IWorkspaceIdentifier,\n\t) => Promise<IResolvedWorkspace | undefined>,\n): Promise<ICodeWindow | undefined> {\n\t// First check for windows with workspaces that have a parent folder of the provided path opened\n\tfor (const window of windows) {\n\t\tconst workspace = window.openedWorkspace;\n\t\tif (isWorkspaceIdentifier(workspace)) {\n\t\t\tconst resolvedWorkspace = await localWorkspaceResolver(workspace);\n\n\t\t\t// resolved workspace: folders are known and can be compared with\n\t\t\tif (resolvedWorkspace) {\n\t\t\t\tif (\n\t\t\t\t\tresolvedWorkspace.folders.some((folder) =>\n\t\t\t\t\t\textUriBiasedIgnorePathCase.isEqualOrParent(\n\t\t\t\t\t\t\tfileUri,\n\t\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn window;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// unresolved: can only compare with workspace location\n\t\t\telse if (\n\t\t\t\textUriBiasedIgnorePathCase.isEqualOrParent(\n\t\t\t\t\tfileUri,\n\t\t\t\t\tworkspace.configPath,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn window;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then go with single folder windows that are parent of the provided file path\n\tconst singleFolderWindowsOnFilePath = windows.filter(\n\t\t(window) =>\n\t\t\tisSingleFolderWorkspaceIdentifier(window.openedWorkspace) &&\n\t\t\textUriBiasedIgnorePathCase.isEqualOrParent(\n\t\t\t\tfileUri,\n\t\t\t\twindow.openedWorkspace.uri,\n\t\t\t),\n\t);\n\tif (singleFolderWindowsOnFilePath.length) {\n\t\treturn singleFolderWindowsOnFilePath.sort(\n\t\t\t(windowA, windowB) =>\n\t\t\t\t-(\n\t\t\t\t\t(\n\t\t\t\t\t\twindowA.openedWorkspace as ISingleFolderWorkspaceIdentifier\n\t\t\t\t\t).uri.path.length -\n\t\t\t\t\t(\n\t\t\t\t\t\twindowB.openedWorkspace as ISingleFolderWorkspaceIdentifier\n\t\t\t\t\t).uri.path.length\n\t\t\t\t),\n\t\t)[0];\n\t}\n\n\treturn undefined;\n}\n\nexport function findWindowOnWorkspaceOrFolder(\n\twindows: ICodeWindow[],\n\tfolderOrWorkspaceConfigUri: URI,\n): ICodeWindow | undefined {\n\tfor (const window of windows) {\n\t\t// check for workspace config path\n\t\tif (\n\t\t\tisWorkspaceIdentifier(window.openedWorkspace) &&\n\t\t\textUriBiasedIgnorePathCase.isEqual(\n\t\t\t\twindow.openedWorkspace.configPath,\n\t\t\t\tfolderOrWorkspaceConfigUri,\n\t\t\t)\n\t\t) {\n\t\t\treturn window;\n\t\t}\n\n\t\t// check for folder path\n\t\tif (\n\t\t\tisSingleFolderWorkspaceIdentifier(window.openedWorkspace) &&\n\t\t\textUriBiasedIgnorePathCase.isEqual(\n\t\t\t\twindow.openedWorkspace.uri,\n\t\t\t\tfolderOrWorkspaceConfigUri,\n\t\t\t)\n\t\t) {\n\t\t\treturn window;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function findWindowOnExtensionDevelopmentPath(\n\twindows: ICodeWindow[],\n\textensionDevelopmentPaths: string[],\n): ICodeWindow | undefined {\n\tconst matches = (uriString: string): boolean => {\n\t\treturn extensionDevelopmentPaths.some((path) =>\n\t\t\textUriBiasedIgnorePathCase.isEqual(\n\t\t\t\tURI.file(path),\n\t\t\t\tURI.file(uriString),\n\t\t\t),\n\t\t);\n\t};\n\n\tfor (const window of windows) {\n\t\t// match on extension development path. the path can be one or more paths\n\t\t// so we check if any of the paths match on any of the provided ones\n\t\tif (\n\t\t\twindow.config?.extensionDevelopmentPath?.some((path) =>\n\t\t\t\tmatches(path),\n\t\t\t)\n\t\t) {\n\t\t\treturn window;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"],
  "mappings": ";;AAKA,SAAS,kCAAkC;AAC3C,SAAS,WAAW;AAEpB;AAAA,EAIC;AAAA,EACA;AAAA,OACM;AAEP,eAAsB,iBACrB,SACA,SACA,wBAGmC;AAEnC,aAAW,UAAU,SAAS;AAC7B,UAAM,YAAY,OAAO;AACzB,QAAI,sBAAsB,SAAS,GAAG;AACrC,YAAM,oBAAoB,MAAM,uBAAuB,SAAS;AAGhE,UAAI,mBAAmB;AACtB,YACC,kBAAkB,QAAQ;AAAA,UAAK,CAAC,WAC/B,2BAA2B;AAAA,YAC1B;AAAA,YACA,OAAO;AAAA,UACR;AAAA,QACD,GACC;AACD,iBAAO;AAAA,QACR;AAAA,MACD,WAIC,2BAA2B;AAAA,QAC1B;AAAA,QACA,UAAU;AAAA,MACX,GACC;AACD,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAGA,QAAM,gCAAgC,QAAQ;AAAA,IAC7C,CAAC,WACA,kCAAkC,OAAO,eAAe,KACxD,2BAA2B;AAAA,MAC1B;AAAA,MACA,OAAO,gBAAgB;AAAA,IACxB;AAAA,EACF;AACA,MAAI,8BAA8B,QAAQ;AACzC,WAAO,8BAA8B;AAAA,MACpC,CAAC,SAAS,YACT,EAEE,QAAQ,gBACP,IAAI,KAAK,SAEV,QAAQ,gBACP,IAAI,KAAK;AAAA,IAEd,EAAE,CAAC;AAAA,EACJ;AAEA,SAAO;AACR;AA/DsB;AAiEf,SAAS,8BACf,SACA,4BAC0B;AAC1B,aAAW,UAAU,SAAS;AAE7B,QACC,sBAAsB,OAAO,eAAe,KAC5C,2BAA2B;AAAA,MAC1B,OAAO,gBAAgB;AAAA,MACvB;AAAA,IACD,GACC;AACD,aAAO;AAAA,IACR;AAGA,QACC,kCAAkC,OAAO,eAAe,KACxD,2BAA2B;AAAA,MAC1B,OAAO,gBAAgB;AAAA,MACvB;AAAA,IACD,GACC;AACD,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AA7BgB;AA+BT,SAAS,qCACf,SACA,2BAC0B;AAC1B,QAAM,UAAU,wBAAC,cAA+B;AAC/C,WAAO,0BAA0B;AAAA,MAAK,CAAC,SACtC,2BAA2B;AAAA,QAC1B,IAAI,KAAK,IAAI;AAAA,QACb,IAAI,KAAK,SAAS;AAAA,MACnB;AAAA,IACD;AAAA,EACD,GAPgB;AAShB,aAAW,UAAU,SAAS;AAG7B,QACC,OAAO,QAAQ,0BAA0B;AAAA,MAAK,CAAC,SAC9C,QAAQ,IAAI;AAAA,IACb,GACC;AACD,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AA1BgB;",
  "names": []
}
