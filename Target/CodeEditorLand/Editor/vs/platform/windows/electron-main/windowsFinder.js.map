{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/windows/electron-main/windowsFinder.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extUriBiasedIgnorePathCase } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ICodeWindow } from '../../window/electron-main/window.js';\nimport { IResolvedWorkspace, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceIdentifier } from '../../workspace/common/workspace.js';\n\nexport async function findWindowOnFile(windows: ICodeWindow[], fileUri: URI, localWorkspaceResolver: (workspace: IWorkspaceIdentifier) => Promise<IResolvedWorkspace | undefined>): Promise<ICodeWindow | undefined> {\n\n\t// First check for windows with workspaces that have a parent folder of the provided path opened\n\tfor (const window of windows) {\n\t\tconst workspace = window.openedWorkspace;\n\t\tif (isWorkspaceIdentifier(workspace)) {\n\t\t\tconst resolvedWorkspace = await localWorkspaceResolver(workspace);\n\n\t\t\t// resolved workspace: folders are known and can be compared with\n\t\t\tif (resolvedWorkspace) {\n\t\t\t\tif (resolvedWorkspace.folders.some(folder => extUriBiasedIgnorePathCase.isEqualOrParent(fileUri, folder.uri))) {\n\t\t\t\t\treturn window;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// unresolved: can only compare with workspace location\n\t\t\telse {\n\t\t\t\tif (extUriBiasedIgnorePathCase.isEqualOrParent(fileUri, workspace.configPath)) {\n\t\t\t\t\treturn window;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then go with single folder windows that are parent of the provided file path\n\tconst singleFolderWindowsOnFilePath = windows.filter(window => isSingleFolderWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqualOrParent(fileUri, window.openedWorkspace.uri));\n\tif (singleFolderWindowsOnFilePath.length) {\n\t\treturn singleFolderWindowsOnFilePath.sort((windowA, windowB) => -((windowA.openedWorkspace as ISingleFolderWorkspaceIdentifier).uri.path.length - (windowB.openedWorkspace as ISingleFolderWorkspaceIdentifier).uri.path.length))[0];\n\t}\n\n\treturn undefined;\n}\n\nexport function findWindowOnWorkspaceOrFolder(windows: ICodeWindow[], folderOrWorkspaceConfigUri: URI): ICodeWindow | undefined {\n\n\tfor (const window of windows) {\n\n\t\t// check for workspace config path\n\t\tif (isWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqual(window.openedWorkspace.configPath, folderOrWorkspaceConfigUri)) {\n\t\t\treturn window;\n\t\t}\n\n\t\t// check for folder path\n\t\tif (isSingleFolderWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqual(window.openedWorkspace.uri, folderOrWorkspaceConfigUri)) {\n\t\t\treturn window;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n\nexport function findWindowOnExtensionDevelopmentPath(windows: ICodeWindow[], extensionDevelopmentPaths: string[]): ICodeWindow | undefined {\n\n\tconst matches = (uriString: string): boolean => {\n\t\treturn extensionDevelopmentPaths.some(path => extUriBiasedIgnorePathCase.isEqual(URI.file(path), URI.file(uriString)));\n\t};\n\n\tfor (const window of windows) {\n\n\t\t// match on extension development path. the path can be one or more paths\n\t\t// so we check if any of the paths match on any of the provided ones\n\t\tif (window.config?.extensionDevelopmentPath?.some(path => matches(path))) {\n\t\t\treturn window;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"],
  "mappings": ";;AAKA,SAAS,kCAAkC;AAC3C,SAAS,WAAW;AACpB,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB,kCAAkC,mCAAmC,uBAAuB,4BAA4B;AAErJ,eAAsB,iBAAiB,SAAwB,SAAc,wBAAwI;AAGpN,aAAW,UAAU,SAAS;AAC7B,UAAM,YAAY,OAAO;AACzB,QAAI,sBAAsB,SAAS,GAAG;AACrC,YAAM,oBAAoB,MAAM,uBAAuB,SAAS;AAGhE,UAAI,mBAAmB;AACtB,YAAI,kBAAkB,QAAQ,KAAK,YAAU,2BAA2B,gBAAgB,SAAS,OAAO,GAAG,CAAC,GAAG;AAC9G,iBAAO;AAAA,QACR;AAAA,MACD,OAGK;AACJ,YAAI,2BAA2B,gBAAgB,SAAS,UAAU,UAAU,GAAG;AAC9E,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAGA,QAAM,gCAAgC,QAAQ,OAAO,YAAU,kCAAkC,OAAO,eAAe,KAAK,2BAA2B,gBAAgB,SAAS,OAAO,gBAAgB,GAAG,CAAC;AAC3M,MAAI,8BAA8B,QAAQ;AACzC,WAAO,8BAA8B,KAAK,CAAC,SAAS,YAAY,EAAG,QAAQ,gBAAqD,IAAI,KAAK,SAAU,QAAQ,gBAAqD,IAAI,KAAK,OAAO,EAAE,CAAC;AAAA,EACpO;AAEA,SAAO;AACR;AA/BsB;AAiCf,SAAS,8BAA8B,SAAwB,4BAA0D;AAE/H,aAAW,UAAU,SAAS;AAG7B,QAAI,sBAAsB,OAAO,eAAe,KAAK,2BAA2B,QAAQ,OAAO,gBAAgB,YAAY,0BAA0B,GAAG;AACvJ,aAAO;AAAA,IACR;AAGA,QAAI,kCAAkC,OAAO,eAAe,KAAK,2BAA2B,QAAQ,OAAO,gBAAgB,KAAK,0BAA0B,GAAG;AAC5J,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAhBgB;AAmBT,SAAS,qCAAqC,SAAwB,2BAA8D;AAE1I,QAAM,UAAU,wBAAC,cAA+B;AAC/C,WAAO,0BAA0B,KAAK,UAAQ,2BAA2B,QAAQ,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,SAAS,CAAC,CAAC;AAAA,EACtH,GAFgB;AAIhB,aAAW,UAAU,SAAS;AAI7B,QAAI,OAAO,QAAQ,0BAA0B,KAAK,UAAQ,QAAQ,IAAI,CAAC,GAAG;AACzE,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAhBgB;",
  "names": []
}
