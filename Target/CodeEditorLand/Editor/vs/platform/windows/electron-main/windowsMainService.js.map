{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/windows/electron-main/windowsMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from \"fs\";\nimport { arch, hostname, release } from \"os\";\nimport { BrowserWindow, type WebContents, app, shell } from \"electron\";\nimport { coalesce, distinct } from \"../../../base/common/arrays.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { CharCode } from \"../../../base/common/charCode.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tisWindowsDriveLetter,\n\tparseLineAndColumnAware,\n\tsanitizeFilePath,\n\ttoSlashes,\n} from \"../../../base/common/extpath.js\";\nimport { getPathLabel } from \"../../../base/common/labels.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { basename, join, normalize, posix } from \"../../../base/common/path.js\";\nimport { getMarks, mark } from \"../../../base/common/performance.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOS,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport { cwd } from \"../../../base/common/process.js\";\nimport {\n\textUriBiasedIgnorePathCase,\n\tisEqualAuthority,\n\tnormalizePath,\n\toriginalFSPath,\n\tremoveTrailingPathSeparator,\n} from \"../../../base/common/resources.js\";\nimport { assertIsDefined } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { addUNCHostToAllowlist } from \"../../../base/node/unc.js\";\nimport { getNLSLanguage, getNLSMessages, localize } from \"../../../nls.js\";\nimport type { IAuxiliaryWindow } from \"../../auxiliaryWindow/electron-main/auxiliaryWindow.js\";\nimport { IAuxiliaryWindowsMainService } from \"../../auxiliaryWindow/electron-main/auxiliaryWindows.js\";\nimport { IBackupMainService } from \"../../backup/electron-main/backup.js\";\nimport type { IEmptyWindowBackupInfo } from \"../../backup/node/backup.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { ICSSDevelopmentService } from \"../../cssDev/node/cssDevService.js\";\nimport { IDialogMainService } from \"../../dialogs/electron-main/dialogMainService.js\";\nimport type {\n\tIEditorOptions,\n\tITextEditorOptions,\n} from \"../../editor/common/editor.js\";\nimport type { NativeParsedArgs } from \"../../environment/common/argv.js\";\nimport { IEnvironmentMainService } from \"../../environment/electron-main/environmentMainService.js\";\nimport { FileType, IFileService } from \"../../files/common/files.js\";\nimport { IInstantiationService } from \"../../instantiation/common/instantiation.js\";\nimport { ILifecycleMainService } from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { ILoggerMainService } from \"../../log/electron-main/loggerService.js\";\nimport { IPolicyService } from \"../../policy/common/policy.js\";\nimport product from \"../../product/common/product.js\";\nimport { IProtocolMainService } from \"../../protocol/electron-main/protocol.js\";\nimport { getRemoteAuthority } from \"../../remote/common/remoteHosts.js\";\nimport { IStateService } from \"../../state/node/state.js\";\nimport { IThemeMainService } from \"../../theme/electron-main/themeMainService.js\";\nimport type { IUserDataProfile } from \"../../userDataProfile/common/userDataProfile.js\";\nimport { IUserDataProfilesMainService } from \"../../userDataProfile/electron-main/userDataProfile.js\";\nimport {\n\ttype IAddFoldersRequest,\n\ttype INativeOpenFileRequest,\n\ttype INativeWindowConfiguration,\n\ttype IOpenEmptyWindowOptions,\n\ttype IPath,\n\ttype IPathsToWaitFor,\n\ttype IWindowOpenable,\n\ttype IWindowSettings,\n\tisFileToOpen,\n\tisFolderToOpen,\n\tisWorkspaceToOpen,\n} from \"../../window/common/window.js\";\nimport {\n\ttype ICodeWindow,\n\tUnloadReason,\n} from \"../../window/electron-main/window.js\";\nimport {\n\ttype IAnyWorkspaceIdentifier,\n\ttype ISingleFolderWorkspaceIdentifier,\n\ttype IWorkspaceIdentifier,\n\thasWorkspaceFileExtension,\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceIdentifier,\n\ttoWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\nimport type { IRecent } from \"../../workspaces/common/workspaces.js\";\nimport { IWorkspacesHistoryMainService } from \"../../workspaces/electron-main/workspacesHistoryMainService.js\";\nimport { IWorkspacesManagementMainService } from \"../../workspaces/electron-main/workspacesManagementMainService.js\";\nimport {\n\tcreateEmptyWorkspaceIdentifier,\n\tgetSingleFolderWorkspaceIdentifier,\n\tgetWorkspaceIdentifier,\n} from \"../../workspaces/node/workspaces.js\";\nimport { CodeWindow } from \"./windowImpl.js\";\nimport {\n\ttype IOpenConfiguration,\n\ttype IOpenEmptyConfiguration,\n\ttype IWindowsCountChangedEvent,\n\ttype IWindowsMainService,\n\tOpenContext,\n\tgetLastFocused,\n} from \"./windows.js\";\nimport {\n\tfindWindowOnExtensionDevelopmentPath,\n\tfindWindowOnFile,\n\tfindWindowOnWorkspaceOrFolder,\n} from \"./windowsFinder.js\";\nimport {\n\ttype IWindowState,\n\tWindowsStateHandler,\n} from \"./windowsStateHandler.js\";\n\n//#region Helper Interfaces\n\ntype RestoreWindowsSetting = \"preserve\" | \"all\" | \"folders\" | \"one\" | \"none\";\n\ninterface IOpenBrowserWindowOptions {\n\treadonly userEnv?: IProcessEnvironment;\n\treadonly cli?: NativeParsedArgs;\n\n\treadonly workspace?:\n\t\t| IWorkspaceIdentifier\n\t\t| ISingleFolderWorkspaceIdentifier;\n\n\treadonly remoteAuthority?: string;\n\n\treadonly initialStartup?: boolean;\n\n\treadonly filesToOpen?: IFilesToOpen;\n\n\treadonly forceNewWindow?: boolean;\n\treadonly forceNewTabbedWindow?: boolean;\n\treadonly windowToUse?: ICodeWindow;\n\n\treadonly emptyWindowBackupInfo?: IEmptyWindowBackupInfo;\n\treadonly forceProfile?: string;\n\treadonly forceTempProfile?: boolean;\n}\n\ninterface IPathResolveOptions {\n\t/**\n\t * By default, resolving a path will check\n\t * if the path exists. This can be disabled\n\t * with this flag.\n\t */\n\treadonly ignoreFileNotFound?: boolean;\n\n\t/**\n\t * Will reject a path if it points to a transient\n\t * workspace as indicated by a `transient: true`\n\t * property in the workspace file.\n\t */\n\treadonly rejectTransientWorkspaces?: boolean;\n\n\t/**\n\t * If enabled, will resolve the path line/column\n\t * aware and properly remove this information\n\t * from the resulting file path.\n\t */\n\treadonly gotoLineMode?: boolean;\n\n\t/**\n\t * Forces to resolve the provided path as workspace\n\t * file instead of opening it as a file.\n\t */\n\treadonly forceOpenWorkspaceAsFile?: boolean;\n\n\t/**\n\t * The remoteAuthority to use if the URL to open is\n\t * neither `file` nor `vscode-remote`.\n\t */\n\treadonly remoteAuthority?: string;\n}\n\ninterface IFilesToOpen {\n\treadonly remoteAuthority?: string;\n\n\tfilesToOpenOrCreate: IPath[];\n\tfilesToDiff: IPath[];\n\tfilesToMerge: IPath[];\n\n\tfilesToWait?: IPathsToWaitFor;\n}\n\ninterface IPathToOpen<T = IEditorOptions> extends IPath<T> {\n\t/**\n\t * The workspace to open\n\t */\n\treadonly workspace?:\n\t\t| IWorkspaceIdentifier\n\t\t| ISingleFolderWorkspaceIdentifier;\n\n\t/**\n\t * Whether the path is considered to be transient or not\n\t * for example, a transient workspace should not add to\n\t * the workspaces history and should never restore.\n\t */\n\treadonly transient?: boolean;\n\n\t/**\n\t * The backup path to use\n\t */\n\treadonly backupPath?: string;\n\n\t/**\n\t * The remote authority for the Code instance to open. Undefined if not remote.\n\t */\n\treadonly remoteAuthority?: string;\n\n\t/**\n\t * Optional label for the recent history\n\t */\n\tlabel?: string;\n}\n\ninterface IWorkspacePathToOpen extends IPathToOpen {\n\treadonly workspace: IWorkspaceIdentifier;\n}\n\ninterface ISingleFolderWorkspacePathToOpen extends IPathToOpen {\n\treadonly workspace: ISingleFolderWorkspaceIdentifier;\n}\n\nfunction isWorkspacePathToOpen(\n\tpath: IPathToOpen | undefined,\n): path is IWorkspacePathToOpen {\n\treturn isWorkspaceIdentifier(path?.workspace);\n}\n\nfunction isSingleFolderWorkspacePathToOpen(\n\tpath: IPathToOpen | undefined,\n): path is ISingleFolderWorkspacePathToOpen {\n\treturn isSingleFolderWorkspaceIdentifier(path?.workspace);\n}\n\n//#endregion\n\nexport class WindowsMainService\n\textends Disposable\n\timplements IWindowsMainService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidOpenWindow = this._register(\n\t\tnew Emitter<ICodeWindow>(),\n\t);\n\treadonly onDidOpenWindow = this._onDidOpenWindow.event;\n\n\tprivate readonly _onDidSignalReadyWindow = this._register(\n\t\tnew Emitter<ICodeWindow>(),\n\t);\n\treadonly onDidSignalReadyWindow = this._onDidSignalReadyWindow.event;\n\n\tprivate readonly _onDidDestroyWindow = this._register(\n\t\tnew Emitter<ICodeWindow>(),\n\t);\n\treadonly onDidDestroyWindow = this._onDidDestroyWindow.event;\n\n\tprivate readonly _onDidChangeWindowsCount = this._register(\n\t\tnew Emitter<IWindowsCountChangedEvent>(),\n\t);\n\treadonly onDidChangeWindowsCount = this._onDidChangeWindowsCount.event;\n\n\tprivate readonly _onDidMaximizeWindow = this._register(\n\t\tnew Emitter<ICodeWindow>(),\n\t);\n\treadonly onDidMaximizeWindow = this._onDidMaximizeWindow.event;\n\n\tprivate readonly _onDidUnmaximizeWindow = this._register(\n\t\tnew Emitter<ICodeWindow>(),\n\t);\n\treadonly onDidUnmaximizeWindow = this._onDidUnmaximizeWindow.event;\n\n\tprivate readonly _onDidChangeFullScreen = this._register(\n\t\tnew Emitter<{ window: ICodeWindow; fullscreen: boolean }>(),\n\t);\n\treadonly onDidChangeFullScreen = this._onDidChangeFullScreen.event;\n\n\tprivate readonly _onDidTriggerSystemContextMenu = this._register(\n\t\tnew Emitter<{ window: ICodeWindow; x: number; y: number }>(),\n\t);\n\treadonly onDidTriggerSystemContextMenu =\n\t\tthis._onDidTriggerSystemContextMenu.event;\n\n\tprivate readonly windows = new Map<number, ICodeWindow>();\n\n\tprivate readonly windowsStateHandler = this._register(\n\t\tnew WindowsStateHandler(\n\t\t\tthis,\n\t\t\tthis.stateService,\n\t\t\tthis.lifecycleMainService,\n\t\t\tthis.logService,\n\t\t\tthis.configurationService,\n\t\t),\n\t);\n\n\tconstructor(\n\t\tprivate readonly machineId: string,\n\t\tprivate readonly sqmId: string,\n\t\tprivate readonly devDeviceId: string,\n\t\tprivate readonly initialUserEnv: IProcessEnvironment,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerMainService private readonly loggerService: ILoggerMainService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesMainService: IUserDataProfilesMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IBackupMainService private readonly backupMainService: IBackupMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspacesHistoryMainService private readonly workspacesHistoryMainService: IWorkspacesHistoryMainService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IDialogMainService private readonly dialogMainService: IDialogMainService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProtocolMainService private readonly protocolMainService: IProtocolMainService,\n\t\t@IThemeMainService private readonly themeMainService: IThemeMainService,\n\t\t@IAuxiliaryWindowsMainService private readonly auxiliaryWindowsMainService: IAuxiliaryWindowsMainService,\n\t\t@ICSSDevelopmentService private readonly cssDevelopmentService: ICSSDevelopmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Signal a window is ready after having entered a workspace\n\t\tthis._register(\n\t\t\tthis.workspacesManagementMainService.onDidEnterWorkspace((event) =>\n\t\t\t\tthis._onDidSignalReadyWindow.fire(event.window),\n\t\t\t),\n\t\t);\n\n\t\t// Update valid roots in protocol service for extension dev windows\n\t\tthis._register(\n\t\t\tthis.onDidSignalReadyWindow((window) => {\n\t\t\t\tif (\n\t\t\t\t\twindow.config?.extensionDevelopmentPath ||\n\t\t\t\t\twindow.config?.extensionTestsPath\n\t\t\t\t) {\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\tEvent.any(\n\t\t\t\t\t\t\twindow.onDidClose,\n\t\t\t\t\t\t\twindow.onDidDestroy,\n\t\t\t\t\t\t)(() => disposables.dispose()),\n\t\t\t\t\t);\n\n\t\t\t\t\t// Allow access to extension development path\n\t\t\t\t\tif (window.config.extensionDevelopmentPath) {\n\t\t\t\t\t\tfor (const extensionDevelopmentPath of window.config\n\t\t\t\t\t\t\t.extensionDevelopmentPath) {\n\t\t\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\t\t\tthis.protocolMainService.addValidFileRoot(\n\t\t\t\t\t\t\t\t\textensionDevelopmentPath,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Allow access to extension tests path\n\t\t\t\t\tif (window.config.extensionTestsPath) {\n\t\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\t\tthis.protocolMainService.addValidFileRoot(\n\t\t\t\t\t\t\t\twindow.config.extensionTestsPath,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\topenEmptyWindow(\n\t\topenConfig: IOpenEmptyConfiguration,\n\t\toptions?: IOpenEmptyWindowOptions,\n\t): Promise<ICodeWindow[]> {\n\t\tconst cli = this.environmentMainService.args;\n\t\tconst remoteAuthority = options?.remoteAuthority || undefined;\n\t\tconst forceEmpty = true;\n\t\tconst forceReuseWindow = options?.forceReuseWindow;\n\t\tconst forceNewWindow = !forceReuseWindow;\n\n\t\treturn this.open({\n\t\t\t...openConfig,\n\t\t\tcli,\n\t\t\tforceEmpty,\n\t\t\tforceNewWindow,\n\t\t\tforceReuseWindow,\n\t\t\tremoteAuthority,\n\t\t\tforceTempProfile: options?.forceTempProfile,\n\t\t\tforceProfile: options?.forceProfile,\n\t\t});\n\t}\n\n\topenExistingWindow(\n\t\twindow: ICodeWindow,\n\t\topenConfig: IOpenConfiguration,\n\t): void {\n\t\t// Bring window to front\n\t\twindow.focus();\n\n\t\t// Handle --wait\n\t\tthis.handleWaitMarkerFile(openConfig, [window]);\n\t}\n\n\tasync open(openConfig: IOpenConfiguration): Promise<ICodeWindow[]> {\n\t\tthis.logService.trace(\"windowsManager#open\");\n\n\t\tif (\n\t\t\topenConfig.addMode &&\n\t\t\t(openConfig.initialStartup || !this.getLastActiveWindow())\n\t\t) {\n\t\t\topenConfig.addMode = false; // Make sure addMode is only enabled if we have an active window\n\t\t}\n\n\t\tconst foldersToAdd: ISingleFolderWorkspacePathToOpen[] = [];\n\t\tconst foldersToOpen: ISingleFolderWorkspacePathToOpen[] = [];\n\n\t\tconst workspacesToOpen: IWorkspacePathToOpen[] = [];\n\t\tconst untitledWorkspacesToRestore: IWorkspacePathToOpen[] = [];\n\n\t\tconst emptyWindowsWithBackupsToRestore: IEmptyWindowBackupInfo[] = [];\n\n\t\tlet filesToOpen: IFilesToOpen | undefined;\n\t\tlet openOneEmptyWindow = false;\n\n\t\t// Identify things to open from open config\n\t\tconst pathsToOpen = await this.getPathsToOpen(openConfig);\n\t\tthis.logService.trace(\"windowsManager#open pathsToOpen\", pathsToOpen);\n\t\tfor (const path of pathsToOpen) {\n\t\t\tif (isSingleFolderWorkspacePathToOpen(path)) {\n\t\t\t\tif (openConfig.addMode) {\n\t\t\t\t\t// When run with --add, take the folders that are to be opened as\n\t\t\t\t\t// folders that should be added to the currently active window.\n\t\t\t\t\tfoldersToAdd.push(path);\n\t\t\t\t} else {\n\t\t\t\t\tfoldersToOpen.push(path);\n\t\t\t\t}\n\t\t\t} else if (isWorkspacePathToOpen(path)) {\n\t\t\t\tworkspacesToOpen.push(path);\n\t\t\t} else if (path.fileUri) {\n\t\t\t\tif (!filesToOpen) {\n\t\t\t\t\tfilesToOpen = {\n\t\t\t\t\t\tfilesToOpenOrCreate: [],\n\t\t\t\t\t\tfilesToDiff: [],\n\t\t\t\t\t\tfilesToMerge: [],\n\t\t\t\t\t\tremoteAuthority: path.remoteAuthority,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tfilesToOpen.filesToOpenOrCreate.push(path);\n\t\t\t} else if (path.backupPath) {\n\t\t\t\temptyWindowsWithBackupsToRestore.push({\n\t\t\t\t\tbackupFolder: basename(path.backupPath),\n\t\t\t\t\tremoteAuthority: path.remoteAuthority,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\topenOneEmptyWindow = true;\n\t\t\t}\n\t\t}\n\n\t\t// When run with --diff, take the first 2 files to open as files to diff\n\t\tif (\n\t\t\topenConfig.diffMode &&\n\t\t\tfilesToOpen &&\n\t\t\tfilesToOpen.filesToOpenOrCreate.length >= 2\n\t\t) {\n\t\t\tfilesToOpen.filesToDiff = filesToOpen.filesToOpenOrCreate.slice(\n\t\t\t\t0,\n\t\t\t\t2,\n\t\t\t);\n\t\t\tfilesToOpen.filesToOpenOrCreate = [];\n\t\t}\n\n\t\t// When run with --merge, take the first 4 files to open as files to merge\n\t\tif (\n\t\t\topenConfig.mergeMode &&\n\t\t\tfilesToOpen &&\n\t\t\tfilesToOpen.filesToOpenOrCreate.length === 4\n\t\t) {\n\t\t\tfilesToOpen.filesToMerge = filesToOpen.filesToOpenOrCreate.slice(\n\t\t\t\t0,\n\t\t\t\t4,\n\t\t\t);\n\t\t\tfilesToOpen.filesToOpenOrCreate = [];\n\t\t\tfilesToOpen.filesToDiff = [];\n\t\t}\n\n\t\t// When run with --wait, make sure we keep the paths to wait for\n\t\tif (filesToOpen && openConfig.waitMarkerFileURI) {\n\t\t\tfilesToOpen.filesToWait = {\n\t\t\t\tpaths: coalesce([\n\t\t\t\t\t...filesToOpen.filesToDiff,\n\t\t\t\t\tfilesToOpen\n\t\t\t\t\t\t.filesToMerge[3] /* [3] is the resulting merge file */,\n\t\t\t\t\t...filesToOpen.filesToOpenOrCreate,\n\t\t\t\t]),\n\t\t\t\twaitMarkerFileUri: openConfig.waitMarkerFileURI,\n\t\t\t};\n\t\t}\n\n\t\t// These are windows to restore because of hot-exit or from previous session (only performed once on startup!)\n\t\tif (openConfig.initialStartup) {\n\t\t\t// Untitled workspaces are always restored\n\t\t\tuntitledWorkspacesToRestore.push(\n\t\t\t\t...this.workspacesManagementMainService.getUntitledWorkspaces(),\n\t\t\t);\n\t\t\tworkspacesToOpen.push(...untitledWorkspacesToRestore);\n\n\t\t\t// Empty windows with backups are always restored\n\t\t\temptyWindowsWithBackupsToRestore.push(\n\t\t\t\t...this.backupMainService.getEmptyWindowBackups(),\n\t\t\t);\n\t\t} else {\n\t\t\temptyWindowsWithBackupsToRestore.length = 0;\n\t\t}\n\n\t\t// Open based on config\n\t\tconst { windows: usedWindows, filesOpenedInWindow } = await this.doOpen(\n\t\t\topenConfig,\n\t\t\tworkspacesToOpen,\n\t\t\tfoldersToOpen,\n\t\t\temptyWindowsWithBackupsToRestore,\n\t\t\topenOneEmptyWindow,\n\t\t\tfilesToOpen,\n\t\t\tfoldersToAdd,\n\t\t);\n\n\t\tthis.logService.trace(\n\t\t\t`windowsManager#open used window count ${usedWindows.length} (workspacesToOpen: ${workspacesToOpen.length}, foldersToOpen: ${foldersToOpen.length}, emptyToRestore: ${emptyWindowsWithBackupsToRestore.length}, openOneEmptyWindow: ${openOneEmptyWindow})`,\n\t\t);\n\n\t\t// Make sure to pass focus to the most relevant of the windows if we open multiple\n\t\tif (usedWindows.length > 1) {\n\t\t\t// 1.) focus window we opened files in always with highest priority\n\t\t\tif (filesOpenedInWindow) {\n\t\t\t\tfilesOpenedInWindow.focus();\n\t\t\t}\n\n\t\t\t// Otherwise, find a good window based on open params\n\t\t\telse {\n\t\t\t\tconst focusLastActive =\n\t\t\t\t\tthis.windowsStateHandler.state.lastActiveWindow &&\n\t\t\t\t\t!openConfig.forceEmpty &&\n\t\t\t\t\t!openConfig.cli._.length &&\n\t\t\t\t\t!openConfig.cli[\"file-uri\"] &&\n\t\t\t\t\t!openConfig.cli[\"folder-uri\"] &&\n\t\t\t\t\t!(openConfig.urisToOpen && openConfig.urisToOpen.length);\n\t\t\t\tlet focusLastOpened = true;\n\t\t\t\tlet focusLastWindow = true;\n\n\t\t\t\t// 2.) focus last active window if we are not instructed to open any paths\n\t\t\t\tif (focusLastActive) {\n\t\t\t\t\tconst lastActiveWindow = usedWindows.filter(\n\t\t\t\t\t\t(window) =>\n\t\t\t\t\t\t\tthis.windowsStateHandler.state.lastActiveWindow &&\n\t\t\t\t\t\t\twindow.backupPath ===\n\t\t\t\t\t\t\t\tthis.windowsStateHandler.state.lastActiveWindow\n\t\t\t\t\t\t\t\t\t.backupPath,\n\t\t\t\t\t);\n\t\t\t\t\tif (lastActiveWindow.length) {\n\t\t\t\t\t\tlastActiveWindow[0].focus();\n\t\t\t\t\t\tfocusLastOpened = false;\n\t\t\t\t\t\tfocusLastWindow = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 3.) if instructed to open paths, focus last window which is not restored\n\t\t\t\tif (focusLastOpened) {\n\t\t\t\t\tfor (let i = usedWindows.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tconst usedWindow = usedWindows[i];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(usedWindow.openedWorkspace &&\n\t\t\t\t\t\t\t\tuntitledWorkspacesToRestore.some(\n\t\t\t\t\t\t\t\t\t(workspace) =>\n\t\t\t\t\t\t\t\t\t\tusedWindow.openedWorkspace &&\n\t\t\t\t\t\t\t\t\t\tworkspace.workspace.id ===\n\t\t\t\t\t\t\t\t\t\t\tusedWindow.openedWorkspace.id,\n\t\t\t\t\t\t\t\t)) || // skip over restored workspace\n\t\t\t\t\t\t\t(usedWindow.backupPath &&\n\t\t\t\t\t\t\t\temptyWindowsWithBackupsToRestore.some(\n\t\t\t\t\t\t\t\t\t(empty) =>\n\t\t\t\t\t\t\t\t\t\tusedWindow.backupPath &&\n\t\t\t\t\t\t\t\t\t\tempty.backupFolder ===\n\t\t\t\t\t\t\t\t\t\t\tbasename(usedWindow.backupPath),\n\t\t\t\t\t\t\t\t)) // skip over restored empty window\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tusedWindow.focus();\n\t\t\t\t\t\tfocusLastWindow = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 4.) finally, always ensure to have at least last used window focused\n\t\t\t\tif (focusLastWindow) {\n\t\t\t\t\tusedWindows[usedWindows.length - 1].focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remember in recent document list (unless this opens for extension development)\n\t\t// Also do not add paths when files are opened for diffing or merging, only if opened individually\n\t\tconst isDiff = filesToOpen && filesToOpen.filesToDiff.length > 0;\n\t\tconst isMerge = filesToOpen && filesToOpen.filesToMerge.length > 0;\n\t\tif (\n\t\t\t!usedWindows.some((window) => window.isExtensionDevelopmentHost) &&\n\t\t\t!isDiff &&\n\t\t\t!isMerge &&\n\t\t\t!openConfig.noRecentEntry\n\t\t) {\n\t\t\tconst recents: IRecent[] = [];\n\t\t\tfor (const pathToOpen of pathsToOpen) {\n\t\t\t\tif (\n\t\t\t\t\tisWorkspacePathToOpen(pathToOpen) &&\n\t\t\t\t\t!pathToOpen.transient /* never add transient workspaces to history */\n\t\t\t\t) {\n\t\t\t\t\trecents.push({\n\t\t\t\t\t\tlabel: pathToOpen.label,\n\t\t\t\t\t\tworkspace: pathToOpen.workspace,\n\t\t\t\t\t\tremoteAuthority: pathToOpen.remoteAuthority,\n\t\t\t\t\t});\n\t\t\t\t} else if (isSingleFolderWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\trecents.push({\n\t\t\t\t\t\tlabel: pathToOpen.label,\n\t\t\t\t\t\tfolderUri: pathToOpen.workspace.uri,\n\t\t\t\t\t\tremoteAuthority: pathToOpen.remoteAuthority,\n\t\t\t\t\t});\n\t\t\t\t} else if (pathToOpen.fileUri) {\n\t\t\t\t\trecents.push({\n\t\t\t\t\t\tlabel: pathToOpen.label,\n\t\t\t\t\t\tfileUri: pathToOpen.fileUri,\n\t\t\t\t\t\tremoteAuthority: pathToOpen.remoteAuthority,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.workspacesHistoryMainService.addRecentlyOpened(recents);\n\t\t}\n\n\t\t// Handle --wait\n\t\tthis.handleWaitMarkerFile(openConfig, usedWindows);\n\n\t\treturn usedWindows;\n\t}\n\n\tprivate handleWaitMarkerFile(\n\t\topenConfig: IOpenConfiguration,\n\t\tusedWindows: ICodeWindow[],\n\t): void {\n\t\t// If we got started with --wait from the CLI, we need to signal to the outside when the window\n\t\t// used for the edit operation is closed or loaded to a different folder so that the waiting\n\t\t// process can continue. We do this by deleting the waitMarkerFilePath.\n\t\tconst waitMarkerFileURI = openConfig.waitMarkerFileURI;\n\t\tif (\n\t\t\topenConfig.context === OpenContext.CLI &&\n\t\t\twaitMarkerFileURI &&\n\t\t\tusedWindows.length === 1 &&\n\t\t\tusedWindows[0]\n\t\t) {\n\t\t\t(async () => {\n\t\t\t\tawait usedWindows[0].whenClosedOrLoaded;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(waitMarkerFileURI);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore - could have been deleted from the window already\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t}\n\n\tprivate async doOpen(\n\t\topenConfig: IOpenConfiguration,\n\t\tworkspacesToOpen: IWorkspacePathToOpen[],\n\t\tfoldersToOpen: ISingleFolderWorkspacePathToOpen[],\n\t\temptyToRestore: IEmptyWindowBackupInfo[],\n\t\topenOneEmptyWindow: boolean,\n\t\tfilesToOpen: IFilesToOpen | undefined,\n\t\tfoldersToAdd: ISingleFolderWorkspacePathToOpen[],\n\t): Promise<{\n\t\twindows: ICodeWindow[];\n\t\tfilesOpenedInWindow: ICodeWindow | undefined;\n\t}> {\n\t\t// Keep track of used windows and remember\n\t\t// if files have been opened in one of them\n\t\tconst usedWindows: ICodeWindow[] = [];\n\t\tlet filesOpenedInWindow: ICodeWindow | undefined;\n\t\tfunction addUsedWindow(\n\t\t\twindow: ICodeWindow,\n\t\t\topenedFiles?: boolean,\n\t\t): void {\n\t\t\tusedWindows.push(window);\n\n\t\t\tif (openedFiles) {\n\t\t\t\tfilesOpenedInWindow = window;\n\t\t\t\tfilesToOpen = undefined; // reset `filesToOpen` since files have been opened\n\t\t\t}\n\t\t}\n\n\t\t// Settings can decide if files/folders open in new window or not\n\t\tlet { openFolderInNewWindow, openFilesInNewWindow } =\n\t\t\tthis.shouldOpenNewWindow(openConfig);\n\n\t\t// Handle folders to add by looking for the last active workspace (not on initial startup)\n\t\tif (!openConfig.initialStartup && foldersToAdd.length > 0) {\n\t\t\tconst authority = foldersToAdd[0].remoteAuthority;\n\t\t\tconst lastActiveWindow =\n\t\t\t\tthis.getLastActiveWindowForAuthority(authority);\n\t\t\tif (lastActiveWindow) {\n\t\t\t\taddUsedWindow(\n\t\t\t\t\tthis.doAddFoldersToExistingWindow(\n\t\t\t\t\t\tlastActiveWindow,\n\t\t\t\t\t\tfoldersToAdd.map(\n\t\t\t\t\t\t\t(folderToAdd) => folderToAdd.workspace.uri,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Handle files to open/diff/merge or to create when we dont open a folder and we do not restore any\n\t\t// folder/untitled from hot-exit by trying to open them in the window that fits best\n\t\tconst potentialNewWindowsCount =\n\t\t\tfoldersToOpen.length +\n\t\t\tworkspacesToOpen.length +\n\t\t\temptyToRestore.length;\n\t\tif (filesToOpen && potentialNewWindowsCount === 0) {\n\t\t\t// Find suitable window or folder path to open files in\n\t\t\tconst fileToCheck: IPath<IEditorOptions> | undefined =\n\t\t\t\tfilesToOpen.filesToOpenOrCreate[0] ||\n\t\t\t\tfilesToOpen.filesToDiff[0] ||\n\t\t\t\tfilesToOpen\n\t\t\t\t\t.filesToMerge[3] /* [3] is the resulting merge file */;\n\n\t\t\t// only look at the windows with correct authority\n\t\t\tconst windows = this.getWindows().filter(\n\t\t\t\t(window) =>\n\t\t\t\t\tfilesToOpen &&\n\t\t\t\t\tisEqualAuthority(\n\t\t\t\t\t\twindow.remoteAuthority,\n\t\t\t\t\t\tfilesToOpen.remoteAuthority,\n\t\t\t\t\t),\n\t\t\t);\n\n\t\t\t// figure out a good window to open the files in if any\n\t\t\t// with a fallback to the last active window.\n\t\t\t//\n\t\t\t// in case `openFilesInNewWindow` is enforced, we skip\n\t\t\t// this step.\n\t\t\tlet windowToUseForFiles: ICodeWindow | undefined;\n\t\t\tif (fileToCheck?.fileUri && !openFilesInNewWindow) {\n\t\t\t\tif (\n\t\t\t\t\topenConfig.context === OpenContext.DESKTOP ||\n\t\t\t\t\topenConfig.context === OpenContext.CLI ||\n\t\t\t\t\topenConfig.context === OpenContext.DOCK ||\n\t\t\t\t\topenConfig.context === OpenContext.LINK\n\t\t\t\t) {\n\t\t\t\t\twindowToUseForFiles = await findWindowOnFile(\n\t\t\t\t\t\twindows,\n\t\t\t\t\t\tfileToCheck.fileUri,\n\t\t\t\t\t\tasync (workspace) =>\n\t\t\t\t\t\t\tworkspace.configPath.scheme === Schemas.file\n\t\t\t\t\t\t\t\t? this.workspacesManagementMainService.resolveLocalWorkspace(\n\t\t\t\t\t\t\t\t\t\tworkspace.configPath,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!windowToUseForFiles) {\n\t\t\t\t\twindowToUseForFiles = this.doGetLastActiveWindow(windows);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We found a window to open the files in\n\t\t\tif (windowToUseForFiles) {\n\t\t\t\t// Window is workspace\n\t\t\t\tif (\n\t\t\t\t\tisWorkspaceIdentifier(windowToUseForFiles.openedWorkspace)\n\t\t\t\t) {\n\t\t\t\t\tworkspacesToOpen.push({\n\t\t\t\t\t\tworkspace: windowToUseForFiles.openedWorkspace,\n\t\t\t\t\t\tremoteAuthority: windowToUseForFiles.remoteAuthority,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Window is single folder\n\t\t\t\telse if (\n\t\t\t\t\tisSingleFolderWorkspaceIdentifier(\n\t\t\t\t\t\twindowToUseForFiles.openedWorkspace,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tfoldersToOpen.push({\n\t\t\t\t\t\tworkspace: windowToUseForFiles.openedWorkspace,\n\t\t\t\t\t\tremoteAuthority: windowToUseForFiles.remoteAuthority,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Window is empty\n\t\t\t\telse {\n\t\t\t\t\taddUsedWindow(\n\t\t\t\t\t\tthis.doOpenFilesInExistingWindow(\n\t\t\t\t\t\t\topenConfig,\n\t\t\t\t\t\t\twindowToUseForFiles,\n\t\t\t\t\t\t\tfilesToOpen,\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Finally, if no window or folder is found, just open the files in an empty window\n\t\t\telse {\n\t\t\t\taddUsedWindow(\n\t\t\t\t\tawait this.openInBrowserWindow({\n\t\t\t\t\t\tuserEnv: openConfig.userEnv,\n\t\t\t\t\t\tcli: openConfig.cli,\n\t\t\t\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\t\t\t\tfilesToOpen,\n\t\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\t\tremoteAuthority: filesToOpen.remoteAuthority,\n\t\t\t\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\t\t\t\tforceProfile: openConfig.forceProfile,\n\t\t\t\t\t\tforceTempProfile: openConfig.forceTempProfile,\n\t\t\t\t\t}),\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Handle workspaces to open (instructed and to restore)\n\t\tconst allWorkspacesToOpen = distinct(\n\t\t\tworkspacesToOpen,\n\t\t\t(workspace) => workspace.workspace.id,\n\t\t); // prevent duplicates\n\t\tif (allWorkspacesToOpen.length > 0) {\n\t\t\t// Check for existing instances\n\t\t\tconst windowsOnWorkspace = coalesce(\n\t\t\t\tallWorkspacesToOpen.map((workspaceToOpen) =>\n\t\t\t\t\tfindWindowOnWorkspaceOrFolder(\n\t\t\t\t\t\tthis.getWindows(),\n\t\t\t\t\t\tworkspaceToOpen.workspace.configPath,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (windowsOnWorkspace.length > 0) {\n\t\t\t\tconst windowOnWorkspace = windowsOnWorkspace[0];\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(\n\t\t\t\t\tfilesToOpen?.remoteAuthority,\n\t\t\t\t\twindowOnWorkspace.remoteAuthority,\n\t\t\t\t)\n\t\t\t\t\t? filesToOpen\n\t\t\t\t\t: undefined;\n\n\t\t\t\t// Do open files\n\t\t\t\taddUsedWindow(\n\t\t\t\t\tthis.doOpenFilesInExistingWindow(\n\t\t\t\t\t\topenConfig,\n\t\t\t\t\t\twindowOnWorkspace,\n\t\t\t\t\t\tfilesToOpenInWindow,\n\t\t\t\t\t),\n\t\t\t\t\t!!filesToOpenInWindow,\n\t\t\t\t);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\n\t\t\t// Open remaining ones\n\t\t\tfor (const workspaceToOpen of allWorkspacesToOpen) {\n\t\t\t\tif (\n\t\t\t\t\twindowsOnWorkspace.some(\n\t\t\t\t\t\t(window) =>\n\t\t\t\t\t\t\twindow.openedWorkspace &&\n\t\t\t\t\t\t\twindow.openedWorkspace.id ===\n\t\t\t\t\t\t\t\tworkspaceToOpen.workspace.id,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tcontinue; // ignore folders that are already open\n\t\t\t\t}\n\n\t\t\t\tconst remoteAuthority = workspaceToOpen.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(\n\t\t\t\t\tfilesToOpen?.remoteAuthority,\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t)\n\t\t\t\t\t? filesToOpen\n\t\t\t\t\t: undefined;\n\n\t\t\t\t// Do open folder\n\t\t\t\taddUsedWindow(\n\t\t\t\t\tawait this.doOpenFolderOrWorkspace(\n\t\t\t\t\t\topenConfig,\n\t\t\t\t\t\tworkspaceToOpen,\n\t\t\t\t\t\topenFolderInNewWindow,\n\t\t\t\t\t\tfilesToOpenInWindow,\n\t\t\t\t\t),\n\t\t\t\t\t!!filesToOpenInWindow,\n\t\t\t\t);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\t\t}\n\n\t\t// Handle folders to open (instructed and to restore)\n\t\tconst allFoldersToOpen = distinct(foldersToOpen, (folder) =>\n\t\t\textUriBiasedIgnorePathCase.getComparisonKey(folder.workspace.uri),\n\t\t); // prevent duplicates\n\t\tif (allFoldersToOpen.length > 0) {\n\t\t\t// Check for existing instances\n\t\t\tconst windowsOnFolderPath = coalesce(\n\t\t\t\tallFoldersToOpen.map((folderToOpen) =>\n\t\t\t\t\tfindWindowOnWorkspaceOrFolder(\n\t\t\t\t\t\tthis.getWindows(),\n\t\t\t\t\t\tfolderToOpen.workspace.uri,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\tif (windowsOnFolderPath.length > 0) {\n\t\t\t\tconst windowOnFolderPath = windowsOnFolderPath[0];\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(\n\t\t\t\t\tfilesToOpen?.remoteAuthority,\n\t\t\t\t\twindowOnFolderPath.remoteAuthority,\n\t\t\t\t)\n\t\t\t\t\t? filesToOpen\n\t\t\t\t\t: undefined;\n\n\t\t\t\t// Do open files\n\t\t\t\taddUsedWindow(\n\t\t\t\t\tthis.doOpenFilesInExistingWindow(\n\t\t\t\t\t\topenConfig,\n\t\t\t\t\t\twindowOnFolderPath,\n\t\t\t\t\t\tfilesToOpenInWindow,\n\t\t\t\t\t),\n\t\t\t\t\t!!filesToOpenInWindow,\n\t\t\t\t);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\n\t\t\t// Open remaining ones\n\t\t\tfor (const folderToOpen of allFoldersToOpen) {\n\t\t\t\tif (\n\t\t\t\t\twindowsOnFolderPath.some(\n\t\t\t\t\t\t(window) =>\n\t\t\t\t\t\t\tisSingleFolderWorkspaceIdentifier(\n\t\t\t\t\t\t\t\twindow.openedWorkspace,\n\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\textUriBiasedIgnorePathCase.isEqual(\n\t\t\t\t\t\t\t\twindow.openedWorkspace.uri,\n\t\t\t\t\t\t\t\tfolderToOpen.workspace.uri,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tcontinue; // ignore folders that are already open\n\t\t\t\t}\n\n\t\t\t\tconst remoteAuthority = folderToOpen.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(\n\t\t\t\t\tfilesToOpen?.remoteAuthority,\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t)\n\t\t\t\t\t? filesToOpen\n\t\t\t\t\t: undefined;\n\n\t\t\t\t// Do open folder\n\t\t\t\taddUsedWindow(\n\t\t\t\t\tawait this.doOpenFolderOrWorkspace(\n\t\t\t\t\t\topenConfig,\n\t\t\t\t\t\tfolderToOpen,\n\t\t\t\t\t\topenFolderInNewWindow,\n\t\t\t\t\t\tfilesToOpenInWindow,\n\t\t\t\t\t),\n\t\t\t\t\t!!filesToOpenInWindow,\n\t\t\t\t);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\t\t}\n\n\t\t// Handle empty to restore\n\t\tconst allEmptyToRestore = distinct(\n\t\t\temptyToRestore,\n\t\t\t(info) => info.backupFolder,\n\t\t); // prevent duplicates\n\t\tif (allEmptyToRestore.length > 0) {\n\t\t\tfor (const emptyWindowBackupInfo of allEmptyToRestore) {\n\t\t\t\tconst remoteAuthority = emptyWindowBackupInfo.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(\n\t\t\t\t\tfilesToOpen?.remoteAuthority,\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t)\n\t\t\t\t\t? filesToOpen\n\t\t\t\t\t: undefined;\n\n\t\t\t\taddUsedWindow(\n\t\t\t\t\tawait this.doOpenEmpty(\n\t\t\t\t\t\topenConfig,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\tfilesToOpenInWindow,\n\t\t\t\t\t\temptyWindowBackupInfo,\n\t\t\t\t\t),\n\t\t\t\t\t!!filesToOpenInWindow,\n\t\t\t\t);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\t\t}\n\n\t\t// Open empty window either if enforced or when files still have to open\n\t\tif (filesToOpen || openOneEmptyWindow) {\n\t\t\tconst remoteAuthority = filesToOpen\n\t\t\t\t? filesToOpen.remoteAuthority\n\t\t\t\t: openConfig.remoteAuthority;\n\n\t\t\taddUsedWindow(\n\t\t\t\tawait this.doOpenEmpty(\n\t\t\t\t\topenConfig,\n\t\t\t\t\topenFolderInNewWindow,\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t\tfilesToOpen,\n\t\t\t\t),\n\t\t\t\t!!filesToOpen,\n\t\t\t);\n\t\t}\n\n\t\treturn { windows: distinct(usedWindows), filesOpenedInWindow };\n\t}\n\n\tprivate doOpenFilesInExistingWindow(\n\t\tconfiguration: IOpenConfiguration,\n\t\twindow: ICodeWindow,\n\t\tfilesToOpen?: IFilesToOpen,\n\t): ICodeWindow {\n\t\tthis.logService.trace(\"windowsManager#doOpenFilesInExistingWindow\", {\n\t\t\tfilesToOpen,\n\t\t});\n\n\t\tthis.focusMainOrChildWindow(window); // make sure window or any of the children has focus\n\n\t\tconst params: INativeOpenFileRequest = {\n\t\t\tfilesToOpenOrCreate: filesToOpen?.filesToOpenOrCreate,\n\t\t\tfilesToDiff: filesToOpen?.filesToDiff,\n\t\t\tfilesToMerge: filesToOpen?.filesToMerge,\n\t\t\tfilesToWait: filesToOpen?.filesToWait,\n\t\t\ttermProgram: configuration?.userEnv?.[\"TERM_PROGRAM\"],\n\t\t};\n\t\twindow.sendWhenReady(\n\t\t\t\"vscode:openFiles\",\n\t\t\tCancellationToken.None,\n\t\t\tparams,\n\t\t);\n\n\t\treturn window;\n\t}\n\n\tprivate focusMainOrChildWindow(mainWindow: ICodeWindow): void {\n\t\tlet windowToFocus: ICodeWindow | IAuxiliaryWindow = mainWindow;\n\n\t\tconst focusedWindow = BrowserWindow.getFocusedWindow();\n\t\tif (focusedWindow && focusedWindow.id !== mainWindow.id) {\n\t\t\tconst auxiliaryWindowCandidate =\n\t\t\t\tthis.auxiliaryWindowsMainService.getWindowByWebContents(\n\t\t\t\t\tfocusedWindow.webContents,\n\t\t\t\t);\n\t\t\tif (\n\t\t\t\tauxiliaryWindowCandidate &&\n\t\t\t\tauxiliaryWindowCandidate.parentId === mainWindow.id\n\t\t\t) {\n\t\t\t\twindowToFocus = auxiliaryWindowCandidate;\n\t\t\t}\n\t\t}\n\n\t\twindowToFocus.focus();\n\t}\n\n\tprivate doAddFoldersToExistingWindow(\n\t\twindow: ICodeWindow,\n\t\tfoldersToAdd: URI[],\n\t): ICodeWindow {\n\t\tthis.logService.trace(\"windowsManager#doAddFoldersToExistingWindow\", {\n\t\t\tfoldersToAdd,\n\t\t});\n\n\t\twindow.focus(); // make sure window has focus\n\n\t\tconst request: IAddFoldersRequest = { foldersToAdd };\n\t\twindow.sendWhenReady(\n\t\t\t\"vscode:addFolders\",\n\t\t\tCancellationToken.None,\n\t\t\trequest,\n\t\t);\n\n\t\treturn window;\n\t}\n\n\tprivate doOpenEmpty(\n\t\topenConfig: IOpenConfiguration,\n\t\tforceNewWindow: boolean,\n\t\tremoteAuthority: string | undefined,\n\t\tfilesToOpen: IFilesToOpen | undefined,\n\t\temptyWindowBackupInfo?: IEmptyWindowBackupInfo,\n\t): Promise<ICodeWindow> {\n\t\tthis.logService.trace(\"windowsManager#doOpenEmpty\", {\n\t\t\trestore: !!emptyWindowBackupInfo,\n\t\t\tremoteAuthority,\n\t\t\tfilesToOpen,\n\t\t\tforceNewWindow,\n\t\t});\n\n\t\tlet windowToUse: ICodeWindow | undefined;\n\t\tif (!forceNewWindow && typeof openConfig.contextWindowId === \"number\") {\n\t\t\twindowToUse = this.getWindowById(openConfig.contextWindowId); // fix for https://github.com/microsoft/vscode/issues/97172\n\t\t}\n\n\t\treturn this.openInBrowserWindow({\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tcli: openConfig.cli,\n\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\tremoteAuthority,\n\t\t\tforceNewWindow,\n\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\tfilesToOpen,\n\t\t\twindowToUse,\n\t\t\temptyWindowBackupInfo,\n\t\t\tforceProfile: openConfig.forceProfile,\n\t\t\tforceTempProfile: openConfig.forceTempProfile,\n\t\t});\n\t}\n\n\tprivate doOpenFolderOrWorkspace(\n\t\topenConfig: IOpenConfiguration,\n\t\tfolderOrWorkspace:\n\t\t\t| IWorkspacePathToOpen\n\t\t\t| ISingleFolderWorkspacePathToOpen,\n\t\tforceNewWindow: boolean,\n\t\tfilesToOpen: IFilesToOpen | undefined,\n\t\twindowToUse?: ICodeWindow,\n\t): Promise<ICodeWindow> {\n\t\tthis.logService.trace(\"windowsManager#doOpenFolderOrWorkspace\", {\n\t\t\tfolderOrWorkspace,\n\t\t\tfilesToOpen,\n\t\t});\n\n\t\tif (\n\t\t\t!forceNewWindow &&\n\t\t\t!windowToUse &&\n\t\t\ttypeof openConfig.contextWindowId === \"number\"\n\t\t) {\n\t\t\twindowToUse = this.getWindowById(openConfig.contextWindowId); // fix for https://github.com/microsoft/vscode/issues/49587\n\t\t}\n\n\t\treturn this.openInBrowserWindow({\n\t\t\tworkspace: folderOrWorkspace.workspace,\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tcli: openConfig.cli,\n\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\tremoteAuthority: folderOrWorkspace.remoteAuthority,\n\t\t\tforceNewWindow,\n\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\tfilesToOpen,\n\t\t\twindowToUse,\n\t\t\tforceProfile: openConfig.forceProfile,\n\t\t\tforceTempProfile: openConfig.forceTempProfile,\n\t\t});\n\t}\n\n\tprivate async getPathsToOpen(\n\t\topenConfig: IOpenConfiguration,\n\t): Promise<IPathToOpen[]> {\n\t\tlet pathsToOpen: IPathToOpen[];\n\t\tlet isCommandLineOrAPICall = false;\n\t\tlet restoredWindows = false;\n\n\t\t// Extract paths: from API\n\t\tif (openConfig.urisToOpen && openConfig.urisToOpen.length > 0) {\n\t\t\tpathsToOpen = await this.doExtractPathsFromAPI(openConfig);\n\t\t\tisCommandLineOrAPICall = true;\n\t\t}\n\n\t\t// Check for force empty\n\t\telse if (openConfig.forceEmpty) {\n\t\t\tpathsToOpen = [Object.create(null)];\n\t\t}\n\n\t\t// Extract paths: from CLI\n\t\telse if (\n\t\t\topenConfig.cli._.length ||\n\t\t\topenConfig.cli[\"folder-uri\"] ||\n\t\t\topenConfig.cli[\"file-uri\"]\n\t\t) {\n\t\t\tpathsToOpen = await this.doExtractPathsFromCLI(openConfig.cli);\n\t\t\tif (pathsToOpen.length === 0) {\n\t\t\t\tpathsToOpen.push(Object.create(null)); // add an empty window if we did not have windows to open from command line\n\t\t\t}\n\n\t\t\tisCommandLineOrAPICall = true;\n\t\t}\n\n\t\t// Extract paths: from previous session\n\t\telse {\n\t\t\tpathsToOpen = await this.doGetPathsFromLastSession();\n\t\t\tif (pathsToOpen.length === 0) {\n\t\t\t\tpathsToOpen.push(Object.create(null)); // add an empty window if we did not have windows to restore\n\t\t\t}\n\n\t\t\trestoredWindows = true;\n\t\t}\n\n\t\t// Convert multiple folders into workspace (if opened via API or CLI)\n\t\t// This will ensure to open these folders in one window instead of multiple\n\t\t// If we are in `addMode`, we should not do this because in that case all\n\t\t// folders should be added to the existing window.\n\t\tif (!openConfig.addMode && isCommandLineOrAPICall) {\n\t\t\tconst foldersToOpen = pathsToOpen.filter((path) =>\n\t\t\t\tisSingleFolderWorkspacePathToOpen(path),\n\t\t\t) as ISingleFolderWorkspacePathToOpen[];\n\t\t\tif (foldersToOpen.length > 1) {\n\t\t\t\tconst remoteAuthority = foldersToOpen[0].remoteAuthority;\n\t\t\t\tif (\n\t\t\t\t\tfoldersToOpen.every((folderToOpen) =>\n\t\t\t\t\t\tisEqualAuthority(\n\t\t\t\t\t\t\tfolderToOpen.remoteAuthority,\n\t\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// only if all folder have the same authority\n\t\t\t\t\tconst workspace =\n\t\t\t\t\t\tawait this.workspacesManagementMainService.createUntitledWorkspace(\n\t\t\t\t\t\t\tfoldersToOpen.map((folder) => ({\n\t\t\t\t\t\t\t\turi: folder.workspace.uri,\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t// Add workspace and remove folders thereby\n\t\t\t\t\tpathsToOpen.push({ workspace, remoteAuthority });\n\t\t\t\t\tpathsToOpen = pathsToOpen.filter(\n\t\t\t\t\t\t(path) => !isSingleFolderWorkspacePathToOpen(path),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for `window.startup` setting to include all windows\n\t\t// from the previous session if this is the initial startup and we have\n\t\t// not restored windows already otherwise.\n\t\t// Use `unshift` to ensure any new window to open comes last\n\t\t// for proper focus treatment.\n\t\tif (\n\t\t\topenConfig.initialStartup &&\n\t\t\t!restoredWindows &&\n\t\t\tthis.configurationService.getValue<IWindowSettings | undefined>(\n\t\t\t\t\"window\",\n\t\t\t)?.restoreWindows === \"preserve\"\n\t\t) {\n\t\t\tconst lastSessionPaths = await this.doGetPathsFromLastSession();\n\t\t\tpathsToOpen.unshift(\n\t\t\t\t...lastSessionPaths.filter(\n\t\t\t\t\t(path) =>\n\t\t\t\t\t\tisWorkspacePathToOpen(path) ||\n\t\t\t\t\t\tisSingleFolderWorkspacePathToOpen(path) ||\n\t\t\t\t\t\tpath.backupPath,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn pathsToOpen;\n\t}\n\n\tprivate async doExtractPathsFromAPI(\n\t\topenConfig: IOpenConfiguration,\n\t): Promise<IPathToOpen[]> {\n\t\tconst pathResolveOptions: IPathResolveOptions = {\n\t\t\tgotoLineMode: openConfig.gotoLineMode,\n\t\t\tremoteAuthority: openConfig.remoteAuthority,\n\t\t};\n\n\t\tconst pathsToOpen = await Promise.all(\n\t\t\tcoalesce(openConfig.urisToOpen || []).map(async (pathToOpen) => {\n\t\t\t\tconst path = await this.resolveOpenable(\n\t\t\t\t\tpathToOpen,\n\t\t\t\t\tpathResolveOptions,\n\t\t\t\t);\n\n\t\t\t\t// Path exists\n\t\t\t\tif (path) {\n\t\t\t\t\tpath.label = pathToOpen.label;\n\n\t\t\t\t\treturn path;\n\t\t\t\t}\n\n\t\t\t\t// Path does not exist: show a warning box\n\t\t\t\tconst uri = this.resourceFromOpenable(pathToOpen);\n\n\t\t\t\tthis.dialogMainService.showMessageBox(\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"info\",\n\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"ok\",\n\t\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"&&OK\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\turi.scheme === Schemas.file\n\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\"pathNotExistTitle\",\n\t\t\t\t\t\t\t\t\t\t\"Path does not exist\",\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\t\"uriInvalidTitle\",\n\t\t\t\t\t\t\t\t\t\t\"URI can not be opened\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\tdetail:\n\t\t\t\t\t\t\turi.scheme === Schemas.file\n\t\t\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\t\t\"pathNotExistDetail\",\n\t\t\t\t\t\t\t\t\t\t\"The path '{0}' does not exist on this computer.\",\n\t\t\t\t\t\t\t\t\t\tgetPathLabel(uri, {\n\t\t\t\t\t\t\t\t\t\t\tos: OS,\n\t\t\t\t\t\t\t\t\t\t\ttildify:\n\t\t\t\t\t\t\t\t\t\t\t\tthis.environmentMainService,\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\t\t\t\"uriInvalidDetail\",\n\t\t\t\t\t\t\t\t\t\t\"The URI '{0}' is not valid and can not be opened.\",\n\t\t\t\t\t\t\t\t\t\turi.toString(true),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\tBrowserWindow.getFocusedWindow() ?? undefined,\n\t\t\t\t);\n\n\t\t\t\treturn undefined;\n\t\t\t}),\n\t\t);\n\n\t\treturn coalesce(pathsToOpen);\n\t}\n\n\tprivate async doExtractPathsFromCLI(\n\t\tcli: NativeParsedArgs,\n\t): Promise<IPath[]> {\n\t\tconst pathsToOpen: IPathToOpen[] = [];\n\t\tconst pathResolveOptions: IPathResolveOptions = {\n\t\t\tignoreFileNotFound: true,\n\t\t\tgotoLineMode: cli.goto,\n\t\t\tremoteAuthority: cli.remote || undefined,\n\t\t\tforceOpenWorkspaceAsFile:\n\t\t\t\t// special case diff / merge mode to force open\n\t\t\t\t// workspace as file\n\t\t\t\t// https://github.com/microsoft/vscode/issues/149731\n\t\t\t\t(cli.diff && cli._.length === 2) ||\n\t\t\t\t(cli.merge && cli._.length === 4),\n\t\t};\n\n\t\t// folder uris\n\t\tconst folderUris = cli[\"folder-uri\"];\n\t\tif (folderUris) {\n\t\t\tconst resolvedFolderUris = await Promise.all(\n\t\t\t\tfolderUris.map((rawFolderUri) => {\n\t\t\t\t\tconst folderUri = this.cliArgToUri(rawFolderUri);\n\t\t\t\t\tif (!folderUri) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.resolveOpenable(\n\t\t\t\t\t\t{ folderUri },\n\t\t\t\t\t\tpathResolveOptions,\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tpathsToOpen.push(...coalesce(resolvedFolderUris));\n\t\t}\n\n\t\t// file uris\n\t\tconst fileUris = cli[\"file-uri\"];\n\t\tif (fileUris) {\n\t\t\tconst resolvedFileUris = await Promise.all(\n\t\t\t\tfileUris.map((rawFileUri) => {\n\t\t\t\t\tconst fileUri = this.cliArgToUri(rawFileUri);\n\t\t\t\t\tif (!fileUri) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.resolveOpenable(\n\t\t\t\t\t\thasWorkspaceFileExtension(rawFileUri)\n\t\t\t\t\t\t\t? { workspaceUri: fileUri }\n\t\t\t\t\t\t\t: { fileUri },\n\t\t\t\t\t\tpathResolveOptions,\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tpathsToOpen.push(...coalesce(resolvedFileUris));\n\t\t}\n\n\t\t// folder or file paths\n\t\tconst resolvedCliPaths = await Promise.all(\n\t\t\tcli._.map((cliPath) => {\n\t\t\t\treturn pathResolveOptions.remoteAuthority\n\t\t\t\t\t? this.doResolveRemotePath(cliPath, pathResolveOptions)\n\t\t\t\t\t: this.doResolveFilePath(cliPath, pathResolveOptions);\n\t\t\t}),\n\t\t);\n\n\t\tpathsToOpen.push(...coalesce(resolvedCliPaths));\n\n\t\treturn pathsToOpen;\n\t}\n\n\tprivate cliArgToUri(arg: string): URI | undefined {\n\t\ttry {\n\t\t\tconst uri = URI.parse(arg);\n\t\t\tif (!uri.scheme) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`Invalid URI input string, scheme missing: ${arg}`,\n\t\t\t\t);\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (!uri.path) {\n\t\t\t\treturn uri.with({ path: \"/\" });\n\t\t\t}\n\n\t\t\treturn uri;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(\n\t\t\t\t`Invalid URI input string: ${arg}, ${e.message}`,\n\t\t\t);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async doGetPathsFromLastSession(): Promise<IPathToOpen[]> {\n\t\tconst restoreWindowsSetting = this.getRestoreWindowsSetting();\n\n\t\tswitch (restoreWindowsSetting) {\n\t\t\t// none: no window to restore\n\t\t\tcase \"none\":\n\t\t\t\treturn [];\n\n\t\t\t// one: restore last opened workspace/folder or empty window\n\t\t\t// all: restore all windows\n\t\t\t// folders: restore last opened folders only\n\t\t\tcase \"one\":\n\t\t\tcase \"all\":\n\t\t\tcase \"preserve\":\n\t\t\tcase \"folders\": {\n\t\t\t\t// Collect previously opened windows\n\t\t\t\tconst lastSessionWindows: IWindowState[] = [];\n\t\t\t\tif (restoreWindowsSetting !== \"one\") {\n\t\t\t\t\tlastSessionWindows.push(\n\t\t\t\t\t\t...this.windowsStateHandler.state.openedWindows,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (this.windowsStateHandler.state.lastActiveWindow) {\n\t\t\t\t\tlastSessionWindows.push(\n\t\t\t\t\t\tthis.windowsStateHandler.state.lastActiveWindow,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst pathsToOpen = await Promise.all(\n\t\t\t\t\tlastSessionWindows.map(async (lastSessionWindow) => {\n\t\t\t\t\t\t// Workspaces\n\t\t\t\t\t\tif (lastSessionWindow.workspace) {\n\t\t\t\t\t\t\tconst pathToOpen = await this.resolveOpenable(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tworkspaceUri:\n\t\t\t\t\t\t\t\t\t\tlastSessionWindow.workspace.configPath,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tremoteAuthority:\n\t\t\t\t\t\t\t\t\t\tlastSessionWindow.remoteAuthority,\n\t\t\t\t\t\t\t\t\trejectTransientWorkspaces: true /* https://github.com/microsoft/vscode/issues/119695 */,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (isWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\t\t\t\treturn pathToOpen;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Folders\n\t\t\t\t\t\telse if (lastSessionWindow.folderUri) {\n\t\t\t\t\t\t\tconst pathToOpen = await this.resolveOpenable(\n\t\t\t\t\t\t\t\t{ folderUri: lastSessionWindow.folderUri },\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tremoteAuthority:\n\t\t\t\t\t\t\t\t\t\tlastSessionWindow.remoteAuthority,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (isSingleFolderWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\t\t\t\treturn pathToOpen;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Empty window, potentially editors open to be restored\n\t\t\t\t\t\telse if (\n\t\t\t\t\t\t\trestoreWindowsSetting !== \"folders\" &&\n\t\t\t\t\t\t\tlastSessionWindow.backupPath\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tbackupPath: lastSessionWindow.backupPath,\n\t\t\t\t\t\t\t\tremoteAuthority:\n\t\t\t\t\t\t\t\t\tlastSessionWindow.remoteAuthority,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\treturn coalesce(pathsToOpen);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getRestoreWindowsSetting(): RestoreWindowsSetting {\n\t\tlet restoreWindows: RestoreWindowsSetting;\n\t\tif (this.lifecycleMainService.wasRestarted) {\n\t\t\trestoreWindows = \"all\"; // always reopen all windows when an update was applied\n\t\t} else {\n\t\t\tconst windowConfig = this.configurationService.getValue<\n\t\t\t\tIWindowSettings | undefined\n\t\t\t>(\"window\");\n\t\t\trestoreWindows = windowConfig?.restoreWindows || \"all\"; // by default restore all windows\n\n\t\t\tif (\n\t\t\t\t![\"preserve\", \"all\", \"folders\", \"one\", \"none\"].includes(\n\t\t\t\t\trestoreWindows,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\trestoreWindows = \"all\"; // by default restore all windows\n\t\t\t}\n\t\t}\n\n\t\treturn restoreWindows;\n\t}\n\n\tprivate async resolveOpenable(\n\t\topenable: IWindowOpenable,\n\t\toptions: IPathResolveOptions = Object.create(null),\n\t): Promise<IPathToOpen | undefined> {\n\t\t// handle file:// openables with some extra validation\n\t\tconst uri = this.resourceFromOpenable(openable);\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\tif (isFileToOpen(openable)) {\n\t\t\t\toptions = { ...options, forceOpenWorkspaceAsFile: true };\n\t\t\t}\n\n\t\t\treturn this.doResolveFilePath(uri.fsPath, options);\n\t\t}\n\n\t\t// handle non file:// openables\n\t\treturn this.doResolveRemoteOpenable(openable, options);\n\t}\n\n\tprivate doResolveRemoteOpenable(\n\t\topenable: IWindowOpenable,\n\t\toptions: IPathResolveOptions,\n\t): IPathToOpen<ITextEditorOptions> | undefined {\n\t\tlet uri = this.resourceFromOpenable(openable);\n\n\t\t// use remote authority from vscode\n\t\tconst remoteAuthority =\n\t\t\tgetRemoteAuthority(uri) || options.remoteAuthority;\n\n\t\t// normalize URI\n\t\turi = removeTrailingPathSeparator(normalizePath(uri));\n\n\t\t// File\n\t\tif (isFileToOpen(openable)) {\n\t\t\tif (options.gotoLineMode) {\n\t\t\t\tconst { path, line, column } = parseLineAndColumnAware(\n\t\t\t\t\turi.path,\n\t\t\t\t);\n\n\t\t\t\treturn {\n\t\t\t\t\tfileUri: uri.with({ path }),\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tselection: line\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tstartLineNumber: line,\n\t\t\t\t\t\t\t\t\tstartColumn: column || 1,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t},\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn { fileUri: uri, remoteAuthority };\n\t\t}\n\n\t\t// Workspace\n\t\telse if (isWorkspaceToOpen(openable)) {\n\t\t\treturn { workspace: getWorkspaceIdentifier(uri), remoteAuthority };\n\t\t}\n\n\t\t// Folder\n\t\treturn {\n\t\t\tworkspace: getSingleFolderWorkspaceIdentifier(uri),\n\t\t\tremoteAuthority,\n\t\t};\n\t}\n\n\tprivate resourceFromOpenable(openable: IWindowOpenable): URI {\n\t\tif (isWorkspaceToOpen(openable)) {\n\t\t\treturn openable.workspaceUri;\n\t\t}\n\n\t\tif (isFolderToOpen(openable)) {\n\t\t\treturn openable.folderUri;\n\t\t}\n\n\t\treturn openable.fileUri;\n\t}\n\n\tprivate async doResolveFilePath(\n\t\tpath: string,\n\t\toptions: IPathResolveOptions,\n\t\tskipHandleUNCError?: boolean,\n\t): Promise<IPathToOpen<ITextEditorOptions> | undefined> {\n\t\t// Extract line/col information from path\n\t\tlet lineNumber: number | undefined;\n\t\tlet columnNumber: number | undefined;\n\t\tif (options.gotoLineMode) {\n\t\t\t({\n\t\t\t\tpath,\n\t\t\t\tline: lineNumber,\n\t\t\t\tcolumn: columnNumber,\n\t\t\t} = parseLineAndColumnAware(path));\n\t\t}\n\n\t\t// Ensure the path is normalized and absolute\n\t\tpath = sanitizeFilePath(normalize(path), cwd());\n\n\t\ttry {\n\t\t\tconst pathStat = await fs.promises.stat(path);\n\n\t\t\t// File\n\t\t\tif (pathStat.isFile()) {\n\t\t\t\t// Workspace (unless disabled via flag)\n\t\t\t\tif (!options.forceOpenWorkspaceAsFile) {\n\t\t\t\t\tconst workspace =\n\t\t\t\t\t\tawait this.workspacesManagementMainService.resolveLocalWorkspace(\n\t\t\t\t\t\t\tURI.file(path),\n\t\t\t\t\t\t);\n\t\t\t\t\tif (workspace) {\n\t\t\t\t\t\t// If the workspace is transient and we are to ignore\n\t\t\t\t\t\t// transient workspaces, reject it.\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tworkspace.transient &&\n\t\t\t\t\t\t\toptions.rejectTransientWorkspaces\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tworkspace: {\n\t\t\t\t\t\t\t\tid: workspace.id,\n\t\t\t\t\t\t\t\tconfigPath: workspace.configPath,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\t\t\texists: true,\n\t\t\t\t\t\t\tremoteAuthority: workspace.remoteAuthority,\n\t\t\t\t\t\t\ttransient: workspace.transient,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tfileUri: URI.file(path),\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\texists: true,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tselection: lineNumber\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\t\t\t\t\t\tstartColumn: columnNumber || 1,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Folder\n\t\t\telse if (pathStat.isDirectory()) {\n\t\t\t\treturn {\n\t\t\t\t\tworkspace: getSingleFolderWorkspaceIdentifier(\n\t\t\t\t\t\tURI.file(path),\n\t\t\t\t\t\tpathStat,\n\t\t\t\t\t),\n\t\t\t\t\ttype: FileType.Directory,\n\t\t\t\t\texists: true,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Special device: in POSIX environments, we may get /dev/null passed\n\t\t\t// in (for example git uses it to signal one side of a diff does not\n\t\t\t// exist). In that special case, treat it like a file to support this\n\t\t\t// scenario ()\n\t\t\telse if (!isWindows && path === \"/dev/null\") {\n\t\t\t\treturn {\n\t\t\t\t\tfileUri: URI.file(path),\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\texists: true,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror.code === \"ERR_UNC_HOST_NOT_ALLOWED\" &&\n\t\t\t\t!skipHandleUNCError\n\t\t\t) {\n\t\t\t\treturn this.onUNCHostNotAllowed(path, options);\n\t\t\t}\n\n\t\t\tconst fileUri = URI.file(path);\n\n\t\t\t// since file does not seem to exist anymore, remove from recent\n\t\t\tthis.workspacesHistoryMainService.removeRecentlyOpened([fileUri]);\n\n\t\t\t// assume this is a file that does not yet exist\n\t\t\tif (options.ignoreFileNotFound) {\n\t\t\t\treturn {\n\t\t\t\t\tfileUri,\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\texists: false,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async onUNCHostNotAllowed(\n\t\tpath: string,\n\t\toptions: IPathResolveOptions,\n\t): Promise<IPathToOpen<ITextEditorOptions> | undefined> {\n\t\tconst uri = URI.file(path);\n\n\t\tconst { response, checkboxChecked } =\n\t\t\tawait this.dialogMainService.showMessageBox({\n\t\t\t\ttype: \"warning\",\n\t\t\t\tbuttons: [\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{ key: \"allow\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"&&Allow\",\n\t\t\t\t\t),\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{ key: \"cancel\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"&&Cancel\",\n\t\t\t\t\t),\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"learnMore\",\n\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"&&Learn More\",\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"confirmOpenMessage\",\n\t\t\t\t\t\"The host '{0}' was not found in the list of allowed hosts. Do you want to allow it anyway?\",\n\t\t\t\t\turi.authority,\n\t\t\t\t),\n\t\t\t\tdetail: localize(\n\t\t\t\t\t\"confirmOpenDetail\",\n\t\t\t\t\t\"The path '{0}' uses a host that is not allowed. Unless you trust the host, you should press 'Cancel'\",\n\t\t\t\t\tgetPathLabel(uri, {\n\t\t\t\t\t\tos: OS,\n\t\t\t\t\t\ttildify: this.environmentMainService,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t\tcheckboxLabel: localize(\n\t\t\t\t\t\"doNotAskAgain\",\n\t\t\t\t\t\"Permanently allow host '{0}'\",\n\t\t\t\t\turi.authority,\n\t\t\t\t),\n\t\t\t\tcancelId: 1,\n\t\t\t});\n\n\t\tif (response === 0) {\n\t\t\taddUNCHostToAllowlist(uri.authority);\n\n\t\t\tif (checkboxChecked) {\n\t\t\t\t// Due to https://github.com/microsoft/vscode/issues/195436, we can only\n\t\t\t\t// update settings from within a window. But we do not know if a window\n\t\t\t\t// is about to open or can already handle the request, so we have to send\n\t\t\t\t// to any current window and any newly opening window.\n\t\t\t\tconst request = {\n\t\t\t\t\tchannel: \"vscode:configureAllowedUNCHost\",\n\t\t\t\t\targs: uri.authority,\n\t\t\t\t};\n\t\t\t\tthis.sendToFocused(request.channel, request.args);\n\t\t\t\tthis.sendToOpeningWindow(request.channel, request.args);\n\t\t\t}\n\n\t\t\treturn this.doResolveFilePath(\n\t\t\t\tpath,\n\t\t\t\toptions,\n\t\t\t\ttrue /* do not handle UNC error again */,\n\t\t\t);\n\t\t}\n\n\t\tif (response === 2) {\n\t\t\tshell.openExternal(\"https://aka.ms/vscode-windows-unc\");\n\n\t\t\treturn this.onUNCHostNotAllowed(path, options); // keep showing the dialog until decision (https://github.com/microsoft/vscode/issues/181956)\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate doResolveRemotePath(\n\t\tpath: string,\n\t\toptions: IPathResolveOptions,\n\t): IPathToOpen<ITextEditorOptions> | undefined {\n\t\tconst first = path.charCodeAt(0);\n\t\tconst remoteAuthority = options.remoteAuthority;\n\n\t\t// Extract line/col information from path\n\t\tlet lineNumber: number | undefined;\n\t\tlet columnNumber: number | undefined;\n\n\t\tif (options.gotoLineMode) {\n\t\t\t({\n\t\t\t\tpath,\n\t\t\t\tline: lineNumber,\n\t\t\t\tcolumn: columnNumber,\n\t\t\t} = parseLineAndColumnAware(path));\n\t\t}\n\n\t\t// make absolute\n\t\tif (first !== CharCode.Slash) {\n\t\t\tif (\n\t\t\t\tisWindowsDriveLetter(first) &&\n\t\t\t\tpath.charCodeAt(path.charCodeAt(1)) === CharCode.Colon\n\t\t\t) {\n\t\t\t\tpath = toSlashes(path);\n\t\t\t}\n\n\t\t\tpath = `/${path}`;\n\t\t}\n\n\t\tconst uri = URI.from({\n\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\tauthority: remoteAuthority,\n\t\t\tpath: path,\n\t\t});\n\n\t\t// guess the file type:\n\t\t// - if it ends with a slash it's a folder\n\t\t// - if in goto line mode or if it has a file extension, it's a file or a workspace\n\t\t// - by defaults it's a folder\n\t\tif (path.charCodeAt(path.length - 1) !== CharCode.Slash) {\n\t\t\t// file name ends with .code-workspace\n\t\t\tif (hasWorkspaceFileExtension(path)) {\n\t\t\t\tif (options.forceOpenWorkspaceAsFile) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfileUri: uri,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tselection: lineNumber\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\t\t\t\t\t\t\tstartColumn: columnNumber || 1,\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoteAuthority: options.remoteAuthority,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tworkspace: getWorkspaceIdentifier(uri),\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// file name starts with a dot or has an file extension\n\t\t\telse if (\n\t\t\t\toptions.gotoLineMode ||\n\t\t\t\tposix.basename(path).indexOf(\".\") !== -1\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tfileUri: uri,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tselection: lineNumber\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\t\t\t\t\t\tstartColumn: columnNumber || 1,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t},\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tworkspace: getSingleFolderWorkspaceIdentifier(uri),\n\t\t\tremoteAuthority,\n\t\t};\n\t}\n\n\tprivate shouldOpenNewWindow(openConfig: IOpenConfiguration): {\n\t\topenFolderInNewWindow: boolean;\n\t\topenFilesInNewWindow: boolean;\n\t} {\n\t\t// let the user settings override how folders are open in a new window or same window unless we are forced\n\t\tconst windowConfig = this.configurationService.getValue<\n\t\t\tIWindowSettings | undefined\n\t\t>(\"window\");\n\t\tconst openFolderInNewWindowConfig =\n\t\t\twindowConfig?.openFoldersInNewWindow || \"default\" /* default */;\n\t\tconst openFilesInNewWindowConfig =\n\t\t\twindowConfig?.openFilesInNewWindow || \"off\" /* default */;\n\n\t\tlet openFolderInNewWindow =\n\t\t\t(openConfig.preferNewWindow || openConfig.forceNewWindow) &&\n\t\t\t!openConfig.forceReuseWindow;\n\t\tif (\n\t\t\t!openConfig.forceNewWindow &&\n\t\t\t!openConfig.forceReuseWindow &&\n\t\t\t(openFolderInNewWindowConfig === \"on\" ||\n\t\t\t\topenFolderInNewWindowConfig === \"off\")\n\t\t) {\n\t\t\topenFolderInNewWindow = openFolderInNewWindowConfig === \"on\";\n\t\t}\n\n\t\t// let the user settings override how files are open in a new window or same window unless we are forced (not for extension development though)\n\t\tlet openFilesInNewWindow = false;\n\t\tif (openConfig.forceNewWindow || openConfig.forceReuseWindow) {\n\t\t\topenFilesInNewWindow =\n\t\t\t\t!!openConfig.forceNewWindow && !openConfig.forceReuseWindow;\n\t\t} else {\n\t\t\t// macOS: by default we open files in a new window if this is triggered via DOCK context\n\t\t\tif (isMacintosh) {\n\t\t\t\tif (openConfig.context === OpenContext.DOCK) {\n\t\t\t\t\topenFilesInNewWindow = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Linux/Windows: by default we open files in the new window unless triggered via DIALOG / MENU context\n\t\t\t// or from the integrated terminal where we assume the user prefers to open in the current window\n\t\t\telse if (\n\t\t\t\topenConfig.context !== OpenContext.DIALOG &&\n\t\t\t\topenConfig.context !== OpenContext.MENU &&\n\t\t\t\t!(\n\t\t\t\t\topenConfig.userEnv &&\n\t\t\t\t\topenConfig.userEnv[\"TERM_PROGRAM\"] === \"vscode\"\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\topenFilesInNewWindow = true;\n\t\t\t}\n\n\t\t\t// finally check for overrides of default\n\t\t\tif (\n\t\t\t\t!openConfig.cli.extensionDevelopmentPath &&\n\t\t\t\t(openFilesInNewWindowConfig === \"on\" ||\n\t\t\t\t\topenFilesInNewWindowConfig === \"off\")\n\t\t\t) {\n\t\t\t\topenFilesInNewWindow = openFilesInNewWindowConfig === \"on\";\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topenFolderInNewWindow: !!openFolderInNewWindow,\n\t\t\topenFilesInNewWindow,\n\t\t};\n\t}\n\n\tasync openExtensionDevelopmentHostWindow(\n\t\textensionDevelopmentPaths: string[],\n\t\topenConfig: IOpenConfiguration,\n\t): Promise<ICodeWindow[]> {\n\t\t// Reload an existing extension development host window on the same path\n\t\t// We currently do not allow more than one extension development window\n\t\t// on the same extension path.\n\t\tconst existingWindow = findWindowOnExtensionDevelopmentPath(\n\t\t\tthis.getWindows(),\n\t\t\textensionDevelopmentPaths,\n\t\t);\n\t\tif (existingWindow) {\n\t\t\tthis.lifecycleMainService.reload(existingWindow, openConfig.cli);\n\t\t\texistingWindow.focus(); // make sure it gets focus and is restored\n\n\t\t\treturn [existingWindow];\n\t\t}\n\n\t\tlet folderUris = openConfig.cli[\"folder-uri\"] || [];\n\t\tlet fileUris = openConfig.cli[\"file-uri\"] || [];\n\t\tlet cliArgs = openConfig.cli._;\n\n\t\t// Fill in previously opened workspace unless an explicit path is provided and we are not unit testing\n\t\tif (\n\t\t\t!cliArgs.length &&\n\t\t\t!folderUris.length &&\n\t\t\t!fileUris.length &&\n\t\t\t!openConfig.cli.extensionTestsPath\n\t\t) {\n\t\t\tconst extensionDevelopmentWindowState =\n\t\t\t\tthis.windowsStateHandler.state.lastPluginDevelopmentHostWindow;\n\t\t\tconst workspaceToOpen =\n\t\t\t\textensionDevelopmentWindowState?.workspace ??\n\t\t\t\textensionDevelopmentWindowState?.folderUri;\n\t\t\tif (workspaceToOpen) {\n\t\t\t\tif (URI.isUri(workspaceToOpen)) {\n\t\t\t\t\tif (workspaceToOpen.scheme === Schemas.file) {\n\t\t\t\t\t\tcliArgs = [workspaceToOpen.fsPath];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfolderUris = [workspaceToOpen.toString()];\n\t\t\t\t\t}\n\t\t\t\t} else if (workspaceToOpen.configPath.scheme === Schemas.file) {\n\t\t\t\t\tcliArgs = [originalFSPath(workspaceToOpen.configPath)];\n\t\t\t\t} else {\n\t\t\t\t\tfileUris = [workspaceToOpen.configPath.toString()];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet remoteAuthority = openConfig.remoteAuthority;\n\t\tfor (const extensionDevelopmentPath of extensionDevelopmentPaths) {\n\t\t\tif (extensionDevelopmentPath.match(/^[a-zA-Z][a-zA-Z0-9+\\-.]+:/)) {\n\t\t\t\tconst url = URI.parse(extensionDevelopmentPath);\n\t\t\t\tconst extensionDevelopmentPathRemoteAuthority =\n\t\t\t\t\tgetRemoteAuthority(url);\n\t\t\t\tif (extensionDevelopmentPathRemoteAuthority) {\n\t\t\t\t\tif (remoteAuthority) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!isEqualAuthority(\n\t\t\t\t\t\t\t\textensionDevelopmentPathRemoteAuthority,\n\t\t\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t\t\"more than one extension development path authority\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoteAuthority =\n\t\t\t\t\t\t\textensionDevelopmentPathRemoteAuthority;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make sure that we do not try to open:\n\t\t// - a workspace or folder that is already opened\n\t\t// - a workspace or file that has a different authority as the extension development.\n\n\t\tcliArgs = cliArgs.filter((path) => {\n\t\t\tconst uri = URI.file(path);\n\t\t\tif (!!findWindowOnWorkspaceOrFolder(this.getWindows(), uri)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn isEqualAuthority(getRemoteAuthority(uri), remoteAuthority);\n\t\t});\n\n\t\tfolderUris = folderUris.filter((folderUriStr) => {\n\t\t\tconst folderUri = this.cliArgToUri(folderUriStr);\n\t\t\tif (\n\t\t\t\tfolderUri &&\n\t\t\t\t!!findWindowOnWorkspaceOrFolder(this.getWindows(), folderUri)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn folderUri\n\t\t\t\t? isEqualAuthority(\n\t\t\t\t\t\tgetRemoteAuthority(folderUri),\n\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t)\n\t\t\t\t: false;\n\t\t});\n\n\t\tfileUris = fileUris.filter((fileUriStr) => {\n\t\t\tconst fileUri = this.cliArgToUri(fileUriStr);\n\t\t\tif (\n\t\t\t\tfileUri &&\n\t\t\t\t!!findWindowOnWorkspaceOrFolder(this.getWindows(), fileUri)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn fileUri\n\t\t\t\t? isEqualAuthority(getRemoteAuthority(fileUri), remoteAuthority)\n\t\t\t\t: false;\n\t\t});\n\n\t\topenConfig.cli._ = cliArgs;\n\t\topenConfig.cli[\"folder-uri\"] = folderUris;\n\t\topenConfig.cli[\"file-uri\"] = fileUris;\n\n\t\t// Open it\n\t\tconst openArgs: IOpenConfiguration = {\n\t\t\tcontext: openConfig.context,\n\t\t\tcli: openConfig.cli,\n\t\t\tforceNewWindow: true,\n\t\t\tforceEmpty:\n\t\t\t\t!cliArgs.length && !folderUris.length && !fileUris.length,\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tnoRecentEntry: true,\n\t\t\twaitMarkerFileURI: openConfig.waitMarkerFileURI,\n\t\t\tremoteAuthority,\n\t\t\tforceProfile: openConfig.forceProfile,\n\t\t\tforceTempProfile: openConfig.forceTempProfile,\n\t\t};\n\n\t\treturn this.open(openArgs);\n\t}\n\n\tprivate async openInBrowserWindow(\n\t\toptions: IOpenBrowserWindowOptions,\n\t): Promise<ICodeWindow> {\n\t\tconst windowConfig = this.configurationService.getValue<\n\t\t\tIWindowSettings | undefined\n\t\t>(\"window\");\n\n\t\tconst lastActiveWindow = this.getLastActiveWindow();\n\t\tconst newWindowProfile = windowConfig?.newWindowProfile\n\t\t\t? this.userDataProfilesMainService.profiles.find(\n\t\t\t\t\t(profile) => profile.name === windowConfig.newWindowProfile,\n\t\t\t\t)\n\t\t\t: undefined;\n\t\tconst defaultProfile =\n\t\t\tnewWindowProfile ??\n\t\t\tlastActiveWindow?.profile ??\n\t\t\tthis.userDataProfilesMainService.defaultProfile;\n\n\t\tlet window: ICodeWindow | undefined;\n\t\tif (!options.forceNewWindow && !options.forceNewTabbedWindow) {\n\t\t\twindow = options.windowToUse || lastActiveWindow;\n\t\t\tif (window) {\n\t\t\t\twindow.focus();\n\t\t\t}\n\t\t}\n\n\t\t// Build up the window configuration from provided options, config and environment\n\t\tconst configuration: INativeWindowConfiguration = {\n\t\t\t// Inherit CLI arguments from environment and/or\n\t\t\t// the specific properties from this launch if provided\n\t\t\t...this.environmentMainService.args,\n\t\t\t...options.cli,\n\n\t\t\tmachineId: this.machineId,\n\t\t\tsqmId: this.sqmId,\n\t\t\tdevDeviceId: this.devDeviceId,\n\n\t\t\twindowId: -1, // Will be filled in by the window once loaded later\n\n\t\t\tmainPid: process.pid,\n\n\t\t\tappRoot: this.environmentMainService.appRoot,\n\t\t\texecPath: process.execPath,\n\t\t\tcodeCachePath: this.environmentMainService.codeCachePath,\n\t\t\t// If we know the backup folder upfront (for empty windows to restore), we can set it\n\t\t\t// directly here which helps for restoring UI state associated with that window.\n\t\t\t// For all other cases we first call into registerEmptyWindowBackup() to set it before\n\t\t\t// loading the window.\n\t\t\tbackupPath: options.emptyWindowBackupInfo\n\t\t\t\t? join(\n\t\t\t\t\t\tthis.environmentMainService.backupHome,\n\t\t\t\t\t\toptions.emptyWindowBackupInfo.backupFolder,\n\t\t\t\t\t)\n\t\t\t\t: undefined,\n\n\t\t\tprofiles: {\n\t\t\t\thome: this.userDataProfilesMainService.profilesHome,\n\t\t\t\tall: this.userDataProfilesMainService.profiles,\n\t\t\t\t// Set to default profile first and resolve and update the profile\n\t\t\t\t// only after the workspace-backup is registered.\n\t\t\t\t// Because, workspace identifier of an empty window is known only then.\n\t\t\t\tprofile: defaultProfile,\n\t\t\t},\n\n\t\t\thomeDir: this.environmentMainService.userHome.with({\n\t\t\t\tscheme: Schemas.file,\n\t\t\t}).fsPath,\n\t\t\ttmpDir: this.environmentMainService.tmpDir.with({\n\t\t\t\tscheme: Schemas.file,\n\t\t\t}).fsPath,\n\t\t\tuserDataDir: this.environmentMainService.userDataPath,\n\n\t\t\tremoteAuthority: options.remoteAuthority,\n\t\t\tworkspace: options.workspace,\n\t\t\tuserEnv: { ...this.initialUserEnv, ...options.userEnv },\n\n\t\t\tnls: {\n\t\t\t\tmessages: getNLSMessages(),\n\t\t\t\tlanguage: getNLSLanguage(),\n\t\t\t},\n\n\t\t\tfilesToOpenOrCreate: options.filesToOpen?.filesToOpenOrCreate,\n\t\t\tfilesToDiff: options.filesToOpen?.filesToDiff,\n\t\t\tfilesToMerge: options.filesToOpen?.filesToMerge,\n\t\t\tfilesToWait: options.filesToOpen?.filesToWait,\n\n\t\t\tlogLevel: this.loggerService.getLogLevel(),\n\t\t\tloggers: {\n\t\t\t\twindow: [],\n\t\t\t\tglobal: this.loggerService.getRegisteredLoggers(),\n\t\t\t},\n\t\t\tlogsPath: this.environmentMainService.logsHome.with({\n\t\t\t\tscheme: Schemas.file,\n\t\t\t}).fsPath,\n\n\t\t\tproduct,\n\t\t\tisInitialStartup: options.initialStartup,\n\t\t\tperfMarks: getMarks(),\n\t\t\tos: { release: release(), hostname: hostname(), arch: arch() },\n\n\t\t\tautoDetectHighContrast:\n\t\t\t\twindowConfig?.autoDetectHighContrast ?? true,\n\t\t\tautoDetectColorScheme: windowConfig?.autoDetectColorScheme ?? false,\n\t\t\taccessibilitySupport: app.accessibilitySupportEnabled,\n\t\t\tcolorScheme: this.themeMainService.getColorScheme(),\n\t\t\tpoliciesData: this.policyService.serialize(),\n\t\t\tcontinueOn: this.environmentMainService.continueOn,\n\n\t\t\tcssModules: this.cssDevelopmentService.isEnabled\n\t\t\t\t? await this.cssDevelopmentService.getCssModules()\n\t\t\t\t: undefined,\n\t\t};\n\n\t\t// New window\n\t\tif (window) {\n\t\t\t// Some configuration things get inherited if the window is being reused and we are\n\t\t\t// in extension development host mode. These options are all development related.\n\t\t\tconst currentWindowConfig = window.config;\n\t\t\tif (\n\t\t\t\t!configuration.extensionDevelopmentPath &&\n\t\t\t\tcurrentWindowConfig?.extensionDevelopmentPath\n\t\t\t) {\n\t\t\t\tconfiguration.extensionDevelopmentPath =\n\t\t\t\t\tcurrentWindowConfig.extensionDevelopmentPath;\n\t\t\t\tconfiguration.extensionDevelopmentKind =\n\t\t\t\t\tcurrentWindowConfig.extensionDevelopmentKind;\n\t\t\t\tconfiguration[\"enable-proposed-api\"] =\n\t\t\t\t\tcurrentWindowConfig[\"enable-proposed-api\"];\n\t\t\t\tconfiguration.verbose = currentWindowConfig.verbose;\n\t\t\t\tconfiguration[\"inspect-extensions\"] =\n\t\t\t\t\tcurrentWindowConfig[\"inspect-extensions\"];\n\t\t\t\tconfiguration[\"inspect-brk-extensions\"] =\n\t\t\t\t\tcurrentWindowConfig[\"inspect-brk-extensions\"];\n\t\t\t\tconfiguration.debugId = currentWindowConfig.debugId;\n\t\t\t\tconfiguration.extensionEnvironment =\n\t\t\t\t\tcurrentWindowConfig.extensionEnvironment;\n\t\t\t\tconfiguration[\"extensions-dir\"] =\n\t\t\t\t\tcurrentWindowConfig[\"extensions-dir\"];\n\t\t\t\tconfiguration[\"disable-extensions\"] =\n\t\t\t\t\tcurrentWindowConfig[\"disable-extensions\"];\n\t\t\t}\n\t\t\tconfiguration.loggers = {\n\t\t\t\tglobal: configuration.loggers.global,\n\t\t\t\twindow:\n\t\t\t\t\tcurrentWindowConfig?.loggers.window ??\n\t\t\t\t\tconfiguration.loggers.window,\n\t\t\t};\n\t\t} else {\n\t\t\tconst state =\n\t\t\t\tthis.windowsStateHandler.getNewWindowState(configuration);\n\n\t\t\t// Create the window\n\t\t\tmark(\"code/willCreateCodeWindow\");\n\t\t\tconst createdWindow = (window =\n\t\t\t\tthis.instantiationService.createInstance(CodeWindow, {\n\t\t\t\t\tstate,\n\t\t\t\t\textensionDevelopmentPath:\n\t\t\t\t\t\tconfiguration.extensionDevelopmentPath,\n\t\t\t\t\tisExtensionTestHost: !!configuration.extensionTestsPath,\n\t\t\t\t}));\n\t\t\tmark(\"code/didCreateCodeWindow\");\n\n\t\t\t// Add as window tab if configured (macOS only)\n\t\t\tif (options.forceNewTabbedWindow) {\n\t\t\t\tconst activeWindow = this.getLastActiveWindow();\n\t\t\t\tactiveWindow?.addTabbedWindow(createdWindow);\n\t\t\t}\n\n\t\t\t// Add to our list of windows\n\t\t\tthis.windows.set(createdWindow.id, createdWindow);\n\n\t\t\t// Indicate new window via event\n\t\t\tthis._onDidOpenWindow.fire(createdWindow);\n\n\t\t\t// Indicate number change via event\n\t\t\tthis._onDidChangeWindowsCount.fire({\n\t\t\t\toldCount: this.getWindowCount() - 1,\n\t\t\t\tnewCount: this.getWindowCount(),\n\t\t\t});\n\n\t\t\t// Window Events\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tdisposables.add(\n\t\t\t\tcreatedWindow.onDidSignalReady(() =>\n\t\t\t\t\tthis._onDidSignalReadyWindow.fire(createdWindow),\n\t\t\t\t),\n\t\t\t);\n\t\t\tdisposables.add(\n\t\t\t\tEvent.once(createdWindow.onDidClose)(() =>\n\t\t\t\t\tthis.onWindowClosed(createdWindow, disposables),\n\t\t\t\t),\n\t\t\t);\n\t\t\tdisposables.add(\n\t\t\t\tEvent.once(createdWindow.onDidDestroy)(() =>\n\t\t\t\t\tthis.onWindowDestroyed(createdWindow),\n\t\t\t\t),\n\t\t\t);\n\t\t\tdisposables.add(\n\t\t\t\tcreatedWindow.onDidMaximize(() =>\n\t\t\t\t\tthis._onDidMaximizeWindow.fire(createdWindow),\n\t\t\t\t),\n\t\t\t);\n\t\t\tdisposables.add(\n\t\t\t\tcreatedWindow.onDidUnmaximize(() =>\n\t\t\t\t\tthis._onDidUnmaximizeWindow.fire(createdWindow),\n\t\t\t\t),\n\t\t\t);\n\t\t\tdisposables.add(\n\t\t\t\tcreatedWindow.onDidEnterFullScreen(() =>\n\t\t\t\t\tthis._onDidChangeFullScreen.fire({\n\t\t\t\t\t\twindow: createdWindow,\n\t\t\t\t\t\tfullscreen: true,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t\tdisposables.add(\n\t\t\t\tcreatedWindow.onDidLeaveFullScreen(() =>\n\t\t\t\t\tthis._onDidChangeFullScreen.fire({\n\t\t\t\t\t\twindow: createdWindow,\n\t\t\t\t\t\tfullscreen: false,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t\tdisposables.add(\n\t\t\t\tcreatedWindow.onDidTriggerSystemContextMenu(({ x, y }) =>\n\t\t\t\t\tthis._onDidTriggerSystemContextMenu.fire({\n\t\t\t\t\t\twindow: createdWindow,\n\t\t\t\t\t\tx,\n\t\t\t\t\t\ty,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst webContents = assertIsDefined(createdWindow.win?.webContents);\n\t\t\twebContents.removeAllListeners(\"devtools-reload-page\"); // remove built in listener so we can handle this on our own\n\t\t\tdisposables.add(\n\t\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\t\twebContents,\n\t\t\t\t\t\"devtools-reload-page\",\n\t\t\t\t)(() => this.lifecycleMainService.reload(createdWindow)),\n\t\t\t);\n\n\t\t\t// Lifecycle\n\t\t\tthis.lifecycleMainService.registerWindow(createdWindow);\n\t\t}\n\n\t\t// Update window identifier and session now\n\t\t// that we have the window object in hand.\n\t\tconfiguration.windowId = window.id;\n\n\t\t// If the window was already loaded, make sure to unload it\n\t\t// first and only load the new configuration if that was\n\t\t// not vetoed\n\t\tif (window.isReady) {\n\t\t\tthis.lifecycleMainService\n\t\t\t\t.unload(window, UnloadReason.LOAD)\n\t\t\t\t.then(async (veto) => {\n\t\t\t\t\tif (!veto) {\n\t\t\t\t\t\tawait this.doOpenInBrowserWindow(\n\t\t\t\t\t\t\twindow,\n\t\t\t\t\t\t\tconfiguration,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tdefaultProfile,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\tawait this.doOpenInBrowserWindow(\n\t\t\t\twindow,\n\t\t\t\tconfiguration,\n\t\t\t\toptions,\n\t\t\t\tdefaultProfile,\n\t\t\t);\n\t\t}\n\n\t\treturn window;\n\t}\n\n\tprivate async doOpenInBrowserWindow(\n\t\twindow: ICodeWindow,\n\t\tconfiguration: INativeWindowConfiguration,\n\t\toptions: IOpenBrowserWindowOptions,\n\t\tdefaultProfile: IUserDataProfile,\n\t): Promise<void> {\n\t\t// Register window for backups unless the window\n\t\t// is for extension development, where we do not\n\t\t// keep any backups.\n\n\t\tif (!configuration.extensionDevelopmentPath) {\n\t\t\tif (isWorkspaceIdentifier(configuration.workspace)) {\n\t\t\t\tconfiguration.backupPath =\n\t\t\t\t\tthis.backupMainService.registerWorkspaceBackup({\n\t\t\t\t\t\tworkspace: configuration.workspace,\n\t\t\t\t\t\tremoteAuthority: configuration.remoteAuthority,\n\t\t\t\t\t});\n\t\t\t} else if (\n\t\t\t\tisSingleFolderWorkspaceIdentifier(configuration.workspace)\n\t\t\t) {\n\t\t\t\tconfiguration.backupPath =\n\t\t\t\t\tthis.backupMainService.registerFolderBackup({\n\t\t\t\t\t\tfolderUri: configuration.workspace.uri,\n\t\t\t\t\t\tremoteAuthority: configuration.remoteAuthority,\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Empty windows are special in that they provide no workspace on\n\t\t\t\t// their configuration. To properly register them with the backup\n\t\t\t\t// service, we either use the provided associated `backupFolder`\n\t\t\t\t// in case we restore a previously opened empty window or we have\n\t\t\t\t// to generate a new empty window workspace identifier to be used\n\t\t\t\t// as `backupFolder`.\n\n\t\t\t\tconfiguration.backupPath =\n\t\t\t\t\tthis.backupMainService.registerEmptyWindowBackup({\n\t\t\t\t\t\tbackupFolder:\n\t\t\t\t\t\t\toptions.emptyWindowBackupInfo?.backupFolder ??\n\t\t\t\t\t\t\tcreateEmptyWorkspaceIdentifier().id,\n\t\t\t\t\t\tremoteAuthority: configuration.remoteAuthority,\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (this.userDataProfilesMainService.isEnabled()) {\n\t\t\tconst workspace =\n\t\t\t\tconfiguration.workspace ??\n\t\t\t\ttoWorkspaceIdentifier(configuration.backupPath, false);\n\t\t\tconst profilePromise = this.resolveProfileForBrowserWindow(\n\t\t\t\toptions,\n\t\t\t\tworkspace,\n\t\t\t\tdefaultProfile,\n\t\t\t);\n\t\t\tconst profile =\n\t\t\t\tprofilePromise instanceof Promise\n\t\t\t\t\t? await profilePromise\n\t\t\t\t\t: profilePromise;\n\t\t\tconfiguration.profiles.profile = profile;\n\n\t\t\tif (!configuration.extensionDevelopmentPath) {\n\t\t\t\t// Associate the configured profile to the workspace\n\t\t\t\t// unless the window is for extension development,\n\t\t\t\t// where we do not persist the associations\n\t\t\t\tawait this.userDataProfilesMainService.setProfileForWorkspace(\n\t\t\t\t\tworkspace,\n\t\t\t\t\tprofile,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Load it\n\t\twindow.load(configuration);\n\t}\n\n\tprivate resolveProfileForBrowserWindow(\n\t\toptions: IOpenBrowserWindowOptions,\n\t\tworkspace: IAnyWorkspaceIdentifier,\n\t\tdefaultProfile: IUserDataProfile,\n\t): Promise<IUserDataProfile> | IUserDataProfile {\n\t\tif (options.forceProfile) {\n\t\t\treturn (\n\t\t\t\tthis.userDataProfilesMainService.profiles.find(\n\t\t\t\t\t(p) => p.name === options.forceProfile,\n\t\t\t\t) ??\n\t\t\t\tthis.userDataProfilesMainService.createNamedProfile(\n\t\t\t\t\toptions.forceProfile,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (options.forceTempProfile) {\n\t\t\treturn this.userDataProfilesMainService.createTransientProfile();\n\t\t}\n\n\t\treturn (\n\t\t\tthis.userDataProfilesMainService.getProfileForWorkspace(\n\t\t\t\tworkspace,\n\t\t\t) ?? defaultProfile\n\t\t);\n\t}\n\n\tprivate onWindowClosed(\n\t\twindow: ICodeWindow,\n\t\tdisposables: IDisposable,\n\t): void {\n\t\t// Remove from our list so that Electron can clean it up\n\t\tthis.windows.delete(window.id);\n\n\t\t// Emit\n\t\tthis._onDidChangeWindowsCount.fire({\n\t\t\toldCount: this.getWindowCount() + 1,\n\t\t\tnewCount: this.getWindowCount(),\n\t\t});\n\n\t\t// Clean up\n\t\tdisposables.dispose();\n\t}\n\n\tprivate onWindowDestroyed(window: ICodeWindow): void {\n\t\t// Remove from our list so that Electron can clean it up\n\t\tthis.windows.delete(window.id);\n\n\t\t// Emit\n\t\tthis._onDidDestroyWindow.fire(window);\n\t}\n\n\tgetFocusedWindow(): ICodeWindow | undefined {\n\t\tconst window = BrowserWindow.getFocusedWindow();\n\t\tif (window) {\n\t\t\treturn this.getWindowById(window.id);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetLastActiveWindow(): ICodeWindow | undefined {\n\t\treturn this.doGetLastActiveWindow(this.getWindows());\n\t}\n\n\tprivate getLastActiveWindowForAuthority(\n\t\tremoteAuthority: string | undefined,\n\t): ICodeWindow | undefined {\n\t\treturn this.doGetLastActiveWindow(\n\t\t\tthis.getWindows().filter((window) =>\n\t\t\t\tisEqualAuthority(window.remoteAuthority, remoteAuthority),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate doGetLastActiveWindow(\n\t\twindows: ICodeWindow[],\n\t): ICodeWindow | undefined {\n\t\treturn getLastFocused(windows);\n\t}\n\n\tsendToFocused(channel: string, ...args: any[]): void {\n\t\tconst focusedWindow =\n\t\t\tthis.getFocusedWindow() || this.getLastActiveWindow();\n\n\t\tfocusedWindow?.sendWhenReady(channel, CancellationToken.None, ...args);\n\t}\n\n\tsendToOpeningWindow(channel: string, ...args: any[]): void {\n\t\tthis._register(\n\t\t\tEvent.once(this.onDidSignalReadyWindow)((window) => {\n\t\t\t\twindow.sendWhenReady(channel, CancellationToken.None, ...args);\n\t\t\t}),\n\t\t);\n\t}\n\n\tsendToAll(\n\t\tchannel: string,\n\t\tpayload?: any,\n\t\twindowIdsToIgnore?: number[],\n\t): void {\n\t\tfor (const window of this.getWindows()) {\n\t\t\tif (\n\t\t\t\twindowIdsToIgnore &&\n\t\t\t\twindowIdsToIgnore.indexOf(window.id) >= 0\n\t\t\t) {\n\t\t\t\tcontinue; // do not send if we are instructed to ignore it\n\t\t\t}\n\n\t\t\twindow.sendWhenReady(channel, CancellationToken.None, payload);\n\t\t}\n\t}\n\n\tgetWindows(): ICodeWindow[] {\n\t\treturn Array.from(this.windows.values());\n\t}\n\n\tgetWindowCount(): number {\n\t\treturn this.windows.size;\n\t}\n\n\tgetWindowById(windowId: number): ICodeWindow | undefined {\n\t\treturn this.windows.get(windowId);\n\t}\n\n\tgetWindowByWebContents(webContents: WebContents): ICodeWindow | undefined {\n\t\tconst browserWindow = BrowserWindow.fromWebContents(webContents);\n\t\tif (!browserWindow) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst window = this.getWindowById(browserWindow.id);\n\n\t\treturn window?.matches(webContents) ? window : undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
