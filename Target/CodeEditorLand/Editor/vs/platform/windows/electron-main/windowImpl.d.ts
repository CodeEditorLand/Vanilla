import electron, { BrowserWindowConstructorOptions } from "electron";
import { CancellationToken } from "vs/base/common/cancellation";
import { Disposable } from "vs/base/common/lifecycle";
import { ISerializableCommandAction } from "vs/platform/action/common/action";
import { IBackupMainService } from "vs/platform/backup/electron-main/backup";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IDialogMainService } from "vs/platform/dialogs/electron-main/dialogMainService";
import { NativeParsedArgs } from "vs/platform/environment/common/argv";
import { IEnvironmentMainService } from "vs/platform/environment/electron-main/environmentMainService";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { ILifecycleMainService } from "vs/platform/lifecycle/electron-main/lifecycleMainService";
import { ILogService } from "vs/platform/log/common/log";
import { ILoggerMainService } from "vs/platform/log/electron-main/loggerService";
import { IPolicyService } from "vs/platform/policy/common/policy";
import { IProductService } from "vs/platform/product/common/productService";
import { IProtocolMainService } from "vs/platform/protocol/electron-main/protocol";
import { IStateService } from "vs/platform/state/node/state";
import { IApplicationStorageMainService, IStorageMainService } from "vs/platform/storage/electron-main/storageMainService";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IThemeMainService } from "vs/platform/theme/electron-main/themeMainService";
import { IUserDataProfile } from "vs/platform/userDataProfile/common/userDataProfile";
import { IUserDataProfilesMainService } from "vs/platform/userDataProfile/electron-main/userDataProfile";
import { INativeWindowConfiguration } from "vs/platform/window/common/window";
import { IBaseWindow, ICodeWindow, IWindowState } from "vs/platform/window/electron-main/window";
import { IWindowsMainService } from "vs/platform/windows/electron-main/windows";
import { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from "vs/platform/workspace/common/workspace";
import { IWorkspacesManagementMainService } from "vs/platform/workspaces/electron-main/workspacesManagementMainService";
export interface IWindowCreationOptions {
    readonly state: IWindowState;
    readonly extensionDevelopmentPath?: string[];
    readonly isExtensionTestHost?: boolean;
}
interface ILoadOptions {
    readonly isReload?: boolean;
    readonly disableExtensions?: boolean;
}
export declare abstract class BaseWindow extends Disposable implements IBaseWindow {
    protected readonly configurationService: IConfigurationService;
    protected readonly stateService: IStateService;
    protected readonly environmentMainService: IEnvironmentMainService;
    protected readonly logService: ILogService;
    private readonly _onDidClose;
    readonly onDidClose: any;
    private readonly _onDidMaximize;
    readonly onDidMaximize: any;
    private readonly _onDidUnmaximize;
    readonly onDidUnmaximize: any;
    private readonly _onDidTriggerSystemContextMenu;
    readonly onDidTriggerSystemContextMenu: any;
    private readonly _onDidEnterFullScreen;
    readonly onDidEnterFullScreen: any;
    private readonly _onDidLeaveFullScreen;
    readonly onDidLeaveFullScreen: any;
    abstract readonly id: number;
    protected _lastFocusTime: number;
    get lastFocusTime(): number;
    protected _win: electron.BrowserWindow | null;
    get win(): any;
    protected setWin(win: electron.BrowserWindow, options?: BrowserWindowConstructorOptions): void;
    constructor(configurationService: IConfigurationService, stateService: IStateService, environmentMainService: IEnvironmentMainService, logService: ILogService);
    protected applyState(state: IWindowState, hasMultipleDisplays?: boolean): void;
    private representedFilename;
    setRepresentedFilename(filename: string): void;
    getRepresentedFilename(): string | undefined;
    private documentEdited;
    setDocumentEdited(edited: boolean): void;
    isDocumentEdited(): boolean;
    focus(options?: {
        force: boolean;
    }): void;
    handleTitleDoubleClick(): void;
    private static readonly windowControlHeightStateStorageKey;
    private readonly hasWindowControlOverlay;
    updateWindowControls(options: {
        height?: number;
        backgroundColor?: string;
        foregroundColor?: string;
    }): void;
    private transientIsNativeFullScreen;
    private joinNativeFullScreenTransition;
    toggleFullScreen(): void;
    protected setFullScreen(fullscreen: boolean, fromRestore: boolean): void;
    get isFullScreen(): boolean;
    private setNativeFullScreen;
    private doSetNativeFullScreen;
    private setSimpleFullScreen;
    abstract matches(webContents: electron.WebContents): boolean;
    dispose(): void;
}
export declare class CodeWindow extends BaseWindow implements ICodeWindow {
    private readonly loggerMainService;
    private readonly policyService;
    private readonly userDataProfilesService;
    private readonly fileService;
    private readonly applicationStorageMainService;
    private readonly storageMainService;
    private readonly themeMainService;
    private readonly workspacesManagementMainService;
    private readonly backupMainService;
    private readonly telemetryService;
    private readonly dialogMainService;
    private readonly lifecycleMainService;
    private readonly productService;
    private readonly protocolMainService;
    private readonly windowsMainService;
    private readonly _onWillLoad;
    readonly onWillLoad: any;
    private readonly _onDidSignalReady;
    readonly onDidSignalReady: any;
    private readonly _onDidDestroy;
    readonly onDidDestroy: any;
    private _id;
    get id(): number;
    protected _win: electron.BrowserWindow;
    get backupPath(): string | undefined;
    get openedWorkspace(): IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined;
    get profile(): IUserDataProfile | undefined;
    get remoteAuthority(): string | undefined;
    private _config;
    get config(): INativeWindowConfiguration | undefined;
    get isExtensionDevelopmentHost(): boolean;
    get isExtensionTestHost(): boolean;
    get isExtensionDevelopmentTestFromCli(): boolean;
    private readonly windowState;
    private currentMenuBarVisibility;
    private readonly whenReadyCallbacks;
    private readonly touchBarGroups;
    private currentHttpProxy;
    private currentNoProxy;
    private customZoomLevel;
    private readonly configObjectUrl;
    private pendingLoadConfig;
    private wasLoaded;
    constructor(config: IWindowCreationOptions, logService: ILogService, loggerMainService: ILoggerMainService, environmentMainService: IEnvironmentMainService, policyService: IPolicyService, userDataProfilesService: IUserDataProfilesMainService, fileService: IFileService, applicationStorageMainService: IApplicationStorageMainService, storageMainService: IStorageMainService, configurationService: IConfigurationService, themeMainService: IThemeMainService, workspacesManagementMainService: IWorkspacesManagementMainService, backupMainService: IBackupMainService, telemetryService: ITelemetryService, dialogMainService: IDialogMainService, lifecycleMainService: ILifecycleMainService, productService: IProductService, protocolMainService: IProtocolMainService, windowsMainService: IWindowsMainService, stateService: IStateService, instantiationService: IInstantiationService);
    private readyState;
    setReady(): void;
    ready(): Promise<ICodeWindow>;
    get isReady(): boolean;
    get whenClosedOrLoaded(): Promise<void>;
    private registerListeners;
    private marketplaceHeadersPromise;
    private getMarketplaceHeaders;
    private onWindowError;
    private destroyWindow;
    private onDidDeleteUntitledWorkspace;
    private onConfigurationUpdated;
    addTabbedWindow(window: ICodeWindow): void;
    load(configuration: INativeWindowConfiguration, options?: ILoadOptions): void;
    private updateConfiguration;
    reload(cli?: NativeParsedArgs): Promise<void>;
    private validateWorkspaceBeforeReload;
    serializeWindowState(): IWindowState;
    private restoreWindowState;
    getBounds(): electron.Rectangle;
    protected setFullScreen(fullscreen: boolean, fromRestore: boolean): void;
    private getMenuBarVisibility;
    private setMenuBarVisibility;
    private doSetMenuBarVisibility;
    notifyZoomLevel(zoomLevel: number | undefined): void;
    private getZoomLevel;
    close(): void;
    sendWhenReady(channel: string, token: CancellationToken, ...args: any[]): void;
    send(channel: string, ...args: any[]): void;
    updateTouchBar(groups: ISerializableCommandAction[][]): void;
    private createTouchBar;
    private createTouchBarGroup;
    private createTouchBarGroupSegments;
    matches(webContents: electron.WebContents): boolean;
    dispose(): void;
}
export {};
