{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/windows/electron-main/windowsStateHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from \"electron\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { isMacintosh } from \"../../../base/common/platform.js\";\nimport { extUriBiasedIgnorePathCase } from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { ILifecycleMainService } from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IStateService } from \"../../state/node/state.js\";\nimport type {\n\tINativeWindowConfiguration,\n\tIWindowSettings,\n} from \"../../window/common/window.js\";\nimport {\n\ttype ICodeWindow,\n\ttype IWindowState as IWindowUIState,\n\tWindowMode,\n\tdefaultWindowState,\n} from \"../../window/electron-main/window.js\";\nimport {\n\ttype IWorkspaceIdentifier,\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\nimport { IWindowsMainService } from \"./windows.js\";\n\nexport interface IWindowState {\n\treadonly windowId?: number;\n\tworkspace?: IWorkspaceIdentifier;\n\tfolderUri?: URI;\n\tbackupPath?: string;\n\tremoteAuthority?: string;\n\tuiState: IWindowUIState;\n}\n\nexport interface IWindowsState {\n\tlastActiveWindow?: IWindowState;\n\tlastPluginDevelopmentHostWindow?: IWindowState;\n\topenedWindows: IWindowState[];\n}\n\ninterface INewWindowState extends IWindowUIState {\n\thasDefaultState?: boolean;\n}\n\ninterface ISerializedWindowsState {\n\treadonly lastActiveWindow?: ISerializedWindowState;\n\treadonly lastPluginDevelopmentHostWindow?: ISerializedWindowState;\n\treadonly openedWindows: ISerializedWindowState[];\n}\n\ninterface ISerializedWindowState {\n\treadonly workspaceIdentifier?: { id: string; configURIPath: string };\n\treadonly folder?: string;\n\treadonly backupPath?: string;\n\treadonly remoteAuthority?: string;\n\treadonly uiState: IWindowUIState;\n}\n\nexport class WindowsStateHandler extends Disposable {\n\tprivate static readonly windowsStateStorageKey = \"windowsState\";\n\n\tget state() {\n\t\treturn this._state;\n\t}\n\tprivate readonly _state = restoreWindowsState(\n\t\tthis.stateService.getItem<ISerializedWindowsState>(\n\t\t\tWindowsStateHandler.windowsStateStorageKey,\n\t\t),\n\t);\n\n\tprivate lastClosedState: IWindowState | undefined = undefined;\n\n\tprivate shuttingDown = false;\n\n\tconstructor(\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// When a window looses focus, save all windows state. This allows to\n\t\t// prevent loss of window-state data when OS is restarted without properly\n\t\t// shutting down the application (https://github.com/microsoft/vscode/issues/87171)\n\t\telectron.app.on(\"browser-window-blur\", () => {\n\t\t\tif (!this.shuttingDown) {\n\t\t\t\tthis.saveWindowsState();\n\t\t\t}\n\t\t});\n\n\t\t// Handle various lifecycle events around windows\n\t\tthis._register(\n\t\t\tthis.lifecycleMainService.onBeforeCloseWindow((window) =>\n\t\t\t\tthis.onBeforeCloseWindow(window),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.lifecycleMainService.onBeforeShutdown(() =>\n\t\t\t\tthis.onBeforeShutdown(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.windowsMainService.onDidChangeWindowsCount((e) => {\n\t\t\t\tif (e.newCount - e.oldCount > 0) {\n\t\t\t\t\t// clear last closed window state when a new window opens. this helps on macOS where\n\t\t\t\t\t// otherwise closing the last window, opening a new window and then quitting would\n\t\t\t\t\t// use the state of the previously closed window when restarting.\n\t\t\t\t\tthis.lastClosedState = undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// try to save state before destroy because close will not fire\n\t\tthis._register(\n\t\t\tthis.windowsMainService.onDidDestroyWindow((window) =>\n\t\t\t\tthis.onBeforeCloseWindow(window),\n\t\t\t),\n\t\t);\n\t}\n\n\t// Note that onBeforeShutdown() and onBeforeCloseWindow() are fired in different order depending on the OS:\n\t// - macOS: since the app will not quit when closing the last window, you will always first get\n\t//          the onBeforeShutdown() event followed by N onBeforeCloseWindow() events for each window\n\t// - other: on other OS, closing the last window will quit the app so the order depends on the\n\t//          user interaction: closing the last window will first trigger onBeforeCloseWindow()\n\t//          and then onBeforeShutdown(). Using the quit action however will first issue onBeforeShutdown()\n\t//          and then onBeforeCloseWindow().\n\t//\n\t// Here is the behavior on different OS depending on action taken (Electron 1.7.x):\n\t//\n\t// Legend\n\t// -  quit(N): quit application with N windows opened\n\t// - close(1): close one window via the window close button\n\t// - closeAll: close all windows via the taskbar command\n\t// - onBeforeShutdown(N): number of windows reported in this event handler\n\t// - onBeforeCloseWindow(N, M): number of windows reported and quitRequested boolean in this event handler\n\t//\n\t// macOS\n\t// \t-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)\n\t// \t-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)\n\t// \t-     quit(0): onBeforeShutdown(0)\n\t// \t-    close(1): onBeforeCloseWindow(1, false)\n\t//\n\t// Windows\n\t// \t-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)\n\t// \t-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)\n\t// \t-    close(1): onBeforeCloseWindow(2, false)[not last window]\n\t// \t-    close(1): onBeforeCloseWindow(1, false), onBeforeShutdown(0)[last window]\n\t// \t- closeAll(2): onBeforeCloseWindow(2, false), onBeforeCloseWindow(2, false), onBeforeShutdown(0)\n\t//\n\t// Linux\n\t// \t-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)\n\t// \t-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)\n\t// \t-    close(1): onBeforeCloseWindow(2, false)[not last window]\n\t// \t-    close(1): onBeforeCloseWindow(1, false), onBeforeShutdown(0)[last window]\n\t// \t- closeAll(2): onBeforeCloseWindow(2, false), onBeforeCloseWindow(2, false), onBeforeShutdown(0)\n\t//\n\tprivate onBeforeShutdown(): void {\n\t\tthis.shuttingDown = true;\n\n\t\tthis.saveWindowsState();\n\t}\n\n\tprivate saveWindowsState(): void {\n\t\t// TODO@electron workaround for Electron not being able to restore\n\t\t// multiple (native) fullscreen windows on the same display at once\n\t\t// on macOS.\n\t\t// https://github.com/electron/electron/issues/34367\n\t\tconst displaysWithFullScreenWindow = new Set<number | undefined>();\n\n\t\tconst currentWindowsState: IWindowsState = {\n\t\t\topenedWindows: [],\n\t\t\tlastPluginDevelopmentHostWindow:\n\t\t\t\tthis._state.lastPluginDevelopmentHostWindow,\n\t\t\tlastActiveWindow: this.lastClosedState,\n\t\t};\n\n\t\t// 1.) Find a last active window (pick any other first window otherwise)\n\t\tif (!currentWindowsState.lastActiveWindow) {\n\t\t\tlet activeWindow = this.windowsMainService.getLastActiveWindow();\n\t\t\tif (!activeWindow || activeWindow.isExtensionDevelopmentHost) {\n\t\t\t\tactiveWindow = this.windowsMainService\n\t\t\t\t\t.getWindows()\n\t\t\t\t\t.find((window) => !window.isExtensionDevelopmentHost);\n\t\t\t}\n\n\t\t\tif (activeWindow) {\n\t\t\t\tcurrentWindowsState.lastActiveWindow =\n\t\t\t\t\tthis.toWindowState(activeWindow);\n\n\t\t\t\tif (\n\t\t\t\t\tcurrentWindowsState.lastActiveWindow.uiState.mode ===\n\t\t\t\t\tWindowMode.Fullscreen\n\t\t\t\t) {\n\t\t\t\t\tdisplaysWithFullScreenWindow.add(\n\t\t\t\t\t\tcurrentWindowsState.lastActiveWindow.uiState.display,\n\t\t\t\t\t); // always allow fullscreen for active window\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 2.) Find extension host window\n\t\tconst extensionHostWindow = this.windowsMainService\n\t\t\t.getWindows()\n\t\t\t.find(\n\t\t\t\t(window) =>\n\t\t\t\t\twindow.isExtensionDevelopmentHost &&\n\t\t\t\t\t!window.isExtensionTestHost,\n\t\t\t);\n\t\tif (extensionHostWindow) {\n\t\t\tcurrentWindowsState.lastPluginDevelopmentHostWindow =\n\t\t\t\tthis.toWindowState(extensionHostWindow);\n\n\t\t\tif (\n\t\t\t\tcurrentWindowsState.lastPluginDevelopmentHostWindow.uiState\n\t\t\t\t\t.mode === WindowMode.Fullscreen\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\tdisplaysWithFullScreenWindow.has(\n\t\t\t\t\t\tcurrentWindowsState.lastPluginDevelopmentHostWindow\n\t\t\t\t\t\t\t.uiState.display,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisMacintosh &&\n\t\t\t\t\t\t!extensionHostWindow.win?.isSimpleFullScreen()\n\t\t\t\t\t) {\n\t\t\t\t\t\tcurrentWindowsState.lastPluginDevelopmentHostWindow.uiState.mode =\n\t\t\t\t\t\t\tWindowMode.Normal;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdisplaysWithFullScreenWindow.add(\n\t\t\t\t\t\tcurrentWindowsState.lastPluginDevelopmentHostWindow\n\t\t\t\t\t\t\t.uiState.display,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 3.) All windows (except extension host) for N >= 2 to support `restoreWindows: all` or for auto update\n\t\t//\n\t\t// Careful here: asking a window for its window state after it has been closed returns bogus values (width: 0, height: 0)\n\t\t// so if we ever want to persist the UI state of the last closed window (window count === 1), it has\n\t\t// to come from the stored lastClosedWindowState on Win/Linux at least\n\t\tif (this.windowsMainService.getWindowCount() > 1) {\n\t\t\tcurrentWindowsState.openedWindows = this.windowsMainService\n\t\t\t\t.getWindows()\n\t\t\t\t.filter((window) => !window.isExtensionDevelopmentHost)\n\t\t\t\t.map((window) => {\n\t\t\t\t\tconst windowState = this.toWindowState(window);\n\n\t\t\t\t\tif (windowState.uiState.mode === WindowMode.Fullscreen) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tdisplaysWithFullScreenWindow.has(\n\t\t\t\t\t\t\t\twindowState.uiState.display,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tisMacintosh &&\n\t\t\t\t\t\t\t\twindowState.windowId !==\n\t\t\t\t\t\t\t\t\tcurrentWindowsState.lastActiveWindow\n\t\t\t\t\t\t\t\t\t\t?.windowId &&\n\t\t\t\t\t\t\t\t!window.win?.isSimpleFullScreen()\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\twindowState.uiState.mode = WindowMode.Normal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisplaysWithFullScreenWindow.add(\n\t\t\t\t\t\t\t\twindowState.uiState.display,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn windowState;\n\t\t\t\t});\n\t\t}\n\n\t\t// Persist\n\t\tconst state = getWindowsStateStoreData(currentWindowsState);\n\t\tthis.stateService.setItem(\n\t\t\tWindowsStateHandler.windowsStateStorageKey,\n\t\t\tstate,\n\t\t);\n\n\t\tif (this.shuttingDown) {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"[WindowsStateHandler] onBeforeShutdown\",\n\t\t\t\tstate,\n\t\t\t);\n\t\t}\n\t}\n\n\t// See note on #onBeforeShutdown() for details how these events are flowing\n\tprivate onBeforeCloseWindow(window: ICodeWindow): void {\n\t\tif (this.lifecycleMainService.quitRequested) {\n\t\t\treturn; // during quit, many windows close in parallel so let it be handled in the before-quit handler\n\t\t}\n\n\t\t// On Window close, update our stored UI state of this window\n\t\tconst state: IWindowState = this.toWindowState(window);\n\t\tif (window.isExtensionDevelopmentHost && !window.isExtensionTestHost) {\n\t\t\tthis._state.lastPluginDevelopmentHostWindow = state; // do not let test run window state overwrite our extension development state\n\t\t}\n\n\t\t// Any non extension host window with same workspace or folder\n\t\telse if (!window.isExtensionDevelopmentHost && window.openedWorkspace) {\n\t\t\tthis._state.openedWindows.forEach((openedWindow) => {\n\t\t\t\tconst sameWorkspace =\n\t\t\t\t\tisWorkspaceIdentifier(window.openedWorkspace) &&\n\t\t\t\t\topenedWindow.workspace?.id === window.openedWorkspace.id;\n\t\t\t\tconst sameFolder =\n\t\t\t\t\tisSingleFolderWorkspaceIdentifier(window.openedWorkspace) &&\n\t\t\t\t\topenedWindow.folderUri &&\n\t\t\t\t\textUriBiasedIgnorePathCase.isEqual(\n\t\t\t\t\t\topenedWindow.folderUri,\n\t\t\t\t\t\twindow.openedWorkspace.uri,\n\t\t\t\t\t);\n\n\t\t\t\tif (sameWorkspace || sameFolder) {\n\t\t\t\t\topenedWindow.uiState = state.uiState;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// On Windows and Linux closing the last window will trigger quit. Since we are storing all UI state\n\t\t// before quitting, we need to remember the UI state of this window to be able to persist it.\n\t\t// On macOS we keep the last closed window state ready in case the user wants to quit right after or\n\t\t// wants to open another window, in which case we use this state over the persisted one.\n\t\tif (this.windowsMainService.getWindowCount() === 1) {\n\t\t\tthis.lastClosedState = state;\n\t\t}\n\t}\n\n\tprivate toWindowState(window: ICodeWindow): IWindowState {\n\t\treturn {\n\t\t\twindowId: window.id,\n\t\t\tworkspace: isWorkspaceIdentifier(window.openedWorkspace)\n\t\t\t\t? window.openedWorkspace\n\t\t\t\t: undefined,\n\t\t\tfolderUri: isSingleFolderWorkspaceIdentifier(window.openedWorkspace)\n\t\t\t\t? window.openedWorkspace.uri\n\t\t\t\t: undefined,\n\t\t\tbackupPath: window.backupPath,\n\t\t\tremoteAuthority: window.remoteAuthority,\n\t\t\tuiState: window.serializeWindowState(),\n\t\t};\n\t}\n\n\tgetNewWindowState(\n\t\tconfiguration: INativeWindowConfiguration,\n\t): INewWindowState {\n\t\tconst state = this.doGetNewWindowState(configuration);\n\t\tconst windowConfig = this.configurationService.getValue<\n\t\t\tIWindowSettings | undefined\n\t\t>(\"window\");\n\n\t\t// Fullscreen state gets special treatment\n\t\tif (state.mode === WindowMode.Fullscreen) {\n\t\t\t// Window state is not from a previous session: only allow fullscreen if we inherit it or user wants fullscreen\n\t\t\tlet allowFullscreen: boolean;\n\t\t\tif (state.hasDefaultState) {\n\t\t\t\tallowFullscreen = !!(\n\t\t\t\t\twindowConfig?.newWindowDimensions &&\n\t\t\t\t\t[\"fullscreen\", \"inherit\", \"offset\"].indexOf(\n\t\t\t\t\t\twindowConfig.newWindowDimensions,\n\t\t\t\t\t) >= 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Window state is from a previous session: only allow fullscreen when we got updated or user wants to restore\n\t\t\telse {\n\t\t\t\tallowFullscreen = !!(\n\t\t\t\t\tthis.lifecycleMainService.wasRestarted ||\n\t\t\t\t\twindowConfig?.restoreFullscreen\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!allowFullscreen) {\n\t\t\t\tstate.mode = WindowMode.Normal;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t}\n\n\tprivate doGetNewWindowState(\n\t\tconfiguration: INativeWindowConfiguration,\n\t): INewWindowState {\n\t\tconst lastActive = this.windowsMainService.getLastActiveWindow();\n\n\t\t// Restore state unless we are running extension tests\n\t\tif (!configuration.extensionTestsPath) {\n\t\t\t// extension development host Window - load from stored settings if any\n\t\t\tif (\n\t\t\t\t!!configuration.extensionDevelopmentPath &&\n\t\t\t\tthis.state.lastPluginDevelopmentHostWindow\n\t\t\t) {\n\t\t\t\treturn this.state.lastPluginDevelopmentHostWindow.uiState;\n\t\t\t}\n\n\t\t\t// Known Workspace - load from stored settings\n\t\t\tconst workspace = configuration.workspace;\n\t\t\tif (isWorkspaceIdentifier(workspace)) {\n\t\t\t\tconst stateForWorkspace = this.state.openedWindows\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(openedWindow) =>\n\t\t\t\t\t\t\topenedWindow.workspace &&\n\t\t\t\t\t\t\topenedWindow.workspace.id === workspace.id,\n\t\t\t\t\t)\n\t\t\t\t\t.map((openedWindow) => openedWindow.uiState);\n\t\t\t\tif (stateForWorkspace.length) {\n\t\t\t\t\treturn stateForWorkspace[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Known Folder - load from stored settings\n\t\t\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\t\tconst stateForFolder = this.state.openedWindows\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(openedWindow) =>\n\t\t\t\t\t\t\topenedWindow.folderUri &&\n\t\t\t\t\t\t\textUriBiasedIgnorePathCase.isEqual(\n\t\t\t\t\t\t\t\topenedWindow.folderUri,\n\t\t\t\t\t\t\t\tworkspace.uri,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t\t.map((openedWindow) => openedWindow.uiState);\n\t\t\t\tif (stateForFolder.length) {\n\t\t\t\t\treturn stateForFolder[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Empty windows with backups\n\t\t\telse if (configuration.backupPath) {\n\t\t\t\tconst stateForEmptyWindow = this.state.openedWindows\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(openedWindow) =>\n\t\t\t\t\t\t\topenedWindow.backupPath ===\n\t\t\t\t\t\t\tconfiguration.backupPath,\n\t\t\t\t\t)\n\t\t\t\t\t.map((openedWindow) => openedWindow.uiState);\n\t\t\t\tif (stateForEmptyWindow.length) {\n\t\t\t\t\treturn stateForEmptyWindow[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// First Window\n\t\t\tconst lastActiveState =\n\t\t\t\tthis.lastClosedState || this.state.lastActiveWindow;\n\t\t\tif (!lastActive && lastActiveState) {\n\t\t\t\treturn lastActiveState.uiState;\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// In any other case, we do not have any stored settings for the window state, so we come up with something smart\n\t\t//\n\n\t\t// We want the new window to open on the same display that the last active one is in\n\t\tlet displayToUse: electron.Display | undefined;\n\t\tconst displays = electron.screen.getAllDisplays();\n\n\t\t// Single Display\n\t\tif (displays.length === 1) {\n\t\t\tdisplayToUse = displays[0];\n\t\t}\n\n\t\t// Multi Display\n\t\telse {\n\t\t\t// on mac there is 1 menu per window so we need to use the monitor where the cursor currently is\n\t\t\tif (isMacintosh) {\n\t\t\t\tconst cursorPoint = electron.screen.getCursorScreenPoint();\n\t\t\t\tdisplayToUse =\n\t\t\t\t\telectron.screen.getDisplayNearestPoint(cursorPoint);\n\t\t\t}\n\n\t\t\t// if we have a last active window, use that display for the new window\n\t\t\tif (!displayToUse && lastActive) {\n\t\t\t\tdisplayToUse = electron.screen.getDisplayMatching(\n\t\t\t\t\tlastActive.getBounds(),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// fallback to primary display or first display\n\t\t\tif (!displayToUse) {\n\t\t\t\tdisplayToUse =\n\t\t\t\t\telectron.screen.getPrimaryDisplay() || displays[0];\n\t\t\t}\n\t\t}\n\n\t\t// Compute x/y based on display bounds\n\t\t// Note: important to use Math.round() because Electron does not seem to be too happy about\n\t\t// display coordinates that are not absolute numbers.\n\t\tlet state = defaultWindowState();\n\t\tstate.x = Math.round(\n\t\t\tdisplayToUse.bounds.x +\n\t\t\t\tdisplayToUse.bounds.width / 2 -\n\t\t\t\tstate.width! / 2,\n\t\t);\n\t\tstate.y = Math.round(\n\t\t\tdisplayToUse.bounds.y +\n\t\t\t\tdisplayToUse.bounds.height / 2 -\n\t\t\t\tstate.height! / 2,\n\t\t);\n\n\t\t// Check for newWindowDimensions setting and adjust accordingly\n\t\tconst windowConfig = this.configurationService.getValue<\n\t\t\tIWindowSettings | undefined\n\t\t>(\"window\");\n\t\tlet ensureNoOverlap = true;\n\t\tif (windowConfig?.newWindowDimensions) {\n\t\t\tif (windowConfig.newWindowDimensions === \"maximized\") {\n\t\t\t\tstate.mode = WindowMode.Maximized;\n\t\t\t\tensureNoOverlap = false;\n\t\t\t} else if (windowConfig.newWindowDimensions === \"fullscreen\") {\n\t\t\t\tstate.mode = WindowMode.Fullscreen;\n\t\t\t\tensureNoOverlap = false;\n\t\t\t} else if (\n\t\t\t\t(windowConfig.newWindowDimensions === \"inherit\" ||\n\t\t\t\t\twindowConfig.newWindowDimensions === \"offset\") &&\n\t\t\t\tlastActive\n\t\t\t) {\n\t\t\t\tconst lastActiveState = lastActive.serializeWindowState();\n\t\t\t\tif (lastActiveState.mode === WindowMode.Fullscreen) {\n\t\t\t\t\tstate.mode = WindowMode.Fullscreen; // only take mode (fixes https://github.com/microsoft/vscode/issues/19331)\n\t\t\t\t} else {\n\t\t\t\t\tstate = {\n\t\t\t\t\t\t...lastActiveState,\n\t\t\t\t\t\tzoomLevel: undefined, // do not inherit zoom level\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tensureNoOverlap =\n\t\t\t\t\tstate.mode !== WindowMode.Fullscreen &&\n\t\t\t\t\twindowConfig.newWindowDimensions === \"offset\";\n\t\t\t}\n\t\t}\n\n\t\tif (ensureNoOverlap) {\n\t\t\tstate = this.ensureNoOverlap(state);\n\t\t}\n\n\t\t(state as INewWindowState).hasDefaultState = true; // flag as default state\n\n\t\treturn state;\n\t}\n\n\tprivate ensureNoOverlap(state: IWindowUIState): IWindowUIState {\n\t\tif (this.windowsMainService.getWindows().length === 0) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate.x = typeof state.x === \"number\" ? state.x : 0;\n\t\tstate.y = typeof state.y === \"number\" ? state.y : 0;\n\n\t\tconst existingWindowBounds = this.windowsMainService\n\t\t\t.getWindows()\n\t\t\t.map((window) => window.getBounds());\n\t\twhile (\n\t\t\texistingWindowBounds.some(\n\t\t\t\t(bounds) => bounds.x === state.x || bounds.y === state.y,\n\t\t\t)\n\t\t) {\n\t\t\tstate.x += 30;\n\t\t\tstate.y += 30;\n\t\t}\n\n\t\treturn state;\n\t}\n}\n\nexport function restoreWindowsState(\n\tdata: ISerializedWindowsState | undefined,\n): IWindowsState {\n\tconst result: IWindowsState = { openedWindows: [] };\n\tconst windowsState = data || { openedWindows: [] };\n\n\tif (windowsState.lastActiveWindow) {\n\t\tresult.lastActiveWindow = restoreWindowState(\n\t\t\twindowsState.lastActiveWindow,\n\t\t);\n\t}\n\n\tif (windowsState.lastPluginDevelopmentHostWindow) {\n\t\tresult.lastPluginDevelopmentHostWindow = restoreWindowState(\n\t\t\twindowsState.lastPluginDevelopmentHostWindow,\n\t\t);\n\t}\n\n\tif (Array.isArray(windowsState.openedWindows)) {\n\t\tresult.openedWindows = windowsState.openedWindows.map((windowState) =>\n\t\t\trestoreWindowState(windowState),\n\t\t);\n\t}\n\n\treturn result;\n}\n\nfunction restoreWindowState(windowState: ISerializedWindowState): IWindowState {\n\tconst result: IWindowState = { uiState: windowState.uiState };\n\tif (windowState.backupPath) {\n\t\tresult.backupPath = windowState.backupPath;\n\t}\n\n\tif (windowState.remoteAuthority) {\n\t\tresult.remoteAuthority = windowState.remoteAuthority;\n\t}\n\n\tif (windowState.folder) {\n\t\tresult.folderUri = URI.parse(windowState.folder);\n\t}\n\n\tif (windowState.workspaceIdentifier) {\n\t\tresult.workspace = {\n\t\t\tid: windowState.workspaceIdentifier.id,\n\t\t\tconfigPath: URI.parse(\n\t\t\t\twindowState.workspaceIdentifier.configURIPath,\n\t\t\t),\n\t\t};\n\t}\n\n\treturn result;\n}\n\nexport function getWindowsStateStoreData(\n\twindowsState: IWindowsState,\n): IWindowsState {\n\treturn {\n\t\tlastActiveWindow:\n\t\t\twindowsState.lastActiveWindow &&\n\t\t\tserializeWindowState(windowsState.lastActiveWindow),\n\t\tlastPluginDevelopmentHostWindow:\n\t\t\twindowsState.lastPluginDevelopmentHostWindow &&\n\t\t\tserializeWindowState(windowsState.lastPluginDevelopmentHostWindow),\n\t\topenedWindows: windowsState.openedWindows.map((ws) =>\n\t\t\tserializeWindowState(ws),\n\t\t),\n\t};\n}\n\nfunction serializeWindowState(\n\twindowState: IWindowState,\n): ISerializedWindowState {\n\treturn {\n\t\tworkspaceIdentifier: windowState.workspace && {\n\t\t\tid: windowState.workspace.id,\n\t\t\tconfigURIPath: windowState.workspace.configPath.toString(),\n\t\t},\n\t\tfolder: windowState.folderUri && windowState.folderUri.toString(),\n\t\tbackupPath: windowState.backupPath,\n\t\tremoteAuthority: windowState.remoteAuthority,\n\t\tuiState: windowState.uiState,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
