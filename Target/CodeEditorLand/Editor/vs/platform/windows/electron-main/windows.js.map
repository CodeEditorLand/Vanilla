{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/windows/electron-main/windows.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from 'electron';\nimport { Color } from '../../../base/common/color.js';\nimport { Event } from '../../../base/common/event.js';\nimport { join } from '../../../base/common/path.js';\nimport { IProcessEnvironment, isLinux, isMacintosh, isWindows } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IAuxiliaryWindow } from '../../auxiliaryWindow/electron-main/auxiliaryWindow.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { NativeParsedArgs } from '../../environment/common/argv.js';\nimport { IEnvironmentMainService } from '../../environment/electron-main/environmentMainService.js';\nimport { ServicesAccessor, createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IThemeMainService } from '../../theme/electron-main/themeMainService.js';\nimport { IOpenEmptyWindowOptions, IWindowOpenable, IWindowSettings, TitlebarStyle, WindowMinimumSize, hasNativeTitlebar, useNativeFullScreen, useWindowControlsOverlay, zoomLevelToZoomFactor } from '../../window/common/window.js';\nimport { ICodeWindow, IWindowState, WindowMode, defaultWindowState } from '../../window/electron-main/window.js';\n\nexport const IWindowsMainService = createDecorator<IWindowsMainService>('windowsMainService');\n\nexport interface IWindowsMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeWindowsCount: Event<IWindowsCountChangedEvent>;\n\n\treadonly onDidOpenWindow: Event<ICodeWindow>;\n\treadonly onDidSignalReadyWindow: Event<ICodeWindow>;\n\treadonly onDidMaximizeWindow: Event<ICodeWindow>;\n\treadonly onDidUnmaximizeWindow: Event<ICodeWindow>;\n\treadonly onDidChangeFullScreen: Event<{ window: ICodeWindow; fullscreen: boolean }>;\n\treadonly onDidTriggerSystemContextMenu: Event<{ readonly window: ICodeWindow; readonly x: number; readonly y: number }>;\n\treadonly onDidDestroyWindow: Event<ICodeWindow>;\n\n\topen(openConfig: IOpenConfiguration): Promise<ICodeWindow[]>;\n\topenEmptyWindow(openConfig: IOpenEmptyConfiguration, options?: IOpenEmptyWindowOptions): Promise<ICodeWindow[]>;\n\topenExtensionDevelopmentHostWindow(extensionDevelopmentPath: string[], openConfig: IOpenConfiguration): Promise<ICodeWindow[]>;\n\n\topenExistingWindow(window: ICodeWindow, openConfig: IOpenConfiguration): void;\n\n\tsendToFocused(channel: string, ...args: any[]): void;\n\tsendToOpeningWindow(channel: string, ...args: any[]): void;\n\tsendToAll(channel: string, payload?: any, windowIdsToIgnore?: number[]): void;\n\n\tgetWindows(): ICodeWindow[];\n\tgetWindowCount(): number;\n\n\tgetFocusedWindow(): ICodeWindow | undefined;\n\tgetLastActiveWindow(): ICodeWindow | undefined;\n\n\tgetWindowById(windowId: number): ICodeWindow | undefined;\n\tgetWindowByWebContents(webContents: electron.WebContents): ICodeWindow | undefined;\n}\n\nexport interface IWindowsCountChangedEvent {\n\treadonly oldCount: number;\n\treadonly newCount: number;\n}\n\nexport const enum OpenContext {\n\n\t// opening when running from the command line\n\tCLI,\n\n\t// macOS only: opening from the dock (also when opening files to a running instance from desktop)\n\tDOCK,\n\n\t// opening from the main application window\n\tMENU,\n\n\t// opening from a file or folder dialog\n\tDIALOG,\n\n\t// opening from the OS's UI\n\tDESKTOP,\n\n\t// opening through the API\n\tAPI,\n\n\t// opening from a protocol link\n\tLINK\n}\n\nexport interface IBaseOpenConfiguration {\n\treadonly context: OpenContext;\n\treadonly contextWindowId?: number;\n}\n\nexport interface IOpenConfiguration extends IBaseOpenConfiguration {\n\treadonly cli: NativeParsedArgs;\n\treadonly userEnv?: IProcessEnvironment;\n\treadonly urisToOpen?: IWindowOpenable[];\n\treadonly waitMarkerFileURI?: URI;\n\treadonly preferNewWindow?: boolean;\n\treadonly forceNewWindow?: boolean;\n\treadonly forceNewTabbedWindow?: boolean;\n\treadonly forceReuseWindow?: boolean;\n\treadonly forceEmpty?: boolean;\n\treadonly diffMode?: boolean;\n\treadonly mergeMode?: boolean;\n\taddMode?: boolean;\n\treadonly gotoLineMode?: boolean;\n\treadonly initialStartup?: boolean;\n\treadonly noRecentEntry?: boolean;\n\t/**\n\t * The remote authority to use when windows are opened with either\n\t * - no workspace (empty window)\n\t * - a workspace that is neither `file://` nor `vscode-remote://`\n\t */\n\treadonly remoteAuthority?: string;\n\treadonly forceProfile?: string;\n\treadonly forceTempProfile?: boolean;\n}\n\nexport interface IOpenEmptyConfiguration extends IBaseOpenConfiguration { }\n\nexport interface IDefaultBrowserWindowOptionsOverrides {\n\tforceNativeTitlebar?: boolean;\n\tdisableFullscreen?: boolean;\n}\n\nexport function defaultBrowserWindowOptions(accessor: ServicesAccessor, windowState: IWindowState, overrides?: IDefaultBrowserWindowOptionsOverrides, webPreferences?: electron.WebPreferences): electron.BrowserWindowConstructorOptions & { experimentalDarkMode: boolean } {\n\tconst themeMainService = accessor.get(IThemeMainService);\n\tconst productService = accessor.get(IProductService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst environmentMainService = accessor.get(IEnvironmentMainService);\n\n\tconst windowSettings = configurationService.getValue<IWindowSettings | undefined>('window');\n\n\tconst options: electron.BrowserWindowConstructorOptions & { experimentalDarkMode: boolean } = {\n\t\tbackgroundColor: themeMainService.getBackgroundColor(),\n\t\tminWidth: WindowMinimumSize.WIDTH,\n\t\tminHeight: WindowMinimumSize.HEIGHT,\n\t\ttitle: productService.nameLong,\n\t\tshow: windowState.mode !== WindowMode.Maximized && windowState.mode !== WindowMode.Fullscreen, // reduce flicker by showing later\n\t\tx: windowState.x,\n\t\ty: windowState.y,\n\t\twidth: windowState.width,\n\t\theight: windowState.height,\n\t\twebPreferences: {\n\t\t\t...webPreferences,\n\t\t\tenableWebSQL: false,\n\t\t\tspellcheck: false,\n\t\t\tzoomFactor: zoomLevelToZoomFactor(windowState.zoomLevel ?? windowSettings?.zoomLevel),\n\t\t\tautoplayPolicy: 'user-gesture-required',\n\t\t\t// Enable experimental css highlight api https://chromestatus.com/feature/5436441440026624\n\t\t\t// Refs https://github.com/microsoft/vscode/issues/140098\n\t\t\tenableBlinkFeatures: 'HighlightAPI',\n\t\t\tsandbox: true\n\t\t},\n\t\texperimentalDarkMode: true\n\t};\n\n\tif (isLinux) {\n\t\toptions.icon = join(environmentMainService.appRoot, 'resources/linux/code.png'); // always on Linux\n\t} else if (isWindows && !environmentMainService.isBuilt) {\n\t\toptions.icon = join(environmentMainService.appRoot, 'resources/win32/code_150x150.png'); // only when running out of sources on Windows\n\t}\n\n\tif (isMacintosh) {\n\t\toptions.acceptFirstMouse = true; // enabled by default\n\n\t\tif (windowSettings?.clickThroughInactive === false) {\n\t\t\toptions.acceptFirstMouse = false;\n\t\t}\n\t}\n\n\tif (overrides?.disableFullscreen) {\n\t\toptions.fullscreen = false;\n\t} else if (isMacintosh && !useNativeFullScreen(configurationService)) {\n\t\toptions.fullscreenable = false; // enables simple fullscreen mode\n\t}\n\n\tconst useNativeTabs = isMacintosh && windowSettings?.nativeTabs === true;\n\tif (useNativeTabs) {\n\t\toptions.tabbingIdentifier = productService.nameShort; // this opts in to sierra tabs\n\t}\n\n\tconst hideNativeTitleBar = !hasNativeTitlebar(configurationService, overrides?.forceNativeTitlebar ? TitlebarStyle.NATIVE : undefined);\n\tif (hideNativeTitleBar) {\n\t\toptions.titleBarStyle = 'hidden';\n\t\tif (!isMacintosh) {\n\t\t\toptions.frame = false;\n\t\t}\n\n\t\tif (useWindowControlsOverlay(configurationService)) {\n\n\t\t\t// This logic will not perfectly guess the right colors\n\t\t\t// to use on initialization, but prefer to keep things\n\t\t\t// simple as it is temporary and not noticeable\n\n\t\t\tconst titleBarColor = themeMainService.getWindowSplash()?.colorInfo.titleBarBackground ?? themeMainService.getBackgroundColor();\n\t\t\tconst symbolColor = Color.fromHex(titleBarColor).isDarker() ? '#FFFFFF' : '#000000';\n\n\t\t\toptions.titleBarOverlay = {\n\t\t\t\theight: 29, // the smallest size of the title bar on windows accounting for the border on windows 11\n\t\t\t\tcolor: titleBarColor,\n\t\t\t\tsymbolColor\n\t\t\t};\n\t\t}\n\t}\n\n\treturn options;\n}\n\nexport function getLastFocused(windows: ICodeWindow[]): ICodeWindow | undefined;\nexport function getLastFocused(windows: IAuxiliaryWindow[]): IAuxiliaryWindow | undefined;\nexport function getLastFocused(windows: ICodeWindow[] | IAuxiliaryWindow[]): ICodeWindow | IAuxiliaryWindow | undefined {\n\tlet lastFocusedWindow: ICodeWindow | IAuxiliaryWindow | undefined = undefined;\n\tlet maxLastFocusTime = Number.MIN_VALUE;\n\n\tfor (const window of windows) {\n\t\tif (window.lastFocusTime > maxLastFocusTime) {\n\t\t\tmaxLastFocusTime = window.lastFocusTime;\n\t\t\tlastFocusedWindow = window;\n\t\t}\n\t}\n\n\treturn lastFocusedWindow;\n}\n\nexport namespace WindowStateValidator {\n\n\texport function validateWindowState(logService: ILogService, state: IWindowState, displays = electron.screen.getAllDisplays()): IWindowState | undefined {\n\t\tlogService.trace(`window#validateWindowState: validating window state on ${displays.length} display(s)`, state);\n\n\t\tif (\n\t\t\ttypeof state.x !== 'number' ||\n\t\t\ttypeof state.y !== 'number' ||\n\t\t\ttypeof state.width !== 'number' ||\n\t\t\ttypeof state.height !== 'number'\n\t\t) {\n\t\t\tlogService.trace('window#validateWindowState: unexpected type of state values');\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (state.width <= 0 || state.height <= 0) {\n\t\t\tlogService.trace('window#validateWindowState: unexpected negative values');\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Single Monitor: be strict about x/y positioning\n\t\t// macOS & Linux: these OS seem to be pretty good in ensuring that a window is never outside of it's bounds.\n\t\t// Windows: it is possible to have a window with a size that makes it fall out of the window. our strategy\n\t\t//          is to try as much as possible to keep the window in the monitor bounds. we are not as strict as\n\t\t//          macOS and Linux and allow the window to exceed the monitor bounds as long as the window is still\n\t\t//          some pixels (128) visible on the screen for the user to drag it back.\n\t\tif (displays.length === 1) {\n\t\t\tconst displayWorkingArea = getWorkingArea(displays[0]);\n\t\t\tlogService.trace('window#validateWindowState: single monitor working area', displayWorkingArea);\n\n\t\t\tif (displayWorkingArea) {\n\n\t\t\t\tfunction ensureStateInDisplayWorkingArea(): void {\n\t\t\t\t\tif (!state || typeof state.x !== 'number' || typeof state.y !== 'number' || !displayWorkingArea) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (state.x < displayWorkingArea.x) {\n\t\t\t\t\t\t// prevent window from falling out of the screen to the left\n\t\t\t\t\t\tstate.x = displayWorkingArea.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (state.y < displayWorkingArea.y) {\n\t\t\t\t\t\t// prevent window from falling out of the screen to the top\n\t\t\t\t\t\tstate.y = displayWorkingArea.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// ensure state is not outside display working area (top, left)\n\t\t\t\tensureStateInDisplayWorkingArea();\n\n\t\t\t\tif (state.width > displayWorkingArea.width) {\n\t\t\t\t\t// prevent window from exceeding display bounds width\n\t\t\t\t\tstate.width = displayWorkingArea.width;\n\t\t\t\t}\n\n\t\t\t\tif (state.height > displayWorkingArea.height) {\n\t\t\t\t\t// prevent window from exceeding display bounds height\n\t\t\t\t\tstate.height = displayWorkingArea.height;\n\t\t\t\t}\n\n\t\t\t\tif (state.x > (displayWorkingArea.x + displayWorkingArea.width - 128)) {\n\t\t\t\t\t// prevent window from falling out of the screen to the right with\n\t\t\t\t\t// 128px margin by positioning the window to the far right edge of\n\t\t\t\t\t// the screen\n\t\t\t\t\tstate.x = displayWorkingArea.x + displayWorkingArea.width - state.width;\n\t\t\t\t}\n\n\t\t\t\tif (state.y > (displayWorkingArea.y + displayWorkingArea.height - 128)) {\n\t\t\t\t\t// prevent window from falling out of the screen to the bottom with\n\t\t\t\t\t// 128px margin by positioning the window to the far bottom edge of\n\t\t\t\t\t// the screen\n\t\t\t\t\tstate.y = displayWorkingArea.y + displayWorkingArea.height - state.height;\n\t\t\t\t}\n\n\t\t\t\t// again ensure state is not outside display working area\n\t\t\t\t// (it may have changed from the previous validation step)\n\t\t\t\tensureStateInDisplayWorkingArea();\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\t// Multi Montior (fullscreen): try to find the previously used display\n\t\tif (state.display && state.mode === WindowMode.Fullscreen) {\n\t\t\tconst display = displays.find(d => d.id === state.display);\n\t\t\tif (display && typeof display.bounds?.x === 'number' && typeof display.bounds?.y === 'number') {\n\t\t\t\tlogService.trace('window#validateWindowState: restoring fullscreen to previous display');\n\n\t\t\t\tconst defaults = defaultWindowState(WindowMode.Fullscreen); // make sure we have good values when the user restores the window\n\t\t\t\tdefaults.x = display.bounds.x; // carefull to use displays x/y position so that the window ends up on the correct monitor\n\t\t\t\tdefaults.y = display.bounds.y;\n\n\t\t\t\treturn defaults;\n\t\t\t}\n\t\t}\n\n\t\t// Multi Monitor (non-fullscreen): ensure window is within display bounds\n\t\tlet display: electron.Display | undefined;\n\t\tlet displayWorkingArea: electron.Rectangle | undefined;\n\t\ttry {\n\t\t\tdisplay = electron.screen.getDisplayMatching({ x: state.x, y: state.y, width: state.width, height: state.height });\n\t\t\tdisplayWorkingArea = getWorkingArea(display);\n\n\t\t\tlogService.trace('window#validateWindowState: multi-monitor working area', displayWorkingArea);\n\t\t} catch (error) {\n\t\t\t// Electron has weird conditions under which it throws errors\n\t\t\t// e.g. https://github.com/microsoft/vscode/issues/100334 when\n\t\t\t// large numbers are passed in\n\t\t\tlogService.error('window#validateWindowState: error finding display for window state', error);\n\t\t}\n\n\t\tif (\n\t\t\tdisplay &&\t\t\t\t\t\t\t\t\t\t\t\t\t\t// we have a display matching the desired bounds\n\t\t\tdisplayWorkingArea &&\t\t\t\t\t\t\t\t\t\t\t// we have valid working area bounds\n\t\t\tstate.x + state.width > displayWorkingArea.x &&\t\t\t\t\t// prevent window from falling out of the screen to the left\n\t\t\tstate.y + state.height > displayWorkingArea.y &&\t\t\t\t// prevent window from falling out of the screen to the top\n\t\t\tstate.x < displayWorkingArea.x + displayWorkingArea.width &&\t// prevent window from falling out of the screen to the right\n\t\t\tstate.y < displayWorkingArea.y + displayWorkingArea.height\t\t// prevent window from falling out of the screen to the bottom\n\t\t) {\n\t\t\treturn state;\n\t\t}\n\n\t\tlogService.trace('window#validateWindowState: state is outside of the multi-monitor working area');\n\n\t\treturn undefined;\n\t}\n\n\tfunction getWorkingArea(display: electron.Display): electron.Rectangle | undefined {\n\n\t\t// Prefer the working area of the display to account for taskbars on the\n\t\t// desktop being positioned somewhere (https://github.com/microsoft/vscode/issues/50830).\n\t\t//\n\t\t// Linux X11 sessions sometimes report wrong display bounds, so we validate\n\t\t// the reported sizes are positive.\n\t\tif (display.workArea.width > 0 && display.workArea.height > 0) {\n\t\t\treturn display.workArea;\n\t\t}\n\n\t\tif (display.bounds.width > 0 && display.bounds.height > 0) {\n\t\t\treturn display.bounds;\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["OpenContext", "WindowStateValidator", "displayWorkingArea", "ensureStateInDisplayWorkingArea", "display"]
}
