{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/windows/electron-main/windows.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from \"electron\";\nimport { Color } from \"../../../base/common/color.js\";\nimport type { Event } from \"../../../base/common/event.js\";\nimport { join } from \"../../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tisLinux,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type { IAuxiliaryWindow } from \"../../auxiliaryWindow/electron-main/auxiliaryWindow.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport type { NativeParsedArgs } from \"../../environment/common/argv.js\";\nimport { IEnvironmentMainService } from \"../../environment/electron-main/environmentMainService.js\";\nimport {\n\ttype ServicesAccessor,\n\tcreateDecorator,\n} from \"../../instantiation/common/instantiation.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { IThemeMainService } from \"../../theme/electron-main/themeMainService.js\";\nimport {\n\ttype IOpenEmptyWindowOptions,\n\ttype IWindowOpenable,\n\ttype IWindowSettings,\n\tTitlebarStyle,\n\tWindowMinimumSize,\n\thasNativeTitlebar,\n\tuseNativeFullScreen,\n\tuseWindowControlsOverlay,\n\tzoomLevelToZoomFactor,\n} from \"../../window/common/window.js\";\nimport {\n\ttype ICodeWindow,\n\ttype IWindowState,\n\tWindowMode,\n\tdefaultWindowState,\n} from \"../../window/electron-main/window.js\";\n\nexport const IWindowsMainService =\n\tcreateDecorator<IWindowsMainService>(\"windowsMainService\");\n\nexport interface IWindowsMainService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeWindowsCount: Event<IWindowsCountChangedEvent>;\n\n\treadonly onDidOpenWindow: Event<ICodeWindow>;\n\treadonly onDidSignalReadyWindow: Event<ICodeWindow>;\n\treadonly onDidMaximizeWindow: Event<ICodeWindow>;\n\treadonly onDidUnmaximizeWindow: Event<ICodeWindow>;\n\treadonly onDidChangeFullScreen: Event<{\n\t\twindow: ICodeWindow;\n\t\tfullscreen: boolean;\n\t}>;\n\treadonly onDidTriggerSystemContextMenu: Event<{\n\t\treadonly window: ICodeWindow;\n\t\treadonly x: number;\n\t\treadonly y: number;\n\t}>;\n\treadonly onDidDestroyWindow: Event<ICodeWindow>;\n\n\topen(openConfig: IOpenConfiguration): Promise<ICodeWindow[]>;\n\topenEmptyWindow(\n\t\topenConfig: IOpenEmptyConfiguration,\n\t\toptions?: IOpenEmptyWindowOptions,\n\t): Promise<ICodeWindow[]>;\n\topenExtensionDevelopmentHostWindow(\n\t\textensionDevelopmentPath: string[],\n\t\topenConfig: IOpenConfiguration,\n\t): Promise<ICodeWindow[]>;\n\n\topenExistingWindow(\n\t\twindow: ICodeWindow,\n\t\topenConfig: IOpenConfiguration,\n\t): void;\n\n\tsendToFocused(channel: string, ...args: any[]): void;\n\tsendToOpeningWindow(channel: string, ...args: any[]): void;\n\tsendToAll(\n\t\tchannel: string,\n\t\tpayload?: any,\n\t\twindowIdsToIgnore?: number[],\n\t): void;\n\n\tgetWindows(): ICodeWindow[];\n\tgetWindowCount(): number;\n\n\tgetFocusedWindow(): ICodeWindow | undefined;\n\tgetLastActiveWindow(): ICodeWindow | undefined;\n\n\tgetWindowById(windowId: number): ICodeWindow | undefined;\n\tgetWindowByWebContents(\n\t\twebContents: electron.WebContents,\n\t): ICodeWindow | undefined;\n}\n\nexport interface IWindowsCountChangedEvent {\n\treadonly oldCount: number;\n\treadonly newCount: number;\n}\n\nexport enum OpenContext {\n\t// opening when running from the command line\n\tCLI = 0,\n\n\t// macOS only: opening from the dock (also when opening files to a running instance from desktop)\n\tDOCK = 1,\n\n\t// opening from the main application window\n\tMENU = 2,\n\n\t// opening from a file or folder dialog\n\tDIALOG = 3,\n\n\t// opening from the OS's UI\n\tDESKTOP = 4,\n\n\t// opening through the API\n\tAPI = 5,\n\n\t// opening from a protocol link\n\tLINK = 6,\n}\n\nexport interface IBaseOpenConfiguration {\n\treadonly context: OpenContext;\n\treadonly contextWindowId?: number;\n}\n\nexport interface IOpenConfiguration extends IBaseOpenConfiguration {\n\treadonly cli: NativeParsedArgs;\n\treadonly userEnv?: IProcessEnvironment;\n\treadonly urisToOpen?: IWindowOpenable[];\n\treadonly waitMarkerFileURI?: URI;\n\treadonly preferNewWindow?: boolean;\n\treadonly forceNewWindow?: boolean;\n\treadonly forceNewTabbedWindow?: boolean;\n\treadonly forceReuseWindow?: boolean;\n\treadonly forceEmpty?: boolean;\n\treadonly diffMode?: boolean;\n\treadonly mergeMode?: boolean;\n\taddMode?: boolean;\n\treadonly gotoLineMode?: boolean;\n\treadonly initialStartup?: boolean;\n\treadonly noRecentEntry?: boolean;\n\t/**\n\t * The remote authority to use when windows are opened with either\n\t * - no workspace (empty window)\n\t * - a workspace that is neither `file://` nor `vscode-remote://`\n\t */\n\treadonly remoteAuthority?: string;\n\treadonly forceProfile?: string;\n\treadonly forceTempProfile?: boolean;\n}\n\nexport interface IOpenEmptyConfiguration extends IBaseOpenConfiguration {}\n\nexport interface IDefaultBrowserWindowOptionsOverrides {\n\tforceNativeTitlebar?: boolean;\n\tdisableFullscreen?: boolean;\n}\n\nexport function defaultBrowserWindowOptions(\n\taccessor: ServicesAccessor,\n\twindowState: IWindowState,\n\toverrides?: IDefaultBrowserWindowOptionsOverrides,\n\twebPreferences?: electron.WebPreferences,\n): electron.BrowserWindowConstructorOptions & {\n\texperimentalDarkMode: boolean;\n} {\n\tconst themeMainService = accessor.get(IThemeMainService);\n\tconst productService = accessor.get(IProductService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\tconst environmentMainService = accessor.get(IEnvironmentMainService);\n\n\tconst windowSettings = configurationService.getValue<\n\t\tIWindowSettings | undefined\n\t>(\"window\");\n\n\tconst options: electron.BrowserWindowConstructorOptions & {\n\t\texperimentalDarkMode: boolean;\n\t} = {\n\t\tbackgroundColor: themeMainService.getBackgroundColor(),\n\t\tminWidth: WindowMinimumSize.WIDTH,\n\t\tminHeight: WindowMinimumSize.HEIGHT,\n\t\ttitle: productService.nameLong,\n\t\tshow:\n\t\t\twindowState.mode !== WindowMode.Maximized &&\n\t\t\twindowState.mode !== WindowMode.Fullscreen, // reduce flicker by showing later\n\t\tx: windowState.x,\n\t\ty: windowState.y,\n\t\twidth: windowState.width,\n\t\theight: windowState.height,\n\t\twebPreferences: {\n\t\t\t...webPreferences,\n\t\t\tenableWebSQL: false,\n\t\t\tspellcheck: false,\n\t\t\tzoomFactor: zoomLevelToZoomFactor(\n\t\t\t\twindowState.zoomLevel ?? windowSettings?.zoomLevel,\n\t\t\t),\n\t\t\tautoplayPolicy: \"user-gesture-required\",\n\t\t\t// Enable experimental css highlight api https://chromestatus.com/feature/5436441440026624\n\t\t\t// Refs https://github.com/microsoft/vscode/issues/140098\n\t\t\tenableBlinkFeatures: \"HighlightAPI\",\n\t\t\tsandbox: true,\n\t\t},\n\t\texperimentalDarkMode: true,\n\t};\n\n\tif (isLinux) {\n\t\toptions.icon = join(\n\t\t\tenvironmentMainService.appRoot,\n\t\t\t\"resources/linux/code.png\",\n\t\t); // always on Linux\n\t} else if (isWindows && !environmentMainService.isBuilt) {\n\t\toptions.icon = join(\n\t\t\tenvironmentMainService.appRoot,\n\t\t\t\"resources/win32/code_150x150.png\",\n\t\t); // only when running out of sources on Windows\n\t}\n\n\tif (isMacintosh) {\n\t\toptions.acceptFirstMouse = true; // enabled by default\n\n\t\tif (windowSettings?.clickThroughInactive === false) {\n\t\t\toptions.acceptFirstMouse = false;\n\t\t}\n\t}\n\n\tif (overrides?.disableFullscreen) {\n\t\toptions.fullscreen = false;\n\t} else if (isMacintosh && !useNativeFullScreen(configurationService)) {\n\t\toptions.fullscreenable = false; // enables simple fullscreen mode\n\t}\n\n\tconst useNativeTabs = isMacintosh && windowSettings?.nativeTabs === true;\n\tif (useNativeTabs) {\n\t\toptions.tabbingIdentifier = productService.nameShort; // this opts in to sierra tabs\n\t}\n\n\tconst hideNativeTitleBar = !hasNativeTitlebar(\n\t\tconfigurationService,\n\t\toverrides?.forceNativeTitlebar ? TitlebarStyle.NATIVE : undefined,\n\t);\n\tif (hideNativeTitleBar) {\n\t\toptions.titleBarStyle = \"hidden\";\n\t\tif (!isMacintosh) {\n\t\t\toptions.frame = false;\n\t\t}\n\n\t\tif (useWindowControlsOverlay(configurationService)) {\n\t\t\t// This logic will not perfectly guess the right colors\n\t\t\t// to use on initialization, but prefer to keep things\n\t\t\t// simple as it is temporary and not noticeable\n\n\t\t\tconst titleBarColor =\n\t\t\t\tthemeMainService.getWindowSplash()?.colorInfo\n\t\t\t\t\t.titleBarBackground ??\n\t\t\t\tthemeMainService.getBackgroundColor();\n\t\t\tconst symbolColor = Color.fromHex(titleBarColor).isDarker()\n\t\t\t\t? \"#FFFFFF\"\n\t\t\t\t: \"#000000\";\n\n\t\t\toptions.titleBarOverlay = {\n\t\t\t\theight: 29, // the smallest size of the title bar on windows accounting for the border on windows 11\n\t\t\t\tcolor: titleBarColor,\n\t\t\t\tsymbolColor,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn options;\n}\n\nexport function getLastFocused(windows: ICodeWindow[]): ICodeWindow | undefined;\nexport function getLastFocused(\n\twindows: IAuxiliaryWindow[],\n): IAuxiliaryWindow | undefined;\nexport function getLastFocused(\n\twindows: ICodeWindow[] | IAuxiliaryWindow[],\n): ICodeWindow | IAuxiliaryWindow | undefined {\n\tlet lastFocusedWindow: ICodeWindow | IAuxiliaryWindow | undefined;\n\tlet maxLastFocusTime = Number.MIN_VALUE;\n\n\tfor (const window of windows) {\n\t\tif (window.lastFocusTime > maxLastFocusTime) {\n\t\t\tmaxLastFocusTime = window.lastFocusTime;\n\t\t\tlastFocusedWindow = window;\n\t\t}\n\t}\n\n\treturn lastFocusedWindow;\n}\n\nexport namespace WindowStateValidator {\n\texport function validateWindowState(\n\t\tlogService: ILogService,\n\t\tstate: IWindowState,\n\t\tdisplays = electron.screen.getAllDisplays(),\n\t): IWindowState | undefined {\n\t\tlogService.trace(\n\t\t\t`window#validateWindowState: validating window state on ${displays.length} display(s)`,\n\t\t\tstate,\n\t\t);\n\n\t\tif (\n\t\t\ttypeof state.x !== \"number\" ||\n\t\t\ttypeof state.y !== \"number\" ||\n\t\t\ttypeof state.width !== \"number\" ||\n\t\t\ttypeof state.height !== \"number\"\n\t\t) {\n\t\t\tlogService.trace(\n\t\t\t\t\"window#validateWindowState: unexpected type of state values\",\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (state.width <= 0 || state.height <= 0) {\n\t\t\tlogService.trace(\n\t\t\t\t\"window#validateWindowState: unexpected negative values\",\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Single Monitor: be strict about x/y positioning\n\t\t// macOS & Linux: these OS seem to be pretty good in ensuring that a window is never outside of it's bounds.\n\t\t// Windows: it is possible to have a window with a size that makes it fall out of the window. our strategy\n\t\t//          is to try as much as possible to keep the window in the monitor bounds. we are not as strict as\n\t\t//          macOS and Linux and allow the window to exceed the monitor bounds as long as the window is still\n\t\t//          some pixels (128) visible on the screen for the user to drag it back.\n\t\tif (displays.length === 1) {\n\t\t\tconst displayWorkingArea = getWorkingArea(displays[0]);\n\t\t\tlogService.trace(\n\t\t\t\t\"window#validateWindowState: single monitor working area\",\n\t\t\t\tdisplayWorkingArea,\n\t\t\t);\n\n\t\t\tif (displayWorkingArea) {\n\t\t\t\tfunction ensureStateInDisplayWorkingArea(): void {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!state ||\n\t\t\t\t\t\ttypeof state.x !== \"number\" ||\n\t\t\t\t\t\ttypeof state.y !== \"number\" ||\n\t\t\t\t\t\t!displayWorkingArea\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (state.x < displayWorkingArea.x) {\n\t\t\t\t\t\t// prevent window from falling out of the screen to the left\n\t\t\t\t\t\tstate.x = displayWorkingArea.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (state.y < displayWorkingArea.y) {\n\t\t\t\t\t\t// prevent window from falling out of the screen to the top\n\t\t\t\t\t\tstate.y = displayWorkingArea.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// ensure state is not outside display working area (top, left)\n\t\t\t\tensureStateInDisplayWorkingArea();\n\n\t\t\t\tif (state.width > displayWorkingArea.width) {\n\t\t\t\t\t// prevent window from exceeding display bounds width\n\t\t\t\t\tstate.width = displayWorkingArea.width;\n\t\t\t\t}\n\n\t\t\t\tif (state.height > displayWorkingArea.height) {\n\t\t\t\t\t// prevent window from exceeding display bounds height\n\t\t\t\t\tstate.height = displayWorkingArea.height;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tstate.x >\n\t\t\t\t\tdisplayWorkingArea.x + displayWorkingArea.width - 128\n\t\t\t\t) {\n\t\t\t\t\t// prevent window from falling out of the screen to the right with\n\t\t\t\t\t// 128px margin by positioning the window to the far right edge of\n\t\t\t\t\t// the screen\n\t\t\t\t\tstate.x =\n\t\t\t\t\t\tdisplayWorkingArea.x +\n\t\t\t\t\t\tdisplayWorkingArea.width -\n\t\t\t\t\t\tstate.width;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tstate.y >\n\t\t\t\t\tdisplayWorkingArea.y + displayWorkingArea.height - 128\n\t\t\t\t) {\n\t\t\t\t\t// prevent window from falling out of the screen to the bottom with\n\t\t\t\t\t// 128px margin by positioning the window to the far bottom edge of\n\t\t\t\t\t// the screen\n\t\t\t\t\tstate.y =\n\t\t\t\t\t\tdisplayWorkingArea.y +\n\t\t\t\t\t\tdisplayWorkingArea.height -\n\t\t\t\t\t\tstate.height;\n\t\t\t\t}\n\n\t\t\t\t// again ensure state is not outside display working area\n\t\t\t\t// (it may have changed from the previous validation step)\n\t\t\t\tensureStateInDisplayWorkingArea();\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\t// Multi Montior (fullscreen): try to find the previously used display\n\t\tif (state.display && state.mode === WindowMode.Fullscreen) {\n\t\t\tconst display = displays.find((d) => d.id === state.display);\n\t\t\tif (\n\t\t\t\tdisplay &&\n\t\t\t\ttypeof display.bounds?.x === \"number\" &&\n\t\t\t\ttypeof display.bounds?.y === \"number\"\n\t\t\t) {\n\t\t\t\tlogService.trace(\n\t\t\t\t\t\"window#validateWindowState: restoring fullscreen to previous display\",\n\t\t\t\t);\n\n\t\t\t\tconst defaults = defaultWindowState(WindowMode.Fullscreen); // make sure we have good values when the user restores the window\n\t\t\t\tdefaults.x = display.bounds.x; // carefull to use displays x/y position so that the window ends up on the correct monitor\n\t\t\t\tdefaults.y = display.bounds.y;\n\n\t\t\t\treturn defaults;\n\t\t\t}\n\t\t}\n\n\t\t// Multi Monitor (non-fullscreen): ensure window is within display bounds\n\t\tlet display: electron.Display | undefined;\n\t\tlet displayWorkingArea: electron.Rectangle | undefined;\n\t\ttry {\n\t\t\tdisplay = electron.screen.getDisplayMatching({\n\t\t\t\tx: state.x,\n\t\t\t\ty: state.y,\n\t\t\t\twidth: state.width,\n\t\t\t\theight: state.height,\n\t\t\t});\n\t\t\tdisplayWorkingArea = getWorkingArea(display);\n\n\t\t\tlogService.trace(\n\t\t\t\t\"window#validateWindowState: multi-monitor working area\",\n\t\t\t\tdisplayWorkingArea,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\t// Electron has weird conditions under which it throws errors\n\t\t\t// e.g. https://github.com/microsoft/vscode/issues/100334 when\n\t\t\t// large numbers are passed in\n\t\t\tlogService.error(\n\t\t\t\t\"window#validateWindowState: error finding display for window state\",\n\t\t\t\terror,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tdisplay && // we have a display matching the desired bounds\n\t\t\tdisplayWorkingArea && // we have valid working area bounds\n\t\t\tstate.x + state.width > displayWorkingArea.x && // prevent window from falling out of the screen to the left\n\t\t\tstate.y + state.height > displayWorkingArea.y && // prevent window from falling out of the screen to the top\n\t\t\tstate.x < displayWorkingArea.x + displayWorkingArea.width && // prevent window from falling out of the screen to the right\n\t\t\tstate.y < displayWorkingArea.y + displayWorkingArea.height // prevent window from falling out of the screen to the bottom\n\t\t) {\n\t\t\treturn state;\n\t\t}\n\n\t\tlogService.trace(\n\t\t\t\"window#validateWindowState: state is outside of the multi-monitor working area\",\n\t\t);\n\n\t\treturn undefined;\n\t}\n\n\tfunction getWorkingArea(\n\t\tdisplay: electron.Display,\n\t): electron.Rectangle | undefined {\n\t\t// Prefer the working area of the display to account for taskbars on the\n\t\t// desktop being positioned somewhere (https://github.com/microsoft/vscode/issues/50830).\n\t\t//\n\t\t// Linux X11 sessions sometimes report wrong display bounds, so we validate\n\t\t// the reported sizes are positive.\n\t\tif (display.workArea.width > 0 && display.workArea.height > 0) {\n\t\t\treturn display.workArea;\n\t\t}\n\n\t\tif (display.bounds.width > 0 && display.bounds.height > 0) {\n\t\t\treturn display.bounds;\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["OpenContext", "WindowStateValidator", "displayWorkingArea", "ensureStateInDisplayWorkingArea", "display"]
}
