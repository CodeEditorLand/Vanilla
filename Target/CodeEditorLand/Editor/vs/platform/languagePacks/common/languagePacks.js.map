{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/languagePacks/common/languagePacks.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { language } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IQuickPickItem } from '../../quickinput/common/quickInput.js';\nimport { localize } from '../../../nls.js';\nimport { IExtensionGalleryService, IGalleryExtension } from '../../extensionManagement/common/extensionManagement.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport function getLocale(extension: IGalleryExtension): string | undefined {\n\treturn extension.tags.find(t => t.startsWith('lp-'))?.split('lp-')[1];\n}\n\nexport const ILanguagePackService = createDecorator<ILanguagePackService>('languagePackService');\n\nexport interface ILanguagePackItem extends IQuickPickItem {\n\treadonly extensionId?: string;\n\treadonly galleryExtension?: IGalleryExtension;\n}\n\nexport interface ILanguagePackService {\n\treadonly _serviceBrand: undefined;\n\tgetAvailableLanguages(): Promise<Array<ILanguagePackItem>>;\n\tgetInstalledLanguages(): Promise<Array<ILanguagePackItem>>;\n\tgetBuiltInExtensionTranslationsUri(id: string, language: string): Promise<URI | undefined>;\n}\n\nexport abstract class LanguagePackBaseService extends Disposable implements ILanguagePackService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(@IExtensionGalleryService protected readonly extensionGalleryService: IExtensionGalleryService) {\n\t\tsuper();\n\t}\n\n\tabstract getBuiltInExtensionTranslationsUri(id: string, language: string): Promise<URI | undefined>;\n\n\tabstract getInstalledLanguages(): Promise<Array<ILanguagePackItem>>;\n\n\tasync getAvailableLanguages(): Promise<ILanguagePackItem[]> {\n\t\tconst timeout = new CancellationTokenSource();\n\t\tsetTimeout(() => timeout.cancel(), 1000);\n\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await this.extensionGalleryService.query({\n\t\t\t\ttext: 'category:\"language packs\"',\n\t\t\t\tpageSize: 20\n\t\t\t}, timeout.token);\n\t\t} catch (_) {\n\t\t\t// This method is best effort. So, we ignore any errors.\n\t\t\treturn [];\n\t\t}\n\n\t\tconst languagePackExtensions = result.firstPage.filter(e => e.properties.localizedLanguages?.length && e.tags.some(t => t.startsWith('lp-')));\n\t\tconst allFromMarketplace: ILanguagePackItem[] = languagePackExtensions.map(lp => {\n\t\t\tconst languageName = lp.properties.localizedLanguages?.[0];\n\t\t\tconst locale = getLocale(lp)!;\n\t\t\tconst baseQuickPick = this.createQuickPickItem(locale, languageName, lp);\n\t\t\treturn {\n\t\t\t\t...baseQuickPick,\n\t\t\t\textensionId: lp.identifier.id,\n\t\t\t\tgalleryExtension: lp\n\t\t\t};\n\t\t});\n\n\t\tallFromMarketplace.push(this.createQuickPickItem('en', 'English'));\n\n\t\treturn allFromMarketplace;\n\t}\n\n\tprotected createQuickPickItem(locale: string, languageName?: string, languagePack?: IGalleryExtension): IQuickPickItem {\n\t\tconst label = languageName ?? locale;\n\t\tlet description: string | undefined;\n\t\tif (label !== locale) {\n\t\t\tdescription = `(${locale})`;\n\t\t}\n\n\t\tif (locale.toLowerCase() === language.toLowerCase()) {\n\t\t\tdescription ??= '';\n\t\t\tdescription += localize('currentDisplayLanguage', \" (Current)\");\n\t\t}\n\n\t\tif (languagePack?.installCount) {\n\t\t\tdescription ??= '';\n\n\t\t\tconst count = languagePack.installCount;\n\t\t\tlet countLabel: string;\n\t\t\tif (count > 1000000) {\n\t\t\t\tcountLabel = `${Math.floor(count / 100000) / 10}M`;\n\t\t\t} else if (count > 1000) {\n\t\t\t\tcountLabel = `${Math.floor(count / 1000)}K`;\n\t\t\t} else {\n\t\t\t\tcountLabel = String(count);\n\t\t\t}\n\t\t\tdescription += ` $(cloud-download) ${countLabel}`;\n\t\t}\n\n\t\treturn {\n\t\t\tid: locale,\n\t\t\tlabel,\n\t\t\tdescription\n\t\t};\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,+BAA+B;AACxC,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,WAAW;AACpB,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AACzB,SAAS,0BAA0B,yBAAyB;AAC5D,SAAS,uBAAuB;AAEzB,SAAS,UAAU,WAAkD;AAC3E,SAAO,UAAU,KAAK,KAAK,OAAK,EAAE,WAAW,KAAK,CAAC,GAAG,MAAM,KAAK,EAAE,CAAC;AACrE;AAFgB;AAIT,MAAM,uBAAuB,gBAAsC,qBAAqB;AAcxF,IAAe,0BAAf,cAA+C,WAA2C;AAAA,EAGhG,YAAyD,yBAAmD;AAC3G,UAAM;AADkD;AAAA,EAEzD;AAAA,EArCD,OAgCiG;AAAA;AAAA;AAAA,EAWhG,MAAM,wBAAsD;AAC3D,UAAM,UAAU,IAAI,wBAAwB;AAC5C,eAAW,MAAM,QAAQ,OAAO,GAAG,GAAI;AAEvC,QAAI;AACJ,QAAI;AACH,eAAS,MAAM,KAAK,wBAAwB,MAAM;AAAA,QACjD,MAAM;AAAA,QACN,UAAU;AAAA,MACX,GAAG,QAAQ,KAAK;AAAA,IACjB,SAAS,GAAG;AAEX,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,yBAAyB,OAAO,UAAU,OAAO,OAAK,EAAE,WAAW,oBAAoB,UAAU,EAAE,KAAK,KAAK,OAAK,EAAE,WAAW,KAAK,CAAC,CAAC;AAC5I,UAAM,qBAA0C,uBAAuB,IAAI,QAAM;AAChF,YAAM,eAAe,GAAG,WAAW,qBAAqB,CAAC;AACzD,YAAM,SAAS,UAAU,EAAE;AAC3B,YAAM,gBAAgB,KAAK,oBAAoB,QAAQ,cAAc,EAAE;AACvE,aAAO;AAAA,QACN,GAAG;AAAA,QACH,aAAa,GAAG,WAAW;AAAA,QAC3B,kBAAkB;AAAA,MACnB;AAAA,IACD,CAAC;AAED,uBAAmB,KAAK,KAAK,oBAAoB,MAAM,SAAS,CAAC;AAEjE,WAAO;AAAA,EACR;AAAA,EAEU,oBAAoB,QAAgB,cAAuB,cAAkD;AACtH,UAAM,QAAQ,gBAAgB;AAC9B,QAAI;AACJ,QAAI,UAAU,QAAQ;AACrB,oBAAc,IAAI,MAAM;AAAA,IACzB;AAEA,QAAI,OAAO,YAAY,MAAM,SAAS,YAAY,GAAG;AACpD,sBAAgB;AAChB,qBAAe,SAAS,0BAA0B,YAAY;AAAA,IAC/D;AAEA,QAAI,cAAc,cAAc;AAC/B,sBAAgB;AAEhB,YAAM,QAAQ,aAAa;AAC3B,UAAI;AACJ,UAAI,QAAQ,KAAS;AACpB,qBAAa,GAAG,KAAK,MAAM,QAAQ,GAAM,IAAI,EAAE;AAAA,MAChD,WAAW,QAAQ,KAAM;AACxB,qBAAa,GAAG,KAAK,MAAM,QAAQ,GAAI,CAAC;AAAA,MACzC,OAAO;AACN,qBAAa,OAAO,KAAK;AAAA,MAC1B;AACA,qBAAe,sBAAsB,UAAU;AAAA,IAChD;AAEA,WAAO;AAAA,MACN,IAAI;AAAA,MACJ;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AA5EsB,0BAAf;AAAA,EAGO;AAAA,GAHQ;",
  "names": []
}
