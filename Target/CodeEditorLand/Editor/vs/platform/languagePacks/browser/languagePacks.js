var v=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=(a,t,r,e)=>{for(var n=e>1?void 0:e?x(t,r):t,o=a.length-1,s;o>=0;o--)(s=a[o])&&(n=(e?s(t,r,n):s(n))||n);return e&&n&&v(t,r,n),n},l=(a,t)=>(r,e)=>t(r,e,a);import{CancellationTokenSource as g}from"../../../base/common/cancellation.js";import{URI as I}from"../../../base/common/uri.js";import{IExtensionGalleryService as S}from"../../extensionManagement/common/extensionManagement.js";import{IExtensionResourceLoaderService as h}from"../../extensionResourceLoader/common/extensionResourceLoader.js";import{LanguagePackBaseService as y}from"../common/languagePacks.js";import{ILogService as L}from"../../log/common/log.js";let u=class extends y{constructor(r,e,n){super(e);this.extensionResourceLoaderService=r;this.logService=n}async getBuiltInExtensionTranslationsUri(r,e){const n=new g;setTimeout(()=>n.cancel(),1e3);let o;try{o=await this.extensionGalleryService.query({text:`tag:"lp-${e}"`,pageSize:5},n.token)}catch(i){this.logService.error(i);return}const s=o.firstPage.find(i=>i.properties.localizedLanguages?.length);if(!s){this.logService.trace(`No language pack found for language ${e}`);return}const p=new g;setTimeout(()=>n.cancel(),1e3);const c=await this.extensionGalleryService.getManifest(s,p.token),d=c?.contributes?.localizations?.find(i=>i.languageId===e)?.translations.find(i=>i.id===r);if(!d){this.logService.trace(`No translation found for id '${r}, in ${c?.name}`);return}const m=this.extensionResourceLoaderService.getExtensionGalleryResourceURL({name:c.name,publisher:c.publisher,version:c.version});if(!m){this.logService.trace("Gallery does not provide extension resources.");return}return I.joinPath(m,d.path)}getInstalledLanguages(){return Promise.resolve([])}};u=f([l(0,h),l(1,S),l(2,L)],u);export{u as WebLanguagePacksService};
