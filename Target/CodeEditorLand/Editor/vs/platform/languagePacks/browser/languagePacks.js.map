{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/languagePacks/browser/languagePacks.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IExtensionGalleryService } from '../../extensionManagement/common/extensionManagement.js';\nimport { IExtensionResourceLoaderService } from '../../extensionResourceLoader/common/extensionResourceLoader.js';\nimport { ILanguagePackItem, LanguagePackBaseService } from '../common/languagePacks.js';\nimport { ILogService } from '../../log/common/log.js';\n\nexport class WebLanguagePacksService extends LanguagePackBaseService {\n\tconstructor(\n\t\t@IExtensionResourceLoaderService private readonly extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(extensionGalleryService);\n\t}\n\n\tasync getBuiltInExtensionTranslationsUri(id: string, language: string): Promise<URI | undefined> {\n\n\t\tconst queryTimeout = new CancellationTokenSource();\n\t\tsetTimeout(() => queryTimeout.cancel(), 1000);\n\n\t\t// First get the extensions that supports the language (there should only be one but just in case let's include more results)\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await this.extensionGalleryService.query({\n\t\t\t\ttext: `tag:\"lp-${language}\"`,\n\t\t\t\tpageSize: 5\n\t\t\t}, queryTimeout.token);\n\t\t} catch (err) {\n\t\t\tthis.logService.error(err);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst languagePackExtensions = result.firstPage.find(e => e.properties.localizedLanguages?.length);\n\t\tif (!languagePackExtensions) {\n\t\t\tthis.logService.trace(`No language pack found for language ${language}`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Then get the manifest for that extension\n\t\tconst manifestTimeout = new CancellationTokenSource();\n\t\tsetTimeout(() => queryTimeout.cancel(), 1000);\n\t\tconst manifest = await this.extensionGalleryService.getManifest(languagePackExtensions, manifestTimeout.token);\n\n\t\t// Find the translation from the language pack\n\t\tconst localization = manifest?.contributes?.localizations?.find(l => l.languageId === language);\n\t\tconst translation = localization?.translations.find(t => t.id === id);\n\t\tif (!translation) {\n\t\t\tthis.logService.trace(`No translation found for id '${id}, in ${manifest?.name}`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// get the resource uri and return it\n\t\tconst uri = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({\n\t\t\t// If translation is defined then manifest should have been defined.\n\t\t\tname: manifest!.name,\n\t\t\tpublisher: manifest!.publisher,\n\t\t\tversion: manifest!.version\n\t\t});\n\t\tif (!uri) {\n\t\t\tthis.logService.trace('Gallery does not provide extension resources.');\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn URI.joinPath(uri, translation.path);\n\t}\n\n\t// Web doesn't have a concept of language packs, so we just return an empty array\n\tgetInstalledLanguages(): Promise<ILanguagePackItem[]> {\n\t\treturn Promise.resolve([]);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,+BAA+B;AACxC,SAAS,WAAW;AACpB,SAAS,gCAAgC;AACzC,SAAS,uCAAuC;AAChD,SAAS,mBAAmB,+BAA+B;AAC3D,SAAS,mBAAmB;AAErB,IAAM,0BAAN,cAAsC,wBAAwB;AAAA,EACpE,YACmD,gCACxB,yBACI,YAC7B;AACD,UAAM,uBAAuB;AAJqB;AAEpB;AAAA,EAG/B;AAAA,EAnBD,OAYqE;AAAA;AAAA;AAAA,EASpE,MAAM,mCAAmC,IAAY,UAA4C;AAEhG,UAAM,eAAe,IAAI,wBAAwB;AACjD,eAAW,MAAM,aAAa,OAAO,GAAG,GAAI;AAG5C,QAAI;AACJ,QAAI;AACH,eAAS,MAAM,KAAK,wBAAwB,MAAM;AAAA,QACjD,MAAM,WAAW,QAAQ;AAAA,QACzB,UAAU;AAAA,MACX,GAAG,aAAa,KAAK;AAAA,IACtB,SAAS,KAAK;AACb,WAAK,WAAW,MAAM,GAAG;AACzB,aAAO;AAAA,IACR;AAEA,UAAM,yBAAyB,OAAO,UAAU,KAAK,OAAK,EAAE,WAAW,oBAAoB,MAAM;AACjG,QAAI,CAAC,wBAAwB;AAC5B,WAAK,WAAW,MAAM,uCAAuC,QAAQ,EAAE;AACvE,aAAO;AAAA,IACR;AAGA,UAAM,kBAAkB,IAAI,wBAAwB;AACpD,eAAW,MAAM,aAAa,OAAO,GAAG,GAAI;AAC5C,UAAM,WAAW,MAAM,KAAK,wBAAwB,YAAY,wBAAwB,gBAAgB,KAAK;AAG7G,UAAM,eAAe,UAAU,aAAa,eAAe,KAAK,OAAK,EAAE,eAAe,QAAQ;AAC9F,UAAM,cAAc,cAAc,aAAa,KAAK,OAAK,EAAE,OAAO,EAAE;AACpE,QAAI,CAAC,aAAa;AACjB,WAAK,WAAW,MAAM,gCAAgC,EAAE,QAAQ,UAAU,IAAI,EAAE;AAChF,aAAO;AAAA,IACR;AAGA,UAAM,MAAM,KAAK,+BAA+B,+BAA+B;AAAA;AAAA,MAE9E,MAAM,SAAU;AAAA,MAChB,WAAW,SAAU;AAAA,MACrB,SAAS,SAAU;AAAA,IACpB,CAAC;AACD,QAAI,CAAC,KAAK;AACT,WAAK,WAAW,MAAM,+CAA+C;AACrE,aAAO;AAAA,IACR;AAEA,WAAO,IAAI,SAAS,KAAK,YAAY,IAAI;AAAA,EAC1C;AAAA;AAAA,EAGA,wBAAsD;AACrD,WAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,EAC1B;AACD;AAhEa,0BAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,GAJU;",
  "names": []
}
