var P=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var f=(s,r,i,t)=>{for(var e=t>1?void 0:t?k(r,i):r,n=s.length-1,a;n>=0;n--)(a=s[n])&&(e=(t?a(r,i,e):a(e))||e);return t&&e&&P(r,i,e),e},o=(s,r)=>(i,t)=>r(i,t,s);import{createHash as v}from"crypto";import*as L from"fs";import{equals as x}from"../../../base/common/arrays.js";import{Queue as y}from"../../../base/common/async.js";import{Disposable as E}from"../../../base/common/lifecycle.js";import{Schemas as b}from"../../../base/common/network.js";import{join as h}from"../../../base/common/path.js";import{URI as S}from"../../../base/common/uri.js";import{Promises as w}from"../../../base/node/pfs.js";import{INativeEnvironmentService as d}from"../../environment/common/environment.js";import{IExtensionGalleryService as F,IExtensionManagementService as j}from"../../extensionManagement/common/extensionManagement.js";import{areSameExtensions as p}from"../../extensionManagement/common/extensionManagementUtil.js";import{ILogService as I}from"../../log/common/log.js";import{LanguagePackBaseService as z}from"../common/languagePacks.js";let u=class extends z{constructor(i,t,e,n){super(e);this.extensionManagementService=i;this.logService=n;this.cache=this._register(new g(t,n)),this.extensionManagementService.registerParticipant({postInstall:async a=>this.postInstallExtension(a),postUninstall:async a=>this.postUninstallExtension(a)})}cache;async getBuiltInExtensionTranslationsUri(i,t){const n=(await this.cache.getLanguagePacks())[t];if(!n){this.logService.warn(`No language pack found for ${t}`);return}const a=n.translations[i];return a?S.file(a):void 0}async getInstalledLanguages(){const i=await this.cache.getLanguagePacks(),t=Object.keys(i).map(e=>{const n=i[e];return{...this.createQuickPickItem(e,n.label),extensionId:n.extensions[0].extensionIdentifier.id}});return t.push(this.createQuickPickItem("en","English")),t.sort((e,n)=>e.label.localeCompare(n.label)),t}async postInstallExtension(i){i&&i.manifest&&i.manifest.contributes&&i.manifest.contributes.localizations&&i.manifest.contributes.localizations.length&&(this.logService.info("Adding language packs from the extension",i.identifier.id),await this.update())}async postUninstallExtension(i){const t=await this.cache.getLanguagePacks();Object.keys(t).some(e=>t[e]&&t[e].extensions.some(n=>p(n.extensionIdentifier,i.identifier)))&&(this.logService.info("Removing language packs from the extension",i.identifier.id),await this.update())}async update(){const[i,t]=await Promise.all([this.cache.getLanguagePacks(),this.extensionManagementService.getInstalled()]),e=await this.cache.update(t);return!x(Object.keys(i),Object.keys(e))}};u=f([o(0,j),o(1,d),o(2,F),o(3,I)],u);let g=class extends E{constructor(i,t){super();this.logService=t;this.languagePacksFilePath=h(i.userDataPath,"languagepacks.json"),this.languagePacksFileLimiter=new y}languagePacks={};languagePacksFilePath;languagePacksFileLimiter;initializedCache;getLanguagePacks(){return this.languagePacksFileLimiter.size||!this.initializedCache?this.withLanguagePacks().then(()=>this.languagePacks):Promise.resolve(this.languagePacks)}update(i){return this.withLanguagePacks(t=>{Object.keys(t).forEach(e=>delete t[e]),this.createLanguagePacksFromExtensions(t,...i)}).then(()=>this.languagePacks)}createLanguagePacksFromExtensions(i,...t){for(const e of t)e&&e.manifest&&e.manifest.contributes&&e.manifest.contributes.localizations&&e.manifest.contributes.localizations.length&&this.createLanguagePacksFromExtension(i,e);Object.keys(i).forEach(e=>this.updateHash(i[e]))}createLanguagePacksFromExtension(i,t){const e=t.identifier,n=t.manifest.contributes&&t.manifest.contributes.localizations?t.manifest.contributes.localizations:[];for(const a of n)if(t.location.scheme===b.file&&N(a)){let c=i[a.languageId];c||(c={hash:"",extensions:[],translations:{},label:a.localizedLanguageName??a.languageName},i[a.languageId]=c);const m=c.extensions.filter(l=>p(l.extensionIdentifier,e))[0];m?m.version=t.manifest.version:c.extensions.push({extensionIdentifier:e,version:t.manifest.version});for(const l of a.translations)c.translations[l.id]=h(t.location.fsPath,l.path)}}updateHash(i){if(i){const t=v("md5");for(const e of i.extensions)t.update(e.extensionIdentifier.uuid||e.extensionIdentifier.id).update(e.version);i.hash=t.digest("hex")}}withLanguagePacks(i=()=>null){return this.languagePacksFileLimiter.queue(()=>{let t=null;return L.promises.readFile(this.languagePacksFilePath,"utf8").then(void 0,e=>e.code==="ENOENT"?Promise.resolve("{}"):Promise.reject(e)).then(e=>{try{return JSON.parse(e)}catch{return{}}}).then(e=>(t=i(e),e)).then(e=>{for(const a of Object.keys(e))e[a]||delete e[a];this.languagePacks=e,this.initializedCache=!0;const n=JSON.stringify(this.languagePacks);return this.logService.debug("Writing language packs",n),w.writeFile(this.languagePacksFilePath,n)}).then(()=>t,e=>this.logService.error(e))})}};g=f([o(0,d),o(1,I)],g);function N(s){if(typeof s.languageId!="string"||!Array.isArray(s.translations)||s.translations.length===0)return!1;for(const r of s.translations)if(typeof r.id!="string"||typeof r.path!="string")return!1;return!(s.languageName&&typeof s.languageName!="string"||s.localizedLanguageName&&typeof s.localizedLanguageName!="string")}export{u as NativeLanguagePackService};
