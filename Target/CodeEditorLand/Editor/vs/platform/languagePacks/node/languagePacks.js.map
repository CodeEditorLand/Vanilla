{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/languagePacks/node/languagePacks.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { createHash } from 'crypto';\nimport { equals } from '../../../base/common/arrays.js';\nimport { Queue } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { join } from '../../../base/common/path.js';\nimport { Promises } from '../../../base/node/pfs.js';\nimport { INativeEnvironmentService } from '../../environment/common/environment.js';\nimport { IExtensionGalleryService, IExtensionIdentifier, IExtensionManagementService, ILocalExtension } from '../../extensionManagement/common/extensionManagement.js';\nimport { areSameExtensions } from '../../extensionManagement/common/extensionManagementUtil.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { ILocalizationContribution } from '../../extensions/common/extensions.js';\nimport { ILanguagePackItem, LanguagePackBaseService } from '../common/languagePacks.js';\nimport { URI } from '../../../base/common/uri.js';\n\ninterface ILanguagePack {\n\thash: string;\n\tlabel: string | undefined;\n\textensions: {\n\t\textensionIdentifier: IExtensionIdentifier;\n\t\tversion: string;\n\t}[];\n\ttranslations: { [id: string]: string };\n}\n\nexport class NativeLanguagePackService extends LanguagePackBaseService {\n\tprivate readonly cache: LanguagePacksCache;\n\n\tconstructor(\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(extensionGalleryService);\n\t\tthis.cache = this._register(new LanguagePacksCache(environmentService, logService));\n\t\tthis.extensionManagementService.registerParticipant({\n\t\t\tpostInstall: async (extension: ILocalExtension): Promise<void> => {\n\t\t\t\treturn this.postInstallExtension(extension);\n\t\t\t},\n\t\t\tpostUninstall: async (extension: ILocalExtension): Promise<void> => {\n\t\t\t\treturn this.postUninstallExtension(extension);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync getBuiltInExtensionTranslationsUri(id: string, language: string): Promise<URI | undefined> {\n\t\tconst packs = await this.cache.getLanguagePacks();\n\t\tconst pack = packs[language];\n\t\tif (!pack) {\n\t\t\tthis.logService.warn(`No language pack found for ${language}`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst translation = pack.translations[id];\n\t\treturn translation ? URI.file(translation) : undefined;\n\t}\n\n\tasync getInstalledLanguages(): Promise<Array<ILanguagePackItem>> {\n\t\tconst languagePacks = await this.cache.getLanguagePacks();\n\t\tconst languages: ILanguagePackItem[] = Object.keys(languagePacks).map(locale => {\n\t\t\tconst languagePack = languagePacks[locale];\n\t\t\tconst baseQuickPick = this.createQuickPickItem(locale, languagePack.label);\n\t\t\treturn {\n\t\t\t\t...baseQuickPick,\n\t\t\t\textensionId: languagePack.extensions[0].extensionIdentifier.id,\n\t\t\t};\n\t\t});\n\t\tlanguages.push(this.createQuickPickItem('en', 'English'));\n\t\tlanguages.sort((a, b) => a.label.localeCompare(b.label));\n\t\treturn languages;\n\t}\n\n\tprivate async postInstallExtension(extension: ILocalExtension): Promise<void> {\n\t\tif (extension && extension.manifest && extension.manifest.contributes && extension.manifest.contributes.localizations && extension.manifest.contributes.localizations.length) {\n\t\t\tthis.logService.info('Adding language packs from the extension', extension.identifier.id);\n\t\t\tawait this.update();\n\t\t}\n\t}\n\n\tprivate async postUninstallExtension(extension: ILocalExtension): Promise<void> {\n\t\tconst languagePacks = await this.cache.getLanguagePacks();\n\t\tif (Object.keys(languagePacks).some(language => languagePacks[language] && languagePacks[language].extensions.some(e => areSameExtensions(e.extensionIdentifier, extension.identifier)))) {\n\t\t\tthis.logService.info('Removing language packs from the extension', extension.identifier.id);\n\t\t\tawait this.update();\n\t\t}\n\t}\n\n\tasync update(): Promise<boolean> {\n\t\tconst [current, installed] = await Promise.all([this.cache.getLanguagePacks(), this.extensionManagementService.getInstalled()]);\n\t\tconst updated = await this.cache.update(installed);\n\t\treturn !equals(Object.keys(current), Object.keys(updated));\n\t}\n}\n\nclass LanguagePacksCache extends Disposable {\n\n\tprivate languagePacks: { [language: string]: ILanguagePack } = {};\n\tprivate languagePacksFilePath: string;\n\tprivate languagePacksFileLimiter: Queue<any>;\n\tprivate initializedCache: boolean | undefined;\n\n\tconstructor(\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.languagePacksFilePath = join(environmentService.userDataPath, 'languagepacks.json');\n\t\tthis.languagePacksFileLimiter = new Queue();\n\t}\n\n\tgetLanguagePacks(): Promise<{ [language: string]: ILanguagePack }> {\n\t\t// if queue is not empty, fetch from disk\n\t\tif (this.languagePacksFileLimiter.size || !this.initializedCache) {\n\t\t\treturn this.withLanguagePacks()\n\t\t\t\t.then(() => this.languagePacks);\n\t\t}\n\t\treturn Promise.resolve(this.languagePacks);\n\t}\n\n\tupdate(extensions: ILocalExtension[]): Promise<{ [language: string]: ILanguagePack }> {\n\t\treturn this.withLanguagePacks(languagePacks => {\n\t\t\tObject.keys(languagePacks).forEach(language => delete languagePacks[language]);\n\t\t\tthis.createLanguagePacksFromExtensions(languagePacks, ...extensions);\n\t\t}).then(() => this.languagePacks);\n\t}\n\n\tprivate createLanguagePacksFromExtensions(languagePacks: { [language: string]: ILanguagePack }, ...extensions: ILocalExtension[]): void {\n\t\tfor (const extension of extensions) {\n\t\t\tif (extension && extension.manifest && extension.manifest.contributes && extension.manifest.contributes.localizations && extension.manifest.contributes.localizations.length) {\n\t\t\t\tthis.createLanguagePacksFromExtension(languagePacks, extension);\n\t\t\t}\n\t\t}\n\t\tObject.keys(languagePacks).forEach(languageId => this.updateHash(languagePacks[languageId]));\n\t}\n\n\tprivate createLanguagePacksFromExtension(languagePacks: { [language: string]: ILanguagePack }, extension: ILocalExtension): void {\n\t\tconst extensionIdentifier = extension.identifier;\n\t\tconst localizations = extension.manifest.contributes && extension.manifest.contributes.localizations ? extension.manifest.contributes.localizations : [];\n\t\tfor (const localizationContribution of localizations) {\n\t\t\tif (extension.location.scheme === Schemas.file && isValidLocalization(localizationContribution)) {\n\t\t\t\tlet languagePack = languagePacks[localizationContribution.languageId];\n\t\t\t\tif (!languagePack) {\n\t\t\t\t\tlanguagePack = {\n\t\t\t\t\t\thash: '',\n\t\t\t\t\t\textensions: [],\n\t\t\t\t\t\ttranslations: {},\n\t\t\t\t\t\tlabel: localizationContribution.localizedLanguageName ?? localizationContribution.languageName\n\t\t\t\t\t};\n\t\t\t\t\tlanguagePacks[localizationContribution.languageId] = languagePack;\n\t\t\t\t}\n\t\t\t\tconst extensionInLanguagePack = languagePack.extensions.filter(e => areSameExtensions(e.extensionIdentifier, extensionIdentifier))[0];\n\t\t\t\tif (extensionInLanguagePack) {\n\t\t\t\t\textensionInLanguagePack.version = extension.manifest.version;\n\t\t\t\t} else {\n\t\t\t\t\tlanguagePack.extensions.push({ extensionIdentifier, version: extension.manifest.version });\n\t\t\t\t}\n\t\t\t\tfor (const translation of localizationContribution.translations) {\n\t\t\t\t\tlanguagePack.translations[translation.id] = join(extension.location.fsPath, translation.path);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateHash(languagePack: ILanguagePack): void {\n\t\tif (languagePack) {\n\t\t\tconst md5 = createHash('md5'); // CodeQL [SM04514] Used to create an hash for language pack extension version, which is not a security issue\n\t\t\tfor (const extension of languagePack.extensions) {\n\t\t\t\tmd5.update(extension.extensionIdentifier.uuid || extension.extensionIdentifier.id).update(extension.version); // CodeQL [SM01510] The extension UUID is not sensitive info and is not manually created by a user\n\t\t\t}\n\t\t\tlanguagePack.hash = md5.digest('hex');\n\t\t}\n\t}\n\n\tprivate withLanguagePacks<T>(fn: (languagePacks: { [language: string]: ILanguagePack }) => T | null = () => null): Promise<T> {\n\t\treturn this.languagePacksFileLimiter.queue(() => {\n\t\t\tlet result: T | null = null;\n\t\t\treturn fs.promises.readFile(this.languagePacksFilePath, 'utf8')\n\t\t\t\t.then(undefined, err => err.code === 'ENOENT' ? Promise.resolve('{}') : Promise.reject(err))\n\t\t\t\t.then<{ [language: string]: ILanguagePack }>(raw => { try { return JSON.parse(raw); } catch (e) { return {}; } })\n\t\t\t\t.then(languagePacks => { result = fn(languagePacks); return languagePacks; })\n\t\t\t\t.then(languagePacks => {\n\t\t\t\t\tfor (const language of Object.keys(languagePacks)) {\n\t\t\t\t\t\tif (!languagePacks[language]) {\n\t\t\t\t\t\t\tdelete languagePacks[language];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.languagePacks = languagePacks;\n\t\t\t\t\tthis.initializedCache = true;\n\t\t\t\t\tconst raw = JSON.stringify(this.languagePacks);\n\t\t\t\t\tthis.logService.debug('Writing language packs', raw);\n\t\t\t\t\treturn Promises.writeFile(this.languagePacksFilePath, raw);\n\t\t\t\t})\n\t\t\t\t.then(() => result, error => this.logService.error(error));\n\t\t});\n\t}\n}\n\nfunction isValidLocalization(localization: ILocalizationContribution): boolean {\n\tif (typeof localization.languageId !== 'string') {\n\t\treturn false;\n\t}\n\tif (!Array.isArray(localization.translations) || localization.translations.length === 0) {\n\t\treturn false;\n\t}\n\tfor (const translation of localization.translations) {\n\t\tif (typeof translation.id !== 'string') {\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof translation.path !== 'string') {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (localization.languageName && typeof localization.languageName !== 'string') {\n\t\treturn false;\n\t}\n\tif (localization.localizedLanguageName && typeof localization.localizedLanguageName !== 'string') {\n\t\treturn false;\n\t}\n\treturn true;\n}\n"],
  "mappings": "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",
  "names": []
}
