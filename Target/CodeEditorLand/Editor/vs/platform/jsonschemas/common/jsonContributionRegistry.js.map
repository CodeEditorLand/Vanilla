{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/jsonschemas/common/jsonContributionRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { getCompressedContent, IJSONSchema } from '../../../base/common/jsonSchema.js';\nimport * as platform from '../../registry/common/platform.js';\n\nexport const Extensions = {\n\tJSONContribution: 'base.contributions.json'\n};\n\nexport interface ISchemaContributions {\n\tschemas: { [id: string]: IJSONSchema };\n}\n\nexport interface IJSONContributionRegistry {\n\n\treadonly onDidChangeSchema: Event<string>;\n\n\t/**\n\t * Register a schema to the registry.\n\t */\n\tregisterSchema(uri: string, unresolvedSchemaContent: IJSONSchema): void;\n\n\n\t/**\n\t * Notifies all listeners that the content of the given schema has changed.\n\t * @param uri The id of the schema\n\t */\n\tnotifySchemaChanged(uri: string): void;\n\n\t/**\n\t * Get all schemas\n\t */\n\tgetSchemaContributions(): ISchemaContributions;\n\n\t/**\n\t * Gets the (compressed) content of the schema with the given schema ID (if any)\n\t * @param uri The id of the schema\n\t */\n\tgetSchemaContent(uri: string): string | undefined;\n\n\t/**\n\t * Returns true if there's a schema that matches the given schema ID\n\t * @param uri The id of the schema\n\t */\n\thasSchemaContent(uri: string): boolean;\n}\n\n\n\nfunction normalizeId(id: string) {\n\tif (id.length > 0 && id.charAt(id.length - 1) === '#') {\n\t\treturn id.substring(0, id.length - 1);\n\t}\n\treturn id;\n}\n\n\n\nclass JSONContributionRegistry implements IJSONContributionRegistry {\n\n\tprivate schemasById: { [id: string]: IJSONSchema };\n\n\tprivate readonly _onDidChangeSchema = new Emitter<string>();\n\treadonly onDidChangeSchema: Event<string> = this._onDidChangeSchema.event;\n\n\tconstructor() {\n\t\tthis.schemasById = {};\n\t}\n\n\tpublic registerSchema(uri: string, unresolvedSchemaContent: IJSONSchema): void {\n\t\tthis.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\n\t\tthis._onDidChangeSchema.fire(uri);\n\t}\n\n\tpublic notifySchemaChanged(uri: string): void {\n\t\tthis._onDidChangeSchema.fire(uri);\n\t}\n\n\tpublic getSchemaContributions(): ISchemaContributions {\n\t\treturn {\n\t\t\tschemas: this.schemasById,\n\t\t};\n\t}\n\n\tpublic getSchemaContent(uri: string): string | undefined {\n\t\tconst schema = this.schemasById[uri];\n\t\treturn schema ? getCompressedContent(schema) : undefined;\n\t}\n\n\tpublic hasSchemaContent(uri: string): boolean {\n\t\treturn !!this.schemasById[uri];\n\t}\n\n}\n\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,sBAAsB,mBAAmB;AAClD,YAAY,cAAc;AAEnB,MAAM,aAAa;AAAA,EACzB,kBAAkB;AACnB;AA0CA,SAAS,YAAY,IAAY;AAChC,MAAI,GAAG,SAAS,KAAK,GAAG,OAAO,GAAG,SAAS,CAAC,MAAM,KAAK;AACtD,WAAO,GAAG,UAAU,GAAG,GAAG,SAAS,CAAC;AAAA,EACrC;AACA,SAAO;AACR;AALS;AAST,MAAM,yBAA8D;AAAA,EA9DpE,OA8DoE;AAAA;AAAA;AAAA,EAE3D;AAAA,EAES,qBAAqB,IAAI,QAAgB;AAAA,EACjD,oBAAmC,KAAK,mBAAmB;AAAA,EAEpE,cAAc;AACb,SAAK,cAAc,CAAC;AAAA,EACrB;AAAA,EAEO,eAAe,KAAa,yBAA4C;AAC9E,SAAK,YAAY,YAAY,GAAG,CAAC,IAAI;AACrC,SAAK,mBAAmB,KAAK,GAAG;AAAA,EACjC;AAAA,EAEO,oBAAoB,KAAmB;AAC7C,SAAK,mBAAmB,KAAK,GAAG;AAAA,EACjC;AAAA,EAEO,yBAA+C;AACrD,WAAO;AAAA,MACN,SAAS,KAAK;AAAA,IACf;AAAA,EACD;AAAA,EAEO,iBAAiB,KAAiC;AACxD,UAAM,SAAS,KAAK,YAAY,GAAG;AACnC,WAAO,SAAS,qBAAqB,MAAM,IAAI;AAAA,EAChD;AAAA,EAEO,iBAAiB,KAAsB;AAC7C,WAAO,CAAC,CAAC,KAAK,YAAY,GAAG;AAAA,EAC9B;AAED;AAEA,MAAM,2BAA2B,IAAI,yBAAyB;AAC9D,SAAS,SAAS,IAAI,WAAW,kBAAkB,wBAAwB;",
  "names": []
}
