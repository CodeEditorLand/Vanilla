import{DataTransfers as g}from"../../../base/browser/dnd.js";import"../../../base/browser/mouseEvent.js";import{mainWindow as F}from"../../../base/browser/window.js";import{coalesce as D}from"../../../base/common/arrays.js";import{DeferredPromise as m}from"../../../base/common/async.js";import{VSBuffer as I}from"../../../base/common/buffer.js";import{ResourceMap as S}from"../../../base/common/map.js";import{parse as A}from"../../../base/common/marshalling.js";import{Schemas as y}from"../../../base/common/network.js";import{isWeb as v}from"../../../base/common/platform.js";import{URI as l}from"../../../base/common/uri.js";import{localize as w}from"../../../nls.js";import{IDialogService as b}from"../../dialogs/common/dialogs.js";import"../../editor/common/editor.js";import{HTMLFileSystemProvider as R}from"../../files/browser/htmlFileSystemProvider.js";import{WebFileSystemAccess as u}from"../../files/browser/webFileSystemAccess.js";import{ByteSize as x,IFileService as C}from"../../files/common/files.js";import{IInstantiationService as P}from"../../instantiation/common/instantiation.js";import{extractSelection as L}from"../../opener/common/opener.js";import{Registry as T}from"../../registry/common/platform.js";const h={EDITORS:"CodeEditors",FILES:"CodeFiles"};function O(t){const e=[];if(t.dataTransfer&&t.dataTransfer.types.length>0){const r=t.dataTransfer.getData(h.EDITORS);if(r)try{e.push(...A(r))}catch{}else try{const o=t.dataTransfer.getData(g.RESOURCES);e.push(...N(o))}catch{}if(t.dataTransfer?.files)for(let o=0;o<t.dataTransfer.files.length;o++){const c=t.dataTransfer.files[o];if(c&&c.path)try{e.push({resource:l.file(c.path),isExternal:!0,allowWorkspaceOpen:!0})}catch{}}const s=t.dataTransfer.getData(h.FILES);if(s)try{const o=JSON.parse(s);for(const c of o)e.push({resource:l.file(c),isExternal:!0,allowWorkspaceOpen:!0})}catch{}const i=T.as(E.DragAndDropContribution).getAll();for(const o of i){const c=t.dataTransfer.getData(o.dataFormatKey);if(c)try{e.push(...o.getEditorInputs(c))}catch{}}}const a=[],n=new S;for(const r of e)r.resource?n.has(r.resource)||(a.push(r),n.set(r.resource,!0)):a.push(r);return a}async function de(t,e){const a=O(e);if(e.dataTransfer&&v&&H(e,g.FILES)&&e.dataTransfer.items){const s=await t.get(P).invokeFunction(i=>k(i,e));for(const i of s)a.push({resource:i.resource,contents:i.contents?.toString(),isExternal:!0,allowWorkspaceOpen:i.isDirectory})}return a}function N(t){const e=[];if(t){const a=JSON.parse(t);for(const n of a)if(n.indexOf(":")>0){const{selection:r,uri:s}=L(l.parse(n));e.push({resource:s,options:{selection:r}})}}return e}async function k(t,e){if(u.supported(F)){const n=e.dataTransfer?.items;if(n)return B(t,n)}const a=e.dataTransfer?.files;return a?W(t,a):[]}async function B(t,e){const a=t.get(C).getProvider(y.file);if(!(a instanceof R))return[];const n=[];for(let r=0;r<e.length;r++){const s=e[r];if(s){const i=new m;n.push(i),(async()=>{try{const o=await s.getAsFileSystemHandle();if(!o){i.complete(void 0);return}u.isFileSystemFileHandle(o)?i.complete({resource:await a.registerFileHandle(o),isDirectory:!1}):u.isFileSystemDirectoryHandle(o)?i.complete({resource:await a.registerDirectoryHandle(o),isDirectory:!0}):i.complete(void 0)}catch{i.complete(void 0)}})()}}return D(await Promise.all(n.map(r=>r.p)))}async function W(t,e){const a=t.get(b),n=[];for(let r=0;r<e.length;r++){const s=e.item(r);if(s){if(s.size>100*x.MB){a.warn(w("fileTooLarge","File is too large to open as untitled editor. Please upload it first into the file explorer and then try again."));continue}const i=new m;n.push(i);const o=new FileReader;o.onerror=()=>i.complete(void 0),o.onabort=()=>i.complete(void 0),o.onload=async c=>{const d=s.name,f=c.target?.result??void 0;if(typeof d!="string"||typeof f>"u"){i.complete(void 0);return}i.complete({resource:l.from({scheme:y.untitled,path:d}),contents:typeof f=="string"?I.fromString(f):I.wrap(new Uint8Array(f))})},o.readAsArrayBuffer(s)}}return D(await Promise.all(n.map(r=>r.p)))}function H(t,...e){if(!t.dataTransfer)return!1;const a=t.dataTransfer.types,n=[];for(let r=0;r<a.length;r++)n.push(a[r].toLowerCase());for(const r of e)if(n.indexOf(r.toLowerCase())>=0)return!0;return!1}class M{_contributions=new Map;register(e){if(this._contributions.has(e.dataFormatKey))throw new Error(`A drag and drop contributiont with key '${e.dataFormatKey}' was already registered.`);this._contributions.set(e.dataFormatKey,e)}getAll(){return this._contributions.values()}}const E={DragAndDropContribution:"workbench.contributions.dragAndDrop"};T.add(E.DragAndDropContribution,new M);class p{static INSTANCE=new p;data;proto;constructor(){}static getInstance(){return p.INSTANCE}hasData(e){return e&&e===this.proto}clearData(e){this.hasData(e)&&(this.proto=void 0,this.data=void 0)}getData(e){if(this.hasData(e))return this.data}setData(e,a){a&&(this.data=e,this.proto=a)}}export{h as CodeDataTransfers,E as Extensions,p as LocalSelectionTransfer,H as containsDragType,N as createDraggedEditorInputFromRawResourcesData,de as extractEditorsAndFilesDropData,O as extractEditorsDropData,W as extractFileListData};
