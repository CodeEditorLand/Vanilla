{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/dnd/browser/dnd.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DataTransfers } from '../../../base/browser/dnd.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { DragMouseEvent } from '../../../base/browser/mouseEvent.js';\nimport { coalesce } from '../../../base/common/arrays.js';\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { parse } from '../../../base/common/marshalling.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { isWeb } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IBaseTextResourceEditorInput } from '../../editor/common/editor.js';\nimport { HTMLFileSystemProvider } from '../../files/browser/htmlFileSystemProvider.js';\nimport { WebFileSystemAccess } from '../../files/browser/webFileSystemAccess.js';\nimport { ByteSize, IFileService } from '../../files/common/files.js';\nimport { IInstantiationService, ServicesAccessor } from '../../instantiation/common/instantiation.js';\nimport { extractSelection } from '../../opener/common/opener.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nexport interface FileAdditionalNativeProperties {\n\t/**\n\t * The real path to the file on the users filesystem. Only available on electron.\n\t */\n\treadonly path?: string;\n}\n\n\n//#region Editor / Resources DND\n\nexport const CodeDataTransfers = {\n\tEDITORS: 'CodeEditors',\n\tFILES: 'CodeFiles'\n};\n\nexport interface IDraggedResourceEditorInput extends IBaseTextResourceEditorInput {\n\tresource: URI | undefined;\n\n\t/**\n\t * A hint that the source of the dragged editor input\n\t * might not be the application but some external tool.\n\t */\n\tisExternal?: boolean;\n\n\t/**\n\t * Whether we probe for the dropped editor to be a workspace\n\t * (i.e. code-workspace file or even a folder), allowing to\n\t * open it as workspace instead of opening as editor.\n\t */\n\tallowWorkspaceOpen?: boolean;\n}\n\nexport function extractEditorsDropData(e: DragEvent): Array<IDraggedResourceEditorInput> {\n\tconst editors: IDraggedResourceEditorInput[] = [];\n\tif (e.dataTransfer && e.dataTransfer.types.length > 0) {\n\n\t\t// Data Transfer: Code Editors\n\t\tconst rawEditorsData = e.dataTransfer.getData(CodeDataTransfers.EDITORS);\n\t\tif (rawEditorsData) {\n\t\t\ttry {\n\t\t\t\teditors.push(...parse(rawEditorsData));\n\t\t\t} catch (error) {\n\t\t\t\t// Invalid transfer\n\t\t\t}\n\t\t}\n\n\t\t// Data Transfer: Resources\n\t\telse {\n\t\t\ttry {\n\t\t\t\tconst rawResourcesData = e.dataTransfer.getData(DataTransfers.RESOURCES);\n\t\t\t\teditors.push(...createDraggedEditorInputFromRawResourcesData(rawResourcesData));\n\t\t\t} catch (error) {\n\t\t\t\t// Invalid transfer\n\t\t\t}\n\t\t}\n\n\t\t// Check for native file transfer\n\t\tif (e.dataTransfer?.files) {\n\t\t\tfor (let i = 0; i < e.dataTransfer.files.length; i++) {\n\t\t\t\tconst file = e.dataTransfer.files[i];\n\t\t\t\tif (file && (file as FileAdditionalNativeProperties).path /* Electron only */) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\teditors.push({ resource: URI.file((file as FileAdditionalNativeProperties).path!), isExternal: true, allowWorkspaceOpen: true });\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Invalid URI\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for CodeFiles transfer\n\t\tconst rawCodeFiles = e.dataTransfer.getData(CodeDataTransfers.FILES);\n\t\tif (rawCodeFiles) {\n\t\t\ttry {\n\t\t\t\tconst codeFiles: string[] = JSON.parse(rawCodeFiles);\n\t\t\t\tfor (const codeFile of codeFiles) {\n\t\t\t\t\teditors.push({ resource: URI.file(codeFile), isExternal: true, allowWorkspaceOpen: true });\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Invalid transfer\n\t\t\t}\n\t\t}\n\n\t\t// Workbench contributions\n\t\tconst contributions = Registry.as<IDragAndDropContributionRegistry>(Extensions.DragAndDropContribution).getAll();\n\t\tfor (const contribution of contributions) {\n\t\t\tconst data = e.dataTransfer.getData(contribution.dataFormatKey);\n\t\t\tif (data) {\n\t\t\t\ttry {\n\t\t\t\t\teditors.push(...contribution.getEditorInputs(data));\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Invalid transfer\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Prevent duplicates: it is possible that we end up with the same\n\t// dragged editor multiple times because multiple data transfers\n\t// are being used (https://github.com/microsoft/vscode/issues/128925)\n\n\tconst coalescedEditors: IDraggedResourceEditorInput[] = [];\n\tconst seen = new ResourceMap<boolean>();\n\tfor (const editor of editors) {\n\t\tif (!editor.resource) {\n\t\t\tcoalescedEditors.push(editor);\n\t\t} else if (!seen.has(editor.resource)) {\n\t\t\tcoalescedEditors.push(editor);\n\t\t\tseen.set(editor.resource, true);\n\t\t}\n\t}\n\n\treturn coalescedEditors;\n}\n\nexport async function extractEditorsAndFilesDropData(accessor: ServicesAccessor, e: DragEvent): Promise<Array<IDraggedResourceEditorInput>> {\n\tconst editors = extractEditorsDropData(e);\n\n\t// Web: Check for file transfer\n\tif (e.dataTransfer && isWeb && containsDragType(e, DataTransfers.FILES)) {\n\t\tconst files = e.dataTransfer.items;\n\t\tif (files) {\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst filesData = await instantiationService.invokeFunction(accessor => extractFilesDropData(accessor, e));\n\t\t\tfor (const fileData of filesData) {\n\t\t\t\teditors.push({ resource: fileData.resource, contents: fileData.contents?.toString(), isExternal: true, allowWorkspaceOpen: fileData.isDirectory });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn editors;\n}\n\nexport function createDraggedEditorInputFromRawResourcesData(rawResourcesData: string | undefined): IDraggedResourceEditorInput[] {\n\tconst editors: IDraggedResourceEditorInput[] = [];\n\n\tif (rawResourcesData) {\n\t\tconst resourcesRaw: string[] = JSON.parse(rawResourcesData);\n\t\tfor (const resourceRaw of resourcesRaw) {\n\t\t\tif (resourceRaw.indexOf(':') > 0) { // mitigate https://github.com/microsoft/vscode/issues/124946\n\t\t\t\tconst { selection, uri } = extractSelection(URI.parse(resourceRaw));\n\t\t\t\teditors.push({ resource: uri, options: { selection } });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn editors;\n}\n\n\ninterface IFileTransferData {\n\tresource: URI;\n\tisDirectory?: boolean;\n\tcontents?: VSBuffer;\n}\n\nasync function extractFilesDropData(accessor: ServicesAccessor, event: DragEvent): Promise<IFileTransferData[]> {\n\n\t// Try to extract via `FileSystemHandle`\n\tif (WebFileSystemAccess.supported(mainWindow)) {\n\t\tconst items = event.dataTransfer?.items;\n\t\tif (items) {\n\t\t\treturn extractFileTransferData(accessor, items);\n\t\t}\n\t}\n\n\t// Try to extract via `FileList`\n\tconst files = event.dataTransfer?.files;\n\tif (!files) {\n\t\treturn [];\n\t}\n\n\treturn extractFileListData(accessor, files);\n}\n\nasync function extractFileTransferData(accessor: ServicesAccessor, items: DataTransferItemList): Promise<IFileTransferData[]> {\n\tconst fileSystemProvider = accessor.get(IFileService).getProvider(Schemas.file);\n\t// eslint-disable-next-line no-restricted-syntax\n\tif (!(fileSystemProvider instanceof HTMLFileSystemProvider)) {\n\t\treturn []; // only supported when running in web\n\t}\n\n\tconst results: DeferredPromise<IFileTransferData | undefined>[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst file = items[i];\n\t\tif (file) {\n\t\t\tconst result = new DeferredPromise<IFileTransferData | undefined>();\n\t\t\tresults.push(result);\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst handle = await file.getAsFileSystemHandle();\n\t\t\t\t\tif (!handle) {\n\t\t\t\t\t\tresult.complete(undefined);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (WebFileSystemAccess.isFileSystemFileHandle(handle)) {\n\t\t\t\t\t\tresult.complete({\n\t\t\t\t\t\t\tresource: await fileSystemProvider.registerFileHandle(handle),\n\t\t\t\t\t\t\tisDirectory: false\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (WebFileSystemAccess.isFileSystemDirectoryHandle(handle)) {\n\t\t\t\t\t\tresult.complete({\n\t\t\t\t\t\t\tresource: await fileSystemProvider.registerDirectoryHandle(handle),\n\t\t\t\t\t\t\tisDirectory: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.complete(undefined);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tresult.complete(undefined);\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t}\n\n\treturn coalesce(await Promise.all(results.map(result => result.p)));\n}\n\nexport async function extractFileListData(accessor: ServicesAccessor, files: FileList): Promise<IFileTransferData[]> {\n\tconst dialogService = accessor.get(IDialogService);\n\n\tconst results: DeferredPromise<IFileTransferData | undefined>[] = [];\n\n\tfor (let i = 0; i < files.length; i++) {\n\t\tconst file = files.item(i);\n\t\tif (file) {\n\n\t\t\t// Skip for very large files because this operation is unbuffered\n\t\t\tif (file.size > 100 * ByteSize.MB) {\n\t\t\t\tdialogService.warn(localize('fileTooLarge', \"File is too large to open as untitled editor. Please upload it first into the file explorer and then try again.\"));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst result = new DeferredPromise<IFileTransferData | undefined>();\n\t\t\tresults.push(result);\n\n\t\t\tconst reader = new FileReader();\n\n\t\t\treader.onerror = () => result.complete(undefined);\n\t\t\treader.onabort = () => result.complete(undefined);\n\n\t\t\treader.onload = async event => {\n\t\t\t\tconst name = file.name;\n\t\t\t\tconst loadResult = event.target?.result ?? undefined;\n\t\t\t\tif (typeof name !== 'string' || typeof loadResult === 'undefined') {\n\t\t\t\t\tresult.complete(undefined);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.complete({\n\t\t\t\t\tresource: URI.from({ scheme: Schemas.untitled, path: name }),\n\t\t\t\t\tcontents: typeof loadResult === 'string' ? VSBuffer.fromString(loadResult) : VSBuffer.wrap(new Uint8Array(loadResult))\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// Start reading\n\t\t\treader.readAsArrayBuffer(file);\n\t\t}\n\t}\n\n\treturn coalesce(await Promise.all(results.map(result => result.p)));\n}\n\n//#endregion\n\nexport function containsDragType(event: DragEvent, ...dragTypesToFind: string[]): boolean {\n\tif (!event.dataTransfer) {\n\t\treturn false;\n\t}\n\n\tconst dragTypes = event.dataTransfer.types;\n\tconst lowercaseDragTypes: string[] = [];\n\tfor (let i = 0; i < dragTypes.length; i++) {\n\t\tlowercaseDragTypes.push(dragTypes[i].toLowerCase()); // somehow the types are lowercase\n\t}\n\n\tfor (const dragType of dragTypesToFind) {\n\t\tif (lowercaseDragTypes.indexOf(dragType.toLowerCase()) >= 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n//#region DND contributions\n\nexport interface IResourceStat {\n\tresource: URI;\n\tisDirectory?: boolean;\n}\n\nexport interface IDragAndDropContributionRegistry {\n\t/**\n\t * Registers a drag and drop contribution.\n\t */\n\tregister(contribution: IDragAndDropContribution): void;\n\n\t/**\n\t * Returns all registered drag and drop contributions.\n\t */\n\tgetAll(): IterableIterator<IDragAndDropContribution>;\n}\n\ninterface IDragAndDropContribution {\n\treadonly dataFormatKey: string;\n\tgetEditorInputs(data: string): IDraggedResourceEditorInput[];\n\tsetData(resources: IResourceStat[], event: DragMouseEvent | DragEvent): void;\n}\n\nclass DragAndDropContributionRegistry implements IDragAndDropContributionRegistry {\n\tprivate readonly _contributions = new Map<string, IDragAndDropContribution>();\n\n\tregister(contribution: IDragAndDropContribution): void {\n\t\tif (this._contributions.has(contribution.dataFormatKey)) {\n\t\t\tthrow new Error(`A drag and drop contributiont with key '${contribution.dataFormatKey}' was already registered.`);\n\t\t}\n\t\tthis._contributions.set(contribution.dataFormatKey, contribution);\n\t}\n\n\tgetAll(): IterableIterator<IDragAndDropContribution> {\n\t\treturn this._contributions.values();\n\t}\n}\n\nexport const Extensions = {\n\tDragAndDropContribution: 'workbench.contributions.dragAndDrop'\n};\n\nRegistry.add(Extensions.DragAndDropContribution, new DragAndDropContributionRegistry());\n\n//#endregion\n\n//#region DND Utilities\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n\n\tprivate static readonly INSTANCE = new LocalSelectionTransfer();\n\n\tprivate data?: T[];\n\tprivate proto?: T;\n\n\tprivate constructor() {\n\t\t// protect against external instantiation\n\t}\n\n\tstatic getInstance<T>(): LocalSelectionTransfer<T> {\n\t\treturn LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n\t}\n\n\thasData(proto: T): boolean {\n\t\treturn proto && proto === this.proto;\n\t}\n\n\tclearData(proto: T): void {\n\t\tif (this.hasData(proto)) {\n\t\t\tthis.proto = undefined;\n\t\t\tthis.data = undefined;\n\t\t}\n\t}\n\n\tgetData(proto: T): T[] | undefined {\n\t\tif (this.hasData(proto)) {\n\t\t\treturn this.data;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tsetData(data: T[], proto: T): void {\n\t\tif (proto) {\n\t\t\tthis.data = data;\n\t\t\tthis.proto = proto;\n\t\t}\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["accessor"]
}
