{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/accessibility/browser/accessibleView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IKeyboardEvent } from '../../keybinding/common/keybinding.js';\nimport { IPickerQuickAccessItem } from '../../quickinput/browser/pickerQuickAccess.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IAction } from '../../../base/common/actions.js';\nimport { IQuickPickItem } from '../../quickinput/common/quickInput.js';\nimport { IDisposable, Disposable } from '../../../base/common/lifecycle.js';\n\nexport const IAccessibleViewService = createDecorator<IAccessibleViewService>('accessibleViewService');\n\nexport const enum AccessibleViewProviderId {\n\tTerminal = 'terminal',\n\tTerminalChat = 'terminal-chat',\n\tTerminalHelp = 'terminal-help',\n\tDiffEditor = 'diffEditor',\n\tChat = 'panelChat',\n\tInlineChat = 'inlineChat',\n\tInlineCompletions = 'inlineCompletions',\n\tKeybindingsEditor = 'keybindingsEditor',\n\tNotebook = 'notebook',\n\tEditor = 'editor',\n\tHover = 'hover',\n\tNotification = 'notification',\n\tEmptyEditorHint = 'emptyEditorHint',\n\tComments = 'comments',\n\tRepl = 'repl',\n\tReplHelp = 'replHelp',\n\tRunAndDebug = 'runAndDebug',\n\tWalkthrough = 'walkthrough',\n}\n\nexport const enum AccessibleViewType {\n\tHelp = 'help',\n\tView = 'view'\n}\n\nexport const enum NavigationType {\n\tPrevious = 'previous',\n\tNext = 'next'\n}\n\nexport interface IAccessibleViewOptions {\n\treadMoreUrl?: string;\n\t/**\n\t * Defaults to markdown\n\t */\n\tlanguage?: string;\n\ttype: AccessibleViewType;\n\t/**\n\t * By default, places the cursor on the top line of the accessible view.\n\t * If set to 'initial-bottom', places the cursor on the bottom line of the accessible view and preserves it henceforth.\n\t * If set to 'bottom', places the cursor on the bottom line of the accessible view.\n\t */\n\tposition?: 'bottom' | 'initial-bottom';\n\t/**\n\t * @returns a string that will be used as the content of the help dialog\n\t * instead of the one provided by default.\n\t */\n\tcustomHelp?: () => string;\n\t/**\n\t * If this provider might want to request to be shown again, provide an ID.\n\t */\n\tid?: AccessibleViewProviderId;\n\n\t/**\n\t * Keybinding items to configure\n\t */\n\tconfigureKeybindingItems?: IQuickPickItem[];\n\n\t/**\n\t * Keybinding items that are already configured\n\t */\n\tconfiguredKeybindingItems?: IQuickPickItem[];\n}\n\n\nexport interface IAccessibleViewContentProvider extends IBasicContentProvider, IDisposable {\n\tid: AccessibleViewProviderId;\n\tverbositySettingKey: string;\n\t/**\n\t * Note that a Codicon class should be provided for each action.\n\t * If not, a default will be used.\n\t */\n\tonKeyDown?(e: IKeyboardEvent): void;\n\t/**\n\t * When the language is markdown, this is provided by default.\n\t */\n\tgetSymbols?(): IAccessibleViewSymbol[];\n\t/**\n\t * Note that this will only take effect if the provider has an ID.\n\t */\n\tonDidRequestClearLastProvider?: Event<AccessibleViewProviderId>;\n}\n\n\nexport interface IAccessibleViewSymbol extends IPickerQuickAccessItem {\n\tmarkdownToParse?: string;\n\tfirstListItem?: string;\n\tlineNumber?: number;\n\tendLineNumber?: number;\n}\n\nexport interface IPosition {\n\tlineNumber: number;\n\tcolumn: number;\n}\n\nexport interface IAccessibleViewService {\n\treadonly _serviceBrand: undefined;\n\t// The provider will be disposed when the view is closed\n\tshow(provider: AccesibleViewContentProvider, position?: IPosition): void;\n\tshowLastProvider(id: AccessibleViewProviderId): void;\n\tshowAccessibleViewHelp(): void;\n\tnext(): void;\n\tprevious(): void;\n\tnavigateToCodeBlock(type: 'next' | 'previous'): void;\n\tgoToSymbol(): void;\n\tdisableHint(): void;\n\tgetPosition(id: AccessibleViewProviderId): IPosition | undefined;\n\tsetPosition(position: IPosition, reveal?: boolean, select?: boolean): void;\n\tgetLastPosition(): IPosition | undefined;\n\t/**\n\t * If the setting is enabled, provides the open accessible view hint as a localized string.\n\t * @param verbositySettingKey The setting key for the verbosity of the feature\n\t */\n\tgetOpenAriaHint(verbositySettingKey: string): string | null;\n\tgetCodeBlockContext(): ICodeBlockActionContext | undefined;\n\tconfigureKeybindings(unassigned: boolean): void;\n\topenHelpLink(): void;\n}\n\n\nexport interface ICodeBlockActionContext {\n\tcode: string;\n\tlanguageId?: string;\n\tcodeBlockIndex: number;\n\telement: unknown;\n}\n\nexport type AccesibleViewContentProvider = AccessibleContentProvider | ExtensionContentProvider;\n\nexport class AccessibleContentProvider extends Disposable implements IAccessibleViewContentProvider {\n\n\tconstructor(\n\t\tpublic id: AccessibleViewProviderId,\n\t\tpublic options: IAccessibleViewOptions,\n\t\tpublic provideContent: () => string,\n\t\tpublic onClose: () => void,\n\t\tpublic verbositySettingKey: string,\n\t\tpublic onOpen?: () => void,\n\t\tpublic actions?: IAction[],\n\t\tpublic provideNextContent?: () => string | undefined,\n\t\tpublic providePreviousContent?: () => string | undefined,\n\t\tpublic onDidChangeContent?: Event<void>,\n\t\tpublic onKeyDown?: (e: IKeyboardEvent) => void,\n\t\tpublic getSymbols?: () => IAccessibleViewSymbol[],\n\t\tpublic onDidRequestClearLastProvider?: Event<AccessibleViewProviderId>,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport class ExtensionContentProvider extends Disposable implements IBasicContentProvider {\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic options: IAccessibleViewOptions,\n\t\tpublic provideContent: () => string,\n\t\tpublic onClose: () => void,\n\t\tpublic onOpen?: () => void,\n\t\tpublic provideNextContent?: () => string | undefined,\n\t\tpublic providePreviousContent?: () => string | undefined,\n\t\tpublic actions?: IAction[],\n\t\tpublic onDidChangeContent?: Event<void>,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport interface IBasicContentProvider extends IDisposable {\n\tid: string;\n\toptions: IAccessibleViewOptions;\n\tonClose(): void;\n\tprovideContent(): string;\n\tonOpen?(): void;\n\tactions?: IAction[];\n\tprovidePreviousContent?(): void;\n\tprovideNextContent?(): void;\n\tonDidChangeContent?: Event<void>;\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,8BAA8B;AACvC,SAAS,aAAa;AACtB,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAC/B,SAAS,aAAa,kBAAkB;AAEjC,MAAM,yBAAyB,gBAAwC,uBAAuB;AAE9F,IAAW,2BAAX,kBAAWA,8BAAX;AACN,EAAAA,0BAAA,cAAW;AACX,EAAAA,0BAAA,kBAAe;AACf,EAAAA,0BAAA,kBAAe;AACf,EAAAA,0BAAA,gBAAa;AACb,EAAAA,0BAAA,UAAO;AACP,EAAAA,0BAAA,gBAAa;AACb,EAAAA,0BAAA,uBAAoB;AACpB,EAAAA,0BAAA,uBAAoB;AACpB,EAAAA,0BAAA,cAAW;AACX,EAAAA,0BAAA,YAAS;AACT,EAAAA,0BAAA,WAAQ;AACR,EAAAA,0BAAA,kBAAe;AACf,EAAAA,0BAAA,qBAAkB;AAClB,EAAAA,0BAAA,cAAW;AACX,EAAAA,0BAAA,UAAO;AACP,EAAAA,0BAAA,cAAW;AACX,EAAAA,0BAAA,iBAAc;AACd,EAAAA,0BAAA,iBAAc;AAlBG,SAAAA;AAAA,GAAA;AAqBX,IAAW,qBAAX,kBAAWC,wBAAX;AACN,EAAAA,oBAAA,UAAO;AACP,EAAAA,oBAAA,UAAO;AAFU,SAAAA;AAAA,GAAA;AAKX,IAAW,iBAAX,kBAAWC,oBAAX;AACN,EAAAA,gBAAA,cAAW;AACX,EAAAA,gBAAA,UAAO;AAFU,SAAAA;AAAA,GAAA;AAyGX,MAAM,kCAAkC,WAAqD;AAAA,EAEnG,YACQ,IACA,SACA,gBACA,SACA,qBACA,QACA,SACA,oBACA,wBACA,oBACA,WACA,YACA,+BACN;AACD,UAAM;AAdC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,EAGR;AAAA,EApKD,OAkJoG;AAAA;AAAA;AAmBpG;AAEO,MAAM,iCAAiC,WAA4C;AAAA,EAEzF,YACiB,IACT,SACA,gBACA,SACA,QACA,oBACA,wBACA,SACA,oBACN;AACD,UAAM;AAVU;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,EAGR;AAAA,EArLD,OAuK0F;AAAA;AAAA;AAe1F;",
  "names": ["AccessibleViewProviderId", "AccessibleViewType", "NavigationType"]
}
