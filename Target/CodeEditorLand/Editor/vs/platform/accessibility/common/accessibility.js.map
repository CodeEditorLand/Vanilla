{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/accessibility/common/accessibility.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport { RawContextKey } from \"../../contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport const IAccessibilityService = createDecorator<IAccessibilityService>(\n\t\"accessibilityService\",\n);\n\nexport interface IAccessibilityService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeScreenReaderOptimized: Event<void>;\n\treadonly onDidChangeReducedMotion: Event<void>;\n\n\talwaysUnderlineAccessKeys(): Promise<boolean>;\n\tisScreenReaderOptimized(): boolean;\n\tisMotionReduced(): boolean;\n\tgetAccessibilitySupport(): AccessibilitySupport;\n\tsetAccessibilitySupport(accessibilitySupport: AccessibilitySupport): void;\n\talert(message: string): void;\n\tstatus(message: string): void;\n}\n\nexport enum AccessibilitySupport {\n\t/**\n\t * This should be the browser case where it is not known if a screen reader is attached or no.\n\t */\n\tUnknown = 0,\n\n\tDisabled = 1,\n\n\tEnabled = 2,\n}\n\nexport const CONTEXT_ACCESSIBILITY_MODE_ENABLED = new RawContextKey<boolean>(\n\t\"accessibilityModeEnabled\",\n\tfalse,\n);\n\nexport interface IAccessibilityInformation {\n\tlabel: string;\n\trole?: string;\n}\n\nexport function isAccessibilityInformation(\n\tobj: any,\n): obj is IAccessibilityInformation {\n\treturn (\n\t\tobj &&\n\t\ttypeof obj === \"object\" &&\n\t\ttypeof obj.label === \"string\" &&\n\t\t(typeof obj.role === \"undefined\" || typeof obj.role === \"string\")\n\t);\n}\n\nexport const ACCESSIBLE_VIEW_SHOWN_STORAGE_PREFIX = \"ACCESSIBLE_VIEW_SHOWN_\";\n"],
  "mappings": ";;AAMA,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAEzB,MAAM,wBAAwB;AAAA,EACpC;AACD;AAiBO,IAAK,uBAAL,kBAAKA,0BAAL;AAIN,EAAAA,4CAAA,aAAU,KAAV;AAEA,EAAAA,4CAAA,cAAW,KAAX;AAEA,EAAAA,4CAAA,aAAU,KAAV;AARW,SAAAA;AAAA,GAAA;AAWL,MAAM,qCAAqC,IAAI;AAAA,EACrD;AAAA,EACA;AACD;AAOO,SAAS,2BACf,KACmC;AACnC,SACC,OACA,OAAO,QAAQ,YACf,OAAO,IAAI,UAAU,aACpB,OAAO,IAAI,SAAS,eAAe,OAAO,IAAI,SAAS;AAE1D;AATgB;AAWT,MAAM,uCAAuC;",
  "names": ["AccessibilitySupport"]
}
