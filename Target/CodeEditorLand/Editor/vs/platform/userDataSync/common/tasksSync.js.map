{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/tasksSync.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { AbstractFileSynchroniser, AbstractInitializer, IAcceptResult, IFileResourcePreview, IMergeResult } from './abstractSynchronizer.js';\nimport { Change, IRemoteUserData, IUserDataSyncLocalStoreService, IUserDataSyncConfiguration, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncStoreService, SyncResource, USER_DATA_SYNC_SCHEME } from './userDataSync.js';\n\ninterface ITasksSyncContent {\n\ttasks?: string;\n}\n\ninterface ITasksResourcePreview extends IFileResourcePreview {\n\tpreviewResult: IMergeResult;\n}\n\nexport function getTasksContentFromSyncContent(syncContent: string, logService: ILogService): string | null {\n\ttry {\n\t\tconst parsed = <ITasksSyncContent>JSON.parse(syncContent);\n\t\treturn parsed.tasks ?? null;\n\t} catch (e) {\n\t\tlogService.error(e);\n\t\treturn null;\n\t}\n}\n\nexport class TasksSynchroniser extends AbstractFileSynchroniser implements IUserDataSynchroniser {\n\n\tprotected readonly version: number = 1;\n\tprivate readonly previewResource: URI = this.extUri.joinPath(this.syncPreviewFolder, 'tasks.json');\n\tprivate readonly baseResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' });\n\tprivate readonly localResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' });\n\tprivate readonly remoteResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' });\n\tprivate readonly acceptedResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' });\n\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(profile.tasksResource, { syncResource: SyncResource.Tasks, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t}\n\n\tprotected async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, isRemoteDataFromCurrentMachine: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration): Promise<ITasksResourcePreview[]> {\n\t\tconst remoteContent = remoteUserData.syncData ? getTasksContentFromSyncContent(remoteUserData.syncData.content, this.logService) : null;\n\n\t\t// Use remote data as last sync data if last sync data does not exist and remote data is from same machine\n\t\tlastSyncUserData = lastSyncUserData === null && isRemoteDataFromCurrentMachine ? remoteUserData : lastSyncUserData;\n\t\tconst lastSyncContent: string | null = lastSyncUserData?.syncData ? getTasksContentFromSyncContent(lastSyncUserData.syncData.content, this.logService) : null;\n\n\t\t// Get file content last to get the latest\n\t\tconst fileContent = await this.getLocalFileContent();\n\n\t\tlet content: string | null = null;\n\t\tlet hasLocalChanged: boolean = false;\n\t\tlet hasRemoteChanged: boolean = false;\n\t\tlet hasConflicts: boolean = false;\n\n\t\tif (remoteUserData.syncData) {\n\t\t\tconst localContent = fileContent ? fileContent.value.toString() : null;\n\t\t\tif (!lastSyncContent // First time sync\n\t\t\t\t|| lastSyncContent !== localContent // Local has forwarded\n\t\t\t\t|| lastSyncContent !== remoteContent // Remote has forwarded\n\t\t\t) {\n\t\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Merging remote tasks with local tasks...`);\n\t\t\t\tconst result = merge(localContent, remoteContent, lastSyncContent);\n\t\t\t\tcontent = result.content;\n\t\t\t\thasConflicts = result.hasConflicts;\n\t\t\t\thasLocalChanged = result.hasLocalChanged;\n\t\t\t\thasRemoteChanged = result.hasRemoteChanged;\n\t\t\t}\n\t\t}\n\n\t\t// First time syncing to remote\n\t\telse if (fileContent) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Remote tasks does not exist. Synchronizing tasks for the first time.`);\n\t\t\tcontent = fileContent.value.toString();\n\t\t\thasRemoteChanged = true;\n\t\t}\n\n\t\tconst previewResult: IMergeResult = {\n\t\t\tcontent: hasConflicts ? lastSyncContent : content,\n\t\t\tlocalChange: hasLocalChanged ? fileContent ? Change.Modified : Change.Added : Change.None,\n\t\t\tremoteChange: hasRemoteChanged ? Change.Modified : Change.None,\n\t\t\thasConflicts\n\t\t};\n\n\t\tconst localContent = fileContent ? fileContent.value.toString() : null;\n\t\treturn [{\n\t\t\tfileContent,\n\n\t\t\tbaseResource: this.baseResource,\n\t\t\tbaseContent: lastSyncContent,\n\n\t\t\tlocalResource: this.localResource,\n\t\t\tlocalContent,\n\t\t\tlocalChange: previewResult.localChange,\n\n\t\t\tremoteResource: this.remoteResource,\n\t\t\tremoteContent,\n\t\t\tremoteChange: previewResult.remoteChange,\n\n\t\t\tpreviewResource: this.previewResource,\n\t\t\tpreviewResult,\n\t\t\tacceptedResource: this.acceptedResource,\n\t\t}];\n\n\t}\n\n\tprotected async hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean> {\n\t\tconst lastSyncContent: string | null = lastSyncUserData?.syncData ? getTasksContentFromSyncContent(lastSyncUserData.syncData.content, this.logService) : null;\n\t\tif (lastSyncContent === null) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst fileContent = await this.getLocalFileContent();\n\t\tconst localContent = fileContent ? fileContent.value.toString() : null;\n\t\tconst result = merge(localContent, lastSyncContent, lastSyncContent);\n\t\treturn result.hasLocalChanged || result.hasRemoteChanged;\n\t}\n\n\tprotected async getMergeResult(resourcePreview: ITasksResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\treturn resourcePreview.previewResult;\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: ITasksResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IAcceptResult> {\n\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqual(resource, this.localResource)) {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.fileContent ? resourcePreview.fileContent.value.toString() : null,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.Modified,\n\t\t\t};\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqual(resource, this.remoteResource)) {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocalChange: Change.Modified,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqual(resource, this.previewResource)) {\n\t\t\tif (content === undefined) {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: resourcePreview.previewResult.content,\n\t\t\t\t\tlocalChange: resourcePreview.previewResult.localChange,\n\t\t\t\t\tremoteChange: resourcePreview.previewResult.remoteChange,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tcontent,\n\t\t\t\t\tlocalChange: Change.Modified,\n\t\t\t\t\tremoteChange: Change.Modified,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [ITasksResourcePreview, IAcceptResult][], force: boolean): Promise<void> {\n\t\tconst { fileContent } = resourcePreviews[0][0];\n\t\tconst { content, localChange, remoteChange } = resourcePreviews[0][1];\n\n\t\tif (localChange === Change.None && remoteChange === Change.None) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing tasks.`);\n\t\t}\n\n\t\tif (localChange !== Change.None) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating local tasks...`);\n\t\t\tif (fileContent) {\n\t\t\t\tawait this.backupLocal(JSON.stringify(this.toTasksSyncContent(fileContent.value.toString())));\n\t\t\t}\n\t\t\tif (content) {\n\t\t\t\tawait this.updateLocalFileContent(content, fileContent, force);\n\t\t\t} else {\n\t\t\t\tawait this.deleteLocalFile();\n\t\t\t}\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated local tasks`);\n\t\t}\n\n\t\tif (remoteChange !== Change.None) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating remote tasks...`);\n\t\t\tconst remoteContents = JSON.stringify(this.toTasksSyncContent(content));\n\t\t\tremoteUserData = await this.updateRemoteUserData(remoteContents, force ? null : remoteUserData.ref);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated remote tasks`);\n\t\t}\n\n\t\t// Delete the preview\n\t\ttry {\n\t\t\tawait this.fileService.del(this.previewResource);\n\t\t} catch (e) { /* ignore */ }\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized tasks...`);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized tasks`);\n\t\t}\n\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\treturn this.fileService.exists(this.file);\n\t}\n\n\toverride async resolveContent(uri: URI): Promise<string | null> {\n\t\tif (this.extUri.isEqual(this.remoteResource, uri)\n\t\t\t|| this.extUri.isEqual(this.baseResource, uri)\n\t\t\t|| this.extUri.isEqual(this.localResource, uri)\n\t\t\t|| this.extUri.isEqual(this.acceptedResource, uri)\n\t\t) {\n\t\t\treturn this.resolvePreviewContent(uri);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate toTasksSyncContent(tasks: string | null): ITasksSyncContent {\n\t\treturn tasks ? { tasks } : {};\n\t}\n\n}\n\nexport class TasksInitializer extends AbstractInitializer {\n\n\tprivate tasksResource = this.userDataProfilesService.defaultProfile.tasksResource;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(SyncResource.Tasks, userDataProfilesService, environmentService, logService, fileService, storageService, uriIdentityService);\n\t}\n\n\tprotected async doInitialize(remoteUserData: IRemoteUserData): Promise<void> {\n\t\tconst tasksContent = remoteUserData.syncData ? getTasksContentFromSyncContent(remoteUserData.syncData.content, this.logService) : null;\n\t\tif (!tasksContent) {\n\t\t\tthis.logService.info('Skipping initializing tasks because remote tasks does not exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst isEmpty = await this.isEmpty();\n\t\tif (!isEmpty) {\n\t\t\tthis.logService.info('Skipping initializing tasks because local tasks exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.fileService.writeFile(this.tasksResource, VSBuffer.fromString(tasksContent));\n\n\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t}\n\n\tprivate async isEmpty(): Promise<boolean> {\n\t\treturn this.fileService.exists(this.tasksResource);\n\t}\n\n}\n\nfunction merge(originalLocalContent: string | null, originalRemoteContent: string | null, baseContent: string | null): {\n\tcontent: string | null;\n\thasLocalChanged: boolean;\n\thasRemoteChanged: boolean;\n\thasConflicts: boolean;\n} {\n\n\t/* no changes */\n\tif (originalLocalContent === null && originalRemoteContent === null && baseContent === null) {\n\t\treturn { content: null, hasLocalChanged: false, hasRemoteChanged: false, hasConflicts: false };\n\t}\n\n\t/* no changes */\n\tif (originalLocalContent === originalRemoteContent) {\n\t\treturn { content: null, hasLocalChanged: false, hasRemoteChanged: false, hasConflicts: false };\n\t}\n\n\tconst localForwarded = baseContent !== originalLocalContent;\n\tconst remoteForwarded = baseContent !== originalRemoteContent;\n\n\t/* no changes */\n\tif (!localForwarded && !remoteForwarded) {\n\t\treturn { content: null, hasLocalChanged: false, hasRemoteChanged: false, hasConflicts: false };\n\t}\n\n\t/* local has changed and remote has not */\n\tif (localForwarded && !remoteForwarded) {\n\t\treturn { content: originalLocalContent, hasRemoteChanged: true, hasLocalChanged: false, hasConflicts: false };\n\t}\n\n\t/* remote has changed and local has not */\n\tif (remoteForwarded && !localForwarded) {\n\t\treturn { content: originalRemoteContent, hasLocalChanged: true, hasRemoteChanged: false, hasConflicts: false };\n\t}\n\n\treturn { content: originalLocalContent, hasLocalChanged: true, hasRemoteChanged: true, hasConflicts: true };\n}\n"],
  "mappings": "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",
  "names": ["localContent"]
}
