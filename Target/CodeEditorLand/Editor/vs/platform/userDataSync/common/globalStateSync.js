var q=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var m=(d,i,e,t)=>{for(var a=t>1?void 0:t?H(i,e):i,r=d.length-1,o;r>=0;r--)(o=d[r])&&(a=(t?o(i,e,a):o(a))||a);return t&&a&&q(i,e,a),a},s=(d,i)=>(e,t)=>i(e,t,d);import{VSBuffer as x}from"../../../base/common/buffer.js";import{getErrorMessage as W}from"../../../base/common/errors.js";import{Event as E}from"../../../base/common/event.js";import{parse as z}from"../../../base/common/json.js";import{toFormattedString as Y}from"../../../base/common/jsonFormatter.js";import{isWeb as B}from"../../../base/common/platform.js";import{generateUuid as Q}from"../../../base/common/uuid.js";import{IConfigurationService as X}from"../../configuration/common/configuration.js";import{IEnvironmentService as D}from"../../environment/common/environment.js";import{getServiceMachineId as Z}from"../../externalServices/common/serviceMachineId.js";import{IFileService as U}from"../../files/common/files.js";import{IInstantiationService as ee}from"../../instantiation/common/instantiation.js";import{ILogService as te}from"../../log/common/log.js";import{IStorageService as O,StorageScope as A,StorageTarget as h}from"../../storage/common/storage.js";import{ITelemetryService as re}from"../../telemetry/common/telemetry.js";import{IUriIdentityService as M}from"../../uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as ae}from"../../userDataProfile/common/userDataProfile.js";import{IUserDataProfileStorageService as F}from"../../userDataProfile/common/userDataProfileStorageService.js";import{AbstractInitializer as oe,AbstractSynchroniser as ie,getSyncResourceLogLabel as se,isSyncData as ne}from"./abstractSynchronizer.js";import{edit as T}from"./content.js";import{merge as N}from"./globalStateMerge.js";import{ALL_SYNC_RESOURCES as le,Change as u,IUserDataSyncEnablementService as ce,IUserDataSyncLocalStoreService as ge,IUserDataSyncLogService as k,IUserDataSyncStoreService as Se,SYNC_SERVICE_URL_TYPE as $,SyncResource as p,USER_DATA_SYNC_SCHEME as C,UserDataSyncError as ue,UserDataSyncErrorCode as de,createSyncHeaders as ve,getEnablementKey as ye}from"./userDataSync.js";const y="globalState.argv.",he=["locale"];function f(d,i){const e=d.storage?Object.keys(d.storage).sort():[],t={};return e.forEach(a=>t[a]=d.storage[a]),d.storage=t,i?Y(d,{}):JSON.stringify(d)}const j=1;let w=class extends ie{constructor(e,t,a,r,o,g,n,l,v,c,S,R,V,_){super({syncResource:p.GlobalState,profile:e},t,r,l,R,o,g,v,c,n,S,V);this.userDataProfileStorageService=a;this.localGlobalStateProvider=_.createInstance(I),this._register(r.watch(this.extUri.dirname(this.environmentService.argvResource))),this._register(E.any(E.filter(r.onDidFilesChange,b=>b.contains(this.environmentService.argvResource)),E.filter(a.onDidChange,b=>!!(b.targetChanges.some(P=>this.syncResource.profile.id===P.id)||b.valueChanges.some(({profile:P,changes:J})=>this.syncResource.profile.id===P.id&&J.some(K=>K.target===h.USER)))))(()=>this.triggerLocalChange()))}version=j;previewResource=this.extUri.joinPath(this.syncPreviewFolder,"globalState.json");baseResource=this.previewResource.with({scheme:C,authority:"base"});localResource=this.previewResource.with({scheme:C,authority:"local"});remoteResource=this.previewResource.with({scheme:C,authority:"remote"});acceptedResource=this.previewResource.with({scheme:C,authority:"accepted"});localGlobalStateProvider;async generateSyncPreview(e,t,a){const r=e.syncData?JSON.parse(e.syncData.content):null;t=t===null&&a?e:t;const o=t&&t.syncData?JSON.parse(t.syncData.content):null,g=await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile);r?this.logService.trace(`${this.syncResourceLogLabel}: Merging remote ui state with local ui state...`):this.logService.trace(`${this.syncResourceLogLabel}: Remote ui state does not exist. Synchronizing ui state for the first time.`);const n=await this.getStorageKeys(o),{local:l,remote:v}=N(g.storage,r?r.storage:null,o?o.storage:null,n,this.logService),c={content:null,local:l,remote:v,localChange:Object.keys(l.added).length>0||Object.keys(l.updated).length>0||l.removed.length>0?u.Modified:u.None,remoteChange:v.all!==null?u.Modified:u.None},S=f(g,!1);return[{baseResource:this.baseResource,baseContent:o?f(o,!1):S,localResource:this.localResource,localContent:S,localUserData:g,remoteResource:this.remoteResource,remoteContent:r?f(r,!1):null,previewResource:this.previewResource,previewResult:c,localChange:c.localChange,remoteChange:c.remoteChange,acceptedResource:this.acceptedResource,storageKeys:n}]}async hasRemoteChanged(e){const t=e.syncData?JSON.parse(e.syncData.content):null;if(t===null)return!0;const a=await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile),r=await this.getStorageKeys(t),{remote:o}=N(a.storage,t.storage,t.storage,r,this.logService);return o.all!==null}async getMergeResult(e,t){return{...e.previewResult,hasConflicts:!1}}async getAcceptResult(e,t,a,r){if(this.extUri.isEqual(t,this.localResource))return this.acceptLocal(e);if(this.extUri.isEqual(t,this.remoteResource))return this.acceptRemote(e);if(this.extUri.isEqual(t,this.previewResource))return e.previewResult;throw new Error(`Invalid Resource: ${t.toString()}`)}async acceptLocal(e){return{content:e.localContent,local:{added:{},removed:[],updated:{}},remote:{added:Object.keys(e.localUserData.storage),removed:[],updated:[],all:e.localUserData.storage},localChange:u.None,remoteChange:u.Modified}}async acceptRemote(e){if(e.remoteContent!==null){const t=JSON.parse(e.remoteContent),{local:a,remote:r}=N(e.localUserData.storage,t.storage,null,e.storageKeys,this.logService);return{content:e.remoteContent,local:a,remote:r,localChange:Object.keys(a.added).length>0||Object.keys(a.updated).length>0||a.removed.length>0?u.Modified:u.None,remoteChange:r!==null?u.Modified:u.None}}else return{content:e.remoteContent,local:{added:{},removed:[],updated:{}},remote:{added:[],removed:[],updated:[],all:null},localChange:u.None,remoteChange:u.None}}async applyResult(e,t,a,r){const{localUserData:o}=a[0][0],{local:g,remote:n,localChange:l,remoteChange:v}=a[0][1];if(l===u.None&&v===u.None&&this.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing ui state.`),l!==u.None&&(this.logService.trace(`${this.syncResourceLogLabel}: Updating local ui state...`),await this.backupLocal(JSON.stringify(o)),await this.localGlobalStateProvider.writeLocalGlobalState(g,this.syncResource.profile),this.logService.info(`${this.syncResourceLogLabel}: Updated local ui state`)),v!==u.None){this.logService.trace(`${this.syncResourceLogLabel}: Updating remote ui state...`);const c=JSON.stringify({storage:n.all});e=await this.updateRemoteUserData(c,r?null:e.ref),this.logService.info(`${this.syncResourceLogLabel}: Updated remote ui state.${n.added.length?` Added: ${n.added}.`:""}${n.updated.length?` Updated: ${n.updated}.`:""}${n.removed.length?` Removed: ${n.removed}.`:""}`)}t?.ref!==e.ref&&(this.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized ui state...`),await this.updateLastSyncUserData(e),this.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized ui state`))}async resolveContent(e){if(this.extUri.isEqual(this.remoteResource,e)||this.extUri.isEqual(this.baseResource,e)||this.extUri.isEqual(this.localResource,e)||this.extUri.isEqual(this.acceptedResource,e)){const t=await this.resolvePreviewContent(e);return t&&f(JSON.parse(t),!0)}return null}async hasLocalData(){try{const{storage:e}=await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile);if(Object.keys(e).length>1||e[`${y}.locale`]?.value!=="en")return!0}catch{}return!1}async getStorageKeys(e){const t=await this.userDataProfileStorageService.readStorageData(this.syncResource.profile),a=[],r=[];for(const[n,l]of t)l.target===h.USER?a.push(n):l.target===h.MACHINE&&r.push(n);const o=[...a,...r],g=e?.storage?Object.keys(e.storage).filter(n=>!n.startsWith(y)&&!o.includes(n)&&t.get(n)!==void 0):[];if(!B){const n=[...le.map(l=>ye(l)),$];g.push(...n),r.push(...n)}return{user:a,machine:r,unregistered:g}}};w=m([s(2,F),s(3,U),s(4,Se),s(5,ge),s(6,k),s(7,D),s(8,ce),s(9,re),s(10,X),s(11,O),s(12,M),s(13,ee)],w);let I=class{constructor(i,e,t,a){this.fileService=i;this.environmentService=e;this.userDataProfileStorageService=t;this.logService=a}async getLocalGlobalState(i){const e={};if(i.isDefault){const a=await this.getLocalArgvContent(),r=z(a);for(const o of he)r[o]!==void 0&&(e[`${y}${o}`]={version:1,value:r[o]})}const t=await this.userDataProfileStorageService.readStorageData(i);for(const[a,r]of t)r.value&&r.target===h.USER&&(e[a]={version:1,value:r.value});return{storage:e}}async getLocalArgvContent(){try{this.logService.debug("GlobalStateSync#getLocalArgvContent",this.environmentService.argvResource);const i=await this.fileService.readFile(this.environmentService.argvResource);return this.logService.debug("GlobalStateSync#getLocalArgvContent - Resolved",this.environmentService.argvResource),i.value.toString()}catch(i){this.logService.debug(W(i))}return"{}"}async writeLocalGlobalState({added:i,removed:e,updated:t},a){const r=se(p.GlobalState,a),o={},g=new Map,n=await this.userDataProfileStorageService.readStorageData(a),l=(v,c)=>{for(const S of v){if(S.startsWith(y)){o[S.substring(y.length)]=c?c[S].value:void 0;continue}if(c){const R=c[S];R.value!==n.get(S)?.value&&g.set(S,R.value)}else n.get(S)!==void 0&&g.set(S,void 0)}};if(l(Object.keys(i),i),l(Object.keys(t),t),l(e),Object.keys(o).length){this.logService.trace(`${r}: Updating locale...`);const v=await this.getLocalArgvContent();let c=v;for(const S of Object.keys(o))c=T(c,[S],o[S],{});v!==c&&(this.logService.trace(`${r}: Updating locale...`),await this.fileService.writeFile(this.environmentService.argvResource,x.fromString(c)),this.logService.info(`${r}: Updated locale.`)),this.logService.info(`${r}: Updated locale`)}g.size&&(this.logService.trace(`${r}: Updating global state...`),await this.userDataProfileStorageService.updateStorageData(a,g,h.USER),this.logService.info(`${r}: Updated global state`,[...g.keys()]))}};I=m([s(0,U),s(1,D),s(2,F),s(3,k)],I);let L=class extends oe{constructor(i,e,t,a,r,o){super(p.GlobalState,t,a,r,e,i,o)}async doInitialize(i){const e=i.syncData?JSON.parse(i.syncData.content):null;if(!e){this.logService.info("Skipping initializing global state because remote global state does not exist.");return}const t={},a={};for(const r of Object.keys(e.storage))r.startsWith(y)?t[r.substring(y.length)]=e.storage[r].value:this.storageService.get(r,A.PROFILE)===void 0&&(a[r]=e.storage[r].value);if(Object.keys(t).length){let r="{}";try{r=(await this.fileService.readFile(this.environmentService.argvResource)).value.toString()}catch{}for(const o of Object.keys(t))r=T(r,[o],t[o],{});await this.fileService.writeFile(this.environmentService.argvResource,x.fromString(r))}if(Object.keys(a).length){const r=[];for(const o of Object.keys(a))r.push({key:o,value:a[o],scope:A.PROFILE,target:h.USER});this.storageService.storeAll(r,!0)}}};L=m([s(0,O),s(1,U),s(2,ae),s(3,D),s(4,k),s(5,M)],L);let G=class{constructor(i,e,t,a,r){this.userDataSyncStoreClient=i;this.storageService=e;this.environmentService=t;this.fileService=a;this.logService=r}getSyncStoreType(i){return this.parseGlobalState(i)?.storage[$]?.value}async sync(i){const e=ve(Q());try{return await this.doSync(i,e)}catch(t){if(t instanceof ue)switch(t.code){case de.PreconditionFailed:return this.logService.info("Failed to synchronize UserDataSyncStoreType as there is a new remote version available. Synchronizing again..."),this.doSync(i,e)}throw t}}async doSync(i,e){const t=await this.userDataSyncStoreClient.readResource(p.GlobalState,null,void 0,e),a=this.parseGlobalState(t)||{storage:{}};a.storage[$]={value:i,version:j};const r=await Z(this.environmentService,this.fileService,this.storageService),o={version:j,machineId:r,content:f(a,!1)};await this.userDataSyncStoreClient.writeResource(p.GlobalState,JSON.stringify(o),t.ref,void 0,e)}parseGlobalState({content:i}){if(!i)return null;const e=JSON.parse(i);if(ne(e))return e?JSON.parse(e.content):null;throw new Error("Invalid remote data")}};G=m([s(1,O),s(2,D),s(3,U),s(4,te)],G);export{L as GlobalStateInitializer,w as GlobalStateSynchroniser,I as LocalGlobalStateProvider,G as UserDataSyncStoreTypeSynchronizer,f as stringify};
