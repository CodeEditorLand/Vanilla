function y(d,n,a){const s={},c={},u=new Set;if(!n)return{local:{added:s,updated:c,removed:[...u.values()]},remote:{added:d,updated:{},removed:[]},conflicts:[]};const o=f(d,n);if(o.added.size===0&&o.removed.size===0&&o.updated.size===0)return{local:{added:s,updated:c,removed:[...u.values()]},remote:{added:{},updated:{},removed:[]},conflicts:[]};const t=f(a,d),i=f(a,n),g={},l={},p=new Set,r=new Set;for(const e of t.removed.values())i.updated.has(e)?s[e]=n[e]:p.add(e);for(const e of i.removed.values())r.has(e)||(t.updated.has(e)?r.add(e):u.add(e));for(const e of t.updated.values())r.has(e)||(i.updated.has(e)?o.updated.has(e)&&r.add(e):l[e]=d[e]);for(const e of i.updated.values())r.has(e)||(t.updated.has(e)?o.updated.has(e)&&r.add(e):d[e]!==void 0&&(c[e]=n[e]));for(const e of t.added.values())r.has(e)||(i.added.has(e)?o.updated.has(e)&&r.add(e):g[e]=d[e]);for(const e of i.added.values())r.has(e)||(t.added.has(e)?o.updated.has(e)&&r.add(e):s[e]=n[e]);return{local:{added:s,removed:[...u.values()],updated:c},remote:{added:g,removed:[...p.values()],updated:l},conflicts:[...r.values()]}}function f(d,n){const a=d?Object.keys(d):[],s=n?Object.keys(n):[],c=s.filter(t=>!a.includes(t)).reduce((t,i)=>(t.add(i),t),new Set),u=a.filter(t=>!s.includes(t)).reduce((t,i)=>(t.add(i),t),new Set),o=new Set;for(const t of a){if(u.has(t))continue;const i=d[t],g=n[t];i!==g&&o.add(t)}return{added:c,removed:u,updated:o}}function m(d,n){const{added:a,removed:s,updated:c}=f(d,n);return a.size===0&&s.size===0&&c.size===0}export{m as areSame,y as merge};
