{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/userDataAutoSyncService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, disposableTimeout, ThrottledDelayer, timeout } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { toLocalISOString } from '../../../base/common/date.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable, MutableDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { isWeb } from '../../../base/common/platform.js';\nimport { isEqual } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUserDataSyncTask, IUserDataAutoSyncService, IUserDataManifest, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncService, IUserDataSyncStoreManagementService, IUserDataSyncStoreService, UserDataAutoSyncError, UserDataSyncError, UserDataSyncErrorCode } from './userDataSync.js';\nimport { IUserDataSyncAccountService } from './userDataSyncAccount.js';\nimport { IUserDataSyncMachinesService } from './userDataSyncMachines.js';\n\ntype AutoSyncClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about the sources triggering auto sync';\n\tsources: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Source that triggered auto sync' };\n\tproviderId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Auth provider id used for sync' };\n};\n\ntype AutoSyncErrorClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about the error that causes auto sync to fail';\n\tcode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'error code' };\n\tservice: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Settings sync service for which this error has occurred' };\n};\n\nconst disableMachineEventuallyKey = 'sync.disableMachineEventually';\nconst sessionIdKey = 'sync.sessionId';\nconst storeUrlKey = 'sync.storeUrl';\nconst productQualityKey = 'sync.productQuality';\n\nexport class UserDataAutoSyncService extends Disposable implements IUserDataAutoSyncService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly autoSync = this._register(new MutableDisposable<AutoSync>());\n\tprivate successiveFailures: number = 0;\n\tprivate lastSyncTriggerTime: number | undefined = undefined;\n\tprivate readonly syncTriggerDelayer: ThrottledDelayer<void>;\n\tprivate suspendUntilRestart: boolean = false;\n\n\tprivate readonly _onError: Emitter<UserDataSyncError> = this._register(new Emitter<UserDataSyncError>());\n\treadonly onError: Event<UserDataSyncError> = this._onError.event;\n\n\tprivate lastSyncUrl: URI | undefined;\n\tprivate get syncUrl(): URI | undefined {\n\t\tconst value = this.storageService.get(storeUrlKey, StorageScope.APPLICATION);\n\t\treturn value ? URI.parse(value) : undefined;\n\t}\n\tprivate set syncUrl(syncUrl: URI | undefined) {\n\t\tif (syncUrl) {\n\t\t\tthis.storageService.store(storeUrlKey, syncUrl.toString(), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(storeUrlKey, StorageScope.APPLICATION);\n\t\t}\n\t}\n\n\tprivate previousProductQuality: string | undefined;\n\tprivate get productQuality(): string | undefined {\n\t\treturn this.storageService.get(productQualityKey, StorageScope.APPLICATION);\n\t}\n\tprivate set productQuality(productQuality: string | undefined) {\n\t\tif (productQuality) {\n\t\t\tthis.storageService.store(productQualityKey, productQuality, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(productQualityKey, StorageScope.APPLICATION);\n\t\t}\n\t}\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\t@IUserDataSyncStoreManagementService private readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IUserDataSyncService private readonly userDataSyncService: IUserDataSyncService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@IUserDataSyncAccountService private readonly userDataSyncAccountService: IUserDataSyncAccountService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IUserDataSyncMachinesService private readonly userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis.syncTriggerDelayer = this._register(new ThrottledDelayer<void>(this.getSyncTriggerDelayTime()));\n\n\t\tthis.lastSyncUrl = this.syncUrl;\n\t\tthis.syncUrl = userDataSyncStoreManagementService.userDataSyncStore?.url;\n\n\t\tthis.previousProductQuality = this.productQuality;\n\t\tthis.productQuality = productService.quality;\n\n\t\tif (this.syncUrl) {\n\n\t\t\tthis.logService.info('Using settings sync service', this.syncUrl.toString());\n\t\t\tthis._register(userDataSyncStoreManagementService.onDidChangeUserDataSyncStore(() => {\n\t\t\t\tif (!isEqual(this.syncUrl, userDataSyncStoreManagementService.userDataSyncStore?.url)) {\n\t\t\t\t\tthis.lastSyncUrl = this.syncUrl;\n\t\t\t\t\tthis.syncUrl = userDataSyncStoreManagementService.userDataSyncStore?.url;\n\t\t\t\t\tif (this.syncUrl) {\n\t\t\t\t\t\tthis.logService.info('Using settings sync service', this.syncUrl.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (this.userDataSyncEnablementService.isEnabled()) {\n\t\t\t\tthis.logService.info('Auto Sync is enabled.');\n\t\t\t} else {\n\t\t\t\tthis.logService.info('Auto Sync is disabled.');\n\t\t\t}\n\t\t\tthis.updateAutoSync();\n\n\t\t\tif (this.hasToDisableMachineEventually()) {\n\t\t\t\tthis.disableMachineEventually();\n\t\t\t}\n\n\t\t\tthis._register(userDataSyncAccountService.onDidChangeAccount(() => this.updateAutoSync()));\n\t\t\tthis._register(userDataSyncStoreService.onDidChangeDonotMakeRequestsUntil(() => this.updateAutoSync()));\n\t\t\tthis._register(userDataSyncService.onDidChangeLocal(source => this.triggerSync([source], false, false)));\n\t\t\tthis._register(Event.filter(this.userDataSyncEnablementService.onDidChangeResourceEnablement, ([, enabled]) => enabled)(() => this.triggerSync(['resourceEnablement'], false, false)));\n\t\t\tthis._register(this.userDataSyncStoreManagementService.onDidChangeUserDataSyncStore(() => this.triggerSync(['userDataSyncStoreChanged'], false, false)));\n\t\t}\n\t}\n\n\tprivate updateAutoSync(): void {\n\t\tconst { enabled, message } = this.isAutoSyncEnabled();\n\t\tif (enabled) {\n\t\t\tif (this.autoSync.value === undefined) {\n\t\t\t\tthis.autoSync.value = new AutoSync(this.lastSyncUrl, 1000 * 60 * 5 /* 5 miutes */, this.userDataSyncStoreManagementService, this.userDataSyncStoreService, this.userDataSyncService, this.userDataSyncMachinesService, this.logService, this.telemetryService, this.storageService);\n\t\t\t\tthis.autoSync.value.register(this.autoSync.value.onDidStartSync(() => this.lastSyncTriggerTime = new Date().getTime()));\n\t\t\t\tthis.autoSync.value.register(this.autoSync.value.onDidFinishSync(e => this.onDidFinishSync(e)));\n\t\t\t\tif (this.startAutoSync()) {\n\t\t\t\t\tthis.autoSync.value.start();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.syncTriggerDelayer.cancel();\n\t\t\tif (this.autoSync.value !== undefined) {\n\t\t\t\tif (message) {\n\t\t\t\t\tthis.logService.info(message);\n\t\t\t\t}\n\t\t\t\tthis.autoSync.clear();\n\t\t\t}\n\n\t\t\t/* log message when auto sync is not disabled by user */\n\t\t\telse if (message && this.userDataSyncEnablementService.isEnabled()) {\n\t\t\t\tthis.logService.info(message);\n\t\t\t}\n\t\t}\n\t}\n\n\t// For tests purpose only\n\tprotected startAutoSync(): boolean { return true; }\n\n\tprivate isAutoSyncEnabled(): { enabled: boolean; message?: string } {\n\t\tif (!this.userDataSyncEnablementService.isEnabled()) {\n\t\t\treturn { enabled: false, message: 'Auto Sync: Disabled.' };\n\t\t}\n\t\tif (!this.userDataSyncAccountService.account) {\n\t\t\treturn { enabled: false, message: 'Auto Sync: Suspended until auth token is available.' };\n\t\t}\n\t\tif (this.userDataSyncStoreService.donotMakeRequestsUntil) {\n\t\t\treturn { enabled: false, message: `Auto Sync: Suspended until ${toLocalISOString(this.userDataSyncStoreService.donotMakeRequestsUntil)} because server is not accepting requests until then.` };\n\t\t}\n\t\tif (this.suspendUntilRestart) {\n\t\t\treturn { enabled: false, message: 'Auto Sync: Suspended until restart.' };\n\t\t}\n\t\treturn { enabled: true };\n\t}\n\n\tasync turnOn(): Promise<void> {\n\t\tthis.stopDisableMachineEventually();\n\t\tthis.lastSyncUrl = this.syncUrl;\n\t\tthis.updateEnablement(true);\n\t}\n\n\tasync turnOff(everywhere: boolean, softTurnOffOnError?: boolean, donotRemoveMachine?: boolean): Promise<void> {\n\t\ttry {\n\n\t\t\t// Remove machine\n\t\t\tif (this.userDataSyncAccountService.account && !donotRemoveMachine) {\n\t\t\t\tawait this.userDataSyncMachinesService.removeCurrentMachine();\n\t\t\t}\n\n\t\t\t// Disable Auto Sync\n\t\t\tthis.updateEnablement(false);\n\n\t\t\t// Reset Session\n\t\t\tthis.storageService.remove(sessionIdKey, StorageScope.APPLICATION);\n\n\t\t\t// Reset\n\t\t\tif (everywhere) {\n\t\t\t\tthis.telemetryService.publicLog2<{}, { owner: 'sandy081'; comment: 'Reporting when settings sync is turned off in all devices' }>('sync/turnOffEveryWhere');\n\t\t\t\tawait this.userDataSyncService.reset();\n\t\t\t} else {\n\t\t\t\tawait this.userDataSyncService.resetLocal();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\tif (softTurnOffOnError) {\n\t\t\t\tthis.updateEnablement(false);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateEnablement(enabled: boolean): void {\n\t\tif (this.userDataSyncEnablementService.isEnabled() !== enabled) {\n\t\t\tthis.userDataSyncEnablementService.setEnablement(enabled);\n\t\t\tthis.updateAutoSync();\n\t\t}\n\t}\n\n\tprivate hasProductQualityChanged(): boolean {\n\t\treturn !!this.previousProductQuality && !!this.productQuality && this.previousProductQuality !== this.productQuality;\n\t}\n\n\tprivate async onDidFinishSync(error: Error | undefined): Promise<void> {\n\t\tif (!error) {\n\t\t\t// Sync finished without errors\n\t\t\tthis.successiveFailures = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t// Error while syncing\n\t\tconst userDataSyncError = UserDataSyncError.toUserDataSyncError(error);\n\n\t\t// Log to telemetry\n\t\tif (userDataSyncError instanceof UserDataAutoSyncError) {\n\t\t\tthis.telemetryService.publicLog2<{ code: string; service: string }, AutoSyncErrorClassification>(`autosync/error`, { code: userDataSyncError.code, service: this.userDataSyncStoreManagementService.userDataSyncStore!.url.toString() });\n\t\t}\n\n\t\t// Session got expired\n\t\tif (userDataSyncError.code === UserDataSyncErrorCode.SessionExpired) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because current session is expired');\n\t\t}\n\n\t\t// Turned off from another device\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.TurnedOff) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because sync is turned off in the cloud');\n\t\t}\n\n\t\t// Exceeded Rate Limit on Client\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.LocalTooManyRequests) {\n\t\t\tthis.suspendUntilRestart = true;\n\t\t\tthis.logService.info('Auto Sync: Suspended sync because of making too many requests to server');\n\t\t\tthis.updateAutoSync();\n\t\t}\n\n\t\t// Exceeded Rate Limit on Server\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.TooManyRequests) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */,\n\t\t\t\ttrue /* do not disable machine because disabling a machine makes request to server and can fail with TooManyRequests */);\n\t\t\tthis.disableMachineEventually();\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because of making too many requests to server');\n\t\t}\n\n\t\t// Method Not Found\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.MethodNotFound) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because current client is making requests to server that are not supported');\n\t\t}\n\n\t\t// Upgrade Required or Gone\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.UpgradeRequired || userDataSyncError.code === UserDataSyncErrorCode.Gone) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */,\n\t\t\t\ttrue /* do not disable machine because disabling a machine makes request to server and can fail with upgrade required or gone */);\n\t\t\tthis.disableMachineEventually();\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because current client is not compatible with server. Requires client upgrade.');\n\t\t}\n\n\t\t// Incompatible Local Content\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.IncompatibleLocalContent) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(`Auto Sync: Turned off sync because server has ${userDataSyncError.resource} content with newer version than of client. Requires client upgrade.`);\n\t\t}\n\n\t\t// Incompatible Remote Content\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.IncompatibleRemoteContent) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(`Auto Sync: Turned off sync because server has ${userDataSyncError.resource} content with older version than of client. Requires server reset.`);\n\t\t}\n\n\t\t// Service changed\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.ServiceChanged || userDataSyncError.code === UserDataSyncErrorCode.DefaultServiceChanged) {\n\n\t\t\t// Check if default settings sync service has changed in web without changing the product quality\n\t\t\t// Then turn off settings sync and ask user to turn on again\n\t\t\tif (isWeb && userDataSyncError.code === UserDataSyncErrorCode.DefaultServiceChanged && !this.hasProductQualityChanged()) {\n\t\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\t\tthis.logService.info('Auto Sync: Turned off sync because default sync service is changed.');\n\t\t\t}\n\n\t\t\t// Service has changed by the user. So turn off and turn on sync.\n\t\t\t// Show a prompt to the user about service change.\n\t\t\telse {\n\t\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */, true /* do not disable machine */);\n\t\t\t\tawait this.turnOn();\n\t\t\t\tthis.logService.info('Auto Sync: Sync Service changed. Turned off auto sync, reset local state and turned on auto sync.');\n\t\t\t}\n\n\t\t}\n\n\t\telse {\n\t\t\tthis.logService.error(userDataSyncError);\n\t\t\tthis.successiveFailures++;\n\t\t}\n\n\t\tthis._onError.fire(userDataSyncError);\n\t}\n\n\tprivate async disableMachineEventually(): Promise<void> {\n\t\tthis.storageService.store(disableMachineEventuallyKey, true, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tawait timeout(1000 * 60 * 10);\n\n\t\t// Return if got stopped meanwhile.\n\t\tif (!this.hasToDisableMachineEventually()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.stopDisableMachineEventually();\n\n\t\t// disable only if sync is disabled\n\t\tif (!this.userDataSyncEnablementService.isEnabled() && this.userDataSyncAccountService.account) {\n\t\t\tawait this.userDataSyncMachinesService.removeCurrentMachine();\n\t\t}\n\t}\n\n\tprivate hasToDisableMachineEventually(): boolean {\n\t\treturn this.storageService.getBoolean(disableMachineEventuallyKey, StorageScope.APPLICATION, false);\n\t}\n\n\tprivate stopDisableMachineEventually(): void {\n\t\tthis.storageService.remove(disableMachineEventuallyKey, StorageScope.APPLICATION);\n\t}\n\n\tprivate sources: string[] = [];\n\tasync triggerSync(sources: string[], skipIfSyncedRecently: boolean, disableCache: boolean): Promise<void> {\n\t\tif (this.autoSync.value === undefined) {\n\t\t\treturn this.syncTriggerDelayer.cancel();\n\t\t}\n\n\t\tif (skipIfSyncedRecently && this.lastSyncTriggerTime\n\t\t\t&& Math.round((new Date().getTime() - this.lastSyncTriggerTime) / 1000) < 10) {\n\t\t\tthis.logService.debug('Auto Sync: Skipped. Limited to once per 10 seconds.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.sources.push(...sources);\n\t\treturn this.syncTriggerDelayer.trigger(async () => {\n\t\t\tthis.logService.trace('activity sources', ...this.sources);\n\t\t\tconst providerId = this.userDataSyncAccountService.account?.authenticationProviderId || '';\n\t\t\tthis.telemetryService.publicLog2<{ sources: string[]; providerId: string }, AutoSyncClassification>('sync/triggered', { sources: this.sources, providerId });\n\t\t\tthis.sources = [];\n\t\t\tif (this.autoSync.value) {\n\t\t\t\tawait this.autoSync.value.sync('Activity', disableCache);\n\t\t\t}\n\t\t}, this.successiveFailures\n\t\t\t? this.getSyncTriggerDelayTime() * 1 * Math.min(Math.pow(2, this.successiveFailures), 60) /* Delay exponentially until max 1 minute */\n\t\t\t: this.getSyncTriggerDelayTime());\n\n\t}\n\n\tprotected getSyncTriggerDelayTime(): number {\n\t\treturn 2000; /* Debounce for 2 seconds if there are no failures */\n\t}\n\n}\n\nclass AutoSync extends Disposable {\n\n\tprivate static readonly INTERVAL_SYNCING = 'Interval';\n\n\tprivate readonly intervalHandler = this._register(new MutableDisposable<IDisposable>());\n\n\tprivate readonly _onDidStartSync = this._register(new Emitter<void>());\n\treadonly onDidStartSync = this._onDidStartSync.event;\n\n\tprivate readonly _onDidFinishSync = this._register(new Emitter<Error | undefined>());\n\treadonly onDidFinishSync = this._onDidFinishSync.event;\n\n\tprivate manifest: IUserDataManifest | null = null;\n\tprivate syncTask: IUserDataSyncTask | undefined;\n\tprivate syncPromise: CancelablePromise<void> | undefined;\n\n\tconstructor(\n\t\tprivate readonly lastSyncUrl: URI | undefined,\n\t\tprivate readonly interval: number /* in milliseconds */,\n\t\tprivate readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\tprivate readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\tprivate readonly userDataSyncService: IUserDataSyncService,\n\t\tprivate readonly userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t\tprivate readonly logService: IUserDataSyncLogService,\n\t\tprivate readonly telemetryService: ITelemetryService,\n\t\tprivate readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(): void {\n\t\tthis._register(this.onDidFinishSync(() => this.waitUntilNextIntervalAndSync()));\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this.syncPromise) {\n\t\t\t\tthis.syncPromise.cancel();\n\t\t\t\tthis.logService.info('Auto sync: Cancelled sync that is in progress');\n\t\t\t\tthis.syncPromise = undefined;\n\t\t\t}\n\t\t\tthis.syncTask?.stop();\n\t\t\tthis.logService.info('Auto Sync: Stopped');\n\t\t}));\n\t\tthis.sync(AutoSync.INTERVAL_SYNCING, false);\n\t}\n\n\tprivate waitUntilNextIntervalAndSync(): void {\n\t\tthis.intervalHandler.value = disposableTimeout(() => {\n\t\t\tthis.sync(AutoSync.INTERVAL_SYNCING, false);\n\t\t\tthis.intervalHandler.value = undefined;\n\t\t}, this.interval);\n\t}\n\n\tsync(reason: string, disableCache: boolean): Promise<void> {\n\t\tconst syncPromise = createCancelablePromise(async token => {\n\t\t\tif (this.syncPromise) {\n\t\t\t\ttry {\n\t\t\t\t\t// Wait until existing sync is finished\n\t\t\t\t\tthis.logService.debug('Auto Sync: Waiting until sync is finished.');\n\t\t\t\t\tawait this.syncPromise;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (isCancellationError(error)) {\n\t\t\t\t\t\t// Cancelled => Disposed. Donot continue sync.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.doSync(reason, disableCache, token);\n\t\t});\n\t\tthis.syncPromise = syncPromise;\n\t\tthis.syncPromise.finally(() => this.syncPromise = undefined);\n\t\treturn this.syncPromise;\n\t}\n\n\tprivate hasSyncServiceChanged(): boolean {\n\t\treturn this.lastSyncUrl !== undefined && !isEqual(this.lastSyncUrl, this.userDataSyncStoreManagementService.userDataSyncStore?.url);\n\t}\n\n\tprivate async hasDefaultServiceChanged(): Promise<boolean> {\n\t\tconst previous = await this.userDataSyncStoreManagementService.getPreviousUserDataSyncStore();\n\t\tconst current = this.userDataSyncStoreManagementService.userDataSyncStore;\n\t\t// check if defaults changed\n\t\treturn !!current && !!previous &&\n\t\t\t(!isEqual(current.defaultUrl, previous.defaultUrl) ||\n\t\t\t\t!isEqual(current.insidersUrl, previous.insidersUrl) ||\n\t\t\t\t!isEqual(current.stableUrl, previous.stableUrl));\n\t}\n\n\tprivate async doSync(reason: string, disableCache: boolean, token: CancellationToken): Promise<void> {\n\t\tthis.logService.info(`Auto Sync: Triggered by ${reason}`);\n\t\tthis._onDidStartSync.fire();\n\n\t\tlet error: Error | undefined;\n\t\ttry {\n\t\t\tawait this.createAndRunSyncTask(disableCache, token);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\terror = e;\n\t\t\tif (UserDataSyncError.toUserDataSyncError(e).code === UserDataSyncErrorCode.MethodNotFound) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.logService.info('Auto Sync: Client is making invalid requests. Cleaning up data...');\n\t\t\t\t\tawait this.userDataSyncService.cleanUpRemoteData();\n\t\t\t\t\tthis.logService.info('Auto Sync: Retrying sync...');\n\t\t\t\t\tawait this.createAndRunSyncTask(disableCache, token);\n\t\t\t\t\terror = undefined;\n\t\t\t\t} catch (e1) {\n\t\t\t\t\tthis.logService.error(e1);\n\t\t\t\t\terror = e1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidFinishSync.fire(error);\n\t}\n\n\tprivate async createAndRunSyncTask(disableCache: boolean, token: CancellationToken): Promise<void> {\n\t\tthis.syncTask = await this.userDataSyncService.createSyncTask(this.manifest, disableCache);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tthis.manifest = this.syncTask.manifest;\n\n\t\t// Server has no data but this machine was synced before\n\t\tif (this.manifest === null && await this.userDataSyncService.hasPreviouslySynced()) {\n\t\t\tif (this.hasSyncServiceChanged()) {\n\t\t\t\tif (await this.hasDefaultServiceChanged()) {\n\t\t\t\t\tthrow new UserDataAutoSyncError(localize('default service changed', \"Cannot sync because default service has changed\"), UserDataSyncErrorCode.DefaultServiceChanged);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new UserDataAutoSyncError(localize('service changed', \"Cannot sync because sync service has changed\"), UserDataSyncErrorCode.ServiceChanged);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Sync was turned off in the cloud\n\t\t\t\tthrow new UserDataAutoSyncError(localize('turned off', \"Cannot sync because syncing is turned off in the cloud\"), UserDataSyncErrorCode.TurnedOff);\n\t\t\t}\n\t\t}\n\n\t\tconst sessionId = this.storageService.get(sessionIdKey, StorageScope.APPLICATION);\n\t\t// Server session is different from client session\n\t\tif (sessionId && this.manifest && sessionId !== this.manifest.session) {\n\t\t\tif (this.hasSyncServiceChanged()) {\n\t\t\t\tif (await this.hasDefaultServiceChanged()) {\n\t\t\t\t\tthrow new UserDataAutoSyncError(localize('default service changed', \"Cannot sync because default service has changed\"), UserDataSyncErrorCode.DefaultServiceChanged);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new UserDataAutoSyncError(localize('service changed', \"Cannot sync because sync service has changed\"), UserDataSyncErrorCode.ServiceChanged);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new UserDataAutoSyncError(localize('session expired', \"Cannot sync because current session is expired\"), UserDataSyncErrorCode.SessionExpired);\n\t\t\t}\n\t\t}\n\n\t\tconst machines = await this.userDataSyncMachinesService.getMachines(this.manifest || undefined);\n\t\t// Return if cancellation is requested\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentMachine = machines.find(machine => machine.isCurrent);\n\t\t// Check if sync was turned off from other machine\n\t\tif (currentMachine?.disabled) {\n\t\t\t// Throw TurnedOff error\n\t\t\tthrow new UserDataAutoSyncError(localize('turned off machine', \"Cannot sync because syncing is turned off on this machine from another machine.\"), UserDataSyncErrorCode.TurnedOff);\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\t\tawait this.syncTask.run();\n\t\tthis.telemetryService.publicLog2<{\n\t\t\tduration: number;\n\t\t}, {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Report when running a sync operation';\n\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Time taken to run sync operation' };\n\t\t}>('settingsSync:sync', { duration: new Date().getTime() - startTime });\n\n\t\t// After syncing, get the manifest if it was not available before\n\t\tif (this.manifest === null) {\n\t\t\ttry {\n\t\t\t\tthis.manifest = await this.userDataSyncStoreService.manifest(null);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new UserDataAutoSyncError(toErrorMessage(error), error instanceof UserDataSyncError ? error.code : UserDataSyncErrorCode.Unknown);\n\t\t\t}\n\t\t}\n\n\t\t// Update local session id\n\t\tif (this.manifest && this.manifest.session !== sessionId) {\n\t\t\tthis.storageService.store(sessionIdKey, this.manifest.session, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t}\n\n\t\t// Return if cancellation is requested\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add current machine\n\t\tif (!currentMachine) {\n\t\t\tawait this.userDataSyncMachinesService.addCurrentMachine(this.manifest || undefined);\n\t\t}\n\t}\n\n\tregister<T extends IDisposable>(t: T): T {\n\t\treturn super._register(t);\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
