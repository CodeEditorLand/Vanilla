{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/userDataAutoSyncService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype CancelablePromise,\n\tThrottledDelayer,\n\tcreateCancelablePromise,\n\tdisposableTimeout,\n\ttimeout,\n} from \"../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { toLocalISOString } from \"../../../base/common/date.js\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport { isCancellationError } from \"../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { isWeb } from \"../../../base/common/platform.js\";\nimport { isEqual } from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../storage/common/storage.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport {\n\ttype IUserDataAutoSyncService,\n\ttype IUserDataManifest,\n\tIUserDataSyncEnablementService,\n\tIUserDataSyncLogService,\n\tIUserDataSyncService,\n\tIUserDataSyncStoreManagementService,\n\tIUserDataSyncStoreService,\n\ttype IUserDataSyncTask,\n\tUserDataAutoSyncError,\n\tUserDataSyncError,\n\tUserDataSyncErrorCode,\n} from \"./userDataSync.js\";\nimport { IUserDataSyncAccountService } from \"./userDataSyncAccount.js\";\nimport { IUserDataSyncMachinesService } from \"./userDataSyncMachines.js\";\n\ntype AutoSyncClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Information about the sources triggering auto sync\";\n\tsources: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Source that triggered auto sync\";\n\t};\n\tproviderId: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Auth provider id used for sync\";\n\t};\n};\n\ntype AutoSyncErrorClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Information about the error that causes auto sync to fail\";\n\tcode: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"error code\";\n\t};\n\tservice: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Settings sync service for which this error has occurred\";\n\t};\n};\n\nconst disableMachineEventuallyKey = \"sync.disableMachineEventually\";\nconst sessionIdKey = \"sync.sessionId\";\nconst storeUrlKey = \"sync.storeUrl\";\nconst productQualityKey = \"sync.productQuality\";\n\nexport class UserDataAutoSyncService\n\textends Disposable\n\timplements IUserDataAutoSyncService\n{\n\t_serviceBrand: any;\n\n\tprivate readonly autoSync = this._register(\n\t\tnew MutableDisposable<AutoSync>(),\n\t);\n\tprivate successiveFailures = 0;\n\tprivate lastSyncTriggerTime: number | undefined = undefined;\n\tprivate readonly syncTriggerDelayer: ThrottledDelayer<void>;\n\tprivate suspendUntilRestart = false;\n\n\tprivate readonly _onError: Emitter<UserDataSyncError> = this._register(\n\t\tnew Emitter<UserDataSyncError>(),\n\t);\n\treadonly onError: Event<UserDataSyncError> = this._onError.event;\n\n\tprivate lastSyncUrl: URI | undefined;\n\tprivate get syncUrl(): URI | undefined {\n\t\tconst value = this.storageService.get(\n\t\t\tstoreUrlKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\treturn value ? URI.parse(value) : undefined;\n\t}\n\tprivate set syncUrl(syncUrl: URI | undefined) {\n\t\tif (syncUrl) {\n\t\t\tthis.storageService.store(\n\t\t\t\tstoreUrlKey,\n\t\t\t\tsyncUrl.toString(),\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.remove(storeUrlKey, StorageScope.APPLICATION);\n\t\t}\n\t}\n\n\tprivate previousProductQuality: string | undefined;\n\tprivate get productQuality(): string | undefined {\n\t\treturn this.storageService.get(\n\t\t\tproductQualityKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t}\n\tprivate set productQuality(productQuality: string | undefined) {\n\t\tif (productQuality) {\n\t\t\tthis.storageService.store(\n\t\t\t\tproductQualityKey,\n\t\t\t\tproductQuality,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.remove(\n\t\t\t\tproductQualityKey,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t}\n\t}\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\t@IUserDataSyncStoreManagementService private readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IUserDataSyncService private readonly userDataSyncService: IUserDataSyncService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@IUserDataSyncAccountService private readonly userDataSyncAccountService: IUserDataSyncAccountService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IUserDataSyncMachinesService private readonly userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis.syncTriggerDelayer = this._register(new ThrottledDelayer<void>(this.getSyncTriggerDelayTime()));\n\n\t\tthis.lastSyncUrl = this.syncUrl;\n\t\tthis.syncUrl = userDataSyncStoreManagementService.userDataSyncStore?.url;\n\n\t\tthis.previousProductQuality = this.productQuality;\n\t\tthis.productQuality = productService.quality;\n\n\t\tif (this.syncUrl) {\n\n\t\t\tthis.logService.info('Using settings sync service', this.syncUrl.toString());\n\t\t\tthis._register(userDataSyncStoreManagementService.onDidChangeUserDataSyncStore(() => {\n\t\t\t\tif (!isEqual(this.syncUrl, userDataSyncStoreManagementService.userDataSyncStore?.url)) {\n\t\t\t\t\tthis.lastSyncUrl = this.syncUrl;\n\t\t\t\t\tthis.syncUrl = userDataSyncStoreManagementService.userDataSyncStore?.url;\n\t\t\t\t\tif (this.syncUrl) {\n\t\t\t\t\t\tthis.logService.info('Using settings sync service', this.syncUrl.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (this.userDataSyncEnablementService.isEnabled()) {\n\t\t\t\tthis.logService.info('Auto Sync is enabled.');\n\t\t\t} else {\n\t\t\t\tthis.logService.info('Auto Sync is disabled.');\n\t\t\t}\n\t\t\tthis.updateAutoSync();\n\n\t\t\tif (this.hasToDisableMachineEventually()) {\n\t\t\t\tthis.disableMachineEventually();\n\t\t\t}\n\n\t\t\tthis._register(userDataSyncAccountService.onDidChangeAccount(() => this.updateAutoSync()));\n\t\t\tthis._register(userDataSyncStoreService.onDidChangeDonotMakeRequestsUntil(() => this.updateAutoSync()));\n\t\t\tthis._register(userDataSyncService.onDidChangeLocal(source => this.triggerSync([source], false, false)));\n\t\t\tthis._register(Event.filter(this.userDataSyncEnablementService.onDidChangeResourceEnablement, ([, enabled]) => enabled)(() => this.triggerSync(['resourceEnablement'], false, false)));\n\t\t\tthis._register(this.userDataSyncStoreManagementService.onDidChangeUserDataSyncStore(() => this.triggerSync(['userDataSyncStoreChanged'], false, false)));\n\t\t}\n\t}\n\n\tprivate updateAutoSync(): void {\n\t\tconst { enabled, message } = this.isAutoSyncEnabled();\n\t\tif (enabled) {\n\t\t\tif (this.autoSync.value === undefined) {\n\t\t\t\tthis.autoSync.value = new AutoSync(\n\t\t\t\t\tthis.lastSyncUrl,\n\t\t\t\t\t1000 * 60 * 5 /* 5 miutes */,\n\t\t\t\t\tthis.userDataSyncStoreManagementService,\n\t\t\t\t\tthis.userDataSyncStoreService,\n\t\t\t\t\tthis.userDataSyncService,\n\t\t\t\t\tthis.userDataSyncMachinesService,\n\t\t\t\t\tthis.logService,\n\t\t\t\t\tthis.telemetryService,\n\t\t\t\t\tthis.storageService,\n\t\t\t\t);\n\t\t\t\tthis.autoSync.value.register(\n\t\t\t\t\tthis.autoSync.value.onDidStartSync(\n\t\t\t\t\t\t() => (this.lastSyncTriggerTime = new Date().getTime()),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis.autoSync.value.register(\n\t\t\t\t\tthis.autoSync.value.onDidFinishSync((e) =>\n\t\t\t\t\t\tthis.onDidFinishSync(e),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (this.startAutoSync()) {\n\t\t\t\t\tthis.autoSync.value.start();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.syncTriggerDelayer.cancel();\n\t\t\tif (this.autoSync.value !== undefined) {\n\t\t\t\tif (message) {\n\t\t\t\t\tthis.logService.info(message);\n\t\t\t\t}\n\t\t\t\tthis.autoSync.clear();\n\t\t\t} else if (\n\n\t\t\t/* log message when auto sync is not disabled by user */\n\t\t\t\tmessage &&\n\t\t\t\tthis.userDataSyncEnablementService.isEnabled()\n\t\t\t) {\n\t\t\t\tthis.logService.info(message);\n\t\t\t}\n\t\t}\n\t}\n\n\t// For tests purpose only\n\tprotected startAutoSync(): boolean {\n\t\treturn true;\n\t}\n\n\tprivate isAutoSyncEnabled(): { enabled: boolean; message?: string } {\n\t\tif (!this.userDataSyncEnablementService.isEnabled()) {\n\t\t\treturn { enabled: false, message: \"Auto Sync: Disabled.\" };\n\t\t}\n\t\tif (!this.userDataSyncAccountService.account) {\n\t\t\treturn {\n\t\t\t\tenabled: false,\n\t\t\t\tmessage: \"Auto Sync: Suspended until auth token is available.\",\n\t\t\t};\n\t\t}\n\t\tif (this.userDataSyncStoreService.donotMakeRequestsUntil) {\n\t\t\treturn {\n\t\t\t\tenabled: false,\n\t\t\t\tmessage: `Auto Sync: Suspended until ${toLocalISOString(this.userDataSyncStoreService.donotMakeRequestsUntil)} because server is not accepting requests until then.`,\n\t\t\t};\n\t\t}\n\t\tif (this.suspendUntilRestart) {\n\t\t\treturn {\n\t\t\t\tenabled: false,\n\t\t\t\tmessage: \"Auto Sync: Suspended until restart.\",\n\t\t\t};\n\t\t}\n\t\treturn { enabled: true };\n\t}\n\n\tasync turnOn(): Promise<void> {\n\t\tthis.stopDisableMachineEventually();\n\t\tthis.lastSyncUrl = this.syncUrl;\n\t\tthis.updateEnablement(true);\n\t}\n\n\tasync turnOff(\n\t\teverywhere: boolean,\n\t\tsoftTurnOffOnError?: boolean,\n\t\tdonotRemoveMachine?: boolean,\n\t): Promise<void> {\n\t\ttry {\n\t\t\t// Remove machine\n\t\t\tif (\n\t\t\t\tthis.userDataSyncAccountService.account &&\n\t\t\t\t!donotRemoveMachine\n\t\t\t) {\n\t\t\t\tawait this.userDataSyncMachinesService.removeCurrentMachine();\n\t\t\t}\n\n\t\t\t// Disable Auto Sync\n\t\t\tthis.updateEnablement(false);\n\n\t\t\t// Reset Session\n\t\t\tthis.storageService.remove(sessionIdKey, StorageScope.APPLICATION);\n\n\t\t\t// Reset\n\t\t\tif (everywhere) {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"sandy081\";\n\t\t\t\t\t\tcomment: \"Reporting when settings sync is turned off in all devices\";\n\t\t\t\t\t}\n\t\t\t\t>(\"sync/turnOffEveryWhere\");\n\t\t\t\tawait this.userDataSyncService.reset();\n\t\t\t} else {\n\t\t\t\tawait this.userDataSyncService.resetLocal();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\tif (softTurnOffOnError) {\n\t\t\t\tthis.updateEnablement(false);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateEnablement(enabled: boolean): void {\n\t\tif (this.userDataSyncEnablementService.isEnabled() !== enabled) {\n\t\t\tthis.userDataSyncEnablementService.setEnablement(enabled);\n\t\t\tthis.updateAutoSync();\n\t\t}\n\t}\n\n\tprivate hasProductQualityChanged(): boolean {\n\t\treturn (\n\t\t\t!!this.previousProductQuality &&\n\t\t\t!!this.productQuality &&\n\t\t\tthis.previousProductQuality !== this.productQuality\n\t\t);\n\t}\n\n\tprivate async onDidFinishSync(error: Error | undefined): Promise<void> {\n\t\tif (!error) {\n\t\t\t// Sync finished without errors\n\t\t\tthis.successiveFailures = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t// Error while syncing\n\t\tconst userDataSyncError = UserDataSyncError.toUserDataSyncError(error);\n\n\t\t// Log to telemetry\n\t\tif (userDataSyncError instanceof UserDataAutoSyncError) {\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t{ code: string; service: string },\n\t\t\t\tAutoSyncErrorClassification\n\t\t\t>(`autosync/error`, {\n\t\t\t\tcode: userDataSyncError.code,\n\t\t\t\tservice:\n\t\t\t\t\tthis.userDataSyncStoreManagementService.userDataSyncStore!.url.toString(),\n\t\t\t});\n\t\t}\n\n\t\t// Session got expired\n\t\tif (userDataSyncError.code === UserDataSyncErrorCode.SessionExpired) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(\n\t\t\t\t\"Auto Sync: Turned off sync because current session is expired\",\n\t\t\t);\n\t\t}\n\n\t\t// Turned off from another device\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.TurnedOff) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(\n\t\t\t\t\"Auto Sync: Turned off sync because sync is turned off in the cloud\",\n\t\t\t);\n\t\t}\n\n\t\t// Exceeded Rate Limit on Client\n\t\telse if (\n\t\t\tuserDataSyncError.code ===\n\t\t\tUserDataSyncErrorCode.LocalTooManyRequests\n\t\t) {\n\t\t\tthis.suspendUntilRestart = true;\n\t\t\tthis.logService.info(\n\t\t\t\t\"Auto Sync: Suspended sync because of making too many requests to server\",\n\t\t\t);\n\t\t\tthis.updateAutoSync();\n\t\t}\n\n\t\t// Exceeded Rate Limit on Server\n\t\telse if (\n\t\t\tuserDataSyncError.code === UserDataSyncErrorCode.TooManyRequests\n\t\t) {\n\t\t\tawait this.turnOff(\n\t\t\t\tfalse,\n\t\t\t\ttrue /* force soft turnoff on error */,\n\t\t\t\ttrue /* do not disable machine because disabling a machine makes request to server and can fail with TooManyRequests */,\n\t\t\t);\n\t\t\tthis.disableMachineEventually();\n\t\t\tthis.logService.info(\n\t\t\t\t\"Auto Sync: Turned off sync because of making too many requests to server\",\n\t\t\t);\n\t\t}\n\n\t\t// Method Not Found\n\t\telse if (\n\t\t\tuserDataSyncError.code === UserDataSyncErrorCode.MethodNotFound\n\t\t) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(\n\t\t\t\t\"Auto Sync: Turned off sync because current client is making requests to server that are not supported\",\n\t\t\t);\n\t\t}\n\n\t\t// Upgrade Required or Gone\n\t\telse if (\n\t\t\tuserDataSyncError.code === UserDataSyncErrorCode.UpgradeRequired ||\n\t\t\tuserDataSyncError.code === UserDataSyncErrorCode.Gone\n\t\t) {\n\t\t\tawait this.turnOff(\n\t\t\t\tfalse,\n\t\t\t\ttrue /* force soft turnoff on error */,\n\t\t\t\ttrue /* do not disable machine because disabling a machine makes request to server and can fail with upgrade required or gone */,\n\t\t\t);\n\t\t\tthis.disableMachineEventually();\n\t\t\tthis.logService.info(\n\t\t\t\t\"Auto Sync: Turned off sync because current client is not compatible with server. Requires client upgrade.\",\n\t\t\t);\n\t\t}\n\n\t\t// Incompatible Local Content\n\t\telse if (\n\t\t\tuserDataSyncError.code ===\n\t\t\tUserDataSyncErrorCode.IncompatibleLocalContent\n\t\t) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(\n\t\t\t\t`Auto Sync: Turned off sync because server has ${userDataSyncError.resource} content with newer version than of client. Requires client upgrade.`,\n\t\t\t);\n\t\t}\n\n\t\t// Incompatible Remote Content\n\t\telse if (\n\t\t\tuserDataSyncError.code ===\n\t\t\tUserDataSyncErrorCode.IncompatibleRemoteContent\n\t\t) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(\n\t\t\t\t`Auto Sync: Turned off sync because server has ${userDataSyncError.resource} content with older version than of client. Requires server reset.`,\n\t\t\t);\n\t\t}\n\n\t\t// Service changed\n\t\telse if (\n\t\t\tuserDataSyncError.code === UserDataSyncErrorCode.ServiceChanged ||\n\t\t\tuserDataSyncError.code ===\n\t\t\t\tUserDataSyncErrorCode.DefaultServiceChanged\n\t\t) {\n\t\t\t// Check if default settings sync service has changed in web without changing the product quality\n\t\t\t// Then turn off settings sync and ask user to turn on again\n\t\t\tif (\n\t\t\t\tisWeb &&\n\t\t\t\tuserDataSyncError.code ===\n\t\t\t\t\tUserDataSyncErrorCode.DefaultServiceChanged &&\n\t\t\t\t!this.hasProductQualityChanged()\n\t\t\t) {\n\t\t\t\tawait this.turnOff(\n\t\t\t\t\tfalse,\n\t\t\t\t\ttrue /* force soft turnoff on error */,\n\t\t\t\t);\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Auto Sync: Turned off sync because default sync service is changed.\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Service has changed by the user. So turn off and turn on sync.\n\t\t\t// Show a prompt to the user about service change.\n\t\t\telse {\n\t\t\t\tawait this.turnOff(\n\t\t\t\t\tfalse,\n\t\t\t\t\ttrue /* force soft turnoff on error */,\n\t\t\t\t\ttrue /* do not disable machine */,\n\t\t\t\t);\n\t\t\t\tawait this.turnOn();\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Auto Sync: Sync Service changed. Turned off auto sync, reset local state and turned on auto sync.\",\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logService.error(userDataSyncError);\n\t\t\tthis.successiveFailures++;\n\t\t}\n\n\t\tthis._onError.fire(userDataSyncError);\n\t}\n\n\tprivate async disableMachineEventually(): Promise<void> {\n\t\tthis.storageService.store(\n\t\t\tdisableMachineEventuallyKey,\n\t\t\ttrue,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tawait timeout(1000 * 60 * 10);\n\n\t\t// Return if got stopped meanwhile.\n\t\tif (!this.hasToDisableMachineEventually()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.stopDisableMachineEventually();\n\n\t\t// disable only if sync is disabled\n\t\tif (\n\t\t\t!this.userDataSyncEnablementService.isEnabled() &&\n\t\t\tthis.userDataSyncAccountService.account\n\t\t) {\n\t\t\tawait this.userDataSyncMachinesService.removeCurrentMachine();\n\t\t}\n\t}\n\n\tprivate hasToDisableMachineEventually(): boolean {\n\t\treturn this.storageService.getBoolean(\n\t\t\tdisableMachineEventuallyKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tfalse,\n\t\t);\n\t}\n\n\tprivate stopDisableMachineEventually(): void {\n\t\tthis.storageService.remove(\n\t\t\tdisableMachineEventuallyKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t}\n\n\tprivate sources: string[] = [];\n\tasync triggerSync(\n\t\tsources: string[],\n\t\tskipIfSyncedRecently: boolean,\n\t\tdisableCache: boolean,\n\t): Promise<void> {\n\t\tif (this.autoSync.value === undefined) {\n\t\t\treturn this.syncTriggerDelayer.cancel();\n\t\t}\n\n\t\tif (\n\t\t\tskipIfSyncedRecently &&\n\t\t\tthis.lastSyncTriggerTime &&\n\t\t\tMath.round(\n\t\t\t\t(new Date().getTime() - this.lastSyncTriggerTime) / 1000,\n\t\t\t) < 10\n\t\t) {\n\t\t\tthis.logService.debug(\n\t\t\t\t\"Auto Sync: Skipped. Limited to once per 10 seconds.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.sources.push(...sources);\n\t\treturn this.syncTriggerDelayer.trigger(\n\t\t\tasync () => {\n\t\t\t\tthis.logService.trace(\"activity sources\", ...this.sources);\n\t\t\t\tconst providerId =\n\t\t\t\t\tthis.userDataSyncAccountService.account\n\t\t\t\t\t\t?.authenticationProviderId || \"\";\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t{ sources: string[]; providerId: string },\n\t\t\t\t\tAutoSyncClassification\n\t\t\t\t>(\"sync/triggered\", { sources: this.sources, providerId });\n\t\t\t\tthis.sources = [];\n\t\t\t\tif (this.autoSync.value) {\n\t\t\t\t\tawait this.autoSync.value.sync(\"Activity\", disableCache);\n\t\t\t\t}\n\t\t\t},\n\t\t\tthis.successiveFailures\n\t\t\t\t? this.getSyncTriggerDelayTime() *\n\t\t\t\t\t\t1 *\n\t\t\t\t\t\tMath.min(\n\t\t\t\t\t\t\tMath.pow(2, this.successiveFailures),\n\t\t\t\t\t\t\t60,\n\t\t\t\t\t\t) /* Delay exponentially until max 1 minute */\n\t\t\t\t: this.getSyncTriggerDelayTime(),\n\t\t);\n\t}\n\n\tprotected getSyncTriggerDelayTime(): number {\n\t\treturn 2000; /* Debounce for 2 seconds if there are no failures */\n\t}\n}\n\nclass AutoSync extends Disposable {\n\tprivate static readonly INTERVAL_SYNCING = \"Interval\";\n\n\tprivate readonly intervalHandler = this._register(\n\t\tnew MutableDisposable<IDisposable>(),\n\t);\n\n\tprivate readonly _onDidStartSync = this._register(new Emitter<void>());\n\treadonly onDidStartSync = this._onDidStartSync.event;\n\n\tprivate readonly _onDidFinishSync = this._register(\n\t\tnew Emitter<Error | undefined>(),\n\t);\n\treadonly onDidFinishSync = this._onDidFinishSync.event;\n\n\tprivate manifest: IUserDataManifest | null = null;\n\tprivate syncTask: IUserDataSyncTask | undefined;\n\tprivate syncPromise: CancelablePromise<void> | undefined;\n\n\tconstructor(\n\t\tprivate readonly lastSyncUrl: URI | undefined,\n\t\tprivate readonly interval: number /* in milliseconds */,\n\t\tprivate readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\tprivate readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\tprivate readonly userDataSyncService: IUserDataSyncService,\n\t\tprivate readonly userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t\tprivate readonly logService: IUserDataSyncLogService,\n\t\tprivate readonly telemetryService: ITelemetryService,\n\t\tprivate readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(): void {\n\t\tthis._register(\n\t\t\tthis.onDidFinishSync(() => this.waitUntilNextIntervalAndSync()),\n\t\t);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tif (this.syncPromise) {\n\t\t\t\t\tthis.syncPromise.cancel();\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Auto sync: Cancelled sync that is in progress\",\n\t\t\t\t\t);\n\t\t\t\t\tthis.syncPromise = undefined;\n\t\t\t\t}\n\t\t\t\tthis.syncTask?.stop();\n\t\t\t\tthis.logService.info(\"Auto Sync: Stopped\");\n\t\t\t}),\n\t\t);\n\t\tthis.sync(AutoSync.INTERVAL_SYNCING, false);\n\t}\n\n\tprivate waitUntilNextIntervalAndSync(): void {\n\t\tthis.intervalHandler.value = disposableTimeout(() => {\n\t\t\tthis.sync(AutoSync.INTERVAL_SYNCING, false);\n\t\t\tthis.intervalHandler.value = undefined;\n\t\t}, this.interval);\n\t}\n\n\tsync(reason: string, disableCache: boolean): Promise<void> {\n\t\tconst syncPromise = createCancelablePromise(async (token) => {\n\t\t\tif (this.syncPromise) {\n\t\t\t\ttry {\n\t\t\t\t\t// Wait until existing sync is finished\n\t\t\t\t\tthis.logService.debug(\n\t\t\t\t\t\t\"Auto Sync: Waiting until sync is finished.\",\n\t\t\t\t\t);\n\t\t\t\t\tawait this.syncPromise;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (isCancellationError(error)) {\n\t\t\t\t\t\t// Cancelled => Disposed. Donot continue sync.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.doSync(reason, disableCache, token);\n\t\t});\n\t\tthis.syncPromise = syncPromise;\n\t\tthis.syncPromise.finally(() => (this.syncPromise = undefined));\n\t\treturn this.syncPromise;\n\t}\n\n\tprivate hasSyncServiceChanged(): boolean {\n\t\treturn (\n\t\t\tthis.lastSyncUrl !== undefined &&\n\t\t\t!isEqual(\n\t\t\t\tthis.lastSyncUrl,\n\t\t\t\tthis.userDataSyncStoreManagementService.userDataSyncStore?.url,\n\t\t\t)\n\t\t);\n\t}\n\n\tprivate async hasDefaultServiceChanged(): Promise<boolean> {\n\t\tconst previous =\n\t\t\tawait this.userDataSyncStoreManagementService.getPreviousUserDataSyncStore();\n\t\tconst current =\n\t\t\tthis.userDataSyncStoreManagementService.userDataSyncStore;\n\t\t// check if defaults changed\n\t\treturn (\n\t\t\t!!current &&\n\t\t\t!!previous &&\n\t\t\t(!isEqual(current.defaultUrl, previous.defaultUrl) ||\n\t\t\t\t!isEqual(current.insidersUrl, previous.insidersUrl) ||\n\t\t\t\t!isEqual(current.stableUrl, previous.stableUrl))\n\t\t);\n\t}\n\n\tprivate async doSync(\n\t\treason: string,\n\t\tdisableCache: boolean,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tthis.logService.info(`Auto Sync: Triggered by ${reason}`);\n\t\tthis._onDidStartSync.fire();\n\n\t\tlet error: Error | undefined;\n\t\ttry {\n\t\t\tawait this.createAndRunSyncTask(disableCache, token);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\terror = e;\n\t\t\tif (\n\t\t\t\tUserDataSyncError.toUserDataSyncError(e).code ===\n\t\t\t\tUserDataSyncErrorCode.MethodNotFound\n\t\t\t) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Auto Sync: Client is making invalid requests. Cleaning up data...\",\n\t\t\t\t\t);\n\t\t\t\t\tawait this.userDataSyncService.cleanUpRemoteData();\n\t\t\t\t\tthis.logService.info(\"Auto Sync: Retrying sync...\");\n\t\t\t\t\tawait this.createAndRunSyncTask(disableCache, token);\n\t\t\t\t\terror = undefined;\n\t\t\t\t} catch (e1) {\n\t\t\t\t\tthis.logService.error(e1);\n\t\t\t\t\terror = e1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidFinishSync.fire(error);\n\t}\n\n\tprivate async createAndRunSyncTask(\n\t\tdisableCache: boolean,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tthis.syncTask = await this.userDataSyncService.createSyncTask(\n\t\t\tthis.manifest,\n\t\t\tdisableCache,\n\t\t);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tthis.manifest = this.syncTask.manifest;\n\n\t\t// Server has no data but this machine was synced before\n\t\tif (\n\t\t\tthis.manifest === null &&\n\t\t\t(await this.userDataSyncService.hasPreviouslySynced())\n\t\t) {\n\t\t\tif (this.hasSyncServiceChanged()) {\n\t\t\t\tif (await this.hasDefaultServiceChanged()) {\n\t\t\t\t\tthrow new UserDataAutoSyncError(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"default service changed\",\n\t\t\t\t\t\t\t\"Cannot sync because default service has changed\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tUserDataSyncErrorCode.DefaultServiceChanged,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new UserDataAutoSyncError(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"service changed\",\n\t\t\t\t\t\t\t\"Cannot sync because sync service has changed\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tUserDataSyncErrorCode.ServiceChanged,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Sync was turned off in the cloud\n\t\t\t\tthrow new UserDataAutoSyncError(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"turned off\",\n\t\t\t\t\t\t\"Cannot sync because syncing is turned off in the cloud\",\n\t\t\t\t\t),\n\t\t\t\t\tUserDataSyncErrorCode.TurnedOff,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst sessionId = this.storageService.get(\n\t\t\tsessionIdKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\t// Server session is different from client session\n\t\tif (sessionId && this.manifest && sessionId !== this.manifest.session) {\n\t\t\tif (this.hasSyncServiceChanged()) {\n\t\t\t\tif (await this.hasDefaultServiceChanged()) {\n\t\t\t\t\tthrow new UserDataAutoSyncError(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"default service changed\",\n\t\t\t\t\t\t\t\"Cannot sync because default service has changed\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tUserDataSyncErrorCode.DefaultServiceChanged,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new UserDataAutoSyncError(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"service changed\",\n\t\t\t\t\t\t\t\"Cannot sync because sync service has changed\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tUserDataSyncErrorCode.ServiceChanged,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new UserDataAutoSyncError(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"session expired\",\n\t\t\t\t\t\t\"Cannot sync because current session is expired\",\n\t\t\t\t\t),\n\t\t\t\t\tUserDataSyncErrorCode.SessionExpired,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst machines = await this.userDataSyncMachinesService.getMachines(\n\t\t\tthis.manifest || undefined,\n\t\t);\n\t\t// Return if cancellation is requested\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentMachine = machines.find((machine) => machine.isCurrent);\n\t\t// Check if sync was turned off from other machine\n\t\tif (currentMachine?.disabled) {\n\t\t\t// Throw TurnedOff error\n\t\t\tthrow new UserDataAutoSyncError(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"turned off machine\",\n\t\t\t\t\t\"Cannot sync because syncing is turned off on this machine from another machine.\",\n\t\t\t\t),\n\t\t\t\tUserDataSyncErrorCode.TurnedOff,\n\t\t\t);\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\t\tawait this.syncTask.run();\n\t\tthis.telemetryService.publicLog2<\n\t\t\t{\n\t\t\t\tduration: number;\n\t\t\t},\n\t\t\t{\n\t\t\t\towner: \"sandy081\";\n\t\t\t\tcomment: \"Report when running a sync operation\";\n\t\t\t\tduration: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"Time taken to run sync operation\";\n\t\t\t\t};\n\t\t\t}\n\t\t>(\"settingsSync:sync\", { duration: new Date().getTime() - startTime });\n\n\t\t// After syncing, get the manifest if it was not available before\n\t\tif (this.manifest === null) {\n\t\t\ttry {\n\t\t\t\tthis.manifest =\n\t\t\t\t\tawait this.userDataSyncStoreService.manifest(null);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new UserDataAutoSyncError(\n\t\t\t\t\ttoErrorMessage(error),\n\t\t\t\t\terror instanceof UserDataSyncError\n\t\t\t\t\t\t? error.code\n\t\t\t\t\t\t: UserDataSyncErrorCode.Unknown,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Update local session id\n\t\tif (this.manifest && this.manifest.session !== sessionId) {\n\t\t\tthis.storageService.store(\n\t\t\t\tsessionIdKey,\n\t\t\t\tthis.manifest.session,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\n\t\t// Return if cancellation is requested\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add current machine\n\t\tif (!currentMachine) {\n\t\t\tawait this.userDataSyncMachinesService.addCurrentMachine(\n\t\t\t\tthis.manifest || undefined,\n\t\t\t);\n\t\t}\n\t}\n\n\tregister<T extends IDisposable>(t: T): T {\n\t\treturn super._register(t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
