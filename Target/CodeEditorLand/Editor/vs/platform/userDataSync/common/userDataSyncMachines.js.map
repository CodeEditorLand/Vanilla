{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/userDataSyncMachines.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isAndroid, isChrome, isEdge, isFirefox, isSafari, isWeb, Platform, platform, PlatformToString } from '../../../base/common/platform.js';\nimport { escapeRegExpCharacters } from '../../../base/common/strings.js';\nimport { localize } from '../../../nls.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { getServiceMachineId } from '../../externalServices/common/serviceMachineId.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { IUserData, IUserDataManifest, IUserDataSyncLogService, IUserDataSyncStoreService } from './userDataSync.js';\n\nexport interface IMachineData {\n\tid: string;\n\tname: string;\n\tdisabled?: boolean;\n\tplatform?: string;\n}\n\nexport interface IMachinesData {\n\tversion: number;\n\tmachines: IMachineData[];\n}\n\nexport type IUserDataSyncMachine = Readonly<IMachineData> & { readonly isCurrent: boolean };\n\nexport const IUserDataSyncMachinesService = createDecorator<IUserDataSyncMachinesService>('IUserDataSyncMachinesService');\nexport interface IUserDataSyncMachinesService {\n\t_serviceBrand: any;\n\n\treadonly onDidChange: Event<void>;\n\n\tgetMachines(manifest?: IUserDataManifest): Promise<IUserDataSyncMachine[]>;\n\n\taddCurrentMachine(manifest?: IUserDataManifest): Promise<void>;\n\tremoveCurrentMachine(manifest?: IUserDataManifest): Promise<void>;\n\trenameMachine(machineId: string, name: string): Promise<void>;\n\tsetEnablements(enbalements: [string, boolean][]): Promise<void>;\n}\n\nconst currentMachineNameKey = 'sync.currentMachineName';\n\nconst Safari = 'Safari';\nconst Chrome = 'Chrome';\nconst Edge = 'Edge';\nconst Firefox = 'Firefox';\nconst Android = 'Android';\n\nexport function isWebPlatform(platform: string) {\n\tswitch (platform) {\n\t\tcase Safari:\n\t\tcase Chrome:\n\t\tcase Edge:\n\t\tcase Firefox:\n\t\tcase Android:\n\t\tcase PlatformToString(Platform.Web):\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction getPlatformName(): string {\n\tif (isSafari) { return Safari; }\n\tif (isChrome) { return Chrome; }\n\tif (isEdge) { return Edge; }\n\tif (isFirefox) { return Firefox; }\n\tif (isAndroid) { return Android; }\n\treturn PlatformToString(isWeb ? Platform.Web : platform);\n}\n\nexport class UserDataSyncMachinesService extends Disposable implements IUserDataSyncMachinesService {\n\n\tprivate static readonly VERSION = 1;\n\tprivate static readonly RESOURCE = 'machines';\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate readonly currentMachineIdPromise: Promise<string>;\n\tprivate userData: IUserData | null = null;\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tthis.currentMachineIdPromise = getServiceMachineId(environmentService, fileService, storageService);\n\t}\n\n\tasync getMachines(manifest?: IUserDataManifest): Promise<IUserDataSyncMachine[]> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\treturn machineData.machines.map<IUserDataSyncMachine>(machine => ({ ...machine, ...{ isCurrent: machine.id === currentMachineId } }));\n\t}\n\n\tasync addCurrentMachine(manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tif (!machineData.machines.some(({ id }) => id === currentMachineId)) {\n\t\t\tmachineData.machines.push({ id: currentMachineId, name: this.computeCurrentMachineName(machineData.machines), platform: getPlatformName() });\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tasync removeCurrentMachine(manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tconst updatedMachines = machineData.machines.filter(({ id }) => id !== currentMachineId);\n\t\tif (updatedMachines.length !== machineData.machines.length) {\n\t\t\tmachineData.machines = updatedMachines;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tasync renameMachine(machineId: string, name: string, manifest?: IUserDataManifest): Promise<void> {\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tconst machine = machineData.machines.find(({ id }) => id === machineId);\n\t\tif (machine) {\n\t\t\tmachine.name = name;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\t\tif (machineId === currentMachineId) {\n\t\t\t\tthis.storageService.store(currentMachineNameKey, name, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync setEnablements(enablements: [string, boolean][]): Promise<void> {\n\t\tconst machineData = await this.readMachinesData();\n\t\tfor (const [machineId, enabled] of enablements) {\n\t\t\tconst machine = machineData.machines.find(machine => machine.id === machineId);\n\t\t\tif (machine) {\n\t\t\t\tmachine.disabled = enabled ? undefined : true;\n\t\t\t}\n\t\t}\n\t\tawait this.writeMachinesData(machineData);\n\t}\n\n\tprivate computeCurrentMachineName(machines: IMachineData[]): string {\n\t\tconst previousName = this.storageService.get(currentMachineNameKey, StorageScope.APPLICATION);\n\t\tif (previousName) {\n\t\t\treturn previousName;\n\t\t}\n\n\t\tconst namePrefix = `${this.productService.embedderIdentifier ? `${this.productService.embedderIdentifier} - ` : ''}${getPlatformName()} (${this.productService.nameShort})`;\n\t\tconst nameRegEx = new RegExp(`${escapeRegExpCharacters(namePrefix)}\\\\s#(\\\\d+)`);\n\t\tlet nameIndex = 0;\n\t\tfor (const machine of machines) {\n\t\t\tconst matches = nameRegEx.exec(machine.name);\n\t\t\tconst index = matches ? parseInt(matches[1]) : 0;\n\t\t\tnameIndex = index > nameIndex ? index : nameIndex;\n\t\t}\n\t\treturn `${namePrefix} #${nameIndex + 1}`;\n\t}\n\n\tprivate async readMachinesData(manifest?: IUserDataManifest): Promise<IMachinesData> {\n\t\tthis.userData = await this.readUserData(manifest);\n\t\tconst machinesData = this.parse(this.userData);\n\t\tif (machinesData.version !== UserDataSyncMachinesService.VERSION) {\n\t\t\tthrow new Error(localize('error incompatible', \"Cannot read machines data as the current version is incompatible. Please update {0} and try again.\", this.productService.nameLong));\n\t\t}\n\t\treturn machinesData;\n\t}\n\n\tprivate async writeMachinesData(machinesData: IMachinesData): Promise<void> {\n\t\tconst content = JSON.stringify(machinesData);\n\t\tconst ref = await this.userDataSyncStoreService.writeResource(UserDataSyncMachinesService.RESOURCE, content, this.userData?.ref || null);\n\t\tthis.userData = { ref, content };\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate async readUserData(manifest?: IUserDataManifest): Promise<IUserData> {\n\t\tif (this.userData) {\n\n\t\t\tconst latestRef = manifest && manifest.latest ? manifest.latest[UserDataSyncMachinesService.RESOURCE] : undefined;\n\n\t\t\t// Last time synced resource and latest resource on server are same\n\t\t\tif (this.userData.ref === latestRef) {\n\t\t\t\treturn this.userData;\n\t\t\t}\n\n\t\t\t// There is no resource on server and last time it was synced with no resource\n\t\t\tif (latestRef === undefined && this.userData.content === null) {\n\t\t\t\treturn this.userData;\n\t\t\t}\n\t\t}\n\n\t\treturn this.userDataSyncStoreService.readResource(UserDataSyncMachinesService.RESOURCE, this.userData);\n\t}\n\n\tprivate parse(userData: IUserData): IMachinesData {\n\t\tif (userData.content !== null) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(userData.content);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tversion: UserDataSyncMachinesService.VERSION,\n\t\t\tmachines: []\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["platform", "machine"]
}
