{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/userDataSyncMachines.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport {\n\tPlatform,\n\tPlatformToString,\n\tisAndroid,\n\tisChrome,\n\tisEdge,\n\tisFirefox,\n\tisSafari,\n\tisWeb,\n\tplatform,\n} from \"../../../base/common/platform.js\";\nimport { escapeRegExpCharacters } from \"../../../base/common/strings.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport { getServiceMachineId } from \"../../externalServices/common/serviceMachineId.js\";\nimport { IFileService } from \"../../files/common/files.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../storage/common/storage.js\";\nimport {\n\ttype IUserData,\n\ttype IUserDataManifest,\n\tIUserDataSyncLogService,\n\tIUserDataSyncStoreService,\n} from \"./userDataSync.js\";\n\nexport interface IMachineData {\n\tid: string;\n\tname: string;\n\tdisabled?: boolean;\n\tplatform?: string;\n}\n\nexport interface IMachinesData {\n\tversion: number;\n\tmachines: IMachineData[];\n}\n\nexport type IUserDataSyncMachine = Readonly<IMachineData> & {\n\treadonly isCurrent: boolean;\n};\n\nexport const IUserDataSyncMachinesService =\n\tcreateDecorator<IUserDataSyncMachinesService>(\n\t\t\"IUserDataSyncMachinesService\",\n\t);\nexport interface IUserDataSyncMachinesService {\n\t_serviceBrand: any;\n\n\treadonly onDidChange: Event<void>;\n\n\tgetMachines(manifest?: IUserDataManifest): Promise<IUserDataSyncMachine[]>;\n\n\taddCurrentMachine(manifest?: IUserDataManifest): Promise<void>;\n\tremoveCurrentMachine(manifest?: IUserDataManifest): Promise<void>;\n\trenameMachine(machineId: string, name: string): Promise<void>;\n\tsetEnablements(enbalements: [string, boolean][]): Promise<void>;\n}\n\nconst currentMachineNameKey = \"sync.currentMachineName\";\n\nconst Safari = \"Safari\";\nconst Chrome = \"Chrome\";\nconst Edge = \"Edge\";\nconst Firefox = \"Firefox\";\nconst Android = \"Android\";\n\nexport function isWebPlatform(platform: string) {\n\tswitch (platform) {\n\t\tcase Safari:\n\t\tcase Chrome:\n\t\tcase Edge:\n\t\tcase Firefox:\n\t\tcase Android:\n\t\tcase PlatformToString(Platform.Web):\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction getPlatformName(): string {\n\tif (isSafari) {\n\t\treturn Safari;\n\t}\n\tif (isChrome) {\n\t\treturn Chrome;\n\t}\n\tif (isEdge) {\n\t\treturn Edge;\n\t}\n\tif (isFirefox) {\n\t\treturn Firefox;\n\t}\n\tif (isAndroid) {\n\t\treturn Android;\n\t}\n\treturn PlatformToString(isWeb ? Platform.Web : platform);\n}\n\nexport class UserDataSyncMachinesService\n\textends Disposable\n\timplements IUserDataSyncMachinesService\n{\n\tprivate static readonly VERSION = 1;\n\tprivate static readonly RESOURCE = \"machines\";\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate readonly currentMachineIdPromise: Promise<string>;\n\tprivate userData: IUserData | null = null;\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUserDataSyncStoreService\n\t\tprivate readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLogService\n\t\tprivate readonly logService: IUserDataSyncLogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tthis.currentMachineIdPromise = getServiceMachineId(\n\t\t\tenvironmentService,\n\t\t\tfileService,\n\t\t\tstorageService,\n\t\t);\n\t}\n\n\tasync getMachines(\n\t\tmanifest?: IUserDataManifest,\n\t): Promise<IUserDataSyncMachine[]> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\treturn machineData.machines.map<IUserDataSyncMachine>((machine) => ({\n\t\t\t...machine,\n\t\t\t...{ isCurrent: machine.id === currentMachineId },\n\t\t}));\n\t}\n\n\tasync addCurrentMachine(manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tif (!machineData.machines.some(({ id }) => id === currentMachineId)) {\n\t\t\tmachineData.machines.push({\n\t\t\t\tid: currentMachineId,\n\t\t\t\tname: this.computeCurrentMachineName(machineData.machines),\n\t\t\t\tplatform: getPlatformName(),\n\t\t\t});\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tasync removeCurrentMachine(manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tconst updatedMachines = machineData.machines.filter(\n\t\t\t({ id }) => id !== currentMachineId,\n\t\t);\n\t\tif (updatedMachines.length !== machineData.machines.length) {\n\t\t\tmachineData.machines = updatedMachines;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tasync renameMachine(\n\t\tmachineId: string,\n\t\tname: string,\n\t\tmanifest?: IUserDataManifest,\n\t): Promise<void> {\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tconst machine = machineData.machines.find(({ id }) => id === machineId);\n\t\tif (machine) {\n\t\t\tmachine.name = name;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\t\tif (machineId === currentMachineId) {\n\t\t\t\tthis.storageService.store(\n\t\t\t\t\tcurrentMachineNameKey,\n\t\t\t\t\tname,\n\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync setEnablements(enablements: [string, boolean][]): Promise<void> {\n\t\tconst machineData = await this.readMachinesData();\n\t\tfor (const [machineId, enabled] of enablements) {\n\t\t\tconst machine = machineData.machines.find(\n\t\t\t\t(machine) => machine.id === machineId,\n\t\t\t);\n\t\t\tif (machine) {\n\t\t\t\tmachine.disabled = enabled ? undefined : true;\n\t\t\t}\n\t\t}\n\t\tawait this.writeMachinesData(machineData);\n\t}\n\n\tprivate computeCurrentMachineName(machines: IMachineData[]): string {\n\t\tconst previousName = this.storageService.get(\n\t\t\tcurrentMachineNameKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tif (previousName) {\n\t\t\treturn previousName;\n\t\t}\n\n\t\tconst namePrefix = `${this.productService.embedderIdentifier ? `${this.productService.embedderIdentifier} - ` : \"\"}${getPlatformName()} (${this.productService.nameShort})`;\n\t\tconst nameRegEx = new RegExp(\n\t\t\t`${escapeRegExpCharacters(namePrefix)}\\\\s#(\\\\d+)`,\n\t\t);\n\t\tlet nameIndex = 0;\n\t\tfor (const machine of machines) {\n\t\t\tconst matches = nameRegEx.exec(machine.name);\n\t\t\tconst index = matches ? Number.parseInt(matches[1]) : 0;\n\t\t\tnameIndex = index > nameIndex ? index : nameIndex;\n\t\t}\n\t\treturn `${namePrefix} #${nameIndex + 1}`;\n\t}\n\n\tprivate async readMachinesData(\n\t\tmanifest?: IUserDataManifest,\n\t): Promise<IMachinesData> {\n\t\tthis.userData = await this.readUserData(manifest);\n\t\tconst machinesData = this.parse(this.userData);\n\t\tif (machinesData.version !== UserDataSyncMachinesService.VERSION) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"error incompatible\",\n\t\t\t\t\t\"Cannot read machines data as the current version is incompatible. Please update {0} and try again.\",\n\t\t\t\t\tthis.productService.nameLong,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn machinesData;\n\t}\n\n\tprivate async writeMachinesData(\n\t\tmachinesData: IMachinesData,\n\t): Promise<void> {\n\t\tconst content = JSON.stringify(machinesData);\n\t\tconst ref = await this.userDataSyncStoreService.writeResource(\n\t\t\tUserDataSyncMachinesService.RESOURCE,\n\t\t\tcontent,\n\t\t\tthis.userData?.ref || null,\n\t\t);\n\t\tthis.userData = { ref, content };\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate async readUserData(\n\t\tmanifest?: IUserDataManifest,\n\t): Promise<IUserData> {\n\t\tif (this.userData) {\n\t\t\tconst latestRef =\n\t\t\t\tmanifest && manifest.latest\n\t\t\t\t\t? manifest.latest[UserDataSyncMachinesService.RESOURCE]\n\t\t\t\t\t: undefined;\n\n\t\t\t// Last time synced resource and latest resource on server are same\n\t\t\tif (this.userData.ref === latestRef) {\n\t\t\t\treturn this.userData;\n\t\t\t}\n\n\t\t\t// There is no resource on server and last time it was synced with no resource\n\t\t\tif (latestRef === undefined && this.userData.content === null) {\n\t\t\t\treturn this.userData;\n\t\t\t}\n\t\t}\n\n\t\treturn this.userDataSyncStoreService.readResource(\n\t\t\tUserDataSyncMachinesService.RESOURCE,\n\t\t\tthis.userData,\n\t\t);\n\t}\n\n\tprivate parse(userData: IUserData): IMachinesData {\n\t\tif (userData.content !== null) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(userData.content);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tversion: UserDataSyncMachinesService.VERSION,\n\t\t\tmachines: [],\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["platform", "machine"]
}
