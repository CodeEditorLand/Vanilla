{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/userDataSyncStoreService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, timeout } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { getErrorMessage, isCancellationError } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { isWeb } from '../../../base/common/platform.js';\nimport { ConfigurationSyncStore } from '../../../base/common/product.js';\nimport { joinPath, relativePath } from '../../../base/common/resources.js';\nimport { isObject, isString } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { IHeaders, IRequestContext, IRequestOptions } from '../../../base/parts/request/common/request.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { asJson, asText, asTextOrError, hasNoContent, IRequestService, isSuccess, isSuccess as isSuccessContext } from '../../request/common/request.js';\nimport { getServiceMachineId } from '../../externalServices/common/serviceMachineId.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { HEADER_EXECUTION_ID, HEADER_OPERATION_ID, IAuthenticationProvider, IResourceRefHandle, IUserData, IUserDataManifest, IUserDataSyncLogService, IUserDataSyncStore, IUserDataSyncStoreManagementService, IUserDataSyncStoreService, ServerResource, SYNC_SERVICE_URL_TYPE, UserDataSyncErrorCode, UserDataSyncStoreError, UserDataSyncStoreType } from './userDataSync.js';\nimport { VSBufferReadableStream } from '../../../base/common/buffer.js';\n\nconst CONFIGURATION_SYNC_STORE_KEY = 'configurationSync.store';\nconst SYNC_PREVIOUS_STORE = 'sync.previous.store';\nconst DONOT_MAKE_REQUESTS_UNTIL_KEY = 'sync.donot-make-requests-until';\nconst USER_SESSION_ID_KEY = 'sync.user-session-id';\nconst MACHINE_SESSION_ID_KEY = 'sync.machine-session-id';\nconst REQUEST_SESSION_LIMIT = 100;\nconst REQUEST_SESSION_INTERVAL = 1000 * 60 * 5; /* 5 minutes */\n\ntype UserDataSyncStore = IUserDataSyncStore & { defaultType: UserDataSyncStoreType };\n\nexport abstract class AbstractUserDataSyncStoreManagementService extends Disposable implements IUserDataSyncStoreManagementService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidChangeUserDataSyncStore = this._register(new Emitter<void>());\n\treadonly onDidChangeUserDataSyncStore = this._onDidChangeUserDataSyncStore.event;\n\tprivate _userDataSyncStore: UserDataSyncStore | undefined;\n\tget userDataSyncStore(): UserDataSyncStore | undefined { return this._userDataSyncStore; }\n\n\tprotected get userDataSyncStoreType(): UserDataSyncStoreType | undefined {\n\t\treturn this.storageService.get(SYNC_SERVICE_URL_TYPE, StorageScope.APPLICATION) as UserDataSyncStoreType;\n\t}\n\tprotected set userDataSyncStoreType(type: UserDataSyncStoreType | undefined) {\n\t\tthis.storageService.store(SYNC_SERVICE_URL_TYPE, type, StorageScope.APPLICATION, isWeb ? StorageTarget.USER /* sync in web */ : StorageTarget.MACHINE);\n\t}\n\n\tconstructor(\n\t\t@IProductService protected readonly productService: IProductService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@IStorageService protected readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis.updateUserDataSyncStore();\n\t\tconst disposable = this._register(new DisposableStore());\n\t\tthis._register(Event.filter(storageService.onDidChangeValue(StorageScope.APPLICATION, SYNC_SERVICE_URL_TYPE, disposable), () => this.userDataSyncStoreType !== this.userDataSyncStore?.type, disposable)(() => this.updateUserDataSyncStore()));\n\t}\n\n\tprotected updateUserDataSyncStore(): void {\n\t\tthis._userDataSyncStore = this.toUserDataSyncStore(this.productService[CONFIGURATION_SYNC_STORE_KEY]);\n\t\tthis._onDidChangeUserDataSyncStore.fire();\n\t}\n\n\tprotected toUserDataSyncStore(configurationSyncStore: ConfigurationSyncStore & { web?: ConfigurationSyncStore } | undefined): UserDataSyncStore | undefined {\n\t\tif (!configurationSyncStore) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// Check for web overrides for backward compatibility while reading previous store\n\t\tconfigurationSyncStore = isWeb && configurationSyncStore.web ? { ...configurationSyncStore, ...configurationSyncStore.web } : configurationSyncStore;\n\t\tif (isString(configurationSyncStore.url)\n\t\t\t&& isObject(configurationSyncStore.authenticationProviders)\n\t\t\t&& Object.keys(configurationSyncStore.authenticationProviders).every(authenticationProviderId => Array.isArray(configurationSyncStore.authenticationProviders[authenticationProviderId].scopes))\n\t\t) {\n\t\t\tconst syncStore = configurationSyncStore as ConfigurationSyncStore;\n\t\t\tconst canSwitch = !!syncStore.canSwitch;\n\t\t\tconst defaultType: UserDataSyncStoreType = syncStore.url === syncStore.insidersUrl ? 'insiders' : 'stable';\n\t\t\tconst type: UserDataSyncStoreType = (canSwitch ? this.userDataSyncStoreType : undefined) || defaultType;\n\t\t\tconst url = type === 'insiders' ? syncStore.insidersUrl\n\t\t\t\t: type === 'stable' ? syncStore.stableUrl\n\t\t\t\t\t: syncStore.url;\n\t\t\treturn {\n\t\t\t\turl: URI.parse(url),\n\t\t\t\ttype,\n\t\t\t\tdefaultType,\n\t\t\t\tdefaultUrl: URI.parse(syncStore.url),\n\t\t\t\tstableUrl: URI.parse(syncStore.stableUrl),\n\t\t\t\tinsidersUrl: URI.parse(syncStore.insidersUrl),\n\t\t\t\tcanSwitch,\n\t\t\t\tauthenticationProviders: Object.keys(syncStore.authenticationProviders).reduce<IAuthenticationProvider[]>((result, id) => {\n\t\t\t\t\tresult.push({ id, scopes: syncStore.authenticationProviders[id].scopes });\n\t\t\t\t\treturn result;\n\t\t\t\t}, [])\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tabstract switch(type: UserDataSyncStoreType): Promise<void>;\n\tabstract getPreviousUserDataSyncStore(): Promise<IUserDataSyncStore | undefined>;\n\n}\n\nexport class UserDataSyncStoreManagementService extends AbstractUserDataSyncStoreManagementService implements IUserDataSyncStoreManagementService {\n\n\tprivate readonly previousConfigurationSyncStore: ConfigurationSyncStore | undefined;\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper(productService, configurationService, storageService);\n\n\t\tconst previousConfigurationSyncStore = this.storageService.get(SYNC_PREVIOUS_STORE, StorageScope.APPLICATION);\n\t\tif (previousConfigurationSyncStore) {\n\t\t\tthis.previousConfigurationSyncStore = JSON.parse(previousConfigurationSyncStore);\n\t\t}\n\n\t\tconst syncStore = this.productService[CONFIGURATION_SYNC_STORE_KEY];\n\t\tif (syncStore) {\n\t\t\tthis.storageService.store(SYNC_PREVIOUS_STORE, JSON.stringify(syncStore), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(SYNC_PREVIOUS_STORE, StorageScope.APPLICATION);\n\t\t}\n\t}\n\n\tasync switch(type: UserDataSyncStoreType): Promise<void> {\n\t\tif (type !== this.userDataSyncStoreType) {\n\t\t\tthis.userDataSyncStoreType = type;\n\t\t\tthis.updateUserDataSyncStore();\n\t\t}\n\t}\n\n\tasync getPreviousUserDataSyncStore(): Promise<IUserDataSyncStore | undefined> {\n\t\treturn this.toUserDataSyncStore(this.previousConfigurationSyncStore);\n\t}\n}\n\nexport class UserDataSyncStoreClient extends Disposable {\n\n\tprivate userDataSyncStoreUrl: URI | undefined;\n\n\tprivate authToken: { token: string; type: string } | undefined;\n\tprivate readonly commonHeadersPromise: Promise<IHeaders>;\n\tprivate readonly session: RequestsSession;\n\n\tprivate _onTokenFailed = this._register(new Emitter<UserDataSyncErrorCode>());\n\treadonly onTokenFailed = this._onTokenFailed.event;\n\n\tprivate _onTokenSucceed: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onTokenSucceed: Event<void> = this._onTokenSucceed.event;\n\n\tprivate _donotMakeRequestsUntil: Date | undefined = undefined;\n\tget donotMakeRequestsUntil() { return this._donotMakeRequestsUntil; }\n\tprivate _onDidChangeDonotMakeRequestsUntil = this._register(new Emitter<void>());\n\treadonly onDidChangeDonotMakeRequestsUntil = this._onDidChangeDonotMakeRequestsUntil.event;\n\n\tconstructor(\n\t\tuserDataSyncStoreUrl: URI | undefined,\n\t\t@IProductService productService: IProductService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis.updateUserDataSyncStoreUrl(userDataSyncStoreUrl);\n\t\tthis.commonHeadersPromise = getServiceMachineId(environmentService, fileService, storageService)\n\t\t\t.then(uuid => {\n\t\t\t\tconst headers: IHeaders = {\n\t\t\t\t\t'X-Client-Name': `${productService.applicationName}${isWeb ? '-web' : ''}`,\n\t\t\t\t\t'X-Client-Version': productService.version,\n\t\t\t\t};\n\t\t\t\tif (productService.commit) {\n\t\t\t\t\theaders['X-Client-Commit'] = productService.commit;\n\t\t\t\t}\n\t\t\t\treturn headers;\n\t\t\t});\n\n\t\t/* A requests session that limits requests per sessions */\n\t\tthis.session = new RequestsSession(REQUEST_SESSION_LIMIT, REQUEST_SESSION_INTERVAL, this.requestService, this.logService);\n\t\tthis.initDonotMakeRequestsUntil();\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this.resetDonotMakeRequestsUntilPromise) {\n\t\t\t\tthis.resetDonotMakeRequestsUntilPromise.cancel();\n\t\t\t\tthis.resetDonotMakeRequestsUntilPromise = undefined;\n\t\t\t}\n\t\t}));\n\t}\n\n\tsetAuthToken(token: string, type: string): void {\n\t\tthis.authToken = { token, type };\n\t}\n\n\tprotected updateUserDataSyncStoreUrl(userDataSyncStoreUrl: URI | undefined): void {\n\t\tthis.userDataSyncStoreUrl = userDataSyncStoreUrl ? joinPath(userDataSyncStoreUrl, 'v1') : undefined;\n\t}\n\n\tprivate initDonotMakeRequestsUntil(): void {\n\t\tconst donotMakeRequestsUntil = this.storageService.getNumber(DONOT_MAKE_REQUESTS_UNTIL_KEY, StorageScope.APPLICATION);\n\t\tif (donotMakeRequestsUntil && Date.now() < donotMakeRequestsUntil) {\n\t\t\tthis.setDonotMakeRequestsUntil(new Date(donotMakeRequestsUntil));\n\t\t}\n\t}\n\n\tprivate resetDonotMakeRequestsUntilPromise: CancelablePromise<void> | undefined = undefined;\n\tprivate setDonotMakeRequestsUntil(donotMakeRequestsUntil: Date | undefined): void {\n\t\tif (this._donotMakeRequestsUntil?.getTime() !== donotMakeRequestsUntil?.getTime()) {\n\t\t\tthis._donotMakeRequestsUntil = donotMakeRequestsUntil;\n\n\t\t\tif (this.resetDonotMakeRequestsUntilPromise) {\n\t\t\t\tthis.resetDonotMakeRequestsUntilPromise.cancel();\n\t\t\t\tthis.resetDonotMakeRequestsUntilPromise = undefined;\n\t\t\t}\n\n\t\t\tif (this._donotMakeRequestsUntil) {\n\t\t\t\tthis.storageService.store(DONOT_MAKE_REQUESTS_UNTIL_KEY, this._donotMakeRequestsUntil.getTime(), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t\tthis.resetDonotMakeRequestsUntilPromise = createCancelablePromise(token => timeout(this._donotMakeRequestsUntil!.getTime() - Date.now(), token).then(() => this.setDonotMakeRequestsUntil(undefined)));\n\t\t\t\tthis.resetDonotMakeRequestsUntilPromise.then(null, e => null /* ignore error */);\n\t\t\t} else {\n\t\t\t\tthis.storageService.remove(DONOT_MAKE_REQUESTS_UNTIL_KEY, StorageScope.APPLICATION);\n\t\t\t}\n\n\t\t\tthis._onDidChangeDonotMakeRequestsUntil.fire();\n\t\t}\n\t}\n\n\t// #region Collection\n\n\tasync getAllCollections(headers: IHeaders = {}): Promise<string[]> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = joinPath(this.userDataSyncStoreUrl, 'collection').toString();\n\t\theaders = { ...headers };\n\t\theaders['Content-Type'] = 'application/json';\n\n\t\tconst context = await this.request(url, { type: 'GET', headers }, [], CancellationToken.None);\n\n\t\treturn (await asJson<{ id: string }[]>(context))?.map(({ id }) => id) || [];\n\t}\n\n\tasync createCollection(headers: IHeaders = {}): Promise<string> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = joinPath(this.userDataSyncStoreUrl, 'collection').toString();\n\t\theaders = { ...headers };\n\t\theaders['Content-Type'] = Mimes.text;\n\n\t\tconst context = await this.request(url, { type: 'POST', headers }, [], CancellationToken.None);\n\t\tconst collectionId = await asTextOrError(context);\n\t\tif (!collectionId) {\n\t\t\tthrow new UserDataSyncStoreError('Server did not return the collection id', url, UserDataSyncErrorCode.NoCollection, context.res.statusCode, context.res.headers[HEADER_OPERATION_ID]);\n\t\t}\n\t\treturn collectionId;\n\t}\n\n\tasync deleteCollection(collection?: string, headers: IHeaders = {}): Promise<void> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = collection ? joinPath(this.userDataSyncStoreUrl, 'collection', collection).toString() : joinPath(this.userDataSyncStoreUrl, 'collection').toString();\n\t\theaders = { ...headers };\n\n\t\tawait this.request(url, { type: 'DELETE', headers }, [], CancellationToken.None);\n\t}\n\n\t// #endregion\n\n\t// #region Resource\n\n\tasync getAllResourceRefs(resource: ServerResource, collection?: string): Promise<IResourceRefHandle[]> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst uri = this.getResourceUrl(this.userDataSyncStoreUrl, collection, resource);\n\t\tconst headers: IHeaders = {};\n\n\t\tconst context = await this.request(uri.toString(), { type: 'GET', headers }, [], CancellationToken.None);\n\n\t\tconst result = await asJson<{ url: string; created: number }[]>(context) || [];\n\t\treturn result.map(({ url, created }) => ({ ref: relativePath(uri, uri.with({ path: url }))!, created: created * 1000 /* Server returns in seconds */ }));\n\t}\n\n\tasync resolveResourceContent(resource: ServerResource, ref: string, collection?: string, headers: IHeaders = {}): Promise<string | null> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = joinPath(this.getResourceUrl(this.userDataSyncStoreUrl, collection, resource), ref).toString();\n\t\theaders = { ...headers };\n\t\theaders['Cache-Control'] = 'no-cache';\n\n\t\tconst context = await this.request(url, { type: 'GET', headers }, [], CancellationToken.None);\n\t\tconst content = await asTextOrError(context);\n\t\treturn content;\n\t}\n\n\tasync deleteResource(resource: ServerResource, ref: string | null, collection?: string): Promise<void> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = ref !== null ? joinPath(this.getResourceUrl(this.userDataSyncStoreUrl, collection, resource), ref).toString() : this.getResourceUrl(this.userDataSyncStoreUrl, collection, resource).toString();\n\t\tconst headers: IHeaders = {};\n\n\t\tawait this.request(url, { type: 'DELETE', headers }, [], CancellationToken.None);\n\t}\n\n\tasync deleteResources(): Promise<void> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = joinPath(this.userDataSyncStoreUrl, 'resource').toString();\n\t\tconst headers: IHeaders = { 'Content-Type': Mimes.text };\n\n\t\tawait this.request(url, { type: 'DELETE', headers }, [], CancellationToken.None);\n\t}\n\n\tasync readResource(resource: ServerResource, oldValue: IUserData | null, collection?: string, headers: IHeaders = {}): Promise<IUserData> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = joinPath(this.getResourceUrl(this.userDataSyncStoreUrl, collection, resource), 'latest').toString();\n\t\theaders = { ...headers };\n\t\t// Disable caching as they are cached by synchronisers\n\t\theaders['Cache-Control'] = 'no-cache';\n\t\tif (oldValue) {\n\t\t\theaders['If-None-Match'] = oldValue.ref;\n\t\t}\n\n\t\tconst context = await this.request(url, { type: 'GET', headers }, [304], CancellationToken.None);\n\n\t\tlet userData: IUserData | null = null;\n\t\tif (context.res.statusCode === 304) {\n\t\t\tuserData = oldValue;\n\t\t}\n\n\t\tif (userData === null) {\n\t\t\tconst ref = context.res.headers['etag'];\n\t\t\tif (!ref) {\n\t\t\t\tthrow new UserDataSyncStoreError('Server did not return the ref', url, UserDataSyncErrorCode.NoRef, context.res.statusCode, context.res.headers[HEADER_OPERATION_ID]);\n\t\t\t}\n\n\t\t\tconst content = await asTextOrError(context);\n\t\t\tif (!content && context.res.statusCode === 304) {\n\t\t\t\tthrow new UserDataSyncStoreError('Empty response', url, UserDataSyncErrorCode.EmptyResponse, context.res.statusCode, context.res.headers[HEADER_OPERATION_ID]);\n\t\t\t}\n\n\t\t\tuserData = { ref, content };\n\t\t}\n\n\t\treturn userData;\n\t}\n\n\tasync writeResource(resource: ServerResource, data: string, ref: string | null, collection?: string, headers: IHeaders = {}): Promise<string> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = this.getResourceUrl(this.userDataSyncStoreUrl, collection, resource).toString();\n\t\theaders = { ...headers };\n\t\theaders['Content-Type'] = Mimes.text;\n\t\tif (ref) {\n\t\t\theaders['If-Match'] = ref;\n\t\t}\n\n\t\tconst context = await this.request(url, { type: 'POST', data, headers }, [], CancellationToken.None);\n\n\t\tconst newRef = context.res.headers['etag'];\n\t\tif (!newRef) {\n\t\t\tthrow new UserDataSyncStoreError('Server did not return the ref', url, UserDataSyncErrorCode.NoRef, context.res.statusCode, context.res.headers[HEADER_OPERATION_ID]);\n\t\t}\n\t\treturn newRef;\n\t}\n\n\t// #endregion\n\n\tasync manifest(oldValue: IUserDataManifest | null, headers: IHeaders = {}): Promise<IUserDataManifest | null> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = joinPath(this.userDataSyncStoreUrl, 'manifest').toString();\n\t\theaders = { ...headers };\n\t\theaders['Content-Type'] = 'application/json';\n\t\tif (oldValue) {\n\t\t\theaders['If-None-Match'] = oldValue.ref;\n\t\t}\n\n\t\tconst context = await this.request(url, { type: 'GET', headers }, [304], CancellationToken.None);\n\n\t\tlet manifest: IUserDataManifest | null = null;\n\t\tif (context.res.statusCode === 304) {\n\t\t\tmanifest = oldValue;\n\t\t}\n\n\t\tif (!manifest) {\n\t\t\tconst ref = context.res.headers['etag'];\n\t\t\tif (!ref) {\n\t\t\t\tthrow new UserDataSyncStoreError('Server did not return the ref', url, UserDataSyncErrorCode.NoRef, context.res.statusCode, context.res.headers[HEADER_OPERATION_ID]);\n\t\t\t}\n\n\t\t\tconst content = await asTextOrError(context);\n\t\t\tif (!content && context.res.statusCode === 304) {\n\t\t\t\tthrow new UserDataSyncStoreError('Empty response', url, UserDataSyncErrorCode.EmptyResponse, context.res.statusCode, context.res.headers[HEADER_OPERATION_ID]);\n\t\t\t}\n\n\t\t\tif (content) {\n\t\t\t\tmanifest = { ...JSON.parse(content), ref };\n\t\t\t}\n\t\t}\n\n\t\tconst currentSessionId = this.storageService.get(USER_SESSION_ID_KEY, StorageScope.APPLICATION);\n\n\t\tif (currentSessionId && manifest && currentSessionId !== manifest.session) {\n\t\t\t// Server session is different from client session so clear cached session.\n\t\t\tthis.clearSession();\n\t\t}\n\n\t\tif (manifest === null && currentSessionId) {\n\t\t\t// server session is cleared so clear cached session.\n\t\t\tthis.clearSession();\n\t\t}\n\n\t\tif (manifest) {\n\t\t\t// update session\n\t\t\tthis.storageService.store(USER_SESSION_ID_KEY, manifest.session, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t}\n\n\t\treturn manifest;\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tawait this.deleteCollection();\n\t\tawait this.deleteResources();\n\n\t\t// clear cached session.\n\t\tthis.clearSession();\n\t}\n\n\tasync getActivityData(): Promise<VSBufferReadableStream> {\n\t\tif (!this.userDataSyncStoreUrl) {\n\t\t\tthrow new Error('No settings sync store url configured.');\n\t\t}\n\n\t\tconst url = joinPath(this.userDataSyncStoreUrl, 'download').toString();\n\t\tconst headers: IHeaders = {};\n\n\t\tconst context = await this.request(url, { type: 'GET', headers }, [], CancellationToken.None);\n\n\t\tif (!isSuccess(context)) {\n\t\t\tthrow new UserDataSyncStoreError('Server returned ' + context.res.statusCode, url, UserDataSyncErrorCode.EmptyResponse, context.res.statusCode, context.res.headers[HEADER_OPERATION_ID]);\n\t\t}\n\n\t\tif (hasNoContent(context)) {\n\t\t\tthrow new UserDataSyncStoreError('Empty response', url, UserDataSyncErrorCode.EmptyResponse, context.res.statusCode, context.res.headers[HEADER_OPERATION_ID]);\n\t\t}\n\n\t\treturn context.stream;\n\t}\n\n\tprivate getResourceUrl(userDataSyncStoreUrl: URI, collection: string | undefined, resource: ServerResource): URI {\n\t\treturn collection ? joinPath(userDataSyncStoreUrl, 'collection', collection, 'resource', resource) : joinPath(userDataSyncStoreUrl, 'resource', resource);\n\t}\n\n\tprivate clearSession(): void {\n\t\tthis.storageService.remove(USER_SESSION_ID_KEY, StorageScope.APPLICATION);\n\t\tthis.storageService.remove(MACHINE_SESSION_ID_KEY, StorageScope.APPLICATION);\n\t}\n\n\tprivate async request(url: string, options: IRequestOptions, successCodes: number[], token: CancellationToken): Promise<IRequestContext> {\n\t\tif (!this.authToken) {\n\t\t\tthrow new UserDataSyncStoreError('No Auth Token Available', url, UserDataSyncErrorCode.Unauthorized, undefined, undefined);\n\t\t}\n\n\t\tif (this._donotMakeRequestsUntil && Date.now() < this._donotMakeRequestsUntil.getTime()) {\n\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because of too many requests (429).`, url, UserDataSyncErrorCode.TooManyRequestsAndRetryAfter, undefined, undefined);\n\t\t}\n\t\tthis.setDonotMakeRequestsUntil(undefined);\n\n\t\tconst commonHeaders = await this.commonHeadersPromise;\n\t\toptions.headers = {\n\t\t\t...(options.headers || {}),\n\t\t\t...commonHeaders,\n\t\t\t'X-Account-Type': this.authToken.type,\n\t\t\t'authorization': `Bearer ${this.authToken.token}`,\n\t\t};\n\n\t\t// Add session headers\n\t\tthis.addSessionHeaders(options.headers);\n\n\t\tthis.logService.trace('Sending request to server', { url, type: options.type, headers: { ...options.headers, ...{ authorization: undefined } } });\n\n\t\tlet context;\n\t\ttry {\n\t\t\tcontext = await this.session.request(url, options, token);\n\t\t} catch (e) {\n\t\t\tif (!(e instanceof UserDataSyncStoreError)) {\n\t\t\t\tlet code = UserDataSyncErrorCode.RequestFailed;\n\t\t\t\tconst errorMessage = getErrorMessage(e).toLowerCase();\n\n\t\t\t\t// Request timed out\n\t\t\t\tif (errorMessage.includes('xhr timeout')) {\n\t\t\t\t\tcode = UserDataSyncErrorCode.RequestTimeout;\n\t\t\t\t}\n\n\t\t\t\t// Request protocol not supported\n\t\t\t\telse if (errorMessage.includes('protocol') && errorMessage.includes('not supported')) {\n\t\t\t\t\tcode = UserDataSyncErrorCode.RequestProtocolNotSupported;\n\t\t\t\t}\n\n\t\t\t\t// Request path not escaped\n\t\t\t\telse if (errorMessage.includes('request path contains unescaped characters')) {\n\t\t\t\t\tcode = UserDataSyncErrorCode.RequestPathNotEscaped;\n\t\t\t\t}\n\n\t\t\t\t// Request header not an object\n\t\t\t\telse if (errorMessage.includes('headers must be an object')) {\n\t\t\t\t\tcode = UserDataSyncErrorCode.RequestHeadersNotObject;\n\t\t\t\t}\n\n\t\t\t\t// Request canceled\n\t\t\t\telse if (isCancellationError(e)) {\n\t\t\t\t\tcode = UserDataSyncErrorCode.RequestCanceled;\n\t\t\t\t}\n\n\t\t\t\te = new UserDataSyncStoreError(`Connection refused for the request '${url}'.`, url, code, undefined, undefined);\n\t\t\t}\n\t\t\tthis.logService.info('Request failed', url);\n\t\t\tthrow e;\n\t\t}\n\n\t\tconst operationId = context.res.headers[HEADER_OPERATION_ID];\n\t\tconst requestInfo = { url, status: context.res.statusCode, 'execution-id': options.headers[HEADER_EXECUTION_ID], 'operation-id': operationId };\n\t\tconst isSuccess = isSuccessContext(context) || (context.res.statusCode && successCodes.includes(context.res.statusCode));\n\t\tlet failureMessage = '';\n\t\tif (isSuccess) {\n\t\t\tthis.logService.trace('Request succeeded', requestInfo);\n\t\t} else {\n\t\t\tfailureMessage = await asText(context) || '';\n\t\t\tthis.logService.info('Request failed', requestInfo, failureMessage);\n\t\t}\n\n\t\tif (context.res.statusCode === 401 || context.res.statusCode === 403) {\n\t\t\tthis.authToken = undefined;\n\t\t\tif (context.res.statusCode === 401) {\n\t\t\t\tthis._onTokenFailed.fire(UserDataSyncErrorCode.Unauthorized);\n\t\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because of Unauthorized (401).`, url, UserDataSyncErrorCode.Unauthorized, context.res.statusCode, operationId);\n\t\t\t}\n\t\t\tif (context.res.statusCode === 403) {\n\t\t\t\tthis._onTokenFailed.fire(UserDataSyncErrorCode.Forbidden);\n\t\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because the access is forbidden (403).`, url, UserDataSyncErrorCode.Forbidden, context.res.statusCode, operationId);\n\t\t\t}\n\t\t}\n\n\t\tthis._onTokenSucceed.fire();\n\n\t\tif (context.res.statusCode === 404) {\n\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because the requested resource is not found (404).`, url, UserDataSyncErrorCode.NotFound, context.res.statusCode, operationId);\n\t\t}\n\n\t\tif (context.res.statusCode === 405) {\n\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because the requested endpoint is not found (405). ${failureMessage}`, url, UserDataSyncErrorCode.MethodNotFound, context.res.statusCode, operationId);\n\t\t}\n\n\t\tif (context.res.statusCode === 409) {\n\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because of Conflict (409). There is new data for this resource. Make the request again with latest data.`, url, UserDataSyncErrorCode.Conflict, context.res.statusCode, operationId);\n\t\t}\n\n\t\tif (context.res.statusCode === 410) {\n\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because the requested resource is not longer available (410).`, url, UserDataSyncErrorCode.Gone, context.res.statusCode, operationId);\n\t\t}\n\n\t\tif (context.res.statusCode === 412) {\n\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because of Precondition Failed (412). There is new data for this resource. Make the request again with latest data.`, url, UserDataSyncErrorCode.PreconditionFailed, context.res.statusCode, operationId);\n\t\t}\n\n\t\tif (context.res.statusCode === 413) {\n\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because of too large payload (413).`, url, UserDataSyncErrorCode.TooLarge, context.res.statusCode, operationId);\n\t\t}\n\n\t\tif (context.res.statusCode === 426) {\n\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed with status Upgrade Required (426). Please upgrade the client and try again.`, url, UserDataSyncErrorCode.UpgradeRequired, context.res.statusCode, operationId);\n\t\t}\n\n\t\tif (context.res.statusCode === 429) {\n\t\t\tconst retryAfter = context.res.headers['retry-after'];\n\t\t\tif (retryAfter) {\n\t\t\t\tthis.setDonotMakeRequestsUntil(new Date(Date.now() + (parseInt(retryAfter) * 1000)));\n\t\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because of too many requests (429).`, url, UserDataSyncErrorCode.TooManyRequestsAndRetryAfter, context.res.statusCode, operationId);\n\t\t\t} else {\n\t\t\t\tthrow new UserDataSyncStoreError(`${options.type} request '${url}' failed because of too many requests (429).`, url, UserDataSyncErrorCode.TooManyRequests, context.res.statusCode, operationId);\n\t\t\t}\n\t\t}\n\n\t\tif (!isSuccess) {\n\t\t\tthrow new UserDataSyncStoreError('Server returned ' + context.res.statusCode, url, UserDataSyncErrorCode.Unknown, context.res.statusCode, operationId);\n\t\t}\n\n\t\treturn context;\n\t}\n\n\tprivate addSessionHeaders(headers: IHeaders): void {\n\t\tlet machineSessionId = this.storageService.get(MACHINE_SESSION_ID_KEY, StorageScope.APPLICATION);\n\t\tif (machineSessionId === undefined) {\n\t\t\tmachineSessionId = generateUuid();\n\t\t\tthis.storageService.store(MACHINE_SESSION_ID_KEY, machineSessionId, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t}\n\t\theaders['X-Machine-Session-Id'] = machineSessionId;\n\n\t\tconst userSessionId = this.storageService.get(USER_SESSION_ID_KEY, StorageScope.APPLICATION);\n\t\tif (userSessionId !== undefined) {\n\t\t\theaders['X-User-Session-Id'] = userSessionId;\n\t\t}\n\t}\n\n}\n\nexport class UserDataSyncStoreService extends UserDataSyncStoreClient implements IUserDataSyncStoreService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@IUserDataSyncStoreManagementService userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper(userDataSyncStoreManagementService.userDataSyncStore?.url, productService, requestService, logService, environmentService, fileService, storageService);\n\t\tthis._register(userDataSyncStoreManagementService.onDidChangeUserDataSyncStore(() => this.updateUserDataSyncStoreUrl(userDataSyncStoreManagementService.userDataSyncStore?.url)));\n\t}\n\n}\n\nexport class RequestsSession {\n\n\tprivate requests: string[] = [];\n\tprivate startTime: Date | undefined = undefined;\n\n\tconstructor(\n\t\tprivate readonly limit: number,\n\t\tprivate readonly interval: number, /* in ms */\n\t\tprivate readonly requestService: IRequestService,\n\t\tprivate readonly logService: IUserDataSyncLogService,\n\t) { }\n\n\trequest(url: string, options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tif (this.isExpired()) {\n\t\t\tthis.reset();\n\t\t}\n\n\t\toptions.url = url;\n\n\t\tif (this.requests.length >= this.limit) {\n\t\t\tthis.logService.info('Too many requests', ...this.requests);\n\t\t\tthrow new UserDataSyncStoreError(`Too many requests. Only ${this.limit} requests allowed in ${this.interval / (1000 * 60)} minutes.`, url, UserDataSyncErrorCode.LocalTooManyRequests, undefined, undefined);\n\t\t}\n\n\t\tthis.startTime = this.startTime || new Date();\n\t\tthis.requests.push(url);\n\n\t\treturn this.requestService.request(options, token);\n\t}\n\n\tprivate isExpired(): boolean {\n\t\treturn this.startTime !== undefined && new Date().getTime() - this.startTime.getTime() > this.interval;\n\t}\n\n\tprivate reset(): void {\n\t\tthis.requests = [];\n\t\tthis.startTime = undefined;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["isSuccess"]
}
