{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/keybindingsSync.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { parse } from '../../../base/common/json.js';\nimport { OperatingSystem, OS } from '../../../base/common/platform.js';\nimport { isUndefined } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { FileOperationError, FileOperationResult, IFileService } from '../../files/common/files.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { AbstractInitializer, AbstractJsonFileSynchroniser, IAcceptResult, IFileResourcePreview, IMergeResult } from './abstractSynchronizer.js';\nimport { merge } from './keybindingsMerge.js';\nimport { Change, IRemoteUserData, IUserDataSyncLocalStoreService, IUserDataSyncConfiguration, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncStoreService, IUserDataSyncUtilService, SyncResource, UserDataSyncError, UserDataSyncErrorCode, USER_DATA_SYNC_SCHEME, CONFIG_SYNC_KEYBINDINGS_PER_PLATFORM } from './userDataSync.js';\n\ninterface ISyncContent {\n\tmac?: string;\n\tlinux?: string;\n\twindows?: string;\n\tall?: string;\n}\n\ninterface IKeybindingsResourcePreview extends IFileResourcePreview {\n\tpreviewResult: IMergeResult;\n}\n\ninterface ILastSyncUserData extends IRemoteUserData {\n\tplatformSpecific?: boolean;\n}\n\nexport function getKeybindingsContentFromSyncContent(syncContent: string, platformSpecific: boolean, logService: ILogService): string | null {\n\ttry {\n\t\tconst parsed = <ISyncContent>JSON.parse(syncContent);\n\t\tif (!platformSpecific) {\n\t\t\treturn isUndefined(parsed.all) ? null : parsed.all;\n\t\t}\n\t\tswitch (OS) {\n\t\t\tcase OperatingSystem.Macintosh:\n\t\t\t\treturn isUndefined(parsed.mac) ? null : parsed.mac;\n\t\t\tcase OperatingSystem.Linux:\n\t\t\t\treturn isUndefined(parsed.linux) ? null : parsed.linux;\n\t\t\tcase OperatingSystem.Windows:\n\t\t\t\treturn isUndefined(parsed.windows) ? null : parsed.windows;\n\t\t}\n\t} catch (e) {\n\t\tlogService.error(e);\n\t\treturn null;\n\t}\n}\n\nexport class KeybindingsSynchroniser extends AbstractJsonFileSynchroniser implements IUserDataSynchroniser {\n\n\t/* Version 2: Change settings from `sync.${setting}` to `settingsSync.{setting}` */\n\tprotected readonly version: number = 2;\n\tprivate readonly previewResource: URI = this.extUri.joinPath(this.syncPreviewFolder, 'keybindings.json');\n\tprivate readonly baseResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' });\n\tprivate readonly localResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' });\n\tprivate readonly remoteResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' });\n\tprivate readonly acceptedResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' });\n\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUserDataSyncUtilService userDataSyncUtilService: IUserDataSyncUtilService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(profile.keybindingsResource, { syncResource: SyncResource.Keybindings, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, userDataSyncUtilService, configurationService, uriIdentityService);\n\t\tthis._register(Event.filter(configurationService.onDidChangeConfiguration, e => e.affectsConfiguration('settingsSync.keybindingsPerPlatform'))(() => this.triggerLocalChange()));\n\t}\n\n\tprotected async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: ILastSyncUserData | null, isRemoteDataFromCurrentMachine: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration): Promise<IKeybindingsResourcePreview[]> {\n\t\tconst remoteContent = remoteUserData.syncData ? getKeybindingsContentFromSyncContent(remoteUserData.syncData.content, userDataSyncConfiguration.keybindingsPerPlatform ?? this.syncKeybindingsPerPlatform(), this.logService) : null;\n\n\t\t// Use remote data as last sync data if last sync data does not exist and remote data is from same machine\n\t\tlastSyncUserData = lastSyncUserData === null && isRemoteDataFromCurrentMachine ? remoteUserData : lastSyncUserData;\n\t\tconst lastSyncContent: string | null = lastSyncUserData ? this.getKeybindingsContentFromLastSyncUserData(lastSyncUserData) : null;\n\n\t\t// Get file content last to get the latest\n\t\tconst fileContent = await this.getLocalFileContent();\n\t\tconst formattingOptions = await this.getFormattingOptions();\n\n\t\tlet mergedContent: string | null = null;\n\t\tlet hasLocalChanged: boolean = false;\n\t\tlet hasRemoteChanged: boolean = false;\n\t\tlet hasConflicts: boolean = false;\n\n\t\tif (remoteContent) {\n\t\t\tlet localContent: string = fileContent ? fileContent.value.toString() : '[]';\n\t\t\tlocalContent = localContent || '[]';\n\t\t\tif (this.hasErrors(localContent, true)) {\n\t\t\t\tthrow new UserDataSyncError(localize('errorInvalidSettings', \"Unable to sync keybindings because the content in the file is not valid. Please open the file and correct it.\"), UserDataSyncErrorCode.LocalInvalidContent, this.resource);\n\t\t\t}\n\n\t\t\tif (!lastSyncContent // First time sync\n\t\t\t\t|| lastSyncContent !== localContent // Local has forwarded\n\t\t\t\t|| lastSyncContent !== remoteContent // Remote has forwarded\n\t\t\t) {\n\t\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Merging remote keybindings with local keybindings...`);\n\t\t\t\tconst result = await merge(localContent, remoteContent, lastSyncContent, formattingOptions, this.userDataSyncUtilService);\n\t\t\t\t// Sync only if there are changes\n\t\t\t\tif (result.hasChanges) {\n\t\t\t\t\tmergedContent = result.mergeContent;\n\t\t\t\t\thasConflicts = result.hasConflicts;\n\t\t\t\t\thasLocalChanged = hasConflicts || result.mergeContent !== localContent;\n\t\t\t\t\thasRemoteChanged = hasConflicts || result.mergeContent !== remoteContent;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// First time syncing to remote\n\t\telse if (fileContent) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Remote keybindings does not exist. Synchronizing keybindings for the first time.`);\n\t\t\tmergedContent = fileContent.value.toString();\n\t\t\thasRemoteChanged = true;\n\t\t}\n\n\t\tconst previewResult: IMergeResult = {\n\t\t\tcontent: hasConflicts ? lastSyncContent : mergedContent,\n\t\t\tlocalChange: hasLocalChanged ? fileContent ? Change.Modified : Change.Added : Change.None,\n\t\t\tremoteChange: hasRemoteChanged ? Change.Modified : Change.None,\n\t\t\thasConflicts\n\t\t};\n\n\t\tconst localContent = fileContent ? fileContent.value.toString() : null;\n\t\treturn [{\n\t\t\tfileContent,\n\n\t\t\tbaseResource: this.baseResource,\n\t\t\tbaseContent: lastSyncContent,\n\n\t\t\tlocalResource: this.localResource,\n\t\t\tlocalContent,\n\t\t\tlocalChange: previewResult.localChange,\n\n\t\t\tremoteResource: this.remoteResource,\n\t\t\tremoteContent,\n\t\t\tremoteChange: previewResult.remoteChange,\n\n\t\t\tpreviewResource: this.previewResource,\n\t\t\tpreviewResult,\n\t\t\tacceptedResource: this.acceptedResource,\n\t\t}];\n\n\t}\n\n\tprotected async hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean> {\n\t\tconst lastSyncContent = this.getKeybindingsContentFromLastSyncUserData(lastSyncUserData);\n\t\tif (lastSyncContent === null) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst fileContent = await this.getLocalFileContent();\n\t\tconst localContent: string = fileContent ? fileContent.value.toString() : '';\n\t\tconst formattingOptions = await this.getFormattingOptions();\n\t\tconst result = await merge(localContent || '[]', lastSyncContent, lastSyncContent, formattingOptions, this.userDataSyncUtilService);\n\t\treturn result.hasConflicts || result.mergeContent !== lastSyncContent;\n\t}\n\n\tprotected async getMergeResult(resourcePreview: IKeybindingsResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\treturn resourcePreview.previewResult;\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: IKeybindingsResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IAcceptResult> {\n\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqual(resource, this.localResource)) {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.fileContent ? resourcePreview.fileContent.value.toString() : null,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.Modified,\n\t\t\t};\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqual(resource, this.remoteResource)) {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocalChange: Change.Modified,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqual(resource, this.previewResource)) {\n\t\t\tif (content === undefined) {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: resourcePreview.previewResult.content,\n\t\t\t\t\tlocalChange: resourcePreview.previewResult.localChange,\n\t\t\t\t\tremoteChange: resourcePreview.previewResult.remoteChange,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tcontent,\n\t\t\t\t\tlocalChange: Change.Modified,\n\t\t\t\t\tremoteChange: Change.Modified,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [IKeybindingsResourcePreview, IAcceptResult][], force: boolean): Promise<void> {\n\t\tconst { fileContent } = resourcePreviews[0][0];\n\t\tlet { content, localChange, remoteChange } = resourcePreviews[0][1];\n\n\t\tif (localChange === Change.None && remoteChange === Change.None) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing keybindings.`);\n\t\t}\n\n\t\tif (content !== null) {\n\t\t\tcontent = content.trim();\n\t\t\tcontent = content || '[]';\n\t\t\tif (this.hasErrors(content, true)) {\n\t\t\t\tthrow new UserDataSyncError(localize('errorInvalidSettings', \"Unable to sync keybindings because the content in the file is not valid. Please open the file and correct it.\"), UserDataSyncErrorCode.LocalInvalidContent, this.resource);\n\t\t\t}\n\t\t}\n\n\t\tif (localChange !== Change.None) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating local keybindings...`);\n\t\t\tif (fileContent) {\n\t\t\t\tawait this.backupLocal(this.toSyncContent(fileContent.value.toString()));\n\t\t\t}\n\t\t\tawait this.updateLocalFileContent(content || '[]', fileContent, force);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated local keybindings`);\n\t\t}\n\n\t\tif (remoteChange !== Change.None) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating remote keybindings...`);\n\t\t\tconst remoteContents = this.toSyncContent(content || '[]', remoteUserData.syncData?.content);\n\t\t\tremoteUserData = await this.updateRemoteUserData(remoteContents, force ? null : remoteUserData.ref);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated remote keybindings`);\n\t\t}\n\n\t\t// Delete the preview\n\t\ttry {\n\t\t\tawait this.fileService.del(this.previewResource);\n\t\t} catch (e) { /* ignore */ }\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized keybindings...`);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData, { platformSpecific: this.syncKeybindingsPerPlatform() });\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized keybindings`);\n\t\t}\n\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst localFileContent = await this.getLocalFileContent();\n\t\t\tif (localFileContent) {\n\t\t\t\tconst keybindings = parse(localFileContent.value.toString());\n\t\t\t\tif (isNonEmptyArray(keybindings)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync resolveContent(uri: URI): Promise<string | null> {\n\t\tif (this.extUri.isEqual(this.remoteResource, uri)\n\t\t\t|| this.extUri.isEqual(this.baseResource, uri)\n\t\t\t|| this.extUri.isEqual(this.localResource, uri)\n\t\t\t|| this.extUri.isEqual(this.acceptedResource, uri)\n\t\t) {\n\t\t\treturn this.resolvePreviewContent(uri);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate getKeybindingsContentFromLastSyncUserData(lastSyncUserData: ILastSyncUserData): string | null {\n\t\tif (!lastSyncUserData.syncData) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Return null if there is a change in platform specific property from last time sync.\n\t\tif (lastSyncUserData.platformSpecific !== undefined && lastSyncUserData.platformSpecific !== this.syncKeybindingsPerPlatform()) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn getKeybindingsContentFromSyncContent(lastSyncUserData.syncData.content, this.syncKeybindingsPerPlatform(), this.logService);\n\t}\n\n\tprivate toSyncContent(keybindingsContent: string, syncContent?: string): string {\n\t\tlet parsed: ISyncContent = {};\n\t\ttry {\n\t\t\tparsed = JSON.parse(syncContent || '{}');\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t\tif (this.syncKeybindingsPerPlatform()) {\n\t\t\tdelete parsed.all;\n\t\t} else {\n\t\t\tparsed.all = keybindingsContent;\n\t\t}\n\t\tswitch (OS) {\n\t\t\tcase OperatingSystem.Macintosh:\n\t\t\t\tparsed.mac = keybindingsContent;\n\t\t\t\tbreak;\n\t\t\tcase OperatingSystem.Linux:\n\t\t\t\tparsed.linux = keybindingsContent;\n\t\t\t\tbreak;\n\t\t\tcase OperatingSystem.Windows:\n\t\t\t\tparsed.windows = keybindingsContent;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn JSON.stringify(parsed);\n\t}\n\n\tprivate syncKeybindingsPerPlatform(): boolean {\n\t\treturn !!this.configurationService.getValue(CONFIG_SYNC_KEYBINDINGS_PER_PLATFORM);\n\t}\n\n}\n\nexport class KeybindingsInitializer extends AbstractInitializer {\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(SyncResource.Keybindings, userDataProfilesService, environmentService, logService, fileService, storageService, uriIdentityService);\n\t}\n\n\tprotected async doInitialize(remoteUserData: IRemoteUserData): Promise<void> {\n\t\tconst keybindingsContent = remoteUserData.syncData ? this.getKeybindingsContentFromSyncContent(remoteUserData.syncData.content) : null;\n\t\tif (!keybindingsContent) {\n\t\t\tthis.logService.info('Skipping initializing keybindings because remote keybindings does not exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst isEmpty = await this.isEmpty();\n\t\tif (!isEmpty) {\n\t\t\tthis.logService.info('Skipping initializing keybindings because local keybindings exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.fileService.writeFile(this.userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(keybindingsContent));\n\n\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t}\n\n\tprivate async isEmpty(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst fileContent = await this.fileService.readFile(this.userDataProfilesService.defaultProfile.settingsResource);\n\t\t\tconst keybindings = parse(fileContent.value.toString());\n\t\t\treturn !isNonEmptyArray(keybindings);\n\t\t} catch (error) {\n\t\t\treturn (<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND;\n\t\t}\n\t}\n\n\tprivate getKeybindingsContentFromSyncContent(syncContent: string): string | null {\n\t\ttry {\n\t\t\treturn getKeybindingsContentFromSyncContent(syncContent, true, this.logService);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["localContent"]
}
