{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/settingsSync.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../base/common/arrays.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../configuration/common/configuration.js';\nimport { ConfigurationModelParser } from '../../configuration/common/configurationModels.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IExtensionManagementService } from '../../extensionManagement/common/extensionManagement.js';\nimport { ExtensionType } from '../../extensions/common/extensions.js';\nimport { FileOperationError, FileOperationResult, IFileService } from '../../files/common/files.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { AbstractInitializer, AbstractJsonFileSynchroniser, IAcceptResult, IFileResourcePreview, IMergeResult } from './abstractSynchronizer.js';\nimport { getIgnoredSettings, isEmpty, merge, updateIgnoredSettings } from './settingsMerge.js';\nimport { Change, IRemoteUserData, IUserDataSyncLocalStoreService, IUserDataSyncConfiguration, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncStoreService, IUserDataSyncUtilService, SyncResource, UserDataSyncError, UserDataSyncErrorCode, USER_DATA_SYNC_CONFIGURATION_SCOPE, USER_DATA_SYNC_SCHEME, IUserDataResourceManifest, getIgnoredSettingsForExtension } from './userDataSync.js';\n\ninterface ISettingsResourcePreview extends IFileResourcePreview {\n\tpreviewResult: IMergeResult;\n}\n\nexport interface ISettingsSyncContent {\n\tsettings: string;\n}\n\nfunction isSettingsSyncContent(thing: any): thing is ISettingsSyncContent {\n\treturn thing\n\t\t&& (thing.settings && typeof thing.settings === 'string')\n\t\t&& Object.keys(thing).length === 1;\n}\n\nexport function parseSettingsSyncContent(syncContent: string): ISettingsSyncContent {\n\tconst parsed = <ISettingsSyncContent>JSON.parse(syncContent);\n\treturn isSettingsSyncContent(parsed) ? parsed : /* migrate */ { settings: syncContent };\n}\n\nexport class SettingsSynchroniser extends AbstractJsonFileSynchroniser implements IUserDataSynchroniser {\n\n\t/* Version 2: Change settings from `sync.${setting}` to `settingsSync.{setting}` */\n\tprotected readonly version: number = 2;\n\treadonly previewResource: URI = this.extUri.joinPath(this.syncPreviewFolder, 'settings.json');\n\treadonly baseResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' });\n\treadonly localResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' });\n\treadonly remoteResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' });\n\treadonly acceptedResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' });\n\n\tconstructor(\n\t\tprivate readonly profile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\t@IFileService fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IUserDataSyncUtilService userDataSyncUtilService: IUserDataSyncUtilService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(profile.settingsResource, { syncResource: SyncResource.Settings, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, userDataSyncUtilService, configurationService, uriIdentityService);\n\t}\n\n\tasync getRemoteUserDataSyncConfiguration(manifest: IUserDataResourceManifest | null): Promise<IUserDataSyncConfiguration> {\n\t\tconst lastSyncUserData = await this.getLastSyncUserData();\n\t\tconst remoteUserData = await this.getLatestRemoteUserData(manifest, lastSyncUserData);\n\t\tconst remoteSettingsSyncContent = this.getSettingsSyncContent(remoteUserData);\n\t\tconst parser = new ConfigurationModelParser(USER_DATA_SYNC_CONFIGURATION_SCOPE, this.logService);\n\t\tif (remoteSettingsSyncContent?.settings) {\n\t\t\tparser.parse(remoteSettingsSyncContent.settings);\n\t\t}\n\t\treturn parser.configurationModel.getValue(USER_DATA_SYNC_CONFIGURATION_SCOPE) || {};\n\t}\n\n\tprotected async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, isRemoteDataFromCurrentMachine: boolean): Promise<ISettingsResourcePreview[]> {\n\t\tconst fileContent = await this.getLocalFileContent();\n\t\tconst formattingOptions = await this.getFormattingOptions();\n\t\tconst remoteSettingsSyncContent = this.getSettingsSyncContent(remoteUserData);\n\n\t\t// Use remote data as last sync data if last sync data does not exist and remote data is from same machine\n\t\tlastSyncUserData = lastSyncUserData === null && isRemoteDataFromCurrentMachine ? remoteUserData : lastSyncUserData;\n\t\tconst lastSettingsSyncContent: ISettingsSyncContent | null = lastSyncUserData ? this.getSettingsSyncContent(lastSyncUserData) : null;\n\t\tconst ignoredSettings = await this.getIgnoredSettings();\n\n\t\tlet mergedContent: string | null = null;\n\t\tlet hasLocalChanged: boolean = false;\n\t\tlet hasRemoteChanged: boolean = false;\n\t\tlet hasConflicts: boolean = false;\n\n\t\tif (remoteSettingsSyncContent) {\n\t\t\tlet localContent: string = fileContent ? fileContent.value.toString().trim() : '{}';\n\t\t\tlocalContent = localContent || '{}';\n\t\t\tthis.validateContent(localContent);\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Merging remote settings with local settings...`);\n\t\t\tconst result = merge(localContent, remoteSettingsSyncContent.settings, lastSettingsSyncContent ? lastSettingsSyncContent.settings : null, ignoredSettings, [], formattingOptions);\n\t\t\tmergedContent = result.localContent || result.remoteContent;\n\t\t\thasLocalChanged = result.localContent !== null;\n\t\t\thasRemoteChanged = result.remoteContent !== null;\n\t\t\thasConflicts = result.hasConflicts;\n\t\t}\n\n\t\t// First time syncing to remote\n\t\telse if (fileContent) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Remote settings does not exist. Synchronizing settings for the first time.`);\n\t\t\tmergedContent = fileContent.value.toString().trim() || '{}';\n\t\t\tthis.validateContent(mergedContent);\n\t\t\thasRemoteChanged = true;\n\t\t}\n\n\t\tconst localContent = fileContent ? fileContent.value.toString() : null;\n\t\tconst baseContent = lastSettingsSyncContent?.settings ?? null;\n\n\t\tconst previewResult = {\n\t\t\tcontent: hasConflicts ? baseContent : mergedContent,\n\t\t\tlocalChange: hasLocalChanged ? Change.Modified : Change.None,\n\t\t\tremoteChange: hasRemoteChanged ? Change.Modified : Change.None,\n\t\t\thasConflicts\n\t\t};\n\n\t\treturn [{\n\t\t\tfileContent,\n\n\t\t\tbaseResource: this.baseResource,\n\t\t\tbaseContent,\n\n\t\t\tlocalResource: this.localResource,\n\t\t\tlocalContent,\n\t\t\tlocalChange: previewResult.localChange,\n\n\t\t\tremoteResource: this.remoteResource,\n\t\t\tremoteContent: remoteSettingsSyncContent ? remoteSettingsSyncContent.settings : null,\n\t\t\tremoteChange: previewResult.remoteChange,\n\n\t\t\tpreviewResource: this.previewResource,\n\t\t\tpreviewResult,\n\t\t\tacceptedResource: this.acceptedResource,\n\t\t}];\n\t}\n\n\tprotected async hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean> {\n\t\tconst lastSettingsSyncContent: ISettingsSyncContent | null = this.getSettingsSyncContent(lastSyncUserData);\n\t\tif (lastSettingsSyncContent === null) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst fileContent = await this.getLocalFileContent();\n\t\tconst localContent: string = fileContent ? fileContent.value.toString().trim() : '';\n\t\tconst ignoredSettings = await this.getIgnoredSettings();\n\t\tconst formattingOptions = await this.getFormattingOptions();\n\t\tconst result = merge(localContent || '{}', lastSettingsSyncContent.settings, lastSettingsSyncContent.settings, ignoredSettings, [], formattingOptions);\n\t\treturn result.remoteContent !== null;\n\t}\n\n\tprotected async getMergeResult(resourcePreview: ISettingsResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\tconst formatUtils = await this.getFormattingOptions();\n\t\tconst ignoredSettings = await this.getIgnoredSettings();\n\t\treturn {\n\t\t\t...resourcePreview.previewResult,\n\n\t\t\t// remove ignored settings from the preview content\n\t\t\tcontent: resourcePreview.previewResult.content ? updateIgnoredSettings(resourcePreview.previewResult.content, '{}', ignoredSettings, formatUtils) : null\n\t\t};\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: ISettingsResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IAcceptResult> {\n\n\t\tconst formattingOptions = await this.getFormattingOptions();\n\t\tconst ignoredSettings = await this.getIgnoredSettings();\n\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqual(resource, this.localResource)) {\n\t\t\treturn {\n\t\t\t\t/* Remove ignored settings */\n\t\t\t\tcontent: resourcePreview.fileContent ? updateIgnoredSettings(resourcePreview.fileContent.value.toString(), '{}', ignoredSettings, formattingOptions) : null,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.Modified,\n\t\t\t};\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqual(resource, this.remoteResource)) {\n\t\t\treturn {\n\t\t\t\t/* Update ignored settings from local file content */\n\t\t\t\tcontent: resourcePreview.remoteContent !== null ? updateIgnoredSettings(resourcePreview.remoteContent, resourcePreview.fileContent ? resourcePreview.fileContent.value.toString() : '{}', ignoredSettings, formattingOptions) : null,\n\t\t\t\tlocalChange: Change.Modified,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqual(resource, this.previewResource)) {\n\t\t\tif (content === undefined) {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: resourcePreview.previewResult.content,\n\t\t\t\t\tlocalChange: resourcePreview.previewResult.localChange,\n\t\t\t\t\tremoteChange: resourcePreview.previewResult.remoteChange,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\t/* Add ignored settings from local file content */\n\t\t\t\t\tcontent: content !== null ? updateIgnoredSettings(content, resourcePreview.fileContent ? resourcePreview.fileContent.value.toString() : '{}', ignoredSettings, formattingOptions) : null,\n\t\t\t\t\tlocalChange: Change.Modified,\n\t\t\t\t\tremoteChange: Change.Modified,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [ISettingsResourcePreview, IAcceptResult][], force: boolean): Promise<void> {\n\t\tconst { fileContent } = resourcePreviews[0][0];\n\t\tlet { content, localChange, remoteChange } = resourcePreviews[0][1];\n\n\t\tif (localChange === Change.None && remoteChange === Change.None) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing settings.`);\n\t\t}\n\n\t\tcontent = content ? content.trim() : '{}';\n\t\tcontent = content || '{}';\n\t\tthis.validateContent(content);\n\n\t\tif (localChange !== Change.None) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating local settings...`);\n\t\t\tif (fileContent) {\n\t\t\t\tawait this.backupLocal(JSON.stringify(this.toSettingsSyncContent(fileContent.value.toString())));\n\t\t\t}\n\t\t\tawait this.updateLocalFileContent(content, fileContent, force);\n\t\t\tawait this.configurationService.reloadConfiguration(ConfigurationTarget.USER_LOCAL);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated local settings`);\n\t\t}\n\n\t\tif (remoteChange !== Change.None) {\n\t\t\tconst formatUtils = await this.getFormattingOptions();\n\t\t\t// Update ignored settings from remote\n\t\t\tconst remoteSettingsSyncContent = this.getSettingsSyncContent(remoteUserData);\n\t\t\tconst ignoredSettings = await this.getIgnoredSettings(content);\n\t\t\tcontent = updateIgnoredSettings(content, remoteSettingsSyncContent ? remoteSettingsSyncContent.settings : '{}', ignoredSettings, formatUtils);\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating remote settings...`);\n\t\t\tremoteUserData = await this.updateRemoteUserData(JSON.stringify(this.toSettingsSyncContent(content)), force ? null : remoteUserData.ref);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated remote settings`);\n\t\t}\n\n\t\t// Delete the preview\n\t\ttry {\n\t\t\tawait this.fileService.del(this.previewResource);\n\t\t} catch (e) { /* ignore */ }\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized settings...`);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized settings`);\n\t\t}\n\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst localFileContent = await this.getLocalFileContent();\n\t\t\tif (localFileContent) {\n\t\t\t\treturn !isEmpty(localFileContent.value.toString());\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync resolveContent(uri: URI): Promise<string | null> {\n\t\tif (this.extUri.isEqual(this.remoteResource, uri)\n\t\t\t|| this.extUri.isEqual(this.localResource, uri)\n\t\t\t|| this.extUri.isEqual(this.acceptedResource, uri)\n\t\t\t|| this.extUri.isEqual(this.baseResource, uri)\n\t\t) {\n\t\t\treturn this.resolvePreviewContent(uri);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprotected override async resolvePreviewContent(resource: URI): Promise<string | null> {\n\t\tlet content = await super.resolvePreviewContent(resource);\n\t\tif (content) {\n\t\t\tconst formatUtils = await this.getFormattingOptions();\n\t\t\t// remove ignored settings from the preview content\n\t\t\tconst ignoredSettings = await this.getIgnoredSettings();\n\t\t\tcontent = updateIgnoredSettings(content, '{}', ignoredSettings, formatUtils);\n\t\t}\n\t\treturn content;\n\t}\n\n\tprivate getSettingsSyncContent(remoteUserData: IRemoteUserData): ISettingsSyncContent | null {\n\t\treturn remoteUserData.syncData ? this.parseSettingsSyncContent(remoteUserData.syncData.content) : null;\n\t}\n\n\tprivate parseSettingsSyncContent(syncContent: string): ISettingsSyncContent | null {\n\t\ttry {\n\t\t\treturn parseSettingsSyncContent(syncContent);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate toSettingsSyncContent(settings: string): ISettingsSyncContent {\n\t\treturn { settings };\n\t}\n\n\tprivate coreIgnoredSettings: Promise<string[]> | undefined = undefined;\n\tprivate systemExtensionsIgnoredSettings: Promise<string[]> | undefined = undefined;\n\tprivate userExtensionsIgnoredSettings: Promise<string[]> | undefined = undefined;\n\tprivate async getIgnoredSettings(content?: string): Promise<string[]> {\n\t\tif (!this.coreIgnoredSettings) {\n\t\t\tthis.coreIgnoredSettings = this.userDataSyncUtilService.resolveDefaultCoreIgnoredSettings();\n\t\t}\n\t\tif (!this.systemExtensionsIgnoredSettings) {\n\t\t\tthis.systemExtensionsIgnoredSettings = this.getIgnoredSettingForSystemExtensions();\n\t\t}\n\t\tif (!this.userExtensionsIgnoredSettings) {\n\t\t\tthis.userExtensionsIgnoredSettings = this.getIgnoredSettingForUserExtensions();\n\t\t\tconst disposable = this._register(Event.any<any>(\n\t\t\t\tEvent.filter(this.extensionManagementService.onDidInstallExtensions, (e => e.some(({ local }) => !!local))),\n\t\t\t\tEvent.filter(this.extensionManagementService.onDidUninstallExtension, (e => !e.error)))(() => {\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\tthis.userExtensionsIgnoredSettings = undefined;\n\t\t\t\t}));\n\t\t}\n\t\tconst defaultIgnoredSettings = (await Promise.all([this.coreIgnoredSettings, this.systemExtensionsIgnoredSettings, this.userExtensionsIgnoredSettings])).flat();\n\t\treturn getIgnoredSettings(defaultIgnoredSettings, this.configurationService, content);\n\t}\n\n\tprivate async getIgnoredSettingForSystemExtensions(): Promise<string[]> {\n\t\tconst systemExtensions = await this.extensionManagementService.getInstalled(ExtensionType.System);\n\t\treturn distinct(systemExtensions.map(e => getIgnoredSettingsForExtension(e.manifest)).flat());\n\t}\n\n\tprivate async getIgnoredSettingForUserExtensions(): Promise<string[]> {\n\t\tconst userExtensions = await this.extensionManagementService.getInstalled(ExtensionType.User, this.profile.extensionsResource);\n\t\treturn distinct(userExtensions.map(e => getIgnoredSettingsForExtension(e.manifest)).flat());\n\t}\n\n\tprivate validateContent(content: string): void {\n\t\tif (this.hasErrors(content, false)) {\n\t\t\tthrow new UserDataSyncError(localize('errorInvalidSettings', \"Unable to sync settings as there are errors/warning in settings file.\"), UserDataSyncErrorCode.LocalInvalidContent, this.resource);\n\t\t}\n\t}\n\n}\n\nexport class SettingsInitializer extends AbstractInitializer {\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(SyncResource.Settings, userDataProfilesService, environmentService, logService, fileService, storageService, uriIdentityService);\n\t}\n\n\tprotected async doInitialize(remoteUserData: IRemoteUserData): Promise<void> {\n\t\tconst settingsSyncContent = remoteUserData.syncData ? this.parseSettingsSyncContent(remoteUserData.syncData.content) : null;\n\t\tif (!settingsSyncContent) {\n\t\t\tthis.logService.info('Skipping initializing settings because remote settings does not exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst isEmpty = await this.isEmpty();\n\t\tif (!isEmpty) {\n\t\t\tthis.logService.info('Skipping initializing settings because local settings exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.fileService.writeFile(this.userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(settingsSyncContent.settings));\n\n\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t}\n\n\tprivate async isEmpty(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst fileContent = await this.fileService.readFile(this.userDataProfilesService.defaultProfile.settingsResource);\n\t\t\treturn isEmpty(fileContent.value.toString().trim());\n\t\t} catch (error) {\n\t\t\treturn (<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND;\n\t\t}\n\t}\n\n\tprivate parseSettingsSyncContent(syncContent: string): ISettingsSyncContent | null {\n\t\ttry {\n\t\t\treturn parseSettingsSyncContent(syncContent);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t\treturn null;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["localContent", "isEmpty"]
}
