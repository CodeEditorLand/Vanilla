{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/extensionsMerge.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { deepClone, equals } from '../../../base/common/objects.js';\nimport * as semver from '../../../base/common/semver/semver.js';\nimport { assertIsDefined } from '../../../base/common/types.js';\nimport { IExtensionIdentifier } from '../../extensions/common/extensions.js';\nimport { ILocalSyncExtension, IRemoteSyncExtension, ISyncExtension } from './userDataSync.js';\n\nexport interface IMergeResult {\n\treadonly local: { added: ISyncExtension[]; removed: IExtensionIdentifier[]; updated: ISyncExtension[] };\n\treadonly remote: { added: ISyncExtension[]; removed: ISyncExtension[]; updated: ISyncExtension[]; all: ISyncExtension[] } | null;\n}\n\nexport function merge(localExtensions: ILocalSyncExtension[], remoteExtensions: IRemoteSyncExtension[] | null, lastSyncExtensions: IRemoteSyncExtension[] | null, skippedExtensions: ISyncExtension[], ignoredExtensions: string[], lastSyncBuiltinExtensions: IExtensionIdentifier[] | null): IMergeResult {\n\tconst added: ISyncExtension[] = [];\n\tconst removed: IExtensionIdentifier[] = [];\n\tconst updated: ISyncExtension[] = [];\n\n\tif (!remoteExtensions) {\n\t\tconst remote = localExtensions.filter(({ identifier }) => ignoredExtensions.every(id => id.toLowerCase() !== identifier.id.toLowerCase()));\n\t\treturn {\n\t\t\tlocal: {\n\t\t\t\tadded,\n\t\t\t\tremoved,\n\t\t\t\tupdated,\n\t\t\t},\n\t\t\tremote: remote.length > 0 ? {\n\t\t\t\tadded: remote,\n\t\t\t\tupdated: [],\n\t\t\t\tremoved: [],\n\t\t\t\tall: remote\n\t\t\t} : null\n\t\t};\n\t}\n\n\tlocalExtensions = localExtensions.map(massageIncomingExtension) as ILocalSyncExtension[];\n\tremoteExtensions = remoteExtensions.map(massageIncomingExtension);\n\tlastSyncExtensions = lastSyncExtensions ? lastSyncExtensions.map(massageIncomingExtension) : null;\n\n\tconst uuids: Map<string, string> = new Map<string, string>();\n\tconst addUUID = (identifier: IExtensionIdentifier) => { if (identifier.uuid) { uuids.set(identifier.id.toLowerCase(), identifier.uuid); } };\n\tlocalExtensions.forEach(({ identifier }) => addUUID(identifier));\n\tremoteExtensions.forEach(({ identifier }) => addUUID(identifier));\n\tlastSyncExtensions?.forEach(({ identifier }) => addUUID(identifier));\n\tskippedExtensions?.forEach(({ identifier }) => addUUID(identifier));\n\tlastSyncBuiltinExtensions?.forEach(identifier => addUUID(identifier));\n\n\tconst getKey = (extension: ISyncExtension): string => {\n\t\tconst uuid = extension.identifier.uuid || uuids.get(extension.identifier.id.toLowerCase());\n\t\treturn uuid ? `uuid:${uuid}` : `id:${extension.identifier.id.toLowerCase()}`;\n\t};\n\tconst addExtensionToMap = (map: Map<string, ISyncExtension>, extension: ISyncExtension) => {\n\t\tmap.set(getKey(extension), extension);\n\t\treturn map;\n\t};\n\tconst localExtensionsMap: Map<string, ISyncExtension> = localExtensions.reduce(addExtensionToMap, new Map<string, ISyncExtension>());\n\tconst remoteExtensionsMap = remoteExtensions.reduce(addExtensionToMap, new Map<string, ISyncExtension>());\n\tconst newRemoteExtensionsMap = remoteExtensions.reduce((map: Map<string, ISyncExtension>, extension: ISyncExtension) => addExtensionToMap(map, deepClone(extension)), new Map<string, ISyncExtension>());\n\tconst lastSyncExtensionsMap = lastSyncExtensions ? lastSyncExtensions.reduce(addExtensionToMap, new Map<string, ISyncExtension>()) : null;\n\tconst skippedExtensionsMap = skippedExtensions.reduce(addExtensionToMap, new Map<string, ISyncExtension>());\n\tconst ignoredExtensionsSet = ignoredExtensions.reduce((set, id) => {\n\t\tconst uuid = uuids.get(id.toLowerCase());\n\t\treturn set.add(uuid ? `uuid:${uuid}` : `id:${id.toLowerCase()}`);\n\t}, new Set<string>());\n\tconst lastSyncBuiltinExtensionsSet = lastSyncBuiltinExtensions ? lastSyncBuiltinExtensions.reduce((set, { id, uuid }) => {\n\t\tuuid = uuid ?? uuids.get(id.toLowerCase());\n\t\treturn set.add(uuid ? `uuid:${uuid}` : `id:${id.toLowerCase()}`);\n\t}, new Set<string>()) : null;\n\n\tconst localToRemote = compare(localExtensionsMap, remoteExtensionsMap, ignoredExtensionsSet, false);\n\tif (localToRemote.added.size > 0 || localToRemote.removed.size > 0 || localToRemote.updated.size > 0) {\n\n\t\tconst baseToLocal = compare(lastSyncExtensionsMap, localExtensionsMap, ignoredExtensionsSet, false);\n\t\tconst baseToRemote = compare(lastSyncExtensionsMap, remoteExtensionsMap, ignoredExtensionsSet, true);\n\n\t\tconst merge = (key: string, localExtension: ISyncExtension, remoteExtension: ISyncExtension, preferred: ISyncExtension): ISyncExtension => {\n\t\t\tlet pinned: boolean | undefined, version: string | undefined, preRelease: boolean | undefined;\n\t\t\tif (localExtension.installed) {\n\t\t\t\tpinned = preferred.pinned;\n\t\t\t\tpreRelease = preferred.preRelease;\n\t\t\t\tif (pinned) {\n\t\t\t\t\tversion = preferred.version;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpinned = remoteExtension.pinned;\n\t\t\t\tpreRelease = remoteExtension.preRelease;\n\t\t\t\tif (pinned) {\n\t\t\t\t\tversion = remoteExtension.version;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pinned === undefined /* from older client*/) {\n\t\t\t\tpinned = localExtension.pinned;\n\t\t\t\tif (pinned) {\n\t\t\t\t\tversion = localExtension.version;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (preRelease === undefined /* from older client*/) {\n\t\t\t\tpreRelease = localExtension.preRelease;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...preferred,\n\t\t\t\tinstalled: localExtension.installed || remoteExtension.installed,\n\t\t\t\tpinned,\n\t\t\t\tpreRelease,\n\t\t\t\tversion: version ?? (remoteExtension.version && (!localExtension.installed || semver.gt(remoteExtension.version, localExtension.version)) ? remoteExtension.version : localExtension.version),\n\t\t\t\tstate: mergeExtensionState(localExtension, remoteExtension, lastSyncExtensionsMap?.get(key)),\n\t\t\t};\n\t\t};\n\n\t\t// Remotely removed extension => exist in base and does not in remote\n\t\tfor (const key of baseToRemote.removed.values()) {\n\t\t\tconst localExtension = localExtensionsMap.get(key);\n\t\t\tif (!localExtension) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst baseExtension = assertIsDefined(lastSyncExtensionsMap?.get(key));\n\t\t\tconst wasAnInstalledExtensionDuringLastSync = lastSyncBuiltinExtensionsSet && !lastSyncBuiltinExtensionsSet.has(key) && baseExtension.installed;\n\t\t\tif (localExtension.installed && wasAnInstalledExtensionDuringLastSync /* It is an installed extension now and during last sync */) {\n\t\t\t\t// Installed extension is removed from remote. Remove it from local.\n\t\t\t\tremoved.push(localExtension.identifier);\n\t\t\t} else {\n\t\t\t\t// Add to remote: It is a builtin extenision or got installed after last sync\n\t\t\t\tnewRemoteExtensionsMap.set(key, localExtension);\n\t\t\t}\n\n\t\t}\n\n\t\t// Remotely added extension => does not exist in base and exist in remote\n\t\tfor (const key of baseToRemote.added.values()) {\n\t\t\tconst remoteExtension = assertIsDefined(remoteExtensionsMap.get(key));\n\t\t\tconst localExtension = localExtensionsMap.get(key);\n\n\t\t\t// Also exist in local\n\t\t\tif (localExtension) {\n\t\t\t\t// Is different from local to remote\n\t\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\t\tconst mergedExtension = merge(key, localExtension, remoteExtension, remoteExtension);\n\t\t\t\t\t// Update locally only when the extension has changes in properties other than installed poperty\n\t\t\t\t\tif (!areSame(localExtension, remoteExtension, false, false)) {\n\t\t\t\t\t\tupdated.push(massageOutgoingExtension(mergedExtension, key));\n\t\t\t\t\t}\n\t\t\t\t\tnewRemoteExtensionsMap.set(key, mergedExtension);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Add only if the extension is an installed extension\n\t\t\t\tif (remoteExtension.installed) {\n\t\t\t\t\tadded.push(massageOutgoingExtension(remoteExtension, key));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remotely updated extension => exist in base and remote\n\t\tfor (const key of baseToRemote.updated.values()) {\n\t\t\tconst remoteExtension = assertIsDefined(remoteExtensionsMap.get(key));\n\t\t\tconst baseExtension = assertIsDefined(lastSyncExtensionsMap?.get(key));\n\t\t\tconst localExtension = localExtensionsMap.get(key);\n\n\t\t\t// Also exist in local\n\t\t\tif (localExtension) {\n\t\t\t\tconst wasAnInstalledExtensionDuringLastSync = lastSyncBuiltinExtensionsSet && !lastSyncBuiltinExtensionsSet.has(key) && baseExtension.installed;\n\t\t\t\tif (wasAnInstalledExtensionDuringLastSync && localExtension.installed && !remoteExtension.installed) {\n\t\t\t\t\t// Remove it locally if it is installed locally and not remotely\n\t\t\t\t\tremoved.push(localExtension.identifier);\n\t\t\t\t} else {\n\t\t\t\t\t// Update in local always\n\t\t\t\t\tconst mergedExtension = merge(key, localExtension, remoteExtension, remoteExtension);\n\t\t\t\t\tupdated.push(massageOutgoingExtension(mergedExtension, key));\n\t\t\t\t\tnewRemoteExtensionsMap.set(key, mergedExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add it locally if does not exist locally and installed remotely\n\t\t\telse if (remoteExtension.installed) {\n\t\t\t\tadded.push(massageOutgoingExtension(remoteExtension, key));\n\t\t\t}\n\n\t\t}\n\n\t\t// Locally added extension => does not exist in base and exist in local\n\t\tfor (const key of baseToLocal.added.values()) {\n\t\t\t// If added in remote (already handled)\n\t\t\tif (baseToRemote.added.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnewRemoteExtensionsMap.set(key, assertIsDefined(localExtensionsMap.get(key)));\n\t\t}\n\n\t\t// Locally updated extension => exist in base and local\n\t\tfor (const key of baseToLocal.updated.values()) {\n\t\t\t// If removed in remote (already handled)\n\t\t\tif (baseToRemote.removed.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// If updated in remote (already handled)\n\t\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst localExtension = assertIsDefined(localExtensionsMap.get(key));\n\t\t\tconst remoteExtension = assertIsDefined(remoteExtensionsMap.get(key));\n\t\t\t// Update remotely\n\t\t\tnewRemoteExtensionsMap.set(key, merge(key, localExtension, remoteExtension, localExtension));\n\t\t}\n\n\t\t// Locally removed extensions => exist in base and does not exist in local\n\t\tfor (const key of baseToLocal.removed.values()) {\n\t\t\t// If updated in remote (already handled)\n\t\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// If removed in remote (already handled)\n\t\t\tif (baseToRemote.removed.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Skipped\n\t\t\tif (skippedExtensionsMap.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Skip if it is a builtin extension\n\t\t\tif (!assertIsDefined(remoteExtensionsMap.get(key)).installed) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Skip if last sync builtin extensions set is not available\n\t\t\tif (!lastSyncBuiltinExtensionsSet) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Skip if it was a builtin extension during last sync\n\t\t\tif (lastSyncBuiltinExtensionsSet.has(key) || !assertIsDefined(lastSyncExtensionsMap?.get(key)).installed) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnewRemoteExtensionsMap.delete(key);\n\t\t}\n\t}\n\n\tconst remote: ISyncExtension[] = [];\n\tconst remoteChanges = compare(remoteExtensionsMap, newRemoteExtensionsMap, new Set<string>(), true);\n\tconst hasRemoteChanges = remoteChanges.added.size > 0 || remoteChanges.updated.size > 0 || remoteChanges.removed.size > 0;\n\tif (hasRemoteChanges) {\n\t\tnewRemoteExtensionsMap.forEach((value, key) => remote.push(massageOutgoingExtension(value, key)));\n\t}\n\n\treturn {\n\t\tlocal: { added, removed, updated },\n\t\tremote: hasRemoteChanges ? {\n\t\t\tadded: [...remoteChanges.added].map(id => newRemoteExtensionsMap.get(id)!),\n\t\t\tupdated: [...remoteChanges.updated].map(id => newRemoteExtensionsMap.get(id)!),\n\t\t\tremoved: [...remoteChanges.removed].map(id => remoteExtensionsMap.get(id)!),\n\t\t\tall: remote\n\t\t} : null\n\t};\n}\n\nfunction compare(from: Map<string, ISyncExtension> | null, to: Map<string, ISyncExtension>, ignoredExtensions: Set<string>, checkVersionProperty: boolean): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = from ? [...from.keys()].filter(key => !ignoredExtensions.has(key)) : [];\n\tconst toKeys = [...to.keys()].filter(key => !ignoredExtensions.has(key));\n\tconst added = toKeys.filter(key => !fromKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => !toKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst fromExtension = from!.get(key)!;\n\t\tconst toExtension = to.get(key);\n\t\tif (!toExtension || !areSame(fromExtension, toExtension, checkVersionProperty, true)) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction areSame(fromExtension: ISyncExtension, toExtension: ISyncExtension, checkVersionProperty: boolean, checkInstalledProperty: boolean): boolean {\n\tif (fromExtension.disabled !== toExtension.disabled) {\n\t\t/* extension enablement changed */\n\t\treturn false;\n\t}\n\n\tif (!!fromExtension.isApplicationScoped !== !!toExtension.isApplicationScoped) {\n\t\t/* extension application scope has changed */\n\t\treturn false;\n\t}\n\n\tif (checkInstalledProperty && fromExtension.installed !== toExtension.installed) {\n\t\t/* extension installed property changed */\n\t\treturn false;\n\t}\n\n\tif (fromExtension.installed && toExtension.installed) {\n\n\t\tif (fromExtension.preRelease !== toExtension.preRelease) {\n\t\t\t/* installed extension's pre-release version changed */\n\t\t\treturn false;\n\t\t}\n\n\t\tif (fromExtension.pinned !== toExtension.pinned) {\n\t\t\t/* installed extension's pinning changed */\n\t\t\treturn false;\n\t\t}\n\n\t\tif (toExtension.pinned && fromExtension.version !== toExtension.version) {\n\t\t\t/* installed extension's pinned version changed */\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (!isSameExtensionState(fromExtension.state, toExtension.state)) {\n\t\t/* extension state changed */\n\t\treturn false;\n\t}\n\n\tif ((checkVersionProperty && fromExtension.version !== toExtension.version)) {\n\t\t/* extension version changed */\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction mergeExtensionState(localExtension: ISyncExtension, remoteExtension: ISyncExtension, lastSyncExtension: ISyncExtension | undefined): IStringDictionary<any> | undefined {\n\tconst localState = localExtension.state;\n\tconst remoteState = remoteExtension.state;\n\tconst baseState = lastSyncExtension?.state;\n\n\t// If remote extension has no version, use local state\n\tif (!remoteExtension.version) {\n\t\treturn localState;\n\t}\n\n\t// If local state exists and local extension is latest then use local state\n\tif (localState && semver.gt(localExtension.version, remoteExtension.version)) {\n\t\treturn localState;\n\t}\n\t// If remote state exists and remote extension is latest, use remote state\n\tif (remoteState && semver.gt(remoteExtension.version, localExtension.version)) {\n\t\treturn remoteState;\n\t}\n\n\n\t/* Remote and local are on same version */\n\n\t// If local state is not yet set, use remote state\n\tif (!localState) {\n\t\treturn remoteState;\n\t}\n\t// If remote state is not yet set, use local state\n\tif (!remoteState) {\n\t\treturn localState;\n\t}\n\n\tconst mergedState: IStringDictionary<any> = deepClone(localState);\n\tconst baseToRemote = baseState ? compareExtensionState(baseState, remoteState) : { added: Object.keys(remoteState).reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\tconst baseToLocal = baseState ? compareExtensionState(baseState, localState) : { added: Object.keys(localState).reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\t// Added/Updated in remote\n\tfor (const key of [...baseToRemote.added.values(), ...baseToRemote.updated.values()]) {\n\t\tmergedState[key] = remoteState[key];\n\t}\n\t// Removed in remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\t// Not updated in local\n\t\tif (!baseToLocal.updated.has(key)) {\n\t\t\tdelete mergedState[key];\n\t\t}\n\t}\n\treturn mergedState;\n}\n\nfunction compareExtensionState(from: IStringDictionary<any>, to: IStringDictionary<any>): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = Object.keys(from);\n\tconst toKeys = Object.keys(to);\n\tconst added = toKeys.filter(key => !fromKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => !toKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1 = from[key];\n\t\tconst value2 = to[key];\n\t\tif (!equals(value1, value2)) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction isSameExtensionState(a: IStringDictionary<any> = {}, b: IStringDictionary<any> = {}): boolean {\n\tconst { added, removed, updated } = compareExtensionState(a, b);\n\treturn added.size === 0 && removed.size === 0 && updated.size === 0;\n}\n\n// massage incoming extension - add optional properties\nfunction massageIncomingExtension(extension: ISyncExtension): ISyncExtension {\n\treturn { ...extension, ...{ disabled: !!extension.disabled, installed: !!extension.installed } };\n}\n\n// massage outgoing extension - remove optional properties\nfunction massageOutgoingExtension(extension: ISyncExtension, key: string): ISyncExtension {\n\tconst massagedExtension: ISyncExtension = {\n\t\t...extension,\n\t\tidentifier: {\n\t\t\tid: extension.identifier.id,\n\t\t\tuuid: key.startsWith('uuid:') ? key.substring('uuid:'.length) : undefined\n\t\t},\n\t\t/* set following always so that to differentiate with older clients */\n\t\tpreRelease: !!extension.preRelease,\n\t\tpinned: !!extension.pinned,\n\t};\n\tif (!extension.disabled) {\n\t\tdelete massagedExtension.disabled;\n\t}\n\tif (!extension.installed) {\n\t\tdelete massagedExtension.installed;\n\t}\n\tif (!extension.state) {\n\t\tdelete massagedExtension.state;\n\t}\n\tif (!extension.isApplicationScoped) {\n\t\tdelete massagedExtension.isApplicationScoped;\n\t}\n\treturn massagedExtension;\n}\n"],
  "mappings": "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",
  "names": ["remote", "merge"]
}
