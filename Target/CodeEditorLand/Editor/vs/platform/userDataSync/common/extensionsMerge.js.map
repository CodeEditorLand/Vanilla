{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/extensionsMerge.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { deepClone, equals } from \"../../../base/common/objects.js\";\nimport * as semver from \"../../../base/common/semver/semver.js\";\nimport { assertIsDefined } from \"../../../base/common/types.js\";\nimport type { IExtensionIdentifier } from \"../../extensions/common/extensions.js\";\nimport type {\n\tILocalSyncExtension,\n\tIRemoteSyncExtension,\n\tISyncExtension,\n} from \"./userDataSync.js\";\n\nexport interface IMergeResult {\n\treadonly local: {\n\t\tadded: ISyncExtension[];\n\t\tremoved: IExtensionIdentifier[];\n\t\tupdated: ISyncExtension[];\n\t};\n\treadonly remote: {\n\t\tadded: ISyncExtension[];\n\t\tremoved: ISyncExtension[];\n\t\tupdated: ISyncExtension[];\n\t\tall: ISyncExtension[];\n\t} | null;\n}\n\nexport function merge(\n\tlocalExtensions: ILocalSyncExtension[],\n\tremoteExtensions: IRemoteSyncExtension[] | null,\n\tlastSyncExtensions: IRemoteSyncExtension[] | null,\n\tskippedExtensions: ISyncExtension[],\n\tignoredExtensions: string[],\n\tlastSyncBuiltinExtensions: IExtensionIdentifier[] | null,\n): IMergeResult {\n\tconst added: ISyncExtension[] = [];\n\tconst removed: IExtensionIdentifier[] = [];\n\tconst updated: ISyncExtension[] = [];\n\n\tif (!remoteExtensions) {\n\t\tconst remote = localExtensions.filter(({ identifier }) =>\n\t\t\tignoredExtensions.every(\n\t\t\t\t(id) => id.toLowerCase() !== identifier.id.toLowerCase(),\n\t\t\t),\n\t\t);\n\t\treturn {\n\t\t\tlocal: {\n\t\t\t\tadded,\n\t\t\t\tremoved,\n\t\t\t\tupdated,\n\t\t\t},\n\t\t\tremote:\n\t\t\t\tremote.length > 0\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tadded: remote,\n\t\t\t\t\t\t\tupdated: [],\n\t\t\t\t\t\t\tremoved: [],\n\t\t\t\t\t\t\tall: remote,\n\t\t\t\t\t\t}\n\t\t\t\t\t: null,\n\t\t};\n\t}\n\n\tlocalExtensions = localExtensions.map(\n\t\tmassageIncomingExtension,\n\t) as ILocalSyncExtension[];\n\tremoteExtensions = remoteExtensions.map(massageIncomingExtension);\n\tlastSyncExtensions = lastSyncExtensions\n\t\t? lastSyncExtensions.map(massageIncomingExtension)\n\t\t: null;\n\n\tconst uuids: Map<string, string> = new Map<string, string>();\n\tconst addUUID = (identifier: IExtensionIdentifier) => {\n\t\tif (identifier.uuid) {\n\t\t\tuuids.set(identifier.id.toLowerCase(), identifier.uuid);\n\t\t}\n\t};\n\tlocalExtensions.forEach(({ identifier }) => addUUID(identifier));\n\tremoteExtensions.forEach(({ identifier }) => addUUID(identifier));\n\tlastSyncExtensions?.forEach(({ identifier }) => addUUID(identifier));\n\tskippedExtensions?.forEach(({ identifier }) => addUUID(identifier));\n\tlastSyncBuiltinExtensions?.forEach((identifier) => addUUID(identifier));\n\n\tconst getKey = (extension: ISyncExtension): string => {\n\t\tconst uuid =\n\t\t\textension.identifier.uuid ||\n\t\t\tuuids.get(extension.identifier.id.toLowerCase());\n\t\treturn uuid\n\t\t\t? `uuid:${uuid}`\n\t\t\t: `id:${extension.identifier.id.toLowerCase()}`;\n\t};\n\tconst addExtensionToMap = (\n\t\tmap: Map<string, ISyncExtension>,\n\t\textension: ISyncExtension,\n\t) => {\n\t\tmap.set(getKey(extension), extension);\n\t\treturn map;\n\t};\n\tconst localExtensionsMap: Map<string, ISyncExtension> =\n\t\tlocalExtensions.reduce(\n\t\t\taddExtensionToMap,\n\t\t\tnew Map<string, ISyncExtension>(),\n\t\t);\n\tconst remoteExtensionsMap = remoteExtensions.reduce(\n\t\taddExtensionToMap,\n\t\tnew Map<string, ISyncExtension>(),\n\t);\n\tconst newRemoteExtensionsMap = remoteExtensions.reduce(\n\t\t(map: Map<string, ISyncExtension>, extension: ISyncExtension) =>\n\t\t\taddExtensionToMap(map, deepClone(extension)),\n\t\tnew Map<string, ISyncExtension>(),\n\t);\n\tconst lastSyncExtensionsMap = lastSyncExtensions\n\t\t? lastSyncExtensions.reduce(\n\t\t\t\taddExtensionToMap,\n\t\t\t\tnew Map<string, ISyncExtension>(),\n\t\t\t)\n\t\t: null;\n\tconst skippedExtensionsMap = skippedExtensions.reduce(\n\t\taddExtensionToMap,\n\t\tnew Map<string, ISyncExtension>(),\n\t);\n\tconst ignoredExtensionsSet = ignoredExtensions.reduce((set, id) => {\n\t\tconst uuid = uuids.get(id.toLowerCase());\n\t\treturn set.add(uuid ? `uuid:${uuid}` : `id:${id.toLowerCase()}`);\n\t}, new Set<string>());\n\tconst lastSyncBuiltinExtensionsSet = lastSyncBuiltinExtensions\n\t\t? lastSyncBuiltinExtensions.reduce((set, { id, uuid }) => {\n\t\t\t\tuuid = uuid ?? uuids.get(id.toLowerCase());\n\t\t\t\treturn set.add(\n\t\t\t\t\tuuid ? `uuid:${uuid}` : `id:${id.toLowerCase()}`,\n\t\t\t\t);\n\t\t\t}, new Set<string>())\n\t\t: null;\n\n\tconst localToRemote = compare(\n\t\tlocalExtensionsMap,\n\t\tremoteExtensionsMap,\n\t\tignoredExtensionsSet,\n\t\tfalse,\n\t);\n\tif (\n\t\tlocalToRemote.added.size > 0 ||\n\t\tlocalToRemote.removed.size > 0 ||\n\t\tlocalToRemote.updated.size > 0\n\t) {\n\t\tconst baseToLocal = compare(\n\t\t\tlastSyncExtensionsMap,\n\t\t\tlocalExtensionsMap,\n\t\t\tignoredExtensionsSet,\n\t\t\tfalse,\n\t\t);\n\t\tconst baseToRemote = compare(\n\t\t\tlastSyncExtensionsMap,\n\t\t\tremoteExtensionsMap,\n\t\t\tignoredExtensionsSet,\n\t\t\ttrue,\n\t\t);\n\n\t\tconst merge = (\n\t\t\tkey: string,\n\t\t\tlocalExtension: ISyncExtension,\n\t\t\tremoteExtension: ISyncExtension,\n\t\t\tpreferred: ISyncExtension,\n\t\t): ISyncExtension => {\n\t\t\tlet pinned: boolean | undefined,\n\t\t\t\tversion: string | undefined,\n\t\t\t\tpreRelease: boolean | undefined;\n\t\t\tif (localExtension.installed) {\n\t\t\t\tpinned = preferred.pinned;\n\t\t\t\tpreRelease = preferred.preRelease;\n\t\t\t\tif (pinned) {\n\t\t\t\t\tversion = preferred.version;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpinned = remoteExtension.pinned;\n\t\t\t\tpreRelease = remoteExtension.preRelease;\n\t\t\t\tif (pinned) {\n\t\t\t\t\tversion = remoteExtension.version;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pinned === undefined /* from older client*/) {\n\t\t\t\tpinned = localExtension.pinned;\n\t\t\t\tif (pinned) {\n\t\t\t\t\tversion = localExtension.version;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (preRelease === undefined /* from older client*/) {\n\t\t\t\tpreRelease = localExtension.preRelease;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...preferred,\n\t\t\t\tinstalled:\n\t\t\t\t\tlocalExtension.installed || remoteExtension.installed,\n\t\t\t\tpinned,\n\t\t\t\tpreRelease,\n\t\t\t\tversion:\n\t\t\t\t\tversion ??\n\t\t\t\t\t(remoteExtension.version &&\n\t\t\t\t\t(!localExtension.installed ||\n\t\t\t\t\t\tsemver.gt(\n\t\t\t\t\t\t\tremoteExtension.version,\n\t\t\t\t\t\t\tlocalExtension.version,\n\t\t\t\t\t\t))\n\t\t\t\t\t\t? remoteExtension.version\n\t\t\t\t\t\t: localExtension.version),\n\t\t\t\tstate: mergeExtensionState(\n\t\t\t\t\tlocalExtension,\n\t\t\t\t\tremoteExtension,\n\t\t\t\t\tlastSyncExtensionsMap?.get(key),\n\t\t\t\t),\n\t\t\t};\n\t\t};\n\n\t\t// Remotely removed extension => exist in base and does not in remote\n\t\tfor (const key of baseToRemote.removed.values()) {\n\t\t\tconst localExtension = localExtensionsMap.get(key);\n\t\t\tif (!localExtension) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst baseExtension = assertIsDefined(\n\t\t\t\tlastSyncExtensionsMap?.get(key),\n\t\t\t);\n\t\t\tconst wasAnInstalledExtensionDuringLastSync =\n\t\t\t\tlastSyncBuiltinExtensionsSet &&\n\t\t\t\t!lastSyncBuiltinExtensionsSet.has(key) &&\n\t\t\t\tbaseExtension.installed;\n\t\t\tif (\n\t\t\t\tlocalExtension.installed &&\n\t\t\t\twasAnInstalledExtensionDuringLastSync /* It is an installed extension now and during last sync */\n\t\t\t) {\n\t\t\t\t// Installed extension is removed from remote. Remove it from local.\n\t\t\t\tremoved.push(localExtension.identifier);\n\t\t\t} else {\n\t\t\t\t// Add to remote: It is a builtin extenision or got installed after last sync\n\t\t\t\tnewRemoteExtensionsMap.set(key, localExtension);\n\t\t\t}\n\t\t}\n\n\t\t// Remotely added extension => does not exist in base and exist in remote\n\t\tfor (const key of baseToRemote.added.values()) {\n\t\t\tconst remoteExtension = assertIsDefined(\n\t\t\t\tremoteExtensionsMap.get(key),\n\t\t\t);\n\t\t\tconst localExtension = localExtensionsMap.get(key);\n\n\t\t\t// Also exist in local\n\t\t\tif (localExtension) {\n\t\t\t\t// Is different from local to remote\n\t\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\t\tconst mergedExtension = merge(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tlocalExtension,\n\t\t\t\t\t\tremoteExtension,\n\t\t\t\t\t\tremoteExtension,\n\t\t\t\t\t);\n\t\t\t\t\t// Update locally only when the extension has changes in properties other than installed poperty\n\t\t\t\t\tif (\n\t\t\t\t\t\t!areSame(localExtension, remoteExtension, false, false)\n\t\t\t\t\t) {\n\t\t\t\t\t\tupdated.push(\n\t\t\t\t\t\t\tmassageOutgoingExtension(mergedExtension, key),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tnewRemoteExtensionsMap.set(key, mergedExtension);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Add only if the extension is an installed extension\n\t\t\t\tif (remoteExtension.installed) {\n\t\t\t\t\tadded.push(massageOutgoingExtension(remoteExtension, key));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remotely updated extension => exist in base and remote\n\t\tfor (const key of baseToRemote.updated.values()) {\n\t\t\tconst remoteExtension = assertIsDefined(\n\t\t\t\tremoteExtensionsMap.get(key),\n\t\t\t);\n\t\t\tconst baseExtension = assertIsDefined(\n\t\t\t\tlastSyncExtensionsMap?.get(key),\n\t\t\t);\n\t\t\tconst localExtension = localExtensionsMap.get(key);\n\n\t\t\t// Also exist in local\n\t\t\tif (localExtension) {\n\t\t\t\tconst wasAnInstalledExtensionDuringLastSync =\n\t\t\t\t\tlastSyncBuiltinExtensionsSet &&\n\t\t\t\t\t!lastSyncBuiltinExtensionsSet.has(key) &&\n\t\t\t\t\tbaseExtension.installed;\n\t\t\t\tif (\n\t\t\t\t\twasAnInstalledExtensionDuringLastSync &&\n\t\t\t\t\tlocalExtension.installed &&\n\t\t\t\t\t!remoteExtension.installed\n\t\t\t\t) {\n\t\t\t\t\t// Remove it locally if it is installed locally and not remotely\n\t\t\t\t\tremoved.push(localExtension.identifier);\n\t\t\t\t} else {\n\t\t\t\t\t// Update in local always\n\t\t\t\t\tconst mergedExtension = merge(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tlocalExtension,\n\t\t\t\t\t\tremoteExtension,\n\t\t\t\t\t\tremoteExtension,\n\t\t\t\t\t);\n\t\t\t\t\tupdated.push(\n\t\t\t\t\t\tmassageOutgoingExtension(mergedExtension, key),\n\t\t\t\t\t);\n\t\t\t\t\tnewRemoteExtensionsMap.set(key, mergedExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add it locally if does not exist locally and installed remotely\n\t\t\telse if (remoteExtension.installed) {\n\t\t\t\tadded.push(massageOutgoingExtension(remoteExtension, key));\n\t\t\t}\n\t\t}\n\n\t\t// Locally added extension => does not exist in base and exist in local\n\t\tfor (const key of baseToLocal.added.values()) {\n\t\t\t// If added in remote (already handled)\n\t\t\tif (baseToRemote.added.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnewRemoteExtensionsMap.set(\n\t\t\t\tkey,\n\t\t\t\tassertIsDefined(localExtensionsMap.get(key)),\n\t\t\t);\n\t\t}\n\n\t\t// Locally updated extension => exist in base and local\n\t\tfor (const key of baseToLocal.updated.values()) {\n\t\t\t// If removed in remote (already handled)\n\t\t\tif (baseToRemote.removed.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// If updated in remote (already handled)\n\t\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst localExtension = assertIsDefined(localExtensionsMap.get(key));\n\t\t\tconst remoteExtension = assertIsDefined(\n\t\t\t\tremoteExtensionsMap.get(key),\n\t\t\t);\n\t\t\t// Update remotely\n\t\t\tnewRemoteExtensionsMap.set(\n\t\t\t\tkey,\n\t\t\t\tmerge(key, localExtension, remoteExtension, localExtension),\n\t\t\t);\n\t\t}\n\n\t\t// Locally removed extensions => exist in base and does not exist in local\n\t\tfor (const key of baseToLocal.removed.values()) {\n\t\t\t// If updated in remote (already handled)\n\t\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// If removed in remote (already handled)\n\t\t\tif (baseToRemote.removed.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Skipped\n\t\t\tif (skippedExtensionsMap.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Skip if it is a builtin extension\n\t\t\tif (!assertIsDefined(remoteExtensionsMap.get(key)).installed) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Skip if last sync builtin extensions set is not available\n\t\t\tif (!lastSyncBuiltinExtensionsSet) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Skip if it was a builtin extension during last sync\n\t\t\tif (\n\t\t\t\tlastSyncBuiltinExtensionsSet.has(key) ||\n\t\t\t\t!assertIsDefined(lastSyncExtensionsMap?.get(key)).installed\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnewRemoteExtensionsMap.delete(key);\n\t\t}\n\t}\n\n\tconst remote: ISyncExtension[] = [];\n\tconst remoteChanges = compare(\n\t\tremoteExtensionsMap,\n\t\tnewRemoteExtensionsMap,\n\t\tnew Set<string>(),\n\t\ttrue,\n\t);\n\tconst hasRemoteChanges =\n\t\tremoteChanges.added.size > 0 ||\n\t\tremoteChanges.updated.size > 0 ||\n\t\tremoteChanges.removed.size > 0;\n\tif (hasRemoteChanges) {\n\t\tnewRemoteExtensionsMap.forEach((value, key) =>\n\t\t\tremote.push(massageOutgoingExtension(value, key)),\n\t\t);\n\t}\n\n\treturn {\n\t\tlocal: { added, removed, updated },\n\t\tremote: hasRemoteChanges\n\t\t\t? {\n\t\t\t\t\tadded: [...remoteChanges.added].map(\n\t\t\t\t\t\t(id) => newRemoteExtensionsMap.get(id)!,\n\t\t\t\t\t),\n\t\t\t\t\tupdated: [...remoteChanges.updated].map(\n\t\t\t\t\t\t(id) => newRemoteExtensionsMap.get(id)!,\n\t\t\t\t\t),\n\t\t\t\t\tremoved: [...remoteChanges.removed].map(\n\t\t\t\t\t\t(id) => remoteExtensionsMap.get(id)!,\n\t\t\t\t\t),\n\t\t\t\t\tall: remote,\n\t\t\t\t}\n\t\t\t: null,\n\t};\n}\n\nfunction compare(\n\tfrom: Map<string, ISyncExtension> | null,\n\tto: Map<string, ISyncExtension>,\n\tignoredExtensions: Set<string>,\n\tcheckVersionProperty: boolean,\n): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = from\n\t\t? [...from.keys()].filter((key) => !ignoredExtensions.has(key))\n\t\t: [];\n\tconst toKeys = [...to.keys()].filter((key) => !ignoredExtensions.has(key));\n\tconst added = toKeys\n\t\t.filter((key) => !fromKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst removed = fromKeys\n\t\t.filter((key) => !toKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst fromExtension = from!.get(key)!;\n\t\tconst toExtension = to.get(key);\n\t\tif (\n\t\t\t!toExtension ||\n\t\t\t!areSame(fromExtension, toExtension, checkVersionProperty, true)\n\t\t) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction areSame(\n\tfromExtension: ISyncExtension,\n\ttoExtension: ISyncExtension,\n\tcheckVersionProperty: boolean,\n\tcheckInstalledProperty: boolean,\n): boolean {\n\tif (fromExtension.disabled !== toExtension.disabled) {\n\t\t/* extension enablement changed */\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!!fromExtension.isApplicationScoped !==\n\t\t!!toExtension.isApplicationScoped\n\t) {\n\t\t/* extension application scope has changed */\n\t\treturn false;\n\t}\n\n\tif (\n\t\tcheckInstalledProperty &&\n\t\tfromExtension.installed !== toExtension.installed\n\t) {\n\t\t/* extension installed property changed */\n\t\treturn false;\n\t}\n\n\tif (fromExtension.installed && toExtension.installed) {\n\t\tif (fromExtension.preRelease !== toExtension.preRelease) {\n\t\t\t/* installed extension's pre-release version changed */\n\t\t\treturn false;\n\t\t}\n\n\t\tif (fromExtension.pinned !== toExtension.pinned) {\n\t\t\t/* installed extension's pinning changed */\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\ttoExtension.pinned &&\n\t\t\tfromExtension.version !== toExtension.version\n\t\t) {\n\t\t\t/* installed extension's pinned version changed */\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (!isSameExtensionState(fromExtension.state, toExtension.state)) {\n\t\t/* extension state changed */\n\t\treturn false;\n\t}\n\n\tif (checkVersionProperty && fromExtension.version !== toExtension.version) {\n\t\t/* extension version changed */\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction mergeExtensionState(\n\tlocalExtension: ISyncExtension,\n\tremoteExtension: ISyncExtension,\n\tlastSyncExtension: ISyncExtension | undefined,\n): IStringDictionary<any> | undefined {\n\tconst localState = localExtension.state;\n\tconst remoteState = remoteExtension.state;\n\tconst baseState = lastSyncExtension?.state;\n\n\t// If remote extension has no version, use local state\n\tif (!remoteExtension.version) {\n\t\treturn localState;\n\t}\n\n\t// If local state exists and local extension is latest then use local state\n\tif (\n\t\tlocalState &&\n\t\tsemver.gt(localExtension.version, remoteExtension.version)\n\t) {\n\t\treturn localState;\n\t}\n\t// If remote state exists and remote extension is latest, use remote state\n\tif (\n\t\tremoteState &&\n\t\tsemver.gt(remoteExtension.version, localExtension.version)\n\t) {\n\t\treturn remoteState;\n\t}\n\n\t/* Remote and local are on same version */\n\n\t// If local state is not yet set, use remote state\n\tif (!localState) {\n\t\treturn remoteState;\n\t}\n\t// If remote state is not yet set, use local state\n\tif (!remoteState) {\n\t\treturn localState;\n\t}\n\n\tconst mergedState: IStringDictionary<any> = deepClone(localState);\n\tconst baseToRemote = baseState\n\t\t? compareExtensionState(baseState, remoteState)\n\t\t: {\n\t\t\t\tadded: Object.keys(remoteState).reduce((r, k) => {\n\t\t\t\t\tr.add(k);\n\t\t\t\t\treturn r;\n\t\t\t\t}, new Set<string>()),\n\t\t\t\tremoved: new Set<string>(),\n\t\t\t\tupdated: new Set<string>(),\n\t\t\t};\n\tconst baseToLocal = baseState\n\t\t? compareExtensionState(baseState, localState)\n\t\t: {\n\t\t\t\tadded: Object.keys(localState).reduce((r, k) => {\n\t\t\t\t\tr.add(k);\n\t\t\t\t\treturn r;\n\t\t\t\t}, new Set<string>()),\n\t\t\t\tremoved: new Set<string>(),\n\t\t\t\tupdated: new Set<string>(),\n\t\t\t};\n\t// Added/Updated in remote\n\tfor (const key of [\n\t\t...baseToRemote.added.values(),\n\t\t...baseToRemote.updated.values(),\n\t]) {\n\t\tmergedState[key] = remoteState[key];\n\t}\n\t// Removed in remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\t// Not updated in local\n\t\tif (!baseToLocal.updated.has(key)) {\n\t\t\tdelete mergedState[key];\n\t\t}\n\t}\n\treturn mergedState;\n}\n\nfunction compareExtensionState(\n\tfrom: IStringDictionary<any>,\n\tto: IStringDictionary<any>,\n): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = Object.keys(from);\n\tconst toKeys = Object.keys(to);\n\tconst added = toKeys\n\t\t.filter((key) => !fromKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst removed = fromKeys\n\t\t.filter((key) => !toKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1 = from[key];\n\t\tconst value2 = to[key];\n\t\tif (!equals(value1, value2)) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction isSameExtensionState(\n\ta: IStringDictionary<any> = {},\n\tb: IStringDictionary<any> = {},\n): boolean {\n\tconst { added, removed, updated } = compareExtensionState(a, b);\n\treturn added.size === 0 && removed.size === 0 && updated.size === 0;\n}\n\n// massage incoming extension - add optional properties\nfunction massageIncomingExtension(extension: ISyncExtension): ISyncExtension {\n\treturn {\n\t\t...extension,\n\t\t...{ disabled: !!extension.disabled, installed: !!extension.installed },\n\t};\n}\n\n// massage outgoing extension - remove optional properties\nfunction massageOutgoingExtension(\n\textension: ISyncExtension,\n\tkey: string,\n): ISyncExtension {\n\tconst massagedExtension: ISyncExtension = {\n\t\t...extension,\n\t\tidentifier: {\n\t\t\tid: extension.identifier.id,\n\t\t\tuuid: key.startsWith(\"uuid:\")\n\t\t\t\t? key.substring(\"uuid:\".length)\n\t\t\t\t: undefined,\n\t\t},\n\t\t/* set following always so that to differentiate with older clients */\n\t\tpreRelease: !!extension.preRelease,\n\t\tpinned: !!extension.pinned,\n\t};\n\tif (!extension.disabled) {\n\t\tdelete massagedExtension.disabled;\n\t}\n\tif (!extension.installed) {\n\t\tdelete massagedExtension.installed;\n\t}\n\tif (!extension.state) {\n\t\tdelete massagedExtension.state;\n\t}\n\tif (!extension.isApplicationScoped) {\n\t\tdelete massagedExtension.isApplicationScoped;\n\t}\n\treturn massagedExtension;\n}\n"],
  "mappings": "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",
  "names": ["remote", "merge"]
}
