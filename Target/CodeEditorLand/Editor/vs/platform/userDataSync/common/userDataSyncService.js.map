{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/userDataSyncService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../base/common/arrays.js';\nimport { CancelablePromise, createCancelablePromise, RunOnceScheduler } from '../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../base/common/resources.js';\nimport { isBoolean, isUndefined } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IExtensionGalleryService } from '../../extensionManagement/common/extensionManagement.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { ExtensionsSynchroniser } from './extensionsSync.js';\nimport { GlobalStateSynchroniser } from './globalStateSync.js';\nimport { KeybindingsSynchroniser } from './keybindingsSync.js';\nimport { SettingsSynchroniser } from './settingsSync.js';\nimport { SnippetsSynchroniser } from './snippetsSync.js';\nimport { TasksSynchroniser } from './tasksSync.js';\nimport { UserDataProfilesManifestSynchroniser } from './userDataProfilesManifestSync.js';\nimport {\n\tALL_SYNC_RESOURCES, Change, createSyncHeaders, IUserDataManualSyncTask, IUserDataSyncResourceConflicts, IUserDataSyncResourceError,\n\tIUserDataSyncResource, ISyncResourceHandle, IUserDataSyncTask, ISyncUserDataProfile, IUserDataManifest, IUserDataResourceManifest, IUserDataSyncConfiguration,\n\tIUserDataSyncEnablementService, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncService, IUserDataSyncStoreManagementService, IUserDataSyncStoreService,\n\tMergeState, SyncResource, SyncStatus, UserDataSyncError, UserDataSyncErrorCode, UserDataSyncStoreError, USER_DATA_SYNC_CONFIGURATION_SCOPE, IUserDataSyncResourceProviderService, IUserDataActivityData, IUserDataSyncLocalStoreService\n} from './userDataSync.js';\n\ntype SyncErrorClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about the error that occurred while syncing';\n\tcode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'error code' };\n\tservice: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Settings Sync service for which this error has occurred' };\n\tserverCode?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Settings Sync service error code' };\n\turl?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Settings Sync resource URL for which this error has occurred' };\n\tresource?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Settings Sync resource for which this error has occurred' };\n\texecutionId?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Settings Sync execution id for which this error has occurred' };\n};\n\nconst LAST_SYNC_TIME_KEY = 'sync.lastSyncTime';\n\nexport class UserDataSyncService extends Disposable implements IUserDataSyncService {\n\n\t_serviceBrand: any;\n\n\tprivate _status: SyncStatus = SyncStatus.Uninitialized;\n\tget status(): SyncStatus { return this._status; }\n\tprivate _onDidChangeStatus: Emitter<SyncStatus> = this._register(new Emitter<SyncStatus>());\n\treadonly onDidChangeStatus: Event<SyncStatus> = this._onDidChangeStatus.event;\n\n\tprivate _onDidChangeLocal = this._register(new Emitter<SyncResource>());\n\treadonly onDidChangeLocal = this._onDidChangeLocal.event;\n\n\tprivate _conflicts: IUserDataSyncResourceConflicts[] = [];\n\tget conflicts(): IUserDataSyncResourceConflicts[] { return this._conflicts; }\n\tprivate _onDidChangeConflicts = this._register(new Emitter<IUserDataSyncResourceConflicts[]>());\n\treadonly onDidChangeConflicts = this._onDidChangeConflicts.event;\n\n\tprivate _syncErrors: IUserDataSyncResourceError[] = [];\n\tprivate _onSyncErrors = this._register(new Emitter<IUserDataSyncResourceError[]>());\n\treadonly onSyncErrors = this._onSyncErrors.event;\n\n\tprivate _lastSyncTime: number | undefined = undefined;\n\tget lastSyncTime(): number | undefined { return this._lastSyncTime; }\n\tprivate _onDidChangeLastSyncTime: Emitter<number> = this._register(new Emitter<number>());\n\treadonly onDidChangeLastSyncTime: Event<number> = this._onDidChangeLastSyncTime.event;\n\n\tprivate _onDidResetLocal = this._register(new Emitter<void>());\n\treadonly onDidResetLocal = this._onDidResetLocal.event;\n\n\tprivate _onDidResetRemote = this._register(new Emitter<void>());\n\treadonly onDidResetRemote = this._onDidResetRemote.event;\n\n\tprivate activeProfileSynchronizers = new Map<string, [ProfileSynchronizer, IDisposable]>();\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncStoreManagementService private readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataSyncResourceProviderService private readonly userDataSyncResourceProviderService: IUserDataSyncResourceProviderService,\n\t\t@IUserDataSyncLocalStoreService private readonly userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t) {\n\t\tsuper();\n\t\tthis._status = userDataSyncStoreManagementService.userDataSyncStore ? SyncStatus.Idle : SyncStatus.Uninitialized;\n\t\tthis._lastSyncTime = this.storageService.getNumber(LAST_SYNC_TIME_KEY, StorageScope.APPLICATION, undefined);\n\t\tthis._register(toDisposable(() => this.clearActiveProfileSynchronizers()));\n\n\t\tthis._register(new RunOnceScheduler(() => this.cleanUpStaleStorageData(), 5 * 1000 /* after 5s */)).schedule();\n\t}\n\n\tasync createSyncTask(manifest: IUserDataManifest | null, disableCache?: boolean): Promise<IUserDataSyncTask> {\n\t\tthis.checkEnablement();\n\n\t\tthis.logService.info('Sync started.');\n\t\tconst startTime = new Date().getTime();\n\t\tconst executionId = generateUuid();\n\t\ttry {\n\t\t\tconst syncHeaders = createSyncHeaders(executionId);\n\t\t\tif (disableCache) {\n\t\t\t\tsyncHeaders['Cache-Control'] = 'no-cache';\n\t\t\t}\n\t\t\tmanifest = await this.userDataSyncStoreService.manifest(manifest, syncHeaders);\n\t\t} catch (error) {\n\t\t\tconst userDataSyncError = UserDataSyncError.toUserDataSyncError(error);\n\t\t\treportUserDataSyncError(userDataSyncError, executionId, this.userDataSyncStoreManagementService, this.telemetryService);\n\t\t\tthrow userDataSyncError;\n\t\t}\n\n\t\tconst executed = false;\n\t\tconst that = this;\n\t\tlet cancellablePromise: CancelablePromise<void> | undefined;\n\t\treturn {\n\t\t\tmanifest,\n\t\t\tasync run(): Promise<void> {\n\t\t\t\tif (executed) {\n\t\t\t\t\tthrow new Error('Can run a task only once');\n\t\t\t\t}\n\t\t\t\tcancellablePromise = createCancelablePromise(token => that.sync(manifest, false, executionId, token));\n\t\t\t\tawait cancellablePromise.finally(() => cancellablePromise = undefined);\n\t\t\t\tthat.logService.info(`Sync done. Took ${new Date().getTime() - startTime}ms`);\n\t\t\t\tthat.updateLastSyncTime();\n\t\t\t},\n\t\t\tstop(): Promise<void> {\n\t\t\t\tcancellablePromise?.cancel();\n\t\t\t\treturn that.stop();\n\t\t\t}\n\t\t};\n\t}\n\n\tasync createManualSyncTask(): Promise<IUserDataManualSyncTask> {\n\t\tthis.checkEnablement();\n\n\t\tif (this.userDataSyncEnablementService.isEnabled()) {\n\t\t\tthrow new UserDataSyncError('Cannot start manual sync when sync is enabled', UserDataSyncErrorCode.LocalError);\n\t\t}\n\n\t\tthis.logService.info('Sync started.');\n\t\tconst startTime = new Date().getTime();\n\t\tconst executionId = generateUuid();\n\t\tconst syncHeaders = createSyncHeaders(executionId);\n\t\tlet manifest: IUserDataManifest | null;\n\t\ttry {\n\t\t\tmanifest = await this.userDataSyncStoreService.manifest(null, syncHeaders);\n\t\t} catch (error) {\n\t\t\tconst userDataSyncError = UserDataSyncError.toUserDataSyncError(error);\n\t\t\treportUserDataSyncError(userDataSyncError, executionId, this.userDataSyncStoreManagementService, this.telemetryService);\n\t\t\tthrow userDataSyncError;\n\t\t}\n\n\t\t/* Manual sync shall start on clean local state */\n\t\tawait this.resetLocal();\n\n\t\tconst that = this;\n\t\tconst cancellableToken = new CancellationTokenSource();\n\t\treturn {\n\t\t\tid: executionId,\n\t\t\tasync merge(): Promise<void> {\n\t\t\t\treturn that.sync(manifest, true, executionId, cancellableToken.token);\n\t\t\t},\n\t\t\tasync apply(): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait that.applyManualSync(manifest, executionId, cancellableToken.token);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (UserDataSyncError.toUserDataSyncError(error).code === UserDataSyncErrorCode.MethodNotFound) {\n\t\t\t\t\t\t\tthat.logService.info('Client is making invalid requests. Cleaning up data...');\n\t\t\t\t\t\t\tawait that.cleanUpRemoteData();\n\t\t\t\t\t\t\tthat.logService.info('Applying manual sync again...');\n\t\t\t\t\t\t\tawait that.applyManualSync(manifest, executionId, cancellableToken.token);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthat.logService.error(error);\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tthat.logService.info(`Sync done. Took ${new Date().getTime() - startTime}ms`);\n\t\t\t\tthat.updateLastSyncTime();\n\t\t\t},\n\t\t\tasync stop(): Promise<void> {\n\t\t\t\tcancellableToken.cancel();\n\t\t\t\tawait that.stop();\n\t\t\t\tawait that.resetLocal();\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async sync(manifest: IUserDataManifest | null, merge: boolean, executionId: string, token: CancellationToken): Promise<void> {\n\t\tthis._syncErrors = [];\n\t\ttry {\n\t\t\tif (this.status !== SyncStatus.HasConflicts) {\n\t\t\t\tthis.setStatus(SyncStatus.Syncing);\n\t\t\t}\n\n\t\t\t// Sync Default Profile First\n\t\t\tconst defaultProfileSynchronizer = this.getOrCreateActiveProfileSynchronizer(this.userDataProfilesService.defaultProfile, undefined);\n\t\t\tthis._syncErrors.push(...await this.syncProfile(defaultProfileSynchronizer, manifest, merge, executionId, token));\n\n\t\t\t// Sync other profiles\n\t\t\tconst userDataProfileManifestSynchronizer = defaultProfileSynchronizer.enabled.find(s => s.resource === SyncResource.Profiles);\n\t\t\tif (userDataProfileManifestSynchronizer) {\n\t\t\t\tconst syncProfiles = (await (userDataProfileManifestSynchronizer as UserDataProfilesManifestSynchroniser).getLastSyncedProfiles()) || [];\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tawait this.syncRemoteProfiles(syncProfiles, manifest, merge, executionId, token);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (this.status !== SyncStatus.HasConflicts) {\n\t\t\t\tthis.setStatus(SyncStatus.Idle);\n\t\t\t}\n\t\t\tthis._onSyncErrors.fire(this._syncErrors);\n\t\t}\n\t}\n\n\tprivate async syncRemoteProfiles(remoteProfiles: ISyncUserDataProfile[], manifest: IUserDataManifest | null, merge: boolean, executionId: string, token: CancellationToken): Promise<void> {\n\t\tfor (const syncProfile of remoteProfiles) {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst profile = this.userDataProfilesService.profiles.find(p => p.id === syncProfile.id);\n\t\t\tif (!profile) {\n\t\t\t\tthis.logService.error(`Profile with id:${syncProfile.id} and name: ${syncProfile.name} does not exist locally to sync.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.logService.info('Syncing profile.', syncProfile.name);\n\t\t\tconst profileSynchronizer = this.getOrCreateActiveProfileSynchronizer(profile, syncProfile);\n\t\t\tthis._syncErrors.push(...await this.syncProfile(profileSynchronizer, manifest, merge, executionId, token));\n\t\t}\n\t\t// Dispose & Delete profile synchronizers which do not exist anymore\n\t\tfor (const [key, profileSynchronizerItem] of this.activeProfileSynchronizers.entries()) {\n\t\t\tif (this.userDataProfilesService.profiles.some(p => p.id === profileSynchronizerItem[0].profile.id)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tawait profileSynchronizerItem[0].resetLocal();\n\t\t\tprofileSynchronizerItem[1].dispose();\n\t\t\tthis.activeProfileSynchronizers.delete(key);\n\t\t}\n\t}\n\n\tprivate async applyManualSync(manifest: IUserDataManifest | null, executionId: string, token: CancellationToken): Promise<void> {\n\t\tconst profileSynchronizers = this.getActiveProfileSynchronizers();\n\t\tfor (const profileSynchronizer of profileSynchronizers) {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait profileSynchronizer.apply(executionId, token);\n\t\t}\n\n\t\tconst defaultProfileSynchronizer = profileSynchronizers.find(s => s.profile.isDefault);\n\t\tif (!defaultProfileSynchronizer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userDataProfileManifestSynchronizer = defaultProfileSynchronizer.enabled.find(s => s.resource === SyncResource.Profiles);\n\t\tif (!userDataProfileManifestSynchronizer) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Sync remote profiles which are not synced locally\n\t\tconst remoteProfiles = (await (userDataProfileManifestSynchronizer as UserDataProfilesManifestSynchroniser).getRemoteSyncedProfiles(manifest?.latest ?? null)) || [];\n\t\tconst remoteProfilesToSync = remoteProfiles.filter(remoteProfile => profileSynchronizers.every(s => s.profile.id !== remoteProfile.id));\n\t\tif (remoteProfilesToSync.length) {\n\t\t\tawait this.syncRemoteProfiles(remoteProfilesToSync, manifest, false, executionId, token);\n\t\t}\n\t}\n\n\tprivate async syncProfile(profileSynchronizer: ProfileSynchronizer, manifest: IUserDataManifest | null, merge: boolean, executionId: string, token: CancellationToken): Promise<IUserDataSyncResourceError[]> {\n\t\tconst errors = await profileSynchronizer.sync(manifest, merge, executionId, token);\n\t\treturn errors.map(([syncResource, error]) => ({ profile: profileSynchronizer.profile, syncResource, error }));\n\t}\n\n\tprivate async stop(): Promise<void> {\n\t\tif (this.status !== SyncStatus.Idle) {\n\t\t\tawait Promise.allSettled(this.getActiveProfileSynchronizers().map(profileSynchronizer => profileSynchronizer.stop()));\n\t\t}\n\t}\n\n\tasync resolveContent(resource: URI): Promise<string | null> {\n\t\tconst content = await this.userDataSyncResourceProviderService.resolveContent(resource);\n\t\tif (content) {\n\t\t\treturn content;\n\t\t}\n\t\tfor (const profileSynchronizer of this.getActiveProfileSynchronizers()) {\n\t\t\tfor (const synchronizer of profileSynchronizer.enabled) {\n\t\t\t\tconst content = await synchronizer.resolveContent(resource);\n\t\t\t\tif (content) {\n\t\t\t\t\treturn content;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync replace(syncResourceHandle: ISyncResourceHandle): Promise<void> {\n\t\tthis.checkEnablement();\n\n\t\tconst profileSyncResource = this.userDataSyncResourceProviderService.resolveUserDataSyncResource(syncResourceHandle);\n\t\tif (!profileSyncResource) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst content = await this.resolveContent(syncResourceHandle.uri);\n\t\tif (!content) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.performAction(profileSyncResource.profile, async synchronizer => {\n\t\t\tif (profileSyncResource.syncResource === synchronizer.resource) {\n\t\t\t\tawait synchronizer.replace(content);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\n\t\treturn;\n\t}\n\n\tasync accept(syncResource: IUserDataSyncResource, resource: URI, content: string | null | undefined, apply: boolean | { force: boolean }): Promise<void> {\n\t\tthis.checkEnablement();\n\n\t\tawait this.performAction(syncResource.profile, async synchronizer => {\n\t\t\tif (syncResource.syncResource === synchronizer.resource) {\n\t\t\t\tawait synchronizer.accept(resource, content);\n\t\t\t\tif (apply) {\n\t\t\t\t\tawait synchronizer.apply(isBoolean(apply) ? false : apply.force, createSyncHeaders(generateUuid()));\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\tconst result = await this.performAction(this.userDataProfilesService.defaultProfile, async synchronizer => {\n\t\t\t// skip global state synchronizer\n\t\t\tif (synchronizer.resource !== SyncResource.GlobalState && await synchronizer.hasLocalData()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t\treturn !!result;\n\t}\n\n\tasync hasPreviouslySynced(): Promise<boolean> {\n\t\tconst result = await this.performAction(this.userDataProfilesService.defaultProfile, async synchronizer => {\n\t\t\tif (await synchronizer.hasPreviouslySynced()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t\treturn !!result;\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tthis.checkEnablement();\n\t\tawait this.resetRemote();\n\t\tawait this.resetLocal();\n\t}\n\n\tasync resetRemote(): Promise<void> {\n\t\tthis.checkEnablement();\n\t\ttry {\n\t\t\tawait this.userDataSyncStoreService.clear();\n\t\t\tthis.logService.info('Cleared data on server');\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t\tthis._onDidResetRemote.fire();\n\t}\n\n\tasync resetLocal(): Promise<void> {\n\t\tthis.checkEnablement();\n\t\tthis._lastSyncTime = undefined;\n\t\tthis.storageService.remove(LAST_SYNC_TIME_KEY, StorageScope.APPLICATION);\n\t\tfor (const [synchronizer] of this.activeProfileSynchronizers.values()) {\n\t\t\ttry {\n\t\t\t\tawait synchronizer.resetLocal();\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\tthis.clearActiveProfileSynchronizers();\n\t\tthis._onDidResetLocal.fire();\n\t\tthis.logService.info('Did reset the local sync state.');\n\t}\n\n\tprivate async cleanUpStaleStorageData(): Promise<void> {\n\t\tconst allKeys = this.storageService.keys(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tconst lastSyncProfileKeys: [string, string][] = [];\n\t\tfor (const key of allKeys) {\n\t\t\tif (!key.endsWith('.lastSyncUserData')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst segments = key.split('.');\n\t\t\tif (segments.length === 3) {\n\t\t\t\tlastSyncProfileKeys.push([key, segments[0]]);\n\t\t\t}\n\t\t}\n\t\tif (!lastSyncProfileKeys.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\n\t\ttry {\n\t\t\tlet defaultProfileSynchronizer = this.activeProfileSynchronizers.get(this.userDataProfilesService.defaultProfile.id)?.[0];\n\t\t\tif (!defaultProfileSynchronizer) {\n\t\t\t\tdefaultProfileSynchronizer = disposables.add(this.instantiationService.createInstance(ProfileSynchronizer, this.userDataProfilesService.defaultProfile, undefined));\n\t\t\t}\n\t\t\tconst userDataProfileManifestSynchronizer = defaultProfileSynchronizer.enabled.find(s => s.resource === SyncResource.Profiles) as UserDataProfilesManifestSynchroniser;\n\t\t\tif (!userDataProfileManifestSynchronizer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst lastSyncedProfiles = await userDataProfileManifestSynchronizer.getLastSyncedProfiles();\n\t\t\tconst lastSyncedCollections = lastSyncedProfiles?.map(p => p.collection) ?? [];\n\t\t\tfor (const [key, collection] of lastSyncProfileKeys) {\n\t\t\t\tif (!lastSyncedCollections.includes(collection)) {\n\t\t\t\t\tthis.logService.info(`Removing last sync state for stale profile: ${collection}`);\n\t\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tasync cleanUpRemoteData(): Promise<void> {\n\t\tconst remoteProfiles = await this.userDataSyncResourceProviderService.getRemoteSyncedProfiles();\n\t\tconst remoteProfileCollections = remoteProfiles.map(profile => profile.collection);\n\t\tconst allCollections = await this.userDataSyncStoreService.getAllCollections();\n\t\tconst redundantCollections = allCollections.filter(c => !remoteProfileCollections.includes(c));\n\t\tif (redundantCollections.length) {\n\t\t\tthis.logService.info(`Deleting ${redundantCollections.length} redundant collections on server`);\n\t\t\tawait Promise.allSettled(redundantCollections.map(collectionId => this.userDataSyncStoreService.deleteCollection(collectionId)));\n\t\t\tthis.logService.info(`Deleted redundant collections on server`);\n\t\t}\n\t\tconst updatedRemoteProfiles = remoteProfiles.filter(profile => allCollections.includes(profile.collection));\n\t\tif (updatedRemoteProfiles.length !== remoteProfiles.length) {\n\t\t\tconst profileManifestSynchronizer = this.instantiationService.createInstance(UserDataProfilesManifestSynchroniser, this.userDataProfilesService.defaultProfile, undefined);\n\t\t\ttry {\n\t\t\t\tthis.logService.info('Resetting the last synced state of profiles');\n\t\t\t\tawait profileManifestSynchronizer.resetLocal();\n\t\t\t\tthis.logService.info('Did reset the last synced state of profiles');\n\t\t\t\tthis.logService.info(`Updating remote profiles with invalid collections on server`);\n\t\t\t\tawait profileManifestSynchronizer.updateRemoteProfiles(updatedRemoteProfiles, null);\n\t\t\t\tthis.logService.info(`Updated remote profiles on server`);\n\t\t\t} finally {\n\t\t\t\tprofileManifestSynchronizer.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync saveRemoteActivityData(location: URI): Promise<void> {\n\t\tthis.checkEnablement();\n\t\tconst data = await this.userDataSyncStoreService.getActivityData();\n\t\tawait this.fileService.writeFile(location, data);\n\t}\n\n\tasync extractActivityData(activityDataResource: URI, location: URI): Promise<void> {\n\t\tconst content = (await this.fileService.readFile(activityDataResource)).value.toString();\n\t\tconst activityData: IUserDataActivityData = JSON.parse(content);\n\n\t\tif (activityData.resources) {\n\t\t\tfor (const resource in activityData.resources) {\n\t\t\t\tfor (const version of activityData.resources[resource]) {\n\t\t\t\t\tawait this.userDataSyncLocalStoreService.writeResource(resource as SyncResource, version.content, new Date(version.created * 1000), undefined, location);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (activityData.collections) {\n\t\t\tfor (const collection in activityData.collections) {\n\t\t\t\tfor (const resource in activityData.collections[collection].resources) {\n\t\t\t\t\tfor (const version of activityData.collections[collection].resources?.[resource] ?? []) {\n\t\t\t\t\t\tawait this.userDataSyncLocalStoreService.writeResource(resource as SyncResource, version.content, new Date(version.created * 1000), collection, location);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async performAction<T>(profile: IUserDataProfile, action: (synchroniser: IUserDataSynchroniser) => Promise<T | undefined>): Promise<T | null> {\n\t\tconst disposables = new DisposableStore();\n\t\ttry {\n\t\t\tconst activeProfileSyncronizer = this.activeProfileSynchronizers.get(profile.id);\n\t\t\tif (activeProfileSyncronizer) {\n\t\t\t\tconst result = await this.performActionWithProfileSynchronizer(activeProfileSyncronizer[0], action, disposables);\n\t\t\t\treturn isUndefined(result) ? null : result;\n\t\t\t}\n\n\t\t\tif (profile.isDefault) {\n\t\t\t\tconst defaultProfileSynchronizer = disposables.add(this.instantiationService.createInstance(ProfileSynchronizer, profile, undefined));\n\t\t\t\tconst result = await this.performActionWithProfileSynchronizer(defaultProfileSynchronizer, action, disposables);\n\t\t\t\treturn isUndefined(result) ? null : result;\n\t\t\t}\n\n\t\t\tif (this.userDataProfilesService.isEnabled()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst userDataProfileManifestSynchronizer = disposables.add(this.instantiationService.createInstance(UserDataProfilesManifestSynchroniser, profile, undefined));\n\t\t\tconst manifest = await this.userDataSyncStoreService.manifest(null);\n\t\t\tconst syncProfiles = (await userDataProfileManifestSynchronizer.getRemoteSyncedProfiles(manifest?.latest ?? null)) || [];\n\t\t\tconst syncProfile = syncProfiles.find(syncProfile => syncProfile.id === profile.id);\n\t\t\tif (syncProfile) {\n\t\t\t\tconst profileSynchronizer = disposables.add(this.instantiationService.createInstance(ProfileSynchronizer, profile, syncProfile.collection));\n\t\t\t\tconst result = await this.performActionWithProfileSynchronizer(profileSynchronizer, action, disposables);\n\t\t\t\treturn isUndefined(result) ? null : result;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tprivate async performActionWithProfileSynchronizer<T>(profileSynchronizer: ProfileSynchronizer, action: (synchroniser: IUserDataSynchroniser) => Promise<T | undefined>, disposables: DisposableStore): Promise<T | undefined> {\n\t\tconst allSynchronizers = [...profileSynchronizer.enabled, ...profileSynchronizer.disabled.reduce<(IUserDataSynchroniser & IDisposable)[]>((synchronizers, syncResource) => {\n\t\t\tif (syncResource !== SyncResource.WorkspaceState) {\n\t\t\t\tsynchronizers.push(disposables.add(profileSynchronizer.createSynchronizer(syncResource)));\n\t\t\t}\n\t\t\treturn synchronizers;\n\t\t}, [])];\n\t\tfor (const synchronizer of allSynchronizers) {\n\t\t\tconst result = await action(synchronizer);\n\t\t\tif (!isUndefined(result)) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate setStatus(status: SyncStatus): void {\n\t\tconst oldStatus = this._status;\n\t\tif (this._status !== status) {\n\t\t\tthis._status = status;\n\t\t\tthis._onDidChangeStatus.fire(status);\n\t\t\tif (oldStatus === SyncStatus.HasConflicts) {\n\t\t\t\tthis.updateLastSyncTime();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateConflicts(): void {\n\t\tconst conflicts = this.getActiveProfileSynchronizers().map(synchronizer => synchronizer.conflicts).flat();\n\t\tif (!equals(this._conflicts, conflicts, (a, b) => a.profile.id === b.profile.id && a.syncResource === b.syncResource && equals(a.conflicts, b.conflicts, (a, b) => isEqual(a.previewResource, b.previewResource)))) {\n\t\t\tthis._conflicts = conflicts;\n\t\t\tthis._onDidChangeConflicts.fire(conflicts);\n\t\t}\n\t}\n\n\tprivate updateLastSyncTime(): void {\n\t\tif (this.status === SyncStatus.Idle) {\n\t\t\tthis._lastSyncTime = new Date().getTime();\n\t\t\tthis.storageService.store(LAST_SYNC_TIME_KEY, this._lastSyncTime, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\tthis._onDidChangeLastSyncTime.fire(this._lastSyncTime);\n\t\t}\n\t}\n\n\tgetOrCreateActiveProfileSynchronizer(profile: IUserDataProfile, syncProfile: ISyncUserDataProfile | undefined): ProfileSynchronizer {\n\t\tlet activeProfileSynchronizer = this.activeProfileSynchronizers.get(profile.id);\n\t\tif (activeProfileSynchronizer && activeProfileSynchronizer[0].collection !== syncProfile?.collection) {\n\t\t\tthis.logService.error('Profile synchronizer collection does not match with the remote sync profile collection');\n\t\t\tactiveProfileSynchronizer[1].dispose();\n\t\t\tactiveProfileSynchronizer = undefined;\n\t\t\tthis.activeProfileSynchronizers.delete(profile.id);\n\t\t}\n\t\tif (!activeProfileSynchronizer) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst profileSynchronizer = disposables.add(this.instantiationService.createInstance(ProfileSynchronizer, profile, syncProfile?.collection));\n\t\t\tdisposables.add(profileSynchronizer.onDidChangeStatus(e => this.setStatus(e)));\n\t\t\tdisposables.add(profileSynchronizer.onDidChangeConflicts(conflicts => this.updateConflicts()));\n\t\t\tdisposables.add(profileSynchronizer.onDidChangeLocal(e => this._onDidChangeLocal.fire(e)));\n\t\t\tthis.activeProfileSynchronizers.set(profile.id, activeProfileSynchronizer = [profileSynchronizer, disposables]);\n\t\t}\n\t\treturn activeProfileSynchronizer[0];\n\t}\n\n\tprivate getActiveProfileSynchronizers(): ProfileSynchronizer[] {\n\t\tconst profileSynchronizers: ProfileSynchronizer[] = [];\n\t\tfor (const [profileSynchronizer] of this.activeProfileSynchronizers.values()) {\n\t\t\tprofileSynchronizers.push(profileSynchronizer);\n\t\t}\n\t\treturn profileSynchronizers;\n\t}\n\n\tprivate clearActiveProfileSynchronizers(): void {\n\t\tthis.activeProfileSynchronizers.forEach(([, disposable]) => disposable.dispose());\n\t\tthis.activeProfileSynchronizers.clear();\n\t}\n\n\tprivate checkEnablement(): void {\n\t\tif (!this.userDataSyncStoreManagementService.userDataSyncStore) {\n\t\t\tthrow new Error('Not enabled');\n\t\t}\n\t}\n\n}\n\n\nclass ProfileSynchronizer extends Disposable {\n\n\tprivate _enabled: [IUserDataSynchroniser, number, IDisposable][] = [];\n\tget enabled(): IUserDataSynchroniser[] { return this._enabled.sort((a, b) => a[1] - b[1]).map(([synchronizer]) => synchronizer); }\n\n\tget disabled(): SyncResource[] { return ALL_SYNC_RESOURCES.filter(syncResource => !this.userDataSyncEnablementService.isResourceEnabled(syncResource)); }\n\n\tprivate _status: SyncStatus = SyncStatus.Idle;\n\tget status(): SyncStatus { return this._status; }\n\tprivate _onDidChangeStatus: Emitter<SyncStatus> = this._register(new Emitter<SyncStatus>());\n\treadonly onDidChangeStatus: Event<SyncStatus> = this._onDidChangeStatus.event;\n\n\tprivate _onDidChangeLocal = this._register(new Emitter<SyncResource>());\n\treadonly onDidChangeLocal = this._onDidChangeLocal.event;\n\n\tprivate _conflicts: IUserDataSyncResourceConflicts[] = [];\n\tget conflicts(): IUserDataSyncResourceConflicts[] { return this._conflicts; }\n\tprivate _onDidChangeConflicts = this._register(new Emitter<IUserDataSyncResourceConflicts[]>());\n\treadonly onDidChangeConflicts = this._onDidChangeConflicts.event;\n\n\tconstructor(\n\t\treadonly profile: IUserDataProfile,\n\t\treadonly collection: string | undefined,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IUserDataSyncStoreManagementService private readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(userDataSyncEnablementService.onDidChangeResourceEnablement(([syncResource, enablement]) => this.onDidChangeResourceEnablement(syncResource, enablement)));\n\t\tthis._register(toDisposable(() => this._enabled.splice(0, this._enabled.length).forEach(([, , disposable]) => disposable.dispose())));\n\t\tfor (const syncResource of ALL_SYNC_RESOURCES) {\n\t\t\tif (userDataSyncEnablementService.isResourceEnabled(syncResource)) {\n\t\t\t\tthis.registerSynchronizer(syncResource);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidChangeResourceEnablement(syncResource: SyncResource, enabled: boolean): void {\n\t\tif (enabled) {\n\t\t\tthis.registerSynchronizer(syncResource);\n\t\t} else {\n\t\t\tthis.deRegisterSynchronizer(syncResource);\n\t\t}\n\t}\n\n\tprotected registerSynchronizer(syncResource: SyncResource): void {\n\t\tif (this._enabled.some(([synchronizer]) => synchronizer.resource === syncResource)) {\n\t\t\treturn;\n\t\t}\n\t\tif (syncResource === SyncResource.Extensions && !this.extensionGalleryService.isEnabled()) {\n\t\t\tthis.logService.info('Skipping extensions sync because gallery is not configured');\n\t\t\treturn;\n\t\t}\n\t\tif (syncResource === SyncResource.Profiles) {\n\t\t\tif (!this.profile.isDefault) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this.userDataProfilesService.isEnabled()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (syncResource === SyncResource.WorkspaceState) {\n\t\t\treturn;\n\t\t}\n\t\tif (syncResource !== SyncResource.Profiles && this.profile.useDefaultFlags?.[syncResource]) {\n\t\t\tthis.logService.debug(`Skipping syncing ${syncResource} in ${this.profile.name} because it is already synced by default profile`);\n\t\t\treturn;\n\t\t}\n\t\tconst disposables = new DisposableStore();\n\t\tconst synchronizer = disposables.add(this.createSynchronizer(syncResource));\n\t\tdisposables.add(synchronizer.onDidChangeStatus(() => this.updateStatus()));\n\t\tdisposables.add(synchronizer.onDidChangeConflicts(() => this.updateConflicts()));\n\t\tdisposables.add(synchronizer.onDidChangeLocal(() => this._onDidChangeLocal.fire(syncResource)));\n\t\tconst order = this.getOrder(syncResource);\n\t\tthis._enabled.push([synchronizer, order, disposables]);\n\t}\n\n\tprivate deRegisterSynchronizer(syncResource: SyncResource): void {\n\t\tconst index = this._enabled.findIndex(([synchronizer]) => synchronizer.resource === syncResource);\n\t\tif (index !== -1) {\n\t\t\tconst [[synchronizer, , disposable]] = this._enabled.splice(index, 1);\n\t\t\tdisposable.dispose();\n\t\t\tthis.updateStatus();\n\t\t\tsynchronizer.stop().then(null, error => this.logService.error(error));\n\t\t}\n\t}\n\n\tcreateSynchronizer(syncResource: Exclude<SyncResource, SyncResource.WorkspaceState>): IUserDataSynchroniser & IDisposable {\n\t\tswitch (syncResource) {\n\t\t\tcase SyncResource.Settings: return this.instantiationService.createInstance(SettingsSynchroniser, this.profile, this.collection);\n\t\t\tcase SyncResource.Keybindings: return this.instantiationService.createInstance(KeybindingsSynchroniser, this.profile, this.collection);\n\t\t\tcase SyncResource.Snippets: return this.instantiationService.createInstance(SnippetsSynchroniser, this.profile, this.collection);\n\t\t\tcase SyncResource.Tasks: return this.instantiationService.createInstance(TasksSynchroniser, this.profile, this.collection);\n\t\t\tcase SyncResource.GlobalState: return this.instantiationService.createInstance(GlobalStateSynchroniser, this.profile, this.collection);\n\t\t\tcase SyncResource.Extensions: return this.instantiationService.createInstance(ExtensionsSynchroniser, this.profile, this.collection);\n\t\t\tcase SyncResource.Profiles: return this.instantiationService.createInstance(UserDataProfilesManifestSynchroniser, this.profile, this.collection);\n\t\t}\n\t}\n\n\tasync sync(manifest: IUserDataManifest | null, merge: boolean, executionId: string, token: CancellationToken): Promise<[SyncResource, UserDataSyncError][]> {\n\n\t\t// Return if cancellation is requested\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst synchronizers = this.enabled;\n\t\tif (!synchronizers.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tconst syncErrors: [SyncResource, UserDataSyncError][] = [];\n\t\t\tconst syncHeaders = createSyncHeaders(executionId);\n\t\t\tconst resourceManifest: IUserDataResourceManifest | null = (this.collection ? manifest?.collections?.[this.collection]?.latest : manifest?.latest) ?? null;\n\t\t\tconst userDataSyncConfiguration = merge ? await this.getUserDataSyncConfiguration(resourceManifest) : {};\n\t\t\tfor (const synchroniser of synchronizers) {\n\t\t\t\t// Return if cancellation is requested\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\t// Return if resource is not enabled\n\t\t\t\tif (!this.userDataSyncEnablementService.isResourceEnabled(synchroniser.resource)) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (merge) {\n\t\t\t\t\t\tconst preview = await synchroniser.preview(resourceManifest, userDataSyncConfiguration, syncHeaders);\n\t\t\t\t\t\tif (preview) {\n\t\t\t\t\t\t\tfor (const resourcePreview of preview.resourcePreviews) {\n\t\t\t\t\t\t\t\tif ((resourcePreview.localChange !== Change.None || resourcePreview.remoteChange !== Change.None) && resourcePreview.mergeState === MergeState.Preview) {\n\t\t\t\t\t\t\t\t\tawait synchroniser.merge(resourcePreview.previewResource);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait synchroniser.sync(resourceManifest, syncHeaders);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst userDataSyncError = UserDataSyncError.toUserDataSyncError(e);\n\t\t\t\t\treportUserDataSyncError(userDataSyncError, executionId, this.userDataSyncStoreManagementService, this.telemetryService);\n\t\t\t\t\tif (canBailout(e)) {\n\t\t\t\t\t\tthrow userDataSyncError;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Log and and continue\n\t\t\t\t\tthis.logService.error(e);\n\t\t\t\t\tthis.logService.error(`${synchroniser.resource}: ${toErrorMessage(e)}`);\n\t\t\t\t\tsyncErrors.push([synchroniser.resource, userDataSyncError]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn syncErrors;\n\t\t} finally {\n\t\t\tthis.updateStatus();\n\t\t}\n\t}\n\n\tasync apply(executionId: string, token: CancellationToken): Promise<void> {\n\t\tconst syncHeaders = createSyncHeaders(executionId);\n\t\tfor (const synchroniser of this.enabled) {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tawait synchroniser.apply(false, syncHeaders);\n\t\t\t} catch (e) {\n\t\t\t\tconst userDataSyncError = UserDataSyncError.toUserDataSyncError(e);\n\t\t\t\treportUserDataSyncError(userDataSyncError, executionId, this.userDataSyncStoreManagementService, this.telemetryService);\n\t\t\t\tif (canBailout(e)) {\n\t\t\t\t\tthrow userDataSyncError;\n\t\t\t\t}\n\n\t\t\t\t// Log and and continue\n\t\t\t\tthis.logService.error(e);\n\t\t\t\tthis.logService.error(`${synchroniser.resource}: ${toErrorMessage(e)}`);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tfor (const synchroniser of this.enabled) {\n\t\t\ttry {\n\t\t\t\tif (synchroniser.status !== SyncStatus.Idle) {\n\t\t\t\t\tawait synchroniser.stop();\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync resetLocal(): Promise<void> {\n\t\tfor (const synchroniser of this.enabled) {\n\t\t\ttry {\n\t\t\t\tawait synchroniser.resetLocal();\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(`${synchroniser.resource}: ${toErrorMessage(e)}`);\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getUserDataSyncConfiguration(manifest: IUserDataResourceManifest | null): Promise<IUserDataSyncConfiguration> {\n\t\tif (!this.profile.isDefault) {\n\t\t\treturn {};\n\t\t}\n\t\tconst local = this.configurationService.getValue<IUserDataSyncConfiguration>(USER_DATA_SYNC_CONFIGURATION_SCOPE);\n\t\tconst settingsSynchronizer = this.enabled.find(synchronizer => synchronizer instanceof SettingsSynchroniser);\n\t\tif (settingsSynchronizer) {\n\t\t\tconst remote = await (<SettingsSynchroniser>settingsSynchronizer).getRemoteUserDataSyncConfiguration(manifest);\n\t\t\treturn { ...local, ...remote };\n\t\t}\n\t\treturn local;\n\t}\n\n\tprivate setStatus(status: SyncStatus): void {\n\t\tif (this._status !== status) {\n\t\t\tthis._status = status;\n\t\t\tthis._onDidChangeStatus.fire(status);\n\t\t}\n\t}\n\n\tprivate updateStatus(): void {\n\t\tthis.updateConflicts();\n\t\tif (this.enabled.some(s => s.status === SyncStatus.HasConflicts)) {\n\t\t\treturn this.setStatus(SyncStatus.HasConflicts);\n\t\t}\n\t\tif (this.enabled.some(s => s.status === SyncStatus.Syncing)) {\n\t\t\treturn this.setStatus(SyncStatus.Syncing);\n\t\t}\n\t\treturn this.setStatus(SyncStatus.Idle);\n\t}\n\n\tprivate updateConflicts(): void {\n\t\tconst conflicts = this.enabled.filter(s => s.status === SyncStatus.HasConflicts)\n\t\t\t.filter(s => s.conflicts.conflicts.length > 0)\n\t\t\t.map(s => s.conflicts);\n\t\tif (!equals(this._conflicts, conflicts, (a, b) => a.syncResource === b.syncResource && equals(a.conflicts, b.conflicts, (a, b) => isEqual(a.previewResource, b.previewResource)))) {\n\t\t\tthis._conflicts = conflicts;\n\t\t\tthis._onDidChangeConflicts.fire(conflicts);\n\t\t}\n\t}\n\n\tprivate getOrder(syncResource: SyncResource): number {\n\t\tswitch (syncResource) {\n\t\t\tcase SyncResource.Settings: return 0;\n\t\t\tcase SyncResource.Keybindings: return 1;\n\t\t\tcase SyncResource.Snippets: return 2;\n\t\t\tcase SyncResource.Tasks: return 3;\n\t\t\tcase SyncResource.GlobalState: return 4;\n\t\t\tcase SyncResource.Extensions: return 5;\n\t\t\tcase SyncResource.Profiles: return 6;\n\t\t\tcase SyncResource.WorkspaceState: return 7;\n\t\t}\n\t}\n\n}\n\nfunction canBailout(e: any): boolean {\n\tif (e instanceof UserDataSyncError) {\n\t\tswitch (e.code) {\n\t\t\tcase UserDataSyncErrorCode.MethodNotFound:\n\t\t\tcase UserDataSyncErrorCode.TooLarge:\n\t\t\tcase UserDataSyncErrorCode.TooManyRequests:\n\t\t\tcase UserDataSyncErrorCode.TooManyRequestsAndRetryAfter:\n\t\t\tcase UserDataSyncErrorCode.LocalTooManyRequests:\n\t\t\tcase UserDataSyncErrorCode.LocalTooManyProfiles:\n\t\t\tcase UserDataSyncErrorCode.Gone:\n\t\t\tcase UserDataSyncErrorCode.UpgradeRequired:\n\t\t\tcase UserDataSyncErrorCode.IncompatibleRemoteContent:\n\t\t\tcase UserDataSyncErrorCode.IncompatibleLocalContent:\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction reportUserDataSyncError(userDataSyncError: UserDataSyncError, executionId: string, userDataSyncStoreManagementService: IUserDataSyncStoreManagementService, telemetryService: ITelemetryService): void {\n\ttelemetryService.publicLog2<{ code: string; service: string; serverCode?: string; url?: string; resource?: string; executionId?: string }, SyncErrorClassification>('sync/error',\n\t\t{\n\t\t\tcode: userDataSyncError.code,\n\t\t\tserverCode: userDataSyncError instanceof UserDataSyncStoreError ? String(userDataSyncError.serverCode) : undefined,\n\t\t\turl: userDataSyncError instanceof UserDataSyncStoreError ? userDataSyncError.url : undefined,\n\t\t\tresource: userDataSyncError.resource,\n\t\t\texecutionId,\n\t\t\tservice: userDataSyncStoreManagementService.userDataSyncStore!.url.toString()\n\t\t});\n}\n"],
  "mappings": "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",
  "names": ["content", "syncProfile", "a", "b", "synchronizer"]
}
