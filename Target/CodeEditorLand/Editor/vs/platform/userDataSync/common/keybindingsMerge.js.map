{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/keybindingsMerge.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from \"../../../base/common/arrays.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { parse } from \"../../../base/common/json.js\";\nimport type { FormattingOptions } from \"../../../base/common/jsonFormatter.js\";\nimport * as objects from \"../../../base/common/objects.js\";\nimport { ContextKeyExpr } from \"../../contextkey/common/contextkey.js\";\nimport type { IUserFriendlyKeybinding } from \"../../keybinding/common/keybinding.js\";\nimport * as contentUtil from \"./content.js\";\nimport type { IUserDataSyncUtilService } from \"./userDataSync.js\";\n\ninterface ICompareResult {\n\tadded: Set<string>;\n\tremoved: Set<string>;\n\tupdated: Set<string>;\n}\n\ninterface IMergeResult {\n\thasLocalForwarded: boolean;\n\thasRemoteForwarded: boolean;\n\tadded: Set<string>;\n\tremoved: Set<string>;\n\tupdated: Set<string>;\n\tconflicts: Set<string>;\n}\n\nfunction parseKeybindings(content: string): IUserFriendlyKeybinding[] {\n\treturn parse(content) || [];\n}\n\nexport async function merge(\n\tlocalContent: string,\n\tremoteContent: string,\n\tbaseContent: string | null,\n\tformattingOptions: FormattingOptions,\n\tuserDataSyncUtilService: IUserDataSyncUtilService,\n): Promise<{\n\tmergeContent: string;\n\thasChanges: boolean;\n\thasConflicts: boolean;\n}> {\n\tconst local = parseKeybindings(localContent);\n\tconst remote = parseKeybindings(remoteContent);\n\tconst base = baseContent ? parseKeybindings(baseContent) : null;\n\n\tconst userbindings: string[] = [...local, ...remote, ...(base || [])].map(\n\t\t(keybinding) => keybinding.key,\n\t);\n\tconst normalizedKeys =\n\t\tawait userDataSyncUtilService.resolveUserBindings(userbindings);\n\tconst keybindingsMergeResult = computeMergeResultByKeybinding(\n\t\tlocal,\n\t\tremote,\n\t\tbase,\n\t\tnormalizedKeys,\n\t);\n\n\tif (\n\t\t!keybindingsMergeResult.hasLocalForwarded &&\n\t\t!keybindingsMergeResult.hasRemoteForwarded\n\t) {\n\t\t// No changes found between local and remote.\n\t\treturn {\n\t\t\tmergeContent: localContent,\n\t\t\thasChanges: false,\n\t\t\thasConflicts: false,\n\t\t};\n\t}\n\n\tif (\n\t\t!keybindingsMergeResult.hasLocalForwarded &&\n\t\tkeybindingsMergeResult.hasRemoteForwarded\n\t) {\n\t\treturn {\n\t\t\tmergeContent: remoteContent,\n\t\t\thasChanges: true,\n\t\t\thasConflicts: false,\n\t\t};\n\t}\n\n\tif (\n\t\tkeybindingsMergeResult.hasLocalForwarded &&\n\t\t!keybindingsMergeResult.hasRemoteForwarded\n\t) {\n\t\t// Local has moved forward and remote has not. Return local.\n\t\treturn {\n\t\t\tmergeContent: localContent,\n\t\t\thasChanges: true,\n\t\t\thasConflicts: false,\n\t\t};\n\t}\n\n\t// Both local and remote has moved forward.\n\tconst localByCommand = byCommand(local);\n\tconst remoteByCommand = byCommand(remote);\n\tconst baseByCommand = base ? byCommand(base) : null;\n\tconst localToRemoteByCommand = compareByCommand(\n\t\tlocalByCommand,\n\t\tremoteByCommand,\n\t\tnormalizedKeys,\n\t);\n\tconst baseToLocalByCommand = baseByCommand\n\t\t? compareByCommand(baseByCommand, localByCommand, normalizedKeys)\n\t\t: {\n\t\t\t\tadded: [...localByCommand.keys()].reduce((r, k) => {\n\t\t\t\t\tr.add(k);\n\t\t\t\t\treturn r;\n\t\t\t\t}, new Set<string>()),\n\t\t\t\tremoved: new Set<string>(),\n\t\t\t\tupdated: new Set<string>(),\n\t\t\t};\n\tconst baseToRemoteByCommand = baseByCommand\n\t\t? compareByCommand(baseByCommand, remoteByCommand, normalizedKeys)\n\t\t: {\n\t\t\t\tadded: [...remoteByCommand.keys()].reduce((r, k) => {\n\t\t\t\t\tr.add(k);\n\t\t\t\t\treturn r;\n\t\t\t\t}, new Set<string>()),\n\t\t\t\tremoved: new Set<string>(),\n\t\t\t\tupdated: new Set<string>(),\n\t\t\t};\n\n\tconst commandsMergeResult = computeMergeResult(\n\t\tlocalToRemoteByCommand,\n\t\tbaseToLocalByCommand,\n\t\tbaseToRemoteByCommand,\n\t);\n\tlet mergeContent = localContent;\n\n\t// Removed commands in Remote\n\tfor (const command of commandsMergeResult.removed.values()) {\n\t\tif (commandsMergeResult.conflicts.has(command)) {\n\t\t\tcontinue;\n\t\t}\n\t\tmergeContent = removeKeybindings(\n\t\t\tmergeContent,\n\t\t\tcommand,\n\t\t\tformattingOptions,\n\t\t);\n\t}\n\n\t// Added commands in remote\n\tfor (const command of commandsMergeResult.added.values()) {\n\t\tif (commandsMergeResult.conflicts.has(command)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst keybindings = remoteByCommand.get(command)!;\n\t\t// Ignore negated commands\n\t\tif (\n\t\t\tkeybindings.some(\n\t\t\t\t(keybinding) =>\n\t\t\t\t\tkeybinding.command !== `-${command}` &&\n\t\t\t\t\tkeybindingsMergeResult.conflicts.has(\n\t\t\t\t\t\tnormalizedKeys[keybinding.key],\n\t\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\tcommandsMergeResult.conflicts.add(command);\n\t\t\tcontinue;\n\t\t}\n\t\tmergeContent = addKeybindings(\n\t\t\tmergeContent,\n\t\t\tkeybindings,\n\t\t\tformattingOptions,\n\t\t);\n\t}\n\n\t// Updated commands in Remote\n\tfor (const command of commandsMergeResult.updated.values()) {\n\t\tif (commandsMergeResult.conflicts.has(command)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst keybindings = remoteByCommand.get(command)!;\n\t\t// Ignore negated commands\n\t\tif (\n\t\t\tkeybindings.some(\n\t\t\t\t(keybinding) =>\n\t\t\t\t\tkeybinding.command !== `-${command}` &&\n\t\t\t\t\tkeybindingsMergeResult.conflicts.has(\n\t\t\t\t\t\tnormalizedKeys[keybinding.key],\n\t\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\tcommandsMergeResult.conflicts.add(command);\n\t\t\tcontinue;\n\t\t}\n\t\tmergeContent = updateKeybindings(\n\t\t\tmergeContent,\n\t\t\tcommand,\n\t\t\tkeybindings,\n\t\t\tformattingOptions,\n\t\t);\n\t}\n\n\treturn {\n\t\tmergeContent,\n\t\thasChanges: true,\n\t\thasConflicts: commandsMergeResult.conflicts.size > 0,\n\t};\n}\n\nfunction computeMergeResult(\n\tlocalToRemote: ICompareResult,\n\tbaseToLocal: ICompareResult,\n\tbaseToRemote: ICompareResult,\n): {\n\tadded: Set<string>;\n\tremoved: Set<string>;\n\tupdated: Set<string>;\n\tconflicts: Set<string>;\n} {\n\tconst added: Set<string> = new Set<string>();\n\tconst removed: Set<string> = new Set<string>();\n\tconst updated: Set<string> = new Set<string>();\n\tconst conflicts: Set<string> = new Set<string>();\n\n\t// Removed keys in Local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\tconflicts.add(key);\n\t\t}\n\t}\n\n\t// Removed keys in Remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\tconflicts.add(key);\n\t\t} else {\n\t\t\t// remove the key\n\t\t\tremoved.add(key);\n\t\t}\n\t}\n\n\t// Added keys in Local\n\tfor (const key of baseToLocal.added.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in remote\n\t\tif (baseToRemote.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Added keys in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in local\n\t\tif (baseToLocal.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\tadded.add(key);\n\t\t}\n\t}\n\n\t// Updated keys in Local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Updated keys in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\t// updated key\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\treturn { added, removed, updated, conflicts };\n}\n\nfunction computeMergeResultByKeybinding(\n\tlocal: IUserFriendlyKeybinding[],\n\tremote: IUserFriendlyKeybinding[],\n\tbase: IUserFriendlyKeybinding[] | null,\n\tnormalizedKeys: IStringDictionary<string>,\n): IMergeResult {\n\tconst empty = new Set<string>();\n\tconst localByKeybinding = byKeybinding(local, normalizedKeys);\n\tconst remoteByKeybinding = byKeybinding(remote, normalizedKeys);\n\tconst baseByKeybinding = base ? byKeybinding(base, normalizedKeys) : null;\n\n\tconst localToRemoteByKeybinding = compareByKeybinding(\n\t\tlocalByKeybinding,\n\t\tremoteByKeybinding,\n\t);\n\tif (\n\t\tlocalToRemoteByKeybinding.added.size === 0 &&\n\t\tlocalToRemoteByKeybinding.removed.size === 0 &&\n\t\tlocalToRemoteByKeybinding.updated.size === 0\n\t) {\n\t\treturn {\n\t\t\thasLocalForwarded: false,\n\t\t\thasRemoteForwarded: false,\n\t\t\tadded: empty,\n\t\t\tremoved: empty,\n\t\t\tupdated: empty,\n\t\t\tconflicts: empty,\n\t\t};\n\t}\n\n\tconst baseToLocalByKeybinding = baseByKeybinding\n\t\t? compareByKeybinding(baseByKeybinding, localByKeybinding)\n\t\t: {\n\t\t\t\tadded: [...localByKeybinding.keys()].reduce((r, k) => {\n\t\t\t\t\tr.add(k);\n\t\t\t\t\treturn r;\n\t\t\t\t}, new Set<string>()),\n\t\t\t\tremoved: new Set<string>(),\n\t\t\t\tupdated: new Set<string>(),\n\t\t\t};\n\tif (\n\t\tbaseToLocalByKeybinding.added.size === 0 &&\n\t\tbaseToLocalByKeybinding.removed.size === 0 &&\n\t\tbaseToLocalByKeybinding.updated.size === 0\n\t) {\n\t\t// Remote has moved forward and local has not.\n\t\treturn {\n\t\t\thasLocalForwarded: false,\n\t\t\thasRemoteForwarded: true,\n\t\t\tadded: empty,\n\t\t\tremoved: empty,\n\t\t\tupdated: empty,\n\t\t\tconflicts: empty,\n\t\t};\n\t}\n\n\tconst baseToRemoteByKeybinding = baseByKeybinding\n\t\t? compareByKeybinding(baseByKeybinding, remoteByKeybinding)\n\t\t: {\n\t\t\t\tadded: [...remoteByKeybinding.keys()].reduce((r, k) => {\n\t\t\t\t\tr.add(k);\n\t\t\t\t\treturn r;\n\t\t\t\t}, new Set<string>()),\n\t\t\t\tremoved: new Set<string>(),\n\t\t\t\tupdated: new Set<string>(),\n\t\t\t};\n\tif (\n\t\tbaseToRemoteByKeybinding.added.size === 0 &&\n\t\tbaseToRemoteByKeybinding.removed.size === 0 &&\n\t\tbaseToRemoteByKeybinding.updated.size === 0\n\t) {\n\t\treturn {\n\t\t\thasLocalForwarded: true,\n\t\t\thasRemoteForwarded: false,\n\t\t\tadded: empty,\n\t\t\tremoved: empty,\n\t\t\tupdated: empty,\n\t\t\tconflicts: empty,\n\t\t};\n\t}\n\n\tconst { added, removed, updated, conflicts } = computeMergeResult(\n\t\tlocalToRemoteByKeybinding,\n\t\tbaseToLocalByKeybinding,\n\t\tbaseToRemoteByKeybinding,\n\t);\n\treturn {\n\t\thasLocalForwarded: true,\n\t\thasRemoteForwarded: true,\n\t\tadded,\n\t\tremoved,\n\t\tupdated,\n\t\tconflicts,\n\t};\n}\n\nfunction byKeybinding(\n\tkeybindings: IUserFriendlyKeybinding[],\n\tkeys: IStringDictionary<string>,\n) {\n\tconst map: Map<string, IUserFriendlyKeybinding[]> = new Map<\n\t\tstring,\n\t\tIUserFriendlyKeybinding[]\n\t>();\n\tfor (const keybinding of keybindings) {\n\t\tconst key = keys[keybinding.key];\n\t\tlet value = map.get(key);\n\t\tif (!value) {\n\t\t\tvalue = [];\n\t\t\tmap.set(key, value);\n\t\t}\n\t\tvalue.push(keybinding);\n\t}\n\treturn map;\n}\n\nfunction byCommand(\n\tkeybindings: IUserFriendlyKeybinding[],\n): Map<string, IUserFriendlyKeybinding[]> {\n\tconst map: Map<string, IUserFriendlyKeybinding[]> = new Map<\n\t\tstring,\n\t\tIUserFriendlyKeybinding[]\n\t>();\n\tfor (const keybinding of keybindings) {\n\t\tconst command =\n\t\t\tkeybinding.command[0] === \"-\"\n\t\t\t\t? keybinding.command.substring(1)\n\t\t\t\t: keybinding.command;\n\t\tlet value = map.get(command);\n\t\tif (!value) {\n\t\t\tvalue = [];\n\t\t\tmap.set(command, value);\n\t\t}\n\t\tvalue.push(keybinding);\n\t}\n\treturn map;\n}\n\nfunction compareByKeybinding(\n\tfrom: Map<string, IUserFriendlyKeybinding[]>,\n\tto: Map<string, IUserFriendlyKeybinding[]>,\n): ICompareResult {\n\tconst fromKeys = [...from.keys()];\n\tconst toKeys = [...to.keys()];\n\tconst added = toKeys\n\t\t.filter((key) => !fromKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst removed = fromKeys\n\t\t.filter((key) => !toKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1: IUserFriendlyKeybinding[] = from\n\t\t\t.get(key)!\n\t\t\t.map((keybinding) => ({ ...keybinding, ...{ key } }));\n\t\tconst value2: IUserFriendlyKeybinding[] = to\n\t\t\t.get(key)!\n\t\t\t.map((keybinding) => ({ ...keybinding, ...{ key } }));\n\t\tif (!equals(value1, value2, (a, b) => isSameKeybinding(a, b))) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction compareByCommand(\n\tfrom: Map<string, IUserFriendlyKeybinding[]>,\n\tto: Map<string, IUserFriendlyKeybinding[]>,\n\tnormalizedKeys: IStringDictionary<string>,\n): ICompareResult {\n\tconst fromKeys = [...from.keys()];\n\tconst toKeys = [...to.keys()];\n\tconst added = toKeys\n\t\t.filter((key) => !fromKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst removed = fromKeys\n\t\t.filter((key) => !toKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1: IUserFriendlyKeybinding[] = from\n\t\t\t.get(key)!\n\t\t\t.map((keybinding) => ({\n\t\t\t\t...keybinding,\n\t\t\t\t...{ key: normalizedKeys[keybinding.key] },\n\t\t\t}));\n\t\tconst value2: IUserFriendlyKeybinding[] = to\n\t\t\t.get(key)!\n\t\t\t.map((keybinding) => ({\n\t\t\t\t...keybinding,\n\t\t\t\t...{ key: normalizedKeys[keybinding.key] },\n\t\t\t}));\n\t\tif (!areSameKeybindingsWithSameCommand(value1, value2)) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction areSameKeybindingsWithSameCommand(\n\tvalue1: IUserFriendlyKeybinding[],\n\tvalue2: IUserFriendlyKeybinding[],\n): boolean {\n\t// Compare entries adding keybindings\n\tif (\n\t\t!equals(\n\t\t\tvalue1.filter(({ command }) => command[0] !== \"-\"),\n\t\t\tvalue2.filter(({ command }) => command[0] !== \"-\"),\n\t\t\t(a, b) => isSameKeybinding(a, b),\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\t// Compare entries removing keybindings\n\tif (\n\t\t!equals(\n\t\t\tvalue1.filter(({ command }) => command[0] === \"-\"),\n\t\t\tvalue2.filter(({ command }) => command[0] === \"-\"),\n\t\t\t(a, b) => isSameKeybinding(a, b),\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction isSameKeybinding(\n\ta: IUserFriendlyKeybinding,\n\tb: IUserFriendlyKeybinding,\n): boolean {\n\tif (a.command !== b.command) {\n\t\treturn false;\n\t}\n\tif (a.key !== b.key) {\n\t\treturn false;\n\t}\n\tconst whenA = ContextKeyExpr.deserialize(a.when);\n\tconst whenB = ContextKeyExpr.deserialize(b.when);\n\tif ((whenA && !whenB) || (!whenA && whenB)) {\n\t\treturn false;\n\t}\n\tif (whenA && whenB && !whenA.equals(whenB)) {\n\t\treturn false;\n\t}\n\tif (!objects.equals(a.args, b.args)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction addKeybindings(\n\tcontent: string,\n\tkeybindings: IUserFriendlyKeybinding[],\n\tformattingOptions: FormattingOptions,\n): string {\n\tfor (const keybinding of keybindings) {\n\t\tcontent = contentUtil.edit(\n\t\t\tcontent,\n\t\t\t[-1],\n\t\t\tkeybinding,\n\t\t\tformattingOptions,\n\t\t);\n\t}\n\treturn content;\n}\n\nfunction removeKeybindings(\n\tcontent: string,\n\tcommand: string,\n\tformattingOptions: FormattingOptions,\n): string {\n\tconst keybindings = parseKeybindings(content);\n\tfor (let index = keybindings.length - 1; index >= 0; index--) {\n\t\tif (\n\t\t\tkeybindings[index].command === command ||\n\t\t\tkeybindings[index].command === `-${command}`\n\t\t) {\n\t\t\tcontent = contentUtil.edit(\n\t\t\t\tcontent,\n\t\t\t\t[index],\n\t\t\t\tundefined,\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t}\n\t}\n\treturn content;\n}\n\nfunction updateKeybindings(\n\tcontent: string,\n\tcommand: string,\n\tkeybindings: IUserFriendlyKeybinding[],\n\tformattingOptions: FormattingOptions,\n): string {\n\tconst allKeybindings = parseKeybindings(content);\n\tconst location = allKeybindings.findIndex(\n\t\t(keybinding) =>\n\t\t\tkeybinding.command === command ||\n\t\t\tkeybinding.command === `-${command}`,\n\t);\n\t// Remove all entries with this command\n\tfor (let index = allKeybindings.length - 1; index >= 0; index--) {\n\t\tif (\n\t\t\tallKeybindings[index].command === command ||\n\t\t\tallKeybindings[index].command === `-${command}`\n\t\t) {\n\t\t\tcontent = contentUtil.edit(\n\t\t\t\tcontent,\n\t\t\t\t[index],\n\t\t\t\tundefined,\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t}\n\t}\n\t// add all entries at the same location where the entry with this command was located.\n\tfor (let index = keybindings.length - 1; index >= 0; index--) {\n\t\tcontent = contentUtil.edit(\n\t\t\tcontent,\n\t\t\t[location],\n\t\t\tkeybindings[index],\n\t\t\tformattingOptions,\n\t\t);\n\t}\n\treturn content;\n}\n"],
  "mappings": "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",
  "names": []
}
