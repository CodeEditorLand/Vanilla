{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/keybindingsMerge.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../base/common/arrays.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { parse } from '../../../base/common/json.js';\nimport { FormattingOptions } from '../../../base/common/jsonFormatter.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { ContextKeyExpr } from '../../contextkey/common/contextkey.js';\nimport { IUserFriendlyKeybinding } from '../../keybinding/common/keybinding.js';\nimport * as contentUtil from './content.js';\nimport { IUserDataSyncUtilService } from './userDataSync.js';\n\ninterface ICompareResult {\n\tadded: Set<string>;\n\tremoved: Set<string>;\n\tupdated: Set<string>;\n}\n\ninterface IMergeResult {\n\thasLocalForwarded: boolean;\n\thasRemoteForwarded: boolean;\n\tadded: Set<string>;\n\tremoved: Set<string>;\n\tupdated: Set<string>;\n\tconflicts: Set<string>;\n}\n\nfunction parseKeybindings(content: string): IUserFriendlyKeybinding[] {\n\treturn parse(content) || [];\n}\n\nexport async function merge(localContent: string, remoteContent: string, baseContent: string | null, formattingOptions: FormattingOptions, userDataSyncUtilService: IUserDataSyncUtilService): Promise<{ mergeContent: string; hasChanges: boolean; hasConflicts: boolean }> {\n\tconst local = parseKeybindings(localContent);\n\tconst remote = parseKeybindings(remoteContent);\n\tconst base = baseContent ? parseKeybindings(baseContent) : null;\n\n\tconst userbindings: string[] = [...local, ...remote, ...(base || [])].map(keybinding => keybinding.key);\n\tconst normalizedKeys = await userDataSyncUtilService.resolveUserBindings(userbindings);\n\tconst keybindingsMergeResult = computeMergeResultByKeybinding(local, remote, base, normalizedKeys);\n\n\tif (!keybindingsMergeResult.hasLocalForwarded && !keybindingsMergeResult.hasRemoteForwarded) {\n\t\t// No changes found between local and remote.\n\t\treturn { mergeContent: localContent, hasChanges: false, hasConflicts: false };\n\t}\n\n\tif (!keybindingsMergeResult.hasLocalForwarded && keybindingsMergeResult.hasRemoteForwarded) {\n\t\treturn { mergeContent: remoteContent, hasChanges: true, hasConflicts: false };\n\t}\n\n\tif (keybindingsMergeResult.hasLocalForwarded && !keybindingsMergeResult.hasRemoteForwarded) {\n\t\t// Local has moved forward and remote has not. Return local.\n\t\treturn { mergeContent: localContent, hasChanges: true, hasConflicts: false };\n\t}\n\n\t// Both local and remote has moved forward.\n\tconst localByCommand = byCommand(local);\n\tconst remoteByCommand = byCommand(remote);\n\tconst baseByCommand = base ? byCommand(base) : null;\n\tconst localToRemoteByCommand = compareByCommand(localByCommand, remoteByCommand, normalizedKeys);\n\tconst baseToLocalByCommand = baseByCommand ? compareByCommand(baseByCommand, localByCommand, normalizedKeys) : { added: [...localByCommand.keys()].reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\tconst baseToRemoteByCommand = baseByCommand ? compareByCommand(baseByCommand, remoteByCommand, normalizedKeys) : { added: [...remoteByCommand.keys()].reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\n\tconst commandsMergeResult = computeMergeResult(localToRemoteByCommand, baseToLocalByCommand, baseToRemoteByCommand);\n\tlet mergeContent = localContent;\n\n\t// Removed commands in Remote\n\tfor (const command of commandsMergeResult.removed.values()) {\n\t\tif (commandsMergeResult.conflicts.has(command)) {\n\t\t\tcontinue;\n\t\t}\n\t\tmergeContent = removeKeybindings(mergeContent, command, formattingOptions);\n\t}\n\n\t// Added commands in remote\n\tfor (const command of commandsMergeResult.added.values()) {\n\t\tif (commandsMergeResult.conflicts.has(command)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst keybindings = remoteByCommand.get(command)!;\n\t\t// Ignore negated commands\n\t\tif (keybindings.some(keybinding => keybinding.command !== `-${command}` && keybindingsMergeResult.conflicts.has(normalizedKeys[keybinding.key]))) {\n\t\t\tcommandsMergeResult.conflicts.add(command);\n\t\t\tcontinue;\n\t\t}\n\t\tmergeContent = addKeybindings(mergeContent, keybindings, formattingOptions);\n\t}\n\n\t// Updated commands in Remote\n\tfor (const command of commandsMergeResult.updated.values()) {\n\t\tif (commandsMergeResult.conflicts.has(command)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst keybindings = remoteByCommand.get(command)!;\n\t\t// Ignore negated commands\n\t\tif (keybindings.some(keybinding => keybinding.command !== `-${command}` && keybindingsMergeResult.conflicts.has(normalizedKeys[keybinding.key]))) {\n\t\t\tcommandsMergeResult.conflicts.add(command);\n\t\t\tcontinue;\n\t\t}\n\t\tmergeContent = updateKeybindings(mergeContent, command, keybindings, formattingOptions);\n\t}\n\n\treturn { mergeContent, hasChanges: true, hasConflicts: commandsMergeResult.conflicts.size > 0 };\n}\n\nfunction computeMergeResult(localToRemote: ICompareResult, baseToLocal: ICompareResult, baseToRemote: ICompareResult): { added: Set<string>; removed: Set<string>; updated: Set<string>; conflicts: Set<string> } {\n\tconst added: Set<string> = new Set<string>();\n\tconst removed: Set<string> = new Set<string>();\n\tconst updated: Set<string> = new Set<string>();\n\tconst conflicts: Set<string> = new Set<string>();\n\n\t// Removed keys in Local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\tconflicts.add(key);\n\t\t}\n\t}\n\n\t// Removed keys in Remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\tconflicts.add(key);\n\t\t} else {\n\t\t\t// remove the key\n\t\t\tremoved.add(key);\n\t\t}\n\t}\n\n\t// Added keys in Local\n\tfor (const key of baseToLocal.added.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in remote\n\t\tif (baseToRemote.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Added keys in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in local\n\t\tif (baseToLocal.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\tadded.add(key);\n\t\t}\n\t}\n\n\t// Updated keys in Local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Updated keys in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\t// updated key\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\treturn { added, removed, updated, conflicts };\n}\n\nfunction computeMergeResultByKeybinding(local: IUserFriendlyKeybinding[], remote: IUserFriendlyKeybinding[], base: IUserFriendlyKeybinding[] | null, normalizedKeys: IStringDictionary<string>): IMergeResult {\n\tconst empty = new Set<string>();\n\tconst localByKeybinding = byKeybinding(local, normalizedKeys);\n\tconst remoteByKeybinding = byKeybinding(remote, normalizedKeys);\n\tconst baseByKeybinding = base ? byKeybinding(base, normalizedKeys) : null;\n\n\tconst localToRemoteByKeybinding = compareByKeybinding(localByKeybinding, remoteByKeybinding);\n\tif (localToRemoteByKeybinding.added.size === 0 && localToRemoteByKeybinding.removed.size === 0 && localToRemoteByKeybinding.updated.size === 0) {\n\t\treturn { hasLocalForwarded: false, hasRemoteForwarded: false, added: empty, removed: empty, updated: empty, conflicts: empty };\n\t}\n\n\tconst baseToLocalByKeybinding = baseByKeybinding ? compareByKeybinding(baseByKeybinding, localByKeybinding) : { added: [...localByKeybinding.keys()].reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\tif (baseToLocalByKeybinding.added.size === 0 && baseToLocalByKeybinding.removed.size === 0 && baseToLocalByKeybinding.updated.size === 0) {\n\t\t// Remote has moved forward and local has not.\n\t\treturn { hasLocalForwarded: false, hasRemoteForwarded: true, added: empty, removed: empty, updated: empty, conflicts: empty };\n\t}\n\n\tconst baseToRemoteByKeybinding = baseByKeybinding ? compareByKeybinding(baseByKeybinding, remoteByKeybinding) : { added: [...remoteByKeybinding.keys()].reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\tif (baseToRemoteByKeybinding.added.size === 0 && baseToRemoteByKeybinding.removed.size === 0 && baseToRemoteByKeybinding.updated.size === 0) {\n\t\treturn { hasLocalForwarded: true, hasRemoteForwarded: false, added: empty, removed: empty, updated: empty, conflicts: empty };\n\t}\n\n\tconst { added, removed, updated, conflicts } = computeMergeResult(localToRemoteByKeybinding, baseToLocalByKeybinding, baseToRemoteByKeybinding);\n\treturn { hasLocalForwarded: true, hasRemoteForwarded: true, added, removed, updated, conflicts };\n}\n\nfunction byKeybinding(keybindings: IUserFriendlyKeybinding[], keys: IStringDictionary<string>) {\n\tconst map: Map<string, IUserFriendlyKeybinding[]> = new Map<string, IUserFriendlyKeybinding[]>();\n\tfor (const keybinding of keybindings) {\n\t\tconst key = keys[keybinding.key];\n\t\tlet value = map.get(key);\n\t\tif (!value) {\n\t\t\tvalue = [];\n\t\t\tmap.set(key, value);\n\t\t}\n\t\tvalue.push(keybinding);\n\n\t}\n\treturn map;\n}\n\nfunction byCommand(keybindings: IUserFriendlyKeybinding[]): Map<string, IUserFriendlyKeybinding[]> {\n\tconst map: Map<string, IUserFriendlyKeybinding[]> = new Map<string, IUserFriendlyKeybinding[]>();\n\tfor (const keybinding of keybindings) {\n\t\tconst command = keybinding.command[0] === '-' ? keybinding.command.substring(1) : keybinding.command;\n\t\tlet value = map.get(command);\n\t\tif (!value) {\n\t\t\tvalue = [];\n\t\t\tmap.set(command, value);\n\t\t}\n\t\tvalue.push(keybinding);\n\t}\n\treturn map;\n}\n\n\nfunction compareByKeybinding(from: Map<string, IUserFriendlyKeybinding[]>, to: Map<string, IUserFriendlyKeybinding[]>): ICompareResult {\n\tconst fromKeys = [...from.keys()];\n\tconst toKeys = [...to.keys()];\n\tconst added = toKeys.filter(key => !fromKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => !toKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1: IUserFriendlyKeybinding[] = from.get(key)!.map(keybinding => ({ ...keybinding, ...{ key } }));\n\t\tconst value2: IUserFriendlyKeybinding[] = to.get(key)!.map(keybinding => ({ ...keybinding, ...{ key } }));\n\t\tif (!equals(value1, value2, (a, b) => isSameKeybinding(a, b))) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction compareByCommand(from: Map<string, IUserFriendlyKeybinding[]>, to: Map<string, IUserFriendlyKeybinding[]>, normalizedKeys: IStringDictionary<string>): ICompareResult {\n\tconst fromKeys = [...from.keys()];\n\tconst toKeys = [...to.keys()];\n\tconst added = toKeys.filter(key => !fromKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => !toKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1: IUserFriendlyKeybinding[] = from.get(key)!.map(keybinding => ({ ...keybinding, ...{ key: normalizedKeys[keybinding.key] } }));\n\t\tconst value2: IUserFriendlyKeybinding[] = to.get(key)!.map(keybinding => ({ ...keybinding, ...{ key: normalizedKeys[keybinding.key] } }));\n\t\tif (!areSameKeybindingsWithSameCommand(value1, value2)) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nfunction areSameKeybindingsWithSameCommand(value1: IUserFriendlyKeybinding[], value2: IUserFriendlyKeybinding[]): boolean {\n\t// Compare entries adding keybindings\n\tif (!equals(value1.filter(({ command }) => command[0] !== '-'), value2.filter(({ command }) => command[0] !== '-'), (a, b) => isSameKeybinding(a, b))) {\n\t\treturn false;\n\t}\n\t// Compare entries removing keybindings\n\tif (!equals(value1.filter(({ command }) => command[0] === '-'), value2.filter(({ command }) => command[0] === '-'), (a, b) => isSameKeybinding(a, b))) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction isSameKeybinding(a: IUserFriendlyKeybinding, b: IUserFriendlyKeybinding): boolean {\n\tif (a.command !== b.command) {\n\t\treturn false;\n\t}\n\tif (a.key !== b.key) {\n\t\treturn false;\n\t}\n\tconst whenA = ContextKeyExpr.deserialize(a.when);\n\tconst whenB = ContextKeyExpr.deserialize(b.when);\n\tif ((whenA && !whenB) || (!whenA && whenB)) {\n\t\treturn false;\n\t}\n\tif (whenA && whenB && !whenA.equals(whenB)) {\n\t\treturn false;\n\t}\n\tif (!objects.equals(a.args, b.args)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction addKeybindings(content: string, keybindings: IUserFriendlyKeybinding[], formattingOptions: FormattingOptions): string {\n\tfor (const keybinding of keybindings) {\n\t\tcontent = contentUtil.edit(content, [-1], keybinding, formattingOptions);\n\t}\n\treturn content;\n}\n\nfunction removeKeybindings(content: string, command: string, formattingOptions: FormattingOptions): string {\n\tconst keybindings = parseKeybindings(content);\n\tfor (let index = keybindings.length - 1; index >= 0; index--) {\n\t\tif (keybindings[index].command === command || keybindings[index].command === `-${command}`) {\n\t\t\tcontent = contentUtil.edit(content, [index], undefined, formattingOptions);\n\t\t}\n\t}\n\treturn content;\n}\n\nfunction updateKeybindings(content: string, command: string, keybindings: IUserFriendlyKeybinding[], formattingOptions: FormattingOptions): string {\n\tconst allKeybindings = parseKeybindings(content);\n\tconst location = allKeybindings.findIndex(keybinding => keybinding.command === command || keybinding.command === `-${command}`);\n\t// Remove all entries with this command\n\tfor (let index = allKeybindings.length - 1; index >= 0; index--) {\n\t\tif (allKeybindings[index].command === command || allKeybindings[index].command === `-${command}`) {\n\t\t\tcontent = contentUtil.edit(content, [index], undefined, formattingOptions);\n\t\t}\n\t}\n\t// add all entries at the same location where the entry with this command was located.\n\tfor (let index = keybindings.length - 1; index >= 0; index--) {\n\t\tcontent = contentUtil.edit(content, [location], keybindings[index], formattingOptions);\n\t}\n\treturn content;\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc;AACvB,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,yBAAyB;AAClC,YAAY,aAAa;AACzB,SAAS,sBAAsB;AAC/B,SAAS,+BAA+B;AACxC,YAAY,iBAAiB;AAC7B,SAAS,gCAAgC;AAiBzC,SAAS,iBAAiB,SAA4C;AACrE,SAAO,MAAM,OAAO,KAAK,CAAC;AAC3B;AAFS;AAIT,eAAsB,MAAM,cAAsB,eAAuB,aAA4B,mBAAsC,yBAAkI;AAC5Q,QAAM,QAAQ,iBAAiB,YAAY;AAC3C,QAAM,SAAS,iBAAiB,aAAa;AAC7C,QAAM,OAAO,cAAc,iBAAiB,WAAW,IAAI;AAE3D,QAAM,eAAyB,CAAC,GAAG,OAAO,GAAG,QAAQ,GAAI,QAAQ,CAAC,CAAE,EAAE,IAAI,gBAAc,WAAW,GAAG;AACtG,QAAM,iBAAiB,MAAM,wBAAwB,oBAAoB,YAAY;AACrF,QAAM,yBAAyB,+BAA+B,OAAO,QAAQ,MAAM,cAAc;AAEjG,MAAI,CAAC,uBAAuB,qBAAqB,CAAC,uBAAuB,oBAAoB;AAE5F,WAAO,EAAE,cAAc,cAAc,YAAY,OAAO,cAAc,MAAM;AAAA,EAC7E;AAEA,MAAI,CAAC,uBAAuB,qBAAqB,uBAAuB,oBAAoB;AAC3F,WAAO,EAAE,cAAc,eAAe,YAAY,MAAM,cAAc,MAAM;AAAA,EAC7E;AAEA,MAAI,uBAAuB,qBAAqB,CAAC,uBAAuB,oBAAoB;AAE3F,WAAO,EAAE,cAAc,cAAc,YAAY,MAAM,cAAc,MAAM;AAAA,EAC5E;AAGA,QAAM,iBAAiB,UAAU,KAAK;AACtC,QAAM,kBAAkB,UAAU,MAAM;AACxC,QAAM,gBAAgB,OAAO,UAAU,IAAI,IAAI;AAC/C,QAAM,yBAAyB,iBAAiB,gBAAgB,iBAAiB,cAAc;AAC/F,QAAM,uBAAuB,gBAAgB,iBAAiB,eAAe,gBAAgB,cAAc,IAAI,EAAE,OAAO,CAAC,GAAG,eAAe,KAAK,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM;AAAE,MAAE,IAAI,CAAC;AAAG,WAAO;AAAA,EAAG,GAAG,oBAAI,IAAY,CAAC,GAAG,SAAS,oBAAI,IAAY,GAAG,SAAS,oBAAI,IAAY,EAAE;AACxQ,QAAM,wBAAwB,gBAAgB,iBAAiB,eAAe,iBAAiB,cAAc,IAAI,EAAE,OAAO,CAAC,GAAG,gBAAgB,KAAK,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM;AAAE,MAAE,IAAI,CAAC;AAAG,WAAO;AAAA,EAAG,GAAG,oBAAI,IAAY,CAAC,GAAG,SAAS,oBAAI,IAAY,GAAG,SAAS,oBAAI,IAAY,EAAE;AAE3Q,QAAM,sBAAsB,mBAAmB,wBAAwB,sBAAsB,qBAAqB;AAClH,MAAI,eAAe;AAGnB,aAAW,WAAW,oBAAoB,QAAQ,OAAO,GAAG;AAC3D,QAAI,oBAAoB,UAAU,IAAI,OAAO,GAAG;AAC/C;AAAA,IACD;AACA,mBAAe,kBAAkB,cAAc,SAAS,iBAAiB;AAAA,EAC1E;AAGA,aAAW,WAAW,oBAAoB,MAAM,OAAO,GAAG;AACzD,QAAI,oBAAoB,UAAU,IAAI,OAAO,GAAG;AAC/C;AAAA,IACD;AACA,UAAM,cAAc,gBAAgB,IAAI,OAAO;AAE/C,QAAI,YAAY,KAAK,gBAAc,WAAW,YAAY,IAAI,OAAO,MAAM,uBAAuB,UAAU,IAAI,eAAe,WAAW,GAAG,CAAC,CAAC,GAAG;AACjJ,0BAAoB,UAAU,IAAI,OAAO;AACzC;AAAA,IACD;AACA,mBAAe,eAAe,cAAc,aAAa,iBAAiB;AAAA,EAC3E;AAGA,aAAW,WAAW,oBAAoB,QAAQ,OAAO,GAAG;AAC3D,QAAI,oBAAoB,UAAU,IAAI,OAAO,GAAG;AAC/C;AAAA,IACD;AACA,UAAM,cAAc,gBAAgB,IAAI,OAAO;AAE/C,QAAI,YAAY,KAAK,gBAAc,WAAW,YAAY,IAAI,OAAO,MAAM,uBAAuB,UAAU,IAAI,eAAe,WAAW,GAAG,CAAC,CAAC,GAAG;AACjJ,0BAAoB,UAAU,IAAI,OAAO;AACzC;AAAA,IACD;AACA,mBAAe,kBAAkB,cAAc,SAAS,aAAa,iBAAiB;AAAA,EACvF;AAEA,SAAO,EAAE,cAAc,YAAY,MAAM,cAAc,oBAAoB,UAAU,OAAO,EAAE;AAC/F;AAvEsB;AAyEtB,SAAS,mBAAmB,eAA+B,aAA6B,cAA0H;AACjN,QAAM,QAAqB,oBAAI,IAAY;AAC3C,QAAM,UAAuB,oBAAI,IAAY;AAC7C,QAAM,UAAuB,oBAAI,IAAY;AAC7C,QAAM,YAAyB,oBAAI,IAAY;AAG/C,aAAW,OAAO,YAAY,QAAQ,OAAO,GAAG;AAE/C,QAAI,aAAa,QAAQ,IAAI,GAAG,GAAG;AAClC,gBAAU,IAAI,GAAG;AAAA,IAClB;AAAA,EACD;AAGA,aAAW,OAAO,aAAa,QAAQ,OAAO,GAAG;AAChD,QAAI,UAAU,IAAI,GAAG,GAAG;AACvB;AAAA,IACD;AAEA,QAAI,YAAY,QAAQ,IAAI,GAAG,GAAG;AACjC,gBAAU,IAAI,GAAG;AAAA,IAClB,OAAO;AAEN,cAAQ,IAAI,GAAG;AAAA,IAChB;AAAA,EACD;AAGA,aAAW,OAAO,YAAY,MAAM,OAAO,GAAG;AAC7C,QAAI,UAAU,IAAI,GAAG,GAAG;AACvB;AAAA,IACD;AAEA,QAAI,aAAa,MAAM,IAAI,GAAG,GAAG;AAEhC,UAAI,cAAc,QAAQ,IAAI,GAAG,GAAG;AACnC,kBAAU,IAAI,GAAG;AAAA,MAClB;AAAA,IACD;AAAA,EACD;AAGA,aAAW,OAAO,aAAa,MAAM,OAAO,GAAG;AAC9C,QAAI,UAAU,IAAI,GAAG,GAAG;AACvB;AAAA,IACD;AAEA,QAAI,YAAY,MAAM,IAAI,GAAG,GAAG;AAE/B,UAAI,cAAc,QAAQ,IAAI,GAAG,GAAG;AACnC,kBAAU,IAAI,GAAG;AAAA,MAClB;AAAA,IACD,OAAO;AACN,YAAM,IAAI,GAAG;AAAA,IACd;AAAA,EACD;AAGA,aAAW,OAAO,YAAY,QAAQ,OAAO,GAAG;AAC/C,QAAI,UAAU,IAAI,GAAG,GAAG;AACvB;AAAA,IACD;AAEA,QAAI,aAAa,QAAQ,IAAI,GAAG,GAAG;AAElC,UAAI,cAAc,QAAQ,IAAI,GAAG,GAAG;AACnC,kBAAU,IAAI,GAAG;AAAA,MAClB;AAAA,IACD;AAAA,EACD;AAGA,aAAW,OAAO,aAAa,QAAQ,OAAO,GAAG;AAChD,QAAI,UAAU,IAAI,GAAG,GAAG;AACvB;AAAA,IACD;AAEA,QAAI,YAAY,QAAQ,IAAI,GAAG,GAAG;AAEjC,UAAI,cAAc,QAAQ,IAAI,GAAG,GAAG;AACnC,kBAAU,IAAI,GAAG;AAAA,MAClB;AAAA,IACD,OAAO;AAEN,cAAQ,IAAI,GAAG;AAAA,IAChB;AAAA,EACD;AACA,SAAO,EAAE,OAAO,SAAS,SAAS,UAAU;AAC7C;AAzFS;AA2FT,SAAS,+BAA+B,OAAkC,QAAmC,MAAwC,gBAAyD;AAC7M,QAAM,QAAQ,oBAAI,IAAY;AAC9B,QAAM,oBAAoB,aAAa,OAAO,cAAc;AAC5D,QAAM,qBAAqB,aAAa,QAAQ,cAAc;AAC9D,QAAM,mBAAmB,OAAO,aAAa,MAAM,cAAc,IAAI;AAErE,QAAM,4BAA4B,oBAAoB,mBAAmB,kBAAkB;AAC3F,MAAI,0BAA0B,MAAM,SAAS,KAAK,0BAA0B,QAAQ,SAAS,KAAK,0BAA0B,QAAQ,SAAS,GAAG;AAC/I,WAAO,EAAE,mBAAmB,OAAO,oBAAoB,OAAO,OAAO,OAAO,SAAS,OAAO,SAAS,OAAO,WAAW,MAAM;AAAA,EAC9H;AAEA,QAAM,0BAA0B,mBAAmB,oBAAoB,kBAAkB,iBAAiB,IAAI,EAAE,OAAO,CAAC,GAAG,kBAAkB,KAAK,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM;AAAE,MAAE,IAAI,CAAC;AAAG,WAAO;AAAA,EAAG,GAAG,oBAAI,IAAY,CAAC,GAAG,SAAS,oBAAI,IAAY,GAAG,SAAS,oBAAI,IAAY,EAAE;AAC1Q,MAAI,wBAAwB,MAAM,SAAS,KAAK,wBAAwB,QAAQ,SAAS,KAAK,wBAAwB,QAAQ,SAAS,GAAG;AAEzI,WAAO,EAAE,mBAAmB,OAAO,oBAAoB,MAAM,OAAO,OAAO,SAAS,OAAO,SAAS,OAAO,WAAW,MAAM;AAAA,EAC7H;AAEA,QAAM,2BAA2B,mBAAmB,oBAAoB,kBAAkB,kBAAkB,IAAI,EAAE,OAAO,CAAC,GAAG,mBAAmB,KAAK,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM;AAAE,MAAE,IAAI,CAAC;AAAG,WAAO;AAAA,EAAG,GAAG,oBAAI,IAAY,CAAC,GAAG,SAAS,oBAAI,IAAY,GAAG,SAAS,oBAAI,IAAY,EAAE;AAC7Q,MAAI,yBAAyB,MAAM,SAAS,KAAK,yBAAyB,QAAQ,SAAS,KAAK,yBAAyB,QAAQ,SAAS,GAAG;AAC5I,WAAO,EAAE,mBAAmB,MAAM,oBAAoB,OAAO,OAAO,OAAO,SAAS,OAAO,SAAS,OAAO,WAAW,MAAM;AAAA,EAC7H;AAEA,QAAM,EAAE,OAAO,SAAS,SAAS,UAAU,IAAI,mBAAmB,2BAA2B,yBAAyB,wBAAwB;AAC9I,SAAO,EAAE,mBAAmB,MAAM,oBAAoB,MAAM,OAAO,SAAS,SAAS,UAAU;AAChG;AAxBS;AA0BT,SAAS,aAAa,aAAwC,MAAiC;AAC9F,QAAM,MAA8C,oBAAI,IAAuC;AAC/F,aAAW,cAAc,aAAa;AACrC,UAAM,MAAM,KAAK,WAAW,GAAG;AAC/B,QAAI,QAAQ,IAAI,IAAI,GAAG;AACvB,QAAI,CAAC,OAAO;AACX,cAAQ,CAAC;AACT,UAAI,IAAI,KAAK,KAAK;AAAA,IACnB;AACA,UAAM,KAAK,UAAU;AAAA,EAEtB;AACA,SAAO;AACR;AAbS;AAeT,SAAS,UAAU,aAAgF;AAClG,QAAM,MAA8C,oBAAI,IAAuC;AAC/F,aAAW,cAAc,aAAa;AACrC,UAAM,UAAU,WAAW,QAAQ,CAAC,MAAM,MAAM,WAAW,QAAQ,UAAU,CAAC,IAAI,WAAW;AAC7F,QAAI,QAAQ,IAAI,IAAI,OAAO;AAC3B,QAAI,CAAC,OAAO;AACX,cAAQ,CAAC;AACT,UAAI,IAAI,SAAS,KAAK;AAAA,IACvB;AACA,UAAM,KAAK,UAAU;AAAA,EACtB;AACA,SAAO;AACR;AAZS;AAeT,SAAS,oBAAoB,MAA8C,IAA4D;AACtI,QAAM,WAAW,CAAC,GAAG,KAAK,KAAK,CAAC;AAChC,QAAM,SAAS,CAAC,GAAG,GAAG,KAAK,CAAC;AAC5B,QAAM,QAAQ,OAAO,OAAO,SAAO,CAAC,SAAS,SAAS,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,QAAQ;AAAE,MAAE,IAAI,GAAG;AAAG,WAAO;AAAA,EAAG,GAAG,oBAAI,IAAY,CAAC;AAC3H,QAAM,UAAU,SAAS,OAAO,SAAO,CAAC,OAAO,SAAS,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,QAAQ;AAAE,MAAE,IAAI,GAAG;AAAG,WAAO;AAAA,EAAG,GAAG,oBAAI,IAAY,CAAC;AAC7H,QAAM,UAAuB,oBAAI,IAAY;AAE7C,aAAW,OAAO,UAAU;AAC3B,QAAI,QAAQ,IAAI,GAAG,GAAG;AACrB;AAAA,IACD;AACA,UAAM,SAAoC,KAAK,IAAI,GAAG,EAAG,IAAI,iBAAe,EAAE,GAAG,YAAY,GAAG,EAAE,IAAI,EAAE,EAAE;AAC1G,UAAM,SAAoC,GAAG,IAAI,GAAG,EAAG,IAAI,iBAAe,EAAE,GAAG,YAAY,GAAG,EAAE,IAAI,EAAE,EAAE;AACxG,QAAI,CAAC,OAAO,QAAQ,QAAQ,CAAC,GAAG,MAAM,iBAAiB,GAAG,CAAC,CAAC,GAAG;AAC9D,cAAQ,IAAI,GAAG;AAAA,IAChB;AAAA,EACD;AAEA,SAAO,EAAE,OAAO,SAAS,QAAQ;AAClC;AAnBS;AAqBT,SAAS,iBAAiB,MAA8C,IAA4C,gBAA2D;AAC9K,QAAM,WAAW,CAAC,GAAG,KAAK,KAAK,CAAC;AAChC,QAAM,SAAS,CAAC,GAAG,GAAG,KAAK,CAAC;AAC5B,QAAM,QAAQ,OAAO,OAAO,SAAO,CAAC,SAAS,SAAS,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,QAAQ;AAAE,MAAE,IAAI,GAAG;AAAG,WAAO;AAAA,EAAG,GAAG,oBAAI,IAAY,CAAC;AAC3H,QAAM,UAAU,SAAS,OAAO,SAAO,CAAC,OAAO,SAAS,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,QAAQ;AAAE,MAAE,IAAI,GAAG;AAAG,WAAO;AAAA,EAAG,GAAG,oBAAI,IAAY,CAAC;AAC7H,QAAM,UAAuB,oBAAI,IAAY;AAE7C,aAAW,OAAO,UAAU;AAC3B,QAAI,QAAQ,IAAI,GAAG,GAAG;AACrB;AAAA,IACD;AACA,UAAM,SAAoC,KAAK,IAAI,GAAG,EAAG,IAAI,iBAAe,EAAE,GAAG,YAAY,GAAG,EAAE,KAAK,eAAe,WAAW,GAAG,EAAE,EAAE,EAAE;AAC1I,UAAM,SAAoC,GAAG,IAAI,GAAG,EAAG,IAAI,iBAAe,EAAE,GAAG,YAAY,GAAG,EAAE,KAAK,eAAe,WAAW,GAAG,EAAE,EAAE,EAAE;AACxI,QAAI,CAAC,kCAAkC,QAAQ,MAAM,GAAG;AACvD,cAAQ,IAAI,GAAG;AAAA,IAChB;AAAA,EACD;AAEA,SAAO,EAAE,OAAO,SAAS,QAAQ;AAClC;AAnBS;AAqBT,SAAS,kCAAkC,QAAmC,QAA4C;AAEzH,MAAI,CAAC,OAAO,OAAO,OAAO,CAAC,EAAE,QAAQ,MAAM,QAAQ,CAAC,MAAM,GAAG,GAAG,OAAO,OAAO,CAAC,EAAE,QAAQ,MAAM,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,MAAM,iBAAiB,GAAG,CAAC,CAAC,GAAG;AACtJ,WAAO;AAAA,EACR;AAEA,MAAI,CAAC,OAAO,OAAO,OAAO,CAAC,EAAE,QAAQ,MAAM,QAAQ,CAAC,MAAM,GAAG,GAAG,OAAO,OAAO,CAAC,EAAE,QAAQ,MAAM,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,MAAM,iBAAiB,GAAG,CAAC,CAAC,GAAG;AACtJ,WAAO;AAAA,EACR;AACA,SAAO;AACR;AAVS;AAYT,SAAS,iBAAiB,GAA4B,GAAqC;AAC1F,MAAI,EAAE,YAAY,EAAE,SAAS;AAC5B,WAAO;AAAA,EACR;AACA,MAAI,EAAE,QAAQ,EAAE,KAAK;AACpB,WAAO;AAAA,EACR;AACA,QAAM,QAAQ,eAAe,YAAY,EAAE,IAAI;AAC/C,QAAM,QAAQ,eAAe,YAAY,EAAE,IAAI;AAC/C,MAAK,SAAS,CAAC,SAAW,CAAC,SAAS,OAAQ;AAC3C,WAAO;AAAA,EACR;AACA,MAAI,SAAS,SAAS,CAAC,MAAM,OAAO,KAAK,GAAG;AAC3C,WAAO;AAAA,EACR;AACA,MAAI,CAAC,QAAQ,OAAO,EAAE,MAAM,EAAE,IAAI,GAAG;AACpC,WAAO;AAAA,EACR;AACA,SAAO;AACR;AAnBS;AAqBT,SAAS,eAAe,SAAiB,aAAwC,mBAA8C;AAC9H,aAAW,cAAc,aAAa;AACrC,cAAU,YAAY,KAAK,SAAS,CAAC,EAAE,GAAG,YAAY,iBAAiB;AAAA,EACxE;AACA,SAAO;AACR;AALS;AAOT,SAAS,kBAAkB,SAAiB,SAAiB,mBAA8C;AAC1G,QAAM,cAAc,iBAAiB,OAAO;AAC5C,WAAS,QAAQ,YAAY,SAAS,GAAG,SAAS,GAAG,SAAS;AAC7D,QAAI,YAAY,KAAK,EAAE,YAAY,WAAW,YAAY,KAAK,EAAE,YAAY,IAAI,OAAO,IAAI;AAC3F,gBAAU,YAAY,KAAK,SAAS,CAAC,KAAK,GAAG,QAAW,iBAAiB;AAAA,IAC1E;AAAA,EACD;AACA,SAAO;AACR;AARS;AAUT,SAAS,kBAAkB,SAAiB,SAAiB,aAAwC,mBAA8C;AAClJ,QAAM,iBAAiB,iBAAiB,OAAO;AAC/C,QAAM,WAAW,eAAe,UAAU,gBAAc,WAAW,YAAY,WAAW,WAAW,YAAY,IAAI,OAAO,EAAE;AAE9H,WAAS,QAAQ,eAAe,SAAS,GAAG,SAAS,GAAG,SAAS;AAChE,QAAI,eAAe,KAAK,EAAE,YAAY,WAAW,eAAe,KAAK,EAAE,YAAY,IAAI,OAAO,IAAI;AACjG,gBAAU,YAAY,KAAK,SAAS,CAAC,KAAK,GAAG,QAAW,iBAAiB;AAAA,IAC1E;AAAA,EACD;AAEA,WAAS,QAAQ,YAAY,SAAS,GAAG,SAAS,GAAG,SAAS;AAC7D,cAAU,YAAY,KAAK,SAAS,CAAC,QAAQ,GAAG,YAAY,KAAK,GAAG,iBAAiB;AAAA,EACtF;AACA,SAAO;AACR;AAdS;",
  "names": []
}
