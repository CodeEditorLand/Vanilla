var w=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var D=(m,h,e,t)=>{for(var o=t>1?void 0:t?b(h,e):h,i=m.length-1,n;i>=0;i--)(n=m[i])&&(o=(t?n(h,e,o):n(o))||o);return t&&o&&w(h,e,o),o},u=(m,h)=>(e,t)=>h(e,t,m);import{toFormattedString as v}from"../../../base/common/jsonFormatter.js";import{IConfigurationService as M}from"../../configuration/common/configuration.js";import{IEnvironmentService as N}from"../../environment/common/environment.js";import{IFileService as $}from"../../files/common/files.js";import{IStorageService as E}from"../../storage/common/storage.js";import{ITelemetryService as x}from"../../telemetry/common/telemetry.js";import{IUriIdentityService as F}from"../../uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as T}from"../../userDataProfile/common/userDataProfile.js";import{AbstractSynchroniser as A}from"./abstractSynchronizer.js";import{merge as R}from"./userDataProfilesManifestMerge.js";import{Change as l,IUserDataSyncEnablementService as O,IUserDataSyncLocalStoreService as J,IUserDataSyncLogService as q,IUserDataSyncStoreService as k,SyncResource as j,USER_DATA_SYNC_SCHEME as S,UserDataSyncError as U,UserDataSyncErrorCode as I}from"./userDataSync.js";let P=class extends A{constructor(e,t,o,i,n,s,f,g,c,r,y,a,d){super({syncResource:j.Profiles,profile:e},t,i,n,s,f,g,y,a,c,r,d);this.userDataProfilesService=o;this._register(o.onDidChangeProfiles(()=>this.triggerLocalChange()))}version=2;previewResource=this.extUri.joinPath(this.syncPreviewFolder,"profiles.json");baseResource=this.previewResource.with({scheme:S,authority:"base"});localResource=this.previewResource.with({scheme:S,authority:"local"});remoteResource=this.previewResource.with({scheme:S,authority:"remote"});acceptedResource=this.previewResource.with({scheme:S,authority:"accepted"});async getLastSyncedProfiles(){const e=await this.getLastSyncUserData();return e?.syncData?p(e.syncData):null}async getRemoteSyncedProfiles(e){const t=await this.getLastSyncUserData(),o=await this.getLatestRemoteUserData(e,t);return o?.syncData?p(o.syncData):null}async generateSyncPreview(e,t,o){if(!this.userDataProfilesService.isEnabled())throw new U("Cannot sync profiles because they are disabled",I.LocalError);const i=e.syncData?p(e.syncData):null,n=t?.syncData?p(t.syncData):null,s=this.getLocalUserDataProfiles(),{local:f,remote:g}=R(s,i,n,[]),c={local:f,remote:g,content:n?this.stringifyRemoteProfiles(n):null,localChange:f.added.length>0||f.removed.length>0||f.updated.length>0?l.Modified:l.None,remoteChange:g!==null?l.Modified:l.None},r=L(s,!1);return[{baseResource:this.baseResource,baseContent:n?this.stringifyRemoteProfiles(n):null,localResource:this.localResource,localContent:r,remoteResource:this.remoteResource,remoteContent:i?this.stringifyRemoteProfiles(i):null,remoteProfiles:i,previewResource:this.previewResource,previewResult:c,localChange:c.localChange,remoteChange:c.remoteChange,acceptedResource:this.acceptedResource}]}async hasRemoteChanged(e){const t=e?.syncData?p(e.syncData):null,o=this.getLocalUserDataProfiles(),{remote:i}=R(o,t,t,[]);return!!i?.added.length||!!i?.removed.length||!!i?.updated.length}async getMergeResult(e,t){return{...e.previewResult,hasConflicts:!1}}async getAcceptResult(e,t,o,i){if(this.extUri.isEqual(t,this.localResource))return this.acceptLocal(e);if(this.extUri.isEqual(t,this.remoteResource))return this.acceptRemote(e);if(this.extUri.isEqual(t,this.previewResource))return e.previewResult;throw new Error(`Invalid Resource: ${t.toString()}`)}async acceptLocal(e){const t=this.getLocalUserDataProfiles(),o=R(t,null,null,[]),{local:i,remote:n}=o;return{content:e.localContent,local:i,remote:n,localChange:i.added.length>0||i.removed.length>0||i.updated.length>0?l.Modified:l.None,remoteChange:n!==null?l.Modified:l.None}}async acceptRemote(e){const t=e.remoteContent?JSON.parse(e.remoteContent):null,o=[],i=[];for(const n of this.getLocalUserDataProfiles()){const s=t?.find(f=>f.id===n.id);s&&(o.push({id:n.id,name:n.name,collection:s.collection}),i.push(n))}if(t!==null){const n=R(i,t,o,[]),{local:s,remote:f}=n;return{content:e.remoteContent,local:s,remote:f,localChange:s.added.length>0||s.removed.length>0||s.updated.length>0?l.Modified:l.None,remoteChange:f!==null?l.Modified:l.None}}else return{content:e.remoteContent,local:{added:[],removed:[],updated:[]},remote:null,localChange:l.None,remoteChange:l.None}}async applyResult(e,t,o,i){const{local:n,remote:s,localChange:f,remoteChange:g}=o[0][1];f===l.None&&g===l.None&&this.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing profiles.`);const c=o[0][0].remoteProfiles||[];if(c.length+(s?.added.length??0)-(s?.removed.length??0)>20)throw new U("Too many profiles to sync. Please remove some profiles and try again.",I.LocalTooManyProfiles);if(f!==l.None&&(await this.backupLocal(L(this.getLocalUserDataProfiles(),!1)),await Promise.all(n.removed.map(async r=>{this.logService.trace(`${this.syncResourceLogLabel}: Removing '${r.name}' profile...`),await this.userDataProfilesService.removeProfile(r),this.logService.info(`${this.syncResourceLogLabel}: Removed profile '${r.name}'.`)})),await Promise.all(n.added.map(async r=>{this.logService.trace(`${this.syncResourceLogLabel}: Creating '${r.name}' profile...`),await this.userDataProfilesService.createProfile(r.id,r.name,{shortName:r.shortName,icon:r.icon,useDefaultFlags:r.useDefaultFlags}),this.logService.info(`${this.syncResourceLogLabel}: Created profile '${r.name}'.`)})),await Promise.all(n.updated.map(async r=>{const y=this.userDataProfilesService.profiles.find(a=>a.id===r.id);y?(this.logService.trace(`${this.syncResourceLogLabel}: Updating '${r.name}' profile...`),await this.userDataProfilesService.updateProfile(y,{name:r.name,shortName:r.shortName,icon:r.icon,useDefaultFlags:r.useDefaultFlags}),this.logService.info(`${this.syncResourceLogLabel}: Updated profile '${r.name}'.`)):this.logService.info(`${this.syncResourceLogLabel}: Could not find profile with id '${r.id}' to update.`)}))),g!==l.None){this.logService.trace(`${this.syncResourceLogLabel}: Updating remote profiles...`);const r=[],y=c.length+(s?.added.length??0)<=20;if(y)for(const a of s?.added||[]){const d=await this.userDataSyncStoreService.createCollection(this.syncHeaders);r.push(d),c.push({id:a.id,name:a.name,collection:d,shortName:a.shortName,icon:a.icon,useDefaultFlags:a.useDefaultFlags})}else this.logService.info(`${this.syncResourceLogLabel}: Could not create remote profiles as there are too many profiles.`);for(const a of s?.removed||[])c.splice(c.findIndex(({id:d})=>a.id===d),1);for(const a of s?.updated||[]){const d=c.find(({id:C})=>a.id===C);d&&c.splice(c.indexOf(d),1,{...d,id:a.id,name:a.name,shortName:a.shortName,icon:a.icon,useDefaultFlags:a.useDefaultFlags})}try{e=await this.updateRemoteProfiles(c,i?null:e.ref),this.logService.info(`${this.syncResourceLogLabel}: Updated remote profiles.${y&&s?.added.length?` Added: ${JSON.stringify(s.added.map(a=>a.name))}.`:""}${s?.updated.length?` Updated: ${JSON.stringify(s.updated.map(a=>a.name))}.`:""}${s?.removed.length?` Removed: ${JSON.stringify(s.removed.map(a=>a.name))}.`:""}`)}catch(a){if(r.length){this.logService.info(`${this.syncResourceLogLabel}: Failed to update remote profiles. Cleaning up added collections...`);for(const d of r)await this.userDataSyncStoreService.deleteCollection(d,this.syncHeaders)}throw a}for(const a of s?.removed||[])await this.userDataSyncStoreService.deleteCollection(a.collection,this.syncHeaders)}t?.ref!==e.ref&&(this.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized profiles...`),await this.updateLastSyncUserData(e),this.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized profiles.`))}async updateRemoteProfiles(e,t){return this.updateRemoteUserData(this.stringifyRemoteProfiles(e),t)}async hasLocalData(){return this.getLocalUserDataProfiles().length>0}async resolveContent(e){if(this.extUri.isEqual(this.remoteResource,e)||this.extUri.isEqual(this.baseResource,e)||this.extUri.isEqual(this.localResource,e)||this.extUri.isEqual(this.acceptedResource,e)){const t=await this.resolvePreviewContent(e);return t&&v(JSON.parse(t),{})}return null}getLocalUserDataProfiles(){return this.userDataProfilesService.profiles.filter(e=>!e.isDefault&&!e.isTransient)}stringifyRemoteProfiles(e){return JSON.stringify([...e].sort((t,o)=>t.name.localeCompare(o.name)))}};P=D([u(2,T),u(3,$),u(4,N),u(5,E),u(6,k),u(7,J),u(8,q),u(9,M),u(10,O),u(11,x),u(12,F)],P);function L(m,h){const e=[...m].sort((t,o)=>t.name.localeCompare(o.name)).map(t=>({id:t.id,name:t.name}));return h?v(e,{}):JSON.stringify(e)}function p(m){return JSON.parse(m.content)}export{P as UserDataProfilesManifestSynchroniser,p as parseUserDataProfilesManifest,L as stringifyLocalProfiles};
