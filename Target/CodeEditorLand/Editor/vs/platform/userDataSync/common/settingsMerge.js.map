{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/settingsMerge.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../base/common/arrays.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { type JSONVisitor, parse, visit } from \"../../../base/common/json.js\";\nimport {\n\tapplyEdits,\n\tsetProperty,\n\twithFormatting,\n} from \"../../../base/common/jsonEdit.js\";\nimport {\n\ttype Edit,\n\ttype FormattingOptions,\n\tgetEOL,\n} from \"../../../base/common/jsonFormatter.js\";\nimport * as objects from \"../../../base/common/objects.js\";\nimport type { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport * as contentUtil from \"./content.js\";\nimport {\n\ttype IConflictSetting,\n\tgetDisallowedIgnoredSettings,\n} from \"./userDataSync.js\";\n\nexport interface IMergeResult {\n\tlocalContent: string | null;\n\tremoteContent: string | null;\n\thasConflicts: boolean;\n\tconflictsSettings: IConflictSetting[];\n}\n\nexport function getIgnoredSettings(\n\tdefaultIgnoredSettings: string[],\n\tconfigurationService: IConfigurationService,\n\tsettingsContent?: string,\n): string[] {\n\tlet value: ReadonlyArray<string> = [];\n\tif (settingsContent) {\n\t\tvalue = getIgnoredSettingsFromContent(settingsContent);\n\t} else {\n\t\tvalue = getIgnoredSettingsFromConfig(configurationService);\n\t}\n\tconst added: string[] = [],\n\t\tremoved: string[] = [...getDisallowedIgnoredSettings()];\n\tif (Array.isArray(value)) {\n\t\tfor (const key of value) {\n\t\t\tif (key.startsWith(\"-\")) {\n\t\t\t\tremoved.push(key.substring(1));\n\t\t\t} else {\n\t\t\t\tadded.push(key);\n\t\t\t}\n\t\t}\n\t}\n\treturn distinct(\n\t\t[...defaultIgnoredSettings, ...added].filter(\n\t\t\t(setting) => !removed.includes(setting),\n\t\t),\n\t);\n}\n\nfunction getIgnoredSettingsFromConfig(\n\tconfigurationService: IConfigurationService,\n): ReadonlyArray<string> {\n\tlet userValue = configurationService.inspect<string[]>(\n\t\t\"settingsSync.ignoredSettings\",\n\t).userValue;\n\tif (userValue !== undefined) {\n\t\treturn userValue;\n\t}\n\tuserValue = configurationService.inspect<string[]>(\n\t\t\"sync.ignoredSettings\",\n\t).userValue;\n\tif (userValue !== undefined) {\n\t\treturn userValue;\n\t}\n\treturn (\n\t\tconfigurationService.getValue<string[]>(\n\t\t\t\"settingsSync.ignoredSettings\",\n\t\t) || []\n\t);\n}\n\nfunction getIgnoredSettingsFromContent(settingsContent: string): string[] {\n\tconst parsed = parse(settingsContent);\n\treturn parsed\n\t\t? parsed[\"settingsSync.ignoredSettings\"] ||\n\t\t\t\tparsed[\"sync.ignoredSettings\"] ||\n\t\t\t\t[]\n\t\t: [];\n}\n\nexport function removeComments(\n\tcontent: string,\n\tformattingOptions: FormattingOptions,\n): string {\n\tconst source = parse(content) || {};\n\tlet result = \"{}\";\n\tfor (const key of Object.keys(source)) {\n\t\tconst edits = setProperty(\n\t\t\tresult,\n\t\t\t[key],\n\t\t\tsource[key],\n\t\t\tformattingOptions,\n\t\t);\n\t\tresult = applyEdits(result, edits);\n\t}\n\treturn result;\n}\n\nexport function updateIgnoredSettings(\n\ttargetContent: string,\n\tsourceContent: string,\n\tignoredSettings: string[],\n\tformattingOptions: FormattingOptions,\n): string {\n\tif (ignoredSettings.length) {\n\t\tconst sourceTree = parseSettings(sourceContent);\n\t\tconst source = parse(sourceContent) || {};\n\t\tconst target = parse(targetContent);\n\t\tif (!target) {\n\t\t\treturn targetContent;\n\t\t}\n\t\tconst settingsToAdd: INode[] = [];\n\t\tfor (const key of ignoredSettings) {\n\t\t\tconst sourceValue = source[key];\n\t\t\tconst targetValue = target[key];\n\n\t\t\t// Remove in target\n\t\t\tif (sourceValue === undefined) {\n\t\t\t\ttargetContent = contentUtil.edit(\n\t\t\t\t\ttargetContent,\n\t\t\t\t\t[key],\n\t\t\t\t\tundefined,\n\t\t\t\t\tformattingOptions,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Update in target\n\t\t\telse if (targetValue !== undefined) {\n\t\t\t\ttargetContent = contentUtil.edit(\n\t\t\t\t\ttargetContent,\n\t\t\t\t\t[key],\n\t\t\t\t\tsourceValue,\n\t\t\t\t\tformattingOptions,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tsettingsToAdd.push(findSettingNode(key, sourceTree)!);\n\t\t\t}\n\t\t}\n\n\t\tsettingsToAdd.sort((a, b) => a.startOffset - b.startOffset);\n\t\tsettingsToAdd.forEach(\n\t\t\t(s) =>\n\t\t\t\t(targetContent = addSetting(\n\t\t\t\t\ts.setting!.key,\n\t\t\t\t\tsourceContent,\n\t\t\t\t\ttargetContent,\n\t\t\t\t\tformattingOptions,\n\t\t\t\t)),\n\t\t);\n\t}\n\treturn targetContent;\n}\n\nexport function merge(\n\toriginalLocalContent: string,\n\toriginalRemoteContent: string,\n\tbaseContent: string | null,\n\tignoredSettings: string[],\n\tresolvedConflicts: { key: string; value: any | undefined }[],\n\tformattingOptions: FormattingOptions,\n): IMergeResult {\n\tconst localContentWithoutIgnoredSettings = updateIgnoredSettings(\n\t\toriginalLocalContent,\n\t\toriginalRemoteContent,\n\t\tignoredSettings,\n\t\tformattingOptions,\n\t);\n\tconst localForwarded = baseContent !== localContentWithoutIgnoredSettings;\n\tconst remoteForwarded = baseContent !== originalRemoteContent;\n\n\t/* no changes */\n\tif (!localForwarded && !remoteForwarded) {\n\t\treturn {\n\t\t\tconflictsSettings: [],\n\t\t\tlocalContent: null,\n\t\t\tremoteContent: null,\n\t\t\thasConflicts: false,\n\t\t};\n\t}\n\n\t/* local has changed and remote has not */\n\tif (localForwarded && !remoteForwarded) {\n\t\treturn {\n\t\t\tconflictsSettings: [],\n\t\t\tlocalContent: null,\n\t\t\tremoteContent: localContentWithoutIgnoredSettings,\n\t\t\thasConflicts: false,\n\t\t};\n\t}\n\n\t/* remote has changed and local has not */\n\tif (remoteForwarded && !localForwarded) {\n\t\treturn {\n\t\t\tconflictsSettings: [],\n\t\t\tlocalContent: updateIgnoredSettings(\n\t\t\t\toriginalRemoteContent,\n\t\t\t\toriginalLocalContent,\n\t\t\t\tignoredSettings,\n\t\t\t\tformattingOptions,\n\t\t\t),\n\t\t\tremoteContent: null,\n\t\t\thasConflicts: false,\n\t\t};\n\t}\n\n\t/* local is empty and not synced before */\n\tif (baseContent === null && isEmpty(originalLocalContent)) {\n\t\tconst localContent = areSame(\n\t\t\toriginalLocalContent,\n\t\t\toriginalRemoteContent,\n\t\t\tignoredSettings,\n\t\t)\n\t\t\t? null\n\t\t\t: updateIgnoredSettings(\n\t\t\t\t\toriginalRemoteContent,\n\t\t\t\t\toriginalLocalContent,\n\t\t\t\t\tignoredSettings,\n\t\t\t\t\tformattingOptions,\n\t\t\t\t);\n\t\treturn {\n\t\t\tconflictsSettings: [],\n\t\t\tlocalContent,\n\t\t\tremoteContent: null,\n\t\t\thasConflicts: false,\n\t\t};\n\t}\n\n\t/* remote and local has changed */\n\tlet localContent = originalLocalContent;\n\tlet remoteContent = originalRemoteContent;\n\tconst local = parse(originalLocalContent);\n\tconst remote = parse(originalRemoteContent);\n\tconst base = baseContent ? parse(baseContent) : null;\n\n\tconst ignored = ignoredSettings.reduce((set, key) => {\n\t\tset.add(key);\n\t\treturn set;\n\t}, new Set<string>());\n\tconst localToRemote = compare(local, remote, ignored);\n\tconst baseToLocal = compare(base, local, ignored);\n\tconst baseToRemote = compare(base, remote, ignored);\n\n\tconst conflicts: Map<string, IConflictSetting> = new Map<\n\t\tstring,\n\t\tIConflictSetting\n\t>();\n\tconst handledConflicts: Set<string> = new Set<string>();\n\tconst handleConflict = (conflictKey: string): void => {\n\t\thandledConflicts.add(conflictKey);\n\t\tconst resolvedConflict = resolvedConflicts.filter(\n\t\t\t({ key }) => key === conflictKey,\n\t\t)[0];\n\t\tif (resolvedConflict) {\n\t\t\tlocalContent = contentUtil.edit(\n\t\t\t\tlocalContent,\n\t\t\t\t[conflictKey],\n\t\t\t\tresolvedConflict.value,\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t\tremoteContent = contentUtil.edit(\n\t\t\t\tremoteContent,\n\t\t\t\t[conflictKey],\n\t\t\t\tresolvedConflict.value,\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t} else {\n\t\t\tconflicts.set(conflictKey, {\n\t\t\t\tkey: conflictKey,\n\t\t\t\tlocalValue: local[conflictKey],\n\t\t\t\tremoteValue: remote[conflictKey],\n\t\t\t});\n\t\t}\n\t};\n\n\t// Removed settings in Local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Conflict - Got updated in remote.\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\thandleConflict(key);\n\t\t}\n\t\t// Also remove in remote\n\t\telse {\n\t\t\tremoteContent = contentUtil.edit(\n\t\t\t\tremoteContent,\n\t\t\t\t[key],\n\t\t\t\tundefined,\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t}\n\t}\n\n\t// Removed settings in Remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Conflict - Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\thandleConflict(key);\n\t\t}\n\t\t// Also remove in locals\n\t\telse {\n\t\t\tlocalContent = contentUtil.edit(\n\t\t\t\tlocalContent,\n\t\t\t\t[key],\n\t\t\t\tundefined,\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t}\n\t}\n\n\t// Updated settings in Local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteContent = contentUtil.edit(\n\t\t\t\tremoteContent,\n\t\t\t\t[key],\n\t\t\t\tlocal[key],\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t}\n\t}\n\n\t// Updated settings in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tlocalContent = contentUtil.edit(\n\t\t\t\tlocalContent,\n\t\t\t\t[key],\n\t\t\t\tremote[key],\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t}\n\t}\n\n\t// Added settings in Local\n\tfor (const key of baseToLocal.added.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in remote\n\t\tif (baseToRemote.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteContent = addSetting(\n\t\t\t\tkey,\n\t\t\t\tlocalContent,\n\t\t\t\tremoteContent,\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t}\n\t}\n\n\t// Added settings in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in local\n\t\tif (baseToLocal.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tlocalContent = addSetting(\n\t\t\t\tkey,\n\t\t\t\tremoteContent,\n\t\t\t\tlocalContent,\n\t\t\t\tformattingOptions,\n\t\t\t);\n\t\t}\n\t}\n\n\tconst hasConflicts =\n\t\tconflicts.size > 0 ||\n\t\t!areSame(localContent, remoteContent, ignoredSettings);\n\tconst hasLocalChanged =\n\t\thasConflicts || !areSame(localContent, originalLocalContent, []);\n\tconst hasRemoteChanged =\n\t\thasConflicts || !areSame(remoteContent, originalRemoteContent, []);\n\treturn {\n\t\tlocalContent: hasLocalChanged ? localContent : null,\n\t\tremoteContent: hasRemoteChanged ? remoteContent : null,\n\t\tconflictsSettings: [...conflicts.values()],\n\t\thasConflicts,\n\t};\n}\n\nfunction areSame(\n\tlocalContent: string,\n\tremoteContent: string,\n\tignoredSettings: string[],\n): boolean {\n\tif (localContent === remoteContent) {\n\t\treturn true;\n\t}\n\n\tconst local = parse(localContent);\n\tconst remote = parse(remoteContent);\n\tconst ignored = ignoredSettings.reduce((set, key) => {\n\t\tset.add(key);\n\t\treturn set;\n\t}, new Set<string>());\n\tconst localTree = parseSettings(localContent).filter(\n\t\t(node) => !(node.setting && ignored.has(node.setting.key)),\n\t);\n\tconst remoteTree = parseSettings(remoteContent).filter(\n\t\t(node) => !(node.setting && ignored.has(node.setting.key)),\n\t);\n\n\tif (localTree.length !== remoteTree.length) {\n\t\treturn false;\n\t}\n\n\tfor (let index = 0; index < localTree.length; index++) {\n\t\tconst localNode = localTree[index];\n\t\tconst remoteNode = remoteTree[index];\n\t\tif (localNode.setting && remoteNode.setting) {\n\t\t\tif (localNode.setting.key !== remoteNode.setting.key) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!objects.equals(\n\t\t\t\t\tlocal[localNode.setting.key],\n\t\t\t\t\tremote[localNode.setting.key],\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!localNode.setting && !remoteNode.setting) {\n\t\t\tif (localNode.value !== remoteNode.value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function isEmpty(content: string): boolean {\n\tif (content) {\n\t\tconst nodes = parseSettings(content);\n\t\treturn nodes.length === 0;\n\t}\n\treturn true;\n}\n\nfunction compare(\n\tfrom: IStringDictionary<any> | null,\n\tto: IStringDictionary<any>,\n\tignored: Set<string>,\n): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = from\n\t\t? Object.keys(from).filter((key) => !ignored.has(key))\n\t\t: [];\n\tconst toKeys = Object.keys(to).filter((key) => !ignored.has(key));\n\tconst added = toKeys\n\t\t.filter((key) => !fromKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst removed = fromKeys\n\t\t.filter((key) => !toKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tif (from) {\n\t\tfor (const key of fromKeys) {\n\t\t\tif (removed.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst value1 = from[key];\n\t\t\tconst value2 = to[key];\n\t\t\tif (!objects.equals(value1, value2)) {\n\t\t\t\tupdated.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nexport function addSetting(\n\tkey: string,\n\tsourceContent: string,\n\ttargetContent: string,\n\tformattingOptions: FormattingOptions,\n): string {\n\tconst source = parse(sourceContent);\n\tconst sourceTree = parseSettings(sourceContent);\n\tconst targetTree = parseSettings(targetContent);\n\tconst insertLocation = getInsertLocation(key, sourceTree, targetTree);\n\treturn insertAtLocation(\n\t\ttargetContent,\n\t\tkey,\n\t\tsource[key],\n\t\tinsertLocation,\n\t\ttargetTree,\n\t\tformattingOptions,\n\t);\n}\n\ninterface InsertLocation {\n\tindex: number;\n\tinsertAfter: boolean;\n}\n\nfunction getInsertLocation(\n\tkey: string,\n\tsourceTree: INode[],\n\ttargetTree: INode[],\n): InsertLocation {\n\tconst sourceNodeIndex = sourceTree.findIndex(\n\t\t(node) => node.setting?.key === key,\n\t);\n\n\tconst sourcePreviousNode: INode = sourceTree[sourceNodeIndex - 1];\n\tif (sourcePreviousNode) {\n\t\t/*\n\t\t\tPrevious node in source is a setting.\n\t\t\tFind the same setting in the target.\n\t\t\tInsert it after that setting\n\t\t*/\n\t\tif (sourcePreviousNode.setting) {\n\t\t\tconst targetPreviousSetting = findSettingNode(\n\t\t\t\tsourcePreviousNode.setting.key,\n\t\t\t\ttargetTree,\n\t\t\t);\n\t\t\tif (targetPreviousSetting) {\n\t\t\t\t/* Insert after target's previous setting */\n\t\t\t\treturn {\n\t\t\t\t\tindex: targetTree.indexOf(targetPreviousSetting),\n\t\t\t\t\tinsertAfter: true,\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t/* Previous node in source is a comment */\n\t\t\tconst sourcePreviousSettingNode = findPreviousSettingNode(\n\t\t\t\tsourceNodeIndex,\n\t\t\t\tsourceTree,\n\t\t\t);\n\t\t\t/*\n\t\t\t\tSource has a setting defined before the setting to be added.\n\t\t\t\tFind the same previous setting in the target.\n\t\t\t\tIf found, insert before its next setting so that comments are retrieved.\n\t\t\t\tOtherwise, insert at the end.\n\t\t\t*/\n\t\t\tif (sourcePreviousSettingNode) {\n\t\t\t\tconst targetPreviousSetting = findSettingNode(\n\t\t\t\t\tsourcePreviousSettingNode.setting!.key,\n\t\t\t\t\ttargetTree,\n\t\t\t\t);\n\t\t\t\tif (targetPreviousSetting) {\n\t\t\t\t\tconst targetNextSetting = findNextSettingNode(\n\t\t\t\t\t\ttargetTree.indexOf(targetPreviousSetting),\n\t\t\t\t\t\ttargetTree,\n\t\t\t\t\t);\n\t\t\t\t\tconst sourceCommentNodes = findNodesBetween(\n\t\t\t\t\t\tsourceTree,\n\t\t\t\t\t\tsourcePreviousSettingNode,\n\t\t\t\t\t\tsourceTree[sourceNodeIndex],\n\t\t\t\t\t);\n\t\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(\n\t\t\t\t\t\t\ttargetTree,\n\t\t\t\t\t\t\ttargetPreviousSetting,\n\t\t\t\t\t\t\ttargetNextSetting,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst targetCommentNode =\n\t\t\t\t\t\t\tfindLastMatchingTargetCommentNode(\n\t\t\t\t\t\t\t\tsourceCommentNodes,\n\t\t\t\t\t\t\t\ttargetCommentNodes,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tindex: targetTree.indexOf(targetCommentNode),\n\t\t\t\t\t\t\t\tinsertAfter: true,\n\t\t\t\t\t\t\t}; /* Insert after comment */\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tindex: targetTree.indexOf(targetNextSetting),\n\t\t\t\t\t\t\t\tinsertAfter: false,\n\t\t\t\t\t\t\t}; /* Insert before target next setting */\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(\n\t\t\t\t\t\t\ttargetTree,\n\t\t\t\t\t\t\ttargetPreviousSetting,\n\t\t\t\t\t\t\ttargetTree[targetTree.length - 1],\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst targetCommentNode =\n\t\t\t\t\t\t\tfindLastMatchingTargetCommentNode(\n\t\t\t\t\t\t\t\tsourceCommentNodes,\n\t\t\t\t\t\t\t\ttargetCommentNodes,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tindex: targetTree.indexOf(targetCommentNode),\n\t\t\t\t\t\t\t\tinsertAfter: true,\n\t\t\t\t\t\t\t}; /* Insert after comment */\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tindex: targetTree.length - 1,\n\t\t\t\t\t\t\t\tinsertAfter: true,\n\t\t\t\t\t\t\t}; /* Insert at the end */\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst sourceNextNode = sourceTree[sourceNodeIndex + 1];\n\t\tif (sourceNextNode) {\n\t\t\t/*\n\t\t\t\tNext node in source is a setting.\n\t\t\t\tFind the same setting in the target.\n\t\t\t\tInsert it before that setting\n\t\t\t*/\n\t\t\tif (sourceNextNode.setting) {\n\t\t\t\tconst targetNextSetting = findSettingNode(\n\t\t\t\t\tsourceNextNode.setting.key,\n\t\t\t\t\ttargetTree,\n\t\t\t\t);\n\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t/* Insert before target's next setting */\n\t\t\t\t\treturn {\n\t\t\t\t\t\tindex: targetTree.indexOf(targetNextSetting),\n\t\t\t\t\t\tinsertAfter: false,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t/* Next node in source is a comment */\n\t\t\t\tconst sourceNextSettingNode = findNextSettingNode(\n\t\t\t\t\tsourceNodeIndex,\n\t\t\t\t\tsourceTree,\n\t\t\t\t);\n\t\t\t\t/*\n\t\t\t\t\tSource has a setting defined after the setting to be added.\n\t\t\t\t\tFind the same next setting in the target.\n\t\t\t\t\tIf found, insert after its previous setting so that comments are retrieved.\n\t\t\t\t\tOtherwise, insert at the beginning.\n\t\t\t\t*/\n\t\t\t\tif (sourceNextSettingNode) {\n\t\t\t\t\tconst targetNextSetting = findSettingNode(\n\t\t\t\t\t\tsourceNextSettingNode.setting!.key,\n\t\t\t\t\t\ttargetTree,\n\t\t\t\t\t);\n\t\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t\tconst targetPreviousSetting = findPreviousSettingNode(\n\t\t\t\t\t\t\ttargetTree.indexOf(targetNextSetting),\n\t\t\t\t\t\t\ttargetTree,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst sourceCommentNodes = findNodesBetween(\n\t\t\t\t\t\t\tsourceTree,\n\t\t\t\t\t\t\tsourceTree[sourceNodeIndex],\n\t\t\t\t\t\t\tsourceNextSettingNode,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (targetPreviousSetting) {\n\t\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(\n\t\t\t\t\t\t\t\ttargetTree,\n\t\t\t\t\t\t\t\ttargetPreviousSetting,\n\t\t\t\t\t\t\t\ttargetNextSetting,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst targetCommentNode =\n\t\t\t\t\t\t\t\tfindLastMatchingTargetCommentNode(\n\t\t\t\t\t\t\t\t\tsourceCommentNodes.reverse(),\n\t\t\t\t\t\t\t\t\ttargetCommentNodes.reverse(),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tindex: targetTree.indexOf(\n\t\t\t\t\t\t\t\t\t\ttargetCommentNode,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tinsertAfter: false,\n\t\t\t\t\t\t\t\t}; /* Insert before comment */\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tindex: targetTree.indexOf(\n\t\t\t\t\t\t\t\t\t\ttargetPreviousSetting,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tinsertAfter: true,\n\t\t\t\t\t\t\t\t}; /* Insert after target previous setting */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(\n\t\t\t\t\t\t\t\ttargetTree,\n\t\t\t\t\t\t\t\ttargetTree[0],\n\t\t\t\t\t\t\t\ttargetNextSetting,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst targetCommentNode =\n\t\t\t\t\t\t\t\tfindLastMatchingTargetCommentNode(\n\t\t\t\t\t\t\t\t\tsourceCommentNodes.reverse(),\n\t\t\t\t\t\t\t\t\ttargetCommentNodes.reverse(),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tindex: targetTree.indexOf(\n\t\t\t\t\t\t\t\t\t\ttargetCommentNode,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tinsertAfter: false,\n\t\t\t\t\t\t\t\t}; /* Insert before comment */\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\t\t\t\tinsertAfter: false,\n\t\t\t\t\t\t\t\t}; /* Insert at the beginning */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/* Insert at the end */\n\treturn { index: targetTree.length - 1, insertAfter: true };\n}\n\nfunction insertAtLocation(\n\tcontent: string,\n\tkey: string,\n\tvalue: any,\n\tlocation: InsertLocation,\n\ttree: INode[],\n\tformattingOptions: FormattingOptions,\n): string {\n\tlet edits: Edit[];\n\t/* Insert at the end */\n\tif (location.index === -1) {\n\t\tedits = setProperty(content, [key], value, formattingOptions);\n\t} else {\n\t\tedits = getEditToInsertAtLocation(\n\t\t\tcontent,\n\t\t\tkey,\n\t\t\tvalue,\n\t\t\tlocation,\n\t\t\ttree,\n\t\t\tformattingOptions,\n\t\t).map((edit) => withFormatting(content, edit, formattingOptions)[0]);\n\t}\n\treturn applyEdits(content, edits);\n}\n\nfunction getEditToInsertAtLocation(\n\tcontent: string,\n\tkey: string,\n\tvalue: any,\n\tlocation: InsertLocation,\n\ttree: INode[],\n\tformattingOptions: FormattingOptions,\n): Edit[] {\n\tconst newProperty = `${JSON.stringify(key)}: ${JSON.stringify(value)}`;\n\tconst eol = getEOL(formattingOptions, content);\n\tconst node = tree[location.index];\n\n\tif (location.insertAfter) {\n\t\tconst edits: Edit[] = [];\n\n\t\t/* Insert after a setting */\n\t\tif (node.setting) {\n\t\t\tedits.push({\n\t\t\t\toffset: node.endOffset,\n\t\t\t\tlength: 0,\n\t\t\t\tcontent: \",\" + newProperty,\n\t\t\t});\n\t\t} else {\n\n\t\t/* Insert after a comment */\n\t\t\tconst nextSettingNode = findNextSettingNode(location.index, tree);\n\t\t\tconst previousSettingNode = findPreviousSettingNode(\n\t\t\t\tlocation.index,\n\t\t\t\ttree,\n\t\t\t);\n\t\t\tconst previousSettingCommaOffset =\n\t\t\t\tpreviousSettingNode?.setting?.commaOffset;\n\n\t\t\t/* If there is a previous setting and it does not has comma then add it */\n\t\t\tif (\n\t\t\t\tpreviousSettingNode &&\n\t\t\t\tpreviousSettingCommaOffset === undefined\n\t\t\t) {\n\t\t\t\tedits.push({\n\t\t\t\t\toffset: previousSettingNode.endOffset,\n\t\t\t\t\tlength: 0,\n\t\t\t\t\tcontent: \",\",\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst isPreviouisSettingIncludesComment =\n\t\t\t\tpreviousSettingCommaOffset !== undefined &&\n\t\t\t\tpreviousSettingCommaOffset > node.endOffset;\n\t\t\tedits.push({\n\t\t\t\toffset: isPreviouisSettingIncludesComment\n\t\t\t\t\t? previousSettingCommaOffset + 1\n\t\t\t\t\t: node.endOffset,\n\t\t\t\tlength: 0,\n\t\t\t\tcontent: nextSettingNode\n\t\t\t\t\t? eol + newProperty + \",\"\n\t\t\t\t\t: eol + newProperty,\n\t\t\t});\n\t\t}\n\n\t\treturn edits;\n\t} else {\n\t\t/* Insert before a setting */\n\t\tif (node.setting) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\toffset: node.startOffset,\n\t\t\t\t\tlength: 0,\n\t\t\t\t\tcontent: newProperty + \",\",\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\n\t\t/* Insert before a comment */\n\t\tconst content =\n\t\t\t(tree[location.index - 1] &&\n\t\t\t!tree[location.index - 1].setting /* previous node is comment */\n\t\t\t\t? eol\n\t\t\t\t: \"\") +\n\t\t\tnewProperty +\n\t\t\t(findNextSettingNode(location.index, tree) ? \",\" : \"\") +\n\t\t\teol;\n\t\treturn [{ offset: node.startOffset, length: 0, content }];\n\t}\n}\n\nfunction findSettingNode(key: string, tree: INode[]): INode | undefined {\n\treturn tree.filter((node) => node.setting?.key === key)[0];\n}\n\nfunction findPreviousSettingNode(\n\tindex: number,\n\ttree: INode[],\n): INode | undefined {\n\tfor (let i = index - 1; i >= 0; i--) {\n\t\tif (tree[i].setting) {\n\t\t\treturn tree[i];\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction findNextSettingNode(index: number, tree: INode[]): INode | undefined {\n\tfor (let i = index + 1; i < tree.length; i++) {\n\t\tif (tree[i].setting) {\n\t\t\treturn tree[i];\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction findNodesBetween(nodes: INode[], from: INode, till: INode): INode[] {\n\tconst fromIndex = nodes.indexOf(from);\n\tconst tillIndex = nodes.indexOf(till);\n\treturn nodes.filter(\n\t\t(node, index) => fromIndex < index && index < tillIndex,\n\t);\n}\n\nfunction findLastMatchingTargetCommentNode(\n\tsourceComments: INode[],\n\ttargetComments: INode[],\n): INode | undefined {\n\tif (sourceComments.length && targetComments.length) {\n\t\tlet index = 0;\n\t\tfor (\n\t\t\t;\n\t\t\tindex < targetComments.length && index < sourceComments.length;\n\t\t\tindex++\n\t\t) {\n\t\t\tif (sourceComments[index].value !== targetComments[index].value) {\n\t\t\t\treturn targetComments[index - 1];\n\t\t\t}\n\t\t}\n\t\treturn targetComments[index - 1];\n\t}\n\treturn undefined;\n}\n\ninterface INode {\n\treadonly startOffset: number;\n\treadonly endOffset: number;\n\treadonly value: string;\n\treadonly setting?: {\n\t\treadonly key: string;\n\t\treadonly commaOffset: number | undefined;\n\t};\n\treadonly comment?: string;\n}\n\nfunction parseSettings(content: string): INode[] {\n\tconst nodes: INode[] = [];\n\tlet hierarchyLevel = -1;\n\tlet startOffset: number;\n\tlet key: string;\n\n\tconst visitor: JSONVisitor = {\n\t\tonObjectBegin: (offset: number) => {\n\t\t\thierarchyLevel++;\n\t\t},\n\t\tonObjectProperty: (name: string, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\t// this is setting key\n\t\t\t\tstartOffset = offset;\n\t\t\t\tkey = name;\n\t\t\t}\n\t\t},\n\t\tonObjectEnd: (offset: number, length: number) => {\n\t\t\thierarchyLevel--;\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonArrayBegin: (offset: number, length: number) => {\n\t\t\thierarchyLevel++;\n\t\t},\n\t\tonArrayEnd: (offset: number, length: number) => {\n\t\t\thierarchyLevel--;\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonLiteralValue: (value: any, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonSeparator: (sep: string, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tif (sep === \",\") {\n\t\t\t\t\tlet index = nodes.length - 1;\n\t\t\t\t\tfor (; index >= 0; index--) {\n\t\t\t\t\t\tif (nodes[index].setting) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst node = nodes[index];\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tnodes.splice(index, 1, {\n\t\t\t\t\t\t\tstartOffset: node.startOffset,\n\t\t\t\t\t\t\tendOffset: node.endOffset,\n\t\t\t\t\t\t\tvalue: node.value,\n\t\t\t\t\t\t\tsetting: {\n\t\t\t\t\t\t\t\tkey: node.setting!.key,\n\t\t\t\t\t\t\t\tcommaOffset: offset,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonComment: (offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset: offset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(offset, offset + length),\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t};\n\tvisit(content, visitor);\n\treturn nodes;\n}\n"],
  "mappings": "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",
  "names": ["localContent", "content"]
}
