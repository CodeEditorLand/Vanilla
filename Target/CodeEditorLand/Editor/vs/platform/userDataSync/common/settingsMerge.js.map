{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/settingsMerge.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../base/common/arrays.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { JSONVisitor, parse, visit } from '../../../base/common/json.js';\nimport { applyEdits, setProperty, withFormatting } from '../../../base/common/jsonEdit.js';\nimport { Edit, FormattingOptions, getEOL } from '../../../base/common/jsonFormatter.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport * as contentUtil from './content.js';\nimport { getDisallowedIgnoredSettings, IConflictSetting } from './userDataSync.js';\n\nexport interface IMergeResult {\n\tlocalContent: string | null;\n\tremoteContent: string | null;\n\thasConflicts: boolean;\n\tconflictsSettings: IConflictSetting[];\n}\n\nexport function getIgnoredSettings(defaultIgnoredSettings: string[], configurationService: IConfigurationService, settingsContent?: string): string[] {\n\tlet value: ReadonlyArray<string> = [];\n\tif (settingsContent) {\n\t\tvalue = getIgnoredSettingsFromContent(settingsContent);\n\t} else {\n\t\tvalue = getIgnoredSettingsFromConfig(configurationService);\n\t}\n\tconst added: string[] = [], removed: string[] = [...getDisallowedIgnoredSettings()];\n\tif (Array.isArray(value)) {\n\t\tfor (const key of value) {\n\t\t\tif (key.startsWith('-')) {\n\t\t\t\tremoved.push(key.substring(1));\n\t\t\t} else {\n\t\t\t\tadded.push(key);\n\t\t\t}\n\t\t}\n\t}\n\treturn distinct([...defaultIgnoredSettings, ...added,].filter(setting => !removed.includes(setting)));\n}\n\nfunction getIgnoredSettingsFromConfig(configurationService: IConfigurationService): ReadonlyArray<string> {\n\tlet userValue = configurationService.inspect<string[]>('settingsSync.ignoredSettings').userValue;\n\tif (userValue !== undefined) {\n\t\treturn userValue;\n\t}\n\tuserValue = configurationService.inspect<string[]>('sync.ignoredSettings').userValue;\n\tif (userValue !== undefined) {\n\t\treturn userValue;\n\t}\n\treturn configurationService.getValue<string[]>('settingsSync.ignoredSettings') || [];\n}\n\nfunction getIgnoredSettingsFromContent(settingsContent: string): string[] {\n\tconst parsed = parse(settingsContent);\n\treturn parsed ? parsed['settingsSync.ignoredSettings'] || parsed['sync.ignoredSettings'] || [] : [];\n}\n\nexport function removeComments(content: string, formattingOptions: FormattingOptions): string {\n\tconst source = parse(content) || {};\n\tlet result = '{}';\n\tfor (const key of Object.keys(source)) {\n\t\tconst edits = setProperty(result, [key], source[key], formattingOptions);\n\t\tresult = applyEdits(result, edits);\n\t}\n\treturn result;\n}\n\nexport function updateIgnoredSettings(targetContent: string, sourceContent: string, ignoredSettings: string[], formattingOptions: FormattingOptions): string {\n\tif (ignoredSettings.length) {\n\t\tconst sourceTree = parseSettings(sourceContent);\n\t\tconst source = parse(sourceContent) || {};\n\t\tconst target = parse(targetContent);\n\t\tif (!target) {\n\t\t\treturn targetContent;\n\t\t}\n\t\tconst settingsToAdd: INode[] = [];\n\t\tfor (const key of ignoredSettings) {\n\t\t\tconst sourceValue = source[key];\n\t\t\tconst targetValue = target[key];\n\n\t\t\t// Remove in target\n\t\t\tif (sourceValue === undefined) {\n\t\t\t\ttargetContent = contentUtil.edit(targetContent, [key], undefined, formattingOptions);\n\t\t\t}\n\n\t\t\t// Update in target\n\t\t\telse if (targetValue !== undefined) {\n\t\t\t\ttargetContent = contentUtil.edit(targetContent, [key], sourceValue, formattingOptions);\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tsettingsToAdd.push(findSettingNode(key, sourceTree)!);\n\t\t\t}\n\t\t}\n\n\t\tsettingsToAdd.sort((a, b) => a.startOffset - b.startOffset);\n\t\tsettingsToAdd.forEach(s => targetContent = addSetting(s.setting!.key, sourceContent, targetContent, formattingOptions));\n\t}\n\treturn targetContent;\n}\n\nexport function merge(originalLocalContent: string, originalRemoteContent: string, baseContent: string | null, ignoredSettings: string[], resolvedConflicts: { key: string; value: any | undefined }[], formattingOptions: FormattingOptions): IMergeResult {\n\n\tconst localContentWithoutIgnoredSettings = updateIgnoredSettings(originalLocalContent, originalRemoteContent, ignoredSettings, formattingOptions);\n\tconst localForwarded = baseContent !== localContentWithoutIgnoredSettings;\n\tconst remoteForwarded = baseContent !== originalRemoteContent;\n\n\t/* no changes */\n\tif (!localForwarded && !remoteForwarded) {\n\t\treturn { conflictsSettings: [], localContent: null, remoteContent: null, hasConflicts: false };\n\t}\n\n\t/* local has changed and remote has not */\n\tif (localForwarded && !remoteForwarded) {\n\t\treturn { conflictsSettings: [], localContent: null, remoteContent: localContentWithoutIgnoredSettings, hasConflicts: false };\n\t}\n\n\t/* remote has changed and local has not */\n\tif (remoteForwarded && !localForwarded) {\n\t\treturn { conflictsSettings: [], localContent: updateIgnoredSettings(originalRemoteContent, originalLocalContent, ignoredSettings, formattingOptions), remoteContent: null, hasConflicts: false };\n\t}\n\n\t/* local is empty and not synced before */\n\tif (baseContent === null && isEmpty(originalLocalContent)) {\n\t\tconst localContent = areSame(originalLocalContent, originalRemoteContent, ignoredSettings) ? null : updateIgnoredSettings(originalRemoteContent, originalLocalContent, ignoredSettings, formattingOptions);\n\t\treturn { conflictsSettings: [], localContent, remoteContent: null, hasConflicts: false };\n\t}\n\n\t/* remote and local has changed */\n\tlet localContent = originalLocalContent;\n\tlet remoteContent = originalRemoteContent;\n\tconst local = parse(originalLocalContent);\n\tconst remote = parse(originalRemoteContent);\n\tconst base = baseContent ? parse(baseContent) : null;\n\n\tconst ignored = ignoredSettings.reduce((set, key) => { set.add(key); return set; }, new Set<string>());\n\tconst localToRemote = compare(local, remote, ignored);\n\tconst baseToLocal = compare(base, local, ignored);\n\tconst baseToRemote = compare(base, remote, ignored);\n\n\tconst conflicts: Map<string, IConflictSetting> = new Map<string, IConflictSetting>();\n\tconst handledConflicts: Set<string> = new Set<string>();\n\tconst handleConflict = (conflictKey: string): void => {\n\t\thandledConflicts.add(conflictKey);\n\t\tconst resolvedConflict = resolvedConflicts.filter(({ key }) => key === conflictKey)[0];\n\t\tif (resolvedConflict) {\n\t\t\tlocalContent = contentUtil.edit(localContent, [conflictKey], resolvedConflict.value, formattingOptions);\n\t\t\tremoteContent = contentUtil.edit(remoteContent, [conflictKey], resolvedConflict.value, formattingOptions);\n\t\t} else {\n\t\t\tconflicts.set(conflictKey, { key: conflictKey, localValue: local[conflictKey], remoteValue: remote[conflictKey] });\n\t\t}\n\t};\n\n\t// Removed settings in Local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Conflict - Got updated in remote.\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\thandleConflict(key);\n\t\t}\n\t\t// Also remove in remote\n\t\telse {\n\t\t\tremoteContent = contentUtil.edit(remoteContent, [key], undefined, formattingOptions);\n\t\t}\n\t}\n\n\t// Removed settings in Remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Conflict - Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\thandleConflict(key);\n\t\t}\n\t\t// Also remove in locals\n\t\telse {\n\t\t\tlocalContent = contentUtil.edit(localContent, [key], undefined, formattingOptions);\n\t\t}\n\t}\n\n\t// Updated settings in Local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteContent = contentUtil.edit(remoteContent, [key], local[key], formattingOptions);\n\t\t}\n\t}\n\n\t// Updated settings in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tlocalContent = contentUtil.edit(localContent, [key], remote[key], formattingOptions);\n\t\t}\n\t}\n\n\t// Added settings in Local\n\tfor (const key of baseToLocal.added.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in remote\n\t\tif (baseToRemote.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteContent = addSetting(key, localContent, remoteContent, formattingOptions);\n\t\t}\n\t}\n\n\t// Added settings in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tif (handledConflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in local\n\t\tif (baseToLocal.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\thandleConflict(key);\n\t\t\t}\n\t\t} else {\n\t\t\tlocalContent = addSetting(key, remoteContent, localContent, formattingOptions);\n\t\t}\n\t}\n\n\tconst hasConflicts = conflicts.size > 0 || !areSame(localContent, remoteContent, ignoredSettings);\n\tconst hasLocalChanged = hasConflicts || !areSame(localContent, originalLocalContent, []);\n\tconst hasRemoteChanged = hasConflicts || !areSame(remoteContent, originalRemoteContent, []);\n\treturn { localContent: hasLocalChanged ? localContent : null, remoteContent: hasRemoteChanged ? remoteContent : null, conflictsSettings: [...conflicts.values()], hasConflicts };\n}\n\nfunction areSame(localContent: string, remoteContent: string, ignoredSettings: string[]): boolean {\n\tif (localContent === remoteContent) {\n\t\treturn true;\n\t}\n\n\tconst local = parse(localContent);\n\tconst remote = parse(remoteContent);\n\tconst ignored = ignoredSettings.reduce((set, key) => { set.add(key); return set; }, new Set<string>());\n\tconst localTree = parseSettings(localContent).filter(node => !(node.setting && ignored.has(node.setting.key)));\n\tconst remoteTree = parseSettings(remoteContent).filter(node => !(node.setting && ignored.has(node.setting.key)));\n\n\tif (localTree.length !== remoteTree.length) {\n\t\treturn false;\n\t}\n\n\tfor (let index = 0; index < localTree.length; index++) {\n\t\tconst localNode = localTree[index];\n\t\tconst remoteNode = remoteTree[index];\n\t\tif (localNode.setting && remoteNode.setting) {\n\t\t\tif (localNode.setting.key !== remoteNode.setting.key) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!objects.equals(local[localNode.setting.key], remote[localNode.setting.key])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!localNode.setting && !remoteNode.setting) {\n\t\t\tif (localNode.value !== remoteNode.value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function isEmpty(content: string): boolean {\n\tif (content) {\n\t\tconst nodes = parseSettings(content);\n\t\treturn nodes.length === 0;\n\t}\n\treturn true;\n}\n\nfunction compare(from: IStringDictionary<any> | null, to: IStringDictionary<any>, ignored: Set<string>): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = from ? Object.keys(from).filter(key => !ignored.has(key)) : [];\n\tconst toKeys = Object.keys(to).filter(key => !ignored.has(key));\n\tconst added = toKeys.filter(key => !fromKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => !toKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tif (from) {\n\t\tfor (const key of fromKeys) {\n\t\t\tif (removed.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst value1 = from[key];\n\t\t\tconst value2 = to[key];\n\t\t\tif (!objects.equals(value1, value2)) {\n\t\t\t\tupdated.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nexport function addSetting(key: string, sourceContent: string, targetContent: string, formattingOptions: FormattingOptions): string {\n\tconst source = parse(sourceContent);\n\tconst sourceTree = parseSettings(sourceContent);\n\tconst targetTree = parseSettings(targetContent);\n\tconst insertLocation = getInsertLocation(key, sourceTree, targetTree);\n\treturn insertAtLocation(targetContent, key, source[key], insertLocation, targetTree, formattingOptions);\n}\n\ninterface InsertLocation {\n\tindex: number;\n\tinsertAfter: boolean;\n}\n\nfunction getInsertLocation(key: string, sourceTree: INode[], targetTree: INode[]): InsertLocation {\n\n\tconst sourceNodeIndex = sourceTree.findIndex(node => node.setting?.key === key);\n\n\tconst sourcePreviousNode: INode = sourceTree[sourceNodeIndex - 1];\n\tif (sourcePreviousNode) {\n\t\t/*\n\t\t\tPrevious node in source is a setting.\n\t\t\tFind the same setting in the target.\n\t\t\tInsert it after that setting\n\t\t*/\n\t\tif (sourcePreviousNode.setting) {\n\t\t\tconst targetPreviousSetting = findSettingNode(sourcePreviousNode.setting.key, targetTree);\n\t\t\tif (targetPreviousSetting) {\n\t\t\t\t/* Insert after target's previous setting */\n\t\t\t\treturn { index: targetTree.indexOf(targetPreviousSetting), insertAfter: true };\n\t\t\t}\n\t\t}\n\t\t/* Previous node in source is a comment */\n\t\telse {\n\t\t\tconst sourcePreviousSettingNode = findPreviousSettingNode(sourceNodeIndex, sourceTree);\n\t\t\t/*\n\t\t\t\tSource has a setting defined before the setting to be added.\n\t\t\t\tFind the same previous setting in the target.\n\t\t\t\tIf found, insert before its next setting so that comments are retrieved.\n\t\t\t\tOtherwise, insert at the end.\n\t\t\t*/\n\t\t\tif (sourcePreviousSettingNode) {\n\t\t\t\tconst targetPreviousSetting = findSettingNode(sourcePreviousSettingNode.setting!.key, targetTree);\n\t\t\t\tif (targetPreviousSetting) {\n\t\t\t\t\tconst targetNextSetting = findNextSettingNode(targetTree.indexOf(targetPreviousSetting), targetTree);\n\t\t\t\t\tconst sourceCommentNodes = findNodesBetween(sourceTree, sourcePreviousSettingNode, sourceTree[sourceNodeIndex]);\n\t\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(targetTree, targetPreviousSetting, targetNextSetting);\n\t\t\t\t\t\tconst targetCommentNode = findLastMatchingTargetCommentNode(sourceCommentNodes, targetCommentNodes);\n\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetCommentNode), insertAfter: true }; /* Insert after comment */\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetNextSetting), insertAfter: false }; /* Insert before target next setting */\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(targetTree, targetPreviousSetting, targetTree[targetTree.length - 1]);\n\t\t\t\t\t\tconst targetCommentNode = findLastMatchingTargetCommentNode(sourceCommentNodes, targetCommentNodes);\n\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetCommentNode), insertAfter: true }; /* Insert after comment */\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn { index: targetTree.length - 1, insertAfter: true }; /* Insert at the end */\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst sourceNextNode = sourceTree[sourceNodeIndex + 1];\n\t\tif (sourceNextNode) {\n\t\t\t/*\n\t\t\t\tNext node in source is a setting.\n\t\t\t\tFind the same setting in the target.\n\t\t\t\tInsert it before that setting\n\t\t\t*/\n\t\t\tif (sourceNextNode.setting) {\n\t\t\t\tconst targetNextSetting = findSettingNode(sourceNextNode.setting.key, targetTree);\n\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t/* Insert before target's next setting */\n\t\t\t\t\treturn { index: targetTree.indexOf(targetNextSetting), insertAfter: false };\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* Next node in source is a comment */\n\t\t\telse {\n\t\t\t\tconst sourceNextSettingNode = findNextSettingNode(sourceNodeIndex, sourceTree);\n\t\t\t\t/*\n\t\t\t\t\tSource has a setting defined after the setting to be added.\n\t\t\t\t\tFind the same next setting in the target.\n\t\t\t\t\tIf found, insert after its previous setting so that comments are retrieved.\n\t\t\t\t\tOtherwise, insert at the beginning.\n\t\t\t\t*/\n\t\t\t\tif (sourceNextSettingNode) {\n\t\t\t\t\tconst targetNextSetting = findSettingNode(sourceNextSettingNode.setting!.key, targetTree);\n\t\t\t\t\tif (targetNextSetting) {\n\t\t\t\t\t\tconst targetPreviousSetting = findPreviousSettingNode(targetTree.indexOf(targetNextSetting), targetTree);\n\t\t\t\t\t\tconst sourceCommentNodes = findNodesBetween(sourceTree, sourceTree[sourceNodeIndex], sourceNextSettingNode);\n\t\t\t\t\t\tif (targetPreviousSetting) {\n\t\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(targetTree, targetPreviousSetting, targetNextSetting);\n\t\t\t\t\t\t\tconst targetCommentNode = findLastMatchingTargetCommentNode(sourceCommentNodes.reverse(), targetCommentNodes.reverse());\n\t\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetCommentNode), insertAfter: false }; /* Insert before comment */\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetPreviousSetting), insertAfter: true }; /* Insert after target previous setting */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst targetCommentNodes = findNodesBetween(targetTree, targetTree[0], targetNextSetting);\n\t\t\t\t\t\t\tconst targetCommentNode = findLastMatchingTargetCommentNode(sourceCommentNodes.reverse(), targetCommentNodes.reverse());\n\t\t\t\t\t\t\tif (targetCommentNode) {\n\t\t\t\t\t\t\t\treturn { index: targetTree.indexOf(targetCommentNode), insertAfter: false }; /* Insert before comment */\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn { index: 0, insertAfter: false }; /* Insert at the beginning */\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/* Insert at the end */\n\treturn { index: targetTree.length - 1, insertAfter: true };\n}\n\nfunction insertAtLocation(content: string, key: string, value: any, location: InsertLocation, tree: INode[], formattingOptions: FormattingOptions): string {\n\tlet edits: Edit[];\n\t/* Insert at the end */\n\tif (location.index === -1) {\n\t\tedits = setProperty(content, [key], value, formattingOptions);\n\t} else {\n\t\tedits = getEditToInsertAtLocation(content, key, value, location, tree, formattingOptions).map(edit => withFormatting(content, edit, formattingOptions)[0]);\n\t}\n\treturn applyEdits(content, edits);\n}\n\nfunction getEditToInsertAtLocation(content: string, key: string, value: any, location: InsertLocation, tree: INode[], formattingOptions: FormattingOptions): Edit[] {\n\tconst newProperty = `${JSON.stringify(key)}: ${JSON.stringify(value)}`;\n\tconst eol = getEOL(formattingOptions, content);\n\tconst node = tree[location.index];\n\n\tif (location.insertAfter) {\n\n\t\tconst edits: Edit[] = [];\n\n\t\t/* Insert after a setting */\n\t\tif (node.setting) {\n\t\t\tedits.push({ offset: node.endOffset, length: 0, content: ',' + newProperty });\n\t\t}\n\n\t\t/* Insert after a comment */\n\t\telse {\n\n\t\t\tconst nextSettingNode = findNextSettingNode(location.index, tree);\n\t\t\tconst previousSettingNode = findPreviousSettingNode(location.index, tree);\n\t\t\tconst previousSettingCommaOffset = previousSettingNode?.setting?.commaOffset;\n\n\t\t\t/* If there is a previous setting and it does not has comma then add it */\n\t\t\tif (previousSettingNode && previousSettingCommaOffset === undefined) {\n\t\t\t\tedits.push({ offset: previousSettingNode.endOffset, length: 0, content: ',' });\n\t\t\t}\n\n\t\t\tconst isPreviouisSettingIncludesComment = previousSettingCommaOffset !== undefined && previousSettingCommaOffset > node.endOffset;\n\t\t\tedits.push({\n\t\t\t\toffset: isPreviouisSettingIncludesComment ? previousSettingCommaOffset + 1 : node.endOffset,\n\t\t\t\tlength: 0,\n\t\t\t\tcontent: nextSettingNode ? eol + newProperty + ',' : eol + newProperty\n\t\t\t});\n\t\t}\n\n\n\t\treturn edits;\n\t}\n\n\telse {\n\n\t\t/* Insert before a setting */\n\t\tif (node.setting) {\n\t\t\treturn [{ offset: node.startOffset, length: 0, content: newProperty + ',' }];\n\t\t}\n\n\t\t/* Insert before a comment */\n\t\tconst content = (tree[location.index - 1] && !tree[location.index - 1].setting /* previous node is comment */ ? eol : '')\n\t\t\t+ newProperty\n\t\t\t+ (findNextSettingNode(location.index, tree) ? ',' : '')\n\t\t\t+ eol;\n\t\treturn [{ offset: node.startOffset, length: 0, content }];\n\t}\n\n}\n\nfunction findSettingNode(key: string, tree: INode[]): INode | undefined {\n\treturn tree.filter(node => node.setting?.key === key)[0];\n}\n\nfunction findPreviousSettingNode(index: number, tree: INode[]): INode | undefined {\n\tfor (let i = index - 1; i >= 0; i--) {\n\t\tif (tree[i].setting) {\n\t\t\treturn tree[i];\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction findNextSettingNode(index: number, tree: INode[]): INode | undefined {\n\tfor (let i = index + 1; i < tree.length; i++) {\n\t\tif (tree[i].setting) {\n\t\t\treturn tree[i];\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction findNodesBetween(nodes: INode[], from: INode, till: INode): INode[] {\n\tconst fromIndex = nodes.indexOf(from);\n\tconst tillIndex = nodes.indexOf(till);\n\treturn nodes.filter((node, index) => fromIndex < index && index < tillIndex);\n}\n\nfunction findLastMatchingTargetCommentNode(sourceComments: INode[], targetComments: INode[]): INode | undefined {\n\tif (sourceComments.length && targetComments.length) {\n\t\tlet index = 0;\n\t\tfor (; index < targetComments.length && index < sourceComments.length; index++) {\n\t\t\tif (sourceComments[index].value !== targetComments[index].value) {\n\t\t\t\treturn targetComments[index - 1];\n\t\t\t}\n\t\t}\n\t\treturn targetComments[index - 1];\n\t}\n\treturn undefined;\n}\n\ninterface INode {\n\treadonly startOffset: number;\n\treadonly endOffset: number;\n\treadonly value: string;\n\treadonly setting?: {\n\t\treadonly key: string;\n\t\treadonly commaOffset: number | undefined;\n\t};\n\treadonly comment?: string;\n}\n\nfunction parseSettings(content: string): INode[] {\n\tconst nodes: INode[] = [];\n\tlet hierarchyLevel = -1;\n\tlet startOffset: number;\n\tlet key: string;\n\n\tconst visitor: JSONVisitor = {\n\t\tonObjectBegin: (offset: number) => {\n\t\t\thierarchyLevel++;\n\t\t},\n\t\tonObjectProperty: (name: string, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\t// this is setting key\n\t\t\t\tstartOffset = offset;\n\t\t\t\tkey = name;\n\t\t\t}\n\t\t},\n\t\tonObjectEnd: (offset: number, length: number) => {\n\t\t\thierarchyLevel--;\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonArrayBegin: (offset: number, length: number) => {\n\t\t\thierarchyLevel++;\n\t\t},\n\t\tonArrayEnd: (offset: number, length: number) => {\n\t\t\thierarchyLevel--;\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonLiteralValue: (value: any, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(startOffset, offset + length),\n\t\t\t\t\tsetting: {\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommaOffset: undefined\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonSeparator: (sep: string, offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tif (sep === ',') {\n\t\t\t\t\tlet index = nodes.length - 1;\n\t\t\t\t\tfor (; index >= 0; index--) {\n\t\t\t\t\t\tif (nodes[index].setting) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst node = nodes[index];\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tnodes.splice(index, 1, {\n\t\t\t\t\t\t\tstartOffset: node.startOffset,\n\t\t\t\t\t\t\tendOffset: node.endOffset,\n\t\t\t\t\t\t\tvalue: node.value,\n\t\t\t\t\t\t\tsetting: {\n\t\t\t\t\t\t\t\tkey: node.setting!.key,\n\t\t\t\t\t\t\t\tcommaOffset: offset\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonComment: (offset: number, length: number) => {\n\t\t\tif (hierarchyLevel === 0) {\n\t\t\t\tnodes.push({\n\t\t\t\t\tstartOffset: offset,\n\t\t\t\t\tendOffset: offset + length,\n\t\t\t\t\tvalue: content.substring(offset, offset + length),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\tvisit(content, visitor);\n\treturn nodes;\n}\n"],
  "mappings": "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",
  "names": ["localContent", "content"]
}
