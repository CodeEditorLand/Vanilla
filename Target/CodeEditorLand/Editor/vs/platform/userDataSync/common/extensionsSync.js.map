{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/extensionsSync.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { getErrorMessage } from '../../../base/common/errors.js';\nimport { Event } from '../../../base/common/event.js';\nimport { toFormattedString } from '../../../base/common/jsonFormatter.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { compare } from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { GlobalExtensionEnablementService } from '../../extensionManagement/common/extensionEnablementService.js';\nimport { IExtensionGalleryService, IExtensionManagementService, IGlobalExtensionEnablementService, ILocalExtension, ExtensionManagementError, ExtensionManagementErrorCode, IGalleryExtension, DISABLED_EXTENSIONS_STORAGE_PATH, EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT, EXTENSION_INSTALL_SOURCE_CONTEXT, InstallExtensionInfo, ExtensionInstallSource } from '../../extensionManagement/common/extensionManagement.js';\nimport { areSameExtensions } from '../../extensionManagement/common/extensionManagementUtil.js';\nimport { ExtensionStorageService, IExtensionStorageService } from '../../extensionManagement/common/extensionStorage.js';\nimport { ExtensionType, IExtensionIdentifier, isApplicationScopedExtension } from '../../extensions/common/extensions.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../instantiation/common/serviceCollection.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { AbstractInitializer, AbstractSynchroniser, getSyncResourceLogLabel, IAcceptResult, IMergeResult, IResourcePreview } from './abstractSynchronizer.js';\nimport { IMergeResult as IExtensionMergeResult, merge } from './extensionsMerge.js';\nimport { IIgnoredExtensionsManagementService } from './ignoredExtensions.js';\nimport { Change, IRemoteUserData, ISyncData, ISyncExtension, IUserDataSyncLocalStoreService, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncStoreService, SyncResource, USER_DATA_SYNC_SCHEME, ILocalSyncExtension } from './userDataSync.js';\nimport { IUserDataProfileStorageService } from '../../userDataProfile/common/userDataProfileStorageService.js';\n\ntype IExtensionResourceMergeResult = IAcceptResult & IExtensionMergeResult;\n\ninterface IExtensionResourcePreview extends IResourcePreview {\n\treadonly localExtensions: ILocalSyncExtension[];\n\treadonly remoteExtensions: ISyncExtension[] | null;\n\treadonly skippedExtensions: ISyncExtension[];\n\treadonly builtinExtensions: IExtensionIdentifier[] | null;\n\treadonly previewResult: IExtensionResourceMergeResult;\n}\n\ninterface ILastSyncUserData extends IRemoteUserData {\n\tskippedExtensions: ISyncExtension[] | undefined;\n\tbuiltinExtensions: IExtensionIdentifier[] | undefined;\n}\n\nasync function parseAndMigrateExtensions(syncData: ISyncData, extensionManagementService: IExtensionManagementService): Promise<ISyncExtension[]> {\n\tconst extensions = JSON.parse(syncData.content);\n\tif (syncData.version === 1\n\t\t|| syncData.version === 2\n\t) {\n\t\tconst builtinExtensions = (await extensionManagementService.getInstalled(ExtensionType.System)).filter(e => e.isBuiltin);\n\t\tfor (const extension of extensions) {\n\t\t\t// #region Migration from v1 (enabled -> disabled)\n\t\t\tif (syncData.version === 1) {\n\t\t\t\tif ((<any>extension).enabled === false) {\n\t\t\t\t\textension.disabled = true;\n\t\t\t\t}\n\t\t\t\tdelete (<any>extension).enabled;\n\t\t\t}\n\t\t\t// #endregion\n\n\t\t\t// #region Migration from v2 (set installed property on extension)\n\t\t\tif (syncData.version === 2) {\n\t\t\t\tif (builtinExtensions.every(installed => !areSameExtensions(installed.identifier, extension.identifier))) {\n\t\t\t\t\textension.installed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// #endregion\n\t\t}\n\t}\n\treturn extensions;\n}\n\nexport function parseExtensions(syncData: ISyncData): ISyncExtension[] {\n\treturn JSON.parse(syncData.content);\n}\n\nexport function stringify(extensions: ISyncExtension[], format: boolean): string {\n\textensions.sort((e1, e2) => {\n\t\tif (!e1.identifier.uuid && e2.identifier.uuid) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (e1.identifier.uuid && !e2.identifier.uuid) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn compare(e1.identifier.id, e2.identifier.id);\n\t});\n\treturn format ? toFormattedString(extensions, {}) : JSON.stringify(extensions);\n}\n\nexport class ExtensionsSynchroniser extends AbstractSynchroniser implements IUserDataSynchroniser {\n\n\t/*\n\t\tVersion 3 - Introduce installed property to skip installing built in extensions\n\t\tprotected readonly version: number = 3;\n\t*/\n\t/* Version 4: Change settings from `sync.${setting}` to `settingsSync.{setting}` */\n\t/* Version 5: Introduce extension state */\n\t/* Version 6: Added isApplicationScoped property */\n\tprotected readonly version: number = 6;\n\n\tprivate readonly previewResource: URI = this.extUri.joinPath(this.syncPreviewFolder, 'extensions.json');\n\tprivate readonly baseResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' });\n\tprivate readonly localResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' });\n\tprivate readonly remoteResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' });\n\tprivate readonly acceptedResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' });\n\n\tprivate readonly localExtensionsProvider: LocalExtensionsProvider;\n\n\tconstructor(\n\t\t// profileLocation changes for default profile\n\t\tprofile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IIgnoredExtensionsManagementService private readonly ignoredExtensionsManagementService: IIgnoredExtensionsManagementService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IExtensionStorageService extensionStorageService: IExtensionStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IUserDataProfileStorageService userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper({ syncResource: SyncResource.Extensions, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t\tthis.localExtensionsProvider = this.instantiationService.createInstance(LocalExtensionsProvider);\n\t\tthis._register(\n\t\t\tEvent.any<any>(\n\t\t\t\tEvent.filter(this.extensionManagementService.onDidInstallExtensions, (e => e.some(({ local }) => !!local))),\n\t\t\t\tEvent.filter(this.extensionManagementService.onDidUninstallExtension, (e => !e.error)),\n\t\t\t\tEvent.filter(userDataProfileStorageService.onDidChange, e => e.valueChanges.some(({ profile, changes }) => this.syncResource.profile.id === profile.id && changes.some(change => change.key === DISABLED_EXTENSIONS_STORAGE_PATH))),\n\t\t\t\textensionStorageService.onDidChangeExtensionStorageToSync)(() => this.triggerLocalChange()));\n\t}\n\n\tprotected async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: ILastSyncUserData | null): Promise<IExtensionResourcePreview[]> {\n\t\tconst remoteExtensions = remoteUserData.syncData ? await parseAndMigrateExtensions(remoteUserData.syncData, this.extensionManagementService) : null;\n\t\tconst skippedExtensions = lastSyncUserData?.skippedExtensions ?? [];\n\t\tconst builtinExtensions = lastSyncUserData?.builtinExtensions ?? null;\n\t\tconst lastSyncExtensions = lastSyncUserData?.syncData ? await parseAndMigrateExtensions(lastSyncUserData.syncData, this.extensionManagementService) : null;\n\n\t\tconst { localExtensions, ignoredExtensions } = await this.localExtensionsProvider.getLocalExtensions(this.syncResource.profile);\n\n\t\tif (remoteExtensions) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Merging remote extensions with local extensions...`);\n\t\t} else {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Remote extensions does not exist. Synchronizing extensions for the first time.`);\n\t\t}\n\n\t\tconst { local, remote } = merge(localExtensions, remoteExtensions, lastSyncExtensions, skippedExtensions, ignoredExtensions, builtinExtensions);\n\t\tconst previewResult: IExtensionResourceMergeResult = {\n\t\t\tlocal, remote,\n\t\t\tcontent: this.getPreviewContent(localExtensions, local.added, local.updated, local.removed),\n\t\t\tlocalChange: local.added.length > 0 || local.removed.length > 0 || local.updated.length > 0 ? Change.Modified : Change.None,\n\t\t\tremoteChange: remote !== null ? Change.Modified : Change.None,\n\t\t};\n\n\t\tconst localContent = this.stringify(localExtensions, false);\n\t\treturn [{\n\t\t\tskippedExtensions,\n\t\t\tbuiltinExtensions,\n\t\t\tbaseResource: this.baseResource,\n\t\t\tbaseContent: lastSyncExtensions ? this.stringify(lastSyncExtensions, false) : localContent,\n\t\t\tlocalResource: this.localResource,\n\t\t\tlocalContent,\n\t\t\tlocalExtensions,\n\t\t\tremoteResource: this.remoteResource,\n\t\t\tremoteExtensions,\n\t\t\tremoteContent: remoteExtensions ? this.stringify(remoteExtensions, false) : null,\n\t\t\tpreviewResource: this.previewResource,\n\t\t\tpreviewResult,\n\t\t\tlocalChange: previewResult.localChange,\n\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\tacceptedResource: this.acceptedResource,\n\t\t}];\n\t}\n\n\tprotected async hasRemoteChanged(lastSyncUserData: ILastSyncUserData): Promise<boolean> {\n\t\tconst lastSyncExtensions: ISyncExtension[] | null = lastSyncUserData.syncData ? await parseAndMigrateExtensions(lastSyncUserData.syncData, this.extensionManagementService) : null;\n\t\tconst { localExtensions, ignoredExtensions } = await this.localExtensionsProvider.getLocalExtensions(this.syncResource.profile);\n\t\tconst { remote } = merge(localExtensions, lastSyncExtensions, lastSyncExtensions, lastSyncUserData.skippedExtensions || [], ignoredExtensions, lastSyncUserData.builtinExtensions || []);\n\t\treturn remote !== null;\n\t}\n\n\tprivate getPreviewContent(localExtensions: ISyncExtension[], added: ISyncExtension[], updated: ISyncExtension[], removed: IExtensionIdentifier[]): string {\n\t\tconst preview: ISyncExtension[] = [...added, ...updated];\n\n\t\tconst idsOrUUIDs: Set<string> = new Set<string>();\n\t\tconst addIdentifier = (identifier: IExtensionIdentifier) => {\n\t\t\tidsOrUUIDs.add(identifier.id.toLowerCase());\n\t\t\tif (identifier.uuid) {\n\t\t\t\tidsOrUUIDs.add(identifier.uuid);\n\t\t\t}\n\t\t};\n\t\tpreview.forEach(({ identifier }) => addIdentifier(identifier));\n\t\tremoved.forEach(addIdentifier);\n\n\t\tfor (const localExtension of localExtensions) {\n\t\t\tif (idsOrUUIDs.has(localExtension.identifier.id.toLowerCase()) || (localExtension.identifier.uuid && idsOrUUIDs.has(localExtension.identifier.uuid))) {\n\t\t\t\t// skip\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpreview.push(localExtension);\n\t\t}\n\n\t\treturn this.stringify(preview, false);\n\t}\n\n\tprotected async getMergeResult(resourcePreview: IExtensionResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\treturn { ...resourcePreview.previewResult, hasConflicts: false };\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: IExtensionResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IExtensionResourceMergeResult> {\n\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqual(resource, this.localResource)) {\n\t\t\treturn this.acceptLocal(resourcePreview);\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqual(resource, this.remoteResource)) {\n\t\t\treturn this.acceptRemote(resourcePreview);\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqual(resource, this.previewResource)) {\n\t\t\treturn resourcePreview.previewResult;\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprivate async acceptLocal(resourcePreview: IExtensionResourcePreview): Promise<IExtensionResourceMergeResult> {\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(undefined, this.syncResource.profile.extensionsResource);\n\t\tconst ignoredExtensions = this.ignoredExtensionsManagementService.getIgnoredExtensions(installedExtensions);\n\t\tconst mergeResult = merge(resourcePreview.localExtensions, null, null, resourcePreview.skippedExtensions, ignoredExtensions, resourcePreview.builtinExtensions);\n\t\tconst { local, remote } = mergeResult;\n\t\treturn {\n\t\t\tcontent: resourcePreview.localContent,\n\t\t\tlocal,\n\t\t\tremote,\n\t\t\tlocalChange: local.added.length > 0 || local.removed.length > 0 || local.updated.length > 0 ? Change.Modified : Change.None,\n\t\t\tremoteChange: remote !== null ? Change.Modified : Change.None,\n\t\t};\n\t}\n\n\tprivate async acceptRemote(resourcePreview: IExtensionResourcePreview): Promise<IExtensionResourceMergeResult> {\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(undefined, this.syncResource.profile.extensionsResource);\n\t\tconst ignoredExtensions = this.ignoredExtensionsManagementService.getIgnoredExtensions(installedExtensions);\n\t\tconst remoteExtensions = resourcePreview.remoteContent ? JSON.parse(resourcePreview.remoteContent) : null;\n\t\tif (remoteExtensions !== null) {\n\t\t\tconst mergeResult = merge(resourcePreview.localExtensions, remoteExtensions, resourcePreview.localExtensions, [], ignoredExtensions, resourcePreview.builtinExtensions);\n\t\t\tconst { local, remote } = mergeResult;\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal,\n\t\t\t\tremote,\n\t\t\t\tlocalChange: local.added.length > 0 || local.removed.length > 0 || local.updated.length > 0 ? Change.Modified : Change.None,\n\t\t\t\tremoteChange: remote !== null ? Change.Modified : Change.None,\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal: { added: [], removed: [], updated: [] },\n\t\t\t\tremote: null,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [IExtensionResourcePreview, IExtensionResourceMergeResult][], force: boolean): Promise<void> {\n\t\tlet { skippedExtensions, builtinExtensions, localExtensions } = resourcePreviews[0][0];\n\t\tconst { local, remote, localChange, remoteChange } = resourcePreviews[0][1];\n\n\t\tif (localChange === Change.None && remoteChange === Change.None) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing extensions.`);\n\t\t}\n\n\t\tif (localChange !== Change.None) {\n\t\t\tawait this.backupLocal(JSON.stringify(localExtensions));\n\t\t\tskippedExtensions = await this.localExtensionsProvider.updateLocalExtensions(local.added, local.removed, local.updated, skippedExtensions, this.syncResource.profile);\n\t\t}\n\n\t\tif (remote) {\n\t\t\t// update remote\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating remote extensions...`);\n\t\t\tconst content = JSON.stringify(remote.all);\n\t\t\tremoteUserData = await this.updateRemoteUserData(content, force ? null : remoteUserData.ref);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated remote extensions.${remote.added.length ? ` Added: ${JSON.stringify(remote.added.map(e => e.identifier.id))}.` : ''}${remote.updated.length ? ` Updated: ${JSON.stringify(remote.updated.map(e => e.identifier.id))}.` : ''}${remote.removed.length ? ` Removed: ${JSON.stringify(remote.removed.map(e => e.identifier.id))}.` : ''}`);\n\t\t}\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\t// update last sync\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized extensions...`);\n\t\t\tbuiltinExtensions = this.computeBuiltinExtensions(localExtensions, builtinExtensions);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData, { skippedExtensions, builtinExtensions });\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized extensions.${skippedExtensions.length ? ` Skipped: ${JSON.stringify(skippedExtensions.map(e => e.identifier.id))}.` : ''}`);\n\t\t}\n\t}\n\n\tprivate computeBuiltinExtensions(localExtensions: ILocalSyncExtension[], previousBuiltinExtensions: IExtensionIdentifier[] | null): IExtensionIdentifier[] {\n\t\tconst localExtensionsSet = new Set<string>();\n\t\tconst builtinExtensions: IExtensionIdentifier[] = [];\n\t\tfor (const localExtension of localExtensions) {\n\t\t\tlocalExtensionsSet.add(localExtension.identifier.id.toLowerCase());\n\t\t\tif (!localExtension.installed) {\n\t\t\t\tbuiltinExtensions.push(localExtension.identifier);\n\t\t\t}\n\t\t}\n\t\tif (previousBuiltinExtensions) {\n\t\t\tfor (const builtinExtension of previousBuiltinExtensions) {\n\t\t\t\t// Add previous builtin extension if it does not exist in local extensions\n\t\t\t\tif (!localExtensionsSet.has(builtinExtension.id.toLowerCase())) {\n\t\t\t\t\tbuiltinExtensions.push(builtinExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn builtinExtensions;\n\t}\n\n\tasync resolveContent(uri: URI): Promise<string | null> {\n\t\tif (this.extUri.isEqual(this.remoteResource, uri)\n\t\t\t|| this.extUri.isEqual(this.baseResource, uri)\n\t\t\t|| this.extUri.isEqual(this.localResource, uri)\n\t\t\t|| this.extUri.isEqual(this.acceptedResource, uri)\n\t\t) {\n\t\t\tconst content = await this.resolvePreviewContent(uri);\n\t\t\treturn content ? this.stringify(JSON.parse(content), true) : content;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate stringify(extensions: ISyncExtension[], format: boolean): string {\n\t\treturn stringify(extensions, format);\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst { localExtensions } = await this.localExtensionsProvider.getLocalExtensions(this.syncResource.profile);\n\t\t\tif (localExtensions.some(e => e.installed || e.disabled)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* ignore error */\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\nexport class LocalExtensionsProvider {\n\n\tconstructor(\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IIgnoredExtensionsManagementService private readonly ignoredExtensionsManagementService: IIgnoredExtensionsManagementService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t) { }\n\n\tasync getLocalExtensions(profile: IUserDataProfile): Promise<{ localExtensions: ILocalSyncExtension[]; ignoredExtensions: string[] }> {\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(undefined, profile.extensionsResource);\n\t\tconst ignoredExtensions = this.ignoredExtensionsManagementService.getIgnoredExtensions(installedExtensions);\n\t\tconst localExtensions = await this.withProfileScopedServices(profile, async (extensionEnablementService, extensionStorageService) => {\n\t\t\tconst disabledExtensions = extensionEnablementService.getDisabledExtensions();\n\t\t\treturn installedExtensions\n\t\t\t\t.map(extension => {\n\t\t\t\t\tconst { identifier, isBuiltin, manifest, preRelease, pinned, isApplicationScoped } = extension;\n\t\t\t\t\tconst syncExntesion: ILocalSyncExtension = { identifier, preRelease, version: manifest.version, pinned: !!pinned };\n\t\t\t\t\tif (isApplicationScoped && !isApplicationScopedExtension(manifest)) {\n\t\t\t\t\t\tsyncExntesion.isApplicationScoped = isApplicationScoped;\n\t\t\t\t\t}\n\t\t\t\t\tif (disabledExtensions.some(disabledExtension => areSameExtensions(disabledExtension, identifier))) {\n\t\t\t\t\t\tsyncExntesion.disabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!isBuiltin) {\n\t\t\t\t\t\tsyncExntesion.installed = true;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst keys = extensionStorageService.getKeysForSync({ id: identifier.id, version: manifest.version });\n\t\t\t\t\t\tif (keys) {\n\t\t\t\t\t\t\tconst extensionStorageState = extensionStorageService.getExtensionState(extension, true) || {};\n\t\t\t\t\t\t\tsyncExntesion.state = Object.keys(extensionStorageState).reduce((state: IStringDictionary<any>, key) => {\n\t\t\t\t\t\t\t\tif (keys.includes(key)) {\n\t\t\t\t\t\t\t\t\tstate[key] = extensionStorageState[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn state;\n\t\t\t\t\t\t\t}, {});\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.info(`${getSyncResourceLogLabel(SyncResource.Extensions, profile)}: Error while parsing extension state`, getErrorMessage(error));\n\t\t\t\t\t}\n\t\t\t\t\treturn syncExntesion;\n\t\t\t\t});\n\t\t});\n\t\treturn { localExtensions, ignoredExtensions };\n\t}\n\n\tasync updateLocalExtensions(added: ISyncExtension[], removed: IExtensionIdentifier[], updated: ISyncExtension[], skippedExtensions: ISyncExtension[], profile: IUserDataProfile): Promise<ISyncExtension[]> {\n\t\tconst syncResourceLogLabel = getSyncResourceLogLabel(SyncResource.Extensions, profile);\n\t\tconst extensionsToInstall: InstallExtensionInfo[] = [];\n\t\tconst syncExtensionsToInstall = new Map<string, ISyncExtension>();\n\t\tconst removeFromSkipped: IExtensionIdentifier[] = [];\n\t\tconst addToSkipped: ISyncExtension[] = [];\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(undefined, profile.extensionsResource);\n\n\t\t// 1. Sync extensions state first so that the storage is flushed and updated in all opened windows\n\t\tif (added.length || updated.length) {\n\t\t\tawait this.withProfileScopedServices(profile, async (extensionEnablementService, extensionStorageService) => {\n\t\t\t\tawait Promises.settled([...added, ...updated].map(async e => {\n\t\t\t\t\tconst installedExtension = installedExtensions.find(installed => areSameExtensions(installed.identifier, e.identifier));\n\n\t\t\t\t\t// Builtin Extension Sync: Enablement & State\n\t\t\t\t\tif (installedExtension && installedExtension.isBuiltin) {\n\t\t\t\t\t\tif (e.state && installedExtension.manifest.version === e.version) {\n\t\t\t\t\t\t\tthis.updateExtensionState(e.state, installedExtension, installedExtension.manifest.version, extensionStorageService);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst isDisabled = extensionEnablementService.getDisabledExtensions().some(disabledExtension => areSameExtensions(disabledExtension, e.identifier));\n\t\t\t\t\t\tif (isDisabled !== !!e.disabled) {\n\t\t\t\t\t\t\tif (e.disabled) {\n\t\t\t\t\t\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Disabling extension...`, e.identifier.id);\n\t\t\t\t\t\t\t\tawait extensionEnablementService.disableExtension(e.identifier);\n\t\t\t\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Disabled extension`, e.identifier.id);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Enabling extension...`, e.identifier.id);\n\t\t\t\t\t\t\t\tawait extensionEnablementService.enableExtension(e.identifier);\n\t\t\t\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Enabled extension`, e.identifier.id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveFromSkipped.push(e.identifier);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// User Extension Sync: Install/Update, Enablement & State\n\t\t\t\t\tconst version = e.pinned ? e.version : undefined;\n\t\t\t\t\tconst extension = (await this.extensionGalleryService.getExtensions([{ ...e.identifier, version, preRelease: version ? undefined : e.preRelease }], CancellationToken.None))[0];\n\n\t\t\t\t\t/* Update extension state only if\n\t\t\t\t\t *\textension is installed and version is same as synced version or\n\t\t\t\t\t *\textension is not installed and installable\n\t\t\t\t\t */\n\t\t\t\t\tif (e.state &&\n\t\t\t\t\t\t(installedExtension ? installedExtension.manifest.version === e.version /* Installed and remote has same version */\n\t\t\t\t\t\t\t: !!extension /* Installable */)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.updateExtensionState(e.state, installedExtension || extension, installedExtension?.manifest.version, extensionStorageService);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (extension) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst isDisabled = extensionEnablementService.getDisabledExtensions().some(disabledExtension => areSameExtensions(disabledExtension, e.identifier));\n\t\t\t\t\t\t\tif (isDisabled !== !!e.disabled) {\n\t\t\t\t\t\t\t\tif (e.disabled) {\n\t\t\t\t\t\t\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Disabling extension...`, e.identifier.id, extension.version);\n\t\t\t\t\t\t\t\t\tawait extensionEnablementService.disableExtension(extension.identifier);\n\t\t\t\t\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Disabled extension`, e.identifier.id, extension.version);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Enabling extension...`, e.identifier.id, extension.version);\n\t\t\t\t\t\t\t\t\tawait extensionEnablementService.enableExtension(extension.identifier);\n\t\t\t\t\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Enabled extension`, e.identifier.id, extension.version);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!installedExtension // Install if the extension does not exist\n\t\t\t\t\t\t\t\t|| installedExtension.preRelease !== e.preRelease // Install if the extension pre-release preference has changed\n\t\t\t\t\t\t\t\t|| installedExtension.pinned !== e.pinned  // Install if the extension pinned preference has changed\n\t\t\t\t\t\t\t\t|| (version && installedExtension.manifest.version !== version)  // Install if the extension version has changed\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (await this.extensionManagementService.canInstall(extension)) {\n\t\t\t\t\t\t\t\t\textensionsToInstall.push({\n\t\t\t\t\t\t\t\t\t\textension, options: {\n\t\t\t\t\t\t\t\t\t\t\tisMachineScoped: false /* set isMachineScoped value to prevent install and sync dialog in web */,\n\t\t\t\t\t\t\t\t\t\t\tdonotIncludePackAndDependencies: true,\n\t\t\t\t\t\t\t\t\t\t\tinstallGivenVersion: e.pinned && !!e.version,\n\t\t\t\t\t\t\t\t\t\t\tpinned: e.pinned,\n\t\t\t\t\t\t\t\t\t\t\tinstallPreReleaseVersion: e.preRelease,\n\t\t\t\t\t\t\t\t\t\t\tprofileLocation: profile.extensionsResource,\n\t\t\t\t\t\t\t\t\t\t\tisApplicationScoped: e.isApplicationScoped,\n\t\t\t\t\t\t\t\t\t\t\tcontext: { [EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT]: true, [EXTENSION_INSTALL_SOURCE_CONTEXT]: ExtensionInstallSource.SETTINGS_SYNC }\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tsyncExtensionsToInstall.set(extension.identifier.id.toLowerCase(), e);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Skipped synchronizing extension because it cannot be installed.`, extension.displayName || extension.identifier.id);\n\t\t\t\t\t\t\t\t\taddToSkipped.push(e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\taddToSkipped.push(e);\n\t\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Skipped synchronizing extension`, extension.displayName || extension.identifier.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\taddToSkipped.push(e);\n\t\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Skipped synchronizing extension because the extension is not found.`, e.identifier.id);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\t\t}\n\n\t\t// 2. Next uninstall the removed extensions\n\t\tif (removed.length) {\n\t\t\tconst extensionsToRemove = installedExtensions.filter(({ identifier, isBuiltin }) => !isBuiltin && removed.some(r => areSameExtensions(identifier, r)));\n\t\t\tawait Promises.settled(extensionsToRemove.map(async extensionToRemove => {\n\t\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Uninstalling local extension...`, extensionToRemove.identifier.id);\n\t\t\t\tawait this.extensionManagementService.uninstall(extensionToRemove, { donotIncludePack: true, donotCheckDependents: true, profileLocation: profile.extensionsResource });\n\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Uninstalled local extension.`, extensionToRemove.identifier.id);\n\t\t\t\tremoveFromSkipped.push(extensionToRemove.identifier);\n\t\t\t}));\n\t\t}\n\n\t\t// 3. Install extensions at the end\n\t\tconst results = await this.extensionManagementService.installGalleryExtensions(extensionsToInstall);\n\t\tfor (const { identifier, local, error, source } of results) {\n\t\t\tconst gallery = source as IGalleryExtension;\n\t\t\tif (local) {\n\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Installed extension.`, identifier.id, gallery.version);\n\t\t\t\tremoveFromSkipped.push(identifier);\n\t\t\t} else {\n\t\t\t\tconst e = syncExtensionsToInstall.get(identifier.id.toLowerCase());\n\t\t\t\tif (e) {\n\t\t\t\t\taddToSkipped.push(e);\n\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Skipped synchronizing extension`, gallery.displayName || gallery.identifier.id);\n\t\t\t\t}\n\t\t\t\tif (error instanceof ExtensionManagementError && [ExtensionManagementErrorCode.Incompatible, ExtensionManagementErrorCode.IncompatibleApi, ExtensionManagementErrorCode.IncompatibleTargetPlatform].includes(error.code)) {\n\t\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Skipped synchronizing extension because the compatible extension is not found.`, gallery.displayName || gallery.identifier.id);\n\t\t\t\t} else if (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst newSkippedExtensions: ISyncExtension[] = [];\n\t\tfor (const skippedExtension of skippedExtensions) {\n\t\t\tif (!removeFromSkipped.some(e => areSameExtensions(e, skippedExtension.identifier))) {\n\t\t\t\tnewSkippedExtensions.push(skippedExtension);\n\t\t\t}\n\t\t}\n\t\tfor (const skippedExtension of addToSkipped) {\n\t\t\tif (!newSkippedExtensions.some(e => areSameExtensions(e.identifier, skippedExtension.identifier))) {\n\t\t\t\tnewSkippedExtensions.push(skippedExtension);\n\t\t\t}\n\t\t}\n\t\treturn newSkippedExtensions;\n\t}\n\n\tprivate updateExtensionState(state: IStringDictionary<any>, extension: ILocalExtension | IGalleryExtension, version: string | undefined, extensionStorageService: IExtensionStorageService): void {\n\t\tconst extensionState = extensionStorageService.getExtensionState(extension, true) || {};\n\t\tconst keys = version ? extensionStorageService.getKeysForSync({ id: extension.identifier.id, version }) : undefined;\n\t\tif (keys) {\n\t\t\tkeys.forEach(key => { extensionState[key] = state[key]; });\n\t\t} else {\n\t\t\tObject.keys(state).forEach(key => extensionState[key] = state[key]);\n\t\t}\n\t\textensionStorageService.setExtensionState(extension, extensionState, true);\n\t}\n\n\tprivate async withProfileScopedServices<T>(profile: IUserDataProfile, fn: (extensionEnablementService: IGlobalExtensionEnablementService, extensionStorageService: IExtensionStorageService) => Promise<T>): Promise<T> {\n\t\treturn this.userDataProfileStorageService.withProfileScopedStorageService(profile,\n\t\t\tasync storageService => {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst instantiationService = disposables.add(this.instantiationService.createChild(new ServiceCollection([IStorageService, storageService])));\n\t\t\t\tconst extensionEnablementService = disposables.add(instantiationService.createInstance(GlobalExtensionEnablementService));\n\t\t\t\tconst extensionStorageService = disposables.add(instantiationService.createInstance(ExtensionStorageService));\n\t\t\t\ttry {\n\t\t\t\t\treturn await fn(extensionEnablementService, extensionStorageService);\n\t\t\t\t} finally {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}\n\t\t\t});\n\t}\n\n}\n\nexport interface IExtensionsInitializerPreviewResult {\n\treadonly installedExtensions: ILocalExtension[];\n\treadonly disabledExtensions: IExtensionIdentifier[];\n\treadonly newExtensions: (IExtensionIdentifier & { preRelease: boolean })[];\n\treadonly remoteExtensions: ISyncExtension[];\n}\n\nexport abstract class AbstractExtensionsInitializer extends AbstractInitializer {\n\n\tconstructor(\n\t\t@IExtensionManagementService protected readonly extensionManagementService: IExtensionManagementService,\n\t\t@IIgnoredExtensionsManagementService private readonly ignoredExtensionsManagementService: IIgnoredExtensionsManagementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(SyncResource.Extensions, userDataProfilesService, environmentService, logService, fileService, storageService, uriIdentityService);\n\t}\n\n\tprotected async parseExtensions(remoteUserData: IRemoteUserData): Promise<ISyncExtension[] | null> {\n\t\treturn remoteUserData.syncData ? await parseAndMigrateExtensions(remoteUserData.syncData, this.extensionManagementService) : null;\n\t}\n\n\tprotected generatePreview(remoteExtensions: ISyncExtension[], localExtensions: ILocalExtension[]): IExtensionsInitializerPreviewResult {\n\t\tconst installedExtensions: ILocalExtension[] = [];\n\t\tconst newExtensions: (IExtensionIdentifier & { preRelease: boolean })[] = [];\n\t\tconst disabledExtensions: IExtensionIdentifier[] = [];\n\t\tfor (const extension of remoteExtensions) {\n\t\t\tif (this.ignoredExtensionsManagementService.hasToNeverSyncExtension(extension.identifier.id)) {\n\t\t\t\t// Skip extension ignored to sync\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst installedExtension = localExtensions.find(i => areSameExtensions(i.identifier, extension.identifier));\n\t\t\tif (installedExtension) {\n\t\t\t\tinstalledExtensions.push(installedExtension);\n\t\t\t\tif (extension.disabled) {\n\t\t\t\t\tdisabledExtensions.push(extension.identifier);\n\t\t\t\t}\n\t\t\t} else if (extension.installed) {\n\t\t\t\tnewExtensions.push({ ...extension.identifier, preRelease: !!extension.preRelease });\n\t\t\t\tif (extension.disabled) {\n\t\t\t\t\tdisabledExtensions.push(extension.identifier);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { installedExtensions, newExtensions, disabledExtensions, remoteExtensions };\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["profile"]
}
