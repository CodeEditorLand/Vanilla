{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/abstractSynchronizer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../base/common/arrays.js';\nimport { CancelablePromise, createCancelablePromise, ThrottledDelayer } from '../../../base/common/async.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { parse, ParseError } from '../../../base/common/json.js';\nimport { FormattingOptions } from '../../../base/common/jsonFormatter.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { IExtUri } from '../../../base/common/resources.js';\nimport { uppercaseFirstLetter } from '../../../base/common/strings.js';\nimport { isUndefined } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IHeaders } from '../../../base/parts/request/common/request.js';\nimport { localize } from '../../../nls.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { FileChangesEvent, FileOperationError, FileOperationResult, IFileContent, IFileService, toFileOperationResult } from '../../files/common/files.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { getServiceMachineId } from '../../externalServices/common/serviceMachineId.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { Change, getLastSyncResourceUri, IRemoteUserData, IResourcePreview as IBaseResourcePreview, ISyncData, IUserDataSyncResourcePreview as IBaseSyncResourcePreview, IUserData, IUserDataSyncResourceInitializer, IUserDataSyncLocalStoreService, IUserDataSyncConfiguration, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncStoreService, IUserDataSyncUtilService, MergeState, PREVIEW_DIR_NAME, SyncResource, SyncStatus, UserDataSyncError, UserDataSyncErrorCode, USER_DATA_SYNC_CONFIGURATION_SCOPE, USER_DATA_SYNC_SCHEME, IUserDataResourceManifest, getPathSegments, IUserDataSyncResourceConflicts, IUserDataSyncResource } from './userDataSync.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\n\ntype IncompatibleSyncSourceClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about the sync resource that is incompatible';\n\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'settings sync resource. eg., settings, keybindings...' };\n};\n\nexport function isRemoteUserData(thing: any): thing is IRemoteUserData {\n\tif (thing\n\t\t&& (thing.ref !== undefined && typeof thing.ref === 'string' && thing.ref !== '')\n\t\t&& (thing.syncData !== undefined && (thing.syncData === null || isSyncData(thing.syncData)))) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport function isSyncData(thing: any): thing is ISyncData {\n\tif (thing\n\t\t&& (thing.version !== undefined && typeof thing.version === 'number')\n\t\t&& (thing.content !== undefined && typeof thing.content === 'string')) {\n\n\t\t// backward compatibility\n\t\tif (Object.keys(thing).length === 2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (Object.keys(thing).length === 3\n\t\t\t&& (thing.machineId !== undefined && typeof thing.machineId === 'string')) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport function getSyncResourceLogLabel(syncResource: SyncResource, profile: IUserDataProfile): string {\n\treturn `${uppercaseFirstLetter(syncResource)}${profile.isDefault ? '' : ` (${profile.name})`}`;\n}\n\nexport interface IResourcePreview {\n\n\treadonly baseResource: URI;\n\treadonly baseContent: string | null;\n\n\treadonly remoteResource: URI;\n\treadonly remoteContent: string | null;\n\treadonly remoteChange: Change;\n\n\treadonly localResource: URI;\n\treadonly localContent: string | null;\n\treadonly localChange: Change;\n\n\treadonly previewResource: URI;\n\treadonly acceptedResource: URI;\n}\n\nexport interface IAcceptResult {\n\treadonly content: string | null;\n\treadonly localChange: Change;\n\treadonly remoteChange: Change;\n}\n\nexport interface IMergeResult extends IAcceptResult {\n\treadonly hasConflicts: boolean;\n}\n\ninterface IEditableResourcePreview extends IBaseResourcePreview, IResourcePreview {\n\tlocalChange: Change;\n\tremoteChange: Change;\n\tmergeState: MergeState;\n\tacceptResult?: IAcceptResult;\n}\n\nexport interface ISyncResourcePreview extends IBaseSyncResourcePreview {\n\treadonly remoteUserData: IRemoteUserData;\n\treadonly lastSyncUserData: IRemoteUserData | null;\n\treadonly resourcePreviews: IEditableResourcePreview[];\n}\n\ninterface ILastSyncUserDataState {\n\treadonly ref: string;\n\treadonly version: string | undefined;\n\t[key: string]: any;\n}\n\nexport abstract class AbstractSynchroniser extends Disposable implements IUserDataSynchroniser {\n\n\tprivate syncPreviewPromise: CancelablePromise<ISyncResourcePreview> | null = null;\n\n\tprotected readonly syncFolder: URI;\n\tprotected readonly syncPreviewFolder: URI;\n\tprotected readonly extUri: IExtUri;\n\tprotected readonly currentMachineIdPromise: Promise<string>;\n\n\tprivate _status: SyncStatus = SyncStatus.Idle;\n\tget status(): SyncStatus { return this._status; }\n\tprivate _onDidChangStatus: Emitter<SyncStatus> = this._register(new Emitter<SyncStatus>());\n\treadonly onDidChangeStatus: Event<SyncStatus> = this._onDidChangStatus.event;\n\n\tprivate _conflicts: IBaseResourcePreview[] = [];\n\tget conflicts(): IUserDataSyncResourceConflicts { return { ...this.syncResource, conflicts: this._conflicts }; }\n\tprivate _onDidChangeConflicts = this._register(new Emitter<IUserDataSyncResourceConflicts>());\n\treadonly onDidChangeConflicts = this._onDidChangeConflicts.event;\n\n\tprivate readonly localChangeTriggerThrottler = this._register(new ThrottledDelayer<void>(50));\n\tprivate readonly _onDidChangeLocal: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChangeLocal: Event<void> = this._onDidChangeLocal.event;\n\n\tprotected readonly lastSyncResource: URI;\n\tprivate readonly lastSyncUserDataStateKey = `${this.collection ? `${this.collection}.` : ''}${this.syncResource.syncResource}.lastSyncUserData`;\n\tprivate hasSyncResourceStateVersionChanged: boolean = false;\n\tprotected readonly syncResourceLogLabel: string;\n\n\tprotected syncHeaders: IHeaders = {};\n\n\treadonly resource = this.syncResource.syncResource;\n\n\tconstructor(\n\t\treadonly syncResource: IUserDataSyncResource,\n\t\treadonly collection: string | undefined,\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IEnvironmentService protected readonly environmentService: IEnvironmentService,\n\t\t@IStorageService protected readonly storageService: IStorageService,\n\t\t@IUserDataSyncStoreService protected readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService protected readonly userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncEnablementService protected readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService protected readonly telemetryService: ITelemetryService,\n\t\t@IUserDataSyncLogService protected readonly logService: IUserDataSyncLogService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t\tthis.syncResourceLogLabel = getSyncResourceLogLabel(syncResource.syncResource, syncResource.profile);\n\t\tthis.extUri = uriIdentityService.extUri;\n\t\tthis.syncFolder = this.extUri.joinPath(environmentService.userDataSyncHome, ...getPathSegments(syncResource.profile.isDefault ? undefined : syncResource.profile.id, syncResource.syncResource));\n\t\tthis.syncPreviewFolder = this.extUri.joinPath(this.syncFolder, PREVIEW_DIR_NAME);\n\t\tthis.lastSyncResource = getLastSyncResourceUri(syncResource.profile.isDefault ? undefined : syncResource.profile.id, syncResource.syncResource, environmentService, this.extUri);\n\t\tthis.currentMachineIdPromise = getServiceMachineId(environmentService, fileService, storageService);\n\t}\n\n\tprotected triggerLocalChange(): void {\n\t\tthis.localChangeTriggerThrottler.trigger(() => this.doTriggerLocalChange());\n\t}\n\n\tprotected async doTriggerLocalChange(): Promise<void> {\n\n\t\t// Sync again if current status is in conflicts\n\t\tif (this.status === SyncStatus.HasConflicts) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: In conflicts state and local change detected. Syncing again...`);\n\t\t\tconst preview = await this.syncPreviewPromise!;\n\t\t\tthis.syncPreviewPromise = null;\n\t\t\tconst status = await this.performSync(preview.remoteUserData, preview.lastSyncUserData, true, this.getUserDataSyncConfiguration());\n\t\t\tthis.setStatus(status);\n\t\t}\n\n\t\t// Check if local change causes remote change\n\t\telse {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Checking for local changes...`);\n\t\t\tconst lastSyncUserData = await this.getLastSyncUserData();\n\t\t\tconst hasRemoteChanged = lastSyncUserData ? await this.hasRemoteChanged(lastSyncUserData) : true;\n\t\t\tif (hasRemoteChanged) {\n\t\t\t\tthis._onDidChangeLocal.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected setStatus(status: SyncStatus): void {\n\t\tif (this._status !== status) {\n\t\t\tthis._status = status;\n\t\t\tthis._onDidChangStatus.fire(status);\n\t\t}\n\t}\n\n\tasync sync(manifest: IUserDataResourceManifest | null, headers: IHeaders = {}): Promise<void> {\n\t\tawait this._sync(manifest, true, this.getUserDataSyncConfiguration(), headers);\n\t}\n\n\tasync preview(manifest: IUserDataResourceManifest | null, userDataSyncConfiguration: IUserDataSyncConfiguration, headers: IHeaders = {}): Promise<ISyncResourcePreview | null> {\n\t\treturn this._sync(manifest, false, userDataSyncConfiguration, headers);\n\t}\n\n\tasync apply(force: boolean, headers: IHeaders = {}): Promise<ISyncResourcePreview | null> {\n\t\ttry {\n\t\t\tthis.syncHeaders = { ...headers };\n\n\t\t\tconst status = await this.doApply(force);\n\t\t\tthis.setStatus(status);\n\n\t\t\treturn this.syncPreviewPromise;\n\t\t} finally {\n\t\t\tthis.syncHeaders = {};\n\t\t}\n\t}\n\n\tprivate async _sync(manifest: IUserDataResourceManifest | null, apply: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration, headers: IHeaders): Promise<ISyncResourcePreview | null> {\n\t\ttry {\n\t\t\tthis.syncHeaders = { ...headers };\n\n\t\t\tif (this.status === SyncStatus.HasConflicts) {\n\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Skipped synchronizing ${this.resource.toLowerCase()} as there are conflicts.`);\n\t\t\t\treturn this.syncPreviewPromise;\n\t\t\t}\n\n\t\t\tif (this.status === SyncStatus.Syncing) {\n\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Skipped synchronizing ${this.resource.toLowerCase()} as it is running already.`);\n\t\t\t\treturn this.syncPreviewPromise;\n\t\t\t}\n\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Started synchronizing ${this.resource.toLowerCase()}...`);\n\t\t\tthis.setStatus(SyncStatus.Syncing);\n\n\t\t\tlet status: SyncStatus = SyncStatus.Idle;\n\t\t\ttry {\n\t\t\t\tconst lastSyncUserData = await this.getLastSyncUserData();\n\t\t\t\tconst remoteUserData = await this.getLatestRemoteUserData(manifest, lastSyncUserData);\n\t\t\t\tstatus = await this.performSync(remoteUserData, lastSyncUserData, apply, userDataSyncConfiguration);\n\t\t\t\tif (status === SyncStatus.HasConflicts) {\n\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Detected conflicts while synchronizing ${this.resource.toLowerCase()}.`);\n\t\t\t\t} else if (status === SyncStatus.Idle) {\n\t\t\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Finished synchronizing ${this.resource.toLowerCase()}.`);\n\t\t\t\t}\n\t\t\t\treturn this.syncPreviewPromise || null;\n\t\t\t} finally {\n\t\t\t\tthis.setStatus(status);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.syncHeaders = {};\n\t\t}\n\t}\n\n\tasync replace(content: string): Promise<boolean> {\n\t\tconst syncData = this.parseSyncData(content);\n\t\tif (!syncData) {\n\t\t\treturn false;\n\t\t}\n\n\t\tawait this.stop();\n\n\t\ttry {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Started resetting ${this.resource.toLowerCase()}...`);\n\t\t\tthis.setStatus(SyncStatus.Syncing);\n\t\t\tconst lastSyncUserData = await this.getLastSyncUserData();\n\t\t\tconst remoteUserData = await this.getLatestRemoteUserData(null, lastSyncUserData);\n\t\t\tconst isRemoteDataFromCurrentMachine = await this.isRemoteDataFromCurrentMachine(remoteUserData);\n\n\t\t\t/* use replace sync data */\n\t\t\tconst resourcePreviewResults = await this.generateSyncPreview({ ref: remoteUserData.ref, syncData }, lastSyncUserData, isRemoteDataFromCurrentMachine, this.getUserDataSyncConfiguration(), CancellationToken.None);\n\n\t\t\tconst resourcePreviews: [IResourcePreview, IAcceptResult][] = [];\n\t\t\tfor (const resourcePreviewResult of resourcePreviewResults) {\n\t\t\t\t/* Accept remote resource */\n\t\t\t\tconst acceptResult: IAcceptResult = await this.getAcceptResult(resourcePreviewResult, resourcePreviewResult.remoteResource, undefined, CancellationToken.None);\n\t\t\t\t/* compute remote change */\n\t\t\t\tconst { remoteChange } = await this.getAcceptResult(resourcePreviewResult, resourcePreviewResult.previewResource, resourcePreviewResult.remoteContent, CancellationToken.None);\n\t\t\t\tresourcePreviews.push([resourcePreviewResult, { ...acceptResult, remoteChange: remoteChange !== Change.None ? remoteChange : Change.Modified }]);\n\t\t\t}\n\n\t\t\tawait this.applyResult(remoteUserData, lastSyncUserData, resourcePreviews, false);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Finished resetting ${this.resource.toLowerCase()}.`);\n\t\t} finally {\n\t\t\tthis.setStatus(SyncStatus.Idle);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async isRemoteDataFromCurrentMachine(remoteUserData: IRemoteUserData): Promise<boolean> {\n\t\tconst machineId = await this.currentMachineIdPromise;\n\t\treturn !!remoteUserData.syncData?.machineId && remoteUserData.syncData.machineId === machineId;\n\t}\n\n\tprotected async getLatestRemoteUserData(manifest: IUserDataResourceManifest | null, lastSyncUserData: IRemoteUserData | null): Promise<IRemoteUserData> {\n\t\tif (lastSyncUserData) {\n\n\t\t\tconst latestRef = manifest ? manifest[this.resource] : undefined;\n\n\t\t\t// Last time synced resource and latest resource on server are same\n\t\t\tif (lastSyncUserData.ref === latestRef) {\n\t\t\t\treturn lastSyncUserData;\n\t\t\t}\n\n\t\t\t// There is no resource on server and last time it was synced with no resource\n\t\t\tif (latestRef === undefined && lastSyncUserData.syncData === null) {\n\t\t\t\treturn lastSyncUserData;\n\t\t\t}\n\t\t}\n\t\treturn this.getRemoteUserData(lastSyncUserData);\n\t}\n\n\tprivate async performSync(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, apply: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration): Promise<SyncStatus> {\n\t\tif (remoteUserData.syncData && remoteUserData.syncData.version > this.version) {\n\t\t\t// current version is not compatible with cloud version\n\t\t\tthis.telemetryService.publicLog2<{ source: string }, IncompatibleSyncSourceClassification>('sync/incompatible', { source: this.resource });\n\t\t\tthrow new UserDataSyncError(localize({ key: 'incompatible', comment: ['This is an error while syncing a resource that its local version is not compatible with its remote version.'] }, \"Cannot sync {0} as its local version {1} is not compatible with its remote version {2}\", this.resource, this.version, remoteUserData.syncData.version), UserDataSyncErrorCode.IncompatibleLocalContent, this.resource);\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.doSync(remoteUserData, lastSyncUserData, apply, userDataSyncConfiguration);\n\t\t} catch (e) {\n\t\t\tif (e instanceof UserDataSyncError) {\n\t\t\t\tswitch (e.code) {\n\n\t\t\t\t\tcase UserDataSyncErrorCode.LocalPreconditionFailed:\n\t\t\t\t\t\t// Rejected as there is a new local version. Syncing again...\n\t\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Failed to synchronize ${this.syncResourceLogLabel} as there is a new local version available. Synchronizing again...`);\n\t\t\t\t\t\treturn this.performSync(remoteUserData, lastSyncUserData, apply, userDataSyncConfiguration);\n\n\t\t\t\t\tcase UserDataSyncErrorCode.Conflict:\n\t\t\t\t\tcase UserDataSyncErrorCode.PreconditionFailed:\n\t\t\t\t\t\t// Rejected as there is a new remote version. Syncing again...\n\t\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Failed to synchronize as there is a new remote version available. Synchronizing again...`);\n\n\t\t\t\t\t\t// Avoid cache and get latest remote user data - https://github.com/microsoft/vscode/issues/90624\n\t\t\t\t\t\tremoteUserData = await this.getRemoteUserData(null);\n\n\t\t\t\t\t\t// Get the latest last sync user data. Because multiple parallel syncs (in Web) could share same last sync data\n\t\t\t\t\t\t// and one of them successfully updated remote and last sync state.\n\t\t\t\t\t\tlastSyncUserData = await this.getLastSyncUserData();\n\n\t\t\t\t\t\treturn this.performSync(remoteUserData, lastSyncUserData, apply, userDataSyncConfiguration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async doSync(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, apply: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration): Promise<SyncStatus> {\n\t\ttry {\n\n\t\t\tconst isRemoteDataFromCurrentMachine = await this.isRemoteDataFromCurrentMachine(remoteUserData);\n\t\t\tconst acceptRemote = !isRemoteDataFromCurrentMachine && lastSyncUserData === null && this.getStoredLastSyncUserDataStateContent() !== undefined;\n\t\t\tconst merge = apply && !acceptRemote;\n\n\t\t\t// generate or use existing preview\n\t\t\tif (!this.syncPreviewPromise) {\n\t\t\t\tthis.syncPreviewPromise = createCancelablePromise(token => this.doGenerateSyncResourcePreview(remoteUserData, lastSyncUserData, isRemoteDataFromCurrentMachine, merge, userDataSyncConfiguration, token));\n\t\t\t}\n\n\t\t\tlet preview = await this.syncPreviewPromise;\n\n\t\t\tif (apply && acceptRemote) {\n\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Accepting remote because it was synced before and the last sync data is not available.`);\n\t\t\t\tfor (const resourcePreview of preview.resourcePreviews) {\n\t\t\t\t\tpreview = (await this.accept(resourcePreview.remoteResource)) || preview;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.updateConflicts(preview.resourcePreviews);\n\t\t\tif (preview.resourcePreviews.some(({ mergeState }) => mergeState === MergeState.Conflict)) {\n\t\t\t\treturn SyncStatus.HasConflicts;\n\t\t\t}\n\n\t\t\tif (apply) {\n\t\t\t\treturn await this.doApply(false);\n\t\t\t}\n\n\t\t\treturn SyncStatus.Syncing;\n\n\t\t} catch (error) {\n\n\t\t\t// reset preview on error\n\t\t\tthis.syncPreviewPromise = null;\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync merge(resource: URI): Promise<ISyncResourcePreview | null> {\n\t\tawait this.updateSyncResourcePreview(resource, async (resourcePreview) => {\n\t\t\tconst mergeResult = await this.getMergeResult(resourcePreview, CancellationToken.None);\n\t\t\tawait this.fileService.writeFile(resourcePreview.previewResource, VSBuffer.fromString(mergeResult?.content || ''));\n\t\t\tconst acceptResult: IAcceptResult | undefined = mergeResult && !mergeResult.hasConflicts\n\t\t\t\t? await this.getAcceptResult(resourcePreview, resourcePreview.previewResource, undefined, CancellationToken.None)\n\t\t\t\t: undefined;\n\t\t\tresourcePreview.acceptResult = acceptResult;\n\t\t\tresourcePreview.mergeState = mergeResult.hasConflicts ? MergeState.Conflict : acceptResult ? MergeState.Accepted : MergeState.Preview;\n\t\t\tresourcePreview.localChange = acceptResult ? acceptResult.localChange : mergeResult.localChange;\n\t\t\tresourcePreview.remoteChange = acceptResult ? acceptResult.remoteChange : mergeResult.remoteChange;\n\t\t\treturn resourcePreview;\n\t\t});\n\t\treturn this.syncPreviewPromise;\n\t}\n\n\tasync accept(resource: URI, content?: string | null): Promise<ISyncResourcePreview | null> {\n\t\tawait this.updateSyncResourcePreview(resource, async (resourcePreview) => {\n\t\t\tconst acceptResult = await this.getAcceptResult(resourcePreview, resource, content, CancellationToken.None);\n\t\t\tresourcePreview.acceptResult = acceptResult;\n\t\t\tresourcePreview.mergeState = MergeState.Accepted;\n\t\t\tresourcePreview.localChange = acceptResult.localChange;\n\t\t\tresourcePreview.remoteChange = acceptResult.remoteChange;\n\t\t\treturn resourcePreview;\n\t\t});\n\t\treturn this.syncPreviewPromise;\n\t}\n\n\tasync discard(resource: URI): Promise<ISyncResourcePreview | null> {\n\t\tawait this.updateSyncResourcePreview(resource, async (resourcePreview) => {\n\t\t\tconst mergeResult = await this.getMergeResult(resourcePreview, CancellationToken.None);\n\t\t\tawait this.fileService.writeFile(resourcePreview.previewResource, VSBuffer.fromString(mergeResult.content || ''));\n\t\t\tresourcePreview.acceptResult = undefined;\n\t\t\tresourcePreview.mergeState = MergeState.Preview;\n\t\t\tresourcePreview.localChange = mergeResult.localChange;\n\t\t\tresourcePreview.remoteChange = mergeResult.remoteChange;\n\t\t\treturn resourcePreview;\n\t\t});\n\t\treturn this.syncPreviewPromise;\n\t}\n\n\tprivate async updateSyncResourcePreview(resource: URI, updateResourcePreview: (resourcePreview: IEditableResourcePreview) => Promise<IEditableResourcePreview>): Promise<void> {\n\t\tif (!this.syncPreviewPromise) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet preview = await this.syncPreviewPromise;\n\t\tconst index = preview.resourcePreviews.findIndex(({ localResource, remoteResource, previewResource }) =>\n\t\t\tthis.extUri.isEqual(localResource, resource) || this.extUri.isEqual(remoteResource, resource) || this.extUri.isEqual(previewResource, resource));\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.syncPreviewPromise = createCancelablePromise(async token => {\n\t\t\tconst resourcePreviews = [...preview.resourcePreviews];\n\t\t\tresourcePreviews[index] = await updateResourcePreview(resourcePreviews[index]);\n\t\t\treturn {\n\t\t\t\t...preview,\n\t\t\t\tresourcePreviews\n\t\t\t};\n\t\t});\n\n\t\tpreview = await this.syncPreviewPromise;\n\t\tthis.updateConflicts(preview.resourcePreviews);\n\t\tif (preview.resourcePreviews.some(({ mergeState }) => mergeState === MergeState.Conflict)) {\n\t\t\tthis.setStatus(SyncStatus.HasConflicts);\n\t\t} else {\n\t\t\tthis.setStatus(SyncStatus.Syncing);\n\t\t}\n\t}\n\n\tprivate async doApply(force: boolean): Promise<SyncStatus> {\n\t\tif (!this.syncPreviewPromise) {\n\t\t\treturn SyncStatus.Idle;\n\t\t}\n\n\t\tconst preview = await this.syncPreviewPromise;\n\n\t\t// check for conflicts\n\t\tif (preview.resourcePreviews.some(({ mergeState }) => mergeState === MergeState.Conflict)) {\n\t\t\treturn SyncStatus.HasConflicts;\n\t\t}\n\n\t\t// check if all are accepted\n\t\tif (preview.resourcePreviews.some(({ mergeState }) => mergeState !== MergeState.Accepted)) {\n\t\t\treturn SyncStatus.Syncing;\n\t\t}\n\n\t\t// apply preview\n\t\tawait this.applyResult(preview.remoteUserData, preview.lastSyncUserData, preview.resourcePreviews.map(resourcePreview => ([resourcePreview, resourcePreview.acceptResult!])), force);\n\n\t\t// reset preview\n\t\tthis.syncPreviewPromise = null;\n\n\t\t// reset preview folder\n\t\tawait this.clearPreviewFolder();\n\n\t\treturn SyncStatus.Idle;\n\t}\n\n\tprivate async clearPreviewFolder(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.del(this.syncPreviewFolder, { recursive: true });\n\t\t} catch (error) { /* Ignore */ }\n\t}\n\n\tprivate updateConflicts(resourcePreviews: IEditableResourcePreview[]): void {\n\t\tconst conflicts = resourcePreviews.filter(({ mergeState }) => mergeState === MergeState.Conflict);\n\t\tif (!equals(this._conflicts, conflicts, (a, b) => this.extUri.isEqual(a.previewResource, b.previewResource))) {\n\t\t\tthis._conflicts = conflicts;\n\t\t\tthis._onDidChangeConflicts.fire(this.conflicts);\n\t\t}\n\t}\n\n\tasync hasPreviouslySynced(): Promise<boolean> {\n\t\tconst lastSyncData = await this.getLastSyncUserData();\n\t\treturn !!lastSyncData && lastSyncData.syncData !== null /* `null` sync data implies resource is not synced */;\n\t}\n\n\tprotected async resolvePreviewContent(uri: URI): Promise<string | null> {\n\t\tconst syncPreview = this.syncPreviewPromise ? await this.syncPreviewPromise : null;\n\t\tif (syncPreview) {\n\t\t\tfor (const resourcePreview of syncPreview.resourcePreviews) {\n\t\t\t\tif (this.extUri.isEqual(resourcePreview.acceptedResource, uri)) {\n\t\t\t\t\treturn resourcePreview.acceptResult ? resourcePreview.acceptResult.content : null;\n\t\t\t\t}\n\t\t\t\tif (this.extUri.isEqual(resourcePreview.remoteResource, uri)) {\n\t\t\t\t\treturn resourcePreview.remoteContent;\n\t\t\t\t}\n\t\t\t\tif (this.extUri.isEqual(resourcePreview.localResource, uri)) {\n\t\t\t\t\treturn resourcePreview.localContent;\n\t\t\t\t}\n\t\t\t\tif (this.extUri.isEqual(resourcePreview.baseResource, uri)) {\n\t\t\t\t\treturn resourcePreview.baseContent;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync resetLocal(): Promise<void> {\n\t\tthis.storageService.remove(this.lastSyncUserDataStateKey, StorageScope.APPLICATION);\n\t\ttry {\n\t\t\tawait this.fileService.del(this.lastSyncResource);\n\t\t} catch (error) {\n\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async doGenerateSyncResourcePreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, isRemoteDataFromCurrentMachine: boolean, merge: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration, token: CancellationToken): Promise<ISyncResourcePreview> {\n\t\tconst resourcePreviewResults = await this.generateSyncPreview(remoteUserData, lastSyncUserData, isRemoteDataFromCurrentMachine, userDataSyncConfiguration, token);\n\n\t\tconst resourcePreviews: IEditableResourcePreview[] = [];\n\t\tfor (const resourcePreviewResult of resourcePreviewResults) {\n\t\t\tconst acceptedResource = resourcePreviewResult.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' });\n\n\t\t\t/* No change -> Accept */\n\t\t\tif (resourcePreviewResult.localChange === Change.None && resourcePreviewResult.remoteChange === Change.None) {\n\t\t\t\tresourcePreviews.push({\n\t\t\t\t\t...resourcePreviewResult,\n\t\t\t\t\tacceptedResource,\n\t\t\t\t\tacceptResult: { content: null, localChange: Change.None, remoteChange: Change.None },\n\t\t\t\t\tmergeState: MergeState.Accepted\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t/* Changed -> Apply ? (Merge ? Conflict | Accept) : Preview */\n\t\t\telse {\n\t\t\t\t/* Merge */\n\t\t\t\tconst mergeResult = merge ? await this.getMergeResult(resourcePreviewResult, token) : undefined;\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tawait this.fileService.writeFile(resourcePreviewResult.previewResource, VSBuffer.fromString(mergeResult?.content || ''));\n\n\t\t\t\t/* Conflict | Accept */\n\t\t\t\tconst acceptResult = mergeResult && !mergeResult.hasConflicts\n\t\t\t\t\t/* Accept if merged and there are no conflicts */\n\t\t\t\t\t? await this.getAcceptResult(resourcePreviewResult, resourcePreviewResult.previewResource, undefined, token)\n\t\t\t\t\t: undefined;\n\n\t\t\t\tresourcePreviews.push({\n\t\t\t\t\t...resourcePreviewResult,\n\t\t\t\t\tacceptResult,\n\t\t\t\t\tmergeState: mergeResult?.hasConflicts ? MergeState.Conflict : acceptResult ? MergeState.Accepted : MergeState.Preview,\n\t\t\t\t\tlocalChange: acceptResult ? acceptResult.localChange : mergeResult ? mergeResult.localChange : resourcePreviewResult.localChange,\n\t\t\t\t\tremoteChange: acceptResult ? acceptResult.remoteChange : mergeResult ? mergeResult.remoteChange : resourcePreviewResult.remoteChange\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn { syncResource: this.resource, profile: this.syncResource.profile, remoteUserData, lastSyncUserData, resourcePreviews, isLastSyncFromCurrentMachine: isRemoteDataFromCurrentMachine };\n\t}\n\n\tasync getLastSyncUserData(): Promise<IRemoteUserData | null> {\n\t\tlet storedLastSyncUserDataStateContent = this.getStoredLastSyncUserDataStateContent();\n\t\tif (!storedLastSyncUserDataStateContent) {\n\t\t\tstoredLastSyncUserDataStateContent = await this.migrateLastSyncUserData();\n\t\t}\n\n\t\t// Last Sync Data state does not exist\n\t\tif (!storedLastSyncUserDataStateContent) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Last sync data state does not exist.`);\n\t\t\treturn null;\n\t\t}\n\n\t\tconst lastSyncUserDataState: ILastSyncUserDataState = JSON.parse(storedLastSyncUserDataStateContent);\n\t\tconst resourceSyncStateVersion = this.userDataSyncEnablementService.getResourceSyncStateVersion(this.resource);\n\t\tthis.hasSyncResourceStateVersionChanged = !!lastSyncUserDataState.version && !!resourceSyncStateVersion && lastSyncUserDataState.version !== resourceSyncStateVersion;\n\t\tif (this.hasSyncResourceStateVersionChanged) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Reset last sync state because last sync state version ${lastSyncUserDataState.version} is not compatible with current sync state version ${resourceSyncStateVersion}.`);\n\t\t\tawait this.resetLocal();\n\t\t\treturn null;\n\t\t}\n\n\t\tlet syncData: ISyncData | null | undefined = undefined;\n\n\t\t// Get Last Sync Data from Local\n\t\tlet retrial = 1;\n\t\twhile (syncData === undefined && retrial++ < 6 /* Retry 5 times */) {\n\t\t\ttry {\n\t\t\t\tconst lastSyncStoredRemoteUserData = await this.readLastSyncStoredRemoteUserData();\n\t\t\t\tif (lastSyncStoredRemoteUserData) {\n\t\t\t\t\tif (lastSyncStoredRemoteUserData.ref === lastSyncUserDataState.ref) {\n\t\t\t\t\t\tsyncData = lastSyncStoredRemoteUserData.syncData;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Last sync data stored locally is not same as the last sync state.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof FileOperationError && error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Last sync resource does not exist locally.`);\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (error instanceof UserDataSyncError) {\n\t\t\t\t\tthrow error;\n\t\t\t\t} else {\n\t\t\t\t\t// log and retry\n\t\t\t\t\tthis.logService.error(error, retrial);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get Last Sync Data from Remote\n\t\tif (syncData === undefined) {\n\t\t\ttry {\n\t\t\t\tconst content = await this.userDataSyncStoreService.resolveResourceContent(this.resource, lastSyncUserDataState.ref, this.collection, this.syncHeaders);\n\t\t\t\tsyncData = content === null ? null : this.parseSyncData(content);\n\t\t\t\tawait this.writeLastSyncStoredRemoteUserData({ ref: lastSyncUserDataState.ref, syncData });\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof UserDataSyncError && error.code === UserDataSyncErrorCode.NotFound) {\n\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Last sync resource does not exist remotely.`);\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Last Sync Data Not Found\n\t\tif (syncData === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...lastSyncUserDataState,\n\t\t\tsyncData,\n\t\t};\n\t}\n\n\tprotected async updateLastSyncUserData(lastSyncRemoteUserData: IRemoteUserData, additionalProps: IStringDictionary<any> = {}): Promise<void> {\n\t\tif (additionalProps['ref'] || additionalProps['version']) {\n\t\t\tthrow new Error('Cannot have core properties as additional');\n\t\t}\n\n\t\tconst version = this.userDataSyncEnablementService.getResourceSyncStateVersion(this.resource);\n\t\tconst lastSyncUserDataState: ILastSyncUserDataState = {\n\t\t\tref: lastSyncRemoteUserData.ref,\n\t\t\tversion,\n\t\t\t...additionalProps\n\t\t};\n\n\t\tthis.storageService.store(this.lastSyncUserDataStateKey, JSON.stringify(lastSyncUserDataState), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tawait this.writeLastSyncStoredRemoteUserData(lastSyncRemoteUserData);\n\t}\n\n\tprivate getStoredLastSyncUserDataStateContent(): string | undefined {\n\t\treturn this.storageService.get(this.lastSyncUserDataStateKey, StorageScope.APPLICATION);\n\t}\n\n\tprivate async readLastSyncStoredRemoteUserData(): Promise<IRemoteUserData | undefined> {\n\t\tconst content = (await this.fileService.readFile(this.lastSyncResource)).value.toString();\n\t\ttry {\n\t\t\tconst lastSyncStoredRemoteUserData = content ? JSON.parse(content) : undefined;\n\t\t\tif (isRemoteUserData(lastSyncStoredRemoteUserData)) {\n\t\t\t\treturn lastSyncStoredRemoteUserData;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async writeLastSyncStoredRemoteUserData(lastSyncRemoteUserData: IRemoteUserData): Promise<void> {\n\t\tawait this.fileService.writeFile(this.lastSyncResource, VSBuffer.fromString(JSON.stringify(lastSyncRemoteUserData)));\n\t}\n\n\tprivate async migrateLastSyncUserData(): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.lastSyncResource);\n\t\t\tconst userData = JSON.parse(content.value.toString());\n\t\t\tawait this.fileService.del(this.lastSyncResource);\n\t\t\tif (userData.ref && userData.content !== undefined) {\n\t\t\t\tthis.storageService.store(this.lastSyncUserDataStateKey, JSON.stringify({\n\t\t\t\t\t...userData,\n\t\t\t\t\tcontent: undefined,\n\t\t\t\t}), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t\tawait this.writeLastSyncStoredRemoteUserData({ ref: userData.ref, syncData: userData.content === null ? null : JSON.parse(userData.content) });\n\t\t\t} else {\n\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Migrating last sync user data. Invalid data.`, userData);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof FileOperationError && error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Migrating last sync user data. Resource does not exist.`);\n\t\t\t} else {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn this.storageService.get(this.lastSyncUserDataStateKey, StorageScope.APPLICATION);\n\t}\n\n\tasync getRemoteUserData(lastSyncData: IRemoteUserData | null): Promise<IRemoteUserData> {\n\t\tconst { ref, content } = await this.getUserData(lastSyncData);\n\t\tlet syncData: ISyncData | null = null;\n\t\tif (content !== null) {\n\t\t\tsyncData = this.parseSyncData(content);\n\t\t}\n\t\treturn { ref, syncData };\n\t}\n\n\tprotected parseSyncData(content: string): ISyncData {\n\t\ttry {\n\t\t\tconst syncData: ISyncData = JSON.parse(content);\n\t\t\tif (isSyncData(syncData)) {\n\t\t\t\treturn syncData;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t\tthrow new UserDataSyncError(localize('incompatible sync data', \"Cannot parse sync data as it is not compatible with the current version.\"), UserDataSyncErrorCode.IncompatibleRemoteContent, this.resource);\n\t}\n\n\tprivate async getUserData(lastSyncData: IRemoteUserData | null): Promise<IUserData> {\n\t\tconst lastSyncUserData: IUserData | null = lastSyncData ? { ref: lastSyncData.ref, content: lastSyncData.syncData ? JSON.stringify(lastSyncData.syncData) : null } : null;\n\t\treturn this.userDataSyncStoreService.readResource(this.resource, lastSyncUserData, this.collection, this.syncHeaders);\n\t}\n\n\tprotected async updateRemoteUserData(content: string, ref: string | null): Promise<IRemoteUserData> {\n\t\tconst machineId = await this.currentMachineIdPromise;\n\t\tconst syncData: ISyncData = { version: this.version, machineId, content };\n\t\ttry {\n\t\t\tref = await this.userDataSyncStoreService.writeResource(this.resource, JSON.stringify(syncData), ref, this.collection, this.syncHeaders);\n\t\t\treturn { ref, syncData };\n\t\t} catch (error) {\n\t\t\tif (error instanceof UserDataSyncError && error.code === UserDataSyncErrorCode.TooLarge) {\n\t\t\t\terror = new UserDataSyncError(error.message, error.code, this.resource);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprotected async backupLocal(content: string): Promise<void> {\n\t\tconst syncData: ISyncData = { version: this.version, content };\n\t\treturn this.userDataSyncLocalStoreService.writeResource(this.resource, JSON.stringify(syncData), new Date(), this.syncResource.profile.isDefault ? undefined : this.syncResource.profile.id);\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tif (this.status === SyncStatus.Idle) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Stopping synchronizing ${this.resource.toLowerCase()}.`);\n\t\tif (this.syncPreviewPromise) {\n\t\t\tthis.syncPreviewPromise.cancel();\n\t\t\tthis.syncPreviewPromise = null;\n\t\t}\n\n\t\tthis.updateConflicts([]);\n\t\tawait this.clearPreviewFolder();\n\n\t\tthis.setStatus(SyncStatus.Idle);\n\t\tthis.logService.info(`${this.syncResourceLogLabel}: Stopped synchronizing ${this.resource.toLowerCase()}.`);\n\t}\n\n\tprivate getUserDataSyncConfiguration(): IUserDataSyncConfiguration {\n\t\treturn this.configurationService.getValue(USER_DATA_SYNC_CONFIGURATION_SCOPE);\n\t}\n\n\tprotected abstract readonly version: number;\n\tprotected abstract generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, isRemoteDataFromCurrentMachine: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration, token: CancellationToken): Promise<IResourcePreview[]>;\n\tprotected abstract getMergeResult(resourcePreview: IResourcePreview, token: CancellationToken): Promise<IMergeResult>;\n\tprotected abstract getAcceptResult(resourcePreview: IResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IAcceptResult>;\n\tprotected abstract applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, result: [IResourcePreview, IAcceptResult][], force: boolean): Promise<void>;\n\tprotected abstract hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean>;\n\n\tabstract hasLocalData(): Promise<boolean>;\n\tabstract resolveContent(uri: URI): Promise<string | null>;\n}\n\nexport interface IFileResourcePreview extends IResourcePreview {\n\treadonly fileContent: IFileContent | null;\n}\n\nexport abstract class AbstractFileSynchroniser extends AbstractSynchroniser {\n\n\tconstructor(\n\t\tprotected readonly file: URI,\n\t\tsyncResource: IUserDataSyncResource,\n\t\tcollection: string | undefined,\n\t\t@IFileService fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(syncResource, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t\tthis._register(this.fileService.watch(this.extUri.dirname(file)));\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onFileChanges(e)));\n\t}\n\n\tprotected async getLocalFileContent(): Promise<IFileContent | null> {\n\t\ttry {\n\t\t\treturn await this.fileService.readFile(this.file);\n\t\t} catch (error) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprotected async updateLocalFileContent(newContent: string, oldContent: IFileContent | null, force: boolean): Promise<void> {\n\t\ttry {\n\t\t\tif (oldContent) {\n\t\t\t\t// file exists already\n\t\t\t\tawait this.fileService.writeFile(this.file, VSBuffer.fromString(newContent), force ? undefined : oldContent);\n\t\t\t} else {\n\t\t\t\t// file does not exist\n\t\t\t\tawait this.fileService.createFile(this.file, VSBuffer.fromString(newContent), { overwrite: force });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif ((e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) ||\n\t\t\t\t(e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE)) {\n\t\t\t\tthrow new UserDataSyncError(e.message, UserDataSyncErrorCode.LocalPreconditionFailed);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async deleteLocalFile(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.del(this.file);\n\t\t} catch (e) {\n\t\t\tif (!(e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND)) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onFileChanges(e: FileChangesEvent): void {\n\t\tif (!e.contains(this.file)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.triggerLocalChange();\n\t}\n\n}\n\nexport abstract class AbstractJsonFileSynchroniser extends AbstractFileSynchroniser {\n\n\tconstructor(\n\t\tfile: URI,\n\t\tsyncResource: IUserDataSyncResource,\n\t\tcollection: string | undefined,\n\t\t@IFileService fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IUserDataSyncUtilService protected readonly userDataSyncUtilService: IUserDataSyncUtilService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(file, syncResource, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t}\n\n\tprotected hasErrors(content: string, isArray: boolean): boolean {\n\t\tconst parseErrors: ParseError[] = [];\n\t\tconst result = parse(content, parseErrors, { allowEmptyContent: true, allowTrailingComma: true });\n\t\treturn parseErrors.length > 0 || (!isUndefined(result) && isArray !== Array.isArray(result));\n\t}\n\n\tprivate _formattingOptions: Promise<FormattingOptions> | undefined = undefined;\n\tprotected getFormattingOptions(): Promise<FormattingOptions> {\n\t\tif (!this._formattingOptions) {\n\t\t\tthis._formattingOptions = this.userDataSyncUtilService.resolveFormattingOptions(this.file);\n\t\t}\n\t\treturn this._formattingOptions;\n\t}\n\n}\n\nexport abstract class AbstractInitializer implements IUserDataSyncResourceInitializer {\n\n\tprotected readonly extUri: IExtUri;\n\tprivate readonly lastSyncResource: URI;\n\n\tconstructor(\n\t\treadonly resource: SyncResource,\n\t\t@IUserDataProfilesService protected readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService protected readonly environmentService: IEnvironmentService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IStorageService protected readonly storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tthis.extUri = uriIdentityService.extUri;\n\t\tthis.lastSyncResource = getLastSyncResourceUri(undefined, this.resource, environmentService, this.extUri);\n\t}\n\n\tasync initialize({ ref, content }: IUserData): Promise<void> {\n\t\tif (!content) {\n\t\t\tthis.logService.info('Remote content does not exist.', this.resource);\n\t\t\treturn;\n\t\t}\n\n\t\tconst syncData = this.parseSyncData(content);\n\t\tif (!syncData) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.doInitialize({ ref, syncData });\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tprivate parseSyncData(content: string): ISyncData | undefined {\n\t\ttry {\n\t\t\tconst syncData: ISyncData = JSON.parse(content);\n\t\t\tif (isSyncData(syncData)) {\n\t\t\t\treturn syncData;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t\tthis.logService.info('Cannot parse sync data as it is not compatible with the current version.', this.resource);\n\t\treturn undefined;\n\t}\n\n\tprotected async updateLastSyncUserData(lastSyncRemoteUserData: IRemoteUserData, additionalProps: IStringDictionary<any> = {}): Promise<void> {\n\t\tif (additionalProps['ref'] || additionalProps['version']) {\n\t\t\tthrow new Error('Cannot have core properties as additional');\n\t\t}\n\n\t\tconst lastSyncUserDataState: ILastSyncUserDataState = {\n\t\t\tref: lastSyncRemoteUserData.ref,\n\t\t\tversion: undefined,\n\t\t\t...additionalProps\n\t\t};\n\n\t\tthis.storageService.store(`${this.resource}.lastSyncUserData`, JSON.stringify(lastSyncUserDataState), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tawait this.fileService.writeFile(this.lastSyncResource, VSBuffer.fromString(JSON.stringify(lastSyncRemoteUserData)));\n\t}\n\n\tprotected abstract doInitialize(remoteUserData: IRemoteUserData): Promise<void>;\n\n}\n"],
  "mappings": "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",
  "names": []
}
