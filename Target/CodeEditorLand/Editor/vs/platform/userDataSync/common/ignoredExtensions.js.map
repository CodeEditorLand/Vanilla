{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/ignoredExtensions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../base/common/arrays.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../configuration/common/configuration.js\";\nimport type { ILocalExtension } from \"../../extensionManagement/common/extensionManagement.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport const IIgnoredExtensionsManagementService =\n\tcreateDecorator<IIgnoredExtensionsManagementService>(\n\t\t\"IIgnoredExtensionsManagementService\",\n\t);\nexport interface IIgnoredExtensionsManagementService {\n\treadonly _serviceBrand: any;\n\n\tgetIgnoredExtensions(installed: ILocalExtension[]): string[];\n\n\thasToNeverSyncExtension(extensionId: string): boolean;\n\thasToAlwaysSyncExtension(extensionId: string): boolean;\n\tupdateIgnoredExtensions(\n\t\tignoredExtensionId: string,\n\t\tignore: boolean,\n\t): Promise<void>;\n\tupdateSynchronizedExtensions(\n\t\tignoredExtensionId: string,\n\t\tsync: boolean,\n\t): Promise<void>;\n}\n\nexport class IgnoredExtensionsManagementService\n\timplements IIgnoredExtensionsManagementService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t}\n\n\thasToNeverSyncExtension(extensionId: string): boolean {\n\t\tconst configuredIgnoredExtensions =\n\t\t\tthis.getConfiguredIgnoredExtensions();\n\t\treturn configuredIgnoredExtensions.includes(extensionId.toLowerCase());\n\t}\n\n\thasToAlwaysSyncExtension(extensionId: string): boolean {\n\t\tconst configuredIgnoredExtensions =\n\t\t\tthis.getConfiguredIgnoredExtensions();\n\t\treturn configuredIgnoredExtensions.includes(\n\t\t\t`-${extensionId.toLowerCase()}`,\n\t\t);\n\t}\n\n\tupdateIgnoredExtensions(\n\t\tignoredExtensionId: string,\n\t\tignore: boolean,\n\t): Promise<void> {\n\t\t// first remove the extension completely from ignored extensions\n\t\tlet currentValue = [\n\t\t\t...this.configurationService.getValue<string[]>(\n\t\t\t\t\"settingsSync.ignoredExtensions\",\n\t\t\t),\n\t\t].map((id) => id.toLowerCase());\n\t\tcurrentValue = currentValue.filter(\n\t\t\t(v) => v !== ignoredExtensionId && v !== `-${ignoredExtensionId}`,\n\t\t);\n\n\t\t// Add only if ignored\n\t\tif (ignore) {\n\t\t\tcurrentValue.push(ignoredExtensionId.toLowerCase());\n\t\t}\n\n\t\treturn this.configurationService.updateValue(\n\t\t\t\"settingsSync.ignoredExtensions\",\n\t\t\tcurrentValue.length ? currentValue : undefined,\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t}\n\n\tupdateSynchronizedExtensions(\n\t\textensionId: string,\n\t\tsync: boolean,\n\t): Promise<void> {\n\t\t// first remove the extension completely from ignored extensions\n\t\tlet currentValue = [\n\t\t\t...this.configurationService.getValue<string[]>(\n\t\t\t\t\"settingsSync.ignoredExtensions\",\n\t\t\t),\n\t\t].map((id) => id.toLowerCase());\n\t\tcurrentValue = currentValue.filter(\n\t\t\t(v) => v !== extensionId && v !== `-${extensionId}`,\n\t\t);\n\n\t\t// Add only if synced\n\t\tif (sync) {\n\t\t\tcurrentValue.push(`-${extensionId.toLowerCase()}`);\n\t\t}\n\n\t\treturn this.configurationService.updateValue(\n\t\t\t\"settingsSync.ignoredExtensions\",\n\t\t\tcurrentValue.length ? currentValue : undefined,\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t}\n\n\tgetIgnoredExtensions(installed: ILocalExtension[]): string[] {\n\t\tconst defaultIgnoredExtensions = installed\n\t\t\t.filter((i) => i.isMachineScoped)\n\t\t\t.map((i) => i.identifier.id.toLowerCase());\n\t\tconst value = this.getConfiguredIgnoredExtensions().map((id) =>\n\t\t\tid.toLowerCase(),\n\t\t);\n\t\tconst added: string[] = [],\n\t\t\tremoved: string[] = [];\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (const key of value) {\n\t\t\t\tif (key.startsWith(\"-\")) {\n\t\t\t\t\tremoved.push(key.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tadded.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn distinct(\n\t\t\t[...defaultIgnoredExtensions, ...added].filter(\n\t\t\t\t(setting) => !removed.includes(setting),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate getConfiguredIgnoredExtensions(): ReadonlyArray<string> {\n\t\tlet userValue = this.configurationService.inspect<string[]>(\n\t\t\t\"settingsSync.ignoredExtensions\",\n\t\t).userValue;\n\t\tif (userValue !== undefined) {\n\t\t\treturn userValue;\n\t\t}\n\t\tuserValue = this.configurationService.inspect<string[]>(\n\t\t\t\"sync.ignoredExtensions\",\n\t\t).userValue;\n\t\tif (userValue !== undefined) {\n\t\t\treturn userValue;\n\t\t}\n\t\treturn (\n\t\t\tthis.configurationService.getValue<string[]>(\n\t\t\t\t\"settingsSync.ignoredExtensions\",\n\t\t\t) || []\n\t\t).map((id) => id.toLowerCase());\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
