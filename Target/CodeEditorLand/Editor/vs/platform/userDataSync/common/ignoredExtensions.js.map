{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/ignoredExtensions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../base/common/arrays.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../configuration/common/configuration.js';\nimport { ILocalExtension } from '../../extensionManagement/common/extensionManagement.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const IIgnoredExtensionsManagementService = createDecorator<IIgnoredExtensionsManagementService>('IIgnoredExtensionsManagementService');\nexport interface IIgnoredExtensionsManagementService {\n\treadonly _serviceBrand: any;\n\n\tgetIgnoredExtensions(installed: ILocalExtension[]): string[];\n\n\thasToNeverSyncExtension(extensionId: string): boolean;\n\thasToAlwaysSyncExtension(extensionId: string): boolean;\n\tupdateIgnoredExtensions(ignoredExtensionId: string, ignore: boolean): Promise<void>;\n\tupdateSynchronizedExtensions(ignoredExtensionId: string, sync: boolean): Promise<void>;\n}\n\nexport class IgnoredExtensionsManagementService implements IIgnoredExtensionsManagementService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t}\n\n\thasToNeverSyncExtension(extensionId: string): boolean {\n\t\tconst configuredIgnoredExtensions = this.getConfiguredIgnoredExtensions();\n\t\treturn configuredIgnoredExtensions.includes(extensionId.toLowerCase());\n\t}\n\n\thasToAlwaysSyncExtension(extensionId: string): boolean {\n\t\tconst configuredIgnoredExtensions = this.getConfiguredIgnoredExtensions();\n\t\treturn configuredIgnoredExtensions.includes(`-${extensionId.toLowerCase()}`);\n\t}\n\n\tupdateIgnoredExtensions(ignoredExtensionId: string, ignore: boolean): Promise<void> {\n\t\t// first remove the extension completely from ignored extensions\n\t\tlet currentValue = [...this.configurationService.getValue<string[]>('settingsSync.ignoredExtensions')].map(id => id.toLowerCase());\n\t\tcurrentValue = currentValue.filter(v => v !== ignoredExtensionId && v !== `-${ignoredExtensionId}`);\n\n\t\t// Add only if ignored\n\t\tif (ignore) {\n\t\t\tcurrentValue.push(ignoredExtensionId.toLowerCase());\n\t\t}\n\n\t\treturn this.configurationService.updateValue('settingsSync.ignoredExtensions', currentValue.length ? currentValue : undefined, ConfigurationTarget.USER);\n\t}\n\n\tupdateSynchronizedExtensions(extensionId: string, sync: boolean): Promise<void> {\n\t\t// first remove the extension completely from ignored extensions\n\t\tlet currentValue = [...this.configurationService.getValue<string[]>('settingsSync.ignoredExtensions')].map(id => id.toLowerCase());\n\t\tcurrentValue = currentValue.filter(v => v !== extensionId && v !== `-${extensionId}`);\n\n\t\t// Add only if synced\n\t\tif (sync) {\n\t\t\tcurrentValue.push(`-${extensionId.toLowerCase()}`);\n\t\t}\n\n\t\treturn this.configurationService.updateValue('settingsSync.ignoredExtensions', currentValue.length ? currentValue : undefined, ConfigurationTarget.USER);\n\t}\n\n\tgetIgnoredExtensions(installed: ILocalExtension[]): string[] {\n\t\tconst defaultIgnoredExtensions = installed.filter(i => i.isMachineScoped).map(i => i.identifier.id.toLowerCase());\n\t\tconst value = this.getConfiguredIgnoredExtensions().map(id => id.toLowerCase());\n\t\tconst added: string[] = [], removed: string[] = [];\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (const key of value) {\n\t\t\t\tif (key.startsWith('-')) {\n\t\t\t\t\tremoved.push(key.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tadded.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn distinct([...defaultIgnoredExtensions, ...added,].filter(setting => !removed.includes(setting)));\n\t}\n\n\tprivate getConfiguredIgnoredExtensions(): ReadonlyArray<string> {\n\t\tlet userValue = this.configurationService.inspect<string[]>('settingsSync.ignoredExtensions').userValue;\n\t\tif (userValue !== undefined) {\n\t\t\treturn userValue;\n\t\t}\n\t\tuserValue = this.configurationService.inspect<string[]>('sync.ignoredExtensions').userValue;\n\t\tif (userValue !== undefined) {\n\t\t\treturn userValue;\n\t\t}\n\t\treturn (this.configurationService.getValue<string[]>('settingsSync.ignoredExtensions') || []).map(id => id.toLowerCase());\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAEzB,MAAM,sCAAsC,gBAAqD,qCAAqC;AAYtI,IAAM,qCAAN,MAAwF;AAAA,EAI9F,YACyC,sBACvC;AADuC;AAAA,EAEzC;AAAA,EA7BD,OAsB+F;AAAA;AAAA;AAAA,EAS9F,wBAAwB,aAA8B;AACrD,UAAM,8BAA8B,KAAK,+BAA+B;AACxE,WAAO,4BAA4B,SAAS,YAAY,YAAY,CAAC;AAAA,EACtE;AAAA,EAEA,yBAAyB,aAA8B;AACtD,UAAM,8BAA8B,KAAK,+BAA+B;AACxE,WAAO,4BAA4B,SAAS,IAAI,YAAY,YAAY,CAAC,EAAE;AAAA,EAC5E;AAAA,EAEA,wBAAwB,oBAA4B,QAAgC;AAEnF,QAAI,eAAe,CAAC,GAAG,KAAK,qBAAqB,SAAmB,gCAAgC,CAAC,EAAE,IAAI,QAAM,GAAG,YAAY,CAAC;AACjI,mBAAe,aAAa,OAAO,OAAK,MAAM,sBAAsB,MAAM,IAAI,kBAAkB,EAAE;AAGlG,QAAI,QAAQ;AACX,mBAAa,KAAK,mBAAmB,YAAY,CAAC;AAAA,IACnD;AAEA,WAAO,KAAK,qBAAqB,YAAY,kCAAkC,aAAa,SAAS,eAAe,QAAW,oBAAoB,IAAI;AAAA,EACxJ;AAAA,EAEA,6BAA6B,aAAqB,MAA8B;AAE/E,QAAI,eAAe,CAAC,GAAG,KAAK,qBAAqB,SAAmB,gCAAgC,CAAC,EAAE,IAAI,QAAM,GAAG,YAAY,CAAC;AACjI,mBAAe,aAAa,OAAO,OAAK,MAAM,eAAe,MAAM,IAAI,WAAW,EAAE;AAGpF,QAAI,MAAM;AACT,mBAAa,KAAK,IAAI,YAAY,YAAY,CAAC,EAAE;AAAA,IAClD;AAEA,WAAO,KAAK,qBAAqB,YAAY,kCAAkC,aAAa,SAAS,eAAe,QAAW,oBAAoB,IAAI;AAAA,EACxJ;AAAA,EAEA,qBAAqB,WAAwC;AAC5D,UAAM,2BAA2B,UAAU,OAAO,OAAK,EAAE,eAAe,EAAE,IAAI,OAAK,EAAE,WAAW,GAAG,YAAY,CAAC;AAChH,UAAM,QAAQ,KAAK,+BAA+B,EAAE,IAAI,QAAM,GAAG,YAAY,CAAC;AAC9E,UAAM,QAAkB,CAAC,GAAG,UAAoB,CAAC;AACjD,QAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,iBAAW,OAAO,OAAO;AACxB,YAAI,IAAI,WAAW,GAAG,GAAG;AACxB,kBAAQ,KAAK,IAAI,UAAU,CAAC,CAAC;AAAA,QAC9B,OAAO;AACN,gBAAM,KAAK,GAAG;AAAA,QACf;AAAA,MACD;AAAA,IACD;AACA,WAAO,SAAS,CAAC,GAAG,0BAA0B,GAAG,KAAM,EAAE,OAAO,aAAW,CAAC,QAAQ,SAAS,OAAO,CAAC,CAAC;AAAA,EACvG;AAAA,EAEQ,iCAAwD;AAC/D,QAAI,YAAY,KAAK,qBAAqB,QAAkB,gCAAgC,EAAE;AAC9F,QAAI,cAAc,QAAW;AAC5B,aAAO;AAAA,IACR;AACA,gBAAY,KAAK,qBAAqB,QAAkB,wBAAwB,EAAE;AAClF,QAAI,cAAc,QAAW;AAC5B,aAAO;AAAA,IACR;AACA,YAAQ,KAAK,qBAAqB,SAAmB,gCAAgC,KAAK,CAAC,GAAG,IAAI,QAAM,GAAG,YAAY,CAAC;AAAA,EACzH;AACD;AAxEa,qCAAN;AAAA,EAKJ;AAAA,GALU;",
  "names": []
}
