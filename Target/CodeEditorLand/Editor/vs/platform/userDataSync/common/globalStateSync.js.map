{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/globalStateSync.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { getErrorMessage } from '../../../base/common/errors.js';\nimport { Event } from '../../../base/common/event.js';\nimport { parse } from '../../../base/common/json.js';\nimport { toFormattedString } from '../../../base/common/jsonFormatter.js';\nimport { isWeb } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { IHeaders } from '../../../base/parts/request/common/request.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { getServiceMachineId } from '../../externalServices/common/serviceMachineId.js';\nimport { IStorageEntry, IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { AbstractInitializer, AbstractSynchroniser, getSyncResourceLogLabel, IAcceptResult, IMergeResult, IResourcePreview, isSyncData } from './abstractSynchronizer.js';\nimport { edit } from './content.js';\nimport { merge } from './globalStateMerge.js';\nimport { ALL_SYNC_RESOURCES, Change, createSyncHeaders, getEnablementKey, IGlobalState, IRemoteUserData, IStorageValue, ISyncData, IUserData, IUserDataSyncLocalStoreService, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncStoreService, SyncResource, SYNC_SERVICE_URL_TYPE, UserDataSyncError, UserDataSyncErrorCode, UserDataSyncStoreType, USER_DATA_SYNC_SCHEME } from './userDataSync.js';\nimport { UserDataSyncStoreClient } from './userDataSyncStoreService.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfileStorageService } from '../../userDataProfile/common/userDataProfileStorageService.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\n\nconst argvStoragePrefx = 'globalState.argv.';\nconst argvProperties: string[] = ['locale'];\n\ntype StorageKeys = { machine: string[]; user: string[]; unregistered: string[] };\n\ninterface IGlobalStateResourceMergeResult extends IAcceptResult {\n\treadonly local: { added: IStringDictionary<IStorageValue>; removed: string[]; updated: IStringDictionary<IStorageValue> };\n\treadonly remote: { added: string[]; removed: string[]; updated: string[]; all: IStringDictionary<IStorageValue> | null };\n}\n\ninterface IGlobalStateResourcePreview extends IResourcePreview {\n\treadonly localUserData: IGlobalState;\n\treadonly previewResult: IGlobalStateResourceMergeResult;\n\treadonly storageKeys: StorageKeys;\n}\n\nexport function stringify(globalState: IGlobalState, format: boolean): string {\n\tconst storageKeys = globalState.storage ? Object.keys(globalState.storage).sort() : [];\n\tconst storage: IStringDictionary<IStorageValue> = {};\n\tstorageKeys.forEach(key => storage[key] = globalState.storage[key]);\n\tglobalState.storage = storage;\n\treturn format ? toFormattedString(globalState, {}) : JSON.stringify(globalState);\n}\n\nconst GLOBAL_STATE_DATA_VERSION = 1;\n\n/**\n * Synchronises global state that includes\n * \t- Global storage with user scope\n * \t- Locale from argv properties\n *\n * Global storage is synced without checking version just like other resources (settings, keybindings).\n * If there is a change in format of the value of a storage key which requires migration then\n * \t\tOwner of that key should remove that key from user scope and replace that with new user scoped key.\n */\nexport class GlobalStateSynchroniser extends AbstractSynchroniser implements IUserDataSynchroniser {\n\n\tprotected readonly version: number = GLOBAL_STATE_DATA_VERSION;\n\tprivate readonly previewResource: URI = this.extUri.joinPath(this.syncPreviewFolder, 'globalState.json');\n\tprivate readonly baseResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' });\n\tprivate readonly localResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' });\n\tprivate readonly remoteResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' });\n\tprivate readonly acceptedResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' });\n\n\tprivate readonly localGlobalStateProvider: LocalGlobalStateProvider;\n\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper({ syncResource: SyncResource.GlobalState, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t\tthis.localGlobalStateProvider = instantiationService.createInstance(LocalGlobalStateProvider);\n\t\tthis._register(fileService.watch(this.extUri.dirname(this.environmentService.argvResource)));\n\t\tthis._register(\n\t\t\tEvent.any(\n\t\t\t\t/* Locale change */\n\t\t\t\tEvent.filter(fileService.onDidFilesChange, e => e.contains(this.environmentService.argvResource)),\n\t\t\t\tEvent.filter(userDataProfileStorageService.onDidChange, e => {\n\t\t\t\t\t/* StorageTarget has changed in profile storage */\n\t\t\t\t\tif (e.targetChanges.some(profile => this.syncResource.profile.id === profile.id)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t/* User storage data has changed in profile storage */\n\t\t\t\t\tif (e.valueChanges.some(({ profile, changes }) => this.syncResource.profile.id === profile.id && changes.some(change => change.target === StorageTarget.USER))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}),\n\t\t\t)((() => this.triggerLocalChange()))\n\t\t);\n\t}\n\n\tprotected async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, isRemoteDataFromCurrentMachine: boolean): Promise<IGlobalStateResourcePreview[]> {\n\t\tconst remoteGlobalState: IGlobalState = remoteUserData.syncData ? JSON.parse(remoteUserData.syncData.content) : null;\n\n\t\t// Use remote data as last sync data if last sync data does not exist and remote data is from same machine\n\t\tlastSyncUserData = lastSyncUserData === null && isRemoteDataFromCurrentMachine ? remoteUserData : lastSyncUserData;\n\t\tconst lastSyncGlobalState: IGlobalState | null = lastSyncUserData && lastSyncUserData.syncData ? JSON.parse(lastSyncUserData.syncData.content) : null;\n\n\t\tconst localGlobalState = await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile);\n\n\t\tif (remoteGlobalState) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Merging remote ui state with local ui state...`);\n\t\t} else {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Remote ui state does not exist. Synchronizing ui state for the first time.`);\n\t\t}\n\n\t\tconst storageKeys = await this.getStorageKeys(lastSyncGlobalState);\n\t\tconst { local, remote } = merge(localGlobalState.storage, remoteGlobalState ? remoteGlobalState.storage : null, lastSyncGlobalState ? lastSyncGlobalState.storage : null, storageKeys, this.logService);\n\t\tconst previewResult: IGlobalStateResourceMergeResult = {\n\t\t\tcontent: null,\n\t\t\tlocal,\n\t\t\tremote,\n\t\t\tlocalChange: Object.keys(local.added).length > 0 || Object.keys(local.updated).length > 0 || local.removed.length > 0 ? Change.Modified : Change.None,\n\t\t\tremoteChange: remote.all !== null ? Change.Modified : Change.None,\n\t\t};\n\n\t\tconst localContent = stringify(localGlobalState, false);\n\t\treturn [{\n\t\t\tbaseResource: this.baseResource,\n\t\t\tbaseContent: lastSyncGlobalState ? stringify(lastSyncGlobalState, false) : localContent,\n\t\t\tlocalResource: this.localResource,\n\t\t\tlocalContent,\n\t\t\tlocalUserData: localGlobalState,\n\t\t\tremoteResource: this.remoteResource,\n\t\t\tremoteContent: remoteGlobalState ? stringify(remoteGlobalState, false) : null,\n\t\t\tpreviewResource: this.previewResource,\n\t\t\tpreviewResult,\n\t\t\tlocalChange: previewResult.localChange,\n\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\tacceptedResource: this.acceptedResource,\n\t\t\tstorageKeys\n\t\t}];\n\t}\n\n\tprotected async hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean> {\n\t\tconst lastSyncGlobalState: IGlobalState | null = lastSyncUserData.syncData ? JSON.parse(lastSyncUserData.syncData.content) : null;\n\t\tif (lastSyncGlobalState === null) {\n\t\t\treturn true;\n\t\t}\n\t\tconst localGlobalState = await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile);\n\t\tconst storageKeys = await this.getStorageKeys(lastSyncGlobalState);\n\t\tconst { remote } = merge(localGlobalState.storage, lastSyncGlobalState.storage, lastSyncGlobalState.storage, storageKeys, this.logService);\n\t\treturn remote.all !== null;\n\t}\n\n\tprotected async getMergeResult(resourcePreview: IGlobalStateResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\treturn { ...resourcePreview.previewResult, hasConflicts: false };\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: IGlobalStateResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IGlobalStateResourceMergeResult> {\n\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqual(resource, this.localResource)) {\n\t\t\treturn this.acceptLocal(resourcePreview);\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqual(resource, this.remoteResource)) {\n\t\t\treturn this.acceptRemote(resourcePreview);\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqual(resource, this.previewResource)) {\n\t\t\treturn resourcePreview.previewResult;\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprivate async acceptLocal(resourcePreview: IGlobalStateResourcePreview): Promise<IGlobalStateResourceMergeResult> {\n\t\treturn {\n\t\t\tcontent: resourcePreview.localContent,\n\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t\tremote: { added: Object.keys(resourcePreview.localUserData.storage), removed: [], updated: [], all: resourcePreview.localUserData.storage },\n\t\t\tlocalChange: Change.None,\n\t\t\tremoteChange: Change.Modified,\n\t\t};\n\t}\n\n\tprivate async acceptRemote(resourcePreview: IGlobalStateResourcePreview): Promise<IGlobalStateResourceMergeResult> {\n\t\tif (resourcePreview.remoteContent !== null) {\n\t\t\tconst remoteGlobalState: IGlobalState = JSON.parse(resourcePreview.remoteContent);\n\t\t\tconst { local, remote } = merge(resourcePreview.localUserData.storage, remoteGlobalState.storage, null, resourcePreview.storageKeys, this.logService);\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal,\n\t\t\t\tremote,\n\t\t\t\tlocalChange: Object.keys(local.added).length > 0 || Object.keys(local.updated).length > 0 || local.removed.length > 0 ? Change.Modified : Change.None,\n\t\t\t\tremoteChange: remote !== null ? Change.Modified : Change.None,\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t\t\tremote: { added: [], removed: [], updated: [], all: null },\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [IGlobalStateResourcePreview, IGlobalStateResourceMergeResult][], force: boolean): Promise<void> {\n\t\tconst { localUserData } = resourcePreviews[0][0];\n\t\tconst { local, remote, localChange, remoteChange } = resourcePreviews[0][1];\n\n\t\tif (localChange === Change.None && remoteChange === Change.None) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing ui state.`);\n\t\t}\n\n\t\tif (localChange !== Change.None) {\n\t\t\t// update local\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating local ui state...`);\n\t\t\tawait this.backupLocal(JSON.stringify(localUserData));\n\t\t\tawait this.localGlobalStateProvider.writeLocalGlobalState(local, this.syncResource.profile);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated local ui state`);\n\t\t}\n\n\t\tif (remoteChange !== Change.None) {\n\t\t\t// update remote\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating remote ui state...`);\n\t\t\tconst content = JSON.stringify({ storage: remote.all });\n\t\t\tremoteUserData = await this.updateRemoteUserData(content, force ? null : remoteUserData.ref);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated remote ui state.${remote.added.length ? ` Added: ${remote.added}.` : ''}${remote.updated.length ? ` Updated: ${remote.updated}.` : ''}${remote.removed.length ? ` Removed: ${remote.removed}.` : ''}`);\n\t\t}\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\t// update last sync\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized ui state...`);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized ui state`);\n\t\t}\n\t}\n\n\tasync resolveContent(uri: URI): Promise<string | null> {\n\t\tif (this.extUri.isEqual(this.remoteResource, uri)\n\t\t\t|| this.extUri.isEqual(this.baseResource, uri)\n\t\t\t|| this.extUri.isEqual(this.localResource, uri)\n\t\t\t|| this.extUri.isEqual(this.acceptedResource, uri)\n\t\t) {\n\t\t\tconst content = await this.resolvePreviewContent(uri);\n\t\t\treturn content ? stringify(JSON.parse(content), true) : content;\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst { storage } = await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile);\n\t\t\tif (Object.keys(storage).length > 1 || storage[`${argvStoragePrefx}.locale`]?.value !== 'en') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* ignore error */\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async getStorageKeys(lastSyncGlobalState: IGlobalState | null): Promise<StorageKeys> {\n\t\tconst storageData = await this.userDataProfileStorageService.readStorageData(this.syncResource.profile);\n\t\tconst user: string[] = [], machine: string[] = [];\n\t\tfor (const [key, value] of storageData) {\n\t\t\tif (value.target === StorageTarget.USER) {\n\t\t\t\tuser.push(key);\n\t\t\t} else if (value.target === StorageTarget.MACHINE) {\n\t\t\t\tmachine.push(key);\n\t\t\t}\n\t\t}\n\t\tconst registered = [...user, ...machine];\n\t\tconst unregistered = lastSyncGlobalState?.storage ? Object.keys(lastSyncGlobalState.storage).filter(key => !key.startsWith(argvStoragePrefx) && !registered.includes(key) && storageData.get(key) !== undefined) : [];\n\n\t\tif (!isWeb) {\n\t\t\t// Following keys are synced only in web. Do not sync these keys in other platforms\n\t\t\tconst keysSyncedOnlyInWeb = [...ALL_SYNC_RESOURCES.map(resource => getEnablementKey(resource)), SYNC_SERVICE_URL_TYPE];\n\t\t\tunregistered.push(...keysSyncedOnlyInWeb);\n\t\t\tmachine.push(...keysSyncedOnlyInWeb);\n\t\t}\n\n\t\treturn { user, machine, unregistered };\n\t}\n}\n\nexport class LocalGlobalStateProvider {\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService\n\t) { }\n\n\tasync getLocalGlobalState(profile: IUserDataProfile): Promise<IGlobalState> {\n\t\tconst storage: IStringDictionary<IStorageValue> = {};\n\t\tif (profile.isDefault) {\n\t\t\tconst argvContent: string = await this.getLocalArgvContent();\n\t\t\tconst argvValue: IStringDictionary<any> = parse(argvContent);\n\t\t\tfor (const argvProperty of argvProperties) {\n\t\t\t\tif (argvValue[argvProperty] !== undefined) {\n\t\t\t\t\tstorage[`${argvStoragePrefx}${argvProperty}`] = { version: 1, value: argvValue[argvProperty] };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst storageData = await this.userDataProfileStorageService.readStorageData(profile);\n\t\tfor (const [key, value] of storageData) {\n\t\t\tif (value.value && value.target === StorageTarget.USER) {\n\t\t\t\tstorage[key] = { version: 1, value: value.value };\n\t\t\t}\n\t\t}\n\t\treturn { storage };\n\t}\n\n\tprivate async getLocalArgvContent(): Promise<string> {\n\t\ttry {\n\t\t\tthis.logService.debug('GlobalStateSync#getLocalArgvContent', this.environmentService.argvResource);\n\t\t\tconst content = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\tthis.logService.debug('GlobalStateSync#getLocalArgvContent - Resolved', this.environmentService.argvResource);\n\t\t\treturn content.value.toString();\n\t\t} catch (error) {\n\t\t\tthis.logService.debug(getErrorMessage(error));\n\t\t}\n\t\treturn '{}';\n\t}\n\n\tasync writeLocalGlobalState({ added, removed, updated }: { added: IStringDictionary<IStorageValue>; updated: IStringDictionary<IStorageValue>; removed: string[] }, profile: IUserDataProfile): Promise<void> {\n\t\tconst syncResourceLogLabel = getSyncResourceLogLabel(SyncResource.GlobalState, profile);\n\t\tconst argv: IStringDictionary<any> = {};\n\t\tconst updatedStorage = new Map<string, string | undefined>();\n\t\tconst storageData = await this.userDataProfileStorageService.readStorageData(profile);\n\t\tconst handleUpdatedStorage = (keys: string[], storage?: IStringDictionary<IStorageValue>): void => {\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key.startsWith(argvStoragePrefx)) {\n\t\t\t\t\targv[key.substring(argvStoragePrefx.length)] = storage ? storage[key].value : undefined;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (storage) {\n\t\t\t\t\tconst storageValue = storage[key];\n\t\t\t\t\tif (storageValue.value !== storageData.get(key)?.value) {\n\t\t\t\t\t\tupdatedStorage.set(key, storageValue.value);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (storageData.get(key) !== undefined) {\n\t\t\t\t\t\tupdatedStorage.set(key, undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\thandleUpdatedStorage(Object.keys(added), added);\n\t\thandleUpdatedStorage(Object.keys(updated), updated);\n\t\thandleUpdatedStorage(removed);\n\n\t\tif (Object.keys(argv).length) {\n\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Updating locale...`);\n\t\t\tconst argvContent = await this.getLocalArgvContent();\n\t\t\tlet content = argvContent;\n\t\t\tfor (const argvProperty of Object.keys(argv)) {\n\t\t\t\tcontent = edit(content, [argvProperty], argv[argvProperty], {});\n\t\t\t}\n\t\t\tif (argvContent !== content) {\n\t\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Updating locale...`);\n\t\t\t\tawait this.fileService.writeFile(this.environmentService.argvResource, VSBuffer.fromString(content));\n\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Updated locale.`);\n\t\t\t}\n\t\t\tthis.logService.info(`${syncResourceLogLabel}: Updated locale`);\n\t\t}\n\n\t\tif (updatedStorage.size) {\n\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Updating global state...`);\n\t\t\tawait this.userDataProfileStorageService.updateStorageData(profile, updatedStorage, StorageTarget.USER);\n\t\t\tthis.logService.info(`${syncResourceLogLabel}: Updated global state`, [...updatedStorage.keys()]);\n\t\t}\n\t}\n}\n\nexport class GlobalStateInitializer extends AbstractInitializer {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(SyncResource.GlobalState, userDataProfilesService, environmentService, logService, fileService, storageService, uriIdentityService);\n\t}\n\n\tprotected async doInitialize(remoteUserData: IRemoteUserData): Promise<void> {\n\t\tconst remoteGlobalState: IGlobalState = remoteUserData.syncData ? JSON.parse(remoteUserData.syncData.content) : null;\n\t\tif (!remoteGlobalState) {\n\t\t\tthis.logService.info('Skipping initializing global state because remote global state does not exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst argv: IStringDictionary<any> = {};\n\t\tconst storage: IStringDictionary<any> = {};\n\t\tfor (const key of Object.keys(remoteGlobalState.storage)) {\n\t\t\tif (key.startsWith(argvStoragePrefx)) {\n\t\t\t\targv[key.substring(argvStoragePrefx.length)] = remoteGlobalState.storage[key].value;\n\t\t\t} else {\n\t\t\t\tif (this.storageService.get(key, StorageScope.PROFILE) === undefined) {\n\t\t\t\t\tstorage[key] = remoteGlobalState.storage[key].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(argv).length) {\n\t\t\tlet content = '{}';\n\t\t\ttry {\n\t\t\t\tconst fileContent = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\t\tcontent = fileContent.value.toString();\n\t\t\t} catch (error) { }\n\t\t\tfor (const argvProperty of Object.keys(argv)) {\n\t\t\t\tcontent = edit(content, [argvProperty], argv[argvProperty], {});\n\t\t\t}\n\t\t\tawait this.fileService.writeFile(this.environmentService.argvResource, VSBuffer.fromString(content));\n\t\t}\n\n\t\tif (Object.keys(storage).length) {\n\t\t\tconst storageEntries: Array<IStorageEntry> = [];\n\t\t\tfor (const key of Object.keys(storage)) {\n\t\t\t\tstorageEntries.push({ key, value: storage[key], scope: StorageScope.PROFILE, target: StorageTarget.USER });\n\t\t\t}\n\t\t\tthis.storageService.storeAll(storageEntries, true);\n\t\t}\n\t}\n\n}\n\nexport class UserDataSyncStoreTypeSynchronizer {\n\n\tconstructor(\n\t\tprivate readonly userDataSyncStoreClient: UserDataSyncStoreClient,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tgetSyncStoreType(userData: IUserData): UserDataSyncStoreType | undefined {\n\t\tconst remoteGlobalState = this.parseGlobalState(userData);\n\t\treturn remoteGlobalState?.storage[SYNC_SERVICE_URL_TYPE]?.value as UserDataSyncStoreType;\n\t}\n\n\tasync sync(userDataSyncStoreType: UserDataSyncStoreType): Promise<void> {\n\t\tconst syncHeaders = createSyncHeaders(generateUuid());\n\t\ttry {\n\t\t\treturn await this.doSync(userDataSyncStoreType, syncHeaders);\n\t\t} catch (e) {\n\t\t\tif (e instanceof UserDataSyncError) {\n\t\t\t\tswitch (e.code) {\n\t\t\t\t\tcase UserDataSyncErrorCode.PreconditionFailed:\n\t\t\t\t\t\tthis.logService.info(`Failed to synchronize UserDataSyncStoreType as there is a new remote version available. Synchronizing again...`);\n\t\t\t\t\t\treturn this.doSync(userDataSyncStoreType, syncHeaders);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async doSync(userDataSyncStoreType: UserDataSyncStoreType, syncHeaders: IHeaders): Promise<void> {\n\t\t// Read the global state from remote\n\t\tconst globalStateUserData = await this.userDataSyncStoreClient.readResource(SyncResource.GlobalState, null, undefined, syncHeaders);\n\t\tconst remoteGlobalState = this.parseGlobalState(globalStateUserData) || { storage: {} };\n\n\t\t// Update the sync store type\n\t\tremoteGlobalState.storage[SYNC_SERVICE_URL_TYPE] = { value: userDataSyncStoreType, version: GLOBAL_STATE_DATA_VERSION };\n\n\t\t// Write the global state to remote\n\t\tconst machineId = await getServiceMachineId(this.environmentService, this.fileService, this.storageService);\n\t\tconst syncDataToUpdate: ISyncData = { version: GLOBAL_STATE_DATA_VERSION, machineId, content: stringify(remoteGlobalState, false) };\n\t\tawait this.userDataSyncStoreClient.writeResource(SyncResource.GlobalState, JSON.stringify(syncDataToUpdate), globalStateUserData.ref, undefined, syncHeaders);\n\t}\n\n\tprivate parseGlobalState({ content }: IUserData): IGlobalState | null {\n\t\tif (!content) {\n\t\t\treturn null;\n\t\t}\n\t\tconst syncData = JSON.parse(content);\n\t\tif (isSyncData(syncData)) {\n\t\t\treturn syncData ? JSON.parse(syncData.content) : null;\n\t\t}\n\t\tthrow new Error('Invalid remote data');\n\t}\n\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC,SAAS,yBAAyB;AAClC,SAAS,uBAAuB;AAChC,SAAS,aAAa;AACtB,SAAS,aAAa;AACtB,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,WAAW;AACpB,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,2BAA2B;AACpC,SAAS,eAAe,iBAAiB,cAAc,qBAAqB;AAC5E,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC,SAAS,qBAAqB,sBAAsB,yBAAyB,eAAe,cAAc,kBAAkB,kBAAkB;AAC9I,SAAS,YAAY;AACrB,SAAS,aAAa;AACtB,SAAS,oBAAoB,QAAQ,mBAAmB,kBAAkB,cAAc,iBAAiB,eAAe,WAAW,WAAW,gCAAgC,uBAAuB,yBAAyB,gCAAgC,2BAA2B,cAAc,uBAAuB,mBAAmB,uBAAuB,uBAAuB,6BAA6B;AAC5Z,SAAS,+BAA+B;AACxC,SAAS,kBAAkB,gCAAgC;AAC3D,SAAS,sCAAsC;AAC/C,SAAS,6BAA6B;AAEtC,MAAM,mBAAmB;AACzB,MAAM,iBAA2B,CAAC,QAAQ;AAenC,SAAS,UAAU,aAA2B,QAAyB;AAC7E,QAAM,cAAc,YAAY,UAAU,OAAO,KAAK,YAAY,OAAO,EAAE,KAAK,IAAI,CAAC;AACrF,QAAM,UAA4C,CAAC;AACnD,cAAY,QAAQ,SAAO,QAAQ,GAAG,IAAI,YAAY,QAAQ,GAAG,CAAC;AAClE,cAAY,UAAU;AACtB,SAAO,SAAS,kBAAkB,aAAa,CAAC,CAAC,IAAI,KAAK,UAAU,WAAW;AAChF;AANgB;AAQhB,MAAM,4BAA4B;AAW3B,IAAM,0BAAN,cAAsC,qBAAsD;AAAA,EAWlG,YACC,SACA,YACiD,+BACnC,aACa,0BACK,+BACP,YACJ,oBACW,+BACb,kBACI,sBACN,gBACI,oBACE,sBACtB;AACD,UAAM,EAAE,cAAc,aAAa,aAAa,QAAQ,GAAG,YAAY,aAAa,oBAAoB,gBAAgB,0BAA0B,+BAA+B,+BAA+B,kBAAkB,YAAY,sBAAsB,kBAAkB;AAbrO;AAcjD,SAAK,2BAA2B,qBAAqB,eAAe,wBAAwB;AAC5F,SAAK,UAAU,YAAY,MAAM,KAAK,OAAO,QAAQ,KAAK,mBAAmB,YAAY,CAAC,CAAC;AAC3F,SAAK;AAAA,MACJ,MAAM;AAAA;AAAA,QAEL,MAAM,OAAO,YAAY,kBAAkB,OAAK,EAAE,SAAS,KAAK,mBAAmB,YAAY,CAAC;AAAA,QAChG,MAAM,OAAO,8BAA8B,aAAa,OAAK;AAE5D,cAAI,EAAE,cAAc,KAAK,CAAAA,aAAW,KAAK,aAAa,QAAQ,OAAOA,SAAQ,EAAE,GAAG;AACjF,mBAAO;AAAA,UACR;AAEA,cAAI,EAAE,aAAa,KAAK,CAAC,EAAE,SAAAA,UAAS,QAAQ,MAAM,KAAK,aAAa,QAAQ,OAAOA,SAAQ,MAAM,QAAQ,KAAK,YAAU,OAAO,WAAW,cAAc,IAAI,CAAC,GAAG;AAC/J,mBAAO;AAAA,UACR;AACA,iBAAO;AAAA,QACR,CAAC;AAAA,MACF,EAAG,MAAM,KAAK,mBAAmB,CAAE;AAAA,IACpC;AAAA,EACD;AAAA,EAnHD,OAoEmG;AAAA;AAAA;AAAA,EAE/E,UAAkB;AAAA,EACpB,kBAAuB,KAAK,OAAO,SAAS,KAAK,mBAAmB,kBAAkB;AAAA,EACtF,eAAoB,KAAK,gBAAgB,KAAK,EAAE,QAAQ,uBAAuB,WAAW,OAAO,CAAC;AAAA,EAClG,gBAAqB,KAAK,gBAAgB,KAAK,EAAE,QAAQ,uBAAuB,WAAW,QAAQ,CAAC;AAAA,EACpG,iBAAsB,KAAK,gBAAgB,KAAK,EAAE,QAAQ,uBAAuB,WAAW,SAAS,CAAC;AAAA,EACtG,mBAAwB,KAAK,gBAAgB,KAAK,EAAE,QAAQ,uBAAuB,WAAW,WAAW,CAAC;AAAA,EAE1G;AAAA,EAwCjB,MAAgB,oBAAoB,gBAAiC,kBAA0C,gCAAiF;AAC/L,UAAM,oBAAkC,eAAe,WAAW,KAAK,MAAM,eAAe,SAAS,OAAO,IAAI;AAGhH,uBAAmB,qBAAqB,QAAQ,iCAAiC,iBAAiB;AAClG,UAAM,sBAA2C,oBAAoB,iBAAiB,WAAW,KAAK,MAAM,iBAAiB,SAAS,OAAO,IAAI;AAEjJ,UAAM,mBAAmB,MAAM,KAAK,yBAAyB,oBAAoB,KAAK,aAAa,OAAO;AAE1G,QAAI,mBAAmB;AACtB,WAAK,WAAW,MAAM,GAAG,KAAK,oBAAoB,kDAAkD;AAAA,IACrG,OAAO;AACN,WAAK,WAAW,MAAM,GAAG,KAAK,oBAAoB,8EAA8E;AAAA,IACjI;AAEA,UAAM,cAAc,MAAM,KAAK,eAAe,mBAAmB;AACjE,UAAM,EAAE,OAAO,OAAO,IAAI,MAAM,iBAAiB,SAAS,oBAAoB,kBAAkB,UAAU,MAAM,sBAAsB,oBAAoB,UAAU,MAAM,aAAa,KAAK,UAAU;AACtM,UAAM,gBAAiD;AAAA,MACtD,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA,aAAa,OAAO,KAAK,MAAM,KAAK,EAAE,SAAS,KAAK,OAAO,KAAK,MAAM,OAAO,EAAE,SAAS,KAAK,MAAM,QAAQ,SAAS,IAAI,OAAO,WAAW,OAAO;AAAA,MACjJ,cAAc,OAAO,QAAQ,OAAO,OAAO,WAAW,OAAO;AAAA,IAC9D;AAEA,UAAM,eAAe,UAAU,kBAAkB,KAAK;AACtD,WAAO,CAAC;AAAA,MACP,cAAc,KAAK;AAAA,MACnB,aAAa,sBAAsB,UAAU,qBAAqB,KAAK,IAAI;AAAA,MAC3E,eAAe,KAAK;AAAA,MACpB;AAAA,MACA,eAAe;AAAA,MACf,gBAAgB,KAAK;AAAA,MACrB,eAAe,oBAAoB,UAAU,mBAAmB,KAAK,IAAI;AAAA,MACzE,iBAAiB,KAAK;AAAA,MACtB;AAAA,MACA,aAAa,cAAc;AAAA,MAC3B,cAAc,cAAc;AAAA,MAC5B,kBAAkB,KAAK;AAAA,MACvB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAgB,iBAAiB,kBAAqD;AACrF,UAAM,sBAA2C,iBAAiB,WAAW,KAAK,MAAM,iBAAiB,SAAS,OAAO,IAAI;AAC7H,QAAI,wBAAwB,MAAM;AACjC,aAAO;AAAA,IACR;AACA,UAAM,mBAAmB,MAAM,KAAK,yBAAyB,oBAAoB,KAAK,aAAa,OAAO;AAC1G,UAAM,cAAc,MAAM,KAAK,eAAe,mBAAmB;AACjE,UAAM,EAAE,OAAO,IAAI,MAAM,iBAAiB,SAAS,oBAAoB,SAAS,oBAAoB,SAAS,aAAa,KAAK,UAAU;AACzI,WAAO,OAAO,QAAQ;AAAA,EACvB;AAAA,EAEA,MAAgB,eAAe,iBAA8C,OAAiD;AAC7H,WAAO,EAAE,GAAG,gBAAgB,eAAe,cAAc,MAAM;AAAA,EAChE;AAAA,EAEA,MAAgB,gBAAgB,iBAA8C,UAAe,SAAoC,OAAoE;AAGpM,QAAI,KAAK,OAAO,QAAQ,UAAU,KAAK,aAAa,GAAG;AACtD,aAAO,KAAK,YAAY,eAAe;AAAA,IACxC;AAGA,QAAI,KAAK,OAAO,QAAQ,UAAU,KAAK,cAAc,GAAG;AACvD,aAAO,KAAK,aAAa,eAAe;AAAA,IACzC;AAGA,QAAI,KAAK,OAAO,QAAQ,UAAU,KAAK,eAAe,GAAG;AACxD,aAAO,gBAAgB;AAAA,IACxB;AAEA,UAAM,IAAI,MAAM,qBAAqB,SAAS,SAAS,CAAC,EAAE;AAAA,EAC3D;AAAA,EAEA,MAAc,YAAY,iBAAwF;AACjH,WAAO;AAAA,MACN,SAAS,gBAAgB;AAAA,MACzB,OAAO,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,EAAE;AAAA,MAC7C,QAAQ,EAAE,OAAO,OAAO,KAAK,gBAAgB,cAAc,OAAO,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,KAAK,gBAAgB,cAAc,QAAQ;AAAA,MAC1I,aAAa,OAAO;AAAA,MACpB,cAAc,OAAO;AAAA,IACtB;AAAA,EACD;AAAA,EAEA,MAAc,aAAa,iBAAwF;AAClH,QAAI,gBAAgB,kBAAkB,MAAM;AAC3C,YAAM,oBAAkC,KAAK,MAAM,gBAAgB,aAAa;AAChF,YAAM,EAAE,OAAO,OAAO,IAAI,MAAM,gBAAgB,cAAc,SAAS,kBAAkB,SAAS,MAAM,gBAAgB,aAAa,KAAK,UAAU;AACpJ,aAAO;AAAA,QACN,SAAS,gBAAgB;AAAA,QACzB;AAAA,QACA;AAAA,QACA,aAAa,OAAO,KAAK,MAAM,KAAK,EAAE,SAAS,KAAK,OAAO,KAAK,MAAM,OAAO,EAAE,SAAS,KAAK,MAAM,QAAQ,SAAS,IAAI,OAAO,WAAW,OAAO;AAAA,QACjJ,cAAc,WAAW,OAAO,OAAO,WAAW,OAAO;AAAA,MAC1D;AAAA,IACD,OAAO;AACN,aAAO;AAAA,QACN,SAAS,gBAAgB;AAAA,QACzB,OAAO,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,EAAE;AAAA,QAC7C,QAAQ,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,KAAK,KAAK;AAAA,QACzD,aAAa,OAAO;AAAA,QACpB,cAAc,OAAO;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAgB,YAAY,gBAAiC,kBAA0C,kBAAoF,OAA+B;AACzN,UAAM,EAAE,cAAc,IAAI,iBAAiB,CAAC,EAAE,CAAC;AAC/C,UAAM,EAAE,OAAO,QAAQ,aAAa,aAAa,IAAI,iBAAiB,CAAC,EAAE,CAAC;AAE1E,QAAI,gBAAgB,OAAO,QAAQ,iBAAiB,OAAO,MAAM;AAChE,WAAK,WAAW,KAAK,GAAG,KAAK,oBAAoB,mDAAmD;AAAA,IACrG;AAEA,QAAI,gBAAgB,OAAO,MAAM;AAEhC,WAAK,WAAW,MAAM,GAAG,KAAK,oBAAoB,8BAA8B;AAChF,YAAM,KAAK,YAAY,KAAK,UAAU,aAAa,CAAC;AACpD,YAAM,KAAK,yBAAyB,sBAAsB,OAAO,KAAK,aAAa,OAAO;AAC1F,WAAK,WAAW,KAAK,GAAG,KAAK,oBAAoB,0BAA0B;AAAA,IAC5E;AAEA,QAAI,iBAAiB,OAAO,MAAM;AAEjC,WAAK,WAAW,MAAM,GAAG,KAAK,oBAAoB,+BAA+B;AACjF,YAAM,UAAU,KAAK,UAAU,EAAE,SAAS,OAAO,IAAI,CAAC;AACtD,uBAAiB,MAAM,KAAK,qBAAqB,SAAS,QAAQ,OAAO,eAAe,GAAG;AAC3F,WAAK,WAAW,KAAK,GAAG,KAAK,oBAAoB,6BAA6B,OAAO,MAAM,SAAS,WAAW,OAAO,KAAK,MAAM,EAAE,GAAG,OAAO,QAAQ,SAAS,aAAa,OAAO,OAAO,MAAM,EAAE,GAAG,OAAO,QAAQ,SAAS,aAAa,OAAO,OAAO,MAAM,EAAE,EAAE;AAAA,IAClQ;AAEA,QAAI,kBAAkB,QAAQ,eAAe,KAAK;AAEjD,WAAK,WAAW,MAAM,GAAG,KAAK,oBAAoB,0CAA0C;AAC5F,YAAM,KAAK,uBAAuB,cAAc;AAChD,WAAK,WAAW,KAAK,GAAG,KAAK,oBAAoB,sCAAsC;AAAA,IACxF;AAAA,EACD;AAAA,EAEA,MAAM,eAAe,KAAkC;AACtD,QAAI,KAAK,OAAO,QAAQ,KAAK,gBAAgB,GAAG,KAC5C,KAAK,OAAO,QAAQ,KAAK,cAAc,GAAG,KAC1C,KAAK,OAAO,QAAQ,KAAK,eAAe,GAAG,KAC3C,KAAK,OAAO,QAAQ,KAAK,kBAAkB,GAAG,GAChD;AACD,YAAM,UAAU,MAAM,KAAK,sBAAsB,GAAG;AACpD,aAAO,UAAU,UAAU,KAAK,MAAM,OAAO,GAAG,IAAI,IAAI;AAAA,IACzD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,eAAiC;AACtC,QAAI;AACH,YAAM,EAAE,QAAQ,IAAI,MAAM,KAAK,yBAAyB,oBAAoB,KAAK,aAAa,OAAO;AACrG,UAAI,OAAO,KAAK,OAAO,EAAE,SAAS,KAAK,QAAQ,GAAG,gBAAgB,SAAS,GAAG,UAAU,MAAM;AAC7F,eAAO;AAAA,MACR;AAAA,IACD,SAAS,OAAO;AAAA,IAEhB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,eAAe,qBAAgE;AAC5F,UAAM,cAAc,MAAM,KAAK,8BAA8B,gBAAgB,KAAK,aAAa,OAAO;AACtG,UAAM,OAAiB,CAAC,GAAG,UAAoB,CAAC;AAChD,eAAW,CAAC,KAAK,KAAK,KAAK,aAAa;AACvC,UAAI,MAAM,WAAW,cAAc,MAAM;AACxC,aAAK,KAAK,GAAG;AAAA,MACd,WAAW,MAAM,WAAW,cAAc,SAAS;AAClD,gBAAQ,KAAK,GAAG;AAAA,MACjB;AAAA,IACD;AACA,UAAM,aAAa,CAAC,GAAG,MAAM,GAAG,OAAO;AACvC,UAAM,eAAe,qBAAqB,UAAU,OAAO,KAAK,oBAAoB,OAAO,EAAE,OAAO,SAAO,CAAC,IAAI,WAAW,gBAAgB,KAAK,CAAC,WAAW,SAAS,GAAG,KAAK,YAAY,IAAI,GAAG,MAAM,MAAS,IAAI,CAAC;AAEpN,QAAI,CAAC,OAAO;AAEX,YAAM,sBAAsB,CAAC,GAAG,mBAAmB,IAAI,cAAY,iBAAiB,QAAQ,CAAC,GAAG,qBAAqB;AACrH,mBAAa,KAAK,GAAG,mBAAmB;AACxC,cAAQ,KAAK,GAAG,mBAAmB;AAAA,IACpC;AAEA,WAAO,EAAE,MAAM,SAAS,aAAa;AAAA,EACtC;AACD;AA7Oa,0BAAN;AAAA,EAcJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAzBU;AA+ON,IAAM,2BAAN,MAA+B;AAAA,EACrC,YACgC,aACO,oBACW,+BACP,YACzC;AAJ8B;AACO;AACW;AACP;AAAA,EACvC;AAAA,EAzTL,OAmTsC;AAAA;AAAA;AAAA,EAQrC,MAAM,oBAAoB,SAAkD;AAC3E,UAAM,UAA4C,CAAC;AACnD,QAAI,QAAQ,WAAW;AACtB,YAAM,cAAsB,MAAM,KAAK,oBAAoB;AAC3D,YAAM,YAAoC,MAAM,WAAW;AAC3D,iBAAW,gBAAgB,gBAAgB;AAC1C,YAAI,UAAU,YAAY,MAAM,QAAW;AAC1C,kBAAQ,GAAG,gBAAgB,GAAG,YAAY,EAAE,IAAI,EAAE,SAAS,GAAG,OAAO,UAAU,YAAY,EAAE;AAAA,QAC9F;AAAA,MACD;AAAA,IACD;AACA,UAAM,cAAc,MAAM,KAAK,8BAA8B,gBAAgB,OAAO;AACpF,eAAW,CAAC,KAAK,KAAK,KAAK,aAAa;AACvC,UAAI,MAAM,SAAS,MAAM,WAAW,cAAc,MAAM;AACvD,gBAAQ,GAAG,IAAI,EAAE,SAAS,GAAG,OAAO,MAAM,MAAM;AAAA,MACjD;AAAA,IACD;AACA,WAAO,EAAE,QAAQ;AAAA,EAClB;AAAA,EAEA,MAAc,sBAAuC;AACpD,QAAI;AACH,WAAK,WAAW,MAAM,uCAAuC,KAAK,mBAAmB,YAAY;AACjG,YAAM,UAAU,MAAM,KAAK,YAAY,SAAS,KAAK,mBAAmB,YAAY;AACpF,WAAK,WAAW,MAAM,kDAAkD,KAAK,mBAAmB,YAAY;AAC5G,aAAO,QAAQ,MAAM,SAAS;AAAA,IAC/B,SAAS,OAAO;AACf,WAAK,WAAW,MAAM,gBAAgB,KAAK,CAAC;AAAA,IAC7C;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,sBAAsB,EAAE,OAAO,SAAS,QAAQ,GAA8G,SAA0C;AAC7M,UAAM,uBAAuB,wBAAwB,aAAa,aAAa,OAAO;AACtF,UAAM,OAA+B,CAAC;AACtC,UAAM,iBAAiB,oBAAI,IAAgC;AAC3D,UAAM,cAAc,MAAM,KAAK,8BAA8B,gBAAgB,OAAO;AACpF,UAAM,uBAAuB,wBAAC,MAAgB,YAAqD;AAClG,iBAAW,OAAO,MAAM;AACvB,YAAI,IAAI,WAAW,gBAAgB,GAAG;AACrC,eAAK,IAAI,UAAU,iBAAiB,MAAM,CAAC,IAAI,UAAU,QAAQ,GAAG,EAAE,QAAQ;AAC9E;AAAA,QACD;AACA,YAAI,SAAS;AACZ,gBAAM,eAAe,QAAQ,GAAG;AAChC,cAAI,aAAa,UAAU,YAAY,IAAI,GAAG,GAAG,OAAO;AACvD,2BAAe,IAAI,KAAK,aAAa,KAAK;AAAA,UAC3C;AAAA,QACD,OAAO;AACN,cAAI,YAAY,IAAI,GAAG,MAAM,QAAW;AACvC,2BAAe,IAAI,KAAK,MAAS;AAAA,UAClC;AAAA,QACD;AAAA,MACD;AAAA,IACD,GAjB6B;AAkB7B,yBAAqB,OAAO,KAAK,KAAK,GAAG,KAAK;AAC9C,yBAAqB,OAAO,KAAK,OAAO,GAAG,OAAO;AAClD,yBAAqB,OAAO;AAE5B,QAAI,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC7B,WAAK,WAAW,MAAM,GAAG,oBAAoB,sBAAsB;AACnE,YAAM,cAAc,MAAM,KAAK,oBAAoB;AACnD,UAAI,UAAU;AACd,iBAAW,gBAAgB,OAAO,KAAK,IAAI,GAAG;AAC7C,kBAAU,KAAK,SAAS,CAAC,YAAY,GAAG,KAAK,YAAY,GAAG,CAAC,CAAC;AAAA,MAC/D;AACA,UAAI,gBAAgB,SAAS;AAC5B,aAAK,WAAW,MAAM,GAAG,oBAAoB,sBAAsB;AACnE,cAAM,KAAK,YAAY,UAAU,KAAK,mBAAmB,cAAc,SAAS,WAAW,OAAO,CAAC;AACnG,aAAK,WAAW,KAAK,GAAG,oBAAoB,mBAAmB;AAAA,MAChE;AACA,WAAK,WAAW,KAAK,GAAG,oBAAoB,kBAAkB;AAAA,IAC/D;AAEA,QAAI,eAAe,MAAM;AACxB,WAAK,WAAW,MAAM,GAAG,oBAAoB,4BAA4B;AACzE,YAAM,KAAK,8BAA8B,kBAAkB,SAAS,gBAAgB,cAAc,IAAI;AACtG,WAAK,WAAW,KAAK,GAAG,oBAAoB,0BAA0B,CAAC,GAAG,eAAe,KAAK,CAAC,CAAC;AAAA,IACjG;AAAA,EACD;AACD;AAxFa,2BAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GALU;AA0FN,IAAM,yBAAN,cAAqC,oBAAoB;AAAA,EA7YhE,OA6YgE;AAAA;AAAA;AAAA,EAE/D,YACkB,gBACH,aACY,yBACL,oBACI,YACJ,oBACpB;AACD,UAAM,aAAa,aAAa,yBAAyB,oBAAoB,YAAY,aAAa,gBAAgB,kBAAkB;AAAA,EACzI;AAAA,EAEA,MAAgB,aAAa,gBAAgD;AAC5E,UAAM,oBAAkC,eAAe,WAAW,KAAK,MAAM,eAAe,SAAS,OAAO,IAAI;AAChH,QAAI,CAAC,mBAAmB;AACvB,WAAK,WAAW,KAAK,gFAAgF;AACrG;AAAA,IACD;AAEA,UAAM,OAA+B,CAAC;AACtC,UAAM,UAAkC,CAAC;AACzC,eAAW,OAAO,OAAO,KAAK,kBAAkB,OAAO,GAAG;AACzD,UAAI,IAAI,WAAW,gBAAgB,GAAG;AACrC,aAAK,IAAI,UAAU,iBAAiB,MAAM,CAAC,IAAI,kBAAkB,QAAQ,GAAG,EAAE;AAAA,MAC/E,OAAO;AACN,YAAI,KAAK,eAAe,IAAI,KAAK,aAAa,OAAO,MAAM,QAAW;AACrE,kBAAQ,GAAG,IAAI,kBAAkB,QAAQ,GAAG,EAAE;AAAA,QAC/C;AAAA,MACD;AAAA,IACD;AAEA,QAAI,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC7B,UAAI,UAAU;AACd,UAAI;AACH,cAAM,cAAc,MAAM,KAAK,YAAY,SAAS,KAAK,mBAAmB,YAAY;AACxF,kBAAU,YAAY,MAAM,SAAS;AAAA,MACtC,SAAS,OAAO;AAAA,MAAE;AAClB,iBAAW,gBAAgB,OAAO,KAAK,IAAI,GAAG;AAC7C,kBAAU,KAAK,SAAS,CAAC,YAAY,GAAG,KAAK,YAAY,GAAG,CAAC,CAAC;AAAA,MAC/D;AACA,YAAM,KAAK,YAAY,UAAU,KAAK,mBAAmB,cAAc,SAAS,WAAW,OAAO,CAAC;AAAA,IACpG;AAEA,QAAI,OAAO,KAAK,OAAO,EAAE,QAAQ;AAChC,YAAM,iBAAuC,CAAC;AAC9C,iBAAW,OAAO,OAAO,KAAK,OAAO,GAAG;AACvC,uBAAe,KAAK,EAAE,KAAK,OAAO,QAAQ,GAAG,GAAG,OAAO,aAAa,SAAS,QAAQ,cAAc,KAAK,CAAC;AAAA,MAC1G;AACA,WAAK,eAAe,SAAS,gBAAgB,IAAI;AAAA,IAClD;AAAA,EACD;AAED;AArDa,yBAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GARU;AAuDN,IAAM,oCAAN,MAAwC;AAAA,EAE9C,YACkB,yBACiB,gBACI,oBACP,aACD,YAC7B;AALgB;AACiB;AACI;AACP;AACD;AAAA,EAE/B;AAAA,EA7cD,OAoc+C;AAAA;AAAA;AAAA,EAW9C,iBAAiB,UAAwD;AACxE,UAAM,oBAAoB,KAAK,iBAAiB,QAAQ;AACxD,WAAO,mBAAmB,QAAQ,qBAAqB,GAAG;AAAA,EAC3D;AAAA,EAEA,MAAM,KAAK,uBAA6D;AACvE,UAAM,cAAc,kBAAkB,aAAa,CAAC;AACpD,QAAI;AACH,aAAO,MAAM,KAAK,OAAO,uBAAuB,WAAW;AAAA,IAC5D,SAAS,GAAG;AACX,UAAI,aAAa,mBAAmB;AACnC,gBAAQ,EAAE,MAAM;AAAA,UACf,KAAK,sBAAsB;AAC1B,iBAAK,WAAW,KAAK,gHAAgH;AACrI,mBAAO,KAAK,OAAO,uBAAuB,WAAW;AAAA,QACvD;AAAA,MACD;AACA,YAAM;AAAA,IACP;AAAA,EACD;AAAA,EAEA,MAAc,OAAO,uBAA8C,aAAsC;AAExG,UAAM,sBAAsB,MAAM,KAAK,wBAAwB,aAAa,aAAa,aAAa,MAAM,QAAW,WAAW;AAClI,UAAM,oBAAoB,KAAK,iBAAiB,mBAAmB,KAAK,EAAE,SAAS,CAAC,EAAE;AAGtF,sBAAkB,QAAQ,qBAAqB,IAAI,EAAE,OAAO,uBAAuB,SAAS,0BAA0B;AAGtH,UAAM,YAAY,MAAM,oBAAoB,KAAK,oBAAoB,KAAK,aAAa,KAAK,cAAc;AAC1G,UAAM,mBAA8B,EAAE,SAAS,2BAA2B,WAAW,SAAS,UAAU,mBAAmB,KAAK,EAAE;AAClI,UAAM,KAAK,wBAAwB,cAAc,aAAa,aAAa,KAAK,UAAU,gBAAgB,GAAG,oBAAoB,KAAK,QAAW,WAAW;AAAA,EAC7J;AAAA,EAEQ,iBAAiB,EAAE,QAAQ,GAAmC;AACrE,QAAI,CAAC,SAAS;AACb,aAAO;AAAA,IACR;AACA,UAAM,WAAW,KAAK,MAAM,OAAO;AACnC,QAAI,WAAW,QAAQ,GAAG;AACzB,aAAO,WAAW,KAAK,MAAM,SAAS,OAAO,IAAI;AAAA,IAClD;AACA,UAAM,IAAI,MAAM,qBAAqB;AAAA,EACtC;AAED;AAzDa,oCAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAPU;",
  "names": ["profile"]
}
