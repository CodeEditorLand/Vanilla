{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/globalStateSync.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { getErrorMessage } from \"../../../base/common/errors.js\";\nimport { Event } from \"../../../base/common/event.js\";\nimport { parse } from \"../../../base/common/json.js\";\nimport { toFormattedString } from \"../../../base/common/jsonFormatter.js\";\nimport { isWeb } from \"../../../base/common/platform.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport type { IHeaders } from \"../../../base/parts/request/common/request.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport { getServiceMachineId } from \"../../externalServices/common/serviceMachineId.js\";\nimport { IFileService } from \"../../files/common/files.js\";\nimport { IInstantiationService } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport {\n\ttype IStorageEntry,\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../storage/common/storage.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport {\n\ttype IUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../userDataProfile/common/userDataProfile.js\";\nimport { IUserDataProfileStorageService } from \"../../userDataProfile/common/userDataProfileStorageService.js\";\nimport {\n\tAbstractInitializer,\n\tAbstractSynchroniser,\n\ttype IAcceptResult,\n\ttype IMergeResult,\n\ttype IResourcePreview,\n\tgetSyncResourceLogLabel,\n\tisSyncData,\n} from \"./abstractSynchronizer.js\";\nimport { edit } from \"./content.js\";\nimport { merge } from \"./globalStateMerge.js\";\nimport {\n\tALL_SYNC_RESOURCES,\n\tChange,\n\ttype IGlobalState,\n\ttype IRemoteUserData,\n\ttype IStorageValue,\n\ttype ISyncData,\n\ttype IUserData,\n\tIUserDataSyncEnablementService,\n\tIUserDataSyncLocalStoreService,\n\tIUserDataSyncLogService,\n\tIUserDataSyncStoreService,\n\ttype IUserDataSynchroniser,\n\tSYNC_SERVICE_URL_TYPE,\n\tSyncResource,\n\tUSER_DATA_SYNC_SCHEME,\n\tUserDataSyncError,\n\tUserDataSyncErrorCode,\n\ttype UserDataSyncStoreType,\n\tcreateSyncHeaders,\n\tgetEnablementKey,\n} from \"./userDataSync.js\";\nimport type { UserDataSyncStoreClient } from \"./userDataSyncStoreService.js\";\n\nconst argvStoragePrefx = \"globalState.argv.\";\nconst argvProperties: string[] = [\"locale\"];\n\ntype StorageKeys = {\n\tmachine: string[];\n\tuser: string[];\n\tunregistered: string[];\n};\n\ninterface IGlobalStateResourceMergeResult extends IAcceptResult {\n\treadonly local: {\n\t\tadded: IStringDictionary<IStorageValue>;\n\t\tremoved: string[];\n\t\tupdated: IStringDictionary<IStorageValue>;\n\t};\n\treadonly remote: {\n\t\tadded: string[];\n\t\tremoved: string[];\n\t\tupdated: string[];\n\t\tall: IStringDictionary<IStorageValue> | null;\n\t};\n}\n\ninterface IGlobalStateResourcePreview extends IResourcePreview {\n\treadonly localUserData: IGlobalState;\n\treadonly previewResult: IGlobalStateResourceMergeResult;\n\treadonly storageKeys: StorageKeys;\n}\n\nexport function stringify(globalState: IGlobalState, format: boolean): string {\n\tconst storageKeys = globalState.storage\n\t\t? Object.keys(globalState.storage).sort()\n\t\t: [];\n\tconst storage: IStringDictionary<IStorageValue> = {};\n\tstorageKeys.forEach((key) => (storage[key] = globalState.storage[key]));\n\tglobalState.storage = storage;\n\treturn format\n\t\t? toFormattedString(globalState, {})\n\t\t: JSON.stringify(globalState);\n}\n\nconst GLOBAL_STATE_DATA_VERSION = 1;\n\n/**\n * Synchronises global state that includes\n * \t- Global storage with user scope\n * \t- Locale from argv properties\n *\n * Global storage is synced without checking version just like other resources (settings, keybindings).\n * If there is a change in format of the value of a storage key which requires migration then\n * \t\tOwner of that key should remove that key from user scope and replace that with new user scoped key.\n */\nexport class GlobalStateSynchroniser\n\textends AbstractSynchroniser\n\timplements IUserDataSynchroniser\n{\n\tprotected readonly version: number = GLOBAL_STATE_DATA_VERSION;\n\tprivate readonly previewResource: URI = this.extUri.joinPath(\n\t\tthis.syncPreviewFolder,\n\t\t\"globalState.json\",\n\t);\n\tprivate readonly baseResource: URI = this.previewResource.with({\n\t\tscheme: USER_DATA_SYNC_SCHEME,\n\t\tauthority: \"base\",\n\t});\n\tprivate readonly localResource: URI = this.previewResource.with({\n\t\tscheme: USER_DATA_SYNC_SCHEME,\n\t\tauthority: \"local\",\n\t});\n\tprivate readonly remoteResource: URI = this.previewResource.with({\n\t\tscheme: USER_DATA_SYNC_SCHEME,\n\t\tauthority: \"remote\",\n\t});\n\tprivate readonly acceptedResource: URI = this.previewResource.with({\n\t\tscheme: USER_DATA_SYNC_SCHEME,\n\t\tauthority: \"accepted\",\n\t});\n\n\tprivate readonly localGlobalStateProvider: LocalGlobalStateProvider;\n\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper({ syncResource: SyncResource.GlobalState, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t\tthis.localGlobalStateProvider = instantiationService.createInstance(LocalGlobalStateProvider);\n\t\tthis._register(fileService.watch(this.extUri.dirname(this.environmentService.argvResource)));\n\t\tthis._register(\n\t\t\tEvent.any(\n\t\t\t\t/* Locale change */\n\t\t\t\tEvent.filter(fileService.onDidFilesChange, e => e.contains(this.environmentService.argvResource)),\n\t\t\t\tEvent.filter(userDataProfileStorageService.onDidChange, e => {\n\t\t\t\t\t/* StorageTarget has changed in profile storage */\n\t\t\t\t\tif (e.targetChanges.some(profile => this.syncResource.profile.id === profile.id)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t/* User storage data has changed in profile storage */\n\t\t\t\t\tif (e.valueChanges.some(({ profile, changes }) => this.syncResource.profile.id === profile.id && changes.some(change => change.target === StorageTarget.USER))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}),\n\t\t\t)((() => this.triggerLocalChange()))\n\t\t);\n\t}\n\n\tprotected async generateSyncPreview(\n\t\tremoteUserData: IRemoteUserData,\n\t\tlastSyncUserData: IRemoteUserData | null,\n\t\tisRemoteDataFromCurrentMachine: boolean,\n\t): Promise<IGlobalStateResourcePreview[]> {\n\t\tconst remoteGlobalState: IGlobalState = remoteUserData.syncData\n\t\t\t? JSON.parse(remoteUserData.syncData.content)\n\t\t\t: null;\n\n\t\t// Use remote data as last sync data if last sync data does not exist and remote data is from same machine\n\t\tlastSyncUserData =\n\t\t\tlastSyncUserData === null && isRemoteDataFromCurrentMachine\n\t\t\t\t? remoteUserData\n\t\t\t\t: lastSyncUserData;\n\t\tconst lastSyncGlobalState: IGlobalState | null =\n\t\t\tlastSyncUserData && lastSyncUserData.syncData\n\t\t\t\t? JSON.parse(lastSyncUserData.syncData.content)\n\t\t\t\t: null;\n\n\t\tconst localGlobalState =\n\t\t\tawait this.localGlobalStateProvider.getLocalGlobalState(\n\t\t\t\tthis.syncResource.profile,\n\t\t\t);\n\n\t\tif (remoteGlobalState) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`${this.syncResourceLogLabel}: Merging remote ui state with local ui state...`,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.logService.trace(\n\t\t\t\t`${this.syncResourceLogLabel}: Remote ui state does not exist. Synchronizing ui state for the first time.`,\n\t\t\t);\n\t\t}\n\n\t\tconst storageKeys = await this.getStorageKeys(lastSyncGlobalState);\n\t\tconst { local, remote } = merge(\n\t\t\tlocalGlobalState.storage,\n\t\t\tremoteGlobalState ? remoteGlobalState.storage : null,\n\t\t\tlastSyncGlobalState ? lastSyncGlobalState.storage : null,\n\t\t\tstorageKeys,\n\t\t\tthis.logService,\n\t\t);\n\t\tconst previewResult: IGlobalStateResourceMergeResult = {\n\t\t\tcontent: null,\n\t\t\tlocal,\n\t\t\tremote,\n\t\t\tlocalChange:\n\t\t\t\tObject.keys(local.added).length > 0 ||\n\t\t\t\tObject.keys(local.updated).length > 0 ||\n\t\t\t\tlocal.removed.length > 0\n\t\t\t\t\t? Change.Modified\n\t\t\t\t\t: Change.None,\n\t\t\tremoteChange: remote.all !== null ? Change.Modified : Change.None,\n\t\t};\n\n\t\tconst localContent = stringify(localGlobalState, false);\n\t\treturn [\n\t\t\t{\n\t\t\t\tbaseResource: this.baseResource,\n\t\t\t\tbaseContent: lastSyncGlobalState\n\t\t\t\t\t? stringify(lastSyncGlobalState, false)\n\t\t\t\t\t: localContent,\n\t\t\t\tlocalResource: this.localResource,\n\t\t\t\tlocalContent,\n\t\t\t\tlocalUserData: localGlobalState,\n\t\t\t\tremoteResource: this.remoteResource,\n\t\t\t\tremoteContent: remoteGlobalState\n\t\t\t\t\t? stringify(remoteGlobalState, false)\n\t\t\t\t\t: null,\n\t\t\t\tpreviewResource: this.previewResource,\n\t\t\t\tpreviewResult,\n\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\tacceptedResource: this.acceptedResource,\n\t\t\t\tstorageKeys,\n\t\t\t},\n\t\t];\n\t}\n\n\tprotected async hasRemoteChanged(\n\t\tlastSyncUserData: IRemoteUserData,\n\t): Promise<boolean> {\n\t\tconst lastSyncGlobalState: IGlobalState | null =\n\t\t\tlastSyncUserData.syncData\n\t\t\t\t? JSON.parse(lastSyncUserData.syncData.content)\n\t\t\t\t: null;\n\t\tif (lastSyncGlobalState === null) {\n\t\t\treturn true;\n\t\t}\n\t\tconst localGlobalState =\n\t\t\tawait this.localGlobalStateProvider.getLocalGlobalState(\n\t\t\t\tthis.syncResource.profile,\n\t\t\t);\n\t\tconst storageKeys = await this.getStorageKeys(lastSyncGlobalState);\n\t\tconst { remote } = merge(\n\t\t\tlocalGlobalState.storage,\n\t\t\tlastSyncGlobalState.storage,\n\t\t\tlastSyncGlobalState.storage,\n\t\t\tstorageKeys,\n\t\t\tthis.logService,\n\t\t);\n\t\treturn remote.all !== null;\n\t}\n\n\tprotected async getMergeResult(\n\t\tresourcePreview: IGlobalStateResourcePreview,\n\t\ttoken: CancellationToken,\n\t): Promise<IMergeResult> {\n\t\treturn { ...resourcePreview.previewResult, hasConflicts: false };\n\t}\n\n\tprotected async getAcceptResult(\n\t\tresourcePreview: IGlobalStateResourcePreview,\n\t\tresource: URI,\n\t\tcontent: string | null | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<IGlobalStateResourceMergeResult> {\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqual(resource, this.localResource)) {\n\t\t\treturn this.acceptLocal(resourcePreview);\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqual(resource, this.remoteResource)) {\n\t\t\treturn this.acceptRemote(resourcePreview);\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqual(resource, this.previewResource)) {\n\t\t\treturn resourcePreview.previewResult;\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprivate async acceptLocal(\n\t\tresourcePreview: IGlobalStateResourcePreview,\n\t): Promise<IGlobalStateResourceMergeResult> {\n\t\treturn {\n\t\t\tcontent: resourcePreview.localContent,\n\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t\tremote: {\n\t\t\t\tadded: Object.keys(resourcePreview.localUserData.storage),\n\t\t\t\tremoved: [],\n\t\t\t\tupdated: [],\n\t\t\t\tall: resourcePreview.localUserData.storage,\n\t\t\t},\n\t\t\tlocalChange: Change.None,\n\t\t\tremoteChange: Change.Modified,\n\t\t};\n\t}\n\n\tprivate async acceptRemote(\n\t\tresourcePreview: IGlobalStateResourcePreview,\n\t): Promise<IGlobalStateResourceMergeResult> {\n\t\tif (resourcePreview.remoteContent !== null) {\n\t\t\tconst remoteGlobalState: IGlobalState = JSON.parse(\n\t\t\t\tresourcePreview.remoteContent,\n\t\t\t);\n\t\t\tconst { local, remote } = merge(\n\t\t\t\tresourcePreview.localUserData.storage,\n\t\t\t\tremoteGlobalState.storage,\n\t\t\t\tnull,\n\t\t\t\tresourcePreview.storageKeys,\n\t\t\t\tthis.logService,\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal,\n\t\t\t\tremote,\n\t\t\t\tlocalChange:\n\t\t\t\t\tObject.keys(local.added).length > 0 ||\n\t\t\t\t\tObject.keys(local.updated).length > 0 ||\n\t\t\t\t\tlocal.removed.length > 0\n\t\t\t\t\t\t? Change.Modified\n\t\t\t\t\t\t: Change.None,\n\t\t\t\tremoteChange: remote !== null ? Change.Modified : Change.None,\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t\t\tremote: { added: [], removed: [], updated: [], all: null },\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\t}\n\n\tprotected async applyResult(\n\t\tremoteUserData: IRemoteUserData,\n\t\tlastSyncUserData: IRemoteUserData | null,\n\t\tresourcePreviews: [\n\t\t\tIGlobalStateResourcePreview,\n\t\t\tIGlobalStateResourceMergeResult,\n\t\t][],\n\t\tforce: boolean,\n\t): Promise<void> {\n\t\tconst { localUserData } = resourcePreviews[0][0];\n\t\tconst { local, remote, localChange, remoteChange } =\n\t\t\tresourcePreviews[0][1];\n\n\t\tif (localChange === Change.None && remoteChange === Change.None) {\n\t\t\tthis.logService.info(\n\t\t\t\t`${this.syncResourceLogLabel}: No changes found during synchronizing ui state.`,\n\t\t\t);\n\t\t}\n\n\t\tif (localChange !== Change.None) {\n\t\t\t// update local\n\t\t\tthis.logService.trace(\n\t\t\t\t`${this.syncResourceLogLabel}: Updating local ui state...`,\n\t\t\t);\n\t\t\tawait this.backupLocal(JSON.stringify(localUserData));\n\t\t\tawait this.localGlobalStateProvider.writeLocalGlobalState(\n\t\t\t\tlocal,\n\t\t\t\tthis.syncResource.profile,\n\t\t\t);\n\t\t\tthis.logService.info(\n\t\t\t\t`${this.syncResourceLogLabel}: Updated local ui state`,\n\t\t\t);\n\t\t}\n\n\t\tif (remoteChange !== Change.None) {\n\t\t\t// update remote\n\t\t\tthis.logService.trace(\n\t\t\t\t`${this.syncResourceLogLabel}: Updating remote ui state...`,\n\t\t\t);\n\t\t\tconst content = JSON.stringify({ storage: remote.all });\n\t\t\tremoteUserData = await this.updateRemoteUserData(\n\t\t\t\tcontent,\n\t\t\t\tforce ? null : remoteUserData.ref,\n\t\t\t);\n\t\t\tthis.logService.info(\n\t\t\t\t`${this.syncResourceLogLabel}: Updated remote ui state.${remote.added.length ? ` Added: ${remote.added}.` : \"\"}${remote.updated.length ? ` Updated: ${remote.updated}.` : \"\"}${remote.removed.length ? ` Removed: ${remote.removed}.` : \"\"}`,\n\t\t\t);\n\t\t}\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\t// update last sync\n\t\t\tthis.logService.trace(\n\t\t\t\t`${this.syncResourceLogLabel}: Updating last synchronized ui state...`,\n\t\t\t);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t\t\tthis.logService.info(\n\t\t\t\t`${this.syncResourceLogLabel}: Updated last synchronized ui state`,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync resolveContent(uri: URI): Promise<string | null> {\n\t\tif (\n\t\t\tthis.extUri.isEqual(this.remoteResource, uri) ||\n\t\t\tthis.extUri.isEqual(this.baseResource, uri) ||\n\t\t\tthis.extUri.isEqual(this.localResource, uri) ||\n\t\t\tthis.extUri.isEqual(this.acceptedResource, uri)\n\t\t) {\n\t\t\tconst content = await this.resolvePreviewContent(uri);\n\t\t\treturn content ? stringify(JSON.parse(content), true) : content;\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst { storage } =\n\t\t\t\tawait this.localGlobalStateProvider.getLocalGlobalState(\n\t\t\t\t\tthis.syncResource.profile,\n\t\t\t\t);\n\t\t\tif (\n\t\t\t\tObject.keys(storage).length > 1 ||\n\t\t\t\tstorage[`${argvStoragePrefx}.locale`]?.value !== \"en\"\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* ignore error */\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async getStorageKeys(\n\t\tlastSyncGlobalState: IGlobalState | null,\n\t): Promise<StorageKeys> {\n\t\tconst storageData =\n\t\t\tawait this.userDataProfileStorageService.readStorageData(\n\t\t\t\tthis.syncResource.profile,\n\t\t\t);\n\t\tconst user: string[] = [],\n\t\t\tmachine: string[] = [];\n\t\tfor (const [key, value] of storageData) {\n\t\t\tif (value.target === StorageTarget.USER) {\n\t\t\t\tuser.push(key);\n\t\t\t} else if (value.target === StorageTarget.MACHINE) {\n\t\t\t\tmachine.push(key);\n\t\t\t}\n\t\t}\n\t\tconst registered = [...user, ...machine];\n\t\tconst unregistered = lastSyncGlobalState?.storage\n\t\t\t? Object.keys(lastSyncGlobalState.storage).filter(\n\t\t\t\t\t(key) =>\n\t\t\t\t\t\t!key.startsWith(argvStoragePrefx) &&\n\t\t\t\t\t\t!registered.includes(key) &&\n\t\t\t\t\t\tstorageData.get(key) !== undefined,\n\t\t\t\t)\n\t\t\t: [];\n\n\t\tif (!isWeb) {\n\t\t\t// Following keys are synced only in web. Do not sync these keys in other platforms\n\t\t\tconst keysSyncedOnlyInWeb = [\n\t\t\t\t...ALL_SYNC_RESOURCES.map((resource) =>\n\t\t\t\t\tgetEnablementKey(resource),\n\t\t\t\t),\n\t\t\t\tSYNC_SERVICE_URL_TYPE,\n\t\t\t];\n\t\t\tunregistered.push(...keysSyncedOnlyInWeb);\n\t\t\tmachine.push(...keysSyncedOnlyInWeb);\n\t\t}\n\n\t\treturn { user, machine, unregistered };\n\t}\n}\n\nexport class LocalGlobalStateProvider {\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService\n\t) { }\n\n\tasync getLocalGlobalState(\n\t\tprofile: IUserDataProfile,\n\t): Promise<IGlobalState> {\n\t\tconst storage: IStringDictionary<IStorageValue> = {};\n\t\tif (profile.isDefault) {\n\t\t\tconst argvContent: string = await this.getLocalArgvContent();\n\t\t\tconst argvValue: IStringDictionary<any> = parse(argvContent);\n\t\t\tfor (const argvProperty of argvProperties) {\n\t\t\t\tif (argvValue[argvProperty] !== undefined) {\n\t\t\t\t\tstorage[`${argvStoragePrefx}${argvProperty}`] = {\n\t\t\t\t\t\tversion: 1,\n\t\t\t\t\t\tvalue: argvValue[argvProperty],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst storageData =\n\t\t\tawait this.userDataProfileStorageService.readStorageData(profile);\n\t\tfor (const [key, value] of storageData) {\n\t\t\tif (value.value && value.target === StorageTarget.USER) {\n\t\t\t\tstorage[key] = { version: 1, value: value.value };\n\t\t\t}\n\t\t}\n\t\treturn { storage };\n\t}\n\n\tprivate async getLocalArgvContent(): Promise<string> {\n\t\ttry {\n\t\t\tthis.logService.debug(\n\t\t\t\t\"GlobalStateSync#getLocalArgvContent\",\n\t\t\t\tthis.environmentService.argvResource,\n\t\t\t);\n\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\tthis.environmentService.argvResource,\n\t\t\t);\n\t\t\tthis.logService.debug(\n\t\t\t\t\"GlobalStateSync#getLocalArgvContent - Resolved\",\n\t\t\t\tthis.environmentService.argvResource,\n\t\t\t);\n\t\t\treturn content.value.toString();\n\t\t} catch (error) {\n\t\t\tthis.logService.debug(getErrorMessage(error));\n\t\t}\n\t\treturn \"{}\";\n\t}\n\n\tasync writeLocalGlobalState(\n\t\t{\n\t\t\tadded,\n\t\t\tremoved,\n\t\t\tupdated,\n\t\t}: {\n\t\t\tadded: IStringDictionary<IStorageValue>;\n\t\t\tupdated: IStringDictionary<IStorageValue>;\n\t\t\tremoved: string[];\n\t\t},\n\t\tprofile: IUserDataProfile,\n\t): Promise<void> {\n\t\tconst syncResourceLogLabel = getSyncResourceLogLabel(\n\t\t\tSyncResource.GlobalState,\n\t\t\tprofile,\n\t\t);\n\t\tconst argv: IStringDictionary<any> = {};\n\t\tconst updatedStorage = new Map<string, string | undefined>();\n\t\tconst storageData =\n\t\t\tawait this.userDataProfileStorageService.readStorageData(profile);\n\t\tconst handleUpdatedStorage = (\n\t\t\tkeys: string[],\n\t\t\tstorage?: IStringDictionary<IStorageValue>,\n\t\t): void => {\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key.startsWith(argvStoragePrefx)) {\n\t\t\t\t\targv[key.substring(argvStoragePrefx.length)] = storage\n\t\t\t\t\t\t? storage[key].value\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (storage) {\n\t\t\t\t\tconst storageValue = storage[key];\n\t\t\t\t\tif (storageValue.value !== storageData.get(key)?.value) {\n\t\t\t\t\t\tupdatedStorage.set(key, storageValue.value);\n\t\t\t\t\t}\n\t\t\t\t} else if (storageData.get(key) !== undefined) {\n\t\t\t\t\tupdatedStorage.set(key, undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\thandleUpdatedStorage(Object.keys(added), added);\n\t\thandleUpdatedStorage(Object.keys(updated), updated);\n\t\thandleUpdatedStorage(removed);\n\n\t\tif (Object.keys(argv).length) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`${syncResourceLogLabel}: Updating locale...`,\n\t\t\t);\n\t\t\tconst argvContent = await this.getLocalArgvContent();\n\t\t\tlet content = argvContent;\n\t\t\tfor (const argvProperty of Object.keys(argv)) {\n\t\t\t\tcontent = edit(content, [argvProperty], argv[argvProperty], {});\n\t\t\t}\n\t\t\tif (argvContent !== content) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`${syncResourceLogLabel}: Updating locale...`,\n\t\t\t\t);\n\t\t\t\tawait this.fileService.writeFile(\n\t\t\t\t\tthis.environmentService.argvResource,\n\t\t\t\t\tVSBuffer.fromString(content),\n\t\t\t\t);\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`${syncResourceLogLabel}: Updated locale.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.logService.info(`${syncResourceLogLabel}: Updated locale`);\n\t\t}\n\n\t\tif (updatedStorage.size) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`${syncResourceLogLabel}: Updating global state...`,\n\t\t\t);\n\t\t\tawait this.userDataProfileStorageService.updateStorageData(\n\t\t\t\tprofile,\n\t\t\t\tupdatedStorage,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t\tthis.logService.info(\n\t\t\t\t`${syncResourceLogLabel}: Updated global state`,\n\t\t\t\t[...updatedStorage.keys()],\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport class GlobalStateInitializer extends AbstractInitializer {\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(\n\t\t\tSyncResource.GlobalState,\n\t\t\tuserDataProfilesService,\n\t\t\tenvironmentService,\n\t\t\tlogService,\n\t\t\tfileService,\n\t\t\tstorageService,\n\t\t\turiIdentityService,\n\t\t);\n\t}\n\n\tprotected async doInitialize(\n\t\tremoteUserData: IRemoteUserData,\n\t): Promise<void> {\n\t\tconst remoteGlobalState: IGlobalState = remoteUserData.syncData\n\t\t\t? JSON.parse(remoteUserData.syncData.content)\n\t\t\t: null;\n\t\tif (!remoteGlobalState) {\n\t\t\tthis.logService.info(\n\t\t\t\t\"Skipping initializing global state because remote global state does not exist.\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst argv: IStringDictionary<any> = {};\n\t\tconst storage: IStringDictionary<any> = {};\n\t\tfor (const key of Object.keys(remoteGlobalState.storage)) {\n\t\t\tif (key.startsWith(argvStoragePrefx)) {\n\t\t\t\targv[key.substring(argvStoragePrefx.length)] =\n\t\t\t\t\tremoteGlobalState.storage[key].value;\n\t\t\t} else if (\n\t\t\t\tthis.storageService.get(key, StorageScope.PROFILE) === undefined\n\t\t\t) {\n\t\t\t\tstorage[key] = remoteGlobalState.storage[key].value;\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(argv).length) {\n\t\t\tlet content = \"{}\";\n\t\t\ttry {\n\t\t\t\tconst fileContent = await this.fileService.readFile(\n\t\t\t\t\tthis.environmentService.argvResource,\n\t\t\t\t);\n\t\t\t\tcontent = fileContent.value.toString();\n\t\t\t} catch (error) {}\n\t\t\tfor (const argvProperty of Object.keys(argv)) {\n\t\t\t\tcontent = edit(content, [argvProperty], argv[argvProperty], {});\n\t\t\t}\n\t\t\tawait this.fileService.writeFile(\n\t\t\t\tthis.environmentService.argvResource,\n\t\t\t\tVSBuffer.fromString(content),\n\t\t\t);\n\t\t}\n\n\t\tif (Object.keys(storage).length) {\n\t\t\tconst storageEntries: Array<IStorageEntry> = [];\n\t\t\tfor (const key of Object.keys(storage)) {\n\t\t\t\tstorageEntries.push({\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue: storage[key],\n\t\t\t\t\tscope: StorageScope.PROFILE,\n\t\t\t\t\ttarget: StorageTarget.USER,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.storageService.storeAll(storageEntries, true);\n\t\t}\n\t}\n}\n\nexport class UserDataSyncStoreTypeSynchronizer {\n\tconstructor(\n\t\tprivate readonly userDataSyncStoreClient: UserDataSyncStoreClient,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tgetSyncStoreType(userData: IUserData): UserDataSyncStoreType | undefined {\n\t\tconst remoteGlobalState = this.parseGlobalState(userData);\n\t\treturn remoteGlobalState?.storage[SYNC_SERVICE_URL_TYPE]\n\t\t\t?.value as UserDataSyncStoreType;\n\t}\n\n\tasync sync(userDataSyncStoreType: UserDataSyncStoreType): Promise<void> {\n\t\tconst syncHeaders = createSyncHeaders(generateUuid());\n\t\ttry {\n\t\t\treturn await this.doSync(userDataSyncStoreType, syncHeaders);\n\t\t} catch (e) {\n\t\t\tif (e instanceof UserDataSyncError) {\n\t\t\t\tswitch (e.code) {\n\t\t\t\t\tcase UserDataSyncErrorCode.PreconditionFailed:\n\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t`Failed to synchronize UserDataSyncStoreType as there is a new remote version available. Synchronizing again...`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn this.doSync(userDataSyncStoreType, syncHeaders);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async doSync(\n\t\tuserDataSyncStoreType: UserDataSyncStoreType,\n\t\tsyncHeaders: IHeaders,\n\t): Promise<void> {\n\t\t// Read the global state from remote\n\t\tconst globalStateUserData =\n\t\t\tawait this.userDataSyncStoreClient.readResource(\n\t\t\t\tSyncResource.GlobalState,\n\t\t\t\tnull,\n\t\t\t\tundefined,\n\t\t\t\tsyncHeaders,\n\t\t\t);\n\t\tconst remoteGlobalState = this.parseGlobalState(\n\t\t\tglobalStateUserData,\n\t\t) || { storage: {} };\n\n\t\t// Update the sync store type\n\t\tremoteGlobalState.storage[SYNC_SERVICE_URL_TYPE] = {\n\t\t\tvalue: userDataSyncStoreType,\n\t\t\tversion: GLOBAL_STATE_DATA_VERSION,\n\t\t};\n\n\t\t// Write the global state to remote\n\t\tconst machineId = await getServiceMachineId(\n\t\t\tthis.environmentService,\n\t\t\tthis.fileService,\n\t\t\tthis.storageService,\n\t\t);\n\t\tconst syncDataToUpdate: ISyncData = {\n\t\t\tversion: GLOBAL_STATE_DATA_VERSION,\n\t\t\tmachineId,\n\t\t\tcontent: stringify(remoteGlobalState, false),\n\t\t};\n\t\tawait this.userDataSyncStoreClient.writeResource(\n\t\t\tSyncResource.GlobalState,\n\t\t\tJSON.stringify(syncDataToUpdate),\n\t\t\tglobalStateUserData.ref,\n\t\t\tundefined,\n\t\t\tsyncHeaders,\n\t\t);\n\t}\n\n\tprivate parseGlobalState({ content }: IUserData): IGlobalState | null {\n\t\tif (!content) {\n\t\t\treturn null;\n\t\t}\n\t\tconst syncData = JSON.parse(content);\n\t\tif (isSyncData(syncData)) {\n\t\t\treturn syncData ? JSON.parse(syncData.content) : null;\n\t\t}\n\t\tthrow new Error(\"Invalid remote data\");\n\t}\n}\n"],
  "mappings": "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",
  "names": ["profile"]
}
