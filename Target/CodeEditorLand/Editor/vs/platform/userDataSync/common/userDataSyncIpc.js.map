{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/userDataSyncIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type {\n\tIChannel,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { IStorageService } from \"../../storage/common/storage.js\";\nimport type {\n\tIUserDataSyncStore,\n\tIUserDataSyncStoreManagementService,\n\tUserDataSyncStoreType,\n} from \"./userDataSync.js\";\nimport type {\n\tIUserDataSyncAccount,\n\tIUserDataSyncAccountService,\n} from \"./userDataSyncAccount.js\";\nimport { AbstractUserDataSyncStoreManagementService } from \"./userDataSyncStoreService.js\";\n\nexport class UserDataSyncAccountServiceChannel implements IServerChannel {\n\tconstructor(private readonly service: IUserDataSyncAccountService) {}\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase \"onDidChangeAccount\":\n\t\t\t\treturn this.service.onDidChangeAccount;\n\t\t\tcase \"onTokenFailed\":\n\t\t\t\treturn this.service.onTokenFailed;\n\t\t}\n\t\tthrow new Error(\n\t\t\t`[UserDataSyncAccountServiceChannel] Event not found: ${event}`,\n\t\t);\n\t}\n\n\tcall(context: any, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase \"_getInitialData\":\n\t\t\t\treturn Promise.resolve(this.service.account);\n\t\t\tcase \"updateAccount\":\n\t\t\t\treturn this.service.updateAccount(args);\n\t\t}\n\t\tthrow new Error(\"Invalid call\");\n\t}\n}\n\nexport class UserDataSyncAccountServiceChannelClient\n\textends Disposable\n\timplements IUserDataSyncAccountService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _account: IUserDataSyncAccount | undefined;\n\tget account(): IUserDataSyncAccount | undefined {\n\t\treturn this._account;\n\t}\n\n\tget onTokenFailed(): Event<boolean> {\n\t\treturn this.channel.listen<boolean>(\"onTokenFailed\");\n\t}\n\n\tprivate _onDidChangeAccount = this._register(\n\t\tnew Emitter<IUserDataSyncAccount | undefined>(),\n\t);\n\treadonly onDidChangeAccount = this._onDidChangeAccount.event;\n\n\tconstructor(private readonly channel: IChannel) {\n\t\tsuper();\n\t\tthis.channel\n\t\t\t.call<IUserDataSyncAccount | undefined>(\"_getInitialData\")\n\t\t\t.then((account) => {\n\t\t\t\tthis._account = account;\n\t\t\t\tthis._register(\n\t\t\t\t\tthis.channel.listen<IUserDataSyncAccount | undefined>(\n\t\t\t\t\t\t\"onDidChangeAccount\",\n\t\t\t\t\t)((account) => {\n\t\t\t\t\t\tthis._account = account;\n\t\t\t\t\t\tthis._onDidChangeAccount.fire(account);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t});\n\t}\n\n\tupdateAccount(\n\t\taccount: IUserDataSyncAccount | undefined,\n\t): Promise<undefined> {\n\t\treturn this.channel.call(\"updateAccount\", account);\n\t}\n}\n\nexport class UserDataSyncStoreManagementServiceChannel\n\timplements IServerChannel\n{\n\tconstructor(\n\t\tprivate readonly service: IUserDataSyncStoreManagementService,\n\t) {}\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase \"onDidChangeUserDataSyncStore\":\n\t\t\t\treturn this.service.onDidChangeUserDataSyncStore;\n\t\t}\n\t\tthrow new Error(\n\t\t\t`[UserDataSyncStoreManagementServiceChannel] Event not found: ${event}`,\n\t\t);\n\t}\n\n\tcall(context: any, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase \"switch\":\n\t\t\t\treturn this.service.switch(args[0]);\n\t\t\tcase \"getPreviousUserDataSyncStore\":\n\t\t\t\treturn this.service.getPreviousUserDataSyncStore();\n\t\t}\n\t\tthrow new Error(\"Invalid call\");\n\t}\n}\n\nexport class UserDataSyncStoreManagementServiceChannelClient\n\textends AbstractUserDataSyncStoreManagementService\n\timplements IUserDataSyncStoreManagementService\n{\n\tconstructor(\n\t\tprivate readonly channel: IChannel,\n\t\t@IProductService productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper(productService, configurationService, storageService);\n\t\tthis._register(\n\t\t\tthis.channel.listen<void>(\"onDidChangeUserDataSyncStore\")(() =>\n\t\t\t\tthis.updateUserDataSyncStore(),\n\t\t\t),\n\t\t);\n\t}\n\n\tasync switch(type: UserDataSyncStoreType): Promise<void> {\n\t\treturn this.channel.call(\"switch\", [type]);\n\t}\n\n\tasync getPreviousUserDataSyncStore(): Promise<IUserDataSyncStore> {\n\t\tconst userDataSyncStore = await this.channel.call<IUserDataSyncStore>(\n\t\t\t\"getPreviousUserDataSyncStore\",\n\t\t);\n\t\treturn this.revive(userDataSyncStore);\n\t}\n\n\tprivate revive(userDataSyncStore: IUserDataSyncStore): IUserDataSyncStore {\n\t\treturn {\n\t\t\turl: URI.revive(userDataSyncStore.url),\n\t\t\ttype: userDataSyncStore.type,\n\t\t\tdefaultUrl: URI.revive(userDataSyncStore.defaultUrl),\n\t\t\tinsidersUrl: URI.revive(userDataSyncStore.insidersUrl),\n\t\t\tstableUrl: URI.revive(userDataSyncStore.stableUrl),\n\t\t\tcanSwitch: userDataSyncStore.canSwitch,\n\t\t\tauthenticationProviders: userDataSyncStore.authenticationProviders,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["account"]
}
