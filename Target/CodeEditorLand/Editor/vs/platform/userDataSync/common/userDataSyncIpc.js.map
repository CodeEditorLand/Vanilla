{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/userDataSyncIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IChannel, IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { IUserDataSyncStore, IUserDataSyncStoreManagementService, UserDataSyncStoreType } from './userDataSync.js';\nimport { IUserDataSyncAccount, IUserDataSyncAccountService } from './userDataSyncAccount.js';\nimport { AbstractUserDataSyncStoreManagementService } from './userDataSyncStoreService.js';\n\nexport class UserDataSyncAccountServiceChannel implements IServerChannel {\n\tconstructor(private readonly service: IUserDataSyncAccountService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeAccount': return this.service.onDidChangeAccount;\n\t\t\tcase 'onTokenFailed': return this.service.onTokenFailed;\n\t\t}\n\t\tthrow new Error(`[UserDataSyncAccountServiceChannel] Event not found: ${event}`);\n\t}\n\n\tcall(context: any, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase '_getInitialData': return Promise.resolve(this.service.account);\n\t\t\tcase 'updateAccount': return this.service.updateAccount(args);\n\t\t}\n\t\tthrow new Error('Invalid call');\n\t}\n}\n\nexport class UserDataSyncAccountServiceChannelClient extends Disposable implements IUserDataSyncAccountService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _account: IUserDataSyncAccount | undefined;\n\tget account(): IUserDataSyncAccount | undefined { return this._account; }\n\n\tget onTokenFailed(): Event<boolean> { return this.channel.listen<boolean>('onTokenFailed'); }\n\n\tprivate _onDidChangeAccount = this._register(new Emitter<IUserDataSyncAccount | undefined>());\n\treadonly onDidChangeAccount = this._onDidChangeAccount.event;\n\n\tconstructor(private readonly channel: IChannel) {\n\t\tsuper();\n\t\tthis.channel.call<IUserDataSyncAccount | undefined>('_getInitialData').then(account => {\n\t\t\tthis._account = account;\n\t\t\tthis._register(this.channel.listen<IUserDataSyncAccount | undefined>('onDidChangeAccount')(account => {\n\t\t\t\tthis._account = account;\n\t\t\t\tthis._onDidChangeAccount.fire(account);\n\t\t\t}));\n\t\t});\n\t}\n\n\tupdateAccount(account: IUserDataSyncAccount | undefined): Promise<undefined> {\n\t\treturn this.channel.call('updateAccount', account);\n\t}\n\n}\n\nexport class UserDataSyncStoreManagementServiceChannel implements IServerChannel {\n\tconstructor(private readonly service: IUserDataSyncStoreManagementService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeUserDataSyncStore': return this.service.onDidChangeUserDataSyncStore;\n\t\t}\n\t\tthrow new Error(`[UserDataSyncStoreManagementServiceChannel] Event not found: ${event}`);\n\t}\n\n\tcall(context: any, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'switch': return this.service.switch(args[0]);\n\t\t\tcase 'getPreviousUserDataSyncStore': return this.service.getPreviousUserDataSyncStore();\n\t\t}\n\t\tthrow new Error('Invalid call');\n\t}\n}\n\nexport class UserDataSyncStoreManagementServiceChannelClient extends AbstractUserDataSyncStoreManagementService implements IUserDataSyncStoreManagementService {\n\n\tconstructor(\n\t\tprivate readonly channel: IChannel,\n\t\t@IProductService productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper(productService, configurationService, storageService);\n\t\tthis._register(this.channel.listen<void>('onDidChangeUserDataSyncStore')(() => this.updateUserDataSyncStore()));\n\t}\n\n\tasync switch(type: UserDataSyncStoreType): Promise<void> {\n\t\treturn this.channel.call('switch', [type]);\n\t}\n\n\tasync getPreviousUserDataSyncStore(): Promise<IUserDataSyncStore> {\n\t\tconst userDataSyncStore = await this.channel.call<IUserDataSyncStore>('getPreviousUserDataSyncStore');\n\t\treturn this.revive(userDataSyncStore);\n\t}\n\n\tprivate revive(userDataSyncStore: IUserDataSyncStore): IUserDataSyncStore {\n\t\treturn {\n\t\t\turl: URI.revive(userDataSyncStore.url),\n\t\t\ttype: userDataSyncStore.type,\n\t\t\tdefaultUrl: URI.revive(userDataSyncStore.defaultUrl),\n\t\t\tinsidersUrl: URI.revive(userDataSyncStore.insidersUrl),\n\t\t\tstableUrl: URI.revive(userDataSyncStore.stableUrl),\n\t\t\tcanSwitch: userDataSyncStore.canSwitch,\n\t\t\tauthenticationProviders: userDataSyncStore.authenticationProviders,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["account"]
}
