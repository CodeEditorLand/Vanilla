import"../../../../vs/base/common/collections.js";import*as y from"../../../../vs/base/common/objects.js";import"../../../../vs/platform/log/common/log.js";import{SYNC_SERVICE_URL_TYPE as g}from"../../../../vs/platform/userDataSync/common/userDataSync.js";function b(t,n,a,o,f){if(!n)return{remote:{added:Object.keys(t),removed:[],updated:[],all:Object.keys(t).length>0?t:null},local:{added:{},removed:[],updated:{}}};const c=p(t,n);if(c.added.size===0&&c.removed.size===0&&c.updated.size===0)return{remote:{added:[],removed:[],updated:[],all:null},local:{added:{},removed:[],updated:{}}};const s=a?p(a,n):{added:Object.keys(n).reduce((e,r)=>(e.add(r),e),new Set),removed:new Set,updated:new Set},d=a?p(a,t):{added:Object.keys(t).reduce((e,r)=>(e.add(r),e),new Set),removed:new Set,updated:new Set},i={added:{},removed:[],updated:{}},u=y.deepClone(n),v=!a;for(const e of d.added.values())e!==g&&v&&s.added.has(e)||(u[e]=t[e]);for(const e of d.updated.values())u[e]=t[e];for(const e of d.removed.values())o.unregistered.includes(e)||delete u[e];for(const e of s.added.values()){const r=n[e];if(o.machine.includes(e)){f.info(`GlobalState: Skipped adding ${e} in local storage because it is declared as machine scoped.`);continue}if(a&&d.added.has(e))continue;const m=t[e];m&&m.value===r.value||e===g&&v&&d.added.has(e)||(m?i.updated[e]=r:i.added[e]=r)}for(const e of s.updated.values()){const r=n[e];if(o.machine.includes(e)){f.info(`GlobalState: Skipped updating ${e} in local storage because it is declared as machine scoped.`);continue}if(d.updated.has(e)||d.removed.has(e))continue;const m=t[e];m&&m.value===r.value||(i.updated[e]=r)}for(const e of s.removed.values()){if(o.machine.includes(e)){f.trace(`GlobalState: Skipped removing ${e} in local storage because it is declared as machine scoped.`);continue}d.updated.has(e)||d.removed.has(e)||i.removed.push(e)}const l=p(n,u);return{local:i,remote:{added:[...l.added],updated:[...l.updated],removed:[...l.removed],all:l.added.size===0&&l.removed.size===0&&l.updated.size===0?null:u}}}function p(t,n){const a=Object.keys(t),o=Object.keys(n),f=o.filter(d=>!a.includes(d)).reduce((d,i)=>(d.add(i),d),new Set),c=a.filter(d=>!o.includes(d)).reduce((d,i)=>(d.add(i),d),new Set),s=new Set;for(const d of a){if(c.has(d))continue;const i=t[d],u=n[d];y.equals(i,u)||s.add(d)}return{added:f,removed:c,updated:s}}export{b as merge};
