{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/snippetsMerge.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\n\nexport interface IMergeResult {\n\tlocal: {\n\t\tadded: IStringDictionary<string>;\n\t\tupdated: IStringDictionary<string>;\n\t\tremoved: string[];\n\t};\n\tremote: {\n\t\tadded: IStringDictionary<string>;\n\t\tupdated: IStringDictionary<string>;\n\t\tremoved: string[];\n\t};\n\tconflicts: string[];\n}\n\nexport function merge(\n\tlocal: IStringDictionary<string>,\n\tremote: IStringDictionary<string> | null,\n\tbase: IStringDictionary<string> | null,\n): IMergeResult {\n\tconst localAdded: IStringDictionary<string> = {};\n\tconst localUpdated: IStringDictionary<string> = {};\n\tconst localRemoved: Set<string> = new Set<string>();\n\n\tif (!remote) {\n\t\treturn {\n\t\t\tlocal: {\n\t\t\t\tadded: localAdded,\n\t\t\t\tupdated: localUpdated,\n\t\t\t\tremoved: [...localRemoved.values()],\n\t\t\t},\n\t\t\tremote: { added: local, updated: {}, removed: [] },\n\t\t\tconflicts: [],\n\t\t};\n\t}\n\n\tconst localToRemote = compare(local, remote);\n\tif (\n\t\tlocalToRemote.added.size === 0 &&\n\t\tlocalToRemote.removed.size === 0 &&\n\t\tlocalToRemote.updated.size === 0\n\t) {\n\t\t// No changes found between local and remote.\n\t\treturn {\n\t\t\tlocal: {\n\t\t\t\tadded: localAdded,\n\t\t\t\tupdated: localUpdated,\n\t\t\t\tremoved: [...localRemoved.values()],\n\t\t\t},\n\t\t\tremote: { added: {}, updated: {}, removed: [] },\n\t\t\tconflicts: [],\n\t\t};\n\t}\n\n\tconst baseToLocal = compare(base, local);\n\tconst baseToRemote = compare(base, remote);\n\n\tconst remoteAdded: IStringDictionary<string> = {};\n\tconst remoteUpdated: IStringDictionary<string> = {};\n\tconst remoteRemoved: Set<string> = new Set<string>();\n\n\tconst conflicts: Set<string> = new Set<string>();\n\n\t// Removed snippets in Local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Conflict - Got updated in remote.\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Add to local\n\t\t\tlocalAdded[key] = remote[key];\n\t\t}\n\t\t// Remove it in remote\n\t\telse {\n\t\t\tremoteRemoved.add(key);\n\t\t}\n\t}\n\n\t// Removed snippets in Remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Conflict - Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\tconflicts.add(key);\n\t\t}\n\t\t// Also remove in Local\n\t\telse {\n\t\t\tlocalRemoved.add(key);\n\t\t}\n\t}\n\n\t// Updated snippets in Local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in remote\n\t\tif (baseToRemote.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteUpdated[key] = local[key];\n\t\t}\n\t}\n\n\t// Updated snippets in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got updated in local\n\t\tif (baseToLocal.updated.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else if (local[key] !== undefined) {\n\t\t\tlocalUpdated[key] = remote[key];\n\t\t}\n\t}\n\n\t// Added snippets in Local\n\tfor (const key of baseToLocal.added.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in remote\n\t\tif (baseToRemote.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\tremoteAdded[key] = local[key];\n\t\t}\n\t}\n\n\t// Added snippets in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tif (conflicts.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Got added in local\n\t\tif (baseToLocal.added.has(key)) {\n\t\t\t// Has different value\n\t\t\tif (localToRemote.updated.has(key)) {\n\t\t\t\tconflicts.add(key);\n\t\t\t}\n\t\t} else {\n\t\t\tlocalAdded[key] = remote[key];\n\t\t}\n\t}\n\n\treturn {\n\t\tlocal: {\n\t\t\tadded: localAdded,\n\t\t\tremoved: [...localRemoved.values()],\n\t\t\tupdated: localUpdated,\n\t\t},\n\t\tremote: {\n\t\t\tadded: remoteAdded,\n\t\t\tremoved: [...remoteRemoved.values()],\n\t\t\tupdated: remoteUpdated,\n\t\t},\n\t\tconflicts: [...conflicts.values()],\n\t};\n}\n\nfunction compare(\n\tfrom: IStringDictionary<string> | null,\n\tto: IStringDictionary<string> | null,\n): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = from ? Object.keys(from) : [];\n\tconst toKeys = to ? Object.keys(to) : [];\n\tconst added = toKeys\n\t\t.filter((key) => !fromKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst removed = fromKeys\n\t\t.filter((key) => !toKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst fromSnippet = from![key]!;\n\t\tconst toSnippet = to![key]!;\n\t\tif (fromSnippet !== toSnippet) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n\nexport function areSame(\n\ta: IStringDictionary<string>,\n\tb: IStringDictionary<string>,\n): boolean {\n\tconst { added, removed, updated } = compare(a, b);\n\treturn added.size === 0 && removed.size === 0 && updated.size === 0;\n}\n"],
  "mappings": "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",
  "names": []
}
