var P=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var C=(c,e,t,s)=>{for(var n=s>1?void 0:s?x(e,t):e,o=c.length-1,i;o>=0;o--)(i=c[o])&&(n=(s?i(e,t,n):i(n))||n);return s&&n&&P(e,t,n),n},r=(c,e)=>(t,s)=>e(t,s,c);import{VSBuffer as F}from"../../../base/common/buffer.js";import"../../../base/common/cancellation.js";import"../../../base/common/uri.js";import{IConfigurationService as T}from"../../configuration/common/configuration.js";import{IEnvironmentService as I}from"../../environment/common/environment.js";import{IFileService as w}from"../../files/common/files.js";import"../../log/common/log.js";import{IStorageService as U}from"../../storage/common/storage.js";import{ITelemetryService as M}from"../../telemetry/common/telemetry.js";import{IUriIdentityService as k}from"../../uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as N}from"../../userDataProfile/common/userDataProfile.js";import{AbstractFileSynchroniser as $,AbstractInitializer as A}from"./abstractSynchronizer.js";import{Change as a,IUserDataSyncEnablementService as q,IUserDataSyncLocalStoreService as z,IUserDataSyncLogService as L,IUserDataSyncStoreService as J,SyncResource as b,USER_DATA_SYNC_SCHEME as R}from"./userDataSync.js";function v(c,e){try{return JSON.parse(c).tasks??null}catch(t){return e.error(t),null}}let m=class extends ${version=1;previewResource=this.extUri.joinPath(this.syncPreviewFolder,"tasks.json");baseResource=this.previewResource.with({scheme:R,authority:"base"});localResource=this.previewResource.with({scheme:R,authority:"local"});remoteResource=this.previewResource.with({scheme:R,authority:"remote"});acceptedResource=this.previewResource.with({scheme:R,authority:"accepted"});constructor(e,t,s,n,o,i,l,u,h,g,f,d){super(e.tasksResource,{syncResource:b.Tasks,profile:e},t,u,h,g,s,n,l,f,o,i,d)}async generateSyncPreview(e,t,s,n){const o=e.syncData?v(e.syncData.content,this.logService):null;t=t===null&&s?e:t;const i=t?.syncData?v(t.syncData.content,this.logService):null,l=await this.getLocalFileContent();let u=null,h=!1,g=!1,f=!1;if(e.syncData){const y=l?l.value.toString():null;if(!i||i!==y||i!==o){this.logService.trace(`${this.syncResourceLogLabel}: Merging remote tasks with local tasks...`);const S=D(y,o,i);u=S.content,f=S.hasConflicts,h=S.hasLocalChanged,g=S.hasRemoteChanged}}else l&&(this.logService.trace(`${this.syncResourceLogLabel}: Remote tasks does not exist. Synchronizing tasks for the first time.`),u=l.value.toString(),g=!0);const d={content:f?i:u,localChange:h?l?a.Modified:a.Added:a.None,remoteChange:g?a.Modified:a.None,hasConflicts:f},E=l?l.value.toString():null;return[{fileContent:l,baseResource:this.baseResource,baseContent:i,localResource:this.localResource,localContent:E,localChange:d.localChange,remoteResource:this.remoteResource,remoteContent:o,remoteChange:d.remoteChange,previewResource:this.previewResource,previewResult:d,acceptedResource:this.acceptedResource}]}async hasRemoteChanged(e){const t=e?.syncData?v(e.syncData.content,this.logService):null;if(t===null)return!0;const s=await this.getLocalFileContent(),n=s?s.value.toString():null,o=D(n,t,t);return o.hasLocalChanged||o.hasRemoteChanged}async getMergeResult(e,t){return e.previewResult}async getAcceptResult(e,t,s,n){if(this.extUri.isEqual(t,this.localResource))return{content:e.fileContent?e.fileContent.value.toString():null,localChange:a.None,remoteChange:a.Modified};if(this.extUri.isEqual(t,this.remoteResource))return{content:e.remoteContent,localChange:a.Modified,remoteChange:a.None};if(this.extUri.isEqual(t,this.previewResource))return s===void 0?{content:e.previewResult.content,localChange:e.previewResult.localChange,remoteChange:e.previewResult.remoteChange}:{content:s,localChange:a.Modified,remoteChange:a.Modified};throw new Error(`Invalid Resource: ${t.toString()}`)}async applyResult(e,t,s,n){const{fileContent:o}=s[0][0],{content:i,localChange:l,remoteChange:u}=s[0][1];if(l===a.None&&u===a.None&&this.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing tasks.`),l!==a.None&&(this.logService.trace(`${this.syncResourceLogLabel}: Updating local tasks...`),o&&await this.backupLocal(JSON.stringify(this.toTasksSyncContent(o.value.toString()))),i?await this.updateLocalFileContent(i,o,n):await this.deleteLocalFile(),this.logService.info(`${this.syncResourceLogLabel}: Updated local tasks`)),u!==a.None){this.logService.trace(`${this.syncResourceLogLabel}: Updating remote tasks...`);const h=JSON.stringify(this.toTasksSyncContent(i));e=await this.updateRemoteUserData(h,n?null:e.ref),this.logService.info(`${this.syncResourceLogLabel}: Updated remote tasks`)}try{await this.fileService.del(this.previewResource)}catch{}t?.ref!==e.ref&&(this.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized tasks...`),await this.updateLastSyncUserData(e),this.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized tasks`))}async hasLocalData(){return this.fileService.exists(this.file)}async resolveContent(e){return this.extUri.isEqual(this.remoteResource,e)||this.extUri.isEqual(this.baseResource,e)||this.extUri.isEqual(this.localResource,e)||this.extUri.isEqual(this.acceptedResource,e)?this.resolvePreviewContent(e):null}toTasksSyncContent(e){return e?{tasks:e}:{}}};m=C([r(2,J),r(3,z),r(4,L),r(5,T),r(6,q),r(7,w),r(8,I),r(9,U),r(10,M),r(11,k)],m);let p=class extends A{tasksResource=this.userDataProfilesService.defaultProfile.tasksResource;constructor(e,t,s,n,o,i){super(b.Tasks,t,s,n,e,o,i)}async doInitialize(e){const t=e.syncData?v(e.syncData.content,this.logService):null;if(!t){this.logService.info("Skipping initializing tasks because remote tasks does not exist.");return}if(!await this.isEmpty()){this.logService.info("Skipping initializing tasks because local tasks exist.");return}await this.fileService.writeFile(this.tasksResource,F.fromString(t)),await this.updateLastSyncUserData(e)}async isEmpty(){return this.fileService.exists(this.tasksResource)}};p=C([r(0,w),r(1,N),r(2,I),r(3,L),r(4,U),r(5,k)],p);function D(c,e,t){if(c===null&&e===null&&t===null)return{content:null,hasLocalChanged:!1,hasRemoteChanged:!1,hasConflicts:!1};if(c===e)return{content:null,hasLocalChanged:!1,hasRemoteChanged:!1,hasConflicts:!1};const s=t!==c,n=t!==e;return!s&&!n?{content:null,hasLocalChanged:!1,hasRemoteChanged:!1,hasConflicts:!1}:s&&!n?{content:c,hasRemoteChanged:!0,hasLocalChanged:!1,hasConflicts:!1}:n&&!s?{content:e,hasLocalChanged:!0,hasRemoteChanged:!1,hasConflicts:!1}:{content:c,hasLocalChanged:!0,hasRemoteChanged:!0,hasConflicts:!0}}export{p as TasksInitializer,m as TasksSynchroniser,v as getTasksContentFromSyncContent};
