{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/globalStateMerge.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport * as objects from \"../../../base/common/objects.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport { type IStorageValue, SYNC_SERVICE_URL_TYPE } from \"./userDataSync.js\";\n\nexport interface IMergeResult {\n\tlocal: {\n\t\tadded: IStringDictionary<IStorageValue>;\n\t\tremoved: string[];\n\t\tupdated: IStringDictionary<IStorageValue>;\n\t};\n\tremote: {\n\t\tadded: string[];\n\t\tremoved: string[];\n\t\tupdated: string[];\n\t\tall: IStringDictionary<IStorageValue> | null;\n\t};\n}\n\nexport function merge(\n\tlocalStorage: IStringDictionary<IStorageValue>,\n\tremoteStorage: IStringDictionary<IStorageValue> | null,\n\tbaseStorage: IStringDictionary<IStorageValue> | null,\n\tstorageKeys: {\n\t\tmachine: ReadonlyArray<string>;\n\t\tunregistered: ReadonlyArray<string>;\n\t},\n\tlogService: ILogService,\n): IMergeResult {\n\tif (!remoteStorage) {\n\t\treturn {\n\t\t\tremote: {\n\t\t\t\tadded: Object.keys(localStorage),\n\t\t\t\tremoved: [],\n\t\t\t\tupdated: [],\n\t\t\t\tall: Object.keys(localStorage).length > 0 ? localStorage : null,\n\t\t\t},\n\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t};\n\t}\n\n\tconst localToRemote = compare(localStorage, remoteStorage);\n\tif (\n\t\tlocalToRemote.added.size === 0 &&\n\t\tlocalToRemote.removed.size === 0 &&\n\t\tlocalToRemote.updated.size === 0\n\t) {\n\t\t// No changes found between local and remote.\n\t\treturn {\n\t\t\tremote: { added: [], removed: [], updated: [], all: null },\n\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t};\n\t}\n\n\tconst baseToRemote = baseStorage\n\t\t? compare(baseStorage, remoteStorage)\n\t\t: {\n\t\t\t\tadded: Object.keys(remoteStorage).reduce((r, k) => {\n\t\t\t\t\tr.add(k);\n\t\t\t\t\treturn r;\n\t\t\t\t}, new Set<string>()),\n\t\t\t\tremoved: new Set<string>(),\n\t\t\t\tupdated: new Set<string>(),\n\t\t\t};\n\tconst baseToLocal = baseStorage\n\t\t? compare(baseStorage, localStorage)\n\t\t: {\n\t\t\t\tadded: Object.keys(localStorage).reduce((r, k) => {\n\t\t\t\t\tr.add(k);\n\t\t\t\t\treturn r;\n\t\t\t\t}, new Set<string>()),\n\t\t\t\tremoved: new Set<string>(),\n\t\t\t\tupdated: new Set<string>(),\n\t\t\t};\n\n\tconst local: {\n\t\tadded: IStringDictionary<IStorageValue>;\n\t\tremoved: string[];\n\t\tupdated: IStringDictionary<IStorageValue>;\n\t} = { added: {}, removed: [], updated: {} };\n\tconst remote: IStringDictionary<IStorageValue> =\n\t\tobjects.deepClone(remoteStorage);\n\n\tconst isFirstTimeSync = !baseStorage;\n\n\t// Added in local\n\tfor (const key of baseToLocal.added.values()) {\n\t\t// If syncing for first time remote value gets precedence always,\n\t\t// except for sync service type key - local value takes precedence for this key\n\t\tif (\n\t\t\tkey !== SYNC_SERVICE_URL_TYPE &&\n\t\t\tisFirstTimeSync &&\n\t\t\tbaseToRemote.added.has(key)\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tremote[key] = localStorage[key];\n\t}\n\n\t// Updated in local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tremote[key] = localStorage[key];\n\t}\n\n\t// Removed in local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Do not remove from remote if key is not registered.\n\t\tif (storageKeys.unregistered.includes(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tdelete remote[key];\n\t}\n\n\t// Added in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tconst remoteValue = remoteStorage[key];\n\t\tif (storageKeys.machine.includes(key)) {\n\t\t\tlogService.info(\n\t\t\t\t`GlobalState: Skipped adding ${key} in local storage because it is declared as machine scoped.`,\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\t\t// Skip if the value is also added in local from the time it is last synced\n\t\tif (baseStorage && baseToLocal.added.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst localValue = localStorage[key];\n\t\tif (localValue && localValue.value === remoteValue.value) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Local sync service type value takes precedence if syncing for first time\n\t\tif (\n\t\t\tkey === SYNC_SERVICE_URL_TYPE &&\n\t\t\tisFirstTimeSync &&\n\t\t\tbaseToLocal.added.has(key)\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (localValue) {\n\t\t\tlocal.updated[key] = remoteValue;\n\t\t} else {\n\t\t\tlocal.added[key] = remoteValue;\n\t\t}\n\t}\n\n\t// Updated in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tconst remoteValue = remoteStorage[key];\n\t\tif (storageKeys.machine.includes(key)) {\n\t\t\tlogService.info(\n\t\t\t\t`GlobalState: Skipped updating ${key} in local storage because it is declared as machine scoped.`,\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\t\t// Skip if the value is also updated or removed in local\n\t\tif (baseToLocal.updated.has(key) || baseToLocal.removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst localValue = localStorage[key];\n\t\tif (localValue && localValue.value === remoteValue.value) {\n\t\t\tcontinue;\n\t\t}\n\t\tlocal.updated[key] = remoteValue;\n\t}\n\n\t// Removed in remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (storageKeys.machine.includes(key)) {\n\t\t\tlogService.trace(\n\t\t\t\t`GlobalState: Skipped removing ${key} in local storage because it is declared as machine scoped.`,\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\t\t// Skip if the value is also updated or removed in local\n\t\tif (baseToLocal.updated.has(key) || baseToLocal.removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tlocal.removed.push(key);\n\t}\n\n\tconst result = compare(remoteStorage, remote);\n\treturn {\n\t\tlocal,\n\t\tremote: {\n\t\t\tadded: [...result.added],\n\t\t\tupdated: [...result.updated],\n\t\t\tremoved: [...result.removed],\n\t\t\tall:\n\t\t\t\tresult.added.size === 0 &&\n\t\t\t\tresult.removed.size === 0 &&\n\t\t\t\tresult.updated.size === 0\n\t\t\t\t\t? null\n\t\t\t\t\t: remote,\n\t\t},\n\t};\n}\n\nfunction compare(\n\tfrom: IStringDictionary<any>,\n\tto: IStringDictionary<any>,\n): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = Object.keys(from);\n\tconst toKeys = Object.keys(to);\n\tconst added = toKeys\n\t\t.filter((key) => !fromKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst removed = fromKeys\n\t\t.filter((key) => !toKeys.includes(key))\n\t\t.reduce((r, key) => {\n\t\t\tr.add(key);\n\t\t\treturn r;\n\t\t}, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1 = from[key];\n\t\tconst value2 = to[key];\n\t\tif (!objects.equals(value1, value2)) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n"],
  "mappings": "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",
  "names": []
}
