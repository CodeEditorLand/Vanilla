import { URI } from "vs/base/common/uri";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IEnvironmentService } from "vs/platform/environment/common/environment";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IStorageService } from "vs/platform/storage/common/storage";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { IUserDataProfilesService } from "vs/platform/userDataProfile/common/userDataProfile";
import { ISyncResourceHandle, ISyncUserDataProfile, IUserDataSyncLocalStoreService, IUserDataSyncLogService, IUserDataSyncResource, IUserDataSyncResourceProviderService, IUserDataSyncStoreService, SyncResource } from "vs/platform/userDataSync/common/userDataSync";
import { IUserDataSyncMachine } from "vs/platform/userDataSync/common/userDataSyncMachines";
export declare class UserDataSyncResourceProviderService implements IUserDataSyncResourceProviderService {
    private readonly userDataSyncStoreService;
    private readonly userDataSyncLocalStoreService;
    protected readonly logService: IUserDataSyncLogService;
    private readonly environmentService;
    private readonly storageService;
    private readonly fileService;
    private readonly userDataProfilesService;
    private readonly configurationService;
    private readonly instantiationService;
    _serviceBrand: any;
    private static readonly NOT_EXISTING_RESOURCE;
    private static readonly REMOTE_BACKUP_AUTHORITY;
    private static readonly LOCAL_BACKUP_AUTHORITY;
    private readonly extUri;
    constructor(userDataSyncStoreService: IUserDataSyncStoreService, userDataSyncLocalStoreService: IUserDataSyncLocalStoreService, logService: IUserDataSyncLogService, uriIdentityService: IUriIdentityService, environmentService: IEnvironmentService, storageService: IStorageService, fileService: IFileService, userDataProfilesService: IUserDataProfilesService, configurationService: IConfigurationService, instantiationService: IInstantiationService);
    getRemoteSyncedProfiles(): Promise<ISyncUserDataProfile[]>;
    getLocalSyncedProfiles(location?: URI): Promise<ISyncUserDataProfile[]>;
    getLocalSyncedMachines(location?: URI): Promise<IUserDataSyncMachine[]>;
    getRemoteSyncResourceHandles(syncResource: SyncResource, profile?: ISyncUserDataProfile): Promise<ISyncResourceHandle[]>;
    getLocalSyncResourceHandles(syncResource: SyncResource, profile?: ISyncUserDataProfile, location?: URI): Promise<ISyncResourceHandle[]>;
    resolveUserDataSyncResource({ uri, }: ISyncResourceHandle): IUserDataSyncResource | undefined;
    getAssociatedResources({ uri, }: ISyncResourceHandle): Promise<{
        resource: URI;
        comparableResource: URI;
    }[]>;
    getMachineId({ uri, }: ISyncResourceHandle): Promise<string | undefined>;
    resolveContent(uri: URI): Promise<string | null>;
    private getContentFromStore;
    private resolveNodeContent;
    private resolveLatestContent;
    private getSettingsAssociatedResources;
    private resolveSettingsNodeContent;
    private getKeybindingsAssociatedResources;
    private resolveKeybindingsNodeContent;
    private getTasksAssociatedResources;
    private resolveTasksNodeContent;
    private getSnippetsAssociatedResources;
    private resolveSnippetsNodeContent;
    private getExtensionsAssociatedResources;
    private resolveExtensionsNodeContent;
    private resolveLatestExtensionsContent;
    private getGlobalStateAssociatedResources;
    private resolveGlobalStateNodeContent;
    private resolveLatestGlobalStateContent;
    private getProfilesAssociatedResources;
    private resolveProfileNodeContent;
    private resolveLatestProfilesContent;
    private toUri;
    private resolveUri;
    private parseSyncData;
    private getUserData;
}
