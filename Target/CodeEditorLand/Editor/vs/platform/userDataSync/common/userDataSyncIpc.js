var h=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var u=(a,n,e,t)=>{for(var r=t>1?void 0:t?v(n,e):n,c=a.length-1,l;c>=0;c--)(l=a[c])&&(r=(t?l(n,e,r):l(r))||r);return t&&r&&h(n,e,r),r},i=(a,n)=>(e,t)=>n(e,t,a);import{Emitter as S}from"../../../../vs/base/common/event.js";import{Disposable as d}from"../../../../vs/base/common/lifecycle.js";import{URI as o}from"../../../../vs/base/common/uri.js";import"../../../../vs/base/parts/ipc/common/ipc.js";import{IConfigurationService as y}from"../../../../vs/platform/configuration/common/configuration.js";import{IProductService as D}from"../../../../vs/platform/product/common/productService.js";import{IStorageService as m}from"../../../../vs/platform/storage/common/storage.js";import"../../../../vs/platform/userDataSync/common/userDataSync.js";import"../../../../vs/platform/userDataSync/common/userDataSyncAccount.js";import{AbstractUserDataSyncStoreManagementService as U}from"../../../../vs/platform/userDataSync/common/userDataSyncStoreService.js";class j{constructor(n){this.service=n}listen(n,e){switch(e){case"onDidChangeAccount":return this.service.onDidChangeAccount;case"onTokenFailed":return this.service.onTokenFailed}throw new Error(`[UserDataSyncAccountServiceChannel] Event not found: ${e}`)}call(n,e,t){switch(e){case"_getInitialData":return Promise.resolve(this.service.account);case"updateAccount":return this.service.updateAccount(t)}throw new Error("Invalid call")}}class q extends d{constructor(e){super();this.channel=e;this.channel.call("_getInitialData").then(t=>{this._account=t,this._register(this.channel.listen("onDidChangeAccount")(r=>{this._account=r,this._onDidChangeAccount.fire(r)}))})}_account;get account(){return this._account}get onTokenFailed(){return this.channel.listen("onTokenFailed")}_onDidChangeAccount=this._register(new S);onDidChangeAccount=this._onDidChangeAccount.event;updateAccount(e){return this.channel.call("updateAccount",e)}}class z{constructor(n){this.service=n}listen(n,e){switch(e){case"onDidChangeUserDataSyncStore":return this.service.onDidChangeUserDataSyncStore}throw new Error(`[UserDataSyncStoreManagementServiceChannel] Event not found: ${e}`)}call(n,e,t){switch(e){case"switch":return this.service.switch(t[0]);case"getPreviousUserDataSyncStore":return this.service.getPreviousUserDataSyncStore()}throw new Error("Invalid call")}}let s=class extends U{constructor(e,t,r,c){super(t,r,c);this.channel=e;this._register(this.channel.listen("onDidChangeUserDataSyncStore")(()=>this.updateUserDataSyncStore()))}async switch(e){return this.channel.call("switch",[e])}async getPreviousUserDataSyncStore(){const e=await this.channel.call("getPreviousUserDataSyncStore");return this.revive(e)}revive(e){return{url:o.revive(e.url),type:e.type,defaultUrl:o.revive(e.defaultUrl),insidersUrl:o.revive(e.insidersUrl),stableUrl:o.revive(e.stableUrl),canSwitch:e.canSwitch,authenticationProviders:e.authenticationProviders}}};s=u([i(1,D),i(2,y),i(3,m)],s);export{j as UserDataSyncAccountServiceChannel,q as UserDataSyncAccountServiceChannelClient,z as UserDataSyncStoreManagementServiceChannel,s as UserDataSyncStoreManagementServiceChannelClient};
