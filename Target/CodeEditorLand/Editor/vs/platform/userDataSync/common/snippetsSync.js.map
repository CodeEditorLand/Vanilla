{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/common/snippetsSync.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Event } from '../../../base/common/event.js';\nimport { deepClone } from '../../../base/common/objects.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { FileOperationError, FileOperationResult, IFileContent, IFileService, IFileStat } from '../../files/common/files.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { AbstractInitializer, AbstractSynchroniser, IAcceptResult, IFileResourcePreview, IMergeResult } from './abstractSynchronizer.js';\nimport { areSame, IMergeResult as ISnippetsMergeResult, merge } from './snippetsMerge.js';\nimport { Change, IRemoteUserData, ISyncData, IUserDataSyncLocalStoreService, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncStoreService, SyncResource, USER_DATA_SYNC_SCHEME } from './userDataSync.js';\n\ninterface ISnippetsResourcePreview extends IFileResourcePreview {\n\tpreviewResult: IMergeResult;\n}\n\ninterface ISnippetsAcceptedResourcePreview extends IFileResourcePreview {\n\tacceptResult: IAcceptResult;\n}\n\nexport function parseSnippets(syncData: ISyncData): IStringDictionary<string> {\n\treturn JSON.parse(syncData.content);\n}\n\nexport class SnippetsSynchroniser extends AbstractSynchroniser implements IUserDataSynchroniser {\n\n\tprotected readonly version: number = 1;\n\tprivate readonly snippetsFolder: URI;\n\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper({ syncResource: SyncResource.Snippets, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t\tthis.snippetsFolder = profile.snippetsHome;\n\t\tthis._register(this.fileService.watch(environmentService.userRoamingDataHome));\n\t\tthis._register(this.fileService.watch(this.snippetsFolder));\n\t\tthis._register(Event.filter(this.fileService.onDidFilesChange, e => e.affects(this.snippetsFolder))(() => this.triggerLocalChange()));\n\t}\n\n\tprotected async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, isRemoteDataFromCurrentMachine: boolean): Promise<ISnippetsResourcePreview[]> {\n\t\tconst local = await this.getSnippetsFileContents();\n\t\tconst localSnippets = this.toSnippetsContents(local);\n\t\tconst remoteSnippets: IStringDictionary<string> | null = remoteUserData.syncData ? this.parseSnippets(remoteUserData.syncData) : null;\n\n\t\t// Use remote data as last sync data if last sync data does not exist and remote data is from same machine\n\t\tlastSyncUserData = lastSyncUserData === null && isRemoteDataFromCurrentMachine ? remoteUserData : lastSyncUserData;\n\t\tconst lastSyncSnippets: IStringDictionary<string> | null = lastSyncUserData && lastSyncUserData.syncData ? this.parseSnippets(lastSyncUserData.syncData) : null;\n\n\t\tif (remoteSnippets) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Merging remote snippets with local snippets...`);\n\t\t} else {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Remote snippets does not exist. Synchronizing snippets for the first time.`);\n\t\t}\n\n\t\tconst mergeResult = merge(localSnippets, remoteSnippets, lastSyncSnippets);\n\t\treturn this.getResourcePreviews(mergeResult, local, remoteSnippets || {}, lastSyncSnippets || {});\n\t}\n\n\tprotected async hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean> {\n\t\tconst lastSyncSnippets: IStringDictionary<string> | null = lastSyncUserData.syncData ? this.parseSnippets(lastSyncUserData.syncData) : null;\n\t\tif (lastSyncSnippets === null) {\n\t\t\treturn true;\n\t\t}\n\t\tconst local = await this.getSnippetsFileContents();\n\t\tconst localSnippets = this.toSnippetsContents(local);\n\t\tconst mergeResult = merge(localSnippets, lastSyncSnippets, lastSyncSnippets);\n\t\treturn Object.keys(mergeResult.remote.added).length > 0 || Object.keys(mergeResult.remote.updated).length > 0 || mergeResult.remote.removed.length > 0 || mergeResult.conflicts.length > 0;\n\t}\n\n\tprotected async getMergeResult(resourcePreview: ISnippetsResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\treturn resourcePreview.previewResult;\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: ISnippetsResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IAcceptResult> {\n\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqualOrParent(resource, this.syncPreviewFolder.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }))) {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.fileContent ? resourcePreview.fileContent.value.toString() : null,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: resourcePreview.fileContent\n\t\t\t\t\t? resourcePreview.remoteContent !== null ? Change.Modified : Change.Added\n\t\t\t\t\t: Change.Deleted\n\t\t\t};\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqualOrParent(resource, this.syncPreviewFolder.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }))) {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocalChange: resourcePreview.remoteContent !== null\n\t\t\t\t\t? resourcePreview.fileContent ? Change.Modified : Change.Added\n\t\t\t\t\t: Change.Deleted,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqualOrParent(resource, this.syncPreviewFolder)) {\n\t\t\tif (content === undefined) {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: resourcePreview.previewResult.content,\n\t\t\t\t\tlocalChange: resourcePreview.previewResult.localChange,\n\t\t\t\t\tremoteChange: resourcePreview.previewResult.remoteChange,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tcontent,\n\t\t\t\t\tlocalChange: content === null\n\t\t\t\t\t\t? resourcePreview.fileContent !== null ? Change.Deleted : Change.None\n\t\t\t\t\t\t: Change.Modified,\n\t\t\t\t\tremoteChange: content === null\n\t\t\t\t\t\t? resourcePreview.remoteContent !== null ? Change.Deleted : Change.None\n\t\t\t\t\t\t: Change.Modified\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [ISnippetsResourcePreview, IAcceptResult][], force: boolean): Promise<void> {\n\t\tconst accptedResourcePreviews: ISnippetsAcceptedResourcePreview[] = resourcePreviews.map(([resourcePreview, acceptResult]) => ({ ...resourcePreview, acceptResult }));\n\t\tif (accptedResourcePreviews.every(({ localChange, remoteChange }) => localChange === Change.None && remoteChange === Change.None)) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing snippets.`);\n\t\t}\n\n\t\tif (accptedResourcePreviews.some(({ localChange }) => localChange !== Change.None)) {\n\t\t\t// back up all snippets\n\t\t\tawait this.updateLocalBackup(accptedResourcePreviews);\n\t\t\tawait this.updateLocalSnippets(accptedResourcePreviews, force);\n\t\t}\n\n\t\tif (accptedResourcePreviews.some(({ remoteChange }) => remoteChange !== Change.None)) {\n\t\t\tremoteUserData = await this.updateRemoteSnippets(accptedResourcePreviews, remoteUserData, force);\n\t\t}\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\t// update last sync\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized snippets...`);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized snippets`);\n\t\t}\n\n\t\tfor (const { previewResource } of accptedResourcePreviews) {\n\t\t\t// Delete the preview\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(previewResource);\n\t\t\t} catch (e) { /* ignore */ }\n\t\t}\n\n\t}\n\n\tprivate getResourcePreviews(snippetsMergeResult: ISnippetsMergeResult, localFileContent: IStringDictionary<IFileContent>, remoteSnippets: IStringDictionary<string>, baseSnippets: IStringDictionary<string>): ISnippetsResourcePreview[] {\n\t\tconst resourcePreviews: Map<string, ISnippetsResourcePreview> = new Map<string, ISnippetsResourcePreview>();\n\n\t\t/* Snippets added remotely -> add locally */\n\t\tfor (const key of Object.keys(snippetsMergeResult.local.added)) {\n\t\t\tconst previewResult: IMergeResult = {\n\t\t\t\tcontent: snippetsMergeResult.local.added[key],\n\t\t\t\thasConflicts: false,\n\t\t\t\tlocalChange: Change.Added,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t\tresourcePreviews.set(key, {\n\t\t\t\tbaseResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }),\n\t\t\t\tbaseContent: null,\n\t\t\t\tfileContent: null,\n\t\t\t\tlocalResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }),\n\t\t\t\tlocalContent: null,\n\t\t\t\tremoteResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }),\n\t\t\t\tremoteContent: remoteSnippets[key],\n\t\t\t\tpreviewResource: this.extUri.joinPath(this.syncPreviewFolder, key),\n\t\t\t\tpreviewResult,\n\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\tacceptedResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })\n\t\t\t});\n\t\t}\n\n\t\t/* Snippets updated remotely -> update locally */\n\t\tfor (const key of Object.keys(snippetsMergeResult.local.updated)) {\n\t\t\tconst previewResult: IMergeResult = {\n\t\t\t\tcontent: snippetsMergeResult.local.updated[key],\n\t\t\t\thasConflicts: false,\n\t\t\t\tlocalChange: Change.Modified,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t\tconst localContent = localFileContent[key] ? localFileContent[key].value.toString() : null;\n\t\t\tresourcePreviews.set(key, {\n\t\t\t\tbaseResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }),\n\t\t\t\tbaseContent: baseSnippets[key] ?? null,\n\t\t\t\tlocalResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }),\n\t\t\t\tfileContent: localFileContent[key],\n\t\t\t\tlocalContent,\n\t\t\t\tremoteResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }),\n\t\t\t\tremoteContent: remoteSnippets[key],\n\t\t\t\tpreviewResource: this.extUri.joinPath(this.syncPreviewFolder, key),\n\t\t\t\tpreviewResult,\n\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\tacceptedResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })\n\t\t\t});\n\t\t}\n\n\t\t/* Snippets removed remotely -> remove locally */\n\t\tfor (const key of snippetsMergeResult.local.removed) {\n\t\t\tconst previewResult: IMergeResult = {\n\t\t\t\tcontent: null,\n\t\t\t\thasConflicts: false,\n\t\t\t\tlocalChange: Change.Deleted,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t\tconst localContent = localFileContent[key] ? localFileContent[key].value.toString() : null;\n\t\t\tresourcePreviews.set(key, {\n\t\t\t\tbaseResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }),\n\t\t\t\tbaseContent: baseSnippets[key] ?? null,\n\t\t\t\tlocalResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }),\n\t\t\t\tfileContent: localFileContent[key],\n\t\t\t\tlocalContent,\n\t\t\t\tremoteResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }),\n\t\t\t\tremoteContent: null,\n\t\t\t\tpreviewResource: this.extUri.joinPath(this.syncPreviewFolder, key),\n\t\t\t\tpreviewResult,\n\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\tacceptedResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })\n\t\t\t});\n\t\t}\n\n\t\t/* Snippets added locally -> add remotely */\n\t\tfor (const key of Object.keys(snippetsMergeResult.remote.added)) {\n\t\t\tconst previewResult: IMergeResult = {\n\t\t\t\tcontent: snippetsMergeResult.remote.added[key],\n\t\t\t\thasConflicts: false,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.Added,\n\t\t\t};\n\t\t\tconst localContent = localFileContent[key] ? localFileContent[key].value.toString() : null;\n\t\t\tresourcePreviews.set(key, {\n\t\t\t\tbaseResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }),\n\t\t\t\tbaseContent: baseSnippets[key] ?? null,\n\t\t\t\tlocalResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }),\n\t\t\t\tfileContent: localFileContent[key],\n\t\t\t\tlocalContent,\n\t\t\t\tremoteResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }),\n\t\t\t\tremoteContent: null,\n\t\t\t\tpreviewResource: this.extUri.joinPath(this.syncPreviewFolder, key),\n\t\t\t\tpreviewResult,\n\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\tacceptedResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })\n\t\t\t});\n\t\t}\n\n\t\t/* Snippets updated locally -> update remotely */\n\t\tfor (const key of Object.keys(snippetsMergeResult.remote.updated)) {\n\t\t\tconst previewResult: IMergeResult = {\n\t\t\t\tcontent: snippetsMergeResult.remote.updated[key],\n\t\t\t\thasConflicts: false,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.Modified,\n\t\t\t};\n\t\t\tconst localContent = localFileContent[key] ? localFileContent[key].value.toString() : null;\n\t\t\tresourcePreviews.set(key, {\n\t\t\t\tbaseResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }),\n\t\t\t\tbaseContent: baseSnippets[key] ?? null,\n\t\t\t\tlocalResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }),\n\t\t\t\tfileContent: localFileContent[key],\n\t\t\t\tlocalContent,\n\t\t\t\tremoteResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }),\n\t\t\t\tremoteContent: remoteSnippets[key],\n\t\t\t\tpreviewResource: this.extUri.joinPath(this.syncPreviewFolder, key),\n\t\t\t\tpreviewResult,\n\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\tacceptedResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })\n\t\t\t});\n\t\t}\n\n\t\t/* Snippets removed locally -> remove remotely */\n\t\tfor (const key of snippetsMergeResult.remote.removed) {\n\t\t\tconst previewResult: IMergeResult = {\n\t\t\t\tcontent: null,\n\t\t\t\thasConflicts: false,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.Deleted,\n\t\t\t};\n\t\t\tresourcePreviews.set(key, {\n\t\t\t\tbaseResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }),\n\t\t\t\tbaseContent: baseSnippets[key] ?? null,\n\t\t\t\tlocalResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }),\n\t\t\t\tfileContent: null,\n\t\t\t\tlocalContent: null,\n\t\t\t\tremoteResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }),\n\t\t\t\tremoteContent: remoteSnippets[key],\n\t\t\t\tpreviewResource: this.extUri.joinPath(this.syncPreviewFolder, key),\n\t\t\t\tpreviewResult,\n\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\tacceptedResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })\n\t\t\t});\n\t\t}\n\n\t\t/* Snippets with conflicts */\n\t\tfor (const key of snippetsMergeResult.conflicts) {\n\t\t\tconst previewResult: IMergeResult = {\n\t\t\t\tcontent: baseSnippets[key] ?? null,\n\t\t\t\thasConflicts: true,\n\t\t\t\tlocalChange: localFileContent[key] ? Change.Modified : Change.Added,\n\t\t\t\tremoteChange: remoteSnippets[key] ? Change.Modified : Change.Added\n\t\t\t};\n\t\t\tconst localContent = localFileContent[key] ? localFileContent[key].value.toString() : null;\n\t\t\tresourcePreviews.set(key, {\n\t\t\t\tbaseResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }),\n\t\t\t\tbaseContent: baseSnippets[key] ?? null,\n\t\t\t\tlocalResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }),\n\t\t\t\tfileContent: localFileContent[key] || null,\n\t\t\t\tlocalContent,\n\t\t\t\tremoteResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }),\n\t\t\t\tremoteContent: remoteSnippets[key] || null,\n\t\t\t\tpreviewResource: this.extUri.joinPath(this.syncPreviewFolder, key),\n\t\t\t\tpreviewResult,\n\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\tacceptedResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })\n\t\t\t});\n\t\t}\n\n\t\t/* Unmodified Snippets */\n\t\tfor (const key of Object.keys(localFileContent)) {\n\t\t\tif (!resourcePreviews.has(key)) {\n\t\t\t\tconst previewResult: IMergeResult = {\n\t\t\t\t\tcontent: localFileContent[key] ? localFileContent[key].value.toString() : null,\n\t\t\t\t\thasConflicts: false,\n\t\t\t\t\tlocalChange: Change.None,\n\t\t\t\t\tremoteChange: Change.None\n\t\t\t\t};\n\t\t\t\tconst localContent = localFileContent[key] ? localFileContent[key].value.toString() : null;\n\t\t\t\tresourcePreviews.set(key, {\n\t\t\t\t\tbaseResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }),\n\t\t\t\t\tbaseContent: baseSnippets[key] ?? null,\n\t\t\t\t\tlocalResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }),\n\t\t\t\t\tfileContent: localFileContent[key] || null,\n\t\t\t\t\tlocalContent,\n\t\t\t\t\tremoteResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }),\n\t\t\t\t\tremoteContent: remoteSnippets[key] || null,\n\t\t\t\t\tpreviewResource: this.extUri.joinPath(this.syncPreviewFolder, key),\n\t\t\t\t\tpreviewResult,\n\t\t\t\t\tlocalChange: previewResult.localChange,\n\t\t\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\t\t\tacceptedResource: this.extUri.joinPath(this.syncPreviewFolder, key).with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn [...resourcePreviews.values()];\n\t}\n\n\toverride async resolveContent(uri: URI): Promise<string | null> {\n\t\tif (this.extUri.isEqualOrParent(uri, this.syncPreviewFolder.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' }))\n\t\t\t|| this.extUri.isEqualOrParent(uri, this.syncPreviewFolder.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' }))\n\t\t\t|| this.extUri.isEqualOrParent(uri, this.syncPreviewFolder.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' }))\n\t\t\t|| this.extUri.isEqualOrParent(uri, this.syncPreviewFolder.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' }))) {\n\t\t\treturn this.resolvePreviewContent(uri);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst localSnippets = await this.getSnippetsFileContents();\n\t\t\tif (Object.keys(localSnippets).length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* ignore error */\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async updateLocalBackup(resourcePreviews: IFileResourcePreview[]): Promise<void> {\n\t\tconst local: IStringDictionary<IFileContent> = {};\n\t\tfor (const resourcePreview of resourcePreviews) {\n\t\t\tif (resourcePreview.fileContent) {\n\t\t\t\tlocal[this.extUri.basename(resourcePreview.localResource)] = resourcePreview.fileContent;\n\t\t\t}\n\t\t}\n\t\tawait this.backupLocal(JSON.stringify(this.toSnippetsContents(local)));\n\t}\n\n\tprivate async updateLocalSnippets(resourcePreviews: ISnippetsAcceptedResourcePreview[], force: boolean): Promise<void> {\n\t\tfor (const { fileContent, acceptResult, localResource, remoteResource, localChange } of resourcePreviews) {\n\t\t\tif (localChange !== Change.None) {\n\t\t\t\tconst key = remoteResource ? this.extUri.basename(remoteResource) : this.extUri.basename(localResource);\n\t\t\t\tconst resource = this.extUri.joinPath(this.snippetsFolder, key);\n\n\t\t\t\t// Removed\n\t\t\t\tif (localChange === Change.Deleted) {\n\t\t\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Deleting snippet...`, this.extUri.basename(resource));\n\t\t\t\t\tawait this.fileService.del(resource);\n\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Deleted snippet`, this.extUri.basename(resource));\n\t\t\t\t}\n\n\t\t\t\t// Added\n\t\t\t\telse if (localChange === Change.Added) {\n\t\t\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Creating snippet...`, this.extUri.basename(resource));\n\t\t\t\t\tawait this.fileService.createFile(resource, VSBuffer.fromString(acceptResult.content!), { overwrite: force });\n\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Created snippet`, this.extUri.basename(resource));\n\t\t\t\t}\n\n\t\t\t\t// Updated\n\t\t\t\telse {\n\t\t\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating snippet...`, this.extUri.basename(resource));\n\t\t\t\t\tawait this.fileService.writeFile(resource, VSBuffer.fromString(acceptResult.content!), force ? undefined : fileContent!);\n\t\t\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated snippet`, this.extUri.basename(resource));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async updateRemoteSnippets(resourcePreviews: ISnippetsAcceptedResourcePreview[], remoteUserData: IRemoteUserData, forcePush: boolean): Promise<IRemoteUserData> {\n\t\tconst currentSnippets: IStringDictionary<string> = remoteUserData.syncData ? this.parseSnippets(remoteUserData.syncData) : {};\n\t\tconst newSnippets: IStringDictionary<string> = deepClone(currentSnippets);\n\n\t\tfor (const { acceptResult, localResource, remoteResource, remoteChange } of resourcePreviews) {\n\t\t\tif (remoteChange !== Change.None) {\n\t\t\t\tconst key = localResource ? this.extUri.basename(localResource) : this.extUri.basename(remoteResource);\n\t\t\t\tif (remoteChange === Change.Deleted) {\n\t\t\t\t\tdelete newSnippets[key];\n\t\t\t\t} else {\n\t\t\t\t\tnewSnippets[key] = acceptResult.content!;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!areSame(currentSnippets, newSnippets)) {\n\t\t\t// update remote\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating remote snippets...`);\n\t\t\tremoteUserData = await this.updateRemoteUserData(JSON.stringify(newSnippets), forcePush ? null : remoteUserData.ref);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated remote snippets`);\n\t\t}\n\t\treturn remoteUserData;\n\t}\n\n\tprivate parseSnippets(syncData: ISyncData): IStringDictionary<string> {\n\t\treturn parseSnippets(syncData);\n\t}\n\n\tprivate toSnippetsContents(snippetsFileContents: IStringDictionary<IFileContent>): IStringDictionary<string> {\n\t\tconst snippets: IStringDictionary<string> = {};\n\t\tfor (const key of Object.keys(snippetsFileContents)) {\n\t\t\tsnippets[key] = snippetsFileContents[key].value.toString();\n\t\t}\n\t\treturn snippets;\n\t}\n\n\tprivate async getSnippetsFileContents(): Promise<IStringDictionary<IFileContent>> {\n\t\tconst snippets: IStringDictionary<IFileContent> = {};\n\t\tlet stat: IFileStat;\n\t\ttry {\n\t\t\tstat = await this.fileService.resolve(this.snippetsFolder);\n\t\t} catch (e) {\n\t\t\t// No snippets\n\t\t\tif (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\treturn snippets;\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tfor (const entry of stat.children || []) {\n\t\t\tconst resource = entry.resource;\n\t\t\tconst extension = this.extUri.extname(resource);\n\t\t\tif (extension === '.json' || extension === '.code-snippets') {\n\t\t\t\tconst key = this.extUri.relativePath(this.snippetsFolder, resource)!;\n\t\t\t\tconst content = await this.fileService.readFile(resource);\n\t\t\t\tsnippets[key] = content;\n\t\t\t}\n\t\t}\n\t\treturn snippets;\n\t}\n}\n\nexport class SnippetsInitializer extends AbstractInitializer {\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(SyncResource.Snippets, userDataProfilesService, environmentService, logService, fileService, storageService, uriIdentityService);\n\t}\n\n\tprotected async doInitialize(remoteUserData: IRemoteUserData): Promise<void> {\n\t\tconst remoteSnippets: IStringDictionary<string> | null = remoteUserData.syncData ? JSON.parse(remoteUserData.syncData.content) : null;\n\t\tif (!remoteSnippets) {\n\t\t\tthis.logService.info('Skipping initializing snippets because remote snippets does not exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst isEmpty = await this.isEmpty();\n\t\tif (!isEmpty) {\n\t\t\tthis.logService.info('Skipping initializing snippets because local snippets exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const key of Object.keys(remoteSnippets)) {\n\t\t\tconst content = remoteSnippets[key];\n\t\t\tif (content) {\n\t\t\t\tconst resource = this.extUri.joinPath(this.userDataProfilesService.defaultProfile.snippetsHome, key);\n\t\t\t\tawait this.fileService.createFile(resource, VSBuffer.fromString(content));\n\t\t\t\tthis.logService.info('Created snippet', this.extUri.basename(resource));\n\t\t\t}\n\t\t}\n\n\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t}\n\n\tprivate async isEmpty(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst stat = await this.fileService.resolve(this.userDataProfilesService.defaultProfile.snippetsHome);\n\t\t\treturn !stat.children?.length;\n\t\t} catch (error) {\n\t\t\treturn (<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND;\n\t\t}\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
