var z=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var w=(c,r,e,t)=>{for(var i=t>1?void 0:t?j(r,e):r,n=c.length-1,s;n>=0;n--)(s=c[n])&&(i=(t?s(r,e,i):s(i))||i);return t&&i&&z(r,e,i),i},a=(c,r)=>(e,t)=>r(e,t,c);import{distinct as D}from"../../../base/common/arrays.js";import{VSBuffer as J}from"../../../base/common/buffer.js";import{Event as E}from"../../../base/common/event.js";import{localize as V}from"../../../nls.js";import{ConfigurationTarget as Y,IConfigurationService as B}from"../../configuration/common/configuration.js";import{ConfigurationModelParser as G}from"../../configuration/common/configurationModels.js";import{IEnvironmentService as L}from"../../environment/common/environment.js";import{IExtensionManagementService as H}from"../../extensionManagement/common/extensionManagement.js";import{ExtensionType as F}from"../../extensions/common/extensions.js";import{FileOperationResult as b,IFileService as P}from"../../files/common/files.js";import{IStorageService as O}from"../../storage/common/storage.js";import{ITelemetryService as K}from"../../telemetry/common/telemetry.js";import{IUriIdentityService as M}from"../../uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as Q}from"../../userDataProfile/common/userDataProfile.js";import{AbstractInitializer as W,AbstractJsonFileSynchroniser as X}from"./abstractSynchronizer.js";import{getIgnoredSettings as Z,isEmpty as N,merge as _,updateIgnoredSettings as d}from"./settingsMerge.js";import{Change as l,IUserDataSyncEnablementService as ee,IUserDataSyncLocalStoreService as te,IUserDataSyncLogService as A,IUserDataSyncStoreService as ne,IUserDataSyncUtilService as ie,SyncResource as T,USER_DATA_SYNC_CONFIGURATION_SCOPE as $,USER_DATA_SYNC_SCHEME as v,UserDataSyncError as se,UserDataSyncErrorCode as oe,getIgnoredSettingsForExtension as k}from"./userDataSync.js";function re(c){return c&&c.settings&&typeof c.settings=="string"&&Object.keys(c).length===1}function q(c){const r=JSON.parse(c);return re(r)?r:{settings:c}}let C=class extends X{constructor(e,t,i,n,s,o,g,m,S,u,h,f,x,y){super(e.settingsResource,{syncResource:T.Settings,profile:e},t,i,n,s,o,g,h,f,m,S,u,y);this.profile=e;this.extensionManagementService=x}version=2;previewResource=this.extUri.joinPath(this.syncPreviewFolder,"settings.json");baseResource=this.previewResource.with({scheme:v,authority:"base"});localResource=this.previewResource.with({scheme:v,authority:"local"});remoteResource=this.previewResource.with({scheme:v,authority:"remote"});acceptedResource=this.previewResource.with({scheme:v,authority:"accepted"});async getRemoteUserDataSyncConfiguration(e){const t=await this.getLastSyncUserData(),i=await this.getLatestRemoteUserData(e,t),n=this.getSettingsSyncContent(i),s=new G($,this.logService);return n?.settings&&s.parse(n.settings),s.configurationModel.getValue($)||{}}async generateSyncPreview(e,t,i){const n=await this.getLocalFileContent(),s=await this.getFormattingOptions(),o=this.getSettingsSyncContent(e);t=t===null&&i?e:t;const g=t?this.getSettingsSyncContent(t):null,m=await this.getIgnoredSettings();let S=null,u=!1,h=!1,f=!1;if(o){let I=n?n.value.toString().trim():"{}";I=I||"{}",this.validateContent(I),this.logService.trace(`${this.syncResourceLogLabel}: Merging remote settings with local settings...`);const p=_(I,o.settings,g?g.settings:null,m,[],s);S=p.localContent||p.remoteContent,u=p.localContent!==null,h=p.remoteContent!==null,f=p.hasConflicts}else n&&(this.logService.trace(`${this.syncResourceLogLabel}: Remote settings does not exist. Synchronizing settings for the first time.`),S=n.value.toString().trim()||"{}",this.validateContent(S),h=!0);const x=n?n.value.toString():null,y=g?.settings??null,U={content:f?y:S,localChange:u?l.Modified:l.None,remoteChange:h?l.Modified:l.None,hasConflicts:f};return[{fileContent:n,baseResource:this.baseResource,baseContent:y,localResource:this.localResource,localContent:x,localChange:U.localChange,remoteResource:this.remoteResource,remoteContent:o?o.settings:null,remoteChange:U.remoteChange,previewResource:this.previewResource,previewResult:U,acceptedResource:this.acceptedResource}]}async hasRemoteChanged(e){const t=this.getSettingsSyncContent(e);if(t===null)return!0;const i=await this.getLocalFileContent(),n=i?i.value.toString().trim():"",s=await this.getIgnoredSettings(),o=await this.getFormattingOptions();return _(n||"{}",t.settings,t.settings,s,[],o).remoteContent!==null}async getMergeResult(e,t){const i=await this.getFormattingOptions(),n=await this.getIgnoredSettings();return{...e.previewResult,content:e.previewResult.content?d(e.previewResult.content,"{}",n,i):null}}async getAcceptResult(e,t,i,n){const s=await this.getFormattingOptions(),o=await this.getIgnoredSettings();if(this.extUri.isEqual(t,this.localResource))return{content:e.fileContent?d(e.fileContent.value.toString(),"{}",o,s):null,localChange:l.None,remoteChange:l.Modified};if(this.extUri.isEqual(t,this.remoteResource))return{content:e.remoteContent!==null?d(e.remoteContent,e.fileContent?e.fileContent.value.toString():"{}",o,s):null,localChange:l.Modified,remoteChange:l.None};if(this.extUri.isEqual(t,this.previewResource))return i===void 0?{content:e.previewResult.content,localChange:e.previewResult.localChange,remoteChange:e.previewResult.remoteChange}:{content:i!==null?d(i,e.fileContent?e.fileContent.value.toString():"{}",o,s):null,localChange:l.Modified,remoteChange:l.Modified};throw new Error(`Invalid Resource: ${t.toString()}`)}async applyResult(e,t,i,n){const{fileContent:s}=i[0][0];let{content:o,localChange:g,remoteChange:m}=i[0][1];if(g===l.None&&m===l.None&&this.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing settings.`),o=o?o.trim():"{}",o=o||"{}",this.validateContent(o),g!==l.None&&(this.logService.trace(`${this.syncResourceLogLabel}: Updating local settings...`),s&&await this.backupLocal(JSON.stringify(this.toSettingsSyncContent(s.value.toString()))),await this.updateLocalFileContent(o,s,n),await this.configurationService.reloadConfiguration(Y.USER_LOCAL),this.logService.info(`${this.syncResourceLogLabel}: Updated local settings`)),m!==l.None){const S=await this.getFormattingOptions(),u=this.getSettingsSyncContent(e),h=await this.getIgnoredSettings(o);o=d(o,u?u.settings:"{}",h,S),this.logService.trace(`${this.syncResourceLogLabel}: Updating remote settings...`),e=await this.updateRemoteUserData(JSON.stringify(this.toSettingsSyncContent(o)),n?null:e.ref),this.logService.info(`${this.syncResourceLogLabel}: Updated remote settings`)}try{await this.fileService.del(this.previewResource)}catch{}t?.ref!==e.ref&&(this.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized settings...`),await this.updateLastSyncUserData(e),this.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized settings`))}async hasLocalData(){try{const e=await this.getLocalFileContent();if(e)return!N(e.value.toString())}catch(e){if(e.fileOperationResult!==b.FILE_NOT_FOUND)return!0}return!1}async resolveContent(e){return this.extUri.isEqual(this.remoteResource,e)||this.extUri.isEqual(this.localResource,e)||this.extUri.isEqual(this.acceptedResource,e)||this.extUri.isEqual(this.baseResource,e)?this.resolvePreviewContent(e):null}async resolvePreviewContent(e){let t=await super.resolvePreviewContent(e);if(t){const i=await this.getFormattingOptions(),n=await this.getIgnoredSettings();t=d(t,"{}",n,i)}return t}getSettingsSyncContent(e){return e.syncData?this.parseSettingsSyncContent(e.syncData.content):null}parseSettingsSyncContent(e){try{return q(e)}catch(t){this.logService.error(t)}return null}toSettingsSyncContent(e){return{settings:e}}coreIgnoredSettings=void 0;systemExtensionsIgnoredSettings=void 0;userExtensionsIgnoredSettings=void 0;async getIgnoredSettings(e){if(this.coreIgnoredSettings||(this.coreIgnoredSettings=this.userDataSyncUtilService.resolveDefaultCoreIgnoredSettings()),this.systemExtensionsIgnoredSettings||(this.systemExtensionsIgnoredSettings=this.getIgnoredSettingForSystemExtensions()),!this.userExtensionsIgnoredSettings){this.userExtensionsIgnoredSettings=this.getIgnoredSettingForUserExtensions();const i=this._register(E.any(E.filter(this.extensionManagementService.onDidInstallExtensions,n=>n.some(({local:s})=>!!s)),E.filter(this.extensionManagementService.onDidUninstallExtension,n=>!n.error))(()=>{i.dispose(),this.userExtensionsIgnoredSettings=void 0}))}const t=(await Promise.all([this.coreIgnoredSettings,this.systemExtensionsIgnoredSettings,this.userExtensionsIgnoredSettings])).flat();return Z(t,this.configurationService,e)}async getIgnoredSettingForSystemExtensions(){const e=await this.extensionManagementService.getInstalled(F.System);return D(e.flatMap(t=>k(t.manifest)))}async getIgnoredSettingForUserExtensions(){const e=await this.extensionManagementService.getInstalled(F.User,this.profile.extensionsResource);return D(e.flatMap(t=>k(t.manifest)))}validateContent(e){if(this.hasErrors(e,!1))throw new se(V("errorInvalidSettings","Unable to sync settings as there are errors/warning in settings file."),oe.LocalInvalidContent,this.resource)}};C=w([a(2,P),a(3,L),a(4,O),a(5,ne),a(6,te),a(7,A),a(8,ie),a(9,B),a(10,ee),a(11,K),a(12,H),a(13,M)],C);let R=class extends W{constructor(r,e,t,i,n,s){super(T.Settings,e,t,i,r,n,s)}async doInitialize(r){const e=r.syncData?this.parseSettingsSyncContent(r.syncData.content):null;if(!e){this.logService.info("Skipping initializing settings because remote settings does not exist.");return}if(!await this.isEmpty()){this.logService.info("Skipping initializing settings because local settings exist.");return}await this.fileService.writeFile(this.userDataProfilesService.defaultProfile.settingsResource,J.fromString(e.settings)),await this.updateLastSyncUserData(r)}async isEmpty(){try{const r=await this.fileService.readFile(this.userDataProfilesService.defaultProfile.settingsResource);return N(r.value.toString().trim())}catch(r){return r.fileOperationResult===b.FILE_NOT_FOUND}}parseSettingsSyncContent(r){try{return q(r)}catch(e){this.logService.error(e)}return null}};R=w([a(0,P),a(1,Q),a(2,L),a(3,A),a(4,O),a(5,M)],R);export{R as SettingsInitializer,C as SettingsSynchroniser,q as parseSettingsSyncContent};
