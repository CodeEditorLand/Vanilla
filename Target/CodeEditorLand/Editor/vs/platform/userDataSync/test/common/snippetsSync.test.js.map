{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/snippetsSync.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { dirname, joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IEnvironmentService } from '../../../environment/common/environment.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { SnippetsSynchroniser } from '../../common/snippetsSync.js';\nimport { IResourcePreview, ISyncData, IUserDataSyncStoreService, PREVIEW_DIR_NAME, SyncResource, SyncStatus } from '../../common/userDataSync.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\n\nconst tsSnippet1 = `{\n\n\t// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the\n\t// same ids are connected.\n\t\"Print to console\": {\n\t// Example:\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\",\n\t}\n\n}`;\n\nconst tsSnippet2 = `{\n\n\t// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the\n\t// same ids are connected.\n\t\"Print to console\": {\n\t// Example:\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console always\",\n\t}\n\n}`;\n\nconst htmlSnippet1 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div\"\n\t}\n}`;\n\nconst htmlSnippet2 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div changed\"\n\t}\n}`;\n\nconst htmlSnippet3 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div changed again\"\n\t}\n}`;\n\nconst globalSnippet = `{\n\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and\n\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope\n\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is\n\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, and {1: label}, { 2: another } for placeholders.\n\t// Placeholders with the same ids are connected.\n\t// Example:\n\t// \"Print to console\": {\n\t// \t\"scope\": \"javascript,typescript\",\n\t// \t\"prefix\": \"log\",\n\t// \t\"body\": [\n\t// \t\t\"console.log('$1');\",\n\t// \t\t\"$2\"\n\t// \t],\n\t// \t\"description\": \"Log output to console\"\n\t// }\n}`;\n\nsuite('SnippetsSync', () => {\n\n\tconst server = new UserDataSyncTestServer();\n\tlet testClient: UserDataSyncClient;\n\tlet client2: UserDataSyncClient;\n\n\tlet testObject: SnippetsSynchroniser;\n\n\tteardown(async () => {\n\t\tawait testClient.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\ttestClient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait testClient.setUp(true);\n\t\ttestObject = testClient.getSynchronizer(SyncResource.Snippets) as SnippetsSynchroniser;\n\n\t\tclient2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t});\n\n\ttest('when snippets does not exist', async () => {\n\t\tconst fileService = testClient.instantiationService.get(IFileService);\n\t\tconst snippetsResource = testClient.instantiationService.get(IUserDataProfilesService).defaultProfile.snippetsHome;\n\n\t\tassert.deepStrictEqual(await testObject.getLastSyncUserData(), null);\n\t\tlet manifest = await testClient.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'GET', url: `${server.url}/v1/resource/${testObject.resource}/latest`, headers: {} },\n\t\t]);\n\t\tassert.ok(!await fileService.exists(snippetsResource));\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.strictEqual(lastSyncUserData!.syncData, null);\n\n\t\tmanifest = await testClient.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\n\t\tmanifest = await testClient.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\t});\n\n\ttest('when snippet is created after first sync', async () => {\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\n\t\tlet lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst manifest = await testClient.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'POST', url: `${server.url}/v1/resource/${testObject.resource}`, headers: { 'If-Match': lastSyncUserData?.ref } },\n\t\t]);\n\n\t\tlastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData!.content, JSON.stringify({ 'html.json': htmlSnippet1 }));\n\t});\n\n\ttest('first time sync - outgoing to server (no snippets)', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, testClient);\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('first time sync - incoming from server (no snippets)', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\t});\n\n\ttest('first time sync when snippets exists', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('typescript.json', tsSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('first time sync when snippets exists - has conflicts', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json');\n\t\tassertPreviews(testObject.conflicts.conflicts, [local]);\n\t});\n\n\ttest('first time sync when snippets exists - has conflicts and accept conflicts', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tconst conflicts = testObject.conflicts.conflicts;\n\t\tawait testObject.accept(conflicts[0].previewResource, htmlSnippet1);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1 });\n\t});\n\n\ttest('first time sync when snippets exists - has multiple conflicts', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local1 = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json');\n\t\tconst local2 = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json');\n\t\tassertPreviews(testObject.conflicts.conflicts, [local1, local2]);\n\t});\n\n\ttest('first time sync when snippets exists - has multiple conflicts and accept one conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tlet conflicts = testObject.conflicts.conflicts;\n\t\tawait testObject.accept(conflicts[0].previewResource, htmlSnippet2);\n\n\t\tconflicts = testObject.conflicts.conflicts;\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json');\n\t\tassertPreviews(testObject.conflicts.conflicts, [local]);\n\t});\n\n\ttest('first time sync when snippets exists - has multiple conflicts and accept all conflicts', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tconst conflicts = testObject.conflicts.conflicts;\n\t\tawait testObject.accept(conflicts[0].previewResource, htmlSnippet2);\n\t\tawait testObject.accept(conflicts[1].previewResource, tsSnippet1);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet2);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet2, 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('sync adding a snippet', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait updateSnippet('typescript.json', tsSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('sync adding a snippet - accept', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual2, tsSnippet1);\n\t});\n\n\ttest('sync updating a snippet', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet2);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet2 });\n\t});\n\n\ttest('sync updating a snippet - accept', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet2);\n\t});\n\n\ttest('sync updating a snippet - conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet3, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json');\n\t\tassertPreviews(testObject.conflicts.conflicts, [local]);\n\t});\n\n\ttest('sync updating a snippet - resolve conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet3, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tawait testObject.accept(testObject.conflicts.conflicts[0].previewResource, htmlSnippet2);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet2);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet2 });\n\t});\n\n\ttest('sync removing a snippet', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait removeSnippet('html.json', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, null);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('sync removing a snippet - accept', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait removeSnippet('html.json', client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, null);\n\t});\n\n\ttest('sync removing a snippet locally and updating it remotely', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, client2);\n\t\tawait client2.sync();\n\n\t\tawait removeSnippet('html.json', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, htmlSnippet2);\n\t});\n\n\ttest('sync removing a snippet - conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait removeSnippet('html.json', client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst local = joinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json');\n\t\tassertPreviews(testObject.conflicts.conflicts, [local]);\n\t});\n\n\ttest('sync removing a snippet - resolve conflict', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait removeSnippet('html.json', client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tawait testObject.accept(testObject.conflicts.conflicts[0].previewResource, htmlSnippet3);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, htmlSnippet3);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'typescript.json': tsSnippet1, 'html.json': htmlSnippet3 });\n\t});\n\n\ttest('sync removing a snippet - resolve conflict by removing', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tawait removeSnippet('html.json', client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tawait testObject.accept(testObject.conflicts.conflicts[0].previewResource, null);\n\t\tawait testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual2, null);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'typescript.json': tsSnippet1 });\n\t});\n\n\ttest('sync global and language snippet', async () => {\n\t\tawait updateSnippet('global.code-snippets', globalSnippet, client2);\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('html.json', testClient);\n\t\tassert.strictEqual(actual1, htmlSnippet1);\n\t\tconst actual2 = await readSnippet('global.code-snippets', testClient);\n\t\tassert.strictEqual(actual2, globalSnippet);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'html.json': htmlSnippet1, 'global.code-snippets': globalSnippet });\n\t});\n\n\ttest('sync should ignore non snippets', async () => {\n\t\tawait updateSnippet('global.code-snippets', globalSnippet, client2);\n\t\tawait updateSnippet('html.html', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst actual1 = await readSnippet('typescript.json', testClient);\n\t\tassert.strictEqual(actual1, tsSnippet1);\n\t\tconst actual2 = await readSnippet('global.code-snippets', testClient);\n\t\tassert.strictEqual(actual2, globalSnippet);\n\t\tconst actual3 = await readSnippet('html.html', testClient);\n\t\tassert.strictEqual(actual3, null);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSnippets(content);\n\t\tassert.deepStrictEqual(actual, { 'typescript.json': tsSnippet1, 'global.code-snippets': globalSnippet });\n\t});\n\n\ttest('previews are reset after all conflicts resolved', async () => {\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tconst conflicts = testObject.conflicts.conflicts;\n\t\tawait testObject.accept(conflicts[0].previewResource, htmlSnippet2);\n\t\tawait testObject.apply(false);\n\n\t\tconst fileService = testClient.instantiationService.get(IFileService);\n\t\tassert.ok(!await fileService.exists(dirname(conflicts[0].previewResource)));\n\t});\n\n\ttest('merge when there are multiple snippets and only one snippet is merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets and all snippets are merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[1].localResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets and all snippets are merged and applied', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[1].localResource);\n\t\tpreview = await testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.strictEqual(preview, null);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets and one snippet has no changes and one snippet is merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets and one snippet has no changes and one snippet is merged and applied', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\t\tpreview = await testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.strictEqual(preview, null);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t});\n\n\ttest('merge when there are multiple snippets with conflicts and only one snippet is merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassertPreviews(testObject.conflicts.conflicts,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t]);\n\t});\n\n\ttest('merge when there are multiple snippets with conflicts and all snippets are merged', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\tpreview = await testObject.merge(preview!.resourcePreviews[1].previewResource);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassertPreviews(testObject.conflicts.conflicts,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t});\n\n\ttest('accept when there are multiple snippets with conflicts and only one snippet is accepted', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource, htmlSnippet2);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t});\n\n\ttest('accept when there are multiple snippets with conflicts and all snippets are accepted', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource, htmlSnippet2);\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[1].previewResource, tsSnippet2);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t});\n\n\ttest('accept when there are multiple snippets with conflicts and all snippets are accepted and applied', async () => {\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2);\n\t\tawait updateSnippet('typescript.json', tsSnippet1, client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSnippet('html.json', htmlSnippet2, testClient);\n\t\tawait updateSnippet('typescript.json', tsSnippet2, testClient);\n\t\tlet preview = await testObject.preview(await testClient.getResourceManifest(), {});\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tassertPreviews(preview!.resourcePreviews,\n\t\t\t[\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'html.json'),\n\t\t\t\tjoinPath(environmentService.userDataSyncHome, testObject.resource, PREVIEW_DIR_NAME, 'typescript.json'),\n\t\t\t]);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource, htmlSnippet2);\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[1].previewResource, tsSnippet2);\n\t\tpreview = await testObject.apply(false);\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.strictEqual(preview, null);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t});\n\n\ttest('sync profile snippets', async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tconst profile = await client2.instantiationService.get(IUserDataProfilesService).createNamedProfile('profile1');\n\t\tawait updateSnippet('html.json', htmlSnippet1, client2, profile);\n\t\tawait client2.sync();\n\n\t\tawait testClient.sync();\n\n\t\tconst syncedProfile = testClient.instantiationService.get(IUserDataProfilesService).profiles.find(p => p.id === profile.id)!;\n\t\tconst content = await readSnippet('html.json', testClient, syncedProfile);\n\t\tassert.strictEqual(content, htmlSnippet1);\n\t});\n\n\tfunction parseSnippets(content: string): IStringDictionary<string> {\n\t\tconst syncData: ISyncData = JSON.parse(content);\n\t\treturn JSON.parse(syncData.content);\n\t}\n\n\tasync function updateSnippet(name: string, content: string, client: UserDataSyncClient, profile?: IUserDataProfile): Promise<void> {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tconst snippetsResource = joinPath((profile ?? userDataProfilesService.defaultProfile).snippetsHome, name);\n\t\tawait fileService.writeFile(snippetsResource, VSBuffer.fromString(content));\n\t}\n\n\tasync function removeSnippet(name: string, client: UserDataSyncClient): Promise<void> {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tconst snippetsResource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, name);\n\t\tawait fileService.del(snippetsResource);\n\t}\n\n\tasync function readSnippet(name: string, client: UserDataSyncClient, profile?: IUserDataProfile): Promise<string | null> {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tconst snippetsResource = joinPath((profile ?? userDataProfilesService.defaultProfile).snippetsHome, name);\n\t\tif (await fileService.exists(snippetsResource)) {\n\t\t\tconst content = await fileService.readFile(snippetsResource);\n\t\t\treturn content.value.toString();\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction assertPreviews(actual: IResourcePreview[], expected: URI[]) {\n\t\tassert.deepStrictEqual(actual.map(({ previewResource }) => previewResource.toString()), expected.map(uri => uri.toString()));\n\t}\n\n});\n"],
  "mappings": "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",
  "names": ["client2"]
}
