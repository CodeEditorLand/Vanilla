{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/globalStateMerge.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { merge } from '../../common/globalStateMerge.js';\n\nsuite('GlobalStateMerge', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('merge when local and remote are same with one value and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries in different order and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when local and remote are same with different base content', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\t\tconst base = { 'b': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when a new entry is added to remote and local has not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'b': { version: 1, value: 'b' } });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when multiple new entries are added to remote and local is not synced yet', async () => {\n\t\tconst local = {};\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when new entry is added to remote from base and local has not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'b': { version: 1, value: 'b' } });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when an entry is removed from remote from base and local has not changed', async () => {\n\t\tconst local = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, ['b']);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when all entries are removed from base and local has not changed', async () => {\n\t\tconst local = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\t\tconst remote = {};\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, ['b', 'a']);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when an entry is updated in remote from base and local has not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, { 'a': { version: 1, value: 'b' } });\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when remote has moved forwarded with multiple changes and local stays with base', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'd' }, 'c': { version: 1, value: 'c' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'c': { version: 1, value: 'c' } });\n\t\tassert.deepStrictEqual(actual.local.updated, { 'a': { version: 1, value: 'd' } });\n\t\tassert.deepStrictEqual(actual.local.removed, ['b']);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when new entries are added to local and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge when multiple new entries are added to local from base and remote is not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' }, 'c': { version: 1, value: 'c' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, remote, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge when an entry is removed from local from base and remote has not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, remote, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge when an entry is updated in local from base and remote has not changed', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, remote, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge when local has moved forwarded with multiple changes and remote stays with base', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'd' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' } };\n\n\t\tconst actual = merge(local, remote, remote, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge when local and remote with one entry but different value and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, { 'a': { version: 1, value: 'b' } });\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when the entry is removed in remote but updated in local and a new entry is added in remote', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'd' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'c': { version: 1, value: 'c' } });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' }, 'b': { version: 1, value: 'd' } });\n\t});\n\n\ttest('merge with single entry and local is empty', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' } };\n\t\tconst local = {};\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge when local and remote has moved forward with conflicts', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' } };\n\t\tconst local = { 'a': { version: 1, value: 'd' } };\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge when a new entry is added to remote but scoped to machine locally and local is not synced yet', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, null, { machine: ['b'], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when an entry is updated to remote but scoped to machine locally', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'a': { version: 1, value: 'b' } };\n\n\t\tconst actual = merge(local, remote, local, { machine: ['a'], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, null);\n\t});\n\n\ttest('merge when a local value is removed and scoped to machine locally', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\t\tconst remote = { 'b': { version: 1, value: 'b' }, 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: ['b'], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge when local moved forwared by changing a key to machine scope', async () => {\n\t\tconst base = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst local = { 'a': { version: 1, value: 'a' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: ['b'], unregistered: [] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, local);\n\t});\n\n\ttest('merge should not remove remote keys if not registered', async () => {\n\t\tconst local = { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' } };\n\t\tconst base = { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' } };\n\t\tconst remote = { 'a': { version: 1, value: 'a' }, 'c': { version: 1, value: 'c' } };\n\n\t\tconst actual = merge(local, remote, base, { machine: [], unregistered: ['c'] }, new NullLogService());\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.remote.all, { 'a': { version: 1, value: 'a' }, 'b': { version: 1, value: 'b' }, 'c': { version: 1, value: 'c' } });\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
