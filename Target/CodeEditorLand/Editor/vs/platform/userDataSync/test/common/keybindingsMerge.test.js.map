{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/keybindingsMerge.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { merge } from '../../common/keybindingsMerge.js';\nimport { TestUserDataSyncUtilService } from './userDataSyncClient.js';\n\nsuite('KeybindingsMerge - No Conflicts', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('merge when local and remote are same with one entry', async () => {\n\t\tconst localContent = stringify([{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst remoteContent = stringify([{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(!actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when local and remote are same with similar when contexts', async () => {\n\t\tconst localContent = stringify([{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst remoteContent = stringify([{ key: 'alt+c', command: 'a', when: '!editorReadonly && editorTextFocus' }]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(!actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when local and remote has entries in different order', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+a', command: 'a', when: 'editorTextFocus' }\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+a', command: 'a', when: 'editorTextFocus' },\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' }\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(!actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } }\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } }\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(!actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when local and remote are same with different base content', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } }\n\t\t]);\n\t\tconst baseContent = stringify([\n\t\t\t{ key: 'ctrl+c', command: 'e' },\n\t\t\t{ key: 'shift+d', command: 'd', args: { text: '`' } }\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } }\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, baseContent);\n\t\tassert.ok(!actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries in different order', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } }\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(!actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when local and remote are same when remove entry is in different order', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } }\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(!actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when a new entry is added to remote', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, remoteContent);\n\t});\n\n\ttest('merge when multiple new entries are added to remote', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t\t{ key: 'cmd+d', command: 'c' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, remoteContent);\n\t});\n\n\ttest('merge when multiple new entries are added to remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t\t{ key: 'cmd+d', command: 'c' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, localContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, remoteContent);\n\t});\n\n\ttest('merge when an entry is removed from remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, localContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, remoteContent);\n\t});\n\n\ttest('merge when an entry (same command) is removed from remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, localContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, remoteContent);\n\t});\n\n\ttest('merge when an entry is updated in remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, localContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, remoteContent);\n\t});\n\n\ttest('merge when a command with multiple entries is updated from remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'shift+c', command: 'c' },\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: 'b' },\n\t\t\t{ key: 'cmd+c', command: 'a' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'shift+c', command: 'c' },\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: 'b' },\n\t\t\t{ key: 'cmd+d', command: 'a' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, localContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, remoteContent);\n\t});\n\n\ttest('merge when remote has moved forwareded with multiple changes and local stays with base', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'alt+f', command: 'f' },\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, localContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, remoteContent);\n\t});\n\n\ttest('merge when a new entry is added to local', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when multiple new entries are added to local', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t\t{ key: 'cmd+d', command: 'c' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when multiple new entries are added to local from base and remote is not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t\t{ key: 'cmd+d', command: 'c' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, remoteContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when an entry is removed from local from base and remote has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, remoteContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when an entry (with same command) is removed from local from base and remote has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, remoteContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when an entry is updated in local from base and remote has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, remoteContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when a command with multiple entries is updated from local from base and remote has not changed', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'shift+c', command: 'c' },\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: 'b' },\n\t\t\t{ key: 'cmd+c', command: 'a' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'shift+c', command: 'c' },\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+d', command: 'b' },\n\t\t\t{ key: 'cmd+d', command: 'a' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, remoteContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, localContent);\n\t});\n\n\ttest('merge when local has moved forwareded with multiple changes and remote stays with base', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'alt+f', command: 'f' },\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'cmd+c', command: 'b', args: { text: '`' } },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t]);\n\t\tconst expected = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'alt+d', command: '-a' },\n\t\t\t{ key: 'alt+f', command: 'f' },\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, remoteContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, expected);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with conflicts', async () => {\n\t\tconst baseContent = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'ctrl+c', command: '-a' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'alt+a', command: 'f' },\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t]);\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t\t{ key: 'alt+a', command: 'f' },\n\t\t\t{ key: 'alt+e', command: 'e' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+a', command: 'f' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t\t{ key: 'cmd+d', command: 'd' },\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'alt+c', command: 'c', when: 'context1' },\n\t\t\t{ key: 'alt+g', command: 'g', when: 'context2' },\n\t\t]);\n\t\tconst expected = stringify([\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'cmd+d', command: 'd' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t\t{ key: 'alt+c', command: 'c', when: 'context1' },\n\t\t\t{ key: 'alt+a', command: 'f' },\n\t\t\t{ key: 'alt+e', command: 'e' },\n\t\t\t{ key: 'alt+g', command: 'g', when: 'context2' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, baseContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(!actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent, expected);\n\t});\n\n\ttest('merge when local and remote with one entry but different value', async () => {\n\t\tconst localContent = stringify([{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst remoteContent = stringify([{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent,\n\t\t\t`[\n\t{\n\t\t\"key\": \"alt+d\",\n\t\t\"command\": \"a\",\n\t\t\"when\": \"editorTextFocus && !editorReadonly\"\n\t}\n]`);\n\t});\n\n\ttest('merge when local and remote with different keybinding', async () => {\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+a', command: '-a', when: 'editorTextFocus && !editorReadonly' }\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+a', command: '-a', when: 'editorTextFocus && !editorReadonly' }\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, null);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent,\n\t\t\t`[\n\t{\n\t\t\"key\": \"alt+d\",\n\t\t\"command\": \"a\",\n\t\t\"when\": \"editorTextFocus && !editorReadonly\"\n\t},\n\t{\n\t\t\"key\": \"alt+a\",\n\t\t\"command\": \"-a\",\n\t\t\"when\": \"editorTextFocus && !editorReadonly\"\n\t}\n]`);\n\t});\n\n\ttest('merge when the entry is removed in local but updated in remote', async () => {\n\t\tconst baseContent = stringify([{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst localContent = stringify([]);\n\t\tconst remoteContent = stringify([{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, baseContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent,\n\t\t\t`[]`);\n\t});\n\n\ttest('merge when the entry is removed in local but updated in remote and a new entry is added in local', async () => {\n\t\tconst baseContent = stringify([{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst localContent = stringify([{ key: 'alt+b', command: 'b' }]);\n\t\tconst remoteContent = stringify([{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, baseContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent,\n\t\t\t`[\n\t{\n\t\t\"key\": \"alt+b\",\n\t\t\"command\": \"b\"\n\t}\n]`);\n\t});\n\n\ttest('merge when the entry is removed in remote but updated in local', async () => {\n\t\tconst baseContent = stringify([{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst localContent = stringify([{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst remoteContent = stringify([]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, baseContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent,\n\t\t\t`[\n\t{\n\t\t\"key\": \"alt+c\",\n\t\t\"command\": \"a\",\n\t\t\"when\": \"editorTextFocus && !editorReadonly\"\n\t}\n]`);\n\t});\n\n\ttest('merge when the entry is removed in remote but updated in local and a new entry is added in remote', async () => {\n\t\tconst baseContent = stringify([{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst localContent = stringify([{ key: 'alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' }]);\n\t\tconst remoteContent = stringify([{ key: 'alt+b', command: 'b' }]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, baseContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent,\n\t\t\t`[\n\t{\n\t\t\"key\": \"alt+c\",\n\t\t\"command\": \"a\",\n\t\t\"when\": \"editorTextFocus && !editorReadonly\"\n\t},\n\t{\n\t\t\"key\": \"alt+b\",\n\t\t\"command\": \"b\"\n\t}\n]`);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with conflicts (2)', async () => {\n\t\tconst baseContent = stringify([\n\t\t\t{ key: 'alt+d', command: 'a', when: 'editorTextFocus && !editorReadonly' },\n\t\t\t{ key: 'alt+c', command: '-a' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'alt+a', command: 'f' },\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t]);\n\t\tconst localContent = stringify([\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'cmd+e', command: 'd' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t\t{ key: 'cmd+d', command: 'c', when: 'context1' },\n\t\t\t{ key: 'alt+a', command: 'f' },\n\t\t\t{ key: 'alt+e', command: 'e' },\n\t\t]);\n\t\tconst remoteContent = stringify([\n\t\t\t{ key: 'alt+a', command: 'f' },\n\t\t\t{ key: 'cmd+c', command: '-c' },\n\t\t\t{ key: 'cmd+d', command: 'd' },\n\t\t\t{ key: 'alt+d', command: '-f' },\n\t\t\t{ key: 'alt+c', command: 'c', when: 'context1' },\n\t\t\t{ key: 'alt+g', command: 'g', when: 'context2' },\n\t\t]);\n\t\tconst actual = await mergeKeybindings(localContent, remoteContent, baseContent);\n\t\tassert.ok(actual.hasChanges);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.mergeContent,\n\t\t\t`[\n\t{\n\t\t\"key\": \"alt+d\",\n\t\t\"command\": \"-f\"\n\t},\n\t{\n\t\t\"key\": \"cmd+d\",\n\t\t\"command\": \"d\"\n\t},\n\t{\n\t\t\"key\": \"cmd+c\",\n\t\t\"command\": \"-c\"\n\t},\n\t{\n\t\t\"key\": \"cmd+d\",\n\t\t\"command\": \"c\",\n\t\t\"when\": \"context1\"\n\t},\n\t{\n\t\t\"key\": \"alt+a\",\n\t\t\"command\": \"f\"\n\t},\n\t{\n\t\t\"key\": \"alt+e\",\n\t\t\"command\": \"e\"\n\t},\n\t{\n\t\t\"key\": \"alt+g\",\n\t\t\"command\": \"g\",\n\t\t\"when\": \"context2\"\n\t}\n]`);\n\t});\n\n});\n\nasync function mergeKeybindings(localContent: string, remoteContent: string, baseContent: string | null) {\n\tconst userDataSyncUtilService = new TestUserDataSyncUtilService();\n\tconst formattingOptions = await userDataSyncUtilService.resolveFormattingOptions();\n\treturn merge(localContent, remoteContent, baseContent, formattingOptions, userDataSyncUtilService);\n}\n\nfunction stringify(value: any): string {\n\treturn JSON.stringify(value, null, '\\t');\n}\n"],
  "mappings": "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",
  "names": []
}
