{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/userDataAutoSyncService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IEnvironmentService } from '../../../environment/common/environment.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { IUserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { UserDataAutoSyncService } from '../../common/userDataAutoSyncService.js';\nimport { IUserDataSyncService, SyncResource, UserDataAutoSyncError, UserDataSyncErrorCode, UserDataSyncStoreError } from '../../common/userDataSync.js';\nimport { IUserDataSyncMachinesService } from '../../common/userDataSyncMachines.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\n\nclass TestUserDataAutoSyncService extends UserDataAutoSyncService {\n\tprotected override startAutoSync(): boolean { return false; }\n\tprotected override getSyncTriggerDelayTime(): number { return 50; }\n\n\tsync(): Promise<void> {\n\t\treturn this.triggerSync(['sync'], false, false);\n\t}\n}\n\nsuite('UserDataAutoSyncService', () => {\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('test auto sync with sync resource change triggers sync', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\t// Setup the client\n\t\t\tconst target = new UserDataSyncTestServer();\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\n\t\t\t// Sync once and reset requests\n\t\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\t\t\ttarget.reset();\n\n\t\t\tconst testObject: UserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\t// Trigger auto sync with settings change\n\t\t\tawait testObject.triggerSync([SyncResource.Settings], false, false);\n\n\t\t\t// Filter out machine requests\n\t\t\tconst actual = target.requests.filter(request => !request.url.startsWith(`${target.url}/v1/resource/machines`));\n\n\t\t\t// Make sure only one manifest request is made\n\t\t\tassert.deepStrictEqual(actual, [{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} }]);\n\t\t});\n\t});\n\n\ttest('test auto sync with sync resource change triggers sync for every change', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\t// Setup the client\n\t\t\tconst target = new UserDataSyncTestServer();\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\n\t\t\t// Sync once and reset requests\n\t\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\t\t\ttarget.reset();\n\n\t\t\tconst testObject: UserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\t// Trigger auto sync with settings change multiple times\n\t\t\tfor (let counter = 0; counter < 2; counter++) {\n\t\t\t\tawait testObject.triggerSync([SyncResource.Settings], false, false);\n\t\t\t}\n\n\t\t\t// Filter out machine requests\n\t\t\tconst actual = target.requests.filter(request => !request.url.startsWith(`${target.url}/v1/resource/machines`));\n\n\t\t\tassert.deepStrictEqual(actual, [\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: { 'If-None-Match': '1' } }\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('test auto sync with non sync resource change triggers sync', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\t// Setup the client\n\t\t\tconst target = new UserDataSyncTestServer();\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\n\t\t\t// Sync once and reset requests\n\t\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\t\t\ttarget.reset();\n\n\t\t\tconst testObject: UserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\t// Trigger auto sync with window focus once\n\t\t\tawait testObject.triggerSync(['windowFocus'], true, false);\n\n\t\t\t// Filter out machine requests\n\t\t\tconst actual = target.requests.filter(request => !request.url.startsWith(`${target.url}/v1/resource/machines`));\n\n\t\t\t// Make sure only one manifest request is made\n\t\t\tassert.deepStrictEqual(actual, [{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} }]);\n\t\t});\n\t});\n\n\ttest('test auto sync with non sync resource change does not trigger continuous syncs', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\t// Setup the client\n\t\t\tconst target = new UserDataSyncTestServer();\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\n\t\t\t// Sync once and reset requests\n\t\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\t\t\ttarget.reset();\n\n\t\t\tconst testObject: UserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\t// Trigger auto sync with window focus multiple times\n\t\t\tfor (let counter = 0; counter < 2; counter++) {\n\t\t\t\tawait testObject.triggerSync(['windowFocus'], true, false);\n\t\t\t}\n\n\t\t\t// Filter out machine requests\n\t\t\tconst actual = target.requests.filter(request => !request.url.startsWith(`${target.url}/v1/resource/machines`));\n\n\t\t\t// Make sure only one manifest request is made\n\t\t\tassert.deepStrictEqual(actual, [{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} }]);\n\t\t});\n\t});\n\n\ttest('test first auto sync requests', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\t// Setup the client\n\t\t\tconst target = new UserDataSyncTestServer();\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\tawait testObject.sync();\n\n\t\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t\t// Manifest\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t\t// Machines\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/machines/latest`, headers: {} },\n\t\t\t\t// Settings\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: {} },\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '0' } },\n\t\t\t\t// Keybindings\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '0' } },\n\t\t\t\t// Snippets\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '0' } },\n\t\t\t\t// Tasks\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/tasks/latest`, headers: {} },\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/tasks`, headers: { 'If-Match': '0' } },\n\t\t\t\t// Global state\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '0' } },\n\t\t\t\t// Extensions\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t\t// Profiles\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: {} },\n\t\t\t\t// Manifest\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t\t// Machines\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/machines`, headers: { 'If-Match': '0' } }\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('test further auto sync requests without changes', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\t// Setup the client\n\t\t\tconst target = new UserDataSyncTestServer();\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\t// Sync once and reset requests\n\t\t\tawait testObject.sync();\n\t\t\ttarget.reset();\n\n\t\t\tawait testObject.sync();\n\n\t\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t\t// Manifest\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: { 'If-None-Match': '1' } }\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('test further auto sync requests with changes', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\t// Setup the client\n\t\t\tconst target = new UserDataSyncTestServer();\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\t// Sync once and reset requests\n\t\t\tawait testObject.sync();\n\t\t\ttarget.reset();\n\n\t\t\t// Do changes in the client\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{}`));\n\t\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\t\t\tawait testObject.sync();\n\n\t\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t\t// Manifest\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: { 'If-None-Match': '1' } },\n\t\t\t\t// Settings\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '1' } },\n\t\t\t\t// Keybindings\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '1' } },\n\t\t\t\t// Snippets\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '1' } },\n\t\t\t\t// Global state\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '1' } },\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('test auto sync send execution id header', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\t// Setup the client\n\t\t\tconst target = new UserDataSyncTestServer();\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(client.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\t// Sync once and reset requests\n\t\t\tawait testObject.sync();\n\t\t\ttarget.reset();\n\n\t\t\tawait testObject.sync();\n\n\t\t\tfor (const request of target.requestsWithAllHeaders) {\n\t\t\t\tconst hasExecutionIdHeader = request.headers && request.headers['X-Execution-Id'] && request.headers['X-Execution-Id'].length > 0;\n\t\t\t\tif (request.url.startsWith(`${target.url}/v1/resource/machines`)) {\n\t\t\t\t\tassert.ok(!hasExecutionIdHeader, `Should not have execution header: ${request.url}`);\n\t\t\t\t} else {\n\t\t\t\t\tassert.ok(hasExecutionIdHeader, `Should have execution header: ${request.url}`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('test delete on one client throws turned off error on other client while syncing', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tconst target = new UserDataSyncTestServer();\n\n\t\t\t// Set up and sync from the client\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\t\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t\t// Set up and sync from the test client\n\t\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait testClient.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\t\t\tawait testObject.sync();\n\n\t\t\t// Reset from the first client\n\t\t\tawait client.instantiationService.get(IUserDataSyncService).reset();\n\n\t\t\t// Sync from the test client\n\t\t\ttarget.reset();\n\n\t\t\tconst errorPromise = Event.toPromise(testObject.onError);\n\t\t\tawait testObject.sync();\n\n\t\t\tconst e = await errorPromise;\n\t\t\tassert.ok(e instanceof UserDataAutoSyncError);\n\t\t\tassert.deepStrictEqual((<UserDataAutoSyncError>e).code, UserDataSyncErrorCode.TurnedOff);\n\t\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t\t// Manifest\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: { 'If-None-Match': '1' } },\n\t\t\t\t// Machine\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/machines/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('test disabling the machine turns off sync', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tconst target = new UserDataSyncTestServer();\n\n\t\t\t// Set up and sync from the test client\n\t\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait testClient.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\t\t\tawait testObject.sync();\n\n\t\t\t// Disable current machine\n\t\t\tconst userDataSyncMachinesService = testClient.instantiationService.get(IUserDataSyncMachinesService);\n\t\t\tconst machines = await userDataSyncMachinesService.getMachines();\n\t\t\tconst currentMachine = machines.find(m => m.isCurrent)!;\n\t\t\tawait userDataSyncMachinesService.setEnablements([[currentMachine.id, false]]);\n\n\t\t\ttarget.reset();\n\n\t\t\tconst errorPromise = Event.toPromise(testObject.onError);\n\t\t\tawait testObject.sync();\n\n\t\t\tconst e = await errorPromise;\n\t\t\tassert.ok(e instanceof UserDataAutoSyncError);\n\t\t\tassert.deepStrictEqual((<UserDataAutoSyncError>e).code, UserDataSyncErrorCode.TurnedOff);\n\t\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t\t// Manifest\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: { 'If-None-Match': '1' } },\n\t\t\t\t// Machine\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/machines/latest`, headers: { 'If-None-Match': '2' } },\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/machines`, headers: { 'If-Match': '2' } },\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('test removing the machine adds machine back', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tconst target = new UserDataSyncTestServer();\n\n\t\t\t// Set up and sync from the test client\n\t\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait testClient.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\t\t\tawait testObject.sync();\n\n\t\t\t// Remove current machine\n\t\t\tawait testClient.instantiationService.get(IUserDataSyncMachinesService).removeCurrentMachine();\n\n\t\t\ttarget.reset();\n\n\t\t\tawait testObject.sync();\n\t\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t\t// Manifest\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: { 'If-None-Match': '1' } },\n\t\t\t\t// Machine\n\t\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/machines`, headers: { 'If-Match': '2' } },\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('test creating new session from one client throws session expired error on another client while syncing', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tconst target = new UserDataSyncTestServer();\n\n\t\t\t// Set up and sync from the client\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait client.setUp();\n\t\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t\t// Set up and sync from the test client\n\t\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait testClient.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\t\t\tawait testObject.sync();\n\n\t\t\t// Reset from the first client\n\t\t\tawait client.instantiationService.get(IUserDataSyncService).reset();\n\n\t\t\t// Sync again from the first client to create new session\n\t\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t\t// Sync from the test client\n\t\t\ttarget.reset();\n\n\t\t\tconst errorPromise = Event.toPromise(testObject.onError);\n\t\t\tawait testObject.sync();\n\n\t\t\tconst e = await errorPromise;\n\t\t\tassert.ok(e instanceof UserDataAutoSyncError);\n\t\t\tassert.deepStrictEqual((<UserDataAutoSyncError>e).code, UserDataSyncErrorCode.SessionExpired);\n\t\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t\t// Manifest\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: { 'If-None-Match': '1' } },\n\t\t\t\t// Machine\n\t\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/machines/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('test rate limit on server', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tconst target = new UserDataSyncTestServer(5);\n\n\t\t\t// Set up and sync from the test client\n\t\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait testClient.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\tconst errorPromise = Event.toPromise(testObject.onError);\n\t\t\twhile (target.requests.length < 5) {\n\t\t\t\tawait testObject.sync();\n\t\t\t}\n\n\t\t\tconst e = await errorPromise;\n\t\t\tassert.ok(e instanceof UserDataSyncStoreError);\n\t\t\tassert.deepStrictEqual((<UserDataSyncStoreError>e).code, UserDataSyncErrorCode.TooManyRequests);\n\t\t});\n\t});\n\n\ttest('test auto sync is suspended when server donot accepts requests', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tconst target = new UserDataSyncTestServer(5, 1);\n\n\t\t\t// Set up and sync from the test client\n\t\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait testClient.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\twhile (target.requests.length < 5) {\n\t\t\t\tawait testObject.sync();\n\t\t\t}\n\n\t\t\ttarget.reset();\n\t\t\tawait testObject.sync();\n\n\t\t\tassert.deepStrictEqual(target.requests, []);\n\t\t});\n\t});\n\n\ttest('test cache control header with no cache is sent when triggered with disable cache option', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tconst target = new UserDataSyncTestServer(5, 1);\n\n\t\t\t// Set up and sync from the test client\n\t\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait testClient.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\tawait testObject.triggerSync(['some reason'], true, true);\n\t\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['Cache-Control'], 'no-cache');\n\t\t});\n\t});\n\n\ttest('test cache control header is not sent when triggered without disable cache option', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tconst target = new UserDataSyncTestServer(5, 1);\n\n\t\t\t// Set up and sync from the test client\n\t\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\t\tawait testClient.setUp();\n\t\t\tconst testObject: TestUserDataAutoSyncService = disposableStore.add(testClient.instantiationService.createInstance(TestUserDataAutoSyncService));\n\n\t\t\tawait testObject.triggerSync(['some reason'], true, false);\n\t\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['Cache-Control'], undefined);\n\t\t});\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
