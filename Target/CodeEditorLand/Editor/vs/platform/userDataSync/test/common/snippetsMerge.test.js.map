{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/snippetsMerge.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { merge } from '../../common/snippetsMerge.js';\n\nconst tsSnippet1 = `{\n\n\t// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the\n\t// same ids are connected.\n\t\"Print to console\": {\n\t// Example:\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\",\n\t}\n\n}`;\n\nconst tsSnippet2 = `{\n\n\t// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the\n\t// same ids are connected.\n\t\"Print to console\": {\n\t// Example:\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console always\",\n\t}\n\n}`;\n\nconst htmlSnippet1 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div\"\n\t}\n}`;\n\nconst htmlSnippet2 = `{\n/*\n\t// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n*/\n\"Div\": {\n\t\"prefix\": \"div\",\n\t\t\"body\": [\n\t\t\t\"<div>\",\n\t\t\t\"\",\n\t\t\t\"</div>\"\n\t\t],\n\t\t\t\"description\": \"New div changed\"\n\t}\n}`;\n\nconst cSnippet = `{\n\t// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and\n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position.Placeholders with the\n\t// same ids are connected.\n\t// Example:\n\t\"Print to console\": {\n\t\"prefix\": \"log\",\n\t\t\"body\": [\n\t\t\t\"console.log('$1');\",\n\t\t\t\"$2\"\n\t\t],\n\t\t\t\"description\": \"Log output to console\"\n\t}\n}`;\n\nsuite('SnippetsMerge', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('merge when local and remote are same with one snippet', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries in different order', async () => {\n\t\tconst local = { 'typescript.json': tsSnippet1, 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote are same with different base content', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst base = { 'html.json': htmlSnippet2, 'typescript.json': tsSnippet2 };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when a new entry is added to remote', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'typescript.json': tsSnippet1 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when multiple new entries are added to remote', async () => {\n\t\tconst local = {};\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, remote);\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when new entry is added to remote from base and local has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'typescript.json': tsSnippet1 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when an entry is removed from remote from base and local has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1 };\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, ['typescript.json']);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when all entries are removed from base and local has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = {};\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, ['html.json', 'typescript.json']);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when an entry is updated in remote from base and local has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet2 };\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when remote has moved forwarded with multiple changes and local stays with base', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet2, 'c.json': cSnippet };\n\n\t\tconst actual = merge(local, remote, local);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.local.updated, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.local.removed, ['typescript.json']);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when a new entries are added to local', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1, 'c.json': cSnippet };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, { 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when multiple new entries are added to local from base and remote is not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1, 'c.json': cSnippet };\n\t\tconst remote = { 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, remote);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, { 'html.json': htmlSnippet1, 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when an entry is removed from local from base and remote has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, remote);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, ['typescript.json']);\n\t});\n\n\ttest('merge when an entry is updated in local from base and remote has not changed', async () => {\n\t\tconst local = { 'html.json': htmlSnippet2, 'typescript.json': tsSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, remote);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local has moved forwarded with multiple changes and remote stays with base', async () => {\n\t\tconst local = { 'html.json': htmlSnippet2, 'c.json': cSnippet };\n\t\tconst remote = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, remote);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, { 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.remote.updated, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.remote.removed, ['typescript.json']);\n\t});\n\n\ttest('merge when local and remote with one entry but different value', async () => {\n\t\tconst local = { 'html.json': htmlSnippet1 };\n\t\tconst remote = { 'html.json': htmlSnippet2 };\n\n\t\tconst actual = merge(local, remote, null);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, ['html.json']);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when the entry is removed in remote but updated in local and a new entry is added in remote', async () => {\n\t\tconst base = { 'html.json': htmlSnippet1 };\n\t\tconst local = { 'html.json': htmlSnippet2 };\n\t\tconst remote = { 'typescript.json': tsSnippet1 };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'typescript.json': tsSnippet1 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, ['html.json']);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge with single entry and local is empty', async () => {\n\t\tconst base = { 'html.json': htmlSnippet1 };\n\t\tconst local = {};\n\t\tconst remote = { 'html.json': htmlSnippet2 };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'html.json': htmlSnippet2 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, []);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with conflicts', async () => {\n\t\tconst base = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst local = { 'html.json': htmlSnippet2, 'c.json': cSnippet };\n\t\tconst remote = { 'typescript.json': tsSnippet2 };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, { 'typescript.json': tsSnippet2 });\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, ['html.json']);\n\t\tassert.deepStrictEqual(actual.remote.added, { 'c.json': cSnippet });\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with multiple conflicts', async () => {\n\t\tconst base = { 'html.json': htmlSnippet1, 'typescript.json': tsSnippet1 };\n\t\tconst local = { 'html.json': htmlSnippet2, 'typescript.json': tsSnippet2, 'c.json': cSnippet };\n\t\tconst remote = { 'c.json': cSnippet };\n\n\t\tconst actual = merge(local, remote, base);\n\n\t\tassert.deepStrictEqual(actual.local.added, {});\n\t\tassert.deepStrictEqual(actual.local.updated, {});\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.conflicts, ['html.json', 'typescript.json']);\n\t\tassert.deepStrictEqual(actual.remote.added, {});\n\t\tassert.deepStrictEqual(actual.remote.updated, {});\n\t\tassert.deepStrictEqual(actual.remote.removed, []);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
