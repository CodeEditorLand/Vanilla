{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/extensionsMerge.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { merge } from '../../common/extensionsMerge.js';\nimport { ILocalSyncExtension, ISyncExtension } from '../../common/userDataSync.js';\n\nsuite('ExtensionsMerge', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('merge returns local extension if remote does not exist', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, null, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, localExtensions);\n\t});\n\n\ttest('merge returns local extension if remote does not exist with ignored extensions', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tlocalExtensions[1],\n\t\t\tlocalExtensions[2],\n\t\t];\n\n\t\tconst actual = merge(localExtensions, null, null, [], ['a'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge returns local extension if remote does not exist with ignored extensions (ignore case)', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tlocalExtensions[1],\n\t\t\tlocalExtensions[2],\n\t\t];\n\n\t\tconst actual = merge(localExtensions, null, null, [], ['A'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge returns local extension if remote does not exist with skipped extensions', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst skippedExtension = [\n\t\t\taSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t];\n\t\tconst expected = [...localExtensions];\n\n\t\tconst actual = merge(localExtensions, null, null, skippedExtension, [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge returns local extension if remote does not exist with skipped and ignored extensions', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst skippedExtension = [\n\t\t\taSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t];\n\t\tconst expected = [localExtensions[1], localExtensions[2]];\n\n\t\tconst actual = merge(localExtensions, null, null, skippedExtension, ['a'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when there is no base', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t]);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when there is no base and with ignored extensions', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], ['a'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t]);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when remote is moved forwarded', () => {\n\t\tconst baseExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t]);\n\t\tassert.deepStrictEqual(actual.local.removed, [{ id: 'a', uuid: 'a' }, { id: 'd', uuid: 'd' }]);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.strictEqual(actual.remote, null);\n\t});\n\n\ttest('merge local and remote extensions when remote is moved forwarded with disabled extension', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' }, disabled: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t]);\n\t\tassert.deepStrictEqual(actual.local.removed, [{ id: 'a', uuid: 'a' }]);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'd', uuid: 'd' }, disabled: true })]);\n\t\tassert.strictEqual(actual.remote, null);\n\t});\n\n\ttest('merge local and remote extensions when remote moved forwarded with ignored extensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], ['a'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t]);\n\t\tassert.deepStrictEqual(actual.local.removed, [{ id: 'd', uuid: 'd' }]);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.strictEqual(actual.remote, null);\n\t});\n\n\ttest('merge local and remote extensions when remote is moved forwarded with skipped extensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst skippedExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, skippedExtensions, [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t]);\n\t\tassert.deepStrictEqual(actual.local.removed, [{ id: 'd', uuid: 'd' }]);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.strictEqual(actual.remote, null);\n\t});\n\n\ttest('merge local and remote extensions when remote is moved forwarded with skipped and ignored extensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst skippedExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, skippedExtensions, ['b'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [anExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } })]);\n\t\tassert.deepStrictEqual(actual.local.removed, [{ id: 'd', uuid: 'd' }]);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.strictEqual(actual.remote, null);\n\t});\n\n\ttest('merge local and remote extensions when local is moved forwarded', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when local is moved forwarded with disabled extensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, disabled: true }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, disabled: true }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when local is moved forwarded with ignored settings', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], ['b'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t]);\n\t});\n\n\ttest('merge local and remote extensions when local is moved forwarded with skipped extensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst skippedExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, skippedExtensions, [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when local is moved forwarded with skipped and ignored extensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst skippedExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, skippedExtensions, ['c'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when both moved forwarded', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'e', uuid: 'e' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'e', uuid: 'e' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [anExpectedSyncExtension({ identifier: { id: 'e', uuid: 'e' } })]);\n\t\tassert.deepStrictEqual(actual.local.removed, [{ id: 'a', uuid: 'a' }]);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when both moved forwarded with ignored extensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'e', uuid: 'e' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'e', uuid: 'e' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], ['a', 'e'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when both moved forwarded with skipped extensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst skippedExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'e', uuid: 'e' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'e', uuid: 'e' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, skippedExtensions, [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [anExpectedSyncExtension({ identifier: { id: 'e', uuid: 'e' } })]);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge local and remote extensions when both moved forwarded with skipped and ignoredextensions', () => {\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst skippedExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'e', uuid: 'e' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'e', uuid: 'e' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, skippedExtensions, ['e'], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge when remote extension has no uuid and different extension id case', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\taLocalSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'A' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'A', uuid: 'a' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'd', uuid: 'd' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'c', uuid: 'c' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [anExpectedSyncExtension({ identifier: { id: 'd', uuid: 'd' } })]);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge when remote extension is not an installed extension', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' }, installed: false }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when remote extension is not an installed extension but is an installed extension locally', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge when an extension is not an installed extension remotely and does not exist locally', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' }, installed: false }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge when an extension is an installed extension remotely but not locally and updated locally', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, disabled: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst expected = [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, disabled: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge when an extension is an installed extension remotely but not locally and updated remotely', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, disabled: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, localExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [\n\t\t\tanExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, disabled: true }),\n\t\t]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge not installed extensions', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' }, installed: false }),\n\t\t];\n\t\tconst expected: ISyncExtension[] = [\n\t\t\tanExpectedBuiltinSyncExtension({ identifier: { id: 'b', uuid: 'b' } }),\n\t\t\tanExpectedBuiltinSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, expected);\n\t});\n\n\ttest('merge: remote extension with prerelease is added', () => {\n\t\tconst localExtensions: ILocalSyncExtension[] = [];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true })]);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension with prerelease is added', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\t\tconst remoteExtensions: ILocalSyncExtension[] = [];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true })]);\n\t});\n\n\ttest('merge: remote extension with prerelease is added when local extension without prerelease is added', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: remote extension without prerelease is added when local extension with prerelease is added', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: remote extension is changed to prerelease', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, localExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: remote extension is changed to release', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, localExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension is changed to prerelease', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true })]);\n\t});\n\n\ttest('merge: local extension is changed to release', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [aRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote preRelease property is taken precedence when there are no updates', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote preRelease property is taken precedence when there are updates locally', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false, disabled: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true, disabled: true })]);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote preRelease property is taken precedence when there are updates remotely', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true, disabled: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, preRelease: true, disabled: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote version is taken precedence when there are no updates', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote version is taken precedence when there are updates locally', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false, disabled: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0', disabled: true })]);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote version property is taken precedence when there are updates remotely', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0', disabled: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0', disabled: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: base has builtin extension, local does not have extension, remote has extension installed', () => {\n\t\tconst localExtensions: ILocalSyncExtension[] = [];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0', installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' })]);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: base has installed extension, local has installed extension, remote has extension builtin', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, [{ id: 'a', uuid: 'a' }]);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: base has installed extension, local has builtin extension, remote does not has extension', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions: ILocalSyncExtension[] = [];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedBuiltinSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t});\n\n\ttest('merge: base has builtin extension, local has installed extension, remote has builtin extension with updated state', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false, state: { 'a': 1 } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], [{ id: 'a', uuid: 'a' }]);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, state: { 'a': 1 } })]);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, state: { 'a': 1 } })]);\n\t});\n\n\ttest('merge: base has installed extension, last time synced as builtin extension, local has installed extension, remote has builtin extension with updated state', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false, state: { 'a': 1 } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], [{ id: 'a', uuid: 'a' }]);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, state: { 'a': 1 } })]);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, state: { 'a': 1 } })]);\n\t});\n\n\ttest('merge: base has builtin extension, local does not have extension, remote has builtin extension', () => {\n\t\tconst localExtensions: ILocalSyncExtension[] = [];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0', installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0', installed: false }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: base has installed extension, last synced as builtin, local does not have extension, remote has installed extension', () => {\n\t\tconst localExtensions: ILocalSyncExtension[] = [];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], [{ id: 'a', uuid: 'a' }]);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: base has builtin extension, last synced as builtin, local does not have extension, remote has installed extension', () => {\n\t\tconst localExtensions: ILocalSyncExtension[] = [];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0', installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], [{ id: 'a', uuid: 'a' }]);\n\n\t\tassert.deepStrictEqual(actual.local.added, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '1.1.0' })]);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: remote extension with pinned is added', () => {\n\t\tconst localExtensions: ILocalSyncExtension[] = [];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true })]);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension with pinned is added', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\t\tconst remoteExtensions: ILocalSyncExtension[] = [];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true })]);\n\t});\n\n\ttest('merge: remote extension with pinned is added when local extension without pinned is added', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: remote extension without pinned is added when local extension with pinned is added', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: remote extension is changed to pinned', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, localExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: remote extension is changed to unpinned', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, localExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension is changed to pinned', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true })]);\n\t});\n\n\ttest('merge: local extension is changed to unpinned', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [aRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote pinned property is taken precedence when there are no updates', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote pinned property is taken precedence when there are updates locally', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false, disabled: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true, disabled: true })]);\n\t});\n\n\ttest('merge: local extension not an installed extension - remote pinned property is taken precedence when there are updates remotely', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, installed: false }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true, disabled: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true, disabled: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension is changed to pinned and version changed', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.1', pinned: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.1', pinned: true })]);\n\t});\n\n\ttest('merge: local extension is changed to unpinned and version changed', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.1', pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t});\n\n\ttest('merge: remote extension is changed to pinned and version changed', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.1', pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, localExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.1', pinned: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension is changed to pinned and version changed and remote extension is channged to pinned with different version', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.1', pinned: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.2', pinned: true }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.2', pinned: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: remote extension is changed to unpinned and version changed', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.1', pinned: true }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, localExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge: local extension is changed to unpinned and version changed and remote extension is channged to unpinned with different version', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.1' }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, version: '0.0.2' }),\n\t\t];\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, pinned: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('sync adding local application scoped extension', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, isApplicationScoped: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, null, null, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, localExtensions);\n\t});\n\n\ttest('sync merging local extension with isApplicationScoped property and remote does not has isApplicationScoped property', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, isApplicationScoped: false }),\n\t\t];\n\n\t\tconst baseExtensions = [\n\t\t\taSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, baseExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' } })]);\n\t});\n\n\ttest('sync merging when applicaiton scope is changed locally', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, isApplicationScoped: true }),\n\t\t];\n\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, isApplicationScoped: false }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, baseExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote?.all, localExtensions);\n\t});\n\n\ttest('sync merging when applicaiton scope is changed remotely', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' }, isApplicationScoped: false }),\n\t\t];\n\n\t\tconst baseExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, isApplicationScoped: false }),\n\t\t];\n\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' }, isApplicationScoped: true }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, baseExtensions, [], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, [anExpectedSyncExtension({ identifier: { id: 'a', uuid: 'a' }, isApplicationScoped: true })]);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge does not remove remote extension when skipped extension has uuid but remote does not has', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [aRemoteSyncExtension({ identifier: { id: 'b', uuid: 'b' } })], [], []);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\ttest('merge does not remove remote extension when last sync builtin extension has uuid but remote does not has', () => {\n\t\tconst localExtensions = [\n\t\t\taLocalSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t];\n\t\tconst remoteExtensions = [\n\t\t\taRemoteSyncExtension({ identifier: { id: 'a', uuid: 'a' } }),\n\t\t\taRemoteSyncExtension({ identifier: { id: 'b' } }),\n\t\t];\n\n\t\tconst actual = merge(localExtensions, remoteExtensions, remoteExtensions, [], [], [{ id: 'b', uuid: 'b' }]);\n\n\t\tassert.deepStrictEqual(actual.local.added, []);\n\t\tassert.deepStrictEqual(actual.local.removed, []);\n\t\tassert.deepStrictEqual(actual.local.updated, []);\n\t\tassert.deepStrictEqual(actual.remote, null);\n\t});\n\n\tfunction anExpectedSyncExtension(extension: Partial<ISyncExtension>): ISyncExtension {\n\t\treturn {\n\t\t\tidentifier: { id: 'a', uuid: 'a' },\n\t\t\tversion: '1.0.0',\n\t\t\tpinned: false,\n\t\t\tpreRelease: false,\n\t\t\tinstalled: true,\n\t\t\t...extension\n\t\t};\n\t}\n\n\tfunction anExpectedBuiltinSyncExtension(extension: Partial<ISyncExtension>): ISyncExtension {\n\t\treturn {\n\t\t\tidentifier: { id: 'a', uuid: 'a' },\n\t\t\tversion: '1.0.0',\n\t\t\tpinned: false,\n\t\t\tpreRelease: false,\n\t\t\t...extension\n\t\t};\n\t}\n\n\tfunction aLocalSyncExtension(extension: Partial<ILocalSyncExtension>): ILocalSyncExtension {\n\t\treturn {\n\t\t\tidentifier: { id: 'a', uuid: 'a' },\n\t\t\tversion: '1.0.0',\n\t\t\tpinned: false,\n\t\t\tpreRelease: false,\n\t\t\tinstalled: true,\n\t\t\t...extension\n\t\t};\n\t}\n\n\tfunction aRemoteSyncExtension(extension: Partial<ILocalSyncExtension>): ILocalSyncExtension {\n\t\treturn {\n\t\t\tidentifier: { id: 'a', uuid: 'a' },\n\t\t\tversion: '1.0.0',\n\t\t\tpinned: false,\n\t\t\tpreRelease: false,\n\t\t\tinstalled: true,\n\t\t\t...extension\n\t\t};\n\t}\n\n\tfunction aSyncExtension(extension: Partial<ISyncExtension>): ISyncExtension {\n\t\treturn {\n\t\t\tidentifier: { id: 'a', uuid: 'a' },\n\t\t\tversion: '1.0.0',\n\t\t\tinstalled: true,\n\t\t\t...extension\n\t\t};\n\t}\n\n});\n"],
  "mappings": "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",
  "names": []
}
