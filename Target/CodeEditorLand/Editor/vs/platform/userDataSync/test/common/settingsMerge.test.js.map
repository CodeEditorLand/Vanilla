{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/settingsMerge.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { addSetting, merge, updateIgnoredSettings } from '../../common/settingsMerge.js';\nimport type { IConflictSetting } from '../../common/userDataSync.js';\n\nconst formattingOptions = { eol: '\\n', insertSpaces: false, tabSize: 4 };\n\nsuite('SettingsMerge - Merge', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('merge when local and remote are same with one entry', async () => {\n\t\tconst localContent = stringify({ 'a': 1 });\n\t\tconst remoteContent = stringify({ 'a': 1 });\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local and remote are same with multiple entries in different order', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'b': 2,\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t});\n\n\ttest('merge when local and remote are same with different base content', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'b': 2,\n\t\t\t'a': 1,\n\t\t});\n\t\tconst baseContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(actual.hasConflicts);\n\t});\n\n\ttest('merge when a new entry is added to remote', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when multiple new entries are added to remote', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when multiple new entries are added to remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'b': 2,\n\t\t\t'a': 1,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when an entry is removed from remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when all entries are removed from base and local has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when an entry is updated in remote from base and local has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has moved forwareded with multiple changes and local stays with base', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has moved forwareded with order changes and local stays with base', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'd': 4,\n\t\t\t'c': 3,\n\t\t\t'b': 2,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has moved forwareded with comment changes and local stays with base', async () => {\n\t\tconst localContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// comment b has changed\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has moved forwareded with comment and order changes and local stays with base', async () => {\n\t\tconst localContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// this is comment for c\n\t\"c\": 1,\n\t// comment b has changed\n\t\"b\": 2,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, localContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when a new entries are added to local', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when multiple new entries are added to local from base and remote is not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when an entry is removed from local from base and remote has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'c': 2\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when an entry is updated in local from base and remote has not changed', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'c': 2\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 2,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local has moved forwarded with multiple changes and remote stays with base', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local has moved forwarded with order changes and remote stays with base', async () => {\n\t\tconst localContent = `\n{\n\t\"b\": 2,\n\t\"c\": 1,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t\"c\": 1,\n\t\"b\": 2,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local has moved forwarded with comment changes and remote stays with base', async () => {\n\t\tconst localContent = `\n{\n\t// comment for b has changed\n\t\"b\": 2,\n\t// comment for c\n\t\"c\": 1,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// comment for b\n\t\"b\": 2,\n\t// comment for c\n\t\"c\": 1,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local has moved forwarded with comment and order changes and remote stays with base', async () => {\n\t\tconst localContent = `\n{\n\t// comment for c\n\t\"c\": 1,\n\t// comment for b has changed\n\t\"b\": 2,\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// comment for b\n\t\"b\": 2,\n\t// comment for c\n\t\"c\": 1,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, remoteContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, localContent);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('merge when local and remote with one entry but different value', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [{ key: 'a', localValue: 1, remoteValue: 2 }];\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('merge when the entry is removed in remote but updated in local and a new entry is added in remote', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 2\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'b': 2\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [{ key: 'a', localValue: 2, remoteValue: undefined }];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 2\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('merge with single entry and local is empty', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1\n\t\t});\n\t\tconst localContent = stringify({});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 2\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [{ key: 'a', localValue: undefined, remoteValue: 2 }];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with conflicts', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t\t'e': 4,\n\t\t\t'f': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'b': 3,\n\t\t\t'c': 3,\n\t\t\t'd': 6,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [\n\t\t\t{ key: 'b', localValue: undefined, remoteValue: 3 },\n\t\t\t{ key: 'a', localValue: 2, remoteValue: undefined },\n\t\t\t{ key: 'd', localValue: 5, remoteValue: 6 },\n\t\t\t{ key: 'e', localValue: 4, remoteValue: 5 },\n\t\t];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t\t'e': 4,\n\t\t\t'f': 1,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'b': 3,\n\t\t\t'c': 3,\n\t\t\t'd': 6,\n\t\t\t'e': 5,\n\t\t\t'f': 1,\n\t\t}));\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with change in order', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'b': 2,\n\t\t\t'd': 4,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 4,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 4,\n\t\t\t'b': 2,\n\t\t\t'e': 5,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 2,\n\t\t\t'e': 5,\n\t\t\t'c': 4,\n\t\t}));\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, []);\n\t});\n\n\ttest('merge when local and remote has moved forwareded with comment changes', async () => {\n\t\tconst baseContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst localContent = `\n{\n\t// comment b has changed in local\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst remoteContent = `\n{\n\t// comment b has changed in remote\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, localContent);\n\t\tassert.strictEqual(actual.remoteContent, remoteContent);\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, []);\n\t});\n\n\ttest('resolve when local and remote has moved forwareded with resolved conflicts', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t\t'e': 4,\n\t\t\t'f': 1,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'b': 3,\n\t\t\t'c': 3,\n\t\t\t'd': 6,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [\n\t\t\t{ key: 'd', localValue: 5, remoteValue: 6 },\n\t\t];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, [], [{ key: 'a', value: 2 }, { key: 'b', value: undefined }, { key: 'e', value: 5 }], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t\t'e': 5,\n\t\t\t'f': 1,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'c': 3,\n\t\t\t'd': 6,\n\t\t\t'e': 5,\n\t\t\t'f': 1,\n\t\t\t'a': 2,\n\t\t}));\n\t\tassert.ok(actual.hasConflicts);\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t});\n\n\ttest('ignored setting is not merged when changed in local and remote', async () => {\n\t\tconst localContent = stringify({ 'a': 1 });\n\t\tconst remoteContent = stringify({ 'a': 2 });\n\t\tconst actual = merge(localContent, remoteContent, null, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when changed in local and remote from base', async () => {\n\t\tconst baseContent = stringify({ 'a': 0 });\n\t\tconst localContent = stringify({ 'a': 1 });\n\t\tconst remoteContent = stringify({ 'a': 2 });\n\t\tconst actual = merge(localContent, remoteContent, baseContent, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when added in remote', async () => {\n\t\tconst localContent = stringify({});\n\t\tconst remoteContent = stringify({ 'a': 1 });\n\t\tconst actual = merge(localContent, remoteContent, null, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when added in remote from base', async () => {\n\t\tconst localContent = stringify({ 'b': 2 });\n\t\tconst remoteContent = stringify({ 'a': 1, 'b': 2 });\n\t\tconst actual = merge(localContent, remoteContent, localContent, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when removed in remote', async () => {\n\t\tconst localContent = stringify({ 'a': 1 });\n\t\tconst remoteContent = stringify({});\n\t\tconst actual = merge(localContent, remoteContent, null, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged when removed in remote from base', async () => {\n\t\tconst localContent = stringify({ 'a': 2 });\n\t\tconst remoteContent = stringify({});\n\t\tconst actual = merge(localContent, remoteContent, localContent, ['a'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, null);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged with other changes without conflicts', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 6,\n\t\t});\n\t\tconst actual = merge(localContent, remoteContent, baseContent, ['a', 'e'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 3,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'e': 6,\n\t\t}));\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n\n\ttest('ignored setting is not merged with other changes conflicts', async () => {\n\t\tconst baseContent = stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 5,\n\t\t});\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 4,\n\t\t\t'c': 3,\n\t\t\t'd': 5,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'e': 6,\n\t\t});\n\t\tconst expectedConflicts: IConflictSetting[] = [\n\t\t\t{ key: 'd', localValue: 5, remoteValue: undefined },\n\t\t\t{ key: 'b', localValue: 4, remoteValue: 3 },\n\t\t];\n\t\tconst actual = merge(localContent, remoteContent, baseContent, ['a', 'e'], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 4,\n\t\t\t'd': 5,\n\t\t}));\n\t\tassert.strictEqual(actual.remoteContent, stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'e': 6,\n\t\t}));\n\t\tassert.deepStrictEqual(actual.conflictsSettings, expectedConflicts);\n\t\tassert.ok(actual.hasConflicts);\n\t});\n\n\ttest('merge when remote has comments and local is empty', async () => {\n\t\tconst localContent = `\n{\n\n}`;\n\t\tconst remoteContent = stringify`\n{\n\t// this is a comment\n\t\"a\": 1,\n}`;\n\t\tconst actual = merge(localContent, remoteContent, null, [], [], formattingOptions);\n\t\tassert.strictEqual(actual.localContent, remoteContent);\n\t\tassert.strictEqual(actual.remoteContent, null);\n\t\tassert.strictEqual(actual.conflictsSettings.length, 0);\n\t\tassert.ok(!actual.hasConflicts);\n\t});\n});\n\nsuite('SettingsMerge - Compute Remote Content', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('local content is returned when there are no ignored settings', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 6,\n\t\t});\n\t\tconst actual = updateIgnoredSettings(localContent, remoteContent, [], formattingOptions);\n\t\tassert.strictEqual(actual, localContent);\n\t});\n\n\ttest('when target content is empty', async () => {\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t});\n\t\tconst actual = updateIgnoredSettings('', remoteContent, ['a'], formattingOptions);\n\t\tassert.strictEqual(actual, '');\n\t});\n\n\ttest('when source content is empty', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t});\n\t\tconst expected = stringify({\n\t\t\t'b': 3,\n\t\t});\n\t\tconst actual = updateIgnoredSettings(localContent, '', ['a'], formattingOptions);\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('ignored settings are not updated from remote content', async () => {\n\t\tconst localContent = stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst remoteContent = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 3,\n\t\t\t'd': 4,\n\t\t\t'e': 6,\n\t\t});\n\t\tconst expected = stringify({\n\t\t\t'a': 3,\n\t\t\t'b': 2,\n\t\t\t'c': 3,\n\t\t});\n\t\tconst actual = updateIgnoredSettings(localContent, remoteContent, ['a'], formattingOptions);\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n});\n\nsuite('SettingsMerge - Add Setting', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Insert after a setting without comments', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 2,\n\t\"d\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 2,\n\t\"b\": 2,\n\t\"d\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting without comments at the end', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 2\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 2,\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert between settings without comment', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert between settings and there is a comment in between in source', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting and after a comment at the end', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for b\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting ending with comma and after a comment at the end', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a comment and there are no settings', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting and between a comment and setting', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting between two comments and there is a setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting between two comments on the same line and there is a setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */ // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2, // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting between two line comments on the same line and there is a setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b // this is comment for c\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting between two comments and there is no setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n\t// this is a comment\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for b\n\t// this is a comment\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n\t// this is a comment\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting with comma and between two comments and there is no setting after', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n\t// this is a comment\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t// this is a comment\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2\n\t// this is a comment\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\ttest('Insert before a setting without comments', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 2,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting without comments at the end', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting with comment', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting and before a comment at the beginning', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3,\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting ending with comma and before a comment at the begninning', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3,\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n\t\"c\": 3,\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3,\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting and between a setting and comment', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 1,\n\t// this is comment for b\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting between two comments and there is a setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 1,\n\t// this is comment for b\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 1,\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting between two comments on the same line and there is a setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 1,\n\t/* this is comment for b */ // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting between two line comments on the same line and there is a setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1,\n\t/* this is comment for b */\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"d\": 1,\n\t// this is comment for b // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"d\": 1,\n\t\"b\": 2,\n\t// this is comment for b // this is comment for c\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting between two comments and there is no setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert before a setting with comma and between two comments and there is no setting before', () => {\n\n\t\tconst sourceContent = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1\n}`;\n\t\tconst targetContent = `\n{\n\t// this is comment for b\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\n\t\tconst expected = `\n{\n\t// this is comment for b\n\t\"b\": 2,\n\t// this is comment for c\n\t\"c\": 1,\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a setting that is of object type', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"b\": {\n\t\t\"d\": 1\n\t},\n\t\"a\": 2,\n\t\"c\": 1\n}`;\n\t\tconst targetContent = `\n{\n\t\"b\": {\n\t\t\"d\": 1\n\t},\n\t\"c\": 1\n}`;\n\n\t\tconst actual = addSetting('a', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, sourceContent);\n\t});\n\n\ttest('Insert after a setting that is of array type', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"b\": [\n\t\t1\n\t],\n\t\"a\": 2,\n\t\"c\": 1\n}`;\n\t\tconst targetContent = `\n{\n\t\"b\": [\n\t\t1\n\t],\n\t\"c\": 1\n}`;\n\n\t\tconst actual = addSetting('a', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, sourceContent);\n\t});\n\n\ttest('Insert after a comment with comma separator of previous setting and no next nodes ', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a comment with comma separator of previous setting and there is a setting after ', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"c\": 3\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2,\n\t\"c\": 3\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('Insert after a comment with comma separator of previous setting and there is a comment after ', () => {\n\n\t\tconst sourceContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2\n\t// this is a comment\n}`;\n\t\tconst targetContent = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t// this is a comment\n}`;\n\n\t\tconst expected = `\n{\n\t\"a\": 1\n\t// this is comment for a\n\t,\n\t\"b\": 2\n\t// this is a comment\n}`;\n\n\t\tconst actual = addSetting('b', sourceContent, targetContent, formattingOptions);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n});\n\n\nfunction stringify(value: any): string {\n\treturn JSON.stringify(value, null, '\\t');\n}\n"],
  "mappings": "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",
  "names": []
}
