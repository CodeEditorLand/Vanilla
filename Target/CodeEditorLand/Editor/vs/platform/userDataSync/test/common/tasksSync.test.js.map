{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/tasksSync.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { ILogService } from '../../../log/common/log.js';\nimport { IUserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { getTasksContentFromSyncContent, TasksSynchroniser } from '../../common/tasksSync.js';\nimport { Change, IUserDataSyncStoreService, MergeState, SyncResource, SyncStatus } from '../../common/userDataSync.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\n\nsuite('TasksSync', () => {\n\n\tconst server = new UserDataSyncTestServer();\n\tlet client: UserDataSyncClient;\n\n\tlet testObject: TasksSynchroniser;\n\n\tteardown(async () => {\n\t\tawait client.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tclient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client.setUp(true);\n\t\ttestObject = client.getSynchronizer(SyncResource.Tasks) as TasksSynchroniser;\n\t});\n\n\ttest('when tasks file does not exist', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\n\t\t\tassert.deepStrictEqual(await testObject.getLastSyncUserData(), null);\n\t\t\tlet manifest = await client.getResourceManifest();\n\t\t\tserver.reset();\n\t\t\tawait testObject.sync(manifest);\n\n\t\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t\t{ type: 'GET', url: `${server.url}/v1/resource/${testObject.resource}/latest`, headers: {} },\n\t\t\t]);\n\t\t\tassert.ok(!await fileService.exists(tasksResource));\n\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\t\tassert.strictEqual(lastSyncUserData!.syncData, null);\n\n\t\t\tmanifest = await client.getResourceManifest();\n\t\t\tserver.reset();\n\t\t\tawait testObject.sync(manifest);\n\t\t\tassert.deepStrictEqual(server.requests, []);\n\n\t\t\tmanifest = await client.getResourceManifest();\n\t\t\tserver.reset();\n\t\t\tawait testObject.sync(manifest);\n\t\t\tassert.deepStrictEqual(server.requests, []);\n\t\t});\n\t});\n\n\ttest('when tasks file does not exist and remote has changes', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tawait client2.instantiationService.get(IFileService).writeFile(tasksResource2, VSBuffer.fromString(content));\n\t\t\tawait client2.sync();\n\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual((await fileService.readFile(tasksResource)).value.toString(), content);\n\t\t});\n\t});\n\n\ttest('when tasks file exists locally and remote has no tasks', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tfileService.writeFile(tasksResource, VSBuffer.fromString(content));\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t});\n\t});\n\n\ttest('first time sync: when tasks file exists locally with same content as remote', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tawait client2.instantiationService.get(IFileService).writeFile(tasksResource2, VSBuffer.fromString(content));\n\t\t\tawait client2.sync();\n\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tawait fileService.writeFile(tasksResource, VSBuffer.fromString(content));\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual((await fileService.readFile(tasksResource)).value.toString(), content);\n\t\t});\n\t});\n\n\ttest('when tasks file locally has moved forward', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tfileService.writeFile(tasksResource, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': []\n\t\t\t})));\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tfileService.writeFile(tasksResource, VSBuffer.fromString(content));\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t});\n\t});\n\n\ttest('when tasks file remotely has moved forward', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tconst fileService2 = client2.instantiationService.get(IFileService);\n\t\t\tawait fileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': []\n\t\t\t})));\n\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\n\t\t\tawait client2.sync();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tfileService2.writeFile(tasksResource2, VSBuffer.fromString(content));\n\n\t\t\tawait client2.sync();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual((await fileService.readFile(tasksResource)).value.toString(), content);\n\t\t});\n\t});\n\n\ttest('when tasks file has moved forward locally and remotely with same changes', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tconst fileService2 = client2.instantiationService.get(IFileService);\n\t\t\tawait fileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': []\n\t\t\t})));\n\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\n\t\t\tawait client2.sync();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tfileService2.writeFile(tasksResource2, VSBuffer.fromString(content));\n\t\t\tawait client2.sync();\n\n\t\t\tfileService.writeFile(tasksResource, VSBuffer.fromString(content));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual((await fileService.readFile(tasksResource)).value.toString(), content);\n\t\t});\n\t});\n\n\ttest('when tasks file has moved forward locally and remotely - accept preview', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tconst fileService2 = client2.instantiationService.get(IFileService);\n\t\t\tawait fileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': []\n\t\t\t})));\n\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\n\t\t\tawait client2.sync();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tfileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t}]\n\t\t\t})));\n\t\t\tawait client2.sync();\n\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tfileService.writeFile(tasksResource, VSBuffer.fromString(content));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst previewContent = (await fileService.readFile(testObject.conflicts.conflicts[0].previewResource)).value.toString();\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\t\tassert.deepStrictEqual(testObject.conflicts.conflicts.length, 1);\n\t\t\tassert.deepStrictEqual(testObject.conflicts.conflicts[0].mergeState, MergeState.Conflict);\n\t\t\tassert.deepStrictEqual(testObject.conflicts.conflicts[0].localChange, Change.Modified);\n\t\t\tassert.deepStrictEqual(testObject.conflicts.conflicts[0].remoteChange, Change.Modified);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].previewResource);\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), previewContent);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), previewContent);\n\t\t\tassert.strictEqual((await fileService.readFile(tasksResource)).value.toString(), previewContent);\n\t\t});\n\t});\n\n\ttest('when tasks file has moved forward locally and remotely - accept modified preview', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tconst fileService2 = client2.instantiationService.get(IFileService);\n\t\t\tawait fileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': []\n\t\t\t})));\n\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\n\t\t\tawait client2.sync();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tfileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t}]\n\t\t\t})));\n\t\t\tawait client2.sync();\n\n\t\t\tfileService.writeFile(tasksResource, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t})));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch 2'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].previewResource, content);\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual((await fileService.readFile(tasksResource)).value.toString(), content);\n\t\t});\n\t});\n\n\ttest('when tasks file has moved forward locally and remotely - accept remote', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tconst fileService2 = client2.instantiationService.get(IFileService);\n\t\t\tawait fileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': []\n\t\t\t})));\n\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\n\t\t\tawait client2.sync();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t}]\n\t\t\t});\n\t\t\tfileService2.writeFile(tasksResource2, VSBuffer.fromString(content));\n\t\t\tawait client2.sync();\n\n\t\t\tfileService.writeFile(tasksResource, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t})));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].remoteResource);\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual((await fileService.readFile(tasksResource)).value.toString(), content);\n\t\t});\n\t});\n\n\ttest('when tasks file has moved forward locally and remotely - accept local', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tconst fileService2 = client2.instantiationService.get(IFileService);\n\t\t\tawait fileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': []\n\t\t\t})));\n\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\n\t\t\tawait client2.sync();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tfileService2.writeFile(tasksResource2, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t}]\n\t\t\t})));\n\t\t\tawait client2.sync();\n\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tfileService.writeFile(tasksResource, VSBuffer.fromString(content));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].localResource);\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t\tassert.strictEqual((await fileService.readFile(tasksResource)).value.toString(), content);\n\t\t});\n\t});\n\n\ttest('when tasks file was removed in one client', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tawait fileService.writeFile(tasksResource, VSBuffer.fromString(JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': []\n\t\t\t})));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tawait client2.sync();\n\n\t\t\tconst tasksResource2 = client2.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tconst fileService2 = client2.instantiationService.get(IFileService);\n\t\t\tfileService2.del(tasksResource2);\n\t\t\tawait client2.sync();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), null);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(remoteUserData.syncData!.content, client.instantiationService.get(ILogService)), null);\n\t\t\tassert.strictEqual(await fileService.exists(tasksResource), false);\n\t\t});\n\t});\n\n\ttest('when tasks file is created after first sync', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst content = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tawait fileService.createFile(tasksResource, VSBuffer.fromString(content));\n\n\t\t\tlet lastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst manifest = await client.getResourceManifest();\n\t\t\tserver.reset();\n\t\t\tawait testObject.sync(manifest);\n\n\t\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t\t{ type: 'POST', url: `${server.url}/v1/resource/${testObject.resource}`, headers: { 'If-Match': lastSyncUserData?.ref } },\n\t\t\t]);\n\n\t\t\tlastSyncUserData = await testObject.getLastSyncUserData();\n\t\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\t\tassert.strictEqual(getTasksContentFromSyncContent(lastSyncUserData!.syncData!.content, client.instantiationService.get(ILogService)), content);\n\t\t});\n\t});\n\n\ttest('apply remote when tasks file does not exist', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst tasksResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.tasksResource;\n\t\t\tif (await fileService.exists(tasksResource)) {\n\t\t\t\tawait fileService.del(tasksResource);\n\t\t\t}\n\n\t\t\tconst preview = (await testObject.preview(await client.getResourceManifest(), {}))!;\n\n\t\t\tserver.reset();\n\t\t\tconst content = await testObject.resolveContent(preview.resourcePreviews[0].remoteResource);\n\t\t\tawait testObject.accept(preview.resourcePreviews[0].remoteResource, content);\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(server.requests, []);\n\t\t});\n\t});\n\n\ttest('sync profile tasks', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp(true);\n\t\t\tconst profile = await client2.instantiationService.get(IUserDataProfilesService).createNamedProfile('profile1');\n\t\t\tconst expected = JSON.stringify({\n\t\t\t\t'version': '2.0.0',\n\t\t\t\t'tasks': [{\n\t\t\t\t\t'type': 'npm',\n\t\t\t\t\t'script': 'watch',\n\t\t\t\t\t'label': 'Watch'\n\t\t\t\t}]\n\t\t\t});\n\t\t\tawait client2.instantiationService.get(IFileService).createFile(profile.tasksResource, VSBuffer.fromString(expected));\n\t\t\tawait client2.sync();\n\n\t\t\tawait client.sync();\n\n\t\t\tconst syncedProfile = client.instantiationService.get(IUserDataProfilesService).profiles.find(p => p.id === profile.id)!;\n\t\t\tconst actual = (await client.instantiationService.get(IFileService).readFile(syncedProfile.tasksResource)).value.toString();\n\t\t\tassert.strictEqual(actual, expected);\n\t\t});\n\t});\n\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AACnC,SAAS,+CAA+C;AACxD,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,gCAAgC;AACzC,SAAS,gCAAgC,yBAAyB;AAClE,SAAS,QAAQ,2BAA2B,YAAY,cAAc,kBAAkB;AACxF,SAAS,oBAAoB,8BAA8B;AAE3D,MAAM,aAAa,MAAM;AAExB,QAAM,SAAS,IAAI,uBAAuB;AAC1C,MAAI;AAEJ,MAAI;AAEJ,WAAS,YAAY;AACpB,UAAM,OAAO,qBAAqB,IAAI,yBAAyB,EAAE,MAAM;AAAA,EACxE,CAAC;AAED,QAAM,kBAAkB,wCAAwC;AAEhE,QAAM,YAAY;AACjB,aAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAC3D,UAAM,OAAO,MAAM,IAAI;AACvB,iBAAa,OAAO,gBAAgB,aAAa,KAAK;AAAA,EACvD,CAAC;AAED,OAAK,kCAAkC,YAAY;AAClD,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAE/F,aAAO,gBAAgB,MAAM,WAAW,oBAAoB,GAAG,IAAI;AACnE,UAAI,WAAW,MAAM,OAAO,oBAAoB;AAChD,aAAO,MAAM;AACb,YAAM,WAAW,KAAK,QAAQ;AAE9B,aAAO,gBAAgB,OAAO,UAAU;AAAA,QACvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,WAAW,QAAQ,WAAW,SAAS,CAAC,EAAE;AAAA,MAC5F,CAAC;AACD,aAAO,GAAG,CAAC,MAAM,YAAY,OAAO,aAAa,CAAC;AAElD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,gBAAgB,iBAAkB,KAAK,eAAe,GAAG;AAChE,aAAO,gBAAgB,iBAAkB,UAAU,eAAe,QAAQ;AAC1E,aAAO,YAAY,iBAAkB,UAAU,IAAI;AAEnD,iBAAW,MAAM,OAAO,oBAAoB;AAC5C,aAAO,MAAM;AACb,YAAM,WAAW,KAAK,QAAQ;AAC9B,aAAO,gBAAgB,OAAO,UAAU,CAAC,CAAC;AAE1C,iBAAW,MAAM,OAAO,oBAAoB;AAC5C,aAAO,MAAM;AACb,YAAM,WAAW,KAAK,QAAQ;AAC9B,aAAO,gBAAgB,OAAO,UAAU,CAAC,CAAC;AAAA,IAC3C,CAAC;AAAA,EACF,CAAC;AAED,OAAK,yDAAyD,YAAY;AACzE,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,QAAQ,qBAAqB,IAAI,YAAY,EAAE,UAAU,gBAAgB,SAAS,WAAW,OAAO,CAAC;AAC3G,YAAM,QAAQ,KAAK;AAEnB,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAE/F,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC1I,aAAO,aAAa,MAAM,YAAY,SAAS,aAAa,GAAG,MAAM,SAAS,GAAG,OAAO;AAAA,IACzF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,0DAA0D,YAAY;AAC1E,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAC/F,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,kBAAY,UAAU,eAAe,SAAS,WAAW,OAAO,CAAC;AAEjE,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAAA,IAC3I,CAAC;AAAA,EACF,CAAC;AAED,OAAK,+EAA+E,YAAY;AAC/F,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,QAAQ,qBAAqB,IAAI,YAAY,EAAE,UAAU,gBAAgB,SAAS,WAAW,OAAO,CAAC;AAC3G,YAAM,QAAQ,KAAK;AAEnB,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAC/F,YAAM,YAAY,UAAU,eAAe,SAAS,WAAW,OAAO,CAAC;AAEvE,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC1I,aAAO,aAAa,MAAM,YAAY,SAAS,aAAa,GAAG,MAAM,SAAS,GAAG,OAAO;AAAA,IACzF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,6CAA6C,YAAY;AAC7D,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAC/F,kBAAY,UAAU,eAAe,SAAS,WAAW,KAAK,UAAU;AAAA,QACvE,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,MACX,CAAC,CAAC,CAAC;AAEH,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,kBAAY,UAAU,eAAe,SAAS,WAAW,OAAO,CAAC;AAEjE,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAAA,IAC3I,CAAC;AAAA,EACF,CAAC;AAED,OAAK,8CAA8C,YAAY;AAC9D,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,eAAe,QAAQ,qBAAqB,IAAI,YAAY;AAClE,YAAM,aAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QAC/E,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,MACX,CAAC,CAAC,CAAC;AAEH,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAE/F,YAAM,QAAQ,KAAK;AACnB,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,mBAAa,UAAU,gBAAgB,SAAS,WAAW,OAAO,CAAC;AAEnE,YAAM,QAAQ,KAAK;AACnB,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC1I,aAAO,aAAa,MAAM,YAAY,SAAS,aAAa,GAAG,MAAM,SAAS,GAAG,OAAO;AAAA,IACzF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,4EAA4E,YAAY;AAC5F,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,eAAe,QAAQ,qBAAqB,IAAI,YAAY;AAClE,YAAM,aAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QAC/E,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,MACX,CAAC,CAAC,CAAC;AAEH,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAE/F,YAAM,QAAQ,KAAK;AACnB,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,mBAAa,UAAU,gBAAgB,SAAS,WAAW,OAAO,CAAC;AACnE,YAAM,QAAQ,KAAK;AAEnB,kBAAY,UAAU,eAAe,SAAS,WAAW,OAAO,CAAC;AACjE,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC1I,aAAO,aAAa,MAAM,YAAY,SAAS,aAAa,GAAG,MAAM,SAAS,GAAG,OAAO;AAAA,IACzF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,2EAA2E,YAAY;AAC3F,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,eAAe,QAAQ,qBAAqB,IAAI,YAAY;AAClE,YAAM,aAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QAC/E,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,MACX,CAAC,CAAC,CAAC;AAEH,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAE/F,YAAM,QAAQ,KAAK;AACnB,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,mBAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QACzE,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,QACX,CAAC;AAAA,MACF,CAAC,CAAC,CAAC;AACH,YAAM,QAAQ,KAAK;AAEnB,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,kBAAY,UAAU,eAAe,SAAS,WAAW,OAAO,CAAC;AACjE,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,YAAM,kBAAkB,MAAM,YAAY,SAAS,WAAW,UAAU,UAAU,CAAC,EAAE,eAAe,GAAG,MAAM,SAAS;AACtH,aAAO,gBAAgB,WAAW,QAAQ,WAAW,YAAY;AACjE,aAAO,gBAAgB,WAAW,UAAU,UAAU,QAAQ,CAAC;AAC/D,aAAO,gBAAgB,WAAW,UAAU,UAAU,CAAC,EAAE,YAAY,WAAW,QAAQ;AACxF,aAAO,gBAAgB,WAAW,UAAU,UAAU,CAAC,EAAE,aAAa,OAAO,QAAQ;AACrF,aAAO,gBAAgB,WAAW,UAAU,UAAU,CAAC,EAAE,cAAc,OAAO,QAAQ;AAEtF,YAAM,WAAW,OAAO,WAAW,UAAU,UAAU,CAAC,EAAE,eAAe;AACzE,YAAM,WAAW,MAAM,KAAK;AAC5B,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,cAAc;AACpJ,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,cAAc;AACjJ,aAAO,aAAa,MAAM,YAAY,SAAS,aAAa,GAAG,MAAM,SAAS,GAAG,cAAc;AAAA,IAChG,CAAC;AAAA,EACF,CAAC;AAED,OAAK,oFAAoF,YAAY;AACpG,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,eAAe,QAAQ,qBAAqB,IAAI,YAAY;AAClE,YAAM,aAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QAC/E,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,MACX,CAAC,CAAC,CAAC;AAEH,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAE/F,YAAM,QAAQ,KAAK;AACnB,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,mBAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QACzE,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,QACX,CAAC;AAAA,MACF,CAAC,CAAC,CAAC;AACH,YAAM,QAAQ,KAAK;AAEnB,kBAAY,UAAU,eAAe,SAAS,WAAW,KAAK,UAAU;AAAA,QACvE,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC,CAAC,CAAC;AACH,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,YAAM,WAAW,OAAO,WAAW,UAAU,UAAU,CAAC,EAAE,iBAAiB,OAAO;AAClF,YAAM,WAAW,MAAM,KAAK;AAC5B,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC1I,aAAO,aAAa,MAAM,YAAY,SAAS,aAAa,GAAG,MAAM,SAAS,GAAG,OAAO;AAAA,IACzF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,0EAA0E,YAAY;AAC1F,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,eAAe,QAAQ,qBAAqB,IAAI,YAAY;AAClE,YAAM,aAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QAC/E,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,MACX,CAAC,CAAC,CAAC;AAEH,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAE/F,YAAM,QAAQ,KAAK;AACnB,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,QACX,CAAC;AAAA,MACF,CAAC;AACD,mBAAa,UAAU,gBAAgB,SAAS,WAAW,OAAO,CAAC;AACnE,YAAM,QAAQ,KAAK;AAEnB,kBAAY,UAAU,eAAe,SAAS,WAAW,KAAK,UAAU;AAAA,QACvE,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC,CAAC,CAAC;AACH,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AACxD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,YAAY;AAEjE,YAAM,WAAW,OAAO,WAAW,UAAU,UAAU,CAAC,EAAE,cAAc;AACxE,YAAM,WAAW,MAAM,KAAK;AAC5B,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC1I,aAAO,aAAa,MAAM,YAAY,SAAS,aAAa,GAAG,MAAM,SAAS,GAAG,OAAO;AAAA,IACzF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,yEAAyE,YAAY;AACzF,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,eAAe,QAAQ,qBAAqB,IAAI,YAAY;AAClE,YAAM,aAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QAC/E,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,MACX,CAAC,CAAC,CAAC;AAEH,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAE/F,YAAM,QAAQ,KAAK;AACnB,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,mBAAa,UAAU,gBAAgB,SAAS,WAAW,KAAK,UAAU;AAAA,QACzE,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,QACX,CAAC;AAAA,MACF,CAAC,CAAC,CAAC;AACH,YAAM,QAAQ,KAAK;AAEnB,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,kBAAY,UAAU,eAAe,SAAS,WAAW,OAAO,CAAC;AACjE,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AACxD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,YAAY;AAEjE,YAAM,WAAW,OAAO,WAAW,UAAU,UAAU,CAAC,EAAE,aAAa;AACvE,YAAM,WAAW,MAAM,KAAK;AAC5B,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC7I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAC1I,aAAO,aAAa,MAAM,YAAY,SAAS,aAAa,GAAG,MAAM,SAAS,GAAG,OAAO;AAAA,IACzF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,6CAA6C,YAAY;AAC7D,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAC/F,YAAM,YAAY,UAAU,eAAe,SAAS,WAAW,KAAK,UAAU;AAAA,QAC7E,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,MACX,CAAC,CAAC,CAAC;AACH,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,QAAQ,KAAK;AAEnB,YAAM,iBAAiB,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AACjG,YAAM,eAAe,QAAQ,qBAAqB,IAAI,YAAY;AAClE,mBAAa,IAAI,cAAc;AAC/B,YAAM,QAAQ,KAAK;AAEnB,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,aAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,YAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,IAAI;AAC1I,aAAO,YAAY,+BAA+B,eAAe,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,IAAI;AACvI,aAAO,YAAY,MAAM,YAAY,OAAO,aAAa,GAAG,KAAK;AAAA,IAClE,CAAC;AAAA,EACF,CAAC;AAED,OAAK,+CAA+C,YAAY;AAC/D,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAC/F,YAAM,WAAW,KAAK,MAAM,OAAO,oBAAoB,CAAC;AAExD,YAAM,UAAU,KAAK,UAAU;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,YAAM,YAAY,WAAW,eAAe,SAAS,WAAW,OAAO,CAAC;AAExE,UAAI,mBAAmB,MAAM,WAAW,oBAAoB;AAC5D,YAAM,WAAW,MAAM,OAAO,oBAAoB;AAClD,aAAO,MAAM;AACb,YAAM,WAAW,KAAK,QAAQ;AAE9B,aAAO,gBAAgB,OAAO,UAAU;AAAA,QACvC,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,gBAAgB,WAAW,QAAQ,IAAI,SAAS,EAAE,YAAY,kBAAkB,IAAI,EAAE;AAAA,MACzH,CAAC;AAED,yBAAmB,MAAM,WAAW,oBAAoB;AACxD,YAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,aAAO,gBAAgB,iBAAkB,KAAK,eAAe,GAAG;AAChE,aAAO,gBAAgB,iBAAkB,UAAU,eAAe,QAAQ;AAC1E,aAAO,YAAY,+BAA+B,iBAAkB,SAAU,SAAS,OAAO,qBAAqB,IAAI,WAAW,CAAC,GAAG,OAAO;AAAA,IAC9I,CAAC;AAAA,EACF,CAAC;AAED,OAAK,+CAA+C,YAAY;AAC/D,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,eAAe;AAC/F,UAAI,MAAM,YAAY,OAAO,aAAa,GAAG;AAC5C,cAAM,YAAY,IAAI,aAAa;AAAA,MACpC;AAEA,YAAM,UAAW,MAAM,WAAW,QAAQ,MAAM,OAAO,oBAAoB,GAAG,CAAC,CAAC;AAEhF,aAAO,MAAM;AACb,YAAM,UAAU,MAAM,WAAW,eAAe,QAAQ,iBAAiB,CAAC,EAAE,cAAc;AAC1F,YAAM,WAAW,OAAO,QAAQ,iBAAiB,CAAC,EAAE,gBAAgB,OAAO;AAC3E,YAAM,WAAW,MAAM,KAAK;AAC5B,aAAO,gBAAgB,OAAO,UAAU,CAAC,CAAC;AAAA,IAC3C,CAAC;AAAA,EACF,CAAC;AAED,OAAK,sBAAsB,YAAY;AACtC,UAAM,mBAAyB,CAAC,GAAG,YAAY;AAC9C,YAAM,UAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,YAAM,QAAQ,MAAM,IAAI;AACxB,YAAM,UAAU,MAAM,QAAQ,qBAAqB,IAAI,wBAAwB,EAAE,mBAAmB,UAAU;AAC9G,YAAM,WAAW,KAAK,UAAU;AAAA,QAC/B,WAAW;AAAA,QACX,SAAS,CAAC;AAAA,UACT,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACV,CAAC;AAAA,MACF,CAAC;AACD,YAAM,QAAQ,qBAAqB,IAAI,YAAY,EAAE,WAAW,QAAQ,eAAe,SAAS,WAAW,QAAQ,CAAC;AACpH,YAAM,QAAQ,KAAK;AAEnB,YAAM,OAAO,KAAK;AAElB,YAAM,gBAAgB,OAAO,qBAAqB,IAAI,wBAAwB,EAAE,SAAS,KAAK,OAAK,EAAE,OAAO,QAAQ,EAAE;AACtH,YAAM,UAAU,MAAM,OAAO,qBAAqB,IAAI,YAAY,EAAE,SAAS,cAAc,aAAa,GAAG,MAAM,SAAS;AAC1H,aAAO,YAAY,QAAQ,QAAQ;AAAA,IACpC,CAAC;AAAA,EACF,CAAC;AAEF,CAAC;",
  "names": []
}
