{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/synchronizer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Barrier } from '../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { isEqual, joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { IStorageService, StorageScope } from '../../../storage/common/storage.js';\nimport { IUserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { AbstractSynchroniser, IAcceptResult, IMergeResult, IResourcePreview } from '../../common/abstractSynchronizer.js';\nimport { Change, IRemoteUserData, IResourcePreview as IBaseResourcePreview, IUserDataResourceManifest, IUserDataSyncConfiguration, IUserDataSyncStoreService, MergeState, SyncResource, SyncStatus, USER_DATA_SYNC_SCHEME } from '../../common/userDataSync.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\n\ninterface ITestResourcePreview extends IResourcePreview {\n\tref: string;\n}\n\nclass TestSynchroniser extends AbstractSynchroniser {\n\n\tsyncBarrier: Barrier = new Barrier();\n\tsyncResult: { hasConflicts: boolean; hasError: boolean } = { hasConflicts: false, hasError: false };\n\tonDoSyncCall: Emitter<void> = this._register(new Emitter<void>());\n\tfailWhenGettingLatestRemoteUserData: boolean = false;\n\n\tprotected readonly version: number = 1;\n\n\tprivate cancelled: boolean = false;\n\treadonly localResource = joinPath(this.environmentService.userRoamingDataHome, 'testResource.json');\n\n\tgetMachineId(): Promise<string> { return this.currentMachineIdPromise; }\n\tgetLastSyncResource(): URI { return this.lastSyncResource; }\n\n\tprotected override getLatestRemoteUserData(manifest: IUserDataResourceManifest | null, lastSyncUserData: IRemoteUserData | null): Promise<IRemoteUserData> {\n\t\tif (this.failWhenGettingLatestRemoteUserData) {\n\t\t\tthrow new Error();\n\t\t}\n\t\treturn super.getLatestRemoteUserData(manifest, lastSyncUserData);\n\t}\n\n\tprotected override async doSync(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, apply: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration): Promise<SyncStatus> {\n\t\tthis.cancelled = false;\n\t\tthis.onDoSyncCall.fire();\n\t\tawait this.syncBarrier.wait();\n\n\t\tif (this.cancelled) {\n\t\t\treturn SyncStatus.Idle;\n\t\t}\n\n\t\treturn super.doSync(remoteUserData, lastSyncUserData, apply, userDataSyncConfiguration);\n\t}\n\n\tprotected override async generateSyncPreview(remoteUserData: IRemoteUserData): Promise<ITestResourcePreview[]> {\n\t\tif (this.syncResult.hasError) {\n\t\t\tthrow new Error('failed');\n\t\t}\n\n\t\tlet fileContent = null;\n\t\ttry {\n\t\t\tfileContent = await this.fileService.readFile(this.localResource);\n\t\t} catch (error) { }\n\n\t\treturn [{\n\t\t\tbaseResource: this.localResource.with(({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' })),\n\t\t\tbaseContent: null,\n\t\t\tlocalResource: this.localResource,\n\t\t\tlocalContent: fileContent ? fileContent.value.toString() : null,\n\t\t\tremoteResource: this.localResource.with(({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' })),\n\t\t\tremoteContent: remoteUserData.syncData ? remoteUserData.syncData.content : null,\n\t\t\tpreviewResource: this.localResource.with(({ scheme: USER_DATA_SYNC_SCHEME, authority: 'preview' })),\n\t\t\tref: remoteUserData.ref,\n\t\t\tlocalChange: Change.Modified,\n\t\t\tremoteChange: Change.Modified,\n\t\t\tacceptedResource: this.localResource.with(({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' })),\n\t\t}];\n\t}\n\n\tprotected async hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean> {\n\t\treturn true;\n\t}\n\n\tprotected async getMergeResult(resourcePreview: ITestResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\treturn {\n\t\t\tcontent: resourcePreview.ref,\n\t\t\tlocalChange: Change.Modified,\n\t\t\tremoteChange: Change.Modified,\n\t\t\thasConflicts: this.syncResult.hasConflicts,\n\t\t};\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: ITestResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IAcceptResult> {\n\n\t\tif (isEqual(resource, resourcePreview.localResource)) {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.localContent,\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: resourcePreview.localContent === null ? Change.Deleted : Change.Modified,\n\t\t\t};\n\t\t}\n\n\t\tif (isEqual(resource, resourcePreview.remoteResource)) {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocalChange: resourcePreview.remoteContent === null ? Change.Deleted : Change.Modified,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\n\t\tif (isEqual(resource, resourcePreview.previewResource)) {\n\t\t\tif (content === undefined) {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: resourcePreview.ref,\n\t\t\t\t\tlocalChange: Change.Modified,\n\t\t\t\t\tremoteChange: Change.Modified,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tcontent,\n\t\t\t\t\tlocalChange: content === null ? resourcePreview.localContent !== null ? Change.Deleted : Change.None : Change.Modified,\n\t\t\t\t\tremoteChange: content === null ? resourcePreview.remoteContent !== null ? Change.Deleted : Change.None : Change.Modified,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [IResourcePreview, IAcceptResult][], force: boolean): Promise<void> {\n\t\tif (resourcePreviews[0][1].localChange === Change.Deleted) {\n\t\t\tawait this.fileService.del(this.localResource);\n\t\t}\n\n\t\tif (resourcePreviews[0][1].localChange === Change.Added || resourcePreviews[0][1].localChange === Change.Modified) {\n\t\t\tawait this.fileService.writeFile(this.localResource, VSBuffer.fromString(resourcePreviews[0][1].content!));\n\t\t}\n\n\t\tif (resourcePreviews[0][1].remoteChange === Change.Deleted) {\n\t\t\tawait this.applyRef(null, remoteUserData.ref);\n\t\t}\n\n\t\tif (resourcePreviews[0][1].remoteChange === Change.Added || resourcePreviews[0][1].remoteChange === Change.Modified) {\n\t\t\tawait this.applyRef(resourcePreviews[0][1].content, remoteUserData.ref);\n\t\t}\n\t}\n\n\tasync applyRef(content: string | null, ref: string): Promise<void> {\n\t\tconst remoteUserData = await this.updateRemoteUserData(content === null ? '' : content, ref);\n\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t}\n\n\toverride async stop(): Promise<void> {\n\t\tthis.cancelled = true;\n\t\tthis.syncBarrier.open();\n\t\tsuper.stop();\n\t}\n\n\ttestTriggerLocalChange(): void {\n\t\tthis.triggerLocalChange();\n\t}\n\n\tonDidTriggerLocalChangeCall: Emitter<void> = this._register(new Emitter<void>());\n\tprotected override async doTriggerLocalChange(): Promise<void> {\n\t\tawait super.doTriggerLocalChange();\n\t\tthis.onDidTriggerLocalChangeCall.fire();\n\t}\n\n\thasLocalData(): Promise<boolean> { throw new Error('not implemented'); }\n\tasync resolveContent(uri: URI): Promise<string | null> { return null; }\n}\n\nsuite('TestSynchronizer - Auto Sync', () => {\n\n\tconst server = new UserDataSyncTestServer();\n\tlet client: UserDataSyncClient;\n\n\tteardown(async () => {\n\t\tawait client.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tclient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client.setUp();\n\t});\n\n\ttest('status is syncing', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\n\t\t\tconst actual: SyncStatus[] = [];\n\t\t\tdisposableStore.add(testObject.onDidChangeStatus(status => actual.push(status)));\n\n\t\t\tconst promise = Event.toPromise(testObject.onDoSyncCall.event);\n\n\t\t\ttestObject.sync(await client.getResourceManifest());\n\t\t\tawait promise;\n\n\t\t\tassert.deepStrictEqual(actual, [SyncStatus.Syncing]);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\n\t\t\ttestObject.stop();\n\t\t});\n\t});\n\n\ttest('status is set correctly when sync is finished', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tconst actual: SyncStatus[] = [];\n\t\t\tdisposableStore.add(testObject.onDidChangeStatus(status => actual.push(status)));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(actual, [SyncStatus.Syncing, SyncStatus.Idle]);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t});\n\t});\n\n\ttest('status is set correctly when sync has errors', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasError: true, hasConflicts: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tconst actual: SyncStatus[] = [];\n\t\t\tdisposableStore.add(testObject.onDidChangeStatus(status => actual.push(status)));\n\n\t\t\ttry {\n\t\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\t\tassert.fail('Should fail');\n\t\t\t} catch (e) {\n\t\t\t\tassert.deepStrictEqual(actual, [SyncStatus.Syncing, SyncStatus.Idle]);\n\t\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('status is set to hasConflicts when asked to sync if there are conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, [testObject.localResource]);\n\t\t});\n\t});\n\n\ttest('sync should not run if syncing already', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\tconst promise = Event.toPromise(testObject.onDoSyncCall.event);\n\n\t\t\ttestObject.sync(await client.getResourceManifest());\n\t\t\tawait promise;\n\n\t\t\tconst actual: SyncStatus[] = [];\n\t\t\tdisposableStore.add(testObject.onDidChangeStatus(status => actual.push(status)));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(actual, []);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\n\t\t\tawait testObject.stop();\n\t\t});\n\t});\n\n\ttest('sync should not run if there are conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst actual: SyncStatus[] = [];\n\t\t\tdisposableStore.add(testObject.onDidChangeStatus(status => actual.push(status)));\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(actual, []);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\t});\n\t});\n\n\ttest('accept preview during conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].previewResource);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, (await fileService.readFile(testObject.localResource)).value.toString());\n\t\t});\n\t});\n\n\ttest('accept remote during conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst currentRemoteContent = (await testObject.getRemoteUserData(null)).syncData?.content;\n\t\t\tconst newLocalContent = 'conflict';\n\t\t\tawait fileService.writeFile(testObject.localResource, VSBuffer.fromString(newLocalContent));\n\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].remoteResource);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, currentRemoteContent);\n\t\t\tassert.strictEqual((await fileService.readFile(testObject.localResource)).value.toString(), currentRemoteContent);\n\t\t});\n\t});\n\n\ttest('accept local during conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst newLocalContent = 'conflict';\n\t\t\tawait fileService.writeFile(testObject.localResource, VSBuffer.fromString(newLocalContent));\n\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].localResource);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, newLocalContent);\n\t\t\tassert.strictEqual((await fileService.readFile(testObject.localResource)).value.toString(), newLocalContent);\n\t\t});\n\t});\n\n\ttest('accept new content during conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst newLocalContent = 'conflict';\n\t\t\tawait fileService.writeFile(testObject.localResource, VSBuffer.fromString(newLocalContent));\n\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tconst mergeContent = 'newContent';\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].previewResource, mergeContent);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, mergeContent);\n\t\t\tassert.strictEqual((await fileService.readFile(testObject.localResource)).value.toString(), mergeContent);\n\t\t});\n\t});\n\n\ttest('accept delete during conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst newLocalContent = 'conflict';\n\t\t\tawait fileService.writeFile(testObject.localResource, VSBuffer.fromString(newLocalContent));\n\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].previewResource, null);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, '');\n\t\t\tassert.ok(!(await fileService.exists(testObject.localResource)));\n\t\t});\n\t});\n\n\ttest('accept deleted local during conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tawait fileService.del(testObject.localResource);\n\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].localResource);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, '');\n\t\t\tassert.ok(!(await fileService.exists(testObject.localResource)));\n\t\t});\n\t});\n\n\ttest('accept deleted remote during conflicts', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tawait fileService.writeFile(testObject.localResource, VSBuffer.fromString('some content'));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\t\tawait testObject.accept(testObject.conflicts.conflicts[0].remoteResource);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tawait testObject.apply(false);\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData, null);\n\t\t\tassert.ok(!(await fileService.exists(testObject.localResource)));\n\t\t});\n\t});\n\n\ttest('request latest data on precondition failure', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\t// Sync once\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\ttestObject.syncBarrier = new Barrier();\n\n\t\t\t// update remote data before syncing so that 412 is thrown by server\n\t\t\tconst disposable = testObject.onDoSyncCall.event(async () => {\n\t\t\t\tdisposable.dispose();\n\t\t\t\tawait testObject.applyRef(ref, ref);\n\t\t\t\tserver.reset();\n\t\t\t\ttestObject.syncBarrier.open();\n\t\t\t});\n\n\t\t\t// Start sycing\n\t\t\tconst manifest = await client.getResourceManifest();\n\t\t\tconst ref = manifest![testObject.resource];\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t\t{ type: 'POST', url: `${server.url}/v1/resource/${testObject.resource}`, headers: { 'If-Match': ref } },\n\t\t\t\t{ type: 'GET', url: `${server.url}/v1/resource/${testObject.resource}/latest`, headers: {} },\n\t\t\t\t{ type: 'POST', url: `${server.url}/v1/resource/${testObject.resource}`, headers: { 'If-Match': `${parseInt(ref) + 1}` } },\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('no requests are made to server when local change is triggered', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tserver.reset();\n\t\t\tconst promise = Event.toPromise(testObject.onDidTriggerLocalChangeCall.event);\n\t\t\ttestObject.testTriggerLocalChange();\n\n\t\t\tawait promise;\n\t\t\tassert.deepStrictEqual(server.requests, []);\n\t\t});\n\t});\n\n\ttest('status is reset when getting latest remote data fails', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.failWhenGettingLatestRemoteUserData = true;\n\n\t\t\ttry {\n\t\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\t\tassert.fail('Should throw an error');\n\t\t\t} catch (error) {\n\t\t\t}\n\n\t\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\t});\n\t});\n});\n\nsuite('TestSynchronizer - Manual Sync', () => {\n\n\tconst server = new UserDataSyncTestServer();\n\tlet client: UserDataSyncClient;\n\n\tteardown(async () => {\n\t\tawait client.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tclient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client.setUp();\n\t});\n\n\ttest('preview', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tconst preview = await testObject.preview(await client.getResourceManifest(), {});\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preview -> merge', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Accepted);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preview -> accept', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Accepted);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preview -> merge -> accept', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].localResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Accepted);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preview -> merge -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst manifest = await client.getResourceManifest();\n\t\t\tlet preview = await testObject.preview(manifest, {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tconst expectedContent = manifest![testObject.resource];\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('preview -> accept -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst manifest = await client.getResourceManifest();\n\t\t\tconst expectedContent = manifest![testObject.resource];\n\t\t\tlet preview = await testObject.preview(manifest, {});\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('preview -> merge -> accept -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst expectedContent = (await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString();\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].localResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('preivew -> merge -> discard', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Preview);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preivew -> merge -> discard -> accept', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Accepted);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preivew -> accept -> discard', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Preview);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preivew -> accept -> discard -> accept', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Accepted);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preivew -> accept -> discard -> merge', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].remoteResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Accepted);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preivew -> merge -> accept -> discard', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Preview);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('preivew -> merge -> discard -> accept -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst expectedContent = (await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString();\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].localResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('preivew -> accept -> discard -> accept -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst expectedContent = (await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString();\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].localResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('preivew -> accept -> discard -> merge -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst manifest = await client.getResourceManifest();\n\t\t\tconst expectedContent = manifest![testObject.resource];\n\t\t\tlet preview = await testObject.preview(manifest, {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].localResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('conflicts: preview', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tconst preview = await testObject.preview(await client.getResourceManifest(), {});\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preview -> merge', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Conflict);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, [preview!.resourcePreviews[0].localResource]);\n\t\t});\n\t});\n\n\ttest('conflicts: preview -> merge -> discard', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tconst preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tawait testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tawait testObject.discard(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Preview);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preview -> accept', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tawait testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tconst content = await testObject.resolveContent(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource, content);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preview -> merge -> accept -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\tconst manifest = await client.getResourceManifest();\n\t\t\tconst expectedContent = manifest![testObject.resource];\n\t\t\tlet preview = await testObject.preview(manifest, {});\n\n\t\t\tawait testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('conflicts: preview -> accept 2', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tconst content = await testObject.resolveContent(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource, content);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preview -> accept -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\tconst manifest = await client.getResourceManifest();\n\t\t\tconst expectedContent = manifest![testObject.resource];\n\t\t\tlet preview = await testObject.preview(manifest, {});\n\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> merge -> discard', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Preview);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> merge -> discard -> accept', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Accepted);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> accept -> discard', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Preview);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> accept -> discard -> accept', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Accepted);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> accept -> discard -> merge', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].remoteResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Conflict);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, [preview!.resourcePreviews[0].localResource]);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> merge -> discard -> merge', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: true, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].remoteResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Conflict);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, [preview!.resourcePreviews[0].localResource]);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> merge -> accept -> discard', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Syncing);\n\t\t\tassertPreviews(preview!.resourcePreviews, [testObject.localResource]);\n\t\t\tassert.strictEqual(preview!.resourcePreviews[0].mergeState, MergeState.Preview);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> merge -> discard -> accept -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst expectedContent = (await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString();\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].localResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('conflicts: preivew -> accept -> discard -> accept -> apply', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncResult = { hasConflicts: false, hasError: false };\n\t\t\ttestObject.syncBarrier.open();\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst expectedContent = (await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString();\n\t\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\t\tpreview = await testObject.merge(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].remoteResource);\n\t\t\tpreview = await testObject.discard(preview!.resourcePreviews[0].previewResource);\n\t\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].localResource);\n\t\t\tpreview = await testObject.apply(false);\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual(preview, null);\n\t\t\tassertConflicts(testObject.conflicts.conflicts, []);\n\t\t\tassert.strictEqual((await testObject.getRemoteUserData(null)).syncData?.content, expectedContent);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n\ttest('remote is accepted if last sync state does not exists in server', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\t\tawait client2.setUp();\n\t\t\tconst synchronizer2: TestSynchroniser = disposableStore.add(client2.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client2.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\tsynchronizer2.syncBarrier.open();\n\t\t\tconst manifest = await client2.getResourceManifest();\n\t\t\tconst expectedContent = manifest![testObject.resource];\n\t\t\tawait synchronizer2.sync(manifest);\n\n\t\t\tawait fileService.del(testObject.getLastSyncResource());\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\t\tassert.strictEqual((await client.instantiationService.get(IFileService).readFile(testObject.localResource)).value.toString(), expectedContent);\n\t\t});\n\t});\n\n});\n\nsuite('TestSynchronizer - Last Sync Data', () => {\n\tconst server = new UserDataSyncTestServer();\n\tlet client: UserDataSyncClient;\n\n\tteardown(async () => {\n\t\tawait client.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tclient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client.setUp();\n\t});\n\n\ttest('last sync data is null when not synced before', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\n\t\t\tconst actual = await testObject.getLastSyncUserData();\n\n\t\t\tassert.strictEqual(actual, null);\n\t\t});\n\t});\n\n\ttest('last sync data is set after sync', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst machineId = await testObject.getMachineId();\n\t\t\tconst actual = await testObject.getLastSyncUserData();\n\n\t\t\tassert.deepStrictEqual(storageService.get('settings.lastSyncUserData', StorageScope.APPLICATION), JSON.stringify({ ref: '1' }));\n\t\t\tassert.deepStrictEqual(JSON.parse((await fileService.readFile(testObject.getLastSyncResource())).value.toString()), { ref: '1', syncData: { version: 1, machineId, content: '0' } });\n\t\t\tassert.deepStrictEqual(actual, {\n\t\t\t\tref: '1',\n\t\t\t\tsyncData: {\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('last sync data is read from server after sync if last sync resource is deleted', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst machineId = await testObject.getMachineId();\n\t\t\tawait fileService.del(testObject.getLastSyncResource());\n\t\t\tconst actual = await testObject.getLastSyncUserData();\n\n\t\t\tassert.deepStrictEqual(storageService.get('settings.lastSyncUserData', StorageScope.APPLICATION), JSON.stringify({ ref: '1' }));\n\t\t\tassert.deepStrictEqual(actual, {\n\t\t\t\tref: '1',\n\t\t\t\tsyncData: {\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('last sync data is read from server after sync and sync data is invalid', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst machineId = await testObject.getMachineId();\n\t\t\tawait fileService.writeFile(testObject.getLastSyncResource(), VSBuffer.fromString(JSON.stringify({\n\t\t\t\tref: '1',\n\t\t\t\tversion: 1,\n\t\t\t\tcontent: JSON.stringify({\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t}),\n\t\t\t\tadditionalData: {\n\t\t\t\t\tfoo: 'bar'\n\t\t\t\t}\n\t\t\t})));\n\t\t\tserver.reset();\n\t\t\tconst actual = await testObject.getLastSyncUserData();\n\n\t\t\tassert.deepStrictEqual(storageService.get('settings.lastSyncUserData', StorageScope.APPLICATION), JSON.stringify({ ref: '1' }));\n\t\t\tassert.deepStrictEqual(actual, {\n\t\t\t\tref: '1',\n\t\t\t\tsyncData: {\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t},\n\t\t\t});\n\t\t\tassert.deepStrictEqual(server.requests, [{ headers: {}, type: 'GET', url: 'http://host:3000/v1/resource/settings/1' }]);\n\t\t});\n\t});\n\n\ttest('last sync data is read from server after sync and stored sync data is tampered', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst machineId = await testObject.getMachineId();\n\t\t\tawait fileService.writeFile(testObject.getLastSyncResource(), VSBuffer.fromString(JSON.stringify({\n\t\t\t\tref: '2',\n\t\t\t\tsyncData: {\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t}\n\t\t\t})));\n\t\t\tserver.reset();\n\t\t\tconst actual = await testObject.getLastSyncUserData();\n\n\t\t\tassert.deepStrictEqual(storageService.get('settings.lastSyncUserData', StorageScope.APPLICATION), JSON.stringify({ ref: '1' }));\n\t\t\tassert.deepStrictEqual(actual, {\n\t\t\t\tref: '1',\n\t\t\t\tsyncData: {\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t}\n\t\t\t});\n\t\t\tassert.deepStrictEqual(server.requests, [{ headers: {}, type: 'GET', url: 'http://host:3000/v1/resource/settings/1' }]);\n\t\t});\n\t});\n\n\ttest('reading last sync data: no requests are made to server when sync data is invalid', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tconst machineId = await testObject.getMachineId();\n\t\t\tawait fileService.writeFile(testObject.getLastSyncResource(), VSBuffer.fromString(JSON.stringify({\n\t\t\t\tref: '1',\n\t\t\t\tversion: 1,\n\t\t\t\tcontent: JSON.stringify({\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t}),\n\t\t\t\tadditionalData: {\n\t\t\t\t\tfoo: 'bar'\n\t\t\t\t}\n\t\t\t})));\n\t\t\tawait testObject.getLastSyncUserData();\n\t\t\tserver.reset();\n\n\t\t\tawait testObject.getLastSyncUserData();\n\t\t\tassert.deepStrictEqual(server.requests, []);\n\t\t});\n\t});\n\n\ttest('reading last sync data: no requests are made to server when sync data is null', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tserver.reset();\n\t\t\tawait fileService.writeFile(testObject.getLastSyncResource(), VSBuffer.fromString(JSON.stringify({\n\t\t\t\tref: '1',\n\t\t\t\tsyncData: null,\n\t\t\t})));\n\t\t\tawait testObject.getLastSyncUserData();\n\n\t\t\tassert.deepStrictEqual(server.requests, []);\n\t\t});\n\t});\n\n\ttest('last sync data is null after sync if last sync state is deleted', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tstorageService.remove('settings.lastSyncUserData', StorageScope.APPLICATION);\n\t\t\tconst actual = await testObject.getLastSyncUserData();\n\n\t\t\tassert.strictEqual(actual, null);\n\t\t});\n\t});\n\n\ttest('last sync data is null after sync if last sync content is deleted everywhere', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst userDataSyncStoreService = client.instantiationService.get(IUserDataSyncStoreService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\ttestObject.syncBarrier.open();\n\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tawait fileService.del(testObject.getLastSyncResource());\n\t\t\tawait userDataSyncStoreService.deleteResource(testObject.syncResource.syncResource, null);\n\t\t\tconst actual = await testObject.getLastSyncUserData();\n\n\t\t\tassert.deepStrictEqual(storageService.get('settings.lastSyncUserData', StorageScope.APPLICATION), JSON.stringify({ ref: '1' }));\n\t\t\tassert.strictEqual(actual, null);\n\t\t});\n\t});\n\n\ttest('last sync data is migrated', async () => {\n\t\tawait runWithFakedTimers<void>({}, async () => {\n\t\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\t\tconst testObject: TestSynchroniser = disposableStore.add(client.instantiationService.createInstance(TestSynchroniser, { syncResource: SyncResource.Settings, profile: client.instantiationService.get(IUserDataProfilesService).defaultProfile }, undefined));\n\t\t\tconst machineId = await testObject.getMachineId();\n\t\t\tawait fileService.writeFile(testObject.getLastSyncResource(), VSBuffer.fromString(JSON.stringify({\n\t\t\t\tref: '1',\n\t\t\t\tversion: 1,\n\t\t\t\tcontent: JSON.stringify({\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t}),\n\t\t\t\tadditionalData: {\n\t\t\t\t\tfoo: 'bar'\n\t\t\t\t}\n\t\t\t})));\n\n\t\t\tconst actual = await testObject.getLastSyncUserData();\n\n\t\t\tassert.deepStrictEqual(storageService.get('settings.lastSyncUserData', StorageScope.APPLICATION), JSON.stringify({\n\t\t\t\tref: '1',\n\t\t\t\tversion: 1,\n\t\t\t\tadditionalData: {\n\t\t\t\t\tfoo: 'bar'\n\t\t\t\t}\n\t\t\t}));\n\t\t\tassert.deepStrictEqual(actual, {\n\t\t\t\tref: '1',\n\t\t\t\tversion: 1,\n\t\t\t\tsyncData: {\n\t\t\t\t\tcontent: '0',\n\t\t\t\t\tmachineId,\n\t\t\t\t\tversion: 1\n\t\t\t\t},\n\t\t\t\tadditionalData: {\n\t\t\t\t\tfoo: 'bar'\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n});\n\nfunction assertConflicts(actual: IBaseResourcePreview[], expected: URI[]) {\n\tassert.deepStrictEqual(actual.map(({ localResource }) => localResource.toString()), expected.map(uri => uri.toString()));\n}\n\nfunction assertPreviews(actual: IBaseResourcePreview[], expected: URI[]) {\n\tassert.deepStrictEqual(actual.map(({ localResource }) => localResource.toString()), expected.map(uri => uri.toString()));\n}\n"],
  "mappings": "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",
  "names": []
}
