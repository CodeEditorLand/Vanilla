import n from"assert";import{VSBuffer as g}from"../../../../base/common/buffer.js";import{ensureNoDisposablesAreLeakedInTestSuite as v}from"../../../../base/test/common/utils.js";import{IFileService as l}from"../../../files/common/files.js";import{ILogService as u}from"../../../log/common/log.js";import{IUserDataProfilesService as y}from"../../../userDataProfile/common/userDataProfile.js";import{getKeybindingsContentFromSyncContent as d}from"../../common/keybindingsSync.js";import{IUserDataSyncStoreService as D,SyncResource as p,UserDataSyncError as b,UserDataSyncErrorCode as k}from"../../common/userDataSync.js";import{UserDataSyncClient as f,UserDataSyncTestServer as R}from"./userDataSyncClient.js";suite("KeybindingsSync",()=>{const c=new R;let e,i;teardown(async()=>{await e.instantiationService.get(D).clear()});const S=v();setup(async()=>{e=S.add(new f(c)),await e.setUp(!0),i=e.getSynchronizer(p.Keybindings)}),test("when keybindings file does not exist",async()=>{const t=e.instantiationService.get(l),s=e.instantiationService.get(y).defaultProfile.keybindingsResource;n.deepStrictEqual(await i.getLastSyncUserData(),null);let a=await e.getResourceManifest();c.reset(),await i.sync(a),n.deepStrictEqual(c.requests,[{type:"GET",url:`${c.url}/v1/resource/${i.resource}/latest`,headers:{}}]),n.ok(!await t.exists(s));const r=await i.getLastSyncUserData(),o=await i.getRemoteUserData(null);n.deepStrictEqual(r.ref,o.ref),n.deepStrictEqual(r.syncData,o.syncData),n.strictEqual(r.syncData,null),a=await e.getResourceManifest(),c.reset(),await i.sync(a),n.deepStrictEqual(c.requests,[]),a=await e.getResourceManifest(),c.reset(),await i.sync(a),n.deepStrictEqual(c.requests,[])}),test("when keybindings file is empty and remote has no changes",async()=>{const t=e.instantiationService.get(l),s=e.instantiationService.get(y).defaultProfile.keybindingsResource;await t.writeFile(s,g.fromString("")),await i.sync(await e.getResourceManifest());const a=await i.getLastSyncUserData(),r=await i.getRemoteUserData(null);n.strictEqual(d(a.syncData.content,!0,e.instantiationService.get(u)),"[]"),n.strictEqual(d(r.syncData.content,!0,e.instantiationService.get(u)),"[]"),n.strictEqual((await t.readFile(s)).value.toString(),"")}),test("when keybindings file is empty and remote has changes",async()=>{const t=S.add(new f(c));await t.setUp(!0);const s=JSON.stringify([{key:"shift+cmd+w",command:"workbench.action.closeAllEditors"}]);await t.instantiationService.get(l).writeFile(t.instantiationService.get(y).defaultProfile.keybindingsResource,g.fromString(s)),await t.sync();const a=e.instantiationService.get(l),r=e.instantiationService.get(y).defaultProfile.keybindingsResource;await a.writeFile(r,g.fromString("")),await i.sync(await e.getResourceManifest());const o=await i.getLastSyncUserData(),w=await i.getRemoteUserData(null);n.strictEqual(d(o.syncData.content,!0,e.instantiationService.get(u)),s),n.strictEqual(d(w.syncData.content,!0,e.instantiationService.get(u)),s),n.strictEqual((await a.readFile(r)).value.toString(),s)}),test("when keybindings file is empty with comment and remote has no changes",async()=>{const t=e.instantiationService.get(l),s=e.instantiationService.get(y).defaultProfile.keybindingsResource,a="// Empty Keybindings";await t.writeFile(s,g.fromString(a)),await i.sync(await e.getResourceManifest());const r=await i.getLastSyncUserData(),o=await i.getRemoteUserData(null);n.strictEqual(d(r.syncData.content,!0,e.instantiationService.get(u)),a),n.strictEqual(d(o.syncData.content,!0,e.instantiationService.get(u)),a),n.strictEqual((await t.readFile(s)).value.toString(),a)}),test("when keybindings file is empty and remote has keybindings",async()=>{const t=S.add(new f(c));await t.setUp(!0);const s=JSON.stringify([{key:"shift+cmd+w",command:"workbench.action.closeAllEditors"}]);await t.instantiationService.get(l).writeFile(t.instantiationService.get(y).defaultProfile.keybindingsResource,g.fromString(s)),await t.sync();const a=e.instantiationService.get(l),r=e.instantiationService.get(y).defaultProfile.keybindingsResource;await a.writeFile(r,g.fromString("// Empty Keybindings")),await i.sync(await e.getResourceManifest());const o=await i.getLastSyncUserData(),w=await i.getRemoteUserData(null);n.strictEqual(d(o.syncData.content,!0,e.instantiationService.get(u)),s),n.strictEqual(d(w.syncData.content,!0,e.instantiationService.get(u)),s),n.strictEqual((await a.readFile(r)).value.toString(),s)}),test("when keybindings file is empty and remote has empty array",async()=>{const t=S.add(new f(c));await t.setUp(!0);const s=`// Place your key bindings in this file to override the defaults
[
]`;await t.instantiationService.get(l).writeFile(t.instantiationService.get(y).defaultProfile.keybindingsResource,g.fromString(s)),await t.sync();const a=e.instantiationService.get(l),r=e.instantiationService.get(y).defaultProfile.keybindingsResource,o="// Empty Keybindings";await a.writeFile(r,g.fromString(o)),await i.sync(await e.getResourceManifest());const w=await i.getLastSyncUserData(),m=await i.getRemoteUserData(null);n.strictEqual(d(w.syncData.content,!0,e.instantiationService.get(u)),s),n.strictEqual(d(m.syncData.content,!0,e.instantiationService.get(u)),s),n.strictEqual((await a.readFile(r)).value.toString(),o)}),test("when keybindings file is created after first sync",async()=>{const t=e.instantiationService.get(l),s=e.instantiationService.get(y).defaultProfile.keybindingsResource;await i.sync(await e.getResourceManifest()),await t.createFile(s,g.fromString("[]"));let a=await i.getLastSyncUserData();const r=await e.getResourceManifest();c.reset(),await i.sync(r),n.deepStrictEqual(c.requests,[{type:"POST",url:`${c.url}/v1/resource/${i.resource}`,headers:{"If-Match":a?.ref}}]),a=await i.getLastSyncUserData();const o=await i.getRemoteUserData(null);n.deepStrictEqual(a.ref,o.ref),n.deepStrictEqual(a.syncData,o.syncData),n.strictEqual(d(a.syncData.content,!0,e.instantiationService.get(u)),"[]")}),test("test apply remote when keybindings file does not exist",async()=>{const t=e.instantiationService.get(l),s=e.instantiationService.get(y).defaultProfile.keybindingsResource;await t.exists(s)&&await t.del(s);const a=await i.preview(await e.getResourceManifest(),{});c.reset();const r=await i.resolveContent(a.resourcePreviews[0].remoteResource);await i.accept(a.resourcePreviews[0].remoteResource,r),await i.apply(!1),n.deepStrictEqual(c.requests,[])}),test("sync throws invalid content error - content is an object",async()=>{await e.instantiationService.get(l).writeFile(e.instantiationService.get(y).defaultProfile.keybindingsResource,g.fromString("{}"));try{await i.sync(await e.getResourceManifest()),n.fail("should fail with invalid content error")}catch(t){n.ok(t instanceof b),n.deepStrictEqual(t.code,k.LocalInvalidContent)}}),test("sync profile keybindings",async()=>{const t=S.add(new f(c));await t.setUp(!0);const s=await t.instantiationService.get(y).createNamedProfile("profile1");await t.instantiationService.get(l).writeFile(s.keybindingsResource,g.fromString(JSON.stringify([{key:"shift+cmd+w",command:"workbench.action.closeAllEditors"}]))),await t.sync(),await e.sync();const a=e.instantiationService.get(y).profiles.find(o=>o.id===s.id),r=(await e.instantiationService.get(l).readFile(a.keybindingsResource)).value.toString();n.deepStrictEqual(JSON.parse(r),[{key:"shift+cmd+w",command:"workbench.action.closeAllEditors"}])})});
