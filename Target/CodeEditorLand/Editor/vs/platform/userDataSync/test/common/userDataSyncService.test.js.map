{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/userDataSyncService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { dirname, joinPath } from '../../../../base/common/resources.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IEnvironmentService } from '../../../environment/common/environment.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { IUserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataSyncEnablementService, IUserDataSyncService, SyncResource, SyncStatus } from '../../common/userDataSync.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\n\nsuite('UserDataSyncService', () => {\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('test first time sync ever', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\n\t\t// Sync for first time\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '0' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '0' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '0' } },\n\t\t\t// Tasks\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/tasks`, headers: { 'If-Match': '0' } },\n\t\t\t// Global state\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '0' } },\n\t\t\t// Extensions\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t// Profiles\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test first time sync ever when a sync resource is disabled', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tclient.instantiationService.get(IUserDataSyncEnablementService).setResourceEnablement(SyncResource.Settings, false);\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\n\t\t// Sync for first time\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '0' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '0' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/tasks`, headers: { 'If-Match': '0' } },\n\t\t\t// Global state\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '0' } },\n\t\t\t// Extensions\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t// Profiles\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test first time sync ever with no data', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp(true);\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\n\t\t// Sync for first time\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: {} },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t// Tasks\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/tasks/latest`, headers: {} },\n\t\t\t// Global state\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t// Extensions\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t// Profiles\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test first time sync from the client with no changes - merge', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Setup the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\n\t\t// Sync (merge) from the test client\n\t\ttarget.reset();\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test first time sync from the client with changes - merge', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Setup the test client with changes\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst fileService = testClient.instantiationService.get(IFileService);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = testClient.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{}`));\n\t\tawait fileService.writeFile(joinPath(dirname(userDataProfilesService.defaultProfile.settingsResource), 'tasks.json'), VSBuffer.fromString(JSON.stringify({})));\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\n\t\t// Sync (merge) from the test client\n\t\ttarget.reset();\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '1' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '1' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '1' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test first time sync from the client with changes - merge with profile', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Setup the test client with changes\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst fileService = testClient.instantiationService.get(IFileService);\n\t\tconst environmentService = testClient.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = testClient.instantiationService.get(IUserDataProfilesService);\n\t\tawait userDataProfilesService.createNamedProfile('1');\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{}`));\n\t\tawait fileService.writeFile(joinPath(dirname(userDataProfilesService.defaultProfile.settingsResource), 'tasks.json'), VSBuffer.fromString(JSON.stringify({})));\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\n\t\t// Sync (merge) from the test client\n\t\ttarget.reset();\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '1' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '1' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '1' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/collection`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/profiles`, headers: { 'If-Match': '0' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/extensions/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test sync when there are no changes', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\t// sync from the client again\n\t\ttarget.reset();\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t]);\n\t});\n\n\ttest('test sync when there are local changes', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\t\ttarget.reset();\n\n\t\t// Do changes in the client\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{}`));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\n\t\t// Sync from the client\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '1' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '1' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '1' } },\n\t\t\t// Global state\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '1' } },\n\t\t]);\n\t});\n\n\ttest('test sync when there are local changes with profile', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\t\ttarget.reset();\n\n\t\t// Do changes in the client\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait userDataProfilesService.createNamedProfile('1');\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{}`));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\n\t\t// Sync from the client\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '1' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '1' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '1' } },\n\t\t\t// Global state\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '1' } },\n\t\t\t// Profiles\n\t\t\t{ type: 'POST', url: `${target.url}/v1/collection`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/profiles`, headers: { 'If-Match': '0' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/extensions/latest`, headers: {} },\n\t\t]);\n\t});\n\n\ttest('test sync when there are local changes and sync resource is disabled', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\t\ttarget.reset();\n\n\t\t// Do changes in the client\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{}`));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\t\tclient.instantiationService.get(IUserDataSyncEnablementService).setResourceEnablement(SyncResource.Snippets, false);\n\n\t\t// Sync from the client\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '1' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '1' } },\n\t\t\t// Global state\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '1' } },\n\t\t]);\n\t});\n\n\ttest('test sync when there are remote changes', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Sync from first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Sync from test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\t// Do changes in first client and sync\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{ \"a\": \"changed\" }`));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Sync from test client\n\t\ttarget.reset();\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Global state\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: { 'If-None-Match': '1' } },\n\t\t]);\n\n\t});\n\n\ttest('test sync when there are remote changes with profile', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Sync from first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Sync from test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\t// Do changes in first client and sync\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait userDataProfilesService.createNamedProfile('1');\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{ \"a\": \"changed\" }`));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Sync from test client\n\t\ttarget.reset();\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Global state\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Profiles\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: { 'If-None-Match': '0' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/extensions/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test delete', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Sync from the client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\t// Reset from the client\n\t\ttarget.reset();\n\t\tawait testObject.reset();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'DELETE', url: `${target.url}/v1/collection`, headers: {} },\n\t\t\t{ type: 'DELETE', url: `${target.url}/v1/resource`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test delete and sync', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Sync from the client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\t// Reset from the client\n\t\tawait testObject.reset();\n\n\t\t// Sync again\n\t\ttarget.reset();\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '0' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '0' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '0' } },\n\t\t\t// Tasks\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/tasks`, headers: { 'If-Match': '0' } },\n\t\t\t// Global state\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '0' } },\n\t\t\t// Extensions\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/extensions/latest`, headers: {} },\n\t\t\t// Profiles\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n\ttest('test sync status', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup the client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\n\t\t// sync from the client\n\t\tconst actualStatuses: SyncStatus[] = [];\n\t\tconst disposable = testObject.onDidChangeStatus(status => actualStatuses.push(status));\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tdisposable.dispose();\n\t\tassert.deepStrictEqual(actualStatuses, [SyncStatus.Syncing, SyncStatus.Idle, SyncStatus.Syncing, SyncStatus.Idle, SyncStatus.Syncing, SyncStatus.Idle, SyncStatus.Syncing, SyncStatus.Idle, SyncStatus.Syncing, SyncStatus.Idle, SyncStatus.Syncing, SyncStatus.Idle, SyncStatus.Syncing, SyncStatus.Idle]);\n\t});\n\n\ttest('test sync conflicts status', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tlet fileService = client.instantiationService.get(IFileService);\n\t\tlet userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Setup the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tfileService = testClient.instantiationService.get(IFileService);\n\t\tuserDataProfilesService = testClient.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 16 })));\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\n\t\t// sync from the client\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tassert.deepStrictEqual(testObject.conflicts.map(({ syncResource }) => syncResource), [SyncResource.Settings]);\n\t});\n\n\ttest('test sync will sync other non conflicted areas', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tlet userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Setup the test client and get conflicts in settings\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testFileService = testClient.instantiationService.get(IFileService);\n\t\tuserDataProfilesService = testClient.instantiationService.get(IUserDataProfilesService);\n\t\tawait testFileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 16 })));\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\t// sync from the first client with changes in keybindings\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// sync from the test client\n\t\ttarget.reset();\n\t\tconst actualStatuses: SyncStatus[] = [];\n\t\tconst disposable = testObject.onDidChangeStatus(status => actualStatuses.push(status));\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tdisposable.dispose();\n\t\tassert.deepStrictEqual(actualStatuses, []);\n\t\tassert.deepStrictEqual(testObject.status, SyncStatus.HasConflicts);\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: { 'If-None-Match': '1' } },\n\t\t]);\n\t});\n\n\ttest('test stop sync reset status', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tlet fileService = client.instantiationService.get(IFileService);\n\t\tlet userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Setup the test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tfileService = testClient.instantiationService.get(IFileService);\n\t\tuserDataProfilesService = testClient.instantiationService.get(IUserDataProfilesService);\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 16 })));\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\n\n\t\tconst syncTask = (await testObject.createSyncTask(null));\n\t\tsyncTask.run().then(null, () => null /* ignore error */);\n\t\tawait syncTask.stop();\n\n\t\tassert.deepStrictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts, []);\n\t});\n\n\ttest('test sync send execution id header', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tfor (const request of target.requestsWithAllHeaders) {\n\t\t\tconst hasExecutionIdHeader = request.headers && request.headers['X-Execution-Id'] && request.headers['X-Execution-Id'].length > 0;\n\t\t\tassert.ok(hasExecutionIdHeader, `Should have execution header: ${request.url}`);\n\t\t}\n\n\t});\n\n\ttest('test can run sync taks only once', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\n\t\tconst syncTask = await testObject.createSyncTask(null);\n\t\tawait syncTask.run();\n\n\t\ttry {\n\t\t\tawait syncTask.run();\n\t\t\tassert.fail('Should fail running the task again');\n\t\t} catch (error) {\n\t\t\t/* expected */\n\t\t}\n\t});\n\n\ttest('test sync when there are local profile that uses default profile', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Setup and sync from the client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\t\ttarget.reset();\n\n\t\t// Do changes in the client\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait userDataProfilesService.createNamedProfile('1', { useDefaultFlags: { settings: true } });\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{}`));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\n\t\t// Sync from the client\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/settings`, headers: { 'If-Match': '1' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/keybindings`, headers: { 'If-Match': '1' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/snippets`, headers: { 'If-Match': '1' } },\n\t\t\t// Global state\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/globalState`, headers: { 'If-Match': '1' } },\n\t\t\t// Profiles\n\t\t\t{ type: 'POST', url: `${target.url}/v1/collection`, headers: {} },\n\t\t\t{ type: 'POST', url: `${target.url}/v1/resource/profiles`, headers: { 'If-Match': '0' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/keybindings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/extensions/latest`, headers: {} },\n\t\t]);\n\t});\n\n\ttest('test sync when there is a remote profile that uses default profile', async () => {\n\t\tconst target = new UserDataSyncTestServer();\n\n\t\t// Sync from first client\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Sync from test client\n\t\tconst testClient = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait testClient.setUp();\n\t\tconst testObject = testClient.instantiationService.get(IUserDataSyncService);\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\t// Do changes in first client and sync\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst userDataProfilesService = client.instantiationService.get(IUserDataProfilesService);\n\t\tawait userDataProfilesService.createNamedProfile('1', { useDefaultFlags: { keybindings: true } });\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(JSON.stringify({ 'editor.fontSize': 14 })));\n\t\tawait fileService.writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify([{ 'command': 'abcd', 'key': 'cmd+c' }])));\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'html.json'), VSBuffer.fromString(`{ \"a\": \"changed\" }`));\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'de' })));\n\t\tawait (await client.instantiationService.get(IUserDataSyncService).createSyncTask(null)).run();\n\n\t\t// Sync from test client\n\t\ttarget.reset();\n\t\tawait (await testObject.createSyncTask(null)).run();\n\n\t\tassert.deepStrictEqual(target.requests, [\n\t\t\t// Manifest\n\t\t\t{ type: 'GET', url: `${target.url}/v1/manifest`, headers: {} },\n\t\t\t// Settings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/settings/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Keybindings\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/keybindings/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Snippets\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/snippets/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Global state\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/globalState/latest`, headers: { 'If-None-Match': '1' } },\n\t\t\t// Profiles\n\t\t\t{ type: 'GET', url: `${target.url}/v1/resource/profiles/latest`, headers: { 'If-None-Match': '0' } },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/settings/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/snippets/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/tasks/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/globalState/latest`, headers: {} },\n\t\t\t{ type: 'GET', url: `${target.url}/v1/collection/1/resource/extensions/latest`, headers: {} },\n\t\t]);\n\n\t});\n\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,gBAAgB;AACzB,SAAS,SAAS,gBAAgB;AAClC,SAAS,+CAA+C;AACxD,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,gCAAgC;AACzC,SAAS,gCAAgC,sBAAsB,cAAc,kBAAkB;AAC/F,SAAS,oBAAoB,8BAA8B;AAE3D,MAAM,uBAAuB,MAAM;AAElC,QAAM,kBAAkB,wCAAwC;AAEhE,OAAK,6BAA6B,YAAY;AAE7C,UAAM,SAAS,IAAI,uBAAuB;AAC1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AAGvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6BAA6B,SAAS,CAAC,EAAE;AAAA,MAC1E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,sBAAsB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAErF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,kCAAkC,SAAS,CAAC,EAAE;AAAA;AAAA,MAE/E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,IAC9E,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,8DAA8D,YAAY;AAE9E,UAAM,SAAS,IAAI,uBAAuB;AAC1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,WAAO,qBAAqB,IAAI,8BAA8B,EAAE,sBAAsB,aAAa,UAAU,KAAK;AAClH,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AAGvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6BAA6B,SAAS,CAAC,EAAE;AAAA,MAC1E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,sBAAsB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAErF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,kCAAkC,SAAS,CAAC,EAAE;AAAA;AAAA,MAE/E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,IAC9E,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,0CAA0C,YAAY;AAE1D,UAAM,SAAS,IAAI,uBAAuB;AAC1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM,IAAI;AACvB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AAGvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA;AAAA,MAEhF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6BAA6B,SAAS,CAAC,EAAE;AAAA;AAAA,MAE1E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA;AAAA,MAEhF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,kCAAkC,SAAS,CAAC,EAAE;AAAA;AAAA,MAE/E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,IAC9E,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,gEAAgE,YAAY;AAChF,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAG3E,WAAO,MAAM;AACb,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA,MACvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA,MAC7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6BAA6B,SAAS,CAAC,EAAE;AAAA,MAC1E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,kCAAkC,SAAS,CAAC,EAAE;AAAA,MAC/E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,IAC9E,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,6DAA6D,YAAY;AAC7E,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,cAAc,WAAW,qBAAqB,IAAI,YAAY;AACpE,UAAM,qBAAqB,WAAW,qBAAqB,IAAI,mBAAmB;AAClF,UAAM,0BAA0B,WAAW,qBAAqB,IAAI,wBAAwB;AAC5F,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AACpH,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,IAAI,CAAC;AACjI,UAAM,YAAY,UAAU,SAAS,QAAQ,wBAAwB,eAAe,gBAAgB,GAAG,YAAY,GAAG,SAAS,WAAW,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7J,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAG3E,WAAO,MAAM;AACb,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA,MACvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA,MAC7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MACxF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MAC3F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MACxF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6BAA6B,SAAS,CAAC,EAAE;AAAA,MAC1E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,kCAAkC,SAAS,CAAC,EAAE;AAAA,MAC/E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,IAC9E,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,0EAA0E,YAAY;AAC1F,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,cAAc,WAAW,qBAAqB,IAAI,YAAY;AACpE,UAAM,qBAAqB,WAAW,qBAAqB,IAAI,mBAAmB;AAClF,UAAM,0BAA0B,WAAW,qBAAqB,IAAI,wBAAwB;AAC5F,UAAM,wBAAwB,mBAAmB,GAAG;AACpD,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AACpH,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,IAAI,CAAC;AACjI,UAAM,YAAY,UAAU,SAAS,QAAQ,wBAAwB,eAAe,gBAAgB,GAAG,YAAY,GAAG,SAAS,WAAW,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7J,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAG3E,WAAO,MAAM;AACb,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA,MACvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA,MAC7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MACxF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MAC3F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MACxF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6BAA6B,SAAS,CAAC,EAAE;AAAA,MAC1E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,kCAAkC,SAAS,CAAC,EAAE;AAAA,MAC/E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,kBAAkB,SAAS,CAAC,EAAE;AAAA,MAChE,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MACxF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,0CAA0C,SAAS,CAAC,EAAE;AAAA,MACvF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,+CAA+C,SAAS,CAAC,EAAE;AAAA,IAC7F,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,uCAAuC,YAAY;AACvD,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AACvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAGlD,WAAO,MAAM;AACb,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA,IAC9D,CAAC;AAAA,EACF,CAAC;AAED,OAAK,0CAA0C,YAAY;AAC1D,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AACvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAClD,WAAO,MAAM;AAGb,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACxF,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,IAAI,CAAC;AACjI,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AAGpH,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,IAC5F,CAAC;AAAA,EACF,CAAC;AAED,OAAK,uDAAuD,YAAY;AACvE,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AACvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAClD,WAAO,MAAM;AAGb,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACxF,UAAM,wBAAwB,mBAAmB,GAAG;AACpD,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,IAAI,CAAC;AACjI,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AAGpH,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,kBAAkB,SAAS,CAAC,EAAE;AAAA,MAChE,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MACxF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,0CAA0C,SAAS,CAAC,EAAE;AAAA,MACvF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,+CAA+C,SAAS,CAAC,EAAE;AAAA,IAC7F,CAAC;AAAA,EACF,CAAC;AAED,OAAK,wEAAwE,YAAY;AACxF,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AACvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAClD,WAAO,MAAM;AAGb,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACxF,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,IAAI,CAAC;AACjI,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AACpH,WAAO,qBAAqB,IAAI,8BAA8B,EAAE,sBAAsB,aAAa,UAAU,KAAK;AAGlH,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,IAC5F,CAAC;AAAA,EACF,CAAC;AAED,OAAK,2CAA2C,YAAY;AAC3D,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAC3E,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAGlD,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACxF,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,oBAAoB,CAAC;AACjJ,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AACpH,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,WAAO,MAAM;AACb,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEnG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEtG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEnG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA,IACvG,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,wDAAwD,YAAY;AACxE,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAC3E,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAGlD,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACxF,UAAM,wBAAwB,mBAAmB,GAAG;AACpD,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,oBAAoB,CAAC;AACjJ,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AACpH,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,WAAO,MAAM;AACb,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEnG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEtG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEnG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEtG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA,MACnG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,0CAA0C,SAAS,CAAC,EAAE;AAAA,MACvF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,+CAA+C,SAAS,CAAC,EAAE;AAAA,IAC7F,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,eAAe,YAAY;AAC/B,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAC3E,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAGlD,WAAO,MAAM;AACb,UAAM,WAAW,MAAM;AAEvB,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,UAAU,KAAK,GAAG,OAAO,GAAG,kBAAkB,SAAS,CAAC,EAAE;AAAA,MAClE,EAAE,MAAM,UAAU,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA,IACjE,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,wBAAwB,YAAY;AACxC,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAC3E,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAGlD,UAAM,WAAW,MAAM;AAGvB,WAAO,MAAM;AACb,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,MAC7E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6BAA6B,SAAS,CAAC,EAAE;AAAA,MAC1E,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,sBAAsB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAErF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,CAAC,EAAE;AAAA,MAChF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,kCAAkC,SAAS,CAAC,EAAE;AAAA;AAAA,MAE/E,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,CAAC,EAAE;AAAA,IAC9E,CAAC;AAAA,EAEF,CAAC;AAED,OAAK,oBAAoB,YAAY;AACpC,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AAGvE,UAAM,iBAA+B,CAAC;AACtC,UAAM,aAAa,WAAW,kBAAkB,YAAU,eAAe,KAAK,MAAM,CAAC;AACrF,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,eAAW,QAAQ;AACnB,WAAO,gBAAgB,gBAAgB,CAAC,WAAW,SAAS,WAAW,MAAM,WAAW,SAAS,WAAW,MAAM,WAAW,SAAS,WAAW,MAAM,WAAW,SAAS,WAAW,MAAM,WAAW,SAAS,WAAW,MAAM,WAAW,SAAS,WAAW,MAAM,WAAW,SAAS,WAAW,IAAI,CAAC;AAAA,EAC3S,CAAC;AAED,OAAK,8BAA8B,YAAY;AAC9C,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,QAAI,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAC9D,QAAI,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACtF,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,kBAAc,WAAW,qBAAqB,IAAI,YAAY;AAC9D,8BAA0B,WAAW,qBAAqB,IAAI,wBAAwB;AACtF,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAG3E,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,WAAW,QAAQ,WAAW,YAAY;AACjE,WAAO,gBAAgB,WAAW,UAAU,IAAI,CAAC,EAAE,aAAa,MAAM,YAAY,GAAG,CAAC,aAAa,QAAQ,CAAC;AAAA,EAC7G,CAAC;AAED,OAAK,kDAAkD,YAAY;AAClE,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,QAAI,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACtF,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,kBAAkB,WAAW,qBAAqB,IAAI,YAAY;AACxE,8BAA0B,WAAW,qBAAqB,IAAI,wBAAwB;AACtF,UAAM,gBAAgB,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACvJ,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAC3E,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAGlD,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,WAAO,MAAM;AACb,UAAM,iBAA+B,CAAC;AACtC,UAAM,aAAa,WAAW,kBAAkB,YAAU,eAAe,KAAK,MAAM,CAAC;AACrF,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,eAAW,QAAQ;AACnB,WAAO,gBAAgB,gBAAgB,CAAC,CAAC;AACzC,WAAO,gBAAgB,WAAW,QAAQ,WAAW,YAAY;AAEjE,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA,IACvG,CAAC;AAAA,EACF,CAAC;AAED,OAAK,+BAA+B,YAAY;AAC/C,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,QAAI,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAC9D,QAAI,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACtF,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,kBAAc,WAAW,qBAAqB,IAAI,YAAY;AAC9D,8BAA0B,WAAW,qBAAqB,IAAI,wBAAwB;AACtF,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAG3E,UAAM,WAAY,MAAM,WAAW,eAAe,IAAI;AACtD,aAAS,IAAI,EAAE;AAAA,MAAK;AAAA,MAAM,MAAM;AAAA;AAAA,IAAuB;AACvD,UAAM,SAAS,KAAK;AAEpB,WAAO,gBAAgB,WAAW,QAAQ,WAAW,IAAI;AACzD,WAAO,gBAAgB,WAAW,WAAW,CAAC,CAAC;AAAA,EAChD,CAAC;AAED,OAAK,sCAAsC,YAAY;AAEtD,UAAM,SAAS,IAAI,uBAAuB;AAC1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AAEvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,eAAW,WAAW,OAAO,wBAAwB;AACpD,YAAM,uBAAuB,QAAQ,WAAW,QAAQ,QAAQ,gBAAgB,KAAK,QAAQ,QAAQ,gBAAgB,EAAE,SAAS;AAChI,aAAO,GAAG,sBAAsB,iCAAiC,QAAQ,GAAG,EAAE;AAAA,IAC/E;AAAA,EAED,CAAC;AAED,OAAK,oCAAoC,YAAY;AAEpD,UAAM,SAAS,IAAI,uBAAuB;AAC1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AAEvE,UAAM,WAAW,MAAM,WAAW,eAAe,IAAI;AACrD,UAAM,SAAS,IAAI;AAEnB,QAAI;AACH,YAAM,SAAS,IAAI;AACnB,aAAO,KAAK,oCAAoC;AAAA,IACjD,SAAS,OAAO;AAAA,IAEhB;AAAA,EACD,CAAC;AAED,OAAK,oEAAoE,YAAY;AACpF,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,UAAM,aAAa,OAAO,qBAAqB,IAAI,oBAAoB;AACvE,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAClD,WAAO,MAAM;AAGb,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACxF,UAAM,wBAAwB,mBAAmB,KAAK,EAAE,iBAAiB,EAAE,UAAU,KAAK,EAAE,CAAC;AAC7F,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,IAAI,CAAC;AACjI,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AAGpH,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAExF,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,4BAA4B,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA;AAAA,MAE3F,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,kBAAkB,SAAS,CAAC,EAAE;AAAA,MAChE,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,yBAAyB,SAAS,EAAE,YAAY,IAAI,EAAE;AAAA,MACxF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,0CAA0C,SAAS,CAAC,EAAE;AAAA,MACvF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,+CAA+C,SAAS,CAAC,EAAE;AAAA,IAC7F,CAAC;AAAA,EACF,CAAC;AAED,OAAK,sEAAsE,YAAY;AACtF,UAAM,SAAS,IAAI,uBAAuB;AAG1C,UAAM,SAAS,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACjE,UAAM,OAAO,MAAM;AACnB,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,UAAM,aAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AACrE,UAAM,WAAW,MAAM;AACvB,UAAM,aAAa,WAAW,qBAAqB,IAAI,oBAAoB;AAC3E,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAGlD,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,0BAA0B,OAAO,qBAAqB,IAAI,wBAAwB;AACxF,UAAM,wBAAwB,mBAAmB,KAAK,EAAE,iBAAiB,EAAE,aAAa,KAAK,EAAE,CAAC;AAChG,UAAM,YAAY,UAAU,wBAAwB,eAAe,kBAAkB,SAAS,WAAW,KAAK,UAAU,EAAE,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACnJ,UAAM,YAAY,UAAU,wBAAwB,eAAe,qBAAqB,SAAS,WAAW,KAAK,UAAU,CAAC,EAAE,WAAW,QAAQ,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpK,UAAM,YAAY,UAAU,SAAS,wBAAwB,eAAe,cAAc,WAAW,GAAG,SAAS,WAAW,oBAAoB,CAAC;AACjJ,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AACpH,WAAO,MAAM,OAAO,qBAAqB,IAAI,oBAAoB,EAAE,eAAe,IAAI,GAAG,IAAI;AAG7F,WAAO,MAAM;AACb,WAAO,MAAM,WAAW,eAAe,IAAI,GAAG,IAAI;AAElD,WAAO,gBAAgB,OAAO,UAAU;AAAA;AAAA,MAEvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,SAAS,CAAC,EAAE;AAAA;AAAA,MAE7D,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEnG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEtG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEnG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,mCAAmC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA;AAAA,MAEtG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gCAAgC,SAAS,EAAE,iBAAiB,IAAI,EAAE;AAAA,MACnG,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,6CAA6C,SAAS,CAAC,EAAE;AAAA,MAC1F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,0CAA0C,SAAS,CAAC,EAAE;AAAA,MACvF,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gDAAgD,SAAS,CAAC,EAAE;AAAA,MAC7F,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,+CAA+C,SAAS,CAAC,EAAE;AAAA,IAC7F,CAAC;AAAA,EAEF,CAAC;AAEF,CAAC;",
  "names": []
}
