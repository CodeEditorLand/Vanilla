import s from"assert";import{VSBuffer as I}from"../../../../base/common/buffer.js";import"../../../../base/common/collections.js";import{dirname as U,joinPath as l}from"../../../../base/common/resources.js";import"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as $}from"../../../../base/test/common/utils.js";import{IEnvironmentService as h}from"../../../environment/common/environment.js";import{IFileService as D}from"../../../files/common/files.js";import{IUserDataProfilesService as q}from"../../../userDataProfile/common/userDataProfile.js";import"../../common/snippetsSync.js";import{IUserDataSyncStoreService as k,PREVIEW_DIR_NAME as p,SyncResource as T,SyncStatus as u}from"../../common/userDataSync.js";import{UserDataSyncClient as b,UserDataSyncTestServer as C}from"./userDataSyncClient.js";const w=`{

	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the
	// same ids are connected.
	"Print to console": {
	// Example:
	"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
			"description": "Log output to console",
	}

}`,S=`{

	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, Placeholders with the
	// same ids are connected.
	"Print to console": {
	// Example:
	"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
			"description": "Log output to console always",
	}

}`,r=`{
/*
	// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.
	// Example:
	"Print to console": {
	"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
			"description": "Log output to console"
	}
*/
"Div": {
	"prefix": "div",
		"body": [
			"<div>",
			"",
			"</div>"
		],
			"description": "New div"
	}
}`,y=`{
/*
	// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.
	// Example:
	"Print to console": {
	"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
			"description": "Log output to console"
	}
*/
"Div": {
	"prefix": "div",
		"body": [
			"<div>",
			"",
			"</div>"
		],
			"description": "New div changed"
	}
}`,P=`{
/*
	// Place your snippets for HTML here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.
	// Example:
	"Print to console": {
	"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
			"description": "Log output to console"
	}
*/
"Div": {
	"prefix": "div",
		"body": [
			"<div>",
			"",
			"</div>"
		],
			"description": "New div changed again"
	}
}`,R=`{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and {1: label}, { 2: another } for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}`;suite("SnippetsSync",()=>{const j=new C;let e,c,t;teardown(async()=>{await e.instantiationService.get(k).clear()});const M=$();setup(async()=>{e=M.add(new b(j)),await e.setUp(!0),t=e.getSynchronizer(T.Snippets),c=M.add(new b(j)),await c.setUp(!0)}),test("when snippets does not exist",async()=>{const i=e.instantiationService.get(D),a=e.instantiationService.get(q).defaultProfile.snippetsHome;s.deepStrictEqual(await t.getLastSyncUserData(),null);let o=await e.getResourceManifest();j.reset(),await t.sync(o),s.deepStrictEqual(j.requests,[{type:"GET",url:`${j.url}/v1/resource/${t.resource}/latest`,headers:{}}]),s.ok(!await i.exists(a));const f=await t.getLastSyncUserData(),g=await t.getRemoteUserData(null);s.deepStrictEqual(f.ref,g.ref),s.deepStrictEqual(f.syncData,g.syncData),s.strictEqual(f.syncData,null),o=await e.getResourceManifest(),j.reset(),await t.sync(o),s.deepStrictEqual(j.requests,[]),o=await e.getResourceManifest(),j.reset(),await t.sync(o),s.deepStrictEqual(j.requests,[])}),test("when snippet is created after first sync",async()=>{await t.sync(await e.getResourceManifest()),await n("html.json",r,e);let i=await t.getLastSyncUserData();const a=await e.getResourceManifest();j.reset(),await t.sync(a),s.deepStrictEqual(j.requests,[{type:"POST",url:`${j.url}/v1/resource/${t.resource}`,headers:{"If-Match":i?.ref}}]),i=await t.getLastSyncUserData();const o=await t.getRemoteUserData(null);s.deepStrictEqual(i.ref,o.ref),s.deepStrictEqual(i.syncData,o.syncData),s.deepStrictEqual(i.syncData.content,JSON.stringify({"html.json":r}))}),test("first time sync - outgoing to server (no snippets)",async()=>{await n("html.json",r,e),await n("typescript.json",w,e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const{content:i}=await e.read(t.resource);s.ok(i!==null);const a=v(i);s.deepStrictEqual(a,{"html.json":r,"typescript.json":w})}),test("first time sync - incoming from server (no snippets)",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("html.json",e);s.strictEqual(i,r);const a=await d("typescript.json",e);s.strictEqual(a,w)}),test("first time sync when snippets exists",async()=>{await n("html.json",r,c),await c.sync(),await n("typescript.json",w,e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("html.json",e);s.strictEqual(i,r);const a=await d("typescript.json",e);s.strictEqual(a,w);const{content:o}=await e.read(t.resource);s.ok(o!==null);const f=v(o);s.deepStrictEqual(f,{"html.json":r,"typescript.json":w})}),test("first time sync when snippets exists - has conflicts",async()=>{await n("html.json",r,c),await c.sync(),await n("html.json",y,e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.HasConflicts);const i=e.instantiationService.get(h),a=l(i.userDataSyncHome,t.resource,p,"html.json");m(t.conflicts.conflicts,[a])}),test("first time sync when snippets exists - has conflicts and accept conflicts",async()=>{await n("html.json",r,c),await c.sync(),await n("html.json",y,e),await t.sync(await e.getResourceManifest());const i=t.conflicts.conflicts;await t.accept(i[0].previewResource,r),await t.apply(!1),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const a=await d("html.json",e);s.strictEqual(a,r);const{content:o}=await e.read(t.resource);s.ok(o!==null);const f=v(o);s.deepStrictEqual(f,{"html.json":r})}),test("first time sync when snippets exists - has multiple conflicts",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await n("typescript.json",S,e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.HasConflicts);const i=e.instantiationService.get(h),a=l(i.userDataSyncHome,t.resource,p,"html.json"),o=l(i.userDataSyncHome,t.resource,p,"typescript.json");m(t.conflicts.conflicts,[a,o])}),test("first time sync when snippets exists - has multiple conflicts and accept one conflict",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await n("typescript.json",S,e),await t.sync(await e.getResourceManifest());let i=t.conflicts.conflicts;await t.accept(i[0].previewResource,y),i=t.conflicts.conflicts,s.strictEqual(t.status,u.HasConflicts);const a=e.instantiationService.get(h),o=l(a.userDataSyncHome,t.resource,p,"typescript.json");m(t.conflicts.conflicts,[o])}),test("first time sync when snippets exists - has multiple conflicts and accept all conflicts",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await n("typescript.json",S,e),await t.sync(await e.getResourceManifest());const i=t.conflicts.conflicts;await t.accept(i[0].previewResource,y),await t.accept(i[1].previewResource,w),await t.apply(!1),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const a=await d("html.json",e);s.strictEqual(a,y);const o=await d("typescript.json",e);s.strictEqual(o,w);const{content:f}=await e.read(t.resource);s.ok(f!==null);const g=v(f);s.deepStrictEqual(g,{"html.json":y,"typescript.json":w})}),test("sync adding a snippet",async()=>{await n("html.json",r,e),await t.sync(await e.getResourceManifest()),await n("typescript.json",w,e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("html.json",e);s.strictEqual(i,r);const a=await d("typescript.json",e);s.strictEqual(a,w);const{content:o}=await e.read(t.resource);s.ok(o!==null);const f=v(o);s.deepStrictEqual(f,{"html.json":r,"typescript.json":w})}),test("sync adding a snippet - accept",async()=>{await n("html.json",r,c),await c.sync(),await t.sync(await e.getResourceManifest()),await n("typescript.json",w,c),await c.sync(),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("html.json",e);s.strictEqual(i,r);const a=await d("typescript.json",e);s.strictEqual(a,w)}),test("sync updating a snippet",async()=>{await n("html.json",r,e),await t.sync(await e.getResourceManifest()),await n("html.json",y,e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("html.json",e);s.strictEqual(i,y);const{content:a}=await e.read(t.resource);s.ok(a!==null);const o=v(a);s.deepStrictEqual(o,{"html.json":y})}),test("sync updating a snippet - accept",async()=>{await n("html.json",r,c),await c.sync(),await t.sync(await e.getResourceManifest()),await n("html.json",y,c),await c.sync(),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("html.json",e);s.strictEqual(i,y)}),test("sync updating a snippet - conflict",async()=>{await n("html.json",r,c),await c.sync(),await t.sync(await e.getResourceManifest()),await n("html.json",y,c),await c.sync(),await n("html.json",P,e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.HasConflicts);const i=e.instantiationService.get(h),a=l(i.userDataSyncHome,t.resource,p,"html.json");m(t.conflicts.conflicts,[a])}),test("sync updating a snippet - resolve conflict",async()=>{await n("html.json",r,c),await c.sync(),await t.sync(await e.getResourceManifest()),await n("html.json",y,c),await c.sync(),await n("html.json",P,e),await t.sync(await e.getResourceManifest()),await t.accept(t.conflicts.conflicts[0].previewResource,y),await t.apply(!1),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("html.json",e);s.strictEqual(i,y);const{content:a}=await e.read(t.resource);s.ok(a!==null);const o=v(a);s.deepStrictEqual(o,{"html.json":y})}),test("sync removing a snippet",async()=>{await n("html.json",r,e),await n("typescript.json",w,e),await t.sync(await e.getResourceManifest()),await E("html.json",e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("typescript.json",e);s.strictEqual(i,w);const a=await d("html.json",e);s.strictEqual(a,null);const{content:o}=await e.read(t.resource);s.ok(o!==null);const f=v(o);s.deepStrictEqual(f,{"typescript.json":w})}),test("sync removing a snippet - accept",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await t.sync(await e.getResourceManifest()),await E("html.json",c),await c.sync(),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("typescript.json",e);s.strictEqual(i,w);const a=await d("html.json",e);s.strictEqual(a,null)}),test("sync removing a snippet locally and updating it remotely",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await t.sync(await e.getResourceManifest()),await n("html.json",y,c),await c.sync(),await E("html.json",e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("typescript.json",e);s.strictEqual(i,w);const a=await d("html.json",e);s.strictEqual(a,y)}),test("sync removing a snippet - conflict",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await t.sync(await e.getResourceManifest()),await E("html.json",c),await c.sync(),await n("html.json",y,e),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.HasConflicts);const i=e.instantiationService.get(h),a=l(i.userDataSyncHome,t.resource,p,"html.json");m(t.conflicts.conflicts,[a])}),test("sync removing a snippet - resolve conflict",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await t.sync(await e.getResourceManifest()),await E("html.json",c),await c.sync(),await n("html.json",y,e),await t.sync(await e.getResourceManifest()),await t.accept(t.conflicts.conflicts[0].previewResource,P),await t.apply(!1),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("typescript.json",e);s.strictEqual(i,w);const a=await d("html.json",e);s.strictEqual(a,P);const{content:o}=await e.read(t.resource);s.ok(o!==null);const f=v(o);s.deepStrictEqual(f,{"typescript.json":w,"html.json":P})}),test("sync removing a snippet - resolve conflict by removing",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await t.sync(await e.getResourceManifest()),await E("html.json",c),await c.sync(),await n("html.json",y,e),await t.sync(await e.getResourceManifest()),await t.accept(t.conflicts.conflicts[0].previewResource,null),await t.apply(!1),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("typescript.json",e);s.strictEqual(i,w);const a=await d("html.json",e);s.strictEqual(a,null);const{content:o}=await e.read(t.resource);s.ok(o!==null);const f=v(o);s.deepStrictEqual(f,{"typescript.json":w})}),test("sync global and language snippet",async()=>{await n("global.code-snippets",R,c),await n("html.json",r,c),await c.sync(),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("html.json",e);s.strictEqual(i,r);const a=await d("global.code-snippets",e);s.strictEqual(a,R);const{content:o}=await e.read(t.resource);s.ok(o!==null);const f=v(o);s.deepStrictEqual(f,{"html.json":r,"global.code-snippets":R})}),test("sync should ignore non snippets",async()=>{await n("global.code-snippets",R,c),await n("html.html",r,c),await n("typescript.json",w,c),await c.sync(),await t.sync(await e.getResourceManifest()),s.strictEqual(t.status,u.Idle),s.deepStrictEqual(t.conflicts.conflicts,[]);const i=await d("typescript.json",e);s.strictEqual(i,w);const a=await d("global.code-snippets",e);s.strictEqual(a,R);const o=await d("html.html",e);s.strictEqual(o,null);const{content:f}=await e.read(t.resource);s.ok(f!==null);const g=v(f);s.deepStrictEqual(g,{"typescript.json":w,"global.code-snippets":R})}),test("previews are reset after all conflicts resolved",async()=>{await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await t.sync(await e.getResourceManifest());const i=t.conflicts.conflicts;await t.accept(i[0].previewResource,y),await t.apply(!1);const a=e.instantiationService.get(D);s.ok(!await a.exists(U(i[0].previewResource)))}),test("merge when there are multiple snippets and only one snippet is merged",async()=>{const i=e.instantiationService.get(h);await n("html.json",y,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.merge(a.resourcePreviews[0].localResource),s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[])}),test("merge when there are multiple snippets and all snippets are merged",async()=>{const i=e.instantiationService.get(h);await n("html.json",y,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.merge(a.resourcePreviews[0].localResource),a=await t.merge(a.resourcePreviews[1].localResource),s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[])}),test("merge when there are multiple snippets and all snippets are merged and applied",async()=>{const i=e.instantiationService.get(h);await n("html.json",y,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.merge(a.resourcePreviews[0].localResource),a=await t.merge(a.resourcePreviews[1].localResource),a=await t.apply(!1),s.strictEqual(t.status,u.Idle),s.strictEqual(a,null),s.deepStrictEqual(t.conflicts.conflicts,[])}),test("merge when there are multiple snippets and one snippet has no changes and one snippet is merged",async()=>{const i=e.instantiationService.get(h);await n("html.json",r,c),await c.sync(),await n("html.json",r,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"typescript.json"),l(i.userDataSyncHome,t.resource,p,"html.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.merge(a.resourcePreviews[0].localResource),s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"typescript.json"),l(i.userDataSyncHome,t.resource,p,"html.json")]),s.deepStrictEqual(t.conflicts.conflicts,[])}),test("merge when there are multiple snippets and one snippet has no changes and one snippet is merged and applied",async()=>{const i=e.instantiationService.get(h);await n("html.json",r,c),await c.sync(),await n("html.json",r,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"typescript.json"),l(i.userDataSyncHome,t.resource,p,"html.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.merge(a.resourcePreviews[0].localResource),a=await t.apply(!1),s.strictEqual(t.status,u.Idle),s.strictEqual(a,null),s.deepStrictEqual(t.conflicts.conflicts,[])}),test("merge when there are multiple snippets with conflicts and only one snippet is merged",async()=>{const i=e.instantiationService.get(h);await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.merge(a.resourcePreviews[0].previewResource),s.strictEqual(t.status,u.HasConflicts),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),m(t.conflicts.conflicts,[l(i.userDataSyncHome,t.resource,p,"html.json")])}),test("merge when there are multiple snippets with conflicts and all snippets are merged",async()=>{const i=e.instantiationService.get(h);await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.merge(a.resourcePreviews[0].previewResource),a=await t.merge(a.resourcePreviews[1].previewResource),s.strictEqual(t.status,u.HasConflicts),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),m(t.conflicts.conflicts,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")])}),test("accept when there are multiple snippets with conflicts and only one snippet is accepted",async()=>{const i=e.instantiationService.get(h);await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.accept(a.resourcePreviews[0].previewResource,y),s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[])}),test("accept when there are multiple snippets with conflicts and all snippets are accepted",async()=>{const i=e.instantiationService.get(h);await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.accept(a.resourcePreviews[0].previewResource,y),a=await t.accept(a.resourcePreviews[1].previewResource,S),s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[])}),test("accept when there are multiple snippets with conflicts and all snippets are accepted and applied",async()=>{const i=e.instantiationService.get(h);await n("html.json",r,c),await n("typescript.json",w,c),await c.sync(),await n("html.json",y,e),await n("typescript.json",S,e);let a=await t.preview(await e.getResourceManifest(),{});s.strictEqual(t.status,u.Syncing),m(a.resourcePreviews,[l(i.userDataSyncHome,t.resource,p,"html.json"),l(i.userDataSyncHome,t.resource,p,"typescript.json")]),s.deepStrictEqual(t.conflicts.conflicts,[]),a=await t.accept(a.resourcePreviews[0].previewResource,y),a=await t.accept(a.resourcePreviews[1].previewResource,S),a=await t.apply(!1),s.strictEqual(t.status,u.Idle),s.strictEqual(a,null),s.deepStrictEqual(t.conflicts.conflicts,[])}),test("sync profile snippets",async()=>{const i=M.add(new b(j));await i.setUp(!0);const a=await i.instantiationService.get(q).createNamedProfile("profile1");await n("html.json",r,i,a),await i.sync(),await e.sync();const o=e.instantiationService.get(q).profiles.find(g=>g.id===a.id),f=await d("html.json",e,o);s.strictEqual(f,r)});function v(i){const a=JSON.parse(i);return JSON.parse(a.content)}async function n(i,a,o,f){const g=o.instantiationService.get(D),H=o.instantiationService.get(q),x=l((f??H.defaultProfile).snippetsHome,i);await g.writeFile(x,I.fromString(a))}async function E(i,a){const o=a.instantiationService.get(D),f=a.instantiationService.get(q),g=l(f.defaultProfile.snippetsHome,i);await o.del(g)}async function d(i,a,o){const f=a.instantiationService.get(D),g=a.instantiationService.get(q),H=l((o??g.defaultProfile).snippetsHome,i);return await f.exists(H)?(await f.readFile(H)).value.toString():null}function m(i,a){s.deepStrictEqual(i.map(({previewResource:o})=>o.toString()),a.map(o=>o.toString()))}});
