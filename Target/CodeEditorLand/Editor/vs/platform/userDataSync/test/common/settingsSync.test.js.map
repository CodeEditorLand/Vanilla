{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/settingsSync.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IConfigurationService } from '../../../configuration/common/configuration.js';\nimport { ConfigurationScope, Extensions, IConfigurationRegistry } from '../../../configuration/common/configurationRegistry.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { Registry } from '../../../registry/common/platform.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { ISettingsSyncContent, parseSettingsSyncContent, SettingsSynchroniser } from '../../common/settingsSync.js';\nimport { ISyncData, IUserDataSyncStoreService, SyncResource, SyncStatus, UserDataSyncError, UserDataSyncErrorCode } from '../../common/userDataSync.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\n\nsuite('SettingsSync - Auto', () => {\n\n\tconst server = new UserDataSyncTestServer();\n\tlet client: UserDataSyncClient;\n\tlet testObject: SettingsSynchroniser;\n\n\tteardown(async () => {\n\t\tawait client.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\t\t\t'id': 'settingsSync',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'settingsSync.machine': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'scope': ConfigurationScope.MACHINE\n\t\t\t\t},\n\t\t\t\t'settingsSync.machineOverridable': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'scope': ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tclient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client.setUp(true);\n\t\ttestObject = client.getSynchronizer(SyncResource.Settings) as SettingsSynchroniser;\n\t});\n\n\ttest('when settings file does not exist', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst settingResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource;\n\n\t\tassert.deepStrictEqual(await testObject.getLastSyncUserData(), null);\n\t\tlet manifest = await client.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'GET', url: `${server.url}/v1/resource/${testObject.resource}/latest`, headers: {} },\n\t\t]);\n\t\tassert.ok(!await fileService.exists(settingResource));\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.strictEqual(lastSyncUserData!.syncData, null);\n\n\t\tmanifest = await client.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\n\t\tmanifest = await client.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\t}));\n\n\ttest('when settings file is empty and remote has no changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst settingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource;\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString(''));\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.strictEqual(parseSettingsSyncContent(lastSyncUserData!.syncData!.content)?.settings, '{}');\n\t\tassert.strictEqual(parseSettingsSyncContent(remoteUserData.syncData!.content)?.settings, '{}');\n\t\tassert.strictEqual((await fileService.readFile(settingsResource)).value.toString(), '');\n\t}));\n\n\ttest('when settings file is empty and remote has changes', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tconst content =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\t\"workbench.tree.indent\": 20,\n\t\"workbench.colorCustomizations\": {\n\t\t\"editorLineNumber.activeForeground\": \"#ff0000\",\n\t\t\"[GitHub Sharp]\": {\n\t\t\t\"statusBarItem.remoteBackground\": \"#24292E\",\n\t\t\t\"editorPane.background\": \"#f3f1f11a\"\n\t\t}\n\t},\n\n\t\"gitBranch.base\": \"remote-repo/master\",\n\n\t// Experimental\n\t\"workbench.view.experimental.allowMovingToNewContainer\": true,\n}`;\n\t\tawait client2.instantiationService.get(IFileService).writeFile(client2.instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource, VSBuffer.fromString(content));\n\t\tawait client2.sync();\n\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst settingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource;\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString(''));\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.strictEqual(parseSettingsSyncContent(lastSyncUserData!.syncData!.content)?.settings, content);\n\t\tassert.strictEqual(parseSettingsSyncContent(remoteUserData.syncData!.content)?.settings, content);\n\t\tassert.strictEqual((await fileService.readFile(settingsResource)).value.toString(), content);\n\t}));\n\n\ttest('when settings file is created after first sync', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\n\t\tconst settingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.settingsResource;\n\t\tawait testObject.sync(await client.getResourceManifest());\n\t\tawait fileService.createFile(settingsResource, VSBuffer.fromString('{}'));\n\n\t\tlet lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst manifest = await client.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'POST', url: `${server.url}/v1/resource/${testObject.resource}`, headers: { 'If-Match': lastSyncUserData?.ref } },\n\t\t]);\n\n\t\tlastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.strictEqual(parseSettingsSyncContent(lastSyncUserData!.syncData!.content)?.settings, '{}');\n\t}));\n\n\ttest('sync for first time to the server', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst expected =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\t\"workbench.tree.indent\": 20,\n\t\"workbench.colorCustomizations\": {\n\t\t\"editorLineNumber.activeForeground\": \"#ff0000\",\n\t\t\"[GitHub Sharp]\": {\n\t\t\t\"statusBarItem.remoteBackground\": \"#24292E\",\n\t\t\t\"editorPane.background\": \"#f3f1f11a\"\n\t\t}\n\t},\n\n\t\"gitBranch.base\": \"remote-repo/master\",\n\n\t// Experimental\n\t\"workbench.view.experimental.allowMovingToNewContainer\": true,\n}`;\n\n\t\tawait updateSettings(expected, client);\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, expected);\n\t}));\n\n\ttest('do not sync machine settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst settingsContent =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Machine\n\t\"settingsSync.machine\": \"someValue\",\n\t\"settingsSync.machineOverridable\": \"someValue\"\n}`;\n\t\tawait updateSettings(settingsContent, client);\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, `{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\"\n}`);\n\t}));\n\n\ttest('do not sync machine settings when spread across file', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst settingsContent =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"settingsSync.machine\": \"someValue\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Machine\n\t\"settingsSync.machineOverridable\": \"someValue\"\n}`;\n\t\tawait updateSettings(settingsContent, client);\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, `{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\"\n}`);\n\t}));\n\n\ttest('do not sync machine settings when spread across file - 2', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst settingsContent =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"settingsSync.machine\": \"someValue\",\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Machine\n\t\"settingsSync.machineOverridable\": \"someValue\",\n\t\"files.simpleDialog.enable\": true,\n}`;\n\t\tawait updateSettings(settingsContent, client);\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, `{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\t\"files.simpleDialog.enable\": true,\n}`);\n\t}));\n\n\ttest('sync when all settings are machine settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst settingsContent =\n\t\t\t`{\n\t// Machine\n\t\"settingsSync.machine\": \"someValue\",\n\t\"settingsSync.machineOverridable\": \"someValue\"\n}`;\n\t\tawait updateSettings(settingsContent, client);\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, `{\n}`);\n\t}));\n\n\ttest('sync when all settings are machine settings with trailing comma', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst settingsContent =\n\t\t\t`{\n\t// Machine\n\t\"settingsSync.machine\": \"someValue\",\n\t\"settingsSync.machineOverridable\": \"someValue\",\n}`;\n\t\tawait updateSettings(settingsContent, client);\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, `{\n\t,\n}`);\n\t}));\n\n\ttest('local change event is triggered when settings are changed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst content =\n\t\t\t`{\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n}`;\n\n\t\tawait updateSettings(content, client);\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeLocal);\n\t\tawait updateSettings(`{\n\t\"files.autoSave\": \"off\",\n\t\"files.simpleDialog.enable\": true,\n}`, client);\n\t\tawait promise;\n\t}));\n\n\ttest('do not sync ignored settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst settingsContent =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Editor\n\t\"editor.fontFamily\": \"Fira Code\",\n\n\t// Terminal\n\t\"terminal.integrated.shell.osx\": \"some path\",\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Ignored\n\t\"settingsSync.ignoredSettings\": [\n\t\t\"editor.fontFamily\",\n\t\t\"terminal.integrated.shell.osx\"\n\t]\n}`;\n\t\tawait updateSettings(settingsContent, client);\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, `{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Ignored\n\t\"settingsSync.ignoredSettings\": [\n\t\t\"editor.fontFamily\",\n\t\t\"terminal.integrated.shell.osx\"\n\t]\n}`);\n\t}));\n\n\ttest('do not sync ignored and machine settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst settingsContent =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Editor\n\t\"editor.fontFamily\": \"Fira Code\",\n\n\t// Terminal\n\t\"terminal.integrated.shell.osx\": \"some path\",\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Ignored\n\t\"settingsSync.ignoredSettings\": [\n\t\t\"editor.fontFamily\",\n\t\t\"terminal.integrated.shell.osx\"\n\t],\n\n\t// Machine\n\t\"settingsSync.machine\": \"someValue\",\n}`;\n\t\tawait updateSettings(settingsContent, client);\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, `{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Ignored\n\t\"settingsSync.ignoredSettings\": [\n\t\t\"editor.fontFamily\",\n\t\t\"terminal.integrated.shell.osx\"\n\t],\n}`);\n\t}));\n\n\ttest('sync throws invalid content error', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst expected =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\t\"workbench.tree.indent\": 20,\n\t\"workbench.colorCustomizations\": {\n\t\t\"editorLineNumber.activeForeground\": \"#ff0000\",\n\t\t\"[GitHub Sharp]\": {\n\t\t\t\"statusBarItem.remoteBackground\": \"#24292E\",\n\t\t\t\"editorPane.background\": \"#f3f1f11a\"\n\t\t}\n\t}\n\n\t\"gitBranch.base\": \"remote-repo/master\",\n\n\t// Experimental\n\t\"workbench.view.experimental.allowMovingToNewContainer\": true,\n}`;\n\n\t\tawait updateSettings(expected, client);\n\n\t\ttry {\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.fail('should fail with invalid content error');\n\t\t} catch (e) {\n\t\t\tassert.ok(e instanceof UserDataSyncError);\n\t\t\tassert.deepStrictEqual((<UserDataSyncError>e).code, UserDataSyncErrorCode.LocalInvalidContent);\n\t\t}\n\t}));\n\n\ttest('sync throws invalid content error - content is an array', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait updateSettings('[]', client);\n\t\ttry {\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.fail('should fail with invalid content error');\n\t\t} catch (e) {\n\t\t\tassert.ok(e instanceof UserDataSyncError);\n\t\t\tassert.deepStrictEqual((<UserDataSyncError>e).code, UserDataSyncErrorCode.LocalInvalidContent);\n\t\t}\n\t}));\n\n\ttest('sync when there are conflicts', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tawait updateSettings(JSON.stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t\t'settingsSync.ignoredSettings': ['a']\n\t\t}), client2);\n\t\tawait client2.sync();\n\n\t\tawait updateSettings(JSON.stringify({\n\t\t\t'a': 2,\n\t\t\t'b': 1,\n\t\t\t'settingsSync.ignoredSettings': ['a']\n\t\t}), client);\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.HasConflicts);\n\t\tassert.strictEqual(testObject.conflicts.conflicts[0].localResource.toString(), testObject.localResource.toString());\n\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst mergeContent = (await fileService.readFile(testObject.conflicts.conflicts[0].previewResource)).value.toString();\n\t\tassert.strictEqual(mergeContent, '');\n\t}));\n\n\ttest('sync profile settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tconst profile = await client2.instantiationService.get(IUserDataProfilesService).createNamedProfile('profile1');\n\t\tawait updateSettings(JSON.stringify({\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t}), client2, profile);\n\t\tawait client2.sync();\n\n\t\tawait client.sync();\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\n\t\tconst syncedProfile = client.instantiationService.get(IUserDataProfilesService).profiles.find(p => p.id === profile.id)!;\n\t\tconst content = (await client.instantiationService.get(IFileService).readFile(syncedProfile.settingsResource)).value.toString();\n\t\tassert.deepStrictEqual(JSON.parse(content), {\n\t\t\t'a': 1,\n\t\t\t'b': 2,\n\t\t});\n\t}));\n\n});\n\nsuite('SettingsSync - Manual', () => {\n\n\tconst server = new UserDataSyncTestServer();\n\tlet client: UserDataSyncClient;\n\tlet testObject: SettingsSynchroniser;\n\n\tteardown(async () => {\n\t\tawait client.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tclient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client.setUp(true);\n\t\ttestObject = client.getSynchronizer(SyncResource.Settings) as SettingsSynchroniser;\n\t});\n\n\ttest('do not sync ignored settings', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst settingsContent =\n\t\t\t`{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Editor\n\t\"editor.fontFamily\": \"Fira Code\",\n\n\t// Terminal\n\t\"terminal.integrated.shell.osx\": \"some path\",\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Ignored\n\t\"settingsSync.ignoredSettings\": [\n\t\t\"editor.fontFamily\",\n\t\t\"terminal.integrated.shell.osx\"\n\t]\n}`;\n\t\tawait updateSettings(settingsContent, client);\n\n\t\tlet preview = await testObject.preview(await client.getResourceManifest(), {});\n\t\tassert.strictEqual(testObject.status, SyncStatus.Syncing);\n\t\tpreview = await testObject.accept(preview!.resourcePreviews[0].previewResource);\n\t\tpreview = await testObject.apply(false);\n\n\t\tconst { content } = await client.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseSettings(content);\n\t\tassert.deepStrictEqual(actual, `{\n\t// Always\n\t\"files.autoSave\": \"afterDelay\",\n\t\"files.simpleDialog.enable\": true,\n\n\t// Workbench\n\t\"workbench.colorTheme\": \"GitHub Sharp\",\n\n\t// Ignored\n\t\"settingsSync.ignoredSettings\": [\n\t\t\"editor.fontFamily\",\n\t\t\"terminal.integrated.shell.osx\"\n\t]\n}`);\n\t}));\n\n});\n\nfunction parseSettings(content: string): string {\n\tconst syncData: ISyncData = JSON.parse(content);\n\tconst settingsSyncContent: ISettingsSyncContent = JSON.parse(syncData.content);\n\treturn settingsSyncContent.settings;\n}\n\nasync function updateSettings(content: string, client: UserDataSyncClient, profile?: IUserDataProfile): Promise<void> {\n\tawait client.instantiationService.get(IFileService).writeFile((profile ?? client.instantiationService.get(IUserDataProfilesService).defaultProfile).settingsResource, VSBuffer.fromString(content));\n\tawait client.instantiationService.get(IConfigurationService).reloadConfiguration();\n}\n"],
  "mappings": "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",
  "names": []
}
