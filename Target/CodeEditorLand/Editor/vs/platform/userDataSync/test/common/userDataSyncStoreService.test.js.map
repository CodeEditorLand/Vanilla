{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/userDataSyncStoreService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { timeout } from '../../../../base/common/async.js';\nimport { newWriteableBufferStream } from '../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { IProductService } from '../../../product/common/productService.js';\nimport { IRequestService } from '../../../request/common/request.js';\nimport { IUserDataSyncStoreService, SyncResource, UserDataSyncErrorCode, UserDataSyncStoreError } from '../../common/userDataSync.js';\nimport { RequestsSession, UserDataSyncStoreService } from '../../common/userDataSyncStoreService.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\n\nsuite('UserDataSyncStoreService', () => {\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('test read manifest for the first time', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\t\tconst productService = client.instantiationService.get(IProductService);\n\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Client-Name'], `${productService.applicationName}${isWeb ? '-web' : ''}`);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Client-Version'], productService.version);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test read manifest for the second time when session is not yet created', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test session id header is not set in the first manifest request after session is created', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test session id header is set from the second manifest request after session is created', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test headers are send for write request', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.manifest(null);\n\n\t\ttarget.reset();\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test headers are send for read request', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.manifest(null);\n\n\t\ttarget.reset();\n\t\tawait testObject.readResource(SyncResource.Settings, null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test headers are reset after session is cleared ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.clear();\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test old headers are sent after session is changed on server ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tconst userSessionId = target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'];\n\t\tawait target.clear();\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.writeResource(SyncResource.Settings, 'some content', null);\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], userSessionId);\n\t});\n\n\ttest('test old headers are reset from second request after session is changed on server ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tconst userSessionId = target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'];\n\t\tawait target.clear();\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.writeResource(SyncResource.Settings, 'some content', null);\n\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], userSessionId);\n\t});\n\n\ttest('test old headers are sent after session is cleared from another server ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tconst userSessionId = target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'];\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.clear();\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], userSessionId);\n\t});\n\n\ttest('test headers are reset after session is cleared from another server ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.clear();\n\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test headers are reset after session is cleared from another server - started syncing again', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tconst userSessionId = target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'];\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.clear();\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], userSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test rate limit on server with retry after', async () => {\n\t\tconst target = new UserDataSyncTestServer(1, 1);\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeDonotMakeRequestsUntil);\n\t\ttry {\n\t\t\tawait testObject.manifest(null);\n\t\t\tassert.fail('should fail');\n\t\t} catch (e) {\n\t\t\tassert.ok(e instanceof UserDataSyncStoreError);\n\t\t\tassert.deepStrictEqual((<UserDataSyncStoreError>e).code, UserDataSyncErrorCode.TooManyRequestsAndRetryAfter);\n\t\t\tawait promise;\n\t\t\tassert.ok(!!testObject.donotMakeRequestsUntil);\n\t\t}\n\t});\n\n\ttest('test donotMakeRequestsUntil is reset after retry time is finished', async () => {\n\t\treturn runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(new UserDataSyncTestServer(1, 0.25)));\n\t\t\tawait client.setUp();\n\t\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\t\tawait testObject.manifest(null);\n\t\t\ttry {\n\t\t\t\tawait testObject.manifest(null);\n\t\t\t\tassert.fail('should fail');\n\t\t\t} catch (e) { }\n\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeDonotMakeRequestsUntil);\n\t\t\tawait timeout(300);\n\t\t\tawait promise;\n\t\t\tassert.ok(!testObject.donotMakeRequestsUntil);\n\t\t});\n\t});\n\n\ttest('test donotMakeRequestsUntil is retrieved', async () => {\n\t\tconst client = disposableStore.add(new UserDataSyncClient(new UserDataSyncTestServer(1, 1)));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\ttry {\n\t\t\tawait testObject.manifest(null);\n\t\t} catch (e) { }\n\n\t\tconst target = disposableStore.add(client.instantiationService.createInstance(UserDataSyncStoreService));\n\t\tassert.strictEqual(target.donotMakeRequestsUntil?.getTime(), testObject.donotMakeRequestsUntil?.getTime());\n\t});\n\n\ttest('test donotMakeRequestsUntil is checked and reset after retreived', async () => {\n\t\treturn runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(new UserDataSyncTestServer(1, 0.25)));\n\t\t\tawait client.setUp();\n\t\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\t\tawait testObject.manifest(null);\n\t\t\ttry {\n\t\t\t\tawait testObject.manifest(null);\n\t\t\t\tassert.fail('should fail');\n\t\t\t} catch (e) { }\n\n\t\t\tawait timeout(300);\n\t\t\tconst target = disposableStore.add(client.instantiationService.createInstance(UserDataSyncStoreService));\n\t\t\tassert.ok(!target.donotMakeRequestsUntil);\n\t\t});\n\t});\n\n\ttest('test read resource request handles 304', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait client.sync();\n\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\t\tconst expected = await testObject.readResource(SyncResource.Settings, null);\n\t\tconst actual = await testObject.readResource(SyncResource.Settings, expected);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n});\n\nsuite('UserDataSyncRequestsSession', () => {\n\n\tconst requestService: IRequestService = {\n\t\t_serviceBrand: undefined,\n\t\tasync request() { return { res: { headers: {} }, stream: newWriteableBufferStream() }; },\n\t\tasync resolveProxy() { return undefined; },\n\t\tasync lookupAuthorization() { return undefined; },\n\t\tasync lookupKerberosAuthorization() { return undefined; },\n\t\tasync loadCertificates() { return []; }\n\t};\n\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('too many requests are thrown when limit exceeded', async () => {\n\t\tconst testObject = new RequestsSession(1, 500, requestService, new NullLogService());\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\n\t\ttry {\n\t\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t\t} catch (error) {\n\t\t\tassert.ok(error instanceof UserDataSyncStoreError);\n\t\t\tassert.strictEqual((<UserDataSyncStoreError>error).code, UserDataSyncErrorCode.LocalTooManyRequests);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with limit exceeded');\n\t});\n\n\ttest('requests are handled after session is expired', () => runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\tconst testObject = new RequestsSession(1, 100, requestService, new NullLogService());\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t\tawait timeout(125);\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t}));\n\n\ttest('too many requests are thrown after session is expired', () => runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\tconst testObject = new RequestsSession(1, 100, requestService, new NullLogService());\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t\tawait timeout(125);\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\n\t\ttry {\n\t\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t\t} catch (error) {\n\t\t\tassert.ok(error instanceof UserDataSyncStoreError);\n\t\t\tassert.strictEqual((<UserDataSyncStoreError>error).code, UserDataSyncErrorCode.LocalTooManyRequests);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with limit exceeded');\n\t}));\n\n});\n"],
  "mappings": "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",
  "names": []
}
