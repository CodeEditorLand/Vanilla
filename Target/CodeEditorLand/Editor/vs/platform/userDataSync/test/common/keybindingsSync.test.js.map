{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/keybindingsSync.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { ILogService } from '../../../log/common/log.js';\nimport { IUserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { getKeybindingsContentFromSyncContent, KeybindingsSynchroniser } from '../../common/keybindingsSync.js';\nimport { IUserDataSyncStoreService, SyncResource, UserDataSyncError, UserDataSyncErrorCode } from '../../common/userDataSync.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\n\nsuite('KeybindingsSync', () => {\n\n\tconst server = new UserDataSyncTestServer();\n\tlet client: UserDataSyncClient;\n\n\tlet testObject: KeybindingsSynchroniser;\n\n\tteardown(async () => {\n\t\tawait client.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tclient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client.setUp(true);\n\t\ttestObject = client.getSynchronizer(SyncResource.Keybindings) as KeybindingsSynchroniser;\n\t});\n\n\n\ttest('when keybindings file does not exist', async () => {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst keybindingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource;\n\n\t\tassert.deepStrictEqual(await testObject.getLastSyncUserData(), null);\n\t\tlet manifest = await client.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'GET', url: `${server.url}/v1/resource/${testObject.resource}/latest`, headers: {} },\n\t\t]);\n\t\tassert.ok(!await fileService.exists(keybindingsResource));\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.strictEqual(lastSyncUserData!.syncData, null);\n\n\t\tmanifest = await client.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\n\t\tmanifest = await client.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\t});\n\n\ttest('when keybindings file is empty and remote has no changes', async () => {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst keybindingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource;\n\t\tawait fileService.writeFile(keybindingsResource, VSBuffer.fromString(''));\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(lastSyncUserData!.syncData!.content, true, client.instantiationService.get(ILogService)), '[]');\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(remoteUserData.syncData!.content, true, client.instantiationService.get(ILogService)), '[]');\n\t\tassert.strictEqual((await fileService.readFile(keybindingsResource)).value.toString(), '');\n\t});\n\n\ttest('when keybindings file is empty and remote has changes', async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tconst content = JSON.stringify([\n\t\t\t{\n\t\t\t\t'key': 'shift+cmd+w',\n\t\t\t\t'command': 'workbench.action.closeAllEditors',\n\t\t\t}\n\t\t]);\n\t\tawait client2.instantiationService.get(IFileService).writeFile(client2.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource, VSBuffer.fromString(content));\n\t\tawait client2.sync();\n\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst keybindingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource;\n\t\tawait fileService.writeFile(keybindingsResource, VSBuffer.fromString(''));\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(lastSyncUserData!.syncData!.content, true, client.instantiationService.get(ILogService)), content);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(remoteUserData.syncData!.content, true, client.instantiationService.get(ILogService)), content);\n\t\tassert.strictEqual((await fileService.readFile(keybindingsResource)).value.toString(), content);\n\t});\n\n\ttest('when keybindings file is empty with comment and remote has no changes', async () => {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst keybindingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource;\n\t\tconst expectedContent = '// Empty Keybindings';\n\t\tawait fileService.writeFile(keybindingsResource, VSBuffer.fromString(expectedContent));\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(lastSyncUserData!.syncData!.content, true, client.instantiationService.get(ILogService)), expectedContent);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(remoteUserData.syncData!.content, true, client.instantiationService.get(ILogService)), expectedContent);\n\t\tassert.strictEqual((await fileService.readFile(keybindingsResource)).value.toString(), expectedContent);\n\t});\n\n\ttest('when keybindings file is empty and remote has keybindings', async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tconst content = JSON.stringify([\n\t\t\t{\n\t\t\t\t'key': 'shift+cmd+w',\n\t\t\t\t'command': 'workbench.action.closeAllEditors',\n\t\t\t}\n\t\t]);\n\t\tawait client2.instantiationService.get(IFileService).writeFile(client2.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource, VSBuffer.fromString(content));\n\t\tawait client2.sync();\n\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst keybindingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource;\n\t\tawait fileService.writeFile(keybindingsResource, VSBuffer.fromString('// Empty Keybindings'));\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(lastSyncUserData!.syncData!.content, true, client.instantiationService.get(ILogService)), content);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(remoteUserData.syncData!.content, true, client.instantiationService.get(ILogService)), content);\n\t\tassert.strictEqual((await fileService.readFile(keybindingsResource)).value.toString(), content);\n\t});\n\n\ttest('when keybindings file is empty and remote has empty array', async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tconst content =\n\t\t\t`// Place your key bindings in this file to override the defaults\n[\n]`;\n\t\tawait client2.instantiationService.get(IFileService).writeFile(client2.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource, VSBuffer.fromString(content));\n\t\tawait client2.sync();\n\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst keybindingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource;\n\t\tconst expectedLocalContent = '// Empty Keybindings';\n\t\tawait fileService.writeFile(keybindingsResource, VSBuffer.fromString(expectedLocalContent));\n\n\t\tawait testObject.sync(await client.getResourceManifest());\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(lastSyncUserData!.syncData!.content, true, client.instantiationService.get(ILogService)), content);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(remoteUserData.syncData!.content, true, client.instantiationService.get(ILogService)), content);\n\t\tassert.strictEqual((await fileService.readFile(keybindingsResource)).value.toString(), expectedLocalContent);\n\t});\n\n\ttest('when keybindings file is created after first sync', async () => {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst keybindingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource;\n\t\tawait testObject.sync(await client.getResourceManifest());\n\t\tawait fileService.createFile(keybindingsResource, VSBuffer.fromString('[]'));\n\n\t\tlet lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst manifest = await client.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'POST', url: `${server.url}/v1/resource/${testObject.resource}`, headers: { 'If-Match': lastSyncUserData?.ref } },\n\t\t]);\n\n\t\tlastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.strictEqual(getKeybindingsContentFromSyncContent(lastSyncUserData!.syncData!.content, true, client.instantiationService.get(ILogService)), '[]');\n\t});\n\n\ttest('test apply remote when keybindings file does not exist', async () => {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst keybindingsResource = client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource;\n\t\tif (await fileService.exists(keybindingsResource)) {\n\t\t\tawait fileService.del(keybindingsResource);\n\t\t}\n\n\t\tconst preview = (await testObject.preview(await client.getResourceManifest(), {}))!;\n\n\t\tserver.reset();\n\t\tconst content = await testObject.resolveContent(preview.resourcePreviews[0].remoteResource);\n\t\tawait testObject.accept(preview.resourcePreviews[0].remoteResource, content);\n\t\tawait testObject.apply(false);\n\t\tassert.deepStrictEqual(server.requests, []);\n\t});\n\n\ttest('sync throws invalid content error - content is an object', async () => {\n\t\tawait client.instantiationService.get(IFileService).writeFile(client.instantiationService.get(IUserDataProfilesService).defaultProfile.keybindingsResource, VSBuffer.fromString('{}'));\n\t\ttry {\n\t\t\tawait testObject.sync(await client.getResourceManifest());\n\t\t\tassert.fail('should fail with invalid content error');\n\t\t} catch (e) {\n\t\t\tassert.ok(e instanceof UserDataSyncError);\n\t\t\tassert.deepStrictEqual((<UserDataSyncError>e).code, UserDataSyncErrorCode.LocalInvalidContent);\n\t\t}\n\t});\n\n\ttest('sync profile keybindings', async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tconst profile = await client2.instantiationService.get(IUserDataProfilesService).createNamedProfile('profile1');\n\t\tawait client2.instantiationService.get(IFileService).writeFile(profile.keybindingsResource, VSBuffer.fromString(JSON.stringify([\n\t\t\t{\n\t\t\t\t'key': 'shift+cmd+w',\n\t\t\t\t'command': 'workbench.action.closeAllEditors',\n\t\t\t}\n\t\t])));\n\t\tawait client2.sync();\n\n\t\tawait client.sync();\n\n\t\tconst syncedProfile = client.instantiationService.get(IUserDataProfilesService).profiles.find(p => p.id === profile.id)!;\n\t\tconst content = (await client.instantiationService.get(IFileService).readFile(syncedProfile.keybindingsResource)).value.toString();\n\t\tassert.deepStrictEqual(JSON.parse(content), [\n\t\t\t{\n\t\t\t\t'key': 'shift+cmd+w',\n\t\t\t\t'command': 'workbench.action.closeAllEditors',\n\t\t\t}\n\t\t]);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
