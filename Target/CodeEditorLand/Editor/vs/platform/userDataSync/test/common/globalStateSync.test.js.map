{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataSync/test/common/globalStateSync.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { IEnvironmentService } from '../../../environment/common/environment.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../storage/common/storage.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { GlobalStateSynchroniser } from '../../common/globalStateSync.js';\nimport { IGlobalState, ISyncData, IUserDataSyncStoreService, SyncResource, SyncStatus } from '../../common/userDataSync.js';\nimport { IUserDataProfileStorageService } from '../../../userDataProfile/common/userDataProfileStorageService.js';\nimport { UserDataSyncClient, UserDataSyncTestServer } from './userDataSyncClient.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\n\nsuite('GlobalStateSync', () => {\n\n\tconst server = new UserDataSyncTestServer();\n\tlet testClient: UserDataSyncClient;\n\tlet client2: UserDataSyncClient;\n\n\tlet testObject: GlobalStateSynchroniser;\n\n\tteardown(async () => {\n\t\tawait testClient.instantiationService.get(IUserDataSyncStoreService).clear();\n\t});\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\ttestClient = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait testClient.setUp(true);\n\t\ttestObject = testClient.getSynchronizer(SyncResource.GlobalState) as GlobalStateSynchroniser;\n\n\t\tclient2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t});\n\n\ttest('when global state does not exist', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tassert.deepStrictEqual(await testObject.getLastSyncUserData(), null);\n\t\tlet manifest = await testClient.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'GET', url: `${server.url}/v1/resource/${testObject.resource}/latest`, headers: {} },\n\t\t]);\n\n\t\tconst lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.strictEqual(lastSyncUserData!.syncData, null);\n\n\t\tmanifest = await testClient.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\n\t\tmanifest = await testClient.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\t\tassert.deepStrictEqual(server.requests, []);\n\t}));\n\n\ttest('when global state is created after first sync', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tupdateUserStorage('a', 'value1', testClient);\n\n\t\tlet lastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst manifest = await testClient.getResourceManifest();\n\t\tserver.reset();\n\t\tawait testObject.sync(manifest);\n\n\t\tassert.deepStrictEqual(server.requests, [\n\t\t\t{ type: 'POST', url: `${server.url}/v1/resource/${testObject.resource}`, headers: { 'If-Match': lastSyncUserData?.ref } },\n\t\t]);\n\n\t\tlastSyncUserData = await testObject.getLastSyncUserData();\n\t\tconst remoteUserData = await testObject.getRemoteUserData(null);\n\t\tassert.deepStrictEqual(lastSyncUserData!.ref, remoteUserData.ref);\n\t\tassert.deepStrictEqual(lastSyncUserData!.syncData, remoteUserData.syncData);\n\t\tassert.deepStrictEqual(JSON.parse(lastSyncUserData!.syncData!.content).storage, { 'a': { version: 1, value: 'value1' } });\n\t}));\n\n\ttest('first time sync - outgoing to server (no state)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tupdateUserStorage('a', 'value1', testClient);\n\t\tupdateMachineStorage('b', 'value1', testClient);\n\t\tawait updateLocale(testClient);\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseGlobalState(content);\n\t\tassert.deepStrictEqual(actual.storage, { 'globalState.argv.locale': { version: 1, value: 'en' }, 'a': { version: 1, value: 'value1' } });\n\t}));\n\n\ttest('first time sync - incoming from server (no state)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tupdateUserStorage('a', 'value1', client2);\n\t\tawait updateLocale(client2);\n\t\tawait client2.sync();\n\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tassert.strictEqual(readStorage('a', testClient), 'value1');\n\t\tassert.strictEqual(await readLocale(testClient), 'en');\n\t}));\n\n\ttest('first time sync when storage exists', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tupdateUserStorage('a', 'value1', client2);\n\t\tawait client2.sync();\n\n\t\tupdateUserStorage('b', 'value2', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tassert.strictEqual(readStorage('a', testClient), 'value1');\n\t\tassert.strictEqual(readStorage('b', testClient), 'value2');\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseGlobalState(content);\n\t\tassert.deepStrictEqual(actual.storage, { 'a': { version: 1, value: 'value1' }, 'b': { version: 1, value: 'value2' } });\n\t}));\n\n\ttest('first time sync when storage exists - has conflicts', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tupdateUserStorage('a', 'value1', client2);\n\t\tawait client2.sync();\n\n\t\tupdateUserStorage('a', 'value2', client2);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tassert.strictEqual(readStorage('a', testClient), 'value1');\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseGlobalState(content);\n\t\tassert.deepStrictEqual(actual.storage, { 'a': { version: 1, value: 'value1' } });\n\t}));\n\n\ttest('sync adding a storage value', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tupdateUserStorage('a', 'value1', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tupdateUserStorage('b', 'value2', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tassert.strictEqual(readStorage('a', testClient), 'value1');\n\t\tassert.strictEqual(readStorage('b', testClient), 'value2');\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseGlobalState(content);\n\t\tassert.deepStrictEqual(actual.storage, { 'a': { version: 1, value: 'value1' }, 'b': { version: 1, value: 'value2' } });\n\t}));\n\n\ttest('sync updating a storage value', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tupdateUserStorage('a', 'value1', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tupdateUserStorage('a', 'value2', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tassert.strictEqual(readStorage('a', testClient), 'value2');\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseGlobalState(content);\n\t\tassert.deepStrictEqual(actual.storage, { 'a': { version: 1, value: 'value2' } });\n\t}));\n\n\ttest('sync removing a storage value', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tupdateUserStorage('a', 'value1', testClient);\n\t\tupdateUserStorage('b', 'value2', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\n\t\tremoveStorage('b', testClient);\n\t\tawait testObject.sync(await testClient.getResourceManifest());\n\t\tassert.strictEqual(testObject.status, SyncStatus.Idle);\n\t\tassert.deepStrictEqual(testObject.conflicts.conflicts, []);\n\n\t\tassert.strictEqual(readStorage('a', testClient), 'value1');\n\t\tassert.strictEqual(readStorage('b', testClient), undefined);\n\n\t\tconst { content } = await testClient.read(testObject.resource);\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseGlobalState(content);\n\t\tassert.deepStrictEqual(actual.storage, { 'a': { version: 1, value: 'value1' } });\n\t}));\n\n\ttest('sync profile state', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(server));\n\t\tawait client2.setUp(true);\n\t\tconst profile = await client2.instantiationService.get(IUserDataProfilesService).createNamedProfile('profile1');\n\t\tawait updateLocale(client2);\n\t\tawait updateUserStorageForProfile('a', 'value1', profile, testClient);\n\t\tawait client2.sync();\n\n\t\tawait testClient.sync();\n\n\t\tconst syncedProfile = testClient.instantiationService.get(IUserDataProfilesService).profiles.find(p => p.id === profile.id)!;\n\t\tconst profileStorage = await testClient.instantiationService.get(IUserDataProfileStorageService).readStorageData(syncedProfile);\n\t\tassert.strictEqual(profileStorage.get('a')?.value, 'value1');\n\t\tassert.strictEqual(await readLocale(testClient), 'en');\n\n\t\tconst { content } = await testClient.read(testObject.resource, '1');\n\t\tassert.ok(content !== null);\n\t\tconst actual = parseGlobalState(content);\n\t\tassert.deepStrictEqual(actual.storage, { 'a': { version: 1, value: 'value1' } });\n\t}));\n\n\tfunction parseGlobalState(content: string): IGlobalState {\n\t\tconst syncData: ISyncData = JSON.parse(content);\n\t\treturn JSON.parse(syncData.content);\n\t}\n\n\tasync function updateLocale(client: UserDataSyncClient): Promise<void> {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tawait fileService.writeFile(environmentService.argvResource, VSBuffer.fromString(JSON.stringify({ 'locale': 'en' })));\n\t}\n\n\tfunction updateUserStorage(key: string, value: string, client: UserDataSyncClient, profile?: IUserDataProfile): void {\n\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\tstorageService.store(key, value, StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n\tasync function updateUserStorageForProfile(key: string, value: string, profile: IUserDataProfile, client: UserDataSyncClient): Promise<void> {\n\t\tconst storageService = client.instantiationService.get(IUserDataProfileStorageService);\n\t\tconst data = new Map<string, string>();\n\t\tdata.set(key, value);\n\t\tawait storageService.updateStorageData(profile, data, StorageTarget.USER);\n\t}\n\n\tfunction updateMachineStorage(key: string, value: string, client: UserDataSyncClient): void {\n\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\tstorageService.store(key, value, StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n\n\tfunction removeStorage(key: string, client: UserDataSyncClient): void {\n\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\tstorageService.remove(key, StorageScope.PROFILE);\n\t}\n\n\tfunction readStorage(key: string, client: UserDataSyncClient): string | undefined {\n\t\tconst storageService = client.instantiationService.get(IStorageService);\n\t\treturn storageService.get(key, StorageScope.PROFILE);\n\t}\n\n\tasync function readLocale(client: UserDataSyncClient): Promise<string | undefined> {\n\t\tconst fileService = client.instantiationService.get(IFileService);\n\t\tconst environmentService = client.instantiationService.get(IEnvironmentService);\n\t\tconst content = await fileService.readFile(environmentService.argvResource);\n\t\treturn JSON.parse(content.value.toString()).locale;\n\t}\n\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AACnC,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,kBAAkB,gCAAgC;AAC3D,SAAS,+BAA+B;AACxC,SAAS,cAAc,WAAW,2BAA2B,cAAc,kBAAkB;AAC7F,SAAS,sCAAsC;AAC/C,SAAS,oBAAoB,8BAA8B;AAC3D,SAAS,+CAA+C;AAGxD,MAAM,mBAAmB,MAAM;AAE9B,QAAM,SAAS,IAAI,uBAAuB;AAC1C,MAAI;AACJ,MAAI;AAEJ,MAAI;AAEJ,WAAS,YAAY;AACpB,UAAM,WAAW,qBAAqB,IAAI,yBAAyB,EAAE,MAAM;AAAA,EAC5E,CAAC;AAED,QAAM,kBAAkB,wCAAwC;AAEhE,QAAM,YAAY;AACjB,iBAAa,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAC/D,UAAM,WAAW,MAAM,IAAI;AAC3B,iBAAa,WAAW,gBAAgB,aAAa,WAAW;AAEhE,cAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAC5D,UAAM,QAAQ,MAAM,IAAI;AAAA,EACzB,CAAC;AAED,OAAK,oCAAoC,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AAC5G,WAAO,gBAAgB,MAAM,WAAW,oBAAoB,GAAG,IAAI;AACnE,QAAI,WAAW,MAAM,WAAW,oBAAoB;AACpD,WAAO,MAAM;AACb,UAAM,WAAW,KAAK,QAAQ;AAE9B,WAAO,gBAAgB,OAAO,UAAU;AAAA,MACvC,EAAE,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,gBAAgB,WAAW,QAAQ,WAAW,SAAS,CAAC,EAAE;AAAA,IAC5F,CAAC;AAED,UAAM,mBAAmB,MAAM,WAAW,oBAAoB;AAC9D,UAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,WAAO,gBAAgB,iBAAkB,KAAK,eAAe,GAAG;AAChE,WAAO,gBAAgB,iBAAkB,UAAU,eAAe,QAAQ;AAC1E,WAAO,YAAY,iBAAkB,UAAU,IAAI;AAEnD,eAAW,MAAM,WAAW,oBAAoB;AAChD,WAAO,MAAM;AACb,UAAM,WAAW,KAAK,QAAQ;AAC9B,WAAO,gBAAgB,OAAO,UAAU,CAAC,CAAC;AAE1C,eAAW,MAAM,WAAW,oBAAoB;AAChD,WAAO,MAAM;AACb,UAAM,WAAW,KAAK,QAAQ;AAC9B,WAAO,gBAAgB,OAAO,UAAU,CAAC,CAAC;AAAA,EAC3C,CAAC,CAAC;AAEF,OAAK,iDAAiD,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AACzH,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAC5D,sBAAkB,KAAK,UAAU,UAAU;AAE3C,QAAI,mBAAmB,MAAM,WAAW,oBAAoB;AAC5D,UAAM,WAAW,MAAM,WAAW,oBAAoB;AACtD,WAAO,MAAM;AACb,UAAM,WAAW,KAAK,QAAQ;AAE9B,WAAO,gBAAgB,OAAO,UAAU;AAAA,MACvC,EAAE,MAAM,QAAQ,KAAK,GAAG,OAAO,GAAG,gBAAgB,WAAW,QAAQ,IAAI,SAAS,EAAE,YAAY,kBAAkB,IAAI,EAAE;AAAA,IACzH,CAAC;AAED,uBAAmB,MAAM,WAAW,oBAAoB;AACxD,UAAM,iBAAiB,MAAM,WAAW,kBAAkB,IAAI;AAC9D,WAAO,gBAAgB,iBAAkB,KAAK,eAAe,GAAG;AAChE,WAAO,gBAAgB,iBAAkB,UAAU,eAAe,QAAQ;AAC1E,WAAO,gBAAgB,KAAK,MAAM,iBAAkB,SAAU,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,EAAE,CAAC;AAAA,EACzH,CAAC,CAAC;AAEF,OAAK,mDAAmD,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AAC3H,sBAAkB,KAAK,UAAU,UAAU;AAC3C,yBAAqB,KAAK,UAAU,UAAU;AAC9C,UAAM,aAAa,UAAU;AAE7B,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAC5D,WAAO,YAAY,WAAW,QAAQ,WAAW,IAAI;AACrD,WAAO,gBAAgB,WAAW,UAAU,WAAW,CAAC,CAAC;AAEzD,UAAM,EAAE,QAAQ,IAAI,MAAM,WAAW,KAAK,WAAW,QAAQ;AAC7D,WAAO,GAAG,YAAY,IAAI;AAC1B,UAAM,SAAS,iBAAiB,OAAO;AACvC,WAAO,gBAAgB,OAAO,SAAS,EAAE,2BAA2B,EAAE,SAAS,GAAG,OAAO,KAAK,GAAG,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,EAAE,CAAC;AAAA,EACxI,CAAC,CAAC;AAEF,OAAK,qDAAqD,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AAC7H,sBAAkB,KAAK,UAAU,OAAO;AACxC,UAAM,aAAa,OAAO;AAC1B,UAAM,QAAQ,KAAK;AAEnB,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAC5D,WAAO,YAAY,WAAW,QAAQ,WAAW,IAAI;AACrD,WAAO,gBAAgB,WAAW,UAAU,WAAW,CAAC,CAAC;AAEzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,QAAQ;AACzD,WAAO,YAAY,MAAM,WAAW,UAAU,GAAG,IAAI;AAAA,EACtD,CAAC,CAAC;AAEF,OAAK,uCAAuC,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AAC/G,sBAAkB,KAAK,UAAU,OAAO;AACxC,UAAM,QAAQ,KAAK;AAEnB,sBAAkB,KAAK,UAAU,UAAU;AAC3C,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAC5D,WAAO,YAAY,WAAW,QAAQ,WAAW,IAAI;AACrD,WAAO,gBAAgB,WAAW,UAAU,WAAW,CAAC,CAAC;AAEzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,QAAQ;AACzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,QAAQ;AAEzD,UAAM,EAAE,QAAQ,IAAI,MAAM,WAAW,KAAK,WAAW,QAAQ;AAC7D,WAAO,GAAG,YAAY,IAAI;AAC1B,UAAM,SAAS,iBAAiB,OAAO;AACvC,WAAO,gBAAgB,OAAO,SAAS,EAAE,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,GAAG,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,EAAE,CAAC;AAAA,EACtH,CAAC,CAAC;AAEF,OAAK,uDAAuD,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AAC/H,sBAAkB,KAAK,UAAU,OAAO;AACxC,UAAM,QAAQ,KAAK;AAEnB,sBAAkB,KAAK,UAAU,OAAO;AACxC,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAE5D,WAAO,YAAY,WAAW,QAAQ,WAAW,IAAI;AACrD,WAAO,gBAAgB,WAAW,UAAU,WAAW,CAAC,CAAC;AAEzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,QAAQ;AAEzD,UAAM,EAAE,QAAQ,IAAI,MAAM,WAAW,KAAK,WAAW,QAAQ;AAC7D,WAAO,GAAG,YAAY,IAAI;AAC1B,UAAM,SAAS,iBAAiB,OAAO;AACvC,WAAO,gBAAgB,OAAO,SAAS,EAAE,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,EAAE,CAAC;AAAA,EAChF,CAAC,CAAC;AAEF,OAAK,+BAA+B,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AACvG,sBAAkB,KAAK,UAAU,UAAU;AAC3C,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAE5D,sBAAkB,KAAK,UAAU,UAAU;AAC3C,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAC5D,WAAO,YAAY,WAAW,QAAQ,WAAW,IAAI;AACrD,WAAO,gBAAgB,WAAW,UAAU,WAAW,CAAC,CAAC;AAEzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,QAAQ;AACzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,QAAQ;AAEzD,UAAM,EAAE,QAAQ,IAAI,MAAM,WAAW,KAAK,WAAW,QAAQ;AAC7D,WAAO,GAAG,YAAY,IAAI;AAC1B,UAAM,SAAS,iBAAiB,OAAO;AACvC,WAAO,gBAAgB,OAAO,SAAS,EAAE,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,GAAG,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,EAAE,CAAC;AAAA,EACtH,CAAC,CAAC;AAEF,OAAK,iCAAiC,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AACzG,sBAAkB,KAAK,UAAU,UAAU;AAC3C,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAE5D,sBAAkB,KAAK,UAAU,UAAU;AAC3C,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAC5D,WAAO,YAAY,WAAW,QAAQ,WAAW,IAAI;AACrD,WAAO,gBAAgB,WAAW,UAAU,WAAW,CAAC,CAAC;AAEzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,QAAQ;AAEzD,UAAM,EAAE,QAAQ,IAAI,MAAM,WAAW,KAAK,WAAW,QAAQ;AAC7D,WAAO,GAAG,YAAY,IAAI;AAC1B,UAAM,SAAS,iBAAiB,OAAO;AACvC,WAAO,gBAAgB,OAAO,SAAS,EAAE,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,EAAE,CAAC;AAAA,EAChF,CAAC,CAAC;AAEF,OAAK,iCAAiC,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AACzG,sBAAkB,KAAK,UAAU,UAAU;AAC3C,sBAAkB,KAAK,UAAU,UAAU;AAC3C,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAE5D,kBAAc,KAAK,UAAU;AAC7B,UAAM,WAAW,KAAK,MAAM,WAAW,oBAAoB,CAAC;AAC5D,WAAO,YAAY,WAAW,QAAQ,WAAW,IAAI;AACrD,WAAO,gBAAgB,WAAW,UAAU,WAAW,CAAC,CAAC;AAEzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,QAAQ;AACzD,WAAO,YAAY,YAAY,KAAK,UAAU,GAAG,MAAS;AAE1D,UAAM,EAAE,QAAQ,IAAI,MAAM,WAAW,KAAK,WAAW,QAAQ;AAC7D,WAAO,GAAG,YAAY,IAAI;AAC1B,UAAM,SAAS,iBAAiB,OAAO;AACvC,WAAO,gBAAgB,OAAO,SAAS,EAAE,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,EAAE,CAAC;AAAA,EAChF,CAAC,CAAC;AAEF,OAAK,sBAAsB,MAAM,mBAAyB,EAAE,eAAe,KAAK,GAAG,YAAY;AAC9F,UAAMA,WAAU,gBAAgB,IAAI,IAAI,mBAAmB,MAAM,CAAC;AAClE,UAAMA,SAAQ,MAAM,IAAI;AACxB,UAAM,UAAU,MAAMA,SAAQ,qBAAqB,IAAI,wBAAwB,EAAE,mBAAmB,UAAU;AAC9G,UAAM,aAAaA,QAAO;AAC1B,UAAM,4BAA4B,KAAK,UAAU,SAAS,UAAU;AACpE,UAAMA,SAAQ,KAAK;AAEnB,UAAM,WAAW,KAAK;AAEtB,UAAM,gBAAgB,WAAW,qBAAqB,IAAI,wBAAwB,EAAE,SAAS,KAAK,OAAK,EAAE,OAAO,QAAQ,EAAE;AAC1H,UAAM,iBAAiB,MAAM,WAAW,qBAAqB,IAAI,8BAA8B,EAAE,gBAAgB,aAAa;AAC9H,WAAO,YAAY,eAAe,IAAI,GAAG,GAAG,OAAO,QAAQ;AAC3D,WAAO,YAAY,MAAM,WAAW,UAAU,GAAG,IAAI;AAErD,UAAM,EAAE,QAAQ,IAAI,MAAM,WAAW,KAAK,WAAW,UAAU,GAAG;AAClE,WAAO,GAAG,YAAY,IAAI;AAC1B,UAAM,SAAS,iBAAiB,OAAO;AACvC,WAAO,gBAAgB,OAAO,SAAS,EAAE,KAAK,EAAE,SAAS,GAAG,OAAO,SAAS,EAAE,CAAC;AAAA,EAChF,CAAC,CAAC;AAEF,WAAS,iBAAiB,SAA+B;AACxD,UAAM,WAAsB,KAAK,MAAM,OAAO;AAC9C,WAAO,KAAK,MAAM,SAAS,OAAO;AAAA,EACnC;AAHS;AAKT,iBAAe,aAAa,QAA2C;AACtE,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,YAAY,UAAU,mBAAmB,cAAc,SAAS,WAAW,KAAK,UAAU,EAAE,UAAU,KAAK,CAAC,CAAC,CAAC;AAAA,EACrH;AAJe;AAMf,WAAS,kBAAkB,KAAa,OAAe,QAA4B,SAAkC;AACpH,UAAM,iBAAiB,OAAO,qBAAqB,IAAI,eAAe;AACtE,mBAAe,MAAM,KAAK,OAAO,aAAa,SAAS,cAAc,IAAI;AAAA,EAC1E;AAHS;AAKT,iBAAe,4BAA4B,KAAa,OAAe,SAA2B,QAA2C;AAC5I,UAAM,iBAAiB,OAAO,qBAAqB,IAAI,8BAA8B;AACrF,UAAM,OAAO,oBAAI,IAAoB;AACrC,SAAK,IAAI,KAAK,KAAK;AACnB,UAAM,eAAe,kBAAkB,SAAS,MAAM,cAAc,IAAI;AAAA,EACzE;AALe;AAOf,WAAS,qBAAqB,KAAa,OAAe,QAAkC;AAC3F,UAAM,iBAAiB,OAAO,qBAAqB,IAAI,eAAe;AACtE,mBAAe,MAAM,KAAK,OAAO,aAAa,SAAS,cAAc,OAAO;AAAA,EAC7E;AAHS;AAKT,WAAS,cAAc,KAAa,QAAkC;AACrE,UAAM,iBAAiB,OAAO,qBAAqB,IAAI,eAAe;AACtE,mBAAe,OAAO,KAAK,aAAa,OAAO;AAAA,EAChD;AAHS;AAKT,WAAS,YAAY,KAAa,QAAgD;AACjF,UAAM,iBAAiB,OAAO,qBAAqB,IAAI,eAAe;AACtE,WAAO,eAAe,IAAI,KAAK,aAAa,OAAO;AAAA,EACpD;AAHS;AAKT,iBAAe,WAAW,QAAyD;AAClF,UAAM,cAAc,OAAO,qBAAqB,IAAI,YAAY;AAChE,UAAM,qBAAqB,OAAO,qBAAqB,IAAI,mBAAmB;AAC9E,UAAM,UAAU,MAAM,YAAY,SAAS,mBAAmB,YAAY;AAC1E,WAAO,KAAK,MAAM,QAAQ,MAAM,SAAS,CAAC,EAAE;AAAA,EAC7C;AALe;AAOhB,CAAC;",
  "names": ["client2"]
}
