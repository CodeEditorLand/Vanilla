var g=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var h=(n,t,e,i)=>{for(var r=i>1?void 0:i?f(t,e):t,s=n.length-1,a;s>=0;s--)(a=n[s])&&(r=(i?a(t,e,r):a(r))||r);return i&&r&&g(t,e,r),r},o=(n,t)=>(e,i)=>t(e,i,n);import"electron";import{Barrier as m,DeferredPromise as l}from"../../../../vs/base/common/async.js";import{Emitter as u}from"../../../../vs/base/common/event.js";import{Disposable as P}from"../../../../vs/base/common/lifecycle.js";import{assertIsDefined as S}from"../../../../vs/base/common/types.js";import{validatedIpcMain as v}from"../../../../vs/base/parts/ipc/electron-main/ipcMain.js";import{IEnvironmentMainService as w}from"../../../../vs/platform/environment/electron-main/environmentMainService.js";import{parseSharedProcessDebugPort as I}from"../../../../vs/platform/environment/node/environmentService.js";import{ILifecycleMainService as M}from"../../../../vs/platform/lifecycle/electron-main/lifecycleMainService.js";import{ILogService as C}from"../../../../vs/platform/log/common/log.js";import{ILoggerMainService as D}from"../../../../vs/platform/log/electron-main/loggerService.js";import{IPolicyService as L}from"../../../../vs/platform/policy/common/policy.js";import{SharedProcessChannelConnection as p,SharedProcessLifecycle as d,SharedProcessRawConnection as y}from"../../../../vs/platform/sharedProcess/common/sharedProcess.js";import"../../../../vs/platform/sharedProcess/node/sharedProcess.js";import{NullTelemetryService as R}from"../../../../vs/platform/telemetry/common/telemetryUtils.js";import{IUserDataProfilesService as _}from"../../../../vs/platform/userDataProfile/common/userDataProfile.js";import{UtilityProcess as W}from"../../../../vs/platform/utilityProcess/electron-main/utilityProcess.js";let c=class extends P{constructor(e,i,r,s,a,b,B,U,q){super();this.machineId=e;this.sqmId=i;this.devDeviceId=r;this.environmentMainService=s;this.userDataProfilesService=a;this.lifecycleMainService=b;this.logService=B;this.loggerMainService=U;this.policyService=q;this.registerListeners()}firstWindowConnectionBarrier=new m;utilityProcess=void 0;utilityProcessLogListener=void 0;_onDidCrash=this._register(new u);onDidCrash=this._onDidCrash.event;registerListeners(){v.on(p.request,(e,i)=>this.onWindowConnection(e,i,p.response)),v.on(y.request,(e,i)=>this.onWindowConnection(e,i,y.response)),this._register(this.lifecycleMainService.onWillShutdown(()=>this.onWillShutdown()))}async onWindowConnection(e,i,r){this.logService.trace(`[SharedProcess] onWindowConnection for: ${r}`),this.firstWindowConnectionBarrier.isOpen()||this.firstWindowConnectionBarrier.open(),await this.whenReady();const s=await this.connect(r);if(e.sender.isDestroyed())return s.close();e.sender.postMessage(r,i,[s])}onWillShutdown(){this.logService.trace("[SharedProcess] onWillShutdown"),this.utilityProcess?.postMessage(d.exit),this.utilityProcess=void 0}_whenReady=void 0;whenReady(){return this._whenReady||(this._whenReady=(async()=>{await this.whenIpcReady;const e=new l;this.utilityProcess?.once(d.initDone,()=>e.complete()),await e.p,this.utilityProcessLogListener?.dispose(),this.logService.trace("[SharedProcess] Overall ready")})()),this._whenReady}_whenIpcReady=void 0;get whenIpcReady(){return this._whenIpcReady||(this._whenIpcReady=(async()=>{await this.firstWindowConnectionBarrier.wait(),this.createUtilityProcess();const e=new l;this.utilityProcess?.once(d.ipcReady,()=>e.complete()),await e.p,this.logService.trace("[SharedProcess] IPC ready")})()),this._whenIpcReady}createUtilityProcess(){this.utilityProcess=this._register(new W(this.logService,R,this.lifecycleMainService)),this.utilityProcessLogListener=this.utilityProcess.onMessage(r=>{typeof r.warning=="string"?this.logService.warn(r.warning):typeof r.error=="string"&&this.logService.error(r.error)});const e=I(this.environmentMainService.args,this.environmentMainService.isBuilt);let i;e.port&&(i=["--nolazy"],e.break?i.push(`--inspect-brk=${e.port}`):i.push(`--inspect=${e.port}`)),this.utilityProcess.start({type:"shared-process",entryPoint:"vs/code/node/sharedProcess/sharedProcessMain",payload:this.createSharedProcessConfiguration(),execArgv:i}),this._register(this.utilityProcess.onCrash(()=>this._onDidCrash.fire()))}createSharedProcessConfiguration(){return{machineId:this.machineId,sqmId:this.sqmId,devDeviceId:this.devDeviceId,codeCachePath:this.environmentMainService.codeCachePath,profiles:{home:this.userDataProfilesService.profilesHome,all:this.userDataProfilesService.profiles},args:this.environmentMainService.args,logLevel:this.loggerMainService.getLogLevel(),loggers:this.loggerMainService.getRegisteredLoggers(),policiesData:this.policyService.serialize()}}async connect(e){return await this.whenIpcReady,S(this.utilityProcess).connect(e)}};c=h([o(3,w),o(4,_),o(5,M),o(6,C),o(7,D),o(8,L)],c);export{c as SharedProcess};
