{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/dialogs/common/dialogs.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport { mnemonicButtonLabel } from \"../../../base/common/labels.js\";\nimport { deepClone } from \"../../../base/common/objects.js\";\nimport {\n\tisLinux,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport { basename } from \"../../../base/common/resources.js\";\nimport Severity from \"../../../base/common/severity.js\";\nimport type { ThemeIcon } from \"../../../base/common/themables.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type { MessageBoxOptions } from \"../../../base/parts/sandbox/common/electronTypes.js\";\nimport { localize } from \"../../../nls.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type { IProductService } from \"../../product/common/productService.js\";\nimport type { ITelemetryData } from \"../../telemetry/common/telemetry.js\";\n\nexport interface IDialogArgs {\n\treadonly confirmArgs?: IConfirmDialogArgs;\n\treadonly inputArgs?: IInputDialogArgs;\n\treadonly promptArgs?: IPromptDialogArgs;\n}\n\nexport interface IBaseDialogOptions {\n\treadonly type?: Severity | DialogType;\n\n\treadonly title?: string;\n\treadonly message: string;\n\treadonly detail?: string;\n\n\treadonly checkbox?: ICheckbox;\n\n\t/**\n\t * Allows to enforce use of custom dialog even in native environments.\n\t */\n\treadonly custom?: boolean | ICustomDialogOptions;\n}\n\nexport interface IConfirmDialogArgs {\n\treadonly confirmation: IConfirmation;\n}\n\nexport interface IConfirmation extends IBaseDialogOptions {\n\t/**\n\t * If not provided, defaults to `Yes`.\n\t */\n\treadonly primaryButton?: string;\n\n\t/**\n\t * If not provided, defaults to `Cancel`.\n\t */\n\treadonly cancelButton?: string;\n}\n\nexport interface IConfirmationResult extends ICheckboxResult {\n\t/**\n\t * Will be true if the dialog was confirmed with the primary button pressed.\n\t */\n\treadonly confirmed: boolean;\n}\n\nexport interface IInputDialogArgs {\n\treadonly input: IInput;\n}\n\nexport interface IInput extends IConfirmation {\n\treadonly inputs: IInputElement[];\n\n\t/**\n\t * If not provided, defaults to `Ok`.\n\t */\n\treadonly primaryButton?: string;\n}\n\nexport interface IInputElement {\n\treadonly type?: \"text\" | \"password\";\n\treadonly value?: string;\n\treadonly placeholder?: string;\n}\n\nexport interface IInputResult extends IConfirmationResult {\n\t/**\n\t * Values for the input fields as provided by the user or `undefined` if none.\n\t */\n\treadonly values?: string[];\n}\n\nexport interface IPromptDialogArgs {\n\treadonly prompt: IPrompt<unknown>;\n}\n\nexport interface IPromptBaseButton<T> {\n\t/**\n\t * @returns the result of the prompt button will be returned\n\t * as result from the `prompt()` call.\n\t */\n\trun(checkbox: ICheckboxResult): T | Promise<T>;\n}\n\nexport interface IPromptButton<T> extends IPromptBaseButton<T> {\n\treadonly label: string;\n}\n\nexport interface IPromptCancelButton<T> extends IPromptBaseButton<T> {\n\t/**\n\t * The cancel button to show in the prompt. Defaults to\n\t * `Cancel` if not provided.\n\t */\n\treadonly label?: string;\n}\n\nexport interface IPrompt<T> extends IBaseDialogOptions {\n\t/**\n\t * The buttons to show in the prompt. Defaults to `OK`\n\t * if no buttons or cancel button is provided.\n\t */\n\treadonly buttons?: IPromptButton<T>[];\n\n\t/**\n\t * The cancel button to show in the prompt. Defaults to\n\t * `Cancel` if set to `true`.\n\t */\n\treadonly cancelButton?: IPromptCancelButton<T> | true | string;\n}\n\nexport interface IPromptWithCustomCancel<T> extends IPrompt<T> {\n\treadonly cancelButton: IPromptCancelButton<T>;\n}\n\nexport interface IPromptWithDefaultCancel<T> extends IPrompt<T> {\n\treadonly cancelButton: true | string;\n}\n\nexport interface IPromptResult<T> extends ICheckboxResult {\n\t/**\n\t * The result of the `IPromptButton` that was pressed or `undefined` if none.\n\t */\n\treadonly result?: T;\n}\n\nexport interface IPromptResultWithCancel<T> extends IPromptResult<T> {\n\treadonly result: T;\n}\n\nexport interface IAsyncPromptResult<T> extends ICheckboxResult {\n\t/**\n\t * The result of the `IPromptButton` that was pressed or `undefined` if none.\n\t */\n\treadonly result?: Promise<T>;\n}\n\nexport interface IAsyncPromptResultWithCancel<T> extends IAsyncPromptResult<T> {\n\treadonly result: Promise<T>;\n}\n\nexport type IDialogResult =\n\t| IConfirmationResult\n\t| IInputResult\n\t| IAsyncPromptResult<unknown>;\n\nexport type DialogType = \"none\" | \"info\" | \"error\" | \"question\" | \"warning\";\n\nexport interface ICheckbox {\n\treadonly label: string;\n\treadonly checked?: boolean;\n}\n\nexport interface ICheckboxResult {\n\t/**\n\t * This will only be defined if the confirmation was created\n\t * with the checkbox option defined.\n\t */\n\treadonly checkboxChecked?: boolean;\n}\n\nexport interface IPickAndOpenOptions {\n\treadonly forceNewWindow?: boolean;\n\tdefaultUri?: URI;\n\treadonly telemetryExtraData?: ITelemetryData;\n\tavailableFileSystems?: string[];\n\tremoteAuthority?: string | null;\n}\n\nexport interface FileFilter {\n\treadonly extensions: string[];\n\treadonly name: string;\n}\n\nexport interface ISaveDialogOptions {\n\t/**\n\t * A human-readable string for the dialog title\n\t */\n\ttitle?: string;\n\n\t/**\n\t * The resource the dialog shows when opened.\n\t */\n\tdefaultUri?: URI;\n\n\t/**\n\t * A set of file filters that are used by the dialog. Each entry is a human readable label,\n\t * like \"TypeScript\", and an array of extensions.\n\t */\n\tfilters?: FileFilter[];\n\n\t/**\n\t * A human-readable string for the ok button\n\t */\n\treadonly saveLabel?: string;\n\n\t/**\n\t * Specifies a list of schemas for the file systems the user can save to. If not specified, uses the schema of the defaultURI or, if also not specified,\n\t * the schema of the current window.\n\t */\n\tavailableFileSystems?: readonly string[];\n}\n\nexport interface IOpenDialogOptions {\n\t/**\n\t * A human-readable string for the dialog title\n\t */\n\treadonly title?: string;\n\n\t/**\n\t * The resource the dialog shows when opened.\n\t */\n\tdefaultUri?: URI;\n\n\t/**\n\t * A human-readable string for the open button.\n\t */\n\treadonly openLabel?: string;\n\n\t/**\n\t * Allow to select files, defaults to `true`.\n\t */\n\tcanSelectFiles?: boolean;\n\n\t/**\n\t * Allow to select folders, defaults to `false`.\n\t */\n\tcanSelectFolders?: boolean;\n\n\t/**\n\t * Allow to select many files or folders.\n\t */\n\treadonly canSelectMany?: boolean;\n\n\t/**\n\t * A set of file filters that are used by the dialog. Each entry is a human readable label,\n\t * like \"TypeScript\", and an array of extensions.\n\t */\n\tfilters?: FileFilter[];\n\n\t/**\n\t * Specifies a list of schemas for the file systems the user can load from. If not specified, uses the schema of the defaultURI or, if also not available,\n\t * the schema of the current window.\n\t */\n\tavailableFileSystems?: readonly string[];\n}\n\nexport const IDialogService = createDecorator<IDialogService>(\"dialogService\");\n\nexport interface ICustomDialogOptions {\n\treadonly buttonDetails?: string[];\n\treadonly markdownDetails?: ICustomDialogMarkdown[];\n\treadonly classes?: string[];\n\treadonly icon?: ThemeIcon;\n\treadonly disableCloseAction?: boolean;\n}\n\nexport interface ICustomDialogMarkdown {\n\treadonly markdown: IMarkdownString;\n\treadonly classes?: string[];\n}\n\n/**\n * A handler to bring up modal dialogs.\n */\nexport interface IDialogHandler {\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Prompt the user with a modal dialog.\n\t */\n\tprompt<T>(prompt: IPrompt<T>): Promise<IAsyncPromptResult<T>>;\n\n\t/**\n\t * Present a modal dialog to the user asking for input.\n\t */\n\tinput(input: IInput): Promise<IInputResult>;\n\n\t/**\n\t * Present the about dialog to the user.\n\t */\n\tabout(): Promise<void>;\n}\n\nenum DialogKind {\n\tConfirmation = 1,\n\tPrompt = 2,\n\tInput = 3,\n}\n\nexport abstract class AbstractDialogHandler implements IDialogHandler {\n\tprotected getConfirmationButtons(dialog: IConfirmation): string[] {\n\t\treturn this.getButtons(dialog, DialogKind.Confirmation);\n\t}\n\n\tprotected getPromptButtons(dialog: IPrompt<unknown>): string[] {\n\t\treturn this.getButtons(dialog, DialogKind.Prompt);\n\t}\n\n\tprotected getInputButtons(dialog: IInput): string[] {\n\t\treturn this.getButtons(dialog, DialogKind.Input);\n\t}\n\n\tprivate getButtons(\n\t\tdialog: IConfirmation,\n\t\tkind: DialogKind.Confirmation,\n\t): string[];\n\tprivate getButtons(\n\t\tdialog: IPrompt<unknown>,\n\t\tkind: DialogKind.Prompt,\n\t): string[];\n\tprivate getButtons(dialog: IInput, kind: DialogKind.Input): string[];\n\tprivate getButtons(\n\t\tdialog: IConfirmation | IInput | IPrompt<unknown>,\n\t\tkind: DialogKind,\n\t): string[] {\n\t\t// We put buttons in the order of \"default\" button first and \"cancel\"\n\t\t// button last. There maybe later processing when presenting the buttons\n\t\t// based on OS standards.\n\n\t\tconst buttons: string[] = [];\n\n\t\tswitch (kind) {\n\t\t\tcase DialogKind.Confirmation: {\n\t\t\t\tconst confirmationDialog = dialog as IConfirmation;\n\n\t\t\t\tif (confirmationDialog.primaryButton) {\n\t\t\t\t\tbuttons.push(confirmationDialog.primaryButton);\n\t\t\t\t} else {\n\t\t\t\t\tbuttons.push(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"yesButton\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Yes\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (confirmationDialog.cancelButton) {\n\t\t\t\t\tbuttons.push(confirmationDialog.cancelButton);\n\t\t\t\t} else {\n\t\t\t\t\tbuttons.push(localize(\"cancelButton\", \"Cancel\"));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DialogKind.Prompt: {\n\t\t\t\tconst promptDialog = dialog as IPrompt<unknown>;\n\n\t\t\t\tif (\n\t\t\t\t\tArray.isArray(promptDialog.buttons) &&\n\t\t\t\t\tpromptDialog.buttons.length > 0\n\t\t\t\t) {\n\t\t\t\t\tbuttons.push(\n\t\t\t\t\t\t...promptDialog.buttons.map((button) => button.label),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (promptDialog.cancelButton) {\n\t\t\t\t\tif (promptDialog.cancelButton === true) {\n\t\t\t\t\t\tbuttons.push(localize(\"cancelButton\", \"Cancel\"));\n\t\t\t\t\t} else if (typeof promptDialog.cancelButton === \"string\") {\n\t\t\t\t\t\tbuttons.push(promptDialog.cancelButton);\n\t\t\t\t\t} else if (promptDialog.cancelButton.label) {\n\t\t\t\t\t\tbuttons.push(promptDialog.cancelButton.label);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuttons.push(localize(\"cancelButton\", \"Cancel\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (buttons.length === 0) {\n\t\t\t\t\tbuttons.push(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"okButton\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&OK\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DialogKind.Input: {\n\t\t\t\tconst inputDialog = dialog as IInput;\n\n\t\t\t\tif (inputDialog.primaryButton) {\n\t\t\t\t\tbuttons.push(inputDialog.primaryButton);\n\t\t\t\t} else {\n\t\t\t\t\tbuttons.push(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"okButton\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&OK\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (inputDialog.cancelButton) {\n\t\t\t\t\tbuttons.push(inputDialog.cancelButton);\n\t\t\t\t} else {\n\t\t\t\t\tbuttons.push(localize(\"cancelButton\", \"Cancel\"));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn buttons;\n\t}\n\n\tprotected getDialogType(\n\t\ttype: Severity | DialogType | undefined,\n\t): DialogType | undefined {\n\t\tif (typeof type === \"string\") {\n\t\t\treturn type;\n\t\t}\n\n\t\tif (typeof type === \"number\") {\n\t\t\treturn type === Severity.Info\n\t\t\t\t? \"info\"\n\t\t\t\t: type === Severity.Error\n\t\t\t\t\t? \"error\"\n\t\t\t\t\t: type === Severity.Warning\n\t\t\t\t\t\t? \"warning\"\n\t\t\t\t\t\t: \"none\";\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected getPromptResult<T>(\n\t\tprompt: IPrompt<T>,\n\t\tbuttonIndex: number,\n\t\tcheckboxChecked: boolean | undefined,\n\t): IAsyncPromptResult<T> {\n\t\tconst promptButtons: IPromptBaseButton<T>[] = [\n\t\t\t...(prompt.buttons ?? []),\n\t\t];\n\t\tif (\n\t\t\tprompt.cancelButton &&\n\t\t\ttypeof prompt.cancelButton !== \"string\" &&\n\t\t\ttypeof prompt.cancelButton !== \"boolean\"\n\t\t) {\n\t\t\tpromptButtons.push(prompt.cancelButton);\n\t\t}\n\n\t\tlet result = promptButtons[buttonIndex]?.run({ checkboxChecked });\n\t\tif (!(result instanceof Promise)) {\n\t\t\tresult = Promise.resolve(result);\n\t\t}\n\n\t\treturn { result, checkboxChecked };\n\t}\n\n\tabstract confirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\tabstract input(input: IInput): Promise<IInputResult>;\n\tabstract prompt<T>(prompt: IPrompt<T>): Promise<IAsyncPromptResult<T>>;\n\tabstract about(): Promise<void>;\n}\n\n/**\n * A service to bring up modal dialogs.\n *\n * Note: use the `INotificationService.prompt()` method for a non-modal way to ask\n * the user for input.\n */\nexport interface IDialogService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that fires when a dialog is about to show.\n\t */\n\tonWillShowDialog: Event<void>;\n\n\t/**\n\t * An event that fires when a dialog did show (closed).\n\t */\n\tonDidShowDialog: Event<void>;\n\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Prompt the user with a modal dialog. Provides a bit\n\t * more control over the dialog compared to the simpler\n\t * `confirm` method. Specifically, allows to show more\n\t * than 2 buttons and makes it easier to just show a\n\t * message to the user.\n\t *\n\t * @returns a promise that resolves to the `T` result\n\t * from the provided `IPromptButton<T>` or `undefined`.\n\t */\n\tprompt<T>(\n\t\tprompt: IPromptWithCustomCancel<T>,\n\t): Promise<IPromptResultWithCancel<T>>;\n\tprompt<T>(prompt: IPromptWithDefaultCancel<T>): Promise<IPromptResult<T>>;\n\tprompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;\n\n\t/**\n\t * Present a modal dialog to the user asking for input.\n\t */\n\tinput(input: IInput): Promise<IInputResult>;\n\n\t/**\n\t * Show a modal info dialog.\n\t */\n\tinfo(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Show a modal warning dialog.\n\t */\n\twarn(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Show a modal error dialog.\n\t */\n\terror(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Present the about dialog to the user.\n\t */\n\tabout(): Promise<void>;\n}\n\nexport const IFileDialogService =\n\tcreateDecorator<IFileDialogService>(\"fileDialogService\");\n\n/**\n * A service to bring up file dialogs.\n */\nexport interface IFileDialogService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * The default path for a new file based on previously used files.\n\t * @param schemeFilter The scheme of the file path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultFilePath(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * The default path for a new folder based on previously used folders.\n\t * @param schemeFilter The scheme of the folder path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultFolderPath(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * The default path for a new workspace based on previously used workspaces.\n\t * @param schemeFilter The scheme of the workspace path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultWorkspacePath(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * Shows a file-folder selection dialog and opens the selected entry.\n\t */\n\tpickFileFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a file selection dialog and opens the selected entry.\n\t */\n\tpickFileAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a folder selection dialog and opens the selected entry.\n\t */\n\tpickFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a workspace selection dialog and opens the selected entry.\n\t */\n\tpickWorkspaceAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a save file dialog and save the file at the chosen file URI.\n\t */\n\tpickFileToSave(\n\t\tdefaultUri: URI,\n\t\tavailableFileSystems?: string[],\n\t): Promise<URI | undefined>;\n\n\t/**\n\t * The preferred folder path to open the dialog at.\n\t * @param schemeFilter The scheme of the file path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of a setting.\n\t */\n\tpreferredHome(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * Shows a save file dialog and returns the chosen file URI.\n\t */\n\tshowSaveDialog(options: ISaveDialogOptions): Promise<URI | undefined>;\n\n\t/**\n\t * Shows a confirm dialog for saving 1-N files.\n\t */\n\tshowSaveConfirm(\n\t\tfileNamesOrResources: (string | URI)[],\n\t): Promise<ConfirmResult>;\n\n\t/**\n\t * Shows a open file dialog and returns the chosen file URI.\n\t */\n\tshowOpenDialog(options: IOpenDialogOptions): Promise<URI[] | undefined>;\n}\n\nexport enum ConfirmResult {\n\tSAVE = 0,\n\tDONT_SAVE = 1,\n\tCANCEL = 2,\n}\n\nconst MAX_CONFIRM_FILES = 10;\nexport function getFileNamesMessage(\n\tfileNamesOrResources: readonly (string | URI)[],\n): string {\n\tconst message: string[] = [];\n\tmessage.push(\n\t\t...fileNamesOrResources\n\t\t\t.slice(0, MAX_CONFIRM_FILES)\n\t\t\t.map((fileNameOrResource) =>\n\t\t\t\ttypeof fileNameOrResource === \"string\"\n\t\t\t\t\t? fileNameOrResource\n\t\t\t\t\t: basename(fileNameOrResource),\n\t\t\t),\n\t);\n\n\tif (fileNamesOrResources.length > MAX_CONFIRM_FILES) {\n\t\tif (fileNamesOrResources.length - MAX_CONFIRM_FILES === 1) {\n\t\t\tmessage.push(\n\t\t\t\tlocalize(\"moreFile\", \"...1 additional file not shown\"),\n\t\t\t);\n\t\t} else {\n\t\t\tmessage.push(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"moreFiles\",\n\t\t\t\t\t\"...{0} additional files not shown\",\n\t\t\t\t\tfileNamesOrResources.length - MAX_CONFIRM_FILES,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tmessage.push(\"\");\n\treturn message.join(\"\\n\");\n}\n\nexport interface INativeOpenDialogOptions {\n\treadonly forceNewWindow?: boolean;\n\n\treadonly defaultPath?: string;\n\n\treadonly telemetryEventName?: string;\n\treadonly telemetryExtraData?: ITelemetryData;\n}\n\nexport interface IMassagedMessageBoxOptions {\n\t/**\n\t * OS massaged message box options.\n\t */\n\treadonly options: MessageBoxOptions;\n\n\t/**\n\t * Since the massaged result of the message box options potentially\n\t * changes the order of buttons, we have to keep a map of these\n\t * changes so that we can still return the correct index to the caller.\n\t */\n\treadonly buttonIndeces: number[];\n}\n\n/**\n * A utility method to ensure the options for the message box dialog\n * are using properties that are consistent across all platforms and\n * specific to the platform where necessary.\n */\nexport function massageMessageBoxOptions(\n\toptions: MessageBoxOptions,\n\tproductService: IProductService,\n): IMassagedMessageBoxOptions {\n\tconst massagedOptions = deepClone(options);\n\n\tlet buttons = (massagedOptions.buttons ?? []).map((button) =>\n\t\tmnemonicButtonLabel(button),\n\t);\n\tlet buttonIndeces = (options.buttons || []).map((button, index) => index);\n\n\tlet defaultId = 0; // by default the first button is default button\n\tlet cancelId = massagedOptions.cancelId ?? buttons.length - 1; // by default the last button is cancel button\n\n\t// Apply HIG per OS when more than one button is used\n\tif (buttons.length > 1) {\n\t\tconst cancelButton =\n\t\t\ttypeof cancelId === \"number\" ? buttons[cancelId] : undefined;\n\n\t\tif (isLinux || isMacintosh) {\n\t\t\t// Linux: the GNOME HIG (https://developer.gnome.org/hig/patterns/feedback/dialogs.html?highlight=dialog)\n\t\t\t// recommend the following:\n\t\t\t// \"Always ensure that the cancel button appears first, before the affirmative button. In left-to-right\n\t\t\t//  locales, this is on the left. This button order ensures that users become aware of, and are reminded\n\t\t\t//  of, the ability to cancel prior to encountering the affirmative button.\"\n\t\t\t//\n\t\t\t// Electron APIs do not reorder buttons for us, so we ensure a reverse order of buttons and a position\n\t\t\t// of the cancel button (if provided) that matches the HIG\n\n\t\t\t// macOS: the HIG (https://developer.apple.com/design/human-interface-guidelines/components/presentation/alerts)\n\t\t\t// recommend the following:\n\t\t\t// \"Place buttons where people expect. In general, place the button people are most likely to choose on the trailing side in a\n\t\t\t//  row of buttons or at the top in a stack of buttons. Always place the default button on the trailing side of a row or at the\n\t\t\t//  top of a stack. Cancel buttons are typically on the leading side of a row or at the bottom of a stack.\"\n\t\t\t//\n\t\t\t// However: it seems that older macOS versions where 3 buttons were presented in a row differ from this\n\t\t\t// recommendation. In fact, cancel buttons were placed to the left of the default button and secondary\n\t\t\t// buttons on the far left. To support these older macOS versions we have to manually shuffle the cancel\n\t\t\t// button in the same way as we do on Linux. This will not have any impact on newer macOS versions where\n\t\t\t// shuffling is done for us.\n\n\t\t\tif (\n\t\t\t\ttypeof cancelButton === \"string\" &&\n\t\t\t\tbuttons.length > 1 &&\n\t\t\t\tcancelId !== 1\n\t\t\t) {\n\t\t\t\tbuttons.splice(cancelId, 1);\n\t\t\t\tbuttons.splice(1, 0, cancelButton);\n\n\t\t\t\tconst cancelButtonIndex = buttonIndeces[cancelId];\n\t\t\t\tbuttonIndeces.splice(cancelId, 1);\n\t\t\t\tbuttonIndeces.splice(1, 0, cancelButtonIndex);\n\n\t\t\t\tcancelId = 1;\n\t\t\t}\n\n\t\t\tif (isLinux && buttons.length > 1) {\n\t\t\t\tbuttons = buttons.reverse();\n\t\t\t\tbuttonIndeces = buttonIndeces.reverse();\n\n\t\t\t\tdefaultId = buttons.length - 1;\n\t\t\t\tif (typeof cancelButton === \"string\") {\n\t\t\t\t\tcancelId = defaultId - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isWindows) {\n\t\t\t// Windows: the HIG (https://learn.microsoft.com/en-us/windows/win32/uxguide/win-dialog-box)\n\t\t\t// recommend the following:\n\t\t\t// \"One of the following sets of concise commands: Yes/No, Yes/No/Cancel, [Do it]/Cancel,\n\t\t\t//  [Do it]/[Don't do it], [Do it]/[Don't do it]/Cancel.\"\n\t\t\t//\n\t\t\t// Electron APIs do not reorder buttons for us, so we ensure the position of the cancel button\n\t\t\t// (if provided) that matches the HIG\n\n\t\t\tif (\n\t\t\t\ttypeof cancelButton === \"string\" &&\n\t\t\t\tbuttons.length > 1 &&\n\t\t\t\tcancelId !== buttons.length - 1 /* last action */\n\t\t\t) {\n\t\t\t\tbuttons.splice(cancelId, 1);\n\t\t\t\tbuttons.push(cancelButton);\n\n\t\t\t\tconst buttonIndex = buttonIndeces[cancelId];\n\t\t\t\tbuttonIndeces.splice(cancelId, 1);\n\t\t\t\tbuttonIndeces.push(buttonIndex);\n\n\t\t\t\tcancelId = buttons.length - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tmassagedOptions.buttons = buttons;\n\tmassagedOptions.defaultId = defaultId;\n\tmassagedOptions.cancelId = cancelId;\n\tmassagedOptions.noLink = true;\n\tmassagedOptions.title = massagedOptions.title || productService.nameLong;\n\n\treturn {\n\t\toptions: massagedOptions,\n\t\tbuttonIndeces,\n\t};\n}\n"],
  "mappings": "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",
  "names": ["DialogKind", "ConfirmResult"]
}
