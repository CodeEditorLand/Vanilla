{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/dialogs/electron-main/dialogMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from 'electron';\nimport { Queue } from '../../../base/common/async.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { mnemonicButtonLabel } from '../../../base/common/labels.js';\nimport { Disposable, dispose, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { normalizeNFC } from '../../../base/common/normalization.js';\nimport { isMacintosh } from '../../../base/common/platform.js';\nimport { Promises } from '../../../base/node/pfs.js';\nimport { localize } from '../../../nls.js';\nimport { INativeOpenDialogOptions, massageMessageBoxOptions } from '../common/dialogs.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { WORKSPACE_FILTER } from '../../workspace/common/workspace.js';\n\nexport const IDialogMainService = createDecorator<IDialogMainService>('dialogMainService');\n\nexport interface IDialogMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\tpickFileFolder(options: INativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined>;\n\tpickFolder(options: INativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined>;\n\tpickFile(options: INativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined>;\n\tpickWorkspace(options: INativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined>;\n\n\tshowMessageBox(options: electron.MessageBoxOptions, window?: electron.BrowserWindow): Promise<electron.MessageBoxReturnValue>;\n\tshowSaveDialog(options: electron.SaveDialogOptions, window?: electron.BrowserWindow): Promise<electron.SaveDialogReturnValue>;\n\tshowOpenDialog(options: electron.OpenDialogOptions, window?: electron.BrowserWindow): Promise<electron.OpenDialogReturnValue>;\n}\n\ninterface IInternalNativeOpenDialogOptions extends INativeOpenDialogOptions {\n\treadonly pickFolders?: boolean;\n\treadonly pickFiles?: boolean;\n\n\treadonly title: string;\n\treadonly buttonLabel?: string;\n\treadonly filters?: electron.FileFilter[];\n}\n\nexport class DialogMainService implements IDialogMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly windowFileDialogLocks = new Map<number, Set<number>>();\n\tprivate readonly windowDialogQueues = new Map<number, Queue<electron.MessageBoxReturnValue | electron.SaveDialogReturnValue | electron.OpenDialogReturnValue>>();\n\tprivate readonly noWindowDialogueQueue = new Queue<electron.MessageBoxReturnValue | electron.SaveDialogReturnValue | electron.OpenDialogReturnValue>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t}\n\n\tpickFileFolder(options: INativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined> {\n\t\treturn this.doPick({ ...options, pickFolders: true, pickFiles: true, title: localize('open', \"Open\") }, window);\n\t}\n\n\tpickFolder(options: INativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined> {\n\t\treturn this.doPick({ ...options, pickFolders: true, title: localize('openFolder', \"Open Folder\") }, window);\n\t}\n\n\tpickFile(options: INativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined> {\n\t\treturn this.doPick({ ...options, pickFiles: true, title: localize('openFile', \"Open File\") }, window);\n\t}\n\n\tpickWorkspace(options: INativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined> {\n\t\tconst title = localize('openWorkspaceTitle', \"Open Workspace from File\");\n\t\tconst buttonLabel = mnemonicButtonLabel(localize({ key: 'openWorkspace', comment: ['&& denotes a mnemonic'] }, \"&&Open\"));\n\t\tconst filters = WORKSPACE_FILTER;\n\n\t\treturn this.doPick({ ...options, pickFiles: true, title, filters, buttonLabel }, window);\n\t}\n\n\tprivate async doPick(options: IInternalNativeOpenDialogOptions, window?: electron.BrowserWindow): Promise<string[] | undefined> {\n\n\t\t// Ensure dialog options\n\t\tconst dialogOptions: electron.OpenDialogOptions = {\n\t\t\ttitle: options.title,\n\t\t\tbuttonLabel: options.buttonLabel,\n\t\t\tfilters: options.filters,\n\t\t\tdefaultPath: options.defaultPath\n\t\t};\n\n\t\t// Ensure properties\n\t\tif (typeof options.pickFiles === 'boolean' || typeof options.pickFolders === 'boolean') {\n\t\t\tdialogOptions.properties = undefined; // let it override based on the booleans\n\n\t\t\tif (options.pickFiles && options.pickFolders) {\n\t\t\t\tdialogOptions.properties = ['multiSelections', 'openDirectory', 'openFile', 'createDirectory'];\n\t\t\t}\n\t\t}\n\n\t\tif (!dialogOptions.properties) {\n\t\t\tdialogOptions.properties = ['multiSelections', options.pickFolders ? 'openDirectory' : 'openFile', 'createDirectory'];\n\t\t}\n\n\t\tif (isMacintosh) {\n\t\t\tdialogOptions.properties.push('treatPackageAsDirectory'); // always drill into .app files\n\t\t}\n\n\t\t// Show Dialog\n\t\tconst result = await this.showOpenDialog(dialogOptions, (window || electron.BrowserWindow.getFocusedWindow()) ?? undefined);\n\t\tif (result && result.filePaths && result.filePaths.length > 0) {\n\t\t\treturn result.filePaths;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getWindowDialogQueue<T extends electron.MessageBoxReturnValue | electron.SaveDialogReturnValue | electron.OpenDialogReturnValue>(window?: electron.BrowserWindow): Queue<T> {\n\n\t\t// Queue message box requests per window so that one can show\n\t\t// after the other.\n\t\tif (window) {\n\t\t\tlet windowDialogQueue = this.windowDialogQueues.get(window.id);\n\t\t\tif (!windowDialogQueue) {\n\t\t\t\twindowDialogQueue = new Queue<electron.MessageBoxReturnValue | electron.SaveDialogReturnValue | electron.OpenDialogReturnValue>();\n\t\t\t\tthis.windowDialogQueues.set(window.id, windowDialogQueue);\n\t\t\t}\n\n\t\t\treturn windowDialogQueue as unknown as Queue<T>;\n\t\t} else {\n\t\t\treturn this.noWindowDialogueQueue as unknown as Queue<T>;\n\t\t}\n\t}\n\n\tshowMessageBox(rawOptions: electron.MessageBoxOptions, window?: electron.BrowserWindow): Promise<electron.MessageBoxReturnValue> {\n\t\treturn this.getWindowDialogQueue<electron.MessageBoxReturnValue>(window).queue(async () => {\n\t\t\tconst { options, buttonIndeces } = massageMessageBoxOptions(rawOptions, this.productService);\n\n\t\t\tlet result: electron.MessageBoxReturnValue | undefined = undefined;\n\t\t\tif (window) {\n\t\t\t\tresult = await electron.dialog.showMessageBox(window, options);\n\t\t\t} else {\n\t\t\t\tresult = await electron.dialog.showMessageBox(options);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tresponse: buttonIndeces[result.response],\n\t\t\t\tcheckboxChecked: result.checkboxChecked\n\t\t\t};\n\t\t});\n\t}\n\n\tasync showSaveDialog(options: electron.SaveDialogOptions, window?: electron.BrowserWindow): Promise<electron.SaveDialogReturnValue> {\n\n\t\t// Prevent duplicates of the same dialog queueing at the same time\n\t\tconst fileDialogLock = this.acquireFileDialogLock(options, window);\n\t\tif (!fileDialogLock) {\n\t\t\tthis.logService.error('[DialogMainService]: file save dialog is already or will be showing for the window with the same configuration');\n\n\t\t\treturn { canceled: true, filePath: '' };\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.getWindowDialogQueue<electron.SaveDialogReturnValue>(window).queue(async () => {\n\t\t\t\tlet result: electron.SaveDialogReturnValue;\n\t\t\t\tif (window) {\n\t\t\t\t\tresult = await electron.dialog.showSaveDialog(window, options);\n\t\t\t\t} else {\n\t\t\t\t\tresult = await electron.dialog.showSaveDialog(options);\n\t\t\t\t}\n\n\t\t\t\tresult.filePath = this.normalizePath(result.filePath);\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t} finally {\n\t\t\tdispose(fileDialogLock);\n\t\t}\n\t}\n\n\tprivate normalizePath(path: string): string;\n\tprivate normalizePath(path: string | undefined): string | undefined;\n\tprivate normalizePath(path: string | undefined): string | undefined {\n\t\tif (path && isMacintosh) {\n\t\t\tpath = normalizeNFC(path); // macOS only: normalize paths to NFC form\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate normalizePaths(paths: string[]): string[] {\n\t\treturn paths.map(path => this.normalizePath(path));\n\t}\n\n\tasync showOpenDialog(options: electron.OpenDialogOptions, window?: electron.BrowserWindow): Promise<electron.OpenDialogReturnValue> {\n\n\t\t// Ensure the path exists (if provided)\n\t\tif (options.defaultPath) {\n\t\t\tconst pathExists = await Promises.exists(options.defaultPath);\n\t\t\tif (!pathExists) {\n\t\t\t\toptions.defaultPath = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// Prevent duplicates of the same dialog queueing at the same time\n\t\tconst fileDialogLock = this.acquireFileDialogLock(options, window);\n\t\tif (!fileDialogLock) {\n\t\t\tthis.logService.error('[DialogMainService]: file open dialog is already or will be showing for the window with the same configuration');\n\n\t\t\treturn { canceled: true, filePaths: [] };\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.getWindowDialogQueue<electron.OpenDialogReturnValue>(window).queue(async () => {\n\t\t\t\tlet result: electron.OpenDialogReturnValue;\n\t\t\t\tif (window) {\n\t\t\t\t\tresult = await electron.dialog.showOpenDialog(window, options);\n\t\t\t\t} else {\n\t\t\t\t\tresult = await electron.dialog.showOpenDialog(options);\n\t\t\t\t}\n\n\t\t\t\tresult.filePaths = this.normalizePaths(result.filePaths);\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t} finally {\n\t\t\tdispose(fileDialogLock);\n\t\t}\n\t}\n\n\tprivate acquireFileDialogLock(options: electron.SaveDialogOptions | electron.OpenDialogOptions, window?: electron.BrowserWindow): IDisposable | undefined {\n\n\t\t// If no window is provided, allow as many dialogs as\n\t\t// needed since we consider them not modal per window\n\t\tif (!window) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\t// If a window is provided, only allow a single dialog\n\t\t// at the same time because dialogs are modal and we\n\t\t// do not want to open one dialog after the other\n\t\t// (https://github.com/microsoft/vscode/issues/114432)\n\t\t// we figure this out by `hashing` the configuration\n\t\t// options for the dialog to prevent duplicates\n\n\t\tthis.logService.trace('[DialogMainService]: request to acquire file dialog lock', options);\n\n\t\tlet windowFileDialogLocks = this.windowFileDialogLocks.get(window.id);\n\t\tif (!windowFileDialogLocks) {\n\t\t\twindowFileDialogLocks = new Set();\n\t\t\tthis.windowFileDialogLocks.set(window.id, windowFileDialogLocks);\n\t\t}\n\n\t\tconst optionsHash = hash(options);\n\t\tif (windowFileDialogLocks.has(optionsHash)) {\n\t\t\treturn undefined; // prevent duplicates, return\n\t\t}\n\n\t\tthis.logService.trace('[DialogMainService]: new file dialog lock created', options);\n\n\t\twindowFileDialogLocks.add(optionsHash);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.logService.trace('[DialogMainService]: file dialog lock disposed', options);\n\n\t\t\twindowFileDialogLocks?.delete(optionsHash);\n\n\t\t\t// If the window has no more dialog locks, delete it from the set of locks\n\t\t\tif (windowFileDialogLocks?.size === 0) {\n\t\t\t\tthis.windowFileDialogLocks.delete(window.id);\n\t\t\t}\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
