{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/dialogs/electron-main/dialogMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from \"electron\";\nimport { Queue } from \"../../../base/common/async.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport { mnemonicButtonLabel } from \"../../../base/common/labels.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { normalizeNFC } from \"../../../base/common/normalization.js\";\nimport { isMacintosh } from \"../../../base/common/platform.js\";\nimport { Promises } from \"../../../base/node/pfs.js\";\nimport { localize } from \"../../../nls.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { WORKSPACE_FILTER } from \"../../workspace/common/workspace.js\";\nimport {\n\ttype INativeOpenDialogOptions,\n\tmassageMessageBoxOptions,\n} from \"../common/dialogs.js\";\n\nexport const IDialogMainService =\n\tcreateDecorator<IDialogMainService>(\"dialogMainService\");\n\nexport interface IDialogMainService {\n\treadonly _serviceBrand: undefined;\n\n\tpickFileFolder(\n\t\toptions: INativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined>;\n\tpickFolder(\n\t\toptions: INativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined>;\n\tpickFile(\n\t\toptions: INativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined>;\n\tpickWorkspace(\n\t\toptions: INativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined>;\n\n\tshowMessageBox(\n\t\toptions: electron.MessageBoxOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<electron.MessageBoxReturnValue>;\n\tshowSaveDialog(\n\t\toptions: electron.SaveDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<electron.SaveDialogReturnValue>;\n\tshowOpenDialog(\n\t\toptions: electron.OpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<electron.OpenDialogReturnValue>;\n}\n\ninterface IInternalNativeOpenDialogOptions extends INativeOpenDialogOptions {\n\treadonly pickFolders?: boolean;\n\treadonly pickFiles?: boolean;\n\n\treadonly title: string;\n\treadonly buttonLabel?: string;\n\treadonly filters?: electron.FileFilter[];\n}\n\nexport class DialogMainService implements IDialogMainService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly windowFileDialogLocks = new Map<number, Set<number>>();\n\tprivate readonly windowDialogQueues = new Map<\n\t\tnumber,\n\t\tQueue<\n\t\t\t| electron.MessageBoxReturnValue\n\t\t\t| electron.SaveDialogReturnValue\n\t\t\t| electron.OpenDialogReturnValue\n\t\t>\n\t>();\n\tprivate readonly noWindowDialogueQueue = new Queue<\n\t\t| electron.MessageBoxReturnValue\n\t\t| electron.SaveDialogReturnValue\n\t\t| electron.OpenDialogReturnValue\n\t>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t}\n\n\tpickFileFolder(\n\t\toptions: INativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined> {\n\t\treturn this.doPick(\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t\tpickFolders: true,\n\t\t\t\tpickFiles: true,\n\t\t\t\ttitle: localize(\"open\", \"Open\"),\n\t\t\t},\n\t\t\twindow,\n\t\t);\n\t}\n\n\tpickFolder(\n\t\toptions: INativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined> {\n\t\treturn this.doPick(\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t\tpickFolders: true,\n\t\t\t\ttitle: localize(\"openFolder\", \"Open Folder\"),\n\t\t\t},\n\t\t\twindow,\n\t\t);\n\t}\n\n\tpickFile(\n\t\toptions: INativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined> {\n\t\treturn this.doPick(\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t\tpickFiles: true,\n\t\t\t\ttitle: localize(\"openFile\", \"Open File\"),\n\t\t\t},\n\t\t\twindow,\n\t\t);\n\t}\n\n\tpickWorkspace(\n\t\toptions: INativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined> {\n\t\tconst title = localize(\n\t\t\t\"openWorkspaceTitle\",\n\t\t\t\"Open Workspace from File\",\n\t\t);\n\t\tconst buttonLabel = mnemonicButtonLabel(\n\t\t\tlocalize(\n\t\t\t\t{ key: \"openWorkspace\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\"&&Open\",\n\t\t\t),\n\t\t);\n\t\tconst filters = WORKSPACE_FILTER;\n\n\t\treturn this.doPick(\n\t\t\t{ ...options, pickFiles: true, title, filters, buttonLabel },\n\t\t\twindow,\n\t\t);\n\t}\n\n\tprivate async doPick(\n\t\toptions: IInternalNativeOpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<string[] | undefined> {\n\t\t// Ensure dialog options\n\t\tconst dialogOptions: electron.OpenDialogOptions = {\n\t\t\ttitle: options.title,\n\t\t\tbuttonLabel: options.buttonLabel,\n\t\t\tfilters: options.filters,\n\t\t\tdefaultPath: options.defaultPath,\n\t\t};\n\n\t\t// Ensure properties\n\t\tif (\n\t\t\ttypeof options.pickFiles === \"boolean\" ||\n\t\t\ttypeof options.pickFolders === \"boolean\"\n\t\t) {\n\t\t\tdialogOptions.properties = undefined; // let it override based on the booleans\n\n\t\t\tif (options.pickFiles && options.pickFolders) {\n\t\t\t\tdialogOptions.properties = [\n\t\t\t\t\t\"multiSelections\",\n\t\t\t\t\t\"openDirectory\",\n\t\t\t\t\t\"openFile\",\n\t\t\t\t\t\"createDirectory\",\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\tif (!dialogOptions.properties) {\n\t\t\tdialogOptions.properties = [\n\t\t\t\t\"multiSelections\",\n\t\t\t\toptions.pickFolders ? \"openDirectory\" : \"openFile\",\n\t\t\t\t\"createDirectory\",\n\t\t\t];\n\t\t}\n\n\t\tif (isMacintosh) {\n\t\t\tdialogOptions.properties.push(\"treatPackageAsDirectory\"); // always drill into .app files\n\t\t}\n\n\t\t// Show Dialog\n\t\tconst result = await this.showOpenDialog(\n\t\t\tdialogOptions,\n\t\t\t(window || electron.BrowserWindow.getFocusedWindow()) ?? undefined,\n\t\t);\n\t\tif (result && result.filePaths && result.filePaths.length > 0) {\n\t\t\treturn result.filePaths;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getWindowDialogQueue<\n\t\tT extends\n\t\t\t| electron.MessageBoxReturnValue\n\t\t\t| electron.SaveDialogReturnValue\n\t\t\t| electron.OpenDialogReturnValue,\n\t>(window?: electron.BrowserWindow): Queue<T> {\n\t\t// Queue message box requests per window so that one can show\n\t\t// after the other.\n\t\tif (window) {\n\t\t\tlet windowDialogQueue = this.windowDialogQueues.get(window.id);\n\t\t\tif (!windowDialogQueue) {\n\t\t\t\twindowDialogQueue = new Queue<\n\t\t\t\t\t| electron.MessageBoxReturnValue\n\t\t\t\t\t| electron.SaveDialogReturnValue\n\t\t\t\t\t| electron.OpenDialogReturnValue\n\t\t\t\t>();\n\t\t\t\tthis.windowDialogQueues.set(window.id, windowDialogQueue);\n\t\t\t}\n\n\t\t\treturn windowDialogQueue as unknown as Queue<T>;\n\t\t} else {\n\t\t\treturn this.noWindowDialogueQueue as unknown as Queue<T>;\n\t\t}\n\t}\n\n\tshowMessageBox(\n\t\trawOptions: electron.MessageBoxOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<electron.MessageBoxReturnValue> {\n\t\treturn this.getWindowDialogQueue<electron.MessageBoxReturnValue>(\n\t\t\twindow,\n\t\t).queue(async () => {\n\t\t\tconst { options, buttonIndeces } = massageMessageBoxOptions(\n\t\t\t\trawOptions,\n\t\t\t\tthis.productService,\n\t\t\t);\n\n\t\t\tlet result: electron.MessageBoxReturnValue | undefined;\n\t\t\tif (window) {\n\t\t\t\tresult = await electron.dialog.showMessageBox(window, options);\n\t\t\t} else {\n\t\t\t\tresult = await electron.dialog.showMessageBox(options);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tresponse: buttonIndeces[result.response],\n\t\t\t\tcheckboxChecked: result.checkboxChecked,\n\t\t\t};\n\t\t});\n\t}\n\n\tasync showSaveDialog(\n\t\toptions: electron.SaveDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<electron.SaveDialogReturnValue> {\n\t\t// Prevent duplicates of the same dialog queueing at the same time\n\t\tconst fileDialogLock = this.acquireFileDialogLock(options, window);\n\t\tif (!fileDialogLock) {\n\t\t\tthis.logService.error(\n\t\t\t\t\"[DialogMainService]: file save dialog is already or will be showing for the window with the same configuration\",\n\t\t\t);\n\n\t\t\treturn { canceled: true, filePath: \"\" };\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.getWindowDialogQueue<electron.SaveDialogReturnValue>(\n\t\t\t\twindow,\n\t\t\t).queue(async () => {\n\t\t\t\tlet result: electron.SaveDialogReturnValue;\n\t\t\t\tif (window) {\n\t\t\t\t\tresult = await electron.dialog.showSaveDialog(\n\t\t\t\t\t\twindow,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tresult = await electron.dialog.showSaveDialog(options);\n\t\t\t\t}\n\n\t\t\t\tresult.filePath = this.normalizePath(result.filePath);\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t} finally {\n\t\t\tdispose(fileDialogLock);\n\t\t}\n\t}\n\n\tprivate normalizePath(path: string): string;\n\tprivate normalizePath(path: string | undefined): string | undefined;\n\tprivate normalizePath(path: string | undefined): string | undefined {\n\t\tif (path && isMacintosh) {\n\t\t\tpath = normalizeNFC(path); // macOS only: normalize paths to NFC form\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate normalizePaths(paths: string[]): string[] {\n\t\treturn paths.map((path) => this.normalizePath(path));\n\t}\n\n\tasync showOpenDialog(\n\t\toptions: electron.OpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): Promise<electron.OpenDialogReturnValue> {\n\t\t// Ensure the path exists (if provided)\n\t\tif (options.defaultPath) {\n\t\t\tconst pathExists = await Promises.exists(options.defaultPath);\n\t\t\tif (!pathExists) {\n\t\t\t\toptions.defaultPath = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// Prevent duplicates of the same dialog queueing at the same time\n\t\tconst fileDialogLock = this.acquireFileDialogLock(options, window);\n\t\tif (!fileDialogLock) {\n\t\t\tthis.logService.error(\n\t\t\t\t\"[DialogMainService]: file open dialog is already or will be showing for the window with the same configuration\",\n\t\t\t);\n\n\t\t\treturn { canceled: true, filePaths: [] };\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.getWindowDialogQueue<electron.OpenDialogReturnValue>(\n\t\t\t\twindow,\n\t\t\t).queue(async () => {\n\t\t\t\tlet result: electron.OpenDialogReturnValue;\n\t\t\t\tif (window) {\n\t\t\t\t\tresult = await electron.dialog.showOpenDialog(\n\t\t\t\t\t\twindow,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tresult = await electron.dialog.showOpenDialog(options);\n\t\t\t\t}\n\n\t\t\t\tresult.filePaths = this.normalizePaths(result.filePaths);\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t} finally {\n\t\t\tdispose(fileDialogLock);\n\t\t}\n\t}\n\n\tprivate acquireFileDialogLock(\n\t\toptions: electron.SaveDialogOptions | electron.OpenDialogOptions,\n\t\twindow?: electron.BrowserWindow,\n\t): IDisposable | undefined {\n\t\t// If no window is provided, allow as many dialogs as\n\t\t// needed since we consider them not modal per window\n\t\tif (!window) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\t// If a window is provided, only allow a single dialog\n\t\t// at the same time because dialogs are modal and we\n\t\t// do not want to open one dialog after the other\n\t\t// (https://github.com/microsoft/vscode/issues/114432)\n\t\t// we figure this out by `hashing` the configuration\n\t\t// options for the dialog to prevent duplicates\n\n\t\tthis.logService.trace(\n\t\t\t\"[DialogMainService]: request to acquire file dialog lock\",\n\t\t\toptions,\n\t\t);\n\n\t\tlet windowFileDialogLocks = this.windowFileDialogLocks.get(window.id);\n\t\tif (!windowFileDialogLocks) {\n\t\t\twindowFileDialogLocks = new Set();\n\t\t\tthis.windowFileDialogLocks.set(window.id, windowFileDialogLocks);\n\t\t}\n\n\t\tconst optionsHash = hash(options);\n\t\tif (windowFileDialogLocks.has(optionsHash)) {\n\t\t\treturn undefined; // prevent duplicates, return\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t\"[DialogMainService]: new file dialog lock created\",\n\t\t\toptions,\n\t\t);\n\n\t\twindowFileDialogLocks.add(optionsHash);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"[DialogMainService]: file dialog lock disposed\",\n\t\t\t\toptions,\n\t\t\t);\n\n\t\t\twindowFileDialogLocks?.delete(optionsHash);\n\n\t\t\t// If the window has no more dialog locks, delete it from the set of locks\n\t\t\tif (windowFileDialogLocks?.size === 0) {\n\t\t\t\tthis.windowFileDialogLocks.delete(window.id);\n\t\t\t}\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,OAAO,cAAc;AACrB,SAAS,aAAa;AACtB,SAAS,YAAY;AACrB,SAAS,2BAA2B;AACpC;AAAA,EACC;AAAA,EAEA;AAAA,EACA;AAAA,OACM;AACP,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AACzB,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC,SAAS,wBAAwB;AACjC;AAAA,EAEC;AAAA,OACM;AAEA,MAAM,qBACZ,gBAAoC,mBAAmB;AA6CjD,IAAM,oBAAN,MAAsD;AAAA,EAkB5D,YAC+B,YACI,gBACjC;AAF6B;AACI;AAAA,EAEnC;AAAA,EAhGD,OA0E6D;AAAA;AAAA;AAAA,EAG3C,wBAAwB,oBAAI,IAAyB;AAAA,EACrD,qBAAqB,oBAAI,IAOxC;AAAA,EACe,wBAAwB,IAAI,MAI3C;AAAA,EAQF,eACC,SACA,QACgC;AAChC,WAAO,KAAK;AAAA,MACX;AAAA,QACC,GAAG;AAAA,QACH,aAAa;AAAA,QACb,WAAW;AAAA,QACX,OAAO,SAAS,QAAQ,MAAM;AAAA,MAC/B;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,WACC,SACA,QACgC;AAChC,WAAO,KAAK;AAAA,MACX;AAAA,QACC,GAAG;AAAA,QACH,aAAa;AAAA,QACb,OAAO,SAAS,cAAc,aAAa;AAAA,MAC5C;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,SACC,SACA,QACgC;AAChC,WAAO,KAAK;AAAA,MACX;AAAA,QACC,GAAG;AAAA,QACH,WAAW;AAAA,QACX,OAAO,SAAS,YAAY,WAAW;AAAA,MACxC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,cACC,SACA,QACgC;AAChC,UAAM,QAAQ;AAAA,MACb;AAAA,MACA;AAAA,IACD;AACA,UAAM,cAAc;AAAA,MACnB;AAAA,QACC,EAAE,KAAK,iBAAiB,SAAS,CAAC,uBAAuB,EAAE;AAAA,QAC3D;AAAA,MACD;AAAA,IACD;AACA,UAAM,UAAU;AAEhB,WAAO,KAAK;AAAA,MACX,EAAE,GAAG,SAAS,WAAW,MAAM,OAAO,SAAS,YAAY;AAAA,MAC3D;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,OACb,SACA,QACgC;AAEhC,UAAM,gBAA4C;AAAA,MACjD,OAAO,QAAQ;AAAA,MACf,aAAa,QAAQ;AAAA,MACrB,SAAS,QAAQ;AAAA,MACjB,aAAa,QAAQ;AAAA,IACtB;AAGA,QACC,OAAO,QAAQ,cAAc,aAC7B,OAAO,QAAQ,gBAAgB,WAC9B;AACD,oBAAc,aAAa;AAE3B,UAAI,QAAQ,aAAa,QAAQ,aAAa;AAC7C,sBAAc,aAAa;AAAA,UAC1B;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,CAAC,cAAc,YAAY;AAC9B,oBAAc,aAAa;AAAA,QAC1B;AAAA,QACA,QAAQ,cAAc,kBAAkB;AAAA,QACxC;AAAA,MACD;AAAA,IACD;AAEA,QAAI,aAAa;AAChB,oBAAc,WAAW,KAAK,yBAAyB;AAAA,IACxD;AAGA,UAAM,SAAS,MAAM,KAAK;AAAA,MACzB;AAAA,OACC,UAAU,SAAS,cAAc,iBAAiB,MAAM;AAAA,IAC1D;AACA,QAAI,UAAU,OAAO,aAAa,OAAO,UAAU,SAAS,GAAG;AAC9D,aAAO,OAAO;AAAA,IACf;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,qBAKN,QAA2C;AAG5C,QAAI,QAAQ;AACX,UAAI,oBAAoB,KAAK,mBAAmB,IAAI,OAAO,EAAE;AAC7D,UAAI,CAAC,mBAAmB;AACvB,4BAAoB,IAAI,MAItB;AACF,aAAK,mBAAmB,IAAI,OAAO,IAAI,iBAAiB;AAAA,MACzD;AAEA,aAAO;AAAA,IACR,OAAO;AACN,aAAO,KAAK;AAAA,IACb;AAAA,EACD;AAAA,EAEA,eACC,YACA,QAC0C;AAC1C,WAAO,KAAK;AAAA,MACX;AAAA,IACD,EAAE,MAAM,YAAY;AACnB,YAAM,EAAE,SAAS,cAAc,IAAI;AAAA,QAClC;AAAA,QACA,KAAK;AAAA,MACN;AAEA,UAAI;AACJ,UAAI,QAAQ;AACX,iBAAS,MAAM,SAAS,OAAO,eAAe,QAAQ,OAAO;AAAA,MAC9D,OAAO;AACN,iBAAS,MAAM,SAAS,OAAO,eAAe,OAAO;AAAA,MACtD;AAEA,aAAO;AAAA,QACN,UAAU,cAAc,OAAO,QAAQ;AAAA,QACvC,iBAAiB,OAAO;AAAA,MACzB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,eACL,SACA,QAC0C;AAE1C,UAAM,iBAAiB,KAAK,sBAAsB,SAAS,MAAM;AACjE,QAAI,CAAC,gBAAgB;AACpB,WAAK,WAAW;AAAA,QACf;AAAA,MACD;AAEA,aAAO,EAAE,UAAU,MAAM,UAAU,GAAG;AAAA,IACvC;AAEA,QAAI;AACH,aAAO,MAAM,KAAK;AAAA,QACjB;AAAA,MACD,EAAE,MAAM,YAAY;AACnB,YAAI;AACJ,YAAI,QAAQ;AACX,mBAAS,MAAM,SAAS,OAAO;AAAA,YAC9B;AAAA,YACA;AAAA,UACD;AAAA,QACD,OAAO;AACN,mBAAS,MAAM,SAAS,OAAO,eAAe,OAAO;AAAA,QACtD;AAEA,eAAO,WAAW,KAAK,cAAc,OAAO,QAAQ;AAEpD,eAAO;AAAA,MACR,CAAC;AAAA,IACF,UAAE;AACD,cAAQ,cAAc;AAAA,IACvB;AAAA,EACD;AAAA,EAIQ,cAAc,MAA8C;AACnE,QAAI,QAAQ,aAAa;AACxB,aAAO,aAAa,IAAI;AAAA,IACzB;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,eAAe,OAA2B;AACjD,WAAO,MAAM,IAAI,CAAC,SAAS,KAAK,cAAc,IAAI,CAAC;AAAA,EACpD;AAAA,EAEA,MAAM,eACL,SACA,QAC0C;AAE1C,QAAI,QAAQ,aAAa;AACxB,YAAM,aAAa,MAAM,SAAS,OAAO,QAAQ,WAAW;AAC5D,UAAI,CAAC,YAAY;AAChB,gBAAQ,cAAc;AAAA,MACvB;AAAA,IACD;AAGA,UAAM,iBAAiB,KAAK,sBAAsB,SAAS,MAAM;AACjE,QAAI,CAAC,gBAAgB;AACpB,WAAK,WAAW;AAAA,QACf;AAAA,MACD;AAEA,aAAO,EAAE,UAAU,MAAM,WAAW,CAAC,EAAE;AAAA,IACxC;AAEA,QAAI;AACH,aAAO,MAAM,KAAK;AAAA,QACjB;AAAA,MACD,EAAE,MAAM,YAAY;AACnB,YAAI;AACJ,YAAI,QAAQ;AACX,mBAAS,MAAM,SAAS,OAAO;AAAA,YAC9B;AAAA,YACA;AAAA,UACD;AAAA,QACD,OAAO;AACN,mBAAS,MAAM,SAAS,OAAO,eAAe,OAAO;AAAA,QACtD;AAEA,eAAO,YAAY,KAAK,eAAe,OAAO,SAAS;AAEvD,eAAO;AAAA,MACR,CAAC;AAAA,IACF,UAAE;AACD,cAAQ,cAAc;AAAA,IACvB;AAAA,EACD;AAAA,EAEQ,sBACP,SACA,QAC0B;AAG1B,QAAI,CAAC,QAAQ;AACZ,aAAO,WAAW;AAAA,IACnB;AASA,SAAK,WAAW;AAAA,MACf;AAAA,MACA;AAAA,IACD;AAEA,QAAI,wBAAwB,KAAK,sBAAsB,IAAI,OAAO,EAAE;AACpE,QAAI,CAAC,uBAAuB;AAC3B,8BAAwB,oBAAI,IAAI;AAChC,WAAK,sBAAsB,IAAI,OAAO,IAAI,qBAAqB;AAAA,IAChE;AAEA,UAAM,cAAc,KAAK,OAAO;AAChC,QAAI,sBAAsB,IAAI,WAAW,GAAG;AAC3C,aAAO;AAAA,IACR;AAEA,SAAK,WAAW;AAAA,MACf;AAAA,MACA;AAAA,IACD;AAEA,0BAAsB,IAAI,WAAW;AAErC,WAAO,aAAa,MAAM;AACzB,WAAK,WAAW;AAAA,QACf;AAAA,QACA;AAAA,MACD;AAEA,6BAAuB,OAAO,WAAW;AAGzC,UAAI,uBAAuB,SAAS,GAAG;AACtC,aAAK,sBAAsB,OAAO,OAAO,EAAE;AAAA,MAC5C;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAvVa,oBAAN;AAAA,EAmBJ;AAAA,EACA;AAAA,GApBU;",
  "names": []
}
