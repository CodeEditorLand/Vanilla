{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/quickinput/browser/quickPickPin.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { localize } from '../../../nls.js';\nimport { IQuickPick, IQuickPickItem, QuickPickItem } from '../common/quickInput.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\n\nconst pinButtonClass = ThemeIcon.asClassName(Codicon.pin);\nconst pinnedButtonClass = ThemeIcon.asClassName(Codicon.pinned);\nconst buttonClasses = [pinButtonClass, pinnedButtonClass];\n/**\n * Initially, adds pin buttons to all @param quickPick items.\n * When pinned, a copy of the item will be moved to the end of the pinned list and any duplicate within the pinned list will\n * be removed if @param filterDupliates has been provided. Pin and pinned button events trigger updates to the underlying storage.\n * Shows the quickpick once formatted.\n */\nexport function showWithPinnedItems(storageService: IStorageService, storageKey: string, quickPick: IQuickPick<IQuickPickItem, { useSeparators: true }>, filterDuplicates?: boolean): IDisposable {\n\tconst itemsWithoutPinned = quickPick.items;\n\tlet itemsWithPinned = _formatPinnedItems(storageKey, quickPick, storageService, undefined, filterDuplicates);\n\tconst disposables = new DisposableStore();\n\tdisposables.add(quickPick.onDidTriggerItemButton(async buttonEvent => {\n\t\tconst expectedButton = buttonEvent.button.iconClass && buttonClasses.includes(buttonEvent.button.iconClass);\n\t\tif (expectedButton) {\n\t\t\tquickPick.items = itemsWithoutPinned;\n\t\t\titemsWithPinned = _formatPinnedItems(storageKey, quickPick, storageService, buttonEvent.item, filterDuplicates);\n\t\t\tquickPick.items = quickPick.value ? itemsWithoutPinned : itemsWithPinned;\n\t\t}\n\t}));\n\tdisposables.add(quickPick.onDidChangeValue(async value => {\n\t\tif (quickPick.items === itemsWithPinned && value) {\n\t\t\tquickPick.items = itemsWithoutPinned;\n\t\t} else if (quickPick.items === itemsWithoutPinned && !value) {\n\t\t\tquickPick.items = itemsWithPinned;\n\t\t}\n\t}));\n\n\tquickPick.items = quickPick.value ? itemsWithoutPinned : itemsWithPinned;\n\tquickPick.show();\n\treturn disposables;\n}\n\nfunction _formatPinnedItems(storageKey: string, quickPick: IQuickPick<IQuickPickItem, { useSeparators: true }>, storageService: IStorageService, changedItem?: IQuickPickItem, filterDuplicates?: boolean): QuickPickItem[] {\n\tconst formattedItems: QuickPickItem[] = [];\n\tlet pinnedItems;\n\tif (changedItem) {\n\t\tpinnedItems = updatePinnedItems(storageKey, changedItem, storageService);\n\t} else {\n\t\tpinnedItems = getPinnedItems(storageKey, storageService);\n\t}\n\tif (pinnedItems.length) {\n\t\tformattedItems.push({ type: 'separator', label: localize(\"terminal.commands.pinned\", 'pinned') });\n\t}\n\tconst pinnedIds = new Set();\n\tfor (const itemToFind of pinnedItems) {\n\t\tconst itemToPin = quickPick.items.find(item => itemsMatch(item, itemToFind));\n\t\tif (itemToPin) {\n\t\t\tconst pinnedItemId = getItemIdentifier(itemToPin);\n\t\t\tconst pinnedItem: IQuickPickItem = Object.assign({} as IQuickPickItem, itemToPin);\n\t\t\tif (!filterDuplicates || !pinnedIds.has(pinnedItemId)) {\n\t\t\t\tpinnedIds.add(pinnedItemId);\n\t\t\t\tupdateButtons(pinnedItem, false);\n\t\t\t\tformattedItems.push(pinnedItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const item of quickPick.items) {\n\t\tupdateButtons(item, true);\n\t\tformattedItems.push(item);\n\t}\n\treturn formattedItems;\n}\n\nfunction getItemIdentifier(item: QuickPickItem): string {\n\treturn item.type === 'separator' ? '' : item.id || `${item.label}${item.description}${item.detail}}`;\n}\n\nfunction updateButtons(item: QuickPickItem, removePin: boolean): void {\n\tif (item.type === 'separator') {\n\t\treturn;\n\t}\n\n\t// remove button classes before adding the new one\n\tconst newButtons = item.buttons?.filter(button => button.iconClass && !buttonClasses.includes(button.iconClass)) ?? [];\n\tnewButtons.unshift({\n\t\ticonClass: removePin ? pinButtonClass : pinnedButtonClass,\n\t\ttooltip: removePin ? localize('pinCommand', \"Pin command\") : localize('pinnedCommand', \"Pinned command\"),\n\t\talwaysVisible: false\n\t});\n\titem.buttons = newButtons;\n}\n\nfunction itemsMatch(itemA: QuickPickItem, itemB: QuickPickItem): boolean {\n\treturn getItemIdentifier(itemA) === getItemIdentifier(itemB);\n}\n\nfunction updatePinnedItems(storageKey: string, changedItem: IQuickPickItem, storageService: IStorageService): IQuickPickItem[] {\n\tconst removePin = changedItem.buttons?.find(b => b.iconClass === pinnedButtonClass);\n\tlet items = getPinnedItems(storageKey, storageService);\n\tif (removePin) {\n\t\titems = items.filter(item => getItemIdentifier(item) !== getItemIdentifier(changedItem));\n\t} else {\n\t\titems.push(changedItem);\n\t}\n\tstorageService.store(storageKey, JSON.stringify(items), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\treturn items;\n}\n\nfunction getPinnedItems(storageKey: string, storageService: IStorageService): IQuickPickItem[] {\n\tconst items = storageService.get(storageKey, StorageScope.WORKSPACE);\n\treturn items ? JSON.parse(items) : [];\n}\n"],
  "mappings": "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",
  "names": []
}
