import{Codicon as f}from"../../../base/common/codicons.js";import{DisposableStore as k}from"../../../base/common/lifecycle.js";import{ThemeIcon as Q}from"../../../base/common/themables.js";import{localize as u}from"../../../nls.js";import{StorageScope as C,StorageTarget as y}from"../../storage/common/storage.js";const S=Q.asClassName(f.pin),p=Q.asClassName(f.pinned),b=[S,p];function x(e,n,t,o){const s=t.items;let i=P(n,t,e,void 0,o);const r=new k;return r.add(t.onDidTriggerItemButton(async m=>{m.button.iconClass&&b.includes(m.button.iconClass)&&(t.items=s,i=P(n,t,e,m.item,o),t.items=t.value?s:i)})),r.add(t.onDidChangeValue(async m=>{t.items===i&&m?t.items=s:t.items===s&&!m&&(t.items=i)})),t.items=t.value?s:i,t.show(),r}function P(e,n,t,o,s){const i=[];let r;o?r=w(e,o,t):r=h(e,t),r.length&&i.push({type:"separator",label:u("terminal.commands.pinned","pinned")});const m=new Set;for(const a of r){const d=n.items.find(I=>B(I,a));if(d){const I=c(d),l=Object.assign({},d);(!s||!m.has(I))&&(m.add(I),g(l,!1),i.push(l))}}for(const a of n.items)g(a,!0),i.push(a);return i}function c(e){return e.type==="separator"?"":e.id||`${e.label}${e.description}${e.detail}}`}function g(e,n){if(e.type==="separator")return;const t=e.buttons?.filter(o=>o.iconClass&&!b.includes(o.iconClass))??[];t.unshift({iconClass:n?S:p,tooltip:n?u("pinCommand","Pin command"):u("pinnedCommand","Pinned command"),alwaysVisible:!1}),e.buttons=t}function B(e,n){return c(e)===c(n)}function w(e,n,t){const o=n.buttons?.find(i=>i.iconClass===p);let s=h(e,t);return o?s=s.filter(i=>c(i)!==c(n)):s.push(n),t.store(e,JSON.stringify(s),C.WORKSPACE,y.MACHINE),s}function h(e,n){const t=n.get(e,C.WORKSPACE);return t?JSON.parse(t):[]}export{x as showWithPinnedItems};
