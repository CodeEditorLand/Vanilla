{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/quickinput/browser/pickerQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from '../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { IKeyMods, IQuickPickDidAcceptEvent, IQuickPickSeparator, IQuickPick, IQuickPickItem, IQuickInputButton } from '../common/quickInput.js';\nimport { IQuickAccessProvider, IQuickAccessProviderRunOptions } from '../common/quickAccess.js';\nimport { isFunction } from '../../../base/common/types.js';\n\nexport enum TriggerAction {\n\n\t/**\n\t * Do nothing after the button was clicked.\n\t */\n\tNO_ACTION,\n\n\t/**\n\t * Close the picker.\n\t */\n\tCLOSE_PICKER,\n\n\t/**\n\t * Update the results of the picker.\n\t */\n\tREFRESH_PICKER,\n\n\t/**\n\t * Remove the item from the picker.\n\t */\n\tREMOVE_ITEM\n}\n\nexport interface IPickerQuickAccessItem extends IQuickPickItem {\n\n\t/**\n\t* A method that will be executed when the pick item is accepted from\n\t* the picker. The picker will close automatically before running this.\n\t*\n\t* @param keyMods the state of modifier keys when the item was accepted.\n\t* @param event the underlying event that caused the accept to trigger.\n\t*/\n\taccept?(keyMods: IKeyMods, event: IQuickPickDidAcceptEvent): void;\n\n\t/**\n\t * A method that will be executed when a button of the pick item was\n\t * clicked on.\n\t *\n\t * @param buttonIndex index of the button of the item that\n\t * was clicked.\n\t *\n\t * @param the state of modifier keys when the button was triggered.\n\t *\n\t * @returns a value that indicates what should happen after the trigger\n\t * which can be a `Promise` for long running operations.\n\t */\n\ttrigger?(buttonIndex: number, keyMods: IKeyMods): TriggerAction | Promise<TriggerAction>;\n}\n\nexport interface IPickerQuickAccessSeparator extends IQuickPickSeparator {\n\t/**\n\t * A method that will be executed when a button of the pick item was\n\t * clicked on.\n\t *\n\t * @param buttonIndex index of the button of the item that\n\t * was clicked.\n\t *\n\t * @param the state of modifier keys when the button was triggered.\n\t *\n\t * @returns a value that indicates what should happen after the trigger\n\t * which can be a `Promise` for long running operations.\n\t */\n\ttrigger?(buttonIndex: number, keyMods: IKeyMods): TriggerAction | Promise<TriggerAction>;\n}\n\nexport interface IPickerQuickAccessProviderOptions<T extends IPickerQuickAccessItem> {\n\n\t/**\n\t * Enables support for opening picks in the background via gesture.\n\t */\n\treadonly canAcceptInBackground?: boolean;\n\n\t/**\n\t * Enables to show a pick entry when no results are returned from a search.\n\t */\n\treadonly noResultsPick?: T | ((filter: string) => T);\n\n\t/** Whether to skip trimming the pick filter string */\n\treadonly shouldSkipTrimPickFilter?: boolean;\n}\n\nexport type Pick<T> = T | IQuickPickSeparator;\nexport type PicksWithActive<T> = { items: readonly Pick<T>[]; active?: T };\nexport type Picks<T> = readonly Pick<T>[] | PicksWithActive<T>;\nexport type FastAndSlowPicks<T> = {\n\n\t/**\n\t * Picks that will show instantly or after a short delay\n\t * based on the `mergeDelay` property to reduce flicker.\n\t */\n\treadonly picks: Picks<T>;\n\n\t/**\n\t * Picks that will show after they have been resolved.\n\t */\n\treadonly additionalPicks: Promise<Picks<T>>;\n\n\t/**\n\t * A delay in milliseconds to wait before showing the\n\t * `picks` to give a chance to merge with `additionalPicks`\n\t * for reduced flicker.\n\t */\n\treadonly mergeDelay?: number;\n};\n\nfunction isPicksWithActive<T>(obj: unknown): obj is PicksWithActive<T> {\n\tconst candidate = obj as PicksWithActive<T>;\n\n\treturn Array.isArray(candidate.items);\n}\n\nfunction isFastAndSlowPicks<T>(obj: unknown): obj is FastAndSlowPicks<T> {\n\tconst candidate = obj as FastAndSlowPicks<T>;\n\n\treturn !!candidate.picks && candidate.additionalPicks instanceof Promise;\n}\n\nexport abstract class PickerQuickAccessProvider<T extends IPickerQuickAccessItem> extends Disposable implements IQuickAccessProvider {\n\n\tconstructor(private prefix: string, protected options?: IPickerQuickAccessProviderOptions<T>) {\n\t\tsuper();\n\t}\n\n\tprovide(picker: IQuickPick<T, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Apply options if any\n\t\tpicker.canAcceptInBackground = !!this.options?.canAcceptInBackground;\n\n\t\t// Disable filtering & sorting, we control the results\n\t\tpicker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n\n\t\t// Set initial picks and update on type\n\t\tlet picksCts: CancellationTokenSource | undefined = undefined;\n\t\tconst picksDisposable = disposables.add(new MutableDisposable());\n\t\tconst updatePickerItems = async () => {\n\t\t\tconst picksDisposables = picksDisposable.value = new DisposableStore();\n\n\t\t\t// Cancel any previous ask for picks and busy\n\t\t\tpicksCts?.dispose(true);\n\t\t\tpicker.busy = false;\n\n\t\t\t// Create new cancellation source for this run\n\t\t\tpicksCts = new CancellationTokenSource(token);\n\n\t\t\t// Collect picks and support both long running and short or combined\n\t\t\tconst picksToken = picksCts.token;\n\t\t\tlet picksFilter = picker.value.substring(this.prefix.length);\n\n\t\t\tif (!this.options?.shouldSkipTrimPickFilter) {\n\t\t\t\tpicksFilter = picksFilter.trim();\n\t\t\t}\n\n\t\t\tconst providedPicks = this._getPicks(picksFilter, picksDisposables, picksToken, runOptions);\n\n\t\t\tconst applyPicks = (picks: Picks<T>, skipEmpty?: boolean): boolean => {\n\t\t\t\tlet items: readonly Pick<T>[];\n\t\t\t\tlet activeItem: T | undefined = undefined;\n\n\t\t\t\tif (isPicksWithActive(picks)) {\n\t\t\t\t\titems = picks.items;\n\t\t\t\t\tactiveItem = picks.active;\n\t\t\t\t} else {\n\t\t\t\t\titems = picks;\n\t\t\t\t}\n\n\t\t\t\tif (items.length === 0) {\n\t\t\t\t\tif (skipEmpty) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// We show the no results pick if we have no input to prevent completely empty pickers #172613\n\t\t\t\t\tif ((picksFilter.length > 0 || picker.hideInput) && this.options?.noResultsPick) {\n\t\t\t\t\t\tif (isFunction(this.options.noResultsPick)) {\n\t\t\t\t\t\t\titems = [this.options.noResultsPick(picksFilter)];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titems = [this.options.noResultsPick];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpicker.items = items;\n\t\t\t\tif (activeItem) {\n\t\t\t\t\tpicker.activeItems = [activeItem];\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\tconst applyFastAndSlowPicks = async (fastAndSlowPicks: FastAndSlowPicks<T>): Promise<void> => {\n\t\t\t\tlet fastPicksApplied = false;\n\t\t\t\tlet slowPicksApplied = false;\n\n\t\t\t\tawait Promise.all([\n\n\t\t\t\t\t// Fast Picks: if `mergeDelay` is configured, in order to reduce\n\t\t\t\t\t// amount of flicker, we race against the slow picks over some delay\n\t\t\t\t\t// and then set the fast picks.\n\t\t\t\t\t// If the slow picks are faster, we reduce the flicker by only\n\t\t\t\t\t// setting the items once.\n\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tif (typeof fastAndSlowPicks.mergeDelay === 'number') {\n\t\t\t\t\t\t\tawait timeout(fastAndSlowPicks.mergeDelay);\n\t\t\t\t\t\t\tif (picksToken.isCancellationRequested) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!slowPicksApplied) {\n\t\t\t\t\t\t\tfastPicksApplied = applyPicks(fastAndSlowPicks.picks, true /* skip over empty to reduce flicker */);\n\t\t\t\t\t\t}\n\t\t\t\t\t})(),\n\n\t\t\t\t\t// Slow Picks: we await the slow picks and then set them at\n\t\t\t\t\t// once together with the fast picks, but only if we actually\n\t\t\t\t\t// have additional results.\n\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tpicker.busy = true;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst awaitedAdditionalPicks = await fastAndSlowPicks.additionalPicks;\n\t\t\t\t\t\t\tif (picksToken.isCancellationRequested) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet picks: readonly Pick<T>[];\n\t\t\t\t\t\t\tlet activePick: Pick<T> | undefined = undefined;\n\t\t\t\t\t\t\tif (isPicksWithActive(fastAndSlowPicks.picks)) {\n\t\t\t\t\t\t\t\tpicks = fastAndSlowPicks.picks.items;\n\t\t\t\t\t\t\t\tactivePick = fastAndSlowPicks.picks.active;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpicks = fastAndSlowPicks.picks;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet additionalPicks: readonly Pick<T>[];\n\t\t\t\t\t\t\tlet additionalActivePick: Pick<T> | undefined = undefined;\n\t\t\t\t\t\t\tif (isPicksWithActive(awaitedAdditionalPicks)) {\n\t\t\t\t\t\t\t\tadditionalPicks = awaitedAdditionalPicks.items;\n\t\t\t\t\t\t\t\tadditionalActivePick = awaitedAdditionalPicks.active;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tadditionalPicks = awaitedAdditionalPicks;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (additionalPicks.length > 0 || !fastPicksApplied) {\n\t\t\t\t\t\t\t\t// If we do not have any activePick or additionalActivePick\n\t\t\t\t\t\t\t\t// we try to preserve the currently active pick from the\n\t\t\t\t\t\t\t\t// fast results. This fixes an issue where the user might\n\t\t\t\t\t\t\t\t// have made a pick active before the additional results\n\t\t\t\t\t\t\t\t// kick in.\n\t\t\t\t\t\t\t\t// See https://github.com/microsoft/vscode/issues/102480\n\t\t\t\t\t\t\t\tlet fallbackActivePick: Pick<T> | undefined = undefined;\n\t\t\t\t\t\t\t\tif (!activePick && !additionalActivePick) {\n\t\t\t\t\t\t\t\t\tconst fallbackActivePickCandidate = picker.activeItems[0];\n\t\t\t\t\t\t\t\t\tif (fallbackActivePickCandidate && picks.indexOf(fallbackActivePickCandidate) !== -1) {\n\t\t\t\t\t\t\t\t\t\tfallbackActivePick = fallbackActivePickCandidate;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tapplyPicks({\n\t\t\t\t\t\t\t\t\titems: [...picks, ...additionalPicks],\n\t\t\t\t\t\t\t\t\tactive: activePick || additionalActivePick || fallbackActivePick\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (!picksToken.isCancellationRequested) {\n\t\t\t\t\t\t\t\tpicker.busy = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tslowPicksApplied = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t})()\n\t\t\t\t]);\n\t\t\t};\n\n\t\t\t// No Picks\n\t\t\tif (providedPicks === null) {\n\t\t\t\t// Ignore\n\t\t\t}\n\n\t\t\t// Fast and Slow Picks\n\t\t\telse if (isFastAndSlowPicks(providedPicks)) {\n\t\t\t\tawait applyFastAndSlowPicks(providedPicks);\n\t\t\t}\n\n\t\t\t// Fast Picks\n\t\t\telse if (!(providedPicks instanceof Promise)) {\n\t\t\t\tapplyPicks(providedPicks);\n\t\t\t}\n\n\t\t\t// Slow Picks\n\t\t\telse {\n\t\t\t\tpicker.busy = true;\n\t\t\t\ttry {\n\t\t\t\t\tconst awaitedPicks = await providedPicks;\n\t\t\t\t\tif (picksToken.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isFastAndSlowPicks(awaitedPicks)) {\n\t\t\t\t\t\tawait applyFastAndSlowPicks(awaitedPicks);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapplyPicks(awaitedPicks);\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (!picksToken.isCancellationRequested) {\n\t\t\t\t\t\tpicker.busy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tdisposables.add(picker.onDidChangeValue(() => updatePickerItems()));\n\t\tupdatePickerItems();\n\n\t\t// Accept the pick on accept and hide picker\n\t\tdisposables.add(picker.onDidAccept(event => {\n\t\t\tif (runOptions?.handleAccept) {\n\t\t\t\tif (!event.inBackground) {\n\t\t\t\t\tpicker.hide(); // hide picker unless we accept in background\n\t\t\t\t}\n\t\t\t\trunOptions.handleAccept?.(picker.activeItems[0]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [item] = picker.selectedItems;\n\t\t\tif (typeof item?.accept === 'function') {\n\t\t\t\tif (!event.inBackground) {\n\t\t\t\t\tpicker.hide(); // hide picker unless we accept in background\n\t\t\t\t}\n\n\t\t\t\titem.accept(picker.keyMods, event);\n\t\t\t}\n\t\t}));\n\n\t\tconst buttonTrigger = async (button: IQuickInputButton, item: T | IPickerQuickAccessSeparator) => {\n\t\t\tif (typeof item.trigger !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst buttonIndex = item.buttons?.indexOf(button) ?? -1;\n\t\t\tif (buttonIndex >= 0) {\n\t\t\t\tconst result = item.trigger(buttonIndex, picker.keyMods);\n\t\t\t\tconst action = (typeof result === 'number') ? result : await result;\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase TriggerAction.NO_ACTION:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TriggerAction.CLOSE_PICKER:\n\t\t\t\t\t\tpicker.hide();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TriggerAction.REFRESH_PICKER:\n\t\t\t\t\t\tupdatePickerItems();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TriggerAction.REMOVE_ITEM: {\n\t\t\t\t\t\tconst index = picker.items.indexOf(item);\n\t\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t\tconst items = picker.items.slice();\n\t\t\t\t\t\t\tconst removed = items.splice(index, 1);\n\t\t\t\t\t\t\tconst activeItems = picker.activeItems.filter(activeItem => activeItem !== removed[0]);\n\t\t\t\t\t\t\tconst keepScrollPositionBefore = picker.keepScrollPosition;\n\t\t\t\t\t\t\tpicker.keepScrollPosition = true;\n\t\t\t\t\t\t\tpicker.items = items;\n\t\t\t\t\t\t\tif (activeItems) {\n\t\t\t\t\t\t\t\tpicker.activeItems = activeItems;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpicker.keepScrollPosition = keepScrollPositionBefore;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Trigger the pick with button index if button triggered\n\t\tdisposables.add(picker.onDidTriggerItemButton(({ button, item }) => buttonTrigger(button, item)));\n\t\tdisposables.add(picker.onDidTriggerSeparatorButton(({ button, separator }) => buttonTrigger(button, separator)));\n\n\t\treturn disposables;\n\t}\n\n\t/**\n\t * Returns an array of picks and separators as needed. If the picks are resolved\n\t * long running, the provided cancellation token should be used to cancel the\n\t * operation when the token signals this.\n\t *\n\t * The implementor is responsible for filtering and sorting the picks given the\n\t * provided `filter`.\n\t *\n\t * @param filter a filter to apply to the picks.\n\t * @param disposables can be used to register disposables that should be cleaned\n\t * up when the picker closes.\n\t * @param token for long running tasks, implementors need to check on cancellation\n\t * through this token.\n\t * @returns the picks either directly, as promise or combined fast and slow results.\n\t * Pickers can return `null` to signal that no change in picks is needed.\n\t */\n\tprotected abstract _getPicks(filter: string, disposables: DisposableStore, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): Picks<T> | Promise<Picks<T> | FastAndSlowPicks<T>> | FastAndSlowPicks<T> | null;\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,mBAAmB,+BAA+B;AAC3D,SAAS,YAAY,iBAAiB,aAAa,yBAAyB;AAC5E,SAAS,UAAU,0BAA0B,qBAAqB,YAAY,gBAAgB,yBAAyB;AACvH,SAAS,sBAAsB,sCAAsC;AACrE,SAAS,kBAAkB;AAEpB,IAAK,gBAAL,kBAAKA,mBAAL;AAKN,EAAAA,8BAAA;AAKA,EAAAA,8BAAA;AAKA,EAAAA,8BAAA;AAKA,EAAAA,8BAAA;AApBW,SAAAA;AAAA,GAAA;AAyGZ,SAAS,kBAAqB,KAAyC;AACtE,QAAM,YAAY;AAElB,SAAO,MAAM,QAAQ,UAAU,KAAK;AACrC;AAJS;AAMT,SAAS,mBAAsB,KAA0C;AACxE,QAAM,YAAY;AAElB,SAAO,CAAC,CAAC,UAAU,SAAS,UAAU,2BAA2B;AAClE;AAJS;AAMF,MAAe,kCAAoE,WAA2C;AAAA,EAEpI,YAAoB,QAA0B,SAAgD;AAC7F,UAAM;AADa;AAA0B;AAAA,EAE9C;AAAA,EArID,OAiIqI;AAAA;AAAA;AAAA,EAMpI,QAAQ,QAAgD,OAA0B,YAA0D;AAC3I,UAAM,cAAc,IAAI,gBAAgB;AAGxC,WAAO,wBAAwB,CAAC,CAAC,KAAK,SAAS;AAG/C,WAAO,eAAe,OAAO,qBAAqB,OAAO,gBAAgB,OAAO,cAAc;AAG9F,QAAI,WAAgD;AACpD,UAAM,kBAAkB,YAAY,IAAI,IAAI,kBAAkB,CAAC;AAC/D,UAAM,oBAAoB,mCAAY;AACrC,YAAM,mBAAmB,gBAAgB,QAAQ,IAAI,gBAAgB;AAGrE,gBAAU,QAAQ,IAAI;AACtB,aAAO,OAAO;AAGd,iBAAW,IAAI,wBAAwB,KAAK;AAG5C,YAAM,aAAa,SAAS;AAC5B,UAAI,cAAc,OAAO,MAAM,UAAU,KAAK,OAAO,MAAM;AAE3D,UAAI,CAAC,KAAK,SAAS,0BAA0B;AAC5C,sBAAc,YAAY,KAAK;AAAA,MAChC;AAEA,YAAM,gBAAgB,KAAK,UAAU,aAAa,kBAAkB,YAAY,UAAU;AAE1F,YAAM,aAAa,wBAAC,OAAiB,cAAiC;AACrE,YAAI;AACJ,YAAI,aAA4B;AAEhC,YAAI,kBAAkB,KAAK,GAAG;AAC7B,kBAAQ,MAAM;AACd,uBAAa,MAAM;AAAA,QACpB,OAAO;AACN,kBAAQ;AAAA,QACT;AAEA,YAAI,MAAM,WAAW,GAAG;AACvB,cAAI,WAAW;AACd,mBAAO;AAAA,UACR;AAGA,eAAK,YAAY,SAAS,KAAK,OAAO,cAAc,KAAK,SAAS,eAAe;AAChF,gBAAI,WAAW,KAAK,QAAQ,aAAa,GAAG;AAC3C,sBAAQ,CAAC,KAAK,QAAQ,cAAc,WAAW,CAAC;AAAA,YACjD,OAAO;AACN,sBAAQ,CAAC,KAAK,QAAQ,aAAa;AAAA,YACpC;AAAA,UACD;AAAA,QACD;AAEA,eAAO,QAAQ;AACf,YAAI,YAAY;AACf,iBAAO,cAAc,CAAC,UAAU;AAAA,QACjC;AAEA,eAAO;AAAA,MACR,GAhCmB;AAkCnB,YAAM,wBAAwB,8BAAO,qBAAyD;AAC7F,YAAI,mBAAmB;AACvB,YAAI,mBAAmB;AAEvB,cAAM,QAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQhB,YAAY;AACZ,gBAAI,OAAO,iBAAiB,eAAe,UAAU;AACpD,oBAAM,QAAQ,iBAAiB,UAAU;AACzC,kBAAI,WAAW,yBAAyB;AACvC;AAAA,cACD;AAAA,YACD;AAEA,gBAAI,CAAC,kBAAkB;AACtB,iCAAmB;AAAA,gBAAW,iBAAiB;AAAA,gBAAO;AAAA;AAAA,cAA4C;AAAA,YACnG;AAAA,UACD,GAAG;AAAA;AAAA;AAAA;AAAA,WAMF,YAAY;AACZ,mBAAO,OAAO;AACd,gBAAI;AACH,oBAAM,yBAAyB,MAAM,iBAAiB;AACtD,kBAAI,WAAW,yBAAyB;AACvC;AAAA,cACD;AAEA,kBAAI;AACJ,kBAAI,aAAkC;AACtC,kBAAI,kBAAkB,iBAAiB,KAAK,GAAG;AAC9C,wBAAQ,iBAAiB,MAAM;AAC/B,6BAAa,iBAAiB,MAAM;AAAA,cACrC,OAAO;AACN,wBAAQ,iBAAiB;AAAA,cAC1B;AAEA,kBAAI;AACJ,kBAAI,uBAA4C;AAChD,kBAAI,kBAAkB,sBAAsB,GAAG;AAC9C,kCAAkB,uBAAuB;AACzC,uCAAuB,uBAAuB;AAAA,cAC/C,OAAO;AACN,kCAAkB;AAAA,cACnB;AAEA,kBAAI,gBAAgB,SAAS,KAAK,CAAC,kBAAkB;AAOpD,oBAAI,qBAA0C;AAC9C,oBAAI,CAAC,cAAc,CAAC,sBAAsB;AACzC,wBAAM,8BAA8B,OAAO,YAAY,CAAC;AACxD,sBAAI,+BAA+B,MAAM,QAAQ,2BAA2B,MAAM,IAAI;AACrF,yCAAqB;AAAA,kBACtB;AAAA,gBACD;AAEA,2BAAW;AAAA,kBACV,OAAO,CAAC,GAAG,OAAO,GAAG,eAAe;AAAA,kBACpC,QAAQ,cAAc,wBAAwB;AAAA,gBAC/C,CAAC;AAAA,cACF;AAAA,YACD,UAAE;AACD,kBAAI,CAAC,WAAW,yBAAyB;AACxC,uBAAO,OAAO;AAAA,cACf;AAEA,iCAAmB;AAAA,YACpB;AAAA,UACD,GAAG;AAAA,QACJ,CAAC;AAAA,MACF,GApF8B;AAuF9B,UAAI,kBAAkB,MAAM;AAAA,MAE5B,WAGS,mBAAmB,aAAa,GAAG;AAC3C,cAAM,sBAAsB,aAAa;AAAA,MAC1C,WAGS,EAAE,yBAAyB,UAAU;AAC7C,mBAAW,aAAa;AAAA,MACzB,OAGK;AACJ,eAAO,OAAO;AACd,YAAI;AACH,gBAAM,eAAe,MAAM;AAC3B,cAAI,WAAW,yBAAyB;AACvC;AAAA,UACD;AAEA,cAAI,mBAAmB,YAAY,GAAG;AACrC,kBAAM,sBAAsB,YAAY;AAAA,UACzC,OAAO;AACN,uBAAW,YAAY;AAAA,UACxB;AAAA,QACD,UAAE;AACD,cAAI,CAAC,WAAW,yBAAyB;AACxC,mBAAO,OAAO;AAAA,UACf;AAAA,QACD;AAAA,MACD;AAAA,IACD,GA/K0B;AAgL1B,gBAAY,IAAI,OAAO,iBAAiB,MAAM,kBAAkB,CAAC,CAAC;AAClE,sBAAkB;AAGlB,gBAAY,IAAI,OAAO,YAAY,WAAS;AAC3C,UAAI,YAAY,cAAc;AAC7B,YAAI,CAAC,MAAM,cAAc;AACxB,iBAAO,KAAK;AAAA,QACb;AACA,mBAAW,eAAe,OAAO,YAAY,CAAC,CAAC;AAC/C;AAAA,MACD;AAEA,YAAM,CAAC,IAAI,IAAI,OAAO;AACtB,UAAI,OAAO,MAAM,WAAW,YAAY;AACvC,YAAI,CAAC,MAAM,cAAc;AACxB,iBAAO,KAAK;AAAA,QACb;AAEA,aAAK,OAAO,OAAO,SAAS,KAAK;AAAA,MAClC;AAAA,IACD,CAAC,CAAC;AAEF,UAAM,gBAAgB,8BAAO,QAA2B,SAA0C;AACjG,UAAI,OAAO,KAAK,YAAY,YAAY;AACvC;AAAA,MACD;AAEA,YAAM,cAAc,KAAK,SAAS,QAAQ,MAAM,KAAK;AACrD,UAAI,eAAe,GAAG;AACrB,cAAM,SAAS,KAAK,QAAQ,aAAa,OAAO,OAAO;AACvD,cAAM,SAAU,OAAO,WAAW,WAAY,SAAS,MAAM;AAE7D,YAAI,MAAM,yBAAyB;AAClC;AAAA,QACD;AAEA,gBAAQ,QAAQ;AAAA,UACf,KAAK;AACJ;AAAA,UACD,KAAK;AACJ,mBAAO,KAAK;AACZ;AAAA,UACD,KAAK;AACJ,8BAAkB;AAClB;AAAA,UACD,KAAK,qBAA2B;AAC/B,kBAAM,QAAQ,OAAO,MAAM,QAAQ,IAAI;AACvC,gBAAI,UAAU,IAAI;AACjB,oBAAM,QAAQ,OAAO,MAAM,MAAM;AACjC,oBAAM,UAAU,MAAM,OAAO,OAAO,CAAC;AACrC,oBAAM,cAAc,OAAO,YAAY,OAAO,gBAAc,eAAe,QAAQ,CAAC,CAAC;AACrF,oBAAM,2BAA2B,OAAO;AACxC,qBAAO,qBAAqB;AAC5B,qBAAO,QAAQ;AACf,kBAAI,aAAa;AAChB,uBAAO,cAAc;AAAA,cACtB;AACA,qBAAO,qBAAqB;AAAA,YAC7B;AACA;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,GAzCsB;AA4CtB,gBAAY,IAAI,OAAO,uBAAuB,CAAC,EAAE,QAAQ,KAAK,MAAM,cAAc,QAAQ,IAAI,CAAC,CAAC;AAChG,gBAAY,IAAI,OAAO,4BAA4B,CAAC,EAAE,QAAQ,UAAU,MAAM,cAAc,QAAQ,SAAS,CAAC,CAAC;AAE/G,WAAO;AAAA,EACR;AAmBD;",
  "names": ["TriggerAction"]
}
