{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/quickinput/browser/commandsQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from '../../../base/common/actions.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ILocalizedString } from '../../action/common/action.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationChangeEvent, IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { FastAndSlowPicks, IPickerQuickAccessItem, IPickerQuickAccessProviderOptions, PickerQuickAccessProvider, Picks } from './pickerQuickAccess.js';\nimport { IQuickAccessProviderRunOptions } from '../common/quickAccess.js';\nimport { IQuickPickSeparator } from '../common/quickInput.js';\nimport { IStorageService, StorageScope, StorageTarget, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n\nexport interface ICommandQuickPick extends IPickerQuickAccessItem {\n\treadonly commandId: string;\n\treadonly commandWhen?: string;\n\treadonly commandAlias?: string;\n\treadonly commandDescription?: ILocalizedString;\n\ttfIdfScore?: number;\n\treadonly args?: any[];\n}\n\nexport interface ICommandsQuickAccessOptions extends IPickerQuickAccessProviderOptions<ICommandQuickPick> {\n\treadonly showAlias: boolean;\n\tsuggestedCommandIds?: Set<string>;\n}\n\nexport abstract class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider<ICommandQuickPick> implements IDisposable {\n\n\tstatic PREFIX = '>';\n\n\tprivate static readonly TFIDF_THRESHOLD = 0.5;\n\tprivate static readonly TFIDF_MAX_RESULTS = 5;\n\n\tprivate static WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\n\n\tprivate readonly commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n\n\tprotected override readonly options: ICommandsQuickAccessOptions;\n\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IKeybindingService protected readonly keybindingService: IKeybindingService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tsuper(AbstractCommandsQuickAccessProvider.PREFIX, options);\n\n\t\tthis.options = options;\n\t}\n\n\tprotected async _getPicks(filter: string, _disposables: DisposableStore, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): Promise<Picks<ICommandQuickPick> | FastAndSlowPicks<ICommandQuickPick>> {\n\n\t\t// Ask subclass for all command picks\n\t\tconst allCommandPicks = await this.getCommandPicks(token);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst runTfidf = createSingleCallFunction(() => {\n\t\t\tconst tfidf = new TfIdfCalculator();\n\t\t\ttfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n\t\t\t\tkey: commandPick.commandId,\n\t\t\t\ttextChunks: [this.getTfIdfChunk(commandPick)]\n\t\t\t})));\n\t\t\tconst result = tfidf.calculateScores(filter, token);\n\n\t\t\treturn normalizeTfIdfScores(result)\n\t\t\t\t.filter(score => score.score > AbstractCommandsQuickAccessProvider.TFIDF_THRESHOLD)\n\t\t\t\t.slice(0, AbstractCommandsQuickAccessProvider.TFIDF_MAX_RESULTS);\n\t\t});\n\n\t\t// Filter\n\t\tconst filteredCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const commandPick of allCommandPicks) {\n\t\t\tconst labelHighlights = AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.label) ?? undefined;\n\t\t\tconst aliasHighlights = commandPick.commandAlias ? AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.commandAlias) ?? undefined : undefined;\n\n\t\t\t// Add if matching in label or alias\n\t\t\tif (labelHighlights || aliasHighlights) {\n\t\t\t\tcommandPick.highlights = {\n\t\t\t\t\tlabel: labelHighlights,\n\t\t\t\t\tdetail: this.options.showAlias ? aliasHighlights : undefined\n\t\t\t\t};\n\n\t\t\t\tfilteredCommandPicks.push(commandPick);\n\t\t\t}\n\n\t\t\t// Also add if we have a 100% command ID match\n\t\t\telse if (filter === commandPick.commandId) {\n\t\t\t\tfilteredCommandPicks.push(commandPick);\n\t\t\t}\n\n\t\t\t// Handle tf-idf scoring for the rest if there's a filter\n\t\t\telse if (filter.length >= 3) {\n\t\t\t\tconst tfidf = runTfidf();\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\t// Add if we have a tf-idf score\n\t\t\t\tconst tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n\t\t\t\tif (tfidfScore) {\n\t\t\t\t\tcommandPick.tfIdfScore = tfidfScore.score;\n\t\t\t\t\tfilteredCommandPicks.push(commandPick);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add description to commands that have duplicate labels\n\t\tconst mapLabelToCommand = new Map<string, ICommandQuickPick>();\n\t\tfor (const commandPick of filteredCommandPicks) {\n\t\t\tconst existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n\t\t\tif (existingCommandForLabel) {\n\t\t\t\tcommandPick.description = commandPick.commandId;\n\t\t\t\texistingCommandForLabel.description = existingCommandForLabel.commandId;\n\t\t\t} else {\n\t\t\t\tmapLabelToCommand.set(commandPick.label, commandPick);\n\t\t\t}\n\t\t}\n\n\t\t// Sort by MRU order and fallback to name otherwise\n\t\tfilteredCommandPicks.sort((commandPickA, commandPickB) => {\n\t\t\t// If a result came from tf-idf, we want to put that towards the bottom\n\t\t\tif (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n\t\t\t\tif (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n\t\t\t\t\treturn commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n\t\t\t\t}\n\t\t\t\treturn commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n\t\t\t} else if (commandPickA.tfIdfScore) {\n\t\t\t\treturn 1; // first command has a score but other doesn't so other wins\n\t\t\t} else if (commandPickB.tfIdfScore) {\n\t\t\t\treturn -1; // other command has a score but first doesn't so first wins\n\t\t\t}\n\n\t\t\tconst commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n\t\t\tconst commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n\n\t\t\tif (commandACounter && commandBCounter) {\n\t\t\t\treturn commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n\t\t\t}\n\n\t\t\tif (commandACounter) {\n\t\t\t\treturn -1; // first command was used, so it wins over the non used one\n\t\t\t}\n\n\t\t\tif (commandBCounter) {\n\t\t\t\treturn 1; // other command was used so it wins over the command\n\t\t\t}\n\n\t\t\tif (this.options.suggestedCommandIds) {\n\t\t\t\tconst commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n\t\t\t\tconst commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n\t\t\t\tif (commandASuggestion && commandBSuggestion) {\n\t\t\t\t\treturn 0; // honor the order of the array\n\t\t\t\t}\n\n\t\t\t\tif (commandASuggestion) {\n\t\t\t\t\treturn -1; // first command was suggested, so it wins over the non suggested one\n\t\t\t\t}\n\n\t\t\t\tif (commandBSuggestion) {\n\t\t\t\t\treturn 1; // other command was suggested so it wins over the command\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// both commands were never used, so we sort by name\n\t\t\treturn commandPickA.label.localeCompare(commandPickB.label);\n\t\t});\n\n\t\tconst commandPicks: Array<ICommandQuickPick | IQuickPickSeparator> = [];\n\n\t\tlet addOtherSeparator = false;\n\t\tlet addSuggestedSeparator = true;\n\t\tlet addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n\t\tfor (let i = 0; i < filteredCommandPicks.length; i++) {\n\t\t\tconst commandPick = filteredCommandPicks[i];\n\n\t\t\t// Separator: recently used\n\t\t\tif (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n\t\t\t\tcommandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\n\t\t\t\taddOtherSeparator = true;\n\t\t\t}\n\n\t\t\tif (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n\t\t\t\tcommandPicks.push({ type: 'separator', label: localize('suggested', \"similar commands\") });\n\t\t\t\taddSuggestedSeparator = false;\n\t\t\t}\n\n\t\t\t// Separator: commonly used\n\t\t\tif (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n\t\t\t\tcommandPicks.push({ type: 'separator', label: localize('commonlyUsed', \"commonly used\") });\n\t\t\t\taddOtherSeparator = true;\n\t\t\t\taddCommonlyUsedSeparator = false;\n\t\t\t}\n\n\t\t\t// Separator: other commands\n\t\t\tif (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n\t\t\t\tcommandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\n\t\t\t\taddOtherSeparator = false;\n\t\t\t}\n\n\t\t\t// Command\n\t\t\tcommandPicks.push(this.toCommandPick(commandPick, runOptions));\n\t\t}\n\n\t\tif (!this.hasAdditionalCommandPicks(filter, token)) {\n\t\t\treturn commandPicks;\n\t\t}\n\n\t\treturn {\n\t\t\tpicks: commandPicks,\n\t\t\tadditionalPicks: (async (): Promise<Picks<ICommandQuickPick>> => {\n\t\t\t\tconst additionalCommandPicks = await this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tconst commandPicks: Array<ICommandQuickPick | IQuickPickSeparator> = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n\t\t\t\t// Basically, if we haven't already added a separator, we add one before the additional picks so long\n\t\t\t\t// as one hasn't been added to the start of the array.\n\t\t\t\tif (addSuggestedSeparator && commandPicks[0]?.type !== 'separator') {\n\t\t\t\t\tcommandPicks.unshift({ type: 'separator', label: localize('suggested', \"similar commands\") });\n\t\t\t\t}\n\t\t\t\treturn commandPicks;\n\t\t\t})()\n\t\t};\n\t}\n\n\tprivate toCommandPick(commandPick: ICommandQuickPick | IQuickPickSeparator, runOptions?: IQuickAccessProviderRunOptions): ICommandQuickPick | IQuickPickSeparator {\n\t\tif (commandPick.type === 'separator') {\n\t\t\treturn commandPick;\n\t\t}\n\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n\t\tconst ariaLabel = keybinding ?\n\t\t\tlocalize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\n\t\t\tcommandPick.label;\n\n\t\treturn {\n\t\t\t...commandPick,\n\t\t\tariaLabel,\n\t\t\tdetail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n\t\t\tkeybinding,\n\t\t\taccept: async () => {\n\n\t\t\t\t// Add to history\n\t\t\t\tthis.commandsHistory.push(commandPick.commandId);\n\n\t\t\t\t// Telementry\n\t\t\t\tthis.telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', {\n\t\t\t\t\tid: commandPick.commandId,\n\t\t\t\t\tfrom: runOptions?.from ?? 'quick open'\n\t\t\t\t});\n\n\t\t\t\t// Run\n\t\t\t\ttry {\n\t\t\t\t\tcommandPick.args?.length\n\t\t\t\t\t\t? await this.commandService.executeCommand(commandPick.commandId, ...commandPick.args)\n\t\t\t\t\t\t: await this.commandService.executeCommand(commandPick.commandId);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!isCancellationError(error)) {\n\t\t\t\t\t\tthis.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// TF-IDF string to be indexed\n\tprivate getTfIdfChunk({ label, commandAlias, commandDescription }: ICommandQuickPick) {\n\t\tlet chunk = label;\n\t\tif (commandAlias && commandAlias !== label) {\n\t\t\tchunk += ` - ${commandAlias}`;\n\t\t}\n\t\tif (commandDescription && commandDescription.value !== label) {\n\t\t\t// If the original is the same as the value, don't add it\n\t\t\tchunk += ` - ${commandDescription.value === commandDescription.original ? commandDescription.value : `${commandDescription.value} (${commandDescription.original})`}`;\n\t\t}\n\t\treturn chunk;\n\t}\n\n\tprotected abstract getCommandPicks(token: CancellationToken): Promise<Array<ICommandQuickPick>>;\n\n\tprotected abstract hasAdditionalCommandPicks(filter: string, token: CancellationToken): boolean;\n\tprotected abstract getAdditionalCommandPicks(allPicks: ICommandQuickPick[], picksSoFar: ICommandQuickPick[], filter: string, token: CancellationToken): Promise<Array<ICommandQuickPick | IQuickPickSeparator>>;\n}\n\ninterface ISerializedCommandHistory {\n\treadonly usesLRU?: boolean;\n\treadonly entries: { key: string; value: number }[];\n}\n\ninterface ICommandsQuickAccessConfiguration {\n\treadonly workbench: {\n\t\treadonly commandPalette: {\n\t\t\treadonly history: number;\n\t\t\treadonly preserveInput: boolean;\n\t\t};\n\t};\n}\n\nexport class CommandsHistory extends Disposable {\n\n\tstatic readonly DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\n\n\tprivate static readonly PREF_KEY_CACHE = 'commandPalette.mru.cache';\n\tprivate static readonly PREF_KEY_COUNTER = 'commandPalette.mru.counter';\n\n\tprivate static cache: LRUCache<string, number> | undefined;\n\tprivate static counter = 1;\n\tprivate static hasChanges = false;\n\n\tprivate configuredCommandsHistoryLength = 0;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateConfiguration();\n\t\tthis.load();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n\t\tthis._register(this.storageService.onWillSaveState(e => {\n\t\t\tif (e.reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\t// Commands history is very dynamic and so we limit impact\n\t\t\t\t// on storage to only save on shutdown. This helps reduce\n\t\t\t\t// the overhead of syncing this data across machines.\n\t\t\t\tthis.saveState();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateConfiguration(e?: IConfigurationChangeEvent): void {\n\t\tif (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.configuredCommandsHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(this.configurationService);\n\n\t\tif (CommandsHistory.cache && CommandsHistory.cache.limit !== this.configuredCommandsHistoryLength) {\n\t\t\tCommandsHistory.cache.limit = this.configuredCommandsHistoryLength;\n\t\t\tCommandsHistory.hasChanges = true;\n\t\t}\n\t}\n\n\tprivate load(): void {\n\t\tconst raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, StorageScope.PROFILE);\n\t\tlet serializedCache: ISerializedCommandHistory | undefined;\n\t\tif (raw) {\n\t\t\ttry {\n\t\t\t\tserializedCache = JSON.parse(raw);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(`[CommandsHistory] invalid data: ${error}`);\n\t\t\t}\n\t\t}\n\n\t\tconst cache = CommandsHistory.cache = new LRUCache<string, number>(this.configuredCommandsHistoryLength, 1);\n\t\tif (serializedCache) {\n\t\t\tlet entries: { key: string; value: number }[];\n\t\t\tif (serializedCache.usesLRU) {\n\t\t\t\tentries = serializedCache.entries;\n\t\t\t} else {\n\t\t\t\tentries = serializedCache.entries.sort((a, b) => a.value - b.value);\n\t\t\t}\n\t\t\tentries.forEach(entry => cache.set(entry.key, entry.value));\n\t\t}\n\n\t\tCommandsHistory.counter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, StorageScope.PROFILE, CommandsHistory.counter);\n\t}\n\n\tpush(commandId: string): void {\n\t\tif (!CommandsHistory.cache) {\n\t\t\treturn;\n\t\t}\n\n\t\tCommandsHistory.cache.set(commandId, CommandsHistory.counter++); // set counter to command\n\t\tCommandsHistory.hasChanges = true;\n\t}\n\n\tpeek(commandId: string): number | undefined {\n\t\treturn CommandsHistory.cache?.peek(commandId);\n\t}\n\n\tprivate saveState(): void {\n\t\tif (!CommandsHistory.cache) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!CommandsHistory.hasChanges) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst serializedCache: ISerializedCommandHistory = { usesLRU: true, entries: [] };\n\t\tCommandsHistory.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\n\n\t\tthis.storageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), StorageScope.PROFILE, StorageTarget.USER);\n\t\tthis.storageService.store(CommandsHistory.PREF_KEY_COUNTER, CommandsHistory.counter, StorageScope.PROFILE, StorageTarget.USER);\n\t\tCommandsHistory.hasChanges = false;\n\t}\n\n\tstatic getConfiguredCommandHistoryLength(configurationService: IConfigurationService): number {\n\t\tconst config = <ICommandsQuickAccessConfiguration>configurationService.getValue();\n\n\t\tconst configuredCommandHistoryLength = config.workbench?.commandPalette?.history;\n\t\tif (typeof configuredCommandHistoryLength === 'number') {\n\t\t\treturn configuredCommandHistoryLength;\n\t\t}\n\n\t\treturn CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;\n\t}\n\n\tstatic clearHistory(configurationService: IConfigurationService, storageService: IStorageService): void {\n\t\tconst commandHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(configurationService);\n\t\tCommandsHistory.cache = new LRUCache<string, number>(commandHistoryLength);\n\t\tCommandsHistory.counter = 1;\n\n\t\tCommandsHistory.hasChanges = true;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["commandPicks"]
}
