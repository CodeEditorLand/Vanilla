import*as o from"../../../base/browser/dom.js";import{DomEmitter as c}from"../../../base/browser/event.js";import{StandardKeyboardEvent as h}from"../../../base/browser/keyboardEvent.js";import{Gesture as v,EventType as S}from"../../../base/browser/touch.js";import{renderLabelWithIcons as E}from"../../../base/browser/ui/iconLabel/iconLabels.js";import{Event as m}from"../../../base/common/event.js";import{IdGenerator as w}from"../../../base/common/idGenerator.js";import{KeyCode as u}from"../../../base/common/keyCodes.js";import{parseLinkedText as T}from"../../../base/common/linkedText.js";import"./media/quickInput.css";import{localize as x}from"../../../nls.js";const p={},$=new w("quick-input-button-icon-");function D(t){if(!t)return;let e;const n=t.dark.toString();return p[n]?e=p[n]:(e=$.nextId(),o.createCSSRule(`.${e}, .hc-light .${e}`,`background-image: ${o.asCSSUrl(t.light||t.dark)}`),o.createCSSRule(`.vs-dark .${e}, .hc-black .${e}`,`background-image: ${o.asCSSUrl(t.dark)}`),p[n]=e),e}function Q(t,e,n){let r=t.iconClass||D(t.iconPath);return t.alwaysVisible&&(r=r?`${r} always-visible`:"always-visible"),{id:e,label:"",tooltip:t.tooltip||"",class:r,enabled:!0,run:n}}function W(t,e,n){o.reset(e);const r=T(t);let f=0;for(const s of r.nodes)if(typeof s=="string")e.append(...E(s));else{let a=s.title;!a&&s.href.startsWith("command:")?a=x("executeCommand","Click to execute command '{0}'",s.href.substring(8)):a||(a=s.href);const i=o.$("a",{href:s.href,title:a,tabIndex:f++},s.label);i.style.textDecoration="underline";const b=l=>{o.isEventLike(l)&&o.EventHelper.stop(l,!0),n.callback(s.href)},k=n.disposables.add(new c(i,o.EventType.CLICK)).event,g=n.disposables.add(new c(i,o.EventType.KEY_DOWN)).event,y=m.chain(g,l=>l.filter(C=>{const d=new h(C);return d.equals(u.Space)||d.equals(u.Enter)}));n.disposables.add(v.addTarget(i));const I=n.disposables.add(new c(i,S.Tap)).event;m.any(k,I,y)(b,null,n.disposables),e.appendChild(i)}}export{Q as quickInputButtonToAction,W as renderQuickInputDescription};
