import*as o from"../../../../vs/base/browser/dom.js";import{DomEmitter as d}from"../../../../vs/base/browser/event.js";import{StandardKeyboardEvent as v}from"../../../../vs/base/browser/keyboardEvent.js";import{Gesture as y,EventType as S}from"../../../../vs/base/browser/touch.js";import{renderLabelWithIcons as E}from"../../../../vs/base/browser/ui/iconLabel/iconLabels.js";import{Event as m}from"../../../../vs/base/common/event.js";import{IdGenerator as w}from"../../../../vs/base/common/idGenerator.js";import{KeyCode as u}from"../../../../vs/base/common/keyCodes.js";import{parseLinkedText as T}from"../../../../vs/base/common/linkedText.js";import"../../../../vs/base/common/uri.js";import"vs/css!./media/quickInput";import"../../../../vs/base/common/actions.js";import"../../../../vs/base/common/lifecycle.js";import{localize as x}from"../../../../vs/nls.js";import"../../../../vs/platform/quickinput/common/quickInput.js";const p={},$=new w("quick-input-button-icon-");function D(t){if(!t)return;let e;const n=t.dark.toString();return p[n]?e=p[n]:(e=$.nextId(),o.createCSSRule(`.${e}, .hc-light .${e}`,`background-image: ${o.asCSSUrl(t.light||t.dark)}`),o.createCSSRule(`.vs-dark .${e}, .hc-black .${e}`,`background-image: ${o.asCSSUrl(t.dark)}`),p[n]=e),e}function F(t,e,n){let s=t.iconClass||D(t.iconPath);return t.alwaysVisible&&(s=s?`${s} always-visible`:"always-visible"),{id:e,label:"",tooltip:t.tooltip||"",class:s,enabled:!0,run:n}}function J(t,e,n){o.reset(e);const s=T(t);let f=0;for(const r of s.nodes)if(typeof r=="string")e.append(...E(r));else{let a=r.title;!a&&r.href.startsWith("command:")?a=x("executeCommand","Click to execute command '{0}'",r.href.substring(8)):a||(a=r.href);const i=o.$("a",{href:r.href,title:a,tabIndex:f++},r.label);i.style.textDecoration="underline";const b=l=>{o.isEventLike(l)&&o.EventHelper.stop(l,!0),n.callback(r.href)},k=n.disposables.add(new d(i,o.EventType.CLICK)).event,g=n.disposables.add(new d(i,o.EventType.KEY_DOWN)).event,I=m.chain(g,l=>l.filter(h=>{const c=new v(h);return c.equals(u.Space)||c.equals(u.Enter)}));n.disposables.add(y.addTarget(i));const C=n.disposables.add(new d(i,S.Tap)).event;m.any(k,C,I)(b,null,n.disposables),e.appendChild(i)}}export{F as quickInputButtonToAction,J as renderQuickInputDescription};
