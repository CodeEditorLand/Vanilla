{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/quickinput/browser/helpQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IKeybindingService } from \"../../keybinding/common/keybinding.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\nimport {\n\tExtensions,\n\ttype IQuickAccessProvider,\n\ttype IQuickAccessProviderDescriptor,\n\ttype IQuickAccessRegistry,\n} from \"../common/quickAccess.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPick,\n\ttype IQuickPickItem,\n} from \"../common/quickInput.js\";\n\ninterface IHelpQuickAccessPickItem extends IQuickPickItem {\n\treadonly prefix: string;\n}\n\nexport class HelpQuickAccessProvider implements IQuickAccessProvider {\n\tstatic PREFIX = \"?\";\n\n\tprivate readonly registry = Registry.as<IQuickAccessRegistry>(\n\t\tExtensions.Quickaccess,\n\t);\n\n\tconstructor(\n\t\t@IQuickInputService\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\t@IKeybindingService\n\t\tprivate readonly keybindingService: IKeybindingService,\n\t) {}\n\n\tprovide(\n\t\tpicker: IQuickPick<IHelpQuickAccessPickItem, { useSeparators: true }>,\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Open a picker with the selected value if picked\n\t\tdisposables.add(\n\t\t\tpicker.onDidAccept(() => {\n\t\t\t\tconst [item] = picker.selectedItems;\n\t\t\t\tif (item) {\n\t\t\t\t\tthis.quickInputService.quickAccess.show(item.prefix, {\n\t\t\t\t\t\tpreserveValue: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Also open a picker when we detect the user typed the exact\n\t\t// name of a provider (e.g. `?term` for terminals)\n\t\tdisposables.add(\n\t\t\tpicker.onDidChangeValue((value) => {\n\t\t\t\tconst providerDescriptor = this.registry.getQuickAccessProvider(\n\t\t\t\t\tvalue.substr(HelpQuickAccessProvider.PREFIX.length),\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tproviderDescriptor &&\n\t\t\t\t\tproviderDescriptor.prefix &&\n\t\t\t\t\tproviderDescriptor.prefix !== HelpQuickAccessProvider.PREFIX\n\t\t\t\t) {\n\t\t\t\t\tthis.quickInputService.quickAccess.show(\n\t\t\t\t\t\tproviderDescriptor.prefix,\n\t\t\t\t\t\t{ preserveValue: true },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Fill in all providers\n\t\tpicker.items = this.getQuickAccessProviders().filter(\n\t\t\t(p) => p.prefix !== HelpQuickAccessProvider.PREFIX,\n\t\t);\n\n\t\treturn disposables;\n\t}\n\n\tgetQuickAccessProviders(): IHelpQuickAccessPickItem[] {\n\t\tconst providers: IHelpQuickAccessPickItem[] = this.registry\n\t\t\t.getQuickAccessProviders()\n\t\t\t.sort((providerA, providerB) =>\n\t\t\t\tproviderA.prefix.localeCompare(providerB.prefix),\n\t\t\t)\n\t\t\t.flatMap((provider) => this.createPicks(provider));\n\n\t\treturn providers;\n\t}\n\n\tprivate createPicks(\n\t\tprovider: IQuickAccessProviderDescriptor,\n\t): IHelpQuickAccessPickItem[] {\n\t\treturn provider.helpEntries.map((helpEntry) => {\n\t\t\tconst prefix = helpEntry.prefix || provider.prefix;\n\t\t\tconst label = prefix || \"\\u2026\" /* ... */;\n\n\t\t\treturn {\n\t\t\t\tprefix,\n\t\t\t\tlabel,\n\t\t\t\tkeybinding: helpEntry.commandId\n\t\t\t\t\t? this.keybindingService.lookupKeybinding(\n\t\t\t\t\t\t\thelpEntry.commandId,\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tariaLabel: localize(\n\t\t\t\t\t\"helpPickAriaLabel\",\n\t\t\t\t\t\"{0}, {1}\",\n\t\t\t\t\tlabel,\n\t\t\t\t\thelpEntry.description,\n\t\t\t\t),\n\t\t\t\tdescription: helpEntry.description,\n\t\t\t};\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EACC;AAAA,OAEM;AACP,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,OAIM;AACP;AAAA,EACC;AAAA,OAGM;AAMA,IAAM,0BAAN,MAA8D;AAAA,EAOpE,YAEkB,mBAEA,mBAChB;AAHgB;AAEA;AAAA,EACf;AAAA,EAxCJ,OA4BqE;AAAA;AAAA;AAAA,EACpE,OAAO,SAAS;AAAA,EAEC,WAAW,SAAS;AAAA,IACpC,WAAW;AAAA,EACZ;AAAA,EASA,QACC,QACc;AACd,UAAM,cAAc,IAAI,gBAAgB;AAGxC,gBAAY;AAAA,MACX,OAAO,YAAY,MAAM;AACxB,cAAM,CAAC,IAAI,IAAI,OAAO;AACtB,YAAI,MAAM;AACT,eAAK,kBAAkB,YAAY,KAAK,KAAK,QAAQ;AAAA,YACpD,eAAe;AAAA,UAChB,CAAC;AAAA,QACF;AAAA,MACD,CAAC;AAAA,IACF;AAIA,gBAAY;AAAA,MACX,OAAO,iBAAiB,CAAC,UAAU;AAClC,cAAM,qBAAqB,KAAK,SAAS;AAAA,UACxC,MAAM,OAAO,wBAAwB,OAAO,MAAM;AAAA,QACnD;AACA,YACC,sBACA,mBAAmB,UACnB,mBAAmB,WAAW,wBAAwB,QACrD;AACD,eAAK,kBAAkB,YAAY;AAAA,YAClC,mBAAmB;AAAA,YACnB,EAAE,eAAe,KAAK;AAAA,UACvB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAGA,WAAO,QAAQ,KAAK,wBAAwB,EAAE;AAAA,MAC7C,CAAC,MAAM,EAAE,WAAW,wBAAwB;AAAA,IAC7C;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,0BAAsD;AACrD,UAAM,YAAwC,KAAK,SACjD,wBAAwB,EACxB;AAAA,MAAK,CAAC,WAAW,cACjB,UAAU,OAAO,cAAc,UAAU,MAAM;AAAA,IAChD,EACC,QAAQ,CAAC,aAAa,KAAK,YAAY,QAAQ,CAAC;AAElD,WAAO;AAAA,EACR;AAAA,EAEQ,YACP,UAC6B;AAC7B,WAAO,SAAS,YAAY,IAAI,CAAC,cAAc;AAC9C,YAAM,SAAS,UAAU,UAAU,SAAS;AAC5C,YAAM,QAAQ,UAAU;AAExB,aAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA,YAAY,UAAU,YACnB,KAAK,kBAAkB;AAAA,UACvB,UAAU;AAAA,QACX,IACC;AAAA,QACH,WAAW;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA,UAAU;AAAA,QACX;AAAA,QACA,aAAa,UAAU;AAAA,MACxB;AAAA,IACD,CAAC;AAAA,EACF;AACD;AA/Fa,0BAAN;AAAA,EAQJ;AAAA,EAEA;AAAA,GAVU;",
  "names": []
}
