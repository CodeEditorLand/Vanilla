{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/quickinput/browser/quickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions, IQuickAccessController, IQuickAccessOptions, IQuickAccessProvider, IQuickAccessProviderDescriptor, IQuickAccessRegistry } from '../common/quickAccess.js';\nimport { IQuickInputService, IQuickPick, IQuickPickItem, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nexport class QuickAccessController extends Disposable implements IQuickAccessController {\n\n\tprivate readonly registry = Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess);\n\tprivate readonly mapProviderToDescriptor = new Map<IQuickAccessProviderDescriptor, IQuickAccessProvider>();\n\n\tprivate readonly lastAcceptedPickerValues = new Map<IQuickAccessProviderDescriptor, string>();\n\n\tprivate visibleQuickAccess: {\n\t\treadonly picker: IQuickPick<IQuickPickItem, { useSeparators: true }>;\n\t\treadonly descriptor: IQuickAccessProviderDescriptor | undefined;\n\t\treadonly value: string;\n\t} | undefined = undefined;\n\n\tconstructor(\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t}\n\n\tpick(value = '', options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined> {\n\t\treturn this.doShowOrPick(value, true, options);\n\t}\n\n\tshow(value = '', options?: IQuickAccessOptions): void {\n\t\tthis.doShowOrPick(value, false, options);\n\t}\n\n\tprivate doShowOrPick(value: string, pick: true, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined>;\n\tprivate doShowOrPick(value: string, pick: false, options?: IQuickAccessOptions): void;\n\tprivate doShowOrPick(value: string, pick: boolean, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined> | void {\n\n\t\t// Find provider for the value to show\n\t\tconst [provider, descriptor] = this.getOrInstantiateProvider(value, options?.enabledProviderPrefixes);\n\n\t\t// Return early if quick access is already showing on that same prefix\n\t\tconst visibleQuickAccess = this.visibleQuickAccess;\n\t\tconst visibleDescriptor = visibleQuickAccess?.descriptor;\n\t\tif (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n\n\t\t\t// Apply value only if it is more specific than the prefix\n\t\t\t// from the provider and we are not instructed to preserve\n\t\t\tif (value !== descriptor.prefix && !options?.preserveValue) {\n\t\t\t\tvisibleQuickAccess.picker.value = value;\n\t\t\t}\n\n\t\t\t// Always adjust selection\n\t\t\tthis.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Rewrite the filter value based on certain rules unless disabled\n\t\tif (descriptor && !options?.preserveValue) {\n\t\t\tlet newValue: string | undefined = undefined;\n\n\t\t\t// If we have a visible provider with a value, take it's filter value but\n\t\t\t// rewrite to new provider prefix in case they differ\n\t\t\tif (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n\t\t\t\tconst newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n\t\t\t\tif (newValueCandidateWithoutPrefix) {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise, take a default value as instructed\n\t\t\tif (!newValue) {\n\t\t\t\tconst defaultFilterValue = provider?.defaultFilterValue;\n\t\t\t\tif (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n\t\t\t\t\tnewValue = this.lastAcceptedPickerValues.get(descriptor);\n\t\t\t\t} else if (typeof defaultFilterValue === 'string') {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${defaultFilterValue}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof newValue === 'string') {\n\t\t\t\tvalue = newValue;\n\t\t\t}\n\t\t}\n\n\t\t// Store the existing selection if there was one.\n\t\tconst visibleSelection = visibleQuickAccess?.picker?.valueSelection;\n\t\tconst visibleValue = visibleQuickAccess?.picker?.value;\n\n\t\t// Create a picker for the provider to use with the initial value\n\t\t// and adjust the filtering to exclude the prefix from filtering\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = disposables.add(this.quickInputService.createQuickPick({ useSeparators: true }));\n\t\tpicker.value = value;\n\t\tthis.adjustValueSelection(picker, descriptor, options);\n\t\tpicker.placeholder = options?.placeholder ?? descriptor?.placeholder;\n\t\tpicker.quickNavigate = options?.quickNavigateConfiguration;\n\t\tpicker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n\t\tif (typeof options?.itemActivation === 'number' || options?.quickNavigateConfiguration) {\n\t\t\tpicker.itemActivation = options?.itemActivation ?? ItemActivation.SECOND /* quick nav is always second */;\n\t\t}\n\t\tpicker.contextKey = descriptor?.contextKey;\n\t\tpicker.filterValue = (value: string) => value.substring(descriptor ? descriptor.prefix.length : 0);\n\n\t\t// Pick mode: setup a promise that can be resolved\n\t\t// with the selected items and prevent execution\n\t\tlet pickPromise: DeferredPromise<IQuickPickItem[]> | undefined = undefined;\n\t\tif (pick) {\n\t\t\tpickPromise = new DeferredPromise<IQuickPickItem[]>();\n\t\t\tdisposables.add(Event.once(picker.onWillAccept)(e => {\n\t\t\t\te.veto();\n\t\t\t\tpicker.hide();\n\t\t\t}));\n\t\t}\n\n\t\t// Register listeners\n\t\tdisposables.add(this.registerPickerListeners(picker, provider, descriptor, value, options));\n\n\t\t// Ask provider to fill the picker as needed if we have one\n\t\t// and pass over a cancellation token that will indicate when\n\t\t// the picker is hiding without a pick being made.\n\t\tconst cts = disposables.add(new CancellationTokenSource());\n\t\tif (provider) {\n\t\t\tdisposables.add(provider.provide(picker, cts.token, options?.providerOptions));\n\t\t}\n\n\t\t// Finally, trigger disposal and cancellation when the picker\n\t\t// hides depending on items selected or not.\n\t\tEvent.once(picker.onDidHide)(() => {\n\t\t\tif (picker.selectedItems.length === 0) {\n\t\t\t\tcts.cancel();\n\t\t\t}\n\n\t\t\t// Start to dispose once picker hides\n\t\t\tdisposables.dispose();\n\n\t\t\t// Resolve pick promise with selected items\n\t\t\tpickPromise?.complete(picker.selectedItems.slice(0));\n\t\t});\n\n\t\t// Finally, show the picker. This is important because a provider\n\t\t// may not call this and then our disposables would leak that rely\n\t\t// on the onDidHide event.\n\t\tpicker.show();\n\n\t\t// If the previous picker had a selection and the value is unchanged, we should set that in the new picker.\n\t\tif (visibleSelection && visibleValue === value) {\n\t\t\tpicker.valueSelection = visibleSelection;\n\t\t}\n\n\t\t// Pick mode: return with promise\n\t\tif (pick) {\n\t\t\treturn pickPromise?.p;\n\t\t}\n\t}\n\n\tprivate adjustValueSelection(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, descriptor?: IQuickAccessProviderDescriptor, options?: IQuickAccessOptions): void {\n\t\tlet valueSelection: [number, number];\n\n\t\t// Preserve: just always put the cursor at the end\n\t\tif (options?.preserveValue) {\n\t\t\tvalueSelection = [picker.value.length, picker.value.length];\n\t\t}\n\n\t\t// Otherwise: select the value up until the prefix\n\t\telse {\n\t\t\tvalueSelection = [descriptor?.prefix.length ?? 0, picker.value.length];\n\t\t}\n\n\t\tpicker.valueSelection = valueSelection;\n\t}\n\n\tprivate registerPickerListeners(\n\t\tpicker: IQuickPick<IQuickPickItem, { useSeparators: true }>,\n\t\tprovider: IQuickAccessProvider | undefined,\n\t\tdescriptor: IQuickAccessProviderDescriptor | undefined,\n\t\tvalue: string,\n\t\toptions?: IQuickAccessOptions\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Remember as last visible picker and clean up once picker get's disposed\n\t\tconst visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\n\t\tdisposables.add(toDisposable(() => {\n\t\t\tif (visibleQuickAccess === this.visibleQuickAccess) {\n\t\t\t\tthis.visibleQuickAccess = undefined;\n\t\t\t}\n\t\t}));\n\n\t\t// Whenever the value changes, check if the provider has\n\t\t// changed and if so - re-create the picker from the beginning\n\t\tdisposables.add(picker.onDidChangeValue(value => {\n\t\t\tconst [providerForValue] = this.getOrInstantiateProvider(value, options?.enabledProviderPrefixes);\n\t\t\tif (providerForValue !== provider) {\n\t\t\t\tthis.show(value, {\n\t\t\t\t\tenabledProviderPrefixes: options?.enabledProviderPrefixes,\n\t\t\t\t\t// do not rewrite value from user typing!\n\t\t\t\t\tpreserveValue: true,\n\t\t\t\t\t// persist the value of the providerOptions from the original showing\n\t\t\t\t\tproviderOptions: options?.providerOptions\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvisibleQuickAccess.value = value; // remember the value in our visible one\n\t\t\t}\n\t\t}));\n\n\t\t// Remember picker input for future use when accepting\n\t\tif (descriptor) {\n\t\t\tdisposables.add(picker.onDidAccept(() => {\n\t\t\t\tthis.lastAcceptedPickerValues.set(descriptor, picker.value);\n\t\t\t}));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tprivate getOrInstantiateProvider(value: string, enabledProviderPrefixes?: string[]): [IQuickAccessProvider | undefined, IQuickAccessProviderDescriptor | undefined] {\n\t\tconst providerDescriptor = this.registry.getQuickAccessProvider(value);\n\t\tif (!providerDescriptor || enabledProviderPrefixes && !enabledProviderPrefixes?.includes(providerDescriptor.prefix)) {\n\t\t\treturn [undefined, undefined];\n\t\t}\n\n\t\tlet provider = this.mapProviderToDescriptor.get(providerDescriptor);\n\t\tif (!provider) {\n\t\t\tprovider = this.instantiationService.createInstance(providerDescriptor.ctor);\n\t\t\tthis.mapProviderToDescriptor.set(providerDescriptor, provider);\n\t\t}\n\n\t\treturn [provider, providerDescriptor];\n\t}\n}\n"],
  "mappings": "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",
  "names": ["value"]
}
