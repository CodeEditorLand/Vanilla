{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/quickinput/browser/quickInputBox.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from \"../../../base/browser/dom.js\";\nimport type { StandardKeyboardEvent } from \"../../../base/browser/keyboardEvent.js\";\nimport type { StandardMouseEvent } from \"../../../base/browser/mouseEvent.js\";\nimport { FindInput } from \"../../../base/browser/ui/findinput/findInput.js\";\nimport {\n\ttype IInputBoxStyles,\n\ttype IRange,\n\tMessageType,\n} from \"../../../base/browser/ui/inputbox/inputBox.js\";\nimport type {\n\tIToggleStyles,\n\tToggle,\n} from \"../../../base/browser/ui/toggle/toggle.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport Severity from \"../../../base/common/severity.js\";\nimport \"./media/quickInput.css\";\n\nconst $ = dom.$;\n\nexport class QuickInputBox extends Disposable {\n\tprivate container: HTMLElement;\n\tprivate findInput: FindInput;\n\n\tconstructor(\n\t\tprivate parent: HTMLElement,\n\t\tinputBoxStyles: IInputBoxStyles,\n\t\ttoggleStyles: IToggleStyles,\n\t) {\n\t\tsuper();\n\t\tthis.container = dom.append(this.parent, $(\".quick-input-box\"));\n\t\tthis.findInput = this._register(\n\t\t\tnew FindInput(this.container, undefined, {\n\t\t\t\tlabel: \"\",\n\t\t\t\tinputBoxStyles,\n\t\t\t\ttoggleStyles,\n\t\t\t}),\n\t\t);\n\t\tconst input = this.findInput.inputBox.inputElement;\n\t\tinput.role = \"combobox\";\n\t\tinput.ariaHasPopup = \"menu\";\n\t\tinput.ariaAutoComplete = \"list\";\n\t\tinput.ariaExpanded = \"true\";\n\t}\n\n\tonKeyDown = (\n\t\thandler: (event: StandardKeyboardEvent) => void,\n\t): IDisposable => {\n\t\treturn dom.addStandardDisposableListener(\n\t\t\tthis.findInput.inputBox.inputElement,\n\t\t\tdom.EventType.KEY_DOWN,\n\t\t\thandler,\n\t\t);\n\t};\n\n\tonMouseDown = (\n\t\thandler: (event: StandardMouseEvent) => void,\n\t): IDisposable => {\n\t\treturn dom.addStandardDisposableListener(\n\t\t\tthis.findInput.inputBox.inputElement,\n\t\t\tdom.EventType.MOUSE_DOWN,\n\t\t\thandler,\n\t\t);\n\t};\n\n\tonDidChange = (handler: (event: string) => void): IDisposable => {\n\t\treturn this.findInput.onDidChange(handler);\n\t};\n\n\tget value() {\n\t\treturn this.findInput.getValue();\n\t}\n\n\tset value(value: string) {\n\t\tthis.findInput.setValue(value);\n\t}\n\n\tselect(range: IRange | null = null): void {\n\t\tthis.findInput.inputBox.select(range);\n\t}\n\n\tgetSelection(): IRange | null {\n\t\treturn this.findInput.inputBox.getSelection();\n\t}\n\n\tisSelectionAtEnd(): boolean {\n\t\treturn this.findInput.inputBox.isSelectionAtEnd();\n\t}\n\n\tsetPlaceholder(placeholder: string): void {\n\t\tthis.findInput.inputBox.setPlaceHolder(placeholder);\n\t}\n\n\tget placeholder() {\n\t\treturn (\n\t\t\tthis.findInput.inputBox.inputElement.getAttribute(\"placeholder\") ||\n\t\t\t\"\"\n\t\t);\n\t}\n\n\tset placeholder(placeholder: string) {\n\t\tthis.findInput.inputBox.setPlaceHolder(placeholder);\n\t}\n\n\tget password() {\n\t\treturn this.findInput.inputBox.inputElement.type === \"password\";\n\t}\n\n\tset password(password: boolean) {\n\t\tthis.findInput.inputBox.inputElement.type = password\n\t\t\t? \"password\"\n\t\t\t: \"text\";\n\t}\n\n\tset enabled(enabled: boolean) {\n\t\t// We can't disable the input box because it is still used for\n\t\t// navigating the list. Instead, we disable the list and the OK\n\t\t// so that nothing can be selected.\n\t\t// TODO: should this be what we do for all find inputs? Or maybe some _other_ API\n\t\t// on findInput to change it to readonly?\n\t\tthis.findInput.inputBox.inputElement.toggleAttribute(\n\t\t\t\"readonly\",\n\t\t\t!enabled,\n\t\t);\n\t\t// TODO: styles of the quick pick need to be moved to the CSS instead of being in line\n\t\t// so things like this can be done in CSS\n\t\t// this.findInput.inputBox.inputElement.classList.toggle('disabled', !enabled);\n\t}\n\n\tset toggles(toggles: Toggle[] | undefined) {\n\t\tthis.findInput.setAdditionalToggles(toggles);\n\t}\n\n\thasFocus(): boolean {\n\t\treturn this.findInput.inputBox.hasFocus();\n\t}\n\n\tsetAttribute(name: string, value: string): void {\n\t\tthis.findInput.inputBox.inputElement.setAttribute(name, value);\n\t}\n\n\tremoveAttribute(name: string): void {\n\t\tthis.findInput.inputBox.inputElement.removeAttribute(name);\n\t}\n\n\tshowDecoration(decoration: Severity): void {\n\t\tif (decoration === Severity.Ignore) {\n\t\t\tthis.findInput.clearMessage();\n\t\t} else {\n\t\t\tthis.findInput.showMessage({\n\t\t\t\ttype:\n\t\t\t\t\tdecoration === Severity.Info\n\t\t\t\t\t\t? MessageType.INFO\n\t\t\t\t\t\t: decoration === Severity.Warning\n\t\t\t\t\t\t\t? MessageType.WARNING\n\t\t\t\t\t\t\t: MessageType.ERROR,\n\t\t\t\tcontent: \"\",\n\t\t\t});\n\t\t}\n\t}\n\n\tstylesForType(decoration: Severity) {\n\t\treturn this.findInput.inputBox.stylesForType(\n\t\t\tdecoration === Severity.Info\n\t\t\t\t? MessageType.INFO\n\t\t\t\t: decoration === Severity.Warning\n\t\t\t\t\t? MessageType.WARNING\n\t\t\t\t\t: MessageType.ERROR,\n\t\t);\n\t}\n\n\tsetFocus(): void {\n\t\tthis.findInput.focus();\n\t}\n\n\tlayout(): void {\n\t\tthis.findInput.inputBox.layout();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
