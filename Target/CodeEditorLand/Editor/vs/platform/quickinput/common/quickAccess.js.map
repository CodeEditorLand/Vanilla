{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/quickinput/common/quickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../base/common/arrays.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\nimport type {\n\tIQuickNavigateConfiguration,\n\tIQuickPick,\n\tIQuickPickItem,\n\tItemActivation,\n\tQuickPickItem,\n} from \"./quickInput.js\";\n\n/**\n * Provider specific options for this particular showing of the\n * quick access.\n */\nexport interface IQuickAccessProviderRunOptions {\n\treadonly from?: string;\n\treadonly placeholder?: string;\n\t/**\n\t * A handler to invoke when an item is accepted for\n\t * this particular showing of the quick access.\n\t * @param item The item that was accepted.\n\t */\n\treadonly handleAccept?: (item: IQuickPickItem) => void;\n}\n\n/**\n * The specific options for the AnythingQuickAccessProvider. Put here to share between layers.\n */\nexport interface AnythingQuickAccessProviderRunOptions\n\textends IQuickAccessProviderRunOptions {\n\treadonly includeHelp?: boolean;\n\treadonly filter?: (item: unknown) => boolean;\n\t/**\n\t * @deprecated - temporary for Dynamic Chat Variables (see usage) until it has built-in UX for file picking\n\t * Useful for adding items to the top of the list that might contain actions.\n\t */\n\treadonly additionPicks?: QuickPickItem[];\n}\n\nexport interface IQuickAccessOptions {\n\t/**\n\t * Allows to enable quick navigate support in quick input.\n\t */\n\treadonly quickNavigateConfiguration?: IQuickNavigateConfiguration;\n\n\t/**\n\t * Allows to configure a different item activation strategy.\n\t * By default the first item in the list will get activated.\n\t */\n\treadonly itemActivation?: ItemActivation;\n\n\t/**\n\t * Whether to take the input value as is and not restore it\n\t * from any existing value if quick access is visible.\n\t */\n\treadonly preserveValue?: boolean;\n\n\t/**\n\t * Provider specific options for this particular showing of the\n\t * quick access.\n\t */\n\treadonly providerOptions?: IQuickAccessProviderRunOptions;\n\n\t/**\n\t * An array of provider prefixes to enable for this\n\t * particular showing of the quick access.\n\t */\n\treadonly enabledProviderPrefixes?: string[];\n\n\t/**\n\t * A placeholder to use for this particular showing of the quick access.\n\t */\n\treadonly placeholder?: string;\n}\n\nexport interface IQuickAccessController {\n\t/**\n\t * Open the quick access picker with the optional value prefilled.\n\t */\n\tshow(value?: string, options?: IQuickAccessOptions): void;\n\n\t/**\n\t * Same as `show()` but instead of executing the selected pick item,\n\t * it will be returned. May return `undefined` in case no item was\n\t * picked by the user.\n\t */\n\tpick(\n\t\tvalue?: string,\n\t\toptions?: IQuickAccessOptions,\n\t): Promise<IQuickPickItem[] | undefined>;\n}\n\nexport enum DefaultQuickAccessFilterValue {\n\t/**\n\t * Keep the value as it is given to quick access.\n\t */\n\tPRESERVE = 0,\n\n\t/**\n\t * Use the value that was used last time something was accepted from the picker.\n\t */\n\tLAST = 1,\n}\n\nexport interface IQuickAccessProvider {\n\t/**\n\t * Allows to set a default filter value when the provider opens. This can be:\n\t * - `undefined` to not specify any default value\n\t * - `DefaultFilterValues.PRESERVE` to use the value that was last typed\n\t * - `string` for the actual value to use\n\t *\n\t * Note: the default filter will only be used if quick access was opened with\n\t * the exact prefix of the provider. Otherwise the filter value is preserved.\n\t */\n\treadonly defaultFilterValue?: string | DefaultQuickAccessFilterValue;\n\n\t/**\n\t * Called whenever a prefix was typed into quick pick that matches the provider.\n\t *\n\t * @param picker the picker to use for showing provider results. The picker is\n\t * automatically shown after the method returns, no need to call `show()`.\n\t * @param token providers have to check the cancellation token everytime after\n\t * a long running operation or from event handlers because it could be that the\n\t * picker has been closed or changed meanwhile. The token can be used to find out\n\t * that the picker was closed without picking an entry (e.g. was canceled by the user).\n\t * @param options additional configuration specific for this provider that will\n\t * influence what picks will be shown.\n\t * @return a disposable that will automatically be disposed when the picker\n\t * closes or is replaced by another picker.\n\t */\n\tprovide(\n\t\tpicker: IQuickPick<IQuickPickItem, { useSeparators: true }>,\n\t\ttoken: CancellationToken,\n\t\toptions?: IQuickAccessProviderRunOptions,\n\t): IDisposable;\n}\n\nexport interface IQuickAccessProviderHelp {\n\t/**\n\t * The prefix to show for the help entry. If not provided,\n\t * the prefix used for registration will be taken.\n\t */\n\treadonly prefix?: string;\n\n\t/**\n\t * A description text to help understand the intent of the provider.\n\t */\n\treadonly description: string;\n\n\t/**\n\t * The command to bring up this quick access provider.\n\t */\n\treadonly commandId?: string;\n\n\t/**\n\t * The order of help entries in the Command Center.\n\t * Lower values will be placed above higher values.\n\t * No value will hide this help entry from the Command Center.\n\t */\n\treadonly commandCenterOrder?: number;\n\n\t/**\n\t * An optional label to use for the Command Center entry. If not set\n\t * the description will be used instead.\n\t */\n\treadonly commandCenterLabel?: string;\n}\n\nexport interface IQuickAccessProviderDescriptor {\n\t/**\n\t * The actual provider that will be instantiated as needed.\n\t */\n\treadonly ctor: {\n\t\tnew (\n\t\t\t...services: any /* TS BrandedService but no clue how to type this properly */[]\n\t\t): IQuickAccessProvider;\n\t};\n\n\t/**\n\t * The prefix for quick access picker to use the provider for.\n\t */\n\treadonly prefix: string;\n\n\t/**\n\t * A placeholder to use for the input field when the provider is active.\n\t * This will also be read out by screen readers and thus helps for\n\t * accessibility.\n\t */\n\treadonly placeholder?: string;\n\n\t/**\n\t * Documentation for the provider in the quick access help.\n\t */\n\treadonly helpEntries: IQuickAccessProviderHelp[];\n\n\t/**\n\t * A context key that will be set automatically when the\n\t * picker for the provider is showing.\n\t */\n\treadonly contextKey?: string;\n}\n\nexport const Extensions = {\n\tQuickaccess: \"workbench.contributions.quickaccess\",\n};\n\nexport interface IQuickAccessRegistry {\n\t/**\n\t * Registers a quick access provider to the platform.\n\t */\n\tregisterQuickAccessProvider(\n\t\tprovider: IQuickAccessProviderDescriptor,\n\t): IDisposable;\n\n\t/**\n\t * Get all registered quick access providers.\n\t */\n\tgetQuickAccessProviders(): IQuickAccessProviderDescriptor[];\n\n\t/**\n\t * Get a specific quick access provider for a given prefix.\n\t */\n\tgetQuickAccessProvider(\n\t\tprefix: string,\n\t): IQuickAccessProviderDescriptor | undefined;\n}\n\nexport class QuickAccessRegistry implements IQuickAccessRegistry {\n\tprivate providers: IQuickAccessProviderDescriptor[] = [];\n\tprivate defaultProvider: IQuickAccessProviderDescriptor | undefined =\n\t\tundefined;\n\n\tregisterQuickAccessProvider(\n\t\tprovider: IQuickAccessProviderDescriptor,\n\t): IDisposable {\n\t\t// Extract the default provider when no prefix is present\n\t\tif (provider.prefix.length === 0) {\n\t\t\tthis.defaultProvider = provider;\n\t\t} else {\n\t\t\tthis.providers.push(provider);\n\t\t}\n\n\t\t// sort the providers by decreasing prefix length, such that longer\n\t\t// prefixes take priority: 'ext' vs 'ext install' - the latter should win\n\t\tthis.providers.sort(\n\t\t\t(providerA, providerB) =>\n\t\t\t\tproviderB.prefix.length - providerA.prefix.length,\n\t\t);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.providers.splice(this.providers.indexOf(provider), 1);\n\n\t\t\tif (this.defaultProvider === provider) {\n\t\t\t\tthis.defaultProvider = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tgetQuickAccessProviders(): IQuickAccessProviderDescriptor[] {\n\t\treturn coalesce([this.defaultProvider, ...this.providers]);\n\t}\n\n\tgetQuickAccessProvider(\n\t\tprefix: string,\n\t): IQuickAccessProviderDescriptor | undefined {\n\t\tconst result = prefix\n\t\t\t? this.providers.find((provider) =>\n\t\t\t\t\tprefix.startsWith(provider.prefix),\n\t\t\t\t) || undefined\n\t\t\t: undefined;\n\n\t\treturn result || this.defaultProvider;\n\t}\n\n\tclear(): Function {\n\t\tconst providers = [...this.providers];\n\t\tconst defaultProvider = this.defaultProvider;\n\n\t\tthis.providers = [];\n\t\tthis.defaultProvider = undefined;\n\n\t\treturn () => {\n\t\t\tthis.providers = providers;\n\t\t\tthis.defaultProvider = defaultProvider;\n\t\t};\n\t}\n}\n\nRegistry.add(Extensions.Quickaccess, new QuickAccessRegistry());\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AAEzB;AAAA,EAEC;AAAA,OACM;AACP,SAAS,gBAAgB;AA2FlB,IAAK,gCAAL,kBAAKA,mCAAL;AAIN,EAAAA,8DAAA,cAAW,KAAX;AAKA,EAAAA,8DAAA,UAAO,KAAP;AATW,SAAAA;AAAA,GAAA;AA8GL,MAAM,aAAa;AAAA,EACzB,aAAa;AACd;AAuBO,MAAM,oBAAoD;AAAA,EA7OjE,OA6OiE;AAAA;AAAA;AAAA,EACxD,YAA8C,CAAC;AAAA,EAC/C,kBACP;AAAA,EAED,4BACC,UACc;AAEd,QAAI,SAAS,OAAO,WAAW,GAAG;AACjC,WAAK,kBAAkB;AAAA,IACxB,OAAO;AACN,WAAK,UAAU,KAAK,QAAQ;AAAA,IAC7B;AAIA,SAAK,UAAU;AAAA,MACd,CAAC,WAAW,cACX,UAAU,OAAO,SAAS,UAAU,OAAO;AAAA,IAC7C;AAEA,WAAO,aAAa,MAAM;AACzB,WAAK,UAAU,OAAO,KAAK,UAAU,QAAQ,QAAQ,GAAG,CAAC;AAEzD,UAAI,KAAK,oBAAoB,UAAU;AACtC,aAAK,kBAAkB;AAAA,MACxB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,0BAA4D;AAC3D,WAAO,SAAS,CAAC,KAAK,iBAAiB,GAAG,KAAK,SAAS,CAAC;AAAA,EAC1D;AAAA,EAEA,uBACC,QAC6C;AAC7C,UAAM,SAAS,SACZ,KAAK,UAAU;AAAA,MAAK,CAAC,aACrB,OAAO,WAAW,SAAS,MAAM;AAAA,IAClC,KAAK,SACJ;AAEH,WAAO,UAAU,KAAK;AAAA,EACvB;AAAA,EAEA,QAAkB;AACjB,UAAM,YAAY,CAAC,GAAG,KAAK,SAAS;AACpC,UAAM,kBAAkB,KAAK;AAE7B,SAAK,YAAY,CAAC;AAClB,SAAK,kBAAkB;AAEvB,WAAO,MAAM;AACZ,WAAK,YAAY;AACjB,WAAK,kBAAkB;AAAA,IACxB;AAAA,EACD;AACD;AAEA,SAAS,IAAI,WAAW,aAAa,IAAI,oBAAoB,CAAC;",
  "names": ["DefaultQuickAccessFilterValue"]
}
