import r from"assert";import{unthemedInboxStyles as u}from"../../../../base/browser/ui/inputbox/inputBox.js";import{unthemedButtonStyles as l}from"../../../../base/browser/ui/button/button.js";import{unthemedListStyles as m}from"../../../../base/browser/ui/list/listWidget.js";import{unthemedToggleStyles as d}from"../../../../base/browser/ui/toggle/toggle.js";import{Event as p}from"../../../../base/common/event.js";import{raceTimeout as s}from"../../../../base/common/async.js";import{unthemedCountStyles as k}from"../../../../base/browser/ui/countBadge/countBadge.js";import{unthemedKeybindingLabelOptions as f}from"../../../../base/browser/ui/keybindingLabel/keybindingLabel.js";import{unthemedProgressBarOptions as v}from"../../../../base/browser/ui/progressbar/progressbar.js";import{QuickInputController as g}from"../../browser/quickInputController.js";import{TestThemeService as h}from"../../../theme/test/common/testThemeService.js";import{ensureNoDisposablesAreLeakedInTestSuite as I}from"../../../../base/test/common/utils.js";import{toDisposable as b}from"../../../../base/common/lifecycle.js";import{mainWindow as w}from"../../../../base/browser/window.js";import"../../browser/quickInput.js";import{ItemActivation as y}from"../../common/quickInput.js";import{TestInstantiationService as S}from"../../../instantiation/test/common/instantiationServiceMock.js";import{IThemeService as P}from"../../../theme/common/themeService.js";import{IConfigurationService as q}from"../../../configuration/common/configuration.js";import{TestConfigurationService as E}from"../../../configuration/test/common/testConfigurationService.js";import{ILayoutService as C}from"../../../layout/browser/layoutService.js";import{IContextViewService as Q}from"../../../contextview/browser/contextView.js";import{IListService as T,ListService as D}from"../../../list/browser/listService.js";import{IContextKeyService as A}from"../../../contextkey/common/contextkey.js";import{ContextKeyService as x}from"../../../contextkey/browser/contextKeyService.js";import{NoMatchingKb as L}from"../../../keybinding/common/keybindingResolver.js";import{IKeybindingService as B}from"../../../keybinding/common/keybinding.js";import{ContextViewService as K}from"../../../contextview/browser/contextViewService.js";import{IAccessibilityService as F}from"../../../accessibility/common/accessibility.js";import{TestAccessibilityService as N}from"../../../accessibility/test/common/testAccessibilityService.js";async function a(c){if(!await s(new Promise(e=>{const t=c.onShow(i=>{t.dispose(),e(!0)})}),2e3))throw new Error("Cancelled")}suite("QuickInput",()=>{const c=I();let o;setup(()=>{const e=document.createElement("div");w.document.body.appendChild(e),c.add(b(()=>e.remove()));const t=new S;t.stub(P,new h),t.stub(q,new E),t.stub(F,new N),t.stub(T,c.add(new D)),t.stub(C,{activeContainer:e,onDidLayoutContainer:p.None}),t.stub(Q,c.add(t.createInstance(K))),t.stub(A,c.add(t.createInstance(x))),t.stub(B,{mightProducePrintableCharacter(){return!1},softDispatch(){return L}}),o=c.add(t.createInstance(g,{container:e,idPrefix:"testQuickInput",ignoreFocusOut(){return!0},returnFocus(){},backKeybindingLabel(){},setContextKey(){},linkOpenerDelegate(i){},hoverDelegate:{showHover(i,n){},delay:200},styles:{button:l,countBadge:k,inputBox:u,toggle:d,keybindingLabel:f,list:m,progressBar:v,widget:{quickInputBackground:void 0,quickInputForeground:void 0,quickInputTitleBackground:void 0,widgetBorder:void 0,widgetShadow:void 0},pickerGroup:{pickerGroupBorder:void 0,pickerGroupForeground:void 0}}})),o.layout({height:20,width:40},0)}),test("pick - basecase",async()=>{const e={label:"foo"},t=a(o),i=o.pick([e,{label:"bar"}]);await t,o.accept();const n=await s(i,2e3);r.strictEqual(n,e)}),test("pick - activeItem is honored",async()=>{const e={label:"foo"},t=a(o),i=o.pick([{label:"bar"},e],{activeItem:e});await t,o.accept();const n=await i;r.strictEqual(n,e)}),test("input - basecase",async()=>{const e=a(o),t=o.input({value:"foo"});await e,o.accept();const i=await s(t,2e3);r.strictEqual(i,"foo")}),test("onDidChangeValue - gets triggered when .value is set",async()=>{const e=c.add(o.createQuickPick());let t;c.add(e.onDidChangeValue(i=>t=i)),e.value="changed";try{r.strictEqual(t,e.value)}finally{e.dispose()}}),test("keepScrollPosition - works with activeItems",async()=>{const e=c.add(o.createQuickPick()),t=[];for(let n=0;n<1e3;n++)t.push({label:`item ${n}`});e.items=t,e.activeItems=[t[t.length-1]],e.show();const i=e.scrollTop;r.notStrictEqual(i,0),e.keepScrollPosition=!0,e.activeItems=[t[0]],r.strictEqual(i,e.scrollTop),e.keepScrollPosition=!1,e.activeItems=[t[0]],r.strictEqual(e.scrollTop,0)}),test("keepScrollPosition - works with items",async()=>{const e=c.add(o.createQuickPick()),t=[];for(let n=0;n<1e3;n++)t.push({label:`item ${n}`});e.items=t,e.activeItems=[t[t.length-1]],e.show();const i=e.scrollTop;r.notStrictEqual(i,0),e.keepScrollPosition=!0,e.items=t,r.strictEqual(i,e.scrollTop),e.keepScrollPosition=!1,e.items=t,r.strictEqual(e.scrollTop,0)}),test("selectedItems - verify previous selectedItems does not hang over to next set of items",async()=>{const e=c.add(o.createQuickPick());e.items=[{label:"step 1"}],e.show(),await new Promise(t=>{c.add(e.onDidAccept(()=>{e.canSelectMany=!0,e.items=[{label:"a"},{label:"b"},{label:"c"}],t()})),o.accept()}),o.accept(),r.strictEqual(e.selectedItems.length,0)}),test("activeItems - verify onDidChangeActive is triggered after setting items",async()=>{const e=c.add(o.createQuickPick()),t=[];c.add(e.onDidChangeActive(n=>t.push(...n))),e.show();const i={label:"step 1"};e.items=[i],r.strictEqual(t.length,1),r.strictEqual(t[0],i),r.strictEqual(e.activeItems.length,1),r.strictEqual(e.activeItems[0],i)}),test("activeItems - verify setting itemActivation to None still triggers onDidChangeActive after selection #207832",async()=>{const e=c.add(o.createQuickPick()),t={label:"step 1"};e.items=[t],e.show(),r.strictEqual(e.activeItems[0],t);const i=[];c.add(e.onDidChangeActive(n=>i.push(...n))),e.itemActivation=y.NONE,e.items=[t],r.strictEqual(i.length,0),r.strictEqual(e.activeItems.length,0)})});
