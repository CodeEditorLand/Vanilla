{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/update/common/update.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport interface IUpdate {\n\t// Windows and Linux: 9a19815253d91900be5ec1016e0ecc7cc9a6950 (Commit Hash). Mac: 1.54.0 (Product Version)\n\tversion: string;\n\tproductVersion?: string;\n\ttimestamp?: number;\n\turl?: string;\n\tsha256hash?: string;\n}\n\n/**\n * Updates are run as a state machine:\n *\n *      Uninitialized\n *           \u2193\n *          Idle\n *          \u2193  \u2191\n *   Checking for Updates  \u2192  Available for Download\n *         \u2193\n *     Downloading  \u2192   Ready\n *         \u2193               \u2191\n *     Downloaded   \u2192  Updating\n *\n * Available: There is an update available for download (linux).\n * Ready: Code will be updated as soon as it restarts (win32, darwin).\n * Downloaded: There is an update ready to be installed in the background (win32).\n */\n\nexport const enum StateType {\n\tUninitialized = 'uninitialized',\n\tIdle = 'idle',\n\tDisabled = 'disabled',\n\tCheckingForUpdates = 'checking for updates',\n\tAvailableForDownload = 'available for download',\n\tDownloading = 'downloading',\n\tDownloaded = 'downloaded',\n\tUpdating = 'updating',\n\tReady = 'ready',\n}\n\nexport const enum UpdateType {\n\tSetup,\n\tArchive,\n\tSnap\n}\n\nexport const enum DisablementReason {\n\tNotBuilt,\n\tDisabledByEnvironment,\n\tManuallyDisabled,\n\tMissingConfiguration,\n\tInvalidConfiguration,\n\tRunningAsAdmin,\n}\n\nexport type Uninitialized = { type: StateType.Uninitialized };\nexport type Disabled = { type: StateType.Disabled; reason: DisablementReason };\nexport type Idle = { type: StateType.Idle; updateType: UpdateType; error?: string };\nexport type CheckingForUpdates = { type: StateType.CheckingForUpdates; explicit: boolean };\nexport type AvailableForDownload = { type: StateType.AvailableForDownload; update: IUpdate };\nexport type Downloading = { type: StateType.Downloading };\nexport type Downloaded = { type: StateType.Downloaded; update: IUpdate };\nexport type Updating = { type: StateType.Updating; update: IUpdate };\nexport type Ready = { type: StateType.Ready; update: IUpdate };\n\nexport type State = Uninitialized | Disabled | Idle | CheckingForUpdates | AvailableForDownload | Downloading | Downloaded | Updating | Ready;\n\nexport const State = {\n\tUninitialized: { type: StateType.Uninitialized } as Uninitialized,\n\tDisabled: (reason: DisablementReason) => ({ type: StateType.Disabled, reason }) as Disabled,\n\tIdle: (updateType: UpdateType, error?: string) => ({ type: StateType.Idle, updateType, error }) as Idle,\n\tCheckingForUpdates: (explicit: boolean): CheckingForUpdates => ({ type: StateType.CheckingForUpdates, explicit }),\n\tAvailableForDownload: (update: IUpdate): AvailableForDownload => ({ type: StateType.AvailableForDownload, update }),\n\tDownloading: { type: StateType.Downloading } as Downloading,\n\tDownloaded: (update: IUpdate): Downloaded => ({ type: StateType.Downloaded, update }),\n\tUpdating: (update: IUpdate): Updating => ({ type: StateType.Updating, update }),\n\tReady: (update: IUpdate): Ready => ({ type: StateType.Ready, update }),\n};\n\nexport interface IAutoUpdater extends Event.NodeEventEmitter {\n\tsetFeedURL(url: string): void;\n\tcheckForUpdates(): void;\n\tapplyUpdate?(): Promise<void>;\n\tquitAndInstall(): void;\n}\n\nexport const IUpdateService = createDecorator<IUpdateService>('updateService');\n\nexport interface IUpdateService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onStateChange: Event<State>;\n\treadonly state: State;\n\n\tcheckForUpdates(explicit: boolean): Promise<void>;\n\tdownloadUpdate(): Promise<void>;\n\tapplyUpdate(): Promise<void>;\n\tquitAndInstall(): Promise<void>;\n\n\tisLatestVersion(): Promise<boolean | undefined>;\n\t_applySpecificUpdate(packagePath: string): Promise<void>;\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,uBAAuB;AA6BzB,IAAW,YAAX,kBAAWA,eAAX;AACN,EAAAA,WAAA,mBAAgB;AAChB,EAAAA,WAAA,UAAO;AACP,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,wBAAqB;AACrB,EAAAA,WAAA,0BAAuB;AACvB,EAAAA,WAAA,iBAAc;AACd,EAAAA,WAAA,gBAAa;AACb,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,WAAQ;AATS,SAAAA;AAAA,GAAA;AAYX,IAAW,aAAX,kBAAWC,gBAAX;AACN,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AAHiB,SAAAA;AAAA,GAAA;AAMX,IAAW,oBAAX,kBAAWC,uBAAX;AACN,EAAAA,sCAAA;AACA,EAAAA,sCAAA;AACA,EAAAA,sCAAA;AACA,EAAAA,sCAAA;AACA,EAAAA,sCAAA;AACA,EAAAA,sCAAA;AANiB,SAAAA;AAAA,GAAA;AAqBX,MAAM,QAAQ;AAAA,EACpB,eAAe,EAAE,MAAM,oCAAwB;AAAA,EAC/C,UAAU,wBAAC,YAA+B,EAAE,MAAM,2BAAoB,OAAO,IAAnE;AAAA,EACV,MAAM,wBAAC,YAAwB,WAAoB,EAAE,MAAM,mBAAgB,YAAY,MAAM,IAAvF;AAAA,EACN,oBAAoB,wBAAC,cAA2C,EAAE,MAAM,iDAA8B,SAAS,IAA3F;AAAA,EACpB,sBAAsB,wBAAC,YAA2C,EAAE,MAAM,qDAAgC,OAAO,IAA3F;AAAA,EACtB,aAAa,EAAE,MAAM,gCAAsB;AAAA,EAC3C,YAAY,wBAAC,YAAiC,EAAE,MAAM,+BAAsB,OAAO,IAAvE;AAAA,EACZ,UAAU,wBAAC,YAA+B,EAAE,MAAM,2BAAoB,OAAO,IAAnE;AAAA,EACV,OAAO,wBAAC,YAA4B,EAAE,MAAM,qBAAiB,OAAO,IAA7D;AACR;AASO,MAAM,iBAAiB,gBAAgC,eAAe;",
  "names": ["StateType", "UpdateType", "DisablementReason"]
}
