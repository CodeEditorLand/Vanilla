{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/update/common/update.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport interface IUpdate {\n\t// Windows and Linux: 9a19815253d91900be5ec1016e0ecc7cc9a6950 (Commit Hash). Mac: 1.54.0 (Product Version)\n\tversion: string;\n\tproductVersion?: string;\n\ttimestamp?: number;\n\turl?: string;\n\tsha256hash?: string;\n}\n\n/**\n * Updates are run as a state machine:\n *\n *      Uninitialized\n *           \u2193\n *          Idle\n *          \u2193  \u2191\n *   Checking for Updates  \u2192  Available for Download\n *         \u2193\n *     Downloading  \u2192   Ready\n *         \u2193               \u2191\n *     Downloaded   \u2192  Updating\n *\n * Available: There is an update available for download (linux).\n * Ready: Code will be updated as soon as it restarts (win32, darwin).\n * Downloaded: There is an update ready to be installed in the background (win32).\n */\n\nexport enum StateType {\n\tUninitialized = \"uninitialized\",\n\tIdle = \"idle\",\n\tDisabled = \"disabled\",\n\tCheckingForUpdates = \"checking for updates\",\n\tAvailableForDownload = \"available for download\",\n\tDownloading = \"downloading\",\n\tDownloaded = \"downloaded\",\n\tUpdating = \"updating\",\n\tReady = \"ready\",\n}\n\nexport enum UpdateType {\n\tSetup = 0,\n\tArchive = 1,\n\tSnap = 2,\n}\n\nexport enum DisablementReason {\n\tNotBuilt = 0,\n\tDisabledByEnvironment = 1,\n\tManuallyDisabled = 2,\n\tMissingConfiguration = 3,\n\tInvalidConfiguration = 4,\n\tRunningAsAdmin = 5,\n}\n\nexport type Uninitialized = { type: StateType.Uninitialized };\nexport type Disabled = { type: StateType.Disabled; reason: DisablementReason };\nexport type Idle = {\n\ttype: StateType.Idle;\n\tupdateType: UpdateType;\n\terror?: string;\n};\nexport type CheckingForUpdates = {\n\ttype: StateType.CheckingForUpdates;\n\texplicit: boolean;\n};\nexport type AvailableForDownload = {\n\ttype: StateType.AvailableForDownload;\n\tupdate: IUpdate;\n};\nexport type Downloading = { type: StateType.Downloading };\nexport type Downloaded = { type: StateType.Downloaded; update: IUpdate };\nexport type Updating = { type: StateType.Updating; update: IUpdate };\nexport type Ready = { type: StateType.Ready; update: IUpdate };\n\nexport type State =\n\t| Uninitialized\n\t| Disabled\n\t| Idle\n\t| CheckingForUpdates\n\t| AvailableForDownload\n\t| Downloading\n\t| Downloaded\n\t| Updating\n\t| Ready;\n\nexport const State = {\n\tUninitialized: { type: StateType.Uninitialized } as Uninitialized,\n\tDisabled: (reason: DisablementReason) =>\n\t\t({ type: StateType.Disabled, reason }) as Disabled,\n\tIdle: (updateType: UpdateType, error?: string) =>\n\t\t({ type: StateType.Idle, updateType, error }) as Idle,\n\tCheckingForUpdates: (explicit: boolean): CheckingForUpdates => ({\n\t\ttype: StateType.CheckingForUpdates,\n\t\texplicit,\n\t}),\n\tAvailableForDownload: (update: IUpdate): AvailableForDownload => ({\n\t\ttype: StateType.AvailableForDownload,\n\t\tupdate,\n\t}),\n\tDownloading: { type: StateType.Downloading } as Downloading,\n\tDownloaded: (update: IUpdate): Downloaded => ({\n\t\ttype: StateType.Downloaded,\n\t\tupdate,\n\t}),\n\tUpdating: (update: IUpdate): Updating => ({\n\t\ttype: StateType.Updating,\n\t\tupdate,\n\t}),\n\tReady: (update: IUpdate): Ready => ({ type: StateType.Ready, update }),\n};\n\nexport interface IAutoUpdater extends Event.NodeEventEmitter {\n\tsetFeedURL(url: string): void;\n\tcheckForUpdates(): void;\n\tapplyUpdate?(): Promise<void>;\n\tquitAndInstall(): void;\n}\n\nexport const IUpdateService = createDecorator<IUpdateService>(\"updateService\");\n\nexport interface IUpdateService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onStateChange: Event<State>;\n\treadonly state: State;\n\n\tcheckForUpdates(explicit: boolean): Promise<void>;\n\tdownloadUpdate(): Promise<void>;\n\tapplyUpdate(): Promise<void>;\n\tquitAndInstall(): Promise<void>;\n\n\tisLatestVersion(): Promise<boolean | undefined>;\n\t_applySpecificUpdate(packagePath: string): Promise<void>;\n}\n"],
  "mappings": ";;AAMA,SAAS,uBAAuB;AA6BzB,IAAK,YAAL,kBAAKA,eAAL;AACN,EAAAA,WAAA,mBAAgB;AAChB,EAAAA,WAAA,UAAO;AACP,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,wBAAqB;AACrB,EAAAA,WAAA,0BAAuB;AACvB,EAAAA,WAAA,iBAAc;AACd,EAAAA,WAAA,gBAAa;AACb,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,WAAQ;AATG,SAAAA;AAAA,GAAA;AAYL,IAAK,aAAL,kBAAKC,gBAAL;AACN,EAAAA,wBAAA,WAAQ,KAAR;AACA,EAAAA,wBAAA,aAAU,KAAV;AACA,EAAAA,wBAAA,UAAO,KAAP;AAHW,SAAAA;AAAA,GAAA;AAML,IAAK,oBAAL,kBAAKC,uBAAL;AACN,EAAAA,sCAAA,cAAW,KAAX;AACA,EAAAA,sCAAA,2BAAwB,KAAxB;AACA,EAAAA,sCAAA,sBAAmB,KAAnB;AACA,EAAAA,sCAAA,0BAAuB,KAAvB;AACA,EAAAA,sCAAA,0BAAuB,KAAvB;AACA,EAAAA,sCAAA,oBAAiB,KAAjB;AANW,SAAAA;AAAA,GAAA;AAwCL,MAAM,QAAQ;AAAA,EACpB,eAAe,EAAE,MAAM,oCAAwB;AAAA,EAC/C,UAAU,wBAAC,YACT,EAAE,MAAM,2BAAoB,OAAO,IAD3B;AAAA,EAEV,MAAM,wBAAC,YAAwB,WAC7B,EAAE,MAAM,mBAAgB,YAAY,MAAM,IADtC;AAAA,EAEN,oBAAoB,wBAAC,cAA2C;AAAA,IAC/D,MAAM;AAAA,IACN;AAAA,EACD,IAHoB;AAAA,EAIpB,sBAAsB,wBAAC,YAA2C;AAAA,IACjE,MAAM;AAAA,IACN;AAAA,EACD,IAHsB;AAAA,EAItB,aAAa,EAAE,MAAM,gCAAsB;AAAA,EAC3C,YAAY,wBAAC,YAAiC;AAAA,IAC7C,MAAM;AAAA,IACN;AAAA,EACD,IAHY;AAAA,EAIZ,UAAU,wBAAC,YAA+B;AAAA,IACzC,MAAM;AAAA,IACN;AAAA,EACD,IAHU;AAAA,EAIV,OAAO,wBAAC,YAA4B,EAAE,MAAM,qBAAiB,OAAO,IAA7D;AACR;AASO,MAAM,iBAAiB,gBAAgC,eAAe;",
  "names": ["StateType", "UpdateType", "DisablementReason"]
}
