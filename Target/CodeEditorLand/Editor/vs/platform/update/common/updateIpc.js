import{Emitter as i}from"../../../base/common/event.js";import{State as r}from"./update.js";class o{constructor(e){this.service=e}listen(e,t){switch(t){case"onStateChange":return this.service.onStateChange}throw new Error(`Event not found: ${t}`)}call(e,t,a){switch(t){case"checkForUpdates":return this.service.checkForUpdates(a);case"downloadUpdate":return this.service.downloadUpdate();case"applyUpdate":return this.service.applyUpdate();case"quitAndInstall":return this.service.quitAndInstall();case"_getInitialState":return Promise.resolve(this.service.state);case"isLatestVersion":return this.service.isLatestVersion();case"_applySpecificUpdate":return this.service._applySpecificUpdate(a)}throw new Error(`Call not found: ${t}`)}}class c{constructor(e){this.channel=e;this.channel.listen("onStateChange")(t=>this.state=t),this.channel.call("_getInitialState").then(t=>this.state=t)}_onStateChange=new i;onStateChange=this._onStateChange.event;_state=r.Uninitialized;get state(){return this._state}set state(e){this._state=e,this._onStateChange.fire(e)}checkForUpdates(e){return this.channel.call("checkForUpdates",e)}downloadUpdate(){return this.channel.call("downloadUpdate")}applyUpdate(){return this.channel.call("applyUpdate")}quitAndInstall(){return this.channel.call("quitAndInstall")}isLatestVersion(){return this.channel.call("isLatestVersion")}_applySpecificUpdate(e){return this.channel.call("_applySpecificUpdate",e)}}export{o as UpdateChannel,c as UpdateChannelClient};
