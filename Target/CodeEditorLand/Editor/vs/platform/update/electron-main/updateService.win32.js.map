{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/update/electron-main/updateService.win32.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { spawn } from \"child_process\";\nimport * as fs from \"fs\";\nimport { tmpdir } from \"os\";\nimport { timeout } from \"../../../base/common/async.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { memoize } from \"../../../base/common/decorators.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport * as path from \"../../../base/common/path.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { checksum } from \"../../../base/node/crypto.js\";\nimport * as pfs from \"../../../base/node/pfs.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IEnvironmentMainService } from \"../../environment/electron-main/environmentMainService.js\";\nimport { IFileService } from \"../../files/common/files.js\";\nimport {\n\tILifecycleMainService,\n\ttype IRelaunchHandler,\n\ttype IRelaunchOptions,\n} from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { INativeHostMainService } from \"../../native/electron-main/nativeHostMainService.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { IRequestService, asJson } from \"../../request/common/request.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport {\n\ttype AvailableForDownload,\n\tDisablementReason,\n\ttype IUpdate,\n\tState,\n\tStateType,\n\tUpdateType,\n} from \"../common/update.js\";\nimport {\n\tAbstractUpdateService,\n\ttype UpdateErrorClassification,\n\ttype UpdateNotAvailableClassification,\n\tcreateUpdateURL,\n} from \"./abstractUpdateService.js\";\n\nasync function pollUntil(fn: () => boolean, millis = 1000): Promise<void> {\n\twhile (!fn()) {\n\t\tawait timeout(millis);\n\t}\n}\n\ninterface IAvailableUpdate {\n\tpackagePath: string;\n\tupdateFilePath?: string;\n}\n\nlet _updateType: UpdateType | undefined;\nfunction getUpdateType(): UpdateType {\n\tif (typeof _updateType === \"undefined\") {\n\t\t_updateType = fs.existsSync(\n\t\t\tpath.join(path.dirname(process.execPath), \"unins000.exe\"),\n\t\t)\n\t\t\t? UpdateType.Setup\n\t\t\t: UpdateType.Archive;\n\t}\n\n\treturn _updateType;\n}\n\nexport class Win32UpdateService\n\textends AbstractUpdateService\n\timplements IRelaunchHandler\n{\n\tprivate availableUpdate: IAvailableUpdate | undefined;\n\n\t@memoize\n\tget cachePath(): Promise<string> {\n\t\tconst result = path.join(\n\t\t\ttmpdir(),\n\t\t\t`vscode-${this.productService.quality}-${this.productService.target}-${process.arch}`,\n\t\t);\n\t\treturn fs.promises\n\t\t\t.mkdir(result, { recursive: true })\n\t\t\t.then(() => result);\n\t}\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeHostMainService\n\t\tprivate readonly nativeHostMainService: INativeHostMainService,\n\t\t@IProductService productService: IProductService,\n\t) {\n\t\tsuper(\n\t\t\tlifecycleMainService,\n\t\t\tconfigurationService,\n\t\t\tenvironmentMainService,\n\t\t\trequestService,\n\t\t\tlogService,\n\t\t\tproductService,\n\t\t);\n\n\t\tlifecycleMainService.setRelaunchHandler(this);\n\t}\n\n\thandleRelaunch(options?: IRelaunchOptions): boolean {\n\t\tif (options?.addArgs || options?.removeArgs) {\n\t\t\treturn false; // we cannot apply an update and restart with different args\n\t\t}\n\n\t\tif (this.state.type !== StateType.Ready || !this.availableUpdate) {\n\t\t\treturn false; // we only handle the relaunch when we have a pending update\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t\"update#handleRelaunch(): running raw#quitAndInstall()\",\n\t\t);\n\t\tthis.doQuitAndInstall();\n\n\t\treturn true;\n\t}\n\n\tprotected override async initialize(): Promise<void> {\n\t\tif (\n\t\t\tthis.productService.target === \"user\" &&\n\t\t\t(await this.nativeHostMainService.isAdmin(undefined))\n\t\t) {\n\t\t\tthis.setState(State.Disabled(DisablementReason.RunningAsAdmin));\n\t\t\tthis.logService.info(\n\t\t\t\t\"update#ctor - updates are disabled due to running as Admin in user setup\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait super.initialize();\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string | undefined {\n\t\tlet platform = `win32-${process.arch}`;\n\n\t\tif (getUpdateType() === UpdateType.Archive) {\n\t\t\tplatform += \"-archive\";\n\t\t} else if (this.productService.target === \"user\") {\n\t\t\tplatform += \"-user\";\n\t\t}\n\n\t\treturn createUpdateURL(platform, quality, this.productService);\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tif (!this.url) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.CheckingForUpdates(context));\n\n\t\tthis.requestService\n\t\t\t.request({ url: this.url }, CancellationToken.None)\n\t\t\t.then<IUpdate | null>(asJson)\n\t\t\t.then((update) => {\n\t\t\t\tconst updateType = getUpdateType();\n\n\t\t\t\tif (\n\t\t\t\t\t!update ||\n\t\t\t\t\t!update.url ||\n\t\t\t\t\t!update.version ||\n\t\t\t\t\t!update.productVersion\n\t\t\t\t) {\n\t\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t\t{ explicit: boolean },\n\t\t\t\t\t\tUpdateNotAvailableClassification\n\t\t\t\t\t>(\"update:notAvailable\", { explicit: !!context });\n\n\t\t\t\t\tthis.setState(State.Idle(updateType));\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\n\t\t\t\tif (updateType === UpdateType.Archive) {\n\t\t\t\t\tthis.setState(State.AvailableForDownload(update));\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\n\t\t\t\tthis.setState(State.Downloading);\n\n\t\t\t\treturn this.cleanup(update.version).then(() => {\n\t\t\t\t\treturn this.getUpdatePackagePath(update.version)\n\t\t\t\t\t\t.then((updatePackagePath) => {\n\t\t\t\t\t\t\treturn pfs.Promises.exists(updatePackagePath).then(\n\t\t\t\t\t\t\t\t(exists) => {\n\t\t\t\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\t\t\t\treturn Promise.resolve(\n\t\t\t\t\t\t\t\t\t\t\tupdatePackagePath,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst downloadPath = `${updatePackagePath}.tmp`;\n\n\t\t\t\t\t\t\t\t\treturn this.requestService\n\t\t\t\t\t\t\t\t\t\t.request(\n\t\t\t\t\t\t\t\t\t\t\t{ url: update.url },\n\t\t\t\t\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.then((context) =>\n\t\t\t\t\t\t\t\t\t\t\tthis.fileService.writeFile(\n\t\t\t\t\t\t\t\t\t\t\t\tURI.file(downloadPath),\n\t\t\t\t\t\t\t\t\t\t\t\tcontext.stream,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t\t\t\t\tupdate.sha256hash\n\t\t\t\t\t\t\t\t\t\t\t\t? () =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecksum(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownloadPath,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdate.sha256hash,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t: () => undefined,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.then(() =>\n\t\t\t\t\t\t\t\t\t\t\tpfs.Promises.rename(\n\t\t\t\t\t\t\t\t\t\t\t\tdownloadPath,\n\t\t\t\t\t\t\t\t\t\t\t\tupdatePackagePath,\n\t\t\t\t\t\t\t\t\t\t\t\tfalse /* no retry */,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.then(() => updatePackagePath);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((packagePath) => {\n\t\t\t\t\t\t\tthis.availableUpdate = { packagePath };\n\t\t\t\t\t\t\tthis.setState(State.Downloaded(update));\n\n\t\t\t\t\t\t\tconst fastUpdatesEnabled =\n\t\t\t\t\t\t\t\tthis.configurationService.getValue(\n\t\t\t\t\t\t\t\t\t\"update.enableWindowsBackgroundUpdates\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (fastUpdatesEnabled) {\n\t\t\t\t\t\t\t\tif (this.productService.target === \"user\") {\n\t\t\t\t\t\t\t\t\tthis.doApplyUpdate();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.setState(State.Ready(update));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(undefined, (err) => {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t{ messageHash: string },\n\t\t\t\t\tUpdateErrorClassification\n\t\t\t\t>(\"update:error\", { messageHash: String(hash(String(err))) });\n\t\t\t\tthis.logService.error(err);\n\n\t\t\t\t// only show message when explicitly checking for updates\n\t\t\t\tconst message: string | undefined = !!context\n\t\t\t\t\t? err.message || err\n\t\t\t\t\t: undefined;\n\t\t\t\tthis.setState(State.Idle(getUpdateType(), message));\n\t\t\t});\n\t}\n\n\tprotected override async doDownloadUpdate(\n\t\tstate: AvailableForDownload,\n\t): Promise<void> {\n\t\tif (state.update.url) {\n\t\t\tthis.nativeHostMainService.openExternal(\n\t\t\t\tundefined,\n\t\t\t\tstate.update.url,\n\t\t\t);\n\t\t}\n\t\tthis.setState(State.Idle(getUpdateType()));\n\t}\n\n\tprivate async getUpdatePackagePath(version: string): Promise<string> {\n\t\tconst cachePath = await this.cachePath;\n\t\treturn path.join(\n\t\t\tcachePath,\n\t\t\t`CodeSetup-${this.productService.quality}-${version}.exe`,\n\t\t);\n\t}\n\n\tprivate async cleanup(exceptVersion: string | null = null): Promise<any> {\n\t\tconst filter = exceptVersion\n\t\t\t? (one: string) =>\n\t\t\t\t\t!new RegExp(\n\t\t\t\t\t\t`${this.productService.quality}-${exceptVersion}\\\\.exe$`,\n\t\t\t\t\t).test(one)\n\t\t\t: () => true;\n\n\t\tconst cachePath = await this.cachePath;\n\t\tconst versions = await pfs.Promises.readdir(cachePath);\n\n\t\tconst promises = versions.filter(filter).map(async (one) => {\n\t\t\ttry {\n\t\t\t\tawait fs.promises.unlink(path.join(cachePath, one));\n\t\t\t} catch (err) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tprotected override async doApplyUpdate(): Promise<void> {\n\t\tif (this.state.type !== StateType.Downloaded) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tif (!this.availableUpdate) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst update = this.state.update;\n\t\tthis.setState(State.Updating(update));\n\n\t\tconst cachePath = await this.cachePath;\n\n\t\tthis.availableUpdate.updateFilePath = path.join(\n\t\t\tcachePath,\n\t\t\t`CodeSetup-${this.productService.quality}-${update.version}.flag`,\n\t\t);\n\n\t\tawait pfs.Promises.writeFile(\n\t\t\tthis.availableUpdate.updateFilePath,\n\t\t\t\"flag\",\n\t\t);\n\t\tconst child = spawn(\n\t\t\tthis.availableUpdate.packagePath,\n\t\t\t[\n\t\t\t\t\"/verysilent\",\n\t\t\t\t\"/log\",\n\t\t\t\t`/update=\"${this.availableUpdate.updateFilePath}\"`,\n\t\t\t\t\"/nocloseapplications\",\n\t\t\t\t\"/mergetasks=runcode,!desktopicon,!quicklaunchicon\",\n\t\t\t],\n\t\t\t{\n\t\t\t\tdetached: true,\n\t\t\t\tstdio: [\"ignore\", \"ignore\", \"ignore\"],\n\t\t\t\twindowsVerbatimArguments: true,\n\t\t\t},\n\t\t);\n\n\t\tchild.once(\"exit\", () => {\n\t\t\tthis.availableUpdate = undefined;\n\t\t\tthis.setState(State.Idle(getUpdateType()));\n\t\t});\n\n\t\tconst readyMutexName = `${this.productService.win32MutexName}-ready`;\n\t\tconst mutex = await import(\"@vscode/windows-mutex\");\n\n\t\t// poll for mutex-ready\n\t\tpollUntil(() => mutex.isActive(readyMutexName)).then(() =>\n\t\t\tthis.setState(State.Ready(update)),\n\t\t);\n\t}\n\n\tprotected override doQuitAndInstall(): void {\n\t\tif (this.state.type !== StateType.Ready || !this.availableUpdate) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t\"update#quitAndInstall(): running raw#quitAndInstall()\",\n\t\t);\n\n\t\tif (this.availableUpdate.updateFilePath) {\n\t\t\tfs.unlinkSync(this.availableUpdate.updateFilePath);\n\t\t} else {\n\t\t\tspawn(\n\t\t\t\tthis.availableUpdate.packagePath,\n\t\t\t\t[\n\t\t\t\t\t\"/silent\",\n\t\t\t\t\t\"/log\",\n\t\t\t\t\t\"/mergetasks=runcode,!desktopicon,!quicklaunchicon\",\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tdetached: true,\n\t\t\t\t\tstdio: [\"ignore\", \"ignore\", \"ignore\"],\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected override getUpdateType(): UpdateType {\n\t\treturn getUpdateType();\n\t}\n\n\toverride async _applySpecificUpdate(packagePath: string): Promise<void> {\n\t\tif (this.state.type !== StateType.Idle) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fastUpdatesEnabled = this.configurationService.getValue(\n\t\t\t\"update.enableWindowsBackgroundUpdates\",\n\t\t);\n\t\tconst update: IUpdate = {\n\t\t\tversion: \"unknown\",\n\t\t\tproductVersion: \"unknown\",\n\t\t};\n\n\t\tthis.setState(State.Downloading);\n\t\tthis.availableUpdate = { packagePath };\n\t\tthis.setState(State.Downloaded(update));\n\n\t\tif (fastUpdatesEnabled) {\n\t\t\tif (this.productService.target === \"user\") {\n\t\t\t\tthis.doApplyUpdate();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState(State.Ready(update));\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["context"]
}
