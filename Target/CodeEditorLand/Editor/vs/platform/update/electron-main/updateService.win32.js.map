{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/update/electron-main/updateService.win32.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { spawn } from 'child_process';\nimport * as fs from 'fs';\nimport { tmpdir } from 'os';\nimport { timeout } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { memoize } from '../../../base/common/decorators.js';\nimport { hash } from '../../../base/common/hash.js';\nimport * as path from '../../../base/common/path.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { checksum } from '../../../base/node/crypto.js';\nimport * as pfs from '../../../base/node/pfs.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentMainService } from '../../environment/electron-main/environmentMainService.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { ILifecycleMainService, IRelaunchHandler, IRelaunchOptions } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { INativeHostMainService } from '../../native/electron-main/nativeHostMainService.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { asJson, IRequestService } from '../../request/common/request.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { AvailableForDownload, DisablementReason, IUpdate, State, StateType, UpdateType } from '../common/update.js';\nimport { AbstractUpdateService, createUpdateURL, UpdateErrorClassification, UpdateNotAvailableClassification } from './abstractUpdateService.js';\n\nasync function pollUntil(fn: () => boolean, millis = 1000): Promise<void> {\n\twhile (!fn()) {\n\t\tawait timeout(millis);\n\t}\n}\n\ninterface IAvailableUpdate {\n\tpackagePath: string;\n\tupdateFilePath?: string;\n}\n\nlet _updateType: UpdateType | undefined = undefined;\nfunction getUpdateType(): UpdateType {\n\tif (typeof _updateType === 'undefined') {\n\t\t_updateType = fs.existsSync(path.join(path.dirname(process.execPath), 'unins000.exe'))\n\t\t\t? UpdateType.Setup\n\t\t\t: UpdateType.Archive;\n\t}\n\n\treturn _updateType;\n}\n\nexport class Win32UpdateService extends AbstractUpdateService implements IRelaunchHandler {\n\n\tprivate availableUpdate: IAvailableUpdate | undefined;\n\n\t@memoize\n\tget cachePath(): Promise<string> {\n\t\tconst result = path.join(tmpdir(), `vscode-${this.productService.quality}-${this.productService.target}-${process.arch}`);\n\t\treturn fs.promises.mkdir(result, { recursive: true }).then(() => result);\n\t}\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeHostMainService private readonly nativeHostMainService: INativeHostMainService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(lifecycleMainService, configurationService, environmentMainService, requestService, logService, productService);\n\n\t\tlifecycleMainService.setRelaunchHandler(this);\n\t}\n\n\thandleRelaunch(options?: IRelaunchOptions): boolean {\n\t\tif (options?.addArgs || options?.removeArgs) {\n\t\t\treturn false; // we cannot apply an update and restart with different args\n\t\t}\n\n\t\tif (this.state.type !== StateType.Ready || !this.availableUpdate) {\n\t\t\treturn false; // we only handle the relaunch when we have a pending update\n\t\t}\n\n\t\tthis.logService.trace('update#handleRelaunch(): running raw#quitAndInstall()');\n\t\tthis.doQuitAndInstall();\n\n\t\treturn true;\n\t}\n\n\tprotected override async initialize(): Promise<void> {\n\t\tif (this.productService.target === 'user' && await this.nativeHostMainService.isAdmin(undefined)) {\n\t\t\tthis.setState(State.Disabled(DisablementReason.RunningAsAdmin));\n\t\t\tthis.logService.info('update#ctor - updates are disabled due to running as Admin in user setup');\n\t\t\treturn;\n\t\t}\n\n\t\tawait super.initialize();\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string | undefined {\n\t\tlet platform = `win32-${process.arch}`;\n\n\t\tif (getUpdateType() === UpdateType.Archive) {\n\t\t\tplatform += '-archive';\n\t\t} else if (this.productService.target === 'user') {\n\t\t\tplatform += '-user';\n\t\t}\n\n\t\treturn createUpdateURL(platform, quality, this.productService);\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tif (!this.url) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.CheckingForUpdates(context));\n\n\t\tthis.requestService.request({ url: this.url }, CancellationToken.None)\n\t\t\t.then<IUpdate | null>(asJson)\n\t\t\t.then(update => {\n\t\t\t\tconst updateType = getUpdateType();\n\n\t\t\t\tif (!update || !update.url || !update.version || !update.productVersion) {\n\t\t\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: !!context });\n\n\t\t\t\t\tthis.setState(State.Idle(updateType));\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\n\t\t\t\tif (updateType === UpdateType.Archive) {\n\t\t\t\t\tthis.setState(State.AvailableForDownload(update));\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\n\t\t\t\tthis.setState(State.Downloading);\n\n\t\t\t\treturn this.cleanup(update.version).then(() => {\n\t\t\t\t\treturn this.getUpdatePackagePath(update.version).then(updatePackagePath => {\n\t\t\t\t\t\treturn pfs.Promises.exists(updatePackagePath).then(exists => {\n\t\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\t\treturn Promise.resolve(updatePackagePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst downloadPath = `${updatePackagePath}.tmp`;\n\n\t\t\t\t\t\t\treturn this.requestService.request({ url: update.url }, CancellationToken.None)\n\t\t\t\t\t\t\t\t.then(context => this.fileService.writeFile(URI.file(downloadPath), context.stream))\n\t\t\t\t\t\t\t\t.then(update.sha256hash ? () => checksum(downloadPath, update.sha256hash) : () => undefined)\n\t\t\t\t\t\t\t\t.then(() => pfs.Promises.rename(downloadPath, updatePackagePath, false /* no retry */))\n\t\t\t\t\t\t\t\t.then(() => updatePackagePath);\n\t\t\t\t\t\t});\n\t\t\t\t\t}).then(packagePath => {\n\t\t\t\t\t\tthis.availableUpdate = { packagePath };\n\t\t\t\t\t\tthis.setState(State.Downloaded(update));\n\n\t\t\t\t\t\tconst fastUpdatesEnabled = this.configurationService.getValue('update.enableWindowsBackgroundUpdates');\n\t\t\t\t\t\tif (fastUpdatesEnabled) {\n\t\t\t\t\t\t\tif (this.productService.target === 'user') {\n\t\t\t\t\t\t\t\tthis.doApplyUpdate();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.setState(State.Ready(update));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(undefined, err => {\n\t\t\t\tthis.telemetryService.publicLog2<{ messageHash: string }, UpdateErrorClassification>('update:error', { messageHash: String(hash(String(err))) });\n\t\t\t\tthis.logService.error(err);\n\n\t\t\t\t// only show message when explicitly checking for updates\n\t\t\t\tconst message: string | undefined = !!context ? (err.message || err) : undefined;\n\t\t\t\tthis.setState(State.Idle(getUpdateType(), message));\n\t\t\t});\n\t}\n\n\tprotected override async doDownloadUpdate(state: AvailableForDownload): Promise<void> {\n\t\tif (state.update.url) {\n\t\t\tthis.nativeHostMainService.openExternal(undefined, state.update.url);\n\t\t}\n\t\tthis.setState(State.Idle(getUpdateType()));\n\t}\n\n\tprivate async getUpdatePackagePath(version: string): Promise<string> {\n\t\tconst cachePath = await this.cachePath;\n\t\treturn path.join(cachePath, `CodeSetup-${this.productService.quality}-${version}.exe`);\n\t}\n\n\tprivate async cleanup(exceptVersion: string | null = null): Promise<any> {\n\t\tconst filter = exceptVersion ? (one: string) => !(new RegExp(`${this.productService.quality}-${exceptVersion}\\\\.exe$`).test(one)) : () => true;\n\n\t\tconst cachePath = await this.cachePath;\n\t\tconst versions = await pfs.Promises.readdir(cachePath);\n\n\t\tconst promises = versions.filter(filter).map(async one => {\n\t\t\ttry {\n\t\t\t\tawait fs.promises.unlink(path.join(cachePath, one));\n\t\t\t} catch (err) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tprotected override async doApplyUpdate(): Promise<void> {\n\t\tif (this.state.type !== StateType.Downloaded) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tif (!this.availableUpdate) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst update = this.state.update;\n\t\tthis.setState(State.Updating(update));\n\n\t\tconst cachePath = await this.cachePath;\n\n\t\tthis.availableUpdate.updateFilePath = path.join(cachePath, `CodeSetup-${this.productService.quality}-${update.version}.flag`);\n\n\t\tawait pfs.Promises.writeFile(this.availableUpdate.updateFilePath, 'flag');\n\t\tconst child = spawn(this.availableUpdate.packagePath, ['/verysilent', '/log', `/update=\"${this.availableUpdate.updateFilePath}\"`, '/nocloseapplications', '/mergetasks=runcode,!desktopicon,!quicklaunchicon'], {\n\t\t\tdetached: true,\n\t\t\tstdio: ['ignore', 'ignore', 'ignore'],\n\t\t\twindowsVerbatimArguments: true\n\t\t});\n\n\t\tchild.once('exit', () => {\n\t\t\tthis.availableUpdate = undefined;\n\t\t\tthis.setState(State.Idle(getUpdateType()));\n\t\t});\n\n\t\tconst readyMutexName = `${this.productService.win32MutexName}-ready`;\n\t\tconst mutex = await import('@vscode/windows-mutex');\n\n\t\t// poll for mutex-ready\n\t\tpollUntil(() => mutex.isActive(readyMutexName))\n\t\t\t.then(() => this.setState(State.Ready(update)));\n\t}\n\n\tprotected override doQuitAndInstall(): void {\n\t\tif (this.state.type !== StateType.Ready || !this.availableUpdate) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\n\t\tif (this.availableUpdate.updateFilePath) {\n\t\t\tfs.unlinkSync(this.availableUpdate.updateFilePath);\n\t\t} else {\n\t\t\tspawn(this.availableUpdate.packagePath, ['/silent', '/log', '/mergetasks=runcode,!desktopicon,!quicklaunchicon'], {\n\t\t\t\tdetached: true,\n\t\t\t\tstdio: ['ignore', 'ignore', 'ignore']\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected override getUpdateType(): UpdateType {\n\t\treturn getUpdateType();\n\t}\n\n\toverride async _applySpecificUpdate(packagePath: string): Promise<void> {\n\t\tif (this.state.type !== StateType.Idle) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fastUpdatesEnabled = this.configurationService.getValue('update.enableWindowsBackgroundUpdates');\n\t\tconst update: IUpdate = { version: 'unknown', productVersion: 'unknown' };\n\n\t\tthis.setState(State.Downloading);\n\t\tthis.availableUpdate = { packagePath };\n\t\tthis.setState(State.Downloaded(update));\n\n\t\tif (fastUpdatesEnabled) {\n\t\t\tif (this.productService.target === 'user') {\n\t\t\t\tthis.doApplyUpdate();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState(State.Ready(update));\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["context"]
}
