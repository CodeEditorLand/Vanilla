{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/update/electron-main/updateService.darwin.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as electron from \"electron\";\nimport { memoize } from \"../../../base/common/decorators.js\";\nimport { Event } from \"../../../base/common/event.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IEnvironmentMainService } from \"../../environment/electron-main/environmentMainService.js\";\nimport {\n\tILifecycleMainService,\n\ttype IRelaunchHandler,\n\ttype IRelaunchOptions,\n} from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { IRequestService } from \"../../request/common/request.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport {\n\ttype IUpdate,\n\tState,\n\tStateType,\n\tUpdateType,\n} from \"../common/update.js\";\nimport {\n\tAbstractUpdateService,\n\ttype UpdateErrorClassification,\n\ttype UpdateNotAvailableClassification,\n\tcreateUpdateURL,\n} from \"./abstractUpdateService.js\";\n\nexport class DarwinUpdateService\n\textends AbstractUpdateService\n\timplements IRelaunchHandler\n{\n\tprivate readonly disposables = new DisposableStore();\n\n\t@memoize private get onRawError(): Event<string> {\n\t\treturn Event.fromNodeEventEmitter(\n\t\t\telectron.autoUpdater,\n\t\t\t\"error\",\n\t\t\t(_, message) => message,\n\t\t);\n\t}\n\t@memoize private get onRawUpdateNotAvailable(): Event<void> {\n\t\treturn Event.fromNodeEventEmitter<void>(\n\t\t\telectron.autoUpdater,\n\t\t\t\"update-not-available\",\n\t\t);\n\t}\n\t@memoize private get onRawUpdateAvailable(): Event<void> {\n\t\treturn Event.fromNodeEventEmitter(\n\t\t\telectron.autoUpdater,\n\t\t\t\"update-available\",\n\t\t);\n\t}\n\t@memoize private get onRawUpdateDownloaded(): Event<IUpdate> {\n\t\treturn Event.fromNodeEventEmitter(\n\t\t\telectron.autoUpdater,\n\t\t\t\"update-downloaded\",\n\t\t\t(_, releaseNotes, version, timestamp) => ({\n\t\t\t\tversion,\n\t\t\t\tproductVersion: version,\n\t\t\t\ttimestamp,\n\t\t\t}),\n\t\t);\n\t}\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IProductService productService: IProductService,\n\t) {\n\t\tsuper(\n\t\t\tlifecycleMainService,\n\t\t\tconfigurationService,\n\t\t\tenvironmentMainService,\n\t\t\trequestService,\n\t\t\tlogService,\n\t\t\tproductService,\n\t\t);\n\n\t\tlifecycleMainService.setRelaunchHandler(this);\n\t}\n\n\thandleRelaunch(options?: IRelaunchOptions): boolean {\n\t\tif (options?.addArgs || options?.removeArgs) {\n\t\t\treturn false; // we cannot apply an update and restart with different args\n\t\t}\n\n\t\tif (this.state.type !== StateType.Ready) {\n\t\t\treturn false; // we only handle the relaunch when we have a pending update\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t\"update#handleRelaunch(): running raw#quitAndInstall()\",\n\t\t);\n\t\tthis.doQuitAndInstall();\n\n\t\treturn true;\n\t}\n\n\tprotected override async initialize(): Promise<void> {\n\t\tawait super.initialize();\n\t\tthis.onRawError(this.onError, this, this.disposables);\n\t\tthis.onRawUpdateAvailable(\n\t\t\tthis.onUpdateAvailable,\n\t\t\tthis,\n\t\t\tthis.disposables,\n\t\t);\n\t\tthis.onRawUpdateDownloaded(\n\t\t\tthis.onUpdateDownloaded,\n\t\t\tthis,\n\t\t\tthis.disposables,\n\t\t);\n\t\tthis.onRawUpdateNotAvailable(\n\t\t\tthis.onUpdateNotAvailable,\n\t\t\tthis,\n\t\t\tthis.disposables,\n\t\t);\n\t}\n\n\tprivate onError(err: string): void {\n\t\tthis.telemetryService.publicLog2<\n\t\t\t{ messageHash: string },\n\t\t\tUpdateErrorClassification\n\t\t>(\"update:error\", { messageHash: String(hash(String(err))) });\n\t\tthis.logService.error(\"UpdateService error:\", err);\n\n\t\t// only show message when explicitly checking for updates\n\t\tconst message =\n\t\t\tthis.state.type === StateType.CheckingForUpdates &&\n\t\t\tthis.state.explicit\n\t\t\t\t? err\n\t\t\t\t: undefined;\n\t\tthis.setState(State.Idle(UpdateType.Archive, message));\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string | undefined {\n\t\tlet assetID: string;\n\t\tif (this.productService.darwinUniversalAssetId) {\n\t\t\tassetID = this.productService.darwinUniversalAssetId;\n\t\t} else {\n\t\t\tassetID = process.arch === \"x64\" ? \"darwin\" : \"darwin-arm64\";\n\t\t}\n\t\tconst url = createUpdateURL(assetID, quality, this.productService);\n\t\ttry {\n\t\t\telectron.autoUpdater.setFeedURL({ url });\n\t\t} catch (e) {\n\t\t\t// application is very likely not signed\n\t\t\tthis.logService.error(\"Failed to set update feed URL\", e);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn url;\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tthis.setState(State.CheckingForUpdates(context));\n\t\telectron.autoUpdater.checkForUpdates();\n\t}\n\n\tprivate onUpdateAvailable(): void {\n\t\tif (this.state.type !== StateType.CheckingForUpdates) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.Downloading);\n\t}\n\n\tprivate onUpdateDownloaded(update: IUpdate): void {\n\t\tif (this.state.type !== StateType.Downloading) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.Downloaded(update));\n\n\t\ttype UpdateDownloadedClassification = {\n\t\t\towner: \"joaomoreno\";\n\t\t\tversion: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The version number of the new VS Code that has been downloaded.\";\n\t\t\t};\n\t\t\tcomment: \"This is used to know how often VS Code has successfully downloaded the update.\";\n\t\t};\n\t\tthis.telemetryService.publicLog2<\n\t\t\t{ version: string },\n\t\t\tUpdateDownloadedClassification\n\t\t>(\"update:downloaded\", { version: update.version });\n\n\t\tthis.setState(State.Ready(update));\n\t}\n\n\tprivate onUpdateNotAvailable(): void {\n\t\tif (this.state.type !== StateType.CheckingForUpdates) {\n\t\t\treturn;\n\t\t}\n\t\tthis.telemetryService.publicLog2<\n\t\t\t{ explicit: boolean },\n\t\t\tUpdateNotAvailableClassification\n\t\t>(\"update:notAvailable\", { explicit: this.state.explicit });\n\n\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t}\n\n\tprotected override doQuitAndInstall(): void {\n\t\tthis.logService.trace(\n\t\t\t\"update#quitAndInstall(): running raw#quitAndInstall()\",\n\t\t);\n\t\telectron.autoUpdater.quitAndInstall();\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
