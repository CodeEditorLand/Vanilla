{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/update/electron-main/updateService.linux.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IEnvironmentMainService } from \"../../environment/electron-main/environmentMainService.js\";\nimport { ILifecycleMainService } from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { INativeHostMainService } from \"../../native/electron-main/nativeHostMainService.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { IRequestService, asJson } from \"../../request/common/request.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport {\n\ttype AvailableForDownload,\n\ttype IUpdate,\n\tState,\n\tUpdateType,\n} from \"../common/update.js\";\nimport {\n\tAbstractUpdateService,\n\ttype UpdateNotAvailableClassification,\n\tcreateUpdateURL,\n} from \"./abstractUpdateService.js\";\n\nexport class LinuxUpdateService extends AbstractUpdateService {\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@INativeHostMainService private readonly nativeHostMainService: INativeHostMainService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(lifecycleMainService, configurationService, environmentMainService, requestService, logService, productService);\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string {\n\t\treturn createUpdateURL(\n\t\t\t`linux-${process.arch}`,\n\t\t\tquality,\n\t\t\tthis.productService,\n\t\t);\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tif (!this.url) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.CheckingForUpdates(context));\n\t\tthis.requestService\n\t\t\t.request({ url: this.url }, CancellationToken.None)\n\t\t\t.then<IUpdate | null>(asJson)\n\t\t\t.then((update) => {\n\t\t\t\tif (\n\t\t\t\t\t!update ||\n\t\t\t\t\t!update.url ||\n\t\t\t\t\t!update.version ||\n\t\t\t\t\t!update.productVersion\n\t\t\t\t) {\n\t\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t\t{ explicit: boolean },\n\t\t\t\t\t\tUpdateNotAvailableClassification\n\t\t\t\t\t>(\"update:notAvailable\", { explicit: !!context });\n\n\t\t\t\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState(State.AvailableForDownload(update));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(undefined, (err) => {\n\t\t\t\tthis.logService.error(err);\n\t\t\t\t// only show message when explicitly checking for updates\n\t\t\t\tconst message: string | undefined = !!context\n\t\t\t\t\t? err.message || err\n\t\t\t\t\t: undefined;\n\t\t\t\tthis.setState(State.Idle(UpdateType.Archive, message));\n\t\t\t});\n\t}\n\n\tprotected override async doDownloadUpdate(\n\t\tstate: AvailableForDownload,\n\t): Promise<void> {\n\t\t// Use the download URL if available as we don't currently detect the package type that was\n\t\t// installed and the website download page is more useful than the tarball generally.\n\t\tif (\n\t\t\tthis.productService.downloadUrl &&\n\t\t\tthis.productService.downloadUrl.length > 0\n\t\t) {\n\t\t\tthis.nativeHostMainService.openExternal(\n\t\t\t\tundefined,\n\t\t\t\tthis.productService.downloadUrl,\n\t\t\t);\n\t\t} else if (state.update.url) {\n\t\t\tthis.nativeHostMainService.openExternal(\n\t\t\t\tundefined,\n\t\t\t\tstate.update.url,\n\t\t\t);\n\t\t}\n\n\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,8BAA8B;AACvC,SAAS,uBAAuB;AAChC,SAAS,iBAAiB,cAAc;AACxC,SAAS,yBAAyB;AAClC;AAAA,EAGC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AAEA,IAAM,qBAAN,cAAiC,sBAAsB;AAAA,EAC7D,YACwB,sBACA,sBACa,kBACX,wBACR,gBACJ,YAC4B,uBACxB,gBAChB;AACD,UAAM,sBAAsB,sBAAsB,wBAAwB,gBAAgB,YAAY,cAAc;AAPhF;AAIK;AAAA,EAI1C;AAAA,EAtCD,OA0B8D;AAAA;AAAA;AAAA,EAcnD,mBAAmB,SAAyB;AACrD,WAAO;AAAA,MACN,SAAS,QAAQ,IAAI;AAAA,MACrB;AAAA,MACA,KAAK;AAAA,IACN;AAAA,EACD;AAAA,EAEU,kBAAkB,SAAoB;AAC/C,QAAI,CAAC,KAAK,KAAK;AACd;AAAA,IACD;AAEA,SAAK,SAAS,MAAM,mBAAmB,OAAO,CAAC;AAC/C,SAAK,eACH,QAAQ,EAAE,KAAK,KAAK,IAAI,GAAG,kBAAkB,IAAI,EACjD,KAAqB,MAAM,EAC3B,KAAK,CAAC,WAAW;AACjB,UACC,CAAC,UACD,CAAC,OAAO,OACR,CAAC,OAAO,WACR,CAAC,OAAO,gBACP;AACD,aAAK,iBAAiB,WAGpB,uBAAuB,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC;AAEhD,aAAK,SAAS,MAAM,KAAK,WAAW,OAAO,CAAC;AAAA,MAC7C,OAAO;AACN,aAAK,SAAS,MAAM,qBAAqB,MAAM,CAAC;AAAA,MACjD;AAAA,IACD,CAAC,EACA,KAAK,QAAW,CAAC,QAAQ;AACzB,WAAK,WAAW,MAAM,GAAG;AAEzB,YAAM,UAA8B,CAAC,CAAC,UACnC,IAAI,WAAW,MACf;AACH,WAAK,SAAS,MAAM,KAAK,WAAW,SAAS,OAAO,CAAC;AAAA,IACtD,CAAC;AAAA,EACH;AAAA,EAEA,MAAyB,iBACxB,OACgB;AAGhB,QACC,KAAK,eAAe,eACpB,KAAK,eAAe,YAAY,SAAS,GACxC;AACD,WAAK,sBAAsB;AAAA,QAC1B;AAAA,QACA,KAAK,eAAe;AAAA,MACrB;AAAA,IACD,WAAW,MAAM,OAAO,KAAK;AAC5B,WAAK,sBAAsB;AAAA,QAC1B;AAAA,QACA,MAAM,OAAO;AAAA,MACd;AAAA,IACD;AAEA,SAAK,SAAS,MAAM,KAAK,WAAW,OAAO,CAAC;AAAA,EAC7C;AACD;AAhFa,qBAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GATU;",
  "names": []
}
