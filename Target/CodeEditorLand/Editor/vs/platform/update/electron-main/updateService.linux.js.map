{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/update/electron-main/updateService.linux.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentMainService } from '../../environment/electron-main/environmentMainService.js';\nimport { ILifecycleMainService } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { INativeHostMainService } from '../../native/electron-main/nativeHostMainService.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { asJson, IRequestService } from '../../request/common/request.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { AvailableForDownload, IUpdate, State, UpdateType } from '../common/update.js';\nimport { AbstractUpdateService, createUpdateURL, UpdateNotAvailableClassification } from './abstractUpdateService.js';\n\nexport class LinuxUpdateService extends AbstractUpdateService {\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@INativeHostMainService private readonly nativeHostMainService: INativeHostMainService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(lifecycleMainService, configurationService, environmentMainService, requestService, logService, productService);\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string {\n\t\treturn createUpdateURL(`linux-${process.arch}`, quality, this.productService);\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tif (!this.url) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.CheckingForUpdates(context));\n\t\tthis.requestService.request({ url: this.url }, CancellationToken.None)\n\t\t\t.then<IUpdate | null>(asJson)\n\t\t\t.then(update => {\n\t\t\t\tif (!update || !update.url || !update.version || !update.productVersion) {\n\t\t\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: !!context });\n\n\t\t\t\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState(State.AvailableForDownload(update));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(undefined, err => {\n\t\t\t\tthis.logService.error(err);\n\t\t\t\t// only show message when explicitly checking for updates\n\t\t\t\tconst message: string | undefined = !!context ? (err.message || err) : undefined;\n\t\t\t\tthis.setState(State.Idle(UpdateType.Archive, message));\n\t\t\t});\n\t}\n\n\tprotected override async doDownloadUpdate(state: AvailableForDownload): Promise<void> {\n\t\t// Use the download URL if available as we don't currently detect the package type that was\n\t\t// installed and the website download page is more useful than the tarball generally.\n\t\tif (this.productService.downloadUrl && this.productService.downloadUrl.length > 0) {\n\t\t\tthis.nativeHostMainService.openExternal(undefined, this.productService.downloadUrl);\n\t\t} else if (state.update.url) {\n\t\t\tthis.nativeHostMainService.openExternal(undefined, state.update.url);\n\t\t}\n\n\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,8BAA8B;AACvC,SAAS,uBAAuB;AAChC,SAAS,QAAQ,uBAAuB;AACxC,SAAS,yBAAyB;AAClC,SAAS,sBAAsB,SAAS,OAAO,kBAAkB;AACjE,SAAS,uBAAuB,iBAAiB,wCAAwC;AAElF,IAAM,qBAAN,cAAiC,sBAAsB;AAAA,EAE7D,YACwB,sBACA,sBACa,kBACX,wBACR,gBACJ,YAC4B,uBACxB,gBAChB;AACD,UAAM,sBAAsB,sBAAsB,wBAAwB,gBAAgB,YAAY,cAAc;AAPhF;AAIK;AAAA,EAI1C;AAAA,EA9BD,OAiB8D;AAAA;AAAA;AAAA,EAenD,mBAAmB,SAAyB;AACrD,WAAO,gBAAgB,SAAS,QAAQ,IAAI,IAAI,SAAS,KAAK,cAAc;AAAA,EAC7E;AAAA,EAEU,kBAAkB,SAAoB;AAC/C,QAAI,CAAC,KAAK,KAAK;AACd;AAAA,IACD;AAEA,SAAK,SAAS,MAAM,mBAAmB,OAAO,CAAC;AAC/C,SAAK,eAAe,QAAQ,EAAE,KAAK,KAAK,IAAI,GAAG,kBAAkB,IAAI,EACnE,KAAqB,MAAM,EAC3B,KAAK,YAAU;AACf,UAAI,CAAC,UAAU,CAAC,OAAO,OAAO,CAAC,OAAO,WAAW,CAAC,OAAO,gBAAgB;AACxE,aAAK,iBAAiB,WAAoE,uBAAuB,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC;AAExI,aAAK,SAAS,MAAM,KAAK,WAAW,OAAO,CAAC;AAAA,MAC7C,OAAO;AACN,aAAK,SAAS,MAAM,qBAAqB,MAAM,CAAC;AAAA,MACjD;AAAA,IACD,CAAC,EACA,KAAK,QAAW,SAAO;AACvB,WAAK,WAAW,MAAM,GAAG;AAEzB,YAAM,UAA8B,CAAC,CAAC,UAAW,IAAI,WAAW,MAAO;AACvE,WAAK,SAAS,MAAM,KAAK,WAAW,SAAS,OAAO,CAAC;AAAA,IACtD,CAAC;AAAA,EACH;AAAA,EAEA,MAAyB,iBAAiB,OAA4C;AAGrF,QAAI,KAAK,eAAe,eAAe,KAAK,eAAe,YAAY,SAAS,GAAG;AAClF,WAAK,sBAAsB,aAAa,QAAW,KAAK,eAAe,WAAW;AAAA,IACnF,WAAW,MAAM,OAAO,KAAK;AAC5B,WAAK,sBAAsB,aAAa,QAAW,MAAM,OAAO,GAAG;AAAA,IACpE;AAEA,SAAK,SAAS,MAAM,KAAK,WAAW,OAAO,CAAC;AAAA,EAC7C;AACD;AAvDa,qBAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAVU;",
  "names": []
}
