{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/update/electron-main/updateService.snap.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { spawn } from 'child_process';\nimport { realpath, watch } from 'fs';\nimport { timeout } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport * as path from '../../../base/common/path.js';\nimport { IEnvironmentMainService } from '../../environment/electron-main/environmentMainService.js';\nimport { ILifecycleMainService } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { AvailableForDownload, IUpdateService, State, StateType, UpdateType } from '../common/update.js';\nimport { UpdateNotAvailableClassification } from './abstractUpdateService.js';\n\nabstract class AbstractUpdateService implements IUpdateService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _state: State = State.Uninitialized;\n\n\tprivate readonly _onStateChange = new Emitter<State>();\n\treadonly onStateChange: Event<State> = this._onStateChange.event;\n\n\tget state(): State {\n\t\treturn this._state;\n\t}\n\n\tprotected setState(state: State): void {\n\t\tthis.logService.info('update#setState', state.type);\n\t\tthis._state = state;\n\t\tthis._onStateChange.fire(state);\n\t}\n\n\tconstructor(\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@ILogService protected logService: ILogService,\n\t) {\n\t\tif (environmentMainService.disableUpdates) {\n\t\t\tthis.logService.info('update#ctor - updates are disabled');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.Idle(this.getUpdateType()));\n\n\t\t// Start checking for updates after 30 seconds\n\t\tthis.scheduleCheckForUpdates(30 * 1000).then(undefined, err => this.logService.error(err));\n\t}\n\n\tprivate scheduleCheckForUpdates(delay = 60 * 60 * 1000): Promise<void> {\n\t\treturn timeout(delay)\n\t\t\t.then(() => this.checkForUpdates(false))\n\t\t\t.then(() => {\n\t\t\t\t// Check again after 1 hour\n\t\t\t\treturn this.scheduleCheckForUpdates(60 * 60 * 1000);\n\t\t\t});\n\t}\n\n\tasync checkForUpdates(explicit: boolean): Promise<void> {\n\t\tthis.logService.trace('update#checkForUpdates, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Idle) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.doCheckForUpdates(explicit);\n\t}\n\n\tasync downloadUpdate(): Promise<void> {\n\t\tthis.logService.trace('update#downloadUpdate, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.AvailableForDownload) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doDownloadUpdate(this.state);\n\t}\n\n\tprotected doDownloadUpdate(state: AvailableForDownload): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync applyUpdate(): Promise<void> {\n\t\tthis.logService.trace('update#applyUpdate, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Downloaded) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doApplyUpdate();\n\t}\n\n\tprotected doApplyUpdate(): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tquitAndInstall(): Promise<void> {\n\t\tthis.logService.trace('update#quitAndInstall, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Ready) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis.logService.trace('update#quitAndInstall(): before lifecycle quit()');\n\n\t\tthis.lifecycleMainService.quit(true /* will restart */).then(vetod => {\n\t\t\tthis.logService.trace(`update#quitAndInstall(): after lifecycle quit() with veto: ${vetod}`);\n\t\t\tif (vetod) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\t\t\tthis.doQuitAndInstall();\n\t\t});\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\n\tprotected getUpdateType(): UpdateType {\n\t\treturn UpdateType.Snap;\n\t}\n\n\tprotected doQuitAndInstall(): void {\n\t\t// noop\n\t}\n\n\tabstract isLatestVersion(): Promise<boolean | undefined>;\n\n\tasync _applySpecificUpdate(packagePath: string): Promise<void> {\n\t\t// noop\n\t}\n\n\tprotected abstract doCheckForUpdates(context: any): void;\n}\n\nexport class SnapUpdateService extends AbstractUpdateService {\n\n\tconstructor(\n\t\tprivate snap: string,\n\t\tprivate snapRevision: string,\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@ILogService logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tsuper(lifecycleMainService, environmentMainService, logService);\n\n\t\tconst watcher = watch(path.dirname(this.snap));\n\t\tconst onChange = Event.fromNodeEventEmitter(watcher, 'change', (_, fileName: string) => fileName);\n\t\tconst onCurrentChange = Event.filter(onChange, n => n === 'current');\n\t\tconst onDebouncedCurrentChange = Event.debounce(onCurrentChange, (_, e) => e, 2000);\n\t\tconst listener = onDebouncedCurrentChange(() => this.checkForUpdates(false));\n\n\t\tlifecycleMainService.onWillShutdown(() => {\n\t\t\tlistener.dispose();\n\t\t\twatcher.close();\n\t\t});\n\t}\n\n\tprotected doCheckForUpdates(): void {\n\t\tthis.setState(State.CheckingForUpdates(false));\n\t\tthis.isUpdateAvailable().then(result => {\n\t\t\tif (result) {\n\t\t\t\tthis.setState(State.Ready({ version: 'something' }));\n\t\t\t} else {\n\t\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: false });\n\n\t\t\t\tthis.setState(State.Idle(UpdateType.Snap));\n\t\t\t}\n\t\t}, err => {\n\t\t\tthis.logService.error(err);\n\t\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: false });\n\t\t\tthis.setState(State.Idle(UpdateType.Snap, err.message || err));\n\t\t});\n\t}\n\n\tprotected override doQuitAndInstall(): void {\n\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\n\t\t// Allow 3 seconds for VS Code to close\n\t\tspawn('sleep 3 && ' + path.basename(process.argv[0]), {\n\t\t\tshell: true,\n\t\t\tdetached: true,\n\t\t\tstdio: 'ignore',\n\t\t});\n\t}\n\n\tprivate async isUpdateAvailable(): Promise<boolean> {\n\t\tconst resolvedCurrentSnapPath = await new Promise<string>((c, e) => realpath(`${path.dirname(this.snap)}/current`, (err, r) => err ? e(err) : c(r)));\n\t\tconst currentRevision = path.basename(resolvedCurrentSnapPath);\n\t\treturn this.snapRevision !== currentRevision;\n\t}\n\n\tisLatestVersion(): Promise<boolean | undefined> {\n\t\treturn this.isUpdateAvailable().then(undefined, err => {\n\t\t\tthis.logService.error('update#checkForSnapUpdate(): Could not get realpath of application.');\n\t\t\treturn undefined;\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
