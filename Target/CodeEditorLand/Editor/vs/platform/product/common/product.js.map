{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/product/common/product.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { env } from \"../../../base/common/process.js\";\nimport type { IProductConfiguration } from \"../../../base/common/product.js\";\nimport type { ISandboxConfiguration } from \"../../../base/parts/sandbox/common/sandboxTypes.js\";\n\n/**\n * @deprecated You MUST use `IProductService` if possible.\n */\nlet product: IProductConfiguration;\n\n// Native sandbox environment\nconst vscodeGlobal = (globalThis as any).vscode;\nif (\n\ttypeof vscodeGlobal !== \"undefined\" &&\n\ttypeof vscodeGlobal.context !== \"undefined\"\n) {\n\tconst configuration: ISandboxConfiguration | undefined =\n\t\tvscodeGlobal.context.configuration();\n\tif (configuration) {\n\t\tproduct = configuration.product;\n\t} else {\n\t\tthrow new Error(\n\t\t\t\"Sandbox: unable to resolve product configuration from preload script.\",\n\t\t);\n\t}\n}\n// _VSCODE environment\nelse if (globalThis._VSCODE_PRODUCT_JSON && globalThis._VSCODE_PACKAGE_JSON) {\n\t// Obtain values from product.json and package.json-data\n\tproduct =\n\t\tglobalThis._VSCODE_PRODUCT_JSON as unknown as IProductConfiguration;\n\n\t// Running out of sources\n\tif (env[\"VSCODE_DEV\"]) {\n\t\tObject.assign(product, {\n\t\t\tnameShort: `${product.nameShort} Dev`,\n\t\t\tnameLong: `${product.nameLong} Dev`,\n\t\t\tdataFolderName: `${product.dataFolderName}-dev`,\n\t\t\tserverDataFolderName: product.serverDataFolderName\n\t\t\t\t? `${product.serverDataFolderName}-dev`\n\t\t\t\t: undefined,\n\t\t});\n\t}\n\n\t// Version is added during built time, but we still\n\t// want to have it running out of sources so we\n\t// read it from package.json only when we need it.\n\tif (!product.version) {\n\t\tconst pkg = globalThis._VSCODE_PACKAGE_JSON as { version: string };\n\n\t\tObject.assign(product, {\n\t\t\tversion: pkg.version,\n\t\t});\n\t}\n}\n\n// Web environment or unknown\nelse {\n\t// Built time configuration (do NOT modify)\n\tproduct = {\n\t\t/*BUILD->INSERT_PRODUCT_CONFIGURATION*/\n\t} as any;\n\n\t// Running out of sources\n\tif (Object.keys(product).length === 0) {\n\t\tObject.assign(product, {\n\t\t\tversion: \"1.94.0-dev\",\n\t\t\tnameShort: \"Code - OSS Dev\",\n\t\t\tnameLong: \"Code - OSS Dev\",\n\t\t\tapplicationName: \"code-oss\",\n\t\t\tdataFolderName: \".vscode-oss\",\n\t\t\turlProtocol: \"code-oss\",\n\t\t\treportIssueUrl: \"https://github.com/microsoft/vscode/issues/new\",\n\t\t\tlicenseName: \"MIT\",\n\t\t\tlicenseUrl:\n\t\t\t\t\"https://github.com/microsoft/vscode/blob/main/LICENSE.txt\",\n\t\t\tserverLicenseUrl:\n\t\t\t\t\"https://github.com/microsoft/vscode/blob/main/LICENSE.txt\",\n\t\t});\n\t}\n}\n\n/**\n * @deprecated You MUST use `IProductService` if possible.\n */\nexport default product;\n"],
  "mappings": "AAKA,SAAS,WAAW;AAOpB,IAAI;AAGJ,MAAM,eAAgB,WAAmB;AACzC,IACC,OAAO,iBAAiB,eACxB,OAAO,aAAa,YAAY,aAC/B;AACD,QAAM,gBACL,aAAa,QAAQ,cAAc;AACpC,MAAI,eAAe;AAClB,cAAU,cAAc;AAAA,EACzB,OAAO;AACN,UAAM,IAAI;AAAA,MACT;AAAA,IACD;AAAA,EACD;AACD,WAES,WAAW,wBAAwB,WAAW,sBAAsB;AAE5E,YACC,WAAW;AAGZ,MAAI,IAAI,YAAY,GAAG;AACtB,WAAO,OAAO,SAAS;AAAA,MACtB,WAAW,GAAG,QAAQ,SAAS;AAAA,MAC/B,UAAU,GAAG,QAAQ,QAAQ;AAAA,MAC7B,gBAAgB,GAAG,QAAQ,cAAc;AAAA,MACzC,sBAAsB,QAAQ,uBAC3B,GAAG,QAAQ,oBAAoB,SAC/B;AAAA,IACJ,CAAC;AAAA,EACF;AAKA,MAAI,CAAC,QAAQ,SAAS;AACrB,UAAM,MAAM,WAAW;AAEvB,WAAO,OAAO,SAAS;AAAA,MACtB,SAAS,IAAI;AAAA,IACd,CAAC;AAAA,EACF;AACD,OAGK;AAEJ,YAAU;AAAA;AAAA,EAEV;AAGA,MAAI,OAAO,KAAK,OAAO,EAAE,WAAW,GAAG;AACtC,WAAO,OAAO,SAAS;AAAA,MACtB,SAAS;AAAA,MACT,WAAW;AAAA,MACX,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,YACC;AAAA,MACD,kBACC;AAAA,IACF,CAAC;AAAA,EACF;AACD;AAKA,IAAO,kBAAQ;",
  "names": []
}
