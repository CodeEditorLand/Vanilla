{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspaces/node/workspaces.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createHash } from \"crypto\";\nimport type { Stats } from \"fs\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport {\n\tisLinux,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport { originalFSPath } from \"../../../base/common/resources.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type {\n\tIEmptyWorkspaceIdentifier,\n\tISingleFolderWorkspaceIdentifier,\n\tIWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\n\n/**\n * Length of workspace identifiers that are not empty. Those are\n * MD5 hashes (128bits / 4 due to hex presentation).\n */\nexport const NON_EMPTY_WORKSPACE_ID_LENGTH = 128 / 4;\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// NOTE: DO NOT CHANGE. IDENTIFIERS HAVE TO REMAIN STABLE\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nexport function getWorkspaceIdentifier(configPath: URI): IWorkspaceIdentifier {\n\tfunction getWorkspaceId(): string {\n\t\tlet configPathStr =\n\t\t\tconfigPath.scheme === Schemas.file\n\t\t\t\t? originalFSPath(configPath)\n\t\t\t\t: configPath.toString();\n\t\tif (!isLinux) {\n\t\t\tconfigPathStr = configPathStr.toLowerCase(); // sanitize for platform file system\n\t\t}\n\n\t\treturn createHash(\"md5\").update(configPathStr).digest(\"hex\"); // CodeQL [SM04514] Using MD5 to convert a file path to a fixed length\n\t}\n\n\treturn {\n\t\tid: getWorkspaceId(),\n\t\tconfigPath,\n\t};\n}\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// NOTE: DO NOT CHANGE. IDENTIFIERS HAVE TO REMAIN STABLE\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nexport function getSingleFolderWorkspaceIdentifier(\n\tfolderUri: URI,\n): ISingleFolderWorkspaceIdentifier | undefined;\nexport function getSingleFolderWorkspaceIdentifier(\n\tfolderUri: URI,\n\tfolderStat: Stats,\n): ISingleFolderWorkspaceIdentifier;\nexport function getSingleFolderWorkspaceIdentifier(\n\tfolderUri: URI,\n\tfolderStat?: Stats,\n): ISingleFolderWorkspaceIdentifier | undefined {\n\tfunction getFolderId(): string | undefined {\n\t\t// Remote: produce a hash from the entire URI\n\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\treturn createHash(\"md5\").update(folderUri.toString()).digest(\"hex\"); // CodeQL [SM04514] Using MD5 to convert a file path to a fixed length\n\t\t}\n\n\t\t// Local: we use the ctime as extra salt to the\n\t\t// identifier so that folders getting recreated\n\t\t// result in a different identifier. However, if\n\t\t// the stat is not provided we return `undefined`\n\t\t// to ensure identifiers are stable for the given\n\t\t// URI.\n\n\t\tif (!folderStat) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet ctime: number | undefined;\n\t\tif (isLinux) {\n\t\t\tctime = folderStat.ino; // Linux: birthtime is ctime, so we cannot use it! We use the ino instead!\n\t\t} else if (isMacintosh) {\n\t\t\tctime = folderStat.birthtime.getTime(); // macOS: birthtime is fine to use as is\n\t\t} else if (isWindows) {\n\t\t\tif (typeof folderStat.birthtimeMs === \"number\") {\n\t\t\t\tctime = Math.floor(folderStat.birthtimeMs); // Windows: fix precision issue in node.js 8.x to get 7.x results (see https://github.com/nodejs/node/issues/19897)\n\t\t\t} else {\n\t\t\t\tctime = folderStat.birthtime.getTime();\n\t\t\t}\n\t\t}\n\n\t\treturn createHash(\"md5\")\n\t\t\t.update(folderUri.fsPath)\n\t\t\t.update(ctime ? String(ctime) : \"\")\n\t\t\t.digest(\"hex\"); // CodeQL [SM04514] Using MD5 to convert a file path to a fixed length\n\t}\n\n\tconst folderId = getFolderId();\n\tif (typeof folderId === \"string\") {\n\t\treturn {\n\t\t\tid: folderId,\n\t\t\turi: folderUri,\n\t\t};\n\t}\n\n\treturn undefined; // invalid folder\n}\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// NOTE: DO NOT CHANGE. IDENTIFIERS HAVE TO REMAIN STABLE\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nexport function createEmptyWorkspaceIdentifier(): IEmptyWorkspaceIdentifier {\n\treturn {\n\t\tid: (Date.now() + Math.round(Math.random() * 1000)).toString(),\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAE3B,SAAS,eAAe;AACxB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,sBAAsB;AAYxB,MAAM,gCAAgC,MAAM;AAM5C,SAAS,uBAAuB,YAAuC;AAC7E,WAAS,iBAAyB;AACjC,QAAI,gBACH,WAAW,WAAW,QAAQ,OAC3B,eAAe,UAAU,IACzB,WAAW,SAAS;AACxB,QAAI,CAAC,SAAS;AACb,sBAAgB,cAAc,YAAY;AAAA,IAC3C;AAEA,WAAO,WAAW,KAAK,EAAE,OAAO,aAAa,EAAE,OAAO,KAAK;AAAA,EAC5D;AAVS;AAYT,SAAO;AAAA,IACN,IAAI,eAAe;AAAA,IACnB;AAAA,EACD;AACD;AAjBgB;AA8BT,SAAS,mCACf,WACA,YAC+C;AAC/C,WAAS,cAAkC;AAE1C,QAAI,UAAU,WAAW,QAAQ,MAAM;AACtC,aAAO,WAAW,KAAK,EAAE,OAAO,UAAU,SAAS,CAAC,EAAE,OAAO,KAAK;AAAA,IACnE;AASA,QAAI,CAAC,YAAY;AAChB,aAAO;AAAA,IACR;AAEA,QAAI;AACJ,QAAI,SAAS;AACZ,cAAQ,WAAW;AAAA,IACpB,WAAW,aAAa;AACvB,cAAQ,WAAW,UAAU,QAAQ;AAAA,IACtC,WAAW,WAAW;AACrB,UAAI,OAAO,WAAW,gBAAgB,UAAU;AAC/C,gBAAQ,KAAK,MAAM,WAAW,WAAW;AAAA,MAC1C,OAAO;AACN,gBAAQ,WAAW,UAAU,QAAQ;AAAA,MACtC;AAAA,IACD;AAEA,WAAO,WAAW,KAAK,EACrB,OAAO,UAAU,MAAM,EACvB,OAAO,QAAQ,OAAO,KAAK,IAAI,EAAE,EACjC,OAAO,KAAK;AAAA,EACf;AAlCS;AAoCT,QAAM,WAAW,YAAY;AAC7B,MAAI,OAAO,aAAa,UAAU;AACjC,WAAO;AAAA,MACN,IAAI;AAAA,MACJ,KAAK;AAAA,IACN;AAAA,EACD;AAEA,SAAO;AACR;AAjDgB;AAuDT,SAAS,iCAA4D;AAC3E,SAAO;AAAA,IACN,KAAK,KAAK,IAAI,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI,GAAI,GAAG,SAAS;AAAA,EAC9D;AACD;AAJgB;",
  "names": []
}
