import e from"assert";import{URI as t}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as l}from"../../../../base/test/common/utils.js";import{reviveIdentifier as s,hasWorkspaceFileExtension as n,isWorkspaceIdentifier as r,isSingleFolderWorkspaceIdentifier as d,toWorkspaceIdentifier as a,isEmptyWorkspaceIdentifier as c}from"../../../workspace/common/workspace.js";suite("Workspaces",()=>{test("reviveIdentifier",()=>{const i={id:"id",configPath:t.file("foo").toJSON()};e.strictEqual(r(s(i)),!0);const f={id:"id",uri:t.file("foo").toJSON()};e.strictEqual(d(s(f)),!0);const o={id:"id"};e.strictEqual(s(o).id,o.id),e.strictEqual(r(o),!1),e.strictEqual(d(o),!1),e.strictEqual(s(void 0),void 0)}),test("hasWorkspaceFileExtension",()=>{e.strictEqual(n("something"),!1),e.strictEqual(n("something.code-workspace"),!0)}),test("toWorkspaceIdentifier",()=>{let i=a({id:"id",folders:[]});e.ok(i),e.ok(c(i)),e.ok(!r(i)),e.ok(!r(i)),i=a({id:"id",folders:[{index:0,name:"test",toResource:()=>t.file("test"),uri:t.file("test")}]}),e.ok(i),e.ok(d(i)),e.ok(!r(i)),i=a({id:"id",configuration:t.file("test.code-workspace"),folders:[]}),e.ok(i),e.ok(!d(i)),e.ok(r(i))}),l()});
