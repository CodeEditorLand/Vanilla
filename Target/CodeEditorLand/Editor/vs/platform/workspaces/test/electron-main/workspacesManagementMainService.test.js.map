{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspaces/test/electron-main/workspacesManagementMainService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport { isUNC, toSlashes } from '../../../../base/common/extpath.js';\nimport { normalizeDriveLetter } from '../../../../base/common/labels.js';\nimport * as path from '../../../../base/common/path.js';\nimport { isWindows } from '../../../../base/common/platform.js';\nimport { extUriBiasedIgnorePathCase } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as pfs from '../../../../base/node/pfs.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { flakySuite, getRandomTestPath } from '../../../../base/test/node/testUtils.js';\nimport { IWorkspaceBackupInfo, IFolderBackupInfo } from '../../../backup/common/backup.js';\nimport { IBackupMainService } from '../../../backup/electron-main/backup.js';\nimport { IEmptyWindowBackupInfo } from '../../../backup/node/backup.js';\nimport { INativeOpenDialogOptions } from '../../../dialogs/common/dialogs.js';\nimport { IDialogMainService } from '../../../dialogs/electron-main/dialogMainService.js';\nimport { EnvironmentMainService } from '../../../environment/electron-main/environmentMainService.js';\nimport { OPTIONS, parseArgs } from '../../../environment/node/argv.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport product from '../../../product/common/product.js';\nimport { IProductService } from '../../../product/common/productService.js';\nimport { SaveStrategy, StateService } from '../../../state/node/stateService.js';\nimport { UriIdentityService } from '../../../uriIdentity/common/uriIdentityService.js';\nimport { UserDataProfilesMainService } from '../../../userDataProfile/electron-main/userDataProfile.js';\nimport { IRawFileWorkspaceFolder, IRawUriWorkspaceFolder, WORKSPACE_EXTENSION } from '../../../workspace/common/workspace.js';\nimport { IStoredWorkspace, IStoredWorkspaceFolder, IWorkspaceFolderCreationData, rewriteWorkspaceFileForNewLocation } from '../../common/workspaces.js';\nimport { WorkspacesManagementMainService } from '../../electron-main/workspacesManagementMainService.js';\n\nflakySuite('WorkspacesManagementMainService', () => {\n\n\tclass TestDialogMainService implements IDialogMainService {\n\n\t\tdeclare readonly _serviceBrand: undefined;\n\n\t\tpickFileFolder(options: INativeOpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<string[] | undefined> { throw new Error('Method not implemented.'); }\n\t\tpickFolder(options: INativeOpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<string[] | undefined> { throw new Error('Method not implemented.'); }\n\t\tpickFile(options: INativeOpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<string[] | undefined> { throw new Error('Method not implemented.'); }\n\t\tpickWorkspace(options: INativeOpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<string[] | undefined> { throw new Error('Method not implemented.'); }\n\t\tshowMessageBox(options: Electron.MessageBoxOptions, window?: Electron.BrowserWindow | undefined): Promise<Electron.MessageBoxReturnValue> { throw new Error('Method not implemented.'); }\n\t\tshowSaveDialog(options: Electron.SaveDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<Electron.SaveDialogReturnValue> { throw new Error('Method not implemented.'); }\n\t\tshowOpenDialog(options: Electron.OpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<Electron.OpenDialogReturnValue> { throw new Error('Method not implemented.'); }\n\t}\n\n\tclass TestBackupMainService implements IBackupMainService {\n\n\t\tdeclare readonly _serviceBrand: undefined;\n\n\t\tisHotExitEnabled(): boolean { throw new Error('Method not implemented.'); }\n\t\tgetEmptyWindowBackups(): IEmptyWindowBackupInfo[] { throw new Error('Method not implemented.'); }\n\t\tregisterWorkspaceBackup(workspaceInfo: IWorkspaceBackupInfo): string;\n\t\tregisterWorkspaceBackup(workspaceInfo: IWorkspaceBackupInfo, migrateFrom: string): Promise<string>;\n\t\tregisterWorkspaceBackup(workspaceInfo: unknown, migrateFrom?: unknown): string | Promise<string> { throw new Error('Method not implemented.'); }\n\t\tregisterFolderBackup(folder: IFolderBackupInfo): string { throw new Error('Method not implemented.'); }\n\t\tregisterEmptyWindowBackup(empty: IEmptyWindowBackupInfo): string { throw new Error('Method not implemented.'); }\n\t\tasync getDirtyWorkspaces(): Promise<(IWorkspaceBackupInfo | IFolderBackupInfo)[]> { return []; }\n\t}\n\n\tfunction createUntitledWorkspace(folders: string[], names?: string[]) {\n\t\treturn service.createUntitledWorkspace(folders.map((folder, index) => ({ uri: URI.file(folder), name: names ? names[index] : undefined } as IWorkspaceFolderCreationData)));\n\t}\n\n\tfunction createWorkspace(workspaceConfigPath: string, folders: (string | URI)[], names?: string[]): void {\n\t\tconst ws: IStoredWorkspace = {\n\t\t\tfolders: []\n\t\t};\n\n\t\tfor (let i = 0; i < folders.length; i++) {\n\t\t\tconst f = folders[i];\n\t\t\tconst s: IStoredWorkspaceFolder = f instanceof URI ? { uri: f.toString() } : { path: f };\n\t\t\tif (names) {\n\t\t\t\ts.name = names[i];\n\t\t\t}\n\t\t\tws.folders.push(s);\n\t\t}\n\n\t\tfs.writeFileSync(workspaceConfigPath, JSON.stringify(ws));\n\t}\n\n\tlet testDir: string;\n\tlet untitledWorkspacesHomePath: string;\n\tlet environmentMainService: EnvironmentMainService;\n\tlet service: WorkspacesManagementMainService;\n\n\tconst cwd = process.cwd();\n\tconst tmpDir = os.tmpdir();\n\n\tsetup(async () => {\n\t\ttestDir = getRandomTestPath(tmpDir, 'vsctests', 'workspacesmanagementmainservice');\n\t\tuntitledWorkspacesHomePath = path.join(testDir, 'Workspaces');\n\n\t\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\n\t\tenvironmentMainService = new class TestEnvironmentService extends EnvironmentMainService {\n\n\t\t\tconstructor() {\n\t\t\t\tsuper(parseArgs(process.argv, OPTIONS), productService);\n\t\t\t}\n\n\t\t\toverride get untitledWorkspacesHome(): URI {\n\t\t\t\treturn URI.file(untitledWorkspacesHomePath);\n\t\t\t}\n\t\t};\n\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = new FileService(logService);\n\t\tservice = new WorkspacesManagementMainService(environmentMainService, logService, new UserDataProfilesMainService(new StateService(SaveStrategy.DELAYED, environmentMainService, logService, fileService), new UriIdentityService(fileService), environmentMainService, fileService, logService), new TestBackupMainService(), new TestDialogMainService());\n\n\t\treturn fs.promises.mkdir(untitledWorkspacesHomePath, { recursive: true });\n\t});\n\n\tteardown(() => {\n\t\tservice.dispose();\n\n\t\treturn pfs.Promises.rm(testDir);\n\t});\n\n\tfunction assertPathEquals(pathInWorkspaceFile: string, pathOnDisk: string): void {\n\t\tif (isWindows) {\n\t\t\tpathInWorkspaceFile = normalizeDriveLetter(pathInWorkspaceFile);\n\t\t\tpathOnDisk = normalizeDriveLetter(pathOnDisk);\n\t\t\tif (!isUNC(pathOnDisk)) {\n\t\t\t\tpathOnDisk = toSlashes(pathOnDisk); // workspace file is using slashes for all paths except where mandatory\n\t\t\t}\n\t\t}\n\n\t\tassert.strictEqual(pathInWorkspaceFile, pathOnDisk);\n\t}\n\n\tfunction assertEqualURI(u1: URI, u2: URI): void {\n\t\tassert.strictEqual(u1.toString(), u2.toString());\n\t}\n\n\ttest('createWorkspace (folders)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tassert.ok(workspace);\n\t\tassert.ok(fs.existsSync(workspace.configPath.fsPath));\n\t\tassert.ok(service.isUntitledWorkspace(workspace));\n\n\t\tconst ws = (JSON.parse(fs.readFileSync(workspace.configPath.fsPath).toString()) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 2);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, cwd);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, tmpDir);\n\t\tassert.ok(!(<IRawFileWorkspaceFolder>ws.folders[0]).name);\n\t\tassert.ok(!(<IRawFileWorkspaceFolder>ws.folders[1]).name);\n\t});\n\n\ttest('createWorkspace (folders with name)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir], ['currentworkingdirectory', 'tempdir']);\n\t\tassert.ok(workspace);\n\t\tassert.ok(fs.existsSync(workspace.configPath.fsPath));\n\t\tassert.ok(service.isUntitledWorkspace(workspace));\n\n\t\tconst ws = (JSON.parse(fs.readFileSync(workspace.configPath.fsPath).toString()) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 2);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, cwd);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, tmpDir);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>ws.folders[0]).name, 'currentworkingdirectory');\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>ws.folders[1]).name, 'tempdir');\n\t});\n\n\ttest('createUntitledWorkspace (folders as other resource URIs)', async () => {\n\t\tconst folder1URI = URI.parse('myscheme://server/work/p/f1');\n\t\tconst folder2URI = URI.parse('myscheme://server/work/o/f3');\n\n\t\tconst workspace = await service.createUntitledWorkspace([{ uri: folder1URI }, { uri: folder2URI }], 'server');\n\t\tassert.ok(workspace);\n\t\tassert.ok(fs.existsSync(workspace.configPath.fsPath));\n\t\tassert.ok(service.isUntitledWorkspace(workspace));\n\n\t\tconst ws = (JSON.parse(fs.readFileSync(workspace.configPath.fsPath).toString()) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 2);\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[0]).uri, folder1URI.toString(true));\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[1]).uri, folder2URI.toString(true));\n\t\tassert.ok(!(<IRawFileWorkspaceFolder>ws.folders[0]).name);\n\t\tassert.ok(!(<IRawFileWorkspaceFolder>ws.folders[1]).name);\n\t\tassert.strictEqual(ws.remoteAuthority, 'server');\n\t});\n\n\ttest('resolveWorkspace', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tassert.ok(await service.resolveLocalWorkspace(workspace.configPath));\n\n\t\t// make it a valid workspace path\n\t\tconst newPath = path.join(path.dirname(workspace.configPath.fsPath), `workspace.${WORKSPACE_EXTENSION}`);\n\t\tfs.renameSync(workspace.configPath.fsPath, newPath);\n\t\tworkspace.configPath = URI.file(newPath);\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassert.strictEqual(2, resolved!.folders.length);\n\t\tassertEqualURI(resolved!.configPath, workspace.configPath);\n\t\tassert.ok(resolved!.id);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ something: 'something' })); // invalid workspace\n\n\t\tconst resolvedInvalid = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassert.ok(!resolvedInvalid);\n\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ transient: true, folders: [] })); // transient worksapce\n\t\tconst resolvedTransient = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassert.ok(resolvedTransient?.transient);\n\t});\n\n\ttest('resolveWorkspace (support relative paths)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ folders: [{ path: './ticino-playground/lib' }] }));\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassertEqualURI(resolved!.folders[0].uri, URI.file(path.join(path.dirname(workspace.configPath.fsPath), 'ticino-playground', 'lib')));\n\t});\n\n\ttest('resolveWorkspace (support relative paths #2)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ folders: [{ path: './ticino-playground/lib/../other' }] }));\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassertEqualURI(resolved!.folders[0].uri, URI.file(path.join(path.dirname(workspace.configPath.fsPath), 'ticino-playground', 'other')));\n\t});\n\n\ttest('resolveWorkspace (support relative paths #3)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ folders: [{ path: 'ticino-playground/lib' }] }));\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassertEqualURI(resolved!.folders[0].uri, URI.file(path.join(path.dirname(workspace.configPath.fsPath), 'ticino-playground', 'lib')));\n\t});\n\n\ttest('resolveWorkspace (support invalid JSON via fault tolerant parsing)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, '{ \"folders\": [ { \"path\": \"./ticino-playground/lib\" } , ] }'); // trailing comma\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassertEqualURI(resolved!.folders[0].uri, URI.file(path.join(path.dirname(workspace.configPath.fsPath), 'ticino-playground', 'lib')));\n\t});\n\n\ttest('rewriteWorkspaceFileForNewLocation', async () => {\n\t\tconst folder1 = cwd;  // absolute path because outside of tmpDir\n\t\tconst tmpInsideDir = path.join(tmpDir, 'inside');\n\n\t\tconst firstConfigPath = path.join(tmpDir, 'myworkspace0.code-workspace');\n\t\tcreateWorkspace(firstConfigPath, [folder1, 'inside', path.join('inside', 'somefolder')]);\n\t\tconst origContent = fs.readFileSync(firstConfigPath).toString();\n\n\t\tlet origConfigPath = URI.file(firstConfigPath);\n\t\tlet workspaceConfigPath = URI.file(path.join(tmpDir, 'inside', 'myworkspace1.code-workspace'));\n\t\tlet newContent = rewriteWorkspaceFileForNewLocation(origContent, origConfigPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tlet ws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 3);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, folder1); // absolute path because outside of tmpdir\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, '.');\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[2]).path, 'somefolder');\n\n\t\torigConfigPath = workspaceConfigPath;\n\t\tworkspaceConfigPath = URI.file(path.join(tmpDir, 'myworkspace2.code-workspace'));\n\t\tnewContent = rewriteWorkspaceFileForNewLocation(newContent, origConfigPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 3);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, folder1);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, 'inside');\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[2]).path, 'inside/somefolder');\n\n\t\torigConfigPath = workspaceConfigPath;\n\t\tworkspaceConfigPath = URI.file(path.join(tmpDir, 'other', 'myworkspace2.code-workspace'));\n\t\tnewContent = rewriteWorkspaceFileForNewLocation(newContent, origConfigPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 3);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, folder1);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, '../inside');\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[2]).path, '../inside/somefolder');\n\n\t\torigConfigPath = workspaceConfigPath;\n\t\tworkspaceConfigPath = URI.parse('foo://foo/bar/myworkspace2.code-workspace');\n\t\tnewContent = rewriteWorkspaceFileForNewLocation(newContent, origConfigPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 3);\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[0]).uri, URI.file(folder1).toString(true));\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[1]).uri, URI.file(tmpInsideDir).toString(true));\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[2]).uri, URI.file(path.join(tmpInsideDir, 'somefolder')).toString(true));\n\n\t\tfs.unlinkSync(firstConfigPath);\n\t});\n\n\ttest('rewriteWorkspaceFileForNewLocation (preserves comments)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir, path.join(tmpDir, 'somefolder')]);\n\t\tconst workspaceConfigPath = URI.file(path.join(tmpDir, `myworkspace.${Date.now()}.${WORKSPACE_EXTENSION}`));\n\n\t\tlet origContent = fs.readFileSync(workspace.configPath.fsPath).toString();\n\t\torigContent = `// this is a comment\\n${origContent}`;\n\n\t\tconst newContent = rewriteWorkspaceFileForNewLocation(origContent, workspace.configPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tassert.strictEqual(0, newContent.indexOf('// this is a comment'));\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t});\n\n\ttest('rewriteWorkspaceFileForNewLocation (preserves forward slashes)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir, path.join(tmpDir, 'somefolder')]);\n\t\tconst workspaceConfigPath = URI.file(path.join(tmpDir, `myworkspace.${Date.now()}.${WORKSPACE_EXTENSION}`));\n\n\t\tlet origContent = fs.readFileSync(workspace.configPath.fsPath).toString();\n\t\torigContent = origContent.replace(/[\\\\]/g, '/'); // convert backslash to slash\n\n\t\tconst newContent = rewriteWorkspaceFileForNewLocation(origContent, workspace.configPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tconst ws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.ok(ws.folders.every(f => (<IRawFileWorkspaceFolder>f).path.indexOf('\\\\') < 0));\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t});\n\n\t(!isWindows ? test.skip : test)('rewriteWorkspaceFileForNewLocation (unc paths)', async () => {\n\t\tconst workspaceLocation = path.join(tmpDir, 'wsloc');\n\t\tconst folder1Location = 'x:\\\\foo';\n\t\tconst folder2Location = '\\\\\\\\server\\\\share2\\\\some\\\\path';\n\t\tconst folder3Location = path.join(workspaceLocation, 'inner', 'more');\n\n\t\tconst workspace = await createUntitledWorkspace([folder1Location, folder2Location, folder3Location]);\n\t\tconst workspaceConfigPath = URI.file(path.join(workspaceLocation, `myworkspace.${Date.now()}.${WORKSPACE_EXTENSION}`));\n\t\tconst origContent = fs.readFileSync(workspace.configPath.fsPath).toString();\n\t\tconst newContent = rewriteWorkspaceFileForNewLocation(origContent, workspace.configPath, true, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tconst ws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, folder1Location);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, folder2Location);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[2]).path, 'inner/more');\n\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t});\n\n\ttest('deleteUntitledWorkspace (untitled)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tassert.ok(fs.existsSync(workspace.configPath.fsPath));\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t\tassert.ok(!fs.existsSync(workspace.configPath.fsPath));\n\t});\n\n\ttest('deleteUntitledWorkspace (saved)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t});\n\n\ttest('getUntitledWorkspace', async function () {\n\t\tawait service.initialize();\n\t\tlet untitled = service.getUntitledWorkspaces();\n\t\tassert.strictEqual(untitled.length, 0);\n\n\t\tconst untitledOne = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tassert.ok(fs.existsSync(untitledOne.configPath.fsPath));\n\n\t\tawait service.initialize();\n\t\tuntitled = service.getUntitledWorkspaces();\n\t\tassert.strictEqual(1, untitled.length);\n\t\tassert.strictEqual(untitledOne.id, untitled[0].workspace.id);\n\n\t\tawait service.deleteUntitledWorkspace(untitledOne);\n\t\tawait service.initialize();\n\t\tuntitled = service.getUntitledWorkspaces();\n\t\tassert.strictEqual(0, untitled.length);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
