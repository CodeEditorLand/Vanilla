{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspaces/test/electron-main/workspacesHistoryStorage.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { tmpdir } from 'os';\nimport { join } from '../../../../base/common/path.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { IWorkspaceIdentifier } from '../../../workspace/common/workspace.js';\nimport { IRecentFolder, IRecentlyOpened, IRecentWorkspace, isRecentFolder, restoreRecentlyOpened, toStoreData } from '../../common/workspaces.js';\n\nsuite('History Storage', () => {\n\n\tfunction toWorkspace(uri: URI): IWorkspaceIdentifier {\n\t\treturn {\n\t\t\tid: '1234',\n\t\t\tconfigPath: uri\n\t\t};\n\t}\n\tfunction assertEqualURI(u1: URI | undefined, u2: URI | undefined, message?: string): void {\n\t\tassert.strictEqual(u1 && u1.toString(), u2 && u2.toString(), message);\n\t}\n\n\tfunction assertEqualWorkspace(w1: IWorkspaceIdentifier | undefined, w2: IWorkspaceIdentifier | undefined, message?: string): void {\n\t\tif (!w1 || !w2) {\n\t\t\tassert.strictEqual(w1, w2, message);\n\t\t\treturn;\n\t\t}\n\t\tassert.strictEqual(w1.id, w2.id, message);\n\t\tassertEqualURI(w1.configPath, w2.configPath, message);\n\t}\n\n\tfunction assertEqualRecentlyOpened(actual: IRecentlyOpened, expected: IRecentlyOpened, message?: string) {\n\t\tassert.strictEqual(actual.files.length, expected.files.length, message);\n\t\tfor (let i = 0; i < actual.files.length; i++) {\n\t\t\tassertEqualURI(actual.files[i].fileUri, expected.files[i].fileUri, message);\n\t\t\tassert.strictEqual(actual.files[i].label, expected.files[i].label);\n\t\t\tassert.strictEqual(actual.files[i].remoteAuthority, expected.files[i].remoteAuthority);\n\t\t}\n\t\tassert.strictEqual(actual.workspaces.length, expected.workspaces.length, message);\n\t\tfor (let i = 0; i < actual.workspaces.length; i++) {\n\t\t\tconst expectedRecent = expected.workspaces[i];\n\t\t\tconst actualRecent = actual.workspaces[i];\n\t\t\tif (isRecentFolder(actualRecent)) {\n\t\t\t\tassertEqualURI(actualRecent.folderUri, (<IRecentFolder>expectedRecent).folderUri, message);\n\t\t\t} else {\n\t\t\t\tassertEqualWorkspace(actualRecent.workspace, (<IRecentWorkspace>expectedRecent).workspace, message);\n\t\t\t}\n\t\t\tassert.strictEqual(actualRecent.label, expectedRecent.label);\n\t\t\tassert.strictEqual(actualRecent.remoteAuthority, actualRecent.remoteAuthority);\n\t\t}\n\t}\n\n\tfunction assertRestoring(state: IRecentlyOpened, message?: string) {\n\t\tconst stored = toStoreData(state);\n\t\tconst restored = restoreRecentlyOpened(stored, new NullLogService());\n\t\tassertEqualRecentlyOpened(state, restored, message);\n\t}\n\n\tconst testWSPath = URI.file(join(tmpdir(), 'windowStateTest', 'test.code-workspace'));\n\tconst testFileURI = URI.file(join(tmpdir(), 'windowStateTest', 'testFile.txt'));\n\tconst testFolderURI = URI.file(join(tmpdir(), 'windowStateTest', 'testFolder'));\n\n\tconst testRemoteFolderURI = URI.parse('foo://bar/c/e');\n\tconst testRemoteFileURI = URI.parse('foo://bar/c/d.txt');\n\tconst testRemoteWSURI = URI.parse('foo://bar/c/test.code-workspace');\n\n\ttest('storing and restoring', () => {\n\t\tlet ro: IRecentlyOpened;\n\t\tro = {\n\t\t\tfiles: [],\n\t\t\tworkspaces: []\n\t\t};\n\t\tassertRestoring(ro, 'empty');\n\t\tro = {\n\t\t\tfiles: [{ fileUri: testFileURI }],\n\t\t\tworkspaces: []\n\t\t};\n\t\tassertRestoring(ro, 'file');\n\t\tro = {\n\t\t\tfiles: [],\n\t\t\tworkspaces: [{ folderUri: testFolderURI }]\n\t\t};\n\t\tassertRestoring(ro, 'folder');\n\t\tro = {\n\t\t\tfiles: [],\n\t\t\tworkspaces: [{ workspace: toWorkspace(testWSPath) }, { folderUri: testFolderURI }]\n\t\t};\n\t\tassertRestoring(ro, 'workspaces and folders');\n\n\t\tro = {\n\t\t\tfiles: [{ fileUri: testRemoteFileURI }],\n\t\t\tworkspaces: [{ workspace: toWorkspace(testRemoteWSURI) }, { folderUri: testRemoteFolderURI }]\n\t\t};\n\t\tassertRestoring(ro, 'remote workspaces and folders');\n\t\tro = {\n\t\t\tfiles: [{ label: 'abc', fileUri: testFileURI }],\n\t\t\tworkspaces: [{ label: 'def', workspace: toWorkspace(testWSPath) }, { folderUri: testRemoteFolderURI }]\n\t\t};\n\t\tassertRestoring(ro, 'labels');\n\t\tro = {\n\t\t\tfiles: [{ label: 'abc', remoteAuthority: 'test', fileUri: testRemoteFileURI }],\n\t\t\tworkspaces: [{ label: 'def', remoteAuthority: 'test', workspace: toWorkspace(testWSPath) }, { folderUri: testRemoteFolderURI, remoteAuthority: 'test' }]\n\t\t};\n\t\tassertRestoring(ro, 'authority');\n\t});\n\n\ttest('open 1_55', () => {\n\t\tconst v1_55 = `{\n\t\t\t\"entries\": [\n\t\t\t\t{\n\t\t\t\t\t\"folderUri\": \"foo://bar/23/43\",\n\t\t\t\t\t\"remoteAuthority\": \"test+test\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"workspace\": {\n\t\t\t\t\t\t\"id\": \"53b714b46ef1a2d4346568b4f591028c\",\n\t\t\t\t\t\t\"configPath\": \"file:///home/user/workspaces/testing/custom.code-workspace\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"folderUri\": \"file:///home/user/workspaces/testing/folding\",\n\t\t\t\t\t\"label\": \"abc\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fileUri\": \"file:///home/user/.config/code-oss-dev/storage.json\",\n\t\t\t\t\t\"label\": \"def\"\n\t\t\t\t}\n\t\t\t]\n\t\t}`;\n\n\t\tconst windowsState = restoreRecentlyOpened(JSON.parse(v1_55), new NullLogService());\n\t\tconst expected: IRecentlyOpened = {\n\t\t\tfiles: [{ label: 'def', fileUri: URI.parse('file:///home/user/.config/code-oss-dev/storage.json') }],\n\t\t\tworkspaces: [\n\t\t\t\t{ folderUri: URI.parse('foo://bar/23/43'), remoteAuthority: 'test+test' },\n\t\t\t\t{ workspace: { id: '53b714b46ef1a2d4346568b4f591028c', configPath: URI.parse('file:///home/user/workspaces/testing/custom.code-workspace') } },\n\t\t\t\t{ label: 'abc', folderUri: URI.parse('file:///home/user/workspaces/testing/folding') }\n\t\t\t]\n\t\t};\n\n\t\tassertEqualRecentlyOpened(windowsState, expected, 'v1_33');\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
