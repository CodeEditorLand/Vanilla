{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspaces/electron-main/workspacesMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AddFirstParameterToFunctions } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IBackupMainService } from '../../backup/electron-main/backup.js';\nimport { IWindowsMainService } from '../../windows/electron-main/windows.js';\nimport { IEnterWorkspaceResult, IRecent, IRecentlyOpened, IWorkspaceFolderCreationData, IWorkspacesService } from '../common/workspaces.js';\nimport { IWorkspaceIdentifier } from '../../workspace/common/workspace.js';\nimport { IWorkspacesHistoryMainService } from './workspacesHistoryMainService.js';\nimport { IWorkspacesManagementMainService } from './workspacesManagementMainService.js';\nimport { IWorkspaceBackupInfo, IFolderBackupInfo } from '../../backup/common/backup.js';\n\nexport class WorkspacesMainService implements AddFirstParameterToFunctions<IWorkspacesService, Promise<unknown> /* only methods, not events */, number /* window ID */> {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IWorkspacesHistoryMainService private readonly workspacesHistoryMainService: IWorkspacesHistoryMainService,\n\t\t@IBackupMainService private readonly backupMainService: IBackupMainService\n\t) {\n\t}\n\n\t//#region Workspace Management\n\n\tasync enterWorkspace(windowId: number, path: URI): Promise<IEnterWorkspaceResult | undefined> {\n\t\tconst window = this.windowsMainService.getWindowById(windowId);\n\t\tif (window) {\n\t\t\treturn this.workspacesManagementMainService.enterWorkspace(window, this.windowsMainService.getWindows(), path);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tcreateUntitledWorkspace(windowId: number, folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier> {\n\t\treturn this.workspacesManagementMainService.createUntitledWorkspace(folders, remoteAuthority);\n\t}\n\n\tdeleteUntitledWorkspace(windowId: number, workspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.workspacesManagementMainService.deleteUntitledWorkspace(workspace);\n\t}\n\n\tgetWorkspaceIdentifier(windowId: number, workspacePath: URI): Promise<IWorkspaceIdentifier> {\n\t\treturn this.workspacesManagementMainService.getWorkspaceIdentifier(workspacePath);\n\t}\n\n\t//#endregion\n\n\t//#region Workspaces History\n\n\treadonly onDidChangeRecentlyOpened = this.workspacesHistoryMainService.onDidChangeRecentlyOpened;\n\n\tgetRecentlyOpened(windowId: number): Promise<IRecentlyOpened> {\n\t\treturn this.workspacesHistoryMainService.getRecentlyOpened();\n\t}\n\n\taddRecentlyOpened(windowId: number, recents: IRecent[]): Promise<void> {\n\t\treturn this.workspacesHistoryMainService.addRecentlyOpened(recents);\n\t}\n\n\tremoveRecentlyOpened(windowId: number, paths: URI[]): Promise<void> {\n\t\treturn this.workspacesHistoryMainService.removeRecentlyOpened(paths);\n\t}\n\n\tclearRecentlyOpened(windowId: number): Promise<void> {\n\t\treturn this.workspacesHistoryMainService.clearRecentlyOpened();\n\t}\n\n\t//#endregion\n\n\n\t//#region Dirty Workspaces\n\n\tasync getDirtyWorkspaces(): Promise<Array<IWorkspaceBackupInfo | IFolderBackupInfo>> {\n\t\treturn this.backupMainService.getDirtyWorkspaces();\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,oCAAoC;AAC7C,SAAS,WAAW;AACpB,SAAS,0BAA0B;AACnC,SAAS,2BAA2B;AACpC,SAAS,uBAAuB,SAAS,iBAAiB,8BAA8B,0BAA0B;AAClH,SAAS,4BAA4B;AACrC,SAAS,qCAAqC;AAC9C,SAAS,wCAAwC;AACjD,SAAS,sBAAsB,yBAAyB;AAEjD,IAAM,wBAAN,MAAiK;AAAA,EAIvK,YACoD,iCACb,oBACU,8BACX,mBACpC;AAJkD;AACb;AACU;AACX;AAAA,EAEtC;AAAA,EAzBD,OAewK;AAAA;AAAA;AAAA;AAAA,EAcvK,MAAM,eAAe,UAAkB,MAAuD;AAC7F,UAAM,SAAS,KAAK,mBAAmB,cAAc,QAAQ;AAC7D,QAAI,QAAQ;AACX,aAAO,KAAK,gCAAgC,eAAe,QAAQ,KAAK,mBAAmB,WAAW,GAAG,IAAI;AAAA,IAC9G;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,wBAAwB,UAAkB,SAA0C,iBAAyD;AAC5I,WAAO,KAAK,gCAAgC,wBAAwB,SAAS,eAAe;AAAA,EAC7F;AAAA,EAEA,wBAAwB,UAAkB,WAAgD;AACzF,WAAO,KAAK,gCAAgC,wBAAwB,SAAS;AAAA,EAC9E;AAAA,EAEA,uBAAuB,UAAkB,eAAmD;AAC3F,WAAO,KAAK,gCAAgC,uBAAuB,aAAa;AAAA,EACjF;AAAA;AAAA;AAAA,EAMS,4BAA4B,KAAK,6BAA6B;AAAA,EAEvE,kBAAkB,UAA4C;AAC7D,WAAO,KAAK,6BAA6B,kBAAkB;AAAA,EAC5D;AAAA,EAEA,kBAAkB,UAAkB,SAAmC;AACtE,WAAO,KAAK,6BAA6B,kBAAkB,OAAO;AAAA,EACnE;AAAA,EAEA,qBAAqB,UAAkB,OAA6B;AACnE,WAAO,KAAK,6BAA6B,qBAAqB,KAAK;AAAA,EACpE;AAAA,EAEA,oBAAoB,UAAiC;AACpD,WAAO,KAAK,6BAA6B,oBAAoB;AAAA,EAC9D;AAAA;AAAA;AAAA,EAOA,MAAM,qBAA+E;AACpF,WAAO,KAAK,kBAAkB,mBAAmB;AAAA,EAClD;AAAA;AAGD;AAnEa,wBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GARU;",
  "names": []
}
