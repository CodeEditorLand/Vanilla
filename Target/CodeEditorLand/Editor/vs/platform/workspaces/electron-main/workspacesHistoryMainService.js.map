{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, JumpListCategory, JumpListItem } from 'electron';\nimport { coalesce } from '../../../base/common/arrays.js';\nimport { ThrottledDelayer } from '../../../base/common/async.js';\nimport { Emitter, Event as CommonEvent } from '../../../base/common/event.js';\nimport { normalizeDriveLetter, splitRecentLabel } from '../../../base/common/labels.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { isMacintosh, isWindows } from '../../../base/common/platform.js';\nimport { basename, extUriBiasedIgnorePathCase, originalFSPath } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Promises } from '../../../base/node/pfs.js';\nimport { localize } from '../../../nls.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILifecycleMainService, LifecycleMainPhase } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { IApplicationStorageMainService } from '../../storage/electron-main/storageMainService.js';\nimport { IRecent, IRecentFile, IRecentFolder, IRecentlyOpened, IRecentWorkspace, isRecentFile, isRecentFolder, isRecentWorkspace, restoreRecentlyOpened, toStoreData } from '../common/workspaces.js';\nimport { IWorkspaceIdentifier, WORKSPACE_EXTENSION } from '../../workspace/common/workspace.js';\nimport { IWorkspacesManagementMainService } from './workspacesManagementMainService.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { IDialogMainService } from '../../dialogs/electron-main/dialogMainService.js';\n\nexport const IWorkspacesHistoryMainService = createDecorator<IWorkspacesHistoryMainService>('workspacesHistoryMainService');\n\nexport interface IWorkspacesHistoryMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeRecentlyOpened: CommonEvent<void>;\n\n\taddRecentlyOpened(recents: IRecent[]): Promise<void>;\n\tgetRecentlyOpened(): Promise<IRecentlyOpened>;\n\tremoveRecentlyOpened(paths: URI[]): Promise<void>;\n\tclearRecentlyOpened(options?: { confirm?: boolean }): Promise<void>;\n}\n\nexport class WorkspacesHistoryMainService extends Disposable implements IWorkspacesHistoryMainService {\n\n\tprivate static readonly MAX_TOTAL_RECENT_ENTRIES = 500;\n\n\tprivate static readonly RECENTLY_OPENED_STORAGE_KEY = 'history.recentlyOpenedPathsList';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeRecentlyOpened = this._register(new Emitter<void>());\n\treadonly onDidChangeRecentlyOpened = this._onDidChangeRecentlyOpened.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IApplicationStorageMainService private readonly applicationStorageMainService: IApplicationStorageMainService,\n\t\t@IDialogMainService private readonly dialogMainService: IDialogMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Install window jump list delayed after opening window\n\t\t// because perf measurements have shown this to be slow\n\t\tthis.lifecycleMainService.when(LifecycleMainPhase.Eventually).then(() => this.handleWindowsJumpList());\n\n\t\t// Add to history when entering workspace\n\t\tthis._register(this.workspacesManagementMainService.onDidEnterWorkspace(event => this.addRecentlyOpened([{ workspace: event.workspace, remoteAuthority: event.window.remoteAuthority }])));\n\t}\n\n\t//#region Workspaces History\n\n\tasync addRecentlyOpened(recentToAdd: IRecent[]): Promise<void> {\n\t\tlet workspaces: Array<IRecentFolder | IRecentWorkspace> = [];\n\t\tlet files: IRecentFile[] = [];\n\n\t\tfor (const recent of recentToAdd) {\n\n\t\t\t// Workspace\n\t\t\tif (isRecentWorkspace(recent)) {\n\t\t\t\tif (!this.workspacesManagementMainService.isUntitledWorkspace(recent.workspace) && !this.containsWorkspace(workspaces, recent.workspace)) {\n\t\t\t\t\tworkspaces.push(recent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Folder\n\t\t\telse if (isRecentFolder(recent)) {\n\t\t\t\tif (!this.containsFolder(workspaces, recent.folderUri)) {\n\t\t\t\t\tworkspaces.push(recent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// File\n\t\t\telse {\n\t\t\t\tconst alreadyExistsInHistory = this.containsFile(files, recent.fileUri);\n\t\t\t\tconst shouldBeFiltered = recent.fileUri.scheme === Schemas.file && WorkspacesHistoryMainService.COMMON_FILES_FILTER.indexOf(basename(recent.fileUri)) >= 0;\n\n\t\t\t\tif (!alreadyExistsInHistory && !shouldBeFiltered) {\n\t\t\t\t\tfiles.push(recent);\n\n\t\t\t\t\t// Add to recent documents (Windows only, macOS later)\n\t\t\t\t\tif (isWindows && recent.fileUri.scheme === Schemas.file) {\n\t\t\t\t\t\tapp.addRecentDocument(recent.fileUri.fsPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst mergedEntries = await this.mergeEntriesFromStorage({ workspaces, files });\n\t\tworkspaces = mergedEntries.workspaces;\n\t\tfiles = mergedEntries.files;\n\n\t\tif (workspaces.length > WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES) {\n\t\t\tworkspaces.length = WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES;\n\t\t}\n\n\t\tif (files.length > WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES) {\n\t\t\tfiles.length = WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES;\n\t\t}\n\n\t\tawait this.saveRecentlyOpened({ workspaces, files });\n\t\tthis._onDidChangeRecentlyOpened.fire();\n\n\t\t// Schedule update to recent documents on macOS dock\n\t\tif (isMacintosh) {\n\t\t\tthis.macOSRecentDocumentsUpdater.trigger(() => this.updateMacOSRecentDocuments());\n\t\t}\n\t}\n\n\tasync removeRecentlyOpened(recentToRemove: URI[]): Promise<void> {\n\t\tconst keep = (recent: IRecent) => {\n\t\t\tconst uri = this.location(recent);\n\t\t\tfor (const resourceToRemove of recentToRemove) {\n\t\t\t\tif (extUriBiasedIgnorePathCase.isEqual(resourceToRemove, uri)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\tconst mru = await this.getRecentlyOpened();\n\t\tconst workspaces = mru.workspaces.filter(keep);\n\t\tconst files = mru.files.filter(keep);\n\n\t\tif (workspaces.length !== mru.workspaces.length || files.length !== mru.files.length) {\n\t\t\tawait this.saveRecentlyOpened({ files, workspaces });\n\t\t\tthis._onDidChangeRecentlyOpened.fire();\n\n\t\t\t// Schedule update to recent documents on macOS dock\n\t\t\tif (isMacintosh) {\n\t\t\t\tthis.macOSRecentDocumentsUpdater.trigger(() => this.updateMacOSRecentDocuments());\n\t\t\t}\n\t\t}\n\t}\n\n\tasync clearRecentlyOpened(options?: { confirm?: boolean }): Promise<void> {\n\t\tif (options?.confirm) {\n\t\t\tconst { response } = await this.dialogMainService.showMessageBox({\n\t\t\t\ttype: 'warning',\n\t\t\t\tbuttons: [\n\t\t\t\t\tlocalize({ key: 'clearButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Clear\"),\n\t\t\t\t\tlocalize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, \"&&Cancel\")\n\t\t\t\t],\n\t\t\t\tmessage: localize('confirmClearRecentsMessage', \"Do you want to clear all recently opened files and workspaces?\"),\n\t\t\t\tdetail: localize('confirmClearDetail', \"This action is irreversible!\"),\n\t\t\t\tcancelId: 1\n\t\t\t});\n\n\t\t\tif (response !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tawait this.saveRecentlyOpened({ workspaces: [], files: [] });\n\t\tapp.clearRecentDocuments();\n\n\t\t// Event\n\t\tthis._onDidChangeRecentlyOpened.fire();\n\t}\n\n\tasync getRecentlyOpened(): Promise<IRecentlyOpened> {\n\t\treturn this.mergeEntriesFromStorage();\n\t}\n\n\tprivate async mergeEntriesFromStorage(existingEntries?: IRecentlyOpened): Promise<IRecentlyOpened> {\n\n\t\t// Build maps for more efficient lookup of existing entries that\n\t\t// are passed in by storing based on workspace/file identifier\n\n\t\tconst mapWorkspaceIdToWorkspace = new ResourceMap<IRecentFolder | IRecentWorkspace>(uri => extUriBiasedIgnorePathCase.getComparisonKey(uri));\n\t\tif (existingEntries?.workspaces) {\n\t\t\tfor (const workspace of existingEntries.workspaces) {\n\t\t\t\tmapWorkspaceIdToWorkspace.set(this.location(workspace), workspace);\n\t\t\t}\n\t\t}\n\n\t\tconst mapFileIdToFile = new ResourceMap<IRecentFile>(uri => extUriBiasedIgnorePathCase.getComparisonKey(uri));\n\t\tif (existingEntries?.files) {\n\t\t\tfor (const file of existingEntries.files) {\n\t\t\t\tmapFileIdToFile.set(this.location(file), file);\n\t\t\t}\n\t\t}\n\n\t\t// Merge in entries from storage, preserving existing known entries\n\n\t\tconst recentFromStorage = await this.getRecentlyOpenedFromStorage();\n\t\tfor (const recentWorkspaceFromStorage of recentFromStorage.workspaces) {\n\t\t\tconst existingRecentWorkspace = mapWorkspaceIdToWorkspace.get(this.location(recentWorkspaceFromStorage));\n\t\t\tif (existingRecentWorkspace) {\n\t\t\t\texistingRecentWorkspace.label = existingRecentWorkspace.label ?? recentWorkspaceFromStorage.label;\n\t\t\t} else {\n\t\t\t\tmapWorkspaceIdToWorkspace.set(this.location(recentWorkspaceFromStorage), recentWorkspaceFromStorage);\n\t\t\t}\n\t\t}\n\n\t\tfor (const recentFileFromStorage of recentFromStorage.files) {\n\t\t\tconst existingRecentFile = mapFileIdToFile.get(this.location(recentFileFromStorage));\n\t\t\tif (existingRecentFile) {\n\t\t\t\texistingRecentFile.label = existingRecentFile.label ?? recentFileFromStorage.label;\n\t\t\t} else {\n\t\t\t\tmapFileIdToFile.set(this.location(recentFileFromStorage), recentFileFromStorage);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tworkspaces: [...mapWorkspaceIdToWorkspace.values()],\n\t\t\tfiles: [...mapFileIdToFile.values()]\n\t\t};\n\t}\n\n\tprivate async getRecentlyOpenedFromStorage(): Promise<IRecentlyOpened> {\n\n\t\t// Wait for global storage to be ready\n\t\tawait this.applicationStorageMainService.whenReady;\n\n\t\tlet storedRecentlyOpened: object | undefined = undefined;\n\n\t\t// First try with storage service\n\t\tconst storedRecentlyOpenedRaw = this.applicationStorageMainService.get(WorkspacesHistoryMainService.RECENTLY_OPENED_STORAGE_KEY, StorageScope.APPLICATION);\n\t\tif (typeof storedRecentlyOpenedRaw === 'string') {\n\t\t\ttry {\n\t\t\t\tstoredRecentlyOpened = JSON.parse(storedRecentlyOpenedRaw);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error('Unexpected error parsing opened paths list', error);\n\t\t\t}\n\t\t}\n\n\t\treturn restoreRecentlyOpened(storedRecentlyOpened, this.logService);\n\t}\n\n\tprivate async saveRecentlyOpened(recent: IRecentlyOpened): Promise<void> {\n\n\t\t// Wait for global storage to be ready\n\t\tawait this.applicationStorageMainService.whenReady;\n\n\t\t// Store in global storage (but do not sync since this is mainly local paths)\n\t\tthis.applicationStorageMainService.store(WorkspacesHistoryMainService.RECENTLY_OPENED_STORAGE_KEY, JSON.stringify(toStoreData(recent)), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tprivate location(recent: IRecent): URI {\n\t\tif (isRecentFolder(recent)) {\n\t\t\treturn recent.folderUri;\n\t\t}\n\n\t\tif (isRecentFile(recent)) {\n\t\t\treturn recent.fileUri;\n\t\t}\n\n\t\treturn recent.workspace.configPath;\n\t}\n\n\tprivate containsWorkspace(recents: IRecent[], candidate: IWorkspaceIdentifier): boolean {\n\t\treturn !!recents.find(recent => isRecentWorkspace(recent) && recent.workspace.id === candidate.id);\n\t}\n\n\tprivate containsFolder(recents: IRecent[], candidate: URI): boolean {\n\t\treturn !!recents.find(recent => isRecentFolder(recent) && extUriBiasedIgnorePathCase.isEqual(recent.folderUri, candidate));\n\t}\n\n\tprivate containsFile(recents: IRecentFile[], candidate: URI): boolean {\n\t\treturn !!recents.find(recent => extUriBiasedIgnorePathCase.isEqual(recent.fileUri, candidate));\n\t}\n\n\t//#endregion\n\n\n\t//#region macOS Dock / Windows JumpList\n\n\tprivate static readonly MAX_MACOS_DOCK_RECENT_WORKSPACES = 7; \t\t// prefer higher number of workspaces...\n\tprivate static readonly MAX_MACOS_DOCK_RECENT_ENTRIES_TOTAL = 10; \t// ...over number of files\n\n\tprivate static readonly MAX_WINDOWS_JUMP_LIST_ENTRIES = 7;\n\n\t// Exclude some very common files from the dock/taskbar\n\tprivate static readonly COMMON_FILES_FILTER = [\n\t\t'COMMIT_EDITMSG',\n\t\t'MERGE_MSG',\n\t\t'git-rebase-todo'\n\t];\n\n\tprivate readonly macOSRecentDocumentsUpdater = this._register(new ThrottledDelayer<void>(800));\n\n\tprivate async handleWindowsJumpList(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\treturn; // only on windows\n\t\t}\n\n\t\tawait this.updateWindowsJumpList();\n\t\tthis._register(this.onDidChangeRecentlyOpened(() => this.updateWindowsJumpList()));\n\t}\n\n\tprivate async updateWindowsJumpList(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\treturn; // only on windows\n\t\t}\n\n\t\tconst jumpList: JumpListCategory[] = [];\n\n\t\t// Tasks\n\t\tjumpList.push({\n\t\t\ttype: 'tasks',\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'task',\n\t\t\t\t\ttitle: localize('newWindow', \"New Window\"),\n\t\t\t\t\tdescription: localize('newWindowDesc', \"Opens a new window\"),\n\t\t\t\t\tprogram: process.execPath,\n\t\t\t\t\targs: '-n', // force new window\n\t\t\t\t\ticonPath: process.execPath,\n\t\t\t\t\ticonIndex: 0\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\n\t\t// Recent Workspaces\n\t\tif ((await this.getRecentlyOpened()).workspaces.length > 0) {\n\n\t\t\t// The user might have meanwhile removed items from the jump list and we have to respect that\n\t\t\t// so we need to update our list of recent paths with the choice of the user to not add them again\n\t\t\t// Also: Windows will not show our custom category at all if there is any entry which was removed\n\t\t\t// by the user! See https://github.com/microsoft/vscode/issues/15052\n\t\t\tconst toRemove: URI[] = [];\n\t\t\tfor (const item of app.getJumpListSettings().removedItems) {\n\t\t\t\tconst args = item.args;\n\t\t\t\tif (args) {\n\t\t\t\t\tconst match = /^--(folder|file)-uri\\s+\"([^\"]+)\"$/.exec(args);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\ttoRemove.push(URI.parse(match[2]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.removeRecentlyOpened(toRemove);\n\n\t\t\t// Add entries\n\t\t\tlet hasWorkspaces = false;\n\t\t\tconst items: JumpListItem[] = coalesce((await this.getRecentlyOpened()).workspaces.slice(0, WorkspacesHistoryMainService.MAX_WINDOWS_JUMP_LIST_ENTRIES).map(recent => {\n\t\t\t\tconst workspace = isRecentWorkspace(recent) ? recent.workspace : recent.folderUri;\n\n\t\t\t\tconst { title, description } = this.getWindowsJumpListLabel(workspace, recent.label);\n\t\t\t\tlet args;\n\t\t\t\tif (URI.isUri(workspace)) {\n\t\t\t\t\targs = `--folder-uri \"${workspace.toString()}\"`;\n\t\t\t\t} else {\n\t\t\t\t\thasWorkspaces = true;\n\t\t\t\t\targs = `--file-uri \"${workspace.configPath.toString()}\"`;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'task',\n\t\t\t\t\ttitle: title.substr(0, 255), \t\t\t\t// Windows seems to be picky around the length of entries\n\t\t\t\t\tdescription: description.substr(0, 255),\t// (see https://github.com/microsoft/vscode/issues/111177)\n\t\t\t\t\tprogram: process.execPath,\n\t\t\t\t\targs,\n\t\t\t\t\ticonPath: 'explorer.exe', // simulate folder icon\n\t\t\t\t\ticonIndex: 0\n\t\t\t\t};\n\t\t\t}));\n\n\t\t\tif (items.length > 0) {\n\t\t\t\tjumpList.push({\n\t\t\t\t\ttype: 'custom',\n\t\t\t\t\tname: hasWorkspaces ? localize('recentFoldersAndWorkspaces', \"Recent Folders & Workspaces\") : localize('recentFolders', \"Recent Folders\"),\n\t\t\t\t\titems\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Recent\n\t\tjumpList.push({\n\t\t\ttype: 'recent' // this enables to show files in the \"recent\" category\n\t\t});\n\n\t\ttry {\n\t\t\tconst res = app.setJumpList(jumpList);\n\t\t\tif (res && res !== 'ok') {\n\t\t\t\tthis.logService.warn(`updateWindowsJumpList#setJumpList unexpected result: ${res}`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.warn('updateWindowsJumpList#setJumpList', error); // since setJumpList is relatively new API, make sure to guard for errors\n\t\t}\n\t}\n\n\tprivate getWindowsJumpListLabel(workspace: IWorkspaceIdentifier | URI, recentLabel: string | undefined): { title: string; description: string } {\n\n\t\t// Prefer recent label\n\t\tif (recentLabel) {\n\t\t\treturn { title: splitRecentLabel(recentLabel).name, description: recentLabel };\n\t\t}\n\n\t\t// Single Folder\n\t\tif (URI.isUri(workspace)) {\n\t\t\treturn { title: basename(workspace), description: this.renderJumpListPathDescription(workspace) };\n\t\t}\n\n\t\t// Workspace: Untitled\n\t\tif (this.workspacesManagementMainService.isUntitledWorkspace(workspace)) {\n\t\t\treturn { title: localize('untitledWorkspace', \"Untitled (Workspace)\"), description: '' };\n\t\t}\n\n\t\t// Workspace: normal\n\t\tlet filename = basename(workspace.configPath);\n\t\tif (filename.endsWith(WORKSPACE_EXTENSION)) {\n\t\t\tfilename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n\t\t}\n\n\t\treturn { title: localize('workspaceName', \"{0} (Workspace)\", filename), description: this.renderJumpListPathDescription(workspace.configPath) };\n\t}\n\n\tprivate renderJumpListPathDescription(uri: URI) {\n\t\treturn uri.scheme === 'file' ? normalizeDriveLetter(uri.fsPath) : uri.toString();\n\t}\n\n\tprivate async updateMacOSRecentDocuments(): Promise<void> {\n\t\tif (!isMacintosh) {\n\t\t\treturn;\n\t\t}\n\n\t\t// We clear all documents first to ensure an up-to-date view on the set. Since entries\n\t\t// can get deleted on disk, this ensures that the list is always valid\n\t\tapp.clearRecentDocuments();\n\n\t\tconst mru = await this.getRecentlyOpened();\n\n\t\t// Collect max-N recent workspaces that are known to exist\n\t\tconst workspaceEntries: string[] = [];\n\t\tlet entries = 0;\n\t\tfor (let i = 0; i < mru.workspaces.length && entries < WorkspacesHistoryMainService.MAX_MACOS_DOCK_RECENT_WORKSPACES; i++) {\n\t\t\tconst loc = this.location(mru.workspaces[i]);\n\t\t\tif (loc.scheme === Schemas.file) {\n\t\t\t\tconst workspacePath = originalFSPath(loc);\n\t\t\t\tif (await Promises.exists(workspacePath)) {\n\t\t\t\t\tworkspaceEntries.push(workspacePath);\n\t\t\t\t\tentries++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Collect max-N recent files that are known to exist\n\t\tconst fileEntries: string[] = [];\n\t\tfor (let i = 0; i < mru.files.length && entries < WorkspacesHistoryMainService.MAX_MACOS_DOCK_RECENT_ENTRIES_TOTAL; i++) {\n\t\t\tconst loc = this.location(mru.files[i]);\n\t\t\tif (loc.scheme === Schemas.file) {\n\t\t\t\tconst filePath = originalFSPath(loc);\n\t\t\t\tif (\n\t\t\t\t\tWorkspacesHistoryMainService.COMMON_FILES_FILTER.includes(basename(loc)) || // skip some well known file entries\n\t\t\t\t\tworkspaceEntries.includes(filePath)\t\t\t\t\t\t\t\t\t\t\t// prefer a workspace entry over a file entry (e.g. for .code-workspace)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (await Promises.exists(filePath)) {\n\t\t\t\t\tfileEntries.push(filePath);\n\t\t\t\t\tentries++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// The apple guidelines (https://developer.apple.com/design/human-interface-guidelines/macos/menus/menu-anatomy/)\n\t\t// explain that most recent entries should appear close to the interaction by the user (e.g. close to the\n\t\t// mouse click). Most native macOS applications that add recent documents to the dock, show the most recent document\n\t\t// to the bottom (because the dock menu is not appearing from top to bottom, but from the bottom to the top). As such\n\t\t// we fill in the entries in reverse order so that the most recent shows up at the bottom of the menu.\n\t\t//\n\t\t// On top of that, the maximum number of documents can be configured by the user (defaults to 10). To ensure that\n\t\t// we are not failing to show the most recent entries, we start by adding files first (in reverse order of recency)\n\t\t// and then add folders (in reverse order of recency). Given that strategy, we can ensure that the most recent\n\t\t// N folders are always appearing, even if the limit is low (https://github.com/microsoft/vscode/issues/74788)\n\t\tfileEntries.reverse().forEach(fileEntry => app.addRecentDocument(fileEntry));\n\t\tworkspaceEntries.reverse().forEach(workspaceEntry => app.addRecentDocument(workspaceEntry));\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
