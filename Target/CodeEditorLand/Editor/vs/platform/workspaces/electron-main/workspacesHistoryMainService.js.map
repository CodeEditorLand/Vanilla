{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type JumpListCategory, type JumpListItem, app } from \"electron\";\nimport { coalesce } from \"../../../base/common/arrays.js\";\nimport { ThrottledDelayer } from \"../../../base/common/async.js\";\nimport {\n\ttype Event as CommonEvent,\n\tEmitter,\n} from \"../../../base/common/event.js\";\nimport {\n\tnormalizeDriveLetter,\n\tsplitRecentLabel,\n} from \"../../../base/common/labels.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../base/common/map.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { isMacintosh, isWindows } from \"../../../base/common/platform.js\";\nimport {\n\tbasename,\n\textUriBiasedIgnorePathCase,\n\toriginalFSPath,\n} from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { Promises } from \"../../../base/node/pfs.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IDialogMainService } from \"../../dialogs/electron-main/dialogMainService.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport {\n\tILifecycleMainService,\n\tLifecycleMainPhase,\n} from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { StorageScope, StorageTarget } from \"../../storage/common/storage.js\";\nimport { IApplicationStorageMainService } from \"../../storage/electron-main/storageMainService.js\";\nimport {\n\ttype IWorkspaceIdentifier,\n\tWORKSPACE_EXTENSION,\n} from \"../../workspace/common/workspace.js\";\nimport {\n\ttype IRecent,\n\ttype IRecentFile,\n\ttype IRecentFolder,\n\ttype IRecentWorkspace,\n\ttype IRecentlyOpened,\n\tisRecentFile,\n\tisRecentFolder,\n\tisRecentWorkspace,\n\trestoreRecentlyOpened,\n\ttoStoreData,\n} from \"../common/workspaces.js\";\nimport { IWorkspacesManagementMainService } from \"./workspacesManagementMainService.js\";\n\nexport const IWorkspacesHistoryMainService =\n\tcreateDecorator<IWorkspacesHistoryMainService>(\n\t\t\"workspacesHistoryMainService\",\n\t);\n\nexport interface IWorkspacesHistoryMainService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeRecentlyOpened: CommonEvent<void>;\n\n\taddRecentlyOpened(recents: IRecent[]): Promise<void>;\n\tgetRecentlyOpened(): Promise<IRecentlyOpened>;\n\tremoveRecentlyOpened(paths: URI[]): Promise<void>;\n\tclearRecentlyOpened(options?: { confirm?: boolean }): Promise<void>;\n}\n\nexport class WorkspacesHistoryMainService\n\textends Disposable\n\timplements IWorkspacesHistoryMainService\n{\n\tprivate static readonly MAX_TOTAL_RECENT_ENTRIES = 500;\n\n\tprivate static readonly RECENTLY_OPENED_STORAGE_KEY =\n\t\t\"history.recentlyOpenedPathsList\";\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeRecentlyOpened = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeRecentlyOpened = this._onDidChangeRecentlyOpened.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspacesManagementMainService\n\t\tprivate readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@ILifecycleMainService\n\t\tprivate readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IApplicationStorageMainService\n\t\tprivate readonly applicationStorageMainService: IApplicationStorageMainService,\n\t\t@IDialogMainService\n\t\tprivate readonly dialogMainService: IDialogMainService,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Install window jump list delayed after opening window\n\t\t// because perf measurements have shown this to be slow\n\t\tthis.lifecycleMainService\n\t\t\t.when(LifecycleMainPhase.Eventually)\n\t\t\t.then(() => this.handleWindowsJumpList());\n\n\t\t// Add to history when entering workspace\n\t\tthis._register(\n\t\t\tthis.workspacesManagementMainService.onDidEnterWorkspace((event) =>\n\t\t\t\tthis.addRecentlyOpened([\n\t\t\t\t\t{\n\t\t\t\t\t\tworkspace: event.workspace,\n\t\t\t\t\t\tremoteAuthority: event.window.remoteAuthority,\n\t\t\t\t\t},\n\t\t\t\t]),\n\t\t\t),\n\t\t);\n\t}\n\n\t//#region Workspaces History\n\n\tasync addRecentlyOpened(recentToAdd: IRecent[]): Promise<void> {\n\t\tlet workspaces: Array<IRecentFolder | IRecentWorkspace> = [];\n\t\tlet files: IRecentFile[] = [];\n\n\t\tfor (const recent of recentToAdd) {\n\t\t\t// Workspace\n\t\t\tif (isRecentWorkspace(recent)) {\n\t\t\t\tif (\n\t\t\t\t\t!this.workspacesManagementMainService.isUntitledWorkspace(\n\t\t\t\t\t\trecent.workspace,\n\t\t\t\t\t) &&\n\t\t\t\t\t!this.containsWorkspace(workspaces, recent.workspace)\n\t\t\t\t) {\n\t\t\t\t\tworkspaces.push(recent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Folder\n\t\t\telse if (isRecentFolder(recent)) {\n\t\t\t\tif (!this.containsFolder(workspaces, recent.folderUri)) {\n\t\t\t\t\tworkspaces.push(recent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// File\n\t\t\telse {\n\t\t\t\tconst alreadyExistsInHistory = this.containsFile(\n\t\t\t\t\tfiles,\n\t\t\t\t\trecent.fileUri,\n\t\t\t\t);\n\t\t\t\tconst shouldBeFiltered =\n\t\t\t\t\trecent.fileUri.scheme === Schemas.file &&\n\t\t\t\t\tWorkspacesHistoryMainService.COMMON_FILES_FILTER.indexOf(\n\t\t\t\t\t\tbasename(recent.fileUri),\n\t\t\t\t\t) >= 0;\n\n\t\t\t\tif (!alreadyExistsInHistory && !shouldBeFiltered) {\n\t\t\t\t\tfiles.push(recent);\n\n\t\t\t\t\t// Add to recent documents (Windows only, macOS later)\n\t\t\t\t\tif (isWindows && recent.fileUri.scheme === Schemas.file) {\n\t\t\t\t\t\tapp.addRecentDocument(recent.fileUri.fsPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst mergedEntries = await this.mergeEntriesFromStorage({\n\t\t\tworkspaces,\n\t\t\tfiles,\n\t\t});\n\t\tworkspaces = mergedEntries.workspaces;\n\t\tfiles = mergedEntries.files;\n\n\t\tif (\n\t\t\tworkspaces.length >\n\t\t\tWorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES\n\t\t) {\n\t\t\tworkspaces.length =\n\t\t\t\tWorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES;\n\t\t}\n\n\t\tif (\n\t\t\tfiles.length > WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES\n\t\t) {\n\t\t\tfiles.length =\n\t\t\t\tWorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES;\n\t\t}\n\n\t\tawait this.saveRecentlyOpened({ workspaces, files });\n\t\tthis._onDidChangeRecentlyOpened.fire();\n\n\t\t// Schedule update to recent documents on macOS dock\n\t\tif (isMacintosh) {\n\t\t\tthis.macOSRecentDocumentsUpdater.trigger(() =>\n\t\t\t\tthis.updateMacOSRecentDocuments(),\n\t\t\t);\n\t\t}\n\t}\n\n\tasync removeRecentlyOpened(recentToRemove: URI[]): Promise<void> {\n\t\tconst keep = (recent: IRecent) => {\n\t\t\tconst uri = this.location(recent);\n\t\t\tfor (const resourceToRemove of recentToRemove) {\n\t\t\t\tif (extUriBiasedIgnorePathCase.isEqual(resourceToRemove, uri)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\tconst mru = await this.getRecentlyOpened();\n\t\tconst workspaces = mru.workspaces.filter(keep);\n\t\tconst files = mru.files.filter(keep);\n\n\t\tif (\n\t\t\tworkspaces.length !== mru.workspaces.length ||\n\t\t\tfiles.length !== mru.files.length\n\t\t) {\n\t\t\tawait this.saveRecentlyOpened({ files, workspaces });\n\t\t\tthis._onDidChangeRecentlyOpened.fire();\n\n\t\t\t// Schedule update to recent documents on macOS dock\n\t\t\tif (isMacintosh) {\n\t\t\t\tthis.macOSRecentDocumentsUpdater.trigger(() =>\n\t\t\t\t\tthis.updateMacOSRecentDocuments(),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync clearRecentlyOpened(options?: { confirm?: boolean }): Promise<void> {\n\t\tif (options?.confirm) {\n\t\t\tconst { response } = await this.dialogMainService.showMessageBox({\n\t\t\t\ttype: \"warning\",\n\t\t\t\tbuttons: [\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"clearButtonLabel\",\n\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"&&Clear\",\n\t\t\t\t\t),\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{ key: \"cancel\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"&&Cancel\",\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"confirmClearRecentsMessage\",\n\t\t\t\t\t\"Do you want to clear all recently opened files and workspaces?\",\n\t\t\t\t),\n\t\t\t\tdetail: localize(\n\t\t\t\t\t\"confirmClearDetail\",\n\t\t\t\t\t\"This action is irreversible!\",\n\t\t\t\t),\n\t\t\t\tcancelId: 1,\n\t\t\t});\n\n\t\t\tif (response !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tawait this.saveRecentlyOpened({ workspaces: [], files: [] });\n\t\tapp.clearRecentDocuments();\n\n\t\t// Event\n\t\tthis._onDidChangeRecentlyOpened.fire();\n\t}\n\n\tasync getRecentlyOpened(): Promise<IRecentlyOpened> {\n\t\treturn this.mergeEntriesFromStorage();\n\t}\n\n\tprivate async mergeEntriesFromStorage(\n\t\texistingEntries?: IRecentlyOpened,\n\t): Promise<IRecentlyOpened> {\n\t\t// Build maps for more efficient lookup of existing entries that\n\t\t// are passed in by storing based on workspace/file identifier\n\n\t\tconst mapWorkspaceIdToWorkspace = new ResourceMap<\n\t\t\tIRecentFolder | IRecentWorkspace\n\t\t>((uri) => extUriBiasedIgnorePathCase.getComparisonKey(uri));\n\t\tif (existingEntries?.workspaces) {\n\t\t\tfor (const workspace of existingEntries.workspaces) {\n\t\t\t\tmapWorkspaceIdToWorkspace.set(\n\t\t\t\t\tthis.location(workspace),\n\t\t\t\t\tworkspace,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst mapFileIdToFile = new ResourceMap<IRecentFile>((uri) =>\n\t\t\textUriBiasedIgnorePathCase.getComparisonKey(uri),\n\t\t);\n\t\tif (existingEntries?.files) {\n\t\t\tfor (const file of existingEntries.files) {\n\t\t\t\tmapFileIdToFile.set(this.location(file), file);\n\t\t\t}\n\t\t}\n\n\t\t// Merge in entries from storage, preserving existing known entries\n\n\t\tconst recentFromStorage = await this.getRecentlyOpenedFromStorage();\n\t\tfor (const recentWorkspaceFromStorage of recentFromStorage.workspaces) {\n\t\t\tconst existingRecentWorkspace = mapWorkspaceIdToWorkspace.get(\n\t\t\t\tthis.location(recentWorkspaceFromStorage),\n\t\t\t);\n\t\t\tif (existingRecentWorkspace) {\n\t\t\t\texistingRecentWorkspace.label =\n\t\t\t\t\texistingRecentWorkspace.label ??\n\t\t\t\t\trecentWorkspaceFromStorage.label;\n\t\t\t} else {\n\t\t\t\tmapWorkspaceIdToWorkspace.set(\n\t\t\t\t\tthis.location(recentWorkspaceFromStorage),\n\t\t\t\t\trecentWorkspaceFromStorage,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tfor (const recentFileFromStorage of recentFromStorage.files) {\n\t\t\tconst existingRecentFile = mapFileIdToFile.get(\n\t\t\t\tthis.location(recentFileFromStorage),\n\t\t\t);\n\t\t\tif (existingRecentFile) {\n\t\t\t\texistingRecentFile.label =\n\t\t\t\t\texistingRecentFile.label ?? recentFileFromStorage.label;\n\t\t\t} else {\n\t\t\t\tmapFileIdToFile.set(\n\t\t\t\t\tthis.location(recentFileFromStorage),\n\t\t\t\t\trecentFileFromStorage,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tworkspaces: [...mapWorkspaceIdToWorkspace.values()],\n\t\t\tfiles: [...mapFileIdToFile.values()],\n\t\t};\n\t}\n\n\tprivate async getRecentlyOpenedFromStorage(): Promise<IRecentlyOpened> {\n\t\t// Wait for global storage to be ready\n\t\tawait this.applicationStorageMainService.whenReady;\n\n\t\tlet storedRecentlyOpened: object | undefined;\n\n\t\t// First try with storage service\n\t\tconst storedRecentlyOpenedRaw = this.applicationStorageMainService.get(\n\t\t\tWorkspacesHistoryMainService.RECENTLY_OPENED_STORAGE_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tif (typeof storedRecentlyOpenedRaw === \"string\") {\n\t\t\ttry {\n\t\t\t\tstoredRecentlyOpened = JSON.parse(storedRecentlyOpenedRaw);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t\"Unexpected error parsing opened paths list\",\n\t\t\t\t\terror,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn restoreRecentlyOpened(storedRecentlyOpened, this.logService);\n\t}\n\n\tprivate async saveRecentlyOpened(recent: IRecentlyOpened): Promise<void> {\n\t\t// Wait for global storage to be ready\n\t\tawait this.applicationStorageMainService.whenReady;\n\n\t\t// Store in global storage (but do not sync since this is mainly local paths)\n\t\tthis.applicationStorageMainService.store(\n\t\t\tWorkspacesHistoryMainService.RECENTLY_OPENED_STORAGE_KEY,\n\t\t\tJSON.stringify(toStoreData(recent)),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tprivate location(recent: IRecent): URI {\n\t\tif (isRecentFolder(recent)) {\n\t\t\treturn recent.folderUri;\n\t\t}\n\n\t\tif (isRecentFile(recent)) {\n\t\t\treturn recent.fileUri;\n\t\t}\n\n\t\treturn recent.workspace.configPath;\n\t}\n\n\tprivate containsWorkspace(\n\t\trecents: IRecent[],\n\t\tcandidate: IWorkspaceIdentifier,\n\t): boolean {\n\t\treturn !!recents.find(\n\t\t\t(recent) =>\n\t\t\t\tisRecentWorkspace(recent) &&\n\t\t\t\trecent.workspace.id === candidate.id,\n\t\t);\n\t}\n\n\tprivate containsFolder(recents: IRecent[], candidate: URI): boolean {\n\t\treturn !!recents.find(\n\t\t\t(recent) =>\n\t\t\t\tisRecentFolder(recent) &&\n\t\t\t\textUriBiasedIgnorePathCase.isEqual(recent.folderUri, candidate),\n\t\t);\n\t}\n\n\tprivate containsFile(recents: IRecentFile[], candidate: URI): boolean {\n\t\treturn !!recents.find((recent) =>\n\t\t\textUriBiasedIgnorePathCase.isEqual(recent.fileUri, candidate),\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region macOS Dock / Windows JumpList\n\n\tprivate static readonly MAX_MACOS_DOCK_RECENT_WORKSPACES = 7; // prefer higher number of workspaces...\n\tprivate static readonly MAX_MACOS_DOCK_RECENT_ENTRIES_TOTAL = 10; // ...over number of files\n\n\tprivate static readonly MAX_WINDOWS_JUMP_LIST_ENTRIES = 7;\n\n\t// Exclude some very common files from the dock/taskbar\n\tprivate static readonly COMMON_FILES_FILTER = [\n\t\t\"COMMIT_EDITMSG\",\n\t\t\"MERGE_MSG\",\n\t\t\"git-rebase-todo\",\n\t];\n\n\tprivate readonly macOSRecentDocumentsUpdater = this._register(\n\t\tnew ThrottledDelayer<void>(800),\n\t);\n\n\tprivate async handleWindowsJumpList(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\treturn; // only on windows\n\t\t}\n\n\t\tawait this.updateWindowsJumpList();\n\t\tthis._register(\n\t\t\tthis.onDidChangeRecentlyOpened(() => this.updateWindowsJumpList()),\n\t\t);\n\t}\n\n\tprivate async updateWindowsJumpList(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\treturn; // only on windows\n\t\t}\n\n\t\tconst jumpList: JumpListCategory[] = [];\n\n\t\t// Tasks\n\t\tjumpList.push({\n\t\t\ttype: \"tasks\",\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"task\",\n\t\t\t\t\ttitle: localize(\"newWindow\", \"New Window\"),\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"newWindowDesc\",\n\t\t\t\t\t\t\"Opens a new window\",\n\t\t\t\t\t),\n\t\t\t\t\tprogram: process.execPath,\n\t\t\t\t\targs: \"-n\", // force new window\n\t\t\t\t\ticonPath: process.execPath,\n\t\t\t\t\ticonIndex: 0,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\t// Recent Workspaces\n\t\tif ((await this.getRecentlyOpened()).workspaces.length > 0) {\n\t\t\t// The user might have meanwhile removed items from the jump list and we have to respect that\n\t\t\t// so we need to update our list of recent paths with the choice of the user to not add them again\n\t\t\t// Also: Windows will not show our custom category at all if there is any entry which was removed\n\t\t\t// by the user! See https://github.com/microsoft/vscode/issues/15052\n\t\t\tconst toRemove: URI[] = [];\n\t\t\tfor (const item of app.getJumpListSettings().removedItems) {\n\t\t\t\tconst args = item.args;\n\t\t\t\tif (args) {\n\t\t\t\t\tconst match = /^--(folder|file)-uri\\s+\"([^\"]+)\"$/.exec(\n\t\t\t\t\t\targs,\n\t\t\t\t\t);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\ttoRemove.push(URI.parse(match[2]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.removeRecentlyOpened(toRemove);\n\n\t\t\t// Add entries\n\t\t\tlet hasWorkspaces = false;\n\t\t\tconst items: JumpListItem[] = coalesce(\n\t\t\t\t(await this.getRecentlyOpened()).workspaces\n\t\t\t\t\t.slice(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tWorkspacesHistoryMainService.MAX_WINDOWS_JUMP_LIST_ENTRIES,\n\t\t\t\t\t)\n\t\t\t\t\t.map((recent) => {\n\t\t\t\t\t\tconst workspace = isRecentWorkspace(recent)\n\t\t\t\t\t\t\t? recent.workspace\n\t\t\t\t\t\t\t: recent.folderUri;\n\n\t\t\t\t\t\tconst { title, description } =\n\t\t\t\t\t\t\tthis.getWindowsJumpListLabel(\n\t\t\t\t\t\t\t\tworkspace,\n\t\t\t\t\t\t\t\trecent.label,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tlet args;\n\t\t\t\t\t\tif (URI.isUri(workspace)) {\n\t\t\t\t\t\t\targs = `--folder-uri \"${workspace.toString()}\"`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thasWorkspaces = true;\n\t\t\t\t\t\t\targs = `--file-uri \"${workspace.configPath.toString()}\"`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: \"task\",\n\t\t\t\t\t\t\ttitle: title.substr(0, 255), // Windows seems to be picky around the length of entries\n\t\t\t\t\t\t\tdescription: description.substr(0, 255), // (see https://github.com/microsoft/vscode/issues/111177)\n\t\t\t\t\t\t\tprogram: process.execPath,\n\t\t\t\t\t\t\targs,\n\t\t\t\t\t\t\ticonPath: \"explorer.exe\", // simulate folder icon\n\t\t\t\t\t\t\ticonIndex: 0,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (items.length > 0) {\n\t\t\t\tjumpList.push({\n\t\t\t\t\ttype: \"custom\",\n\t\t\t\t\tname: hasWorkspaces\n\t\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\t\"recentFoldersAndWorkspaces\",\n\t\t\t\t\t\t\t\t\"Recent Folders & Workspaces\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: localize(\"recentFolders\", \"Recent Folders\"),\n\t\t\t\t\titems,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Recent\n\t\tjumpList.push({\n\t\t\ttype: \"recent\", // this enables to show files in the \"recent\" category\n\t\t});\n\n\t\ttry {\n\t\t\tconst res = app.setJumpList(jumpList);\n\t\t\tif (res && res !== \"ok\") {\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`updateWindowsJumpList#setJumpList unexpected result: ${res}`,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(\"updateWindowsJumpList#setJumpList\", error); // since setJumpList is relatively new API, make sure to guard for errors\n\t\t}\n\t}\n\n\tprivate getWindowsJumpListLabel(\n\t\tworkspace: IWorkspaceIdentifier | URI,\n\t\trecentLabel: string | undefined,\n\t): { title: string; description: string } {\n\t\t// Prefer recent label\n\t\tif (recentLabel) {\n\t\t\treturn {\n\t\t\t\ttitle: splitRecentLabel(recentLabel).name,\n\t\t\t\tdescription: recentLabel,\n\t\t\t};\n\t\t}\n\n\t\t// Single Folder\n\t\tif (URI.isUri(workspace)) {\n\t\t\treturn {\n\t\t\t\ttitle: basename(workspace),\n\t\t\t\tdescription: this.renderJumpListPathDescription(workspace),\n\t\t\t};\n\t\t}\n\n\t\t// Workspace: Untitled\n\t\tif (\n\t\t\tthis.workspacesManagementMainService.isUntitledWorkspace(workspace)\n\t\t) {\n\t\t\treturn {\n\t\t\t\ttitle: localize(\"untitledWorkspace\", \"Untitled (Workspace)\"),\n\t\t\t\tdescription: \"\",\n\t\t\t};\n\t\t}\n\n\t\t// Workspace: normal\n\t\tlet filename = basename(workspace.configPath);\n\t\tif (filename.endsWith(WORKSPACE_EXTENSION)) {\n\t\t\tfilename = filename.substr(\n\t\t\t\t0,\n\t\t\t\tfilename.length - WORKSPACE_EXTENSION.length - 1,\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\ttitle: localize(\"workspaceName\", \"{0} (Workspace)\", filename),\n\t\t\tdescription: this.renderJumpListPathDescription(\n\t\t\t\tworkspace.configPath,\n\t\t\t),\n\t\t};\n\t}\n\n\tprivate renderJumpListPathDescription(uri: URI) {\n\t\treturn uri.scheme === \"file\"\n\t\t\t? normalizeDriveLetter(uri.fsPath)\n\t\t\t: uri.toString();\n\t}\n\n\tprivate async updateMacOSRecentDocuments(): Promise<void> {\n\t\tif (!isMacintosh) {\n\t\t\treturn;\n\t\t}\n\n\t\t// We clear all documents first to ensure an up-to-date view on the set. Since entries\n\t\t// can get deleted on disk, this ensures that the list is always valid\n\t\tapp.clearRecentDocuments();\n\n\t\tconst mru = await this.getRecentlyOpened();\n\n\t\t// Collect max-N recent workspaces that are known to exist\n\t\tconst workspaceEntries: string[] = [];\n\t\tlet entries = 0;\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti < mru.workspaces.length &&\n\t\t\tentries <\n\t\t\t\tWorkspacesHistoryMainService.MAX_MACOS_DOCK_RECENT_WORKSPACES;\n\t\t\ti++\n\t\t) {\n\t\t\tconst loc = this.location(mru.workspaces[i]);\n\t\t\tif (loc.scheme === Schemas.file) {\n\t\t\t\tconst workspacePath = originalFSPath(loc);\n\t\t\t\tif (await Promises.exists(workspacePath)) {\n\t\t\t\t\tworkspaceEntries.push(workspacePath);\n\t\t\t\t\tentries++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Collect max-N recent files that are known to exist\n\t\tconst fileEntries: string[] = [];\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti < mru.files.length &&\n\t\t\tentries <\n\t\t\t\tWorkspacesHistoryMainService.MAX_MACOS_DOCK_RECENT_ENTRIES_TOTAL;\n\t\t\ti++\n\t\t) {\n\t\t\tconst loc = this.location(mru.files[i]);\n\t\t\tif (loc.scheme === Schemas.file) {\n\t\t\t\tconst filePath = originalFSPath(loc);\n\t\t\t\tif (\n\t\t\t\t\tWorkspacesHistoryMainService.COMMON_FILES_FILTER.includes(\n\t\t\t\t\t\tbasename(loc),\n\t\t\t\t\t) || // skip some well known file entries\n\t\t\t\t\tworkspaceEntries.includes(filePath) // prefer a workspace entry over a file entry (e.g. for .code-workspace)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (await Promises.exists(filePath)) {\n\t\t\t\t\tfileEntries.push(filePath);\n\t\t\t\t\tentries++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// The apple guidelines (https://developer.apple.com/design/human-interface-guidelines/macos/menus/menu-anatomy/)\n\t\t// explain that most recent entries should appear close to the interaction by the user (e.g. close to the\n\t\t// mouse click). Most native macOS applications that add recent documents to the dock, show the most recent document\n\t\t// to the bottom (because the dock menu is not appearing from top to bottom, but from the bottom to the top). As such\n\t\t// we fill in the entries in reverse order so that the most recent shows up at the bottom of the menu.\n\t\t//\n\t\t// On top of that, the maximum number of documents can be configured by the user (defaults to 10). To ensure that\n\t\t// we are not failing to show the most recent entries, we start by adding files first (in reverse order of recency)\n\t\t// and then add folders (in reverse order of recency). Given that strategy, we can ensure that the most recent\n\t\t// N folders are always appearing, even if the limit is low (https://github.com/microsoft/vscode/issues/74788)\n\t\tfileEntries\n\t\t\t.reverse()\n\t\t\t.forEach((fileEntry) => app.addRecentDocument(fileEntry));\n\t\tworkspaceEntries\n\t\t\t.reverse()\n\t\t\t.forEach((workspaceEntry) => app.addRecentDocument(workspaceEntry));\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
