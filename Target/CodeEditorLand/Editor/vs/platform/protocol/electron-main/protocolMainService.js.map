{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/protocol/electron-main/protocolMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { session } from 'electron';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { COI, FileAccess, Schemas } from '../../../base/common/network.js';\nimport { basename, extname, normalize } from '../../../base/common/path.js';\nimport { isLinux } from '../../../base/common/platform.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { validatedIpcMain } from '../../../base/parts/ipc/electron-main/ipcMain.js';\nimport { INativeEnvironmentService } from '../../environment/common/environment.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IIPCObjectUrl, IProtocolMainService } from './protocol.js';\nimport { IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\n\ntype ProtocolCallback = { (result: string | Electron.FilePathWithHeaders | { error: number }): void };\n\nexport class ProtocolMainService extends Disposable implements IProtocolMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly validRoots = TernarySearchTree.forPaths<boolean>(!isLinux);\n\tprivate readonly validExtensions = new Set(['.svg', '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.mp4']); // https://github.com/microsoft/vscode/issues/119384\n\n\tconstructor(\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\t// Define an initial set of roots we allow loading from\n\t\t// - appRoot\t: all files installed as part of the app\n\t\t// - extensions : all files shipped from extensions\n\t\t// - storage    : all files in global and workspace storage (https://github.com/microsoft/vscode/issues/116735)\n\t\tthis.addValidFileRoot(environmentService.appRoot);\n\t\tthis.addValidFileRoot(environmentService.extensionsPath);\n\t\tthis.addValidFileRoot(userDataProfilesService.defaultProfile.globalStorageHome.with({ scheme: Schemas.file }).fsPath);\n\t\tthis.addValidFileRoot(environmentService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath);\n\n\t\t// Handle protocols\n\t\tthis.handleProtocols();\n\t}\n\n\tprivate handleProtocols(): void {\n\t\tconst { defaultSession } = session;\n\n\t\t// Register vscode-file:// handler\n\t\tdefaultSession.protocol.registerFileProtocol(Schemas.vscodeFileResource, (request, callback) => this.handleResourceRequest(request, callback));\n\n\t\t// Block any file:// access\n\t\tdefaultSession.protocol.interceptFileProtocol(Schemas.file, (request, callback) => this.handleFileRequest(request, callback));\n\n\t\t// Cleanup\n\t\tthis._register(toDisposable(() => {\n\t\t\tdefaultSession.protocol.unregisterProtocol(Schemas.vscodeFileResource);\n\t\t\tdefaultSession.protocol.uninterceptProtocol(Schemas.file);\n\t\t}));\n\t}\n\n\taddValidFileRoot(root: string): IDisposable {\n\n\t\t// Pass to `normalize` because we later also do the\n\t\t// same for all paths to check against.\n\t\tconst normalizedRoot = normalize(root);\n\n\t\tif (!this.validRoots.get(normalizedRoot)) {\n\t\t\tthis.validRoots.set(normalizedRoot, true);\n\n\t\t\treturn toDisposable(() => this.validRoots.delete(normalizedRoot));\n\t\t}\n\n\t\treturn Disposable.None;\n\t}\n\n\t//#region file://\n\n\tprivate handleFileRequest(request: Electron.ProtocolRequest, callback: ProtocolCallback) {\n\t\tconst uri = URI.parse(request.url);\n\n\t\tthis.logService.error(`Refused to load resource ${uri.fsPath} from ${Schemas.file}: protocol (original URL: ${request.url})`);\n\n\t\treturn callback({ error: -3 /* ABORTED */ });\n\t}\n\n\t//#endregion\n\n\t//#region vscode-file://\n\n\tprivate handleResourceRequest(request: Electron.ProtocolRequest, callback: ProtocolCallback): void {\n\t\tconst path = this.requestToNormalizedFilePath(request);\n\n\t\tlet headers: Record<string, string> | undefined;\n\t\tif (this.environmentService.crossOriginIsolated) {\n\t\t\tconst pathBasename = basename(path);\n\t\t\tif (pathBasename === 'workbench.html' || pathBasename === 'workbench-dev.html' || pathBasename === 'workbench.esm.html' || pathBasename === 'workbench-dev.esm.html') {\n\t\t\t\theaders = COI.CoopAndCoep;\n\t\t\t} else {\n\t\t\t\theaders = COI.getHeadersFromQuery(request.url);\n\t\t\t}\n\t\t}\n\n\t\t// first check by validRoots\n\t\tif (this.validRoots.findSubstr(path)) {\n\t\t\treturn callback({ path, headers });\n\t\t}\n\n\t\t// then check by validExtensions\n\t\tif (this.validExtensions.has(extname(path).toLowerCase())) {\n\t\t\treturn callback({ path });\n\t\t}\n\n\t\t// finally block to load the resource\n\t\tthis.logService.error(`${Schemas.vscodeFileResource}: Refused to load resource ${path} from ${Schemas.vscodeFileResource}: protocol (original URL: ${request.url})`);\n\n\t\treturn callback({ error: -3 /* ABORTED */ });\n\t}\n\n\tprivate requestToNormalizedFilePath(request: Electron.ProtocolRequest): string {\n\n\t\t// 1.) Use `URI.parse()` util from us to convert the raw\n\t\t//     URL into our URI.\n\t\tconst requestUri = URI.parse(request.url);\n\n\t\t// 2.) Use `FileAccess.asFileUri` to convert back from a\n\t\t//     `vscode-file:` URI to a `file:` URI.\n\t\tconst unnormalizedFileUri = FileAccess.uriToFileUri(requestUri);\n\n\t\t// 3.) Strip anything from the URI that could result in\n\t\t//     relative paths (such as \"..\") by using `normalize`\n\t\treturn normalize(unnormalizedFileUri.fsPath);\n\t}\n\n\t//#endregion\n\n\t//#region IPC Object URLs\n\n\tcreateIPCObjectUrl<T>(): IIPCObjectUrl<T> {\n\t\tlet obj: T | undefined = undefined;\n\n\t\t// Create unique URI\n\t\tconst resource = URI.from({\n\t\t\tscheme: 'vscode', // used for all our IPC communication (vscode:<channel>)\n\t\t\tpath: generateUuid()\n\t\t});\n\n\t\t// Install IPC handler\n\t\tconst channel = resource.toString();\n\t\tconst handler = async (): Promise<T | undefined> => obj;\n\t\tvalidatedIpcMain.handle(channel, handler);\n\n\t\tthis.logService.trace(`IPC Object URL: Registered new channel ${channel}.`);\n\n\t\treturn {\n\t\t\tresource,\n\t\t\tupdate: updatedObj => obj = updatedObj,\n\t\t\tdispose: () => {\n\t\t\t\tthis.logService.trace(`IPC Object URL: Removed channel ${channel}.`);\n\n\t\t\t\tvalidatedIpcMain.removeHandler(channel);\n\t\t\t}\n\t\t};\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
