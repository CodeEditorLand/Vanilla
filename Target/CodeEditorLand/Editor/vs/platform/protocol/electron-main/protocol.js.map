{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/protocol/electron-main/protocol.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport const IProtocolMainService = createDecorator<IProtocolMainService>(\n\t\"protocolMainService\",\n);\n\nexport interface IIPCObjectUrl<T> extends IDisposable {\n\t/**\n\t * A `URI` that a renderer can use to retrieve the\n\t * object via `ipcRenderer.invoke(resource.toString())`\n\t */\n\tresource: URI;\n\n\t/**\n\t * Allows to update the value of the object after it\n\t * has been created.\n\t *\n\t * @param obj the object to make accessible to the\n\t * renderer.\n\t */\n\tupdate(obj: T): void;\n}\n\nexport interface IProtocolMainService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Allows to make an object accessible to a renderer\n\t * via `ipcRenderer.invoke(resource.toString())`.\n\t */\n\tcreateIPCObjectUrl<T>(): IIPCObjectUrl<T>;\n\n\t/**\n\t * Adds a path as root to the list of allowed\n\t * resources for file access.\n\t *\n\t * @param root the path to allow for file access\n\t */\n\taddValidFileRoot(root: string): IDisposable;\n}\n"],
  "mappings": "AAOA,SAAS,uBAAuB;AAEzB,MAAM,uBAAuB;AAAA,EACnC;AACD;",
  "names": []
}
