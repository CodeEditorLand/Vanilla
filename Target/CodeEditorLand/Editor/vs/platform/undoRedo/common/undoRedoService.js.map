{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/undoRedo/common/undoRedoService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, IDisposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport { URI } from '../../../base/common/uri.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { InstantiationType, registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IPastFutureElements, IResourceUndoRedoElement, IUndoRedoElement, IUndoRedoService, IWorkspaceUndoRedoElement, ResourceEditStackSnapshot, UndoRedoElementType, UndoRedoGroup, UndoRedoSource, UriComparisonKeyComputer } from './undoRedo.js';\n\nconst DEBUG = false;\n\nfunction getResourceLabel(resource: URI): string {\n\treturn resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\n\nlet stackElementCounter = 0;\n\nclass ResourceStackElement {\n\tpublic readonly id = (++stackElementCounter);\n\tpublic readonly type = UndoRedoElementType.Resource;\n\tpublic readonly actual: IUndoRedoElement;\n\tpublic readonly label: string;\n\tpublic readonly confirmBeforeUndo: boolean;\n\n\tpublic readonly resourceLabel: string;\n\tpublic readonly strResource: string;\n\tpublic readonly resourceLabels: string[];\n\tpublic readonly strResources: string[];\n\tpublic readonly groupId: number;\n\tpublic readonly groupOrder: number;\n\tpublic readonly sourceId: number;\n\tpublic readonly sourceOrder: number;\n\tpublic isValid: boolean;\n\n\tconstructor(actual: IUndoRedoElement, resourceLabel: string, strResource: string, groupId: number, groupOrder: number, sourceId: number, sourceOrder: number) {\n\t\tthis.actual = actual;\n\t\tthis.label = actual.label;\n\t\tthis.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n\t\tthis.resourceLabel = resourceLabel;\n\t\tthis.strResource = strResource;\n\t\tthis.resourceLabels = [this.resourceLabel];\n\t\tthis.strResources = [this.strResource];\n\t\tthis.groupId = groupId;\n\t\tthis.groupOrder = groupOrder;\n\t\tthis.sourceId = sourceId;\n\t\tthis.sourceOrder = sourceOrder;\n\t\tthis.isValid = true;\n\t}\n\n\tpublic setValid(isValid: boolean): void {\n\t\tthis.isValid = isValid;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? '  VALID' : 'INVALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n\t}\n}\n\nconst enum RemovedResourceReason {\n\tExternalRemoval = 0,\n\tNoParallelUniverses = 1\n}\n\nclass ResourceReasonPair {\n\tconstructor(\n\t\tpublic readonly resourceLabel: string,\n\t\tpublic readonly reason: RemovedResourceReason\n\t) { }\n}\n\nclass RemovedResources {\n\tprivate readonly elements = new Map<string, ResourceReasonPair>();\n\n\tpublic createMessage(): string {\n\t\tconst externalRemoval: string[] = [];\n\t\tconst noParallelUniverses: string[] = [];\n\t\tfor (const [, element] of this.elements) {\n\t\t\tconst dest = (\n\t\t\t\telement.reason === RemovedResourceReason.ExternalRemoval\n\t\t\t\t\t? externalRemoval\n\t\t\t\t\t: noParallelUniverses\n\t\t\t);\n\t\t\tdest.push(element.resourceLabel);\n\t\t}\n\n\t\tconst messages: string[] = [];\n\t\tif (externalRemoval.length > 0) {\n\t\t\tmessages.push(\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'externalRemoval', comment: ['{0} is a list of filenames'] },\n\t\t\t\t\t\"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\tif (noParallelUniverses.length > 0) {\n\t\t\tmessages.push(\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] },\n\t\t\t\t\t\"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')\n\t\t\t\t));\n\t\t}\n\t\treturn messages.join('\\n');\n\t}\n\n\tpublic get size(): number {\n\t\treturn this.elements.size;\n\t}\n\n\tpublic has(strResource: string): boolean {\n\t\treturn this.elements.has(strResource);\n\t}\n\n\tpublic set(strResource: string, value: ResourceReasonPair): void {\n\t\tthis.elements.set(strResource, value);\n\t}\n\n\tpublic delete(strResource: string): boolean {\n\t\treturn this.elements.delete(strResource);\n\t}\n}\n\nclass WorkspaceStackElement {\n\tpublic readonly id = (++stackElementCounter);\n\tpublic readonly type = UndoRedoElementType.Workspace;\n\tpublic readonly actual: IWorkspaceUndoRedoElement;\n\tpublic readonly label: string;\n\tpublic readonly confirmBeforeUndo: boolean;\n\n\tpublic readonly resourceLabels: string[];\n\tpublic readonly strResources: string[];\n\tpublic readonly groupId: number;\n\tpublic readonly groupOrder: number;\n\tpublic readonly sourceId: number;\n\tpublic readonly sourceOrder: number;\n\tpublic removedResources: RemovedResources | null;\n\tpublic invalidatedResources: RemovedResources | null;\n\n\tconstructor(actual: IWorkspaceUndoRedoElement, resourceLabels: string[], strResources: string[], groupId: number, groupOrder: number, sourceId: number, sourceOrder: number) {\n\t\tthis.actual = actual;\n\t\tthis.label = actual.label;\n\t\tthis.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n\t\tthis.resourceLabels = resourceLabels;\n\t\tthis.strResources = strResources;\n\t\tthis.groupId = groupId;\n\t\tthis.groupOrder = groupOrder;\n\t\tthis.sourceId = sourceId;\n\t\tthis.sourceOrder = sourceOrder;\n\t\tthis.removedResources = null;\n\t\tthis.invalidatedResources = null;\n\t}\n\n\tpublic canSplit(): this is WorkspaceStackElement & { actual: { split(): IResourceUndoRedoElement[] } } {\n\t\treturn (typeof this.actual.split === 'function');\n\t}\n\n\tpublic removeResource(resourceLabel: string, strResource: string, reason: RemovedResourceReason): void {\n\t\tif (!this.removedResources) {\n\t\t\tthis.removedResources = new RemovedResources();\n\t\t}\n\t\tif (!this.removedResources.has(strResource)) {\n\t\t\tthis.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n\t\t}\n\t}\n\n\tpublic setValid(resourceLabel: string, strResource: string, isValid: boolean): void {\n\t\tif (isValid) {\n\t\t\tif (this.invalidatedResources) {\n\t\t\t\tthis.invalidatedResources.delete(strResource);\n\t\t\t\tif (this.invalidatedResources.size === 0) {\n\t\t\t\t\tthis.invalidatedResources = null;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this.invalidatedResources) {\n\t\t\t\tthis.invalidatedResources = new RemovedResources();\n\t\t\t}\n\t\t\tif (!this.invalidatedResources.has(strResource)) {\n\t\t\t\tthis.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, RemovedResourceReason.ExternalRemoval));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toString(): string {\n\t\treturn `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? 'INVALID' : '  VALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n\t}\n}\n\ntype StackElement = ResourceStackElement | WorkspaceStackElement;\n\nclass ResourceEditStack {\n\tpublic readonly resourceLabel: string;\n\tprivate readonly strResource: string;\n\tprivate _past: StackElement[];\n\tprivate _future: StackElement[];\n\tpublic locked: boolean;\n\tpublic versionId: number;\n\n\tconstructor(resourceLabel: string, strResource: string) {\n\t\tthis.resourceLabel = resourceLabel;\n\t\tthis.strResource = strResource;\n\t\tthis._past = [];\n\t\tthis._future = [];\n\t\tthis.locked = false;\n\t\tthis.versionId = 1;\n\t}\n\n\tpublic dispose(): void {\n\t\tfor (const element of this._past) {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.removeResource(this.resourceLabel, this.strResource, RemovedResourceReason.ExternalRemoval);\n\t\t\t}\n\t\t}\n\t\tfor (const element of this._future) {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.removeResource(this.resourceLabel, this.strResource, RemovedResourceReason.ExternalRemoval);\n\t\t\t}\n\t\t}\n\t\tthis.versionId++;\n\t}\n\n\tpublic toString(): string {\n\t\tconst result: string[] = [];\n\t\tresult.push(`* ${this.strResource}:`);\n\t\tfor (let i = 0; i < this._past.length; i++) {\n\t\t\tresult.push(`   * [UNDO] ${this._past[i]}`);\n\t\t}\n\t\tfor (let i = this._future.length - 1; i >= 0; i--) {\n\t\t\tresult.push(`   * [REDO] ${this._future[i]}`);\n\t\t}\n\t\treturn result.join('\\n');\n\t}\n\n\tpublic flushAllElements(): void {\n\t\tthis._past = [];\n\t\tthis._future = [];\n\t\tthis.versionId++;\n\t}\n\n\tpublic setElementsIsValid(isValid: boolean): void {\n\t\tfor (const element of this._past) {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.setValid(this.resourceLabel, this.strResource, isValid);\n\t\t\t} else {\n\t\t\t\telement.setValid(isValid);\n\t\t\t}\n\t\t}\n\t\tfor (const element of this._future) {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.setValid(this.resourceLabel, this.strResource, isValid);\n\t\t\t} else {\n\t\t\t\telement.setValid(isValid);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _setElementValidFlag(element: StackElement, isValid: boolean): void {\n\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\telement.setValid(this.resourceLabel, this.strResource, isValid);\n\t\t} else {\n\t\t\telement.setValid(isValid);\n\t\t}\n\t}\n\n\tpublic setElementsValidFlag(isValid: boolean, filter: (element: IUndoRedoElement) => boolean): void {\n\t\tfor (const element of this._past) {\n\t\t\tif (filter(element.actual)) {\n\t\t\t\tthis._setElementValidFlag(element, isValid);\n\t\t\t}\n\t\t}\n\t\tfor (const element of this._future) {\n\t\t\tif (filter(element.actual)) {\n\t\t\t\tthis._setElementValidFlag(element, isValid);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic pushElement(element: StackElement): void {\n\t\t// remove the future\n\t\tfor (const futureElement of this._future) {\n\t\t\tif (futureElement.type === UndoRedoElementType.Workspace) {\n\t\t\t\tfutureElement.removeResource(this.resourceLabel, this.strResource, RemovedResourceReason.NoParallelUniverses);\n\t\t\t}\n\t\t}\n\t\tthis._future = [];\n\t\tthis._past.push(element);\n\t\tthis.versionId++;\n\t}\n\n\tpublic createSnapshot(resource: URI): ResourceEditStackSnapshot {\n\t\tconst elements: number[] = [];\n\n\t\tfor (let i = 0, len = this._past.length; i < len; i++) {\n\t\t\telements.push(this._past[i].id);\n\t\t}\n\t\tfor (let i = this._future.length - 1; i >= 0; i--) {\n\t\t\telements.push(this._future[i].id);\n\t\t}\n\n\t\treturn new ResourceEditStackSnapshot(resource, elements);\n\t}\n\n\tpublic restoreSnapshot(snapshot: ResourceEditStackSnapshot): void {\n\t\tconst snapshotLength = snapshot.elements.length;\n\t\tlet isOK = true;\n\t\tlet snapshotIndex = 0;\n\t\tlet removePastAfter = -1;\n\t\tfor (let i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n\t\t\tconst element = this._past[i];\n\t\t\tif (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n\t\t\t\tisOK = false;\n\t\t\t\tremovePastAfter = 0;\n\t\t\t}\n\t\t\tif (!isOK && element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.removeResource(this.resourceLabel, this.strResource, RemovedResourceReason.ExternalRemoval);\n\t\t\t}\n\t\t}\n\t\tlet removeFutureBefore = -1;\n\t\tfor (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n\t\t\tconst element = this._future[i];\n\t\t\tif (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n\t\t\t\tisOK = false;\n\t\t\t\tremoveFutureBefore = i;\n\t\t\t}\n\t\t\tif (!isOK && element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.removeResource(this.resourceLabel, this.strResource, RemovedResourceReason.ExternalRemoval);\n\t\t\t}\n\t\t}\n\t\tif (removePastAfter !== -1) {\n\t\t\tthis._past = this._past.slice(0, removePastAfter);\n\t\t}\n\t\tif (removeFutureBefore !== -1) {\n\t\t\tthis._future = this._future.slice(removeFutureBefore + 1);\n\t\t}\n\t\tthis.versionId++;\n\t}\n\n\tpublic getElements(): IPastFutureElements {\n\t\tconst past: IUndoRedoElement[] = [];\n\t\tconst future: IUndoRedoElement[] = [];\n\n\t\tfor (const element of this._past) {\n\t\t\tpast.push(element.actual);\n\t\t}\n\t\tfor (const element of this._future) {\n\t\t\tfuture.push(element.actual);\n\t\t}\n\n\t\treturn { past, future };\n\t}\n\n\tpublic getClosestPastElement(): StackElement | null {\n\t\tif (this._past.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._past[this._past.length - 1];\n\t}\n\n\tpublic getSecondClosestPastElement(): StackElement | null {\n\t\tif (this._past.length < 2) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._past[this._past.length - 2];\n\t}\n\n\tpublic getClosestFutureElement(): StackElement | null {\n\t\tif (this._future.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._future[this._future.length - 1];\n\t}\n\n\tpublic hasPastElements(): boolean {\n\t\treturn (this._past.length > 0);\n\t}\n\n\tpublic hasFutureElements(): boolean {\n\t\treturn (this._future.length > 0);\n\t}\n\n\tpublic splitPastWorkspaceElement(toRemove: WorkspaceStackElement, individualMap: Map<string, ResourceStackElement>): void {\n\t\tfor (let j = this._past.length - 1; j >= 0; j--) {\n\t\t\tif (this._past[j] === toRemove) {\n\t\t\t\tif (individualMap.has(this.strResource)) {\n\t\t\t\t\t// gets replaced\n\t\t\t\t\tthis._past[j] = individualMap.get(this.strResource)!;\n\t\t\t\t} else {\n\t\t\t\t\t// gets deleted\n\t\t\t\t\tthis._past.splice(j, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.versionId++;\n\t}\n\n\tpublic splitFutureWorkspaceElement(toRemove: WorkspaceStackElement, individualMap: Map<string, ResourceStackElement>): void {\n\t\tfor (let j = this._future.length - 1; j >= 0; j--) {\n\t\t\tif (this._future[j] === toRemove) {\n\t\t\t\tif (individualMap.has(this.strResource)) {\n\t\t\t\t\t// gets replaced\n\t\t\t\t\tthis._future[j] = individualMap.get(this.strResource)!;\n\t\t\t\t} else {\n\t\t\t\t\t// gets deleted\n\t\t\t\t\tthis._future.splice(j, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.versionId++;\n\t}\n\n\tpublic moveBackward(element: StackElement): void {\n\t\tthis._past.pop();\n\t\tthis._future.push(element);\n\t\tthis.versionId++;\n\t}\n\n\tpublic moveForward(element: StackElement): void {\n\t\tthis._future.pop();\n\t\tthis._past.push(element);\n\t\tthis.versionId++;\n\t}\n}\n\nclass EditStackSnapshot {\n\n\tpublic readonly editStacks: ResourceEditStack[];\n\tprivate readonly _versionIds: number[];\n\n\tconstructor(editStacks: ResourceEditStack[]) {\n\t\tthis.editStacks = editStacks;\n\t\tthis._versionIds = [];\n\t\tfor (let i = 0, len = this.editStacks.length; i < len; i++) {\n\t\t\tthis._versionIds[i] = this.editStacks[i].versionId;\n\t\t}\n\t}\n\n\tpublic isValid(): boolean {\n\t\tfor (let i = 0, len = this.editStacks.length; i < len; i++) {\n\t\t\tif (this._versionIds[i] !== this.editStacks[i].versionId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nconst missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\n\nexport class UndoRedoService implements IUndoRedoService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _editStacks: Map<string, ResourceEditStack>;\n\tprivate readonly _uriComparisonKeyComputers: [string, UriComparisonKeyComputer][];\n\n\tconstructor(\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t) {\n\t\tthis._editStacks = new Map<string, ResourceEditStack>();\n\t\tthis._uriComparisonKeyComputers = [];\n\t}\n\n\tpublic registerUriComparisonKeyComputer(scheme: string, uriComparisonKeyComputer: UriComparisonKeyComputer): IDisposable {\n\t\tthis._uriComparisonKeyComputers.push([scheme, uriComparisonKeyComputer]);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (let i = 0, len = this._uriComparisonKeyComputers.length; i < len; i++) {\n\t\t\t\t\tif (this._uriComparisonKeyComputers[i][1] === uriComparisonKeyComputer) {\n\t\t\t\t\t\tthis._uriComparisonKeyComputers.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic getUriComparisonKey(resource: URI): string {\n\t\tfor (const uriComparisonKeyComputer of this._uriComparisonKeyComputers) {\n\t\t\tif (uriComparisonKeyComputer[0] === resource.scheme) {\n\t\t\t\treturn uriComparisonKeyComputer[1].getComparisonKey(resource);\n\t\t\t}\n\t\t}\n\t\treturn resource.toString();\n\t}\n\n\tprivate _print(label: string): void {\n\t\tconsole.log(`------------------------------------`);\n\t\tconsole.log(`AFTER ${label}: `);\n\t\tconst str: string[] = [];\n\t\tfor (const element of this._editStacks) {\n\t\t\tstr.push(element[1].toString());\n\t\t}\n\t\tconsole.log(str.join('\\n'));\n\t}\n\n\tpublic pushElement(element: IUndoRedoElement, group: UndoRedoGroup = UndoRedoGroup.None, source: UndoRedoSource = UndoRedoSource.None): void {\n\t\tif (element.type === UndoRedoElementType.Resource) {\n\t\t\tconst resourceLabel = getResourceLabel(element.resource);\n\t\t\tconst strResource = this.getUriComparisonKey(element.resource);\n\t\t\tthis._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n\t\t} else {\n\t\t\tconst seen = new Set<string>();\n\t\t\tconst resourceLabels: string[] = [];\n\t\t\tconst strResources: string[] = [];\n\t\t\tfor (const resource of element.resources) {\n\t\t\t\tconst resourceLabel = getResourceLabel(resource);\n\t\t\t\tconst strResource = this.getUriComparisonKey(resource);\n\n\t\t\t\tif (seen.has(strResource)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tseen.add(strResource);\n\t\t\t\tresourceLabels.push(resourceLabel);\n\t\t\t\tstrResources.push(strResource);\n\t\t\t}\n\n\t\t\tif (resourceLabels.length === 1) {\n\t\t\t\tthis._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n\t\t\t} else {\n\t\t\t\tthis._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n\t\t\t}\n\t\t}\n\t\tif (DEBUG) {\n\t\t\tthis._print('pushElement');\n\t\t}\n\t}\n\n\tprivate _pushElement(element: StackElement): void {\n\t\tfor (let i = 0, len = element.strResources.length; i < len; i++) {\n\t\t\tconst resourceLabel = element.resourceLabels[i];\n\t\t\tconst strResource = element.strResources[i];\n\n\t\t\tlet editStack: ResourceEditStack;\n\t\t\tif (this._editStacks.has(strResource)) {\n\t\t\t\teditStack = this._editStacks.get(strResource)!;\n\t\t\t} else {\n\t\t\t\teditStack = new ResourceEditStack(resourceLabel, strResource);\n\t\t\t\tthis._editStacks.set(strResource, editStack);\n\t\t\t}\n\n\t\t\teditStack.pushElement(element);\n\t\t}\n\t}\n\n\tpublic getLastElement(resource: URI): IUndoRedoElement | null {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\tif (editStack.hasFutureElements()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst closestPastElement = editStack.getClosestPastElement();\n\t\t\treturn closestPastElement ? closestPastElement.actual : null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate _splitPastWorkspaceElement(toRemove: WorkspaceStackElement & { actual: { split(): IResourceUndoRedoElement[] } }, ignoreResources: RemovedResources | null): void {\n\t\tconst individualArr = toRemove.actual.split();\n\t\tconst individualMap = new Map<string, ResourceStackElement>();\n\t\tfor (const _element of individualArr) {\n\t\t\tconst resourceLabel = getResourceLabel(_element.resource);\n\t\t\tconst strResource = this.getUriComparisonKey(_element.resource);\n\t\t\tconst element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n\t\t\tindividualMap.set(element.strResource, element);\n\t\t}\n\n\t\tfor (const strResource of toRemove.strResources) {\n\t\t\tif (ignoreResources && ignoreResources.has(strResource)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.splitPastWorkspaceElement(toRemove, individualMap);\n\t\t}\n\t}\n\n\tprivate _splitFutureWorkspaceElement(toRemove: WorkspaceStackElement & { actual: { split(): IResourceUndoRedoElement[] } }, ignoreResources: RemovedResources | null): void {\n\t\tconst individualArr = toRemove.actual.split();\n\t\tconst individualMap = new Map<string, ResourceStackElement>();\n\t\tfor (const _element of individualArr) {\n\t\t\tconst resourceLabel = getResourceLabel(_element.resource);\n\t\t\tconst strResource = this.getUriComparisonKey(_element.resource);\n\t\t\tconst element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n\t\t\tindividualMap.set(element.strResource, element);\n\t\t}\n\n\t\tfor (const strResource of toRemove.strResources) {\n\t\t\tif (ignoreResources && ignoreResources.has(strResource)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.splitFutureWorkspaceElement(toRemove, individualMap);\n\t\t}\n\t}\n\n\tpublic removeElements(resource: URI | string): void {\n\t\tconst strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.dispose();\n\t\t\tthis._editStacks.delete(strResource);\n\t\t}\n\t\tif (DEBUG) {\n\t\t\tthis._print('removeElements');\n\t\t}\n\t}\n\n\tpublic setElementsValidFlag(resource: URI, isValid: boolean, filter: (element: IUndoRedoElement) => boolean): void {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.setElementsValidFlag(isValid, filter);\n\t\t}\n\t\tif (DEBUG) {\n\t\t\tthis._print('setElementsValidFlag');\n\t\t}\n\t}\n\n\tpublic hasElements(resource: URI): boolean {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn (editStack.hasPastElements() || editStack.hasFutureElements());\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic createSnapshot(resource: URI): ResourceEditStackSnapshot {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.createSnapshot(resource);\n\t\t}\n\t\treturn new ResourceEditStackSnapshot(resource, []);\n\t}\n\n\tpublic restoreSnapshot(snapshot: ResourceEditStackSnapshot): void {\n\t\tconst strResource = this.getUriComparisonKey(snapshot.resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.restoreSnapshot(snapshot);\n\n\t\t\tif (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n\t\t\t\t// the edit stack is now empty, just remove it entirely\n\t\t\t\teditStack.dispose();\n\t\t\t\tthis._editStacks.delete(strResource);\n\t\t\t}\n\t\t}\n\t\tif (DEBUG) {\n\t\t\tthis._print('restoreSnapshot');\n\t\t}\n\t}\n\n\tpublic getElements(resource: URI): IPastFutureElements {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.getElements();\n\t\t}\n\t\treturn { past: [], future: [] };\n\t}\n\n\tprivate _findClosestUndoElementWithSource(sourceId: number): [StackElement | null, string | null] {\n\t\tif (!sourceId) {\n\t\t\treturn [null, null];\n\t\t}\n\n\t\t// find an element with the sourceId and with the highest sourceOrder ready to be undone\n\t\tlet matchedElement: StackElement | null = null;\n\t\tlet matchedStrResource: string | null = null;\n\n\t\tfor (const [strResource, editStack] of this._editStacks) {\n\t\t\tconst candidate = editStack.getClosestPastElement();\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidate.sourceId === sourceId) {\n\t\t\t\tif (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n\t\t\t\t\tmatchedElement = candidate;\n\t\t\t\t\tmatchedStrResource = strResource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [matchedElement, matchedStrResource];\n\t}\n\n\tpublic canUndo(resourceOrSource: URI | UndoRedoSource): boolean {\n\t\tif (resourceOrSource instanceof UndoRedoSource) {\n\t\t\tconst [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n\t\t\treturn matchedStrResource ? true : false;\n\t\t}\n\t\tconst strResource = this.getUriComparisonKey(resourceOrSource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.hasPastElements();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _onError(err: Error, element: StackElement): void {\n\t\tonUnexpectedError(err);\n\t\t// An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n\t\tfor (const strResource of element.strResources) {\n\t\t\tthis.removeElements(strResource);\n\t\t}\n\t\tthis._notificationService.error(err);\n\t}\n\n\tprivate _acquireLocks(editStackSnapshot: EditStackSnapshot): () => void {\n\t\t// first, check if all locks can be acquired\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.locked) {\n\t\t\t\tthrow new Error('Cannot acquire edit stack lock');\n\t\t\t}\n\t\t}\n\n\t\t// can acquire all locks\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\teditStack.locked = true;\n\t\t}\n\n\t\treturn () => {\n\t\t\t// release all locks\n\t\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\t\teditStack.locked = false;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _safeInvokeWithLocks(element: StackElement, invoke: () => Promise<void> | void, editStackSnapshot: EditStackSnapshot, cleanup: IDisposable, continuation: () => Promise<void> | void): Promise<void> | void {\n\t\tconst releaseLocks = this._acquireLocks(editStackSnapshot);\n\n\t\tlet result: Promise<void> | void;\n\t\ttry {\n\t\t\tresult = invoke();\n\t\t} catch (err) {\n\t\t\treleaseLocks();\n\t\t\tcleanup.dispose();\n\t\t\treturn this._onError(err, element);\n\t\t}\n\n\t\tif (result) {\n\t\t\t// result is Promise<void>\n\t\t\treturn result.then(\n\t\t\t\t() => {\n\t\t\t\t\treleaseLocks();\n\t\t\t\t\tcleanup.dispose();\n\t\t\t\t\treturn continuation();\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\treleaseLocks();\n\t\t\t\t\tcleanup.dispose();\n\t\t\t\t\treturn this._onError(err, element);\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\t// result is void\n\t\t\treleaseLocks();\n\t\t\tcleanup.dispose();\n\t\t\treturn continuation();\n\t\t}\n\t}\n\n\tprivate async _invokeWorkspacePrepare(element: WorkspaceStackElement): Promise<IDisposable> {\n\t\tif (typeof element.actual.prepareUndoRedo === 'undefined') {\n\t\t\treturn Disposable.None;\n\t\t}\n\t\tconst result = element.actual.prepareUndoRedo();\n\t\tif (typeof result === 'undefined') {\n\t\t\treturn Disposable.None;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _invokeResourcePrepare(element: ResourceStackElement, callback: (disposable: IDisposable) => Promise<void> | void): void | Promise<void> {\n\t\tif (element.actual.type !== UndoRedoElementType.Workspace || typeof element.actual.prepareUndoRedo === 'undefined') {\n\t\t\t// no preparation needed\n\t\t\treturn callback(Disposable.None);\n\t\t}\n\n\t\tconst r = element.actual.prepareUndoRedo();\n\t\tif (!r) {\n\t\t\t// nothing to clean up\n\t\t\treturn callback(Disposable.None);\n\t\t}\n\n\t\tif (isDisposable(r)) {\n\t\t\treturn callback(r);\n\t\t}\n\n\t\treturn r.then((disposable) => {\n\t\t\treturn callback(disposable);\n\t\t});\n\t}\n\n\tprivate _getAffectedEditStacks(element: WorkspaceStackElement): EditStackSnapshot {\n\t\tconst affectedEditStacks: ResourceEditStack[] = [];\n\t\tfor (const strResource of element.strResources) {\n\t\t\taffectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n\t\t}\n\t\treturn new EditStackSnapshot(affectedEditStacks);\n\t}\n\n\tprivate _tryToSplitAndUndo(strResource: string, element: WorkspaceStackElement, ignoreResources: RemovedResources | null, message: string): WorkspaceVerificationError {\n\t\tif (element.canSplit()) {\n\t\t\tthis._splitPastWorkspaceElement(element, ignoreResources);\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn new WorkspaceVerificationError(this._undo(strResource, 0, true));\n\t\t} else {\n\t\t\t// Cannot safely split this workspace element => flush all undo/redo stacks\n\t\t\tfor (const strResource of element.strResources) {\n\t\t\t\tthis.removeElements(strResource);\n\t\t\t}\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn new WorkspaceVerificationError();\n\t\t}\n\t}\n\n\tprivate _checkWorkspaceUndo(strResource: string, element: WorkspaceStackElement, editStackSnapshot: EditStackSnapshot, checkInvalidatedResources: boolean): WorkspaceVerificationError | null {\n\t\tif (element.removedResources) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\telement.removedResources,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] },\n\t\t\t\t\t\"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\tif (checkInvalidatedResources && element.invalidatedResources) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\telement.invalidatedResources,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] },\n\t\t\t\t\t\"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// this must be the last past element in all the impacted resources!\n\t\tconst cannotUndoDueToResources: string[] = [];\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.getClosestPastElement() !== element) {\n\t\t\t\tcannotUndoDueToResources.push(editStack.resourceLabel);\n\t\t\t}\n\t\t}\n\t\tif (cannotUndoDueToResources.length > 0) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] },\n\t\t\t\t\t\"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconst cannotLockDueToResources: string[] = [];\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.locked) {\n\t\t\t\tcannotLockDueToResources.push(editStack.resourceLabel);\n\t\t\t}\n\t\t}\n\t\tif (cannotLockDueToResources.length > 0) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] },\n\t\t\t\t\t\"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// check if new stack elements were added in the meantime...\n\t\tif (!editStackSnapshot.isValid()) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] },\n\t\t\t\t\t\"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _workspaceUndo(strResource: string, element: WorkspaceStackElement, undoConfirmed: boolean): Promise<void> | void {\n\t\tconst affectedEditStacks = this._getAffectedEditStacks(element);\n\t\tconst verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/false);\n\t\tif (verificationError) {\n\t\t\treturn verificationError.returnValue;\n\t\t}\n\t\treturn this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n\t}\n\n\tprivate _isPartOfUndoGroup(element: WorkspaceStackElement): boolean {\n\t\tif (!element.groupId) {\n\t\t\treturn false;\n\t\t}\n\t\t// check that there is at least another element with the same groupId ready to be undone\n\t\tfor (const [, editStack] of this._editStacks) {\n\t\t\tconst pastElement = editStack.getClosestPastElement();\n\t\t\tif (!pastElement) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (pastElement === element) {\n\t\t\t\tconst secondPastElement = editStack.getSecondClosestPastElement();\n\t\t\t\tif (secondPastElement && secondPastElement.groupId === element.groupId) {\n\t\t\t\t\t// there is another element with the same group id in the same stack!\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pastElement.groupId === element.groupId) {\n\t\t\t\t// there is another element with the same group id in another stack!\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async _confirmAndExecuteWorkspaceUndo(strResource: string, element: WorkspaceStackElement, editStackSnapshot: EditStackSnapshot, undoConfirmed: boolean): Promise<void> {\n\n\t\tif (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n\t\t\t// this element can be split\n\n\t\t\tenum UndoChoice {\n\t\t\t\tAll = 0,\n\t\t\t\tThis = 1,\n\t\t\t\tCancel = 2\n\t\t\t}\n\n\t\t\tconst { result } = await this._dialogService.prompt<UndoChoice>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage: nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1, && denotes a mnemonic'] }, \"&&Undo in {0} Files\", editStackSnapshot.editStacks.length),\n\t\t\t\t\t\trun: () => UndoChoice.All\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize({ key: 'nok', comment: ['&& denotes a mnemonic'] }, \"Undo this &&File\"),\n\t\t\t\t\t\trun: () => UndoChoice.This\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => UndoChoice.Cancel\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (result === UndoChoice.Cancel) {\n\t\t\t\t// choice: cancel\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (result === UndoChoice.This) {\n\t\t\t\t// choice: undo this file\n\t\t\t\tthis._splitPastWorkspaceElement(element, null);\n\t\t\t\treturn this._undo(strResource, 0, true);\n\t\t\t}\n\n\t\t\t// choice: undo in all files\n\n\t\t\t// At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n\t\t\tconst verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/false);\n\t\t\tif (verificationError1) {\n\t\t\t\treturn verificationError1.returnValue;\n\t\t\t}\n\n\t\t\tundoConfirmed = true;\n\t\t}\n\n\t\t// prepare\n\t\tlet cleanup: IDisposable;\n\t\ttry {\n\t\t\tcleanup = await this._invokeWorkspacePrepare(element);\n\t\t} catch (err) {\n\t\t\treturn this._onError(err, element);\n\t\t}\n\n\t\t// At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n\t\tconst verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/true);\n\t\tif (verificationError2) {\n\t\t\tcleanup.dispose();\n\t\t\treturn verificationError2.returnValue;\n\t\t}\n\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\teditStack.moveBackward(element);\n\t\t}\n\t\treturn this._safeInvokeWithLocks(element, () => element.actual.undo(), editStackSnapshot, cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n\t}\n\n\tprivate _resourceUndo(editStack: ResourceEditStack, element: ResourceStackElement, undoConfirmed: boolean): Promise<void> | void {\n\t\tif (!element.isValid) {\n\t\t\t// invalid element => immediately flush edit stack!\n\t\t\teditStack.flushAllElements();\n\t\t\treturn;\n\t\t}\n\t\tif (editStack.locked) {\n\t\t\tconst message = nls.localize(\n\t\t\t\t{ key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] },\n\t\t\t\t\"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label\n\t\t\t);\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn;\n\t\t}\n\t\treturn this._invokeResourcePrepare(element, (cleanup) => {\n\t\t\teditStack.moveBackward(element);\n\t\t\treturn this._safeInvokeWithLocks(element, () => element.actual.undo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n\t\t});\n\t}\n\n\tprivate _findClosestUndoElementInGroup(groupId: number): [StackElement | null, string | null] {\n\t\tif (!groupId) {\n\t\t\treturn [null, null];\n\t\t}\n\n\t\t// find another element with the same groupId and with the highest groupOrder ready to be undone\n\t\tlet matchedElement: StackElement | null = null;\n\t\tlet matchedStrResource: string | null = null;\n\n\t\tfor (const [strResource, editStack] of this._editStacks) {\n\t\t\tconst candidate = editStack.getClosestPastElement();\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidate.groupId === groupId) {\n\t\t\t\tif (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n\t\t\t\t\tmatchedElement = candidate;\n\t\t\t\t\tmatchedStrResource = strResource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [matchedElement, matchedStrResource];\n\t}\n\n\tprivate _continueUndoInGroup(groupId: number, undoConfirmed: boolean): Promise<void> | void {\n\t\tif (!groupId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, matchedStrResource] = this._findClosestUndoElementInGroup(groupId);\n\t\tif (matchedStrResource) {\n\t\t\treturn this._undo(matchedStrResource, 0, undoConfirmed);\n\t\t}\n\t}\n\n\tpublic undo(resourceOrSource: URI | UndoRedoSource): Promise<void> | void {\n\t\tif (resourceOrSource instanceof UndoRedoSource) {\n\t\t\tconst [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n\t\t\treturn matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n\t\t}\n\t\tif (typeof resourceOrSource === 'string') {\n\t\t\treturn this._undo(resourceOrSource, 0, false);\n\t\t}\n\t\treturn this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n\t}\n\n\tprivate _undo(strResource: string, sourceId: number = 0, undoConfirmed: boolean): Promise<void> | void {\n\t\tif (!this._editStacks.has(strResource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\tconst element = editStack.getClosestPastElement();\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.groupId) {\n\t\t\t// this element is a part of a group, we need to make sure undoing in a group is in order\n\t\t\tconst [matchedElement, matchedStrResource] = this._findClosestUndoElementInGroup(element.groupId);\n\t\t\tif (element !== matchedElement && matchedStrResource) {\n\t\t\t\t// there is an element in the same group that should be undone before this one\n\t\t\t\treturn this._undo(matchedStrResource, sourceId, undoConfirmed);\n\t\t\t}\n\t\t}\n\n\t\tconst shouldPromptForConfirmation = (element.sourceId !== sourceId || element.confirmBeforeUndo);\n\t\tif (shouldPromptForConfirmation && !undoConfirmed) {\n\t\t\t// Hit a different source or the element asks for prompt before undo, prompt for confirmation\n\t\t\treturn this._confirmAndContinueUndo(strResource, sourceId, element);\n\t\t}\n\n\t\ttry {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\treturn this._workspaceUndo(strResource, element, undoConfirmed);\n\t\t\t} else {\n\t\t\t\treturn this._resourceUndo(editStack, element, undoConfirmed);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (DEBUG) {\n\t\t\t\tthis._print('undo');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _confirmAndContinueUndo(strResource: string, sourceId: number, element: StackElement): Promise<void> {\n\t\tconst result = await this._dialogService.confirm({\n\t\t\tmessage: nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label),\n\t\t\tprimaryButton: nls.localize({ key: 'confirmDifferentSource.yes', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n\t\t\tcancelButton: nls.localize('confirmDifferentSource.no', \"No\")\n\t\t});\n\n\t\tif (!result.confirmed) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._undo(strResource, sourceId, true);\n\t}\n\n\tprivate _findClosestRedoElementWithSource(sourceId: number): [StackElement | null, string | null] {\n\t\tif (!sourceId) {\n\t\t\treturn [null, null];\n\t\t}\n\n\t\t// find an element with sourceId and with the lowest sourceOrder ready to be redone\n\t\tlet matchedElement: StackElement | null = null;\n\t\tlet matchedStrResource: string | null = null;\n\n\t\tfor (const [strResource, editStack] of this._editStacks) {\n\t\t\tconst candidate = editStack.getClosestFutureElement();\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidate.sourceId === sourceId) {\n\t\t\t\tif (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n\t\t\t\t\tmatchedElement = candidate;\n\t\t\t\t\tmatchedStrResource = strResource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [matchedElement, matchedStrResource];\n\t}\n\n\tpublic canRedo(resourceOrSource: URI | UndoRedoSource): boolean {\n\t\tif (resourceOrSource instanceof UndoRedoSource) {\n\t\t\tconst [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n\t\t\treturn matchedStrResource ? true : false;\n\t\t}\n\t\tconst strResource = this.getUriComparisonKey(resourceOrSource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.hasFutureElements();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _tryToSplitAndRedo(strResource: string, element: WorkspaceStackElement, ignoreResources: RemovedResources | null, message: string): WorkspaceVerificationError {\n\t\tif (element.canSplit()) {\n\t\t\tthis._splitFutureWorkspaceElement(element, ignoreResources);\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn new WorkspaceVerificationError(this._redo(strResource));\n\t\t} else {\n\t\t\t// Cannot safely split this workspace element => flush all undo/redo stacks\n\t\t\tfor (const strResource of element.strResources) {\n\t\t\t\tthis.removeElements(strResource);\n\t\t\t}\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn new WorkspaceVerificationError();\n\t\t}\n\t}\n\n\tprivate _checkWorkspaceRedo(strResource: string, element: WorkspaceStackElement, editStackSnapshot: EditStackSnapshot, checkInvalidatedResources: boolean): WorkspaceVerificationError | null {\n\t\tif (element.removedResources) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\telement.removedResources,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] },\n\t\t\t\t\t\"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\tif (checkInvalidatedResources && element.invalidatedResources) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\telement.invalidatedResources,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] },\n\t\t\t\t\t\"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// this must be the last future element in all the impacted resources!\n\t\tconst cannotRedoDueToResources: string[] = [];\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.getClosestFutureElement() !== element) {\n\t\t\t\tcannotRedoDueToResources.push(editStack.resourceLabel);\n\t\t\t}\n\t\t}\n\t\tif (cannotRedoDueToResources.length > 0) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] },\n\t\t\t\t\t\"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconst cannotLockDueToResources: string[] = [];\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.locked) {\n\t\t\t\tcannotLockDueToResources.push(editStack.resourceLabel);\n\t\t\t}\n\t\t}\n\t\tif (cannotLockDueToResources.length > 0) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] },\n\t\t\t\t\t\"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// check if new stack elements were added in the meantime...\n\t\tif (!editStackSnapshot.isValid()) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] },\n\t\t\t\t\t\"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _workspaceRedo(strResource: string, element: WorkspaceStackElement): Promise<void> | void {\n\t\tconst affectedEditStacks = this._getAffectedEditStacks(element);\n\t\tconst verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/false);\n\t\tif (verificationError) {\n\t\t\treturn verificationError.returnValue;\n\t\t}\n\t\treturn this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n\t}\n\n\tprivate async _executeWorkspaceRedo(strResource: string, element: WorkspaceStackElement, editStackSnapshot: EditStackSnapshot): Promise<void> {\n\t\t// prepare\n\t\tlet cleanup: IDisposable;\n\t\ttry {\n\t\t\tcleanup = await this._invokeWorkspacePrepare(element);\n\t\t} catch (err) {\n\t\t\treturn this._onError(err, element);\n\t\t}\n\n\t\t// At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n\t\tconst verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/true);\n\t\tif (verificationError) {\n\t\t\tcleanup.dispose();\n\t\t\treturn verificationError.returnValue;\n\t\t}\n\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\teditStack.moveForward(element);\n\t\t}\n\t\treturn this._safeInvokeWithLocks(element, () => element.actual.redo(), editStackSnapshot, cleanup, () => this._continueRedoInGroup(element.groupId));\n\t}\n\n\tprivate _resourceRedo(editStack: ResourceEditStack, element: ResourceStackElement): Promise<void> | void {\n\t\tif (!element.isValid) {\n\t\t\t// invalid element => immediately flush edit stack!\n\t\t\teditStack.flushAllElements();\n\t\t\treturn;\n\t\t}\n\t\tif (editStack.locked) {\n\t\t\tconst message = nls.localize(\n\t\t\t\t{ key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] },\n\t\t\t\t\"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label\n\t\t\t);\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._invokeResourcePrepare(element, (cleanup) => {\n\t\t\teditStack.moveForward(element);\n\t\t\treturn this._safeInvokeWithLocks(element, () => element.actual.redo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueRedoInGroup(element.groupId));\n\t\t});\n\t}\n\n\tprivate _findClosestRedoElementInGroup(groupId: number): [StackElement | null, string | null] {\n\t\tif (!groupId) {\n\t\t\treturn [null, null];\n\t\t}\n\n\t\t// find another element with the same groupId and with the lowest groupOrder ready to be redone\n\t\tlet matchedElement: StackElement | null = null;\n\t\tlet matchedStrResource: string | null = null;\n\n\t\tfor (const [strResource, editStack] of this._editStacks) {\n\t\t\tconst candidate = editStack.getClosestFutureElement();\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidate.groupId === groupId) {\n\t\t\t\tif (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n\t\t\t\t\tmatchedElement = candidate;\n\t\t\t\t\tmatchedStrResource = strResource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [matchedElement, matchedStrResource];\n\t}\n\n\tprivate _continueRedoInGroup(groupId: number): Promise<void> | void {\n\t\tif (!groupId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, matchedStrResource] = this._findClosestRedoElementInGroup(groupId);\n\t\tif (matchedStrResource) {\n\t\t\treturn this._redo(matchedStrResource);\n\t\t}\n\t}\n\n\tpublic redo(resourceOrSource: URI | UndoRedoSource | string): Promise<void> | void {\n\t\tif (resourceOrSource instanceof UndoRedoSource) {\n\t\t\tconst [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n\t\t\treturn matchedStrResource ? this._redo(matchedStrResource) : undefined;\n\t\t}\n\t\tif (typeof resourceOrSource === 'string') {\n\t\t\treturn this._redo(resourceOrSource);\n\t\t}\n\t\treturn this._redo(this.getUriComparisonKey(resourceOrSource));\n\t}\n\n\tprivate _redo(strResource: string): Promise<void> | void {\n\t\tif (!this._editStacks.has(strResource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\tconst element = editStack.getClosestFutureElement();\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.groupId) {\n\t\t\t// this element is a part of a group, we need to make sure redoing in a group is in order\n\t\t\tconst [matchedElement, matchedStrResource] = this._findClosestRedoElementInGroup(element.groupId);\n\t\t\tif (element !== matchedElement && matchedStrResource) {\n\t\t\t\t// there is an element in the same group that should be redone before this one\n\t\t\t\treturn this._redo(matchedStrResource);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\treturn this._workspaceRedo(strResource, element);\n\t\t\t} else {\n\t\t\t\treturn this._resourceRedo(editStack, element);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (DEBUG) {\n\t\t\t\tthis._print('redo');\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass WorkspaceVerificationError {\n\tconstructor(public readonly returnValue: Promise<void> | void) { }\n}\n\nregisterSingleton(IUndoRedoService, UndoRedoService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["RemovedResourceReason", "strResource", "UndoChoice"]
}
