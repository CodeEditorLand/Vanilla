{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/undoRedo/common/undoRedoService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from \"../../../base/common/errors.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tisDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport Severity from \"../../../base/common/severity.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport * as nls from \"../../../nls.js\";\nimport { IDialogService } from \"../../dialogs/common/dialogs.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../instantiation/common/extensions.js\";\nimport { INotificationService } from \"../../notification/common/notification.js\";\nimport {\n\ttype IPastFutureElements,\n\ttype IResourceUndoRedoElement,\n\ttype IUndoRedoElement,\n\tIUndoRedoService,\n\ttype IWorkspaceUndoRedoElement,\n\tResourceEditStackSnapshot,\n\tUndoRedoElementType,\n\tUndoRedoGroup,\n\tUndoRedoSource,\n\ttype UriComparisonKeyComputer,\n} from \"./undoRedo.js\";\n\nconst DEBUG = false;\n\nfunction getResourceLabel(resource: URI): string {\n\treturn resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\n\nlet stackElementCounter = 0;\n\nclass ResourceStackElement {\n\tpublic readonly id = ++stackElementCounter;\n\tpublic readonly type = UndoRedoElementType.Resource;\n\tpublic readonly actual: IUndoRedoElement;\n\tpublic readonly label: string;\n\tpublic readonly confirmBeforeUndo: boolean;\n\n\tpublic readonly resourceLabel: string;\n\tpublic readonly strResource: string;\n\tpublic readonly resourceLabels: string[];\n\tpublic readonly strResources: string[];\n\tpublic readonly groupId: number;\n\tpublic readonly groupOrder: number;\n\tpublic readonly sourceId: number;\n\tpublic readonly sourceOrder: number;\n\tpublic isValid: boolean;\n\n\tconstructor(\n\t\tactual: IUndoRedoElement,\n\t\tresourceLabel: string,\n\t\tstrResource: string,\n\t\tgroupId: number,\n\t\tgroupOrder: number,\n\t\tsourceId: number,\n\t\tsourceOrder: number,\n\t) {\n\t\tthis.actual = actual;\n\t\tthis.label = actual.label;\n\t\tthis.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n\t\tthis.resourceLabel = resourceLabel;\n\t\tthis.strResource = strResource;\n\t\tthis.resourceLabels = [this.resourceLabel];\n\t\tthis.strResources = [this.strResource];\n\t\tthis.groupId = groupId;\n\t\tthis.groupOrder = groupOrder;\n\t\tthis.sourceId = sourceId;\n\t\tthis.sourceOrder = sourceOrder;\n\t\tthis.isValid = true;\n\t}\n\n\tpublic setValid(isValid: boolean): void {\n\t\tthis.isValid = isValid;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? \"  VALID\" : \"INVALID\"}] ${this.actual.constructor.name} - ${this.actual}`;\n\t}\n}\n\nenum RemovedResourceReason {\n\tExternalRemoval = 0,\n\tNoParallelUniverses = 1,\n}\n\nclass ResourceReasonPair {\n\tconstructor(\n\t\tpublic readonly resourceLabel: string,\n\t\tpublic readonly reason: RemovedResourceReason,\n\t) {}\n}\n\nclass RemovedResources {\n\tprivate readonly elements = new Map<string, ResourceReasonPair>();\n\n\tpublic createMessage(): string {\n\t\tconst externalRemoval: string[] = [];\n\t\tconst noParallelUniverses: string[] = [];\n\t\tfor (const [, element] of this.elements) {\n\t\t\tconst dest =\n\t\t\t\telement.reason === RemovedResourceReason.ExternalRemoval\n\t\t\t\t\t? externalRemoval\n\t\t\t\t\t: noParallelUniverses;\n\t\t\tdest.push(element.resourceLabel);\n\t\t}\n\n\t\tconst messages: string[] = [];\n\t\tif (externalRemoval.length > 0) {\n\t\t\tmessages.push(\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"externalRemoval\",\n\t\t\t\t\t\tcomment: [\"{0} is a list of filenames\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"The following files have been closed and modified on disk: {0}.\",\n\t\t\t\t\texternalRemoval.join(\", \"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (noParallelUniverses.length > 0) {\n\t\t\tmessages.push(\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"noParallelUniverses\",\n\t\t\t\t\t\tcomment: [\"{0} is a list of filenames\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"The following files have been modified in an incompatible way: {0}.\",\n\t\t\t\t\tnoParallelUniverses.join(\", \"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn messages.join(\"\\n\");\n\t}\n\n\tpublic get size(): number {\n\t\treturn this.elements.size;\n\t}\n\n\tpublic has(strResource: string): boolean {\n\t\treturn this.elements.has(strResource);\n\t}\n\n\tpublic set(strResource: string, value: ResourceReasonPair): void {\n\t\tthis.elements.set(strResource, value);\n\t}\n\n\tpublic delete(strResource: string): boolean {\n\t\treturn this.elements.delete(strResource);\n\t}\n}\n\nclass WorkspaceStackElement {\n\tpublic readonly id = ++stackElementCounter;\n\tpublic readonly type = UndoRedoElementType.Workspace;\n\tpublic readonly actual: IWorkspaceUndoRedoElement;\n\tpublic readonly label: string;\n\tpublic readonly confirmBeforeUndo: boolean;\n\n\tpublic readonly resourceLabels: string[];\n\tpublic readonly strResources: string[];\n\tpublic readonly groupId: number;\n\tpublic readonly groupOrder: number;\n\tpublic readonly sourceId: number;\n\tpublic readonly sourceOrder: number;\n\tpublic removedResources: RemovedResources | null;\n\tpublic invalidatedResources: RemovedResources | null;\n\n\tconstructor(\n\t\tactual: IWorkspaceUndoRedoElement,\n\t\tresourceLabels: string[],\n\t\tstrResources: string[],\n\t\tgroupId: number,\n\t\tgroupOrder: number,\n\t\tsourceId: number,\n\t\tsourceOrder: number,\n\t) {\n\t\tthis.actual = actual;\n\t\tthis.label = actual.label;\n\t\tthis.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n\t\tthis.resourceLabels = resourceLabels;\n\t\tthis.strResources = strResources;\n\t\tthis.groupId = groupId;\n\t\tthis.groupOrder = groupOrder;\n\t\tthis.sourceId = sourceId;\n\t\tthis.sourceOrder = sourceOrder;\n\t\tthis.removedResources = null;\n\t\tthis.invalidatedResources = null;\n\t}\n\n\tpublic canSplit(): this is WorkspaceStackElement & {\n\t\tactual: { split(): IResourceUndoRedoElement[] };\n\t} {\n\t\treturn typeof this.actual.split === \"function\";\n\t}\n\n\tpublic removeResource(\n\t\tresourceLabel: string,\n\t\tstrResource: string,\n\t\treason: RemovedResourceReason,\n\t): void {\n\t\tif (!this.removedResources) {\n\t\t\tthis.removedResources = new RemovedResources();\n\t\t}\n\t\tif (!this.removedResources.has(strResource)) {\n\t\t\tthis.removedResources.set(\n\t\t\t\tstrResource,\n\t\t\t\tnew ResourceReasonPair(resourceLabel, reason),\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic setValid(\n\t\tresourceLabel: string,\n\t\tstrResource: string,\n\t\tisValid: boolean,\n\t): void {\n\t\tif (isValid) {\n\t\t\tif (this.invalidatedResources) {\n\t\t\t\tthis.invalidatedResources.delete(strResource);\n\t\t\t\tif (this.invalidatedResources.size === 0) {\n\t\t\t\t\tthis.invalidatedResources = null;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this.invalidatedResources) {\n\t\t\t\tthis.invalidatedResources = new RemovedResources();\n\t\t\t}\n\t\t\tif (!this.invalidatedResources.has(strResource)) {\n\t\t\t\tthis.invalidatedResources.set(\n\t\t\t\t\tstrResource,\n\t\t\t\t\tnew ResourceReasonPair(\n\t\t\t\t\t\tresourceLabel,\n\t\t\t\t\t\tRemovedResourceReason.ExternalRemoval,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toString(): string {\n\t\treturn `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? \"INVALID\" : \"  VALID\"}] ${this.actual.constructor.name} - ${this.actual}`;\n\t}\n}\n\ntype StackElement = ResourceStackElement | WorkspaceStackElement;\n\nclass ResourceEditStack {\n\tpublic readonly resourceLabel: string;\n\tprivate readonly strResource: string;\n\tprivate _past: StackElement[];\n\tprivate _future: StackElement[];\n\tpublic locked: boolean;\n\tpublic versionId: number;\n\n\tconstructor(resourceLabel: string, strResource: string) {\n\t\tthis.resourceLabel = resourceLabel;\n\t\tthis.strResource = strResource;\n\t\tthis._past = [];\n\t\tthis._future = [];\n\t\tthis.locked = false;\n\t\tthis.versionId = 1;\n\t}\n\n\tpublic dispose(): void {\n\t\tfor (const element of this._past) {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.removeResource(\n\t\t\t\t\tthis.resourceLabel,\n\t\t\t\t\tthis.strResource,\n\t\t\t\t\tRemovedResourceReason.ExternalRemoval,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tfor (const element of this._future) {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.removeResource(\n\t\t\t\t\tthis.resourceLabel,\n\t\t\t\t\tthis.strResource,\n\t\t\t\t\tRemovedResourceReason.ExternalRemoval,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis.versionId++;\n\t}\n\n\tpublic toString(): string {\n\t\tconst result: string[] = [];\n\t\tresult.push(`* ${this.strResource}:`);\n\t\tfor (let i = 0; i < this._past.length; i++) {\n\t\t\tresult.push(`   * [UNDO] ${this._past[i]}`);\n\t\t}\n\t\tfor (let i = this._future.length - 1; i >= 0; i--) {\n\t\t\tresult.push(`   * [REDO] ${this._future[i]}`);\n\t\t}\n\t\treturn result.join(\"\\n\");\n\t}\n\n\tpublic flushAllElements(): void {\n\t\tthis._past = [];\n\t\tthis._future = [];\n\t\tthis.versionId++;\n\t}\n\n\tpublic setElementsIsValid(isValid: boolean): void {\n\t\tfor (const element of this._past) {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.setValid(this.resourceLabel, this.strResource, isValid);\n\t\t\t} else {\n\t\t\t\telement.setValid(isValid);\n\t\t\t}\n\t\t}\n\t\tfor (const element of this._future) {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.setValid(this.resourceLabel, this.strResource, isValid);\n\t\t\t} else {\n\t\t\t\telement.setValid(isValid);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _setElementValidFlag(\n\t\telement: StackElement,\n\t\tisValid: boolean,\n\t): void {\n\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\telement.setValid(this.resourceLabel, this.strResource, isValid);\n\t\t} else {\n\t\t\telement.setValid(isValid);\n\t\t}\n\t}\n\n\tpublic setElementsValidFlag(\n\t\tisValid: boolean,\n\t\tfilter: (element: IUndoRedoElement) => boolean,\n\t): void {\n\t\tfor (const element of this._past) {\n\t\t\tif (filter(element.actual)) {\n\t\t\t\tthis._setElementValidFlag(element, isValid);\n\t\t\t}\n\t\t}\n\t\tfor (const element of this._future) {\n\t\t\tif (filter(element.actual)) {\n\t\t\t\tthis._setElementValidFlag(element, isValid);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic pushElement(element: StackElement): void {\n\t\t// remove the future\n\t\tfor (const futureElement of this._future) {\n\t\t\tif (futureElement.type === UndoRedoElementType.Workspace) {\n\t\t\t\tfutureElement.removeResource(\n\t\t\t\t\tthis.resourceLabel,\n\t\t\t\t\tthis.strResource,\n\t\t\t\t\tRemovedResourceReason.NoParallelUniverses,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._future = [];\n\t\tthis._past.push(element);\n\t\tthis.versionId++;\n\t}\n\n\tpublic createSnapshot(resource: URI): ResourceEditStackSnapshot {\n\t\tconst elements: number[] = [];\n\n\t\tfor (let i = 0, len = this._past.length; i < len; i++) {\n\t\t\telements.push(this._past[i].id);\n\t\t}\n\t\tfor (let i = this._future.length - 1; i >= 0; i--) {\n\t\t\telements.push(this._future[i].id);\n\t\t}\n\n\t\treturn new ResourceEditStackSnapshot(resource, elements);\n\t}\n\n\tpublic restoreSnapshot(snapshot: ResourceEditStackSnapshot): void {\n\t\tconst snapshotLength = snapshot.elements.length;\n\t\tlet isOK = true;\n\t\tlet snapshotIndex = 0;\n\t\tlet removePastAfter = -1;\n\t\tfor (\n\t\t\tlet i = 0, len = this._past.length;\n\t\t\ti < len;\n\t\t\ti++, snapshotIndex++\n\t\t) {\n\t\t\tconst element = this._past[i];\n\t\t\tif (\n\t\t\t\tisOK &&\n\t\t\t\t(snapshotIndex >= snapshotLength ||\n\t\t\t\t\telement.id !== snapshot.elements[snapshotIndex])\n\t\t\t) {\n\t\t\t\tisOK = false;\n\t\t\t\tremovePastAfter = 0;\n\t\t\t}\n\t\t\tif (!isOK && element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.removeResource(\n\t\t\t\t\tthis.resourceLabel,\n\t\t\t\t\tthis.strResource,\n\t\t\t\t\tRemovedResourceReason.ExternalRemoval,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tlet removeFutureBefore = -1;\n\t\tfor (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n\t\t\tconst element = this._future[i];\n\t\t\tif (\n\t\t\t\tisOK &&\n\t\t\t\t(snapshotIndex >= snapshotLength ||\n\t\t\t\t\telement.id !== snapshot.elements[snapshotIndex])\n\t\t\t) {\n\t\t\t\tisOK = false;\n\t\t\t\tremoveFutureBefore = i;\n\t\t\t}\n\t\t\tif (!isOK && element.type === UndoRedoElementType.Workspace) {\n\t\t\t\telement.removeResource(\n\t\t\t\t\tthis.resourceLabel,\n\t\t\t\t\tthis.strResource,\n\t\t\t\t\tRemovedResourceReason.ExternalRemoval,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (removePastAfter !== -1) {\n\t\t\tthis._past = this._past.slice(0, removePastAfter);\n\t\t}\n\t\tif (removeFutureBefore !== -1) {\n\t\t\tthis._future = this._future.slice(removeFutureBefore + 1);\n\t\t}\n\t\tthis.versionId++;\n\t}\n\n\tpublic getElements(): IPastFutureElements {\n\t\tconst past: IUndoRedoElement[] = [];\n\t\tconst future: IUndoRedoElement[] = [];\n\n\t\tfor (const element of this._past) {\n\t\t\tpast.push(element.actual);\n\t\t}\n\t\tfor (const element of this._future) {\n\t\t\tfuture.push(element.actual);\n\t\t}\n\n\t\treturn { past, future };\n\t}\n\n\tpublic getClosestPastElement(): StackElement | null {\n\t\tif (this._past.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._past[this._past.length - 1];\n\t}\n\n\tpublic getSecondClosestPastElement(): StackElement | null {\n\t\tif (this._past.length < 2) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._past[this._past.length - 2];\n\t}\n\n\tpublic getClosestFutureElement(): StackElement | null {\n\t\tif (this._future.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._future[this._future.length - 1];\n\t}\n\n\tpublic hasPastElements(): boolean {\n\t\treturn this._past.length > 0;\n\t}\n\n\tpublic hasFutureElements(): boolean {\n\t\treturn this._future.length > 0;\n\t}\n\n\tpublic splitPastWorkspaceElement(\n\t\ttoRemove: WorkspaceStackElement,\n\t\tindividualMap: Map<string, ResourceStackElement>,\n\t): void {\n\t\tfor (let j = this._past.length - 1; j >= 0; j--) {\n\t\t\tif (this._past[j] === toRemove) {\n\t\t\t\tif (individualMap.has(this.strResource)) {\n\t\t\t\t\t// gets replaced\n\t\t\t\t\tthis._past[j] = individualMap.get(this.strResource)!;\n\t\t\t\t} else {\n\t\t\t\t\t// gets deleted\n\t\t\t\t\tthis._past.splice(j, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.versionId++;\n\t}\n\n\tpublic splitFutureWorkspaceElement(\n\t\ttoRemove: WorkspaceStackElement,\n\t\tindividualMap: Map<string, ResourceStackElement>,\n\t): void {\n\t\tfor (let j = this._future.length - 1; j >= 0; j--) {\n\t\t\tif (this._future[j] === toRemove) {\n\t\t\t\tif (individualMap.has(this.strResource)) {\n\t\t\t\t\t// gets replaced\n\t\t\t\t\tthis._future[j] = individualMap.get(this.strResource)!;\n\t\t\t\t} else {\n\t\t\t\t\t// gets deleted\n\t\t\t\t\tthis._future.splice(j, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.versionId++;\n\t}\n\n\tpublic moveBackward(element: StackElement): void {\n\t\tthis._past.pop();\n\t\tthis._future.push(element);\n\t\tthis.versionId++;\n\t}\n\n\tpublic moveForward(element: StackElement): void {\n\t\tthis._future.pop();\n\t\tthis._past.push(element);\n\t\tthis.versionId++;\n\t}\n}\n\nclass EditStackSnapshot {\n\tpublic readonly editStacks: ResourceEditStack[];\n\tprivate readonly _versionIds: number[];\n\n\tconstructor(editStacks: ResourceEditStack[]) {\n\t\tthis.editStacks = editStacks;\n\t\tthis._versionIds = [];\n\t\tfor (let i = 0, len = this.editStacks.length; i < len; i++) {\n\t\t\tthis._versionIds[i] = this.editStacks[i].versionId;\n\t\t}\n\t}\n\n\tpublic isValid(): boolean {\n\t\tfor (let i = 0, len = this.editStacks.length; i < len; i++) {\n\t\t\tif (this._versionIds[i] !== this.editStacks[i].versionId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nconst missingEditStack = new ResourceEditStack(\"\", \"\");\nmissingEditStack.locked = true;\n\nexport class UndoRedoService implements IUndoRedoService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _editStacks: Map<string, ResourceEditStack>;\n\tprivate readonly _uriComparisonKeyComputers: [\n\t\tstring,\n\t\tUriComparisonKeyComputer,\n\t][];\n\n\tconstructor(\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t) {\n\t\tthis._editStacks = new Map<string, ResourceEditStack>();\n\t\tthis._uriComparisonKeyComputers = [];\n\t}\n\n\tpublic registerUriComparisonKeyComputer(\n\t\tscheme: string,\n\t\turiComparisonKeyComputer: UriComparisonKeyComputer,\n\t): IDisposable {\n\t\tthis._uriComparisonKeyComputers.push([\n\t\t\tscheme,\n\t\t\turiComparisonKeyComputer,\n\t\t]);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (\n\t\t\t\t\tlet i = 0, len = this._uriComparisonKeyComputers.length;\n\t\t\t\t\ti < len;\n\t\t\t\t\ti++\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._uriComparisonKeyComputers[i][1] ===\n\t\t\t\t\t\turiComparisonKeyComputer\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._uriComparisonKeyComputers.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic getUriComparisonKey(resource: URI): string {\n\t\tfor (const uriComparisonKeyComputer of this\n\t\t\t._uriComparisonKeyComputers) {\n\t\t\tif (uriComparisonKeyComputer[0] === resource.scheme) {\n\t\t\t\treturn uriComparisonKeyComputer[1].getComparisonKey(resource);\n\t\t\t}\n\t\t}\n\t\treturn resource.toString();\n\t}\n\n\tprivate _print(label: string): void {\n\t\tconsole.log(`------------------------------------`);\n\t\tconsole.log(`AFTER ${label}: `);\n\t\tconst str: string[] = [];\n\t\tfor (const element of this._editStacks) {\n\t\t\tstr.push(element[1].toString());\n\t\t}\n\t\tconsole.log(str.join(\"\\n\"));\n\t}\n\n\tpublic pushElement(\n\t\telement: IUndoRedoElement,\n\t\tgroup: UndoRedoGroup = UndoRedoGroup.None,\n\t\tsource: UndoRedoSource = UndoRedoSource.None,\n\t): void {\n\t\tif (element.type === UndoRedoElementType.Resource) {\n\t\t\tconst resourceLabel = getResourceLabel(element.resource);\n\t\t\tconst strResource = this.getUriComparisonKey(element.resource);\n\t\t\tthis._pushElement(\n\t\t\t\tnew ResourceStackElement(\n\t\t\t\t\telement,\n\t\t\t\t\tresourceLabel,\n\t\t\t\t\tstrResource,\n\t\t\t\t\tgroup.id,\n\t\t\t\t\tgroup.nextOrder(),\n\t\t\t\t\tsource.id,\n\t\t\t\t\tsource.nextOrder(),\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tconst seen = new Set<string>();\n\t\t\tconst resourceLabels: string[] = [];\n\t\t\tconst strResources: string[] = [];\n\t\t\tfor (const resource of element.resources) {\n\t\t\t\tconst resourceLabel = getResourceLabel(resource);\n\t\t\t\tconst strResource = this.getUriComparisonKey(resource);\n\n\t\t\t\tif (seen.has(strResource)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tseen.add(strResource);\n\t\t\t\tresourceLabels.push(resourceLabel);\n\t\t\t\tstrResources.push(strResource);\n\t\t\t}\n\n\t\t\tif (resourceLabels.length === 1) {\n\t\t\t\tthis._pushElement(\n\t\t\t\t\tnew ResourceStackElement(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\tresourceLabels[0],\n\t\t\t\t\t\tstrResources[0],\n\t\t\t\t\t\tgroup.id,\n\t\t\t\t\t\tgroup.nextOrder(),\n\t\t\t\t\t\tsource.id,\n\t\t\t\t\t\tsource.nextOrder(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._pushElement(\n\t\t\t\t\tnew WorkspaceStackElement(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\tresourceLabels,\n\t\t\t\t\t\tstrResources,\n\t\t\t\t\t\tgroup.id,\n\t\t\t\t\t\tgroup.nextOrder(),\n\t\t\t\t\t\tsource.id,\n\t\t\t\t\t\tsource.nextOrder(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (DEBUG) {\n\t\t\tthis._print(\"pushElement\");\n\t\t}\n\t}\n\n\tprivate _pushElement(element: StackElement): void {\n\t\tfor (let i = 0, len = element.strResources.length; i < len; i++) {\n\t\t\tconst resourceLabel = element.resourceLabels[i];\n\t\t\tconst strResource = element.strResources[i];\n\n\t\t\tlet editStack: ResourceEditStack;\n\t\t\tif (this._editStacks.has(strResource)) {\n\t\t\t\teditStack = this._editStacks.get(strResource)!;\n\t\t\t} else {\n\t\t\t\teditStack = new ResourceEditStack(resourceLabel, strResource);\n\t\t\t\tthis._editStacks.set(strResource, editStack);\n\t\t\t}\n\n\t\t\teditStack.pushElement(element);\n\t\t}\n\t}\n\n\tpublic getLastElement(resource: URI): IUndoRedoElement | null {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\tif (editStack.hasFutureElements()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst closestPastElement = editStack.getClosestPastElement();\n\t\t\treturn closestPastElement ? closestPastElement.actual : null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate _splitPastWorkspaceElement(\n\t\ttoRemove: WorkspaceStackElement & {\n\t\t\tactual: { split(): IResourceUndoRedoElement[] };\n\t\t},\n\t\tignoreResources: RemovedResources | null,\n\t): void {\n\t\tconst individualArr = toRemove.actual.split();\n\t\tconst individualMap = new Map<string, ResourceStackElement>();\n\t\tfor (const _element of individualArr) {\n\t\t\tconst resourceLabel = getResourceLabel(_element.resource);\n\t\t\tconst strResource = this.getUriComparisonKey(_element.resource);\n\t\t\tconst element = new ResourceStackElement(\n\t\t\t\t_element,\n\t\t\t\tresourceLabel,\n\t\t\t\tstrResource,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t);\n\t\t\tindividualMap.set(element.strResource, element);\n\t\t}\n\n\t\tfor (const strResource of toRemove.strResources) {\n\t\t\tif (ignoreResources && ignoreResources.has(strResource)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.splitPastWorkspaceElement(toRemove, individualMap);\n\t\t}\n\t}\n\n\tprivate _splitFutureWorkspaceElement(\n\t\ttoRemove: WorkspaceStackElement & {\n\t\t\tactual: { split(): IResourceUndoRedoElement[] };\n\t\t},\n\t\tignoreResources: RemovedResources | null,\n\t): void {\n\t\tconst individualArr = toRemove.actual.split();\n\t\tconst individualMap = new Map<string, ResourceStackElement>();\n\t\tfor (const _element of individualArr) {\n\t\t\tconst resourceLabel = getResourceLabel(_element.resource);\n\t\t\tconst strResource = this.getUriComparisonKey(_element.resource);\n\t\t\tconst element = new ResourceStackElement(\n\t\t\t\t_element,\n\t\t\t\tresourceLabel,\n\t\t\t\tstrResource,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t);\n\t\t\tindividualMap.set(element.strResource, element);\n\t\t}\n\n\t\tfor (const strResource of toRemove.strResources) {\n\t\t\tif (ignoreResources && ignoreResources.has(strResource)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.splitFutureWorkspaceElement(toRemove, individualMap);\n\t\t}\n\t}\n\n\tpublic removeElements(resource: URI | string): void {\n\t\tconst strResource =\n\t\t\ttypeof resource === \"string\"\n\t\t\t\t? resource\n\t\t\t\t: this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.dispose();\n\t\t\tthis._editStacks.delete(strResource);\n\t\t}\n\t\tif (DEBUG) {\n\t\t\tthis._print(\"removeElements\");\n\t\t}\n\t}\n\n\tpublic setElementsValidFlag(\n\t\tresource: URI,\n\t\tisValid: boolean,\n\t\tfilter: (element: IUndoRedoElement) => boolean,\n\t): void {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.setElementsValidFlag(isValid, filter);\n\t\t}\n\t\tif (DEBUG) {\n\t\t\tthis._print(\"setElementsValidFlag\");\n\t\t}\n\t}\n\n\tpublic hasElements(resource: URI): boolean {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.hasPastElements() || editStack.hasFutureElements();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic createSnapshot(resource: URI): ResourceEditStackSnapshot {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.createSnapshot(resource);\n\t\t}\n\t\treturn new ResourceEditStackSnapshot(resource, []);\n\t}\n\n\tpublic restoreSnapshot(snapshot: ResourceEditStackSnapshot): void {\n\t\tconst strResource = this.getUriComparisonKey(snapshot.resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\teditStack.restoreSnapshot(snapshot);\n\n\t\t\tif (\n\t\t\t\t!editStack.hasPastElements() &&\n\t\t\t\t!editStack.hasFutureElements()\n\t\t\t) {\n\t\t\t\t// the edit stack is now empty, just remove it entirely\n\t\t\t\teditStack.dispose();\n\t\t\t\tthis._editStacks.delete(strResource);\n\t\t\t}\n\t\t}\n\t\tif (DEBUG) {\n\t\t\tthis._print(\"restoreSnapshot\");\n\t\t}\n\t}\n\n\tpublic getElements(resource: URI): IPastFutureElements {\n\t\tconst strResource = this.getUriComparisonKey(resource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.getElements();\n\t\t}\n\t\treturn { past: [], future: [] };\n\t}\n\n\tprivate _findClosestUndoElementWithSource(\n\t\tsourceId: number,\n\t): [StackElement | null, string | null] {\n\t\tif (!sourceId) {\n\t\t\treturn [null, null];\n\t\t}\n\n\t\t// find an element with the sourceId and with the highest sourceOrder ready to be undone\n\t\tlet matchedElement: StackElement | null = null;\n\t\tlet matchedStrResource: string | null = null;\n\n\t\tfor (const [strResource, editStack] of this._editStacks) {\n\t\t\tconst candidate = editStack.getClosestPastElement();\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidate.sourceId === sourceId) {\n\t\t\t\tif (\n\t\t\t\t\t!matchedElement ||\n\t\t\t\t\tcandidate.sourceOrder > matchedElement.sourceOrder\n\t\t\t\t) {\n\t\t\t\t\tmatchedElement = candidate;\n\t\t\t\t\tmatchedStrResource = strResource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [matchedElement, matchedStrResource];\n\t}\n\n\tpublic canUndo(resourceOrSource: URI | UndoRedoSource): boolean {\n\t\tif (resourceOrSource instanceof UndoRedoSource) {\n\t\t\tconst [, matchedStrResource] =\n\t\t\t\tthis._findClosestUndoElementWithSource(resourceOrSource.id);\n\t\t\treturn matchedStrResource ? true : false;\n\t\t}\n\t\tconst strResource = this.getUriComparisonKey(resourceOrSource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.hasPastElements();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _onError(err: Error, element: StackElement): void {\n\t\tonUnexpectedError(err);\n\t\t// An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n\t\tfor (const strResource of element.strResources) {\n\t\t\tthis.removeElements(strResource);\n\t\t}\n\t\tthis._notificationService.error(err);\n\t}\n\n\tprivate _acquireLocks(editStackSnapshot: EditStackSnapshot): () => void {\n\t\t// first, check if all locks can be acquired\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.locked) {\n\t\t\t\tthrow new Error(\"Cannot acquire edit stack lock\");\n\t\t\t}\n\t\t}\n\n\t\t// can acquire all locks\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\teditStack.locked = true;\n\t\t}\n\n\t\treturn () => {\n\t\t\t// release all locks\n\t\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\t\teditStack.locked = false;\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _safeInvokeWithLocks(\n\t\telement: StackElement,\n\t\tinvoke: () => Promise<void> | void,\n\t\teditStackSnapshot: EditStackSnapshot,\n\t\tcleanup: IDisposable,\n\t\tcontinuation: () => Promise<void> | void,\n\t): Promise<void> | void {\n\t\tconst releaseLocks = this._acquireLocks(editStackSnapshot);\n\n\t\tlet result: Promise<void> | void;\n\t\ttry {\n\t\t\tresult = invoke();\n\t\t} catch (err) {\n\t\t\treleaseLocks();\n\t\t\tcleanup.dispose();\n\t\t\treturn this._onError(err, element);\n\t\t}\n\n\t\tif (result) {\n\t\t\t// result is Promise<void>\n\t\t\treturn result.then(\n\t\t\t\t() => {\n\t\t\t\t\treleaseLocks();\n\t\t\t\t\tcleanup.dispose();\n\t\t\t\t\treturn continuation();\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\treleaseLocks();\n\t\t\t\t\tcleanup.dispose();\n\t\t\t\t\treturn this._onError(err, element);\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\t// result is void\n\t\t\treleaseLocks();\n\t\t\tcleanup.dispose();\n\t\t\treturn continuation();\n\t\t}\n\t}\n\n\tprivate async _invokeWorkspacePrepare(\n\t\telement: WorkspaceStackElement,\n\t): Promise<IDisposable> {\n\t\tif (typeof element.actual.prepareUndoRedo === \"undefined\") {\n\t\t\treturn Disposable.None;\n\t\t}\n\t\tconst result = element.actual.prepareUndoRedo();\n\t\tif (typeof result === \"undefined\") {\n\t\t\treturn Disposable.None;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _invokeResourcePrepare(\n\t\telement: ResourceStackElement,\n\t\tcallback: (disposable: IDisposable) => Promise<void> | void,\n\t): void | Promise<void> {\n\t\tif (\n\t\t\telement.actual.type !== UndoRedoElementType.Workspace ||\n\t\t\ttypeof element.actual.prepareUndoRedo === \"undefined\"\n\t\t) {\n\t\t\t// no preparation needed\n\t\t\treturn callback(Disposable.None);\n\t\t}\n\n\t\tconst r = element.actual.prepareUndoRedo();\n\t\tif (!r) {\n\t\t\t// nothing to clean up\n\t\t\treturn callback(Disposable.None);\n\t\t}\n\n\t\tif (isDisposable(r)) {\n\t\t\treturn callback(r);\n\t\t}\n\n\t\treturn r.then((disposable) => {\n\t\t\treturn callback(disposable);\n\t\t});\n\t}\n\n\tprivate _getAffectedEditStacks(\n\t\telement: WorkspaceStackElement,\n\t): EditStackSnapshot {\n\t\tconst affectedEditStacks: ResourceEditStack[] = [];\n\t\tfor (const strResource of element.strResources) {\n\t\t\taffectedEditStacks.push(\n\t\t\t\tthis._editStacks.get(strResource) || missingEditStack,\n\t\t\t);\n\t\t}\n\t\treturn new EditStackSnapshot(affectedEditStacks);\n\t}\n\n\tprivate _tryToSplitAndUndo(\n\t\tstrResource: string,\n\t\telement: WorkspaceStackElement,\n\t\tignoreResources: RemovedResources | null,\n\t\tmessage: string,\n\t): WorkspaceVerificationError {\n\t\tif (element.canSplit()) {\n\t\t\tthis._splitPastWorkspaceElement(element, ignoreResources);\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn new WorkspaceVerificationError(\n\t\t\t\tthis._undo(strResource, 0, true),\n\t\t\t);\n\t\t} else {\n\t\t\t// Cannot safely split this workspace element => flush all undo/redo stacks\n\t\t\tfor (const strResource of element.strResources) {\n\t\t\t\tthis.removeElements(strResource);\n\t\t\t}\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn new WorkspaceVerificationError();\n\t\t}\n\t}\n\n\tprivate _checkWorkspaceUndo(\n\t\tstrResource: string,\n\t\telement: WorkspaceStackElement,\n\t\teditStackSnapshot: EditStackSnapshot,\n\t\tcheckInvalidatedResources: boolean,\n\t): WorkspaceVerificationError | null {\n\t\tif (element.removedResources) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\telement.removedResources,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceUndo\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is another message.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not undo '{0}' across all files. {1}\",\n\t\t\t\t\telement.label,\n\t\t\t\t\telement.removedResources.createMessage(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (checkInvalidatedResources && element.invalidatedResources) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\telement.invalidatedResources,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceUndo\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is another message.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not undo '{0}' across all files. {1}\",\n\t\t\t\t\telement.label,\n\t\t\t\t\telement.invalidatedResources.createMessage(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// this must be the last past element in all the impacted resources!\n\t\tconst cannotUndoDueToResources: string[] = [];\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.getClosestPastElement() !== element) {\n\t\t\t\tcannotUndoDueToResources.push(editStack.resourceLabel);\n\t\t\t}\n\t\t}\n\t\tif (cannotUndoDueToResources.length > 0) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceUndoDueToChanges\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is a list of filenames.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not undo '{0}' across all files because changes were made to {1}\",\n\t\t\t\t\telement.label,\n\t\t\t\t\tcannotUndoDueToResources.join(\", \"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst cannotLockDueToResources: string[] = [];\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.locked) {\n\t\t\t\tcannotLockDueToResources.push(editStack.resourceLabel);\n\t\t\t}\n\t\t}\n\t\tif (cannotLockDueToResources.length > 0) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceUndoDueToInProgressUndoRedo\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is a list of filenames.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\",\n\t\t\t\t\telement.label,\n\t\t\t\t\tcannotLockDueToResources.join(\", \"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// check if new stack elements were added in the meantime...\n\t\tif (!editStackSnapshot.isValid()) {\n\t\t\treturn this._tryToSplitAndUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceUndoDueToInMeantimeUndoRedo\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is a list of filenames.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\",\n\t\t\t\t\telement.label,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _workspaceUndo(\n\t\tstrResource: string,\n\t\telement: WorkspaceStackElement,\n\t\tundoConfirmed: boolean,\n\t): Promise<void> | void {\n\t\tconst affectedEditStacks = this._getAffectedEditStacks(element);\n\t\tconst verificationError = this._checkWorkspaceUndo(\n\t\t\tstrResource,\n\t\t\telement,\n\t\t\taffectedEditStacks,\n\t\t\t/*invalidated resources will be checked after the prepare call*/ false,\n\t\t);\n\t\tif (verificationError) {\n\t\t\treturn verificationError.returnValue;\n\t\t}\n\t\treturn this._confirmAndExecuteWorkspaceUndo(\n\t\t\tstrResource,\n\t\t\telement,\n\t\t\taffectedEditStacks,\n\t\t\tundoConfirmed,\n\t\t);\n\t}\n\n\tprivate _isPartOfUndoGroup(element: WorkspaceStackElement): boolean {\n\t\tif (!element.groupId) {\n\t\t\treturn false;\n\t\t}\n\t\t// check that there is at least another element with the same groupId ready to be undone\n\t\tfor (const [, editStack] of this._editStacks) {\n\t\t\tconst pastElement = editStack.getClosestPastElement();\n\t\t\tif (!pastElement) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (pastElement === element) {\n\t\t\t\tconst secondPastElement =\n\t\t\t\t\teditStack.getSecondClosestPastElement();\n\t\t\t\tif (\n\t\t\t\t\tsecondPastElement &&\n\t\t\t\t\tsecondPastElement.groupId === element.groupId\n\t\t\t\t) {\n\t\t\t\t\t// there is another element with the same group id in the same stack!\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pastElement.groupId === element.groupId) {\n\t\t\t\t// there is another element with the same group id in another stack!\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async _confirmAndExecuteWorkspaceUndo(\n\t\tstrResource: string,\n\t\telement: WorkspaceStackElement,\n\t\teditStackSnapshot: EditStackSnapshot,\n\t\tundoConfirmed: boolean,\n\t): Promise<void> {\n\t\tif (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n\t\t\t// this element can be split\n\n\t\t\tenum UndoChoice {\n\t\t\t\tAll = 0,\n\t\t\t\tThis = 1,\n\t\t\t\tCancel = 2,\n\t\t\t}\n\n\t\t\tconst { result } = await this._dialogService.prompt<UndoChoice>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"confirmWorkspace\",\n\t\t\t\t\t\"Would you like to undo '{0}' across all files?\",\n\t\t\t\t\telement.label,\n\t\t\t\t),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"ok\",\n\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\"{0} denotes a number that is > 1, && denotes a mnemonic\",\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Undo in {0} Files\",\n\t\t\t\t\t\t\teditStackSnapshot.editStacks.length,\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => UndoChoice.All,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t{ key: \"nok\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\t\"Undo this &&File\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => UndoChoice.This,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => UndoChoice.Cancel,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (result === UndoChoice.Cancel) {\n\t\t\t\t// choice: cancel\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (result === UndoChoice.This) {\n\t\t\t\t// choice: undo this file\n\t\t\t\tthis._splitPastWorkspaceElement(element, null);\n\t\t\t\treturn this._undo(strResource, 0, true);\n\t\t\t}\n\n\t\t\t// choice: undo in all files\n\n\t\t\t// At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n\t\t\tconst verificationError1 = this._checkWorkspaceUndo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\teditStackSnapshot,\n\t\t\t\t/*invalidated resources will be checked after the prepare call*/ false,\n\t\t\t);\n\t\t\tif (verificationError1) {\n\t\t\t\treturn verificationError1.returnValue;\n\t\t\t}\n\n\t\t\tundoConfirmed = true;\n\t\t}\n\n\t\t// prepare\n\t\tlet cleanup: IDisposable;\n\t\ttry {\n\t\t\tcleanup = await this._invokeWorkspacePrepare(element);\n\t\t} catch (err) {\n\t\t\treturn this._onError(err, element);\n\t\t}\n\n\t\t// At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n\t\tconst verificationError2 = this._checkWorkspaceUndo(\n\t\t\tstrResource,\n\t\t\telement,\n\t\t\teditStackSnapshot,\n\t\t\t/*now also check that there are no more invalidated resources*/ true,\n\t\t);\n\t\tif (verificationError2) {\n\t\t\tcleanup.dispose();\n\t\t\treturn verificationError2.returnValue;\n\t\t}\n\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\teditStack.moveBackward(element);\n\t\t}\n\t\treturn this._safeInvokeWithLocks(\n\t\t\telement,\n\t\t\t() => element.actual.undo(),\n\t\t\teditStackSnapshot,\n\t\t\tcleanup,\n\t\t\t() => this._continueUndoInGroup(element.groupId, undoConfirmed),\n\t\t);\n\t}\n\n\tprivate _resourceUndo(\n\t\teditStack: ResourceEditStack,\n\t\telement: ResourceStackElement,\n\t\tundoConfirmed: boolean,\n\t): Promise<void> | void {\n\t\tif (!element.isValid) {\n\t\t\t// invalid element => immediately flush edit stack!\n\t\t\teditStack.flushAllElements();\n\t\t\treturn;\n\t\t}\n\t\tif (editStack.locked) {\n\t\t\tconst message = nls.localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"cannotResourceUndoDueToInProgressUndoRedo\",\n\t\t\t\t\tcomment: [\"{0} is a label for an operation.\"],\n\t\t\t\t},\n\t\t\t\t\"Could not undo '{0}' because there is already an undo or redo operation running.\",\n\t\t\t\telement.label,\n\t\t\t);\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn;\n\t\t}\n\t\treturn this._invokeResourcePrepare(element, (cleanup) => {\n\t\t\teditStack.moveBackward(element);\n\t\t\treturn this._safeInvokeWithLocks(\n\t\t\t\telement,\n\t\t\t\t() => element.actual.undo(),\n\t\t\t\tnew EditStackSnapshot([editStack]),\n\t\t\t\tcleanup,\n\t\t\t\t() => this._continueUndoInGroup(element.groupId, undoConfirmed),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _findClosestUndoElementInGroup(\n\t\tgroupId: number,\n\t): [StackElement | null, string | null] {\n\t\tif (!groupId) {\n\t\t\treturn [null, null];\n\t\t}\n\n\t\t// find another element with the same groupId and with the highest groupOrder ready to be undone\n\t\tlet matchedElement: StackElement | null = null;\n\t\tlet matchedStrResource: string | null = null;\n\n\t\tfor (const [strResource, editStack] of this._editStacks) {\n\t\t\tconst candidate = editStack.getClosestPastElement();\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidate.groupId === groupId) {\n\t\t\t\tif (\n\t\t\t\t\t!matchedElement ||\n\t\t\t\t\tcandidate.groupOrder > matchedElement.groupOrder\n\t\t\t\t) {\n\t\t\t\t\tmatchedElement = candidate;\n\t\t\t\t\tmatchedStrResource = strResource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [matchedElement, matchedStrResource];\n\t}\n\n\tprivate _continueUndoInGroup(\n\t\tgroupId: number,\n\t\tundoConfirmed: boolean,\n\t): Promise<void> | void {\n\t\tif (!groupId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, matchedStrResource] =\n\t\t\tthis._findClosestUndoElementInGroup(groupId);\n\t\tif (matchedStrResource) {\n\t\t\treturn this._undo(matchedStrResource, 0, undoConfirmed);\n\t\t}\n\t}\n\n\tpublic undo(resourceOrSource: URI | UndoRedoSource): Promise<void> | void {\n\t\tif (resourceOrSource instanceof UndoRedoSource) {\n\t\t\tconst [, matchedStrResource] =\n\t\t\t\tthis._findClosestUndoElementWithSource(resourceOrSource.id);\n\t\t\treturn matchedStrResource\n\t\t\t\t? this._undo(matchedStrResource, resourceOrSource.id, false)\n\t\t\t\t: undefined;\n\t\t}\n\t\tif (typeof resourceOrSource === \"string\") {\n\t\t\treturn this._undo(resourceOrSource, 0, false);\n\t\t}\n\t\treturn this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n\t}\n\n\tprivate _undo(\n\t\tstrResource: string,\n\t\tsourceId = 0,\n\t\tundoConfirmed: boolean,\n\t): Promise<void> | void {\n\t\tif (!this._editStacks.has(strResource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\tconst element = editStack.getClosestPastElement();\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.groupId) {\n\t\t\t// this element is a part of a group, we need to make sure undoing in a group is in order\n\t\t\tconst [matchedElement, matchedStrResource] =\n\t\t\t\tthis._findClosestUndoElementInGroup(element.groupId);\n\t\t\tif (element !== matchedElement && matchedStrResource) {\n\t\t\t\t// there is an element in the same group that should be undone before this one\n\t\t\t\treturn this._undo(matchedStrResource, sourceId, undoConfirmed);\n\t\t\t}\n\t\t}\n\n\t\tconst shouldPromptForConfirmation =\n\t\t\telement.sourceId !== sourceId || element.confirmBeforeUndo;\n\t\tif (shouldPromptForConfirmation && !undoConfirmed) {\n\t\t\t// Hit a different source or the element asks for prompt before undo, prompt for confirmation\n\t\t\treturn this._confirmAndContinueUndo(strResource, sourceId, element);\n\t\t}\n\n\t\ttry {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\treturn this._workspaceUndo(strResource, element, undoConfirmed);\n\t\t\t} else {\n\t\t\t\treturn this._resourceUndo(editStack, element, undoConfirmed);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (DEBUG) {\n\t\t\t\tthis._print(\"undo\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _confirmAndContinueUndo(\n\t\tstrResource: string,\n\t\tsourceId: number,\n\t\telement: StackElement,\n\t): Promise<void> {\n\t\tconst result = await this._dialogService.confirm({\n\t\t\tmessage: nls.localize(\n\t\t\t\t\"confirmDifferentSource\",\n\t\t\t\t\"Would you like to undo '{0}'?\",\n\t\t\t\telement.label,\n\t\t\t),\n\t\t\tprimaryButton: nls.localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"confirmDifferentSource.yes\",\n\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t},\n\t\t\t\t\"&&Yes\",\n\t\t\t),\n\t\t\tcancelButton: nls.localize(\"confirmDifferentSource.no\", \"No\"),\n\t\t});\n\n\t\tif (!result.confirmed) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._undo(strResource, sourceId, true);\n\t}\n\n\tprivate _findClosestRedoElementWithSource(\n\t\tsourceId: number,\n\t): [StackElement | null, string | null] {\n\t\tif (!sourceId) {\n\t\t\treturn [null, null];\n\t\t}\n\n\t\t// find an element with sourceId and with the lowest sourceOrder ready to be redone\n\t\tlet matchedElement: StackElement | null = null;\n\t\tlet matchedStrResource: string | null = null;\n\n\t\tfor (const [strResource, editStack] of this._editStacks) {\n\t\t\tconst candidate = editStack.getClosestFutureElement();\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidate.sourceId === sourceId) {\n\t\t\t\tif (\n\t\t\t\t\t!matchedElement ||\n\t\t\t\t\tcandidate.sourceOrder < matchedElement.sourceOrder\n\t\t\t\t) {\n\t\t\t\t\tmatchedElement = candidate;\n\t\t\t\t\tmatchedStrResource = strResource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [matchedElement, matchedStrResource];\n\t}\n\n\tpublic canRedo(resourceOrSource: URI | UndoRedoSource): boolean {\n\t\tif (resourceOrSource instanceof UndoRedoSource) {\n\t\t\tconst [, matchedStrResource] =\n\t\t\t\tthis._findClosestRedoElementWithSource(resourceOrSource.id);\n\t\t\treturn matchedStrResource ? true : false;\n\t\t}\n\t\tconst strResource = this.getUriComparisonKey(resourceOrSource);\n\t\tif (this._editStacks.has(strResource)) {\n\t\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\t\treturn editStack.hasFutureElements();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _tryToSplitAndRedo(\n\t\tstrResource: string,\n\t\telement: WorkspaceStackElement,\n\t\tignoreResources: RemovedResources | null,\n\t\tmessage: string,\n\t): WorkspaceVerificationError {\n\t\tif (element.canSplit()) {\n\t\t\tthis._splitFutureWorkspaceElement(element, ignoreResources);\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn new WorkspaceVerificationError(this._redo(strResource));\n\t\t} else {\n\t\t\t// Cannot safely split this workspace element => flush all undo/redo stacks\n\t\t\tfor (const strResource of element.strResources) {\n\t\t\t\tthis.removeElements(strResource);\n\t\t\t}\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn new WorkspaceVerificationError();\n\t\t}\n\t}\n\n\tprivate _checkWorkspaceRedo(\n\t\tstrResource: string,\n\t\telement: WorkspaceStackElement,\n\t\teditStackSnapshot: EditStackSnapshot,\n\t\tcheckInvalidatedResources: boolean,\n\t): WorkspaceVerificationError | null {\n\t\tif (element.removedResources) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\telement.removedResources,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceRedo\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is another message.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not redo '{0}' across all files. {1}\",\n\t\t\t\t\telement.label,\n\t\t\t\t\telement.removedResources.createMessage(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (checkInvalidatedResources && element.invalidatedResources) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\telement.invalidatedResources,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceRedo\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is another message.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not redo '{0}' across all files. {1}\",\n\t\t\t\t\telement.label,\n\t\t\t\t\telement.invalidatedResources.createMessage(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// this must be the last future element in all the impacted resources!\n\t\tconst cannotRedoDueToResources: string[] = [];\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.getClosestFutureElement() !== element) {\n\t\t\t\tcannotRedoDueToResources.push(editStack.resourceLabel);\n\t\t\t}\n\t\t}\n\t\tif (cannotRedoDueToResources.length > 0) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceRedoDueToChanges\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is a list of filenames.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not redo '{0}' across all files because changes were made to {1}\",\n\t\t\t\t\telement.label,\n\t\t\t\t\tcannotRedoDueToResources.join(\", \"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst cannotLockDueToResources: string[] = [];\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\tif (editStack.locked) {\n\t\t\t\tcannotLockDueToResources.push(editStack.resourceLabel);\n\t\t\t}\n\t\t}\n\t\tif (cannotLockDueToResources.length > 0) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceRedoDueToInProgressUndoRedo\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is a list of filenames.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\",\n\t\t\t\t\telement.label,\n\t\t\t\t\tcannotLockDueToResources.join(\", \"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// check if new stack elements were added in the meantime...\n\t\tif (!editStackSnapshot.isValid()) {\n\t\t\treturn this._tryToSplitAndRedo(\n\t\t\t\tstrResource,\n\t\t\t\telement,\n\t\t\t\tnull,\n\t\t\t\tnls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"cannotWorkspaceRedoDueToInMeantimeUndoRedo\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\"{0} is a label for an operation. {1} is a list of filenames.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\",\n\t\t\t\t\telement.label,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _workspaceRedo(\n\t\tstrResource: string,\n\t\telement: WorkspaceStackElement,\n\t): Promise<void> | void {\n\t\tconst affectedEditStacks = this._getAffectedEditStacks(element);\n\t\tconst verificationError = this._checkWorkspaceRedo(\n\t\t\tstrResource,\n\t\t\telement,\n\t\t\taffectedEditStacks,\n\t\t\t/*invalidated resources will be checked after the prepare call*/ false,\n\t\t);\n\t\tif (verificationError) {\n\t\t\treturn verificationError.returnValue;\n\t\t}\n\t\treturn this._executeWorkspaceRedo(\n\t\t\tstrResource,\n\t\t\telement,\n\t\t\taffectedEditStacks,\n\t\t);\n\t}\n\n\tprivate async _executeWorkspaceRedo(\n\t\tstrResource: string,\n\t\telement: WorkspaceStackElement,\n\t\teditStackSnapshot: EditStackSnapshot,\n\t): Promise<void> {\n\t\t// prepare\n\t\tlet cleanup: IDisposable;\n\t\ttry {\n\t\t\tcleanup = await this._invokeWorkspacePrepare(element);\n\t\t} catch (err) {\n\t\t\treturn this._onError(err, element);\n\t\t}\n\n\t\t// At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n\t\tconst verificationError = this._checkWorkspaceRedo(\n\t\t\tstrResource,\n\t\t\telement,\n\t\t\teditStackSnapshot,\n\t\t\t/*now also check that there are no more invalidated resources*/ true,\n\t\t);\n\t\tif (verificationError) {\n\t\t\tcleanup.dispose();\n\t\t\treturn verificationError.returnValue;\n\t\t}\n\n\t\tfor (const editStack of editStackSnapshot.editStacks) {\n\t\t\teditStack.moveForward(element);\n\t\t}\n\t\treturn this._safeInvokeWithLocks(\n\t\t\telement,\n\t\t\t() => element.actual.redo(),\n\t\t\teditStackSnapshot,\n\t\t\tcleanup,\n\t\t\t() => this._continueRedoInGroup(element.groupId),\n\t\t);\n\t}\n\n\tprivate _resourceRedo(\n\t\teditStack: ResourceEditStack,\n\t\telement: ResourceStackElement,\n\t): Promise<void> | void {\n\t\tif (!element.isValid) {\n\t\t\t// invalid element => immediately flush edit stack!\n\t\t\teditStack.flushAllElements();\n\t\t\treturn;\n\t\t}\n\t\tif (editStack.locked) {\n\t\t\tconst message = nls.localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"cannotResourceRedoDueToInProgressUndoRedo\",\n\t\t\t\t\tcomment: [\"{0} is a label for an operation.\"],\n\t\t\t\t},\n\t\t\t\t\"Could not redo '{0}' because there is already an undo or redo operation running.\",\n\t\t\t\telement.label,\n\t\t\t);\n\t\t\tthis._notificationService.warn(message);\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._invokeResourcePrepare(element, (cleanup) => {\n\t\t\teditStack.moveForward(element);\n\t\t\treturn this._safeInvokeWithLocks(\n\t\t\t\telement,\n\t\t\t\t() => element.actual.redo(),\n\t\t\t\tnew EditStackSnapshot([editStack]),\n\t\t\t\tcleanup,\n\t\t\t\t() => this._continueRedoInGroup(element.groupId),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _findClosestRedoElementInGroup(\n\t\tgroupId: number,\n\t): [StackElement | null, string | null] {\n\t\tif (!groupId) {\n\t\t\treturn [null, null];\n\t\t}\n\n\t\t// find another element with the same groupId and with the lowest groupOrder ready to be redone\n\t\tlet matchedElement: StackElement | null = null;\n\t\tlet matchedStrResource: string | null = null;\n\n\t\tfor (const [strResource, editStack] of this._editStacks) {\n\t\t\tconst candidate = editStack.getClosestFutureElement();\n\t\t\tif (!candidate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidate.groupId === groupId) {\n\t\t\t\tif (\n\t\t\t\t\t!matchedElement ||\n\t\t\t\t\tcandidate.groupOrder < matchedElement.groupOrder\n\t\t\t\t) {\n\t\t\t\t\tmatchedElement = candidate;\n\t\t\t\t\tmatchedStrResource = strResource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [matchedElement, matchedStrResource];\n\t}\n\n\tprivate _continueRedoInGroup(groupId: number): Promise<void> | void {\n\t\tif (!groupId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, matchedStrResource] =\n\t\t\tthis._findClosestRedoElementInGroup(groupId);\n\t\tif (matchedStrResource) {\n\t\t\treturn this._redo(matchedStrResource);\n\t\t}\n\t}\n\n\tpublic redo(\n\t\tresourceOrSource: URI | UndoRedoSource | string,\n\t): Promise<void> | void {\n\t\tif (resourceOrSource instanceof UndoRedoSource) {\n\t\t\tconst [, matchedStrResource] =\n\t\t\t\tthis._findClosestRedoElementWithSource(resourceOrSource.id);\n\t\t\treturn matchedStrResource\n\t\t\t\t? this._redo(matchedStrResource)\n\t\t\t\t: undefined;\n\t\t}\n\t\tif (typeof resourceOrSource === \"string\") {\n\t\t\treturn this._redo(resourceOrSource);\n\t\t}\n\t\treturn this._redo(this.getUriComparisonKey(resourceOrSource));\n\t}\n\n\tprivate _redo(strResource: string): Promise<void> | void {\n\t\tif (!this._editStacks.has(strResource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editStack = this._editStacks.get(strResource)!;\n\t\tconst element = editStack.getClosestFutureElement();\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.groupId) {\n\t\t\t// this element is a part of a group, we need to make sure redoing in a group is in order\n\t\t\tconst [matchedElement, matchedStrResource] =\n\t\t\t\tthis._findClosestRedoElementInGroup(element.groupId);\n\t\t\tif (element !== matchedElement && matchedStrResource) {\n\t\t\t\t// there is an element in the same group that should be redone before this one\n\t\t\t\treturn this._redo(matchedStrResource);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tif (element.type === UndoRedoElementType.Workspace) {\n\t\t\t\treturn this._workspaceRedo(strResource, element);\n\t\t\t} else {\n\t\t\t\treturn this._resourceRedo(editStack, element);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (DEBUG) {\n\t\t\t\tthis._print(\"redo\");\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass WorkspaceVerificationError {\n\tconstructor(public readonly returnValue: Promise<void> | void) {}\n}\n\nregisterSingleton(IUndoRedoService, UndoRedoService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["RemovedResourceReason", "strResource", "UndoChoice"]
}
