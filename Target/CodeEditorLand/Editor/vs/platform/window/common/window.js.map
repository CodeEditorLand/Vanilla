{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/window/common/window.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { PerformanceMark } from '../../../base/common/performance.js';\nimport { isLinux, isMacintosh, isNative, isWeb } from '../../../base/common/platform.js';\nimport { URI, UriComponents, UriDto } from '../../../base/common/uri.js';\nimport { ISandboxConfiguration } from '../../../base/parts/sandbox/common/sandboxTypes.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEditorOptions } from '../../editor/common/editor.js';\nimport { NativeParsedArgs } from '../../environment/common/argv.js';\nimport { FileType } from '../../files/common/files.js';\nimport { ILoggerResource, LogLevel } from '../../log/common/log.js';\nimport { PolicyDefinition, PolicyValue } from '../../policy/common/policy.js';\nimport { IPartsSplash } from '../../theme/common/themeService.js';\nimport { IUserDataProfile } from '../../userDataProfile/common/userDataProfile.js';\nimport { IAnyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from '../../workspace/common/workspace.js';\n\nexport const WindowMinimumSize = {\n\tWIDTH: 400,\n\tWIDTH_WITH_VERTICAL_PANEL: 600,\n\tHEIGHT: 270\n};\n\nexport interface IPoint {\n\treadonly x: number;\n\treadonly y: number;\n}\n\nexport interface IRectangle extends IPoint {\n\treadonly width: number;\n\treadonly height: number;\n}\n\nexport interface IBaseOpenWindowsOptions {\n\n\t/**\n\t * Whether to reuse the window or open a new one.\n\t */\n\treadonly forceReuseWindow?: boolean;\n\n\t/**\n\t * The remote authority to use when windows are opened with either\n\t * - no workspace (empty window)\n\t * - a workspace that is neither `file://` nor `vscode-remote://`\n\t * Use 'null' for a local window.\n\t * If not set, defaults to the remote authority of the current window.\n\t */\n\treadonly remoteAuthority?: string | null;\n\n\treadonly forceProfile?: string;\n\treadonly forceTempProfile?: boolean;\n}\n\nexport interface IOpenWindowOptions extends IBaseOpenWindowsOptions {\n\treadonly forceNewWindow?: boolean;\n\treadonly preferNewWindow?: boolean;\n\n\treadonly noRecentEntry?: boolean;\n\n\treadonly addMode?: boolean;\n\n\treadonly diffMode?: boolean;\n\treadonly mergeMode?: boolean;\n\treadonly gotoLineMode?: boolean;\n\n\treadonly waitMarkerFileURI?: URI;\n}\n\nexport interface IAddFoldersRequest {\n\treadonly foldersToAdd: UriComponents[];\n}\n\ninterface IOpenedWindow {\n\treadonly id: number;\n\treadonly title: string;\n\treadonly filename?: string;\n}\n\nexport interface IOpenedMainWindow extends IOpenedWindow {\n\treadonly workspace?: IAnyWorkspaceIdentifier;\n\treadonly dirty: boolean;\n}\n\nexport interface IOpenedAuxiliaryWindow extends IOpenedWindow {\n\treadonly parentId: number;\n}\n\nexport function isOpenedAuxiliaryWindow(candidate: IOpenedMainWindow | IOpenedAuxiliaryWindow): candidate is IOpenedAuxiliaryWindow {\n\treturn typeof (candidate as IOpenedAuxiliaryWindow).parentId === 'number';\n}\n\nexport interface IOpenEmptyWindowOptions extends IBaseOpenWindowsOptions { }\n\nexport type IWindowOpenable = IWorkspaceToOpen | IFolderToOpen | IFileToOpen;\n\nexport interface IBaseWindowOpenable {\n\tlabel?: string;\n}\n\nexport interface IWorkspaceToOpen extends IBaseWindowOpenable {\n\treadonly workspaceUri: URI;\n}\n\nexport interface IFolderToOpen extends IBaseWindowOpenable {\n\treadonly folderUri: URI;\n}\n\nexport interface IFileToOpen extends IBaseWindowOpenable {\n\treadonly fileUri: URI;\n}\n\nexport function isWorkspaceToOpen(uriToOpen: IWindowOpenable): uriToOpen is IWorkspaceToOpen {\n\treturn !!(uriToOpen as IWorkspaceToOpen).workspaceUri;\n}\n\nexport function isFolderToOpen(uriToOpen: IWindowOpenable): uriToOpen is IFolderToOpen {\n\treturn !!(uriToOpen as IFolderToOpen).folderUri;\n}\n\nexport function isFileToOpen(uriToOpen: IWindowOpenable): uriToOpen is IFileToOpen {\n\treturn !!(uriToOpen as IFileToOpen).fileUri;\n}\n\nexport type MenuBarVisibility = 'classic' | 'visible' | 'toggle' | 'hidden' | 'compact';\n\nexport function getMenuBarVisibility(configurationService: IConfigurationService): MenuBarVisibility {\n\tconst nativeTitleBarEnabled = hasNativeTitlebar(configurationService);\n\tconst menuBarVisibility = configurationService.getValue<MenuBarVisibility | 'default'>('window.menuBarVisibility');\n\n\tif (menuBarVisibility === 'default' || (nativeTitleBarEnabled && menuBarVisibility === 'compact') || (isMacintosh && isNative)) {\n\t\treturn 'classic';\n\t} else {\n\t\treturn menuBarVisibility;\n\t}\n}\n\nexport interface IWindowsConfiguration {\n\treadonly window: IWindowSettings;\n}\n\nexport interface IWindowSettings {\n\treadonly openFilesInNewWindow: 'on' | 'off' | 'default';\n\treadonly openFoldersInNewWindow: 'on' | 'off' | 'default';\n\treadonly openWithoutArgumentsInNewWindow: 'on' | 'off';\n\treadonly restoreWindows: 'preserve' | 'all' | 'folders' | 'one' | 'none';\n\treadonly restoreFullscreen: boolean;\n\treadonly zoomLevel: number;\n\treadonly titleBarStyle: TitlebarStyle;\n\treadonly autoDetectHighContrast: boolean;\n\treadonly autoDetectColorScheme: boolean;\n\treadonly menuBarVisibility: MenuBarVisibility;\n\treadonly newWindowDimensions: 'default' | 'inherit' | 'offset' | 'maximized' | 'fullscreen';\n\treadonly nativeTabs: boolean;\n\treadonly nativeFullScreen: boolean;\n\treadonly enableMenuBarMnemonics: boolean;\n\treadonly closeWhenEmpty: boolean;\n\treadonly clickThroughInactive: boolean;\n\treadonly newWindowProfile: string;\n\treadonly density: IDensitySettings;\n\treadonly experimentalControlOverlay?: boolean;\n}\n\nexport interface IDensitySettings {\n\treadonly editorTabHeight: 'default' | 'compact';\n}\n\nexport const enum TitleBarSetting {\n\tTITLE_BAR_STYLE = 'window.titleBarStyle',\n\tCUSTOM_TITLE_BAR_VISIBILITY = 'window.customTitleBarVisibility',\n}\n\nexport const enum TitlebarStyle {\n\tNATIVE = 'native',\n\tCUSTOM = 'custom',\n}\n\nexport const enum CustomTitleBarVisibility {\n\tAUTO = 'auto',\n\tWINDOWED = 'windowed',\n\tNEVER = 'never',\n}\n\nexport function hasCustomTitlebar(configurationService: IConfigurationService, titleBarStyle?: TitlebarStyle): boolean {\n\t// Returns if it possible to have a custom title bar in the curren session\n\t// Does not imply that the title bar is visible\n\n\treturn true;\n}\n\nexport function hasNativeTitlebar(configurationService: IConfigurationService, titleBarStyle?: TitlebarStyle): boolean {\n\tif (!titleBarStyle) {\n\t\ttitleBarStyle = getTitleBarStyle(configurationService);\n\t}\n\treturn titleBarStyle === TitlebarStyle.NATIVE;\n}\n\nexport function getTitleBarStyle(configurationService: IConfigurationService): TitlebarStyle {\n\tif (isWeb) {\n\t\treturn TitlebarStyle.CUSTOM;\n\t}\n\n\tconst configuration = configurationService.getValue<IWindowSettings | undefined>('window');\n\tif (configuration) {\n\t\tconst useNativeTabs = isMacintosh && configuration.nativeTabs === true;\n\t\tif (useNativeTabs) {\n\t\t\treturn TitlebarStyle.NATIVE; // native tabs on sierra do not work with custom title style\n\t\t}\n\n\t\tconst useSimpleFullScreen = isMacintosh && configuration.nativeFullScreen === false;\n\t\tif (useSimpleFullScreen) {\n\t\t\treturn TitlebarStyle.NATIVE; // simple fullscreen does not work well with custom title style (https://github.com/microsoft/vscode/issues/63291)\n\t\t}\n\n\t\tconst style = configuration.titleBarStyle;\n\t\tif (style === TitlebarStyle.NATIVE || style === TitlebarStyle.CUSTOM) {\n\t\t\treturn style;\n\t\t}\n\t}\n\n\treturn isLinux ? TitlebarStyle.NATIVE : TitlebarStyle.CUSTOM; // default to custom on all macOS and Windows\n}\n\nexport const DEFAULT_CUSTOM_TITLEBAR_HEIGHT = 35; // includes space for command center\n\nexport function useWindowControlsOverlay(configurationService: IConfigurationService): boolean {\n\tif (isMacintosh || isWeb) {\n\t\treturn false; // only supported on a Windows/Linux desktop instances\n\t}\n\n\tif (hasNativeTitlebar(configurationService)) {\n\t\treturn false; // only supported when title bar is custom\n\t}\n\n\tif (isLinux) {\n\t\tconst setting = configurationService.getValue('window.experimentalControlOverlay');\n\t\tif (typeof setting === 'boolean') {\n\t\t\treturn setting;\n\t\t}\n\t}\n\n\t// Default to true.\n\treturn true;\n}\n\nexport function useNativeFullScreen(configurationService: IConfigurationService): boolean {\n\tconst windowConfig = configurationService.getValue<IWindowSettings | undefined>('window');\n\tif (!windowConfig || typeof windowConfig.nativeFullScreen !== 'boolean') {\n\t\treturn true; // default\n\t}\n\n\tif (windowConfig.nativeTabs) {\n\t\treturn true; // https://github.com/electron/electron/issues/16142\n\t}\n\n\treturn windowConfig.nativeFullScreen !== false;\n}\n\n\nexport interface IPath<T = IEditorOptions> extends IPathData<T> {\n\n\t/**\n\t * The file path to open within the instance\n\t */\n\tfileUri?: URI;\n}\n\nexport interface IPathData<T = IEditorOptions> {\n\n\t/**\n\t * The file path to open within the instance\n\t */\n\treadonly fileUri?: UriComponents;\n\n\t/**\n\t * Optional editor options to apply in the file\n\t */\n\treadonly options?: T;\n\n\t/**\n\t * A hint that the file exists. if true, the\n\t * file exists, if false it does not. with\n\t * `undefined` the state is unknown.\n\t */\n\treadonly exists?: boolean;\n\n\t/**\n\t * A hint about the file type of this path.\n\t * with `undefined` the type is unknown.\n\t */\n\treadonly type?: FileType;\n\n\t/**\n\t * Specifies if the file should be only be opened\n\t * if it exists.\n\t */\n\treadonly openOnlyIfExists?: boolean;\n}\n\nexport interface IPathsToWaitFor extends IPathsToWaitForData {\n\tpaths: IPath[];\n\twaitMarkerFileUri: URI;\n}\n\ninterface IPathsToWaitForData {\n\treadonly paths: IPathData[];\n\treadonly waitMarkerFileUri: UriComponents;\n}\n\nexport interface IOpenFileRequest {\n\treadonly filesToOpenOrCreate?: IPathData[];\n\treadonly filesToDiff?: IPathData[];\n\treadonly filesToMerge?: IPathData[];\n}\n\n/**\n * Additional context for the request on native only.\n */\nexport interface INativeOpenFileRequest extends IOpenFileRequest {\n\treadonly termProgram?: string;\n\treadonly filesToWait?: IPathsToWaitForData;\n}\n\nexport interface INativeRunActionInWindowRequest {\n\treadonly id: string;\n\treadonly from: 'menu' | 'touchbar' | 'mouse';\n\treadonly args?: any[];\n}\n\nexport interface INativeRunKeybindingInWindowRequest {\n\treadonly userSettingsLabel: string;\n}\n\nexport interface IColorScheme {\n\treadonly dark: boolean;\n\treadonly highContrast: boolean;\n}\n\nexport interface IWindowConfiguration {\n\tremoteAuthority?: string;\n\n\tfilesToOpenOrCreate?: IPath[];\n\tfilesToDiff?: IPath[];\n\tfilesToMerge?: IPath[];\n}\n\nexport interface IOSConfiguration {\n\treadonly release: string;\n\treadonly hostname: string;\n\treadonly arch: string;\n}\n\nexport interface INativeWindowConfiguration extends IWindowConfiguration, NativeParsedArgs, ISandboxConfiguration {\n\tmainPid: number;\n\n\tmachineId: string;\n\tsqmId: string;\n\tdevDeviceId: string;\n\n\texecPath: string;\n\tbackupPath?: string;\n\n\tprofiles: {\n\t\thome: UriComponents;\n\t\tall: readonly UriDto<IUserDataProfile>[];\n\t\tprofile: UriDto<IUserDataProfile>;\n\t};\n\n\thomeDir: string;\n\ttmpDir: string;\n\tuserDataDir: string;\n\n\tpartsSplash?: IPartsSplash;\n\n\tworkspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\tisInitialStartup?: boolean;\n\tlogLevel: LogLevel;\n\tloggers: {\n\t\tglobal: UriDto<ILoggerResource>[];\n\t\twindow: UriDto<ILoggerResource>[];\n\t};\n\n\tfullscreen?: boolean;\n\tmaximized?: boolean;\n\taccessibilitySupport?: boolean;\n\tcolorScheme: IColorScheme;\n\tautoDetectHighContrast?: boolean;\n\tautoDetectColorScheme?: boolean;\n\tisCustomZoomLevel?: boolean;\n\n\tperfMarks: PerformanceMark[];\n\n\tfilesToWait?: IPathsToWaitFor;\n\n\tos: IOSConfiguration;\n\tpoliciesData?: IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }>;\n}\n\n/**\n * According to Electron docs: `scale := 1.2 ^ level`.\n * https://github.com/electron/electron/blob/master/docs/api/web-contents.md#contentssetzoomlevellevel\n */\nexport function zoomLevelToZoomFactor(zoomLevel = 0): number {\n\treturn Math.pow(1.2, zoomLevel);\n}\n"],
  "mappings": "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",
  "names": ["TitleBarSetting", "TitlebarStyle", "CustomTitleBarVisibility"]
}
