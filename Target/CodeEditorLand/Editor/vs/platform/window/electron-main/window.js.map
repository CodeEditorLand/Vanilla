{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/window/electron-main/window.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from \"electron\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { ISerializableCommandAction } from \"../../action/common/action.js\";\nimport type { NativeParsedArgs } from \"../../environment/common/argv.js\";\nimport type { IUserDataProfile } from \"../../userDataProfile/common/userDataProfile.js\";\nimport type {\n\tISingleFolderWorkspaceIdentifier,\n\tIWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\nimport type { INativeWindowConfiguration } from \"../common/window.js\";\n\nexport interface IBaseWindow extends IDisposable {\n\treadonly onDidMaximize: Event<void>;\n\treadonly onDidUnmaximize: Event<void>;\n\treadonly onDidTriggerSystemContextMenu: Event<{\n\t\treadonly x: number;\n\t\treadonly y: number;\n\t}>;\n\treadonly onDidEnterFullScreen: Event<void>;\n\treadonly onDidLeaveFullScreen: Event<void>;\n\treadonly onDidClose: Event<void>;\n\n\treadonly id: number;\n\treadonly win: electron.BrowserWindow | null;\n\n\treadonly lastFocusTime: number;\n\tfocus(options?: { force: boolean }): void;\n\n\tsetRepresentedFilename(name: string): void;\n\tgetRepresentedFilename(): string | undefined;\n\n\tsetDocumentEdited(edited: boolean): void;\n\tisDocumentEdited(): boolean;\n\n\thandleTitleDoubleClick(): void;\n\n\treadonly isFullScreen: boolean;\n\ttoggleFullScreen(): void;\n\n\tupdateWindowControls(options: {\n\t\theight?: number;\n\t\tbackgroundColor?: string;\n\t\tforegroundColor?: string;\n\t}): void;\n\n\tmatches(webContents: electron.WebContents): boolean;\n}\n\nexport interface ICodeWindow extends IBaseWindow {\n\treadonly onWillLoad: Event<ILoadEvent>;\n\treadonly onDidSignalReady: Event<void>;\n\treadonly onDidDestroy: Event<void>;\n\n\treadonly whenClosedOrLoaded: Promise<void>;\n\n\treadonly config: INativeWindowConfiguration | undefined;\n\n\treadonly openedWorkspace?:\n\t\t| IWorkspaceIdentifier\n\t\t| ISingleFolderWorkspaceIdentifier;\n\n\treadonly profile?: IUserDataProfile;\n\n\treadonly backupPath?: string;\n\n\treadonly remoteAuthority?: string;\n\n\treadonly isExtensionDevelopmentHost: boolean;\n\treadonly isExtensionTestHost: boolean;\n\n\treadonly isReady: boolean;\n\tready(): Promise<ICodeWindow>;\n\tsetReady(): void;\n\n\taddTabbedWindow(window: ICodeWindow): void;\n\n\tload(\n\t\tconfig: INativeWindowConfiguration,\n\t\toptions?: { isReload?: boolean },\n\t): void;\n\treload(cli?: NativeParsedArgs): void;\n\n\tclose(): void;\n\n\tgetBounds(): electron.Rectangle;\n\n\tsend(channel: string, ...args: any[]): void;\n\tsendWhenReady(\n\t\tchannel: string,\n\t\ttoken: CancellationToken,\n\t\t...args: any[]\n\t): void;\n\n\tupdateTouchBar(items: ISerializableCommandAction[][]): void;\n\n\tnotifyZoomLevel(zoomLevel: number | undefined): void;\n\n\tserializeWindowState(): IWindowState;\n}\n\nexport enum LoadReason {\n\t/**\n\t * The window is loaded for the first time.\n\t */\n\tINITIAL = 1,\n\n\t/**\n\t * The window is loaded into a different workspace context.\n\t */\n\tLOAD = 2,\n\n\t/**\n\t * The window is reloaded.\n\t */\n\tRELOAD = 3,\n}\n\nexport enum UnloadReason {\n\t/**\n\t * The window is closed.\n\t */\n\tCLOSE = 1,\n\n\t/**\n\t * All windows unload because the application quits.\n\t */\n\tQUIT = 2,\n\n\t/**\n\t * The window is reloaded.\n\t */\n\tRELOAD = 3,\n\n\t/**\n\t * The window is loaded into a different workspace context.\n\t */\n\tLOAD = 4,\n}\n\nexport interface IWindowState {\n\twidth?: number;\n\theight?: number;\n\tx?: number;\n\ty?: number;\n\tmode?: WindowMode;\n\tzoomLevel?: number;\n\treadonly display?: number;\n}\n\nexport const defaultWindowState = (mode = WindowMode.Normal): IWindowState => ({\n\twidth: 1024,\n\theight: 768,\n\tmode,\n});\n\nexport const defaultAuxWindowState = (): IWindowState => {\n\t// Auxiliary windows are being created from a `window.open` call\n\t// that sets `windowFeatures` that encode the desired size and\n\t// position of the new window (`top`, `left`).\n\t// In order to truly override this to a good default window state\n\t// we need to set not only width and height but also x and y to\n\t// a good location on the primary display.\n\n\tconst width = 800;\n\tconst height = 600;\n\tconst workArea = electron.screen.getPrimaryDisplay().workArea;\n\tconst x = Math.max(workArea.x + workArea.width / 2 - width / 2, 0);\n\tconst y = Math.max(workArea.y + workArea.height / 2 - height / 2, 0);\n\n\treturn {\n\t\tx,\n\t\ty,\n\t\twidth,\n\t\theight,\n\t\tmode: WindowMode.Normal,\n\t};\n};\n\nexport enum WindowMode {\n\tMaximized = 0,\n\tNormal = 1,\n\tMinimized = 2, // not used anymore, but also cannot remove due to existing stored UI state (needs migration)\n\tFullscreen = 3,\n}\n\nexport interface ILoadEvent {\n\treadonly workspace:\n\t\t| IWorkspaceIdentifier\n\t\t| ISingleFolderWorkspaceIdentifier\n\t\t| undefined;\n\treadonly reason: LoadReason;\n}\n\nexport enum WindowError {\n\t/**\n\t * Maps to the `unresponsive` event on a `BrowserWindow`.\n\t */\n\tUNRESPONSIVE = 1,\n\n\t/**\n\t * Maps to the `render-process-gone` event on a `WebContents`.\n\t */\n\tPROCESS_GONE = 2,\n\n\t/**\n\t * Maps to the `did-fail-load` event on a `WebContents`.\n\t */\n\tLOAD = 3,\n}\n"],
  "mappings": ";;AAKA,OAAO,cAAc;AAsGd,IAAK,aAAL,kBAAKA,gBAAL;AAIN,EAAAA,wBAAA,aAAU,KAAV;AAKA,EAAAA,wBAAA,UAAO,KAAP;AAKA,EAAAA,wBAAA,YAAS,KAAT;AAdW,SAAAA;AAAA,GAAA;AAiBL,IAAK,eAAL,kBAAKC,kBAAL;AAIN,EAAAA,4BAAA,WAAQ,KAAR;AAKA,EAAAA,4BAAA,UAAO,KAAP;AAKA,EAAAA,4BAAA,YAAS,KAAT;AAKA,EAAAA,4BAAA,UAAO,KAAP;AAnBW,SAAAA;AAAA,GAAA;AAgCL,MAAM,qBAAqB,wBAAC,OAAO,oBAAqC;AAAA,EAC9E,OAAO;AAAA,EACP,QAAQ;AAAA,EACR;AACD,IAJkC;AAM3B,MAAM,wBAAwB,6BAAoB;AAQxD,QAAM,QAAQ;AACd,QAAM,SAAS;AACf,QAAM,WAAW,SAAS,OAAO,kBAAkB,EAAE;AACrD,QAAM,IAAI,KAAK,IAAI,SAAS,IAAI,SAAS,QAAQ,IAAI,QAAQ,GAAG,CAAC;AACjE,QAAM,IAAI,KAAK,IAAI,SAAS,IAAI,SAAS,SAAS,IAAI,SAAS,GAAG,CAAC;AAEnE,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,EACP;AACD,GArBqC;AAuB9B,IAAK,aAAL,kBAAKC,gBAAL;AACN,EAAAA,wBAAA,eAAY,KAAZ;AACA,EAAAA,wBAAA,YAAS,KAAT;AACA,EAAAA,wBAAA,eAAY,KAAZ;AACA,EAAAA,wBAAA,gBAAa,KAAb;AAJW,SAAAA;AAAA,GAAA;AAeL,IAAK,cAAL,kBAAKC,iBAAL;AAIN,EAAAA,0BAAA,kBAAe,KAAf;AAKA,EAAAA,0BAAA,kBAAe,KAAf;AAKA,EAAAA,0BAAA,UAAO,KAAP;AAdW,SAAAA;AAAA,GAAA;",
  "names": ["LoadReason", "UnloadReason", "WindowMode", "WindowError"]
}
