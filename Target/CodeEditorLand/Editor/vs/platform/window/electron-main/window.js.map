{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/window/electron-main/window.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport electron from 'electron';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { ISerializableCommandAction } from '../../action/common/action.js';\nimport { NativeParsedArgs } from '../../environment/common/argv.js';\nimport { IUserDataProfile } from '../../userDataProfile/common/userDataProfile.js';\nimport { INativeWindowConfiguration } from '../common/window.js';\nimport { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from '../../workspace/common/workspace.js';\n\nexport interface IBaseWindow extends IDisposable {\n\n\treadonly onDidMaximize: Event<void>;\n\treadonly onDidUnmaximize: Event<void>;\n\treadonly onDidTriggerSystemContextMenu: Event<{ readonly x: number; readonly y: number }>;\n\treadonly onDidEnterFullScreen: Event<void>;\n\treadonly onDidLeaveFullScreen: Event<void>;\n\treadonly onDidClose: Event<void>;\n\n\treadonly id: number;\n\treadonly win: electron.BrowserWindow | null;\n\n\treadonly lastFocusTime: number;\n\tfocus(options?: { force: boolean }): void;\n\n\tsetRepresentedFilename(name: string): void;\n\tgetRepresentedFilename(): string | undefined;\n\n\tsetDocumentEdited(edited: boolean): void;\n\tisDocumentEdited(): boolean;\n\n\thandleTitleDoubleClick(): void;\n\n\treadonly isFullScreen: boolean;\n\ttoggleFullScreen(): void;\n\n\tupdateWindowControls(options: { height?: number; backgroundColor?: string; foregroundColor?: string }): void;\n\n\tmatches(webContents: electron.WebContents): boolean;\n}\n\nexport interface ICodeWindow extends IBaseWindow {\n\n\treadonly onWillLoad: Event<ILoadEvent>;\n\treadonly onDidSignalReady: Event<void>;\n\treadonly onDidDestroy: Event<void>;\n\n\treadonly whenClosedOrLoaded: Promise<void>;\n\n\treadonly config: INativeWindowConfiguration | undefined;\n\n\treadonly openedWorkspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\treadonly profile?: IUserDataProfile;\n\n\treadonly backupPath?: string;\n\n\treadonly remoteAuthority?: string;\n\n\treadonly isExtensionDevelopmentHost: boolean;\n\treadonly isExtensionTestHost: boolean;\n\n\treadonly isReady: boolean;\n\tready(): Promise<ICodeWindow>;\n\tsetReady(): void;\n\n\taddTabbedWindow(window: ICodeWindow): void;\n\n\tload(config: INativeWindowConfiguration, options?: { isReload?: boolean }): void;\n\treload(cli?: NativeParsedArgs): void;\n\n\tclose(): void;\n\n\tgetBounds(): electron.Rectangle;\n\n\tsend(channel: string, ...args: any[]): void;\n\tsendWhenReady(channel: string, token: CancellationToken, ...args: any[]): void;\n\n\tupdateTouchBar(items: ISerializableCommandAction[][]): void;\n\n\tnotifyZoomLevel(zoomLevel: number | undefined): void;\n\n\tserializeWindowState(): IWindowState;\n}\n\nexport const enum LoadReason {\n\n\t/**\n\t * The window is loaded for the first time.\n\t */\n\tINITIAL = 1,\n\n\t/**\n\t * The window is loaded into a different workspace context.\n\t */\n\tLOAD,\n\n\t/**\n\t * The window is reloaded.\n\t */\n\tRELOAD\n}\n\nexport const enum UnloadReason {\n\n\t/**\n\t * The window is closed.\n\t */\n\tCLOSE = 1,\n\n\t/**\n\t * All windows unload because the application quits.\n\t */\n\tQUIT,\n\n\t/**\n\t * The window is reloaded.\n\t */\n\tRELOAD,\n\n\t/**\n\t * The window is loaded into a different workspace context.\n\t */\n\tLOAD\n}\n\nexport interface IWindowState {\n\twidth?: number;\n\theight?: number;\n\tx?: number;\n\ty?: number;\n\tmode?: WindowMode;\n\tzoomLevel?: number;\n\treadonly display?: number;\n}\n\nexport const defaultWindowState = function (mode = WindowMode.Normal): IWindowState {\n\treturn {\n\t\twidth: 1024,\n\t\theight: 768,\n\t\tmode\n\t};\n};\n\nexport const defaultAuxWindowState = function (): IWindowState {\n\n\t// Auxiliary windows are being created from a `window.open` call\n\t// that sets `windowFeatures` that encode the desired size and\n\t// position of the new window (`top`, `left`).\n\t// In order to truly override this to a good default window state\n\t// we need to set not only width and height but also x and y to\n\t// a good location on the primary display.\n\n\tconst width = 800;\n\tconst height = 600;\n\tconst workArea = electron.screen.getPrimaryDisplay().workArea;\n\tconst x = Math.max(workArea.x + (workArea.width / 2) - (width / 2), 0);\n\tconst y = Math.max(workArea.y + (workArea.height / 2) - (height / 2), 0);\n\n\treturn {\n\t\tx,\n\t\ty,\n\t\twidth,\n\t\theight,\n\t\tmode: WindowMode.Normal\n\t};\n};\n\nexport const enum WindowMode {\n\tMaximized,\n\tNormal,\n\tMinimized, // not used anymore, but also cannot remove due to existing stored UI state (needs migration)\n\tFullscreen\n}\n\nexport interface ILoadEvent {\n\treadonly workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined;\n\treadonly reason: LoadReason;\n}\n\nexport const enum WindowError {\n\n\t/**\n\t * Maps to the `unresponsive` event on a `BrowserWindow`.\n\t */\n\tUNRESPONSIVE = 1,\n\n\t/**\n\t * Maps to the `render-process-gone` event on a `WebContents`.\n\t */\n\tPROCESS_GONE = 2,\n\n\t/**\n\t * Maps to the `did-fail-load` event on a `WebContents`.\n\t */\n\tLOAD = 3\n}\n"],
  "mappings": ";;AAKA,OAAO,cAAc;AACrB,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,kCAAkC;AAC3C,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,kCAAkC;AAC3C,SAAS,kCAAkC,4BAA4B;AA6EhE,IAAW,aAAX,kBAAWA,gBAAX;AAKN,EAAAA,wBAAA,aAAU,KAAV;AAKA,EAAAA,wBAAA;AAKA,EAAAA,wBAAA;AAfiB,SAAAA;AAAA,GAAA;AAkBX,IAAW,eAAX,kBAAWC,kBAAX;AAKN,EAAAA,4BAAA,WAAQ,KAAR;AAKA,EAAAA,4BAAA;AAKA,EAAAA,4BAAA;AAKA,EAAAA,4BAAA;AApBiB,SAAAA;AAAA,GAAA;AAiCX,MAAM,qBAAqB,gCAAU,OAAO,gBAAiC;AACnF,SAAO;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR;AAAA,EACD;AACD,GANkC;AAQ3B,MAAM,wBAAwB,kCAA0B;AAS9D,QAAM,QAAQ;AACd,QAAM,SAAS;AACf,QAAM,WAAW,SAAS,OAAO,kBAAkB,EAAE;AACrD,QAAM,IAAI,KAAK,IAAI,SAAS,IAAK,SAAS,QAAQ,IAAM,QAAQ,GAAI,CAAC;AACrE,QAAM,IAAI,KAAK,IAAI,SAAS,IAAK,SAAS,SAAS,IAAM,SAAS,GAAI,CAAC;AAEvE,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,EACP;AACD,GAtBqC;AAwB9B,IAAW,aAAX,kBAAWC,gBAAX;AACN,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AAJiB,SAAAA;AAAA,GAAA;AAYX,IAAW,cAAX,kBAAWC,iBAAX;AAKN,EAAAA,0BAAA,kBAAe,KAAf;AAKA,EAAAA,0BAAA,kBAAe,KAAf;AAKA,EAAAA,0BAAA,UAAO,KAAP;AAfiB,SAAAA;AAAA,GAAA;",
  "names": ["LoadReason", "UnloadReason", "WindowMode", "WindowError"]
}
