{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/common/telemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type {\n\tClassifiedEvent,\n\tIGDPRProperty,\n\tOmitMetadata,\n\tStrictPropertyCheck,\n} from \"./gdprTypings.js\";\n\nexport const ITelemetryService =\n\tcreateDecorator<ITelemetryService>(\"telemetryService\");\n\nexport interface ITelemetryData {\n\tfrom?: string;\n\ttarget?: string;\n\t[key: string]: any;\n}\n\nexport interface ITelemetryService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly telemetryLevel: TelemetryLevel;\n\n\treadonly sessionId: string;\n\treadonly machineId: string;\n\treadonly sqmId: string;\n\treadonly devDeviceId: string;\n\treadonly firstSessionDate: string;\n\treadonly msftInternal?: boolean;\n\n\t/**\n\t * Whether error telemetry will get sent. If false, `publicLogError` will no-op.\n\t */\n\treadonly sendErrorTelemetry: boolean;\n\n\t/**\n\t * @deprecated Use publicLog2 and the typescript GDPR annotation where possible\n\t */\n\tpublicLog(eventName: string, data?: ITelemetryData): void;\n\n\t/**\n\t * Sends a telemetry event that has been privacy approved.\n\t * Do not call this unless you have been given approval.\n\t */\n\tpublicLog2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n\n\t/**\n\t * @deprecated Use publicLogError2 and the typescript GDPR annotation where possible\n\t */\n\tpublicLogError(errorEventName: string, data?: ITelemetryData): void;\n\n\tpublicLogError2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n\n\tsetExperimentProperty(name: string, value: string): void;\n}\n\nexport interface ITelemetryEndpoint {\n\tid: string;\n\taiKey: string;\n\tsendErrorTelemetry: boolean;\n}\n\nexport const ICustomEndpointTelemetryService =\n\tcreateDecorator<ICustomEndpointTelemetryService>(\n\t\t\"customEndpointTelemetryService\",\n\t);\n\nexport interface ICustomEndpointTelemetryService {\n\treadonly _serviceBrand: undefined;\n\n\tpublicLog(\n\t\tendpoint: ITelemetryEndpoint,\n\t\teventName: string,\n\t\tdata?: ITelemetryData,\n\t): void;\n\tpublicLogError(\n\t\tendpoint: ITelemetryEndpoint,\n\t\terrorEventName: string,\n\t\tdata?: ITelemetryData,\n\t): void;\n}\n\n// Keys\nexport const currentSessionDateStorageKey = \"telemetry.currentSessionDate\";\nexport const firstSessionDateStorageKey = \"telemetry.firstSessionDate\";\nexport const lastSessionDateStorageKey = \"telemetry.lastSessionDate\";\nexport const machineIdKey = \"telemetry.machineId\";\nexport const sqmIdKey = \"telemetry.sqmId\";\nexport const devDeviceIdKey = \"telemetry.devDeviceId\";\n\n// Configuration Keys\nexport const TELEMETRY_SECTION_ID = \"telemetry\";\nexport const TELEMETRY_SETTING_ID = \"telemetry.telemetryLevel\";\nexport const TELEMETRY_CRASH_REPORTER_SETTING_ID =\n\t\"telemetry.enableCrashReporter\";\nexport const TELEMETRY_OLD_SETTING_ID = \"telemetry.enableTelemetry\";\n\nexport enum TelemetryLevel {\n\tNONE = 0,\n\tCRASH = 1,\n\tERROR = 2,\n\tUSAGE = 3,\n}\n\nexport enum TelemetryConfiguration {\n\tOFF = \"off\",\n\tCRASH = \"crash\",\n\tERROR = \"error\",\n\tON = \"all\",\n}\n\nexport interface ICommonProperties {\n\t[name: string]: string | boolean | undefined;\n}\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAQzB,MAAM,oBACZ,gBAAmC,kBAAkB;AA0D/C,MAAM,kCACZ;AAAA,EACC;AACD;AAkBM,MAAM,+BAA+B;AACrC,MAAM,6BAA6B;AACnC,MAAM,4BAA4B;AAClC,MAAM,eAAe;AACrB,MAAM,WAAW;AACjB,MAAM,iBAAiB;AAGvB,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,sCACZ;AACM,MAAM,2BAA2B;AAEjC,IAAK,iBAAL,kBAAKA,oBAAL;AACN,EAAAA,gCAAA,UAAO,KAAP;AACA,EAAAA,gCAAA,WAAQ,KAAR;AACA,EAAAA,gCAAA,WAAQ,KAAR;AACA,EAAAA,gCAAA,WAAQ,KAAR;AAJW,SAAAA;AAAA,GAAA;AAOL,IAAK,yBAAL,kBAAKC,4BAAL;AACN,EAAAA,wBAAA,SAAM;AACN,EAAAA,wBAAA,WAAQ;AACR,EAAAA,wBAAA,WAAQ;AACR,EAAAA,wBAAA,QAAK;AAJM,SAAAA;AAAA,GAAA;",
  "names": ["TelemetryLevel", "TelemetryConfiguration"]
}
