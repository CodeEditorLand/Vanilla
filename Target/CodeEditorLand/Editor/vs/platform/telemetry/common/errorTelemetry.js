import{binarySearch as n}from"../../../base/common/arrays.js";import{errorHandler as a,ErrorNoTelemetry as l}from"../../../base/common/errors.js";import{DisposableStore as c,toDisposable as f}from"../../../base/common/lifecycle.js";import{safeStringify as m}from"../../../base/common/objects.js";import{FileOperationError as u}from"../../files/common/files.js";import"./telemetry.js";var s;(e=>{function h(r,t){return r.callstack<t.callstack?-1:r.callstack>t.callstack?1:0}e.compare=h})(s||={});class o{static ERROR_FLUSH_TIMEOUT=5*1e3;_telemetryService;_flushDelay;_flushHandle=-1;_buffer=[];_disposables=new c;constructor(e,r=o.ERROR_FLUSH_TIMEOUT){this._telemetryService=e,this._flushDelay=r;const t=a.addListener(i=>this._onErrorEvent(i));this._disposables.add(f(t)),this.installErrorListeners()}dispose(){clearTimeout(this._flushHandle),this._flushBuffer(),this._disposables.dispose()}installErrorListeners(){}_onErrorEvent(e){if(!e||e.code||(e.detail&&e.detail.stack&&(e=e.detail),l.isErrorNoTelemetry(e)||e instanceof u||typeof e?.message=="string"&&e.message.includes("Unable to read file")))return;const r=Array.isArray(e.stack)?e.stack.join(`
`):e.stack,t=e.message?e.message:m(e);r&&this._enqueue({msg:t,callstack:r})}_enqueue(e){const r=n(this._buffer,e,s.compare);r<0?(e.count=1,this._buffer.splice(~r,0,e)):(this._buffer[r].count||(this._buffer[r].count=0),this._buffer[r].count+=1),this._flushHandle===-1&&(this._flushHandle=setTimeout(()=>{this._flushBuffer(),this._flushHandle=-1},this._flushDelay))}_flushBuffer(){for(const e of this._buffer)this._telemetryService.publicLogError2("UnhandledError",e);this._buffer.length=0}}export{s as ErrorEvent,o as default};
