{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/common/telemetryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { mixin } from \"../../../base/common/objects.js\";\nimport { isWeb } from \"../../../base/common/platform.js\";\nimport { escapeRegExpCharacters } from \"../../../base/common/strings.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport {\n\tConfigurationScope,\n\tExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../configuration/common/configurationRegistry.js\";\nimport product from \"../../product/common/product.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\nimport type {\n\tClassifiedEvent,\n\tIGDPRProperty,\n\tOmitMetadata,\n\tStrictPropertyCheck,\n} from \"./gdprTypings.js\";\nimport {\n\ttype ICommonProperties,\n\ttype ITelemetryData,\n\ttype ITelemetryService,\n\tTELEMETRY_CRASH_REPORTER_SETTING_ID,\n\tTELEMETRY_OLD_SETTING_ID,\n\tTELEMETRY_SECTION_ID,\n\tTELEMETRY_SETTING_ID,\n\tTelemetryConfiguration,\n\tTelemetryLevel,\n} from \"./telemetry.js\";\nimport {\n\ttype ITelemetryAppender,\n\tcleanData,\n\tgetTelemetryLevel,\n} from \"./telemetryUtils.js\";\n\nexport interface ITelemetryServiceConfig {\n\tappenders: ITelemetryAppender[];\n\tsendErrorTelemetry?: boolean;\n\tcommonProperties?: ICommonProperties;\n\tpiiPaths?: string[];\n}\n\nexport class TelemetryService implements ITelemetryService {\n\tstatic readonly IDLE_START_EVENT_NAME = \"UserIdleStart\";\n\tstatic readonly IDLE_STOP_EVENT_NAME = \"UserIdleStop\";\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly sessionId: string;\n\treadonly machineId: string;\n\treadonly sqmId: string;\n\treadonly devDeviceId: string;\n\treadonly firstSessionDate: string;\n\treadonly msftInternal: boolean | undefined;\n\n\tprivate _appenders: ITelemetryAppender[];\n\tprivate _commonProperties: ICommonProperties;\n\tprivate _experimentProperties: { [name: string]: string } = {};\n\tprivate _piiPaths: string[];\n\tprivate _telemetryLevel: TelemetryLevel;\n\tprivate _sendErrorTelemetry: boolean;\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate _cleanupPatterns: RegExp[] = [];\n\n\tconstructor(\n\t\tconfig: ITelemetryServiceConfig,\n\t\t@IConfigurationService private _configurationService: IConfigurationService,\n\t\t@IProductService private _productService: IProductService\n\t) {\n\t\tthis._appenders = config.appenders;\n\t\tthis._commonProperties = config.commonProperties ?? Object.create(null);\n\n\t\tthis.sessionId = this._commonProperties['sessionID'] as string;\n\t\tthis.machineId = this._commonProperties['common.machineId'] as string;\n\t\tthis.sqmId = this._commonProperties['common.sqmId'] as string;\n\t\tthis.devDeviceId = this._commonProperties['common.devDeviceId'] as string;\n\t\tthis.firstSessionDate = this._commonProperties['common.firstSessionDate'] as string;\n\t\tthis.msftInternal = this._commonProperties['common.msftInternal'] as boolean | undefined;\n\n\t\tthis._piiPaths = config.piiPaths || [];\n\t\tthis._telemetryLevel = TelemetryLevel.USAGE;\n\t\tthis._sendErrorTelemetry = !!config.sendErrorTelemetry;\n\n\t\t// static cleanup pattern for: `vscode-file:///DANGEROUS/PATH/resources/app/Useful/Information`\n\t\tthis._cleanupPatterns = [/(vscode-)?file:\\/\\/\\/.*?\\/resources\\/app\\//gi];\n\n\t\tfor (const piiPath of this._piiPaths) {\n\t\t\tthis._cleanupPatterns.push(new RegExp(escapeRegExpCharacters(piiPath), 'gi'));\n\n\t\t\tif (piiPath.indexOf('\\\\') >= 0) {\n\t\t\t\tthis._cleanupPatterns.push(new RegExp(escapeRegExpCharacters(piiPath.replace(/\\\\/g, '/')), 'gi'));\n\t\t\t}\n\t\t}\n\n\t\tthis._updateTelemetryLevel();\n\t\tthis._disposables.add(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\t// Check on the telemetry settings and update the state if changed\n\t\t\tconst affectsTelemetryConfig =\n\t\t\t\te.affectsConfiguration(TELEMETRY_SETTING_ID)\n\t\t\t\t|| e.affectsConfiguration(TELEMETRY_OLD_SETTING_ID)\n\t\t\t\t|| e.affectsConfiguration(TELEMETRY_CRASH_REPORTER_SETTING_ID);\n\t\t\tif (affectsTelemetryConfig) {\n\t\t\t\tthis._updateTelemetryLevel();\n\t\t\t}\n\t\t}));\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\tthis._experimentProperties[name] = value;\n\t}\n\n\tprivate _updateTelemetryLevel(): void {\n\t\tlet level = getTelemetryLevel(this._configurationService);\n\t\tconst collectableTelemetry =\n\t\t\tthis._productService.enabledTelemetryLevels;\n\t\t// Also ensure that error telemetry is respecting the product configuration for collectable telemetry\n\t\tif (collectableTelemetry) {\n\t\t\tthis._sendErrorTelemetry = this.sendErrorTelemetry\n\t\t\t\t? collectableTelemetry.error\n\t\t\t\t: false;\n\t\t\t// Make sure the telemetry level from the service is the minimum of the config and product\n\t\t\tconst maxCollectableTelemetryLevel = collectableTelemetry.usage\n\t\t\t\t? TelemetryLevel.USAGE\n\t\t\t\t: collectableTelemetry.error\n\t\t\t\t\t? TelemetryLevel.ERROR\n\t\t\t\t\t: TelemetryLevel.NONE;\n\t\t\tlevel = Math.min(level, maxCollectableTelemetryLevel);\n\t\t}\n\n\t\tthis._telemetryLevel = level;\n\t}\n\n\tget sendErrorTelemetry(): boolean {\n\t\treturn this._sendErrorTelemetry;\n\t}\n\n\tget telemetryLevel(): TelemetryLevel {\n\t\treturn this._telemetryLevel;\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _log(\n\t\teventName: string,\n\t\teventLevel: TelemetryLevel,\n\t\tdata?: ITelemetryData,\n\t) {\n\t\t// don't send events when the user is optout\n\t\tif (this._telemetryLevel < eventLevel) {\n\t\t\treturn;\n\t\t}\n\n\t\t// add experiment properties\n\t\tdata = mixin(data, this._experimentProperties);\n\n\t\t// remove all PII from data\n\t\tdata = cleanData(data as Record<string, any>, this._cleanupPatterns);\n\n\t\t// add common properties\n\t\tdata = mixin(data, this._commonProperties);\n\n\t\t// Log to the appenders of sufficient level\n\t\tthis._appenders.forEach((a) => a.log(eventName, data));\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData) {\n\t\tthis._log(eventName, TelemetryLevel.USAGE, data);\n\t}\n\n\tpublicLog2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLog(eventName, data as ITelemetryData);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData) {\n\t\tif (!this._sendErrorTelemetry) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Send error event and anonymize paths\n\t\tthis._log(errorEventName, TelemetryLevel.ERROR, data);\n\t}\n\n\tpublicLogError2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLogError(eventName, data as ITelemetryData);\n\t}\n}\n\nfunction getTelemetryLevelSettingDescription(): string {\n\tconst telemetryText = localize(\n\t\t\"telemetry.telemetryLevelMd\",\n\t\t\"Controls {0} telemetry, first-party extension telemetry, and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how {0} is performing, where improvements need to be made, and how features are being used.\",\n\t\tproduct.nameLong,\n\t);\n\tconst externalLinksStatement = product.privacyStatementUrl\n\t\t? localize(\n\t\t\t\t\"telemetry.docsAndPrivacyStatement\",\n\t\t\t\t\"Read more about the [data we collect]({0}) and our [privacy statement]({1}).\",\n\t\t\t\t\"https://aka.ms/vscode-telemetry\",\n\t\t\t\tproduct.privacyStatementUrl,\n\t\t\t)\n\t\t: localize(\n\t\t\t\t\"telemetry.docsStatement\",\n\t\t\t\t\"Read more about the [data we collect]({0}).\",\n\t\t\t\t\"https://aka.ms/vscode-telemetry\",\n\t\t\t);\n\tconst restartString = isWeb\n\t\t? \"\"\n\t\t: localize(\n\t\t\t\t\"telemetry.restart\",\n\t\t\t\t\"A full restart of the application is necessary for crash reporting changes to take effect.\",\n\t\t\t);\n\n\tconst crashReportsHeader = localize(\n\t\t\"telemetry.crashReports\",\n\t\t\"Crash Reports\",\n\t);\n\tconst errorsHeader = localize(\"telemetry.errors\", \"Error Telemetry\");\n\tconst usageHeader = localize(\"telemetry.usage\", \"Usage Data\");\n\n\tconst telemetryTableDescription = localize(\n\t\t\"telemetry.telemetryLevel.tableDescription\",\n\t\t\"The following table outlines the data sent with each setting:\",\n\t);\n\tconst telemetryTable = `\n|       | ${crashReportsHeader} | ${errorsHeader} | ${usageHeader} |\n|:------|:---------------------:|:---------------:|:--------------:|\n| all   |            \u2713          |        \u2713        |        \u2713       |\n| error |            \u2713          |        \u2713        |        -       |\n| crash |            \u2713          |        -        |        -       |\n| off   |            -          |        -        |        -       |\n`;\n\n\tconst deprecatedSettingNote = localize(\n\t\t\"telemetry.telemetryLevel.deprecated\",\n\t\t\"****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*\",\n\t);\n\tconst telemetryDescription = `\n${telemetryText} ${externalLinksStatement} ${restartString}\n\n&nbsp;\n\n${telemetryTableDescription}\n${telemetryTable}\n\n&nbsp;\n\n${deprecatedSettingNote}\n`;\n\n\treturn telemetryDescription;\n}\n\nRegistry.as<IConfigurationRegistry>(\n\tExtensions.Configuration,\n).registerConfiguration({\n\tid: TELEMETRY_SECTION_ID,\n\torder: 1,\n\ttype: \"object\",\n\ttitle: localize(\"telemetryConfigurationTitle\", \"Telemetry\"),\n\tproperties: {\n\t\t[TELEMETRY_SETTING_ID]: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\n\t\t\t\tTelemetryConfiguration.ON,\n\t\t\t\tTelemetryConfiguration.ERROR,\n\t\t\t\tTelemetryConfiguration.CRASH,\n\t\t\t\tTelemetryConfiguration.OFF,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize(\n\t\t\t\t\t\"telemetry.telemetryLevel.default\",\n\t\t\t\t\t\"Sends usage data, errors, and crash reports.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"telemetry.telemetryLevel.error\",\n\t\t\t\t\t\"Sends general error telemetry and crash reports.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"telemetry.telemetryLevel.crash\",\n\t\t\t\t\t\"Sends OS level crash reports.\",\n\t\t\t\t),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"telemetry.telemetryLevel.off\",\n\t\t\t\t\t\"Disables all product telemetry.\",\n\t\t\t\t),\n\t\t\t],\n\t\t\tmarkdownDescription: getTelemetryLevelSettingDescription(),\n\t\t\tdefault: TelemetryConfiguration.ON,\n\t\t\trestricted: true,\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttags: [\"usesOnlineServices\", \"telemetry\"],\n\t\t},\n\t},\n});\n\n// Deprecated telemetry setting\nRegistry.as<IConfigurationRegistry>(\n\tExtensions.Configuration,\n).registerConfiguration({\n\tid: TELEMETRY_SECTION_ID,\n\torder: 110,\n\ttype: \"object\",\n\ttitle: localize(\"telemetryConfigurationTitle\", \"Telemetry\"),\n\tproperties: {\n\t\t[TELEMETRY_OLD_SETTING_ID]: {\n\t\t\ttype: \"boolean\",\n\t\t\tmarkdownDescription: product.privacyStatementUrl\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"telemetry.enableTelemetryMd\",\n\t\t\t\t\t\t\"Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made. [Read more]({1}) about what we collect and our privacy statement.\",\n\t\t\t\t\t\tproduct.nameLong,\n\t\t\t\t\t\tproduct.privacyStatementUrl,\n\t\t\t\t\t)\n\t\t\t\t: localize(\n\t\t\t\t\t\t\"telemetry.enableTelemetry\",\n\t\t\t\t\t\t\"Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made.\",\n\t\t\t\t\t\tproduct.nameLong,\n\t\t\t\t\t),\n\t\t\tdefault: true,\n\t\t\trestricted: true,\n\t\t\tmarkdownDeprecationMessage: localize(\n\t\t\t\t\"enableTelemetryDeprecated\",\n\t\t\t\t\"If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the {0} setting.\",\n\t\t\t\t`\\`#${TELEMETRY_SETTING_ID}#\\``,\n\t\t\t),\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttags: [\"usesOnlineServices\", \"telemetry\"],\n\t\t},\n\t},\n});\n"],
  "mappings": "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",
  "names": []
}
