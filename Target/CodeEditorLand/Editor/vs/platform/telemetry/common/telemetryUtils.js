import{cloneAndChange as g,safeStringify as c}from"../../../base/common/objects.js";import{isObject as y}from"../../../base/common/types.js";import{getRemoteName as T}from"../../remote/common/remoteHosts.js";import{verifyMicrosoftInternalDomain as I}from"./commonProperties.js";import{TELEMETRY_CRASH_REPORTER_SETTING_ID as x,TELEMETRY_OLD_SETTING_ID as E,TELEMETRY_SETTING_ID as b,TelemetryConfiguration as u,TelemetryLevel as a}from"./telemetry.js";class v{constructor(t){this.value=t}isTrustedTelemetryValue=!0}class h{telemetryLevel=a.NONE;sessionId="someValue.sessionId";machineId="someValue.machineId";sqmId="someValue.sqmId";devDeviceId="someValue.devDeviceId";firstSessionDate="someValue.firstSessionDate";sendErrorTelemetry=!1;publicLog(){}publicLog2(){}publicLogError(){}publicLogError2(){}setExperimentProperty(){}}const L=new h;class w{_serviceBrand;async publicLog(t,r,o){}async publicLogError(t,r,o){}}const O="telemetry",V="extensionTelemetryLog",z={log:()=>null,flush:()=>Promise.resolve(null)};function Z(e,t){return!t.isBuilt&&!t.disableTelemetry?!0:!(t.disableTelemetry||!e.enableTelemetry)}function M(e,t){return t.extensionTestsLocationURI?!0:!(t.isBuilt||t.disableTelemetry||e.enableTelemetry&&e.aiConfig?.ariaKey)}function G(e){const t=e.getValue(b),r=e.getValue(x);if(e.getValue(E)===!1||r===!1)return a.NONE;switch(t??u.ON){case u.ON:return a.USAGE;case u.ERROR:return a.ERROR;case u.CRASH:return a.CRASH;case u.OFF:return a.NONE}}function U(e){const t={},r={},o={};p(e,o);for(let i in o){i=i.length>150?i.substr(i.length-149):i;const n=o[i];typeof n=="number"?r[i]=n:typeof n=="boolean"?r[i]=n?1:0:typeof n=="string"?(n.length>8192,t[i]=n.substring(0,8191)):typeof n<"u"&&n!==null&&(t[i]=n)}return{properties:t,measurements:r}}const R=new Set(["ssh-remote","dev-container","attached-container","wsl","tunnel","codespaces","amlext"]);function H(e){if(!e)return"none";const t=T(e);return R.has(t)?t:"other"}function p(e,t,r=0,o){if(e)for(const i of Object.getOwnPropertyNames(e)){const n=e[i],s=o?o+i:i;Array.isArray(n)?t[s]=c(n):n instanceof Date?t[s]=n.toISOString():y(n)?r<2?p(n,t,r+1,s+"."):t[s]=c(n):t[s]=n}}function j(e,t){const r=e.msftInternalDomains||[],o=t.getValue("telemetry.internalTesting");return I(r)||o}function $(e){return[e.appRoot,e.extensionsPath,e.userHome.fsPath,e.tmpDir.fsPath,e.userDataPath]}function P(e,t){if(!e||!e.includes("/")&&!e.includes("\\"))return e;let r=e;const o=[];for(const l of t)for(;;){const m=l.exec(e);if(!m)break;o.push([m.index,l.lastIndex])}const i=/^[\\/]?(node_modules|node_modules\.asar)[\\/]/,n=/(file:\/\/)?([a-zA-Z]:(\\\\|\\|\/)|(\\\\|\\|\/))?([\w-._]+(\\\\|\\|\/))+[\w-._]*/g;let s=0;for(r="";;){const l=n.exec(e);if(!l)break;const m=o.some(([d,f])=>l.index<f&&d<n.lastIndex);!i.test(l[0])&&!m&&(r+=e.substring(s,l.index)+"<REDACTED: user-file-path>",s=n.lastIndex)}return s<e.length&&(r+=e.substr(s)),r}function S(e){if(!e)return e;const t=[{label:"Google API Key",regex:/AIza[A-Za-z0-9_-]{35}/},{label:"Slack Token",regex:/xox[pbar]-[A-Za-z0-9]/},{label:"GitHub Token",regex:/(gh[psuro]_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59})/},{label:"Generic Secret",regex:/(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/i},{label:"CLI Credentials",regex:/((login|psexec|(certutil|psexec)\.exe).{1,50}(\s-u(ser(name)?)?\s+.{3,100})?\s-(admin|user|vm|root)?p(ass(word)?)?\s+["']?[^$\-/\s]|(^|[\s\r\n\\])net(\.exe)?.{1,5}(user\s+|share\s+\/user:| user -? secrets ? set) \s + [^ $\s /])/},{label:"Email",regex:/@[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+/}];for(const r of t)if(r.regex.test(e))return`<REDACTED: ${r.label}>`;return e}function B(e,t){return g(e,r=>{if(r instanceof v||Object.hasOwnProperty.call(r,"isTrustedTelemetryValue"))return r.value;if(typeof r=="string"){let o=r.replaceAll("%20"," ");o=P(o,t);for(const i of t)o=o.replace(i,"");return o=S(o),o}})}export{z as NullAppender,w as NullEndpointTelemetryService,L as NullTelemetryService,h as NullTelemetryServiceShape,v as TelemetryTrustedValue,B as cleanData,H as cleanRemoteAuthority,V as extensionTelemetryLogChannelId,$ as getPiiPathsFromEnvironment,G as getTelemetryLevel,j as isInternalTelemetry,M as isLoggingOnly,Z as supportsTelemetry,O as telemetryLogId,U as validateTelemetryData};
