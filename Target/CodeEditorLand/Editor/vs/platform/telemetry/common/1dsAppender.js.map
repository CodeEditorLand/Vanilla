{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/common/1dsAppender.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IExtendedConfiguration, IExtendedTelemetryItem, ITelemetryItem, ITelemetryUnloadState } from '@microsoft/1ds-core-js';\nimport type { IChannelConfiguration, IXHROverride, PostChannel } from '@microsoft/1ds-post-js';\nimport { importAMDNodeModule } from '../../../amdX.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { mixin } from '../../../base/common/objects.js';\nimport { isWeb } from '../../../base/common/platform.js';\nimport { ITelemetryAppender, validateTelemetryData } from './telemetryUtils.js';\n\n// Interface type which is a subset of @microsoft/1ds-core-js AppInsightsCore.\n// Allows us to more easily build mock objects for testing as the interface is quite large and we only need a few properties.\nexport interface IAppInsightsCore {\n\tpluginVersionString: string;\n\ttrack(item: ITelemetryItem | IExtendedTelemetryItem): void;\n\tunload(isAsync: boolean, unloadComplete: (unloadState: ITelemetryUnloadState) => void): void;\n}\n\nconst endpointUrl = 'https://mobile.events.data.microsoft.com/OneCollector/1.0';\nconst endpointHealthUrl = 'https://mobile.events.data.microsoft.com/ping';\n\nasync function getClient(instrumentationKey: string, addInternalFlag?: boolean, xhrOverride?: IXHROverride): Promise<IAppInsightsCore> {\n\t// ESM-comment-begin\n\t// if (isWeb) { /* fix the import warning */ }\n\t// const oneDs = await importAMDNodeModule<typeof import('@microsoft/1ds-core-js')>('@microsoft/1ds-core-js', 'dist/ms.core.js');\n\t// const postPlugin = await importAMDNodeModule<typeof import('@microsoft/1ds-post-js')>('@microsoft/1ds-post-js', 'dist/ms.post.js');\n\t// ESM-comment-end\n\t// ESM-uncomment-begin\n\t// eslint-disable-next-line local/code-amd-node-module\n\tconst oneDs = isWeb ? await importAMDNodeModule<typeof import('@microsoft/1ds-core-js')>('@microsoft/1ds-core-js', 'bundle/ms.core.min.js') : await import('@microsoft/1ds-core-js');\n\t// eslint-disable-next-line local/code-amd-node-module\n\tconst postPlugin = isWeb ? await importAMDNodeModule<typeof import('@microsoft/1ds-post-js')>('@microsoft/1ds-post-js', 'bundle/ms.post.min.js') : await import('@microsoft/1ds-post-js');\n\t// ESM-uncomment-end\n\n\tconst appInsightsCore = new oneDs.AppInsightsCore();\n\tconst collectorChannelPlugin: PostChannel = new postPlugin.PostChannel();\n\t// Configure the app insights core to send to collector++ and disable logging of debug info\n\tconst coreConfig: IExtendedConfiguration = {\n\t\tinstrumentationKey,\n\t\tendpointUrl,\n\t\tloggingLevelTelemetry: 0,\n\t\tloggingLevelConsole: 0,\n\t\tdisableCookiesUsage: true,\n\t\tdisableDbgExt: true,\n\t\tdisableInstrumentationKeyValidation: true,\n\t\tchannels: [[\n\t\t\tcollectorChannelPlugin\n\t\t]]\n\t};\n\n\tif (xhrOverride) {\n\t\tcoreConfig.extensionConfig = {};\n\t\t// Configure the channel to use a XHR Request override since it's not available in node\n\t\tconst channelConfig: IChannelConfiguration = {\n\t\t\talwaysUseXhrOverride: true,\n\t\t\tignoreMc1Ms0CookieProcessing: true,\n\t\t\thttpXHROverride: xhrOverride\n\t\t};\n\t\tcoreConfig.extensionConfig[collectorChannelPlugin.identifier] = channelConfig;\n\t}\n\n\tappInsightsCore.initialize(coreConfig, []);\n\n\tappInsightsCore.addTelemetryInitializer((envelope) => {\n\t\t// Opt the user out of 1DS data sharing\n\t\tenvelope['ext'] = envelope['ext'] ?? {};\n\t\tenvelope['ext']['web'] = envelope['ext']['web'] ?? {};\n\t\tenvelope['ext']['web']['consentDetails'] = '{\"GPC_DataSharingOptIn\":false}';\n\n\t\tif (addInternalFlag) {\n\t\t\tenvelope['ext']['utc'] = envelope['ext']['utc'] ?? {};\n\t\t\t// Sets it to be internal only based on Windows UTC flagging\n\t\t\tenvelope['ext']['utc']['flags'] = 0x0000811ECD;\n\t\t}\n\t});\n\n\treturn appInsightsCore;\n}\n\n// TODO @lramos15 maybe make more in line with src/vs/platform/telemetry/browser/appInsightsAppender.ts with caching support\nexport abstract class AbstractOneDataSystemAppender implements ITelemetryAppender {\n\n\tprotected _aiCoreOrKey: IAppInsightsCore | string | undefined;\n\tprivate _asyncAiCore: Promise<IAppInsightsCore> | null;\n\tprotected readonly endPointUrl = endpointUrl;\n\tprotected readonly endPointHealthUrl = endpointHealthUrl;\n\n\tconstructor(\n\t\tprivate readonly _isInternalTelemetry: boolean,\n\t\tprivate _eventPrefix: string,\n\t\tprivate _defaultData: { [key: string]: any } | null,\n\t\tiKeyOrClientFactory: string | (() => IAppInsightsCore), // allow factory function for testing\n\t\tprivate _xhrOverride?: IXHROverride\n\t) {\n\t\tif (!this._defaultData) {\n\t\t\tthis._defaultData = {};\n\t\t}\n\n\t\tif (typeof iKeyOrClientFactory === 'function') {\n\t\t\tthis._aiCoreOrKey = iKeyOrClientFactory();\n\t\t} else {\n\t\t\tthis._aiCoreOrKey = iKeyOrClientFactory;\n\t\t}\n\t\tthis._asyncAiCore = null;\n\t}\n\n\tprivate _withAIClient(callback: (aiCore: IAppInsightsCore) => void): void {\n\t\tif (!this._aiCoreOrKey) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof this._aiCoreOrKey !== 'string') {\n\t\t\tcallback(this._aiCoreOrKey);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._asyncAiCore) {\n\t\t\tthis._asyncAiCore = getClient(this._aiCoreOrKey, this._isInternalTelemetry, this._xhrOverride);\n\t\t}\n\n\t\tthis._asyncAiCore.then(\n\t\t\t(aiClient) => {\n\t\t\t\tcallback(aiClient);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t);\n\t}\n\n\tlog(eventName: string, data?: any): void {\n\t\tif (!this._aiCoreOrKey) {\n\t\t\treturn;\n\t\t}\n\t\tdata = mixin(data, this._defaultData);\n\t\tdata = validateTelemetryData(data);\n\t\tconst name = this._eventPrefix + '/' + eventName;\n\n\t\ttry {\n\t\t\tthis._withAIClient((aiClient) => {\n\t\t\t\taiClient.pluginVersionString = data?.properties.version ?? 'Unknown';\n\t\t\t\taiClient.track({\n\t\t\t\t\tname,\n\t\t\t\t\tbaseData: { name, properties: data?.properties, measurements: data?.measurements }\n\t\t\t\t});\n\t\t\t});\n\t\t} catch { }\n\t}\n\n\tflush(): Promise<any> {\n\t\tif (this._aiCoreOrKey) {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tthis._withAIClient((aiClient) => {\n\t\t\t\t\taiClient.unload(true, () => {\n\t\t\t\t\t\tthis._aiCoreOrKey = undefined;\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
