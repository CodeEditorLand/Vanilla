var S=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var g=(o,e,t,r)=>{for(var i=r>1?void 0:r?P(e,t):e,a=o.length-1,m;a>=0;a--)(m=o[a])&&(i=(r?m(e,t,i):m(i))||i);return r&&i&&S(e,t,i),i},d=(o,e)=>(t,r)=>e(t,r,o);import{DisposableStore as L}from"../../../../vs/base/common/lifecycle.js";import{mixin as h}from"../../../../vs/base/common/objects.js";import{isWeb as C}from"../../../../vs/base/common/platform.js";import{escapeRegExpCharacters as f}from"../../../../vs/base/common/strings.js";import{localize as s}from"../../../../vs/nls.js";import{IConfigurationService as D}from"../../../../vs/platform/configuration/common/configuration.js";import{ConfigurationScope as u,Extensions as v}from"../../../../vs/platform/configuration/common/configurationRegistry.js";import n from"../../../../vs/platform/product/common/product.js";import{IProductService as R}from"../../../../vs/platform/product/common/productService.js";import{Registry as T}from"../../../../vs/platform/registry/common/platform.js";import"../../../../vs/platform/telemetry/common/gdprTypings.js";import{TELEMETRY_CRASH_REPORTER_SETTING_ID as x,TELEMETRY_OLD_SETTING_ID as _,TELEMETRY_SECTION_ID as E,TELEMETRY_SETTING_ID as y,TelemetryConfiguration as p,TelemetryLevel as l}from"../../../../vs/platform/telemetry/common/telemetry.js";import{cleanData as w,getTelemetryLevel as O}from"../../../../vs/platform/telemetry/common/telemetryUtils.js";let c=class{constructor(e,t,r){this._configurationService=t;this._productService=r;this._appenders=e.appenders,this._commonProperties=e.commonProperties??Object.create(null),this.sessionId=this._commonProperties.sessionID,this.machineId=this._commonProperties["common.machineId"],this.sqmId=this._commonProperties["common.sqmId"],this.devDeviceId=this._commonProperties["common.devDeviceId"],this.firstSessionDate=this._commonProperties["common.firstSessionDate"],this.msftInternal=this._commonProperties["common.msftInternal"],this._piiPaths=e.piiPaths||[],this._telemetryLevel=l.USAGE,this._sendErrorTelemetry=!!e.sendErrorTelemetry,this._cleanupPatterns=[/(vscode-)?file:\/\/\/.*?\/resources\/app\//gi];for(const i of this._piiPaths)this._cleanupPatterns.push(new RegExp(f(i),"gi")),i.indexOf("\\")>=0&&this._cleanupPatterns.push(new RegExp(f(i.replace(/\\/g,"/")),"gi"));this._updateTelemetryLevel(),this._disposables.add(this._configurationService.onDidChangeConfiguration(i=>{(i.affectsConfiguration(y)||i.affectsConfiguration(_)||i.affectsConfiguration(x))&&this._updateTelemetryLevel()}))}static IDLE_START_EVENT_NAME="UserIdleStart";static IDLE_STOP_EVENT_NAME="UserIdleStop";sessionId;machineId;sqmId;devDeviceId;firstSessionDate;msftInternal;_appenders;_commonProperties;_experimentProperties={};_piiPaths;_telemetryLevel;_sendErrorTelemetry;_disposables=new L;_cleanupPatterns=[];setExperimentProperty(e,t){this._experimentProperties[e]=t}_updateTelemetryLevel(){let e=O(this._configurationService);const t=this._productService.enabledTelemetryLevels;if(t){this._sendErrorTelemetry=this.sendErrorTelemetry?t.error:!1;const r=t.usage?l.USAGE:t.error?l.ERROR:l.NONE;e=Math.min(e,r)}this._telemetryLevel=e}get sendErrorTelemetry(){return this._sendErrorTelemetry}get telemetryLevel(){return this._telemetryLevel}dispose(){this._disposables.dispose()}_log(e,t,r){this._telemetryLevel<t||(r=h(r,this._experimentProperties),r=w(r,this._cleanupPatterns),r=h(r,this._commonProperties),this._appenders.forEach(i=>i.log(e,r)))}publicLog(e,t){this._log(e,l.USAGE,t)}publicLog2(e,t){this.publicLog(e,t)}publicLogError(e,t){this._sendErrorTelemetry&&this._log(e,l.ERROR,t)}publicLogError2(e,t){this.publicLogError(e,t)}};c=g([d(1,D),d(2,R)],c);function A(){const o=s("telemetry.telemetryLevelMd","Controls {0} telemetry, first-party extension telemetry, and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how {0} is performing, where improvements need to be made, and how features are being used.",n.nameLong),e=n.privacyStatementUrl?s("telemetry.docsAndPrivacyStatement","Read more about the [data we collect]({0}) and our [privacy statement]({1}).","https://aka.ms/vscode-telemetry",n.privacyStatementUrl):s("telemetry.docsStatement","Read more about the [data we collect]({0}).","https://aka.ms/vscode-telemetry"),t=C?"":s("telemetry.restart","A full restart of the application is necessary for crash reporting changes to take effect."),r=s("telemetry.crashReports","Crash Reports"),i=s("telemetry.errors","Error Telemetry"),a=s("telemetry.usage","Usage Data"),m=s("telemetry.telemetryLevel.tableDescription","The following table outlines the data sent with each setting:"),I=`
|       | ${r} | ${i} | ${a} |
|:------|:---------------------:|:---------------:|:--------------:|
| all   |            \u2713          |        \u2713        |        \u2713       |
| error |            \u2713          |        \u2713        |        -       |
| crash |            \u2713          |        -        |        -       |
| off   |            -          |        -        |        -       |
`,b=s("telemetry.telemetryLevel.deprecated","****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*");return`
${o} ${e} ${t}

&nbsp;

${m}
${I}

&nbsp;

${b}
`}T.as(v.Configuration).registerConfiguration({id:E,order:1,type:"object",title:s("telemetryConfigurationTitle","Telemetry"),properties:{[y]:{type:"string",enum:[p.ON,p.ERROR,p.CRASH,p.OFF],enumDescriptions:[s("telemetry.telemetryLevel.default","Sends usage data, errors, and crash reports."),s("telemetry.telemetryLevel.error","Sends general error telemetry and crash reports."),s("telemetry.telemetryLevel.crash","Sends OS level crash reports."),s("telemetry.telemetryLevel.off","Disables all product telemetry.")],markdownDescription:A(),default:p.ON,restricted:!0,scope:u.APPLICATION,tags:["usesOnlineServices","telemetry"]}}}),T.as(v.Configuration).registerConfiguration({id:E,order:110,type:"object",title:s("telemetryConfigurationTitle","Telemetry"),properties:{[_]:{type:"boolean",markdownDescription:n.privacyStatementUrl?s("telemetry.enableTelemetryMd","Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made. [Read more]({1}) about what we collect and our privacy statement.",n.nameLong,n.privacyStatementUrl):s("telemetry.enableTelemetry","Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made.",n.nameLong),default:!0,restricted:!0,markdownDeprecationMessage:s("enableTelemetryDeprecated","If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the {0} setting.",`\`#${y}#\``),scope:u.APPLICATION,tags:["usesOnlineServices","telemetry"]}}});export{c as TelemetryService};
