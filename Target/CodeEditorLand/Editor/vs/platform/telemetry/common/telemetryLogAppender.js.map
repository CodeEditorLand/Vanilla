{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/common/telemetryLogAppender.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport {\n\tILogService,\n\ttype ILogger,\n\tILoggerService,\n\tLogLevel,\n} from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\ttype ITelemetryAppender,\n\tisLoggingOnly,\n\tsupportsTelemetry,\n\ttelemetryLogId,\n\tvalidateTelemetryData,\n} from \"./telemetryUtils.js\";\n\nexport class TelemetryLogAppender\n\textends Disposable\n\timplements ITelemetryAppender\n{\n\tprivate readonly logger: ILogger;\n\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\tprivate readonly prefix: string = \"\",\n\t) {\n\t\tsuper();\n\n\t\tconst logger = loggerService.getLogger(telemetryLogId);\n\t\tif (logger) {\n\t\t\tthis.logger = this._register(logger);\n\t\t} else {\n\t\t\t// Not a perfect check, but a nice way to indicate if we only have logging enabled for debug purposes and nothing is actually being sent\n\t\t\tconst justLoggingAndNotSending = isLoggingOnly(\n\t\t\t\tproductService,\n\t\t\t\tenvironmentService,\n\t\t\t);\n\t\t\tconst logSuffix = justLoggingAndNotSending ? \" (Not Sent)\" : \"\";\n\t\t\tconst isVisible = () =>\n\t\t\t\tsupportsTelemetry(productService, environmentService) &&\n\t\t\t\tlogService.getLevel() === LogLevel.Trace;\n\t\t\tthis.logger = this._register(\n\t\t\t\tloggerService.createLogger(telemetryLogId, {\n\t\t\t\t\tname: localize(\"telemetryLog\", \"Telemetry{0}\", logSuffix),\n\t\t\t\t\thidden: !isVisible(),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tlogService.onDidChangeLogLevel(() =>\n\t\t\t\t\tloggerService.setVisibility(telemetryLogId, isVisible()),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.logger.info(\n\t\t\t\t\"Below are logs for every telemetry event sent from VS Code once the log level is set to trace.\",\n\t\t\t);\n\t\t\tthis.logger.info(\n\t\t\t\t\"===========================================================\",\n\t\t\t);\n\t\t}\n\t}\n\n\tflush(): Promise<any> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tlog(eventName: string, data: any): void {\n\t\tthis.logger.trace(\n\t\t\t`${this.prefix}telemetry/${eventName}`,\n\t\t\tvalidateTelemetryData(data),\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,2BAA2B;AACpC;AAAA,EACC;AAAA,EAEA;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEA,IAAM,uBAAN,cACE,WAET;AAAA,EAGC,YACc,YACG,eACK,oBACJ,gBACA,SAAiB,IACjC;AACD,UAAM;AAFW;AAIjB,UAAM,SAAS,cAAc,UAAU,cAAc;AACrD,QAAI,QAAQ;AACX,WAAK,SAAS,KAAK,UAAU,MAAM;AAAA,IACpC,OAAO;AAEN,YAAM,2BAA2B;AAAA,QAChC;AAAA,QACA;AAAA,MACD;AACA,YAAM,YAAY,2BAA2B,gBAAgB;AAC7D,YAAM,YAAY,6BACjB,kBAAkB,gBAAgB,kBAAkB,KACpD,WAAW,SAAS,MAAM,SAAS,OAFlB;AAGlB,WAAK,SAAS,KAAK;AAAA,QAClB,cAAc,aAAa,gBAAgB;AAAA,UAC1C,MAAM,SAAS,gBAAgB,gBAAgB,SAAS;AAAA,UACxD,QAAQ,CAAC,UAAU;AAAA,QACpB,CAAC;AAAA,MACF;AACA,WAAK;AAAA,QACJ,WAAW;AAAA,UAAoB,MAC9B,cAAc,cAAc,gBAAgB,UAAU,CAAC;AAAA,QACxD;AAAA,MACD;AACA,WAAK,OAAO;AAAA,QACX;AAAA,MACD;AACA,WAAK,OAAO;AAAA,QACX;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EArED,OA0BA;AAAA;AAAA;AAAA,EACkB;AAAA,EA4CjB,QAAsB;AACrB,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEA,IAAI,WAAmB,MAAiB;AACvC,SAAK,OAAO;AAAA,MACX,GAAG,KAAK,MAAM,aAAa,SAAS;AAAA,MACpC,sBAAsB,IAAI;AAAA,IAC3B;AAAA,EACD;AACD;AA1Da,uBAAN;AAAA,EAOJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAVU;",
  "names": []
}
