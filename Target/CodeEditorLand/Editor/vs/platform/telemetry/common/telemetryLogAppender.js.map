{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/common/telemetryLogAppender.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { ILogService, ILogger, ILoggerService, LogLevel } from '../../log/common/log.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { ITelemetryAppender, isLoggingOnly, supportsTelemetry, telemetryLogId, validateTelemetryData } from './telemetryUtils.js';\n\nexport class TelemetryLogAppender extends Disposable implements ITelemetryAppender {\n\n\tprivate readonly logger: ILogger;\n\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\tprivate readonly prefix: string = '',\n\t) {\n\t\tsuper();\n\n\t\tconst logger = loggerService.getLogger(telemetryLogId);\n\t\tif (logger) {\n\t\t\tthis.logger = this._register(logger);\n\t\t} else {\n\t\t\t// Not a perfect check, but a nice way to indicate if we only have logging enabled for debug purposes and nothing is actually being sent\n\t\t\tconst justLoggingAndNotSending = isLoggingOnly(productService, environmentService);\n\t\t\tconst logSuffix = justLoggingAndNotSending ? ' (Not Sent)' : '';\n\t\t\tconst isVisible = () => supportsTelemetry(productService, environmentService) && logService.getLevel() === LogLevel.Trace;\n\t\t\tthis.logger = this._register(loggerService.createLogger(telemetryLogId, { name: localize('telemetryLog', \"Telemetry{0}\", logSuffix), hidden: !isVisible() }));\n\t\t\tthis._register(logService.onDidChangeLogLevel(() => loggerService.setVisibility(telemetryLogId, isVisible())));\n\t\t\tthis.logger.info('Below are logs for every telemetry event sent from VS Code once the log level is set to trace.');\n\t\t\tthis.logger.info('===========================================================');\n\t\t}\n\t}\n\n\tflush(): Promise<any> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tlog(eventName: string, data: any): void {\n\t\tthis.logger.trace(`${this.prefix}telemetry/${eventName}`, validateTelemetryData(data));\n\t}\n}\n\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,2BAA2B;AACpC,SAAS,aAAa,SAAS,gBAAgB,gBAAgB;AAC/D,SAAS,uBAAuB;AAChC,SAAS,oBAAoB,eAAe,mBAAmB,gBAAgB,6BAA6B;AAErG,IAAM,uBAAN,cAAmC,WAAyC;AAAA,EAIlF,YACc,YACG,eACK,oBACJ,gBACA,SAAiB,IACjC;AACD,UAAM;AAFW;AAIjB,UAAM,SAAS,cAAc,UAAU,cAAc;AACrD,QAAI,QAAQ;AACX,WAAK,SAAS,KAAK,UAAU,MAAM;AAAA,IACpC,OAAO;AAEN,YAAM,2BAA2B,cAAc,gBAAgB,kBAAkB;AACjF,YAAM,YAAY,2BAA2B,gBAAgB;AAC7D,YAAM,YAAY,6BAAM,kBAAkB,gBAAgB,kBAAkB,KAAK,WAAW,SAAS,MAAM,SAAS,OAAlG;AAClB,WAAK,SAAS,KAAK,UAAU,cAAc,aAAa,gBAAgB,EAAE,MAAM,SAAS,gBAAgB,gBAAgB,SAAS,GAAG,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;AAC5J,WAAK,UAAU,WAAW,oBAAoB,MAAM,cAAc,cAAc,gBAAgB,UAAU,CAAC,CAAC,CAAC;AAC7G,WAAK,OAAO,KAAK,gGAAgG;AACjH,WAAK,OAAO,KAAK,6DAA6D;AAAA,IAC/E;AAAA,EACD;AAAA,EAtCD,OAYmF;AAAA;AAAA;AAAA,EAEjE;AAAA,EA0BjB,QAAsB;AACrB,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEA,IAAI,WAAmB,MAAiB;AACvC,SAAK,OAAO,MAAM,GAAG,KAAK,MAAM,aAAa,SAAS,IAAI,sBAAsB,IAAI,CAAC;AAAA,EACtF;AACD;AAnCa,uBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GARU;",
  "names": []
}
