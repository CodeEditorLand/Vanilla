{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/common/serverTelemetryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { refineServiceDecorator } from '../../instantiation/common/instantiation.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { ClassifiedEvent, IGDPRProperty, OmitMetadata, StrictPropertyCheck } from './gdprTypings.js';\nimport { ITelemetryData, ITelemetryService, TelemetryLevel } from './telemetry.js';\nimport { ITelemetryServiceConfig, TelemetryService } from './telemetryService.js';\nimport { NullTelemetryServiceShape } from './telemetryUtils.js';\n\nexport interface IServerTelemetryService extends ITelemetryService {\n\tupdateInjectedTelemetryLevel(telemetryLevel: TelemetryLevel): Promise<void>;\n}\n\nexport class ServerTelemetryService extends TelemetryService implements IServerTelemetryService {\n\t// Because we cannot read the workspace config on the remote site\n\t// the ServerTelemetryService is responsible for knowing its telemetry level\n\t// this is done through IPC calls and initial value injections\n\tprivate _injectedTelemetryLevel: TelemetryLevel;\n\tconstructor(\n\t\tconfig: ITelemetryServiceConfig,\n\t\tinjectedTelemetryLevel: TelemetryLevel,\n\t\t@IConfigurationService _configurationService: IConfigurationService,\n\t\t@IProductService _productService: IProductService\n\t) {\n\t\tsuper(config, _configurationService, _productService);\n\t\tthis._injectedTelemetryLevel = injectedTelemetryLevel;\n\t}\n\n\toverride publicLog(eventName: string, data?: ITelemetryData) {\n\t\tif (this._injectedTelemetryLevel < TelemetryLevel.USAGE) {\n\t\t\treturn;\n\t\t}\n\t\treturn super.publicLog(eventName, data);\n\t}\n\n\toverride publicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\treturn this.publicLog(eventName, data as ITelemetryData | undefined);\n\t}\n\n\toverride publicLogError(errorEventName: string, data?: ITelemetryData) {\n\t\tif (this._injectedTelemetryLevel < TelemetryLevel.ERROR) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn super.publicLogError(errorEventName, data);\n\t}\n\n\toverride publicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\treturn this.publicLogError(eventName, data as ITelemetryData | undefined);\n\t}\n\n\tasync updateInjectedTelemetryLevel(telemetryLevel: TelemetryLevel): Promise<void> {\n\t\tif (telemetryLevel === undefined) {\n\t\t\tthis._injectedTelemetryLevel = TelemetryLevel.NONE;\n\t\t\tthrow new Error('Telemetry level cannot be undefined. This will cause infinite looping!');\n\t\t}\n\t\t// We always take the most restrictive level because we don't want multiple clients to connect and send data when one client does not consent\n\t\tthis._injectedTelemetryLevel = this._injectedTelemetryLevel ? Math.min(this._injectedTelemetryLevel, telemetryLevel) : telemetryLevel;\n\t\tif (this._injectedTelemetryLevel === TelemetryLevel.NONE) {\n\t\t\tthis.dispose();\n\t\t}\n\t}\n}\n\nexport const ServerNullTelemetryService = new class extends NullTelemetryServiceShape implements IServerTelemetryService {\n\tasync updateInjectedTelemetryLevel(): Promise<void> { return; } // No-op, telemetry is already disabled\n};\n\nexport const IServerTelemetryService = refineServiceDecorator<ITelemetryService, IServerTelemetryService>(ITelemetryService);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,6BAA6B;AACtC,SAAS,8BAA8B;AACvC,SAAS,uBAAuB;AAChC,SAAS,iBAAiB,eAAe,cAAc,2BAA2B;AAClF,SAAS,gBAAgB,mBAAmB,sBAAsB;AAClE,SAAS,yBAAyB,wBAAwB;AAC1D,SAAS,iCAAiC;AAMnC,IAAM,yBAAN,cAAqC,iBAAoD;AAAA,EAjBhG,OAiBgG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAIvF;AAAA,EACR,YACC,QACA,wBACuB,uBACN,iBAChB;AACD,UAAM,QAAQ,uBAAuB,eAAe;AACpD,SAAK,0BAA0B;AAAA,EAChC;AAAA,EAES,UAAU,WAAmB,MAAuB;AAC5D,QAAI,KAAK,0BAA0B,eAAe,OAAO;AACxD;AAAA,IACD;AACA,WAAO,MAAM,UAAU,WAAW,IAAI;AAAA,EACvC;AAAA,EAES,WAAgG,WAAmB,MAAkC;AAC7J,WAAO,KAAK,UAAU,WAAW,IAAkC;AAAA,EACpE;AAAA,EAES,eAAe,gBAAwB,MAAuB;AACtE,QAAI,KAAK,0BAA0B,eAAe,OAAO;AACxD,aAAO,QAAQ,QAAQ,MAAS;AAAA,IACjC;AACA,WAAO,MAAM,eAAe,gBAAgB,IAAI;AAAA,EACjD;AAAA,EAES,gBAAqG,WAAmB,MAAkC;AAClK,WAAO,KAAK,eAAe,WAAW,IAAkC;AAAA,EACzE;AAAA,EAEA,MAAM,6BAA6B,gBAA+C;AACjF,QAAI,mBAAmB,QAAW;AACjC,WAAK,0BAA0B,eAAe;AAC9C,YAAM,IAAI,MAAM,wEAAwE;AAAA,IACzF;AAEA,SAAK,0BAA0B,KAAK,0BAA0B,KAAK,IAAI,KAAK,yBAAyB,cAAc,IAAI;AACvH,QAAI,KAAK,4BAA4B,eAAe,MAAM;AACzD,WAAK,QAAQ;AAAA,IACd;AAAA,EACD;AACD;AAhDa,yBAAN;AAAA,EAQJ;AAAA,EACA;AAAA,GATU;AAkDN,MAAM,6BAA6B,IAAI,cAAc,0BAA6D;AAAA,EACxH,MAAM,+BAA8C;AAAE;AAAA,EAAQ;AAAA;AAC/D;AAEO,MAAM,0BAA0B,uBAAmE,iBAAiB;",
  "names": []
}
