{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/common/telemetryIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport type {\n\tIChannel,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport type { ITelemetryAppender } from \"./telemetryUtils.js\";\n\nexport interface ITelemetryLog {\n\teventName: string;\n\tdata?: any;\n}\n\nexport class TelemetryAppenderChannel implements IServerChannel {\n\tconstructor(private appenders: ITelemetryAppender[]) {}\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(\n\t\t_: unknown,\n\t\tcommand: string,\n\t\t{ eventName, data }: ITelemetryLog,\n\t): Promise<any> {\n\t\tthis.appenders.forEach((a) => a.log(eventName, data));\n\t\treturn Promise.resolve(null);\n\t}\n}\n\nexport class TelemetryAppenderClient implements ITelemetryAppender {\n\tconstructor(private channel: IChannel) {}\n\n\tlog(eventName: string, data?: any): any {\n\t\tthis.channel\n\t\t\t.call(\"log\", { eventName, data })\n\t\t\t.then(\n\t\t\t\tundefined,\n\t\t\t\t(err) => `Failed to log telemetry: ${console.warn(err)}`,\n\t\t\t);\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tflush(): Promise<void> {\n\t\t// TODO\n\t\treturn Promise.resolve();\n\t}\n}\n"],
  "mappings": ";;AAiBO,MAAM,yBAAmD;AAAA,EAC/D,YAAoB,WAAiC;AAAjC;AAAA,EAAkC;AAAA,EAlBvD,OAiBgE;AAAA;AAAA;AAAA,EAG/D,OAAU,GAAY,OAAyB;AAC9C,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,KACC,GACA,SACA,EAAE,WAAW,KAAK,GACH;AACf,SAAK,UAAU,QAAQ,CAAC,MAAM,EAAE,IAAI,WAAW,IAAI,CAAC;AACpD,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC5B;AACD;AAEO,MAAM,wBAAsD;AAAA,EAClE,YAAoB,SAAmB;AAAnB;AAAA,EAAoB;AAAA,EAnCzC,OAkCmE;AAAA;AAAA;AAAA,EAGlE,IAAI,WAAmB,MAAiB;AACvC,SAAK,QACH,KAAK,OAAO,EAAE,WAAW,KAAK,CAAC,EAC/B;AAAA,MACA;AAAA,MACA,CAAC,QAAQ,4BAA4B,QAAQ,KAAK,GAAG,CAAC;AAAA,IACvD;AAED,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC5B;AAAA,EAEA,QAAuB;AAEtB,WAAO,QAAQ,QAAQ;AAAA,EACxB;AACD;",
  "names": []
}
