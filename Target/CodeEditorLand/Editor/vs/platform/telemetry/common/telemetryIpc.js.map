{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/common/telemetryIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { IChannel, IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { ITelemetryAppender } from './telemetryUtils.js';\n\nexport interface ITelemetryLog {\n\teventName: string;\n\tdata?: any;\n}\n\nexport class TelemetryAppenderChannel implements IServerChannel {\n\n\tconstructor(private appenders: ITelemetryAppender[]) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, { eventName, data }: ITelemetryLog): Promise<any> {\n\t\tthis.appenders.forEach(a => a.log(eventName, data));\n\t\treturn Promise.resolve(null);\n\t}\n}\n\nexport class TelemetryAppenderClient implements ITelemetryAppender {\n\n\tconstructor(private channel: IChannel) { }\n\n\tlog(eventName: string, data?: any): any {\n\t\tthis.channel.call('log', { eventName, data })\n\t\t\t.then(undefined, err => `Failed to log telemetry: ${console.warn(err)}`);\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tflush(): Promise<void> {\n\t\t// TODO\n\t\treturn Promise.resolve();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,UAAU,sBAAsB;AACzC,SAAS,0BAA0B;AAO5B,MAAM,yBAAmD;AAAA,EAE/D,YAAoB,WAAiC;AAAjC;AAAA,EAAmC;AAAA,EAhBxD,OAcgE;AAAA;AAAA;AAAA,EAI/D,OAAU,GAAY,OAAyB;AAC9C,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,KAAK,GAAY,SAAiB,EAAE,WAAW,KAAK,GAAgC;AACnF,SAAK,UAAU,QAAQ,OAAK,EAAE,IAAI,WAAW,IAAI,CAAC;AAClD,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC5B;AACD;AAEO,MAAM,wBAAsD;AAAA,EAElE,YAAoB,SAAmB;AAAnB;AAAA,EAAqB;AAAA,EA9B1C,OA4BmE;AAAA;AAAA;AAAA,EAIlE,IAAI,WAAmB,MAAiB;AACvC,SAAK,QAAQ,KAAK,OAAO,EAAE,WAAW,KAAK,CAAC,EAC1C,KAAK,QAAW,SAAO,4BAA4B,QAAQ,KAAK,GAAG,CAAC,EAAE;AAExE,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC5B;AAAA,EAEA,QAAuB;AAEtB,WAAO,QAAQ,QAAQ;AAAA,EACxB;AACD;",
  "names": []
}
