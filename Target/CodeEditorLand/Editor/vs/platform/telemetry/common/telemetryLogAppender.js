var p=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var f=(g,o,t,e)=>{for(var r=e>1?void 0:e?v(o,t):o,i=g.length-1,n;i>=0;i--)(n=g[i])&&(r=(e?n(o,t,r):n(r))||r);return e&&r&&p(o,t,r),r},s=(g,o)=>(t,e)=>o(t,e,g);import{Disposable as y}from"../../../base/common/lifecycle.js";import{localize as L}from"../../../nls.js";import{IEnvironmentService as h}from"../../environment/common/environment.js";import{ILogService as I,ILoggerService as u,LogLevel as S}from"../../log/common/log.js";import{IProductService as x}from"../../product/common/productService.js";import{isLoggingOnly as P,supportsTelemetry as b,telemetryLogId as m,validateTelemetryData as D}from"./telemetryUtils.js";let l=class extends y{constructor(t,e,r,i,n=""){super();this.prefix=n;const a=e.getLogger(m);if(a)this.logger=this._register(a);else{const d=P(i,r)?" (Not Sent)":"",c=()=>b(i,r)&&t.getLevel()===S.Trace;this.logger=this._register(e.createLogger(m,{name:L("telemetryLog","Telemetry{0}",d),hidden:!c()})),this._register(t.onDidChangeLogLevel(()=>e.setVisibility(m,c()))),this.logger.info("Below are logs for every telemetry event sent from VS Code once the log level is set to trace."),this.logger.info("===========================================================")}}logger;flush(){return Promise.resolve(void 0)}log(t,e){this.logger.trace(`${this.prefix}telemetry/${t}`,D(e))}};l=f([s(0,I),s(1,u),s(2,h),s(3,x)],l);export{l as TelemetryLogAppender};
