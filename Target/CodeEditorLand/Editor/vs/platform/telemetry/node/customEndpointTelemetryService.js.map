{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/customEndpointTelemetryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FileAccess } from \"../../../base/common/network.js\";\nimport { Client as TelemetryClient } from \"../../../base/parts/ipc/node/ipc.cp.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport { ILogService, ILoggerService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\ttype ICustomEndpointTelemetryService,\n\ttype ITelemetryData,\n\ttype ITelemetryEndpoint,\n\tITelemetryService,\n} from \"../common/telemetry.js\";\nimport { TelemetryAppenderClient } from \"../common/telemetryIpc.js\";\nimport { TelemetryLogAppender } from \"../common/telemetryLogAppender.js\";\nimport { TelemetryService } from \"../common/telemetryService.js\";\n\nexport class CustomEndpointTelemetryService\n\timplements ICustomEndpointTelemetryService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate customTelemetryServices = new Map<string, ITelemetryService>();\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tprivate getCustomTelemetryService(\n\t\tendpoint: ITelemetryEndpoint,\n\t): ITelemetryService {\n\t\tif (!this.customTelemetryServices.has(endpoint.id)) {\n\t\t\tconst telemetryInfo: { [key: string]: string } =\n\t\t\t\tObject.create(null);\n\t\t\ttelemetryInfo[\"common.vscodemachineid\"] =\n\t\t\t\tthis.telemetryService.machineId;\n\t\t\ttelemetryInfo[\"common.vscodesessionid\"] =\n\t\t\t\tthis.telemetryService.sessionId;\n\t\t\tconst args = [\n\t\t\t\tendpoint.id,\n\t\t\t\tJSON.stringify(telemetryInfo),\n\t\t\t\tendpoint.aiKey,\n\t\t\t];\n\t\t\tconst client = new TelemetryClient(\n\t\t\t\tFileAccess.asFileUri(\"bootstrap-fork\").fsPath,\n\t\t\t\t{\n\t\t\t\t\tserverName: \"Debug Telemetry\",\n\t\t\t\t\ttimeout: 1000 * 60 * 5,\n\t\t\t\t\targs,\n\t\t\t\t\tenv: {\n\t\t\t\t\t\tELECTRON_RUN_AS_NODE: 1,\n\t\t\t\t\t\tVSCODE_PIPE_LOGGING: \"true\",\n\t\t\t\t\t\tVSCODE_AMD_ENTRYPOINT:\n\t\t\t\t\t\t\t\"vs/workbench/contrib/debug/node/telemetryApp\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst channel = client.getChannel(\"telemetryAppender\");\n\t\t\tconst appenders = [\n\t\t\t\tnew TelemetryAppenderClient(channel),\n\t\t\t\tnew TelemetryLogAppender(\n\t\t\t\t\tthis.logService,\n\t\t\t\t\tthis.loggerService,\n\t\t\t\t\tthis.environmentService,\n\t\t\t\t\tthis.productService,\n\t\t\t\t\t`[${endpoint.id}] `,\n\t\t\t\t),\n\t\t\t];\n\n\t\t\tthis.customTelemetryServices.set(\n\t\t\t\tendpoint.id,\n\t\t\t\tnew TelemetryService(\n\t\t\t\t\t{\n\t\t\t\t\t\tappenders,\n\t\t\t\t\t\tsendErrorTelemetry: endpoint.sendErrorTelemetry,\n\t\t\t\t\t},\n\t\t\t\t\tthis.configurationService,\n\t\t\t\t\tthis.productService,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn this.customTelemetryServices.get(endpoint.id)!;\n\t}\n\n\tpublicLog(\n\t\ttelemetryEndpoint: ITelemetryEndpoint,\n\t\teventName: string,\n\t\tdata?: ITelemetryData,\n\t) {\n\t\tconst customTelemetryService =\n\t\t\tthis.getCustomTelemetryService(telemetryEndpoint);\n\t\tcustomTelemetryService.publicLog(eventName, data);\n\t}\n\n\tpublicLogError(\n\t\ttelemetryEndpoint: ITelemetryEndpoint,\n\t\terrorEventName: string,\n\t\tdata?: ITelemetryData,\n\t) {\n\t\tconst customTelemetryService =\n\t\t\tthis.getCustomTelemetryService(telemetryEndpoint);\n\t\tcustomTelemetryService.publicLogError(errorEventName, data);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,UAAU,uBAAuB;AAC1C,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,aAAa,sBAAsB;AAC5C,SAAS,uBAAuB;AAChC;AAAA,EAIC;AAAA,OACM;AACP,SAAS,+BAA+B;AACxC,SAAS,4BAA4B;AACrC,SAAS,wBAAwB;AAE1B,IAAM,iCAAN,MAEP;AAAA,EAKC,YACyC,sBACJ,kBACN,YACG,eACK,oBACJ,gBACjC;AANuC;AACJ;AACN;AACG;AACK;AACJ;AAAA,EAC/B;AAAA,EAnCL,OAuBA;AAAA;AAAA;AAAA,EAGS,0BAA0B,oBAAI,IAA+B;AAAA,EAW7D,0BACP,UACoB;AACpB,QAAI,CAAC,KAAK,wBAAwB,IAAI,SAAS,EAAE,GAAG;AACnD,YAAM,gBACL,uBAAO,OAAO,IAAI;AACnB,oBAAc,wBAAwB,IACrC,KAAK,iBAAiB;AACvB,oBAAc,wBAAwB,IACrC,KAAK,iBAAiB;AACvB,YAAM,OAAO;AAAA,QACZ,SAAS;AAAA,QACT,KAAK,UAAU,aAAa;AAAA,QAC5B,SAAS;AAAA,MACV;AACA,YAAM,SAAS,IAAI;AAAA,QAClB,WAAW,UAAU,gBAAgB,EAAE;AAAA,QACvC;AAAA,UACC,YAAY;AAAA,UACZ,SAAS,MAAO,KAAK;AAAA,UACrB;AAAA,UACA,KAAK;AAAA,YACJ,sBAAsB;AAAA,YACtB,qBAAqB;AAAA,YACrB,uBACC;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAEA,YAAM,UAAU,OAAO,WAAW,mBAAmB;AACrD,YAAM,YAAY;AAAA,QACjB,IAAI,wBAAwB,OAAO;AAAA,QACnC,IAAI;AAAA,UACH,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,IAAI,SAAS,EAAE;AAAA,QAChB;AAAA,MACD;AAEA,WAAK,wBAAwB;AAAA,QAC5B,SAAS;AAAA,QACT,IAAI;AAAA,UACH;AAAA,YACC;AAAA,YACA,oBAAoB,SAAS;AAAA,UAC9B;AAAA,UACA,KAAK;AAAA,UACL,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD;AAEA,WAAO,KAAK,wBAAwB,IAAI,SAAS,EAAE;AAAA,EACpD;AAAA,EAEA,UACC,mBACA,WACA,MACC;AACD,UAAM,yBACL,KAAK,0BAA0B,iBAAiB;AACjD,2BAAuB,UAAU,WAAW,IAAI;AAAA,EACjD;AAAA,EAEA,eACC,mBACA,gBACA,MACC;AACD,UAAM,yBACL,KAAK,0BAA0B,iBAAiB;AACjD,2BAAuB,eAAe,gBAAgB,IAAI;AAAA,EAC3D;AACD;AA7Fa,iCAAN;AAAA,EAQJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAbU;",
  "names": []
}
