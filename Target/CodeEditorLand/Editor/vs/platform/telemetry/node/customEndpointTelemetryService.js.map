{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/customEndpointTelemetryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FileAccess } from '../../../base/common/network.js';\nimport { Client as TelemetryClient } from '../../../base/parts/ipc/node/ipc.cp.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { ILogService, ILoggerService } from '../../log/common/log.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { ICustomEndpointTelemetryService, ITelemetryData, ITelemetryEndpoint, ITelemetryService } from '../common/telemetry.js';\nimport { TelemetryAppenderClient } from '../common/telemetryIpc.js';\nimport { TelemetryLogAppender } from '../common/telemetryLogAppender.js';\nimport { TelemetryService } from '../common/telemetryService.js';\n\nexport class CustomEndpointTelemetryService implements ICustomEndpointTelemetryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate customTelemetryServices = new Map<string, ITelemetryService>();\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tprivate getCustomTelemetryService(endpoint: ITelemetryEndpoint): ITelemetryService {\n\t\tif (!this.customTelemetryServices.has(endpoint.id)) {\n\t\t\tconst telemetryInfo: { [key: string]: string } = Object.create(null);\n\t\t\ttelemetryInfo['common.vscodemachineid'] = this.telemetryService.machineId;\n\t\t\ttelemetryInfo['common.vscodesessionid'] = this.telemetryService.sessionId;\n\t\t\tconst args = [endpoint.id, JSON.stringify(telemetryInfo), endpoint.aiKey];\n\t\t\tconst client = new TelemetryClient(\n\t\t\t\tFileAccess.asFileUri('bootstrap-fork').fsPath,\n\t\t\t\t{\n\t\t\t\t\tserverName: 'Debug Telemetry',\n\t\t\t\t\ttimeout: 1000 * 60 * 5,\n\t\t\t\t\targs,\n\t\t\t\t\tenv: {\n\t\t\t\t\t\tELECTRON_RUN_AS_NODE: 1,\n\t\t\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/contrib/debug/node/telemetryApp'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst channel = client.getChannel('telemetryAppender');\n\t\t\tconst appenders = [\n\t\t\t\tnew TelemetryAppenderClient(channel),\n\t\t\t\tnew TelemetryLogAppender(this.logService, this.loggerService, this.environmentService, this.productService, `[${endpoint.id}] `),\n\t\t\t];\n\n\t\t\tthis.customTelemetryServices.set(endpoint.id, new TelemetryService({\n\t\t\t\tappenders,\n\t\t\t\tsendErrorTelemetry: endpoint.sendErrorTelemetry\n\t\t\t}, this.configurationService, this.productService));\n\t\t}\n\n\t\treturn this.customTelemetryServices.get(endpoint.id)!;\n\t}\n\n\tpublicLog(telemetryEndpoint: ITelemetryEndpoint, eventName: string, data?: ITelemetryData) {\n\t\tconst customTelemetryService = this.getCustomTelemetryService(telemetryEndpoint);\n\t\tcustomTelemetryService.publicLog(eventName, data);\n\t}\n\n\tpublicLogError(telemetryEndpoint: ITelemetryEndpoint, errorEventName: string, data?: ITelemetryData) {\n\t\tconst customTelemetryService = this.getCustomTelemetryService(telemetryEndpoint);\n\t\tcustomTelemetryService.publicLogError(errorEventName, data);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,UAAU,uBAAuB;AAC1C,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,aAAa,sBAAsB;AAC5C,SAAS,uBAAuB;AAChC,SAAS,iCAAiC,gBAAgB,oBAAoB,yBAAyB;AACvG,SAAS,+BAA+B;AACxC,SAAS,4BAA4B;AACrC,SAAS,wBAAwB;AAE1B,IAAM,iCAAN,MAAgF;AAAA,EAKtF,YACyC,sBACJ,kBACN,YACG,eACK,oBACJ,gBACjC;AANuC;AACJ;AACN;AACG;AACK;AACJ;AAAA,EAC/B;AAAA,EA5BL,OAgBuF;AAAA;AAAA;AAAA,EAG9E,0BAA0B,oBAAI,IAA+B;AAAA,EAW7D,0BAA0B,UAAiD;AAClF,QAAI,CAAC,KAAK,wBAAwB,IAAI,SAAS,EAAE,GAAG;AACnD,YAAM,gBAA2C,uBAAO,OAAO,IAAI;AACnE,oBAAc,wBAAwB,IAAI,KAAK,iBAAiB;AAChE,oBAAc,wBAAwB,IAAI,KAAK,iBAAiB;AAChE,YAAM,OAAO,CAAC,SAAS,IAAI,KAAK,UAAU,aAAa,GAAG,SAAS,KAAK;AACxE,YAAM,SAAS,IAAI;AAAA,QAClB,WAAW,UAAU,gBAAgB,EAAE;AAAA,QACvC;AAAA,UACC,YAAY;AAAA,UACZ,SAAS,MAAO,KAAK;AAAA,UACrB;AAAA,UACA,KAAK;AAAA,YACJ,sBAAsB;AAAA,YACtB,qBAAqB;AAAA,YACrB,uBAAuB;AAAA,UACxB;AAAA,QACD;AAAA,MACD;AAEA,YAAM,UAAU,OAAO,WAAW,mBAAmB;AACrD,YAAM,YAAY;AAAA,QACjB,IAAI,wBAAwB,OAAO;AAAA,QACnC,IAAI,qBAAqB,KAAK,YAAY,KAAK,eAAe,KAAK,oBAAoB,KAAK,gBAAgB,IAAI,SAAS,EAAE,IAAI;AAAA,MAChI;AAEA,WAAK,wBAAwB,IAAI,SAAS,IAAI,IAAI,iBAAiB;AAAA,QAClE;AAAA,QACA,oBAAoB,SAAS;AAAA,MAC9B,GAAG,KAAK,sBAAsB,KAAK,cAAc,CAAC;AAAA,IACnD;AAEA,WAAO,KAAK,wBAAwB,IAAI,SAAS,EAAE;AAAA,EACpD;AAAA,EAEA,UAAU,mBAAuC,WAAmB,MAAuB;AAC1F,UAAM,yBAAyB,KAAK,0BAA0B,iBAAiB;AAC/E,2BAAuB,UAAU,WAAW,IAAI;AAAA,EACjD;AAAA,EAEA,eAAe,mBAAuC,gBAAwB,MAAuB;AACpG,UAAM,yBAAyB,KAAK,0BAA0B,iBAAiB;AAC/E,2BAAuB,eAAe,gBAAgB,IAAI;AAAA,EAC3D;AACD;AA1Da,iCAAN;AAAA,EAMJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXU;",
  "names": []
}
