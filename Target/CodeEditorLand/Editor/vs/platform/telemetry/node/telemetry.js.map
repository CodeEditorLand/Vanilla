{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/telemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { join } from '../../../base/common/path.js';\nimport { Promises } from '../../../base/node/pfs.js';\n\nexport async function buildTelemetryMessage(appRoot: string, extensionsPath?: string): Promise<string> {\n\tconst mergedTelemetry = Object.create(null);\n\n\t// Simple function to merge the telemetry into one json object\n\tconst mergeTelemetry = (contents: string, dirName: string) => {\n\t\tconst telemetryData = JSON.parse(contents);\n\t\tmergedTelemetry[dirName] = telemetryData;\n\t};\n\n\tif (extensionsPath) {\n\t\tconst dirs: string[] = [];\n\n\t\tconst files = await Promises.readdir(extensionsPath);\n\t\tfor (const file of files) {\n\t\t\ttry {\n\t\t\t\tconst fileStat = await fs.promises.stat(join(extensionsPath, file));\n\t\t\t\tif (fileStat.isDirectory()) {\n\t\t\t\t\tdirs.push(file);\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// This handles case where broken symbolic links can cause statSync to throw and error\n\t\t\t}\n\t\t}\n\n\t\tconst telemetryJsonFolders: string[] = [];\n\t\tfor (const dir of dirs) {\n\t\t\tconst files = (await Promises.readdir(join(extensionsPath, dir))).filter(file => file === 'telemetry.json');\n\t\t\tif (files.length === 1) {\n\t\t\t\ttelemetryJsonFolders.push(dir); // // We know it contains a telemetry.json file so we add it to the list of folders which have one\n\t\t\t}\n\t\t}\n\n\t\tfor (const folder of telemetryJsonFolders) {\n\t\t\tconst contents = (await fs.promises.readFile(join(extensionsPath, folder, 'telemetry.json'))).toString();\n\t\t\tmergeTelemetry(contents, folder);\n\t\t}\n\t}\n\n\tlet contents = (await fs.promises.readFile(join(appRoot, 'telemetry-core.json'))).toString();\n\tmergeTelemetry(contents, 'vscode-core');\n\n\tcontents = (await fs.promises.readFile(join(appRoot, 'telemetry-extensions.json'))).toString();\n\tmergeTelemetry(contents, 'vscode-extensions');\n\n\treturn JSON.stringify(mergedTelemetry, null, 4);\n}\n"],
  "mappings": ";;AAKA,YAAY,QAAQ;AACpB,SAAS,YAAY;AACrB,SAAS,gBAAgB;AAEzB,eAAsB,sBAAsB,SAAiB,gBAA0C;AACtG,QAAM,kBAAkB,uBAAO,OAAO,IAAI;AAG1C,QAAM,iBAAiB,wBAACA,WAAkB,YAAoB;AAC7D,UAAM,gBAAgB,KAAK,MAAMA,SAAQ;AACzC,oBAAgB,OAAO,IAAI;AAAA,EAC5B,GAHuB;AAKvB,MAAI,gBAAgB;AACnB,UAAM,OAAiB,CAAC;AAExB,UAAM,QAAQ,MAAM,SAAS,QAAQ,cAAc;AACnD,eAAW,QAAQ,OAAO;AACzB,UAAI;AACH,cAAM,WAAW,MAAM,GAAG,SAAS,KAAK,KAAK,gBAAgB,IAAI,CAAC;AAClE,YAAI,SAAS,YAAY,GAAG;AAC3B,eAAK,KAAK,IAAI;AAAA,QACf;AAAA,MACD,QAAQ;AAAA,MAER;AAAA,IACD;AAEA,UAAM,uBAAiC,CAAC;AACxC,eAAW,OAAO,MAAM;AACvB,YAAMC,UAAS,MAAM,SAAS,QAAQ,KAAK,gBAAgB,GAAG,CAAC,GAAG,OAAO,UAAQ,SAAS,gBAAgB;AAC1G,UAAIA,OAAM,WAAW,GAAG;AACvB,6BAAqB,KAAK,GAAG;AAAA,MAC9B;AAAA,IACD;AAEA,eAAW,UAAU,sBAAsB;AAC1C,YAAMD,aAAY,MAAM,GAAG,SAAS,SAAS,KAAK,gBAAgB,QAAQ,gBAAgB,CAAC,GAAG,SAAS;AACvG,qBAAeA,WAAU,MAAM;AAAA,IAChC;AAAA,EACD;AAEA,MAAI,YAAY,MAAM,GAAG,SAAS,SAAS,KAAK,SAAS,qBAAqB,CAAC,GAAG,SAAS;AAC3F,iBAAe,UAAU,aAAa;AAEtC,cAAY,MAAM,GAAG,SAAS,SAAS,KAAK,SAAS,2BAA2B,CAAC,GAAG,SAAS;AAC7F,iBAAe,UAAU,mBAAmB;AAE5C,SAAO,KAAK,UAAU,iBAAiB,MAAM,CAAC;AAC/C;AA7CsB;",
  "names": ["contents", "files"]
}
