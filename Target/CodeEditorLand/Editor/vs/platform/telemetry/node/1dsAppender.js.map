{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/1dsAppender.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as https from \"https\";\nimport type { IPayloadData, IXHROverride } from \"@microsoft/1ds-post-js\";\nimport { streamToBuffer } from \"../../../base/common/buffer.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { IRequestOptions } from \"../../../base/parts/request/common/request.js\";\nimport type { IRequestService } from \"../../request/common/request.js\";\nimport {\n\tAbstractOneDataSystemAppender,\n\ttype IAppInsightsCore,\n} from \"../common/1dsAppender.js\";\n\ntype OnCompleteFunc = (\n\tstatus: number,\n\theaders: { [headerName: string]: string },\n\tresponse?: string,\n) => void;\n\ninterface IResponseData {\n\theaders: { [headerName: string]: string };\n\tstatusCode: number;\n\tresponseData: string;\n}\n\n/**\n * Completes a request to submit telemetry to the server utilizing the request service\n * @param options The options which will be used to make the request\n * @param requestService The request service\n * @returns An object containing the headers, statusCode, and responseData\n */\nasync function makeTelemetryRequest(\n\toptions: IRequestOptions,\n\trequestService: IRequestService,\n): Promise<IResponseData> {\n\tconst response = await requestService.request(\n\t\toptions,\n\t\tCancellationToken.None,\n\t);\n\tconst responseData = (await streamToBuffer(response.stream)).toString();\n\tconst statusCode = response.res.statusCode ?? 200;\n\tconst headers = response.res.headers as Record<string, any>;\n\treturn {\n\t\theaders,\n\t\tstatusCode,\n\t\tresponseData,\n\t};\n}\n\n/**\n * Complete a request to submit telemetry to the server utilizing the https module. Only used when the request service is not available\n * @param options The options which will be used to make the request\n * @returns An object containing the headers, statusCode, and responseData\n */\nasync function makeLegacyTelemetryRequest(\n\toptions: IRequestOptions,\n): Promise<IResponseData> {\n\tconst httpsOptions = {\n\t\tmethod: options.type,\n\t\theaders: options.headers,\n\t};\n\tconst responsePromise = new Promise<IResponseData>((resolve, reject) => {\n\t\tconst req = https.request(options.url ?? \"\", httpsOptions, (res) => {\n\t\t\tres.on(\"data\", (responseData) => {\n\t\t\t\tresolve({\n\t\t\t\t\theaders: res.headers as Record<string, any>,\n\t\t\t\t\tstatusCode: res.statusCode ?? 200,\n\t\t\t\t\tresponseData: responseData.toString(),\n\t\t\t\t});\n\t\t\t});\n\t\t\t// On response with error send status of 0 and a blank response to oncomplete so we can retry events\n\t\t\tres.on(\"error\", (err) => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t\treq.write(options.data, (err) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t\treq.end();\n\t});\n\treturn responsePromise;\n}\n\nasync function sendPostAsync(\n\trequestService: IRequestService | undefined,\n\tpayload: IPayloadData,\n\toncomplete: OnCompleteFunc,\n) {\n\tconst telemetryRequestData =\n\t\ttypeof payload.data === \"string\"\n\t\t\t? payload.data\n\t\t\t: new TextDecoder().decode(payload.data);\n\tconst requestOptions: IRequestOptions = {\n\t\ttype: \"POST\",\n\t\theaders: {\n\t\t\t...payload.headers,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"Content-Length\": Buffer.byteLength(payload.data).toString(),\n\t\t},\n\t\turl: payload.urlString,\n\t\tdata: telemetryRequestData,\n\t};\n\n\ttry {\n\t\tconst responseData = requestService\n\t\t\t? await makeTelemetryRequest(requestOptions, requestService)\n\t\t\t: await makeLegacyTelemetryRequest(requestOptions);\n\t\toncomplete(\n\t\t\tresponseData.statusCode,\n\t\t\tresponseData.headers,\n\t\t\tresponseData.responseData,\n\t\t);\n\t} catch {\n\t\t// If it errors out, send status of 0 and a blank response to oncomplete so we can retry events\n\t\toncomplete(0, {});\n\t}\n}\n\nexport class OneDataSystemAppender extends AbstractOneDataSystemAppender {\n\tconstructor(\n\t\trequestService: IRequestService | undefined,\n\t\tisInternalTelemetry: boolean,\n\t\teventPrefix: string,\n\t\tdefaultData: { [key: string]: any } | null,\n\t\tiKeyOrClientFactory: string | (() => IAppInsightsCore), // allow factory function for testing\n\t) {\n\t\t// Override the way events get sent since node doesn't have XHTMLRequest\n\t\tconst customHttpXHROverride: IXHROverride = {\n\t\t\tsendPOST: (payload: IPayloadData, oncomplete) => {\n\t\t\t\t// Fire off the async request without awaiting it\n\t\t\t\tsendPostAsync(requestService, payload, oncomplete);\n\t\t\t},\n\t\t};\n\n\t\tsuper(\n\t\t\tisInternalTelemetry,\n\t\t\teventPrefix,\n\t\t\tdefaultData,\n\t\t\tiKeyOrClientFactory,\n\t\t\tcustomHttpXHROverride,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,WAAW;AAEvB,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAGlC;AAAA,EACC;AAAA,OAEM;AAoBP,eAAe,qBACd,SACA,gBACyB;AACzB,QAAM,WAAW,MAAM,eAAe;AAAA,IACrC;AAAA,IACA,kBAAkB;AAAA,EACnB;AACA,QAAM,gBAAgB,MAAM,eAAe,SAAS,MAAM,GAAG,SAAS;AACtE,QAAM,aAAa,SAAS,IAAI,cAAc;AAC9C,QAAM,UAAU,SAAS,IAAI;AAC7B,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;AAhBe;AAuBf,eAAe,2BACd,SACyB;AACzB,QAAM,eAAe;AAAA,IACpB,QAAQ,QAAQ;AAAA,IAChB,SAAS,QAAQ;AAAA,EAClB;AACA,QAAM,kBAAkB,IAAI,QAAuB,CAAC,SAAS,WAAW;AACvE,UAAM,MAAM,MAAM,QAAQ,QAAQ,OAAO,IAAI,cAAc,CAAC,QAAQ;AACnE,UAAI,GAAG,QAAQ,CAAC,iBAAiB;AAChC,gBAAQ;AAAA,UACP,SAAS,IAAI;AAAA,UACb,YAAY,IAAI,cAAc;AAAA,UAC9B,cAAc,aAAa,SAAS;AAAA,QACrC,CAAC;AAAA,MACF,CAAC;AAED,UAAI,GAAG,SAAS,CAAC,QAAQ;AACxB,eAAO,GAAG;AAAA,MACX,CAAC;AAAA,IACF,CAAC;AACD,QAAI,MAAM,QAAQ,MAAM,CAAC,QAAQ;AAChC,UAAI,KAAK;AACR,eAAO,GAAG;AAAA,MACX;AAAA,IACD,CAAC;AACD,QAAI,IAAI;AAAA,EACT,CAAC;AACD,SAAO;AACR;AA7Be;AA+Bf,eAAe,cACd,gBACA,SACA,YACC;AACD,QAAM,uBACL,OAAO,QAAQ,SAAS,WACrB,QAAQ,OACR,IAAI,YAAY,EAAE,OAAO,QAAQ,IAAI;AACzC,QAAM,iBAAkC;AAAA,IACvC,MAAM;AAAA,IACN,SAAS;AAAA,MACR,GAAG,QAAQ;AAAA,MACX,gBAAgB;AAAA,MAChB,kBAAkB,OAAO,WAAW,QAAQ,IAAI,EAAE,SAAS;AAAA,IAC5D;AAAA,IACA,KAAK,QAAQ;AAAA,IACb,MAAM;AAAA,EACP;AAEA,MAAI;AACH,UAAM,eAAe,iBAClB,MAAM,qBAAqB,gBAAgB,cAAc,IACzD,MAAM,2BAA2B,cAAc;AAClD;AAAA,MACC,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,IACd;AAAA,EACD,QAAQ;AAEP,eAAW,GAAG,CAAC,CAAC;AAAA,EACjB;AACD;AAjCe;AAmCR,MAAM,8BAA8B,8BAA8B;AAAA,EA3HzE,OA2HyE;AAAA;AAAA;AAAA,EACxE,YACC,gBACA,qBACA,aACA,aACA,qBACC;AAED,UAAM,wBAAsC;AAAA,MAC3C,UAAU,wBAAC,SAAuB,eAAe;AAEhD,sBAAc,gBAAgB,SAAS,UAAU;AAAA,MAClD,GAHU;AAAA,IAIX;AAEA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
