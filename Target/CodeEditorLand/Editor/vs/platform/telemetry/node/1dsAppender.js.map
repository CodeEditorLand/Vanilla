{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/1dsAppender.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IPayloadData, IXHROverride } from '@microsoft/1ds-post-js';\nimport { streamToBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IRequestOptions } from '../../../base/parts/request/common/request.js';\nimport { IRequestService } from '../../request/common/request.js';\nimport * as https from 'https';\nimport { AbstractOneDataSystemAppender, IAppInsightsCore } from '../common/1dsAppender.js';\n\ntype OnCompleteFunc = (status: number, headers: { [headerName: string]: string }, response?: string) => void;\n\ninterface IResponseData {\n\theaders: { [headerName: string]: string };\n\tstatusCode: number;\n\tresponseData: string;\n}\n\n/**\n * Completes a request to submit telemetry to the server utilizing the request service\n * @param options The options which will be used to make the request\n * @param requestService The request service\n * @returns An object containing the headers, statusCode, and responseData\n */\nasync function makeTelemetryRequest(options: IRequestOptions, requestService: IRequestService): Promise<IResponseData> {\n\tconst response = await requestService.request(options, CancellationToken.None);\n\tconst responseData = (await streamToBuffer(response.stream)).toString();\n\tconst statusCode = response.res.statusCode ?? 200;\n\tconst headers = response.res.headers as Record<string, any>;\n\treturn {\n\t\theaders,\n\t\tstatusCode,\n\t\tresponseData\n\t};\n}\n\n/**\n * Complete a request to submit telemetry to the server utilizing the https module. Only used when the request service is not available\n * @param options The options which will be used to make the request\n * @returns An object containing the headers, statusCode, and responseData\n */\nasync function makeLegacyTelemetryRequest(options: IRequestOptions): Promise<IResponseData> {\n\tconst httpsOptions = {\n\t\tmethod: options.type,\n\t\theaders: options.headers\n\t};\n\tconst responsePromise = new Promise<IResponseData>((resolve, reject) => {\n\t\tconst req = https.request(options.url ?? '', httpsOptions, res => {\n\t\t\tres.on('data', function (responseData) {\n\t\t\t\tresolve({\n\t\t\t\t\theaders: res.headers as Record<string, any>,\n\t\t\t\t\tstatusCode: res.statusCode ?? 200,\n\t\t\t\t\tresponseData: responseData.toString()\n\t\t\t\t});\n\t\t\t});\n\t\t\t// On response with error send status of 0 and a blank response to oncomplete so we can retry events\n\t\t\tres.on('error', function (err) {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t\treq.write(options.data, (err) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t\treq.end();\n\t});\n\treturn responsePromise;\n}\n\nasync function sendPostAsync(requestService: IRequestService | undefined, payload: IPayloadData, oncomplete: OnCompleteFunc) {\n\tconst telemetryRequestData = typeof payload.data === 'string' ? payload.data : new TextDecoder().decode(payload.data);\n\tconst requestOptions: IRequestOptions = {\n\t\ttype: 'POST',\n\t\theaders: {\n\t\t\t...payload.headers,\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Content-Length': Buffer.byteLength(payload.data).toString()\n\t\t},\n\t\turl: payload.urlString,\n\t\tdata: telemetryRequestData\n\t};\n\n\ttry {\n\t\tconst responseData = requestService ? await makeTelemetryRequest(requestOptions, requestService) : await makeLegacyTelemetryRequest(requestOptions);\n\t\toncomplete(responseData.statusCode, responseData.headers, responseData.responseData);\n\t} catch {\n\t\t// If it errors out, send status of 0 and a blank response to oncomplete so we can retry events\n\t\toncomplete(0, {});\n\t}\n}\n\n\nexport class OneDataSystemAppender extends AbstractOneDataSystemAppender {\n\n\tconstructor(\n\t\trequestService: IRequestService | undefined,\n\t\tisInternalTelemetry: boolean,\n\t\teventPrefix: string,\n\t\tdefaultData: { [key: string]: any } | null,\n\t\tiKeyOrClientFactory: string | (() => IAppInsightsCore), // allow factory function for testing\n\t) {\n\t\t// Override the way events get sent since node doesn't have XHTMLRequest\n\t\tconst customHttpXHROverride: IXHROverride = {\n\t\t\tsendPOST: (payload: IPayloadData, oncomplete) => {\n\t\t\t\t// Fire off the async request without awaiting it\n\t\t\t\tsendPostAsync(requestService, payload, oncomplete);\n\t\t\t}\n\t\t};\n\n\t\tsuper(isInternalTelemetry, eventPrefix, defaultData, iKeyOrClientFactory, customHttpXHROverride);\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,YAAY,WAAW;AACvB,SAAS,+BAA+B,wBAAwB;AAgBhE,eAAe,qBAAqB,SAA0B,gBAAyD;AACtH,QAAM,WAAW,MAAM,eAAe,QAAQ,SAAS,kBAAkB,IAAI;AAC7E,QAAM,gBAAgB,MAAM,eAAe,SAAS,MAAM,GAAG,SAAS;AACtE,QAAM,aAAa,SAAS,IAAI,cAAc;AAC9C,QAAM,UAAU,SAAS,IAAI;AAC7B,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;AAVe;AAiBf,eAAe,2BAA2B,SAAkD;AAC3F,QAAM,eAAe;AAAA,IACpB,QAAQ,QAAQ;AAAA,IAChB,SAAS,QAAQ;AAAA,EAClB;AACA,QAAM,kBAAkB,IAAI,QAAuB,CAAC,SAAS,WAAW;AACvE,UAAM,MAAM,MAAM,QAAQ,QAAQ,OAAO,IAAI,cAAc,SAAO;AACjE,UAAI,GAAG,QAAQ,SAAU,cAAc;AACtC,gBAAQ;AAAA,UACP,SAAS,IAAI;AAAA,UACb,YAAY,IAAI,cAAc;AAAA,UAC9B,cAAc,aAAa,SAAS;AAAA,QACrC,CAAC;AAAA,MACF,CAAC;AAED,UAAI,GAAG,SAAS,SAAU,KAAK;AAC9B,eAAO,GAAG;AAAA,MACX,CAAC;AAAA,IACF,CAAC;AACD,QAAI,MAAM,QAAQ,MAAM,CAAC,QAAQ;AAChC,UAAI,KAAK;AACR,eAAO,GAAG;AAAA,MACX;AAAA,IACD,CAAC;AACD,QAAI,IAAI;AAAA,EACT,CAAC;AACD,SAAO;AACR;AA3Be;AA6Bf,eAAe,cAAc,gBAA6C,SAAuB,YAA4B;AAC5H,QAAM,uBAAuB,OAAO,QAAQ,SAAS,WAAW,QAAQ,OAAO,IAAI,YAAY,EAAE,OAAO,QAAQ,IAAI;AACpH,QAAM,iBAAkC;AAAA,IACvC,MAAM;AAAA,IACN,SAAS;AAAA,MACR,GAAG,QAAQ;AAAA,MACX,gBAAgB;AAAA,MAChB,kBAAkB,OAAO,WAAW,QAAQ,IAAI,EAAE,SAAS;AAAA,IAC5D;AAAA,IACA,KAAK,QAAQ;AAAA,IACb,MAAM;AAAA,EACP;AAEA,MAAI;AACH,UAAM,eAAe,iBAAiB,MAAM,qBAAqB,gBAAgB,cAAc,IAAI,MAAM,2BAA2B,cAAc;AAClJ,eAAW,aAAa,YAAY,aAAa,SAAS,aAAa,YAAY;AAAA,EACpF,QAAQ;AAEP,eAAW,GAAG,CAAC,CAAC;AAAA,EACjB;AACD;AApBe;AAuBR,MAAM,8BAA8B,8BAA8B;AAAA,EAhGzE,OAgGyE;AAAA;AAAA;AAAA,EAExE,YACC,gBACA,qBACA,aACA,aACA,qBACC;AAED,UAAM,wBAAsC;AAAA,MAC3C,UAAU,wBAAC,SAAuB,eAAe;AAEhD,sBAAc,gBAAgB,SAAS,UAAU;AAAA,MAClD,GAHU;AAAA,IAIX;AAEA,UAAM,qBAAqB,aAAa,aAAa,qBAAqB,qBAAqB;AAAA,EAChG;AACD;",
  "names": []
}
