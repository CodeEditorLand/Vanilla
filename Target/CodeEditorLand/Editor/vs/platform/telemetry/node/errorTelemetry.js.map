{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/errorTelemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isCancellationError, isSigPipeError, onUnexpectedError, setUnexpectedErrorHandler } from '../../../base/common/errors.js';\nimport BaseErrorTelemetry from '../common/errorTelemetry.js';\n\nexport default class ErrorTelemetry extends BaseErrorTelemetry {\n\tprotected override installErrorListeners(): void {\n\t\tsetUnexpectedErrorHandler(err => console.error(err));\n\n\t\t// Print a console message when rejection isn't handled within N seconds. For details:\n\t\t// see https://nodejs.org/api/process.html#process_event_unhandledrejection\n\t\t// and https://nodejs.org/api/process.html#process_event_rejectionhandled\n\t\tconst unhandledPromises: Promise<any>[] = [];\n\t\tprocess.on('unhandledRejection', (reason: any, promise: Promise<any>) => {\n\t\t\tunhandledPromises.push(promise);\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tpromise.catch(e => {\n\t\t\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t\t\t\tif (!isCancellationError(e)) {\n\t\t\t\t\t\t\tconsole.warn(`rejected promise not handled within 1 second: ${e}`);\n\t\t\t\t\t\t\tif (e.stack) {\n\t\t\t\t\t\t\t\tconsole.warn(`stack trace: ${e.stack}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (reason) {\n\t\t\t\t\t\t\t\tonUnexpectedError(reason);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t});\n\n\t\tprocess.on('rejectionHandled', (promise: Promise<any>) => {\n\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\tif (idx >= 0) {\n\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t}\n\t\t});\n\n\t\t// Print a console message when an exception isn't handled.\n\t\tprocess.on('uncaughtException', (err: Error | NodeJS.ErrnoException) => {\n\t\t\tif (isSigPipeError(err)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,qBAAqB,gBAAgB,mBAAmB,iCAAiC;AAClG,OAAO,wBAAwB;AAE/B,MAAO,uBAAqC,mBAAmB;AAAA,EAR/D,OAQ+D;AAAA;AAAA;AAAA,EAC3C,wBAA8B;AAChD,8BAA0B,SAAO,QAAQ,MAAM,GAAG,CAAC;AAKnD,UAAM,oBAAoC,CAAC;AAC3C,YAAQ,GAAG,sBAAsB,CAAC,QAAa,YAA0B;AACxE,wBAAkB,KAAK,OAAO;AAC9B,iBAAW,MAAM;AAChB,cAAM,MAAM,kBAAkB,QAAQ,OAAO;AAC7C,YAAI,OAAO,GAAG;AACb,kBAAQ,MAAM,OAAK;AAClB,8BAAkB,OAAO,KAAK,CAAC;AAC/B,gBAAI,CAAC,oBAAoB,CAAC,GAAG;AAC5B,sBAAQ,KAAK,iDAAiD,CAAC,EAAE;AACjE,kBAAI,EAAE,OAAO;AACZ,wBAAQ,KAAK,gBAAgB,EAAE,KAAK,EAAE;AAAA,cACvC;AACA,kBAAI,QAAQ;AACX,kCAAkB,MAAM;AAAA,cACzB;AAAA,YACD;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD,GAAG,GAAI;AAAA,IACR,CAAC;AAED,YAAQ,GAAG,oBAAoB,CAAC,YAA0B;AACzD,YAAM,MAAM,kBAAkB,QAAQ,OAAO;AAC7C,UAAI,OAAO,GAAG;AACb,0BAAkB,OAAO,KAAK,CAAC;AAAA,MAChC;AAAA,IACD,CAAC;AAGD,YAAQ,GAAG,qBAAqB,CAAC,QAAuC;AACvE,UAAI,eAAe,GAAG,GAAG;AACxB;AAAA,MACD;AAEA,wBAAkB,GAAG;AAAA,IACtB,CAAC;AAAA,EACF;AACD;",
  "names": []
}
