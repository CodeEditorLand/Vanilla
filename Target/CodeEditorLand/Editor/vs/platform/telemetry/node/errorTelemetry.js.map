{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/errorTelemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tisCancellationError,\n\tisSigPipeError,\n\tonUnexpectedError,\n\tsetUnexpectedErrorHandler,\n} from \"../../../base/common/errors.js\";\nimport BaseErrorTelemetry from \"../common/errorTelemetry.js\";\n\nexport default class ErrorTelemetry extends BaseErrorTelemetry {\n\tprotected override installErrorListeners(): void {\n\t\tsetUnexpectedErrorHandler((err) => console.error(err));\n\n\t\t// Print a console message when rejection isn't handled within N seconds. For details:\n\t\t// see https://nodejs.org/api/process.html#process_event_unhandledrejection\n\t\t// and https://nodejs.org/api/process.html#process_event_rejectionhandled\n\t\tconst unhandledPromises: Promise<any>[] = [];\n\t\tprocess.on(\n\t\t\t\"unhandledRejection\",\n\t\t\t(reason: any, promise: Promise<any>) => {\n\t\t\t\tunhandledPromises.push(promise);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\tpromise.catch((e) => {\n\t\t\t\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t\t\t\t\tif (!isCancellationError(e)) {\n\t\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t\t`rejected promise not handled within 1 second: ${e}`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (e.stack) {\n\t\t\t\t\t\t\t\t\tconsole.warn(`stack trace: ${e.stack}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (reason) {\n\t\t\t\t\t\t\t\t\tonUnexpectedError(reason);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\t\t\t},\n\t\t);\n\n\t\tprocess.on(\"rejectionHandled\", (promise: Promise<any>) => {\n\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\tif (idx >= 0) {\n\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t}\n\t\t});\n\n\t\t// Print a console message when an exception isn't handled.\n\t\tprocess.on(\n\t\t\t\"uncaughtException\",\n\t\t\t(err: Error | NodeJS.ErrnoException) => {\n\t\t\t\tif (isSigPipeError(err)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tonUnexpectedError(err);\n\t\t\t},\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,OAAO,wBAAwB;AAE/B,MAAO,uBAAqC,mBAAmB;AAAA,EAb/D,OAa+D;AAAA;AAAA;AAAA,EAC3C,wBAA8B;AAChD,8BAA0B,CAAC,QAAQ,QAAQ,MAAM,GAAG,CAAC;AAKrD,UAAM,oBAAoC,CAAC;AAC3C,YAAQ;AAAA,MACP;AAAA,MACA,CAAC,QAAa,YAA0B;AACvC,0BAAkB,KAAK,OAAO;AAC9B,mBAAW,MAAM;AAChB,gBAAM,MAAM,kBAAkB,QAAQ,OAAO;AAC7C,cAAI,OAAO,GAAG;AACb,oBAAQ,MAAM,CAAC,MAAM;AACpB,gCAAkB,OAAO,KAAK,CAAC;AAC/B,kBAAI,CAAC,oBAAoB,CAAC,GAAG;AAC5B,wBAAQ;AAAA,kBACP,iDAAiD,CAAC;AAAA,gBACnD;AACA,oBAAI,EAAE,OAAO;AACZ,0BAAQ,KAAK,gBAAgB,EAAE,KAAK,EAAE;AAAA,gBACvC;AACA,oBAAI,QAAQ;AACX,oCAAkB,MAAM;AAAA,gBACzB;AAAA,cACD;AAAA,YACD,CAAC;AAAA,UACF;AAAA,QACD,GAAG,GAAI;AAAA,MACR;AAAA,IACD;AAEA,YAAQ,GAAG,oBAAoB,CAAC,YAA0B;AACzD,YAAM,MAAM,kBAAkB,QAAQ,OAAO;AAC7C,UAAI,OAAO,GAAG;AACb,0BAAkB,OAAO,KAAK,CAAC;AAAA,MAChC;AAAA,IACD,CAAC;AAGD,YAAQ;AAAA,MACP;AAAA,MACA,CAAC,QAAuC;AACvC,YAAI,eAAe,GAAG,GAAG;AACxB;AAAA,QACD;AAEA,0BAAkB,GAAG;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
