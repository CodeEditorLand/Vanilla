{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/telemetryUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isMacintosh } from \"../../../base/common/platform.js\";\nimport {\n\tgetMachineId,\n\tgetSqmMachineId,\n\tgetdevDeviceId,\n} from \"../../../base/node/id.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { IStateReadService } from \"../../state/node/state.js\";\nimport { devDeviceIdKey, machineIdKey, sqmIdKey } from \"../common/telemetry.js\";\n\nexport async function resolveMachineId(\n\tstateService: IStateReadService,\n\tlogService: ILogService,\n): Promise<string> {\n\t// We cache the machineId for faster lookups\n\t// and resolve it only once initially if not cached or we need to replace the macOS iBridge device\n\tlet machineId = stateService.getItem<string>(machineIdKey);\n\tif (\n\t\ttypeof machineId !== \"string\" ||\n\t\t(isMacintosh &&\n\t\t\tmachineId ===\n\t\t\t\t\"6c9d2bc8f91b89624add29c0abeae7fb42bf539fa1cdb2e3e57cd668fa9bcead\")\n\t) {\n\t\tmachineId = await getMachineId(logService.error.bind(logService));\n\t}\n\n\treturn machineId;\n}\n\nexport async function resolveSqmId(\n\tstateService: IStateReadService,\n\tlogService: ILogService,\n): Promise<string> {\n\tlet sqmId = stateService.getItem<string>(sqmIdKey);\n\tif (typeof sqmId !== \"string\") {\n\t\tsqmId = await getSqmMachineId(logService.error.bind(logService));\n\t}\n\n\treturn sqmId;\n}\n\nexport async function resolvedevDeviceId(\n\tstateService: IStateReadService,\n\tlogService: ILogService,\n): Promise<string> {\n\tlet devDeviceId = stateService.getItem<string>(devDeviceIdKey);\n\tif (typeof devDeviceId !== \"string\") {\n\t\tdevDeviceId = await getdevDeviceId(logService.error.bind(logService));\n\t}\n\n\treturn devDeviceId;\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAGP,SAAS,gBAAgB,cAAc,gBAAgB;AAEvD,eAAsB,iBACrB,cACA,YACkB;AAGlB,MAAI,YAAY,aAAa,QAAgB,YAAY;AACzD,MACC,OAAO,cAAc,YACpB,eACA,cACC,oEACD;AACD,gBAAY,MAAM,aAAa,WAAW,MAAM,KAAK,UAAU,CAAC;AAAA,EACjE;AAEA,SAAO;AACR;AAjBsB;AAmBtB,eAAsB,aACrB,cACA,YACkB;AAClB,MAAI,QAAQ,aAAa,QAAgB,QAAQ;AACjD,MAAI,OAAO,UAAU,UAAU;AAC9B,YAAQ,MAAM,gBAAgB,WAAW,MAAM,KAAK,UAAU,CAAC;AAAA,EAChE;AAEA,SAAO;AACR;AAVsB;AAYtB,eAAsB,mBACrB,cACA,YACkB;AAClB,MAAI,cAAc,aAAa,QAAgB,cAAc;AAC7D,MAAI,OAAO,gBAAgB,UAAU;AACpC,kBAAc,MAAM,eAAe,WAAW,MAAM,KAAK,UAAU,CAAC;AAAA,EACrE;AAEA,SAAO;AACR;AAVsB;",
  "names": []
}
