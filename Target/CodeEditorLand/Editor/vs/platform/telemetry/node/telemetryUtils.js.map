{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/node/telemetryUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isMacintosh } from '../../../base/common/platform.js';\nimport { getMachineId, getSqmMachineId, getdevDeviceId } from '../../../base/node/id.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IStateReadService } from '../../state/node/state.js';\nimport { machineIdKey, sqmIdKey, devDeviceIdKey } from '../common/telemetry.js';\n\n\nexport async function resolveMachineId(stateService: IStateReadService, logService: ILogService): Promise<string> {\n\t// We cache the machineId for faster lookups\n\t// and resolve it only once initially if not cached or we need to replace the macOS iBridge device\n\tlet machineId = stateService.getItem<string>(machineIdKey);\n\tif (typeof machineId !== 'string' || (isMacintosh && machineId === '6c9d2bc8f91b89624add29c0abeae7fb42bf539fa1cdb2e3e57cd668fa9bcead')) {\n\t\tmachineId = await getMachineId(logService.error.bind(logService));\n\t}\n\n\treturn machineId;\n}\n\nexport async function resolveSqmId(stateService: IStateReadService, logService: ILogService): Promise<string> {\n\tlet sqmId = stateService.getItem<string>(sqmIdKey);\n\tif (typeof sqmId !== 'string') {\n\t\tsqmId = await getSqmMachineId(logService.error.bind(logService));\n\t}\n\n\treturn sqmId;\n}\n\nexport async function resolvedevDeviceId(stateService: IStateReadService, logService: ILogService): Promise<string> {\n\tlet devDeviceId = stateService.getItem<string>(devDeviceIdKey);\n\tif (typeof devDeviceId !== 'string') {\n\t\tdevDeviceId = await getdevDeviceId(logService.error.bind(logService));\n\t}\n\n\treturn devDeviceId;\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,cAAc,iBAAiB,sBAAsB;AAC9D,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,cAAc,UAAU,sBAAsB;AAGvD,eAAsB,iBAAiB,cAAiC,YAA0C;AAGjH,MAAI,YAAY,aAAa,QAAgB,YAAY;AACzD,MAAI,OAAO,cAAc,YAAa,eAAe,cAAc,oEAAqE;AACvI,gBAAY,MAAM,aAAa,WAAW,MAAM,KAAK,UAAU,CAAC;AAAA,EACjE;AAEA,SAAO;AACR;AATsB;AAWtB,eAAsB,aAAa,cAAiC,YAA0C;AAC7G,MAAI,QAAQ,aAAa,QAAgB,QAAQ;AACjD,MAAI,OAAO,UAAU,UAAU;AAC9B,YAAQ,MAAM,gBAAgB,WAAW,MAAM,KAAK,UAAU,CAAC;AAAA,EAChE;AAEA,SAAO;AACR;AAPsB;AAStB,eAAsB,mBAAmB,cAAiC,YAA0C;AACnH,MAAI,cAAc,aAAa,QAAgB,cAAc;AAC7D,MAAI,OAAO,gBAAgB,UAAU;AACpC,kBAAc,MAAM,eAAe,WAAW,MAAM,KAAK,UAAU,CAAC;AAAA,EACrE;AAEA,SAAO;AACR;AAPsB;",
  "names": []
}
