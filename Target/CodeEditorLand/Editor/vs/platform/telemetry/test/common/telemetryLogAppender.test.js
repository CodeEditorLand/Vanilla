import i from"assert";import{Event as s}from"../../../../base/common/event.js";import{ensureNoDisposablesAreLeakedInTestSuite as u}from"../../../../base/test/common/utils.js";import{IEnvironmentService as g}from"../../../environment/common/environment.js";import{TestInstantiationService as n}from"../../../instantiation/test/common/instantiationServiceMock.js";import{AbstractLogger as d,DEFAULT_LOG_LEVEL as l,LogLevel as o,NullLogService as L}from"../../../log/common/log.js";import{IProductService as c}from"../../../product/common/productService.js";import{TelemetryLogAppender as v}from"../../common/telemetryLogAppender.js";class h extends d{logs=[];constructor(e=l){super(),this.setLevel(e)}trace(e,...t){this.checkLogLevel(o.Trace)&&this.logs.push(e+JSON.stringify(t))}debug(e,...t){this.checkLogLevel(o.Debug)&&this.logs.push(e)}info(e,...t){this.checkLogLevel(o.Info)&&this.logs.push(e)}warn(e,...t){this.checkLogLevel(o.Warning)&&this.logs.push(e.toString())}error(e,...t){this.checkLogLevel(o.Error)&&this.logs.push(e)}flush(){}}class a{constructor(e){this.logLevel=e}_serviceBrand;logger;getLogger(){return this.logger}createLogger(){return this.logger||(this.logger=new h(this.logLevel)),this.logger}onDidChangeVisibility=s.None;onDidChangeLogLevel=s.None;onDidChangeLoggers=s.None;setLogLevel(){}getLogLevel(){return o.Info}setVisibility(){}getDefaultLogLevel(){return this.logLevel}registerLogger(){}deregisterLogger(){}getRegisteredLoggers(){return[]}getRegisteredLogger(){}}suite("TelemetryLogAdapter",()=>{u(),test("Do not Log Telemetry if log level is not trace",async()=>{const r=new a(l),e=new n,t=new v(new L,r,e.stub(g,{}),e.stub(c,{}));t.log("testEvent",{hello:"world",isTrue:!0,numberBetween1And3:2}),i.strictEqual(r.createLogger().logs.length,2),t.dispose(),e.dispose()}),test("Log Telemetry if log level is trace",async()=>{const r=new a(o.Trace),e=new n,t=new v(new L,r,e.stub(g,{}),e.stub(c,{}));t.log("testEvent",{hello:"world",isTrue:!0,numberBetween1And3:2}),i.strictEqual(r.createLogger().logs[2],"telemetry/testEvent"+JSON.stringify([{properties:{hello:"world"},measurements:{isTrue:1,numberBetween1And3:2}}])),t.dispose(),e.dispose()})});export{a as TestTelemetryLoggerService};
