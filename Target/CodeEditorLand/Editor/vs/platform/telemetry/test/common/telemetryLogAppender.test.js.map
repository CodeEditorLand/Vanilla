{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/test/common/telemetryLogAppender.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { Event } from '../../../../base/common/event.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IEnvironmentService } from '../../../environment/common/environment.js';\nimport { TestInstantiationService } from '../../../instantiation/test/common/instantiationServiceMock.js';\nimport { AbstractLogger, DEFAULT_LOG_LEVEL, ILogger, ILoggerService, LogLevel, NullLogService } from '../../../log/common/log.js';\nimport { IProductService } from '../../../product/common/productService.js';\nimport { TelemetryLogAppender } from '../../common/telemetryLogAppender.js';\n\nclass TestTelemetryLogger extends AbstractLogger implements ILogger {\n\n\tpublic logs: string[] = [];\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Trace)) {\n\t\t\tthis.logs.push(message + JSON.stringify(args));\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Debug)) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Info)) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\twarn(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Warning)) {\n\t\t\tthis.logs.push(message.toString());\n\t\t}\n\t}\n\n\terror(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Error)) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\tflush(): void { }\n}\n\nexport class TestTelemetryLoggerService implements ILoggerService {\n\t_serviceBrand: undefined;\n\n\tlogger?: TestTelemetryLogger;\n\n\tconstructor(private readonly logLevel: LogLevel) { }\n\n\tgetLogger() {\n\t\treturn this.logger;\n\t}\n\n\tcreateLogger() {\n\t\tif (!this.logger) {\n\t\t\tthis.logger = new TestTelemetryLogger(this.logLevel);\n\t\t}\n\n\t\treturn this.logger;\n\t}\n\n\tonDidChangeVisibility = Event.None;\n\tonDidChangeLogLevel = Event.None;\n\tonDidChangeLoggers = Event.None;\n\tsetLogLevel(): void { }\n\tgetLogLevel() { return LogLevel.Info; }\n\tsetVisibility(): void { }\n\tgetDefaultLogLevel() { return this.logLevel; }\n\tregisterLogger() { }\n\tderegisterLogger(): void { }\n\tgetRegisteredLoggers() { return []; }\n\tgetRegisteredLogger() { return undefined; }\n}\n\nsuite('TelemetryLogAdapter', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Do not Log Telemetry if log level is not trace', async () => {\n\t\tconst testLoggerService = new TestTelemetryLoggerService(DEFAULT_LOG_LEVEL);\n\t\tconst testInstantiationService = new TestInstantiationService();\n\t\tconst testObject = new TelemetryLogAppender(new NullLogService(), testLoggerService, testInstantiationService.stub(IEnvironmentService, {}), testInstantiationService.stub(IProductService, {}));\n\t\ttestObject.log('testEvent', { hello: 'world', isTrue: true, numberBetween1And3: 2 });\n\t\tassert.strictEqual(testLoggerService.createLogger().logs.length, 2);\n\t\ttestObject.dispose();\n\t\ttestInstantiationService.dispose();\n\t});\n\n\ttest('Log Telemetry if log level is trace', async () => {\n\t\tconst testLoggerService = new TestTelemetryLoggerService(LogLevel.Trace);\n\t\tconst testInstantiationService = new TestInstantiationService();\n\t\tconst testObject = new TelemetryLogAppender(new NullLogService(), testLoggerService, testInstantiationService.stub(IEnvironmentService, {}), testInstantiationService.stub(IProductService, {}));\n\t\ttestObject.log('testEvent', { hello: 'world', isTrue: true, numberBetween1And3: 2 });\n\t\tassert.strictEqual(testLoggerService.createLogger().logs[2], 'telemetry/testEvent' + JSON.stringify([{\n\t\t\tproperties: {\n\t\t\t\thello: 'world',\n\t\t\t},\n\t\t\tmeasurements: {\n\t\t\t\tisTrue: 1, numberBetween1And3: 2\n\t\t\t}\n\t\t}]));\n\t\ttestObject.dispose();\n\t\ttestInstantiationService.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
