{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/telemetry/browser/errorTelemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from \"../../../base/browser/window.js\";\nimport { ErrorNoTelemetry } from \"../../../base/common/errors.js\";\nimport { toDisposable } from \"../../../base/common/lifecycle.js\";\nimport BaseErrorTelemetry, {\n\ttype ErrorEvent,\n} from \"../common/errorTelemetry.js\";\n\nexport default class ErrorTelemetry extends BaseErrorTelemetry {\n\tprotected override installErrorListeners(): void {\n\t\tlet oldOnError: OnErrorEventHandler;\n\t\tconst that = this;\n\t\tif (typeof mainWindow.onerror === \"function\") {\n\t\t\toldOnError = mainWindow.onerror;\n\t\t}\n\t\tmainWindow.onerror = function (\n\t\t\tmessage: Event | string,\n\t\t\tfilename?: string,\n\t\t\tline?: number,\n\t\t\tcolumn?: number,\n\t\t\terror?: Error,\n\t\t) {\n\t\t\tthat._onUncaughtError(\n\t\t\t\tmessage as string,\n\t\t\t\tfilename as string,\n\t\t\t\tline as number,\n\t\t\t\tcolumn,\n\t\t\t\terror,\n\t\t\t);\n\t\t\toldOnError?.apply(this, [message, filename, line, column, error]);\n\t\t};\n\t\tthis._disposables.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\tif (oldOnError) {\n\t\t\t\t\tmainWindow.onerror = oldOnError;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _onUncaughtError(\n\t\tmsg: string,\n\t\tfile: string,\n\t\tline: number,\n\t\tcolumn?: number,\n\t\terr?: any,\n\t): void {\n\t\tconst data: ErrorEvent = {\n\t\t\tcallstack: msg,\n\t\t\tmsg,\n\t\t\tfile,\n\t\t\tline,\n\t\t\tcolumn,\n\t\t};\n\n\t\tif (err) {\n\t\t\t// If it's the no telemetry error it doesn't get logged\n\t\t\tif (ErrorNoTelemetry.isErrorNoTelemetry(err)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, message, stack } = err;\n\t\t\tdata.uncaught_error_name = name;\n\t\t\tif (message) {\n\t\t\t\tdata.uncaught_error_msg = message;\n\t\t\t}\n\t\t\tif (stack) {\n\t\t\t\tdata.callstack = Array.isArray(err.stack)\n\t\t\t\t\t? (err.stack = err.stack.join(\"\\n\"))\n\t\t\t\t\t: err.stack;\n\t\t\t}\n\t\t}\n\n\t\tthis._enqueue(data);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AACjC,SAAS,oBAAoB;AAC7B,OAAO;AAAA,OAEA;AAEP,MAAO,uBAAqC,mBAAmB;AAAA,EAZ/D,OAY+D;AAAA;AAAA;AAAA,EAC3C,wBAA8B;AAChD,QAAI;AACJ,UAAM,OAAO;AACb,QAAI,OAAO,WAAW,YAAY,YAAY;AAC7C,mBAAa,WAAW;AAAA,IACzB;AACA,eAAW,UAAU,SACpB,SACA,UACA,MACA,QACA,OACC;AACD,WAAK;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AACA,kBAAY,MAAM,MAAM,CAAC,SAAS,UAAU,MAAM,QAAQ,KAAK,CAAC;AAAA,IACjE;AACA,SAAK,aAAa;AAAA,MACjB,aAAa,MAAM;AAClB,YAAI,YAAY;AACf,qBAAW,UAAU;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,iBACP,KACA,MACA,MACA,QACA,KACO;AACP,UAAM,OAAmB;AAAA,MACxB,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAEA,QAAI,KAAK;AAER,UAAI,iBAAiB,mBAAmB,GAAG,GAAG;AAC7C;AAAA,MACD;AAEA,YAAM,EAAE,MAAM,SAAS,MAAM,IAAI;AACjC,WAAK,sBAAsB;AAC3B,UAAI,SAAS;AACZ,aAAK,qBAAqB;AAAA,MAC3B;AACA,UAAI,OAAO;AACV,aAAK,YAAY,MAAM,QAAQ,IAAI,KAAK,IACpC,IAAI,QAAQ,IAAI,MAAM,KAAK,IAAI,IAChC,IAAI;AAAA,MACR;AAAA,IACD;AAEA,SAAK,SAAS,IAAI;AAAA,EACnB;AACD;",
  "names": []
}
