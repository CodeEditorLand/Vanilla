{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/tunnel/node/sharedProcessTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService } from '../../log/common/log.js';\nimport { ISharedProcessTunnel, ISharedProcessTunnelService } from '../../remote/common/sharedProcessTunnelService.js';\nimport { ISharedTunnelsService, RemoteTunnel } from '../common/tunnel.js';\nimport { IAddress, IAddressProvider } from '../../remote/common/remoteAgentConnection.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { canceled } from '../../../base/common/errors.js';\nimport { DeferredPromise } from '../../../base/common/async.js';\n\nclass TunnelData extends Disposable implements IAddressProvider {\n\n\tprivate _address: IAddress | null;\n\tprivate _addressPromise: DeferredPromise<IAddress> | null;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._address = null;\n\t\tthis._addressPromise = null;\n\t}\n\n\tasync getAddress(): Promise<IAddress> {\n\t\tif (this._address) {\n\t\t\t// address is resolved\n\t\t\treturn this._address;\n\t\t}\n\t\tif (!this._addressPromise) {\n\t\t\tthis._addressPromise = new DeferredPromise<IAddress>();\n\t\t}\n\t\treturn this._addressPromise.p;\n\t}\n\n\tsetAddress(address: IAddress): void {\n\t\tthis._address = address;\n\t\tif (this._addressPromise) {\n\t\t\tthis._addressPromise.complete(address);\n\t\t\tthis._addressPromise = null;\n\t\t}\n\t}\n\n\tsetTunnel(tunnel: RemoteTunnel): void {\n\t\tthis._register(tunnel);\n\t}\n}\n\nexport class SharedProcessTunnelService extends Disposable implements ISharedProcessTunnelService {\n\t_serviceBrand: undefined;\n\n\tprivate static _lastId = 0;\n\n\tprivate readonly _tunnels: Map<string, TunnelData> = new Map<string, TunnelData>();\n\tprivate readonly _disposedTunnels: Set<string> = new Set<string>();\n\n\tconstructor(\n\t\t@ISharedTunnelsService private readonly _tunnelService: ISharedTunnelsService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._tunnels.forEach((tunnel) => tunnel.dispose());\n\t}\n\n\tasync createTunnel(): Promise<{ id: string }> {\n\t\tconst id = String(++SharedProcessTunnelService._lastId);\n\t\treturn { id };\n\t}\n\n\tasync startTunnel(authority: string, id: string, tunnelRemoteHost: string, tunnelRemotePort: number, tunnelLocalHost: string, tunnelLocalPort: number | undefined, elevateIfNeeded: boolean | undefined): Promise<ISharedProcessTunnel> {\n\t\tconst tunnelData = new TunnelData();\n\n\t\tconst tunnel = await Promise.resolve(this._tunnelService.openTunnel(authority, tunnelData, tunnelRemoteHost, tunnelRemotePort, tunnelLocalHost, tunnelLocalPort, elevateIfNeeded));\n\t\tif (!tunnel || (typeof tunnel === 'string')) {\n\t\t\tthis._logService.info(`[SharedProcessTunnelService] Could not create a tunnel to ${tunnelRemoteHost}:${tunnelRemotePort} (remote).`);\n\t\t\ttunnelData.dispose();\n\t\t\tthrow new Error(`Could not create tunnel`);\n\t\t}\n\n\t\tif (this._disposedTunnels.has(id)) {\n\t\t\t// This tunnel was disposed in the meantime\n\t\t\tthis._disposedTunnels.delete(id);\n\t\t\ttunnelData.dispose();\n\t\t\tawait tunnel.dispose();\n\t\t\tthrow canceled();\n\t\t}\n\n\t\ttunnelData.setTunnel(tunnel);\n\t\tthis._tunnels.set(id, tunnelData);\n\n\t\tthis._logService.info(`[SharedProcessTunnelService] Created tunnel ${id}: ${tunnel.localAddress} (local) to ${tunnelRemoteHost}:${tunnelRemotePort} (remote).`);\n\t\tconst result: ISharedProcessTunnel = {\n\t\t\ttunnelLocalPort: tunnel.tunnelLocalPort,\n\t\t\tlocalAddress: tunnel.localAddress\n\t\t};\n\t\treturn result;\n\t}\n\n\tasync setAddress(id: string, address: IAddress): Promise<void> {\n\t\tconst tunnel = this._tunnels.get(id);\n\t\tif (!tunnel) {\n\t\t\treturn;\n\t\t}\n\t\ttunnel.setAddress(address);\n\t}\n\n\tasync destroyTunnel(id: string): Promise<void> {\n\t\tconst tunnel = this._tunnels.get(id);\n\t\tif (tunnel) {\n\t\t\tthis._logService.info(`[SharedProcessTunnelService] Disposing tunnel ${id}.`);\n\t\t\tthis._tunnels.delete(id);\n\t\t\tawait tunnel.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\t// Looks like this tunnel is still starting, mark the id as disposed\n\t\tthis._disposedTunnels.add(id);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
