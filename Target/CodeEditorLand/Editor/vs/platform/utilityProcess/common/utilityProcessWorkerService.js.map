{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/utilityProcess/common/utilityProcessWorkerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IUtilityProcessWorkerProcess {\n\n\t/**\n\t * The module to load as child process into the worker.\n\t */\n\treadonly moduleId: string;\n\n\t/**\n\t * The type of the process appears in the arguments of the\n\t * forked process to identify it easier.\n\t */\n\treadonly type: string;\n}\n\nexport interface IOnDidTerminateUtilityrocessWorkerProcess {\n\n\t/**\n\t * More information around how the utility process worker\n\t * process terminated. Will be `undefined` in case the\n\t * worker process was terminated normally via APIs\n\t * and will be defined in case the worker process\n\t * terminated on its own, either unexpectedly or\n\t * because it finished.\n\t */\n\treadonly reason: IUtilityProcessWorkerProcessExit;\n}\n\nexport interface IUtilityProcessWorkerProcessExit {\n\n\t/**\n\t * The utility process worker process exit code if known.\n\t */\n\treadonly code?: number;\n\n\t/**\n\t * The utility process worker process exit signal if known.\n\t */\n\treadonly signal?: string;\n}\n\nexport interface IUtilityProcessWorkerConfiguration {\n\n\t/**\n\t * Configuration specific to the process to fork.\n\t */\n\treadonly process: IUtilityProcessWorkerProcess;\n\n\t/**\n\t * Configuration specific for how to respond with the\n\t * communication message port to the receiver window.\n\t */\n\treadonly reply: {\n\t\treadonly windowId: number;\n\t\treadonly channel?: string;\n\t\treadonly nonce?: string;\n\t};\n}\n\nexport interface IUtilityProcessWorkerCreateConfiguration extends IUtilityProcessWorkerConfiguration {\n\treadonly reply: {\n\t\treadonly windowId: number;\n\t\treadonly channel: string;\n\t\treadonly nonce: string;\n\t};\n}\n\nexport const ipcUtilityProcessWorkerChannelName = 'utilityProcessWorker';\n\nexport interface IUtilityProcessWorkerService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Will fork a new process with the provided module identifier in a utility\n\t * process and establishes a message port connection to that process. The other\n\t * end of the message port connection will be sent back to the calling window\n\t * as identified by the `reply` configuration.\n\t *\n\t * Requires the forked process to be AMD module that uses our IPC channel framework\n\t * to respond to the provided `channelName` as a server.\n\t *\n\t * The process will be automatically terminated when the receiver window closes,\n\t * crashes or loads/reloads. It can also explicitly be terminated by calling\n\t * `disposeWorker`.\n\t *\n\t * Note on affinity: repeated calls to `createWorker` with the same `moduleId` from\n\t * the same window will result in any previous forked process to get terminated.\n\t * In other words, it is not possible, nor intended to create multiple workers of\n\t * the same process from one window. The intent of these workers is to be reused per\n\t * window and the communication channel allows to dynamically update the processes\n\t * after the fact.\n\t *\n\t * @returns a promise that resolves then the worker terminated. Provides more details\n\t * about the termination that can be used to figure out if the termination was unexpected\n\t * or not and whether the worker needs to be restarted.\n\t */\n\tcreateWorker(configuration: IUtilityProcessWorkerCreateConfiguration): Promise<IOnDidTerminateUtilityrocessWorkerProcess>;\n\n\t/**\n\t * Terminates the process for the provided configuration if any.\n\t */\n\tdisposeWorker(configuration: IUtilityProcessWorkerConfiguration): Promise<void>;\n}\n"],
  "mappings": "AAuEO,MAAM,qCAAqC;",
  "names": []
}
