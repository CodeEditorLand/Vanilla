{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/utilityProcess/electron-main/utilityProcessWorkerMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from \"../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILifecycleMainService } from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport { IWindowsMainService } from \"../../windows/electron-main/windows.js\";\nimport type {\n\tIOnDidTerminateUtilityrocessWorkerProcess,\n\tIUtilityProcessWorkerConfiguration,\n\tIUtilityProcessWorkerCreateConfiguration,\n\tIUtilityProcessWorkerProcessExit,\n\tIUtilityProcessWorkerService,\n} from \"../common/utilityProcessWorkerService.js\";\nimport { WindowUtilityProcess } from \"./utilityProcess.js\";\n\nexport const IUtilityProcessWorkerMainService =\n\tcreateDecorator<IUtilityProcessWorkerMainService>(\"utilityProcessWorker\");\n\nexport interface IUtilityProcessWorkerMainService\n\textends IUtilityProcessWorkerService {\n\treadonly _serviceBrand: undefined;\n}\n\nexport class UtilityProcessWorkerMainService\n\textends Disposable\n\timplements IUtilityProcessWorkerMainService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly workers = new Map<number /* id */, UtilityProcessWorker>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService\n\t\tprivate readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync createWorker(\n\t\tconfiguration: IUtilityProcessWorkerCreateConfiguration,\n\t): Promise<IOnDidTerminateUtilityrocessWorkerProcess> {\n\t\tconst workerLogId = `window: ${configuration.reply.windowId}, moduleId: ${configuration.process.moduleId}`;\n\t\tthis.logService.trace(\n\t\t\t`[UtilityProcessWorker]: createWorker(${workerLogId})`,\n\t\t);\n\n\t\t// Ensure to dispose any existing process for config\n\t\tconst workerId = this.hash(configuration);\n\t\tif (this.workers.has(workerId)) {\n\t\t\tthis.logService.warn(\n\t\t\t\t`[UtilityProcessWorker]: createWorker() found an existing worker that will be terminated (${workerLogId})`,\n\t\t\t);\n\n\t\t\tthis.disposeWorker(configuration);\n\t\t}\n\n\t\t// Create new worker\n\t\tconst worker = new UtilityProcessWorker(\n\t\t\tthis.logService,\n\t\t\tthis.windowsMainService,\n\t\t\tthis.telemetryService,\n\t\t\tthis.lifecycleMainService,\n\t\t\tconfiguration,\n\t\t);\n\t\tif (!worker.spawn()) {\n\t\t\treturn { reason: { code: 1, signal: \"EINVALID\" } };\n\t\t}\n\n\t\tthis.workers.set(workerId, worker);\n\n\t\tconst onDidTerminate =\n\t\t\tnew DeferredPromise<IOnDidTerminateUtilityrocessWorkerProcess>();\n\t\tEvent.once(worker.onDidTerminate)((reason) => {\n\t\t\tif (reason.code === 0) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`[UtilityProcessWorker]: terminated normally with code ${reason.code}, signal: ${reason.signal}`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`[UtilityProcessWorker]: terminated unexpectedly with code ${reason.code}, signal: ${reason.signal}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.workers.delete(workerId);\n\t\t\tonDidTerminate.complete({ reason });\n\t\t});\n\n\t\treturn onDidTerminate.p;\n\t}\n\n\tprivate hash(configuration: IUtilityProcessWorkerConfiguration): number {\n\t\treturn hash({\n\t\t\tmoduleId: configuration.process.moduleId,\n\t\t\twindowId: configuration.reply.windowId,\n\t\t});\n\t}\n\n\tasync disposeWorker(\n\t\tconfiguration: IUtilityProcessWorkerConfiguration,\n\t): Promise<void> {\n\t\tconst workerId = this.hash(configuration);\n\t\tconst worker = this.workers.get(workerId);\n\t\tif (!worker) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(\n\t\t\t`[UtilityProcessWorker]: disposeWorker(window: ${configuration.reply.windowId}, moduleId: ${configuration.process.moduleId})`,\n\t\t);\n\n\t\tworker.kill();\n\t\tworker.dispose();\n\t\tthis.workers.delete(workerId);\n\t}\n}\n\nclass UtilityProcessWorker extends Disposable {\n\tprivate readonly _onDidTerminate = this._register(\n\t\tnew Emitter<IUtilityProcessWorkerProcessExit>(),\n\t);\n\treadonly onDidTerminate = this._onDidTerminate.event;\n\n\tprivate readonly utilityProcess = this._register(\n\t\tnew WindowUtilityProcess(\n\t\t\tthis.logService,\n\t\t\tthis.windowsMainService,\n\t\t\tthis.telemetryService,\n\t\t\tthis.lifecycleMainService,\n\t\t),\n\t);\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService\n\t\tprivate readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\tprivate readonly configuration: IUtilityProcessWorkerCreateConfiguration\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.utilityProcess.onExit((e) =>\n\t\t\t\tthis._onDidTerminate.fire({ code: e.code, signal: e.signal }),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.utilityProcess.onCrash((e) =>\n\t\t\t\tthis._onDidTerminate.fire({ code: e.code, signal: \"ECRASH\" }),\n\t\t\t),\n\t\t);\n\t}\n\n\tspawn(): boolean {\n\t\tconst window = this.windowsMainService.getWindowById(\n\t\t\tthis.configuration.reply.windowId,\n\t\t);\n\t\tconst windowPid = window?.win?.webContents.getOSProcessId();\n\n\t\treturn this.utilityProcess.start({\n\t\t\ttype: this.configuration.process.type,\n\t\t\tentryPoint: this.configuration.process.moduleId,\n\t\t\tparentLifecycleBound: windowPid,\n\t\t\twindowLifecycleBound: true,\n\t\t\tcorrelationId: `${this.configuration.reply.windowId}`,\n\t\t\tresponseWindowId: this.configuration.reply.windowId,\n\t\t\tresponseChannel: this.configuration.reply.channel,\n\t\t\tresponseNonce: this.configuration.reply.nonce,\n\t\t});\n\t}\n\n\tkill() {\n\t\tthis.utilityProcess.kill();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
