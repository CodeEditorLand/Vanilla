{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/utilityProcess/electron-main/utilityProcessWorkerMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IUtilityProcessWorkerCreateConfiguration, IOnDidTerminateUtilityrocessWorkerProcess, IUtilityProcessWorkerConfiguration, IUtilityProcessWorkerProcessExit, IUtilityProcessWorkerService } from '../common/utilityProcessWorkerService.js';\nimport { IWindowsMainService } from '../../windows/electron-main/windows.js';\nimport { IWindowUtilityProcessConfiguration, WindowUtilityProcess } from './utilityProcess.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { Event, Emitter } from '../../../base/common/event.js';\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { ILifecycleMainService } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\n\nexport const IUtilityProcessWorkerMainService = createDecorator<IUtilityProcessWorkerMainService>('utilityProcessWorker');\n\nexport interface IUtilityProcessWorkerMainService extends IUtilityProcessWorkerService {\n\n\treadonly _serviceBrand: undefined;\n}\n\nexport class UtilityProcessWorkerMainService extends Disposable implements IUtilityProcessWorkerMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly workers = new Map<number /* id */, UtilityProcessWorker>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync createWorker(configuration: IUtilityProcessWorkerCreateConfiguration): Promise<IOnDidTerminateUtilityrocessWorkerProcess> {\n\t\tconst workerLogId = `window: ${configuration.reply.windowId}, moduleId: ${configuration.process.moduleId}`;\n\t\tthis.logService.trace(`[UtilityProcessWorker]: createWorker(${workerLogId})`);\n\n\t\t// Ensure to dispose any existing process for config\n\t\tconst workerId = this.hash(configuration);\n\t\tif (this.workers.has(workerId)) {\n\t\t\tthis.logService.warn(`[UtilityProcessWorker]: createWorker() found an existing worker that will be terminated (${workerLogId})`);\n\n\t\t\tthis.disposeWorker(configuration);\n\t\t}\n\n\t\t// Create new worker\n\t\tconst worker = new UtilityProcessWorker(this.logService, this.windowsMainService, this.telemetryService, this.lifecycleMainService, this.configurationService, configuration);\n\t\tif (!worker.spawn()) {\n\t\t\treturn { reason: { code: 1, signal: 'EINVALID' } };\n\t\t}\n\n\t\tthis.workers.set(workerId, worker);\n\n\t\tconst onDidTerminate = new DeferredPromise<IOnDidTerminateUtilityrocessWorkerProcess>();\n\t\tEvent.once(worker.onDidTerminate)(reason => {\n\t\t\tif (reason.code === 0) {\n\t\t\t\tthis.logService.trace(`[UtilityProcessWorker]: terminated normally with code ${reason.code}, signal: ${reason.signal}`);\n\t\t\t} else {\n\t\t\t\tthis.logService.error(`[UtilityProcessWorker]: terminated unexpectedly with code ${reason.code}, signal: ${reason.signal}`);\n\t\t\t}\n\n\t\t\tthis.workers.delete(workerId);\n\t\t\tonDidTerminate.complete({ reason });\n\t\t});\n\n\t\treturn onDidTerminate.p;\n\t}\n\n\tprivate hash(configuration: IUtilityProcessWorkerConfiguration): number {\n\t\treturn hash({\n\t\t\tmoduleId: configuration.process.moduleId,\n\t\t\twindowId: configuration.reply.windowId\n\t\t});\n\t}\n\n\tasync disposeWorker(configuration: IUtilityProcessWorkerConfiguration): Promise<void> {\n\t\tconst workerId = this.hash(configuration);\n\t\tconst worker = this.workers.get(workerId);\n\t\tif (!worker) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`[UtilityProcessWorker]: disposeWorker(window: ${configuration.reply.windowId}, moduleId: ${configuration.process.moduleId})`);\n\n\t\tworker.kill();\n\t\tworker.dispose();\n\t\tthis.workers.delete(workerId);\n\t}\n}\n\nclass UtilityProcessWorker extends Disposable {\n\n\tprivate readonly _onDidTerminate = this._register(new Emitter<IUtilityProcessWorkerProcessExit>());\n\treadonly onDidTerminate = this._onDidTerminate.event;\n\n\tprivate readonly utilityProcess = this._register(new WindowUtilityProcess(this.logService, this.windowsMainService, this.telemetryService, this.lifecycleMainService));\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\tprivate readonly configuration: IUtilityProcessWorkerCreateConfiguration\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.utilityProcess.onExit(e => this._onDidTerminate.fire({ code: e.code, signal: e.signal })));\n\t\tthis._register(this.utilityProcess.onCrash(e => this._onDidTerminate.fire({ code: e.code, signal: 'ECRASH' })));\n\t}\n\n\tspawn(): boolean {\n\t\tconst window = this.windowsMainService.getWindowById(this.configuration.reply.windowId);\n\t\tconst windowPid = window?.win?.webContents.getOSProcessId();\n\n\t\tlet configuration: IWindowUtilityProcessConfiguration = {\n\t\t\ttype: this.configuration.process.type,\n\t\t\tentryPoint: this.configuration.process.moduleId,\n\t\t\tparentLifecycleBound: windowPid,\n\t\t\twindowLifecycleBound: true,\n\t\t\tcorrelationId: `${this.configuration.reply.windowId}`,\n\t\t\tresponseWindowId: this.configuration.reply.windowId,\n\t\t\tresponseChannel: this.configuration.reply.channel,\n\t\t\tresponseNonce: this.configuration.reply.nonce\n\t\t};\n\n\t\tif (this.configuration.process.type === 'fileWatcher' && this.configurationService.getValue<boolean>('files.experimentalWatcherNext') === true) {\n\t\t\tconfiguration = {\n\t\t\t\t...configuration,\n\t\t\t\tenv: {\n\t\t\t\t\tVSCODE_USE_WATCHER2: 'true'\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn this.utilityProcess.start(configuration);\n\t}\n\n\tkill() {\n\t\tthis.utilityProcess.kill();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
