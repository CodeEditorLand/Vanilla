{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/utilityProcess/electron-main/utilityProcess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { StringDecoder } from \"string_decoder\";\nimport {\n\ttype BrowserWindow,\n\ttype Details,\n\ttype UtilityProcess as ElectronUtilityProcess,\n\ttype ForkOptions,\n\tMessageChannelMain,\n\tapp,\n\tutilityProcess,\n} from \"electron\";\nimport { timeout } from \"../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { FileAccess } from \"../../../base/common/network.js\";\nimport { deepClone } from \"../../../base/common/objects.js\";\nimport { isWindows } from \"../../../base/common/platform.js\";\nimport { removeDangerousEnvVariables } from \"../../../base/common/processes.js\";\nimport Severity from \"../../../base/common/severity.js\";\nimport { upcast } from \"../../../base/common/types.js\";\nimport {\n\tgetUNCHostAllowlist,\n\tisUNCAccessRestrictionsDisabled,\n} from \"../../../base/node/unc.js\";\nimport { ILifecycleMainService } from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport { IWindowsMainService } from \"../../windows/electron-main/windows.js\";\n\nexport interface IUtilityProcessConfiguration {\n\t/**\n\t * A way to group utility processes of same type together.\n\t */\n\treadonly type: string;\n\n\t/**\n\t * The entry point to load in the utility process.\n\t */\n\treadonly entryPoint: string;\n\n\t/**\n\t * An optional serializable object to be sent into the utility process\n\t * as first message alongside the message port.\n\t */\n\treadonly payload?: unknown;\n\n\t/**\n\t * Environment key-value pairs. Default is `process.env`.\n\t */\n\treadonly env?: { [key: string]: string | undefined };\n\n\t/**\n\t * List of string arguments that will be available as `process.argv`\n\t * in the child process.\n\t */\n\treadonly args?: string[];\n\n\t/**\n\t * List of string arguments passed to the executable.\n\t */\n\treadonly execArgv?: string[];\n\n\t/**\n\t * Allow the utility process to load unsigned libraries.\n\t */\n\treadonly allowLoadingUnsignedLibraries?: boolean;\n\n\t/**\n\t * Used in log messages to correlate the process\n\t * with other components.\n\t */\n\treadonly correlationId?: string;\n\n\t/**\n\t * Optional pid of the parent process. If set, the\n\t * utility process will be terminated when the parent\n\t * process exits.\n\t */\n\treadonly parentLifecycleBound?: number;\n\n\t/**\n\t * Allow the utility process to force heap allocations inside\n\t * the V8 sandbox.\n\t */\n\treadonly forceAllocationsToV8Sandbox?: boolean;\n\n\t/**\n\t * HTTP 401 and 407 requests created via electron:net module\n\t * will be redirected to the main process and can be handled\n\t * via the app#login event.\n\t */\n\treadonly respondToAuthRequestsFromMainProcess?: boolean;\n}\n\nexport interface IWindowUtilityProcessConfiguration\n\textends IUtilityProcessConfiguration {\n\t// --- message port response related\n\n\treadonly responseWindowId: number;\n\treadonly responseChannel: string;\n\treadonly responseNonce: string;\n\n\t// --- utility process options\n\n\t/**\n\t * If set to `true`, will terminate the utility process\n\t * when the associated browser window closes or reloads.\n\t */\n\treadonly windowLifecycleBound?: boolean;\n}\n\nfunction isWindowUtilityProcessConfiguration(\n\tconfig: IUtilityProcessConfiguration,\n): config is IWindowUtilityProcessConfiguration {\n\tconst candidate = config as IWindowUtilityProcessConfiguration;\n\n\treturn typeof candidate.responseWindowId === \"number\";\n}\n\ninterface IUtilityProcessExitBaseEvent {\n\t/**\n\t * The process id of the process that exited.\n\t */\n\treadonly pid: number;\n\n\t/**\n\t * The exit code of the process.\n\t */\n\treadonly code: number;\n}\n\nexport interface IUtilityProcessExitEvent extends IUtilityProcessExitBaseEvent {\n\t/**\n\t * The signal that caused the process to exit is unknown\n\t * for utility processes.\n\t */\n\treadonly signal: \"unknown\";\n}\n\nexport interface IUtilityProcessCrashEvent\n\textends IUtilityProcessExitBaseEvent {\n\t/**\n\t * The reason of the utility process crash.\n\t */\n\treadonly reason:\n\t\t| \"clean-exit\"\n\t\t| \"abnormal-exit\"\n\t\t| \"killed\"\n\t\t| \"crashed\"\n\t\t| \"oom\"\n\t\t| \"launch-failed\"\n\t\t| \"integrity-failure\";\n}\n\nexport interface IUtilityProcessInfo {\n\treadonly pid: number;\n\treadonly name: string;\n}\n\nexport class UtilityProcess extends Disposable {\n\tprivate static ID_COUNTER = 0;\n\n\tprivate static readonly all = new Map<number, IUtilityProcessInfo>();\n\tstatic getAll(): IUtilityProcessInfo[] {\n\t\treturn Array.from(UtilityProcess.all.values());\n\t}\n\n\tprivate readonly id = String(++UtilityProcess.ID_COUNTER);\n\n\tprivate readonly _onStdout = this._register(new Emitter<string>());\n\treadonly onStdout = this._onStdout.event;\n\n\tprivate readonly _onStderr = this._register(new Emitter<string>());\n\treadonly onStderr = this._onStderr.event;\n\n\tprivate readonly _onMessage = this._register(new Emitter<unknown>());\n\treadonly onMessage = this._onMessage.event;\n\n\tprivate readonly _onSpawn = this._register(\n\t\tnew Emitter<number | undefined>(),\n\t);\n\treadonly onSpawn = this._onSpawn.event;\n\n\tprivate readonly _onExit = this._register(\n\t\tnew Emitter<IUtilityProcessExitEvent>(),\n\t);\n\treadonly onExit = this._onExit.event;\n\n\tprivate readonly _onCrash = this._register(\n\t\tnew Emitter<IUtilityProcessCrashEvent>(),\n\t);\n\treadonly onCrash = this._onCrash.event;\n\n\tprivate process: ElectronUtilityProcess | undefined = undefined;\n\tprivate processPid: number | undefined = undefined;\n\tprivate configuration: IUtilityProcessConfiguration | undefined = undefined;\n\tprivate killed = false;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService\n\t\tprotected readonly lifecycleMainService: ILifecycleMainService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected log(msg: string, severity: Severity): void {\n\t\tlet logMsg: string;\n\t\tif (this.configuration?.correlationId) {\n\t\t\tlogMsg = `[UtilityProcess id: ${this.configuration?.correlationId}, type: ${this.configuration?.type}, pid: ${this.processPid ?? \"<none>\"}]: ${msg}`;\n\t\t} else {\n\t\t\tlogMsg = `[UtilityProcess type: ${this.configuration?.type}, pid: ${this.processPid ?? \"<none>\"}]: ${msg}`;\n\t\t}\n\n\t\tswitch (severity) {\n\t\t\tcase Severity.Error:\n\t\t\t\tthis.logService.error(logMsg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Warning:\n\t\t\t\tthis.logService.warn(logMsg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Info:\n\t\t\t\tthis.logService.trace(logMsg);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate validateCanStart(): boolean {\n\t\tif (this.process) {\n\t\t\tthis.log(\n\t\t\t\t\"Cannot start utility process because it is already running...\",\n\t\t\t\tSeverity.Error,\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstart(configuration: IUtilityProcessConfiguration): boolean {\n\t\tconst started = this.doStart(configuration);\n\n\t\tif (started && configuration.payload) {\n\t\t\tconst posted = this.postMessage(configuration.payload);\n\t\t\tif (posted) {\n\t\t\t\tthis.log(\"payload sent via postMessage()\", Severity.Info);\n\t\t\t}\n\t\t}\n\n\t\treturn started;\n\t}\n\n\tprotected doStart(configuration: IUtilityProcessConfiguration): boolean {\n\t\tif (!this.validateCanStart()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.configuration = configuration;\n\n\t\tconst serviceName = `${this.configuration.type}-${this.id}`;\n\t\tconst modulePath = FileAccess.asFileUri(\"bootstrap-fork.js\").fsPath;\n\t\tconst args = this.configuration.args ?? [];\n\t\tconst execArgv = this.configuration.execArgv ?? [];\n\t\tconst allowLoadingUnsignedLibraries =\n\t\t\tthis.configuration.allowLoadingUnsignedLibraries;\n\t\tconst forceAllocationsToV8Sandbox =\n\t\t\tthis.configuration.forceAllocationsToV8Sandbox;\n\t\tconst respondToAuthRequestsFromMainProcess =\n\t\t\tthis.configuration.respondToAuthRequestsFromMainProcess;\n\t\tconst stdio = \"pipe\";\n\t\tconst env = this.createEnv(configuration);\n\n\t\tthis.log(\"creating new...\", Severity.Info);\n\n\t\t// Fork utility process\n\t\tthis.process = utilityProcess.fork(\n\t\t\tmodulePath,\n\t\t\targs,\n\t\t\tupcast<\n\t\t\t\tForkOptions,\n\t\t\t\tForkOptions & {\n\t\t\t\t\tforceAllocationsToV8Sandbox?: boolean;\n\t\t\t\t\trespondToAuthRequestsFromMainProcess?: boolean;\n\t\t\t\t}\n\t\t\t>({\n\t\t\t\tserviceName,\n\t\t\t\tenv,\n\t\t\t\texecArgv,\n\t\t\t\tallowLoadingUnsignedLibraries,\n\t\t\t\tforceAllocationsToV8Sandbox,\n\t\t\t\trespondToAuthRequestsFromMainProcess,\n\t\t\t\tstdio,\n\t\t\t}),\n\t\t);\n\n\t\t// Register to events\n\t\tthis.registerListeners(this.process, this.configuration, serviceName);\n\n\t\treturn true;\n\t}\n\n\tprivate createEnv(configuration: IUtilityProcessConfiguration): {\n\t\t[key: string]: any;\n\t} {\n\t\tconst env: { [key: string]: any } = configuration.env\n\t\t\t? { ...configuration.env }\n\t\t\t: { ...deepClone(process.env) };\n\n\t\t// Apply supported environment variables from config\n\t\tenv[\"VSCODE_AMD_ENTRYPOINT\"] = configuration.entryPoint;\n\t\tif (typeof configuration.parentLifecycleBound === \"number\") {\n\t\t\tenv[\"VSCODE_PARENT_PID\"] = String(\n\t\t\t\tconfiguration.parentLifecycleBound,\n\t\t\t);\n\t\t}\n\t\tenv[\"VSCODE_CRASH_REPORTER_PROCESS_TYPE\"] = configuration.type;\n\t\tif (isWindows) {\n\t\t\tif (isUNCAccessRestrictionsDisabled()) {\n\t\t\t\tenv[\"NODE_DISABLE_UNC_ACCESS_CHECKS\"] = \"1\";\n\t\t\t} else {\n\t\t\t\tenv[\"NODE_UNC_HOST_ALLOWLIST\"] =\n\t\t\t\t\tgetUNCHostAllowlist().join(\"\\\\\");\n\t\t\t}\n\t\t}\n\n\t\t// Remove any environment variables that are not allowed\n\t\tremoveDangerousEnvVariables(env);\n\n\t\t// Ensure all values are strings, otherwise the process will not start\n\t\tfor (const key of Object.keys(env)) {\n\t\t\tenv[key] = String(env[key]);\n\t\t}\n\n\t\treturn env;\n\t}\n\n\tprivate registerListeners(\n\t\tprocess: ElectronUtilityProcess,\n\t\tconfiguration: IUtilityProcessConfiguration,\n\t\tserviceName: string,\n\t): void {\n\t\t// Stdout\n\t\tif (process.stdout) {\n\t\t\tconst stdoutDecoder = new StringDecoder(\"utf-8\");\n\t\t\tthis._register(\n\t\t\t\tEvent.fromNodeEventEmitter<string | Buffer>(\n\t\t\t\t\tprocess.stdout,\n\t\t\t\t\t\"data\",\n\t\t\t\t)((chunk) =>\n\t\t\t\t\tthis._onStdout.fire(\n\t\t\t\t\t\ttypeof chunk === \"string\"\n\t\t\t\t\t\t\t? chunk\n\t\t\t\t\t\t\t: stdoutDecoder.write(chunk),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Stderr\n\t\tif (process.stderr) {\n\t\t\tconst stderrDecoder = new StringDecoder(\"utf-8\");\n\t\t\tthis._register(\n\t\t\t\tEvent.fromNodeEventEmitter<string | Buffer>(\n\t\t\t\t\tprocess.stderr,\n\t\t\t\t\t\"data\",\n\t\t\t\t)((chunk) =>\n\t\t\t\t\tthis._onStderr.fire(\n\t\t\t\t\t\ttypeof chunk === \"string\"\n\t\t\t\t\t\t\t? chunk\n\t\t\t\t\t\t\t: stderrDecoder.write(chunk),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Messages\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter(\n\t\t\t\tprocess,\n\t\t\t\t\"message\",\n\t\t\t)((msg) => this._onMessage.fire(msg)),\n\t\t);\n\n\t\t// Spawn\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter<void>(\n\t\t\t\tprocess,\n\t\t\t\t\"spawn\",\n\t\t\t)(() => {\n\t\t\t\tthis.processPid = process.pid;\n\n\t\t\t\tif (typeof process.pid === \"number\") {\n\t\t\t\t\tUtilityProcess.all.set(process.pid, {\n\t\t\t\t\t\tpid: process.pid,\n\t\t\t\t\t\tname: isWindowUtilityProcessConfiguration(configuration)\n\t\t\t\t\t\t\t? `${configuration.type} [${configuration.responseWindowId}]`\n\t\t\t\t\t\t\t: configuration.type,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.log(\"successfully created\", Severity.Info);\n\t\t\t\tthis._onSpawn.fire(process.pid);\n\t\t\t}),\n\t\t);\n\n\t\t// Exit\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter<number>(\n\t\t\t\tprocess,\n\t\t\t\t\"exit\",\n\t\t\t)((code) => {\n\t\t\t\tconst normalizedCode = this.isNormalExit(code) ? 0 : code;\n\t\t\t\tthis.log(\n\t\t\t\t\t`received exit event with code ${normalizedCode}`,\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t);\n\n\t\t\t\t// Event\n\t\t\t\tthis._onExit.fire({\n\t\t\t\t\tpid: this.processPid!,\n\t\t\t\t\tcode: normalizedCode,\n\t\t\t\t\tsignal: \"unknown\",\n\t\t\t\t});\n\n\t\t\t\t// Cleanup\n\t\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t\t}),\n\t\t);\n\n\t\t// Child process gone\n\t\tthis._register(\n\t\t\tEvent.fromNodeEventEmitter<{ details: Details }>(\n\t\t\t\tapp,\n\t\t\t\t\"child-process-gone\",\n\t\t\t\t(event, details) => ({ event, details }),\n\t\t\t)(({ details }) => {\n\t\t\t\tif (\n\t\t\t\t\tdetails.type === \"Utility\" &&\n\t\t\t\t\tdetails.name === serviceName &&\n\t\t\t\t\t!this.isNormalExit(details.exitCode)\n\t\t\t\t) {\n\t\t\t\t\tthis.log(\n\t\t\t\t\t\t`crashed with code ${details.exitCode} and reason '${details.reason}'`,\n\t\t\t\t\t\tSeverity.Error,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Telemetry\n\t\t\t\t\ttype UtilityProcessCrashClassification = {\n\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\t\tcomment: \"The type of utility process to understand the origin of the crash better.\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\treason: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\t\tcomment: \"The reason of the utility process crash to understand the nature of the crash better.\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcode: {\n\t\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\t\tcomment: \"The exit code of the utility process to understand the nature of the crash better\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\towner: \"bpasero\";\n\t\t\t\t\t\tcomment: \"Provides insight into reasons the utility process crashed.\";\n\t\t\t\t\t};\n\t\t\t\t\ttype UtilityProcessCrashEvent = {\n\t\t\t\t\t\ttype: string;\n\t\t\t\t\t\treason: string;\n\t\t\t\t\t\tcode: number;\n\t\t\t\t\t};\n\t\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\t\tUtilityProcessCrashEvent,\n\t\t\t\t\t\tUtilityProcessCrashClassification\n\t\t\t\t\t>(\"utilityprocesscrash\", {\n\t\t\t\t\t\ttype: configuration.type,\n\t\t\t\t\t\treason: details.reason,\n\t\t\t\t\t\tcode: details.exitCode,\n\t\t\t\t\t});\n\n\t\t\t\t\t// Event\n\t\t\t\t\tthis._onCrash.fire({\n\t\t\t\t\t\tpid: this.processPid!,\n\t\t\t\t\t\tcode: details.exitCode,\n\t\t\t\t\t\treason: details.reason,\n\t\t\t\t\t});\n\n\t\t\t\t\t// Cleanup\n\t\t\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tonce(message: unknown, callback: () => void): void {\n\t\tconst disposable = this._register(\n\t\t\tthis._onMessage.event((msg) => {\n\t\t\t\tif (msg === message) {\n\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tpostMessage(\n\t\tmessage: unknown,\n\t\ttransfer?: Electron.MessagePortMain[],\n\t): boolean {\n\t\tif (!this.process) {\n\t\t\treturn false; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.process.postMessage(message, transfer);\n\n\t\treturn true;\n\t}\n\n\tconnect(payload?: unknown): Electron.MessagePortMain {\n\t\tconst { port1: outPort, port2: utilityProcessPort } =\n\t\t\tnew MessageChannelMain();\n\t\tthis.postMessage(payload, [utilityProcessPort]);\n\n\t\treturn outPort;\n\t}\n\n\tenableInspectPort(): boolean {\n\t\tif (!this.process || typeof this.processPid !== \"number\") {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.log(\"enabling inspect port\", Severity.Info);\n\n\t\tinterface ProcessExt {\n\t\t\t_debugProcess?(pid: number): unknown;\n\t\t}\n\n\t\t// use (undocumented) _debugProcess feature of node if available\n\t\tconst processExt = <ProcessExt>process;\n\t\tif (typeof processExt._debugProcess === \"function\") {\n\t\t\tprocessExt._debugProcess(this.processPid);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// not supported...\n\t\treturn false;\n\t}\n\n\tkill(): void {\n\t\tif (!this.process) {\n\t\t\treturn; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.log(\"attempting to kill the process...\", Severity.Info);\n\t\tconst killed = this.process.kill();\n\t\tif (killed) {\n\t\t\tthis.log(\"successfully killed the process\", Severity.Info);\n\t\t\tthis.killed = true;\n\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t} else {\n\t\t\tthis.log(\"unable to kill the process\", Severity.Warning);\n\t\t}\n\t}\n\n\tprivate isNormalExit(exitCode: number): boolean {\n\t\tif (exitCode === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Treat an exit code of 15 (SIGTERM) as a normal exit\n\t\t// if we triggered the termination from process.kill()\n\n\t\treturn this.killed && exitCode === 15 /* SIGTERM */;\n\t}\n\n\tprivate onDidExitOrCrashOrKill(): void {\n\t\tif (typeof this.processPid === \"number\") {\n\t\t\tUtilityProcess.all.delete(this.processPid);\n\t\t}\n\n\t\tthis.process = undefined;\n\t}\n\n\tasync waitForExit(maxWaitTimeMs: number): Promise<void> {\n\t\tif (!this.process) {\n\t\t\treturn; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.log(\"waiting to exit...\", Severity.Info);\n\t\tawait Promise.race([\n\t\t\tEvent.toPromise(this.onExit),\n\t\t\ttimeout(maxWaitTimeMs),\n\t\t]);\n\n\t\tif (this.process) {\n\t\t\tthis.log(\n\t\t\t\t`did not exit within ${maxWaitTimeMs}ms, will kill it now...`,\n\t\t\t\tSeverity.Info,\n\t\t\t);\n\t\t\tthis.kill();\n\t\t}\n\t}\n}\n\nexport class WindowUtilityProcess extends UtilityProcess {\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWindowsMainService\n\t\tprivate readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t) {\n\t\tsuper(logService, telemetryService, lifecycleMainService);\n\t}\n\n\toverride start(configuration: IWindowUtilityProcessConfiguration): boolean {\n\t\tconst responseWindow = this.windowsMainService.getWindowById(\n\t\t\tconfiguration.responseWindowId,\n\t\t);\n\t\tif (\n\t\t\t!responseWindow?.win ||\n\t\t\tresponseWindow.win.isDestroyed() ||\n\t\t\tresponseWindow.win.webContents.isDestroyed()\n\t\t) {\n\t\t\tthis.log(\n\t\t\t\t\"Refusing to start utility process because requesting window cannot be found or is destroyed...\",\n\t\t\t\tSeverity.Error,\n\t\t\t);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Start utility process\n\t\tconst started = super.doStart(configuration);\n\t\tif (!started) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Register to window events\n\t\tthis.registerWindowListeners(responseWindow.win, configuration);\n\n\t\t// Establish & exchange message ports\n\t\tconst windowPort = this.connect(configuration.payload);\n\t\tresponseWindow.win.webContents.postMessage(\n\t\t\tconfiguration.responseChannel,\n\t\t\tconfiguration.responseNonce,\n\t\t\t[windowPort],\n\t\t);\n\n\t\treturn true;\n\t}\n\n\tprivate registerWindowListeners(\n\t\twindow: BrowserWindow,\n\t\tconfiguration: IWindowUtilityProcessConfiguration,\n\t): void {\n\t\t// If the lifecycle of the utility process is bound to the window,\n\t\t// we kill the process if the window closes or changes\n\n\t\tif (configuration.windowLifecycleBound) {\n\t\t\tthis._register(\n\t\t\t\tEvent.filter(\n\t\t\t\t\tthis.lifecycleMainService.onWillLoadWindow,\n\t\t\t\t\t(e) => e.window.win === window,\n\t\t\t\t)(() => this.kill()),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tEvent.fromNodeEventEmitter(window, \"closed\")(() => this.kill()),\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["process"]
}
