{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/utilityProcess/electron-main/utilityProcess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow, Details, MessageChannelMain, app, utilityProcess, UtilityProcess as ElectronUtilityProcess, ForkOptions } from 'electron';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { StringDecoder } from 'string_decoder';\nimport { timeout } from '../../../base/common/async.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { IWindowsMainService } from '../../windows/electron-main/windows.js';\nimport Severity from '../../../base/common/severity.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { ILifecycleMainService } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { removeDangerousEnvVariables } from '../../../base/common/processes.js';\nimport { deepClone } from '../../../base/common/objects.js';\nimport { isWindows } from '../../../base/common/platform.js';\nimport { isUNCAccessRestrictionsDisabled, getUNCHostAllowlist } from '../../../base/node/unc.js';\nimport { upcast } from '../../../base/common/types.js';\n\nexport interface IUtilityProcessConfiguration {\n\n\t/**\n\t * A way to group utility processes of same type together.\n\t */\n\treadonly type: string;\n\n\t/**\n\t * The entry point to load in the utility process.\n\t */\n\treadonly entryPoint: string;\n\n\t/**\n\t * An optional serializable object to be sent into the utility process\n\t * as first message alongside the message port.\n\t */\n\treadonly payload?: unknown;\n\n\t/**\n\t * Environment key-value pairs. Default is `process.env`.\n\t */\n\treadonly env?: { [key: string]: string | undefined };\n\n\t/**\n\t * List of string arguments that will be available as `process.argv`\n\t * in the child process.\n\t */\n\treadonly args?: string[];\n\n\t/**\n\t * List of string arguments passed to the executable.\n\t */\n\treadonly execArgv?: string[];\n\n\t/**\n\t * Allow the utility process to load unsigned libraries.\n\t */\n\treadonly allowLoadingUnsignedLibraries?: boolean;\n\n\t/**\n\t * Used in log messages to correlate the process\n\t * with other components.\n\t */\n\treadonly correlationId?: string;\n\n\t/**\n\t * Optional pid of the parent process. If set, the\n\t * utility process will be terminated when the parent\n\t * process exits.\n\t */\n\treadonly parentLifecycleBound?: number;\n\n\t/**\n\t * Allow the utility process to force heap allocations inside\n\t * the V8 sandbox.\n\t */\n\treadonly forceAllocationsToV8Sandbox?: boolean;\n\n\t/**\n\t * HTTP 401 and 407 requests created via electron:net module\n\t * will be redirected to the main process and can be handled\n\t * via the app#login event.\n\t */\n\treadonly respondToAuthRequestsFromMainProcess?: boolean;\n}\n\nexport interface IWindowUtilityProcessConfiguration extends IUtilityProcessConfiguration {\n\n\t// --- message port response related\n\n\treadonly responseWindowId: number;\n\treadonly responseChannel: string;\n\treadonly responseNonce: string;\n\n\t// --- utility process options\n\n\t/**\n\t * If set to `true`, will terminate the utility process\n\t * when the associated browser window closes or reloads.\n\t */\n\treadonly windowLifecycleBound?: boolean;\n}\n\nfunction isWindowUtilityProcessConfiguration(config: IUtilityProcessConfiguration): config is IWindowUtilityProcessConfiguration {\n\tconst candidate = config as IWindowUtilityProcessConfiguration;\n\n\treturn typeof candidate.responseWindowId === 'number';\n}\n\ninterface IUtilityProcessExitBaseEvent {\n\n\t/**\n\t * The process id of the process that exited.\n\t */\n\treadonly pid: number;\n\n\t/**\n\t * The exit code of the process.\n\t */\n\treadonly code: number;\n}\n\nexport interface IUtilityProcessExitEvent extends IUtilityProcessExitBaseEvent {\n\n\t/**\n\t * The signal that caused the process to exit is unknown\n\t * for utility processes.\n\t */\n\treadonly signal: 'unknown';\n}\n\nexport interface IUtilityProcessCrashEvent extends IUtilityProcessExitBaseEvent {\n\n\t/**\n\t * The reason of the utility process crash.\n\t */\n\treadonly reason: 'clean-exit' | 'abnormal-exit' | 'killed' | 'crashed' | 'oom' | 'launch-failed' | 'integrity-failure';\n}\n\nexport interface IUtilityProcessInfo {\n\treadonly pid: number;\n\treadonly name: string;\n}\n\nexport class UtilityProcess extends Disposable {\n\n\tprivate static ID_COUNTER = 0;\n\n\tprivate static readonly all = new Map<number, IUtilityProcessInfo>();\n\tstatic getAll(): IUtilityProcessInfo[] {\n\t\treturn Array.from(UtilityProcess.all.values());\n\t}\n\n\tprivate readonly id = String(++UtilityProcess.ID_COUNTER);\n\n\tprivate readonly _onStdout = this._register(new Emitter<string>());\n\treadonly onStdout = this._onStdout.event;\n\n\tprivate readonly _onStderr = this._register(new Emitter<string>());\n\treadonly onStderr = this._onStderr.event;\n\n\tprivate readonly _onMessage = this._register(new Emitter<unknown>());\n\treadonly onMessage = this._onMessage.event;\n\n\tprivate readonly _onSpawn = this._register(new Emitter<number | undefined>());\n\treadonly onSpawn = this._onSpawn.event;\n\n\tprivate readonly _onExit = this._register(new Emitter<IUtilityProcessExitEvent>());\n\treadonly onExit = this._onExit.event;\n\n\tprivate readonly _onCrash = this._register(new Emitter<IUtilityProcessCrashEvent>());\n\treadonly onCrash = this._onCrash.event;\n\n\tprivate process: ElectronUtilityProcess | undefined = undefined;\n\tprivate processPid: number | undefined = undefined;\n\tprivate configuration: IUtilityProcessConfiguration | undefined = undefined;\n\tprivate killed = false;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService protected readonly lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected log(msg: string, severity: Severity): void {\n\t\tlet logMsg: string;\n\t\tif (this.configuration?.correlationId) {\n\t\t\tlogMsg = `[UtilityProcess id: ${this.configuration?.correlationId}, type: ${this.configuration?.type}, pid: ${this.processPid ?? '<none>'}]: ${msg}`;\n\t\t} else {\n\t\t\tlogMsg = `[UtilityProcess type: ${this.configuration?.type}, pid: ${this.processPid ?? '<none>'}]: ${msg}`;\n\t\t}\n\n\t\tswitch (severity) {\n\t\t\tcase Severity.Error:\n\t\t\t\tthis.logService.error(logMsg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Warning:\n\t\t\t\tthis.logService.warn(logMsg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Info:\n\t\t\t\tthis.logService.trace(logMsg);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate validateCanStart(): boolean {\n\t\tif (this.process) {\n\t\t\tthis.log('Cannot start utility process because it is already running...', Severity.Error);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstart(configuration: IUtilityProcessConfiguration): boolean {\n\t\tconst started = this.doStart(configuration);\n\n\t\tif (started && configuration.payload) {\n\t\t\tconst posted = this.postMessage(configuration.payload);\n\t\t\tif (posted) {\n\t\t\t\tthis.log('payload sent via postMessage()', Severity.Info);\n\t\t\t}\n\t\t}\n\n\t\treturn started;\n\t}\n\n\tprotected doStart(configuration: IUtilityProcessConfiguration): boolean {\n\t\tif (!this.validateCanStart()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.configuration = configuration;\n\n\t\tconst serviceName = `${this.configuration.type}-${this.id}`;\n\t\tconst modulePath = FileAccess.asFileUri('bootstrap-fork.js').fsPath;\n\t\tconst args = this.configuration.args ?? [];\n\t\tconst execArgv = this.configuration.execArgv ?? [];\n\t\tconst allowLoadingUnsignedLibraries = this.configuration.allowLoadingUnsignedLibraries;\n\t\tconst forceAllocationsToV8Sandbox = this.configuration.forceAllocationsToV8Sandbox;\n\t\tconst respondToAuthRequestsFromMainProcess = this.configuration.respondToAuthRequestsFromMainProcess;\n\t\tconst stdio = 'pipe';\n\t\tconst env = this.createEnv(configuration);\n\n\t\tthis.log('creating new...', Severity.Info);\n\n\t\t// Fork utility process\n\t\tthis.process = utilityProcess.fork(modulePath, args, upcast<ForkOptions, ForkOptions & {\n\t\t\tforceAllocationsToV8Sandbox?: boolean;\n\t\t\trespondToAuthRequestsFromMainProcess?: boolean;\n\t\t}>({\n\t\t\tserviceName,\n\t\t\tenv,\n\t\t\texecArgv,\n\t\t\tallowLoadingUnsignedLibraries,\n\t\t\tforceAllocationsToV8Sandbox,\n\t\t\trespondToAuthRequestsFromMainProcess,\n\t\t\tstdio\n\t\t}));\n\n\t\t// Register to events\n\t\tthis.registerListeners(this.process, this.configuration, serviceName);\n\n\t\treturn true;\n\t}\n\n\tprivate createEnv(configuration: IUtilityProcessConfiguration): { [key: string]: any } {\n\t\tconst env: { [key: string]: any } = configuration.env ? { ...configuration.env } : { ...deepClone(process.env) };\n\n\t\t// Apply supported environment variables from config\n\t\tenv['VSCODE_AMD_ENTRYPOINT'] = configuration.entryPoint;\n\t\tif (typeof configuration.parentLifecycleBound === 'number') {\n\t\t\tenv['VSCODE_PARENT_PID'] = String(configuration.parentLifecycleBound);\n\t\t}\n\t\tenv['VSCODE_CRASH_REPORTER_PROCESS_TYPE'] = configuration.type;\n\t\tif (isWindows) {\n\t\t\tif (isUNCAccessRestrictionsDisabled()) {\n\t\t\t\tenv['NODE_DISABLE_UNC_ACCESS_CHECKS'] = '1';\n\t\t\t} else {\n\t\t\t\tenv['NODE_UNC_HOST_ALLOWLIST'] = getUNCHostAllowlist().join('\\\\');\n\t\t\t}\n\t\t}\n\n\t\t// Remove any environment variables that are not allowed\n\t\tremoveDangerousEnvVariables(env);\n\n\t\t// Ensure all values are strings, otherwise the process will not start\n\t\tfor (const key of Object.keys(env)) {\n\t\t\tenv[key] = String(env[key]);\n\t\t}\n\n\t\treturn env;\n\t}\n\n\tprivate registerListeners(process: ElectronUtilityProcess, configuration: IUtilityProcessConfiguration, serviceName: string): void {\n\n\t\t// Stdout\n\t\tif (process.stdout) {\n\t\t\tconst stdoutDecoder = new StringDecoder('utf-8');\n\t\t\tthis._register(Event.fromNodeEventEmitter<string | Buffer>(process.stdout, 'data')(chunk => this._onStdout.fire(typeof chunk === 'string' ? chunk : stdoutDecoder.write(chunk))));\n\t\t}\n\n\t\t// Stderr\n\t\tif (process.stderr) {\n\t\t\tconst stderrDecoder = new StringDecoder('utf-8');\n\t\t\tthis._register(Event.fromNodeEventEmitter<string | Buffer>(process.stderr, 'data')(chunk => this._onStderr.fire(typeof chunk === 'string' ? chunk : stderrDecoder.write(chunk))));\n\t\t}\n\n\t\t// Messages\n\t\tthis._register(Event.fromNodeEventEmitter(process, 'message')(msg => this._onMessage.fire(msg)));\n\n\t\t// Spawn\n\t\tthis._register(Event.fromNodeEventEmitter<void>(process, 'spawn')(() => {\n\t\t\tthis.processPid = process.pid;\n\n\t\t\tif (typeof process.pid === 'number') {\n\t\t\t\tUtilityProcess.all.set(process.pid, { pid: process.pid, name: isWindowUtilityProcessConfiguration(configuration) ? `${configuration.type} [${configuration.responseWindowId}]` : configuration.type });\n\t\t\t}\n\n\t\t\tthis.log('successfully created', Severity.Info);\n\t\t\tthis._onSpawn.fire(process.pid);\n\t\t}));\n\n\t\t// Exit\n\t\tthis._register(Event.fromNodeEventEmitter<number>(process, 'exit')(code => {\n\t\t\tconst normalizedCode = this.isNormalExit(code) ? 0 : code;\n\t\t\tthis.log(`received exit event with code ${normalizedCode}`, Severity.Info);\n\n\t\t\t// Event\n\t\t\tthis._onExit.fire({ pid: this.processPid!, code: normalizedCode, signal: 'unknown' });\n\n\t\t\t// Cleanup\n\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t}));\n\n\t\t// Child process gone\n\t\tthis._register(Event.fromNodeEventEmitter<{ details: Details }>(app, 'child-process-gone', (event, details) => ({ event, details }))(({ details }) => {\n\t\t\tif (details.type === 'Utility' && details.name === serviceName && !this.isNormalExit(details.exitCode)) {\n\t\t\t\tthis.log(`crashed with code ${details.exitCode} and reason '${details.reason}'`, Severity.Error);\n\n\t\t\t\t// Telemetry\n\t\t\t\ttype UtilityProcessCrashClassification = {\n\t\t\t\t\ttype: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The type of utility process to understand the origin of the crash better.' };\n\t\t\t\t\treason: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The reason of the utility process crash to understand the nature of the crash better.' };\n\t\t\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The exit code of the utility process to understand the nature of the crash better' };\n\t\t\t\t\towner: 'bpasero';\n\t\t\t\t\tcomment: 'Provides insight into reasons the utility process crashed.';\n\t\t\t\t};\n\t\t\t\ttype UtilityProcessCrashEvent = {\n\t\t\t\t\ttype: string;\n\t\t\t\t\treason: string;\n\t\t\t\t\tcode: number;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<UtilityProcessCrashEvent, UtilityProcessCrashClassification>('utilityprocesscrash', {\n\t\t\t\t\ttype: configuration.type,\n\t\t\t\t\treason: details.reason,\n\t\t\t\t\tcode: details.exitCode\n\t\t\t\t});\n\n\t\t\t\t// Event\n\t\t\t\tthis._onCrash.fire({ pid: this.processPid!, code: details.exitCode, reason: details.reason });\n\n\t\t\t\t// Cleanup\n\t\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t\t}\n\t\t}));\n\t}\n\n\tonce(message: unknown, callback: () => void): void {\n\t\tconst disposable = this._register(this._onMessage.event(msg => {\n\t\t\tif (msg === message) {\n\t\t\t\tdisposable.dispose();\n\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpostMessage(message: unknown, transfer?: Electron.MessagePortMain[]): boolean {\n\t\tif (!this.process) {\n\t\t\treturn false; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.process.postMessage(message, transfer);\n\n\t\treturn true;\n\t}\n\n\tconnect(payload?: unknown): Electron.MessagePortMain {\n\t\tconst { port1: outPort, port2: utilityProcessPort } = new MessageChannelMain();\n\t\tthis.postMessage(payload, [utilityProcessPort]);\n\n\t\treturn outPort;\n\t}\n\n\tenableInspectPort(): boolean {\n\t\tif (!this.process || typeof this.processPid !== 'number') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.log('enabling inspect port', Severity.Info);\n\n\t\tinterface ProcessExt {\n\t\t\t_debugProcess?(pid: number): unknown;\n\t\t}\n\n\t\t// use (undocumented) _debugProcess feature of node if available\n\t\tconst processExt = <ProcessExt>process;\n\t\tif (typeof processExt._debugProcess === 'function') {\n\t\t\tprocessExt._debugProcess(this.processPid);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// not supported...\n\t\treturn false;\n\t}\n\n\tkill(): void {\n\t\tif (!this.process) {\n\t\t\treturn; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.log('attempting to kill the process...', Severity.Info);\n\t\tconst killed = this.process.kill();\n\t\tif (killed) {\n\t\t\tthis.log('successfully killed the process', Severity.Info);\n\t\t\tthis.killed = true;\n\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t} else {\n\t\t\tthis.log('unable to kill the process', Severity.Warning);\n\t\t}\n\t}\n\n\tprivate isNormalExit(exitCode: number): boolean {\n\t\tif (exitCode === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Treat an exit code of 15 (SIGTERM) as a normal exit\n\t\t// if we triggered the termination from process.kill()\n\n\t\treturn this.killed && exitCode === 15 /* SIGTERM */;\n\t}\n\n\tprivate onDidExitOrCrashOrKill(): void {\n\t\tif (typeof this.processPid === 'number') {\n\t\t\tUtilityProcess.all.delete(this.processPid);\n\t\t}\n\n\t\tthis.process = undefined;\n\t}\n\n\tasync waitForExit(maxWaitTimeMs: number): Promise<void> {\n\t\tif (!this.process) {\n\t\t\treturn; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.log('waiting to exit...', Severity.Info);\n\t\tawait Promise.race([Event.toPromise(this.onExit), timeout(maxWaitTimeMs)]);\n\n\t\tif (this.process) {\n\t\t\tthis.log(`did not exit within ${maxWaitTimeMs}ms, will kill it now...`, Severity.Info);\n\t\t\tthis.kill();\n\t\t}\n\t}\n}\n\nexport class WindowUtilityProcess extends UtilityProcess {\n\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper(logService, telemetryService, lifecycleMainService);\n\t}\n\n\toverride start(configuration: IWindowUtilityProcessConfiguration): boolean {\n\t\tconst responseWindow = this.windowsMainService.getWindowById(configuration.responseWindowId);\n\t\tif (!responseWindow?.win || responseWindow.win.isDestroyed() || responseWindow.win.webContents.isDestroyed()) {\n\t\t\tthis.log('Refusing to start utility process because requesting window cannot be found or is destroyed...', Severity.Error);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Start utility process\n\t\tconst started = super.doStart(configuration);\n\t\tif (!started) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Register to window events\n\t\tthis.registerWindowListeners(responseWindow.win, configuration);\n\n\t\t// Establish & exchange message ports\n\t\tconst windowPort = this.connect(configuration.payload);\n\t\tresponseWindow.win.webContents.postMessage(configuration.responseChannel, configuration.responseNonce, [windowPort]);\n\n\t\treturn true;\n\t}\n\n\tprivate registerWindowListeners(window: BrowserWindow, configuration: IWindowUtilityProcessConfiguration): void {\n\n\t\t// If the lifecycle of the utility process is bound to the window,\n\t\t// we kill the process if the window closes or changes\n\n\t\tif (configuration.windowLifecycleBound) {\n\t\t\tthis._register(Event.filter(this.lifecycleMainService.onWillLoadWindow, e => e.window.win === window)(() => this.kill()));\n\t\t\tthis._register(Event.fromNodeEventEmitter(window, 'closed')(() => this.kill()));\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["process"]
}
