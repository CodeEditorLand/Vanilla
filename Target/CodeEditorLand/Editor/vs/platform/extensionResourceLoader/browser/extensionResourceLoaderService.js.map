{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FileAccess, Schemas } from \"../../../base/common/network.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport { IFileService } from \"../../files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../instantiation/common/extensions.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport { IStorageService } from \"../../storage/common/storage.js\";\nimport {\n\tAbstractExtensionResourceLoaderService,\n\tIExtensionResourceLoaderService,\n} from \"../common/extensionResourceLoader.js\";\n\nclass ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper(fileService, storageService, productService, environmentService, configurationService);\n\t}\n\n\tasync readExtensionResource(uri: URI): Promise<string> {\n\t\turi = FileAccess.uriToBrowserUri(uri);\n\n\t\tif (\n\t\t\turi.scheme !== Schemas.http &&\n\t\t\turi.scheme !== Schemas.https &&\n\t\t\turi.scheme !== Schemas.data\n\t\t) {\n\t\t\tconst result = await this._fileService.readFile(uri);\n\t\t\treturn result.value.toString();\n\t\t}\n\n\t\tconst requestInit: RequestInit = {};\n\t\tif (this.isExtensionGalleryResource(uri)) {\n\t\t\trequestInit.headers =\n\t\t\t\tawait this.getExtensionGalleryRequestHeaders();\n\t\t\trequestInit.mode =\n\t\t\t\t\"cors\"; /* set mode to cors so that above headers are always passed */\n\t\t}\n\n\t\tconst response = await fetch(uri.toString(true), requestInit);\n\t\tif (response.status !== 200) {\n\t\t\tthis._logService.info(\n\t\t\t\t`Request to '${uri.toString(true)}' failed with status code ${response.status}`,\n\t\t\t);\n\t\t\tthrow new Error(response.statusText);\n\t\t}\n\t\treturn response.text();\n\t}\n}\n\nregisterSingleton(\n\tIExtensionResourceLoaderService,\n\tExtensionResourceLoaderService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,YAAY,eAAe;AAEpC,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,IAAM,iCAAN,cAA6C,uCAAuC;AAAA,EAGnF,YACe,aACG,gBACA,gBACI,oBACE,sBACO,aAC7B;AACD,UAAM,aAAa,gBAAgB,gBAAgB,oBAAoB,oBAAoB;AAF7D;AAAA,EAG/B;AAAA,EAlCD,OAsBoF;AAAA;AAAA;AAAA,EAcnF,MAAM,sBAAsB,KAA2B;AACtD,UAAM,WAAW,gBAAgB,GAAG;AAEpC,QACC,IAAI,WAAW,QAAQ,QACvB,IAAI,WAAW,QAAQ,SACvB,IAAI,WAAW,QAAQ,MACtB;AACD,YAAM,SAAS,MAAM,KAAK,aAAa,SAAS,GAAG;AACnD,aAAO,OAAO,MAAM,SAAS;AAAA,IAC9B;AAEA,UAAM,cAA2B,CAAC;AAClC,QAAI,KAAK,2BAA2B,GAAG,GAAG;AACzC,kBAAY,UACX,MAAM,KAAK,kCAAkC;AAC9C,kBAAY,OACX;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,MAAM,IAAI,SAAS,IAAI,GAAG,WAAW;AAC5D,QAAI,SAAS,WAAW,KAAK;AAC5B,WAAK,YAAY;AAAA,QAChB,eAAe,IAAI,SAAS,IAAI,CAAC,6BAA6B,SAAS,MAAM;AAAA,MAC9E;AACA,YAAM,IAAI,MAAM,SAAS,UAAU;AAAA,IACpC;AACA,WAAO,SAAS,KAAK;AAAA,EACtB;AACD;AA3CM,iCAAN;AAAA,EAIG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GATG;AA6CN;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
