{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../base/common/uri.js';\nimport { InstantiationType, registerSingleton } from '../../instantiation/common/extensions.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { FileAccess, Schemas } from '../../../base/common/network.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { AbstractExtensionResourceLoaderService, IExtensionResourceLoaderService } from '../common/extensionResourceLoader.js';\n\nclass ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper(fileService, storageService, productService, environmentService, configurationService);\n\t}\n\n\tasync readExtensionResource(uri: URI): Promise<string> {\n\t\turi = FileAccess.uriToBrowserUri(uri);\n\n\t\tif (uri.scheme !== Schemas.http && uri.scheme !== Schemas.https && uri.scheme !== Schemas.data) {\n\t\t\tconst result = await this._fileService.readFile(uri);\n\t\t\treturn result.value.toString();\n\t\t}\n\n\t\tconst requestInit: RequestInit = {};\n\t\tif (this.isExtensionGalleryResource(uri)) {\n\t\t\trequestInit.headers = await this.getExtensionGalleryRequestHeaders();\n\t\t\trequestInit.mode = 'cors'; /* set mode to cors so that above headers are always passed */\n\t\t}\n\n\t\tconst response = await fetch(uri.toString(true), requestInit);\n\t\tif (response.status !== 200) {\n\t\t\tthis._logService.info(`Request to '${uri.toString(true)}' failed with status code ${response.status}`);\n\t\t\tthrow new Error(response.statusText);\n\t\t}\n\t\treturn response.text();\n\t}\n}\n\nregisterSingleton(IExtensionResourceLoaderService, ExtensionResourceLoaderService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,WAAW;AACpB,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,oBAAoB;AAC7B,SAAS,YAAY,eAAe;AACpC,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC,SAAS,mBAAmB;AAC5B,SAAS,6BAA6B;AACtC,SAAS,wCAAwC,uCAAuC;AAExF,IAAM,iCAAN,cAA6C,uCAAuC;AAAA,EAInF,YACe,aACG,gBACA,gBACI,oBACE,sBACO,aAC7B;AACD,UAAM,aAAa,gBAAgB,gBAAgB,oBAAoB,oBAAoB;AAF7D;AAAA,EAG/B;AAAA,EA7BD,OAgBoF;AAAA;AAAA;AAAA,EAenF,MAAM,sBAAsB,KAA2B;AACtD,UAAM,WAAW,gBAAgB,GAAG;AAEpC,QAAI,IAAI,WAAW,QAAQ,QAAQ,IAAI,WAAW,QAAQ,SAAS,IAAI,WAAW,QAAQ,MAAM;AAC/F,YAAM,SAAS,MAAM,KAAK,aAAa,SAAS,GAAG;AACnD,aAAO,OAAO,MAAM,SAAS;AAAA,IAC9B;AAEA,UAAM,cAA2B,CAAC;AAClC,QAAI,KAAK,2BAA2B,GAAG,GAAG;AACzC,kBAAY,UAAU,MAAM,KAAK,kCAAkC;AACnE,kBAAY,OAAO;AAAA,IACpB;AAEA,UAAM,WAAW,MAAM,MAAM,IAAI,SAAS,IAAI,GAAG,WAAW;AAC5D,QAAI,SAAS,WAAW,KAAK;AAC5B,WAAK,YAAY,KAAK,eAAe,IAAI,SAAS,IAAI,CAAC,6BAA6B,SAAS,MAAM,EAAE;AACrG,YAAM,IAAI,MAAM,SAAS,UAAU;AAAA,IACpC;AACA,WAAO,SAAS,KAAK;AAAA,EACtB;AACD;AApCM,iCAAN;AAAA,EAKG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAVG;AAsCN,kBAAkB,iCAAiC,gCAAgC,kBAAkB,OAAO;",
  "names": []
}
