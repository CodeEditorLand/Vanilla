{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspace/test/common/workspace.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { join } from '../../../../base/common/path.js';\nimport { isLinux, isWindows } from '../../../../base/common/platform.js';\nimport { extUriBiasedIgnorePathCase } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IRawFileWorkspaceFolder, Workspace, WorkspaceFolder } from '../../common/workspace.js';\nimport { toWorkspaceFolders } from '../../../workspaces/common/workspaces.js';\n\nsuite('Workspace', () => {\n\n\tconst fileFolder = isWindows ? 'c:\\\\src' : '/src';\n\tconst abcFolder = isWindows ? 'c:\\\\abc' : '/abc';\n\n\tconst testFolderUri = URI.file(join(fileFolder, 'test'));\n\tconst mainFolderUri = URI.file(join(fileFolder, 'main'));\n\tconst test1FolderUri = URI.file(join(fileFolder, 'test1'));\n\tconst test2FolderUri = URI.file(join(fileFolder, 'test2'));\n\tconst test3FolderUri = URI.file(join(fileFolder, 'test3'));\n\tconst abcTest1FolderUri = URI.file(join(abcFolder, 'test1'));\n\tconst abcTest3FolderUri = URI.file(join(abcFolder, 'test3'));\n\n\tconst workspaceConfigUri = URI.file(join(fileFolder, 'test.code-workspace'));\n\n\ttest('getFolder returns the folder with given uri', () => {\n\t\tconst expected = new WorkspaceFolder({ uri: testFolderUri, name: '', index: 2 });\n\t\tconst testObject = new Workspace('', [new WorkspaceFolder({ uri: mainFolderUri, name: '', index: 0 }), expected, new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 2 })], false, null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(expected.uri);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('getFolder returns the folder if the uri is sub', () => {\n\t\tconst expected = new WorkspaceFolder({ uri: testFolderUri, name: '', index: 0 });\n\t\tconst testObject = new Workspace('', [expected, new WorkspaceFolder({ uri: mainFolderUri, name: '', index: 1 }), new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 2 })], false, null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(URI.file(join(fileFolder, 'test/a')));\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('getFolder returns the closest folder if the uri is sub', () => {\n\t\tconst expected = new WorkspaceFolder({ uri: testFolderUri, name: '', index: 2 });\n\t\tconst testObject = new Workspace('', [new WorkspaceFolder({ uri: mainFolderUri, name: '', index: 0 }), new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 1 }), expected], false, null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(URI.file(join(fileFolder, 'test/a')));\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('getFolder returns the folder even if the uri has query path', () => {\n\t\tconst expected = new WorkspaceFolder({ uri: testFolderUri, name: '', index: 2 });\n\t\tconst testObject = new Workspace('', [new WorkspaceFolder({ uri: mainFolderUri, name: '', index: 0 }), new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 1 }), expected], false, null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(URI.file(join(fileFolder, 'test/a')).with({ query: 'somequery' }));\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('getFolder returns null if the uri is not sub', () => {\n\t\tconst testObject = new Workspace('', [new WorkspaceFolder({ uri: testFolderUri, name: '', index: 0 }), new WorkspaceFolder({ uri: URI.file('/src/code'), name: '', index: 1 })], false, null, () => !isLinux);\n\n\t\tconst actual = testObject.getFolder(URI.file(join(fileFolder, 'main/a')));\n\n\t\tassert.strictEqual(actual, null);\n\t});\n\n\ttest('toWorkspaceFolders with single absolute folder', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].uri.fsPath, testFolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test');\n\t});\n\n\ttest('toWorkspaceFolders with single relative folder', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: './test' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].uri.fsPath, testFolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, './test');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test');\n\t});\n\n\ttest('toWorkspaceFolders with single absolute folder with name', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test', name: 'hello' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 1);\n\n\t\tassert.strictEqual(actual[0].uri.fsPath, testFolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'hello');\n\t});\n\n\ttest('toWorkspaceFolders with multiple unique absolute folders', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/src/test3' }, { path: '/src/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/src/test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'test3');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, test1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, '/src/test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple unique absolute folders with names', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/src/test3', name: 'noName' }, { path: '/src/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/src/test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'noName');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, test1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, '/src/test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple unique absolute and relative folders', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/abc/test3', name: 'noName' }, { path: './test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, abcTest3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/abc/test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'noName');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, test1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, './test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple absolute folders with duplicates', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/src/test2', name: 'noName' }, { path: '/src/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 2);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/src/test1');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple absolute and relative folders with duplicates', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '/src/test3', name: 'noName' }, { path: './test3' }, { path: '/abc/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, '/src/test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'noName');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, abcTest1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, '/abc/test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n\n\ttest('toWorkspaceFolders with multiple absolute and relative folders with invalid paths', () => {\n\t\tconst actual = toWorkspaceFolders([{ path: '/src/test2' }, { path: '', name: 'noName' }, { path: './test3' }, { path: '/abc/test1' }], workspaceConfigUri, extUriBiasedIgnorePathCase);\n\n\t\tassert.strictEqual(actual.length, 3);\n\t\tassert.strictEqual(actual[0].uri.fsPath, test2FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[0].raw).path, '/src/test2');\n\t\tassert.strictEqual(actual[0].index, 0);\n\t\tassert.strictEqual(actual[0].name, 'test2');\n\n\t\tassert.strictEqual(actual[1].uri.fsPath, test3FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[1].raw).path, './test3');\n\t\tassert.strictEqual(actual[1].index, 1);\n\t\tassert.strictEqual(actual[1].name, 'test3');\n\n\t\tassert.strictEqual(actual[2].uri.fsPath, abcTest1FolderUri.fsPath);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>actual[2].raw).path, '/abc/test1');\n\t\tassert.strictEqual(actual[2].index, 2);\n\t\tassert.strictEqual(actual[2].name, 'test1');\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
