{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspace/common/workspaceTrust.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport enum WorkspaceTrustScope {\n\tLocal = 0,\n\tRemote = 1,\n}\n\nexport interface WorkspaceTrustRequestButton {\n\treadonly label: string;\n\treadonly type:\n\t\t| \"ContinueWithTrust\"\n\t\t| \"ContinueWithoutTrust\"\n\t\t| \"Manage\"\n\t\t| \"Cancel\";\n}\n\nexport interface WorkspaceTrustRequestOptions {\n\treadonly buttons?: WorkspaceTrustRequestButton[];\n\treadonly message?: string;\n}\n\nexport const IWorkspaceTrustEnablementService =\n\tcreateDecorator<IWorkspaceTrustEnablementService>(\n\t\t\"workspaceTrustEnablementService\",\n\t);\n\nexport interface IWorkspaceTrustEnablementService {\n\treadonly _serviceBrand: undefined;\n\n\tisWorkspaceTrustEnabled(): boolean;\n}\n\nexport const IWorkspaceTrustManagementService =\n\tcreateDecorator<IWorkspaceTrustManagementService>(\n\t\t\"workspaceTrustManagementService\",\n\t);\n\nexport interface IWorkspaceTrustManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeTrust: Event<boolean>;\n\tonDidChangeTrustedFolders: Event<void>;\n\n\treadonly workspaceResolved: Promise<void>;\n\treadonly workspaceTrustInitialized: Promise<void>;\n\tacceptsOutOfWorkspaceFiles: boolean;\n\n\tisWorkspaceTrusted(): boolean;\n\tisWorkspaceTrustForced(): boolean;\n\n\tcanSetParentFolderTrust(): boolean;\n\tsetParentFolderTrust(trusted: boolean): Promise<void>;\n\n\tcanSetWorkspaceTrust(): boolean;\n\tsetWorkspaceTrust(trusted: boolean): Promise<void>;\n\n\tgetUriTrustInfo(uri: URI): Promise<IWorkspaceTrustUriInfo>;\n\tsetUrisTrust(uri: URI[], trusted: boolean): Promise<void>;\n\n\tgetTrustedUris(): URI[];\n\tsetTrustedUris(uris: URI[]): Promise<void>;\n\n\taddWorkspaceTrustTransitionParticipant(\n\t\tparticipant: IWorkspaceTrustTransitionParticipant,\n\t): IDisposable;\n}\n\nexport enum WorkspaceTrustUriResponse {\n\tOpen = 1,\n\tOpenInNewWindow = 2,\n\tCancel = 3,\n}\n\nexport const IWorkspaceTrustRequestService =\n\tcreateDecorator<IWorkspaceTrustRequestService>(\n\t\t\"workspaceTrustRequestService\",\n\t);\n\nexport interface IWorkspaceTrustRequestService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidInitiateOpenFilesTrustRequest: Event<void>;\n\treadonly onDidInitiateWorkspaceTrustRequest: Event<\n\t\tWorkspaceTrustRequestOptions | undefined\n\t>;\n\treadonly onDidInitiateWorkspaceTrustRequestOnStartup: Event<void>;\n\n\tcompleteOpenFilesTrustRequest(\n\t\tresult: WorkspaceTrustUriResponse,\n\t\tsaveResponse?: boolean,\n\t): Promise<void>;\n\trequestOpenFilesTrust(openFiles: URI[]): Promise<WorkspaceTrustUriResponse>;\n\n\tcancelWorkspaceTrustRequest(): void;\n\tcompleteWorkspaceTrustRequest(trusted?: boolean): Promise<void>;\n\trequestWorkspaceTrust(\n\t\toptions?: WorkspaceTrustRequestOptions,\n\t): Promise<boolean | undefined>;\n\trequestWorkspaceTrustOnStartup(): void;\n}\n\nexport interface IWorkspaceTrustTransitionParticipant {\n\tparticipate(trusted: boolean): Promise<void>;\n}\n\nexport interface IWorkspaceTrustUriInfo {\n\turi: URI;\n\ttrusted: boolean;\n}\n\nexport interface IWorkspaceTrustInfo {\n\turiTrustInfo: IWorkspaceTrustUriInfo[];\n}\n"],
  "mappings": "AAQA,SAAS,uBAAuB;AAEzB,IAAK,sBAAL,kBAAKA,yBAAL;AACN,EAAAA,0CAAA,WAAQ,KAAR;AACA,EAAAA,0CAAA,YAAS,KAAT;AAFW,SAAAA;AAAA,GAAA;AAmBL,MAAM,mCACZ;AAAA,EACC;AACD;AAQM,MAAM,mCACZ;AAAA,EACC;AACD;AAgCM,IAAK,4BAAL,kBAAKC,+BAAL;AACN,EAAAA,sDAAA,UAAO,KAAP;AACA,EAAAA,sDAAA,qBAAkB,KAAlB;AACA,EAAAA,sDAAA,YAAS,KAAT;AAHW,SAAAA;AAAA,GAAA;AAML,MAAM,gCACZ;AAAA,EACC;AACD;",
  "names": ["WorkspaceTrustScope", "WorkspaceTrustUriResponse"]
}
