{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspace/common/workspace.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../nls.js';\nimport { Event } from '../../../base/common/event.js';\nimport { basename, extname } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { extname as resourceExtname, basenameOrAuthority, joinPath, extUriBiasedIgnorePathCase } from '../../../base/common/resources.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { Schemas } from '../../../base/common/network.js';\n\nexport const IWorkspaceContextService = createDecorator<IWorkspaceContextService>('contextService');\n\nexport interface IWorkspaceContextService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event which fires on workbench state changes.\n\t */\n\treadonly onDidChangeWorkbenchState: Event<WorkbenchState>;\n\n\t/**\n\t * An event which fires on workspace name changes.\n\t */\n\treadonly onDidChangeWorkspaceName: Event<void>;\n\n\t/**\n\t * An event which fires before workspace folders change.\n\t */\n\treadonly onWillChangeWorkspaceFolders: Event<IWorkspaceFoldersWillChangeEvent>;\n\n\t/**\n\t * An event which fires on workspace folders change.\n\t */\n\treadonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;\n\n\t/**\n\t * Provides access to the complete workspace object.\n\t */\n\tgetCompleteWorkspace(): Promise<IWorkspace>;\n\n\t/**\n\t * Provides access to the workspace object the window is running with.\n\t * Use `getCompleteWorkspace` to get complete workspace object.\n\t */\n\tgetWorkspace(): IWorkspace;\n\n\t/**\n\t * Return the state of the workbench.\n\t *\n\t * WorkbenchState.EMPTY - if the workbench was opened with empty window or file\n\t * WorkbenchState.FOLDER - if the workbench was opened with a folder\n\t * WorkbenchState.WORKSPACE - if the workbench was opened with a workspace\n\t */\n\tgetWorkbenchState(): WorkbenchState;\n\n\t/**\n\t * Returns the folder for the given resource from the workspace.\n\t * Can be null if there is no workspace or the resource is not inside the workspace.\n\t */\n\tgetWorkspaceFolder(resource: URI): IWorkspaceFolder | null;\n\n\t/**\n\t * Return `true` if the current workspace has the given identifier or root URI otherwise `false`.\n\t */\n\tisCurrentWorkspace(workspaceIdOrFolder: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | URI): boolean;\n\n\t/**\n\t * Returns if the provided resource is inside the workspace or not.\n\t */\n\tisInsideWorkspace(resource: URI): boolean;\n}\n\nexport interface IResolvedWorkspace extends IWorkspaceIdentifier, IBaseWorkspace {\n\treadonly folders: IWorkspaceFolder[];\n}\n\nexport interface IBaseWorkspace {\n\n\t/**\n\t * If present, marks the window that opens the workspace\n\t * as a remote window with the given authority.\n\t */\n\treadonly remoteAuthority?: string;\n\n\t/**\n\t * Transient workspaces are meant to go away after being used\n\t * once, e.g. a window reload of a transient workspace will\n\t * open an empty window.\n\t *\n\t * See: https://github.com/microsoft/vscode/issues/119695\n\t */\n\treadonly transient?: boolean;\n}\n\nexport interface IBaseWorkspaceIdentifier {\n\n\t/**\n\t * Every workspace (multi-root, single folder or empty)\n\t * has a unique identifier. It is not possible to open\n\t * a workspace with the same `id` in multiple windows\n\t */\n\treadonly id: string;\n}\n\n/**\n * A single folder workspace identifier is a path to a folder + id.\n */\nexport interface ISingleFolderWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\n\t/**\n\t * Folder path as `URI`.\n\t */\n\treadonly uri: URI;\n}\n\n/**\n * A multi-root workspace identifier is a path to a workspace file + id.\n */\nexport interface IWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\n\t/**\n\t * Workspace config file path as `URI`.\n\t */\n\tconfigPath: URI;\n}\n\nexport interface IEmptyWorkspaceIdentifier extends IBaseWorkspaceIdentifier { }\n\nexport type IAnyWorkspaceIdentifier = IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier;\n\nexport function isSingleFolderWorkspaceIdentifier(obj: unknown): obj is ISingleFolderWorkspaceIdentifier {\n\tconst singleFolderIdentifier = obj as ISingleFolderWorkspaceIdentifier | undefined;\n\n\treturn typeof singleFolderIdentifier?.id === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\n\nexport function isEmptyWorkspaceIdentifier(obj: unknown): obj is IEmptyWorkspaceIdentifier {\n\tconst emptyWorkspaceIdentifier = obj as IEmptyWorkspaceIdentifier | undefined;\n\treturn typeof emptyWorkspaceIdentifier?.id === 'string'\n\t\t&& !isSingleFolderWorkspaceIdentifier(obj)\n\t\t&& !isWorkspaceIdentifier(obj);\n}\n\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE: IEmptyWorkspaceIdentifier = { id: 'ext-dev' };\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE: IEmptyWorkspaceIdentifier = { id: 'empty-window' };\n\nexport function toWorkspaceIdentifier(workspace: IWorkspace): IAnyWorkspaceIdentifier;\nexport function toWorkspaceIdentifier(backupPath: string | undefined, isExtensionDevelopment: boolean): IEmptyWorkspaceIdentifier;\nexport function toWorkspaceIdentifier(arg0: IWorkspace | string | undefined, isExtensionDevelopment?: boolean): IAnyWorkspaceIdentifier {\n\n\t// Empty workspace\n\tif (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n\n\t\t// With a backupPath, the basename is the empty workspace identifier\n\t\tif (typeof arg0 === 'string') {\n\t\t\treturn {\n\t\t\t\tid: basename(arg0)\n\t\t\t};\n\t\t}\n\n\t\t// Extension development empty windows have backups disabled\n\t\t// so we return a constant workspace identifier for extension\n\t\t// authors to allow to restore their workspace state even then.\n\t\tif (isExtensionDevelopment) {\n\t\t\treturn EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n\t\t}\n\n\t\treturn UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n\t}\n\n\t// Multi root\n\tconst workspace = arg0;\n\tif (workspace.configuration) {\n\t\treturn {\n\t\t\tid: workspace.id,\n\t\t\tconfigPath: workspace.configuration\n\t\t};\n\t}\n\n\t// Single folder\n\tif (workspace.folders.length === 1) {\n\t\treturn {\n\t\t\tid: workspace.id,\n\t\t\turi: workspace.folders[0].uri\n\t\t};\n\t}\n\n\t// Empty window\n\treturn {\n\t\tid: workspace.id\n\t};\n}\n\nexport function isWorkspaceIdentifier(obj: unknown): obj is IWorkspaceIdentifier {\n\tconst workspaceIdentifier = obj as IWorkspaceIdentifier | undefined;\n\n\treturn typeof workspaceIdentifier?.id === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\n\nexport interface ISerializedSingleFolderWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\treadonly uri: UriComponents;\n}\n\nexport interface ISerializedWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\treadonly configPath: UriComponents;\n}\n\nexport function reviveIdentifier(identifier: undefined): undefined;\nexport function reviveIdentifier(identifier: ISerializedWorkspaceIdentifier): IWorkspaceIdentifier;\nexport function reviveIdentifier(identifier: ISerializedSingleFolderWorkspaceIdentifier): ISingleFolderWorkspaceIdentifier;\nexport function reviveIdentifier(identifier: IEmptyWorkspaceIdentifier): IEmptyWorkspaceIdentifier;\nexport function reviveIdentifier(identifier: ISerializedWorkspaceIdentifier | ISerializedSingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined): IAnyWorkspaceIdentifier | undefined;\nexport function reviveIdentifier(identifier: ISerializedWorkspaceIdentifier | ISerializedSingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined): IAnyWorkspaceIdentifier | undefined {\n\n\t// Single Folder\n\tconst singleFolderIdentifierCandidate = identifier as ISerializedSingleFolderWorkspaceIdentifier | undefined;\n\tif (singleFolderIdentifierCandidate?.uri) {\n\t\treturn { id: singleFolderIdentifierCandidate.id, uri: URI.revive(singleFolderIdentifierCandidate.uri) };\n\t}\n\n\t// Multi folder\n\tconst workspaceIdentifierCandidate = identifier as ISerializedWorkspaceIdentifier | undefined;\n\tif (workspaceIdentifierCandidate?.configPath) {\n\t\treturn { id: workspaceIdentifierCandidate.id, configPath: URI.revive(workspaceIdentifierCandidate.configPath) };\n\t}\n\n\t// Empty\n\tif (identifier?.id) {\n\t\treturn { id: identifier.id };\n\t}\n\n\treturn undefined;\n}\n\nexport const enum WorkbenchState {\n\tEMPTY = 1,\n\tFOLDER,\n\tWORKSPACE\n}\n\nexport interface IWorkspaceFoldersWillChangeEvent {\n\n\treadonly changes: IWorkspaceFoldersChangeEvent;\n\treadonly fromCache: boolean;\n\n\tjoin(promise: Promise<void>): void;\n}\n\nexport interface IWorkspaceFoldersChangeEvent {\n\tadded: IWorkspaceFolder[];\n\tremoved: IWorkspaceFolder[];\n\tchanged: IWorkspaceFolder[];\n}\n\nexport interface IWorkspace {\n\n\t/**\n\t * the unique identifier of the workspace.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * Folders in the workspace.\n\t */\n\treadonly folders: IWorkspaceFolder[];\n\n\t/**\n\t * Transient workspaces are meant to go away after being used\n\t * once, e.g. a window reload of a transient workspace will\n\t * open an empty window.\n\t */\n\treadonly transient?: boolean;\n\n\t/**\n\t * the location of the workspace configuration\n\t */\n\treadonly configuration?: URI | null;\n}\n\nexport function isWorkspace(thing: unknown): thing is IWorkspace {\n\tconst candidate = thing as IWorkspace | undefined;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& typeof candidate.id === 'string'\n\t\t&& Array.isArray(candidate.folders));\n}\n\nexport interface IWorkspaceFolderData {\n\n\t/**\n\t * The associated URI for this workspace folder.\n\t */\n\treadonly uri: URI;\n\n\t/**\n\t * The name of this workspace folder. Defaults to\n\t * the basename of its [uri-path](#Uri.path)\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The ordinal number of this workspace folder.\n\t */\n\treadonly index: number;\n}\n\nexport interface IWorkspaceFolder extends IWorkspaceFolderData {\n\n\t/**\n\t * Given workspace folder relative path, returns the resource with the absolute path.\n\t */\n\ttoResource: (relativePath: string) => URI;\n}\n\nexport function isWorkspaceFolder(thing: unknown): thing is IWorkspaceFolder {\n\tconst candidate = thing as IWorkspaceFolder;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& URI.isUri(candidate.uri)\n\t\t&& typeof candidate.name === 'string'\n\t\t&& typeof candidate.toResource === 'function');\n}\n\nexport class Workspace implements IWorkspace {\n\n\tprivate _foldersMap: TernarySearchTree<URI, WorkspaceFolder> = TernarySearchTree.forUris<WorkspaceFolder>(this._ignorePathCasing, () => true);\n\tprivate _folders!: WorkspaceFolder[];\n\n\tconstructor(\n\t\tprivate _id: string,\n\t\tfolders: WorkspaceFolder[],\n\t\tprivate _transient: boolean,\n\t\tprivate _configuration: URI | null,\n\t\tprivate _ignorePathCasing: (key: URI) => boolean,\n\t) {\n\t\tthis.folders = folders;\n\t}\n\n\tupdate(workspace: Workspace) {\n\t\tthis._id = workspace.id;\n\t\tthis._configuration = workspace.configuration;\n\t\tthis._transient = workspace.transient;\n\t\tthis._ignorePathCasing = workspace._ignorePathCasing;\n\t\tthis.folders = workspace.folders;\n\t}\n\n\tget folders(): WorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tset folders(folders: WorkspaceFolder[]) {\n\t\tthis._folders = folders;\n\t\tthis.updateFoldersMap();\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tget transient(): boolean {\n\t\treturn this._transient;\n\t}\n\n\tget configuration(): URI | null {\n\t\treturn this._configuration;\n\t}\n\n\tset configuration(configuration: URI | null) {\n\t\tthis._configuration = configuration;\n\t}\n\n\tgetFolder(resource: URI): IWorkspaceFolder | null {\n\t\tif (!resource) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._foldersMap.findSubstr(resource) || null;\n\t}\n\n\tprivate updateFoldersMap(): void {\n\t\tthis._foldersMap = TernarySearchTree.forUris<WorkspaceFolder>(this._ignorePathCasing, () => true);\n\t\tfor (const folder of this.folders) {\n\t\t\tthis._foldersMap.set(folder.uri, folder);\n\t\t}\n\t}\n\n\ttoJSON(): IWorkspace {\n\t\treturn { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };\n\t}\n}\n\nexport interface IRawFileWorkspaceFolder {\n\treadonly path: string;\n\tname?: string;\n}\n\nexport interface IRawUriWorkspaceFolder {\n\treadonly uri: string;\n\tname?: string;\n}\n\nexport class WorkspaceFolder implements IWorkspaceFolder {\n\n\treadonly uri: URI;\n\treadonly name: string;\n\treadonly index: number;\n\n\tconstructor(\n\t\tdata: IWorkspaceFolderData,\n\t\t/**\n\t\t * Provides access to the original metadata for this workspace\n\t\t * folder. This can be different from the metadata provided in\n\t\t * this class:\n\t\t * - raw paths can be relative\n\t\t * - raw paths are not normalized\n\t\t */\n\t\treadonly raw?: IRawFileWorkspaceFolder | IRawUriWorkspaceFolder\n\t) {\n\t\tthis.uri = data.uri;\n\t\tthis.index = data.index;\n\t\tthis.name = data.name;\n\t}\n\n\ttoResource(relativePath: string): URI {\n\t\treturn joinPath(this.uri, relativePath);\n\t}\n\n\ttoJSON(): IWorkspaceFolderData {\n\t\treturn { uri: this.uri, name: this.name, index: this.index };\n\t}\n}\n\nexport function toWorkspaceFolder(resource: URI): WorkspaceFolder {\n\treturn new WorkspaceFolder({ uri: resource, index: 0, name: basenameOrAuthority(resource) }, { uri: resource.toString() });\n}\n\nexport const WORKSPACE_EXTENSION = 'code-workspace';\nexport const WORKSPACE_SUFFIX = `.${WORKSPACE_EXTENSION}`;\nexport const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', \"Code Workspace\"), extensions: [WORKSPACE_EXTENSION] }];\nexport const UNTITLED_WORKSPACE_NAME = 'workspace.json';\n\nexport function isUntitledWorkspace(path: URI, environmentService: IEnvironmentService): boolean {\n\treturn extUriBiasedIgnorePathCase.isEqualOrParent(path, environmentService.untitledWorkspacesHome);\n}\n\nexport function isTemporaryWorkspace(workspace: IWorkspace): boolean;\nexport function isTemporaryWorkspace(path: URI): boolean;\nexport function isTemporaryWorkspace(arg1: IWorkspace | URI): boolean {\n\tlet path: URI | null | undefined;\n\tif (URI.isUri(arg1)) {\n\t\tpath = arg1;\n\t} else {\n\t\tpath = arg1.configuration;\n\t}\n\n\treturn path?.scheme === Schemas.tmp;\n}\n\nexport const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace: IWorkspace): boolean {\n\treturn workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}\n\nexport function isSavedWorkspace(path: URI, environmentService: IEnvironmentService): boolean {\n\treturn !isUntitledWorkspace(path, environmentService) && !isTemporaryWorkspace(path);\n}\n\nexport function hasWorkspaceFileExtension(path: string | URI) {\n\tconst ext = (typeof path === 'string') ? extname(path) : resourceExtname(path);\n\n\treturn ext === WORKSPACE_SUFFIX;\n}\n"],
  "mappings": "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",
  "names": ["WorkbenchState"]
}
