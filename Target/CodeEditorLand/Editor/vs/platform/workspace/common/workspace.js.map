{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/workspace/common/workspace.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { basename, extname } from \"../../../base/common/path.js\";\nimport {\n\tbasenameOrAuthority,\n\textUriBiasedIgnorePathCase,\n\tjoinPath,\n\textname as resourceExtname,\n} from \"../../../base/common/resources.js\";\nimport { TernarySearchTree } from \"../../../base/common/ternarySearchTree.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport const IWorkspaceContextService =\n\tcreateDecorator<IWorkspaceContextService>(\"contextService\");\n\nexport interface IWorkspaceContextService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event which fires on workbench state changes.\n\t */\n\treadonly onDidChangeWorkbenchState: Event<WorkbenchState>;\n\n\t/**\n\t * An event which fires on workspace name changes.\n\t */\n\treadonly onDidChangeWorkspaceName: Event<void>;\n\n\t/**\n\t * An event which fires before workspace folders change.\n\t */\n\treadonly onWillChangeWorkspaceFolders: Event<IWorkspaceFoldersWillChangeEvent>;\n\n\t/**\n\t * An event which fires on workspace folders change.\n\t */\n\treadonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;\n\n\t/**\n\t * Provides access to the complete workspace object.\n\t */\n\tgetCompleteWorkspace(): Promise<IWorkspace>;\n\n\t/**\n\t * Provides access to the workspace object the window is running with.\n\t * Use `getCompleteWorkspace` to get complete workspace object.\n\t */\n\tgetWorkspace(): IWorkspace;\n\n\t/**\n\t * Return the state of the workbench.\n\t *\n\t * WorkbenchState.EMPTY - if the workbench was opened with empty window or file\n\t * WorkbenchState.FOLDER - if the workbench was opened with a folder\n\t * WorkbenchState.WORKSPACE - if the workbench was opened with a workspace\n\t */\n\tgetWorkbenchState(): WorkbenchState;\n\n\t/**\n\t * Returns the folder for the given resource from the workspace.\n\t * Can be null if there is no workspace or the resource is not inside the workspace.\n\t */\n\tgetWorkspaceFolder(resource: URI): IWorkspaceFolder | null;\n\n\t/**\n\t * Return `true` if the current workspace has the given identifier or root URI otherwise `false`.\n\t */\n\tisCurrentWorkspace(\n\t\tworkspaceIdOrFolder:\n\t\t\t| IWorkspaceIdentifier\n\t\t\t| ISingleFolderWorkspaceIdentifier\n\t\t\t| URI,\n\t): boolean;\n\n\t/**\n\t * Returns if the provided resource is inside the workspace or not.\n\t */\n\tisInsideWorkspace(resource: URI): boolean;\n}\n\nexport interface IResolvedWorkspace\n\textends IWorkspaceIdentifier,\n\t\tIBaseWorkspace {\n\treadonly folders: IWorkspaceFolder[];\n}\n\nexport interface IBaseWorkspace {\n\t/**\n\t * If present, marks the window that opens the workspace\n\t * as a remote window with the given authority.\n\t */\n\treadonly remoteAuthority?: string;\n\n\t/**\n\t * Transient workspaces are meant to go away after being used\n\t * once, e.g. a window reload of a transient workspace will\n\t * open an empty window.\n\t *\n\t * See: https://github.com/microsoft/vscode/issues/119695\n\t */\n\treadonly transient?: boolean;\n}\n\nexport interface IBaseWorkspaceIdentifier {\n\t/**\n\t * Every workspace (multi-root, single folder or empty)\n\t * has a unique identifier. It is not possible to open\n\t * a workspace with the same `id` in multiple windows\n\t */\n\treadonly id: string;\n}\n\n/**\n * A single folder workspace identifier is a path to a folder + id.\n */\nexport interface ISingleFolderWorkspaceIdentifier\n\textends IBaseWorkspaceIdentifier {\n\t/**\n\t * Folder path as `URI`.\n\t */\n\treadonly uri: URI;\n}\n\n/**\n * A multi-root workspace identifier is a path to a workspace file + id.\n */\nexport interface IWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\t/**\n\t * Workspace config file path as `URI`.\n\t */\n\tconfigPath: URI;\n}\n\nexport interface IEmptyWorkspaceIdentifier extends IBaseWorkspaceIdentifier {}\n\nexport type IAnyWorkspaceIdentifier =\n\t| IWorkspaceIdentifier\n\t| ISingleFolderWorkspaceIdentifier\n\t| IEmptyWorkspaceIdentifier;\n\nexport function isSingleFolderWorkspaceIdentifier(\n\tobj: unknown,\n): obj is ISingleFolderWorkspaceIdentifier {\n\tconst singleFolderIdentifier = obj as\n\t\t| ISingleFolderWorkspaceIdentifier\n\t\t| undefined;\n\n\treturn (\n\t\ttypeof singleFolderIdentifier?.id === \"string\" &&\n\t\tURI.isUri(singleFolderIdentifier.uri)\n\t);\n}\n\nexport function isEmptyWorkspaceIdentifier(\n\tobj: unknown,\n): obj is IEmptyWorkspaceIdentifier {\n\tconst emptyWorkspaceIdentifier = obj as\n\t\t| IEmptyWorkspaceIdentifier\n\t\t| undefined;\n\treturn (\n\t\ttypeof emptyWorkspaceIdentifier?.id === \"string\" &&\n\t\t!isSingleFolderWorkspaceIdentifier(obj) &&\n\t\t!isWorkspaceIdentifier(obj)\n\t);\n}\n\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE: IEmptyWorkspaceIdentifier =\n\t{ id: \"ext-dev\" };\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE: IEmptyWorkspaceIdentifier = {\n\tid: \"empty-window\",\n};\n\nexport function toWorkspaceIdentifier(\n\tworkspace: IWorkspace,\n): IAnyWorkspaceIdentifier;\nexport function toWorkspaceIdentifier(\n\tbackupPath: string | undefined,\n\tisExtensionDevelopment: boolean,\n): IEmptyWorkspaceIdentifier;\nexport function toWorkspaceIdentifier(\n\targ0: IWorkspace | string | undefined,\n\tisExtensionDevelopment?: boolean,\n): IAnyWorkspaceIdentifier {\n\t// Empty workspace\n\tif (typeof arg0 === \"string\" || typeof arg0 === \"undefined\") {\n\t\t// With a backupPath, the basename is the empty workspace identifier\n\t\tif (typeof arg0 === \"string\") {\n\t\t\treturn {\n\t\t\t\tid: basename(arg0),\n\t\t\t};\n\t\t}\n\n\t\t// Extension development empty windows have backups disabled\n\t\t// so we return a constant workspace identifier for extension\n\t\t// authors to allow to restore their workspace state even then.\n\t\tif (isExtensionDevelopment) {\n\t\t\treturn EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n\t\t}\n\n\t\treturn UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n\t}\n\n\t// Multi root\n\tconst workspace = arg0;\n\tif (workspace.configuration) {\n\t\treturn {\n\t\t\tid: workspace.id,\n\t\t\tconfigPath: workspace.configuration,\n\t\t};\n\t}\n\n\t// Single folder\n\tif (workspace.folders.length === 1) {\n\t\treturn {\n\t\t\tid: workspace.id,\n\t\t\turi: workspace.folders[0].uri,\n\t\t};\n\t}\n\n\t// Empty window\n\treturn {\n\t\tid: workspace.id,\n\t};\n}\n\nexport function isWorkspaceIdentifier(\n\tobj: unknown,\n): obj is IWorkspaceIdentifier {\n\tconst workspaceIdentifier = obj as IWorkspaceIdentifier | undefined;\n\n\treturn (\n\t\ttypeof workspaceIdentifier?.id === \"string\" &&\n\t\tURI.isUri(workspaceIdentifier.configPath)\n\t);\n}\n\nexport interface ISerializedSingleFolderWorkspaceIdentifier\n\textends IBaseWorkspaceIdentifier {\n\treadonly uri: UriComponents;\n}\n\nexport interface ISerializedWorkspaceIdentifier\n\textends IBaseWorkspaceIdentifier {\n\treadonly configPath: UriComponents;\n}\n\nexport function reviveIdentifier(identifier: undefined): undefined;\nexport function reviveIdentifier(\n\tidentifier: ISerializedWorkspaceIdentifier,\n): IWorkspaceIdentifier;\nexport function reviveIdentifier(\n\tidentifier: ISerializedSingleFolderWorkspaceIdentifier,\n): ISingleFolderWorkspaceIdentifier;\nexport function reviveIdentifier(\n\tidentifier: IEmptyWorkspaceIdentifier,\n): IEmptyWorkspaceIdentifier;\nexport function reviveIdentifier(\n\tidentifier:\n\t\t| ISerializedWorkspaceIdentifier\n\t\t| ISerializedSingleFolderWorkspaceIdentifier\n\t\t| IEmptyWorkspaceIdentifier\n\t\t| undefined,\n): IAnyWorkspaceIdentifier | undefined;\nexport function reviveIdentifier(\n\tidentifier:\n\t\t| ISerializedWorkspaceIdentifier\n\t\t| ISerializedSingleFolderWorkspaceIdentifier\n\t\t| IEmptyWorkspaceIdentifier\n\t\t| undefined,\n): IAnyWorkspaceIdentifier | undefined {\n\t// Single Folder\n\tconst singleFolderIdentifierCandidate = identifier as\n\t\t| ISerializedSingleFolderWorkspaceIdentifier\n\t\t| undefined;\n\tif (singleFolderIdentifierCandidate?.uri) {\n\t\treturn {\n\t\t\tid: singleFolderIdentifierCandidate.id,\n\t\t\turi: URI.revive(singleFolderIdentifierCandidate.uri),\n\t\t};\n\t}\n\n\t// Multi folder\n\tconst workspaceIdentifierCandidate = identifier as\n\t\t| ISerializedWorkspaceIdentifier\n\t\t| undefined;\n\tif (workspaceIdentifierCandidate?.configPath) {\n\t\treturn {\n\t\t\tid: workspaceIdentifierCandidate.id,\n\t\t\tconfigPath: URI.revive(workspaceIdentifierCandidate.configPath),\n\t\t};\n\t}\n\n\t// Empty\n\tif (identifier?.id) {\n\t\treturn { id: identifier.id };\n\t}\n\n\treturn undefined;\n}\n\nexport enum WorkbenchState {\n\tEMPTY = 1,\n\tFOLDER = 2,\n\tWORKSPACE = 3,\n}\n\nexport interface IWorkspaceFoldersWillChangeEvent {\n\treadonly changes: IWorkspaceFoldersChangeEvent;\n\treadonly fromCache: boolean;\n\n\tjoin(promise: Promise<void>): void;\n}\n\nexport interface IWorkspaceFoldersChangeEvent {\n\tadded: IWorkspaceFolder[];\n\tremoved: IWorkspaceFolder[];\n\tchanged: IWorkspaceFolder[];\n}\n\nexport interface IWorkspace {\n\t/**\n\t * the unique identifier of the workspace.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * Folders in the workspace.\n\t */\n\treadonly folders: IWorkspaceFolder[];\n\n\t/**\n\t * Transient workspaces are meant to go away after being used\n\t * once, e.g. a window reload of a transient workspace will\n\t * open an empty window.\n\t */\n\treadonly transient?: boolean;\n\n\t/**\n\t * the location of the workspace configuration\n\t */\n\treadonly configuration?: URI | null;\n}\n\nexport function isWorkspace(thing: unknown): thing is IWorkspace {\n\tconst candidate = thing as IWorkspace | undefined;\n\n\treturn !!(\n\t\tcandidate &&\n\t\ttypeof candidate === \"object\" &&\n\t\ttypeof candidate.id === \"string\" &&\n\t\tArray.isArray(candidate.folders)\n\t);\n}\n\nexport interface IWorkspaceFolderData {\n\t/**\n\t * The associated URI for this workspace folder.\n\t */\n\treadonly uri: URI;\n\n\t/**\n\t * The name of this workspace folder. Defaults to\n\t * the basename of its [uri-path](#Uri.path)\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The ordinal number of this workspace folder.\n\t */\n\treadonly index: number;\n}\n\nexport interface IWorkspaceFolder extends IWorkspaceFolderData {\n\t/**\n\t * Given workspace folder relative path, returns the resource with the absolute path.\n\t */\n\ttoResource: (relativePath: string) => URI;\n}\n\nexport function isWorkspaceFolder(thing: unknown): thing is IWorkspaceFolder {\n\tconst candidate = thing as IWorkspaceFolder;\n\n\treturn !!(\n\t\tcandidate &&\n\t\ttypeof candidate === \"object\" &&\n\t\tURI.isUri(candidate.uri) &&\n\t\ttypeof candidate.name === \"string\" &&\n\t\ttypeof candidate.toResource === \"function\"\n\t);\n}\n\nexport class Workspace implements IWorkspace {\n\tprivate _foldersMap: TernarySearchTree<URI, WorkspaceFolder> =\n\t\tTernarySearchTree.forUris<WorkspaceFolder>(\n\t\t\tthis._ignorePathCasing,\n\t\t\t() => true,\n\t\t);\n\tprivate _folders!: WorkspaceFolder[];\n\n\tconstructor(\n\t\tprivate _id: string,\n\t\tfolders: WorkspaceFolder[],\n\t\tprivate _transient: boolean,\n\t\tprivate _configuration: URI | null,\n\t\tprivate _ignorePathCasing: (key: URI) => boolean,\n\t) {\n\t\tthis.folders = folders;\n\t}\n\n\tupdate(workspace: Workspace) {\n\t\tthis._id = workspace.id;\n\t\tthis._configuration = workspace.configuration;\n\t\tthis._transient = workspace.transient;\n\t\tthis._ignorePathCasing = workspace._ignorePathCasing;\n\t\tthis.folders = workspace.folders;\n\t}\n\n\tget folders(): WorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tset folders(folders: WorkspaceFolder[]) {\n\t\tthis._folders = folders;\n\t\tthis.updateFoldersMap();\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tget transient(): boolean {\n\t\treturn this._transient;\n\t}\n\n\tget configuration(): URI | null {\n\t\treturn this._configuration;\n\t}\n\n\tset configuration(configuration: URI | null) {\n\t\tthis._configuration = configuration;\n\t}\n\n\tgetFolder(resource: URI): IWorkspaceFolder | null {\n\t\tif (!resource) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._foldersMap.findSubstr(resource) || null;\n\t}\n\n\tprivate updateFoldersMap(): void {\n\t\tthis._foldersMap = TernarySearchTree.forUris<WorkspaceFolder>(\n\t\t\tthis._ignorePathCasing,\n\t\t\t() => true,\n\t\t);\n\t\tfor (const folder of this.folders) {\n\t\t\tthis._foldersMap.set(folder.uri, folder);\n\t\t}\n\t}\n\n\ttoJSON(): IWorkspace {\n\t\treturn {\n\t\t\tid: this.id,\n\t\t\tfolders: this.folders,\n\t\t\ttransient: this.transient,\n\t\t\tconfiguration: this.configuration,\n\t\t};\n\t}\n}\n\nexport interface IRawFileWorkspaceFolder {\n\treadonly path: string;\n\tname?: string;\n}\n\nexport interface IRawUriWorkspaceFolder {\n\treadonly uri: string;\n\tname?: string;\n}\n\nexport class WorkspaceFolder implements IWorkspaceFolder {\n\treadonly uri: URI;\n\treadonly name: string;\n\treadonly index: number;\n\n\tconstructor(\n\t\tdata: IWorkspaceFolderData,\n\t\t/**\n\t\t * Provides access to the original metadata for this workspace\n\t\t * folder. This can be different from the metadata provided in\n\t\t * this class:\n\t\t * - raw paths can be relative\n\t\t * - raw paths are not normalized\n\t\t */\n\t\treadonly raw?: IRawFileWorkspaceFolder | IRawUriWorkspaceFolder,\n\t) {\n\t\tthis.uri = data.uri;\n\t\tthis.index = data.index;\n\t\tthis.name = data.name;\n\t}\n\n\ttoResource(relativePath: string): URI {\n\t\treturn joinPath(this.uri, relativePath);\n\t}\n\n\ttoJSON(): IWorkspaceFolderData {\n\t\treturn { uri: this.uri, name: this.name, index: this.index };\n\t}\n}\n\nexport function toWorkspaceFolder(resource: URI): WorkspaceFolder {\n\treturn new WorkspaceFolder(\n\t\t{ uri: resource, index: 0, name: basenameOrAuthority(resource) },\n\t\t{ uri: resource.toString() },\n\t);\n}\n\nexport const WORKSPACE_EXTENSION = \"code-workspace\";\nexport const WORKSPACE_SUFFIX = `.${WORKSPACE_EXTENSION}`;\nexport const WORKSPACE_FILTER = [\n\t{\n\t\tname: localize(\"codeWorkspace\", \"Code Workspace\"),\n\t\textensions: [WORKSPACE_EXTENSION],\n\t},\n];\nexport const UNTITLED_WORKSPACE_NAME = \"workspace.json\";\n\nexport function isUntitledWorkspace(\n\tpath: URI,\n\tenvironmentService: IEnvironmentService,\n): boolean {\n\treturn extUriBiasedIgnorePathCase.isEqualOrParent(\n\t\tpath,\n\t\tenvironmentService.untitledWorkspacesHome,\n\t);\n}\n\nexport function isTemporaryWorkspace(workspace: IWorkspace): boolean;\nexport function isTemporaryWorkspace(path: URI): boolean;\nexport function isTemporaryWorkspace(arg1: IWorkspace | URI): boolean {\n\tlet path: URI | null | undefined;\n\tif (URI.isUri(arg1)) {\n\t\tpath = arg1;\n\t} else {\n\t\tpath = arg1.configuration;\n\t}\n\n\treturn path?.scheme === Schemas.tmp;\n}\n\nexport const STANDALONE_EDITOR_WORKSPACE_ID =\n\t\"4064f6ec-cb38-4ad0-af64-ee6467e63c82\";\nexport function isStandaloneEditorWorkspace(workspace: IWorkspace): boolean {\n\treturn workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}\n\nexport function isSavedWorkspace(\n\tpath: URI,\n\tenvironmentService: IEnvironmentService,\n): boolean {\n\treturn (\n\t\t!isUntitledWorkspace(path, environmentService) &&\n\t\t!isTemporaryWorkspace(path)\n\t);\n}\n\nexport function hasWorkspaceFileExtension(path: string | URI) {\n\tconst ext =\n\t\ttypeof path === \"string\" ? extname(path) : resourceExtname(path);\n\n\treturn ext === WORKSPACE_SUFFIX;\n}\n"],
  "mappings": "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",
  "names": ["WorkbenchState"]
}
