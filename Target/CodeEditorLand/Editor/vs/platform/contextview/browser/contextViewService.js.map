{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/contextview/browser/contextViewService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextView, ContextViewDOMPosition, IContextViewProvider } from '../../../base/browser/ui/contextview/contextview.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ILayoutService } from '../../layout/browser/layoutService.js';\nimport { IContextViewDelegate, IContextViewService, IOpenContextView } from './contextView.js';\nimport { getWindow } from '../../../base/browser/dom.js';\n\nexport class ContextViewHandler extends Disposable implements IContextViewProvider {\n\n\tprivate openContextView: IOpenContextView | undefined;\n\tprotected readonly contextView = this._register(new ContextView(this.layoutService.mainContainer, ContextViewDOMPosition.ABSOLUTE));\n\n\tconstructor(\n\t\t@ILayoutService private readonly layoutService: ILayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis.layout();\n\t\tthis._register(layoutService.onDidLayoutContainer(() => this.layout()));\n\t}\n\n\t// ContextView\n\n\tshowContextView(delegate: IContextViewDelegate, container?: HTMLElement, shadowRoot?: boolean): IOpenContextView {\n\t\tlet domPosition: ContextViewDOMPosition;\n\t\tif (container) {\n\t\t\tif (container === this.layoutService.getContainer(getWindow(container))) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t\t} else if (shadowRoot) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED_SHADOW;\n\t\t\t} else {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED;\n\t\t\t}\n\t\t} else {\n\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t}\n\n\t\tthis.contextView.setContainer(container ?? this.layoutService.activeContainer, domPosition);\n\n\t\tthis.contextView.show(delegate);\n\n\t\tconst openContextView: IOpenContextView = {\n\t\t\tclose: () => {\n\t\t\t\tif (this.openContextView === openContextView) {\n\t\t\t\t\tthis.hideContextView();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.openContextView = openContextView;\n\t\treturn openContextView;\n\t}\n\n\tlayout(): void {\n\t\tthis.contextView.layout();\n\t}\n\n\thideContextView(data?: any): void {\n\t\tthis.contextView.hide(data);\n\t\tthis.openContextView = undefined;\n\t}\n}\n\nexport class ContextViewService extends ContextViewHandler implements IContextViewService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tgetContextViewElement(): HTMLElement {\n\t\treturn this.contextView.getViewElement();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,aAAa,wBAAwB,4BAA4B;AAC1E,SAAS,kBAAkB;AAC3B,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB,qBAAqB,wBAAwB;AAC5E,SAAS,iBAAiB;AAEnB,IAAM,qBAAN,cAAiC,WAA2C;AAAA,EAKlF,YACkC,eAChC;AACD,UAAM;AAF2B;AAIjC,SAAK,OAAO;AACZ,SAAK,UAAU,cAAc,qBAAqB,MAAM,KAAK,OAAO,CAAC,CAAC;AAAA,EACvE;AAAA,EAvBD,OAWmF;AAAA;AAAA;AAAA,EAE1E;AAAA,EACW,cAAc,KAAK,UAAU,IAAI,YAAY,KAAK,cAAc,eAAe,uBAAuB,QAAQ,CAAC;AAAA;AAAA,EAalI,gBAAgB,UAAgC,WAAyB,YAAwC;AAChH,QAAI;AACJ,QAAI,WAAW;AACd,UAAI,cAAc,KAAK,cAAc,aAAa,UAAU,SAAS,CAAC,GAAG;AACxE,sBAAc,uBAAuB;AAAA,MACtC,WAAW,YAAY;AACtB,sBAAc,uBAAuB;AAAA,MACtC,OAAO;AACN,sBAAc,uBAAuB;AAAA,MACtC;AAAA,IACD,OAAO;AACN,oBAAc,uBAAuB;AAAA,IACtC;AAEA,SAAK,YAAY,aAAa,aAAa,KAAK,cAAc,iBAAiB,WAAW;AAE1F,SAAK,YAAY,KAAK,QAAQ;AAE9B,UAAM,kBAAoC;AAAA,MACzC,OAAO,6BAAM;AACZ,YAAI,KAAK,oBAAoB,iBAAiB;AAC7C,eAAK,gBAAgB;AAAA,QACtB;AAAA,MACD,GAJO;AAAA,IAKR;AAEA,SAAK,kBAAkB;AACvB,WAAO;AAAA,EACR;AAAA,EAEA,SAAe;AACd,SAAK,YAAY,OAAO;AAAA,EACzB;AAAA,EAEA,gBAAgB,MAAkB;AACjC,SAAK,YAAY,KAAK,IAAI;AAC1B,SAAK,kBAAkB;AAAA,EACxB;AACD;AAtDa,qBAAN;AAAA,EAMJ;AAAA,GANU;AAwDN,MAAM,2BAA2B,mBAAkD;AAAA,EAnE1F,OAmE0F;AAAA;AAAA;AAAA,EAIzF,wBAAqC;AACpC,WAAO,KAAK,YAAY,eAAe;AAAA,EACxC;AACD;",
  "names": []
}
