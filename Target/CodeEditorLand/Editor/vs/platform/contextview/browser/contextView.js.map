{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/contextview/browser/contextView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IContextMenuDelegate } from \"../../../base/browser/contextmenu.js\";\nimport type { StandardMouseEvent } from \"../../../base/browser/mouseEvent.js\";\nimport type {\n\tAnchorAlignment,\n\tAnchorAxisAlignment,\n\tIAnchor,\n\tIContextViewProvider,\n} from \"../../../base/browser/ui/contextview/contextview.js\";\nimport type { IAction } from \"../../../base/common/actions.js\";\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type {\n\tIMenuActionOptions,\n\tMenuId,\n} from \"../../actions/common/actions.js\";\nimport type { IContextKeyService } from \"../../contextkey/common/contextkey.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport const IContextViewService =\n\tcreateDecorator<IContextViewService>(\"contextViewService\");\n\nexport interface IContextViewService extends IContextViewProvider {\n\treadonly _serviceBrand: undefined;\n\n\tshowContextView(\n\t\tdelegate: IContextViewDelegate,\n\t\tcontainer?: HTMLElement,\n\t\tshadowRoot?: boolean,\n\t): IOpenContextView;\n\thideContextView(data?: any): void;\n\tgetContextViewElement(): HTMLElement;\n\tlayout(): void;\n\tanchorAlignment?: AnchorAlignment;\n}\n\nexport interface IContextViewDelegate {\n\tcanRelayout?: boolean; // Default: true\n\n\t/**\n\t * The anchor where to position the context view.\n\t * Use a `HTMLElement` to position the view at the element,\n\t * a `StandardMouseEvent` to position it at the mouse position\n\t * or an `IAnchor` to position it at a specific location.\n\t */\n\tgetAnchor(): HTMLElement | StandardMouseEvent | IAnchor;\n\trender(container: HTMLElement): IDisposable;\n\tonDOMEvent?(e: any, activeElement: HTMLElement): void;\n\tonHide?(data?: any): void;\n\tfocus?(): void;\n\tanchorAlignment?: AnchorAlignment;\n\tanchorAxisAlignment?: AnchorAxisAlignment;\n\n\t// context views with higher layers are rendered over contet views with lower layers\n\tlayer?: number; // Default: 0\n}\n\nexport interface IOpenContextView {\n\tclose: () => void;\n}\n\nexport const IContextMenuService =\n\tcreateDecorator<IContextMenuService>(\"contextMenuService\");\n\nexport interface IContextMenuService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidShowContextMenu: Event<void>;\n\treadonly onDidHideContextMenu: Event<void>;\n\n\tshowContextMenu(\n\t\tdelegate: IContextMenuDelegate | IContextMenuMenuDelegate,\n\t): void;\n}\n\nexport type IContextMenuMenuDelegate = {\n\t/**\n\t * The MenuId that should be used to populate the context menu.\n\t */\n\tmenuId?: MenuId;\n\t/**\n\t * Optional options how menu actions are invoked\n\t */\n\tmenuActionOptions?: IMenuActionOptions;\n\t/**\n\t * Optional context key service which drives the given menu\n\t */\n\tcontextKeyService?: IContextKeyService;\n\n\t/**\n\t * Optional getter for extra actions. They will be prepended to the menu actions.\n\t */\n\tgetActions?(): IAction[];\n} & Omit<IContextMenuDelegate, \"getActions\">;\n"],
  "mappings": "AAqBA,SAAS,uBAAuB;AAEzB,MAAM,sBACZ,gBAAqC,oBAAoB;AAyCnD,MAAM,sBACZ,gBAAqC,oBAAoB;",
  "names": []
}
