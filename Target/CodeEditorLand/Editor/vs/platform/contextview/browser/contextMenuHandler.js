import{$ as b,EventType as a,addDisposableListener as h,getActiveElement as m,getWindow as v,isAncestor as f,isHTMLElement as x}from"../../../base/browser/dom.js";import{StandardMouseEvent as y}from"../../../base/browser/mouseEvent.js";import{Menu as w}from"../../../base/browser/ui/menu/menu.js";import{ActionRunner as k}from"../../../base/common/actions.js";import{isCancellationError as C}from"../../../base/common/errors.js";import{DisposableStore as S,combinedDisposable as M}from"../../../base/common/lifecycle.js";import{defaultMenuStyles as E}from"../../theme/browser/defaultStyles.js";class L{constructor(e,s,o,c){this.contextViewService=e;this.telemetryService=s;this.notificationService=o;this.keybindingService=c}focusToReturn=null;lastContainer=null;block=null;blockDisposable=null;options={blockMouse:!0};configure(e){this.options=e}showContextMenu(e){const s=e.getActions();if(!s.length)return;this.focusToReturn=m();let o;const c=x(e.domForShadowRoot)?e.domForShadowRoot:void 0;this.contextViewService.showContextView({getAnchor:()=>e.getAnchor(),canRelayout:!1,anchorAlignment:e.anchorAlignment,anchorAxisAlignment:e.anchorAxisAlignment,render:t=>{this.lastContainer=t;const p=e.getMenuClassName?e.getMenuClassName():"";p&&(t.className+=" "+p),this.options.blockMouse&&(this.block=t.appendChild(b(".context-view-block")),this.block.style.position="fixed",this.block.style.cursor="initial",this.block.style.left="0",this.block.style.top="0",this.block.style.width="100%",this.block.style.height="100%",this.block.style.zIndex="-1",this.blockDisposable?.dispose(),this.blockDisposable=h(this.block,a.MOUSE_DOWN,i=>i.stopPropagation()));const n=new S,l=e.actionRunner||new k;l.onWillRun(i=>this.onActionRun(i,!e.skipTelemetry),this,n),l.onDidRun(this.onDidActionRun,this,n),o=new w(t,s,{actionViewItemProvider:e.getActionViewItem,context:e.getActionsContext?e.getActionsContext():null,actionRunner:l,getKeyBinding:e.getKeyBinding?e.getKeyBinding:i=>this.keybindingService.lookupKeybinding(i.id)},E),o.onDidCancel(()=>this.contextViewService.hideContextView(!0),null,n),o.onDidBlur(()=>this.contextViewService.hideContextView(!0),null,n);const u=v(t);return n.add(h(u,a.BLUR,()=>this.contextViewService.hideContextView(!0))),n.add(h(u,a.MOUSE_DOWN,i=>{if(i.defaultPrevented)return;const d=new y(u,i);let r=d.target;if(!d.rightButton){for(;r;){if(r===t)return;r=r.parentElement}this.contextViewService.hideContextView(!0)}})),M(n,o)},focus:()=>{o?.focus(!!e.autoSelectFirstItem)},onHide:t=>{e.onHide?.(!!t),this.block&&(this.block.remove(),this.block=null),this.blockDisposable?.dispose(),this.blockDisposable=null,this.lastContainer&&(m()===this.lastContainer||f(m(),this.lastContainer))&&this.focusToReturn?.focus(),this.lastContainer=null}},c,!!c)}onActionRun(e,s){s&&this.telemetryService.publicLog2("workbenchActionExecuted",{id:e.action.id,from:"contextMenu"}),this.contextViewService.hideContextView(!1)}onDidActionRun(e){e.error&&!C(e.error)&&this.notificationService.error(e.error)}}export{L as ContextMenuHandler};
