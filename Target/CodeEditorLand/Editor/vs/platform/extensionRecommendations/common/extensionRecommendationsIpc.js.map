{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionRecommendations/common/extensionRecommendationsIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { IChannel, IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { IExtensionRecommendationNotificationService, IExtensionRecommendations, RecommendationsNotificationResult } from './extensionRecommendations.js';\n\nexport class ExtensionRecommendationNotificationServiceChannelClient implements IExtensionRecommendationNotificationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private readonly channel: IChannel) { }\n\n\tget ignoredRecommendations(): string[] { throw new Error('not supported'); }\n\n\tpromptImportantExtensionsInstallNotification(extensionRecommendations: IExtensionRecommendations): Promise<RecommendationsNotificationResult> {\n\t\treturn this.channel.call('promptImportantExtensionsInstallNotification', [extensionRecommendations]);\n\t}\n\n\tpromptWorkspaceRecommendations(recommendations: string[]): Promise<void> {\n\t\tthrow new Error('not supported');\n\t}\n\n\thasToIgnoreRecommendationNotifications(): boolean {\n\t\tthrow new Error('not supported');\n\t}\n\n}\n\nexport class ExtensionRecommendationNotificationServiceChannel implements IServerChannel {\n\n\tconstructor(private service: IExtensionRecommendationNotificationService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'promptImportantExtensionsInstallNotification': return this.service.promptImportantExtensionsInstallNotification(args[0]);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,UAAU,sBAAsB;AACzC,SAAS,6CAA6C,2BAA2B,yCAAyC;AAEnH,MAAM,wDAA+G;AAAA,EAI3H,YAA6B,SAAmB;AAAnB;AAAA,EAAqB;AAAA,EAbnD,OAS4H;AAAA;AAAA;AAAA,EAM3H,IAAI,yBAAmC;AAAE,UAAM,IAAI,MAAM,eAAe;AAAA,EAAG;AAAA,EAE3E,6CAA6C,0BAAiG;AAC7I,WAAO,KAAK,QAAQ,KAAK,gDAAgD,CAAC,wBAAwB,CAAC;AAAA,EACpG;AAAA,EAEA,+BAA+B,iBAA0C;AACxE,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAAA,EAEA,yCAAkD;AACjD,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAED;AAEO,MAAM,kDAA4E;AAAA,EAExF,YAAoB,SAAsD;AAAtD;AAAA,EAAwD;AAAA,EAjC7E,OA+ByF;AAAA;AAAA;AAAA,EAIxF,OAAO,GAAY,OAA2B;AAC7C,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,KAAK,GAAY,SAAiB,MAA0B;AAC3D,YAAQ,SAAS;AAAA,MAChB,KAAK;AAAgD,eAAO,KAAK,QAAQ,6CAA6C,KAAK,CAAC,CAAC;AAAA,IAC9H;AAEA,UAAM,IAAI,MAAM,mBAAmB,OAAO,EAAE;AAAA,EAC7C;AACD;",
  "names": []
}
