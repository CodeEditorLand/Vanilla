{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionRecommendations/common/extensionRecommendationsIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport type {\n\tIChannel,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport type {\n\tIExtensionRecommendationNotificationService,\n\tIExtensionRecommendations,\n\tRecommendationsNotificationResult,\n} from \"./extensionRecommendations.js\";\n\nexport class ExtensionRecommendationNotificationServiceChannelClient\n\timplements IExtensionRecommendationNotificationService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private readonly channel: IChannel) {}\n\n\tget ignoredRecommendations(): string[] {\n\t\tthrow new Error(\"not supported\");\n\t}\n\n\tpromptImportantExtensionsInstallNotification(\n\t\textensionRecommendations: IExtensionRecommendations,\n\t): Promise<RecommendationsNotificationResult> {\n\t\treturn this.channel.call(\n\t\t\t\"promptImportantExtensionsInstallNotification\",\n\t\t\t[extensionRecommendations],\n\t\t);\n\t}\n\n\tpromptWorkspaceRecommendations(recommendations: string[]): Promise<void> {\n\t\tthrow new Error(\"not supported\");\n\t}\n\n\thasToIgnoreRecommendationNotifications(): boolean {\n\t\tthrow new Error(\"not supported\");\n\t}\n}\n\nexport class ExtensionRecommendationNotificationServiceChannel\n\timplements IServerChannel\n{\n\tconstructor(private service: IExtensionRecommendationNotificationService) {}\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase \"promptImportantExtensionsInstallNotification\":\n\t\t\t\treturn this.service.promptImportantExtensionsInstallNotification(\n\t\t\t\t\targs[0],\n\t\t\t\t);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n"],
  "mappings": ";;AAgBO,MAAM,wDAEb;AAAA,EAGC,YAA6B,SAAmB;AAAnB;AAAA,EAAoB;AAAA,EArBlD,OAkBA;AAAA;AAAA;AAAA,EAKC,IAAI,yBAAmC;AACtC,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAAA,EAEA,6CACC,0BAC6C;AAC7C,WAAO,KAAK,QAAQ;AAAA,MACnB;AAAA,MACA,CAAC,wBAAwB;AAAA,IAC1B;AAAA,EACD;AAAA,EAEA,+BAA+B,iBAA0C;AACxE,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAAA,EAEA,yCAAkD;AACjD,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AACD;AAEO,MAAM,kDAEb;AAAA,EACC,YAAoB,SAAsD;AAAtD;AAAA,EAAuD;AAAA,EAhD5E,OA+CA;AAAA;AAAA;AAAA,EAGC,OAAO,GAAY,OAA2B;AAC7C,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,KAAK,GAAY,SAAiB,MAA0B;AAC3D,YAAQ,SAAS;AAAA,MAChB,KAAK;AACJ,eAAO,KAAK,QAAQ;AAAA,UACnB,KAAK,CAAC;AAAA,QACP;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,mBAAmB,OAAO,EAAE;AAAA,EAC7C;AACD;",
  "names": []
}
