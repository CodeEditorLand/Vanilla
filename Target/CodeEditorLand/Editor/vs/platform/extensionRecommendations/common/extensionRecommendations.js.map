{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensionRecommendations/common/extensionRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport enum RecommendationSource {\n\tFILE = 1,\n\tWORKSPACE = 2,\n\tEXE = 3,\n}\n\nexport interface IExtensionRecommendations {\n\tsource: RecommendationSource;\n\textensions: string[];\n\tname: string;\n\tsearchValue?: string;\n}\n\nexport function RecommendationSourceToString(source: RecommendationSource) {\n\tswitch (source) {\n\t\tcase RecommendationSource.FILE:\n\t\t\treturn \"file\";\n\t\tcase RecommendationSource.WORKSPACE:\n\t\t\treturn \"workspace\";\n\t\tcase RecommendationSource.EXE:\n\t\t\treturn \"exe\";\n\t}\n}\n\nexport enum RecommendationsNotificationResult {\n\tIgnored = \"ignored\",\n\tCancelled = \"cancelled\",\n\tTooMany = \"toomany\",\n\tIncompatibleWindow = \"incompatibleWindow\",\n\tAccepted = \"reacted\",\n}\n\nexport const IExtensionRecommendationNotificationService =\n\tcreateDecorator<IExtensionRecommendationNotificationService>(\n\t\t\"IExtensionRecommendationNotificationService\",\n\t);\n\nexport interface IExtensionRecommendationNotificationService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly ignoredRecommendations: string[];\n\thasToIgnoreRecommendationNotifications(): boolean;\n\n\tpromptImportantExtensionsInstallNotification(\n\t\trecommendations: IExtensionRecommendations,\n\t): Promise<RecommendationsNotificationResult>;\n\tpromptWorkspaceRecommendations(\n\t\trecommendations: Array<string | URI>,\n\t): Promise<void>;\n}\n"],
  "mappings": ";;AAMA,SAAS,uBAAuB;AAEzB,IAAK,uBAAL,kBAAKA,0BAAL;AACN,EAAAA,4CAAA,UAAO,KAAP;AACA,EAAAA,4CAAA,eAAY,KAAZ;AACA,EAAAA,4CAAA,SAAM,KAAN;AAHW,SAAAA;AAAA,GAAA;AAaL,SAAS,6BAA6B,QAA8B;AAC1E,UAAQ,QAAQ;AAAA,IACf,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AACJ,aAAO;AAAA,EACT;AACD;AATgB;AAWT,IAAK,oCAAL,kBAAKC,uCAAL;AACN,EAAAA,mCAAA,aAAU;AACV,EAAAA,mCAAA,eAAY;AACZ,EAAAA,mCAAA,aAAU;AACV,EAAAA,mCAAA,wBAAqB;AACrB,EAAAA,mCAAA,cAAW;AALA,SAAAA;AAAA,GAAA;AAQL,MAAM,8CACZ;AAAA,EACC;AACD;",
  "names": ["RecommendationSource", "RecommendationsNotificationResult"]
}
