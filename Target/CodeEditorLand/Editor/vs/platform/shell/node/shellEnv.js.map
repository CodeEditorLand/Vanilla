{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/shell/node/shellEnv.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { spawn } from \"child_process\";\nimport { Promises } from \"../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../base/common/cancellation.js\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport {\n\tCancellationError,\n\tisCancellationError,\n} from \"../../../base/common/errors.js\";\nimport { clamp } from \"../../../base/common/numbers.js\";\nimport { basename } from \"../../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tOS,\n\tisWindows,\n} from \"../../../base/common/platform.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport { getSystemShell } from \"../../../base/node/shell.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport type { NativeParsedArgs } from \"../../environment/common/argv.js\";\nimport { isLaunchedFromCli } from \"../../environment/node/argvHelper.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\n\nlet unixShellEnvPromise: Promise<typeof process.env> | undefined;\n\n/**\n * Resolves the shell environment by spawning a shell. This call will cache\n * the shell spawning so that subsequent invocations use that cached result.\n *\n * Will throw an error if:\n * - we hit a timeout of `MAX_SHELL_RESOLVE_TIME`\n * - any other error from spawning a shell to figure out the environment\n */\nexport async function getResolvedShellEnv(\n\tconfigurationService: IConfigurationService,\n\tlogService: ILogService,\n\targs: NativeParsedArgs,\n\tenv: IProcessEnvironment,\n): Promise<typeof process.env> {\n\t// Skip if --force-disable-user-env\n\tif (args[\"force-disable-user-env\"]) {\n\t\tlogService.trace(\n\t\t\t\"resolveShellEnv(): skipped (--force-disable-user-env)\",\n\t\t);\n\n\t\treturn {};\n\t}\n\n\t// Skip on windows\n\telse if (isWindows) {\n\t\tlogService.trace(\"resolveShellEnv(): skipped (Windows)\");\n\n\t\treturn {};\n\t}\n\n\t// Skip if running from CLI already\n\telse if (isLaunchedFromCli(env) && !args[\"force-user-env\"]) {\n\t\tlogService.trace(\"resolveShellEnv(): skipped (VSCODE_CLI is set)\");\n\n\t\treturn {};\n\t}\n\n\t// Otherwise resolve (macOS, Linux)\n\telse {\n\t\tif (isLaunchedFromCli(env)) {\n\t\t\tlogService.trace(\"resolveShellEnv(): running (--force-user-env)\");\n\t\t} else {\n\t\t\tlogService.trace(\"resolveShellEnv(): running (macOS/Linux)\");\n\t\t}\n\n\t\t// Call this only once and cache the promise for\n\t\t// subsequent calls since this operation can be\n\t\t// expensive (spawns a process).\n\t\tif (!unixShellEnvPromise) {\n\t\t\tunixShellEnvPromise = Promises.withAsyncBody<NodeJS.ProcessEnv>(\n\t\t\t\tasync (resolve, reject) => {\n\t\t\t\t\tconst cts = new CancellationTokenSource();\n\n\t\t\t\t\tlet timeoutValue = 10000; // default to 10 seconds\n\t\t\t\t\tconst configuredTimeoutValue =\n\t\t\t\t\t\tconfigurationService.getValue<unknown>(\n\t\t\t\t\t\t\t\"application.shellEnvironmentResolutionTimeout\",\n\t\t\t\t\t\t);\n\t\t\t\t\tif (typeof configuredTimeoutValue === \"number\") {\n\t\t\t\t\t\ttimeoutValue =\n\t\t\t\t\t\t\tclamp(configuredTimeoutValue, 1, 120) *\n\t\t\t\t\t\t\t1000 /* convert from seconds */;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Give up resolving shell env after some time\n\t\t\t\t\tconst timeout = setTimeout(() => {\n\t\t\t\t\t\tcts.dispose(true);\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\"resolveShellEnvTimeout\",\n\t\t\t\t\t\t\t\t\t\"Unable to resolve your shell environment in a reasonable time. Please review your shell configuration and restart.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}, timeoutValue);\n\n\t\t\t\t\t// Resolve shell env and handle errors\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait doResolveUnixShellEnv(logService, cts.token),\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!isCancellationError(error) &&\n\t\t\t\t\t\t\t!cts.token.isCancellationRequested\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t\"resolveShellEnvError\",\n\t\t\t\t\t\t\t\t\t\t\"Unable to resolve your shell environment: {0}\",\n\t\t\t\t\t\t\t\t\t\ttoErrorMessage(error),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve({});\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\t\tcts.dispose();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn unixShellEnvPromise;\n\t}\n}\n\nasync function doResolveUnixShellEnv(\n\tlogService: ILogService,\n\ttoken: CancellationToken,\n): Promise<typeof process.env> {\n\tconst runAsNode = process.env[\"ELECTRON_RUN_AS_NODE\"];\n\tlogService.trace(\"getUnixShellEnvironment#runAsNode\", runAsNode);\n\n\tconst noAttach = process.env[\"ELECTRON_NO_ATTACH_CONSOLE\"];\n\tlogService.trace(\"getUnixShellEnvironment#noAttach\", noAttach);\n\n\tconst mark = generateUuid().replace(/-/g, \"\").substr(0, 12);\n\tconst regex = new RegExp(mark + \"({.*})\" + mark);\n\n\tconst env = {\n\t\t...process.env,\n\t\tELECTRON_RUN_AS_NODE: \"1\",\n\t\tELECTRON_NO_ATTACH_CONSOLE: \"1\",\n\t\tVSCODE_RESOLVING_ENVIRONMENT: \"1\",\n\t};\n\n\tlogService.trace(\"getUnixShellEnvironment#env\", env);\n\tconst systemShellUnix = await getSystemShell(OS, env);\n\tlogService.trace(\"getUnixShellEnvironment#shell\", systemShellUnix);\n\n\treturn new Promise<typeof process.env>((resolve, reject) => {\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn reject(new CancellationError());\n\t\t}\n\n\t\t// handle popular non-POSIX shells\n\t\tconst name = basename(systemShellUnix);\n\t\tlet command: string, shellArgs: Array<string>;\n\t\tconst extraArgs = \"\";\n\t\tif (/^pwsh(-preview)?$/.test(name)) {\n\t\t\t// Older versions of PowerShell removes double quotes sometimes so we use \"double single quotes\" which is how\n\t\t\t// you escape single quotes inside of a single quoted string.\n\t\t\tcommand = `& '${process.execPath}' ${extraArgs} -p '''${mark}'' + JSON.stringify(process.env) + ''${mark}'''`;\n\t\t\tshellArgs = [\"-Login\", \"-Command\"];\n\t\t} else if (name === \"nu\") {\n\t\t\t// nushell requires ^ before quoted path to treat it as a command\n\t\t\tcommand = `^'${process.execPath}' ${extraArgs} -p '\"${mark}\" + JSON.stringify(process.env) + \"${mark}\"'`;\n\t\t\tshellArgs = [\"-i\", \"-l\", \"-c\"];\n\t\t} else if (name === \"xonsh\") {\n\t\t\t// #200374: native implementation is shorter\n\t\t\tcommand = `import os, json; print(\"${mark}\", json.dumps(dict(os.environ)), \"${mark}\")`;\n\t\t\tshellArgs = [\"-i\", \"-l\", \"-c\"];\n\t\t} else {\n\t\t\tcommand = `'${process.execPath}' ${extraArgs} -p '\"${mark}\" + JSON.stringify(process.env) + \"${mark}\"'`;\n\n\t\t\tif (name === \"tcsh\" || name === \"csh\") {\n\t\t\t\tshellArgs = [\"-ic\"];\n\t\t\t} else {\n\t\t\t\tshellArgs = [\"-i\", \"-l\", \"-c\"];\n\t\t\t}\n\t\t}\n\n\t\tlogService.trace(\n\t\t\t\"getUnixShellEnvironment#spawn\",\n\t\t\tJSON.stringify(shellArgs),\n\t\t\tcommand,\n\t\t);\n\n\t\tconst child = spawn(systemShellUnix, [...shellArgs, command], {\n\t\t\tdetached: true,\n\t\t\tstdio: [\"ignore\", \"pipe\", \"pipe\"],\n\t\t\tenv,\n\t\t});\n\n\t\ttoken.onCancellationRequested(() => {\n\t\t\tchild.kill();\n\n\t\t\treturn reject(new CancellationError());\n\t\t});\n\n\t\tchild.on(\"error\", (err) => {\n\t\t\tlogService.error(\n\t\t\t\t\"getUnixShellEnvironment#errorChildProcess\",\n\t\t\t\ttoErrorMessage(err),\n\t\t\t);\n\t\t\treject(err);\n\t\t});\n\n\t\tconst buffers: Buffer[] = [];\n\t\tchild.stdout.on(\"data\", (b) => buffers.push(b));\n\n\t\tconst stderr: Buffer[] = [];\n\t\tchild.stderr.on(\"data\", (b) => stderr.push(b));\n\n\t\tchild.on(\"close\", (code, signal) => {\n\t\t\tconst raw = Buffer.concat(buffers).toString(\"utf8\");\n\t\t\tlogService.trace(\"getUnixShellEnvironment#raw\", raw);\n\n\t\t\tconst stderrStr = Buffer.concat(stderr).toString(\"utf8\");\n\t\t\tif (stderrStr.trim()) {\n\t\t\t\tlogService.trace(\"getUnixShellEnvironment#stderr\", stderrStr);\n\t\t\t}\n\n\t\t\tif (code || signal) {\n\t\t\t\treturn reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"resolveShellEnvExitError\",\n\t\t\t\t\t\t\t\"Unexpected exit code from spawned shell (code {0}, signal {1})\",\n\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\tsignal,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst match = regex.exec(raw);\n\t\t\tconst rawStripped = match ? match[1] : \"{}\";\n\n\t\t\ttry {\n\t\t\t\tconst env = JSON.parse(rawStripped);\n\n\t\t\t\tif (runAsNode) {\n\t\t\t\t\tenv[\"ELECTRON_RUN_AS_NODE\"] = runAsNode;\n\t\t\t\t} else {\n\t\t\t\t\tdelete env[\"ELECTRON_RUN_AS_NODE\"];\n\t\t\t\t}\n\n\t\t\t\tif (noAttach) {\n\t\t\t\t\tenv[\"ELECTRON_NO_ATTACH_CONSOLE\"] = noAttach;\n\t\t\t\t} else {\n\t\t\t\t\tdelete env[\"ELECTRON_NO_ATTACH_CONSOLE\"];\n\t\t\t\t}\n\n\t\t\t\tdelete env[\"VSCODE_RESOLVING_ENVIRONMENT\"];\n\n\t\t\t\t// https://github.com/microsoft/vscode/issues/22593#issuecomment-336050758\n\t\t\t\tdelete env[\"XDG_RUNTIME_DIR\"];\n\n\t\t\t\tlogService.trace(\"getUnixShellEnvironment#result\", env);\n\t\t\t\tresolve(env);\n\t\t\t} catch (err) {\n\t\t\t\tlogService.error(\n\t\t\t\t\t\"getUnixShellEnvironment#errorCaught\",\n\t\t\t\t\ttoErrorMessage(err),\n\t\t\t\t);\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n}\n"],
  "mappings": "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",
  "names": ["env"]
}
