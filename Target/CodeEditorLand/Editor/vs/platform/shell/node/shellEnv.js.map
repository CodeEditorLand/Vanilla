{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/shell/node/shellEnv.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { spawn } from 'child_process';\nimport { basename } from '../../../base/common/path.js';\nimport { localize } from '../../../nls.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { CancellationError, isCancellationError } from '../../../base/common/errors.js';\nimport { IProcessEnvironment, isWindows, OS } from '../../../base/common/platform.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { getSystemShell } from '../../../base/node/shell.js';\nimport { NativeParsedArgs } from '../../environment/common/argv.js';\nimport { isLaunchedFromCli } from '../../environment/node/argvHelper.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { Promises } from '../../../base/common/async.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { clamp } from '../../../base/common/numbers.js';\n\nlet unixShellEnvPromise: Promise<typeof process.env> | undefined = undefined;\n\n/**\n * Resolves the shell environment by spawning a shell. This call will cache\n * the shell spawning so that subsequent invocations use that cached result.\n *\n * Will throw an error if:\n * - we hit a timeout of `MAX_SHELL_RESOLVE_TIME`\n * - any other error from spawning a shell to figure out the environment\n */\nexport async function getResolvedShellEnv(configurationService: IConfigurationService, logService: ILogService, args: NativeParsedArgs, env: IProcessEnvironment): Promise<typeof process.env> {\n\n\t// Skip if --force-disable-user-env\n\tif (args['force-disable-user-env']) {\n\t\tlogService.trace('resolveShellEnv(): skipped (--force-disable-user-env)');\n\n\t\treturn {};\n\t}\n\n\t// Skip on windows\n\telse if (isWindows) {\n\t\tlogService.trace('resolveShellEnv(): skipped (Windows)');\n\n\t\treturn {};\n\t}\n\n\t// Skip if running from CLI already\n\telse if (isLaunchedFromCli(env) && !args['force-user-env']) {\n\t\tlogService.trace('resolveShellEnv(): skipped (VSCODE_CLI is set)');\n\n\t\treturn {};\n\t}\n\n\t// Otherwise resolve (macOS, Linux)\n\telse {\n\t\tif (isLaunchedFromCli(env)) {\n\t\t\tlogService.trace('resolveShellEnv(): running (--force-user-env)');\n\t\t} else {\n\t\t\tlogService.trace('resolveShellEnv(): running (macOS/Linux)');\n\t\t}\n\n\t\t// Call this only once and cache the promise for\n\t\t// subsequent calls since this operation can be\n\t\t// expensive (spawns a process).\n\t\tif (!unixShellEnvPromise) {\n\t\t\tunixShellEnvPromise = Promises.withAsyncBody<NodeJS.ProcessEnv>(async (resolve, reject) => {\n\t\t\t\tconst cts = new CancellationTokenSource();\n\n\t\t\t\tlet timeoutValue = 10000; // default to 10 seconds\n\t\t\t\tconst configuredTimeoutValue = configurationService.getValue<unknown>('application.shellEnvironmentResolutionTimeout');\n\t\t\t\tif (typeof configuredTimeoutValue === 'number') {\n\t\t\t\t\ttimeoutValue = clamp(configuredTimeoutValue, 1, 120) * 1000 /* convert from seconds */;\n\t\t\t\t}\n\n\t\t\t\t// Give up resolving shell env after some time\n\t\t\t\tconst timeout = setTimeout(() => {\n\t\t\t\t\tcts.dispose(true);\n\t\t\t\t\treject(new Error(localize('resolveShellEnvTimeout', \"Unable to resolve your shell environment in a reasonable time. Please review your shell configuration and restart.\")));\n\t\t\t\t}, timeoutValue);\n\n\t\t\t\t// Resolve shell env and handle errors\n\t\t\t\ttry {\n\t\t\t\t\tresolve(await doResolveUnixShellEnv(logService, cts.token));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!isCancellationError(error) && !cts.token.isCancellationRequested) {\n\t\t\t\t\t\treject(new Error(localize('resolveShellEnvError', \"Unable to resolve your shell environment: {0}\", toErrorMessage(error))));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({});\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tcts.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn unixShellEnvPromise;\n\t}\n}\n\nasync function doResolveUnixShellEnv(logService: ILogService, token: CancellationToken): Promise<typeof process.env> {\n\tconst runAsNode = process.env['ELECTRON_RUN_AS_NODE'];\n\tlogService.trace('getUnixShellEnvironment#runAsNode', runAsNode);\n\n\tconst noAttach = process.env['ELECTRON_NO_ATTACH_CONSOLE'];\n\tlogService.trace('getUnixShellEnvironment#noAttach', noAttach);\n\n\tconst mark = generateUuid().replace(/-/g, '').substr(0, 12);\n\tconst regex = new RegExp(mark + '({.*})' + mark);\n\n\tconst env = {\n\t\t...process.env,\n\t\tELECTRON_RUN_AS_NODE: '1',\n\t\tELECTRON_NO_ATTACH_CONSOLE: '1',\n\t\tVSCODE_RESOLVING_ENVIRONMENT: '1'\n\t};\n\n\tlogService.trace('getUnixShellEnvironment#env', env);\n\tconst systemShellUnix = await getSystemShell(OS, env);\n\tlogService.trace('getUnixShellEnvironment#shell', systemShellUnix);\n\n\treturn new Promise<typeof process.env>((resolve, reject) => {\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn reject(new CancellationError());\n\t\t}\n\n\t\t// handle popular non-POSIX shells\n\t\tconst name = basename(systemShellUnix);\n\t\tlet command: string, shellArgs: Array<string>;\n\t\tconst extraArgs = '';\n\t\tif (/^pwsh(-preview)?$/.test(name)) {\n\t\t\t// Older versions of PowerShell removes double quotes sometimes so we use \"double single quotes\" which is how\n\t\t\t// you escape single quotes inside of a single quoted string.\n\t\t\tcommand = `& '${process.execPath}' ${extraArgs} -p '''${mark}'' + JSON.stringify(process.env) + ''${mark}'''`;\n\t\t\tshellArgs = ['-Login', '-Command'];\n\t\t} else if (name === 'nu') { // nushell requires ^ before quoted path to treat it as a command\n\t\t\tcommand = `^'${process.execPath}' ${extraArgs} -p '\"${mark}\" + JSON.stringify(process.env) + \"${mark}\"'`;\n\t\t\tshellArgs = ['-i', '-l', '-c'];\n\t\t} else if (name === 'xonsh') { // #200374: native implementation is shorter\n\t\t\tcommand = `import os, json; print(\"${mark}\", json.dumps(dict(os.environ)), \"${mark}\")`;\n\t\t\tshellArgs = ['-i', '-l', '-c'];\n\t\t} else {\n\t\t\tcommand = `'${process.execPath}' ${extraArgs} -p '\"${mark}\" + JSON.stringify(process.env) + \"${mark}\"'`;\n\n\t\t\tif (name === 'tcsh' || name === 'csh') {\n\t\t\t\tshellArgs = ['-ic'];\n\t\t\t} else {\n\t\t\t\tshellArgs = ['-i', '-l', '-c'];\n\t\t\t}\n\t\t}\n\n\t\tlogService.trace('getUnixShellEnvironment#spawn', JSON.stringify(shellArgs), command);\n\n\t\tconst child = spawn(systemShellUnix, [...shellArgs, command], {\n\t\t\tdetached: true,\n\t\t\tstdio: ['ignore', 'pipe', 'pipe'],\n\t\t\tenv\n\t\t});\n\n\t\ttoken.onCancellationRequested(() => {\n\t\t\tchild.kill();\n\n\t\t\treturn reject(new CancellationError());\n\t\t});\n\n\t\tchild.on('error', err => {\n\t\t\tlogService.error('getUnixShellEnvironment#errorChildProcess', toErrorMessage(err));\n\t\t\treject(err);\n\t\t});\n\n\t\tconst buffers: Buffer[] = [];\n\t\tchild.stdout.on('data', b => buffers.push(b));\n\n\t\tconst stderr: Buffer[] = [];\n\t\tchild.stderr.on('data', b => stderr.push(b));\n\n\t\tchild.on('close', (code, signal) => {\n\t\t\tconst raw = Buffer.concat(buffers).toString('utf8');\n\t\t\tlogService.trace('getUnixShellEnvironment#raw', raw);\n\n\t\t\tconst stderrStr = Buffer.concat(stderr).toString('utf8');\n\t\t\tif (stderrStr.trim()) {\n\t\t\t\tlogService.trace('getUnixShellEnvironment#stderr', stderrStr);\n\t\t\t}\n\n\t\t\tif (code || signal) {\n\t\t\t\treturn reject(new Error(localize('resolveShellEnvExitError', \"Unexpected exit code from spawned shell (code {0}, signal {1})\", code, signal)));\n\t\t\t}\n\n\t\t\tconst match = regex.exec(raw);\n\t\t\tconst rawStripped = match ? match[1] : '{}';\n\n\t\t\ttry {\n\t\t\t\tconst env = JSON.parse(rawStripped);\n\n\t\t\t\tif (runAsNode) {\n\t\t\t\t\tenv['ELECTRON_RUN_AS_NODE'] = runAsNode;\n\t\t\t\t} else {\n\t\t\t\t\tdelete env['ELECTRON_RUN_AS_NODE'];\n\t\t\t\t}\n\n\t\t\t\tif (noAttach) {\n\t\t\t\t\tenv['ELECTRON_NO_ATTACH_CONSOLE'] = noAttach;\n\t\t\t\t} else {\n\t\t\t\t\tdelete env['ELECTRON_NO_ATTACH_CONSOLE'];\n\t\t\t\t}\n\n\t\t\t\tdelete env['VSCODE_RESOLVING_ENVIRONMENT'];\n\n\t\t\t\t// https://github.com/microsoft/vscode/issues/22593#issuecomment-336050758\n\t\t\t\tdelete env['XDG_RUNTIME_DIR'];\n\n\t\t\t\tlogService.trace('getUnixShellEnvironment#result', env);\n\t\t\t\tresolve(env);\n\t\t\t} catch (err) {\n\t\t\t\tlogService.error('getUnixShellEnvironment#errorCaught', toErrorMessage(err));\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n}\n"],
  "mappings": "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",
  "names": ["env"]
}
