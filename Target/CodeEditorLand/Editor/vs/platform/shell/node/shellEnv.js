import{spawn as A}from"child_process";import{Promises as L}from"../../../../vs/base/common/async.js";import{CancellationTokenSource as U}from"../../../../vs/base/common/cancellation.js";import{toErrorMessage as v}from"../../../../vs/base/common/errorMessage.js";import{CancellationError as R,isCancellationError as P}from"../../../../vs/base/common/errors.js";import{clamp as $}from"../../../../vs/base/common/numbers.js";import{basename as I}from"../../../../vs/base/common/path.js";import{isWindows as k,OS as V}from"../../../../vs/base/common/platform.js";import{generateUuid as b}from"../../../../vs/base/common/uuid.js";import{getSystemShell as D}from"../../../../vs/base/node/shell.js";import{localize as N}from"../../../../vs/nls.js";import"../../../../vs/platform/configuration/common/configuration.js";import"../../../../vs/platform/environment/common/argv.js";import{isLaunchedFromCli as w}from"../../../../vs/platform/environment/node/argvHelper.js";import"../../../../vs/platform/log/common/log.js";let S;async function ie(n,t,c,m){return c["force-disable-user-env"]?(t.trace("resolveShellEnv(): skipped (--force-disable-user-env)"),{}):k?(t.trace("resolveShellEnv(): skipped (Windows)"),{}):w(m)&&!c["force-user-env"]?(t.trace("resolveShellEnv(): skipped (VSCODE_CLI is set)"),{}):(w(m)?t.trace("resolveShellEnv(): running (--force-user-env)"):t.trace("resolveShellEnv(): running (macOS/Linux)"),S||(S=L.withAsyncBody(async(e,u)=>{const s=new U;let E=1e4;const d=n.getValue("application.shellEnvironmentResolutionTimeout");typeof d=="number"&&(E=$(d,1,120)*1e3);const l=setTimeout(()=>{s.dispose(!0),u(new Error(N("resolveShellEnvTimeout","Unable to resolve your shell environment in a reasonable time. Please review your shell configuration and restart.")))},E);try{e(await J(t,s.token))}catch(i){!P(i)&&!s.token.isCancellationRequested?u(new Error(N("resolveShellEnvError","Unable to resolve your shell environment: {0}",v(i)))):e({})}finally{clearTimeout(l),s.dispose()}})),S)}async function J(n,t){const c=process.env.ELECTRON_RUN_AS_NODE;n.trace("getUnixShellEnvironment#runAsNode",c);const m=process.env.ELECTRON_NO_ATTACH_CONSOLE;n.trace("getUnixShellEnvironment#noAttach",m);const e=b().replace(/-/g,"").substr(0,12),u=new RegExp(e+"({.*})"+e),s={...process.env,ELECTRON_RUN_AS_NODE:"1",ELECTRON_NO_ATTACH_CONSOLE:"1",VSCODE_RESOLVING_ENVIRONMENT:"1"};n.trace("getUnixShellEnvironment#env",s);const E=await D(V,s);return n.trace("getUnixShellEnvironment#shell",E),new Promise((d,l)=>{if(t.isCancellationRequested)return l(new R);const i=I(E);let p,a;const h="";/^pwsh(-preview)?$/.test(i)?(p=`& '${process.execPath}' ${h} -p '''${e}'' + JSON.stringify(process.env) + ''${e}'''`,a=["-Login","-Command"]):i==="nu"?(p=`^'${process.execPath}' ${h} -p '"${e}" + JSON.stringify(process.env) + "${e}"'`,a=["-i","-l","-c"]):i==="xonsh"?(p=`import os, json; print("${e}", json.dumps(dict(os.environ)), "${e}")`,a=["-i","-l","-c"]):(p=`'${process.execPath}' ${h} -p '"${e}" + JSON.stringify(process.env) + "${e}"'`,i==="tcsh"||i==="csh"?a=["-ic"]:a=["-i","-l","-c"]),n.trace("getUnixShellEnvironment#spawn",JSON.stringify(a),p);const f=A(E,[...a,p],{detached:!0,stdio:["ignore","pipe","pipe"],env:s});t.onCancellationRequested(()=>(f.kill(),l(new R))),f.on("error",o=>{n.error("getUnixShellEnvironment#errorChildProcess",v(o)),l(o)});const O=[];f.stdout.on("data",o=>O.push(o));const C=[];f.stderr.on("data",o=>C.push(o)),f.on("close",(o,_)=>{const g=Buffer.concat(O).toString("utf8");n.trace("getUnixShellEnvironment#raw",g);const T=Buffer.concat(C).toString("utf8");if(T.trim()&&n.trace("getUnixShellEnvironment#stderr",T),o||_)return l(new Error(N("resolveShellEnvExitError","Unexpected exit code from spawned shell (code {0}, signal {1})",o,_)));const x=u.exec(g),y=x?x[1]:"{}";try{const r=JSON.parse(y);c?r.ELECTRON_RUN_AS_NODE=c:delete r.ELECTRON_RUN_AS_NODE,m?r.ELECTRON_NO_ATTACH_CONSOLE=m:delete r.ELECTRON_NO_ATTACH_CONSOLE,delete r.VSCODE_RESOLVING_ENVIRONMENT,delete r.XDG_RUNTIME_DIR,n.trace("getUnixShellEnvironment#result",r),d(r)}catch(r){n.error("getUnixShellEnvironment#errorCaught",v(r)),l(r)}})})}export{ie as getResolvedShellEnv};
