{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/observable/common/wrapInReloadableClass.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isHotReloadEnabled } from \"../../../base/common/hotReload.js\";\nimport { readHotReloadableExport } from \"../../../base/common/hotReloadHelpers.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport { autorunWithStore } from \"../../../base/common/observable.js\";\nimport {\n\ttype BrandedService,\n\ttype GetLeadingNonServiceArgs,\n\tIInstantiationService,\n} from \"../../instantiation/common/instantiation.js\";\n\n/**\n * Wrap a class in a reloadable wrapper.\n * When the wrapper is created, the original class is created.\n * When the original class changes, the instance is re-created.\n */\nexport function wrapInReloadableClass0<TArgs extends BrandedService[]>(\n\tgetClass: () => Result<TArgs>,\n): Result<GetLeadingNonServiceArgs<TArgs>> {\n\treturn isHotReloadEnabled()\n\t\t? createWrapper(getClass, BaseClass0)\n\t\t: getClass();\n}\n\ntype Result<TArgs extends any[]> = new (...args: TArgs) => IDisposable;\n\nclass BaseClass {\n\tconstructor(public readonly instantiationService: IInstantiationService) {}\n\n\tpublic init(...params: any[]): void {}\n}\n\nfunction createWrapper<T extends any[]>(\n\tgetClass: () => any,\n\tB: new (...args: T) => BaseClass,\n) {\n\treturn class ReloadableWrapper extends B {\n\t\tprivate _autorun: IDisposable | undefined = undefined;\n\n\t\toverride init(...params: any[]) {\n\t\t\tthis._autorun = autorunWithStore((reader, store) => {\n\t\t\t\tconst clazz = readHotReloadableExport(getClass(), reader);\n\t\t\t\tstore.add(\n\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\tclazz as any,\n\t\t\t\t\t\t...params,\n\t\t\t\t\t) as IDisposable,\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tthis._autorun?.dispose();\n\t\t}\n\t} as any;\n}\n\nclass BaseClass0 extends BaseClass {\n\tconstructor(@IInstantiationService i: IInstantiationService) { super(i); this.init(); }\n}\n\n/**\n * Wrap a class in a reloadable wrapper.\n * When the wrapper is created, the original class is created.\n * When the original class changes, the instance is re-created.\n */\nexport function wrapInReloadableClass1<\n\tTArgs extends [any, ...BrandedService[]],\n>(getClass: () => Result<TArgs>): Result<GetLeadingNonServiceArgs<TArgs>> {\n\treturn isHotReloadEnabled()\n\t\t? createWrapper(getClass, BaseClass1)\n\t\t: (getClass() as any);\n}\n\nclass BaseClass1 extends BaseClass {\n\tconstructor(param1: any, @IInstantiationService i: IInstantiationService) {\n\t\tsuper(i);\n\t\tthis.init(param1);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAIA,SAAS,0BAA0B;AACnC,SAAS,+BAA+B;AAExC,SAAS,wBAAwB;AACjC;AAAA,EAGC;AAAA,OACM;AAOA,SAAS,uBACf,UAC0C;AAC1C,SAAO,mBAAmB,IACvB,cAAc,UAAU,UAAU,IAClC,SAAS;AACb;AANgB;AAUhB,MAAM,UAAU;AAAA,EACf,YAA4B,sBAA6C;AAA7C;AAAA,EAA8C;AAAA,EA9B3E,OA6BgB;AAAA;AAAA;AAAA,EAGR,QAAQ,QAAqB;AAAA,EAAC;AACtC;AAEA,SAAS,cACR,UACA,GACC;AACD,SAAO,MAAM,0BAA0B,EAAE;AAAA,IAvC1C,OAuC0C;AAAA;AAAA;AAAA,IAChC,WAAoC;AAAA,IAEnC,QAAQ,QAAe;AAC/B,WAAK,WAAW,iBAAiB,CAAC,QAAQ,UAAU;AACnD,cAAM,QAAQ,wBAAwB,SAAS,GAAG,MAAM;AACxD,cAAM;AAAA,UACL,KAAK,qBAAqB;AAAA,YACzB;AAAA,YACA,GAAG;AAAA,UACJ;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,IAEA,UAAgB;AACf,WAAK,UAAU,QAAQ;AAAA,IACxB;AAAA,EACD;AACD;AAvBS;AAyBT,IAAM,aAAN,cAAyB,UAAU;AAAA,EA5DnC,OA4DmC;AAAA;AAAA;AAAA,EAClC,YAAmC,GAA0B;AAAE,UAAM,CAAC;AAAG,SAAK,KAAK;AAAA,EAAG;AACvF;AAFM,aAAN;AAAA,EACc;AAAA,GADR;AASC,SAAS,uBAEd,UAAwE;AACzE,SAAO,mBAAmB,IACvB,cAAc,UAAU,UAAU,IACjC,SAAS;AACd;AANgB;AAQhB,IAAM,aAAN,cAAyB,UAAU;AAAA,EA7EnC,OA6EmC;AAAA;AAAA;AAAA,EAClC,YAAY,QAAoC,GAA0B;AACzE,UAAM,CAAC;AACP,SAAK,KAAK,MAAM;AAAA,EACjB;AACD;AALM,aAAN;AAAA,EAC2B;AAAA,GADrB;",
  "names": []
}
