{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/environment/electron-main/environmentMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { memoize } from '../../../base/common/decorators.js';\nimport { join } from '../../../base/common/path.js';\nimport { isLinux } from '../../../base/common/platform.js';\nimport { createStaticIPCHandle } from '../../../base/parts/ipc/node/ipc.net.js';\nimport { IEnvironmentService, INativeEnvironmentService } from '../common/environment.js';\nimport { NativeEnvironmentService } from '../node/environmentService.js';\nimport { refineServiceDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const IEnvironmentMainService = refineServiceDecorator<IEnvironmentService, IEnvironmentMainService>(IEnvironmentService);\n\n/**\n * A subclass of the `INativeEnvironmentService` to be used only in electron-main\n * environments.\n */\nexport interface IEnvironmentMainService extends INativeEnvironmentService {\n\n\t// --- backup paths\n\treadonly backupHome: string;\n\n\t// --- V8 code caching\n\treadonly codeCachePath: string | undefined;\n\treadonly useCodeCache: boolean;\n\n\t// --- IPC\n\treadonly mainIPCHandle: string;\n\treadonly mainLockfile: string;\n\n\t// --- config\n\treadonly disableUpdates: boolean;\n\n\tunsetSnapExportedVariables(): void;\n\trestoreSnapExportedVariables(): void;\n}\n\nexport class EnvironmentMainService extends NativeEnvironmentService implements IEnvironmentMainService {\n\n\tprivate _snapEnv: Record<string, string> = {};\n\n\t@memoize\n\tget backupHome(): string { return join(this.userDataPath, 'Backups'); }\n\n\t@memoize\n\tget mainIPCHandle(): string { return createStaticIPCHandle(this.userDataPath, 'main', this.productService.version); }\n\n\t@memoize\n\tget mainLockfile(): string { return join(this.userDataPath, 'code.lock'); }\n\n\t@memoize\n\tget disableUpdates(): boolean { return !!this.args['disable-updates']; }\n\n\t@memoize\n\tget crossOriginIsolated(): boolean { return !!this.args['enable-coi']; }\n\n\t@memoize\n\tget codeCachePath(): string | undefined { return process.env['VSCODE_CODE_CACHE_PATH'] || undefined; }\n\n\t@memoize\n\tget useCodeCache(): boolean { return !!this.codeCachePath; }\n\n\tunsetSnapExportedVariables() {\n\t\tif (!isLinux) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const key in process.env) {\n\t\t\tif (key.endsWith('_VSCODE_SNAP_ORIG')) {\n\t\t\t\tconst originalKey = key.slice(0, -17); // Remove the _VSCODE_SNAP_ORIG suffix\n\t\t\t\tif (this._snapEnv[originalKey]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Preserve the original value in case the snap env is re-entered\n\t\t\t\tif (process.env[originalKey]) {\n\t\t\t\t\tthis._snapEnv[originalKey] = process.env[originalKey]!;\n\t\t\t\t}\n\t\t\t\t// Copy the original value from before entering the snap env if available,\n\t\t\t\t// if not delete the env variable.\n\t\t\t\tif (process.env[key]) {\n\t\t\t\t\tprocess.env[originalKey] = process.env[key];\n\t\t\t\t} else {\n\t\t\t\t\tdelete process.env[originalKey];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\trestoreSnapExportedVariables() {\n\t\tif (!isLinux) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const key in this._snapEnv) {\n\t\t\tprocess.env[key] = this._snapEnv[key];\n\t\t\tdelete this._snapEnv[key];\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,eAAe;AACxB,SAAS,6BAA6B;AACtC,SAAS,qBAAqB,iCAAiC;AAC/D,SAAS,gCAAgC;AACzC,SAAS,8BAA8B;AAEhC,MAAM,0BAA0B,uBAAqE,mBAAmB;AA0BxH,MAAM,+BAA+B,yBAA4D;AAAA,EAvCxG,OAuCwG;AAAA;AAAA;AAAA,EAE/F,WAAmC,CAAC;AAAA,EAG5C,IAAI,aAAqB;AAAE,WAAO,KAAK,KAAK,cAAc,SAAS;AAAA,EAAG;AAAA,EAGtE,IAAI,gBAAwB;AAAE,WAAO,sBAAsB,KAAK,cAAc,QAAQ,KAAK,eAAe,OAAO;AAAA,EAAG;AAAA,EAGpH,IAAI,eAAuB;AAAE,WAAO,KAAK,KAAK,cAAc,WAAW;AAAA,EAAG;AAAA,EAG1E,IAAI,iBAA0B;AAAE,WAAO,CAAC,CAAC,KAAK,KAAK,iBAAiB;AAAA,EAAG;AAAA,EAGvE,IAAI,sBAA+B;AAAE,WAAO,CAAC,CAAC,KAAK,KAAK,YAAY;AAAA,EAAG;AAAA,EAGvE,IAAI,gBAAoC;AAAE,WAAO,QAAQ,IAAI,wBAAwB,KAAK;AAAA,EAAW;AAAA,EAGrG,IAAI,eAAwB;AAAE,WAAO,CAAC,CAAC,KAAK;AAAA,EAAe;AAAA,EAE3D,6BAA6B;AAC5B,QAAI,CAAC,SAAS;AACb;AAAA,IACD;AACA,eAAW,OAAO,QAAQ,KAAK;AAC9B,UAAI,IAAI,SAAS,mBAAmB,GAAG;AACtC,cAAM,cAAc,IAAI,MAAM,GAAG,GAAG;AACpC,YAAI,KAAK,SAAS,WAAW,GAAG;AAC/B;AAAA,QACD;AAEA,YAAI,QAAQ,IAAI,WAAW,GAAG;AAC7B,eAAK,SAAS,WAAW,IAAI,QAAQ,IAAI,WAAW;AAAA,QACrD;AAGA,YAAI,QAAQ,IAAI,GAAG,GAAG;AACrB,kBAAQ,IAAI,WAAW,IAAI,QAAQ,IAAI,GAAG;AAAA,QAC3C,OAAO;AACN,iBAAO,QAAQ,IAAI,WAAW;AAAA,QAC/B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,+BAA+B;AAC9B,QAAI,CAAC,SAAS;AACb;AAAA,IACD;AACA,eAAW,OAAO,KAAK,UAAU;AAChC,cAAQ,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG;AACpC,aAAO,KAAK,SAAS,GAAG;AAAA,IACzB;AAAA,EACD;AACD;AAtDK;AAAA,EADH;AAAA,GAJW,uBAKR;AAGA;AAAA,EADH;AAAA,GAPW,uBAQR;AAGA;AAAA,EADH;AAAA,GAVW,uBAWR;AAGA;AAAA,EADH;AAAA,GAbW,uBAcR;AAGA;AAAA,EADH;AAAA,GAhBW,uBAiBR;AAGA;AAAA,EADH;AAAA,GAnBW,uBAoBR;AAGA;AAAA,EADH;AAAA,GAtBW,uBAuBR;",
  "names": []
}
