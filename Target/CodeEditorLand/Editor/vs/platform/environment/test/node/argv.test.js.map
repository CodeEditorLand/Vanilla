{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/environment/test/node/argv.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { formatOptions, Option, OptionDescriptions, Subcommand, parseArgs, ErrorReporter } from '../../node/argv.js';\nimport { addArg } from '../../node/argvHelper.js';\n\nfunction o(description: string, type: 'boolean' | 'string' | 'string[]' = 'string'): Option<any> {\n\treturn {\n\t\tdescription, type\n\t};\n}\nfunction c(description: string, options: OptionDescriptions<any>): Subcommand<any> {\n\treturn {\n\t\tdescription, type: 'subcommand', options\n\t};\n}\n\nsuite('formatOptions', () => {\n\n\ttest('Text should display small columns correctly', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'add': o('bar')\n\t\t\t}, 80),\n\t\t\t['  --add        bar']\n\t\t);\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'add': o('bar'),\n\t\t\t\t'wait': o('ba'),\n\t\t\t\t'trace': o('b')\n\t\t\t}, 80),\n\t\t\t[\n\t\t\t\t'  --add        bar',\n\t\t\t\t'  --wait       ba',\n\t\t\t\t'  --trace      b'\n\t\t\t]);\n\t});\n\n\ttest('Text should wrap', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'add': o((<any>'bar ').repeat(9))\n\t\t\t}, 40),\n\t\t\t[\n\t\t\t\t'  --add        bar bar bar bar bar bar',\n\t\t\t\t'               bar bar bar'\n\t\t\t]);\n\t});\n\n\ttest('Text should revert to the condensed view when the terminal is too narrow', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'add': o((<any>'bar ').repeat(9))\n\t\t\t}, 30),\n\t\t\t[\n\t\t\t\t'  --add',\n\t\t\t\t'      bar bar bar bar bar bar bar bar bar '\n\t\t\t]);\n\t});\n\n\ttest('addArg', () => {\n\t\tassert.deepStrictEqual(addArg([], 'foo'), ['foo']);\n\t\tassert.deepStrictEqual(addArg([], 'foo', 'bar'), ['foo', 'bar']);\n\t\tassert.deepStrictEqual(addArg(['foo'], 'bar'), ['foo', 'bar']);\n\t\tassert.deepStrictEqual(addArg(['--wait'], 'bar'), ['--wait', 'bar']);\n\t\tassert.deepStrictEqual(addArg(['--wait', '--', '--foo'], 'bar'), ['--wait', 'bar', '--', '--foo']);\n\t\tassert.deepStrictEqual(addArg(['--', '--foo'], 'bar'), ['bar', '--', '--foo']);\n\t});\n\n\ttest('subcommands', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'testcmd': c('A test command', { add: o('A test command option') })\n\t\t\t}, 30),\n\t\t\t[\n\t\t\t\t'  --testcmd',\n\t\t\t\t'      A test command'\n\t\t\t]);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n\nsuite('parseArgs', () => {\n\tfunction newErrorReporter(result: string[] = [], command = ''): ErrorReporter & { result: string[] } {\n\t\tconst commandPrefix = command ? command + '-' : '';\n\t\treturn {\n\t\t\tonDeprecatedOption: (deprecatedId) => result.push(`${commandPrefix}onDeprecatedOption ${deprecatedId}`),\n\t\t\tonUnknownOption: (id) => result.push(`${commandPrefix}onUnknownOption ${id}`),\n\t\t\tonEmptyValue: (id) => result.push(`${commandPrefix}onEmptyValue ${id}`),\n\t\t\tonMultipleValues: (id, usedValue) => result.push(`${commandPrefix}onMultipleValues ${id} ${usedValue}`),\n\t\t\tgetSubcommandReporter: (c) => newErrorReporter(result, commandPrefix + c),\n\t\t\tresult\n\t\t};\n\t}\n\n\tfunction assertParse<T>(options: OptionDescriptions<T>, input: string[], expected: T, expectedErrors: string[]) {\n\t\tconst errorReporter = newErrorReporter();\n\t\tassert.deepStrictEqual(parseArgs(input, options, errorReporter), expected);\n\t\tassert.deepStrictEqual(errorReporter.result, expectedErrors);\n\t}\n\n\ttest('subcommands', () => {\n\n\t\tinterface TestArgs1 {\n\t\t\ttestcmd?: {\n\t\t\t\ttestArg?: string;\n\t\t\t\t_: string[];\n\t\t\t};\n\t\t\t_: string[];\n\t\t}\n\n\t\tconst options1 = {\n\t\t\t'testcmd': c('A test command', {\n\t\t\t\ttestArg: o('A test command option'),\n\t\t\t\t_: { type: 'string[]' }\n\t\t\t}),\n\t\t\t_: { type: 'string[]' }\n\t\t} as OptionDescriptions<TestArgs1>;\n\t\tassertParse(\n\t\t\toptions1,\n\t\t\t['testcmd', '--testArg=foo'],\n\t\t\t{ testcmd: { testArg: 'foo', '_': [] }, '_': [] },\n\t\t\t[]\n\t\t);\n\t\tassertParse(\n\t\t\toptions1,\n\t\t\t['testcmd', '--testArg=foo', '--testX'],\n\t\t\t{ testcmd: { testArg: 'foo', '_': [] }, '_': [] },\n\t\t\t['testcmd-onUnknownOption testX']\n\t\t);\n\n\t\tinterface TestArgs2 {\n\t\t\ttestcmd?: {\n\t\t\t\ttestArg?: string;\n\t\t\t\ttestX?: boolean;\n\t\t\t\t_: string[];\n\t\t\t};\n\t\t\ttestX?: boolean;\n\t\t\t_: string[];\n\t\t}\n\n\t\tconst options2 = {\n\t\t\t'testcmd': c('A test command', {\n\t\t\t\ttestArg: o('A test command option')\n\t\t\t}),\n\t\t\ttestX: { type: 'boolean', global: true, description: '' },\n\t\t\t_: { type: 'string[]' }\n\t\t} as OptionDescriptions<TestArgs2>;\n\t\tassertParse(\n\t\t\toptions2,\n\t\t\t['testcmd', '--testArg=foo', '--testX'],\n\t\t\t{ testcmd: { testArg: 'foo', testX: true, '_': [] }, '_': [] },\n\t\t\t[]\n\t\t);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["c"]
}
