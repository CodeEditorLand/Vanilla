import*as r from"fs";import{tmpdir as p}from"os";import{Queue as m}from"../../../../vs/base/common/async.js";import{randomPath as u}from"../../../../vs/base/common/extpath.js";import{resolveTerminalEncoding as l}from"../../../../vs/base/node/terminalEncoding.js";function T(){try{return!process.stdin.isTTY}catch{}return!1}function w(e){return new Promise(n=>{const o=()=>n(!0);setTimeout(()=>{process.stdin.removeListener("data",o),n(!1)},e),process.stdin.once("data",o)})}function x(){return u(p(),"code-stdin",3)}async function b(e,n,o){let[t,s]=await Promise.all([l(n),import("@vscode/iconv-lite-umd"),r.promises.appendFile(e,"")]);s.encodingExists(t)||(console.log(`Unsupported terminal encoding: ${t}, falling back to UTF-8.`),t="utf8");const d=new m,a=s.getDecoder(t);process.stdin.on("data",i=>{const c=a.write(i);d.queue(()=>r.promises.appendFile(e,c))}),process.stdin.on("end",()=>{const i=a.end();d.queue(async()=>{try{typeof i=="string"&&await r.promises.appendFile(e,i)}finally{o?.()}})})}export{x as getStdinFilePath,T as hasStdinWithoutTty,b as readFromStdin,w as stdinDataListener};
