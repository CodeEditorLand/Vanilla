{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/environment/node/argvHelper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from \"assert\";\nimport type { IProcessEnvironment } from \"../../../base/common/platform.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { NativeParsedArgs } from \"../common/argv.js\";\nimport {\n\ttype ErrorReporter,\n\tNATIVE_CLI_COMMANDS,\n\tOPTIONS,\n\tparseArgs,\n} from \"./argv.js\";\n\nfunction parseAndValidate(\n\tcmdLineArgs: string[],\n\treportWarnings: boolean,\n): NativeParsedArgs {\n\tconst onMultipleValues = (id: string, val: string) => {\n\t\tconsole.warn(\n\t\t\tlocalize(\n\t\t\t\t\"multipleValues\",\n\t\t\t\t\"Option '{0}' is defined more than once. Using value '{1}'.\",\n\t\t\t\tid,\n\t\t\t\tval,\n\t\t\t),\n\t\t);\n\t};\n\tconst onEmptyValue = (id: string) => {\n\t\tconsole.warn(\n\t\t\tlocalize(\n\t\t\t\t\"emptyValue\",\n\t\t\t\t\"Option '{0}' requires a non empty value. Ignoring the option.\",\n\t\t\t\tid,\n\t\t\t),\n\t\t);\n\t};\n\tconst onDeprecatedOption = (deprecatedOption: string, message: string) => {\n\t\tconsole.warn(\n\t\t\tlocalize(\n\t\t\t\t\"deprecatedArgument\",\n\t\t\t\t\"Option '{0}' is deprecated: {1}\",\n\t\t\t\tdeprecatedOption,\n\t\t\t\tmessage,\n\t\t\t),\n\t\t);\n\t};\n\tconst getSubcommandReporter = (command: string) => ({\n\t\tonUnknownOption: (id: string) => {\n\t\t\tif (!(NATIVE_CLI_COMMANDS as readonly string[]).includes(command)) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"unknownSubCommandOption\",\n\t\t\t\t\t\t\"Warning: '{0}' is not in the list of known options for subcommand '{1}'\",\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tcommand,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tonMultipleValues,\n\t\tonEmptyValue,\n\t\tonDeprecatedOption,\n\t\tgetSubcommandReporter: (\n\t\t\tNATIVE_CLI_COMMANDS as readonly string[]\n\t\t).includes(command)\n\t\t\t? getSubcommandReporter\n\t\t\t: undefined,\n\t});\n\tconst errorReporter: ErrorReporter = {\n\t\tonUnknownOption: (id) => {\n\t\t\tconsole.warn(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"unknownOption\",\n\t\t\t\t\t\"Warning: '{0}' is not in the list of known options, but still passed to Electron/Chromium.\",\n\t\t\t\t\tid,\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t\tonMultipleValues,\n\t\tonEmptyValue,\n\t\tonDeprecatedOption,\n\t\tgetSubcommandReporter,\n\t};\n\n\tconst args = parseArgs(\n\t\tcmdLineArgs,\n\t\tOPTIONS,\n\t\treportWarnings ? errorReporter : undefined,\n\t);\n\tif (args.goto) {\n\t\targs._.forEach((arg) =>\n\t\t\tassert(\n\t\t\t\t/^(\\w:)?[^:]+(:\\d*){0,2}:?$/.test(arg),\n\t\t\t\tlocalize(\n\t\t\t\t\t\"gotoValidation\",\n\t\t\t\t\t\"Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`.\",\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn args;\n}\n\nfunction stripAppPath(argv: string[]): string[] | undefined {\n\tconst index = argv.findIndex((a) => !/^-/.test(a));\n\n\tif (index > -1) {\n\t\treturn [...argv.slice(0, index), ...argv.slice(index + 1)];\n\t}\n\treturn undefined;\n}\n\n/**\n * Use this to parse raw code process.argv such as: `Electron . --verbose --wait`\n */\nexport function parseMainProcessArgv(processArgv: string[]): NativeParsedArgs {\n\tlet [, ...args] = processArgv;\n\n\t// If dev, remove the first non-option argument: it's the app location\n\tif (process.env[\"VSCODE_DEV\"]) {\n\t\targs = stripAppPath(args) || [];\n\t}\n\n\t// If called from CLI, don't report warnings as they are already reported.\n\tconst reportWarnings = !isLaunchedFromCli(process.env);\n\treturn parseAndValidate(args, reportWarnings);\n}\n\n/**\n * Use this to parse raw code CLI process.argv such as: `Electron cli.js . --verbose --wait`\n */\nexport function parseCLIProcessArgv(processArgv: string[]): NativeParsedArgs {\n\tlet [, , ...args] = processArgv; // remove the first non-option argument: it's always the app location\n\n\t// If dev, remove the first non-option argument: it's the app location\n\tif (process.env[\"VSCODE_DEV\"]) {\n\t\targs = stripAppPath(args) || [];\n\t}\n\n\treturn parseAndValidate(args, true);\n}\n\nexport function addArg(argv: string[], ...args: string[]): string[] {\n\tconst endOfArgsMarkerIndex = argv.indexOf(\"--\");\n\tif (endOfArgsMarkerIndex === -1) {\n\t\targv.push(...args);\n\t} else {\n\t\t// if the we have an argument \"--\" (end of argument marker)\n\t\t// we cannot add arguments at the end. rather, we add\n\t\t// arguments before the \"--\" marker.\n\t\targv.splice(endOfArgsMarkerIndex, 0, ...args);\n\t}\n\n\treturn argv;\n}\n\nexport function isLaunchedFromCli(env: IProcessEnvironment): boolean {\n\treturn env[\"VSCODE_CLI\"] === \"1\";\n}\n"],
  "mappings": "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",
  "names": []
}
