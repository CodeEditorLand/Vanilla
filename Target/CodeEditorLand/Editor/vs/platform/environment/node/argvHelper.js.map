{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/environment/node/argvHelper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IProcessEnvironment } from '../../../base/common/platform.js';\nimport { localize } from '../../../nls.js';\nimport { NativeParsedArgs } from '../common/argv.js';\nimport { ErrorReporter, NATIVE_CLI_COMMANDS, OPTIONS, parseArgs } from './argv.js';\n\nfunction parseAndValidate(cmdLineArgs: string[], reportWarnings: boolean): NativeParsedArgs {\n\tconst onMultipleValues = (id: string, val: string) => {\n\t\tconsole.warn(localize('multipleValues', \"Option '{0}' is defined more than once. Using value '{1}'.\", id, val));\n\t};\n\tconst onEmptyValue = (id: string) => {\n\t\tconsole.warn(localize('emptyValue', \"Option '{0}' requires a non empty value. Ignoring the option.\", id));\n\t};\n\tconst onDeprecatedOption = (deprecatedOption: string, message: string) => {\n\t\tconsole.warn(localize('deprecatedArgument', \"Option '{0}' is deprecated: {1}\", deprecatedOption, message));\n\t};\n\tconst getSubcommandReporter = (command: string) => ({\n\t\tonUnknownOption: (id: string) => {\n\t\t\tif (!(NATIVE_CLI_COMMANDS as readonly string[]).includes(command)) {\n\t\t\t\tconsole.warn(localize('unknownSubCommandOption', \"Warning: '{0}' is not in the list of known options for subcommand '{1}'\", id, command));\n\t\t\t}\n\t\t},\n\t\tonMultipleValues,\n\t\tonEmptyValue,\n\t\tonDeprecatedOption,\n\t\tgetSubcommandReporter: (NATIVE_CLI_COMMANDS as readonly string[]).includes(command) ? getSubcommandReporter : undefined\n\t});\n\tconst errorReporter: ErrorReporter = {\n\t\tonUnknownOption: (id) => {\n\t\t\tconsole.warn(localize('unknownOption', \"Warning: '{0}' is not in the list of known options, but still passed to Electron/Chromium.\", id));\n\t\t},\n\t\tonMultipleValues,\n\t\tonEmptyValue,\n\t\tonDeprecatedOption,\n\t\tgetSubcommandReporter\n\t};\n\n\tconst args = parseArgs(cmdLineArgs, OPTIONS, reportWarnings ? errorReporter : undefined);\n\tif (args.goto) {\n\t\targs._.forEach(arg => assert(/^(\\w:)?[^:]+(:\\d*){0,2}:?$/.test(arg), localize('gotoValidation', \"Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`.\")));\n\t}\n\n\treturn args;\n}\n\nfunction stripAppPath(argv: string[]): string[] | undefined {\n\tconst index = argv.findIndex(a => !/^-/.test(a));\n\n\tif (index > -1) {\n\t\treturn [...argv.slice(0, index), ...argv.slice(index + 1)];\n\t}\n\treturn undefined;\n}\n\n/**\n * Use this to parse raw code process.argv such as: `Electron . --verbose --wait`\n */\nexport function parseMainProcessArgv(processArgv: string[]): NativeParsedArgs {\n\tlet [, ...args] = processArgv;\n\n\t// If dev, remove the first non-option argument: it's the app location\n\tif (process.env['VSCODE_DEV']) {\n\t\targs = stripAppPath(args) || [];\n\t}\n\n\t// If called from CLI, don't report warnings as they are already reported.\n\tconst reportWarnings = !isLaunchedFromCli(process.env);\n\treturn parseAndValidate(args, reportWarnings);\n}\n\n/**\n * Use this to parse raw code CLI process.argv such as: `Electron cli.js . --verbose --wait`\n */\nexport function parseCLIProcessArgv(processArgv: string[]): NativeParsedArgs {\n\tlet [, , ...args] = processArgv; // remove the first non-option argument: it's always the app location\n\n\t// If dev, remove the first non-option argument: it's the app location\n\tif (process.env['VSCODE_DEV']) {\n\t\targs = stripAppPath(args) || [];\n\t}\n\n\treturn parseAndValidate(args, true);\n}\n\nexport function addArg(argv: string[], ...args: string[]): string[] {\n\tconst endOfArgsMarkerIndex = argv.indexOf('--');\n\tif (endOfArgsMarkerIndex === -1) {\n\t\targv.push(...args);\n\t} else {\n\t\t// if the we have an argument \"--\" (end of argument marker)\n\t\t// we cannot add arguments at the end. rather, we add\n\t\t// arguments before the \"--\" marker.\n\t\targv.splice(endOfArgsMarkerIndex, 0, ...args);\n\t}\n\n\treturn argv;\n}\n\nexport function isLaunchedFromCli(env: IProcessEnvironment): boolean {\n\treturn env['VSCODE_CLI'] === '1';\n}\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,2BAA2B;AACpC,SAAS,gBAAgB;AACzB,SAAS,wBAAwB;AACjC,SAAS,eAAe,qBAAqB,SAAS,iBAAiB;AAEvE,SAAS,iBAAiB,aAAuB,gBAA2C;AAC3F,QAAM,mBAAmB,wBAAC,IAAY,QAAgB;AACrD,YAAQ,KAAK,SAAS,kBAAkB,8DAA8D,IAAI,GAAG,CAAC;AAAA,EAC/G,GAFyB;AAGzB,QAAM,eAAe,wBAAC,OAAe;AACpC,YAAQ,KAAK,SAAS,cAAc,iEAAiE,EAAE,CAAC;AAAA,EACzG,GAFqB;AAGrB,QAAM,qBAAqB,wBAAC,kBAA0B,YAAoB;AACzE,YAAQ,KAAK,SAAS,sBAAsB,mCAAmC,kBAAkB,OAAO,CAAC;AAAA,EAC1G,GAF2B;AAG3B,QAAM,wBAAwB,wBAAC,aAAqB;AAAA,IACnD,iBAAiB,wBAAC,OAAe;AAChC,UAAI,CAAE,oBAA0C,SAAS,OAAO,GAAG;AAClE,gBAAQ,KAAK,SAAS,2BAA2B,2EAA2E,IAAI,OAAO,CAAC;AAAA,MACzI;AAAA,IACD,GAJiB;AAAA,IAKjB;AAAA,IACA;AAAA,IACA;AAAA,IACA,uBAAwB,oBAA0C,SAAS,OAAO,IAAI,wBAAwB;AAAA,EAC/G,IAV8B;AAW9B,QAAM,gBAA+B;AAAA,IACpC,iBAAiB,wBAAC,OAAO;AACxB,cAAQ,KAAK,SAAS,iBAAiB,8FAA8F,EAAE,CAAC;AAAA,IACzI,GAFiB;AAAA,IAGjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,QAAM,OAAO,UAAU,aAAa,SAAS,iBAAiB,gBAAgB,MAAS;AACvF,MAAI,KAAK,MAAM;AACd,SAAK,EAAE,QAAQ,SAAO,OAAO,6BAA6B,KAAK,GAAG,GAAG,SAAS,kBAAkB,kFAAkF,CAAC,CAAC;AAAA,EACrL;AAEA,SAAO;AACR;AArCS;AAuCT,SAAS,aAAa,MAAsC;AAC3D,QAAM,QAAQ,KAAK,UAAU,OAAK,CAAC,KAAK,KAAK,CAAC,CAAC;AAE/C,MAAI,QAAQ,IAAI;AACf,WAAO,CAAC,GAAG,KAAK,MAAM,GAAG,KAAK,GAAG,GAAG,KAAK,MAAM,QAAQ,CAAC,CAAC;AAAA,EAC1D;AACA,SAAO;AACR;AAPS;AAYF,SAAS,qBAAqB,aAAyC;AAC7E,MAAI,CAAC,EAAE,GAAG,IAAI,IAAI;AAGlB,MAAI,QAAQ,IAAI,YAAY,GAAG;AAC9B,WAAO,aAAa,IAAI,KAAK,CAAC;AAAA,EAC/B;AAGA,QAAM,iBAAiB,CAAC,kBAAkB,QAAQ,GAAG;AACrD,SAAO,iBAAiB,MAAM,cAAc;AAC7C;AAXgB;AAgBT,SAAS,oBAAoB,aAAyC;AAC5E,MAAI,CAAC,EAAE,EAAE,GAAG,IAAI,IAAI;AAGpB,MAAI,QAAQ,IAAI,YAAY,GAAG;AAC9B,WAAO,aAAa,IAAI,KAAK,CAAC;AAAA,EAC/B;AAEA,SAAO,iBAAiB,MAAM,IAAI;AACnC;AATgB;AAWT,SAAS,OAAO,SAAmB,MAA0B;AACnE,QAAM,uBAAuB,KAAK,QAAQ,IAAI;AAC9C,MAAI,yBAAyB,IAAI;AAChC,SAAK,KAAK,GAAG,IAAI;AAAA,EAClB,OAAO;AAIN,SAAK,OAAO,sBAAsB,GAAG,GAAG,IAAI;AAAA,EAC7C;AAEA,SAAO;AACR;AAZgB;AAcT,SAAS,kBAAkB,KAAmC;AACpE,SAAO,IAAI,YAAY,MAAM;AAC9B;AAFgB;",
  "names": []
}
