import u from"assert";import"../../../base/common/platform.js";import{localize as g}from"../../../nls.js";import"../common/argv.js";import{NATIVE_CLI_COMMANDS as p,OPTIONS as m,parseArgs as f}from"./argv.js";function c(n,e){const o=(r,d)=>{},i=r=>{},s=(r,d)=>{},a=r=>({onUnknownOption:d=>{p.includes(r)},onMultipleValues:o,onEmptyValue:i,onDeprecatedOption:s,getSubcommandReporter:p.includes(r)?a:void 0}),t=f(n,m,e?{onUnknownOption:r=>{},onMultipleValues:o,onEmptyValue:i,onDeprecatedOption:s,getSubcommandReporter:a}:void 0);return t.goto&&t._.forEach(r=>u(/^(\w:)?[^:]+(:\d*){0,2}:?$/.test(r),g("gotoValidation","Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`."))),t}function l(n){const e=n.findIndex(o=>!/^-/.test(o));if(e>-1)return[...n.slice(0,e),...n.slice(e+1)]}function b(n){let[,...e]=n;process.env.VSCODE_DEV&&(e=l(e)||[]);const o=!O(process.env);return c(e,o)}function x(n){let[,,...e]=n;return process.env.VSCODE_DEV&&(e=l(e)||[]),c(e,!0)}function N(n,...e){const o=n.indexOf("--");return o===-1?n.push(...e):n.splice(o,0,...e),n}function O(n){return n.VSCODE_CLI==="1"}export{N as addArg,O as isLaunchedFromCli,x as parseCLIProcessArgv,b as parseMainProcessArgv};
