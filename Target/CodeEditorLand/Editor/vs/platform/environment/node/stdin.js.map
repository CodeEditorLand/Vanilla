{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/environment/node/stdin.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from \"fs\";\nimport { tmpdir } from \"os\";\nimport { Queue } from \"../../../base/common/async.js\";\nimport { randomPath } from \"../../../base/common/extpath.js\";\nimport { resolveTerminalEncoding } from \"../../../base/node/terminalEncoding.js\";\n\nexport function hasStdinWithoutTty() {\n\ttry {\n\t\treturn !process.stdin.isTTY; // Via https://twitter.com/MylesBorins/status/782009479382626304\n\t} catch (error) {\n\t\t// Windows workaround for https://github.com/nodejs/node/issues/11656\n\t}\n\treturn false;\n}\n\nexport function stdinDataListener(durationinMs: number): Promise<boolean> {\n\treturn new Promise((resolve) => {\n\t\tconst dataListener = () => resolve(true);\n\n\t\t// wait for 1s maximum...\n\t\tsetTimeout(() => {\n\t\t\tprocess.stdin.removeListener(\"data\", dataListener);\n\n\t\t\tresolve(false);\n\t\t}, durationinMs);\n\n\t\t// ...but finish early if we detect data\n\t\tprocess.stdin.once(\"data\", dataListener);\n\t});\n}\n\nexport function getStdinFilePath(): string {\n\treturn randomPath(tmpdir(), \"code-stdin\", 3);\n}\n\nexport async function readFromStdin(\n\ttargetPath: string,\n\tverbose: boolean,\n\tonEnd?: Function,\n): Promise<void> {\n\tlet [encoding, iconv] = await Promise.all([\n\t\tresolveTerminalEncoding(verbose), // respect terminal encoding when piping into file\n\t\timport(\"@vscode/iconv-lite-umd\"), // lazy load encoding module for usage\n\t\tfs.promises.appendFile(targetPath, \"\"), // make sure file exists right away (https://github.com/microsoft/vscode/issues/155341)\n\t]);\n\n\tif (!iconv.encodingExists(encoding)) {\n\t\tconsole.log(\n\t\t\t`Unsupported terminal encoding: ${encoding}, falling back to UTF-8.`,\n\t\t);\n\t\tencoding = \"utf8\";\n\t}\n\n\t// Use a `Queue` to be able to use `appendFile`\n\t// which helps file watchers to be aware of the\n\t// changes because each append closes the underlying\n\t// file descriptor.\n\t// (https://github.com/microsoft/vscode/issues/148952)\n\n\tconst appendFileQueue = new Queue();\n\n\tconst decoder = iconv.getDecoder(encoding);\n\n\tprocess.stdin.on(\"data\", (chunk) => {\n\t\tconst chunkStr = decoder.write(chunk);\n\t\tappendFileQueue.queue(() =>\n\t\t\tfs.promises.appendFile(targetPath, chunkStr),\n\t\t);\n\t});\n\n\tprocess.stdin.on(\"end\", () => {\n\t\tconst end = decoder.end();\n\n\t\tappendFileQueue.queue(async () => {\n\t\t\ttry {\n\t\t\t\tif (typeof end === \"string\") {\n\t\t\t\t\tawait fs.promises.appendFile(targetPath, end);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tonEnd?.();\n\t\t\t}\n\t\t});\n\t});\n}\n"],
  "mappings": ";;AAKA,YAAY,QAAQ;AACpB,SAAS,cAAc;AACvB,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,+BAA+B;AAEjC,SAAS,qBAAqB;AACpC,MAAI;AACH,WAAO,CAAC,QAAQ,MAAM;AAAA,EACvB,SAAS,OAAO;AAAA,EAEhB;AACA,SAAO;AACR;AAPgB;AAST,SAAS,kBAAkB,cAAwC;AACzE,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC/B,UAAM,eAAe,6BAAM,QAAQ,IAAI,GAAlB;AAGrB,eAAW,MAAM;AAChB,cAAQ,MAAM,eAAe,QAAQ,YAAY;AAEjD,cAAQ,KAAK;AAAA,IACd,GAAG,YAAY;AAGf,YAAQ,MAAM,KAAK,QAAQ,YAAY;AAAA,EACxC,CAAC;AACF;AAdgB;AAgBT,SAAS,mBAA2B;AAC1C,SAAO,WAAW,OAAO,GAAG,cAAc,CAAC;AAC5C;AAFgB;AAIhB,eAAsB,cACrB,YACA,SACA,OACgB;AAChB,MAAI,CAAC,UAAU,KAAK,IAAI,MAAM,QAAQ,IAAI;AAAA,IACzC,wBAAwB,OAAO;AAAA;AAAA,IAC/B,OAAO,wBAAwB;AAAA;AAAA,IAC/B,GAAG,SAAS,WAAW,YAAY,EAAE;AAAA;AAAA,EACtC,CAAC;AAED,MAAI,CAAC,MAAM,eAAe,QAAQ,GAAG;AACpC,YAAQ;AAAA,MACP,kCAAkC,QAAQ;AAAA,IAC3C;AACA,eAAW;AAAA,EACZ;AAQA,QAAM,kBAAkB,IAAI,MAAM;AAElC,QAAM,UAAU,MAAM,WAAW,QAAQ;AAEzC,UAAQ,MAAM,GAAG,QAAQ,CAAC,UAAU;AACnC,UAAM,WAAW,QAAQ,MAAM,KAAK;AACpC,oBAAgB;AAAA,MAAM,MACrB,GAAG,SAAS,WAAW,YAAY,QAAQ;AAAA,IAC5C;AAAA,EACD,CAAC;AAED,UAAQ,MAAM,GAAG,OAAO,MAAM;AAC7B,UAAM,MAAM,QAAQ,IAAI;AAExB,oBAAgB,MAAM,YAAY;AACjC,UAAI;AACH,YAAI,OAAO,QAAQ,UAAU;AAC5B,gBAAM,GAAG,SAAS,WAAW,YAAY,GAAG;AAAA,QAC7C;AAAA,MACD,UAAE;AACD,gBAAQ;AAAA,MACT;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF;AAhDsB;",
  "names": []
}
