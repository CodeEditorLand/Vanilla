{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/environment/node/userDataPath.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/// <reference path=\"../../../../typings/require.d.ts\" />\n\n//@ts-check\n'use strict';\n\n// ESM-uncomment-begin\nimport * as os from 'os';\nimport * as path from 'path';\n\n/** @type any */\nconst module = { exports: {} };\n// ESM-uncomment-end\n\n(function () {\n\t// ESM-comment-begin\n\t// const isESM = false;\n\t// ESM-comment-end\n\t// ESM-uncomment-begin\n\tconst isESM = true;\n\t// ESM-uncomment-end\n\n\t/**\n\t * @import { NativeParsedArgs } from '../../environment/common/argv'\n\t */\n\n\t/**\n\t * @param {typeof import('path')} path\n\t * @param {typeof import('os')} os\n\t * @param {string} cwd\n\t */\n\tfunction factory(path, os, cwd) {\n\n\t\t/**\n\t\t * @param {NativeParsedArgs} cliArgs\n\t\t * @param {string} productName\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tfunction getUserDataPath(cliArgs, productName) {\n\t\t\tconst userDataPath = doGetUserDataPath(cliArgs, productName);\n\t\t\tconst pathsToResolve = [userDataPath];\n\n\t\t\t// If the user-data-path is not absolute, make\n\t\t\t// sure to resolve it against the passed in\n\t\t\t// current working directory. We cannot use the\n\t\t\t// node.js `path.resolve()` logic because it will\n\t\t\t// not pick up our `VSCODE_CWD` environment variable\n\t\t\t// (https://github.com/microsoft/vscode/issues/120269)\n\t\t\tif (!path.isAbsolute(userDataPath)) {\n\t\t\t\tpathsToResolve.unshift(cwd);\n\t\t\t}\n\n\t\t\treturn path.resolve(...pathsToResolve);\n\t\t}\n\n\t\t/**\n\t\t * @param {NativeParsedArgs} cliArgs\n\t\t * @param {string} productName\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tfunction doGetUserDataPath(cliArgs, productName) {\n\n\t\t\t// 0. Running out of sources has a fixed productName\n\t\t\tif (process.env['VSCODE_DEV']) {\n\t\t\t\tproductName = 'code-oss-dev';\n\t\t\t}\n\n\t\t\t// 1. Support portable mode\n\t\t\tconst portablePath = process.env['VSCODE_PORTABLE'];\n\t\t\tif (portablePath) {\n\t\t\t\treturn path.join(portablePath, 'user-data');\n\t\t\t}\n\n\t\t\t// 2. Support global VSCODE_APPDATA environment variable\n\t\t\tlet appDataPath = process.env['VSCODE_APPDATA'];\n\t\t\tif (appDataPath) {\n\t\t\t\treturn path.join(appDataPath, productName);\n\t\t\t}\n\n\t\t\t// With Electron>=13 --user-data-dir switch will be propagated to\n\t\t\t// all processes https://github.com/electron/electron/blob/1897b14af36a02e9aa7e4d814159303441548251/shell/browser/electron_browser_client.cc#L546-L553\n\t\t\t// Check VSCODE_PORTABLE and VSCODE_APPDATA before this case to get correct values.\n\t\t\t// 3. Support explicit --user-data-dir\n\t\t\tconst cliPath = cliArgs['user-data-dir'];\n\t\t\tif (cliPath) {\n\t\t\t\treturn cliPath;\n\t\t\t}\n\n\t\t\t// 4. Otherwise check per platform\n\t\t\tswitch (process.platform) {\n\t\t\t\tcase 'win32':\n\t\t\t\t\tappDataPath = process.env['APPDATA'];\n\t\t\t\t\tif (!appDataPath) {\n\t\t\t\t\t\tconst userProfile = process.env['USERPROFILE'];\n\t\t\t\t\t\tif (typeof userProfile !== 'string') {\n\t\t\t\t\t\t\tthrow new Error('Windows: Unexpected undefined %USERPROFILE% environment variable');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tappDataPath = path.join(userProfile, 'AppData', 'Roaming');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'darwin':\n\t\t\t\t\tappDataPath = path.join(os.homedir(), 'Library', 'Application Support');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'linux':\n\t\t\t\t\tappDataPath = process.env['XDG_CONFIG_HOME'] || path.join(os.homedir(), '.config');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Platform not supported');\n\t\t\t}\n\n\t\t\treturn path.join(appDataPath, productName);\n\t\t}\n\n\t\treturn {\n\t\t\tgetUserDataPath\n\t\t};\n\t}\n\n\tif (!isESM && typeof define === 'function') {\n\t\tdefine(['path', 'os', 'vs/base/common/process'], function (\n\t\t\t/** @type {typeof import('path')} */ path,\n\t\t\t/** @type {typeof import('os')} */ os,\n\t\t\t/** @type {typeof import(\"../../../base/common/process\")} */ process\n\t\t) {\n\t\t\treturn factory(path, os, process.cwd()); // amd\n\t\t});\n\t} else if (typeof module === 'object' && typeof module.exports === 'object') {\n\t\t// ESM-comment-begin\n\t\t// const path = require('path');\n\t\t// const os = require('os');\n\t\t// ESM-comment-end\n\n\t\tmodule.exports = factory(path, os, process.env['VSCODE_CWD'] || process.cwd()); // commonjs\n\t} else {\n\t\tthrow new Error('Unknown context');\n\t}\n}());\n\n// ESM-uncomment-begin\nexport const getUserDataPath = module.exports.getUserDataPath;\n// ESM-uncomment-end\n"],
  "mappings": ";;AAWA,YAAY,QAAQ;AACpB,YAAY,UAAU;AAGtB,MAAM,SAAS,EAAE,SAAS,CAAC,EAAE;AAAA,CAG5B,WAAY;AAKZ,QAAM,QAAQ;AAYd,WAAS,QAAQA,OAAMC,KAAI,KAAK;AAQ/B,aAASC,iBAAgB,SAAS,aAAa;AAC9C,YAAM,eAAe,kBAAkB,SAAS,WAAW;AAC3D,YAAM,iBAAiB,CAAC,YAAY;AAQpC,UAAI,CAACF,MAAK,WAAW,YAAY,GAAG;AACnC,uBAAe,QAAQ,GAAG;AAAA,MAC3B;AAEA,aAAOA,MAAK,QAAQ,GAAG,cAAc;AAAA,IACtC;AAfS,WAAAE,kBAAA;AAuBT,aAAS,kBAAkB,SAAS,aAAa;AAGhD,UAAI,QAAQ,IAAI,YAAY,GAAG;AAC9B,sBAAc;AAAA,MACf;AAGA,YAAM,eAAe,QAAQ,IAAI,iBAAiB;AAClD,UAAI,cAAc;AACjB,eAAOF,MAAK,KAAK,cAAc,WAAW;AAAA,MAC3C;AAGA,UAAI,cAAc,QAAQ,IAAI,gBAAgB;AAC9C,UAAI,aAAa;AAChB,eAAOA,MAAK,KAAK,aAAa,WAAW;AAAA,MAC1C;AAMA,YAAM,UAAU,QAAQ,eAAe;AACvC,UAAI,SAAS;AACZ,eAAO;AAAA,MACR;AAGA,cAAQ,QAAQ,UAAU;AAAA,QACzB,KAAK;AACJ,wBAAc,QAAQ,IAAI,SAAS;AACnC,cAAI,CAAC,aAAa;AACjB,kBAAM,cAAc,QAAQ,IAAI,aAAa;AAC7C,gBAAI,OAAO,gBAAgB,UAAU;AACpC,oBAAM,IAAI,MAAM,kEAAkE;AAAA,YACnF;AAEA,0BAAcA,MAAK,KAAK,aAAa,WAAW,SAAS;AAAA,UAC1D;AACA;AAAA,QACD,KAAK;AACJ,wBAAcA,MAAK,KAAKC,IAAG,QAAQ,GAAG,WAAW,qBAAqB;AACtE;AAAA,QACD,KAAK;AACJ,wBAAc,QAAQ,IAAI,iBAAiB,KAAKD,MAAK,KAAKC,IAAG,QAAQ,GAAG,SAAS;AACjF;AAAA,QACD;AACC,gBAAM,IAAI,MAAM,wBAAwB;AAAA,MAC1C;AAEA,aAAOD,MAAK,KAAK,aAAa,WAAW;AAAA,IAC1C;AApDS;AAsDT,WAAO;AAAA,MACN,iBAAAE;AAAA,IACD;AAAA,EACD;AAxFS;AA0FT,MAAI,CAAC,SAAS,OAAO,WAAW,YAAY;AAC3C,WAAO,CAAC,QAAQ,MAAM,wBAAwB,GAAG,SACXF,OACFC,KAC0BE,UAC5D;AACD,aAAO,QAAQH,OAAMC,KAAIE,SAAQ,IAAI,CAAC;AAAA,IACvC,CAAC;AAAA,EACF,WAAW,OAAO,WAAW,YAAY,OAAO,OAAO,YAAY,UAAU;AAM5E,WAAO,UAAU,QAAQ,MAAM,IAAI,QAAQ,IAAI,YAAY,KAAK,QAAQ,IAAI,CAAC;AAAA,EAC9E,OAAO;AACN,UAAM,IAAI,MAAM,iBAAiB;AAAA,EAClC;AACD,GAAE;AAGK,MAAM,kBAAkB,OAAO,QAAQ;",
  "names": ["path", "os", "getUserDataPath", "process"]
}
