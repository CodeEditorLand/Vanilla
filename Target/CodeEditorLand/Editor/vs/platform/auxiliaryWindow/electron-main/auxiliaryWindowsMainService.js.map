{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/auxiliaryWindow/electron-main/auxiliaryWindowsMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow, BrowserWindowConstructorOptions, HandlerDetails, WebContents, app } from 'electron';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { validatedIpcMain } from '../../../base/parts/ipc/electron-main/ipcMain.js';\nimport { AuxiliaryWindow, IAuxiliaryWindow } from './auxiliaryWindow.js';\nimport { IAuxiliaryWindowsMainService } from './auxiliaryWindows.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IWindowState, WindowMode, defaultAuxWindowState } from '../../window/electron-main/window.js';\nimport { IDefaultBrowserWindowOptionsOverrides, WindowStateValidator, defaultBrowserWindowOptions, getLastFocused } from '../../windows/electron-main/windows.js';\n\nexport class AuxiliaryWindowsMainService extends Disposable implements IAuxiliaryWindowsMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidMaximizeWindow = this._register(new Emitter<IAuxiliaryWindow>());\n\treadonly onDidMaximizeWindow = this._onDidMaximizeWindow.event;\n\n\tprivate readonly _onDidUnmaximizeWindow = this._register(new Emitter<IAuxiliaryWindow>());\n\treadonly onDidUnmaximizeWindow = this._onDidUnmaximizeWindow.event;\n\n\tprivate readonly _onDidChangeFullScreen = this._register(new Emitter<{ window: IAuxiliaryWindow; fullscreen: boolean }>());\n\treadonly onDidChangeFullScreen = this._onDidChangeFullScreen.event;\n\n\tprivate readonly _onDidTriggerSystemContextMenu = this._register(new Emitter<{ window: IAuxiliaryWindow; x: number; y: number }>());\n\treadonly onDidTriggerSystemContextMenu = this._onDidTriggerSystemContextMenu.event;\n\n\tprivate readonly windows = new Map<number /* webContents ID */, AuxiliaryWindow>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// We have to ensure that an auxiliary window gets to know its\n\t\t// containing `BrowserWindow` so that it can apply listeners to it\n\t\t// Unfortunately we cannot rely on static `BrowserWindow` methods\n\t\t// because we might call the methods too early before the window\n\t\t// is created.\n\n\t\tapp.on('browser-window-created', (_event, browserWindow) => {\n\n\t\t\t// This is an auxiliary window, try to claim it\n\t\t\tconst auxiliaryWindow = this.getWindowByWebContents(browserWindow.webContents);\n\t\t\tif (auxiliaryWindow) {\n\t\t\t\tthis.logService.trace('[aux window] app.on(\"browser-window-created\"): Trying to claim auxiliary window');\n\n\t\t\t\tauxiliaryWindow.tryClaimWindow();\n\t\t\t}\n\n\t\t\t// This is a main window, listen to child windows getting created to claim it\n\t\t\telse {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tdisposables.add(Event.fromNodeEventEmitter(browserWindow.webContents, 'did-create-window', (browserWindow, details) => ({ browserWindow, details }))(({ browserWindow, details }) => {\n\t\t\t\t\tconst auxiliaryWindow = this.getWindowByWebContents(browserWindow.webContents);\n\t\t\t\t\tif (auxiliaryWindow) {\n\t\t\t\t\t\tthis.logService.trace('[aux window] window.on(\"did-create-window\"): Trying to claim auxiliary window');\n\n\t\t\t\t\t\tauxiliaryWindow.tryClaimWindow(details.options);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tdisposables.add(Event.fromNodeEventEmitter(browserWindow, 'closed')(() => disposables.dispose()));\n\t\t\t}\n\t\t});\n\n\t\tvalidatedIpcMain.handle('vscode:registerAuxiliaryWindow', async (event, mainWindowId: number) => {\n\t\t\tconst auxiliaryWindow = this.getWindowByWebContents(event.sender);\n\t\t\tif (auxiliaryWindow) {\n\t\t\t\tthis.logService.trace('[aux window] vscode:registerAuxiliaryWindow: Registering auxiliary window to main window');\n\n\t\t\t\tauxiliaryWindow.parentId = mainWindowId;\n\t\t\t}\n\n\t\t\treturn event.sender.id;\n\t\t});\n\t}\n\n\tcreateWindow(details: HandlerDetails): BrowserWindowConstructorOptions {\n\t\tconst { state, overrides } = this.computeWindowStateAndOverrides(details);\n\t\treturn this.instantiationService.invokeFunction(defaultBrowserWindowOptions, state, overrides, {\n\t\t\tpreload: FileAccess.asFileUri('vs/base/parts/sandbox/electron-sandbox/preload-aux.js').fsPath\n\t\t});\n\t}\n\n\tprivate computeWindowStateAndOverrides(details: HandlerDetails): { readonly state: IWindowState; readonly overrides: IDefaultBrowserWindowOptionsOverrides } {\n\t\tconst windowState: IWindowState = {};\n\t\tconst overrides: IDefaultBrowserWindowOptionsOverrides = {};\n\n\t\tconst features = details.features.split(','); // for example: popup=yes,left=270,top=14.5,width=800,height=600\n\t\tfor (const feature of features) {\n\t\t\tconst [key, value] = feature.split('=');\n\t\t\tswitch (key) {\n\t\t\t\tcase 'width':\n\t\t\t\t\twindowState.width = parseInt(value, 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'height':\n\t\t\t\t\twindowState.height = parseInt(value, 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'left':\n\t\t\t\t\twindowState.x = parseInt(value, 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'top':\n\t\t\t\t\twindowState.y = parseInt(value, 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'window-maximized':\n\t\t\t\t\twindowState.mode = WindowMode.Maximized;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'window-fullscreen':\n\t\t\t\t\twindowState.mode = WindowMode.Fullscreen;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'window-disable-fullscreen':\n\t\t\t\t\toverrides.disableFullscreen = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'window-native-titlebar':\n\t\t\t\t\toverrides.forceNativeTitlebar = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst state = WindowStateValidator.validateWindowState(this.logService, windowState) ?? defaultAuxWindowState();\n\n\t\tthis.logService.trace('[aux window] using window state', state);\n\n\t\treturn { state, overrides };\n\t}\n\n\tregisterWindow(webContents: WebContents): void {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst auxiliaryWindow = this.instantiationService.createInstance(AuxiliaryWindow, webContents);\n\n\t\tthis.windows.set(auxiliaryWindow.id, auxiliaryWindow);\n\t\tdisposables.add(toDisposable(() => this.windows.delete(auxiliaryWindow.id)));\n\n\t\tdisposables.add(auxiliaryWindow.onDidMaximize(() => this._onDidMaximizeWindow.fire(auxiliaryWindow)));\n\t\tdisposables.add(auxiliaryWindow.onDidUnmaximize(() => this._onDidUnmaximizeWindow.fire(auxiliaryWindow)));\n\t\tdisposables.add(auxiliaryWindow.onDidEnterFullScreen(() => this._onDidChangeFullScreen.fire({ window: auxiliaryWindow, fullscreen: true })));\n\t\tdisposables.add(auxiliaryWindow.onDidLeaveFullScreen(() => this._onDidChangeFullScreen.fire({ window: auxiliaryWindow, fullscreen: false })));\n\t\tdisposables.add(auxiliaryWindow.onDidTriggerSystemContextMenu(({ x, y }) => this._onDidTriggerSystemContextMenu.fire({ window: auxiliaryWindow, x, y })));\n\n\t\tEvent.once(auxiliaryWindow.onDidClose)(() => disposables.dispose());\n\t}\n\n\tgetWindowByWebContents(webContents: WebContents): AuxiliaryWindow | undefined {\n\t\tconst window = this.windows.get(webContents.id);\n\n\t\treturn window?.matches(webContents) ? window : undefined;\n\t}\n\n\tgetFocusedWindow(): IAuxiliaryWindow | undefined {\n\t\tconst window = BrowserWindow.getFocusedWindow();\n\t\tif (window) {\n\t\t\treturn this.getWindowByWebContents(window.webContents);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetLastActiveWindow(): IAuxiliaryWindow | undefined {\n\t\treturn getLastFocused(Array.from(this.windows.values()));\n\t}\n\n\tgetWindows(): readonly IAuxiliaryWindow[] {\n\t\treturn Array.from(this.windows.values());\n\t}\n}\n"],
  "mappings": "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",
  "names": ["browserWindow", "auxiliaryWindow"]
}
