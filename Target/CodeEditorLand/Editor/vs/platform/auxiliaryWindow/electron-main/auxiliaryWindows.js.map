{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/auxiliaryWindow/electron-main/auxiliaryWindows.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tBrowserWindowConstructorOptions,\n\tHandlerDetails,\n\tWebContents,\n} from \"electron\";\nimport type { Event } from \"../../../base/common/event.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type { IAuxiliaryWindow } from \"./auxiliaryWindow.js\";\n\nexport const IAuxiliaryWindowsMainService =\n\tcreateDecorator<IAuxiliaryWindowsMainService>(\n\t\t\"auxiliaryWindowsMainService\",\n\t);\n\nexport interface IAuxiliaryWindowsMainService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidMaximizeWindow: Event<IAuxiliaryWindow>;\n\treadonly onDidUnmaximizeWindow: Event<IAuxiliaryWindow>;\n\treadonly onDidChangeFullScreen: Event<{\n\t\twindow: IAuxiliaryWindow;\n\t\tfullscreen: boolean;\n\t}>;\n\treadonly onDidTriggerSystemContextMenu: Event<{\n\t\treadonly window: IAuxiliaryWindow;\n\t\treadonly x: number;\n\t\treadonly y: number;\n\t}>;\n\n\tcreateWindow(details: HandlerDetails): BrowserWindowConstructorOptions;\n\tregisterWindow(webContents: WebContents): void;\n\n\tgetWindowByWebContents(\n\t\twebContents: WebContents,\n\t): IAuxiliaryWindow | undefined;\n\n\tgetFocusedWindow(): IAuxiliaryWindow | undefined;\n\tgetLastActiveWindow(): IAuxiliaryWindow | undefined;\n\n\tgetWindows(): readonly IAuxiliaryWindow[];\n}\n"],
  "mappings": "AAWA,SAAS,uBAAuB;AAGzB,MAAM,+BACZ;AAAA,EACC;AACD;",
  "names": []
}
