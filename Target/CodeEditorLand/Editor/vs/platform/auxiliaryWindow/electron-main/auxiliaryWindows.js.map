{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/auxiliaryWindow/electron-main/auxiliaryWindows.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindowConstructorOptions, HandlerDetails, WebContents } from 'electron';\nimport { Event } from '../../../base/common/event.js';\nimport { IAuxiliaryWindow } from './auxiliaryWindow.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const IAuxiliaryWindowsMainService = createDecorator<IAuxiliaryWindowsMainService>('auxiliaryWindowsMainService');\n\nexport interface IAuxiliaryWindowsMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidMaximizeWindow: Event<IAuxiliaryWindow>;\n\treadonly onDidUnmaximizeWindow: Event<IAuxiliaryWindow>;\n\treadonly onDidChangeFullScreen: Event<{ window: IAuxiliaryWindow; fullscreen: boolean }>;\n\treadonly onDidTriggerSystemContextMenu: Event<{ readonly window: IAuxiliaryWindow; readonly x: number; readonly y: number }>;\n\n\tcreateWindow(details: HandlerDetails): BrowserWindowConstructorOptions;\n\tregisterWindow(webContents: WebContents): void;\n\n\tgetWindowByWebContents(webContents: WebContents): IAuxiliaryWindow | undefined;\n\n\tgetFocusedWindow(): IAuxiliaryWindow | undefined;\n\tgetLastActiveWindow(): IAuxiliaryWindow | undefined;\n\n\tgetWindows(): readonly IAuxiliaryWindow[];\n}\n"],
  "mappings": "AAKA,SAAS,iCAAiC,gBAAgB,mBAAmB;AAC7E,SAAS,aAAa;AACtB,SAAS,wBAAwB;AACjC,SAAS,uBAAuB;AAEzB,MAAM,+BAA+B,gBAA8C,6BAA6B;",
  "names": []
}
