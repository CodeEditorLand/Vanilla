{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/auxiliaryWindow/electron-main/auxiliaryWindow.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow, BrowserWindowConstructorOptions, WebContents } from 'electron';\nimport { isLinux, isWindows } from '../../../base/common/platform.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IEnvironmentMainService } from '../../environment/electron-main/environmentMainService.js';\nimport { ILifecycleMainService } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IStateService } from '../../state/node/state.js';\nimport { hasNativeTitlebar, TitlebarStyle } from '../../window/common/window.js';\nimport { IBaseWindow, WindowMode } from '../../window/electron-main/window.js';\nimport { BaseWindow } from '../../windows/electron-main/windowImpl.js';\n\nexport interface IAuxiliaryWindow extends IBaseWindow {\n\treadonly parentId: number;\n}\n\nexport class AuxiliaryWindow extends BaseWindow implements IAuxiliaryWindow {\n\n\treadonly id = this.webContents.id;\n\tparentId = -1;\n\n\toverride get win() {\n\t\tif (!super.win) {\n\t\t\tthis.tryClaimWindow();\n\t\t}\n\n\t\treturn super.win;\n\t}\n\n\tprivate stateApplied = false;\n\n\tconstructor(\n\t\tprivate readonly webContents: WebContents,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@ILogService logService: ILogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStateService stateService: IStateService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper(configurationService, stateService, environmentMainService, logService);\n\n\t\t// Try to claim window\n\t\tthis.tryClaimWindow();\n\t}\n\n\ttryClaimWindow(options?: BrowserWindowConstructorOptions): void {\n\t\tif (this._store.isDisposed || this.webContents.isDestroyed()) {\n\t\t\treturn; // already disposed\n\t\t}\n\n\t\tthis.doTryClaimWindow(options);\n\n\t\tif (options && !this.stateApplied) {\n\t\t\tthis.stateApplied = true;\n\n\t\t\tthis.applyState({\n\t\t\t\tx: options.x,\n\t\t\t\ty: options.y,\n\t\t\t\twidth: options.width,\n\t\t\t\theight: options.height,\n\t\t\t\t// TODO@bpasero We currently do not support restoring fullscreen state for\n\t\t\t\t// auxiliary windows because we do not get hold of the original `features`\n\t\t\t\t// string that contains that info in `window-fullscreen`. However, we can\n\t\t\t\t// probe the `options.show` value for whether the window should be maximized\n\t\t\t\t// or not because we never show maximized windows initially to reduce flicker.\n\t\t\t\tmode: options.show === false ? WindowMode.Maximized : WindowMode.Normal\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate doTryClaimWindow(options?: BrowserWindowConstructorOptions): void {\n\t\tif (this._win) {\n\t\t\treturn; // already claimed\n\t\t}\n\n\t\tconst window = BrowserWindow.fromWebContents(this.webContents);\n\t\tif (window) {\n\t\t\tthis.logService.trace('[aux window] Claimed browser window instance');\n\n\t\t\t// Remember\n\t\t\tthis.setWin(window, options);\n\n\t\t\t// Disable Menu\n\t\t\twindow.setMenu(null);\n\t\t\tif ((isWindows || isLinux) && hasNativeTitlebar(this.configurationService, options?.titleBarStyle === 'hidden' ? TitlebarStyle.CUSTOM : undefined /* unknown */)) {\n\t\t\t\twindow.setAutoHideMenuBar(true); // Fix for https://github.com/microsoft/vscode/issues/200615\n\t\t\t}\n\n\t\t\t// Lifecycle\n\t\t\tthis.lifecycleMainService.registerAuxWindow(this);\n\t\t}\n\t}\n\n\tmatches(webContents: WebContents): boolean {\n\t\treturn this.webContents.id === webContents.id;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe,iCAAiC,mBAAmB;AAC5E,SAAS,SAAS,iBAAiB;AACnC,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,mBAAmB,qBAAqB;AACjD,SAAS,aAAa,kBAAkB;AACxC,SAAS,kBAAkB;AAMpB,IAAM,kBAAN,cAA8B,WAAuC;AAAA,EAe3E,YACkB,aACQ,wBACZ,YACU,sBACR,cACyB,sBACvC;AACD,UAAM,sBAAsB,cAAc,wBAAwB,UAAU;AAP3D;AAKuB;AAKxC,SAAK,eAAe;AAAA,EACrB;AAAA,EA/CD,OAoB4E;AAAA;AAAA;AAAA,EAElE,KAAK,KAAK,YAAY;AAAA,EAC/B,WAAW;AAAA,EAEX,IAAa,MAAM;AAClB,QAAI,CAAC,MAAM,KAAK;AACf,WAAK,eAAe;AAAA,IACrB;AAEA,WAAO,MAAM;AAAA,EACd;AAAA,EAEQ,eAAe;AAAA,EAgBvB,eAAe,SAAiD;AAC/D,QAAI,KAAK,OAAO,cAAc,KAAK,YAAY,YAAY,GAAG;AAC7D;AAAA,IACD;AAEA,SAAK,iBAAiB,OAAO;AAE7B,QAAI,WAAW,CAAC,KAAK,cAAc;AAClC,WAAK,eAAe;AAEpB,WAAK,WAAW;AAAA,QACf,GAAG,QAAQ;AAAA,QACX,GAAG,QAAQ;AAAA,QACX,OAAO,QAAQ;AAAA,QACf,QAAQ,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMhB,MAAM,QAAQ,SAAS,QAAQ,WAAW,YAAY,WAAW;AAAA,MAClE,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,iBAAiB,SAAiD;AACzE,QAAI,KAAK,MAAM;AACd;AAAA,IACD;AAEA,UAAM,SAAS,cAAc,gBAAgB,KAAK,WAAW;AAC7D,QAAI,QAAQ;AACX,WAAK,WAAW,MAAM,8CAA8C;AAGpE,WAAK,OAAO,QAAQ,OAAO;AAG3B,aAAO,QAAQ,IAAI;AACnB,WAAK,aAAa,YAAY;AAAA,QAAkB,KAAK;AAAA,QAAsB,SAAS,kBAAkB,WAAW,cAAc,SAAS;AAAA;AAAA,MAAuB,GAAG;AACjK,eAAO,mBAAmB,IAAI;AAAA,MAC/B;AAGA,WAAK,qBAAqB,kBAAkB,IAAI;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,QAAQ,aAAmC;AAC1C,WAAO,KAAK,YAAY,OAAO,YAAY;AAAA,EAC5C;AACD;AAhFa,kBAAN;AAAA,EAiBJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GArBU;",
  "names": []
}
