{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/instantiation/common/serviceCollection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { SyncDescriptor } from \"./descriptors.js\";\nimport type { ServiceIdentifier } from \"./instantiation.js\";\n\nexport class ServiceCollection {\n\tprivate _entries = new Map<ServiceIdentifier<any>, any>();\n\n\tconstructor(...entries: [ServiceIdentifier<any>, any][]) {\n\t\tfor (const [id, service] of entries) {\n\t\t\tthis.set(id, service);\n\t\t}\n\t}\n\n\tset<T>(\n\t\tid: ServiceIdentifier<T>,\n\t\tinstanceOrDescriptor: T | SyncDescriptor<T>,\n\t): T | SyncDescriptor<T> {\n\t\tconst result = this._entries.get(id);\n\t\tthis._entries.set(id, instanceOrDescriptor);\n\t\treturn result;\n\t}\n\n\thas(id: ServiceIdentifier<any>): boolean {\n\t\treturn this._entries.has(id);\n\t}\n\n\tget<T>(id: ServiceIdentifier<T>): T | SyncDescriptor<T> {\n\t\treturn this._entries.get(id);\n\t}\n}\n"],
  "mappings": ";;AAQO,MAAM,kBAAkB;AAAA,EAR/B,OAQ+B;AAAA;AAAA;AAAA,EACtB,WAAW,oBAAI,IAAiC;AAAA,EAExD,eAAe,SAA0C;AACxD,eAAW,CAAC,IAAI,OAAO,KAAK,SAAS;AACpC,WAAK,IAAI,IAAI,OAAO;AAAA,IACrB;AAAA,EACD;AAAA,EAEA,IACC,IACA,sBACwB;AACxB,UAAM,SAAS,KAAK,SAAS,IAAI,EAAE;AACnC,SAAK,SAAS,IAAI,IAAI,oBAAoB;AAC1C,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,IAAqC;AACxC,WAAO,KAAK,SAAS,IAAI,EAAE;AAAA,EAC5B;AAAA,EAEA,IAAO,IAAiD;AACvD,WAAO,KAAK,SAAS,IAAI,EAAE;AAAA,EAC5B;AACD;",
  "names": []
}
