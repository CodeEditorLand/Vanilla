{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/instantiation/common/extensions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SyncDescriptor } from \"./descriptors.js\";\nimport type { BrandedService, ServiceIdentifier } from \"./instantiation.js\";\n\nconst _registry: [ServiceIdentifier<any>, SyncDescriptor<any>][] = [];\n\nexport enum InstantiationType {\n\t/**\n\t * Instantiate this service as soon as a consumer depends on it. _Note_ that this\n\t * is more costly as some upfront work is done that is likely not needed\n\t */\n\tEager = 0,\n\n\t/**\n\t * Instantiate this service as soon as a consumer uses it. This is the _better_\n\t * way of registering a service.\n\t */\n\tDelayed = 1,\n}\n\nexport function registerSingleton<T, Services extends BrandedService[]>(\n\tid: ServiceIdentifier<T>,\n\tctor: new (...services: Services) => T,\n\tsupportsDelayedInstantiation: InstantiationType,\n): void;\nexport function registerSingleton<T, Services extends BrandedService[]>(\n\tid: ServiceIdentifier<T>,\n\tdescriptor: SyncDescriptor<any>,\n): void;\nexport function registerSingleton<T, Services extends BrandedService[]>(\n\tid: ServiceIdentifier<T>,\n\tctorOrDescriptor: { new (...services: Services): T } | SyncDescriptor<any>,\n\tsupportsDelayedInstantiation?: boolean | InstantiationType,\n): void {\n\tif (!(ctorOrDescriptor instanceof SyncDescriptor)) {\n\t\tctorOrDescriptor = new SyncDescriptor<T>(\n\t\t\tctorOrDescriptor as new (\n\t\t\t\t...args: any[]\n\t\t\t) => T,\n\t\t\t[],\n\t\t\tBoolean(supportsDelayedInstantiation),\n\t\t);\n\t}\n\n\t_registry.push([id, ctorOrDescriptor]);\n}\n\nexport function getSingletonServiceDescriptors(): [\n\tServiceIdentifier<any>,\n\tSyncDescriptor<any>,\n][] {\n\treturn _registry;\n}\n"],
  "mappings": ";;AAKA,SAAS,sBAAsB;AAG/B,MAAM,YAA6D,CAAC;AAE7D,IAAK,oBAAL,kBAAKA,uBAAL;AAKN,EAAAA,sCAAA,WAAQ,KAAR;AAMA,EAAAA,sCAAA,aAAU,KAAV;AAXW,SAAAA;AAAA,GAAA;AAuBL,SAAS,kBACf,IACA,kBACA,8BACO;AACP,MAAI,EAAE,4BAA4B,iBAAiB;AAClD,uBAAmB,IAAI;AAAA,MACtB;AAAA,MAGA,CAAC;AAAA,MACD,QAAQ,4BAA4B;AAAA,IACrC;AAAA,EACD;AAEA,YAAU,KAAK,CAAC,IAAI,gBAAgB,CAAC;AACtC;AAhBgB;AAkBT,SAAS,iCAGZ;AACH,SAAO;AACR;AALgB;",
  "names": ["InstantiationType"]
}
