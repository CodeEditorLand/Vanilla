import e from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as r}from"../../../../base/test/common/utils.js";import{Graph as n}from"../../common/graph.js";suite("Graph",()=>{let t;setup(()=>{t=new n(d=>d)}),r(),test("is possible to lookup nodes that don't exist",function(){e.strictEqual(t.lookup("ddd"),void 0)}),test("inserts nodes when not there yet",function(){e.strictEqual(t.lookup("ddd"),void 0),e.strictEqual(t.lookupOrInsertNode("ddd").data,"ddd"),e.strictEqual(t.lookup("ddd").data,"ddd")}),test("can remove nodes and get length",function(){e.ok(t.isEmpty()),e.strictEqual(t.lookup("ddd"),void 0),e.strictEqual(t.lookupOrInsertNode("ddd").data,"ddd"),e.ok(!t.isEmpty()),t.removeNode("ddd"),e.strictEqual(t.lookup("ddd"),void 0),e.ok(t.isEmpty())}),test("root",()=>{t.insertEdge("1","2");let d=t.roots();e.strictEqual(d.length,1),e.strictEqual(d[0].data,"2"),t.insertEdge("2","1"),d=t.roots(),e.strictEqual(d.length,0)}),test("root complex",function(){t.insertEdge("1","2"),t.insertEdge("1","3"),t.insertEdge("3","4");const d=t.roots();e.strictEqual(d.length,2),e(["2","4"].every(o=>d.some(s=>s.data===o)))})});
