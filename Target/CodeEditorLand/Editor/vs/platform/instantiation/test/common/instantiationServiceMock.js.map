{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/instantiation/test/common/instantiationServiceMock.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as sinon from 'sinon';\nimport { DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { SyncDescriptor } from '../../common/descriptors.js';\nimport { ServiceIdentifier } from '../../common/instantiation.js';\nimport { InstantiationService, Trace } from '../../common/instantiationService.js';\nimport { ServiceCollection } from '../../common/serviceCollection.js';\n\ninterface IServiceMock<T> {\n\tid: ServiceIdentifier<T>;\n\tservice: any;\n}\n\nconst isSinonSpyLike = (fn: Function): fn is sinon.SinonSpy => fn && 'callCount' in fn;\n\nexport class TestInstantiationService extends InstantiationService implements IDisposable {\n\n\tprivate _servciesMap: Map<ServiceIdentifier<any>, any>;\n\n\tconstructor(private _serviceCollection: ServiceCollection = new ServiceCollection(), strict: boolean = false, parent?: TestInstantiationService, private _properDispose?: boolean) {\n\t\tsuper(_serviceCollection, strict, parent);\n\n\t\tthis._servciesMap = new Map<ServiceIdentifier<any>, any>();\n\t}\n\n\tpublic get<T>(service: ServiceIdentifier<T>): T {\n\t\treturn super._getOrCreateServiceInstance(service, Trace.traceCreation(false, TestInstantiationService));\n\t}\n\n\tpublic set<T>(service: ServiceIdentifier<T>, instance: T): T {\n\t\treturn <T>this._serviceCollection.set(service, instance);\n\t}\n\n\tpublic mock<T>(service: ServiceIdentifier<T>): T | sinon.SinonMock {\n\t\treturn <T>this._create(service, { mock: true });\n\t}\n\n\tpublic stub<T>(service: ServiceIdentifier<T>, ctor: Function): T;\n\tpublic stub<T>(service: ServiceIdentifier<T>, obj: Partial<T>): T;\n\tpublic stub<T, V>(service: ServiceIdentifier<T>, ctor: Function, property: string, value: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stub<T, V>(service: ServiceIdentifier<T>, obj: Partial<T>, property: string, value: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stub<T, V>(service: ServiceIdentifier<T>, property: string, value: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stub<T>(serviceIdentifier: ServiceIdentifier<T>, arg2: any, arg3?: string, arg4?: any): sinon.SinonStub | sinon.SinonSpy {\n\t\tconst service = typeof arg2 !== 'string' ? arg2 : undefined;\n\t\tconst serviceMock: IServiceMock<any> = { id: serviceIdentifier, service: service };\n\t\tconst property = typeof arg2 === 'string' ? arg2 : arg3;\n\t\tconst value = typeof arg2 === 'string' ? arg3 : arg4;\n\n\t\tconst stubObject = <any>this._create(serviceMock, { stub: true }, service && !property);\n\t\tif (property) {\n\t\t\tif (stubObject[property]) {\n\t\t\t\tif (stubObject[property].hasOwnProperty('restore')) {\n\t\t\t\t\tstubObject[property].restore();\n\t\t\t\t}\n\t\t\t\tif (typeof value === 'function') {\n\t\t\t\t\tconst spy = isSinonSpyLike(value) ? value : sinon.spy(value);\n\t\t\t\t\tstubObject[property] = spy;\n\t\t\t\t\treturn spy;\n\t\t\t\t} else {\n\t\t\t\t\tconst stub = value ? sinon.stub().returns(value) : sinon.stub();\n\t\t\t\t\tstubObject[property] = stub;\n\t\t\t\t\treturn stub;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstubObject[property] = value;\n\t\t\t}\n\t\t}\n\t\treturn stubObject;\n\t}\n\n\tpublic stubPromise<T>(service?: ServiceIdentifier<T>, fnProperty?: string, value?: any): T | sinon.SinonStub;\n\tpublic stubPromise<T, V>(service?: ServiceIdentifier<T>, ctor?: any, fnProperty?: string, value?: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stubPromise<T, V>(service?: ServiceIdentifier<T>, obj?: any, fnProperty?: string, value?: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stubPromise(arg1?: any, arg2?: any, arg3?: any, arg4?: any): sinon.SinonStub | sinon.SinonSpy {\n\t\targ3 = typeof arg2 === 'string' ? Promise.resolve(arg3) : arg3;\n\t\targ4 = typeof arg2 !== 'string' && typeof arg3 === 'string' ? Promise.resolve(arg4) : arg4;\n\t\treturn this.stub(arg1, arg2, arg3, arg4);\n\t}\n\n\tpublic spy<T>(service: ServiceIdentifier<T>, fnProperty: string): sinon.SinonSpy {\n\t\tconst spy = sinon.spy();\n\t\tthis.stub(service, fnProperty, spy);\n\t\treturn spy;\n\t}\n\n\tprivate _create<T>(serviceMock: IServiceMock<T>, options: SinonOptions, reset?: boolean): any;\n\tprivate _create<T>(ctor: any, options: SinonOptions): any;\n\tprivate _create(arg1: any, options: SinonOptions, reset: boolean = false): any {\n\t\tif (this.isServiceMock(arg1)) {\n\t\t\tconst service = this._getOrCreateService(arg1, options, reset);\n\t\t\tthis._serviceCollection.set(arg1.id, service);\n\t\t\treturn service;\n\t\t}\n\t\treturn options.mock ? sinon.mock(arg1) : this._createStub(arg1);\n\t}\n\n\tprivate _getOrCreateService<T>(serviceMock: IServiceMock<T>, opts: SinonOptions, reset?: boolean): any {\n\t\tconst service: any = this._serviceCollection.get(serviceMock.id);\n\t\tif (!reset && service) {\n\t\t\tif (opts.mock && service['sinonOptions'] && !!service['sinonOptions'].mock) {\n\t\t\t\treturn service;\n\t\t\t}\n\t\t\tif (opts.stub && service['sinonOptions'] && !!service['sinonOptions'].stub) {\n\t\t\t\treturn service;\n\t\t\t}\n\t\t}\n\t\treturn this._createService(serviceMock, opts);\n\t}\n\n\tprivate _createService(serviceMock: IServiceMock<any>, opts: SinonOptions): any {\n\t\tserviceMock.service = serviceMock.service ? serviceMock.service : this._servciesMap.get(serviceMock.id);\n\t\tconst service = opts.mock ? sinon.mock(serviceMock.service) : this._createStub(serviceMock.service);\n\t\tservice['sinonOptions'] = opts;\n\t\treturn service;\n\t}\n\n\tprivate _createStub(arg: any): any {\n\t\treturn typeof arg === 'object' ? arg : sinon.createStubInstance(arg);\n\t}\n\n\tprivate isServiceMock(arg1: any): boolean {\n\t\treturn typeof arg1 === 'object' && arg1.hasOwnProperty('id');\n\t}\n\n\toverride createChild(services: ServiceCollection): TestInstantiationService {\n\t\treturn new TestInstantiationService(services, false, this);\n\t}\n\n\toverride dispose() {\n\t\tsinon.restore();\n\t\tif (this._properDispose) {\n\t\t\tsuper.dispose();\n\t\t}\n\t}\n}\n\ninterface SinonOptions {\n\tmock?: boolean;\n\tstub?: boolean;\n}\n\nexport type ServiceIdCtorPair<T> = [id: ServiceIdentifier<T>, ctorOrInstance: T | (new (...args: any[]) => T)];\n\nexport function createServices(disposables: DisposableStore, services: ServiceIdCtorPair<any>[]): TestInstantiationService {\n\tconst serviceIdentifiers: ServiceIdentifier<any>[] = [];\n\tconst serviceCollection = new ServiceCollection();\n\n\tconst define = <T>(id: ServiceIdentifier<T>, ctorOrInstance: T | (new (...args: any[]) => T)) => {\n\t\tif (!serviceCollection.has(id)) {\n\t\t\tif (typeof ctorOrInstance === 'function') {\n\t\t\t\tserviceCollection.set(id, new SyncDescriptor(ctorOrInstance as any));\n\t\t\t} else {\n\t\t\t\tserviceCollection.set(id, ctorOrInstance);\n\t\t\t}\n\t\t}\n\t\tserviceIdentifiers.push(id);\n\t};\n\n\tfor (const [id, ctor] of services) {\n\t\tdefine(id, ctor);\n\t}\n\n\tconst instantiationService = disposables.add(new TestInstantiationService(serviceCollection, true));\n\tdisposables.add(toDisposable(() => {\n\t\tfor (const id of serviceIdentifiers) {\n\t\t\tconst instanceOrDescriptor = serviceCollection.get(id);\n\t\t\tif (typeof instanceOrDescriptor.dispose === 'function') {\n\t\t\t\tinstanceOrDescriptor.dispose();\n\t\t\t}\n\t\t}\n\t}));\n\treturn instantiationService;\n}\n"],
  "mappings": "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",
  "names": []
}
