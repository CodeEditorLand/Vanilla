{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/instantiation/test/common/graph.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Graph } from '../../common/graph.js';\n\nsuite('Graph', () => {\n\n\tlet graph: Graph<string>;\n\n\tsetup(() => {\n\t\tgraph = new Graph<string>(s => s);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('is possible to lookup nodes that don\\'t exist', function () {\n\t\tassert.strictEqual(graph.lookup('ddd'), undefined);\n\t});\n\n\ttest('inserts nodes when not there yet', function () {\n\t\tassert.strictEqual(graph.lookup('ddd'), undefined);\n\t\tassert.strictEqual(graph.lookupOrInsertNode('ddd').data, 'ddd');\n\t\tassert.strictEqual(graph.lookup('ddd')!.data, 'ddd');\n\t});\n\n\ttest('can remove nodes and get length', function () {\n\t\tassert.ok(graph.isEmpty());\n\t\tassert.strictEqual(graph.lookup('ddd'), undefined);\n\t\tassert.strictEqual(graph.lookupOrInsertNode('ddd').data, 'ddd');\n\t\tassert.ok(!graph.isEmpty());\n\t\tgraph.removeNode('ddd');\n\t\tassert.strictEqual(graph.lookup('ddd'), undefined);\n\t\tassert.ok(graph.isEmpty());\n\t});\n\n\ttest('root', () => {\n\t\tgraph.insertEdge('1', '2');\n\t\tlet roots = graph.roots();\n\t\tassert.strictEqual(roots.length, 1);\n\t\tassert.strictEqual(roots[0].data, '2');\n\n\t\tgraph.insertEdge('2', '1');\n\t\troots = graph.roots();\n\t\tassert.strictEqual(roots.length, 0);\n\t});\n\n\ttest('root complex', function () {\n\t\tgraph.insertEdge('1', '2');\n\t\tgraph.insertEdge('1', '3');\n\t\tgraph.insertEdge('3', '4');\n\n\t\tconst roots = graph.roots();\n\t\tassert.strictEqual(roots.length, 2);\n\t\tassert(['2', '4'].every(n => roots.some(node => node.data === n)));\n\t});\n});\n"],
  "mappings": "AAIA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,aAAa;AAEtB,MAAM,SAAS,MAAM;AAEpB,MAAI;AAEJ,QAAM,MAAM;AACX,YAAQ,IAAI,MAAc,OAAK,CAAC;AAAA,EACjC,CAAC;AAED,0CAAwC;AAExC,OAAK,gDAAiD,WAAY;AACjE,WAAO,YAAY,MAAM,OAAO,KAAK,GAAG,MAAS;AAAA,EAClD,CAAC;AAED,OAAK,oCAAoC,WAAY;AACpD,WAAO,YAAY,MAAM,OAAO,KAAK,GAAG,MAAS;AACjD,WAAO,YAAY,MAAM,mBAAmB,KAAK,EAAE,MAAM,KAAK;AAC9D,WAAO,YAAY,MAAM,OAAO,KAAK,EAAG,MAAM,KAAK;AAAA,EACpD,CAAC;AAED,OAAK,mCAAmC,WAAY;AACnD,WAAO,GAAG,MAAM,QAAQ,CAAC;AACzB,WAAO,YAAY,MAAM,OAAO,KAAK,GAAG,MAAS;AACjD,WAAO,YAAY,MAAM,mBAAmB,KAAK,EAAE,MAAM,KAAK;AAC9D,WAAO,GAAG,CAAC,MAAM,QAAQ,CAAC;AAC1B,UAAM,WAAW,KAAK;AACtB,WAAO,YAAY,MAAM,OAAO,KAAK,GAAG,MAAS;AACjD,WAAO,GAAG,MAAM,QAAQ,CAAC;AAAA,EAC1B,CAAC;AAED,OAAK,QAAQ,MAAM;AAClB,UAAM,WAAW,KAAK,GAAG;AACzB,QAAI,QAAQ,MAAM,MAAM;AACxB,WAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,WAAO,YAAY,MAAM,CAAC,EAAE,MAAM,GAAG;AAErC,UAAM,WAAW,KAAK,GAAG;AACzB,YAAQ,MAAM,MAAM;AACpB,WAAO,YAAY,MAAM,QAAQ,CAAC;AAAA,EACnC,CAAC;AAED,OAAK,gBAAgB,WAAY;AAChC,UAAM,WAAW,KAAK,GAAG;AACzB,UAAM,WAAW,KAAK,GAAG;AACzB,UAAM,WAAW,KAAK,GAAG;AAEzB,UAAM,QAAQ,MAAM,MAAM;AAC1B,WAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,WAAO,CAAC,KAAK,GAAG,EAAE,MAAM,OAAK,MAAM,KAAK,UAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;AAAA,EAClE,CAAC;AACF,CAAC;",
  "names": []
}
