{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userData/test/browser/fileUserDataProvider.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { dirname, isEqual, joinPath } from '../../../../base/common/resources.js';\nimport { ReadableStreamEvents } from '../../../../base/common/stream.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IEnvironmentService } from '../../../environment/common/environment.js';\nimport { AbstractNativeEnvironmentService } from '../../../environment/common/environmentService.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { FileChangeType, FileSystemProviderCapabilities, FileType, IFileChange, IFileOpenOptions, IFileReadStreamOptions, IFileService, IFileSystemProviderWithFileReadStreamCapability, IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithOpenReadWriteCloseCapability, IStat } from '../../../files/common/files.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport product from '../../../product/common/product.js';\nimport { UriIdentityService } from '../../../uriIdentity/common/uriIdentityService.js';\nimport { FileUserDataProvider } from '../../common/fileUserDataProvider.js';\nimport { IUserDataProfilesService, UserDataProfilesService } from '../../../userDataProfile/common/userDataProfile.js';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nclass TestEnvironmentService extends AbstractNativeEnvironmentService {\n\tconstructor(private readonly _appSettingsHome: URI) {\n\t\tsuper(Object.create(null), Object.create(null), { _serviceBrand: undefined, ...product });\n\t}\n\toverride get userRoamingDataHome() { return this._appSettingsHome.with({ scheme: Schemas.vscodeUserData }); }\n\toverride get cacheHome() { return this.userRoamingDataHome; }\n}\n\nsuite('FileUserDataProvider', () => {\n\n\tlet testObject: IFileService;\n\tlet userDataHomeOnDisk: URI;\n\tlet backupWorkspaceHomeOnDisk: URI;\n\tlet environmentService: IEnvironmentService;\n\tlet userDataProfilesService: IUserDataProfilesService;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet fileUserDataProvider: FileUserDataProvider;\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\ttestObject = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(testObject.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tuserDataHomeOnDisk = joinPath(ROOT, 'User');\n\t\tconst backupHome = joinPath(ROOT, 'Backups');\n\t\tbackupWorkspaceHomeOnDisk = joinPath(backupHome, 'workspaceId');\n\t\tawait testObject.createFolder(userDataHomeOnDisk);\n\t\tawait testObject.createFolder(backupWorkspaceHomeOnDisk);\n\n\t\tenvironmentService = new TestEnvironmentService(userDataHomeOnDisk);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(testObject));\n\t\tuserDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, testObject, uriIdentityService, logService));\n\n\t\tfileUserDataProvider = disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService));\n\t\tdisposables.add(fileUserDataProvider);\n\t\tdisposables.add(testObject.registerProvider(Schemas.vscodeUserData, fileUserDataProvider));\n\t});\n\n\ttest('exists return false when file does not exist', async () => {\n\t\tconst exists = await testObject.exists(userDataProfilesService.defaultProfile.settingsResource);\n\t\tassert.strictEqual(exists, false);\n\t});\n\n\ttest('read file throws error if not exist', async () => {\n\t\ttry {\n\t\t\tawait testObject.readFile(userDataProfilesService.defaultProfile.settingsResource);\n\t\t\tassert.fail('Should fail since file does not exist');\n\t\t} catch (e) { }\n\t});\n\n\ttest('read existing file', async () => {\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.readFile(userDataProfilesService.defaultProfile.settingsResource);\n\t\tassert.strictEqual(result.value.toString(), '{}');\n\t});\n\n\ttest('create file', async () => {\n\t\tconst resource = userDataProfilesService.defaultProfile.settingsResource;\n\t\tconst actual1 = await testObject.createFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{}');\n\t});\n\n\ttest('write file creates the file if not exist', async () => {\n\t\tconst resource = userDataProfilesService.defaultProfile.settingsResource;\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{}');\n\t});\n\n\ttest('write to existing file', async () => {\n\t\tconst resource = userDataProfilesService.defaultProfile.settingsResource;\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{a:1}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{a:1}');\n\t});\n\n\ttest('delete file', async () => {\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'settings.json'), VSBuffer.fromString(''));\n\t\tawait testObject.del(userDataProfilesService.defaultProfile.settingsResource);\n\t\tconst result = await testObject.exists(joinPath(userDataHomeOnDisk, 'settings.json'));\n\t\tassert.strictEqual(false, result);\n\t});\n\n\ttest('resolve file', async () => {\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'settings.json'), VSBuffer.fromString(''));\n\t\tconst result = await testObject.resolve(userDataProfilesService.defaultProfile.settingsResource);\n\t\tassert.ok(!result.isDirectory);\n\t\tassert.ok(result.children === undefined);\n\t});\n\n\ttest('exists return false for folder that does not exist', async () => {\n\t\tconst exists = await testObject.exists(userDataProfilesService.defaultProfile.snippetsHome);\n\t\tassert.strictEqual(exists, false);\n\t});\n\n\ttest('exists return true for folder that exists', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tconst exists = await testObject.exists(userDataProfilesService.defaultProfile.snippetsHome);\n\t\tassert.strictEqual(exists, true);\n\t});\n\n\ttest('read file throws error for folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\ttry {\n\t\t\tawait testObject.readFile(userDataProfilesService.defaultProfile.snippetsHome);\n\t\t\tassert.fail('Should fail since read file is not supported for folders');\n\t\t} catch (e) { }\n\t});\n\n\ttest('read file under folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst resource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json');\n\t\tconst actual = await testObject.readFile(resource);\n\t\tassert.strictEqual(actual.resource.toString(), resource.toString());\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('read file under sub folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets', 'java'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'java', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst resource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'java/settings.json');\n\t\tconst actual = await testObject.readFile(resource);\n\t\tassert.strictEqual(actual.resource.toString(), resource.toString());\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('create file under folder that exists', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tconst resource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.createFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{}');\n\t});\n\n\ttest('create file under folder that does not exist', async () => {\n\t\tconst resource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.createFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual2 = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual2.value.toString(), '{}');\n\t});\n\n\ttest('write to not existing file under container that exists', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tconst resource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('write to not existing file under container that does not exists', async () => {\n\t\tconst resource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('write to existing file under container', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst resource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json');\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{a:1}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(actual.value.toString(), '{a:1}');\n\t});\n\n\ttest('write file under sub container', async () => {\n\t\tconst resource = joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'java/settings.json');\n\t\tconst actual1 = await testObject.writeFile(resource, VSBuffer.fromString('{}'));\n\t\tassert.strictEqual(actual1.resource.toString(), resource.toString());\n\t\tconst actual = await testObject.readFile(joinPath(userDataHomeOnDisk, 'snippets', 'java', 'settings.json'));\n\t\tassert.strictEqual(actual.value.toString(), '{}');\n\t});\n\n\ttest('delete throws error for folder that does not exist', async () => {\n\t\ttry {\n\t\t\tawait testObject.del(userDataProfilesService.defaultProfile.snippetsHome);\n\t\t\tassert.fail('Should fail the folder does not exist');\n\t\t} catch (e) { }\n\t});\n\n\ttest('delete not existing file under container that exists', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\ttry {\n\t\t\tawait testObject.del(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json'));\n\t\t\tassert.fail('Should fail since file does not exist');\n\t\t} catch (e) { }\n\t});\n\n\ttest('delete not existing file under container that does not exists', async () => {\n\t\ttry {\n\t\t\tawait testObject.del(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json'));\n\t\t\tassert.fail('Should fail since file does not exist');\n\t\t} catch (e) { }\n\t});\n\n\ttest('delete existing file under folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tawait testObject.del(joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json'));\n\t\tconst exists = await testObject.exists(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'));\n\t\tassert.strictEqual(exists, false);\n\t});\n\n\ttest('resolve folder', async () => {\n\t\tawait testObject.createFolder(joinPath(userDataHomeOnDisk, 'snippets'));\n\t\tawait testObject.writeFile(joinPath(userDataHomeOnDisk, 'snippets', 'settings.json'), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.resolve(userDataProfilesService.defaultProfile.snippetsHome);\n\t\tassert.ok(result.isDirectory);\n\t\tassert.ok(result.children !== undefined);\n\t\tassert.strictEqual(result.children.length, 1);\n\t\tassert.strictEqual(result.children[0].resource.toString(), joinPath(userDataProfilesService.defaultProfile.snippetsHome, 'settings.json').toString());\n\t});\n\n\ttest('read backup file', async () => {\n\t\tawait testObject.writeFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.readFile(joinPath(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }), `backup.json`));\n\t\tassert.strictEqual(result.value.toString(), '{}');\n\t});\n\n\ttest('create backup file', async () => {\n\t\tawait testObject.createFile(joinPath(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }), `backup.json`), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.readFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'));\n\t\tassert.strictEqual(result.value.toString(), '{}');\n\t});\n\n\ttest('write backup file', async () => {\n\t\tawait testObject.writeFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'), VSBuffer.fromString('{}'));\n\t\tawait testObject.writeFile(joinPath(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }), `backup.json`), VSBuffer.fromString('{a:1}'));\n\t\tconst result = await testObject.readFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'));\n\t\tassert.strictEqual(result.value.toString(), '{a:1}');\n\t});\n\n\ttest('resolve backups folder', async () => {\n\t\tawait testObject.writeFile(joinPath(backupWorkspaceHomeOnDisk, 'backup.json'), VSBuffer.fromString('{}'));\n\t\tconst result = await testObject.resolve(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }));\n\t\tassert.ok(result.isDirectory);\n\t\tassert.ok(result.children !== undefined);\n\t\tassert.strictEqual(result.children.length, 1);\n\t\tassert.strictEqual(result.children[0].resource.toString(), joinPath(backupWorkspaceHomeOnDisk.with({ scheme: environmentService.userRoamingDataHome.scheme }), `backup.json`).toString());\n\t});\n});\n\nclass TestFileSystemProvider implements IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithOpenReadWriteCloseCapability, IFileSystemProviderWithFileReadStreamCapability {\n\n\tconstructor(readonly onDidChangeFile: Event<readonly IFileChange[]>) { }\n\n\n\treadonly capabilities: FileSystemProviderCapabilities = FileSystemProviderCapabilities.FileReadWrite;\n\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\twatch(): IDisposable { return Disposable.None; }\n\n\tstat(): Promise<IStat> { throw new Error('Not Supported'); }\n\n\tmkdir(resource: URI): Promise<void> { throw new Error('Not Supported'); }\n\n\trename(): Promise<void> { throw new Error('Not Supported'); }\n\n\treadFile(resource: URI): Promise<Uint8Array> { throw new Error('Not Supported'); }\n\n\treaddir(resource: URI): Promise<[string, FileType][]> { throw new Error('Not Supported'); }\n\n\twriteFile(): Promise<void> { throw new Error('Not Supported'); }\n\n\tdelete(): Promise<void> { throw new Error('Not Supported'); }\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> { throw new Error('Not Supported'); }\n\tclose(fd: number): Promise<void> { throw new Error('Not Supported'); }\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> { throw new Error('Not Supported'); }\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> { throw new Error('Not Supported'); }\n\n\treadFileStream(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array> { throw new Error('Method not implemented.'); }\n}\n\nsuite('FileUserDataProvider - Watching', () => {\n\n\tlet testObject: FileUserDataProvider;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tconst rootFileResource = joinPath(ROOT, 'User');\n\tconst rootUserDataResource = rootFileResource.with({ scheme: Schemas.vscodeUserData });\n\n\tlet fileEventEmitter: Emitter<readonly IFileChange[]>;\n\n\tsetup(() => {\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst environmentService = new TestEnvironmentService(rootFileResource);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\n\t\tfileEventEmitter = disposables.add(new Emitter<readonly IFileChange[]>());\n\t\ttestObject = disposables.add(new FileUserDataProvider(rootFileResource.scheme, new TestFileSystemProvider(fileEventEmitter.event), Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()));\n\t});\n\n\ttest('file added change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.ADDED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.ADDED\n\t\t}]);\n\t});\n\n\ttest('file updated change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.UPDATED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.UPDATED\n\t\t}]);\n\t});\n\n\ttest('file deleted change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.DELETED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.DELETED\n\t\t}]);\n\t});\n\n\ttest('file under folder created change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'snippets', 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'snippets', 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.ADDED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.ADDED\n\t\t}]);\n\t});\n\n\ttest('file under folder updated change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'snippets', 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'snippets', 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.UPDATED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.UPDATED\n\t\t}]);\n\t});\n\n\ttest('file under folder deleted change event', done => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst expected = joinPath(rootUserDataResource, 'snippets', 'settings.json');\n\t\tconst target = joinPath(rootFileResource, 'snippets', 'settings.json');\n\t\tdisposables.add(testObject.onDidChangeFile(e => {\n\t\t\tif (isEqual(e[0].resource, expected) && e[0].type === FileChangeType.DELETED) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.DELETED\n\t\t}]);\n\t});\n\n\ttest('event is not triggered if not watched', async () => {\n\t\tconst target = joinPath(rootFileResource, 'settings.json');\n\t\tlet triggered = false;\n\t\tdisposables.add(testObject.onDidChangeFile(() => triggered = true));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.DELETED\n\t\t}]);\n\t\tif (triggered) {\n\t\t\tassert.fail('event should not be triggered');\n\t\t}\n\t});\n\n\ttest('event is not triggered if not watched 2', async () => {\n\t\tdisposables.add(testObject.watch(rootUserDataResource, { excludes: [], recursive: false }));\n\t\tconst target = joinPath(dirname(rootFileResource), 'settings.json');\n\t\tlet triggered = false;\n\t\tdisposables.add(testObject.onDidChangeFile(() => triggered = true));\n\t\tfileEventEmitter.fire([{\n\t\t\tresource: target,\n\t\t\ttype: FileChangeType.DELETED\n\t\t}]);\n\t\tif (triggered) {\n\t\t\tassert.fail('event should not be triggered');\n\t\t}\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
