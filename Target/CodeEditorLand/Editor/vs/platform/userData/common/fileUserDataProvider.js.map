{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userData/common/fileUserDataProvider.ts"],
  "sourcesContent": ["import type { CancellationToken } from \"../../../base/common/cancellation.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { ResourceSet } from \"../../../base/common/map.js\";\nimport type { ReadableStreamEvents } from \"../../../base/common/stream.js\";\nimport { TernarySearchTree } from \"../../../base/common/ternarySearchTree.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport {\n\tFileSystemProviderCapabilities,\n\ttype FileType,\n\ttype IFileAtomicOptions,\n\ttype IFileAtomicReadOptions,\n\ttype IFileChange,\n\ttype IFileDeleteOptions,\n\ttype IFileOpenOptions,\n\ttype IFileOverwriteOptions,\n\ttype IFileReadStreamOptions,\n\ttype IFileSystemProviderWithFileAtomicDeleteCapability,\n\ttype IFileSystemProviderWithFileAtomicReadCapability,\n\ttype IFileSystemProviderWithFileAtomicWriteCapability,\n\ttype IFileSystemProviderWithFileCloneCapability,\n\ttype IFileSystemProviderWithFileFolderCopyCapability,\n\ttype IFileSystemProviderWithFileReadStreamCapability,\n\ttype IFileSystemProviderWithFileReadWriteCapability,\n\ttype IFileSystemProviderWithOpenReadWriteCloseCapability,\n\ttype IFileWriteOptions,\n\ttype IStat,\n\ttype IWatchOptions,\n\thasFileCloneCapability,\n\thasFileFolderCopyCapability,\n} from \"../../files/common/files.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport type { IUserDataProfilesService } from \"../../userDataProfile/common/userDataProfile.js\";\n\n/**\n * This is a wrapper on top of the local filesystem provider which will\n * \t- Convert the user data resources to file system scheme and vice-versa\n *  - Enforces atomic reads for user data\n */\nexport class FileUserDataProvider\n\textends Disposable\n\timplements\n\t\tIFileSystemProviderWithFileReadWriteCapability,\n\t\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\t\tIFileSystemProviderWithFileReadStreamCapability,\n\t\tIFileSystemProviderWithFileFolderCopyCapability,\n\t\tIFileSystemProviderWithFileAtomicReadCapability,\n\t\tIFileSystemProviderWithFileAtomicWriteCapability,\n\t\tIFileSystemProviderWithFileAtomicDeleteCapability,\n\t\tIFileSystemProviderWithFileCloneCapability\n{\n\treadonly capabilities = this.fileSystemProvider.capabilities;\n\treadonly onDidChangeCapabilities =\n\t\tthis.fileSystemProvider.onDidChangeCapabilities;\n\n\tprivate readonly _onDidChangeFile = this._register(\n\t\tnew Emitter<readonly IFileChange[]>(),\n\t);\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tprivate readonly watchResources = TernarySearchTree.forUris<URI>(\n\t\t() =>\n\t\t\t!(\n\t\t\t\tthis.capabilities &\n\t\t\t\tFileSystemProviderCapabilities.PathCaseSensitive\n\t\t\t),\n\t);\n\tprivate readonly atomicReadWriteResources = new ResourceSet((uri) =>\n\t\tthis.uriIdentityService.extUri.getComparisonKey(\n\t\t\tthis.toFileSystemResource(uri),\n\t\t),\n\t);\n\n\tconstructor(\n\t\tprivate readonly fileSystemScheme: string,\n\t\tprivate readonly fileSystemProvider: IFileSystemProviderWithFileReadWriteCapability &\n\t\t\tIFileSystemProviderWithOpenReadWriteCloseCapability &\n\t\t\tIFileSystemProviderWithFileReadStreamCapability &\n\t\t\tIFileSystemProviderWithFileAtomicReadCapability &\n\t\t\tIFileSystemProviderWithFileAtomicWriteCapability &\n\t\t\tIFileSystemProviderWithFileAtomicDeleteCapability,\n\t\tprivate readonly userDataScheme: string,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.updateAtomicReadWritesResources();\n\t\tthis._register(\n\t\t\tuserDataProfilesService.onDidChangeProfiles(() =>\n\t\t\t\tthis.updateAtomicReadWritesResources(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.fileSystemProvider.onDidChangeFile((e) =>\n\t\t\t\tthis.handleFileChanges(e),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate updateAtomicReadWritesResources(): void {\n\t\tthis.atomicReadWriteResources.clear();\n\t\tfor (const profile of this.userDataProfilesService.profiles) {\n\t\t\tthis.atomicReadWriteResources.add(profile.settingsResource);\n\t\t\tthis.atomicReadWriteResources.add(profile.keybindingsResource);\n\t\t\tthis.atomicReadWriteResources.add(profile.tasksResource);\n\t\t\tthis.atomicReadWriteResources.add(profile.extensionsResource);\n\t\t}\n\t}\n\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> {\n\t\treturn this.fileSystemProvider.open(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t\topts,\n\t\t);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\treturn this.fileSystemProvider.close(fd);\n\t}\n\n\tread(\n\t\tfd: number,\n\t\tpos: number,\n\t\tdata: Uint8Array,\n\t\toffset: number,\n\t\tlength: number,\n\t): Promise<number> {\n\t\treturn this.fileSystemProvider.read(fd, pos, data, offset, length);\n\t}\n\n\twrite(\n\t\tfd: number,\n\t\tpos: number,\n\t\tdata: Uint8Array,\n\t\toffset: number,\n\t\tlength: number,\n\t): Promise<number> {\n\t\treturn this.fileSystemProvider.write(fd, pos, data, offset, length);\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\tthis.watchResources.set(resource, resource);\n\t\tconst disposable = this.fileSystemProvider.watch(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t\topts,\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis.watchResources.delete(resource);\n\t\t\tdisposable.dispose();\n\t\t});\n\t}\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn this.fileSystemProvider.stat(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t);\n\t}\n\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn this.fileSystemProvider.mkdir(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t);\n\t}\n\n\trename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this.fileSystemProvider.rename(\n\t\t\tthis.toFileSystemResource(from),\n\t\t\tthis.toFileSystemResource(to),\n\t\t\topts,\n\t\t);\n\t}\n\n\treadFile(\n\t\tresource: URI,\n\t\topts?: IFileAtomicReadOptions,\n\t): Promise<Uint8Array> {\n\t\treturn this.fileSystemProvider.readFile(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t\topts,\n\t\t);\n\t}\n\n\treadFileStream(\n\t\tresource: URI,\n\t\topts: IFileReadStreamOptions,\n\t\ttoken: CancellationToken,\n\t): ReadableStreamEvents<Uint8Array> {\n\t\treturn this.fileSystemProvider.readFileStream(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t\topts,\n\t\t\ttoken,\n\t\t);\n\t}\n\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn this.fileSystemProvider.readdir(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t);\n\t}\n\n\tenforceAtomicReadFile(resource: URI): boolean {\n\t\treturn this.atomicReadWriteResources.has(resource);\n\t}\n\n\twriteFile(\n\t\tresource: URI,\n\t\tcontent: Uint8Array,\n\t\topts: IFileWriteOptions,\n\t): Promise<void> {\n\t\treturn this.fileSystemProvider.writeFile(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t\tcontent,\n\t\t\topts,\n\t\t);\n\t}\n\n\tenforceAtomicWriteFile(resource: URI): IFileAtomicOptions | false {\n\t\tif (this.atomicReadWriteResources.has(resource)) {\n\t\t\treturn { postfix: \".vsctmp\" };\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn this.fileSystemProvider.delete(\n\t\t\tthis.toFileSystemResource(resource),\n\t\t\topts,\n\t\t);\n\t}\n\n\tcopy(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\tif (hasFileFolderCopyCapability(this.fileSystemProvider)) {\n\t\t\treturn this.fileSystemProvider.copy(\n\t\t\t\tthis.toFileSystemResource(from),\n\t\t\t\tthis.toFileSystemResource(to),\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tthrow new Error(\"copy not supported\");\n\t}\n\n\tcloneFile(from: URI, to: URI): Promise<void> {\n\t\tif (hasFileCloneCapability(this.fileSystemProvider)) {\n\t\t\treturn this.fileSystemProvider.cloneFile(\n\t\t\t\tthis.toFileSystemResource(from),\n\t\t\t\tthis.toFileSystemResource(to),\n\t\t\t);\n\t\t}\n\t\tthrow new Error(\"clone not supported\");\n\t}\n\n\tprivate handleFileChanges(changes: readonly IFileChange[]): void {\n\t\tconst userDataChanges: IFileChange[] = [];\n\t\tfor (const change of changes) {\n\t\t\tif (change.resource.scheme !== this.fileSystemScheme) {\n\t\t\t\tcontinue; // only interested in file schemes\n\t\t\t}\n\n\t\t\tconst userDataResource = this.toUserDataResource(change.resource);\n\t\t\tif (this.watchResources.findSubstr(userDataResource)) {\n\t\t\t\tuserDataChanges.push({\n\t\t\t\t\tresource: userDataResource,\n\t\t\t\t\ttype: change.type,\n\t\t\t\t\tcId: change.cId,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (userDataChanges.length) {\n\t\t\tthis.logService.debug(\"User data changed\");\n\t\t\tthis._onDidChangeFile.fire(userDataChanges);\n\t\t}\n\t}\n\n\tprivate toFileSystemResource(userDataResource: URI): URI {\n\t\treturn userDataResource.with({ scheme: this.fileSystemScheme });\n\t}\n\n\tprivate toUserDataResource(fileSystemResource: URI): URI {\n\t\treturn fileSystemResource.with({ scheme: this.userDataScheme });\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
