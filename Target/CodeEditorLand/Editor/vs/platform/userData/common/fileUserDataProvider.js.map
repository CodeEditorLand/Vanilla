{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userData/common/fileUserDataProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IFileSystemProviderWithFileReadWriteCapability, IFileChange, IWatchOptions, IStat, IFileOverwriteOptions, FileType, IFileWriteOptions, IFileDeleteOptions, FileSystemProviderCapabilities, IFileSystemProviderWithFileReadStreamCapability, IFileReadStreamOptions, IFileSystemProviderWithFileAtomicReadCapability, hasFileFolderCopyCapability, IFileSystemProviderWithOpenReadWriteCloseCapability, IFileOpenOptions, IFileSystemProviderWithFileAtomicWriteCapability, IFileSystemProviderWithFileAtomicDeleteCapability, IFileSystemProviderWithFileFolderCopyCapability, IFileSystemProviderWithFileCloneCapability, hasFileCloneCapability, IFileAtomicReadOptions, IFileAtomicOptions } from '../../files/common/files.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { ReadableStreamEvents } from '../../../base/common/stream.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { ResourceSet } from '../../../base/common/map.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\n\n/**\n * This is a wrapper on top of the local filesystem provider which will\n * \t- Convert the user data resources to file system scheme and vice-versa\n *  - Enforces atomic reads for user data\n */\nexport class FileUserDataProvider extends Disposable implements\n\tIFileSystemProviderWithFileReadWriteCapability,\n\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\tIFileSystemProviderWithFileReadStreamCapability,\n\tIFileSystemProviderWithFileFolderCopyCapability,\n\tIFileSystemProviderWithFileAtomicReadCapability,\n\tIFileSystemProviderWithFileAtomicWriteCapability,\n\tIFileSystemProviderWithFileAtomicDeleteCapability,\n\tIFileSystemProviderWithFileCloneCapability {\n\n\treadonly capabilities = this.fileSystemProvider.capabilities;\n\treadonly onDidChangeCapabilities = this.fileSystemProvider.onDidChangeCapabilities;\n\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<readonly IFileChange[]>());\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tprivate readonly watchResources = TernarySearchTree.forUris<URI>(() => !(this.capabilities & FileSystemProviderCapabilities.PathCaseSensitive));\n\tprivate readonly atomicReadWriteResources = new ResourceSet((uri) => this.uriIdentityService.extUri.getComparisonKey(this.toFileSystemResource(uri)));\n\n\tconstructor(\n\t\tprivate readonly fileSystemScheme: string,\n\t\tprivate readonly fileSystemProvider: IFileSystemProviderWithFileReadWriteCapability & IFileSystemProviderWithOpenReadWriteCloseCapability & IFileSystemProviderWithFileReadStreamCapability & IFileSystemProviderWithFileAtomicReadCapability & IFileSystemProviderWithFileAtomicWriteCapability & IFileSystemProviderWithFileAtomicDeleteCapability,\n\t\tprivate readonly userDataScheme: string,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.updateAtomicReadWritesResources();\n\t\tthis._register(userDataProfilesService.onDidChangeProfiles(() => this.updateAtomicReadWritesResources()));\n\t\tthis._register(this.fileSystemProvider.onDidChangeFile(e => this.handleFileChanges(e)));\n\t}\n\n\tprivate updateAtomicReadWritesResources(): void {\n\t\tthis.atomicReadWriteResources.clear();\n\t\tfor (const profile of this.userDataProfilesService.profiles) {\n\t\t\tthis.atomicReadWriteResources.add(profile.settingsResource);\n\t\t\tthis.atomicReadWriteResources.add(profile.keybindingsResource);\n\t\t\tthis.atomicReadWriteResources.add(profile.tasksResource);\n\t\t\tthis.atomicReadWriteResources.add(profile.extensionsResource);\n\t\t}\n\t}\n\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> {\n\t\treturn this.fileSystemProvider.open(this.toFileSystemResource(resource), opts);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\treturn this.fileSystemProvider.close(fd);\n\t}\n\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this.fileSystemProvider.read(fd, pos, data, offset, length);\n\t}\n\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this.fileSystemProvider.write(fd, pos, data, offset, length);\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\tthis.watchResources.set(resource, resource);\n\t\tconst disposable = this.fileSystemProvider.watch(this.toFileSystemResource(resource), opts);\n\t\treturn toDisposable(() => {\n\t\t\tthis.watchResources.delete(resource);\n\t\t\tdisposable.dispose();\n\t\t});\n\t}\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn this.fileSystemProvider.stat(this.toFileSystemResource(resource));\n\t}\n\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn this.fileSystemProvider.mkdir(this.toFileSystemResource(resource));\n\t}\n\n\trename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this.fileSystemProvider.rename(this.toFileSystemResource(from), this.toFileSystemResource(to), opts);\n\t}\n\n\treadFile(resource: URI, opts?: IFileAtomicReadOptions): Promise<Uint8Array> {\n\t\treturn this.fileSystemProvider.readFile(this.toFileSystemResource(resource), opts);\n\t}\n\n\treadFileStream(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array> {\n\t\treturn this.fileSystemProvider.readFileStream(this.toFileSystemResource(resource), opts, token);\n\t}\n\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn this.fileSystemProvider.readdir(this.toFileSystemResource(resource));\n\t}\n\n\tenforceAtomicReadFile(resource: URI): boolean {\n\t\treturn this.atomicReadWriteResources.has(resource);\n\t}\n\n\twriteFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> {\n\t\treturn this.fileSystemProvider.writeFile(this.toFileSystemResource(resource), content, opts);\n\t}\n\n\tenforceAtomicWriteFile(resource: URI): IFileAtomicOptions | false {\n\t\tif (this.atomicReadWriteResources.has(resource)) {\n\t\t\treturn { postfix: '.vsctmp' };\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn this.fileSystemProvider.delete(this.toFileSystemResource(resource), opts);\n\t}\n\n\tcopy(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\tif (hasFileFolderCopyCapability(this.fileSystemProvider)) {\n\t\t\treturn this.fileSystemProvider.copy(this.toFileSystemResource(from), this.toFileSystemResource(to), opts);\n\t\t}\n\t\tthrow new Error('copy not supported');\n\t}\n\n\tcloneFile(from: URI, to: URI): Promise<void> {\n\t\tif (hasFileCloneCapability(this.fileSystemProvider)) {\n\t\t\treturn this.fileSystemProvider.cloneFile(this.toFileSystemResource(from), this.toFileSystemResource(to));\n\t\t}\n\t\tthrow new Error('clone not supported');\n\t}\n\n\tprivate handleFileChanges(changes: readonly IFileChange[]): void {\n\t\tconst userDataChanges: IFileChange[] = [];\n\t\tfor (const change of changes) {\n\t\t\tif (change.resource.scheme !== this.fileSystemScheme) {\n\t\t\t\tcontinue; // only interested in file schemes\n\t\t\t}\n\n\t\t\tconst userDataResource = this.toUserDataResource(change.resource);\n\t\t\tif (this.watchResources.findSubstr(userDataResource)) {\n\t\t\t\tuserDataChanges.push({\n\t\t\t\t\tresource: userDataResource,\n\t\t\t\t\ttype: change.type,\n\t\t\t\t\tcId: change.cId\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (userDataChanges.length) {\n\t\t\tthis.logService.debug('User data changed');\n\t\t\tthis._onDidChangeFile.fire(userDataChanges);\n\t\t}\n\t}\n\n\tprivate toFileSystemResource(userDataResource: URI): URI {\n\t\treturn userDataResource.with({ scheme: this.fileSystemScheme });\n\t}\n\n\tprivate toUserDataResource(fileSystemResource: URI): URI {\n\t\treturn fileSystemResource.with({ scheme: this.userDataScheme });\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
