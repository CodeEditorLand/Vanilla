var W=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var d=(s,e,t,i)=>{for(var o=i>1?void 0:i?H(e,t):e,r=s.length-1,n;r>=0;r--)(n=s[r])&&(o=(i?n(e,t,o):n(o))||o);return i&&o&&W(e,t,o),o},c=(s,e)=>(t,i)=>e(t,i,s);import{isActiveElement as A}from"../../../base/browser/dom.js";import{FindInput as D}from"../../../base/browser/ui/findinput/findInput.js";import{ReplaceInput as F}from"../../../base/browser/ui/findinput/replaceInput.js";import{HistoryInputBox as V}from"../../../base/browser/ui/inputbox/inputBox.js";import{KeyCode as y,KeyMod as f}from"../../../base/common/keyCodes.js";import{DisposableStore as B,toDisposable as T}from"../../../base/common/lifecycle.js";import{localize as O}from"../../../nls.js";import{ContextKeyExpr as a,IContextKeyService as b,RawContextKey as g}from"../../contextkey/common/contextkey.js";import{KeybindingWeight as I,KeybindingsRegistry as C}from"../../keybinding/common/keybindingsRegistry.js";const N=new g("suggestWidgetVisible",!1,O("suggestWidgetVisible","Whether suggestion are visible")),v="historyNavigationWidgetFocus",K="historyNavigationForwardsEnabled",E="historyNavigationBackwardsEnabled";let l;const p=[];function w(s,e){if(p.includes(e))throw new Error("Cannot register the same widget multiple times");p.push(e);const t=new B,i=new g(v,!1).bindTo(s),o=new g(K,!0).bindTo(s),r=new g(E,!0).bindTo(s),n=()=>{i.set(!0),l=e},x=()=>{i.set(!1),l===e&&(l=void 0)};return A(e.element)&&n(),t.add(e.onDidFocus(()=>n())),t.add(e.onDidBlur(()=>x())),t.add(T(()=>{p.splice(p.indexOf(e),1),x()})),{historyNavigationForwardsEnablement:o,historyNavigationBackwardsEnablement:r,dispose(){t.dispose()}}}let u=class extends V{constructor(e,t,i,o){super(e,t,i);const r=this._register(o.createScoped(this.element));this._register(w(r,this))}};u=d([c(3,b)],u);let m=class extends D{constructor(e,t,i,o){super(e,t,i);const r=this._register(o.createScoped(this.inputBox.element));this._register(w(r,this.inputBox))}};m=d([c(3,b)],m);let h=class extends F{constructor(e,t,i,o,r=!1){super(e,t,r,i);const n=this._register(o.createScoped(this.inputBox.element));this._register(w(n,this.inputBox))}};h=d([c(3,b)],h),C.registerCommandAndKeybindingRule({id:"history.showPrevious",weight:I.WorkbenchContrib,when:a.and(a.has(v),a.equals(E,!0),a.not("isComposing"),N.isEqualTo(!1)),primary:y.UpArrow,secondary:[f.Alt|y.UpArrow],handler:s=>{l?.showPreviousValue()}}),C.registerCommandAndKeybindingRule({id:"history.showNext",weight:I.WorkbenchContrib,when:a.and(a.has(v),a.equals(K,!0),a.not("isComposing"),N.isEqualTo(!1)),primary:y.DownArrow,secondary:[f.Alt|y.DownArrow],handler:s=>{l?.showNextValue()}});export{m as ContextScopedFindInput,u as ContextScopedHistoryInputBox,h as ContextScopedReplaceInput,N as historyNavigationVisible,w as registerAndCreateHistoryNavigationContext};
