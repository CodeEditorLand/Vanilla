{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keyboardLayout/electron-main/keyboardLayoutMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as nativeKeymap from \"native-keymap\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport * as platform from \"../../../base/common/platform.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport {\n\tILifecycleMainService,\n\tLifecycleMainPhase,\n} from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport type {\n\tIKeyboardLayoutData,\n\tINativeKeyboardLayoutService,\n} from \"../common/keyboardLayoutService.js\";\n\nexport const IKeyboardLayoutMainService =\n\tcreateDecorator<IKeyboardLayoutMainService>(\"keyboardLayoutMainService\");\n\nexport interface IKeyboardLayoutMainService\n\textends INativeKeyboardLayoutService {}\n\nexport class KeyboardLayoutMainService\n\textends Disposable\n\timplements INativeKeyboardLayoutService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = this._register(\n\t\tnew Emitter<IKeyboardLayoutData>(),\n\t);\n\treadonly onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n\n\tprivate _initPromise: Promise<void> | null;\n\tprivate _keyboardLayoutData: IKeyboardLayoutData | null;\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t) {\n\t\tsuper();\n\t\tthis._initPromise = null;\n\t\tthis._keyboardLayoutData = null;\n\n\t\t// perf: automatically trigger initialize after windows\n\t\t// have opened so that we can do this work in parallel\n\t\t// to the window load.\n\t\tlifecycleMainService\n\t\t\t.when(LifecycleMainPhase.AfterWindowOpen)\n\t\t\t.then(() => this._initialize());\n\t}\n\n\tprivate _initialize(): Promise<void> {\n\t\tif (!this._initPromise) {\n\t\t\tthis._initPromise = this._doInitialize();\n\t\t}\n\t\treturn this._initPromise;\n\t}\n\n\tprivate async _doInitialize(): Promise<void> {\n\t\tconst nativeKeymapMod = await import(\"native-keymap\");\n\n\t\tthis._keyboardLayoutData = readKeyboardLayoutData(nativeKeymapMod);\n\t\tif (!platform.isCI) {\n\t\t\t// See https://github.com/microsoft/vscode/issues/152840\n\t\t\t// Do not register the keyboard layout change listener in CI because it doesn't work\n\t\t\t// on the build machines and it just adds noise to the build logs.\n\t\t\tnativeKeymapMod.onDidChangeKeyboardLayout(() => {\n\t\t\t\tthis._keyboardLayoutData =\n\t\t\t\t\treadKeyboardLayoutData(nativeKeymapMod);\n\t\t\t\tthis._onDidChangeKeyboardLayout.fire(this._keyboardLayoutData);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async getKeyboardLayoutData(): Promise<IKeyboardLayoutData> {\n\t\tawait this._initialize();\n\t\treturn this._keyboardLayoutData!;\n\t}\n}\n\nfunction readKeyboardLayoutData(\n\tnativeKeymapMod: typeof nativeKeymap,\n): IKeyboardLayoutData {\n\tconst keyboardMapping = nativeKeymapMod.getKeyMap();\n\tconst keyboardLayoutInfo = nativeKeymapMod.getCurrentKeyboardLayout();\n\treturn { keyboardMapping, keyboardLayoutInfo };\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,YAAY,cAAc;AAC1B,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAMA,MAAM,6BACZ,gBAA4C,2BAA2B;AAKjE,IAAM,4BAAN,cACE,WAET;AAAA,EA5BA,OA4BA;AAAA;AAAA;AAAA,EAGkB,6BAA6B,KAAK;AAAA,IAClD,IAAI,QAA6B;AAAA,EAClC;AAAA,EACS,4BAA4B,KAAK,2BAA2B;AAAA,EAE7D;AAAA,EACA;AAAA,EAER,YACwB,sBACtB;AACD,UAAM;AACN,SAAK,eAAe;AACpB,SAAK,sBAAsB;AAK3B,yBACE,KAAK,mBAAmB,eAAe,EACvC,KAAK,MAAM,KAAK,YAAY,CAAC;AAAA,EAChC;AAAA,EAEQ,cAA6B;AACpC,QAAI,CAAC,KAAK,cAAc;AACvB,WAAK,eAAe,KAAK,cAAc;AAAA,IACxC;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,gBAA+B;AAC5C,UAAM,kBAAkB,MAAM,OAAO,eAAe;AAEpD,SAAK,sBAAsB,uBAAuB,eAAe;AACjE,QAAI,CAAC,SAAS,MAAM;AAInB,sBAAgB,0BAA0B,MAAM;AAC/C,aAAK,sBACJ,uBAAuB,eAAe;AACvC,aAAK,2BAA2B,KAAK,KAAK,mBAAmB;AAAA,MAC9D,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,MAAa,wBAAsD;AAClE,UAAM,KAAK,YAAY;AACvB,WAAO,KAAK;AAAA,EACb;AACD;AAxDa,4BAAN;AAAA,EAeJ;AAAA,GAfU;AA0Db,SAAS,uBACR,iBACsB;AACtB,QAAM,kBAAkB,gBAAgB,UAAU;AAClD,QAAM,qBAAqB,gBAAgB,yBAAyB;AACpE,SAAO,EAAE,iBAAiB,mBAAmB;AAC9C;AANS;",
  "names": []
}
