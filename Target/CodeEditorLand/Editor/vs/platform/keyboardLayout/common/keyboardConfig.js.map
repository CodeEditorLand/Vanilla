{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keyboardLayout/common/keyboardConfig.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { OS, OperatingSystem } from '../../../base/common/platform.js';\nimport { ConfigurationScope, Extensions as ConfigExtensions, IConfigurationNode, IConfigurationRegistry } from '../../configuration/common/configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nexport const enum DispatchConfig {\n\tCode,\n\tKeyCode\n}\n\nexport interface IKeyboardConfig {\n\tdispatch: DispatchConfig;\n\tmapAltGrToCtrlAlt: boolean;\n}\n\nexport function readKeyboardConfig(configurationService: IConfigurationService): IKeyboardConfig {\n\tconst keyboard = configurationService.getValue<{ dispatch: any; mapAltGrToCtrlAlt: any } | undefined>('keyboard');\n\tconst dispatch = (keyboard?.dispatch === 'keyCode' ? DispatchConfig.KeyCode : DispatchConfig.Code);\n\tconst mapAltGrToCtrlAlt = Boolean(keyboard?.mapAltGrToCtrlAlt);\n\treturn { dispatch, mapAltGrToCtrlAlt };\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigExtensions.Configuration);\nconst keyboardConfiguration: IConfigurationNode = {\n\t'id': 'keyboard',\n\t'order': 15,\n\t'type': 'object',\n\t'title': nls.localize('keyboardConfigurationTitle', \"Keyboard\"),\n\t'properties': {\n\t\t'keyboard.dispatch': {\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttype: 'string',\n\t\t\tenum: ['code', 'keyCode'],\n\t\t\tdefault: 'code',\n\t\t\tmarkdownDescription: nls.localize('dispatch', \"Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.\"),\n\t\t\tincluded: OS === OperatingSystem.Macintosh || OS === OperatingSystem.Linux\n\t\t},\n\t\t'keyboard.mapAltGrToCtrlAlt': {\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tmarkdownDescription: nls.localize('mapAltGrToCtrlAlt', \"Controls if the AltGraph+ modifier should be treated as Ctrl+Alt+.\"),\n\t\t\tincluded: OS === OperatingSystem.Windows\n\t\t}\n\t}\n};\n\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,6BAA6B;AACtC,SAAS,IAAI,uBAAuB;AACpC,SAAS,oBAAoB,cAAc,kBAAkB,oBAAoB,8BAA8B;AAC/G,SAAS,gBAAgB;AAElB,IAAW,iBAAX,kBAAWA,oBAAX;AACN,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AAFiB,SAAAA;AAAA,GAAA;AAUX,SAAS,mBAAmB,sBAA8D;AAChG,QAAM,WAAW,qBAAqB,SAAgE,UAAU;AAChH,QAAM,WAAY,UAAU,aAAa,YAAY,kBAAyB;AAC9E,QAAM,oBAAoB,QAAQ,UAAU,iBAAiB;AAC7D,SAAO,EAAE,UAAU,kBAAkB;AACtC;AALgB;AAOhB,MAAM,wBAAwB,SAAS,GAA2B,iBAAiB,aAAa;AAChG,MAAM,wBAA4C;AAAA,EACjD,MAAM;AAAA,EACN,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS,IAAI,SAAS,8BAA8B,UAAU;AAAA,EAC9D,cAAc;AAAA,IACb,qBAAqB;AAAA,MACpB,OAAO,mBAAmB;AAAA,MAC1B,MAAM;AAAA,MACN,MAAM,CAAC,QAAQ,SAAS;AAAA,MACxB,SAAS;AAAA,MACT,qBAAqB,IAAI,SAAS,YAAY,iGAAiG;AAAA,MAC/I,UAAU,OAAO,gBAAgB,aAAa,OAAO,gBAAgB;AAAA,IACtE;AAAA,IACA,8BAA8B;AAAA,MAC7B,OAAO,mBAAmB;AAAA,MAC1B,MAAM;AAAA,MACN,SAAS;AAAA,MACT,qBAAqB,IAAI,SAAS,qBAAqB,oEAAoE;AAAA,MAC3H,UAAU,OAAO,gBAAgB;AAAA,IAClC;AAAA,EACD;AACD;AAEA,sBAAsB,sBAAsB,qBAAqB;",
  "names": ["DispatchConfig"]
}
