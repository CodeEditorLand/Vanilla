{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keyboardLayout/common/keyboardConfig.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OS, OperatingSystem } from \"../../../base/common/platform.js\";\nimport * as nls from \"../../../nls.js\";\nimport type { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigExtensions,\n\tConfigurationScope,\n\ttype IConfigurationNode,\n\ttype IConfigurationRegistry,\n} from \"../../configuration/common/configurationRegistry.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\n\nexport enum DispatchConfig {\n\tCode = 0,\n\tKeyCode = 1,\n}\n\nexport interface IKeyboardConfig {\n\tdispatch: DispatchConfig;\n\tmapAltGrToCtrlAlt: boolean;\n}\n\nexport function readKeyboardConfig(\n\tconfigurationService: IConfigurationService,\n): IKeyboardConfig {\n\tconst keyboard = configurationService.getValue<\n\t\t{ dispatch: any; mapAltGrToCtrlAlt: any } | undefined\n\t>(\"keyboard\");\n\tconst dispatch =\n\t\tkeyboard?.dispatch === \"keyCode\"\n\t\t\t? DispatchConfig.KeyCode\n\t\t\t: DispatchConfig.Code;\n\tconst mapAltGrToCtrlAlt = Boolean(keyboard?.mapAltGrToCtrlAlt);\n\treturn { dispatch, mapAltGrToCtrlAlt };\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\tConfigExtensions.Configuration,\n);\nconst keyboardConfiguration: IConfigurationNode = {\n\tid: \"keyboard\",\n\torder: 15,\n\ttype: \"object\",\n\ttitle: nls.localize(\"keyboardConfigurationTitle\", \"Keyboard\"),\n\tproperties: {\n\t\t\"keyboard.dispatch\": {\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"code\", \"keyCode\"],\n\t\t\tdefault: \"code\",\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"dispatch\",\n\t\t\t\t\"Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.\",\n\t\t\t),\n\t\t\tincluded:\n\t\t\t\tOS === OperatingSystem.Macintosh ||\n\t\t\t\tOS === OperatingSystem.Linux,\n\t\t},\n\t\t\"keyboard.mapAltGrToCtrlAlt\": {\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttype: \"boolean\",\n\t\t\tdefault: false,\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"mapAltGrToCtrlAlt\",\n\t\t\t\t\"Controls if the AltGraph+ modifier should be treated as Ctrl+Alt+.\",\n\t\t\t),\n\t\t\tincluded: OS === OperatingSystem.Windows,\n\t\t},\n\t},\n};\n\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\n"],
  "mappings": ";;AAKA,SAAS,IAAI,uBAAuB;AACpC,YAAY,SAAS;AAErB;AAAA,EACC,cAAc;AAAA,EACd;AAAA,OAGM;AACP,SAAS,gBAAgB;AAElB,IAAK,iBAAL,kBAAKA,oBAAL;AACN,EAAAA,gCAAA,UAAO,KAAP;AACA,EAAAA,gCAAA,aAAU,KAAV;AAFW,SAAAA;AAAA,GAAA;AAUL,SAAS,mBACf,sBACkB;AAClB,QAAM,WAAW,qBAAqB,SAEpC,UAAU;AACZ,QAAM,WACL,UAAU,aAAa,YACpB,kBACA;AACJ,QAAM,oBAAoB,QAAQ,UAAU,iBAAiB;AAC7D,SAAO,EAAE,UAAU,kBAAkB;AACtC;AAZgB;AAchB,MAAM,wBAAwB,SAAS;AAAA,EACtC,iBAAiB;AAClB;AACA,MAAM,wBAA4C;AAAA,EACjD,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,MAAM;AAAA,EACN,OAAO,IAAI,SAAS,8BAA8B,UAAU;AAAA,EAC5D,YAAY;AAAA,IACX,qBAAqB;AAAA,MACpB,OAAO,mBAAmB;AAAA,MAC1B,MAAM;AAAA,MACN,MAAM,CAAC,QAAQ,SAAS;AAAA,MACxB,SAAS;AAAA,MACT,qBAAqB,IAAI;AAAA,QACxB;AAAA,QACA;AAAA,MACD;AAAA,MACA,UACC,OAAO,gBAAgB,aACvB,OAAO,gBAAgB;AAAA,IACzB;AAAA,IACA,8BAA8B;AAAA,MAC7B,OAAO,mBAAmB;AAAA,MAC1B,MAAM;AAAA,MACN,SAAS;AAAA,MACT,qBAAqB,IAAI;AAAA,QACxB;AAAA,QACA;AAAA,MACD;AAAA,MACA,UAAU,OAAO,gBAAgB;AAAA,IAClC;AAAA,EACD;AACD;AAEA,sBAAsB,sBAAsB,qBAAqB;",
  "names": ["DispatchConfig"]
}
