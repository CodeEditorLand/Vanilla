{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/keyboardLayout/common/keyboardLayout.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { ScanCode, ScanCodeUtils } from '../../../base/common/keyCodes.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IKeyboardEvent } from '../../keybinding/common/keybinding.js';\nimport { IKeyboardMapper } from './keyboardMapper.js';\n\nexport const IKeyboardLayoutService = createDecorator<IKeyboardLayoutService>('keyboardLayoutService');\n\nexport interface IWindowsKeyMapping {\n\tvkey: string;\n\tvalue: string;\n\twithShift: string;\n\twithAltGr: string;\n\twithShiftAltGr: string;\n}\nexport interface IWindowsKeyboardMapping {\n\t[code: string]: IWindowsKeyMapping;\n}\nexport interface ILinuxKeyMapping {\n\tvalue: string;\n\twithShift: string;\n\twithAltGr: string;\n\twithShiftAltGr: string;\n}\nexport interface ILinuxKeyboardMapping {\n\t[code: string]: ILinuxKeyMapping;\n}\nexport interface IMacKeyMapping {\n\tvalue: string;\n\tvalueIsDeadKey: boolean;\n\twithShift: string;\n\twithShiftIsDeadKey: boolean;\n\twithAltGr: string;\n\twithAltGrIsDeadKey: boolean;\n\twithShiftAltGr: string;\n\twithShiftAltGrIsDeadKey: boolean;\n}\nexport interface IMacKeyboardMapping {\n\t[code: string]: IMacKeyMapping;\n}\n\nexport type IMacLinuxKeyMapping = IMacKeyMapping | ILinuxKeyMapping;\nexport type IMacLinuxKeyboardMapping = IMacKeyboardMapping | ILinuxKeyboardMapping;\nexport type IKeyboardMapping = IWindowsKeyboardMapping | ILinuxKeyboardMapping | IMacKeyboardMapping;\n\nexport interface IWindowsKeyboardLayoutInfo {\n\tname: string;\n\tid: string;\n\ttext: string;\n}\n\nexport interface ILinuxKeyboardLayoutInfo {\n\tmodel: string;\n\tgroup: number;\n\tlayout: string;\n\tvariant: string;\n\toptions: string;\n\trules: string;\n}\n\nexport interface IMacKeyboardLayoutInfo {\n\tid: string;\n\tlang: string;\n\tlocalizedName?: string;\n}\n\nexport type IKeyboardLayoutInfo = (IWindowsKeyboardLayoutInfo | ILinuxKeyboardLayoutInfo | IMacKeyboardLayoutInfo) & { isUserKeyboardLayout?: boolean; isUSStandard?: true };\n\nexport interface IKeyboardLayoutService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeKeyboardLayout: Event<void>;\n\n\tgetRawKeyboardMapping(): IKeyboardMapping | null;\n\tgetCurrentKeyboardLayout(): IKeyboardLayoutInfo | null;\n\tgetAllKeyboardLayouts(): IKeyboardLayoutInfo[];\n\tgetKeyboardMapper(): IKeyboardMapper;\n\tvalidateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void;\n}\n\nexport function areKeyboardLayoutsEqual(a: IKeyboardLayoutInfo | null, b: IKeyboardLayoutInfo | null): boolean {\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\n\tif ((<IWindowsKeyboardLayoutInfo>a).name && (<IWindowsKeyboardLayoutInfo>b).name && (<IWindowsKeyboardLayoutInfo>a).name === (<IWindowsKeyboardLayoutInfo>b).name) {\n\t\treturn true;\n\t}\n\n\tif ((<IMacKeyboardLayoutInfo>a).id && (<IMacKeyboardLayoutInfo>b).id && (<IMacKeyboardLayoutInfo>a).id === (<IMacKeyboardLayoutInfo>b).id) {\n\t\treturn true;\n\t}\n\n\tif ((<ILinuxKeyboardLayoutInfo>a).model &&\n\t\t(<ILinuxKeyboardLayoutInfo>b).model &&\n\t\t(<ILinuxKeyboardLayoutInfo>a).model === (<ILinuxKeyboardLayoutInfo>b).model &&\n\t\t(<ILinuxKeyboardLayoutInfo>a).layout === (<ILinuxKeyboardLayoutInfo>b).layout\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport function parseKeyboardLayoutDescription(layout: IKeyboardLayoutInfo | null): { label: string; description: string } {\n\tif (!layout) {\n\t\treturn { label: '', description: '' };\n\t}\n\n\tif ((<IWindowsKeyboardLayoutInfo>layout).name) {\n\t\t// windows\n\t\tconst windowsLayout = <IWindowsKeyboardLayoutInfo>layout;\n\t\treturn {\n\t\t\tlabel: windowsLayout.text,\n\t\t\tdescription: ''\n\t\t};\n\t}\n\n\tif ((<IMacKeyboardLayoutInfo>layout).id) {\n\t\tconst macLayout = <IMacKeyboardLayoutInfo>layout;\n\t\tif (macLayout.localizedName) {\n\t\t\treturn {\n\t\t\t\tlabel: macLayout.localizedName,\n\t\t\t\tdescription: ''\n\t\t\t};\n\t\t}\n\n\t\tif (/^com\\.apple\\.keylayout\\./.test(macLayout.id)) {\n\t\t\treturn {\n\t\t\t\tlabel: macLayout.id.replace(/^com\\.apple\\.keylayout\\./, '').replace(/-/, ' '),\n\t\t\t\tdescription: ''\n\t\t\t};\n\t\t}\n\t\tif (/^.*inputmethod\\./.test(macLayout.id)) {\n\t\t\treturn {\n\t\t\t\tlabel: macLayout.id.replace(/^.*inputmethod\\./, '').replace(/[-\\.]/, ' '),\n\t\t\t\tdescription: `Input Method (${macLayout.lang})`\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tlabel: macLayout.lang,\n\t\t\tdescription: ''\n\t\t};\n\t}\n\n\tconst linuxLayout = <ILinuxKeyboardLayoutInfo>layout;\n\n\treturn {\n\t\tlabel: linuxLayout.layout,\n\t\tdescription: ''\n\t};\n}\n\nexport function getKeyboardLayoutId(layout: IKeyboardLayoutInfo): string {\n\tif ((<IWindowsKeyboardLayoutInfo>layout).name) {\n\t\treturn (<IWindowsKeyboardLayoutInfo>layout).name;\n\t}\n\n\tif ((<IMacKeyboardLayoutInfo>layout).id) {\n\t\treturn (<IMacKeyboardLayoutInfo>layout).id;\n\t}\n\n\treturn (<ILinuxKeyboardLayoutInfo>layout).layout;\n}\n\nfunction windowsKeyMappingEquals(a: IWindowsKeyMapping, b: IWindowsKeyMapping): boolean {\n\tif (!a && !b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\treturn (\n\t\ta.vkey === b.vkey\n\t\t&& a.value === b.value\n\t\t&& a.withShift === b.withShift\n\t\t&& a.withAltGr === b.withAltGr\n\t\t&& a.withShiftAltGr === b.withShiftAltGr\n\t);\n}\n\nexport function windowsKeyboardMappingEquals(a: IWindowsKeyboardMapping | null, b: IWindowsKeyboardMapping | null): boolean {\n\tif (!a && !b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\tfor (let scanCode = 0; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\tconst strScanCode = ScanCodeUtils.toString(scanCode);\n\t\tconst aEntry = a[strScanCode];\n\t\tconst bEntry = b[strScanCode];\n\t\tif (!windowsKeyMappingEquals(aEntry, bEntry)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction macLinuxKeyMappingEquals(a: IMacLinuxKeyMapping, b: IMacLinuxKeyMapping): boolean {\n\tif (!a && !b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\treturn (\n\t\ta.value === b.value\n\t\t&& a.withShift === b.withShift\n\t\t&& a.withAltGr === b.withAltGr\n\t\t&& a.withShiftAltGr === b.withShiftAltGr\n\t);\n}\n\nexport function macLinuxKeyboardMappingEquals(a: IMacLinuxKeyboardMapping | null, b: IMacLinuxKeyboardMapping | null): boolean {\n\tif (!a && !b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\tfor (let scanCode = 0; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\tconst strScanCode = ScanCodeUtils.toString(scanCode);\n\t\tconst aEntry = a[strScanCode];\n\t\tconst bEntry = b[strScanCode];\n\t\tif (!macLinuxKeyMappingEquals(aEntry, bEntry)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"],
  "mappings": "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",
  "names": []
}
