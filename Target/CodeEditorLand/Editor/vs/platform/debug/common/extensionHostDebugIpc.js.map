{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/debug/common/extensionHostDebugIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport type {\n\tIChannel,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport type {\n\tIAttachSessionEvent,\n\tICloseSessionEvent,\n\tIExtensionHostDebugService,\n\tIOpenExtensionWindowResult,\n\tIReloadSessionEvent,\n\tITerminateSessionEvent,\n} from \"./extensionHostDebug.js\";\n\nexport class ExtensionHostDebugBroadcastChannel<TContext>\n\timplements IServerChannel<TContext>\n{\n\tstatic readonly ChannelName = \"extensionhostdebugservice\";\n\n\tprivate readonly _onCloseEmitter = new Emitter<ICloseSessionEvent>();\n\tprivate readonly _onReloadEmitter = new Emitter<IReloadSessionEvent>();\n\tprivate readonly _onTerminateEmitter =\n\t\tnew Emitter<ITerminateSessionEvent>();\n\tprivate readonly _onAttachEmitter = new Emitter<IAttachSessionEvent>();\n\n\tcall(ctx: TContext, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase \"close\":\n\t\t\t\treturn Promise.resolve(\n\t\t\t\t\tthis._onCloseEmitter.fire({ sessionId: arg[0] }),\n\t\t\t\t);\n\t\t\tcase \"reload\":\n\t\t\t\treturn Promise.resolve(\n\t\t\t\t\tthis._onReloadEmitter.fire({ sessionId: arg[0] }),\n\t\t\t\t);\n\t\t\tcase \"terminate\":\n\t\t\t\treturn Promise.resolve(\n\t\t\t\t\tthis._onTerminateEmitter.fire({ sessionId: arg[0] }),\n\t\t\t\t);\n\t\t\tcase \"attach\":\n\t\t\t\treturn Promise.resolve(\n\t\t\t\t\tthis._onAttachEmitter.fire({\n\t\t\t\t\t\tsessionId: arg[0],\n\t\t\t\t\t\tport: arg[1],\n\t\t\t\t\t\tsubId: arg[2],\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t}\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tlisten(ctx: TContext, event: string, arg?: any): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase \"close\":\n\t\t\t\treturn this._onCloseEmitter.event;\n\t\t\tcase \"reload\":\n\t\t\t\treturn this._onReloadEmitter.event;\n\t\t\tcase \"terminate\":\n\t\t\t\treturn this._onTerminateEmitter.event;\n\t\t\tcase \"attach\":\n\t\t\t\treturn this._onAttachEmitter.event;\n\t\t}\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n}\n\nexport class ExtensionHostDebugChannelClient\n\textends Disposable\n\timplements IExtensionHostDebugService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private channel: IChannel) {\n\t\tsuper();\n\t}\n\n\treload(sessionId: string): void {\n\t\tthis.channel.call(\"reload\", [sessionId]);\n\t}\n\n\tget onReload(): Event<IReloadSessionEvent> {\n\t\treturn this.channel.listen(\"reload\");\n\t}\n\n\tclose(sessionId: string): void {\n\t\tthis.channel.call(\"close\", [sessionId]);\n\t}\n\n\tget onClose(): Event<ICloseSessionEvent> {\n\t\treturn this.channel.listen(\"close\");\n\t}\n\n\tattachSession(sessionId: string, port: number, subId?: string): void {\n\t\tthis.channel.call(\"attach\", [sessionId, port, subId]);\n\t}\n\n\tget onAttachSession(): Event<IAttachSessionEvent> {\n\t\treturn this.channel.listen(\"attach\");\n\t}\n\n\tterminateSession(sessionId: string, subId?: string): void {\n\t\tthis.channel.call(\"terminate\", [sessionId, subId]);\n\t}\n\n\tget onTerminateSession(): Event<ITerminateSessionEvent> {\n\t\treturn this.channel.listen(\"terminate\");\n\t}\n\n\topenExtensionDevelopmentHostWindow(\n\t\targs: string[],\n\t\tdebugRenderer: boolean,\n\t): Promise<IOpenExtensionWindowResult> {\n\t\treturn this.channel.call(\"openExtensionDevelopmentHostWindow\", [\n\t\t\targs,\n\t\t\tdebugRenderer,\n\t\t]);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAA2B;AACpC,SAAS,kBAAkB;AAcpB,MAAM,mCAEb;AAAA,EAtBA,OAsBA;AAAA;AAAA;AAAA,EACC,OAAgB,cAAc;AAAA,EAEb,kBAAkB,IAAI,QAA4B;AAAA,EAClD,mBAAmB,IAAI,QAA6B;AAAA,EACpD,sBAChB,IAAI,QAAgC;AAAA,EACpB,mBAAmB,IAAI,QAA6B;AAAA,EAErE,KAAK,KAAe,SAAiB,KAAyB;AAC7D,YAAQ,SAAS;AAAA,MAChB,KAAK;AACJ,eAAO,QAAQ;AAAA,UACd,KAAK,gBAAgB,KAAK,EAAE,WAAW,IAAI,CAAC,EAAE,CAAC;AAAA,QAChD;AAAA,MACD,KAAK;AACJ,eAAO,QAAQ;AAAA,UACd,KAAK,iBAAiB,KAAK,EAAE,WAAW,IAAI,CAAC,EAAE,CAAC;AAAA,QACjD;AAAA,MACD,KAAK;AACJ,eAAO,QAAQ;AAAA,UACd,KAAK,oBAAoB,KAAK,EAAE,WAAW,IAAI,CAAC,EAAE,CAAC;AAAA,QACpD;AAAA,MACD,KAAK;AACJ,eAAO,QAAQ;AAAA,UACd,KAAK,iBAAiB,KAAK;AAAA,YAC1B,WAAW,IAAI,CAAC;AAAA,YAChB,MAAM,IAAI,CAAC;AAAA,YACX,OAAO,IAAI,CAAC;AAAA,UACb,CAAC;AAAA,QACF;AAAA,IACF;AACA,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EAEA,OAAO,KAAe,OAAe,KAAuB;AAC3D,YAAQ,OAAO;AAAA,MACd,KAAK;AACJ,eAAO,KAAK,gBAAgB;AAAA,MAC7B,KAAK;AACJ,eAAO,KAAK,iBAAiB;AAAA,MAC9B,KAAK;AACJ,eAAO,KAAK,oBAAoB;AAAA,MACjC,KAAK;AACJ,eAAO,KAAK,iBAAiB;AAAA,IAC/B;AACA,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AACD;AAEO,MAAM,wCACJ,WAET;AAAA,EAGC,YAAoB,SAAmB;AACtC,UAAM;AADa;AAAA,EAEpB;AAAA,EAhFD,OA2EA;AAAA;AAAA;AAAA,EAOC,OAAO,WAAyB;AAC/B,SAAK,QAAQ,KAAK,UAAU,CAAC,SAAS,CAAC;AAAA,EACxC;AAAA,EAEA,IAAI,WAAuC;AAC1C,WAAO,KAAK,QAAQ,OAAO,QAAQ;AAAA,EACpC;AAAA,EAEA,MAAM,WAAyB;AAC9B,SAAK,QAAQ,KAAK,SAAS,CAAC,SAAS,CAAC;AAAA,EACvC;AAAA,EAEA,IAAI,UAAqC;AACxC,WAAO,KAAK,QAAQ,OAAO,OAAO;AAAA,EACnC;AAAA,EAEA,cAAc,WAAmB,MAAc,OAAsB;AACpE,SAAK,QAAQ,KAAK,UAAU,CAAC,WAAW,MAAM,KAAK,CAAC;AAAA,EACrD;AAAA,EAEA,IAAI,kBAA8C;AACjD,WAAO,KAAK,QAAQ,OAAO,QAAQ;AAAA,EACpC;AAAA,EAEA,iBAAiB,WAAmB,OAAsB;AACzD,SAAK,QAAQ,KAAK,aAAa,CAAC,WAAW,KAAK,CAAC;AAAA,EAClD;AAAA,EAEA,IAAI,qBAAoD;AACvD,WAAO,KAAK,QAAQ,OAAO,WAAW;AAAA,EACvC;AAAA,EAEA,mCACC,MACA,eACsC;AACtC,WAAO,KAAK,QAAQ,KAAK,sCAAsC;AAAA,MAC9D;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AACD;",
  "names": []
}
