import{Emitter as n}from"../../../base/common/event.js";import{Disposable as r}from"../../../base/common/lifecycle.js";class c{static ChannelName="extensionhostdebugservice";_onCloseEmitter=new n;_onReloadEmitter=new n;_onTerminateEmitter=new n;_onAttachEmitter=new n;call(s,e,t){switch(e){case"close":return Promise.resolve(this._onCloseEmitter.fire({sessionId:t[0]}));case"reload":return Promise.resolve(this._onReloadEmitter.fire({sessionId:t[0]}));case"terminate":return Promise.resolve(this._onTerminateEmitter.fire({sessionId:t[0]}));case"attach":return Promise.resolve(this._onAttachEmitter.fire({sessionId:t[0],port:t[1],subId:t[2]}))}throw new Error("Method not implemented.")}listen(s,e,t){switch(e){case"close":return this._onCloseEmitter.event;case"reload":return this._onReloadEmitter.event;case"terminate":return this._onTerminateEmitter.event;case"attach":return this._onAttachEmitter.event}throw new Error("Method not implemented.")}}class h extends r{constructor(e){super();this.channel=e}reload(e){this.channel.call("reload",[e])}get onReload(){return this.channel.listen("reload")}close(e){this.channel.call("close",[e])}get onClose(){return this.channel.listen("close")}attachSession(e,t,i){this.channel.call("attach",[e,t,i])}get onAttachSession(){return this.channel.listen("attach")}terminateSession(e,t){this.channel.call("terminate",[e,t])}get onTerminateSession(){return this.channel.listen("terminate")}openExtensionDevelopmentHostWindow(e,t){return this.channel.call("openExtensionDevelopmentHostWindow",[e,t])}}export{c as ExtensionHostDebugBroadcastChannel,h as ExtensionHostDebugChannelClient};
