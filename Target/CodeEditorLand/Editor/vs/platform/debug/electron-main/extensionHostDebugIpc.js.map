{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/debug/electron-main/extensionHostDebugIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AddressInfo, createServer } from 'net';\nimport { IOpenExtensionWindowResult } from '../common/extensionHostDebug.js';\nimport { ExtensionHostDebugBroadcastChannel } from '../common/extensionHostDebugIpc.js';\nimport { OPTIONS, parseArgs } from '../../environment/node/argv.js';\nimport { IWindowsMainService, OpenContext } from '../../windows/electron-main/windows.js';\n\nexport class ElectronExtensionHostDebugBroadcastChannel<TContext> extends ExtensionHostDebugBroadcastChannel<TContext> {\n\n\tconstructor(\n\t\tprivate windowsMainService: IWindowsMainService\n\t) {\n\t\tsuper();\n\t}\n\n\toverride call(ctx: TContext, command: string, arg?: any): Promise<any> {\n\t\tif (command === 'openExtensionDevelopmentHostWindow') {\n\t\t\treturn this.openExtensionDevelopmentHostWindow(arg[0], arg[1]);\n\t\t} else {\n\t\t\treturn super.call(ctx, command, arg);\n\t\t}\n\t}\n\n\tprivate async openExtensionDevelopmentHostWindow(args: string[], debugRenderer: boolean): Promise<IOpenExtensionWindowResult> {\n\t\tconst pargs = parseArgs(args, OPTIONS);\n\t\tpargs.debugRenderer = debugRenderer;\n\n\t\tconst extDevPaths = pargs.extensionDevelopmentPath;\n\t\tif (!extDevPaths) {\n\t\t\treturn { success: false };\n\t\t}\n\n\t\tconst [codeWindow] = await this.windowsMainService.openExtensionDevelopmentHostWindow(extDevPaths, {\n\t\t\tcontext: OpenContext.API,\n\t\t\tcli: pargs,\n\t\t\tforceProfile: pargs.profile,\n\t\t\tforceTempProfile: pargs['profile-temp']\n\t\t});\n\n\t\tif (!debugRenderer) {\n\t\t\treturn { success: true };\n\t\t}\n\n\t\tconst win = codeWindow.win;\n\t\tif (!win) {\n\t\t\treturn { success: true };\n\t\t}\n\n\t\tconst debug = win.webContents.debugger;\n\n\t\tlet listeners = debug.isAttached() ? Infinity : 0;\n\t\tconst server = createServer(listener => {\n\t\t\tif (listeners++ === 0) {\n\t\t\t\tdebug.attach();\n\t\t\t}\n\n\t\t\tlet closed = false;\n\t\t\tconst writeMessage = (message: object) => {\n\t\t\t\tif (!closed) { // in case sendCommand promises settle after closed\n\t\t\t\t\tlistener.write(JSON.stringify(message) + '\\0'); // null-delimited, CDP-compatible\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst onMessage = (_event: Electron.Event, method: string, params: unknown, sessionId?: string) =>\n\t\t\t\twriteMessage(({ method, params, sessionId }));\n\n\t\t\twin.on('close', () => {\n\t\t\t\tdebug.removeListener('message', onMessage);\n\t\t\t\tlistener.end();\n\t\t\t\tclosed = true;\n\t\t\t});\n\n\t\t\tdebug.addListener('message', onMessage);\n\n\t\t\tlet buf = Buffer.alloc(0);\n\t\t\tlistener.on('data', data => {\n\t\t\t\tbuf = Buffer.concat([buf, data]);\n\t\t\t\tfor (let delimiter = buf.indexOf(0); delimiter !== -1; delimiter = buf.indexOf(0)) {\n\t\t\t\t\tlet data: { id: number; sessionId: string; params: {} };\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst contents = buf.slice(0, delimiter).toString('utf8');\n\t\t\t\t\t\tbuf = buf.slice(delimiter + 1);\n\t\t\t\t\t\tdata = JSON.parse(contents);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('error reading cdp line', e);\n\t\t\t\t\t}\n\n\t\t\t\t\t// depends on a new API for which electron.d.ts has not been updated:\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tdebug.sendCommand(data.method, data.params, data.sessionId)\n\t\t\t\t\t\t.then((result: object) => writeMessage({ id: data.id, sessionId: data.sessionId, result }))\n\t\t\t\t\t\t.catch((error: Error) => writeMessage({ id: data.id, sessionId: data.sessionId, error: { code: 0, message: error.message } }));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlistener.on('error', err => {\n\t\t\t\tconsole.error('error on cdp pipe:', err);\n\t\t\t});\n\n\t\t\tlistener.on('close', () => {\n\t\t\t\tclosed = true;\n\t\t\t\tif (--listeners === 0) {\n\t\t\t\t\tdebug.detach();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tawait new Promise<void>(r => server.listen(0, r));\n\t\twin.on('close', () => server.close());\n\n\t\treturn { rendererDebugPort: (server.address() as AddressInfo).port, success: true };\n\t}\n}\n"],
  "mappings": "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",
  "names": ["data"]
}
