{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/debug/electron-main/extensionHostDebugIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type AddressInfo, createServer } from \"net\";\nimport { OPTIONS, parseArgs } from \"../../environment/node/argv.js\";\nimport {\n\ttype IWindowsMainService,\n\tOpenContext,\n} from \"../../windows/electron-main/windows.js\";\nimport type { IOpenExtensionWindowResult } from \"../common/extensionHostDebug.js\";\nimport { ExtensionHostDebugBroadcastChannel } from \"../common/extensionHostDebugIpc.js\";\n\nexport class ElectronExtensionHostDebugBroadcastChannel<\n\tTContext,\n> extends ExtensionHostDebugBroadcastChannel<TContext> {\n\tconstructor(private windowsMainService: IWindowsMainService) {\n\t\tsuper();\n\t}\n\n\toverride call(ctx: TContext, command: string, arg?: any): Promise<any> {\n\t\tif (command === \"openExtensionDevelopmentHostWindow\") {\n\t\t\treturn this.openExtensionDevelopmentHostWindow(arg[0], arg[1]);\n\t\t} else {\n\t\t\treturn super.call(ctx, command, arg);\n\t\t}\n\t}\n\n\tprivate async openExtensionDevelopmentHostWindow(\n\t\targs: string[],\n\t\tdebugRenderer: boolean,\n\t): Promise<IOpenExtensionWindowResult> {\n\t\tconst pargs = parseArgs(args, OPTIONS);\n\t\tpargs.debugRenderer = debugRenderer;\n\n\t\tconst extDevPaths = pargs.extensionDevelopmentPath;\n\t\tif (!extDevPaths) {\n\t\t\treturn { success: false };\n\t\t}\n\n\t\tconst [codeWindow] =\n\t\t\tawait this.windowsMainService.openExtensionDevelopmentHostWindow(\n\t\t\t\textDevPaths,\n\t\t\t\t{\n\t\t\t\t\tcontext: OpenContext.API,\n\t\t\t\t\tcli: pargs,\n\t\t\t\t\tforceProfile: pargs.profile,\n\t\t\t\t\tforceTempProfile: pargs[\"profile-temp\"],\n\t\t\t\t},\n\t\t\t);\n\n\t\tif (!debugRenderer) {\n\t\t\treturn { success: true };\n\t\t}\n\n\t\tconst win = codeWindow.win;\n\t\tif (!win) {\n\t\t\treturn { success: true };\n\t\t}\n\n\t\tconst debug = win.webContents.debugger;\n\n\t\tlet listeners = debug.isAttached() ? Number.POSITIVE_INFINITY : 0;\n\t\tconst server = createServer((listener) => {\n\t\t\tif (listeners++ === 0) {\n\t\t\t\tdebug.attach();\n\t\t\t}\n\n\t\t\tlet closed = false;\n\t\t\tconst writeMessage = (message: object) => {\n\t\t\t\tif (!closed) {\n\t\t\t\t\t// in case sendCommand promises settle after closed\n\t\t\t\t\tlistener.write(JSON.stringify(message) + \"\\0\"); // null-delimited, CDP-compatible\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst onMessage = (\n\t\t\t\t_event: Electron.Event,\n\t\t\t\tmethod: string,\n\t\t\t\tparams: unknown,\n\t\t\t\tsessionId?: string,\n\t\t\t) => writeMessage({ method, params, sessionId });\n\n\t\t\twin.on(\"close\", () => {\n\t\t\t\tdebug.removeListener(\"message\", onMessage);\n\t\t\t\tlistener.end();\n\t\t\t\tclosed = true;\n\t\t\t});\n\n\t\t\tdebug.addListener(\"message\", onMessage);\n\n\t\t\tlet buf = Buffer.alloc(0);\n\t\t\tlistener.on(\"data\", (data) => {\n\t\t\t\tbuf = Buffer.concat([buf, data]);\n\t\t\t\tfor (\n\t\t\t\t\tlet delimiter = buf.indexOf(0);\n\t\t\t\t\tdelimiter !== -1;\n\t\t\t\t\tdelimiter = buf.indexOf(0)\n\t\t\t\t) {\n\t\t\t\t\tlet data: { id: number; sessionId: string; params: {} };\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst contents = buf\n\t\t\t\t\t\t\t.slice(0, delimiter)\n\t\t\t\t\t\t\t.toString(\"utf8\");\n\t\t\t\t\t\tbuf = buf.slice(delimiter + 1);\n\t\t\t\t\t\tdata = JSON.parse(contents);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error(\"error reading cdp line\", e);\n\t\t\t\t\t}\n\n\t\t\t\t\t// depends on a new API for which electron.d.ts has not been updated:\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tdebug\n\t\t\t\t\t\t.sendCommand(data.method, data.params, data.sessionId)\n\t\t\t\t\t\t.then((result: object) =>\n\t\t\t\t\t\t\twriteMessage({\n\t\t\t\t\t\t\t\tid: data.id,\n\t\t\t\t\t\t\t\tsessionId: data.sessionId,\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.catch((error: Error) =>\n\t\t\t\t\t\t\twriteMessage({\n\t\t\t\t\t\t\t\tid: data.id,\n\t\t\t\t\t\t\t\tsessionId: data.sessionId,\n\t\t\t\t\t\t\t\terror: { code: 0, message: error.message },\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlistener.on(\"error\", (err) => {\n\t\t\t\tconsole.error(\"error on cdp pipe:\", err);\n\t\t\t});\n\n\t\t\tlistener.on(\"close\", () => {\n\t\t\t\tclosed = true;\n\t\t\t\tif (--listeners === 0) {\n\t\t\t\t\tdebug.detach();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tawait new Promise<void>((r) => server.listen(0, r));\n\t\twin.on(\"close\", () => server.close());\n\n\t\treturn {\n\t\t\trendererDebugPort: (server.address() as AddressInfo).port,\n\t\t\tsuccess: true,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["data"]
}
