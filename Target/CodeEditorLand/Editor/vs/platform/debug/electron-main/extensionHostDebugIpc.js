import{createServer as v}from"net";import{OPTIONS as I,parseArgs as b}from"../../environment/node/argv.js";import{OpenContext as h}from"../../windows/electron-main/windows.js";import{ExtensionHostDebugBroadcastChannel as E}from"../common/extensionHostDebugIpc.js";class C extends E{constructor(d){super();this.windowsMainService=d}call(d,c,o){return c==="openExtensionDevelopmentHostWindow"?this.openExtensionDevelopmentHostWindow(o[0],o[1]):super.call(d,c,o)}async openExtensionDevelopmentHostWindow(d,c){const o=b(d,I);o.debugRenderer=c;const f=o.extensionDevelopmentPath;if(!f)return{success:!1};const[x]=await this.windowsMainService.openExtensionDevelopmentHostWindow(f,{context:h.API,cli:o,forceProfile:o.profile,forceTempProfile:o["profile-temp"]});if(!c)return{success:!0};const l=x.win;if(!l)return{success:!0};const r=l.webContents.debugger;let w=r.isAttached()?Number.POSITIVE_INFINITY:0;const p=v(n=>{w++===0&&r.attach();let m=!1;const u=a=>{m||n.write(JSON.stringify(a)+"\0")},g=(a,i,e,s)=>u({method:i,params:e,sessionId:s});l.on("close",()=>{r.removeListener("message",g),n.end(),m=!0}),r.addListener("message",g);let t=Buffer.alloc(0);n.on("data",a=>{t=Buffer.concat([t,a]);for(let i=t.indexOf(0);i!==-1;i=t.indexOf(0)){let e;try{const s=t.slice(0,i).toString("utf8");t=t.slice(i+1),e=JSON.parse(s)}catch{}r.sendCommand(e.method,e.params,e.sessionId).then(s=>u({id:e.id,sessionId:e.sessionId,result:s})).catch(s=>u({id:e.id,sessionId:e.sessionId,error:{code:0,message:s.message}}))}}),n.on("error",a=>{}),n.on("close",()=>{m=!0,--w===0&&r.detach()})});return await new Promise(n=>p.listen(0,n)),l.on("close",()=>p.close()),{rendererDebugPort:p.address().port,success:!0}}}export{C as ElectronExtensionHostDebugBroadcastChannel};
