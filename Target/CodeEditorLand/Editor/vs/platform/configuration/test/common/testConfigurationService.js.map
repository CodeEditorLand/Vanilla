{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/test/common/testConfigurationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { TernarySearchTree } from '../../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { getConfigurationValue, IConfigurationChangeEvent, IConfigurationOverrides, IConfigurationService, IConfigurationValue, isConfigurationOverrides } from '../../common/configuration.js';\nimport { Extensions, IConfigurationRegistry } from '../../common/configurationRegistry.js';\nimport { Registry } from '../../../registry/common/platform.js';\n\nexport class TestConfigurationService implements IConfigurationService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate configuration: any;\n\treadonly onDidChangeConfigurationEmitter = new Emitter<IConfigurationChangeEvent>();\n\treadonly onDidChangeConfiguration = this.onDidChangeConfigurationEmitter.event;\n\n\tconstructor(configuration?: any) {\n\t\tthis.configuration = configuration || Object.create(null);\n\t}\n\n\tprivate configurationByRoot: TernarySearchTree<string, any> = TernarySearchTree.forPaths<any>();\n\n\tpublic reloadConfiguration<T>(): Promise<T> {\n\t\treturn Promise.resolve(this.getValue());\n\t}\n\n\tpublic getValue(arg1?: any, arg2?: any): any {\n\t\tlet configuration;\n\t\tconst overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : undefined;\n\t\tif (overrides) {\n\t\t\tif (overrides.resource) {\n\t\t\t\tconfiguration = this.configurationByRoot.findSubstr(overrides.resource.fsPath);\n\t\t\t}\n\t\t}\n\t\tconfiguration = configuration ? configuration : this.configuration;\n\t\tif (arg1 && typeof arg1 === 'string') {\n\t\t\treturn configuration[arg1] ?? getConfigurationValue(configuration, arg1);\n\t\t}\n\t\treturn configuration;\n\t}\n\n\tpublic updateValue(key: string, value: any): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic setUserConfiguration(key: any, value: any, root?: URI): Promise<void> {\n\t\tif (root) {\n\t\t\tconst configForRoot = this.configurationByRoot.get(root.fsPath) || Object.create(null);\n\t\t\tconfigForRoot[key] = value;\n\t\t\tthis.configurationByRoot.set(root.fsPath, configForRoot);\n\t\t} else {\n\t\t\tthis.configuration[key] = value;\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate overrideIdentifiers: Map<string, string[]> = new Map();\n\tpublic setOverrideIdentifiers(key: string, identifiers: string[]): void {\n\t\tthis.overrideIdentifiers.set(key, identifiers);\n\t}\n\n\tpublic inspect<T>(key: string, overrides?: IConfigurationOverrides): IConfigurationValue<T> {\n\t\tconst config = this.getValue(undefined, overrides);\n\n\t\treturn {\n\t\t\tvalue: getConfigurationValue<T>(config, key),\n\t\t\tdefaultValue: getConfigurationValue<T>(config, key),\n\t\t\tuserValue: getConfigurationValue<T>(config, key),\n\t\t\toverrideIdentifiers: this.overrideIdentifiers.get(key)\n\t\t};\n\t}\n\n\tpublic keys() {\n\t\treturn {\n\t\t\tdefault: Object.keys(Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties()),\n\t\t\tuser: Object.keys(this.configuration),\n\t\t\tworkspace: [],\n\t\t\tworkspaceFolder: []\n\t\t};\n\t}\n\n\tpublic getConfigurationData() {\n\t\treturn null;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,uBAAuB,2BAA2B,yBAAyB,uBAAuB,qBAAqB,gCAAgC;AAChK,SAAS,YAAY,8BAA8B;AACnD,SAAS,gBAAgB;AAElB,MAAM,yBAA0D;AAAA,EAZvE,OAYuE;AAAA;AAAA;AAAA,EAC/D;AAAA,EAEC;AAAA,EACC,kCAAkC,IAAI,QAAmC;AAAA,EACzE,2BAA2B,KAAK,gCAAgC;AAAA,EAEzE,YAAY,eAAqB;AAChC,SAAK,gBAAgB,iBAAiB,uBAAO,OAAO,IAAI;AAAA,EACzD;AAAA,EAEQ,sBAAsD,kBAAkB,SAAc;AAAA,EAEvF,sBAAqC;AAC3C,WAAO,QAAQ,QAAQ,KAAK,SAAS,CAAC;AAAA,EACvC;AAAA,EAEO,SAAS,MAAY,MAAiB;AAC5C,QAAI;AACJ,UAAM,YAAY,yBAAyB,IAAI,IAAI,OAAO,yBAAyB,IAAI,IAAI,OAAO;AAClG,QAAI,WAAW;AACd,UAAI,UAAU,UAAU;AACvB,wBAAgB,KAAK,oBAAoB,WAAW,UAAU,SAAS,MAAM;AAAA,MAC9E;AAAA,IACD;AACA,oBAAgB,gBAAgB,gBAAgB,KAAK;AACrD,QAAI,QAAQ,OAAO,SAAS,UAAU;AACrC,aAAO,cAAc,IAAI,KAAK,sBAAsB,eAAe,IAAI;AAAA,IACxE;AACA,WAAO;AAAA,EACR;AAAA,EAEO,YAAY,KAAa,OAA2B;AAC1D,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEO,qBAAqB,KAAU,OAAY,MAA2B;AAC5E,QAAI,MAAM;AACT,YAAM,gBAAgB,KAAK,oBAAoB,IAAI,KAAK,MAAM,KAAK,uBAAO,OAAO,IAAI;AACrF,oBAAc,GAAG,IAAI;AACrB,WAAK,oBAAoB,IAAI,KAAK,QAAQ,aAAa;AAAA,IACxD,OAAO;AACN,WAAK,cAAc,GAAG,IAAI;AAAA,IAC3B;AAEA,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEQ,sBAA6C,oBAAI,IAAI;AAAA,EACtD,uBAAuB,KAAa,aAA6B;AACvE,SAAK,oBAAoB,IAAI,KAAK,WAAW;AAAA,EAC9C;AAAA,EAEO,QAAW,KAAa,WAA6D;AAC3F,UAAM,SAAS,KAAK,SAAS,QAAW,SAAS;AAEjD,WAAO;AAAA,MACN,OAAO,sBAAyB,QAAQ,GAAG;AAAA,MAC3C,cAAc,sBAAyB,QAAQ,GAAG;AAAA,MAClD,WAAW,sBAAyB,QAAQ,GAAG;AAAA,MAC/C,qBAAqB,KAAK,oBAAoB,IAAI,GAAG;AAAA,IACtD;AAAA,EACD;AAAA,EAEO,OAAO;AACb,WAAO;AAAA,MACN,SAAS,OAAO,KAAK,SAAS,GAA2B,WAAW,aAAa,EAAE,2BAA2B,CAAC;AAAA,MAC/G,MAAM,OAAO,KAAK,KAAK,aAAa;AAAA,MACpC,WAAW,CAAC;AAAA,MACZ,iBAAiB,CAAC;AAAA,IACnB;AAAA,EACD;AAAA,EAEO,uBAAuB;AAC7B,WAAO;AAAA,EACR;AACD;",
  "names": []
}
