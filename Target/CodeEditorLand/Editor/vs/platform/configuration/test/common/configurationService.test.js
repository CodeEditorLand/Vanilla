import e from"assert";import{VSBuffer as g}from"../../../../base/common/buffer.js";import{Event as m}from"../../../../base/common/event.js";import{Schemas as b}from"../../../../base/common/network.js";import{URI as w}from"../../../../base/common/uri.js";import{runWithFakedTimers as l}from"../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as C}from"../../../../base/test/common/utils.js";import{ConfigurationTarget as p,isConfigured as v}from"../../common/configuration.js";import{Extensions as f}from"../../common/configurationRegistry.js";import{ConfigurationService as u}from"../../common/configurationService.js";import"../../../files/common/files.js";import{FileService as k}from"../../../files/common/fileService.js";import{InMemoryFileSystemProvider as V}from"../../../files/common/inMemoryFilesystemProvider.js";import{NullLogService as s}from"../../../log/common/log.js";import{FilePolicyService as E}from"../../../policy/common/filePolicyService.js";import{NullPolicyService as c}from"../../../policy/common/policy.js";import{Registry as d}from"../../../registry/common/platform.js";suite("ConfigurationService.test.ts",()=>{const a=C();let o,r;setup(async()=>{o=a.add(new k(new s));const n=a.add(new V);a.add(o.registerProvider(b.file,n)),r=w.file("settings.json")}),test("simple",()=>l({useFakeTimers:!0},async()=>{await o.writeFile(r,g.fromString('{ "foo": "bar" }'));const n=a.add(new u(r,o,new c,new s));await n.initialize();const t=n.getValue();e.ok(t),e.strictEqual(t.foo,"bar")})),test("config gets flattened",()=>l({useFakeTimers:!0},async()=>{await o.writeFile(r,g.fromString('{ "testworkbench.editor.tabs": true }'));const n=a.add(new u(r,o,new c,new s));await n.initialize();const t=n.getValue();e.ok(t),e.ok(t.testworkbench),e.ok(t.testworkbench.editor),e.strictEqual(t.testworkbench.editor.tabs,!0)})),test("error case does not explode",()=>l({useFakeTimers:!0},async()=>{await o.writeFile(r,g.fromString(",,,,"));const n=a.add(new u(r,o,new c,new s));await n.initialize();const t=n.getValue();e.ok(t)})),test("missing file does not explode",()=>l({useFakeTimers:!0},async()=>{const n=a.add(new u(w.file("__testFile"),o,new c,new s));await n.initialize();const t=n.getValue();e.ok(t)})),test("trigger configuration change event when file does not exist",()=>l({useFakeTimers:!0},async()=>{const n=a.add(new u(r,o,new c,new s));return await n.initialize(),new Promise((t,i)=>{a.add(m.filter(n.onDidChangeConfiguration,S=>S.source===p.USER)(()=>{e.strictEqual(n.getValue("foo"),"bar"),t()})),o.writeFile(r,g.fromString('{ "foo": "bar" }')).catch(i)})})),test("trigger configuration change event when file exists",()=>l({useFakeTimers:!0},async()=>{const n=a.add(new u(r,o,new c,new s));return await o.writeFile(r,g.fromString('{ "foo": "bar" }')),await n.initialize(),new Promise(t=>{a.add(m.filter(n.onDidChangeConfiguration,i=>i.source===p.USER)(async i=>{e.strictEqual(n.getValue("foo"),"barz"),t()})),o.writeFile(r,g.fromString('{ "foo": "barz" }'))})})),test("reloadConfiguration",()=>l({useFakeTimers:!0},async()=>{await o.writeFile(r,g.fromString('{ "foo": "bar" }'));const n=a.add(new u(r,o,new c,new s));await n.initialize();let t=n.getValue();e.ok(t),e.strictEqual(t.foo,"bar"),await o.writeFile(r,g.fromString('{ "foo": "changed" }')),await n.reloadConfiguration(),t=n.getValue(),e.ok(t),e.strictEqual(t.foo,"changed")})),test("model defaults",()=>l({useFakeTimers:!0},async()=>{d.as(f.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"configuration.service.testSetting":{type:"string",default:"isSet"}}});let t=a.add(new u(w.file("__testFile"),o,new c,new s));await t.initialize();let i=t.getValue();e.ok(i),e.strictEqual(i.configuration.service.testSetting,"isSet"),await o.writeFile(r,g.fromString('{ "testworkbench.editor.tabs": true }')),t=a.add(new u(r,o,new c,new s)),await t.initialize(),i=t.getValue(),e.ok(i),e.strictEqual(i.configuration.service.testSetting,"isSet"),await o.writeFile(r,g.fromString('{ "configuration.service.testSetting": "isChanged" }')),await t.reloadConfiguration(),i=t.getValue(),e.ok(i),e.strictEqual(i.configuration.service.testSetting,"isChanged")})),test("lookup",()=>l({useFakeTimers:!0},async()=>{d.as(f.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"lookup.service.testSetting":{type:"string",default:"isSet"}}});const t=a.add(new u(r,o,new c,new s));await t.initialize();let i=t.inspect("something.missing");e.strictEqual(i.value,void 0),e.strictEqual(i.defaultValue,void 0),e.strictEqual(i.userValue,void 0),e.strictEqual(v(i),!1),i=t.inspect("lookup.service.testSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.value,"isSet"),e.strictEqual(i.userValue,void 0),e.strictEqual(v(i),!1),await o.writeFile(r,g.fromString('{ "lookup.service.testSetting": "bar" }')),await t.reloadConfiguration(),i=t.inspect("lookup.service.testSetting"),e.strictEqual(i.defaultValue,"isSet"),e.strictEqual(i.userValue,"bar"),e.strictEqual(i.value,"bar"),e.strictEqual(v(i),!0)})),test("lookup with null",()=>l({useFakeTimers:!0},async()=>{d.as(f.Configuration).registerConfiguration({id:"_testNull",type:"object",properties:{"lookup.service.testNullSetting":{type:"null"}}});const t=a.add(new u(r,o,new c,new s));await t.initialize();let i=t.inspect("lookup.service.testNullSetting");e.strictEqual(i.defaultValue,null),e.strictEqual(i.value,null),e.strictEqual(i.userValue,void 0),await o.writeFile(r,g.fromString('{ "lookup.service.testNullSetting": null }')),await t.reloadConfiguration(),i=t.inspect("lookup.service.testNullSetting"),e.strictEqual(i.defaultValue,null),e.strictEqual(i.value,null),e.strictEqual(i.userValue,null)})),test("update configuration",async()=>{d.as(f.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"configurationService.testSetting":{type:"string",default:"isSet"}}});const t=a.add(new u(r,o,new c,new s));await t.initialize(),await t.updateValue("configurationService.testSetting","value"),e.strictEqual(t.getValue("configurationService.testSetting"),"value")}),test("update configuration when exist",async()=>{d.as(f.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"configurationService.testSetting":{type:"string",default:"isSet"}}});const t=a.add(new u(r,o,new c,new s));await t.initialize(),await t.updateValue("configurationService.testSetting","value"),await t.updateValue("configurationService.testSetting","updatedValue"),e.strictEqual(t.getValue("configurationService.testSetting"),"updatedValue")}),test("update configuration to default value should remove",async()=>{d.as(f.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"configurationService.testSetting":{type:"string",default:"isSet"}}});const t=a.add(new u(r,o,new c,new s));await t.initialize(),await t.updateValue("configurationService.testSetting","value"),await t.updateValue("configurationService.testSetting","isSet");const i=t.inspect("configurationService.testSetting");e.strictEqual(i.userValue,void 0)}),test("update configuration should remove when undefined is passed",async()=>{d.as(f.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"configurationService.testSetting":{type:"string",default:"isSet"}}});const t=a.add(new u(r,o,new c,new s));await t.initialize(),await t.updateValue("configurationService.testSetting","value"),await t.updateValue("configurationService.testSetting",void 0);const i=t.inspect("configurationService.testSetting");e.strictEqual(i.userValue,void 0)}),test("update unknown configuration",async()=>{const n=a.add(new u(r,o,new c,new s));await n.initialize(),await n.updateValue("configurationService.unknownSetting","value"),e.strictEqual(n.getValue("configurationService.unknownSetting"),"value")}),test("update configuration in non user target throws error",async()=>{d.as(f.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"configurationService.testSetting":{type:"string",default:"isSet"}}});const t=a.add(new u(r,o,new c,new s));await t.initialize();try{await t.updateValue("configurationService.testSetting","value",p.WORKSPACE),e.fail("Should fail with error")}catch{}}),test("update configuration throws error for policy setting",async()=>{d.as(f.Configuration).registerConfiguration({id:"_test",type:"object",properties:{"configurationService.policySetting":{type:"string",default:"isSet",policy:{name:"configurationService.policySetting",minimumVersion:"1.0.0"}}}});const t=new s,i=w.file("policies.json");await o.writeFile(i,g.fromString('{ "configurationService.policySetting": "policyValue" }'));const S=a.add(new E(i,o,t)),y=a.add(new u(r,o,S,t));await y.initialize();try{await y.updateValue("configurationService.policySetting","value"),e.fail("Should throw error")}catch{}})});
