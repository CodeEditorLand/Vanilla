import e from"assert";import{Event as c}from"../../../../base/common/event.js";import{URI as f}from"../../../../base/common/uri.js";import{DefaultConfiguration as m,PolicyConfiguration as S}from"../../common/configurations.js";import"../../../files/common/files.js";import{FileService as w}from"../../../files/common/fileService.js";import{InMemoryFileSystemProvider as V}from"../../../files/common/inMemoryFilesystemProvider.js";import{NullLogService as u}from"../../../log/common/log.js";import{Extensions as g}from"../../common/configurationRegistry.js";import{Registry as y}from"../../../registry/common/platform.js";import{VSBuffer as l}from"../../../../base/common/buffer.js";import{deepClone as C}from"../../../../base/common/objects.js";import"../../../policy/common/policy.js";import{FilePolicyService as E}from"../../../policy/common/filePolicyService.js";import{runWithFakedTimers as d}from"../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as q}from"../../../../base/test/common/utils.js";suite("PolicyConfiguration",()=>{const r=q();let t,n,p;const a=f.file("policyFile").with({scheme:"vscode-tests"}),s={id:"policyConfiguration",order:1,title:"a",type:"object",properties:{"policy.settingA":{type:"string",default:"defaultValueA",policy:{name:"PolicySettingA",minimumVersion:"1.0.0"}},"policy.settingB":{type:"string",default:"defaultValueB",policy:{name:"PolicySettingB",minimumVersion:"1.0.0"}},"nonPolicy.setting":{type:"boolean",default:!0}}};suiteSetup(()=>y.as(g.Configuration).registerConfiguration(s)),suiteTeardown(()=>y.as(g.Configuration).deregisterConfigurations([s])),setup(async()=>{const i=r.add(new m(new u));await i.initialize(),n=r.add(new w(new u));const o=r.add(new V);r.add(n.registerProvider(a.scheme,o)),p=r.add(new E(a,n,new u)),t=r.add(new S(i,p,new u))}),test("initialize: with policies",async()=>{await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingA:"policyValueA"}))),await t.initialize();const i=t.configurationModel;e.strictEqual(i.getValue("policy.settingA"),"policyValueA"),e.strictEqual(i.getValue("policy.settingB"),void 0),e.strictEqual(i.getValue("nonPolicy.setting"),void 0),e.deepStrictEqual(i.keys,["policy.settingA"]),e.deepStrictEqual(i.overrides,[])}),test("initialize: no policies",async()=>{await t.initialize();const i=t.configurationModel;e.deepStrictEqual(i.keys,[]),e.deepStrictEqual(i.overrides,[]),e.strictEqual(i.getValue("policy.settingA"),void 0),e.strictEqual(i.getValue("policy.settingB"),void 0),e.strictEqual(i.getValue("nonPolicy.setting"),void 0)}),test("initialize: with policies but not registered",async()=>{await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingA:"policyValueA",PolicySettingB:"policyValueB",PolicySettingC:"policyValueC"}))),await t.initialize();const i=t.configurationModel;e.strictEqual(i.getValue("policy.settingA"),"policyValueA"),e.strictEqual(i.getValue("policy.settingB"),"policyValueB"),e.strictEqual(i.getValue("nonPolicy.setting"),void 0),e.deepStrictEqual(i.keys,["policy.settingA","policy.settingB"]),e.deepStrictEqual(i.overrides,[])}),test("change: when policy is added",async()=>{await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingA:"policyValueA"}))),await t.initialize(),await d({useFakeTimers:!0},async()=>{const o=c.toPromise(t.onDidChangeConfiguration);await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingA:"policyValueA",PolicySettingB:"policyValueB",PolicySettingC:"policyValueC"}))),await o});const i=t.configurationModel;e.strictEqual(i.getValue("policy.settingA"),"policyValueA"),e.strictEqual(i.getValue("policy.settingB"),"policyValueB"),e.strictEqual(i.getValue("nonPolicy.setting"),void 0),e.deepStrictEqual(i.keys,["policy.settingA","policy.settingB"]),e.deepStrictEqual(i.overrides,[])}),test("change: when policy is updated",async()=>{await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingA:"policyValueA"}))),await t.initialize(),await d({useFakeTimers:!0},async()=>{const o=c.toPromise(t.onDidChangeConfiguration);await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingA:"policyValueAChanged"}))),await o});const i=t.configurationModel;e.strictEqual(i.getValue("policy.settingA"),"policyValueAChanged"),e.strictEqual(i.getValue("policy.settingB"),void 0),e.strictEqual(i.getValue("nonPolicy.setting"),void 0),e.deepStrictEqual(i.keys,["policy.settingA"]),e.deepStrictEqual(i.overrides,[])}),test("change: when policy is removed",async()=>{await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingA:"policyValueA"}))),await t.initialize(),await d({useFakeTimers:!0},async()=>{const o=c.toPromise(t.onDidChangeConfiguration);await n.writeFile(a,l.fromString(JSON.stringify({}))),await o});const i=t.configurationModel;e.strictEqual(i.getValue("policy.settingA"),void 0),e.strictEqual(i.getValue("policy.settingB"),void 0),e.strictEqual(i.getValue("nonPolicy.setting"),void 0),e.deepStrictEqual(i.keys,[]),e.deepStrictEqual(i.overrides,[])}),test("change: when policy setting is registered",async()=>{await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingC:"policyValueC"}))),await t.initialize();const i=c.toPromise(t.onDidChangeConfiguration);s.properties["policy.settingC"]={type:"string",default:"defaultValueC",policy:{name:"PolicySettingC",minimumVersion:"1.0.0"}},y.as(g.Configuration).registerConfiguration(C(s)),await i;const o=t.configurationModel;e.strictEqual(o.getValue("policy.settingC"),"policyValueC"),e.strictEqual(o.getValue("policy.settingA"),void 0),e.strictEqual(o.getValue("policy.settingB"),void 0),e.strictEqual(o.getValue("nonPolicy.setting"),void 0),e.deepStrictEqual(o.keys,["policy.settingC"]),e.deepStrictEqual(o.overrides,[])}),test("change: when policy setting is deregistered",async()=>{await n.writeFile(a,l.fromString(JSON.stringify({PolicySettingA:"policyValueA"}))),await t.initialize();const i=c.toPromise(t.onDidChangeConfiguration);y.as(g.Configuration).deregisterConfigurations([s]),await i;const o=t.configurationModel;e.strictEqual(o.getValue("policy.settingA"),void 0),e.strictEqual(o.getValue("policy.settingB"),void 0),e.strictEqual(o.getValue("nonPolicy.setting"),void 0),e.deepStrictEqual(o.keys,[]),e.deepStrictEqual(o.overrides,[])})});
