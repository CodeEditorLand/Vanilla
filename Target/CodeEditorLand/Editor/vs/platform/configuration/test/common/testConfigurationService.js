import{Emitter as a}from"../../../../base/common/event.js";import{TernarySearchTree as s}from"../../../../base/common/ternarySearchTree.js";import"../../../../base/common/uri.js";import{getConfigurationValue as t,isConfigurationOverrides as o}from"../../common/configuration.js";import{Extensions as u}from"../../common/configurationRegistry.js";import{Registry as f}from"../../../registry/common/platform.js";class P{_serviceBrand;configuration;onDidChangeConfigurationEmitter=new a;onDidChangeConfiguration=this.onDidChangeConfigurationEmitter.event;constructor(i){this.configuration=i||Object.create(null)}configurationByRoot=s.forPaths();reloadConfiguration(){return Promise.resolve(this.getValue())}getValue(i,r){let e;const n=o(i)?i:o(r)?r:void 0;return n&&n.resource&&(e=this.configurationByRoot.findSubstr(n.resource.fsPath)),e=e||this.configuration,i&&typeof i=="string"?e[i]??t(e,i):e}updateValue(i,r){return Promise.resolve(void 0)}setUserConfiguration(i,r,e){if(e){const n=this.configurationByRoot.get(e.fsPath)||Object.create(null);n[i]=r,this.configurationByRoot.set(e.fsPath,n)}else this.configuration[i]=r;return Promise.resolve(void 0)}overrideIdentifiers=new Map;setOverrideIdentifiers(i,r){this.overrideIdentifiers.set(i,r)}inspect(i,r){const e=this.getValue(void 0,r);return{value:t(e,i),defaultValue:t(e,i),userValue:t(e,i),overrideIdentifiers:this.overrideIdentifiers.get(i)}}keys(){return{default:Object.keys(f.as(u.Configuration).getConfigurationProperties()),user:Object.keys(this.configuration),workspace:[],workspaceFolder:[]}}getConfigurationData(){return null}}export{P as TestConfigurationService};
