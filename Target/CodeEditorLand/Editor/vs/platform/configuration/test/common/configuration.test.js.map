{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/test/common/configuration.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { merge, removeFromValueTree } from '../../common/configuration.js';\nimport { mergeChanges } from '../../common/configurationModels.js';\n\nsuite('Configuration', () => {\n\n\ttest('simple merge', () => {\n\t\tlet base = { 'a': 1, 'b': 2 };\n\t\tmerge(base, { 'a': 3, 'c': 4 }, true);\n\t\tassert.deepStrictEqual(base, { 'a': 3, 'b': 2, 'c': 4 });\n\t\tbase = { 'a': 1, 'b': 2 };\n\t\tmerge(base, { 'a': 3, 'c': 4 }, false);\n\t\tassert.deepStrictEqual(base, { 'a': 1, 'b': 2, 'c': 4 });\n\t});\n\n\ttest('object merge', () => {\n\t\tconst base = { 'a': { 'b': 1, 'c': true, 'd': 2 } };\n\t\tmerge(base, { 'a': { 'b': undefined, 'c': false, 'e': 'a' } }, true);\n\t\tassert.deepStrictEqual(base, { 'a': { 'b': undefined, 'c': false, 'd': 2, 'e': 'a' } });\n\t});\n\n\ttest('array merge', () => {\n\t\tconst base = { 'a': ['b', 'c'] };\n\t\tmerge(base, { 'a': ['b', 'd'] }, true);\n\t\tassert.deepStrictEqual(base, { 'a': ['b', 'd'] });\n\t});\n\n\ttest('removeFromValueTree: remove a non existing key', () => {\n\t\tconst target = { 'a': { 'b': 2 } };\n\n\t\tremoveFromValueTree(target, 'c');\n\n\t\tassert.deepStrictEqual(target, { 'a': { 'b': 2 } });\n\t});\n\n\ttest('removeFromValueTree: remove a multi segmented key from an object that has only sub sections of the key', () => {\n\t\tconst target = { 'a': { 'b': 2 } };\n\n\t\tremoveFromValueTree(target, 'a.b.c');\n\n\t\tassert.deepStrictEqual(target, { 'a': { 'b': 2 } });\n\t});\n\n\ttest('removeFromValueTree: remove a single segmented key', () => {\n\t\tconst target = { 'a': 1 };\n\n\t\tremoveFromValueTree(target, 'a');\n\n\t\tassert.deepStrictEqual(target, {});\n\t});\n\n\ttest('removeFromValueTree: remove a single segmented key when its value is undefined', () => {\n\t\tconst target = { 'a': undefined };\n\n\t\tremoveFromValueTree(target, 'a');\n\n\t\tassert.deepStrictEqual(target, {});\n\t});\n\n\ttest('removeFromValueTree: remove a multi segmented key when its value is undefined', () => {\n\t\tconst target = { 'a': { 'b': 1 } };\n\n\t\tremoveFromValueTree(target, 'a.b');\n\n\t\tassert.deepStrictEqual(target, {});\n\t});\n\n\ttest('removeFromValueTree: remove a multi segmented key when its value is array', () => {\n\t\tconst target = { 'a': { 'b': [1] } };\n\n\t\tremoveFromValueTree(target, 'a.b');\n\n\t\tassert.deepStrictEqual(target, {});\n\t});\n\n\ttest('removeFromValueTree: remove a multi segmented key first segment value is array', () => {\n\t\tconst target = { 'a': [1] };\n\n\t\tremoveFromValueTree(target, 'a.0');\n\n\t\tassert.deepStrictEqual(target, { 'a': [1] });\n\t});\n\n\ttest('removeFromValueTree: remove when key is the first segmenet', () => {\n\t\tconst target = { 'a': { 'b': 1 } };\n\n\t\tremoveFromValueTree(target, 'a');\n\n\t\tassert.deepStrictEqual(target, {});\n\t});\n\n\ttest('removeFromValueTree: remove a multi segmented key when the first node has more values', () => {\n\t\tconst target = { 'a': { 'b': { 'c': 1 }, 'd': 1 } };\n\n\t\tremoveFromValueTree(target, 'a.b.c');\n\n\t\tassert.deepStrictEqual(target, { 'a': { 'd': 1 } });\n\t});\n\n\ttest('removeFromValueTree: remove a multi segmented key when in between node has more values', () => {\n\t\tconst target = { 'a': { 'b': { 'c': { 'd': 1 }, 'd': 1 } } };\n\n\t\tremoveFromValueTree(target, 'a.b.c.d');\n\n\t\tassert.deepStrictEqual(target, { 'a': { 'b': { 'd': 1 } } });\n\t});\n\n\ttest('removeFromValueTree: remove a multi segmented key when the last but one node has more values', () => {\n\t\tconst target = { 'a': { 'b': { 'c': 1, 'd': 1 } } };\n\n\t\tremoveFromValueTree(target, 'a.b.c');\n\n\t\tassert.deepStrictEqual(target, { 'a': { 'b': { 'd': 1 } } });\n\t});\n\n});\n\nsuite('Configuration Changes: Merge', () => {\n\n\ttest('merge only keys', () => {\n\t\tconst actual = mergeChanges({ keys: ['a', 'b'], overrides: [] }, { keys: ['c', 'd'], overrides: [] });\n\t\tassert.deepStrictEqual(actual, { keys: ['a', 'b', 'c', 'd'], overrides: [] });\n\t});\n\n\ttest('merge only keys with duplicates', () => {\n\t\tconst actual = mergeChanges({ keys: ['a', 'b'], overrides: [] }, { keys: ['c', 'd'], overrides: [] }, { keys: ['a', 'd', 'e'], overrides: [] });\n\t\tassert.deepStrictEqual(actual, { keys: ['a', 'b', 'c', 'd', 'e'], overrides: [] });\n\t});\n\n\ttest('merge only overrides', () => {\n\t\tconst actual = mergeChanges({ keys: [], overrides: [['a', ['1', '2']]] }, { keys: [], overrides: [['b', ['3', '4']]] });\n\t\tassert.deepStrictEqual(actual, { keys: [], overrides: [['a', ['1', '2']], ['b', ['3', '4']]] });\n\t});\n\n\ttest('merge only overrides with duplicates', () => {\n\t\tconst actual = mergeChanges({ keys: [], overrides: [['a', ['1', '2']], ['b', ['5', '4']]] }, { keys: [], overrides: [['b', ['3', '4']]] }, { keys: [], overrides: [['c', ['1', '4']], ['a', ['2', '3']]] });\n\t\tassert.deepStrictEqual(actual, { keys: [], overrides: [['a', ['1', '2', '3']], ['b', ['5', '4', '3']], ['c', ['1', '4']]] });\n\t});\n\n\ttest('merge', () => {\n\t\tconst actual = mergeChanges({ keys: ['b', 'b'], overrides: [['a', ['1', '2']], ['b', ['5', '4']]] }, { keys: ['b'], overrides: [['b', ['3', '4']]] }, { keys: ['c', 'a'], overrides: [['c', ['1', '4']], ['a', ['2', '3']]] });\n\t\tassert.deepStrictEqual(actual, { keys: ['b', 'c', 'a'], overrides: [['a', ['1', '2', '3']], ['b', ['5', '4', '3']], ['c', ['1', '4']]] });\n\t});\n\n\ttest('merge single change', () => {\n\t\tconst actual = mergeChanges({ keys: ['b', 'b'], overrides: [['a', ['1', '2']], ['b', ['5', '4']]] });\n\t\tassert.deepStrictEqual(actual, { keys: ['b', 'b'], overrides: [['a', ['1', '2']], ['b', ['5', '4']]] });\n\t});\n\n\ttest('merge no changes', () => {\n\t\tconst actual = mergeChanges();\n\t\tassert.deepStrictEqual(actual, { keys: [], overrides: [] });\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
