{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/test/common/policyConfiguration.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Event } from '../../../../base/common/event.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DefaultConfiguration, PolicyConfiguration } from '../../common/configurations.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { Extensions, IConfigurationNode, IConfigurationRegistry } from '../../common/configurationRegistry.js';\nimport { Registry } from '../../../registry/common/platform.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { deepClone } from '../../../../base/common/objects.js';\nimport { IPolicyService } from '../../../policy/common/policy.js';\nimport { FilePolicyService } from '../../../policy/common/filePolicyService.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('PolicyConfiguration', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet testObject: PolicyConfiguration;\n\tlet fileService: IFileService;\n\tlet policyService: IPolicyService;\n\tconst policyFile = URI.file('policyFile').with({ scheme: 'vscode-tests' });\n\tconst policyConfigurationNode: IConfigurationNode = {\n\t\t'id': 'policyConfiguration',\n\t\t'order': 1,\n\t\t'title': 'a',\n\t\t'type': 'object',\n\t\t'properties': {\n\t\t\t'policy.settingA': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'default': 'defaultValueA',\n\t\t\t\tpolicy: {\n\t\t\t\t\tname: 'PolicySettingA',\n\t\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t\t}\n\t\t\t},\n\t\t\t'policy.settingB': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'default': 'defaultValueB',\n\t\t\t\tpolicy: {\n\t\t\t\t\tname: 'PolicySettingB',\n\t\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t\t}\n\t\t\t},\n\t\t\t'nonPolicy.setting': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true\n\t\t\t}\n\t\t}\n\t};\n\n\tsuiteSetup(() => Registry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration(policyConfigurationNode));\n\tsuiteTeardown(() => Registry.as<IConfigurationRegistry>(Extensions.Configuration).deregisterConfigurations([policyConfigurationNode]));\n\n\tsetup(async () => {\n\t\tconst defaultConfiguration = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tawait defaultConfiguration.initialize();\n\t\tfileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst diskFileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(policyFile.scheme, diskFileSystemProvider));\n\t\tpolicyService = disposables.add(new FilePolicyService(policyFile, fileService, new NullLogService()));\n\t\ttestObject = disposables.add(new PolicyConfiguration(defaultConfiguration, policyService, new NullLogService()));\n\t});\n\n\ttest('initialize: with policies', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\n\t\tawait testObject.initialize();\n\t\tconst acutal = testObject.configurationModel;\n\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), 'policyValueA');\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingA']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('initialize: no policies', async () => {\n\t\tawait testObject.initialize();\n\t\tconst acutal = testObject.configurationModel;\n\n\t\tassert.deepStrictEqual(acutal.keys, []);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), undefined);\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t});\n\n\ttest('initialize: with policies but not registered', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA', 'PolicySettingB': 'policyValueB', 'PolicySettingC': 'policyValueC' })));\n\n\t\tawait testObject.initialize();\n\t\tconst acutal = testObject.configurationModel;\n\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), 'policyValueA');\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), 'policyValueB');\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingA', 'policy.settingB']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy is added', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\t\tawait testObject.initialize();\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA', 'PolicySettingB': 'policyValueB', 'PolicySettingC': 'policyValueC' })));\n\t\t\tawait promise;\n\t\t});\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), 'policyValueA');\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), 'policyValueB');\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingA', 'policy.settingB']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy is updated', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\t\tawait testObject.initialize();\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueAChanged' })));\n\t\t\tawait promise;\n\t\t});\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), 'policyValueAChanged');\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingA']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy is removed', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\t\tawait testObject.initialize();\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({})));\n\t\t\tawait promise;\n\t\t});\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), undefined);\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, []);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy setting is registered', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingC': 'policyValueC' })));\n\t\tawait testObject.initialize();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tpolicyConfigurationNode.properties!['policy.settingC'] = {\n\t\t\t'type': 'string',\n\t\t\t'default': 'defaultValueC',\n\t\t\tpolicy: {\n\t\t\t\tname: 'PolicySettingC',\n\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t}\n\t\t};\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration(deepClone(policyConfigurationNode));\n\t\tawait promise;\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingC'), 'policyValueC');\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), undefined);\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingC']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy setting is deregistered', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\t\tawait testObject.initialize();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).deregisterConfigurations([policyConfigurationNode]);\n\t\tawait promise;\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), undefined);\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, []);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
