{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/test/common/configurationService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ConfigurationTarget, isConfigured } from '../../common/configuration.js';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from '../../common/configurationRegistry.js';\nimport { ConfigurationService } from '../../common/configurationService.js';\nimport { IFileService } from '../../../files/common/files.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { FilePolicyService } from '../../../policy/common/filePolicyService.js';\nimport { NullPolicyService } from '../../../policy/common/policy.js';\nimport { Registry } from '../../../registry/common/platform.js';\n\nsuite('ConfigurationService.test.ts', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet fileService: IFileService;\n\tlet settingsResource: URI;\n\n\tsetup(async () => {\n\t\tfileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst diskFileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(Schemas.file, diskFileSystemProvider));\n\t\tsettingsResource = URI.file('settings.json');\n\t});\n\n\ttest('simple', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"bar\" }'));\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tconst config = testObject.getValue<{\n\t\t\tfoo: string;\n\t\t}>();\n\n\t\tassert.ok(config);\n\t\tassert.strictEqual(config.foo, 'bar');\n\t}));\n\n\ttest('config gets flattened', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tconst config = testObject.getValue<{\n\t\t\ttestworkbench: {\n\t\t\t\teditor: {\n\t\t\t\t\ttabs: boolean;\n\t\t\t\t};\n\t\t\t};\n\t\t}>();\n\n\t\tassert.ok(config);\n\t\tassert.ok(config.testworkbench);\n\t\tassert.ok(config.testworkbench.editor);\n\t\tassert.strictEqual(config.testworkbench.editor.tabs, true);\n\t}));\n\n\ttest('error case does not explode', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString(',,,,'));\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tconst config = testObject.getValue<{\n\t\t\tfoo: string;\n\t\t}>();\n\n\t\tassert.ok(config);\n\t}));\n\n\ttest('missing file does not explode', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst testObject = disposables.add(new ConfigurationService(URI.file('__testFile'), fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tconst config = testObject.getValue<{ foo: string }>();\n\n\t\tassert.ok(config);\n\t}));\n\n\ttest('trigger configuration change event when file does not exist', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tdisposables.add(Event.filter(testObject.onDidChangeConfiguration, e => e.source === ConfigurationTarget.USER)(() => {\n\t\t\t\tassert.strictEqual(testObject.getValue('foo'), 'bar');\n\t\t\t\tc();\n\t\t\t}));\n\t\t\tfileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"bar\" }')).catch(e);\n\t\t});\n\n\t}));\n\n\ttest('trigger configuration change event when file exists', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"bar\" }'));\n\t\tawait testObject.initialize();\n\n\t\treturn new Promise<void>((c) => {\n\t\t\tdisposables.add(Event.filter(testObject.onDidChangeConfiguration, e => e.source === ConfigurationTarget.USER)(async (e) => {\n\t\t\t\tassert.strictEqual(testObject.getValue('foo'), 'barz');\n\t\t\t\tc();\n\t\t\t}));\n\t\t\tfileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"barz\" }'));\n\t\t});\n\t}));\n\n\ttest('reloadConfiguration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"bar\" }'));\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tlet config = testObject.getValue<{\n\t\t\tfoo: string;\n\t\t}>();\n\t\tassert.ok(config);\n\t\tassert.strictEqual(config.foo, 'bar');\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"changed\" }'));\n\n\t\t// force a reload to get latest\n\t\tawait testObject.reloadConfiguration();\n\t\tconfig = testObject.getValue<{\n\t\t\tfoo: string;\n\t\t}>();\n\t\tassert.ok(config);\n\t\tassert.strictEqual(config.foo, 'changed');\n\t}));\n\n\ttest('model defaults', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tinterface ITestSetting {\n\t\t\tconfiguration: {\n\t\t\t\tservice: {\n\t\t\t\t\ttestSetting: string;\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configuration.service.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlet testObject = disposables.add(new ConfigurationService(URI.file('__testFile'), fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tlet setting = testObject.getValue<ITestSetting>();\n\n\t\tassert.ok(setting);\n\t\tassert.strictEqual(setting.configuration.service.testSetting, 'isSet');\n\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\t\ttestObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tsetting = testObject.getValue<ITestSetting>();\n\n\t\tassert.ok(setting);\n\t\tassert.strictEqual(setting.configuration.service.testSetting, 'isSet');\n\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"configuration.service.testSetting\": \"isChanged\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tsetting = testObject.getValue<ITestSetting>();\n\t\tassert.ok(setting);\n\t\tassert.strictEqual(setting.configuration.service.testSetting, 'isChanged');\n\t}));\n\n\ttest('lookup', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'lookup.service.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tlet res = testObject.inspect('something.missing');\n\t\tassert.strictEqual(res.value, undefined);\n\t\tassert.strictEqual(res.defaultValue, undefined);\n\t\tassert.strictEqual(res.userValue, undefined);\n\t\tassert.strictEqual(isConfigured(res), false);\n\n\t\tres = testObject.inspect('lookup.service.testSetting');\n\t\tassert.strictEqual(res.defaultValue, 'isSet');\n\t\tassert.strictEqual(res.value, 'isSet');\n\t\tassert.strictEqual(res.userValue, undefined);\n\t\tassert.strictEqual(isConfigured(res), false);\n\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"lookup.service.testSetting\": \"bar\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tres = testObject.inspect('lookup.service.testSetting');\n\t\tassert.strictEqual(res.defaultValue, 'isSet');\n\t\tassert.strictEqual(res.userValue, 'bar');\n\t\tassert.strictEqual(res.value, 'bar');\n\t\tassert.strictEqual(isConfigured(res), true);\n\n\t}));\n\n\ttest('lookup with null', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_testNull',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'lookup.service.testNullSetting': {\n\t\t\t\t\t'type': 'null',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tlet res = testObject.inspect('lookup.service.testNullSetting');\n\t\tassert.strictEqual(res.defaultValue, null);\n\t\tassert.strictEqual(res.value, null);\n\t\tassert.strictEqual(res.userValue, undefined);\n\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"lookup.service.testNullSetting\": null }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tres = testObject.inspect('lookup.service.testNullSetting');\n\t\tassert.strictEqual(res.defaultValue, null);\n\t\tassert.strictEqual(res.value, null);\n\t\tassert.strictEqual(res.userValue, null);\n\t}));\n\n\ttest('update configuration', async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tawait testObject.updateValue('configurationService.testSetting', 'value');\n\t\tassert.strictEqual(testObject.getValue('configurationService.testSetting'), 'value');\n\t});\n\n\ttest('update configuration when exist', async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tawait testObject.updateValue('configurationService.testSetting', 'value');\n\t\tawait testObject.updateValue('configurationService.testSetting', 'updatedValue');\n\t\tassert.strictEqual(testObject.getValue('configurationService.testSetting'), 'updatedValue');\n\t});\n\n\ttest('update configuration to default value should remove', async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tawait testObject.updateValue('configurationService.testSetting', 'value');\n\t\tawait testObject.updateValue('configurationService.testSetting', 'isSet');\n\t\tconst inspect = testObject.inspect('configurationService.testSetting');\n\n\t\tassert.strictEqual(inspect.userValue, undefined);\n\t});\n\n\ttest('update configuration should remove when undefined is passed', async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tawait testObject.updateValue('configurationService.testSetting', 'value');\n\t\tawait testObject.updateValue('configurationService.testSetting', undefined);\n\t\tconst inspect = testObject.inspect('configurationService.testSetting');\n\n\t\tassert.strictEqual(inspect.userValue, undefined);\n\t});\n\n\ttest('update unknown configuration', async () => {\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tawait testObject.updateValue('configurationService.unknownSetting', 'value');\n\t\tassert.strictEqual(testObject.getValue('configurationService.unknownSetting'), 'value');\n\t});\n\n\ttest('update configuration in non user target throws error', async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\ttry {\n\t\t\tawait testObject.updateValue('configurationService.testSetting', 'value', ConfigurationTarget.WORKSPACE);\n\t\t\tassert.fail('Should fail with error');\n\t\t} catch (e) {\n\t\t\t// succeess\n\t\t}\n\t});\n\n\ttest('update configuration throws error for policy setting', async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationService.policySetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tpolicy: {\n\t\t\t\t\t\tname: 'configurationService.policySetting',\n\t\t\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst logService = new NullLogService();\n\t\tconst policyFile = URI.file('policies.json');\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString('{ \"configurationService.policySetting\": \"policyValue\" }'));\n\t\tconst policyService = disposables.add(new FilePolicyService(policyFile, fileService, logService));\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, policyService, logService));\n\t\tawait testObject.initialize();\n\n\t\ttry {\n\t\t\tawait testObject.updateValue('configurationService.policySetting', 'value');\n\t\t\tassert.fail('Should throw error');\n\t\t} catch (error) {\n\t\t\t// succeess\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": ["e"]
}
