{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/test/common/configurations.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Event } from '../../../../base/common/event.js';\nimport { equals } from '../../../../base/common/objects.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Extensions, IConfigurationNode, IConfigurationRegistry } from '../../common/configurationRegistry.js';\nimport { DefaultConfiguration } from '../../common/configurations.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { Registry } from '../../../registry/common/platform.js';\n\nsuite('DefaultConfiguration', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\n\tsetup(() => reset());\n\tteardown(() => reset());\n\n\tfunction reset() {\n\t\tconfigurationRegistry.deregisterConfigurations(configurationRegistry.getConfigurations());\n\t\tconfigurationRegistry.deregisterDefaultConfigurations(configurationRegistry.getRegisteredDefaultConfigurations());\n\t}\n\n\ttest('Test registering a property before initialize', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'a': {\n\t\t\t\t\t'description': 'a',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst actual = await testObject.initialize();\n\t\tassert.strictEqual(actual.getValue('a'), false);\n\t});\n\n\ttest('Test registering a property and do not initialize', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'a': {\n\t\t\t\t\t'description': 'a',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(testObject.configurationModel.getValue('a'), undefined);\n\t});\n\n\ttest('Test registering a property after initialize', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'defaultConfiguration.testSetting1': {\n\t\t\t\t\t'description': 'a',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst { defaults: actual, properties } = await promise;\n\t\tassert.strictEqual(actual.getValue('defaultConfiguration.testSetting1'), false);\n\t\tassert.deepStrictEqual(properties, ['defaultConfiguration.testSetting1']);\n\t});\n\n\ttest('Test registering nested properties', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'a.b': {\n\t\t\t\t\t'description': '1',\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'default': {},\n\t\t\t\t},\n\t\t\t\t'a.b.c': {\n\t\t\t\t\t'description': '2',\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'default': '2',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst actual = await testObject.initialize();\n\n\t\tassert.ok(equals(actual.getValue('a'), { b: { c: '2' } }));\n\t\tassert.ok(equals(actual.contents, { 'a': { b: { c: '2' } } }));\n\t\tassert.deepStrictEqual(actual.keys.sort(), ['a.b', 'a.b.c']);\n\t});\n\n\ttest('Test registering the same property again', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'a': {\n\t\t\t\t\t'description': 'a',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': true,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'a': {\n\t\t\t\t\t'description': 'a',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst actual = await testObject.initialize();\n\t\tassert.strictEqual(true, actual.getValue('a'));\n\t});\n\n\ttest('Test registering an override identifier', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconfigurationRegistry.registerDefaultConfigurations([{\n\t\t\toverrides: {\n\t\t\t\t'[a]': {\n\t\t\t\t\t'b': true\n\t\t\t\t}\n\t\t\t}\n\t\t}]);\n\t\tconst actual = await testObject.initialize();\n\t\tassert.ok(equals(actual.getValue('[a]'), { 'b': true }));\n\t\tassert.ok(equals(actual.contents, { '[a]': { 'b': true } }));\n\t\tassert.ok(equals(actual.overrides, [{ contents: { 'b': true }, identifiers: ['a'], keys: ['b'] }]));\n\t\tassert.deepStrictEqual(actual.keys.sort(), ['[a]']);\n\t\tassert.strictEqual(actual.getOverrideValue('b', 'a'), true);\n\t});\n\n\ttest('Test registering a normal property and override identifier', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'b': {\n\t\t\t\t\t'description': 'b',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconfigurationRegistry.registerDefaultConfigurations([{\n\t\t\toverrides: {\n\t\t\t\t'[a]': {\n\t\t\t\t\t'b': true\n\t\t\t\t}\n\t\t\t}\n\t\t}]);\n\n\t\tconst actual = await testObject.initialize();\n\t\tassert.deepStrictEqual(actual.getValue('b'), false);\n\t\tassert.ok(equals(actual.getValue('[a]'), { 'b': true }));\n\t\tassert.ok(equals(actual.contents, { 'b': false, '[a]': { 'b': true } }));\n\t\tassert.ok(equals(actual.overrides, [{ contents: { 'b': true }, identifiers: ['a'], keys: ['b'] }]));\n\t\tassert.deepStrictEqual(actual.keys.sort(), ['[a]', 'b']);\n\t\tassert.strictEqual(actual.getOverrideValue('b', 'a'), true);\n\t});\n\n\ttest('Test normal property is registered after override identifier', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerDefaultConfigurations([{\n\t\t\toverrides: {\n\t\t\t\t'[a]': {\n\t\t\t\t\t'b': true\n\t\t\t\t}\n\t\t\t}\n\t\t}]);\n\n\t\tawait testObject.initialize();\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'b': {\n\t\t\t\t\t'description': 'b',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst { defaults: actual, properties } = await promise;\n\t\tassert.deepStrictEqual(actual.getValue('b'), false);\n\t\tassert.ok(equals(actual.getValue('[a]'), { 'b': true }));\n\t\tassert.ok(equals(actual.contents, { 'b': false, '[a]': { 'b': true } }));\n\t\tassert.ok(equals(actual.overrides, [{ contents: { 'b': true }, identifiers: ['a'], keys: ['b'] }]));\n\t\tassert.deepStrictEqual(actual.keys.sort(), ['[a]', 'b']);\n\t\tassert.strictEqual(actual.getOverrideValue('b', 'a'), true);\n\t\tassert.deepStrictEqual(properties, ['b']);\n\t});\n\n\ttest('Test override identifier is registered after property', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'b': {\n\t\t\t\t\t'description': 'b',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tawait testObject.initialize();\n\n\t\tconfigurationRegistry.registerDefaultConfigurations([{\n\t\t\toverrides: {\n\t\t\t\t'[a]': {\n\t\t\t\t\t'b': true\n\t\t\t\t}\n\t\t\t}\n\t\t}]);\n\n\t\tconst { defaults: actual, properties } = await promise;\n\t\tassert.deepStrictEqual(actual.getValue('b'), false);\n\t\tassert.ok(equals(actual.getValue('[a]'), { 'b': true }));\n\t\tassert.ok(equals(actual.contents, { 'b': false, '[a]': { 'b': true } }));\n\t\tassert.ok(equals(actual.overrides, [{ contents: { 'b': true }, identifiers: ['a'], keys: ['b'] }]));\n\t\tassert.deepStrictEqual(actual.keys.sort(), ['[a]', 'b']);\n\t\tassert.strictEqual(actual.getOverrideValue('b', 'a'), true);\n\t\tassert.deepStrictEqual(properties, ['[a]']);\n\t});\n\n\ttest('Test register override identifier and property after initialize', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\n\t\tawait testObject.initialize();\n\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'b': {\n\t\t\t\t\t'description': 'b',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconfigurationRegistry.registerDefaultConfigurations([{\n\t\t\toverrides: {\n\t\t\t\t'[a]': {\n\t\t\t\t\t'b': true\n\t\t\t\t}\n\t\t\t}\n\t\t}]);\n\n\t\tconst actual = testObject.configurationModel;\n\t\tassert.deepStrictEqual(actual.getValue('b'), false);\n\t\tassert.ok(equals(actual.getValue('[a]'), { 'b': true }));\n\t\tassert.ok(equals(actual.contents, { 'b': false, '[a]': { 'b': true } }));\n\t\tassert.ok(equals(actual.overrides, [{ contents: { 'b': true }, identifiers: ['a'], keys: ['b'] }]));\n\t\tassert.deepStrictEqual(actual.keys.sort(), ['[a]', 'b']);\n\t\tassert.strictEqual(actual.getOverrideValue('b', 'a'), true);\n\t});\n\n\ttest('Test deregistering a property', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconst node: IConfigurationNode = {\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'a': {\n\t\t\t\t\t'description': 'a',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconfigurationRegistry.registerConfiguration(node);\n\t\tawait testObject.initialize();\n\t\tconfigurationRegistry.deregisterConfigurations([node]);\n\n\t\tconst { defaults: actual, properties } = await promise;\n\t\tassert.strictEqual(actual.getValue('a'), undefined);\n\t\tassert.ok(equals(actual.contents, {}));\n\t\tassert.deepStrictEqual(actual.keys, []);\n\t\tassert.deepStrictEqual(properties, ['a']);\n\t});\n\n\ttest('Test deregistering an override identifier', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'a',\n\t\t\t'order': 1,\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'b': {\n\t\t\t\t\t'description': 'b',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': false,\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst node = {\n\t\t\toverrides: {\n\t\t\t\t'[a]': {\n\t\t\t\t\t'b': true\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconfigurationRegistry.registerDefaultConfigurations([node]);\n\t\tawait testObject.initialize();\n\t\tconfigurationRegistry.deregisterDefaultConfigurations([node]);\n\t\tassert.deepStrictEqual(testObject.configurationModel.getValue('[a]'), undefined);\n\t\tassert.ok(equals(testObject.configurationModel.contents, { 'b': false }));\n\t\tassert.ok(equals(testObject.configurationModel.overrides, []));\n\t\tassert.deepStrictEqual(testObject.configurationModel.keys, ['b']);\n\t\tassert.strictEqual(testObject.configurationModel.getOverrideValue('b', 'a'), undefined);\n\t});\n\n\ttest('Test deregistering a merged language object setting', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(new NullLogService()));\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'b',\n\t\t\t'order': 1,\n\t\t\t'title': 'b',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'b': {\n\t\t\t\t\t'description': 'b',\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'default': {},\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst node1 = {\n\t\t\toverrides: {\n\t\t\t\t'[a]': {\n\t\t\t\t\t'b': {\n\t\t\t\t\t\t'aa': '1',\n\t\t\t\t\t\t'bb': '2'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tsource: { id: 'source1', displayName: 'source1' }\n\t\t};\n\n\t\tconst node2 = {\n\t\t\toverrides: {\n\t\t\t\t'[a]': {\n\t\t\t\t\t'b': {\n\t\t\t\t\t\t'bb': '20',\n\t\t\t\t\t\t'cc': '30'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tsource: { id: 'source2', displayName: 'source2' }\n\t\t};\n\t\tconfigurationRegistry.registerDefaultConfigurations([node1]);\n\t\tconfigurationRegistry.registerDefaultConfigurations([node2]);\n\t\tawait testObject.initialize();\n\n\t\tconfigurationRegistry.deregisterDefaultConfigurations([node1]);\n\t\tassert.ok(equals(testObject.configurationModel.getValue('[a]'), { 'b': { 'bb': '20', 'cc': '30' } }));\n\t\tassert.ok(equals(testObject.configurationModel.contents, { '[a]': { 'b': { 'bb': '20', 'cc': '30' } }, 'b': {} }));\n\t\tassert.ok(equals(testObject.configurationModel.overrides, [{ contents: { 'b': { 'bb': '20', 'cc': '30' } }, identifiers: ['a'], keys: ['b'] }]));\n\t\tassert.deepStrictEqual(testObject.configurationModel.keys.sort(), ['[a]', 'b']);\n\t\tassert.ok(equals(testObject.configurationModel.getOverrideValue('b', 'a'), { 'bb': '20', 'cc': '30' }));\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
