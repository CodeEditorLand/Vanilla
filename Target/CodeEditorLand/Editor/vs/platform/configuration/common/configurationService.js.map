{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/common/configurationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct, equals as arrayEquals } from '../../../base/common/arrays.js';\nimport { Queue, RunOnceScheduler } from '../../../base/common/async.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { JSONPath, ParseError, parse } from '../../../base/common/json.js';\nimport { applyEdits, setProperty } from '../../../base/common/jsonEdit.js';\nimport { Edit, FormattingOptions } from '../../../base/common/jsonFormatter.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { OS, OperatingSystem } from '../../../base/common/platform.js';\nimport { extUriBiasedIgnorePathCase } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ConfigurationTarget, IConfigurationChange, IConfigurationChangeEvent, IConfigurationData, IConfigurationOverrides, IConfigurationService, IConfigurationUpdateOptions, IConfigurationUpdateOverrides, IConfigurationValue, isConfigurationOverrides, isConfigurationUpdateOverrides } from './configuration.js';\nimport { Configuration, ConfigurationChangeEvent, ConfigurationModel, UserSettings } from './configurationModels.js';\nimport { keyFromOverrideIdentifiers } from './configurationRegistry.js';\nimport { DefaultConfiguration, IPolicyConfiguration, NullPolicyConfiguration, PolicyConfiguration } from './configurations.js';\nimport { FileOperationError, FileOperationResult, IFileService } from '../../files/common/files.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IPolicyService, NullPolicyService } from '../../policy/common/policy.js';\n\nexport class ConfigurationService extends Disposable implements IConfigurationService, IDisposable {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate configuration: Configuration;\n\tprivate readonly defaultConfiguration: DefaultConfiguration;\n\tprivate readonly policyConfiguration: IPolicyConfiguration;\n\tprivate readonly userConfiguration: UserSettings;\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent> = this._register(new Emitter<IConfigurationChangeEvent>());\n\treadonly onDidChangeConfiguration: Event<IConfigurationChangeEvent> = this._onDidChangeConfiguration.event;\n\n\tprivate readonly configurationEditing: ConfigurationEditing;\n\n\tconstructor(\n\t\tprivate readonly settingsResource: URI,\n\t\tfileService: IFileService,\n\t\tpolicyService: IPolicyService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.defaultConfiguration = this._register(new DefaultConfiguration(logService));\n\t\tthis.policyConfiguration = policyService instanceof NullPolicyService ? new NullPolicyConfiguration() : this._register(new PolicyConfiguration(this.defaultConfiguration, policyService, logService));\n\t\tthis.userConfiguration = this._register(new UserSettings(this.settingsResource, {}, extUriBiasedIgnorePathCase, fileService, logService));\n\t\tthis.configuration = new Configuration(\n\t\t\tthis.defaultConfiguration.configurationModel,\n\t\t\tthis.policyConfiguration.configurationModel,\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tnew ResourceMap<ConfigurationModel>(),\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tnew ResourceMap<ConfigurationModel>(),\n\t\t\tlogService\n\t\t);\n\t\tthis.configurationEditing = new ConfigurationEditing(settingsResource, fileService, this);\n\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this.reloadConfiguration(), 50));\n\t\tthis._register(this.defaultConfiguration.onDidChangeConfiguration(({ defaults, properties }) => this.onDidDefaultConfigurationChange(defaults, properties)));\n\t\tthis._register(this.policyConfiguration.onDidChangeConfiguration(model => this.onDidPolicyConfigurationChange(model)));\n\t\tthis._register(this.userConfiguration.onDidChange(() => this.reloadConfigurationScheduler.schedule()));\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tconst [defaultModel, policyModel, userModel] = await Promise.all([this.defaultConfiguration.initialize(), this.policyConfiguration.initialize(), this.userConfiguration.loadConfiguration()]);\n\t\tthis.configuration = new Configuration(\n\t\t\tdefaultModel,\n\t\t\tpolicyModel,\n\t\t\tConfigurationModel.createEmptyModel(this.logService),\n\t\t\tuserModel,\n\t\t\tConfigurationModel.createEmptyModel(this.logService),\n\t\t\tConfigurationModel.createEmptyModel(this.logService),\n\t\t\tnew ResourceMap<ConfigurationModel>(),\n\t\t\tConfigurationModel.createEmptyModel(this.logService),\n\t\t\tnew ResourceMap<ConfigurationModel>(),\n\t\t\tthis.logService\n\t\t);\n\t}\n\n\tgetConfigurationData(): IConfigurationData {\n\t\treturn this.configuration.toData();\n\t}\n\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\tgetValue(arg1?: any, arg2?: any): any {\n\t\tconst section = typeof arg1 === 'string' ? arg1 : undefined;\n\t\tconst overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : {};\n\t\treturn this.configuration.getValue(section, overrides, undefined);\n\t}\n\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides | IConfigurationUpdateOverrides): Promise<void>;\n\tupdateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides | IConfigurationUpdateOverrides, target: ConfigurationTarget, options?: IConfigurationUpdateOptions): Promise<void>;\n\tasync updateValue(key: string, value: any, arg3?: any, arg4?: any, options?: any): Promise<void> {\n\t\tconst overrides: IConfigurationUpdateOverrides | undefined = isConfigurationUpdateOverrides(arg3) ? arg3\n\t\t\t: isConfigurationOverrides(arg3) ? { resource: arg3.resource, overrideIdentifiers: arg3.overrideIdentifier ? [arg3.overrideIdentifier] : undefined } : undefined;\n\n\t\tconst target: ConfigurationTarget | undefined = overrides ? arg4 : arg3;\n\t\tif (target !== undefined) {\n\t\t\tif (target !== ConfigurationTarget.USER_LOCAL && target !== ConfigurationTarget.USER) {\n\t\t\t\tthrow new Error(`Unable to write ${key} to target ${target}.`);\n\t\t\t}\n\t\t}\n\n\t\tif (overrides?.overrideIdentifiers) {\n\t\t\toverrides.overrideIdentifiers = distinct(overrides.overrideIdentifiers);\n\t\t\toverrides.overrideIdentifiers = overrides.overrideIdentifiers.length ? overrides.overrideIdentifiers : undefined;\n\t\t}\n\n\t\tconst inspect = this.inspect(key, { resource: overrides?.resource, overrideIdentifier: overrides?.overrideIdentifiers ? overrides.overrideIdentifiers[0] : undefined });\n\t\tif (inspect.policyValue !== undefined) {\n\t\t\tthrow new Error(`Unable to write ${key} because it is configured in system policy.`);\n\t\t}\n\n\t\t// Remove the setting, if the value is same as default value\n\t\tif (equals(value, inspect.defaultValue)) {\n\t\t\tvalue = undefined;\n\t\t}\n\n\t\tif (overrides?.overrideIdentifiers?.length && overrides.overrideIdentifiers.length > 1) {\n\t\t\tconst overrideIdentifiers = overrides.overrideIdentifiers.sort();\n\t\t\tconst existingOverrides = this.configuration.localUserConfiguration.overrides.find(override => arrayEquals([...override.identifiers].sort(), overrideIdentifiers));\n\t\t\tif (existingOverrides) {\n\t\t\t\toverrides.overrideIdentifiers = existingOverrides.identifiers;\n\t\t\t}\n\t\t}\n\n\t\tconst path = overrides?.overrideIdentifiers?.length ? [keyFromOverrideIdentifiers(overrides.overrideIdentifiers), key] : [key];\n\n\t\tawait this.configurationEditing.write(path, value);\n\t\tawait this.reloadConfiguration();\n\t}\n\n\tinspect<T>(key: string, overrides: IConfigurationOverrides = {}): IConfigurationValue<T> {\n\t\treturn this.configuration.inspect<T>(key, overrides, undefined);\n\t}\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn this.configuration.keys(undefined);\n\t}\n\n\tasync reloadConfiguration(): Promise<void> {\n\t\tconst configurationModel = await this.userConfiguration.loadConfiguration();\n\t\tthis.onDidChangeUserConfiguration(configurationModel);\n\t}\n\n\tprivate onDidChangeUserConfiguration(userConfigurationModel: ConfigurationModel): void {\n\t\tconst previous = this.configuration.toData();\n\t\tconst change = this.configuration.compareAndUpdateLocalUserConfiguration(userConfigurationModel);\n\t\tthis.trigger(change, previous, ConfigurationTarget.USER);\n\t}\n\n\tprivate onDidDefaultConfigurationChange(defaultConfigurationModel: ConfigurationModel, properties: string[]): void {\n\t\tconst previous = this.configuration.toData();\n\t\tconst change = this.configuration.compareAndUpdateDefaultConfiguration(defaultConfigurationModel, properties);\n\t\tthis.trigger(change, previous, ConfigurationTarget.DEFAULT);\n\t}\n\n\tprivate onDidPolicyConfigurationChange(policyConfiguration: ConfigurationModel): void {\n\t\tconst previous = this.configuration.toData();\n\t\tconst change = this.configuration.compareAndUpdatePolicyConfiguration(policyConfiguration);\n\t\tthis.trigger(change, previous, ConfigurationTarget.DEFAULT);\n\t}\n\n\tprivate trigger(configurationChange: IConfigurationChange, previous: IConfigurationData, source: ConfigurationTarget): void {\n\t\tconst event = new ConfigurationChangeEvent(configurationChange, { data: previous }, this.configuration, undefined, this.logService);\n\t\tevent.source = source;\n\t\tthis._onDidChangeConfiguration.fire(event);\n\t}\n}\n\nclass ConfigurationEditing {\n\n\tprivate readonly queue: Queue<void>;\n\n\tconstructor(\n\t\tprivate readonly settingsResource: URI,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\twrite(path: JSONPath, value: any): Promise<void> {\n\t\treturn this.queue.queue(() => this.doWriteConfiguration(path, value)); // queue up writes to prevent race conditions\n\t}\n\n\tprivate async doWriteConfiguration(path: JSONPath, value: any): Promise<void> {\n\t\tlet content: string;\n\t\ttry {\n\t\t\tconst fileContent = await this.fileService.readFile(this.settingsResource);\n\t\t\tcontent = fileContent.value.toString();\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tcontent = '{}';\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\tconst parseErrors: ParseError[] = [];\n\t\tparse(content, parseErrors, { allowTrailingComma: true, allowEmptyContent: true });\n\t\tif (parseErrors.length > 0) {\n\t\t\tthrow new Error('Unable to write into the settings file. Please open the file to correct errors/warnings in the file and try again.');\n\t\t}\n\n\t\tconst edits = this.getEdits(content, path, value);\n\t\tcontent = applyEdits(content, edits);\n\n\t\tawait this.fileService.writeFile(this.settingsResource, VSBuffer.fromString(content));\n\t}\n\n\tprivate getEdits(content: string, path: JSONPath, value: any): Edit[] {\n\t\tconst { tabSize, insertSpaces, eol } = this.formattingOptions;\n\n\t\t// With empty path the entire file is being replaced, so we just use JSON.stringify\n\t\tif (!path.length) {\n\t\t\tconst content = JSON.stringify(value, null, insertSpaces ? ' '.repeat(tabSize) : '\\t');\n\t\t\treturn [{\n\t\t\t\tcontent,\n\t\t\t\tlength: content.length,\n\t\t\t\toffset: 0\n\t\t\t}];\n\t\t}\n\n\t\treturn setProperty(content, path, value, { tabSize, insertSpaces, eol });\n\t}\n\n\tprivate _formattingOptions: Required<FormattingOptions> | undefined;\n\tprivate get formattingOptions(): Required<FormattingOptions> {\n\t\tif (!this._formattingOptions) {\n\t\t\tlet eol = OS === OperatingSystem.Linux || OS === OperatingSystem.Macintosh ? '\\n' : '\\r\\n';\n\t\t\tconst configuredEol = this.configurationService.getValue('files.eol', { overrideIdentifier: 'jsonc' });\n\t\t\tif (configuredEol && typeof configuredEol === 'string' && configuredEol !== 'auto') {\n\t\t\t\teol = configuredEol;\n\t\t\t}\n\t\t\tthis._formattingOptions = {\n\t\t\t\teol,\n\t\t\t\tinsertSpaces: !!this.configurationService.getValue('editor.insertSpaces', { overrideIdentifier: 'jsonc' }),\n\t\t\t\ttabSize: this.configurationService.getValue('editor.tabSize', { overrideIdentifier: 'jsonc' })\n\t\t\t};\n\t\t}\n\t\treturn this._formattingOptions;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["content"]
}
