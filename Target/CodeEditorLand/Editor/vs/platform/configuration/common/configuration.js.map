{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/common/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport * as types from \"../../../base/common/types.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type { IWorkspaceFolder } from \"../../workspace/common/workspace.js\";\n\nexport const IConfigurationService = createDecorator<IConfigurationService>(\n\t\"configurationService\",\n);\n\nexport function isConfigurationOverrides(\n\tthing: any,\n): thing is IConfigurationOverrides {\n\treturn (\n\t\tthing &&\n\t\ttypeof thing === \"object\" &&\n\t\t(!thing.overrideIdentifier ||\n\t\t\ttypeof thing.overrideIdentifier === \"string\") &&\n\t\t(!thing.resource || thing.resource instanceof URI)\n\t);\n}\n\nexport interface IConfigurationOverrides {\n\toverrideIdentifier?: string | null;\n\tresource?: URI | null;\n}\n\nexport function isConfigurationUpdateOverrides(\n\tthing: any,\n): thing is IConfigurationUpdateOverrides {\n\treturn (\n\t\tthing &&\n\t\ttypeof thing === \"object\" &&\n\t\t(!thing.overrideIdentifiers ||\n\t\t\tArray.isArray(thing.overrideIdentifiers)) &&\n\t\t!thing.overrideIdentifier &&\n\t\t(!thing.resource || thing.resource instanceof URI)\n\t);\n}\n\nexport type IConfigurationUpdateOverrides = Omit<\n\tIConfigurationOverrides,\n\t\"overrideIdentifier\"\n> & { overrideIdentifiers?: string[] | null };\n\nexport enum ConfigurationTarget {\n\tAPPLICATION = 1,\n\tUSER = 2,\n\tUSER_LOCAL = 3,\n\tUSER_REMOTE = 4,\n\tWORKSPACE = 5,\n\tWORKSPACE_FOLDER = 6,\n\tDEFAULT = 7,\n\tMEMORY = 8,\n}\nexport function ConfigurationTargetToString(\n\tconfigurationTarget: ConfigurationTarget,\n) {\n\tswitch (configurationTarget) {\n\t\tcase ConfigurationTarget.APPLICATION:\n\t\t\treturn \"APPLICATION\";\n\t\tcase ConfigurationTarget.USER:\n\t\t\treturn \"USER\";\n\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\treturn \"USER_LOCAL\";\n\t\tcase ConfigurationTarget.USER_REMOTE:\n\t\t\treturn \"USER_REMOTE\";\n\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\treturn \"WORKSPACE\";\n\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\treturn \"WORKSPACE_FOLDER\";\n\t\tcase ConfigurationTarget.DEFAULT:\n\t\t\treturn \"DEFAULT\";\n\t\tcase ConfigurationTarget.MEMORY:\n\t\t\treturn \"MEMORY\";\n\t}\n}\n\nexport interface IConfigurationChange {\n\tkeys: string[];\n\toverrides: [string, string[]][];\n}\n\nexport interface IConfigurationChangeEvent {\n\treadonly source: ConfigurationTarget;\n\treadonly affectedKeys: ReadonlySet<string>;\n\treadonly change: IConfigurationChange;\n\n\taffectsConfiguration(\n\t\tconfiguration: string,\n\t\toverrides?: IConfigurationOverrides,\n\t): boolean;\n}\n\nexport interface IInspectValue<T> {\n\treadonly value?: T;\n\treadonly override?: T;\n\treadonly overrides?: {\n\t\treadonly identifiers: string[];\n\t\treadonly value: T;\n\t}[];\n}\n\nexport interface IConfigurationValue<T> {\n\treadonly defaultValue?: T;\n\treadonly applicationValue?: T;\n\treadonly userValue?: T;\n\treadonly userLocalValue?: T;\n\treadonly userRemoteValue?: T;\n\treadonly workspaceValue?: T;\n\treadonly workspaceFolderValue?: T;\n\treadonly memoryValue?: T;\n\treadonly policyValue?: T;\n\treadonly value?: T;\n\n\treadonly default?: IInspectValue<T>;\n\treadonly application?: IInspectValue<T>;\n\treadonly user?: IInspectValue<T>;\n\treadonly userLocal?: IInspectValue<T>;\n\treadonly userRemote?: IInspectValue<T>;\n\treadonly workspace?: IInspectValue<T>;\n\treadonly workspaceFolder?: IInspectValue<T>;\n\treadonly memory?: IInspectValue<T>;\n\treadonly policy?: { value?: T };\n\n\treadonly overrideIdentifiers?: string[];\n}\n\nexport function isConfigured<T>(\n\tconfigValue: IConfigurationValue<T>,\n): configValue is IConfigurationValue<T> & { value: T } {\n\treturn (\n\t\tconfigValue.applicationValue !== undefined ||\n\t\tconfigValue.userValue !== undefined ||\n\t\tconfigValue.userLocalValue !== undefined ||\n\t\tconfigValue.userRemoteValue !== undefined ||\n\t\tconfigValue.workspaceValue !== undefined ||\n\t\tconfigValue.workspaceFolderValue !== undefined\n\t);\n}\n\nexport interface IConfigurationUpdateOptions {\n\t/**\n\t * If `true`, do not notifies the error to user by showing the message box. Default is `false`.\n\t */\n\tdonotNotifyError?: boolean;\n\t/**\n\t * How to handle dirty file when updating the configuration.\n\t */\n\thandleDirtyFile?: \"save\" | \"revert\";\n}\n\nexport interface IConfigurationService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeConfiguration: Event<IConfigurationChangeEvent>;\n\n\tgetConfigurationData(): IConfigurationData | null;\n\n\t/**\n\t * Fetches the value of the section for the given overrides.\n\t * Value can be of native type or an object keyed off the section name.\n\t *\n\t * @param section - Section of the configuration. Can be `null` or `undefined`.\n\t * @param overrides - Overrides that has to be applied while fetching\n\t *\n\t */\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\n\t/**\n\t * Update a configuration value.\n\t *\n\t * Use `target` to update the configuration in a specific `ConfigurationTarget`.\n\t *\n\t * Use `overrides` to update the configuration for a resource or for override identifiers or both.\n\t *\n\t * Passing a resource through overrides will update the configuration in the workspace folder containing that resource.\n\t *\n\t * *Note 1:* Updating configuration to a default value will remove the configuration from the requested target. If not target is passed, it will be removed from all writeable targets.\n\t *\n\t * *Note 2:* Use `undefined` value to remove the configuration from the given target. If not target is passed, it will be removed from all writeable targets.\n\t *\n\t * Use `donotNotifyError` and set it to `true` to surpresss errors.\n\t *\n\t * @param key setting to be updated\n\t * @param value The new value\n\t */\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\ttarget: ConfigurationTarget,\n\t): Promise<void>;\n\tupdateValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\toverrides: IConfigurationOverrides | IConfigurationUpdateOverrides,\n\t): Promise<void>;\n\tupdateValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\toverrides: IConfigurationOverrides | IConfigurationUpdateOverrides,\n\t\ttarget: ConfigurationTarget,\n\t\toptions?: IConfigurationUpdateOptions,\n\t): Promise<void>;\n\n\tinspect<T>(\n\t\tkey: string,\n\t\toverrides?: IConfigurationOverrides,\n\t): IConfigurationValue<Readonly<T>>;\n\n\treloadConfiguration(\n\t\ttarget?: ConfigurationTarget | IWorkspaceFolder,\n\t): Promise<void>;\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t\tmemory?: string[];\n\t};\n}\n\nexport interface IConfigurationModel {\n\tcontents: any;\n\tkeys: string[];\n\toverrides: IOverrides[];\n}\n\nexport interface IOverrides {\n\tkeys: string[];\n\tcontents: any;\n\tidentifiers: string[];\n}\n\nexport interface IConfigurationData {\n\tdefaults: IConfigurationModel;\n\tpolicy: IConfigurationModel;\n\tapplication: IConfigurationModel;\n\tuser: IConfigurationModel;\n\tworkspace: IConfigurationModel;\n\tfolders: [UriComponents, IConfigurationModel][];\n}\n\nexport interface IConfigurationCompareResult {\n\tadded: string[];\n\tremoved: string[];\n\tupdated: string[];\n\toverrides: [string, string[]][];\n}\n\nexport function toValuesTree(\n\tproperties: { [qualifiedKey: string]: any },\n\tconflictReporter: (message: string) => void,\n): any {\n\tconst root = Object.create(null);\n\n\tfor (const key in properties) {\n\t\taddToValueTree(root, key, properties[key], conflictReporter);\n\t}\n\n\treturn root;\n}\n\nexport function addToValueTree(\n\tsettingsTreeRoot: any,\n\tkey: string,\n\tvalue: any,\n\tconflictReporter: (message: string) => void,\n): void {\n\tconst segments = key.split(\".\");\n\tconst last = segments.pop()!;\n\n\tlet curr = settingsTreeRoot;\n\tfor (let i = 0; i < segments.length; i++) {\n\t\tconst s = segments[i];\n\t\tlet obj = curr[s];\n\t\tswitch (typeof obj) {\n\t\t\tcase \"undefined\":\n\t\t\t\tobj = curr[s] = Object.create(null);\n\t\t\t\tbreak;\n\t\t\tcase \"object\":\n\t\t\t\tif (obj === null) {\n\t\t\t\t\tconflictReporter(\n\t\t\t\t\t\t`Ignoring ${key} as ${segments.slice(0, i + 1).join(\".\")} is null`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconflictReporter(\n\t\t\t\t\t`Ignoring ${key} as ${segments.slice(0, i + 1).join(\".\")} is ${JSON.stringify(obj)}`,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t}\n\t\tcurr = obj;\n\t}\n\n\tif (typeof curr === \"object\" && curr !== null) {\n\t\ttry {\n\t\t\tcurr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n\t\t} catch (e) {\n\t\t\tconflictReporter(\n\t\t\t\t`Ignoring ${key} as ${segments.join(\".\")} is ${JSON.stringify(curr)}`,\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconflictReporter(\n\t\t\t`Ignoring ${key} as ${segments.join(\".\")} is ${JSON.stringify(curr)}`,\n\t\t);\n\t}\n}\n\nexport function removeFromValueTree(valueTree: any, key: string): void {\n\tconst segments = key.split(\".\");\n\tdoRemoveFromValueTree(valueTree, segments);\n}\n\nfunction doRemoveFromValueTree(valueTree: any, segments: string[]): void {\n\tconst first = segments.shift()!;\n\tif (segments.length === 0) {\n\t\t// Reached last segment\n\t\tdelete valueTree[first];\n\t\treturn;\n\t}\n\n\tif (Object.keys(valueTree).indexOf(first) !== -1) {\n\t\tconst value = valueTree[first];\n\t\tif (typeof value === \"object\" && !Array.isArray(value)) {\n\t\t\tdoRemoveFromValueTree(value, segments);\n\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\tdelete valueTree[first];\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue<T>(\n\tconfig: any,\n\tsettingPath: string,\n\tdefaultValue?: T,\n): T {\n\tfunction accessSetting(config: any, path: string[]): any {\n\t\tlet current = config;\n\t\tfor (const component of path) {\n\t\t\tif (typeof current !== \"object\" || current === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tcurrent = current[component];\n\t\t}\n\t\treturn <T>current;\n\t}\n\n\tconst path = settingPath.split(\".\");\n\tconst result = accessSetting(config, path);\n\n\treturn typeof result === \"undefined\" ? defaultValue : result;\n}\n\nexport function merge(base: any, add: any, overwrite: boolean): void {\n\tObject.keys(add).forEach((key) => {\n\t\tif (key !== \"__proto__\") {\n\t\t\tif (key in base) {\n\t\t\t\tif (types.isObject(base[key]) && types.isObject(add[key])) {\n\t\t\t\t\tmerge(base[key], add[key], overwrite);\n\t\t\t\t} else if (overwrite) {\n\t\t\t\t\tbase[key] = add[key];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbase[key] = add[key];\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport function getLanguageTagSettingPlainKey(settingKey: string) {\n\treturn settingKey.replace(/[[\\]]/g, \"\");\n}\n"],
  "mappings": "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",
  "names": ["ConfigurationTarget", "config", "path"]
}
