var m=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=(g,a,i,o)=>{for(var n=o>1?void 0:o?v(a,i):a,t=g.length-1,r;t>=0;t--)(r=g[t])&&(n=(o?r(a,i,n):r(n))||n);return o&&n&&m(a,i,n),n},p=(g,a)=>(i,o)=>a(i,o,g);import{coalesce as M}from"../../../base/common/arrays.js";import{Emitter as h,Event as P}from"../../../base/common/event.js";import{Disposable as C}from"../../../base/common/lifecycle.js";import{equals as D}from"../../../base/common/objects.js";import{isEmptyObject as S}from"../../../base/common/types.js";import{ILogService as _,NullLogService as I}from"../../log/common/log.js";import{IPolicyService as V}from"../../policy/common/policy.js";import{Registry as u}from"../../registry/common/platform.js";import{ConfigurationModel as c}from"./configurationModels.js";import{Extensions as f}from"./configurationRegistry.js";class U extends C{constructor(i){super();this.logService=i}_onDidChangeConfiguration=this._register(new h);onDidChangeConfiguration=this._onDidChangeConfiguration.event;_configurationModel=c.createEmptyModel(this.logService);get configurationModel(){return this._configurationModel}async initialize(){return this.resetConfigurationModel(),this._register(u.as(f.Configuration).onDidUpdateConfiguration(({properties:i,defaultsOverrides:o})=>this.onDidUpdateConfiguration(Array.from(i),o))),this.configurationModel}reload(){return this.resetConfigurationModel(),this.configurationModel}onDidUpdateConfiguration(i,o){this.updateConfigurationModel(i,u.as(f.Configuration).getConfigurationProperties()),this._onDidChangeConfiguration.fire({defaults:this.configurationModel,properties:i})}getConfigurationDefaultOverrides(){return{}}resetConfigurationModel(){this._configurationModel=c.createEmptyModel(this.logService);const i=u.as(f.Configuration).getConfigurationProperties();this.updateConfigurationModel(Object.keys(i),i)}updateConfigurationModel(i,o){const n=this.getConfigurationDefaultOverrides();for(const t of i){const r=n[t],e=o[t];r!==void 0?this._configurationModel.setValue(t,r):e?this._configurationModel.setValue(t,e.default):this._configurationModel.removeValue(t)}}}class ${onDidChangeConfiguration=P.None;configurationModel=c.createEmptyModel(new I);async initialize(){return this.configurationModel}}let d=class extends C{constructor(i,o,n){super();this.defaultConfiguration=i;this.policyService=o;this.logService=n}_onDidChangeConfiguration=this._register(new h);onDidChangeConfiguration=this._onDidChangeConfiguration.event;_configurationModel=c.createEmptyModel(this.logService);get configurationModel(){return this._configurationModel}async initialize(){return this.logService.trace("PolicyConfiguration#initialize"),this.update(await this.updatePolicyDefinitions(this.defaultConfiguration.configurationModel.keys),!1),this._register(this.policyService.onDidChange(i=>this.onDidChangePolicies(i))),this._register(this.defaultConfiguration.onDidChangeConfiguration(async({properties:i})=>this.update(await this.updatePolicyDefinitions(i),!0))),this._configurationModel}async updatePolicyDefinitions(i){this.logService.trace("PolicyConfiguration#updatePolicyDefinitions",i);const o={},n=[],t=u.as(f.Configuration).getConfigurationProperties();for(const r of i){const e=t[r];if(!e){n.push(r);continue}if(e.policy){if(e.type!=="string"&&e.type!=="number"){this.logService.warn(`Policy ${e.policy.name} has unsupported type ${e.type}`);continue}n.push(r),o[e.policy.name]={type:e.type}}}return S(o)||await this.policyService.updatePolicyDefinitions(o),n}onDidChangePolicies(i){this.logService.trace("PolicyConfiguration#onDidChangePolicies",i);const o=u.as(f.Configuration).getPolicyConfigurations(),n=M(i.map(t=>o.get(t)));this.update(n,!0)}update(i,o){this.logService.trace("PolicyConfiguration#update",i);const n=u.as(f.Configuration).getConfigurationProperties(),t=[],r=this._configurationModel.isEmpty();for(const e of i){const s=n[e]?.policy?.name;if(s){const l=this.policyService.getPolicyValue(s);(r?l!==void 0:!D(this._configurationModel.getValue(e),l))&&t.push([e,l])}else this._configurationModel.getValue(e)!==void 0&&t.push([e,void 0])}if(t.length){this.logService.trace("PolicyConfiguration#changed",t);const e=this._configurationModel;this._configurationModel=c.createEmptyModel(this.logService);for(const s of e.keys)this._configurationModel.setValue(s,e.getValue(s));for(const[s,l]of t)l===void 0?this._configurationModel.removeValue(s):this._configurationModel.setValue(s,l);o&&this._onDidChangeConfiguration.fire(this._configurationModel)}}};d=y([p(1,V),p(2,_)],d);export{U as DefaultConfiguration,$ as NullPolicyConfiguration,d as PolicyConfiguration};
