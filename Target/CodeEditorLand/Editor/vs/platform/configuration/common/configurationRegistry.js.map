{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/common/configurationRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../base/common/arrays.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IJSONSchema } from '../../../base/common/jsonSchema.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions, IJSONContributionRegistry } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { PolicyName } from '../../policy/common/policy.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nexport enum EditPresentationTypes {\n\tMultiline = 'multilineText',\n\tSingleline = 'singlelineText'\n}\n\nexport const Extensions = {\n\tConfiguration: 'base.contributions.configuration'\n};\n\nexport interface IConfigurationDelta {\n\tremovedDefaults?: IConfigurationDefaults[];\n\tremovedConfigurations?: IConfigurationNode[];\n\taddedDefaults?: IConfigurationDefaults[];\n\taddedConfigurations?: IConfigurationNode[];\n}\n\nexport interface IConfigurationRegistry {\n\n\t/**\n\t * Register a configuration to the registry.\n\t */\n\tregisterConfiguration(configuration: IConfigurationNode): void;\n\n\t/**\n\t * Register multiple configurations to the registry.\n\t */\n\tregisterConfigurations(configurations: IConfigurationNode[], validate?: boolean): void;\n\n\t/**\n\t * Deregister multiple configurations from the registry.\n\t */\n\tderegisterConfigurations(configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * update the configuration registry by\n\t * \t- registering the configurations to add\n\t * \t- dereigstering the configurations to remove\n\t */\n\tupdateConfigurations(configurations: { add: IConfigurationNode[]; remove: IConfigurationNode[] }): void;\n\n\t/**\n\t * Register multiple default configurations to the registry.\n\t */\n\tregisterDefaultConfigurations(defaultConfigurations: IConfigurationDefaults[]): void;\n\n\t/**\n\t * Deregister multiple default configurations from the registry.\n\t */\n\tderegisterDefaultConfigurations(defaultConfigurations: IConfigurationDefaults[]): void;\n\n\t/**\n\t * Bulk update of the configuration registry (default and configurations, remove and add)\n\t * @param delta\n\t */\n\tdeltaConfiguration(delta: IConfigurationDelta): void;\n\n\t/**\n\t * Return the registered default configurations\n\t */\n\tgetRegisteredDefaultConfigurations(): IConfigurationDefaults[];\n\n\t/**\n\t * Return the registered configuration defaults overrides\n\t */\n\tgetConfigurationDefaultsOverrides(): Map<string, IConfigurationDefaultOverrideValue>;\n\n\t/**\n\t * Signal that the schema of a configuration setting has changes. It is currently only supported to change enumeration values.\n\t * Property or default value changes are not allowed.\n\t */\n\tnotifyConfigurationSchemaUpdated(...configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * Event that fires whenever a configuration has been\n\t * registered.\n\t */\n\treadonly onDidSchemaChange: Event<void>;\n\n\t/**\n\t * Event that fires whenever a configuration has been\n\t * registered.\n\t */\n\treadonly onDidUpdateConfiguration: Event<{ properties: ReadonlySet<string>; defaultsOverrides?: boolean }>;\n\n\t/**\n\t * Returns all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurations(): IConfigurationNode[];\n\n\t/**\n\t * Returns all configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\n\t/**\n\t * Return all configurations by policy name\n\t */\n\tgetPolicyConfigurations(): Map<PolicyName, string>;\n\n\t/**\n\t * Returns all excluded configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetExcludedConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\n\t/**\n\t * Register the identifiers for editor configurations\n\t */\n\tregisterOverrideIdentifiers(identifiers: string[]): void;\n}\n\nexport const enum ConfigurationScope {\n\t/**\n\t * Application specific configuration, which can be configured only in local user settings.\n\t */\n\tAPPLICATION = 1,\n\t/**\n\t * Machine specific configuration, which can be configured only in local and remote user settings.\n\t */\n\tMACHINE,\n\t/**\n\t * Window specific configuration, which can be configured in the user or workspace settings.\n\t */\n\tWINDOW,\n\t/**\n\t * Resource specific configuration, which can be configured in the user, workspace or folder settings.\n\t */\n\tRESOURCE,\n\t/**\n\t * Resource specific configuration that can be configured in language specific settings\n\t */\n\tLANGUAGE_OVERRIDABLE,\n\t/**\n\t * Machine specific configuration that can also be configured in workspace or folder settings.\n\t */\n\tMACHINE_OVERRIDABLE,\n}\n\nexport interface IPolicy {\n\n\t/**\n\t * The policy name.\n\t */\n\treadonly name: PolicyName;\n\n\t/**\n\t * The Code version in which this policy was introduced.\n\t */\n\treadonly minimumVersion: `${number}.${number}`;\n}\n\nexport interface IConfigurationPropertySchema extends IJSONSchema {\n\n\tscope?: ConfigurationScope;\n\n\t/**\n\t * When restricted, value of this configuration will be read only from trusted sources.\n\t * For eg., If the workspace is not trusted, then the value of this configuration is not read from workspace settings file.\n\t */\n\trestricted?: boolean;\n\n\t/**\n\t * When `false` this property is excluded from the registry. Default is to include.\n\t */\n\tincluded?: boolean;\n\n\t/**\n\t * List of tags associated to the property.\n\t *  - A tag can be used for filtering\n\t *  - Use `experimental` tag for marking the setting as experimental. **Note:** Defaults of experimental settings can be changed by the running experiments.\n\t */\n\ttags?: string[];\n\n\t/**\n\t * When enabled this setting is ignored during sync and user can override this.\n\t */\n\tignoreSync?: boolean;\n\n\t/**\n\t * When enabled this setting is ignored during sync and user cannot override this.\n\t */\n\tdisallowSyncIgnore?: boolean;\n\n\t/**\n\t * Disallow extensions to contribute configuration default value for this setting.\n\t */\n\tdisallowConfigurationDefault?: boolean;\n\n\t/**\n\t * Labels for enumeration items\n\t */\n\tenumItemLabels?: string[];\n\n\t/**\n\t * When specified, controls the presentation format of string settings.\n\t * Otherwise, the presentation format defaults to `singleline`.\n\t */\n\teditPresentation?: EditPresentationTypes;\n\n\t/**\n\t * When specified, gives an order number for the setting\n\t * within the settings editor. Otherwise, the setting is placed at the end.\n\t */\n\torder?: number;\n\n\t/**\n\t * When specified, this setting's value can always be overwritten by\n\t * a system-wide policy.\n\t */\n\tpolicy?: IPolicy;\n}\n\nexport interface IExtensionInfo {\n\tid: string;\n\tdisplayName?: string;\n}\n\nexport interface IConfigurationNode {\n\tid?: string;\n\torder?: number;\n\ttype?: string | string[];\n\ttitle?: string;\n\tdescription?: string;\n\tproperties?: IStringDictionary<IConfigurationPropertySchema>;\n\tallOf?: IConfigurationNode[];\n\tscope?: ConfigurationScope;\n\textensionInfo?: IExtensionInfo;\n\trestrictedProperties?: string[];\n}\n\nexport type ConfigurationDefaultValueSource = IExtensionInfo | Map<string, IExtensionInfo>;\n\nexport interface IConfigurationDefaults {\n\toverrides: IStringDictionary<any>;\n\tsource?: IExtensionInfo;\n}\n\nexport type IRegisteredConfigurationPropertySchema = IConfigurationPropertySchema & {\n\tdefaultDefaultValue?: any;\n\tsource?: IExtensionInfo; // Source of the Property\n\tdefaultValueSource?: ConfigurationDefaultValueSource; // Source of the Default Value\n};\n\nexport interface IConfigurationDefaultOverride {\n\treadonly value: any;\n\treadonly source?: IExtensionInfo;  // Source of the default override\n}\n\nexport interface IConfigurationDefaultOverrideValue {\n\treadonly value: any;\n\treadonly source?: ConfigurationDefaultValueSource;\n}\n\nexport const allSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const applicationSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const machineSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const windowSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const resourceSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\n\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nexport const configurationDefaultsSchemaId = 'vscode://schemas/settings/configurationDefaults';\n\nconst contributionRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\nclass ConfigurationRegistry implements IConfigurationRegistry {\n\n\tprivate readonly registeredConfigurationDefaults: IConfigurationDefaults[] = [];\n\tprivate readonly configurationDefaultsOverrides: Map<string, { configurationDefaultOverrides: IConfigurationDefaultOverride[]; configurationDefaultOverrideValue?: IConfigurationDefaultOverrideValue }>;\n\tprivate readonly defaultLanguageConfigurationOverridesNode: IConfigurationNode;\n\tprivate readonly configurationContributors: IConfigurationNode[];\n\tprivate readonly configurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\tprivate readonly policyConfigurations: Map<PolicyName, string>;\n\tprivate readonly excludedConfigurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\tprivate readonly resourceLanguageSettingsSchema: IJSONSchema;\n\tprivate readonly overrideIdentifiers = new Set<string>();\n\n\tprivate readonly _onDidSchemaChange = new Emitter<void>();\n\treadonly onDidSchemaChange: Event<void> = this._onDidSchemaChange.event;\n\n\tprivate readonly _onDidUpdateConfiguration = new Emitter<{ properties: ReadonlySet<string>; defaultsOverrides?: boolean }>();\n\treadonly onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;\n\n\tconstructor() {\n\t\tthis.configurationDefaultsOverrides = new Map();\n\t\tthis.defaultLanguageConfigurationOverridesNode = {\n\t\t\tid: 'defaultOverrides',\n\t\t\ttitle: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n\t\t\tproperties: {}\n\t\t};\n\t\tthis.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n\t\tthis.resourceLanguageSettingsSchema = {\n\t\t\tproperties: {},\n\t\t\tpatternProperties: {},\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true\n\t\t};\n\t\tthis.configurationProperties = {};\n\t\tthis.policyConfigurations = new Map<PolicyName, string>();\n\t\tthis.excludedConfigurationProperties = {};\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis.registerOverridePropertyPatternKey();\n\t}\n\n\tpublic registerConfiguration(configuration: IConfigurationNode, validate: boolean = true): void {\n\t\tthis.registerConfigurations([configuration], validate);\n\t}\n\n\tpublic registerConfigurations(configurations: IConfigurationNode[], validate: boolean = true): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doRegisterConfigurations(configurations, validate, properties);\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic deregisterConfigurations(configurations: IConfigurationNode[]): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterConfigurations(configurations, properties);\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic updateConfigurations({ add, remove }: { add: IConfigurationNode[]; remove: IConfigurationNode[] }): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterConfigurations(remove, properties);\n\t\tthis.doRegisterConfigurations(add, false, properties);\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic registerDefaultConfigurations(configurationDefaults: IConfigurationDefaults[]): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doRegisterDefaultConfigurations(configurationDefaults, properties);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n\t}\n\n\tprivate doRegisterDefaultConfigurations(configurationDefaults: IConfigurationDefaults[], bucket: Set<string>) {\n\n\t\tthis.registeredConfigurationDefaults.push(...configurationDefaults);\n\n\t\tconst overrideIdentifiers: string[] = [];\n\n\t\tfor (const { overrides, source } of configurationDefaults) {\n\t\t\tfor (const key in overrides) {\n\t\t\t\tbucket.add(key);\n\n\t\t\t\tconst configurationDefaultOverridesForKey = this.configurationDefaultsOverrides.get(key)\n\t\t\t\t\t?? this.configurationDefaultsOverrides.set(key, { configurationDefaultOverrides: [] }).get(key)!;\n\n\t\t\t\tconst value = overrides[key];\n\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrides.push({ value, source });\n\n\t\t\t\t// Configuration defaults for Override Identifiers\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tconst newDefaultOverride = this.mergeDefaultConfigurationsForOverrideIdentifier(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n\t\t\t\t\tif (!newDefaultOverride) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n\t\t\t\t\tthis.updateDefaultOverrideProperty(key, newDefaultOverride, source);\n\t\t\t\t\toverrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n\t\t\t\t}\n\n\t\t\t\t// Configuration defaults for Configuration Properties\n\t\t\t\telse {\n\t\t\t\t\tconst newDefaultOverride = this.mergeDefaultConfigurationsForConfigurationProperty(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n\t\t\t\t\tif (!newDefaultOverride) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\t\t\t\t\t\tthis.updateSchema(key, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\tthis.doRegisterOverrideIdentifiers(overrideIdentifiers);\n\t}\n\n\tpublic deregisterDefaultConfigurations(defaultConfigurations: IConfigurationDefaults[]): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterDefaultConfigurations(defaultConfigurations, properties);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n\t}\n\n\tprivate doDeregisterDefaultConfigurations(defaultConfigurations: IConfigurationDefaults[], bucket: Set<string>): void {\n\t\tfor (const defaultConfiguration of defaultConfigurations) {\n\t\t\tconst index = this.registeredConfigurationDefaults.indexOf(defaultConfiguration);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.registeredConfigurationDefaults.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\tfor (const { overrides, source } of defaultConfigurations) {\n\t\t\tfor (const key in overrides) {\n\t\t\t\tconst configurationDefaultOverridesForKey = this.configurationDefaultsOverrides.get(key);\n\t\t\t\tif (!configurationDefaultOverridesForKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst index = configurationDefaultOverridesForKey.configurationDefaultOverrides\n\t\t\t\t\t.findIndex(configurationDefaultOverride => source ? configurationDefaultOverride.source?.id === source.id : configurationDefaultOverride.value === overrides[key]);\n\t\t\t\tif (index === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrides.splice(index, 1);\n\t\t\t\tif (configurationDefaultOverridesForKey.configurationDefaultOverrides.length === 0) {\n\t\t\t\t\tthis.configurationDefaultsOverrides.delete(key);\n\t\t\t\t}\n\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tlet configurationDefaultOverrideValue: IConfigurationDefaultOverrideValue | undefined;\n\t\t\t\t\tfor (const configurationDefaultOverride of configurationDefaultOverridesForKey.configurationDefaultOverrides) {\n\t\t\t\t\t\tconfigurationDefaultOverrideValue = this.mergeDefaultConfigurationsForOverrideIdentifier(key, configurationDefaultOverride.value, configurationDefaultOverride.source, configurationDefaultOverrideValue);\n\t\t\t\t\t}\n\t\t\t\t\tif (configurationDefaultOverrideValue && !types.isEmptyObject(configurationDefaultOverrideValue.value)) {\n\t\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue = configurationDefaultOverrideValue;\n\t\t\t\t\t\tthis.updateDefaultOverrideProperty(key, configurationDefaultOverrideValue, source);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.configurationDefaultsOverrides.delete(key);\n\t\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\t\tdelete this.defaultLanguageConfigurationOverridesNode.properties![key];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet configurationDefaultOverrideValue: IConfigurationDefaultOverrideValue | undefined;\n\t\t\t\t\tfor (const configurationDefaultOverride of configurationDefaultOverridesForKey.configurationDefaultOverrides) {\n\t\t\t\t\t\tconfigurationDefaultOverrideValue = this.mergeDefaultConfigurationsForConfigurationProperty(key, configurationDefaultOverride.value, configurationDefaultOverride.source, configurationDefaultOverrideValue);\n\t\t\t\t\t}\n\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue = configurationDefaultOverrideValue;\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\t\t\t\t\t\tthis.updateSchema(key, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbucket.add(key);\n\t\t\t}\n\t\t}\n\t\tthis.updateOverridePropertyPatternKey();\n\t}\n\n\tprivate updateDefaultOverrideProperty(key: string, newDefaultOverride: IConfigurationDefaultOverrideValue, source: IExtensionInfo | undefined): void {\n\t\tconst property: IRegisteredConfigurationPropertySchema = {\n\t\t\ttype: 'object',\n\t\t\tdefault: newDefaultOverride.value,\n\t\t\tdescription: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", getLanguageTagSettingPlainKey(key)),\n\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\tdefaultDefaultValue: newDefaultOverride.value,\n\t\t\tsource,\n\t\t\tdefaultValueSource: source\n\t\t};\n\t\tthis.configurationProperties[key] = property;\n\t\tthis.defaultLanguageConfigurationOverridesNode.properties![key] = property;\n\t}\n\n\tprivate mergeDefaultConfigurationsForOverrideIdentifier(overrideIdentifier: string, configurationValueObject: IStringDictionary<any>, valueSource: IExtensionInfo | undefined, existingDefaultOverride: IConfigurationDefaultOverrideValue | undefined): IConfigurationDefaultOverrideValue | undefined {\n\t\tconst defaultValue = existingDefaultOverride?.value || {};\n\t\tconst source = existingDefaultOverride?.source ?? new Map<string, IExtensionInfo>();\n\n\t\t// This should not happen\n\t\tif (!(source instanceof Map)) {\n\t\t\tconsole.error('objectConfigurationSources is not a Map');\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (const propertyKey of Object.keys(configurationValueObject)) {\n\t\t\tconst propertyDefaultValue = configurationValueObject[propertyKey];\n\n\t\t\tconst isObjectSetting = types.isObject(propertyDefaultValue) &&\n\t\t\t\t(types.isUndefined(defaultValue[propertyKey]) || types.isObject(defaultValue[propertyKey]));\n\n\t\t\t// If the default value is an object, merge the objects and store the source of each keys\n\t\t\tif (isObjectSetting) {\n\t\t\t\tdefaultValue[propertyKey] = { ...(defaultValue[propertyKey] ?? {}), ...propertyDefaultValue };\n\t\t\t\t// Track the source of each value in the object\n\t\t\t\tif (valueSource) {\n\t\t\t\t\tfor (const objectKey in propertyDefaultValue) {\n\t\t\t\t\t\tsource.set(`${propertyKey}.${objectKey}`, valueSource);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Primitive values are overridden\n\t\t\telse {\n\t\t\t\tdefaultValue[propertyKey] = propertyDefaultValue;\n\t\t\t\tif (valueSource) {\n\t\t\t\t\tsource.set(propertyKey, valueSource);\n\t\t\t\t} else {\n\t\t\t\t\tsource.delete(propertyKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { value: defaultValue, source };\n\t}\n\n\tprivate mergeDefaultConfigurationsForConfigurationProperty(propertyKey: string, value: any, valuesSource: IExtensionInfo | undefined, existingDefaultOverride: IConfigurationDefaultOverrideValue | undefined): IConfigurationDefaultOverrideValue | undefined {\n\t\tconst property = this.configurationProperties[propertyKey];\n\t\tconst existingDefaultValue = existingDefaultOverride?.value ?? property?.defaultDefaultValue;\n\t\tlet source: ConfigurationDefaultValueSource | undefined = valuesSource;\n\n\t\tconst isObjectSetting = types.isObject(value) &&\n\t\t\t(\n\t\t\t\tproperty !== undefined && property.type === 'object' ||\n\t\t\t\tproperty === undefined && (types.isUndefined(existingDefaultValue) || types.isObject(existingDefaultValue))\n\t\t\t);\n\n\t\t// If the default value is an object, merge the objects and store the source of each keys\n\t\tif (isObjectSetting) {\n\t\t\tsource = existingDefaultOverride?.source ?? new Map<string, IExtensionInfo>();\n\n\t\t\t// This should not happen\n\t\t\tif (!(source instanceof Map)) {\n\t\t\t\tconsole.error('defaultValueSource is not a Map');\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tfor (const objectKey in value) {\n\t\t\t\tif (valuesSource) {\n\t\t\t\t\tsource.set(`${propertyKey}.${objectKey}`, valuesSource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = { ...(types.isObject(existingDefaultValue) ? existingDefaultValue : {}), ...value };\n\t\t}\n\n\t\treturn { value, source };\n\t}\n\n\tpublic deltaConfiguration(delta: IConfigurationDelta): void {\n\t\t// defaults: remove\n\t\tlet defaultsOverrides = false;\n\t\tconst properties = new Set<string>();\n\t\tif (delta.removedDefaults) {\n\t\t\tthis.doDeregisterDefaultConfigurations(delta.removedDefaults, properties);\n\t\t\tdefaultsOverrides = true;\n\t\t}\n\t\t// defaults: add\n\t\tif (delta.addedDefaults) {\n\t\t\tthis.doRegisterDefaultConfigurations(delta.addedDefaults, properties);\n\t\t\tdefaultsOverrides = true;\n\t\t}\n\t\t// configurations: remove\n\t\tif (delta.removedConfigurations) {\n\t\t\tthis.doDeregisterConfigurations(delta.removedConfigurations, properties);\n\t\t}\n\t\t// configurations: add\n\t\tif (delta.addedConfigurations) {\n\t\t\tthis.doRegisterConfigurations(delta.addedConfigurations, false, properties);\n\t\t}\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties, defaultsOverrides });\n\t}\n\n\tpublic notifyConfigurationSchemaUpdated(...configurations: IConfigurationNode[]) {\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tpublic registerOverrideIdentifiers(overrideIdentifiers: string[]): void {\n\t\tthis.doRegisterOverrideIdentifiers(overrideIdentifiers);\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tprivate doRegisterOverrideIdentifiers(overrideIdentifiers: string[]) {\n\t\tfor (const overrideIdentifier of overrideIdentifiers) {\n\t\t\tthis.overrideIdentifiers.add(overrideIdentifier);\n\t\t}\n\t\tthis.updateOverridePropertyPatternKey();\n\t}\n\n\tprivate doRegisterConfigurations(configurations: IConfigurationNode[], validate: boolean, bucket: Set<string>): void {\n\n\t\tconfigurations.forEach(configuration => {\n\n\t\t\tthis.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n\n\t\t\tthis.configurationContributors.push(configuration);\n\t\t\tthis.registerJSONConfiguration(configuration);\n\t\t});\n\t}\n\n\tprivate doDeregisterConfigurations(configurations: IConfigurationNode[], bucket: Set<string>): void {\n\n\t\tconst deregisterConfiguration = (configuration: IConfigurationNode) => {\n\t\t\tif (configuration.properties) {\n\t\t\t\tfor (const key in configuration.properties) {\n\t\t\t\t\tbucket.add(key);\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property?.policy?.name) {\n\t\t\t\t\t\tthis.policyConfigurations.delete(property.policy.name);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\tthis.removeFromSchema(key, configuration.properties[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconfiguration.allOf?.forEach(node => deregisterConfiguration(node));\n\t\t};\n\t\tfor (const configuration of configurations) {\n\t\t\tderegisterConfiguration(configuration);\n\t\t\tconst index = this.configurationContributors.indexOf(configuration);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.configurationContributors.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate validateAndRegisterProperties(configuration: IConfigurationNode, validate: boolean = true, extensionInfo: IExtensionInfo | undefined, restrictedProperties: string[] | undefined, scope: ConfigurationScope = ConfigurationScope.WINDOW, bucket: Set<string>): void {\n\t\tscope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n\t\tconst properties = configuration.properties;\n\t\tif (properties) {\n\t\t\tfor (const key in properties) {\n\t\t\t\tconst property: IRegisteredConfigurationPropertySchema = properties[key];\n\t\t\t\tif (validate && validateProperty(key, property)) {\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tproperty.source = extensionInfo;\n\n\t\t\t\t// update default value\n\t\t\t\tproperty.defaultDefaultValue = properties[key].default;\n\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\n\t\t\t\t// update scope\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tproperty.scope = undefined; // No scope for overridable properties `[${identifier}]`\n\t\t\t\t} else {\n\t\t\t\t\tproperty.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n\t\t\t\t\tproperty.restricted = types.isUndefinedOrNull(property.restricted) ? !!restrictedProperties?.includes(key) : property.restricted;\n\t\t\t\t}\n\n\t\t\t\t// Add to properties maps\n\t\t\t\t// Property is included by default if 'included' is unspecified\n\t\t\t\tif (properties[key].hasOwnProperty('included') && !properties[key].included) {\n\t\t\t\t\tthis.excludedConfigurationProperties[key] = properties[key];\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthis.configurationProperties[key] = properties[key];\n\t\t\t\t\tif (properties[key].policy?.name) {\n\t\t\t\t\t\tthis.policyConfigurations.set(properties[key].policy!.name, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n\t\t\t\t\t// If not set, default deprecationMessage to the markdown source\n\t\t\t\t\tproperties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n\t\t\t\t}\n\n\t\t\t\tbucket.add(key);\n\t\t\t}\n\t\t}\n\t\tconst subNodes = configuration.allOf;\n\t\tif (subNodes) {\n\t\t\tfor (const node of subNodes) {\n\t\t\t\tthis.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n\t\t\t}\n\t\t}\n\t}\n\n\t// TODO: @sandy081 - Remove this method and include required info in getConfigurationProperties\n\tgetConfigurations(): IConfigurationNode[] {\n\t\treturn this.configurationContributors;\n\t}\n\n\tgetConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema> {\n\t\treturn this.configurationProperties;\n\t}\n\n\tgetPolicyConfigurations(): Map<PolicyName, string> {\n\t\treturn this.policyConfigurations;\n\t}\n\n\tgetExcludedConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema> {\n\t\treturn this.excludedConfigurationProperties;\n\t}\n\n\tgetRegisteredDefaultConfigurations(): IConfigurationDefaults[] {\n\t\treturn [...this.registeredConfigurationDefaults];\n\t}\n\n\tgetConfigurationDefaultsOverrides(): Map<string, IConfigurationDefaultOverrideValue> {\n\t\tconst configurationDefaultsOverrides = new Map<string, IConfigurationDefaultOverrideValue>();\n\t\tfor (const [key, value] of this.configurationDefaultsOverrides) {\n\t\t\tif (value.configurationDefaultOverrideValue) {\n\t\t\t\tconfigurationDefaultsOverrides.set(key, value.configurationDefaultOverrideValue);\n\t\t\t}\n\t\t}\n\t\treturn configurationDefaultsOverrides;\n\t}\n\n\tprivate registerJSONConfiguration(configuration: IConfigurationNode) {\n\t\tconst register = (configuration: IConfigurationNode) => {\n\t\t\tconst properties = configuration.properties;\n\t\t\tif (properties) {\n\t\t\t\tfor (const key in properties) {\n\t\t\t\t\tthis.updateSchema(key, properties[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst subNodes = configuration.allOf;\n\t\t\tsubNodes?.forEach(register);\n\t\t};\n\t\tregister(configuration);\n\t}\n\n\tprivate updateSchema(key: string, property: IConfigurationPropertySchema): void {\n\t\tallSettings.properties[key] = property;\n\t\tswitch (property.scope) {\n\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\tapplicationSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE:\n\t\t\t\tmachineSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE_OVERRIDABLE:\n\t\t\t\tmachineOverridableSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\twindowSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\t\tresourceSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.LANGUAGE_OVERRIDABLE:\n\t\t\t\tresourceSettings.properties[key] = property;\n\t\t\t\tthis.resourceLanguageSettingsSchema.properties![key] = property;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate removeFromSchema(key: string, property: IConfigurationPropertySchema): void {\n\t\tdelete allSettings.properties[key];\n\t\tswitch (property.scope) {\n\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\tdelete applicationSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE:\n\t\t\t\tdelete machineSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE_OVERRIDABLE:\n\t\t\t\tdelete machineOverridableSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\tdelete windowSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\tcase ConfigurationScope.LANGUAGE_OVERRIDABLE:\n\t\t\t\tdelete resourceSettings.properties[key];\n\t\t\t\tdelete this.resourceLanguageSettingsSchema.properties![key];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate updateOverridePropertyPatternKey(): void {\n\t\tfor (const overrideIdentifier of this.overrideIdentifiers.values()) {\n\t\t\tconst overrideIdentifierProperty = `[${overrideIdentifier}]`;\n\t\t\tconst resourceLanguagePropertiesSchema: IJSONSchema = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n\t\t\t\terrorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n\t\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\t};\n\t\t\tthis.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n\t\t\tallSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tapplicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tmachineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tmachineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\twindowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tresourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t}\n\t}\n\n\tprivate registerOverridePropertyPatternKey(): void {\n\t\tconst resourceLanguagePropertiesSchema: IJSONSchema = {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n\t\t\terrorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t};\n\t\tallSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tapplicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tmachineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tmachineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\twindowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tresourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tprivate updatePropertyDefaultValue(key: string, property: IRegisteredConfigurationPropertySchema): void {\n\t\tconst configurationdefaultOverride = this.configurationDefaultsOverrides.get(key)?.configurationDefaultOverrideValue;\n\t\tlet defaultValue = undefined;\n\t\tlet defaultSource = undefined;\n\t\tif (configurationdefaultOverride\n\t\t\t&& (!property.disallowConfigurationDefault || !configurationdefaultOverride.source) // Prevent overriding the default value if the property is disallowed to be overridden by configuration defaults from extensions\n\t\t) {\n\t\t\tdefaultValue = configurationdefaultOverride.value;\n\t\t\tdefaultSource = configurationdefaultOverride.source;\n\t\t}\n\t\tif (types.isUndefined(defaultValue)) {\n\t\t\tdefaultValue = property.defaultDefaultValue;\n\t\t\tdefaultSource = undefined;\n\t\t}\n\t\tif (types.isUndefined(defaultValue)) {\n\t\t\tdefaultValue = getDefaultValue(property.type);\n\t\t}\n\t\tproperty.default = defaultValue;\n\t\tproperty.defaultValueSource = defaultSource;\n\t}\n}\n\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\n\nexport function overrideIdentifiersFromKey(key: string): string[] {\n\tconst identifiers: string[] = [];\n\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\tlet matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n\t\twhile (matches?.length) {\n\t\t\tconst identifier = matches[1].trim();\n\t\t\tif (identifier) {\n\t\t\t\tidentifiers.push(identifier);\n\t\t\t}\n\t\t\tmatches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n\t\t}\n\t}\n\treturn distinct(identifiers);\n}\n\nexport function keyFromOverrideIdentifiers(overrideIdentifiers: string[]): string {\n\treturn overrideIdentifiers.reduce((result, overrideIdentifier) => `${result}[${overrideIdentifier}]`, '');\n}\n\nexport function getDefaultValue(type: string | string[] | undefined): any {\n\tconst t = Array.isArray(type) ? (<string[]>type)[0] : <string>type;\n\tswitch (t) {\n\t\tcase 'boolean':\n\t\t\treturn false;\n\t\tcase 'integer':\n\t\tcase 'number':\n\t\t\treturn 0;\n\t\tcase 'string':\n\t\t\treturn '';\n\t\tcase 'array':\n\t\t\treturn [];\n\t\tcase 'object':\n\t\t\treturn {};\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\n\nexport function validateProperty(property: string, schema: IRegisteredConfigurationPropertySchema): string | null {\n\tif (!property.trim()) {\n\t\treturn nls.localize('config.property.empty', \"Cannot register an empty property\");\n\t}\n\tif (OVERRIDE_PROPERTY_REGEX.test(property)) {\n\t\treturn nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n\t}\n\tif (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n\t\treturn nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n\t}\n\tif (schema.policy?.name && configurationRegistry.getPolicyConfigurations().get(schema.policy?.name) !== undefined) {\n\t\treturn nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));\n\t}\n\treturn null;\n}\n\nexport function getScopes(): [string, ConfigurationScope | undefined][] {\n\tconst scopes: [string, ConfigurationScope | undefined][] = [];\n\tconst configurationProperties = configurationRegistry.getConfigurationProperties();\n\tfor (const key of Object.keys(configurationProperties)) {\n\t\tscopes.push([key, configurationProperties[key].scope]);\n\t}\n\tscopes.push(['launch', ConfigurationScope.RESOURCE]);\n\tscopes.push(['task', ConfigurationScope.RESOURCE]);\n\treturn scopes;\n}\n\nexport function getAllConfigurationProperties(configurationNode: IConfigurationNode[]): IStringDictionary<IRegisteredConfigurationPropertySchema> {\n\tconst result: IStringDictionary<IRegisteredConfigurationPropertySchema> = {};\n\tfor (const configuration of configurationNode) {\n\t\tconst properties = configuration.properties;\n\t\tif (types.isObject(properties)) {\n\t\t\tfor (const key in properties) {\n\t\t\t\tresult[key] = properties[key];\n\t\t\t}\n\t\t}\n\t\tif (configuration.allOf) {\n\t\t\tObject.assign(result, getAllConfigurationProperties(configuration.allOf));\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function parseScope(scope: string): ConfigurationScope {\n\tswitch (scope) {\n\t\tcase 'application':\n\t\t\treturn ConfigurationScope.APPLICATION;\n\t\tcase 'machine':\n\t\t\treturn ConfigurationScope.MACHINE;\n\t\tcase 'resource':\n\t\t\treturn ConfigurationScope.RESOURCE;\n\t\tcase 'machine-overridable':\n\t\t\treturn ConfigurationScope.MACHINE_OVERRIDABLE;\n\t\tcase 'language-overridable':\n\t\t\treturn ConfigurationScope.LANGUAGE_OVERRIDABLE;\n\t\tdefault:\n\t\t\treturn ConfigurationScope.WINDOW;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["EditPresentationTypes", "ConfigurationScope", "configuration"]
}
