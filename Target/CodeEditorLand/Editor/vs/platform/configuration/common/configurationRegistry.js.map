{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/common/configurationRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../base/common/arrays.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport type { IJSONSchema } from \"../../../base/common/jsonSchema.js\";\nimport * as types from \"../../../base/common/types.js\";\nimport * as nls from \"../../../nls.js\";\nimport {\n\ttype IJSONContributionRegistry,\n\tExtensions as JSONExtensions,\n} from \"../../jsonschemas/common/jsonContributionRegistry.js\";\nimport type { PolicyName } from \"../../policy/common/policy.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\nimport { getLanguageTagSettingPlainKey } from \"./configuration.js\";\n\nexport enum EditPresentationTypes {\n\tMultiline = \"multilineText\",\n\tSingleline = \"singlelineText\",\n}\n\nexport const Extensions = {\n\tConfiguration: \"base.contributions.configuration\",\n};\n\nexport interface IConfigurationDelta {\n\tremovedDefaults?: IConfigurationDefaults[];\n\tremovedConfigurations?: IConfigurationNode[];\n\taddedDefaults?: IConfigurationDefaults[];\n\taddedConfigurations?: IConfigurationNode[];\n}\n\nexport interface IConfigurationRegistry {\n\t/**\n\t * Register a configuration to the registry.\n\t */\n\tregisterConfiguration(configuration: IConfigurationNode): void;\n\n\t/**\n\t * Register multiple configurations to the registry.\n\t */\n\tregisterConfigurations(\n\t\tconfigurations: IConfigurationNode[],\n\t\tvalidate?: boolean,\n\t): void;\n\n\t/**\n\t * Deregister multiple configurations from the registry.\n\t */\n\tderegisterConfigurations(configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * update the configuration registry by\n\t * \t- registering the configurations to add\n\t * \t- dereigstering the configurations to remove\n\t */\n\tupdateConfigurations(configurations: {\n\t\tadd: IConfigurationNode[];\n\t\tremove: IConfigurationNode[];\n\t}): void;\n\n\t/**\n\t * Register multiple default configurations to the registry.\n\t */\n\tregisterDefaultConfigurations(\n\t\tdefaultConfigurations: IConfigurationDefaults[],\n\t): void;\n\n\t/**\n\t * Deregister multiple default configurations from the registry.\n\t */\n\tderegisterDefaultConfigurations(\n\t\tdefaultConfigurations: IConfigurationDefaults[],\n\t): void;\n\n\t/**\n\t * Bulk update of the configuration registry (default and configurations, remove and add)\n\t * @param delta\n\t */\n\tdeltaConfiguration(delta: IConfigurationDelta): void;\n\n\t/**\n\t * Return the registered default configurations\n\t */\n\tgetRegisteredDefaultConfigurations(): IConfigurationDefaults[];\n\n\t/**\n\t * Return the registered configuration defaults overrides\n\t */\n\tgetConfigurationDefaultsOverrides(): Map<\n\t\tstring,\n\t\tIConfigurationDefaultOverrideValue\n\t>;\n\n\t/**\n\t * Signal that the schema of a configuration setting has changes. It is currently only supported to change enumeration values.\n\t * Property or default value changes are not allowed.\n\t */\n\tnotifyConfigurationSchemaUpdated(\n\t\t...configurations: IConfigurationNode[]\n\t): void;\n\n\t/**\n\t * Event that fires whenever a configuration has been\n\t * registered.\n\t */\n\treadonly onDidSchemaChange: Event<void>;\n\n\t/**\n\t * Event that fires whenever a configuration has been\n\t * registered.\n\t */\n\treadonly onDidUpdateConfiguration: Event<{\n\t\tproperties: ReadonlySet<string>;\n\t\tdefaultsOverrides?: boolean;\n\t}>;\n\n\t/**\n\t * Returns all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurations(): IConfigurationNode[];\n\n\t/**\n\t * Returns all configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\n\t/**\n\t * Return all configurations by policy name\n\t */\n\tgetPolicyConfigurations(): Map<PolicyName, string>;\n\n\t/**\n\t * Returns all excluded configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetExcludedConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\n\t/**\n\t * Register the identifiers for editor configurations\n\t */\n\tregisterOverrideIdentifiers(identifiers: string[]): void;\n}\n\nexport enum ConfigurationScope {\n\t/**\n\t * Application specific configuration, which can be configured only in local user settings.\n\t */\n\tAPPLICATION = 1,\n\t/**\n\t * Machine specific configuration, which can be configured only in local and remote user settings.\n\t */\n\tMACHINE = 2,\n\t/**\n\t * Window specific configuration, which can be configured in the user or workspace settings.\n\t */\n\tWINDOW = 3,\n\t/**\n\t * Resource specific configuration, which can be configured in the user, workspace or folder settings.\n\t */\n\tRESOURCE = 4,\n\t/**\n\t * Resource specific configuration that can be configured in language specific settings\n\t */\n\tLANGUAGE_OVERRIDABLE = 5,\n\t/**\n\t * Machine specific configuration that can also be configured in workspace or folder settings.\n\t */\n\tMACHINE_OVERRIDABLE = 6,\n}\n\nexport interface IPolicy {\n\t/**\n\t * The policy name.\n\t */\n\treadonly name: PolicyName;\n\n\t/**\n\t * The Code version in which this policy was introduced.\n\t */\n\treadonly minimumVersion: `${number}.${number}`;\n}\n\nexport interface IConfigurationPropertySchema extends IJSONSchema {\n\tscope?: ConfigurationScope;\n\n\t/**\n\t * When restricted, value of this configuration will be read only from trusted sources.\n\t * For eg., If the workspace is not trusted, then the value of this configuration is not read from workspace settings file.\n\t */\n\trestricted?: boolean;\n\n\t/**\n\t * When `false` this property is excluded from the registry. Default is to include.\n\t */\n\tincluded?: boolean;\n\n\t/**\n\t * List of tags associated to the property.\n\t *  - A tag can be used for filtering\n\t *  - Use `experimental` tag for marking the setting as experimental. **Note:** Defaults of experimental settings can be changed by the running experiments.\n\t */\n\ttags?: string[];\n\n\t/**\n\t * When enabled this setting is ignored during sync and user can override this.\n\t */\n\tignoreSync?: boolean;\n\n\t/**\n\t * When enabled this setting is ignored during sync and user cannot override this.\n\t */\n\tdisallowSyncIgnore?: boolean;\n\n\t/**\n\t * Disallow extensions to contribute configuration default value for this setting.\n\t */\n\tdisallowConfigurationDefault?: boolean;\n\n\t/**\n\t * Labels for enumeration items\n\t */\n\tenumItemLabels?: string[];\n\n\t/**\n\t * When specified, controls the presentation format of string settings.\n\t * Otherwise, the presentation format defaults to `singleline`.\n\t */\n\teditPresentation?: EditPresentationTypes;\n\n\t/**\n\t * When specified, gives an order number for the setting\n\t * within the settings editor. Otherwise, the setting is placed at the end.\n\t */\n\torder?: number;\n\n\t/**\n\t * When specified, this setting's value can always be overwritten by\n\t * a system-wide policy.\n\t */\n\tpolicy?: IPolicy;\n}\n\nexport interface IExtensionInfo {\n\tid: string;\n\tdisplayName?: string;\n}\n\nexport interface IConfigurationNode {\n\tid?: string;\n\torder?: number;\n\ttype?: string | string[];\n\ttitle?: string;\n\tdescription?: string;\n\tproperties?: IStringDictionary<IConfigurationPropertySchema>;\n\tallOf?: IConfigurationNode[];\n\tscope?: ConfigurationScope;\n\textensionInfo?: IExtensionInfo;\n\trestrictedProperties?: string[];\n}\n\nexport type ConfigurationDefaultValueSource =\n\t| IExtensionInfo\n\t| Map<string, IExtensionInfo>;\n\nexport interface IConfigurationDefaults {\n\toverrides: IStringDictionary<any>;\n\tsource?: IExtensionInfo;\n}\n\nexport type IRegisteredConfigurationPropertySchema =\n\tIConfigurationPropertySchema & {\n\t\tdefaultDefaultValue?: any;\n\t\tsource?: IExtensionInfo; // Source of the Property\n\t\tdefaultValueSource?: ConfigurationDefaultValueSource; // Source of the Default Value\n\t};\n\nexport interface IConfigurationDefaultOverride {\n\treadonly value: any;\n\treadonly source?: IExtensionInfo; // Source of the default override\n}\n\nexport interface IConfigurationDefaultOverrideValue {\n\treadonly value: any;\n\treadonly source?: ConfigurationDefaultValueSource;\n}\n\nexport const allSettings: {\n\tproperties: IStringDictionary<IConfigurationPropertySchema>;\n\tpatternProperties: IStringDictionary<IConfigurationPropertySchema>;\n} = { properties: {}, patternProperties: {} };\nexport const applicationSettings: {\n\tproperties: IStringDictionary<IConfigurationPropertySchema>;\n\tpatternProperties: IStringDictionary<IConfigurationPropertySchema>;\n} = { properties: {}, patternProperties: {} };\nexport const machineSettings: {\n\tproperties: IStringDictionary<IConfigurationPropertySchema>;\n\tpatternProperties: IStringDictionary<IConfigurationPropertySchema>;\n} = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings: {\n\tproperties: IStringDictionary<IConfigurationPropertySchema>;\n\tpatternProperties: IStringDictionary<IConfigurationPropertySchema>;\n} = { properties: {}, patternProperties: {} };\nexport const windowSettings: {\n\tproperties: IStringDictionary<IConfigurationPropertySchema>;\n\tpatternProperties: IStringDictionary<IConfigurationPropertySchema>;\n} = { properties: {}, patternProperties: {} };\nexport const resourceSettings: {\n\tproperties: IStringDictionary<IConfigurationPropertySchema>;\n\tpatternProperties: IStringDictionary<IConfigurationPropertySchema>;\n} = { properties: {}, patternProperties: {} };\n\nexport const resourceLanguageSettingsSchemaId =\n\t\"vscode://schemas/settings/resourceLanguage\";\nexport const configurationDefaultsSchemaId =\n\t\"vscode://schemas/settings/configurationDefaults\";\n\nconst contributionRegistry = Registry.as<IJSONContributionRegistry>(\n\tJSONExtensions.JSONContribution,\n);\n\nclass ConfigurationRegistry implements IConfigurationRegistry {\n\tprivate readonly registeredConfigurationDefaults: IConfigurationDefaults[] =\n\t\t[];\n\tprivate readonly configurationDefaultsOverrides: Map<\n\t\tstring,\n\t\t{\n\t\t\tconfigurationDefaultOverrides: IConfigurationDefaultOverride[];\n\t\t\tconfigurationDefaultOverrideValue?: IConfigurationDefaultOverrideValue;\n\t\t}\n\t>;\n\tprivate readonly defaultLanguageConfigurationOverridesNode: IConfigurationNode;\n\tprivate readonly configurationContributors: IConfigurationNode[];\n\tprivate readonly configurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\tprivate readonly policyConfigurations: Map<PolicyName, string>;\n\tprivate readonly excludedConfigurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\tprivate readonly resourceLanguageSettingsSchema: IJSONSchema;\n\tprivate readonly overrideIdentifiers = new Set<string>();\n\n\tprivate readonly _onDidSchemaChange = new Emitter<void>();\n\treadonly onDidSchemaChange: Event<void> = this._onDidSchemaChange.event;\n\n\tprivate readonly _onDidUpdateConfiguration = new Emitter<{\n\t\tproperties: ReadonlySet<string>;\n\t\tdefaultsOverrides?: boolean;\n\t}>();\n\treadonly onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;\n\n\tconstructor() {\n\t\tthis.configurationDefaultsOverrides = new Map();\n\t\tthis.defaultLanguageConfigurationOverridesNode = {\n\t\t\tid: \"defaultOverrides\",\n\t\t\ttitle: nls.localize(\n\t\t\t\t\"defaultLanguageConfigurationOverrides.title\",\n\t\t\t\t\"Default Language Configuration Overrides\",\n\t\t\t),\n\t\t\tproperties: {},\n\t\t};\n\t\tthis.configurationContributors = [\n\t\t\tthis.defaultLanguageConfigurationOverridesNode,\n\t\t];\n\t\tthis.resourceLanguageSettingsSchema = {\n\t\t\tproperties: {},\n\t\t\tpatternProperties: {},\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true,\n\t\t};\n\t\tthis.configurationProperties = {};\n\t\tthis.policyConfigurations = new Map<PolicyName, string>();\n\t\tthis.excludedConfigurationProperties = {};\n\n\t\tcontributionRegistry.registerSchema(\n\t\t\tresourceLanguageSettingsSchemaId,\n\t\t\tthis.resourceLanguageSettingsSchema,\n\t\t);\n\t\tthis.registerOverridePropertyPatternKey();\n\t}\n\n\tpublic registerConfiguration(\n\t\tconfiguration: IConfigurationNode,\n\t\tvalidate = true,\n\t): void {\n\t\tthis.registerConfigurations([configuration], validate);\n\t}\n\n\tpublic registerConfigurations(\n\t\tconfigurations: IConfigurationNode[],\n\t\tvalidate = true,\n\t): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doRegisterConfigurations(configurations, validate, properties);\n\n\t\tcontributionRegistry.registerSchema(\n\t\t\tresourceLanguageSettingsSchemaId,\n\t\t\tthis.resourceLanguageSettingsSchema,\n\t\t);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic deregisterConfigurations(\n\t\tconfigurations: IConfigurationNode[],\n\t): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterConfigurations(configurations, properties);\n\n\t\tcontributionRegistry.registerSchema(\n\t\t\tresourceLanguageSettingsSchemaId,\n\t\t\tthis.resourceLanguageSettingsSchema,\n\t\t);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic updateConfigurations({\n\t\tadd,\n\t\tremove,\n\t}: { add: IConfigurationNode[]; remove: IConfigurationNode[] }): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterConfigurations(remove, properties);\n\t\tthis.doRegisterConfigurations(add, false, properties);\n\n\t\tcontributionRegistry.registerSchema(\n\t\t\tresourceLanguageSettingsSchemaId,\n\t\t\tthis.resourceLanguageSettingsSchema,\n\t\t);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic registerDefaultConfigurations(\n\t\tconfigurationDefaults: IConfigurationDefaults[],\n\t): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doRegisterDefaultConfigurations(configurationDefaults, properties);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({\n\t\t\tproperties,\n\t\t\tdefaultsOverrides: true,\n\t\t});\n\t}\n\n\tprivate doRegisterDefaultConfigurations(\n\t\tconfigurationDefaults: IConfigurationDefaults[],\n\t\tbucket: Set<string>,\n\t) {\n\t\tthis.registeredConfigurationDefaults.push(...configurationDefaults);\n\n\t\tconst overrideIdentifiers: string[] = [];\n\n\t\tfor (const { overrides, source } of configurationDefaults) {\n\t\t\tfor (const key in overrides) {\n\t\t\t\tbucket.add(key);\n\n\t\t\t\tconst configurationDefaultOverridesForKey =\n\t\t\t\t\tthis.configurationDefaultsOverrides.get(key) ??\n\t\t\t\t\tthis.configurationDefaultsOverrides\n\t\t\t\t\t\t.set(key, { configurationDefaultOverrides: [] })\n\t\t\t\t\t\t.get(key)!;\n\n\t\t\t\tconst value = overrides[key];\n\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrides.push(\n\t\t\t\t\t{ value, source },\n\t\t\t\t);\n\n\t\t\t\t// Configuration defaults for Override Identifiers\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tconst newDefaultOverride =\n\t\t\t\t\t\tthis.mergeDefaultConfigurationsForOverrideIdentifier(\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (!newDefaultOverride) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue =\n\t\t\t\t\t\tnewDefaultOverride;\n\t\t\t\t\tthis.updateDefaultOverrideProperty(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tnewDefaultOverride,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t);\n\t\t\t\t\toverrideIdentifiers.push(\n\t\t\t\t\t\t...overrideIdentifiersFromKey(key),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Configuration defaults for Configuration Properties\n\t\t\t\telse {\n\t\t\t\t\tconst newDefaultOverride =\n\t\t\t\t\t\tthis.mergeDefaultConfigurationsForConfigurationProperty(\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (!newDefaultOverride) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue =\n\t\t\t\t\t\tnewDefaultOverride;\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\t\t\t\t\t\tthis.updateSchema(key, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.doRegisterOverrideIdentifiers(overrideIdentifiers);\n\t}\n\n\tpublic deregisterDefaultConfigurations(\n\t\tdefaultConfigurations: IConfigurationDefaults[],\n\t): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterDefaultConfigurations(\n\t\t\tdefaultConfigurations,\n\t\t\tproperties,\n\t\t);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({\n\t\t\tproperties,\n\t\t\tdefaultsOverrides: true,\n\t\t});\n\t}\n\n\tprivate doDeregisterDefaultConfigurations(\n\t\tdefaultConfigurations: IConfigurationDefaults[],\n\t\tbucket: Set<string>,\n\t): void {\n\t\tfor (const defaultConfiguration of defaultConfigurations) {\n\t\t\tconst index =\n\t\t\t\tthis.registeredConfigurationDefaults.indexOf(\n\t\t\t\t\tdefaultConfiguration,\n\t\t\t\t);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.registeredConfigurationDefaults.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\tfor (const { overrides, source } of defaultConfigurations) {\n\t\t\tfor (const key in overrides) {\n\t\t\t\tconst configurationDefaultOverridesForKey =\n\t\t\t\t\tthis.configurationDefaultsOverrides.get(key);\n\t\t\t\tif (!configurationDefaultOverridesForKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst index =\n\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrides.findIndex(\n\t\t\t\t\t\t(configurationDefaultOverride) =>\n\t\t\t\t\t\t\tsource\n\t\t\t\t\t\t\t\t? configurationDefaultOverride.source?.id ===\n\t\t\t\t\t\t\t\t\tsource.id\n\t\t\t\t\t\t\t\t: configurationDefaultOverride.value ===\n\t\t\t\t\t\t\t\t\toverrides[key],\n\t\t\t\t\t);\n\t\t\t\tif (index === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrides.splice(\n\t\t\t\t\tindex,\n\t\t\t\t\t1,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tconfigurationDefaultOverridesForKey\n\t\t\t\t\t\t.configurationDefaultOverrides.length === 0\n\t\t\t\t) {\n\t\t\t\t\tthis.configurationDefaultsOverrides.delete(key);\n\t\t\t\t}\n\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tlet configurationDefaultOverrideValue:\n\t\t\t\t\t\t| IConfigurationDefaultOverrideValue\n\t\t\t\t\t\t| undefined;\n\t\t\t\t\tfor (const configurationDefaultOverride of configurationDefaultOverridesForKey.configurationDefaultOverrides) {\n\t\t\t\t\t\tconfigurationDefaultOverrideValue =\n\t\t\t\t\t\t\tthis.mergeDefaultConfigurationsForOverrideIdentifier(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tconfigurationDefaultOverride.value,\n\t\t\t\t\t\t\t\tconfigurationDefaultOverride.source,\n\t\t\t\t\t\t\t\tconfigurationDefaultOverrideValue,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tconfigurationDefaultOverrideValue &&\n\t\t\t\t\t\t!types.isEmptyObject(\n\t\t\t\t\t\t\tconfigurationDefaultOverrideValue.value,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue =\n\t\t\t\t\t\t\tconfigurationDefaultOverrideValue;\n\t\t\t\t\t\tthis.updateDefaultOverrideProperty(\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tconfigurationDefaultOverrideValue,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.configurationDefaultsOverrides.delete(key);\n\t\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\t\tdelete this.defaultLanguageConfigurationOverridesNode\n\t\t\t\t\t\t\t.properties![key];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet configurationDefaultOverrideValue:\n\t\t\t\t\t\t| IConfigurationDefaultOverrideValue\n\t\t\t\t\t\t| undefined;\n\t\t\t\t\tfor (const configurationDefaultOverride of configurationDefaultOverridesForKey.configurationDefaultOverrides) {\n\t\t\t\t\t\tconfigurationDefaultOverrideValue =\n\t\t\t\t\t\t\tthis.mergeDefaultConfigurationsForConfigurationProperty(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tconfigurationDefaultOverride.value,\n\t\t\t\t\t\t\t\tconfigurationDefaultOverride.source,\n\t\t\t\t\t\t\t\tconfigurationDefaultOverrideValue,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconfigurationDefaultOverridesForKey.configurationDefaultOverrideValue =\n\t\t\t\t\t\tconfigurationDefaultOverrideValue;\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\t\t\t\t\t\tthis.updateSchema(key, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbucket.add(key);\n\t\t\t}\n\t\t}\n\t\tthis.updateOverridePropertyPatternKey();\n\t}\n\n\tprivate updateDefaultOverrideProperty(\n\t\tkey: string,\n\t\tnewDefaultOverride: IConfigurationDefaultOverrideValue,\n\t\tsource: IExtensionInfo | undefined,\n\t): void {\n\t\tconst property: IRegisteredConfigurationPropertySchema = {\n\t\t\ttype: \"object\",\n\t\t\tdefault: newDefaultOverride.value,\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"defaultLanguageConfiguration.description\",\n\t\t\t\t\"Configure settings to be overridden for the {0} language.\",\n\t\t\t\tgetLanguageTagSettingPlainKey(key),\n\t\t\t),\n\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\tdefaultDefaultValue: newDefaultOverride.value,\n\t\t\tsource,\n\t\t\tdefaultValueSource: source,\n\t\t};\n\t\tthis.configurationProperties[key] = property;\n\t\tthis.defaultLanguageConfigurationOverridesNode.properties![key] =\n\t\t\tproperty;\n\t}\n\n\tprivate mergeDefaultConfigurationsForOverrideIdentifier(\n\t\toverrideIdentifier: string,\n\t\tconfigurationValueObject: IStringDictionary<any>,\n\t\tvalueSource: IExtensionInfo | undefined,\n\t\texistingDefaultOverride: IConfigurationDefaultOverrideValue | undefined,\n\t): IConfigurationDefaultOverrideValue | undefined {\n\t\tconst defaultValue = existingDefaultOverride?.value || {};\n\t\tconst source =\n\t\t\texistingDefaultOverride?.source ??\n\t\t\tnew Map<string, IExtensionInfo>();\n\n\t\t// This should not happen\n\t\tif (!(source instanceof Map)) {\n\t\t\tconsole.error(\"objectConfigurationSources is not a Map\");\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (const propertyKey of Object.keys(configurationValueObject)) {\n\t\t\tconst propertyDefaultValue = configurationValueObject[propertyKey];\n\n\t\t\tconst isObjectSetting =\n\t\t\t\ttypes.isObject(propertyDefaultValue) &&\n\t\t\t\t(types.isUndefined(defaultValue[propertyKey]) ||\n\t\t\t\t\ttypes.isObject(defaultValue[propertyKey]));\n\n\t\t\t// If the default value is an object, merge the objects and store the source of each keys\n\t\t\tif (isObjectSetting) {\n\t\t\t\tdefaultValue[propertyKey] = {\n\t\t\t\t\t...(defaultValue[propertyKey] ?? {}),\n\t\t\t\t\t...propertyDefaultValue,\n\t\t\t\t};\n\t\t\t\t// Track the source of each value in the object\n\t\t\t\tif (valueSource) {\n\t\t\t\t\tfor (const objectKey in propertyDefaultValue) {\n\t\t\t\t\t\tsource.set(`${propertyKey}.${objectKey}`, valueSource);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Primitive values are overridden\n\t\t\telse {\n\t\t\t\tdefaultValue[propertyKey] = propertyDefaultValue;\n\t\t\t\tif (valueSource) {\n\t\t\t\t\tsource.set(propertyKey, valueSource);\n\t\t\t\t} else {\n\t\t\t\t\tsource.delete(propertyKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { value: defaultValue, source };\n\t}\n\n\tprivate mergeDefaultConfigurationsForConfigurationProperty(\n\t\tpropertyKey: string,\n\t\tvalue: any,\n\t\tvaluesSource: IExtensionInfo | undefined,\n\t\texistingDefaultOverride: IConfigurationDefaultOverrideValue | undefined,\n\t): IConfigurationDefaultOverrideValue | undefined {\n\t\tconst property = this.configurationProperties[propertyKey];\n\t\tconst existingDefaultValue =\n\t\t\texistingDefaultOverride?.value ?? property?.defaultDefaultValue;\n\t\tlet source: ConfigurationDefaultValueSource | undefined = valuesSource;\n\n\t\tconst isObjectSetting =\n\t\t\ttypes.isObject(value) &&\n\t\t\t((property !== undefined && property.type === \"object\") ||\n\t\t\t\t(property === undefined &&\n\t\t\t\t\t(types.isUndefined(existingDefaultValue) ||\n\t\t\t\t\t\ttypes.isObject(existingDefaultValue))));\n\n\t\t// If the default value is an object, merge the objects and store the source of each keys\n\t\tif (isObjectSetting) {\n\t\t\tsource =\n\t\t\t\texistingDefaultOverride?.source ??\n\t\t\t\tnew Map<string, IExtensionInfo>();\n\n\t\t\t// This should not happen\n\t\t\tif (!(source instanceof Map)) {\n\t\t\t\tconsole.error(\"defaultValueSource is not a Map\");\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tfor (const objectKey in value) {\n\t\t\t\tif (valuesSource) {\n\t\t\t\t\tsource.set(`${propertyKey}.${objectKey}`, valuesSource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = {\n\t\t\t\t...(types.isObject(existingDefaultValue)\n\t\t\t\t\t? existingDefaultValue\n\t\t\t\t\t: {}),\n\t\t\t\t...value,\n\t\t\t};\n\t\t}\n\n\t\treturn { value, source };\n\t}\n\n\tpublic deltaConfiguration(delta: IConfigurationDelta): void {\n\t\t// defaults: remove\n\t\tlet defaultsOverrides = false;\n\t\tconst properties = new Set<string>();\n\t\tif (delta.removedDefaults) {\n\t\t\tthis.doDeregisterDefaultConfigurations(\n\t\t\t\tdelta.removedDefaults,\n\t\t\t\tproperties,\n\t\t\t);\n\t\t\tdefaultsOverrides = true;\n\t\t}\n\t\t// defaults: add\n\t\tif (delta.addedDefaults) {\n\t\t\tthis.doRegisterDefaultConfigurations(\n\t\t\t\tdelta.addedDefaults,\n\t\t\t\tproperties,\n\t\t\t);\n\t\t\tdefaultsOverrides = true;\n\t\t}\n\t\t// configurations: remove\n\t\tif (delta.removedConfigurations) {\n\t\t\tthis.doDeregisterConfigurations(\n\t\t\t\tdelta.removedConfigurations,\n\t\t\t\tproperties,\n\t\t\t);\n\t\t}\n\t\t// configurations: add\n\t\tif (delta.addedConfigurations) {\n\t\t\tthis.doRegisterConfigurations(\n\t\t\t\tdelta.addedConfigurations,\n\t\t\t\tfalse,\n\t\t\t\tproperties,\n\t\t\t);\n\t\t}\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties, defaultsOverrides });\n\t}\n\n\tpublic notifyConfigurationSchemaUpdated(\n\t\t...configurations: IConfigurationNode[]\n\t) {\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tpublic registerOverrideIdentifiers(overrideIdentifiers: string[]): void {\n\t\tthis.doRegisterOverrideIdentifiers(overrideIdentifiers);\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tprivate doRegisterOverrideIdentifiers(overrideIdentifiers: string[]) {\n\t\tfor (const overrideIdentifier of overrideIdentifiers) {\n\t\t\tthis.overrideIdentifiers.add(overrideIdentifier);\n\t\t}\n\t\tthis.updateOverridePropertyPatternKey();\n\t}\n\n\tprivate doRegisterConfigurations(\n\t\tconfigurations: IConfigurationNode[],\n\t\tvalidate: boolean,\n\t\tbucket: Set<string>,\n\t): void {\n\t\tconfigurations.forEach((configuration) => {\n\t\t\tthis.validateAndRegisterProperties(\n\t\t\t\tconfiguration,\n\t\t\t\tvalidate,\n\t\t\t\tconfiguration.extensionInfo,\n\t\t\t\tconfiguration.restrictedProperties,\n\t\t\t\tundefined,\n\t\t\t\tbucket,\n\t\t\t);\n\n\t\t\tthis.configurationContributors.push(configuration);\n\t\t\tthis.registerJSONConfiguration(configuration);\n\t\t});\n\t}\n\n\tprivate doDeregisterConfigurations(\n\t\tconfigurations: IConfigurationNode[],\n\t\tbucket: Set<string>,\n\t): void {\n\t\tconst deregisterConfiguration = (configuration: IConfigurationNode) => {\n\t\t\tif (configuration.properties) {\n\t\t\t\tfor (const key in configuration.properties) {\n\t\t\t\t\tbucket.add(key);\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property?.policy?.name) {\n\t\t\t\t\t\tthis.policyConfigurations.delete(property.policy.name);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\tthis.removeFromSchema(key, configuration.properties[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconfiguration.allOf?.forEach((node) =>\n\t\t\t\tderegisterConfiguration(node),\n\t\t\t);\n\t\t};\n\t\tfor (const configuration of configurations) {\n\t\t\tderegisterConfiguration(configuration);\n\t\t\tconst index = this.configurationContributors.indexOf(configuration);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.configurationContributors.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate validateAndRegisterProperties(\n\t\tconfiguration: IConfigurationNode,\n\t\tvalidate = true,\n\t\textensionInfo: IExtensionInfo | undefined,\n\t\trestrictedProperties: string[] | undefined,\n\t\tscope: ConfigurationScope = ConfigurationScope.WINDOW,\n\t\tbucket: Set<string>,\n\t): void {\n\t\tscope = types.isUndefinedOrNull(configuration.scope)\n\t\t\t? scope\n\t\t\t: configuration.scope;\n\t\tconst properties = configuration.properties;\n\t\tif (properties) {\n\t\t\tfor (const key in properties) {\n\t\t\t\tconst property: IRegisteredConfigurationPropertySchema =\n\t\t\t\t\tproperties[key];\n\t\t\t\tif (validate && validateProperty(key, property)) {\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tproperty.source = extensionInfo;\n\n\t\t\t\t// update default value\n\t\t\t\tproperty.defaultDefaultValue = properties[key].default;\n\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\n\t\t\t\t// update scope\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tproperty.scope = undefined; // No scope for overridable properties `[${identifier}]`\n\t\t\t\t} else {\n\t\t\t\t\tproperty.scope = types.isUndefinedOrNull(property.scope)\n\t\t\t\t\t\t? scope\n\t\t\t\t\t\t: property.scope;\n\t\t\t\t\tproperty.restricted = types.isUndefinedOrNull(\n\t\t\t\t\t\tproperty.restricted,\n\t\t\t\t\t)\n\t\t\t\t\t\t? !!restrictedProperties?.includes(key)\n\t\t\t\t\t\t: property.restricted;\n\t\t\t\t}\n\n\t\t\t\t// Add to properties maps\n\t\t\t\t// Property is included by default if 'included' is unspecified\n\t\t\t\tif (\n\t\t\t\t\tproperties[key].hasOwnProperty(\"included\") &&\n\t\t\t\t\t!properties[key].included\n\t\t\t\t) {\n\t\t\t\t\tthis.excludedConfigurationProperties[key] = properties[key];\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthis.configurationProperties[key] = properties[key];\n\t\t\t\t\tif (properties[key].policy?.name) {\n\t\t\t\t\t\tthis.policyConfigurations.set(\n\t\t\t\t\t\t\tproperties[key].policy!.name,\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!properties[key].deprecationMessage &&\n\t\t\t\t\tproperties[key].markdownDeprecationMessage\n\t\t\t\t) {\n\t\t\t\t\t// If not set, default deprecationMessage to the markdown source\n\t\t\t\t\tproperties[key].deprecationMessage =\n\t\t\t\t\t\tproperties[key].markdownDeprecationMessage;\n\t\t\t\t}\n\n\t\t\t\tbucket.add(key);\n\t\t\t}\n\t\t}\n\t\tconst subNodes = configuration.allOf;\n\t\tif (subNodes) {\n\t\t\tfor (const node of subNodes) {\n\t\t\t\tthis.validateAndRegisterProperties(\n\t\t\t\t\tnode,\n\t\t\t\t\tvalidate,\n\t\t\t\t\textensionInfo,\n\t\t\t\t\trestrictedProperties,\n\t\t\t\t\tscope,\n\t\t\t\t\tbucket,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// TODO: @sandy081 - Remove this method and include required info in getConfigurationProperties\n\tgetConfigurations(): IConfigurationNode[] {\n\t\treturn this.configurationContributors;\n\t}\n\n\tgetConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema> {\n\t\treturn this.configurationProperties;\n\t}\n\n\tgetPolicyConfigurations(): Map<PolicyName, string> {\n\t\treturn this.policyConfigurations;\n\t}\n\n\tgetExcludedConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema> {\n\t\treturn this.excludedConfigurationProperties;\n\t}\n\n\tgetRegisteredDefaultConfigurations(): IConfigurationDefaults[] {\n\t\treturn [...this.registeredConfigurationDefaults];\n\t}\n\n\tgetConfigurationDefaultsOverrides(): Map<\n\t\tstring,\n\t\tIConfigurationDefaultOverrideValue\n\t> {\n\t\tconst configurationDefaultsOverrides = new Map<\n\t\t\tstring,\n\t\t\tIConfigurationDefaultOverrideValue\n\t\t>();\n\t\tfor (const [key, value] of this.configurationDefaultsOverrides) {\n\t\t\tif (value.configurationDefaultOverrideValue) {\n\t\t\t\tconfigurationDefaultsOverrides.set(\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue.configurationDefaultOverrideValue,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn configurationDefaultsOverrides;\n\t}\n\n\tprivate registerJSONConfiguration(configuration: IConfigurationNode) {\n\t\tconst register = (configuration: IConfigurationNode) => {\n\t\t\tconst properties = configuration.properties;\n\t\t\tif (properties) {\n\t\t\t\tfor (const key in properties) {\n\t\t\t\t\tthis.updateSchema(key, properties[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst subNodes = configuration.allOf;\n\t\t\tsubNodes?.forEach(register);\n\t\t};\n\t\tregister(configuration);\n\t}\n\n\tprivate updateSchema(\n\t\tkey: string,\n\t\tproperty: IConfigurationPropertySchema,\n\t): void {\n\t\tallSettings.properties[key] = property;\n\t\tswitch (property.scope) {\n\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\tapplicationSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE:\n\t\t\t\tmachineSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE_OVERRIDABLE:\n\t\t\t\tmachineOverridableSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\twindowSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\t\tresourceSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.LANGUAGE_OVERRIDABLE:\n\t\t\t\tresourceSettings.properties[key] = property;\n\t\t\t\tthis.resourceLanguageSettingsSchema.properties![key] = property;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate removeFromSchema(\n\t\tkey: string,\n\t\tproperty: IConfigurationPropertySchema,\n\t): void {\n\t\tdelete allSettings.properties[key];\n\t\tswitch (property.scope) {\n\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\tdelete applicationSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE:\n\t\t\t\tdelete machineSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE_OVERRIDABLE:\n\t\t\t\tdelete machineOverridableSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\tdelete windowSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\tcase ConfigurationScope.LANGUAGE_OVERRIDABLE:\n\t\t\t\tdelete resourceSettings.properties[key];\n\t\t\t\tdelete this.resourceLanguageSettingsSchema.properties![key];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate updateOverridePropertyPatternKey(): void {\n\t\tfor (const overrideIdentifier of this.overrideIdentifiers.values()) {\n\t\t\tconst overrideIdentifierProperty = `[${overrideIdentifier}]`;\n\t\t\tconst resourceLanguagePropertiesSchema: IJSONSchema = {\n\t\t\t\ttype: \"object\",\n\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\"overrideSettings.defaultDescription\",\n\t\t\t\t\t\"Configure editor settings to be overridden for a language.\",\n\t\t\t\t),\n\t\t\t\terrorMessage: nls.localize(\n\t\t\t\t\t\"overrideSettings.errorMessage\",\n\t\t\t\t\t\"This setting does not support per-language configuration.\",\n\t\t\t\t),\n\t\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\t};\n\t\t\tthis.updatePropertyDefaultValue(\n\t\t\t\toverrideIdentifierProperty,\n\t\t\t\tresourceLanguagePropertiesSchema,\n\t\t\t);\n\t\t\tallSettings.properties[overrideIdentifierProperty] =\n\t\t\t\tresourceLanguagePropertiesSchema;\n\t\t\tapplicationSettings.properties[overrideIdentifierProperty] =\n\t\t\t\tresourceLanguagePropertiesSchema;\n\t\t\tmachineSettings.properties[overrideIdentifierProperty] =\n\t\t\t\tresourceLanguagePropertiesSchema;\n\t\t\tmachineOverridableSettings.properties[overrideIdentifierProperty] =\n\t\t\t\tresourceLanguagePropertiesSchema;\n\t\t\twindowSettings.properties[overrideIdentifierProperty] =\n\t\t\t\tresourceLanguagePropertiesSchema;\n\t\t\tresourceSettings.properties[overrideIdentifierProperty] =\n\t\t\t\tresourceLanguagePropertiesSchema;\n\t\t}\n\t}\n\n\tprivate registerOverridePropertyPatternKey(): void {\n\t\tconst resourceLanguagePropertiesSchema: IJSONSchema = {\n\t\t\ttype: \"object\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"overrideSettings.defaultDescription\",\n\t\t\t\t\"Configure editor settings to be overridden for a language.\",\n\t\t\t),\n\t\t\terrorMessage: nls.localize(\n\t\t\t\t\"overrideSettings.errorMessage\",\n\t\t\t\t\"This setting does not support per-language configuration.\",\n\t\t\t),\n\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t};\n\t\tallSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] =\n\t\t\tresourceLanguagePropertiesSchema;\n\t\tapplicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] =\n\t\t\tresourceLanguagePropertiesSchema;\n\t\tmachineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] =\n\t\t\tresourceLanguagePropertiesSchema;\n\t\tmachineOverridableSettings.patternProperties[\n\t\t\tOVERRIDE_PROPERTY_PATTERN\n\t\t] = resourceLanguagePropertiesSchema;\n\t\twindowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] =\n\t\t\tresourceLanguagePropertiesSchema;\n\t\tresourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] =\n\t\t\tresourceLanguagePropertiesSchema;\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tprivate updatePropertyDefaultValue(\n\t\tkey: string,\n\t\tproperty: IRegisteredConfigurationPropertySchema,\n\t): void {\n\t\tconst configurationdefaultOverride =\n\t\t\tthis.configurationDefaultsOverrides.get(\n\t\t\t\tkey,\n\t\t\t)?.configurationDefaultOverrideValue;\n\t\tlet defaultValue;\n\t\tlet defaultSource;\n\t\tif (\n\t\t\tconfigurationdefaultOverride &&\n\t\t\t(!property.disallowConfigurationDefault ||\n\t\t\t\t!configurationdefaultOverride.source) // Prevent overriding the default value if the property is disallowed to be overridden by configuration defaults from extensions\n\t\t) {\n\t\t\tdefaultValue = configurationdefaultOverride.value;\n\t\t\tdefaultSource = configurationdefaultOverride.source;\n\t\t}\n\t\tif (types.isUndefined(defaultValue)) {\n\t\t\tdefaultValue = property.defaultDefaultValue;\n\t\t\tdefaultSource = undefined;\n\t\t}\n\t\tif (types.isUndefined(defaultValue)) {\n\t\t\tdefaultValue = getDefaultValue(property.type);\n\t\t}\n\t\tproperty.default = defaultValue;\n\t\tproperty.defaultValueSource = defaultSource;\n\t}\n}\n\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, \"g\");\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\n\nexport function overrideIdentifiersFromKey(key: string): string[] {\n\tconst identifiers: string[] = [];\n\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\tlet matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n\t\twhile (matches?.length) {\n\t\t\tconst identifier = matches[1].trim();\n\t\t\tif (identifier) {\n\t\t\t\tidentifiers.push(identifier);\n\t\t\t}\n\t\t\tmatches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n\t\t}\n\t}\n\treturn distinct(identifiers);\n}\n\nexport function keyFromOverrideIdentifiers(\n\toverrideIdentifiers: string[],\n): string {\n\treturn overrideIdentifiers.reduce(\n\t\t(result, overrideIdentifier) => `${result}[${overrideIdentifier}]`,\n\t\t\"\",\n\t);\n}\n\nexport function getDefaultValue(type: string | string[] | undefined): any {\n\tconst t = Array.isArray(type) ? (<string[]>type)[0] : <string>type;\n\tswitch (t) {\n\t\tcase \"boolean\":\n\t\t\treturn false;\n\t\tcase \"integer\":\n\t\tcase \"number\":\n\t\t\treturn 0;\n\t\tcase \"string\":\n\t\t\treturn \"\";\n\t\tcase \"array\":\n\t\t\treturn [];\n\t\tcase \"object\":\n\t\t\treturn {};\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\n\nexport function validateProperty(\n\tproperty: string,\n\tschema: IRegisteredConfigurationPropertySchema,\n): string | null {\n\tif (!property.trim()) {\n\t\treturn nls.localize(\n\t\t\t\"config.property.empty\",\n\t\t\t\"Cannot register an empty property\",\n\t\t);\n\t}\n\tif (OVERRIDE_PROPERTY_REGEX.test(property)) {\n\t\treturn nls.localize(\n\t\t\t\"config.property.languageDefault\",\n\t\t\t\"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\",\n\t\t\tproperty,\n\t\t);\n\t}\n\tif (\n\t\tconfigurationRegistry.getConfigurationProperties()[property] !==\n\t\tundefined\n\t) {\n\t\treturn nls.localize(\n\t\t\t\"config.property.duplicate\",\n\t\t\t\"Cannot register '{0}'. This property is already registered.\",\n\t\t\tproperty,\n\t\t);\n\t}\n\tif (\n\t\tschema.policy?.name &&\n\t\tconfigurationRegistry\n\t\t\t.getPolicyConfigurations()\n\t\t\t.get(schema.policy?.name) !== undefined\n\t) {\n\t\treturn nls.localize(\n\t\t\t\"config.policy.duplicate\",\n\t\t\t\"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\",\n\t\t\tproperty,\n\t\t\tschema.policy?.name,\n\t\t\tconfigurationRegistry\n\t\t\t\t.getPolicyConfigurations()\n\t\t\t\t.get(schema.policy?.name),\n\t\t);\n\t}\n\treturn null;\n}\n\nexport function getScopes(): [string, ConfigurationScope | undefined][] {\n\tconst scopes: [string, ConfigurationScope | undefined][] = [];\n\tconst configurationProperties =\n\t\tconfigurationRegistry.getConfigurationProperties();\n\tfor (const key of Object.keys(configurationProperties)) {\n\t\tscopes.push([key, configurationProperties[key].scope]);\n\t}\n\tscopes.push([\"launch\", ConfigurationScope.RESOURCE]);\n\tscopes.push([\"task\", ConfigurationScope.RESOURCE]);\n\treturn scopes;\n}\n\nexport function getAllConfigurationProperties(\n\tconfigurationNode: IConfigurationNode[],\n): IStringDictionary<IRegisteredConfigurationPropertySchema> {\n\tconst result: IStringDictionary<IRegisteredConfigurationPropertySchema> =\n\t\t{};\n\tfor (const configuration of configurationNode) {\n\t\tconst properties = configuration.properties;\n\t\tif (types.isObject(properties)) {\n\t\t\tfor (const key in properties) {\n\t\t\t\tresult[key] = properties[key];\n\t\t\t}\n\t\t}\n\t\tif (configuration.allOf) {\n\t\t\tObject.assign(\n\t\t\t\tresult,\n\t\t\t\tgetAllConfigurationProperties(configuration.allOf),\n\t\t\t);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function parseScope(scope: string): ConfigurationScope {\n\tswitch (scope) {\n\t\tcase \"application\":\n\t\t\treturn ConfigurationScope.APPLICATION;\n\t\tcase \"machine\":\n\t\t\treturn ConfigurationScope.MACHINE;\n\t\tcase \"resource\":\n\t\t\treturn ConfigurationScope.RESOURCE;\n\t\tcase \"machine-overridable\":\n\t\t\treturn ConfigurationScope.MACHINE_OVERRIDABLE;\n\t\tcase \"language-overridable\":\n\t\t\treturn ConfigurationScope.LANGUAGE_OVERRIDABLE;\n\t\tdefault:\n\t\t\treturn ConfigurationScope.WINDOW;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["EditPresentationTypes", "ConfigurationScope", "configuration"]
}
