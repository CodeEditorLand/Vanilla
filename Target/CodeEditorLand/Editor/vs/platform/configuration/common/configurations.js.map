{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/common/configurations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from '../../../base/common/arrays.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { isEmptyObject } from '../../../base/common/types.js';\nimport { ConfigurationModel } from './configurationModels.js';\nimport { Extensions, IConfigurationRegistry, IRegisteredConfigurationPropertySchema } from './configurationRegistry.js';\nimport { ILogService, NullLogService } from '../../log/common/log.js';\nimport { IPolicyService, PolicyDefinition, PolicyName, PolicyValue } from '../../policy/common/policy.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nexport class DefaultConfiguration extends Disposable {\n\n\tprivate readonly _onDidChangeConfiguration = this._register(new Emitter<{ defaults: ConfigurationModel; properties: string[] }>());\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = ConfigurationModel.createEmptyModel(this.logService);\n\tget configurationModel(): ConfigurationModel {\n\t\treturn this._configurationModel;\n\t}\n\n\tconstructor(private readonly logService: ILogService) {\n\t\tsuper();\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.resetConfigurationModel();\n\t\tthis._register(Registry.as<IConfigurationRegistry>(Extensions.Configuration).onDidUpdateConfiguration(({ properties, defaultsOverrides }) => this.onDidUpdateConfiguration(Array.from(properties), defaultsOverrides)));\n\t\treturn this.configurationModel;\n\t}\n\n\treload(): ConfigurationModel {\n\t\tthis.resetConfigurationModel();\n\t\treturn this.configurationModel;\n\t}\n\n\tprotected onDidUpdateConfiguration(properties: string[], defaultsOverrides?: boolean): void {\n\t\tthis.updateConfigurationModel(properties, Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties());\n\t\tthis._onDidChangeConfiguration.fire({ defaults: this.configurationModel, properties });\n\t}\n\n\tprotected getConfigurationDefaultOverrides(): IStringDictionary<any> {\n\t\treturn {};\n\t}\n\n\tprivate resetConfigurationModel(): void {\n\t\tthis._configurationModel = ConfigurationModel.createEmptyModel(this.logService);\n\t\tconst properties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tthis.updateConfigurationModel(Object.keys(properties), properties);\n\t}\n\n\tprivate updateConfigurationModel(properties: string[], configurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>): void {\n\t\tconst configurationDefaultsOverrides = this.getConfigurationDefaultOverrides();\n\t\tfor (const key of properties) {\n\t\t\tconst defaultOverrideValue = configurationDefaultsOverrides[key];\n\t\t\tconst propertySchema = configurationProperties[key];\n\t\t\tif (defaultOverrideValue !== undefined) {\n\t\t\t\tthis._configurationModel.setValue(key, defaultOverrideValue);\n\t\t\t} else if (propertySchema) {\n\t\t\t\tthis._configurationModel.setValue(key, propertySchema.default);\n\t\t\t} else {\n\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport interface IPolicyConfiguration {\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel>;\n\treadonly configurationModel: ConfigurationModel;\n\tinitialize(): Promise<ConfigurationModel>;\n}\n\nexport class NullPolicyConfiguration implements IPolicyConfiguration {\n\treadonly onDidChangeConfiguration = Event.None;\n\treadonly configurationModel = ConfigurationModel.createEmptyModel(new NullLogService());\n\tasync initialize() { return this.configurationModel; }\n}\n\nexport class PolicyConfiguration extends Disposable implements IPolicyConfiguration {\n\n\tprivate readonly _onDidChangeConfiguration = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = ConfigurationModel.createEmptyModel(this.logService);\n\tget configurationModel() { return this._configurationModel; }\n\n\tconstructor(\n\t\tprivate readonly defaultConfiguration: DefaultConfiguration,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.logService.trace('PolicyConfiguration#initialize');\n\t\tthis.update(await this.updatePolicyDefinitions(this.defaultConfiguration.configurationModel.keys), false);\n\t\tthis._register(this.policyService.onDidChange(policyNames => this.onDidChangePolicies(policyNames)));\n\t\tthis._register(this.defaultConfiguration.onDidChangeConfiguration(async ({ properties }) => this.update(await this.updatePolicyDefinitions(properties), true)));\n\t\treturn this._configurationModel;\n\t}\n\n\tprivate async updatePolicyDefinitions(properties: string[]): Promise<string[]> {\n\t\tthis.logService.trace('PolicyConfiguration#updatePolicyDefinitions', properties);\n\t\tconst policyDefinitions: IStringDictionary<PolicyDefinition> = {};\n\t\tconst keys: string[] = [];\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\n\t\tfor (const key of properties) {\n\t\t\tconst config = configurationProperties[key];\n\t\t\tif (!config) {\n\t\t\t\t// Config is removed. So add it to the list if in case it was registered as policy before\n\t\t\t\tkeys.push(key);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (config.policy) {\n\t\t\t\tif (config.type !== 'string' && config.type !== 'number') {\n\t\t\t\t\tthis.logService.warn(`Policy ${config.policy.name} has unsupported type ${config.type}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tkeys.push(key);\n\t\t\t\tpolicyDefinitions[config.policy.name] = { type: config.type };\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmptyObject(policyDefinitions)) {\n\t\t\tawait this.policyService.updatePolicyDefinitions(policyDefinitions);\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\tprivate onDidChangePolicies(policyNames: readonly PolicyName[]): void {\n\t\tthis.logService.trace('PolicyConfiguration#onDidChangePolicies', policyNames);\n\t\tconst policyConfigurations = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getPolicyConfigurations();\n\t\tconst keys = coalesce(policyNames.map(policyName => policyConfigurations.get(policyName)));\n\t\tthis.update(keys, true);\n\t}\n\n\tprivate update(keys: string[], trigger: boolean): void {\n\t\tthis.logService.trace('PolicyConfiguration#update', keys);\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tconst changed: [string, PolicyValue | undefined][] = [];\n\t\tconst wasEmpty = this._configurationModel.isEmpty();\n\n\t\tfor (const key of keys) {\n\t\t\tconst policyName = configurationProperties[key]?.policy?.name;\n\t\t\tif (policyName) {\n\t\t\t\tconst policyValue = this.policyService.getPolicyValue(policyName);\n\t\t\t\tif (wasEmpty ? policyValue !== undefined : !equals(this._configurationModel.getValue(key), policyValue)) {\n\t\t\t\t\tchanged.push([key, policyValue]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._configurationModel.getValue(key) !== undefined) {\n\t\t\t\t\tchanged.push([key, undefined]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (changed.length) {\n\t\t\tthis.logService.trace('PolicyConfiguration#changed', changed);\n\t\t\tconst old = this._configurationModel;\n\t\t\tthis._configurationModel = ConfigurationModel.createEmptyModel(this.logService);\n\t\t\tfor (const key of old.keys) {\n\t\t\t\tthis._configurationModel.setValue(key, old.getValue(key));\n\t\t\t}\n\t\t\tfor (const [key, policyValue] of changed) {\n\t\t\t\tif (policyValue === undefined) {\n\t\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t\t} else {\n\t\t\t\t\tthis._configurationModel.setValue(key, policyValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (trigger) {\n\t\t\t\tthis._onDidChangeConfiguration.fire(this._configurationModel);\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n"],
  "mappings": "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",
  "names": []
}
