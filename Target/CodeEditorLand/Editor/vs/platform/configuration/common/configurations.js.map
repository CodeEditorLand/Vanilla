{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/configuration/common/configurations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from \"../../../base/common/arrays.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { equals } from \"../../../base/common/objects.js\";\nimport { isEmptyObject } from \"../../../base/common/types.js\";\nimport { ILogService, NullLogService } from \"../../log/common/log.js\";\nimport {\n\tIPolicyService,\n\ttype PolicyDefinition,\n\ttype PolicyName,\n\ttype PolicyValue,\n} from \"../../policy/common/policy.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\nimport { ConfigurationModel } from \"./configurationModels.js\";\nimport {\n\tExtensions,\n\ttype IConfigurationRegistry,\n\ttype IRegisteredConfigurationPropertySchema,\n} from \"./configurationRegistry.js\";\n\nexport class DefaultConfiguration extends Disposable {\n\tprivate readonly _onDidChangeConfiguration = this._register(\n\t\tnew Emitter<{ defaults: ConfigurationModel; properties: string[] }>(),\n\t);\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = ConfigurationModel.createEmptyModel(\n\t\tthis.logService,\n\t);\n\tget configurationModel(): ConfigurationModel {\n\t\treturn this._configurationModel;\n\t}\n\n\tconstructor(private readonly logService: ILogService) {\n\t\tsuper();\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.resetConfigurationModel();\n\t\tthis._register(\n\t\t\tRegistry.as<IConfigurationRegistry>(\n\t\t\t\tExtensions.Configuration,\n\t\t\t).onDidUpdateConfiguration(({ properties, defaultsOverrides }) =>\n\t\t\t\tthis.onDidUpdateConfiguration(\n\t\t\t\t\tArray.from(properties),\n\t\t\t\t\tdefaultsOverrides,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\treturn this.configurationModel;\n\t}\n\n\treload(): ConfigurationModel {\n\t\tthis.resetConfigurationModel();\n\t\treturn this.configurationModel;\n\t}\n\n\tprotected onDidUpdateConfiguration(\n\t\tproperties: string[],\n\t\tdefaultsOverrides?: boolean,\n\t): void {\n\t\tthis.updateConfigurationModel(\n\t\t\tproperties,\n\t\t\tRegistry.as<IConfigurationRegistry>(\n\t\t\t\tExtensions.Configuration,\n\t\t\t).getConfigurationProperties(),\n\t\t);\n\t\tthis._onDidChangeConfiguration.fire({\n\t\t\tdefaults: this.configurationModel,\n\t\t\tproperties,\n\t\t});\n\t}\n\n\tprotected getConfigurationDefaultOverrides(): IStringDictionary<any> {\n\t\treturn {};\n\t}\n\n\tprivate resetConfigurationModel(): void {\n\t\tthis._configurationModel = ConfigurationModel.createEmptyModel(\n\t\t\tthis.logService,\n\t\t);\n\t\tconst properties = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t).getConfigurationProperties();\n\t\tthis.updateConfigurationModel(Object.keys(properties), properties);\n\t}\n\n\tprivate updateConfigurationModel(\n\t\tproperties: string[],\n\t\tconfigurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>,\n\t): void {\n\t\tconst configurationDefaultsOverrides =\n\t\t\tthis.getConfigurationDefaultOverrides();\n\t\tfor (const key of properties) {\n\t\t\tconst defaultOverrideValue = configurationDefaultsOverrides[key];\n\t\t\tconst propertySchema = configurationProperties[key];\n\t\t\tif (defaultOverrideValue !== undefined) {\n\t\t\t\tthis._configurationModel.setValue(key, defaultOverrideValue);\n\t\t\t} else if (propertySchema) {\n\t\t\t\tthis._configurationModel.setValue(key, propertySchema.default);\n\t\t\t} else {\n\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport interface IPolicyConfiguration {\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel>;\n\treadonly configurationModel: ConfigurationModel;\n\tinitialize(): Promise<ConfigurationModel>;\n}\n\nexport class NullPolicyConfiguration implements IPolicyConfiguration {\n\treadonly onDidChangeConfiguration = Event.None;\n\treadonly configurationModel = ConfigurationModel.createEmptyModel(\n\t\tnew NullLogService(),\n\t);\n\tasync initialize() {\n\t\treturn this.configurationModel;\n\t}\n}\n\nexport class PolicyConfiguration\n\textends Disposable\n\timplements IPolicyConfiguration\n{\n\tprivate readonly _onDidChangeConfiguration = this._register(\n\t\tnew Emitter<ConfigurationModel>(),\n\t);\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = ConfigurationModel.createEmptyModel(\n\t\tthis.logService,\n\t);\n\tget configurationModel() {\n\t\treturn this._configurationModel;\n\t}\n\n\tconstructor(\n\t\tprivate readonly defaultConfiguration: DefaultConfiguration,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.logService.trace(\"PolicyConfiguration#initialize\");\n\t\tthis.update(\n\t\t\tawait this.updatePolicyDefinitions(\n\t\t\t\tthis.defaultConfiguration.configurationModel.keys,\n\t\t\t),\n\t\t\tfalse,\n\t\t);\n\t\tthis._register(\n\t\t\tthis.policyService.onDidChange((policyNames) =>\n\t\t\t\tthis.onDidChangePolicies(policyNames),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.defaultConfiguration.onDidChangeConfiguration(\n\t\t\t\tasync ({ properties }) =>\n\t\t\t\t\tthis.update(\n\t\t\t\t\t\tawait this.updatePolicyDefinitions(properties),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\treturn this._configurationModel;\n\t}\n\n\tprivate async updatePolicyDefinitions(\n\t\tproperties: string[],\n\t): Promise<string[]> {\n\t\tthis.logService.trace(\n\t\t\t\"PolicyConfiguration#updatePolicyDefinitions\",\n\t\t\tproperties,\n\t\t);\n\t\tconst policyDefinitions: IStringDictionary<PolicyDefinition> = {};\n\t\tconst keys: string[] = [];\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t).getConfigurationProperties();\n\n\t\tfor (const key of properties) {\n\t\t\tconst config = configurationProperties[key];\n\t\t\tif (!config) {\n\t\t\t\t// Config is removed. So add it to the list if in case it was registered as policy before\n\t\t\t\tkeys.push(key);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (config.policy) {\n\t\t\t\tif (config.type !== \"string\" && config.type !== \"number\") {\n\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t`Policy ${config.policy.name} has unsupported type ${config.type}`,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tkeys.push(key);\n\t\t\t\tpolicyDefinitions[config.policy.name] = { type: config.type };\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmptyObject(policyDefinitions)) {\n\t\t\tawait this.policyService.updatePolicyDefinitions(policyDefinitions);\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\tprivate onDidChangePolicies(policyNames: readonly PolicyName[]): void {\n\t\tthis.logService.trace(\n\t\t\t\"PolicyConfiguration#onDidChangePolicies\",\n\t\t\tpolicyNames,\n\t\t);\n\t\tconst policyConfigurations = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t).getPolicyConfigurations();\n\t\tconst keys = coalesce(\n\t\t\tpolicyNames.map((policyName) =>\n\t\t\t\tpolicyConfigurations.get(policyName),\n\t\t\t),\n\t\t);\n\t\tthis.update(keys, true);\n\t}\n\n\tprivate update(keys: string[], trigger: boolean): void {\n\t\tthis.logService.trace(\"PolicyConfiguration#update\", keys);\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t).getConfigurationProperties();\n\t\tconst changed: [string, PolicyValue | undefined][] = [];\n\t\tconst wasEmpty = this._configurationModel.isEmpty();\n\n\t\tfor (const key of keys) {\n\t\t\tconst policyName = configurationProperties[key]?.policy?.name;\n\t\t\tif (policyName) {\n\t\t\t\tconst policyValue =\n\t\t\t\t\tthis.policyService.getPolicyValue(policyName);\n\t\t\t\tif (\n\t\t\t\t\twasEmpty\n\t\t\t\t\t\t? policyValue !== undefined\n\t\t\t\t\t\t: !equals(\n\t\t\t\t\t\t\t\tthis._configurationModel.getValue(key),\n\t\t\t\t\t\t\t\tpolicyValue,\n\t\t\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tchanged.push([key, policyValue]);\n\t\t\t\t}\n\t\t\t} else if (this._configurationModel.getValue(key) !== undefined) {\n\t\t\t\tchanged.push([key, undefined]);\n\t\t\t}\n\t\t}\n\n\t\tif (changed.length) {\n\t\t\tthis.logService.trace(\"PolicyConfiguration#changed\", changed);\n\t\t\tconst old = this._configurationModel;\n\t\t\tthis._configurationModel = ConfigurationModel.createEmptyModel(\n\t\t\t\tthis.logService,\n\t\t\t);\n\t\t\tfor (const key of old.keys) {\n\t\t\t\tthis._configurationModel.setValue(key, old.getValue(key));\n\t\t\t}\n\t\t\tfor (const [key, policyValue] of changed) {\n\t\t\t\tif (policyValue === undefined) {\n\t\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t\t} else {\n\t\t\t\t\tthis._configurationModel.setValue(key, policyValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (trigger) {\n\t\t\t\tthis._onDidChangeConfiguration.fire(this._configurationModel);\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
