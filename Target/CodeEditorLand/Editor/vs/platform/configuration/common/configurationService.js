import{equals as E,distinct as O}from"../../../../vs/base/common/arrays.js";import{Queue as S,RunOnceScheduler as w}from"../../../../vs/base/common/async.js";import{VSBuffer as D}from"../../../../vs/base/common/buffer.js";import{Emitter as P}from"../../../../vs/base/common/event.js";import{parse as U}from"../../../../vs/base/common/json.js";import{applyEdits as M,setProperty as T}from"../../../../vs/base/common/jsonEdit.js";import"../../../../vs/base/common/jsonFormatter.js";import{Disposable as V}from"../../../../vs/base/common/lifecycle.js";import{ResourceMap as d}from"../../../../vs/base/common/map.js";import{equals as _}from"../../../../vs/base/common/objects.js";import{OperatingSystem as h,OS as p}from"../../../../vs/base/common/platform.js";import{extUriBiasedIgnorePathCase as F}from"../../../../vs/base/common/resources.js";import"../../../../vs/base/common/uri.js";import{ConfigurationTarget as u,isConfigurationOverrides as g,isConfigurationUpdateOverrides as R}from"../../../../vs/platform/configuration/common/configuration.js";import{Configuration as C,ConfigurationChangeEvent as b,ConfigurationModel as s,UserSettings as q}from"../../../../vs/platform/configuration/common/configurationModels.js";import{keyFromOverrideIdentifiers as L}from"../../../../vs/platform/configuration/common/configurationRegistry.js";import{DefaultConfiguration as N,NullPolicyConfiguration as z,PolicyConfiguration as A}from"../../../../vs/platform/configuration/common/configurations.js";import{FileOperationResult as k}from"../../../../vs/platform/files/common/files.js";import"../../../../vs/platform/log/common/log.js";import{NullPolicyService as x}from"../../../../vs/platform/policy/common/policy.js";class Ti extends V{constructor(i,e,t,n){super();this.settingsResource=i;this.logService=n;this.defaultConfiguration=this._register(new N(n)),this.policyConfiguration=t instanceof x?new z:this._register(new A(this.defaultConfiguration,t,n)),this.userConfiguration=this._register(new q(this.settingsResource,{},F,e,n)),this.configuration=new C(this.defaultConfiguration.configurationModel,this.policyConfiguration.configurationModel,s.createEmptyModel(n),s.createEmptyModel(n),s.createEmptyModel(n),s.createEmptyModel(n),new d,s.createEmptyModel(n),new d,n),this.configurationEditing=new J(i,e,this),this.reloadConfigurationScheduler=this._register(new w(()=>this.reloadConfiguration(),50)),this._register(this.defaultConfiguration.onDidChangeConfiguration(({defaults:a,properties:o})=>this.onDidDefaultConfigurationChange(a,o))),this._register(this.policyConfiguration.onDidChangeConfiguration(a=>this.onDidPolicyConfigurationChange(a))),this._register(this.userConfiguration.onDidChange(()=>this.reloadConfigurationScheduler.schedule()))}configuration;defaultConfiguration;policyConfiguration;userConfiguration;reloadConfigurationScheduler;_onDidChangeConfiguration=this._register(new P);onDidChangeConfiguration=this._onDidChangeConfiguration.event;configurationEditing;async initialize(){const[i,e,t]=await Promise.all([this.defaultConfiguration.initialize(),this.policyConfiguration.initialize(),this.userConfiguration.loadConfiguration()]);this.configuration=new C(i,e,s.createEmptyModel(this.logService),t,s.createEmptyModel(this.logService),s.createEmptyModel(this.logService),new d,s.createEmptyModel(this.logService),new d,this.logService)}getConfigurationData(){return this.configuration.toData()}getValue(i,e){const t=typeof i=="string"?i:void 0,n=g(i)?i:g(e)?e:{};return this.configuration.getValue(t,n,void 0)}async updateValue(i,e,t,n,a){const o=R(t)?t:g(t)?{resource:t.resource,overrideIdentifiers:t.overrideIdentifier?[t.overrideIdentifier]:void 0}:void 0,f=o?n:t;if(f!==void 0&&f!==u.USER_LOCAL&&f!==u.USER)throw new Error(`Unable to write ${i} to target ${f}.`);o?.overrideIdentifiers&&(o.overrideIdentifiers=O(o.overrideIdentifiers),o.overrideIdentifiers=o.overrideIdentifiers.length?o.overrideIdentifiers:void 0);const l=this.inspect(i,{resource:o?.resource,overrideIdentifier:o?.overrideIdentifiers?o.overrideIdentifiers[0]:void 0});if(l.policyValue!==void 0)throw new Error(`Unable to write ${i} because it is configured in system policy.`);if(_(e,l.defaultValue)&&(e=void 0),o?.overrideIdentifiers?.length&&o.overrideIdentifiers.length>1){const y=o.overrideIdentifiers.sort(),c=this.configuration.localUserConfiguration.overrides.find(I=>E([...I.identifiers].sort(),y));c&&(o.overrideIdentifiers=c.identifiers)}const m=o?.overrideIdentifiers?.length?[L(o.overrideIdentifiers),i]:[i];await this.configurationEditing.write(m,e),await this.reloadConfiguration()}inspect(i,e={}){return this.configuration.inspect(i,e,void 0)}keys(){return this.configuration.keys(void 0)}async reloadConfiguration(){const i=await this.userConfiguration.loadConfiguration();this.onDidChangeUserConfiguration(i)}onDidChangeUserConfiguration(i){const e=this.configuration.toData(),t=this.configuration.compareAndUpdateLocalUserConfiguration(i);this.trigger(t,e,u.USER)}onDidDefaultConfigurationChange(i,e){const t=this.configuration.toData(),n=this.configuration.compareAndUpdateDefaultConfiguration(i,e);this.trigger(n,t,u.DEFAULT)}onDidPolicyConfigurationChange(i){const e=this.configuration.toData(),t=this.configuration.compareAndUpdatePolicyConfiguration(i);this.trigger(t,e,u.DEFAULT)}trigger(i,e,t){const n=new b(i,{data:e},this.configuration,void 0,this.logService);n.source=t,this._onDidChangeConfiguration.fire(n)}}class J{constructor(r,i,e){this.settingsResource=r;this.fileService=i;this.configurationService=e;this.queue=new S}queue;write(r,i){return this.queue.queue(()=>this.doWriteConfiguration(r,i))}async doWriteConfiguration(r,i){let e;try{e=(await this.fileService.readFile(this.settingsResource)).value.toString()}catch(a){if(a.fileOperationResult===k.FILE_NOT_FOUND)e="{}";else throw a}const t=[];if(U(e,t,{allowTrailingComma:!0,allowEmptyContent:!0}),t.length>0)throw new Error("Unable to write into the settings file. Please open the file to correct errors/warnings in the file and try again.");const n=this.getEdits(e,r,i);e=M(e,n),await this.fileService.writeFile(this.settingsResource,D.fromString(e))}getEdits(r,i,e){const{tabSize:t,insertSpaces:n,eol:a}=this.formattingOptions;if(!i.length){const o=JSON.stringify(e,null,n?" ".repeat(t):"	");return[{content:o,length:o.length,offset:0}]}return T(r,i,e,{tabSize:t,insertSpaces:n,eol:a})}_formattingOptions;get formattingOptions(){if(!this._formattingOptions){let r=p===h.Linux||p===h.Macintosh?`
`:`\r
`;const i=this.configurationService.getValue("files.eol",{overrideIdentifier:"jsonc"});i&&typeof i=="string"&&i!=="auto"&&(r=i),this._formattingOptions={eol:r,insertSpaces:!!this.configurationService.getValue("editor.insertSpaces",{overrideIdentifier:"jsonc"}),tabSize:this.configurationService.getValue("editor.tabSize",{overrideIdentifier:"jsonc"})}}return this._formattingOptions}}export{Ti as ConfigurationService};
