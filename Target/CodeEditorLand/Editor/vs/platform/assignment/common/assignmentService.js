import{importAMDNodeModule as l}from"../../../../vs/amdX.js";import{ASSIGNMENT_REFETCH_INTERVAL as m,ASSIGNMENT_STORAGE_KEY as c,AssignmentFilterProvider as d,TargetPopulation as n}from"../../../../vs/platform/assignment/common/assignment.js";import"../../../../vs/platform/configuration/common/configuration.js";import"../../../../vs/platform/environment/common/environment.js";import"../../../../vs/platform/product/common/productService.js";import{TelemetryLevel as u}from"../../../../vs/platform/telemetry/common/telemetry.js";import{getTelemetryLevel as p}from"../../../../vs/platform/telemetry/common/telemetryUtils.js";class V{constructor(i,r,e,t,g,y){this.machineId=i;this.configurationService=r;this.productService=e;this.environmentService=t;this.telemetry=g;this.keyValueStorage=y;!(t.extensionTestsLocationURI!==void 0)&&e.tasConfig&&this.experimentsEnabled&&p(this.configurationService)===u.USAGE&&(this.tasClient=this.setupTASClient());const o=this.configurationService.getValue("experiments.overrideDelay"),a=typeof o=="number"?o:0;this.overrideInitDelay=new Promise(s=>setTimeout(s,a))}_serviceBrand;tasClient;networkInitialized=!1;overrideInitDelay;get experimentsEnabled(){return!0}async getTreatment(i){await this.overrideInitDelay;const r=this.configurationService.getValue("experiments.override."+i);if(r!==void 0)return r;if(!this.tasClient||!this.experimentsEnabled)return;let e;const t=await this.tasClient;return this.networkInitialized?e=t.getTreatmentVariable("vscode",i):e=await t.getTreatmentVariableAsync("vscode",i,!0),e=t.getTreatmentVariable("vscode",i),e}async setupTASClient(){const i=this.productService.quality==="stable"?n.Public:this.productService.quality==="exploration"?n.Exploration:n.Insiders,r=new d(this.productService.version,this.productService.nameLong,this.machineId,i),e=this.productService.tasConfig,t=new(await l("tas-client-umd","lib/tas-client-umd.js")).ExperimentationService({filterProviders:[r],telemetry:this.telemetry,storageKey:c,keyValueStorage:this.keyValueStorage,assignmentContextTelemetryPropertyName:e.assignmentContextTelemetryPropertyName,telemetryEventName:e.telemetryEventName,endpoint:e.endpoint,refetchInterval:m});return await t.initializePromise,t.initialFetch.then(()=>this.networkInitialized=!0),t}}export{V as BaseAssignmentService};
