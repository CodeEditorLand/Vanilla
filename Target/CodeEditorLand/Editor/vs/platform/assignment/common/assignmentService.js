import{importAMDNodeModule as l}from"../../../amdX.js";import"../../configuration/common/configuration.js";import"../../environment/common/environment.js";import"../../product/common/productService.js";import{TelemetryLevel as m}from"../../telemetry/common/telemetry.js";import{getTelemetryLevel as c}from"../../telemetry/common/telemetryUtils.js";import{ASSIGNMENT_REFETCH_INTERVAL as d,ASSIGNMENT_STORAGE_KEY as u,AssignmentFilterProvider as p,TargetPopulation as n}from"./assignment.js";class V{constructor(i,r,e,t,g,y){this.machineId=i;this.configurationService=r;this.productService=e;this.environmentService=t;this.telemetry=g;this.keyValueStorage=y;!(t.extensionTestsLocationURI!==void 0)&&e.tasConfig&&this.experimentsEnabled&&c(this.configurationService)===m.USAGE&&(this.tasClient=this.setupTASClient());const o=this.configurationService.getValue("experiments.overrideDelay"),a=typeof o=="number"?o:0;this.overrideInitDelay=new Promise(s=>setTimeout(s,a))}_serviceBrand;tasClient;networkInitialized=!1;overrideInitDelay;get experimentsEnabled(){return!0}async getTreatment(i){await this.overrideInitDelay;const r=this.configurationService.getValue("experiments.override."+i);if(r!==void 0)return r;if(!this.tasClient||!this.experimentsEnabled)return;let e;const t=await this.tasClient;return this.networkInitialized?e=t.getTreatmentVariable("vscode",i):e=await t.getTreatmentVariableAsync("vscode",i,!0),e=t.getTreatmentVariable("vscode",i),e}async setupTASClient(){const i=this.productService.quality==="stable"?n.Public:this.productService.quality==="exploration"?n.Exploration:n.Insiders,r=new p(this.productService.version,this.productService.nameLong,this.machineId,i),e=this.productService.tasConfig,t=new(await l("tas-client-umd","lib/tas-client-umd.js")).ExperimentationService({filterProviders:[r],telemetry:this.telemetry,storageKey:u,keyValueStorage:this.keyValueStorage,assignmentContextTelemetryPropertyName:e.assignmentContextTelemetryPropertyName,telemetryEventName:e.telemetryEventName,endpoint:e.endpoint,refetchInterval:d});return await t.initializePromise,t.initialFetch.then(()=>this.networkInitialized=!0),t}}export{V as BaseAssignmentService};
