{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/assignment/common/assignmentService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IExperimentationTelemetry, ExperimentationService as TASClient, IKeyValueStorage } from 'tas-client-umd';\nimport { TelemetryLevel } from '../../telemetry/common/telemetry.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { getTelemetryLevel } from '../../telemetry/common/telemetryUtils.js';\nimport { AssignmentFilterProvider, ASSIGNMENT_REFETCH_INTERVAL, ASSIGNMENT_STORAGE_KEY, IAssignmentService, TargetPopulation } from './assignment.js';\nimport { importAMDNodeModule } from '../../../amdX.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\n\nexport abstract class BaseAssignmentService implements IAssignmentService {\n\t_serviceBrand: undefined;\n\tprotected tasClient: Promise<TASClient> | undefined;\n\tprivate networkInitialized = false;\n\tprivate overrideInitDelay: Promise<void>;\n\n\tprotected get experimentsEnabled(): boolean {\n\t\treturn true;\n\t}\n\n\tconstructor(\n\t\tprivate readonly machineId: string,\n\t\tprotected readonly configurationService: IConfigurationService,\n\t\tprotected readonly productService: IProductService,\n\t\tprotected readonly environmentService: IEnvironmentService,\n\t\tprotected telemetry: IExperimentationTelemetry,\n\t\tprivate keyValueStorage?: IKeyValueStorage\n\t) {\n\t\tconst isTesting = environmentService.extensionTestsLocationURI !== undefined;\n\t\tif (!isTesting && productService.tasConfig && this.experimentsEnabled && getTelemetryLevel(this.configurationService) === TelemetryLevel.USAGE) {\n\t\t\tthis.tasClient = this.setupTASClient();\n\t\t}\n\n\t\t// For development purposes, configure the delay until tas local tas treatment ovverrides are available\n\t\tconst overrideDelaySetting = this.configurationService.getValue('experiments.overrideDelay');\n\t\tconst overrideDelay = typeof overrideDelaySetting === 'number' ? overrideDelaySetting : 0;\n\t\tthis.overrideInitDelay = new Promise(resolve => setTimeout(resolve, overrideDelay));\n\t}\n\n\tasync getTreatment<T extends string | number | boolean>(name: string): Promise<T | undefined> {\n\t\t// For development purposes, allow overriding tas assignments to test variants locally.\n\t\tawait this.overrideInitDelay;\n\t\tconst override = this.configurationService.getValue<T>('experiments.override.' + name);\n\t\tif (override !== undefined) {\n\t\t\treturn override;\n\t\t}\n\n\t\tif (!this.tasClient) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.experimentsEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: T | undefined;\n\t\tconst client = await this.tasClient;\n\n\t\t// The TAS client is initialized but we need to check if the initial fetch has completed yet\n\t\t// If it is complete, return a cached value for the treatment\n\t\t// If not, use the async call with `checkCache: true`. This will allow the module to return a cached value if it is present.\n\t\t// Otherwise it will await the initial fetch to return the most up to date value.\n\t\tif (this.networkInitialized) {\n\t\t\tresult = client.getTreatmentVariable<T>('vscode', name);\n\t\t} else {\n\t\t\tresult = await client.getTreatmentVariableAsync<T>('vscode', name, true);\n\t\t}\n\n\t\tresult = client.getTreatmentVariable<T>('vscode', name);\n\t\treturn result;\n\t}\n\n\tprivate async setupTASClient(): Promise<TASClient> {\n\n\t\tconst targetPopulation = this.productService.quality === 'stable' ?\n\t\t\tTargetPopulation.Public : (this.productService.quality === 'exploration' ?\n\t\t\t\tTargetPopulation.Exploration : TargetPopulation.Insiders);\n\n\t\tconst filterProvider = new AssignmentFilterProvider(\n\t\t\tthis.productService.version,\n\t\t\tthis.productService.nameLong,\n\t\t\tthis.machineId,\n\t\t\ttargetPopulation\n\t\t);\n\n\t\tconst tasConfig = this.productService.tasConfig!;\n\t\tconst tasClient = new (await importAMDNodeModule<typeof import('tas-client-umd')>('tas-client-umd', 'lib/tas-client-umd.js')).ExperimentationService({\n\t\t\tfilterProviders: [filterProvider],\n\t\t\ttelemetry: this.telemetry,\n\t\t\tstorageKey: ASSIGNMENT_STORAGE_KEY,\n\t\t\tkeyValueStorage: this.keyValueStorage,\n\t\t\tassignmentContextTelemetryPropertyName: tasConfig.assignmentContextTelemetryPropertyName,\n\t\t\ttelemetryEventName: tasConfig.telemetryEventName,\n\t\t\tendpoint: tasConfig.endpoint,\n\t\t\trefetchInterval: ASSIGNMENT_REFETCH_INTERVAL,\n\t\t});\n\n\t\tawait tasClient.initializePromise;\n\t\ttasClient.initialFetch.then(() => this.networkInitialized = true);\n\n\t\treturn tasClient;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,sBAAsB;AAC/B,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,0BAA0B,6BAA6B,wBAAwB,oBAAoB,wBAAwB;AACpI,SAAS,2BAA2B;AACpC,SAAS,2BAA2B;AAE7B,MAAe,sBAAoD;AAAA,EAUzE,YACkB,WACE,sBACA,gBACA,oBACT,WACF,iBACP;AANgB;AACE;AACA;AACA;AACT;AACF;AAER,UAAM,YAAY,mBAAmB,8BAA8B;AACnE,QAAI,CAAC,aAAa,eAAe,aAAa,KAAK,sBAAsB,kBAAkB,KAAK,oBAAoB,MAAM,eAAe,OAAO;AAC/I,WAAK,YAAY,KAAK,eAAe;AAAA,IACtC;AAGA,UAAM,uBAAuB,KAAK,qBAAqB,SAAS,2BAA2B;AAC3F,UAAM,gBAAgB,OAAO,yBAAyB,WAAW,uBAAuB;AACxF,SAAK,oBAAoB,IAAI,QAAQ,aAAW,WAAW,SAAS,aAAa,CAAC;AAAA,EACnF;AAAA,EAzCD,OAc0E;AAAA;AAAA;AAAA,EACzE;AAAA,EACU;AAAA,EACF,qBAAqB;AAAA,EACrB;AAAA,EAER,IAAc,qBAA8B;AAC3C,WAAO;AAAA,EACR;AAAA,EAqBA,MAAM,aAAkD,MAAsC;AAE7F,UAAM,KAAK;AACX,UAAM,WAAW,KAAK,qBAAqB,SAAY,0BAA0B,IAAI;AACrF,QAAI,aAAa,QAAW;AAC3B,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,WAAW;AACpB,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,oBAAoB;AAC7B,aAAO;AAAA,IACR;AAEA,QAAI;AACJ,UAAM,SAAS,MAAM,KAAK;AAM1B,QAAI,KAAK,oBAAoB;AAC5B,eAAS,OAAO,qBAAwB,UAAU,IAAI;AAAA,IACvD,OAAO;AACN,eAAS,MAAM,OAAO,0BAA6B,UAAU,MAAM,IAAI;AAAA,IACxE;AAEA,aAAS,OAAO,qBAAwB,UAAU,IAAI;AACtD,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,iBAAqC;AAElD,UAAM,mBAAmB,KAAK,eAAe,YAAY,WACxD,iBAAiB,SAAU,KAAK,eAAe,YAAY,gBAC1D,iBAAiB,cAAc,iBAAiB;AAElD,UAAM,iBAAiB,IAAI;AAAA,MAC1B,KAAK,eAAe;AAAA,MACpB,KAAK,eAAe;AAAA,MACpB,KAAK;AAAA,MACL;AAAA,IACD;AAEA,UAAM,YAAY,KAAK,eAAe;AACtC,UAAM,YAAY,KAAK,MAAM,oBAAqD,kBAAkB,uBAAuB,GAAG,uBAAuB;AAAA,MACpJ,iBAAiB,CAAC,cAAc;AAAA,MAChC,WAAW,KAAK;AAAA,MAChB,YAAY;AAAA,MACZ,iBAAiB,KAAK;AAAA,MACtB,wCAAwC,UAAU;AAAA,MAClD,oBAAoB,UAAU;AAAA,MAC9B,UAAU,UAAU;AAAA,MACpB,iBAAiB;AAAA,IAClB,CAAC;AAED,UAAM,UAAU;AAChB,cAAU,aAAa,KAAK,MAAM,KAAK,qBAAqB,IAAI;AAEhE,WAAO;AAAA,EACR;AACD;",
  "names": []
}
