{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/assignment/common/assignmentService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tIExperimentationTelemetry,\n\tIKeyValueStorage,\n\tExperimentationService as TASClient,\n} from \"tas-client-umd\";\nimport { importAMDNodeModule } from \"../../../amdX.js\";\nimport type { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport type { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport type { IProductService } from \"../../product/common/productService.js\";\nimport { TelemetryLevel } from \"../../telemetry/common/telemetry.js\";\nimport { getTelemetryLevel } from \"../../telemetry/common/telemetryUtils.js\";\nimport {\n\tASSIGNMENT_REFETCH_INTERVAL,\n\tASSIGNMENT_STORAGE_KEY,\n\tAssignmentFilterProvider,\n\ttype IAssignmentService,\n\tTargetPopulation,\n} from \"./assignment.js\";\n\nexport abstract class BaseAssignmentService implements IAssignmentService {\n\t_serviceBrand: undefined;\n\tprotected tasClient: Promise<TASClient> | undefined;\n\tprivate networkInitialized = false;\n\tprivate overrideInitDelay: Promise<void>;\n\n\tprotected get experimentsEnabled(): boolean {\n\t\treturn true;\n\t}\n\n\tconstructor(\n\t\tprivate readonly machineId: string,\n\t\tprotected readonly configurationService: IConfigurationService,\n\t\tprotected readonly productService: IProductService,\n\t\tprotected readonly environmentService: IEnvironmentService,\n\t\tprotected telemetry: IExperimentationTelemetry,\n\t\tprivate keyValueStorage?: IKeyValueStorage,\n\t) {\n\t\tconst isTesting =\n\t\t\tenvironmentService.extensionTestsLocationURI !== undefined;\n\t\tif (\n\t\t\t!isTesting &&\n\t\t\tproductService.tasConfig &&\n\t\t\tthis.experimentsEnabled &&\n\t\t\tgetTelemetryLevel(this.configurationService) ===\n\t\t\t\tTelemetryLevel.USAGE\n\t\t) {\n\t\t\tthis.tasClient = this.setupTASClient();\n\t\t}\n\n\t\t// For development purposes, configure the delay until tas local tas treatment ovverrides are available\n\t\tconst overrideDelaySetting = this.configurationService.getValue(\n\t\t\t\"experiments.overrideDelay\",\n\t\t);\n\t\tconst overrideDelay =\n\t\t\ttypeof overrideDelaySetting === \"number\" ? overrideDelaySetting : 0;\n\t\tthis.overrideInitDelay = new Promise((resolve) =>\n\t\t\tsetTimeout(resolve, overrideDelay),\n\t\t);\n\t}\n\n\tasync getTreatment<T extends string | number | boolean>(\n\t\tname: string,\n\t): Promise<T | undefined> {\n\t\t// For development purposes, allow overriding tas assignments to test variants locally.\n\t\tawait this.overrideInitDelay;\n\t\tconst override = this.configurationService.getValue<T>(\n\t\t\t\"experiments.override.\" + name,\n\t\t);\n\t\tif (override !== undefined) {\n\t\t\treturn override;\n\t\t}\n\n\t\tif (!this.tasClient) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.experimentsEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: T | undefined;\n\t\tconst client = await this.tasClient;\n\n\t\t// The TAS client is initialized but we need to check if the initial fetch has completed yet\n\t\t// If it is complete, return a cached value for the treatment\n\t\t// If not, use the async call with `checkCache: true`. This will allow the module to return a cached value if it is present.\n\t\t// Otherwise it will await the initial fetch to return the most up to date value.\n\t\tif (this.networkInitialized) {\n\t\t\tresult = client.getTreatmentVariable<T>(\"vscode\", name);\n\t\t} else {\n\t\t\tresult = await client.getTreatmentVariableAsync<T>(\n\t\t\t\t\"vscode\",\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\n\t\tresult = client.getTreatmentVariable<T>(\"vscode\", name);\n\t\treturn result;\n\t}\n\n\tprivate async setupTASClient(): Promise<TASClient> {\n\t\tconst targetPopulation =\n\t\t\tthis.productService.quality === \"stable\"\n\t\t\t\t? TargetPopulation.Public\n\t\t\t\t: this.productService.quality === \"exploration\"\n\t\t\t\t\t? TargetPopulation.Exploration\n\t\t\t\t\t: TargetPopulation.Insiders;\n\n\t\tconst filterProvider = new AssignmentFilterProvider(\n\t\t\tthis.productService.version,\n\t\t\tthis.productService.nameLong,\n\t\t\tthis.machineId,\n\t\t\ttargetPopulation,\n\t\t);\n\n\t\tconst tasConfig = this.productService.tasConfig!;\n\t\tconst tasClient = new (\n\t\t\tawait importAMDNodeModule<typeof import(\"tas-client-umd\")>(\n\t\t\t\t\"tas-client-umd\",\n\t\t\t\t\"lib/tas-client-umd.js\",\n\t\t\t)\n\t\t).ExperimentationService({\n\t\t\tfilterProviders: [filterProvider],\n\t\t\ttelemetry: this.telemetry,\n\t\t\tstorageKey: ASSIGNMENT_STORAGE_KEY,\n\t\t\tkeyValueStorage: this.keyValueStorage,\n\t\t\tassignmentContextTelemetryPropertyName:\n\t\t\t\ttasConfig.assignmentContextTelemetryPropertyName,\n\t\t\ttelemetryEventName: tasConfig.telemetryEventName,\n\t\t\tendpoint: tasConfig.endpoint,\n\t\t\trefetchInterval: ASSIGNMENT_REFETCH_INTERVAL,\n\t\t});\n\n\t\tawait tasClient.initializePromise;\n\t\ttasClient.initialFetch.then(() => (this.networkInitialized = true));\n\n\t\treturn tasClient;\n\t}\n}\n"],
  "mappings": ";;AAUA,SAAS,2BAA2B;AAIpC,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,OACM;AAEA,MAAe,sBAAoD;AAAA,EAUzE,YACkB,WACE,sBACA,gBACA,oBACT,WACF,iBACP;AANgB;AACE;AACA;AACA;AACT;AACF;AAER,UAAM,YACL,mBAAmB,8BAA8B;AAClD,QACC,CAAC,aACD,eAAe,aACf,KAAK,sBACL,kBAAkB,KAAK,oBAAoB,MAC1C,eAAe,OACf;AACD,WAAK,YAAY,KAAK,eAAe;AAAA,IACtC;AAGA,UAAM,uBAAuB,KAAK,qBAAqB;AAAA,MACtD;AAAA,IACD;AACA,UAAM,gBACL,OAAO,yBAAyB,WAAW,uBAAuB;AACnE,SAAK,oBAAoB,IAAI;AAAA,MAAQ,CAAC,YACrC,WAAW,SAAS,aAAa;AAAA,IAClC;AAAA,EACD;AAAA,EA/DD,OAwB0E;AAAA;AAAA;AAAA,EACzE;AAAA,EACU;AAAA,EACF,qBAAqB;AAAA,EACrB;AAAA,EAER,IAAc,qBAA8B;AAC3C,WAAO;AAAA,EACR;AAAA,EAiCA,MAAM,aACL,MACyB;AAEzB,UAAM,KAAK;AACX,UAAM,WAAW,KAAK,qBAAqB;AAAA,MAC1C,0BAA0B;AAAA,IAC3B;AACA,QAAI,aAAa,QAAW;AAC3B,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,WAAW;AACpB,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,oBAAoB;AAC7B,aAAO;AAAA,IACR;AAEA,QAAI;AACJ,UAAM,SAAS,MAAM,KAAK;AAM1B,QAAI,KAAK,oBAAoB;AAC5B,eAAS,OAAO,qBAAwB,UAAU,IAAI;AAAA,IACvD,OAAO;AACN,eAAS,MAAM,OAAO;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAEA,aAAS,OAAO,qBAAwB,UAAU,IAAI;AACtD,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,iBAAqC;AAClD,UAAM,mBACL,KAAK,eAAe,YAAY,WAC7B,iBAAiB,SACjB,KAAK,eAAe,YAAY,gBAC/B,iBAAiB,cACjB,iBAAiB;AAEtB,UAAM,iBAAiB,IAAI;AAAA,MAC1B,KAAK,eAAe;AAAA,MACpB,KAAK,eAAe;AAAA,MACpB,KAAK;AAAA,MACL;AAAA,IACD;AAEA,UAAM,YAAY,KAAK,eAAe;AACtC,UAAM,YAAY,KACjB,MAAM;AAAA,MACL;AAAA,MACA;AAAA,IACD,GACC,uBAAuB;AAAA,MACxB,iBAAiB,CAAC,cAAc;AAAA,MAChC,WAAW,KAAK;AAAA,MAChB,YAAY;AAAA,MACZ,iBAAiB,KAAK;AAAA,MACtB,wCACC,UAAU;AAAA,MACX,oBAAoB,UAAU;AAAA,MAC9B,UAAU,UAAU;AAAA,MACpB,iBAAiB;AAAA,IAClB,CAAC;AAED,UAAM,UAAU;AAChB,cAAU,aAAa,KAAK,MAAO,KAAK,qBAAqB,IAAK;AAElE,WAAO;AAAA,EACR;AACD;",
  "names": []
}
