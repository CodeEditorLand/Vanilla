{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/assignment/common/assignment.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IExperimentationFilterProvider } from \"tas-client-umd\";\nimport * as platform from \"../../../base/common/platform.js\";\n\nexport const ASSIGNMENT_STORAGE_KEY = \"VSCode.ABExp.FeatureData\";\nexport const ASSIGNMENT_REFETCH_INTERVAL = 0; // no polling\n\nexport interface IAssignmentService {\n\treadonly _serviceBrand: undefined;\n\tgetTreatment<T extends string | number | boolean>(\n\t\tname: string,\n\t): Promise<T | undefined>;\n}\n\nexport enum TargetPopulation {\n\tInsiders = \"insider\",\n\tPublic = \"public\",\n\tExploration = \"exploration\",\n}\n\n/*\nBased upon the official VSCode currently existing filters in the\nExP backend for the VSCode cluster.\nhttps://experimentation.visualstudio.com/Analysis%20and%20Experimentation/_git/AnE.ExP.TAS.TachyonHost.Configuration?path=%2FConfigurations%2Fvscode%2Fvscode.json&version=GBmaster\n\"X-MSEdge-Market\": \"detection.market\",\n\"X-FD-Corpnet\": \"detection.corpnet\",\n\"X-VSCode-AppVersion\": \"appversion\",\n\"X-VSCode-Build\": \"build\",\n\"X-MSEdge-ClientId\": \"clientid\",\n\"X-VSCode-ExtensionName\": \"extensionname\",\n\"X-VSCode-ExtensionVersion\": \"extensionversion\",\n\"X-VSCode-TargetPopulation\": \"targetpopulation\",\n\"X-VSCode-Language\": \"language\"\n*/\nexport enum Filters {\n\t/**\n\t * The market in which the extension is distributed.\n\t */\n\tMarket = \"X-MSEdge-Market\",\n\n\t/**\n\t * The corporation network.\n\t */\n\tCorpNet = \"X-FD-Corpnet\",\n\n\t/**\n\t * Version of the application which uses experimentation service.\n\t */\n\tApplicationVersion = \"X-VSCode-AppVersion\",\n\n\t/**\n\t * Insiders vs Stable.\n\t */\n\tBuild = \"X-VSCode-Build\",\n\n\t/**\n\t * Client Id which is used as primary unit for the experimentation.\n\t */\n\tClientId = \"X-MSEdge-ClientId\",\n\n\t/**\n\t * Extension header.\n\t */\n\tExtensionName = \"X-VSCode-ExtensionName\",\n\n\t/**\n\t * The version of the extension.\n\t */\n\tExtensionVersion = \"X-VSCode-ExtensionVersion\",\n\n\t/**\n\t * The language in use by VS Code\n\t */\n\tLanguage = \"X-VSCode-Language\",\n\n\t/**\n\t * The target population.\n\t * This is used to separate internal, early preview, GA, etc.\n\t */\n\tTargetPopulation = \"X-VSCode-TargetPopulation\",\n}\n\nexport class AssignmentFilterProvider\n\timplements IExperimentationFilterProvider\n{\n\tconstructor(\n\t\tprivate version: string,\n\t\tprivate appName: string,\n\t\tprivate machineId: string,\n\t\tprivate targetPopulation: TargetPopulation,\n\t) {}\n\n\t/**\n\t * Returns a version string that can be parsed by the TAS client.\n\t * The tas client cannot handle suffixes lke \"-insider\"\n\t * Ref: https://github.com/microsoft/tas-client/blob/30340d5e1da37c2789049fcf45928b954680606f/vscode-tas-client/src/vscode-tas-client/VSCodeFilterProvider.ts#L35\n\t *\n\t * @param version Version string to be trimmed.\n\t */\n\tprivate static trimVersionSuffix(version: string): string {\n\t\tconst regex = /-[a-zA-Z0-9]+$/;\n\t\tconst result = version.split(regex);\n\n\t\treturn result[0];\n\t}\n\n\tgetFilterValue(filter: string): string | null {\n\t\tswitch (filter) {\n\t\t\tcase Filters.ApplicationVersion:\n\t\t\t\treturn AssignmentFilterProvider.trimVersionSuffix(this.version); // productService.version\n\t\t\tcase Filters.Build:\n\t\t\t\treturn this.appName; // productService.nameLong\n\t\t\tcase Filters.ClientId:\n\t\t\t\treturn this.machineId;\n\t\t\tcase Filters.Language:\n\t\t\t\treturn platform.language;\n\t\t\tcase Filters.ExtensionName:\n\t\t\t\treturn \"vscode-core\"; // always return vscode-core for exp service\n\t\t\tcase Filters.ExtensionVersion:\n\t\t\t\treturn \"999999.0\"; // always return a very large number for cross-extension experimentation\n\t\t\tcase Filters.TargetPopulation:\n\t\t\t\treturn this.targetPopulation;\n\t\t\tdefault:\n\t\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetFilters(): Map<string, any> {\n\t\tconst filters: Map<string, any> = new Map<string, any>();\n\t\tconst filterValues = Object.values(Filters);\n\t\tfor (const value of filterValues) {\n\t\t\tfilters.set(value, this.getFilterValue(value));\n\t\t}\n\n\t\treturn filters;\n\t}\n}\n"],
  "mappings": ";;AAMA,YAAY,cAAc;AAEnB,MAAM,yBAAyB;AAC/B,MAAM,8BAA8B;AASpC,IAAK,mBAAL,kBAAKA,sBAAL;AACN,EAAAA,kBAAA,cAAW;AACX,EAAAA,kBAAA,YAAS;AACT,EAAAA,kBAAA,iBAAc;AAHH,SAAAA;AAAA,GAAA;AAoBL,IAAK,UAAL,kBAAKC,aAAL;AAIN,EAAAA,SAAA,YAAS;AAKT,EAAAA,SAAA,aAAU;AAKV,EAAAA,SAAA,wBAAqB;AAKrB,EAAAA,SAAA,WAAQ;AAKR,EAAAA,SAAA,cAAW;AAKX,EAAAA,SAAA,mBAAgB;AAKhB,EAAAA,SAAA,sBAAmB;AAKnB,EAAAA,SAAA,cAAW;AAMX,EAAAA,SAAA,sBAAmB;AA7CR,SAAAA;AAAA,GAAA;AAgDL,MAAM,yBAEb;AAAA,EACC,YACS,SACA,SACA,WACA,kBACP;AAJO;AACA;AACA;AACA;AAAA,EACN;AAAA,EA9FJ,OAwFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeC,OAAe,kBAAkB,SAAyB;AACzD,UAAM,QAAQ;AACd,UAAM,SAAS,QAAQ,MAAM,KAAK;AAElC,WAAO,OAAO,CAAC;AAAA,EAChB;AAAA,EAEA,eAAe,QAA+B;AAC7C,YAAQ,QAAQ;AAAA,MACf,KAAK;AACJ,eAAO,yBAAyB,kBAAkB,KAAK,OAAO;AAAA;AAAA,MAC/D,KAAK;AACJ,eAAO,KAAK;AAAA;AAAA,MACb,KAAK;AACJ,eAAO,KAAK;AAAA,MACb,KAAK;AACJ,eAAO,SAAS;AAAA,MACjB,KAAK;AACJ,eAAO;AAAA;AAAA,MACR,KAAK;AACJ,eAAO;AAAA;AAAA,MACR,KAAK;AACJ,eAAO,KAAK;AAAA,MACb;AACC,eAAO;AAAA,IACT;AAAA,EACD;AAAA,EAEA,aAA+B;AAC9B,UAAM,UAA4B,oBAAI,IAAiB;AACvD,UAAM,eAAe,OAAO,OAAO,OAAO;AAC1C,eAAW,SAAS,cAAc;AACjC,cAAQ,IAAI,OAAO,KAAK,eAAe,KAAK,CAAC;AAAA,IAC9C;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": ["TargetPopulation", "Filters"]
}
