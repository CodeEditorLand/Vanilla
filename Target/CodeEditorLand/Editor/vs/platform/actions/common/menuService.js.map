{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/actions/common/menuService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { DebounceEmitter, Emitter, Event } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { IMenu, IMenuActionOptions, IMenuChangeEvent, IMenuCreateOptions, IMenuItem, IMenuItemHide, IMenuService, isIMenuItem, isISubmenuItem, ISubmenuItem, MenuId, MenuItemAction, MenuRegistry, SubmenuItemAction } from './actions.js';\nimport { ICommandAction, ILocalizedString } from '../../action/common/action.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { ContextKeyExpression, IContextKeyService } from '../../contextkey/common/contextkey.js';\nimport { IAction, Separator, toAction } from '../../../base/common/actions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { removeFastWithoutKeepingOrder } from '../../../base/common/arrays.js';\nimport { localize } from '../../../nls.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\n\nexport class MenuService implements IMenuService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _hiddenStates: PersistedMenuHideState;\n\n\tconstructor(\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tthis._hiddenStates = new PersistedMenuHideState(storageService);\n\t}\n\n\tcreateMenu(id: MenuId, contextKeyService: IContextKeyService, options?: IMenuCreateOptions): IMenu {\n\t\treturn new MenuImpl(id, this._hiddenStates, { emitEventsForSubmenuChanges: false, eventDebounceDelay: 50, ...options }, this._commandService, this._keybindingService, contextKeyService);\n\t}\n\n\tgetMenuActions(id: MenuId, contextKeyService: IContextKeyService, options?: IMenuActionOptions): [string, Array<MenuItemAction | SubmenuItemAction>][] {\n\t\tconst menu = new MenuImpl(id, this._hiddenStates, { emitEventsForSubmenuChanges: false, eventDebounceDelay: 50, ...options }, this._commandService, this._keybindingService, contextKeyService);\n\t\tconst actions = menu.getActions(options);\n\t\tmenu.dispose();\n\t\treturn actions;\n\t}\n\n\tgetMenuContexts(id: MenuId): ReadonlySet<string> {\n\t\tconst menuInfo = new MenuInfoSnapshot(id, false);\n\t\treturn new Set<string>([...menuInfo.structureContextKeys, ...menuInfo.preconditionContextKeys, ...menuInfo.toggledContextKeys]);\n\t}\n\n\tresetHiddenStates(ids?: MenuId[]): void {\n\t\tthis._hiddenStates.reset(ids);\n\t}\n}\n\nclass PersistedMenuHideState {\n\n\tprivate static readonly _key = 'menu.hiddenCommands';\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _onDidChange = new Emitter<void>();\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate _ignoreChangeEvent: boolean = false;\n\tprivate _data: Record<string, string[] | undefined>;\n\n\tprivate _hiddenByDefaultCache = new Map<string, boolean>();\n\n\tconstructor(@IStorageService private readonly _storageService: IStorageService) {\n\t\ttry {\n\t\t\tconst raw = _storageService.get(PersistedMenuHideState._key, StorageScope.PROFILE, '{}');\n\t\t\tthis._data = JSON.parse(raw);\n\t\t} catch (err) {\n\t\t\tthis._data = Object.create(null);\n\t\t}\n\n\t\tthis._disposables.add(_storageService.onDidChangeValue(StorageScope.PROFILE, PersistedMenuHideState._key, this._disposables)(() => {\n\t\t\tif (!this._ignoreChangeEvent) {\n\t\t\t\ttry {\n\t\t\t\t\tconst raw = _storageService.get(PersistedMenuHideState._key, StorageScope.PROFILE, '{}');\n\t\t\t\t\tthis._data = JSON.parse(raw);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log('FAILED to read storage after UPDATE', err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onDidChange.fire();\n\t\t}));\n\t}\n\n\tdispose() {\n\t\tthis._onDidChange.dispose();\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _isHiddenByDefault(menu: MenuId, commandId: string) {\n\t\treturn this._hiddenByDefaultCache.get(`${menu.id}/${commandId}`) ?? false;\n\t}\n\n\tsetDefaultState(menu: MenuId, commandId: string, hidden: boolean): void {\n\t\tthis._hiddenByDefaultCache.set(`${menu.id}/${commandId}`, hidden);\n\t}\n\n\tisHidden(menu: MenuId, commandId: string): boolean {\n\t\tconst hiddenByDefault = this._isHiddenByDefault(menu, commandId);\n\t\tconst state = this._data[menu.id]?.includes(commandId) ?? false;\n\t\treturn hiddenByDefault ? !state : state;\n\t}\n\n\tupdateHidden(menu: MenuId, commandId: string, hidden: boolean): void {\n\t\tconst hiddenByDefault = this._isHiddenByDefault(menu, commandId);\n\t\tif (hiddenByDefault) {\n\t\t\thidden = !hidden;\n\t\t}\n\t\tconst entries = this._data[menu.id];\n\t\tif (!hidden) {\n\t\t\t// remove and cleanup\n\t\t\tif (entries) {\n\t\t\t\tconst idx = entries.indexOf(commandId);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tremoveFastWithoutKeepingOrder(entries, idx);\n\t\t\t\t}\n\t\t\t\tif (entries.length === 0) {\n\t\t\t\t\tdelete this._data[menu.id];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// add unless already added\n\t\t\tif (!entries) {\n\t\t\t\tthis._data[menu.id] = [commandId];\n\t\t\t} else {\n\t\t\t\tconst idx = entries.indexOf(commandId);\n\t\t\t\tif (idx < 0) {\n\t\t\t\t\tentries.push(commandId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._persist();\n\t}\n\n\treset(menus?: MenuId[]): void {\n\t\tif (menus === undefined) {\n\t\t\t// reset all\n\t\t\tthis._data = Object.create(null);\n\t\t\tthis._persist();\n\t\t} else {\n\t\t\t// reset only for a specific menu\n\t\t\tfor (const { id } of menus) {\n\t\t\t\tif (this._data[id]) {\n\t\t\t\t\tdelete this._data[id];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._persist();\n\t\t}\n\t}\n\n\tprivate _persist(): void {\n\t\ttry {\n\t\t\tthis._ignoreChangeEvent = true;\n\t\t\tconst raw = JSON.stringify(this._data);\n\t\t\tthis._storageService.store(PersistedMenuHideState._key, raw, StorageScope.PROFILE, StorageTarget.USER);\n\t\t} finally {\n\t\t\tthis._ignoreChangeEvent = false;\n\t\t}\n\t}\n}\n\ntype MenuItemGroup = [string, Array<IMenuItem | ISubmenuItem>];\n\nclass MenuInfoSnapshot {\n\tprotected _menuGroups: MenuItemGroup[] = [];\n\tprivate _allMenuIds: Set<MenuId> = new Set();\n\tprivate _structureContextKeys: Set<string> = new Set();\n\tprivate _preconditionContextKeys: Set<string> = new Set();\n\tprivate _toggledContextKeys: Set<string> = new Set();\n\n\tconstructor(\n\t\tprotected readonly _id: MenuId,\n\t\tprotected readonly _collectContextKeysForSubmenus: boolean,\n\t) {\n\t\tthis.refresh();\n\t}\n\n\tget allMenuIds(): ReadonlySet<MenuId> {\n\t\treturn this._allMenuIds;\n\t}\n\n\tget structureContextKeys(): ReadonlySet<string> {\n\t\treturn this._structureContextKeys;\n\t}\n\n\tget preconditionContextKeys(): ReadonlySet<string> {\n\t\treturn this._preconditionContextKeys;\n\t}\n\n\tget toggledContextKeys(): ReadonlySet<string> {\n\t\treturn this._toggledContextKeys;\n\t}\n\n\trefresh(): void {\n\n\t\t// reset\n\t\tthis._menuGroups.length = 0;\n\t\tthis._allMenuIds.clear();\n\t\tthis._structureContextKeys.clear();\n\t\tthis._preconditionContextKeys.clear();\n\t\tthis._toggledContextKeys.clear();\n\n\t\tconst menuItems = this._sort(MenuRegistry.getMenuItems(this._id));\n\t\tlet group: MenuItemGroup | undefined;\n\n\t\tfor (const item of menuItems) {\n\t\t\t// group by groupId\n\t\t\tconst groupName = item.group || '';\n\t\t\tif (!group || group[0] !== groupName) {\n\t\t\t\tgroup = [groupName, []];\n\t\t\t\tthis._menuGroups.push(group);\n\t\t\t}\n\t\t\tgroup[1].push(item);\n\n\t\t\t// keep keys and submenu ids for eventing\n\t\t\tthis._collectContextKeysAndSubmenuIds(item);\n\t\t}\n\t\tthis._allMenuIds.add(this._id);\n\t}\n\n\tprotected _sort(menuItems: (IMenuItem | ISubmenuItem)[]) {\n\t\t// no sorting needed in snapshot\n\t\treturn menuItems;\n\t}\n\n\tprivate _collectContextKeysAndSubmenuIds(item: IMenuItem | ISubmenuItem): void {\n\n\t\tMenuInfoSnapshot._fillInKbExprKeys(item.when, this._structureContextKeys);\n\n\t\tif (isIMenuItem(item)) {\n\t\t\t// keep precondition keys for event if applicable\n\t\t\tif (item.command.precondition) {\n\t\t\t\tMenuInfoSnapshot._fillInKbExprKeys(item.command.precondition, this._preconditionContextKeys);\n\t\t\t}\n\t\t\t// keep toggled keys for event if applicable\n\t\t\tif (item.command.toggled) {\n\t\t\t\tconst toggledExpression: ContextKeyExpression = (item.command.toggled as { condition: ContextKeyExpression }).condition || item.command.toggled;\n\t\t\t\tMenuInfoSnapshot._fillInKbExprKeys(toggledExpression, this._toggledContextKeys);\n\t\t\t}\n\n\t\t} else if (this._collectContextKeysForSubmenus) {\n\t\t\t// recursively collect context keys from submenus so that this\n\t\t\t// menu fires events when context key changes affect submenus\n\t\t\tMenuRegistry.getMenuItems(item.submenu).forEach(this._collectContextKeysAndSubmenuIds, this);\n\n\t\t\tthis._allMenuIds.add(item.submenu);\n\t\t}\n\t}\n\n\tprivate static _fillInKbExprKeys(exp: ContextKeyExpression | undefined, set: Set<string>): void {\n\t\tif (exp) {\n\t\t\tfor (const key of exp.keys()) {\n\t\t\t\tset.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nclass MenuInfo extends MenuInfoSnapshot {\n\n\tconstructor(\n\t\t_id: MenuId,\n\t\tprivate readonly _hiddenStates: PersistedMenuHideState,\n\t\t_collectContextKeysForSubmenus: boolean,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(_id, _collectContextKeysForSubmenus);\n\t\tthis.refresh();\n\t}\n\n\tcreateActionGroups(options: IMenuActionOptions | undefined): [string, Array<MenuItemAction | SubmenuItemAction>][] {\n\t\tconst result: [string, Array<MenuItemAction | SubmenuItemAction>][] = [];\n\n\t\tfor (const group of this._menuGroups) {\n\t\t\tconst [id, items] = group;\n\n\t\t\tlet activeActions: Array<MenuItemAction | SubmenuItemAction> | undefined;\n\t\t\tfor (const item of items) {\n\t\t\t\tif (this._contextKeyService.contextMatchesRules(item.when)) {\n\t\t\t\t\tconst isMenuItem = isIMenuItem(item);\n\t\t\t\t\tif (isMenuItem) {\n\t\t\t\t\t\tthis._hiddenStates.setDefaultState(this._id, item.command.id, !!item.isHiddenByDefault);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst menuHide = createMenuHide(this._id, isMenuItem ? item.command : item, this._hiddenStates);\n\t\t\t\t\tif (isMenuItem) {\n\t\t\t\t\t\t// MenuItemAction\n\t\t\t\t\t\tconst menuKeybinding = createConfigureKeybindingAction(this._commandService, this._keybindingService, item.command.id, item.when);\n\t\t\t\t\t\t(activeActions ??= []).push(new MenuItemAction(item.command, item.alt, options, menuHide, menuKeybinding, this._contextKeyService, this._commandService));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// SubmenuItemAction\n\t\t\t\t\t\tconst groups = new MenuInfo(item.submenu, this._hiddenStates, this._collectContextKeysForSubmenus, this._commandService, this._keybindingService, this._contextKeyService).createActionGroups(options);\n\t\t\t\t\t\tconst submenuActions = Separator.join(...groups.map(g => g[1]));\n\t\t\t\t\t\tif (submenuActions.length > 0) {\n\t\t\t\t\t\t\t(activeActions ??= []).push(new SubmenuItemAction(item, menuHide, submenuActions));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (activeActions && activeActions.length > 0) {\n\t\t\t\tresult.push([id, activeActions]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected override _sort(menuItems: (IMenuItem | ISubmenuItem)[]): (IMenuItem | ISubmenuItem)[] {\n\t\treturn menuItems.sort(MenuInfo._compareMenuItems);\n\t}\n\n\tprivate static _compareMenuItems(a: IMenuItem | ISubmenuItem, b: IMenuItem | ISubmenuItem): number {\n\n\t\tconst aGroup = a.group;\n\t\tconst bGroup = b.group;\n\n\t\tif (aGroup !== bGroup) {\n\n\t\t\t// Falsy groups come last\n\t\t\tif (!aGroup) {\n\t\t\t\treturn 1;\n\t\t\t} else if (!bGroup) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// 'navigation' group comes first\n\t\t\tif (aGroup === 'navigation') {\n\t\t\t\treturn -1;\n\t\t\t} else if (bGroup === 'navigation') {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// lexical sort for groups\n\t\t\tconst value = aGroup.localeCompare(bGroup);\n\t\t\tif (value !== 0) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\n\t\t// sort on priority - default is 0\n\t\tconst aPrio = a.order || 0;\n\t\tconst bPrio = b.order || 0;\n\t\tif (aPrio < bPrio) {\n\t\t\treturn -1;\n\t\t} else if (aPrio > bPrio) {\n\t\t\treturn 1;\n\t\t}\n\n\t\t// sort on titles\n\t\treturn MenuInfo._compareTitles(\n\t\t\tisIMenuItem(a) ? a.command.title : a.title,\n\t\t\tisIMenuItem(b) ? b.command.title : b.title\n\t\t);\n\t}\n\n\tprivate static _compareTitles(a: string | ILocalizedString, b: string | ILocalizedString) {\n\t\tconst aStr = typeof a === 'string' ? a : a.original;\n\t\tconst bStr = typeof b === 'string' ? b : b.original;\n\t\treturn aStr.localeCompare(bStr);\n\t}\n}\n\nclass MenuImpl implements IMenu {\n\n\tprivate readonly _menuInfo: MenuInfo;\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate readonly _onDidChange: Emitter<IMenuChangeEvent>;\n\treadonly onDidChange: Event<IMenuChangeEvent>;\n\n\tconstructor(\n\t\tid: MenuId,\n\t\thiddenStates: PersistedMenuHideState,\n\t\toptions: Required<IMenuCreateOptions>,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tthis._menuInfo = new MenuInfo(id, hiddenStates, options.emitEventsForSubmenuChanges, commandService, keybindingService, contextKeyService);\n\n\t\t// Rebuild this menu whenever the menu registry reports an event for this MenuId.\n\t\t// This usually happen while code and extensions are loaded and affects the over\n\t\t// structure of the menu\n\t\tconst rebuildMenuSoon = new RunOnceScheduler(() => {\n\t\t\tthis._menuInfo.refresh();\n\t\t\tthis._onDidChange.fire({ menu: this, isStructuralChange: true, isEnablementChange: true, isToggleChange: true });\n\t\t}, options.eventDebounceDelay);\n\t\tthis._disposables.add(rebuildMenuSoon);\n\t\tthis._disposables.add(MenuRegistry.onDidChangeMenu(e => {\n\t\t\tfor (const id of this._menuInfo.allMenuIds) {\n\t\t\t\tif (e.has(id)) {\n\t\t\t\t\trebuildMenuSoon.schedule();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// When context keys or storage state changes we need to check if the menu also has changed. However,\n\t\t// we only do that when someone listens on this menu because (1) these events are\n\t\t// firing often and (2) menu are often leaked\n\t\tconst lazyListener = this._disposables.add(new DisposableStore());\n\n\t\tconst merge = (events: IMenuChangeEvent[]): IMenuChangeEvent => {\n\n\t\t\tlet isStructuralChange = false;\n\t\t\tlet isEnablementChange = false;\n\t\t\tlet isToggleChange = false;\n\n\t\t\tfor (const item of events) {\n\t\t\t\tisStructuralChange = isStructuralChange || item.isStructuralChange;\n\t\t\t\tisEnablementChange = isEnablementChange || item.isEnablementChange;\n\t\t\t\tisToggleChange = isToggleChange || item.isToggleChange;\n\t\t\t\tif (isStructuralChange && isEnablementChange && isToggleChange) {\n\t\t\t\t\t// everything is TRUE, no need to continue iterating\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn { menu: this, isStructuralChange, isEnablementChange, isToggleChange };\n\t\t};\n\n\t\tconst startLazyListener = () => {\n\n\t\t\tlazyListener.add(contextKeyService.onDidChangeContext(e => {\n\t\t\t\tconst isStructuralChange = e.affectsSome(this._menuInfo.structureContextKeys);\n\t\t\t\tconst isEnablementChange = e.affectsSome(this._menuInfo.preconditionContextKeys);\n\t\t\t\tconst isToggleChange = e.affectsSome(this._menuInfo.toggledContextKeys);\n\t\t\t\tif (isStructuralChange || isEnablementChange || isToggleChange) {\n\t\t\t\t\tthis._onDidChange.fire({ menu: this, isStructuralChange, isEnablementChange, isToggleChange });\n\t\t\t\t}\n\t\t\t}));\n\t\t\tlazyListener.add(hiddenStates.onDidChange(e => {\n\t\t\t\tthis._onDidChange.fire({ menu: this, isStructuralChange: true, isEnablementChange: false, isToggleChange: false });\n\t\t\t}));\n\t\t};\n\n\t\tthis._onDidChange = new DebounceEmitter({\n\t\t\t// start/stop context key listener\n\t\t\tonWillAddFirstListener: startLazyListener,\n\t\t\tonDidRemoveLastListener: lazyListener.clear.bind(lazyListener),\n\t\t\tdelay: options.eventDebounceDelay,\n\t\t\tmerge\n\t\t});\n\t\tthis.onDidChange = this._onDidChange.event;\n\t}\n\n\tgetActions(options?: IMenuActionOptions | undefined): [string, (MenuItemAction | SubmenuItemAction)[]][] {\n\t\treturn this._menuInfo.createActionGroups(options);\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._onDidChange.dispose();\n\t}\n}\n\nfunction createMenuHide(menu: MenuId, command: ICommandAction | ISubmenuItem, states: PersistedMenuHideState): IMenuItemHide {\n\n\tconst id = isISubmenuItem(command) ? command.submenu.id : command.id;\n\tconst title = typeof command.title === 'string' ? command.title : command.title.value;\n\n\tconst hide = toAction({\n\t\tid: `hide/${menu.id}/${id}`,\n\t\tlabel: localize('hide.label', 'Hide \\'{0}\\'', title),\n\t\trun() { states.updateHidden(menu, id, true); }\n\t});\n\n\tconst toggle = toAction({\n\t\tid: `toggle/${menu.id}/${id}`,\n\t\tlabel: title,\n\t\tget checked() { return !states.isHidden(menu, id); },\n\t\trun() { states.updateHidden(menu, id, !!this.checked); }\n\t});\n\n\treturn {\n\t\thide,\n\t\ttoggle,\n\t\tget isHidden() { return !toggle.checked; },\n\t};\n}\n\nexport function createConfigureKeybindingAction(commandService: ICommandService, keybindingService: IKeybindingService, commandId: string, when: ContextKeyExpression | undefined = undefined, enabled = true): IAction {\n\treturn toAction({\n\t\tid: `configureKeybinding/${commandId}`,\n\t\tlabel: localize('configure keybinding', \"Configure Keybinding\"),\n\t\tenabled,\n\t\trun() {\n\t\t\t// Only set the when clause when there is no keybinding\n\t\t\t// It is possible that the action and the keybinding have different when clauses\n\t\t\tconst hasKeybinding = !!keybindingService.lookupKeybinding(commandId); // This may only be called inside the `run()` method as it can be expensive on startup. #210529\n\t\t\tconst whenValue = !hasKeybinding && when ? when.serialize() : undefined;\n\t\t\tcommandService.executeCommand('workbench.action.openGlobalKeybindings', `@command:${commandId}` + (whenValue ? ` +when:${whenValue}` : ''));\n\t\t}\n\t});\n}\n"],
  "mappings": "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",
  "names": ["id"]
}
