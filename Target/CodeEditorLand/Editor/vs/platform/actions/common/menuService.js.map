{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/actions/common/menuService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype IAction,\n\tSeparator,\n\ttoAction,\n} from \"../../../base/common/actions.js\";\nimport { removeFastWithoutKeepingOrder } from \"../../../base/common/arrays.js\";\nimport { RunOnceScheduler } from \"../../../base/common/async.js\";\nimport {\n\tDebounceEmitter,\n\tEmitter,\n\ttype Event,\n} from \"../../../base/common/event.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../nls.js\";\nimport type {\n\tICommandAction,\n\tILocalizedString,\n} from \"../../action/common/action.js\";\nimport { ICommandService } from \"../../commands/common/commands.js\";\nimport {\n\ttype ContextKeyExpression,\n\tIContextKeyService,\n} from \"../../contextkey/common/contextkey.js\";\nimport { IKeybindingService } from \"../../keybinding/common/keybinding.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../storage/common/storage.js\";\nimport {\n\ttype IMenu,\n\ttype IMenuActionOptions,\n\ttype IMenuChangeEvent,\n\ttype IMenuCreateOptions,\n\ttype IMenuItem,\n\ttype IMenuItemHide,\n\ttype IMenuService,\n\ttype ISubmenuItem,\n\ttype MenuId,\n\tMenuItemAction,\n\tMenuRegistry,\n\tSubmenuItemAction,\n\tisIMenuItem,\n\tisISubmenuItem,\n} from \"./actions.js\";\n\nexport class MenuService implements IMenuService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _hiddenStates: PersistedMenuHideState;\n\n\tconstructor(\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tthis._hiddenStates = new PersistedMenuHideState(storageService);\n\t}\n\n\tcreateMenu(\n\t\tid: MenuId,\n\t\tcontextKeyService: IContextKeyService,\n\t\toptions?: IMenuCreateOptions,\n\t): IMenu {\n\t\treturn new MenuImpl(\n\t\t\tid,\n\t\t\tthis._hiddenStates,\n\t\t\t{\n\t\t\t\temitEventsForSubmenuChanges: false,\n\t\t\t\teventDebounceDelay: 50,\n\t\t\t\t...options,\n\t\t\t},\n\t\t\tthis._commandService,\n\t\t\tthis._keybindingService,\n\t\t\tcontextKeyService,\n\t\t);\n\t}\n\n\tgetMenuActions(\n\t\tid: MenuId,\n\t\tcontextKeyService: IContextKeyService,\n\t\toptions?: IMenuActionOptions,\n\t): [string, Array<MenuItemAction | SubmenuItemAction>][] {\n\t\tconst menu = new MenuImpl(\n\t\t\tid,\n\t\t\tthis._hiddenStates,\n\t\t\t{\n\t\t\t\temitEventsForSubmenuChanges: false,\n\t\t\t\teventDebounceDelay: 50,\n\t\t\t\t...options,\n\t\t\t},\n\t\t\tthis._commandService,\n\t\t\tthis._keybindingService,\n\t\t\tcontextKeyService,\n\t\t);\n\t\tconst actions = menu.getActions(options);\n\t\tmenu.dispose();\n\t\treturn actions;\n\t}\n\n\tgetMenuContexts(id: MenuId): ReadonlySet<string> {\n\t\tconst menuInfo = new MenuInfoSnapshot(id, false);\n\t\treturn new Set<string>([\n\t\t\t...menuInfo.structureContextKeys,\n\t\t\t...menuInfo.preconditionContextKeys,\n\t\t\t...menuInfo.toggledContextKeys,\n\t\t]);\n\t}\n\n\tresetHiddenStates(ids?: MenuId[]): void {\n\t\tthis._hiddenStates.reset(ids);\n\t}\n}\n\nclass PersistedMenuHideState {\n\tprivate static readonly _key = \"menu.hiddenCommands\";\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _onDidChange = new Emitter<void>();\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate _ignoreChangeEvent = false;\n\tprivate _data: Record<string, string[] | undefined>;\n\n\tprivate _hiddenByDefaultCache = new Map<string, boolean>();\n\n\tconstructor(@IStorageService private readonly _storageService: IStorageService) {\n\t\ttry {\n\t\t\tconst raw = _storageService.get(PersistedMenuHideState._key, StorageScope.PROFILE, '{}');\n\t\t\tthis._data = JSON.parse(raw);\n\t\t} catch (err) {\n\t\t\tthis._data = Object.create(null);\n\t\t}\n\n\t\tthis._disposables.add(_storageService.onDidChangeValue(StorageScope.PROFILE, PersistedMenuHideState._key, this._disposables)(() => {\n\t\t\tif (!this._ignoreChangeEvent) {\n\t\t\t\ttry {\n\t\t\t\t\tconst raw = _storageService.get(PersistedMenuHideState._key, StorageScope.PROFILE, '{}');\n\t\t\t\t\tthis._data = JSON.parse(raw);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log('FAILED to read storage after UPDATE', err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onDidChange.fire();\n\t\t}));\n\t}\n\n\tdispose() {\n\t\tthis._onDidChange.dispose();\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _isHiddenByDefault(menu: MenuId, commandId: string) {\n\t\treturn (\n\t\t\tthis._hiddenByDefaultCache.get(`${menu.id}/${commandId}`) ?? false\n\t\t);\n\t}\n\n\tsetDefaultState(menu: MenuId, commandId: string, hidden: boolean): void {\n\t\tthis._hiddenByDefaultCache.set(`${menu.id}/${commandId}`, hidden);\n\t}\n\n\tisHidden(menu: MenuId, commandId: string): boolean {\n\t\tconst hiddenByDefault = this._isHiddenByDefault(menu, commandId);\n\t\tconst state = this._data[menu.id]?.includes(commandId) ?? false;\n\t\treturn hiddenByDefault ? !state : state;\n\t}\n\n\tupdateHidden(menu: MenuId, commandId: string, hidden: boolean): void {\n\t\tconst hiddenByDefault = this._isHiddenByDefault(menu, commandId);\n\t\tif (hiddenByDefault) {\n\t\t\thidden = !hidden;\n\t\t}\n\t\tconst entries = this._data[menu.id];\n\t\tif (hidden) {\n\t\t\t// add unless already added\n\t\t\tif (entries) {\n\t\t\t\tconst idx = entries.indexOf(commandId);\n\t\t\t\tif (idx < 0) {\n\t\t\t\t\tentries.push(commandId);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._data[menu.id] = [commandId];\n\t\t\t}\n\t\t} else {\n\t\t\t// remove and cleanup\n\t\t\tif (entries) {\n\t\t\t\tconst idx = entries.indexOf(commandId);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tremoveFastWithoutKeepingOrder(entries, idx);\n\t\t\t\t}\n\t\t\t\tif (entries.length === 0) {\n\t\t\t\t\tdelete this._data[menu.id];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._persist();\n\t}\n\n\treset(menus?: MenuId[]): void {\n\t\tif (menus === undefined) {\n\t\t\t// reset all\n\t\t\tthis._data = Object.create(null);\n\t\t\tthis._persist();\n\t\t} else {\n\t\t\t// reset only for a specific menu\n\t\t\tfor (const { id } of menus) {\n\t\t\t\tif (this._data[id]) {\n\t\t\t\t\tdelete this._data[id];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._persist();\n\t\t}\n\t}\n\n\tprivate _persist(): void {\n\t\ttry {\n\t\t\tthis._ignoreChangeEvent = true;\n\t\t\tconst raw = JSON.stringify(this._data);\n\t\t\tthis._storageService.store(\n\t\t\t\tPersistedMenuHideState._key,\n\t\t\t\traw,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t} finally {\n\t\t\tthis._ignoreChangeEvent = false;\n\t\t}\n\t}\n}\n\ntype MenuItemGroup = [string, Array<IMenuItem | ISubmenuItem>];\n\nclass MenuInfoSnapshot {\n\tprotected _menuGroups: MenuItemGroup[] = [];\n\tprivate _allMenuIds: Set<MenuId> = new Set();\n\tprivate _structureContextKeys: Set<string> = new Set();\n\tprivate _preconditionContextKeys: Set<string> = new Set();\n\tprivate _toggledContextKeys: Set<string> = new Set();\n\n\tconstructor(\n\t\tprotected readonly _id: MenuId,\n\t\tprotected readonly _collectContextKeysForSubmenus: boolean,\n\t) {\n\t\tthis.refresh();\n\t}\n\n\tget allMenuIds(): ReadonlySet<MenuId> {\n\t\treturn this._allMenuIds;\n\t}\n\n\tget structureContextKeys(): ReadonlySet<string> {\n\t\treturn this._structureContextKeys;\n\t}\n\n\tget preconditionContextKeys(): ReadonlySet<string> {\n\t\treturn this._preconditionContextKeys;\n\t}\n\n\tget toggledContextKeys(): ReadonlySet<string> {\n\t\treturn this._toggledContextKeys;\n\t}\n\n\trefresh(): void {\n\t\t// reset\n\t\tthis._menuGroups.length = 0;\n\t\tthis._allMenuIds.clear();\n\t\tthis._structureContextKeys.clear();\n\t\tthis._preconditionContextKeys.clear();\n\t\tthis._toggledContextKeys.clear();\n\n\t\tconst menuItems = this._sort(MenuRegistry.getMenuItems(this._id));\n\t\tlet group: MenuItemGroup | undefined;\n\n\t\tfor (const item of menuItems) {\n\t\t\t// group by groupId\n\t\t\tconst groupName = item.group || \"\";\n\t\t\tif (!group || group[0] !== groupName) {\n\t\t\t\tgroup = [groupName, []];\n\t\t\t\tthis._menuGroups.push(group);\n\t\t\t}\n\t\t\tgroup[1].push(item);\n\n\t\t\t// keep keys and submenu ids for eventing\n\t\t\tthis._collectContextKeysAndSubmenuIds(item);\n\t\t}\n\t\tthis._allMenuIds.add(this._id);\n\t}\n\n\tprotected _sort(menuItems: (IMenuItem | ISubmenuItem)[]) {\n\t\t// no sorting needed in snapshot\n\t\treturn menuItems;\n\t}\n\n\tprivate _collectContextKeysAndSubmenuIds(\n\t\titem: IMenuItem | ISubmenuItem,\n\t): void {\n\t\tMenuInfoSnapshot._fillInKbExprKeys(\n\t\t\titem.when,\n\t\t\tthis._structureContextKeys,\n\t\t);\n\n\t\tif (isIMenuItem(item)) {\n\t\t\t// keep precondition keys for event if applicable\n\t\t\tif (item.command.precondition) {\n\t\t\t\tMenuInfoSnapshot._fillInKbExprKeys(\n\t\t\t\t\titem.command.precondition,\n\t\t\t\t\tthis._preconditionContextKeys,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// keep toggled keys for event if applicable\n\t\t\tif (item.command.toggled) {\n\t\t\t\tconst toggledExpression: ContextKeyExpression =\n\t\t\t\t\t(\n\t\t\t\t\t\titem.command.toggled as {\n\t\t\t\t\t\t\tcondition: ContextKeyExpression;\n\t\t\t\t\t\t}\n\t\t\t\t\t).condition || item.command.toggled;\n\t\t\t\tMenuInfoSnapshot._fillInKbExprKeys(\n\t\t\t\t\ttoggledExpression,\n\t\t\t\t\tthis._toggledContextKeys,\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (this._collectContextKeysForSubmenus) {\n\t\t\t// recursively collect context keys from submenus so that this\n\t\t\t// menu fires events when context key changes affect submenus\n\t\t\tMenuRegistry.getMenuItems(item.submenu).forEach(\n\t\t\t\tthis._collectContextKeysAndSubmenuIds,\n\t\t\t\tthis,\n\t\t\t);\n\n\t\t\tthis._allMenuIds.add(item.submenu);\n\t\t}\n\t}\n\n\tprivate static _fillInKbExprKeys(\n\t\texp: ContextKeyExpression | undefined,\n\t\tset: Set<string>,\n\t): void {\n\t\tif (exp) {\n\t\t\tfor (const key of exp.keys()) {\n\t\t\t\tset.add(key);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass MenuInfo extends MenuInfoSnapshot {\n\tconstructor(\n\t\t_id: MenuId,\n\t\tprivate readonly _hiddenStates: PersistedMenuHideState,\n\t\t_collectContextKeysForSubmenus: boolean,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(_id, _collectContextKeysForSubmenus);\n\t\tthis.refresh();\n\t}\n\n\tcreateActionGroups(\n\t\toptions: IMenuActionOptions | undefined,\n\t): [string, Array<MenuItemAction | SubmenuItemAction>][] {\n\t\tconst result: [string, Array<MenuItemAction | SubmenuItemAction>][] =\n\t\t\t[];\n\n\t\tfor (const group of this._menuGroups) {\n\t\t\tconst [id, items] = group;\n\n\t\t\tlet activeActions:\n\t\t\t\t| Array<MenuItemAction | SubmenuItemAction>\n\t\t\t\t| undefined;\n\t\t\tfor (const item of items) {\n\t\t\t\tif (this._contextKeyService.contextMatchesRules(item.when)) {\n\t\t\t\t\tconst isMenuItem = isIMenuItem(item);\n\t\t\t\t\tif (isMenuItem) {\n\t\t\t\t\t\tthis._hiddenStates.setDefaultState(\n\t\t\t\t\t\t\tthis._id,\n\t\t\t\t\t\t\titem.command.id,\n\t\t\t\t\t\t\t!!item.isHiddenByDefault,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst menuHide = createMenuHide(\n\t\t\t\t\t\tthis._id,\n\t\t\t\t\t\tisMenuItem ? item.command : item,\n\t\t\t\t\t\tthis._hiddenStates,\n\t\t\t\t\t);\n\t\t\t\t\tif (isMenuItem) {\n\t\t\t\t\t\t// MenuItemAction\n\t\t\t\t\t\tconst menuKeybinding = createConfigureKeybindingAction(\n\t\t\t\t\t\t\tthis._commandService,\n\t\t\t\t\t\t\tthis._keybindingService,\n\t\t\t\t\t\t\titem.command.id,\n\t\t\t\t\t\t\titem.when,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t(activeActions ??= []).push(\n\t\t\t\t\t\t\tnew MenuItemAction(\n\t\t\t\t\t\t\t\titem.command,\n\t\t\t\t\t\t\t\titem.alt,\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\tmenuHide,\n\t\t\t\t\t\t\t\tmenuKeybinding,\n\t\t\t\t\t\t\t\tthis._contextKeyService,\n\t\t\t\t\t\t\t\tthis._commandService,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// SubmenuItemAction\n\t\t\t\t\t\tconst groups = new MenuInfo(\n\t\t\t\t\t\t\titem.submenu,\n\t\t\t\t\t\t\tthis._hiddenStates,\n\t\t\t\t\t\t\tthis._collectContextKeysForSubmenus,\n\t\t\t\t\t\t\tthis._commandService,\n\t\t\t\t\t\t\tthis._keybindingService,\n\t\t\t\t\t\t\tthis._contextKeyService,\n\t\t\t\t\t\t).createActionGroups(options);\n\t\t\t\t\t\tconst submenuActions = Separator.join(\n\t\t\t\t\t\t\t...groups.map((g) => g[1]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (submenuActions.length > 0) {\n\t\t\t\t\t\t\t(activeActions ??= []).push(\n\t\t\t\t\t\t\t\tnew SubmenuItemAction(\n\t\t\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\t\t\tmenuHide,\n\t\t\t\t\t\t\t\t\tsubmenuActions,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (activeActions && activeActions.length > 0) {\n\t\t\t\tresult.push([id, activeActions]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected override _sort(\n\t\tmenuItems: (IMenuItem | ISubmenuItem)[],\n\t): (IMenuItem | ISubmenuItem)[] {\n\t\treturn menuItems.sort(MenuInfo._compareMenuItems);\n\t}\n\n\tprivate static _compareMenuItems(\n\t\ta: IMenuItem | ISubmenuItem,\n\t\tb: IMenuItem | ISubmenuItem,\n\t): number {\n\t\tconst aGroup = a.group;\n\t\tconst bGroup = b.group;\n\n\t\tif (aGroup !== bGroup) {\n\t\t\t// Falsy groups come last\n\t\t\tif (!aGroup) {\n\t\t\t\treturn 1;\n\t\t\t} else if (!bGroup) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// 'navigation' group comes first\n\t\t\tif (aGroup === \"navigation\") {\n\t\t\t\treturn -1;\n\t\t\t} else if (bGroup === \"navigation\") {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// lexical sort for groups\n\t\t\tconst value = aGroup.localeCompare(bGroup);\n\t\t\tif (value !== 0) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\n\t\t// sort on priority - default is 0\n\t\tconst aPrio = a.order || 0;\n\t\tconst bPrio = b.order || 0;\n\t\tif (aPrio < bPrio) {\n\t\t\treturn -1;\n\t\t} else if (aPrio > bPrio) {\n\t\t\treturn 1;\n\t\t}\n\n\t\t// sort on titles\n\t\treturn MenuInfo._compareTitles(\n\t\t\tisIMenuItem(a) ? a.command.title : a.title,\n\t\t\tisIMenuItem(b) ? b.command.title : b.title,\n\t\t);\n\t}\n\n\tprivate static _compareTitles(\n\t\ta: string | ILocalizedString,\n\t\tb: string | ILocalizedString,\n\t) {\n\t\tconst aStr = typeof a === \"string\" ? a : a.original;\n\t\tconst bStr = typeof b === \"string\" ? b : b.original;\n\t\treturn aStr.localeCompare(bStr);\n\t}\n}\n\nclass MenuImpl implements IMenu {\n\tprivate readonly _menuInfo: MenuInfo;\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate readonly _onDidChange: Emitter<IMenuChangeEvent>;\n\treadonly onDidChange: Event<IMenuChangeEvent>;\n\n\tconstructor(\n\t\tid: MenuId,\n\t\thiddenStates: PersistedMenuHideState,\n\t\toptions: Required<IMenuCreateOptions>,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._menuInfo = new MenuInfo(\n\t\t\tid,\n\t\t\thiddenStates,\n\t\t\toptions.emitEventsForSubmenuChanges,\n\t\t\tcommandService,\n\t\t\tkeybindingService,\n\t\t\tcontextKeyService,\n\t\t);\n\n\t\t// Rebuild this menu whenever the menu registry reports an event for this MenuId.\n\t\t// This usually happen while code and extensions are loaded and affects the over\n\t\t// structure of the menu\n\t\tconst rebuildMenuSoon = new RunOnceScheduler(() => {\n\t\t\tthis._menuInfo.refresh();\n\t\t\tthis._onDidChange.fire({\n\t\t\t\tmenu: this,\n\t\t\t\tisStructuralChange: true,\n\t\t\t\tisEnablementChange: true,\n\t\t\t\tisToggleChange: true,\n\t\t\t});\n\t\t}, options.eventDebounceDelay);\n\t\tthis._disposables.add(rebuildMenuSoon);\n\t\tthis._disposables.add(\n\t\t\tMenuRegistry.onDidChangeMenu((e) => {\n\t\t\t\tfor (const id of this._menuInfo.allMenuIds) {\n\t\t\t\t\tif (e.has(id)) {\n\t\t\t\t\t\trebuildMenuSoon.schedule();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// When context keys or storage state changes we need to check if the menu also has changed. However,\n\t\t// we only do that when someone listens on this menu because (1) these events are\n\t\t// firing often and (2) menu are often leaked\n\t\tconst lazyListener = this._disposables.add(new DisposableStore());\n\n\t\tconst merge = (events: IMenuChangeEvent[]): IMenuChangeEvent => {\n\t\t\tlet isStructuralChange = false;\n\t\t\tlet isEnablementChange = false;\n\t\t\tlet isToggleChange = false;\n\n\t\t\tfor (const item of events) {\n\t\t\t\tisStructuralChange =\n\t\t\t\t\tisStructuralChange || item.isStructuralChange;\n\t\t\t\tisEnablementChange =\n\t\t\t\t\tisEnablementChange || item.isEnablementChange;\n\t\t\t\tisToggleChange = isToggleChange || item.isToggleChange;\n\t\t\t\tif (\n\t\t\t\t\tisStructuralChange &&\n\t\t\t\t\tisEnablementChange &&\n\t\t\t\t\tisToggleChange\n\t\t\t\t) {\n\t\t\t\t\t// everything is TRUE, no need to continue iterating\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tmenu: this,\n\t\t\t\tisStructuralChange,\n\t\t\t\tisEnablementChange,\n\t\t\t\tisToggleChange,\n\t\t\t};\n\t\t};\n\n\t\tconst startLazyListener = () => {\n\t\t\tlazyListener.add(\n\t\t\t\tcontextKeyService.onDidChangeContext((e) => {\n\t\t\t\t\tconst isStructuralChange = e.affectsSome(\n\t\t\t\t\t\tthis._menuInfo.structureContextKeys,\n\t\t\t\t\t);\n\t\t\t\t\tconst isEnablementChange = e.affectsSome(\n\t\t\t\t\t\tthis._menuInfo.preconditionContextKeys,\n\t\t\t\t\t);\n\t\t\t\t\tconst isToggleChange = e.affectsSome(\n\t\t\t\t\t\tthis._menuInfo.toggledContextKeys,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\tisStructuralChange ||\n\t\t\t\t\t\tisEnablementChange ||\n\t\t\t\t\t\tisToggleChange\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._onDidChange.fire({\n\t\t\t\t\t\t\tmenu: this,\n\t\t\t\t\t\t\tisStructuralChange,\n\t\t\t\t\t\t\tisEnablementChange,\n\t\t\t\t\t\t\tisToggleChange,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t\tlazyListener.add(\n\t\t\t\thiddenStates.onDidChange((e) => {\n\t\t\t\t\tthis._onDidChange.fire({\n\t\t\t\t\t\tmenu: this,\n\t\t\t\t\t\tisStructuralChange: true,\n\t\t\t\t\t\tisEnablementChange: false,\n\t\t\t\t\t\tisToggleChange: false,\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t);\n\t\t};\n\n\t\tthis._onDidChange = new DebounceEmitter({\n\t\t\t// start/stop context key listener\n\t\t\tonWillAddFirstListener: startLazyListener,\n\t\t\tonDidRemoveLastListener: lazyListener.clear.bind(lazyListener),\n\t\t\tdelay: options.eventDebounceDelay,\n\t\t\tmerge,\n\t\t});\n\t\tthis.onDidChange = this._onDidChange.event;\n\t}\n\n\tgetActions(\n\t\toptions?: IMenuActionOptions | undefined,\n\t): [string, (MenuItemAction | SubmenuItemAction)[]][] {\n\t\treturn this._menuInfo.createActionGroups(options);\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._onDidChange.dispose();\n\t}\n}\n\nfunction createMenuHide(\n\tmenu: MenuId,\n\tcommand: ICommandAction | ISubmenuItem,\n\tstates: PersistedMenuHideState,\n): IMenuItemHide {\n\tconst id = isISubmenuItem(command) ? command.submenu.id : command.id;\n\tconst title =\n\t\ttypeof command.title === \"string\" ? command.title : command.title.value;\n\n\tconst hide = toAction({\n\t\tid: `hide/${menu.id}/${id}`,\n\t\tlabel: localize(\"hide.label\", \"Hide '{0}'\", title),\n\t\trun() {\n\t\t\tstates.updateHidden(menu, id, true);\n\t\t},\n\t});\n\n\tconst toggle = toAction({\n\t\tid: `toggle/${menu.id}/${id}`,\n\t\tlabel: title,\n\t\tget checked() {\n\t\t\treturn !states.isHidden(menu, id);\n\t\t},\n\t\trun() {\n\t\t\tstates.updateHidden(menu, id, !!this.checked);\n\t\t},\n\t});\n\n\treturn {\n\t\thide,\n\t\ttoggle,\n\t\tget isHidden() {\n\t\t\treturn !toggle.checked;\n\t\t},\n\t};\n}\n\nexport function createConfigureKeybindingAction(\n\tcommandService: ICommandService,\n\tkeybindingService: IKeybindingService,\n\tcommandId: string,\n\twhen: ContextKeyExpression | undefined = undefined,\n\tenabled = true,\n): IAction {\n\treturn toAction({\n\t\tid: `configureKeybinding/${commandId}`,\n\t\tlabel: localize(\"configure keybinding\", \"Configure Keybinding\"),\n\t\tenabled,\n\t\trun() {\n\t\t\t// Only set the when clause when there is no keybinding\n\t\t\t// It is possible that the action and the keybinding have different when clauses\n\t\t\tconst hasKeybinding =\n\t\t\t\t!!keybindingService.lookupKeybinding(commandId); // This may only be called inside the `run()` method as it can be expensive on startup. #210529\n\t\t\tconst whenValue =\n\t\t\t\t!hasKeybinding && when ? when.serialize() : undefined;\n\t\t\tcommandService.executeCommand(\n\t\t\t\t\"workbench.action.openGlobalKeybindings\",\n\t\t\t\t`@command:${commandId}` +\n\t\t\t\t\t(whenValue ? ` +when:${whenValue}` : \"\"),\n\t\t\t);\n\t\t},\n\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AACP,SAAS,qCAAqC;AAC9C,SAAS,wBAAwB;AACjC;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AACP,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AAKzB,SAAS,uBAAuB;AAChC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,0BAA0B;AACnC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAUC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEA,IAAM,cAAN,MAA0C;AAAA,EAKhD,YACmC,iBACG,oBACpB,gBAChB;AAHiC;AACG;AAGrC,SAAK,gBAAgB,IAAI,uBAAuB,cAAc;AAAA,EAC/D;AAAA,EA9DD,OAmDiD;AAAA;AAAA;AAAA,EAG/B;AAAA,EAUjB,WACC,IACA,mBACA,SACQ;AACR,WAAO,IAAI;AAAA,MACV;AAAA,MACA,KAAK;AAAA,MACL;AAAA,QACC,6BAA6B;AAAA,QAC7B,oBAAoB;AAAA,QACpB,GAAG;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,IACD;AAAA,EACD;AAAA,EAEA,eACC,IACA,mBACA,SACwD;AACxD,UAAM,OAAO,IAAI;AAAA,MAChB;AAAA,MACA,KAAK;AAAA,MACL;AAAA,QACC,6BAA6B;AAAA,QAC7B,oBAAoB;AAAA,QACpB,GAAG;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,IACD;AACA,UAAM,UAAU,KAAK,WAAW,OAAO;AACvC,SAAK,QAAQ;AACb,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB,IAAiC;AAChD,UAAM,WAAW,IAAI,iBAAiB,IAAI,KAAK;AAC/C,WAAO,oBAAI,IAAY;AAAA,MACtB,GAAG,SAAS;AAAA,MACZ,GAAG,SAAS;AAAA,MACZ,GAAG,SAAS;AAAA,IACb,CAAC;AAAA,EACF;AAAA,EAEA,kBAAkB,KAAsB;AACvC,SAAK,cAAc,MAAM,GAAG;AAAA,EAC7B;AACD;AAlEa,cAAN;AAAA,EAMJ;AAAA,EACA;AAAA,EACA;AAAA,GARU;AAoEb,IAAM,yBAAN,MAA6B;AAAA,EAY5B,YAA8C,iBAAkC;AAAlC;AAC7C,QAAI;AACH,YAAM,MAAM,gBAAgB,IAAI,uBAAuB,MAAM,aAAa,SAAS,IAAI;AACvF,WAAK,QAAQ,KAAK,MAAM,GAAG;AAAA,IAC5B,SAAS,KAAK;AACb,WAAK,QAAQ,uBAAO,OAAO,IAAI;AAAA,IAChC;AAEA,SAAK,aAAa,IAAI,gBAAgB,iBAAiB,aAAa,SAAS,uBAAuB,MAAM,KAAK,YAAY,EAAE,MAAM;AAClI,UAAI,CAAC,KAAK,oBAAoB;AAC7B,YAAI;AACH,gBAAM,MAAM,gBAAgB,IAAI,uBAAuB,MAAM,aAAa,SAAS,IAAI;AACvF,eAAK,QAAQ,KAAK,MAAM,GAAG;AAAA,QAC5B,SAAS,KAAK;AACb,kBAAQ,IAAI,uCAAuC,GAAG;AAAA,QACvD;AAAA,MACD;AACA,WAAK,aAAa,KAAK;AAAA,IACxB,CAAC,CAAC;AAAA,EACH;AAAA,EAtJD,OAuH6B;AAAA;AAAA;AAAA,EAC5B,OAAwB,OAAO;AAAA,EAEd,eAAe,IAAI,gBAAgB;AAAA,EACnC,eAAe,IAAI,QAAc;AAAA,EACzC,cAA2B,KAAK,aAAa;AAAA,EAE9C,qBAAqB;AAAA,EACrB;AAAA,EAEA,wBAAwB,oBAAI,IAAqB;AAAA,EAuBzD,UAAU;AACT,SAAK,aAAa,QAAQ;AAC1B,SAAK,aAAa,QAAQ;AAAA,EAC3B;AAAA,EAEQ,mBAAmB,MAAc,WAAmB;AAC3D,WACC,KAAK,sBAAsB,IAAI,GAAG,KAAK,EAAE,IAAI,SAAS,EAAE,KAAK;AAAA,EAE/D;AAAA,EAEA,gBAAgB,MAAc,WAAmB,QAAuB;AACvE,SAAK,sBAAsB,IAAI,GAAG,KAAK,EAAE,IAAI,SAAS,IAAI,MAAM;AAAA,EACjE;AAAA,EAEA,SAAS,MAAc,WAA4B;AAClD,UAAM,kBAAkB,KAAK,mBAAmB,MAAM,SAAS;AAC/D,UAAM,QAAQ,KAAK,MAAM,KAAK,EAAE,GAAG,SAAS,SAAS,KAAK;AAC1D,WAAO,kBAAkB,CAAC,QAAQ;AAAA,EACnC;AAAA,EAEA,aAAa,MAAc,WAAmB,QAAuB;AACpE,UAAM,kBAAkB,KAAK,mBAAmB,MAAM,SAAS;AAC/D,QAAI,iBAAiB;AACpB,eAAS,CAAC;AAAA,IACX;AACA,UAAM,UAAU,KAAK,MAAM,KAAK,EAAE;AAClC,QAAI,QAAQ;AAEX,UAAI,SAAS;AACZ,cAAM,MAAM,QAAQ,QAAQ,SAAS;AACrC,YAAI,MAAM,GAAG;AACZ,kBAAQ,KAAK,SAAS;AAAA,QACvB;AAAA,MACD,OAAO;AACN,aAAK,MAAM,KAAK,EAAE,IAAI,CAAC,SAAS;AAAA,MACjC;AAAA,IACD,OAAO;AAEN,UAAI,SAAS;AACZ,cAAM,MAAM,QAAQ,QAAQ,SAAS;AACrC,YAAI,OAAO,GAAG;AACb,wCAA8B,SAAS,GAAG;AAAA,QAC3C;AACA,YAAI,QAAQ,WAAW,GAAG;AACzB,iBAAO,KAAK,MAAM,KAAK,EAAE;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AACA,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,MAAM,OAAwB;AAC7B,QAAI,UAAU,QAAW;AAExB,WAAK,QAAQ,uBAAO,OAAO,IAAI;AAC/B,WAAK,SAAS;AAAA,IACf,OAAO;AAEN,iBAAW,EAAE,GAAG,KAAK,OAAO;AAC3B,YAAI,KAAK,MAAM,EAAE,GAAG;AACnB,iBAAO,KAAK,MAAM,EAAE;AAAA,QACrB;AAAA,MACD;AACA,WAAK,SAAS;AAAA,IACf;AAAA,EACD;AAAA,EAEQ,WAAiB;AACxB,QAAI;AACH,WAAK,qBAAqB;AAC1B,YAAM,MAAM,KAAK,UAAU,KAAK,KAAK;AACrC,WAAK,gBAAgB;AAAA,QACpB,uBAAuB;AAAA,QACvB;AAAA,QACA,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD,UAAE;AACD,WAAK,qBAAqB;AAAA,IAC3B;AAAA,EACD;AACD;AAnHM,yBAAN;AAAA,EAYc;AAAA,GAZR;AAuHN,MAAM,iBAAiB;AAAA,EAOtB,YACoB,KACA,gCAClB;AAFkB;AACA;AAEnB,SAAK,QAAQ;AAAA,EACd;AAAA,EA1PD,OA8OuB;AAAA;AAAA;AAAA,EACZ,cAA+B,CAAC;AAAA,EAClC,cAA2B,oBAAI,IAAI;AAAA,EACnC,wBAAqC,oBAAI,IAAI;AAAA,EAC7C,2BAAwC,oBAAI,IAAI;AAAA,EAChD,sBAAmC,oBAAI,IAAI;AAAA,EASnD,IAAI,aAAkC;AACrC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,uBAA4C;AAC/C,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,0BAA+C;AAClD,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,qBAA0C;AAC7C,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,UAAgB;AAEf,SAAK,YAAY,SAAS;AAC1B,SAAK,YAAY,MAAM;AACvB,SAAK,sBAAsB,MAAM;AACjC,SAAK,yBAAyB,MAAM;AACpC,SAAK,oBAAoB,MAAM;AAE/B,UAAM,YAAY,KAAK,MAAM,aAAa,aAAa,KAAK,GAAG,CAAC;AAChE,QAAI;AAEJ,eAAW,QAAQ,WAAW;AAE7B,YAAM,YAAY,KAAK,SAAS;AAChC,UAAI,CAAC,SAAS,MAAM,CAAC,MAAM,WAAW;AACrC,gBAAQ,CAAC,WAAW,CAAC,CAAC;AACtB,aAAK,YAAY,KAAK,KAAK;AAAA,MAC5B;AACA,YAAM,CAAC,EAAE,KAAK,IAAI;AAGlB,WAAK,iCAAiC,IAAI;AAAA,IAC3C;AACA,SAAK,YAAY,IAAI,KAAK,GAAG;AAAA,EAC9B;AAAA,EAEU,MAAM,WAAyC;AAExD,WAAO;AAAA,EACR;AAAA,EAEQ,iCACP,MACO;AACP,qBAAiB;AAAA,MAChB,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AAEA,QAAI,YAAY,IAAI,GAAG;AAEtB,UAAI,KAAK,QAAQ,cAAc;AAC9B,yBAAiB;AAAA,UAChB,KAAK,QAAQ;AAAA,UACb,KAAK;AAAA,QACN;AAAA,MACD;AAEA,UAAI,KAAK,QAAQ,SAAS;AACzB,cAAM,oBAEJ,KAAK,QAAQ,QAGZ,aAAa,KAAK,QAAQ;AAC7B,yBAAiB;AAAA,UAChB;AAAA,UACA,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD,WAAW,KAAK,gCAAgC;AAG/C,mBAAa,aAAa,KAAK,OAAO,EAAE;AAAA,QACvC,KAAK;AAAA,QACL;AAAA,MACD;AAEA,WAAK,YAAY,IAAI,KAAK,OAAO;AAAA,IAClC;AAAA,EACD;AAAA,EAEA,OAAe,kBACd,KACA,KACO;AACP,QAAI,KAAK;AACR,iBAAW,OAAO,IAAI,KAAK,GAAG;AAC7B,YAAI,IAAI,GAAG;AAAA,MACZ;AAAA,IACD;AAAA,EACD;AACD;AAEA,IAAM,WAAN,cAAuB,iBAAiB;AAAA,EACvC,YACC,KACiB,eACjB,gCACkC,iBACG,oBACA,oBACpC;AACD,UAAM,KAAK,8BAA8B;AANxB;AAEiB;AACG;AACA;AAGrC,SAAK,QAAQ;AAAA,EACd;AAAA,EA3WD,OAgWwC;AAAA;AAAA;AAAA,EAavC,mBACC,SACwD;AACxD,UAAM,SACL,CAAC;AAEF,eAAW,SAAS,KAAK,aAAa;AACrC,YAAM,CAAC,IAAI,KAAK,IAAI;AAEpB,UAAI;AAGJ,iBAAW,QAAQ,OAAO;AACzB,YAAI,KAAK,mBAAmB,oBAAoB,KAAK,IAAI,GAAG;AAC3D,gBAAM,aAAa,YAAY,IAAI;AACnC,cAAI,YAAY;AACf,iBAAK,cAAc;AAAA,cAClB,KAAK;AAAA,cACL,KAAK,QAAQ;AAAA,cACb,CAAC,CAAC,KAAK;AAAA,YACR;AAAA,UACD;AAEA,gBAAM,WAAW;AAAA,YAChB,KAAK;AAAA,YACL,aAAa,KAAK,UAAU;AAAA,YAC5B,KAAK;AAAA,UACN;AACA,cAAI,YAAY;AAEf,kBAAM,iBAAiB;AAAA,cACtB,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK,QAAQ;AAAA,cACb,KAAK;AAAA,YACN;AACA,aAAC,kBAAkB,CAAC,GAAG;AAAA,cACtB,IAAI;AAAA,gBACH,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,KAAK;AAAA,gBACL,KAAK;AAAA,cACN;AAAA,YACD;AAAA,UACD,OAAO;AAEN,kBAAM,SAAS,IAAI;AAAA,cAClB,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,YACN,EAAE,mBAAmB,OAAO;AAC5B,kBAAM,iBAAiB,UAAU;AAAA,cAChC,GAAG,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AAAA,YAC1B;AACA,gBAAI,eAAe,SAAS,GAAG;AAC9B,eAAC,kBAAkB,CAAC,GAAG;AAAA,gBACtB,IAAI;AAAA,kBACH;AAAA,kBACA;AAAA,kBACA;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AACA,UAAI,iBAAiB,cAAc,SAAS,GAAG;AAC9C,eAAO,KAAK,CAAC,IAAI,aAAa,CAAC;AAAA,MAChC;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEmB,MAClB,WAC+B;AAC/B,WAAO,UAAU,KAAK,SAAS,iBAAiB;AAAA,EACjD;AAAA,EAEA,OAAe,kBACd,GACA,GACS;AACT,UAAM,SAAS,EAAE;AACjB,UAAM,SAAS,EAAE;AAEjB,QAAI,WAAW,QAAQ;AAEtB,UAAI,CAAC,QAAQ;AACZ,eAAO;AAAA,MACR,WAAW,CAAC,QAAQ;AACnB,eAAO;AAAA,MACR;AAGA,UAAI,WAAW,cAAc;AAC5B,eAAO;AAAA,MACR,WAAW,WAAW,cAAc;AACnC,eAAO;AAAA,MACR;AAGA,YAAM,QAAQ,OAAO,cAAc,MAAM;AACzC,UAAI,UAAU,GAAG;AAChB,eAAO;AAAA,MACR;AAAA,IACD;AAGA,UAAM,QAAQ,EAAE,SAAS;AACzB,UAAM,QAAQ,EAAE,SAAS;AACzB,QAAI,QAAQ,OAAO;AAClB,aAAO;AAAA,IACR,WAAW,QAAQ,OAAO;AACzB,aAAO;AAAA,IACR;AAGA,WAAO,SAAS;AAAA,MACf,YAAY,CAAC,IAAI,EAAE,QAAQ,QAAQ,EAAE;AAAA,MACrC,YAAY,CAAC,IAAI,EAAE,QAAQ,QAAQ,EAAE;AAAA,IACtC;AAAA,EACD;AAAA,EAEA,OAAe,eACd,GACA,GACC;AACD,UAAM,OAAO,OAAO,MAAM,WAAW,IAAI,EAAE;AAC3C,UAAM,OAAO,OAAO,MAAM,WAAW,IAAI,EAAE;AAC3C,WAAO,KAAK,cAAc,IAAI;AAAA,EAC/B;AACD;AAvJM,WAAN;AAAA,EAKG;AAAA,EACA;AAAA,EACA;AAAA,GAPG;AAyJN,IAAM,WAAN,MAAgC;AAAA,EAzfhC,OAyfgC;AAAA;AAAA;AAAA,EACd;AAAA,EACA,eAAe,IAAI,gBAAgB;AAAA,EAEnC;AAAA,EACR;AAAA,EAET,YACC,IACA,cACA,SACiB,gBACG,mBACA,mBACnB;AACD,SAAK,YAAY,IAAI;AAAA,MACpB;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAKA,UAAM,kBAAkB,IAAI,iBAAiB,MAAM;AAClD,WAAK,UAAU,QAAQ;AACvB,WAAK,aAAa,KAAK;AAAA,QACtB,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,gBAAgB;AAAA,MACjB,CAAC;AAAA,IACF,GAAG,QAAQ,kBAAkB;AAC7B,SAAK,aAAa,IAAI,eAAe;AACrC,SAAK,aAAa;AAAA,MACjB,aAAa,gBAAgB,CAAC,MAAM;AACnC,mBAAWA,OAAM,KAAK,UAAU,YAAY;AAC3C,cAAI,EAAE,IAAIA,GAAE,GAAG;AACd,4BAAgB,SAAS;AACzB;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAKA,UAAM,eAAe,KAAK,aAAa,IAAI,IAAI,gBAAgB,CAAC;AAEhE,UAAM,QAAQ,wBAAC,WAAiD;AAC/D,UAAI,qBAAqB;AACzB,UAAI,qBAAqB;AACzB,UAAI,iBAAiB;AAErB,iBAAW,QAAQ,QAAQ;AAC1B,6BACC,sBAAsB,KAAK;AAC5B,6BACC,sBAAsB,KAAK;AAC5B,yBAAiB,kBAAkB,KAAK;AACxC,YACC,sBACA,sBACA,gBACC;AAED;AAAA,QACD;AAAA,MACD;AAEA,aAAO;AAAA,QACN,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,GA3Bc;AA6Bd,UAAM,oBAAoB,6BAAM;AAC/B,mBAAa;AAAA,QACZ,kBAAkB,mBAAmB,CAAC,MAAM;AAC3C,gBAAM,qBAAqB,EAAE;AAAA,YAC5B,KAAK,UAAU;AAAA,UAChB;AACA,gBAAM,qBAAqB,EAAE;AAAA,YAC5B,KAAK,UAAU;AAAA,UAChB;AACA,gBAAM,iBAAiB,EAAE;AAAA,YACxB,KAAK,UAAU;AAAA,UAChB;AACA,cACC,sBACA,sBACA,gBACC;AACD,iBAAK,aAAa,KAAK;AAAA,cACtB,MAAM;AAAA,cACN;AAAA,cACA;AAAA,cACA;AAAA,YACD,CAAC;AAAA,UACF;AAAA,QACD,CAAC;AAAA,MACF;AACA,mBAAa;AAAA,QACZ,aAAa,YAAY,CAAC,MAAM;AAC/B,eAAK,aAAa,KAAK;AAAA,YACtB,MAAM;AAAA,YACN,oBAAoB;AAAA,YACpB,oBAAoB;AAAA,YACpB,gBAAgB;AAAA,UACjB,CAAC;AAAA,QACF,CAAC;AAAA,MACF;AAAA,IACD,GApC0B;AAsC1B,SAAK,eAAe,IAAI,gBAAgB;AAAA;AAAA,MAEvC,wBAAwB;AAAA,MACxB,yBAAyB,aAAa,MAAM,KAAK,YAAY;AAAA,MAC7D,OAAO,QAAQ;AAAA,MACf;AAAA,IACD,CAAC;AACD,SAAK,cAAc,KAAK,aAAa;AAAA,EACtC;AAAA,EAEA,WACC,SACqD;AACrD,WAAO,KAAK,UAAU,mBAAmB,OAAO;AAAA,EACjD;AAAA,EAEA,UAAgB;AACf,SAAK,aAAa,QAAQ;AAC1B,SAAK,aAAa,QAAQ;AAAA,EAC3B;AACD;AA5IM,WAAN;AAAA,EAWG;AAAA,EACA;AAAA,EACA;AAAA,GAbG;AA8IN,SAAS,eACR,MACA,SACA,QACgB;AAChB,QAAM,KAAK,eAAe,OAAO,IAAI,QAAQ,QAAQ,KAAK,QAAQ;AAClE,QAAM,QACL,OAAO,QAAQ,UAAU,WAAW,QAAQ,QAAQ,QAAQ,MAAM;AAEnE,QAAM,OAAO,SAAS;AAAA,IACrB,IAAI,QAAQ,KAAK,EAAE,IAAI,EAAE;AAAA,IACzB,OAAO,SAAS,cAAc,cAAc,KAAK;AAAA,IACjD,MAAM;AACL,aAAO,aAAa,MAAM,IAAI,IAAI;AAAA,IACnC;AAAA,EACD,CAAC;AAED,QAAM,SAAS,SAAS;AAAA,IACvB,IAAI,UAAU,KAAK,EAAE,IAAI,EAAE;AAAA,IAC3B,OAAO;AAAA,IACP,IAAI,UAAU;AACb,aAAO,CAAC,OAAO,SAAS,MAAM,EAAE;AAAA,IACjC;AAAA,IACA,MAAM;AACL,aAAO,aAAa,MAAM,IAAI,CAAC,CAAC,KAAK,OAAO;AAAA,IAC7C;AAAA,EACD,CAAC;AAED,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA,IAAI,WAAW;AACd,aAAO,CAAC,OAAO;AAAA,IAChB;AAAA,EACD;AACD;AAnCS;AAqCF,SAAS,gCACf,gBACA,mBACA,WACA,OAAyC,QACzC,UAAU,MACA;AACV,SAAO,SAAS;AAAA,IACf,IAAI,uBAAuB,SAAS;AAAA,IACpC,OAAO,SAAS,wBAAwB,sBAAsB;AAAA,IAC9D;AAAA,IACA,MAAM;AAGL,YAAM,gBACL,CAAC,CAAC,kBAAkB,iBAAiB,SAAS;AAC/C,YAAM,YACL,CAAC,iBAAiB,OAAO,KAAK,UAAU,IAAI;AAC7C,qBAAe;AAAA,QACd;AAAA,QACA,YAAY,SAAS,MACnB,YAAY,UAAU,SAAS,KAAK;AAAA,MACvC;AAAA,IACD;AAAA,EACD,CAAC;AACF;AAzBgB;",
  "names": ["id"]
}
