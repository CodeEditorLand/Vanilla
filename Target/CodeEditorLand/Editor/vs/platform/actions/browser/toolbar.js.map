{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/actions/browser/toolbar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getWindow } from \"../../../base/browser/dom.js\";\nimport { StandardMouseEvent } from \"../../../base/browser/mouseEvent.js\";\nimport {\n\ttype IToolBarOptions,\n\tToggleMenuAction,\n\tToolBar,\n} from \"../../../base/browser/ui/toolbar/toolbar.js\";\nimport {\n\ttype IAction,\n\tSeparator,\n\ttype SubmenuAction,\n\ttype WorkbenchActionExecutedClassification,\n\ttype WorkbenchActionExecutedEvent,\n\ttoAction,\n} from \"../../../base/common/actions.js\";\nimport { coalesceInPlace } from \"../../../base/common/arrays.js\";\nimport { intersection } from \"../../../base/common/collections.js\";\nimport { BugIndicatingError } from \"../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Iterable } from \"../../../base/common/iterator.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../nls.js\";\nimport { ICommandService } from \"../../commands/common/commands.js\";\nimport { IContextKeyService } from \"../../contextkey/common/contextkey.js\";\nimport { IContextMenuService } from \"../../contextview/browser/contextView.js\";\nimport { IKeybindingService } from \"../../keybinding/common/keybinding.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport {\n\ttype IMenuActionOptions,\n\tIMenuService,\n\ttype MenuId,\n\tMenuItemAction,\n\tSubmenuItemAction,\n} from \"../common/actions.js\";\nimport { createConfigureKeybindingAction } from \"../common/menuService.js\";\nimport { createAndFillInActionBarActions } from \"./menuEntryActionViewItem.js\";\n\nexport enum HiddenItemStrategy {\n\t/** This toolbar doesn't support hiding*/\n\tNoHide = -1,\n\t/** Hidden items aren't shown anywhere */\n\tIgnore = 0,\n\t/** Hidden items move into the secondary group */\n\tRenderInSecondaryGroup = 1,\n}\n\nexport type IWorkbenchToolBarOptions = IToolBarOptions & {\n\t/**\n\t * Items of the primary group can be hidden. When this happens the item can\n\t * - move into the secondary popup-menu, or\n\t * - not be shown at all\n\t */\n\thiddenItemStrategy?: HiddenItemStrategy;\n\n\t/**\n\t * Optional menu id which is used for a \"Reset Menu\" command. This should be the\n\t * menu id that defines the contents of this workbench menu\n\t */\n\tresetMenu?: MenuId;\n\n\t/**\n\t * Optional menu id which items are used for the context menu of the toolbar.\n\t */\n\tcontextMenu?: MenuId;\n\n\t/**\n\t * Optional options how menu actions are created and invoked\n\t */\n\tmenuOptions?: IMenuActionOptions;\n\n\t/**\n\t * When set the `workbenchActionExecuted` is automatically send for each invoked action. The `from` property\n\t * of the event will the passed `telemetrySource`-value\n\t */\n\ttelemetrySource?: string;\n\n\t/** This is controlled by the WorkbenchToolBar */\n\tallowContextMenu?: never;\n\n\t/**\n\t * Controls the overflow behavior of the primary group of toolbar. This isthe maximum number of items and id of\n\t * items that should never overflow\n\t *\n\t */\n\toverflowBehavior?: { maxItems: number; exempted?: string[] };\n};\n\n/**\n * The `WorkbenchToolBar` does\n * - support hiding of menu items\n * - lookup keybindings for each actions automatically\n * - send `workbenchActionExecuted`-events for each action\n *\n * See {@link MenuWorkbenchToolBar} for a toolbar that is backed by a menu.\n */\nexport class WorkbenchToolBar extends ToolBar {\n\tprivate readonly _sessionDisposables = this._store.add(\n\t\tnew DisposableStore(),\n\t);\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate _options: IWorkbenchToolBarOptions | undefined,\n\t\t@IMenuService private readonly _menuService: IMenuService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IContextMenuService private readonly _contextMenuService: IContextMenuService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\tsuper(container, _contextMenuService, {\n\t\t\t// defaults\n\t\t\tgetKeyBinding: (action) => _keybindingService.lookupKeybinding(action.id) ?? undefined,\n\t\t\t// options (override defaults)\n\t\t\t..._options,\n\t\t\t// mandatory (overide options)\n\t\t\tallowContextMenu: true,\n\t\t\tskipTelemetry: typeof _options?.telemetrySource === 'string',\n\t\t});\n\n\t\t// telemetry logic\n\t\tconst telemetrySource = _options?.telemetrySource;\n\t\tif (telemetrySource) {\n\t\t\tthis._store.add(this.actionBar.onDidRun(e => telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>(\n\t\t\t\t'workbenchActionExecuted',\n\t\t\t\t{ id: e.action.id, from: telemetrySource })\n\t\t\t));\n\t\t}\n\t}\n\n\toverride setActions(\n\t\t_primary: readonly IAction[],\n\t\t_secondary: readonly IAction[] = [],\n\t\tmenuIds?: readonly MenuId[],\n\t): void {\n\t\tthis._sessionDisposables.clear();\n\t\tconst primary: Array<IAction | undefined> = _primary.slice(); // for hiding and overflow we set some items to undefined\n\t\tconst secondary = _secondary.slice();\n\t\tconst toggleActions: IAction[] = [];\n\t\tlet toggleActionsCheckedCount = 0;\n\n\t\tconst extraSecondary: Array<IAction | undefined> = [];\n\n\t\tlet someAreHidden = false;\n\t\t// unless disabled, move all hidden items to secondary group or ignore them\n\t\tif (this._options?.hiddenItemStrategy !== HiddenItemStrategy.NoHide) {\n\t\t\tfor (let i = 0; i < primary.length; i++) {\n\t\t\t\tconst action = primary[i];\n\t\t\t\tif (\n\t\t\t\t\t!(action instanceof MenuItemAction) &&\n\t\t\t\t\t!(action instanceof SubmenuItemAction)\n\t\t\t\t) {\n\t\t\t\t\t// console.warn(`Action ${action.id}/${action.label} is not a MenuItemAction`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!action.hideActions) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// collect all toggle actions\n\t\t\t\ttoggleActions.push(action.hideActions.toggle);\n\t\t\t\tif (action.hideActions.toggle.checked) {\n\t\t\t\t\ttoggleActionsCheckedCount++;\n\t\t\t\t}\n\n\t\t\t\t// hidden items move into overflow or ignore\n\t\t\t\tif (action.hideActions.isHidden) {\n\t\t\t\t\tsomeAreHidden = true;\n\t\t\t\t\tprimary[i] = undefined;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._options?.hiddenItemStrategy !==\n\t\t\t\t\t\tHiddenItemStrategy.Ignore\n\t\t\t\t\t) {\n\t\t\t\t\t\textraSecondary[i] = action;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// count for max\n\t\tif (this._options?.overflowBehavior !== undefined) {\n\t\t\tconst exemptedIds = intersection(\n\t\t\t\tnew Set(this._options.overflowBehavior.exempted),\n\t\t\t\tIterable.map(primary, (a) => a?.id),\n\t\t\t);\n\t\t\tconst maxItems =\n\t\t\t\tthis._options.overflowBehavior.maxItems - exemptedIds.size;\n\n\t\t\tlet count = 0;\n\t\t\tfor (let i = 0; i < primary.length; i++) {\n\t\t\t\tconst action = primary[i];\n\t\t\t\tif (!action) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t\tif (exemptedIds.has(action.id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (count >= maxItems) {\n\t\t\t\t\tprimary[i] = undefined;\n\t\t\t\t\textraSecondary[i] = action;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// coalesce turns Array<IAction|undefined> into IAction[]\n\t\tcoalesceInPlace(primary);\n\t\tcoalesceInPlace(extraSecondary);\n\t\tsuper.setActions(primary, Separator.join(extraSecondary, secondary));\n\n\t\t// add context menu for toggle and configure keybinding actions\n\t\tif (toggleActions.length > 0 || primary.length > 0) {\n\t\t\tthis._sessionDisposables.add(\n\t\t\t\taddDisposableListener(this.getElement(), \"contextmenu\", (e) => {\n\t\t\t\t\tconst event = new StandardMouseEvent(\n\t\t\t\t\t\tgetWindow(this.getElement()),\n\t\t\t\t\t\te,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst action = this.getItemAction(event.target);\n\t\t\t\t\tif (!action) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\n\t\t\t\t\tconst primaryActions = [];\n\n\t\t\t\t\t// -- Configure Keybinding Action --\n\t\t\t\t\tif (\n\t\t\t\t\t\taction instanceof MenuItemAction &&\n\t\t\t\t\t\taction.menuKeybinding\n\t\t\t\t\t) {\n\t\t\t\t\t\tprimaryActions.push(action.menuKeybinding);\n\t\t\t\t\t} else if (\n\t\t\t\t\t\t!(\n\t\t\t\t\t\t\taction instanceof SubmenuItemAction ||\n\t\t\t\t\t\t\taction instanceof ToggleMenuAction\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// only enable the configure keybinding action for actions that support keybindings\n\t\t\t\t\t\tconst supportsKeybindings =\n\t\t\t\t\t\t\t!!this._keybindingService.lookupKeybinding(\n\t\t\t\t\t\t\t\taction.id,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tprimaryActions.push(\n\t\t\t\t\t\t\tcreateConfigureKeybindingAction(\n\t\t\t\t\t\t\t\tthis._commandService,\n\t\t\t\t\t\t\t\tthis._keybindingService,\n\t\t\t\t\t\t\t\taction.id,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tsupportsKeybindings,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// -- Hide Actions --\n\t\t\t\t\tif (toggleActions.length > 0) {\n\t\t\t\t\t\tlet noHide = false;\n\n\t\t\t\t\t\t// last item cannot be hidden when using ignore strategy\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttoggleActionsCheckedCount === 1 &&\n\t\t\t\t\t\t\tthis._options?.hiddenItemStrategy ===\n\t\t\t\t\t\t\t\tHiddenItemStrategy.Ignore\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnoHide = true;\n\t\t\t\t\t\t\tfor (let i = 0; i < toggleActions.length; i++) {\n\t\t\t\t\t\t\t\tif (toggleActions[i].checked) {\n\t\t\t\t\t\t\t\t\ttoggleActions[i] = toAction({\n\t\t\t\t\t\t\t\t\t\tid: action.id,\n\t\t\t\t\t\t\t\t\t\tlabel: action.label,\n\t\t\t\t\t\t\t\t\t\tchecked: true,\n\t\t\t\t\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\t\t\t\t\trun() {},\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tbreak; // there is only one\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// add \"hide foo\" actions\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!noHide &&\n\t\t\t\t\t\t\t(action instanceof MenuItemAction ||\n\t\t\t\t\t\t\t\taction instanceof SubmenuItemAction)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (!action.hideActions) {\n\t\t\t\t\t\t\t\t// no context menu for MenuItemAction instances that support no hiding\n\t\t\t\t\t\t\t\t// those are fake actions and need to be cleaned up\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprimaryActions.push(action.hideActions.hide);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprimaryActions.push(\n\t\t\t\t\t\t\t\ttoAction({\n\t\t\t\t\t\t\t\t\tid: \"label\",\n\t\t\t\t\t\t\t\t\tlabel: localize(\"hide\", \"Hide\"),\n\t\t\t\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\t\t\t\trun() {},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst actions = Separator.join(\n\t\t\t\t\t\tprimaryActions,\n\t\t\t\t\t\ttoggleActions,\n\t\t\t\t\t);\n\n\t\t\t\t\t// add \"Reset Menu\" action\n\t\t\t\t\tif (this._options?.resetMenu && !menuIds) {\n\t\t\t\t\t\tmenuIds = [this._options.resetMenu];\n\t\t\t\t\t}\n\t\t\t\t\tif (someAreHidden && menuIds) {\n\t\t\t\t\t\tactions.push(new Separator());\n\t\t\t\t\t\tactions.push(\n\t\t\t\t\t\t\ttoAction({\n\t\t\t\t\t\t\t\tid: \"resetThisMenu\",\n\t\t\t\t\t\t\t\tlabel: localize(\"resetThisMenu\", \"Reset Menu\"),\n\t\t\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\t\t\tthis._menuService.resetHiddenStates(\n\t\t\t\t\t\t\t\t\t\tmenuIds,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (actions.length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._contextMenuService.showContextMenu({\n\t\t\t\t\t\tgetAnchor: () => event,\n\t\t\t\t\t\tgetActions: () => actions,\n\t\t\t\t\t\t// add context menu actions (iff appicable)\n\t\t\t\t\t\tmenuId: this._options?.contextMenu,\n\t\t\t\t\t\tmenuActionOptions: {\n\t\t\t\t\t\t\trenderShortTitle: true,\n\t\t\t\t\t\t\t...this._options?.menuOptions,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tskipTelemetry:\n\t\t\t\t\t\t\ttypeof this._options?.telemetrySource === \"string\",\n\t\t\t\t\t\tcontextKeyService: this._contextKeyService,\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n}\n\n// ---- MenuWorkbenchToolBar -------------------------------------------------\n\nexport interface IToolBarRenderOptions {\n\t/**\n\t * Determines what groups are considered primary. Defaults to `navigation`. Items of the primary\n\t * group are rendered with buttons and the rest is rendered in the secondary popup-menu.\n\t */\n\tprimaryGroup?: string | ((actionGroup: string) => boolean);\n\n\t/**\n\t * Inlinse submenus with just a single item\n\t */\n\tshouldInlineSubmenu?: (\n\t\taction: SubmenuAction,\n\t\tgroup: string,\n\t\tgroupSize: number,\n\t) => boolean;\n\n\t/**\n\t * Should the primary group allow for separators.\n\t */\n\tuseSeparatorsInPrimaryActions?: boolean;\n}\n\nexport interface IMenuWorkbenchToolBarOptions extends IWorkbenchToolBarOptions {\n\t/**\n\t * Optional options to configure how the toolbar renderes items.\n\t */\n\ttoolbarOptions?: IToolBarRenderOptions;\n\n\t/**\n\t * Only `undefined` to disable the reset command is allowed, otherwise the menus\n\t * id is used.\n\t */\n\tresetMenu?: undefined;\n}\n\n/**\n * A {@link WorkbenchToolBar workbench toolbar} that is purely driven from a {@link MenuId menu}-identifier.\n *\n * *Note* that Manual updates via `setActions` are NOT supported.\n */\nexport class MenuWorkbenchToolBar extends WorkbenchToolBar {\n\tprivate readonly _onDidChangeMenuItems = this._store.add(\n\t\tnew Emitter<this>(),\n\t);\n\treadonly onDidChangeMenuItems: Event<this> =\n\t\tthis._onDidChangeMenuItems.event;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tmenuId: MenuId,\n\t\toptions: IMenuWorkbenchToolBarOptions | undefined,\n\t\t@IMenuService menuService: IMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\tsuper(\n\t\t\tcontainer,\n\t\t\t{ resetMenu: menuId, ...options },\n\t\t\tmenuService,\n\t\t\tcontextKeyService,\n\t\t\tcontextMenuService,\n\t\t\tkeybindingService,\n\t\t\tcommandService,\n\t\t\ttelemetryService,\n\t\t);\n\n\t\t// update logic\n\t\tconst menu = this._store.add(\n\t\t\tmenuService.createMenu(menuId, contextKeyService, {\n\t\t\t\temitEventsForSubmenuChanges: true,\n\t\t\t}),\n\t\t);\n\t\tconst updateToolbar = () => {\n\t\t\tconst primary: IAction[] = [];\n\t\t\tconst secondary: IAction[] = [];\n\t\t\tcreateAndFillInActionBarActions(\n\t\t\t\tmenu,\n\t\t\t\toptions?.menuOptions,\n\t\t\t\t{ primary, secondary },\n\t\t\t\toptions?.toolbarOptions?.primaryGroup,\n\t\t\t\toptions?.toolbarOptions?.shouldInlineSubmenu,\n\t\t\t\toptions?.toolbarOptions?.useSeparatorsInPrimaryActions,\n\t\t\t);\n\t\t\tcontainer.classList.toggle(\n\t\t\t\t\"has-no-actions\",\n\t\t\t\tprimary.length === 0 && secondary.length === 0,\n\t\t\t);\n\t\t\tsuper.setActions(primary, secondary);\n\t\t};\n\n\t\tthis._store.add(\n\t\t\tmenu.onDidChange(() => {\n\t\t\t\tupdateToolbar();\n\t\t\t\tthis._onDidChangeMenuItems.fire(this);\n\t\t\t}),\n\t\t);\n\t\tupdateToolbar();\n\t}\n\n\t/**\n\t * @deprecated The WorkbenchToolBar does not support this method because it works with menus.\n\t */\n\toverride setActions(): void {\n\t\tthrow new BugIndicatingError(\"This toolbar is populated from a menu.\");\n\t}\n}\n"],
  "mappings": "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",
  "names": ["HiddenItemStrategy"]
}
