{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/actions/browser/toolbar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getWindow } from '../../../base/browser/dom.js';\nimport { StandardMouseEvent } from '../../../base/browser/mouseEvent.js';\nimport { IToolBarOptions, ToggleMenuAction, ToolBar } from '../../../base/browser/ui/toolbar/toolbar.js';\nimport { IAction, Separator, SubmenuAction, toAction, WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from '../../../base/common/actions.js';\nimport { coalesceInPlace } from '../../../base/common/arrays.js';\nimport { intersection } from '../../../base/common/collections.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { createAndFillInActionBarActions } from './menuEntryActionViewItem.js';\nimport { IMenuActionOptions, IMenuService, MenuId, MenuItemAction, SubmenuItemAction } from '../common/actions.js';\nimport { createConfigureKeybindingAction } from '../common/menuService.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IContextKeyService } from '../../contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../contextview/browser/contextView.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n\nexport const enum HiddenItemStrategy {\n\t/** This toolbar doesn't support hiding*/\n\tNoHide = -1,\n\t/** Hidden items aren't shown anywhere */\n\tIgnore = 0,\n\t/** Hidden items move into the secondary group */\n\tRenderInSecondaryGroup = 1,\n}\n\nexport type IWorkbenchToolBarOptions = IToolBarOptions & {\n\n\t/**\n\t * Items of the primary group can be hidden. When this happens the item can\n\t * - move into the secondary popup-menu, or\n\t * - not be shown at all\n\t */\n\thiddenItemStrategy?: HiddenItemStrategy;\n\n\t/**\n\t * Optional menu id which is used for a \"Reset Menu\" command. This should be the\n\t * menu id that defines the contents of this workbench menu\n\t */\n\tresetMenu?: MenuId;\n\n\t/**\n\t * Optional menu id which items are used for the context menu of the toolbar.\n\t */\n\tcontextMenu?: MenuId;\n\n\t/**\n\t * Optional options how menu actions are created and invoked\n\t */\n\tmenuOptions?: IMenuActionOptions;\n\n\t/**\n\t * When set the `workbenchActionExecuted` is automatically send for each invoked action. The `from` property\n\t * of the event will the passed `telemetrySource`-value\n\t */\n\ttelemetrySource?: string;\n\n\t/** This is controlled by the WorkbenchToolBar */\n\tallowContextMenu?: never;\n\n\t/**\n\t * Controls the overflow behavior of the primary group of toolbar. This isthe maximum number of items and id of\n\t * items that should never overflow\n\t *\n\t */\n\toverflowBehavior?: { maxItems: number; exempted?: string[] };\n};\n\n/**\n * The `WorkbenchToolBar` does\n * - support hiding of menu items\n * - lookup keybindings for each actions automatically\n * - send `workbenchActionExecuted`-events for each action\n *\n * See {@link MenuWorkbenchToolBar} for a toolbar that is backed by a menu.\n */\nexport class WorkbenchToolBar extends ToolBar {\n\n\tprivate readonly _sessionDisposables = this._store.add(new DisposableStore());\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate _options: IWorkbenchToolBarOptions | undefined,\n\t\t@IMenuService private readonly _menuService: IMenuService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IContextMenuService private readonly _contextMenuService: IContextMenuService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\tsuper(container, _contextMenuService, {\n\t\t\t// defaults\n\t\t\tgetKeyBinding: (action) => _keybindingService.lookupKeybinding(action.id) ?? undefined,\n\t\t\t// options (override defaults)\n\t\t\t..._options,\n\t\t\t// mandatory (overide options)\n\t\t\tallowContextMenu: true,\n\t\t\tskipTelemetry: typeof _options?.telemetrySource === 'string',\n\t\t});\n\n\t\t// telemetry logic\n\t\tconst telemetrySource = _options?.telemetrySource;\n\t\tif (telemetrySource) {\n\t\t\tthis._store.add(this.actionBar.onDidRun(e => telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>(\n\t\t\t\t'workbenchActionExecuted',\n\t\t\t\t{ id: e.action.id, from: telemetrySource })\n\t\t\t));\n\t\t}\n\t}\n\n\toverride setActions(_primary: readonly IAction[], _secondary: readonly IAction[] = [], menuIds?: readonly MenuId[]): void {\n\n\t\tthis._sessionDisposables.clear();\n\t\tconst primary: Array<IAction | undefined> = _primary.slice(); // for hiding and overflow we set some items to undefined\n\t\tconst secondary = _secondary.slice();\n\t\tconst toggleActions: IAction[] = [];\n\t\tlet toggleActionsCheckedCount: number = 0;\n\n\t\tconst extraSecondary: Array<IAction | undefined> = [];\n\n\t\tlet someAreHidden = false;\n\t\t// unless disabled, move all hidden items to secondary group or ignore them\n\t\tif (this._options?.hiddenItemStrategy !== HiddenItemStrategy.NoHide) {\n\t\t\tfor (let i = 0; i < primary.length; i++) {\n\t\t\t\tconst action = primary[i];\n\t\t\t\tif (!(action instanceof MenuItemAction) && !(action instanceof SubmenuItemAction)) {\n\t\t\t\t\t// console.warn(`Action ${action.id}/${action.label} is not a MenuItemAction`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!action.hideActions) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// collect all toggle actions\n\t\t\t\ttoggleActions.push(action.hideActions.toggle);\n\t\t\t\tif (action.hideActions.toggle.checked) {\n\t\t\t\t\ttoggleActionsCheckedCount++;\n\t\t\t\t}\n\n\t\t\t\t// hidden items move into overflow or ignore\n\t\t\t\tif (action.hideActions.isHidden) {\n\t\t\t\t\tsomeAreHidden = true;\n\t\t\t\t\tprimary[i] = undefined;\n\t\t\t\t\tif (this._options?.hiddenItemStrategy !== HiddenItemStrategy.Ignore) {\n\t\t\t\t\t\textraSecondary[i] = action;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// count for max\n\t\tif (this._options?.overflowBehavior !== undefined) {\n\n\t\t\tconst exemptedIds = intersection(new Set(this._options.overflowBehavior.exempted), Iterable.map(primary, a => a?.id));\n\t\t\tconst maxItems = this._options.overflowBehavior.maxItems - exemptedIds.size;\n\n\t\t\tlet count = 0;\n\t\t\tfor (let i = 0; i < primary.length; i++) {\n\t\t\t\tconst action = primary[i];\n\t\t\t\tif (!action) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t\tif (exemptedIds.has(action.id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (count >= maxItems) {\n\t\t\t\t\tprimary[i] = undefined;\n\t\t\t\t\textraSecondary[i] = action;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// coalesce turns Array<IAction|undefined> into IAction[]\n\t\tcoalesceInPlace(primary);\n\t\tcoalesceInPlace(extraSecondary);\n\t\tsuper.setActions(primary, Separator.join(extraSecondary, secondary));\n\n\t\t// add context menu for toggle and configure keybinding actions\n\t\tif (toggleActions.length > 0 || primary.length > 0) {\n\t\t\tthis._sessionDisposables.add(addDisposableListener(this.getElement(), 'contextmenu', e => {\n\t\t\t\tconst event = new StandardMouseEvent(getWindow(this.getElement()), e);\n\n\t\t\t\tconst action = this.getItemAction(event.target);\n\t\t\t\tif (!(action)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\n\t\t\t\tconst primaryActions = [];\n\n\t\t\t\t// -- Configure Keybinding Action --\n\t\t\t\tif (action instanceof MenuItemAction && action.menuKeybinding) {\n\t\t\t\t\tprimaryActions.push(action.menuKeybinding);\n\t\t\t\t} else if (!(action instanceof SubmenuItemAction || action instanceof ToggleMenuAction)) {\n\t\t\t\t\t// only enable the configure keybinding action for actions that support keybindings\n\t\t\t\t\tconst supportsKeybindings = !!this._keybindingService.lookupKeybinding(action.id);\n\t\t\t\t\tprimaryActions.push(createConfigureKeybindingAction(this._commandService, this._keybindingService, action.id, undefined, supportsKeybindings));\n\t\t\t\t}\n\n\t\t\t\t// -- Hide Actions --\n\t\t\t\tif (toggleActions.length > 0) {\n\t\t\t\t\tlet noHide = false;\n\n\t\t\t\t\t// last item cannot be hidden when using ignore strategy\n\t\t\t\t\tif (toggleActionsCheckedCount === 1 && this._options?.hiddenItemStrategy === HiddenItemStrategy.Ignore) {\n\t\t\t\t\t\tnoHide = true;\n\t\t\t\t\t\tfor (let i = 0; i < toggleActions.length; i++) {\n\t\t\t\t\t\t\tif (toggleActions[i].checked) {\n\t\t\t\t\t\t\t\ttoggleActions[i] = toAction({\n\t\t\t\t\t\t\t\t\tid: action.id,\n\t\t\t\t\t\t\t\t\tlabel: action.label,\n\t\t\t\t\t\t\t\t\tchecked: true,\n\t\t\t\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\t\t\t\trun() { }\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak; // there is only one\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add \"hide foo\" actions\n\t\t\t\t\tif (!noHide && (action instanceof MenuItemAction || action instanceof SubmenuItemAction)) {\n\t\t\t\t\t\tif (!action.hideActions) {\n\t\t\t\t\t\t\t// no context menu for MenuItemAction instances that support no hiding\n\t\t\t\t\t\t\t// those are fake actions and need to be cleaned up\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprimaryActions.push(action.hideActions.hide);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprimaryActions.push(toAction({\n\t\t\t\t\t\t\tid: 'label',\n\t\t\t\t\t\t\tlabel: localize('hide', \"Hide\"),\n\t\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\t\trun() { }\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst actions = Separator.join(primaryActions, toggleActions);\n\n\t\t\t\t// add \"Reset Menu\" action\n\t\t\t\tif (this._options?.resetMenu && !menuIds) {\n\t\t\t\t\tmenuIds = [this._options.resetMenu];\n\t\t\t\t}\n\t\t\t\tif (someAreHidden && menuIds) {\n\t\t\t\t\tactions.push(new Separator());\n\t\t\t\t\tactions.push(toAction({\n\t\t\t\t\t\tid: 'resetThisMenu',\n\t\t\t\t\t\tlabel: localize('resetThisMenu', \"Reset Menu\"),\n\t\t\t\t\t\trun: () => this._menuService.resetHiddenStates(menuIds)\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\tif (actions.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._contextMenuService.showContextMenu({\n\t\t\t\t\tgetAnchor: () => event,\n\t\t\t\t\tgetActions: () => actions,\n\t\t\t\t\t// add context menu actions (iff appicable)\n\t\t\t\t\tmenuId: this._options?.contextMenu,\n\t\t\t\t\tmenuActionOptions: { renderShortTitle: true, ...this._options?.menuOptions },\n\t\t\t\t\tskipTelemetry: typeof this._options?.telemetrySource === 'string',\n\t\t\t\t\tcontextKeyService: this._contextKeyService,\n\t\t\t\t});\n\t\t\t}));\n\t\t}\n\t}\n}\n\n// ---- MenuWorkbenchToolBar -------------------------------------------------\n\n\nexport interface IToolBarRenderOptions {\n\t/**\n\t * Determines what groups are considered primary. Defaults to `navigation`. Items of the primary\n\t * group are rendered with buttons and the rest is rendered in the secondary popup-menu.\n\t */\n\tprimaryGroup?: string | ((actionGroup: string) => boolean);\n\n\t/**\n\t * Inlinse submenus with just a single item\n\t */\n\tshouldInlineSubmenu?: (action: SubmenuAction, group: string, groupSize: number) => boolean;\n\n\t/**\n\t * Should the primary group allow for separators.\n\t */\n\tuseSeparatorsInPrimaryActions?: boolean;\n}\n\nexport interface IMenuWorkbenchToolBarOptions extends IWorkbenchToolBarOptions {\n\n\t/**\n\t * Optional options to configure how the toolbar renderes items.\n\t */\n\ttoolbarOptions?: IToolBarRenderOptions;\n\n\t/**\n\t * Only `undefined` to disable the reset command is allowed, otherwise the menus\n\t * id is used.\n\t */\n\tresetMenu?: undefined;\n}\n\n/**\n * A {@link WorkbenchToolBar workbench toolbar} that is purely driven from a {@link MenuId menu}-identifier.\n *\n * *Note* that Manual updates via `setActions` are NOT supported.\n */\nexport class MenuWorkbenchToolBar extends WorkbenchToolBar {\n\n\tprivate readonly _onDidChangeMenuItems = this._store.add(new Emitter<this>());\n\treadonly onDidChangeMenuItems: Event<this> = this._onDidChangeMenuItems.event;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tmenuId: MenuId,\n\t\toptions: IMenuWorkbenchToolBarOptions | undefined,\n\t\t@IMenuService menuService: IMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\tsuper(container, { resetMenu: menuId, ...options }, menuService, contextKeyService, contextMenuService, keybindingService, commandService, telemetryService);\n\n\t\t// update logic\n\t\tconst menu = this._store.add(menuService.createMenu(menuId, contextKeyService, { emitEventsForSubmenuChanges: true }));\n\t\tconst updateToolbar = () => {\n\t\t\tconst primary: IAction[] = [];\n\t\t\tconst secondary: IAction[] = [];\n\t\t\tcreateAndFillInActionBarActions(\n\t\t\t\tmenu,\n\t\t\t\toptions?.menuOptions,\n\t\t\t\t{ primary, secondary },\n\t\t\t\toptions?.toolbarOptions?.primaryGroup, options?.toolbarOptions?.shouldInlineSubmenu, options?.toolbarOptions?.useSeparatorsInPrimaryActions\n\t\t\t);\n\t\t\tcontainer.classList.toggle('has-no-actions', primary.length === 0 && secondary.length === 0);\n\t\t\tsuper.setActions(primary, secondary);\n\t\t};\n\n\t\tthis._store.add(menu.onDidChange(() => {\n\t\t\tupdateToolbar();\n\t\t\tthis._onDidChangeMenuItems.fire(this);\n\t\t}));\n\t\tupdateToolbar();\n\t}\n\n\t/**\n\t * @deprecated The WorkbenchToolBar does not support this method because it works with menus.\n\t */\n\toverride setActions(): void {\n\t\tthrow new BugIndicatingError('This toolbar is populated from a menu.');\n\t}\n}\n"],
  "mappings": "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",
  "names": ["HiddenItemStrategy"]
}
