var u=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var p=(n,r,o,s)=>{for(var e=s>1?void 0:s?v(r,o):r,c=n.length-1,t;c>=0;c--)(t=n[c])&&(e=(s?t(r,o,e):t(e))||e);return s&&e&&u(r,o,e),e},d=(n,r)=>(o,s)=>r(o,s,n);import{spawn as S}from"child_process";import{relative as g}from"path";import{isESM as f}from"../../../base/common/amd.js";import{FileAccess as h}from"../../../base/common/network.js";import{StopWatch as E}from"../../../base/common/stopwatch.js";import{IEnvironmentService as I}from"../../environment/common/environment.js";import{createDecorator as C}from"../../instantiation/common/instantiation.js";import{ILogService as M}from"../../log/common/log.js";const L=C("ICSSDevelopmentService");let a=class{constructor(r,o){this.envService=r;this.logService=o}_cssModules;get isEnabled(){return!this.envService.isBuilt&&f}getCssModules(){return this._cssModules??=this.computeCssModules(),this._cssModules}async computeCssModules(){if(!this.isEnabled)return[];const r=await import("@vscode/ripgrep");return await new Promise(o=>{const s=E.create(),e=[],c=new TextDecoder,t=h.asFileUri("").fsPath,l=S(r.rgPath,["-g","**/*.css","--files","--no-ignore",t],{});l.stdout.on("data",i=>{const m=c.decode(i,{stream:!0});e.push(m.split(`
`).filter(Boolean))}),l.on("error",i=>{this.logService.error("[CSS_DEV] FAILED to compute CSS data",i),o([])}),l.on("close",()=>{const i=e.flat().map(m=>g(t,m).replace(/\\/g,"/")).filter(Boolean).sort();o(i),this.logService.info(`[CSS_DEV] DONE, ${i.length} css modules (${Math.round(s.elapsed())}ms)`)})})}};a=p([d(0,I),d(1,M)],a);export{a as CSSDevelopmentService,L as ICSSDevelopmentService};
