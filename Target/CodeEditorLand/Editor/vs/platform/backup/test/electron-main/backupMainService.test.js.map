{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/backup/test/electron-main/backupMainService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { createHash } from 'crypto';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport { Schemas } from '../../../../base/common/network.js';\nimport * as path from '../../../../base/common/path.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Promises } from '../../../../base/node/pfs.js';\nimport { flakySuite, getRandomTestPath } from '../../../../base/test/node/testUtils.js';\nimport { BackupMainService } from '../../electron-main/backupMainService.js';\nimport { ISerializedBackupWorkspaces, ISerializedWorkspaceBackupInfo } from '../../node/backup.js';\nimport { TestConfigurationService } from '../../../configuration/test/common/testConfigurationService.js';\nimport { EnvironmentMainService } from '../../../environment/electron-main/environmentMainService.js';\nimport { OPTIONS, parseArgs } from '../../../environment/node/argv.js';\nimport { HotExitConfiguration } from '../../../files/common/files.js';\nimport { ConsoleMainLogger } from '../../../log/common/log.js';\nimport product from '../../../product/common/product.js';\nimport { IFolderBackupInfo, isFolderBackupInfo, IWorkspaceBackupInfo } from '../../common/backup.js';\nimport { IWorkspaceIdentifier } from '../../../workspace/common/workspace.js';\nimport { InMemoryTestStateMainService } from '../../../test/electron-main/workbenchTestServices.js';\nimport { LogService } from '../../../log/common/logService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nflakySuite('BackupMainService', () => {\n\n\tfunction assertEqualFolderInfos(actual: IFolderBackupInfo[], expected: IFolderBackupInfo[]) {\n\t\tconst withUriAsString = (f: IFolderBackupInfo) => ({ folderUri: f.folderUri.toString(), remoteAuthority: f.remoteAuthority });\n\t\tassert.deepStrictEqual(actual.map(withUriAsString), expected.map(withUriAsString));\n\t}\n\n\tfunction toWorkspace(path: string): IWorkspaceIdentifier {\n\t\treturn {\n\t\t\tid: createHash('md5').update(sanitizePath(path)).digest('hex'), // CodeQL [SM04514] Using MD5 to convert a file path to a fixed length\n\t\t\tconfigPath: URI.file(path)\n\t\t};\n\t}\n\n\tfunction toWorkspaceBackupInfo(path: string, remoteAuthority?: string): IWorkspaceBackupInfo {\n\t\treturn {\n\t\t\tworkspace: {\n\t\t\t\tid: createHash('md5').update(sanitizePath(path)).digest('hex'), // CodeQL [SM04514] Using MD5 to convert a file path to a fixed length\n\t\t\t\tconfigPath: URI.file(path)\n\t\t\t},\n\t\t\tremoteAuthority\n\t\t};\n\t}\n\n\tfunction toFolderBackupInfo(uri: URI, remoteAuthority?: string): IFolderBackupInfo {\n\t\treturn { folderUri: uri, remoteAuthority };\n\t}\n\n\tfunction toSerializedWorkspace(ws: IWorkspaceIdentifier): ISerializedWorkspaceBackupInfo {\n\t\treturn {\n\t\t\tid: ws.id,\n\t\t\tconfigURIPath: ws.configPath.toString()\n\t\t};\n\t}\n\n\tfunction ensureFolderExists(uri: URI): Promise<void> {\n\t\tif (!fs.existsSync(uri.fsPath)) {\n\t\t\tfs.mkdirSync(uri.fsPath);\n\t\t}\n\n\t\tconst backupFolder = service.toBackupPath(uri);\n\t\treturn createBackupFolder(backupFolder);\n\t}\n\n\tasync function ensureWorkspaceExists(workspace: IWorkspaceIdentifier): Promise<IWorkspaceIdentifier> {\n\t\tif (!fs.existsSync(workspace.configPath.fsPath)) {\n\t\t\tawait Promises.writeFile(workspace.configPath.fsPath, 'Hello');\n\t\t}\n\n\t\tconst backupFolder = service.toBackupPath(workspace.id);\n\t\tawait createBackupFolder(backupFolder);\n\n\t\treturn workspace;\n\t}\n\n\tasync function createBackupFolder(backupFolder: string): Promise<void> {\n\t\tif (!fs.existsSync(backupFolder)) {\n\t\t\tfs.mkdirSync(backupFolder);\n\t\t\tfs.mkdirSync(path.join(backupFolder, Schemas.file));\n\t\t\tawait Promises.writeFile(path.join(backupFolder, Schemas.file, 'foo.txt'), 'Hello');\n\t\t}\n\t}\n\n\tfunction readWorkspacesMetadata(): ISerializedBackupWorkspaces {\n\t\treturn stateMainService.getItem('backupWorkspaces') as ISerializedBackupWorkspaces;\n\t}\n\n\tfunction writeWorkspacesMetadata(data: string): void {\n\t\tif (!data) {\n\t\t\tstateMainService.removeItem('backupWorkspaces');\n\t\t} else {\n\t\t\tstateMainService.setItem('backupWorkspaces', JSON.parse(data));\n\t\t}\n\t}\n\n\tfunction sanitizePath(p: string): string {\n\t\treturn platform.isLinux ? p : p.toLowerCase();\n\t}\n\n\tconst fooFile = URI.file(platform.isWindows ? 'C:\\\\foo' : '/foo');\n\tconst barFile = URI.file(platform.isWindows ? 'C:\\\\bar' : '/bar');\n\n\tlet service: BackupMainService & {\n\t\ttoBackupPath(arg: URI | string): string;\n\t\ttestGetFolderHash(folder: IFolderBackupInfo): string;\n\t\ttestGetWorkspaceBackups(): IWorkspaceBackupInfo[];\n\t\ttestGetFolderBackups(): IFolderBackupInfo[];\n\t};\n\tlet configService: TestConfigurationService;\n\tlet stateMainService: InMemoryTestStateMainService;\n\n\tlet environmentService: EnvironmentMainService;\n\tlet testDir: string;\n\tlet backupHome: string;\n\tlet existingTestFolder1: URI;\n\n\tsetup(async () => {\n\t\ttestDir = getRandomTestPath(os.tmpdir(), 'vsctests', 'backupmainservice');\n\t\tbackupHome = path.join(testDir, 'Backups');\n\t\texistingTestFolder1 = URI.file(path.join(testDir, 'folder1'));\n\n\t\tenvironmentService = new EnvironmentMainService(parseArgs(process.argv, OPTIONS), { _serviceBrand: undefined, ...product });\n\n\t\tawait fs.promises.mkdir(backupHome, { recursive: true });\n\n\t\tconfigService = new TestConfigurationService();\n\t\tstateMainService = new InMemoryTestStateMainService();\n\n\t\tservice = new class TestBackupMainService extends BackupMainService {\n\t\t\tconstructor() {\n\t\t\t\tsuper(environmentService, configService, new LogService(new ConsoleMainLogger()), stateMainService);\n\n\t\t\t\tthis.backupHome = backupHome;\n\t\t\t}\n\n\t\t\ttoBackupPath(arg: URI | string): string {\n\t\t\t\tconst id = arg instanceof URI ? super.getFolderHash({ folderUri: arg }) : arg;\n\t\t\t\treturn path.join(this.backupHome, id);\n\t\t\t}\n\n\t\t\ttestGetFolderHash(folder: IFolderBackupInfo): string {\n\t\t\t\treturn super.getFolderHash(folder);\n\t\t\t}\n\n\t\t\ttestGetWorkspaceBackups(): IWorkspaceBackupInfo[] {\n\t\t\t\treturn super.getWorkspaceBackups();\n\t\t\t}\n\n\t\t\ttestGetFolderBackups(): IFolderBackupInfo[] {\n\t\t\t\treturn super.getFolderBackups();\n\t\t\t}\n\t\t};\n\n\t\treturn service.initialize();\n\t});\n\n\tteardown(() => {\n\t\treturn Promises.rm(testDir);\n\t});\n\n\ttest('service validates backup workspaces on startup and cleans up (folder workspaces)', async function () {\n\n\t\t// 1) backup workspace path does not exist\n\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(barFile));\n\t\tawait service.initialize();\n\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\n\t\t// 2) backup workspace path exists with empty contents within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(barFile));\n\t\tawait service.initialize();\n\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 3) backup workspace path exists with empty folders within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(fooFile), Schemas.file));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(barFile), Schemas.untitled));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(barFile));\n\t\tawait service.initialize();\n\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 4) backup workspace path points to a workspace that no longer exists\n\t\t// so it should convert the backup worspace to an empty workspace backup\n\t\tconst fileBackups = path.join(service.toBackupPath(fooFile), Schemas.file);\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(fileBackups);\n\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\tassert.strictEqual(service.testGetFolderBackups().length, 1);\n\t\tassert.strictEqual(service.getEmptyWindowBackups().length, 0);\n\t\tfs.writeFileSync(path.join(fileBackups, 'backup.txt'), '');\n\t\tawait service.initialize();\n\t\tassert.strictEqual(service.testGetFolderBackups().length, 0);\n\t\tassert.strictEqual(service.getEmptyWindowBackups().length, 1);\n\t});\n\n\ttest('service validates backup workspaces on startup and cleans up (root workspaces)', async function () {\n\n\t\t// 1) backup workspace path does not exist\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\n\t\t// 2) backup workspace path exists with empty contents within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 3) backup workspace path exists with empty folders within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(fooFile), Schemas.file));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(barFile), Schemas.untitled));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 4) backup workspace path points to a workspace that no longer exists\n\t\t// so it should convert the backup worspace to an empty workspace backup\n\t\tconst fileBackups = path.join(service.toBackupPath(fooFile), Schemas.file);\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(fileBackups);\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 1);\n\t\tassert.strictEqual(service.getEmptyWindowBackups().length, 0);\n\t\tfs.writeFileSync(path.join(fileBackups, 'backup.txt'), '');\n\t\tawait service.initialize();\n\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 0);\n\t\tassert.strictEqual(service.getEmptyWindowBackups().length, 1);\n\t});\n\n\ttest('service supports to migrate backup data from another location', async () => {\n\t\tconst backupPathToMigrate = service.toBackupPath(fooFile);\n\t\tfs.mkdirSync(backupPathToMigrate);\n\t\tfs.writeFileSync(path.join(backupPathToMigrate, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(backupPathToMigrate)));\n\n\t\tconst workspaceBackupPath = await service.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath), backupPathToMigrate);\n\n\t\tassert.ok(fs.existsSync(workspaceBackupPath));\n\t\tassert.ok(fs.existsSync(path.join(workspaceBackupPath, 'backup.txt')));\n\t\tassert.ok(!fs.existsSync(backupPathToMigrate));\n\n\t\tconst emptyBackups = service.getEmptyWindowBackups();\n\t\tassert.strictEqual(0, emptyBackups.length);\n\t});\n\n\ttest('service backup migration makes sure to preserve existing backups', async () => {\n\t\tconst backupPathToMigrate = service.toBackupPath(fooFile);\n\t\tfs.mkdirSync(backupPathToMigrate);\n\t\tfs.writeFileSync(path.join(backupPathToMigrate, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(backupPathToMigrate)));\n\n\t\tconst backupPathToPreserve = service.toBackupPath(barFile);\n\t\tfs.mkdirSync(backupPathToPreserve);\n\t\tfs.writeFileSync(path.join(backupPathToPreserve, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(backupPathToPreserve)));\n\n\t\tconst workspaceBackupPath = await service.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath), backupPathToMigrate);\n\n\t\tassert.ok(fs.existsSync(workspaceBackupPath));\n\t\tassert.ok(fs.existsSync(path.join(workspaceBackupPath, 'backup.txt')));\n\t\tassert.ok(!fs.existsSync(backupPathToMigrate));\n\n\t\tconst emptyBackups = service.getEmptyWindowBackups();\n\t\tassert.strictEqual(1, emptyBackups.length);\n\t\tassert.strictEqual(1, fs.readdirSync(path.join(backupHome, emptyBackups[0].backupFolder)).length);\n\t});\n\n\tsuite('loadSync', () => {\n\t\ttest('getFolderBackupPaths() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when folders in workspaces.json is absent', async () => {\n\t\t\twriteWorkspacesMetadata('{}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when folders in workspaces.json is not a string array', async () => {\n\t\t\twriteWorkspacesMetadata('{\"folders\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when files.hotExit = \"onExitAndWindowClose\"', async () => {\n\t\t\tconst fi = toFolderBackupInfo(URI.file(fooFile.fsPath.toUpperCase()));\n\t\t\tservice.registerFolderBackup(fi);\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), [fi]);\n\t\t\tconfigService.setUserConfiguration('files.hotExit', HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE);\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when folderWorkspaces in workspaces.json is absent', async () => {\n\t\t\twriteWorkspacesMetadata('{}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when rootWorkspaces in workspaces.json is not a object array', async () => {\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when workspaces in workspaces.json is not a object array', async () => {\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when files.hotExit = \"onExitAndWindowClose\"', async () => {\n\t\t\tconst upperFooPath = fooFile.fsPath.toUpperCase();\n\t\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(upperFooPath));\n\t\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 1);\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups().map(r => r.workspace.configPath.toString()), [URI.file(upperFooPath).toString()]);\n\t\t\tconfigService.setUserConfiguration('files.hotExit', HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE);\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when folderWorkspaces in workspaces.json is absent', async () => {\n\t\t\twriteWorkspacesMetadata('{}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when folderWorkspaces in workspaces.json is not a string array', async function () {\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t});\n\t});\n\n\tsuite('dedupeFolderWorkspaces', () => {\n\t\ttest('should ignore duplicates (folder workspace)', async () => {\n\n\t\t\tawait ensureFolderExists(existingTestFolder1);\n\n\t\t\tconst workspacesJson: ISerializedBackupWorkspaces = {\n\t\t\t\tworkspaces: [],\n\t\t\t\tfolders: [{ folderUri: existingTestFolder1.toString() }, { folderUri: existingTestFolder1.toString() }],\n\t\t\t\temptyWindows: []\n\t\t\t};\n\t\t\twriteWorkspacesMetadata(JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.deepStrictEqual(json.folders, [{ folderUri: existingTestFolder1.toString() }]);\n\t\t});\n\n\t\ttest('should ignore duplicates on Windows and Mac (folder workspace)', async () => {\n\n\t\t\tawait ensureFolderExists(existingTestFolder1);\n\n\t\t\tconst workspacesJson: ISerializedBackupWorkspaces = {\n\t\t\t\tworkspaces: [],\n\t\t\t\tfolders: [{ folderUri: existingTestFolder1.toString() }, { folderUri: existingTestFolder1.toString().toLowerCase() }],\n\t\t\t\temptyWindows: []\n\t\t\t};\n\t\t\twriteWorkspacesMetadata(JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.deepStrictEqual(json.folders, [{ folderUri: existingTestFolder1.toString() }]);\n\t\t});\n\n\t\ttest('should ignore duplicates on Windows and Mac (root workspace)', async () => {\n\t\t\tconst workspacePath = path.join(testDir, 'Foo.code-workspace');\n\t\t\tconst workspacePath1 = path.join(testDir, 'FOO.code-workspace');\n\t\t\tconst workspacePath2 = path.join(testDir, 'foo.code-workspace');\n\n\t\t\tconst workspace1 = await ensureWorkspaceExists(toWorkspace(workspacePath));\n\t\t\tconst workspace2 = await ensureWorkspaceExists(toWorkspace(workspacePath1));\n\t\t\tconst workspace3 = await ensureWorkspaceExists(toWorkspace(workspacePath2));\n\n\t\t\tconst workspacesJson: ISerializedBackupWorkspaces = {\n\t\t\t\tworkspaces: [workspace1, workspace2, workspace3].map(toSerializedWorkspace),\n\t\t\t\tfolders: [],\n\t\t\t\temptyWindows: []\n\t\t\t};\n\t\t\twriteWorkspacesMetadata(JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.strictEqual(json.workspaces.length, platform.isLinux ? 3 : 1);\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.deepStrictEqual(json.workspaces.map(r => r.configURIPath), [URI.file(workspacePath).toString(), URI.file(workspacePath1).toString(), URI.file(workspacePath2).toString()]);\n\t\t\t} else {\n\t\t\t\tassert.deepStrictEqual(json.workspaces.map(r => r.configURIPath), [URI.file(workspacePath).toString()], 'should return the first duplicated entry');\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('registerWindowForBackups', () => {\n\t\ttest('should persist paths to workspaces.json (folder workspace)', async () => {\n\t\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\t\tservice.registerFolderBackup(toFolderBackupInfo(barFile));\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), [toFolderBackupInfo(fooFile), toFolderBackupInfo(barFile)]);\n\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.deepStrictEqual(json.folders, [{ folderUri: fooFile.toString() }, { folderUri: barFile.toString() }]);\n\t\t});\n\n\t\ttest('should persist paths to workspaces.json (root workspace)', async () => {\n\t\t\tconst ws1 = toWorkspaceBackupInfo(fooFile.fsPath);\n\t\t\tservice.registerWorkspaceBackup(ws1);\n\t\t\tconst ws2 = toWorkspaceBackupInfo(barFile.fsPath);\n\t\t\tservice.registerWorkspaceBackup(ws2);\n\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups().map(b => b.workspace.configPath.toString()), [fooFile.toString(), barFile.toString()]);\n\t\t\tassert.strictEqual(ws1.workspace.id, service.testGetWorkspaceBackups()[0].workspace.id);\n\t\t\tassert.strictEqual(ws2.workspace.id, service.testGetWorkspaceBackups()[1].workspace.id);\n\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.deepStrictEqual(json.workspaces.map(b => b.configURIPath), [fooFile.toString(), barFile.toString()]);\n\t\t\tassert.strictEqual(ws1.workspace.id, json.workspaces[0].id);\n\t\t\tassert.strictEqual(ws2.workspace.id, json.workspaces[1].id);\n\t\t});\n\t});\n\n\ttest('should always store the workspace path in workspaces.json using the case given, regardless of whether the file system is case-sensitive (folder workspace)', async () => {\n\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(fooFile.fsPath.toUpperCase())));\n\t\tassertEqualFolderInfos(service.testGetFolderBackups(), [toFolderBackupInfo(URI.file(fooFile.fsPath.toUpperCase()))]);\n\n\t\tconst json = readWorkspacesMetadata();\n\t\tassert.deepStrictEqual(json.folders, [{ folderUri: URI.file(fooFile.fsPath.toUpperCase()).toString() }]);\n\t});\n\n\ttest('should always store the workspace path in workspaces.json using the case given, regardless of whether the file system is case-sensitive (root workspace)', async () => {\n\t\tconst upperFooPath = fooFile.fsPath.toUpperCase();\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(upperFooPath));\n\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups().map(b => b.workspace.configPath.toString()), [URI.file(upperFooPath).toString()]);\n\n\t\tconst json = readWorkspacesMetadata();\n\t\tassert.deepStrictEqual(json.workspaces.map(b => b.configURIPath), [URI.file(upperFooPath).toString()]);\n\t});\n\n\tsuite('getWorkspaceHash', () => {\n\t\t(platform.isLinux ? test.skip : test)('should ignore case on Windows and Mac', () => {\n\t\t\tconst assertFolderHash = (uri1: URI, uri2: URI) => {\n\t\t\t\tassert.strictEqual(service.testGetFolderHash(toFolderBackupInfo(uri1)), service.testGetFolderHash(toFolderBackupInfo(uri2)));\n\t\t\t};\n\n\t\t\tif (platform.isMacintosh) {\n\t\t\t\tassertFolderHash(URI.file('/foo'), URI.file('/FOO'));\n\t\t\t}\n\n\t\t\tif (platform.isWindows) {\n\t\t\t\tassertFolderHash(URI.file('c:\\\\foo'), URI.file('C:\\\\FOO'));\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('mixed path casing', () => {\n\t\ttest('should handle case insensitive paths properly (registerWindowForBackupsSync) (folder workspace)', () => {\n\t\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(fooFile.fsPath.toUpperCase())));\n\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.strictEqual(service.testGetFolderBackups().length, 2);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(service.testGetFolderBackups().length, 1);\n\t\t\t}\n\t\t});\n\n\t\ttest('should handle case insensitive paths properly (registerWindowForBackupsSync) (root workspace)', () => {\n\t\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath.toUpperCase()));\n\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 2);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 1);\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('getDirtyWorkspaces', () => {\n\t\ttest('should report if a workspace or folder has backups', async () => {\n\t\t\tconst folderBackupPath = service.registerFolderBackup(toFolderBackupInfo(fooFile));\n\n\t\t\tconst backupWorkspaceInfo = toWorkspaceBackupInfo(fooFile.fsPath);\n\t\t\tconst workspaceBackupPath = service.registerWorkspaceBackup(backupWorkspaceInfo);\n\n\t\t\tassert.strictEqual(((await service.getDirtyWorkspaces()).length), 0);\n\n\t\t\ttry {\n\t\t\t\tawait fs.promises.mkdir(path.join(folderBackupPath, Schemas.file), { recursive: true });\n\t\t\t\tawait fs.promises.mkdir(path.join(workspaceBackupPath, Schemas.untitled), { recursive: true });\n\t\t\t} catch (error) {\n\t\t\t\t// ignore - folder might exist already\n\t\t\t}\n\n\t\t\tassert.strictEqual(((await service.getDirtyWorkspaces()).length), 0);\n\n\t\t\tfs.writeFileSync(path.join(folderBackupPath, Schemas.file, '594a4a9d82a277a899d4713a5b08f504'), '');\n\t\t\tfs.writeFileSync(path.join(workspaceBackupPath, Schemas.untitled, '594a4a9d82a277a899d4713a5b08f504'), '');\n\n\t\t\tconst dirtyWorkspaces = await service.getDirtyWorkspaces();\n\t\t\tassert.strictEqual(dirtyWorkspaces.length, 2);\n\n\t\t\tlet found = 0;\n\t\t\tfor (const dirtyWorkpspace of dirtyWorkspaces) {\n\t\t\t\tif (isFolderBackupInfo(dirtyWorkpspace)) {\n\t\t\t\t\tif (isEqual(fooFile, dirtyWorkpspace.folderUri)) {\n\t\t\t\t\t\tfound++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (isEqual(backupWorkspaceInfo.workspace.configPath, dirtyWorkpspace.workspace.configPath)) {\n\t\t\t\t\t\tfound++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassert.strictEqual(found, 2);\n\t\t});\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["path"]
}
