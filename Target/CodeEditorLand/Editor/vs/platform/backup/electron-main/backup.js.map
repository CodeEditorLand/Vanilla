{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/backup/electron-main/backup.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEmptyWindowBackupInfo } from '../node/backup.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IFolderBackupInfo, IWorkspaceBackupInfo } from '../common/backup.js';\n\nexport const IBackupMainService = createDecorator<IBackupMainService>('backupMainService');\n\nexport interface IBackupMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\tisHotExitEnabled(): boolean;\n\n\tgetEmptyWindowBackups(): IEmptyWindowBackupInfo[];\n\n\tregisterWorkspaceBackup(workspaceInfo: IWorkspaceBackupInfo): string;\n\tregisterWorkspaceBackup(workspaceInfo: IWorkspaceBackupInfo, migrateFrom: string): Promise<string>;\n\tregisterFolderBackup(folderInfo: IFolderBackupInfo): string;\n\tregisterEmptyWindowBackup(emptyWindowInfo: IEmptyWindowBackupInfo): string;\n\n\t/**\n\t * All folders or workspaces that are known to have\n\t * backups stored. This call is long running because\n\t * it checks for each backup location if any backups\n\t * are stored.\n\t */\n\tgetDirtyWorkspaces(): Promise<Array<IWorkspaceBackupInfo | IFolderBackupInfo>>;\n}\n"],
  "mappings": "AAKA,SAAS,8BAA8B;AACvC,SAAS,uBAAuB;AAChC,SAAS,mBAAmB,4BAA4B;AAEjD,MAAM,qBAAqB,gBAAoC,mBAAmB;",
  "names": []
}
