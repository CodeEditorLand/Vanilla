{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/progress/common/progress.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IAction } from \"../../../base/common/actions.js\";\nimport { DeferredPromise } from \"../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../base/common/cancellation.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type {\n\tINotificationSource,\n\tNotificationPriority,\n} from \"../../notification/common/notification.js\";\n\nexport const IProgressService =\n\tcreateDecorator<IProgressService>(\"progressService\");\n\n/**\n * A progress service that can be used to report progress to various locations of the UI.\n */\nexport interface IProgressService {\n\treadonly _serviceBrand: undefined;\n\n\twithProgress<R>(\n\t\toptions:\n\t\t\t| IProgressOptions\n\t\t\t| IProgressDialogOptions\n\t\t\t| IProgressNotificationOptions\n\t\t\t| IProgressWindowOptions\n\t\t\t| IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t\tonDidCancel?: (choice?: number) => void,\n\t): Promise<R>;\n}\n\nexport interface IProgressIndicator {\n\t/**\n\t * Show progress customized with the provided flags.\n\t */\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\n\t/**\n\t * Indicate progress for the duration of the provided promise. Progress will stop in\n\t * any case of promise completion, error or cancellation.\n\t */\n\tshowWhile(promise: Promise<unknown>, delay?: number): Promise<void>;\n}\n\nexport enum ProgressLocation {\n\tExplorer = 1,\n\tScm = 3,\n\tExtensions = 5,\n\tWindow = 10,\n\tNotification = 15,\n\tDialog = 20,\n}\n\nexport interface IProgressOptions {\n\treadonly location: ProgressLocation | string;\n\treadonly title?: string;\n\treadonly source?: string | INotificationSource;\n\treadonly total?: number;\n\treadonly cancellable?: boolean;\n\treadonly buttons?: string[];\n}\n\nexport interface IProgressNotificationOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Notification;\n\treadonly primaryActions?: readonly IAction[];\n\treadonly secondaryActions?: readonly IAction[];\n\treadonly delay?: number;\n\treadonly priority?: NotificationPriority;\n\treadonly type?: \"loading\" | \"syncing\";\n}\n\nexport interface IProgressDialogOptions extends IProgressOptions {\n\treadonly delay?: number;\n\treadonly detail?: string;\n\treadonly sticky?: boolean;\n}\n\nexport interface IProgressWindowOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Window;\n\treadonly command?: string;\n\treadonly type?: \"loading\" | \"syncing\";\n}\n\nexport interface IProgressCompositeOptions extends IProgressOptions {\n\treadonly location:\n\t\t| ProgressLocation.Explorer\n\t\t| ProgressLocation.Extensions\n\t\t| ProgressLocation.Scm\n\t\t| string;\n\treadonly delay?: number;\n}\n\nexport interface IProgressStep {\n\tmessage?: string;\n\tincrement?: number;\n\ttotal?: number;\n}\n\nexport interface IProgressRunner {\n\ttotal(value: number): void;\n\tworked(value: number): void;\n\tdone(): void;\n}\n\nexport const emptyProgressRunner = Object.freeze<IProgressRunner>({\n\ttotal() {},\n\tworked() {},\n\tdone() {},\n});\n\nexport interface IProgress<T> {\n\treport(item: T): void;\n}\n\nexport class Progress<T> implements IProgress<T> {\n\tstatic readonly None = Object.freeze<IProgress<unknown>>({ report() {} });\n\n\tprivate _value?: T;\n\tget value(): T | undefined {\n\t\treturn this._value;\n\t}\n\n\tconstructor(private callback: (data: T) => unknown) {}\n\n\treport(item: T) {\n\t\tthis._value = item;\n\t\tthis.callback(this._value);\n\t}\n}\n\nexport class AsyncProgress<T> implements IProgress<T> {\n\tprivate _value?: T;\n\tget value(): T | undefined {\n\t\treturn this._value;\n\t}\n\n\tprivate _asyncQueue?: T[];\n\tprivate _processingAsyncQueue?: boolean;\n\tprivate _drainListener: (() => void) | undefined;\n\n\tconstructor(private callback: (data: T) => unknown) {}\n\n\treport(item: T) {\n\t\tif (this._asyncQueue) {\n\t\t\tthis._asyncQueue.push(item);\n\t\t} else {\n\t\t\tthis._asyncQueue = [item];\n\t\t}\n\t\tthis._processAsyncQueue();\n\t}\n\n\tprivate async _processAsyncQueue() {\n\t\tif (this._processingAsyncQueue) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tthis._processingAsyncQueue = true;\n\n\t\t\twhile (this._asyncQueue && this._asyncQueue.length) {\n\t\t\t\tconst item = this._asyncQueue.shift()!;\n\t\t\t\tthis._value = item;\n\t\t\t\tawait this.callback(this._value);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._processingAsyncQueue = false;\n\t\t\tconst drainListener = this._drainListener;\n\t\t\tthis._drainListener = undefined;\n\t\t\tdrainListener?.();\n\t\t}\n\t}\n\n\tdrain(): Promise<void> {\n\t\tif (this._processingAsyncQueue) {\n\t\t\treturn new Promise<void>((resolve) => {\n\t\t\t\tconst prevListener = this._drainListener;\n\t\t\t\tthis._drainListener = () => {\n\t\t\t\t\tprevListener?.();\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\n/**\n * A helper to show progress during a long running operation. If the operation\n * is started multiple times, only the last invocation will drive the progress.\n */\nexport interface IOperation {\n\tid: number;\n\tisCurrent: () => boolean;\n\ttoken: CancellationToken;\n\tstop(): void;\n}\n\n/**\n * RAII-style progress instance that allows imperative reporting and hides\n * once `dispose()` is called.\n */\nexport class UnmanagedProgress extends Disposable {\n\tprivate readonly deferred = new DeferredPromise<void>();\n\tprivate reporter?: IProgress<IProgressStep>;\n\tprivate lastStep?: IProgressStep;\n\n\tconstructor(\n\t\toptions:\n\t\t\t| IProgressOptions\n\t\t\t| IProgressDialogOptions\n\t\t\t| IProgressNotificationOptions\n\t\t\t| IProgressWindowOptions\n\t\t\t| IProgressCompositeOptions,\n\t\t@IProgressService progressService: IProgressService,\n\t) {\n\t\tsuper();\n\t\tprogressService.withProgress(options, (reporter) => {\n\t\t\tthis.reporter = reporter;\n\t\t\tif (this.lastStep) {\n\t\t\t\treporter.report(this.lastStep);\n\t\t\t}\n\n\t\t\treturn this.deferred.p;\n\t\t});\n\n\t\tthis._register(toDisposable(() => this.deferred.complete()));\n\t}\n\n\treport(step: IProgressStep) {\n\t\tif (this.reporter) {\n\t\t\tthis.reporter.report(step);\n\t\t} else {\n\t\t\tthis.lastStep = step;\n\t\t}\n\t}\n}\n\nexport class LongRunningOperation extends Disposable {\n\tprivate currentOperationId = 0;\n\tprivate readonly currentOperationDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate currentProgressRunner: IProgressRunner | undefined;\n\tprivate currentProgressTimeout: any;\n\n\tconstructor(private progressIndicator: IProgressIndicator) {\n\t\tsuper();\n\t}\n\n\tstart(progressDelay: number): IOperation {\n\t\t// Stop any previous operation\n\t\tthis.stop();\n\n\t\t// Start new\n\t\tconst newOperationId = ++this.currentOperationId;\n\t\tconst newOperationToken = new CancellationTokenSource();\n\t\tthis.currentProgressTimeout = setTimeout(() => {\n\t\t\tif (newOperationId === this.currentOperationId) {\n\t\t\t\tthis.currentProgressRunner = this.progressIndicator.show(true);\n\t\t\t}\n\t\t}, progressDelay);\n\n\t\tthis.currentOperationDisposables.add(\n\t\t\ttoDisposable(() => clearTimeout(this.currentProgressTimeout)),\n\t\t);\n\t\tthis.currentOperationDisposables.add(\n\t\t\ttoDisposable(() => newOperationToken.cancel()),\n\t\t);\n\t\tthis.currentOperationDisposables.add(\n\t\t\ttoDisposable(() =>\n\t\t\t\tthis.currentProgressRunner\n\t\t\t\t\t? this.currentProgressRunner.done()\n\t\t\t\t\t: undefined,\n\t\t\t),\n\t\t);\n\n\t\treturn {\n\t\t\tid: newOperationId,\n\t\t\ttoken: newOperationToken.token,\n\t\t\tstop: () => this.doStop(newOperationId),\n\t\t\tisCurrent: () => this.currentOperationId === newOperationId,\n\t\t};\n\t}\n\n\tstop(): void {\n\t\tthis.doStop(this.currentOperationId);\n\t}\n\n\tprivate doStop(operationId: number): void {\n\t\tif (this.currentOperationId === operationId) {\n\t\t\tthis.currentOperationDisposables.clear();\n\t\t}\n\t}\n}\n\nexport const IEditorProgressService = createDecorator<IEditorProgressService>(\n\t\"editorProgressService\",\n);\n\n/**\n * A progress service that will report progress local to the editor triggered from.\n */\nexport interface IEditorProgressService extends IProgressIndicator {\n\treadonly _serviceBrand: undefined;\n}\n"],
  "mappings": "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",
  "names": ["ProgressLocation"]
}
