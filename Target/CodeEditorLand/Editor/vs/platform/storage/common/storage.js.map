{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/common/storage.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises, RunOnceScheduler, runWhenGlobalIdle } from '../../../base/common/async.js';\nimport { Emitter, Event, PauseableEmitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, dispose, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { mark } from '../../../base/common/performance.js';\nimport { isUndefinedOrNull } from '../../../base/common/types.js';\nimport { InMemoryStorageDatabase, IStorage, IStorageChangeEvent, Storage, StorageHint, StorageValue } from '../../../base/parts/storage/common/storage.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { isUserDataProfile, IUserDataProfile } from '../../userDataProfile/common/userDataProfile.js';\nimport { IAnyWorkspaceIdentifier } from '../../workspace/common/workspace.js';\n\nexport const IS_NEW_KEY = '__$__isNewStorageMarker';\nexport const TARGET_KEY = '__$__targetStorageMarker';\n\nexport const IStorageService = createDecorator<IStorageService>('storageService');\n\nexport enum WillSaveStateReason {\n\n\t/**\n\t * No specific reason to save state.\n\t */\n\tNONE,\n\n\t/**\n\t * A hint that the workbench is about to shutdown.\n\t */\n\tSHUTDOWN\n}\n\nexport interface IWillSaveStateEvent {\n\treadonly reason: WillSaveStateReason;\n}\n\nexport interface IStorageEntry {\n\treadonly key: string;\n\treadonly value: StorageValue;\n\treadonly scope: StorageScope;\n\treadonly target: StorageTarget;\n}\n\nexport interface IWorkspaceStorageValueChangeEvent extends IStorageValueChangeEvent {\n\treadonly scope: StorageScope.WORKSPACE;\n}\n\nexport interface IProfileStorageValueChangeEvent extends IStorageValueChangeEvent {\n\treadonly scope: StorageScope.PROFILE;\n}\n\nexport interface IApplicationStorageValueChangeEvent extends IStorageValueChangeEvent {\n\treadonly scope: StorageScope.APPLICATION;\n}\n\nexport interface IStorageService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emitted whenever data is updated or deleted on the given\n\t * scope and optional key.\n\t *\n\t * @param scope the `StorageScope` to listen to changes\n\t * @param key the optional key to filter for or all keys of\n\t * the scope if `undefined`\n\t */\n\tonDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent>;\n\n\t/**\n\t * Emitted whenever target of a storage entry changes.\n\t */\n\treadonly onDidChangeTarget: Event<IStorageTargetChangeEvent>;\n\n\t/**\n\t * Emitted when the storage is about to persist. This is the right time\n\t * to persist data to ensure it is stored before the application shuts\n\t * down.\n\t *\n\t * The will save state event allows to optionally ask for the reason of\n\t * saving the state, e.g. to find out if the state is saved due to a\n\t * shutdown.\n\t *\n\t * Note: this event may be fired many times, not only on shutdown to prevent\n\t * loss of state in situations where the shutdown is not sufficient to\n\t * persist the data properly.\n\t */\n\treadonly onWillSaveState: Event<IWillSaveStateEvent>;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided `defaultValue` if the element is `null` or `undefined`.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t */\n\tget(key: string, scope: StorageScope, fallbackValue: string): string;\n\tget(key: string, scope: StorageScope, fallbackValue?: string): string | undefined;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided `defaultValue` if the element is `null` or `undefined`.\n\t * The element will be converted to a `boolean`.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t */\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue: boolean): boolean;\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue?: boolean): boolean | undefined;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided `defaultValue` if the element is `null` or `undefined`.\n\t * The element will be converted to a `number` using `parseInt` with a\n\t * base of `10`.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t */\n\tgetNumber(key: string, scope: StorageScope, fallbackValue: number): number;\n\tgetNumber(key: string, scope: StorageScope, fallbackValue?: number): number | undefined;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided `defaultValue` if the element is `null` or `undefined`.\n\t * The element will be converted to a `object` using `JSON.parse`.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t */\n\tgetObject<T extends object>(key: string, scope: StorageScope, fallbackValue: T): T;\n\tgetObject<T extends object>(key: string, scope: StorageScope, fallbackValue?: T): T | undefined;\n\n\t/**\n\t * Store a value under the given key to storage. The value will be\n\t * converted to a `string`. Storing either `undefined` or `null` will\n\t * remove the entry under the key.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t *\n\t * @param target allows to define the target of the storage operation\n\t * to either the current machine or user.\n\t */\n\tstore(key: string, value: StorageValue, scope: StorageScope, target: StorageTarget): void;\n\n\t/**\n\t * Allows to store multiple values in a bulk operation. Events will only\n\t * be emitted when all values have been stored.\n\t *\n\t * @param external a hint to indicate the source of the operation is external,\n\t * such as settings sync or profile changes.\n\t */\n\tstoreAll(entries: Array<IStorageEntry>, external: boolean): void;\n\n\t/**\n\t * Delete an element stored under the provided key from storage.\n\t *\n\t * The scope argument allows to define the scope of the storage\n\t * operation to either the current workspace only, all workspaces\n\t * or all profiles.\n\t */\n\tremove(key: string, scope: StorageScope): void;\n\n\t/**\n\t * Returns all the keys used in the storage for the provided `scope`\n\t * and `target`.\n\t *\n\t * Note: this will NOT return all keys stored in the storage layer.\n\t * Some keys may not have an associated `StorageTarget` and thus\n\t * will be excluded from the results.\n\t *\n\t * @param scope allows to define the scope for the keys\n\t * to either the current workspace only, all workspaces or all profiles.\n\t *\n\t * @param target allows to define the target for the keys\n\t * to either the current machine or user.\n\t */\n\tkeys(scope: StorageScope, target: StorageTarget): string[];\n\n\t/**\n\t * Log the contents of the storage to the console.\n\t */\n\tlog(): void;\n\n\t/**\n\t * Returns true if the storage service handles the provided scope.\n\t */\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean;\n\n\t/**\n\t * Switch storage to another workspace or profile. Optionally preserve the\n\t * current data to the new storage.\n\t */\n\tswitch(to: IAnyWorkspaceIdentifier | IUserDataProfile, preserveData: boolean): Promise<void>;\n\n\t/**\n\t * Whether the storage for the given scope was created during this session or\n\t * existed before.\n\t */\n\tisNew(scope: StorageScope): boolean;\n\n\t/**\n\t * Attempts to reduce the DB size via optimization commands if supported.\n\t */\n\toptimize(scope: StorageScope): Promise<void>;\n\n\t/**\n\t * Allows to flush state, e.g. in cases where a shutdown is\n\t * imminent. This will send out the `onWillSaveState` to ask\n\t * everyone for latest state.\n\t *\n\t * @returns a `Promise` that can be awaited on when all updates\n\t * to the underlying storage have been flushed.\n\t */\n\tflush(reason?: WillSaveStateReason): Promise<void>;\n}\n\nexport const enum StorageScope {\n\n\t/**\n\t * The stored data will be scoped to all workspaces across all profiles.\n\t */\n\tAPPLICATION = -1,\n\n\t/**\n\t * The stored data will be scoped to all workspaces of the same profile.\n\t */\n\tPROFILE = 0,\n\n\t/**\n\t * The stored data will be scoped to the current workspace.\n\t */\n\tWORKSPACE = 1\n}\n\nexport const enum StorageTarget {\n\n\t/**\n\t * The stored data is user specific and applies across machines.\n\t */\n\tUSER,\n\n\t/**\n\t * The stored data is machine specific.\n\t */\n\tMACHINE\n}\n\nexport interface IStorageValueChangeEvent {\n\n\t/**\n\t * The scope for the storage entry that changed\n\t * or was removed.\n\t */\n\treadonly scope: StorageScope;\n\n\t/**\n\t * The `key` of the storage entry that was changed\n\t * or was removed.\n\t */\n\treadonly key: string;\n\n\t/**\n\t * The `target` can be `undefined` if a key is being\n\t * removed.\n\t */\n\treadonly target: StorageTarget | undefined;\n\n\t/**\n\t * A hint how the storage change event was triggered. If\n\t * `true`, the storage change was triggered by an external\n\t * source, such as:\n\t * - another process (for example another window)\n\t * - operations such as settings sync or profiles change\n\t */\n\treadonly external?: boolean;\n}\n\nexport interface IStorageTargetChangeEvent {\n\n\t/**\n\t * The scope for the target that changed. Listeners\n\t * should use `keys(scope, target)` to get an updated\n\t * list of keys for the given `scope` and `target`.\n\t */\n\treadonly scope: StorageScope;\n}\n\ninterface IKeyTargets {\n\t[key: string]: StorageTarget;\n}\n\nexport interface IStorageServiceOptions {\n\treadonly flushInterval: number;\n}\n\nexport function loadKeyTargets(storage: IStorage): IKeyTargets {\n\tconst keysRaw = storage.get(TARGET_KEY);\n\tif (keysRaw) {\n\t\ttry {\n\t\t\treturn JSON.parse(keysRaw);\n\t\t} catch (error) {\n\t\t\t// Fail gracefully\n\t\t}\n\t}\n\n\treturn Object.create(null);\n}\n\nexport abstract class AbstractStorageService extends Disposable implements IStorageService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static DEFAULT_FLUSH_INTERVAL = 60 * 1000; // every minute\n\n\tprivate readonly _onDidChangeValue = this._register(new PauseableEmitter<IStorageValueChangeEvent>());\n\n\tprivate readonly _onDidChangeTarget = this._register(new PauseableEmitter<IStorageTargetChangeEvent>());\n\treadonly onDidChangeTarget = this._onDidChangeTarget.event;\n\n\tprivate readonly _onWillSaveState = this._register(new Emitter<IWillSaveStateEvent>());\n\treadonly onWillSaveState = this._onWillSaveState.event;\n\n\tprivate initializationPromise: Promise<void> | undefined;\n\n\tprivate readonly flushWhenIdleScheduler = this._register(new RunOnceScheduler(() => this.doFlushWhenIdle(), this.options.flushInterval));\n\tprivate readonly runFlushWhenIdle = this._register(new MutableDisposable());\n\n\tconstructor(private readonly options: IStorageServiceOptions = { flushInterval: AbstractStorageService.DEFAULT_FLUSH_INTERVAL }) {\n\t\tsuper();\n\t}\n\n\tonDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent> {\n\t\treturn Event.filter(this._onDidChangeValue.event, e => e.scope === scope && (key === undefined || e.key === key), disposable);\n\t}\n\n\tprivate doFlushWhenIdle(): void {\n\t\tthis.runFlushWhenIdle.value = runWhenGlobalIdle(() => {\n\t\t\tif (this.shouldFlushWhenIdle()) {\n\t\t\t\tthis.flush();\n\t\t\t}\n\n\t\t\t// repeat\n\t\t\tthis.flushWhenIdleScheduler.schedule();\n\t\t});\n\t}\n\n\tprotected shouldFlushWhenIdle(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected stopFlushWhenIdle(): void {\n\t\tdispose([this.runFlushWhenIdle, this.flushWhenIdleScheduler]);\n\t}\n\n\tinitialize(): Promise<void> {\n\t\tif (!this.initializationPromise) {\n\t\t\tthis.initializationPromise = (async () => {\n\n\t\t\t\t// Init all storage locations\n\t\t\t\tmark('code/willInitStorage');\n\t\t\t\ttry {\n\t\t\t\t\tawait this.doInitialize(); // Ask subclasses to initialize storage\n\t\t\t\t} finally {\n\t\t\t\t\tmark('code/didInitStorage');\n\t\t\t\t}\n\n\t\t\t\t// On some OS we do not get enough time to persist state on shutdown (e.g. when\n\t\t\t\t// Windows restarts after applying updates). In other cases, VSCode might crash,\n\t\t\t\t// so we periodically save state to reduce the chance of loosing any state.\n\t\t\t\t// In the browser we do not have support for long running unload sequences. As such,\n\t\t\t\t// we cannot ask for saving state in that moment, because that would result in a\n\t\t\t\t// long running operation.\n\t\t\t\t// Instead, periodically ask customers to save save. The library will be clever enough\n\t\t\t\t// to only save state that has actually changed.\n\t\t\t\tthis.flushWhenIdleScheduler.schedule();\n\t\t\t})();\n\t\t}\n\n\t\treturn this.initializationPromise;\n\t}\n\n\tprotected emitDidChangeValue(scope: StorageScope, event: IStorageChangeEvent): void {\n\t\tconst { key, external } = event;\n\n\t\t// Specially handle `TARGET_KEY`\n\t\tif (key === TARGET_KEY) {\n\n\t\t\t// Clear our cached version which is now out of date\n\t\t\tswitch (scope) {\n\t\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\t\tthis._applicationKeyTargets = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\tcase StorageScope.PROFILE:\n\t\t\t\t\tthis._profileKeyTargets = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\tcase StorageScope.WORKSPACE:\n\t\t\t\t\tthis._workspaceKeyTargets = undefined;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Emit as `didChangeTarget` event\n\t\t\tthis._onDidChangeTarget.fire({ scope });\n\t\t}\n\n\t\t// Emit any other key to outside\n\t\telse {\n\t\t\tthis._onDidChangeValue.fire({ scope, key, target: this.getKeyTargets(scope)[key], external });\n\t\t}\n\t}\n\n\tprotected emitWillSaveState(reason: WillSaveStateReason): void {\n\t\tthis._onWillSaveState.fire({ reason });\n\t}\n\n\tget(key: string, scope: StorageScope, fallbackValue: string): string;\n\tget(key: string, scope: StorageScope): string | undefined;\n\tget(key: string, scope: StorageScope, fallbackValue?: string): string | undefined {\n\t\treturn this.getStorage(scope)?.get(key, fallbackValue);\n\t}\n\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue: boolean): boolean;\n\tgetBoolean(key: string, scope: StorageScope): boolean | undefined;\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue?: boolean): boolean | undefined {\n\t\treturn this.getStorage(scope)?.getBoolean(key, fallbackValue);\n\t}\n\n\tgetNumber(key: string, scope: StorageScope, fallbackValue: number): number;\n\tgetNumber(key: string, scope: StorageScope): number | undefined;\n\tgetNumber(key: string, scope: StorageScope, fallbackValue?: number): number | undefined {\n\t\treturn this.getStorage(scope)?.getNumber(key, fallbackValue);\n\t}\n\n\tgetObject(key: string, scope: StorageScope, fallbackValue: object): object;\n\tgetObject(key: string, scope: StorageScope): object | undefined;\n\tgetObject(key: string, scope: StorageScope, fallbackValue?: object): object | undefined {\n\t\treturn this.getStorage(scope)?.getObject(key, fallbackValue);\n\t}\n\n\tstoreAll(entries: Array<IStorageEntry>, external: boolean): void {\n\t\tthis.withPausedEmitters(() => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tthis.store(entry.key, entry.value, entry.scope, entry.target, external);\n\t\t\t}\n\t\t});\n\t}\n\n\tstore(key: string, value: StorageValue, scope: StorageScope, target: StorageTarget, external = false): void {\n\n\t\t// We remove the key for undefined/null values\n\t\tif (isUndefinedOrNull(value)) {\n\t\t\tthis.remove(key, scope, external);\n\t\t\treturn;\n\t\t}\n\n\t\t// Update our datastructures but send events only after\n\t\tthis.withPausedEmitters(() => {\n\n\t\t\t// Update key-target map\n\t\t\tthis.updateKeyTarget(key, scope, target);\n\n\t\t\t// Store actual value\n\t\t\tthis.getStorage(scope)?.set(key, value, external);\n\t\t});\n\t}\n\n\tremove(key: string, scope: StorageScope, external = false): void {\n\n\t\t// Update our datastructures but send events only after\n\t\tthis.withPausedEmitters(() => {\n\n\t\t\t// Update key-target map\n\t\t\tthis.updateKeyTarget(key, scope, undefined);\n\n\t\t\t// Remove actual key\n\t\t\tthis.getStorage(scope)?.delete(key, external);\n\t\t});\n\t}\n\n\tprivate withPausedEmitters(fn: Function): void {\n\n\t\t// Pause emitters\n\t\tthis._onDidChangeValue.pause();\n\t\tthis._onDidChangeTarget.pause();\n\n\t\ttry {\n\t\t\tfn();\n\t\t} finally {\n\n\t\t\t// Resume emitters\n\t\t\tthis._onDidChangeValue.resume();\n\t\t\tthis._onDidChangeTarget.resume();\n\t\t}\n\t}\n\n\tkeys(scope: StorageScope, target: StorageTarget): string[] {\n\t\tconst keys: string[] = [];\n\n\t\tconst keyTargets = this.getKeyTargets(scope);\n\t\tfor (const key of Object.keys(keyTargets)) {\n\t\t\tconst keyTarget = keyTargets[key];\n\t\t\tif (keyTarget === target) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\tprivate updateKeyTarget(key: string, scope: StorageScope, target: StorageTarget | undefined, external = false): void {\n\n\t\t// Add\n\t\tconst keyTargets = this.getKeyTargets(scope);\n\t\tif (typeof target === 'number') {\n\t\t\tif (keyTargets[key] !== target) {\n\t\t\t\tkeyTargets[key] = target;\n\t\t\t\tthis.getStorage(scope)?.set(TARGET_KEY, JSON.stringify(keyTargets), external);\n\t\t\t}\n\t\t}\n\n\t\t// Remove\n\t\telse {\n\t\t\tif (typeof keyTargets[key] === 'number') {\n\t\t\t\tdelete keyTargets[key];\n\t\t\t\tthis.getStorage(scope)?.set(TARGET_KEY, JSON.stringify(keyTargets), external);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _workspaceKeyTargets: IKeyTargets | undefined = undefined;\n\tprivate get workspaceKeyTargets(): IKeyTargets {\n\t\tif (!this._workspaceKeyTargets) {\n\t\t\tthis._workspaceKeyTargets = this.loadKeyTargets(StorageScope.WORKSPACE);\n\t\t}\n\n\t\treturn this._workspaceKeyTargets;\n\t}\n\n\tprivate _profileKeyTargets: IKeyTargets | undefined = undefined;\n\tprivate get profileKeyTargets(): IKeyTargets {\n\t\tif (!this._profileKeyTargets) {\n\t\t\tthis._profileKeyTargets = this.loadKeyTargets(StorageScope.PROFILE);\n\t\t}\n\n\t\treturn this._profileKeyTargets;\n\t}\n\n\tprivate _applicationKeyTargets: IKeyTargets | undefined = undefined;\n\tprivate get applicationKeyTargets(): IKeyTargets {\n\t\tif (!this._applicationKeyTargets) {\n\t\t\tthis._applicationKeyTargets = this.loadKeyTargets(StorageScope.APPLICATION);\n\t\t}\n\n\t\treturn this._applicationKeyTargets;\n\t}\n\n\tprivate getKeyTargets(scope: StorageScope): IKeyTargets {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationKeyTargets;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileKeyTargets;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceKeyTargets;\n\t\t}\n\t}\n\n\tprivate loadKeyTargets(scope: StorageScope): { [key: string]: StorageTarget } {\n\t\tconst storage = this.getStorage(scope);\n\n\t\treturn storage ? loadKeyTargets(storage) : Object.create(null);\n\t}\n\n\tisNew(scope: StorageScope): boolean {\n\t\treturn this.getBoolean(IS_NEW_KEY, scope) === true;\n\t}\n\n\tasync flush(reason = WillSaveStateReason.NONE): Promise<void> {\n\n\t\t// Signal event to collect changes\n\t\tthis._onWillSaveState.fire({ reason });\n\n\t\tconst applicationStorage = this.getStorage(StorageScope.APPLICATION);\n\t\tconst profileStorage = this.getStorage(StorageScope.PROFILE);\n\t\tconst workspaceStorage = this.getStorage(StorageScope.WORKSPACE);\n\n\t\tswitch (reason) {\n\n\t\t\t// Unspecific reason: just wait when data is flushed\n\t\t\tcase WillSaveStateReason.NONE:\n\t\t\t\tawait Promises.settled([\n\t\t\t\t\tapplicationStorage?.whenFlushed() ?? Promise.resolve(),\n\t\t\t\t\tprofileStorage?.whenFlushed() ?? Promise.resolve(),\n\t\t\t\t\tworkspaceStorage?.whenFlushed() ?? Promise.resolve()\n\t\t\t\t]);\n\t\t\t\tbreak;\n\n\t\t\t// Shutdown: we want to flush as soon as possible\n\t\t\t// and not hit any delays that might be there\n\t\t\tcase WillSaveStateReason.SHUTDOWN:\n\t\t\t\tawait Promises.settled([\n\t\t\t\t\tapplicationStorage?.flush(0) ?? Promise.resolve(),\n\t\t\t\t\tprofileStorage?.flush(0) ?? Promise.resolve(),\n\t\t\t\t\tworkspaceStorage?.flush(0) ?? Promise.resolve()\n\t\t\t\t]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tasync log(): Promise<void> {\n\t\tconst applicationItems = this.getStorage(StorageScope.APPLICATION)?.items ?? new Map<string, string>();\n\t\tconst profileItems = this.getStorage(StorageScope.PROFILE)?.items ?? new Map<string, string>();\n\t\tconst workspaceItems = this.getStorage(StorageScope.WORKSPACE)?.items ?? new Map<string, string>();\n\n\t\treturn logStorage(\n\t\t\tapplicationItems,\n\t\t\tprofileItems,\n\t\t\tworkspaceItems,\n\t\t\tthis.getLogDetails(StorageScope.APPLICATION) ?? '',\n\t\t\tthis.getLogDetails(StorageScope.PROFILE) ?? '',\n\t\t\tthis.getLogDetails(StorageScope.WORKSPACE) ?? ''\n\t\t);\n\t}\n\n\tasync optimize(scope: StorageScope): Promise<void> {\n\n\t\t// Await pending data to be flushed to the DB\n\t\t// before attempting to optimize the DB\n\t\tawait this.flush();\n\n\t\treturn this.getStorage(scope)?.optimize();\n\t}\n\n\tasync switch(to: IAnyWorkspaceIdentifier | IUserDataProfile, preserveData: boolean): Promise<void> {\n\n\t\t// Signal as event so that clients can store data before we switch\n\t\tthis.emitWillSaveState(WillSaveStateReason.NONE);\n\n\t\tif (isUserDataProfile(to)) {\n\t\t\treturn this.switchToProfile(to, preserveData);\n\t\t}\n\n\t\treturn this.switchToWorkspace(to, preserveData);\n\t}\n\n\tprotected canSwitchProfile(from: IUserDataProfile, to: IUserDataProfile): boolean {\n\t\tif (from.id === to.id) {\n\t\t\treturn false; // both profiles are same\n\t\t}\n\n\t\tif (isProfileUsingDefaultStorage(to) && isProfileUsingDefaultStorage(from)) {\n\t\t\treturn false; // both profiles are using default\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected switchData(oldStorage: Map<string, string>, newStorage: IStorage, scope: StorageScope): void {\n\t\tthis.withPausedEmitters(() => {\n\t\t\t// Signal storage keys that have changed\n\t\t\tconst handledkeys = new Set<string>();\n\t\t\tfor (const [key, oldValue] of oldStorage) {\n\t\t\t\thandledkeys.add(key);\n\n\t\t\t\tconst newValue = newStorage.get(key);\n\t\t\t\tif (newValue !== oldValue) {\n\t\t\t\t\tthis.emitDidChangeValue(scope, { key, external: true });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [key] of newStorage.items) {\n\t\t\t\tif (!handledkeys.has(key)) {\n\t\t\t\t\tthis.emitDidChangeValue(scope, { key, external: true });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// --- abstract\n\n\tabstract hasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean;\n\n\tprotected abstract doInitialize(): Promise<void>;\n\n\tprotected abstract getStorage(scope: StorageScope): IStorage | undefined;\n\n\tprotected abstract getLogDetails(scope: StorageScope): string | undefined;\n\n\tprotected abstract switchToProfile(toProfile: IUserDataProfile, preserveData: boolean): Promise<void>;\n\tprotected abstract switchToWorkspace(toWorkspace: IAnyWorkspaceIdentifier | IUserDataProfile, preserveData: boolean): Promise<void>;\n}\n\nexport function isProfileUsingDefaultStorage(profile: IUserDataProfile): boolean {\n\treturn profile.isDefault || !!profile.useDefaultFlags?.globalState;\n}\n\nexport class InMemoryStorageService extends AbstractStorageService {\n\n\tprivate readonly applicationStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n\tprivate readonly profileStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n\tprivate readonly workspaceStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._register(this.workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.WORKSPACE, e)));\n\t\tthis._register(this.profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.PROFILE, e)));\n\t\tthis._register(this.applicationStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.APPLICATION, e)));\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorage;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorage;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorage;\n\t\t}\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn 'inMemory (application)';\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn 'inMemory (profile)';\n\t\t\tdefault:\n\t\t\t\treturn 'inMemory (workspace)';\n\t\t}\n\t}\n\n\tprotected async doInitialize(): Promise<void> { }\n\n\tprotected async switchToProfile(): Promise<void> {\n\t\t// no-op when in-memory\n\t}\n\n\tprotected async switchToWorkspace(): Promise<void> {\n\t\t// no-op when in-memory\n\t}\n\n\tprotected override shouldFlushWhenIdle(): boolean {\n\t\treturn false;\n\t}\n\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean {\n\t\treturn false;\n\t}\n}\n\nexport async function logStorage(application: Map<string, string>, profile: Map<string, string>, workspace: Map<string, string>, applicationPath: string, profilePath: string, workspacePath: string): Promise<void> {\n\tconst safeParse = (value: string) => {\n\t\ttry {\n\t\t\treturn JSON.parse(value);\n\t\t} catch (error) {\n\t\t\treturn value;\n\t\t}\n\t};\n\n\tconst applicationItems = new Map<string, string>();\n\tconst applicationItemsParsed = new Map<string, string>();\n\tapplication.forEach((value, key) => {\n\t\tapplicationItems.set(key, value);\n\t\tapplicationItemsParsed.set(key, safeParse(value));\n\t});\n\n\tconst profileItems = new Map<string, string>();\n\tconst profileItemsParsed = new Map<string, string>();\n\tprofile.forEach((value, key) => {\n\t\tprofileItems.set(key, value);\n\t\tprofileItemsParsed.set(key, safeParse(value));\n\t});\n\n\tconst workspaceItems = new Map<string, string>();\n\tconst workspaceItemsParsed = new Map<string, string>();\n\tworkspace.forEach((value, key) => {\n\t\tworkspaceItems.set(key, value);\n\t\tworkspaceItemsParsed.set(key, safeParse(value));\n\t});\n\n\tif (applicationPath !== profilePath) {\n\t\tconsole.group(`Storage: Application (path: ${applicationPath})`);\n\t} else {\n\t\tconsole.group(`Storage: Application & Profile (path: ${applicationPath}, default profile)`);\n\t}\n\tconst applicationValues: { key: string; value: string }[] = [];\n\tapplicationItems.forEach((value, key) => {\n\t\tapplicationValues.push({ key, value });\n\t});\n\tconsole.table(applicationValues);\n\tconsole.groupEnd();\n\n\tconsole.log(applicationItemsParsed);\n\n\tif (applicationPath !== profilePath) {\n\t\tconsole.group(`Storage: Profile (path: ${profilePath}, profile specific)`);\n\t\tconst profileValues: { key: string; value: string }[] = [];\n\t\tprofileItems.forEach((value, key) => {\n\t\t\tprofileValues.push({ key, value });\n\t\t});\n\t\tconsole.table(profileValues);\n\t\tconsole.groupEnd();\n\n\t\tconsole.log(profileItemsParsed);\n\t}\n\n\tconsole.group(`Storage: Workspace (path: ${workspacePath})`);\n\tconst workspaceValues: { key: string; value: string }[] = [];\n\tworkspaceItems.forEach((value, key) => {\n\t\tworkspaceValues.push({ key, value });\n\t});\n\tconsole.table(workspaceValues);\n\tconsole.groupEnd();\n\n\tconsole.log(workspaceItemsParsed);\n}\n"],
  "mappings": "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",
  "names": ["WillSaveStateReason", "StorageScope", "StorageTarget"]
}
