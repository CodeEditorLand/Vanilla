{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/common/storageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from \"../../../base/common/async.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { joinPath } from \"../../../base/common/resources.js\";\nimport {\n\ttype IStorage,\n\tStorage,\n} from \"../../../base/parts/storage/common/storage.js\";\nimport type { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport type { IRemoteService } from \"../../ipc/common/services.js\";\nimport {\n\ttype IUserDataProfile,\n\tisUserDataProfile,\n} from \"../../userDataProfile/common/userDataProfile.js\";\nimport type { IAnyWorkspaceIdentifier } from \"../../workspace/common/workspace.js\";\nimport {\n\tAbstractStorageService,\n\tStorageScope,\n\tWillSaveStateReason,\n\tisProfileUsingDefaultStorage,\n} from \"./storage.js\";\nimport {\n\tApplicationStorageDatabaseClient,\n\tProfileStorageDatabaseClient,\n\tWorkspaceStorageDatabaseClient,\n} from \"./storageIpc.js\";\n\nexport class RemoteStorageService extends AbstractStorageService {\n\tprivate readonly applicationStorageProfile =\n\t\tthis.initialProfiles.defaultProfile;\n\tprivate readonly applicationStorage = this.createApplicationStorage();\n\n\tprivate profileStorageProfile = this.initialProfiles.currentProfile;\n\tprivate readonly profileStorageDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate profileStorage = this.createProfileStorage(\n\t\tthis.profileStorageProfile,\n\t);\n\n\tprivate workspaceStorageId = this.initialWorkspace?.id;\n\tprivate readonly workspaceStorageDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate workspaceStorage = this.createWorkspaceStorage(\n\t\tthis.initialWorkspace,\n\t);\n\n\tconstructor(\n\t\tprivate readonly initialWorkspace: IAnyWorkspaceIdentifier | undefined,\n\t\tprivate readonly initialProfiles: {\n\t\t\tdefaultProfile: IUserDataProfile;\n\t\t\tcurrentProfile: IUserDataProfile;\n\t\t},\n\t\tprivate readonly remoteService: IRemoteService,\n\t\tprivate readonly environmentService: IEnvironmentService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate createApplicationStorage(): IStorage {\n\t\tconst storageDataBaseClient = this._register(\n\t\t\tnew ApplicationStorageDatabaseClient(\n\t\t\t\tthis.remoteService.getChannel(\"storage\"),\n\t\t\t),\n\t\t);\n\t\tconst applicationStorage = this._register(\n\t\t\tnew Storage(storageDataBaseClient),\n\t\t);\n\n\t\tthis._register(\n\t\t\tapplicationStorage.onDidChangeStorage((e) =>\n\t\t\t\tthis.emitDidChangeValue(StorageScope.APPLICATION, e),\n\t\t\t),\n\t\t);\n\n\t\treturn applicationStorage;\n\t}\n\n\tprivate createProfileStorage(profile: IUserDataProfile): IStorage {\n\t\t// First clear any previously associated disposables\n\t\tthis.profileStorageDisposables.clear();\n\n\t\t// Remember profile associated to profile storage\n\t\tthis.profileStorageProfile = profile;\n\n\t\tlet profileStorage: IStorage;\n\t\tif (isProfileUsingDefaultStorage(profile)) {\n\t\t\t// If we are using default profile storage, the profile storage is\n\t\t\t// actually the same as application storage. As such we\n\t\t\t// avoid creating the storage library a second time on\n\t\t\t// the same DB.\n\n\t\t\tprofileStorage = this.applicationStorage;\n\t\t} else {\n\t\t\tconst storageDataBaseClient = this.profileStorageDisposables.add(\n\t\t\t\tnew ProfileStorageDatabaseClient(\n\t\t\t\t\tthis.remoteService.getChannel(\"storage\"),\n\t\t\t\t\tprofile,\n\t\t\t\t),\n\t\t\t);\n\t\t\tprofileStorage = this.profileStorageDisposables.add(\n\t\t\t\tnew Storage(storageDataBaseClient),\n\t\t\t);\n\t\t}\n\n\t\tthis.profileStorageDisposables.add(\n\t\t\tprofileStorage.onDidChangeStorage((e) =>\n\t\t\t\tthis.emitDidChangeValue(StorageScope.PROFILE, e),\n\t\t\t),\n\t\t);\n\n\t\treturn profileStorage;\n\t}\n\n\tprivate createWorkspaceStorage(\n\t\tworkspace: IAnyWorkspaceIdentifier,\n\t): IStorage;\n\tprivate createWorkspaceStorage(\n\t\tworkspace: IAnyWorkspaceIdentifier | undefined,\n\t): IStorage | undefined;\n\tprivate createWorkspaceStorage(\n\t\tworkspace: IAnyWorkspaceIdentifier | undefined,\n\t): IStorage | undefined {\n\t\t// First clear any previously associated disposables\n\t\tthis.workspaceStorageDisposables.clear();\n\n\t\t// Remember workspace ID for logging later\n\t\tthis.workspaceStorageId = workspace?.id;\n\n\t\tlet workspaceStorage: IStorage | undefined;\n\t\tif (workspace) {\n\t\t\tconst storageDataBaseClient = this.workspaceStorageDisposables.add(\n\t\t\t\tnew WorkspaceStorageDatabaseClient(\n\t\t\t\t\tthis.remoteService.getChannel(\"storage\"),\n\t\t\t\t\tworkspace,\n\t\t\t\t),\n\t\t\t);\n\t\t\tworkspaceStorage = this.workspaceStorageDisposables.add(\n\t\t\t\tnew Storage(storageDataBaseClient),\n\t\t\t);\n\n\t\t\tthis.workspaceStorageDisposables.add(\n\t\t\t\tworkspaceStorage.onDidChangeStorage((e) =>\n\t\t\t\t\tthis.emitDidChangeValue(StorageScope.WORKSPACE, e),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn workspaceStorage;\n\t}\n\n\tprotected async doInitialize(): Promise<void> {\n\t\t// Init all storage locations\n\t\tawait Promises.settled([\n\t\t\tthis.applicationStorage.init(),\n\t\t\tthis.profileStorage.init(),\n\t\t\tthis.workspaceStorage?.init() ?? Promise.resolve(),\n\t\t]);\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorage;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorage;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorage;\n\t\t}\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorageProfile.globalStorageHome.with({\n\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t}).fsPath;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorageProfile?.globalStorageHome.with({\n\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t}).fsPath;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorageId\n\t\t\t\t\t? `${joinPath(this.environmentService.workspaceStorageHome, this.workspaceStorageId, \"state.vscdb\").with({ scheme: Schemas.file }).fsPath}`\n\t\t\t\t\t: undefined;\n\t\t}\n\t}\n\n\tasync close(): Promise<void> {\n\t\t// Stop periodic scheduler and idle runner as we now collect state normally\n\t\tthis.stopFlushWhenIdle();\n\n\t\t// Signal as event so that clients can still store data\n\t\tthis.emitWillSaveState(WillSaveStateReason.SHUTDOWN);\n\n\t\t// Do it\n\t\tawait Promises.settled([\n\t\t\tthis.applicationStorage.close(),\n\t\t\tthis.profileStorage.close(),\n\t\t\tthis.workspaceStorage?.close() ?? Promise.resolve(),\n\t\t]);\n\t}\n\n\tprotected async switchToProfile(\n\t\ttoProfile: IUserDataProfile,\n\t): Promise<void> {\n\t\tif (!this.canSwitchProfile(this.profileStorageProfile, toProfile)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldProfileStorage = this.profileStorage;\n\t\tconst oldItems = oldProfileStorage.items;\n\n\t\t// Close old profile storage but only if this is\n\t\t// different from application storage!\n\t\tif (oldProfileStorage !== this.applicationStorage) {\n\t\t\tawait oldProfileStorage.close();\n\t\t}\n\n\t\t// Create new profile storage & init\n\t\tthis.profileStorage = this.createProfileStorage(toProfile);\n\t\tawait this.profileStorage.init();\n\n\t\t// Handle data switch and eventing\n\t\tthis.switchData(oldItems, this.profileStorage, StorageScope.PROFILE);\n\t}\n\n\tprotected async switchToWorkspace(\n\t\ttoWorkspace: IAnyWorkspaceIdentifier,\n\t\tpreserveData: boolean,\n\t): Promise<void> {\n\t\tconst oldWorkspaceStorage = this.workspaceStorage;\n\t\tconst oldItems = oldWorkspaceStorage?.items ?? new Map();\n\n\t\t// Close old workspace storage\n\t\tawait oldWorkspaceStorage?.close();\n\n\t\t// Create new workspace storage & init\n\t\tthis.workspaceStorage = this.createWorkspaceStorage(toWorkspace);\n\t\tawait this.workspaceStorage.init();\n\n\t\t// Handle data switch and eventing\n\t\tthis.switchData(\n\t\t\toldItems,\n\t\t\tthis.workspaceStorage,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t}\n\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean {\n\t\tif (isUserDataProfile(scope)) {\n\t\t\treturn this.profileStorageProfile.id === scope.id;\n\t\t}\n\n\t\treturn this.workspaceStorageId === scope.id;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
