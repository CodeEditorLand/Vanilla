{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/common/storageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from '../../../base/common/async.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { joinPath } from '../../../base/common/resources.js';\nimport { IStorage, Storage } from '../../../base/parts/storage/common/storage.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IRemoteService } from '../../ipc/common/services.js';\nimport { AbstractStorageService, isProfileUsingDefaultStorage, StorageScope, WillSaveStateReason } from './storage.js';\nimport { ApplicationStorageDatabaseClient, ProfileStorageDatabaseClient, WorkspaceStorageDatabaseClient } from './storageIpc.js';\nimport { isUserDataProfile, IUserDataProfile } from '../../userDataProfile/common/userDataProfile.js';\nimport { IAnyWorkspaceIdentifier } from '../../workspace/common/workspace.js';\n\nexport class RemoteStorageService extends AbstractStorageService {\n\n\tprivate readonly applicationStorageProfile = this.initialProfiles.defaultProfile;\n\tprivate readonly applicationStorage = this.createApplicationStorage();\n\n\tprivate profileStorageProfile = this.initialProfiles.currentProfile;\n\tprivate readonly profileStorageDisposables = this._register(new DisposableStore());\n\tprivate profileStorage = this.createProfileStorage(this.profileStorageProfile);\n\n\tprivate workspaceStorageId = this.initialWorkspace?.id;\n\tprivate readonly workspaceStorageDisposables = this._register(new DisposableStore());\n\tprivate workspaceStorage = this.createWorkspaceStorage(this.initialWorkspace);\n\n\tconstructor(\n\t\tprivate readonly initialWorkspace: IAnyWorkspaceIdentifier | undefined,\n\t\tprivate readonly initialProfiles: { defaultProfile: IUserDataProfile; currentProfile: IUserDataProfile },\n\t\tprivate readonly remoteService: IRemoteService,\n\t\tprivate readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate createApplicationStorage(): IStorage {\n\t\tconst storageDataBaseClient = this._register(new ApplicationStorageDatabaseClient(this.remoteService.getChannel('storage')));\n\t\tconst applicationStorage = this._register(new Storage(storageDataBaseClient));\n\n\t\tthis._register(applicationStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.APPLICATION, e)));\n\n\t\treturn applicationStorage;\n\t}\n\n\tprivate createProfileStorage(profile: IUserDataProfile): IStorage {\n\n\t\t// First clear any previously associated disposables\n\t\tthis.profileStorageDisposables.clear();\n\n\t\t// Remember profile associated to profile storage\n\t\tthis.profileStorageProfile = profile;\n\n\t\tlet profileStorage: IStorage;\n\t\tif (isProfileUsingDefaultStorage(profile)) {\n\n\t\t\t// If we are using default profile storage, the profile storage is\n\t\t\t// actually the same as application storage. As such we\n\t\t\t// avoid creating the storage library a second time on\n\t\t\t// the same DB.\n\n\t\t\tprofileStorage = this.applicationStorage;\n\t\t} else {\n\t\t\tconst storageDataBaseClient = this.profileStorageDisposables.add(new ProfileStorageDatabaseClient(this.remoteService.getChannel('storage'), profile));\n\t\t\tprofileStorage = this.profileStorageDisposables.add(new Storage(storageDataBaseClient));\n\t\t}\n\n\t\tthis.profileStorageDisposables.add(profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.PROFILE, e)));\n\n\t\treturn profileStorage;\n\t}\n\n\tprivate createWorkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorage;\n\tprivate createWorkspaceStorage(workspace: IAnyWorkspaceIdentifier | undefined): IStorage | undefined;\n\tprivate createWorkspaceStorage(workspace: IAnyWorkspaceIdentifier | undefined): IStorage | undefined {\n\n\t\t// First clear any previously associated disposables\n\t\tthis.workspaceStorageDisposables.clear();\n\n\t\t// Remember workspace ID for logging later\n\t\tthis.workspaceStorageId = workspace?.id;\n\n\t\tlet workspaceStorage: IStorage | undefined = undefined;\n\t\tif (workspace) {\n\t\t\tconst storageDataBaseClient = this.workspaceStorageDisposables.add(new WorkspaceStorageDatabaseClient(this.remoteService.getChannel('storage'), workspace));\n\t\t\tworkspaceStorage = this.workspaceStorageDisposables.add(new Storage(storageDataBaseClient));\n\n\t\t\tthis.workspaceStorageDisposables.add(workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.WORKSPACE, e)));\n\t\t}\n\n\t\treturn workspaceStorage;\n\t}\n\n\tprotected async doInitialize(): Promise<void> {\n\n\t\t// Init all storage locations\n\t\tawait Promises.settled([\n\t\t\tthis.applicationStorage.init(),\n\t\t\tthis.profileStorage.init(),\n\t\t\tthis.workspaceStorage?.init() ?? Promise.resolve()\n\t\t]);\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorage;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorage;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorage;\n\t\t}\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorageProfile.globalStorageHome.with({ scheme: Schemas.file }).fsPath;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorageProfile?.globalStorageHome.with({ scheme: Schemas.file }).fsPath;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorageId ? `${joinPath(this.environmentService.workspaceStorageHome, this.workspaceStorageId, 'state.vscdb').with({ scheme: Schemas.file }).fsPath}` : undefined;\n\t\t}\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// Stop periodic scheduler and idle runner as we now collect state normally\n\t\tthis.stopFlushWhenIdle();\n\n\t\t// Signal as event so that clients can still store data\n\t\tthis.emitWillSaveState(WillSaveStateReason.SHUTDOWN);\n\n\t\t// Do it\n\t\tawait Promises.settled([\n\t\t\tthis.applicationStorage.close(),\n\t\t\tthis.profileStorage.close(),\n\t\t\tthis.workspaceStorage?.close() ?? Promise.resolve()\n\t\t]);\n\t}\n\n\tprotected async switchToProfile(toProfile: IUserDataProfile): Promise<void> {\n\t\tif (!this.canSwitchProfile(this.profileStorageProfile, toProfile)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldProfileStorage = this.profileStorage;\n\t\tconst oldItems = oldProfileStorage.items;\n\n\t\t// Close old profile storage but only if this is\n\t\t// different from application storage!\n\t\tif (oldProfileStorage !== this.applicationStorage) {\n\t\t\tawait oldProfileStorage.close();\n\t\t}\n\n\t\t// Create new profile storage & init\n\t\tthis.profileStorage = this.createProfileStorage(toProfile);\n\t\tawait this.profileStorage.init();\n\n\t\t// Handle data switch and eventing\n\t\tthis.switchData(oldItems, this.profileStorage, StorageScope.PROFILE);\n\t}\n\n\tprotected async switchToWorkspace(toWorkspace: IAnyWorkspaceIdentifier, preserveData: boolean): Promise<void> {\n\t\tconst oldWorkspaceStorage = this.workspaceStorage;\n\t\tconst oldItems = oldWorkspaceStorage?.items ?? new Map();\n\n\t\t// Close old workspace storage\n\t\tawait oldWorkspaceStorage?.close();\n\n\t\t// Create new workspace storage & init\n\t\tthis.workspaceStorage = this.createWorkspaceStorage(toWorkspace);\n\t\tawait this.workspaceStorage.init();\n\n\t\t// Handle data switch and eventing\n\t\tthis.switchData(oldItems, this.workspaceStorage, StorageScope.WORKSPACE);\n\t}\n\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean {\n\t\tif (isUserDataProfile(scope)) {\n\t\t\treturn this.profileStorageProfile.id === scope.id;\n\t\t}\n\n\t\treturn this.workspaceStorageId === scope.id;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
