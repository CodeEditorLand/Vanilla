{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/common/storageIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport type { UriDto } from \"../../../base/common/uri.js\";\nimport type { IChannel } from \"../../../base/parts/ipc/common/ipc.js\";\nimport type {\n\tIStorageDatabase,\n\tIStorageItemsChangeEvent,\n\tIUpdateRequest,\n} from \"../../../base/parts/storage/common/storage.js\";\nimport type { IUserDataProfile } from \"../../userDataProfile/common/userDataProfile.js\";\nimport type {\n\tIAnyWorkspaceIdentifier,\n\tIEmptyWorkspaceIdentifier,\n\tISerializedSingleFolderWorkspaceIdentifier,\n\tISerializedWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\n\nexport type Key = string;\nexport type Value = string;\nexport type Item = [Key, Value];\n\nexport interface IBaseSerializableStorageRequest {\n\t/**\n\t * Profile to correlate storage. Only used when no\n\t * workspace is provided. Can be undefined to denote\n\t * application scope.\n\t */\n\treadonly profile: UriDto<IUserDataProfile> | undefined;\n\n\t/**\n\t * Workspace to correlate storage. Can be undefined to\n\t * denote application or profile scope depending on profile.\n\t */\n\treadonly workspace:\n\t\t| ISerializedWorkspaceIdentifier\n\t\t| ISerializedSingleFolderWorkspaceIdentifier\n\t\t| IEmptyWorkspaceIdentifier\n\t\t| undefined;\n\n\t/**\n\t * Additional payload for the request to perform.\n\t */\n\treadonly payload?: unknown;\n}\n\nexport interface ISerializableUpdateRequest\n\textends IBaseSerializableStorageRequest {\n\tinsert?: Item[];\n\tdelete?: Key[];\n}\n\nexport interface ISerializableItemsChangeEvent {\n\treadonly changed?: Item[];\n\treadonly deleted?: Key[];\n}\n\nabstract class BaseStorageDatabaseClient\n\textends Disposable\n\timplements IStorageDatabase\n{\n\tabstract readonly onDidChangeItemsExternal: Event<IStorageItemsChangeEvent>;\n\n\tconstructor(\n\t\tprotected channel: IChannel,\n\t\tprotected profile: UriDto<IUserDataProfile> | undefined,\n\t\tprotected workspace: IAnyWorkspaceIdentifier | undefined,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync getItems(): Promise<Map<string, string>> {\n\t\tconst serializableRequest: IBaseSerializableStorageRequest = {\n\t\t\tprofile: this.profile,\n\t\t\tworkspace: this.workspace,\n\t\t};\n\t\tconst items: Item[] = await this.channel.call(\n\t\t\t\"getItems\",\n\t\t\tserializableRequest,\n\t\t);\n\n\t\treturn new Map(items);\n\t}\n\n\tupdateItems(request: IUpdateRequest): Promise<void> {\n\t\tconst serializableRequest: ISerializableUpdateRequest = {\n\t\t\tprofile: this.profile,\n\t\t\tworkspace: this.workspace,\n\t\t};\n\n\t\tif (request.insert) {\n\t\t\tserializableRequest.insert = Array.from(request.insert.entries());\n\t\t}\n\n\t\tif (request.delete) {\n\t\t\tserializableRequest.delete = Array.from(request.delete.values());\n\t\t}\n\n\t\treturn this.channel.call(\"updateItems\", serializableRequest);\n\t}\n\n\toptimize(): Promise<void> {\n\t\tconst serializableRequest: IBaseSerializableStorageRequest = {\n\t\t\tprofile: this.profile,\n\t\t\tworkspace: this.workspace,\n\t\t};\n\n\t\treturn this.channel.call(\"optimize\", serializableRequest);\n\t}\n\n\tabstract close(): Promise<void>;\n}\n\nabstract class BaseProfileAwareStorageDatabaseClient extends BaseStorageDatabaseClient {\n\tprivate readonly _onDidChangeItemsExternal = this._register(\n\t\tnew Emitter<IStorageItemsChangeEvent>(),\n\t);\n\treadonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\tconstructor(\n\t\tchannel: IChannel,\n\t\tprofile: UriDto<IUserDataProfile> | undefined,\n\t) {\n\t\tsuper(channel, profile, undefined);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.channel.listen<ISerializableItemsChangeEvent>(\n\t\t\t\t\"onDidChangeStorage\",\n\t\t\t\t{ profile: this.profile },\n\t\t\t)((e: ISerializableItemsChangeEvent) => this.onDidChangeStorage(e)),\n\t\t);\n\t}\n\n\tprivate onDidChangeStorage(e: ISerializableItemsChangeEvent): void {\n\t\tif (Array.isArray(e.changed) || Array.isArray(e.deleted)) {\n\t\t\tthis._onDidChangeItemsExternal.fire({\n\t\t\t\tchanged: e.changed ? new Map(e.changed) : undefined,\n\t\t\t\tdeleted: e.deleted ? new Set<string>(e.deleted) : undefined,\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport class ApplicationStorageDatabaseClient extends BaseProfileAwareStorageDatabaseClient {\n\tconstructor(channel: IChannel) {\n\t\tsuper(channel, undefined);\n\t}\n\n\tasync close(): Promise<void> {\n\t\t// The application storage database is shared across all instances so\n\t\t// we do not close it from the window. However we dispose the\n\t\t// listener for external changes because we no longer interested in it.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class ProfileStorageDatabaseClient extends BaseProfileAwareStorageDatabaseClient {\n\tconstructor(channel: IChannel, profile: UriDto<IUserDataProfile>) {\n\t\tsuper(channel, profile);\n\t}\n\n\tasync close(): Promise<void> {\n\t\t// The profile storage database is shared across all instances of\n\t\t// the same profile so we do not close it from the window.\n\t\t// However we dispose the listener for external changes because\n\t\t// we no longer interested in it.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class WorkspaceStorageDatabaseClient\n\textends BaseStorageDatabaseClient\n\timplements IStorageDatabase\n{\n\treadonly onDidChangeItemsExternal = Event.None; // unsupported for workspace storage because we only ever write from one window\n\n\tconstructor(channel: IChannel, workspace: IAnyWorkspaceIdentifier) {\n\t\tsuper(channel, undefined, workspace);\n\t}\n\n\tasync close(): Promise<void> {\n\t\t// The workspace storage database is only used in this instance\n\t\t// but we do not need to close it from here, the main process\n\t\t// can take care of that.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class StorageClient {\n\tconstructor(private readonly channel: IChannel) {}\n\n\tisUsed(path: string): Promise<boolean> {\n\t\tconst serializableRequest: ISerializableUpdateRequest = {\n\t\t\tpayload: path,\n\t\t\tprofile: undefined,\n\t\t\tworkspace: undefined,\n\t\t};\n\n\t\treturn this.channel.call(\"isUsed\", serializableRequest);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
