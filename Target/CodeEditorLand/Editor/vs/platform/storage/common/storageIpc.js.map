{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/common/storageIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { UriDto } from '../../../base/common/uri.js';\nimport { IChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { IStorageDatabase, IStorageItemsChangeEvent, IUpdateRequest } from '../../../base/parts/storage/common/storage.js';\nimport { IUserDataProfile } from '../../userDataProfile/common/userDataProfile.js';\nimport { ISerializedSingleFolderWorkspaceIdentifier, ISerializedWorkspaceIdentifier, IEmptyWorkspaceIdentifier, IAnyWorkspaceIdentifier } from '../../workspace/common/workspace.js';\n\nexport type Key = string;\nexport type Value = string;\nexport type Item = [Key, Value];\n\nexport interface IBaseSerializableStorageRequest {\n\n\t/**\n\t * Profile to correlate storage. Only used when no\n\t * workspace is provided. Can be undefined to denote\n\t * application scope.\n\t */\n\treadonly profile: UriDto<IUserDataProfile> | undefined;\n\n\t/**\n\t * Workspace to correlate storage. Can be undefined to\n\t * denote application or profile scope depending on profile.\n\t */\n\treadonly workspace: ISerializedWorkspaceIdentifier | ISerializedSingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined;\n\n\t/**\n\t * Additional payload for the request to perform.\n\t */\n\treadonly payload?: unknown;\n}\n\nexport interface ISerializableUpdateRequest extends IBaseSerializableStorageRequest {\n\tinsert?: Item[];\n\tdelete?: Key[];\n}\n\nexport interface ISerializableItemsChangeEvent {\n\treadonly changed?: Item[];\n\treadonly deleted?: Key[];\n}\n\nabstract class BaseStorageDatabaseClient extends Disposable implements IStorageDatabase {\n\n\tabstract readonly onDidChangeItemsExternal: Event<IStorageItemsChangeEvent>;\n\n\tconstructor(\n\t\tprotected channel: IChannel,\n\t\tprotected profile: UriDto<IUserDataProfile> | undefined,\n\t\tprotected workspace: IAnyWorkspaceIdentifier | undefined\n\t) {\n\t\tsuper();\n\t}\n\n\tasync getItems(): Promise<Map<string, string>> {\n\t\tconst serializableRequest: IBaseSerializableStorageRequest = { profile: this.profile, workspace: this.workspace };\n\t\tconst items: Item[] = await this.channel.call('getItems', serializableRequest);\n\n\t\treturn new Map(items);\n\t}\n\n\tupdateItems(request: IUpdateRequest): Promise<void> {\n\t\tconst serializableRequest: ISerializableUpdateRequest = { profile: this.profile, workspace: this.workspace };\n\n\t\tif (request.insert) {\n\t\t\tserializableRequest.insert = Array.from(request.insert.entries());\n\t\t}\n\n\t\tif (request.delete) {\n\t\t\tserializableRequest.delete = Array.from(request.delete.values());\n\t\t}\n\n\t\treturn this.channel.call('updateItems', serializableRequest);\n\t}\n\n\toptimize(): Promise<void> {\n\t\tconst serializableRequest: IBaseSerializableStorageRequest = { profile: this.profile, workspace: this.workspace };\n\n\t\treturn this.channel.call('optimize', serializableRequest);\n\t}\n\n\tabstract close(): Promise<void>;\n}\n\nabstract class BaseProfileAwareStorageDatabaseClient extends BaseStorageDatabaseClient {\n\n\tprivate readonly _onDidChangeItemsExternal = this._register(new Emitter<IStorageItemsChangeEvent>());\n\treadonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\tconstructor(channel: IChannel, profile: UriDto<IUserDataProfile> | undefined) {\n\t\tsuper(channel, profile, undefined);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.channel.listen<ISerializableItemsChangeEvent>('onDidChangeStorage', { profile: this.profile })((e: ISerializableItemsChangeEvent) => this.onDidChangeStorage(e)));\n\t}\n\n\tprivate onDidChangeStorage(e: ISerializableItemsChangeEvent): void {\n\t\tif (Array.isArray(e.changed) || Array.isArray(e.deleted)) {\n\t\t\tthis._onDidChangeItemsExternal.fire({\n\t\t\t\tchanged: e.changed ? new Map(e.changed) : undefined,\n\t\t\t\tdeleted: e.deleted ? new Set<string>(e.deleted) : undefined\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport class ApplicationStorageDatabaseClient extends BaseProfileAwareStorageDatabaseClient {\n\n\tconstructor(channel: IChannel) {\n\t\tsuper(channel, undefined);\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// The application storage database is shared across all instances so\n\t\t// we do not close it from the window. However we dispose the\n\t\t// listener for external changes because we no longer interested in it.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class ProfileStorageDatabaseClient extends BaseProfileAwareStorageDatabaseClient {\n\n\tconstructor(channel: IChannel, profile: UriDto<IUserDataProfile>) {\n\t\tsuper(channel, profile);\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// The profile storage database is shared across all instances of\n\t\t// the same profile so we do not close it from the window.\n\t\t// However we dispose the listener for external changes because\n\t\t// we no longer interested in it.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class WorkspaceStorageDatabaseClient extends BaseStorageDatabaseClient implements IStorageDatabase {\n\n\treadonly onDidChangeItemsExternal = Event.None; // unsupported for workspace storage because we only ever write from one window\n\n\tconstructor(channel: IChannel, workspace: IAnyWorkspaceIdentifier) {\n\t\tsuper(channel, undefined, workspace);\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// The workspace storage database is only used in this instance\n\t\t// but we do not need to close it from here, the main process\n\t\t// can take care of that.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class StorageClient {\n\n\tconstructor(private readonly channel: IChannel) { }\n\n\tisUsed(path: string): Promise<boolean> {\n\t\tconst serializableRequest: ISerializableUpdateRequest = { payload: path, profile: undefined, workspace: undefined };\n\n\t\treturn this.channel.call('isUsed', serializableRequest);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
