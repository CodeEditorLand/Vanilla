{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/test/electron-main/storageMainService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { notStrictEqual, strictEqual } from 'assert';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { OPTIONS, parseArgs } from '../../../environment/node/argv.js';\nimport { NativeEnvironmentService } from '../../../environment/node/environmentService.js';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { ILifecycleMainService } from '../../../lifecycle/electron-main/lifecycleMainService.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport product from '../../../product/common/product.js';\nimport { IProductService } from '../../../product/common/productService.js';\nimport { SaveStrategy, StateService } from '../../../state/node/stateService.js';\nimport { IS_NEW_KEY, StorageScope } from '../../common/storage.js';\nimport { IStorageChangeEvent, IStorageMain, IStorageMainOptions } from '../../electron-main/storageMain.js';\nimport { StorageMainService } from '../../electron-main/storageMainService.js';\nimport { currentSessionDateStorageKey, firstSessionDateStorageKey } from '../../../telemetry/common/telemetry.js';\nimport { UriIdentityService } from '../../../uriIdentity/common/uriIdentityService.js';\nimport { IUserDataProfile } from '../../../userDataProfile/common/userDataProfile.js';\nimport { UserDataProfilesMainService } from '../../../userDataProfile/electron-main/userDataProfile.js';\nimport { TestLifecycleMainService } from '../../../test/electron-main/workbenchTestServices.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\n\nsuite('StorageMainService', function () {\n\n\tconst disposables = new DisposableStore();\n\n\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\n\tconst inMemoryProfileRoot = URI.file('/location').with({ scheme: Schemas.inMemory });\n\tconst inMemoryProfile: IUserDataProfile = {\n\t\tid: 'id',\n\t\tname: 'inMemory',\n\t\tshortName: 'inMemory',\n\t\tisDefault: false,\n\t\tlocation: inMemoryProfileRoot,\n\t\tglobalStorageHome: joinPath(inMemoryProfileRoot, 'globalStorageHome'),\n\t\tsettingsResource: joinPath(inMemoryProfileRoot, 'settingsResource'),\n\t\tkeybindingsResource: joinPath(inMemoryProfileRoot, 'keybindingsResource'),\n\t\ttasksResource: joinPath(inMemoryProfileRoot, 'tasksResource'),\n\t\tsnippetsHome: joinPath(inMemoryProfileRoot, 'snippetsHome'),\n\t\textensionsResource: joinPath(inMemoryProfileRoot, 'extensionsResource'),\n\t\tcacheHome: joinPath(inMemoryProfileRoot, 'cache'),\n\t};\n\n\tclass TestStorageMainService extends StorageMainService {\n\n\t\tprotected override getStorageOptions(): IStorageMainOptions {\n\t\t\treturn {\n\t\t\t\tuseInMemoryStorage: true\n\t\t\t};\n\t\t}\n\t}\n\n\tasync function testStorage(storage: IStorageMain, scope: StorageScope): Promise<void> {\n\t\tstrictEqual(storage.isInMemory(), true);\n\n\t\t// Telemetry: added after init unless workspace/profile scoped\n\t\tif (scope === StorageScope.APPLICATION) {\n\t\t\tstrictEqual(storage.items.size, 0);\n\t\t\tawait storage.init();\n\t\t\tstrictEqual(typeof storage.get(firstSessionDateStorageKey), 'string');\n\t\t\tstrictEqual(typeof storage.get(currentSessionDateStorageKey), 'string');\n\t\t} else {\n\t\t\tawait storage.init();\n\t\t}\n\n\t\tlet storageChangeEvent: IStorageChangeEvent | undefined = undefined;\n\t\tdisposables.add(storage.onDidChangeStorage(e => {\n\t\t\tstorageChangeEvent = e;\n\t\t}));\n\n\t\tlet storageDidClose = false;\n\t\tdisposables.add(storage.onDidCloseStorage(() => storageDidClose = true));\n\n\t\t// Basic store/get/remove\n\t\tconst size = storage.items.size;\n\n\t\tstorage.set('bar', 'foo');\n\t\tstrictEqual(storageChangeEvent!.key, 'bar');\n\t\tstorage.set('barNumber', 55);\n\t\tstorage.set('barBoolean', true);\n\n\t\tstrictEqual(storage.get('bar'), 'foo');\n\t\tstrictEqual(storage.get('barNumber'), '55');\n\t\tstrictEqual(storage.get('barBoolean'), 'true');\n\n\t\tstrictEqual(storage.items.size, size + 3);\n\n\t\tstorage.delete('bar');\n\t\tstrictEqual(storage.get('bar'), undefined);\n\n\t\tstrictEqual(storage.items.size, size + 2);\n\n\t\t// IS_NEW\n\t\tstrictEqual(storage.get(IS_NEW_KEY), 'true');\n\n\t\t// Close\n\t\tawait storage.close();\n\n\t\tstrictEqual(storageDidClose, true);\n\t}\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tfunction createStorageService(lifecycleMainService: ILifecycleMainService = new TestLifecycleMainService()): TestStorageMainService {\n\t\tconst environmentService = new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService);\n\t\tconst fileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst testStorageService = disposables.add(new TestStorageMainService(new NullLogService(), environmentService, disposables.add(new UserDataProfilesMainService(disposables.add(new StateService(SaveStrategy.DELAYED, environmentService, new NullLogService(), fileService)), disposables.add(uriIdentityService), environmentService, fileService, new NullLogService())), lifecycleMainService, fileService, uriIdentityService));\n\n\t\tdisposables.add(testStorageService.applicationStorage);\n\n\t\treturn testStorageService;\n\t}\n\n\ttest('basics (application)', function () {\n\t\tconst storageMainService = createStorageService();\n\n\t\treturn testStorage(storageMainService.applicationStorage, StorageScope.APPLICATION);\n\t});\n\n\ttest('basics (profile)', function () {\n\t\tconst storageMainService = createStorageService();\n\t\tconst profile = inMemoryProfile;\n\n\t\treturn testStorage(storageMainService.profileStorage(profile), StorageScope.PROFILE);\n\t});\n\n\ttest('basics (workspace)', function () {\n\t\tconst workspace = { id: generateUuid() };\n\t\tconst storageMainService = createStorageService();\n\n\t\treturn testStorage(storageMainService.workspaceStorage(workspace), StorageScope.WORKSPACE);\n\t});\n\n\ttest('storage closed onWillShutdown', async function () {\n\t\tconst lifecycleMainService = new TestLifecycleMainService();\n\t\tconst storageMainService = createStorageService(lifecycleMainService);\n\n\t\tconst profile = inMemoryProfile;\n\t\tconst workspace = { id: generateUuid() };\n\n\t\tconst workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tdisposables.add(workspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t}));\n\n\t\tconst profileStorage = storageMainService.profileStorage(profile);\n\t\tlet didCloseProfileStorage = false;\n\t\tdisposables.add(profileStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseProfileStorage = true;\n\t\t}));\n\n\t\tconst applicationStorage = storageMainService.applicationStorage;\n\t\tlet didCloseApplicationStorage = false;\n\t\tdisposables.add(applicationStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseApplicationStorage = true;\n\t\t}));\n\n\t\tstrictEqual(applicationStorage, storageMainService.applicationStorage); // same instance as long as not closed\n\t\tstrictEqual(profileStorage, storageMainService.profileStorage(profile)); // same instance as long as not closed\n\t\tstrictEqual(workspaceStorage, storageMainService.workspaceStorage(workspace)); // same instance as long as not closed\n\n\t\tawait applicationStorage.init();\n\t\tawait profileStorage.init();\n\t\tawait workspaceStorage.init();\n\n\t\tawait lifecycleMainService.fireOnWillShutdown();\n\n\t\tstrictEqual(didCloseApplicationStorage, true);\n\t\tstrictEqual(didCloseProfileStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\n\t\tconst profileStorage2 = storageMainService.profileStorage(profile);\n\t\tnotStrictEqual(profileStorage, profileStorage2);\n\n\t\tconst workspaceStorage2 = storageMainService.workspaceStorage(workspace);\n\t\tnotStrictEqual(workspaceStorage, workspaceStorage2);\n\n\t\tawait workspaceStorage2.close();\n\t});\n\n\ttest('storage closed before init works', async function () {\n\t\tconst storageMainService = createStorageService();\n\t\tconst profile = inMemoryProfile;\n\t\tconst workspace = { id: generateUuid() };\n\n\t\tconst workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tdisposables.add(workspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t}));\n\n\t\tconst profileStorage = storageMainService.profileStorage(profile);\n\t\tlet didCloseProfileStorage = false;\n\t\tdisposables.add(profileStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseProfileStorage = true;\n\t\t}));\n\n\t\tconst applicationStorage = storageMainService.applicationStorage;\n\t\tlet didCloseApplicationStorage = false;\n\t\tdisposables.add(applicationStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseApplicationStorage = true;\n\t\t}));\n\n\t\tawait applicationStorage.close();\n\t\tawait profileStorage.close();\n\t\tawait workspaceStorage.close();\n\n\t\tstrictEqual(didCloseApplicationStorage, true);\n\t\tstrictEqual(didCloseProfileStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\t});\n\n\ttest('storage closed before init awaits works', async function () {\n\t\tconst storageMainService = createStorageService();\n\t\tconst profile = inMemoryProfile;\n\t\tconst workspace = { id: generateUuid() };\n\n\t\tconst workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tdisposables.add(workspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t}));\n\n\t\tconst profileStorage = storageMainService.profileStorage(profile);\n\t\tlet didCloseProfileStorage = false;\n\t\tdisposables.add(profileStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseProfileStorage = true;\n\t\t}));\n\n\t\tconst applicationtorage = storageMainService.applicationStorage;\n\t\tlet didCloseApplicationStorage = false;\n\t\tdisposables.add(applicationtorage.onDidCloseStorage(() => {\n\t\t\tdidCloseApplicationStorage = true;\n\t\t}));\n\n\t\tapplicationtorage.init();\n\t\tprofileStorage.init();\n\t\tworkspaceStorage.init();\n\n\t\tawait applicationtorage.close();\n\t\tawait profileStorage.close();\n\t\tawait workspaceStorage.close();\n\n\t\tstrictEqual(didCloseApplicationStorage, true);\n\t\tstrictEqual(didCloseProfileStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
