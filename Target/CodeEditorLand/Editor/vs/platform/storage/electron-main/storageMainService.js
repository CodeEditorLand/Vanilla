var I=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var l=(a,o,e,r)=>{for(var t=r>1?void 0:r?m(o,e):o,n=a.length-1,s;n>=0;n--)(s=a[n])&&(t=(r?s(o,e,t):s(t))||t);return r&&t&&I(o,e,t),t},i=(a,o)=>(e,r)=>o(e,r,a);import{Emitter as u,Event as S}from"../../../base/common/event.js";import{Disposable as P}from"../../../base/common/lifecycle.js";import{Schemas as y}from"../../../base/common/network.js";import{URI as p}from"../../../base/common/uri.js";import{IEnvironmentService as w}from"../../environment/common/environment.js";import{IFileService as M}from"../../files/common/files.js";import{createDecorator as f}from"../../instantiation/common/instantiation.js";import{ILifecycleMainService as k,LifecycleMainPhase as A,ShutdownReason as d}from"../../lifecycle/electron-main/lifecycleMainService.js";import{ILogService as T}from"../../log/common/log.js";import{IUriIdentityService as b}from"../../uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as D}from"../../userDataProfile/common/userDataProfile.js";import{IUserDataProfilesMainService as C}from"../../userDataProfile/electron-main/userDataProfile.js";import{AbstractStorageService as L,StorageScope as h,isProfileUsingDefaultStorage as W}from"../common/storage.js";import{ApplicationStorageMain as O,InMemoryStorageMain as v,ProfileStorageMain as U,WorkspaceStorageMain as _}from"./storageMain.js";const E=f("storageMainService");let c=class extends P{constructor(e,r,t,n,s,N){super();this.logService=e;this.environmentService=r;this.userDataProfilesService=t;this.lifecycleMainService=n;this.fileService=s;this.uriIdentityService=N;this.registerListeners()}shutdownReason=void 0;_onDidChangeProfileStorage=this._register(new u);onDidChangeProfileStorage=this._onDidChangeProfileStorage.event;getStorageOptions(){return{useInMemoryStorage:!!this.environmentService.extensionTestsLocationURI}}registerListeners(){(async()=>(await this.lifecycleMainService.when(A.AfterWindowOpen),this.applicationStorage.init()))(),this._register(this.lifecycleMainService.onWillLoadWindow(e=>{e.window.profile&&this.profileStorage(e.window.profile).init(),e.workspace&&this.workspaceStorage(e.workspace).init()})),this._register(this.lifecycleMainService.onWillShutdown(e=>{this.logService.trace("storageMainService#onWillShutdown()"),this.shutdownReason=e.reason,e.join("applicationStorage",this.applicationStorage.close());for(const[,r]of this.mapProfileToStorage)e.join("profileStorage",r.close());for(const[,r]of this.mapWorkspaceToStorage)e.join("workspaceStorage",r.close())})),this._register(this.userDataProfilesService.onWillCreateProfile(e=>{e.join((async()=>{await this.fileService.exists(e.profile.globalStorageHome)||await this.fileService.createFolder(e.profile.globalStorageHome)})())})),this._register(this.userDataProfilesService.onWillRemoveProfile(e=>{const r=this.mapProfileToStorage.get(e.profile.id);r&&e.join(r.close())}))}applicationStorage=this._register(this.createApplicationStorage());createApplicationStorage(){this.logService.trace("StorageMainService: creating application storage");const e=new O(this.getStorageOptions(),this.userDataProfilesService,this.logService,this.fileService);return this._register(S.once(e.onDidCloseStorage)(()=>{this.logService.trace("StorageMainService: closed application storage")})),e}mapProfileToStorage=new Map;profileStorage(e){if(W(e))return this.applicationStorage;let r=this.mapProfileToStorage.get(e.id);if(!r){this.logService.trace(`StorageMainService: creating profile storage (${e.name})`),r=this._register(this.createProfileStorage(e)),this.mapProfileToStorage.set(e.id,r);const t=this._register(r.onDidChangeStorage(n=>this._onDidChangeProfileStorage.fire({...n,storage:r,profile:e})));this._register(S.once(r.onDidCloseStorage)(()=>{this.logService.trace(`StorageMainService: closed profile storage (${e.name})`),this.mapProfileToStorage.delete(e.id),t.dispose()}))}return r}createProfileStorage(e){return this.shutdownReason===d.KILL?new v(this.logService,this.fileService):new U(e,this.getStorageOptions(),this.logService,this.fileService)}mapWorkspaceToStorage=new Map;workspaceStorage(e){let r=this.mapWorkspaceToStorage.get(e.id);return r||(this.logService.trace(`StorageMainService: creating workspace storage (${e.id})`),r=this._register(this.createWorkspaceStorage(e)),this.mapWorkspaceToStorage.set(e.id,r),this._register(S.once(r.onDidCloseStorage)(()=>{this.logService.trace(`StorageMainService: closed workspace storage (${e.id})`),this.mapWorkspaceToStorage.delete(e.id)}))),r}createWorkspaceStorage(e){return this.shutdownReason===d.KILL?new v(this.logService,this.fileService):new _(e,this.getStorageOptions(),this.logService,this.environmentService,this.fileService)}isUsed(e){const r=p.file(e);for(const t of[this.applicationStorage,...this.mapProfileToStorage.values(),...this.mapWorkspaceToStorage.values()])if(t.path&&this.uriIdentityService.extUri.isEqualOrParent(p.file(t.path),r))return!0;return!1}};c=l([i(0,T),i(1,w),i(2,C),i(3,k),i(4,M),i(5,b)],c);const Y=f("applicationStorageMainService");let g=class extends L{constructor(e,r){super();this.userDataProfilesService=e;this.storageMainService=r}whenReady=this.storageMainService.applicationStorage.whenInit;doInitialize(){return this.storageMainService.applicationStorage.whenInit}getStorage(e){if(e===h.APPLICATION)return this.storageMainService.applicationStorage.storage}getLogDetails(e){if(e===h.APPLICATION)return this.userDataProfilesService.defaultProfile.globalStorageHome.with({scheme:y.file}).fsPath}shouldFlushWhenIdle(){return!1}switch(){throw new Error("Migrating storage is unsupported from main process")}switchToProfile(){throw new Error("Switching storage profile is unsupported from main process")}switchToWorkspace(){throw new Error("Switching storage workspace is unsupported from main process")}hasScope(){throw new Error("Main process is never profile or workspace scoped")}};g=l([i(0,D),i(1,E)],g);export{g as ApplicationStorageMainService,Y as IApplicationStorageMainService,E as IStorageMainService,c as StorageMainService};
