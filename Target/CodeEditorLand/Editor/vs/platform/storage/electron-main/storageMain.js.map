{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/electron-main/storageMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from \"fs\";\nimport { top } from \"../../../base/common/arrays.js\";\nimport { DeferredPromise } from \"../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { join } from \"../../../base/common/path.js\";\nimport { StopWatch } from \"../../../base/common/stopwatch.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { Promises } from \"../../../base/node/pfs.js\";\nimport {\n\ttype IStorage,\n\tInMemoryStorageDatabase,\n\tStorage,\n\tStorageHint,\n\tStorageState,\n} from \"../../../base/parts/storage/common/storage.js\";\nimport {\n\ttype ISQLiteStorageDatabaseLoggingOptions,\n\tSQLiteStorageDatabase,\n} from \"../../../base/parts/storage/node/storage.js\";\nimport type { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport type { IFileService } from \"../../files/common/files.js\";\nimport { type ILogService, LogLevel } from \"../../log/common/log.js\";\nimport {\n\tcurrentSessionDateStorageKey,\n\tfirstSessionDateStorageKey,\n\tlastSessionDateStorageKey,\n} from \"../../telemetry/common/telemetry.js\";\nimport type {\n\tIUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\ttype IAnyWorkspaceIdentifier,\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\nimport { IS_NEW_KEY } from \"../common/storage.js\";\n\nexport interface IStorageMainOptions {\n\t/**\n\t * If enabled, storage will not persist to disk\n\t * but into memory.\n\t */\n\treadonly useInMemoryStorage?: boolean;\n}\n\n/**\n * Provides access to application, profile and workspace storage from\n * the electron-main side that is the owner of all storage connections.\n */\nexport interface IStorageMain extends IDisposable {\n\t/**\n\t * Emitted whenever data is updated or deleted.\n\t */\n\treadonly onDidChangeStorage: Event<IStorageChangeEvent>;\n\n\t/**\n\t * Emitted when the storage is closed.\n\t */\n\treadonly onDidCloseStorage: Event<void>;\n\n\t/**\n\t * Access to all cached items of this storage service.\n\t */\n\treadonly items: Map<string, string>;\n\n\t/**\n\t * Allows to join on the `init` call having completed\n\t * to be able to safely use the storage.\n\t */\n\treadonly whenInit: Promise<void>;\n\n\t/**\n\t * Provides access to the `IStorage` implementation which will be\n\t * in-memory for as long as the storage has not been initialized.\n\t */\n\treadonly storage: IStorage;\n\n\t/**\n\t * The file path of the underlying storage file if any.\n\t */\n\treadonly path: string | undefined;\n\n\t/**\n\t * Required call to ensure the service can be used.\n\t */\n\tinit(): Promise<void>;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided defaultValue if the element is null or undefined.\n\t */\n\tget(key: string, fallbackValue: string): string;\n\tget(key: string, fallbackValue?: string): string | undefined;\n\n\t/**\n\t * Store a string value under the given key to storage. The value will\n\t * be converted to a string.\n\t */\n\tset(key: string, value: string | boolean | number | undefined | null): void;\n\n\t/**\n\t * Delete an element stored under the provided key from storage.\n\t */\n\tdelete(key: string): void;\n\n\t/**\n\t * Whether the storage is using in-memory persistence or not.\n\t */\n\tisInMemory(): boolean;\n\n\t/**\n\t * Attempts to reduce the DB size via optimization commands if supported.\n\t */\n\toptimize(): Promise<void>;\n\n\t/**\n\t * Close the storage connection.\n\t */\n\tclose(): Promise<void>;\n}\n\nexport interface IStorageChangeEvent {\n\treadonly key: string;\n}\n\nabstract class BaseStorageMain extends Disposable implements IStorageMain {\n\tprivate static readonly LOG_SLOW_CLOSE_THRESHOLD = 2000;\n\n\tprotected readonly _onDidChangeStorage = this._register(\n\t\tnew Emitter<IStorageChangeEvent>(),\n\t);\n\treadonly onDidChangeStorage = this._onDidChangeStorage.event;\n\n\tprivate readonly _onDidCloseStorage = this._register(new Emitter<void>());\n\treadonly onDidCloseStorage = this._onDidCloseStorage.event;\n\n\tprivate _storage = this._register(\n\t\tnew Storage(new InMemoryStorageDatabase(), {\n\t\t\thint: StorageHint.STORAGE_IN_MEMORY,\n\t\t}),\n\t); // storage is in-memory until initialized\n\tget storage(): IStorage {\n\t\treturn this._storage;\n\t}\n\n\tabstract get path(): string | undefined;\n\n\tprivate initializePromise: Promise<void> | undefined = undefined;\n\n\tprivate readonly whenInitPromise = new DeferredPromise<void>();\n\treadonly whenInit = this.whenInitPromise.p;\n\n\tprivate state = StorageState.None;\n\n\tconstructor(\n\t\tprotected readonly logService: ILogService,\n\t\tprivate readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\t}\n\n\tisInMemory(): boolean {\n\t\treturn this._storage.isInMemory();\n\t}\n\n\tinit(): Promise<void> {\n\t\tif (!this.initializePromise) {\n\t\t\tthis.initializePromise = (async () => {\n\t\t\t\tif (this.state !== StorageState.None) {\n\t\t\t\t\treturn; // either closed or already initialized\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Create storage via subclasses\n\t\t\t\t\tconst storage = this._register(await this.doCreate());\n\n\t\t\t\t\t// Replace our in-memory storage with the real\n\t\t\t\t\t// once as soon as possible without awaiting\n\t\t\t\t\t// the init call.\n\t\t\t\t\tthis._storage.dispose();\n\t\t\t\t\tthis._storage = storage;\n\n\t\t\t\t\t// Re-emit storage changes via event\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tstorage.onDidChangeStorage((e) =>\n\t\t\t\t\t\t\tthis._onDidChangeStorage.fire(e),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\t// Await storage init\n\t\t\t\t\tawait this.doInit(storage);\n\n\t\t\t\t\t// Ensure we track whether storage is new or not\n\t\t\t\t\tconst isNewStorage = storage.getBoolean(IS_NEW_KEY);\n\t\t\t\t\tif (isNewStorage === undefined) {\n\t\t\t\t\t\tstorage.set(IS_NEW_KEY, true);\n\t\t\t\t\t} else if (isNewStorage) {\n\t\t\t\t\t\tstorage.set(IS_NEW_KEY, false);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t`[storage main] initialize(): Unable to init storage due to ${error}`,\n\t\t\t\t\t);\n\t\t\t\t} finally {\n\t\t\t\t\t// Update state\n\t\t\t\t\tthis.state = StorageState.Initialized;\n\n\t\t\t\t\t// Mark init promise as completed\n\t\t\t\t\tthis.whenInitPromise.complete();\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\n\t\treturn this.initializePromise;\n\t}\n\n\tprotected createLoggingOptions(): ISQLiteStorageDatabaseLoggingOptions {\n\t\treturn {\n\t\t\tlogTrace:\n\t\t\t\tthis.logService.getLevel() === LogLevel.Trace\n\t\t\t\t\t? (msg) => this.logService.trace(msg)\n\t\t\t\t\t: undefined,\n\t\t\tlogError: (error) => this.logService.error(error),\n\t\t};\n\t}\n\n\tprotected doInit(storage: IStorage): Promise<void> {\n\t\treturn storage.init();\n\t}\n\n\tprotected abstract doCreate(): Promise<Storage>;\n\n\tget items(): Map<string, string> {\n\t\treturn this._storage.items;\n\t}\n\n\tget(key: string, fallbackValue: string): string;\n\tget(key: string, fallbackValue?: string): string | undefined;\n\tget(key: string, fallbackValue?: string): string | undefined {\n\t\treturn this._storage.get(key, fallbackValue);\n\t}\n\n\tset(\n\t\tkey: string,\n\t\tvalue: string | boolean | number | undefined | null,\n\t): Promise<void> {\n\t\treturn this._storage.set(key, value);\n\t}\n\n\tdelete(key: string): Promise<void> {\n\t\treturn this._storage.delete(key);\n\t}\n\n\toptimize(): Promise<void> {\n\t\treturn this._storage.optimize();\n\t}\n\n\tasync close(): Promise<void> {\n\t\t// Measure how long it takes to close storage\n\t\tconst watch = new StopWatch(false);\n\t\tawait this.doClose();\n\t\twatch.stop();\n\n\t\t// If close() is taking a long time, there is\n\t\t// a chance that the underlying DB is large\n\t\t// either on disk or in general. In that case\n\t\t// log some additional info to further diagnose\n\t\tif (watch.elapsed() > BaseStorageMain.LOG_SLOW_CLOSE_THRESHOLD) {\n\t\t\tawait this.logSlowClose(watch);\n\t\t}\n\n\t\t// Signal as event\n\t\tthis._onDidCloseStorage.fire();\n\t}\n\n\tprivate async logSlowClose(watch: StopWatch) {\n\t\tif (!this.path) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst largestEntries = top(\n\t\t\t\tArray.from(this._storage.items.entries()).map(\n\t\t\t\t\t([key, value]) => ({ key, length: value.length }),\n\t\t\t\t),\n\t\t\t\t(entryA, entryB) => entryB.length - entryA.length,\n\t\t\t\t5,\n\t\t\t)\n\t\t\t\t.map((entry) => `${entry.key}:${entry.length}`)\n\t\t\t\t.join(\", \");\n\t\t\tconst dbSize = (await this.fileService.stat(URI.file(this.path)))\n\t\t\t\t.size;\n\n\t\t\tthis.logService.warn(\n\t\t\t\t`[storage main] detected slow close() operation: Time: ${watch.elapsed()}ms, DB size: ${dbSize}b, Large Keys: ${largestEntries}`,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\n\t\t\t\t\"[storage main] figuring out stats for slow DB on close() resulted in an error\",\n\t\t\t\terror,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async doClose(): Promise<void> {\n\t\t// Ensure we are not accidentally leaving\n\t\t// a pending initialized storage behind in\n\t\t// case `close()` was called before `init()`\n\t\t// finishes.\n\t\tif (this.initializePromise) {\n\t\t\tawait this.initializePromise;\n\t\t}\n\n\t\t// Update state\n\t\tthis.state = StorageState.Closed;\n\n\t\t// Propagate to storage lib\n\t\tawait this._storage.close();\n\t}\n}\n\nclass BaseProfileAwareStorageMain extends BaseStorageMain {\n\tprivate static readonly STORAGE_NAME = \"state.vscdb\";\n\n\tget path(): string | undefined {\n\t\tif (!this.options.useInMemoryStorage) {\n\t\t\treturn join(\n\t\t\t\tthis.profile.globalStorageHome.with({ scheme: Schemas.file })\n\t\t\t\t\t.fsPath,\n\t\t\t\tBaseProfileAwareStorageMain.STORAGE_NAME,\n\t\t\t);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tconstructor(\n\t\tprivate readonly profile: IUserDataProfile,\n\t\tprivate readonly options: IStorageMainOptions,\n\t\tlogService: ILogService,\n\t\tfileService: IFileService,\n\t) {\n\t\tsuper(logService, fileService);\n\t}\n\n\tprotected async doCreate(): Promise<Storage> {\n\t\treturn new Storage(\n\t\t\tnew SQLiteStorageDatabase(\n\t\t\t\tthis.path ?? SQLiteStorageDatabase.IN_MEMORY_PATH,\n\t\t\t\t{\n\t\t\t\t\tlogging: this.createLoggingOptions(),\n\t\t\t\t},\n\t\t\t),\n\t\t\tthis.path ? undefined : { hint: StorageHint.STORAGE_IN_MEMORY },\n\t\t);\n\t}\n}\n\nexport class ProfileStorageMain extends BaseProfileAwareStorageMain {\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\toptions: IStorageMainOptions,\n\t\tlogService: ILogService,\n\t\tfileService: IFileService,\n\t) {\n\t\tsuper(profile, options, logService, fileService);\n\t}\n}\n\nexport class ApplicationStorageMain extends BaseProfileAwareStorageMain {\n\tconstructor(\n\t\toptions: IStorageMainOptions,\n\t\tuserDataProfileService: IUserDataProfilesService,\n\t\tlogService: ILogService,\n\t\tfileService: IFileService,\n\t) {\n\t\tsuper(\n\t\t\tuserDataProfileService.defaultProfile,\n\t\t\toptions,\n\t\t\tlogService,\n\t\t\tfileService,\n\t\t);\n\t}\n\n\tprotected override async doInit(storage: IStorage): Promise<void> {\n\t\tawait super.doInit(storage);\n\n\t\t// Apply telemetry values as part of the application storage initialization\n\t\tthis.updateTelemetryState(storage);\n\t}\n\n\tprivate updateTelemetryState(storage: IStorage): void {\n\t\t// First session date (once)\n\t\tconst firstSessionDate = storage.get(\n\t\t\tfirstSessionDateStorageKey,\n\t\t\tundefined,\n\t\t);\n\t\tif (firstSessionDate === undefined) {\n\t\t\tstorage.set(firstSessionDateStorageKey, new Date().toUTCString());\n\t\t}\n\n\t\t// Last / current session (always)\n\t\t// previous session date was the \"current\" one at that time\n\t\t// current session date is \"now\"\n\t\tconst lastSessionDate = storage.get(\n\t\t\tcurrentSessionDateStorageKey,\n\t\t\tundefined,\n\t\t);\n\t\tconst currentSessionDate = new Date().toUTCString();\n\t\tstorage.set(\n\t\t\tlastSessionDateStorageKey,\n\t\t\ttypeof lastSessionDate === \"undefined\" ? null : lastSessionDate,\n\t\t);\n\t\tstorage.set(currentSessionDateStorageKey, currentSessionDate);\n\t}\n}\n\nexport class WorkspaceStorageMain extends BaseStorageMain {\n\tprivate static readonly WORKSPACE_STORAGE_NAME = \"state.vscdb\";\n\tprivate static readonly WORKSPACE_META_NAME = \"workspace.json\";\n\n\tget path(): string | undefined {\n\t\tif (!this.options.useInMemoryStorage) {\n\t\t\treturn join(\n\t\t\t\tthis.environmentService.workspaceStorageHome.with({\n\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t}).fsPath,\n\t\t\t\tthis.workspace.id,\n\t\t\t\tWorkspaceStorageMain.WORKSPACE_STORAGE_NAME,\n\t\t\t);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tconstructor(\n\t\tprivate workspace: IAnyWorkspaceIdentifier,\n\t\tprivate readonly options: IStorageMainOptions,\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService,\n\t\tfileService: IFileService,\n\t) {\n\t\tsuper(logService, fileService);\n\t}\n\n\tprotected async doCreate(): Promise<Storage> {\n\t\tconst { storageFilePath, wasCreated } =\n\t\t\tawait this.prepareWorkspaceStorageFolder();\n\n\t\treturn new Storage(\n\t\t\tnew SQLiteStorageDatabase(storageFilePath, {\n\t\t\t\tlogging: this.createLoggingOptions(),\n\t\t\t}),\n\t\t\t{\n\t\t\t\thint: this.options.useInMemoryStorage\n\t\t\t\t\t? StorageHint.STORAGE_IN_MEMORY\n\t\t\t\t\t: wasCreated\n\t\t\t\t\t\t? StorageHint.STORAGE_DOES_NOT_EXIST\n\t\t\t\t\t\t: undefined,\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate async prepareWorkspaceStorageFolder(): Promise<{\n\t\tstorageFilePath: string;\n\t\twasCreated: boolean;\n\t}> {\n\t\t// Return early if using inMemory storage\n\t\tif (this.options.useInMemoryStorage) {\n\t\t\treturn {\n\t\t\t\tstorageFilePath: SQLiteStorageDatabase.IN_MEMORY_PATH,\n\t\t\t\twasCreated: true,\n\t\t\t};\n\t\t}\n\n\t\t// Otherwise, ensure the storage folder exists on disk\n\t\tconst workspaceStorageFolderPath = join(\n\t\t\tthis.environmentService.workspaceStorageHome.with({\n\t\t\t\tscheme: Schemas.file,\n\t\t\t}).fsPath,\n\t\t\tthis.workspace.id,\n\t\t);\n\t\tconst workspaceStorageDatabasePath = join(\n\t\t\tworkspaceStorageFolderPath,\n\t\t\tWorkspaceStorageMain.WORKSPACE_STORAGE_NAME,\n\t\t);\n\n\t\tconst storageExists = await Promises.exists(workspaceStorageFolderPath);\n\t\tif (storageExists) {\n\t\t\treturn {\n\t\t\t\tstorageFilePath: workspaceStorageDatabasePath,\n\t\t\t\twasCreated: false,\n\t\t\t};\n\t\t}\n\n\t\t// Ensure storage folder exists\n\t\tawait fs.promises.mkdir(workspaceStorageFolderPath, {\n\t\t\trecursive: true,\n\t\t});\n\n\t\t// Write metadata into folder (but do not await)\n\t\tthis.ensureWorkspaceStorageFolderMeta(workspaceStorageFolderPath);\n\n\t\treturn {\n\t\t\tstorageFilePath: workspaceStorageDatabasePath,\n\t\t\twasCreated: true,\n\t\t};\n\t}\n\n\tprivate async ensureWorkspaceStorageFolderMeta(\n\t\tworkspaceStorageFolderPath: string,\n\t): Promise<void> {\n\t\tlet meta: object | undefined;\n\t\tif (isSingleFolderWorkspaceIdentifier(this.workspace)) {\n\t\t\tmeta = { folder: this.workspace.uri.toString() };\n\t\t} else if (isWorkspaceIdentifier(this.workspace)) {\n\t\t\tmeta = { workspace: this.workspace.configPath.toString() };\n\t\t}\n\n\t\tif (meta) {\n\t\t\ttry {\n\t\t\t\tconst workspaceStorageMetaPath = join(\n\t\t\t\t\tworkspaceStorageFolderPath,\n\t\t\t\t\tWorkspaceStorageMain.WORKSPACE_META_NAME,\n\t\t\t\t);\n\t\t\t\tconst storageExists = await Promises.exists(\n\t\t\t\t\tworkspaceStorageMetaPath,\n\t\t\t\t);\n\t\t\t\tif (!storageExists) {\n\t\t\t\t\tawait Promises.writeFile(\n\t\t\t\t\t\tworkspaceStorageMetaPath,\n\t\t\t\t\t\tJSON.stringify(meta, undefined, 2),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`[storage main] ensureWorkspaceStorageFolderMeta(): Unable to create workspace storage metadata due to ${error}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class InMemoryStorageMain extends BaseStorageMain {\n\tget path(): string | undefined {\n\t\treturn undefined; // in-memory has no path\n\t}\n\n\tprotected async doCreate(): Promise<Storage> {\n\t\treturn new Storage(new InMemoryStorageDatabase(), {\n\t\t\thint: StorageHint.STORAGE_IN_MEMORY,\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
