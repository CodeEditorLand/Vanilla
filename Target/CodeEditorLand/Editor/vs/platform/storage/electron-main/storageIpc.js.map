{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/electron-main/storageIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport { IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IBaseSerializableStorageRequest, ISerializableItemsChangeEvent, ISerializableUpdateRequest, Key, Value } from '../common/storageIpc.js';\nimport { IStorageChangeEvent, IStorageMain } from './storageMain.js';\nimport { IStorageMainService } from './storageMainService.js';\nimport { IUserDataProfile } from '../../userDataProfile/common/userDataProfile.js';\nimport { reviveIdentifier, IAnyWorkspaceIdentifier } from '../../workspace/common/workspace.js';\n\nexport class StorageDatabaseChannel extends Disposable implements IServerChannel {\n\n\tprivate static readonly STORAGE_CHANGE_DEBOUNCE_TIME = 100;\n\n\tprivate readonly onDidChangeApplicationStorageEmitter = this._register(new Emitter<ISerializableItemsChangeEvent>());\n\n\tprivate readonly mapProfileToOnDidChangeProfileStorageEmitter = new Map<string /* profile ID */, Emitter<ISerializableItemsChangeEvent>>();\n\n\tconstructor(\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly storageMainService: IStorageMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerStorageChangeListeners(storageMainService.applicationStorage, this.onDidChangeApplicationStorageEmitter);\n\t}\n\n\t//#region Storage Change Events\n\n\tprivate registerStorageChangeListeners(storage: IStorageMain, emitter: Emitter<ISerializableItemsChangeEvent>): void {\n\n\t\t// Listen for changes in provided storage to send to listeners\n\t\t// that are listening. Use a debouncer to reduce IPC traffic.\n\n\t\tthis._register(Event.debounce(storage.onDidChangeStorage, (prev: IStorageChangeEvent[] | undefined, cur: IStorageChangeEvent) => {\n\t\t\tif (!prev) {\n\t\t\t\tprev = [cur];\n\t\t\t} else {\n\t\t\t\tprev.push(cur);\n\t\t\t}\n\n\t\t\treturn prev;\n\t\t}, StorageDatabaseChannel.STORAGE_CHANGE_DEBOUNCE_TIME)(events => {\n\t\t\tif (events.length) {\n\t\t\t\temitter.fire(this.serializeStorageChangeEvents(events, storage));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate serializeStorageChangeEvents(events: IStorageChangeEvent[], storage: IStorageMain): ISerializableItemsChangeEvent {\n\t\tconst changed = new Map<Key, Value>();\n\t\tconst deleted = new Set<Key>();\n\t\tevents.forEach(event => {\n\t\t\tconst existing = storage.get(event.key);\n\t\t\tif (typeof existing === 'string') {\n\t\t\t\tchanged.set(event.key, existing);\n\t\t\t} else {\n\t\t\t\tdeleted.add(event.key);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tchanged: Array.from(changed.entries()),\n\t\t\tdeleted: Array.from(deleted.values())\n\t\t};\n\t}\n\n\tlisten(_: unknown, event: string, arg: IBaseSerializableStorageRequest): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeStorage': {\n\t\t\t\tconst profile = arg.profile ? revive<IUserDataProfile>(arg.profile) : undefined;\n\n\t\t\t\t// Without profile: application scope\n\t\t\t\tif (!profile) {\n\t\t\t\t\treturn this.onDidChangeApplicationStorageEmitter.event;\n\t\t\t\t}\n\n\t\t\t\t// With profile: profile scope for the profile\n\t\t\t\tlet profileStorageChangeEmitter = this.mapProfileToOnDidChangeProfileStorageEmitter.get(profile.id);\n\t\t\t\tif (!profileStorageChangeEmitter) {\n\t\t\t\t\tprofileStorageChangeEmitter = this._register(new Emitter<ISerializableItemsChangeEvent>());\n\t\t\t\t\tthis.registerStorageChangeListeners(this.storageMainService.profileStorage(profile), profileStorageChangeEmitter);\n\t\t\t\t\tthis.mapProfileToOnDidChangeProfileStorageEmitter.set(profile.id, profileStorageChangeEmitter);\n\t\t\t\t}\n\n\t\t\t\treturn profileStorageChangeEmitter.event;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\t//#endregion\n\n\tasync call(_: unknown, command: string, arg: IBaseSerializableStorageRequest): Promise<any> {\n\t\tconst profile = arg.profile ? revive<IUserDataProfile>(arg.profile) : undefined;\n\t\tconst workspace = reviveIdentifier(arg.workspace);\n\n\t\t// Get storage to be ready\n\t\tconst storage = await this.withStorageInitialized(profile, workspace);\n\n\t\t// handle call\n\t\tswitch (command) {\n\t\t\tcase 'getItems': {\n\t\t\t\treturn Array.from(storage.items.entries());\n\t\t\t}\n\n\t\t\tcase 'updateItems': {\n\t\t\t\tconst items: ISerializableUpdateRequest = arg;\n\n\t\t\t\tif (items.insert) {\n\t\t\t\t\tfor (const [key, value] of items.insert) {\n\t\t\t\t\t\tstorage.set(key, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titems.delete?.forEach(key => storage.delete(key));\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'optimize': {\n\t\t\t\treturn storage.optimize();\n\t\t\t}\n\n\t\t\tcase 'isUsed': {\n\t\t\t\tconst path = arg.payload as string | undefined;\n\t\t\t\tif (typeof path === 'string') {\n\t\t\t\t\treturn this.storageMainService.isUsed(path);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Call not found: ${command}`);\n\t\t}\n\t}\n\n\tprivate async withStorageInitialized(profile: IUserDataProfile | undefined, workspace: IAnyWorkspaceIdentifier | undefined): Promise<IStorageMain> {\n\t\tlet storage: IStorageMain;\n\t\tif (workspace) {\n\t\t\tstorage = this.storageMainService.workspaceStorage(workspace);\n\t\t} else if (profile) {\n\t\t\tstorage = this.storageMainService.profileStorage(profile);\n\t\t} else {\n\t\t\tstorage = this.storageMainService.applicationStorage;\n\t\t}\n\n\t\ttry {\n\t\t\tawait storage.init();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`StorageIPC#init: Unable to init ${workspace ? 'workspace' : profile ? 'profile' : 'application'} storage due to ${error}`);\n\t\t}\n\n\t\treturn storage;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
