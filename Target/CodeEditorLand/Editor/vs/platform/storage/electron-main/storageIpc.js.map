{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/electron-main/storageIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../base/common/marshalling.js\";\nimport type { IServerChannel } from \"../../../base/parts/ipc/common/ipc.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport type { IUserDataProfile } from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\ttype IAnyWorkspaceIdentifier,\n\treviveIdentifier,\n} from \"../../workspace/common/workspace.js\";\nimport type {\n\tIBaseSerializableStorageRequest,\n\tISerializableItemsChangeEvent,\n\tISerializableUpdateRequest,\n\tKey,\n\tValue,\n} from \"../common/storageIpc.js\";\nimport type { IStorageChangeEvent, IStorageMain } from \"./storageMain.js\";\nimport type { IStorageMainService } from \"./storageMainService.js\";\n\nexport class StorageDatabaseChannel\n\textends Disposable\n\timplements IServerChannel\n{\n\tprivate static readonly STORAGE_CHANGE_DEBOUNCE_TIME = 100;\n\n\tprivate readonly onDidChangeApplicationStorageEmitter = this._register(\n\t\tnew Emitter<ISerializableItemsChangeEvent>(),\n\t);\n\n\tprivate readonly mapProfileToOnDidChangeProfileStorageEmitter = new Map<\n\t\tstring /* profile ID */,\n\t\tEmitter<ISerializableItemsChangeEvent>\n\t>();\n\n\tconstructor(\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly storageMainService: IStorageMainService,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerStorageChangeListeners(\n\t\t\tstorageMainService.applicationStorage,\n\t\t\tthis.onDidChangeApplicationStorageEmitter,\n\t\t);\n\t}\n\n\t//#region Storage Change Events\n\n\tprivate registerStorageChangeListeners(\n\t\tstorage: IStorageMain,\n\t\temitter: Emitter<ISerializableItemsChangeEvent>,\n\t): void {\n\t\t// Listen for changes in provided storage to send to listeners\n\t\t// that are listening. Use a debouncer to reduce IPC traffic.\n\n\t\tthis._register(\n\t\t\tEvent.debounce(\n\t\t\t\tstorage.onDidChangeStorage,\n\t\t\t\t(\n\t\t\t\t\tprev: IStorageChangeEvent[] | undefined,\n\t\t\t\t\tcur: IStorageChangeEvent,\n\t\t\t\t) => {\n\t\t\t\t\tif (prev) {\n\t\t\t\t\t\tprev.push(cur);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprev = [cur];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn prev;\n\t\t\t\t},\n\t\t\t\tStorageDatabaseChannel.STORAGE_CHANGE_DEBOUNCE_TIME,\n\t\t\t)((events) => {\n\t\t\t\tif (events.length) {\n\t\t\t\t\temitter.fire(\n\t\t\t\t\t\tthis.serializeStorageChangeEvents(events, storage),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate serializeStorageChangeEvents(\n\t\tevents: IStorageChangeEvent[],\n\t\tstorage: IStorageMain,\n\t): ISerializableItemsChangeEvent {\n\t\tconst changed = new Map<Key, Value>();\n\t\tconst deleted = new Set<Key>();\n\t\tevents.forEach((event) => {\n\t\t\tconst existing = storage.get(event.key);\n\t\t\tif (typeof existing === \"string\") {\n\t\t\t\tchanged.set(event.key, existing);\n\t\t\t} else {\n\t\t\t\tdeleted.add(event.key);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tchanged: Array.from(changed.entries()),\n\t\t\tdeleted: Array.from(deleted.values()),\n\t\t};\n\t}\n\n\tlisten(\n\t\t_: unknown,\n\t\tevent: string,\n\t\targ: IBaseSerializableStorageRequest,\n\t): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase \"onDidChangeStorage\": {\n\t\t\t\tconst profile = arg.profile\n\t\t\t\t\t? revive<IUserDataProfile>(arg.profile)\n\t\t\t\t\t: undefined;\n\n\t\t\t\t// Without profile: application scope\n\t\t\t\tif (!profile) {\n\t\t\t\t\treturn this.onDidChangeApplicationStorageEmitter.event;\n\t\t\t\t}\n\n\t\t\t\t// With profile: profile scope for the profile\n\t\t\t\tlet profileStorageChangeEmitter =\n\t\t\t\t\tthis.mapProfileToOnDidChangeProfileStorageEmitter.get(\n\t\t\t\t\t\tprofile.id,\n\t\t\t\t\t);\n\t\t\t\tif (!profileStorageChangeEmitter) {\n\t\t\t\t\tprofileStorageChangeEmitter = this._register(\n\t\t\t\t\t\tnew Emitter<ISerializableItemsChangeEvent>(),\n\t\t\t\t\t);\n\t\t\t\t\tthis.registerStorageChangeListeners(\n\t\t\t\t\t\tthis.storageMainService.profileStorage(profile),\n\t\t\t\t\t\tprofileStorageChangeEmitter,\n\t\t\t\t\t);\n\t\t\t\t\tthis.mapProfileToOnDidChangeProfileStorageEmitter.set(\n\t\t\t\t\t\tprofile.id,\n\t\t\t\t\t\tprofileStorageChangeEmitter,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn profileStorageChangeEmitter.event;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\t//#endregion\n\n\tasync call(\n\t\t_: unknown,\n\t\tcommand: string,\n\t\targ: IBaseSerializableStorageRequest,\n\t): Promise<any> {\n\t\tconst profile = arg.profile\n\t\t\t? revive<IUserDataProfile>(arg.profile)\n\t\t\t: undefined;\n\t\tconst workspace = reviveIdentifier(arg.workspace);\n\n\t\t// Get storage to be ready\n\t\tconst storage = await this.withStorageInitialized(profile, workspace);\n\n\t\t// handle call\n\t\tswitch (command) {\n\t\t\tcase \"getItems\": {\n\t\t\t\treturn Array.from(storage.items.entries());\n\t\t\t}\n\n\t\t\tcase \"updateItems\": {\n\t\t\t\tconst items: ISerializableUpdateRequest = arg;\n\n\t\t\t\tif (items.insert) {\n\t\t\t\t\tfor (const [key, value] of items.insert) {\n\t\t\t\t\t\tstorage.set(key, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titems.delete?.forEach((key) => storage.delete(key));\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase \"optimize\": {\n\t\t\t\treturn storage.optimize();\n\t\t\t}\n\n\t\t\tcase \"isUsed\": {\n\t\t\t\tconst path = arg.payload as string | undefined;\n\t\t\t\tif (typeof path === \"string\") {\n\t\t\t\t\treturn this.storageMainService.isUsed(path);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Call not found: ${command}`);\n\t\t}\n\t}\n\n\tprivate async withStorageInitialized(\n\t\tprofile: IUserDataProfile | undefined,\n\t\tworkspace: IAnyWorkspaceIdentifier | undefined,\n\t): Promise<IStorageMain> {\n\t\tlet storage: IStorageMain;\n\t\tif (workspace) {\n\t\t\tstorage = this.storageMainService.workspaceStorage(workspace);\n\t\t} else if (profile) {\n\t\t\tstorage = this.storageMainService.profileStorage(profile);\n\t\t} else {\n\t\t\tstorage = this.storageMainService.applicationStorage;\n\t\t}\n\n\t\ttry {\n\t\t\tawait storage.init();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\n\t\t\t\t`StorageIPC#init: Unable to init ${workspace ? \"workspace\" : profile ? \"profile\" : \"application\"} storage due to ${error}`,\n\t\t\t);\n\t\t}\n\n\t\treturn storage;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
