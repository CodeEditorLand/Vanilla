import{Emitter as g,Event as p}from"../../../base/common/event.js";import{Disposable as h}from"../../../base/common/lifecycle.js";import{revive as l}from"../../../base/common/marshalling.js";import{reviveIdentifier as d}from"../../workspace/common/workspace.js";class S extends h{constructor(r,t){super();this.logService=r;this.storageMainService=t;this.registerStorageChangeListeners(t.applicationStorage,this.onDidChangeApplicationStorageEmitter)}static STORAGE_CHANGE_DEBOUNCE_TIME=100;onDidChangeApplicationStorageEmitter=this._register(new g);mapProfileToOnDidChangeProfileStorageEmitter=new Map;registerStorageChangeListeners(r,t){this._register(p.debounce(r.onDidChangeStorage,(e,i)=>(e?e.push(i):e=[i],e),S.STORAGE_CHANGE_DEBOUNCE_TIME)(e=>{e.length&&t.fire(this.serializeStorageChangeEvents(e,r))}))}serializeStorageChangeEvents(r,t){const e=new Map,i=new Set;return r.forEach(a=>{const n=t.get(a.key);typeof n=="string"?e.set(a.key,n):i.add(a.key)}),{changed:Array.from(e.entries()),deleted:Array.from(i.values())}}listen(r,t,e){switch(t){case"onDidChangeStorage":{const i=e.profile?l(e.profile):void 0;if(!i)return this.onDidChangeApplicationStorageEmitter.event;let a=this.mapProfileToOnDidChangeProfileStorageEmitter.get(i.id);return a||(a=this._register(new g),this.registerStorageChangeListeners(this.storageMainService.profileStorage(i),a),this.mapProfileToOnDidChangeProfileStorageEmitter.set(i.id,a)),a.event}}throw new Error(`Event not found: ${t}`)}async call(r,t,e){const i=e.profile?l(e.profile):void 0,a=d(e.workspace),n=await this.withStorageInitialized(i,a);switch(t){case"getItems":return Array.from(n.items.entries());case"updateItems":{const o=e;if(o.insert)for(const[s,f]of o.insert)n.set(s,f);o.delete?.forEach(s=>n.delete(s));break}case"optimize":return n.optimize();case"isUsed":{const o=e.payload;if(typeof o=="string")return this.storageMainService.isUsed(o)}default:throw new Error(`Call not found: ${t}`)}}async withStorageInitialized(r,t){let e;t?e=this.storageMainService.workspaceStorage(t):r?e=this.storageMainService.profileStorage(r):e=this.storageMainService.applicationStorage;try{await e.init()}catch(i){this.logService.error(`StorageIPC#init: Unable to init ${t?"workspace":r?"profile":"application"} storage due to ${i}`)}return e}}export{S as StorageDatabaseChannel};
