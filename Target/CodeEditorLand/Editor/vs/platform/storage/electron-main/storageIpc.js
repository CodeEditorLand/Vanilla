import{Emitter as g,Event as f}from"../../../base/common/event.js";import{Disposable as c}from"../../../base/common/lifecycle.js";import{revive as l}from"../../../base/common/marshalling.js";import{reviveIdentifier as m}from"../../workspace/common/workspace.js";class p extends c{constructor(i,t){super();this.logService=i;this.storageMainService=t;this.registerStorageChangeListeners(t.applicationStorage,this.onDidChangeApplicationStorageEmitter)}static STORAGE_CHANGE_DEBOUNCE_TIME=100;onDidChangeApplicationStorageEmitter=this._register(new g);mapProfileToOnDidChangeProfileStorageEmitter=new Map;registerStorageChangeListeners(i,t){this._register(f.debounce(i.onDidChangeStorage,(e,r)=>(e?e.push(r):e=[r],e),p.STORAGE_CHANGE_DEBOUNCE_TIME)(e=>{e.length&&t.fire(this.serializeStorageChangeEvents(e,i))}))}serializeStorageChangeEvents(i,t){const e=new Map,r=new Set;return i.forEach(a=>{const o=t.get(a.key);typeof o=="string"?e.set(a.key,o):r.add(a.key)}),{changed:Array.from(e.entries()),deleted:Array.from(r.values())}}listen(i,t,e){switch(t){case"onDidChangeStorage":{const r=e.profile?l(e.profile):void 0;if(!r)return this.onDidChangeApplicationStorageEmitter.event;let a=this.mapProfileToOnDidChangeProfileStorageEmitter.get(r.id);return a||(a=this._register(new g),this.registerStorageChangeListeners(this.storageMainService.profileStorage(r),a),this.mapProfileToOnDidChangeProfileStorageEmitter.set(r.id,a)),a.event}}throw new Error(`Event not found: ${t}`)}async call(i,t,e){const r=e.profile?l(e.profile):void 0,a=m(e.workspace),o=await this.withStorageInitialized(r,a);switch(t){case"getItems":return Array.from(o.items.entries());case"updateItems":{const n=e;if(n.insert)for(const[s,S]of n.insert)o.set(s,S);n.delete?.forEach(s=>o.delete(s));break}case"optimize":return o.optimize();case"isUsed":{const n=e.payload;if(typeof n=="string")return this.storageMainService.isUsed(n)}default:throw new Error(`Call not found: ${t}`)}}async withStorageInitialized(i,t){let e;t?e=this.storageMainService.workspaceStorage(t):i?e=this.storageMainService.profileStorage(i):e=this.storageMainService.applicationStorage;try{await e.init()}catch(r){this.logService.error(`StorageIPC#init: Unable to init ${t?"workspace":i?"profile":"application"} storage due to ${r}`)}return e}}export{p as StorageDatabaseChannel};
