{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/electron-main/storageMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type { IStorage } from \"../../../base/parts/storage/common/storage.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport { IFileService } from \"../../files/common/files.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport {\n\tILifecycleMainService,\n\tLifecycleMainPhase,\n\tShutdownReason,\n} from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport {\n\ttype IUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../userDataProfile/common/userDataProfile.js\";\nimport { IUserDataProfilesMainService } from \"../../userDataProfile/electron-main/userDataProfile.js\";\nimport type { IAnyWorkspaceIdentifier } from \"../../workspace/common/workspace.js\";\nimport {\n\tAbstractStorageService,\n\ttype IStorageService,\n\tStorageScope,\n\ttype StorageTarget,\n\tisProfileUsingDefaultStorage,\n} from \"../common/storage.js\";\nimport {\n\tApplicationStorageMain,\n\ttype IStorageChangeEvent,\n\ttype IStorageMain,\n\ttype IStorageMainOptions,\n\tInMemoryStorageMain,\n\tProfileStorageMain,\n\tWorkspaceStorageMain,\n} from \"./storageMain.js\";\n\n//#region Storage Main Service (intent: make application, profile and workspace storage accessible to windows from main process)\n\nexport const IStorageMainService =\n\tcreateDecorator<IStorageMainService>(\"storageMainService\");\n\nexport interface IProfileStorageChangeEvent extends IStorageChangeEvent {\n\treadonly storage: IStorageMain;\n\treadonly profile: IUserDataProfile;\n}\n\nexport interface IStorageMainService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Provides access to the application storage shared across all\n\t * windows and all profiles.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       Rather use `IApplicationStorageMainService` for that purpose.\n\t */\n\treadonly applicationStorage: IStorageMain;\n\n\t/**\n\t * Emitted whenever data is updated or deleted in profile scoped storage.\n\t */\n\treadonly onDidChangeProfileStorage: Event<IProfileStorageChangeEvent>;\n\n\t/**\n\t * Provides access to the profile storage shared across all windows\n\t * for the provided profile.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       This is currently not supported.\n\t */\n\tprofileStorage(profile: IUserDataProfile): IStorageMain;\n\n\t/**\n\t * Provides access to the workspace storage specific to a single window.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       This is currently not supported.\n\t */\n\tworkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorageMain;\n\n\t/**\n\t * Checks if the provided path is currently in use for a storage database.\n\t *\n\t * @param path the path to the storage file or parent folder\n\t */\n\tisUsed(path: string): boolean;\n}\n\nexport class StorageMainService\n\textends Disposable\n\timplements IStorageMainService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate shutdownReason: ShutdownReason | undefined = undefined;\n\n\tprivate readonly _onDidChangeProfileStorage = this._register(\n\t\tnew Emitter<IProfileStorageChangeEvent>(),\n\t);\n\treadonly onDidChangeProfileStorage = this._onDidChangeProfileStorage.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesService: IUserDataProfilesMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprotected getStorageOptions(): IStorageMainOptions {\n\t\treturn {\n\t\t\tuseInMemoryStorage:\n\t\t\t\t!!this.environmentService.extensionTestsLocationURI, // no storage during extension tests!\n\t\t};\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Application Storage: Warmup when any window opens\n\t\t(async () => {\n\t\t\tawait this.lifecycleMainService.when(\n\t\t\t\tLifecycleMainPhase.AfterWindowOpen,\n\t\t\t);\n\n\t\t\tthis.applicationStorage.init();\n\t\t})();\n\n\t\tthis._register(\n\t\t\tthis.lifecycleMainService.onWillLoadWindow((e) => {\n\t\t\t\t// Profile Storage: Warmup when related window with profile loads\n\t\t\t\tif (e.window.profile) {\n\t\t\t\t\tthis.profileStorage(e.window.profile).init();\n\t\t\t\t}\n\n\t\t\t\t// Workspace Storage: Warmup when related window with workspace loads\n\t\t\t\tif (e.workspace) {\n\t\t\t\t\tthis.workspaceStorage(e.workspace).init();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// All Storage: Close when shutting down\n\t\tthis._register(\n\t\t\tthis.lifecycleMainService.onWillShutdown((e) => {\n\t\t\t\tthis.logService.trace(\"storageMainService#onWillShutdown()\");\n\n\t\t\t\t// Remember shutdown reason\n\t\t\t\tthis.shutdownReason = e.reason;\n\n\t\t\t\t// Application Storage\n\t\t\t\te.join(\"applicationStorage\", this.applicationStorage.close());\n\n\t\t\t\t// Profile Storage(s)\n\t\t\t\tfor (const [, profileStorage] of this.mapProfileToStorage) {\n\t\t\t\t\te.join(\"profileStorage\", profileStorage.close());\n\t\t\t\t}\n\n\t\t\t\t// Workspace Storage(s)\n\t\t\t\tfor (const [, workspaceStorage] of this.mapWorkspaceToStorage) {\n\t\t\t\t\te.join(\"workspaceStorage\", workspaceStorage.close());\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Prepare storage location as needed\n\t\tthis._register(\n\t\t\tthis.userDataProfilesService.onWillCreateProfile((e) => {\n\t\t\t\te.join(\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!(await this.fileService.exists(\n\t\t\t\t\t\t\t\te.profile.globalStorageHome,\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tawait this.fileService.createFolder(\n\t\t\t\t\t\t\t\te.profile.globalStorageHome,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})(),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// Close the storage of the profile that is being removed\n\t\tthis._register(\n\t\t\tthis.userDataProfilesService.onWillRemoveProfile((e) => {\n\t\t\t\tconst storage = this.mapProfileToStorage.get(e.profile.id);\n\t\t\t\tif (storage) {\n\t\t\t\t\te.join(storage.close());\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\t//#region Application Storage\n\n\treadonly applicationStorage = this._register(\n\t\tthis.createApplicationStorage(),\n\t);\n\n\tprivate createApplicationStorage(): IStorageMain {\n\t\tthis.logService.trace(\n\t\t\t`StorageMainService: creating application storage`,\n\t\t);\n\n\t\tconst applicationStorage = new ApplicationStorageMain(\n\t\t\tthis.getStorageOptions(),\n\t\t\tthis.userDataProfilesService,\n\t\t\tthis.logService,\n\t\t\tthis.fileService,\n\t\t);\n\n\t\tthis._register(\n\t\t\tEvent.once(applicationStorage.onDidCloseStorage)(() => {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`StorageMainService: closed application storage`,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\treturn applicationStorage;\n\t}\n\n\t//#endregion\n\n\t//#region Profile Storage\n\n\tprivate readonly mapProfileToStorage = new Map<\n\t\tstring /* profile ID */,\n\t\tIStorageMain\n\t>();\n\n\tprofileStorage(profile: IUserDataProfile): IStorageMain {\n\t\tif (isProfileUsingDefaultStorage(profile)) {\n\t\t\treturn this.applicationStorage; // for profiles using default storage, use application storage\n\t\t}\n\n\t\tlet profileStorage = this.mapProfileToStorage.get(profile.id);\n\t\tif (!profileStorage) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`StorageMainService: creating profile storage (${profile.name})`,\n\t\t\t);\n\n\t\t\tprofileStorage = this._register(this.createProfileStorage(profile));\n\t\t\tthis.mapProfileToStorage.set(profile.id, profileStorage);\n\n\t\t\tconst listener = this._register(\n\t\t\t\tprofileStorage.onDidChangeStorage((e) =>\n\t\t\t\t\tthis._onDidChangeProfileStorage.fire({\n\t\t\t\t\t\t...e,\n\t\t\t\t\t\tstorage: profileStorage!,\n\t\t\t\t\t\tprofile,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tthis._register(\n\t\t\t\tEvent.once(profileStorage.onDidCloseStorage)(() => {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`StorageMainService: closed profile storage (${profile.name})`,\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.mapProfileToStorage.delete(profile.id);\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\treturn profileStorage;\n\t}\n\n\tprivate createProfileStorage(profile: IUserDataProfile): IStorageMain {\n\t\tif (this.shutdownReason === ShutdownReason.KILL) {\n\t\t\t// Workaround for native crashes that we see when\n\t\t\t// SQLite DBs are being created even after shutdown\n\t\t\t// https://github.com/microsoft/vscode/issues/143186\n\n\t\t\treturn new InMemoryStorageMain(this.logService, this.fileService);\n\t\t}\n\n\t\treturn new ProfileStorageMain(\n\t\t\tprofile,\n\t\t\tthis.getStorageOptions(),\n\t\t\tthis.logService,\n\t\t\tthis.fileService,\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region Workspace Storage\n\n\tprivate readonly mapWorkspaceToStorage = new Map<\n\t\tstring /* workspace ID */,\n\t\tIStorageMain\n\t>();\n\n\tworkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorageMain {\n\t\tlet workspaceStorage = this.mapWorkspaceToStorage.get(workspace.id);\n\t\tif (!workspaceStorage) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`StorageMainService: creating workspace storage (${workspace.id})`,\n\t\t\t);\n\n\t\t\tworkspaceStorage = this._register(\n\t\t\t\tthis.createWorkspaceStorage(workspace),\n\t\t\t);\n\t\t\tthis.mapWorkspaceToStorage.set(workspace.id, workspaceStorage);\n\n\t\t\tthis._register(\n\t\t\t\tEvent.once(workspaceStorage.onDidCloseStorage)(() => {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`StorageMainService: closed workspace storage (${workspace.id})`,\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.mapWorkspaceToStorage.delete(workspace.id);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\treturn workspaceStorage;\n\t}\n\n\tprivate createWorkspaceStorage(\n\t\tworkspace: IAnyWorkspaceIdentifier,\n\t): IStorageMain {\n\t\tif (this.shutdownReason === ShutdownReason.KILL) {\n\t\t\t// Workaround for native crashes that we see when\n\t\t\t// SQLite DBs are being created even after shutdown\n\t\t\t// https://github.com/microsoft/vscode/issues/143186\n\n\t\t\treturn new InMemoryStorageMain(this.logService, this.fileService);\n\t\t}\n\n\t\treturn new WorkspaceStorageMain(\n\t\t\tworkspace,\n\t\t\tthis.getStorageOptions(),\n\t\t\tthis.logService,\n\t\t\tthis.environmentService,\n\t\t\tthis.fileService,\n\t\t);\n\t}\n\n\t//#endregion\n\n\tisUsed(path: string): boolean {\n\t\tconst pathUri = URI.file(path);\n\n\t\tfor (const storage of [\n\t\t\tthis.applicationStorage,\n\t\t\t...this.mapProfileToStorage.values(),\n\t\t\t...this.mapWorkspaceToStorage.values(),\n\t\t]) {\n\t\t\tif (!storage.path) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.uriIdentityService.extUri.isEqualOrParent(\n\t\t\t\t\tURI.file(storage.path),\n\t\t\t\t\tpathUri,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n//#endregion\n\n//#region Application Main Storage Service (intent: use application storage from main process)\n\nexport const IApplicationStorageMainService =\n\tcreateDecorator<IStorageMainService>(\"applicationStorageMainService\");\n\n/**\n * A specialized `IStorageService` interface that only allows\n * access to the `StorageScope.APPLICATION` scope.\n */\nexport interface IApplicationStorageMainService extends IStorageService {\n\t/**\n\t * Important: unlike other storage services in the renderer, the\n\t * main process does not await the storage to be ready, rather\n\t * storage is being initialized while a window opens to reduce\n\t * pressure on startup.\n\t *\n\t * As such, any client wanting to access application storage from the\n\t * main process needs to wait for `whenReady`, otherwise there is\n\t * a chance that the service operates on an in-memory store that\n\t * is not backed by any persistent DB.\n\t */\n\treadonly whenReady: Promise<void>;\n\n\tget(\n\t\tkey: string,\n\t\tscope: StorageScope.APPLICATION,\n\t\tfallbackValue: string,\n\t): string;\n\tget(\n\t\tkey: string,\n\t\tscope: StorageScope.APPLICATION,\n\t\tfallbackValue?: string,\n\t): string | undefined;\n\n\tgetBoolean(\n\t\tkey: string,\n\t\tscope: StorageScope.APPLICATION,\n\t\tfallbackValue: boolean,\n\t): boolean;\n\tgetBoolean(\n\t\tkey: string,\n\t\tscope: StorageScope.APPLICATION,\n\t\tfallbackValue?: boolean,\n\t): boolean | undefined;\n\n\tgetNumber(\n\t\tkey: string,\n\t\tscope: StorageScope.APPLICATION,\n\t\tfallbackValue: number,\n\t): number;\n\tgetNumber(\n\t\tkey: string,\n\t\tscope: StorageScope.APPLICATION,\n\t\tfallbackValue?: number,\n\t): number | undefined;\n\n\tstore(\n\t\tkey: string,\n\t\tvalue: string | boolean | number | undefined | null,\n\t\tscope: StorageScope.APPLICATION,\n\t\ttarget: StorageTarget,\n\t): void;\n\n\tremove(key: string, scope: StorageScope.APPLICATION): void;\n\n\tkeys(scope: StorageScope.APPLICATION, target: StorageTarget): string[];\n\n\tswitch(): never;\n\n\tisNew(scope: StorageScope.APPLICATION): boolean;\n}\n\nexport class ApplicationStorageMainService\n\textends AbstractStorageService\n\timplements IApplicationStorageMainService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly whenReady = this.storageMainService.applicationStorage.whenInit;\n\n\tconstructor(\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IStorageMainService private readonly storageMainService: IStorageMainService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected doInitialize(): Promise<void> {\n\t\t// application storage is being initialized as part\n\t\t// of the first window opening, so we do not trigger\n\t\t// it here but can join it\n\t\treturn this.storageMainService.applicationStorage.whenInit;\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\tif (scope === StorageScope.APPLICATION) {\n\t\t\treturn this.storageMainService.applicationStorage.storage;\n\t\t}\n\n\t\treturn undefined; // any other scope is unsupported from main process\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tif (scope === StorageScope.APPLICATION) {\n\t\t\treturn this.userDataProfilesService.defaultProfile.globalStorageHome.with(\n\t\t\t\t{ scheme: Schemas.file },\n\t\t\t).fsPath;\n\t\t}\n\n\t\treturn undefined; // any other scope is unsupported from main process\n\t}\n\n\tprotected override shouldFlushWhenIdle(): boolean {\n\t\treturn false; // not needed here, will be triggered from any window that is opened\n\t}\n\n\toverride switch(): never {\n\t\tthrow new Error(\"Migrating storage is unsupported from main process\");\n\t}\n\n\tprotected switchToProfile(): never {\n\t\tthrow new Error(\n\t\t\t\"Switching storage profile is unsupported from main process\",\n\t\t);\n\t}\n\n\tprotected switchToWorkspace(): never {\n\t\tthrow new Error(\n\t\t\t\"Switching storage workspace is unsupported from main process\",\n\t\t);\n\t}\n\n\thasScope(): never {\n\t\tthrow new Error(\"Main process is never profile or workspace scoped\");\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
