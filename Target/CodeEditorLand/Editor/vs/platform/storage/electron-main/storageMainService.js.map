{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/storage/electron-main/storageMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../base/common/uri.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { IStorage } from '../../../base/parts/storage/common/storage.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILifecycleMainService, LifecycleMainPhase, ShutdownReason } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { AbstractStorageService, isProfileUsingDefaultStorage, IStorageService, StorageScope, StorageTarget } from '../common/storage.js';\nimport { ApplicationStorageMain, ProfileStorageMain, InMemoryStorageMain, IStorageMain, IStorageMainOptions, WorkspaceStorageMain, IStorageChangeEvent } from './storageMain.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfilesMainService } from '../../userDataProfile/electron-main/userDataProfile.js';\nimport { IAnyWorkspaceIdentifier } from '../../workspace/common/workspace.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { Schemas } from '../../../base/common/network.js';\n\n//#region Storage Main Service (intent: make application, profile and workspace storage accessible to windows from main process)\n\nexport const IStorageMainService = createDecorator<IStorageMainService>('storageMainService');\n\nexport interface IProfileStorageChangeEvent extends IStorageChangeEvent {\n\treadonly storage: IStorageMain;\n\treadonly profile: IUserDataProfile;\n}\n\nexport interface IStorageMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Provides access to the application storage shared across all\n\t * windows and all profiles.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       Rather use `IApplicationStorageMainService` for that purpose.\n\t */\n\treadonly applicationStorage: IStorageMain;\n\n\t/**\n\t * Emitted whenever data is updated or deleted in profile scoped storage.\n\t */\n\treadonly onDidChangeProfileStorage: Event<IProfileStorageChangeEvent>;\n\n\t/**\n\t * Provides access to the profile storage shared across all windows\n\t * for the provided profile.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       This is currently not supported.\n\t */\n\tprofileStorage(profile: IUserDataProfile): IStorageMain;\n\n\t/**\n\t * Provides access to the workspace storage specific to a single window.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       This is currently not supported.\n\t */\n\tworkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorageMain;\n\n\t/**\n\t * Checks if the provided path is currently in use for a storage database.\n\t *\n\t * @param path the path to the storage file or parent folder\n\t */\n\tisUsed(path: string): boolean;\n}\n\nexport class StorageMainService extends Disposable implements IStorageMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate shutdownReason: ShutdownReason | undefined = undefined;\n\n\tprivate readonly _onDidChangeProfileStorage = this._register(new Emitter<IProfileStorageChangeEvent>());\n\treadonly onDidChangeProfileStorage = this._onDidChangeProfileStorage.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesService: IUserDataProfilesMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprotected getStorageOptions(): IStorageMainOptions {\n\t\treturn {\n\t\t\tuseInMemoryStorage: !!this.environmentService.extensionTestsLocationURI // no storage during extension tests!\n\t\t};\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Application Storage: Warmup when any window opens\n\t\t(async () => {\n\t\t\tawait this.lifecycleMainService.when(LifecycleMainPhase.AfterWindowOpen);\n\n\t\t\tthis.applicationStorage.init();\n\t\t})();\n\n\t\tthis._register(this.lifecycleMainService.onWillLoadWindow(e => {\n\n\t\t\t// Profile Storage: Warmup when related window with profile loads\n\t\t\tif (e.window.profile) {\n\t\t\t\tthis.profileStorage(e.window.profile).init();\n\t\t\t}\n\n\t\t\t// Workspace Storage: Warmup when related window with workspace loads\n\t\t\tif (e.workspace) {\n\t\t\t\tthis.workspaceStorage(e.workspace).init();\n\t\t\t}\n\t\t}));\n\n\t\t// All Storage: Close when shutting down\n\t\tthis._register(this.lifecycleMainService.onWillShutdown(e => {\n\t\t\tthis.logService.trace('storageMainService#onWillShutdown()');\n\n\t\t\t// Remember shutdown reason\n\t\t\tthis.shutdownReason = e.reason;\n\n\t\t\t// Application Storage\n\t\t\te.join('applicationStorage', this.applicationStorage.close());\n\n\t\t\t// Profile Storage(s)\n\t\t\tfor (const [, profileStorage] of this.mapProfileToStorage) {\n\t\t\t\te.join('profileStorage', profileStorage.close());\n\t\t\t}\n\n\t\t\t// Workspace Storage(s)\n\t\t\tfor (const [, workspaceStorage] of this.mapWorkspaceToStorage) {\n\t\t\t\te.join('workspaceStorage', workspaceStorage.close());\n\t\t\t}\n\t\t}));\n\n\t\t// Prepare storage location as needed\n\t\tthis._register(this.userDataProfilesService.onWillCreateProfile(e => {\n\t\t\te.join((async () => {\n\t\t\t\tif (!(await this.fileService.exists(e.profile.globalStorageHome))) {\n\t\t\t\t\tawait this.fileService.createFolder(e.profile.globalStorageHome);\n\t\t\t\t}\n\t\t\t})());\n\t\t}));\n\n\t\t// Close the storage of the profile that is being removed\n\t\tthis._register(this.userDataProfilesService.onWillRemoveProfile(e => {\n\t\t\tconst storage = this.mapProfileToStorage.get(e.profile.id);\n\t\t\tif (storage) {\n\t\t\t\te.join(storage.close());\n\t\t\t}\n\t\t}));\n\t}\n\n\t//#region Application Storage\n\n\treadonly applicationStorage = this._register(this.createApplicationStorage());\n\n\tprivate createApplicationStorage(): IStorageMain {\n\t\tthis.logService.trace(`StorageMainService: creating application storage`);\n\n\t\tconst applicationStorage = new ApplicationStorageMain(this.getStorageOptions(), this.userDataProfilesService, this.logService, this.fileService);\n\n\t\tthis._register(Event.once(applicationStorage.onDidCloseStorage)(() => {\n\t\t\tthis.logService.trace(`StorageMainService: closed application storage`);\n\t\t}));\n\n\t\treturn applicationStorage;\n\t}\n\n\t//#endregion\n\n\t//#region Profile Storage\n\n\tprivate readonly mapProfileToStorage = new Map<string /* profile ID */, IStorageMain>();\n\n\tprofileStorage(profile: IUserDataProfile): IStorageMain {\n\t\tif (isProfileUsingDefaultStorage(profile)) {\n\t\t\treturn this.applicationStorage; // for profiles using default storage, use application storage\n\t\t}\n\n\t\tlet profileStorage = this.mapProfileToStorage.get(profile.id);\n\t\tif (!profileStorage) {\n\t\t\tthis.logService.trace(`StorageMainService: creating profile storage (${profile.name})`);\n\n\t\t\tprofileStorage = this._register(this.createProfileStorage(profile));\n\t\t\tthis.mapProfileToStorage.set(profile.id, profileStorage);\n\n\t\t\tconst listener = this._register(profileStorage.onDidChangeStorage(e => this._onDidChangeProfileStorage.fire({\n\t\t\t\t...e,\n\t\t\t\tstorage: profileStorage!,\n\t\t\t\tprofile\n\t\t\t})));\n\n\t\t\tthis._register(Event.once(profileStorage.onDidCloseStorage)(() => {\n\t\t\t\tthis.logService.trace(`StorageMainService: closed profile storage (${profile.name})`);\n\n\t\t\t\tthis.mapProfileToStorage.delete(profile.id);\n\t\t\t\tlistener.dispose();\n\t\t\t}));\n\t\t}\n\n\t\treturn profileStorage;\n\t}\n\n\tprivate createProfileStorage(profile: IUserDataProfile): IStorageMain {\n\t\tif (this.shutdownReason === ShutdownReason.KILL) {\n\n\t\t\t// Workaround for native crashes that we see when\n\t\t\t// SQLite DBs are being created even after shutdown\n\t\t\t// https://github.com/microsoft/vscode/issues/143186\n\n\t\t\treturn new InMemoryStorageMain(this.logService, this.fileService);\n\t\t}\n\n\t\treturn new ProfileStorageMain(profile, this.getStorageOptions(), this.logService, this.fileService);\n\t}\n\n\t//#endregion\n\n\n\t//#region Workspace Storage\n\n\tprivate readonly mapWorkspaceToStorage = new Map<string /* workspace ID */, IStorageMain>();\n\n\tworkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorageMain {\n\t\tlet workspaceStorage = this.mapWorkspaceToStorage.get(workspace.id);\n\t\tif (!workspaceStorage) {\n\t\t\tthis.logService.trace(`StorageMainService: creating workspace storage (${workspace.id})`);\n\n\t\t\tworkspaceStorage = this._register(this.createWorkspaceStorage(workspace));\n\t\t\tthis.mapWorkspaceToStorage.set(workspace.id, workspaceStorage);\n\n\t\t\tthis._register(Event.once(workspaceStorage.onDidCloseStorage)(() => {\n\t\t\t\tthis.logService.trace(`StorageMainService: closed workspace storage (${workspace.id})`);\n\n\t\t\t\tthis.mapWorkspaceToStorage.delete(workspace.id);\n\t\t\t}));\n\t\t}\n\n\t\treturn workspaceStorage;\n\t}\n\n\tprivate createWorkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorageMain {\n\t\tif (this.shutdownReason === ShutdownReason.KILL) {\n\n\t\t\t// Workaround for native crashes that we see when\n\t\t\t// SQLite DBs are being created even after shutdown\n\t\t\t// https://github.com/microsoft/vscode/issues/143186\n\n\t\t\treturn new InMemoryStorageMain(this.logService, this.fileService);\n\t\t}\n\n\t\treturn new WorkspaceStorageMain(workspace, this.getStorageOptions(), this.logService, this.environmentService, this.fileService);\n\t}\n\n\t//#endregion\n\n\tisUsed(path: string): boolean {\n\t\tconst pathUri = URI.file(path);\n\n\t\tfor (const storage of [this.applicationStorage, ...this.mapProfileToStorage.values(), ...this.mapWorkspaceToStorage.values()]) {\n\t\t\tif (!storage.path) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.uriIdentityService.extUri.isEqualOrParent(URI.file(storage.path), pathUri)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n//#endregion\n\n\n//#region Application Main Storage Service (intent: use application storage from main process)\n\nexport const IApplicationStorageMainService = createDecorator<IStorageMainService>('applicationStorageMainService');\n\n/**\n * A specialized `IStorageService` interface that only allows\n * access to the `StorageScope.APPLICATION` scope.\n */\nexport interface IApplicationStorageMainService extends IStorageService {\n\n\t/**\n\t * Important: unlike other storage services in the renderer, the\n\t * main process does not await the storage to be ready, rather\n\t * storage is being initialized while a window opens to reduce\n\t * pressure on startup.\n\t *\n\t * As such, any client wanting to access application storage from the\n\t * main process needs to wait for `whenReady`, otherwise there is\n\t * a chance that the service operates on an in-memory store that\n\t * is not backed by any persistent DB.\n\t */\n\treadonly whenReady: Promise<void>;\n\n\tget(key: string, scope: StorageScope.APPLICATION, fallbackValue: string): string;\n\tget(key: string, scope: StorageScope.APPLICATION, fallbackValue?: string): string | undefined;\n\n\tgetBoolean(key: string, scope: StorageScope.APPLICATION, fallbackValue: boolean): boolean;\n\tgetBoolean(key: string, scope: StorageScope.APPLICATION, fallbackValue?: boolean): boolean | undefined;\n\n\tgetNumber(key: string, scope: StorageScope.APPLICATION, fallbackValue: number): number;\n\tgetNumber(key: string, scope: StorageScope.APPLICATION, fallbackValue?: number): number | undefined;\n\n\tstore(key: string, value: string | boolean | number | undefined | null, scope: StorageScope.APPLICATION, target: StorageTarget): void;\n\n\tremove(key: string, scope: StorageScope.APPLICATION): void;\n\n\tkeys(scope: StorageScope.APPLICATION, target: StorageTarget): string[];\n\n\tswitch(): never;\n\n\tisNew(scope: StorageScope.APPLICATION): boolean;\n}\n\nexport class ApplicationStorageMainService extends AbstractStorageService implements IApplicationStorageMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly whenReady = this.storageMainService.applicationStorage.whenInit;\n\n\tconstructor(\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IStorageMainService private readonly storageMainService: IStorageMainService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected doInitialize(): Promise<void> {\n\n\t\t// application storage is being initialized as part\n\t\t// of the first window opening, so we do not trigger\n\t\t// it here but can join it\n\t\treturn this.storageMainService.applicationStorage.whenInit;\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\tif (scope === StorageScope.APPLICATION) {\n\t\t\treturn this.storageMainService.applicationStorage.storage;\n\t\t}\n\n\t\treturn undefined; // any other scope is unsupported from main process\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tif (scope === StorageScope.APPLICATION) {\n\t\t\treturn this.userDataProfilesService.defaultProfile.globalStorageHome.with({ scheme: Schemas.file }).fsPath;\n\t\t}\n\n\t\treturn undefined; // any other scope is unsupported from main process\n\t}\n\n\tprotected override shouldFlushWhenIdle(): boolean {\n\t\treturn false; // not needed here, will be triggered from any window that is opened\n\t}\n\n\toverride switch(): never {\n\t\tthrow new Error('Migrating storage is unsupported from main process');\n\t}\n\n\tprotected switchToProfile(): never {\n\t\tthrow new Error('Switching storage profile is unsupported from main process');\n\t}\n\n\tprotected switchToWorkspace(): never {\n\t\tthrow new Error('Switching storage workspace is unsupported from main process');\n\t}\n\n\thasScope(): never {\n\t\tthrow new Error('Main process is never profile or workspace scoped');\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
