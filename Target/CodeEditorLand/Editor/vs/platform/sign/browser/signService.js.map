{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/sign/browser/signService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\timportAMDNodeModule,\n\tresolveAmdNodeModulePath,\n} from \"../../../amdX.js\";\nimport { WindowIntervalTimer } from \"../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../base/browser/window.js\";\nimport { isESM } from \"../../../base/common/amd.js\";\nimport { memoize } from \"../../../base/common/decorators.js\";\nimport { FileAccess } from \"../../../base/common/network.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\tAbstractSignService,\n\ttype IVsdaValidator,\n} from \"../common/abstractSignService.js\";\nimport type { ISignService } from \"../common/sign.js\";\n\ndeclare namespace vsdaWeb {\n\texport function sign(salted_message: string): string;\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\texport class validator {\n\t\tfree(): void;\n\t\tconstructor();\n\t\tcreateNewMessage(original: string): string;\n\t\tvalidate(signed_message: string): \"ok\" | \"error\";\n\t}\n\n\texport type InitInput =\n\t\t| RequestInfo\n\t\t| URL\n\t\t| Response\n\t\t| BufferSource\n\t\t| WebAssembly.Module;\n\texport function init(\n\t\tmodule_or_path?: InitInput | Promise<InitInput>,\n\t): Promise<unknown>;\n}\n\n// Initialized if/when vsda is loaded\ndeclare const vsda_web: {\n\tdefault: typeof vsdaWeb.init;\n\tsign: typeof vsdaWeb.sign;\n\tvalidator: typeof vsdaWeb.validator;\n};\n\nconst KEY_SIZE = 32;\nconst IV_SIZE = 16;\nconst STEP_SIZE = KEY_SIZE + IV_SIZE;\n\nexport class SignService extends AbstractSignService implements ISignService {\n\tconstructor(@IProductService private readonly productService: IProductService) {\n\t\tsuper();\n\t}\n\tprotected override getValidator(): Promise<IVsdaValidator> {\n\t\treturn this.vsda().then((vsda) => {\n\t\t\tconst v = new vsda.validator();\n\t\t\treturn {\n\t\t\t\tcreateNewMessage: (arg) => v.createNewMessage(arg),\n\t\t\t\tvalidate: (arg) => v.validate(arg),\n\t\t\t\tdispose: () => v.free(),\n\t\t\t};\n\t\t});\n\t}\n\n\tprotected override signValue(arg: string): Promise<string> {\n\t\treturn this.vsda().then((vsda) => vsda.sign(arg));\n\t}\n\n\t@memoize\n\tprivate async vsda(): Promise<typeof vsda_web> {\n\t\tconst checkInterval = new WindowIntervalTimer();\n\t\tlet [wasm] = await Promise.all([\n\t\t\tthis.getWasmBytes(),\n\t\t\tnew Promise<void>((resolve, reject) => {\n\t\t\t\timportAMDNodeModule(\"vsda\", \"rust/web/vsda.js\").then(\n\t\t\t\t\t() => resolve(),\n\t\t\t\t\treject,\n\t\t\t\t);\n\n\t\t\t\t// todo@connor4312: there seems to be a bug(?) in vscode-loader with\n\t\t\t\t// require() not resolving in web once the script loads, so check manually\n\t\t\t\tcheckInterval.cancelAndSet(\n\t\t\t\t\t() => {\n\t\t\t\t\t\tif (typeof vsda_web !== \"undefined\") {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t50,\n\t\t\t\t\tmainWindow,\n\t\t\t\t);\n\t\t\t}).finally(() => checkInterval.dispose()),\n\t\t]);\n\n\t\tconst keyBytes = new TextEncoder().encode(\n\t\t\tthis.productService.serverLicense?.join(\"\\n\") || \"\",\n\t\t);\n\t\tfor (let i = 0; i + STEP_SIZE < keyBytes.length; i += STEP_SIZE) {\n\t\t\tconst key = await crypto.subtle.importKey(\n\t\t\t\t\"raw\",\n\t\t\t\tkeyBytes.slice(i + IV_SIZE, i + IV_SIZE + KEY_SIZE),\n\t\t\t\t{ name: \"AES-CBC\" },\n\t\t\t\tfalse,\n\t\t\t\t[\"decrypt\"],\n\t\t\t);\n\t\t\twasm = await crypto.subtle.decrypt(\n\t\t\t\t{ name: \"AES-CBC\", iv: keyBytes.slice(i, i + IV_SIZE) },\n\t\t\t\tkey,\n\t\t\t\twasm,\n\t\t\t);\n\t\t}\n\n\t\tawait vsda_web.default(wasm);\n\n\t\treturn vsda_web;\n\t}\n\n\tprivate async getWasmBytes(): Promise<ArrayBuffer> {\n\t\tconst url = isESM\n\t\t\t? resolveAmdNodeModulePath(\"vsda\", \"rust/web/vsda_bg.wasm\")\n\t\t\t: FileAccess.asBrowserUri(\"vsda/../vsda_bg.wasm\").toString(true);\n\t\tconst response = await fetch(url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\"error loading vsda\");\n\t\t}\n\n\t\treturn response.arrayBuffer();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,2BAA2B;AACpC,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AACtB,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,OAEM;AAgCP,MAAM,WAAW;AACjB,MAAM,UAAU;AAChB,MAAM,YAAY,WAAW;AAEtB,IAAM,cAAN,cAA0B,oBAA4C;AAAA,EAC5E,YAA8C,gBAAiC;AAC9E,UAAM;AADuC;AAAA,EAE9C;AAAA,EAzDD,OAsD6E;AAAA;AAAA;AAAA,EAIzD,eAAwC;AAC1D,WAAO,KAAK,KAAK,EAAE,KAAK,CAAC,SAAS;AACjC,YAAM,IAAI,IAAI,KAAK,UAAU;AAC7B,aAAO;AAAA,QACN,kBAAkB,wBAAC,QAAQ,EAAE,iBAAiB,GAAG,GAA/B;AAAA,QAClB,UAAU,wBAAC,QAAQ,EAAE,SAAS,GAAG,GAAvB;AAAA,QACV,SAAS,6BAAM,EAAE,KAAK,GAAb;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEmB,UAAU,KAA8B;AAC1D,WAAO,KAAK,KAAK,EAAE,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,CAAC;AAAA,EACjD;AAAA,EAGA,MAAc,OAAiC;AAC9C,UAAM,gBAAgB,IAAI,oBAAoB;AAC9C,QAAI,CAAC,IAAI,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC9B,KAAK,aAAa;AAAA,MAClB,IAAI,QAAc,CAAC,SAAS,WAAW;AACtC,4BAAoB,QAAQ,kBAAkB,EAAE;AAAA,UAC/C,MAAM,QAAQ;AAAA,UACd;AAAA,QACD;AAIA,sBAAc;AAAA,UACb,MAAM;AACL,gBAAI,OAAO,aAAa,aAAa;AACpC,sBAAQ;AAAA,YACT;AAAA,UACD;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD,CAAC,EAAE,QAAQ,MAAM,cAAc,QAAQ,CAAC;AAAA,IACzC,CAAC;AAED,UAAM,WAAW,IAAI,YAAY,EAAE;AAAA,MAClC,KAAK,eAAe,eAAe,KAAK,IAAI,KAAK;AAAA,IAClD;AACA,aAAS,IAAI,GAAG,IAAI,YAAY,SAAS,QAAQ,KAAK,WAAW;AAChE,YAAM,MAAM,MAAM,OAAO,OAAO;AAAA,QAC/B;AAAA,QACA,SAAS,MAAM,IAAI,SAAS,IAAI,UAAU,QAAQ;AAAA,QAClD,EAAE,MAAM,UAAU;AAAA,QAClB;AAAA,QACA,CAAC,SAAS;AAAA,MACX;AACA,aAAO,MAAM,OAAO,OAAO;AAAA,QAC1B,EAAE,MAAM,WAAW,IAAI,SAAS,MAAM,GAAG,IAAI,OAAO,EAAE;AAAA,QACtD;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAEA,UAAM,SAAS,QAAQ,IAAI;AAE3B,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,eAAqC;AAClD,UAAM,MAAM,QACT,yBAAyB,QAAQ,uBAAuB,IACxD,WAAW,aAAa,sBAAsB,EAAE,SAAS,IAAI;AAChE,UAAM,WAAW,MAAM,MAAM,GAAG;AAChC,QAAI,CAAC,SAAS,IAAI;AACjB,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACrC;AAEA,WAAO,SAAS,YAAY;AAAA,EAC7B;AACD;AA1De;AAAA,EADb;AAAA,GAnBW,YAoBE;AApBF,cAAN;AAAA,EACO;AAAA,GADD;",
  "names": []
}
