{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/sign/browser/signService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule, resolveAmdNodeModulePath } from '../../../amdX.js';\nimport { WindowIntervalTimer } from '../../../base/browser/dom.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { isESM } from '../../../base/common/amd.js';\nimport { memoize } from '../../../base/common/decorators.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { IProductService } from '../../product/common/productService.js';\nimport { AbstractSignService, IVsdaValidator } from '../common/abstractSignService.js';\nimport { ISignService } from '../common/sign.js';\n\ndeclare module vsdaWeb {\n\texport function sign(salted_message: string): string;\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\texport class validator {\n\t\tfree(): void;\n\t\tconstructor();\n\t\tcreateNewMessage(original: string): string;\n\t\tvalidate(signed_message: string): 'ok' | 'error';\n\t}\n\n\texport type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;\n\texport function init(module_or_path?: InitInput | Promise<InitInput>): Promise<unknown>;\n}\n\n// Initialized if/when vsda is loaded\ndeclare const vsda_web: {\n\tdefault: typeof vsdaWeb.init;\n\tsign: typeof vsdaWeb.sign;\n\tvalidator: typeof vsdaWeb.validator;\n};\n\nconst KEY_SIZE = 32;\nconst IV_SIZE = 16;\nconst STEP_SIZE = KEY_SIZE + IV_SIZE;\n\nexport class SignService extends AbstractSignService implements ISignService {\n\tconstructor(@IProductService private readonly productService: IProductService) {\n\t\tsuper();\n\t}\n\tprotected override getValidator(): Promise<IVsdaValidator> {\n\t\treturn this.vsda().then(vsda => {\n\t\t\tconst v = new vsda.validator();\n\t\t\treturn {\n\t\t\t\tcreateNewMessage: arg => v.createNewMessage(arg),\n\t\t\t\tvalidate: arg => v.validate(arg),\n\t\t\t\tdispose: () => v.free(),\n\t\t\t};\n\t\t});\n\t}\n\n\tprotected override signValue(arg: string): Promise<string> {\n\t\treturn this.vsda().then(vsda => vsda.sign(arg));\n\t}\n\n\t@memoize\n\tprivate async vsda(): Promise<typeof vsda_web> {\n\t\tconst checkInterval = new WindowIntervalTimer();\n\t\tlet [wasm] = await Promise.all([\n\t\t\tthis.getWasmBytes(),\n\t\t\tnew Promise<void>((resolve, reject) => {\n\t\t\t\timportAMDNodeModule('vsda', 'rust/web/vsda.js').then(() => resolve(), reject);\n\n\t\t\t\t// todo@connor4312: there seems to be a bug(?) in vscode-loader with\n\t\t\t\t// require() not resolving in web once the script loads, so check manually\n\t\t\t\tcheckInterval.cancelAndSet(() => {\n\t\t\t\t\tif (typeof vsda_web !== 'undefined') {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}, 50, mainWindow);\n\t\t\t}).finally(() => checkInterval.dispose()),\n\t\t]);\n\n\t\tconst keyBytes = new TextEncoder().encode(this.productService.serverLicense?.join('\\n') || '');\n\t\tfor (let i = 0; i + STEP_SIZE < keyBytes.length; i += STEP_SIZE) {\n\t\t\tconst key = await crypto.subtle.importKey('raw', keyBytes.slice(i + IV_SIZE, i + IV_SIZE + KEY_SIZE), { name: 'AES-CBC' }, false, ['decrypt']);\n\t\t\twasm = await crypto.subtle.decrypt({ name: 'AES-CBC', iv: keyBytes.slice(i, i + IV_SIZE) }, key, wasm);\n\t\t}\n\n\t\tawait vsda_web.default(wasm);\n\n\t\treturn vsda_web;\n\t}\n\n\tprivate async getWasmBytes(): Promise<ArrayBuffer> {\n\t\tconst url = isESM\n\t\t\t? resolveAmdNodeModulePath('vsda', 'rust/web/vsda_bg.wasm')\n\t\t\t: FileAccess.asBrowserUri('vsda/../vsda_bg.wasm').toString(true);\n\t\tconst response = await fetch(url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error('error loading vsda');\n\t\t}\n\n\t\treturn response.arrayBuffer();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,qBAAqB,gCAAgC;AAC9D,SAAS,2BAA2B;AACpC,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AACtB,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,uBAAuB;AAChC,SAAS,qBAAqB,sBAAsB;AACpD,SAAS,oBAAoB;AAwB7B,MAAM,WAAW;AACjB,MAAM,UAAU;AAChB,MAAM,YAAY,WAAW;AAEtB,IAAM,cAAN,cAA0B,oBAA4C;AAAA,EAC5E,YAA8C,gBAAiC;AAC9E,UAAM;AADuC;AAAA,EAE9C;AAAA,EA5CD,OAyC6E;AAAA;AAAA;AAAA,EAIzD,eAAwC;AAC1D,WAAO,KAAK,KAAK,EAAE,KAAK,UAAQ;AAC/B,YAAM,IAAI,IAAI,KAAK,UAAU;AAC7B,aAAO;AAAA,QACN,kBAAkB,gCAAO,EAAE,iBAAiB,GAAG,GAA7B;AAAA,QAClB,UAAU,gCAAO,EAAE,SAAS,GAAG,GAArB;AAAA,QACV,SAAS,6BAAM,EAAE,KAAK,GAAb;AAAA,MACV;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEmB,UAAU,KAA8B;AAC1D,WAAO,KAAK,KAAK,EAAE,KAAK,UAAQ,KAAK,KAAK,GAAG,CAAC;AAAA,EAC/C;AAAA,EAGA,MAAc,OAAiC;AAC9C,UAAM,gBAAgB,IAAI,oBAAoB;AAC9C,QAAI,CAAC,IAAI,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC9B,KAAK,aAAa;AAAA,MAClB,IAAI,QAAc,CAAC,SAAS,WAAW;AACtC,4BAAoB,QAAQ,kBAAkB,EAAE,KAAK,MAAM,QAAQ,GAAG,MAAM;AAI5E,sBAAc,aAAa,MAAM;AAChC,cAAI,OAAO,aAAa,aAAa;AACpC,oBAAQ;AAAA,UACT;AAAA,QACD,GAAG,IAAI,UAAU;AAAA,MAClB,CAAC,EAAE,QAAQ,MAAM,cAAc,QAAQ,CAAC;AAAA,IACzC,CAAC;AAED,UAAM,WAAW,IAAI,YAAY,EAAE,OAAO,KAAK,eAAe,eAAe,KAAK,IAAI,KAAK,EAAE;AAC7F,aAAS,IAAI,GAAG,IAAI,YAAY,SAAS,QAAQ,KAAK,WAAW;AAChE,YAAM,MAAM,MAAM,OAAO,OAAO,UAAU,OAAO,SAAS,MAAM,IAAI,SAAS,IAAI,UAAU,QAAQ,GAAG,EAAE,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;AAC7I,aAAO,MAAM,OAAO,OAAO,QAAQ,EAAE,MAAM,WAAW,IAAI,SAAS,MAAM,GAAG,IAAI,OAAO,EAAE,GAAG,KAAK,IAAI;AAAA,IACtG;AAEA,UAAM,SAAS,QAAQ,IAAI;AAE3B,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,eAAqC;AAClD,UAAM,MAAM,QACT,yBAAyB,QAAQ,uBAAuB,IACxD,WAAW,aAAa,sBAAsB,EAAE,SAAS,IAAI;AAChE,UAAM,WAAW,MAAM,MAAM,GAAG;AAChC,QAAI,CAAC,SAAS,IAAI;AACjB,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACrC;AAEA,WAAO,SAAS,YAAY;AAAA,EAC7B;AACD;AAvCe;AAAA,EADb;AAAA,GAnBW,YAoBE;AApBF,cAAN;AAAA,EACO;AAAA,GADD;",
  "names": []
}
