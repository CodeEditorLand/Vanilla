{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/sign/common/abstractSignService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IMessage, ISignService } from \"./sign.js\";\n\nexport interface IVsdaSigner {\n\tsign(arg: string): string;\n}\n\nexport interface IVsdaValidator {\n\tcreateNewMessage(arg: string): string;\n\tvalidate(arg: string): \"ok\" | \"error\";\n\tdispose?(): void;\n}\n\nexport abstract class AbstractSignService implements ISignService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static _nextId = 1;\n\tprivate readonly validators = new Map<string, IVsdaValidator>();\n\n\tprotected abstract getValidator(): Promise<IVsdaValidator>;\n\tprotected abstract signValue(arg: string): Promise<string>;\n\n\tpublic async createNewMessage(value: string): Promise<IMessage> {\n\t\ttry {\n\t\t\tconst validator = await this.getValidator();\n\t\t\tif (validator) {\n\t\t\t\tconst id = String(AbstractSignService._nextId++);\n\t\t\t\tthis.validators.set(id, validator);\n\t\t\t\treturn {\n\t\t\t\t\tid: id,\n\t\t\t\t\tdata: validator.createNewMessage(value),\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// ignore errors silently\n\t\t}\n\t\treturn { id: \"\", data: value };\n\t}\n\n\tasync validate(message: IMessage, value: string): Promise<boolean> {\n\t\tif (!message.id) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst validator = this.validators.get(message.id);\n\t\tif (!validator) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.validators.delete(message.id);\n\t\ttry {\n\t\t\treturn validator.validate(value) === \"ok\";\n\t\t} catch (e) {\n\t\t\t// ignore errors silently\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tvalidator.dispose?.();\n\t\t}\n\t}\n\n\tasync sign(value: string): Promise<string> {\n\t\ttry {\n\t\t\treturn await this.signValue(value);\n\t\t} catch (e) {\n\t\t\t// ignore errors silently\n\t\t}\n\t\treturn value;\n\t}\n}\n"],
  "mappings": ";;AAiBO,MAAe,oBAA4C;AAAA,EAjBlE,OAiBkE;AAAA;AAAA;AAAA,EAGjE,OAAe,UAAU;AAAA,EACR,aAAa,oBAAI,IAA4B;AAAA,EAK9D,MAAa,iBAAiB,OAAkC;AAC/D,QAAI;AACH,YAAM,YAAY,MAAM,KAAK,aAAa;AAC1C,UAAI,WAAW;AACd,cAAM,KAAK,OAAO,oBAAoB,SAAS;AAC/C,aAAK,WAAW,IAAI,IAAI,SAAS;AACjC,eAAO;AAAA,UACN;AAAA,UACA,MAAM,UAAU,iBAAiB,KAAK;AAAA,QACvC;AAAA,MACD;AAAA,IACD,SAAS,GAAG;AAAA,IAEZ;AACA,WAAO,EAAE,IAAI,IAAI,MAAM,MAAM;AAAA,EAC9B;AAAA,EAEA,MAAM,SAAS,SAAmB,OAAiC;AAClE,QAAI,CAAC,QAAQ,IAAI;AAChB,aAAO;AAAA,IACR;AAEA,UAAM,YAAY,KAAK,WAAW,IAAI,QAAQ,EAAE;AAChD,QAAI,CAAC,WAAW;AACf,aAAO;AAAA,IACR;AACA,SAAK,WAAW,OAAO,QAAQ,EAAE;AACjC,QAAI;AACH,aAAO,UAAU,SAAS,KAAK,MAAM;AAAA,IACtC,SAAS,GAAG;AAEX,aAAO;AAAA,IACR,UAAE;AACD,gBAAU,UAAU;AAAA,IACrB;AAAA,EACD;AAAA,EAEA,MAAM,KAAK,OAAgC;AAC1C,QAAI;AACH,aAAO,MAAM,KAAK,UAAU,KAAK;AAAA,IAClC,SAAS,GAAG;AAAA,IAEZ;AACA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
