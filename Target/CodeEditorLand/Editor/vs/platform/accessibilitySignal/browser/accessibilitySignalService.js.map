{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/accessibilitySignal/browser/accessibilitySignalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CachedFunction } from '../../../base/common/cache.js';\nimport { getStructuralKey } from '../../../base/common/equals.js';\nimport { Event, IValueWithChangeEvent } from '../../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { derived, observableFromEvent, ValueWithChangeEventFromObservable } from '../../../base/common/observable.js';\nimport { localize } from '../../../nls.js';\nimport { IAccessibilityService } from '../../accessibility/common/accessibility.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { observableConfigValue } from '../../observable/common/platformObservableUtils.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n\nexport const IAccessibilitySignalService = createDecorator<IAccessibilitySignalService>('accessibilitySignalService');\n\nexport interface IAccessibilitySignalService {\n\treadonly _serviceBrand: undefined;\n\tplaySignal(signal: AccessibilitySignal, options?: IAccessbilitySignalOptions): Promise<void>;\n\tplaySignals(signals: (AccessibilitySignal | { signal: AccessibilitySignal; source: string })[]): Promise<void>;\n\tplaySignalLoop(signal: AccessibilitySignal, milliseconds: number): IDisposable;\n\n\tgetEnabledState(signal: AccessibilitySignal, userGesture: boolean, modality?: AccessibilityModality | undefined): IValueWithChangeEvent<boolean>;\n\tgetDelayMs(signal: AccessibilitySignal, modality: AccessibilityModality, mode: 'line' | 'positional'): number;\n\t/**\n\t * Avoid this method and prefer `.playSignal`!\n\t * Only use it when you want to play the sound regardless of enablement, e.g. in the settings quick pick.\n\t */\n\tplaySound(signal: Sound, allowManyInParallel: boolean, token: typeof AcknowledgeDocCommentsToken): Promise<void>;\n\n\t/** @deprecated Use getEnabledState(...).onChange */\n\tisSoundEnabled(signal: AccessibilitySignal): boolean;\n\t/** @deprecated Use getEnabledState(...).value */\n\tisAnnouncementEnabled(signal: AccessibilitySignal): boolean;\n\t/** @deprecated Use getEnabledState(...).onChange */\n\tonSoundEnabledChanged(signal: AccessibilitySignal): Event<void>;\n}\n\n/** Make sure you understand the doc comments of the method you want to call when using this token! */\nexport const AcknowledgeDocCommentsToken = Symbol('AcknowledgeDocCommentsToken');\n\nexport type AccessibilityModality = 'sound' | 'announcement';\n\nexport interface IAccessbilitySignalOptions {\n\tallowManyInParallel?: boolean;\n\n\tmodality?: AccessibilityModality;\n\n\t/**\n\t * The source that triggered the signal (e.g. \"diffEditor.cursorPositionChanged\").\n\t */\n\tsource?: string;\n\n\t/**\n\t * For actions like save or format, depending on the\n\t * configured value, we will only\n\t * play the sound if the user triggered the action.\n\t */\n\tuserGesture?: boolean;\n}\n\nexport class AccessibilitySignalService extends Disposable implements IAccessibilitySignalService {\n\treadonly _serviceBrand: undefined;\n\tprivate readonly sounds: Map<string, HTMLAudioElement> = new Map();\n\tprivate readonly screenReaderAttached = observableFromEvent(this,\n\t\tthis.accessibilityService.onDidChangeScreenReaderOptimized,\n\t\t() => /** @description accessibilityService.onDidChangeScreenReaderOptimized */ this.accessibilityService.isScreenReaderOptimized()\n\t);\n\tprivate readonly sentTelemetry = new Set<string>();\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic getEnabledState(signal: AccessibilitySignal, userGesture: boolean, modality?: AccessibilityModality | undefined): IValueWithChangeEvent<boolean> {\n\t\treturn new ValueWithChangeEventFromObservable(this._signalEnabledState.get({ signal, userGesture, modality }));\n\t}\n\n\tpublic async playSignal(signal: AccessibilitySignal, options: IAccessbilitySignalOptions = {}): Promise<void> {\n\t\tconst shouldPlayAnnouncement = options.modality === 'announcement' || options.modality === undefined;\n\t\tconst announcementMessage = signal.announcementMessage;\n\t\tif (shouldPlayAnnouncement && this.isAnnouncementEnabled(signal, options.userGesture) && announcementMessage) {\n\t\t\tthis.accessibilityService.status(announcementMessage);\n\t\t}\n\n\t\tconst shouldPlaySound = options.modality === 'sound' || options.modality === undefined;\n\t\tif (shouldPlaySound && this.isSoundEnabled(signal, options.userGesture)) {\n\t\t\tthis.sendSignalTelemetry(signal, options.source);\n\t\t\tawait this.playSound(signal.sound.getSound(), options.allowManyInParallel);\n\t\t}\n\t}\n\n\tpublic async playSignals(signals: (AccessibilitySignal | { signal: AccessibilitySignal; source: string })[]): Promise<void> {\n\t\tfor (const signal of signals) {\n\t\t\tthis.sendSignalTelemetry('signal' in signal ? signal.signal : signal, 'source' in signal ? signal.source : undefined);\n\t\t}\n\t\tconst signalArray = signals.map(s => 'signal' in s ? s.signal : s);\n\t\tconst announcements = signalArray.filter(signal => this.isAnnouncementEnabled(signal)).map(s => s.announcementMessage);\n\t\tif (announcements.length) {\n\t\t\tthis.accessibilityService.status(announcements.join(', '));\n\t\t}\n\n\t\t// Some sounds are reused. Don't play the same sound twice.\n\t\tconst sounds = new Set(signalArray.filter(signal => this.isSoundEnabled(signal)).map(signal => signal.sound.getSound()));\n\t\tawait Promise.all(Array.from(sounds).map(sound => this.playSound(sound, true)));\n\n\t}\n\n\n\tprivate sendSignalTelemetry(signal: AccessibilitySignal, source: string | undefined): void {\n\t\tconst isScreenReaderOptimized = this.accessibilityService.isScreenReaderOptimized();\n\t\tconst key = signal.name + (source ? `::${source}` : '') + (isScreenReaderOptimized ? '{screenReaderOptimized}' : '');\n\t\t// Only send once per user session\n\t\tif (this.sentTelemetry.has(key) || this.getVolumeInPercent() === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis.sentTelemetry.add(key);\n\n\t\tthis.telemetryService.publicLog2<{\n\t\t\tsignal: string;\n\t\t\tsource: string;\n\t\t\tisScreenReaderOptimized: boolean;\n\t\t}, {\n\t\t\towner: 'hediet';\n\n\t\t\tsignal: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The signal that was played.' };\n\t\t\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The source that triggered the signal (e.g. \"diffEditorNavigation\").' };\n\t\t\tisScreenReaderOptimized: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the user is using a screen reader' };\n\n\t\t\tcomment: 'This data is collected to understand how signals are used and if more signals should be added.';\n\t\t}>('signal.played', {\n\t\t\tsignal: signal.name,\n\t\t\tsource: source ?? '',\n\t\t\tisScreenReaderOptimized,\n\t\t});\n\t}\n\n\tprivate getVolumeInPercent(): number {\n\t\tconst volume = this.configurationService.getValue<number>('accessibility.signalOptions.volume');\n\t\tif (typeof volume !== 'number') {\n\t\t\treturn 50;\n\t\t}\n\n\t\treturn Math.max(Math.min(volume, 100), 0);\n\t}\n\n\tprivate readonly playingSounds = new Set<Sound>();\n\n\tpublic async playSound(sound: Sound, allowManyInParallel = false): Promise<void> {\n\t\tif (!allowManyInParallel && this.playingSounds.has(sound)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.playingSounds.add(sound);\n\t\tconst url = FileAccess.asBrowserUri(`vs/platform/accessibilitySignal/browser/media/${sound.fileName}`).toString(true);\n\n\t\ttry {\n\t\t\tconst sound = this.sounds.get(url);\n\t\t\tif (sound) {\n\t\t\t\tsound.volume = this.getVolumeInPercent() / 100;\n\t\t\t\tsound.currentTime = 0;\n\t\t\t\tawait sound.play();\n\t\t\t} else {\n\t\t\t\tconst playedSound = await playAudio(url, this.getVolumeInPercent() / 100);\n\t\t\t\tthis.sounds.set(url, playedSound);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (!e.message.includes('play() can only be initiated by a user gesture')) {\n\t\t\t\t// tracking this issue in #178642, no need to spam the console\n\t\t\t\tconsole.error('Error while playing sound', e);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.playingSounds.delete(sound);\n\t\t}\n\t}\n\n\tpublic playSignalLoop(signal: AccessibilitySignal, milliseconds: number): IDisposable {\n\t\tlet playing = true;\n\t\tconst playSound = () => {\n\t\t\tif (playing) {\n\t\t\t\tthis.playSignal(signal, { allowManyInParallel: true }).finally(() => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (playing) {\n\t\t\t\t\t\t\tplaySound();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, milliseconds);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tplaySound();\n\t\treturn toDisposable(() => playing = false);\n\t}\n\n\tprivate readonly _signalConfigValue = new CachedFunction((signal: AccessibilitySignal) => observableConfigValue<{\n\t\tsound: EnabledState;\n\t\tannouncement: EnabledState;\n\t}>(signal.settingsKey, { sound: 'off', announcement: 'off' }, this.configurationService));\n\n\tprivate readonly _signalEnabledState = new CachedFunction(\n\t\t{ getCacheKey: getStructuralKey },\n\t\t(arg: { signal: AccessibilitySignal; userGesture: boolean; modality?: AccessibilityModality | undefined }) => {\n\t\t\treturn derived(reader => {\n\t\t\t\t/** @description sound enabled */\n\t\t\t\tconst setting = this._signalConfigValue.get(arg.signal).read(reader);\n\n\t\t\t\tif (arg.modality === 'sound' || arg.modality === undefined) {\n\t\t\t\t\tif (checkEnabledState(setting.sound, () => this.screenReaderAttached.read(reader), arg.userGesture)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (arg.modality === 'announcement' || arg.modality === undefined) {\n\t\t\t\t\tif (checkEnabledState(setting.announcement, () => this.screenReaderAttached.read(reader), arg.userGesture)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}).recomputeInitiallyAndOnChange(this._store);\n\t\t}\n\t);\n\n\tpublic isAnnouncementEnabled(signal: AccessibilitySignal, userGesture?: boolean): boolean {\n\t\tif (!signal.announcementMessage) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._signalEnabledState.get({ signal, userGesture: !!userGesture, modality: 'announcement' }).get();\n\t}\n\n\tpublic isSoundEnabled(signal: AccessibilitySignal, userGesture?: boolean): boolean {\n\t\treturn this._signalEnabledState.get({ signal, userGesture: !!userGesture, modality: 'sound' }).get();\n\t}\n\n\tpublic onSoundEnabledChanged(signal: AccessibilitySignal): Event<void> {\n\t\treturn this.getEnabledState(signal, false).onDidChange;\n\t}\n\n\tpublic getDelayMs(signal: AccessibilitySignal, modality: AccessibilityModality, mode: 'line' | 'positional'): number {\n\t\tif (!this.configurationService.getValue('accessibility.signalOptions.debouncePositionChanges')) {\n\t\t\treturn 0;\n\t\t}\n\t\tlet value: { sound: number; announcement: number };\n\t\tif (signal.name === AccessibilitySignal.errorAtPosition.name && mode === 'positional') {\n\t\t\tvalue = this.configurationService.getValue('accessibility.signalOptions.experimental.delays.errorAtPosition');\n\t\t} else if (signal.name === AccessibilitySignal.warningAtPosition.name && mode === 'positional') {\n\t\t\tvalue = this.configurationService.getValue('accessibility.signalOptions.experimental.delays.warningAtPosition');\n\t\t} else {\n\t\t\tvalue = this.configurationService.getValue('accessibility.signalOptions.experimental.delays.general');\n\t\t}\n\t\treturn modality === 'sound' ? value.sound : value.announcement;\n\t}\n}\n\ntype EnabledState = 'on' | 'off' | 'auto' | 'userGesture' | 'always' | 'never';\nfunction checkEnabledState(state: EnabledState, getScreenReaderAttached: () => boolean, isTriggeredByUserGesture: boolean): boolean {\n\treturn state === 'on' || state === 'always' || (state === 'auto' && getScreenReaderAttached()) || state === 'userGesture' && isTriggeredByUserGesture;\n}\n\n/**\n * Play the given audio url.\n * @volume value between 0 and 1\n */\nfunction playAudio(url: string, volume: number): Promise<HTMLAudioElement> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst audio = new Audio(url);\n\t\taudio.volume = volume;\n\t\taudio.addEventListener('ended', () => {\n\t\t\tresolve(audio);\n\t\t});\n\t\taudio.addEventListener('error', (e) => {\n\t\t\t// When the error event fires, ended might not be called\n\t\t\treject(e.error);\n\t\t});\n\t\taudio.play().catch(e => {\n\t\t\t// When play fails, the error event is not fired.\n\t\t\treject(e);\n\t\t});\n\t});\n}\n\n/**\n * Corresponds to the audio files in ./media.\n*/\nexport class Sound {\n\tprivate static register(options: { fileName: string }): Sound {\n\t\tconst sound = new Sound(options.fileName);\n\t\treturn sound;\n\t}\n\n\tpublic static readonly error = Sound.register({ fileName: 'error.mp3' });\n\tpublic static readonly warning = Sound.register({ fileName: 'warning.mp3' });\n\tpublic static readonly success = Sound.register({ fileName: 'success.mp3' });\n\tpublic static readonly foldedArea = Sound.register({ fileName: 'foldedAreas.mp3' });\n\tpublic static readonly break = Sound.register({ fileName: 'break.mp3' });\n\tpublic static readonly quickFixes = Sound.register({ fileName: 'quickFixes.mp3' });\n\tpublic static readonly taskCompleted = Sound.register({ fileName: 'taskCompleted.mp3' });\n\tpublic static readonly taskFailed = Sound.register({ fileName: 'taskFailed.mp3' });\n\tpublic static readonly terminalBell = Sound.register({ fileName: 'terminalBell.mp3' });\n\tpublic static readonly diffLineInserted = Sound.register({ fileName: 'diffLineInserted.mp3' });\n\tpublic static readonly diffLineDeleted = Sound.register({ fileName: 'diffLineDeleted.mp3' });\n\tpublic static readonly diffLineModified = Sound.register({ fileName: 'diffLineModified.mp3' });\n\tpublic static readonly chatRequestSent = Sound.register({ fileName: 'chatRequestSent.mp3' });\n\tpublic static readonly chatResponseReceived1 = Sound.register({ fileName: 'chatResponseReceived1.mp3' });\n\tpublic static readonly chatResponseReceived2 = Sound.register({ fileName: 'chatResponseReceived2.mp3' });\n\tpublic static readonly chatResponseReceived3 = Sound.register({ fileName: 'chatResponseReceived3.mp3' });\n\tpublic static readonly chatResponseReceived4 = Sound.register({ fileName: 'chatResponseReceived4.mp3' });\n\tpublic static readonly clear = Sound.register({ fileName: 'clear.mp3' });\n\tpublic static readonly save = Sound.register({ fileName: 'save.mp3' });\n\tpublic static readonly format = Sound.register({ fileName: 'format.mp3' });\n\tpublic static readonly voiceRecordingStarted = Sound.register({ fileName: 'voiceRecordingStarted.mp3' });\n\tpublic static readonly voiceRecordingStopped = Sound.register({ fileName: 'voiceRecordingStopped.mp3' });\n\tpublic static readonly progress = Sound.register({ fileName: 'progress.mp3' });\n\n\tprivate constructor(public readonly fileName: string) { }\n}\n\nexport class SoundSource {\n\tconstructor(\n\t\tpublic readonly randomOneOf: Sound[]\n\t) { }\n\n\tpublic getSound(deterministic = false): Sound {\n\t\tif (deterministic || this.randomOneOf.length === 1) {\n\t\t\treturn this.randomOneOf[0];\n\t\t} else {\n\t\t\tconst index = Math.floor(Math.random() * this.randomOneOf.length);\n\t\t\treturn this.randomOneOf[index];\n\t\t}\n\t}\n}\n\nexport class AccessibilitySignal {\n\tprivate constructor(\n\t\tpublic readonly sound: SoundSource,\n\t\tpublic readonly name: string,\n\t\tpublic readonly legacySoundSettingsKey: string | undefined,\n\t\tpublic readonly settingsKey: string,\n\t\tpublic readonly legacyAnnouncementSettingsKey: string | undefined,\n\t\tpublic readonly announcementMessage: string | undefined\n\t) { }\n\n\tprivate static _signals = new Set<AccessibilitySignal>();\n\tprivate static register(options: {\n\t\tname: string;\n\t\tsound: Sound | {\n\t\t\t/**\n\t\t\t * Gaming and other apps often play a sound variant when the same event happens again\n\t\t\t * for an improved experience. This option enables playing a random sound.\n\t\t\t */\n\t\t\trandomOneOf: Sound[];\n\t\t};\n\t\tlegacySoundSettingsKey?: string;\n\t\tsettingsKey: string;\n\t\tlegacyAnnouncementSettingsKey?: string;\n\t\tannouncementMessage?: string;\n\t\tdelaySettingsKey?: string;\n\t}): AccessibilitySignal {\n\t\tconst soundSource = new SoundSource('randomOneOf' in options.sound ? options.sound.randomOneOf : [options.sound]);\n\t\tconst signal = new AccessibilitySignal(\n\t\t\tsoundSource,\n\t\t\toptions.name,\n\t\t\toptions.legacySoundSettingsKey,\n\t\t\toptions.settingsKey,\n\t\t\toptions.legacyAnnouncementSettingsKey,\n\t\t\toptions.announcementMessage,\n\t\t);\n\t\tAccessibilitySignal._signals.add(signal);\n\t\treturn signal;\n\t}\n\n\tpublic static get allAccessibilitySignals() {\n\t\treturn [...this._signals];\n\t}\n\n\tpublic static readonly errorAtPosition = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.positionHasError.name', 'Error at Position'),\n\t\tsound: Sound.error,\n\t\tannouncementMessage: localize('accessibility.signals.positionHasError', 'Error'),\n\t\tsettingsKey: 'accessibility.signals.positionHasError',\n\t\tdelaySettingsKey: 'accessibility.signalOptions.delays.errorAtPosition'\n\t});\n\tpublic static readonly warningAtPosition = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.positionHasWarning.name', 'Warning at Position'),\n\t\tsound: Sound.warning,\n\t\tannouncementMessage: localize('accessibility.signals.positionHasWarning', 'Warning'),\n\t\tsettingsKey: 'accessibility.signals.positionHasWarning',\n\t\tdelaySettingsKey: 'accessibility.signalOptions.delays.warningAtPosition'\n\t});\n\n\tpublic static readonly errorOnLine = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.lineHasError.name', 'Error on Line'),\n\t\tsound: Sound.error,\n\t\tlegacySoundSettingsKey: 'audioCues.lineHasError',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.error',\n\t\tannouncementMessage: localize('accessibility.signals.lineHasError', 'Error on Line'),\n\t\tsettingsKey: 'accessibility.signals.lineHasError',\n\t});\n\n\tpublic static readonly warningOnLine = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.lineHasWarning.name', 'Warning on Line'),\n\t\tsound: Sound.warning,\n\t\tlegacySoundSettingsKey: 'audioCues.lineHasWarning',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.warning',\n\t\tannouncementMessage: localize('accessibility.signals.lineHasWarning', 'Warning on Line'),\n\t\tsettingsKey: 'accessibility.signals.lineHasWarning',\n\t});\n\tpublic static readonly foldedArea = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.lineHasFoldedArea.name', 'Folded Area on Line'),\n\t\tsound: Sound.foldedArea,\n\t\tlegacySoundSettingsKey: 'audioCues.lineHasFoldedArea',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.foldedArea',\n\t\tannouncementMessage: localize('accessibility.signals.lineHasFoldedArea', 'Folded'),\n\t\tsettingsKey: 'accessibility.signals.lineHasFoldedArea',\n\t});\n\tpublic static readonly break = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.lineHasBreakpoint.name', 'Breakpoint on Line'),\n\t\tsound: Sound.break,\n\t\tlegacySoundSettingsKey: 'audioCues.lineHasBreakpoint',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.breakpoint',\n\t\tannouncementMessage: localize('accessibility.signals.lineHasBreakpoint', 'Breakpoint'),\n\t\tsettingsKey: 'accessibility.signals.lineHasBreakpoint',\n\t});\n\tpublic static readonly inlineSuggestion = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.lineHasInlineSuggestion.name', 'Inline Suggestion on Line'),\n\t\tsound: Sound.quickFixes,\n\t\tlegacySoundSettingsKey: 'audioCues.lineHasInlineSuggestion',\n\t\tsettingsKey: 'accessibility.signals.lineHasInlineSuggestion',\n\t});\n\n\tpublic static readonly terminalQuickFix = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.terminalQuickFix.name', 'Terminal Quick Fix'),\n\t\tsound: Sound.quickFixes,\n\t\tlegacySoundSettingsKey: 'audioCues.terminalQuickFix',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.terminalQuickFix',\n\t\tannouncementMessage: localize('accessibility.signals.terminalQuickFix', 'Quick Fix'),\n\t\tsettingsKey: 'accessibility.signals.terminalQuickFix',\n\t});\n\n\tpublic static readonly onDebugBreak = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.onDebugBreak.name', 'Debugger Stopped on Breakpoint'),\n\t\tsound: Sound.break,\n\t\tlegacySoundSettingsKey: 'audioCues.onDebugBreak',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.onDebugBreak',\n\t\tannouncementMessage: localize('accessibility.signals.onDebugBreak', 'Breakpoint'),\n\t\tsettingsKey: 'accessibility.signals.onDebugBreak',\n\t});\n\n\tpublic static readonly noInlayHints = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.noInlayHints', 'No Inlay Hints on Line'),\n\t\tsound: Sound.error,\n\t\tlegacySoundSettingsKey: 'audioCues.noInlayHints',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.noInlayHints',\n\t\tannouncementMessage: localize('accessibility.signals.noInlayHints', 'No Inlay Hints'),\n\t\tsettingsKey: 'accessibility.signals.noInlayHints',\n\t});\n\n\tpublic static readonly taskCompleted = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.taskCompleted', 'Task Completed'),\n\t\tsound: Sound.taskCompleted,\n\t\tlegacySoundSettingsKey: 'audioCues.taskCompleted',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.taskCompleted',\n\t\tannouncementMessage: localize('accessibility.signals.taskCompleted', 'Task Completed'),\n\t\tsettingsKey: 'accessibility.signals.taskCompleted',\n\t});\n\n\tpublic static readonly taskFailed = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.taskFailed', 'Task Failed'),\n\t\tsound: Sound.taskFailed,\n\t\tlegacySoundSettingsKey: 'audioCues.taskFailed',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.taskFailed',\n\t\tannouncementMessage: localize('accessibility.signals.taskFailed', 'Task Failed'),\n\t\tsettingsKey: 'accessibility.signals.taskFailed',\n\t});\n\n\tpublic static readonly terminalCommandFailed = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.terminalCommandFailed', 'Terminal Command Failed'),\n\t\tsound: Sound.error,\n\t\tlegacySoundSettingsKey: 'audioCues.terminalCommandFailed',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.terminalCommandFailed',\n\t\tannouncementMessage: localize('accessibility.signals.terminalCommandFailed', 'Command Failed'),\n\t\tsettingsKey: 'accessibility.signals.terminalCommandFailed',\n\t});\n\n\tpublic static readonly terminalCommandSucceeded = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.terminalCommandSucceeded', 'Terminal Command Succeeded'),\n\t\tsound: Sound.success,\n\t\tannouncementMessage: localize('accessibility.signals.terminalCommandSucceeded', 'Command Succeeded'),\n\t\tsettingsKey: 'accessibility.signals.terminalCommandSucceeded',\n\t});\n\n\tpublic static readonly terminalBell = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.terminalBell', 'Terminal Bell'),\n\t\tsound: Sound.terminalBell,\n\t\tlegacySoundSettingsKey: 'audioCues.terminalBell',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.terminalBell',\n\t\tannouncementMessage: localize('accessibility.signals.terminalBell', 'Terminal Bell'),\n\t\tsettingsKey: 'accessibility.signals.terminalBell',\n\t});\n\n\tpublic static readonly notebookCellCompleted = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.notebookCellCompleted', 'Notebook Cell Completed'),\n\t\tsound: Sound.taskCompleted,\n\t\tlegacySoundSettingsKey: 'audioCues.notebookCellCompleted',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.notebookCellCompleted',\n\t\tannouncementMessage: localize('accessibility.signals.notebookCellCompleted', 'Notebook Cell Completed'),\n\t\tsettingsKey: 'accessibility.signals.notebookCellCompleted',\n\t});\n\n\tpublic static readonly notebookCellFailed = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.notebookCellFailed', 'Notebook Cell Failed'),\n\t\tsound: Sound.taskFailed,\n\t\tlegacySoundSettingsKey: 'audioCues.notebookCellFailed',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.notebookCellFailed',\n\t\tannouncementMessage: localize('accessibility.signals.notebookCellFailed', 'Notebook Cell Failed'),\n\t\tsettingsKey: 'accessibility.signals.notebookCellFailed',\n\t});\n\n\tpublic static readonly diffLineInserted = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.diffLineInserted', 'Diff Line Inserted'),\n\t\tsound: Sound.diffLineInserted,\n\t\tlegacySoundSettingsKey: 'audioCues.diffLineInserted',\n\t\tsettingsKey: 'accessibility.signals.diffLineInserted',\n\t});\n\n\tpublic static readonly diffLineDeleted = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.diffLineDeleted', 'Diff Line Deleted'),\n\t\tsound: Sound.diffLineDeleted,\n\t\tlegacySoundSettingsKey: 'audioCues.diffLineDeleted',\n\t\tsettingsKey: 'accessibility.signals.diffLineDeleted',\n\t});\n\n\tpublic static readonly diffLineModified = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.diffLineModified', 'Diff Line Modified'),\n\t\tsound: Sound.diffLineModified,\n\t\tlegacySoundSettingsKey: 'audioCues.diffLineModified',\n\t\tsettingsKey: 'accessibility.signals.diffLineModified',\n\t});\n\n\tpublic static readonly chatRequestSent = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.chatRequestSent', 'Chat Request Sent'),\n\t\tsound: Sound.chatRequestSent,\n\t\tlegacySoundSettingsKey: 'audioCues.chatRequestSent',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.chatRequestSent',\n\t\tannouncementMessage: localize('accessibility.signals.chatRequestSent', 'Chat Request Sent'),\n\t\tsettingsKey: 'accessibility.signals.chatRequestSent',\n\t});\n\n\tpublic static readonly chatResponseReceived = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.chatResponseReceived', 'Chat Response Received'),\n\t\tlegacySoundSettingsKey: 'audioCues.chatResponseReceived',\n\t\tsound: {\n\t\t\trandomOneOf: [\n\t\t\t\tSound.chatResponseReceived1,\n\t\t\t\tSound.chatResponseReceived2,\n\t\t\t\tSound.chatResponseReceived3,\n\t\t\t\tSound.chatResponseReceived4\n\t\t\t]\n\t\t},\n\t\tsettingsKey: 'accessibility.signals.chatResponseReceived'\n\t});\n\n\tpublic static readonly progress = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.progress', 'Progress'),\n\t\tsound: Sound.progress,\n\t\tlegacySoundSettingsKey: 'audioCues.chatResponsePending',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.progress',\n\t\tannouncementMessage: localize('accessibility.signals.progress', 'Progress'),\n\t\tsettingsKey: 'accessibility.signals.progress'\n\t});\n\n\tpublic static readonly clear = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.clear', 'Clear'),\n\t\tsound: Sound.clear,\n\t\tlegacySoundSettingsKey: 'audioCues.clear',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.clear',\n\t\tannouncementMessage: localize('accessibility.signals.clear', 'Clear'),\n\t\tsettingsKey: 'accessibility.signals.clear'\n\t});\n\n\tpublic static readonly save = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.save', 'Save'),\n\t\tsound: Sound.save,\n\t\tlegacySoundSettingsKey: 'audioCues.save',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.save',\n\t\tannouncementMessage: localize('accessibility.signals.save', 'Save'),\n\t\tsettingsKey: 'accessibility.signals.save'\n\t});\n\n\tpublic static readonly format = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.format', 'Format'),\n\t\tsound: Sound.format,\n\t\tlegacySoundSettingsKey: 'audioCues.format',\n\t\tlegacyAnnouncementSettingsKey: 'accessibility.alert.format',\n\t\tannouncementMessage: localize('accessibility.signals.format', 'Format'),\n\t\tsettingsKey: 'accessibility.signals.format'\n\t});\n\n\tpublic static readonly voiceRecordingStarted = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.voiceRecordingStarted', 'Voice Recording Started'),\n\t\tsound: Sound.voiceRecordingStarted,\n\t\tlegacySoundSettingsKey: 'audioCues.voiceRecordingStarted',\n\t\tsettingsKey: 'accessibility.signals.voiceRecordingStarted'\n\t});\n\n\tpublic static readonly voiceRecordingStopped = AccessibilitySignal.register({\n\t\tname: localize('accessibilitySignals.voiceRecordingStopped', 'Voice Recording Stopped'),\n\t\tsound: Sound.voiceRecordingStopped,\n\t\tlegacySoundSettingsKey: 'audioCues.voiceRecordingStopped',\n\t\tsettingsKey: 'accessibility.signals.voiceRecordingStopped'\n\t});\n}\n\n"],
  "mappings": "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",
  "names": ["sound"]
}
