import{bufferToStream as u,streamToBuffer as l}from"../../../base/common/buffer.js";import{CancellationToken as c}from"../../../base/common/cancellation.js";class p{constructor(e){this.service=e}listen(e,r){throw new Error("Invalid listen")}call(e,r,t,n=c.None){switch(r){case"request":return this.service.request(t[0],n).then(async({res:s,stream:i})=>{const a=await l(i);return[{statusCode:s.statusCode,headers:s.headers},a]});case"resolveProxy":return this.service.resolveProxy(t[0]);case"lookupAuthorization":return this.service.lookupAuthorization(t[0]);case"lookupKerberosAuthorization":return this.service.lookupKerberosAuthorization(t[0]);case"loadCertificates":return this.service.loadCertificates()}throw new Error("Invalid call")}}class m{constructor(e){this.channel=e}async request(e,r){const[t,n]=await this.channel.call("request",[e],r);return{res:t,stream:u(n)}}async resolveProxy(e){return this.channel.call("resolveProxy",[e])}async lookupAuthorization(e){return this.channel.call("lookupAuthorization",[e])}async lookupKerberosAuthorization(e){return this.channel.call("lookupKerberosAuthorization",[e])}async loadCertificates(){return this.channel.call("loadCertificates")}}export{p as RequestChannel,m as RequestChannelClient};
