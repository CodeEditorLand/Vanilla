{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/request/common/request.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { streamToBuffer } from \"../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { getErrorMessage } from \"../../../base/common/errors.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport type {\n\tIHeaders,\n\tIRequestContext,\n\tIRequestOptions,\n} from \"../../../base/parts/request/common/request.js\";\nimport { localize } from \"../../../nls.js\";\nimport {\n\tConfigurationScope,\n\tExtensions,\n\ttype IConfigurationNode,\n\ttype IConfigurationRegistry,\n} from \"../../configuration/common/configurationRegistry.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport { Registry } from \"../../registry/common/platform.js\";\n\nexport const IRequestService =\n\tcreateDecorator<IRequestService>(\"requestService\");\n\nexport interface AuthInfo {\n\tisProxy: boolean;\n\tscheme: string;\n\thost: string;\n\tport: number;\n\trealm: string;\n\tattempt: number;\n}\n\nexport interface Credentials {\n\tusername: string;\n\tpassword: string;\n}\n\nexport interface IRequestService {\n\treadonly _serviceBrand: undefined;\n\n\trequest(\n\t\toptions: IRequestOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IRequestContext>;\n\n\tresolveProxy(url: string): Promise<string | undefined>;\n\tlookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;\n\tlookupKerberosAuthorization(url: string): Promise<string | undefined>;\n\tloadCertificates(): Promise<string[]>;\n}\n\nclass LoggableHeaders {\n\tprivate headers: IHeaders | undefined;\n\n\tconstructor(private readonly original: IHeaders) {}\n\n\ttoJSON(): any {\n\t\tif (!this.headers) {\n\t\t\tconst headers = Object.create(null);\n\t\t\tfor (const key in this.original) {\n\t\t\t\tif (\n\t\t\t\t\tkey.toLowerCase() === \"authorization\" ||\n\t\t\t\t\tkey.toLowerCase() === \"proxy-authorization\"\n\t\t\t\t) {\n\t\t\t\t\theaders[key] = \"*****\";\n\t\t\t\t} else {\n\t\t\t\t\theaders[key] = this.original[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.headers = headers;\n\t\t}\n\t\treturn this.headers;\n\t}\n}\n\nexport abstract class AbstractRequestService\n\textends Disposable\n\timplements IRequestService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate counter = 0;\n\n\tconstructor(protected readonly logService: ILogService) {\n\t\tsuper();\n\t}\n\n\tprotected async logAndRequest(\n\t\toptions: IRequestOptions,\n\t\trequest: () => Promise<IRequestContext>,\n\t): Promise<IRequestContext> {\n\t\tconst prefix = `[network] #${++this.counter}: ${options.url}`;\n\t\tthis.logService.trace(\n\t\t\t`${prefix} - begin`,\n\t\t\toptions.type,\n\t\t\tnew LoggableHeaders(options.headers ?? {}),\n\t\t);\n\t\ttry {\n\t\t\tconst result = await request();\n\t\t\tthis.logService.trace(\n\t\t\t\t`${prefix} - end`,\n\t\t\t\toptions.type,\n\t\t\t\tresult.res.statusCode,\n\t\t\t\tresult.res.headers,\n\t\t\t);\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\n\t\t\t\t`${prefix} - error`,\n\t\t\t\toptions.type,\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tabstract request(\n\t\toptions: IRequestOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IRequestContext>;\n\tabstract resolveProxy(url: string): Promise<string | undefined>;\n\tabstract lookupAuthorization(\n\t\tauthInfo: AuthInfo,\n\t): Promise<Credentials | undefined>;\n\tabstract lookupKerberosAuthorization(\n\t\turl: string,\n\t): Promise<string | undefined>;\n\tabstract loadCertificates(): Promise<string[]>;\n}\n\nexport function isSuccess(context: IRequestContext): boolean {\n\treturn (\n\t\t(context.res.statusCode &&\n\t\t\tcontext.res.statusCode >= 200 &&\n\t\t\tcontext.res.statusCode < 300) ||\n\t\tcontext.res.statusCode === 1223\n\t);\n}\n\nexport function hasNoContent(context: IRequestContext): boolean {\n\treturn context.res.statusCode === 204;\n}\n\nexport async function asText(context: IRequestContext): Promise<string | null> {\n\tif (hasNoContent(context)) {\n\t\treturn null;\n\t}\n\tconst buffer = await streamToBuffer(context.stream);\n\treturn buffer.toString();\n}\n\nexport async function asTextOrError(\n\tcontext: IRequestContext,\n): Promise<string | null> {\n\tif (!isSuccess(context)) {\n\t\tthrow new Error(\"Server returned \" + context.res.statusCode);\n\t}\n\treturn asText(context);\n}\n\nexport async function asJson<T = {}>(\n\tcontext: IRequestContext,\n): Promise<T | null> {\n\tif (!isSuccess(context)) {\n\t\tthrow new Error(\"Server returned \" + context.res.statusCode);\n\t}\n\tif (hasNoContent(context)) {\n\t\treturn null;\n\t}\n\tconst buffer = await streamToBuffer(context.stream);\n\tconst str = buffer.toString();\n\ttry {\n\t\treturn JSON.parse(str);\n\t} catch (err) {\n\t\terr.message += \":\\n\" + str;\n\t\tthrow err;\n\t}\n}\n\nexport function updateProxyConfigurationsScope(\n\tscope: ConfigurationScope,\n): void {\n\tregisterProxyConfigurations(scope);\n}\n\nlet proxyConfiguration: IConfigurationNode | undefined;\nfunction registerProxyConfigurations(scope: ConfigurationScope): void {\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\t\tExtensions.Configuration,\n\t);\n\tconst oldProxyConfiguration = proxyConfiguration;\n\tproxyConfiguration = {\n\t\tid: \"http\",\n\t\torder: 15,\n\t\ttitle: localize(\"httpConfigurationTitle\", \"HTTP\"),\n\t\ttype: \"object\",\n\t\tscope,\n\t\tproperties: {\n\t\t\t\"http.proxy\": {\n\t\t\t\ttype: \"string\",\n\t\t\t\tpattern:\n\t\t\t\t\t\"^(https?|socks|socks4a?|socks5h?)://([^:]*(:[^@]*)?@)?([^:]+|\\\\[[:0-9a-fA-F]+\\\\])(:\\\\d+)?/?$|^$\",\n\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\"proxy\",\n\t\t\t\t\t\"The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.\",\n\t\t\t\t),\n\t\t\t\trestricted: true,\n\t\t\t},\n\t\t\t\"http.proxyStrictSSL\": {\n\t\t\t\ttype: \"boolean\",\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize(\n\t\t\t\t\t\"strictSSL\",\n\t\t\t\t\t\"Controls whether the proxy server certificate should be verified against the list of supplied CAs.\",\n\t\t\t\t),\n\t\t\t\trestricted: true,\n\t\t\t},\n\t\t\t\"http.proxyKerberosServicePrincipal\": {\n\t\t\t\ttype: \"string\",\n\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\"proxyKerberosServicePrincipal\",\n\t\t\t\t\t\"Overrides the principal service name for Kerberos authentication with the HTTP proxy. A default based on the proxy hostname is used when this is not set.\",\n\t\t\t\t),\n\t\t\t\trestricted: true,\n\t\t\t},\n\t\t\t\"http.noProxy\": {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: { type: \"string\" },\n\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\"noProxy\",\n\t\t\t\t\t\"Specifies domain names for which proxy settings should be ignored for HTTP/HTTPS requests.\",\n\t\t\t\t),\n\t\t\t\trestricted: true,\n\t\t\t},\n\t\t\t\"http.proxyAuthorization\": {\n\t\t\t\ttype: [\"null\", \"string\"],\n\t\t\t\tdefault: null,\n\t\t\t\tmarkdownDescription: localize(\n\t\t\t\t\t\"proxyAuthorization\",\n\t\t\t\t\t\"The value to send as the `Proxy-Authorization` header for every network request.\",\n\t\t\t\t),\n\t\t\t\trestricted: true,\n\t\t\t},\n\t\t\t\"http.proxySupport\": {\n\t\t\t\ttype: \"string\",\n\t\t\t\tenum: [\"off\", \"on\", \"fallback\", \"override\"],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"proxySupportOff\",\n\t\t\t\t\t\t\"Disable proxy support for extensions.\",\n\t\t\t\t\t),\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"proxySupportOn\",\n\t\t\t\t\t\t\"Enable proxy support for extensions.\",\n\t\t\t\t\t),\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"proxySupportFallback\",\n\t\t\t\t\t\t\"Enable proxy support for extensions, fall back to request options, when no proxy found.\",\n\t\t\t\t\t),\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"proxySupportOverride\",\n\t\t\t\t\t\t\"Enable proxy support for extensions, override request options.\",\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t\tdefault: \"override\",\n\t\t\t\tdescription: localize(\n\t\t\t\t\t\"proxySupport\",\n\t\t\t\t\t\"Use the proxy support for extensions.\",\n\t\t\t\t),\n\t\t\t\trestricted: true,\n\t\t\t},\n\t\t\t\"http.systemCertificates\": {\n\t\t\t\ttype: \"boolean\",\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize(\n\t\t\t\t\t\"systemCertificates\",\n\t\t\t\t\t\"Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)\",\n\t\t\t\t),\n\t\t\t\trestricted: true,\n\t\t\t},\n\t\t\t\"http.experimental.systemCertificatesV2\": {\n\t\t\t\ttype: \"boolean\",\n\t\t\t\ttags: [\"experimental\"],\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: localize(\n\t\t\t\t\t\"systemCertificatesV2\",\n\t\t\t\t\t\"Controls whether experimental loading of CA certificates from the OS should be enabled. This uses a more general approach than the default implemenation.\",\n\t\t\t\t),\n\t\t\t\trestricted: true,\n\t\t\t},\n\t\t},\n\t};\n\tconfigurationRegistry.updateConfigurations({\n\t\tadd: [proxyConfiguration],\n\t\tremove: oldProxyConfiguration ? [oldProxyConfiguration] : [],\n\t});\n}\n\nregisterProxyConfigurations(ConfigurationScope.APPLICATION);\n"],
  "mappings": "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",
  "names": []
}
