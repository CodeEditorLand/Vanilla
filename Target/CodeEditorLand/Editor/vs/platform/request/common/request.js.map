{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/request/common/request.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { streamToBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { getErrorMessage } from '../../../base/common/errors.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { IHeaders, IRequestContext, IRequestOptions } from '../../../base/parts/request/common/request.js';\nimport { localize } from '../../../nls.js';\nimport { ConfigurationScope, Extensions, IConfigurationNode, IConfigurationRegistry } from '../../configuration/common/configurationRegistry.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nexport const IRequestService = createDecorator<IRequestService>('requestService');\n\nexport interface AuthInfo {\n\tisProxy: boolean;\n\tscheme: string;\n\thost: string;\n\tport: number;\n\trealm: string;\n\tattempt: number;\n}\n\nexport interface Credentials {\n\tusername: string;\n\tpassword: string;\n}\n\nexport interface IRequestService {\n\treadonly _serviceBrand: undefined;\n\n\trequest(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext>;\n\n\tresolveProxy(url: string): Promise<string | undefined>;\n\tlookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;\n\tlookupKerberosAuthorization(url: string): Promise<string | undefined>;\n\tloadCertificates(): Promise<string[]>;\n}\n\nclass LoggableHeaders {\n\n\tprivate headers: IHeaders | undefined;\n\n\tconstructor(private readonly original: IHeaders) { }\n\n\ttoJSON(): any {\n\t\tif (!this.headers) {\n\t\t\tconst headers = Object.create(null);\n\t\t\tfor (const key in this.original) {\n\t\t\t\tif (key.toLowerCase() === 'authorization' || key.toLowerCase() === 'proxy-authorization') {\n\t\t\t\t\theaders[key] = '*****';\n\t\t\t\t} else {\n\t\t\t\t\theaders[key] = this.original[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.headers = headers;\n\t\t}\n\t\treturn this.headers;\n\t}\n\n}\n\nexport abstract class AbstractRequestService extends Disposable implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate counter = 0;\n\n\tconstructor(protected readonly logService: ILogService) {\n\t\tsuper();\n\t}\n\n\tprotected async logAndRequest(options: IRequestOptions, request: () => Promise<IRequestContext>): Promise<IRequestContext> {\n\t\tconst prefix = `[network] #${++this.counter}: ${options.url}`;\n\t\tthis.logService.trace(`${prefix} - begin`, options.type, new LoggableHeaders(options.headers ?? {}));\n\t\ttry {\n\t\t\tconst result = await request();\n\t\t\tthis.logService.trace(`${prefix} - end`, options.type, result.res.statusCode, result.res.headers);\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`${prefix} - error`, options.type, getErrorMessage(error));\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tabstract request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext>;\n\tabstract resolveProxy(url: string): Promise<string | undefined>;\n\tabstract lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;\n\tabstract lookupKerberosAuthorization(url: string): Promise<string | undefined>;\n\tabstract loadCertificates(): Promise<string[]>;\n}\n\nexport function isSuccess(context: IRequestContext): boolean {\n\treturn (context.res.statusCode && context.res.statusCode >= 200 && context.res.statusCode < 300) || context.res.statusCode === 1223;\n}\n\nexport function hasNoContent(context: IRequestContext): boolean {\n\treturn context.res.statusCode === 204;\n}\n\nexport async function asText(context: IRequestContext): Promise<string | null> {\n\tif (hasNoContent(context)) {\n\t\treturn null;\n\t}\n\tconst buffer = await streamToBuffer(context.stream);\n\treturn buffer.toString();\n}\n\nexport async function asTextOrError(context: IRequestContext): Promise<string | null> {\n\tif (!isSuccess(context)) {\n\t\tthrow new Error('Server returned ' + context.res.statusCode);\n\t}\n\treturn asText(context);\n}\n\nexport async function asJson<T = {}>(context: IRequestContext): Promise<T | null> {\n\tif (!isSuccess(context)) {\n\t\tthrow new Error('Server returned ' + context.res.statusCode);\n\t}\n\tif (hasNoContent(context)) {\n\t\treturn null;\n\t}\n\tconst buffer = await streamToBuffer(context.stream);\n\tconst str = buffer.toString();\n\ttry {\n\t\treturn JSON.parse(str);\n\t} catch (err) {\n\t\terr.message += ':\\n' + str;\n\t\tthrow err;\n\t}\n}\n\nexport function updateProxyConfigurationsScope(scope: ConfigurationScope): void {\n\tregisterProxyConfigurations(scope);\n}\n\nlet proxyConfiguration: IConfigurationNode | undefined;\nfunction registerProxyConfigurations(scope: ConfigurationScope): void {\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\tconst oldProxyConfiguration = proxyConfiguration;\n\tproxyConfiguration = {\n\t\tid: 'http',\n\t\torder: 15,\n\t\ttitle: localize('httpConfigurationTitle', \"HTTP\"),\n\t\ttype: 'object',\n\t\tscope,\n\t\tproperties: {\n\t\t\t'http.proxy': {\n\t\t\t\ttype: 'string',\n\t\t\t\tpattern: '^(https?|socks|socks4a?|socks5h?)://([^:]*(:[^@]*)?@)?([^:]+|\\\\[[:0-9a-fA-F]+\\\\])(:\\\\d+)?/?$|^$',\n\t\t\t\tmarkdownDescription: localize('proxy', \"The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.proxyStrictSSL': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize('strictSSL', \"Controls whether the proxy server certificate should be verified against the list of supplied CAs.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.proxyKerberosServicePrincipal': {\n\t\t\t\ttype: 'string',\n\t\t\t\tmarkdownDescription: localize('proxyKerberosServicePrincipal', \"Overrides the principal service name for Kerberos authentication with the HTTP proxy. A default based on the proxy hostname is used when this is not set.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.noProxy': {\n\t\t\t\ttype: 'array',\n\t\t\t\titems: { type: 'string' },\n\t\t\t\tmarkdownDescription: localize('noProxy', \"Specifies domain names for which proxy settings should be ignored for HTTP/HTTPS requests.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.proxyAuthorization': {\n\t\t\t\ttype: ['null', 'string'],\n\t\t\t\tdefault: null,\n\t\t\t\tmarkdownDescription: localize('proxyAuthorization', \"The value to send as the `Proxy-Authorization` header for every network request.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.proxySupport': {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: ['off', 'on', 'fallback', 'override'],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tlocalize('proxySupportOff', \"Disable proxy support for extensions.\"),\n\t\t\t\t\tlocalize('proxySupportOn', \"Enable proxy support for extensions.\"),\n\t\t\t\t\tlocalize('proxySupportFallback', \"Enable proxy support for extensions, fall back to request options, when no proxy found.\"),\n\t\t\t\t\tlocalize('proxySupportOverride', \"Enable proxy support for extensions, override request options.\"),\n\t\t\t\t],\n\t\t\t\tdefault: 'override',\n\t\t\t\tdescription: localize('proxySupport', \"Use the proxy support for extensions.\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.systemCertificates': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize('systemCertificates', \"Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)\"),\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t'http.experimental.systemCertificatesV2': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\ttags: ['experimental'],\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: localize('systemCertificatesV2', \"Controls whether experimental loading of CA certificates from the OS should be enabled. This uses a more general approach than the default implemenation.\"),\n\t\t\t\trestricted: true\n\t\t\t}\n\t\t}\n\t};\n\tconfigurationRegistry.updateConfigurations({ add: [proxyConfiguration], remove: oldProxyConfiguration ? [oldProxyConfiguration] : [] });\n}\n\nregisterProxyConfigurations(ConfigurationScope.APPLICATION);\n"],
  "mappings": "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",
  "names": []
}
