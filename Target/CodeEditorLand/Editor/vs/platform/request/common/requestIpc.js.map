{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/request/common/requestIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype VSBuffer,\n\tbufferToStream,\n\tstreamToBuffer,\n} from \"../../../base/common/buffer.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../base/common/event.js\";\nimport type {\n\tIChannel,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport type {\n\tIHeaders,\n\tIRequestContext,\n\tIRequestOptions,\n} from \"../../../base/parts/request/common/request.js\";\nimport type { AuthInfo, Credentials, IRequestService } from \"./request.js\";\n\ntype RequestResponse = [\n\t{\n\t\theaders: IHeaders;\n\t\tstatusCode?: number;\n\t},\n\tVSBuffer,\n];\n\nexport class RequestChannel implements IServerChannel {\n\tconstructor(private readonly service: IRequestService) {}\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tthrow new Error(\"Invalid listen\");\n\t}\n\n\tcall(\n\t\tcontext: any,\n\t\tcommand: string,\n\t\targs?: any,\n\t\ttoken: CancellationToken = CancellationToken.None,\n\t): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase \"request\":\n\t\t\t\treturn this.service\n\t\t\t\t\t.request(args[0], token)\n\t\t\t\t\t.then(async ({ res, stream }) => {\n\t\t\t\t\t\tconst buffer = await streamToBuffer(stream);\n\t\t\t\t\t\treturn <RequestResponse>[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatusCode: res.statusCode,\n\t\t\t\t\t\t\t\theaders: res.headers,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbuffer,\n\t\t\t\t\t\t];\n\t\t\t\t\t});\n\t\t\tcase \"resolveProxy\":\n\t\t\t\treturn this.service.resolveProxy(args[0]);\n\t\t\tcase \"lookupAuthorization\":\n\t\t\t\treturn this.service.lookupAuthorization(args[0]);\n\t\t\tcase \"lookupKerberosAuthorization\":\n\t\t\t\treturn this.service.lookupKerberosAuthorization(args[0]);\n\t\t\tcase \"loadCertificates\":\n\t\t\t\treturn this.service.loadCertificates();\n\t\t}\n\t\tthrow new Error(\"Invalid call\");\n\t}\n}\n\nexport class RequestChannelClient implements IRequestService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private readonly channel: IChannel) {}\n\n\tasync request(\n\t\toptions: IRequestOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IRequestContext> {\n\t\tconst [res, buffer] = await this.channel.call<RequestResponse>(\n\t\t\t\"request\",\n\t\t\t[options],\n\t\t\ttoken,\n\t\t);\n\t\treturn { res, stream: bufferToStream(buffer) };\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn this.channel.call<string | undefined>(\"resolveProxy\", [url]);\n\t}\n\n\tasync lookupAuthorization(\n\t\tauthInfo: AuthInfo,\n\t): Promise<Credentials | undefined> {\n\t\treturn this.channel.call<\n\t\t\t{ username: string; password: string } | undefined\n\t\t>(\"lookupAuthorization\", [authInfo]);\n\t}\n\n\tasync lookupKerberosAuthorization(\n\t\turl: string,\n\t): Promise<string | undefined> {\n\t\treturn this.channel.call<string | undefined>(\n\t\t\t\"lookupKerberosAuthorization\",\n\t\t\t[url],\n\t\t);\n\t}\n\n\tasync loadCertificates(): Promise<string[]> {\n\t\treturn this.channel.call<string[]>(\"loadCertificates\");\n\t}\n}\n"],
  "mappings": ";;AAKA;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAqB3B,MAAM,eAAyC;AAAA,EACrD,YAA6B,SAA0B;AAA1B;AAAA,EAA2B;AAAA,EAhCzD,OA+BsD;AAAA;AAAA;AAAA,EAGrD,OAAO,SAAc,OAA2B;AAC/C,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AAAA,EAEA,KACC,SACA,SACA,MACA,QAA2B,kBAAkB,MAC9B;AACf,YAAQ,SAAS;AAAA,MAChB,KAAK;AACJ,eAAO,KAAK,QACV,QAAQ,KAAK,CAAC,GAAG,KAAK,EACtB,KAAK,OAAO,EAAE,KAAK,OAAO,MAAM;AAChC,gBAAM,SAAS,MAAM,eAAe,MAAM;AAC1C,iBAAwB;AAAA,YACvB;AAAA,cACC,YAAY,IAAI;AAAA,cAChB,SAAS,IAAI;AAAA,YACd;AAAA,YACA;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACH,KAAK;AACJ,eAAO,KAAK,QAAQ,aAAa,KAAK,CAAC,CAAC;AAAA,MACzC,KAAK;AACJ,eAAO,KAAK,QAAQ,oBAAoB,KAAK,CAAC,CAAC;AAAA,MAChD,KAAK;AACJ,eAAO,KAAK,QAAQ,4BAA4B,KAAK,CAAC,CAAC;AAAA,MACxD,KAAK;AACJ,eAAO,KAAK,QAAQ,iBAAiB;AAAA,IACvC;AACA,UAAM,IAAI,MAAM,cAAc;AAAA,EAC/B;AACD;AAEO,MAAM,qBAAgD;AAAA,EAG5D,YAA6B,SAAmB;AAAnB;AAAA,EAAoB;AAAA,EA1ElD,OAuE6D;AAAA;AAAA;AAAA,EAK5D,MAAM,QACL,SACA,OAC2B;AAC3B,UAAM,CAAC,KAAK,MAAM,IAAI,MAAM,KAAK,QAAQ;AAAA,MACxC;AAAA,MACA,CAAC,OAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO,EAAE,KAAK,QAAQ,eAAe,MAAM,EAAE;AAAA,EAC9C;AAAA,EAEA,MAAM,aAAa,KAA0C;AAC5D,WAAO,KAAK,QAAQ,KAAyB,gBAAgB,CAAC,GAAG,CAAC;AAAA,EACnE;AAAA,EAEA,MAAM,oBACL,UACmC;AACnC,WAAO,KAAK,QAAQ,KAElB,uBAAuB,CAAC,QAAQ,CAAC;AAAA,EACpC;AAAA,EAEA,MAAM,4BACL,KAC8B;AAC9B,WAAO,KAAK,QAAQ;AAAA,MACnB;AAAA,MACA,CAAC,GAAG;AAAA,IACL;AAAA,EACD;AAAA,EAEA,MAAM,mBAAsC;AAC3C,WAAO,KAAK,QAAQ,KAAe,kBAAkB;AAAA,EACtD;AACD;",
  "names": []
}
