{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/request/common/requestIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { bufferToStream, streamToBuffer, VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IChannel, IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { IHeaders, IRequestContext, IRequestOptions } from '../../../base/parts/request/common/request.js';\nimport { AuthInfo, Credentials, IRequestService } from './request.js';\n\ntype RequestResponse = [\n\t{\n\t\theaders: IHeaders;\n\t\tstatusCode?: number;\n\t},\n\tVSBuffer\n];\n\nexport class RequestChannel implements IServerChannel {\n\n\tconstructor(private readonly service: IRequestService) { }\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tthrow new Error('Invalid listen');\n\t}\n\n\tcall(context: any, command: string, args?: any, token: CancellationToken = CancellationToken.None): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'request': return this.service.request(args[0], token)\n\t\t\t\t.then(async ({ res, stream }) => {\n\t\t\t\t\tconst buffer = await streamToBuffer(stream);\n\t\t\t\t\treturn <RequestResponse>[{ statusCode: res.statusCode, headers: res.headers }, buffer];\n\t\t\t\t});\n\t\t\tcase 'resolveProxy': return this.service.resolveProxy(args[0]);\n\t\t\tcase 'lookupAuthorization': return this.service.lookupAuthorization(args[0]);\n\t\t\tcase 'lookupKerberosAuthorization': return this.service.lookupKerberosAuthorization(args[0]);\n\t\t\tcase 'loadCertificates': return this.service.loadCertificates();\n\t\t}\n\t\tthrow new Error('Invalid call');\n\t}\n}\n\nexport class RequestChannelClient implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private readonly channel: IChannel) { }\n\n\tasync request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tconst [res, buffer] = await this.channel.call<RequestResponse>('request', [options], token);\n\t\treturn { res, stream: bufferToStream(buffer) };\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn this.channel.call<string | undefined>('resolveProxy', [url]);\n\t}\n\n\tasync lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined> {\n\t\treturn this.channel.call<{ username: string; password: string } | undefined>('lookupAuthorization', [authInfo]);\n\t}\n\n\tasync lookupKerberosAuthorization(url: string): Promise<string | undefined> {\n\t\treturn this.channel.call<string | undefined>('lookupKerberosAuthorization', [url]);\n\t}\n\n\tasync loadCertificates(): Promise<string[]> {\n\t\treturn this.channel.call<string[]>('loadCertificates');\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB,gBAAgB,gBAAgB;AACzD,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,UAAU,sBAAsB;AACzC,SAAS,UAAU,iBAAiB,uBAAuB;AAC3D,SAAS,UAAU,aAAa,uBAAuB;AAUhD,MAAM,eAAyC;AAAA,EAErD,YAA6B,SAA0B;AAA1B;AAAA,EAA4B;AAAA,EAtB1D,OAoBsD;AAAA;AAAA;AAAA,EAIrD,OAAO,SAAc,OAA2B;AAC/C,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AAAA,EAEA,KAAK,SAAc,SAAiB,MAAY,QAA2B,kBAAkB,MAAoB;AAChH,YAAQ,SAAS;AAAA,MAChB,KAAK;AAAW,eAAO,KAAK,QAAQ,QAAQ,KAAK,CAAC,GAAG,KAAK,EACxD,KAAK,OAAO,EAAE,KAAK,OAAO,MAAM;AAChC,gBAAM,SAAS,MAAM,eAAe,MAAM;AAC1C,iBAAwB,CAAC,EAAE,YAAY,IAAI,YAAY,SAAS,IAAI,QAAQ,GAAG,MAAM;AAAA,QACtF,CAAC;AAAA,MACF,KAAK;AAAgB,eAAO,KAAK,QAAQ,aAAa,KAAK,CAAC,CAAC;AAAA,MAC7D,KAAK;AAAuB,eAAO,KAAK,QAAQ,oBAAoB,KAAK,CAAC,CAAC;AAAA,MAC3E,KAAK;AAA+B,eAAO,KAAK,QAAQ,4BAA4B,KAAK,CAAC,CAAC;AAAA,MAC3F,KAAK;AAAoB,eAAO,KAAK,QAAQ,iBAAiB;AAAA,IAC/D;AACA,UAAM,IAAI,MAAM,cAAc;AAAA,EAC/B;AACD;AAEO,MAAM,qBAAgD;AAAA,EAI5D,YAA6B,SAAmB;AAAnB;AAAA,EAAqB;AAAA,EAhDnD,OA4C6D;AAAA;AAAA;AAAA,EAM5D,MAAM,QAAQ,SAA0B,OAAoD;AAC3F,UAAM,CAAC,KAAK,MAAM,IAAI,MAAM,KAAK,QAAQ,KAAsB,WAAW,CAAC,OAAO,GAAG,KAAK;AAC1F,WAAO,EAAE,KAAK,QAAQ,eAAe,MAAM,EAAE;AAAA,EAC9C;AAAA,EAEA,MAAM,aAAa,KAA0C;AAC5D,WAAO,KAAK,QAAQ,KAAyB,gBAAgB,CAAC,GAAG,CAAC;AAAA,EACnE;AAAA,EAEA,MAAM,oBAAoB,UAAsD;AAC/E,WAAO,KAAK,QAAQ,KAAyD,uBAAuB,CAAC,QAAQ,CAAC;AAAA,EAC/G;AAAA,EAEA,MAAM,4BAA4B,KAA0C;AAC3E,WAAO,KAAK,QAAQ,KAAyB,+BAA+B,CAAC,GAAG,CAAC;AAAA,EAClF;AAAA,EAEA,MAAM,mBAAsC;AAC3C,WAAO,KAAK,QAAQ,KAAe,kBAAkB;AAAA,EACtD;AACD;",
  "names": []
}
