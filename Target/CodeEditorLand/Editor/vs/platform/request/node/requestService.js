var f=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var h=(e,s,t,o)=>{for(var r=o>1?void 0:o?v(s,t):s,i=e.length-1,n;i>=0;i--)(n=e[i])&&(r=(o?n(s,t,r):n(r))||r);return o&&r&&f(s,t,r),r},c=(e,s)=>(t,o)=>s(t,o,e);import"http";import"https";import{parse as g}from"url";import{createGunzip as S}from"zlib";import{Promises as R}from"../../../../vs/base/common/async.js";import{streamToBufferReadableStream as y}from"../../../../vs/base/common/buffer.js";import"../../../../vs/base/common/cancellation.js";import{CancellationError as q,getErrorMessage as w}from"../../../../vs/base/common/errors.js";import"../../../../vs/base/common/stream.js";import{isBoolean as C,isNumber as I}from"../../../../vs/base/common/types.js";import"../../../../vs/base/parts/request/common/request.js";import{IConfigurationService as x}from"../../../../vs/platform/configuration/common/configuration.js";import{INativeEnvironmentService as b}from"../../../../vs/platform/environment/common/environment.js";import{ILoggerService as L,ILogService as A}from"../../../../vs/platform/log/common/log.js";import{AbstractRequestService as P}from"../../../../vs/platform/request/common/request.js";import{getProxyAgent as z}from"../../../../vs/platform/request/node/proxy.js";import{getResolvedShellEnv as E}from"../../../../vs/platform/shell/node/shellEnv.js";let m=class extends P{constructor(t,o,r,i){super(i);this.configurationService=t;this.environmentService=o;this.logService=r;this.configure(),this._register(t.onDidChangeConfiguration(n=>{n.affectsConfiguration("http")&&this.configure()}))}proxyUrl;strictSSL;authorization;shellEnvErrorLogged;configure(){const t=this.configurationService.getValue("http");this.proxyUrl=t?.proxy,this.strictSSL=!!t?.proxyStrictSSL,this.authorization=t?.proxyAuthorization}async request(t,o){const{proxyUrl:r,strictSSL:i}=this;let n;try{n=await E(this.configurationService,this.logService,this.environmentService.args,process.env)}catch(l){this.shellEnvErrorLogged||(this.shellEnvErrorLogged=!0,this.logService.error("resolving shell environment failed",w(l)))}const u={...process.env,...n},a=t.agent?t.agent:await z(t.url||"",u,{proxyUrl:r,strictSSL:i});return t.agent=a,t.strictSSL=i,this.authorization&&(t.headers={...t.headers||{},"Proxy-Authorization":this.authorization}),this.logAndRequest(t.isChromiumNetwork?"electron":"node",t,()=>p(t,o))}async resolveProxy(t){}async lookupAuthorization(t){}async lookupKerberosAuthorization(t){try{const o=await import("kerberos"),r=new URL(t),i=this.configurationService.getValue("http.proxyKerberosServicePrincipal")||(process.platform==="win32"?`HTTP/${r.hostname}`:`HTTP@${r.hostname}`);return this.logService.debug("RequestService#lookupKerberosAuthorization Kerberos authentication lookup",`proxyURL:${r}`,`spn:${i}`),"Negotiate "+await(await o.initializeClient(i)).step("")}catch(o){this.logService.debug("RequestService#lookupKerberosAuthorization Kerberos authentication failed",o);return}}async loadCertificates(){return(await import("@vscode/proxy-agent")).loadSystemCertificates({log:this.logService})}};m=h([c(0,x),c(1,b),c(2,A),c(3,L)],m);async function T(e){return(g(e.url).protocol==="https:"?await import("https"):await import("http")).request}async function p(e,s){return R.withAsyncBody(async(t,o)=>{const r=g(e.url),i=e.getRawRequest?e.getRawRequest(e):await T(e),n={hostname:r.hostname,port:r.port?parseInt(r.port):r.protocol==="https:"?443:80,protocol:r.protocol,path:r.path,method:e.type||"GET",headers:e.headers,agent:e.agent,rejectUnauthorized:C(e.strictSSL)?e.strictSSL:!0};e.user&&e.password&&(n.auth=e.user+":"+e.password);const u=i(n,a=>{const l=I(e.followRedirects)?e.followRedirects:3;if(a.statusCode&&a.statusCode>=300&&a.statusCode<400&&l>0&&a.headers.location)p({...e,url:a.headers.location,followRedirects:l-1},s).then(t,o);else{let d=a;!e.isChromiumNetwork&&a.headers["content-encoding"]==="gzip"&&(d=a.pipe(S())),t({res:a,stream:y(d)})}});u.on("error",o),e.timeout&&u.setTimeout(e.timeout),e.isChromiumNetwork&&u.removeHeader("Content-Length"),e.data&&typeof e.data=="string"&&u.write(e.data),u.end(),s.onCancellationRequested(()=>{u.abort(),o(new q)})})}export{m as RequestService,p as nodeRequest};
