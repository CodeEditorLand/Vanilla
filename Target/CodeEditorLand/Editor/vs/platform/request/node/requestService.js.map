{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/request/node/requestService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as http from \"http\";\nimport type * as https from \"https\";\nimport { parse as parseUrl } from \"url\";\nimport { createGunzip } from \"zlib\";\nimport { Promises } from \"../../../base/common/async.js\";\nimport { streamToBufferReadableStream } from \"../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\tCancellationError,\n\tgetErrorMessage,\n} from \"../../../base/common/errors.js\";\nimport type * as streams from \"../../../base/common/stream.js\";\nimport { isBoolean, isNumber } from \"../../../base/common/types.js\";\nimport type {\n\tIRequestContext,\n\tIRequestOptions,\n} from \"../../../base/parts/request/common/request.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { INativeEnvironmentService } from \"../../environment/common/environment.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { getResolvedShellEnv } from \"../../shell/node/shellEnv.js\";\nimport {\n\tAbstractRequestService,\n\ttype AuthInfo,\n\ttype Credentials,\n\ttype IRequestService,\n} from \"../common/request.js\";\nimport { type Agent, getProxyAgent } from \"./proxy.js\";\n\ninterface IHTTPConfiguration {\n\tproxy?: string;\n\tproxyStrictSSL?: boolean;\n\tproxyAuthorization?: string;\n}\n\nexport interface IRawRequestFunction {\n\t(\n\t\toptions: http.RequestOptions,\n\t\tcallback?: (res: http.IncomingMessage) => void,\n\t): http.ClientRequest;\n}\n\nexport interface NodeRequestOptions extends IRequestOptions {\n\tagent?: Agent;\n\tstrictSSL?: boolean;\n\tisChromiumNetwork?: boolean;\n\tgetRawRequest?(options: IRequestOptions): IRawRequestFunction;\n}\n\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nexport class RequestService\n\textends AbstractRequestService\n\timplements IRequestService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate proxyUrl?: string;\n\tprivate strictSSL: boolean | undefined;\n\tprivate authorization?: string;\n\tprivate shellEnvErrorLogged?: boolean;\n\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@INativeEnvironmentService\n\t\tprivate readonly environmentService: INativeEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(logService);\n\t\tthis.configure();\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(\"http\")) {\n\t\t\t\t\tthis.configure();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate configure() {\n\t\tconst config = this.configurationService.getValue<\n\t\t\tIHTTPConfiguration | undefined\n\t\t>(\"http\");\n\n\t\tthis.proxyUrl = config?.proxy;\n\t\tthis.strictSSL = !!config?.proxyStrictSSL;\n\t\tthis.authorization = config?.proxyAuthorization;\n\t}\n\n\tasync request(\n\t\toptions: NodeRequestOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IRequestContext> {\n\t\tconst { proxyUrl, strictSSL } = this;\n\n\t\tlet shellEnv: typeof process.env | undefined;\n\t\ttry {\n\t\t\tshellEnv = await getResolvedShellEnv(\n\t\t\t\tthis.configurationService,\n\t\t\t\tthis.logService,\n\t\t\t\tthis.environmentService.args,\n\t\t\t\tprocess.env,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tif (!this.shellEnvErrorLogged) {\n\t\t\t\tthis.shellEnvErrorLogged = true;\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`resolving shell environment failed`,\n\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst env = {\n\t\t\t...process.env,\n\t\t\t...shellEnv,\n\t\t};\n\t\tconst agent = options.agent\n\t\t\t? options.agent\n\t\t\t: await getProxyAgent(options.url || \"\", env, {\n\t\t\t\t\tproxyUrl,\n\t\t\t\t\tstrictSSL,\n\t\t\t\t});\n\n\t\toptions.agent = agent;\n\t\toptions.strictSSL = strictSSL;\n\n\t\tif (this.authorization) {\n\t\t\toptions.headers = {\n\t\t\t\t...(options.headers || {}),\n\t\t\t\t\"Proxy-Authorization\": this.authorization,\n\t\t\t};\n\t\t}\n\n\t\treturn this.logAndRequest(options, () => nodeRequest(options, token));\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn undefined; // currently not implemented in node\n\t}\n\n\tasync lookupAuthorization(\n\t\tauthInfo: AuthInfo,\n\t): Promise<Credentials | undefined> {\n\t\treturn undefined; // currently not implemented in node\n\t}\n\n\tasync lookupKerberosAuthorization(\n\t\turlStr: string,\n\t): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst kerberos = await import(\"kerberos\");\n\t\t\tconst url = new URL(urlStr);\n\t\t\tconst spn =\n\t\t\t\tthis.configurationService.getValue<string>(\n\t\t\t\t\t\"http.proxyKerberosServicePrincipal\",\n\t\t\t\t) ||\n\t\t\t\t(process.platform === \"win32\"\n\t\t\t\t\t? `HTTP/${url.hostname}`\n\t\t\t\t\t: `HTTP@${url.hostname}`);\n\t\t\tthis.logService.debug(\n\t\t\t\t\"RequestService#lookupKerberosAuthorization Kerberos authentication lookup\",\n\t\t\t\t`proxyURL:${url}`,\n\t\t\t\t`spn:${spn}`,\n\t\t\t);\n\t\t\tconst client = await kerberos.initializeClient(spn);\n\t\t\tconst response = await client.step(\"\");\n\t\t\treturn \"Negotiate \" + response;\n\t\t} catch (err) {\n\t\t\tthis.logService.debug(\n\t\t\t\t\"RequestService#lookupKerberosAuthorization Kerberos authentication failed\",\n\t\t\t\terr,\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tasync loadCertificates(): Promise<string[]> {\n\t\tconst proxyAgent = await import(\"@vscode/proxy-agent\");\n\t\treturn proxyAgent.loadSystemCertificates({ log: this.logService });\n\t}\n}\n\nasync function getNodeRequest(\n\toptions: IRequestOptions,\n): Promise<IRawRequestFunction> {\n\tconst endpoint = parseUrl(options.url!);\n\tconst module =\n\t\tendpoint.protocol === \"https:\"\n\t\t\t? await import(\"https\")\n\t\t\t: await import(\"http\");\n\n\treturn module.request;\n}\n\nexport async function nodeRequest(\n\toptions: NodeRequestOptions,\n\ttoken: CancellationToken,\n): Promise<IRequestContext> {\n\treturn Promises.withAsyncBody<IRequestContext>(async (resolve, reject) => {\n\t\tconst endpoint = parseUrl(options.url!);\n\t\tconst rawRequest = options.getRawRequest\n\t\t\t? options.getRawRequest(options)\n\t\t\t: await getNodeRequest(options);\n\n\t\tconst opts: https.RequestOptions = {\n\t\t\thostname: endpoint.hostname,\n\t\t\tport: endpoint.port\n\t\t\t\t? Number.parseInt(endpoint.port)\n\t\t\t\t: endpoint.protocol === \"https:\"\n\t\t\t\t\t? 443\n\t\t\t\t\t: 80,\n\t\t\tprotocol: endpoint.protocol,\n\t\t\tpath: endpoint.path,\n\t\t\tmethod: options.type || \"GET\",\n\t\t\theaders: options.headers,\n\t\t\tagent: options.agent,\n\t\t\trejectUnauthorized: isBoolean(options.strictSSL)\n\t\t\t\t? options.strictSSL\n\t\t\t\t: true,\n\t\t};\n\n\t\tif (options.user && options.password) {\n\t\t\topts.auth = options.user + \":\" + options.password;\n\t\t}\n\n\t\tconst req = rawRequest(opts, (res: http.IncomingMessage) => {\n\t\t\tconst followRedirects: number = isNumber(options.followRedirects)\n\t\t\t\t? options.followRedirects\n\t\t\t\t: 3;\n\t\t\tif (\n\t\t\t\tres.statusCode &&\n\t\t\t\tres.statusCode >= 300 &&\n\t\t\t\tres.statusCode < 400 &&\n\t\t\t\tfollowRedirects > 0 &&\n\t\t\t\tres.headers[\"location\"]\n\t\t\t) {\n\t\t\t\tnodeRequest(\n\t\t\t\t\t{\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\turl: res.headers[\"location\"],\n\t\t\t\t\t\tfollowRedirects: followRedirects - 1,\n\t\t\t\t\t},\n\t\t\t\t\ttoken,\n\t\t\t\t).then(resolve, reject);\n\t\t\t} else {\n\t\t\t\tlet stream: streams.ReadableStreamEvents<Uint8Array> = res;\n\n\t\t\t\t// Responses from Electron net module should be treated as response\n\t\t\t\t// from browser, which will apply gzip filter and decompress the response\n\t\t\t\t// using zlib before passing the result to us. Following step can be bypassed\n\t\t\t\t// in this case and proceed further.\n\t\t\t\t// Refs https://source.chromium.org/chromium/chromium/src/+/main:net/url_request/url_request_http_job.cc;l=1266-1318\n\t\t\t\tif (\n\t\t\t\t\t!options.isChromiumNetwork &&\n\t\t\t\t\tres.headers[\"content-encoding\"] === \"gzip\"\n\t\t\t\t) {\n\t\t\t\t\tstream = res.pipe(createGunzip());\n\t\t\t\t}\n\n\t\t\t\tresolve({\n\t\t\t\t\tres,\n\t\t\t\t\tstream: streamToBufferReadableStream(stream),\n\t\t\t\t} satisfies IRequestContext);\n\t\t\t}\n\t\t});\n\n\t\treq.on(\"error\", reject);\n\n\t\tif (options.timeout) {\n\t\t\treq.setTimeout(options.timeout);\n\t\t}\n\n\t\t// Chromium will abort the request if forbidden headers are set.\n\t\t// Ref https://source.chromium.org/chromium/chromium/src/+/main:services/network/public/cpp/header_util.cc;l=14-48;\n\t\t// for additional context.\n\t\tif (options.isChromiumNetwork) {\n\t\t\treq.removeHeader(\"Content-Length\");\n\t\t}\n\n\t\tif (options.data) {\n\t\t\tif (typeof options.data === \"string\") {\n\t\t\t\treq.write(options.data);\n\t\t\t}\n\t\t}\n\n\t\treq.end();\n\n\t\ttoken.onCancellationRequested(() => {\n\t\t\treq.abort();\n\n\t\t\treject(new CancellationError());\n\t\t});\n\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;AAOA,SAAS,SAAS,gBAAgB;AAClC,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,oCAAoC;AAE7C;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,WAAW,gBAAgB;AAKpC,SAAS,6BAA6B;AACtC,SAAS,iCAAiC;AAC1C,SAAS,mBAAmB;AAC5B,SAAS,2BAA2B;AACpC;AAAA,EACC;AAAA,OAIM;AACP,SAAqB,qBAAqB;AA0BnC,IAAM,iBAAN,cACE,uBAET;AAAA,EAQC,YAEkB,sBAEA,oBACJ,YACZ;AACD,UAAM,UAAU;AALC;AAEA;AAIjB,SAAK,UAAU;AACf,SAAK;AAAA,MACJ,qBAAqB,yBAAyB,CAAC,MAAM;AACpD,YAAI,EAAE,qBAAqB,MAAM,GAAG;AACnC,eAAK,UAAU;AAAA,QAChB;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EArFD,OA6DA;AAAA;AAAA;AAAA,EAGS;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAoBA,YAAY;AACnB,UAAM,SAAS,KAAK,qBAAqB,SAEvC,MAAM;AAER,SAAK,WAAW,QAAQ;AACxB,SAAK,YAAY,CAAC,CAAC,QAAQ;AAC3B,SAAK,gBAAgB,QAAQ;AAAA,EAC9B;AAAA,EAEA,MAAM,QACL,SACA,OAC2B;AAC3B,UAAM,EAAE,UAAU,UAAU,IAAI;AAEhC,QAAI;AACJ,QAAI;AACH,iBAAW,MAAM;AAAA,QAChB,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK,mBAAmB;AAAA,QACxB,QAAQ;AAAA,MACT;AAAA,IACD,SAAS,OAAO;AACf,UAAI,CAAC,KAAK,qBAAqB;AAC9B,aAAK,sBAAsB;AAC3B,aAAK,WAAW;AAAA,UACf;AAAA,UACA,gBAAgB,KAAK;AAAA,QACtB;AAAA,MACD;AAAA,IACD;AAEA,UAAM,MAAM;AAAA,MACX,GAAG,QAAQ;AAAA,MACX,GAAG;AAAA,IACJ;AACA,UAAM,QAAQ,QAAQ,QACnB,QAAQ,QACR,MAAM,cAAc,QAAQ,OAAO,IAAI,KAAK;AAAA,MAC5C;AAAA,MACA;AAAA,IACD,CAAC;AAEH,YAAQ,QAAQ;AAChB,YAAQ,YAAY;AAEpB,QAAI,KAAK,eAAe;AACvB,cAAQ,UAAU;AAAA,QACjB,GAAI,QAAQ,WAAW,CAAC;AAAA,QACxB,uBAAuB,KAAK;AAAA,MAC7B;AAAA,IACD;AAEA,WAAO,KAAK,cAAc,SAAS,MAAM,YAAY,SAAS,KAAK,CAAC;AAAA,EACrE;AAAA,EAEA,MAAM,aAAa,KAA0C;AAC5D,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,oBACL,UACmC;AACnC,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,4BACL,QAC8B;AAC9B,QAAI;AACH,YAAM,WAAW,MAAM,OAAO,UAAU;AACxC,YAAM,MAAM,IAAI,IAAI,MAAM;AAC1B,YAAM,MACL,KAAK,qBAAqB;AAAA,QACzB;AAAA,MACD,MACC,QAAQ,aAAa,UACnB,QAAQ,IAAI,QAAQ,KACpB,QAAQ,IAAI,QAAQ;AACxB,WAAK,WAAW;AAAA,QACf;AAAA,QACA,YAAY,GAAG;AAAA,QACf,OAAO,GAAG;AAAA,MACX;AACA,YAAM,SAAS,MAAM,SAAS,iBAAiB,GAAG;AAClD,YAAM,WAAW,MAAM,OAAO,KAAK,EAAE;AACrC,aAAO,eAAe;AAAA,IACvB,SAAS,KAAK;AACb,WAAK,WAAW;AAAA,QACf;AAAA,QACA;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,MAAM,mBAAsC;AAC3C,UAAM,aAAa,MAAM,OAAO,qBAAqB;AACrD,WAAO,WAAW,uBAAuB,EAAE,KAAK,KAAK,WAAW,CAAC;AAAA,EAClE;AACD;AAnIa,iBAAN;AAAA,EAYJ;AAAA,EAEA;AAAA,EAEA;AAAA,GAhBU;AAqIb,eAAe,eACd,SAC+B;AAC/B,QAAM,WAAW,SAAS,QAAQ,GAAI;AACtC,QAAM,SACL,SAAS,aAAa,WACnB,MAAM,OAAO,OAAO,IACpB,MAAM,OAAO,MAAM;AAEvB,SAAO,OAAO;AACf;AAVe;AAYf,eAAsB,YACrB,SACA,OAC2B;AAC3B,SAAO,SAAS,cAA+B,OAAO,SAAS,WAAW;AACzE,UAAM,WAAW,SAAS,QAAQ,GAAI;AACtC,UAAM,aAAa,QAAQ,gBACxB,QAAQ,cAAc,OAAO,IAC7B,MAAM,eAAe,OAAO;AAE/B,UAAM,OAA6B;AAAA,MAClC,UAAU,SAAS;AAAA,MACnB,MAAM,SAAS,OACZ,OAAO,SAAS,SAAS,IAAI,IAC7B,SAAS,aAAa,WACrB,MACA;AAAA,MACJ,UAAU,SAAS;AAAA,MACnB,MAAM,SAAS;AAAA,MACf,QAAQ,QAAQ,QAAQ;AAAA,MACxB,SAAS,QAAQ;AAAA,MACjB,OAAO,QAAQ;AAAA,MACf,oBAAoB,UAAU,QAAQ,SAAS,IAC5C,QAAQ,YACR;AAAA,IACJ;AAEA,QAAI,QAAQ,QAAQ,QAAQ,UAAU;AACrC,WAAK,OAAO,QAAQ,OAAO,MAAM,QAAQ;AAAA,IAC1C;AAEA,UAAM,MAAM,WAAW,MAAM,CAAC,QAA8B;AAC3D,YAAM,kBAA0B,SAAS,QAAQ,eAAe,IAC7D,QAAQ,kBACR;AACH,UACC,IAAI,cACJ,IAAI,cAAc,OAClB,IAAI,aAAa,OACjB,kBAAkB,KAClB,IAAI,QAAQ,UAAU,GACrB;AACD;AAAA,UACC;AAAA,YACC,GAAG;AAAA,YACH,KAAK,IAAI,QAAQ,UAAU;AAAA,YAC3B,iBAAiB,kBAAkB;AAAA,UACpC;AAAA,UACA;AAAA,QACD,EAAE,KAAK,SAAS,MAAM;AAAA,MACvB,OAAO;AACN,YAAI,SAAmD;AAOvD,YACC,CAAC,QAAQ,qBACT,IAAI,QAAQ,kBAAkB,MAAM,QACnC;AACD,mBAAS,IAAI,KAAK,aAAa,CAAC;AAAA,QACjC;AAEA,gBAAQ;AAAA,UACP;AAAA,UACA,QAAQ,6BAA6B,MAAM;AAAA,QAC5C,CAA2B;AAAA,MAC5B;AAAA,IACD,CAAC;AAED,QAAI,GAAG,SAAS,MAAM;AAEtB,QAAI,QAAQ,SAAS;AACpB,UAAI,WAAW,QAAQ,OAAO;AAAA,IAC/B;AAKA,QAAI,QAAQ,mBAAmB;AAC9B,UAAI,aAAa,gBAAgB;AAAA,IAClC;AAEA,QAAI,QAAQ,MAAM;AACjB,UAAI,OAAO,QAAQ,SAAS,UAAU;AACrC,YAAI,MAAM,QAAQ,IAAI;AAAA,MACvB;AAAA,IACD;AAEA,QAAI,IAAI;AAER,UAAM,wBAAwB,MAAM;AACnC,UAAI,MAAM;AAEV,aAAO,IAAI,kBAAkB,CAAC;AAAA,IAC/B,CAAC;AAAA,EACF,CAAC;AACF;AAnGsB;",
  "names": []
}
