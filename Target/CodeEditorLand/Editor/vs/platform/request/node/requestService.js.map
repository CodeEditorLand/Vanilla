{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/request/node/requestService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport { parse as parseUrl } from 'url';\nimport { Promises } from '../../../base/common/async.js';\nimport { streamToBufferReadableStream } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { CancellationError, getErrorMessage } from '../../../base/common/errors.js';\nimport * as streams from '../../../base/common/stream.js';\nimport { isBoolean, isNumber } from '../../../base/common/types.js';\nimport { IRequestContext, IRequestOptions } from '../../../base/parts/request/common/request.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { INativeEnvironmentService } from '../../environment/common/environment.js';\nimport { getResolvedShellEnv } from '../../shell/node/shellEnv.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { AbstractRequestService, AuthInfo, Credentials, IRequestService } from '../common/request.js';\nimport { Agent, getProxyAgent } from './proxy.js';\nimport { createGunzip } from 'zlib';\n\ninterface IHTTPConfiguration {\n\tproxy?: string;\n\tproxyStrictSSL?: boolean;\n\tproxyAuthorization?: string;\n}\n\nexport interface IRawRequestFunction {\n\t(options: http.RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;\n}\n\nexport interface NodeRequestOptions extends IRequestOptions {\n\tagent?: Agent;\n\tstrictSSL?: boolean;\n\tisChromiumNetwork?: boolean;\n\tgetRawRequest?(options: IRequestOptions): IRawRequestFunction;\n}\n\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nexport class RequestService extends AbstractRequestService implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate proxyUrl?: string;\n\tprivate strictSSL: boolean | undefined;\n\tprivate authorization?: string;\n\tprivate shellEnvErrorLogged?: boolean;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(logService);\n\t\tthis.configure();\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('http')) {\n\t\t\t\tthis.configure();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate configure() {\n\t\tconst config = this.configurationService.getValue<IHTTPConfiguration | undefined>('http');\n\n\t\tthis.proxyUrl = config?.proxy;\n\t\tthis.strictSSL = !!config?.proxyStrictSSL;\n\t\tthis.authorization = config?.proxyAuthorization;\n\t}\n\n\tasync request(options: NodeRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tconst { proxyUrl, strictSSL } = this;\n\n\t\tlet shellEnv: typeof process.env | undefined = undefined;\n\t\ttry {\n\t\t\tshellEnv = await getResolvedShellEnv(this.configurationService, this.logService, this.environmentService.args, process.env);\n\t\t} catch (error) {\n\t\t\tif (!this.shellEnvErrorLogged) {\n\t\t\t\tthis.shellEnvErrorLogged = true;\n\t\t\t\tthis.logService.error(`resolving shell environment failed`, getErrorMessage(error));\n\t\t\t}\n\t\t}\n\n\t\tconst env = {\n\t\t\t...process.env,\n\t\t\t...shellEnv\n\t\t};\n\t\tconst agent = options.agent ? options.agent : await getProxyAgent(options.url || '', env, { proxyUrl, strictSSL });\n\n\t\toptions.agent = agent;\n\t\toptions.strictSSL = strictSSL;\n\n\t\tif (this.authorization) {\n\t\t\toptions.headers = {\n\t\t\t\t...(options.headers || {}),\n\t\t\t\t'Proxy-Authorization': this.authorization\n\t\t\t};\n\t\t}\n\n\t\treturn this.logAndRequest(options, () => nodeRequest(options, token));\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn undefined; // currently not implemented in node\n\t}\n\n\tasync lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined> {\n\t\treturn undefined; // currently not implemented in node\n\t}\n\n\tasync lookupKerberosAuthorization(urlStr: string): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst kerberos = await import('kerberos');\n\t\t\tconst url = new URL(urlStr);\n\t\t\tconst spn = this.configurationService.getValue<string>('http.proxyKerberosServicePrincipal')\n\t\t\t\t|| (process.platform === 'win32' ? `HTTP/${url.hostname}` : `HTTP@${url.hostname}`);\n\t\t\tthis.logService.debug('RequestService#lookupKerberosAuthorization Kerberos authentication lookup', `proxyURL:${url}`, `spn:${spn}`);\n\t\t\tconst client = await kerberos.initializeClient(spn);\n\t\t\tconst response = await client.step('');\n\t\t\treturn 'Negotiate ' + response;\n\t\t} catch (err) {\n\t\t\tthis.logService.debug('RequestService#lookupKerberosAuthorization Kerberos authentication failed', err);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tasync loadCertificates(): Promise<string[]> {\n\t\tconst proxyAgent = await import('@vscode/proxy-agent');\n\t\treturn proxyAgent.loadSystemCertificates({ log: this.logService });\n\t}\n}\n\nasync function getNodeRequest(options: IRequestOptions): Promise<IRawRequestFunction> {\n\tconst endpoint = parseUrl(options.url!);\n\tconst module = endpoint.protocol === 'https:' ? await import('https') : await import('http');\n\n\treturn module.request;\n}\n\nexport async function nodeRequest(options: NodeRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\treturn Promises.withAsyncBody<IRequestContext>(async (resolve, reject) => {\n\t\tconst endpoint = parseUrl(options.url!);\n\t\tconst rawRequest = options.getRawRequest\n\t\t\t? options.getRawRequest(options)\n\t\t\t: await getNodeRequest(options);\n\n\t\tconst opts: https.RequestOptions = {\n\t\t\thostname: endpoint.hostname,\n\t\t\tport: endpoint.port ? parseInt(endpoint.port) : (endpoint.protocol === 'https:' ? 443 : 80),\n\t\t\tprotocol: endpoint.protocol,\n\t\t\tpath: endpoint.path,\n\t\t\tmethod: options.type || 'GET',\n\t\t\theaders: options.headers,\n\t\t\tagent: options.agent,\n\t\t\trejectUnauthorized: isBoolean(options.strictSSL) ? options.strictSSL : true\n\t\t};\n\n\t\tif (options.user && options.password) {\n\t\t\topts.auth = options.user + ':' + options.password;\n\t\t}\n\n\t\tconst req = rawRequest(opts, (res: http.IncomingMessage) => {\n\t\t\tconst followRedirects: number = isNumber(options.followRedirects) ? options.followRedirects : 3;\n\t\t\tif (res.statusCode && res.statusCode >= 300 && res.statusCode < 400 && followRedirects > 0 && res.headers['location']) {\n\t\t\t\tnodeRequest({\n\t\t\t\t\t...options,\n\t\t\t\t\turl: res.headers['location'],\n\t\t\t\t\tfollowRedirects: followRedirects - 1\n\t\t\t\t}, token).then(resolve, reject);\n\t\t\t} else {\n\t\t\t\tlet stream: streams.ReadableStreamEvents<Uint8Array> = res;\n\n\t\t\t\t// Responses from Electron net module should be treated as response\n\t\t\t\t// from browser, which will apply gzip filter and decompress the response\n\t\t\t\t// using zlib before passing the result to us. Following step can be bypassed\n\t\t\t\t// in this case and proceed further.\n\t\t\t\t// Refs https://source.chromium.org/chromium/chromium/src/+/main:net/url_request/url_request_http_job.cc;l=1266-1318\n\t\t\t\tif (!options.isChromiumNetwork && res.headers['content-encoding'] === 'gzip') {\n\t\t\t\t\tstream = res.pipe(createGunzip());\n\t\t\t\t}\n\n\t\t\t\tresolve({ res, stream: streamToBufferReadableStream(stream) } satisfies IRequestContext);\n\t\t\t}\n\t\t});\n\n\t\treq.on('error', reject);\n\n\t\tif (options.timeout) {\n\t\t\treq.setTimeout(options.timeout);\n\t\t}\n\n\t\t// Chromium will abort the request if forbidden headers are set.\n\t\t// Ref https://source.chromium.org/chromium/chromium/src/+/main:services/network/public/cpp/header_util.cc;l=14-48;\n\t\t// for additional context.\n\t\tif (options.isChromiumNetwork) {\n\t\t\treq.removeHeader('Content-Length');\n\t\t}\n\n\t\tif (options.data) {\n\t\t\tif (typeof options.data === 'string') {\n\t\t\t\treq.write(options.data);\n\t\t\t}\n\t\t}\n\n\t\treq.end();\n\n\t\ttoken.onCancellationRequested(() => {\n\t\t\treq.abort();\n\n\t\t\treject(new CancellationError());\n\t\t});\n\t});\n}\n"],
  "mappings": "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",
  "names": []
}
