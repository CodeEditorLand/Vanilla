{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/request/node/proxy.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { parse as parseUrl, Url } from 'url';\nimport { isBoolean } from '../../../base/common/types.js';\n\nexport type Agent = any;\n\nfunction getSystemProxyURI(requestURL: Url, env: typeof process.env): string | null {\n\tif (requestURL.protocol === 'http:') {\n\t\treturn env.HTTP_PROXY || env.http_proxy || null;\n\t} else if (requestURL.protocol === 'https:') {\n\t\treturn env.HTTPS_PROXY || env.https_proxy || env.HTTP_PROXY || env.http_proxy || null;\n\t}\n\n\treturn null;\n}\n\nexport interface IOptions {\n\tproxyUrl?: string;\n\tstrictSSL?: boolean;\n}\n\nexport async function getProxyAgent(rawRequestURL: string, env: typeof process.env, options: IOptions = {}): Promise<Agent> {\n\tconst requestURL = parseUrl(rawRequestURL);\n\tconst proxyURL = options.proxyUrl || getSystemProxyURI(requestURL, env);\n\n\tif (!proxyURL) {\n\t\treturn null;\n\t}\n\n\tconst proxyEndpoint = parseUrl(proxyURL);\n\n\tif (!/^https?:$/.test(proxyEndpoint.protocol || '')) {\n\t\treturn null;\n\t}\n\n\tconst opts = {\n\t\thost: proxyEndpoint.hostname || '',\n\t\tport: (proxyEndpoint.port ? +proxyEndpoint.port : 0) || (proxyEndpoint.protocol === 'https' ? 443 : 80),\n\t\tauth: proxyEndpoint.auth,\n\t\trejectUnauthorized: isBoolean(options.strictSSL) ? options.strictSSL : true,\n\t};\n\n\tif (requestURL.protocol === 'http:') {\n\t\t// ESM-comment-begin\n\t\t// const mod = await import('http-proxy-agent');\n\t\t// ESM-comment-end\n\t\t// ESM-uncomment-begin\n\t\tconst { default: mod } = await import('http-proxy-agent');\n\t\t// ESM-uncomment-end\n\t\treturn new mod.HttpProxyAgent(proxyURL, opts);\n\t} else {\n\t\t// ESM-comment-begin\n\t\t// const mod = await import('https-proxy-agent');\n\t\t// ESM-comment-end\n\t\t// ESM-uncomment-begin\n\t\tconst { default: mod } = await import('https-proxy-agent');\n\t\t// ESM-uncomment-end\n\t\treturn new mod.HttpsProxyAgent(proxyURL, opts);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,UAAU,WAAW;AACvC,SAAS,iBAAiB;AAI1B,SAAS,kBAAkB,YAAiB,KAAwC;AACnF,MAAI,WAAW,aAAa,SAAS;AACpC,WAAO,IAAI,cAAc,IAAI,cAAc;AAAA,EAC5C,WAAW,WAAW,aAAa,UAAU;AAC5C,WAAO,IAAI,eAAe,IAAI,eAAe,IAAI,cAAc,IAAI,cAAc;AAAA,EAClF;AAEA,SAAO;AACR;AARS;AAeT,eAAsB,cAAc,eAAuB,KAAyB,UAAoB,CAAC,GAAmB;AAC3H,QAAM,aAAa,SAAS,aAAa;AACzC,QAAM,WAAW,QAAQ,YAAY,kBAAkB,YAAY,GAAG;AAEtE,MAAI,CAAC,UAAU;AACd,WAAO;AAAA,EACR;AAEA,QAAM,gBAAgB,SAAS,QAAQ;AAEvC,MAAI,CAAC,YAAY,KAAK,cAAc,YAAY,EAAE,GAAG;AACpD,WAAO;AAAA,EACR;AAEA,QAAM,OAAO;AAAA,IACZ,MAAM,cAAc,YAAY;AAAA,IAChC,OAAO,cAAc,OAAO,CAAC,cAAc,OAAO,OAAO,cAAc,aAAa,UAAU,MAAM;AAAA,IACpG,MAAM,cAAc;AAAA,IACpB,oBAAoB,UAAU,QAAQ,SAAS,IAAI,QAAQ,YAAY;AAAA,EACxE;AAEA,MAAI,WAAW,aAAa,SAAS;AAKpC,UAAM,EAAE,SAAS,IAAI,IAAI,MAAM,OAAO,kBAAkB;AAExD,WAAO,IAAI,IAAI,eAAe,UAAU,IAAI;AAAA,EAC7C,OAAO;AAKN,UAAM,EAAE,SAAS,IAAI,IAAI,MAAM,OAAO,mBAAmB;AAEzD,WAAO,IAAI,IAAI,gBAAgB,UAAU,IAAI;AAAA,EAC9C;AACD;AAtCsB;",
  "names": []
}
