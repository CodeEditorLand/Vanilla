import{Emitter as g}from"../../../base/common/event.js";import{Iterable as p}from"../../../base/common/iterator.js";import{toDisposable as l}from"../../../base/common/lifecycle.js";import{LinkedList as C}from"../../../base/common/linkedList.js";import{validateConstraints as I}from"../../../base/common/types.js";import{createDecorator as y}from"../../instantiation/common/instantiation.js";const f=y("commandService"),s=new class{_commands=new Map;_onDidRegisterCommand=new g;onDidRegisterCommand=this._onDidRegisterCommand.event;registerCommand(e,n){if(!e)throw new Error("invalid command");if(typeof e=="string"){if(!n)throw new Error("invalid command");return this.registerCommand({id:e,handler:n})}if(e.metadata&&Array.isArray(e.metadata.args)){const o=[];for(const r of e.metadata.args)o.push(r.constraint);const c=e.handler;e.handler=(r,...m)=>(I(m,o),c(r,...m))}const{id:t}=e;let a=this._commands.get(t);a||(a=new C,this._commands.set(t,a));const i=a.unshift(e),d=l(()=>{i(),this._commands.get(t)?.isEmpty()&&this._commands.delete(t)});return this._onDidRegisterCommand.fire(t),d}registerCommandAlias(e,n){return s.registerCommand(e,(t,...a)=>t.get(f).executeCommand(n,...a))}getCommand(e){const n=this._commands.get(e);if(!(!n||n.isEmpty()))return p.first(n)}getCommands(){const e=new Map;for(const n of this._commands.keys()){const t=this.getCommand(n);t&&e.set(n,t)}return e}};s.registerCommand("noop",()=>{});export{s as CommandsRegistry,f as ICommandService};
