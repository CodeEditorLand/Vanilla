{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/menubar/electron-main/menubarMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator, IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { ILifecycleMainService, LifecycleMainPhase } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { ICommonMenubarService, IMenubarData } from '../common/menubar.js';\nimport { Menubar } from './menubar.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\n\nexport const IMenubarMainService = createDecorator<IMenubarMainService>('menubarMainService');\n\nexport interface IMenubarMainService extends ICommonMenubarService {\n\treadonly _serviceBrand: undefined;\n}\n\nexport class MenubarMainService extends Disposable implements IMenubarMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly menubar = this.installMenuBarAfterWindowOpen();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate async installMenuBarAfterWindowOpen(): Promise<Menubar> {\n\t\tawait this.lifecycleMainService.when(LifecycleMainPhase.AfterWindowOpen);\n\n\t\treturn this._register(this.instantiationService.createInstance(Menubar));\n\t}\n\n\tasync updateMenubar(windowId: number, menus: IMenubarData): Promise<void> {\n\t\tthis.logService.trace('menubarService#updateMenubar', windowId);\n\n\t\tconst menubar = await this.menubar;\n\t\tmenubar.updateMenu(menus, windowId);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,iBAAiB,6BAA6B;AACvD,SAAS,uBAAuB,0BAA0B;AAC1D,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB,oBAAoB;AACpD,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAEpB,MAAM,sBAAsB,gBAAqC,oBAAoB;AAMrF,IAAM,qBAAN,cAAiC,WAA0C;AAAA,EAMjF,YACyC,sBACA,sBACV,YAC7B;AACD,UAAM;AAJkC;AACA;AACV;AAAA,EAG/B;AAAA,EA9BD,OAkBkF;AAAA;AAAA;AAAA,EAIhE,UAAU,KAAK,8BAA8B;AAAA,EAU9D,MAAc,gCAAkD;AAC/D,UAAM,KAAK,qBAAqB,KAAK,mBAAmB,eAAe;AAEvE,WAAO,KAAK,UAAU,KAAK,qBAAqB,eAAe,OAAO,CAAC;AAAA,EACxE;AAAA,EAEA,MAAM,cAAc,UAAkB,OAAoC;AACzE,SAAK,WAAW,MAAM,gCAAgC,QAAQ;AAE9D,UAAM,UAAU,MAAM,KAAK;AAC3B,YAAQ,WAAW,OAAO,QAAQ;AAAA,EACnC;AACD;AA1Ba,qBAAN;AAAA,EAOJ;AAAA,EACA;AAAA,EACA;AAAA,GATU;",
  "names": []
}
