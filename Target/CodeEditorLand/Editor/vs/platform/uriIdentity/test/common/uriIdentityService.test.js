import n from"assert";import{UriIdentityService as l}from"../../common/uriIdentityService.js";import{mock as p}from"../../../../base/test/common/mock.js";import{FileSystemProviderCapabilities as f}from"../../../files/common/files.js";import{URI as r}from"../../../../base/common/uri.js";import{Event as b}from"../../../../base/common/event.js";import{ensureNoDisposablesAreLeakedInTestSuite as g}from"../../../../base/test/common/utils.js";suite("URI Identity",function(){class c extends p(){constructor(o){super();this.data=o}onDidChangeFileSystemProviderCapabilities=b.None;onDidChangeFileSystemProviderRegistrations=b.None;hasProvider(o){return this.data.has(o.scheme)}hasCapability(o,i){return!!((this.data.get(o.scheme)??0)&i)}}let s;setup(function(){s=new l(new c(new Map([["bar",f.PathCaseSensitive],["foo",f.None]])))}),teardown(function(){s.dispose()}),g();function t(a,e,o=s){const i=o.asCanonicalUri(a);n.strictEqual(i.toString(),e.toString()),n.ok(o.extUri.isEqual(i,e))}test("extUri (isEqual)",function(){const a=r.parse("foo://bar/bang"),e=r.parse("foo://bar/BANG"),o=r.parse("bar://bar/bang"),i=r.parse("bar://bar/BANG");n.strictEqual(s.extUri.isEqual(a,e),!0),n.strictEqual(s.extUri.isEqual(e,a),!0),n.strictEqual(s.extUri.isEqual(o,i),!1),n.strictEqual(s.extUri.isEqual(i,o),!1)}),test("asCanonicalUri (casing)",function(){const a=r.parse("foo://bar/bang"),e=r.parse("foo://bar/BANG"),o=r.parse("bar://bar/bang"),i=r.parse("bar://bar/BANG");t(a,a),t(e,a),t(o,o),t(i,i)}),test("asCanonicalUri (normalization)",function(){const a=r.parse("foo://bar/bang");t(a,a),t(r.parse("foo://bar/./bang"),a),t(r.parse("foo://bar/./bang"),a),t(r.parse("foo://bar/./foo/../bang"),a)}),test("asCanonicalUri (keep fragement)",function(){const a=r.parse("foo://bar/bang");t(a,a),t(r.parse("foo://bar/./bang#frag"),a.with({fragment:"frag"})),t(r.parse("foo://bar/./bang#frag"),a.with({fragment:"frag"})),t(r.parse("foo://bar/./bang#frag"),a.with({fragment:"frag"})),t(r.parse("foo://bar/./foo/../bang#frag"),a.with({fragment:"frag"}));const e=r.parse("foo://bar/bazz#frag");t(e,e),t(r.parse("foo://bar/bazz"),e.with({fragment:""})),t(r.parse("foo://bar/BAZZ#DDD"),e.with({fragment:"DDD"}))}),test.skip("[perf] CPU pegged after some builds #194853",function(){for(let e=0;e<65636;e++){const o=r.parse(`foo://bar/${e}`),i=s.asCanonicalUri(o);n.ok(i)}})});
