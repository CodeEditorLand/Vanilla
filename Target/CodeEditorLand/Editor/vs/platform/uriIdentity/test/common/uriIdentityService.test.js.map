{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/uriIdentity/test/common/uriIdentityService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { UriIdentityService } from '../../common/uriIdentityService.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { IFileService, FileSystemProviderCapabilities } from '../../../files/common/files.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('URI Identity', function () {\n\n\tclass FakeFileService extends mock<IFileService>() {\n\n\t\toverride onDidChangeFileSystemProviderCapabilities = Event.None;\n\t\toverride onDidChangeFileSystemProviderRegistrations = Event.None;\n\n\t\tconstructor(readonly data: Map<string, FileSystemProviderCapabilities>) {\n\t\t\tsuper();\n\t\t}\n\t\toverride hasProvider(uri: URI) {\n\t\t\treturn this.data.has(uri.scheme);\n\t\t}\n\t\toverride hasCapability(uri: URI, flag: FileSystemProviderCapabilities): boolean {\n\t\t\tconst mask = this.data.get(uri.scheme) ?? 0;\n\t\t\treturn Boolean(mask & flag);\n\t\t}\n\t}\n\n\tlet _service: UriIdentityService;\n\n\tsetup(function () {\n\t\t_service = new UriIdentityService(new FakeFileService(new Map([\n\t\t\t['bar', FileSystemProviderCapabilities.PathCaseSensitive],\n\t\t\t['foo', FileSystemProviderCapabilities.None]\n\t\t])));\n\t});\n\n\tteardown(function () {\n\t\t_service.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertCanonical(input: URI, expected: URI, service: UriIdentityService = _service) {\n\t\tconst actual = service.asCanonicalUri(input);\n\t\tassert.strictEqual(actual.toString(), expected.toString());\n\t\tassert.ok(service.extUri.isEqual(actual, expected));\n\t}\n\n\ttest('extUri (isEqual)', function () {\n\t\tconst a = URI.parse('foo://bar/bang');\n\t\tconst a1 = URI.parse('foo://bar/BANG');\n\t\tconst b = URI.parse('bar://bar/bang');\n\t\tconst b1 = URI.parse('bar://bar/BANG');\n\n\t\tassert.strictEqual(_service.extUri.isEqual(a, a1), true);\n\t\tassert.strictEqual(_service.extUri.isEqual(a1, a), true);\n\n\t\tassert.strictEqual(_service.extUri.isEqual(b, b1), false);\n\t\tassert.strictEqual(_service.extUri.isEqual(b1, b), false);\n\t});\n\n\ttest('asCanonicalUri (casing)', function () {\n\n\t\tconst a = URI.parse('foo://bar/bang');\n\t\tconst a1 = URI.parse('foo://bar/BANG');\n\t\tconst b = URI.parse('bar://bar/bang');\n\t\tconst b1 = URI.parse('bar://bar/BANG');\n\n\t\tassertCanonical(a, a);\n\t\tassertCanonical(a1, a);\n\n\t\tassertCanonical(b, b);\n\t\tassertCanonical(b1, b1); // case sensitive\n\t});\n\n\ttest('asCanonicalUri (normalization)', function () {\n\t\tconst a = URI.parse('foo://bar/bang');\n\t\tassertCanonical(a, a);\n\t\tassertCanonical(URI.parse('foo://bar/./bang'), a);\n\t\tassertCanonical(URI.parse('foo://bar/./bang'), a);\n\t\tassertCanonical(URI.parse('foo://bar/./foo/../bang'), a);\n\t});\n\n\ttest('asCanonicalUri (keep fragement)', function () {\n\n\t\tconst a = URI.parse('foo://bar/bang');\n\n\t\tassertCanonical(a, a);\n\t\tassertCanonical(URI.parse('foo://bar/./bang#frag'), a.with({ fragment: 'frag' }));\n\t\tassertCanonical(URI.parse('foo://bar/./bang#frag'), a.with({ fragment: 'frag' }));\n\t\tassertCanonical(URI.parse('foo://bar/./bang#frag'), a.with({ fragment: 'frag' }));\n\t\tassertCanonical(URI.parse('foo://bar/./foo/../bang#frag'), a.with({ fragment: 'frag' }));\n\n\t\tconst b = URI.parse('foo://bar/bazz#frag');\n\t\tassertCanonical(b, b);\n\t\tassertCanonical(URI.parse('foo://bar/bazz'), b.with({ fragment: '' }));\n\t\tassertCanonical(URI.parse('foo://bar/BAZZ#DDD'), b.with({ fragment: 'DDD' })); // lower-case path, but fragment is kept\n\t});\n\n\ttest.skip('[perf] CPU pegged after some builds #194853', function () {\n\n\t\tconst n = 100 + (2 ** 16);\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst uri = URI.parse(`foo://bar/${i}`);\n\t\t\tconst uri2 = _service.asCanonicalUri(uri);\n\n\t\t\tassert.ok(uri2);\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
