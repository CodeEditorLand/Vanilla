{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensions/common/extensionHostStarter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport const IExtensionHostStarter = createDecorator<IExtensionHostStarter>(\n\t\"extensionHostStarter\",\n);\n\nexport const ipcExtensionHostStarterChannelName = \"extensionHostStarter\";\n\nexport interface IExtensionHostProcessOptions {\n\tresponseWindowId: number;\n\tresponseChannel: string;\n\tresponseNonce: string;\n\tenv: { [key: string]: string | undefined };\n\tdetached: boolean;\n\texecArgv: string[] | undefined;\n\tsilent: boolean;\n}\n\nexport interface IExtensionHostStarter {\n\treadonly _serviceBrand: undefined;\n\n\tonDynamicStdout(id: string): Event<string>;\n\tonDynamicStderr(id: string): Event<string>;\n\tonDynamicMessage(id: string): Event<any>;\n\tonDynamicExit(id: string): Event<{ code: number; signal: string }>;\n\n\tcreateExtensionHost(): Promise<{ id: string }>;\n\tstart(\n\t\tid: string,\n\t\topts: IExtensionHostProcessOptions,\n\t): Promise<{ pid: number | undefined }>;\n\tenableInspectPort(id: string): Promise<boolean>;\n\tkill(id: string): Promise<void>;\n}\n"],
  "mappings": "AAMA,SAAS,uBAAuB;AAEzB,MAAM,wBAAwB;AAAA,EACpC;AACD;AAEO,MAAM,qCAAqC;",
  "names": []
}
