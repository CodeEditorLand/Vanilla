{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensions/common/extensionValidator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isEqualOrParent, joinPath } from \"../../../base/common/resources.js\";\nimport * as semver from \"../../../base/common/semver/semver.js\";\nimport Severity from \"../../../base/common/severity.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport * as nls from \"../../../nls.js\";\nimport { type IExtensionManifest, parseApiProposals } from \"./extensions.js\";\nimport { allApiProposals } from \"./extensionsApiProposals.js\";\n\nexport interface IParsedVersion {\n\thasCaret: boolean;\n\thasGreaterEquals: boolean;\n\tmajorBase: number;\n\tmajorMustEqual: boolean;\n\tminorBase: number;\n\tminorMustEqual: boolean;\n\tpatchBase: number;\n\tpatchMustEqual: boolean;\n\tpreRelease: string | null;\n}\n\nexport interface INormalizedVersion {\n\tmajorBase: number;\n\tmajorMustEqual: boolean;\n\tminorBase: number;\n\tminorMustEqual: boolean;\n\tpatchBase: number;\n\tpatchMustEqual: boolean;\n\tnotBefore: number /* milliseconds timestamp, or 0 */;\n\tisMinimum: boolean;\n}\n\nconst VERSION_REGEXP = /^(\\^|>=)?((\\d+)|x)\\.((\\d+)|x)\\.((\\d+)|x)(-.*)?$/;\nconst NOT_BEFORE_REGEXP = /^-(\\d{4})(\\d{2})(\\d{2})$/;\n\nexport function isValidVersionStr(version: string): boolean {\n\tversion = version.trim();\n\treturn version === \"*\" || VERSION_REGEXP.test(version);\n}\n\nexport function parseVersion(version: string): IParsedVersion | null {\n\tif (!isValidVersionStr(version)) {\n\t\treturn null;\n\t}\n\n\tversion = version.trim();\n\n\tif (version === \"*\") {\n\t\treturn {\n\t\t\thasCaret: false,\n\t\t\thasGreaterEquals: false,\n\t\t\tmajorBase: 0,\n\t\t\tmajorMustEqual: false,\n\t\t\tminorBase: 0,\n\t\t\tminorMustEqual: false,\n\t\t\tpatchBase: 0,\n\t\t\tpatchMustEqual: false,\n\t\t\tpreRelease: null,\n\t\t};\n\t}\n\n\tconst m = version.match(VERSION_REGEXP);\n\tif (!m) {\n\t\treturn null;\n\t}\n\treturn {\n\t\thasCaret: m[1] === \"^\",\n\t\thasGreaterEquals: m[1] === \">=\",\n\t\tmajorBase: m[2] === \"x\" ? 0 : Number.parseInt(m[2], 10),\n\t\tmajorMustEqual: m[2] === \"x\" ? false : true,\n\t\tminorBase: m[4] === \"x\" ? 0 : Number.parseInt(m[4], 10),\n\t\tminorMustEqual: m[4] === \"x\" ? false : true,\n\t\tpatchBase: m[6] === \"x\" ? 0 : Number.parseInt(m[6], 10),\n\t\tpatchMustEqual: m[6] === \"x\" ? false : true,\n\t\tpreRelease: m[8] || null,\n\t};\n}\n\nexport function normalizeVersion(\n\tversion: IParsedVersion | null,\n): INormalizedVersion | null {\n\tif (!version) {\n\t\treturn null;\n\t}\n\n\tconst majorBase = version.majorBase;\n\tconst majorMustEqual = version.majorMustEqual;\n\tconst minorBase = version.minorBase;\n\tlet minorMustEqual = version.minorMustEqual;\n\tconst patchBase = version.patchBase;\n\tlet patchMustEqual = version.patchMustEqual;\n\n\tif (version.hasCaret) {\n\t\tif (majorBase === 0) {\n\t\t\tpatchMustEqual = false;\n\t\t} else {\n\t\t\tminorMustEqual = false;\n\t\t\tpatchMustEqual = false;\n\t\t}\n\t}\n\n\tlet notBefore = 0;\n\tif (version.preRelease) {\n\t\tconst match = NOT_BEFORE_REGEXP.exec(version.preRelease);\n\t\tif (match) {\n\t\t\tconst [, year, month, day] = match;\n\t\t\tnotBefore = Date.UTC(Number(year), Number(month) - 1, Number(day));\n\t\t}\n\t}\n\n\treturn {\n\t\tmajorBase: majorBase,\n\t\tmajorMustEqual: majorMustEqual,\n\t\tminorBase: minorBase,\n\t\tminorMustEqual: minorMustEqual,\n\t\tpatchBase: patchBase,\n\t\tpatchMustEqual: patchMustEqual,\n\t\tisMinimum: version.hasGreaterEquals,\n\t\tnotBefore,\n\t};\n}\n\nexport function isValidVersion(\n\t_inputVersion: string | INormalizedVersion,\n\t_inputDate: ProductDate,\n\t_desiredVersion: string | INormalizedVersion,\n): boolean {\n\tlet version: INormalizedVersion | null;\n\tif (typeof _inputVersion === \"string\") {\n\t\tversion = normalizeVersion(parseVersion(_inputVersion));\n\t} else {\n\t\tversion = _inputVersion;\n\t}\n\n\tlet productTs: number | undefined;\n\tif (_inputDate instanceof Date) {\n\t\tproductTs = _inputDate.getTime();\n\t} else if (typeof _inputDate === \"string\") {\n\t\tproductTs = new Date(_inputDate).getTime();\n\t}\n\n\tlet desiredVersion: INormalizedVersion | null;\n\tif (typeof _desiredVersion === \"string\") {\n\t\tdesiredVersion = normalizeVersion(parseVersion(_desiredVersion));\n\t} else {\n\t\tdesiredVersion = _desiredVersion;\n\t}\n\n\tif (!version || !desiredVersion) {\n\t\treturn false;\n\t}\n\n\tconst majorBase = version.majorBase;\n\tconst minorBase = version.minorBase;\n\tconst patchBase = version.patchBase;\n\n\tlet desiredMajorBase = desiredVersion.majorBase;\n\tlet desiredMinorBase = desiredVersion.minorBase;\n\tlet desiredPatchBase = desiredVersion.patchBase;\n\tconst desiredNotBefore = desiredVersion.notBefore;\n\n\tlet majorMustEqual = desiredVersion.majorMustEqual;\n\tlet minorMustEqual = desiredVersion.minorMustEqual;\n\tlet patchMustEqual = desiredVersion.patchMustEqual;\n\n\tif (desiredVersion.isMinimum) {\n\t\tif (majorBase > desiredMajorBase) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (majorBase < desiredMajorBase) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (minorBase > desiredMinorBase) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (minorBase < desiredMinorBase) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (productTs && productTs < desiredNotBefore) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn patchBase >= desiredPatchBase;\n\t}\n\n\t// Anything < 1.0.0 is compatible with >= 1.0.0, except exact matches\n\tif (\n\t\tmajorBase === 1 &&\n\t\tdesiredMajorBase === 0 &&\n\t\t(!majorMustEqual || !minorMustEqual || !patchMustEqual)\n\t) {\n\t\tdesiredMajorBase = 1;\n\t\tdesiredMinorBase = 0;\n\t\tdesiredPatchBase = 0;\n\t\tmajorMustEqual = true;\n\t\tminorMustEqual = false;\n\t\tpatchMustEqual = false;\n\t}\n\n\tif (majorBase < desiredMajorBase) {\n\t\t// smaller major version\n\t\treturn false;\n\t}\n\n\tif (majorBase > desiredMajorBase) {\n\t\t// higher major version\n\t\treturn !majorMustEqual;\n\t}\n\n\t// at this point, majorBase are equal\n\n\tif (minorBase < desiredMinorBase) {\n\t\t// smaller minor version\n\t\treturn false;\n\t}\n\n\tif (minorBase > desiredMinorBase) {\n\t\t// higher minor version\n\t\treturn !minorMustEqual;\n\t}\n\n\t// at this point, minorBase are equal\n\n\tif (patchBase < desiredPatchBase) {\n\t\t// smaller patch version\n\t\treturn false;\n\t}\n\n\tif (patchBase > desiredPatchBase) {\n\t\t// higher patch version\n\t\treturn !patchMustEqual;\n\t}\n\n\t// at this point, patchBase are equal\n\n\tif (productTs && productTs < desiredNotBefore) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\ntype ProductDate = string | Date | undefined;\n\nexport function validateExtensionManifest(\n\tproductVersion: string,\n\tproductDate: ProductDate,\n\textensionLocation: URI,\n\textensionManifest: IExtensionManifest,\n\textensionIsBuiltin: boolean,\n\tvalidateApiVersion: boolean,\n): readonly [Severity, string][] {\n\tconst validations: [Severity, string][] = [];\n\tif (\n\t\ttypeof extensionManifest.publisher !== \"undefined\" &&\n\t\ttypeof extensionManifest.publisher !== \"string\"\n\t) {\n\t\tvalidations.push([\n\t\t\tSeverity.Error,\n\t\t\tnls.localize(\n\t\t\t\t\"extensionDescription.publisher\",\n\t\t\t\t\"property publisher must be of type `string`.\",\n\t\t\t),\n\t\t]);\n\t\treturn validations;\n\t}\n\tif (typeof extensionManifest.name !== \"string\") {\n\t\tvalidations.push([\n\t\t\tSeverity.Error,\n\t\t\tnls.localize(\n\t\t\t\t\"extensionDescription.name\",\n\t\t\t\t\"property `{0}` is mandatory and must be of type `string`\",\n\t\t\t\t\"name\",\n\t\t\t),\n\t\t]);\n\t\treturn validations;\n\t}\n\tif (typeof extensionManifest.version !== \"string\") {\n\t\tvalidations.push([\n\t\t\tSeverity.Error,\n\t\t\tnls.localize(\n\t\t\t\t\"extensionDescription.version\",\n\t\t\t\t\"property `{0}` is mandatory and must be of type `string`\",\n\t\t\t\t\"version\",\n\t\t\t),\n\t\t]);\n\t\treturn validations;\n\t}\n\tif (!extensionManifest.engines) {\n\t\tvalidations.push([\n\t\t\tSeverity.Error,\n\t\t\tnls.localize(\n\t\t\t\t\"extensionDescription.engines\",\n\t\t\t\t\"property `{0}` is mandatory and must be of type `object`\",\n\t\t\t\t\"engines\",\n\t\t\t),\n\t\t]);\n\t\treturn validations;\n\t}\n\tif (typeof extensionManifest.engines.vscode !== \"string\") {\n\t\tvalidations.push([\n\t\t\tSeverity.Error,\n\t\t\tnls.localize(\n\t\t\t\t\"extensionDescription.engines.vscode\",\n\t\t\t\t\"property `{0}` is mandatory and must be of type `string`\",\n\t\t\t\t\"engines.vscode\",\n\t\t\t),\n\t\t]);\n\t\treturn validations;\n\t}\n\tif (typeof extensionManifest.extensionDependencies !== \"undefined\") {\n\t\tif (!isStringArray(extensionManifest.extensionDependencies)) {\n\t\t\tvalidations.push([\n\t\t\t\tSeverity.Error,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"extensionDescription.extensionDependencies\",\n\t\t\t\t\t\"property `{0}` can be omitted or must be of type `string[]`\",\n\t\t\t\t\t\"extensionDependencies\",\n\t\t\t\t),\n\t\t\t]);\n\t\t\treturn validations;\n\t\t}\n\t}\n\tif (typeof extensionManifest.activationEvents !== \"undefined\") {\n\t\tif (!isStringArray(extensionManifest.activationEvents)) {\n\t\t\tvalidations.push([\n\t\t\t\tSeverity.Error,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"extensionDescription.activationEvents1\",\n\t\t\t\t\t\"property `{0}` can be omitted or must be of type `string[]`\",\n\t\t\t\t\t\"activationEvents\",\n\t\t\t\t),\n\t\t\t]);\n\t\t\treturn validations;\n\t\t}\n\t\tif (\n\t\t\ttypeof extensionManifest.main === \"undefined\" &&\n\t\t\ttypeof extensionManifest.browser === \"undefined\"\n\t\t) {\n\t\t\tvalidations.push([\n\t\t\t\tSeverity.Error,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"extensionDescription.activationEvents2\",\n\t\t\t\t\t\"property `{0}` should be omitted if the extension doesn't have a `{1}` or `{2}` property.\",\n\t\t\t\t\t\"activationEvents\",\n\t\t\t\t\t\"main\",\n\t\t\t\t\t\"browser\",\n\t\t\t\t),\n\t\t\t]);\n\t\t\treturn validations;\n\t\t}\n\t}\n\tif (typeof extensionManifest.extensionKind !== \"undefined\") {\n\t\tif (typeof extensionManifest.main === \"undefined\") {\n\t\t\tvalidations.push([\n\t\t\t\tSeverity.Warning,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"extensionDescription.extensionKind\",\n\t\t\t\t\t\"property `{0}` can be defined only if property `main` is also defined.\",\n\t\t\t\t\t\"extensionKind\",\n\t\t\t\t),\n\t\t\t]);\n\t\t\t// not a failure case\n\t\t}\n\t}\n\tif (typeof extensionManifest.main !== \"undefined\") {\n\t\tif (typeof extensionManifest.main !== \"string\") {\n\t\t\tvalidations.push([\n\t\t\t\tSeverity.Error,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"extensionDescription.main1\",\n\t\t\t\t\t\"property `{0}` can be omitted or must be of type `string`\",\n\t\t\t\t\t\"main\",\n\t\t\t\t),\n\t\t\t]);\n\t\t\treturn validations;\n\t\t} else {\n\t\t\tconst mainLocation = joinPath(\n\t\t\t\textensionLocation,\n\t\t\t\textensionManifest.main,\n\t\t\t);\n\t\t\tif (!isEqualOrParent(mainLocation, extensionLocation)) {\n\t\t\t\tvalidations.push([\n\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"extensionDescription.main2\",\n\t\t\t\t\t\t\"Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.\",\n\t\t\t\t\t\tmainLocation.path,\n\t\t\t\t\t\textensionLocation.path,\n\t\t\t\t\t),\n\t\t\t\t]);\n\t\t\t\t// not a failure case\n\t\t\t}\n\t\t}\n\t}\n\tif (typeof extensionManifest.browser !== \"undefined\") {\n\t\tif (typeof extensionManifest.browser !== \"string\") {\n\t\t\tvalidations.push([\n\t\t\t\tSeverity.Error,\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"extensionDescription.browser1\",\n\t\t\t\t\t\"property `{0}` can be omitted or must be of type `string`\",\n\t\t\t\t\t\"browser\",\n\t\t\t\t),\n\t\t\t]);\n\t\t\treturn validations;\n\t\t} else {\n\t\t\tconst browserLocation = joinPath(\n\t\t\t\textensionLocation,\n\t\t\t\textensionManifest.browser,\n\t\t\t);\n\t\t\tif (!isEqualOrParent(browserLocation, extensionLocation)) {\n\t\t\t\tvalidations.push([\n\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"extensionDescription.browser2\",\n\t\t\t\t\t\t\"Expected `browser` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.\",\n\t\t\t\t\t\tbrowserLocation.path,\n\t\t\t\t\t\textensionLocation.path,\n\t\t\t\t\t),\n\t\t\t\t]);\n\t\t\t\t// not a failure case\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!semver.valid(extensionManifest.version)) {\n\t\tvalidations.push([\n\t\t\tSeverity.Error,\n\t\t\tnls.localize(\n\t\t\t\t\"notSemver\",\n\t\t\t\t\"Extension version is not semver compatible.\",\n\t\t\t),\n\t\t]);\n\t\treturn validations;\n\t}\n\n\tconst notices: string[] = [];\n\tconst validExtensionVersion = isValidExtensionVersion(\n\t\tproductVersion,\n\t\tproductDate,\n\t\textensionManifest,\n\t\textensionIsBuiltin,\n\t\tnotices,\n\t);\n\tif (!validExtensionVersion) {\n\t\tfor (const notice of notices) {\n\t\t\tvalidations.push([Severity.Error, notice]);\n\t\t}\n\t}\n\n\tif (validateApiVersion && extensionManifest.enabledApiProposals?.length) {\n\t\tconst incompatibleNotices: string[] = [];\n\t\tif (\n\t\t\t!areApiProposalsCompatible(\n\t\t\t\t[...extensionManifest.enabledApiProposals],\n\t\t\t\tincompatibleNotices,\n\t\t\t)\n\t\t) {\n\t\t\tfor (const notice of incompatibleNotices) {\n\t\t\t\tvalidations.push([Severity.Error, notice]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn validations;\n}\n\nexport function isValidExtensionVersion(\n\tproductVersion: string,\n\tproductDate: ProductDate,\n\textensionManifest: IExtensionManifest,\n\textensionIsBuiltin: boolean,\n\tnotices: string[],\n): boolean {\n\tif (\n\t\textensionIsBuiltin ||\n\t\t(typeof extensionManifest.main === \"undefined\" &&\n\t\t\ttypeof extensionManifest.browser === \"undefined\")\n\t) {\n\t\t// No version check for builtin or declarative extensions\n\t\treturn true;\n\t}\n\n\treturn isVersionValid(\n\t\tproductVersion,\n\t\tproductDate,\n\t\textensionManifest.engines.vscode,\n\t\tnotices,\n\t);\n}\n\nexport function isEngineValid(\n\tengine: string,\n\tversion: string,\n\tdate: ProductDate,\n): boolean {\n\t// TODO@joao: discuss with alex '*' doesn't seem to be a valid engine version\n\treturn engine === \"*\" || isVersionValid(version, date, engine);\n}\n\nexport function areApiProposalsCompatible(apiProposals: string[]): boolean;\nexport function areApiProposalsCompatible(\n\tapiProposals: string[],\n\tnotices: string[],\n): boolean;\nexport function areApiProposalsCompatible(\n\tapiProposals: string[],\n\tproductApiProposals: Readonly<{\n\t\t[proposalName: string]: Readonly<{\n\t\t\tproposal: string;\n\t\t\tversion?: number;\n\t\t}>;\n\t}>,\n): boolean;\nexport function areApiProposalsCompatible(\n\tapiProposals: string[],\n\targ1?: any,\n): boolean {\n\tif (apiProposals.length === 0) {\n\t\treturn true;\n\t}\n\tconst notices: string[] | undefined = Array.isArray(arg1)\n\t\t? arg1\n\t\t: undefined;\n\tconst productApiProposals: Readonly<{\n\t\t[proposalName: string]: Readonly<{\n\t\t\tproposal: string;\n\t\t\tversion?: number;\n\t\t}>;\n\t}> = (notices ? undefined : arg1) ?? allApiProposals;\n\tconst incompatibleNotices: string[] = [];\n\tconst parsedProposals = parseApiProposals(apiProposals);\n\tfor (const { proposalName, version } of parsedProposals) {\n\t\tconst existingProposal = productApiProposals[proposalName];\n\t\tif (!existingProposal) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (!version) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (existingProposal.version !== version) {\n\t\t\tincompatibleNotices.push(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"apiProposalMismatch\",\n\t\t\t\t\t\"This extension is using the API proposal '{0}' that is not compatible with the current version of VS Code.\",\n\t\t\t\t\tproposalName,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\tnotices?.push(...incompatibleNotices);\n\treturn incompatibleNotices.length === 0;\n}\n\nfunction isVersionValid(\n\tcurrentVersion: string,\n\tdate: ProductDate,\n\trequestedVersion: string,\n\tnotices: string[] = [],\n): boolean {\n\tconst desiredVersion = normalizeVersion(parseVersion(requestedVersion));\n\tif (!desiredVersion) {\n\t\tnotices.push(\n\t\t\tnls.localize(\n\t\t\t\t\"versionSyntax\",\n\t\t\t\t\"Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.\",\n\t\t\t\trequestedVersion,\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\n\t// enforce that a breaking API version is specified.\n\t// for 0.X.Y, that means up to 0.X must be specified\n\t// otherwise for Z.X.Y, that means Z must be specified\n\tif (desiredVersion.majorBase === 0) {\n\t\t// force that major and minor must be specific\n\t\tif (!desiredVersion.majorMustEqual || !desiredVersion.minorMustEqual) {\n\t\t\tnotices.push(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"versionSpecificity1\",\n\t\t\t\t\t\"Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.\",\n\t\t\t\t\trequestedVersion,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\t// force that major must be specific\n\t\tif (!desiredVersion.majorMustEqual) {\n\t\t\tnotices.push(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"versionSpecificity2\",\n\t\t\t\t\t\"Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.\",\n\t\t\t\t\trequestedVersion,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (!isValidVersion(currentVersion, date, desiredVersion)) {\n\t\tnotices.push(\n\t\t\tnls.localize(\n\t\t\t\t\"versionMismatch\",\n\t\t\t\t\"Extension is not compatible with Code {0}. Extension requires: {1}.\",\n\t\t\t\tcurrentVersion,\n\t\t\t\trequestedVersion,\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction isStringArray(arr: string[]): boolean {\n\tif (!Array.isArray(arr)) {\n\t\treturn false;\n\t}\n\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\tif (typeof arr[i] !== \"string\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"],
  "mappings": "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",
  "names": []
}
