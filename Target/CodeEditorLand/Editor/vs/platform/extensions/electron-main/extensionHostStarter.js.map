{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/extensions/electron-main/extensionHostStarter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from '../../../base/common/async.js';\nimport { canceled } from '../../../base/common/errors.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { IExtensionHostProcessOptions, IExtensionHostStarter } from '../common/extensionHostStarter.js';\nimport { ILifecycleMainService } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { WindowUtilityProcess } from '../../utilityProcess/electron-main/utilityProcess.js';\nimport { IWindowsMainService } from '../../windows/electron-main/windows.js';\n\nexport class ExtensionHostStarter extends Disposable implements IDisposable, IExtensionHostStarter {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate static _lastId: number = 0;\n\n\tprivate readonly _extHosts = new Map<string, WindowUtilityProcess>();\n\tprivate _shutdown = false;\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILifecycleMainService private readonly _lifecycleMainService: ILifecycleMainService,\n\t\t@IWindowsMainService private readonly _windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\t// On shutdown: gracefully await extension host shutdowns\n\t\tthis._register(this._lifecycleMainService.onWillShutdown(e => {\n\t\t\tthis._shutdown = true;\n\t\t\te.join('extHostStarter', this._waitForAllExit(6000));\n\t\t}));\n\t}\n\n\toverride dispose(): void {\n\t\t// Intentionally not killing the extension host processes\n\t\tsuper.dispose();\n\t}\n\n\tprivate _getExtHost(id: string): WindowUtilityProcess {\n\t\tconst extHostProcess = this._extHosts.get(id);\n\t\tif (!extHostProcess) {\n\t\t\tthrow new Error(`Unknown extension host!`);\n\t\t}\n\t\treturn extHostProcess;\n\t}\n\n\tonDynamicStdout(id: string): Event<string> {\n\t\treturn this._getExtHost(id).onStdout;\n\t}\n\n\tonDynamicStderr(id: string): Event<string> {\n\t\treturn this._getExtHost(id).onStderr;\n\t}\n\n\tonDynamicMessage(id: string): Event<any> {\n\t\treturn this._getExtHost(id).onMessage;\n\t}\n\n\tonDynamicExit(id: string): Event<{ code: number; signal: string }> {\n\t\treturn this._getExtHost(id).onExit;\n\t}\n\n\tasync createExtensionHost(): Promise<{ id: string }> {\n\t\tif (this._shutdown) {\n\t\t\tthrow canceled();\n\t\t}\n\t\tconst id = String(++ExtensionHostStarter._lastId);\n\t\tconst extHost = new WindowUtilityProcess(this._logService, this._windowsMainService, this._telemetryService, this._lifecycleMainService);\n\t\tthis._extHosts.set(id, extHost);\n\t\tconst disposable = extHost.onExit(({ pid, code, signal }) => {\n\t\t\tdisposable.dispose();\n\t\t\tthis._logService.info(`Extension host with pid ${pid} exited with code: ${code}, signal: ${signal}.`);\n\t\t\tsetTimeout(() => {\n\t\t\t\textHost.dispose();\n\t\t\t\tthis._extHosts.delete(id);\n\t\t\t});\n\n\t\t\t// See https://github.com/microsoft/vscode/issues/194477\n\t\t\t// We have observed that sometimes the process sends an exit\n\t\t\t// event, but does not really exit and is stuck in an endless\n\t\t\t// loop. In these cases we kill the process forcefully after\n\t\t\t// a certain timeout.\n\t\t\tsetTimeout(() => {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.kill(pid, 0); // will throw if the process doesn't exist anymore.\n\t\t\t\t\tthis._logService.error(`Extension host with pid ${pid} still exists, forcefully killing it...`);\n\t\t\t\t\tprocess.kill(pid);\n\t\t\t\t} catch (er) {\n\t\t\t\t\t// ignore, as the process is already gone\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t});\n\t\treturn { id };\n\t}\n\n\tasync start(id: string, opts: IExtensionHostProcessOptions): Promise<{ pid: number | undefined }> {\n\t\tif (this._shutdown) {\n\t\t\tthrow canceled();\n\t\t}\n\t\tconst extHost = this._getExtHost(id);\n\t\textHost.start({\n\t\t\t...opts,\n\t\t\ttype: 'extensionHost',\n\t\t\tentryPoint: 'vs/workbench/api/node/extensionHostProcess',\n\t\t\targs: ['--skipWorkspaceStorageLock'],\n\t\t\texecArgv: opts.execArgv,\n\t\t\tallowLoadingUnsignedLibraries: true,\n\t\t\tforceAllocationsToV8Sandbox: true,\n\t\t\trespondToAuthRequestsFromMainProcess: true,\n\t\t\tcorrelationId: id\n\t\t});\n\t\tconst pid = await Event.toPromise(extHost.onSpawn);\n\t\treturn { pid };\n\t}\n\n\tasync enableInspectPort(id: string): Promise<boolean> {\n\t\tif (this._shutdown) {\n\t\t\tthrow canceled();\n\t\t}\n\t\tconst extHostProcess = this._extHosts.get(id);\n\t\tif (!extHostProcess) {\n\t\t\treturn false;\n\t\t}\n\t\treturn extHostProcess.enableInspectPort();\n\t}\n\n\tasync kill(id: string): Promise<void> {\n\t\tif (this._shutdown) {\n\t\t\tthrow canceled();\n\t\t}\n\t\tconst extHostProcess = this._extHosts.get(id);\n\t\tif (!extHostProcess) {\n\t\t\t// already gone!\n\t\t\treturn;\n\t\t}\n\t\textHostProcess.kill();\n\t}\n\n\tasync _killAllNow(): Promise<void> {\n\t\tfor (const [, extHost] of this._extHosts) {\n\t\t\textHost.kill();\n\t\t}\n\t}\n\n\tasync _waitForAllExit(maxWaitTimeMs: number): Promise<void> {\n\t\tconst exitPromises: Promise<void>[] = [];\n\t\tfor (const [, extHost] of this._extHosts) {\n\t\t\texitPromises.push(extHost.waitForExit(maxWaitTimeMs));\n\t\t}\n\t\treturn Promises.settled(exitPromises).then(() => { });\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
