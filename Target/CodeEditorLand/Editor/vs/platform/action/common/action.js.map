{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/action/common/action.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriDto } from '../../../base/common/uri.js';\nimport { ContextKeyExpression } from '../../contextkey/common/contextkey.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { Categories } from './actionCommonCategories.js';\nimport { ICommandMetadata } from '../../commands/common/commands.js';\n\nexport interface ILocalizedString {\n\n\t/**\n\t * The localized value of the string.\n\t */\n\tvalue: string;\n\n\t/**\n\t * The original (non localized value of the string)\n\t */\n\toriginal: string;\n}\n\nexport function isLocalizedString(thing: any): thing is ILocalizedString {\n\treturn thing\n\t\t&& typeof thing === 'object'\n\t\t&& typeof thing.original === 'string'\n\t\t&& typeof thing.value === 'string';\n}\n\nexport interface ICommandActionTitle extends ILocalizedString {\n\n\t/**\n\t * The title with a mnemonic designation. && precedes the mnemonic.\n\t */\n\tmnemonicTitle?: string;\n}\n\nexport type Icon = { dark?: URI; light?: URI } | ThemeIcon;\n\nexport interface ICommandActionToggleInfo {\n\n\t/**\n\t * The condition that marks the action as toggled.\n\t */\n\tcondition: ContextKeyExpression;\n\n\ticon?: Icon;\n\n\ttooltip?: string;\n\n\t/**\n\t * The title that goes well with a a check mark, e.g \"(check) Line Numbers\" vs \"Toggle Line Numbers\"\n\t */\n\ttitle?: string;\n\n\t/**\n\t * Like title but with a mnemonic designation.\n\t */\n\tmnemonicTitle?: string;\n}\n\nexport function isICommandActionToggleInfo(thing: ContextKeyExpression | ICommandActionToggleInfo | undefined): thing is ICommandActionToggleInfo {\n\treturn thing ? (<ICommandActionToggleInfo>thing).condition !== undefined : false;\n}\n\nexport interface ICommandActionSource {\n\treadonly id: string;\n\treadonly title: string;\n}\n\nexport interface ICommandAction {\n\tid: string;\n\ttitle: string | ICommandActionTitle;\n\tshortTitle?: string | ICommandActionTitle;\n\t/**\n\t * Metadata about this command, used for:\n\t * - API commands\n\t * - when showing keybindings that have no other UX\n\t * - when searching for commands in the Command Palette\n\t */\n\tmetadata?: ICommandMetadata;\n\tcategory?: keyof typeof Categories | ILocalizedString | string;\n\ttooltip?: string | ILocalizedString;\n\ticon?: Icon;\n\tsource?: ICommandActionSource;\n\t/**\n\t * Precondition controls enablement (for example for a menu item, show\n\t * it in grey or for a command, do not allow to invoke it)\n\t */\n\tprecondition?: ContextKeyExpression;\n\n\t/**\n\t * The action is a toggle action. Define the context key expression that reflects its toggle-state\n\t * or define toggle-info including an icon and a title that goes well with a checkmark.\n\t */\n\ttoggled?: ContextKeyExpression | ICommandActionToggleInfo;\n}\n\nexport type ISerializableCommandAction = UriDto<ICommandAction>;\n"],
  "mappings": ";;AAKA,SAAS,KAAK,cAAc;AAC5B,SAAS,4BAA4B;AACrC,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AAe1B,SAAS,kBAAkB,OAAuC;AACxE,SAAO,SACH,OAAO,UAAU,YACjB,OAAO,MAAM,aAAa,YAC1B,OAAO,MAAM,UAAU;AAC5B;AALgB;AAuCT,SAAS,2BAA2B,OAAuG;AACjJ,SAAO,QAAmC,MAAO,cAAc,SAAY;AAC5E;AAFgB;",
  "names": []
}
