{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/ipc/electron-sandbox/mainProcessService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { IChannel, IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { Client as IPCElectronClient } from '../../../base/parts/ipc/electron-sandbox/ipc.electron.js';\nimport { IMainProcessService } from '../common/mainProcessService.js';\n\n/**\n * An implementation of `IMainProcessService` that leverages Electron's IPC.\n */\nexport class ElectronIPCMainProcessService extends Disposable implements IMainProcessService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate mainProcessConnection: IPCElectronClient;\n\n\tconstructor(\n\t\twindowId: number\n\t) {\n\t\tsuper();\n\n\t\tthis.mainProcessConnection = this._register(new IPCElectronClient(`window:${windowId}`));\n\t}\n\n\tgetChannel(channelName: string): IChannel {\n\t\treturn this.mainProcessConnection.getChannel(channelName);\n\t}\n\n\tregisterChannel(channelName: string, channel: IServerChannel<string>): void {\n\t\tthis.mainProcessConnection.registerChannel(channelName, channel);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,UAAU,sBAAsB;AACzC,SAAS,UAAU,yBAAyB;AAC5C,SAAS,2BAA2B;AAK7B,MAAM,sCAAsC,WAA0C;AAAA,EAb7F,OAa6F;AAAA;AAAA;AAAA,EAIpF;AAAA,EAER,YACC,UACC;AACD,UAAM;AAEN,SAAK,wBAAwB,KAAK,UAAU,IAAI,kBAAkB,UAAU,QAAQ,EAAE,CAAC;AAAA,EACxF;AAAA,EAEA,WAAW,aAA+B;AACzC,WAAO,KAAK,sBAAsB,WAAW,WAAW;AAAA,EACzD;AAAA,EAEA,gBAAgB,aAAqB,SAAuC;AAC3E,SAAK,sBAAsB,gBAAgB,aAAa,OAAO;AAAA,EAChE;AACD;",
  "names": []
}
