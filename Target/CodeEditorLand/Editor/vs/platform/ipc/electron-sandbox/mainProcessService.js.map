{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/ipc/electron-sandbox/mainProcessService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport type {\n\tIChannel,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport { Client as IPCElectronClient } from \"../../../base/parts/ipc/electron-sandbox/ipc.electron.js\";\nimport type { IMainProcessService } from \"../common/mainProcessService.js\";\n\n/**\n * An implementation of `IMainProcessService` that leverages Electron's IPC.\n */\nexport class ElectronIPCMainProcessService\n\textends Disposable\n\timplements IMainProcessService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate mainProcessConnection: IPCElectronClient;\n\n\tconstructor(windowId: number) {\n\t\tsuper();\n\n\t\tthis.mainProcessConnection = this._register(\n\t\t\tnew IPCElectronClient(`window:${windowId}`),\n\t\t);\n\t}\n\n\tgetChannel(channelName: string): IChannel {\n\t\treturn this.mainProcessConnection.getChannel(channelName);\n\t}\n\n\tregisterChannel(\n\t\tchannelName: string,\n\t\tchannel: IServerChannel<string>,\n\t): void {\n\t\tthis.mainProcessConnection.registerChannel(channelName, channel);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAK3B,SAAS,UAAU,yBAAyB;AAMrC,MAAM,sCACJ,WAET;AAAA,EAnBA,OAmBA;AAAA;AAAA;AAAA,EAGS;AAAA,EAER,YAAY,UAAkB;AAC7B,UAAM;AAEN,SAAK,wBAAwB,KAAK;AAAA,MACjC,IAAI,kBAAkB,UAAU,QAAQ,EAAE;AAAA,IAC3C;AAAA,EACD;AAAA,EAEA,WAAW,aAA+B;AACzC,WAAO,KAAK,sBAAsB,WAAW,WAAW;AAAA,EACzD;AAAA,EAEA,gBACC,aACA,SACO;AACP,SAAK,sBAAsB,gBAAgB,aAAa,OAAO;AAAA,EAChE;AACD;",
  "names": []
}
