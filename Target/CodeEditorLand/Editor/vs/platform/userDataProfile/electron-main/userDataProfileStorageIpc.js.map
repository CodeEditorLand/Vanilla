{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/electron-main/userDataProfileStorageIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport type { IServerChannel } from \"../../../base/parts/ipc/common/ipc.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport {\n\tStorageScope,\n\tTARGET_KEY,\n\tloadKeyTargets,\n} from \"../../storage/common/storage.js\";\nimport type { IBaseSerializableStorageRequest } from \"../../storage/common/storageIpc.js\";\nimport type { IStorageMain } from \"../../storage/electron-main/storageMain.js\";\nimport type { IStorageMainService } from \"../../storage/electron-main/storageMainService.js\";\nimport type {\n\tIUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../common/userDataProfile.js\";\nimport type {\n\tIProfileStorageChanges,\n\tIProfileStorageValueChanges,\n} from \"../common/userDataProfileStorageService.js\";\n\nexport class ProfileStorageChangesListenerChannel\n\textends Disposable\n\timplements IServerChannel\n{\n\tprivate readonly _onDidChange: Emitter<IProfileStorageChanges>;\n\n\tconstructor(\n\t\tprivate readonly storageMainService: IStorageMainService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tconst disposable = this._register(new MutableDisposable<IDisposable>());\n\t\tthis._onDidChange = this._register(\n\t\t\tnew Emitter<IProfileStorageChanges>({\n\t\t\t\t// Start listening to profile storage changes only when someone is listening\n\t\t\t\tonWillAddFirstListener: () =>\n\t\t\t\t\t(disposable.value = this.registerStorageChangeListeners()),\n\t\t\t\t// Stop listening to profile storage changes when no one is listening\n\t\t\t\tonDidRemoveLastListener: () => (disposable.value = undefined),\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate registerStorageChangeListeners(): IDisposable {\n\t\tthis.logService.debug(\n\t\t\t\"ProfileStorageChangesListenerChannel#registerStorageChangeListeners\",\n\t\t);\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(\n\t\t\tEvent.debounce(\n\t\t\t\tthis.storageMainService.applicationStorage.onDidChangeStorage,\n\t\t\t\t(keys: string[] | undefined, e) => {\n\t\t\t\t\tif (keys) {\n\t\t\t\t\t\tkeys.push(e.key);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeys = [e.key];\n\t\t\t\t\t}\n\t\t\t\t\treturn keys;\n\t\t\t\t},\n\t\t\t\t100,\n\t\t\t)((keys) => this.onDidChangeApplicationStorage(keys)),\n\t\t);\n\t\tdisposables.add(\n\t\t\tEvent.debounce(\n\t\t\t\tthis.storageMainService.onDidChangeProfileStorage,\n\t\t\t\t(\n\t\t\t\t\tchanges:\n\t\t\t\t\t\t| Map<\n\t\t\t\t\t\t\t\tstring,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprofile: IUserDataProfile;\n\t\t\t\t\t\t\t\t\tkeys: string[];\n\t\t\t\t\t\t\t\t\tstorage: IStorageMain;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  >\n\t\t\t\t\t\t| undefined,\n\t\t\t\t\te,\n\t\t\t\t) => {\n\t\t\t\t\tif (!changes) {\n\t\t\t\t\t\tchanges = new Map<\n\t\t\t\t\t\t\tstring,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprofile: IUserDataProfile;\n\t\t\t\t\t\t\t\tkeys: string[];\n\t\t\t\t\t\t\t\tstorage: IStorageMain;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>();\n\t\t\t\t\t}\n\t\t\t\t\tlet profileChanges = changes.get(e.profile.id);\n\t\t\t\t\tif (!profileChanges) {\n\t\t\t\t\t\tchanges.set(\n\t\t\t\t\t\t\te.profile.id,\n\t\t\t\t\t\t\t(profileChanges = {\n\t\t\t\t\t\t\t\tprofile: e.profile,\n\t\t\t\t\t\t\t\tkeys: [],\n\t\t\t\t\t\t\t\tstorage: e.storage,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tprofileChanges.keys.push(e.key);\n\t\t\t\t\treturn changes;\n\t\t\t\t},\n\t\t\t\t100,\n\t\t\t)((keys) => this.onDidChangeProfileStorage(keys)),\n\t\t);\n\t\treturn disposables;\n\t}\n\n\tprivate onDidChangeApplicationStorage(keys: string[]): void {\n\t\tconst targetChangedProfiles: IUserDataProfile[] = keys.includes(\n\t\t\tTARGET_KEY,\n\t\t)\n\t\t\t? [this.userDataProfilesService.defaultProfile]\n\t\t\t: [];\n\t\tconst profileStorageValueChanges: IProfileStorageValueChanges[] = [];\n\t\tkeys = keys.filter((key) => key !== TARGET_KEY);\n\t\tif (keys.length) {\n\t\t\tconst keyTargets = loadKeyTargets(\n\t\t\t\tthis.storageMainService.applicationStorage.storage,\n\t\t\t);\n\t\t\tprofileStorageValueChanges.push({\n\t\t\t\tprofile: this.userDataProfilesService.defaultProfile,\n\t\t\t\tchanges: keys.map((key) => ({\n\t\t\t\t\tkey,\n\t\t\t\t\tscope: StorageScope.PROFILE,\n\t\t\t\t\ttarget: keyTargets[key],\n\t\t\t\t})),\n\t\t\t});\n\t\t}\n\t\tthis.triggerEvents(targetChangedProfiles, profileStorageValueChanges);\n\t}\n\n\tprivate onDidChangeProfileStorage(\n\t\tchanges: Map<\n\t\t\tstring,\n\t\t\t{ profile: IUserDataProfile; keys: string[]; storage: IStorageMain }\n\t\t>,\n\t): void {\n\t\tconst targetChangedProfiles: IUserDataProfile[] = [];\n\t\tconst profileStorageValueChanges = new Map<\n\t\t\tstring,\n\t\t\tIProfileStorageValueChanges\n\t\t>();\n\t\tfor (const [profileId, profileChanges] of changes.entries()) {\n\t\t\tif (profileChanges.keys.includes(TARGET_KEY)) {\n\t\t\t\ttargetChangedProfiles.push(profileChanges.profile);\n\t\t\t}\n\t\t\tconst keys = profileChanges.keys.filter(\n\t\t\t\t(key) => key !== TARGET_KEY,\n\t\t\t);\n\t\t\tif (keys.length) {\n\t\t\t\tconst keyTargets = loadKeyTargets(\n\t\t\t\t\tprofileChanges.storage.storage,\n\t\t\t\t);\n\t\t\t\tprofileStorageValueChanges.set(profileId, {\n\t\t\t\t\tprofile: profileChanges.profile,\n\t\t\t\t\tchanges: keys.map((key) => ({\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tscope: StorageScope.PROFILE,\n\t\t\t\t\t\ttarget: keyTargets[key],\n\t\t\t\t\t})),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.triggerEvents(targetChangedProfiles, [\n\t\t\t...profileStorageValueChanges.values(),\n\t\t]);\n\t}\n\n\tprivate triggerEvents(\n\t\ttargetChanges: IUserDataProfile[],\n\t\tvalueChanges: IProfileStorageValueChanges[],\n\t): void {\n\t\tif (targetChanges.length || valueChanges.length) {\n\t\t\tthis._onDidChange.fire({ valueChanges, targetChanges });\n\t\t}\n\t}\n\n\tlisten(\n\t\t_: unknown,\n\t\tevent: string,\n\t\targ: IBaseSerializableStorageRequest,\n\t): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase \"onDidChange\":\n\t\t\t\treturn this._onDidChange.event;\n\t\t}\n\t\tthrow new Error(\n\t\t\t`[ProfileStorageChangesListenerChannel] Event not found: ${event}`,\n\t\t);\n\t}\n\n\tasync call(_: unknown, command: string): Promise<any> {\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
