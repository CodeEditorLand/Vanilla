{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/electron-main/userDataProfileStorageIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IProfileStorageChanges, IProfileStorageValueChanges } from '../common/userDataProfileStorageService.js';\nimport { loadKeyTargets, StorageScope, TARGET_KEY } from '../../storage/common/storage.js';\nimport { IBaseSerializableStorageRequest } from '../../storage/common/storageIpc.js';\nimport { IStorageMain } from '../../storage/electron-main/storageMain.js';\nimport { IStorageMainService } from '../../storage/electron-main/storageMainService.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../common/userDataProfile.js';\n\nexport class ProfileStorageChangesListenerChannel extends Disposable implements IServerChannel {\n\n\tprivate readonly _onDidChange: Emitter<IProfileStorageChanges>;\n\n\tconstructor(\n\t\tprivate readonly storageMainService: IStorageMainService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tconst disposable = this._register(new MutableDisposable<IDisposable>());\n\t\tthis._onDidChange = this._register(new Emitter<IProfileStorageChanges>(\n\t\t\t{\n\t\t\t\t// Start listening to profile storage changes only when someone is listening\n\t\t\t\tonWillAddFirstListener: () => disposable.value = this.registerStorageChangeListeners(),\n\t\t\t\t// Stop listening to profile storage changes when no one is listening\n\t\t\t\tonDidRemoveLastListener: () => disposable.value = undefined\n\t\t\t}\n\t\t));\n\t}\n\n\tprivate registerStorageChangeListeners(): IDisposable {\n\t\tthis.logService.debug('ProfileStorageChangesListenerChannel#registerStorageChangeListeners');\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(Event.debounce(this.storageMainService.applicationStorage.onDidChangeStorage, (keys: string[] | undefined, e) => {\n\t\t\tif (keys) {\n\t\t\t\tkeys.push(e.key);\n\t\t\t} else {\n\t\t\t\tkeys = [e.key];\n\t\t\t}\n\t\t\treturn keys;\n\t\t}, 100)(keys => this.onDidChangeApplicationStorage(keys)));\n\t\tdisposables.add(Event.debounce(this.storageMainService.onDidChangeProfileStorage, (changes: Map<string, { profile: IUserDataProfile; keys: string[]; storage: IStorageMain }> | undefined, e) => {\n\t\t\tif (!changes) {\n\t\t\t\tchanges = new Map<string, { profile: IUserDataProfile; keys: string[]; storage: IStorageMain }>();\n\t\t\t}\n\t\t\tlet profileChanges = changes.get(e.profile.id);\n\t\t\tif (!profileChanges) {\n\t\t\t\tchanges.set(e.profile.id, profileChanges = { profile: e.profile, keys: [], storage: e.storage });\n\t\t\t}\n\t\t\tprofileChanges.keys.push(e.key);\n\t\t\treturn changes;\n\t\t}, 100)(keys => this.onDidChangeProfileStorage(keys)));\n\t\treturn disposables;\n\t}\n\n\tprivate onDidChangeApplicationStorage(keys: string[]): void {\n\t\tconst targetChangedProfiles: IUserDataProfile[] = keys.includes(TARGET_KEY) ? [this.userDataProfilesService.defaultProfile] : [];\n\t\tconst profileStorageValueChanges: IProfileStorageValueChanges[] = [];\n\t\tkeys = keys.filter(key => key !== TARGET_KEY);\n\t\tif (keys.length) {\n\t\t\tconst keyTargets = loadKeyTargets(this.storageMainService.applicationStorage.storage);\n\t\t\tprofileStorageValueChanges.push({ profile: this.userDataProfilesService.defaultProfile, changes: keys.map(key => ({ key, scope: StorageScope.PROFILE, target: keyTargets[key] })) });\n\t\t}\n\t\tthis.triggerEvents(targetChangedProfiles, profileStorageValueChanges);\n\t}\n\n\tprivate onDidChangeProfileStorage(changes: Map<string, { profile: IUserDataProfile; keys: string[]; storage: IStorageMain }>): void {\n\t\tconst targetChangedProfiles: IUserDataProfile[] = [];\n\t\tconst profileStorageValueChanges = new Map<string, IProfileStorageValueChanges>();\n\t\tfor (const [profileId, profileChanges] of changes.entries()) {\n\t\t\tif (profileChanges.keys.includes(TARGET_KEY)) {\n\t\t\t\ttargetChangedProfiles.push(profileChanges.profile);\n\t\t\t}\n\t\t\tconst keys = profileChanges.keys.filter(key => key !== TARGET_KEY);\n\t\t\tif (keys.length) {\n\t\t\t\tconst keyTargets = loadKeyTargets(profileChanges.storage.storage);\n\t\t\t\tprofileStorageValueChanges.set(profileId, { profile: profileChanges.profile, changes: keys.map(key => ({ key, scope: StorageScope.PROFILE, target: keyTargets[key] })) });\n\t\t\t}\n\t\t}\n\t\tthis.triggerEvents(targetChangedProfiles, [...profileStorageValueChanges.values()]);\n\t}\n\n\tprivate triggerEvents(targetChanges: IUserDataProfile[], valueChanges: IProfileStorageValueChanges[]): void {\n\t\tif (targetChanges.length || valueChanges.length) {\n\t\t\tthis._onDidChange.fire({ valueChanges, targetChanges });\n\t\t}\n\t}\n\n\tlisten(_: unknown, event: string, arg: IBaseSerializableStorageRequest): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChange': return this._onDidChange.event;\n\t\t}\n\t\tthrow new Error(`[ProfileStorageChangesListenerChannel] Event not found: ${event}`);\n\t}\n\n\tasync call(_: unknown, command: string): Promise<any> {\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
