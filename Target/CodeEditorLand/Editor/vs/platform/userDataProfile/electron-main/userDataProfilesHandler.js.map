{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/electron-main/userDataProfilesHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../base/common/async.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { ILifecycleMainService } from \"../../lifecycle/electron-main/lifecycleMainService.js\";\nimport {\n\ttype ICodeWindow,\n\tLoadReason,\n} from \"../../window/electron-main/window.js\";\nimport { IWindowsMainService } from \"../../windows/electron-main/windows.js\";\nimport {\n\ttype IAnyWorkspaceIdentifier,\n\ttoWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\nimport { IUserDataProfilesMainService } from \"./userDataProfile.js\";\n\nexport class UserDataProfilesHandler extends Disposable {\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IUserDataProfilesMainService\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesMainService,\n\t\t@IWindowsMainService\n\t\tprivate readonly windowsMainService: IWindowsMainService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tlifecycleMainService.onWillLoadWindow((e) => {\n\t\t\t\tif (e.reason === LoadReason.LOAD) {\n\t\t\t\t\tthis.unsetProfileForWorkspace(e.window);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tlifecycleMainService.onBeforeCloseWindow((window) =>\n\t\t\t\tthis.unsetProfileForWorkspace(window),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() => this.cleanUpEmptyWindowAssociations(),\n\t\t\t\t30 * 1000 /* after 30s */,\n\t\t\t),\n\t\t).schedule();\n\t}\n\n\tprivate async unsetProfileForWorkspace(window: ICodeWindow): Promise<void> {\n\t\tconst workspace = this.getWorkspace(window);\n\t\tconst profile =\n\t\t\tthis.userDataProfilesService.getProfileForWorkspace(workspace);\n\t\tif (profile?.isTransient) {\n\t\t\tthis.userDataProfilesService.unsetWorkspace(\n\t\t\t\tworkspace,\n\t\t\t\tprofile.isTransient,\n\t\t\t);\n\t\t\tif (profile.isTransient) {\n\t\t\t\tawait this.userDataProfilesService.cleanUpTransientProfiles();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getWorkspace(window: ICodeWindow): IAnyWorkspaceIdentifier {\n\t\treturn (\n\t\t\twindow.openedWorkspace ??\n\t\t\ttoWorkspaceIdentifier(\n\t\t\t\twindow.backupPath,\n\t\t\t\twindow.isExtensionDevelopmentHost,\n\t\t\t)\n\t\t);\n\t}\n\n\tprivate cleanUpEmptyWindowAssociations(): void {\n\t\tconst associatedEmptyWindows =\n\t\t\tthis.userDataProfilesService.getAssociatedEmptyWindows();\n\t\tif (associatedEmptyWindows.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst openedWorkspaces = this.windowsMainService\n\t\t\t.getWindows()\n\t\t\t.map((window) => this.getWorkspace(window));\n\t\tfor (const associatedEmptyWindow of associatedEmptyWindows) {\n\t\t\tif (\n\t\t\t\topenedWorkspaces.some(\n\t\t\t\t\t(openedWorkspace) =>\n\t\t\t\t\t\topenedWorkspace.id === associatedEmptyWindow.id,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.userDataProfilesService.unsetWorkspace(\n\t\t\t\tassociatedEmptyWindow,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,kBAAkB;AAC3B,SAAS,6BAA6B;AACtC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,2BAA2B;AACpC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,oCAAoC;AAEtC,IAAM,0BAAN,cAAsC,WAAW;AAAA,EACvD,YACwB,sBAEN,yBAEA,oBAChB;AACD,UAAM;AAJW;AAEA;AAGjB,SAAK;AAAA,MACJ,qBAAqB,iBAAiB,CAAC,MAAM;AAC5C,YAAI,EAAE,WAAW,WAAW,MAAM;AACjC,eAAK,yBAAyB,EAAE,MAAM;AAAA,QACvC;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK;AAAA,MACJ,qBAAqB;AAAA,QAAoB,CAAC,WACzC,KAAK,yBAAyB,MAAM;AAAA,MACrC;AAAA,IACD;AACA,SAAK;AAAA,MACJ,IAAI;AAAA,QACH,MAAM,KAAK,+BAA+B;AAAA,QAC1C,KAAK;AAAA,MACN;AAAA,IACD,EAAE,SAAS;AAAA,EACZ;AAAA,EA9CD,OAmBwD;AAAA;AAAA;AAAA,EA6BvD,MAAc,yBAAyB,QAAoC;AAC1E,UAAM,YAAY,KAAK,aAAa,MAAM;AAC1C,UAAM,UACL,KAAK,wBAAwB,uBAAuB,SAAS;AAC9D,QAAI,SAAS,aAAa;AACzB,WAAK,wBAAwB;AAAA,QAC5B;AAAA,QACA,QAAQ;AAAA,MACT;AACA,UAAI,QAAQ,aAAa;AACxB,cAAM,KAAK,wBAAwB,yBAAyB;AAAA,MAC7D;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,aAAa,QAA8C;AAClE,WACC,OAAO,mBACP;AAAA,MACC,OAAO;AAAA,MACP,OAAO;AAAA,IACR;AAAA,EAEF;AAAA,EAEQ,iCAAuC;AAC9C,UAAM,yBACL,KAAK,wBAAwB,0BAA0B;AACxD,QAAI,uBAAuB,WAAW,GAAG;AACxC;AAAA,IACD;AACA,UAAM,mBAAmB,KAAK,mBAC5B,WAAW,EACX,IAAI,CAAC,WAAW,KAAK,aAAa,MAAM,CAAC;AAC3C,eAAW,yBAAyB,wBAAwB;AAC3D,UACC,iBAAiB;AAAA,QAChB,CAAC,oBACA,gBAAgB,OAAO,sBAAsB;AAAA,MAC/C,GACC;AACD;AAAA,MACD;AACA,WAAK,wBAAwB;AAAA,QAC5B;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AA9Ea,0BAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EAEA;AAAA,GALU;",
  "names": []
}
