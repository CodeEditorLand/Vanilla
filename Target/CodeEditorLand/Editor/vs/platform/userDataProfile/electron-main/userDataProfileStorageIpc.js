import{Emitter as h,Event as l}from"../../../base/common/event.js";import{Disposable as S,DisposableStore as c,MutableDisposable as d}from"../../../base/common/lifecycle.js";import{StorageScope as p,TARGET_KEY as a,loadKeyTargets as f}from"../../storage/common/storage.js";class P extends S{constructor(r,e,t){super();this.storageMainService=r;this.userDataProfilesService=e;this.logService=t;const i=this._register(new d);this._onDidChange=this._register(new h({onWillAddFirstListener:()=>i.value=this.registerStorageChangeListeners(),onDidRemoveLastListener:()=>i.value=void 0}))}_onDidChange;registerStorageChangeListeners(){this.logService.debug("ProfileStorageChangesListenerChannel#registerStorageChangeListeners");const r=new c;return r.add(l.debounce(this.storageMainService.applicationStorage.onDidChangeStorage,(e,t)=>(e?e.push(t.key):e=[t.key],e),100)(e=>this.onDidChangeApplicationStorage(e))),r.add(l.debounce(this.storageMainService.onDidChangeProfileStorage,(e,t)=>{e||(e=new Map);let i=e.get(t.profile.id);return i||e.set(t.profile.id,i={profile:t.profile,keys:[],storage:t.storage}),i.keys.push(t.key),e},100)(e=>this.onDidChangeProfileStorage(e))),r}onDidChangeApplicationStorage(r){const e=r.includes(a)?[this.userDataProfilesService.defaultProfile]:[],t=[];if(r=r.filter(i=>i!==a),r.length){const i=f(this.storageMainService.applicationStorage.storage);t.push({profile:this.userDataProfilesService.defaultProfile,changes:r.map(o=>({key:o,scope:p.PROFILE,target:i[o]}))})}this.triggerEvents(e,t)}onDidChangeProfileStorage(r){const e=[],t=new Map;for(const[i,o]of r.entries()){o.keys.includes(a)&&e.push(o.profile);const n=o.keys.filter(s=>s!==a);if(n.length){const s=f(o.storage.storage);t.set(i,{profile:o.profile,changes:n.map(g=>({key:g,scope:p.PROFILE,target:s[g]}))})}}this.triggerEvents(e,[...t.values()])}triggerEvents(r,e){(r.length||e.length)&&this._onDidChange.fire({valueChanges:e,targetChanges:r})}listen(r,e,t){switch(e){case"onDidChange":return this._onDidChange.event}throw new Error(`[ProfileStorageChangesListenerChannel] Event not found: ${e}`)}async call(r,e){throw new Error(`Call not found: ${e}`)}}export{P as ProfileStorageChangesListenerChannel};
