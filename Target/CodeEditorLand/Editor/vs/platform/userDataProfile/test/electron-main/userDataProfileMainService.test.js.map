{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/test/electron-main/userDataProfileMainService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { AbstractNativeEnvironmentService } from '../../../environment/common/environmentService.js';\nimport product from '../../../product/common/product.js';\nimport { UserDataProfilesMainService } from '../../electron-main/userDataProfile.js';\nimport { SaveStrategy, StateService } from '../../../state/node/stateService.js';\nimport { UriIdentityService } from '../../../uriIdentity/common/uriIdentityService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nclass TestEnvironmentService extends AbstractNativeEnvironmentService {\n\tconstructor(private readonly _appSettingsHome: URI) {\n\t\tsuper(Object.create(null), Object.create(null), { _serviceBrand: undefined, ...product });\n\t}\n\toverride get userRoamingDataHome() { return this._appSettingsHome.with({ scheme: Schemas.vscodeUserData }); }\n\toverride get extensionsPath() { return joinPath(this.userRoamingDataHome, 'extensions.json').path; }\n\toverride get stateResource() { return joinPath(this.userRoamingDataHome, 'state.json'); }\n\toverride get cacheHome() { return joinPath(this.userRoamingDataHome, 'cache'); }\n}\n\nsuite('UserDataProfileMainService', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet testObject: UserDataProfilesMainService;\n\tlet environmentService: TestEnvironmentService, stateService: StateService;\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, fileSystemProvider));\n\n\t\tenvironmentService = new TestEnvironmentService(joinPath(ROOT, 'User'));\n\t\tstateService = disposables.add(new StateService(SaveStrategy.DELAYED, environmentService, logService, fileService));\n\n\t\ttestObject = disposables.add(new UserDataProfilesMainService(stateService, disposables.add(new UriIdentityService(fileService)), environmentService, fileService, logService));\n\t\tawait stateService.init();\n\t});\n\n\ttest('default profile', () => {\n\t\tassert.strictEqual(testObject.defaultProfile.isDefault, true);\n\t});\n\n\ttest('profiles always include default profile', () => {\n\t\tassert.deepStrictEqual(testObject.profiles.length, 1);\n\t\tassert.deepStrictEqual(testObject.profiles[0].isDefault, true);\n\t});\n\n\ttest('default profile when there are profiles', async () => {\n\t\tawait testObject.createNamedProfile('test');\n\t\tassert.strictEqual(testObject.defaultProfile.isDefault, true);\n\t});\n\n\ttest('default profile when profiles are removed', async () => {\n\t\tconst profile = await testObject.createNamedProfile('test');\n\t\tawait testObject.removeProfile(profile);\n\t\tassert.strictEqual(testObject.defaultProfile.isDefault, true);\n\t});\n\n\ttest('when no profile is set', async () => {\n\t\tawait testObject.createNamedProfile('profile1');\n\n\t\tassert.equal(testObject.getProfileForWorkspace({ id: 'id' }), undefined);\n\t\tassert.equal(testObject.getProfileForWorkspace({ id: 'id', configPath: environmentService.userRoamingDataHome }), undefined);\n\t\tassert.equal(testObject.getProfileForWorkspace({ id: 'id', uri: environmentService.userRoamingDataHome }), undefined);\n\t});\n\n\ttest('set profile to a workspace', async () => {\n\t\tconst workspace = { id: 'id', configPath: environmentService.userRoamingDataHome };\n\t\tconst profile = await testObject.createNamedProfile('profile1');\n\n\t\ttestObject.setProfileForWorkspace(workspace, profile);\n\n\t\tassert.strictEqual(testObject.getProfileForWorkspace(workspace)?.id, profile.id);\n\t});\n\n\ttest('set profile to a folder', async () => {\n\t\tconst workspace = { id: 'id', uri: environmentService.userRoamingDataHome };\n\t\tconst profile = await testObject.createNamedProfile('profile1');\n\n\t\ttestObject.setProfileForWorkspace(workspace, profile);\n\n\t\tassert.strictEqual(testObject.getProfileForWorkspace(workspace)?.id, profile.id);\n\t});\n\n\ttest('set profile to a window', async () => {\n\t\tconst workspace = { id: 'id' };\n\t\tconst profile = await testObject.createNamedProfile('profile1');\n\n\t\ttestObject.setProfileForWorkspace(workspace, profile);\n\n\t\tassert.strictEqual(testObject.getProfileForWorkspace(workspace)?.id, profile.id);\n\t});\n\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,kCAAkC;AAC3C,SAAS,wCAAwC;AACjD,OAAO,aAAa;AACpB,SAAS,mCAAmC;AAC5C,SAAS,cAAc,oBAAoB;AAC3C,SAAS,0BAA0B;AACnC,SAAS,+CAA+C;AAExD,MAAM,OAAO,IAAI,KAAK,OAAO,EAAE,KAAK,EAAE,QAAQ,eAAe,CAAC;AAE9D,MAAM,+BAA+B,iCAAiC;AAAA,EACrE,YAA6B,kBAAuB;AACnD,UAAM,uBAAO,OAAO,IAAI,GAAG,uBAAO,OAAO,IAAI,GAAG,EAAE,eAAe,QAAW,GAAG,QAAQ,CAAC;AAD5D;AAAA,EAE7B;AAAA,EAxBD,OAqBsE;AAAA;AAAA;AAAA,EAIrE,IAAa,sBAAsB;AAAE,WAAO,KAAK,iBAAiB,KAAK,EAAE,QAAQ,QAAQ,eAAe,CAAC;AAAA,EAAG;AAAA,EAC5G,IAAa,iBAAiB;AAAE,WAAO,SAAS,KAAK,qBAAqB,iBAAiB,EAAE;AAAA,EAAM;AAAA,EACnG,IAAa,gBAAgB;AAAE,WAAO,SAAS,KAAK,qBAAqB,YAAY;AAAA,EAAG;AAAA,EACxF,IAAa,YAAY;AAAE,WAAO,SAAS,KAAK,qBAAqB,OAAO;AAAA,EAAG;AAChF;AAEA,MAAM,8BAA8B,MAAM;AAEzC,QAAM,cAAc,wCAAwC;AAC5D,MAAI;AACJ,MAAI,oBAA4C;AAEhD,QAAM,YAAY;AACjB,UAAM,aAAa,IAAI,eAAe;AACtC,UAAM,cAAc,YAAY,IAAI,IAAI,YAAY,UAAU,CAAC;AAC/D,UAAM,qBAAqB,YAAY,IAAI,IAAI,2BAA2B,CAAC;AAC3E,gBAAY,IAAI,YAAY,iBAAiB,QAAQ,gBAAgB,kBAAkB,CAAC;AAExF,yBAAqB,IAAI,uBAAuB,SAAS,MAAM,MAAM,CAAC;AACtE,mBAAe,YAAY,IAAI,IAAI,aAAa,aAAa,SAAS,oBAAoB,YAAY,WAAW,CAAC;AAElH,iBAAa,YAAY,IAAI,IAAI,4BAA4B,cAAc,YAAY,IAAI,IAAI,mBAAmB,WAAW,CAAC,GAAG,oBAAoB,aAAa,UAAU,CAAC;AAC7K,UAAM,aAAa,KAAK;AAAA,EACzB,CAAC;AAED,OAAK,mBAAmB,MAAM;AAC7B,WAAO,YAAY,WAAW,eAAe,WAAW,IAAI;AAAA,EAC7D,CAAC;AAED,OAAK,2CAA2C,MAAM;AACrD,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,WAAW,IAAI;AAAA,EAC9D,CAAC;AAED,OAAK,2CAA2C,YAAY;AAC3D,UAAM,WAAW,mBAAmB,MAAM;AAC1C,WAAO,YAAY,WAAW,eAAe,WAAW,IAAI;AAAA,EAC7D,CAAC;AAED,OAAK,6CAA6C,YAAY;AAC7D,UAAM,UAAU,MAAM,WAAW,mBAAmB,MAAM;AAC1D,UAAM,WAAW,cAAc,OAAO;AACtC,WAAO,YAAY,WAAW,eAAe,WAAW,IAAI;AAAA,EAC7D,CAAC;AAED,OAAK,0BAA0B,YAAY;AAC1C,UAAM,WAAW,mBAAmB,UAAU;AAE9C,WAAO,MAAM,WAAW,uBAAuB,EAAE,IAAI,KAAK,CAAC,GAAG,MAAS;AACvE,WAAO,MAAM,WAAW,uBAAuB,EAAE,IAAI,MAAM,YAAY,mBAAmB,oBAAoB,CAAC,GAAG,MAAS;AAC3H,WAAO,MAAM,WAAW,uBAAuB,EAAE,IAAI,MAAM,KAAK,mBAAmB,oBAAoB,CAAC,GAAG,MAAS;AAAA,EACrH,CAAC;AAED,OAAK,8BAA8B,YAAY;AAC9C,UAAM,YAAY,EAAE,IAAI,MAAM,YAAY,mBAAmB,oBAAoB;AACjF,UAAM,UAAU,MAAM,WAAW,mBAAmB,UAAU;AAE9D,eAAW,uBAAuB,WAAW,OAAO;AAEpD,WAAO,YAAY,WAAW,uBAAuB,SAAS,GAAG,IAAI,QAAQ,EAAE;AAAA,EAChF,CAAC;AAED,OAAK,2BAA2B,YAAY;AAC3C,UAAM,YAAY,EAAE,IAAI,MAAM,KAAK,mBAAmB,oBAAoB;AAC1E,UAAM,UAAU,MAAM,WAAW,mBAAmB,UAAU;AAE9D,eAAW,uBAAuB,WAAW,OAAO;AAEpD,WAAO,YAAY,WAAW,uBAAuB,SAAS,GAAG,IAAI,QAAQ,EAAE;AAAA,EAChF,CAAC;AAED,OAAK,2BAA2B,YAAY;AAC3C,UAAM,YAAY,EAAE,IAAI,KAAK;AAC7B,UAAM,UAAU,MAAM,WAAW,mBAAmB,UAAU;AAE9D,eAAW,uBAAuB,WAAW,OAAO;AAEpD,WAAO,YAAY,WAAW,uBAAuB,SAAS,GAAG,IAAI,QAAQ,EAAE;AAAA,EAChF,CAAC;AAEF,CAAC;",
  "names": []
}
