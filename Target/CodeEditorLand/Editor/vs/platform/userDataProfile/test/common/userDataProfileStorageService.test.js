import r from"assert";import{Emitter as l,Event as S}from"../../../../base/common/event.js";import{URI as c}from"../../../../base/common/uri.js";import{InMemoryStorageDatabase as f,Storage as m}from"../../../../base/parts/storage/common/storage.js";import{AbstractUserDataProfileStorageService as u}from"../../common/userDataProfileStorageService.js";import{InMemoryStorageService as p,loadKeyTargets as d,StorageTarget as s,TARGET_KEY as g}from"../../../storage/common/storage.js";import{toUserDataProfile as E}from"../../common/userDataProfile.js";import{runWithFakedTimers as n}from"../../../../base/test/common/timeTravelScheduler.js";import{ensureNoDisposablesAreLeakedInTestSuite as b}from"../../../../base/test/common/utils.js";class D extends f{_onDidChangeItemsExternal=new l;onDidChangeItemsExternal=this._onDidChangeItemsExternal.event;async updateItems(t){await super.updateItems(t),(t.insert||t.delete)&&this._onDidChangeItemsExternal.fire({changed:t.insert,deleted:t.delete})}}class I extends u{onDidChange=S.None;databases=new Map;async createStorageDatabase(t){let i=this.databases.get(t.id);return i||this.databases.set(t.id,i=new D),i}setupStorageDatabase(t){return this.createStorageDatabase(t)}}suite("ProfileStorageService",()=>{const o=b(),t=E("test","test",c.file("foo"),c.file("cache"));let i,e;setup(async()=>{i=o.add(new I(!1,o.add(new p))),e=o.add(new m(await i.setupStorageDatabase(t))),await e.init()}),test("read empty storage",()=>n({useFakeTimers:!0},async()=>{const a=await i.readStorageData(t);r.strictEqual(a.size,0)})),test("read storage with data",()=>n({useFakeTimers:!0},async()=>{e.set("foo","bar"),e.set(g,JSON.stringify({foo:s.USER})),await e.flush();const a=await i.readStorageData(t);r.strictEqual(a.size,1),r.deepStrictEqual(a.get("foo"),{value:"bar",target:s.USER})})),test("write in empty storage",()=>n({useFakeTimers:!0},async()=>{const a=new Map;a.set("foo","bar"),await i.updateStorageData(t,a,s.USER),r.strictEqual(e.items.size,2),r.deepStrictEqual(d(e),{foo:s.USER}),r.strictEqual(e.get("foo"),"bar")})),test("write in storage with data",()=>n({useFakeTimers:!0},async()=>{e.set("foo","bar"),e.set(g,JSON.stringify({foo:s.USER})),await e.flush();const a=new Map;a.set("abc","xyz"),await i.updateStorageData(t,a,s.MACHINE),r.strictEqual(e.items.size,3),r.deepStrictEqual(d(e),{foo:s.USER,abc:s.MACHINE}),r.strictEqual(e.get("foo"),"bar"),r.strictEqual(e.get("abc"),"xyz")})),test("write in storage with data (insert, update, remove)",()=>n({useFakeTimers:!0},async()=>{e.set("foo","bar"),e.set("abc","xyz"),e.set(g,JSON.stringify({foo:s.USER,abc:s.MACHINE})),await e.flush();const a=new Map;a.set("foo",void 0),a.set("abc","def"),a.set("var","const"),await i.updateStorageData(t,a,s.USER),r.strictEqual(e.items.size,3),r.deepStrictEqual(d(e),{abc:s.USER,var:s.USER}),r.strictEqual(e.get("abc"),"def"),r.strictEqual(e.get("var"),"const")}))});export{I as TestUserDataProfileStorageService};
