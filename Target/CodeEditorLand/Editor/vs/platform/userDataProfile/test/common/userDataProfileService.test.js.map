{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/test/common/userDataProfileService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { FileService } from '../../../files/common/fileService.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { InMemoryFileSystemProvider } from '../../../files/common/inMemoryFilesystemProvider.js';\nimport { AbstractNativeEnvironmentService } from '../../../environment/common/environmentService.js';\nimport product from '../../../product/common/product.js';\nimport { InMemoryUserDataProfilesService, UserDataProfilesService } from '../../common/userDataProfile.js';\nimport { UriIdentityService } from '../../../uriIdentity/common/uriIdentityService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nclass TestEnvironmentService extends AbstractNativeEnvironmentService {\n\tconstructor(private readonly _appSettingsHome: URI) {\n\t\tsuper(Object.create(null), Object.create(null), { _serviceBrand: undefined, ...product });\n\t}\n\toverride get userRoamingDataHome() { return this._appSettingsHome.with({ scheme: Schemas.vscodeUserData }); }\n\toverride get cacheHome() { return this.userRoamingDataHome; }\n}\n\nsuite('UserDataProfileService (Common)', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet testObject: UserDataProfilesService;\n\tlet environmentService: TestEnvironmentService;\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, fileSystemProvider));\n\n\t\tenvironmentService = new TestEnvironmentService(joinPath(ROOT, 'User'));\n\t\ttestObject = disposables.add(new InMemoryUserDataProfilesService(environmentService, fileService, disposables.add(new UriIdentityService(fileService)), logService));\n\t});\n\n\n\ttest('default profile', () => {\n\t\tassert.strictEqual(testObject.defaultProfile.isDefault, true);\n\t\tassert.strictEqual(testObject.defaultProfile.useDefaultFlags, undefined);\n\t\tassert.strictEqual(testObject.defaultProfile.location.toString(), environmentService.userRoamingDataHome.toString());\n\t\tassert.strictEqual(testObject.defaultProfile.globalStorageHome.toString(), joinPath(environmentService.userRoamingDataHome, 'globalStorage').toString());\n\t\tassert.strictEqual(testObject.defaultProfile.keybindingsResource.toString(), joinPath(environmentService.userRoamingDataHome, 'keybindings.json').toString());\n\t\tassert.strictEqual(testObject.defaultProfile.settingsResource.toString(), joinPath(environmentService.userRoamingDataHome, 'settings.json').toString());\n\t\tassert.strictEqual(testObject.defaultProfile.snippetsHome.toString(), joinPath(environmentService.userRoamingDataHome, 'snippets').toString());\n\t\tassert.strictEqual(testObject.defaultProfile.tasksResource.toString(), joinPath(environmentService.userRoamingDataHome, 'tasks.json').toString());\n\t\tassert.strictEqual(testObject.defaultProfile.extensionsResource.toString(), joinPath(environmentService.userRoamingDataHome, 'extensions.json').toString());\n\t});\n\n\ttest('profiles always include default profile', () => {\n\t\tassert.deepStrictEqual(testObject.profiles.length, 1);\n\t\tassert.deepStrictEqual(testObject.profiles[0].isDefault, true);\n\t});\n\n\ttest('create profile with id', async () => {\n\t\tconst profile = await testObject.createProfile('id', 'name');\n\t\tassert.deepStrictEqual(testObject.profiles.length, 2);\n\t\tassert.deepStrictEqual(profile.id, 'id');\n\t\tassert.deepStrictEqual(profile.name, 'name');\n\t\tassert.deepStrictEqual(!!profile.isTransient, false);\n\t\tassert.deepStrictEqual(testObject.profiles[1].id, profile.id);\n\t\tassert.deepStrictEqual(testObject.profiles[1].name, profile.name);\n\t});\n\n\ttest('create profile with id, name and transient', async () => {\n\t\tconst profile = await testObject.createProfile('id', 'name', { transient: true });\n\t\tassert.deepStrictEqual(testObject.profiles.length, 2);\n\t\tassert.deepStrictEqual(profile.id, 'id');\n\t\tassert.deepStrictEqual(profile.name, 'name');\n\t\tassert.deepStrictEqual(!!profile.isTransient, true);\n\t\tassert.deepStrictEqual(testObject.profiles[1].id, profile.id);\n\t});\n\n\ttest('create transient profiles', async () => {\n\t\tconst profile1 = await testObject.createTransientProfile();\n\t\tconst profile2 = await testObject.createTransientProfile();\n\t\tconst profile3 = await testObject.createTransientProfile();\n\t\tconst profile4 = await testObject.createProfile('id', 'name', { transient: true });\n\n\t\tassert.deepStrictEqual(testObject.profiles.length, 5);\n\t\tassert.deepStrictEqual(profile1.name, 'Temp 1');\n\t\tassert.deepStrictEqual(profile1.isTransient, true);\n\t\tassert.deepStrictEqual(testObject.profiles[1].id, profile1.id);\n\t\tassert.deepStrictEqual(profile2.name, 'Temp 2');\n\t\tassert.deepStrictEqual(profile2.isTransient, true);\n\t\tassert.deepStrictEqual(testObject.profiles[2].id, profile2.id);\n\t\tassert.deepStrictEqual(profile3.name, 'Temp 3');\n\t\tassert.deepStrictEqual(profile3.isTransient, true);\n\t\tassert.deepStrictEqual(testObject.profiles[3].id, profile3.id);\n\t\tassert.deepStrictEqual(profile4.name, 'name');\n\t\tassert.deepStrictEqual(profile4.isTransient, true);\n\t\tassert.deepStrictEqual(testObject.profiles[4].id, profile4.id);\n\t});\n\n\ttest('create transient profile when a normal profile with Temp is already created', async () => {\n\t\tawait testObject.createNamedProfile('Temp 1');\n\t\tconst profile1 = await testObject.createTransientProfile();\n\n\t\tassert.deepStrictEqual(profile1.name, 'Temp 2');\n\t\tassert.deepStrictEqual(profile1.isTransient, true);\n\t});\n\n\ttest('profiles include default profile with extension resource defined when transiet prrofile is created', async () => {\n\t\tawait testObject.createTransientProfile();\n\n\t\tassert.deepStrictEqual(testObject.profiles.length, 2);\n\t\tassert.deepStrictEqual(testObject.profiles[0].isDefault, true);\n\t});\n\n\ttest('profiles include default profile with extension resource undefined when transiet prrofile is removed', async () => {\n\t\tconst profile = await testObject.createTransientProfile();\n\t\tawait testObject.removeProfile(profile);\n\n\t\tassert.deepStrictEqual(testObject.profiles.length, 1);\n\t\tassert.deepStrictEqual(testObject.profiles[0].isDefault, true);\n\t});\n\n\ttest('update named profile', async () => {\n\t\tconst profile = await testObject.createNamedProfile('name');\n\t\tawait testObject.updateProfile(profile, { name: 'name changed' });\n\n\t\tassert.deepStrictEqual(testObject.profiles.length, 2);\n\t\tassert.deepStrictEqual(testObject.profiles[1].name, 'name changed');\n\t\tassert.deepStrictEqual(!!testObject.profiles[1].isTransient, false);\n\t\tassert.deepStrictEqual(testObject.profiles[1].id, profile.id);\n\t});\n\n\ttest('persist transient profile', async () => {\n\t\tconst profile = await testObject.createTransientProfile();\n\t\tawait testObject.updateProfile(profile, { name: 'saved', transient: false });\n\n\t\tassert.deepStrictEqual(testObject.profiles.length, 2);\n\t\tassert.deepStrictEqual(testObject.profiles[1].name, 'saved');\n\t\tassert.deepStrictEqual(!!testObject.profiles[1].isTransient, false);\n\t\tassert.deepStrictEqual(testObject.profiles[1].id, profile.id);\n\t});\n\n\ttest('persist transient profile (2)', async () => {\n\t\tconst profile = await testObject.createProfile('id', 'name', { transient: true });\n\t\tawait testObject.updateProfile(profile, { name: 'saved', transient: false });\n\n\t\tassert.deepStrictEqual(testObject.profiles.length, 2);\n\t\tassert.deepStrictEqual(testObject.profiles[1].name, 'saved');\n\t\tassert.deepStrictEqual(!!testObject.profiles[1].isTransient, false);\n\t\tassert.deepStrictEqual(testObject.profiles[1].id, profile.id);\n\t});\n\n\ttest('save transient profile', async () => {\n\t\tconst profile = await testObject.createTransientProfile();\n\t\tawait testObject.updateProfile(profile, { name: 'saved' });\n\n\t\tassert.deepStrictEqual(testObject.profiles.length, 2);\n\t\tassert.deepStrictEqual(testObject.profiles[1].name, 'saved');\n\t\tassert.deepStrictEqual(!!testObject.profiles[1].isTransient, true);\n\t\tassert.deepStrictEqual(testObject.profiles[1].id, profile.id);\n\t});\n\n\ttest('short name', async () => {\n\t\tconst profile = await testObject.createNamedProfile('name', { shortName: 'short' });\n\t\tassert.strictEqual(profile.shortName, 'short');\n\n\t\tawait testObject.updateProfile(profile, { shortName: 'short changed' });\n\n\t\tassert.deepStrictEqual(testObject.profiles.length, 2);\n\t\tassert.deepStrictEqual(testObject.profiles[1].name, 'name');\n\t\tassert.deepStrictEqual(testObject.profiles[1].shortName, 'short changed');\n\t\tassert.deepStrictEqual(!!testObject.profiles[1].isTransient, false);\n\t\tassert.deepStrictEqual(testObject.profiles[1].id, profile.id);\n\t});\n\n\ttest('profile using default profile for settings', async () => {\n\t\tconst profile = await testObject.createNamedProfile('name', { useDefaultFlags: { settings: true } });\n\n\t\tassert.strictEqual(profile.isDefault, false);\n\t\tassert.deepStrictEqual(profile.useDefaultFlags, { settings: true });\n\t\tassert.strictEqual(profile.settingsResource.toString(), testObject.defaultProfile.settingsResource.toString());\n\t});\n\n\ttest('profile using default profile for keybindings', async () => {\n\t\tconst profile = await testObject.createNamedProfile('name', { useDefaultFlags: { keybindings: true } });\n\n\t\tassert.strictEqual(profile.isDefault, false);\n\t\tassert.deepStrictEqual(profile.useDefaultFlags, { keybindings: true });\n\t\tassert.strictEqual(profile.keybindingsResource.toString(), testObject.defaultProfile.keybindingsResource.toString());\n\t});\n\n\ttest('profile using default profile for snippets', async () => {\n\t\tconst profile = await testObject.createNamedProfile('name', { useDefaultFlags: { snippets: true } });\n\n\t\tassert.strictEqual(profile.isDefault, false);\n\t\tassert.deepStrictEqual(profile.useDefaultFlags, { snippets: true });\n\t\tassert.strictEqual(profile.snippetsHome.toString(), testObject.defaultProfile.snippetsHome.toString());\n\t});\n\n\ttest('profile using default profile for tasks', async () => {\n\t\tconst profile = await testObject.createNamedProfile('name', { useDefaultFlags: { tasks: true } });\n\n\t\tassert.strictEqual(profile.isDefault, false);\n\t\tassert.deepStrictEqual(profile.useDefaultFlags, { tasks: true });\n\t\tassert.strictEqual(profile.tasksResource.toString(), testObject.defaultProfile.tasksResource.toString());\n\t});\n\n\ttest('profile using default profile for global state', async () => {\n\t\tconst profile = await testObject.createNamedProfile('name', { useDefaultFlags: { globalState: true } });\n\n\t\tassert.strictEqual(profile.isDefault, false);\n\t\tassert.deepStrictEqual(profile.useDefaultFlags, { globalState: true });\n\t\tassert.strictEqual(profile.globalStorageHome.toString(), testObject.defaultProfile.globalStorageHome.toString());\n\t});\n\n\ttest('profile using default profile for extensions', async () => {\n\t\tconst profile = await testObject.createNamedProfile('name', { useDefaultFlags: { extensions: true } });\n\n\t\tassert.strictEqual(profile.isDefault, false);\n\t\tassert.deepStrictEqual(profile.useDefaultFlags, { extensions: true });\n\t\tassert.strictEqual(profile.extensionsResource.toString(), testObject.defaultProfile.extensionsResource.toString());\n\t});\n\n\ttest('update profile using default profile for keybindings', async () => {\n\t\tlet profile = await testObject.createNamedProfile('name');\n\t\tprofile = await testObject.updateProfile(profile, { useDefaultFlags: { keybindings: true } });\n\n\t\tassert.strictEqual(profile.isDefault, false);\n\t\tassert.deepStrictEqual(profile.useDefaultFlags, { keybindings: true });\n\t\tassert.strictEqual(profile.keybindingsResource.toString(), testObject.defaultProfile.keybindingsResource.toString());\n\t});\n\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,kCAAkC;AAC3C,SAAS,wCAAwC;AACjD,OAAO,aAAa;AACpB,SAAS,iCAAiC,+BAA+B;AACzE,SAAS,0BAA0B;AACnC,SAAS,+CAA+C;AAExD,MAAM,OAAO,IAAI,KAAK,OAAO,EAAE,KAAK,EAAE,QAAQ,eAAe,CAAC;AAE9D,MAAM,+BAA+B,iCAAiC;AAAA,EACrE,YAA6B,kBAAuB;AACnD,UAAM,uBAAO,OAAO,IAAI,GAAG,uBAAO,OAAO,IAAI,GAAG,EAAE,eAAe,QAAW,GAAG,QAAQ,CAAC;AAD5D;AAAA,EAE7B;AAAA,EAvBD,OAoBsE;AAAA;AAAA;AAAA,EAIrE,IAAa,sBAAsB;AAAE,WAAO,KAAK,iBAAiB,KAAK,EAAE,QAAQ,QAAQ,eAAe,CAAC;AAAA,EAAG;AAAA,EAC5G,IAAa,YAAY;AAAE,WAAO,KAAK;AAAA,EAAqB;AAC7D;AAEA,MAAM,mCAAmC,MAAM;AAE9C,QAAM,cAAc,wCAAwC;AAC5D,MAAI;AACJ,MAAI;AAEJ,QAAM,YAAY;AACjB,UAAM,aAAa,IAAI,eAAe;AACtC,UAAM,cAAc,YAAY,IAAI,IAAI,YAAY,UAAU,CAAC;AAC/D,UAAM,qBAAqB,YAAY,IAAI,IAAI,2BAA2B,CAAC;AAC3E,gBAAY,IAAI,YAAY,iBAAiB,KAAK,QAAQ,kBAAkB,CAAC;AAC7E,gBAAY,IAAI,YAAY,iBAAiB,QAAQ,gBAAgB,kBAAkB,CAAC;AAExF,yBAAqB,IAAI,uBAAuB,SAAS,MAAM,MAAM,CAAC;AACtE,iBAAa,YAAY,IAAI,IAAI,gCAAgC,oBAAoB,aAAa,YAAY,IAAI,IAAI,mBAAmB,WAAW,CAAC,GAAG,UAAU,CAAC;AAAA,EACpK,CAAC;AAGD,OAAK,mBAAmB,MAAM;AAC7B,WAAO,YAAY,WAAW,eAAe,WAAW,IAAI;AAC5D,WAAO,YAAY,WAAW,eAAe,iBAAiB,MAAS;AACvE,WAAO,YAAY,WAAW,eAAe,SAAS,SAAS,GAAG,mBAAmB,oBAAoB,SAAS,CAAC;AACnH,WAAO,YAAY,WAAW,eAAe,kBAAkB,SAAS,GAAG,SAAS,mBAAmB,qBAAqB,eAAe,EAAE,SAAS,CAAC;AACvJ,WAAO,YAAY,WAAW,eAAe,oBAAoB,SAAS,GAAG,SAAS,mBAAmB,qBAAqB,kBAAkB,EAAE,SAAS,CAAC;AAC5J,WAAO,YAAY,WAAW,eAAe,iBAAiB,SAAS,GAAG,SAAS,mBAAmB,qBAAqB,eAAe,EAAE,SAAS,CAAC;AACtJ,WAAO,YAAY,WAAW,eAAe,aAAa,SAAS,GAAG,SAAS,mBAAmB,qBAAqB,UAAU,EAAE,SAAS,CAAC;AAC7I,WAAO,YAAY,WAAW,eAAe,cAAc,SAAS,GAAG,SAAS,mBAAmB,qBAAqB,YAAY,EAAE,SAAS,CAAC;AAChJ,WAAO,YAAY,WAAW,eAAe,mBAAmB,SAAS,GAAG,SAAS,mBAAmB,qBAAqB,iBAAiB,EAAE,SAAS,CAAC;AAAA,EAC3J,CAAC;AAED,OAAK,2CAA2C,MAAM;AACrD,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,WAAW,IAAI;AAAA,EAC9D,CAAC;AAED,OAAK,0BAA0B,YAAY;AAC1C,UAAM,UAAU,MAAM,WAAW,cAAc,MAAM,MAAM;AAC3D,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,QAAQ,IAAI,IAAI;AACvC,WAAO,gBAAgB,QAAQ,MAAM,MAAM;AAC3C,WAAO,gBAAgB,CAAC,CAAC,QAAQ,aAAa,KAAK;AACnD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,QAAQ,EAAE;AAC5D,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,MAAM,QAAQ,IAAI;AAAA,EACjE,CAAC;AAED,OAAK,8CAA8C,YAAY;AAC9D,UAAM,UAAU,MAAM,WAAW,cAAc,MAAM,QAAQ,EAAE,WAAW,KAAK,CAAC;AAChF,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,QAAQ,IAAI,IAAI;AACvC,WAAO,gBAAgB,QAAQ,MAAM,MAAM;AAC3C,WAAO,gBAAgB,CAAC,CAAC,QAAQ,aAAa,IAAI;AAClD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,QAAQ,EAAE;AAAA,EAC7D,CAAC;AAED,OAAK,6BAA6B,YAAY;AAC7C,UAAM,WAAW,MAAM,WAAW,uBAAuB;AACzD,UAAM,WAAW,MAAM,WAAW,uBAAuB;AACzD,UAAM,WAAW,MAAM,WAAW,uBAAuB;AACzD,UAAM,WAAW,MAAM,WAAW,cAAc,MAAM,QAAQ,EAAE,WAAW,KAAK,CAAC;AAEjF,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,SAAS,MAAM,QAAQ;AAC9C,WAAO,gBAAgB,SAAS,aAAa,IAAI;AACjD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,SAAS,EAAE;AAC7D,WAAO,gBAAgB,SAAS,MAAM,QAAQ;AAC9C,WAAO,gBAAgB,SAAS,aAAa,IAAI;AACjD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,SAAS,EAAE;AAC7D,WAAO,gBAAgB,SAAS,MAAM,QAAQ;AAC9C,WAAO,gBAAgB,SAAS,aAAa,IAAI;AACjD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,SAAS,EAAE;AAC7D,WAAO,gBAAgB,SAAS,MAAM,MAAM;AAC5C,WAAO,gBAAgB,SAAS,aAAa,IAAI;AACjD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,SAAS,EAAE;AAAA,EAC9D,CAAC;AAED,OAAK,+EAA+E,YAAY;AAC/F,UAAM,WAAW,mBAAmB,QAAQ;AAC5C,UAAM,WAAW,MAAM,WAAW,uBAAuB;AAEzD,WAAO,gBAAgB,SAAS,MAAM,QAAQ;AAC9C,WAAO,gBAAgB,SAAS,aAAa,IAAI;AAAA,EAClD,CAAC;AAED,OAAK,sGAAsG,YAAY;AACtH,UAAM,WAAW,uBAAuB;AAExC,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,WAAW,IAAI;AAAA,EAC9D,CAAC;AAED,OAAK,wGAAwG,YAAY;AACxH,UAAM,UAAU,MAAM,WAAW,uBAAuB;AACxD,UAAM,WAAW,cAAc,OAAO;AAEtC,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,WAAW,IAAI;AAAA,EAC9D,CAAC;AAED,OAAK,wBAAwB,YAAY;AACxC,UAAM,UAAU,MAAM,WAAW,mBAAmB,MAAM;AAC1D,UAAM,WAAW,cAAc,SAAS,EAAE,MAAM,eAAe,CAAC;AAEhE,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,MAAM,cAAc;AAClE,WAAO,gBAAgB,CAAC,CAAC,WAAW,SAAS,CAAC,EAAE,aAAa,KAAK;AAClE,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,QAAQ,EAAE;AAAA,EAC7D,CAAC;AAED,OAAK,6BAA6B,YAAY;AAC7C,UAAM,UAAU,MAAM,WAAW,uBAAuB;AACxD,UAAM,WAAW,cAAc,SAAS,EAAE,MAAM,SAAS,WAAW,MAAM,CAAC;AAE3E,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,MAAM,OAAO;AAC3D,WAAO,gBAAgB,CAAC,CAAC,WAAW,SAAS,CAAC,EAAE,aAAa,KAAK;AAClE,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,QAAQ,EAAE;AAAA,EAC7D,CAAC;AAED,OAAK,iCAAiC,YAAY;AACjD,UAAM,UAAU,MAAM,WAAW,cAAc,MAAM,QAAQ,EAAE,WAAW,KAAK,CAAC;AAChF,UAAM,WAAW,cAAc,SAAS,EAAE,MAAM,SAAS,WAAW,MAAM,CAAC;AAE3E,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,MAAM,OAAO;AAC3D,WAAO,gBAAgB,CAAC,CAAC,WAAW,SAAS,CAAC,EAAE,aAAa,KAAK;AAClE,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,QAAQ,EAAE;AAAA,EAC7D,CAAC;AAED,OAAK,0BAA0B,YAAY;AAC1C,UAAM,UAAU,MAAM,WAAW,uBAAuB;AACxD,UAAM,WAAW,cAAc,SAAS,EAAE,MAAM,QAAQ,CAAC;AAEzD,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,MAAM,OAAO;AAC3D,WAAO,gBAAgB,CAAC,CAAC,WAAW,SAAS,CAAC,EAAE,aAAa,IAAI;AACjE,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,QAAQ,EAAE;AAAA,EAC7D,CAAC;AAED,OAAK,cAAc,YAAY;AAC9B,UAAM,UAAU,MAAM,WAAW,mBAAmB,QAAQ,EAAE,WAAW,QAAQ,CAAC;AAClF,WAAO,YAAY,QAAQ,WAAW,OAAO;AAE7C,UAAM,WAAW,cAAc,SAAS,EAAE,WAAW,gBAAgB,CAAC;AAEtE,WAAO,gBAAgB,WAAW,SAAS,QAAQ,CAAC;AACpD,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,MAAM,MAAM;AAC1D,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,WAAW,eAAe;AACxE,WAAO,gBAAgB,CAAC,CAAC,WAAW,SAAS,CAAC,EAAE,aAAa,KAAK;AAClE,WAAO,gBAAgB,WAAW,SAAS,CAAC,EAAE,IAAI,QAAQ,EAAE;AAAA,EAC7D,CAAC;AAED,OAAK,8CAA8C,YAAY;AAC9D,UAAM,UAAU,MAAM,WAAW,mBAAmB,QAAQ,EAAE,iBAAiB,EAAE,UAAU,KAAK,EAAE,CAAC;AAEnG,WAAO,YAAY,QAAQ,WAAW,KAAK;AAC3C,WAAO,gBAAgB,QAAQ,iBAAiB,EAAE,UAAU,KAAK,CAAC;AAClE,WAAO,YAAY,QAAQ,iBAAiB,SAAS,GAAG,WAAW,eAAe,iBAAiB,SAAS,CAAC;AAAA,EAC9G,CAAC;AAED,OAAK,iDAAiD,YAAY;AACjE,UAAM,UAAU,MAAM,WAAW,mBAAmB,QAAQ,EAAE,iBAAiB,EAAE,aAAa,KAAK,EAAE,CAAC;AAEtG,WAAO,YAAY,QAAQ,WAAW,KAAK;AAC3C,WAAO,gBAAgB,QAAQ,iBAAiB,EAAE,aAAa,KAAK,CAAC;AACrE,WAAO,YAAY,QAAQ,oBAAoB,SAAS,GAAG,WAAW,eAAe,oBAAoB,SAAS,CAAC;AAAA,EACpH,CAAC;AAED,OAAK,8CAA8C,YAAY;AAC9D,UAAM,UAAU,MAAM,WAAW,mBAAmB,QAAQ,EAAE,iBAAiB,EAAE,UAAU,KAAK,EAAE,CAAC;AAEnG,WAAO,YAAY,QAAQ,WAAW,KAAK;AAC3C,WAAO,gBAAgB,QAAQ,iBAAiB,EAAE,UAAU,KAAK,CAAC;AAClE,WAAO,YAAY,QAAQ,aAAa,SAAS,GAAG,WAAW,eAAe,aAAa,SAAS,CAAC;AAAA,EACtG,CAAC;AAED,OAAK,2CAA2C,YAAY;AAC3D,UAAM,UAAU,MAAM,WAAW,mBAAmB,QAAQ,EAAE,iBAAiB,EAAE,OAAO,KAAK,EAAE,CAAC;AAEhG,WAAO,YAAY,QAAQ,WAAW,KAAK;AAC3C,WAAO,gBAAgB,QAAQ,iBAAiB,EAAE,OAAO,KAAK,CAAC;AAC/D,WAAO,YAAY,QAAQ,cAAc,SAAS,GAAG,WAAW,eAAe,cAAc,SAAS,CAAC;AAAA,EACxG,CAAC;AAED,OAAK,kDAAkD,YAAY;AAClE,UAAM,UAAU,MAAM,WAAW,mBAAmB,QAAQ,EAAE,iBAAiB,EAAE,aAAa,KAAK,EAAE,CAAC;AAEtG,WAAO,YAAY,QAAQ,WAAW,KAAK;AAC3C,WAAO,gBAAgB,QAAQ,iBAAiB,EAAE,aAAa,KAAK,CAAC;AACrE,WAAO,YAAY,QAAQ,kBAAkB,SAAS,GAAG,WAAW,eAAe,kBAAkB,SAAS,CAAC;AAAA,EAChH,CAAC;AAED,OAAK,gDAAgD,YAAY;AAChE,UAAM,UAAU,MAAM,WAAW,mBAAmB,QAAQ,EAAE,iBAAiB,EAAE,YAAY,KAAK,EAAE,CAAC;AAErG,WAAO,YAAY,QAAQ,WAAW,KAAK;AAC3C,WAAO,gBAAgB,QAAQ,iBAAiB,EAAE,YAAY,KAAK,CAAC;AACpE,WAAO,YAAY,QAAQ,mBAAmB,SAAS,GAAG,WAAW,eAAe,mBAAmB,SAAS,CAAC;AAAA,EAClH,CAAC;AAED,OAAK,wDAAwD,YAAY;AACxE,QAAI,UAAU,MAAM,WAAW,mBAAmB,MAAM;AACxD,cAAU,MAAM,WAAW,cAAc,SAAS,EAAE,iBAAiB,EAAE,aAAa,KAAK,EAAE,CAAC;AAE5F,WAAO,YAAY,QAAQ,WAAW,KAAK;AAC3C,WAAO,gBAAgB,QAAQ,iBAAiB,EAAE,aAAa,KAAK,CAAC;AACrE,WAAO,YAAY,QAAQ,oBAAoB,SAAS,GAAG,WAAW,eAAe,oBAAoB,SAAS,CAAC;AAAA,EACpH,CAAC;AAEF,CAAC;",
  "names": []
}
