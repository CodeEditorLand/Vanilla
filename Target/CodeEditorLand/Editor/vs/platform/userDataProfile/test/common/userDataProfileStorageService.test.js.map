{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/test/common/userDataProfileStorageService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { InMemoryStorageDatabase, IStorageItemsChangeEvent, IUpdateRequest, Storage } from '../../../../base/parts/storage/common/storage.js';\nimport { AbstractUserDataProfileStorageService, IUserDataProfileStorageService } from '../../common/userDataProfileStorageService.js';\nimport { InMemoryStorageService, loadKeyTargets, StorageTarget, TARGET_KEY } from '../../../storage/common/storage.js';\nimport { IUserDataProfile, toUserDataProfile } from '../../common/userDataProfile.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nclass TestStorageDatabase extends InMemoryStorageDatabase {\n\n\tprivate readonly _onDidChangeItemsExternal = new Emitter<IStorageItemsChangeEvent>();\n\toverride readonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\toverride async updateItems(request: IUpdateRequest): Promise<void> {\n\t\tawait super.updateItems(request);\n\t\tif (request.insert || request.delete) {\n\t\t\tthis._onDidChangeItemsExternal.fire({ changed: request.insert, deleted: request.delete });\n\t\t}\n\t}\n}\n\nexport class TestUserDataProfileStorageService extends AbstractUserDataProfileStorageService implements IUserDataProfileStorageService {\n\n\treadonly onDidChange = Event.None;\n\tprivate databases = new Map<string, InMemoryStorageDatabase>();\n\n\tprotected async createStorageDatabase(profile: IUserDataProfile): Promise<InMemoryStorageDatabase> {\n\t\tlet database = this.databases.get(profile.id);\n\t\tif (!database) {\n\t\t\tthis.databases.set(profile.id, database = new TestStorageDatabase());\n\t\t}\n\t\treturn database;\n\t}\n\n\tsetupStorageDatabase(profile: IUserDataProfile): Promise<InMemoryStorageDatabase> {\n\t\treturn this.createStorageDatabase(profile);\n\t}\n\n}\n\nsuite('ProfileStorageService', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tconst profile = toUserDataProfile('test', 'test', URI.file('foo'), URI.file('cache'));\n\tlet testObject: TestUserDataProfileStorageService;\n\tlet storage: Storage;\n\n\tsetup(async () => {\n\t\ttestObject = disposables.add(new TestUserDataProfileStorageService(false, disposables.add(new InMemoryStorageService())));\n\t\tstorage = disposables.add(new Storage(await testObject.setupStorageDatabase(profile)));\n\t\tawait storage.init();\n\t});\n\n\n\ttest('read empty storage', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst actual = await testObject.readStorageData(profile);\n\n\t\tassert.strictEqual(actual.size, 0);\n\t}));\n\n\ttest('read storage with data', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorage.set('foo', 'bar');\n\t\tstorage.set(TARGET_KEY, JSON.stringify({ foo: StorageTarget.USER }));\n\t\tawait storage.flush();\n\n\t\tconst actual = await testObject.readStorageData(profile);\n\n\t\tassert.strictEqual(actual.size, 1);\n\t\tassert.deepStrictEqual(actual.get('foo'), { 'value': 'bar', 'target': StorageTarget.USER });\n\t}));\n\n\ttest('write in empty storage', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst data = new Map<string, string>();\n\t\tdata.set('foo', 'bar');\n\t\tawait testObject.updateStorageData(profile, data, StorageTarget.USER);\n\n\t\tassert.strictEqual(storage.items.size, 2);\n\t\tassert.deepStrictEqual(loadKeyTargets(storage), { foo: StorageTarget.USER });\n\t\tassert.strictEqual(storage.get('foo'), 'bar');\n\t}));\n\n\ttest('write in storage with data', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorage.set('foo', 'bar');\n\t\tstorage.set(TARGET_KEY, JSON.stringify({ foo: StorageTarget.USER }));\n\t\tawait storage.flush();\n\n\t\tconst data = new Map<string, string>();\n\t\tdata.set('abc', 'xyz');\n\t\tawait testObject.updateStorageData(profile, data, StorageTarget.MACHINE);\n\n\t\tassert.strictEqual(storage.items.size, 3);\n\t\tassert.deepStrictEqual(loadKeyTargets(storage), { foo: StorageTarget.USER, abc: StorageTarget.MACHINE });\n\t\tassert.strictEqual(storage.get('foo'), 'bar');\n\t\tassert.strictEqual(storage.get('abc'), 'xyz');\n\t}));\n\n\ttest('write in storage with data (insert, update, remove)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorage.set('foo', 'bar');\n\t\tstorage.set('abc', 'xyz');\n\t\tstorage.set(TARGET_KEY, JSON.stringify({ foo: StorageTarget.USER, abc: StorageTarget.MACHINE }));\n\t\tawait storage.flush();\n\n\t\tconst data = new Map<string, string | undefined>();\n\t\tdata.set('foo', undefined);\n\t\tdata.set('abc', 'def');\n\t\tdata.set('var', 'const');\n\t\tawait testObject.updateStorageData(profile, data, StorageTarget.USER);\n\n\t\tassert.strictEqual(storage.items.size, 3);\n\t\tassert.deepStrictEqual(loadKeyTargets(storage), { abc: StorageTarget.USER, var: StorageTarget.USER });\n\t\tassert.strictEqual(storage.get('abc'), 'def');\n\t\tassert.strictEqual(storage.get('var'), 'const');\n\t}));\n\n});\n"],
  "mappings": "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",
  "names": []
}
