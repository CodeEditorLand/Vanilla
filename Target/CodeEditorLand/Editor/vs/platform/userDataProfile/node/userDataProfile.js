var h=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var c=(I,s,e,t)=>{for(var i=t>1?void 0:t?O(s,e):s,a=I.length-1,n;a>=0;a--)(n=I[a])&&(i=(t?n(s,e,i):n(i))||i);return t&&i&&h(s,e,i),i},o=(I,s)=>(e,t)=>s(e,t,I);import{URI as d}from"../../../base/common/uri.js";import{INativeEnvironmentService as v}from"../../environment/common/environment.js";import{IFileService as l}from"../../files/common/files.js";import{ILogService as p}from"../../log/common/log.js";import{IStateReadService as E,IStateService as P}from"../../state/node/state.js";import{IUriIdentityService as f}from"../../uriIdentity/common/uriIdentity.js";import{UserDataProfilesService as u}from"../common/userDataProfile.js";import{isString as R}from"../../../base/common/types.js";import{SaveStrategy as y,StateService as L}from"../../state/node/stateService.js";let S=class extends u{constructor(e,t,i,a,n){super(i,a,t,n);this.stateReadonlyService=e;this.nativeEnvironmentService=i}static PROFILE_ASSOCIATIONS_MIGRATION_KEY="profileAssociationsMigration";getStoredProfiles(){return this.stateReadonlyService.getItem(S.PROFILES_KEY,[]).map(t=>({...t,location:R(t.location)?this.uriIdentityService.extUri.joinPath(this.profilesHome,t.location):d.revive(t.location)}))}getStoredProfileAssociations(){const e=this.stateReadonlyService.getItem(S.PROFILE_ASSOCIATIONS_KEY,{});return this.stateReadonlyService.getItem(S.PROFILE_ASSOCIATIONS_MIGRATION_KEY,!1)?e:this.migrateStoredProfileAssociations(e)}getDefaultProfileExtensionsLocation(){return this.uriIdentityService.extUri.joinPath(d.file(this.nativeEnvironmentService.extensionsPath).with({scheme:this.profilesHome.scheme}),"extensions.json")}};S=c([o(0,E),o(1,f),o(2,v),o(3,l),o(4,p)],S);let r=class extends S{constructor(e,t,i,a,n){super(e,t,i,a,n);this.stateService=e}saveStoredProfiles(e){e.length?this.stateService.setItem(r.PROFILES_KEY,e.map(t=>({...t,location:this.uriIdentityService.extUri.basename(t.location)}))):this.stateService.removeItem(r.PROFILES_KEY)}getStoredProfiles(){const e=super.getStoredProfiles();return this.stateService.getItem("userDataProfilesMigration",!1)||(this.saveStoredProfiles(e),this.stateService.setItem("userDataProfilesMigration",!0)),e}saveStoredProfileAssociations(e){e.emptyWindows||e.workspaces?this.stateService.setItem(r.PROFILE_ASSOCIATIONS_KEY,e):this.stateService.removeItem(r.PROFILE_ASSOCIATIONS_KEY)}getStoredProfileAssociations(){const e="workspaceAndProfileInfo",t=this.stateService.getItem(e,void 0);if(t){this.stateService.removeItem(e);const a=t.reduce((n,{workspace:A,profile:g})=>(n[d.revive(A).toString()]=d.revive(g).toString(),n),{});this.stateService.setItem(r.PROFILE_ASSOCIATIONS_KEY,{workspaces:a})}const i=super.getStoredProfileAssociations();return this.stateService.getItem(r.PROFILE_ASSOCIATIONS_MIGRATION_KEY,!1)||(this.saveStoredProfileAssociations(i),this.stateService.setItem(r.PROFILE_ASSOCIATIONS_MIGRATION_KEY,!0)),i}};r=c([o(0,P),o(1,f),o(2,v),o(3,l),o(4,p)],r);let m=class extends r{constructor(s,e,t,i){super(new L(y.IMMEDIATE,e,i,t),s,e,t,i)}async init(){return await this.stateService.init(),super.init()}};m=c([o(0,f),o(1,v),o(2,l),o(3,p)],m);export{m as ServerUserDataProfilesService,S as UserDataProfilesReadonlyService,r as UserDataProfilesService};
