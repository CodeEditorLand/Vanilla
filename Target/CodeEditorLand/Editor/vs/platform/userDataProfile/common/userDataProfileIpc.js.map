{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/common/userDataProfileIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { IChannel, IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { URI, UriDto } from '../../../base/common/uri.js';\nimport { DidChangeProfilesEvent, IUserDataProfile, IUserDataProfileOptions, IUserDataProfilesService, IUserDataProfileUpdateOptions, reviveProfile } from './userDataProfile.js';\nimport { IAnyWorkspaceIdentifier } from '../../workspace/common/workspace.js';\nimport { IURITransformer, transformIncomingURIs, transformOutgoingURIs } from '../../../base/common/uriIpc.js';\n\nexport class RemoteUserDataProfilesServiceChannel implements IServerChannel {\n\n\tconstructor(\n\t\tprivate readonly service: IUserDataProfilesService,\n\t\tprivate readonly getUriTransformer: (requestContext: any) => IURITransformer\n\t) { }\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeProfiles': return Event.map<DidChangeProfilesEvent, DidChangeProfilesEvent>(this.service.onDidChangeProfiles, e => {\n\t\t\t\treturn {\n\t\t\t\t\tall: e.all.map(p => transformOutgoingURIs({ ...p }, uriTransformer)),\n\t\t\t\t\tadded: e.added.map(p => transformOutgoingURIs({ ...p }, uriTransformer)),\n\t\t\t\t\tremoved: e.removed.map(p => transformOutgoingURIs({ ...p }, uriTransformer)),\n\t\t\t\t\tupdated: e.updated.map(p => transformOutgoingURIs({ ...p }, uriTransformer))\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\tthrow new Error(`Invalid listen ${event}`);\n\t}\n\n\tasync call(context: any, command: string, args?: any): Promise<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (command) {\n\t\t\tcase 'createProfile': {\n\t\t\t\tconst profile = await this.service.createProfile(args[0], args[1], args[2]);\n\t\t\t\treturn transformOutgoingURIs({ ...profile }, uriTransformer);\n\t\t\t}\n\t\t\tcase 'updateProfile': {\n\t\t\t\tlet profile = reviveProfile(transformIncomingURIs(args[0], uriTransformer), this.service.profilesHome.scheme);\n\t\t\t\tprofile = await this.service.updateProfile(profile, args[1]);\n\t\t\t\treturn transformOutgoingURIs({ ...profile }, uriTransformer);\n\t\t\t}\n\t\t\tcase 'removeProfile': {\n\t\t\t\tconst profile = reviveProfile(transformIncomingURIs(args[0], uriTransformer), this.service.profilesHome.scheme);\n\t\t\t\treturn this.service.removeProfile(profile);\n\t\t\t}\n\t\t}\n\t\tthrow new Error(`Invalid call ${command}`);\n\t}\n}\n\nexport class UserDataProfilesService extends Disposable implements IUserDataProfilesService {\n\n\treadonly _serviceBrand: undefined;\n\n\tget defaultProfile(): IUserDataProfile { return this.profiles[0]; }\n\tprivate _profiles: IUserDataProfile[] = [];\n\tget profiles(): IUserDataProfile[] { return this._profiles; }\n\n\tprivate readonly _onDidChangeProfiles = this._register(new Emitter<DidChangeProfilesEvent>());\n\treadonly onDidChangeProfiles = this._onDidChangeProfiles.event;\n\n\treadonly onDidResetWorkspaces: Event<void>;\n\n\tprivate enabled: boolean = true;\n\n\tconstructor(\n\t\tprofiles: readonly UriDto<IUserDataProfile>[],\n\t\treadonly profilesHome: URI,\n\t\tprivate readonly channel: IChannel,\n\t) {\n\t\tsuper();\n\t\tthis._profiles = profiles.map(profile => reviveProfile(profile, this.profilesHome.scheme));\n\t\tthis._register(this.channel.listen<DidChangeProfilesEvent>('onDidChangeProfiles')(e => {\n\t\t\tconst added = e.added.map(profile => reviveProfile(profile, this.profilesHome.scheme));\n\t\t\tconst removed = e.removed.map(profile => reviveProfile(profile, this.profilesHome.scheme));\n\t\t\tconst updated = e.updated.map(profile => reviveProfile(profile, this.profilesHome.scheme));\n\t\t\tthis._profiles = e.all.map(profile => reviveProfile(profile, this.profilesHome.scheme));\n\t\t\tthis._onDidChangeProfiles.fire({ added, removed, updated, all: this.profiles });\n\t\t}));\n\t\tthis.onDidResetWorkspaces = this.channel.listen<void>('onDidResetWorkspaces');\n\t}\n\n\tsetEnablement(enabled: boolean) {\n\t\tthis.enabled = enabled;\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tasync createNamedProfile(name: string, options?: IUserDataProfileOptions, workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile> {\n\t\tconst result = await this.channel.call<UriDto<IUserDataProfile>>('createNamedProfile', [name, options, workspaceIdentifier]);\n\t\treturn reviveProfile(result, this.profilesHome.scheme);\n\t}\n\n\tasync createProfile(id: string, name: string, options?: IUserDataProfileOptions, workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile> {\n\t\tconst result = await this.channel.call<UriDto<IUserDataProfile>>('createProfile', [id, name, options, workspaceIdentifier]);\n\t\treturn reviveProfile(result, this.profilesHome.scheme);\n\t}\n\n\tasync createTransientProfile(workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile> {\n\t\tconst result = await this.channel.call<UriDto<IUserDataProfile>>('createTransientProfile', [workspaceIdentifier]);\n\t\treturn reviveProfile(result, this.profilesHome.scheme);\n\t}\n\n\tasync setProfileForWorkspace(workspaceIdentifier: IAnyWorkspaceIdentifier, profile: IUserDataProfile): Promise<void> {\n\t\tawait this.channel.call<UriDto<IUserDataProfile>>('setProfileForWorkspace', [workspaceIdentifier, profile]);\n\t}\n\n\tremoveProfile(profile: IUserDataProfile): Promise<void> {\n\t\treturn this.channel.call('removeProfile', [profile]);\n\t}\n\n\tasync updateProfile(profile: IUserDataProfile, updateOptions: IUserDataProfileUpdateOptions): Promise<IUserDataProfile> {\n\t\tconst result = await this.channel.call<UriDto<IUserDataProfile>>('updateProfile', [profile, updateOptions]);\n\t\treturn reviveProfile(result, this.profilesHome.scheme);\n\t}\n\n\tresetWorkspaces(): Promise<void> {\n\t\treturn this.channel.call('resetWorkspaces');\n\t}\n\n\tcleanUp(): Promise<void> {\n\t\treturn this.channel.call('cleanUp');\n\t}\n\n\tcleanUpTransientProfiles(): Promise<void> {\n\t\treturn this.channel.call('cleanUpTransientProfiles');\n\t}\n\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,UAAU,sBAAsB;AACzC,SAAS,KAAK,cAAc;AAC5B,SAAS,wBAAwB,kBAAkB,yBAAyB,0BAA0B,+BAA+B,qBAAqB;AAC1J,SAAS,+BAA+B;AACxC,SAAS,iBAAiB,uBAAuB,6BAA6B;AAEvE,MAAM,qCAA+D;AAAA,EAE3E,YACkB,SACA,mBAChB;AAFgB;AACA;AAAA,EACd;AAAA,EAlBL,OAa4E;AAAA;AAAA;AAAA,EAO3E,OAAO,SAAc,OAA2B;AAC/C,UAAM,iBAAiB,KAAK,kBAAkB,OAAO;AACrD,YAAQ,OAAO;AAAA,MACd,KAAK;AAAuB,eAAO,MAAM,IAAoD,KAAK,QAAQ,qBAAqB,OAAK;AACnI,iBAAO;AAAA,YACN,KAAK,EAAE,IAAI,IAAI,OAAK,sBAAsB,EAAE,GAAG,EAAE,GAAG,cAAc,CAAC;AAAA,YACnE,OAAO,EAAE,MAAM,IAAI,OAAK,sBAAsB,EAAE,GAAG,EAAE,GAAG,cAAc,CAAC;AAAA,YACvE,SAAS,EAAE,QAAQ,IAAI,OAAK,sBAAsB,EAAE,GAAG,EAAE,GAAG,cAAc,CAAC;AAAA,YAC3E,SAAS,EAAE,QAAQ,IAAI,OAAK,sBAAsB,EAAE,GAAG,EAAE,GAAG,cAAc,CAAC;AAAA,UAC5E;AAAA,QACD,CAAC;AAAA,IACF;AACA,UAAM,IAAI,MAAM,kBAAkB,KAAK,EAAE;AAAA,EAC1C;AAAA,EAEA,MAAM,KAAK,SAAc,SAAiB,MAA0B;AACnE,UAAM,iBAAiB,KAAK,kBAAkB,OAAO;AACrD,YAAQ,SAAS;AAAA,MAChB,KAAK,iBAAiB;AACrB,cAAM,UAAU,MAAM,KAAK,QAAQ,cAAc,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAC1E,eAAO,sBAAsB,EAAE,GAAG,QAAQ,GAAG,cAAc;AAAA,MAC5D;AAAA,MACA,KAAK,iBAAiB;AACrB,YAAI,UAAU,cAAc,sBAAsB,KAAK,CAAC,GAAG,cAAc,GAAG,KAAK,QAAQ,aAAa,MAAM;AAC5G,kBAAU,MAAM,KAAK,QAAQ,cAAc,SAAS,KAAK,CAAC,CAAC;AAC3D,eAAO,sBAAsB,EAAE,GAAG,QAAQ,GAAG,cAAc;AAAA,MAC5D;AAAA,MACA,KAAK,iBAAiB;AACrB,cAAM,UAAU,cAAc,sBAAsB,KAAK,CAAC,GAAG,cAAc,GAAG,KAAK,QAAQ,aAAa,MAAM;AAC9G,eAAO,KAAK,QAAQ,cAAc,OAAO;AAAA,MAC1C;AAAA,IACD;AACA,UAAM,IAAI,MAAM,gBAAgB,OAAO,EAAE;AAAA,EAC1C;AACD;AAEO,MAAM,gCAAgC,WAA+C;AAAA,EAe3F,YACC,UACS,cACQ,SAChB;AACD,UAAM;AAHG;AACQ;AAGjB,SAAK,YAAY,SAAS,IAAI,aAAW,cAAc,SAAS,KAAK,aAAa,MAAM,CAAC;AACzF,SAAK,UAAU,KAAK,QAAQ,OAA+B,qBAAqB,EAAE,OAAK;AACtF,YAAM,QAAQ,EAAE,MAAM,IAAI,aAAW,cAAc,SAAS,KAAK,aAAa,MAAM,CAAC;AACrF,YAAM,UAAU,EAAE,QAAQ,IAAI,aAAW,cAAc,SAAS,KAAK,aAAa,MAAM,CAAC;AACzF,YAAM,UAAU,EAAE,QAAQ,IAAI,aAAW,cAAc,SAAS,KAAK,aAAa,MAAM,CAAC;AACzF,WAAK,YAAY,EAAE,IAAI,IAAI,aAAW,cAAc,SAAS,KAAK,aAAa,MAAM,CAAC;AACtF,WAAK,qBAAqB,KAAK,EAAE,OAAO,SAAS,SAAS,KAAK,KAAK,SAAS,CAAC;AAAA,IAC/E,CAAC,CAAC;AACF,SAAK,uBAAuB,KAAK,QAAQ,OAAa,sBAAsB;AAAA,EAC7E;AAAA,EAtFD,OAwD4F;AAAA;AAAA;AAAA,EAElF;AAAA,EAET,IAAI,iBAAmC;AAAE,WAAO,KAAK,SAAS,CAAC;AAAA,EAAG;AAAA,EAC1D,YAAgC,CAAC;AAAA,EACzC,IAAI,WAA+B;AAAE,WAAO,KAAK;AAAA,EAAW;AAAA,EAE3C,uBAAuB,KAAK,UAAU,IAAI,QAAgC,CAAC;AAAA,EACnF,sBAAsB,KAAK,qBAAqB;AAAA,EAEhD;AAAA,EAED,UAAmB;AAAA,EAmB3B,cAAc,SAAkB;AAC/B,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,YAAqB;AACpB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAM,mBAAmB,MAAc,SAAmC,qBAA0E;AACnJ,UAAM,SAAS,MAAM,KAAK,QAAQ,KAA+B,sBAAsB,CAAC,MAAM,SAAS,mBAAmB,CAAC;AAC3H,WAAO,cAAc,QAAQ,KAAK,aAAa,MAAM;AAAA,EACtD;AAAA,EAEA,MAAM,cAAc,IAAY,MAAc,SAAmC,qBAA0E;AAC1J,UAAM,SAAS,MAAM,KAAK,QAAQ,KAA+B,iBAAiB,CAAC,IAAI,MAAM,SAAS,mBAAmB,CAAC;AAC1H,WAAO,cAAc,QAAQ,KAAK,aAAa,MAAM;AAAA,EACtD;AAAA,EAEA,MAAM,uBAAuB,qBAA0E;AACtG,UAAM,SAAS,MAAM,KAAK,QAAQ,KAA+B,0BAA0B,CAAC,mBAAmB,CAAC;AAChH,WAAO,cAAc,QAAQ,KAAK,aAAa,MAAM;AAAA,EACtD;AAAA,EAEA,MAAM,uBAAuB,qBAA8C,SAA0C;AACpH,UAAM,KAAK,QAAQ,KAA+B,0BAA0B,CAAC,qBAAqB,OAAO,CAAC;AAAA,EAC3G;AAAA,EAEA,cAAc,SAA0C;AACvD,WAAO,KAAK,QAAQ,KAAK,iBAAiB,CAAC,OAAO,CAAC;AAAA,EACpD;AAAA,EAEA,MAAM,cAAc,SAA2B,eAAyE;AACvH,UAAM,SAAS,MAAM,KAAK,QAAQ,KAA+B,iBAAiB,CAAC,SAAS,aAAa,CAAC;AAC1G,WAAO,cAAc,QAAQ,KAAK,aAAa,MAAM;AAAA,EACtD;AAAA,EAEA,kBAAiC;AAChC,WAAO,KAAK,QAAQ,KAAK,iBAAiB;AAAA,EAC3C;AAAA,EAEA,UAAyB;AACxB,WAAO,KAAK,QAAQ,KAAK,SAAS;AAAA,EACnC;AAAA,EAEA,2BAA0C;AACzC,WAAO,KAAK,QAAQ,KAAK,0BAA0B;AAAA,EACpD;AAED;",
  "names": []
}
