{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/common/userDataProfileIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI, UriDto } from \"../../../base/common/uri.js\";\nimport {\n\ttype IURITransformer,\n\ttransformIncomingURIs,\n\ttransformOutgoingURIs,\n} from \"../../../base/common/uriIpc.js\";\nimport type {\n\tIChannel,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport type { IAnyWorkspaceIdentifier } from \"../../workspace/common/workspace.js\";\nimport {\n\ttype DidChangeProfilesEvent,\n\ttype IUserDataProfile,\n\ttype IUserDataProfileOptions,\n\ttype IUserDataProfileUpdateOptions,\n\ttype IUserDataProfilesService,\n\treviveProfile,\n} from \"./userDataProfile.js\";\n\nexport class RemoteUserDataProfilesServiceChannel implements IServerChannel {\n\tconstructor(\n\t\tprivate readonly service: IUserDataProfilesService,\n\t\tprivate readonly getUriTransformer: (\n\t\t\trequestContext: any,\n\t\t) => IURITransformer,\n\t) {}\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (event) {\n\t\t\tcase \"onDidChangeProfiles\":\n\t\t\t\treturn Event.map<\n\t\t\t\t\tDidChangeProfilesEvent,\n\t\t\t\t\tDidChangeProfilesEvent\n\t\t\t\t>(this.service.onDidChangeProfiles, (e) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tall: e.all.map((p) =>\n\t\t\t\t\t\t\ttransformOutgoingURIs({ ...p }, uriTransformer),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tadded: e.added.map((p) =>\n\t\t\t\t\t\t\ttransformOutgoingURIs({ ...p }, uriTransformer),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tremoved: e.removed.map((p) =>\n\t\t\t\t\t\t\ttransformOutgoingURIs({ ...p }, uriTransformer),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tupdated: e.updated.map((p) =>\n\t\t\t\t\t\t\ttransformOutgoingURIs({ ...p }, uriTransformer),\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t}\n\t\tthrow new Error(`Invalid listen ${event}`);\n\t}\n\n\tasync call(context: any, command: string, args?: any): Promise<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (command) {\n\t\t\tcase \"createProfile\": {\n\t\t\t\tconst profile = await this.service.createProfile(\n\t\t\t\t\targs[0],\n\t\t\t\t\targs[1],\n\t\t\t\t\targs[2],\n\t\t\t\t);\n\t\t\t\treturn transformOutgoingURIs({ ...profile }, uriTransformer);\n\t\t\t}\n\t\t\tcase \"updateProfile\": {\n\t\t\t\tlet profile = reviveProfile(\n\t\t\t\t\ttransformIncomingURIs(args[0], uriTransformer),\n\t\t\t\t\tthis.service.profilesHome.scheme,\n\t\t\t\t);\n\t\t\t\tprofile = await this.service.updateProfile(profile, args[1]);\n\t\t\t\treturn transformOutgoingURIs({ ...profile }, uriTransformer);\n\t\t\t}\n\t\t\tcase \"removeProfile\": {\n\t\t\t\tconst profile = reviveProfile(\n\t\t\t\t\ttransformIncomingURIs(args[0], uriTransformer),\n\t\t\t\t\tthis.service.profilesHome.scheme,\n\t\t\t\t);\n\t\t\t\treturn this.service.removeProfile(profile);\n\t\t\t}\n\t\t}\n\t\tthrow new Error(`Invalid call ${command}`);\n\t}\n}\n\nexport class UserDataProfilesService\n\textends Disposable\n\timplements IUserDataProfilesService\n{\n\treadonly _serviceBrand: undefined;\n\n\tget defaultProfile(): IUserDataProfile {\n\t\treturn this.profiles[0];\n\t}\n\tprivate _profiles: IUserDataProfile[] = [];\n\tget profiles(): IUserDataProfile[] {\n\t\treturn this._profiles;\n\t}\n\n\tprivate readonly _onDidChangeProfiles = this._register(\n\t\tnew Emitter<DidChangeProfilesEvent>(),\n\t);\n\treadonly onDidChangeProfiles = this._onDidChangeProfiles.event;\n\n\treadonly onDidResetWorkspaces: Event<void>;\n\n\tprivate enabled = true;\n\n\tconstructor(\n\t\tprofiles: readonly UriDto<IUserDataProfile>[],\n\t\treadonly profilesHome: URI,\n\t\tprivate readonly channel: IChannel,\n\t) {\n\t\tsuper();\n\t\tthis._profiles = profiles.map((profile) =>\n\t\t\treviveProfile(profile, this.profilesHome.scheme),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.channel.listen<DidChangeProfilesEvent>(\"onDidChangeProfiles\")(\n\t\t\t\t(e) => {\n\t\t\t\t\tconst added = e.added.map((profile) =>\n\t\t\t\t\t\treviveProfile(profile, this.profilesHome.scheme),\n\t\t\t\t\t);\n\t\t\t\t\tconst removed = e.removed.map((profile) =>\n\t\t\t\t\t\treviveProfile(profile, this.profilesHome.scheme),\n\t\t\t\t\t);\n\t\t\t\t\tconst updated = e.updated.map((profile) =>\n\t\t\t\t\t\treviveProfile(profile, this.profilesHome.scheme),\n\t\t\t\t\t);\n\t\t\t\t\tthis._profiles = e.all.map((profile) =>\n\t\t\t\t\t\treviveProfile(profile, this.profilesHome.scheme),\n\t\t\t\t\t);\n\t\t\t\t\tthis._onDidChangeProfiles.fire({\n\t\t\t\t\t\tadded,\n\t\t\t\t\t\tremoved,\n\t\t\t\t\t\tupdated,\n\t\t\t\t\t\tall: this.profiles,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\tthis.onDidResetWorkspaces = this.channel.listen<void>(\n\t\t\t\"onDidResetWorkspaces\",\n\t\t);\n\t}\n\n\tsetEnablement(enabled: boolean) {\n\t\tthis.enabled = enabled;\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tasync createNamedProfile(\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile> {\n\t\tconst result = await this.channel.call<UriDto<IUserDataProfile>>(\n\t\t\t\"createNamedProfile\",\n\t\t\t[name, options, workspaceIdentifier],\n\t\t);\n\t\treturn reviveProfile(result, this.profilesHome.scheme);\n\t}\n\n\tasync createProfile(\n\t\tid: string,\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile> {\n\t\tconst result = await this.channel.call<UriDto<IUserDataProfile>>(\n\t\t\t\"createProfile\",\n\t\t\t[id, name, options, workspaceIdentifier],\n\t\t);\n\t\treturn reviveProfile(result, this.profilesHome.scheme);\n\t}\n\n\tasync createTransientProfile(\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile> {\n\t\tconst result = await this.channel.call<UriDto<IUserDataProfile>>(\n\t\t\t\"createTransientProfile\",\n\t\t\t[workspaceIdentifier],\n\t\t);\n\t\treturn reviveProfile(result, this.profilesHome.scheme);\n\t}\n\n\tasync setProfileForWorkspace(\n\t\tworkspaceIdentifier: IAnyWorkspaceIdentifier,\n\t\tprofile: IUserDataProfile,\n\t): Promise<void> {\n\t\tawait this.channel.call<UriDto<IUserDataProfile>>(\n\t\t\t\"setProfileForWorkspace\",\n\t\t\t[workspaceIdentifier, profile],\n\t\t);\n\t}\n\n\tremoveProfile(profile: IUserDataProfile): Promise<void> {\n\t\treturn this.channel.call(\"removeProfile\", [profile]);\n\t}\n\n\tasync updateProfile(\n\t\tprofile: IUserDataProfile,\n\t\tupdateOptions: IUserDataProfileUpdateOptions,\n\t): Promise<IUserDataProfile> {\n\t\tconst result = await this.channel.call<UriDto<IUserDataProfile>>(\n\t\t\t\"updateProfile\",\n\t\t\t[profile, updateOptions],\n\t\t);\n\t\treturn reviveProfile(result, this.profilesHome.scheme);\n\t}\n\n\tresetWorkspaces(): Promise<void> {\n\t\treturn this.channel.call(\"resetWorkspaces\");\n\t}\n\n\tcleanUp(): Promise<void> {\n\t\treturn this.channel.call(\"cleanUp\");\n\t}\n\n\tcleanUpTransientProfiles(): Promise<void> {\n\t\treturn this.channel.call(\"cleanUpTransientProfiles\");\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
