{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/common/userDataProfileStorageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\tMutableDisposable,\n\tisDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype IStorage,\n\ttype IStorageDatabase,\n\tStorage,\n} from \"../../../base/parts/storage/common/storage.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type { IRemoteService } from \"../../ipc/common/services.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport {\n\tAbstractStorageService,\n\tIStorageService,\n\ttype IStorageValueChangeEvent,\n\tStorageScope,\n\tStorageTarget,\n\tisProfileUsingDefaultStorage,\n} from \"../../storage/common/storage.js\";\nimport {\n\tApplicationStorageDatabaseClient,\n\tProfileStorageDatabaseClient,\n} from \"../../storage/common/storageIpc.js\";\nimport {\n\ttype IUserDataProfile,\n\ttype IUserDataProfilesService,\n\treviveProfile,\n} from \"./userDataProfile.js\";\n\nexport interface IProfileStorageValueChanges {\n\treadonly profile: IUserDataProfile;\n\treadonly changes: IStorageValueChangeEvent[];\n}\n\nexport interface IProfileStorageChanges {\n\treadonly targetChanges: IUserDataProfile[];\n\treadonly valueChanges: IProfileStorageValueChanges[];\n}\n\nexport interface IStorageValue {\n\treadonly value: string | undefined;\n\treadonly target: StorageTarget;\n}\n\nexport const IUserDataProfileStorageService =\n\tcreateDecorator<IUserDataProfileStorageService>(\n\t\t\"IUserDataProfileStorageService\",\n\t);\nexport interface IUserDataProfileStorageService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emitted whenever data is updated or deleted in a profile storage or target of a profile storage entry changes\n\t */\n\treadonly onDidChange: Event<IProfileStorageChanges>;\n\n\t/**\n\t * Return the requested profile storage data\n\t * @param profile The profile from which the data has to be read from\n\t */\n\treadStorageData(\n\t\tprofile: IUserDataProfile,\n\t): Promise<Map<string, IStorageValue>>;\n\n\t/**\n\t * Update the given profile storage data in the profile storage\n\t * @param profile The profile to which the data has to be written to\n\t * @param data Data that has to be updated\n\t * @param target Storage target of the data\n\t */\n\tupdateStorageData(\n\t\tprofile: IUserDataProfile,\n\t\tdata: Map<string, string | undefined | null>,\n\t\ttarget: StorageTarget,\n\t): Promise<void>;\n\n\t/**\n\t * Calls a function with a storage service scoped to given profile.\n\t */\n\twithProfileScopedStorageService<T>(\n\t\tprofile: IUserDataProfile,\n\t\tfn: (storageService: IStorageService) => Promise<T>,\n\t): Promise<T>;\n}\n\nexport abstract class AbstractUserDataProfileStorageService\n\textends Disposable\n\timplements IUserDataProfileStorageService\n{\n\t_serviceBrand: undefined;\n\n\tabstract readonly onDidChange: Event<IProfileStorageChanges>;\n\n\tprivate readonly storageServicesMap:\n\t\t| DisposableMap<string, StorageService>\n\t\t| undefined;\n\n\tconstructor(\n\t\tpersistStorages: boolean,\n\t\t@IStorageService protected readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tif (persistStorages) {\n\t\t\tthis.storageServicesMap = this._register(\n\t\t\t\tnew DisposableMap<string, StorageService>(),\n\t\t\t);\n\t\t}\n\t}\n\n\tasync readStorageData(\n\t\tprofile: IUserDataProfile,\n\t): Promise<Map<string, IStorageValue>> {\n\t\treturn this.withProfileScopedStorageService(\n\t\t\tprofile,\n\t\t\tasync (storageService) => this.getItems(storageService),\n\t\t);\n\t}\n\n\tasync updateStorageData(\n\t\tprofile: IUserDataProfile,\n\t\tdata: Map<string, string | undefined | null>,\n\t\ttarget: StorageTarget,\n\t): Promise<void> {\n\t\treturn this.withProfileScopedStorageService(\n\t\t\tprofile,\n\t\t\tasync (storageService) =>\n\t\t\t\tthis.writeItems(storageService, data, target),\n\t\t);\n\t}\n\n\tasync withProfileScopedStorageService<T>(\n\t\tprofile: IUserDataProfile,\n\t\tfn: (storageService: IStorageService) => Promise<T>,\n\t): Promise<T> {\n\t\tif (this.storageService.hasScope(profile)) {\n\t\t\treturn fn(this.storageService);\n\t\t}\n\n\t\tlet storageService = this.storageServicesMap?.get(profile.id);\n\t\tif (!storageService) {\n\t\t\tstorageService = new StorageService(\n\t\t\t\tthis.createStorageDatabase(profile),\n\t\t\t);\n\t\t\tthis.storageServicesMap?.set(profile.id, storageService);\n\n\t\t\ttry {\n\t\t\t\tawait storageService.initialize();\n\t\t\t} catch (error) {\n\t\t\t\tif (this.storageServicesMap?.has(profile.id)) {\n\t\t\t\t\tthis.storageServicesMap.deleteAndDispose(profile.id);\n\t\t\t\t} else {\n\t\t\t\t\tstorageService.dispose();\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tconst result = await fn(storageService);\n\t\t\tawait storageService.flush();\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tif (!this.storageServicesMap?.has(profile.id)) {\n\t\t\t\tstorageService.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getItems(\n\t\tstorageService: IStorageService,\n\t): Map<string, IStorageValue> {\n\t\tconst result = new Map<string, IStorageValue>();\n\t\tconst populate = (target: StorageTarget) => {\n\t\t\tfor (const key of storageService.keys(\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\ttarget,\n\t\t\t)) {\n\t\t\t\tresult.set(key, {\n\t\t\t\t\tvalue: storageService.get(key, StorageScope.PROFILE),\n\t\t\t\t\ttarget,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tpopulate(StorageTarget.USER);\n\t\tpopulate(StorageTarget.MACHINE);\n\t\treturn result;\n\t}\n\n\tprivate writeItems(\n\t\tstorageService: IStorageService,\n\t\titems: Map<string, string | undefined | null>,\n\t\ttarget: StorageTarget,\n\t): void {\n\t\tstorageService.storeAll(\n\t\t\tArray.from(items.entries()).map(([key, value]) => ({\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t\tscope: StorageScope.PROFILE,\n\t\t\t\ttarget,\n\t\t\t})),\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tprotected abstract createStorageDatabase(\n\t\tprofile: IUserDataProfile,\n\t): Promise<IStorageDatabase>;\n}\n\nexport class RemoteUserDataProfileStorageService\n\textends AbstractUserDataProfileStorageService\n\timplements IUserDataProfileStorageService\n{\n\tprivate readonly _onDidChange: Emitter<IProfileStorageChanges>;\n\treadonly onDidChange: Event<IProfileStorageChanges>;\n\n\tconstructor(\n\t\tpersistStorages: boolean,\n\t\tprivate readonly remoteService: IRemoteService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\tstorageService: IStorageService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(persistStorages, storageService);\n\n\t\tconst channel = remoteService.getChannel(\"profileStorageListener\");\n\t\tconst disposable = this._register(new MutableDisposable());\n\t\tthis._onDidChange = this._register(\n\t\t\tnew Emitter<IProfileStorageChanges>({\n\t\t\t\t// Start listening to profile storage changes only when someone is listening\n\t\t\t\tonWillAddFirstListener: () => {\n\t\t\t\t\tdisposable.value = channel.listen<IProfileStorageChanges>(\n\t\t\t\t\t\t\"onDidChange\",\n\t\t\t\t\t)((e) => {\n\t\t\t\t\t\tlogService.trace(\"profile storage changes\", e);\n\t\t\t\t\t\tthis._onDidChange.fire({\n\t\t\t\t\t\t\ttargetChanges: e.targetChanges.map((profile) =>\n\t\t\t\t\t\t\t\treviveProfile(\n\t\t\t\t\t\t\t\t\tprofile,\n\t\t\t\t\t\t\t\t\tuserDataProfilesService.profilesHome.scheme,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tvalueChanges: e.valueChanges.map((e) => ({\n\t\t\t\t\t\t\t\t...e,\n\t\t\t\t\t\t\t\tprofile: reviveProfile(\n\t\t\t\t\t\t\t\t\te.profile,\n\t\t\t\t\t\t\t\t\tuserDataProfilesService.profilesHome.scheme,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t// Stop listening to profile storage changes when no one is listening\n\t\t\t\tonDidRemoveLastListener: () => (disposable.value = undefined),\n\t\t\t}),\n\t\t);\n\t\tthis.onDidChange = this._onDidChange.event;\n\t}\n\n\tprotected async createStorageDatabase(\n\t\tprofile: IUserDataProfile,\n\t): Promise<IStorageDatabase> {\n\t\tconst storageChannel = this.remoteService.getChannel(\"storage\");\n\t\treturn isProfileUsingDefaultStorage(profile)\n\t\t\t? new ApplicationStorageDatabaseClient(storageChannel)\n\t\t\t: new ProfileStorageDatabaseClient(storageChannel, profile);\n\t}\n}\n\nclass StorageService extends AbstractStorageService {\n\tprivate profileStorage: IStorage | undefined;\n\n\tconstructor(\n\t\tprivate readonly profileStorageDatabase: Promise<IStorageDatabase>,\n\t) {\n\t\tsuper({ flushInterval: 100 });\n\t}\n\n\tprotected async doInitialize(): Promise<void> {\n\t\tconst profileStorageDatabase = await this.profileStorageDatabase;\n\t\tconst profileStorage = new Storage(profileStorageDatabase);\n\t\tthis._register(\n\t\t\tprofileStorage.onDidChangeStorage((e) => {\n\t\t\t\tthis.emitDidChangeValue(StorageScope.PROFILE, e);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tprofileStorage.close();\n\t\t\t\tprofileStorage.dispose();\n\t\t\t\tif (isDisposable(profileStorageDatabase)) {\n\t\t\t\t\tprofileStorageDatabase.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.profileStorage = profileStorage;\n\t\treturn this.profileStorage.init();\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\treturn scope === StorageScope.PROFILE ? this.profileStorage : undefined;\n\t}\n\n\tprotected getLogDetails(): string | undefined {\n\t\treturn undefined;\n\t}\n\tprotected async switchToProfile(): Promise<void> {}\n\tprotected async switchToWorkspace(): Promise<void> {}\n\thasScope() {\n\t\treturn false;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["e"]
}
