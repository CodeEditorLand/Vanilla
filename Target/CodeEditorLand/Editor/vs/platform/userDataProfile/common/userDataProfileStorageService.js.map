{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/common/userDataProfileStorageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableMap, MutableDisposable, isDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IStorage, IStorageDatabase, Storage } from '../../../base/parts/storage/common/storage.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { AbstractStorageService, IStorageService, IStorageValueChangeEvent, StorageScope, StorageTarget, isProfileUsingDefaultStorage } from '../../storage/common/storage.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IRemoteService } from '../../ipc/common/services.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { ApplicationStorageDatabaseClient, ProfileStorageDatabaseClient } from '../../storage/common/storageIpc.js';\nimport { IUserDataProfile, IUserDataProfilesService, reviveProfile } from './userDataProfile.js';\n\nexport interface IProfileStorageValueChanges {\n\treadonly profile: IUserDataProfile;\n\treadonly changes: IStorageValueChangeEvent[];\n}\n\nexport interface IProfileStorageChanges {\n\treadonly targetChanges: IUserDataProfile[];\n\treadonly valueChanges: IProfileStorageValueChanges[];\n}\n\nexport interface IStorageValue {\n\treadonly value: string | undefined;\n\treadonly target: StorageTarget;\n}\n\nexport const IUserDataProfileStorageService = createDecorator<IUserDataProfileStorageService>('IUserDataProfileStorageService');\nexport interface IUserDataProfileStorageService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emitted whenever data is updated or deleted in a profile storage or target of a profile storage entry changes\n\t */\n\treadonly onDidChange: Event<IProfileStorageChanges>;\n\n\t/**\n\t * Return the requested profile storage data\n\t * @param profile The profile from which the data has to be read from\n\t */\n\treadStorageData(profile: IUserDataProfile): Promise<Map<string, IStorageValue>>;\n\n\t/**\n\t * Update the given profile storage data in the profile storage\n\t * @param profile The profile to which the data has to be written to\n\t * @param data Data that has to be updated\n\t * @param target Storage target of the data\n\t */\n\tupdateStorageData(profile: IUserDataProfile, data: Map<string, string | undefined | null>, target: StorageTarget): Promise<void>;\n\n\t/**\n\t * Calls a function with a storage service scoped to given profile.\n\t */\n\twithProfileScopedStorageService<T>(profile: IUserDataProfile, fn: (storageService: IStorageService) => Promise<T>): Promise<T>;\n}\n\nexport abstract class AbstractUserDataProfileStorageService extends Disposable implements IUserDataProfileStorageService {\n\n\t_serviceBrand: undefined;\n\n\treadonly abstract onDidChange: Event<IProfileStorageChanges>;\n\n\tprivate readonly storageServicesMap: DisposableMap<string, StorageService> | undefined;\n\n\tconstructor(\n\t\tpersistStorages: boolean,\n\t\t@IStorageService protected readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\t\tif (persistStorages) {\n\t\t\tthis.storageServicesMap = this._register(new DisposableMap<string, StorageService>());\n\t\t}\n\t}\n\n\tasync readStorageData(profile: IUserDataProfile): Promise<Map<string, IStorageValue>> {\n\t\treturn this.withProfileScopedStorageService(profile, async storageService => this.getItems(storageService));\n\t}\n\n\tasync updateStorageData(profile: IUserDataProfile, data: Map<string, string | undefined | null>, target: StorageTarget): Promise<void> {\n\t\treturn this.withProfileScopedStorageService(profile, async storageService => this.writeItems(storageService, data, target));\n\t}\n\n\tasync withProfileScopedStorageService<T>(profile: IUserDataProfile, fn: (storageService: IStorageService) => Promise<T>): Promise<T> {\n\t\tif (this.storageService.hasScope(profile)) {\n\t\t\treturn fn(this.storageService);\n\t\t}\n\n\t\tlet storageService = this.storageServicesMap?.get(profile.id);\n\t\tif (!storageService) {\n\t\t\tstorageService = new StorageService(this.createStorageDatabase(profile));\n\t\t\tthis.storageServicesMap?.set(profile.id, storageService);\n\n\t\t\ttry {\n\t\t\t\tawait storageService.initialize();\n\t\t\t} catch (error) {\n\t\t\t\tif (this.storageServicesMap?.has(profile.id)) {\n\t\t\t\t\tthis.storageServicesMap.deleteAndDispose(profile.id);\n\t\t\t\t} else {\n\t\t\t\t\tstorageService.dispose();\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tconst result = await fn(storageService);\n\t\t\tawait storageService.flush();\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tif (!this.storageServicesMap?.has(profile.id)) {\n\t\t\t\tstorageService.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getItems(storageService: IStorageService): Map<string, IStorageValue> {\n\t\tconst result = new Map<string, IStorageValue>();\n\t\tconst populate = (target: StorageTarget) => {\n\t\t\tfor (const key of storageService.keys(StorageScope.PROFILE, target)) {\n\t\t\t\tresult.set(key, { value: storageService.get(key, StorageScope.PROFILE), target });\n\t\t\t}\n\t\t};\n\t\tpopulate(StorageTarget.USER);\n\t\tpopulate(StorageTarget.MACHINE);\n\t\treturn result;\n\t}\n\n\tprivate writeItems(storageService: IStorageService, items: Map<string, string | undefined | null>, target: StorageTarget): void {\n\t\tstorageService.storeAll(Array.from(items.entries()).map(([key, value]) => ({ key, value, scope: StorageScope.PROFILE, target })), true);\n\t}\n\n\tprotected abstract createStorageDatabase(profile: IUserDataProfile): Promise<IStorageDatabase>;\n}\n\nexport class RemoteUserDataProfileStorageService extends AbstractUserDataProfileStorageService implements IUserDataProfileStorageService {\n\n\tprivate readonly _onDidChange: Emitter<IProfileStorageChanges>;\n\treadonly onDidChange: Event<IProfileStorageChanges>;\n\n\tconstructor(\n\t\tpersistStorages: boolean,\n\t\tprivate readonly remoteService: IRemoteService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\tstorageService: IStorageService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(persistStorages, storageService);\n\n\t\tconst channel = remoteService.getChannel('profileStorageListener');\n\t\tconst disposable = this._register(new MutableDisposable());\n\t\tthis._onDidChange = this._register(new Emitter<IProfileStorageChanges>({\n\t\t\t// Start listening to profile storage changes only when someone is listening\n\t\t\tonWillAddFirstListener: () => {\n\t\t\t\tdisposable.value = channel.listen<IProfileStorageChanges>('onDidChange')(e => {\n\t\t\t\t\tlogService.trace('profile storage changes', e);\n\t\t\t\t\tthis._onDidChange.fire({\n\t\t\t\t\t\ttargetChanges: e.targetChanges.map(profile => reviveProfile(profile, userDataProfilesService.profilesHome.scheme)),\n\t\t\t\t\t\tvalueChanges: e.valueChanges.map(e => ({ ...e, profile: reviveProfile(e.profile, userDataProfilesService.profilesHome.scheme) }))\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\t// Stop listening to profile storage changes when no one is listening\n\t\t\tonDidRemoveLastListener: () => disposable.value = undefined\n\t\t}));\n\t\tthis.onDidChange = this._onDidChange.event;\n\t}\n\n\tprotected async createStorageDatabase(profile: IUserDataProfile): Promise<IStorageDatabase> {\n\t\tconst storageChannel = this.remoteService.getChannel('storage');\n\t\treturn isProfileUsingDefaultStorage(profile) ? new ApplicationStorageDatabaseClient(storageChannel) : new ProfileStorageDatabaseClient(storageChannel, profile);\n\t}\n}\n\nclass StorageService extends AbstractStorageService {\n\n\tprivate profileStorage: IStorage | undefined;\n\n\tconstructor(private readonly profileStorageDatabase: Promise<IStorageDatabase>) {\n\t\tsuper({ flushInterval: 100 });\n\t}\n\n\tprotected async doInitialize(): Promise<void> {\n\t\tconst profileStorageDatabase = await this.profileStorageDatabase;\n\t\tconst profileStorage = new Storage(profileStorageDatabase);\n\t\tthis._register(profileStorage.onDidChangeStorage(e => {\n\t\t\tthis.emitDidChangeValue(StorageScope.PROFILE, e);\n\t\t}));\n\t\tthis._register(toDisposable(() => {\n\t\t\tprofileStorage.close();\n\t\t\tprofileStorage.dispose();\n\t\t\tif (isDisposable(profileStorageDatabase)) {\n\t\t\t\tprofileStorageDatabase.dispose();\n\t\t\t}\n\t\t}));\n\t\tthis.profileStorage = profileStorage;\n\t\treturn this.profileStorage.init();\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\treturn scope === StorageScope.PROFILE ? this.profileStorage : undefined;\n\t}\n\n\tprotected getLogDetails(): string | undefined { return undefined; }\n\tprotected async switchToProfile(): Promise<void> { }\n\tprotected async switchToWorkspace(): Promise<void> { }\n\thasScope() { return false; }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,YAAY,eAAe,mBAAmB,cAAc,oBAAoB;AACzF,SAAS,UAAU,kBAAkB,eAAe;AACpD,SAAS,uBAAuB;AAChC,SAAS,wBAAwB,iBAAiB,0BAA0B,cAAc,eAAe,oCAAoC;AAC7I,SAAS,SAAS,aAAa;AAC/B,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB;AAC5B,SAAS,kCAAkC,oCAAoC;AAC/E,SAAS,kBAAkB,0BAA0B,qBAAqB;AAiBnE,MAAM,iCAAiC,gBAAgD,gCAAgC;AA6BvH,IAAe,wCAAf,cAA6D,WAAqD;AAAA,EAQxH,YACC,iBACoC,gBACnC;AACD,UAAM;AAF8B;AAGpC,QAAI,iBAAiB;AACpB,WAAK,qBAAqB,KAAK,UAAU,IAAI,cAAsC,CAAC;AAAA,IACrF;AAAA,EACD;AAAA,EA3ED,OA2DyH;AAAA;AAAA;AAAA,EAExH;AAAA,EAIiB;AAAA,EAYjB,MAAM,gBAAgB,SAAgE;AACrF,WAAO,KAAK,gCAAgC,SAAS,OAAM,mBAAkB,KAAK,SAAS,cAAc,CAAC;AAAA,EAC3G;AAAA,EAEA,MAAM,kBAAkB,SAA2B,MAA8C,QAAsC;AACtI,WAAO,KAAK,gCAAgC,SAAS,OAAM,mBAAkB,KAAK,WAAW,gBAAgB,MAAM,MAAM,CAAC;AAAA,EAC3H;AAAA,EAEA,MAAM,gCAAmC,SAA2B,IAAiE;AACpI,QAAI,KAAK,eAAe,SAAS,OAAO,GAAG;AAC1C,aAAO,GAAG,KAAK,cAAc;AAAA,IAC9B;AAEA,QAAI,iBAAiB,KAAK,oBAAoB,IAAI,QAAQ,EAAE;AAC5D,QAAI,CAAC,gBAAgB;AACpB,uBAAiB,IAAI,eAAe,KAAK,sBAAsB,OAAO,CAAC;AACvE,WAAK,oBAAoB,IAAI,QAAQ,IAAI,cAAc;AAEvD,UAAI;AACH,cAAM,eAAe,WAAW;AAAA,MACjC,SAAS,OAAO;AACf,YAAI,KAAK,oBAAoB,IAAI,QAAQ,EAAE,GAAG;AAC7C,eAAK,mBAAmB,iBAAiB,QAAQ,EAAE;AAAA,QACpD,OAAO;AACN,yBAAe,QAAQ;AAAA,QACxB;AACA,cAAM;AAAA,MACP;AAAA,IACD;AACA,QAAI;AACH,YAAM,SAAS,MAAM,GAAG,cAAc;AACtC,YAAM,eAAe,MAAM;AAC3B,aAAO;AAAA,IACR,UAAE;AACD,UAAI,CAAC,KAAK,oBAAoB,IAAI,QAAQ,EAAE,GAAG;AAC9C,uBAAe,QAAQ;AAAA,MACxB;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,SAAS,gBAA6D;AAC7E,UAAM,SAAS,oBAAI,IAA2B;AAC9C,UAAM,WAAW,wBAAC,WAA0B;AAC3C,iBAAW,OAAO,eAAe,KAAK,aAAa,SAAS,MAAM,GAAG;AACpE,eAAO,IAAI,KAAK,EAAE,OAAO,eAAe,IAAI,KAAK,aAAa,OAAO,GAAG,OAAO,CAAC;AAAA,MACjF;AAAA,IACD,GAJiB;AAKjB,aAAS,cAAc,IAAI;AAC3B,aAAS,cAAc,OAAO;AAC9B,WAAO;AAAA,EACR;AAAA,EAEQ,WAAW,gBAAiC,OAA+C,QAA6B;AAC/H,mBAAe,SAAS,MAAM,KAAK,MAAM,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,OAAO,EAAE,KAAK,OAAO,OAAO,aAAa,SAAS,OAAO,EAAE,GAAG,IAAI;AAAA,EACvI;AAGD;AA3EsB,wCAAf;AAAA,EAUJ;AAAA,GAVmB;AA6Ef,MAAM,4CAA4C,sCAAgF;AAAA,EAKxI,YACC,iBACiB,eACjB,yBACA,gBACA,YACC;AACD,UAAM,iBAAiB,cAAc;AALpB;AAOjB,UAAM,UAAU,cAAc,WAAW,wBAAwB;AACjE,UAAM,aAAa,KAAK,UAAU,IAAI,kBAAkB,CAAC;AACzD,SAAK,eAAe,KAAK,UAAU,IAAI,QAAgC;AAAA;AAAA,MAEtE,wBAAwB,6BAAM;AAC7B,mBAAW,QAAQ,QAAQ,OAA+B,aAAa,EAAE,OAAK;AAC7E,qBAAW,MAAM,2BAA2B,CAAC;AAC7C,eAAK,aAAa,KAAK;AAAA,YACtB,eAAe,EAAE,cAAc,IAAI,aAAW,cAAc,SAAS,wBAAwB,aAAa,MAAM,CAAC;AAAA,YACjH,cAAc,EAAE,aAAa,IAAI,CAAAA,QAAM,EAAE,GAAGA,IAAG,SAAS,cAAcA,GAAE,SAAS,wBAAwB,aAAa,MAAM,EAAE,EAAE;AAAA,UACjI,CAAC;AAAA,QACF,CAAC;AAAA,MACF,GARwB;AAAA;AAAA,MAUxB,yBAAyB,6BAAM,WAAW,QAAQ,QAAzB;AAAA,IAC1B,CAAC,CAAC;AACF,SAAK,cAAc,KAAK,aAAa;AAAA,EACtC;AAAA,EAvKD,OAwIyI;AAAA;AAAA;AAAA,EAEvH;AAAA,EACR;AAAA,EA8BT,MAAgB,sBAAsB,SAAsD;AAC3F,UAAM,iBAAiB,KAAK,cAAc,WAAW,SAAS;AAC9D,WAAO,6BAA6B,OAAO,IAAI,IAAI,iCAAiC,cAAc,IAAI,IAAI,6BAA6B,gBAAgB,OAAO;AAAA,EAC/J;AACD;AAEA,MAAM,uBAAuB,uBAAuB;AAAA,EAInD,YAA6B,wBAAmD;AAC/E,UAAM,EAAE,eAAe,IAAI,CAAC;AADA;AAAA,EAE7B;AAAA,EArLD,OA+KoD;AAAA;AAAA;AAAA,EAE3C;AAAA,EAMR,MAAgB,eAA8B;AAC7C,UAAM,yBAAyB,MAAM,KAAK;AAC1C,UAAM,iBAAiB,IAAI,QAAQ,sBAAsB;AACzD,SAAK,UAAU,eAAe,mBAAmB,OAAK;AACrD,WAAK,mBAAmB,aAAa,SAAS,CAAC;AAAA,IAChD,CAAC,CAAC;AACF,SAAK,UAAU,aAAa,MAAM;AACjC,qBAAe,MAAM;AACrB,qBAAe,QAAQ;AACvB,UAAI,aAAa,sBAAsB,GAAG;AACzC,+BAAuB,QAAQ;AAAA,MAChC;AAAA,IACD,CAAC,CAAC;AACF,SAAK,iBAAiB;AACtB,WAAO,KAAK,eAAe,KAAK;AAAA,EACjC;AAAA,EAEU,WAAW,OAA2C;AAC/D,WAAO,UAAU,aAAa,UAAU,KAAK,iBAAiB;AAAA,EAC/D;AAAA,EAEU,gBAAoC;AAAE,WAAO;AAAA,EAAW;AAAA,EAClE,MAAgB,kBAAiC;AAAA,EAAE;AAAA,EACnD,MAAgB,oBAAmC;AAAA,EAAE;AAAA,EACrD,WAAW;AAAE,WAAO;AAAA,EAAO;AAC5B;",
  "names": ["e"]
}
