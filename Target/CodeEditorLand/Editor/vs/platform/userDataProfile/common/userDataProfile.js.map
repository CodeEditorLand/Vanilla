{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/userDataProfile/common/userDataProfile.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from \"../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../base/common/map.js\";\nimport { basename, joinPath } from \"../../../base/common/resources.js\";\nimport { escapeRegExpCharacters } from \"../../../base/common/strings.js\";\nimport { isString } from \"../../../base/common/types.js\";\nimport { URI, type UriDto } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport {\n\tFileOperationResult,\n\tIFileService,\n\ttoFileOperationResult,\n} from \"../../files/common/files.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IUriIdentityService } from \"../../uriIdentity/common/uriIdentity.js\";\nimport {\n\ttype IAnyWorkspaceIdentifier,\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\n\nexport enum ProfileResourceType {\n\tSettings = \"settings\",\n\tKeybindings = \"keybindings\",\n\tSnippets = \"snippets\",\n\tTasks = \"tasks\",\n\tExtensions = \"extensions\",\n\tGlobalState = \"globalState\",\n}\n\n/**\n * Flags to indicate whether to use the default profile or not.\n */\nexport type UseDefaultProfileFlags = { [key in ProfileResourceType]?: boolean };\nexport type ProfileResourceTypeFlags = UseDefaultProfileFlags;\n\nexport interface IUserDataProfile {\n\treadonly id: string;\n\treadonly isDefault: boolean;\n\treadonly name: string;\n\treadonly shortName?: string;\n\treadonly icon?: string;\n\treadonly location: URI;\n\treadonly globalStorageHome: URI;\n\treadonly settingsResource: URI;\n\treadonly keybindingsResource: URI;\n\treadonly tasksResource: URI;\n\treadonly snippetsHome: URI;\n\treadonly extensionsResource: URI;\n\treadonly cacheHome: URI;\n\treadonly useDefaultFlags?: UseDefaultProfileFlags;\n\treadonly isTransient?: boolean;\n}\n\nexport function isUserDataProfile(thing: unknown): thing is IUserDataProfile {\n\tconst candidate = thing as IUserDataProfile | undefined;\n\n\treturn !!(\n\t\tcandidate &&\n\t\ttypeof candidate === \"object\" &&\n\t\ttypeof candidate.id === \"string\" &&\n\t\ttypeof candidate.isDefault === \"boolean\" &&\n\t\ttypeof candidate.name === \"string\" &&\n\t\tURI.isUri(candidate.location) &&\n\t\tURI.isUri(candidate.globalStorageHome) &&\n\t\tURI.isUri(candidate.settingsResource) &&\n\t\tURI.isUri(candidate.keybindingsResource) &&\n\t\tURI.isUri(candidate.tasksResource) &&\n\t\tURI.isUri(candidate.snippetsHome) &&\n\t\tURI.isUri(candidate.extensionsResource)\n\t);\n}\n\nexport type DidChangeProfilesEvent = {\n\treadonly added: readonly IUserDataProfile[];\n\treadonly removed: readonly IUserDataProfile[];\n\treadonly updated: readonly IUserDataProfile[];\n\treadonly all: readonly IUserDataProfile[];\n};\n\nexport type WillCreateProfileEvent = {\n\tprofile: IUserDataProfile;\n\tjoin(promise: Promise<void>): void;\n};\n\nexport type WillRemoveProfileEvent = {\n\tprofile: IUserDataProfile;\n\tjoin(promise: Promise<void>): void;\n};\n\nexport interface IUserDataProfileOptions {\n\treadonly shortName?: string;\n\treadonly icon?: string;\n\treadonly useDefaultFlags?: UseDefaultProfileFlags;\n\treadonly transient?: boolean;\n}\n\nexport interface IUserDataProfileUpdateOptions\n\textends Omit<IUserDataProfileOptions, \"icon\"> {\n\treadonly name?: string;\n\treadonly icon?: string | null;\n}\n\nexport const IUserDataProfilesService =\n\tcreateDecorator<IUserDataProfilesService>(\"IUserDataProfilesService\");\nexport interface IUserDataProfilesService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly profilesHome: URI;\n\treadonly defaultProfile: IUserDataProfile;\n\n\treadonly onDidChangeProfiles: Event<DidChangeProfilesEvent>;\n\treadonly profiles: readonly IUserDataProfile[];\n\n\treadonly onDidResetWorkspaces: Event<void>;\n\n\tisEnabled(): boolean;\n\tcreateNamedProfile(\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile>;\n\tcreateTransientProfile(\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile>;\n\tcreateProfile(\n\t\tid: string,\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile>;\n\tupdateProfile(\n\t\tprofile: IUserDataProfile,\n\t\toptions?: IUserDataProfileUpdateOptions,\n\t): Promise<IUserDataProfile>;\n\tremoveProfile(profile: IUserDataProfile): Promise<void>;\n\n\tsetProfileForWorkspace(\n\t\tworkspaceIdentifier: IAnyWorkspaceIdentifier,\n\t\tprofile: IUserDataProfile,\n\t): Promise<void>;\n\tresetWorkspaces(): Promise<void>;\n\n\tcleanUp(): Promise<void>;\n\tcleanUpTransientProfiles(): Promise<void>;\n}\n\nexport function reviveProfile(\n\tprofile: UriDto<IUserDataProfile>,\n\tscheme: string,\n): IUserDataProfile {\n\treturn {\n\t\tid: profile.id,\n\t\tisDefault: profile.isDefault,\n\t\tname: profile.name,\n\t\tshortName: profile.shortName,\n\t\ticon: profile.icon,\n\t\tlocation: URI.revive(profile.location).with({ scheme }),\n\t\tglobalStorageHome: URI.revive(profile.globalStorageHome).with({\n\t\t\tscheme,\n\t\t}),\n\t\tsettingsResource: URI.revive(profile.settingsResource).with({ scheme }),\n\t\tkeybindingsResource: URI.revive(profile.keybindingsResource).with({\n\t\t\tscheme,\n\t\t}),\n\t\ttasksResource: URI.revive(profile.tasksResource).with({ scheme }),\n\t\tsnippetsHome: URI.revive(profile.snippetsHome).with({ scheme }),\n\t\textensionsResource: URI.revive(profile.extensionsResource).with({\n\t\t\tscheme,\n\t\t}),\n\t\tcacheHome: URI.revive(profile.cacheHome).with({ scheme }),\n\t\tuseDefaultFlags: profile.useDefaultFlags,\n\t\tisTransient: profile.isTransient,\n\t};\n}\n\nexport function toUserDataProfile(\n\tid: string,\n\tname: string,\n\tlocation: URI,\n\tprofilesCacheHome: URI,\n\toptions?: IUserDataProfileOptions,\n\tdefaultProfile?: IUserDataProfile,\n): IUserDataProfile {\n\treturn {\n\t\tid,\n\t\tname,\n\t\tlocation,\n\t\tisDefault: false,\n\t\tshortName: options?.shortName,\n\t\ticon: options?.icon,\n\t\tglobalStorageHome:\n\t\t\tdefaultProfile && options?.useDefaultFlags?.globalState\n\t\t\t\t? defaultProfile.globalStorageHome\n\t\t\t\t: joinPath(location, \"globalStorage\"),\n\t\tsettingsResource:\n\t\t\tdefaultProfile && options?.useDefaultFlags?.settings\n\t\t\t\t? defaultProfile.settingsResource\n\t\t\t\t: joinPath(location, \"settings.json\"),\n\t\tkeybindingsResource:\n\t\t\tdefaultProfile && options?.useDefaultFlags?.keybindings\n\t\t\t\t? defaultProfile.keybindingsResource\n\t\t\t\t: joinPath(location, \"keybindings.json\"),\n\t\ttasksResource:\n\t\t\tdefaultProfile && options?.useDefaultFlags?.tasks\n\t\t\t\t? defaultProfile.tasksResource\n\t\t\t\t: joinPath(location, \"tasks.json\"),\n\t\tsnippetsHome:\n\t\t\tdefaultProfile && options?.useDefaultFlags?.snippets\n\t\t\t\t? defaultProfile.snippetsHome\n\t\t\t\t: joinPath(location, \"snippets\"),\n\t\textensionsResource:\n\t\t\tdefaultProfile && options?.useDefaultFlags?.extensions\n\t\t\t\t? defaultProfile.extensionsResource\n\t\t\t\t: joinPath(location, \"extensions.json\"),\n\t\tcacheHome: joinPath(profilesCacheHome, id),\n\t\tuseDefaultFlags: options?.useDefaultFlags,\n\t\tisTransient: options?.transient,\n\t};\n}\n\nexport type UserDataProfilesObject = {\n\tprofiles: IUserDataProfile[];\n\tworkspaces: ResourceMap<IUserDataProfile>;\n\temptyWindows: Map<string, IUserDataProfile>;\n};\n\ntype TransientUserDataProfilesObject = UserDataProfilesObject & {\n\tfolders: ResourceMap<IUserDataProfile>;\n};\n\nexport type StoredUserDataProfile = {\n\tname: string;\n\tlocation: URI;\n\tshortName?: string;\n\ticon?: string;\n\tuseDefaultFlags?: UseDefaultProfileFlags;\n};\n\nexport type StoredProfileAssociations = {\n\tworkspaces?: IStringDictionary<string>;\n\temptyWindows?: IStringDictionary<string>;\n};\n\nexport class UserDataProfilesService\n\textends Disposable\n\timplements IUserDataProfilesService\n{\n\tprotected static readonly PROFILES_KEY = \"userDataProfiles\";\n\tprotected static readonly PROFILE_ASSOCIATIONS_KEY = \"profileAssociations\";\n\n\treadonly _serviceBrand: undefined;\n\n\tprotected enabled = true;\n\treadonly profilesHome: URI;\n\tprivate readonly profilesCacheHome: URI;\n\n\tget defaultProfile(): IUserDataProfile {\n\t\treturn this.profiles[0];\n\t}\n\tget profiles(): IUserDataProfile[] {\n\t\treturn [\n\t\t\t...this.profilesObject.profiles,\n\t\t\t...this.transientProfilesObject.profiles,\n\t\t];\n\t}\n\n\tprotected readonly _onDidChangeProfiles = this._register(\n\t\tnew Emitter<DidChangeProfilesEvent>(),\n\t);\n\treadonly onDidChangeProfiles = this._onDidChangeProfiles.event;\n\n\tprotected readonly _onWillCreateProfile = this._register(\n\t\tnew Emitter<WillCreateProfileEvent>(),\n\t);\n\treadonly onWillCreateProfile = this._onWillCreateProfile.event;\n\n\tprotected readonly _onWillRemoveProfile = this._register(\n\t\tnew Emitter<WillRemoveProfileEvent>(),\n\t);\n\treadonly onWillRemoveProfile = this._onWillRemoveProfile.event;\n\n\tprivate readonly _onDidResetWorkspaces = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidResetWorkspaces = this._onDidResetWorkspaces.event;\n\n\tprivate profileCreationPromises = new Map<\n\t\tstring,\n\t\tPromise<IUserDataProfile>\n\t>();\n\n\tprotected readonly transientProfilesObject: TransientUserDataProfilesObject =\n\t\t{\n\t\t\tprofiles: [],\n\t\t\tfolders: new ResourceMap(),\n\t\t\tworkspaces: new ResourceMap(),\n\t\t\temptyWindows: new Map(),\n\t\t};\n\n\tconstructor(\n\t\t@IEnvironmentService protected readonly environmentService: IEnvironmentService,\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService protected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.profilesHome = joinPath(this.environmentService.userRoamingDataHome, 'profiles');\n\t\tthis.profilesCacheHome = joinPath(this.environmentService.cacheHome, 'CachedProfilesData');\n\t}\n\n\tinit(): void {\n\t\tthis._profilesObject = undefined;\n\t}\n\n\tsetEnablement(enabled: boolean): void {\n\t\tif (this.enabled !== enabled) {\n\t\t\tthis._profilesObject = undefined;\n\t\t\tthis.enabled = enabled;\n\t\t}\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tprotected _profilesObject: UserDataProfilesObject | undefined;\n\tprotected get profilesObject(): UserDataProfilesObject {\n\t\tif (!this._profilesObject) {\n\t\t\tconst defaultProfile = this.createDefaultProfile();\n\t\t\tconst profiles = [defaultProfile];\n\t\t\tif (this.enabled) {\n\t\t\t\ttry {\n\t\t\t\t\tfor (const storedProfile of this.getStoredProfiles()) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!storedProfile.name ||\n\t\t\t\t\t\t\t!isString(storedProfile.name) ||\n\t\t\t\t\t\t\t!storedProfile.location\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t\"Skipping the invalid stored profile\",\n\t\t\t\t\t\t\t\tstoredProfile.location || storedProfile.name,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprofiles.push(\n\t\t\t\t\t\t\ttoUserDataProfile(\n\t\t\t\t\t\t\t\tbasename(storedProfile.location),\n\t\t\t\t\t\t\t\tstoredProfile.name,\n\t\t\t\t\t\t\t\tstoredProfile.location,\n\t\t\t\t\t\t\t\tthis.profilesCacheHome,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tshortName: storedProfile.shortName,\n\t\t\t\t\t\t\t\t\ticon: storedProfile.icon,\n\t\t\t\t\t\t\t\t\tuseDefaultFlags:\n\t\t\t\t\t\t\t\t\t\tstoredProfile.useDefaultFlags,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdefaultProfile,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst workspaces = new ResourceMap<IUserDataProfile>();\n\t\t\tconst emptyWindows = new Map<string, IUserDataProfile>();\n\t\t\tif (profiles.length) {\n\t\t\t\ttry {\n\t\t\t\t\tconst profileAssociaitions =\n\t\t\t\t\t\tthis.getStoredProfileAssociations();\n\t\t\t\t\tif (profileAssociaitions.workspaces) {\n\t\t\t\t\t\tfor (const [workspacePath, profileId] of Object.entries(\n\t\t\t\t\t\t\tprofileAssociaitions.workspaces,\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tconst workspace = URI.parse(workspacePath);\n\t\t\t\t\t\t\tconst profile = profiles.find(\n\t\t\t\t\t\t\t\t(p) => p.id === profileId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (profile) {\n\t\t\t\t\t\t\t\tworkspaces.set(workspace, profile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (profileAssociaitions.emptyWindows) {\n\t\t\t\t\t\tfor (const [windowId, profileId] of Object.entries(\n\t\t\t\t\t\t\tprofileAssociaitions.emptyWindows,\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tconst profile = profiles.find(\n\t\t\t\t\t\t\t\t(p) => p.id === profileId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (profile) {\n\t\t\t\t\t\t\t\temptyWindows.set(windowId, profile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._profilesObject = { profiles, workspaces, emptyWindows };\n\t\t}\n\t\treturn this._profilesObject;\n\t}\n\n\tprivate createDefaultProfile() {\n\t\tconst defaultProfile = toUserDataProfile(\n\t\t\t\"__default__profile__\",\n\t\t\tlocalize(\"defaultProfile\", \"Default\"),\n\t\t\tthis.environmentService.userRoamingDataHome,\n\t\t\tthis.profilesCacheHome,\n\t\t);\n\t\treturn {\n\t\t\t...defaultProfile,\n\t\t\textensionsResource:\n\t\t\t\tthis.getDefaultProfileExtensionsLocation() ??\n\t\t\t\tdefaultProfile.extensionsResource,\n\t\t\tisDefault: true,\n\t\t};\n\t}\n\n\tasync createTransientProfile(\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile> {\n\t\tconst namePrefix = `Temp`;\n\t\tconst nameRegEx = new RegExp(\n\t\t\t`${escapeRegExpCharacters(namePrefix)}\\\\s(\\\\d+)`,\n\t\t);\n\t\tlet nameIndex = 0;\n\t\tfor (const profile of this.profiles) {\n\t\t\tconst matches = nameRegEx.exec(profile.name);\n\t\t\tconst index = matches ? Number.parseInt(matches[1]) : 0;\n\t\t\tnameIndex = index > nameIndex ? index : nameIndex;\n\t\t}\n\t\tconst name = `${namePrefix} ${nameIndex + 1}`;\n\t\treturn this.createProfile(\n\t\t\thash(generateUuid()).toString(16),\n\t\t\tname,\n\t\t\t{ transient: true },\n\t\t\tworkspaceIdentifier,\n\t\t);\n\t}\n\n\tasync createNamedProfile(\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile> {\n\t\treturn this.createProfile(\n\t\t\thash(generateUuid()).toString(16),\n\t\t\tname,\n\t\t\toptions,\n\t\t\tworkspaceIdentifier,\n\t\t);\n\t}\n\n\tasync createProfile(\n\t\tid: string,\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t\tworkspaceIdentifier?: IAnyWorkspaceIdentifier,\n\t): Promise<IUserDataProfile> {\n\t\tif (!this.enabled) {\n\t\t\tthrow new Error(\n\t\t\t\t`Profiles are disabled in the current environment.`,\n\t\t\t);\n\t\t}\n\n\t\tconst profile = await this.doCreateProfile(id, name, options);\n\n\t\tif (workspaceIdentifier) {\n\t\t\tawait this.setProfileForWorkspace(workspaceIdentifier, profile);\n\t\t}\n\n\t\treturn profile;\n\t}\n\n\tprivate async doCreateProfile(\n\t\tid: string,\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t): Promise<IUserDataProfile> {\n\t\tif (!isString(name) || !name) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Name of the profile is mandatory and must be of type `string`\",\n\t\t\t);\n\t\t}\n\t\tlet profileCreationPromise = this.profileCreationPromises.get(name);\n\t\tif (!profileCreationPromise) {\n\t\t\tprofileCreationPromise = (async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst existing = this.profiles.find(\n\t\t\t\t\t\t(p) => p.name === name || p.id === id,\n\t\t\t\t\t);\n\t\t\t\t\tif (existing) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Profile with ${name} name already exists`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst profile = toUserDataProfile(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tjoinPath(this.profilesHome, id),\n\t\t\t\t\t\tthis.profilesCacheHome,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tthis.defaultProfile,\n\t\t\t\t\t);\n\t\t\t\t\tawait this.fileService.createFolder(profile.location);\n\n\t\t\t\t\tconst joiners: Promise<void>[] = [];\n\t\t\t\t\tthis._onWillCreateProfile.fire({\n\t\t\t\t\t\tprofile,\n\t\t\t\t\t\tjoin(promise) {\n\t\t\t\t\t\t\tjoiners.push(promise);\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tawait Promises.settled(joiners);\n\n\t\t\t\t\tthis.updateProfiles([profile], [], []);\n\t\t\t\t\treturn profile;\n\t\t\t\t} finally {\n\t\t\t\t\tthis.profileCreationPromises.delete(name);\n\t\t\t\t}\n\t\t\t})();\n\t\t\tthis.profileCreationPromises.set(name, profileCreationPromise);\n\t\t}\n\t\treturn profileCreationPromise;\n\t}\n\n\tasync updateProfile(\n\t\tprofileToUpdate: IUserDataProfile,\n\t\toptions: IUserDataProfileUpdateOptions,\n\t): Promise<IUserDataProfile> {\n\t\tif (!this.enabled) {\n\t\t\tthrow new Error(\n\t\t\t\t`Profiles are disabled in the current environment.`,\n\t\t\t);\n\t\t}\n\n\t\tlet profile = this.profiles.find((p) => p.id === profileToUpdate.id);\n\t\tif (!profile) {\n\t\t\tthrow new Error(`Profile '${profileToUpdate.name}' does not exist`);\n\t\t}\n\n\t\tprofile = toUserDataProfile(\n\t\t\tprofile.id,\n\t\t\toptions.name ?? profile.name,\n\t\t\tprofile.location,\n\t\t\tthis.profilesCacheHome,\n\t\t\t{\n\t\t\t\tshortName: options.shortName ?? profile.shortName,\n\t\t\t\ticon:\n\t\t\t\t\toptions.icon === null\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: (options.icon ?? profile.icon),\n\t\t\t\ttransient: options.transient ?? profile.isTransient,\n\t\t\t\tuseDefaultFlags:\n\t\t\t\t\toptions.useDefaultFlags ?? profile.useDefaultFlags,\n\t\t\t},\n\t\t\tthis.defaultProfile,\n\t\t);\n\t\tthis.updateProfiles([], [], [profile]);\n\n\t\treturn profile;\n\t}\n\n\tasync removeProfile(profileToRemove: IUserDataProfile): Promise<void> {\n\t\tif (!this.enabled) {\n\t\t\tthrow new Error(\n\t\t\t\t`Profiles are disabled in the current environment.`,\n\t\t\t);\n\t\t}\n\t\tif (profileToRemove.isDefault) {\n\t\t\tthrow new Error(\"Cannot remove default profile\");\n\t\t}\n\t\tconst profile = this.profiles.find((p) => p.id === profileToRemove.id);\n\t\tif (!profile) {\n\t\t\tthrow new Error(`Profile '${profileToRemove.name}' does not exist`);\n\t\t}\n\n\t\tconst joiners: Promise<void>[] = [];\n\t\tthis._onWillRemoveProfile.fire({\n\t\t\tprofile,\n\t\t\tjoin(promise) {\n\t\t\t\tjoiners.push(promise);\n\t\t\t},\n\t\t});\n\n\t\ttry {\n\t\t\tawait Promise.allSettled(joiners);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\tfor (const windowId of [...this.profilesObject.emptyWindows.keys()]) {\n\t\t\tif (\n\t\t\t\tprofile.id ===\n\t\t\t\tthis.profilesObject.emptyWindows.get(windowId)?.id\n\t\t\t) {\n\t\t\t\tthis.profilesObject.emptyWindows.delete(windowId);\n\t\t\t}\n\t\t}\n\t\tfor (const workspace of [...this.profilesObject.workspaces.keys()]) {\n\t\t\tif (\n\t\t\t\tprofile.id === this.profilesObject.workspaces.get(workspace)?.id\n\t\t\t) {\n\t\t\t\tthis.profilesObject.workspaces.delete(workspace);\n\t\t\t}\n\t\t}\n\t\tthis.updateStoredProfileAssociations();\n\n\t\tthis.updateProfiles([], [profile], []);\n\n\t\ttry {\n\t\t\tawait this.fileService.del(profile.cacheHome, { recursive: true });\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync setProfileForWorkspace(\n\t\tworkspaceIdentifier: IAnyWorkspaceIdentifier,\n\t\tprofileToSet: IUserDataProfile,\n\t): Promise<void> {\n\t\tif (!this.enabled) {\n\t\t\tthrow new Error(\n\t\t\t\t`Profiles are disabled in the current environment.`,\n\t\t\t);\n\t\t}\n\n\t\tconst profile = this.profiles.find((p) => p.id === profileToSet.id);\n\t\tif (!profile) {\n\t\t\tthrow new Error(`Profile '${profileToSet.name}' does not exist`);\n\t\t}\n\n\t\tthis.updateWorkspaceAssociation(workspaceIdentifier, profile);\n\t}\n\n\tunsetWorkspace(\n\t\tworkspaceIdentifier: IAnyWorkspaceIdentifier,\n\t\ttransient?: boolean,\n\t): void {\n\t\tif (!this.enabled) {\n\t\t\tthrow new Error(\n\t\t\t\t`Profiles are disabled in the current environment.`,\n\t\t\t);\n\t\t}\n\n\t\tthis.updateWorkspaceAssociation(\n\t\t\tworkspaceIdentifier,\n\t\t\tundefined,\n\t\t\ttransient,\n\t\t);\n\t}\n\n\tasync resetWorkspaces(): Promise<void> {\n\t\tthis.transientProfilesObject.folders.clear();\n\t\tthis.transientProfilesObject.workspaces.clear();\n\t\tthis.transientProfilesObject.emptyWindows.clear();\n\t\tthis.profilesObject.workspaces.clear();\n\t\tthis.profilesObject.emptyWindows.clear();\n\t\tthis.updateStoredProfileAssociations();\n\t\tthis._onDidResetWorkspaces.fire();\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tif (!this.enabled) {\n\t\t\treturn;\n\t\t}\n\t\tif (await this.fileService.exists(this.profilesHome)) {\n\t\t\tconst stat = await this.fileService.resolve(this.profilesHome);\n\t\t\tawait Promise.all(\n\t\t\t\t(stat.children || [])\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(child) =>\n\t\t\t\t\t\t\tchild.isDirectory &&\n\t\t\t\t\t\t\tthis.profiles.every(\n\t\t\t\t\t\t\t\t(p) =>\n\t\t\t\t\t\t\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\t\t\t\tp.location,\n\t\t\t\t\t\t\t\t\t\tchild.resource,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t\t.map((child) =>\n\t\t\t\t\t\tthis.fileService.del(child.resource, {\n\t\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tasync cleanUpTransientProfiles(): Promise<void> {\n\t\tif (!this.enabled) {\n\t\t\treturn;\n\t\t}\n\t\tconst unAssociatedTransientProfiles =\n\t\t\tthis.transientProfilesObject.profiles.filter(\n\t\t\t\t(p) => !this.isProfileAssociatedToWorkspace(p),\n\t\t\t);\n\t\tawait Promise.allSettled(\n\t\t\tunAssociatedTransientProfiles.map((p) => this.removeProfile(p)),\n\t\t);\n\t}\n\n\tgetProfileForWorkspace(\n\t\tworkspaceIdentifier: IAnyWorkspaceIdentifier,\n\t): IUserDataProfile | undefined {\n\t\tconst workspace = this.getWorkspace(workspaceIdentifier);\n\t\tconst profile = URI.isUri(workspace)\n\t\t\t? this.profilesObject.workspaces.get(workspace)\n\t\t\t: this.profilesObject.emptyWindows.get(workspace);\n\t\tif (profile) {\n\t\t\treturn profile;\n\t\t}\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn this.transientProfilesObject.folders.get(\n\t\t\t\tworkspaceIdentifier.uri,\n\t\t\t);\n\t\t}\n\t\tif (isWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn this.transientProfilesObject.workspaces.get(\n\t\t\t\tworkspaceIdentifier.configPath,\n\t\t\t);\n\t\t}\n\t\treturn this.transientProfilesObject.emptyWindows.get(\n\t\t\tworkspaceIdentifier.id,\n\t\t);\n\t}\n\n\tprotected getWorkspace(\n\t\tworkspaceIdentifier: IAnyWorkspaceIdentifier,\n\t): URI | string {\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn workspaceIdentifier.uri;\n\t\t}\n\t\tif (isWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn workspaceIdentifier.configPath;\n\t\t}\n\t\treturn workspaceIdentifier.id;\n\t}\n\n\tprivate isProfileAssociatedToWorkspace(profile: IUserDataProfile): boolean {\n\t\tif (\n\t\t\t[...this.profilesObject.emptyWindows.values()].some(\n\t\t\t\t(windowProfile) =>\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\twindowProfile.location,\n\t\t\t\t\t\tprofile.location,\n\t\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tif (\n\t\t\t[...this.profilesObject.workspaces.values()].some(\n\t\t\t\t(workspaceProfile) =>\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\tworkspaceProfile.location,\n\t\t\t\t\t\tprofile.location,\n\t\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tif (\n\t\t\t[...this.transientProfilesObject.emptyWindows.values()].some(\n\t\t\t\t(windowProfile) =>\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\twindowProfile.location,\n\t\t\t\t\t\tprofile.location,\n\t\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tif (\n\t\t\t[...this.transientProfilesObject.workspaces.values()].some(\n\t\t\t\t(workspaceProfile) =>\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\tworkspaceProfile.location,\n\t\t\t\t\t\tprofile.location,\n\t\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tif (\n\t\t\t[...this.transientProfilesObject.folders.values()].some(\n\t\t\t\t(workspaceProfile) =>\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\tworkspaceProfile.location,\n\t\t\t\t\t\tprofile.location,\n\t\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate updateProfiles(\n\t\tadded: IUserDataProfile[],\n\t\tremoved: IUserDataProfile[],\n\t\tupdated: IUserDataProfile[],\n\t): void {\n\t\tconst allProfiles = [...this.profiles, ...added];\n\t\tconst storedProfiles: StoredUserDataProfile[] = [];\n\t\tconst transientProfiles = this.transientProfilesObject.profiles;\n\t\tthis.transientProfilesObject.profiles = [];\n\t\tfor (let profile of allProfiles) {\n\t\t\tif (profile.isDefault) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (removed.some((p) => profile.id === p.id)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprofile = updated.find((p) => profile.id === p.id) ?? profile;\n\t\t\tconst transientProfile = transientProfiles.find(\n\t\t\t\t(p) => profile.id === p.id,\n\t\t\t);\n\t\t\tif (profile.isTransient) {\n\t\t\t\tthis.transientProfilesObject.profiles.push(profile);\n\t\t\t} else {\n\t\t\t\tif (transientProfile) {\n\t\t\t\t\tfor (const [\n\t\t\t\t\t\twindowId,\n\t\t\t\t\t\tp,\n\t\t\t\t\t] of this.transientProfilesObject.emptyWindows.entries()) {\n\t\t\t\t\t\tif (profile.id === p.id) {\n\t\t\t\t\t\t\tthis.updateWorkspaceAssociation(\n\t\t\t\t\t\t\t\t{ id: windowId },\n\t\t\t\t\t\t\t\tprofile,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const [\n\t\t\t\t\t\tworkspace,\n\t\t\t\t\t\tp,\n\t\t\t\t\t] of this.transientProfilesObject.workspaces.entries()) {\n\t\t\t\t\t\tif (profile.id === p.id) {\n\t\t\t\t\t\t\tthis.updateWorkspaceAssociation(\n\t\t\t\t\t\t\t\t{ id: \"\", configPath: workspace },\n\t\t\t\t\t\t\t\tprofile,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const [\n\t\t\t\t\t\tfolder,\n\t\t\t\t\t\tp,\n\t\t\t\t\t] of this.transientProfilesObject.folders.entries()) {\n\t\t\t\t\t\tif (profile.id === p.id) {\n\t\t\t\t\t\t\tthis.updateWorkspaceAssociation(\n\t\t\t\t\t\t\t\t{ id: \"\", uri: folder },\n\t\t\t\t\t\t\t\tprofile,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstoredProfiles.push({\n\t\t\t\t\tlocation: profile.location,\n\t\t\t\t\tname: profile.name,\n\t\t\t\t\tshortName: profile.shortName,\n\t\t\t\t\ticon: profile.icon,\n\t\t\t\t\tuseDefaultFlags: profile.useDefaultFlags,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.saveStoredProfiles(storedProfiles);\n\t\tthis._profilesObject = undefined;\n\t\tthis.triggerProfilesChanges(added, removed, updated);\n\t}\n\n\tprotected triggerProfilesChanges(\n\t\tadded: IUserDataProfile[],\n\t\tremoved: IUserDataProfile[],\n\t\tupdated: IUserDataProfile[],\n\t) {\n\t\tthis._onDidChangeProfiles.fire({\n\t\t\tadded,\n\t\t\tremoved,\n\t\t\tupdated,\n\t\t\tall: this.profiles,\n\t\t});\n\t}\n\n\tprivate updateWorkspaceAssociation(\n\t\tworkspaceIdentifier: IAnyWorkspaceIdentifier,\n\t\tnewProfile?: IUserDataProfile,\n\t\ttransient?: boolean,\n\t): void {\n\t\t// Force transient if the new profile to associate is transient\n\t\ttransient = newProfile?.isTransient ? true : transient;\n\n\t\tif (transient) {\n\t\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\t\tthis.transientProfilesObject.folders.delete(\n\t\t\t\t\tworkspaceIdentifier.uri,\n\t\t\t\t);\n\t\t\t\tif (newProfile) {\n\t\t\t\t\tthis.transientProfilesObject.folders.set(\n\t\t\t\t\t\tworkspaceIdentifier.uri,\n\t\t\t\t\t\tnewProfile,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (isWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\t\tthis.transientProfilesObject.workspaces.delete(\n\t\t\t\t\tworkspaceIdentifier.configPath,\n\t\t\t\t);\n\t\t\t\tif (newProfile) {\n\t\t\t\t\tthis.transientProfilesObject.workspaces.set(\n\t\t\t\t\t\tworkspaceIdentifier.configPath,\n\t\t\t\t\t\tnewProfile,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.transientProfilesObject.emptyWindows.delete(\n\t\t\t\t\tworkspaceIdentifier.id,\n\t\t\t\t);\n\t\t\t\tif (newProfile) {\n\t\t\t\t\tthis.transientProfilesObject.emptyWindows.set(\n\t\t\t\t\t\tworkspaceIdentifier.id,\n\t\t\t\t\t\tnewProfile,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Unset the transiet workspace association if any\n\t\t\tthis.updateWorkspaceAssociation(\n\t\t\t\tworkspaceIdentifier,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconst workspace = this.getWorkspace(workspaceIdentifier);\n\n\t\t\t// Folder or Multiroot workspace\n\t\t\tif (URI.isUri(workspace)) {\n\t\t\t\tthis.profilesObject.workspaces.delete(workspace);\n\t\t\t\tif (newProfile) {\n\t\t\t\t\tthis.profilesObject.workspaces.set(workspace, newProfile);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Empty Window\n\t\t\telse {\n\t\t\t\tthis.profilesObject.emptyWindows.delete(workspace);\n\t\t\t\tif (newProfile) {\n\t\t\t\t\tthis.profilesObject.emptyWindows.set(workspace, newProfile);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateStoredProfileAssociations();\n\t\t}\n\t}\n\n\tprivate updateStoredProfileAssociations() {\n\t\tconst workspaces: IStringDictionary<string> = {};\n\t\tfor (const [\n\t\t\tworkspace,\n\t\t\tprofile,\n\t\t] of this.profilesObject.workspaces.entries()) {\n\t\t\tworkspaces[workspace.toString()] = profile.id;\n\t\t}\n\t\tconst emptyWindows: IStringDictionary<string> = {};\n\t\tfor (const [\n\t\t\twindowId,\n\t\t\tprofile,\n\t\t] of this.profilesObject.emptyWindows.entries()) {\n\t\t\temptyWindows[windowId.toString()] = profile.id;\n\t\t}\n\t\tthis.saveStoredProfileAssociations({ workspaces, emptyWindows });\n\t\tthis._profilesObject = undefined;\n\t}\n\n\t// TODO: @sandy081 Remove migration after couple of releases\n\tprotected migrateStoredProfileAssociations(\n\t\tstoredProfileAssociations: StoredProfileAssociations,\n\t): StoredProfileAssociations {\n\t\tconst workspaces: IStringDictionary<string> = {};\n\t\tconst defaultProfile = this.createDefaultProfile();\n\t\tif (storedProfileAssociations.workspaces) {\n\t\t\tfor (const [workspace, location] of Object.entries(\n\t\t\t\tstoredProfileAssociations.workspaces,\n\t\t\t)) {\n\t\t\t\tconst uri = URI.parse(location);\n\t\t\t\tworkspaces[workspace] = this.uriIdentityService.extUri.isEqual(\n\t\t\t\t\turi,\n\t\t\t\t\tdefaultProfile.location,\n\t\t\t\t)\n\t\t\t\t\t? defaultProfile.id\n\t\t\t\t\t: this.uriIdentityService.extUri.basename(uri);\n\t\t\t}\n\t\t}\n\t\tconst emptyWindows: IStringDictionary<string> = {};\n\t\tif (storedProfileAssociations.emptyWindows) {\n\t\t\tfor (const [workspace, location] of Object.entries(\n\t\t\t\tstoredProfileAssociations.emptyWindows,\n\t\t\t)) {\n\t\t\t\tconst uri = URI.parse(location);\n\t\t\t\temptyWindows[workspace] =\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\turi,\n\t\t\t\t\t\tdefaultProfile.location,\n\t\t\t\t\t)\n\t\t\t\t\t\t? defaultProfile.id\n\t\t\t\t\t\t: this.uriIdentityService.extUri.basename(uri);\n\t\t\t}\n\t\t}\n\t\treturn { workspaces, emptyWindows };\n\t}\n\n\tprotected getStoredProfiles(): StoredUserDataProfile[] {\n\t\treturn [];\n\t}\n\tprotected saveStoredProfiles(\n\t\tstoredProfiles: StoredUserDataProfile[],\n\t): void {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n\tprotected getStoredProfileAssociations(): StoredProfileAssociations {\n\t\treturn {};\n\t}\n\tprotected saveStoredProfileAssociations(\n\t\tstoredProfileAssociations: StoredProfileAssociations,\n\t): void {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\tprotected getDefaultProfileExtensionsLocation(): URI | undefined {\n\t\treturn undefined;\n\t}\n}\n\nexport class InMemoryUserDataProfilesService extends UserDataProfilesService {\n\tprivate storedProfiles: StoredUserDataProfile[] = [];\n\tprotected override getStoredProfiles(): StoredUserDataProfile[] {\n\t\treturn this.storedProfiles;\n\t}\n\tprotected override saveStoredProfiles(\n\t\tstoredProfiles: StoredUserDataProfile[],\n\t): void {\n\t\tthis.storedProfiles = storedProfiles;\n\t}\n\n\tprivate storedProfileAssociations: StoredProfileAssociations = {};\n\tprotected override getStoredProfileAssociations(): StoredProfileAssociations {\n\t\treturn this.storedProfileAssociations;\n\t}\n\tprotected override saveStoredProfileAssociations(\n\t\tstoredProfileAssociations: StoredProfileAssociations,\n\t): void {\n\t\tthis.storedProfileAssociations = storedProfileAssociations;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ProfileResourceType"]
}
