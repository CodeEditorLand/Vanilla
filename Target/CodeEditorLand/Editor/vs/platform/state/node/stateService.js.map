{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/state/node/stateService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ThrottledDelayer } from '../../../base/common/async.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isUndefined, isUndefinedOrNull } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { FileOperationError, FileOperationResult, IFileService } from '../../files/common/files.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IStateReadService, IStateService } from './state.js';\n\ntype StorageDatabase = { [key: string]: unknown };\n\nexport const enum SaveStrategy {\n\tIMMEDIATE,\n\tDELAYED\n}\n\nexport class FileStorage extends Disposable {\n\n\tprivate storage: StorageDatabase = Object.create(null);\n\tprivate lastSavedStorageContents = '';\n\n\tprivate readonly flushDelayer = this._register(new ThrottledDelayer<void>(this.saveStrategy === SaveStrategy.IMMEDIATE ? 0 : 100 /* buffer saves over a short time */));\n\n\tprivate initializing: Promise<void> | undefined = undefined;\n\tprivate closing: Promise<void> | undefined = undefined;\n\n\tconstructor(\n\t\tprivate readonly storagePath: URI,\n\t\tprivate readonly saveStrategy: SaveStrategy,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\t}\n\n\tinit(): Promise<void> {\n\t\tif (!this.initializing) {\n\t\t\tthis.initializing = this.doInit();\n\t\t}\n\n\t\treturn this.initializing;\n\t}\n\n\tprivate async doInit(): Promise<void> {\n\t\ttry {\n\t\t\tthis.lastSavedStorageContents = (await this.fileService.readFile(this.storagePath)).value.toString();\n\t\t\tthis.storage = JSON.parse(this.lastSavedStorageContents);\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetItem<T>(key: string, defaultValue: T): T;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined {\n\t\tconst res = this.storage[key];\n\t\tif (isUndefinedOrNull(res)) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\treturn res as T;\n\t}\n\n\tsetItem(key: string, data?: object | string | number | boolean | undefined | null): void {\n\t\tthis.setItems([{ key, data }]);\n\t}\n\n\tsetItems(items: readonly { key: string; data?: object | string | number | boolean | undefined | null }[]): void {\n\t\tlet save = false;\n\n\t\tfor (const { key, data } of items) {\n\n\t\t\t// Shortcut for data that did not change\n\t\t\tif (this.storage[key] === data) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Remove items when they are undefined or null\n\t\t\tif (isUndefinedOrNull(data)) {\n\t\t\t\tif (!isUndefined(this.storage[key])) {\n\t\t\t\t\tthis.storage[key] = undefined;\n\t\t\t\t\tsave = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise add an item\n\t\t\telse {\n\t\t\t\tthis.storage[key] = data;\n\t\t\t\tsave = true;\n\t\t\t}\n\t\t}\n\n\t\tif (save) {\n\t\t\tthis.save();\n\t\t}\n\t}\n\n\tremoveItem(key: string): void {\n\n\t\t// Only update if the key is actually present (not undefined)\n\t\tif (!isUndefined(this.storage[key])) {\n\t\t\tthis.storage[key] = undefined;\n\t\t\tthis.save();\n\t\t}\n\t}\n\n\tprivate async save(): Promise<void> {\n\t\tif (this.closing) {\n\t\t\treturn; // already about to close\n\t\t}\n\n\t\treturn this.flushDelayer.trigger(() => this.doSave());\n\t}\n\n\tprivate async doSave(): Promise<void> {\n\t\tif (!this.initializing) {\n\t\t\treturn; // if we never initialized, we should not save our state\n\t\t}\n\n\t\t// Make sure to wait for init to finish first\n\t\tawait this.initializing;\n\n\t\t// Return early if the database has not changed\n\t\tconst serializedDatabase = JSON.stringify(this.storage, null, 4);\n\t\tif (serializedDatabase === this.lastSavedStorageContents) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Write to disk\n\t\ttry {\n\t\t\tawait this.fileService.writeFile(this.storagePath, VSBuffer.fromString(serializedDatabase), { atomic: { postfix: '.vsctmp' } });\n\t\t\tthis.lastSavedStorageContents = serializedDatabase;\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tasync close(): Promise<void> {\n\t\tif (!this.closing) {\n\t\t\tthis.closing = this.flushDelayer.trigger(() => this.doSave(), 0 /* as soon as possible */);\n\t\t}\n\n\t\treturn this.closing;\n\t}\n}\n\nexport class StateReadonlyService extends Disposable implements IStateReadService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly fileStorage: FileStorage;\n\n\tconstructor(\n\t\tsaveStrategy: SaveStrategy,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.fileStorage = this._register(new FileStorage(environmentService.stateResource, saveStrategy, logService, fileService));\n\t}\n\n\tasync init(): Promise<void> {\n\t\tawait this.fileStorage.init();\n\t}\n\n\tgetItem<T>(key: string, defaultValue: T): T;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined {\n\t\treturn this.fileStorage.getItem(key, defaultValue);\n\t}\n}\n\nexport class StateService extends StateReadonlyService implements IStateService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tsetItem(key: string, data?: object | string | number | boolean | undefined | null): void {\n\t\tthis.fileStorage.setItem(key, data);\n\t}\n\n\tsetItems(items: readonly { key: string; data?: object | string | number | boolean | undefined | null }[]): void {\n\t\tthis.fileStorage.setItems(items);\n\t}\n\n\tremoveItem(key: string): void {\n\t\tthis.fileStorage.removeItem(key);\n\t}\n\n\tclose(): Promise<void> {\n\t\treturn this.fileStorage.close();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B,SAAS,aAAa,yBAAyB;AAC/C,SAAS,WAAW;AACpB,SAAS,2BAA2B;AACpC,SAAS,oBAAoB,qBAAqB,oBAAoB;AACtE,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB,qBAAqB;AAI1C,IAAW,eAAX,kBAAWA,kBAAX;AACN,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AAFiB,SAAAA;AAAA,GAAA;AAKX,MAAM,oBAAoB,WAAW;AAAA,EAU3C,YACkB,aACA,cACA,YACA,aAChB;AACD,UAAM;AALW;AACA;AACA;AACA;AAAA,EAGlB;AAAA,EAvCD,OAsB4C;AAAA;AAAA;AAAA,EAEnC,UAA2B,uBAAO,OAAO,IAAI;AAAA,EAC7C,2BAA2B;AAAA,EAElB,eAAe,KAAK,UAAU,IAAI;AAAA,IAAuB,KAAK,iBAAiB,oBAAyB,IAAI;AAAA;AAAA,EAAwC,CAAC;AAAA,EAE9J,eAA0C;AAAA,EAC1C,UAAqC;AAAA,EAW7C,OAAsB;AACrB,QAAI,CAAC,KAAK,cAAc;AACvB,WAAK,eAAe,KAAK,OAAO;AAAA,IACjC;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,SAAwB;AACrC,QAAI;AACH,WAAK,4BAA4B,MAAM,KAAK,YAAY,SAAS,KAAK,WAAW,GAAG,MAAM,SAAS;AACnG,WAAK,UAAU,KAAK,MAAM,KAAK,wBAAwB;AAAA,IACxD,SAAS,OAAO;AACf,UAAyB,MAAO,wBAAwB,oBAAoB,gBAAgB;AAC3F,aAAK,WAAW,MAAM,KAAK;AAAA,MAC5B;AAAA,IACD;AAAA,EACD;AAAA,EAIA,QAAW,KAAa,cAAiC;AACxD,UAAM,MAAM,KAAK,QAAQ,GAAG;AAC5B,QAAI,kBAAkB,GAAG,GAAG;AAC3B,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ,KAAa,MAAoE;AACxF,SAAK,SAAS,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC;AAAA,EAC9B;AAAA,EAEA,SAAS,OAAuG;AAC/G,QAAI,OAAO;AAEX,eAAW,EAAE,KAAK,KAAK,KAAK,OAAO;AAGlC,UAAI,KAAK,QAAQ,GAAG,MAAM,MAAM;AAC/B;AAAA,MACD;AAGA,UAAI,kBAAkB,IAAI,GAAG;AAC5B,YAAI,CAAC,YAAY,KAAK,QAAQ,GAAG,CAAC,GAAG;AACpC,eAAK,QAAQ,GAAG,IAAI;AACpB,iBAAO;AAAA,QACR;AAAA,MACD,OAGK;AACJ,aAAK,QAAQ,GAAG,IAAI;AACpB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,MAAM;AACT,WAAK,KAAK;AAAA,IACX;AAAA,EACD;AAAA,EAEA,WAAW,KAAmB;AAG7B,QAAI,CAAC,YAAY,KAAK,QAAQ,GAAG,CAAC,GAAG;AACpC,WAAK,QAAQ,GAAG,IAAI;AACpB,WAAK,KAAK;AAAA,IACX;AAAA,EACD;AAAA,EAEA,MAAc,OAAsB;AACnC,QAAI,KAAK,SAAS;AACjB;AAAA,IACD;AAEA,WAAO,KAAK,aAAa,QAAQ,MAAM,KAAK,OAAO,CAAC;AAAA,EACrD;AAAA,EAEA,MAAc,SAAwB;AACrC,QAAI,CAAC,KAAK,cAAc;AACvB;AAAA,IACD;AAGA,UAAM,KAAK;AAGX,UAAM,qBAAqB,KAAK,UAAU,KAAK,SAAS,MAAM,CAAC;AAC/D,QAAI,uBAAuB,KAAK,0BAA0B;AACzD;AAAA,IACD;AAGA,QAAI;AACH,YAAM,KAAK,YAAY,UAAU,KAAK,aAAa,SAAS,WAAW,kBAAkB,GAAG,EAAE,QAAQ,EAAE,SAAS,UAAU,EAAE,CAAC;AAC9H,WAAK,2BAA2B;AAAA,IACjC,SAAS,OAAO;AACf,WAAK,WAAW,MAAM,KAAK;AAAA,IAC5B;AAAA,EACD;AAAA,EAEA,MAAM,QAAuB;AAC5B,QAAI,CAAC,KAAK,SAAS;AAClB,WAAK,UAAU,KAAK,aAAa;AAAA,QAAQ,MAAM,KAAK,OAAO;AAAA,QAAG;AAAA;AAAA,MAA2B;AAAA,IAC1F;AAEA,WAAO,KAAK;AAAA,EACb;AACD;AAEO,IAAM,uBAAN,cAAmC,WAAwC;AAAA,EA1JlF,OA0JkF;AAAA;AAAA;AAAA,EAI9D;AAAA,EAEnB,YACC,cACqB,oBACR,YACC,aACb;AACD,UAAM;AAEN,SAAK,cAAc,KAAK,UAAU,IAAI,YAAY,mBAAmB,eAAe,cAAc,YAAY,WAAW,CAAC;AAAA,EAC3H;AAAA,EAEA,MAAM,OAAsB;AAC3B,UAAM,KAAK,YAAY,KAAK;AAAA,EAC7B;AAAA,EAIA,QAAW,KAAa,cAAiC;AACxD,WAAO,KAAK,YAAY,QAAQ,KAAK,YAAY;AAAA,EAClD;AACD;AA1Ba,uBAAN;AAAA,EAQJ;AAAA,EACA;AAAA,EACA;AAAA,GAVU;AA4BN,MAAM,qBAAqB,qBAA8C;AAAA,EAtLhF,OAsLgF;AAAA;AAAA;AAAA,EAI/E,QAAQ,KAAa,MAAoE;AACxF,SAAK,YAAY,QAAQ,KAAK,IAAI;AAAA,EACnC;AAAA,EAEA,SAAS,OAAuG;AAC/G,SAAK,YAAY,SAAS,KAAK;AAAA,EAChC;AAAA,EAEA,WAAW,KAAmB;AAC7B,SAAK,YAAY,WAAW,GAAG;AAAA,EAChC;AAAA,EAEA,QAAuB;AACtB,WAAO,KAAK,YAAY,MAAM;AAAA,EAC/B;AACD;",
  "names": ["SaveStrategy"]
}
