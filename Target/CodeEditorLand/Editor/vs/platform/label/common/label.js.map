{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/label/common/label.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport type {\n\tISingleFolderWorkspaceIdentifier,\n\tIWorkspace,\n\tIWorkspaceIdentifier,\n} from \"../../workspace/common/workspace.js\";\n\nexport const ILabelService = createDecorator<ILabelService>(\"labelService\");\n\nexport interface ILabelService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Gets the human readable label for a uri.\n\t * If `relative` is passed returns a label relative to the workspace root that the uri belongs to.\n\t * If `noPrefix` is passed does not tildify the label and also does not prepand the root name for relative labels in a multi root scenario.\n\t * If `separator` is passed, will use that over the defined path separator of the formatter.\n\t */\n\tgetUriLabel(\n\t\tresource: URI,\n\t\toptions?: {\n\t\t\trelative?: boolean;\n\t\t\tnoPrefix?: boolean;\n\t\t\tseparator?: \"/\" | \"\\\\\";\n\t\t},\n\t): string;\n\tgetUriBasenameLabel(resource: URI): string;\n\tgetWorkspaceLabel(\n\t\tworkspace:\n\t\t\t| IWorkspaceIdentifier\n\t\t\t| ISingleFolderWorkspaceIdentifier\n\t\t\t| URI\n\t\t\t| IWorkspace,\n\t\toptions?: { verbose: Verbosity },\n\t): string;\n\tgetHostLabel(scheme: string, authority?: string): string;\n\tgetHostTooltip(scheme: string, authority?: string): string | undefined;\n\tgetSeparator(scheme: string, authority?: string): \"/\" | \"\\\\\";\n\n\tregisterFormatter(formatter: ResourceLabelFormatter): IDisposable;\n\tonDidChangeFormatters: Event<IFormatterChangeEvent>;\n\n\t/**\n\t * Registers a formatter that's cached for the machine beyond the lifecycle\n\t * of the current window. Disposing the formatter _will not_ remove it from\n\t * the cache.\n\t */\n\tregisterCachedFormatter(formatter: ResourceLabelFormatter): IDisposable;\n}\n\nexport enum Verbosity {\n\tSHORT = 0,\n\tMEDIUM = 1,\n\tLONG = 2,\n}\n\nexport interface IFormatterChangeEvent {\n\tscheme: string;\n}\n\nexport interface ResourceLabelFormatter {\n\tscheme: string;\n\tauthority?: string;\n\tpriority?: boolean;\n\tformatting: ResourceLabelFormatting;\n}\n\nexport interface ResourceLabelFormatting {\n\tlabel: string; // myLabel:/${path}\n\tseparator: \"/\" | \"\\\\\" | \"\";\n\ttildify?: boolean;\n\tnormalizeDriveLetter?: boolean;\n\tworkspaceSuffix?: string;\n\tworkspaceTooltip?: string;\n\tauthorityPrefix?: string;\n\tstripPathStartingSeparator?: boolean;\n}\n"],
  "mappings": "AAQA,SAAS,uBAAuB;AAOzB,MAAM,gBAAgB,gBAA+B,cAAc;AA2CnE,IAAK,YAAL,kBAAKA,eAAL;AACN,EAAAA,sBAAA,WAAQ,KAAR;AACA,EAAAA,sBAAA,YAAS,KAAT;AACA,EAAAA,sBAAA,UAAO,KAAP;AAHW,SAAAA;AAAA,GAAA;",
  "names": ["Verbosity"]
}
