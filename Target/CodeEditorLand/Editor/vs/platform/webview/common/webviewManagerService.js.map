{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/webview/common/webviewManagerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const IWebviewManagerService = createDecorator<IWebviewManagerService>('webviewManagerService');\n\nexport interface WebviewWebContentsId {\n\treadonly webContentsId: number;\n}\n\nexport interface WebviewWindowId {\n\treadonly windowId: number;\n}\n\nexport interface FindInFrameOptions {\n\treadonly forward?: boolean;\n\treadonly findNext?: boolean;\n\treadonly matchCase?: boolean;\n}\n\nexport interface FoundInFrameResult {\n\treadonly requestId: number;\n\treadonly activeMatchOrdinal: number;\n\treadonly matches: number;\n\treadonly selectionArea: any;\n\treadonly finalUpdate: boolean;\n}\n\nexport interface IWebviewManagerService {\n\t_serviceBrand: unknown;\n\n\tonFoundInFrame: Event<FoundInFrameResult>;\n\n\tsetIgnoreMenuShortcuts(id: WebviewWebContentsId | WebviewWindowId, enabled: boolean): Promise<void>;\n\n\tfindInFrame(windowId: WebviewWindowId, frameName: string, text: string, options: FindInFrameOptions): Promise<void>;\n\n\tstopFindInFrame(windowId: WebviewWindowId, frameName: string, options: { keepSelection?: boolean }): Promise<void>;\n}\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAEzB,MAAM,yBAAyB,gBAAwC,uBAAuB;",
  "names": []
}
