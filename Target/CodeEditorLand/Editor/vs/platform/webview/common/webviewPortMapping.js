import{Schemas as a}from"../../../base/common/network.js";import{URI as u}from"../../../base/common/uri.js";import{extractLocalHostUriMetaDataForPortMapping as l}from"../../tunnel/common/tunnel.js";class m{constructor(n,o,t){this._getExtensionLocation=n;this._getMappings=o;this.tunnelService=t}_tunnels=new Map;async getRedirect(n,o){const t=u.parse(o),r=l(t);if(r){for(const e of this._getMappings())if(e.webviewPort===r.port){const s=this._getExtensionLocation();if(s&&s.scheme===a.vscodeRemote){const i=n&&await this.getOrCreateTunnel(n,e.extensionHostPort);if(i)return i.tunnelLocalPort===e.webviewPort?void 0:encodeURI(t.with({authority:`127.0.0.1:${i.tunnelLocalPort}`}).toString(!0))}if(e.webviewPort!==e.extensionHostPort)return encodeURI(t.with({authority:`${r.address}:${e.extensionHostPort}`}).toString(!0))}}}async dispose(){for(const n of this._tunnels.values())await n.dispose();this._tunnels.clear()}async getOrCreateTunnel(n,o){const t=this._tunnels.get(o);if(t)return t;const r=await this.tunnelService.openTunnel({getAddress:async()=>n},void 0,o);let e;return typeof r=="string"&&(e=void 0),e&&this._tunnels.set(o,e),e}}export{m as WebviewPortMappingManager};
