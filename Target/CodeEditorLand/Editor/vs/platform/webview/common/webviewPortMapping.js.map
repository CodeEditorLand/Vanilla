{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/webview/common/webviewPortMapping.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type { IAddress } from \"../../remote/common/remoteAgentConnection.js\";\nimport {\n\ttype ITunnelService,\n\ttype RemoteTunnel,\n\textractLocalHostUriMetaDataForPortMapping,\n} from \"../../tunnel/common/tunnel.js\";\n\nexport interface IWebviewPortMapping {\n\treadonly webviewPort: number;\n\treadonly extensionHostPort: number;\n}\n\n/**\n * Manages port mappings for a single webview.\n */\nexport class WebviewPortMappingManager implements IDisposable {\n\tprivate readonly _tunnels = new Map<number, RemoteTunnel>();\n\n\tconstructor(\n\t\tprivate readonly _getExtensionLocation: () => URI | undefined,\n\t\tprivate readonly _getMappings: () => readonly IWebviewPortMapping[],\n\t\tprivate readonly tunnelService: ITunnelService,\n\t) {}\n\n\tpublic async getRedirect(\n\t\tresolveAuthority: IAddress | null | undefined,\n\t\turl: string,\n\t): Promise<string | undefined> {\n\t\tconst uri = URI.parse(url);\n\t\tconst requestLocalHostInfo =\n\t\t\textractLocalHostUriMetaDataForPortMapping(uri);\n\t\tif (!requestLocalHostInfo) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (const mapping of this._getMappings()) {\n\t\t\tif (mapping.webviewPort === requestLocalHostInfo.port) {\n\t\t\t\tconst extensionLocation = this._getExtensionLocation();\n\t\t\t\tif (\n\t\t\t\t\textensionLocation &&\n\t\t\t\t\textensionLocation.scheme === Schemas.vscodeRemote\n\t\t\t\t) {\n\t\t\t\t\tconst tunnel =\n\t\t\t\t\t\tresolveAuthority &&\n\t\t\t\t\t\t(await this.getOrCreateTunnel(\n\t\t\t\t\t\t\tresolveAuthority,\n\t\t\t\t\t\t\tmapping.extensionHostPort,\n\t\t\t\t\t\t));\n\t\t\t\t\tif (tunnel) {\n\t\t\t\t\t\tif (tunnel.tunnelLocalPort === mapping.webviewPort) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn encodeURI(\n\t\t\t\t\t\t\turi\n\t\t\t\t\t\t\t\t.with({\n\t\t\t\t\t\t\t\t\tauthority: `127.0.0.1:${tunnel.tunnelLocalPort}`,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.toString(true),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (mapping.webviewPort !== mapping.extensionHostPort) {\n\t\t\t\t\treturn encodeURI(\n\t\t\t\t\t\turi\n\t\t\t\t\t\t\t.with({\n\t\t\t\t\t\t\t\tauthority: `${requestLocalHostInfo.address}:${mapping.extensionHostPort}`,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.toString(true),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync dispose() {\n\t\tfor (const tunnel of this._tunnels.values()) {\n\t\t\tawait tunnel.dispose();\n\t\t}\n\t\tthis._tunnels.clear();\n\t}\n\n\tprivate async getOrCreateTunnel(\n\t\tremoteAuthority: IAddress,\n\t\tremotePort: number,\n\t): Promise<RemoteTunnel | undefined> {\n\t\tconst existing = this._tunnels.get(remotePort);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\t\tconst tunnelOrError = await this.tunnelService.openTunnel(\n\t\t\t{ getAddress: async () => remoteAuthority },\n\t\t\tundefined,\n\t\t\tremotePort,\n\t\t);\n\t\tlet tunnel: RemoteTunnel | undefined;\n\t\tif (typeof tunnelOrError === \"string\") {\n\t\t\ttunnel = undefined;\n\t\t}\n\t\tif (tunnel) {\n\t\t\tthis._tunnels.set(remotePort, tunnel);\n\t\t}\n\t\treturn tunnel;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,eAAe;AACxB,SAAS,WAAW;AAEpB;AAAA,EAGC;AAAA,OACM;AAUA,MAAM,0BAAiD;AAAA,EAG7D,YACkB,uBACA,cACA,eAChB;AAHgB;AACA;AACA;AAAA,EACf;AAAA,EA9BJ,OAuB8D;AAAA;AAAA;AAAA,EAC5C,WAAW,oBAAI,IAA0B;AAAA,EAQ1D,MAAa,YACZ,kBACA,KAC8B;AAC9B,UAAM,MAAM,IAAI,MAAM,GAAG;AACzB,UAAM,uBACL,0CAA0C,GAAG;AAC9C,QAAI,CAAC,sBAAsB;AAC1B,aAAO;AAAA,IACR;AAEA,eAAW,WAAW,KAAK,aAAa,GAAG;AAC1C,UAAI,QAAQ,gBAAgB,qBAAqB,MAAM;AACtD,cAAM,oBAAoB,KAAK,sBAAsB;AACrD,YACC,qBACA,kBAAkB,WAAW,QAAQ,cACpC;AACD,gBAAM,SACL,oBACC,MAAM,KAAK;AAAA,YACX;AAAA,YACA,QAAQ;AAAA,UACT;AACD,cAAI,QAAQ;AACX,gBAAI,OAAO,oBAAoB,QAAQ,aAAa;AACnD,qBAAO;AAAA,YACR;AACA,mBAAO;AAAA,cACN,IACE,KAAK;AAAA,gBACL,WAAW,aAAa,OAAO,eAAe;AAAA,cAC/C,CAAC,EACA,SAAS,IAAI;AAAA,YAChB;AAAA,UACD;AAAA,QACD;AAEA,YAAI,QAAQ,gBAAgB,QAAQ,mBAAmB;AACtD,iBAAO;AAAA,YACN,IACE,KAAK;AAAA,cACL,WAAW,GAAG,qBAAqB,OAAO,IAAI,QAAQ,iBAAiB;AAAA,YACxE,CAAC,EACA,SAAS,IAAI;AAAA,UAChB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,UAAU;AACf,eAAW,UAAU,KAAK,SAAS,OAAO,GAAG;AAC5C,YAAM,OAAO,QAAQ;AAAA,IACtB;AACA,SAAK,SAAS,MAAM;AAAA,EACrB;AAAA,EAEA,MAAc,kBACb,iBACA,YACoC;AACpC,UAAM,WAAW,KAAK,SAAS,IAAI,UAAU;AAC7C,QAAI,UAAU;AACb,aAAO;AAAA,IACR;AACA,UAAM,gBAAgB,MAAM,KAAK,cAAc;AAAA,MAC9C,EAAE,YAAY,mCAAY,iBAAZ,cAA4B;AAAA,MAC1C;AAAA,MACA;AAAA,IACD;AACA,QAAI;AACJ,QAAI,OAAO,kBAAkB,UAAU;AACtC,eAAS;AAAA,IACV;AACA,QAAI,QAAQ;AACX,WAAK,SAAS,IAAI,YAAY,MAAM;AAAA,IACrC;AACA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
