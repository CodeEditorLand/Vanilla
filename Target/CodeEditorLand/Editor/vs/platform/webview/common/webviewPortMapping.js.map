{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/webview/common/webviewPortMapping.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IAddress } from '../../remote/common/remoteAgentConnection.js';\nimport { extractLocalHostUriMetaDataForPortMapping, ITunnelService, RemoteTunnel } from '../../tunnel/common/tunnel.js';\n\nexport interface IWebviewPortMapping {\n\treadonly webviewPort: number;\n\treadonly extensionHostPort: number;\n}\n\n/**\n * Manages port mappings for a single webview.\n */\nexport class WebviewPortMappingManager implements IDisposable {\n\n\tprivate readonly _tunnels = new Map<number, RemoteTunnel>();\n\n\tconstructor(\n\t\tprivate readonly _getExtensionLocation: () => URI | undefined,\n\t\tprivate readonly _getMappings: () => readonly IWebviewPortMapping[],\n\t\tprivate readonly tunnelService: ITunnelService\n\t) { }\n\n\tpublic async getRedirect(resolveAuthority: IAddress | null | undefined, url: string): Promise<string | undefined> {\n\t\tconst uri = URI.parse(url);\n\t\tconst requestLocalHostInfo = extractLocalHostUriMetaDataForPortMapping(uri);\n\t\tif (!requestLocalHostInfo) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (const mapping of this._getMappings()) {\n\t\t\tif (mapping.webviewPort === requestLocalHostInfo.port) {\n\t\t\t\tconst extensionLocation = this._getExtensionLocation();\n\t\t\t\tif (extensionLocation && extensionLocation.scheme === Schemas.vscodeRemote) {\n\t\t\t\t\tconst tunnel = resolveAuthority && await this.getOrCreateTunnel(resolveAuthority, mapping.extensionHostPort);\n\t\t\t\t\tif (tunnel) {\n\t\t\t\t\t\tif (tunnel.tunnelLocalPort === mapping.webviewPort) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn encodeURI(uri.with({\n\t\t\t\t\t\t\tauthority: `127.0.0.1:${tunnel.tunnelLocalPort}`,\n\t\t\t\t\t\t}).toString(true));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (mapping.webviewPort !== mapping.extensionHostPort) {\n\t\t\t\t\treturn encodeURI(uri.with({\n\t\t\t\t\t\tauthority: `${requestLocalHostInfo.address}:${mapping.extensionHostPort}`\n\t\t\t\t\t}).toString(true));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync dispose() {\n\t\tfor (const tunnel of this._tunnels.values()) {\n\t\t\tawait tunnel.dispose();\n\t\t}\n\t\tthis._tunnels.clear();\n\t}\n\n\tprivate async getOrCreateTunnel(remoteAuthority: IAddress, remotePort: number): Promise<RemoteTunnel | undefined> {\n\t\tconst existing = this._tunnels.get(remotePort);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\t\tconst tunnelOrError = await this.tunnelService.openTunnel({ getAddress: async () => remoteAuthority }, undefined, remotePort);\n\t\tlet tunnel: RemoteTunnel | undefined;\n\t\tif (typeof tunnelOrError === 'string') {\n\t\t\ttunnel = undefined;\n\t\t}\n\t\tif (tunnel) {\n\t\t\tthis._tunnels.set(remotePort, tunnel);\n\t\t}\n\t\treturn tunnel;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,2CAA2C,gBAAgB,oBAAoB;AAUjF,MAAM,0BAAiD;AAAA,EAI7D,YACkB,uBACA,cACA,eAChB;AAHgB;AACA;AACA;AAAA,EACd;AAAA,EA3BL,OAmB8D;AAAA;AAAA;AAAA,EAE5C,WAAW,oBAAI,IAA0B;AAAA,EAQ1D,MAAa,YAAY,kBAA+C,KAA0C;AACjH,UAAM,MAAM,IAAI,MAAM,GAAG;AACzB,UAAM,uBAAuB,0CAA0C,GAAG;AAC1E,QAAI,CAAC,sBAAsB;AAC1B,aAAO;AAAA,IACR;AAEA,eAAW,WAAW,KAAK,aAAa,GAAG;AAC1C,UAAI,QAAQ,gBAAgB,qBAAqB,MAAM;AACtD,cAAM,oBAAoB,KAAK,sBAAsB;AACrD,YAAI,qBAAqB,kBAAkB,WAAW,QAAQ,cAAc;AAC3E,gBAAM,SAAS,oBAAoB,MAAM,KAAK,kBAAkB,kBAAkB,QAAQ,iBAAiB;AAC3G,cAAI,QAAQ;AACX,gBAAI,OAAO,oBAAoB,QAAQ,aAAa;AACnD,qBAAO;AAAA,YACR;AACA,mBAAO,UAAU,IAAI,KAAK;AAAA,cACzB,WAAW,aAAa,OAAO,eAAe;AAAA,YAC/C,CAAC,EAAE,SAAS,IAAI,CAAC;AAAA,UAClB;AAAA,QACD;AAEA,YAAI,QAAQ,gBAAgB,QAAQ,mBAAmB;AACtD,iBAAO,UAAU,IAAI,KAAK;AAAA,YACzB,WAAW,GAAG,qBAAqB,OAAO,IAAI,QAAQ,iBAAiB;AAAA,UACxE,CAAC,EAAE,SAAS,IAAI,CAAC;AAAA,QAClB;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,UAAU;AACf,eAAW,UAAU,KAAK,SAAS,OAAO,GAAG;AAC5C,YAAM,OAAO,QAAQ;AAAA,IACtB;AACA,SAAK,SAAS,MAAM;AAAA,EACrB;AAAA,EAEA,MAAc,kBAAkB,iBAA2B,YAAuD;AACjH,UAAM,WAAW,KAAK,SAAS,IAAI,UAAU;AAC7C,QAAI,UAAU;AACb,aAAO;AAAA,IACR;AACA,UAAM,gBAAgB,MAAM,KAAK,cAAc,WAAW,EAAE,YAAY,mCAAY,iBAAZ,cAA4B,GAAG,QAAW,UAAU;AAC5H,QAAI;AACJ,QAAI,OAAO,kBAAkB,UAAU;AACtC,eAAS;AAAA,IACV;AACA,QAAI,QAAQ;AACX,WAAK,SAAS,IAAI,YAAY,MAAM;AAAA,IACrC;AACA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
