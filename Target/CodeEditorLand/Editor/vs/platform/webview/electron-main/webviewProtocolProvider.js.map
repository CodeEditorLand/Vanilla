{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/webview/electron-main/webviewProtocolProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { protocol } from \"electron\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype AppResourcePath,\n\tCOI,\n\tFileAccess,\n\tSchemas,\n} from \"../../../base/common/network.js\";\nimport { URI } from \"../../../base/common/uri.js\";\n\nexport class WebviewProtocolProvider extends Disposable {\n\tprivate static validWebviewFilePaths = new Map([\n\t\t[\"/index.html\", \"index.html\"],\n\t\t[\"/fake.html\", \"fake.html\"],\n\t\t[\"/service-worker.js\", \"service-worker.js\"],\n\t]);\n\n\tconstructor() {\n\t\tsuper();\n\n\t\t// Register the protocol for loading webview html\n\t\tconst webviewHandler = this.handleWebviewRequest.bind(this);\n\t\tprotocol.registerFileProtocol(Schemas.vscodeWebview, webviewHandler);\n\t}\n\n\tprivate handleWebviewRequest(\n\t\trequest: Electron.ProtocolRequest,\n\t\tcallback: (response: string | Electron.ProtocolResponse) => void,\n\t) {\n\t\ttry {\n\t\t\tconst uri = URI.parse(request.url);\n\t\t\tconst entry = WebviewProtocolProvider.validWebviewFilePaths.get(\n\t\t\t\turi.path,\n\t\t\t);\n\t\t\tif (typeof entry === \"string\") {\n\t\t\t\tconst relativeResourcePath: AppResourcePath = `vs/workbench/contrib/webview/browser/pre/${entry}`;\n\t\t\t\tconst url = FileAccess.asFileUri(relativeResourcePath);\n\t\t\t\treturn callback({\n\t\t\t\t\tpath: url.fsPath,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t...COI.getHeadersFromQuery(request.url),\n\t\t\t\t\t\t\"Cross-Origin-Resource-Policy\": \"cross-origin\",\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn callback({\n\t\t\t\t\terror:\n\t\t\t\t\t\t-10 /* ACCESS_DENIED - https://cs.chromium.org/chromium/src/net/base/net_error_list.h?l=32 */,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch {\n\t\t\t// noop\n\t\t}\n\t\treturn callback({\n\t\t\terror:\n\t\t\t\t-2 /* FAILED - https://cs.chromium.org/chromium/src/net/base/net_error_list.h?l=32 */,\n\t\t});\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,WAAW;AAEb,MAAM,gCAAgC,WAAW;AAAA,EAfxD,OAewD;AAAA;AAAA;AAAA,EACvD,OAAe,wBAAwB,oBAAI,IAAI;AAAA,IAC9C,CAAC,eAAe,YAAY;AAAA,IAC5B,CAAC,cAAc,WAAW;AAAA,IAC1B,CAAC,sBAAsB,mBAAmB;AAAA,EAC3C,CAAC;AAAA,EAED,cAAc;AACb,UAAM;AAGN,UAAM,iBAAiB,KAAK,qBAAqB,KAAK,IAAI;AAC1D,aAAS,qBAAqB,QAAQ,eAAe,cAAc;AAAA,EACpE;AAAA,EAEQ,qBACP,SACA,UACC;AACD,QAAI;AACH,YAAM,MAAM,IAAI,MAAM,QAAQ,GAAG;AACjC,YAAM,QAAQ,wBAAwB,sBAAsB;AAAA,QAC3D,IAAI;AAAA,MACL;AACA,UAAI,OAAO,UAAU,UAAU;AAC9B,cAAM,uBAAwC,4CAA4C,KAAK;AAC/F,cAAM,MAAM,WAAW,UAAU,oBAAoB;AACrD,eAAO,SAAS;AAAA,UACf,MAAM,IAAI;AAAA,UACV,SAAS;AAAA,YACR,GAAG,IAAI,oBAAoB,QAAQ,GAAG;AAAA,YACtC,gCAAgC;AAAA,UACjC;AAAA,QACD,CAAC;AAAA,MACF,OAAO;AACN,eAAO,SAAS;AAAA,UACf,OACC;AAAA,QACF,CAAC;AAAA,MACF;AAAA,IACD,QAAQ;AAAA,IAER;AACA,WAAO,SAAS;AAAA,MACf,OACC;AAAA,IACF,CAAC;AAAA,EACF;AACD;",
  "names": []
}
