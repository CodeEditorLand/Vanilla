{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/launch/electron-main/launchMainService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app } from \"electron\";\nimport { coalesce } from \"../../../base/common/arrays.js\";\nimport {\n\ttype IProcessEnvironment,\n\tisMacintosh,\n} from \"../../../base/common/platform.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { whenDeleted } from \"../../../base/node/pfs.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport type { NativeParsedArgs } from \"../../environment/common/argv.js\";\nimport { isLaunchedFromCli } from \"../../environment/node/argvHelper.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../log/common/log.js\";\nimport { IURLService } from \"../../url/common/url.js\";\nimport type { IProtocolUrl } from \"../../url/electron-main/url.js\";\nimport type { IWindowSettings } from \"../../window/common/window.js\";\nimport type { ICodeWindow } from \"../../window/electron-main/window.js\";\nimport {\n\ttype IOpenConfiguration,\n\tIWindowsMainService,\n\tOpenContext,\n} from \"../../windows/electron-main/windows.js\";\n\nexport const ID = \"launchMainService\";\nexport const ILaunchMainService = createDecorator<ILaunchMainService>(ID);\n\nexport interface IStartArguments {\n\treadonly args: NativeParsedArgs;\n\treadonly userEnv: IProcessEnvironment;\n}\n\nexport interface ILaunchMainService {\n\treadonly _serviceBrand: undefined;\n\n\tstart(args: NativeParsedArgs, userEnv: IProcessEnvironment): Promise<void>;\n\n\tgetMainProcessId(): Promise<number>;\n}\n\nexport class LaunchMainService implements ILaunchMainService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService\n\t\tprivate readonly windowsMainService: IWindowsMainService,\n\t\t@IURLService private readonly urlService: IURLService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {}\n\n\tasync start(\n\t\targs: NativeParsedArgs,\n\t\tuserEnv: IProcessEnvironment,\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"Received data from other instance: \",\n\t\t\targs,\n\t\t\tuserEnv,\n\t\t);\n\n\t\t// macOS: Electron > 7.x changed its behaviour to not\n\t\t// bring the application to the foreground when a window\n\t\t// is focused programmatically. Only via `app.focus` and\n\t\t// the option `steal: true` can you get the previous\n\t\t// behaviour back. The only reason to use this option is\n\t\t// when a window is getting focused while the application\n\t\t// is not in the foreground and since we got instructed\n\t\t// to open a new window from another instance, we ensure\n\t\t// that the app has focus.\n\t\tif (isMacintosh) {\n\t\t\tapp.focus({ steal: true });\n\t\t}\n\n\t\t// Check early for open-url which is handled in URL service\n\t\tconst urlsToOpen = this.parseOpenUrl(args);\n\t\tif (urlsToOpen.length) {\n\t\t\tlet whenWindowReady: Promise<unknown> = Promise.resolve();\n\n\t\t\t// Create a window if there is none\n\t\t\tif (this.windowsMainService.getWindowCount() === 0) {\n\t\t\t\tconst window = (\n\t\t\t\t\tawait this.windowsMainService.openEmptyWindow({\n\t\t\t\t\t\tcontext: OpenContext.DESKTOP,\n\t\t\t\t\t})\n\t\t\t\t).at(0);\n\t\t\t\tif (window) {\n\t\t\t\t\twhenWindowReady = window.ready();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Make sure a window is open, ready to receive the url event\n\t\t\twhenWindowReady.then(() => {\n\t\t\t\tfor (const { uri, originalUrl } of urlsToOpen) {\n\t\t\t\t\tthis.urlService.open(uri, { originalUrl });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Otherwise handle in windows service\n\t\telse {\n\t\t\treturn this.startOpenWindow(args, userEnv);\n\t\t}\n\t}\n\n\tprivate parseOpenUrl(args: NativeParsedArgs): IProtocolUrl[] {\n\t\tif (args[\"open-url\"] && args._urls && args._urls.length > 0) {\n\t\t\t// --open-url must contain -- followed by the url(s)\n\t\t\t// process.argv is used over args._ as args._ are resolved to file paths at this point\n\n\t\t\treturn coalesce(\n\t\t\t\targs._urls.map((url) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn { uri: URI.parse(url), originalUrl: url };\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate async startOpenWindow(\n\t\targs: NativeParsedArgs,\n\t\tuserEnv: IProcessEnvironment,\n\t): Promise<void> {\n\t\tconst context = isLaunchedFromCli(userEnv)\n\t\t\t? OpenContext.CLI\n\t\t\t: OpenContext.DESKTOP;\n\t\tlet usedWindows: ICodeWindow[] = [];\n\n\t\tconst waitMarkerFileURI =\n\t\t\targs.wait && args.waitMarkerFilePath\n\t\t\t\t? URI.file(args.waitMarkerFilePath)\n\t\t\t\t: undefined;\n\t\tconst remoteAuthority = args.remote || undefined;\n\n\t\tconst baseConfig: IOpenConfiguration = {\n\t\t\tcontext,\n\t\t\tcli: args,\n\t\t\t/**\n\t\t\t * When opening a new window from a second instance that sent args and env\n\t\t\t * over to this instance, we want to preserve the environment only if that second\n\t\t\t * instance was spawned from the CLI or used the `--preserve-env` flag (example:\n\t\t\t * when using `open -n \"VSCode.app\" --args --preserve-env WORKSPACE_FOLDER`).\n\t\t\t *\n\t\t\t * This is done to ensure that the second window gets treated exactly the same\n\t\t\t * as the first window, for example, it gets the same resolved user shell environment.\n\t\t\t *\n\t\t\t * https://github.com/microsoft/vscode/issues/194736\n\t\t\t */\n\t\t\tuserEnv:\n\t\t\t\targs[\"preserve-env\"] || context === OpenContext.CLI\n\t\t\t\t\t? userEnv\n\t\t\t\t\t: undefined,\n\t\t\twaitMarkerFileURI,\n\t\t\tremoteAuthority,\n\t\t\tforceProfile: args.profile,\n\t\t\tforceTempProfile: args[\"profile-temp\"],\n\t\t};\n\n\t\t// Special case extension development\n\t\tif (!!args.extensionDevelopmentPath) {\n\t\t\tawait this.windowsMainService.openExtensionDevelopmentHostWindow(\n\t\t\t\targs.extensionDevelopmentPath,\n\t\t\t\tbaseConfig,\n\t\t\t);\n\t\t}\n\n\t\t// Start without file/folder arguments\n\t\telse if (!args._.length && !args[\"folder-uri\"] && !args[\"file-uri\"]) {\n\t\t\tlet openNewWindow = false;\n\n\t\t\t// Force new window\n\t\t\tif (\n\t\t\t\targs[\"new-window\"] ||\n\t\t\t\tbaseConfig.forceProfile ||\n\t\t\t\tbaseConfig.forceTempProfile\n\t\t\t) {\n\t\t\t\topenNewWindow = true;\n\t\t\t}\n\n\t\t\t// Force reuse window\n\t\t\telse if (args[\"reuse-window\"]) {\n\t\t\t\topenNewWindow = false;\n\t\t\t}\n\n\t\t\t// Otherwise check for settings\n\t\t\telse {\n\t\t\t\tconst windowConfig = this.configurationService.getValue<\n\t\t\t\t\tIWindowSettings | undefined\n\t\t\t\t>(\"window\");\n\t\t\t\tconst openWithoutArgumentsInNewWindowConfig =\n\t\t\t\t\twindowConfig?.openWithoutArgumentsInNewWindow ||\n\t\t\t\t\t\"default\" /* default */;\n\t\t\t\tswitch (openWithoutArgumentsInNewWindowConfig) {\n\t\t\t\t\tcase \"on\":\n\t\t\t\t\t\topenNewWindow = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"off\":\n\t\t\t\t\t\topenNewWindow = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\topenNewWindow = !isMacintosh; // prefer to restore running instance on macOS\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Open new Window\n\t\t\tif (openNewWindow) {\n\t\t\t\tusedWindows = await this.windowsMainService.open({\n\t\t\t\t\t...baseConfig,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tforceEmpty: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Focus existing window or open if none opened\n\t\t\telse {\n\t\t\t\tconst lastActive =\n\t\t\t\t\tthis.windowsMainService.getLastActiveWindow();\n\t\t\t\tif (lastActive) {\n\t\t\t\t\tthis.windowsMainService.openExistingWindow(\n\t\t\t\t\t\tlastActive,\n\t\t\t\t\t\tbaseConfig,\n\t\t\t\t\t);\n\n\t\t\t\t\tusedWindows = [lastActive];\n\t\t\t\t} else {\n\t\t\t\t\tusedWindows = await this.windowsMainService.open({\n\t\t\t\t\t\t...baseConfig,\n\t\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Start with file/folder arguments\n\t\telse {\n\t\t\tusedWindows = await this.windowsMainService.open({\n\t\t\t\t...baseConfig,\n\t\t\t\tforceNewWindow: args[\"new-window\"],\n\t\t\t\tpreferNewWindow: !args[\"reuse-window\"] && !args.wait,\n\t\t\t\tforceReuseWindow: args[\"reuse-window\"],\n\t\t\t\tdiffMode: args.diff,\n\t\t\t\tmergeMode: args.merge,\n\t\t\t\taddMode: args.add,\n\t\t\t\tnoRecentEntry: !!args[\"skip-add-to-recently-opened\"],\n\t\t\t\tgotoLineMode: args.goto,\n\t\t\t});\n\t\t}\n\n\t\t// If the other instance is waiting to be killed, we hook up a window listener if one window\n\t\t// is being used and only then resolve the startup promise which will kill this second instance.\n\t\t// In addition, we poll for the wait marker file to be deleted to return.\n\t\tif (waitMarkerFileURI && usedWindows.length === 1 && usedWindows[0]) {\n\t\t\treturn Promise.race([\n\t\t\t\tusedWindows[0].whenClosedOrLoaded,\n\t\t\t\twhenDeleted(waitMarkerFileURI.fsPath),\n\t\t\t]).then(\n\t\t\t\t() => undefined,\n\t\t\t\t() => undefined,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync getMainProcessId(): Promise<number> {\n\t\tthis.logService.trace(\n\t\t\t\"Received request for process ID from other instance.\",\n\t\t);\n\n\t\treturn process.pid;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
