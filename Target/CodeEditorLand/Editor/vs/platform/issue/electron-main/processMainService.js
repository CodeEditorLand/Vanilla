var S=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var v=(a,e,i,r)=>{for(var o=r>1?void 0:r?y(e,i):e,n=a.length-1,s;n>=0;n--)(s=a[n])&&(o=(r?s(e,i,o):s(o))||o);return r&&o&&S(e,i,o),o},c=(a,e)=>(i,r)=>e(i,r,a);import{BrowserWindow as h,contentTracing as x,screen as p}from"electron";import{randomPath as W}from"../../../base/common/extpath.js";import{DisposableStore as P}from"../../../base/common/lifecycle.js";import{FileAccess as f}from"../../../base/common/network.js";import{isMacintosh as E}from"../../../base/common/platform.js";import{listProcesses as I}from"../../../base/node/ps.js";import{validatedIpcMain as w}from"../../../base/parts/ipc/electron-main/ipcMain.js";import{getNLSLanguage as M,getNLSMessages as D,localize as m}from"../../../nls.js";import{IDiagnosticsService as b,isRemoteDiagnosticError as C}from"../../diagnostics/common/diagnostics.js";import{IDiagnosticsMainService as k}from"../../diagnostics/electron-main/diagnosticsMainService.js";import{IDialogMainService as B}from"../../dialogs/electron-main/dialogMainService.js";import{IEnvironmentMainService as L}from"../../environment/electron-main/environmentMainService.js";import{ICSSDevelopmentService as O}from"../../cssDev/node/cssDevService.js";import{ILogService as R}from"../../log/common/log.js";import{INativeHostMainService as T}from"../../native/electron-main/nativeHostMainService.js";import U from"../../product/common/product.js";import{IProductService as N}from"../../product/common/productService.js";import{IProtocolMainService as z}from"../../protocol/electron-main/protocol.js";import{IStateService as $}from"../../state/node/state.js";import{UtilityProcess as A}from"../../utilityProcess/electron-main/utilityProcess.js";import{zoomLevelToZoomFactor as F}from"../../window/common/window.js";import{isESM as H}from"../../../base/common/amd.js";const u="issue.processExplorerWindowState";let l=class{constructor(e,i,r,o,n,s,t,d,g,K,q){this.userEnv=e;this.environmentMainService=i;this.logService=r;this.diagnosticsService=o;this.diagnosticsMainService=n;this.dialogMainService=s;this.nativeHostMainService=t;this.protocolMainService=d;this.productService=g;this.stateService=K;this.cssDevelopmentService=q;this.registerListeners()}static DEFAULT_BACKGROUND_COLOR="#1E1E1E";processExplorerWindow=null;processExplorerParentWindow=null;registerListeners(){w.on("vscode:listProcesses",async e=>{const i=[];try{i.push({name:m("local","Local"),rootProcess:await I(process.pid)}),(await this.diagnosticsMainService.getRemoteDiagnostics({includeProcesses:!0})).forEach(o=>{C(o)?i.push({name:o.hostName,rootProcess:o}):o.processes&&i.push({name:o.hostName,rootProcess:o.processes})})}catch(r){this.logService.error(`Listing processes failed: ${r}`)}this.safeSend(e,"vscode:listProcessesResponse",i)}),w.on("vscode:workbenchCommand",(e,i)=>{const{id:r,from:o,args:n}=i;let s;switch(o){case"processExplorer":s=this.processExplorerParentWindow;break;default:throw new Error(`Unexpected command source: ${o}`)}s?.webContents.send("vscode:runAction",{id:r,from:o,args:n})}),w.on("vscode:closeProcessExplorer",e=>{this.processExplorerWindow?.close()}),w.on("vscode:pidToNameRequest",async e=>{const i=await this.diagnosticsMainService.getMainDiagnostics(),r=[];for(const o of i.windows)r.push([o.pid,`window [${o.id}] (${o.title})`]);for(const{pid:o,name:n}of A.getAll())r.push([o,n]);this.safeSend(e,"vscode:pidToNameResponse",r)})}async openProcessExplorer(e){if(!this.processExplorerWindow&&(this.processExplorerParentWindow=h.getFocusedWindow(),this.processExplorerParentWindow)){const i=new P,r=i.add(this.protocolMainService.createIPCObjectUrl()),o=this.stateService.getItem(u,void 0),n=_(o)?o:this.getWindowPosition(this.processExplorerParentWindow,800,500);this.processExplorerWindow=this.createBrowserWindow(n,r,{backgroundColor:e.styles.backgroundColor,title:m("processExplorer","Process Explorer"),zoomLevel:e.zoomLevel,alwaysOnTop:!0},"process-explorer"),r.update({appRoot:this.environmentMainService.appRoot,windowId:this.processExplorerWindow.id,userEnv:this.userEnv,data:e,product:U,nls:{messages:D(),language:M()},cssModules:this.cssDevelopmentService.isEnabled?await this.cssDevelopmentService.getCssModules():void 0}),this.processExplorerWindow.loadURL(f.asBrowserUri(`vs/code/electron-sandbox/processExplorer/processExplorer${this.environmentMainService.isBuilt?"":"-dev"}.${H?"esm.":""}html`).toString(!0)),this.processExplorerWindow.on("close",()=>{this.processExplorerWindow=null,i.dispose()}),this.processExplorerParentWindow.on("close",()=>{this.processExplorerWindow&&(this.processExplorerWindow.close(),this.processExplorerWindow=null,i.dispose())});const s=()=>{if(!this.processExplorerWindow)return;const t=this.processExplorerWindow.getSize(),d=this.processExplorerWindow.getPosition();if(!t||!d)return;const g={width:t[0],height:t[1],x:d[0],y:d[1]};this.stateService.setItem(u,g)};this.processExplorerWindow.on("moved",s),this.processExplorerWindow.on("resized",s)}this.processExplorerWindow&&this.focusWindow(this.processExplorerWindow)}focusWindow(e){e.isMinimized()&&e.restore(),e.focus()}getWindowPosition(e,i,r){let o;const n=p.getAllDisplays();if(n.length===1)o=n[0];else{if(E){const d=p.getCursorScreenPoint();o=p.getDisplayNearestPoint(d)}!o&&e&&(o=p.getDisplayMatching(e.getBounds())),o||(o=p.getPrimaryDisplay()||n[0])}const s=o.bounds,t={width:i,height:r,x:s.x+s.width/2-i/2,y:s.y+s.height/2-r/2};return s.width>0&&s.height>0&&(t.x<s.x&&(t.x=s.x),t.y<s.y&&(t.y=s.y),t.x>s.x+s.width&&(t.x=s.x),t.y>s.y+s.height&&(t.y=s.y),t.width>s.width&&(t.width=s.width),t.height>s.height&&(t.height=s.height)),t}async stopTracing(){if(!this.environmentMainService.args.trace)return;const e=await x.stopRecording(`${W(this.environmentMainService.userHome.fsPath,this.productService.applicationName)}.trace.txt`);await this.dialogMainService.showMessageBox({type:"info",message:m("trace.message","Successfully created the trace file"),detail:m("trace.detail",`Please create an issue and manually attach the following file:
{0}`,e),buttons:[m({key:"trace.ok",comment:["&& denotes a mnemonic"]},"&&OK")]},h.getFocusedWindow()??void 0),this.nativeHostMainService.showItemInFolder(void 0,e)}async getSystemStatus(){const[e,i]=await Promise.all([this.diagnosticsMainService.getMainDiagnostics(),this.diagnosticsMainService.getRemoteDiagnostics({includeProcesses:!1,includeWorkspaceMetadata:!1})]);return this.diagnosticsService.getDiagnostics(e,i)}async $getSystemInfo(){const[e,i]=await Promise.all([this.diagnosticsMainService.getMainDiagnostics(),this.diagnosticsMainService.getRemoteDiagnostics({includeProcesses:!1,includeWorkspaceMetadata:!1})]);return await this.diagnosticsService.getSystemInfo(e,i)}async $getPerformanceInfo(){try{const[e,i]=await Promise.all([this.diagnosticsMainService.getMainDiagnostics(),this.diagnosticsMainService.getRemoteDiagnostics({includeProcesses:!0,includeWorkspaceMetadata:!0})]);return await this.diagnosticsService.getPerformanceInfo(e,i)}catch(e){throw this.logService.warn("issueService#getPerformanceInfo ",e.message),e}}createBrowserWindow(e,i,r,o){const n=new h({fullscreen:!1,skipTaskbar:!1,resizable:!0,width:e.width,height:e.height,minWidth:300,minHeight:200,x:e.x,y:e.y,title:r.title,backgroundColor:r.backgroundColor||l.DEFAULT_BACKGROUND_COLOR,webPreferences:{preload:f.asFileUri("vs/base/parts/sandbox/electron-sandbox/preload.js").fsPath,additionalArguments:[`--vscode-window-config=${i.resource.toString()}`],v8CacheOptions:this.environmentMainService.useCodeCache?"bypassHeatCheck":"none",enableWebSQL:!1,spellcheck:!1,zoomFactor:F(r.zoomLevel),sandbox:!0},alwaysOnTop:r.alwaysOnTop,experimentalDarkMode:!0});return n.setMenuBarVisibility(!1),n}safeSend(e,i,...r){e.sender.isDestroyed()||e.sender.send(i,...r)}async closeProcessExplorer(){this.processExplorerWindow?.close()}};l=v([c(1,L),c(2,R),c(3,b),c(4,k),c(5,B),c(6,T),c(7,z),c(8,N),c(9,$),c(10,O)],l);function _(a){return typeof a!="object"||a===null?!1:"x"in a&&"y"in a&&"width"in a&&"height"in a}export{l as ProcessMainService};
