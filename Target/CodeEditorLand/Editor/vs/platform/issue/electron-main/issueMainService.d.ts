import { IProcessEnvironment } from "vs/base/common/platform";
import { ICSSDevelopmentService } from "vs/platform/cssDev/node/cssDevService";
import { IDialogMainService } from "vs/platform/dialogs/electron-main/dialogMainService";
import { IEnvironmentMainService } from "vs/platform/environment/electron-main/environmentMainService";
import { IIssueMainService, OldIssueReporterData } from "vs/platform/issue/common/issue";
import { ILogService } from "vs/platform/log/common/log";
import { INativeHostMainService } from "vs/platform/native/electron-main/nativeHostMainService";
import { IProtocolMainService } from "vs/platform/protocol/electron-main/protocol";
import { ICodeWindow } from "vs/platform/window/electron-main/window";
import { IWindowsMainService } from "vs/platform/windows/electron-main/windows";
export declare class IssueMainService implements IIssueMainService {
    private userEnv;
    private readonly environmentMainService;
    private readonly logService;
    private readonly dialogMainService;
    private readonly nativeHostMainService;
    private readonly protocolMainService;
    private readonly windowsMainService;
    private readonly cssDevelopmentService;
    readonly _serviceBrand: undefined;
    private static readonly DEFAULT_BACKGROUND_COLOR;
    private issueReporterWindow;
    private issueReporterParentWindow;
    constructor(userEnv: IProcessEnvironment, environmentMainService: IEnvironmentMainService, logService: ILogService, dialogMainService: IDialogMainService, nativeHostMainService: INativeHostMainService, protocolMainService: IProtocolMainService, windowsMainService: IWindowsMainService, cssDevelopmentService: ICSSDevelopmentService);
    openReporter(data: OldIssueReporterData): Promise<void>;
    $reloadWithExtensionsDisabled(): Promise<void>;
    $showConfirmCloseDialog(): Promise<void>;
    $showClipboardDialog(): Promise<boolean>;
    issueReporterWindowCheck(): ICodeWindow;
    $sendReporterMenu(extensionId: string, extensionName: string): Promise<OldIssueReporterData | undefined>;
    $closeReporter(): Promise<void>;
    private focusWindow;
    private createBrowserWindow;
    private getWindowPosition;
}
