{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/test/electron-main/workbenchTestServices.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from '../../../base/common/async.js';\nimport { Event, Emitter } from '../../../base/common/event.js';\nimport { IAuxiliaryWindow } from '../../auxiliaryWindow/electron-main/auxiliaryWindow.js';\nimport { NativeParsedArgs } from '../../environment/common/argv.js';\nimport { ILifecycleMainService, IRelaunchHandler, LifecycleMainPhase, ShutdownEvent, ShutdownReason } from '../../lifecycle/electron-main/lifecycleMainService.js';\nimport { IStateService } from '../../state/node/state.js';\nimport { ICodeWindow, UnloadReason } from '../../window/electron-main/window.js';\n\nexport class TestLifecycleMainService implements ILifecycleMainService {\n\n\t_serviceBrand: undefined;\n\n\tonBeforeShutdown = Event.None;\n\n\tprivate readonly _onWillShutdown = new Emitter<ShutdownEvent>();\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tasync fireOnWillShutdown(): Promise<void> {\n\t\tconst joiners: Promise<void>[] = [];\n\n\t\tthis._onWillShutdown.fire({\n\t\t\treason: ShutdownReason.QUIT,\n\t\t\tjoin(id, promise) {\n\t\t\t\tjoiners.push(promise);\n\t\t\t}\n\t\t});\n\n\t\tawait Promises.settled(joiners);\n\t}\n\n\tonWillLoadWindow = Event.None;\n\tonBeforeCloseWindow = Event.None;\n\n\twasRestarted = false;\n\tquitRequested = false;\n\n\tphase = LifecycleMainPhase.Ready;\n\n\tregisterWindow(window: ICodeWindow): void { }\n\tregisterAuxWindow(auxWindow: IAuxiliaryWindow): void { }\n\tasync reload(window: ICodeWindow, cli?: NativeParsedArgs): Promise<void> { }\n\tasync unload(window: ICodeWindow, reason: UnloadReason): Promise<boolean> { return true; }\n\tsetRelaunchHandler(handler: IRelaunchHandler): void { }\n\tasync relaunch(options?: { addArgs?: string[] | undefined; removeArgs?: string[] | undefined }): Promise<void> { }\n\tasync quit(willRestart?: boolean): Promise<boolean> { return true; }\n\tasync kill(code?: number): Promise<void> { }\n\tasync when(phase: LifecycleMainPhase): Promise<void> { }\n}\n\nexport class InMemoryTestStateMainService implements IStateService {\n\n\t_serviceBrand: undefined;\n\n\tprivate readonly data = new Map<string, object | string | number | boolean | undefined | null>();\n\n\tsetItem(key: string, data?: object | string | number | boolean | undefined | null): void {\n\t\tthis.data.set(key, data);\n\t}\n\n\tsetItems(items: readonly { key: string; data?: object | string | number | boolean | undefined | null }[]): void {\n\t\tfor (const { key, data } of items) {\n\t\t\tthis.data.set(key, data);\n\t\t}\n\t}\n\n\tgetItem<T>(key: string): T | undefined {\n\t\treturn this.data.get(key) as T | undefined;\n\t}\n\n\tremoveItem(key: string): void {\n\t\tthis.data.delete(key);\n\t}\n\n\tasync close(): Promise<void> { }\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,OAAO,eAAe;AAC/B,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,uBAAuB,kBAAkB,oBAAoB,eAAe,sBAAsB;AAC3G,SAAS,qBAAqB;AAC9B,SAAS,aAAa,oBAAoB;AAEnC,MAAM,yBAA0D;AAAA,EAbvE,OAauE;AAAA;AAAA;AAAA,EAEtE;AAAA,EAEA,mBAAmB,MAAM;AAAA,EAER,kBAAkB,IAAI,QAAuB;AAAA,EACrD,iBAAiB,KAAK,gBAAgB;AAAA,EAE/C,MAAM,qBAAoC;AACzC,UAAM,UAA2B,CAAC;AAElC,SAAK,gBAAgB,KAAK;AAAA,MACzB,QAAQ,eAAe;AAAA,MACvB,KAAK,IAAI,SAAS;AACjB,gBAAQ,KAAK,OAAO;AAAA,MACrB;AAAA,IACD,CAAC;AAED,UAAM,SAAS,QAAQ,OAAO;AAAA,EAC/B;AAAA,EAEA,mBAAmB,MAAM;AAAA,EACzB,sBAAsB,MAAM;AAAA,EAE5B,eAAe;AAAA,EACf,gBAAgB;AAAA,EAEhB,QAAQ,mBAAmB;AAAA,EAE3B,eAAe,QAA2B;AAAA,EAAE;AAAA,EAC5C,kBAAkB,WAAmC;AAAA,EAAE;AAAA,EACvD,MAAM,OAAO,QAAqB,KAAuC;AAAA,EAAE;AAAA,EAC3E,MAAM,OAAO,QAAqB,QAAwC;AAAE,WAAO;AAAA,EAAM;AAAA,EACzF,mBAAmB,SAAiC;AAAA,EAAE;AAAA,EACtD,MAAM,SAAS,SAAgG;AAAA,EAAE;AAAA,EACjH,MAAM,KAAK,aAAyC;AAAE,WAAO;AAAA,EAAM;AAAA,EACnE,MAAM,KAAK,MAA8B;AAAA,EAAE;AAAA,EAC3C,MAAM,KAAK,OAA0C;AAAA,EAAE;AACxD;AAEO,MAAM,6BAAsD;AAAA,EAtDnE,OAsDmE;AAAA;AAAA;AAAA,EAElE;AAAA,EAEiB,OAAO,oBAAI,IAAmE;AAAA,EAE/F,QAAQ,KAAa,MAAoE;AACxF,SAAK,KAAK,IAAI,KAAK,IAAI;AAAA,EACxB;AAAA,EAEA,SAAS,OAAuG;AAC/G,eAAW,EAAE,KAAK,KAAK,KAAK,OAAO;AAClC,WAAK,KAAK,IAAI,KAAK,IAAI;AAAA,IACxB;AAAA,EACD;AAAA,EAEA,QAAW,KAA4B;AACtC,WAAO,KAAK,KAAK,IAAI,GAAG;AAAA,EACzB;AAAA,EAEA,WAAW,KAAmB;AAC7B,SAAK,KAAK,OAAO,GAAG;AAAA,EACrB;AAAA,EAEA,MAAM,QAAuB;AAAA,EAAE;AAChC;",
  "names": []
}
