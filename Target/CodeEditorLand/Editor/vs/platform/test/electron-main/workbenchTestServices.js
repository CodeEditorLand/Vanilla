import{Promises as t}from"../../../base/common/async.js";import{Event as i,Emitter as d}from"../../../base/common/event.js";import"../../auxiliaryWindow/electron-main/auxiliaryWindow.js";import"../../environment/common/argv.js";import{LifecycleMainPhase as a,ShutdownReason as s}from"../../lifecycle/electron-main/lifecycleMainService.js";import"../../state/node/state.js";import"../../window/electron-main/window.js";class b{_serviceBrand;onBeforeShutdown=i.None;_onWillShutdown=new d;onWillShutdown=this._onWillShutdown.event;async fireOnWillShutdown(){const e=[];this._onWillShutdown.fire({reason:s.QUIT,join(n,o){e.push(o)}}),await t.settled(e)}onWillLoadWindow=i.None;onBeforeCloseWindow=i.None;wasRestarted=!1;quitRequested=!1;phase=a.Ready;registerWindow(e){}registerAuxWindow(e){}async reload(e,n){}async unload(e,n){return!0}setRelaunchHandler(e){}async relaunch(e){}async quit(e){return!0}async kill(e){}async when(e){}}class R{_serviceBrand;data=new Map;setItem(e,n){this.data.set(e,n)}setItems(e){for(const{key:n,data:o}of e)this.data.set(n,o)}getItem(e){return this.data.get(e)}removeItem(e){this.data.delete(e)}async close(){}}export{R as InMemoryTestStateMainService,b as TestLifecycleMainService};
