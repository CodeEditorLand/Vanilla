{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remoteTunnel/node/remoteTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CONFIGURATION_KEY_HOST_NAME, CONFIGURATION_KEY_PREVENT_SLEEP, ConnectionInfo, IRemoteTunnelSession, IRemoteTunnelService, LOGGER_NAME, LOG_ID, TunnelStates, TunnelStatus, TunnelMode, INACTIVE_TUNNEL_MODE, ActiveTunnelMode } from '../common/remoteTunnel.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { INativeEnvironmentService } from '../../environment/common/environment.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ILogger, ILoggerService, LogLevelToString } from '../../log/common/log.js';\nimport { dirname, join } from '../../../base/common/path.js';\nimport { ChildProcess, StdioOptions, spawn } from 'child_process';\nimport { IProductService } from '../../product/common/productService.js';\nimport { isMacintosh, isWindows } from '../../../base/common/platform.js';\nimport { CancelablePromise, createCancelablePromise, Delayer } from '../../../base/common/async.js';\nimport { ISharedProcessLifecycleService } from '../../lifecycle/node/sharedProcessLifecycleService.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { localize } from '../../../nls.js';\nimport { hostname, homedir } from 'os';\nimport { IStorageService, StorageScope, StorageTarget } from '../../storage/common/storage.js';\nimport { isString } from '../../../base/common/types.js';\nimport { StreamSplitter } from '../../../base/node/nodeStreams.js';\nimport { joinPath } from '../../../base/common/resources.js';\n\ntype RemoteTunnelEnablementClassification = {\n\towner: 'aeschli';\n\tcomment: 'Reporting when Remote Tunnel access is turned on or off';\n\tenabled?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Flag indicating if Remote Tunnel Access is enabled or not' };\n\tservice?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Flag indicating if Remote Tunnel Access is installed as a service' };\n};\n\ntype RemoteTunnelEnablementEvent = {\n\tenabled: boolean;\n\tservice: boolean;\n};\n\nconst restartTunnelOnConfigurationChanges: readonly string[] = [\n\tCONFIGURATION_KEY_HOST_NAME,\n\tCONFIGURATION_KEY_PREVENT_SLEEP,\n];\n\n// This is the session used run the tunnel access.\n// if set, the remote tunnel access is currently enabled.\n// if not set, the remote tunnel access is currently disabled.\nconst TUNNEL_ACCESS_SESSION = 'remoteTunnelSession';\n// Boolean indicating whether the tunnel should be installed as a service.\nconst TUNNEL_ACCESS_IS_SERVICE = 'remoteTunnelIsService';\n\n/**\n * This service runs on the shared service. It is running the `code-tunnel` command\n * to make the current machine available for remote access.\n */\nexport class RemoteTunnelService extends Disposable implements IRemoteTunnelService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidTokenFailedEmitter = new Emitter<IRemoteTunnelSession | undefined>();\n\tpublic readonly onDidTokenFailed = this._onDidTokenFailedEmitter.event;\n\n\tprivate readonly _onDidChangeTunnelStatusEmitter = new Emitter<TunnelStatus>();\n\tpublic readonly onDidChangeTunnelStatus = this._onDidChangeTunnelStatusEmitter.event;\n\n\tprivate readonly _onDidChangeModeEmitter = new Emitter<TunnelMode>();\n\tpublic readonly onDidChangeMode = this._onDidChangeModeEmitter.event;\n\n\tprivate readonly _logger: ILogger;\n\n\t/**\n\t * \"Mode\" in the terminal state we want to get to -- started, stopped, and\n\t * the attributes associated with each.\n\t *\n\t * At any given time, work may be ongoing to get `_tunnelStatus` into a\n\t * state that reflects the desired `mode`.\n\t */\n\tprivate _mode: TunnelMode = INACTIVE_TUNNEL_MODE;\n\n\tprivate _tunnelProcess: CancelablePromise<any> | undefined;\n\n\tprivate _tunnelStatus: TunnelStatus;\n\tprivate _startTunnelProcessDelayer: Delayer<void>;\n\n\tprivate _tunnelCommand: string | undefined;\n\n\tprivate _initialized = false;\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@ISharedProcessLifecycleService sharedProcessLifecycleService: ISharedProcessLifecycleService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\t\tthis._logger = this._register(loggerService.createLogger(joinPath(environmentService.logsHome, `${LOG_ID}.log`), { id: LOG_ID, name: LOGGER_NAME }));\n\t\tthis._startTunnelProcessDelayer = new Delayer(100);\n\n\t\tthis._register(this._logger.onDidChangeLogLevel(l => this._logger.info('Log level changed to ' + LogLevelToString(l))));\n\n\t\tthis._register(sharedProcessLifecycleService.onWillShutdown(() => {\n\t\t\tthis._tunnelProcess?.cancel();\n\t\t\tthis._tunnelProcess = undefined;\n\t\t\tthis.dispose();\n\t\t}));\n\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (restartTunnelOnConfigurationChanges.some(c => e.affectsConfiguration(c))) {\n\t\t\t\tthis._startTunnelProcessDelayer.trigger(() => this.updateTunnelProcess());\n\t\t\t}\n\t\t}));\n\n\t\tthis._mode = this._restoreMode();\n\t\tthis._tunnelStatus = TunnelStates.uninitialized;\n\t}\n\n\tpublic async getTunnelStatus(): Promise<TunnelStatus> {\n\t\treturn this._tunnelStatus;\n\t}\n\n\tprivate setTunnelStatus(tunnelStatus: TunnelStatus) {\n\t\tthis._tunnelStatus = tunnelStatus;\n\t\tthis._onDidChangeTunnelStatusEmitter.fire(tunnelStatus);\n\t}\n\n\tprivate setMode(mode: TunnelMode) {\n\t\tif (isSameMode(this._mode, mode)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._mode = mode;\n\t\tthis._storeMode(mode);\n\t\tthis._onDidChangeModeEmitter.fire(this._mode);\n\t\tif (mode.active) {\n\t\t\tthis._logger.info(`Session updated: ${mode.session.accountLabel} (${mode.session.providerId}) (service=${mode.asService})`);\n\t\t\tif (mode.session.token) {\n\t\t\t\tthis._logger.info(`Session token updated: ${mode.session.accountLabel} (${mode.session.providerId})`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._logger.info(`Session reset`);\n\t\t}\n\t}\n\n\tgetMode(): Promise<TunnelMode> {\n\t\treturn Promise.resolve(this._mode);\n\t}\n\n\tasync initialize(mode: TunnelMode): Promise<TunnelStatus> {\n\t\tif (this._initialized) {\n\t\t\treturn this._tunnelStatus;\n\t\t}\n\t\tthis._initialized = true;\n\t\tthis.setMode(mode);\n\t\ttry {\n\t\t\tawait this._startTunnelProcessDelayer.trigger(() => this.updateTunnelProcess());\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\t\treturn this._tunnelStatus;\n\t}\n\n\tprivate readonly defaultOnOutput = (a: string, isErr: boolean) => {\n\t\tif (isErr) {\n\t\t\tthis._logger.error(a);\n\t\t} else {\n\t\t\tthis._logger.info(a);\n\t\t}\n\t};\n\n\tprivate getTunnelCommandLocation() {\n\t\tif (!this._tunnelCommand) {\n\t\t\tlet binParentLocation;\n\t\t\tif (isMacintosh) {\n\t\t\t\t// appRoot = /Applications/Visual Studio Code - Insiders.app/Contents/Resources/app\n\t\t\t\t// bin = /Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/bin\n\t\t\t\tbinParentLocation = this.environmentService.appRoot;\n\t\t\t} else {\n\t\t\t\t// appRoot = C:\\Users\\<name>\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\n\t\t\t\t// bin = C:\\Users\\<name>\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\bin\n\t\t\t\t// appRoot = /usr/share/code-insiders/resources/app\n\t\t\t\t// bin = /usr/share/code-insiders/bin\n\t\t\t\tbinParentLocation = dirname(dirname(this.environmentService.appRoot));\n\t\t\t}\n\t\t\tthis._tunnelCommand = join(binParentLocation, 'bin', `${this.productService.tunnelApplicationName}${isWindows ? '.exe' : ''}`);\n\t\t}\n\t\treturn this._tunnelCommand;\n\t}\n\n\tasync startTunnel(mode: ActiveTunnelMode): Promise<TunnelStatus> {\n\t\tif (isSameMode(this._mode, mode) && this._tunnelStatus.type !== 'disconnected') {\n\t\t\treturn this._tunnelStatus;\n\t\t}\n\n\t\tthis.setMode(mode);\n\n\t\ttry {\n\t\t\tawait this._startTunnelProcessDelayer.trigger(() => this.updateTunnelProcess());\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\t\treturn this._tunnelStatus;\n\t}\n\n\n\tasync stopTunnel(): Promise<void> {\n\t\tif (this._tunnelProcess) {\n\t\t\tthis._tunnelProcess.cancel();\n\t\t\tthis._tunnelProcess = undefined;\n\t\t}\n\n\t\tif (this._mode.active) {\n\t\t\t// Be careful to only uninstall the service if we're the ones who installed it:\n\t\t\tconst needsServiceUninstall = this._mode.asService;\n\t\t\tthis.setMode(INACTIVE_TUNNEL_MODE);\n\n\t\t\ttry {\n\t\t\t\tif (needsServiceUninstall) {\n\t\t\t\t\tthis.runCodeTunnelCommand('uninstallService', ['service', 'uninstall']);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(e);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.runCodeTunnelCommand('stop', ['kill']);\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\n\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t}\n\n\tprivate async updateTunnelProcess(): Promise<void> {\n\t\tthis.telemetryService.publicLog2<RemoteTunnelEnablementEvent, RemoteTunnelEnablementClassification>('remoteTunnel.enablement', {\n\t\t\tenabled: this._mode.active,\n\t\t\tservice: this._mode.active && this._mode.asService,\n\t\t});\n\n\t\tif (this._tunnelProcess) {\n\t\t\tthis._tunnelProcess.cancel();\n\t\t\tthis._tunnelProcess = undefined;\n\t\t}\n\n\t\tlet output = '';\n\t\tlet isServiceInstalled = false;\n\t\tconst onOutput = (a: string, isErr: boolean) => {\n\t\t\tif (isErr) {\n\t\t\t\tthis._logger.error(a);\n\t\t\t} else {\n\t\t\t\toutput += a;\n\t\t\t}\n\t\t\tif (!this.environmentService.isBuilt && a.startsWith('   Compiling')) {\n\t\t\t\tthis.setTunnelStatus(TunnelStates.connecting(localize('remoteTunnelService.building', 'Building CLI from sources')));\n\t\t\t}\n\t\t};\n\n\t\tconst statusProcess = this.runCodeTunnelCommand('status', ['status'], onOutput);\n\t\tthis._tunnelProcess = statusProcess;\n\t\ttry {\n\t\t\tawait statusProcess;\n\t\t\tif (this._tunnelProcess !== statusProcess) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// split and find the line, since in dev builds additional noise is\n\t\t\t// added by cargo to the output.\n\t\t\tlet status: {\n\t\t\t\tservice_installed: boolean;\n\t\t\t\ttunnel: object | null;\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tstatus = JSON.parse(output.trim().split('\\n').find(l => l.startsWith('{'))!);\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(`Could not parse status output: ${JSON.stringify(output.trim())}`);\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisServiceInstalled = status.service_installed;\n\t\t\tthis._logger.info(status.tunnel ? 'Other tunnel running, attaching...' : 'No other tunnel running');\n\n\t\t\t// If a tunnel is running but the mode isn't \"active\", we'll still attach\n\t\t\t// to the tunnel to show its state in the UI. If neither are true, disconnect\n\t\t\tif (!status.tunnel && !this._mode.active) {\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\treturn;\n\t\t} finally {\n\t\t\tif (this._tunnelProcess === statusProcess) {\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t}\n\t\t}\n\n\t\tconst session = this._mode.active ? this._mode.session : undefined;\n\t\tif (session && session.token) {\n\t\t\tconst token = session.token;\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(localize({ key: 'remoteTunnelService.authorizing', comment: ['{0} is a user account name, {1} a provider name (e.g. Github)'] }, 'Connecting as {0} ({1})', session.accountLabel, session.providerId)));\n\t\t\tconst onLoginOutput = (a: string, isErr: boolean) => {\n\t\t\t\ta = a.replaceAll(token, '*'.repeat(4));\n\t\t\t\tonOutput(a, isErr);\n\t\t\t};\n\t\t\tconst loginProcess = this.runCodeTunnelCommand('login', ['user', 'login', '--provider', session.providerId, '--log', LogLevelToString(this._logger.getLevel())], onLoginOutput, { VSCODE_CLI_ACCESS_TOKEN: token });\n\t\t\tthis._tunnelProcess = loginProcess;\n\t\t\ttry {\n\t\t\t\tawait loginProcess;\n\t\t\t\tif (this._tunnelProcess !== loginProcess) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(e);\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t\tthis._onDidTokenFailedEmitter.fire(session);\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected(session));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst hostName = this._getTunnelName();\n\t\tif (hostName) {\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(localize({ key: 'remoteTunnelService.openTunnelWithName', comment: ['{0} is a tunnel name'] }, 'Opening tunnel {0}', hostName)));\n\t\t} else {\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(localize('remoteTunnelService.openTunnel', 'Opening tunnel')));\n\t\t}\n\t\tconst args = ['--accept-server-license-terms', '--log', LogLevelToString(this._logger.getLevel())];\n\t\tif (hostName) {\n\t\t\targs.push('--name', hostName);\n\t\t} else {\n\t\t\targs.push('--random-name');\n\t\t}\n\n\t\tlet serviceInstallFailed = false;\n\t\tif (this._mode.active && this._mode.asService && !isServiceInstalled) {\n\t\t\t// I thought about calling `code tunnel kill` here, but having multiple\n\t\t\t// tunnel processes running is pretty much idempotent. If there's\n\t\t\t// another tunnel process running, the service process will\n\t\t\t// take over when it exits, no hard feelings.\n\t\t\tserviceInstallFailed = await this.installTunnelService(args) === false;\n\t\t}\n\n\t\treturn this.serverOrAttachTunnel(session, args, serviceInstallFailed);\n\t}\n\n\tprivate async installTunnelService(args: readonly string[]) {\n\t\tlet status: number;\n\t\ttry {\n\t\t\tstatus = await this.runCodeTunnelCommand('serviceInstall', ['service', 'install', ...args]);\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t\tstatus = 1;\n\t\t}\n\n\t\tif (status !== 0) {\n\t\t\tconst msg = localize('remoteTunnelService.serviceInstallFailed', 'Failed to install tunnel as a service, starting in session...');\n\t\t\tthis._logger.warn(msg);\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(msg));\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async serverOrAttachTunnel(session: IRemoteTunnelSession | undefined, args: string[], serviceInstallFailed: boolean) {\n\t\targs.push('--parent-process-id', String(process.pid));\n\n\t\tif (this._preventSleep()) {\n\t\t\targs.push('--no-sleep');\n\t\t}\n\n\t\tlet isAttached = false;\n\t\tconst serveCommand = this.runCodeTunnelCommand('tunnel', args, (message: string, isErr: boolean) => {\n\t\t\tif (isErr) {\n\t\t\t\tthis._logger.error(message);\n\t\t\t} else {\n\t\t\t\tthis._logger.info(message);\n\t\t\t}\n\n\t\t\tif (message.includes('Connected to an existing tunnel process')) {\n\t\t\t\tisAttached = true;\n\t\t\t}\n\n\t\t\tconst m = message.match(/Open this link in your browser (https:\\/\\/([^\\/\\s]+)\\/([^\\/\\s]+)\\/([^\\/\\s]+))/);\n\t\t\tif (m) {\n\t\t\t\tconst info: ConnectionInfo = { link: m[1], domain: m[2], tunnelName: m[4], isAttached };\n\t\t\t\tthis.setTunnelStatus(TunnelStates.connected(info, serviceInstallFailed));\n\t\t\t} else if (message.match(/error refreshing token/)) {\n\t\t\t\tserveCommand.cancel();\n\t\t\t\tthis._onDidTokenFailedEmitter.fire(session);\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected(session));\n\t\t\t}\n\t\t});\n\t\tthis._tunnelProcess = serveCommand;\n\t\tserveCommand.finally(() => {\n\t\t\tif (serveCommand === this._tunnelProcess) {\n\t\t\t\t// process exited unexpectedly\n\t\t\t\tthis._logger.info(`tunnel process terminated`);\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t\tthis._mode = INACTIVE_TUNNEL_MODE;\n\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate runCodeTunnelCommand(logLabel: string, commandArgs: string[], onOutput: (message: string, isError: boolean) => void = this.defaultOnOutput, env?: Record<string, string>): CancelablePromise<number> {\n\t\treturn createCancelablePromise<number>(token => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tresolve(-1);\n\t\t\t\t}\n\t\t\t\tlet tunnelProcess: ChildProcess | undefined;\n\t\t\t\tconst stdio: StdioOptions = ['ignore', 'pipe', 'pipe'];\n\n\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tthis._logger.info(`${logLabel} terminating(${tunnelProcess.pid})`);\n\t\t\t\t\t\ttunnelProcess.kill();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (!this.environmentService.isBuilt) {\n\t\t\t\t\tonOutput('Building tunnel CLI from sources and run\\n', false);\n\t\t\t\t\tonOutput(`${logLabel} Spawning: cargo run -- tunnel ${commandArgs.join(' ')}\\n`, false);\n\t\t\t\t\ttunnelProcess = spawn('cargo', ['run', '--', 'tunnel', ...commandArgs], { cwd: join(this.environmentService.appRoot, 'cli'), stdio, env: { ...process.env, RUST_BACKTRACE: '1', ...env } });\n\t\t\t\t} else {\n\t\t\t\t\tonOutput('Running tunnel CLI\\n', false);\n\t\t\t\t\tconst tunnelCommand = this.getTunnelCommandLocation();\n\t\t\t\t\tonOutput(`${logLabel} Spawning: ${tunnelCommand} tunnel ${commandArgs.join(' ')}\\n`, false);\n\t\t\t\t\ttunnelProcess = spawn(tunnelCommand, ['tunnel', ...commandArgs], { cwd: homedir(), stdio, env: { ...process.env, ...env } });\n\t\t\t\t}\n\n\t\t\t\ttunnelProcess.stdout!.pipe(new StreamSplitter('\\n')).on('data', data => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tconst message = data.toString();\n\t\t\t\t\t\tonOutput(message, false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttunnelProcess.stderr!.pipe(new StreamSplitter('\\n')).on('data', data => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tconst message = data.toString();\n\t\t\t\t\t\tonOutput(message, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttunnelProcess.on('exit', e => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tonOutput(`${logLabel} exit(${tunnelProcess.pid}): + ${e} `, false);\n\t\t\t\t\t\ttunnelProcess = undefined;\n\t\t\t\t\t\tresolve(e || 0);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttunnelProcess.on('error', e => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tonOutput(`${logLabel} error(${tunnelProcess.pid}): + ${e} `, true);\n\t\t\t\t\t\ttunnelProcess = undefined;\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async getTunnelName(): Promise<string | undefined> {\n\t\treturn this._getTunnelName();\n\t}\n\n\tprivate _preventSleep() {\n\t\treturn !!this.configurationService.getValue<boolean>(CONFIGURATION_KEY_PREVENT_SLEEP);\n\t}\n\n\tprivate _getTunnelName(): string | undefined {\n\t\tlet name = this.configurationService.getValue<string>(CONFIGURATION_KEY_HOST_NAME) || hostname();\n\t\tname = name.replace(/^-+/g, '').replace(/[^\\w-]/g, '').substring(0, 20);\n\t\treturn name || undefined;\n\t}\n\n\tprivate _restoreMode(): TunnelMode {\n\t\ttry {\n\t\t\tconst tunnelAccessSession = this.storageService.get(TUNNEL_ACCESS_SESSION, StorageScope.APPLICATION);\n\t\t\tconst asService = this.storageService.getBoolean(TUNNEL_ACCESS_IS_SERVICE, StorageScope.APPLICATION, false);\n\t\t\tif (tunnelAccessSession) {\n\t\t\t\tconst session = JSON.parse(tunnelAccessSession) as IRemoteTunnelSession;\n\t\t\t\tif (session && isString(session.accountLabel) && isString(session.sessionId) && isString(session.providerId)) {\n\t\t\t\t\treturn { active: true, session, asService };\n\t\t\t\t}\n\t\t\t\tthis._logger.error('Problems restoring session from storage, invalid format', session);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._logger.error('Problems restoring session from storage', e);\n\t\t}\n\t\treturn INACTIVE_TUNNEL_MODE;\n\t}\n\n\tprivate _storeMode(mode: TunnelMode): void {\n\t\tif (mode.active) {\n\t\t\tconst sessionWithoutToken = {\n\t\t\t\tproviderId: mode.session.providerId, sessionId: mode.session.sessionId, accountLabel: mode.session.accountLabel\n\t\t\t};\n\t\t\tthis.storageService.store(TUNNEL_ACCESS_SESSION, JSON.stringify(sessionWithoutToken), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\tthis.storageService.store(TUNNEL_ACCESS_IS_SERVICE, mode.asService, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(TUNNEL_ACCESS_SESSION, StorageScope.APPLICATION);\n\t\t\tthis.storageService.remove(TUNNEL_ACCESS_IS_SERVICE, StorageScope.APPLICATION);\n\t\t}\n\t}\n}\n\nfunction isSameSession(a1: IRemoteTunnelSession | undefined, a2: IRemoteTunnelSession | undefined): boolean {\n\tif (a1 && a2) {\n\t\treturn a1.sessionId === a2.sessionId && a1.providerId === a2.providerId && a1.token === a2.token;\n\t}\n\treturn a1 === a2;\n}\n\nconst isSameMode = (a: TunnelMode, b: TunnelMode) => {\n\tif (a.active !== b.active) {\n\t\treturn false;\n\t} else if (a.active && b.active) {\n\t\treturn a.asService === b.asService && isSameSession(a.session, b.session);\n\t} else {\n\t\treturn true;\n\t}\n};\n"],
  "mappings": "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",
  "names": []
}
