{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remoteTunnel/node/remoteTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type ChildProcess, type StdioOptions, spawn } from \"child_process\";\nimport { homedir, hostname } from \"os\";\nimport {\n\ttype CancelablePromise,\n\tDelayer,\n\tcreateCancelablePromise,\n} from \"../../../base/common/async.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { dirname, join } from \"../../../base/common/path.js\";\nimport { isMacintosh, isWindows } from \"../../../base/common/platform.js\";\nimport { joinPath } from \"../../../base/common/resources.js\";\nimport { isString } from \"../../../base/common/types.js\";\nimport { StreamSplitter } from \"../../../base/node/nodeStreams.js\";\nimport { localize } from \"../../../nls.js\";\nimport { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport { INativeEnvironmentService } from \"../../environment/common/environment.js\";\nimport { ISharedProcessLifecycleService } from \"../../lifecycle/node/sharedProcessLifecycleService.js\";\nimport {\n\ttype ILogger,\n\tILoggerService,\n\tLogLevelToString,\n} from \"../../log/common/log.js\";\nimport { IProductService } from \"../../product/common/productService.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../storage/common/storage.js\";\nimport { ITelemetryService } from \"../../telemetry/common/telemetry.js\";\nimport {\n\ttype ActiveTunnelMode,\n\tCONFIGURATION_KEY_HOST_NAME,\n\tCONFIGURATION_KEY_PREVENT_SLEEP,\n\ttype ConnectionInfo,\n\tINACTIVE_TUNNEL_MODE,\n\ttype IRemoteTunnelService,\n\ttype IRemoteTunnelSession,\n\tLOGGER_NAME,\n\tLOG_ID,\n\ttype TunnelMode,\n\tTunnelStates,\n\ttype TunnelStatus,\n} from \"../common/remoteTunnel.js\";\n\ntype RemoteTunnelEnablementClassification = {\n\towner: \"aeschli\";\n\tcomment: \"Reporting when Remote Tunnel access is turned on or off\";\n\tenabled?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Flag indicating if Remote Tunnel Access is enabled or not\";\n\t};\n\tservice?: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Flag indicating if Remote Tunnel Access is installed as a service\";\n\t};\n};\n\ntype RemoteTunnelEnablementEvent = {\n\tenabled: boolean;\n\tservice: boolean;\n};\n\nconst restartTunnelOnConfigurationChanges: readonly string[] = [\n\tCONFIGURATION_KEY_HOST_NAME,\n\tCONFIGURATION_KEY_PREVENT_SLEEP,\n];\n\n// This is the session used run the tunnel access.\n// if set, the remote tunnel access is currently enabled.\n// if not set, the remote tunnel access is currently disabled.\nconst TUNNEL_ACCESS_SESSION = \"remoteTunnelSession\";\n// Boolean indicating whether the tunnel should be installed as a service.\nconst TUNNEL_ACCESS_IS_SERVICE = \"remoteTunnelIsService\";\n\n/**\n * This service runs on the shared service. It is running the `code-tunnel` command\n * to make the current machine available for remote access.\n */\nexport class RemoteTunnelService\n\textends Disposable\n\timplements IRemoteTunnelService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidTokenFailedEmitter = new Emitter<\n\t\tIRemoteTunnelSession | undefined\n\t>();\n\tpublic readonly onDidTokenFailed = this._onDidTokenFailedEmitter.event;\n\n\tprivate readonly _onDidChangeTunnelStatusEmitter =\n\t\tnew Emitter<TunnelStatus>();\n\tpublic readonly onDidChangeTunnelStatus =\n\t\tthis._onDidChangeTunnelStatusEmitter.event;\n\n\tprivate readonly _onDidChangeModeEmitter = new Emitter<TunnelMode>();\n\tpublic readonly onDidChangeMode = this._onDidChangeModeEmitter.event;\n\n\tprivate readonly _logger: ILogger;\n\n\t/**\n\t * \"Mode\" in the terminal state we want to get to -- started, stopped, and\n\t * the attributes associated with each.\n\t *\n\t * At any given time, work may be ongoing to get `_tunnelStatus` into a\n\t * state that reflects the desired `mode`.\n\t */\n\tprivate _mode: TunnelMode = INACTIVE_TUNNEL_MODE;\n\n\tprivate _tunnelProcess: CancelablePromise<any> | undefined;\n\n\tprivate _tunnelStatus: TunnelStatus;\n\tprivate _startTunnelProcessDelayer: Delayer<void>;\n\n\tprivate _tunnelCommand: string | undefined;\n\n\tprivate _initialized = false;\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@INativeEnvironmentService\n\t\tprivate readonly environmentService: INativeEnvironmentService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@ISharedProcessLifecycleService\n\t\tsharedProcessLifecycleService: ISharedProcessLifecycleService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis._logger = this._register(\n\t\t\tloggerService.createLogger(\n\t\t\t\tjoinPath(environmentService.logsHome, `${LOG_ID}.log`),\n\t\t\t\t{ id: LOG_ID, name: LOGGER_NAME },\n\t\t\t),\n\t\t);\n\t\tthis._startTunnelProcessDelayer = new Delayer(100);\n\n\t\tthis._register(\n\t\t\tthis._logger.onDidChangeLogLevel((l) =>\n\t\t\t\tthis._logger.info(\n\t\t\t\t\t\"Log level changed to \" + LogLevelToString(l),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tsharedProcessLifecycleService.onWillShutdown(() => {\n\t\t\t\tthis._tunnelProcess?.cancel();\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t\tthis.dispose();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\trestartTunnelOnConfigurationChanges.some((c) =>\n\t\t\t\t\t\te.affectsConfiguration(c),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis._startTunnelProcessDelayer.trigger(() =>\n\t\t\t\t\t\tthis.updateTunnelProcess(),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._mode = this._restoreMode();\n\t\tthis._tunnelStatus = TunnelStates.uninitialized;\n\t}\n\n\tpublic async getTunnelStatus(): Promise<TunnelStatus> {\n\t\treturn this._tunnelStatus;\n\t}\n\n\tprivate setTunnelStatus(tunnelStatus: TunnelStatus) {\n\t\tthis._tunnelStatus = tunnelStatus;\n\t\tthis._onDidChangeTunnelStatusEmitter.fire(tunnelStatus);\n\t}\n\n\tprivate setMode(mode: TunnelMode) {\n\t\tif (isSameMode(this._mode, mode)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._mode = mode;\n\t\tthis._storeMode(mode);\n\t\tthis._onDidChangeModeEmitter.fire(this._mode);\n\t\tif (mode.active) {\n\t\t\tthis._logger.info(\n\t\t\t\t`Session updated: ${mode.session.accountLabel} (${mode.session.providerId}) (service=${mode.asService})`,\n\t\t\t);\n\t\t\tif (mode.session.token) {\n\t\t\t\tthis._logger.info(\n\t\t\t\t\t`Session token updated: ${mode.session.accountLabel} (${mode.session.providerId})`,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._logger.info(`Session reset`);\n\t\t}\n\t}\n\n\tgetMode(): Promise<TunnelMode> {\n\t\treturn Promise.resolve(this._mode);\n\t}\n\n\tasync initialize(mode: TunnelMode): Promise<TunnelStatus> {\n\t\tif (this._initialized) {\n\t\t\treturn this._tunnelStatus;\n\t\t}\n\t\tthis._initialized = true;\n\t\tthis.setMode(mode);\n\t\ttry {\n\t\t\tawait this._startTunnelProcessDelayer.trigger(() =>\n\t\t\t\tthis.updateTunnelProcess(),\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\t\treturn this._tunnelStatus;\n\t}\n\n\tprivate readonly defaultOnOutput = (a: string, isErr: boolean) => {\n\t\tif (isErr) {\n\t\t\tthis._logger.error(a);\n\t\t} else {\n\t\t\tthis._logger.info(a);\n\t\t}\n\t};\n\n\tprivate getTunnelCommandLocation() {\n\t\tif (!this._tunnelCommand) {\n\t\t\tlet binParentLocation;\n\t\t\tif (isMacintosh) {\n\t\t\t\t// appRoot = /Applications/Visual Studio Code - Insiders.app/Contents/Resources/app\n\t\t\t\t// bin = /Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/bin\n\t\t\t\tbinParentLocation = this.environmentService.appRoot;\n\t\t\t} else {\n\t\t\t\t// appRoot = C:\\Users\\<name>\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\n\t\t\t\t// bin = C:\\Users\\<name>\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\bin\n\t\t\t\t// appRoot = /usr/share/code-insiders/resources/app\n\t\t\t\t// bin = /usr/share/code-insiders/bin\n\t\t\t\tbinParentLocation = dirname(\n\t\t\t\t\tdirname(this.environmentService.appRoot),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._tunnelCommand = join(\n\t\t\t\tbinParentLocation,\n\t\t\t\t\"bin\",\n\t\t\t\t`${this.productService.tunnelApplicationName}${isWindows ? \".exe\" : \"\"}`,\n\t\t\t);\n\t\t}\n\t\treturn this._tunnelCommand;\n\t}\n\n\tasync startTunnel(mode: ActiveTunnelMode): Promise<TunnelStatus> {\n\t\tif (\n\t\t\tisSameMode(this._mode, mode) &&\n\t\t\tthis._tunnelStatus.type !== \"disconnected\"\n\t\t) {\n\t\t\treturn this._tunnelStatus;\n\t\t}\n\n\t\tthis.setMode(mode);\n\n\t\ttry {\n\t\t\tawait this._startTunnelProcessDelayer.trigger(() =>\n\t\t\t\tthis.updateTunnelProcess(),\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\t\treturn this._tunnelStatus;\n\t}\n\n\tasync stopTunnel(): Promise<void> {\n\t\tif (this._tunnelProcess) {\n\t\t\tthis._tunnelProcess.cancel();\n\t\t\tthis._tunnelProcess = undefined;\n\t\t}\n\n\t\tif (this._mode.active) {\n\t\t\t// Be careful to only uninstall the service if we're the ones who installed it:\n\t\t\tconst needsServiceUninstall = this._mode.asService;\n\t\t\tthis.setMode(INACTIVE_TUNNEL_MODE);\n\n\t\t\ttry {\n\t\t\t\tif (needsServiceUninstall) {\n\t\t\t\t\tthis.runCodeTunnelCommand(\"uninstallService\", [\n\t\t\t\t\t\t\"service\",\n\t\t\t\t\t\t\"uninstall\",\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(e);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.runCodeTunnelCommand(\"stop\", [\"kill\"]);\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\n\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t}\n\n\tprivate async updateTunnelProcess(): Promise<void> {\n\t\tthis.telemetryService.publicLog2<\n\t\t\tRemoteTunnelEnablementEvent,\n\t\t\tRemoteTunnelEnablementClassification\n\t\t>(\"remoteTunnel.enablement\", {\n\t\t\tenabled: this._mode.active,\n\t\t\tservice: this._mode.active && this._mode.asService,\n\t\t});\n\n\t\tif (this._tunnelProcess) {\n\t\t\tthis._tunnelProcess.cancel();\n\t\t\tthis._tunnelProcess = undefined;\n\t\t}\n\n\t\tlet output = \"\";\n\t\tlet isServiceInstalled = false;\n\t\tconst onOutput = (a: string, isErr: boolean) => {\n\t\t\tif (isErr) {\n\t\t\t\tthis._logger.error(a);\n\t\t\t} else {\n\t\t\t\toutput += a;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!this.environmentService.isBuilt &&\n\t\t\t\ta.startsWith(\"   Compiling\")\n\t\t\t) {\n\t\t\t\tthis.setTunnelStatus(\n\t\t\t\t\tTunnelStates.connecting(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"remoteTunnelService.building\",\n\t\t\t\t\t\t\t\"Building CLI from sources\",\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\tconst statusProcess = this.runCodeTunnelCommand(\n\t\t\t\"status\",\n\t\t\t[\"status\"],\n\t\t\tonOutput,\n\t\t);\n\t\tthis._tunnelProcess = statusProcess;\n\t\ttry {\n\t\t\tawait statusProcess;\n\t\t\tif (this._tunnelProcess !== statusProcess) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// split and find the line, since in dev builds additional noise is\n\t\t\t// added by cargo to the output.\n\t\t\tlet status: {\n\t\t\t\tservice_installed: boolean;\n\t\t\t\ttunnel: object | null;\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tstatus = JSON.parse(\n\t\t\t\t\toutput\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(\"\\n\")\n\t\t\t\t\t\t.find((l) => l.startsWith(\"{\"))!,\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(\n\t\t\t\t\t`Could not parse status output: ${JSON.stringify(output.trim())}`,\n\t\t\t\t);\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisServiceInstalled = status.service_installed;\n\t\t\tthis._logger.info(\n\t\t\t\tstatus.tunnel\n\t\t\t\t\t? \"Other tunnel running, attaching...\"\n\t\t\t\t\t: \"No other tunnel running\",\n\t\t\t);\n\n\t\t\t// If a tunnel is running but the mode isn't \"active\", we'll still attach\n\t\t\t// to the tunnel to show its state in the UI. If neither are true, disconnect\n\t\t\tif (!status.tunnel && !this._mode.active) {\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\treturn;\n\t\t} finally {\n\t\t\tif (this._tunnelProcess === statusProcess) {\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t}\n\t\t}\n\n\t\tconst session = this._mode.active ? this._mode.session : undefined;\n\t\tif (session && session.token) {\n\t\t\tconst token = session.token;\n\t\t\tthis.setTunnelStatus(\n\t\t\t\tTunnelStates.connecting(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"remoteTunnelService.authorizing\",\n\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\"{0} is a user account name, {1} a provider name (e.g. Github)\",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Connecting as {0} ({1})\",\n\t\t\t\t\t\tsession.accountLabel,\n\t\t\t\t\t\tsession.providerId,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst onLoginOutput = (a: string, isErr: boolean) => {\n\t\t\t\ta = a.replaceAll(token, \"*\".repeat(4));\n\t\t\t\tonOutput(a, isErr);\n\t\t\t};\n\t\t\tconst loginProcess = this.runCodeTunnelCommand(\n\t\t\t\t\"login\",\n\t\t\t\t[\n\t\t\t\t\t\"user\",\n\t\t\t\t\t\"login\",\n\t\t\t\t\t\"--provider\",\n\t\t\t\t\tsession.providerId,\n\t\t\t\t\t\"--log\",\n\t\t\t\t\tLogLevelToString(this._logger.getLevel()),\n\t\t\t\t],\n\t\t\t\tonLoginOutput,\n\t\t\t\t{ VSCODE_CLI_ACCESS_TOKEN: token },\n\t\t\t);\n\t\t\tthis._tunnelProcess = loginProcess;\n\t\t\ttry {\n\t\t\t\tawait loginProcess;\n\t\t\t\tif (this._tunnelProcess !== loginProcess) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(e);\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t\tthis._onDidTokenFailedEmitter.fire(session);\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected(session));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst hostName = this._getTunnelName();\n\t\tif (hostName) {\n\t\t\tthis.setTunnelStatus(\n\t\t\t\tTunnelStates.connecting(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"remoteTunnelService.openTunnelWithName\",\n\t\t\t\t\t\t\tcomment: [\"{0} is a tunnel name\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Opening tunnel {0}\",\n\t\t\t\t\t\thostName,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.setTunnelStatus(\n\t\t\t\tTunnelStates.connecting(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"remoteTunnelService.openTunnel\",\n\t\t\t\t\t\t\"Opening tunnel\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tconst args = [\n\t\t\t\"--accept-server-license-terms\",\n\t\t\t\"--log\",\n\t\t\tLogLevelToString(this._logger.getLevel()),\n\t\t];\n\t\tif (hostName) {\n\t\t\targs.push(\"--name\", hostName);\n\t\t} else {\n\t\t\targs.push(\"--random-name\");\n\t\t}\n\n\t\tlet serviceInstallFailed = false;\n\t\tif (this._mode.active && this._mode.asService && !isServiceInstalled) {\n\t\t\t// I thought about calling `code tunnel kill` here, but having multiple\n\t\t\t// tunnel processes running is pretty much idempotent. If there's\n\t\t\t// another tunnel process running, the service process will\n\t\t\t// take over when it exits, no hard feelings.\n\t\t\tserviceInstallFailed =\n\t\t\t\t(await this.installTunnelService(args)) === false;\n\t\t}\n\n\t\treturn this.serverOrAttachTunnel(session, args, serviceInstallFailed);\n\t}\n\n\tprivate async installTunnelService(args: readonly string[]) {\n\t\tlet status: number;\n\t\ttry {\n\t\t\tstatus = await this.runCodeTunnelCommand(\"serviceInstall\", [\n\t\t\t\t\"service\",\n\t\t\t\t\"install\",\n\t\t\t\t...args,\n\t\t\t]);\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t\tstatus = 1;\n\t\t}\n\n\t\tif (status !== 0) {\n\t\t\tconst msg = localize(\n\t\t\t\t\"remoteTunnelService.serviceInstallFailed\",\n\t\t\t\t\"Failed to install tunnel as a service, starting in session...\",\n\t\t\t);\n\t\t\tthis._logger.warn(msg);\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(msg));\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async serverOrAttachTunnel(\n\t\tsession: IRemoteTunnelSession | undefined,\n\t\targs: string[],\n\t\tserviceInstallFailed: boolean,\n\t) {\n\t\targs.push(\"--parent-process-id\", String(process.pid));\n\n\t\tif (this._preventSleep()) {\n\t\t\targs.push(\"--no-sleep\");\n\t\t}\n\n\t\tlet isAttached = false;\n\t\tconst serveCommand = this.runCodeTunnelCommand(\n\t\t\t\"tunnel\",\n\t\t\targs,\n\t\t\t(message: string, isErr: boolean) => {\n\t\t\t\tif (isErr) {\n\t\t\t\t\tthis._logger.error(message);\n\t\t\t\t} else {\n\t\t\t\t\tthis._logger.info(message);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tmessage.includes(\"Connected to an existing tunnel process\")\n\t\t\t\t) {\n\t\t\t\t\tisAttached = true;\n\t\t\t\t}\n\n\t\t\t\tconst m = message.match(\n\t\t\t\t\t/Open this link in your browser (https:\\/\\/([^/\\s]+)\\/([^/\\s]+)\\/([^/\\s]+))/,\n\t\t\t\t);\n\t\t\t\tif (m) {\n\t\t\t\t\tconst info: ConnectionInfo = {\n\t\t\t\t\t\tlink: m[1],\n\t\t\t\t\t\tdomain: m[2],\n\t\t\t\t\t\ttunnelName: m[4],\n\t\t\t\t\t\tisAttached,\n\t\t\t\t\t};\n\t\t\t\t\tthis.setTunnelStatus(\n\t\t\t\t\t\tTunnelStates.connected(info, serviceInstallFailed),\n\t\t\t\t\t);\n\t\t\t\t} else if (message.match(/error refreshing token/)) {\n\t\t\t\t\tserveCommand.cancel();\n\t\t\t\t\tthis._onDidTokenFailedEmitter.fire(session);\n\t\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected(session));\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\tthis._tunnelProcess = serveCommand;\n\t\tserveCommand.finally(() => {\n\t\t\tif (serveCommand === this._tunnelProcess) {\n\t\t\t\t// process exited unexpectedly\n\t\t\t\tthis._logger.info(`tunnel process terminated`);\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t\tthis._mode = INACTIVE_TUNNEL_MODE;\n\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate runCodeTunnelCommand(\n\t\tlogLabel: string,\n\t\tcommandArgs: string[],\n\t\tonOutput: (message: string, isError: boolean) => void = this\n\t\t\t.defaultOnOutput,\n\t\tenv?: Record<string, string>,\n\t): CancelablePromise<number> {\n\t\treturn createCancelablePromise<number>((token) => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tresolve(-1);\n\t\t\t\t}\n\t\t\t\tlet tunnelProcess: ChildProcess | undefined;\n\t\t\t\tconst stdio: StdioOptions = [\"ignore\", \"pipe\", \"pipe\"];\n\n\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tthis._logger.info(\n\t\t\t\t\t\t\t`${logLabel} terminating(${tunnelProcess.pid})`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttunnelProcess.kill();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (this.environmentService.isBuilt) {\n\t\t\t\t\tonOutput(\"Running tunnel CLI\\n\", false);\n\t\t\t\t\tconst tunnelCommand = this.getTunnelCommandLocation();\n\t\t\t\t\tonOutput(\n\t\t\t\t\t\t`${logLabel} Spawning: ${tunnelCommand} tunnel ${commandArgs.join(\" \")}\\n`,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t);\n\t\t\t\t\ttunnelProcess = spawn(\n\t\t\t\t\t\ttunnelCommand,\n\t\t\t\t\t\t[\"tunnel\", ...commandArgs],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcwd: homedir(),\n\t\t\t\t\t\t\tstdio,\n\t\t\t\t\t\t\tenv: { ...process.env, ...env },\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tonOutput(\n\t\t\t\t\t\t\"Building tunnel CLI from sources and run\\n\",\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t);\n\t\t\t\t\tonOutput(\n\t\t\t\t\t\t`${logLabel} Spawning: cargo run -- tunnel ${commandArgs.join(\" \")}\\n`,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t);\n\t\t\t\t\ttunnelProcess = spawn(\n\t\t\t\t\t\t\"cargo\",\n\t\t\t\t\t\t[\"run\", \"--\", \"tunnel\", ...commandArgs],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcwd: join(this.environmentService.appRoot, \"cli\"),\n\t\t\t\t\t\t\tstdio,\n\t\t\t\t\t\t\tenv: {\n\t\t\t\t\t\t\t\t...process.env,\n\t\t\t\t\t\t\t\tRUST_BACKTRACE: \"1\",\n\t\t\t\t\t\t\t\t...env,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\ttunnelProcess\n\t\t\t\t\t.stdout!.pipe(new StreamSplitter(\"\\n\"))\n\t\t\t\t\t.on(\"data\", (data) => {\n\t\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\t\tconst message = data.toString();\n\t\t\t\t\t\t\tonOutput(message, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\ttunnelProcess\n\t\t\t\t\t.stderr!.pipe(new StreamSplitter(\"\\n\"))\n\t\t\t\t\t.on(\"data\", (data) => {\n\t\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\t\tconst message = data.toString();\n\t\t\t\t\t\t\tonOutput(message, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\ttunnelProcess.on(\"exit\", (e) => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tonOutput(\n\t\t\t\t\t\t\t`${logLabel} exit(${tunnelProcess.pid}): + ${e} `,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttunnelProcess = undefined;\n\t\t\t\t\t\tresolve(e || 0);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttunnelProcess.on(\"error\", (e) => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tonOutput(\n\t\t\t\t\t\t\t`${logLabel} error(${tunnelProcess.pid}): + ${e} `,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttunnelProcess = undefined;\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async getTunnelName(): Promise<string | undefined> {\n\t\treturn this._getTunnelName();\n\t}\n\n\tprivate _preventSleep() {\n\t\treturn !!this.configurationService.getValue<boolean>(\n\t\t\tCONFIGURATION_KEY_PREVENT_SLEEP,\n\t\t);\n\t}\n\n\tprivate _getTunnelName(): string | undefined {\n\t\tlet name =\n\t\t\tthis.configurationService.getValue<string>(\n\t\t\t\tCONFIGURATION_KEY_HOST_NAME,\n\t\t\t) || hostname();\n\t\tname = name\n\t\t\t.replace(/^-+/g, \"\")\n\t\t\t.replace(/[^\\w-]/g, \"\")\n\t\t\t.substring(0, 20);\n\t\treturn name || undefined;\n\t}\n\n\tprivate _restoreMode(): TunnelMode {\n\t\ttry {\n\t\t\tconst tunnelAccessSession = this.storageService.get(\n\t\t\t\tTUNNEL_ACCESS_SESSION,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t\tconst asService = this.storageService.getBoolean(\n\t\t\t\tTUNNEL_ACCESS_IS_SERVICE,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tif (tunnelAccessSession) {\n\t\t\t\tconst session = JSON.parse(\n\t\t\t\t\ttunnelAccessSession,\n\t\t\t\t) as IRemoteTunnelSession;\n\t\t\t\tif (\n\t\t\t\t\tsession &&\n\t\t\t\t\tisString(session.accountLabel) &&\n\t\t\t\t\tisString(session.sessionId) &&\n\t\t\t\t\tisString(session.providerId)\n\t\t\t\t) {\n\t\t\t\t\treturn { active: true, session, asService };\n\t\t\t\t}\n\t\t\t\tthis._logger.error(\n\t\t\t\t\t\"Problems restoring session from storage, invalid format\",\n\t\t\t\t\tsession,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._logger.error(\"Problems restoring session from storage\", e);\n\t\t}\n\t\treturn INACTIVE_TUNNEL_MODE;\n\t}\n\n\tprivate _storeMode(mode: TunnelMode): void {\n\t\tif (mode.active) {\n\t\t\tconst sessionWithoutToken = {\n\t\t\t\tproviderId: mode.session.providerId,\n\t\t\t\tsessionId: mode.session.sessionId,\n\t\t\t\taccountLabel: mode.session.accountLabel,\n\t\t\t};\n\t\t\tthis.storageService.store(\n\t\t\t\tTUNNEL_ACCESS_SESSION,\n\t\t\t\tJSON.stringify(sessionWithoutToken),\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t\tthis.storageService.store(\n\t\t\t\tTUNNEL_ACCESS_IS_SERVICE,\n\t\t\t\tmode.asService,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.remove(\n\t\t\t\tTUNNEL_ACCESS_SESSION,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t\tthis.storageService.remove(\n\t\t\t\tTUNNEL_ACCESS_IS_SERVICE,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t}\n\t}\n}\n\nfunction isSameSession(\n\ta1: IRemoteTunnelSession | undefined,\n\ta2: IRemoteTunnelSession | undefined,\n): boolean {\n\tif (a1 && a2) {\n\t\treturn (\n\t\t\ta1.sessionId === a2.sessionId &&\n\t\t\ta1.providerId === a2.providerId &&\n\t\t\ta1.token === a2.token\n\t\t);\n\t}\n\treturn a1 === a2;\n}\n\nconst isSameMode = (a: TunnelMode, b: TunnelMode) => {\n\tif (a.active !== b.active) {\n\t\treturn false;\n\t} else if (a.active && b.active) {\n\t\treturn (\n\t\t\ta.asService === b.asService && isSameSession(a.session, b.session)\n\t\t);\n\t} else {\n\t\treturn true;\n\t}\n};\n"],
  "mappings": "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",
  "names": []
}
