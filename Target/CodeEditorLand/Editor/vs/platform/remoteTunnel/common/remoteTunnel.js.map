{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/remoteTunnel/common/remoteTunnel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport { localize } from \"../../../nls.js\";\nimport { createDecorator } from \"../../instantiation/common/instantiation.js\";\n\nexport interface IRemoteTunnelSession {\n\treadonly providerId: string;\n\treadonly sessionId: string;\n\treadonly accountLabel: string;\n\treadonly token?: string;\n}\n\nexport const IRemoteTunnelService = createDecorator<IRemoteTunnelService>(\n\t\"IRemoteTunnelService\",\n);\nexport interface IRemoteTunnelService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeTunnelStatus: Event<TunnelStatus>;\n\tgetTunnelStatus(): Promise<TunnelStatus>;\n\n\tgetMode(): Promise<TunnelMode>;\n\treadonly onDidChangeMode: Event<TunnelMode>;\n\n\treadonly onDidTokenFailed: Event<IRemoteTunnelSession | undefined>;\n\tinitialize(mode: TunnelMode): Promise<TunnelStatus>;\n\n\tstartTunnel(mode: ActiveTunnelMode): Promise<TunnelStatus>;\n\tstopTunnel(): Promise<void>;\n\tgetTunnelName(): Promise<string | undefined>;\n}\n\nexport interface ActiveTunnelMode {\n\treadonly active: true;\n\treadonly session: IRemoteTunnelSession;\n\treadonly asService: boolean;\n}\n\nexport interface InactiveTunnelMode {\n\treadonly active: false;\n}\n\nexport const INACTIVE_TUNNEL_MODE: InactiveTunnelMode = { active: false };\n\n/** Saved mode for the tunnel. */\nexport type TunnelMode = ActiveTunnelMode | InactiveTunnelMode;\n\nexport type TunnelStatus =\n\t| TunnelStates.Connected\n\t| TunnelStates.Disconnected\n\t| TunnelStates.Connecting\n\t| TunnelStates.Uninitialized;\n\nexport namespace TunnelStates {\n\texport interface Uninitialized {\n\t\treadonly type: \"uninitialized\";\n\t}\n\texport interface Connecting {\n\t\treadonly type: \"connecting\";\n\t\treadonly progress?: string;\n\t}\n\texport interface Connected {\n\t\treadonly type: \"connected\";\n\t\treadonly info: ConnectionInfo;\n\t\treadonly serviceInstallFailed: boolean;\n\t}\n\texport interface Disconnected {\n\t\treadonly type: \"disconnected\";\n\t\treadonly onTokenFailed?: IRemoteTunnelSession;\n\t}\n\texport const disconnected = (\n\t\tonTokenFailed?: IRemoteTunnelSession,\n\t): Disconnected => ({ type: \"disconnected\", onTokenFailed });\n\texport const connected = (\n\t\tinfo: ConnectionInfo,\n\t\tserviceInstallFailed: boolean,\n\t): Connected => ({ type: \"connected\", info, serviceInstallFailed });\n\texport const connecting = (progress?: string): Connecting => ({\n\t\ttype: \"connecting\",\n\t\tprogress,\n\t});\n\texport const uninitialized: Uninitialized = { type: \"uninitialized\" };\n}\n\nexport interface ConnectionInfo {\n\tlink: string;\n\tdomain: string;\n\ttunnelName: string;\n\tisAttached: boolean;\n}\n\nexport const CONFIGURATION_KEY_PREFIX = \"remote.tunnels.access\";\nexport const CONFIGURATION_KEY_HOST_NAME =\n\tCONFIGURATION_KEY_PREFIX + \".hostNameOverride\";\nexport const CONFIGURATION_KEY_PREVENT_SLEEP =\n\tCONFIGURATION_KEY_PREFIX + \".preventSleep\";\n\nexport const LOG_ID = \"remoteTunnelService\";\nexport const LOGGER_NAME = localize(\"remoteTunnelLog\", \"Remote Tunnel Service\");\n"],
  "mappings": ";;AAMA,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AASzB,MAAM,uBAAuB;AAAA,EACnC;AACD;AA4BO,MAAM,uBAA2C,EAAE,QAAQ,MAAM;AAWjE,IAAU;AAAA,CAAV,CAAUA,kBAAV;AAiBC,EAAMA,cAAA,eAAe,wBAC3B,mBACmB,EAAE,MAAM,gBAAgB,cAAc,IAF9B;AAGrB,EAAMA,cAAA,YAAY,wBACxB,MACA,0BACgB,EAAE,MAAM,aAAa,MAAM,qBAAqB,IAHxC;AAIlB,EAAMA,cAAA,aAAa,wBAAC,cAAmC;AAAA,IAC7D,MAAM;AAAA,IACN;AAAA,EACD,IAH0B;AAInB,EAAMA,cAAA,gBAA+B,EAAE,MAAM,gBAAgB;AAAA,GA5BpD;AAsCV,MAAM,2BAA2B;AACjC,MAAM,8BACZ,2BAA2B;AACrB,MAAM,kCACZ,2BAA2B;AAErB,MAAM,SAAS;AACf,MAAM,cAAc,SAAS,mBAAmB,uBAAuB;",
  "names": ["TunnelStates"]
}
