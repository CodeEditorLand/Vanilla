import{VSBuffer as h}from"../../../base/common/buffer.js";import{Emitter as f}from"../../../base/common/event.js";import{Disposable as u}from"../../../base/common/lifecycle.js";import*as p from"../../../base/common/resources.js";import{newWriteableStream as D}from"../../../base/common/stream.js";import"../../../base/common/uri.js";import{createFileSystemProviderError as s,FileChangeType as m,FileSystemProviderCapabilities as d,FileSystemProviderErrorCode as a,FileType as F}from"./files.js";class b{type;ctime;mtime;size;name;data;constructor(e){this.type=F.File,this.ctime=Date.now(),this.mtime=Date.now(),this.size=0,this.name=e}}class y{type;ctime;mtime;size;name;entries;constructor(e){this.type=F.Directory,this.ctime=Date.now(),this.mtime=Date.now(),this.size=0,this.name=e,this.entries=new Map}}class V extends u{memoryFdCounter=0;fdMemory=new Map;_onDidChangeCapabilities=this._register(new f);onDidChangeCapabilities=this._onDidChangeCapabilities.event;_capabilities=d.FileReadWrite|d.PathCaseSensitive;get capabilities(){return this._capabilities}setReadOnly(e){const i=!!(this._capabilities&d.Readonly);e!==i&&(this._capabilities=e?d.Readonly|d.PathCaseSensitive|d.FileReadWrite:d.FileReadWrite|d.PathCaseSensitive,this._onDidChangeCapabilities.fire())}root=new y("");async stat(e){return this._lookup(e,!1)}async readdir(e){const i=this._lookupAsDirectory(e,!1),t=[];return i.entries.forEach((r,o)=>t.push([o,r.type])),t}async readFile(e){const i=this._lookupAsFile(e,!1).data;if(i)return i;throw s("file not found",a.FileNotFound)}readFileStream(e){const i=this._lookupAsFile(e,!1).data,t=D(r=>h.concat(r.map(o=>h.wrap(o))).buffer);return t.end(i),t}async writeFile(e,i,t){const r=p.basename(e),o=this._lookupParentDirectory(e);let n=o.entries.get(r);if(n instanceof y)throw s("file is directory",a.FileIsADirectory);if(!n&&!t.create)throw s("file not found",a.FileNotFound);if(n&&t.create&&!t.overwrite)throw s("file exists already",a.FileExists);n||(n=new b(r),o.entries.set(r,n),this._fireSoon({type:m.ADDED,resource:e})),n.mtime=Date.now(),n.size=i.byteLength,n.data=i,this._fireSoon({type:m.UPDATED,resource:e})}open(e,i){const t=this._lookupAsFile(e,!1).data;if(t){const r=this.memoryFdCounter++;return this.fdMemory.set(r,t),Promise.resolve(r)}throw s("file not found",a.FileNotFound)}close(e){return this.fdMemory.delete(e),Promise.resolve()}read(e,i,t,r,o){const n=this.fdMemory.get(e);if(!n)throw s("No file with that descriptor open",a.Unavailable);const l=h.wrap(n).slice(i,i+o);return t.set(l.buffer,r),Promise.resolve(l.byteLength)}write(e,i,t,r,o){const n=this.fdMemory.get(e);if(!n)throw s("No file with that descriptor open",a.Unavailable);const l=h.wrap(t).slice(r,r+o);return n.set(l.buffer,i),Promise.resolve(l.byteLength)}async rename(e,i,t){if(!t.overwrite&&this._lookup(i,!0))throw s("file exists already",a.FileExists);const r=this._lookup(e,!1),o=this._lookupParentDirectory(e),n=this._lookupParentDirectory(i),l=p.basename(i);o.entries.delete(r.name),r.name=l,n.entries.set(l,r),this._fireSoon({type:m.DELETED,resource:e},{type:m.ADDED,resource:i})}async delete(e,i){const t=p.dirname(e),r=p.basename(e),o=this._lookupAsDirectory(t,!1);o.entries.has(r)&&(o.entries.delete(r),o.mtime=Date.now(),o.size-=1,this._fireSoon({type:m.UPDATED,resource:t},{resource:e,type:m.DELETED}))}async mkdir(e){if(this._lookup(e,!0))throw s("file exists already",a.FileExists);const i=p.basename(e),t=p.dirname(e),r=this._lookupAsDirectory(t,!1),o=new y(i);r.entries.set(o.name,o),r.mtime=Date.now(),r.size+=1,this._fireSoon({type:m.UPDATED,resource:t},{type:m.ADDED,resource:e})}_lookup(e,i){const t=e.path.split("/");let r=this.root;for(const o of t){if(!o)continue;let n;if(r instanceof y&&(n=r.entries.get(o)),!n){if(i)return;throw s("file not found",a.FileNotFound)}r=n}return r}_lookupAsDirectory(e,i){const t=this._lookup(e,i);if(t instanceof y)return t;throw s("file not a directory",a.FileNotADirectory)}_lookupAsFile(e,i){const t=this._lookup(e,i);if(t instanceof b)return t;throw s("file is a directory",a.FileIsADirectory)}_lookupParentDirectory(e){const i=p.dirname(e);return this._lookupAsDirectory(i,!1)}_onDidChangeFile=this._register(new f);onDidChangeFile=this._onDidChangeFile.event;_bufferedChanges=[];_fireSoonHandle;watch(e,i){return u.None}_fireSoon(...e){this._bufferedChanges.push(...e),this._fireSoonHandle&&clearTimeout(this._fireSoonHandle),this._fireSoonHandle=setTimeout(()=>{this._onDidChangeFile.fire(this._bufferedChanges),this._bufferedChanges.length=0},5)}dispose(){super.dispose(),this.fdMemory.clear()}}export{V as InMemoryFileSystemProvider};
