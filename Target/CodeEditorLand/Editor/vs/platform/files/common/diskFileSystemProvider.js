import{insert as a}from"../../../base/common/arrays.js";import{ThrottledDelayer as o}from"../../../base/common/async.js";import{onUnexpectedError as n}from"../../../base/common/errors.js";import{Emitter as c}from"../../../base/common/event.js";import{removeTrailingPathSeparator as v}from"../../../base/common/extpath.js";import{Disposable as u,toDisposable as h}from"../../../base/common/lifecycle.js";import{normalize as g}from"../../../base/common/path.js";import"../../../base/common/uri.js";import"./files.js";import{isRecursiveWatchRequest as d,reviveFileChanges as l}from"./watcher.js";import{LogLevel as s}from"../../log/common/log.js";class T extends u{constructor(e,r){super();this.logService=e;this.options=r}_onDidChangeFile=this._register(new c);onDidChangeFile=this._onDidChangeFile.event;_onDidWatchError=this._register(new c);onDidWatchError=this._onDidWatchError.event;watch(e,r){return r.recursive||this.options?.watcher?.forceUniversal?this.watchUniversal(e,r):this.watchNonRecursive(e,r)}universalWatcher;universalWatchRequests=[];universalWatchRequestDelayer=this._register(new o(0));watchUniversal(e,r){const t=this.toWatchRequest(e,r),i=a(this.universalWatchRequests,t);return this.refreshUniversalWatchers(),h(()=>{i(),this.refreshUniversalWatchers()})}toWatchRequest(e,r){const t={path:this.toWatchPath(e),excludes:r.excludes,includes:r.includes,recursive:r.recursive,filter:r.filter,correlationId:r.correlationId};if(d(t)){const i=this.options?.watcher?.recursive?.usePolling;i===!0?t.pollingInterval=this.options?.watcher?.recursive?.pollingInterval??5e3:Array.isArray(i)&&i.includes(t.path)&&(t.pollingInterval=this.options?.watcher?.recursive?.pollingInterval??5e3)}return t}refreshUniversalWatchers(){this.universalWatchRequestDelayer.trigger(()=>this.doRefreshUniversalWatchers()).catch(e=>n(e))}doRefreshUniversalWatchers(){return this.universalWatcher||(this.universalWatcher=this._register(this.createUniversalWatcher(e=>this._onDidChangeFile.fire(l(e)),e=>this.onWatcherLogMessage(e),this.logService.getLevel()===s.Trace)),this._register(this.logService.onDidChangeLogLevel(()=>{this.universalWatcher?.setVerboseLogging(this.logService.getLevel()===s.Trace)}))),this.universalWatcher.watch(this.universalWatchRequests)}nonRecursiveWatcher;nonRecursiveWatchRequests=[];nonRecursiveWatchRequestDelayer=this._register(new o(0));watchNonRecursive(e,r){const t={path:this.toWatchPath(e),excludes:r.excludes,includes:r.includes,recursive:!1,filter:r.filter,correlationId:r.correlationId},i=a(this.nonRecursiveWatchRequests,t);return this.refreshNonRecursiveWatchers(),h(()=>{i(),this.refreshNonRecursiveWatchers()})}refreshNonRecursiveWatchers(){this.nonRecursiveWatchRequestDelayer.trigger(()=>this.doRefreshNonRecursiveWatchers()).catch(e=>n(e))}doRefreshNonRecursiveWatchers(){return this.nonRecursiveWatcher||(this.nonRecursiveWatcher=this._register(this.createNonRecursiveWatcher(e=>this._onDidChangeFile.fire(l(e)),e=>this.onWatcherLogMessage(e),this.logService.getLevel()===s.Trace)),this._register(this.logService.onDidChangeLogLevel(()=>{this.nonRecursiveWatcher?.setVerboseLogging(this.logService.getLevel()===s.Trace)}))),this.nonRecursiveWatcher.watch(this.nonRecursiveWatchRequests)}onWatcherLogMessage(e){e.type==="error"&&this._onDidWatchError.fire(e.message),this.logWatcherMessage(e)}logWatcherMessage(e){this.logService[e.type](e.message)}toFilePath(e){return g(e.fsPath)}toWatchPath(e){const r=this.toFilePath(e);return v(r)}}export{T as AbstractDiskFileSystemProvider};
