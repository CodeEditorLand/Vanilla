{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/common/inMemoryFilesystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport * as resources from '../../../base/common/resources.js';\nimport { ReadableStreamEvents, newWriteableStream } from '../../../base/common/stream.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { FileChangeType, IFileDeleteOptions, IFileOverwriteOptions, FileSystemProviderCapabilities, FileSystemProviderErrorCode, FileType, IFileWriteOptions, IFileChange, IFileSystemProviderWithFileReadWriteCapability, IStat, IWatchOptions, createFileSystemProviderError, IFileSystemProviderWithOpenReadWriteCloseCapability, IFileOpenOptions, IFileSystemProviderWithFileAtomicDeleteCapability, IFileSystemProviderWithFileAtomicReadCapability, IFileSystemProviderWithFileAtomicWriteCapability, IFileSystemProviderWithFileReadStreamCapability } from './files.js';\n\nclass File implements IStat {\n\n\treadonly type: FileType.File;\n\treadonly ctime: number;\n\tmtime: number;\n\tsize: number;\n\n\tname: string;\n\tdata?: Uint8Array;\n\n\tconstructor(name: string) {\n\t\tthis.type = FileType.File;\n\t\tthis.ctime = Date.now();\n\t\tthis.mtime = Date.now();\n\t\tthis.size = 0;\n\t\tthis.name = name;\n\t}\n}\n\nclass Directory implements IStat {\n\n\treadonly type: FileType.Directory;\n\treadonly ctime: number;\n\tmtime: number;\n\tsize: number;\n\n\tname: string;\n\treadonly entries: Map<string, File | Directory>;\n\n\tconstructor(name: string) {\n\t\tthis.type = FileType.Directory;\n\t\tthis.ctime = Date.now();\n\t\tthis.mtime = Date.now();\n\t\tthis.size = 0;\n\t\tthis.name = name;\n\t\tthis.entries = new Map();\n\t}\n}\n\ntype Entry = File | Directory;\n\nexport class InMemoryFileSystemProvider extends Disposable implements\n\tIFileSystemProviderWithFileReadWriteCapability,\n\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\tIFileSystemProviderWithFileReadStreamCapability,\n\tIFileSystemProviderWithFileAtomicReadCapability,\n\tIFileSystemProviderWithFileAtomicWriteCapability,\n\tIFileSystemProviderWithFileAtomicDeleteCapability {\n\n\tprivate memoryFdCounter = 0;\n\tprivate readonly fdMemory = new Map<number, Uint8Array>();\n\tprivate _onDidChangeCapabilities = this._register(new Emitter<void>());\n\treadonly onDidChangeCapabilities = this._onDidChangeCapabilities.event;\n\n\tprivate _capabilities = FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.PathCaseSensitive;\n\tget capabilities(): FileSystemProviderCapabilities { return this._capabilities; }\n\n\tsetReadOnly(readonly: boolean) {\n\t\tconst isReadonly = !!(this._capabilities & FileSystemProviderCapabilities.Readonly);\n\t\tif (readonly !== isReadonly) {\n\t\t\tthis._capabilities = readonly ? FileSystemProviderCapabilities.Readonly | FileSystemProviderCapabilities.PathCaseSensitive | FileSystemProviderCapabilities.FileReadWrite\n\t\t\t\t: FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.PathCaseSensitive;\n\t\t\tthis._onDidChangeCapabilities.fire();\n\t\t}\n\t}\n\n\troot = new Directory('');\n\n\t// --- manage file metadata\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\treturn this._lookup(resource, false);\n\t}\n\n\tasync readdir(resource: URI): Promise<[string, FileType][]> {\n\t\tconst entry = this._lookupAsDirectory(resource, false);\n\t\tconst result: [string, FileType][] = [];\n\t\tentry.entries.forEach((child, name) => result.push([name, child.type]));\n\t\treturn result;\n\t}\n\n\t// --- manage file contents\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\tconst data = this._lookupAsFile(resource, false).data;\n\t\tif (data) {\n\t\t\treturn data;\n\t\t}\n\t\tthrow createFileSystemProviderError('file not found', FileSystemProviderErrorCode.FileNotFound);\n\t}\n\n\treadFileStream(resource: URI): ReadableStreamEvents<Uint8Array> {\n\t\tconst data = this._lookupAsFile(resource, false).data;\n\n\t\tconst stream = newWriteableStream<Uint8Array>(data => VSBuffer.concat(data.map(data => VSBuffer.wrap(data))).buffer);\n\t\tstream.end(data);\n\n\t\treturn stream;\n\t}\n\n\tasync writeFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> {\n\t\tconst basename = resources.basename(resource);\n\t\tconst parent = this._lookupParentDirectory(resource);\n\t\tlet entry = parent.entries.get(basename);\n\t\tif (entry instanceof Directory) {\n\t\t\tthrow createFileSystemProviderError('file is directory', FileSystemProviderErrorCode.FileIsADirectory);\n\t\t}\n\t\tif (!entry && !opts.create) {\n\t\t\tthrow createFileSystemProviderError('file not found', FileSystemProviderErrorCode.FileNotFound);\n\t\t}\n\t\tif (entry && opts.create && !opts.overwrite) {\n\t\t\tthrow createFileSystemProviderError('file exists already', FileSystemProviderErrorCode.FileExists);\n\t\t}\n\t\tif (!entry) {\n\t\t\tentry = new File(basename);\n\t\t\tparent.entries.set(basename, entry);\n\t\t\tthis._fireSoon({ type: FileChangeType.ADDED, resource });\n\t\t}\n\t\tentry.mtime = Date.now();\n\t\tentry.size = content.byteLength;\n\t\tentry.data = content;\n\n\t\tthis._fireSoon({ type: FileChangeType.UPDATED, resource });\n\t}\n\n\t// file open/read/write/close\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> {\n\t\tconst data = this._lookupAsFile(resource, false).data;\n\t\tif (data) {\n\t\t\tconst fd = this.memoryFdCounter++;\n\t\t\tthis.fdMemory.set(fd, data);\n\t\t\treturn Promise.resolve(fd);\n\t\t}\n\t\tthrow createFileSystemProviderError('file not found', FileSystemProviderErrorCode.FileNotFound);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\tthis.fdMemory.delete(fd);\n\t\treturn Promise.resolve();\n\t}\n\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\tconst memory = this.fdMemory.get(fd);\n\t\tif (!memory) {\n\t\t\tthrow createFileSystemProviderError(`No file with that descriptor open`, FileSystemProviderErrorCode.Unavailable);\n\t\t}\n\n\t\tconst toWrite = VSBuffer.wrap(memory).slice(pos, pos + length);\n\t\tdata.set(toWrite.buffer, offset);\n\t\treturn Promise.resolve(toWrite.byteLength);\n\t}\n\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\tconst memory = this.fdMemory.get(fd);\n\t\tif (!memory) {\n\t\t\tthrow createFileSystemProviderError(`No file with that descriptor open`, FileSystemProviderErrorCode.Unavailable);\n\t\t}\n\n\t\tconst toWrite = VSBuffer.wrap(data).slice(offset, offset + length);\n\t\tmemory.set(toWrite.buffer, pos);\n\t\treturn Promise.resolve(toWrite.byteLength);\n\t}\n\n\t// --- manage files/folders\n\n\tasync rename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\tif (!opts.overwrite && this._lookup(to, true)) {\n\t\t\tthrow createFileSystemProviderError('file exists already', FileSystemProviderErrorCode.FileExists);\n\t\t}\n\n\t\tconst entry = this._lookup(from, false);\n\t\tconst oldParent = this._lookupParentDirectory(from);\n\n\t\tconst newParent = this._lookupParentDirectory(to);\n\t\tconst newName = resources.basename(to);\n\n\t\toldParent.entries.delete(entry.name);\n\t\tentry.name = newName;\n\t\tnewParent.entries.set(newName, entry);\n\n\t\tthis._fireSoon(\n\t\t\t{ type: FileChangeType.DELETED, resource: from },\n\t\t\t{ type: FileChangeType.ADDED, resource: to }\n\t\t);\n\t}\n\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\tconst dirname = resources.dirname(resource);\n\t\tconst basename = resources.basename(resource);\n\t\tconst parent = this._lookupAsDirectory(dirname, false);\n\t\tif (parent.entries.has(basename)) {\n\t\t\tparent.entries.delete(basename);\n\t\t\tparent.mtime = Date.now();\n\t\t\tparent.size -= 1;\n\t\t\tthis._fireSoon({ type: FileChangeType.UPDATED, resource: dirname }, { resource, type: FileChangeType.DELETED });\n\t\t}\n\t}\n\n\tasync mkdir(resource: URI): Promise<void> {\n\t\tif (this._lookup(resource, true)) {\n\t\t\tthrow createFileSystemProviderError('file exists already', FileSystemProviderErrorCode.FileExists);\n\t\t}\n\n\t\tconst basename = resources.basename(resource);\n\t\tconst dirname = resources.dirname(resource);\n\t\tconst parent = this._lookupAsDirectory(dirname, false);\n\n\t\tconst entry = new Directory(basename);\n\t\tparent.entries.set(entry.name, entry);\n\t\tparent.mtime = Date.now();\n\t\tparent.size += 1;\n\t\tthis._fireSoon({ type: FileChangeType.UPDATED, resource: dirname }, { type: FileChangeType.ADDED, resource });\n\t}\n\n\t// --- lookup\n\n\tprivate _lookup(uri: URI, silent: false): Entry;\n\tprivate _lookup(uri: URI, silent: boolean): Entry | undefined;\n\tprivate _lookup(uri: URI, silent: boolean): Entry | undefined {\n\t\tconst parts = uri.path.split('/');\n\t\tlet entry: Entry = this.root;\n\t\tfor (const part of parts) {\n\t\t\tif (!part) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet child: Entry | undefined;\n\t\t\tif (entry instanceof Directory) {\n\t\t\t\tchild = entry.entries.get(part);\n\t\t\t}\n\t\t\tif (!child) {\n\t\t\t\tif (!silent) {\n\t\t\t\t\tthrow createFileSystemProviderError('file not found', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tentry = child;\n\t\t}\n\t\treturn entry;\n\t}\n\n\tprivate _lookupAsDirectory(uri: URI, silent: boolean): Directory {\n\t\tconst entry = this._lookup(uri, silent);\n\t\tif (entry instanceof Directory) {\n\t\t\treturn entry;\n\t\t}\n\t\tthrow createFileSystemProviderError('file not a directory', FileSystemProviderErrorCode.FileNotADirectory);\n\t}\n\n\tprivate _lookupAsFile(uri: URI, silent: boolean): File {\n\t\tconst entry = this._lookup(uri, silent);\n\t\tif (entry instanceof File) {\n\t\t\treturn entry;\n\t\t}\n\t\tthrow createFileSystemProviderError('file is a directory', FileSystemProviderErrorCode.FileIsADirectory);\n\t}\n\n\tprivate _lookupParentDirectory(uri: URI): Directory {\n\t\tconst dirname = resources.dirname(uri);\n\t\treturn this._lookupAsDirectory(dirname, false);\n\t}\n\n\t// --- manage file events\n\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<readonly IFileChange[]>());\n\treadonly onDidChangeFile: Event<readonly IFileChange[]> = this._onDidChangeFile.event;\n\n\tprivate _bufferedChanges: IFileChange[] = [];\n\tprivate _fireSoonHandle?: any;\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\t// ignore, fires for all changes...\n\t\treturn Disposable.None;\n\t}\n\n\tprivate _fireSoon(...changes: IFileChange[]): void {\n\t\tthis._bufferedChanges.push(...changes);\n\n\t\tif (this._fireSoonHandle) {\n\t\t\tclearTimeout(this._fireSoonHandle);\n\t\t}\n\n\t\tthis._fireSoonHandle = setTimeout(() => {\n\t\t\tthis._onDidChangeFile.fire(this._bufferedChanges);\n\t\t\tthis._bufferedChanges.length = 0;\n\t\t}, 5);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.fdMemory.clear();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["data"]
}
