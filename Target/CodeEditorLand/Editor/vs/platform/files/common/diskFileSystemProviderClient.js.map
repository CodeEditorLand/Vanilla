{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/common/diskFileSystemProviderClient.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport { canceled } from \"../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype ReadableStreamEventPayload,\n\ttype ReadableStreamEvents,\n\tnewWriteableStream,\n} from \"../../../base/common/stream.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport type { IChannel } from \"../../../base/parts/ipc/common/ipc.js\";\nimport {\n\tFileSystemProviderCapabilities,\n\tFileSystemProviderErrorCode,\n\ttype FileType,\n\ttype IFileAtomicReadOptions,\n\ttype IFileChange,\n\ttype IFileDeleteOptions,\n\ttype IFileOpenOptions,\n\ttype IFileOverwriteOptions,\n\ttype IFileReadStreamOptions,\n\ttype IFileSystemProviderError,\n\ttype IFileSystemProviderWithFileAtomicReadCapability,\n\ttype IFileSystemProviderWithFileCloneCapability,\n\ttype IFileSystemProviderWithFileFolderCopyCapability,\n\ttype IFileSystemProviderWithFileReadStreamCapability,\n\ttype IFileSystemProviderWithFileReadWriteCapability,\n\ttype IFileSystemProviderWithOpenReadWriteCloseCapability,\n\ttype IFileWriteOptions,\n\ttype IStat,\n\ttype IWatchOptions,\n\tcreateFileSystemProviderError,\n} from \"./files.js\";\nimport { reviveFileChanges } from \"./watcher.js\";\n\nexport const LOCAL_FILE_SYSTEM_CHANNEL_NAME = \"localFilesystem\";\n\n/**\n * An implementation of a local disk file system provider\n * that is backed by a `IChannel` and thus implemented via\n * IPC on a different process.\n */\nexport class DiskFileSystemProviderClient\n\textends Disposable\n\timplements\n\t\tIFileSystemProviderWithFileReadWriteCapability,\n\t\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\t\tIFileSystemProviderWithFileReadStreamCapability,\n\t\tIFileSystemProviderWithFileFolderCopyCapability,\n\t\tIFileSystemProviderWithFileAtomicReadCapability,\n\t\tIFileSystemProviderWithFileCloneCapability\n{\n\tconstructor(\n\t\tprivate readonly channel: IChannel,\n\t\tprivate readonly extraCapabilities: {\n\t\t\ttrash?: boolean;\n\t\t\tpathCaseSensitive?: boolean;\n\t\t},\n\t) {\n\t\tsuper();\n\n\t\tthis.registerFileChangeListeners();\n\t}\n\n\t//#region File Capabilities\n\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\tprivate _capabilities: FileSystemProviderCapabilities | undefined;\n\tget capabilities(): FileSystemProviderCapabilities {\n\t\tif (!this._capabilities) {\n\t\t\tthis._capabilities =\n\t\t\t\tFileSystemProviderCapabilities.FileReadWrite |\n\t\t\t\tFileSystemProviderCapabilities.FileOpenReadWriteClose |\n\t\t\t\tFileSystemProviderCapabilities.FileReadStream |\n\t\t\t\tFileSystemProviderCapabilities.FileFolderCopy |\n\t\t\t\tFileSystemProviderCapabilities.FileWriteUnlock |\n\t\t\t\tFileSystemProviderCapabilities.FileAtomicRead |\n\t\t\t\tFileSystemProviderCapabilities.FileAtomicWrite |\n\t\t\t\tFileSystemProviderCapabilities.FileAtomicDelete |\n\t\t\t\tFileSystemProviderCapabilities.FileClone;\n\n\t\t\tif (this.extraCapabilities.pathCaseSensitive) {\n\t\t\t\tthis._capabilities |=\n\t\t\t\t\tFileSystemProviderCapabilities.PathCaseSensitive;\n\t\t\t}\n\n\t\t\tif (this.extraCapabilities.trash) {\n\t\t\t\tthis._capabilities |= FileSystemProviderCapabilities.Trash;\n\t\t\t}\n\t\t}\n\n\t\treturn this._capabilities;\n\t}\n\n\t//#endregion\n\n\t//#region File Metadata Resolving\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn this.channel.call(\"stat\", [resource]);\n\t}\n\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn this.channel.call(\"readdir\", [resource]);\n\t}\n\n\t//#endregion\n\n\t//#region File Reading/Writing\n\n\tasync readFile(\n\t\tresource: URI,\n\t\topts?: IFileAtomicReadOptions,\n\t): Promise<Uint8Array> {\n\t\tconst { buffer } = (await this.channel.call(\"readFile\", [\n\t\t\tresource,\n\t\t\topts,\n\t\t])) as VSBuffer;\n\n\t\treturn buffer;\n\t}\n\n\treadFileStream(\n\t\tresource: URI,\n\t\topts: IFileReadStreamOptions,\n\t\ttoken: CancellationToken,\n\t): ReadableStreamEvents<Uint8Array> {\n\t\tconst stream = newWriteableStream<Uint8Array>(\n\t\t\t(data) =>\n\t\t\t\tVSBuffer.concat(data.map((data) => VSBuffer.wrap(data))).buffer,\n\t\t);\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Reading as file stream goes through an event to the remote side\n\t\tdisposables.add(\n\t\t\tthis.channel.listen<ReadableStreamEventPayload<VSBuffer>>(\n\t\t\t\t\"readFileStream\",\n\t\t\t\t[resource, opts],\n\t\t\t)((dataOrErrorOrEnd) => {\n\t\t\t\t// data\n\t\t\t\tif (dataOrErrorOrEnd instanceof VSBuffer) {\n\t\t\t\t\tstream.write(dataOrErrorOrEnd.buffer);\n\t\t\t\t}\n\n\t\t\t\t// end or error\n\t\t\t\telse {\n\t\t\t\t\tif (dataOrErrorOrEnd === \"end\") {\n\t\t\t\t\t\tstream.end();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet error: Error;\n\n\t\t\t\t\t\t// Take Error as is if type matches\n\t\t\t\t\t\tif (dataOrErrorOrEnd instanceof Error) {\n\t\t\t\t\t\t\terror = dataOrErrorOrEnd;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise, try to deserialize into an error.\n\t\t\t\t\t\t// Since we communicate via IPC, we cannot be sure\n\t\t\t\t\t\t// that Error objects are properly serialized.\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst errorCandidate =\n\t\t\t\t\t\t\t\tdataOrErrorOrEnd as IFileSystemProviderError;\n\n\t\t\t\t\t\t\terror = createFileSystemProviderError(\n\t\t\t\t\t\t\t\terrorCandidate.message ??\n\t\t\t\t\t\t\t\t\ttoErrorMessage(errorCandidate),\n\t\t\t\t\t\t\t\terrorCandidate.code ??\n\t\t\t\t\t\t\t\t\tFileSystemProviderErrorCode.Unknown,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstream.error(error);\n\t\t\t\t\t\tstream.end();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Signal to the remote side that we no longer listen\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Support cancellation\n\t\tdisposables.add(\n\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t// Ensure to end the stream properly with an error\n\t\t\t\t// to indicate the cancellation.\n\t\t\t\tstream.error(canceled());\n\t\t\t\tstream.end();\n\n\t\t\t\t// Ensure to dispose the listener upon cancellation. This will\n\t\t\t\t// bubble through the remote side as event and allows to stop\n\t\t\t\t// reading the file.\n\t\t\t\tdisposables.dispose();\n\t\t\t}),\n\t\t);\n\n\t\treturn stream;\n\t}\n\n\twriteFile(\n\t\tresource: URI,\n\t\tcontent: Uint8Array,\n\t\topts: IFileWriteOptions,\n\t): Promise<void> {\n\t\treturn this.channel.call(\"writeFile\", [\n\t\t\tresource,\n\t\t\tVSBuffer.wrap(content),\n\t\t\topts,\n\t\t]);\n\t}\n\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> {\n\t\treturn this.channel.call(\"open\", [resource, opts]);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\treturn this.channel.call(\"close\", [fd]);\n\t}\n\n\tasync read(\n\t\tfd: number,\n\t\tpos: number,\n\t\tdata: Uint8Array,\n\t\toffset: number,\n\t\tlength: number,\n\t): Promise<number> {\n\t\tconst [bytes, bytesRead]: [VSBuffer, number] = await this.channel.call(\n\t\t\t\"read\",\n\t\t\t[fd, pos, length],\n\t\t);\n\n\t\t// copy back the data that was written into the buffer on the remote\n\t\t// side. we need to do this because buffers are not referenced by\n\t\t// pointer, but only by value and as such cannot be directly written\n\t\t// to from the other process.\n\t\tdata.set(bytes.buffer.slice(0, bytesRead), offset);\n\n\t\treturn bytesRead;\n\t}\n\n\twrite(\n\t\tfd: number,\n\t\tpos: number,\n\t\tdata: Uint8Array,\n\t\toffset: number,\n\t\tlength: number,\n\t): Promise<number> {\n\t\treturn this.channel.call(\"write\", [\n\t\t\tfd,\n\t\t\tpos,\n\t\t\tVSBuffer.wrap(data),\n\t\t\toffset,\n\t\t\tlength,\n\t\t]);\n\t}\n\n\t//#endregion\n\n\t//#region Move/Copy/Delete/Create Folder\n\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn this.channel.call(\"mkdir\", [resource]);\n\t}\n\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn this.channel.call(\"delete\", [resource, opts]);\n\t}\n\n\trename(\n\t\tresource: URI,\n\t\ttarget: URI,\n\t\topts: IFileOverwriteOptions,\n\t): Promise<void> {\n\t\treturn this.channel.call(\"rename\", [resource, target, opts]);\n\t}\n\n\tcopy(\n\t\tresource: URI,\n\t\ttarget: URI,\n\t\topts: IFileOverwriteOptions,\n\t): Promise<void> {\n\t\treturn this.channel.call(\"copy\", [resource, target, opts]);\n\t}\n\n\t//#endregion\n\n\t//#region Clone File\n\n\tcloneFile(resource: URI, target: URI): Promise<void> {\n\t\treturn this.channel.call(\"cloneFile\", [resource, target]);\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprivate readonly _onDidChange = this._register(\n\t\tnew Emitter<readonly IFileChange[]>(),\n\t);\n\treadonly onDidChangeFile = this._onDidChange.event;\n\n\tprivate readonly _onDidWatchError = this._register(new Emitter<string>());\n\treadonly onDidWatchError = this._onDidWatchError.event;\n\n\t// The contract for file watching via remote is to identify us\n\t// via a unique but readonly session ID. Since the remote is\n\t// managing potentially many watchers from different clients,\n\t// this helps the server to properly partition events to the right\n\t// clients.\n\tprivate readonly sessionId = generateUuid();\n\n\tprivate registerFileChangeListeners(): void {\n\t\t// The contract for file changes is that there is one listener\n\t\t// for both events and errors from the watcher. So we need to\n\t\t// unwrap the event from the remote and emit through the proper\n\t\t// emitter.\n\t\tthis._register(\n\t\t\tthis.channel.listen<IFileChange[] | string>(\"fileChange\", [\n\t\t\t\tthis.sessionId,\n\t\t\t])((eventsOrError) => {\n\t\t\t\tif (Array.isArray(eventsOrError)) {\n\t\t\t\t\tconst events = eventsOrError;\n\t\t\t\t\tthis._onDidChange.fire(reviveFileChanges(events));\n\t\t\t\t} else {\n\t\t\t\t\tconst error = eventsOrError;\n\t\t\t\t\tthis._onDidWatchError.fire(error);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\t// Generate a request UUID to correlate the watcher\n\t\t// back to us when we ask to dispose the watcher later.\n\t\tconst req = generateUuid();\n\n\t\tthis.channel.call(\"watch\", [this.sessionId, req, resource, opts]);\n\n\t\treturn toDisposable(() =>\n\t\t\tthis.channel.call(\"unwatch\", [this.sessionId, req]),\n\t\t);\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": ["data"]
}
