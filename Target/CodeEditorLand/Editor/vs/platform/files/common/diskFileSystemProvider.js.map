{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/common/diskFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { insert } from '../../../base/common/arrays.js';\nimport { ThrottledDelayer } from '../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { removeTrailingPathSeparator } from '../../../base/common/extpath.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { normalize } from '../../../base/common/path.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IFileChange, IFileSystemProvider, IWatchOptions } from './files.js';\nimport { AbstractNonRecursiveWatcherClient, AbstractUniversalWatcherClient, ILogMessage, INonRecursiveWatchRequest, IRecursiveWatcherOptions, isRecursiveWatchRequest, IUniversalWatchRequest, reviveFileChanges } from './watcher.js';\nimport { ILogService, LogLevel } from '../../log/common/log.js';\n\nexport interface IDiskFileSystemProviderOptions {\n\twatcher?: {\n\n\t\t/**\n\t\t * Extra options for the recursive file watching.\n\t\t */\n\t\trecursive?: IRecursiveWatcherOptions;\n\n\t\t/**\n\t\t * Forces all file watch requests to run through a\n\t\t * single universal file watcher, both recursive\n\t\t * and non-recursively.\n\t\t *\n\t\t * Enabling this option might cause some overhead,\n\t\t * specifically the universal file watcher will run\n\t\t * in a separate process given its complexity. Only\n\t\t * enable it when you understand the consequences.\n\t\t */\n\t\tforceUniversal?: boolean;\n\t};\n}\n\nexport abstract class AbstractDiskFileSystemProvider extends Disposable implements\n\tPick<IFileSystemProvider, 'watch'>,\n\tPick<IFileSystemProvider, 'onDidChangeFile'>,\n\tPick<IFileSystemProvider, 'onDidWatchError'> {\n\n\tconstructor(\n\t\tprotected readonly logService: ILogService,\n\t\tprivate readonly options?: IDiskFileSystemProviderOptions\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected readonly _onDidChangeFile = this._register(new Emitter<readonly IFileChange[]>());\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tprotected readonly _onDidWatchError = this._register(new Emitter<string>());\n\treadonly onDidWatchError = this._onDidWatchError.event;\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\tif (opts.recursive || this.options?.watcher?.forceUniversal) {\n\t\t\treturn this.watchUniversal(resource, opts);\n\t\t}\n\n\t\treturn this.watchNonRecursive(resource, opts);\n\t}\n\n\t//#region File Watching (universal)\n\n\tprivate universalWatcher: AbstractUniversalWatcherClient | undefined;\n\n\tprivate readonly universalWatchRequests: IUniversalWatchRequest[] = [];\n\tprivate readonly universalWatchRequestDelayer = this._register(new ThrottledDelayer<void>(0));\n\n\tprivate watchUniversal(resource: URI, opts: IWatchOptions): IDisposable {\n\n\t\t// Add to list of paths to watch universally\n\t\tconst request: IUniversalWatchRequest = {\n\t\t\tpath: this.toWatchPath(resource),\n\t\t\texcludes: opts.excludes,\n\t\t\tincludes: opts.includes,\n\t\t\trecursive: opts.recursive,\n\t\t\tfilter: opts.filter,\n\t\t\tcorrelationId: opts.correlationId\n\t\t};\n\t\tconst remove = insert(this.universalWatchRequests, request);\n\n\t\t// Trigger update\n\t\tthis.refreshUniversalWatchers();\n\n\t\treturn toDisposable(() => {\n\n\t\t\t// Remove from list of paths to watch universally\n\t\t\tremove();\n\n\t\t\t// Trigger update\n\t\t\tthis.refreshUniversalWatchers();\n\t\t});\n\t}\n\n\tprivate refreshUniversalWatchers(): void {\n\n\t\t// Buffer requests for universal watching to decide on right watcher\n\t\t// that supports potentially watching more than one path at once\n\t\tthis.universalWatchRequestDelayer.trigger(() => {\n\t\t\treturn this.doRefreshUniversalWatchers();\n\t\t}).catch(error => onUnexpectedError(error));\n\t}\n\n\tprivate doRefreshUniversalWatchers(): Promise<void> {\n\n\t\t// Create watcher if this is the first time\n\t\tif (!this.universalWatcher) {\n\t\t\tthis.universalWatcher = this._register(this.createUniversalWatcher(\n\t\t\t\tchanges => this._onDidChangeFile.fire(reviveFileChanges(changes)),\n\t\t\t\tmsg => this.onWatcherLogMessage(msg),\n\t\t\t\tthis.logService.getLevel() === LogLevel.Trace\n\t\t\t));\n\n\t\t\t// Apply log levels dynamically\n\t\t\tthis._register(this.logService.onDidChangeLogLevel(() => {\n\t\t\t\tthis.universalWatcher?.setVerboseLogging(this.logService.getLevel() === LogLevel.Trace);\n\t\t\t}));\n\t\t}\n\n\t\t// Adjust for polling\n\t\tconst usePolling = this.options?.watcher?.recursive?.usePolling;\n\t\tif (usePolling === true) {\n\t\t\tfor (const request of this.universalWatchRequests) {\n\t\t\t\tif (isRecursiveWatchRequest(request)) {\n\t\t\t\t\trequest.pollingInterval = this.options?.watcher?.recursive?.pollingInterval ?? 5000;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Array.isArray(usePolling)) {\n\t\t\tfor (const request of this.universalWatchRequests) {\n\t\t\t\tif (isRecursiveWatchRequest(request)) {\n\t\t\t\t\tif (usePolling.includes(request.path)) {\n\t\t\t\t\t\trequest.pollingInterval = this.options?.watcher?.recursive?.pollingInterval ?? 5000;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ask to watch the provided paths\n\t\treturn this.universalWatcher.watch(this.universalWatchRequests);\n\t}\n\n\tprotected abstract createUniversalWatcher(\n\t\tonChange: (changes: IFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean\n\t): AbstractUniversalWatcherClient;\n\n\t//#endregion\n\n\t//#region File Watching (non-recursive)\n\n\tprivate nonRecursiveWatcher: AbstractNonRecursiveWatcherClient | undefined;\n\n\tprivate readonly nonRecursiveWatchRequests: INonRecursiveWatchRequest[] = [];\n\tprivate readonly nonRecursiveWatchRequestDelayer = this._register(new ThrottledDelayer<void>(0));\n\n\tprivate watchNonRecursive(resource: URI, opts: IWatchOptions): IDisposable {\n\n\t\t// Add to list of paths to watch non-recursively\n\t\tconst request: INonRecursiveWatchRequest = {\n\t\t\tpath: this.toWatchPath(resource),\n\t\t\texcludes: opts.excludes,\n\t\t\tincludes: opts.includes,\n\t\t\trecursive: false,\n\t\t\tfilter: opts.filter,\n\t\t\tcorrelationId: opts.correlationId\n\t\t};\n\t\tconst remove = insert(this.nonRecursiveWatchRequests, request);\n\n\t\t// Trigger update\n\t\tthis.refreshNonRecursiveWatchers();\n\n\t\treturn toDisposable(() => {\n\n\t\t\t// Remove from list of paths to watch non-recursively\n\t\t\tremove();\n\n\t\t\t// Trigger update\n\t\t\tthis.refreshNonRecursiveWatchers();\n\t\t});\n\t}\n\n\tprivate refreshNonRecursiveWatchers(): void {\n\n\t\t// Buffer requests for nonrecursive watching to decide on right watcher\n\t\t// that supports potentially watching more than one path at once\n\t\tthis.nonRecursiveWatchRequestDelayer.trigger(() => {\n\t\t\treturn this.doRefreshNonRecursiveWatchers();\n\t\t}).catch(error => onUnexpectedError(error));\n\t}\n\n\tprivate doRefreshNonRecursiveWatchers(): Promise<void> {\n\n\t\t// Create watcher if this is the first time\n\t\tif (!this.nonRecursiveWatcher) {\n\t\t\tthis.nonRecursiveWatcher = this._register(this.createNonRecursiveWatcher(\n\t\t\t\tchanges => this._onDidChangeFile.fire(reviveFileChanges(changes)),\n\t\t\t\tmsg => this.onWatcherLogMessage(msg),\n\t\t\t\tthis.logService.getLevel() === LogLevel.Trace\n\t\t\t));\n\n\t\t\t// Apply log levels dynamically\n\t\t\tthis._register(this.logService.onDidChangeLogLevel(() => {\n\t\t\t\tthis.nonRecursiveWatcher?.setVerboseLogging(this.logService.getLevel() === LogLevel.Trace);\n\t\t\t}));\n\t\t}\n\n\t\t// Ask to watch the provided paths\n\t\treturn this.nonRecursiveWatcher.watch(this.nonRecursiveWatchRequests);\n\t}\n\n\tprotected abstract createNonRecursiveWatcher(\n\t\tonChange: (changes: IFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean\n\t): AbstractNonRecursiveWatcherClient;\n\n\t//#endregion\n\n\tprivate onWatcherLogMessage(msg: ILogMessage): void {\n\t\tif (msg.type === 'error') {\n\t\t\tthis._onDidWatchError.fire(msg.message);\n\t\t}\n\n\t\tthis.logWatcherMessage(msg);\n\t}\n\n\tprotected logWatcherMessage(msg: ILogMessage): void {\n\t\tthis.logService[msg.type](msg.message);\n\t}\n\n\tprotected toFilePath(resource: URI): string {\n\t\treturn normalize(resource.fsPath);\n\t}\n\n\tprivate toWatchPath(resource: URI): string {\n\t\tconst filePath = this.toFilePath(resource);\n\n\t\t// Ensure to have any trailing path separators removed, otherwise\n\t\t// we may believe the path is not \"real\" and will convert every\n\t\t// event back to this form, which is not warranted.\n\t\t// See also https://github.com/microsoft/vscode/issues/210517\n\t\treturn removeTrailingPathSeparator(filePath);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
