import{VSBuffer as c}from"../../../base/common/buffer.js";import{canceled as S}from"../../../base/common/errors.js";import{localize as I}from"../../../nls.js";import{createFileSystemProviderError as h,ensureFileSystemProviderError as p,FileSystemProviderErrorCode as T}from"./files.js";async function M(t,o,n,u,e,d){let a;try{await C(t,o,n,u,e,d)}catch(l){a=l}finally{a&&e.errorTransformer&&(a=e.errorTransformer(a)),typeof a<"u"&&n.error(a),n.end()}}async function C(t,o,n,u,e,d){s(d);const a=await t.open(o,{create:!1});try{s(d);let l=0,f=0,r=e&&typeof e.length=="number"?e.length:void 0,m=c.alloc(Math.min(e.bufferSize,typeof r=="number"?r:e.bufferSize)),y=e&&typeof e.position=="number"?e.position:0,i=0;do f=await t.read(a,y,m.buffer,i,m.byteLength-i),y+=f,i+=f,l+=f,typeof r=="number"&&(r-=f),i===m.byteLength&&(await n.write(u(m)),m=c.alloc(Math.min(e.bufferSize,typeof r=="number"?r:e.bufferSize)),i=0);while(f>0&&(typeof r!="number"||r>0)&&s(d)&&R(l,e));if(i>0){let b=i;typeof r=="number"&&(b=Math.min(i,r)),n.write(u(m.slice(0,b)))}}catch(l){throw p(l)}finally{await t.close(a)}}function s(t){if(t.isCancellationRequested)throw S();return!0}function R(t,o){if(typeof o?.limits?.size=="number"&&t>o.limits.size)throw h(I("fileTooLargeError","File is too large to open"),T.FileTooLarge);return!0}export{M as readFileIntoStream};
