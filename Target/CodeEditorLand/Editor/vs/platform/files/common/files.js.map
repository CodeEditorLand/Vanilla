{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/common/files.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IExpression, IRelativePattern } from '../../../base/common/glob.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { sep } from '../../../base/common/path.js';\nimport { ReadableStreamEvents } from '../../../base/common/stream.js';\nimport { startsWithIgnoreCase } from '../../../base/common/strings.js';\nimport { isNumber } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { isWeb } from '../../../base/common/platform.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport { Lazy } from '../../../base/common/lazy.js';\n\n//#region file service & providers\n\nexport const IFileService = createDecorator<IFileService>('fileService');\n\nexport interface IFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that is fired when a file system provider is added or removed\n\t */\n\treadonly onDidChangeFileSystemProviderRegistrations: Event<IFileSystemProviderRegistrationEvent>;\n\n\t/**\n\t * An event that is fired when a registered file system provider changes its capabilities.\n\t */\n\treadonly onDidChangeFileSystemProviderCapabilities: Event<IFileSystemProviderCapabilitiesChangeEvent>;\n\n\t/**\n\t * An event that is fired when a file system provider is about to be activated. Listeners\n\t * can join this event with a long running promise to help in the activation process.\n\t */\n\treadonly onWillActivateFileSystemProvider: Event<IFileSystemProviderActivationEvent>;\n\n\t/**\n\t * Registers a file system provider for a certain scheme.\n\t */\n\tregisterProvider(scheme: string, provider: IFileSystemProvider): IDisposable;\n\n\t/**\n\t * Returns a file system provider for a certain scheme.\n\t */\n\tgetProvider(scheme: string): IFileSystemProvider | undefined;\n\n\t/**\n\t * Tries to activate a provider with the given scheme.\n\t */\n\tactivateProvider(scheme: string): Promise<void>;\n\n\t/**\n\t * Checks if this file service can handle the given resource by\n\t * first activating any extension that wants to be activated\n\t * on the provided resource scheme to include extensions that\n\t * contribute file system providers for the given resource.\n\t */\n\tcanHandleResource(resource: URI): Promise<boolean>;\n\n\t/**\n\t * Checks if the file service has a registered provider for the\n\t * provided resource.\n\t *\n\t * Note: this does NOT account for contributed providers from\n\t * extensions that have not been activated yet. To include those,\n\t * consider to call `await fileService.canHandleResource(resource)`.\n\t */\n\thasProvider(resource: URI): boolean;\n\n\t/**\n\t * Checks if the provider for the provided resource has the provided file system capability.\n\t */\n\thasCapability(resource: URI, capability: FileSystemProviderCapabilities): boolean;\n\n\t/**\n\t * List the schemes and capabilities for registered file system providers\n\t */\n\tlistCapabilities(): Iterable<{ scheme: string; capabilities: FileSystemProviderCapabilities }>;\n\n\t/**\n\t * Allows to listen for file changes. The event will fire for every file within the opened workspace\n\t * (if any) as well as all files that have been watched explicitly using the #watch() API.\n\t */\n\treadonly onDidFilesChange: Event<FileChangesEvent>;\n\n\t/**\n\t * An event that is fired upon successful completion of a certain file operation.\n\t */\n\treadonly onDidRunOperation: Event<FileOperationEvent>;\n\n\t/**\n\t * Resolve the properties of a file/folder identified by the resource. For a folder, children\n\t * information is resolved as well depending on the provided options. Use `stat()` method if\n\t * you do not need children information.\n\t *\n\t * If the optional parameter \"resolveTo\" is specified in options, the stat service is asked\n\t * to provide a stat object that should contain the full graph of folders up to all of the\n\t * target resources.\n\t *\n\t * If the optional parameter \"resolveSingleChildDescendants\" is specified in options,\n\t * the stat service is asked to automatically resolve child folders that only\n\t * contain a single element.\n\t *\n\t * If the optional parameter \"resolveMetadata\" is specified in options,\n\t * the stat will contain metadata information such as size, mtime and etag.\n\t */\n\tresolve(resource: URI, options: IResolveMetadataFileOptions): Promise<IFileStatWithMetadata>;\n\tresolve(resource: URI, options?: IResolveFileOptions): Promise<IFileStat>;\n\n\t/**\n\t * Same as `resolve()` but supports resolving multiple resources in parallel.\n\t *\n\t * If one of the resolve targets fails to resolve returns a fake `IFileStat` instead of\n\t * making the whole call fail.\n\t */\n\tresolveAll(toResolve: { resource: URI; options: IResolveMetadataFileOptions }[]): Promise<IFileStatResult[]>;\n\tresolveAll(toResolve: { resource: URI; options?: IResolveFileOptions }[]): Promise<IFileStatResult[]>;\n\n\t/**\n\t * Same as `resolve()` but without resolving the children of a folder if the\n\t * resource is pointing to a folder.\n\t */\n\tstat(resource: URI): Promise<IFileStatWithPartialMetadata>;\n\n\t/**\n\t * Finds out if a file/folder identified by the resource exists.\n\t */\n\texists(resource: URI): Promise<boolean>;\n\n\t/**\n\t * Read the contents of the provided resource unbuffered.\n\t */\n\treadFile(resource: URI, options?: IReadFileOptions, token?: CancellationToken): Promise<IFileContent>;\n\n\t/**\n\t * Read the contents of the provided resource buffered as stream.\n\t */\n\treadFileStream(resource: URI, options?: IReadFileStreamOptions, token?: CancellationToken): Promise<IFileStreamContent>;\n\n\t/**\n\t * Updates the content replacing its previous value.\n\t *\n\t * Emits a `FileOperation.WRITE` file operation event when successful.\n\t */\n\twriteFile(resource: URI, bufferOrReadableOrStream: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Moves the file/folder to a new path identified by the resource.\n\t *\n\t * The optional parameter overwrite can be set to replace an existing file at the location.\n\t *\n\t * Emits a `FileOperation.MOVE` file operation event when successful.\n\t */\n\tmove(source: URI, target: URI, overwrite?: boolean): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Find out if a move operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanMove(source: URI, target: URI, overwrite?: boolean): Promise<Error | true>;\n\n\t/**\n\t * Copies the file/folder to a path identified by the resource. A folder is copied\n\t * recursively.\n\t *\n\t * Emits a `FileOperation.COPY` file operation event when successful.\n\t */\n\tcopy(source: URI, target: URI, overwrite?: boolean): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Find out if a copy operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanCopy(source: URI, target: URI, overwrite?: boolean): Promise<Error | true>;\n\n\t/**\n\t * Clones a file to a path identified by the resource. Folders are not supported.\n\t *\n\t * If the target path exists, it will be overwritten.\n\t */\n\tcloneFile(source: URI, target: URI): Promise<void>;\n\n\t/**\n\t * Creates a new file with the given path and optional contents. The returned promise\n\t * will have the stat model object as a result.\n\t *\n\t * The optional parameter content can be used as value to fill into the new file.\n\t *\n\t * Emits a `FileOperation.CREATE` file operation event when successful.\n\t */\n\tcreateFile(resource: URI, bufferOrReadableOrStream?: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: ICreateFileOptions): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Find out if a file create operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanCreateFile(resource: URI, options?: ICreateFileOptions): Promise<Error | true>;\n\n\t/**\n\t * Creates a new folder with the given path. The returned promise\n\t * will have the stat model object as a result.\n\t *\n\t * Emits a `FileOperation.CREATE` file operation event when successful.\n\t */\n\tcreateFolder(resource: URI): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Deletes the provided file. The optional useTrash parameter allows to\n\t * move the file to trash. The optional recursive parameter allows to delete\n\t * non-empty folders recursively.\n\t *\n\t * Emits a `FileOperation.DELETE` file operation event when successful.\n\t */\n\tdel(resource: URI, options?: Partial<IFileDeleteOptions>): Promise<void>;\n\n\t/**\n\t * Find out if a delete operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanDelete(resource: URI, options?: Partial<IFileDeleteOptions>): Promise<Error | true>;\n\n\t/**\n\t * An event that signals an error when watching for file changes.\n\t */\n\treadonly onDidWatchError: Event<Error>;\n\n\t/**\n\t * Allows to start a watcher that reports file/folder change events on the provided resource.\n\t *\n\t * The watcher runs correlated and thus, file events will be reported on the returned\n\t * `IFileSystemWatcher` and not on the generic `IFileService.onDidFilesChange` event.\n\t */\n\tcreateWatcher(resource: URI, options: IWatchOptionsWithoutCorrelation): IFileSystemWatcher;\n\n\t/**\n\t * Allows to start a watcher that reports file/folder change events on the provided resource.\n\t *\n\t * The watcher runs uncorrelated and thus will report all events from `IFileService.onDidFilesChange`.\n\t * This means, most listeners in the application will receive your events. It is encouraged to\n\t * use correlated watchers (via `IWatchOptionsWithCorrelation`) to limit events to your listener.\n\t*/\n\twatch(resource: URI, options?: IWatchOptionsWithoutCorrelation): IDisposable;\n\n\t/**\n\t * Frees up any resources occupied by this service.\n\t */\n\tdispose(): void;\n}\n\nexport interface IFileOverwriteOptions {\n\n\t/**\n\t * Set to `true` to overwrite a file if it exists. Will\n\t * throw an error otherwise if the file does exist.\n\t */\n\treadonly overwrite: boolean;\n}\n\nexport interface IFileUnlockOptions {\n\n\t/**\n\t * Set to `true` to try to remove any write locks the file might\n\t * have. A file that is write locked will throw an error for any\n\t * attempt to write to unless `unlock: true` is provided.\n\t */\n\treadonly unlock: boolean;\n}\n\nexport interface IFileAtomicReadOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `readFile` method is not running in parallel with\n\t * any `write` operations in the same process.\n\t *\n\t * Typically you should not need to use this flag but if\n\t * for example you are quickly reading a file right after\n\t * a file event occurred and the file changes a lot, there\n\t * is a chance that a read returns an empty or partial file\n\t * because a pending write has not finished yet.\n\t *\n\t * Note: this does not prevent the file from being written\n\t * to from a different process. If you need such atomic\n\t * operations, you better use a real database as storage.\n\t */\n\treadonly atomic: boolean;\n}\n\nexport interface IFileAtomicOptions {\n\n\t/**\n\t * The postfix is used to create a temporary file based\n\t * on the original resource. The resulting temporary\n\t * file will be in the same folder as the resource and\n\t * have `postfix` appended to the resource name.\n\t *\n\t * Example: given a file resource `file:///some/path/foo.txt`\n\t * and a postfix `.vsctmp`, the temporary file will be\n\t * created as `file:///some/path/foo.txt.vsctmp`.\n\t */\n\treadonly postfix: string;\n}\n\nexport interface IFileAtomicWriteOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `writeFile` method updates the target file atomically\n\t * by first writing to a temporary file in the same folder\n\t * and then renaming it over the target.\n\t */\n\treadonly atomic: IFileAtomicOptions | false;\n}\n\nexport interface IFileAtomicDeleteOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `delete` method deletes the target atomically by\n\t * first renaming it to a temporary resource in the same\n\t * folder and then deleting it.\n\t */\n\treadonly atomic: IFileAtomicOptions | false;\n}\n\nexport interface IFileReadLimits {\n\n\t/**\n\t * If the file exceeds the given size, an error of kind\n\t * `FILE_TOO_LARGE` will be thrown.\n\t */\n\tsize?: number;\n}\n\nexport interface IFileReadStreamOptions {\n\n\t/**\n\t * Is an integer specifying where to begin reading from in the file. If position is undefined,\n\t * data will be read from the current file position.\n\t */\n\treadonly position?: number;\n\n\t/**\n\t * Is an integer specifying how many bytes to read from the file. By default, all bytes\n\t * will be read.\n\t */\n\treadonly length?: number;\n\n\t/**\n\t * If provided, the size of the file will be checked against the limits\n\t * and an error will be thrown if any limit is exceeded.\n\t */\n\treadonly limits?: IFileReadLimits;\n}\n\nexport interface IFileWriteOptions extends IFileOverwriteOptions, IFileUnlockOptions, IFileAtomicWriteOptions {\n\n\t/**\n\t * Set to `true` to create a file when it does not exist. Will\n\t * throw an error otherwise if the file does not exist.\n\t */\n\treadonly create: boolean;\n}\n\nexport type IFileOpenOptions = IFileOpenForReadOptions | IFileOpenForWriteOptions;\n\nexport function isFileOpenForWriteOptions(options: IFileOpenOptions): options is IFileOpenForWriteOptions {\n\treturn options.create === true;\n}\n\nexport interface IFileOpenForReadOptions {\n\n\t/**\n\t * A hint that the file should be opened for reading only.\n\t */\n\treadonly create: false;\n}\n\nexport interface IFileOpenForWriteOptions extends IFileUnlockOptions {\n\n\t/**\n\t * A hint that the file should be opened for reading and writing.\n\t */\n\treadonly create: true;\n}\n\nexport interface IFileDeleteOptions {\n\n\t/**\n\t * Set to `true` to recursively delete any children of the file. This\n\t * only applies to folders and can lead to an error unless provided\n\t * if the folder is not empty.\n\t */\n\treadonly recursive: boolean;\n\n\t/**\n\t * Set to `true` to attempt to move the file to trash\n\t * instead of deleting it permanently from disk.\n\t *\n\t * This option maybe not be supported on all providers.\n\t */\n\treadonly useTrash: boolean;\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `delete` method deletes the target atomically by\n\t * first renaming it to a temporary resource in the same\n\t * folder and then deleting it.\n\t *\n\t * This option maybe not be supported on all providers.\n\t */\n\treadonly atomic: IFileAtomicOptions | false;\n}\n\nexport enum FileType {\n\n\t/**\n\t * File is unknown (neither file, directory nor symbolic link).\n\t */\n\tUnknown = 0,\n\n\t/**\n\t * File is a normal file.\n\t */\n\tFile = 1,\n\n\t/**\n\t * File is a directory.\n\t */\n\tDirectory = 2,\n\n\t/**\n\t * File is a symbolic link.\n\t *\n\t * Note: even when the file is a symbolic link, you can test for\n\t * `FileType.File` and `FileType.Directory` to know the type of\n\t * the target the link points to.\n\t */\n\tSymbolicLink = 64\n}\n\nexport enum FilePermission {\n\n\t/**\n\t * File is readonly. Components like editors should not\n\t * offer to edit the contents.\n\t */\n\tReadonly = 1,\n\n\t/**\n\t * File is locked. Components like editors should offer\n\t * to edit the contents and ask the user upon saving to\n\t * remove the lock.\n\t */\n\tLocked = 2\n}\n\nexport interface IStat {\n\n\t/**\n\t * The file type.\n\t */\n\treadonly type: FileType;\n\n\t/**\n\t * The last modification date represented as millis from unix epoch.\n\t */\n\treadonly mtime: number;\n\n\t/**\n\t * The creation date represented as millis from unix epoch.\n\t */\n\treadonly ctime: number;\n\n\t/**\n\t * The size of the file in bytes.\n\t */\n\treadonly size: number;\n\n\t/**\n\t * The file permissions.\n\t */\n\treadonly permissions?: FilePermission;\n}\n\nexport interface IWatchOptionsWithoutCorrelation {\n\n\t/**\n\t * Set to `true` to watch for changes recursively in a folder\n\t * and all of its children.\n\t */\n\trecursive: boolean;\n\n\t/**\n\t * A set of glob patterns or paths to exclude from watching.\n\t * Paths can be relative or absolute and when relative are\n\t * resolved against the watched folder. Glob patterns are\n\t * always matched relative to the watched folder.\n\t */\n\texcludes: string[];\n\n\t/**\n\t * An optional set of glob patterns or paths to include for\n\t * watching. If not provided, all paths are considered for\n\t * events.\n\t * Paths can be relative or absolute and when relative are\n\t * resolved against the watched folder. Glob patterns are\n\t * always matched relative to the watched folder.\n\t */\n\tincludes?: Array<string | IRelativePattern>;\n\n\t/**\n\t * If provided, allows to filter the events that the watcher should consider\n\t * for emitting. If not provided, all events are emitted.\n\t *\n\t * For example, to emit added and updated events, set to:\n\t * `FileChangeFilter.ADDED | FileChangeFilter.UPDATED`.\n\t */\n\tfilter?: FileChangeFilter;\n}\n\nexport interface IWatchOptions extends IWatchOptionsWithoutCorrelation {\n\n\t/**\n\t * If provided, file change events from the watcher that\n\t * are a result of this watch request will carry the same\n\t * id.\n\t */\n\treadonly correlationId?: number;\n}\n\nexport const enum FileChangeFilter {\n\tUPDATED = 1 << 1,\n\tADDED = 1 << 2,\n\tDELETED = 1 << 3\n}\n\nexport interface IWatchOptionsWithCorrelation extends IWatchOptions {\n\treadonly correlationId: number;\n}\n\nexport interface IFileSystemWatcher extends IDisposable {\n\n\t/**\n\t * An event which fires on file/folder change only for changes\n\t * that correlate to the watch request with matching correlation\n\t * identifier.\n\t */\n\treadonly onDidChange: Event<FileChangesEvent>;\n}\n\nexport function isFileSystemWatcher(thing: unknown): thing is IFileSystemWatcher {\n\tconst candidate = thing as IFileSystemWatcher | undefined;\n\n\treturn !!candidate && typeof candidate.onDidChange === 'function';\n}\n\nexport const enum FileSystemProviderCapabilities {\n\n\t/**\n\t * No capabilities.\n\t */\n\tNone = 0,\n\n\t/**\n\t * Provider supports unbuffered read/write.\n\t */\n\tFileReadWrite = 1 << 1,\n\n\t/**\n\t * Provider supports open/read/write/close low level file operations.\n\t */\n\tFileOpenReadWriteClose = 1 << 2,\n\n\t/**\n\t * Provider supports stream based reading.\n\t */\n\tFileReadStream = 1 << 4,\n\n\t/**\n\t * Provider supports copy operation.\n\t */\n\tFileFolderCopy = 1 << 3,\n\n\t/**\n\t * Provider is path case sensitive.\n\t */\n\tPathCaseSensitive = 1 << 10,\n\n\t/**\n\t * All files of the provider are readonly.\n\t */\n\tReadonly = 1 << 11,\n\n\t/**\n\t * Provider supports to delete via trash.\n\t */\n\tTrash = 1 << 12,\n\n\t/**\n\t * Provider support to unlock files for writing.\n\t */\n\tFileWriteUnlock = 1 << 13,\n\n\t/**\n\t * Provider support to read files atomically. This implies the\n\t * provider provides the `FileReadWrite` capability too.\n\t */\n\tFileAtomicRead = 1 << 14,\n\n\t/**\n\t * Provider support to write files atomically. This implies the\n\t * provider provides the `FileReadWrite` capability too.\n\t */\n\tFileAtomicWrite = 1 << 15,\n\n\t/**\n\t * Provider support to delete atomically.\n\t */\n\tFileAtomicDelete = 1 << 16,\n\n\t/**\n\t * Provider support to clone files atomically.\n\t */\n\tFileClone = 1 << 17\n}\n\nexport interface IFileSystemProvider {\n\n\treadonly capabilities: FileSystemProviderCapabilities;\n\treadonly onDidChangeCapabilities: Event<void>;\n\n\treadonly onDidChangeFile: Event<readonly IFileChange[]>;\n\treadonly onDidWatchError?: Event<string>;\n\twatch(resource: URI, opts: IWatchOptions): IDisposable;\n\n\tstat(resource: URI): Promise<IStat>;\n\tmkdir(resource: URI): Promise<void>;\n\treaddir(resource: URI): Promise<[string, FileType][]>;\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void>;\n\n\trename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void>;\n\tcopy?(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void>;\n\n\treadFile?(resource: URI): Promise<Uint8Array>;\n\twriteFile?(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void>;\n\n\treadFileStream?(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array>;\n\n\topen?(resource: URI, opts: IFileOpenOptions): Promise<number>;\n\tclose?(fd: number): Promise<void>;\n\tread?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n\twrite?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n\n\tcloneFile?(from: URI, to: URI): Promise<void>;\n}\n\nexport interface IFileSystemProviderWithFileReadWriteCapability extends IFileSystemProvider {\n\treadFile(resource: URI): Promise<Uint8Array>;\n\twriteFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void>;\n}\n\nexport function hasReadWriteCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileReadWriteCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileReadWrite);\n}\n\nexport interface IFileSystemProviderWithFileFolderCopyCapability extends IFileSystemProvider {\n\tcopy(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void>;\n}\n\nexport function hasFileFolderCopyCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileFolderCopyCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileFolderCopy);\n}\n\nexport interface IFileSystemProviderWithFileCloneCapability extends IFileSystemProvider {\n\tcloneFile(from: URI, to: URI): Promise<void>;\n}\n\nexport function hasFileCloneCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileCloneCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileClone);\n}\n\nexport interface IFileSystemProviderWithOpenReadWriteCloseCapability extends IFileSystemProvider {\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number>;\n\tclose(fd: number): Promise<void>;\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n}\n\nexport function hasOpenReadWriteCloseCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithOpenReadWriteCloseCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileOpenReadWriteClose);\n}\n\nexport interface IFileSystemProviderWithFileReadStreamCapability extends IFileSystemProvider {\n\treadFileStream(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array>;\n}\n\nexport function hasFileReadStreamCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileReadStreamCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileReadStream);\n}\n\nexport interface IFileSystemProviderWithFileAtomicReadCapability extends IFileSystemProvider {\n\treadFile(resource: URI, opts?: IFileAtomicReadOptions): Promise<Uint8Array>;\n\tenforceAtomicReadFile?(resource: URI): boolean;\n}\n\nexport function hasFileAtomicReadCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileAtomicReadCapability {\n\tif (!hasReadWriteCapability(provider)) {\n\t\treturn false; // we require the `FileReadWrite` capability too\n\t}\n\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicRead);\n}\n\nexport interface IFileSystemProviderWithFileAtomicWriteCapability extends IFileSystemProvider {\n\twriteFile(resource: URI, contents: Uint8Array, opts?: IFileAtomicWriteOptions): Promise<void>;\n\tenforceAtomicWriteFile?(resource: URI): IFileAtomicOptions | false;\n}\n\nexport function hasFileAtomicWriteCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileAtomicWriteCapability {\n\tif (!hasReadWriteCapability(provider)) {\n\t\treturn false; // we require the `FileReadWrite` capability too\n\t}\n\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicWrite);\n}\n\nexport interface IFileSystemProviderWithFileAtomicDeleteCapability extends IFileSystemProvider {\n\tdelete(resource: URI, opts: IFileAtomicDeleteOptions): Promise<void>;\n\tenforceAtomicDelete?(resource: URI): IFileAtomicOptions | false;\n}\n\nexport function hasFileAtomicDeleteCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileAtomicDeleteCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicDelete);\n}\n\nexport interface IFileSystemProviderWithReadonlyCapability extends IFileSystemProvider {\n\n\treadonly capabilities: FileSystemProviderCapabilities.Readonly & FileSystemProviderCapabilities;\n\n\t/**\n\t * An optional message to show in the UI to explain why the file system is readonly.\n\t */\n\treadonly readOnlyMessage?: IMarkdownString;\n}\n\nexport function hasReadonlyCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithReadonlyCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.Readonly);\n}\n\nexport enum FileSystemProviderErrorCode {\n\tFileExists = 'EntryExists',\n\tFileNotFound = 'EntryNotFound',\n\tFileNotADirectory = 'EntryNotADirectory',\n\tFileIsADirectory = 'EntryIsADirectory',\n\tFileExceedsStorageQuota = 'EntryExceedsStorageQuota',\n\tFileTooLarge = 'EntryTooLarge',\n\tFileWriteLocked = 'EntryWriteLocked',\n\tNoPermissions = 'NoPermissions',\n\tUnavailable = 'Unavailable',\n\tUnknown = 'Unknown'\n}\n\nexport interface IFileSystemProviderError extends Error {\n\treadonly name: string;\n\treadonly code: FileSystemProviderErrorCode;\n}\n\nexport class FileSystemProviderError extends Error implements IFileSystemProviderError {\n\n\tstatic create(error: Error | string, code: FileSystemProviderErrorCode): FileSystemProviderError {\n\t\tconst providerError = new FileSystemProviderError(error.toString(), code);\n\t\tmarkAsFileSystemProviderError(providerError, code);\n\n\t\treturn providerError;\n\t}\n\n\tprivate constructor(message: string, readonly code: FileSystemProviderErrorCode) {\n\t\tsuper(message);\n\t}\n}\n\nexport function createFileSystemProviderError(error: Error | string, code: FileSystemProviderErrorCode): FileSystemProviderError {\n\treturn FileSystemProviderError.create(error, code);\n}\n\nexport function ensureFileSystemProviderError(error?: Error): Error {\n\tif (!error) {\n\t\treturn createFileSystemProviderError(localize('unknownError', \"Unknown Error\"), FileSystemProviderErrorCode.Unknown); // https://github.com/microsoft/vscode/issues/72798\n\t}\n\n\treturn error;\n}\n\nexport function markAsFileSystemProviderError(error: Error, code: FileSystemProviderErrorCode): Error {\n\terror.name = code ? `${code} (FileSystemError)` : `FileSystemError`;\n\n\treturn error;\n}\n\nexport function toFileSystemProviderErrorCode(error: Error | undefined | null): FileSystemProviderErrorCode {\n\n\t// Guard against abuse\n\tif (!error) {\n\t\treturn FileSystemProviderErrorCode.Unknown;\n\t}\n\n\t// FileSystemProviderError comes with the code\n\tif (error instanceof FileSystemProviderError) {\n\t\treturn error.code;\n\t}\n\n\t// Any other error, check for name match by assuming that the error\n\t// went through the markAsFileSystemProviderError() method\n\tconst match = /^(.+) \\(FileSystemError\\)$/.exec(error.name);\n\tif (!match) {\n\t\treturn FileSystemProviderErrorCode.Unknown;\n\t}\n\n\tswitch (match[1]) {\n\t\tcase FileSystemProviderErrorCode.FileExists: return FileSystemProviderErrorCode.FileExists;\n\t\tcase FileSystemProviderErrorCode.FileIsADirectory: return FileSystemProviderErrorCode.FileIsADirectory;\n\t\tcase FileSystemProviderErrorCode.FileNotADirectory: return FileSystemProviderErrorCode.FileNotADirectory;\n\t\tcase FileSystemProviderErrorCode.FileNotFound: return FileSystemProviderErrorCode.FileNotFound;\n\t\tcase FileSystemProviderErrorCode.FileTooLarge: return FileSystemProviderErrorCode.FileTooLarge;\n\t\tcase FileSystemProviderErrorCode.FileWriteLocked: return FileSystemProviderErrorCode.FileWriteLocked;\n\t\tcase FileSystemProviderErrorCode.NoPermissions: return FileSystemProviderErrorCode.NoPermissions;\n\t\tcase FileSystemProviderErrorCode.Unavailable: return FileSystemProviderErrorCode.Unavailable;\n\t}\n\n\treturn FileSystemProviderErrorCode.Unknown;\n}\n\nexport function toFileOperationResult(error: Error): FileOperationResult {\n\n\t// FileSystemProviderError comes with the result already\n\tif (error instanceof FileOperationError) {\n\t\treturn error.fileOperationResult;\n\t}\n\n\t// Otherwise try to find from code\n\tswitch (toFileSystemProviderErrorCode(error)) {\n\t\tcase FileSystemProviderErrorCode.FileNotFound:\n\t\t\treturn FileOperationResult.FILE_NOT_FOUND;\n\t\tcase FileSystemProviderErrorCode.FileIsADirectory:\n\t\t\treturn FileOperationResult.FILE_IS_DIRECTORY;\n\t\tcase FileSystemProviderErrorCode.FileNotADirectory:\n\t\t\treturn FileOperationResult.FILE_NOT_DIRECTORY;\n\t\tcase FileSystemProviderErrorCode.FileWriteLocked:\n\t\t\treturn FileOperationResult.FILE_WRITE_LOCKED;\n\t\tcase FileSystemProviderErrorCode.NoPermissions:\n\t\t\treturn FileOperationResult.FILE_PERMISSION_DENIED;\n\t\tcase FileSystemProviderErrorCode.FileExists:\n\t\t\treturn FileOperationResult.FILE_MOVE_CONFLICT;\n\t\tcase FileSystemProviderErrorCode.FileTooLarge:\n\t\t\treturn FileOperationResult.FILE_TOO_LARGE;\n\t\tdefault:\n\t\t\treturn FileOperationResult.FILE_OTHER_ERROR;\n\t}\n}\n\nexport interface IFileSystemProviderRegistrationEvent {\n\treadonly added: boolean;\n\treadonly scheme: string;\n\treadonly provider?: IFileSystemProvider;\n}\n\nexport interface IFileSystemProviderCapabilitiesChangeEvent {\n\treadonly provider: IFileSystemProvider;\n\treadonly scheme: string;\n}\n\nexport interface IFileSystemProviderActivationEvent {\n\treadonly scheme: string;\n\tjoin(promise: Promise<void>): void;\n}\n\nexport const enum FileOperation {\n\tCREATE,\n\tDELETE,\n\tMOVE,\n\tCOPY,\n\tWRITE\n}\n\nexport interface IFileOperationEvent {\n\n\treadonly resource: URI;\n\treadonly operation: FileOperation;\n\n\tisOperation(operation: FileOperation.DELETE | FileOperation.WRITE): boolean;\n\tisOperation(operation: FileOperation.CREATE | FileOperation.MOVE | FileOperation.COPY): this is IFileOperationEventWithMetadata;\n}\n\nexport interface IFileOperationEventWithMetadata extends IFileOperationEvent {\n\treadonly target: IFileStatWithMetadata;\n}\n\nexport class FileOperationEvent implements IFileOperationEvent {\n\n\tconstructor(resource: URI, operation: FileOperation.DELETE | FileOperation.WRITE);\n\tconstructor(resource: URI, operation: FileOperation.CREATE | FileOperation.MOVE | FileOperation.COPY, target: IFileStatWithMetadata);\n\tconstructor(readonly resource: URI, readonly operation: FileOperation, readonly target?: IFileStatWithMetadata) { }\n\n\tisOperation(operation: FileOperation.DELETE | FileOperation.WRITE): boolean;\n\tisOperation(operation: FileOperation.CREATE | FileOperation.MOVE | FileOperation.COPY): this is IFileOperationEventWithMetadata;\n\tisOperation(operation: FileOperation): boolean {\n\t\treturn this.operation === operation;\n\t}\n}\n\n/**\n * Possible changes that can occur to a file.\n */\nexport const enum FileChangeType {\n\tUPDATED,\n\tADDED,\n\tDELETED\n}\n\n/**\n * Identifies a single change in a file.\n */\nexport interface IFileChange {\n\n\t/**\n\t * The type of change that occurred to the file.\n\t */\n\ttype: FileChangeType;\n\n\t/**\n\t * The unified resource identifier of the file that changed.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * If provided when starting the file watcher, the correlation\n\t * identifier will match the original file watching request as\n\t * a way to identify the original component that is interested\n\t * in the change.\n\t */\n\treadonly cId?: number;\n}\n\nexport class FileChangesEvent {\n\n\tprivate static readonly MIXED_CORRELATION = null;\n\n\tprivate readonly correlationId: number | undefined | typeof FileChangesEvent.MIXED_CORRELATION = undefined;\n\n\tconstructor(changes: readonly IFileChange[], private readonly ignorePathCasing: boolean) {\n\t\tfor (const change of changes) {\n\n\t\t\t// Split by type\n\t\t\tswitch (change.type) {\n\t\t\t\tcase FileChangeType.ADDED:\n\t\t\t\t\tthis.rawAdded.push(change.resource);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileChangeType.UPDATED:\n\t\t\t\t\tthis.rawUpdated.push(change.resource);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileChangeType.DELETED:\n\t\t\t\t\tthis.rawDeleted.push(change.resource);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Figure out events correlation\n\t\t\tif (this.correlationId !== FileChangesEvent.MIXED_CORRELATION) {\n\t\t\t\tif (typeof change.cId === 'number') {\n\t\t\t\t\tif (this.correlationId === undefined) {\n\t\t\t\t\t\tthis.correlationId = change.cId; \t\t\t\t\t\t\t// correlation not yet set, just take it\n\t\t\t\t\t} else if (this.correlationId !== change.cId) {\n\t\t\t\t\t\tthis.correlationId = FileChangesEvent.MIXED_CORRELATION;\t// correlation mismatch, we have mixed correlation\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.correlationId !== undefined) {\n\t\t\t\t\t\tthis.correlationId = FileChangesEvent.MIXED_CORRELATION;\t// correlation mismatch, we have mixed correlation\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate readonly added = new Lazy(() => {\n\t\tconst added = TernarySearchTree.forUris<boolean>(() => this.ignorePathCasing);\n\t\tadded.fill(this.rawAdded.map(resource => [resource, true]));\n\n\t\treturn added;\n\t});\n\n\tprivate readonly updated = new Lazy(() => {\n\t\tconst updated = TernarySearchTree.forUris<boolean>(() => this.ignorePathCasing);\n\t\tupdated.fill(this.rawUpdated.map(resource => [resource, true]));\n\n\t\treturn updated;\n\t});\n\n\tprivate readonly deleted = new Lazy(() => {\n\t\tconst deleted = TernarySearchTree.forUris<boolean>(() => this.ignorePathCasing);\n\t\tdeleted.fill(this.rawDeleted.map(resource => [resource, true]));\n\n\t\treturn deleted;\n\t});\n\n\t/**\n\t * Find out if the file change events match the provided resource.\n\t *\n\t * Note: when passing `FileChangeType.DELETED`, we consider a match\n\t * also when the parent of the resource got deleted.\n\t */\n\tcontains(resource: URI, ...types: FileChangeType[]): boolean {\n\t\treturn this.doContains(resource, { includeChildren: false }, ...types);\n\t}\n\n\t/**\n\t * Find out if the file change events either match the provided\n\t * resource, or contain a child of this resource.\n\t */\n\taffects(resource: URI, ...types: FileChangeType[]): boolean {\n\t\treturn this.doContains(resource, { includeChildren: true }, ...types);\n\t}\n\n\tprivate doContains(resource: URI, options: { includeChildren: boolean }, ...types: FileChangeType[]): boolean {\n\t\tif (!resource) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hasTypesFilter = types.length > 0;\n\n\t\t// Added\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.ADDED)) {\n\t\t\tif (this.added.value.get(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.added.value.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Updated\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.UPDATED)) {\n\t\t\tif (this.updated.value.get(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.updated.value.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Deleted\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.DELETED)) {\n\t\t\tif (this.deleted.value.findSubstr(resource) /* deleted also considers parent folders */) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.deleted.value.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if this event contains added files.\n\t */\n\tgotAdded(): boolean {\n\t\treturn this.rawAdded.length > 0;\n\t}\n\n\t/**\n\t * Returns if this event contains deleted files.\n\t */\n\tgotDeleted(): boolean {\n\t\treturn this.rawDeleted.length > 0;\n\t}\n\n\t/**\n\t * Returns if this event contains updated files.\n\t */\n\tgotUpdated(): boolean {\n\t\treturn this.rawUpdated.length > 0;\n\t}\n\n\t/**\n\t * Returns if this event contains changes that correlate to the\n\t * provided `correlationId`.\n\t *\n\t * File change event correlation is an advanced watch feature that\n\t * allows to  identify from which watch request the events originate\n\t * from. This correlation allows to route events specifically\n\t * only to the requestor and not emit them to all listeners.\n\t */\n\tcorrelates(correlationId: number): boolean {\n\t\treturn this.correlationId === correlationId;\n\t}\n\n\t/**\n\t * Figure out if the event contains changes that correlate to one\n\t * correlation identifier.\n\t *\n\t * File change event correlation is an advanced watch feature that\n\t * allows to  identify from which watch request the events originate\n\t * from. This correlation allows to route events specifically\n\t * only to the requestor and not emit them to all listeners.\n\t */\n\thasCorrelation(): boolean {\n\t\treturn typeof this.correlationId === 'number';\n\t}\n\n\t/**\n\t * @deprecated use the `contains` or `affects` method to efficiently find\n\t * out if the event relates to a given resource. these methods ensure:\n\t * - that there is no expensive lookup needed (by using a `TernarySearchTree`)\n\t * - correctly handles `FileChangeType.DELETED` events\n\t */\n\treadonly rawAdded: URI[] = [];\n\n\t/**\n\t* @deprecated use the `contains` or `affects` method to efficiently find\n\t* out if the event relates to a given resource. these methods ensure:\n\t* - that there is no expensive lookup needed (by using a `TernarySearchTree`)\n\t* - correctly handles `FileChangeType.DELETED` events\n\t*/\n\treadonly rawUpdated: URI[] = [];\n\n\t/**\n\t* @deprecated use the `contains` or `affects` method to efficiently find\n\t* out if the event relates to a given resource. these methods ensure:\n\t* - that there is no expensive lookup needed (by using a `TernarySearchTree`)\n\t* - correctly handles `FileChangeType.DELETED` events\n\t*/\n\treadonly rawDeleted: URI[] = [];\n}\n\nexport function isParent(path: string, candidate: string, ignoreCase?: boolean): boolean {\n\tif (!path || !candidate || path === candidate) {\n\t\treturn false;\n\t}\n\n\tif (candidate.length > path.length) {\n\t\treturn false;\n\t}\n\n\tif (candidate.charAt(candidate.length - 1) !== sep) {\n\t\tcandidate += sep;\n\t}\n\n\tif (ignoreCase) {\n\t\treturn startsWithIgnoreCase(path, candidate);\n\t}\n\n\treturn path.indexOf(candidate) === 0;\n}\n\nexport interface IBaseFileStat {\n\n\t/**\n\t * The unified resource identifier of this file or folder.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * The name which is the last segment\n\t * of the {{path}}.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The size of the file.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly size?: number;\n\n\t/**\n\t * The last modification date represented as millis from unix epoch.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly mtime?: number;\n\n\t/**\n\t * The creation date represented as millis from unix epoch.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly ctime?: number;\n\n\t/**\n\t * A unique identifier that represents the\n\t * current state of the file or directory.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly etag?: string;\n\n\t/**\n\t * File is readonly. Components like editors should not\n\t * offer to edit the contents.\n\t */\n\treadonly readonly?: boolean;\n\n\t/**\n\t * File is locked. Components like editors should offer\n\t * to edit the contents and ask the user upon saving to\n\t * remove the lock.\n\t */\n\treadonly locked?: boolean;\n}\n\nexport interface IBaseFileStatWithMetadata extends Required<IBaseFileStat> { }\n\n/**\n * A file resource with meta information and resolved children if any.\n */\nexport interface IFileStat extends IBaseFileStat {\n\n\t/**\n\t * The resource is a file.\n\t */\n\treadonly isFile: boolean;\n\n\t/**\n\t * The resource is a directory.\n\t */\n\treadonly isDirectory: boolean;\n\n\t/**\n\t * The resource is a symbolic link. Note: even when the\n\t * file is a symbolic link, you can test for `FileType.File`\n\t * and `FileType.Directory` to know the type of the target\n\t * the link points to.\n\t */\n\treadonly isSymbolicLink: boolean;\n\n\t/**\n\t * The children of the file stat or undefined if none.\n\t */\n\tchildren: IFileStat[] | undefined;\n}\n\nexport interface IFileStatWithMetadata extends IFileStat, IBaseFileStatWithMetadata {\n\treadonly mtime: number;\n\treadonly ctime: number;\n\treadonly etag: string;\n\treadonly size: number;\n\treadonly readonly: boolean;\n\treadonly locked: boolean;\n\treadonly children: IFileStatWithMetadata[] | undefined;\n}\n\nexport interface IFileStatResult {\n\treadonly stat?: IFileStat;\n\treadonly success: boolean;\n}\n\nexport interface IFileStatResultWithMetadata extends IFileStatResult {\n\treadonly stat?: IFileStatWithMetadata;\n}\n\nexport interface IFileStatWithPartialMetadata extends Omit<IFileStatWithMetadata, 'children'> { }\n\nexport interface IFileContent extends IBaseFileStatWithMetadata {\n\n\t/**\n\t * The content of a file as buffer.\n\t */\n\treadonly value: VSBuffer;\n}\n\nexport interface IFileStreamContent extends IBaseFileStatWithMetadata {\n\n\t/**\n\t * The content of a file as stream.\n\t */\n\treadonly value: VSBufferReadableStream;\n}\n\nexport interface IBaseReadFileOptions extends IFileReadStreamOptions {\n\n\t/**\n\t * The optional etag parameter allows to return early from resolving the resource if\n\t * the contents on disk match the etag. This prevents accumulated reading of resources\n\t * that have been read already with the same etag.\n\t * It is the task of the caller to makes sure to handle this error case from the promise.\n\t */\n\treadonly etag?: string;\n}\n\nexport interface IReadFileStreamOptions extends IBaseReadFileOptions { }\n\nexport interface IReadFileOptions extends IBaseReadFileOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `readFile` method is not running in parallel with\n\t * any `write` operations in the same process.\n\t *\n\t * Typically you should not need to use this flag but if\n\t * for example you are quickly reading a file right after\n\t * a file event occurred and the file changes a lot, there\n\t * is a chance that a read returns an empty or partial file\n\t * because a pending write has not finished yet.\n\t *\n\t * Note: this does not prevent the file from being written\n\t * to from a different process. If you need such atomic\n\t * operations, you better use a real database as storage.\n\t */\n\treadonly atomic?: boolean;\n}\n\nexport interface IWriteFileOptions {\n\n\t/**\n\t * The last known modification time of the file. This can be used to prevent dirty writes.\n\t */\n\treadonly mtime?: number;\n\n\t/**\n\t * The etag of the file. This can be used to prevent dirty writes.\n\t */\n\treadonly etag?: string;\n\n\t/**\n\t * Whether to attempt to unlock a file before writing.\n\t */\n\treadonly unlock?: boolean;\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `writeFile` method updates the target file atomically\n\t * by first writing to a temporary file in the same folder\n\t * and then renaming it over the target.\n\t */\n\treadonly atomic?: IFileAtomicOptions | false;\n}\n\nexport interface IResolveFileOptions {\n\n\t/**\n\t * Automatically continue resolving children of a directory until the provided resources\n\t * are found.\n\t */\n\treadonly resolveTo?: readonly URI[];\n\n\t/**\n\t * Automatically continue resolving children of a directory if the number of children is 1.\n\t */\n\treadonly resolveSingleChildDescendants?: boolean;\n\n\t/**\n\t * Will resolve mtime, ctime, size and etag of files if enabled. This can have a negative impact\n\t * on performance and thus should only be used when these values are required.\n\t */\n\treadonly resolveMetadata?: boolean;\n}\n\nexport interface IResolveMetadataFileOptions extends IResolveFileOptions {\n\treadonly resolveMetadata: true;\n}\n\nexport interface ICreateFileOptions {\n\n\t/**\n\t * Overwrite the file to create if it already exists on disk. Otherwise\n\t * an error will be thrown (FILE_MODIFIED_SINCE).\n\t */\n\treadonly overwrite?: boolean;\n}\n\nexport class FileOperationError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\treadonly fileOperationResult: FileOperationResult,\n\t\treadonly options?: IReadFileOptions | IWriteFileOptions | ICreateFileOptions\n\t) {\n\t\tsuper(message);\n\t}\n}\n\nexport class TooLargeFileOperationError extends FileOperationError {\n\tconstructor(\n\t\tmessage: string,\n\t\toverride readonly fileOperationResult: FileOperationResult.FILE_TOO_LARGE,\n\t\treadonly size: number,\n\t\toptions?: IReadFileOptions\n\t) {\n\t\tsuper(message, fileOperationResult, options);\n\t}\n}\n\nexport class NotModifiedSinceFileOperationError extends FileOperationError {\n\n\tconstructor(\n\t\tmessage: string,\n\t\treadonly stat: IFileStatWithMetadata,\n\t\toptions?: IReadFileOptions\n\t) {\n\t\tsuper(message, FileOperationResult.FILE_NOT_MODIFIED_SINCE, options);\n\t}\n}\n\nexport const enum FileOperationResult {\n\tFILE_IS_DIRECTORY,\n\tFILE_NOT_FOUND,\n\tFILE_NOT_MODIFIED_SINCE,\n\tFILE_MODIFIED_SINCE,\n\tFILE_MOVE_CONFLICT,\n\tFILE_WRITE_LOCKED,\n\tFILE_PERMISSION_DENIED,\n\tFILE_TOO_LARGE,\n\tFILE_INVALID_PATH,\n\tFILE_NOT_DIRECTORY,\n\tFILE_OTHER_ERROR\n}\n\n//#endregion\n\n//#region Settings\n\nexport const AutoSaveConfiguration = {\n\tOFF: 'off',\n\tAFTER_DELAY: 'afterDelay',\n\tON_FOCUS_CHANGE: 'onFocusChange',\n\tON_WINDOW_CHANGE: 'onWindowChange'\n};\n\nexport const HotExitConfiguration = {\n\tOFF: 'off',\n\tON_EXIT: 'onExit',\n\tON_EXIT_AND_WINDOW_CLOSE: 'onExitAndWindowClose'\n};\n\nexport const FILES_ASSOCIATIONS_CONFIG = 'files.associations';\nexport const FILES_EXCLUDE_CONFIG = 'files.exclude';\nexport const FILES_READONLY_INCLUDE_CONFIG = 'files.readonlyInclude';\nexport const FILES_READONLY_EXCLUDE_CONFIG = 'files.readonlyExclude';\nexport const FILES_READONLY_FROM_PERMISSIONS_CONFIG = 'files.readonlyFromPermissions';\n\nexport interface IGlobPatterns {\n\t[filepattern: string]: boolean;\n}\n\nexport interface IFilesConfiguration {\n\tfiles?: IFilesConfigurationNode;\n}\n\nexport interface IFilesConfigurationNode {\n\tassociations: { [filepattern: string]: string };\n\texclude: IExpression;\n\twatcherExclude: IGlobPatterns;\n\twatcherInclude: string[];\n\tencoding: string;\n\tautoGuessEncoding: boolean;\n\tcandidateGuessEncodings: string[];\n\tdefaultLanguage: string;\n\ttrimTrailingWhitespace: boolean;\n\tautoSave: string;\n\tautoSaveDelay: number;\n\tautoSaveWorkspaceFilesOnly: boolean;\n\tautoSaveWhenNoErrors: boolean;\n\teol: string;\n\tenableTrash: boolean;\n\thotExit: string;\n\tsaveConflictResolution: 'askUser' | 'overwriteFileOnDisk';\n\treadonlyInclude: IGlobPatterns;\n\treadonlyExclude: IGlobPatterns;\n\treadonlyFromPermissions: boolean;\n}\n\n//#endregion\n\n//#region Utilities\n\nexport enum FileKind {\n\tFILE,\n\tFOLDER,\n\tROOT_FOLDER\n}\n\n/**\n * A hint to disable etag checking for reading/writing.\n */\nexport const ETAG_DISABLED = '';\n\nexport function etag(stat: { mtime: number; size: number }): string;\nexport function etag(stat: { mtime: number | undefined; size: number | undefined }): string | undefined;\nexport function etag(stat: { mtime: number | undefined; size: number | undefined }): string | undefined {\n\tif (typeof stat.size !== 'number' || typeof stat.mtime !== 'number') {\n\t\treturn undefined;\n\t}\n\n\treturn stat.mtime.toString(29) + stat.size.toString(31);\n}\n\nexport async function whenProviderRegistered(file: URI, fileService: IFileService): Promise<void> {\n\tif (fileService.hasProvider(URI.from({ scheme: file.scheme }))) {\n\t\treturn;\n\t}\n\n\treturn new Promise(resolve => {\n\t\tconst disposable = fileService.onDidChangeFileSystemProviderRegistrations(e => {\n\t\t\tif (e.scheme === file.scheme && e.added) {\n\t\t\t\tdisposable.dispose();\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Helper to format a raw byte size into a human readable label.\n */\nexport class ByteSize {\n\n\tstatic readonly KB = 1024;\n\tstatic readonly MB = ByteSize.KB * ByteSize.KB;\n\tstatic readonly GB = ByteSize.MB * ByteSize.KB;\n\tstatic readonly TB = ByteSize.GB * ByteSize.KB;\n\n\tstatic formatSize(size: number): string {\n\t\tif (!isNumber(size)) {\n\t\t\tsize = 0;\n\t\t}\n\n\t\tif (size < ByteSize.KB) {\n\t\t\treturn localize('sizeB', \"{0}B\", size.toFixed(0));\n\t\t}\n\n\t\tif (size < ByteSize.MB) {\n\t\t\treturn localize('sizeKB', \"{0}KB\", (size / ByteSize.KB).toFixed(2));\n\t\t}\n\n\t\tif (size < ByteSize.GB) {\n\t\t\treturn localize('sizeMB', \"{0}MB\", (size / ByteSize.MB).toFixed(2));\n\t\t}\n\n\t\tif (size < ByteSize.TB) {\n\t\t\treturn localize('sizeGB', \"{0}GB\", (size / ByteSize.GB).toFixed(2));\n\t\t}\n\n\t\treturn localize('sizeTB', \"{0}TB\", (size / ByteSize.TB).toFixed(2));\n\t}\n}\n\n// File limits\n\nexport function getLargeFileConfirmationLimit(remoteAuthority?: string): number;\nexport function getLargeFileConfirmationLimit(uri?: URI): number;\nexport function getLargeFileConfirmationLimit(arg?: string | URI): number {\n\tconst isRemote = typeof arg === 'string' || arg?.scheme === Schemas.vscodeRemote;\n\tconst isLocal = typeof arg !== 'string' && arg?.scheme === Schemas.file;\n\n\tif (isLocal) {\n\t\t// Local almost has no limit in file size\n\t\treturn 1024 * ByteSize.MB;\n\t}\n\n\tif (isRemote) {\n\t\t// With a remote, pick a low limit to avoid\n\t\t// potentially costly file transfers\n\t\treturn 10 * ByteSize.MB;\n\t}\n\n\tif (isWeb) {\n\t\t// Web: we cannot know for sure if a cost\n\t\t// is associated with the file transfer\n\t\t// so we pick a reasonably small limit\n\t\treturn 50 * ByteSize.MB;\n\t}\n\n\t// Local desktop: almost no limit in file size\n\treturn 1024 * ByteSize.MB;\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["FileType", "FilePermission", "FileChangeFilter", "FileSystemProviderCapabilities", "FileSystemProviderErrorCode", "FileOperation", "FileChangeType", "FileOperationResult", "FileKind"]
}
