{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/test/node/nodejsWatcher.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport assert from 'assert';\nimport { tmpdir } from 'os';\nimport { basename, dirname, join } from '../../../../base/common/path.js';\nimport { Promises, RimRafMode } from '../../../../base/node/pfs.js';\nimport { getRandomTestPath } from '../../../../base/test/node/testUtils.js';\nimport { FileChangeFilter, FileChangeType } from '../../common/files.js';\nimport { INonRecursiveWatchRequest, IRecursiveWatcherWithSubscribe } from '../../common/watcher.js';\nimport { watchFileContents } from '../../node/watcher/nodejs/nodejsWatcherLib.js';\nimport { isLinux, isMacintosh, isWindows } from '../../../../base/common/platform.js';\nimport { getDriveLetter } from '../../../../base/common/extpath.js';\nimport { ltrim } from '../../../../base/common/strings.js';\nimport { DeferredPromise, timeout } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { NodeJSWatcher } from '../../node/watcher/nodejs/nodejsWatcher.js';\nimport { FileAccess } from '../../../../base/common/network.js';\nimport { extUriBiasedIgnorePathCase } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { addUNCHostToAllowlist } from '../../../../base/node/unc.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { TestParcelWatcher } from './parcelWatcher.integrationTest.js';\n\n// this suite has shown flaky runs in Azure pipelines where\n// tasks would just hang and timeout after a while (not in\n// mocha but generally). as such they will run only on demand\n// whenever we update the watcher library.\n\nsuite.skip('File Watcher (node.js)', () => {\n\n\tclass TestNodeJSWatcher extends NodeJSWatcher {\n\n\t\tprotected override readonly suspendedWatchRequestPollingInterval = 100;\n\n\t\tprivate readonly _onDidWatch = this._register(new Emitter<void>());\n\t\treadonly onDidWatch = this._onDidWatch.event;\n\n\t\treadonly onWatchFail = this._onDidWatchFail.event;\n\n\t\tprotected override getUpdateWatchersDelay(): number {\n\t\t\treturn 0;\n\t\t}\n\n\t\tprotected override async doWatch(requests: INonRecursiveWatchRequest[]): Promise<void> {\n\t\t\tawait super.doWatch(requests);\n\t\t\tfor (const watcher of this.watchers) {\n\t\t\t\tawait watcher.instance.ready;\n\t\t\t}\n\n\t\t\tthis._onDidWatch.fire();\n\t\t}\n\t}\n\n\tlet testDir: string;\n\tlet watcher: TestNodeJSWatcher;\n\n\tlet loggingEnabled = false;\n\n\tfunction enableLogging(enable: boolean) {\n\t\tloggingEnabled = enable;\n\t\twatcher?.setVerboseLogging(enable);\n\t}\n\n\tenableLogging(false);\n\n\tsetup(async () => {\n\t\tawait createWatcher(undefined);\n\n\t\ttestDir = URI.file(getRandomTestPath(tmpdir(), 'vsctests', 'filewatcher')).fsPath;\n\n\t\tconst sourceDir = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/service').fsPath;\n\n\t\tawait Promises.copy(sourceDir, testDir, { preserveSymlinks: false });\n\t});\n\n\tasync function createWatcher(accessor: IRecursiveWatcherWithSubscribe | undefined) {\n\t\tawait watcher?.stop();\n\t\twatcher?.dispose();\n\n\t\twatcher = new TestNodeJSWatcher(accessor);\n\t\twatcher?.setVerboseLogging(loggingEnabled);\n\n\t\twatcher.onDidLogMessage(e => {\n\t\t\tif (loggingEnabled) {\n\t\t\t\tconsole.log(`[non-recursive watcher test message] ${e.message}`);\n\t\t\t}\n\t\t});\n\n\t\twatcher.onDidError(e => {\n\t\t\tif (loggingEnabled) {\n\t\t\t\tconsole.log(`[non-recursive watcher test error] ${e}`);\n\t\t\t}\n\t\t});\n\t}\n\n\tteardown(async () => {\n\t\tawait watcher.stop();\n\t\twatcher.dispose();\n\n\t\t// Possible that the file watcher is still holding\n\t\t// onto the folders on Windows specifically and the\n\t\t// unlink would fail. In that case, do not fail the\n\t\t// test suite.\n\t\treturn Promises.rm(testDir).catch(error => console.error(error));\n\t});\n\n\tfunction toMsg(type: FileChangeType): string {\n\t\tswitch (type) {\n\t\t\tcase FileChangeType.ADDED: return 'added';\n\t\t\tcase FileChangeType.DELETED: return 'deleted';\n\t\t\tdefault: return 'changed';\n\t\t}\n\t}\n\n\tasync function awaitEvent(service: TestNodeJSWatcher, path: string, type: FileChangeType, correlationId?: number | null, expectedCount?: number): Promise<void> {\n\t\tif (loggingEnabled) {\n\t\t\tconsole.log(`Awaiting change type '${toMsg(type)}' on file '${path}'`);\n\t\t}\n\n\t\t// Await the event\n\t\tawait new Promise<void>(resolve => {\n\t\t\tlet counter = 0;\n\t\t\tconst disposable = service.onDidChangeFile(events => {\n\t\t\t\tfor (const event of events) {\n\t\t\t\t\tif (extUriBiasedIgnorePathCase.isEqual(event.resource, URI.file(path)) && event.type === type && (correlationId === null || event.cId === correlationId)) {\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tif (typeof expectedCount === 'number' && counter < expectedCount) {\n\t\t\t\t\t\t\tcontinue; // not yet\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\ttest('basics (folder watch)', async function () {\n\t\tconst request = { path: testDir, excludes: [], recursive: false };\n\t\tawait watcher.watch([request]);\n\t\tassert.strictEqual(watcher.isSuspended(request), false);\n\n\t\tconst instance = Array.from(watcher.watchers)[0].instance;\n\t\tassert.strictEqual(instance.isReusingRecursiveWatcher, false);\n\t\tassert.strictEqual(instance.failed, false);\n\n\t\t// New file\n\t\tconst newFilePath = join(testDir, 'newFile.txt');\n\t\tlet changeFuture: Promise<unknown> = awaitEvent(watcher, newFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(newFilePath, 'Hello World');\n\t\tawait changeFuture;\n\n\t\t// New folder\n\t\tconst newFolderPath = join(testDir, 'New Folder');\n\t\tchangeFuture = awaitEvent(watcher, newFolderPath, FileChangeType.ADDED);\n\t\tawait fs.promises.mkdir(newFolderPath);\n\t\tawait changeFuture;\n\n\t\t// Rename file\n\t\tlet renamedFilePath = join(testDir, 'renamedFile.txt');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, newFilePath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, renamedFilePath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(newFilePath, renamedFilePath);\n\t\tawait changeFuture;\n\n\t\t// Rename folder\n\t\tlet renamedFolderPath = join(testDir, 'Renamed Folder');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, newFolderPath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, renamedFolderPath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(newFolderPath, renamedFolderPath);\n\t\tawait changeFuture;\n\n\t\t// Rename file (same name, different case)\n\t\tconst caseRenamedFilePath = join(testDir, 'RenamedFile.txt');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, renamedFilePath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, caseRenamedFilePath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(renamedFilePath, caseRenamedFilePath);\n\t\tawait changeFuture;\n\t\trenamedFilePath = caseRenamedFilePath;\n\n\t\t// Rename folder (same name, different case)\n\t\tconst caseRenamedFolderPath = join(testDir, 'REnamed Folder');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, renamedFolderPath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, caseRenamedFolderPath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(renamedFolderPath, caseRenamedFolderPath);\n\t\tawait changeFuture;\n\t\trenamedFolderPath = caseRenamedFolderPath;\n\n\t\t// Move file\n\t\tconst movedFilepath = join(testDir, 'movedFile.txt');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, renamedFilePath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, movedFilepath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(renamedFilePath, movedFilepath);\n\t\tawait changeFuture;\n\n\t\t// Move folder\n\t\tconst movedFolderpath = join(testDir, 'Moved Folder');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, renamedFolderPath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, movedFolderpath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(renamedFolderPath, movedFolderpath);\n\t\tawait changeFuture;\n\n\t\t// Copy file\n\t\tconst copiedFilepath = join(testDir, 'copiedFile.txt');\n\t\tchangeFuture = awaitEvent(watcher, copiedFilepath, FileChangeType.ADDED);\n\t\tawait fs.promises.copyFile(movedFilepath, copiedFilepath);\n\t\tawait changeFuture;\n\n\t\t// Copy folder\n\t\tconst copiedFolderpath = join(testDir, 'Copied Folder');\n\t\tchangeFuture = awaitEvent(watcher, copiedFolderpath, FileChangeType.ADDED);\n\t\tawait Promises.copy(movedFolderpath, copiedFolderpath, { preserveSymlinks: false });\n\t\tawait changeFuture;\n\n\t\t// Change file\n\t\tchangeFuture = awaitEvent(watcher, copiedFilepath, FileChangeType.UPDATED);\n\t\tawait Promises.writeFile(copiedFilepath, 'Hello Change');\n\t\tawait changeFuture;\n\n\t\t// Create new file\n\t\tconst anotherNewFilePath = join(testDir, 'anotherNewFile.txt');\n\t\tchangeFuture = awaitEvent(watcher, anotherNewFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(anotherNewFilePath, 'Hello Another World');\n\t\tawait changeFuture;\n\n\t\t// Delete file\n\t\tchangeFuture = awaitEvent(watcher, copiedFilepath, FileChangeType.DELETED);\n\t\tawait fs.promises.unlink(copiedFilepath);\n\t\tawait changeFuture;\n\n\t\t// Delete folder\n\t\tchangeFuture = awaitEvent(watcher, copiedFolderpath, FileChangeType.DELETED);\n\t\tawait fs.promises.rmdir(copiedFolderpath);\n\t\tawait changeFuture;\n\n\t\twatcher.dispose();\n\t});\n\n\ttest('basics (file watch)', async function () {\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\t\tconst request = { path: filePath, excludes: [], recursive: false };\n\t\tawait watcher.watch([request]);\n\t\tassert.strictEqual(watcher.isSuspended(request), false);\n\n\t\tconst instance = Array.from(watcher.watchers)[0].instance;\n\t\tassert.strictEqual(instance.isReusingRecursiveWatcher, false);\n\t\tassert.strictEqual(instance.failed, false);\n\n\t\t// Change file\n\t\tlet changeFuture = awaitEvent(watcher, filePath, FileChangeType.UPDATED);\n\t\tawait Promises.writeFile(filePath, 'Hello Change');\n\t\tawait changeFuture;\n\n\t\t// Delete file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.DELETED);\n\t\tawait fs.promises.unlink(filePath);\n\t\tawait changeFuture;\n\n\t\t// Recreate watcher\n\t\tawait Promises.writeFile(filePath, 'Hello Change');\n\t\tawait watcher.watch([]);\n\t\tawait watcher.watch([{ path: filePath, excludes: [], recursive: false }]);\n\n\t\t// Move file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.DELETED);\n\t\tawait Promises.rename(filePath, `${filePath}-moved`);\n\t\tawait changeFuture;\n\t});\n\n\ttest('atomic writes (folder watch)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: false }]);\n\n\t\t// Delete + Recreate file\n\t\tconst newFilePath = join(testDir, 'lorem.txt');\n\t\tconst changeFuture: Promise<unknown> = awaitEvent(watcher, newFilePath, FileChangeType.UPDATED);\n\t\tawait fs.promises.unlink(newFilePath);\n\t\tPromises.writeFile(newFilePath, 'Hello Atomic World');\n\t\tawait changeFuture;\n\t});\n\n\ttest('atomic writes (file watch)', async function () {\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\t\tawait watcher.watch([{ path: filePath, excludes: [], recursive: false }]);\n\n\t\t// Delete + Recreate file\n\t\tconst newFilePath = join(filePath);\n\t\tconst changeFuture: Promise<unknown> = awaitEvent(watcher, newFilePath, FileChangeType.UPDATED);\n\t\tawait fs.promises.unlink(newFilePath);\n\t\tPromises.writeFile(newFilePath, 'Hello Atomic World');\n\t\tawait changeFuture;\n\t});\n\n\ttest('multiple events (folder watch)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: false }]);\n\n\t\t// multiple add\n\n\t\tconst newFilePath1 = join(testDir, 'newFile-1.txt');\n\t\tconst newFilePath2 = join(testDir, 'newFile-2.txt');\n\t\tconst newFilePath3 = join(testDir, 'newFile-3.txt');\n\n\t\tconst addedFuture1: Promise<unknown> = awaitEvent(watcher, newFilePath1, FileChangeType.ADDED);\n\t\tconst addedFuture2: Promise<unknown> = awaitEvent(watcher, newFilePath2, FileChangeType.ADDED);\n\t\tconst addedFuture3: Promise<unknown> = awaitEvent(watcher, newFilePath3, FileChangeType.ADDED);\n\n\t\tawait Promise.all([\n\t\t\tawait Promises.writeFile(newFilePath1, 'Hello World 1'),\n\t\t\tawait Promises.writeFile(newFilePath2, 'Hello World 2'),\n\t\t\tawait Promises.writeFile(newFilePath3, 'Hello World 3'),\n\t\t]);\n\n\t\tawait Promise.all([addedFuture1, addedFuture2, addedFuture3]);\n\n\t\t// multiple change\n\n\t\tconst changeFuture1: Promise<unknown> = awaitEvent(watcher, newFilePath1, FileChangeType.UPDATED);\n\t\tconst changeFuture2: Promise<unknown> = awaitEvent(watcher, newFilePath2, FileChangeType.UPDATED);\n\t\tconst changeFuture3: Promise<unknown> = awaitEvent(watcher, newFilePath3, FileChangeType.UPDATED);\n\n\t\tawait Promise.all([\n\t\t\tawait Promises.writeFile(newFilePath1, 'Hello Update 1'),\n\t\t\tawait Promises.writeFile(newFilePath2, 'Hello Update 2'),\n\t\t\tawait Promises.writeFile(newFilePath3, 'Hello Update 3'),\n\t\t]);\n\n\t\tawait Promise.all([changeFuture1, changeFuture2, changeFuture3]);\n\n\t\t// copy with multiple files\n\n\t\tconst copyFuture1: Promise<unknown> = awaitEvent(watcher, join(testDir, 'newFile-1-copy.txt'), FileChangeType.ADDED);\n\t\tconst copyFuture2: Promise<unknown> = awaitEvent(watcher, join(testDir, 'newFile-2-copy.txt'), FileChangeType.ADDED);\n\t\tconst copyFuture3: Promise<unknown> = awaitEvent(watcher, join(testDir, 'newFile-3-copy.txt'), FileChangeType.ADDED);\n\n\t\tawait Promise.all([\n\t\t\tPromises.copy(join(testDir, 'newFile-1.txt'), join(testDir, 'newFile-1-copy.txt'), { preserveSymlinks: false }),\n\t\t\tPromises.copy(join(testDir, 'newFile-2.txt'), join(testDir, 'newFile-2-copy.txt'), { preserveSymlinks: false }),\n\t\t\tPromises.copy(join(testDir, 'newFile-3.txt'), join(testDir, 'newFile-3-copy.txt'), { preserveSymlinks: false })\n\t\t]);\n\n\t\tawait Promise.all([copyFuture1, copyFuture2, copyFuture3]);\n\n\t\t// multiple delete\n\n\t\tconst deleteFuture1: Promise<unknown> = awaitEvent(watcher, newFilePath1, FileChangeType.DELETED);\n\t\tconst deleteFuture2: Promise<unknown> = awaitEvent(watcher, newFilePath2, FileChangeType.DELETED);\n\t\tconst deleteFuture3: Promise<unknown> = awaitEvent(watcher, newFilePath3, FileChangeType.DELETED);\n\n\t\tawait Promise.all([\n\t\t\tawait fs.promises.unlink(newFilePath1),\n\t\t\tawait fs.promises.unlink(newFilePath2),\n\t\t\tawait fs.promises.unlink(newFilePath3)\n\t\t]);\n\n\t\tawait Promise.all([deleteFuture1, deleteFuture2, deleteFuture3]);\n\t});\n\n\ttest('multiple events (file watch)', async function () {\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\t\tawait watcher.watch([{ path: filePath, excludes: [], recursive: false }]);\n\n\t\t// multiple change\n\n\t\tconst changeFuture1: Promise<unknown> = awaitEvent(watcher, filePath, FileChangeType.UPDATED);\n\n\t\tawait Promise.all([\n\t\t\tawait Promises.writeFile(filePath, 'Hello Update 1'),\n\t\t\tawait Promises.writeFile(filePath, 'Hello Update 2'),\n\t\t\tawait Promises.writeFile(filePath, 'Hello Update 3'),\n\t\t]);\n\n\t\tawait Promise.all([changeFuture1]);\n\t});\n\n\ttest('excludes can be updated (folder watch)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: ['**'], recursive: false }]);\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(join(testDir, 'files-excludes.txt'));\n\t});\n\n\ttest('excludes are ignored (file watch)', async function () {\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\t\tawait watcher.watch([{ path: filePath, excludes: ['**'], recursive: false }]);\n\n\t\treturn basicCrudTest(filePath, true);\n\t});\n\n\ttest('includes can be updated (folder watch)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], includes: ['nothing'], recursive: false }]);\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(join(testDir, 'files-includes.txt'));\n\t});\n\n\ttest('non-includes are ignored (file watch)', async function () {\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\t\tawait watcher.watch([{ path: filePath, excludes: [], includes: ['nothing'], recursive: false }]);\n\n\t\treturn basicCrudTest(filePath, true);\n\t});\n\n\ttest('includes are supported (folder watch)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], includes: ['**/files-includes.txt'], recursive: false }]);\n\n\t\treturn basicCrudTest(join(testDir, 'files-includes.txt'));\n\t});\n\n\ttest('includes are supported (folder watch, relative pattern explicit)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], includes: [{ base: testDir, pattern: 'files-includes.txt' }], recursive: false }]);\n\n\t\treturn basicCrudTest(join(testDir, 'files-includes.txt'));\n\t});\n\n\ttest('includes are supported (folder watch, relative pattern implicit)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], includes: ['files-includes.txt'], recursive: false }]);\n\n\t\treturn basicCrudTest(join(testDir, 'files-includes.txt'));\n\t});\n\n\ttest('correlationId is supported', async function () {\n\t\tconst correlationId = Math.random();\n\t\tawait watcher.watch([{ correlationId, path: testDir, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(join(testDir, 'newFile.txt'), undefined, correlationId);\n\t});\n\n\t(isWindows /* windows: cannot create file symbolic link without elevated context */ ? test.skip : test)('symlink support (folder watch)', async function () {\n\t\tconst link = join(testDir, 'deep-linked');\n\t\tconst linkTarget = join(testDir, 'deep');\n\t\tawait fs.promises.symlink(linkTarget, link);\n\n\t\tawait watcher.watch([{ path: link, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(join(link, 'newFile.txt'));\n\t});\n\n\tasync function basicCrudTest(filePath: string, skipAdd?: boolean, correlationId?: number | null, expectedCount?: number, awaitWatchAfterAdd?: boolean): Promise<void> {\n\t\tlet changeFuture: Promise<unknown>;\n\n\t\t// New file\n\t\tif (!skipAdd) {\n\t\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.ADDED, correlationId, expectedCount);\n\t\t\tawait Promises.writeFile(filePath, 'Hello World');\n\t\t\tawait changeFuture;\n\t\t\tif (awaitWatchAfterAdd) {\n\t\t\t\tawait Event.toPromise(watcher.onDidWatch);\n\t\t\t}\n\t\t}\n\n\t\t// Change file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.UPDATED, correlationId, expectedCount);\n\t\tawait Promises.writeFile(filePath, 'Hello Change');\n\t\tawait changeFuture;\n\n\t\t// Delete file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.DELETED, correlationId, expectedCount);\n\t\tawait fs.promises.unlink(await Promises.realpath(filePath)); // support symlinks\n\t\tawait changeFuture;\n\t}\n\n\t(isWindows /* windows: cannot create file symbolic link without elevated context */ ? test.skip : test)('symlink support (file watch)', async function () {\n\t\tconst link = join(testDir, 'lorem.txt-linked');\n\t\tconst linkTarget = join(testDir, 'lorem.txt');\n\t\tawait fs.promises.symlink(linkTarget, link);\n\n\t\tawait watcher.watch([{ path: link, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(link, true);\n\t});\n\n\t(!isWindows /* UNC is windows only */ ? test.skip : test)('unc support (folder watch)', async function () {\n\t\taddUNCHostToAllowlist('localhost');\n\n\t\t// Local UNC paths are in the form of: \\\\localhost\\c$\\my_dir\n\t\tconst uncPath = `\\\\\\\\localhost\\\\${getDriveLetter(testDir)?.toLowerCase()}$\\\\${ltrim(testDir.substr(testDir.indexOf(':') + 1), '\\\\')}`;\n\n\t\tawait watcher.watch([{ path: uncPath, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(join(uncPath, 'newFile.txt'));\n\t});\n\n\t(!isWindows /* UNC is windows only */ ? test.skip : test)('unc support (file watch)', async function () {\n\t\taddUNCHostToAllowlist('localhost');\n\n\t\t// Local UNC paths are in the form of: \\\\localhost\\c$\\my_dir\n\t\tconst uncPath = `\\\\\\\\localhost\\\\${getDriveLetter(testDir)?.toLowerCase()}$\\\\${ltrim(testDir.substr(testDir.indexOf(':') + 1), '\\\\')}\\\\lorem.txt`;\n\n\t\tawait watcher.watch([{ path: uncPath, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(uncPath, true);\n\t});\n\n\t(isLinux /* linux: is case sensitive */ ? test.skip : test)('wrong casing (folder watch)', async function () {\n\t\tconst wrongCase = join(dirname(testDir), basename(testDir).toUpperCase());\n\n\t\tawait watcher.watch([{ path: wrongCase, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(join(wrongCase, 'newFile.txt'));\n\t});\n\n\t(isLinux /* linux: is case sensitive */ ? test.skip : test)('wrong casing (file watch)', async function () {\n\t\tconst filePath = join(testDir, 'LOREM.txt');\n\t\tawait watcher.watch([{ path: filePath, excludes: [], recursive: false }]);\n\n\t\treturn basicCrudTest(filePath, true);\n\t});\n\n\ttest('invalid path does not explode', async function () {\n\t\tconst invalidPath = join(testDir, 'invalid');\n\n\t\tawait watcher.watch([{ path: invalidPath, excludes: [], recursive: false }]);\n\t});\n\n\ttest('watchFileContents', async function () {\n\t\tconst watchedPath = join(testDir, 'lorem.txt');\n\n\t\tconst cts = new CancellationTokenSource();\n\n\t\tconst readyPromise = new DeferredPromise<void>();\n\t\tconst chunkPromise = new DeferredPromise<void>();\n\t\tconst watchPromise = watchFileContents(watchedPath, () => chunkPromise.complete(), () => readyPromise.complete(), cts.token);\n\n\t\tawait readyPromise.p;\n\n\t\tPromises.writeFile(watchedPath, 'Hello World');\n\n\t\tawait chunkPromise.p;\n\n\t\tcts.cancel(); // this will resolve `watchPromise`\n\n\t\treturn watchPromise;\n\t});\n\n\ttest('watching same or overlapping paths supported when correlation is applied', async function () {\n\t\tawait watcher.watch([\n\t\t\t{ path: testDir, excludes: [], recursive: false, correlationId: 1 }\n\t\t]);\n\n\t\tawait basicCrudTest(join(testDir, 'newFile_1.txt'), undefined, null, 1);\n\n\t\tawait watcher.watch([\n\t\t\t{ path: testDir, excludes: [], recursive: false, correlationId: 1 },\n\t\t\t{ path: testDir, excludes: [], recursive: false, correlationId: 2, },\n\t\t\t{ path: testDir, excludes: [], recursive: false, correlationId: undefined }\n\t\t]);\n\n\t\tawait basicCrudTest(join(testDir, 'newFile_2.txt'), undefined, null, 3);\n\t\tawait basicCrudTest(join(testDir, 'otherNewFile.txt'), undefined, null, 3);\n\t});\n\n\ttest('watching missing path emits watcher fail event', async function () {\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\n\t\tconst folderPath = join(testDir, 'missing');\n\t\twatcher.watch([{ path: folderPath, excludes: [], recursive: true }]);\n\n\t\tawait onDidWatchFail;\n\t});\n\n\ttest('deleting watched path emits watcher fail and delete event when correlated (file watch)', async function () {\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\n\t\tawait watcher.watch([{ path: filePath, excludes: [], recursive: false, correlationId: 1 }]);\n\n\t\tconst instance = Array.from(watcher.watchers)[0].instance;\n\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tconst changeFuture = awaitEvent(watcher, filePath, FileChangeType.DELETED, 1);\n\t\tfs.promises.unlink(filePath);\n\t\tawait onDidWatchFail;\n\t\tawait changeFuture;\n\t\tassert.strictEqual(instance.failed, true);\n\t});\n\n\t(isMacintosh || isWindows /* macOS: does not seem to report deletes on folders | Windows: reports on('error') event only */ ? test.skip : test)('deleting watched path emits watcher fail and delete event when correlated (folder watch)', async function () {\n\t\tconst folderPath = join(testDir, 'deep');\n\n\t\tawait watcher.watch([{ path: folderPath, excludes: [], recursive: false, correlationId: 1 }]);\n\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tconst changeFuture = awaitEvent(watcher, folderPath, FileChangeType.DELETED, 1);\n\t\tPromises.rm(folderPath, RimRafMode.UNLINK);\n\t\tawait onDidWatchFail;\n\t\tawait changeFuture;\n\t});\n\n\ttest('correlated watch requests support suspend/resume (file, does not exist in beginning)', async function () {\n\t\tconst filePath = join(testDir, 'not-found.txt');\n\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tconst request = { path: filePath, excludes: [], recursive: false, correlationId: 1 };\n\t\tawait watcher.watch([request]);\n\t\tawait onDidWatchFail;\n\t\tassert.strictEqual(watcher.isSuspended(request), 'polling');\n\n\t\tawait basicCrudTest(filePath, undefined, 1, undefined, true);\n\t\tawait basicCrudTest(filePath, undefined, 1, undefined, true);\n\t});\n\n\ttest('correlated watch requests support suspend/resume (file, exists in beginning)', async function () {\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\t\tconst request = { path: filePath, excludes: [], recursive: false, correlationId: 1 };\n\t\tawait watcher.watch([request]);\n\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tawait basicCrudTest(filePath, true, 1);\n\t\tawait onDidWatchFail;\n\t\tassert.strictEqual(watcher.isSuspended(request), 'polling');\n\n\t\tawait basicCrudTest(filePath, undefined, 1, undefined, true);\n\t});\n\n\ttest('correlated watch requests support suspend/resume (folder, does not exist in beginning)', async function () {\n\t\tlet onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\n\t\tconst folderPath = join(testDir, 'not-found');\n\t\tconst request = { path: folderPath, excludes: [], recursive: false, correlationId: 1 };\n\t\tawait watcher.watch([request]);\n\t\tawait onDidWatchFail;\n\t\tassert.strictEqual(watcher.isSuspended(request), 'polling');\n\n\t\tlet changeFuture = awaitEvent(watcher, folderPath, FileChangeType.ADDED, 1);\n\t\tlet onDidWatch = Event.toPromise(watcher.onDidWatch);\n\t\tawait fs.promises.mkdir(folderPath);\n\t\tawait changeFuture;\n\t\tawait onDidWatch;\n\n\t\tassert.strictEqual(watcher.isSuspended(request), false);\n\n\t\tconst filePath = join(folderPath, 'newFile.txt');\n\t\tawait basicCrudTest(filePath, undefined, 1);\n\n\t\tif (!isMacintosh) { // macOS does not report DELETE events for folders\n\t\t\tonDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\t\tawait fs.promises.rmdir(folderPath);\n\t\t\tawait onDidWatchFail;\n\n\t\t\tchangeFuture = awaitEvent(watcher, folderPath, FileChangeType.ADDED, 1);\n\t\t\tonDidWatch = Event.toPromise(watcher.onDidWatch);\n\t\t\tawait fs.promises.mkdir(folderPath);\n\t\t\tawait changeFuture;\n\t\t\tawait onDidWatch;\n\n\t\t\tawait timeout(500); // somehow needed on Linux\n\n\t\t\tawait basicCrudTest(filePath, undefined, 1);\n\t\t}\n\t});\n\n\t(isMacintosh /* macOS: does not seem to report this */ ? test.skip : test)('correlated watch requests support suspend/resume (folder, exists in beginning)', async function () {\n\t\tconst folderPath = join(testDir, 'deep');\n\t\tawait watcher.watch([{ path: folderPath, excludes: [], recursive: false, correlationId: 1 }]);\n\n\t\tconst filePath = join(folderPath, 'newFile.txt');\n\t\tawait basicCrudTest(filePath, undefined, 1);\n\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tawait Promises.rm(folderPath);\n\t\tawait onDidWatchFail;\n\n\t\tconst changeFuture = awaitEvent(watcher, folderPath, FileChangeType.ADDED, 1);\n\t\tconst onDidWatch = Event.toPromise(watcher.onDidWatch);\n\t\tawait fs.promises.mkdir(folderPath);\n\t\tawait changeFuture;\n\t\tawait onDidWatch;\n\n\t\tawait timeout(500); // somehow needed on Linux\n\n\t\tawait basicCrudTest(filePath, undefined, 1);\n\t});\n\n\ttest('parcel watcher reused when present for non-recursive file watching (uncorrelated)', function () {\n\t\treturn testParcelWatcherReused(undefined);\n\t});\n\n\ttest('parcel watcher reused when present for non-recursive file watching (correlated)', function () {\n\t\treturn testParcelWatcherReused(2);\n\t});\n\n\tfunction createParcelWatcher() {\n\t\tconst recursiveWatcher = new TestParcelWatcher();\n\t\trecursiveWatcher.setVerboseLogging(loggingEnabled);\n\t\trecursiveWatcher.onDidLogMessage(e => {\n\t\t\tif (loggingEnabled) {\n\t\t\t\tconsole.log(`[recursive watcher test message] ${e.message}`);\n\t\t\t}\n\t\t});\n\n\t\trecursiveWatcher.onDidError(e => {\n\t\t\tif (loggingEnabled) {\n\t\t\t\tconsole.log(`[recursive watcher test error] ${e.error}`);\n\t\t\t}\n\t\t});\n\n\t\treturn recursiveWatcher;\n\t}\n\n\tasync function testParcelWatcherReused(correlationId: number | undefined) {\n\t\tconst recursiveWatcher = createParcelWatcher();\n\t\tawait recursiveWatcher.watch([{ path: testDir, excludes: [], recursive: true, correlationId: 1 }]);\n\n\t\tconst recursiveInstance = Array.from(recursiveWatcher.watchers)[0];\n\t\tassert.strictEqual(recursiveInstance.subscriptionsCount, 0);\n\n\t\tawait createWatcher(recursiveWatcher);\n\n\t\tconst filePath = join(testDir, 'deep', 'conway.js');\n\t\tawait watcher.watch([{ path: filePath, excludes: [], recursive: false, correlationId }]);\n\n\t\tconst { instance } = Array.from(watcher.watchers)[0];\n\t\tassert.strictEqual(instance.isReusingRecursiveWatcher, true);\n\t\tassert.strictEqual(recursiveInstance.subscriptionsCount, 1);\n\n\t\tlet changeFuture = awaitEvent(watcher, filePath, isMacintosh /* somehow fsevents seems to report still on the initial create from test setup */ ? FileChangeType.ADDED : FileChangeType.UPDATED, correlationId);\n\t\tawait Promises.writeFile(filePath, 'Hello World');\n\t\tawait changeFuture;\n\n\t\tawait recursiveWatcher.stop();\n\t\trecursiveWatcher.dispose();\n\n\t\tawait timeout(500); // give the watcher some time to restart\n\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.UPDATED, correlationId);\n\t\tawait Promises.writeFile(filePath, 'Hello World');\n\t\tawait changeFuture;\n\n\t\tassert.strictEqual(instance.isReusingRecursiveWatcher, false);\n\t}\n\n\ttest('correlated watch requests support suspend/resume (file, does not exist in beginning, parcel watcher reused)', async function () {\n\t\tconst recursiveWatcher = createParcelWatcher();\n\t\tawait recursiveWatcher.watch([{ path: testDir, excludes: [], recursive: true }]);\n\n\t\tawait createWatcher(recursiveWatcher);\n\n\t\tconst filePath = join(testDir, 'not-found-2.txt');\n\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tconst request = { path: filePath, excludes: [], recursive: false, correlationId: 1 };\n\t\tawait watcher.watch([request]);\n\t\tawait onDidWatchFail;\n\t\tassert.strictEqual(watcher.isSuspended(request), true);\n\n\t\tconst changeFuture = awaitEvent(watcher, filePath, FileChangeType.ADDED, 1);\n\t\tawait Promises.writeFile(filePath, 'Hello World');\n\t\tawait changeFuture;\n\n\t\tassert.strictEqual(watcher.isSuspended(request), false);\n\t});\n\n\ttest('event type filter (file watch)', async function () {\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\t\tconst request = { path: filePath, excludes: [], recursive: false, filter: FileChangeFilter.UPDATED | FileChangeFilter.DELETED, correlationId: 1 };\n\t\tawait watcher.watch([request]);\n\n\t\t// Change file\n\t\tlet changeFuture = awaitEvent(watcher, filePath, FileChangeType.UPDATED, 1);\n\t\tawait Promises.writeFile(filePath, 'Hello Change');\n\t\tawait changeFuture;\n\n\t\t// Delete file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.DELETED, 1);\n\t\tawait fs.promises.unlink(filePath);\n\t\tawait changeFuture;\n\t});\n\n\ttest('event type filter (folder watch)', async function () {\n\t\tconst request = { path: testDir, excludes: [], recursive: false, filter: FileChangeFilter.UPDATED | FileChangeFilter.DELETED, correlationId: 1 };\n\t\tawait watcher.watch([request]);\n\n\t\t// Change file\n\t\tconst filePath = join(testDir, 'lorem.txt');\n\t\tlet changeFuture = awaitEvent(watcher, filePath, FileChangeType.UPDATED, 1);\n\t\tawait Promises.writeFile(filePath, 'Hello Change');\n\t\tawait changeFuture;\n\n\t\t// Delete file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.DELETED, 1);\n\t\tawait fs.promises.unlink(filePath);\n\t\tawait changeFuture;\n\t});\n});\n"],
  "mappings": "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",
  "names": ["watcher"]
}
