{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/test/node/parcelWatcher.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { realpathSync, promises } from 'fs';\nimport { tmpdir } from 'os';\nimport { timeout } from '../../../../base/common/async.js';\nimport { dirname, join } from '../../../../base/common/path.js';\nimport { isLinux, isMacintosh, isWindows } from '../../../../base/common/platform.js';\nimport { Promises, RimRafMode } from '../../../../base/node/pfs.js';\nimport { getRandomTestPath } from '../../../../base/test/node/testUtils.js';\nimport { FileChangeFilter, FileChangeType, IFileChange } from '../../common/files.js';\nimport { ParcelWatcher } from '../../node/watcher/parcel/parcelWatcher.js';\nimport { IRecursiveWatchRequest } from '../../common/watcher.js';\nimport { getDriveLetter } from '../../../../base/common/extpath.js';\nimport { ltrim } from '../../../../base/common/strings.js';\nimport { FileAccess } from '../../../../base/common/network.js';\nimport { extUriBiasedIgnorePathCase } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { addUNCHostToAllowlist } from '../../../../base/node/unc.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\n\nexport class TestParcelWatcher extends ParcelWatcher {\n\n\tprotected override readonly suspendedWatchRequestPollingInterval = 100;\n\n\tprivate readonly _onDidWatch = this._register(new Emitter<void>());\n\treadonly onDidWatch = this._onDidWatch.event;\n\n\treadonly onWatchFail = this._onDidWatchFail.event;\n\n\ttestRemoveDuplicateRequests(paths: string[], excludes: string[] = []): string[] {\n\n\t\t// Work with strings as paths to simplify testing\n\t\tconst requests: IRecursiveWatchRequest[] = paths.map(path => {\n\t\t\treturn { path, excludes, recursive: true };\n\t\t});\n\n\t\treturn this.removeDuplicateRequests(requests, false /* validate paths skipped for tests */).map(request => request.path);\n\t}\n\n\tprotected override getUpdateWatchersDelay(): number {\n\t\treturn 0;\n\t}\n\n\tprotected override async doWatch(requests: IRecursiveWatchRequest[]): Promise<void> {\n\t\tawait super.doWatch(requests);\n\t\tawait this.whenReady();\n\n\t\tthis._onDidWatch.fire();\n\t}\n\n\tasync whenReady(): Promise<void> {\n\t\tfor (const watcher of this.watchers) {\n\t\t\tawait watcher.ready;\n\t\t}\n\t}\n}\n\n// this suite has shown flaky runs in Azure pipelines where\n// tasks would just hang and timeout after a while (not in\n// mocha but generally). as such they will run only on demand\n// whenever we update the watcher library.\n\nsuite.skip('File Watcher (parcel)', () => {\n\n\tlet testDir: string;\n\tlet watcher: TestParcelWatcher;\n\n\tlet loggingEnabled = false;\n\n\tfunction enableLogging(enable: boolean) {\n\t\tloggingEnabled = enable;\n\t\twatcher?.setVerboseLogging(enable);\n\t}\n\n\tenableLogging(false);\n\n\tsetup(async () => {\n\t\twatcher = new TestParcelWatcher();\n\t\twatcher.setVerboseLogging(loggingEnabled);\n\n\t\twatcher.onDidLogMessage(e => {\n\t\t\tif (loggingEnabled) {\n\t\t\t\tconsole.log(`[recursive watcher test message] ${e.message}`);\n\t\t\t}\n\t\t});\n\n\t\twatcher.onDidError(e => {\n\t\t\tif (loggingEnabled) {\n\t\t\t\tconsole.log(`[recursive watcher test error] ${e.error}`);\n\t\t\t}\n\t\t});\n\n\t\ttestDir = URI.file(getRandomTestPath(tmpdir(), 'vsctests', 'filewatcher')).fsPath;\n\n\t\tconst sourceDir = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/service').fsPath;\n\n\t\tawait Promises.copy(sourceDir, testDir, { preserveSymlinks: false });\n\t});\n\n\tteardown(async () => {\n\t\tconst watchers = watcher.watchers.size;\n\t\tlet stoppedInstances = 0;\n\t\tfor (const instance of watcher.watchers) {\n\t\t\tEvent.once(instance.onDidStop)(() => {\n\t\t\t\tif (instance.stopped) {\n\t\t\t\t\tstoppedInstances++;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tawait watcher.stop();\n\t\tassert.strictEqual(stoppedInstances, watchers, 'All watchers must be stopped before the test ends');\n\t\twatcher.dispose();\n\n\t\t// Possible that the file watcher is still holding\n\t\t// onto the folders on Windows specifically and the\n\t\t// unlink would fail. In that case, do not fail the\n\t\t// test suite.\n\t\treturn Promises.rm(testDir).catch(error => console.error(error));\n\t});\n\n\tfunction toMsg(type: FileChangeType): string {\n\t\tswitch (type) {\n\t\t\tcase FileChangeType.ADDED: return 'added';\n\t\t\tcase FileChangeType.DELETED: return 'deleted';\n\t\t\tdefault: return 'changed';\n\t\t}\n\t}\n\n\tasync function awaitEvent(watcher: TestParcelWatcher, path: string, type: FileChangeType, failOnEventReason?: string, correlationId?: number | null, expectedCount?: number): Promise<IFileChange[]> {\n\t\tif (loggingEnabled) {\n\t\t\tconsole.log(`Awaiting change type '${toMsg(type)}' on file '${path}'`);\n\t\t}\n\n\t\t// Await the event\n\t\tconst res = await new Promise<IFileChange[]>((resolve, reject) => {\n\t\t\tlet counter = 0;\n\t\t\tconst disposable = watcher.onDidChangeFile(events => {\n\t\t\t\tfor (const event of events) {\n\t\t\t\t\tif (extUriBiasedIgnorePathCase.isEqual(event.resource, URI.file(path)) && event.type === type && (correlationId === null || event.cId === correlationId)) {\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tif (typeof expectedCount === 'number' && counter < expectedCount) {\n\t\t\t\t\t\t\tcontinue; // not yet\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\tif (failOnEventReason) {\n\t\t\t\t\t\t\treject(new Error(`Unexpected file event: ${failOnEventReason}`));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetImmediate(() => resolve(events)); // copied from parcel watcher tests, seems to drop unrelated events on macOS\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Unwind from the event call stack: we have seen crashes in Parcel\n\t\t// when e.g. calling `unsubscribe` directly from the stack of a file\n\t\t// change event\n\t\t// Refs: https://github.com/microsoft/vscode/issues/137430\n\t\tawait timeout(1);\n\n\t\treturn res;\n\t}\n\n\tfunction awaitMessage(watcher: TestParcelWatcher, type: 'trace' | 'warn' | 'error' | 'info' | 'debug'): Promise<void> {\n\t\tif (loggingEnabled) {\n\t\t\tconsole.log(`Awaiting message of type ${type}`);\n\t\t}\n\n\t\t// Await the message\n\t\treturn new Promise<void>(resolve => {\n\t\t\tconst disposable = watcher.onDidLogMessage(msg => {\n\t\t\t\tif (msg.type === type) {\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\ttest('basics', async function () {\n\t\tconst request = { path: testDir, excludes: [], recursive: true };\n\t\tawait watcher.watch([request]);\n\t\tassert.strictEqual(watcher.watchers.size, watcher.watchers.size);\n\n\t\tconst instance = Array.from(watcher.watchers)[0];\n\t\tassert.strictEqual(request, instance.request);\n\t\tassert.strictEqual(instance.failed, false);\n\t\tassert.strictEqual(instance.stopped, false);\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst subscriptions1 = new Map<string, FileChangeType>();\n\t\tconst subscriptions2 = new Map<string, FileChangeType>();\n\n\t\t// New file\n\t\tconst newFilePath = join(testDir, 'deep', 'newFile.txt');\n\t\tdisposables.add(instance.subscribe(newFilePath, change => subscriptions1.set(change.resource.fsPath, change.type)));\n\t\tdisposables.add(instance.subscribe(newFilePath, change => subscriptions2.set(change.resource.fsPath, change.type))); // can subscribe multiple times\n\t\tassert.strictEqual(instance.include(newFilePath), true);\n\t\tassert.strictEqual(instance.exclude(newFilePath), false);\n\t\tlet changeFuture: Promise<unknown> = awaitEvent(watcher, newFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(newFilePath, 'Hello World');\n\t\tawait changeFuture;\n\t\tassert.strictEqual(subscriptions1.get(newFilePath), FileChangeType.ADDED);\n\t\tassert.strictEqual(subscriptions2.get(newFilePath), FileChangeType.ADDED);\n\n\t\t// New folder\n\t\tconst newFolderPath = join(testDir, 'deep', 'New Folder');\n\t\tdisposables.add(instance.subscribe(newFolderPath, change => subscriptions1.set(change.resource.fsPath, change.type)));\n\t\tconst disposable = instance.subscribe(newFolderPath, change => subscriptions2.set(change.resource.fsPath, change.type));\n\t\tdisposable.dispose();\n\t\tassert.strictEqual(instance.include(newFolderPath), true);\n\t\tassert.strictEqual(instance.exclude(newFolderPath), false);\n\t\tchangeFuture = awaitEvent(watcher, newFolderPath, FileChangeType.ADDED);\n\t\tawait promises.mkdir(newFolderPath);\n\t\tawait changeFuture;\n\t\tassert.strictEqual(subscriptions1.get(newFolderPath), FileChangeType.ADDED);\n\t\tassert.strictEqual(subscriptions2.has(newFolderPath), false /* subscription was disposed before the event */);\n\n\t\t// Rename file\n\t\tlet renamedFilePath = join(testDir, 'deep', 'renamedFile.txt');\n\t\tdisposables.add(instance.subscribe(renamedFilePath, change => subscriptions1.set(change.resource.fsPath, change.type)));\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, newFilePath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, renamedFilePath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(newFilePath, renamedFilePath);\n\t\tawait changeFuture;\n\t\tassert.strictEqual(subscriptions1.get(newFilePath), FileChangeType.DELETED);\n\t\tassert.strictEqual(subscriptions1.get(renamedFilePath), FileChangeType.ADDED);\n\n\t\t// Rename folder\n\t\tlet renamedFolderPath = join(testDir, 'deep', 'Renamed Folder');\n\t\tdisposables.add(instance.subscribe(renamedFolderPath, change => subscriptions1.set(change.resource.fsPath, change.type)));\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, newFolderPath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, renamedFolderPath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(newFolderPath, renamedFolderPath);\n\t\tawait changeFuture;\n\t\tassert.strictEqual(subscriptions1.get(newFolderPath), FileChangeType.DELETED);\n\t\tassert.strictEqual(subscriptions1.get(renamedFolderPath), FileChangeType.ADDED);\n\n\t\t// Rename file (same name, different case)\n\t\tconst caseRenamedFilePath = join(testDir, 'deep', 'RenamedFile.txt');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, renamedFilePath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, caseRenamedFilePath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(renamedFilePath, caseRenamedFilePath);\n\t\tawait changeFuture;\n\t\trenamedFilePath = caseRenamedFilePath;\n\n\t\t// Rename folder (same name, different case)\n\t\tconst caseRenamedFolderPath = join(testDir, 'deep', 'REnamed Folder');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, renamedFolderPath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, caseRenamedFolderPath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(renamedFolderPath, caseRenamedFolderPath);\n\t\tawait changeFuture;\n\t\trenamedFolderPath = caseRenamedFolderPath;\n\n\t\t// Move file\n\t\tconst movedFilepath = join(testDir, 'movedFile.txt');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, renamedFilePath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, movedFilepath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(renamedFilePath, movedFilepath);\n\t\tawait changeFuture;\n\n\t\t// Move folder\n\t\tconst movedFolderpath = join(testDir, 'Moved Folder');\n\t\tchangeFuture = Promise.all([\n\t\t\tawaitEvent(watcher, renamedFolderPath, FileChangeType.DELETED),\n\t\t\tawaitEvent(watcher, movedFolderpath, FileChangeType.ADDED)\n\t\t]);\n\t\tawait Promises.rename(renamedFolderPath, movedFolderpath);\n\t\tawait changeFuture;\n\n\t\t// Copy file\n\t\tconst copiedFilepath = join(testDir, 'deep', 'copiedFile.txt');\n\t\tchangeFuture = awaitEvent(watcher, copiedFilepath, FileChangeType.ADDED);\n\t\tawait promises.copyFile(movedFilepath, copiedFilepath);\n\t\tawait changeFuture;\n\n\t\t// Copy folder\n\t\tconst copiedFolderpath = join(testDir, 'deep', 'Copied Folder');\n\t\tchangeFuture = awaitEvent(watcher, copiedFolderpath, FileChangeType.ADDED);\n\t\tawait Promises.copy(movedFolderpath, copiedFolderpath, { preserveSymlinks: false });\n\t\tawait changeFuture;\n\n\t\t// Change file\n\t\tchangeFuture = awaitEvent(watcher, copiedFilepath, FileChangeType.UPDATED);\n\t\tawait Promises.writeFile(copiedFilepath, 'Hello Change');\n\t\tawait changeFuture;\n\n\t\t// Create new file\n\t\tconst anotherNewFilePath = join(testDir, 'deep', 'anotherNewFile.txt');\n\t\tchangeFuture = awaitEvent(watcher, anotherNewFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(anotherNewFilePath, 'Hello Another World');\n\t\tawait changeFuture;\n\n\t\t// Read file does not emit event\n\t\tchangeFuture = awaitEvent(watcher, anotherNewFilePath, FileChangeType.UPDATED, 'unexpected-event-from-read-file');\n\t\tawait promises.readFile(anotherNewFilePath);\n\t\tawait Promise.race([timeout(100), changeFuture]);\n\n\t\t// Stat file does not emit event\n\t\tchangeFuture = awaitEvent(watcher, anotherNewFilePath, FileChangeType.UPDATED, 'unexpected-event-from-stat');\n\t\tawait promises.stat(anotherNewFilePath);\n\t\tawait Promise.race([timeout(100), changeFuture]);\n\n\t\t// Stat folder does not emit event\n\t\tchangeFuture = awaitEvent(watcher, copiedFolderpath, FileChangeType.UPDATED, 'unexpected-event-from-stat');\n\t\tawait promises.stat(copiedFolderpath);\n\t\tawait Promise.race([timeout(100), changeFuture]);\n\n\t\t// Delete file\n\t\tchangeFuture = awaitEvent(watcher, copiedFilepath, FileChangeType.DELETED);\n\t\tdisposables.add(instance.subscribe(copiedFilepath, change => subscriptions1.set(change.resource.fsPath, change.type)));\n\t\tawait promises.unlink(copiedFilepath);\n\t\tawait changeFuture;\n\t\tassert.strictEqual(subscriptions1.get(copiedFilepath), FileChangeType.DELETED);\n\n\t\t// Delete folder\n\t\tchangeFuture = awaitEvent(watcher, copiedFolderpath, FileChangeType.DELETED);\n\t\tdisposables.add(instance.subscribe(copiedFolderpath, change => subscriptions1.set(change.resource.fsPath, change.type)));\n\t\tawait promises.rmdir(copiedFolderpath);\n\t\tawait changeFuture;\n\t\tassert.strictEqual(subscriptions1.get(copiedFolderpath), FileChangeType.DELETED);\n\n\t\tdisposables.dispose();\n\t});\n\n\t(isMacintosh /* this test seems not possible with fsevents backend */ ? test.skip : test)('basics (atomic writes)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: true }]);\n\n\t\t// Delete + Recreate file\n\t\tconst newFilePath = join(testDir, 'deep', 'conway.js');\n\t\tconst changeFuture = awaitEvent(watcher, newFilePath, FileChangeType.UPDATED);\n\t\tawait promises.unlink(newFilePath);\n\t\tPromises.writeFile(newFilePath, 'Hello Atomic World');\n\t\tawait changeFuture;\n\t});\n\n\t(!isLinux /* polling is only used in linux environments (WSL) */ ? test.skip : test)('basics (polling)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], pollingInterval: 100, recursive: true }]);\n\n\t\treturn basicCrudTest(join(testDir, 'deep', 'newFile.txt'));\n\t});\n\n\tasync function basicCrudTest(filePath: string, correlationId?: number | null, expectedCount?: number): Promise<void> {\n\n\t\t// New file\n\t\tlet changeFuture = awaitEvent(watcher, filePath, FileChangeType.ADDED, undefined, correlationId, expectedCount);\n\t\tawait Promises.writeFile(filePath, 'Hello World');\n\t\tawait changeFuture;\n\n\t\t// Change file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.UPDATED, undefined, correlationId, expectedCount);\n\t\tawait Promises.writeFile(filePath, 'Hello Change');\n\t\tawait changeFuture;\n\n\t\t// Delete file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.DELETED, undefined, correlationId, expectedCount);\n\t\tawait promises.unlink(filePath);\n\t\tawait changeFuture;\n\t}\n\n\ttest('multiple events', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: true }]);\n\t\tawait promises.mkdir(join(testDir, 'deep-multiple'));\n\n\t\t// multiple add\n\n\t\tconst newFilePath1 = join(testDir, 'newFile-1.txt');\n\t\tconst newFilePath2 = join(testDir, 'newFile-2.txt');\n\t\tconst newFilePath3 = join(testDir, 'newFile-3.txt');\n\t\tconst newFilePath4 = join(testDir, 'deep-multiple', 'newFile-1.txt');\n\t\tconst newFilePath5 = join(testDir, 'deep-multiple', 'newFile-2.txt');\n\t\tconst newFilePath6 = join(testDir, 'deep-multiple', 'newFile-3.txt');\n\n\t\tconst addedFuture1 = awaitEvent(watcher, newFilePath1, FileChangeType.ADDED);\n\t\tconst addedFuture2 = awaitEvent(watcher, newFilePath2, FileChangeType.ADDED);\n\t\tconst addedFuture3 = awaitEvent(watcher, newFilePath3, FileChangeType.ADDED);\n\t\tconst addedFuture4 = awaitEvent(watcher, newFilePath4, FileChangeType.ADDED);\n\t\tconst addedFuture5 = awaitEvent(watcher, newFilePath5, FileChangeType.ADDED);\n\t\tconst addedFuture6 = awaitEvent(watcher, newFilePath6, FileChangeType.ADDED);\n\n\t\tawait Promise.all([\n\t\t\tawait Promises.writeFile(newFilePath1, 'Hello World 1'),\n\t\t\tawait Promises.writeFile(newFilePath2, 'Hello World 2'),\n\t\t\tawait Promises.writeFile(newFilePath3, 'Hello World 3'),\n\t\t\tawait Promises.writeFile(newFilePath4, 'Hello World 4'),\n\t\t\tawait Promises.writeFile(newFilePath5, 'Hello World 5'),\n\t\t\tawait Promises.writeFile(newFilePath6, 'Hello World 6')\n\t\t]);\n\n\t\tawait Promise.all([addedFuture1, addedFuture2, addedFuture3, addedFuture4, addedFuture5, addedFuture6]);\n\n\t\t// multiple change\n\n\t\tconst changeFuture1 = awaitEvent(watcher, newFilePath1, FileChangeType.UPDATED);\n\t\tconst changeFuture2 = awaitEvent(watcher, newFilePath2, FileChangeType.UPDATED);\n\t\tconst changeFuture3 = awaitEvent(watcher, newFilePath3, FileChangeType.UPDATED);\n\t\tconst changeFuture4 = awaitEvent(watcher, newFilePath4, FileChangeType.UPDATED);\n\t\tconst changeFuture5 = awaitEvent(watcher, newFilePath5, FileChangeType.UPDATED);\n\t\tconst changeFuture6 = awaitEvent(watcher, newFilePath6, FileChangeType.UPDATED);\n\n\t\tawait Promise.all([\n\t\t\tawait Promises.writeFile(newFilePath1, 'Hello Update 1'),\n\t\t\tawait Promises.writeFile(newFilePath2, 'Hello Update 2'),\n\t\t\tawait Promises.writeFile(newFilePath3, 'Hello Update 3'),\n\t\t\tawait Promises.writeFile(newFilePath4, 'Hello Update 4'),\n\t\t\tawait Promises.writeFile(newFilePath5, 'Hello Update 5'),\n\t\t\tawait Promises.writeFile(newFilePath6, 'Hello Update 6')\n\t\t]);\n\n\t\tawait Promise.all([changeFuture1, changeFuture2, changeFuture3, changeFuture4, changeFuture5, changeFuture6]);\n\n\t\t// copy with multiple files\n\n\t\tconst copyFuture1 = awaitEvent(watcher, join(testDir, 'deep-multiple-copy', 'newFile-1.txt'), FileChangeType.ADDED);\n\t\tconst copyFuture2 = awaitEvent(watcher, join(testDir, 'deep-multiple-copy', 'newFile-2.txt'), FileChangeType.ADDED);\n\t\tconst copyFuture3 = awaitEvent(watcher, join(testDir, 'deep-multiple-copy', 'newFile-3.txt'), FileChangeType.ADDED);\n\t\tconst copyFuture4 = awaitEvent(watcher, join(testDir, 'deep-multiple-copy'), FileChangeType.ADDED);\n\n\t\tawait Promises.copy(join(testDir, 'deep-multiple'), join(testDir, 'deep-multiple-copy'), { preserveSymlinks: false });\n\n\t\tawait Promise.all([copyFuture1, copyFuture2, copyFuture3, copyFuture4]);\n\n\t\t// multiple delete (single files)\n\n\t\tconst deleteFuture1 = awaitEvent(watcher, newFilePath1, FileChangeType.DELETED);\n\t\tconst deleteFuture2 = awaitEvent(watcher, newFilePath2, FileChangeType.DELETED);\n\t\tconst deleteFuture3 = awaitEvent(watcher, newFilePath3, FileChangeType.DELETED);\n\t\tconst deleteFuture4 = awaitEvent(watcher, newFilePath4, FileChangeType.DELETED);\n\t\tconst deleteFuture5 = awaitEvent(watcher, newFilePath5, FileChangeType.DELETED);\n\t\tconst deleteFuture6 = awaitEvent(watcher, newFilePath6, FileChangeType.DELETED);\n\n\t\tawait Promise.all([\n\t\t\tawait promises.unlink(newFilePath1),\n\t\t\tawait promises.unlink(newFilePath2),\n\t\t\tawait promises.unlink(newFilePath3),\n\t\t\tawait promises.unlink(newFilePath4),\n\t\t\tawait promises.unlink(newFilePath5),\n\t\t\tawait promises.unlink(newFilePath6)\n\t\t]);\n\n\t\tawait Promise.all([deleteFuture1, deleteFuture2, deleteFuture3, deleteFuture4, deleteFuture5, deleteFuture6]);\n\n\t\t// multiple delete (folder)\n\n\t\tconst deleteFolderFuture1 = awaitEvent(watcher, join(testDir, 'deep-multiple'), FileChangeType.DELETED);\n\t\tconst deleteFolderFuture2 = awaitEvent(watcher, join(testDir, 'deep-multiple-copy'), FileChangeType.DELETED);\n\n\t\tawait Promise.all([Promises.rm(join(testDir, 'deep-multiple'), RimRafMode.UNLINK), Promises.rm(join(testDir, 'deep-multiple-copy'), RimRafMode.UNLINK)]);\n\n\t\tawait Promise.all([deleteFolderFuture1, deleteFolderFuture2]);\n\t});\n\n\ttest('subsequent watch updates watchers (path)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [join(realpathSync(testDir), 'unrelated')], recursive: true }]);\n\n\t\t// New file (*.txt)\n\t\tlet newTextFilePath = join(testDir, 'deep', 'newFile.txt');\n\t\tlet changeFuture = awaitEvent(watcher, newTextFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(newTextFilePath, 'Hello World');\n\t\tawait changeFuture;\n\n\t\tawait watcher.watch([{ path: join(testDir, 'deep'), excludes: [join(realpathSync(testDir), 'unrelated')], recursive: true }]);\n\t\tnewTextFilePath = join(testDir, 'deep', 'newFile2.txt');\n\t\tchangeFuture = awaitEvent(watcher, newTextFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(newTextFilePath, 'Hello World');\n\t\tawait changeFuture;\n\n\t\tawait watcher.watch([{ path: join(testDir, 'deep'), excludes: [realpathSync(testDir)], recursive: true }]);\n\t\tawait watcher.watch([{ path: join(testDir, 'deep'), excludes: [], recursive: true }]);\n\t\tnewTextFilePath = join(testDir, 'deep', 'newFile3.txt');\n\t\tchangeFuture = awaitEvent(watcher, newTextFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(newTextFilePath, 'Hello World');\n\t\tawait changeFuture;\n\t});\n\n\ttest('invalid path does not crash watcher', async function () {\n\t\tawait watcher.watch([\n\t\t\t{ path: testDir, excludes: [], recursive: true },\n\t\t\t{ path: join(testDir, 'invalid-folder'), excludes: [], recursive: true },\n\t\t\t{ path: FileAccess.asFileUri('').fsPath, excludes: [], recursive: true }\n\t\t]);\n\n\t\treturn basicCrudTest(join(testDir, 'deep', 'newFile.txt'));\n\t});\n\n\ttest('subsequent watch updates watchers (excludes)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [realpathSync(testDir)], recursive: true }]);\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: true }]);\n\n\t\treturn basicCrudTest(join(testDir, 'deep', 'newFile.txt'));\n\t});\n\n\ttest('subsequent watch updates watchers (includes)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], includes: ['nothing'], recursive: true }]);\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: true }]);\n\n\t\treturn basicCrudTest(join(testDir, 'deep', 'newFile.txt'));\n\t});\n\n\ttest('includes are supported', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], includes: ['**/deep/**'], recursive: true }]);\n\n\t\treturn basicCrudTest(join(testDir, 'deep', 'newFile.txt'));\n\t});\n\n\ttest('includes are supported (relative pattern explicit)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], includes: [{ base: testDir, pattern: 'deep/newFile.txt' }], recursive: true }]);\n\n\t\treturn basicCrudTest(join(testDir, 'deep', 'newFile.txt'));\n\t});\n\n\ttest('includes are supported (relative pattern implicit)', async function () {\n\t\tawait watcher.watch([{ path: testDir, excludes: [], includes: ['deep/newFile.txt'], recursive: true }]);\n\n\t\treturn basicCrudTest(join(testDir, 'deep', 'newFile.txt'));\n\t});\n\n\ttest('excludes are supported (path)', async function () {\n\t\treturn testExcludes([join(realpathSync(testDir), 'deep')]);\n\t});\n\n\ttest('excludes are supported (glob)', function () {\n\t\treturn testExcludes(['deep/**']);\n\t});\n\n\tasync function testExcludes(excludes: string[]) {\n\t\tawait watcher.watch([{ path: testDir, excludes, recursive: true }]);\n\n\t\t// New file (*.txt)\n\t\tconst newTextFilePath = join(testDir, 'deep', 'newFile.txt');\n\t\tconst changeFuture = awaitEvent(watcher, newTextFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(newTextFilePath, 'Hello World');\n\n\t\tconst res = await Promise.any([\n\t\t\ttimeout(500).then(() => true),\n\t\t\tchangeFuture.then(() => false)\n\t\t]);\n\n\t\tif (!res) {\n\t\t\tassert.fail('Unexpected change event');\n\t\t}\n\t}\n\n\t(isWindows /* windows: cannot create file symbolic link without elevated context */ ? test.skip : test)('symlink support (root)', async function () {\n\t\tconst link = join(testDir, 'deep-linked');\n\t\tconst linkTarget = join(testDir, 'deep');\n\t\tawait promises.symlink(linkTarget, link);\n\n\t\tawait watcher.watch([{ path: link, excludes: [], recursive: true }]);\n\n\t\treturn basicCrudTest(join(link, 'newFile.txt'));\n\t});\n\n\t(isWindows /* windows: cannot create file symbolic link without elevated context */ ? test.skip : test)('symlink support (via extra watch)', async function () {\n\t\tconst link = join(testDir, 'deep-linked');\n\t\tconst linkTarget = join(testDir, 'deep');\n\t\tawait promises.symlink(linkTarget, link);\n\n\t\tawait watcher.watch([{ path: testDir, excludes: [], recursive: true }, { path: link, excludes: [], recursive: true }]);\n\n\t\treturn basicCrudTest(join(link, 'newFile.txt'));\n\t});\n\n\t(!isWindows /* UNC is windows only */ ? test.skip : test)('unc support', async function () {\n\t\taddUNCHostToAllowlist('localhost');\n\n\t\t// Local UNC paths are in the form of: \\\\localhost\\c$\\my_dir\n\t\tconst uncPath = `\\\\\\\\localhost\\\\${getDriveLetter(testDir)?.toLowerCase()}$\\\\${ltrim(testDir.substr(testDir.indexOf(':') + 1), '\\\\')}`;\n\n\t\tawait watcher.watch([{ path: uncPath, excludes: [], recursive: true }]);\n\n\t\treturn basicCrudTest(join(uncPath, 'deep', 'newFile.txt'));\n\t});\n\n\t(isLinux /* linux: is case sensitive */ ? test.skip : test)('wrong casing', async function () {\n\t\tconst deepWrongCasedPath = join(testDir, 'DEEP');\n\n\t\tawait watcher.watch([{ path: deepWrongCasedPath, excludes: [], recursive: true }]);\n\n\t\treturn basicCrudTest(join(deepWrongCasedPath, 'newFile.txt'));\n\t});\n\n\ttest('invalid folder does not explode', async function () {\n\t\tconst invalidPath = join(testDir, 'invalid');\n\n\t\tawait watcher.watch([{ path: invalidPath, excludes: [], recursive: true }]);\n\t});\n\n\t(isWindows /* flaky on windows */ ? test.skip : test)('deleting watched path without correlation restarts watching', async function () {\n\t\tconst watchedPath = join(testDir, 'deep');\n\n\t\tawait watcher.watch([{ path: watchedPath, excludes: [], recursive: true }]);\n\n\t\t// Delete watched path and await\n\t\tconst warnFuture = awaitMessage(watcher, 'warn');\n\t\tawait Promises.rm(watchedPath, RimRafMode.UNLINK);\n\t\tawait warnFuture;\n\n\t\t// Restore watched path\n\t\tawait timeout(1500); // node.js watcher used for monitoring folder restore is async\n\t\tawait promises.mkdir(watchedPath);\n\t\tawait timeout(1500); // restart is delayed\n\t\tawait watcher.whenReady();\n\n\t\t// Verify events come in again\n\t\tconst newFilePath = join(watchedPath, 'newFile.txt');\n\t\tconst changeFuture = awaitEvent(watcher, newFilePath, FileChangeType.ADDED);\n\t\tawait Promises.writeFile(newFilePath, 'Hello World');\n\t\tawait changeFuture;\n\t});\n\n\ttest('correlationId is supported', async function () {\n\t\tconst correlationId = Math.random();\n\t\tawait watcher.watch([{ correlationId, path: testDir, excludes: [], recursive: true }]);\n\n\t\treturn basicCrudTest(join(testDir, 'newFile.txt'), correlationId);\n\t});\n\n\ttest('should not exclude roots that do not overlap', () => {\n\t\tif (isWindows) {\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['C:\\\\a']), ['C:\\\\a']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['C:\\\\a', 'C:\\\\b']), ['C:\\\\a', 'C:\\\\b']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['C:\\\\a', 'C:\\\\b', 'C:\\\\c\\\\d\\\\e']), ['C:\\\\a', 'C:\\\\b', 'C:\\\\c\\\\d\\\\e']);\n\t\t} else {\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['/a']), ['/a']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['/a', '/b']), ['/a', '/b']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['/a', '/b', '/c/d/e']), ['/a', '/b', '/c/d/e']);\n\t\t}\n\t});\n\n\ttest('should remove sub-folders of other paths', () => {\n\t\tif (isWindows) {\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['C:\\\\a', 'C:\\\\a\\\\b']), ['C:\\\\a']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['C:\\\\a', 'C:\\\\b', 'C:\\\\a\\\\b']), ['C:\\\\a', 'C:\\\\b']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['C:\\\\b\\\\a', 'C:\\\\a', 'C:\\\\b', 'C:\\\\a\\\\b']), ['C:\\\\a', 'C:\\\\b']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['C:\\\\a', 'C:\\\\a\\\\b', 'C:\\\\a\\\\c\\\\d']), ['C:\\\\a']);\n\t\t} else {\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['/a', '/a/b']), ['/a']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['/a', '/b', '/a/b']), ['/a', '/b']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['/b/a', '/a', '/b', '/a/b']), ['/a', '/b']);\n\t\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['/a', '/a/b', '/a/c/d']), ['/a']);\n\t\t}\n\t});\n\n\ttest('should ignore when everything excluded', () => {\n\t\tassert.deepStrictEqual(watcher.testRemoveDuplicateRequests(['/foo/bar', '/bar'], ['**', 'something']), []);\n\t});\n\n\ttest('watching same or overlapping paths supported when correlation is applied', async () => {\n\t\tawait watcher.watch([\n\t\t\t{ path: testDir, excludes: [], recursive: true, correlationId: 1 }\n\t\t]);\n\n\t\tawait basicCrudTest(join(testDir, 'newFile.txt'), null, 1);\n\n\t\t// same path, same options\n\t\tawait watcher.watch([\n\t\t\t{ path: testDir, excludes: [], recursive: true, correlationId: 1 },\n\t\t\t{ path: testDir, excludes: [], recursive: true, correlationId: 2, },\n\t\t\t{ path: testDir, excludes: [], recursive: true, correlationId: undefined }\n\t\t]);\n\n\t\tawait basicCrudTest(join(testDir, 'newFile.txt'), null, 3);\n\t\tawait basicCrudTest(join(testDir, 'otherNewFile.txt'), null, 3);\n\n\t\t// same path, different options\n\t\tawait watcher.watch([\n\t\t\t{ path: testDir, excludes: [], recursive: true, correlationId: 1 },\n\t\t\t{ path: testDir, excludes: [], recursive: true, correlationId: 2 },\n\t\t\t{ path: testDir, excludes: [], recursive: true, correlationId: undefined },\n\t\t\t{ path: testDir, excludes: [join(realpathSync(testDir), 'deep')], recursive: true, correlationId: 3 },\n\t\t\t{ path: testDir, excludes: [join(realpathSync(testDir), 'other')], recursive: true, correlationId: 4 },\n\t\t]);\n\n\t\tawait basicCrudTest(join(testDir, 'newFile.txt'), null, 5);\n\t\tawait basicCrudTest(join(testDir, 'otherNewFile.txt'), null, 5);\n\n\t\t// overlapping paths (same options)\n\t\tawait watcher.watch([\n\t\t\t{ path: dirname(testDir), excludes: [], recursive: true, correlationId: 1 },\n\t\t\t{ path: testDir, excludes: [], recursive: true, correlationId: 2 },\n\t\t\t{ path: join(testDir, 'deep'), excludes: [], recursive: true, correlationId: 3 },\n\t\t]);\n\n\t\tawait basicCrudTest(join(testDir, 'deep', 'newFile.txt'), null, 3);\n\t\tawait basicCrudTest(join(testDir, 'deep', 'otherNewFile.txt'), null, 3);\n\n\t\t// overlapping paths (different options)\n\t\tawait watcher.watch([\n\t\t\t{ path: dirname(testDir), excludes: [], recursive: true, correlationId: 1 },\n\t\t\t{ path: testDir, excludes: [join(realpathSync(testDir), 'some')], recursive: true, correlationId: 2 },\n\t\t\t{ path: join(testDir, 'deep'), excludes: [join(realpathSync(testDir), 'other')], recursive: true, correlationId: 3 },\n\t\t]);\n\n\t\tawait basicCrudTest(join(testDir, 'deep', 'newFile.txt'), null, 3);\n\t\tawait basicCrudTest(join(testDir, 'deep', 'otherNewFile.txt'), null, 3);\n\t});\n\n\ttest('watching missing path emits watcher fail event', async function () {\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\n\t\tconst folderPath = join(testDir, 'missing');\n\t\twatcher.watch([{ path: folderPath, excludes: [], recursive: true }]);\n\n\t\tawait onDidWatchFail;\n\t});\n\n\ttest('deleting watched path emits watcher fail and delete event if correlated', async function () {\n\t\tconst folderPath = join(testDir, 'deep');\n\n\t\tawait watcher.watch([{ path: folderPath, excludes: [], recursive: true, correlationId: 1 }]);\n\n\t\tlet failed = false;\n\t\tconst instance = Array.from(watcher.watchers)[0];\n\t\tassert.strictEqual(instance.include(folderPath), true);\n\t\tinstance.onDidFail(() => failed = true);\n\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tconst changeFuture = awaitEvent(watcher, folderPath, FileChangeType.DELETED, undefined, 1);\n\t\tPromises.rm(folderPath, RimRafMode.UNLINK);\n\t\tawait onDidWatchFail;\n\t\tawait changeFuture;\n\t\tassert.strictEqual(failed, true);\n\t\tassert.strictEqual(instance.failed, true);\n\t});\n\n\ttest('correlated watch requests support suspend/resume (folder, does not exist in beginning, not reusing watcher)', async () => {\n\t\tawait testCorrelatedWatchFolderDoesNotExist(false);\n\t});\n\n\t(!isMacintosh /* Linux/Windows: times out for some reason */ ? test.skip : test)('correlated watch requests support suspend/resume (folder, does not exist in beginning, reusing watcher)', async () => {\n\t\tawait testCorrelatedWatchFolderDoesNotExist(true);\n\t});\n\n\tasync function testCorrelatedWatchFolderDoesNotExist(reuseExistingWatcher: boolean) {\n\t\tlet onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\n\t\tconst folderPath = join(testDir, 'not-found');\n\n\t\tconst requests: IRecursiveWatchRequest[] = [];\n\t\tif (reuseExistingWatcher) {\n\t\t\trequests.push({ path: testDir, excludes: [], recursive: true });\n\t\t\tawait watcher.watch(requests);\n\t\t}\n\n\t\tconst request: IRecursiveWatchRequest = { path: folderPath, excludes: [], recursive: true, correlationId: 1 };\n\t\trequests.push(request);\n\n\t\tawait watcher.watch(requests);\n\t\tawait onDidWatchFail;\n\n\t\tif (reuseExistingWatcher) {\n\t\t\tassert.strictEqual(watcher.isSuspended(request), true);\n\t\t} else {\n\t\t\tassert.strictEqual(watcher.isSuspended(request), 'polling');\n\t\t}\n\n\t\tlet changeFuture = awaitEvent(watcher, folderPath, FileChangeType.ADDED, undefined, 1);\n\t\tlet onDidWatch = Event.toPromise(watcher.onDidWatch);\n\t\tawait promises.mkdir(folderPath);\n\t\tawait changeFuture;\n\t\tawait onDidWatch;\n\n\t\tassert.strictEqual(watcher.isSuspended(request), false);\n\n\t\tconst filePath = join(folderPath, 'newFile.txt');\n\t\tawait basicCrudTest(filePath, 1);\n\n\t\tonDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tawait Promises.rm(folderPath);\n\t\tawait onDidWatchFail;\n\n\t\tchangeFuture = awaitEvent(watcher, folderPath, FileChangeType.ADDED, undefined, 1);\n\t\tonDidWatch = Event.toPromise(watcher.onDidWatch);\n\t\tawait promises.mkdir(folderPath);\n\t\tawait changeFuture;\n\t\tawait onDidWatch;\n\n\t\tawait basicCrudTest(filePath, 1);\n\t}\n\n\ttest('correlated watch requests support suspend/resume (folder, exist in beginning, not reusing watcher)', async () => {\n\t\tawait testCorrelatedWatchFolderExists(false);\n\t});\n\n\t(!isMacintosh /* Linux/Windows: times out for some reason */ ? test.skip : test)('correlated watch requests support suspend/resume (folder, exist in beginning, reusing watcher)', async () => {\n\t\tawait testCorrelatedWatchFolderExists(true);\n\t});\n\n\tasync function testCorrelatedWatchFolderExists(reuseExistingWatcher: boolean) {\n\t\tconst folderPath = join(testDir, 'deep');\n\n\t\tconst requests: IRecursiveWatchRequest[] = [{ path: folderPath, excludes: [], recursive: true, correlationId: 1 }];\n\t\tif (reuseExistingWatcher) {\n\t\t\trequests.push({ path: testDir, excludes: [], recursive: true });\n\t\t}\n\n\t\tawait watcher.watch(requests);\n\n\t\tconst filePath = join(folderPath, 'newFile.txt');\n\t\tawait basicCrudTest(filePath, 1);\n\n\t\tconst onDidWatchFail = Event.toPromise(watcher.onWatchFail);\n\t\tawait Promises.rm(folderPath);\n\t\tawait onDidWatchFail;\n\n\t\tconst changeFuture = awaitEvent(watcher, folderPath, FileChangeType.ADDED, undefined, 1);\n\t\tconst onDidWatch = Event.toPromise(watcher.onDidWatch);\n\t\tawait promises.mkdir(folderPath);\n\t\tawait changeFuture;\n\t\tawait onDidWatch;\n\n\t\tawait basicCrudTest(filePath, 1);\n\t}\n\n\ttest('watch request reuses another recursive watcher even when requests are coming in at the same time', async function () {\n\t\tconst folderPath1 = join(testDir, 'deep', 'not-existing1');\n\t\tconst folderPath2 = join(testDir, 'deep', 'not-existing2');\n\t\tconst folderPath3 = join(testDir, 'not-existing3');\n\n\t\tconst requests: IRecursiveWatchRequest[] = [\n\t\t\t{ path: folderPath1, excludes: [], recursive: true, correlationId: 1 },\n\t\t\t{ path: folderPath2, excludes: [], recursive: true, correlationId: 2 },\n\t\t\t{ path: folderPath3, excludes: [], recursive: true, correlationId: 3 },\n\t\t\t{ path: join(testDir, 'deep'), excludes: [], recursive: true }\n\t\t];\n\n\t\tawait watcher.watch(requests);\n\n\t\tassert.strictEqual(watcher.isSuspended(requests[0]), true);\n\t\tassert.strictEqual(watcher.isSuspended(requests[1]), true);\n\t\tassert.strictEqual(watcher.isSuspended(requests[2]), 'polling');\n\t\tassert.strictEqual(watcher.isSuspended(requests[3]), false);\n\t});\n\n\ttest('event type filter', async function () {\n\t\tconst request = { path: testDir, excludes: [], recursive: true, filter: FileChangeFilter.ADDED | FileChangeFilter.DELETED, correlationId: 1 };\n\t\tawait watcher.watch([request]);\n\n\t\t// Change file\n\t\tconst filePath = join(testDir, 'lorem-newfile.txt');\n\t\tlet changeFuture = awaitEvent(watcher, filePath, FileChangeType.ADDED, undefined, 1);\n\t\tawait Promises.writeFile(filePath, 'Hello Change');\n\t\tawait changeFuture;\n\n\t\t// Delete file\n\t\tchangeFuture = awaitEvent(watcher, filePath, FileChangeType.DELETED, undefined, 1);\n\t\tawait promises.unlink(filePath);\n\t\tawait changeFuture;\n\t});\n});\n"],
  "mappings": "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",
  "names": ["watcher"]
}
