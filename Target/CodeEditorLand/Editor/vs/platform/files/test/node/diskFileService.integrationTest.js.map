{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/test/node/diskFileService.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { createReadStream, existsSync, readdirSync, readFileSync, statSync, writeFileSync, promises } from 'fs';\nimport { tmpdir } from 'os';\nimport { timeout } from '../../../../base/common/async.js';\nimport { bufferToReadable, bufferToStream, streamToBuffer, streamToBufferReadableStream, VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { FileAccess, Schemas } from '../../../../base/common/network.js';\nimport { basename, dirname, join, posix } from '../../../../base/common/path.js';\nimport { isLinux, isWindows } from '../../../../base/common/platform.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Promises } from '../../../../base/node/pfs.js';\nimport { flakySuite, getRandomTestPath } from '../../../../base/test/node/testUtils.js';\nimport { etag, IFileAtomicReadOptions, FileOperation, FileOperationError, FileOperationEvent, FileOperationResult, FilePermission, FileSystemProviderCapabilities, hasFileAtomicReadCapability, hasOpenReadWriteCloseCapability, IFileStat, IFileStatWithMetadata, IReadFileOptions, IStat, NotModifiedSinceFileOperationError, TooLargeFileOperationError, IFileAtomicOptions } from '../../common/files.js';\nimport { FileService } from '../../common/fileService.js';\nimport { DiskFileSystemProvider } from '../../node/diskFileSystemProvider.js';\nimport { NullLogService } from '../../../log/common/log.js';\nimport { isESM } from '../../../../base/common/amd.js';\n\nfunction getByName(root: IFileStat, name: string): IFileStat | undefined {\n\tif (root.children === undefined) {\n\t\treturn undefined;\n\t}\n\n\treturn root.children.find(child => child.name === name);\n}\n\nfunction toLineByLineReadable(content: string): VSBufferReadable {\n\tlet chunks = content.split('\\n');\n\tchunks = chunks.map((chunk, index) => {\n\t\tif (index === 0) {\n\t\t\treturn chunk;\n\t\t}\n\n\t\treturn '\\n' + chunk;\n\t});\n\n\treturn {\n\t\tread(): VSBuffer | null {\n\t\t\tconst chunk = chunks.shift();\n\t\t\tif (typeof chunk === 'string') {\n\t\t\t\treturn VSBuffer.fromString(chunk);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t};\n}\n\nexport class TestDiskFileSystemProvider extends DiskFileSystemProvider {\n\n\ttotalBytesRead: number = 0;\n\n\tprivate invalidStatSize: boolean = false;\n\tprivate smallStatSize: boolean = false;\n\tprivate readonly: boolean = false;\n\n\tprivate _testCapabilities!: FileSystemProviderCapabilities;\n\toverride get capabilities(): FileSystemProviderCapabilities {\n\t\tif (!this._testCapabilities) {\n\t\t\tthis._testCapabilities =\n\t\t\t\tFileSystemProviderCapabilities.FileReadWrite |\n\t\t\t\tFileSystemProviderCapabilities.FileOpenReadWriteClose |\n\t\t\t\tFileSystemProviderCapabilities.FileReadStream |\n\t\t\t\tFileSystemProviderCapabilities.Trash |\n\t\t\t\tFileSystemProviderCapabilities.FileFolderCopy |\n\t\t\t\tFileSystemProviderCapabilities.FileWriteUnlock |\n\t\t\t\tFileSystemProviderCapabilities.FileAtomicRead |\n\t\t\t\tFileSystemProviderCapabilities.FileAtomicWrite |\n\t\t\t\tFileSystemProviderCapabilities.FileAtomicDelete |\n\t\t\t\tFileSystemProviderCapabilities.FileClone;\n\n\t\t\tif (isLinux) {\n\t\t\t\tthis._testCapabilities |= FileSystemProviderCapabilities.PathCaseSensitive;\n\t\t\t}\n\t\t}\n\n\t\treturn this._testCapabilities;\n\t}\n\n\toverride set capabilities(capabilities: FileSystemProviderCapabilities) {\n\t\tthis._testCapabilities = capabilities;\n\t}\n\n\tsetInvalidStatSize(enabled: boolean): void {\n\t\tthis.invalidStatSize = enabled;\n\t}\n\n\tsetSmallStatSize(enabled: boolean): void {\n\t\tthis.smallStatSize = enabled;\n\t}\n\n\tsetReadonly(readonly: boolean): void {\n\t\tthis.readonly = readonly;\n\t}\n\n\toverride async stat(resource: URI): Promise<IStat> {\n\t\tconst res = await super.stat(resource);\n\n\t\tif (this.invalidStatSize) {\n\t\t\t(res as any).size = String(res.size) as any; // for https://github.com/microsoft/vscode/issues/72909\n\t\t} else if (this.smallStatSize) {\n\t\t\t(res as any).size = 1;\n\t\t} else if (this.readonly) {\n\t\t\t(res as any).permissions = FilePermission.Readonly;\n\t\t}\n\n\t\treturn res;\n\t}\n\n\toverride async read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\tconst bytesRead = await super.read(fd, pos, data, offset, length);\n\n\t\tthis.totalBytesRead += bytesRead;\n\n\t\treturn bytesRead;\n\t}\n\n\toverride async readFile(resource: URI, options?: IFileAtomicReadOptions): Promise<Uint8Array> {\n\t\tconst res = await super.readFile(resource, options);\n\n\t\tthis.totalBytesRead += res.byteLength;\n\n\t\treturn res;\n\t}\n}\n\nDiskFileSystemProvider.configureFlushOnWrite(false); // speed up all unit tests by disabling flush on write\n\n(!isESM ? suite.skip : flakySuite /* somehow fails in AMD with ENOENT for fixtures dir */)('Disk File Service', function () {\n\n\tconst testSchema = 'test';\n\n\tlet service: FileService;\n\tlet fileProvider: TestDiskFileSystemProvider;\n\tlet testProvider: TestDiskFileSystemProvider;\n\n\tlet testDir: string;\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\n\t\tservice = disposables.add(new FileService(logService));\n\n\t\tfileProvider = disposables.add(new TestDiskFileSystemProvider(logService));\n\t\tdisposables.add(service.registerProvider(Schemas.file, fileProvider));\n\n\t\ttestProvider = disposables.add(new TestDiskFileSystemProvider(logService));\n\t\tdisposables.add(service.registerProvider(testSchema, testProvider));\n\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'diskfileservice');\n\n\t\tconst sourceDir = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/service').fsPath;\n\n\t\tawait Promises.copy(sourceDir, testDir, { preserveSymlinks: false });\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\n\t\treturn Promises.rm(testDir);\n\t});\n\n\ttest('createFolder', async () => {\n\t\tlet event: FileOperationEvent | undefined;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst parent = await service.resolve(URI.file(testDir));\n\n\t\tconst newFolderResource = URI.file(join(parent.resource.fsPath, 'newFolder'));\n\n\t\tconst newFolder = await service.createFolder(newFolderResource);\n\n\t\tassert.strictEqual(newFolder.name, 'newFolder');\n\t\tassert.strictEqual(existsSync(newFolder.resource.fsPath), true);\n\n\t\tassert.ok(event);\n\t\tassert.strictEqual(event.resource.fsPath, newFolderResource.fsPath);\n\t\tassert.strictEqual(event.operation, FileOperation.CREATE);\n\t\tassert.strictEqual(event.target!.resource.fsPath, newFolderResource.fsPath);\n\t\tassert.strictEqual(event.target!.isDirectory, true);\n\t});\n\n\ttest('createFolder: creating multiple folders at once', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst multiFolderPaths = ['a', 'couple', 'of', 'folders'];\n\t\tconst parent = await service.resolve(URI.file(testDir));\n\n\t\tconst newFolderResource = URI.file(join(parent.resource.fsPath, ...multiFolderPaths));\n\n\t\tconst newFolder = await service.createFolder(newFolderResource);\n\n\t\tconst lastFolderName = multiFolderPaths[multiFolderPaths.length - 1];\n\t\tassert.strictEqual(newFolder.name, lastFolderName);\n\t\tassert.strictEqual(existsSync(newFolder.resource.fsPath), true);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, newFolderResource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.CREATE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, newFolderResource.fsPath);\n\t\tassert.strictEqual(event!.target!.isDirectory, true);\n\t});\n\n\ttest('exists', async () => {\n\t\tlet exists = await service.exists(URI.file(testDir));\n\t\tassert.strictEqual(exists, true);\n\n\t\texists = await service.exists(URI.file(testDir + 'something'));\n\t\tassert.strictEqual(exists, false);\n\t});\n\n\ttest('resolve - file', async () => {\n\t\tconst resource = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/resolver/index.html');\n\t\tconst resolved = await service.resolve(resource);\n\n\t\tassert.strictEqual(resolved.name, 'index.html');\n\t\tassert.strictEqual(resolved.isFile, true);\n\t\tassert.strictEqual(resolved.isDirectory, false);\n\t\tassert.strictEqual(resolved.readonly, false);\n\t\tassert.strictEqual(resolved.isSymbolicLink, false);\n\t\tassert.strictEqual(resolved.resource.toString(), resource.toString());\n\t\tassert.strictEqual(resolved.children, undefined);\n\t\tassert.ok(resolved.mtime! > 0);\n\t\tassert.ok(resolved.ctime! > 0);\n\t\tassert.ok(resolved.size! > 0);\n\t});\n\n\ttest('resolve - directory', async () => {\n\t\tconst testsElements = ['examples', 'other', 'index.html', 'site.css'];\n\n\t\tconst resource = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/resolver');\n\t\tconst result = await service.resolve(resource);\n\n\t\tassert.ok(result);\n\t\tassert.strictEqual(result.resource.toString(), resource.toString());\n\t\tassert.strictEqual(result.name, 'resolver');\n\t\tassert.ok(result.children);\n\t\tassert.ok(result.children.length > 0);\n\t\tassert.ok(result.isDirectory);\n\t\tassert.strictEqual(result.readonly, false);\n\t\tassert.ok(result.mtime! > 0);\n\t\tassert.ok(result.ctime! > 0);\n\t\tassert.strictEqual(result.children.length, testsElements.length);\n\n\t\tassert.ok(result.children.every(entry => {\n\t\t\treturn testsElements.some(name => {\n\t\t\t\treturn basename(entry.resource.fsPath) === name;\n\t\t\t});\n\t\t}));\n\n\t\tresult.children.forEach(value => {\n\t\t\tassert.ok(basename(value.resource.fsPath));\n\t\t\tif (['examples', 'other'].indexOf(basename(value.resource.fsPath)) >= 0) {\n\t\t\t\tassert.ok(value.isDirectory);\n\t\t\t\tassert.strictEqual(value.mtime, undefined);\n\t\t\t\tassert.strictEqual(value.ctime, undefined);\n\t\t\t} else if (basename(value.resource.fsPath) === 'index.html') {\n\t\t\t\tassert.ok(!value.isDirectory);\n\t\t\t\tassert.ok(!value.children);\n\t\t\t\tassert.strictEqual(value.mtime, undefined);\n\t\t\t\tassert.strictEqual(value.ctime, undefined);\n\t\t\t} else if (basename(value.resource.fsPath) === 'site.css') {\n\t\t\t\tassert.ok(!value.isDirectory);\n\t\t\t\tassert.ok(!value.children);\n\t\t\t\tassert.strictEqual(value.mtime, undefined);\n\t\t\t\tassert.strictEqual(value.ctime, undefined);\n\t\t\t} else {\n\t\t\t\tassert.fail('Unexpected value ' + basename(value.resource.fsPath));\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('resolve - directory - with metadata', async () => {\n\t\tconst testsElements = ['examples', 'other', 'index.html', 'site.css'];\n\n\t\tconst result = await service.resolve(FileAccess.asFileUri('vs/platform/files/test/node/fixtures/resolver'), { resolveMetadata: true });\n\n\t\tassert.ok(result);\n\t\tassert.strictEqual(result.name, 'resolver');\n\t\tassert.ok(result.children);\n\t\tassert.ok(result.children.length > 0);\n\t\tassert.ok(result.isDirectory);\n\t\tassert.ok(result.mtime > 0);\n\t\tassert.ok(result.ctime > 0);\n\t\tassert.strictEqual(result.children.length, testsElements.length);\n\n\t\tassert.ok(result.children.every(entry => {\n\t\t\treturn testsElements.some(name => {\n\t\t\t\treturn basename(entry.resource.fsPath) === name;\n\t\t\t});\n\t\t}));\n\n\t\tassert.ok(result.children.every(entry => entry.etag.length > 0));\n\n\t\tresult.children.forEach(value => {\n\t\t\tassert.ok(basename(value.resource.fsPath));\n\t\t\tif (['examples', 'other'].indexOf(basename(value.resource.fsPath)) >= 0) {\n\t\t\t\tassert.ok(value.isDirectory);\n\t\t\t\tassert.ok(value.mtime > 0);\n\t\t\t\tassert.ok(value.ctime > 0);\n\t\t\t} else if (basename(value.resource.fsPath) === 'index.html') {\n\t\t\t\tassert.ok(!value.isDirectory);\n\t\t\t\tassert.ok(!value.children);\n\t\t\t\tassert.ok(value.mtime > 0);\n\t\t\t\tassert.ok(value.ctime > 0);\n\t\t\t} else if (basename(value.resource.fsPath) === 'site.css') {\n\t\t\t\tassert.ok(!value.isDirectory);\n\t\t\t\tassert.ok(!value.children);\n\t\t\t\tassert.ok(value.mtime > 0);\n\t\t\t\tassert.ok(value.ctime > 0);\n\t\t\t} else {\n\t\t\t\tassert.fail('Unexpected value ' + basename(value.resource.fsPath));\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('resolve - directory with resolveTo', async () => {\n\t\tconst resolved = await service.resolve(URI.file(testDir), { resolveTo: [URI.file(join(testDir, 'deep'))] });\n\t\tassert.strictEqual(resolved.children!.length, 8);\n\n\t\tconst deep = (getByName(resolved, 'deep')!);\n\t\tassert.strictEqual(deep.children!.length, 4);\n\t});\n\n\ttest('resolve - directory - resolveTo single directory', async () => {\n\t\tconst resolverFixturesPath = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/resolver').fsPath;\n\t\tconst result = await service.resolve(URI.file(resolverFixturesPath), { resolveTo: [URI.file(join(resolverFixturesPath, 'other/deep'))] });\n\n\t\tassert.ok(result);\n\t\tassert.ok(result.children);\n\t\tassert.ok(result.children.length > 0);\n\t\tassert.ok(result.isDirectory);\n\n\t\tconst children = result.children;\n\t\tassert.strictEqual(children.length, 4);\n\n\t\tconst other = getByName(result, 'other');\n\t\tassert.ok(other);\n\t\tassert.ok(other.children!.length > 0);\n\n\t\tconst deep = getByName(other, 'deep');\n\t\tassert.ok(deep);\n\t\tassert.ok(deep.children!.length > 0);\n\t\tassert.strictEqual(deep.children!.length, 4);\n\t});\n\n\ttest('resolve directory - resolveTo multiple directories', () => {\n\t\treturn testResolveDirectoryWithTarget(false);\n\t});\n\n\ttest('resolve directory - resolveTo with a URI that has query parameter (https://github.com/microsoft/vscode/issues/128151)', () => {\n\t\treturn testResolveDirectoryWithTarget(true);\n\t});\n\n\tasync function testResolveDirectoryWithTarget(withQueryParam: boolean): Promise<void> {\n\t\tconst resolverFixturesPath = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/resolver').fsPath;\n\t\tconst result = await service.resolve(URI.file(resolverFixturesPath).with({ query: withQueryParam ? 'test' : undefined }), {\n\t\t\tresolveTo: [\n\t\t\t\tURI.file(join(resolverFixturesPath, 'other/deep')).with({ query: withQueryParam ? 'test' : undefined }),\n\t\t\t\tURI.file(join(resolverFixturesPath, 'examples')).with({ query: withQueryParam ? 'test' : undefined })\n\t\t\t]\n\t\t});\n\n\t\tassert.ok(result);\n\t\tassert.ok(result.children);\n\t\tassert.ok(result.children.length > 0);\n\t\tassert.ok(result.isDirectory);\n\n\t\tconst children = result.children;\n\t\tassert.strictEqual(children.length, 4);\n\n\t\tconst other = getByName(result, 'other');\n\t\tassert.ok(other);\n\t\tassert.ok(other.children!.length > 0);\n\n\t\tconst deep = getByName(other, 'deep');\n\t\tassert.ok(deep);\n\t\tassert.ok(deep.children!.length > 0);\n\t\tassert.strictEqual(deep.children!.length, 4);\n\n\t\tconst examples = getByName(result, 'examples');\n\t\tassert.ok(examples);\n\t\tassert.ok(examples.children!.length > 0);\n\t\tassert.strictEqual(examples.children!.length, 4);\n\t}\n\n\ttest('resolve directory - resolveSingleChildFolders', async () => {\n\t\tconst resolverFixturesPath = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/resolver/other').fsPath;\n\t\tconst result = await service.resolve(URI.file(resolverFixturesPath), { resolveSingleChildDescendants: true });\n\n\t\tassert.ok(result);\n\t\tassert.ok(result.children);\n\t\tassert.ok(result.children.length > 0);\n\t\tassert.ok(result.isDirectory);\n\n\t\tconst children = result.children;\n\t\tassert.strictEqual(children.length, 1);\n\n\t\tconst deep = getByName(result, 'deep');\n\t\tassert.ok(deep);\n\t\tassert.ok(deep.children!.length > 0);\n\t\tassert.strictEqual(deep.children!.length, 4);\n\t});\n\n\ttest('resolves', async () => {\n\t\tconst res = await service.resolveAll([\n\t\t\t{ resource: URI.file(testDir), options: { resolveTo: [URI.file(join(testDir, 'deep'))] } },\n\t\t\t{ resource: URI.file(join(testDir, 'deep')) }\n\t\t]);\n\n\t\tconst r1 = (res[0].stat!);\n\t\tassert.strictEqual(r1.children!.length, 8);\n\n\t\tconst deep = (getByName(r1, 'deep')!);\n\t\tassert.strictEqual(deep.children!.length, 4);\n\n\t\tconst r2 = (res[1].stat!);\n\t\tassert.strictEqual(r2.children!.length, 4);\n\t\tassert.strictEqual(r2.name, 'deep');\n\t});\n\n\ttest('resolve - folder symbolic link', async () => {\n\t\tconst link = URI.file(join(testDir, 'deep-link'));\n\t\tawait promises.symlink(join(testDir, 'deep'), link.fsPath, 'junction');\n\n\t\tconst resolved = await service.resolve(link);\n\t\tassert.strictEqual(resolved.children!.length, 4);\n\t\tassert.strictEqual(resolved.isDirectory, true);\n\t\tassert.strictEqual(resolved.isSymbolicLink, true);\n\t});\n\n\t(isWindows ? test.skip /* windows: cannot create file symbolic link without elevated context */ : test)('resolve - file symbolic link', async () => {\n\t\tconst link = URI.file(join(testDir, 'lorem.txt-linked'));\n\t\tawait promises.symlink(join(testDir, 'lorem.txt'), link.fsPath);\n\n\t\tconst resolved = await service.resolve(link);\n\t\tassert.strictEqual(resolved.isDirectory, false);\n\t\tassert.strictEqual(resolved.isSymbolicLink, true);\n\t});\n\n\ttest('resolve - symbolic link pointing to nonexistent file does not break', async () => {\n\t\tawait promises.symlink(join(testDir, 'foo'), join(testDir, 'bar'), 'junction');\n\n\t\tconst resolved = await service.resolve(URI.file(testDir));\n\t\tassert.strictEqual(resolved.isDirectory, true);\n\t\tassert.strictEqual(resolved.children!.length, 9);\n\n\t\tconst resolvedLink = resolved.children?.find(child => child.name === 'bar' && child.isSymbolicLink);\n\t\tassert.ok(resolvedLink);\n\n\t\tassert.ok(!resolvedLink?.isDirectory);\n\t\tassert.ok(!resolvedLink?.isFile);\n\t});\n\n\ttest('stat - file', async () => {\n\t\tconst resource = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/resolver/index.html');\n\t\tconst resolved = await service.stat(resource);\n\n\t\tassert.strictEqual(resolved.name, 'index.html');\n\t\tassert.strictEqual(resolved.isFile, true);\n\t\tassert.strictEqual(resolved.isDirectory, false);\n\t\tassert.strictEqual(resolved.readonly, false);\n\t\tassert.strictEqual(resolved.isSymbolicLink, false);\n\t\tassert.strictEqual(resolved.resource.toString(), resource.toString());\n\t\tassert.ok(resolved.mtime > 0);\n\t\tassert.ok(resolved.ctime > 0);\n\t\tassert.ok(resolved.size > 0);\n\t});\n\n\ttest('stat - directory', async () => {\n\t\tconst resource = FileAccess.asFileUri('vs/platform/files/test/node/fixtures/resolver');\n\t\tconst result = await service.stat(resource);\n\n\t\tassert.ok(result);\n\t\tassert.strictEqual(result.resource.toString(), resource.toString());\n\t\tassert.strictEqual(result.name, 'resolver');\n\t\tassert.ok(result.isDirectory);\n\t\tassert.strictEqual(result.readonly, false);\n\t\tassert.ok(result.mtime > 0);\n\t\tassert.ok(result.ctime > 0);\n\t});\n\n\ttest('deleteFile (non recursive)', async () => {\n\t\treturn testDeleteFile(false, false);\n\t});\n\n\ttest('deleteFile (recursive)', async () => {\n\t\treturn testDeleteFile(false, true);\n\t});\n\n\t(isLinux /* trash is unreliable on Linux */ ? test.skip : test)('deleteFile (useTrash)', async () => {\n\t\treturn testDeleteFile(true, false);\n\t});\n\n\tasync function testDeleteFile(useTrash: boolean, recursive: boolean): Promise<void> {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst resource = URI.file(join(testDir, 'deep', 'conway.js'));\n\t\tconst source = await service.resolve(resource);\n\n\t\tassert.strictEqual(await service.canDelete(source.resource, { useTrash, recursive }), true);\n\t\tawait service.del(source.resource, { useTrash, recursive });\n\n\t\tassert.strictEqual(existsSync(source.resource.fsPath), false);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.DELETE);\n\n\t\tlet error: Error | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.del(source.resource, { useTrash, recursive });\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual((<FileOperationError>error).fileOperationResult, FileOperationResult.FILE_NOT_FOUND);\n\t}\n\n\t(isWindows ? test.skip /* windows: cannot create file symbolic link without elevated context */ : test)('deleteFile - symbolic link (exists)', async () => {\n\t\tconst target = URI.file(join(testDir, 'lorem.txt'));\n\t\tconst link = URI.file(join(testDir, 'lorem.txt-linked'));\n\t\tawait promises.symlink(target.fsPath, link.fsPath);\n\n\t\tconst source = await service.resolve(link);\n\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tassert.strictEqual(await service.canDelete(source.resource), true);\n\t\tawait service.del(source.resource);\n\n\t\tassert.strictEqual(existsSync(source.resource.fsPath), false);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, link.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.DELETE);\n\n\t\tassert.strictEqual(existsSync(target.fsPath), true); // target the link pointed to is never deleted\n\t});\n\n\t(isWindows ? test.skip /* windows: cannot create file symbolic link without elevated context */ : test)('deleteFile - symbolic link (pointing to nonexistent file)', async () => {\n\t\tconst target = URI.file(join(testDir, 'foo'));\n\t\tconst link = URI.file(join(testDir, 'bar'));\n\t\tawait promises.symlink(target.fsPath, link.fsPath);\n\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tassert.strictEqual(await service.canDelete(link), true);\n\t\tawait service.del(link);\n\n\t\tassert.strictEqual(existsSync(link.fsPath), false);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, link.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.DELETE);\n\t});\n\n\ttest('deleteFolder (recursive)', async () => {\n\t\treturn testDeleteFolderRecursive(false, false);\n\t});\n\n\ttest('deleteFolder (recursive, atomic)', async () => {\n\t\treturn testDeleteFolderRecursive(false, { postfix: '.vsctmp' });\n\t});\n\n\t(isLinux /* trash is unreliable on Linux */ ? test.skip : test)('deleteFolder (recursive, useTrash)', async () => {\n\t\treturn testDeleteFolderRecursive(true, false);\n\t});\n\n\tasync function testDeleteFolderRecursive(useTrash: boolean, atomic: IFileAtomicOptions | false): Promise<void> {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst resource = URI.file(join(testDir, 'deep'));\n\t\tconst source = await service.resolve(resource);\n\n\t\tassert.strictEqual(await service.canDelete(source.resource, { recursive: true, useTrash, atomic }), true);\n\t\tawait service.del(source.resource, { recursive: true, useTrash, atomic });\n\n\t\tassert.strictEqual(existsSync(source.resource.fsPath), false);\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.DELETE);\n\t}\n\n\ttest('deleteFolder (non recursive)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'deep'));\n\t\tconst source = await service.resolve(resource);\n\n\t\tassert.ok((await service.canDelete(source.resource)) instanceof Error);\n\n\t\tlet error;\n\t\ttry {\n\t\t\tawait service.del(source.resource);\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error);\n\t});\n\n\ttest('deleteFolder empty folder (recursive)', () => {\n\t\treturn testDeleteEmptyFolder(true);\n\t});\n\n\ttest('deleteFolder empty folder (non recursive)', () => {\n\t\treturn testDeleteEmptyFolder(false);\n\t});\n\n\tasync function testDeleteEmptyFolder(recursive: boolean): Promise<void> {\n\t\tconst { resource } = await service.createFolder(URI.file(join(testDir, 'deep', 'empty')));\n\n\t\tawait service.del(resource, { recursive });\n\n\t\tassert.strictEqual(await service.exists(resource), false);\n\t}\n\n\ttest('move', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = URI.file(join(testDir, 'index.html'));\n\t\tconst sourceContents = readFileSync(source.fsPath);\n\n\t\tconst target = URI.file(join(dirname(source.fsPath), 'other.html'));\n\n\t\tassert.strictEqual(await service.canMove(source, target), true);\n\t\tconst renamed = await service.move(source, target);\n\n\t\tassert.strictEqual(existsSync(renamed.resource.fsPath), true);\n\t\tassert.strictEqual(existsSync(source.fsPath), false);\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.MOVE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, renamed.resource.fsPath);\n\n\t\tconst targetContents = readFileSync(target.fsPath);\n\n\t\tassert.strictEqual(sourceContents.byteLength, targetContents.byteLength);\n\t\tassert.strictEqual(sourceContents.toString(), targetContents.toString());\n\t});\n\n\ttest('move - across providers (buffered => buffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testMoveAcrossProviders();\n\t});\n\n\ttest('move - across providers (unbuffered => unbuffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testMoveAcrossProviders();\n\t});\n\n\ttest('move - across providers (buffered => unbuffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testMoveAcrossProviders();\n\t});\n\n\ttest('move - across providers (unbuffered => buffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testMoveAcrossProviders();\n\t});\n\n\ttest('move - across providers - large (buffered => buffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testMoveAcrossProviders('lorem.txt');\n\t});\n\n\ttest('move - across providers - large (unbuffered => unbuffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testMoveAcrossProviders('lorem.txt');\n\t});\n\n\ttest('move - across providers - large (buffered => unbuffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testMoveAcrossProviders('lorem.txt');\n\t});\n\n\ttest('move - across providers - large (unbuffered => buffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testMoveAcrossProviders('lorem.txt');\n\t});\n\n\tasync function testMoveAcrossProviders(sourceFile = 'index.html'): Promise<void> {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = URI.file(join(testDir, sourceFile));\n\t\tconst sourceContents = readFileSync(source.fsPath);\n\n\t\tconst target = URI.file(join(dirname(source.fsPath), 'other.html')).with({ scheme: testSchema });\n\n\t\tassert.strictEqual(await service.canMove(source, target), true);\n\t\tconst renamed = await service.move(source, target);\n\n\t\tassert.strictEqual(existsSync(renamed.resource.fsPath), true);\n\t\tassert.strictEqual(existsSync(source.fsPath), false);\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.COPY);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, renamed.resource.fsPath);\n\n\t\tconst targetContents = readFileSync(target.fsPath);\n\n\t\tassert.strictEqual(sourceContents.byteLength, targetContents.byteLength);\n\t\tassert.strictEqual(sourceContents.toString(), targetContents.toString());\n\t}\n\n\ttest('move - multi folder', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst multiFolderPaths = ['a', 'couple', 'of', 'folders'];\n\t\tconst renameToPath = join(...multiFolderPaths, 'other.html');\n\n\t\tconst source = URI.file(join(testDir, 'index.html'));\n\n\t\tassert.strictEqual(await service.canMove(source, URI.file(join(dirname(source.fsPath), renameToPath))), true);\n\t\tconst renamed = await service.move(source, URI.file(join(dirname(source.fsPath), renameToPath)));\n\n\t\tassert.strictEqual(existsSync(renamed.resource.fsPath), true);\n\t\tassert.strictEqual(existsSync(source.fsPath), false);\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.MOVE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, renamed.resource.fsPath);\n\t});\n\n\ttest('move - directory', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = URI.file(join(testDir, 'deep'));\n\n\t\tassert.strictEqual(await service.canMove(source, URI.file(join(dirname(source.fsPath), 'deeper'))), true);\n\t\tconst renamed = await service.move(source, URI.file(join(dirname(source.fsPath), 'deeper')));\n\n\t\tassert.strictEqual(existsSync(renamed.resource.fsPath), true);\n\t\tassert.strictEqual(existsSync(source.fsPath), false);\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.MOVE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, renamed.resource.fsPath);\n\t});\n\n\ttest('move - directory - across providers (buffered => buffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testMoveFolderAcrossProviders();\n\t});\n\n\ttest('move - directory - across providers (unbuffered => unbuffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testMoveFolderAcrossProviders();\n\t});\n\n\ttest('move - directory - across providers (buffered => unbuffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testMoveFolderAcrossProviders();\n\t});\n\n\ttest('move - directory - across providers (unbuffered => buffered)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\t\tsetCapabilities(testProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testMoveFolderAcrossProviders();\n\t});\n\n\tasync function testMoveFolderAcrossProviders(): Promise<void> {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = URI.file(join(testDir, 'deep'));\n\t\tconst sourceChildren = readdirSync(source.fsPath);\n\n\t\tconst target = URI.file(join(dirname(source.fsPath), 'deeper')).with({ scheme: testSchema });\n\n\t\tassert.strictEqual(await service.canMove(source, target), true);\n\t\tconst renamed = await service.move(source, target);\n\n\t\tassert.strictEqual(existsSync(renamed.resource.fsPath), true);\n\t\tassert.strictEqual(existsSync(source.fsPath), false);\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.COPY);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, renamed.resource.fsPath);\n\n\t\tconst targetChildren = readdirSync(target.fsPath);\n\t\tassert.strictEqual(sourceChildren.length, targetChildren.length);\n\t\tfor (let i = 0; i < sourceChildren.length; i++) {\n\t\t\tassert.strictEqual(sourceChildren[i], targetChildren[i]);\n\t\t}\n\t}\n\n\ttest('move - MIX CASE', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tassert.ok(source.size > 0);\n\n\t\tconst renamedResource = URI.file(join(dirname(source.resource.fsPath), 'INDEX.html'));\n\t\tassert.strictEqual(await service.canMove(source.resource, renamedResource), true);\n\t\tlet renamed = await service.move(source.resource, renamedResource);\n\n\t\tassert.strictEqual(existsSync(renamedResource.fsPath), true);\n\t\tassert.strictEqual(basename(renamedResource.fsPath), 'INDEX.html');\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.MOVE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, renamedResource.fsPath);\n\n\t\trenamed = await service.resolve(renamedResource, { resolveMetadata: true });\n\t\tassert.strictEqual(source.size, renamed.size);\n\t});\n\n\ttest('move - same file', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tassert.ok(source.size > 0);\n\n\t\tassert.strictEqual(await service.canMove(source.resource, URI.file(source.resource.fsPath)), true);\n\t\tlet renamed = await service.move(source.resource, URI.file(source.resource.fsPath));\n\n\t\tassert.strictEqual(existsSync(renamed.resource.fsPath), true);\n\t\tassert.strictEqual(basename(renamed.resource.fsPath), 'index.html');\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.MOVE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, renamed.resource.fsPath);\n\n\t\trenamed = await service.resolve(renamed.resource, { resolveMetadata: true });\n\t\tassert.strictEqual(source.size, renamed.size);\n\t});\n\n\ttest('move - same file #2', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tassert.ok(source.size > 0);\n\n\t\tconst targetParent = URI.file(testDir);\n\t\tconst target = targetParent.with({ path: posix.join(targetParent.path, posix.basename(source.resource.path)) });\n\n\t\tassert.strictEqual(await service.canMove(source.resource, target), true);\n\t\tlet renamed = await service.move(source.resource, target);\n\n\t\tassert.strictEqual(existsSync(renamed.resource.fsPath), true);\n\t\tassert.strictEqual(basename(renamed.resource.fsPath), 'index.html');\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.MOVE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, renamed.resource.fsPath);\n\n\t\trenamed = await service.resolve(renamed.resource, { resolveMetadata: true });\n\t\tassert.strictEqual(source.size, renamed.size);\n\t});\n\n\ttest('move - source parent of target', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tlet source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tconst originalSize = source.size;\n\t\tassert.ok(originalSize > 0);\n\n\t\tassert.ok((await service.canMove(URI.file(testDir), URI.file(join(testDir, 'binary.txt'))) instanceof Error));\n\n\t\tlet error;\n\t\ttry {\n\t\t\tawait service.move(URI.file(testDir), URI.file(join(testDir, 'binary.txt')));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.ok(!event!);\n\n\t\tsource = await service.resolve(source.resource, { resolveMetadata: true });\n\t\tassert.strictEqual(originalSize, source.size);\n\t});\n\n\ttest('move - FILE_MOVE_CONFLICT', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tlet source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tconst originalSize = source.size;\n\t\tassert.ok(originalSize > 0);\n\n\t\tassert.ok((await service.canMove(source.resource, URI.file(join(testDir, 'binary.txt'))) instanceof Error));\n\n\t\tlet error;\n\t\ttry {\n\t\t\tawait service.move(source.resource, URI.file(join(testDir, 'binary.txt')));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.strictEqual(error.fileOperationResult, FileOperationResult.FILE_MOVE_CONFLICT);\n\t\tassert.ok(!event!);\n\n\t\tsource = await service.resolve(source.resource, { resolveMetadata: true });\n\t\tassert.strictEqual(originalSize, source.size);\n\t});\n\n\ttest('move - overwrite folder with file', async () => {\n\t\tlet createEvent: FileOperationEvent;\n\t\tlet moveEvent: FileOperationEvent;\n\t\tlet deleteEvent: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => {\n\t\t\tif (e.operation === FileOperation.CREATE) {\n\t\t\t\tcreateEvent = e;\n\t\t\t} else if (e.operation === FileOperation.DELETE) {\n\t\t\t\tdeleteEvent = e;\n\t\t\t} else if (e.operation === FileOperation.MOVE) {\n\t\t\t\tmoveEvent = e;\n\t\t\t}\n\t\t}));\n\n\t\tconst parent = await service.resolve(URI.file(testDir));\n\t\tconst folderResource = URI.file(join(parent.resource.fsPath, 'conway.js'));\n\t\tconst f = await service.createFolder(folderResource);\n\t\tconst source = URI.file(join(testDir, 'deep', 'conway.js'));\n\n\t\tassert.strictEqual(await service.canMove(source, f.resource, true), true);\n\t\tconst moved = await service.move(source, f.resource, true);\n\n\t\tassert.strictEqual(existsSync(moved.resource.fsPath), true);\n\t\tassert.ok(statSync(moved.resource.fsPath).isFile);\n\t\tassert.ok(createEvent!);\n\t\tassert.ok(deleteEvent!);\n\t\tassert.ok(moveEvent!);\n\t\tassert.strictEqual(moveEvent!.resource.fsPath, source.fsPath);\n\t\tassert.strictEqual(moveEvent!.target!.resource.fsPath, moved.resource.fsPath);\n\t\tassert.strictEqual(deleteEvent!.resource.fsPath, folderResource.fsPath);\n\t});\n\n\ttest('copy', async () => {\n\t\tawait doTestCopy();\n\t});\n\n\ttest('copy - unbuffered (FileSystemProviderCapabilities.FileReadWrite)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\tawait doTestCopy();\n\t});\n\n\ttest('copy - unbuffered large (FileSystemProviderCapabilities.FileReadWrite)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\tawait doTestCopy('lorem.txt');\n\t});\n\n\ttest('copy - buffered (FileSystemProviderCapabilities.FileOpenReadWriteClose)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\tawait doTestCopy();\n\t});\n\n\ttest('copy - buffered large (FileSystemProviderCapabilities.FileOpenReadWriteClose)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\tawait doTestCopy('lorem.txt');\n\t});\n\n\tfunction setCapabilities(provider: TestDiskFileSystemProvider, capabilities: FileSystemProviderCapabilities): void {\n\t\tprovider.capabilities = capabilities;\n\t\tif (isLinux) {\n\t\t\tprovider.capabilities |= FileSystemProviderCapabilities.PathCaseSensitive;\n\t\t}\n\t}\n\n\tasync function doTestCopy(sourceName: string = 'index.html') {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = await service.resolve(URI.file(join(testDir, sourceName)));\n\t\tconst target = URI.file(join(testDir, 'other.html'));\n\n\t\tassert.strictEqual(await service.canCopy(source.resource, target), true);\n\t\tconst copied = await service.copy(source.resource, target);\n\n\t\tassert.strictEqual(existsSync(copied.resource.fsPath), true);\n\t\tassert.strictEqual(existsSync(source.resource.fsPath), true);\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.COPY);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, copied.resource.fsPath);\n\n\t\tconst sourceContents = readFileSync(source.resource.fsPath);\n\t\tconst targetContents = readFileSync(target.fsPath);\n\n\t\tassert.strictEqual(sourceContents.byteLength, targetContents.byteLength);\n\t\tassert.strictEqual(sourceContents.toString(), targetContents.toString());\n\t}\n\n\ttest('copy - overwrite folder with file', async () => {\n\t\tlet createEvent: FileOperationEvent;\n\t\tlet copyEvent: FileOperationEvent;\n\t\tlet deleteEvent: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => {\n\t\t\tif (e.operation === FileOperation.CREATE) {\n\t\t\t\tcreateEvent = e;\n\t\t\t} else if (e.operation === FileOperation.DELETE) {\n\t\t\t\tdeleteEvent = e;\n\t\t\t} else if (e.operation === FileOperation.COPY) {\n\t\t\t\tcopyEvent = e;\n\t\t\t}\n\t\t}));\n\n\t\tconst parent = await service.resolve(URI.file(testDir));\n\t\tconst folderResource = URI.file(join(parent.resource.fsPath, 'conway.js'));\n\t\tconst f = await service.createFolder(folderResource);\n\t\tconst source = URI.file(join(testDir, 'deep', 'conway.js'));\n\n\t\tassert.strictEqual(await service.canCopy(source, f.resource, true), true);\n\t\tconst copied = await service.copy(source, f.resource, true);\n\n\t\tassert.strictEqual(existsSync(copied.resource.fsPath), true);\n\t\tassert.ok(statSync(copied.resource.fsPath).isFile);\n\t\tassert.ok(createEvent!);\n\t\tassert.ok(deleteEvent!);\n\t\tassert.ok(copyEvent!);\n\t\tassert.strictEqual(copyEvent!.resource.fsPath, source.fsPath);\n\t\tassert.strictEqual(copyEvent!.target!.resource.fsPath, copied.resource.fsPath);\n\t\tassert.strictEqual(deleteEvent!.resource.fsPath, folderResource.fsPath);\n\t});\n\n\ttest('copy - MIX CASE same target - no overwrite', async () => {\n\t\tlet source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tconst originalSize = source.size;\n\t\tassert.ok(originalSize > 0);\n\n\t\tconst target = URI.file(join(dirname(source.resource.fsPath), 'INDEX.html'));\n\n\t\tconst canCopy = await service.canCopy(source.resource, target);\n\n\t\tlet error;\n\t\tlet copied: IFileStatWithMetadata;\n\t\ttry {\n\t\t\tcopied = await service.copy(source.resource, target);\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(canCopy, true);\n\n\t\t\tassert.strictEqual(existsSync(copied!.resource.fsPath), true);\n\t\t\tassert.ok(readdirSync(testDir).some(f => f === 'INDEX.html'));\n\t\t\tassert.strictEqual(source.size, copied!.size);\n\t\t} else {\n\t\t\tassert.ok(error);\n\t\t\tassert.ok(canCopy instanceof Error);\n\n\t\t\tsource = await service.resolve(source.resource, { resolveMetadata: true });\n\t\t\tassert.strictEqual(originalSize, source.size);\n\t\t}\n\t});\n\n\ttest('copy - MIX CASE same target - overwrite', async () => {\n\t\tlet source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tconst originalSize = source.size;\n\t\tassert.ok(originalSize > 0);\n\n\t\tconst target = URI.file(join(dirname(source.resource.fsPath), 'INDEX.html'));\n\n\t\tconst canCopy = await service.canCopy(source.resource, target, true);\n\n\t\tlet error;\n\t\tlet copied: IFileStatWithMetadata;\n\t\ttry {\n\t\t\tcopied = await service.copy(source.resource, target, true);\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(canCopy, true);\n\n\t\t\tassert.strictEqual(existsSync(copied!.resource.fsPath), true);\n\t\t\tassert.ok(readdirSync(testDir).some(f => f === 'INDEX.html'));\n\t\t\tassert.strictEqual(source.size, copied!.size);\n\t\t} else {\n\t\t\tassert.ok(error);\n\t\t\tassert.ok(canCopy instanceof Error);\n\n\t\t\tsource = await service.resolve(source.resource, { resolveMetadata: true });\n\t\t\tassert.strictEqual(originalSize, source.size);\n\t\t}\n\t});\n\n\ttest('copy - MIX CASE different target - overwrite', async () => {\n\t\tconst source1 = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tassert.ok(source1.size > 0);\n\n\t\tconst renamed = await service.move(source1.resource, URI.file(join(dirname(source1.resource.fsPath), 'CONWAY.js')));\n\t\tassert.strictEqual(existsSync(renamed.resource.fsPath), true);\n\t\tassert.ok(readdirSync(testDir).some(f => f === 'CONWAY.js'));\n\t\tassert.strictEqual(source1.size, renamed.size);\n\n\t\tconst source2 = await service.resolve(URI.file(join(testDir, 'deep', 'conway.js')), { resolveMetadata: true });\n\t\tconst target = URI.file(join(testDir, basename(source2.resource.path)));\n\n\t\tassert.strictEqual(await service.canCopy(source2.resource, target, true), true);\n\t\tconst res = await service.copy(source2.resource, target, true);\n\t\tassert.strictEqual(existsSync(res.resource.fsPath), true);\n\t\tassert.ok(readdirSync(testDir).some(f => f === 'conway.js'));\n\t\tassert.strictEqual(source2.size, res.size);\n\t});\n\n\ttest('copy - same file', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tassert.ok(source.size > 0);\n\n\t\tassert.strictEqual(await service.canCopy(source.resource, URI.file(source.resource.fsPath)), true);\n\t\tlet copied = await service.copy(source.resource, URI.file(source.resource.fsPath));\n\n\t\tassert.strictEqual(existsSync(copied.resource.fsPath), true);\n\t\tassert.strictEqual(basename(copied.resource.fsPath), 'index.html');\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.COPY);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, copied.resource.fsPath);\n\n\t\tcopied = await service.resolve(source.resource, { resolveMetadata: true });\n\t\tassert.strictEqual(source.size, copied.size);\n\t});\n\n\ttest('copy - same file #2', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst source = await service.resolve(URI.file(join(testDir, 'index.html')), { resolveMetadata: true });\n\t\tassert.ok(source.size > 0);\n\n\t\tconst targetParent = URI.file(testDir);\n\t\tconst target = targetParent.with({ path: posix.join(targetParent.path, posix.basename(source.resource.path)) });\n\n\t\tassert.strictEqual(await service.canCopy(source.resource, URI.file(target.fsPath)), true);\n\t\tlet copied = await service.copy(source.resource, URI.file(target.fsPath));\n\n\t\tassert.strictEqual(existsSync(copied.resource.fsPath), true);\n\t\tassert.strictEqual(basename(copied.resource.fsPath), 'index.html');\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, source.resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.COPY);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, copied.resource.fsPath);\n\n\t\tcopied = await service.resolve(source.resource, { resolveMetadata: true });\n\t\tassert.strictEqual(source.size, copied.size);\n\t});\n\n\ttest('cloneFile - basics', () => {\n\t\treturn testCloneFile();\n\t});\n\n\ttest('cloneFile - via copy capability', () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose | FileSystemProviderCapabilities.FileFolderCopy);\n\n\t\treturn testCloneFile();\n\t});\n\n\ttest('cloneFile - via pipe', () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testCloneFile();\n\t});\n\n\tasync function testCloneFile(): Promise<void> {\n\t\tconst source1 = URI.file(join(testDir, 'index.html'));\n\t\tconst source1Size = (await service.resolve(source1, { resolveMetadata: true })).size;\n\n\t\tconst source2 = URI.file(join(testDir, 'lorem.txt'));\n\t\tconst source2Size = (await service.resolve(source2, { resolveMetadata: true })).size;\n\n\t\tconst targetParent = URI.file(testDir);\n\n\t\t// same path is a no-op\n\t\tawait service.cloneFile(source1, source1);\n\n\t\t// simple clone to existing parent folder path\n\t\tconst target1 = targetParent.with({ path: posix.join(targetParent.path, `${posix.basename(source1.path)}-clone`) });\n\n\t\tawait service.cloneFile(source1, URI.file(target1.fsPath));\n\n\t\tassert.strictEqual(existsSync(target1.fsPath), true);\n\t\tassert.strictEqual(basename(target1.fsPath), 'index.html-clone');\n\n\t\tlet target1Size = (await service.resolve(target1, { resolveMetadata: true })).size;\n\n\t\tassert.strictEqual(source1Size, target1Size);\n\n\t\t// clone to same path overwrites\n\t\tawait service.cloneFile(source2, URI.file(target1.fsPath));\n\n\t\ttarget1Size = (await service.resolve(target1, { resolveMetadata: true })).size;\n\n\t\tassert.strictEqual(source2Size, target1Size);\n\t\tassert.notStrictEqual(source1Size, target1Size);\n\n\t\t// clone creates missing folders ad-hoc\n\t\tconst target2 = targetParent.with({ path: posix.join(targetParent.path, 'foo', 'bar', `${posix.basename(source1.path)}-clone`) });\n\n\t\tawait service.cloneFile(source1, URI.file(target2.fsPath));\n\n\t\tassert.strictEqual(existsSync(target2.fsPath), true);\n\t\tassert.strictEqual(basename(target2.fsPath), 'index.html-clone');\n\n\t\tconst target2Size = (await service.resolve(target2, { resolveMetadata: true })).size;\n\n\t\tassert.strictEqual(source1Size, target2Size);\n\t}\n\n\ttest('readFile - small file - default', () => {\n\t\treturn testReadFile(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFile - small file - buffered', () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFile - small file - buffered / readonly', () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose | FileSystemProviderCapabilities.Readonly);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFile - small file - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFile - small file - unbuffered / readonly', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.Readonly);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFile - small file - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFile - small file - streamed / readonly', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream | FileSystemProviderCapabilities.Readonly);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFile - large file - default', async () => {\n\t\treturn testReadFile(URI.file(join(testDir, 'lorem.txt')));\n\t});\n\n\ttest('readFile - large file - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'lorem.txt')));\n\t});\n\n\ttest('readFile - large file - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'lorem.txt')));\n\t});\n\n\ttest('readFile - large file - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'lorem.txt')));\n\t});\n\n\ttest('readFile - atomic (emulated on service level)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'lorem.txt')), { atomic: true });\n\t});\n\n\ttest('readFile - atomic (natively supported)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite & FileSystemProviderCapabilities.FileAtomicRead);\n\n\t\treturn testReadFile(URI.file(join(testDir, 'lorem.txt')), { atomic: true });\n\t});\n\n\tasync function testReadFile(resource: URI, options?: IReadFileOptions): Promise<void> {\n\t\tconst content = await service.readFile(resource, options);\n\n\t\tassert.strictEqual(content.value.toString(), readFileSync(resource.fsPath).toString());\n\t}\n\n\ttest('readFileStream - small file - default', () => {\n\t\treturn testReadFileStream(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFileStream - small file - buffered', () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testReadFileStream(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFileStream - small file - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testReadFileStream(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\ttest('readFileStream - small file - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testReadFileStream(URI.file(join(testDir, 'small.txt')));\n\t});\n\n\tasync function testReadFileStream(resource: URI): Promise<void> {\n\t\tconst content = await service.readFileStream(resource);\n\n\t\tassert.strictEqual((await streamToBuffer(content.value)).toString(), readFileSync(resource.fsPath).toString());\n\t}\n\n\ttest('readFile - Files are intermingled #38331 - default', async () => {\n\t\treturn testFilesNotIntermingled();\n\t});\n\n\ttest('readFile - Files are intermingled #38331 - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testFilesNotIntermingled();\n\t});\n\n\ttest('readFile - Files are intermingled #38331 - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testFilesNotIntermingled();\n\t});\n\n\ttest('readFile - Files are intermingled #38331 - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testFilesNotIntermingled();\n\t});\n\n\tasync function testFilesNotIntermingled() {\n\t\tconst resource1 = URI.file(join(testDir, 'lorem.txt'));\n\t\tconst resource2 = URI.file(join(testDir, 'some_utf16le.css'));\n\n\t\t// load in sequence and keep data\n\t\tconst value1 = await service.readFile(resource1);\n\t\tconst value2 = await service.readFile(resource2);\n\n\t\t// load in parallel in expect the same result\n\t\tconst result = await Promise.all([\n\t\t\tservice.readFile(resource1),\n\t\t\tservice.readFile(resource2)\n\t\t]);\n\n\t\tassert.strictEqual(result[0].value.toString(), value1.value.toString());\n\t\tassert.strictEqual(result[1].value.toString(), value2.value.toString());\n\t}\n\n\ttest('readFile - from position (ASCII) - default', async () => {\n\t\treturn testReadFileFromPositionAscii();\n\t});\n\n\ttest('readFile - from position (ASCII) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testReadFileFromPositionAscii();\n\t});\n\n\ttest('readFile - from position (ASCII) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testReadFileFromPositionAscii();\n\t});\n\n\ttest('readFile - from position (ASCII) - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testReadFileFromPositionAscii();\n\t});\n\n\tasync function testReadFileFromPositionAscii() {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst contents = await service.readFile(resource, { position: 6 });\n\n\t\tassert.strictEqual(contents.value.toString(), 'File');\n\t}\n\n\ttest('readFile - from position (with umlaut) - default', async () => {\n\t\treturn testReadFileFromPositionUmlaut();\n\t});\n\n\ttest('readFile - from position (with umlaut) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testReadFileFromPositionUmlaut();\n\t});\n\n\ttest('readFile - from position (with umlaut) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testReadFileFromPositionUmlaut();\n\t});\n\n\ttest('readFile - from position (with umlaut) - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testReadFileFromPositionUmlaut();\n\t});\n\n\tasync function testReadFileFromPositionUmlaut() {\n\t\tconst resource = URI.file(join(testDir, 'small_umlaut.txt'));\n\n\t\tconst contents = await service.readFile(resource, { position: Buffer.from('Small File with \u00DC').length });\n\n\t\tassert.strictEqual(contents.value.toString(), 'mlaut');\n\t}\n\n\ttest('readFile - 3 bytes (ASCII) - default', async () => {\n\t\treturn testReadThreeBytesFromFile();\n\t});\n\n\ttest('readFile - 3 bytes (ASCII) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testReadThreeBytesFromFile();\n\t});\n\n\ttest('readFile - 3 bytes (ASCII) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testReadThreeBytesFromFile();\n\t});\n\n\ttest('readFile - 3 bytes (ASCII) - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testReadThreeBytesFromFile();\n\t});\n\n\tasync function testReadThreeBytesFromFile() {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst contents = await service.readFile(resource, { length: 3 });\n\n\t\tassert.strictEqual(contents.value.toString(), 'Sma');\n\t}\n\n\ttest('readFile - 20000 bytes (large) - default', async () => {\n\t\treturn readLargeFileWithLength(20000);\n\t});\n\n\ttest('readFile - 20000 bytes (large) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn readLargeFileWithLength(20000);\n\t});\n\n\ttest('readFile - 20000 bytes (large) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn readLargeFileWithLength(20000);\n\t});\n\n\ttest('readFile - 20000 bytes (large) - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn readLargeFileWithLength(20000);\n\t});\n\n\ttest('readFile - 80000 bytes (large) - default', async () => {\n\t\treturn readLargeFileWithLength(80000);\n\t});\n\n\ttest('readFile - 80000 bytes (large) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn readLargeFileWithLength(80000);\n\t});\n\n\ttest('readFile - 80000 bytes (large) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn readLargeFileWithLength(80000);\n\t});\n\n\ttest('readFile - 80000 bytes (large) - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn readLargeFileWithLength(80000);\n\t});\n\n\tasync function readLargeFileWithLength(length: number) {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst contents = await service.readFile(resource, { length });\n\n\t\tassert.strictEqual(contents.value.byteLength, length);\n\t}\n\n\ttest('readFile - FILE_IS_DIRECTORY', async () => {\n\t\tconst resource = URI.file(join(testDir, 'deep'));\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readFile(resource);\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(error.fileOperationResult, FileOperationResult.FILE_IS_DIRECTORY);\n\t});\n\n\t(isWindows /* error code does not seem to be supported on windows */ ? test.skip : test)('readFile - FILE_NOT_DIRECTORY', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt', 'file.txt'));\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readFile(resource);\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(error.fileOperationResult, FileOperationResult.FILE_NOT_DIRECTORY);\n\t});\n\n\ttest('readFile - FILE_NOT_FOUND', async () => {\n\t\tconst resource = URI.file(join(testDir, '404.html'));\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readFile(resource);\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(error.fileOperationResult, FileOperationResult.FILE_NOT_FOUND);\n\t});\n\n\ttest('readFile - FILE_NOT_MODIFIED_SINCE - default', async () => {\n\t\treturn testNotModifiedSince();\n\t});\n\n\ttest('readFile - FILE_NOT_MODIFIED_SINCE - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testNotModifiedSince();\n\t});\n\n\ttest('readFile - FILE_NOT_MODIFIED_SINCE - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testNotModifiedSince();\n\t});\n\n\ttest('readFile - FILE_NOT_MODIFIED_SINCE - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testNotModifiedSince();\n\t});\n\n\tasync function testNotModifiedSince() {\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tconst contents = await service.readFile(resource);\n\t\tfileProvider.totalBytesRead = 0;\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readFile(resource, { etag: contents.etag });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(error.fileOperationResult, FileOperationResult.FILE_NOT_MODIFIED_SINCE);\n\t\tassert.ok(error instanceof NotModifiedSinceFileOperationError && error.stat);\n\t\tassert.strictEqual(fileProvider.totalBytesRead, 0);\n\t}\n\n\ttest('readFile - FILE_NOT_MODIFIED_SINCE does not fire wrongly - https://github.com/microsoft/vscode/issues/72909', async () => {\n\t\tfileProvider.setInvalidStatSize(true);\n\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tawait service.readFile(resource);\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readFile(resource, { etag: undefined });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(!error);\n\t});\n\n\ttest('readFile - FILE_TOO_LARGE - default', async () => {\n\t\treturn testFileTooLarge();\n\t});\n\n\ttest('readFile - FILE_TOO_LARGE - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testFileTooLarge();\n\t});\n\n\ttest('readFile - FILE_TOO_LARGE - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testFileTooLarge();\n\t});\n\n\ttest('readFile - FILE_TOO_LARGE - streamed', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadStream);\n\n\t\treturn testFileTooLarge();\n\t});\n\n\tasync function testFileTooLarge() {\n\t\tawait doTestFileTooLarge(false);\n\n\t\t// Also test when the stat size is wrong\n\t\tfileProvider.setSmallStatSize(true);\n\t\treturn doTestFileTooLarge(true);\n\t}\n\n\tasync function doTestFileTooLarge(statSizeWrong: boolean) {\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readFile(resource, { limits: { size: 10 } });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tif (!statSizeWrong) {\n\t\t\tassert.ok(error instanceof TooLargeFileOperationError);\n\t\t\tassert.ok(typeof error.size === 'number');\n\t\t}\n\t\tassert.strictEqual(error!.fileOperationResult, FileOperationResult.FILE_TOO_LARGE);\n\t}\n\n\t(isWindows ? test.skip /* windows: cannot create file symbolic link without elevated context */ : test)('readFile - dangling symbolic link - https://github.com/microsoft/vscode/issues/116049', async () => {\n\t\tconst link = URI.file(join(testDir, 'small.js-link'));\n\t\tawait promises.symlink(join(testDir, 'small.js'), link.fsPath);\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readFile(link);\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t});\n\n\ttest('createFile', async () => {\n\t\treturn assertCreateFile(contents => VSBuffer.fromString(contents));\n\t});\n\n\ttest('createFile (readable)', async () => {\n\t\treturn assertCreateFile(contents => bufferToReadable(VSBuffer.fromString(contents)));\n\t});\n\n\ttest('createFile (stream)', async () => {\n\t\treturn assertCreateFile(contents => bufferToStream(VSBuffer.fromString(contents)));\n\t});\n\n\tasync function assertCreateFile(converter: (content: string) => VSBuffer | VSBufferReadable | VSBufferReadableStream): Promise<void> {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst contents = 'Hello World';\n\t\tconst resource = URI.file(join(testDir, 'test.txt'));\n\n\t\tassert.strictEqual(await service.canCreateFile(resource), true);\n\t\tconst fileStat = await service.createFile(resource, converter(contents));\n\t\tassert.strictEqual(fileStat.name, 'test.txt');\n\t\tassert.strictEqual(existsSync(fileStat.resource.fsPath), true);\n\t\tassert.strictEqual(readFileSync(fileStat.resource.fsPath).toString(), contents);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.CREATE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, resource.fsPath);\n\t}\n\n\ttest('createFile (does not overwrite by default)', async () => {\n\t\tconst contents = 'Hello World';\n\t\tconst resource = URI.file(join(testDir, 'test.txt'));\n\n\t\twriteFileSync(resource.fsPath, ''); // create file\n\n\t\tassert.ok((await service.canCreateFile(resource)) instanceof Error);\n\n\t\tlet error;\n\t\ttry {\n\t\t\tawait service.createFile(resource, VSBuffer.fromString(contents));\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t});\n\n\ttest('createFile (allows to overwrite existing)', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst contents = 'Hello World';\n\t\tconst resource = URI.file(join(testDir, 'test.txt'));\n\n\t\twriteFileSync(resource.fsPath, ''); // create file\n\n\t\tassert.strictEqual(await service.canCreateFile(resource, { overwrite: true }), true);\n\t\tconst fileStat = await service.createFile(resource, VSBuffer.fromString(contents), { overwrite: true });\n\t\tassert.strictEqual(fileStat.name, 'test.txt');\n\t\tassert.strictEqual(existsSync(fileStat.resource.fsPath), true);\n\t\tassert.strictEqual(readFileSync(fileStat.resource.fsPath).toString(), contents);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.CREATE);\n\t\tassert.strictEqual(event!.target!.resource.fsPath, resource.fsPath);\n\t});\n\n\ttest('writeFile - default', async () => {\n\t\treturn testWriteFile(false);\n\t});\n\n\ttest('writeFile - flush on write', async () => {\n\t\tDiskFileSystemProvider.configureFlushOnWrite(true);\n\t\ttry {\n\t\t\treturn await testWriteFile(false);\n\t\t} finally {\n\t\t\tDiskFileSystemProvider.configureFlushOnWrite(false);\n\t\t}\n\t});\n\n\ttest('writeFile - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testWriteFile(false);\n\t});\n\n\ttest('writeFile - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testWriteFile(false);\n\t});\n\n\ttest('writeFile - default (atomic)', async () => {\n\t\treturn testWriteFile(true);\n\t});\n\n\ttest('writeFile - flush on write (atomic)', async () => {\n\t\tDiskFileSystemProvider.configureFlushOnWrite(true);\n\t\ttry {\n\t\t\treturn await testWriteFile(true);\n\t\t} finally {\n\t\t\tDiskFileSystemProvider.configureFlushOnWrite(false);\n\t\t}\n\t});\n\n\ttest('writeFile - buffered (atomic)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose | FileSystemProviderCapabilities.FileAtomicWrite);\n\n\t\tlet e;\n\t\ttry {\n\t\t\tawait testWriteFile(true);\n\t\t} catch (error) {\n\t\t\te = error;\n\t\t}\n\n\t\tassert.ok(e);\n\t});\n\n\ttest('writeFile - unbuffered (atomic)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.FileAtomicWrite);\n\n\t\treturn testWriteFile(true);\n\t});\n\n\t(isWindows ? test.skip /* windows: cannot create file symbolic link without elevated context */ : test)('writeFile - atomic writing does not break symlinks', async () => {\n\t\tconst link = URI.file(join(testDir, 'lorem.txt-linked'));\n\t\tawait promises.symlink(join(testDir, 'lorem.txt'), link.fsPath);\n\n\t\tconst content = 'Updates to the lorem file';\n\t\tawait service.writeFile(link, VSBuffer.fromString(content), { atomic: { postfix: '.vsctmp' } });\n\t\tassert.strictEqual(readFileSync(link.fsPath).toString(), content);\n\n\t\tconst resolved = await service.resolve(link);\n\t\tassert.strictEqual(resolved.isSymbolicLink, true);\n\t});\n\n\tasync function testWriteFile(atomic: boolean) {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath).toString();\n\t\tassert.strictEqual(content, 'Small File');\n\n\t\tconst newContent = 'Updates to the small file';\n\t\tawait service.writeFile(resource, VSBuffer.fromString(newContent), { atomic: atomic ? { postfix: '.vsctmp' } : false });\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.WRITE);\n\n\t\tassert.strictEqual(readFileSync(resource.fsPath).toString(), newContent);\n\t}\n\n\ttest('writeFile (large file) - default', async () => {\n\t\treturn testWriteFileLarge(false);\n\t});\n\n\ttest('writeFile (large file) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testWriteFileLarge(false);\n\t});\n\n\ttest('writeFile (large file) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testWriteFileLarge(false);\n\t});\n\n\ttest('writeFile (large file) - default (atomic)', async () => {\n\t\treturn testWriteFileLarge(true);\n\t});\n\n\ttest('writeFile (large file) - buffered (atomic)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose | FileSystemProviderCapabilities.FileAtomicWrite);\n\n\t\tlet e;\n\t\ttry {\n\t\t\tawait testWriteFileLarge(true);\n\t\t} catch (error) {\n\t\t\te = error;\n\t\t}\n\n\t\tassert.ok(e);\n\t});\n\n\ttest('writeFile (large file) - unbuffered (atomic)', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.FileAtomicWrite);\n\n\t\treturn testWriteFileLarge(true);\n\t});\n\n\tasync function testWriteFileLarge(atomic: boolean) {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath);\n\t\tconst newContent = content.toString() + content.toString();\n\n\t\tconst fileStat = await service.writeFile(resource, VSBuffer.fromString(newContent), { atomic: atomic ? { postfix: '.vsctmp' } : false });\n\t\tassert.strictEqual(fileStat.name, 'lorem.txt');\n\n\t\tassert.strictEqual(readFileSync(resource.fsPath).toString(), newContent);\n\t}\n\n\ttest('writeFile (large file) - unbuffered (atomic) - concurrent writes with multiple services', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.FileAtomicWrite);\n\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath);\n\t\tconst newContent = content.toString() + content.toString();\n\n\t\tconst promises: Promise<IFileStatWithMetadata>[] = [];\n\t\tlet suffix = 0;\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tconst service = disposables.add(new FileService(new NullLogService()));\n\t\t\tdisposables.add(service.registerProvider(Schemas.file, fileProvider));\n\n\t\t\tpromises.push(service.writeFile(resource, VSBuffer.fromString(`${newContent}${++suffix}`), { atomic: { postfix: '.vsctmp' } }));\n\t\t\tawait timeout(0);\n\t\t}\n\n\t\tawait Promise.allSettled(promises);\n\n\t\tassert.strictEqual(readFileSync(resource.fsPath).toString(), `${newContent}${suffix}`);\n\t});\n\n\ttest('writeFile - buffered - readonly throws', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose | FileSystemProviderCapabilities.Readonly);\n\n\t\treturn testWriteFileReadonlyThrows();\n\t});\n\n\ttest('writeFile - unbuffered - readonly throws', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.Readonly);\n\n\t\treturn testWriteFileReadonlyThrows();\n\t});\n\n\tasync function testWriteFileReadonlyThrows() {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath).toString();\n\t\tassert.strictEqual(content, 'Small File');\n\n\t\tconst newContent = 'Updates to the small file';\n\n\t\tlet error: Error;\n\t\ttry {\n\t\t\tawait service.writeFile(resource, VSBuffer.fromString(newContent));\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error!);\n\t}\n\n\ttest('writeFile (large file) - multiple parallel writes queue up and atomic read support (via file service)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath);\n\t\tconst newContent = content.toString() + content.toString();\n\n\t\tconst writePromises = Promise.all(['0', '00', '000', '0000', '00000'].map(async offset => {\n\t\t\tconst fileStat = await service.writeFile(resource, VSBuffer.fromString(offset + newContent));\n\t\t\tassert.strictEqual(fileStat.name, 'lorem.txt');\n\t\t}));\n\n\t\tconst readPromises = Promise.all(['0', '00', '000', '0000', '00000'].map(async () => {\n\t\t\tconst fileContent = await service.readFile(resource, { atomic: true });\n\t\t\tassert.ok(fileContent.value.byteLength > 0); // `atomic: true` ensures we never read a truncated file\n\t\t}));\n\n\t\tawait Promise.all([writePromises, readPromises]);\n\t});\n\n\ttest('provider - write barrier prevents dirty writes', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath);\n\t\tconst newContent = content.toString() + content.toString();\n\n\t\tconst provider = service.getProvider(resource.scheme);\n\t\tassert.ok(provider);\n\t\tassert.ok(hasOpenReadWriteCloseCapability(provider));\n\n\t\tconst writePromises = Promise.all(['0', '00', '000', '0000', '00000'].map(async offset => {\n\t\t\tconst content = offset + newContent;\n\t\t\tconst contentBuffer = VSBuffer.fromString(content).buffer;\n\n\t\t\tconst fd = await provider.open(resource, { create: true, unlock: false });\n\t\t\ttry {\n\t\t\t\tawait provider.write(fd, 0, VSBuffer.fromString(content).buffer, 0, contentBuffer.byteLength);\n\n\t\t\t\t// Here since `close` is not called, all other writes are\n\t\t\t\t// waiting on the barrier to release, so doing a readFile\n\t\t\t\t// should give us a consistent view of the file contents\n\t\t\t\tassert.strictEqual((await promises.readFile(resource.fsPath)).toString(), content);\n\t\t\t} finally {\n\t\t\t\tawait provider.close(fd);\n\t\t\t}\n\t\t}));\n\n\t\tawait Promise.all([writePromises]);\n\t});\n\n\ttest('provider - write barrier is partitioned per resource', async () => {\n\t\tconst resource1 = URI.file(join(testDir, 'lorem.txt'));\n\t\tconst resource2 = URI.file(join(testDir, 'test.txt'));\n\n\t\tconst provider = service.getProvider(resource1.scheme);\n\t\tassert.ok(provider);\n\t\tassert.ok(hasOpenReadWriteCloseCapability(provider));\n\n\t\tconst fd1 = await provider.open(resource1, { create: true, unlock: false });\n\t\tconst fd2 = await provider.open(resource2, { create: true, unlock: false });\n\n\t\tconst newContent = 'Hello World';\n\n\t\ttry {\n\t\t\tawait provider.write(fd1, 0, VSBuffer.fromString(newContent).buffer, 0, VSBuffer.fromString(newContent).buffer.byteLength);\n\t\t\tassert.strictEqual((await promises.readFile(resource1.fsPath)).toString(), newContent);\n\n\t\t\tawait provider.write(fd2, 0, VSBuffer.fromString(newContent).buffer, 0, VSBuffer.fromString(newContent).buffer.byteLength);\n\t\t\tassert.strictEqual((await promises.readFile(resource2.fsPath)).toString(), newContent);\n\t\t} finally {\n\t\t\tawait Promise.allSettled([\n\t\t\t\tawait provider.close(fd1),\n\t\t\t\tawait provider.close(fd2)\n\t\t\t]);\n\t\t}\n\t});\n\n\ttest('provider - write barrier not becoming stale', async () => {\n\t\tconst newFolder = join(testDir, 'new-folder');\n\t\tconst newResource = URI.file(join(newFolder, 'lorem.txt'));\n\n\t\tconst provider = service.getProvider(newResource.scheme);\n\t\tassert.ok(provider);\n\t\tassert.ok(hasOpenReadWriteCloseCapability(provider));\n\n\t\tlet error: Error | undefined = undefined;\n\t\ttry {\n\t\t\tawait provider.open(newResource, { create: true, unlock: false });\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error); // expected because `new-folder` does not exist\n\n\t\tawait promises.mkdir(newFolder);\n\n\t\tconst content = readFileSync(URI.file(join(testDir, 'lorem.txt')).fsPath);\n\t\tconst newContent = content.toString() + content.toString();\n\t\tconst newContentBuffer = VSBuffer.fromString(newContent).buffer;\n\n\t\tconst fd = await provider.open(newResource, { create: true, unlock: false });\n\t\ttry {\n\t\t\tawait provider.write(fd, 0, newContentBuffer, 0, newContentBuffer.byteLength);\n\n\t\t\tassert.strictEqual((await promises.readFile(newResource.fsPath)).toString(), newContent);\n\t\t} finally {\n\t\t\tawait provider.close(fd);\n\t\t}\n\t});\n\n\ttest('provider - atomic reads (write pending when read starts)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath);\n\t\tconst newContent = content.toString() + content.toString();\n\t\tconst newContentBuffer = VSBuffer.fromString(newContent).buffer;\n\n\t\tconst provider = service.getProvider(resource.scheme);\n\t\tassert.ok(provider);\n\t\tassert.ok(hasOpenReadWriteCloseCapability(provider));\n\t\tassert.ok(hasFileAtomicReadCapability(provider));\n\n\t\tlet atomicReadPromise: Promise<Uint8Array> | undefined = undefined;\n\t\tconst fd = await provider.open(resource, { create: true, unlock: false });\n\t\ttry {\n\n\t\t\t// Start reading while write is pending\n\t\t\tatomicReadPromise = provider.readFile(resource, { atomic: true });\n\n\t\t\t// Simulate a slow write, giving the read\n\t\t\t// a chance to succeed if it were not atomic\n\t\t\tawait timeout(20);\n\n\t\t\tawait provider.write(fd, 0, newContentBuffer, 0, newContentBuffer.byteLength);\n\t\t} finally {\n\t\t\tawait provider.close(fd);\n\t\t}\n\n\t\tassert.ok(atomicReadPromise);\n\n\t\tconst atomicReadResult = await atomicReadPromise;\n\t\tassert.strictEqual(atomicReadResult.byteLength, newContentBuffer.byteLength);\n\t});\n\n\ttest('provider - atomic reads (read pending when write starts)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath);\n\t\tconst newContent = content.toString() + content.toString();\n\t\tconst newContentBuffer = VSBuffer.fromString(newContent).buffer;\n\n\t\tconst provider = service.getProvider(resource.scheme);\n\t\tassert.ok(provider);\n\t\tassert.ok(hasOpenReadWriteCloseCapability(provider));\n\t\tassert.ok(hasFileAtomicReadCapability(provider));\n\n\t\tlet atomicReadPromise = provider.readFile(resource, { atomic: true });\n\n\t\tconst fdPromise = provider.open(resource, { create: true, unlock: false }).then(async fd => {\n\t\t\ttry {\n\t\t\t\treturn await provider.write(fd, 0, newContentBuffer, 0, newContentBuffer.byteLength);\n\t\t\t} finally {\n\t\t\t\tawait provider.close(fd);\n\t\t\t}\n\t\t});\n\n\t\tlet atomicReadResult = await atomicReadPromise;\n\t\tassert.strictEqual(atomicReadResult.byteLength, content.byteLength);\n\n\t\tawait fdPromise;\n\n\t\tatomicReadPromise = provider.readFile(resource, { atomic: true });\n\t\tatomicReadResult = await atomicReadPromise;\n\t\tassert.strictEqual(atomicReadResult.byteLength, newContentBuffer.byteLength);\n\t});\n\n\ttest('writeFile (readable) - default', async () => {\n\t\treturn testWriteFileReadable();\n\t});\n\n\ttest('writeFile (readable) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testWriteFileReadable();\n\t});\n\n\ttest('writeFile (readable) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testWriteFileReadable();\n\t});\n\n\tasync function testWriteFileReadable() {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath).toString();\n\t\tassert.strictEqual(content, 'Small File');\n\n\t\tconst newContent = 'Updates to the small file';\n\t\tawait service.writeFile(resource, toLineByLineReadable(newContent));\n\n\t\tassert.strictEqual(readFileSync(resource.fsPath).toString(), newContent);\n\t}\n\n\ttest('writeFile (large file - readable) - default', async () => {\n\t\treturn testWriteFileLargeReadable();\n\t});\n\n\ttest('writeFile (large file - readable) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testWriteFileLargeReadable();\n\t});\n\n\ttest('writeFile (large file - readable) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testWriteFileLargeReadable();\n\t});\n\n\tasync function testWriteFileLargeReadable() {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst content = readFileSync(resource.fsPath);\n\t\tconst newContent = content.toString() + content.toString();\n\n\t\tconst fileStat = await service.writeFile(resource, toLineByLineReadable(newContent));\n\t\tassert.strictEqual(fileStat.name, 'lorem.txt');\n\n\t\tassert.strictEqual(readFileSync(resource.fsPath).toString(), newContent);\n\t}\n\n\ttest('writeFile (stream) - default', async () => {\n\t\treturn testWriteFileStream();\n\t});\n\n\ttest('writeFile (stream) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testWriteFileStream();\n\t});\n\n\ttest('writeFile (stream) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testWriteFileStream();\n\t});\n\n\tasync function testWriteFileStream() {\n\t\tconst source = URI.file(join(testDir, 'small.txt'));\n\t\tconst target = URI.file(join(testDir, 'small-copy.txt'));\n\n\t\tconst fileStat = await service.writeFile(target, streamToBufferReadableStream(createReadStream(source.fsPath)));\n\t\tassert.strictEqual(fileStat.name, 'small-copy.txt');\n\n\t\tconst targetContents = readFileSync(target.fsPath).toString();\n\t\tassert.strictEqual(readFileSync(source.fsPath).toString(), targetContents);\n\t}\n\n\ttest('writeFile (large file - stream) - default', async () => {\n\t\treturn testWriteFileLargeStream();\n\t});\n\n\ttest('writeFile (large file - stream) - buffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testWriteFileLargeStream();\n\t});\n\n\ttest('writeFile (large file - stream) - unbuffered', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testWriteFileLargeStream();\n\t});\n\n\tasync function testWriteFileLargeStream() {\n\t\tconst source = URI.file(join(testDir, 'lorem.txt'));\n\t\tconst target = URI.file(join(testDir, 'lorem-copy.txt'));\n\n\t\tconst fileStat = await service.writeFile(target, streamToBufferReadableStream(createReadStream(source.fsPath)));\n\t\tassert.strictEqual(fileStat.name, 'lorem-copy.txt');\n\n\t\tconst targetContents = readFileSync(target.fsPath).toString();\n\t\tassert.strictEqual(readFileSync(source.fsPath).toString(), targetContents);\n\t}\n\n\ttest('writeFile (file is created including parents)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'other', 'newfile.txt'));\n\n\t\tconst content = 'File is created including parent';\n\t\tconst fileStat = await service.writeFile(resource, VSBuffer.fromString(content));\n\t\tassert.strictEqual(fileStat.name, 'newfile.txt');\n\n\t\tassert.strictEqual(readFileSync(resource.fsPath).toString(), content);\n\t});\n\n\ttest('writeFile - locked files and unlocking', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite | FileSystemProviderCapabilities.FileWriteUnlock);\n\n\t\treturn testLockedFiles(false);\n\t});\n\n\ttest('writeFile (stream) - locked files and unlocking', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose | FileSystemProviderCapabilities.FileWriteUnlock);\n\n\t\treturn testLockedFiles(false);\n\t});\n\n\ttest('writeFile - locked files and unlocking throws error when missing capability', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileReadWrite);\n\n\t\treturn testLockedFiles(true);\n\t});\n\n\ttest('writeFile (stream) - locked files and unlocking throws error when missing capability', async () => {\n\t\tsetCapabilities(fileProvider, FileSystemProviderCapabilities.FileOpenReadWriteClose);\n\n\t\treturn testLockedFiles(true);\n\t});\n\n\tasync function testLockedFiles(expectError: boolean) {\n\t\tconst lockedFile = URI.file(join(testDir, 'my-locked-file'));\n\n\t\tconst content = await service.writeFile(lockedFile, VSBuffer.fromString('Locked File'));\n\t\tassert.strictEqual(content.locked, false);\n\n\t\tconst stats = await promises.stat(lockedFile.fsPath);\n\t\tawait promises.chmod(lockedFile.fsPath, stats.mode & ~0o200);\n\n\t\tlet stat = await service.stat(lockedFile);\n\t\tassert.strictEqual(stat.locked, true);\n\n\t\tlet error;\n\t\tconst newContent = 'Updates to locked file';\n\t\ttry {\n\t\t\tawait service.writeFile(lockedFile, VSBuffer.fromString(newContent));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error);\n\t\terror = undefined;\n\n\t\tif (expectError) {\n\t\t\ttry {\n\t\t\t\tawait service.writeFile(lockedFile, VSBuffer.fromString(newContent), { unlock: true });\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\tassert.ok(error);\n\t\t} else {\n\t\t\tawait service.writeFile(lockedFile, VSBuffer.fromString(newContent), { unlock: true });\n\t\t\tassert.strictEqual(readFileSync(lockedFile.fsPath).toString(), newContent);\n\n\t\t\tstat = await service.stat(lockedFile);\n\t\t\tassert.strictEqual(stat.locked, false);\n\t\t}\n\t}\n\n\ttest('writeFile (error when folder is encountered)', async () => {\n\t\tconst resource = URI.file(testDir);\n\n\t\tlet error: Error | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.writeFile(resource, VSBuffer.fromString('File is created including parent'));\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t});\n\n\ttest('writeFile (no error when providing up to date etag)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst stat = await service.resolve(resource);\n\n\t\tconst content = readFileSync(resource.fsPath).toString();\n\t\tassert.strictEqual(content, 'Small File');\n\n\t\tconst newContent = 'Updates to the small file';\n\t\tawait service.writeFile(resource, VSBuffer.fromString(newContent), { etag: stat.etag, mtime: stat.mtime });\n\n\t\tassert.strictEqual(readFileSync(resource.fsPath).toString(), newContent);\n\t});\n\n\ttest('writeFile - error when writing to file that has been updated meanwhile', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst stat = await service.resolve(resource);\n\n\t\tconst content = readFileSync(resource.fsPath).toString();\n\t\tassert.strictEqual(content, 'Small File');\n\n\t\tconst newContent = 'Updates to the small file';\n\t\tawait service.writeFile(resource, VSBuffer.fromString(newContent), { etag: stat.etag, mtime: stat.mtime });\n\n\t\tconst newContentLeadingToError = newContent + newContent;\n\n\t\tconst fakeMtime = 1000;\n\t\tconst fakeSize = 1000;\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.writeFile(resource, VSBuffer.fromString(newContentLeadingToError), { etag: etag({ mtime: fakeMtime, size: fakeSize }), mtime: fakeMtime });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.ok(error instanceof FileOperationError);\n\t\tassert.strictEqual(error.fileOperationResult, FileOperationResult.FILE_MODIFIED_SINCE);\n\t});\n\n\ttest('writeFile - no error when writing to file where size is the same', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst stat = await service.resolve(resource);\n\n\t\tconst content = readFileSync(resource.fsPath).toString();\n\t\tassert.strictEqual(content, 'Small File');\n\n\t\tconst newContent = content; // same content\n\t\tawait service.writeFile(resource, VSBuffer.fromString(newContent), { etag: stat.etag, mtime: stat.mtime });\n\n\t\tconst newContentLeadingToNoError = newContent; // writing the same content should be OK\n\n\t\tconst fakeMtime = 1000;\n\t\tconst actualSize = newContent.length;\n\n\t\tlet error: FileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.writeFile(resource, VSBuffer.fromString(newContentLeadingToNoError), { etag: etag({ mtime: fakeMtime, size: actualSize }), mtime: fakeMtime });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(!error);\n\t});\n\n\ttest('writeFile - no error when writing to same nonexistent folder multiple times different new files', async () => {\n\t\tconst newFolder = URI.file(join(testDir, 'some', 'new', 'folder'));\n\n\t\tconst file1 = joinPath(newFolder, 'file-1');\n\t\tconst file2 = joinPath(newFolder, 'file-2');\n\t\tconst file3 = joinPath(newFolder, 'file-3');\n\n\t\t// this essentially verifies that the mkdirp logic implemented\n\t\t// in the file service is able to receive multiple requests for\n\t\t// the same folder and will not throw errors if another racing\n\t\t// call succeeded first.\n\t\tconst newContent = 'Updates to the small file';\n\t\tawait Promise.all([\n\t\t\tservice.writeFile(file1, VSBuffer.fromString(newContent)),\n\t\t\tservice.writeFile(file2, VSBuffer.fromString(newContent)),\n\t\t\tservice.writeFile(file3, VSBuffer.fromString(newContent))\n\t\t]);\n\n\t\tassert.ok(service.exists(file1));\n\t\tassert.ok(service.exists(file2));\n\t\tassert.ok(service.exists(file3));\n\t});\n\n\ttest('writeFile - error when writing to folder that is a file', async () => {\n\t\tconst existingFile = URI.file(join(testDir, 'my-file'));\n\n\t\tawait service.createFile(existingFile);\n\n\t\tconst newFile = joinPath(existingFile, 'file-1');\n\n\t\tlet error;\n\t\tconst newContent = 'Updates to the small file';\n\t\ttry {\n\t\t\tawait service.writeFile(newFile, VSBuffer.fromString(newContent));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error);\n\t});\n\n\ttest('read - mixed positions', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\t// read multiple times from position 0\n\t\tlet buffer = VSBuffer.alloc(1024);\n\t\tlet fd = await fileProvider.open(resource, { create: false });\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tawait fileProvider.read(fd, 0, buffer.buffer, 0, 26);\n\t\t\tassert.strictEqual(buffer.slice(0, 26).toString(), 'Lorem ipsum dolor sit amet');\n\t\t}\n\t\tawait fileProvider.close(fd);\n\n\t\t// read multiple times at various locations\n\t\tbuffer = VSBuffer.alloc(1024);\n\t\tfd = await fileProvider.open(resource, { create: false });\n\n\t\tlet posInFile = 0;\n\n\t\tawait fileProvider.read(fd, posInFile, buffer.buffer, 0, 26);\n\t\tassert.strictEqual(buffer.slice(0, 26).toString(), 'Lorem ipsum dolor sit amet');\n\t\tposInFile += 26;\n\n\t\tawait fileProvider.read(fd, posInFile, buffer.buffer, 0, 1);\n\t\tassert.strictEqual(buffer.slice(0, 1).toString(), ',');\n\t\tposInFile += 1;\n\n\t\tawait fileProvider.read(fd, posInFile, buffer.buffer, 0, 12);\n\t\tassert.strictEqual(buffer.slice(0, 12).toString(), ' consectetur');\n\t\tposInFile += 12;\n\n\t\tawait fileProvider.read(fd, 98 /* no longer in sequence of posInFile */, buffer.buffer, 0, 9);\n\t\tassert.strictEqual(buffer.slice(0, 9).toString(), 'fermentum');\n\n\t\tawait fileProvider.read(fd, 27, buffer.buffer, 0, 12);\n\t\tassert.strictEqual(buffer.slice(0, 12).toString(), ' consectetur');\n\n\t\tawait fileProvider.read(fd, 26, buffer.buffer, 0, 1);\n\t\tassert.strictEqual(buffer.slice(0, 1).toString(), ',');\n\n\t\tawait fileProvider.read(fd, 0, buffer.buffer, 0, 26);\n\t\tassert.strictEqual(buffer.slice(0, 26).toString(), 'Lorem ipsum dolor sit amet');\n\n\t\tawait fileProvider.read(fd, posInFile /* back in sequence */, buffer.buffer, 0, 11);\n\t\tassert.strictEqual(buffer.slice(0, 11).toString(), ' adipiscing');\n\n\t\tawait fileProvider.close(fd);\n\t});\n\n\ttest('write - mixed positions', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tconst buffer = VSBuffer.alloc(1024);\n\t\tconst fdWrite = await fileProvider.open(resource, { create: true, unlock: false });\n\t\tconst fdRead = await fileProvider.open(resource, { create: false });\n\n\t\tlet posInFileWrite = 0;\n\t\tlet posInFileRead = 0;\n\n\t\tconst initialContents = VSBuffer.fromString('Lorem ipsum dolor sit amet');\n\t\tawait fileProvider.write(fdWrite, posInFileWrite, initialContents.buffer, 0, initialContents.byteLength);\n\t\tposInFileWrite += initialContents.byteLength;\n\n\t\tawait fileProvider.read(fdRead, posInFileRead, buffer.buffer, 0, 26);\n\t\tassert.strictEqual(buffer.slice(0, 26).toString(), 'Lorem ipsum dolor sit amet');\n\t\tposInFileRead += 26;\n\n\t\tconst contents = VSBuffer.fromString('Hello World');\n\n\t\tawait fileProvider.write(fdWrite, posInFileWrite, contents.buffer, 0, contents.byteLength);\n\t\tposInFileWrite += contents.byteLength;\n\n\t\tawait fileProvider.read(fdRead, posInFileRead, buffer.buffer, 0, contents.byteLength);\n\t\tassert.strictEqual(buffer.slice(0, contents.byteLength).toString(), 'Hello World');\n\t\tposInFileRead += contents.byteLength;\n\n\t\tawait fileProvider.write(fdWrite, 6, contents.buffer, 0, contents.byteLength);\n\n\t\tawait fileProvider.read(fdRead, 0, buffer.buffer, 0, 11);\n\t\tassert.strictEqual(buffer.slice(0, 11).toString(), 'Lorem Hello');\n\n\t\tawait fileProvider.write(fdWrite, posInFileWrite, contents.buffer, 0, contents.byteLength);\n\t\tposInFileWrite += contents.byteLength;\n\n\t\tawait fileProvider.read(fdRead, posInFileWrite - contents.byteLength, buffer.buffer, 0, contents.byteLength);\n\t\tassert.strictEqual(buffer.slice(0, contents.byteLength).toString(), 'Hello World');\n\n\t\tawait fileProvider.close(fdWrite);\n\t\tawait fileProvider.close(fdRead);\n\t});\n\n\ttest('readonly - is handled properly for a single resource', async () => {\n\t\tfileProvider.setReadonly(true);\n\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tconst resolveResult = await service.resolve(resource);\n\t\tassert.strictEqual(resolveResult.readonly, true);\n\n\t\tconst readResult = await service.readFile(resource);\n\t\tassert.strictEqual(readResult.readonly, true);\n\n\t\tlet writeFileError: Error | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.writeFile(resource, VSBuffer.fromString('Hello Test'));\n\t\t} catch (error) {\n\t\t\twriteFileError = error;\n\t\t}\n\t\tassert.ok(writeFileError);\n\n\t\tlet deleteFileError: Error | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.del(resource);\n\t\t} catch (error) {\n\t\t\tdeleteFileError = error;\n\t\t}\n\t\tassert.ok(deleteFileError);\n\t});\n});\n"],
  "mappings": "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",
  "names": ["promises", "service", "content"]
}
