{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/test/common/watcher.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { isLinux, isWindows } from '../../../../base/common/platform.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { FileChangeFilter, FileChangesEvent, FileChangeType, IFileChange } from '../../common/files.js';\nimport { coalesceEvents, reviveFileChanges, parseWatcherPatterns, isFiltered } from '../../common/watcher.js';\n\nclass TestFileWatcher extends Disposable {\n\tprivate readonly _onDidFilesChange: Emitter<{ raw: IFileChange[]; event: FileChangesEvent }>;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._onDidFilesChange = this._register(new Emitter<{ raw: IFileChange[]; event: FileChangesEvent }>());\n\t}\n\n\tget onDidFilesChange(): Event<{ raw: IFileChange[]; event: FileChangesEvent }> {\n\t\treturn this._onDidFilesChange.event;\n\t}\n\n\treport(changes: IFileChange[]): void {\n\t\tthis.onRawFileEvents(changes);\n\t}\n\n\tprivate onRawFileEvents(events: IFileChange[]): void {\n\n\t\t// Coalesce\n\t\tconst coalescedEvents = coalesceEvents(events);\n\n\t\t// Emit through event emitter\n\t\tif (coalescedEvents.length > 0) {\n\t\t\tthis._onDidFilesChange.fire({ raw: reviveFileChanges(coalescedEvents), event: this.toFileChangesEvent(coalescedEvents) });\n\t\t}\n\t}\n\n\tprivate toFileChangesEvent(changes: IFileChange[]): FileChangesEvent {\n\t\treturn new FileChangesEvent(reviveFileChanges(changes), !isLinux);\n\t}\n}\n\nenum Path {\n\tUNIX,\n\tWINDOWS,\n\tUNC\n}\n\nsuite('Watcher', () => {\n\n\t(isWindows ? test.skip : test)('parseWatcherPatterns - posix', () => {\n\t\tconst path = '/users/data/src';\n\t\tlet parsedPattern = parseWatcherPatterns(path, ['*.js'])[0];\n\n\t\tassert.strictEqual(parsedPattern('/users/data/src/foo.js'), true);\n\t\tassert.strictEqual(parsedPattern('/users/data/src/foo.ts'), false);\n\t\tassert.strictEqual(parsedPattern('/users/data/src/bar/foo.js'), false);\n\n\t\tparsedPattern = parseWatcherPatterns(path, ['/users/data/src/*.js'])[0];\n\n\t\tassert.strictEqual(parsedPattern('/users/data/src/foo.js'), true);\n\t\tassert.strictEqual(parsedPattern('/users/data/src/foo.ts'), false);\n\t\tassert.strictEqual(parsedPattern('/users/data/src/bar/foo.js'), false);\n\n\t\tparsedPattern = parseWatcherPatterns(path, ['/users/data/src/bar/*.js'])[0];\n\n\t\tassert.strictEqual(parsedPattern('/users/data/src/foo.js'), false);\n\t\tassert.strictEqual(parsedPattern('/users/data/src/foo.ts'), false);\n\t\tassert.strictEqual(parsedPattern('/users/data/src/bar/foo.js'), true);\n\n\t\tparsedPattern = parseWatcherPatterns(path, ['**/*.js'])[0];\n\n\t\tassert.strictEqual(parsedPattern('/users/data/src/foo.js'), true);\n\t\tassert.strictEqual(parsedPattern('/users/data/src/foo.ts'), false);\n\t\tassert.strictEqual(parsedPattern('/users/data/src/bar/foo.js'), true);\n\t});\n\n\t(!isWindows ? test.skip : test)('parseWatcherPatterns - windows', () => {\n\t\tconst path = 'c:\\\\users\\\\data\\\\src';\n\t\tlet parsedPattern = parseWatcherPatterns(path, ['*.js'])[0];\n\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\foo.js'), true);\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\foo.ts'), false);\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\bar/foo.js'), false);\n\n\t\tparsedPattern = parseWatcherPatterns(path, ['c:\\\\users\\\\data\\\\src\\\\*.js'])[0];\n\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\foo.js'), true);\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\foo.ts'), false);\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\bar\\\\foo.js'), false);\n\n\t\tparsedPattern = parseWatcherPatterns(path, ['c:\\\\users\\\\data\\\\src\\\\bar/*.js'])[0];\n\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\foo.js'), false);\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\foo.ts'), false);\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\bar\\\\foo.js'), true);\n\n\t\tparsedPattern = parseWatcherPatterns(path, ['**/*.js'])[0];\n\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\foo.js'), true);\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\foo.ts'), false);\n\t\tassert.strictEqual(parsedPattern('c:\\\\users\\\\data\\\\src\\\\bar\\\\foo.js'), true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n\nsuite('Watcher Events Normalizer', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('simple add/update/delete', done => {\n\t\tconst watch = disposables.add(new TestFileWatcher());\n\n\t\tconst added = URI.file('/users/data/src/added.txt');\n\t\tconst updated = URI.file('/users/data/src/updated.txt');\n\t\tconst deleted = URI.file('/users/data/src/deleted.txt');\n\n\t\tconst raw: IFileChange[] = [\n\t\t\t{ resource: added, type: FileChangeType.ADDED },\n\t\t\t{ resource: updated, type: FileChangeType.UPDATED },\n\t\t\t{ resource: deleted, type: FileChangeType.DELETED },\n\t\t];\n\n\t\tdisposables.add(watch.onDidFilesChange(({ event, raw }) => {\n\t\t\tassert.ok(event);\n\t\t\tassert.strictEqual(raw.length, 3);\n\t\t\tassert.ok(event.contains(added, FileChangeType.ADDED));\n\t\t\tassert.ok(event.contains(updated, FileChangeType.UPDATED));\n\t\t\tassert.ok(event.contains(deleted, FileChangeType.DELETED));\n\n\t\t\tdone();\n\t\t}));\n\n\t\twatch.report(raw);\n\t});\n\n\t(isWindows ? [Path.WINDOWS, Path.UNC] : [Path.UNIX]).forEach(path => {\n\t\ttest(`delete only reported for top level folder (${path})`, done => {\n\t\t\tconst watch = disposables.add(new TestFileWatcher());\n\n\t\t\tconst deletedFolderA = URI.file(path === Path.UNIX ? '/users/data/src/todelete1' : path === Path.WINDOWS ? 'C:\\\\users\\\\data\\\\src\\\\todelete1' : '\\\\\\\\localhost\\\\users\\\\data\\\\src\\\\todelete1');\n\t\t\tconst deletedFolderB = URI.file(path === Path.UNIX ? '/users/data/src/todelete2' : path === Path.WINDOWS ? 'C:\\\\users\\\\data\\\\src\\\\todelete2' : '\\\\\\\\localhost\\\\users\\\\data\\\\src\\\\todelete2');\n\t\t\tconst deletedFolderBF1 = URI.file(path === Path.UNIX ? '/users/data/src/todelete2/file.txt' : path === Path.WINDOWS ? 'C:\\\\users\\\\data\\\\src\\\\todelete2\\\\file.txt' : '\\\\\\\\localhost\\\\users\\\\data\\\\src\\\\todelete2\\\\file.txt');\n\t\t\tconst deletedFolderBF2 = URI.file(path === Path.UNIX ? '/users/data/src/todelete2/more/test.txt' : path === Path.WINDOWS ? 'C:\\\\users\\\\data\\\\src\\\\todelete2\\\\more\\\\test.txt' : '\\\\\\\\localhost\\\\users\\\\data\\\\src\\\\todelete2\\\\more\\\\test.txt');\n\t\t\tconst deletedFolderBF3 = URI.file(path === Path.UNIX ? '/users/data/src/todelete2/super/bar/foo.txt' : path === Path.WINDOWS ? 'C:\\\\users\\\\data\\\\src\\\\todelete2\\\\super\\\\bar\\\\foo.txt' : '\\\\\\\\localhost\\\\users\\\\data\\\\src\\\\todelete2\\\\super\\\\bar\\\\foo.txt');\n\t\t\tconst deletedFileA = URI.file(path === Path.UNIX ? '/users/data/src/deleteme.txt' : path === Path.WINDOWS ? 'C:\\\\users\\\\data\\\\src\\\\deleteme.txt' : '\\\\\\\\localhost\\\\users\\\\data\\\\src\\\\deleteme.txt');\n\n\t\t\tconst addedFile = URI.file(path === Path.UNIX ? '/users/data/src/added.txt' : path === Path.WINDOWS ? 'C:\\\\users\\\\data\\\\src\\\\added.txt' : '\\\\\\\\localhost\\\\users\\\\data\\\\src\\\\added.txt');\n\t\t\tconst updatedFile = URI.file(path === Path.UNIX ? '/users/data/src/updated.txt' : path === Path.WINDOWS ? 'C:\\\\users\\\\data\\\\src\\\\updated.txt' : '\\\\\\\\localhost\\\\users\\\\data\\\\src\\\\updated.txt');\n\n\t\t\tconst raw: IFileChange[] = [\n\t\t\t\t{ resource: deletedFolderA, type: FileChangeType.DELETED },\n\t\t\t\t{ resource: deletedFolderB, type: FileChangeType.DELETED },\n\t\t\t\t{ resource: deletedFolderBF1, type: FileChangeType.DELETED },\n\t\t\t\t{ resource: deletedFolderBF2, type: FileChangeType.DELETED },\n\t\t\t\t{ resource: deletedFolderBF3, type: FileChangeType.DELETED },\n\t\t\t\t{ resource: deletedFileA, type: FileChangeType.DELETED },\n\t\t\t\t{ resource: addedFile, type: FileChangeType.ADDED },\n\t\t\t\t{ resource: updatedFile, type: FileChangeType.UPDATED }\n\t\t\t];\n\n\t\t\tdisposables.add(watch.onDidFilesChange(({ event, raw }) => {\n\t\t\t\tassert.ok(event);\n\t\t\t\tassert.strictEqual(raw.length, 5);\n\n\t\t\t\tassert.ok(event.contains(deletedFolderA, FileChangeType.DELETED));\n\t\t\t\tassert.ok(event.contains(deletedFolderB, FileChangeType.DELETED));\n\t\t\t\tassert.ok(event.contains(deletedFileA, FileChangeType.DELETED));\n\t\t\t\tassert.ok(event.contains(addedFile, FileChangeType.ADDED));\n\t\t\t\tassert.ok(event.contains(updatedFile, FileChangeType.UPDATED));\n\n\t\t\t\tdone();\n\t\t\t}));\n\n\t\t\twatch.report(raw);\n\t\t});\n\t});\n\n\ttest('event coalescer: ignore CREATE followed by DELETE', done => {\n\t\tconst watch = disposables.add(new TestFileWatcher());\n\n\t\tconst created = URI.file('/users/data/src/related');\n\t\tconst deleted = URI.file('/users/data/src/related');\n\t\tconst unrelated = URI.file('/users/data/src/unrelated');\n\n\t\tconst raw: IFileChange[] = [\n\t\t\t{ resource: created, type: FileChangeType.ADDED },\n\t\t\t{ resource: deleted, type: FileChangeType.DELETED },\n\t\t\t{ resource: unrelated, type: FileChangeType.UPDATED },\n\t\t];\n\n\t\tdisposables.add(watch.onDidFilesChange(({ event, raw }) => {\n\t\t\tassert.ok(event);\n\t\t\tassert.strictEqual(raw.length, 1);\n\n\t\t\tassert.ok(event.contains(unrelated, FileChangeType.UPDATED));\n\n\t\t\tdone();\n\t\t}));\n\n\t\twatch.report(raw);\n\t});\n\n\ttest('event coalescer: flatten DELETE followed by CREATE into CHANGE', done => {\n\t\tconst watch = disposables.add(new TestFileWatcher());\n\n\t\tconst deleted = URI.file('/users/data/src/related');\n\t\tconst created = URI.file('/users/data/src/related');\n\t\tconst unrelated = URI.file('/users/data/src/unrelated');\n\n\t\tconst raw: IFileChange[] = [\n\t\t\t{ resource: deleted, type: FileChangeType.DELETED },\n\t\t\t{ resource: created, type: FileChangeType.ADDED },\n\t\t\t{ resource: unrelated, type: FileChangeType.UPDATED },\n\t\t];\n\n\t\tdisposables.add(watch.onDidFilesChange(({ event, raw }) => {\n\t\t\tassert.ok(event);\n\t\t\tassert.strictEqual(raw.length, 2);\n\n\t\t\tassert.ok(event.contains(deleted, FileChangeType.UPDATED));\n\t\t\tassert.ok(event.contains(unrelated, FileChangeType.UPDATED));\n\n\t\t\tdone();\n\t\t}));\n\n\t\twatch.report(raw);\n\t});\n\n\ttest('event coalescer: ignore UPDATE when CREATE received', done => {\n\t\tconst watch = disposables.add(new TestFileWatcher());\n\n\t\tconst created = URI.file('/users/data/src/related');\n\t\tconst updated = URI.file('/users/data/src/related');\n\t\tconst unrelated = URI.file('/users/data/src/unrelated');\n\n\t\tconst raw: IFileChange[] = [\n\t\t\t{ resource: created, type: FileChangeType.ADDED },\n\t\t\t{ resource: updated, type: FileChangeType.UPDATED },\n\t\t\t{ resource: unrelated, type: FileChangeType.UPDATED },\n\t\t];\n\n\t\tdisposables.add(watch.onDidFilesChange(({ event, raw }) => {\n\t\t\tassert.ok(event);\n\t\t\tassert.strictEqual(raw.length, 2);\n\n\t\t\tassert.ok(event.contains(created, FileChangeType.ADDED));\n\t\t\tassert.ok(!event.contains(created, FileChangeType.UPDATED));\n\t\t\tassert.ok(event.contains(unrelated, FileChangeType.UPDATED));\n\n\t\t\tdone();\n\t\t}));\n\n\t\twatch.report(raw);\n\t});\n\n\ttest('event coalescer: apply DELETE', done => {\n\t\tconst watch = disposables.add(new TestFileWatcher());\n\n\t\tconst updated = URI.file('/users/data/src/related');\n\t\tconst updated2 = URI.file('/users/data/src/related');\n\t\tconst deleted = URI.file('/users/data/src/related');\n\t\tconst unrelated = URI.file('/users/data/src/unrelated');\n\n\t\tconst raw: IFileChange[] = [\n\t\t\t{ resource: updated, type: FileChangeType.UPDATED },\n\t\t\t{ resource: updated2, type: FileChangeType.UPDATED },\n\t\t\t{ resource: unrelated, type: FileChangeType.UPDATED },\n\t\t\t{ resource: updated, type: FileChangeType.DELETED }\n\t\t];\n\n\t\tdisposables.add(watch.onDidFilesChange(({ event, raw }) => {\n\t\t\tassert.ok(event);\n\t\t\tassert.strictEqual(raw.length, 2);\n\n\t\t\tassert.ok(event.contains(deleted, FileChangeType.DELETED));\n\t\t\tassert.ok(!event.contains(updated, FileChangeType.UPDATED));\n\t\t\tassert.ok(event.contains(unrelated, FileChangeType.UPDATED));\n\n\t\t\tdone();\n\t\t}));\n\n\t\twatch.report(raw);\n\t});\n\n\ttest('event coalescer: track case renames', done => {\n\t\tconst watch = disposables.add(new TestFileWatcher());\n\n\t\tconst oldPath = URI.file('/users/data/src/added');\n\t\tconst newPath = URI.file('/users/data/src/ADDED');\n\n\t\tconst raw: IFileChange[] = [\n\t\t\t{ resource: newPath, type: FileChangeType.ADDED },\n\t\t\t{ resource: oldPath, type: FileChangeType.DELETED }\n\t\t];\n\n\t\tdisposables.add(watch.onDidFilesChange(({ event, raw }) => {\n\t\t\tassert.ok(event);\n\t\t\tassert.strictEqual(raw.length, 2);\n\n\t\t\tfor (const r of raw) {\n\t\t\t\tif (isEqual(r.resource, oldPath)) {\n\t\t\t\t\tassert.strictEqual(r.type, FileChangeType.DELETED);\n\t\t\t\t} else if (isEqual(r.resource, newPath)) {\n\t\t\t\t\tassert.strictEqual(r.type, FileChangeType.ADDED);\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdone();\n\t\t}));\n\n\t\twatch.report(raw);\n\t});\n\n\ttest('event type filter', () => {\n\t\tconst resource = URI.file('/users/data/src/related');\n\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.ADDED }, undefined), false);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.UPDATED }, undefined), false);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.DELETED }, undefined), false);\n\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.ADDED }, FileChangeFilter.UPDATED), true);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.ADDED }, FileChangeFilter.UPDATED | FileChangeFilter.DELETED), true);\n\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.ADDED }, FileChangeFilter.ADDED), false);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.ADDED }, FileChangeFilter.ADDED | FileChangeFilter.UPDATED), false);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.ADDED }, FileChangeFilter.ADDED | FileChangeFilter.UPDATED | FileChangeFilter.DELETED), false);\n\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.DELETED }, FileChangeFilter.UPDATED), true);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.DELETED }, FileChangeFilter.UPDATED | FileChangeFilter.ADDED), true);\n\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.DELETED }, FileChangeFilter.DELETED), false);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.DELETED }, FileChangeFilter.DELETED | FileChangeFilter.UPDATED), false);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.DELETED }, FileChangeFilter.ADDED | FileChangeFilter.DELETED | FileChangeFilter.UPDATED), false);\n\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.UPDATED }, FileChangeFilter.ADDED), true);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.UPDATED }, FileChangeFilter.DELETED | FileChangeFilter.ADDED), true);\n\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.UPDATED }, FileChangeFilter.UPDATED), false);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.UPDATED }, FileChangeFilter.DELETED | FileChangeFilter.UPDATED), false);\n\t\tassert.strictEqual(isFiltered({ resource, type: FileChangeType.UPDATED }, FileChangeFilter.ADDED | FileChangeFilter.DELETED | FileChangeFilter.UPDATED), false);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["Path", "raw"]
}
