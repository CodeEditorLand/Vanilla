import t from"assert";import{Emitter as w}from"../../../../base/common/event.js";import{Disposable as I,DisposableStore as L}from"../../../../base/common/lifecycle.js";import{isLinux as m,isWindows as A}from"../../../../base/common/platform.js";import{isEqual as q}from"../../../../base/common/resources.js";import{URI as a}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as F}from"../../../../base/test/common/utils.js";import{FileChangeFilter as o,FileChangesEvent as k,FileChangeType as s}from"../../common/files.js";import{coalesceEvents as W,reviveFileChanges as C,parseWatcherPatterns as f,isFiltered as i}from"../../common/watcher.js";class p extends I{_onDidFilesChange;constructor(){super(),this._onDidFilesChange=this._register(new w)}get onDidFilesChange(){return this._onDidFilesChange.event}report(e){this.onRawFileEvents(e)}onRawFileEvents(e){const l=W(e);l.length>0&&this._onDidFilesChange.fire({raw:C(l),event:this.toFileChangesEvent(l)})}toFileChangesEvent(e){return new k(C(e),!m)}}var N=(r=>(r[r.UNIX=0]="UNIX",r[r.WINDOWS=1]="WINDOWS",r[r.UNC=2]="UNC",r))(N||{});suite("Watcher",()=>{(A?test.skip:test)("parseWatcherPatterns - posix",()=>{const c="/users/data/src";let e=f(c,["*.js"])[0];t.strictEqual(e("/users/data/src/foo.js"),!0),t.strictEqual(e("/users/data/src/foo.ts"),!1),t.strictEqual(e("/users/data/src/bar/foo.js"),!1),e=f(c,["/users/data/src/*.js"])[0],t.strictEqual(e("/users/data/src/foo.js"),!0),t.strictEqual(e("/users/data/src/foo.ts"),!1),t.strictEqual(e("/users/data/src/bar/foo.js"),!1),e=f(c,["/users/data/src/bar/*.js"])[0],t.strictEqual(e("/users/data/src/foo.js"),!1),t.strictEqual(e("/users/data/src/foo.ts"),!1),t.strictEqual(e("/users/data/src/bar/foo.js"),!0),e=f(c,["**/*.js"])[0],t.strictEqual(e("/users/data/src/foo.js"),!0),t.strictEqual(e("/users/data/src/foo.ts"),!1),t.strictEqual(e("/users/data/src/bar/foo.js"),!0)}),(A?test:test.skip)("parseWatcherPatterns - windows",()=>{const c="c:\\users\\data\\src";let e=f(c,["*.js"])[0];t.strictEqual(e("c:\\users\\data\\src\\foo.js"),!0),t.strictEqual(e("c:\\users\\data\\src\\foo.ts"),!1),t.strictEqual(e("c:\\users\\data\\src\\bar/foo.js"),!1),e=f(c,["c:\\users\\data\\src\\*.js"])[0],t.strictEqual(e("c:\\users\\data\\src\\foo.js"),!0),t.strictEqual(e("c:\\users\\data\\src\\foo.ts"),!1),t.strictEqual(e("c:\\users\\data\\src\\bar\\foo.js"),!1),e=f(c,["c:\\users\\data\\src\\bar/*.js"])[0],t.strictEqual(e("c:\\users\\data\\src\\foo.js"),!1),t.strictEqual(e("c:\\users\\data\\src\\foo.ts"),!1),t.strictEqual(e("c:\\users\\data\\src\\bar\\foo.js"),!0),e=f(c,["**/*.js"])[0],t.strictEqual(e("c:\\users\\data\\src\\foo.js"),!0),t.strictEqual(e("c:\\users\\data\\src\\foo.ts"),!1),t.strictEqual(e("c:\\users\\data\\src\\bar\\foo.js"),!0)}),F()}),suite("Watcher Events Normalizer",()=>{const c=new L;teardown(()=>{c.clear()}),test("simple add/update/delete",e=>{const l=c.add(new p),r=a.file("/users/data/src/added.txt"),u=a.file("/users/data/src/updated.txt"),D=a.file("/users/data/src/deleted.txt"),n=[{resource:r,type:s.ADDED},{resource:u,type:s.UPDATED},{resource:D,type:s.DELETED}];c.add(l.onDidFilesChange(({event:d,raw:E})=>{t.ok(d),t.strictEqual(E.length,3),t.ok(d.contains(r,s.ADDED)),t.ok(d.contains(u,s.UPDATED)),t.ok(d.contains(D,s.DELETED)),e()})),l.report(n)}),(A?[1,2]:[0]).forEach(e=>{test(`delete only reported for top level folder (${e})`,l=>{const r=c.add(new p),u=a.file(e===0?"/users/data/src/todelete1":e===1?"C:\\users\\data\\src\\todelete1":"\\\\localhost\\users\\data\\src\\todelete1"),D=a.file(e===0?"/users/data/src/todelete2":e===1?"C:\\users\\data\\src\\todelete2":"\\\\localhost\\users\\data\\src\\todelete2"),n=a.file(e===0?"/users/data/src/todelete2/file.txt":e===1?"C:\\users\\data\\src\\todelete2\\file.txt":"\\\\localhost\\users\\data\\src\\todelete2\\file.txt"),d=a.file(e===0?"/users/data/src/todelete2/more/test.txt":e===1?"C:\\users\\data\\src\\todelete2\\more\\test.txt":"\\\\localhost\\users\\data\\src\\todelete2\\more\\test.txt"),E=a.file(e===0?"/users/data/src/todelete2/super/bar/foo.txt":e===1?"C:\\users\\data\\src\\todelete2\\super\\bar\\foo.txt":"\\\\localhost\\users\\data\\src\\todelete2\\super\\bar\\foo.txt"),h=a.file(e===0?"/users/data/src/deleteme.txt":e===1?"C:\\users\\data\\src\\deleteme.txt":"\\\\localhost\\users\\data\\src\\deleteme.txt"),P=a.file(e===0?"/users/data/src/added.txt":e===1?"C:\\users\\data\\src\\added.txt":"\\\\localhost\\users\\data\\src\\added.txt"),y=a.file(e===0?"/users/data/src/updated.txt":e===1?"C:\\users\\data\\src\\updated.txt":"\\\\localhost\\users\\data\\src\\updated.txt"),U=[{resource:u,type:s.DELETED},{resource:D,type:s.DELETED},{resource:n,type:s.DELETED},{resource:d,type:s.DELETED},{resource:E,type:s.DELETED},{resource:h,type:s.DELETED},{resource:P,type:s.ADDED},{resource:y,type:s.UPDATED}];c.add(r.onDidFilesChange(({event:T,raw:g})=>{t.ok(T),t.strictEqual(g.length,5),t.ok(T.contains(u,s.DELETED)),t.ok(T.contains(D,s.DELETED)),t.ok(T.contains(h,s.DELETED)),t.ok(T.contains(P,s.ADDED)),t.ok(T.contains(y,s.UPDATED)),l()})),r.report(U)})}),test("event coalescer: ignore CREATE followed by DELETE",e=>{const l=c.add(new p),r=a.file("/users/data/src/related"),u=a.file("/users/data/src/related"),D=a.file("/users/data/src/unrelated"),n=[{resource:r,type:s.ADDED},{resource:u,type:s.DELETED},{resource:D,type:s.UPDATED}];c.add(l.onDidFilesChange(({event:d,raw:E})=>{t.ok(d),t.strictEqual(E.length,1),t.ok(d.contains(D,s.UPDATED)),e()})),l.report(n)}),test("event coalescer: flatten DELETE followed by CREATE into CHANGE",e=>{const l=c.add(new p),r=a.file("/users/data/src/related"),u=a.file("/users/data/src/related"),D=a.file("/users/data/src/unrelated"),n=[{resource:r,type:s.DELETED},{resource:u,type:s.ADDED},{resource:D,type:s.UPDATED}];c.add(l.onDidFilesChange(({event:d,raw:E})=>{t.ok(d),t.strictEqual(E.length,2),t.ok(d.contains(r,s.UPDATED)),t.ok(d.contains(D,s.UPDATED)),e()})),l.report(n)}),test("event coalescer: ignore UPDATE when CREATE received",e=>{const l=c.add(new p),r=a.file("/users/data/src/related"),u=a.file("/users/data/src/related"),D=a.file("/users/data/src/unrelated"),n=[{resource:r,type:s.ADDED},{resource:u,type:s.UPDATED},{resource:D,type:s.UPDATED}];c.add(l.onDidFilesChange(({event:d,raw:E})=>{t.ok(d),t.strictEqual(E.length,2),t.ok(d.contains(r,s.ADDED)),t.ok(!d.contains(r,s.UPDATED)),t.ok(d.contains(D,s.UPDATED)),e()})),l.report(n)}),test("event coalescer: apply DELETE",e=>{const l=c.add(new p),r=a.file("/users/data/src/related"),u=a.file("/users/data/src/related"),D=a.file("/users/data/src/related"),n=a.file("/users/data/src/unrelated"),d=[{resource:r,type:s.UPDATED},{resource:u,type:s.UPDATED},{resource:n,type:s.UPDATED},{resource:r,type:s.DELETED}];c.add(l.onDidFilesChange(({event:E,raw:h})=>{t.ok(E),t.strictEqual(h.length,2),t.ok(E.contains(D,s.DELETED)),t.ok(!E.contains(r,s.UPDATED)),t.ok(E.contains(n,s.UPDATED)),e()})),l.report(d)}),test("event coalescer: track case renames",e=>{const l=c.add(new p),r=a.file("/users/data/src/added"),u=a.file("/users/data/src/ADDED"),D=[{resource:u,type:s.ADDED},{resource:r,type:s.DELETED}];c.add(l.onDidFilesChange(({event:n,raw:d})=>{t.ok(n),t.strictEqual(d.length,2);for(const E of d)q(E.resource,r)?t.strictEqual(E.type,s.DELETED):q(E.resource,u)?t.strictEqual(E.type,s.ADDED):t.fail();e()})),l.report(D)}),test("event type filter",()=>{const e=a.file("/users/data/src/related");t.strictEqual(i({resource:e,type:s.ADDED},void 0),!1),t.strictEqual(i({resource:e,type:s.UPDATED},void 0),!1),t.strictEqual(i({resource:e,type:s.DELETED},void 0),!1),t.strictEqual(i({resource:e,type:s.ADDED},o.UPDATED),!0),t.strictEqual(i({resource:e,type:s.ADDED},o.UPDATED|o.DELETED),!0),t.strictEqual(i({resource:e,type:s.ADDED},o.ADDED),!1),t.strictEqual(i({resource:e,type:s.ADDED},o.ADDED|o.UPDATED),!1),t.strictEqual(i({resource:e,type:s.ADDED},o.ADDED|o.UPDATED|o.DELETED),!1),t.strictEqual(i({resource:e,type:s.DELETED},o.UPDATED),!0),t.strictEqual(i({resource:e,type:s.DELETED},o.UPDATED|o.ADDED),!0),t.strictEqual(i({resource:e,type:s.DELETED},o.DELETED),!1),t.strictEqual(i({resource:e,type:s.DELETED},o.DELETED|o.UPDATED),!1),t.strictEqual(i({resource:e,type:s.DELETED},o.ADDED|o.DELETED|o.UPDATED),!1),t.strictEqual(i({resource:e,type:s.UPDATED},o.ADDED),!0),t.strictEqual(i({resource:e,type:s.UPDATED},o.DELETED|o.ADDED),!0),t.strictEqual(i({resource:e,type:s.UPDATED},o.UPDATED),!1),t.strictEqual(i({resource:e,type:s.UPDATED},o.DELETED|o.UPDATED),!1),t.strictEqual(i({resource:e,type:s.UPDATED},o.ADDED|o.DELETED|o.UPDATED),!1)}),F()});
