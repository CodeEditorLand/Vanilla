import r from"assert";import{DeferredPromise as R,timeout as w}from"../../../../base/common/async.js";import{bufferToReadable as P,bufferToStream as A,VSBuffer as f}from"../../../../base/common/buffer.js";import{CancellationToken as b,CancellationTokenSource as q}from"../../../../base/common/cancellation.js";import{Emitter as W}from"../../../../base/common/event.js";import{DisposableStore as k,toDisposable as x}from"../../../../base/common/lifecycle.js";import{isEqual as g}from"../../../../base/common/resources.js";import{consumeStream as U,newWriteableStream as C}from"../../../../base/common/stream.js";import{URI as m}from"../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as T}from"../../../../base/test/common/utils.js";import{FileSystemProviderCapabilities as u,FileType as I,isFileSystemWatcher as D,FileChangeType as p}from"../../common/files.js";import{FileService as F}from"../../common/fileService.js";import{NullFileSystemProvider as v}from"../common/nullFileSystemProvider.js";import{NullLogService as E}from"../../../log/common/log.js";suite("File Service",()=>{const n=new k;teardown(()=>{n.clear()}),test("provider registration",async()=>{const e=n.add(new F(new E)),t=m.parse("test://foo/bar"),c=new v;r.strictEqual(await e.canHandleResource(t),!1),r.strictEqual(e.hasProvider(t),!1),r.strictEqual(e.getProvider(t.scheme),void 0);const o=[];n.add(e.onDidChangeFileSystemProviderRegistrations(i=>{o.push(i)}));const d=[];n.add(e.onDidChangeFileSystemProviderCapabilities(i=>{d.push(i)}));let a,s=0;n.add(e.onWillActivateFileSystemProvider(i=>{s++,i.scheme==="test"&&s===1&&i.join(new Promise(l=>{a=e.registerProvider("test",c),l()}))})),r.strictEqual(await e.canHandleResource(t),!0),r.strictEqual(e.hasProvider(t),!0),r.strictEqual(e.getProvider(t.scheme),c),r.strictEqual(o.length,1),r.strictEqual(o[0].scheme,"test"),r.strictEqual(o[0].added,!0),r.ok(a),r.strictEqual(d.length,0),c.setCapabilities(u.FileFolderCopy),r.strictEqual(d.length,1),c.setCapabilities(u.Readonly),r.strictEqual(d.length,2),await e.activateProvider("test"),r.strictEqual(s,2),r.strictEqual(e.hasCapability(t,u.Readonly),!0),r.strictEqual(e.hasCapability(t,u.FileOpenReadWriteClose),!1),a.dispose(),r.strictEqual(await e.canHandleResource(t),!1),r.strictEqual(e.hasProvider(t),!1),r.strictEqual(o.length,2),r.strictEqual(o[1].scheme,"test"),r.strictEqual(o[1].added,!1)}),test("watch",async()=>{const e=n.add(new F(new E));let t=0;n.add(e.registerProvider("test",new v(()=>x(()=>{t++})))),await e.activateProvider("test");const c=m.parse("test://foo/bar1"),o=e.watch(c);await w(0),r.strictEqual(t,0),o.dispose(),r.strictEqual(t,1),t=0;const d=m.parse("test://foo/bar2"),a=e.watch(d),s=e.watch(d),i=e.watch(d);await w(0),r.strictEqual(t,0),a.dispose(),r.strictEqual(t,0),s.dispose(),r.strictEqual(t,0),i.dispose(),r.strictEqual(t,1),t=0;const l=m.parse("test://foo/bar3"),h=e.watch(l),y=e.watch(l,{recursive:!0,excludes:[]}),O=e.watch(l,{recursive:!1,excludes:[],includes:[]});await w(0),r.strictEqual(t,0),h.dispose(),r.strictEqual(t,1),y.dispose(),r.strictEqual(t,2),O.dispose(),r.strictEqual(t,3),e.dispose()}),test("watch - with corelation",async()=>{const e=n.add(new F(new E)),t=new class extends v{_testOnDidChangeFile=new W;onDidChangeFile=this._testOnDidChangeFile.event;fireFileChange(l){this._testOnDidChangeFile.fire(l)}};n.add(e.registerProvider("test",t)),await e.activateProvider("test");const c=[];n.add(e.onDidFilesChange(l=>{c.push(l)}));const o=n.add(e.watch(m.parse("test://watch/folder1"),{recursive:!0,excludes:[],includes:[]}));r.strictEqual(D(o),!1);const d=n.add(e.watch(m.parse("test://watch/folder2"),{recursive:!0,excludes:[],includes:[],correlationId:100}));r.strictEqual(D(d),!0);const a=n.add(e.watch(m.parse("test://watch/folder3"),{recursive:!0,excludes:[],includes:[],correlationId:200}));r.strictEqual(D(a),!0);const s=[];n.add(d.onDidChange(l=>{s.push(l)}));const i=[];n.add(a.onDidChange(l=>{i.push(l)})),t.fireFileChange([{resource:m.parse("test://watch/folder1"),type:p.ADDED}]),t.fireFileChange([{resource:m.parse("test://watch/folder2"),type:p.ADDED,cId:100}]),t.fireFileChange([{resource:m.parse("test://watch/folder2"),type:p.ADDED,cId:100}]),t.fireFileChange([{resource:m.parse("test://watch/folder3/file"),type:p.UPDATED,cId:200}]),t.fireFileChange([{resource:m.parse("test://watch/folder3"),type:p.UPDATED,cId:200}]),t.fireFileChange([{resource:m.parse("test://watch/folder4"),type:p.ADDED,cId:50}]),t.fireFileChange([{resource:m.parse("test://watch/folder4"),type:p.ADDED,cId:60}]),t.fireFileChange([{resource:m.parse("test://watch/folder4"),type:p.ADDED,cId:70}]),r.strictEqual(c.length,1),r.strictEqual(s.length,2),r.strictEqual(i.length,2)}),test("error from readFile bubbles through (https://github.com/microsoft/vscode/issues/118060) - async",async()=>{S(!0)}),test("error from readFile bubbles through (https://github.com/microsoft/vscode/issues/118060)",async()=>{S(!1)});async function S(e){const t=n.add(new F(new E)),c=new class extends v{async stat(o){return{mtime:Date.now(),ctime:Date.now(),size:100,type:I.File}}readFile(o){if(e)return w(5,b.None).then(()=>{throw new Error("failed")});throw new Error("failed")}open(o,d){if(e)return w(5,b.None).then(()=>{throw new Error("failed")});throw new Error("failed")}readFileStream(o,d,a){if(e){const s=C(i=>i[0]);return w(5,b.None).then(()=>s.error(new Error("failed"))),s}throw new Error("failed")}};n.add(t.registerProvider("test",c));for(const o of[u.FileReadWrite,u.FileReadStream,u.FileOpenReadWriteClose]){c.setCapabilities(o);let d;try{await t.readFile(m.parse("test://foo/bar"))}catch(s){d=s}r.ok(d);let a;try{const s=await t.readFileStream(m.parse("test://foo/bar"));await U(s.value,i=>i[0])}catch(s){a=s}r.ok(a)}}test("readFile/readFileStream supports cancellation (https://github.com/microsoft/vscode/issues/138805)",async()=>{const e=n.add(new F(new E));let t;const c=new class extends v{async stat(a){return{mtime:Date.now(),ctime:Date.now(),size:100,type:I.File}}readFileStream(a,s,i){const l=C(h=>h[0]);return n.add(i.onCancellationRequested(()=>{l.error(new Error("Expected cancellation")),l.end()})),t.complete(),l}};n.add(e.registerProvider("test",c)),c.setCapabilities(u.FileReadStream);let o;try{const a=new q;t=new R;const s=e.readFile(m.parse("test://foo/bar"),void 0,a.token);await Promise.all([t.p.then(()=>a.cancel()),s])}catch(a){o=a}r.ok(o);let d;try{const a=new q;t=new R;const s=await e.readFileStream(m.parse("test://foo/bar"),void 0,a.token);await Promise.all([t.p.then(()=>a.cancel()),U(s.value,i=>i[0])])}catch(a){d=a}r.ok(d)}),test("enforced atomic read/write/delete",async()=>{const e=n.add(new F(new E)),t=m.parse("test://foo/bar/atomic"),c=m.parse("test://foo/nonatomic");let o=0,d=0,a=0;const s=new class extends v{async stat(i){return{type:I.File,ctime:Date.now(),mtime:Date.now(),size:0}}async readFile(i,l){return l?.atomic&&o++,new Uint8Array}readFileStream(i,l,h){return C(y=>y[0])}enforceAtomicReadFile(i){return g(i,t)}async writeFile(i,l,h){h.atomic&&d++}enforceAtomicWriteFile(i){return g(i,t)?{postfix:".tmp"}:!1}async delete(i,l){l.atomic&&a++}enforceAtomicDelete(i){return g(i,t)?{postfix:".tmp"}:!1}};s.setCapabilities(u.FileReadWrite|u.FileOpenReadWriteClose|u.FileReadStream|u.FileAtomicRead|u.FileAtomicWrite|u.FileAtomicDelete),n.add(e.registerProvider("test",s)),await e.readFile(t),await e.readFile(c),await e.readFileStream(t),await e.readFileStream(c),await e.writeFile(t,f.fromString("")),await e.writeFile(c,f.fromString("")),await e.writeFile(t,A(f.fromString(""))),await e.writeFile(c,A(f.fromString(""))),await e.writeFile(t,P(f.fromString(""))),await e.writeFile(c,P(f.fromString(""))),await e.del(t),await e.del(c),r.strictEqual(o,2),r.strictEqual(d,3),r.strictEqual(a,1)}),T()});
