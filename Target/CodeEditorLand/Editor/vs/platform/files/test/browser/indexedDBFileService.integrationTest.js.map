{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/test/browser/indexedDBFileService.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IndexedDB } from '../../../../base/browser/indexedDB.js';\nimport { bufferToReadable, bufferToStream, VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { basename, joinPath } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { flakySuite } from '../../../../base/test/common/testUtils.js';\nimport { IndexedDBFileSystemProvider } from '../../browser/indexedDBFileSystemProvider.js';\nimport { FileOperation, FileOperationError, FileOperationEvent, FileOperationResult, FileSystemProviderError, FileSystemProviderErrorCode, FileType } from '../../common/files.js';\nimport { FileService } from '../../common/fileService.js';\nimport { NullLogService } from '../../../log/common/log.js';\n\nflakySuite('IndexedDBFileSystemProvider', function () {\n\n\tlet service: FileService;\n\tlet userdataFileProvider: IndexedDBFileSystemProvider;\n\tconst testDir = '/';\n\n\tconst userdataURIFromPaths = (paths: readonly string[]) => joinPath(URI.from({ scheme: Schemas.vscodeUserData, path: testDir }), ...paths);\n\n\tconst disposables = new DisposableStore();\n\n\tconst initFixtures = async () => {\n\t\tawait Promise.all(\n\t\t\t[['fixtures', 'resolver', 'examples'],\n\t\t\t['fixtures', 'resolver', 'other', 'deep'],\n\t\t\t['fixtures', 'service', 'deep'],\n\t\t\t['batched']]\n\t\t\t\t.map(path => userdataURIFromPaths(path))\n\t\t\t\t.map(uri => service.createFolder(uri)));\n\t\tawait Promise.all(\n\t\t\t([\n\t\t\t\t[['fixtures', 'resolver', 'examples', 'company.js'], 'class company {}'],\n\t\t\t\t[['fixtures', 'resolver', 'examples', 'conway.js'], 'export function conway() {}'],\n\t\t\t\t[['fixtures', 'resolver', 'examples', 'employee.js'], 'export const employee = \"jax\"'],\n\t\t\t\t[['fixtures', 'resolver', 'examples', 'small.js'], ''],\n\t\t\t\t[['fixtures', 'resolver', 'other', 'deep', 'company.js'], 'class company {}'],\n\t\t\t\t[['fixtures', 'resolver', 'other', 'deep', 'conway.js'], 'export function conway() {}'],\n\t\t\t\t[['fixtures', 'resolver', 'other', 'deep', 'employee.js'], 'export const employee = \"jax\"'],\n\t\t\t\t[['fixtures', 'resolver', 'other', 'deep', 'small.js'], ''],\n\t\t\t\t[['fixtures', 'resolver', 'index.html'], '<p>p</p>'],\n\t\t\t\t[['fixtures', 'resolver', 'site.css'], '.p {color: red;}'],\n\t\t\t\t[['fixtures', 'service', 'deep', 'company.js'], 'class company {}'],\n\t\t\t\t[['fixtures', 'service', 'deep', 'conway.js'], 'export function conway() {}'],\n\t\t\t\t[['fixtures', 'service', 'deep', 'employee.js'], 'export const employee = \"jax\"'],\n\t\t\t\t[['fixtures', 'service', 'deep', 'small.js'], ''],\n\t\t\t\t[['fixtures', 'service', 'binary.txt'], '<p>p</p>'],\n\t\t\t] as const)\n\t\t\t\t.map(([path, contents]) => [userdataURIFromPaths(path), contents] as const)\n\t\t\t\t.map(([uri, contents]) => service.createFile(uri, VSBuffer.fromString(contents)))\n\t\t);\n\t};\n\n\tconst reload = async () => {\n\t\tconst logService = new NullLogService();\n\n\t\tservice = new FileService(logService);\n\t\tdisposables.add(service);\n\n\t\tconst indexedDB = await IndexedDB.create('vscode-web-db-test', 1, ['vscode-userdata-store', 'vscode-logs-store']);\n\n\t\tuserdataFileProvider = new IndexedDBFileSystemProvider(Schemas.vscodeUserData, indexedDB, 'vscode-userdata-store', true);\n\t\tdisposables.add(service.registerProvider(Schemas.vscodeUserData, userdataFileProvider));\n\t\tdisposables.add(userdataFileProvider);\n\t};\n\n\tsetup(async function () {\n\t\tthis.timeout(15000);\n\t\tawait reload();\n\t});\n\n\tteardown(async () => {\n\t\tawait userdataFileProvider.reset();\n\t\tdisposables.clear();\n\t});\n\n\ttest('root is always present', async () => {\n\t\tassert.strictEqual((await userdataFileProvider.stat(userdataURIFromPaths([]))).type, FileType.Directory);\n\t\tawait userdataFileProvider.delete(userdataURIFromPaths([]), { recursive: true, useTrash: false, atomic: false });\n\t\tassert.strictEqual((await userdataFileProvider.stat(userdataURIFromPaths([]))).type, FileType.Directory);\n\t});\n\n\ttest('createFolder', async () => {\n\t\tlet event: FileOperationEvent | undefined;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst newFolderResource = joinPath(parent.resource, 'newFolder');\n\n\t\tassert.strictEqual((await userdataFileProvider.readdir(parent.resource)).length, 0);\n\t\tconst newFolder = await service.createFolder(newFolderResource);\n\t\tassert.strictEqual(newFolder.name, 'newFolder');\n\t\tassert.strictEqual((await userdataFileProvider.readdir(parent.resource)).length, 1);\n\t\tassert.strictEqual((await userdataFileProvider.stat(newFolderResource)).type, FileType.Directory);\n\n\t\tassert.ok(event);\n\t\tassert.strictEqual(event.resource.path, newFolderResource.path);\n\t\tassert.strictEqual(event.operation, FileOperation.CREATE);\n\t\tassert.strictEqual(event.target!.resource.path, newFolderResource.path);\n\t\tassert.strictEqual(event.target!.isDirectory, true);\n\t});\n\n\ttest('createFolder: creating multiple folders at once', async () => {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst multiFolderPaths = ['a', 'couple', 'of', 'folders'];\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst newFolderResource = joinPath(parent.resource, ...multiFolderPaths);\n\n\t\tconst newFolder = await service.createFolder(newFolderResource);\n\n\t\tconst lastFolderName = multiFolderPaths[multiFolderPaths.length - 1];\n\t\tassert.strictEqual(newFolder.name, lastFolderName);\n\t\tassert.strictEqual((await userdataFileProvider.stat(newFolderResource)).type, FileType.Directory);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.path, newFolderResource.path);\n\t\tassert.strictEqual(event!.operation, FileOperation.CREATE);\n\t\tassert.strictEqual(event!.target!.resource.path, newFolderResource.path);\n\t\tassert.strictEqual(event!.target!.isDirectory, true);\n\t});\n\n\ttest('exists', async () => {\n\t\tlet exists = await service.exists(userdataURIFromPaths([]));\n\t\tassert.strictEqual(exists, true);\n\n\t\texists = await service.exists(userdataURIFromPaths(['hello']));\n\t\tassert.strictEqual(exists, false);\n\t});\n\n\ttest('resolve - file', async () => {\n\t\tawait initFixtures();\n\n\t\tconst resource = userdataURIFromPaths(['fixtures', 'resolver', 'index.html']);\n\t\tconst resolved = await service.resolve(resource);\n\n\t\tassert.strictEqual(resolved.name, 'index.html');\n\t\tassert.strictEqual(resolved.isFile, true);\n\t\tassert.strictEqual(resolved.isDirectory, false);\n\t\tassert.strictEqual(resolved.isSymbolicLink, false);\n\t\tassert.strictEqual(resolved.resource.toString(), resource.toString());\n\t\tassert.strictEqual(resolved.children, undefined);\n\t\tassert.ok(resolved.size! > 0);\n\t});\n\n\ttest('resolve - directory', async () => {\n\t\tawait initFixtures();\n\n\t\tconst testsElements = ['examples', 'other', 'index.html', 'site.css'];\n\n\t\tconst resource = userdataURIFromPaths(['fixtures', 'resolver']);\n\t\tconst result = await service.resolve(resource);\n\n\t\tassert.ok(result);\n\t\tassert.strictEqual(result.resource.toString(), resource.toString());\n\t\tassert.strictEqual(result.name, 'resolver');\n\t\tassert.ok(result.children);\n\t\tassert.ok(result.children.length > 0);\n\t\tassert.ok(result.isDirectory);\n\t\tassert.strictEqual(result.children.length, testsElements.length);\n\n\t\tassert.ok(result.children.every(entry => {\n\t\t\treturn testsElements.some(name => {\n\t\t\t\treturn basename(entry.resource) === name;\n\t\t\t});\n\t\t}));\n\n\t\tresult.children.forEach(value => {\n\t\t\tassert.ok(basename(value.resource));\n\t\t\tif (['examples', 'other'].indexOf(basename(value.resource)) >= 0) {\n\t\t\t\tassert.ok(value.isDirectory);\n\t\t\t\tassert.strictEqual(value.mtime, undefined);\n\t\t\t\tassert.strictEqual(value.ctime, undefined);\n\t\t\t} else if (basename(value.resource) === 'index.html') {\n\t\t\t\tassert.ok(!value.isDirectory);\n\t\t\t\tassert.ok(!value.children);\n\t\t\t\tassert.strictEqual(value.mtime, undefined);\n\t\t\t\tassert.strictEqual(value.ctime, undefined);\n\t\t\t} else if (basename(value.resource) === 'site.css') {\n\t\t\t\tassert.ok(!value.isDirectory);\n\t\t\t\tassert.ok(!value.children);\n\t\t\t\tassert.strictEqual(value.mtime, undefined);\n\t\t\t\tassert.strictEqual(value.ctime, undefined);\n\t\t\t} else {\n\t\t\t\tassert.fail('Unexpected value ' + basename(value.resource));\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('createFile', async () => {\n\t\treturn assertCreateFile(contents => VSBuffer.fromString(contents));\n\t});\n\n\ttest('createFile (readable)', async () => {\n\t\treturn assertCreateFile(contents => bufferToReadable(VSBuffer.fromString(contents)));\n\t});\n\n\ttest('createFile (stream)', async () => {\n\t\treturn assertCreateFile(contents => bufferToStream(VSBuffer.fromString(contents)));\n\t});\n\n\tasync function assertCreateFile(converter: (content: string) => VSBuffer | VSBufferReadable | VSBufferReadableStream): Promise<void> {\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst contents = 'Hello World';\n\t\tconst resource = userdataURIFromPaths(['test.txt']);\n\n\t\tassert.strictEqual(await service.canCreateFile(resource), true);\n\t\tconst fileStat = await service.createFile(resource, converter(contents));\n\t\tassert.strictEqual(fileStat.name, 'test.txt');\n\t\tassert.strictEqual((await userdataFileProvider.stat(fileStat.resource)).type, FileType.File);\n\t\tassert.strictEqual(new TextDecoder().decode(await userdataFileProvider.readFile(fileStat.resource)), contents);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.path, resource.path);\n\t\tassert.strictEqual(event!.operation, FileOperation.CREATE);\n\t\tassert.strictEqual(event!.target!.resource.path, resource.path);\n\t}\n\n\tconst fileCreateBatchTester = (size: number, name: string) => {\n\t\tconst batch = Array.from({ length: size }).map((_, i) => ({ contents: `Hello${i}`, resource: userdataURIFromPaths(['batched', name, `Hello${i}.txt`]) }));\n\t\tlet creationPromises: Promise<any> | undefined = undefined;\n\t\treturn {\n\t\t\tasync create() {\n\t\t\t\treturn creationPromises = Promise.all(batch.map(entry => userdataFileProvider.writeFile(entry.resource, VSBuffer.fromString(entry.contents).buffer, { create: true, overwrite: true, unlock: false, atomic: false })));\n\t\t\t},\n\t\t\tasync assertContentsCorrect() {\n\t\t\t\tif (!creationPromises) { throw Error('read called before create'); }\n\t\t\t\tawait creationPromises;\n\t\t\t\tawait Promise.all(batch.map(async (entry, i) => {\n\t\t\t\t\tassert.strictEqual((await userdataFileProvider.stat(entry.resource)).type, FileType.File);\n\t\t\t\t\tassert.strictEqual(new TextDecoder().decode(await userdataFileProvider.readFile(entry.resource)), entry.contents);\n\t\t\t\t}));\n\t\t\t}\n\t\t};\n\t};\n\n\ttest('createFile - batch', async () => {\n\t\tconst tester = fileCreateBatchTester(20, 'batch');\n\t\tawait tester.create();\n\t\tawait tester.assertContentsCorrect();\n\t});\n\n\ttest('createFile - batch (mixed parallel/sequential)', async () => {\n\t\tconst batch1 = fileCreateBatchTester(1, 'batch1');\n\t\tconst batch2 = fileCreateBatchTester(20, 'batch2');\n\t\tconst batch3 = fileCreateBatchTester(1, 'batch3');\n\t\tconst batch4 = fileCreateBatchTester(20, 'batch4');\n\n\t\tbatch1.create();\n\t\tbatch2.create();\n\t\tawait Promise.all([batch1.assertContentsCorrect(), batch2.assertContentsCorrect()]);\n\t\tbatch3.create();\n\t\tbatch4.create();\n\t\tawait Promise.all([batch3.assertContentsCorrect(), batch4.assertContentsCorrect()]);\n\t\tawait Promise.all([batch1.assertContentsCorrect(), batch2.assertContentsCorrect()]);\n\t});\n\n\ttest('rename not existing resource', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFile = joinPath(parent.resource, 'sourceFile');\n\t\tconst targetFile = joinPath(parent.resource, 'targetFile');\n\n\t\ttry {\n\t\t\tawait service.move(sourceFile, targetFile, false);\n\t\t} catch (error) {\n\t\t\tassert.deepStrictEqual((<FileSystemProviderError>error).code, FileSystemProviderErrorCode.FileNotFound);\n\t\t\treturn;\n\t\t}\n\n\t\tassert.fail('This should fail with error');\n\t});\n\n\ttest('rename to an existing file without overwrite', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFile = joinPath(parent.resource, 'sourceFile');\n\t\tawait service.writeFile(sourceFile, VSBuffer.fromString('This is source file'));\n\n\t\tconst targetFile = joinPath(parent.resource, 'targetFile');\n\t\tawait service.writeFile(targetFile, VSBuffer.fromString('This is target file'));\n\n\t\ttry {\n\t\t\tawait service.move(sourceFile, targetFile, false);\n\t\t} catch (error) {\n\t\t\tassert.deepStrictEqual((<FileOperationError>error).fileOperationResult, FileOperationResult.FILE_MOVE_CONFLICT);\n\t\t\treturn;\n\t\t}\n\n\t\tassert.fail('This should fail with error');\n\t});\n\n\ttest('rename folder to an existing folder without overwrite', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFolder = joinPath(parent.resource, 'sourceFolder');\n\t\tawait service.createFolder(sourceFolder);\n\t\tconst targetFolder = joinPath(parent.resource, 'targetFolder');\n\t\tawait service.createFolder(targetFolder);\n\n\t\ttry {\n\t\t\tawait service.move(sourceFolder, targetFolder, false);\n\t\t} catch (error) {\n\t\t\tassert.deepStrictEqual((<FileOperationError>error).fileOperationResult, FileOperationResult.FILE_MOVE_CONFLICT);\n\t\t\treturn;\n\t\t}\n\n\t\tassert.fail('This should fail with cannot overwrite error');\n\t});\n\n\ttest('rename file to a folder', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFile = joinPath(parent.resource, 'sourceFile');\n\t\tawait service.writeFile(sourceFile, VSBuffer.fromString('This is source file'));\n\n\t\tconst targetFolder = joinPath(parent.resource, 'targetFolder');\n\t\tawait service.createFolder(targetFolder);\n\n\t\ttry {\n\t\t\tawait service.move(sourceFile, targetFolder, false);\n\t\t} catch (error) {\n\t\t\tassert.deepStrictEqual((<FileOperationError>error).fileOperationResult, FileOperationResult.FILE_MOVE_CONFLICT);\n\t\t\treturn;\n\t\t}\n\n\t\tassert.fail('This should fail with error');\n\t});\n\n\ttest('rename folder to a file', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFolder = joinPath(parent.resource, 'sourceFile');\n\t\tawait service.createFolder(sourceFolder);\n\n\t\tconst targetFile = joinPath(parent.resource, 'targetFile');\n\t\tawait service.writeFile(targetFile, VSBuffer.fromString('This is target file'));\n\n\t\ttry {\n\t\t\tawait service.move(sourceFolder, targetFile, false);\n\t\t} catch (error) {\n\t\t\tassert.deepStrictEqual((<FileOperationError>error).fileOperationResult, FileOperationResult.FILE_MOVE_CONFLICT);\n\t\t\treturn;\n\t\t}\n\n\t\tassert.fail('This should fail with error');\n\t});\n\n\ttest('rename file', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFile = joinPath(parent.resource, 'sourceFile');\n\t\tawait service.writeFile(sourceFile, VSBuffer.fromString('This is source file'));\n\n\t\tconst targetFile = joinPath(parent.resource, 'targetFile');\n\t\tawait service.move(sourceFile, targetFile, false);\n\n\t\tconst content = await service.readFile(targetFile);\n\t\tassert.strictEqual(await service.exists(sourceFile), false);\n\t\tassert.strictEqual(content.value.toString(), 'This is source file');\n\t});\n\n\ttest('rename to an existing file with overwrite', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFile = joinPath(parent.resource, 'sourceFile');\n\t\tconst targetFile = joinPath(parent.resource, 'targetFile');\n\n\t\tawait Promise.all([\n\t\t\tservice.writeFile(sourceFile, VSBuffer.fromString('This is source file')),\n\t\t\tservice.writeFile(targetFile, VSBuffer.fromString('This is target file'))\n\t\t]);\n\n\t\tawait service.move(sourceFile, targetFile, true);\n\n\t\tconst content = await service.readFile(targetFile);\n\t\tassert.strictEqual(await service.exists(sourceFile), false);\n\t\tassert.strictEqual(content.value.toString(), 'This is source file');\n\t});\n\n\ttest('rename folder to a new folder', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFolder = joinPath(parent.resource, 'sourceFolder');\n\t\tawait service.createFolder(sourceFolder);\n\n\t\tconst targetFolder = joinPath(parent.resource, 'targetFolder');\n\t\tawait service.move(sourceFolder, targetFolder, false);\n\n\t\tassert.deepStrictEqual(await service.exists(sourceFolder), false);\n\t\tassert.deepStrictEqual(await service.exists(targetFolder), true);\n\t});\n\n\ttest('rename folder to an existing folder', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst sourceFolder = joinPath(parent.resource, 'sourceFolder');\n\t\tawait service.createFolder(sourceFolder);\n\t\tconst targetFolder = joinPath(parent.resource, 'targetFolder');\n\t\tawait service.createFolder(targetFolder);\n\n\t\tawait service.move(sourceFolder, targetFolder, true);\n\n\t\tassert.deepStrictEqual(await service.exists(sourceFolder), false);\n\t\tassert.deepStrictEqual(await service.exists(targetFolder), true);\n\t});\n\n\ttest('rename a folder that has multiple files and folders', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\n\t\tconst sourceFolder = joinPath(parent.resource, 'sourceFolder');\n\t\tconst sourceFile1 = joinPath(sourceFolder, 'folder1', 'file1');\n\t\tconst sourceFile2 = joinPath(sourceFolder, 'folder2', 'file1');\n\t\tconst sourceEmptyFolder = joinPath(sourceFolder, 'folder3');\n\n\t\tawait Promise.all([\n\t\t\tservice.writeFile(sourceFile1, VSBuffer.fromString('Source File 1')),\n\t\t\tservice.writeFile(sourceFile2, VSBuffer.fromString('Source File 2')),\n\t\t\tservice.createFolder(sourceEmptyFolder)\n\t\t]);\n\n\t\tconst targetFolder = joinPath(parent.resource, 'targetFolder');\n\t\tconst targetFile1 = joinPath(targetFolder, 'folder1', 'file1');\n\t\tconst targetFile2 = joinPath(targetFolder, 'folder2', 'file1');\n\t\tconst targetEmptyFolder = joinPath(targetFolder, 'folder3');\n\n\t\tawait service.move(sourceFolder, targetFolder, false);\n\n\t\tassert.deepStrictEqual(await service.exists(sourceFolder), false);\n\t\tassert.deepStrictEqual(await service.exists(targetFolder), true);\n\t\tassert.strictEqual((await service.readFile(targetFile1)).value.toString(), 'Source File 1');\n\t\tassert.strictEqual((await service.readFile(targetFile2)).value.toString(), 'Source File 2');\n\t\tassert.deepStrictEqual(await service.exists(targetEmptyFolder), true);\n\t});\n\n\ttest('rename a folder to another folder that has some files', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\n\t\tconst sourceFolder = joinPath(parent.resource, 'sourceFolder');\n\t\tconst sourceFile1 = joinPath(sourceFolder, 'folder1', 'file1');\n\n\t\tconst targetFolder = joinPath(parent.resource, 'targetFolder');\n\t\tconst targetFile1 = joinPath(targetFolder, 'folder1', 'file1');\n\t\tconst targetFile2 = joinPath(targetFolder, 'folder1', 'file2');\n\t\tconst targetFile3 = joinPath(targetFolder, 'folder2', 'file1');\n\n\t\tawait Promise.all([\n\t\t\tservice.writeFile(sourceFile1, VSBuffer.fromString('Source File 1')),\n\t\t\tservice.writeFile(targetFile2, VSBuffer.fromString('Target File 2')),\n\t\t\tservice.writeFile(targetFile3, VSBuffer.fromString('Target File 3'))\n\t\t]);\n\n\t\tawait service.move(sourceFolder, targetFolder, true);\n\n\t\tassert.deepStrictEqual(await service.exists(sourceFolder), false);\n\t\tassert.deepStrictEqual(await service.exists(targetFolder), true);\n\t\tassert.strictEqual((await service.readFile(targetFile1)).value.toString(), 'Source File 1');\n\t\tassert.strictEqual(await service.exists(targetFile2), false);\n\t\tassert.strictEqual(await service.exists(targetFile3), false);\n\t});\n\n\ttest('deleteFile', async () => {\n\t\tawait initFixtures();\n\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst anotherResource = userdataURIFromPaths(['fixtures', 'service', 'deep', 'company.js']);\n\t\tconst resource = userdataURIFromPaths(['fixtures', 'service', 'deep', 'conway.js']);\n\t\tconst source = await service.resolve(resource);\n\n\t\tassert.strictEqual(await service.canDelete(source.resource, { useTrash: false }), true);\n\t\tawait service.del(source.resource, { useTrash: false });\n\n\t\tassert.strictEqual(await service.exists(source.resource), false);\n\t\tassert.strictEqual(await service.exists(anotherResource), true);\n\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.path, resource.path);\n\t\tassert.strictEqual(event!.operation, FileOperation.DELETE);\n\n\t\t{\n\t\t\tlet error: Error | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tawait service.del(source.resource, { useTrash: false });\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\tassert.ok(error);\n\t\t\tassert.strictEqual((<FileOperationError>error).fileOperationResult, FileOperationResult.FILE_NOT_FOUND);\n\t\t}\n\t\tawait reload();\n\t\t{\n\t\t\tlet error: Error | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tawait service.del(source.resource, { useTrash: false });\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\tassert.ok(error);\n\t\t\tassert.strictEqual((<FileOperationError>error).fileOperationResult, FileOperationResult.FILE_NOT_FOUND);\n\t\t}\n\t});\n\n\ttest('deleteFolder (recursive)', async () => {\n\t\tawait initFixtures();\n\t\tlet event: FileOperationEvent;\n\t\tdisposables.add(service.onDidRunOperation(e => event = e));\n\n\t\tconst resource = userdataURIFromPaths(['fixtures', 'service', 'deep']);\n\t\tconst subResource1 = userdataURIFromPaths(['fixtures', 'service', 'deep', 'company.js']);\n\t\tconst subResource2 = userdataURIFromPaths(['fixtures', 'service', 'deep', 'conway.js']);\n\t\tassert.strictEqual(await service.exists(subResource1), true);\n\t\tassert.strictEqual(await service.exists(subResource2), true);\n\n\t\tconst source = await service.resolve(resource);\n\n\t\tassert.strictEqual(await service.canDelete(source.resource, { recursive: true, useTrash: false }), true);\n\t\tawait service.del(source.resource, { recursive: true, useTrash: false });\n\n\t\tassert.strictEqual(await service.exists(source.resource), false);\n\t\tassert.strictEqual(await service.exists(subResource1), false);\n\t\tassert.strictEqual(await service.exists(subResource2), false);\n\t\tassert.ok(event!);\n\t\tassert.strictEqual(event!.resource.fsPath, resource.fsPath);\n\t\tassert.strictEqual(event!.operation, FileOperation.DELETE);\n\t});\n\n\ttest('deleteFolder (non recursive)', async () => {\n\t\tawait initFixtures();\n\t\tconst resource = userdataURIFromPaths(['fixtures', 'service', 'deep']);\n\t\tconst source = await service.resolve(resource);\n\n\t\tassert.ok((await service.canDelete(source.resource)) instanceof Error);\n\n\t\tlet error;\n\t\ttry {\n\t\t\tawait service.del(source.resource);\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\t\tassert.ok(error);\n\t});\n\n\ttest('delete empty folder', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst folder = joinPath(parent.resource, 'folder');\n\t\tawait service.createFolder(folder);\n\n\t\tawait service.del(folder);\n\n\t\tassert.deepStrictEqual(await service.exists(folder), false);\n\t});\n\n\ttest('delete empty folder with reccursive', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\t\tconst folder = joinPath(parent.resource, 'folder');\n\t\tawait service.createFolder(folder);\n\n\t\tawait service.del(folder, { recursive: true });\n\n\t\tassert.deepStrictEqual(await service.exists(folder), false);\n\t});\n\n\ttest('deleteFolder with folders and files (recursive)', async () => {\n\t\tconst parent = await service.resolve(userdataURIFromPaths([]));\n\n\t\tconst targetFolder = joinPath(parent.resource, 'targetFolder');\n\t\tconst file1 = joinPath(targetFolder, 'folder1', 'file1');\n\t\tawait service.createFile(file1);\n\t\tconst file2 = joinPath(targetFolder, 'folder2', 'file1');\n\t\tawait service.createFile(file2);\n\t\tconst emptyFolder = joinPath(targetFolder, 'folder3');\n\t\tawait service.createFolder(emptyFolder);\n\n\t\tawait service.del(targetFolder, { recursive: true });\n\n\t\tassert.deepStrictEqual(await service.exists(targetFolder), false);\n\t\tassert.deepStrictEqual(await service.exists(joinPath(targetFolder, 'folder1')), false);\n\t\tassert.deepStrictEqual(await service.exists(joinPath(targetFolder, 'folder2')), false);\n\t\tassert.deepStrictEqual(await service.exists(file1), false);\n\t\tassert.deepStrictEqual(await service.exists(file2), false);\n\t\tassert.deepStrictEqual(await service.exists(emptyFolder), false);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
