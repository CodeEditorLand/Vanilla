import{isRecursiveWatchRequest as v,requestFilterToString as J}from"../../common/watcher.js";import"./nodejs/nodejsWatcher.js";import"./parcel/parcelWatcher.js";function k(t,i,s,n){const e=[],r=R(t.filter(a=>v(a))),c=r.filter(a=>s.isSuspended(a)===!1),o=r.filter(a=>s.isSuspended(a)==="polling"),g=r.filter(a=>s.isSuspended(a)===!0),u=N(r,s),l=m(s),h=R(t.filter(a=>!v(a))),b=h.filter(a=>n.isSuspended(a)===!1),y=h.filter(a=>n.isSuspended(a)==="polling"),E=h.filter(a=>n.isSuspended(a)===!0),d=N(h,n),p=P(n);e.push("[Summary]"),e.push(`- Recursive Requests:     total: ${r.length}, suspended: ${u.suspended}, polling: ${u.polling}, failed: ${i}`),e.push(`- Non-Recursive Requests: total: ${h.length}, suspended: ${d.suspended}, polling: ${d.polling}`),e.push(`- Recursive Watchers:     total: ${s.watchers.size}, active: ${l.active}, failed: ${l.failed}, stopped: ${l.stopped}`),e.push(`- Non-Recursive Watchers: total: ${n.watchers.size}, active: ${p.active}, failed: ${p.failed}, reusing: ${p.reusing}`),e.push(`- I/O Handles Impact:     total: ${u.polling+d.polling+l.active+p.active}`),e.push(`
[Recursive Requests (${r.length}, suspended: ${u.suspended}, polling: ${u.polling})]:`);const S=[];for(const a of[c,o,g].flat())U(S,a,s);e.push(...f(S));const W=[];w(W,s),e.push(...f(W)),e.push(`
[Non-Recursive Requests (${h.length}, suspended: ${d.suspended}, polling: ${d.polling})]:`);const q=[];for(const a of[b,y,E].flat())U(q,a,n);e.push(...f(q));const I=[];return D(I,n),e.push(...f(I)),r.some(a=>a.useNext)?`

[File Watcher NEXT] request stats:

${e.join(`
`)}

`:`

[File Watcher CLASSIC] request stats:

${e.join(`
`)}

`}function f(t){let i=0;for(const s of t)i=Math.max(i,s.split("	")[0].length);for(let s=0;s<t.length;s++){const e=t[s].split("	");if(e.length===2){const r=" ".repeat(i-e[0].length);t[s]=`${e[0]}${r}	${e[1]}`}}return t}function N(t,i){let s=0,n=0;for(const e of t){const r=i.isSuspended(e);r!==!1&&(n++,r==="polling"&&s++)}return{suspended:n,polling:s}}function m(t){let i=0,s=0,n=0;for(const e of t.watchers.values())!e.failed&&!e.stopped&&i++,e.failed&&s++,e.stopped&&n++;return{active:i,failed:s,stopped:n}}function P(t){let i=0,s=0,n=0;for(const e of t.watchers)!e.instance.failed&&!e.instance.isReusingRecursiveWatcher&&i++,e.instance.failed&&s++,e.instance.isReusingRecursiveWatcher&&n++;return{active:i,failed:s,reusing:n}}function R(t){return t.sort((i,s)=>{const n=x(i)?i.path:i.request.path,e=x(s)?s.path:s.request.path,r=Math.min(n.length,e.length);for(let c=0;c<r;c++)if(n[c]!==e[c])return n[c]<e[c]?-1:1;return n.length-e.length}),t}function x(t){return typeof t?.path=="string"}function U(t,i,s){const n=[],e=s.isSuspended(i);e!==!1&&(e==="polling"?n.push("[SUSPENDED <polling>]"):n.push("[SUSPENDED <non-polling>]")),t.push(` ${i.path}	${n.length>0?n.join(" ")+" ":""}(${$(i)})`)}function $(t){return`excludes: ${t.excludes.length>0?t.excludes:"<none>"}, includes: ${t.includes&&t.includes.length>0?JSON.stringify(t.includes):"<all>"}, filter: ${J(t.filter)}, correlationId: ${typeof t.correlationId=="number"?t.correlationId:"<none>"}${v(t)?`, useNext: ${t.useNext}`:""}`}function w(t,i){const s=R(Array.from(i.watchers.values())),{active:n,failed:e,stopped:r}=m(i);t.push(`
[Recursive Watchers (${s.length}, active: ${n}, failed: ${e}, stopped: ${r})]:`);for(const c of s){const o=[];c.failed&&o.push("[FAILED]"),c.stopped&&o.push("[STOPPED]"),c.subscriptionsCount>0&&o.push(`[SUBSCRIBED:${c.subscriptionsCount}]`),c.restarts>0&&o.push(`[RESTARTED:${c.restarts}]`),t.push(` ${c.request.path}	${o.length>0?o.join(" ")+" ":""}(${$(c.request)})`)}}function D(t,i){const s=R(Array.from(i.watchers.values())),n=s.filter(u=>!u.instance.failed&&!u.instance.isReusingRecursiveWatcher),e=s.filter(u=>u.instance.failed),r=s.filter(u=>u.instance.isReusingRecursiveWatcher),{active:c,failed:o,reusing:g}=P(i);t.push(`
[Non-Recursive Watchers (${s.length}, active: ${c}, failed: ${o}, reusing: ${g})]:`);for(const u of[n,e,r].flat()){const l=[];u.instance.failed&&l.push("[FAILED]"),u.instance.isReusingRecursiveWatcher&&l.push("[REUSING]"),t.push(` ${u.request.path}	${l.length>0?l.join(" ")+" ":""}(${$(u.request)})`)}}export{k as computeStats};
