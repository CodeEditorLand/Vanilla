import{Event as n}from"../../../../../../vs/base/common/event.js";import{isEqual as c}from"../../../../../../vs/base/common/extpath.js";import{patternsEquals as i}from"../../../../../../vs/base/common/glob.js";import{isLinux as a}from"../../../../../../vs/base/common/platform.js";import"../../../../../../vs/platform/files/common/watcher.js";import{BaseWatcher as h}from"../../../../../../vs/platform/files/node/watcher/baseWatcher.js";import{NodeJSFileWatcherLibrary as u}from"../../../../../../vs/platform/files/node/watcher/nodejs/nodejsWatcherLib.js";class N extends h{constructor(e){super();this.recursiveWatcher=e}onDidError=n.None;watchers=new Set;async doWatch(e){e=this.removeDuplicateRequests(e);const t=[],s=new Set(Array.from(this.watchers));for(const r of e){const o=this.findWatcher(r);o&&i(o.request.excludes,r.excludes)&&i(o.request.includes,r.includes)?s.delete(o):t.push(r)}t.length&&this.trace(`Request to start watching: ${t.map(r=>this.requestToString(r)).join(",")}`),s.size&&this.trace(`Request to stop watching: ${Array.from(s).map(r=>this.requestToString(r.request)).join(",")}`);for(const r of s)this.stopWatching(r);for(const r of t)this.startWatching(r)}findWatcher(e){for(const t of this.watchers)if(typeof e.correlationId=="number"||typeof t.request.correlationId=="number"){if(t.request.correlationId===e.correlationId)return t}else if(c(t.request.path,e.path,!a))return t}startWatching(e){const t=new u(e,this.recursiveWatcher,r=>this._onDidChangeFile.fire(r),()=>this._onDidWatchFail.fire(e),r=>this._onDidLogMessage.fire(r),this.verboseLogging),s={request:e,instance:t};this.watchers.add(s)}async stop(){await super.stop();for(const e of this.watchers)this.stopWatching(e)}stopWatching(e){this.trace("stopping file watcher",e),this.watchers.delete(e),e.instance.dispose()}removeDuplicateRequests(e){const t=new Map;for(const s of e){const r=a?s.path:s.path.toLowerCase();let o=t.get(s.correlationId);o||(o=new Map,t.set(s.correlationId,o)),o.has(r)&&this.trace(`ignoring a request for watching who's path is already watched: ${this.requestToString(s)}`),o.set(r,s)}return Array.from(t.values()).map(s=>Array.from(s.values())).flat()}async setVerboseLogging(e){super.setVerboseLogging(e);for(const t of this.watchers)t.instance.setVerboseLogging(e)}trace(e,t){this.verboseLogging&&this._onDidLogMessage.fire({type:"trace",message:this.toMessage(e,t)})}warn(e){this._onDidLogMessage.fire({type:"warn",message:this.toMessage(e)})}toMessage(e,t){return t?`[File Watcher (node.js)] ${e} (${this.requestToString(t.request)})`:`[File Watcher (node.js)] ${e}`}}export{N as NodeJSWatcher};
