import{FileAccess as i}from"../../../../base/common/network.js";import{ProxyChannel as a,getNextTickChannel as s}from"../../../../base/parts/ipc/common/ipc.js";import{Client as n}from"../../../../base/parts/ipc/node/ipc.cp.js";import{AbstractUniversalWatcherClient as c}from"../../common/watcher.js";class d extends c{constructor(e,r,t){super(e,r,t),this.init()}createWatcher(e){const r=e.add(new n(i.asFileUri("bootstrap-fork").fsPath,{serverName:"File Watcher",args:["--type=fileWatcher"],env:{VSCODE_AMD_ENTRYPOINT:"vs/platform/files/node/watcher/watcherMain",VSCODE_PIPE_LOGGING:"true",VSCODE_VERBOSE_LOGGING:"true"}}));return e.add(r.onDidProcessExit(({code:t,signal:o})=>this.onError(`terminated by itself with code ${t}, signal: ${o} (ETERM)`))),a.toService(s(r.getChannel("watcher")))}}export{d as UniversalWatcherClient};
