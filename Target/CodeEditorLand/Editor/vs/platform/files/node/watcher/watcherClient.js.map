{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/node/watcher/watcherClient.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { FileAccess } from '../../../../base/common/network.js';\nimport { getNextTickChannel, ProxyChannel } from '../../../../base/parts/ipc/common/ipc.js';\nimport { Client } from '../../../../base/parts/ipc/node/ipc.cp.js';\nimport { IFileChange } from '../../common/files.js';\nimport { AbstractUniversalWatcherClient, ILogMessage, IUniversalWatcher } from '../../common/watcher.js';\n\nexport class UniversalWatcherClient extends AbstractUniversalWatcherClient {\n\n\tconstructor(\n\t\tonFileChanges: (changes: IFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean\n\t) {\n\t\tsuper(onFileChanges, onLogMessage, verboseLogging);\n\n\t\tthis.init();\n\t}\n\n\tprotected override createWatcher(disposables: DisposableStore): IUniversalWatcher {\n\n\t\t// Fork the universal file watcher and build a client around\n\t\t// its server for passing over requests and receiving events.\n\t\tconst client = disposables.add(new Client(\n\t\t\tFileAccess.asFileUri('bootstrap-fork').fsPath,\n\t\t\t{\n\t\t\t\tserverName: 'File Watcher',\n\t\t\t\targs: ['--type=fileWatcher'],\n\t\t\t\tenv: {\n\t\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/platform/files/node/watcher/watcherMain',\n\t\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\t\tVSCODE_VERBOSE_LOGGING: 'true' // transmit console logs from server to client\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n\t\t// React on unexpected termination of the watcher process\n\t\tdisposables.add(client.onDidProcessExit(({ code, signal }) => this.onError(`terminated by itself with code ${code}, signal: ${signal} (ETERM)`)));\n\n\t\treturn ProxyChannel.toService<IUniversalWatcher>(getNextTickChannel(client.getChannel('watcher')));\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB,oBAAoB;AACjD,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAC5B,SAAS,gCAAgC,aAAa,yBAAyB;AAExE,MAAM,+BAA+B,+BAA+B;AAAA,EAZ3E,OAY2E;AAAA;AAAA;AAAA,EAE1E,YACC,eACA,cACA,gBACC;AACD,UAAM,eAAe,cAAc,cAAc;AAEjD,SAAK,KAAK;AAAA,EACX;AAAA,EAEmB,cAAc,aAAiD;AAIjF,UAAM,SAAS,YAAY,IAAI,IAAI;AAAA,MAClC,WAAW,UAAU,gBAAgB,EAAE;AAAA,MACvC;AAAA,QACC,YAAY;AAAA,QACZ,MAAM,CAAC,oBAAoB;AAAA,QAC3B,KAAK;AAAA,UACJ,uBAAuB;AAAA,UACvB,qBAAqB;AAAA,UACrB,wBAAwB;AAAA;AAAA,QACzB;AAAA,MACD;AAAA,IACD,CAAC;AAGD,gBAAY,IAAI,OAAO,iBAAiB,CAAC,EAAE,MAAM,OAAO,MAAM,KAAK,QAAQ,kCAAkC,IAAI,aAAa,MAAM,UAAU,CAAC,CAAC;AAEhJ,WAAO,aAAa,UAA6B,mBAAmB,OAAO,WAAW,SAAS,CAAC,CAAC;AAAA,EAClG;AACD;",
  "names": []
}
