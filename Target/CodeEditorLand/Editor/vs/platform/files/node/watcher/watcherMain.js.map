{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/node/watcher/watcherMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { ProxyChannel } from \"../../../../base/parts/ipc/common/ipc.js\";\nimport { Server as ChildProcessServer } from \"../../../../base/parts/ipc/node/ipc.cp.js\";\nimport { Server as UtilityProcessServer } from \"../../../../base/parts/ipc/node/ipc.mp.js\";\nimport { isUtilityProcess } from \"../../../../base/parts/sandbox/node/electronTypes.js\";\nimport { UniversalWatcher } from \"./watcher.js\";\n\nlet server: ChildProcessServer<string> | UtilityProcessServer;\nif (isUtilityProcess(process)) {\n\tserver = new UtilityProcessServer();\n} else {\n\tserver = new ChildProcessServer(\"watcher\");\n}\n\nconst service = new UniversalWatcher();\nserver.registerChannel(\n\t\"watcher\",\n\tProxyChannel.fromService(service, new DisposableStore()),\n);\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAChC,SAAS,oBAAoB;AAC7B,SAAS,UAAU,0BAA0B;AAC7C,SAAS,UAAU,4BAA4B;AAC/C,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AAEjC,IAAI;AACJ,IAAI,iBAAiB,OAAO,GAAG;AAC9B,WAAS,IAAI,qBAAqB;AACnC,OAAO;AACN,WAAS,IAAI,mBAAmB,SAAS;AAC1C;AAEA,MAAM,UAAU,IAAI,iBAAiB;AACrC,OAAO;AAAA,EACN;AAAA,EACA,aAAa,YAAY,SAAS,IAAI,gBAAgB,CAAC;AACxD;",
  "names": []
}
