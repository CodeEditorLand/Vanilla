{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/node/watcher/nodejs/nodejsWatcher.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../../base/common/event.js';\nimport { patternsEquals } from '../../../../../base/common/glob.js';\nimport { BaseWatcher } from '../baseWatcher.js';\nimport { isLinux } from '../../../../../base/common/platform.js';\nimport { INonRecursiveWatchRequest, INonRecursiveWatcher, IRecursiveWatcherWithSubscribe } from '../../../common/watcher.js';\nimport { NodeJSFileWatcherLibrary } from './nodejsWatcherLib.js';\nimport { isEqual } from '../../../../../base/common/extpath.js';\n\nexport interface INodeJSWatcherInstance {\n\n\t/**\n\t * The watcher instance.\n\t */\n\treadonly instance: NodeJSFileWatcherLibrary;\n\n\t/**\n\t * The watch request associated to the watcher.\n\t */\n\treadonly request: INonRecursiveWatchRequest;\n}\n\nexport class NodeJSWatcher extends BaseWatcher implements INonRecursiveWatcher {\n\n\treadonly onDidError = Event.None;\n\n\treadonly watchers = new Set<INodeJSWatcherInstance>();\n\n\tconstructor(protected readonly recursiveWatcher: IRecursiveWatcherWithSubscribe | undefined) {\n\t\tsuper();\n\t}\n\n\tprotected override async doWatch(requests: INonRecursiveWatchRequest[]): Promise<void> {\n\n\t\t// Figure out duplicates to remove from the requests\n\t\trequests = this.removeDuplicateRequests(requests);\n\n\t\t// Figure out which watchers to start and which to stop\n\t\tconst requestsToStart: INonRecursiveWatchRequest[] = [];\n\t\tconst watchersToStop = new Set(Array.from(this.watchers));\n\t\tfor (const request of requests) {\n\t\t\tconst watcher = this.findWatcher(request);\n\t\t\tif (watcher && patternsEquals(watcher.request.excludes, request.excludes) && patternsEquals(watcher.request.includes, request.includes)) {\n\t\t\t\twatchersToStop.delete(watcher); // keep watcher\n\t\t\t} else {\n\t\t\t\trequestsToStart.push(request); // start watching\n\t\t\t}\n\t\t}\n\n\t\t// Logging\n\n\t\tif (requestsToStart.length) {\n\t\t\tthis.trace(`Request to start watching: ${requestsToStart.map(request => this.requestToString(request)).join(',')}`);\n\t\t}\n\n\t\tif (watchersToStop.size) {\n\t\t\tthis.trace(`Request to stop watching: ${Array.from(watchersToStop).map(watcher => this.requestToString(watcher.request)).join(',')}`);\n\t\t}\n\n\t\t// Stop watching as instructed\n\t\tfor (const watcher of watchersToStop) {\n\t\t\tthis.stopWatching(watcher);\n\t\t}\n\n\t\t// Start watching as instructed\n\t\tfor (const request of requestsToStart) {\n\t\t\tthis.startWatching(request);\n\t\t}\n\t}\n\n\tprivate findWatcher(request: INonRecursiveWatchRequest): INodeJSWatcherInstance | undefined {\n\t\tfor (const watcher of this.watchers) {\n\n\t\t\t// Requests or watchers with correlation always match on that\n\t\t\tif (typeof request.correlationId === 'number' || typeof watcher.request.correlationId === 'number') {\n\t\t\t\tif (watcher.request.correlationId === request.correlationId) {\n\t\t\t\t\treturn watcher;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Non-correlated requests or watchers match on path\n\t\t\telse {\n\t\t\t\tif (isEqual(watcher.request.path, request.path, !isLinux /* ignorecase */)) {\n\t\t\t\t\treturn watcher;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate startWatching(request: INonRecursiveWatchRequest): void {\n\n\t\t// Start via node.js lib\n\t\tconst instance = new NodeJSFileWatcherLibrary(request, this.recursiveWatcher, changes => this._onDidChangeFile.fire(changes), () => this._onDidWatchFail.fire(request), msg => this._onDidLogMessage.fire(msg), this.verboseLogging);\n\n\t\t// Remember as watcher instance\n\t\tconst watcher: INodeJSWatcherInstance = { request, instance };\n\t\tthis.watchers.add(watcher);\n\t}\n\n\toverride async stop(): Promise<void> {\n\t\tawait super.stop();\n\n\t\tfor (const watcher of this.watchers) {\n\t\t\tthis.stopWatching(watcher);\n\t\t}\n\t}\n\n\tprivate stopWatching(watcher: INodeJSWatcherInstance): void {\n\t\tthis.trace(`stopping file watcher`, watcher);\n\n\t\tthis.watchers.delete(watcher);\n\n\t\twatcher.instance.dispose();\n\t}\n\n\tprivate removeDuplicateRequests(requests: INonRecursiveWatchRequest[]): INonRecursiveWatchRequest[] {\n\t\tconst mapCorrelationtoRequests = new Map<number | undefined /* correlation */, Map<string, INonRecursiveWatchRequest>>();\n\n\t\t// Ignore requests for the same paths that have the same correlation\n\t\tfor (const request of requests) {\n\t\t\tconst path = isLinux ? request.path : request.path.toLowerCase(); // adjust for case sensitivity\n\n\t\t\tlet requestsForCorrelation = mapCorrelationtoRequests.get(request.correlationId);\n\t\t\tif (!requestsForCorrelation) {\n\t\t\t\trequestsForCorrelation = new Map<string, INonRecursiveWatchRequest>();\n\t\t\t\tmapCorrelationtoRequests.set(request.correlationId, requestsForCorrelation);\n\t\t\t}\n\n\t\t\tif (requestsForCorrelation.has(path)) {\n\t\t\t\tthis.trace(`ignoring a request for watching who's path is already watched: ${this.requestToString(request)}`);\n\t\t\t}\n\n\t\t\trequestsForCorrelation.set(path, request);\n\t\t}\n\n\t\treturn Array.from(mapCorrelationtoRequests.values()).map(requests => Array.from(requests.values())).flat();\n\t}\n\n\toverride async setVerboseLogging(enabled: boolean): Promise<void> {\n\t\tsuper.setVerboseLogging(enabled);\n\n\t\tfor (const watcher of this.watchers) {\n\t\t\twatcher.instance.setVerboseLogging(enabled);\n\t\t}\n\t}\n\n\tprotected trace(message: string, watcher?: INodeJSWatcherInstance): void {\n\t\tif (this.verboseLogging) {\n\t\t\tthis._onDidLogMessage.fire({ type: 'trace', message: this.toMessage(message, watcher) });\n\t\t}\n\t}\n\n\tprotected warn(message: string): void {\n\t\tthis._onDidLogMessage.fire({ type: 'warn', message: this.toMessage(message) });\n\t}\n\n\tprivate toMessage(message: string, watcher?: INodeJSWatcherInstance): string {\n\t\treturn watcher ? `[File Watcher (node.js)] ${message} (${this.requestToString(watcher.request)})` : `[File Watcher (node.js)] ${message}`;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["requests"]
}
