{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/node/watcher/nodejs/nodejsClient.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { DisposableStore } from \"../../../../../base/common/lifecycle.js\";\nimport type { IFileChange } from \"../../../common/files.js\";\nimport {\n\tAbstractNonRecursiveWatcherClient,\n\ttype ILogMessage,\n\ttype INonRecursiveWatcher,\n} from \"../../../common/watcher.js\";\nimport { NodeJSWatcher } from \"./nodejsWatcher.js\";\n\nexport class NodeJSWatcherClient extends AbstractNonRecursiveWatcherClient {\n\tconstructor(\n\t\tonFileChanges: (changes: IFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean,\n\t) {\n\t\tsuper(onFileChanges, onLogMessage, verboseLogging);\n\n\t\tthis.init();\n\t}\n\n\tprotected override createWatcher(\n\t\tdisposables: DisposableStore,\n\t): INonRecursiveWatcher {\n\t\treturn disposables.add(\n\t\t\tnew NodeJSWatcher(\n\t\t\t\tundefined /* no recursive watching support here */,\n\t\t\t),\n\t\t) satisfies INonRecursiveWatcher;\n\t}\n}\n"],
  "mappings": ";;AAOA;AAAA,EACC;AAAA,OAGM;AACP,SAAS,qBAAqB;AAEvB,MAAM,4BAA4B,kCAAkC;AAAA,EAd3E,OAc2E;AAAA;AAAA;AAAA,EAC1E,YACC,eACA,cACA,gBACC;AACD,UAAM,eAAe,cAAc,cAAc;AAEjD,SAAK,KAAK;AAAA,EACX;AAAA,EAEmB,cAClB,aACuB;AACvB,WAAO,YAAY;AAAA,MAClB,IAAI;AAAA,QACH;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
