{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/node/watcher/nodejs/nodejsClient.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { IFileChange } from '../../../common/files.js';\nimport { ILogMessage, AbstractNonRecursiveWatcherClient, INonRecursiveWatcher } from '../../../common/watcher.js';\nimport { NodeJSWatcher } from './nodejsWatcher.js';\n\nexport class NodeJSWatcherClient extends AbstractNonRecursiveWatcherClient {\n\n\tconstructor(\n\t\tonFileChanges: (changes: IFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean\n\t) {\n\t\tsuper(onFileChanges, onLogMessage, verboseLogging);\n\n\t\tthis.init();\n\t}\n\n\tprotected override createWatcher(disposables: DisposableStore): INonRecursiveWatcher {\n\t\treturn disposables.add(new NodeJSWatcher(undefined /* no recursive watching support here */)) satisfies INonRecursiveWatcher;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,aAAa,mCAAmC,4BAA4B;AACrF,SAAS,qBAAqB;AAEvB,MAAM,4BAA4B,kCAAkC;AAAA,EAV3E,OAU2E;AAAA;AAAA;AAAA,EAE1E,YACC,eACA,cACA,gBACC;AACD,UAAM,eAAe,cAAc,cAAc;AAEjD,SAAK,KAAK;AAAA,EACX;AAAA,EAEmB,cAAc,aAAoD;AACpF,WAAO,YAAY,IAAI,IAAI;AAAA,MAAc;AAAA;AAAA,IAAkD,CAAC;AAAA,EAC7F;AACD;",
  "names": []
}
