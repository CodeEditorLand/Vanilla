import{Promises as i}from"../../../../../vs/base/common/async.js";import{Emitter as a,Event as s}from"../../../../../vs/base/common/event.js";import{Disposable as o}from"../../../../../vs/base/common/lifecycle.js";import"../../../../../vs/platform/files/common/watcher.js";import{NodeJSWatcher as n}from"../../../../../vs/platform/files/node/watcher/nodejs/nodejsWatcher.js";import{ParcelWatcher as c}from"../../../../../vs/platform/files/node/watcher/parcel/parcelWatcher.js";import{computeStats as h}from"../../../../../vs/platform/files/node/watcher/watcherStats.js";class w extends o{recursiveWatcher=this._register(new c);nonRecursiveWatcher=this._register(new n(this.recursiveWatcher));onDidChangeFile=s.any(this.recursiveWatcher.onDidChangeFile,this.nonRecursiveWatcher.onDidChangeFile);onDidError=s.any(this.recursiveWatcher.onDidError,this.nonRecursiveWatcher.onDidError);_onDidLogMessage=this._register(new a);onDidLogMessage=s.any(this._onDidLogMessage.event,this.recursiveWatcher.onDidLogMessage,this.nonRecursiveWatcher.onDidLogMessage);requests=[];async watch(e){this.requests=e;let t;try{await this.recursiveWatcher.watch(e.filter(r=>r.recursive))}catch(r){t=r}try{await this.nonRecursiveWatcher.watch(e.filter(r=>!r.recursive))}catch(r){t||(t=r)}if(t)throw t}async setVerboseLogging(e){e&&this.requests.length>0&&this._onDidLogMessage.fire({type:"trace",message:h(this.requests,this.recursiveWatcher,this.nonRecursiveWatcher)}),await i.settled([this.recursiveWatcher.setVerboseLogging(e),this.nonRecursiveWatcher.setVerboseLogging(e)])}async stop(){await i.settled([this.recursiveWatcher.stop(),this.nonRecursiveWatcher.stop()])}}export{w as UniversalWatcher};
