{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/node/diskFileSystemProviderServer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { DiskFileSystemProvider } from './diskFileSystemProvider.js';\nimport { Disposable, dispose, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IURITransformer } from '../../../base/common/uriIpc.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { ReadableStreamEventPayload, listenStream } from '../../../base/common/stream.js';\nimport { IStat, IFileReadStreamOptions, IFileWriteOptions, IFileOpenOptions, IFileDeleteOptions, IFileOverwriteOptions, IFileChange, IWatchOptions, FileType, IFileAtomicReadOptions } from '../common/files.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { IRecursiveWatcherOptions } from '../common/watcher.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\n\nexport interface ISessionFileWatcher extends IDisposable {\n\twatch(req: number, resource: URI, opts: IWatchOptions): IDisposable;\n}\n\n/**\n * A server implementation for a IPC based file system provider client.\n */\nexport abstract class AbstractDiskFileSystemProviderChannel<T> extends Disposable implements IServerChannel<T> {\n\n\tconstructor(\n\t\tprotected readonly provider: DiskFileSystemProvider,\n\t\tprotected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tcall(ctx: T, command: string, arg?: any): Promise<any> {\n\t\tconst uriTransformer = this.getUriTransformer(ctx);\n\n\t\tswitch (command) {\n\t\t\tcase 'stat': return this.stat(uriTransformer, arg[0]);\n\t\t\tcase 'readdir': return this.readdir(uriTransformer, arg[0]);\n\t\t\tcase 'open': return this.open(uriTransformer, arg[0], arg[1]);\n\t\t\tcase 'close': return this.close(arg[0]);\n\t\t\tcase 'read': return this.read(arg[0], arg[1], arg[2]);\n\t\t\tcase 'readFile': return this.readFile(uriTransformer, arg[0], arg[1]);\n\t\t\tcase 'write': return this.write(arg[0], arg[1], arg[2], arg[3], arg[4]);\n\t\t\tcase 'writeFile': return this.writeFile(uriTransformer, arg[0], arg[1], arg[2]);\n\t\t\tcase 'rename': return this.rename(uriTransformer, arg[0], arg[1], arg[2]);\n\t\t\tcase 'copy': return this.copy(uriTransformer, arg[0], arg[1], arg[2]);\n\t\t\tcase 'cloneFile': return this.cloneFile(uriTransformer, arg[0], arg[1]);\n\t\t\tcase 'mkdir': return this.mkdir(uriTransformer, arg[0]);\n\t\t\tcase 'delete': return this.delete(uriTransformer, arg[0], arg[1]);\n\t\t\tcase 'watch': return this.watch(uriTransformer, arg[0], arg[1], arg[2], arg[3]);\n\t\t\tcase 'unwatch': return this.unwatch(arg[0], arg[1]);\n\t\t}\n\n\t\tthrow new Error(`IPC Command ${command} not found`);\n\t}\n\n\tlisten(ctx: T, event: string, arg: any): Event<any> {\n\t\tconst uriTransformer = this.getUriTransformer(ctx);\n\n\t\tswitch (event) {\n\t\t\tcase 'fileChange': return this.onFileChange(uriTransformer, arg[0]);\n\t\t\tcase 'readFileStream': return this.onReadFileStream(uriTransformer, arg[0], arg[1]);\n\t\t}\n\n\t\tthrow new Error(`Unknown event ${event}`);\n\t}\n\n\tprotected abstract getUriTransformer(ctx: T): IURITransformer;\n\n\tprotected abstract transformIncoming(uriTransformer: IURITransformer, _resource: UriComponents, supportVSCodeResource?: boolean): URI;\n\n\t//#region File Metadata Resolving\n\n\tprivate stat(uriTransformer: IURITransformer, _resource: UriComponents): Promise<IStat> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource, true);\n\n\t\treturn this.provider.stat(resource);\n\t}\n\n\tprivate readdir(uriTransformer: IURITransformer, _resource: UriComponents): Promise<[string, FileType][]> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\n\t\treturn this.provider.readdir(resource);\n\t}\n\n\t//#endregion\n\n\t//#region File Reading/Writing\n\n\tprivate async readFile(uriTransformer: IURITransformer, _resource: UriComponents, opts?: IFileAtomicReadOptions): Promise<VSBuffer> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource, true);\n\t\tconst buffer = await this.provider.readFile(resource, opts);\n\n\t\treturn VSBuffer.wrap(buffer);\n\t}\n\n\tprivate onReadFileStream(uriTransformer: IURITransformer, _resource: URI, opts: IFileReadStreamOptions): Event<ReadableStreamEventPayload<VSBuffer>> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource, true);\n\t\tconst cts = new CancellationTokenSource();\n\n\t\tconst emitter = new Emitter<ReadableStreamEventPayload<VSBuffer>>({\n\t\t\tonDidRemoveLastListener: () => {\n\n\t\t\t\t// Ensure to cancel the read operation when there is no more\n\t\t\t\t// listener on the other side to prevent unneeded work.\n\t\t\t\tcts.cancel();\n\t\t\t}\n\t\t});\n\n\t\tconst fileStream = this.provider.readFileStream(resource, opts, cts.token);\n\t\tlistenStream(fileStream, {\n\t\t\tonData: chunk => emitter.fire(VSBuffer.wrap(chunk)),\n\t\t\tonError: error => emitter.fire(error),\n\t\t\tonEnd: () => {\n\n\t\t\t\t// Forward event\n\t\t\t\temitter.fire('end');\n\n\t\t\t\t// Cleanup\n\t\t\t\temitter.dispose();\n\t\t\t\tcts.dispose();\n\t\t\t}\n\t\t});\n\n\t\treturn emitter.event;\n\t}\n\n\tprivate writeFile(uriTransformer: IURITransformer, _resource: UriComponents, content: VSBuffer, opts: IFileWriteOptions): Promise<void> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\n\t\treturn this.provider.writeFile(resource, content.buffer, opts);\n\t}\n\n\tprivate open(uriTransformer: IURITransformer, _resource: UriComponents, opts: IFileOpenOptions): Promise<number> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource, true);\n\n\t\treturn this.provider.open(resource, opts);\n\t}\n\n\tprivate close(fd: number): Promise<void> {\n\t\treturn this.provider.close(fd);\n\t}\n\n\tprivate async read(fd: number, pos: number, length: number): Promise<[VSBuffer, number]> {\n\t\tconst buffer = VSBuffer.alloc(length);\n\t\tconst bufferOffset = 0; // offset is 0 because we create a buffer to read into for each call\n\t\tconst bytesRead = await this.provider.read(fd, pos, buffer.buffer, bufferOffset, length);\n\n\t\treturn [buffer, bytesRead];\n\t}\n\n\tprivate write(fd: number, pos: number, data: VSBuffer, offset: number, length: number): Promise<number> {\n\t\treturn this.provider.write(fd, pos, data.buffer, offset, length);\n\t}\n\n\t//#endregion\n\n\t//#region Move/Copy/Delete/Create Folder\n\n\tprivate mkdir(uriTransformer: IURITransformer, _resource: UriComponents): Promise<void> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\n\t\treturn this.provider.mkdir(resource);\n\t}\n\n\tprotected delete(uriTransformer: IURITransformer, _resource: UriComponents, opts: IFileDeleteOptions): Promise<void> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\n\t\treturn this.provider.delete(resource, opts);\n\t}\n\n\tprivate rename(uriTransformer: IURITransformer, _source: UriComponents, _target: UriComponents, opts: IFileOverwriteOptions): Promise<void> {\n\t\tconst source = this.transformIncoming(uriTransformer, _source);\n\t\tconst target = this.transformIncoming(uriTransformer, _target);\n\n\t\treturn this.provider.rename(source, target, opts);\n\t}\n\n\tprivate copy(uriTransformer: IURITransformer, _source: UriComponents, _target: UriComponents, opts: IFileOverwriteOptions): Promise<void> {\n\t\tconst source = this.transformIncoming(uriTransformer, _source);\n\t\tconst target = this.transformIncoming(uriTransformer, _target);\n\n\t\treturn this.provider.copy(source, target, opts);\n\t}\n\n\t//#endregion\n\n\t//#region Clone File\n\n\tprivate cloneFile(uriTransformer: IURITransformer, _source: UriComponents, _target: UriComponents): Promise<void> {\n\t\tconst source = this.transformIncoming(uriTransformer, _source);\n\t\tconst target = this.transformIncoming(uriTransformer, _target);\n\n\t\treturn this.provider.cloneFile(source, target);\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprivate readonly sessionToWatcher = new Map<string /* session ID */, ISessionFileWatcher>();\n\tprivate readonly watchRequests = new Map<string /* session ID + request ID */, IDisposable>();\n\n\tprivate onFileChange(uriTransformer: IURITransformer, sessionId: string): Event<IFileChange[] | string> {\n\n\t\t// We want a specific emitter for the given session so that events\n\t\t// from the one session do not end up on the other session. As such\n\t\t// we create a `SessionFileWatcher` and a `Emitter` for that session.\n\n\t\tconst emitter = new Emitter<IFileChange[] | string>({\n\t\t\tonWillAddFirstListener: () => {\n\t\t\t\tthis.sessionToWatcher.set(sessionId, this.createSessionFileWatcher(uriTransformer, emitter));\n\t\t\t},\n\t\t\tonDidRemoveLastListener: () => {\n\t\t\t\tdispose(this.sessionToWatcher.get(sessionId));\n\t\t\t\tthis.sessionToWatcher.delete(sessionId);\n\t\t\t}\n\t\t});\n\n\t\treturn emitter.event;\n\t}\n\n\tprivate async watch(uriTransformer: IURITransformer, sessionId: string, req: number, _resource: UriComponents, opts: IWatchOptions): Promise<void> {\n\t\tconst watcher = this.sessionToWatcher.get(sessionId);\n\t\tif (watcher) {\n\t\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\t\t\tconst disposable = watcher.watch(req, resource, opts);\n\t\t\tthis.watchRequests.set(sessionId + req, disposable);\n\t\t}\n\t}\n\n\tprivate async unwatch(sessionId: string, req: number): Promise<void> {\n\t\tconst id = sessionId + req;\n\t\tconst disposable = this.watchRequests.get(id);\n\t\tif (disposable) {\n\t\t\tdispose(disposable);\n\t\t\tthis.watchRequests.delete(id);\n\t\t}\n\t}\n\n\tprotected abstract createSessionFileWatcher(uriTransformer: IURITransformer, emitter: Emitter<IFileChange[] | string>): ISessionFileWatcher;\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tfor (const [, disposable] of this.watchRequests) {\n\t\t\tdisposable.dispose();\n\t\t}\n\t\tthis.watchRequests.clear();\n\n\t\tfor (const [, disposable] of this.sessionToWatcher) {\n\t\t\tdisposable.dispose();\n\t\t}\n\t\tthis.sessionToWatcher.clear();\n\t}\n}\n\nexport abstract class AbstractSessionFileWatcher extends Disposable implements ISessionFileWatcher {\n\n\tprivate readonly watcherRequests = new Map<number, IDisposable>();\n\n\t// To ensure we use one file watcher per session, we keep a\n\t// disk file system provider instantiated for this session.\n\t// The provider is cheap and only stateful when file watching\n\t// starts.\n\t//\n\t// This is important because we want to ensure that we only\n\t// forward events from the watched paths for this session and\n\t// not other clients that asked to watch other paths.\n\tprivate readonly fileWatcher = this._register(new DiskFileSystemProvider(this.logService, { watcher: { recursive: this.getRecursiveWatcherOptions(this.environmentService) } }));\n\n\tconstructor(\n\t\tprivate readonly uriTransformer: IURITransformer,\n\t\tsessionEmitter: Emitter<IFileChange[] | string>,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService,\n\t\tprivate readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners(sessionEmitter);\n\t}\n\n\tprivate registerListeners(sessionEmitter: Emitter<IFileChange[] | string>): void {\n\t\tconst localChangeEmitter = this._register(new Emitter<readonly IFileChange[]>());\n\n\t\tthis._register(localChangeEmitter.event((events) => {\n\t\t\tsessionEmitter.fire(\n\t\t\t\tevents.map(e => ({\n\t\t\t\t\tresource: this.uriTransformer.transformOutgoingURI(e.resource),\n\t\t\t\t\ttype: e.type,\n\t\t\t\t\tcId: e.cId\n\t\t\t\t}))\n\t\t\t);\n\t\t}));\n\n\t\tthis._register(this.fileWatcher.onDidChangeFile(events => localChangeEmitter.fire(events)));\n\t\tthis._register(this.fileWatcher.onDidWatchError(error => sessionEmitter.fire(error)));\n\t}\n\n\tprotected getRecursiveWatcherOptions(environmentService: IEnvironmentService): IRecursiveWatcherOptions | undefined {\n\t\tif (this.configurationService.getValue<boolean>('files.experimentalWatcherNext') === true) {\n\t\t\treturn { useNext: true, usePolling: false };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected getExtraExcludes(environmentService: IEnvironmentService): string[] | undefined {\n\t\treturn undefined; // subclasses can override\n\t}\n\n\twatch(req: number, resource: URI, opts: IWatchOptions): IDisposable {\n\t\tconst extraExcludes = this.getExtraExcludes(this.environmentService);\n\t\tif (Array.isArray(extraExcludes)) {\n\t\t\topts.excludes = [...opts.excludes, ...extraExcludes];\n\t\t}\n\n\t\tthis.watcherRequests.set(req, this.fileWatcher.watch(resource, opts));\n\n\t\treturn toDisposable(() => {\n\t\t\tdispose(this.watcherRequests.get(req));\n\t\t\tthis.watcherRequests.delete(req);\n\t\t});\n\t}\n\n\toverride dispose(): void {\n\t\tfor (const [, disposable] of this.watcherRequests) {\n\t\t\tdisposable.dispose();\n\t\t}\n\t\tthis.watcherRequests.clear();\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
