import{VSBuffer as c}from"../../../base/common/buffer.js";import{CancellationTokenSource as u}from"../../../base/common/cancellation.js";import{Emitter as m}from"../../../base/common/event.js";import{Disposable as h,dispose as p,toDisposable as f}from"../../../base/common/lifecycle.js";import{listenStream as I}from"../../../base/common/stream.js";import"../../../base/common/uri.js";import"../../../base/common/uriIpc.js";import"../../../base/parts/ipc/common/ipc.js";import"../../environment/common/environment.js";import"../../log/common/log.js";import"../common/files.js";import"../common/watcher.js";import{DiskFileSystemProvider as v}from"./diskFileSystemProvider.js";class X extends h{constructor(r,t){super();this.provider=r;this.logService=t}call(r,t,e){const i=this.getUriTransformer(r);switch(t){case"stat":return this.stat(i,e[0]);case"readdir":return this.readdir(i,e[0]);case"open":return this.open(i,e[0],e[1]);case"close":return this.close(e[0]);case"read":return this.read(e[0],e[1],e[2]);case"readFile":return this.readFile(i,e[0],e[1]);case"write":return this.write(e[0],e[1],e[2],e[3],e[4]);case"writeFile":return this.writeFile(i,e[0],e[1],e[2]);case"rename":return this.rename(i,e[0],e[1],e[2]);case"copy":return this.copy(i,e[0],e[1],e[2]);case"cloneFile":return this.cloneFile(i,e[0],e[1]);case"mkdir":return this.mkdir(i,e[0]);case"delete":return this.delete(i,e[0],e[1]);case"watch":return this.watch(i,e[0],e[1],e[2],e[3]);case"unwatch":return this.unwatch(e[0],e[1])}throw new Error(`IPC Command ${t} not found`)}listen(r,t,e){const i=this.getUriTransformer(r);switch(t){case"fileChange":return this.onFileChange(i,e[0]);case"readFileStream":return this.onReadFileStream(i,e[0],e[1])}throw new Error(`Unknown event ${t}`)}stat(r,t){const e=this.transformIncoming(r,t,!0);return this.provider.stat(e)}readdir(r,t){const e=this.transformIncoming(r,t);return this.provider.readdir(e)}async readFile(r,t,e){const i=this.transformIncoming(r,t,!0),s=await this.provider.readFile(i,e);return c.wrap(s)}onReadFileStream(r,t,e){const i=this.transformIncoming(r,t,!0),s=new u,n=new m({onDidRemoveLastListener:()=>{s.cancel()}}),a=this.provider.readFileStream(i,e,s.token);return I(a,{onData:o=>n.fire(c.wrap(o)),onError:o=>n.fire(o),onEnd:()=>{n.fire("end"),n.dispose(),s.dispose()}}),n.event}writeFile(r,t,e,i){const s=this.transformIncoming(r,t);return this.provider.writeFile(s,e.buffer,i)}open(r,t,e){const i=this.transformIncoming(r,t,!0);return this.provider.open(i,e)}close(r){return this.provider.close(r)}async read(r,t,e){const i=c.alloc(e),n=await this.provider.read(r,t,i.buffer,0,e);return[i,n]}write(r,t,e,i,s){return this.provider.write(r,t,e.buffer,i,s)}mkdir(r,t){const e=this.transformIncoming(r,t);return this.provider.mkdir(e)}delete(r,t,e){const i=this.transformIncoming(r,t);return this.provider.delete(i,e)}rename(r,t,e,i){const s=this.transformIncoming(r,t),n=this.transformIncoming(r,e);return this.provider.rename(s,n,i)}copy(r,t,e,i){const s=this.transformIncoming(r,t),n=this.transformIncoming(r,e);return this.provider.copy(s,n,i)}cloneFile(r,t,e){const i=this.transformIncoming(r,t),s=this.transformIncoming(r,e);return this.provider.cloneFile(i,s)}sessionToWatcher=new Map;watchRequests=new Map;onFileChange(r,t){const e=new m({onWillAddFirstListener:()=>{this.sessionToWatcher.set(t,this.createSessionFileWatcher(r,e))},onDidRemoveLastListener:()=>{p(this.sessionToWatcher.get(t)),this.sessionToWatcher.delete(t)}});return e.event}async watch(r,t,e,i,s){const n=this.sessionToWatcher.get(t);if(n){const a=this.transformIncoming(r,i),o=n.watch(e,a,s);this.watchRequests.set(t+e,o)}}async unwatch(r,t){const e=r+t,i=this.watchRequests.get(e);i&&(p(i),this.watchRequests.delete(e))}dispose(){super.dispose();for(const[,r]of this.watchRequests)r.dispose();this.watchRequests.clear();for(const[,r]of this.sessionToWatcher)r.dispose();this.sessionToWatcher.clear()}}class Y extends h{constructor(r,t,e,i){super();this.uriTransformer=r;this.logService=e;this.environmentService=i;this.registerListeners(t)}watcherRequests=new Map;fileWatcher=this._register(new v(this.logService,{watcher:{recursive:this.getRecursiveWatcherOptions(this.environmentService)}}));registerListeners(r){const t=this._register(new m);this._register(t.event(e=>{r.fire(e.map(i=>({resource:this.uriTransformer.transformOutgoingURI(i.resource),type:i.type,cId:i.cId})))})),this._register(this.fileWatcher.onDidChangeFile(e=>t.fire(e))),this._register(this.fileWatcher.onDidWatchError(e=>r.fire(e)))}getRecursiveWatcherOptions(r){}getExtraExcludes(r){}watch(r,t,e){const i=this.getExtraExcludes(this.environmentService);return Array.isArray(i)&&(e.excludes=[...e.excludes,...i]),this.watcherRequests.set(r,this.fileWatcher.watch(t,e)),f(()=>{p(this.watcherRequests.get(r)),this.watcherRequests.delete(r)})}dispose(){for(const[,r]of this.watcherRequests)r.dispose();this.watcherRequests.clear(),super.dispose()}}export{X as AbstractDiskFileSystemProviderChannel,Y as AbstractSessionFileWatcher};
