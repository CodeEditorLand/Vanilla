{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/browser/indexedDBFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Throttler } from '../../../base/common/async.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { ExtUri } from '../../../base/common/resources.js';\nimport { isString } from '../../../base/common/types.js';\nimport { URI, UriDto } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { createFileSystemProviderError, FileChangeType, IFileDeleteOptions, IFileOverwriteOptions, FileSystemProviderCapabilities, FileSystemProviderError, FileSystemProviderErrorCode, FileType, IFileWriteOptions, IFileChange, IFileSystemProviderWithFileReadWriteCapability, IStat, IWatchOptions } from '../common/files.js';\nimport { DBClosedError, IndexedDB } from '../../../base/browser/indexedDB.js';\nimport { BroadcastDataChannel } from '../../../base/browser/broadcast.js';\n\nexport type IndexedDBFileSystemProviderErrorDataClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about errors that occur in the IndexedDB file system provider';\n\treadonly scheme: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'IndexedDB file system provider scheme for which this error occurred' };\n\treadonly operation: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'operation during which this error occurred' };\n\treadonly code: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'error code' };\n};\n\nexport type IndexedDBFileSystemProviderErrorData = {\n\treadonly scheme: string;\n\treadonly operation: string;\n\treadonly code: string;\n};\n\n// Standard FS Errors (expected to be thrown in production when invalid FS operations are requested)\nconst ERR_FILE_NOT_FOUND = createFileSystemProviderError(localize('fileNotExists', \"File does not exist\"), FileSystemProviderErrorCode.FileNotFound);\nconst ERR_FILE_IS_DIR = createFileSystemProviderError(localize('fileIsDirectory', \"File is Directory\"), FileSystemProviderErrorCode.FileIsADirectory);\nconst ERR_FILE_NOT_DIR = createFileSystemProviderError(localize('fileNotDirectory', \"File is not a directory\"), FileSystemProviderErrorCode.FileNotADirectory);\nconst ERR_DIR_NOT_EMPTY = createFileSystemProviderError(localize('dirIsNotEmpty', \"Directory is not empty\"), FileSystemProviderErrorCode.Unknown);\nconst ERR_FILE_EXCEEDS_STORAGE_QUOTA = createFileSystemProviderError(localize('fileExceedsStorageQuota', \"File exceeds available storage quota\"), FileSystemProviderErrorCode.FileExceedsStorageQuota);\n\n// Arbitrary Internal Errors\nconst ERR_UNKNOWN_INTERNAL = (message: string) => createFileSystemProviderError(localize('internal', \"Internal error occurred in IndexedDB File System Provider. ({0})\", message), FileSystemProviderErrorCode.Unknown);\n\ntype DirEntry = [string, FileType];\n\ntype IndexedDBFileSystemEntry =\n\t| {\n\t\tpath: string;\n\t\ttype: FileType.Directory;\n\t\tchildren: Map<string, IndexedDBFileSystemNode>;\n\t}\n\t| {\n\t\tpath: string;\n\t\ttype: FileType.File;\n\t\tsize: number | undefined;\n\t};\n\nclass IndexedDBFileSystemNode {\n\tpublic type: FileType;\n\n\tconstructor(private entry: IndexedDBFileSystemEntry) {\n\t\tthis.type = entry.type;\n\t}\n\n\tread(path: string): IndexedDBFileSystemEntry | undefined {\n\t\treturn this.doRead(path.split('/').filter(p => p.length));\n\t}\n\n\tprivate doRead(pathParts: string[]): IndexedDBFileSystemEntry | undefined {\n\t\tif (pathParts.length === 0) { return this.entry; }\n\t\tif (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error reading from IndexedDBFSNode -- expected directory at ' + this.entry.path);\n\t\t}\n\t\tconst next = this.entry.children.get(pathParts[0]);\n\n\t\tif (!next) { return undefined; }\n\t\treturn next.doRead(pathParts.slice(1));\n\t}\n\n\tdelete(path: string): void {\n\t\tconst toDelete = path.split('/').filter(p => p.length);\n\t\tif (toDelete.length === 0) {\n\t\t\tif (this.entry.type !== FileType.Directory) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error deleting from IndexedDBFSNode. Expected root entry to be directory`);\n\t\t\t}\n\t\t\tthis.entry.children.clear();\n\t\t} else {\n\t\t\treturn this.doDelete(toDelete, path);\n\t\t}\n\t}\n\n\tprivate doDelete(pathParts: string[], originalPath: string): void {\n\t\tif (pathParts.length === 0) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error deleting from IndexedDBFSNode -- got no deletion path parts (encountered while deleting ${originalPath})`);\n\t\t}\n\t\telse if (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error deleting from IndexedDBFSNode -- expected directory at ' + this.entry.path);\n\t\t}\n\t\telse if (pathParts.length === 1) {\n\t\t\tthis.entry.children.delete(pathParts[0]);\n\t\t}\n\t\telse {\n\t\t\tconst next = this.entry.children.get(pathParts[0]);\n\t\t\tif (!next) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error deleting from IndexedDBFSNode -- expected entry at ' + this.entry.path + '/' + next);\n\t\t\t}\n\t\t\tnext.doDelete(pathParts.slice(1), originalPath);\n\t\t}\n\t}\n\n\tadd(path: string, entry: { type: 'file'; size?: number } | { type: 'dir' }) {\n\t\tthis.doAdd(path.split('/').filter(p => p.length), entry, path);\n\t}\n\n\tprivate doAdd(pathParts: string[], entry: { type: 'file'; size?: number } | { type: 'dir' }, originalPath: string) {\n\t\tif (pathParts.length === 0) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- adding empty path (encountered while adding ${originalPath})`);\n\t\t}\n\t\telse if (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- parent is not a directory (encountered while adding ${originalPath})`);\n\t\t}\n\t\telse if (pathParts.length === 1) {\n\t\t\tconst next = pathParts[0];\n\t\t\tconst existing = this.entry.children.get(next);\n\t\t\tif (entry.type === 'dir') {\n\t\t\t\tif (existing?.entry.type === FileType.File) {\n\t\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting file with directory: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t\t}\n\t\t\t\tthis.entry.children.set(next, existing ?? new IndexedDBFileSystemNode({\n\t\t\t\t\ttype: FileType.Directory,\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tif (existing?.entry.type === FileType.Directory) {\n\t\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting directory with file: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t\t}\n\t\t\t\tthis.entry.children.set(next, new IndexedDBFileSystemNode({\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\tsize: entry.size,\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\telse if (pathParts.length > 1) {\n\t\t\tconst next = pathParts[0];\n\t\t\tlet childNode = this.entry.children.get(next);\n\t\t\tif (!childNode) {\n\t\t\t\tchildNode = new IndexedDBFileSystemNode({\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\ttype: FileType.Directory\n\t\t\t\t});\n\t\t\t\tthis.entry.children.set(next, childNode);\n\t\t\t}\n\t\t\telse if (childNode.type === FileType.File) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting file entry with directory: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t}\n\t\t\tchildNode.doAdd(pathParts.slice(1), entry, originalPath);\n\t\t}\n\t}\n\n\tprint(indentation = '') {\n\t\tconsole.log(indentation + this.entry.path);\n\t\tif (this.entry.type === FileType.Directory) {\n\t\t\tthis.entry.children.forEach(child => child.print(indentation + ' '));\n\t\t}\n\t}\n}\n\nexport class IndexedDBFileSystemProvider extends Disposable implements IFileSystemProviderWithFileReadWriteCapability {\n\n\treadonly capabilities: FileSystemProviderCapabilities =\n\t\tFileSystemProviderCapabilities.FileReadWrite\n\t\t| FileSystemProviderCapabilities.PathCaseSensitive;\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\tprivate readonly extUri = new ExtUri(() => false) /* Case Sensitive */;\n\n\tprivate readonly changesBroadcastChannel: BroadcastDataChannel<UriDto<IFileChange>[]> | undefined;\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<readonly IFileChange[]>());\n\treadonly onDidChangeFile: Event<readonly IFileChange[]> = this._onDidChangeFile.event;\n\n\tprivate readonly _onReportError = this._register(new Emitter<IndexedDBFileSystemProviderErrorData>());\n\treadonly onReportError = this._onReportError.event;\n\n\tprivate readonly mtimes = new Map<string, number>();\n\n\tprivate cachedFiletree: Promise<IndexedDBFileSystemNode> | undefined;\n\tprivate writeManyThrottler: Throttler;\n\n\tconstructor(readonly scheme: string, private indexedDB: IndexedDB, private readonly store: string, watchCrossWindowChanges: boolean) {\n\t\tsuper();\n\t\tthis.writeManyThrottler = new Throttler();\n\n\t\tif (watchCrossWindowChanges) {\n\t\t\tthis.changesBroadcastChannel = this._register(new BroadcastDataChannel<UriDto<IFileChange>[]>(`vscode.indexedDB.${scheme}.changes`));\n\t\t\tthis._register(this.changesBroadcastChannel.onDidReceiveData(changes => {\n\t\t\t\tthis._onDidChangeFile.fire(changes.map(c => ({ type: c.type, resource: URI.revive(c.resource) })));\n\t\t\t}));\n\t\t}\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\tasync mkdir(resource: URI): Promise<void> {\n\t\ttry {\n\t\t\tconst resourceStat = await this.stat(resource);\n\t\t\tif (resourceStat.type === FileType.File) {\n\t\t\t\tthrow ERR_FILE_NOT_DIR;\n\t\t\t}\n\t\t} catch (error) { /* Ignore */ }\n\t\t(await this.getFiletree()).add(resource.path, { type: 'dir' });\n\t}\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\tconst entry = (await this.getFiletree()).read(resource.path);\n\n\t\tif (entry?.type === FileType.File) {\n\t\t\treturn {\n\t\t\t\ttype: FileType.File,\n\t\t\t\tctime: 0,\n\t\t\t\tmtime: this.mtimes.get(resource.toString()) || 0,\n\t\t\t\tsize: entry.size ?? (await this.readFile(resource)).byteLength\n\t\t\t};\n\t\t}\n\n\t\tif (entry?.type === FileType.Directory) {\n\t\t\treturn {\n\t\t\t\ttype: FileType.Directory,\n\t\t\t\tctime: 0,\n\t\t\t\tmtime: 0,\n\t\t\t\tsize: 0\n\t\t\t};\n\t\t}\n\n\t\tthrow ERR_FILE_NOT_FOUND;\n\t}\n\n\tasync readdir(resource: URI): Promise<DirEntry[]> {\n\t\ttry {\n\t\t\tconst entry = (await this.getFiletree()).read(resource.path);\n\t\t\tif (!entry) {\n\t\t\t\t// Dirs aren't saved to disk, so empty dirs will be lost on reload.\n\t\t\t\t// Thus we have two options for what happens when you try to read a dir and nothing is found:\n\t\t\t\t// - Throw FileSystemProviderErrorCode.FileNotFound\n\t\t\t\t// - Return []\n\t\t\t\t// We choose to return [] as creating a dir then reading it (even after reload) should not throw an error.\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (entry.type !== FileType.Directory) {\n\t\t\t\tthrow ERR_FILE_NOT_DIR;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [...entry.children.entries()].map(([name, node]) => [name, node.type]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reportError('readDir', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\ttry {\n\t\t\tconst result = await this.indexedDB.runInTransaction(this.store, 'readonly', objectStore => objectStore.get(resource.path));\n\t\t\tif (result === undefined) {\n\t\t\t\tthrow ERR_FILE_NOT_FOUND;\n\t\t\t}\n\t\t\tconst buffer = result instanceof Uint8Array ? result : isString(result) ? VSBuffer.fromString(result).buffer : undefined;\n\t\t\tif (buffer === undefined) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`IndexedDB entry at \"${resource.path}\" in unexpected format`);\n\t\t\t}\n\n\t\t\t// update cache\n\t\t\tconst fileTree = await this.getFiletree();\n\t\t\tfileTree.add(resource.path, { type: 'file', size: buffer.byteLength });\n\n\t\t\treturn buffer;\n\t\t} catch (error) {\n\t\t\tthis.reportError('readFile', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync writeFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> {\n\t\ttry {\n\t\t\tconst existing = await this.stat(resource).catch(() => undefined);\n\t\t\tif (existing?.type === FileType.Directory) {\n\t\t\t\tthrow ERR_FILE_IS_DIR;\n\t\t\t}\n\t\t\tawait this.bulkWrite([[resource, content]]);\n\t\t} catch (error) {\n\t\t\tthis.reportError('writeFile', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync rename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\tconst fileTree = await this.getFiletree();\n\t\tconst fromEntry = fileTree.read(from.path);\n\t\tif (!fromEntry) {\n\t\t\tthrow ERR_FILE_NOT_FOUND;\n\t\t}\n\n\t\tconst toEntry = fileTree.read(to.path);\n\t\tif (toEntry) {\n\t\t\tif (!opts.overwrite) {\n\t\t\t\tthrow createFileSystemProviderError('file exists already', FileSystemProviderErrorCode.FileExists);\n\t\t\t}\n\t\t\tif (toEntry.type !== fromEntry.type) {\n\t\t\t\tthrow createFileSystemProviderError('Cannot rename files with different types', FileSystemProviderErrorCode.Unknown);\n\t\t\t}\n\t\t\t// delete the target file if exists\n\t\t\tawait this.delete(to, { recursive: true, useTrash: false, atomic: false });\n\t\t}\n\n\t\tconst toTargetResource = (path: string): URI => this.extUri.joinPath(to, this.extUri.relativePath(from, from.with({ path })) || '');\n\n\t\tconst sourceEntries = await this.tree(from);\n\t\tconst sourceFiles: DirEntry[] = [];\n\t\tfor (const sourceEntry of sourceEntries) {\n\t\t\tif (sourceEntry[1] === FileType.File) {\n\t\t\t\tsourceFiles.push(sourceEntry);\n\t\t\t} else if (sourceEntry[1] === FileType.Directory) {\n\t\t\t\t// add directories to the tree\n\t\t\t\tfileTree.add(toTargetResource(sourceEntry[0]).path, { type: 'dir' });\n\t\t\t}\n\t\t}\n\n\t\tif (sourceFiles.length) {\n\t\t\tconst targetFiles: [URI, Uint8Array][] = [];\n\t\t\tconst sourceFilesContents = await this.indexedDB.runInTransaction(this.store, 'readonly', objectStore => sourceFiles.map(([path]) => objectStore.get(path)));\n\t\t\tfor (let index = 0; index < sourceFiles.length; index++) {\n\t\t\t\tconst content = sourceFilesContents[index] instanceof Uint8Array ? sourceFilesContents[index] : isString(sourceFilesContents[index]) ? VSBuffer.fromString(sourceFilesContents[index]).buffer : undefined;\n\t\t\t\tif (content) {\n\t\t\t\t\ttargetFiles.push([toTargetResource(sourceFiles[index][0]), content]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.bulkWrite(targetFiles);\n\t\t}\n\n\t\tawait this.delete(from, { recursive: true, useTrash: false, atomic: false });\n\t}\n\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\tlet stat: IStat;\n\t\ttry {\n\t\t\tstat = await this.stat(resource);\n\t\t} catch (e) {\n\t\t\tif (e.code === FileSystemProviderErrorCode.FileNotFound) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\n\t\tlet toDelete: string[];\n\t\tif (opts.recursive) {\n\t\t\tconst tree = await this.tree(resource);\n\t\t\ttoDelete = tree.map(([path]) => path);\n\t\t} else {\n\t\t\tif (stat.type === FileType.Directory && (await this.readdir(resource)).length) {\n\t\t\t\tthrow ERR_DIR_NOT_EMPTY;\n\t\t\t}\n\t\t\ttoDelete = [resource.path];\n\t\t}\n\t\tawait this.deleteKeys(toDelete);\n\t\t(await this.getFiletree()).delete(resource.path);\n\t\ttoDelete.forEach(key => this.mtimes.delete(key));\n\t\tthis.triggerChanges(toDelete.map(path => ({ resource: resource.with({ path }), type: FileChangeType.DELETED })));\n\t}\n\n\tprivate async tree(resource: URI): Promise<DirEntry[]> {\n\t\tconst stat = await this.stat(resource);\n\t\tconst allEntries: DirEntry[] = [[resource.path, stat.type]];\n\t\tif (stat.type === FileType.Directory) {\n\t\t\tconst dirEntries = await this.readdir(resource);\n\t\t\tfor (const [key, type] of dirEntries) {\n\t\t\t\tconst childResource = this.extUri.joinPath(resource, key);\n\t\t\t\tallEntries.push([childResource.path, type]);\n\t\t\t\tif (type === FileType.Directory) {\n\t\t\t\t\tconst childEntries = await this.tree(childResource);\n\t\t\t\t\tallEntries.push(...childEntries);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn allEntries;\n\t}\n\n\tprivate triggerChanges(changes: IFileChange[]): void {\n\t\tif (changes.length) {\n\t\t\tthis._onDidChangeFile.fire(changes);\n\n\t\t\tthis.changesBroadcastChannel?.postData(changes);\n\t\t}\n\t}\n\n\tprivate getFiletree(): Promise<IndexedDBFileSystemNode> {\n\t\tif (!this.cachedFiletree) {\n\t\t\tthis.cachedFiletree = (async () => {\n\t\t\t\tconst rootNode = new IndexedDBFileSystemNode({\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\tpath: '',\n\t\t\t\t\ttype: FileType.Directory\n\t\t\t\t});\n\t\t\t\tconst result = await this.indexedDB.runInTransaction(this.store, 'readonly', objectStore => objectStore.getAllKeys());\n\t\t\t\tconst keys = result.map(key => key.toString());\n\t\t\t\tkeys.forEach(key => rootNode.add(key, { type: 'file' }));\n\t\t\t\treturn rootNode;\n\t\t\t})();\n\t\t}\n\t\treturn this.cachedFiletree;\n\t}\n\n\tprivate async bulkWrite(files: [URI, Uint8Array][]): Promise<void> {\n\t\tfiles.forEach(([resource, content]) => this.fileWriteBatch.push({ content, resource }));\n\t\tawait this.writeManyThrottler.queue(() => this.writeMany());\n\n\t\tconst fileTree = await this.getFiletree();\n\t\tfor (const [resource, content] of files) {\n\t\t\tfileTree.add(resource.path, { type: 'file', size: content.byteLength });\n\t\t\tthis.mtimes.set(resource.toString(), Date.now());\n\t\t}\n\n\t\tthis.triggerChanges(files.map(([resource]) => ({ resource, type: FileChangeType.UPDATED })));\n\t}\n\n\tprivate fileWriteBatch: { resource: URI; content: Uint8Array }[] = [];\n\tprivate async writeMany() {\n\t\tif (this.fileWriteBatch.length) {\n\t\t\tconst fileBatch = this.fileWriteBatch.splice(0, this.fileWriteBatch.length);\n\t\t\ttry {\n\t\t\t\tawait this.indexedDB.runInTransaction(this.store, 'readwrite', objectStore => fileBatch.map(entry => {\n\t\t\t\t\treturn objectStore.put(entry.content, entry.resource.path);\n\t\t\t\t}));\n\t\t\t} catch (ex) {\n\t\t\t\tif (ex instanceof DOMException && ex.name === 'QuotaExceededError') {\n\t\t\t\t\tthrow ERR_FILE_EXCEEDS_STORAGE_QUOTA;\n\t\t\t\t}\n\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteKeys(keys: string[]): Promise<void> {\n\t\tif (keys.length) {\n\t\t\tawait this.indexedDB.runInTransaction(this.store, 'readwrite', objectStore => keys.map(key => objectStore.delete(key)));\n\t\t}\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tawait this.indexedDB.runInTransaction(this.store, 'readwrite', objectStore => objectStore.clear());\n\t}\n\n\tprivate reportError(operation: string, error: Error): void {\n\t\tthis._onReportError.fire({ scheme: this.scheme, operation, code: error instanceof FileSystemProviderError || error instanceof DBClosedError ? error.code : 'unknown' });\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
