{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/browser/indexedDBFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BroadcastDataChannel } from \"../../../base/browser/broadcast.js\";\nimport {\n\tDBClosedError,\n\ttype IndexedDB,\n} from \"../../../base/browser/indexedDB.js\";\nimport { Throttler } from \"../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { ExtUri } from \"../../../base/common/resources.js\";\nimport { isString } from \"../../../base/common/types.js\";\nimport { URI, type UriDto } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport {\n\tFileChangeType,\n\tFileSystemProviderCapabilities,\n\tFileSystemProviderError,\n\tFileSystemProviderErrorCode,\n\tFileType,\n\ttype IFileChange,\n\ttype IFileDeleteOptions,\n\ttype IFileOverwriteOptions,\n\ttype IFileSystemProviderWithFileReadWriteCapability,\n\ttype IFileWriteOptions,\n\ttype IStat,\n\ttype IWatchOptions,\n\tcreateFileSystemProviderError,\n} from \"../common/files.js\";\n\nexport type IndexedDBFileSystemProviderErrorDataClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Information about errors that occur in the IndexedDB file system provider\";\n\treadonly scheme: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"IndexedDB file system provider scheme for which this error occurred\";\n\t};\n\treadonly operation: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"operation during which this error occurred\";\n\t};\n\treadonly code: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"PerformanceAndHealth\";\n\t\tcomment: \"error code\";\n\t};\n};\n\nexport type IndexedDBFileSystemProviderErrorData = {\n\treadonly scheme: string;\n\treadonly operation: string;\n\treadonly code: string;\n};\n\n// Standard FS Errors (expected to be thrown in production when invalid FS operations are requested)\nconst ERR_FILE_NOT_FOUND = createFileSystemProviderError(\n\tlocalize(\"fileNotExists\", \"File does not exist\"),\n\tFileSystemProviderErrorCode.FileNotFound,\n);\nconst ERR_FILE_IS_DIR = createFileSystemProviderError(\n\tlocalize(\"fileIsDirectory\", \"File is Directory\"),\n\tFileSystemProviderErrorCode.FileIsADirectory,\n);\nconst ERR_FILE_NOT_DIR = createFileSystemProviderError(\n\tlocalize(\"fileNotDirectory\", \"File is not a directory\"),\n\tFileSystemProviderErrorCode.FileNotADirectory,\n);\nconst ERR_DIR_NOT_EMPTY = createFileSystemProviderError(\n\tlocalize(\"dirIsNotEmpty\", \"Directory is not empty\"),\n\tFileSystemProviderErrorCode.Unknown,\n);\nconst ERR_FILE_EXCEEDS_STORAGE_QUOTA = createFileSystemProviderError(\n\tlocalize(\"fileExceedsStorageQuota\", \"File exceeds available storage quota\"),\n\tFileSystemProviderErrorCode.FileExceedsStorageQuota,\n);\n\n// Arbitrary Internal Errors\nconst ERR_UNKNOWN_INTERNAL = (message: string) =>\n\tcreateFileSystemProviderError(\n\t\tlocalize(\n\t\t\t\"internal\",\n\t\t\t\"Internal error occurred in IndexedDB File System Provider. ({0})\",\n\t\t\tmessage,\n\t\t),\n\t\tFileSystemProviderErrorCode.Unknown,\n\t);\n\ntype DirEntry = [string, FileType];\n\ntype IndexedDBFileSystemEntry =\n\t| {\n\t\t\tpath: string;\n\t\t\ttype: FileType.Directory;\n\t\t\tchildren: Map<string, IndexedDBFileSystemNode>;\n\t  }\n\t| {\n\t\t\tpath: string;\n\t\t\ttype: FileType.File;\n\t\t\tsize: number | undefined;\n\t  };\n\nclass IndexedDBFileSystemNode {\n\tpublic type: FileType;\n\n\tconstructor(private entry: IndexedDBFileSystemEntry) {\n\t\tthis.type = entry.type;\n\t}\n\n\tread(path: string): IndexedDBFileSystemEntry | undefined {\n\t\treturn this.doRead(path.split(\"/\").filter((p) => p.length));\n\t}\n\n\tprivate doRead(pathParts: string[]): IndexedDBFileSystemEntry | undefined {\n\t\tif (pathParts.length === 0) {\n\t\t\treturn this.entry;\n\t\t}\n\t\tif (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t\"Internal error reading from IndexedDBFSNode -- expected directory at \" +\n\t\t\t\t\tthis.entry.path,\n\t\t\t);\n\t\t}\n\t\tconst next = this.entry.children.get(pathParts[0]);\n\n\t\tif (!next) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn next.doRead(pathParts.slice(1));\n\t}\n\n\tdelete(path: string): void {\n\t\tconst toDelete = path.split(\"/\").filter((p) => p.length);\n\t\tif (toDelete.length === 0) {\n\t\t\tif (this.entry.type !== FileType.Directory) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t\t`Internal error deleting from IndexedDBFSNode. Expected root entry to be directory`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.entry.children.clear();\n\t\t} else {\n\t\t\treturn this.doDelete(toDelete, path);\n\t\t}\n\t}\n\n\tprivate doDelete(pathParts: string[], originalPath: string): void {\n\t\tif (pathParts.length === 0) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t`Internal error deleting from IndexedDBFSNode -- got no deletion path parts (encountered while deleting ${originalPath})`,\n\t\t\t);\n\t\t} else if (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t\"Internal error deleting from IndexedDBFSNode -- expected directory at \" +\n\t\t\t\t\tthis.entry.path,\n\t\t\t);\n\t\t} else if (pathParts.length === 1) {\n\t\t\tthis.entry.children.delete(pathParts[0]);\n\t\t} else {\n\t\t\tconst next = this.entry.children.get(pathParts[0]);\n\t\t\tif (!next) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t\t\"Internal error deleting from IndexedDBFSNode -- expected entry at \" +\n\t\t\t\t\t\tthis.entry.path +\n\t\t\t\t\t\t\"/\" +\n\t\t\t\t\t\tnext,\n\t\t\t\t);\n\t\t\t}\n\t\t\tnext.doDelete(pathParts.slice(1), originalPath);\n\t\t}\n\t}\n\n\tadd(\n\t\tpath: string,\n\t\tentry: { type: \"file\"; size?: number } | { type: \"dir\" },\n\t) {\n\t\tthis.doAdd(\n\t\t\tpath.split(\"/\").filter((p) => p.length),\n\t\t\tentry,\n\t\t\tpath,\n\t\t);\n\t}\n\n\tprivate doAdd(\n\t\tpathParts: string[],\n\t\tentry: { type: \"file\"; size?: number } | { type: \"dir\" },\n\t\toriginalPath: string,\n\t) {\n\t\tif (pathParts.length === 0) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t`Internal error creating IndexedDBFSNode -- adding empty path (encountered while adding ${originalPath})`,\n\t\t\t);\n\t\t} else if (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t`Internal error creating IndexedDBFSNode -- parent is not a directory (encountered while adding ${originalPath})`,\n\t\t\t);\n\t\t} else if (pathParts.length === 1) {\n\t\t\tconst next = pathParts[0];\n\t\t\tconst existing = this.entry.children.get(next);\n\t\t\tif (entry.type === \"dir\") {\n\t\t\t\tif (existing?.entry.type === FileType.File) {\n\t\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t\t\t`Internal error creating IndexedDBFSNode -- overwriting file with directory: ${this.entry.path}/${next} (encountered while adding ${originalPath})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.entry.children.set(\n\t\t\t\t\tnext,\n\t\t\t\t\texisting ??\n\t\t\t\t\t\tnew IndexedDBFileSystemNode({\n\t\t\t\t\t\t\ttype: FileType.Directory,\n\t\t\t\t\t\t\tpath: this.entry.path + \"/\" + next,\n\t\t\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tif (existing?.entry.type === FileType.Directory) {\n\t\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t\t\t`Internal error creating IndexedDBFSNode -- overwriting directory with file: ${this.entry.path}/${next} (encountered while adding ${originalPath})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.entry.children.set(\n\t\t\t\t\tnext,\n\t\t\t\t\tnew IndexedDBFileSystemNode({\n\t\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\t\tpath: this.entry.path + \"/\" + next,\n\t\t\t\t\t\tsize: entry.size,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (pathParts.length > 1) {\n\t\t\tconst next = pathParts[0];\n\t\t\tlet childNode = this.entry.children.get(next);\n\t\t\tif (!childNode) {\n\t\t\t\tchildNode = new IndexedDBFileSystemNode({\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\tpath: this.entry.path + \"/\" + next,\n\t\t\t\t\ttype: FileType.Directory,\n\t\t\t\t});\n\t\t\t\tthis.entry.children.set(next, childNode);\n\t\t\t} else if (childNode.type === FileType.File) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t\t`Internal error creating IndexedDBFSNode -- overwriting file entry with directory: ${this.entry.path}/${next} (encountered while adding ${originalPath})`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tchildNode.doAdd(pathParts.slice(1), entry, originalPath);\n\t\t}\n\t}\n\n\tprint(indentation = \"\") {\n\t\tconsole.log(indentation + this.entry.path);\n\t\tif (this.entry.type === FileType.Directory) {\n\t\t\tthis.entry.children.forEach((child) =>\n\t\t\t\tchild.print(indentation + \" \"),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport class IndexedDBFileSystemProvider\n\textends Disposable\n\timplements IFileSystemProviderWithFileReadWriteCapability\n{\n\treadonly capabilities: FileSystemProviderCapabilities =\n\t\tFileSystemProviderCapabilities.FileReadWrite |\n\t\tFileSystemProviderCapabilities.PathCaseSensitive;\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\tprivate readonly extUri = new ExtUri(() => false) /* Case Sensitive */;\n\n\tprivate readonly changesBroadcastChannel:\n\t\t| BroadcastDataChannel<UriDto<IFileChange>[]>\n\t\t| undefined;\n\tprivate readonly _onDidChangeFile = this._register(\n\t\tnew Emitter<readonly IFileChange[]>(),\n\t);\n\treadonly onDidChangeFile: Event<readonly IFileChange[]> =\n\t\tthis._onDidChangeFile.event;\n\n\tprivate readonly _onReportError = this._register(\n\t\tnew Emitter<IndexedDBFileSystemProviderErrorData>(),\n\t);\n\treadonly onReportError = this._onReportError.event;\n\n\tprivate readonly mtimes = new Map<string, number>();\n\n\tprivate cachedFiletree: Promise<IndexedDBFileSystemNode> | undefined;\n\tprivate writeManyThrottler: Throttler;\n\n\tconstructor(\n\t\treadonly scheme: string,\n\t\tprivate indexedDB: IndexedDB,\n\t\tprivate readonly store: string,\n\t\twatchCrossWindowChanges: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.writeManyThrottler = new Throttler();\n\n\t\tif (watchCrossWindowChanges) {\n\t\t\tthis.changesBroadcastChannel = this._register(\n\t\t\t\tnew BroadcastDataChannel<UriDto<IFileChange>[]>(\n\t\t\t\t\t`vscode.indexedDB.${scheme}.changes`,\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tthis.changesBroadcastChannel.onDidReceiveData((changes) => {\n\t\t\t\t\tthis._onDidChangeFile.fire(\n\t\t\t\t\t\tchanges.map((c) => ({\n\t\t\t\t\t\t\ttype: c.type,\n\t\t\t\t\t\t\tresource: URI.revive(c.resource),\n\t\t\t\t\t\t})),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\tasync mkdir(resource: URI): Promise<void> {\n\t\ttry {\n\t\t\tconst resourceStat = await this.stat(resource);\n\t\t\tif (resourceStat.type === FileType.File) {\n\t\t\t\tthrow ERR_FILE_NOT_DIR;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* Ignore */\n\t\t}\n\t\t(await this.getFiletree()).add(resource.path, { type: \"dir\" });\n\t}\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\tconst entry = (await this.getFiletree()).read(resource.path);\n\n\t\tif (entry?.type === FileType.File) {\n\t\t\treturn {\n\t\t\t\ttype: FileType.File,\n\t\t\t\tctime: 0,\n\t\t\t\tmtime: this.mtimes.get(resource.toString()) || 0,\n\t\t\t\tsize: entry.size ?? (await this.readFile(resource)).byteLength,\n\t\t\t};\n\t\t}\n\n\t\tif (entry?.type === FileType.Directory) {\n\t\t\treturn {\n\t\t\t\ttype: FileType.Directory,\n\t\t\t\tctime: 0,\n\t\t\t\tmtime: 0,\n\t\t\t\tsize: 0,\n\t\t\t};\n\t\t}\n\n\t\tthrow ERR_FILE_NOT_FOUND;\n\t}\n\n\tasync readdir(resource: URI): Promise<DirEntry[]> {\n\t\ttry {\n\t\t\tconst entry = (await this.getFiletree()).read(resource.path);\n\t\t\tif (!entry) {\n\t\t\t\t// Dirs aren't saved to disk, so empty dirs will be lost on reload.\n\t\t\t\t// Thus we have two options for what happens when you try to read a dir and nothing is found:\n\t\t\t\t// - Throw FileSystemProviderErrorCode.FileNotFound\n\t\t\t\t// - Return []\n\t\t\t\t// We choose to return [] as creating a dir then reading it (even after reload) should not throw an error.\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (entry.type !== FileType.Directory) {\n\t\t\t\tthrow ERR_FILE_NOT_DIR;\n\t\t\t} else {\n\t\t\t\treturn [...entry.children.entries()].map(([name, node]) => [\n\t\t\t\t\tname,\n\t\t\t\t\tnode.type,\n\t\t\t\t]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reportError(\"readDir\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\ttry {\n\t\t\tconst result = await this.indexedDB.runInTransaction(\n\t\t\t\tthis.store,\n\t\t\t\t\"readonly\",\n\t\t\t\t(objectStore) => objectStore.get(resource.path),\n\t\t\t);\n\t\t\tif (result === undefined) {\n\t\t\t\tthrow ERR_FILE_NOT_FOUND;\n\t\t\t}\n\t\t\tconst buffer =\n\t\t\t\tresult instanceof Uint8Array\n\t\t\t\t\t? result\n\t\t\t\t\t: isString(result)\n\t\t\t\t\t\t? VSBuffer.fromString(result).buffer\n\t\t\t\t\t\t: undefined;\n\t\t\tif (buffer === undefined) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(\n\t\t\t\t\t`IndexedDB entry at \"${resource.path}\" in unexpected format`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// update cache\n\t\t\tconst fileTree = await this.getFiletree();\n\t\t\tfileTree.add(resource.path, {\n\t\t\t\ttype: \"file\",\n\t\t\t\tsize: buffer.byteLength,\n\t\t\t});\n\n\t\t\treturn buffer;\n\t\t} catch (error) {\n\t\t\tthis.reportError(\"readFile\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync writeFile(\n\t\tresource: URI,\n\t\tcontent: Uint8Array,\n\t\topts: IFileWriteOptions,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconst existing = await this.stat(resource).catch(() => undefined);\n\t\t\tif (existing?.type === FileType.Directory) {\n\t\t\t\tthrow ERR_FILE_IS_DIR;\n\t\t\t}\n\t\t\tawait this.bulkWrite([[resource, content]]);\n\t\t} catch (error) {\n\t\t\tthis.reportError(\"writeFile\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync rename(\n\t\tfrom: URI,\n\t\tto: URI,\n\t\topts: IFileOverwriteOptions,\n\t): Promise<void> {\n\t\tconst fileTree = await this.getFiletree();\n\t\tconst fromEntry = fileTree.read(from.path);\n\t\tif (!fromEntry) {\n\t\t\tthrow ERR_FILE_NOT_FOUND;\n\t\t}\n\n\t\tconst toEntry = fileTree.read(to.path);\n\t\tif (toEntry) {\n\t\t\tif (!opts.overwrite) {\n\t\t\t\tthrow createFileSystemProviderError(\n\t\t\t\t\t\"file exists already\",\n\t\t\t\t\tFileSystemProviderErrorCode.FileExists,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (toEntry.type !== fromEntry.type) {\n\t\t\t\tthrow createFileSystemProviderError(\n\t\t\t\t\t\"Cannot rename files with different types\",\n\t\t\t\t\tFileSystemProviderErrorCode.Unknown,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// delete the target file if exists\n\t\t\tawait this.delete(to, {\n\t\t\t\trecursive: true,\n\t\t\t\tuseTrash: false,\n\t\t\t\tatomic: false,\n\t\t\t});\n\t\t}\n\n\t\tconst toTargetResource = (path: string): URI =>\n\t\t\tthis.extUri.joinPath(\n\t\t\t\tto,\n\t\t\t\tthis.extUri.relativePath(from, from.with({ path })) || \"\",\n\t\t\t);\n\n\t\tconst sourceEntries = await this.tree(from);\n\t\tconst sourceFiles: DirEntry[] = [];\n\t\tfor (const sourceEntry of sourceEntries) {\n\t\t\tif (sourceEntry[1] === FileType.File) {\n\t\t\t\tsourceFiles.push(sourceEntry);\n\t\t\t} else if (sourceEntry[1] === FileType.Directory) {\n\t\t\t\t// add directories to the tree\n\t\t\t\tfileTree.add(toTargetResource(sourceEntry[0]).path, {\n\t\t\t\t\ttype: \"dir\",\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (sourceFiles.length) {\n\t\t\tconst targetFiles: [URI, Uint8Array][] = [];\n\t\t\tconst sourceFilesContents = await this.indexedDB.runInTransaction(\n\t\t\t\tthis.store,\n\t\t\t\t\"readonly\",\n\t\t\t\t(objectStore) =>\n\t\t\t\t\tsourceFiles.map(([path]) => objectStore.get(path)),\n\t\t\t);\n\t\t\tfor (let index = 0; index < sourceFiles.length; index++) {\n\t\t\t\tconst content =\n\t\t\t\t\tsourceFilesContents[index] instanceof Uint8Array\n\t\t\t\t\t\t? sourceFilesContents[index]\n\t\t\t\t\t\t: isString(sourceFilesContents[index])\n\t\t\t\t\t\t\t? VSBuffer.fromString(sourceFilesContents[index])\n\t\t\t\t\t\t\t\t\t.buffer\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\tif (content) {\n\t\t\t\t\ttargetFiles.push([\n\t\t\t\t\t\ttoTargetResource(sourceFiles[index][0]),\n\t\t\t\t\t\tcontent,\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.bulkWrite(targetFiles);\n\t\t}\n\n\t\tawait this.delete(from, {\n\t\t\trecursive: true,\n\t\t\tuseTrash: false,\n\t\t\tatomic: false,\n\t\t});\n\t}\n\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\tlet stat: IStat;\n\t\ttry {\n\t\t\tstat = await this.stat(resource);\n\t\t} catch (e) {\n\t\t\tif (e.code === FileSystemProviderErrorCode.FileNotFound) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\n\t\tlet toDelete: string[];\n\t\tif (opts.recursive) {\n\t\t\tconst tree = await this.tree(resource);\n\t\t\ttoDelete = tree.map(([path]) => path);\n\t\t} else {\n\t\t\tif (\n\t\t\t\tstat.type === FileType.Directory &&\n\t\t\t\t(await this.readdir(resource)).length\n\t\t\t) {\n\t\t\t\tthrow ERR_DIR_NOT_EMPTY;\n\t\t\t}\n\t\t\ttoDelete = [resource.path];\n\t\t}\n\t\tawait this.deleteKeys(toDelete);\n\t\t(await this.getFiletree()).delete(resource.path);\n\t\ttoDelete.forEach((key) => this.mtimes.delete(key));\n\t\tthis.triggerChanges(\n\t\t\ttoDelete.map((path) => ({\n\t\t\t\tresource: resource.with({ path }),\n\t\t\t\ttype: FileChangeType.DELETED,\n\t\t\t})),\n\t\t);\n\t}\n\n\tprivate async tree(resource: URI): Promise<DirEntry[]> {\n\t\tconst stat = await this.stat(resource);\n\t\tconst allEntries: DirEntry[] = [[resource.path, stat.type]];\n\t\tif (stat.type === FileType.Directory) {\n\t\t\tconst dirEntries = await this.readdir(resource);\n\t\t\tfor (const [key, type] of dirEntries) {\n\t\t\t\tconst childResource = this.extUri.joinPath(resource, key);\n\t\t\t\tallEntries.push([childResource.path, type]);\n\t\t\t\tif (type === FileType.Directory) {\n\t\t\t\t\tconst childEntries = await this.tree(childResource);\n\t\t\t\t\tallEntries.push(...childEntries);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn allEntries;\n\t}\n\n\tprivate triggerChanges(changes: IFileChange[]): void {\n\t\tif (changes.length) {\n\t\t\tthis._onDidChangeFile.fire(changes);\n\n\t\t\tthis.changesBroadcastChannel?.postData(changes);\n\t\t}\n\t}\n\n\tprivate getFiletree(): Promise<IndexedDBFileSystemNode> {\n\t\tif (!this.cachedFiletree) {\n\t\t\tthis.cachedFiletree = (async () => {\n\t\t\t\tconst rootNode = new IndexedDBFileSystemNode({\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\tpath: \"\",\n\t\t\t\t\ttype: FileType.Directory,\n\t\t\t\t});\n\t\t\t\tconst result = await this.indexedDB.runInTransaction(\n\t\t\t\t\tthis.store,\n\t\t\t\t\t\"readonly\",\n\t\t\t\t\t(objectStore) => objectStore.getAllKeys(),\n\t\t\t\t);\n\t\t\t\tconst keys = result.map((key) => key.toString());\n\t\t\t\tkeys.forEach((key) => rootNode.add(key, { type: \"file\" }));\n\t\t\t\treturn rootNode;\n\t\t\t})();\n\t\t}\n\t\treturn this.cachedFiletree;\n\t}\n\n\tprivate async bulkWrite(files: [URI, Uint8Array][]): Promise<void> {\n\t\tfiles.forEach(([resource, content]) =>\n\t\t\tthis.fileWriteBatch.push({ content, resource }),\n\t\t);\n\t\tawait this.writeManyThrottler.queue(() => this.writeMany());\n\n\t\tconst fileTree = await this.getFiletree();\n\t\tfor (const [resource, content] of files) {\n\t\t\tfileTree.add(resource.path, {\n\t\t\t\ttype: \"file\",\n\t\t\t\tsize: content.byteLength,\n\t\t\t});\n\t\t\tthis.mtimes.set(resource.toString(), Date.now());\n\t\t}\n\n\t\tthis.triggerChanges(\n\t\t\tfiles.map(([resource]) => ({\n\t\t\t\tresource,\n\t\t\t\ttype: FileChangeType.UPDATED,\n\t\t\t})),\n\t\t);\n\t}\n\n\tprivate fileWriteBatch: { resource: URI; content: Uint8Array }[] = [];\n\tprivate async writeMany() {\n\t\tif (this.fileWriteBatch.length) {\n\t\t\tconst fileBatch = this.fileWriteBatch.splice(\n\t\t\t\t0,\n\t\t\t\tthis.fileWriteBatch.length,\n\t\t\t);\n\t\t\ttry {\n\t\t\t\tawait this.indexedDB.runInTransaction(\n\t\t\t\t\tthis.store,\n\t\t\t\t\t\"readwrite\",\n\t\t\t\t\t(objectStore) =>\n\t\t\t\t\t\tfileBatch.map((entry) => {\n\t\t\t\t\t\t\treturn objectStore.put(\n\t\t\t\t\t\t\t\tentry.content,\n\t\t\t\t\t\t\t\tentry.resource.path,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} catch (ex) {\n\t\t\t\tif (\n\t\t\t\t\tex instanceof DOMException &&\n\t\t\t\t\tex.name === \"QuotaExceededError\"\n\t\t\t\t) {\n\t\t\t\t\tthrow ERR_FILE_EXCEEDS_STORAGE_QUOTA;\n\t\t\t\t}\n\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteKeys(keys: string[]): Promise<void> {\n\t\tif (keys.length) {\n\t\t\tawait this.indexedDB.runInTransaction(\n\t\t\t\tthis.store,\n\t\t\t\t\"readwrite\",\n\t\t\t\t(objectStore) => keys.map((key) => objectStore.delete(key)),\n\t\t\t);\n\t\t}\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tawait this.indexedDB.runInTransaction(\n\t\t\tthis.store,\n\t\t\t\"readwrite\",\n\t\t\t(objectStore) => objectStore.clear(),\n\t\t);\n\t}\n\n\tprivate reportError(operation: string, error: Error): void {\n\t\tthis._onReportError.fire({\n\t\t\tscheme: this.scheme,\n\t\t\toperation,\n\t\t\tcode:\n\t\t\t\terror instanceof FileSystemProviderError ||\n\t\t\t\terror instanceof DBClosedError\n\t\t\t\t\t? error.code\n\t\t\t\t\t: \"unknown\",\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
