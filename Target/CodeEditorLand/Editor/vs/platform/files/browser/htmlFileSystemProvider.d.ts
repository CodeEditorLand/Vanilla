import { IndexedDB } from "vs/base/browser/indexedDB";
import { CancellationToken } from "vs/base/common/cancellation";
import { IDisposable } from "vs/base/common/lifecycle";
import { ReadableStreamEvents } from "vs/base/common/stream";
import { URI } from "vs/base/common/uri";
import { FileSystemProviderCapabilities, FileType, IFileDeleteOptions, IFileOverwriteOptions, IFileReadStreamOptions, IFileSystemProviderWithFileReadStreamCapability, IFileSystemProviderWithFileReadWriteCapability, IFileWriteOptions, IStat, IWatchOptions } from "vs/platform/files/common/files";
import { ILogService } from "vs/platform/log/common/log";
export declare class HTMLFileSystemProvider implements IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithFileReadStreamCapability {
    private indexedDB;
    private readonly store;
    private logService;
    readonly onDidChangeCapabilities: any;
    readonly onDidChangeFile: any;
    private extUri;
    private _capabilities;
    get capabilities(): FileSystemProviderCapabilities;
    constructor(indexedDB: IndexedDB | undefined, store: string, logService: ILogService);
    stat(resource: URI): Promise<IStat>;
    readdir(resource: URI): Promise<[string, FileType][]>;
    readFileStream(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array>;
    readFile(resource: URI): Promise<Uint8Array>;
    writeFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void>;
    mkdir(resource: URI): Promise<void>;
    delete(resource: URI, opts: IFileDeleteOptions): Promise<void>;
    rename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void>;
    watch(resource: URI, opts: IWatchOptions): IDisposable;
    private readonly _files;
    private readonly _directories;
    registerFileHandle(handle: FileSystemFileHandle): Promise<URI>;
    registerDirectoryHandle(handle: FileSystemDirectoryHandle): Promise<URI>;
    get directories(): Iterable<FileSystemDirectoryHandle>;
    private registerHandle;
    getHandle(resource: URI): Promise<FileSystemHandle | undefined>;
    private getFileHandle;
    private getDirectoryHandle;
    private doGetHandle;
    private toFileSystemProviderError;
    private createFileSystemProviderError;
}
