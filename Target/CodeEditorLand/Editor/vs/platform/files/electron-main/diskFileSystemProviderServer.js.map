{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/electron-main/diskFileSystemProviderServer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { shell } from 'electron';\nimport { localize } from '../../../nls.js';\nimport { isWindows } from '../../../base/common/platform.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { IFileDeleteOptions, IFileChange, IWatchOptions, createFileSystemProviderError, FileSystemProviderErrorCode } from '../common/files.js';\nimport { DiskFileSystemProvider } from '../node/diskFileSystemProvider.js';\nimport { basename, normalize } from '../../../base/common/path.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { AbstractDiskFileSystemProviderChannel, AbstractSessionFileWatcher, ISessionFileWatcher } from '../node/diskFileSystemProviderServer.js';\nimport { DefaultURITransformer, IURITransformer } from '../../../base/common/uriIpc.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\n\nexport class DiskFileSystemProviderChannel extends AbstractDiskFileSystemProviderChannel<unknown> {\n\n\tconstructor(\n\t\tprovider: DiskFileSystemProvider,\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper(provider, logService);\n\t}\n\n\tprotected override getUriTransformer(ctx: unknown): IURITransformer {\n\t\treturn DefaultURITransformer;\n\t}\n\n\tprotected override transformIncoming(uriTransformer: IURITransformer, _resource: UriComponents): URI {\n\t\treturn URI.revive(_resource);\n\t}\n\n\t//#region Delete: override to support Electron's trash support\n\n\tprotected override async delete(uriTransformer: IURITransformer, _resource: UriComponents, opts: IFileDeleteOptions): Promise<void> {\n\t\tif (!opts.useTrash) {\n\t\t\treturn super.delete(uriTransformer, _resource, opts);\n\t\t}\n\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\t\tconst filePath = normalize(resource.fsPath);\n\t\ttry {\n\t\t\tawait shell.trashItem(filePath);\n\t\t} catch (error) {\n\t\t\tthrow createFileSystemProviderError(isWindows ? localize('binFailed', \"Failed to move '{0}' to the recycle bin ({1})\", basename(filePath), toErrorMessage(error)) : localize('trashFailed', \"Failed to move '{0}' to the trash ({1})\", basename(filePath), toErrorMessage(error)), FileSystemProviderErrorCode.Unknown);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprotected createSessionFileWatcher(uriTransformer: IURITransformer, emitter: Emitter<IFileChange[] | string>): ISessionFileWatcher {\n\t\treturn new SessionFileWatcher(uriTransformer, emitter, this.logService, this.environmentService);\n\t}\n\n\t//#endregion\n\n}\n\nclass SessionFileWatcher extends AbstractSessionFileWatcher {\n\n\toverride watch(req: number, resource: URI, opts: IWatchOptions): IDisposable {\n\t\tif (opts.recursive) {\n\t\t\tthrow createFileSystemProviderError('Recursive file watching is not supported from main process for performance reasons.', FileSystemProviderErrorCode.Unavailable);\n\t\t}\n\n\t\treturn super.watch(req, resource, opts);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,KAAK,qBAAqB;AACnC,SAAS,oBAAoB,aAAa,eAAe,+BAA+B,mCAAmC;AAC3H,SAAS,8BAA8B;AACvC,SAAS,UAAU,iBAAiB;AACpC,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAC5B,SAAS,uCAAuC,4BAA4B,2BAA2B;AACvG,SAAS,uBAAuB,uBAAuB;AACvD,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AAExB,MAAM,sCAAsC,sCAA+C;AAAA,EAEjG,YACC,UACA,YACiB,oBAChB;AACD,UAAM,UAAU,UAAU;AAFT;AAAA,EAGlB;AAAA,EA5BD,OAoBkG;AAAA;AAAA;AAAA,EAU9E,kBAAkB,KAA+B;AACnE,WAAO;AAAA,EACR;AAAA,EAEmB,kBAAkB,gBAAiC,WAA+B;AACpG,WAAO,IAAI,OAAO,SAAS;AAAA,EAC5B;AAAA;AAAA,EAIA,MAAyB,OAAO,gBAAiC,WAA0B,MAAyC;AACnI,QAAI,CAAC,KAAK,UAAU;AACnB,aAAO,MAAM,OAAO,gBAAgB,WAAW,IAAI;AAAA,IACpD;AAEA,UAAM,WAAW,KAAK,kBAAkB,gBAAgB,SAAS;AACjE,UAAM,WAAW,UAAU,SAAS,MAAM;AAC1C,QAAI;AACH,YAAM,MAAM,UAAU,QAAQ;AAAA,IAC/B,SAAS,OAAO;AACf,YAAM,8BAA8B,YAAY,SAAS,aAAa,iDAAiD,SAAS,QAAQ,GAAG,eAAe,KAAK,CAAC,IAAI,SAAS,eAAe,2CAA2C,SAAS,QAAQ,GAAG,eAAe,KAAK,CAAC,GAAG,4BAA4B,OAAO;AAAA,IACvT;AAAA,EACD;AAAA;AAAA;AAAA,EAMU,yBAAyB,gBAAiC,SAA+D;AAClI,WAAO,IAAI,mBAAmB,gBAAgB,SAAS,KAAK,YAAY,KAAK,kBAAkB;AAAA,EAChG;AAAA;AAID;AAEA,MAAM,2BAA2B,2BAA2B;AAAA,EAlE5D,OAkE4D;AAAA;AAAA;AAAA,EAElD,MAAM,KAAa,UAAe,MAAkC;AAC5E,QAAI,KAAK,WAAW;AACnB,YAAM,8BAA8B,uFAAuF,4BAA4B,WAAW;AAAA,IACnK;AAEA,WAAO,MAAM,MAAM,KAAK,UAAU,IAAI;AAAA,EACvC;AACD;",
  "names": []
}
