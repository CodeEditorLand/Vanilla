{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/files/electron-main/diskFileSystemProviderServer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { shell } from \"electron\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport type { Emitter } from \"../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport { basename, normalize } from \"../../../base/common/path.js\";\nimport { isWindows } from \"../../../base/common/platform.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport {\n\tDefaultURITransformer,\n\ttype IURITransformer,\n} from \"../../../base/common/uriIpc.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { IConfigurationService } from \"../../configuration/common/configuration.js\";\nimport type { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport type { ILogService } from \"../../log/common/log.js\";\nimport {\n\tFileSystemProviderErrorCode,\n\ttype IFileChange,\n\ttype IFileDeleteOptions,\n\ttype IWatchOptions,\n\tcreateFileSystemProviderError,\n} from \"../common/files.js\";\nimport type { DiskFileSystemProvider } from \"../node/diskFileSystemProvider.js\";\nimport {\n\tAbstractDiskFileSystemProviderChannel,\n\tAbstractSessionFileWatcher,\n\ttype ISessionFileWatcher,\n} from \"../node/diskFileSystemProviderServer.js\";\n\nexport class DiskFileSystemProviderChannel extends AbstractDiskFileSystemProviderChannel<unknown> {\n\tconstructor(\n\t\tprovider: DiskFileSystemProvider,\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper(provider, logService);\n\t}\n\n\tprotected override getUriTransformer(ctx: unknown): IURITransformer {\n\t\treturn DefaultURITransformer;\n\t}\n\n\tprotected override transformIncoming(\n\t\turiTransformer: IURITransformer,\n\t\t_resource: UriComponents,\n\t): URI {\n\t\treturn URI.revive(_resource);\n\t}\n\n\t//#region Delete: override to support Electron's trash support\n\n\tprotected override async delete(\n\t\turiTransformer: IURITransformer,\n\t\t_resource: UriComponents,\n\t\topts: IFileDeleteOptions,\n\t): Promise<void> {\n\t\tif (!opts.useTrash) {\n\t\t\treturn super.delete(uriTransformer, _resource, opts);\n\t\t}\n\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\t\tconst filePath = normalize(resource.fsPath);\n\t\ttry {\n\t\t\tawait shell.trashItem(filePath);\n\t\t} catch (error) {\n\t\t\tthrow createFileSystemProviderError(\n\t\t\t\tisWindows\n\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\"binFailed\",\n\t\t\t\t\t\t\t\"Failed to move '{0}' to the recycle bin ({1})\",\n\t\t\t\t\t\t\tbasename(filePath),\n\t\t\t\t\t\t\ttoErrorMessage(error),\n\t\t\t\t\t\t)\n\t\t\t\t\t: localize(\n\t\t\t\t\t\t\t\"trashFailed\",\n\t\t\t\t\t\t\t\"Failed to move '{0}' to the trash ({1})\",\n\t\t\t\t\t\t\tbasename(filePath),\n\t\t\t\t\t\t\ttoErrorMessage(error),\n\t\t\t\t\t\t),\n\t\t\t\tFileSystemProviderErrorCode.Unknown,\n\t\t\t);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprotected createSessionFileWatcher(\n\t\turiTransformer: IURITransformer,\n\t\temitter: Emitter<IFileChange[] | string>,\n\t): ISessionFileWatcher {\n\t\treturn new SessionFileWatcher(\n\t\t\turiTransformer,\n\t\t\temitter,\n\t\t\tthis.logService,\n\t\t\tthis.environmentService,\n\t\t\tthis.configurationService,\n\t\t);\n\t}\n\n\t//#endregion\n}\n\nclass SessionFileWatcher extends AbstractSessionFileWatcher {\n\toverride watch(\n\t\treq: number,\n\t\tresource: URI,\n\t\topts: IWatchOptions,\n\t): IDisposable {\n\t\tif (opts.recursive) {\n\t\t\tthrow createFileSystemProviderError(\n\t\t\t\t\"Recursive file watching is not supported from main process for performance reasons.\",\n\t\t\t\tFileSystemProviderErrorCode.Unavailable,\n\t\t\t);\n\t\t}\n\n\t\treturn super.watch(req, resource, opts);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,sBAAsB;AAG/B,SAAS,UAAU,iBAAiB;AACpC,SAAS,iBAAiB;AAC1B,SAAS,WAA+B;AACxC;AAAA,EACC;AAAA,OAEM;AACP,SAAS,gBAAgB;AAIzB;AAAA,EACC;AAAA,EAIA;AAAA,OACM;AAEP;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AAEA,MAAM,sCAAsC,sCAA+C;AAAA,EACjG,YACC,UACA,YACiB,oBACA,sBAChB;AACD,UAAM,UAAU,UAAU;AAHT;AACA;AAAA,EAGlB;AAAA,EA1CD,OAkCkG;AAAA;AAAA;AAAA,EAU9E,kBAAkB,KAA+B;AACnE,WAAO;AAAA,EACR;AAAA,EAEmB,kBAClB,gBACA,WACM;AACN,WAAO,IAAI,OAAO,SAAS;AAAA,EAC5B;AAAA;AAAA,EAIA,MAAyB,OACxB,gBACA,WACA,MACgB;AAChB,QAAI,CAAC,KAAK,UAAU;AACnB,aAAO,MAAM,OAAO,gBAAgB,WAAW,IAAI;AAAA,IACpD;AAEA,UAAM,WAAW,KAAK,kBAAkB,gBAAgB,SAAS;AACjE,UAAM,WAAW,UAAU,SAAS,MAAM;AAC1C,QAAI;AACH,YAAM,MAAM,UAAU,QAAQ;AAAA,IAC/B,SAAS,OAAO;AACf,YAAM;AAAA,QACL,YACG;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,QAAQ;AAAA,UACjB,eAAe,KAAK;AAAA,QACrB,IACC;AAAA,UACA;AAAA,UACA;AAAA,UACA,SAAS,QAAQ;AAAA,UACjB,eAAe,KAAK;AAAA,QACrB;AAAA,QACF,4BAA4B;AAAA,MAC7B;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA,EAMU,yBACT,gBACA,SACsB;AACtB,WAAO,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AAAA,EACD;AAAA;AAGD;AAEA,MAAM,2BAA2B,2BAA2B;AAAA,EA9G5D,OA8G4D;AAAA;AAAA;AAAA,EAClD,MACR,KACA,UACA,MACc;AACd,QAAI,KAAK,WAAW;AACnB,YAAM;AAAA,QACL;AAAA,QACA,4BAA4B;AAAA,MAC7B;AAAA,IACD;AAEA,WAAO,MAAM,MAAM,KAAK,UAAU,IAAI;AAAA,EACvC;AACD;",
  "names": []
}
