import{shell as I}from"electron";import{localize as s}from"../../../nls.js";import{isWindows as v}from"../../../base/common/platform.js";import"../../../base/common/event.js";import{URI as h}from"../../../base/common/uri.js";import{createFileSystemProviderError as m,FileSystemProviderErrorCode as a}from"../common/files.js";import"../node/diskFileSystemProvider.js";import{basename as c,normalize as d}from"../../../base/common/path.js";import"../../../base/common/lifecycle.js";import"../../log/common/log.js";import{AbstractDiskFileSystemProviderChannel as F,AbstractSessionFileWatcher as S}from"../node/diskFileSystemProviderServer.js";import{DefaultURITransformer as u}from"../../../base/common/uriIpc.js";import"../../environment/common/environment.js";import{toErrorMessage as l}from"../../../base/common/errorMessage.js";class N extends F{constructor(r,e,o){super(r,e);this.environmentService=o}getUriTransformer(r){return u}transformIncoming(r,e){return h.revive(e)}async delete(r,e,o){if(!o.useTrash)return super.delete(r,e,o);const f=this.transformIncoming(r,e),t=d(f.fsPath);try{await I.trashItem(t)}catch(n){throw m(v?s("binFailed","Failed to move '{0}' to the recycle bin ({1})",c(t),l(n)):s("trashFailed","Failed to move '{0}' to the trash ({1})",c(t),l(n)),a.Unknown)}}createSessionFileWatcher(r,e){return new U(r,e,this.logService,this.environmentService)}}class U extends S{watch(i,r,e){if(e.recursive)throw m("Recursive file watching is not supported from main process for performance reasons.",a.Unavailable);return super.watch(i,r,e)}}export{N as DiskFileSystemProviderChannel};
