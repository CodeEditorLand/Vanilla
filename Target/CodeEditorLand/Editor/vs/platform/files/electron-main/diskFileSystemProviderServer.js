import{shell as v}from"electron";import{localize as m}from"../../../nls.js";import{isWindows as I}from"../../../base/common/platform.js";import"../../../base/common/event.js";import{URI as h}from"../../../base/common/uri.js";import{createFileSystemProviderError as a,FileSystemProviderErrorCode as c}from"../common/files.js";import"../node/diskFileSystemProvider.js";import{basename as l,normalize as d}from"../../../base/common/path.js";import"../../../base/common/lifecycle.js";import"../../log/common/log.js";import{AbstractDiskFileSystemProviderChannel as S,AbstractSessionFileWatcher as u}from"../node/diskFileSystemProviderServer.js";import{DefaultURITransformer as F}from"../../../base/common/uriIpc.js";import"../../environment/common/environment.js";import{toErrorMessage as f}from"../../../base/common/errorMessage.js";import"../../configuration/common/configuration.js";class V extends S{constructor(r,e,o,n){super(r,e);this.environmentService=o;this.configurationService=n}getUriTransformer(r){return F}transformIncoming(r,e){return h.revive(e)}async delete(r,e,o){if(!o.useTrash)return super.delete(r,e,o);const n=this.transformIncoming(r,e),i=d(n.fsPath);try{await v.trashItem(i)}catch(s){throw a(I?m("binFailed","Failed to move '{0}' to the recycle bin ({1})",l(i),f(s)):m("trashFailed","Failed to move '{0}' to the trash ({1})",l(i),f(s)),c.Unknown)}}createSessionFileWatcher(r,e){return new g(r,e,this.logService,this.environmentService,this.configurationService)}}class g extends u{watch(t,r,e){if(e.recursive)throw a("Recursive file watching is not supported from main process for performance reasons.",c.Unavailable);return super.watch(t,r,e)}}export{V as DiskFileSystemProviderChannel};
