import{shell as f}from"electron";import{toErrorMessage as s}from"../../../base/common/errorMessage.js";import{basename as m,normalize as I}from"../../../base/common/path.js";import{isWindows as d}from"../../../base/common/platform.js";import{URI as h}from"../../../base/common/uri.js";import{DefaultURITransformer as y}from"../../../base/common/uriIpc.js";import{localize as a}from"../../../nls.js";import{FileSystemProviderErrorCode as c,createFileSystemProviderError as l}from"../common/files.js";import{AbstractDiskFileSystemProviderChannel as F,AbstractSessionFileWatcher as S}from"../node/diskFileSystemProviderServer.js";class T extends F{constructor(r,e,o){super(r,e);this.environmentService=o}getUriTransformer(r){return y}transformIncoming(r,e){return h.revive(e)}async delete(r,e,o){if(!o.useTrash)return super.delete(r,e,o);const v=this.transformIncoming(r,e),t=I(v.fsPath);try{await f.trashItem(t)}catch(n){throw l(d?a("binFailed","Failed to move '{0}' to the recycle bin ({1})",m(t),s(n)):a("trashFailed","Failed to move '{0}' to the trash ({1})",m(t),s(n)),c.Unknown)}}createSessionFileWatcher(r,e){return new u(r,e,this.logService,this.environmentService)}}class u extends S{watch(i,r,e){if(e.recursive)throw l("Recursive file watching is not supported from main process for performance reasons.",c.Unavailable);return super.watch(i,r,e)}}export{T as DiskFileSystemProviderChannel};
