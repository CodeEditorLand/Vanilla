{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/opener/common/opener.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IEditorOptions, ITextEditorSelection } from '../../editor/common/editor.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const IOpenerService = createDecorator<IOpenerService>('openerService');\n\nexport type OpenInternalOptions = {\n\n\t/**\n\t * Signals that the intent is to open an editor to the side\n\t * of the currently active editor.\n\t */\n\treadonly openToSide?: boolean;\n\n\t/**\n\t * Extra editor options to apply in case an editor is used to open.\n\t */\n\treadonly editorOptions?: IEditorOptions;\n\n\t/**\n\t * Signals that the editor to open was triggered through a user\n\t * action, such as keyboard or mouse usage.\n\t */\n\treadonly fromUserGesture?: boolean;\n\n\t/**\n\t * Allow command links to be handled.\n\t *\n\t * If this is an array, then only the commands included in the array can be run.\n\t */\n\treadonly allowCommands?: boolean | readonly string[];\n};\n\nexport type OpenExternalOptions = {\n\treadonly openExternal?: boolean;\n\treadonly allowTunneling?: boolean;\n\treadonly allowContributedOpeners?: boolean | string;\n\treadonly fromWorkspace?: boolean;\n};\n\nexport type OpenOptions = OpenInternalOptions & OpenExternalOptions;\n\nexport type ResolveExternalUriOptions = { readonly allowTunneling?: boolean };\n\nexport interface IResolvedExternalUri extends IDisposable {\n\tresolved: URI;\n}\n\nexport interface IOpener {\n\topen(resource: URI | string, options?: OpenInternalOptions | OpenExternalOptions): Promise<boolean>;\n}\n\nexport interface IExternalOpener {\n\topenExternal(href: string, ctx: { sourceUri: URI; preferredOpenerId?: string }, token: CancellationToken): Promise<boolean>;\n\tdispose?(): void;\n}\n\nexport interface IValidator {\n\tshouldOpen(resource: URI | string, openOptions?: OpenOptions): Promise<boolean>;\n}\n\nexport interface IExternalUriResolver {\n\tresolveExternalUri(resource: URI, options?: OpenOptions): Promise<{ resolved: URI; dispose(): void } | undefined>;\n}\n\nexport interface IOpenerService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Register a participant that can handle the open() call.\n\t */\n\tregisterOpener(opener: IOpener): IDisposable;\n\n\t/**\n\t * Register a participant that can validate if the URI resource be opened.\n\t * Validators are run before openers.\n\t */\n\tregisterValidator(validator: IValidator): IDisposable;\n\n\t/**\n\t * Register a participant that can resolve an external URI resource to be opened.\n\t */\n\tregisterExternalUriResolver(resolver: IExternalUriResolver): IDisposable;\n\n\t/**\n\t * Sets the handler for opening externally. If not provided,\n\t * a default handler will be used.\n\t */\n\tsetDefaultExternalOpener(opener: IExternalOpener): void;\n\n\t/**\n\t * Registers a new opener external resources openers.\n\t */\n\tregisterExternalOpener(opener: IExternalOpener): IDisposable;\n\n\t/**\n\t * Opens a resource, like a webaddress, a document uri, or executes command.\n\t *\n\t * @param resource A resource\n\t * @return A promise that resolves when the opening is done.\n\t */\n\topen(resource: URI | string, options?: OpenInternalOptions | OpenExternalOptions): Promise<boolean>;\n\n\t/**\n\t * Resolve a resource to its external form.\n\t * @throws whenever resolvers couldn't resolve this resource externally.\n\t */\n\tresolveExternalUri(resource: URI, options?: ResolveExternalUriOptions): Promise<IResolvedExternalUri>;\n}\n\n/**\n * Encodes selection into the `URI`.\n *\n * IMPORTANT: you MUST use `extractSelection` to separate the selection\n * again from the original `URI` before passing the `URI` into any\n * component that is not aware of selections.\n */\nexport function withSelection(uri: URI, selection: ITextEditorSelection): URI {\n\treturn uri.with({ fragment: `${selection.startLineNumber},${selection.startColumn}${selection.endLineNumber ? `-${selection.endLineNumber}${selection.endColumn ? `,${selection.endColumn}` : ''}` : ''}` });\n}\n\n/**\n * file:///some/file.js#73\n * file:///some/file.js#L73\n * file:///some/file.js#73,84\n * file:///some/file.js#L73,84\n * file:///some/file.js#73-83\n * file:///some/file.js#L73-L83\n * file:///some/file.js#73,84-83,52\n * file:///some/file.js#L73,84-L83,52\n */\nexport function extractSelection(uri: URI): { selection: ITextEditorSelection | undefined; uri: URI } {\n\tlet selection: ITextEditorSelection | undefined = undefined;\n\tconst match = /^L?(\\d+)(?:,(\\d+))?(-L?(\\d+)(?:,(\\d+))?)?/.exec(uri.fragment);\n\tif (match) {\n\t\tselection = {\n\t\t\tstartLineNumber: parseInt(match[1]),\n\t\t\tstartColumn: match[2] ? parseInt(match[2]) : 1,\n\t\t\tendLineNumber: match[4] ? parseInt(match[4]) : undefined,\n\t\t\tendColumn: match[4] ? (match[5] ? parseInt(match[5]) : 1) : undefined\n\t\t};\n\t\turi = uri.with({ fragment: '' });\n\t}\n\treturn { selection, uri };\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AACpB,SAAS,gBAAgB,4BAA4B;AACrD,SAAS,uBAAuB;AAEzB,MAAM,iBAAiB,gBAAgC,eAAe;AAkHtE,SAAS,cAAc,KAAU,WAAsC;AAC7E,SAAO,IAAI,KAAK,EAAE,UAAU,GAAG,UAAU,eAAe,IAAI,UAAU,WAAW,GAAG,UAAU,gBAAgB,IAAI,UAAU,aAAa,GAAG,UAAU,YAAY,IAAI,UAAU,SAAS,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC;AAC5M;AAFgB;AAcT,SAAS,iBAAiB,KAAqE;AACrG,MAAI,YAA8C;AAClD,QAAM,QAAQ,4CAA4C,KAAK,IAAI,QAAQ;AAC3E,MAAI,OAAO;AACV,gBAAY;AAAA,MACX,iBAAiB,SAAS,MAAM,CAAC,CAAC;AAAA,MAClC,aAAa,MAAM,CAAC,IAAI,SAAS,MAAM,CAAC,CAAC,IAAI;AAAA,MAC7C,eAAe,MAAM,CAAC,IAAI,SAAS,MAAM,CAAC,CAAC,IAAI;AAAA,MAC/C,WAAW,MAAM,CAAC,IAAK,MAAM,CAAC,IAAI,SAAS,MAAM,CAAC,CAAC,IAAI,IAAK;AAAA,IAC7D;AACA,UAAM,IAAI,KAAK,EAAE,UAAU,GAAG,CAAC;AAAA,EAChC;AACA,SAAO,EAAE,WAAW,IAAI;AACzB;AAbgB;",
  "names": []
}
