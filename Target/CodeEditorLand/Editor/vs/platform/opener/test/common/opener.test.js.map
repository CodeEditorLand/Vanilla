{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/opener/test/common/opener.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../base/common/uri.js';\nimport { extractSelection, withSelection } from '../../common/opener.js';\n\nsuite('extractSelection', () => {\n\n\ttest('extractSelection with only startLineNumber', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: undefined, endColumn: undefined });\n\t});\n\n\ttest('extractSelection with only startLineNumber in L format', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: undefined, endColumn: undefined });\n\t});\n\n\ttest('extractSelection with startLineNumber and startColumn', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73,84');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 84, endLineNumber: undefined, endColumn: undefined });\n\t});\n\n\ttest('extractSelection with startLineNumber and startColumn in L format', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73,84');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 84, endLineNumber: undefined, endColumn: undefined });\n\t});\n\n\ttest('extractSelection with range and no column number', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73-83');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: 83, endColumn: 1 });\n\t});\n\n\ttest('extractSelection with range and no column number in L format', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73-L83');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: 83, endColumn: 1 });\n\t});\n\n\ttest('extractSelection with range and no column number in L format only for start', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73-83');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: 83, endColumn: 1 });\n\t});\n\n\ttest('extractSelection with range and no column number in L format only for end', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73-L83');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: 83, endColumn: 1 });\n\t});\n\n\ttest('extractSelection with complete range', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73,84-83,52');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 84, endLineNumber: 83, endColumn: 52 });\n\t});\n\n\ttest('extractSelection with complete range in L format', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73,84-L83,52');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 84, endLineNumber: 83, endColumn: 52 });\n\t});\n\n\ttest('withSelection with startLineNumber and startColumn', async () => {\n\t\tassert.deepStrictEqual(withSelection(URI.parse('file:///some/file.js'), { startLineNumber: 73, startColumn: 84 }).toString(), 'file:///some/file.js#73%2C84');\n\t});\n\n\ttest('withSelection with startLineNumber, startColumn and endLineNumber', async () => {\n\t\tassert.deepStrictEqual(withSelection(URI.parse('file:///some/file.js'), { startLineNumber: 73, startColumn: 84, endLineNumber: 83 }).toString(), 'file:///some/file.js#73%2C84-83');\n\t});\n\n\ttest('withSelection with startLineNumber, startColumn and endLineNumber, endColumn', async () => {\n\t\tassert.deepStrictEqual(withSelection(URI.parse('file:///some/file.js'), { startLineNumber: 73, startColumn: 84, endLineNumber: 83, endColumn: 52 }).toString(), 'file:///some/file.js#73%2C84-83%2C52');\n\t});\n\n\ttest('extractSelection returns original withSelection URI', async () => {\n\t\tlet uri = URI.parse('file:///some/file.js');\n\n\t\tconst uriWithSelection = withSelection(URI.parse('file:///some/file.js'), { startLineNumber: 73, startColumn: 84, endLineNumber: 83, endColumn: 52 });\n\t\tassert.strictEqual(uri.toString(), extractSelection(uriWithSelection).uri.toString());\n\n\t\turi = URI.parse('file:///some/file.js');\n\t\tassert.strictEqual(uri.toString(), extractSelection(uri).uri.toString());\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
