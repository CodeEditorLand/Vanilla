import s from"assert";import{DeferredPromise as p}from"../../../../base/common/async.js";import{URI as f}from"../../../../base/common/uri.js";import{mock as y}from"../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as C}from"../../../../base/test/common/utils.js";import{IConfigurationService as v}from"../../../configuration/common/configuration.js";import{TestConfigurationService as d}from"../../../configuration/test/common/testConfigurationService.js";import{ContextKeyService as i,setContext as S}from"../../browser/contextKeyService.js";import{ContextKeyExpr as h,IContextKeyService as K}from"../../common/contextkey.js";import{ServiceCollection as w}from"../../../instantiation/common/serviceCollection.js";import{TestInstantiationService as x}from"../../../instantiation/test/common/instantiationServiceMock.js";import{ITelemetryService as g}from"../../../telemetry/common/telemetry.js";suite("ContextKeyService",()=>{const n=C();test("updateParent",()=>{const e=n.add(new i(new d)),t=n.add(e.createScoped(document.createElement("div"))),o=n.add(e.createScoped(document.createElement("div"))),r=n.add(t.createScoped(document.createElement("div")));t.createKey("testA",1),t.createKey("testB",2),t.createKey("testD",0),o.createKey("testA",3),o.createKey("testC",4),o.createKey("testD",0);let a,l;const m=new Promise((c,u)=>{a=c,l=u});return n.add(r.onDidChangeContext(c=>{try{s.ok(c.affectsSome(new Set(["testA"])),"testA changed"),s.ok(c.affectsSome(new Set(["testB"])),"testB changed"),s.ok(c.affectsSome(new Set(["testC"])),"testC changed"),s.ok(!c.affectsSome(new Set(["testD"])),"testD did not change"),s.strictEqual(r.getContextKeyValue("testA"),3),s.strictEqual(r.getContextKeyValue("testB"),void 0),s.strictEqual(r.getContextKeyValue("testC"),4),s.strictEqual(r.getContextKeyValue("testD"),0)}catch(u){l(u);return}a()})),r.updateParent(o),m}),test("updateParent to same service",()=>{const e=n.add(new i(new d)),t=n.add(e.createScoped(document.createElement("div"))),o=n.add(t.createScoped(document.createElement("div")));t.createKey("testA",1),t.createKey("testB",2),t.createKey("testD",0);let r=!1;n.add(o.onDidChangeContext(a=>{r=!0})),o.updateParent(t),s.strictEqual(r,!1)}),test("issue #147732: URIs as context values",()=>{const e=new d,t=n.add(new i(e)),o=n.add(new x(new w([v,e],[K,t],[g,new class extends y(){async publicLog2(){}}]))),r=f.parse("test://abc");t.createKey("notebookCellResource",void 0).set(r.toString()),o.invokeFunction(S,"jupyter.runByLineCells",JSON.parse(JSON.stringify([r])));const a=h.in("notebookCellResource","jupyter.runByLineCells");s.deepStrictEqual(t.contextMatchesRules(a),!0)}),test("suppress update event from parent when one key is overridden by child",()=>{const e=n.add(new i(new d)),t=n.add(e.createScoped(document.createElement("div")));e.createKey("testA",1),t.createKey("testA",4);let o=!1;const r=n.add(t.onDidChangeContext(a=>o=!0));e.setContext("testA",10),s.strictEqual(o,!1,"Should not fire event when overridden key is updated in parent"),r.dispose()}),test("suppress update event from parent when all keys are overridden by child",()=>{const e=n.add(new i(new d)),t=n.add(e.createScoped(document.createElement("div")));e.createKey("testA",1),e.createKey("testB",2),e.createKey("testC",3),t.createKey("testA",4),t.createKey("testB",5),t.createKey("testD",6);let o=!1;const r=n.add(t.onDidChangeContext(a=>o=!0));e.bufferChangeEvents(()=>{e.setContext("testA",10),e.setContext("testB",20),e.setContext("testD",30)}),s.strictEqual(o,!1,"Should not fire event when overridden key is updated in parent"),r.dispose()}),test("pass through update event from parent when one key is not overridden by child",()=>{const e=n.add(new i(new d)),t=n.add(e.createScoped(document.createElement("div")));e.createKey("testA",1),e.createKey("testB",2),e.createKey("testC",3),t.createKey("testA",4),t.createKey("testB",5),t.createKey("testD",6);const o=new p;return n.add(t.onDidChangeContext(r=>{try{s.ok(r.affectsSome(new Set(["testA"])),"testA changed"),s.ok(r.affectsSome(new Set(["testB"])),"testB changed"),s.ok(r.affectsSome(new Set(["testC"])),"testC changed")}catch(a){o.error(a);return}o.complete(void 0)})),e.bufferChangeEvents(()=>{e.setContext("testA",10),e.setContext("testB",20),e.setContext("testC",30)}),o.p})});
