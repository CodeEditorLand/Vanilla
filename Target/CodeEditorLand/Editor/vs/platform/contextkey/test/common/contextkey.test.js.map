{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/contextkey/test/common/contextkey.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { isLinux, isMacintosh, isWindows } from '../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ContextKeyExpr, ContextKeyExpression, implies } from '../../common/contextkey.js';\n\nfunction createContext(ctx: any) {\n\treturn {\n\t\tgetValue: (key: string) => {\n\t\t\treturn ctx[key];\n\t\t}\n\t};\n}\n\nsuite('ContextKeyExpr', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('ContextKeyExpr.equals', () => {\n\t\tconst a = ContextKeyExpr.and(\n\t\t\tContextKeyExpr.has('a1'),\n\t\t\tContextKeyExpr.and(ContextKeyExpr.has('and.a')),\n\t\t\tContextKeyExpr.has('a2'),\n\t\t\tContextKeyExpr.regex('d3', /d.*/),\n\t\t\tContextKeyExpr.regex('d4', /\\*\\*3*/),\n\t\t\tContextKeyExpr.equals('b1', 'bb1'),\n\t\t\tContextKeyExpr.equals('b2', 'bb2'),\n\t\t\tContextKeyExpr.notEquals('c1', 'cc1'),\n\t\t\tContextKeyExpr.notEquals('c2', 'cc2'),\n\t\t\tContextKeyExpr.not('d1'),\n\t\t\tContextKeyExpr.not('d2')\n\t\t)!;\n\t\tconst b = ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals('b2', 'bb2'),\n\t\t\tContextKeyExpr.notEquals('c1', 'cc1'),\n\t\t\tContextKeyExpr.not('d1'),\n\t\t\tContextKeyExpr.regex('d4', /\\*\\*3*/),\n\t\t\tContextKeyExpr.notEquals('c2', 'cc2'),\n\t\t\tContextKeyExpr.has('a2'),\n\t\t\tContextKeyExpr.equals('b1', 'bb1'),\n\t\t\tContextKeyExpr.regex('d3', /d.*/),\n\t\t\tContextKeyExpr.has('a1'),\n\t\t\tContextKeyExpr.and(ContextKeyExpr.equals('and.a', true)),\n\t\t\tContextKeyExpr.not('d2')\n\t\t)!;\n\t\tassert(a.equals(b), 'expressions should be equal');\n\t});\n\n\ttest('issue #134942: Equals in comparator expressions', () => {\n\t\tfunction testEquals(expr: ContextKeyExpression | undefined, str: string): void {\n\t\t\tconst deserialized = ContextKeyExpr.deserialize(str);\n\t\t\tassert.ok(expr);\n\t\t\tassert.ok(deserialized);\n\t\t\tassert.strictEqual(expr.equals(deserialized), true, str);\n\t\t}\n\t\ttestEquals(ContextKeyExpr.greater('value', 0), 'value > 0');\n\t\ttestEquals(ContextKeyExpr.greaterEquals('value', 0), 'value >= 0');\n\t\ttestEquals(ContextKeyExpr.smaller('value', 0), 'value < 0');\n\t\ttestEquals(ContextKeyExpr.smallerEquals('value', 0), 'value <= 0');\n\t});\n\n\ttest('normalize', () => {\n\t\tconst key1IsTrue = ContextKeyExpr.equals('key1', true);\n\t\tconst key1IsNotFalse = ContextKeyExpr.notEquals('key1', false);\n\t\tconst key1IsFalse = ContextKeyExpr.equals('key1', false);\n\t\tconst key1IsNotTrue = ContextKeyExpr.notEquals('key1', true);\n\n\t\tassert.ok(key1IsTrue.equals(ContextKeyExpr.has('key1')));\n\t\tassert.ok(key1IsNotFalse.equals(ContextKeyExpr.has('key1')));\n\t\tassert.ok(key1IsFalse.equals(ContextKeyExpr.not('key1')));\n\t\tassert.ok(key1IsNotTrue.equals(ContextKeyExpr.not('key1')));\n\t});\n\n\ttest('evaluate', () => {\n\t\tconst context = createContext({\n\t\t\t'a': true,\n\t\t\t'b': false,\n\t\t\t'c': '5',\n\t\t\t'd': 'd'\n\t\t});\n\t\tfunction testExpression(expr: string, expected: boolean): void {\n\t\t\t// console.log(expr + ' ' + expected);\n\t\t\tconst rules = ContextKeyExpr.deserialize(expr);\n\t\t\tassert.strictEqual(rules!.evaluate(context), expected, expr);\n\t\t}\n\t\tfunction testBatch(expr: string, value: any): void {\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\ttestExpression(expr, !!value);\n\t\t\ttestExpression(expr + ' == true', !!value);\n\t\t\ttestExpression(expr + ' != true', !value);\n\t\t\ttestExpression(expr + ' == false', !value);\n\t\t\ttestExpression(expr + ' != false', !!value);\n\t\t\ttestExpression(expr + ' == 5', value == <any>'5');\n\t\t\ttestExpression(expr + ' != 5', value != <any>'5');\n\t\t\ttestExpression('!' + expr, !value);\n\t\t\ttestExpression(expr + ' =~ /d.*/', /d.*/.test(value));\n\t\t\ttestExpression(expr + ' =~ /D/i', /D/i.test(value));\n\t\t\t/* eslint-enable eqeqeq */\n\t\t}\n\n\t\ttestBatch('a', true);\n\t\ttestBatch('b', false);\n\t\ttestBatch('c', '5');\n\t\ttestBatch('d', 'd');\n\t\ttestBatch('z', undefined);\n\n\t\ttestExpression('true', true);\n\t\ttestExpression('false', false);\n\t\ttestExpression('a && !b', true && !false);\n\t\ttestExpression('a && b', true && false);\n\t\ttestExpression('a && !b && c == 5', true && !false && '5' === '5');\n\t\ttestExpression('d =~ /e.*/', false);\n\n\t\t// precedence test: false && true || true === true because && is evaluated first\n\t\ttestExpression('b && a || a', true);\n\n\t\ttestExpression('a || b', true);\n\t\ttestExpression('b || b', false);\n\t\ttestExpression('b && a || a && b', false);\n\t});\n\n\ttest('negate', () => {\n\t\tfunction testNegate(expr: string, expected: string): void {\n\t\t\tconst actual = ContextKeyExpr.deserialize(expr)!.negate().serialize();\n\t\t\tassert.strictEqual(actual, expected);\n\t\t}\n\t\ttestNegate('true', 'false');\n\t\ttestNegate('false', 'true');\n\t\ttestNegate('a', '!a');\n\t\ttestNegate('a && b || c', '!a && !c || !b && !c');\n\t\ttestNegate('a && b || c || d', '!a && !c && !d || !b && !c && !d');\n\t\ttestNegate('!a && !b || !c && !d', 'a && c || a && d || b && c || b && d');\n\t\ttestNegate('!a && !b || !c && !d || !e && !f', 'a && c && e || a && c && f || a && d && e || a && d && f || b && c && e || b && c && f || b && d && e || b && d && f');\n\t});\n\n\ttest('false, true', () => {\n\t\tfunction testNormalize(expr: string, expected: string): void {\n\t\t\tconst actual = ContextKeyExpr.deserialize(expr)!.serialize();\n\t\t\tassert.strictEqual(actual, expected);\n\t\t}\n\t\ttestNormalize('true', 'true');\n\t\ttestNormalize('!true', 'false');\n\t\ttestNormalize('false', 'false');\n\t\ttestNormalize('!false', 'true');\n\t\ttestNormalize('a && true', 'a');\n\t\ttestNormalize('a && false', 'false');\n\t\ttestNormalize('a || true', 'true');\n\t\ttestNormalize('a || false', 'a');\n\t\ttestNormalize('isMac', isMacintosh ? 'true' : 'false');\n\t\ttestNormalize('isLinux', isLinux ? 'true' : 'false');\n\t\ttestNormalize('isWindows', isWindows ? 'true' : 'false');\n\t});\n\n\ttest('issue #101015: distribute OR', () => {\n\t\tfunction t(expr1: string, expr2: string, expected: string | undefined): void {\n\t\t\tconst e1 = ContextKeyExpr.deserialize(expr1);\n\t\t\tconst e2 = ContextKeyExpr.deserialize(expr2);\n\t\t\tconst actual = ContextKeyExpr.and(e1, e2)?.serialize();\n\t\t\tassert.strictEqual(actual, expected);\n\t\t}\n\t\tt('a', 'b', 'a && b');\n\t\tt('a || b', 'c', 'a && c || b && c');\n\t\tt('a || b', 'c || d', 'a && c || a && d || b && c || b && d');\n\t\tt('a || b', 'c && d', 'a && c && d || b && c && d');\n\t\tt('a || b', 'c && d || e', 'a && e || b && e || a && c && d || b && c && d');\n\t});\n\n\ttest('ContextKeyInExpr', () => {\n\t\tconst ainb = ContextKeyExpr.deserialize('a in b')!;\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 3, 'b': [3, 2, 1] })), true);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 3, 'b': [1, 2, 3] })), true);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 3, 'b': [1, 2] })), false);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 3 })), false);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 3, 'b': null })), false);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 'x', 'b': ['x'] })), true);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 'x', 'b': ['y'] })), false);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 'x', 'b': {} })), false);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 'x', 'b': { 'x': false } })), true);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 'x', 'b': { 'x': true } })), true);\n\t\tassert.strictEqual(ainb.evaluate(createContext({ 'a': 'prototype', 'b': {} })), false);\n\t});\n\n\ttest('ContextKeyNotInExpr', () => {\n\t\tconst aNotInB = ContextKeyExpr.deserialize('a not in b')!;\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 3, 'b': [3, 2, 1] })), false);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 3, 'b': [1, 2, 3] })), false);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 3, 'b': [1, 2] })), true);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 3 })), true);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 3, 'b': null })), true);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 'x', 'b': ['x'] })), false);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 'x', 'b': ['y'] })), true);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 'x', 'b': {} })), true);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 'x', 'b': { 'x': false } })), false);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 'x', 'b': { 'x': true } })), false);\n\t\tassert.strictEqual(aNotInB.evaluate(createContext({ 'a': 'prototype', 'b': {} })), true);\n\t});\n\n\ttest('issue #106524: distributing AND should normalize', () => {\n\t\tconst actual = ContextKeyExpr.and(\n\t\t\tContextKeyExpr.or(\n\t\t\t\tContextKeyExpr.has('a'),\n\t\t\t\tContextKeyExpr.has('b')\n\t\t\t),\n\t\t\tContextKeyExpr.has('c')\n\t\t);\n\t\tconst expected = ContextKeyExpr.or(\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.has('a'),\n\t\t\t\tContextKeyExpr.has('c')\n\t\t\t),\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.has('b'),\n\t\t\t\tContextKeyExpr.has('c')\n\t\t\t)\n\t\t);\n\t\tassert.strictEqual(actual!.equals(expected!), true);\n\t});\n\n\ttest('issue #129625: Removes duplicated terms in OR expressions', () => {\n\t\tconst expr = ContextKeyExpr.or(\n\t\t\tContextKeyExpr.has('A'),\n\t\t\tContextKeyExpr.has('B'),\n\t\t\tContextKeyExpr.has('A')\n\t\t)!;\n\t\tassert.strictEqual(expr.serialize(), 'A || B');\n\t});\n\n\ttest('Resolves true constant OR expressions', () => {\n\t\tconst expr = ContextKeyExpr.or(\n\t\t\tContextKeyExpr.has('A'),\n\t\t\tContextKeyExpr.not('A')\n\t\t)!;\n\t\tassert.strictEqual(expr.serialize(), 'true');\n\t});\n\n\ttest('Resolves false constant AND expressions', () => {\n\t\tconst expr = ContextKeyExpr.and(\n\t\t\tContextKeyExpr.has('A'),\n\t\t\tContextKeyExpr.not('A')\n\t\t)!;\n\t\tassert.strictEqual(expr.serialize(), 'false');\n\t});\n\n\ttest('issue #129625: Removes duplicated terms in AND expressions', () => {\n\t\tconst expr = ContextKeyExpr.and(\n\t\t\tContextKeyExpr.has('A'),\n\t\t\tContextKeyExpr.has('B'),\n\t\t\tContextKeyExpr.has('A')\n\t\t)!;\n\t\tassert.strictEqual(expr.serialize(), 'A && B');\n\t});\n\n\ttest('issue #129625: Remove duplicated terms when negating', () => {\n\t\tconst expr = ContextKeyExpr.and(\n\t\t\tContextKeyExpr.has('A'),\n\t\t\tContextKeyExpr.or(\n\t\t\t\tContextKeyExpr.has('B1'),\n\t\t\t\tContextKeyExpr.has('B2'),\n\t\t\t)\n\t\t)!;\n\t\tassert.strictEqual(expr.serialize(), 'A && B1 || A && B2');\n\t\tassert.strictEqual(expr.negate()!.serialize(), '!A || !A && !B1 || !A && !B2 || !B1 && !B2');\n\t\tassert.strictEqual(expr.negate()!.negate()!.serialize(), 'A && B1 || A && B2');\n\t\tassert.strictEqual(expr.negate()!.negate()!.negate()!.serialize(), '!A || !A && !B1 || !A && !B2 || !B1 && !B2');\n\t});\n\n\ttest('issue #129625: remove redundant terms in OR expressions', () => {\n\t\tfunction strImplies(p0: string, q0: string): boolean {\n\t\t\tconst p = ContextKeyExpr.deserialize(p0)!;\n\t\t\tconst q = ContextKeyExpr.deserialize(q0)!;\n\t\t\treturn implies(p, q);\n\t\t}\n\t\tassert.strictEqual(strImplies('a && b', 'a'), true);\n\t\tassert.strictEqual(strImplies('a', 'a && b'), false);\n\t});\n\n\ttest('implies', () => {\n\t\tfunction strImplies(p0: string, q0: string): boolean {\n\t\t\tconst p = ContextKeyExpr.deserialize(p0)!;\n\t\t\tconst q = ContextKeyExpr.deserialize(q0)!;\n\t\t\treturn implies(p, q);\n\t\t}\n\t\tassert.strictEqual(strImplies('a', 'a'), true);\n\t\tassert.strictEqual(strImplies('a', 'a || b'), true);\n\t\tassert.strictEqual(strImplies('a', 'a && b'), false);\n\t\tassert.strictEqual(strImplies('a', 'a && b || a && c'), false);\n\t\tassert.strictEqual(strImplies('a && b', 'a'), true);\n\t\tassert.strictEqual(strImplies('a && b', 'b'), true);\n\t\tassert.strictEqual(strImplies('a && b', 'a && b || c'), true);\n\t\tassert.strictEqual(strImplies('a || b', 'a || c'), false);\n\t\tassert.strictEqual(strImplies('a || b', 'a || b'), true);\n\t\tassert.strictEqual(strImplies('a && b', 'a && b'), true);\n\t\tassert.strictEqual(strImplies('a || b', 'a || b || c'), true);\n\t\tassert.strictEqual(strImplies('c && a && b', 'c && a'), true);\n\t});\n\n\ttest('Greater, GreaterEquals, Smaller, SmallerEquals evaluate', () => {\n\t\tfunction checkEvaluate(expr: string, ctx: any, expected: any): void {\n\t\t\tconst _expr = ContextKeyExpr.deserialize(expr)!;\n\t\t\tassert.strictEqual(_expr.evaluate(createContext(ctx)), expected);\n\t\t}\n\n\t\tcheckEvaluate('a > 1', {}, false);\n\t\tcheckEvaluate('a > 1', { a: 0 }, false);\n\t\tcheckEvaluate('a > 1', { a: 1 }, false);\n\t\tcheckEvaluate('a > 1', { a: 2 }, true);\n\t\tcheckEvaluate('a > 1', { a: '0' }, false);\n\t\tcheckEvaluate('a > 1', { a: '1' }, false);\n\t\tcheckEvaluate('a > 1', { a: '2' }, true);\n\t\tcheckEvaluate('a > 1', { a: 'a' }, false);\n\n\t\tcheckEvaluate('a > 10', { a: 2 }, false);\n\t\tcheckEvaluate('a > 10', { a: 11 }, true);\n\t\tcheckEvaluate('a > 10', { a: '11' }, true);\n\t\tcheckEvaluate('a > 10', { a: '2' }, false);\n\t\tcheckEvaluate('a > 10', { a: '11' }, true);\n\n\t\tcheckEvaluate('a > 1.1', { a: 1 }, false);\n\t\tcheckEvaluate('a > 1.1', { a: 2 }, true);\n\t\tcheckEvaluate('a > 1.1', { a: 11 }, true);\n\t\tcheckEvaluate('a > 1.1', { a: '1.1' }, false);\n\t\tcheckEvaluate('a > 1.1', { a: '2' }, true);\n\t\tcheckEvaluate('a > 1.1', { a: '11' }, true);\n\n\t\tcheckEvaluate('a > b', { a: 'b' }, false);\n\t\tcheckEvaluate('a > b', { a: 'c' }, false);\n\t\tcheckEvaluate('a > b', { a: 1000 }, false);\n\n\t\tcheckEvaluate('a >= 2', { a: '1' }, false);\n\t\tcheckEvaluate('a >= 2', { a: '2' }, true);\n\t\tcheckEvaluate('a >= 2', { a: '3' }, true);\n\n\t\tcheckEvaluate('a < 2', { a: '1' }, true);\n\t\tcheckEvaluate('a < 2', { a: '2' }, false);\n\t\tcheckEvaluate('a < 2', { a: '3' }, false);\n\n\t\tcheckEvaluate('a <= 2', { a: '1' }, true);\n\t\tcheckEvaluate('a <= 2', { a: '2' }, true);\n\t\tcheckEvaluate('a <= 2', { a: '3' }, false);\n\t});\n\n\ttest('Greater, GreaterEquals, Smaller, SmallerEquals negate', () => {\n\t\tfunction checkNegate(expr: string, expected: string): void {\n\t\t\tconst a = ContextKeyExpr.deserialize(expr)!;\n\t\t\tconst b = a.negate();\n\t\t\tassert.strictEqual(b.serialize(), expected);\n\t\t}\n\n\t\tcheckNegate('a > 1', 'a <= 1');\n\t\tcheckNegate('a > 1.1', 'a <= 1.1');\n\t\tcheckNegate('a > b', 'a <= b');\n\n\t\tcheckNegate('a >= 1', 'a < 1');\n\t\tcheckNegate('a >= 1.1', 'a < 1.1');\n\t\tcheckNegate('a >= b', 'a < b');\n\n\t\tcheckNegate('a < 1', 'a >= 1');\n\t\tcheckNegate('a < 1.1', 'a >= 1.1');\n\t\tcheckNegate('a < b', 'a >= b');\n\n\t\tcheckNegate('a <= 1', 'a > 1');\n\t\tcheckNegate('a <= 1.1', 'a > 1.1');\n\t\tcheckNegate('a <= b', 'a > b');\n\t});\n\n\ttest('issue #111899: context keys can use `<` or `>` ', () => {\n\t\tconst actual = ContextKeyExpr.deserialize('editorTextFocus && vim.active && vim.use<C-r>')!;\n\t\tassert.ok(actual.equals(\n\t\t\tContextKeyExpr.and(\n\t\t\t\tContextKeyExpr.has('editorTextFocus'),\n\t\t\t\tContextKeyExpr.has('vim.active'),\n\t\t\t\tContextKeyExpr.has('vim.use<C-r>'),\n\t\t\t)!\n\t\t));\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
