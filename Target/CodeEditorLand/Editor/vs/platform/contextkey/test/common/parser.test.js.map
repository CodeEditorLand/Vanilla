{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/contextkey/test/common/parser.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { Parser } from '../../common/contextkey.js';\n\nfunction parseToStr(input: string): string {\n\tconst parser = new Parser();\n\n\tconst prints: string[] = [];\n\n\tconst print = (...ss: string[]) => { ss.forEach(s => prints.push(s)); };\n\n\tconst expr = parser.parse(input);\n\tif (expr === undefined) {\n\t\tif (parser.lexingErrors.length > 0) {\n\t\t\tprint('Lexing errors:', '\\n\\n');\n\t\t\tparser.lexingErrors.forEach(lexingError => print(`Unexpected token '${lexingError.lexeme}' at offset ${lexingError.offset}. ${lexingError.additionalInfo}`, '\\n'));\n\t\t}\n\n\t\tif (parser.parsingErrors.length > 0) {\n\t\t\tif (parser.lexingErrors.length > 0) { print('\\n --- \\n'); }\n\t\t\tprint('Parsing errors:', '\\n\\n');\n\t\t\tparser.parsingErrors.forEach(parsingError => print(`Unexpected '${parsingError.lexeme}' at offset ${parsingError.offset}.`, '\\n'));\n\t\t}\n\n\t} else {\n\t\tprint(expr.serialize());\n\t}\n\n\treturn prints.join('');\n}\n\nsuite('Context Key Parser', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest(' foo', () => {\n\t\tconst input = ' foo';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo\");\n\t});\n\n\ttest('!foo', () => {\n\t\tconst input = '!foo';\n\t\tassert.deepStrictEqual(parseToStr(input), \"!foo\");\n\t});\n\n\ttest('foo =~ /bar/', () => {\n\t\tconst input = 'foo =~ /bar/';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo =~ /bar/\");\n\t});\n\n\ttest(`foo || (foo =~ /bar/ && baz)`, () => {\n\t\tconst input = `foo || (foo =~ /bar/ && baz)`;\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo || baz && foo =~ /bar/\");\n\t});\n\n\ttest('foo || (foo =~ /bar/ || baz)', () => {\n\t\tconst input = 'foo || (foo =~ /bar/ || baz)';\n\t\tassert.deepStrictEqual(parseToStr(input), \"baz || foo || foo =~ /bar/\");\n\t});\n\n\ttest(`(foo || bar) && (jee || jar)`, () => {\n\t\tconst input = `(foo || bar) && (jee || jar)`;\n\t\tassert.deepStrictEqual(parseToStr(input), \"bar && jar || bar && jee || foo && jar || foo && jee\");\n\t});\n\n\ttest('foo && foo =~ /zee/i', () => {\n\t\tconst input = 'foo && foo =~ /zee/i';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo && foo =~ /zee/i\");\n\t});\n\n\ttest('foo.bar==enabled', () => {\n\t\tconst input = 'foo.bar==enabled';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo.bar == 'enabled'\");\n\t});\n\n\ttest(`foo.bar == 'enabled'`, () => {\n\t\tconst input = `foo.bar == 'enabled'`;\n\t\tassert.deepStrictEqual(parseToStr(input), `foo.bar == 'enabled'`);\n\t});\n\n\ttest('foo.bar:zed==completed - equality with no space', () => {\n\t\tconst input = 'foo.bar:zed==completed';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo.bar:zed == 'completed'\");\n\t});\n\n\ttest('a && b || c', () => {\n\t\tconst input = 'a && b || c';\n\t\tassert.deepStrictEqual(parseToStr(input), \"c || a && b\");\n\t});\n\n\ttest('fooBar && baz.jar && fee.bee<K-loo+1>', () => {\n\t\tconst input = 'fooBar && baz.jar && fee.bee<K-loo+1>';\n\t\tassert.deepStrictEqual(parseToStr(input), \"baz.jar && fee.bee<K-loo+1> && fooBar\");\n\t});\n\n\ttest('foo.barBaz<C-r> < 2', () => {\n\t\tconst input = 'foo.barBaz<C-r> < 2';\n\t\tassert.deepStrictEqual(parseToStr(input), `foo.barBaz<C-r> < 2`);\n\t});\n\n\ttest('foo.bar >= -1', () => {\n\t\tconst input = 'foo.bar >= -1';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo.bar >= -1\");\n\t});\n\n\ttest(`key contains &nbsp: view == vsc-packages-activitybar-folders\u00A0&& vsc-packages-folders-loaded`, () => {\n\t\tconst input = `view == vsc-packages-activitybar-folders\u00A0&& vsc-packages-folders-loaded`;\n\t\tassert.deepStrictEqual(parseToStr(input), \"vsc-packages-folders-loaded && view == 'vsc-packages-activitybar-folders'\");\n\t});\n\n\ttest('foo.bar <= -1', () => {\n\t\tconst input = 'foo.bar <= -1';\n\t\tassert.deepStrictEqual(parseToStr(input), `foo.bar <= -1`);\n\t});\n\n\ttest('!cmake:hideBuildCommand \\u0026\\u0026 cmake:enableFullFeatureSet', () => {\n\t\tconst input = '!cmake:hideBuildCommand \\u0026\\u0026 cmake:enableFullFeatureSet';\n\t\tassert.deepStrictEqual(parseToStr(input), \"cmake:enableFullFeatureSet && !cmake:hideBuildCommand\");\n\t});\n\n\ttest('!(foo && bar)', () => {\n\t\tconst input = '!(foo && bar)';\n\t\tassert.deepStrictEqual(parseToStr(input), \"!bar || !foo\");\n\t});\n\n\ttest('!(foo && bar || boar) || deer', () => {\n\t\tconst input = '!(foo && bar || boar) || deer';\n\t\tassert.deepStrictEqual(parseToStr(input), \"deer || !bar && !boar || !boar && !foo\");\n\t});\n\n\ttest(`!(!foo)`, () => {\n\t\tconst input = `!(!foo)`;\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo\");\n\t});\n\n\tsuite('controversial', () => {\n\t\t/*\n\t\t\tnew parser KEEPS old one's behavior:\n\n\t\t\told parser output: { key: 'debugState', op: '==', value: '\"stopped\"' }\n\t\t\tnew parser output: { key: 'debugState', op: '==', value: '\"stopped\"' }\n\n\t\t\tTODO@ulugbekna: we should consider breaking old parser's behavior, and not take double quotes as part of the `value` because that's not what user expects.\n\t\t*/\n\t\ttest(`debugState == \"stopped\"`, () => {\n\t\t\tconst input = `debugState == \"stopped\"`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"debugState == '\\\"stopped\\\"'\");\n\t\t});\n\n\t\t/*\n\t\t\tnew parser BREAKS old one's behavior:\n\n\t\t\told parser output: { key: 'viewItem', op: '==', value: 'VSCode WorkSpace' }\n\t\t\tnew parser output: { key: 'viewItem', op: '==', value: 'VSCode' }\n\n\t\t\tTODO@ulugbekna: since this's breaking, we can have hacky code that tries detecting such cases and replicate old parser's behavior.\n\t\t*/\n\t\ttest(` viewItem == VSCode WorkSpace`, () => {\n\t\t\tconst input = ` viewItem == VSCode WorkSpace`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected 'WorkSpace' at offset 20.\\n\");\n\t\t});\n\n\n\t});\n\n\tsuite('regex', () => {\n\n\t\ttest(`resource =~ //foo/(barr|door/(Foo-Bar%20Templates|Soo%20Looo)|Web%20Site%Jjj%20Llll)(/.*)*$/`, () => {\n\t\t\tconst input = `resource =~ //foo/(barr|door/(Foo-Bar%20Templates|Soo%20Looo)|Web%20Site%Jjj%20Llll)(/.*)*$/`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"resource =~ /\\\\/foo\\\\/(barr|door\\\\/(Foo-Bar%20Templates|Soo%20Looo)|Web%20Site%Jjj%20Llll)(\\\\/.*)*$/\");\n\t\t});\n\n\t\ttest(`resource =~ /((/scratch/(?!update)(.*)/)|((/src/).*/)).*$/`, () => {\n\t\t\tconst input = `resource =~ /((/scratch/(?!update)(.*)/)|((/src/).*/)).*$/`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"resource =~ /((\\\\/scratch\\\\/(?!update)(.*)\\\\/)|((\\\\/src\\\\/).*\\\\/)).*$/\");\n\t\t});\n\n\t\ttest(`resourcePath =~ /\\.md(\\.yml|\\.txt)*$/giym`, () => {\n\t\t\tconst input = `resourcePath =~ /\\.md(\\.yml|\\.txt)*$/giym`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"resourcePath =~ /.md(.yml|.txt)*$/im\");\n\t\t});\n\n\t});\n\n\tsuite('error handling', () => {\n\n\t\ttest(`/foo`, () => {\n\t\t\tconst input = `/foo`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Lexing errors:\\n\\nUnexpected token '/foo' at offset 0. Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\\\\\/'.\\n\\n --- \\nParsing errors:\\n\\nUnexpected '/foo' at offset 0.\\n\");\n\t\t});\n\n\t\ttest(`!b == 'true'`, () => {\n\t\t\tconst input = `!b == 'true'`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected '==' at offset 3.\\n\");\n\t\t});\n\n\t\ttest('!foo &&  in bar', () => {\n\t\t\tconst input = '!foo &&  in bar';\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected 'in' at offset 9.\\n\");\n\t\t});\n\n\t\ttest('vim<c-r> == 1 && vim<2<=3', () => {\n\t\t\tconst input = 'vim<c-r> == 1 && vim<2<=3';\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Lexing errors:\\n\\nUnexpected token '=' at offset 23. Did you mean == or =~?\\n\\n --- \\nParsing errors:\\n\\nUnexpected '=' at offset 23.\\n\"); // FIXME\n\t\t});\n\n\t\ttest(`foo && 'bar`, () => {\n\t\t\tconst input = `foo && 'bar`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Lexing errors:\\n\\nUnexpected token ''bar' at offset 7. Did you forget to open or close the quote?\\n\\n --- \\nParsing errors:\\n\\nUnexpected ''bar' at offset 7.\\n\");\n\t\t});\n\n\t\ttest(`config.foo &&  &&bar =~ /^foo$|^bar-foo$|^joo$|^jar$/ && !foo`, () => {\n\t\t\tconst input = `config.foo &&  &&bar =~ /^foo$|^bar-foo$|^joo$|^jar$/ && !foo`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected '&&' at offset 15.\\n\");\n\t\t});\n\n\t\ttest(`!foo == 'test'`, () => {\n\t\t\tconst input = `!foo == 'test'`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected '==' at offset 5.\\n\");\n\t\t});\n\n\t\ttest(`!!foo`, function () {\n\t\t\tconst input = `!!foo`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected '!' at offset 1.\\n\");\n\t\t});\n\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
