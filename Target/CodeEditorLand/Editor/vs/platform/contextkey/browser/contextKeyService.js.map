{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/contextkey/browser/contextKeyService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event, PauseableEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { MarshalledObject } from '../../../base/common/marshalling.js';\nimport { MarshalledId } from '../../../base/common/marshallingIds.js';\nimport { cloneAndChange, distinct } from '../../../base/common/objects.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../configuration/common/configuration.js';\nimport { ContextKeyExpression, ContextKeyInfo, ContextKeyValue, IContext, IContextKey, IContextKeyChangeEvent, IContextKeyService, IContextKeyServiceTarget, IReadableSet, IScopedContextKeyService, RawContextKey } from '../common/contextkey.js';\nimport { ServicesAccessor } from '../../instantiation/common/instantiation.js';\n\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\n\nexport class Context implements IContext {\n\n\tprotected _parent: Context | null;\n\tprotected _value: Record<string, any>;\n\tprotected _id: number;\n\n\tconstructor(id: number, parent: Context | null) {\n\t\tthis._id = id;\n\t\tthis._parent = parent;\n\t\tthis._value = Object.create(null);\n\t\tthis._value['_contextId'] = id;\n\t}\n\n\tpublic get value(): Record<string, any> {\n\t\treturn { ...this._value };\n\t}\n\n\tpublic setValue(key: string, value: any): boolean {\n\t\t// console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n\t\tif (this._value[key] !== value) {\n\t\t\tthis._value[key] = value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic removeValue(key: string): boolean {\n\t\t// console.log('REMOVE ' + key + ' FROM ' + this._id);\n\t\tif (key in this._value) {\n\t\t\tdelete this._value[key];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getValue<T>(key: string): T | undefined {\n\t\tconst ret = this._value[key];\n\t\tif (typeof ret === 'undefined' && this._parent) {\n\t\t\treturn this._parent.getValue<T>(key);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tpublic updateParent(parent: Context): void {\n\t\tthis._parent = parent;\n\t}\n\n\tpublic collectAllValues(): Record<string, any> {\n\t\tlet result = this._parent ? this._parent.collectAllValues() : Object.create(null);\n\t\tresult = { ...result, ...this._value };\n\t\tdelete result['_contextId'];\n\t\treturn result;\n\t}\n}\n\nclass NullContext extends Context {\n\n\tstatic readonly INSTANCE = new NullContext();\n\n\tconstructor() {\n\t\tsuper(-1, null);\n\t}\n\n\tpublic override setValue(key: string, value: any): boolean {\n\t\treturn false;\n\t}\n\n\tpublic override removeValue(key: string): boolean {\n\t\treturn false;\n\t}\n\n\tpublic override getValue<T>(key: string): T | undefined {\n\t\treturn undefined;\n\t}\n\n\toverride collectAllValues(): { [key: string]: any } {\n\t\treturn Object.create(null);\n\t}\n}\n\nclass ConfigAwareContextValuesContainer extends Context {\n\tprivate static readonly _keyPrefix = 'config.';\n\n\tprivate readonly _values = TernarySearchTree.forConfigKeys<any>();\n\tprivate readonly _listener: IDisposable;\n\n\tconstructor(\n\t\tid: number,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\temitter: Emitter<IContextKeyChangeEvent>\n\t) {\n\t\tsuper(id, null);\n\n\t\tthis._listener = this._configurationService.onDidChangeConfiguration(event => {\n\t\t\tif (event.source === ConfigurationTarget.DEFAULT) {\n\t\t\t\t// new setting, reset everything\n\t\t\t\tconst allKeys = Array.from(this._values, ([k]) => k);\n\t\t\t\tthis._values.clear();\n\t\t\t\temitter.fire(new ArrayContextKeyChangeEvent(allKeys));\n\t\t\t} else {\n\t\t\t\tconst changedKeys: string[] = [];\n\t\t\t\tfor (const configKey of event.affectedKeys) {\n\t\t\t\t\tconst contextKey = `config.${configKey}`;\n\n\t\t\t\t\tconst cachedItems = this._values.findSuperstr(contextKey);\n\t\t\t\t\tif (cachedItems !== undefined) {\n\t\t\t\t\t\tchangedKeys.push(...Iterable.map(cachedItems, ([key]) => key));\n\t\t\t\t\t\tthis._values.deleteSuperstr(contextKey);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._values.has(contextKey)) {\n\t\t\t\t\t\tchangedKeys.push(contextKey);\n\t\t\t\t\t\tthis._values.delete(contextKey);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\temitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._listener.dispose();\n\t}\n\n\toverride getValue(key: string): any {\n\n\t\tif (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n\t\t\treturn super.getValue(key);\n\t\t}\n\n\t\tif (this._values.has(key)) {\n\t\t\treturn this._values.get(key);\n\t\t}\n\n\t\tconst configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n\t\tconst configValue = this._configurationService.getValue(configKey);\n\t\tlet value: any = undefined;\n\t\tswitch (typeof configValue) {\n\t\t\tcase 'number':\n\t\t\tcase 'boolean':\n\t\t\tcase 'string':\n\t\t\t\tvalue = configValue;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (Array.isArray(configValue)) {\n\t\t\t\t\tvalue = JSON.stringify(configValue);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = configValue;\n\t\t\t\t}\n\t\t}\n\n\t\tthis._values.set(key, value);\n\t\treturn value;\n\t}\n\n\toverride setValue(key: string, value: any): boolean {\n\t\treturn super.setValue(key, value);\n\t}\n\n\toverride removeValue(key: string): boolean {\n\t\treturn super.removeValue(key);\n\t}\n\n\toverride collectAllValues(): { [key: string]: any } {\n\t\tconst result: { [key: string]: any } = Object.create(null);\n\t\tthis._values.forEach((value, index) => result[index] = value);\n\t\treturn { ...result, ...super.collectAllValues() };\n\t}\n}\n\nclass ContextKey<T extends ContextKeyValue> implements IContextKey<T> {\n\n\tprivate _service: AbstractContextKeyService;\n\tprivate _key: string;\n\tprivate _defaultValue: T | undefined;\n\n\tconstructor(service: AbstractContextKeyService, key: string, defaultValue: T | undefined) {\n\t\tthis._service = service;\n\t\tthis._key = key;\n\t\tthis._defaultValue = defaultValue;\n\t\tthis.reset();\n\t}\n\n\tpublic set(value: T): void {\n\t\tthis._service.setContext(this._key, value);\n\t}\n\n\tpublic reset(): void {\n\t\tif (typeof this._defaultValue === 'undefined') {\n\t\t\tthis._service.removeContext(this._key);\n\t\t} else {\n\t\t\tthis._service.setContext(this._key, this._defaultValue);\n\t\t}\n\t}\n\n\tpublic get(): T | undefined {\n\t\treturn this._service.getContextKeyValue<T>(this._key);\n\t}\n}\n\nclass SimpleContextKeyChangeEvent implements IContextKeyChangeEvent {\n\tconstructor(readonly key: string) { }\n\taffectsSome(keys: IReadableSet<string>): boolean {\n\t\treturn keys.has(this.key);\n\t}\n\tallKeysContainedIn(keys: IReadableSet<string>): boolean {\n\t\treturn this.affectsSome(keys);\n\t}\n}\n\nclass ArrayContextKeyChangeEvent implements IContextKeyChangeEvent {\n\tconstructor(readonly keys: string[]) { }\n\taffectsSome(keys: IReadableSet<string>): boolean {\n\t\tfor (const key of this.keys) {\n\t\t\tif (keys.has(key)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tallKeysContainedIn(keys: IReadableSet<string>): boolean {\n\t\treturn this.keys.every(key => keys.has(key));\n\t}\n}\n\nclass CompositeContextKeyChangeEvent implements IContextKeyChangeEvent {\n\tconstructor(readonly events: IContextKeyChangeEvent[]) { }\n\taffectsSome(keys: IReadableSet<string>): boolean {\n\t\tfor (const e of this.events) {\n\t\t\tif (e.affectsSome(keys)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tallKeysContainedIn(keys: IReadableSet<string>): boolean {\n\t\treturn this.events.every(evt => evt.allKeysContainedIn(keys));\n\t}\n}\n\nfunction allEventKeysInContext(event: IContextKeyChangeEvent, context: Record<string, any>): boolean {\n\treturn event.allKeysContainedIn(new Set(Object.keys(context)));\n}\n\nexport abstract class AbstractContextKeyService extends Disposable implements IContextKeyService {\n\tdeclare _serviceBrand: undefined;\n\n\tprotected _isDisposed: boolean;\n\tprotected _myContextId: number;\n\n\tprotected _onDidChangeContext = this._register(new PauseableEmitter<IContextKeyChangeEvent>({ merge: input => new CompositeContextKeyChangeEvent(input) }));\n\treadonly onDidChangeContext = this._onDidChangeContext.event;\n\n\tconstructor(myContextId: number) {\n\t\tsuper();\n\t\tthis._isDisposed = false;\n\t\tthis._myContextId = myContextId;\n\t}\n\n\tpublic get contextId(): number {\n\t\treturn this._myContextId;\n\t}\n\n\tpublic createKey<T extends ContextKeyValue>(key: string, defaultValue: T | undefined): IContextKey<T> {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`AbstractContextKeyService has been disposed`);\n\t\t}\n\t\treturn new ContextKey(this, key, defaultValue);\n\t}\n\n\n\tbufferChangeEvents(callback: Function): void {\n\t\tthis._onDidChangeContext.pause();\n\t\ttry {\n\t\t\tcallback();\n\t\t} finally {\n\t\t\tthis._onDidChangeContext.resume();\n\t\t}\n\t}\n\n\tpublic createScoped(domNode: IContextKeyServiceTarget): IScopedContextKeyService {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`AbstractContextKeyService has been disposed`);\n\t\t}\n\t\treturn new ScopedContextKeyService(this, domNode);\n\t}\n\n\tcreateOverlay(overlay: Iterable<[string, any]> = Iterable.empty()): IContextKeyService {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`AbstractContextKeyService has been disposed`);\n\t\t}\n\t\treturn new OverlayContextKeyService(this, overlay);\n\t}\n\n\tpublic contextMatchesRules(rules: ContextKeyExpression | undefined): boolean {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`AbstractContextKeyService has been disposed`);\n\t\t}\n\t\tconst context = this.getContextValuesContainer(this._myContextId);\n\t\tconst result = (rules ? rules.evaluate(context) : true);\n\t\t// console.group(rules.serialize() + ' -> ' + result);\n\t\t// rules.keys().forEach(key => { console.log(key, ctx[key]); });\n\t\t// console.groupEnd();\n\t\treturn result;\n\t}\n\n\tpublic getContextKeyValue<T>(key: string): T | undefined {\n\t\tif (this._isDisposed) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.getContextValuesContainer(this._myContextId).getValue<T>(key);\n\t}\n\n\tpublic setContext(key: string, value: any): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tconst myContext = this.getContextValuesContainer(this._myContextId);\n\t\tif (!myContext) {\n\t\t\treturn;\n\t\t}\n\t\tif (myContext.setValue(key, value)) {\n\t\t\tthis._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n\t\t}\n\t}\n\n\tpublic removeContext(key: string): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n\t\t\tthis._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n\t\t}\n\t}\n\n\tpublic getContext(target: IContextKeyServiceTarget | null): IContext {\n\t\tif (this._isDisposed) {\n\t\t\treturn NullContext.INSTANCE;\n\t\t}\n\t\treturn this.getContextValuesContainer(findContextAttr(target));\n\t}\n\n\tpublic abstract getContextValuesContainer(contextId: number): Context;\n\tpublic abstract createChildContext(parentContextId?: number): number;\n\tpublic abstract disposeContext(contextId: number): void;\n\tpublic abstract updateParent(parentContextKeyService?: IContextKeyService): void;\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._isDisposed = true;\n\t}\n}\n\nexport class ContextKeyService extends AbstractContextKeyService implements IContextKeyService {\n\n\tprivate _lastContextId: number;\n\tprivate readonly _contexts = new Map<number, Context>();\n\n\tconstructor(@IConfigurationService configurationService: IConfigurationService) {\n\t\tsuper(0);\n\t\tthis._lastContextId = 0;\n\n\t\tconst myContext = this._register(new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContext));\n\t\tthis._contexts.set(this._myContextId, myContext);\n\n\t\t// Uncomment this to see the contexts continuously logged\n\t\t// let lastLoggedValue: string | null = null;\n\t\t// setInterval(() => {\n\t\t// \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n\t\t// \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n\t\t// \tif (lastLoggedValue !== logValue) {\n\t\t// \t\tlastLoggedValue = logValue;\n\t\t// \t\tconsole.log(lastLoggedValue);\n\t\t// \t}\n\t\t// }, 2000);\n\t}\n\n\tpublic getContextValuesContainer(contextId: number): Context {\n\t\tif (this._isDisposed) {\n\t\t\treturn NullContext.INSTANCE;\n\t\t}\n\t\treturn this._contexts.get(contextId) || NullContext.INSTANCE;\n\t}\n\n\tpublic createChildContext(parentContextId: number = this._myContextId): number {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`ContextKeyService has been disposed`);\n\t\t}\n\t\tconst id = (++this._lastContextId);\n\t\tthis._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\n\t\treturn id;\n\t}\n\n\tpublic disposeContext(contextId: number): void {\n\t\tif (!this._isDisposed) {\n\t\t\tthis._contexts.delete(contextId);\n\t\t}\n\t}\n\n\tpublic updateParent(_parentContextKeyService: IContextKeyService): void {\n\t\tthrow new Error('Cannot update parent of root ContextKeyService');\n\t}\n}\n\nclass ScopedContextKeyService extends AbstractContextKeyService {\n\n\tprivate _parent: AbstractContextKeyService;\n\tprivate _domNode: IContextKeyServiceTarget;\n\n\tprivate readonly _parentChangeListener = this._register(new MutableDisposable());\n\n\tconstructor(parent: AbstractContextKeyService, domNode: IContextKeyServiceTarget) {\n\t\tsuper(parent.createChildContext());\n\t\tthis._parent = parent;\n\t\tthis._updateParentChangeListener();\n\n\t\tthis._domNode = domNode;\n\t\tif (this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n\t\t\tlet extraInfo = '';\n\t\t\tif ((this._domNode as HTMLElement).classList) {\n\t\t\t\textraInfo = Array.from((this._domNode as HTMLElement).classList.values()).join(', ');\n\t\t\t}\n\n\t\t\tconsole.error(`Element already has context attribute${extraInfo ? ': ' + extraInfo : ''}`);\n\t\t}\n\t\tthis._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\n\t}\n\n\tprivate _updateParentChangeListener(): void {\n\t\t// Forward parent events to this listener. Parent will change.\n\t\tthis._parentChangeListener.value = this._parent.onDidChangeContext(e => {\n\t\t\tconst thisContainer = this._parent.getContextValuesContainer(this._myContextId);\n\t\t\tconst thisContextValues = thisContainer.value;\n\n\t\t\tif (!allEventKeysInContext(e, thisContextValues)) {\n\t\t\t\tthis._onDidChangeContext.fire(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override dispose(): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._parent.disposeContext(this._myContextId);\n\t\tthis._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n\t\tsuper.dispose();\n\t}\n\n\tpublic getContextValuesContainer(contextId: number): Context {\n\t\tif (this._isDisposed) {\n\t\t\treturn NullContext.INSTANCE;\n\t\t}\n\t\treturn this._parent.getContextValuesContainer(contextId);\n\t}\n\n\tpublic createChildContext(parentContextId: number = this._myContextId): number {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`ScopedContextKeyService has been disposed`);\n\t\t}\n\t\treturn this._parent.createChildContext(parentContextId);\n\t}\n\n\tpublic disposeContext(contextId: number): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._parent.disposeContext(contextId);\n\t}\n\n\tpublic updateParent(parentContextKeyService: AbstractContextKeyService): void {\n\t\tif (this._parent === parentContextKeyService) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst thisContainer = this._parent.getContextValuesContainer(this._myContextId);\n\t\tconst oldAllValues = thisContainer.collectAllValues();\n\t\tthis._parent = parentContextKeyService;\n\t\tthis._updateParentChangeListener();\n\t\tconst newParentContainer = this._parent.getContextValuesContainer(this._parent.contextId);\n\t\tthisContainer.updateParent(newParentContainer);\n\n\t\tconst newAllValues = thisContainer.collectAllValues();\n\t\tconst allValuesDiff = {\n\t\t\t...distinct(oldAllValues, newAllValues),\n\t\t\t...distinct(newAllValues, oldAllValues)\n\t\t};\n\t\tconst changedKeys = Object.keys(allValuesDiff);\n\n\t\tthis._onDidChangeContext.fire(new ArrayContextKeyChangeEvent(changedKeys));\n\t}\n}\n\nclass OverlayContext implements IContext {\n\n\tconstructor(private parent: IContext, private overlay: ReadonlyMap<string, any>) { }\n\n\tgetValue<T>(key: string): T | undefined {\n\t\treturn this.overlay.has(key) ? this.overlay.get(key) : this.parent.getValue(key);\n\t}\n}\n\nclass OverlayContextKeyService implements IContextKeyService {\n\n\tdeclare _serviceBrand: undefined;\n\tprivate overlay: Map<string, any>;\n\n\tget contextId(): number {\n\t\treturn this.parent.contextId;\n\t}\n\n\tget onDidChangeContext(): Event<IContextKeyChangeEvent> {\n\t\treturn this.parent.onDidChangeContext;\n\t}\n\n\tconstructor(private parent: AbstractContextKeyService | OverlayContextKeyService, overlay: Iterable<[string, any]>) {\n\t\tthis.overlay = new Map(overlay);\n\t}\n\n\tbufferChangeEvents(callback: Function): void {\n\t\tthis.parent.bufferChangeEvents(callback);\n\t}\n\n\tcreateKey<T extends ContextKeyValue>(): IContextKey<T> {\n\t\tthrow new Error('Not supported.');\n\t}\n\n\tgetContext(target: IContextKeyServiceTarget | null): IContext {\n\t\treturn new OverlayContext(this.parent.getContext(target), this.overlay);\n\t}\n\n\tgetContextValuesContainer(contextId: number): IContext {\n\t\tconst parentContext = this.parent.getContextValuesContainer(contextId);\n\t\treturn new OverlayContext(parentContext, this.overlay);\n\t}\n\n\tcontextMatchesRules(rules: ContextKeyExpression | undefined): boolean {\n\t\tconst context = this.getContextValuesContainer(this.contextId);\n\t\tconst result = (rules ? rules.evaluate(context) : true);\n\t\treturn result;\n\t}\n\n\tgetContextKeyValue<T>(key: string): T | undefined {\n\t\treturn this.overlay.has(key) ? this.overlay.get(key) : this.parent.getContextKeyValue(key);\n\t}\n\n\tcreateScoped(): IScopedContextKeyService {\n\t\tthrow new Error('Not supported.');\n\t}\n\n\tcreateOverlay(overlay: Iterable<[string, any]> = Iterable.empty()): IContextKeyService {\n\t\treturn new OverlayContextKeyService(this, overlay);\n\t}\n\n\tupdateParent(): void {\n\t\tthrow new Error('Not supported.');\n\t}\n}\n\nfunction findContextAttr(domNode: IContextKeyServiceTarget | null): number {\n\twhile (domNode) {\n\t\tif (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n\t\t\tconst attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n\t\t\tif (attr) {\n\t\t\t\treturn parseInt(attr, 10);\n\t\t\t}\n\t\t\treturn NaN;\n\t\t}\n\t\tdomNode = domNode.parentElement;\n\t}\n\treturn 0;\n}\n\nexport function setContext(accessor: ServicesAccessor, contextKey: any, contextValue: any) {\n\tconst contextKeyService = accessor.get(IContextKeyService);\n\tcontextKeyService.createKey(String(contextKey), stringifyURIs(contextValue));\n}\n\nfunction stringifyURIs(contextValue: any): any {\n\treturn cloneAndChange(contextValue, (obj) => {\n\t\tif (typeof obj === 'object' && (<MarshalledObject>obj).$mid === MarshalledId.Uri) {\n\t\t\treturn URI.revive(obj).toString();\n\t\t}\n\t\tif (obj instanceof URI) {\n\t\t\treturn obj.toString();\n\t\t}\n\t\treturn undefined;\n\t});\n}\n\nCommandsRegistry.registerCommand('_setContext', setContext);\n\nCommandsRegistry.registerCommand({\n\tid: 'getContextKeyInfo',\n\thandler() {\n\t\treturn [...RawContextKey.all()].sort((a, b) => a.key.localeCompare(b.key));\n\t},\n\tmetadata: {\n\t\tdescription: localize('getContextKeyInfo', \"A command that returns information about context keys\"),\n\t\targs: []\n\t}\n});\n\nCommandsRegistry.registerCommand('_generateContextKeyInfo', function () {\n\tconst result: ContextKeyInfo[] = [];\n\tconst seen = new Set<string>();\n\tfor (const info of RawContextKey.all()) {\n\t\tif (!seen.has(info.key)) {\n\t\t\tseen.add(info.key);\n\t\t\tresult.push(info);\n\t\t}\n\t}\n\tresult.sort((a, b) => a.key.localeCompare(b.key));\n\tconsole.log(JSON.stringify(result, undefined, 2));\n});\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,SAAS,OAAO,wBAAwB;AACjD,SAAS,gBAAgB;AACzB,SAAS,YAAY,aAAa,yBAAyB;AAC3D,SAAS,wBAAwB;AACjC,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB,gBAAgB;AACzC,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,wBAAwB;AACjC,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,sBAAsB,gBAAgB,iBAAiB,UAAU,aAAa,wBAAwB,oBAAoB,0BAA0B,cAAc,0BAA0B,qBAAqB;AAC1N,SAAS,wBAAwB;AAEjC,MAAM,0BAA0B;AAEzB,MAAM,QAA4B;AAAA,EArBzC,OAqByC;AAAA;AAAA;AAAA,EAE9B;AAAA,EACA;AAAA,EACA;AAAA,EAEV,YAAY,IAAY,QAAwB;AAC/C,SAAK,MAAM;AACX,SAAK,UAAU;AACf,SAAK,SAAS,uBAAO,OAAO,IAAI;AAChC,SAAK,OAAO,YAAY,IAAI;AAAA,EAC7B;AAAA,EAEA,IAAW,QAA6B;AACvC,WAAO,EAAE,GAAG,KAAK,OAAO;AAAA,EACzB;AAAA,EAEO,SAAS,KAAa,OAAqB;AAEjD,QAAI,KAAK,OAAO,GAAG,MAAM,OAAO;AAC/B,WAAK,OAAO,GAAG,IAAI;AACnB,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EAEO,YAAY,KAAsB;AAExC,QAAI,OAAO,KAAK,QAAQ;AACvB,aAAO,KAAK,OAAO,GAAG;AACtB,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EAEO,SAAY,KAA4B;AAC9C,UAAM,MAAM,KAAK,OAAO,GAAG;AAC3B,QAAI,OAAO,QAAQ,eAAe,KAAK,SAAS;AAC/C,aAAO,KAAK,QAAQ,SAAY,GAAG;AAAA,IACpC;AACA,WAAO;AAAA,EACR;AAAA,EAEO,aAAa,QAAuB;AAC1C,SAAK,UAAU;AAAA,EAChB;AAAA,EAEO,mBAAwC;AAC9C,QAAI,SAAS,KAAK,UAAU,KAAK,QAAQ,iBAAiB,IAAI,uBAAO,OAAO,IAAI;AAChF,aAAS,EAAE,GAAG,QAAQ,GAAG,KAAK,OAAO;AACrC,WAAO,OAAO,YAAY;AAC1B,WAAO;AAAA,EACR;AACD;AAEA,MAAM,oBAAoB,QAAQ;AAAA,EA5ElC,OA4EkC;AAAA;AAAA;AAAA,EAEjC,OAAgB,WAAW,IAAI,YAAY;AAAA,EAE3C,cAAc;AACb,UAAM,IAAI,IAAI;AAAA,EACf;AAAA,EAEgB,SAAS,KAAa,OAAqB;AAC1D,WAAO;AAAA,EACR;AAAA,EAEgB,YAAY,KAAsB;AACjD,WAAO;AAAA,EACR;AAAA,EAEgB,SAAY,KAA4B;AACvD,WAAO;AAAA,EACR;AAAA,EAES,mBAA2C;AACnD,WAAO,uBAAO,OAAO,IAAI;AAAA,EAC1B;AACD;AAEA,MAAM,0CAA0C,QAAQ;AAAA,EAMvD,YACC,IACiB,uBACjB,SACC;AACD,UAAM,IAAI,IAAI;AAHG;AAKjB,SAAK,YAAY,KAAK,sBAAsB,yBAAyB,WAAS;AAC7E,UAAI,MAAM,WAAW,oBAAoB,SAAS;AAEjD,cAAM,UAAU,MAAM,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;AACnD,aAAK,QAAQ,MAAM;AACnB,gBAAQ,KAAK,IAAI,2BAA2B,OAAO,CAAC;AAAA,MACrD,OAAO;AACN,cAAM,cAAwB,CAAC;AAC/B,mBAAW,aAAa,MAAM,cAAc;AAC3C,gBAAM,aAAa,UAAU,SAAS;AAEtC,gBAAM,cAAc,KAAK,QAAQ,aAAa,UAAU;AACxD,cAAI,gBAAgB,QAAW;AAC9B,wBAAY,KAAK,GAAG,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC;AAC7D,iBAAK,QAAQ,eAAe,UAAU;AAAA,UACvC;AAEA,cAAI,KAAK,QAAQ,IAAI,UAAU,GAAG;AACjC,wBAAY,KAAK,UAAU;AAC3B,iBAAK,QAAQ,OAAO,UAAU;AAAA,UAC/B;AAAA,QACD;AAEA,gBAAQ,KAAK,IAAI,2BAA2B,WAAW,CAAC;AAAA,MACzD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EA5ID,OAqGwD;AAAA;AAAA;AAAA,EACvD,OAAwB,aAAa;AAAA,EAEpB,UAAU,kBAAkB,cAAmB;AAAA,EAC/C;AAAA,EAqCjB,UAAgB;AACf,SAAK,UAAU,QAAQ;AAAA,EACxB;AAAA,EAES,SAAS,KAAkB;AAEnC,QAAI,IAAI,QAAQ,kCAAkC,UAAU,MAAM,GAAG;AACpE,aAAO,MAAM,SAAS,GAAG;AAAA,IAC1B;AAEA,QAAI,KAAK,QAAQ,IAAI,GAAG,GAAG;AAC1B,aAAO,KAAK,QAAQ,IAAI,GAAG;AAAA,IAC5B;AAEA,UAAM,YAAY,IAAI,OAAO,kCAAkC,WAAW,MAAM;AAChF,UAAM,cAAc,KAAK,sBAAsB,SAAS,SAAS;AACjE,QAAI,QAAa;AACjB,YAAQ,OAAO,aAAa;AAAA,MAC3B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACJ,gBAAQ;AACR;AAAA,MACD;AACC,YAAI,MAAM,QAAQ,WAAW,GAAG;AAC/B,kBAAQ,KAAK,UAAU,WAAW;AAAA,QACnC,OAAO;AACN,kBAAQ;AAAA,QACT;AAAA,IACF;AAEA,SAAK,QAAQ,IAAI,KAAK,KAAK;AAC3B,WAAO;AAAA,EACR;AAAA,EAES,SAAS,KAAa,OAAqB;AACnD,WAAO,MAAM,SAAS,KAAK,KAAK;AAAA,EACjC;AAAA,EAES,YAAY,KAAsB;AAC1C,WAAO,MAAM,YAAY,GAAG;AAAA,EAC7B;AAAA,EAES,mBAA2C;AACnD,UAAM,SAAiC,uBAAO,OAAO,IAAI;AACzD,SAAK,QAAQ,QAAQ,CAAC,OAAO,UAAU,OAAO,KAAK,IAAI,KAAK;AAC5D,WAAO,EAAE,GAAG,QAAQ,GAAG,MAAM,iBAAiB,EAAE;AAAA,EACjD;AACD;AAEA,MAAM,WAAgE;AAAA,EAhMtE,OAgMsE;AAAA;AAAA;AAAA,EAE7D;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,SAAoC,KAAa,cAA6B;AACzF,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,SAAK,MAAM;AAAA,EACZ;AAAA,EAEO,IAAI,OAAgB;AAC1B,SAAK,SAAS,WAAW,KAAK,MAAM,KAAK;AAAA,EAC1C;AAAA,EAEO,QAAc;AACpB,QAAI,OAAO,KAAK,kBAAkB,aAAa;AAC9C,WAAK,SAAS,cAAc,KAAK,IAAI;AAAA,IACtC,OAAO;AACN,WAAK,SAAS,WAAW,KAAK,MAAM,KAAK,aAAa;AAAA,IACvD;AAAA,EACD;AAAA,EAEO,MAAqB;AAC3B,WAAO,KAAK,SAAS,mBAAsB,KAAK,IAAI;AAAA,EACrD;AACD;AAEA,MAAM,4BAA8D;AAAA,EACnE,YAAqB,KAAa;AAAb;AAAA,EAAe;AAAA,EA/NrC,OA8NoE;AAAA;AAAA;AAAA,EAEnE,YAAY,MAAqC;AAChD,WAAO,KAAK,IAAI,KAAK,GAAG;AAAA,EACzB;AAAA,EACA,mBAAmB,MAAqC;AACvD,WAAO,KAAK,YAAY,IAAI;AAAA,EAC7B;AACD;AAEA,MAAM,2BAA6D;AAAA,EAClE,YAAqB,MAAgB;AAAhB;AAAA,EAAkB;AAAA,EAzOxC,OAwOmE;AAAA;AAAA;AAAA,EAElE,YAAY,MAAqC;AAChD,eAAW,OAAO,KAAK,MAAM;AAC5B,UAAI,KAAK,IAAI,GAAG,GAAG;AAClB,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,MAAqC;AACvD,WAAO,KAAK,KAAK,MAAM,SAAO,KAAK,IAAI,GAAG,CAAC;AAAA,EAC5C;AACD;AAEA,MAAM,+BAAiE;AAAA,EACtE,YAAqB,QAAkC;AAAlC;AAAA,EAAoC;AAAA,EAxP1D,OAuPuE;AAAA;AAAA;AAAA,EAEtE,YAAY,MAAqC;AAChD,eAAW,KAAK,KAAK,QAAQ;AAC5B,UAAI,EAAE,YAAY,IAAI,GAAG;AACxB,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,MAAqC;AACvD,WAAO,KAAK,OAAO,MAAM,SAAO,IAAI,mBAAmB,IAAI,CAAC;AAAA,EAC7D;AACD;AAEA,SAAS,sBAAsB,OAA+B,SAAuC;AACpG,SAAO,MAAM,mBAAmB,IAAI,IAAI,OAAO,KAAK,OAAO,CAAC,CAAC;AAC9D;AAFS;AAIF,MAAe,kCAAkC,WAAyC;AAAA,EA1QjG,OA0QiG;AAAA;AAAA;AAAA,EAGtF;AAAA,EACA;AAAA,EAEA,sBAAsB,KAAK,UAAU,IAAI,iBAAyC,EAAE,OAAO,kCAAS,IAAI,+BAA+B,KAAK,GAAjD,SAAmD,CAAC,CAAC;AAAA,EACjJ,qBAAqB,KAAK,oBAAoB;AAAA,EAEvD,YAAY,aAAqB;AAChC,UAAM;AACN,SAAK,cAAc;AACnB,SAAK,eAAe;AAAA,EACrB;AAAA,EAEA,IAAW,YAAoB;AAC9B,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,UAAqC,KAAa,cAA6C;AACrG,QAAI,KAAK,aAAa;AACrB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,IAAI,WAAW,MAAM,KAAK,YAAY;AAAA,EAC9C;AAAA,EAGA,mBAAmB,UAA0B;AAC5C,SAAK,oBAAoB,MAAM;AAC/B,QAAI;AACH,eAAS;AAAA,IACV,UAAE;AACD,WAAK,oBAAoB,OAAO;AAAA,IACjC;AAAA,EACD;AAAA,EAEO,aAAa,SAA6D;AAChF,QAAI,KAAK,aAAa;AACrB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,IAAI,wBAAwB,MAAM,OAAO;AAAA,EACjD;AAAA,EAEA,cAAc,UAAmC,SAAS,MAAM,GAAuB;AACtF,QAAI,KAAK,aAAa;AACrB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,IAAI,yBAAyB,MAAM,OAAO;AAAA,EAClD;AAAA,EAEO,oBAAoB,OAAkD;AAC5E,QAAI,KAAK,aAAa;AACrB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,UAAM,UAAU,KAAK,0BAA0B,KAAK,YAAY;AAChE,UAAM,SAAU,QAAQ,MAAM,SAAS,OAAO,IAAI;AAIlD,WAAO;AAAA,EACR;AAAA,EAEO,mBAAsB,KAA4B;AACxD,QAAI,KAAK,aAAa;AACrB,aAAO;AAAA,IACR;AACA,WAAO,KAAK,0BAA0B,KAAK,YAAY,EAAE,SAAY,GAAG;AAAA,EACzE;AAAA,EAEO,WAAW,KAAa,OAAkB;AAChD,QAAI,KAAK,aAAa;AACrB;AAAA,IACD;AACA,UAAM,YAAY,KAAK,0BAA0B,KAAK,YAAY;AAClE,QAAI,CAAC,WAAW;AACf;AAAA,IACD;AACA,QAAI,UAAU,SAAS,KAAK,KAAK,GAAG;AACnC,WAAK,oBAAoB,KAAK,IAAI,4BAA4B,GAAG,CAAC;AAAA,IACnE;AAAA,EACD;AAAA,EAEO,cAAc,KAAmB;AACvC,QAAI,KAAK,aAAa;AACrB;AAAA,IACD;AACA,QAAI,KAAK,0BAA0B,KAAK,YAAY,EAAE,YAAY,GAAG,GAAG;AACvE,WAAK,oBAAoB,KAAK,IAAI,4BAA4B,GAAG,CAAC;AAAA,IACnE;AAAA,EACD;AAAA,EAEO,WAAW,QAAmD;AACpE,QAAI,KAAK,aAAa;AACrB,aAAO,YAAY;AAAA,IACpB;AACA,WAAO,KAAK,0BAA0B,gBAAgB,MAAM,CAAC;AAAA,EAC9D;AAAA,EAOgB,UAAgB;AAC/B,UAAM,QAAQ;AACd,SAAK,cAAc;AAAA,EACpB;AACD;AAEO,IAAM,oBAAN,cAAgC,0BAAwD;AAAA,EAvX/F,OAuX+F;AAAA;AAAA;AAAA,EAEtF;AAAA,EACS,YAAY,oBAAI,IAAqB;AAAA,EAEtD,YAAmC,sBAA6C;AAC/E,UAAM,CAAC;AACP,SAAK,iBAAiB;AAEtB,UAAM,YAAY,KAAK,UAAU,IAAI,kCAAkC,KAAK,cAAc,sBAAsB,KAAK,mBAAmB,CAAC;AACzI,SAAK,UAAU,IAAI,KAAK,cAAc,SAAS;AAAA,EAYhD;AAAA,EAEO,0BAA0B,WAA4B;AAC5D,QAAI,KAAK,aAAa;AACrB,aAAO,YAAY;AAAA,IACpB;AACA,WAAO,KAAK,UAAU,IAAI,SAAS,KAAK,YAAY;AAAA,EACrD;AAAA,EAEO,mBAAmB,kBAA0B,KAAK,cAAsB;AAC9E,QAAI,KAAK,aAAa;AACrB,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACtD;AACA,UAAM,KAAM,EAAE,KAAK;AACnB,SAAK,UAAU,IAAI,IAAI,IAAI,QAAQ,IAAI,KAAK,0BAA0B,eAAe,CAAC,CAAC;AACvF,WAAO;AAAA,EACR;AAAA,EAEO,eAAe,WAAyB;AAC9C,QAAI,CAAC,KAAK,aAAa;AACtB,WAAK,UAAU,OAAO,SAAS;AAAA,IAChC;AAAA,EACD;AAAA,EAEO,aAAa,0BAAoD;AACvE,UAAM,IAAI,MAAM,gDAAgD;AAAA,EACjE;AACD;AAjDa,oBAAN;AAAA,EAKO;AAAA,GALD;AAmDb,MAAM,gCAAgC,0BAA0B;AAAA,EA1ahE,OA0agE;AAAA;AAAA;AAAA,EAEvD;AAAA,EACA;AAAA,EAES,wBAAwB,KAAK,UAAU,IAAI,kBAAkB,CAAC;AAAA,EAE/E,YAAY,QAAmC,SAAmC;AACjF,UAAM,OAAO,mBAAmB,CAAC;AACjC,SAAK,UAAU;AACf,SAAK,4BAA4B;AAEjC,SAAK,WAAW;AAChB,QAAI,KAAK,SAAS,aAAa,uBAAuB,GAAG;AACxD,UAAI,YAAY;AAChB,UAAK,KAAK,SAAyB,WAAW;AAC7C,oBAAY,MAAM,KAAM,KAAK,SAAyB,UAAU,OAAO,CAAC,EAAE,KAAK,IAAI;AAAA,MACpF;AAEA,cAAQ,MAAM,wCAAwC,YAAY,OAAO,YAAY,EAAE,EAAE;AAAA,IAC1F;AACA,SAAK,SAAS,aAAa,yBAAyB,OAAO,KAAK,YAAY,CAAC;AAAA,EAC9E;AAAA,EAEQ,8BAAoC;AAE3C,SAAK,sBAAsB,QAAQ,KAAK,QAAQ,mBAAmB,OAAK;AACvE,YAAM,gBAAgB,KAAK,QAAQ,0BAA0B,KAAK,YAAY;AAC9E,YAAM,oBAAoB,cAAc;AAExC,UAAI,CAAC,sBAAsB,GAAG,iBAAiB,GAAG;AACjD,aAAK,oBAAoB,KAAK,CAAC;AAAA,MAChC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEgB,UAAgB;AAC/B,QAAI,KAAK,aAAa;AACrB;AAAA,IACD;AAEA,SAAK,QAAQ,eAAe,KAAK,YAAY;AAC7C,SAAK,SAAS,gBAAgB,uBAAuB;AACrD,UAAM,QAAQ;AAAA,EACf;AAAA,EAEO,0BAA0B,WAA4B;AAC5D,QAAI,KAAK,aAAa;AACrB,aAAO,YAAY;AAAA,IACpB;AACA,WAAO,KAAK,QAAQ,0BAA0B,SAAS;AAAA,EACxD;AAAA,EAEO,mBAAmB,kBAA0B,KAAK,cAAsB;AAC9E,QAAI,KAAK,aAAa;AACrB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC5D;AACA,WAAO,KAAK,QAAQ,mBAAmB,eAAe;AAAA,EACvD;AAAA,EAEO,eAAe,WAAyB;AAC9C,QAAI,KAAK,aAAa;AACrB;AAAA,IACD;AACA,SAAK,QAAQ,eAAe,SAAS;AAAA,EACtC;AAAA,EAEO,aAAa,yBAA0D;AAC7E,QAAI,KAAK,YAAY,yBAAyB;AAC7C;AAAA,IACD;AAEA,UAAM,gBAAgB,KAAK,QAAQ,0BAA0B,KAAK,YAAY;AAC9E,UAAM,eAAe,cAAc,iBAAiB;AACpD,SAAK,UAAU;AACf,SAAK,4BAA4B;AACjC,UAAM,qBAAqB,KAAK,QAAQ,0BAA0B,KAAK,QAAQ,SAAS;AACxF,kBAAc,aAAa,kBAAkB;AAE7C,UAAM,eAAe,cAAc,iBAAiB;AACpD,UAAM,gBAAgB;AAAA,MACrB,GAAG,SAAS,cAAc,YAAY;AAAA,MACtC,GAAG,SAAS,cAAc,YAAY;AAAA,IACvC;AACA,UAAM,cAAc,OAAO,KAAK,aAAa;AAE7C,SAAK,oBAAoB,KAAK,IAAI,2BAA2B,WAAW,CAAC;AAAA,EAC1E;AACD;AAEA,MAAM,eAAmC;AAAA,EAExC,YAAoB,QAA0B,SAAmC;AAA7D;AAA0B;AAAA,EAAqC;AAAA,EAtgBpF,OAogByC;AAAA;AAAA;AAAA,EAIxC,SAAY,KAA4B;AACvC,WAAO,KAAK,QAAQ,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,IAAI,KAAK,OAAO,SAAS,GAAG;AAAA,EAChF;AACD;AAEA,MAAM,yBAAuD;AAAA,EAa5D,YAAoB,QAA8D,SAAkC;AAAhG;AACnB,SAAK,UAAU,IAAI,IAAI,OAAO;AAAA,EAC/B;AAAA,EA5hBD,OA6gB6D;AAAA;AAAA;AAAA,EAGpD;AAAA,EAER,IAAI,YAAoB;AACvB,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAEA,IAAI,qBAAoD;AACvD,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAMA,mBAAmB,UAA0B;AAC5C,SAAK,OAAO,mBAAmB,QAAQ;AAAA,EACxC;AAAA,EAEA,YAAuD;AACtD,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AAAA,EAEA,WAAW,QAAmD;AAC7D,WAAO,IAAI,eAAe,KAAK,OAAO,WAAW,MAAM,GAAG,KAAK,OAAO;AAAA,EACvE;AAAA,EAEA,0BAA0B,WAA6B;AACtD,UAAM,gBAAgB,KAAK,OAAO,0BAA0B,SAAS;AACrE,WAAO,IAAI,eAAe,eAAe,KAAK,OAAO;AAAA,EACtD;AAAA,EAEA,oBAAoB,OAAkD;AACrE,UAAM,UAAU,KAAK,0BAA0B,KAAK,SAAS;AAC7D,UAAM,SAAU,QAAQ,MAAM,SAAS,OAAO,IAAI;AAClD,WAAO;AAAA,EACR;AAAA,EAEA,mBAAsB,KAA4B;AACjD,WAAO,KAAK,QAAQ,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,IAAI,KAAK,OAAO,mBAAmB,GAAG;AAAA,EAC1F;AAAA,EAEA,eAAyC;AACxC,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AAAA,EAEA,cAAc,UAAmC,SAAS,MAAM,GAAuB;AACtF,WAAO,IAAI,yBAAyB,MAAM,OAAO;AAAA,EAClD;AAAA,EAEA,eAAqB;AACpB,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AACD;AAEA,SAAS,gBAAgB,SAAkD;AAC1E,SAAO,SAAS;AACf,QAAI,QAAQ,aAAa,uBAAuB,GAAG;AAClD,YAAM,OAAO,QAAQ,aAAa,uBAAuB;AACzD,UAAI,MAAM;AACT,eAAO,SAAS,MAAM,EAAE;AAAA,MACzB;AACA,aAAO;AAAA,IACR;AACA,cAAU,QAAQ;AAAA,EACnB;AACA,SAAO;AACR;AAZS;AAcF,SAAS,WAAW,UAA4B,YAAiB,cAAmB;AAC1F,QAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,oBAAkB,UAAU,OAAO,UAAU,GAAG,cAAc,YAAY,CAAC;AAC5E;AAHgB;AAKhB,SAAS,cAAc,cAAwB;AAC9C,SAAO,eAAe,cAAc,CAAC,QAAQ;AAC5C,QAAI,OAAO,QAAQ,YAA+B,IAAK,SAAS,aAAa,KAAK;AACjF,aAAO,IAAI,OAAO,GAAG,EAAE,SAAS;AAAA,IACjC;AACA,QAAI,eAAe,KAAK;AACvB,aAAO,IAAI,SAAS;AAAA,IACrB;AACA,WAAO;AAAA,EACR,CAAC;AACF;AAVS;AAYT,iBAAiB,gBAAgB,eAAe,UAAU;AAE1D,iBAAiB,gBAAgB;AAAA,EAChC,IAAI;AAAA,EACJ,UAAU;AACT,WAAO,CAAC,GAAG,cAAc,IAAI,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,IAAI,cAAc,EAAE,GAAG,CAAC;AAAA,EAC1E;AAAA,EACA,UAAU;AAAA,IACT,aAAa,SAAS,qBAAqB,uDAAuD;AAAA,IAClG,MAAM,CAAC;AAAA,EACR;AACD,CAAC;AAED,iBAAiB,gBAAgB,2BAA2B,WAAY;AACvE,QAAM,SAA2B,CAAC;AAClC,QAAM,OAAO,oBAAI,IAAY;AAC7B,aAAW,QAAQ,cAAc,IAAI,GAAG;AACvC,QAAI,CAAC,KAAK,IAAI,KAAK,GAAG,GAAG;AACxB,WAAK,IAAI,KAAK,GAAG;AACjB,aAAO,KAAK,IAAI;AAAA,IACjB;AAAA,EACD;AACA,SAAO,KAAK,CAAC,GAAG,MAAM,EAAE,IAAI,cAAc,EAAE,GAAG,CAAC;AAChD,UAAQ,IAAI,KAAK,UAAU,QAAQ,QAAW,CAAC,CAAC;AACjD,CAAC;",
  "names": []
}
