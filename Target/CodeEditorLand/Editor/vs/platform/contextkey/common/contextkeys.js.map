{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/contextkey/common/contextkeys.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isIOS, isLinux, isMacintosh, isMobile, isWeb, isWindows } from '../../../base/common/platform.js';\nimport { localize } from '../../../nls.js';\nimport { RawContextKey } from './contextkey.js';\n\nexport const IsMacContext = new RawContextKey<boolean>('isMac', isMacintosh, localize('isMac', \"Whether the operating system is macOS\"));\nexport const IsLinuxContext = new RawContextKey<boolean>('isLinux', isLinux, localize('isLinux', \"Whether the operating system is Linux\"));\nexport const IsWindowsContext = new RawContextKey<boolean>('isWindows', isWindows, localize('isWindows', \"Whether the operating system is Windows\"));\n\nexport const IsWebContext = new RawContextKey<boolean>('isWeb', isWeb, localize('isWeb', \"Whether the platform is a web browser\"));\nexport const IsMacNativeContext = new RawContextKey<boolean>('isMacNative', isMacintosh && !isWeb, localize('isMacNative', \"Whether the operating system is macOS on a non-browser platform\"));\nexport const IsIOSContext = new RawContextKey<boolean>('isIOS', isIOS, localize('isIOS', \"Whether the operating system is iOS\"));\nexport const IsMobileContext = new RawContextKey<boolean>('isMobile', isMobile, localize('isMobile', \"Whether the platform is a mobile web browser\"));\n\nexport const IsDevelopmentContext = new RawContextKey<boolean>('isDevelopment', false, true);\nexport const ProductQualityContext = new RawContextKey<string>('productQualityType', '', localize('productQualityType', \"Quality type of VS Code\"));\n\nexport const InputFocusedContextKey = 'inputFocus';\nexport const InputFocusedContext = new RawContextKey<boolean>(InputFocusedContextKey, false, localize('inputFocus', \"Whether keyboard focus is inside an input box\"));\n"],
  "mappings": "AAKA,SAAS,OAAO,SAAS,aAAa,UAAU,OAAO,iBAAiB;AACxE,SAAS,gBAAgB;AACzB,SAAS,qBAAqB;AAEvB,MAAM,eAAe,IAAI,cAAuB,SAAS,aAAa,SAAS,SAAS,uCAAuC,CAAC;AAChI,MAAM,iBAAiB,IAAI,cAAuB,WAAW,SAAS,SAAS,WAAW,uCAAuC,CAAC;AAClI,MAAM,mBAAmB,IAAI,cAAuB,aAAa,WAAW,SAAS,aAAa,yCAAyC,CAAC;AAE5I,MAAM,eAAe,IAAI,cAAuB,SAAS,OAAO,SAAS,SAAS,uCAAuC,CAAC;AAC1H,MAAM,qBAAqB,IAAI,cAAuB,eAAe,eAAe,CAAC,OAAO,SAAS,eAAe,iEAAiE,CAAC;AACtL,MAAM,eAAe,IAAI,cAAuB,SAAS,OAAO,SAAS,SAAS,qCAAqC,CAAC;AACxH,MAAM,kBAAkB,IAAI,cAAuB,YAAY,UAAU,SAAS,YAAY,8CAA8C,CAAC;AAE7I,MAAM,uBAAuB,IAAI,cAAuB,iBAAiB,OAAO,IAAI;AACpF,MAAM,wBAAwB,IAAI,cAAsB,sBAAsB,IAAI,SAAS,sBAAsB,yBAAyB,CAAC;AAE3I,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB,IAAI,cAAuB,wBAAwB,OAAO,SAAS,cAAc,+CAA+C,CAAC;",
  "names": []
}
