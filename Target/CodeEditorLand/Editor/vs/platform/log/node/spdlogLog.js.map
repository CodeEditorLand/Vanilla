{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/node/spdlogLog.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as spdlog from '@vscode/spdlog';\nimport { ByteSize } from '../../files/common/files.js';\nimport { AbstractMessageLogger, ILogger, LogLevel } from '../common/log.js';\n\nenum SpdLogLevel {\n\tTrace,\n\tDebug,\n\tInfo,\n\tWarning,\n\tError,\n\tCritical,\n\tOff\n}\n\nasync function createSpdLogLogger(name: string, logfilePath: string, filesize: number, filecount: number, donotUseFormatters: boolean): Promise<spdlog.Logger | null> {\n\t// Do not crash if spdlog cannot be loaded\n\ttry {\n\t\tconst _spdlog = await import('@vscode/spdlog');\n\t\t_spdlog.setFlushOn(SpdLogLevel.Trace);\n\t\tconst logger = await _spdlog.createAsyncRotatingLogger(name, logfilePath, filesize, filecount);\n\t\tif (donotUseFormatters) {\n\t\t\tlogger.clearFormatters();\n\t\t} else {\n\t\t\tlogger.setPattern('%Y-%m-%d %H:%M:%S.%e [%l] %v');\n\t\t}\n\t\treturn logger;\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n\treturn null;\n}\n\ninterface ILog {\n\tlevel: LogLevel;\n\tmessage: string;\n}\n\nfunction log(logger: spdlog.Logger, level: LogLevel, message: string): void {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: logger.trace(message); break;\n\t\tcase LogLevel.Debug: logger.debug(message); break;\n\t\tcase LogLevel.Info: logger.info(message); break;\n\t\tcase LogLevel.Warning: logger.warn(message); break;\n\t\tcase LogLevel.Error: logger.error(message); break;\n\t\tcase LogLevel.Off: /* do nothing */ break;\n\t\tdefault: throw new Error(`Invalid log level ${level}`);\n\t}\n}\n\nfunction setLogLevel(logger: spdlog.Logger, level: LogLevel): void {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: logger.setLevel(SpdLogLevel.Trace); break;\n\t\tcase LogLevel.Debug: logger.setLevel(SpdLogLevel.Debug); break;\n\t\tcase LogLevel.Info: logger.setLevel(SpdLogLevel.Info); break;\n\t\tcase LogLevel.Warning: logger.setLevel(SpdLogLevel.Warning); break;\n\t\tcase LogLevel.Error: logger.setLevel(SpdLogLevel.Error); break;\n\t\tcase LogLevel.Off: logger.setLevel(SpdLogLevel.Off); break;\n\t\tdefault: throw new Error(`Invalid log level ${level}`);\n\t}\n}\n\nexport class SpdLogLogger extends AbstractMessageLogger implements ILogger {\n\n\tprivate buffer: ILog[] = [];\n\tprivate readonly _loggerCreationPromise: Promise<void>;\n\tprivate _logger: spdlog.Logger | undefined;\n\n\tconstructor(\n\t\tname: string,\n\t\tfilepath: string,\n\t\trotating: boolean,\n\t\tdonotUseFormatters: boolean,\n\t\tlevel: LogLevel,\n\t) {\n\t\tsuper();\n\t\tthis.setLevel(level);\n\t\tthis._loggerCreationPromise = this._createSpdLogLogger(name, filepath, rotating, donotUseFormatters);\n\t\tthis._register(this.onDidChangeLogLevel(level => {\n\t\t\tif (this._logger) {\n\t\t\t\tsetLogLevel(this._logger, level);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async _createSpdLogLogger(name: string, filepath: string, rotating: boolean, donotUseFormatters: boolean): Promise<void> {\n\t\tconst filecount = rotating ? 6 : 1;\n\t\tconst filesize = (30 / filecount) * ByteSize.MB;\n\t\tconst logger = await createSpdLogLogger(name, filepath, filesize, filecount, donotUseFormatters);\n\t\tif (logger) {\n\t\t\tthis._logger = logger;\n\t\t\tsetLogLevel(this._logger, this.getLevel());\n\t\t\tfor (const { level, message } of this.buffer) {\n\t\t\t\tlog(this._logger, level, message);\n\t\t\t}\n\t\t\tthis.buffer = [];\n\t\t}\n\t}\n\n\tprotected log(level: LogLevel, message: string): void {\n\t\tif (this._logger) {\n\t\t\tlog(this._logger, level, message);\n\t\t} else if (this.getLevel() <= level) {\n\t\t\tthis.buffer.push({ level, message });\n\t\t}\n\t}\n\n\toverride flush(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.flush();\n\t\t} else {\n\t\t\tthis._loggerCreationPromise.then(() => this.flush());\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tif (this._logger) {\n\t\t\tthis.disposeLogger();\n\t\t} else {\n\t\t\tthis._loggerCreationPromise.then(() => this.disposeLogger());\n\t\t}\n\t\tsuper.dispose();\n\t}\n\n\tprivate disposeLogger(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.drop();\n\t\t\tthis._logger = undefined;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["SpdLogLevel", "level"]
}
