import{ByteSize as d}from"../../files/common/files.js";import{AbstractMessageLogger as u,LogLevel as t}from"../common/log.js";var L=(e=>(e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Info=2]="Info",e[e.Warning=3]="Warning",e[e.Error=4]="Error",e[e.Critical=5]="Critical",e[e.Off=6]="Off",e))(L||{});async function b(r,o,s,n,a){try{const i=await import("@vscode/spdlog");i.setFlushOn(0);const g=await i.createAsyncRotatingLogger(r,o,s,n);return a?g.clearFormatters():g.setPattern("%Y-%m-%d %H:%M:%S.%e [%l] %v"),g}catch(i){console.error(i)}return null}function l(r,o,s){switch(o){case t.Trace:r.trace(s);break;case t.Debug:r.debug(s);break;case t.Info:r.info(s);break;case t.Warning:r.warn(s);break;case t.Error:r.error(s);break;case t.Off:break;default:throw new Error(`Invalid log level ${o}`)}}function c(r,o){switch(o){case t.Trace:r.setLevel(0);break;case t.Debug:r.setLevel(1);break;case t.Info:r.setLevel(2);break;case t.Warning:r.setLevel(3);break;case t.Error:r.setLevel(4);break;case t.Off:r.setLevel(6);break;default:throw new Error(`Invalid log level ${o}`)}}class m extends u{buffer=[];_loggerCreationPromise;_logger;constructor(o,s,n,a,i){super(),this.setLevel(i),this._loggerCreationPromise=this._createSpdLogLogger(o,s,n,a),this._register(this.onDidChangeLogLevel(g=>{this._logger&&c(this._logger,g)}))}async _createSpdLogLogger(o,s,n,a){const i=n?6:1,g=30/i*d.MB,e=await b(o,s,g,i,a);if(e){this._logger=e,c(this._logger,this.getLevel());for(const{level:f,message:h}of this.buffer)l(this._logger,f,h);this.buffer=[]}}log(o,s){this._logger?l(this._logger,o,s):this.getLevel()<=o&&this.buffer.push({level:o,message:s})}flush(){this._logger?this._logger.flush():this._loggerCreationPromise.then(()=>this.flush())}dispose(){this._logger?this.disposeLogger():this._loggerCreationPromise.then(()=>this.disposeLogger()),super.dispose()}disposeLogger(){this._logger&&(this._logger.drop(),this._logger=void 0)}}export{m as SpdLogLogger};
