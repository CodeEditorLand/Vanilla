import{Event as v}from"../../../../vs/base/common/event.js";import{Disposable as h}from"../../../../vs/base/common/lifecycle.js";import{URI as i}from"../../../../vs/base/common/uri.js";import"../../../../vs/base/common/uriIpc.js";import"../../../../vs/base/parts/ipc/common/ipc.js";import{AbstractLoggerService as d,AbstractMessageLogger as u,AdapterLogger as I,isLogLevel as c}from"../../../../vs/platform/log/common/log.js";class P extends d{constructor(e,r,o,g,n){super(r,o,g);this.windowId=e;this.channel=n;this._register(n.listen("onDidChangeLogLevel",e)(t=>{c(t)?super.setLogLevel(t):super.setLogLevel(i.revive(t[0]),t[1])})),this._register(n.listen("onDidChangeVisibility",e)(([t,a])=>super.setVisibility(i.revive(t),a))),this._register(n.listen("onDidChangeLoggers",e)(({added:t,removed:a})=>{for(const l of t)super.registerLogger({...l,resource:i.revive(l.resource)});for(const l of a)super.deregisterLogger(l.resource)}))}createConsoleMainLogger(){return new I({log:(e,r)=>{this.channel.call("consoleLog",[e,r])}})}registerLogger(e){super.registerLogger(e),this.channel.call("registerLogger",[e,this.windowId])}deregisterLogger(e){super.deregisterLogger(e),this.channel.call("deregisterLogger",[e,this.windowId])}setLogLevel(e,r){super.setLogLevel(e,r),this.channel.call("setLogLevel",[e,r])}setVisibility(e,r){super.setVisibility(e,r),this.channel.call("setVisibility",[this.toResource(e),r])}doCreateLogger(e,r,o){return new m(this.channel,e,r,o,this.windowId)}static setLogLevel(e,r,o){return e.call("setLogLevel",[r,o])}}class m extends u{constructor(e,r,o,g,n){super(g?.logLevel==="always");this.channel=e;this.file=r;this.setLevel(o),this.channel.call("createLogger",[r,g,n]).then(()=>{this.doLog(this.buffer),this.isLoggerCreated=!0})}isLoggerCreated=!1;buffer=[];log(e,r){const o=[[e,r]];this.isLoggerCreated?this.doLog(o):this.buffer.push(...o)}doLog(e){this.channel.call("log",[this.file,e])}}class O{constructor(s,e){this.loggerService=s;this.getUriTransformer=e}listen(s,e){const r=this.getUriTransformer(s);switch(e){case"onDidChangeLoggers":return v.map(this.loggerService.onDidChangeLoggers,o=>({added:[...o.added].map(g=>this.transformLogger(g,r)),removed:[...o.removed].map(g=>this.transformLogger(g,r))}));case"onDidChangeVisibility":return v.map(this.loggerService.onDidChangeVisibility,o=>[r.transformOutgoingURI(o[0]),o[1]]);case"onDidChangeLogLevel":return v.map(this.loggerService.onDidChangeLogLevel,o=>c(o)?o:[r.transformOutgoingURI(o[0]),o[1]])}throw new Error(`Event not found: ${e}`)}async call(s,e,r){const o=this.getUriTransformer(s);switch(e){case"setLogLevel":return c(r[0])?this.loggerService.setLogLevel(r[0]):this.loggerService.setLogLevel(i.revive(o.transformIncoming(r[0][0])),r[0][1]);case"getRegisteredLoggers":return Promise.resolve([...this.loggerService.getRegisteredLoggers()].map(g=>this.transformLogger(g,o)))}throw new Error(`Call not found: ${e}`)}transformLogger(s,e){return{...s,resource:e.transformOutgoingURI(s.resource)}}}class A extends h{constructor(s,e){super(),e.call("setLogLevel",[s.getLogLevel()]),this._register(s.onDidChangeLogLevel(r=>e.call("setLogLevel",[r]))),e.call("getRegisteredLoggers").then(r=>{for(const o of r)s.registerLogger({...o,resource:i.revive(o.resource)})}),this._register(e.listen("onDidChangeVisibility")(([r,o])=>s.setVisibility(i.revive(r),o))),this._register(e.listen("onDidChangeLoggers")(({added:r,removed:o})=>{for(const g of r)s.registerLogger({...g,resource:i.revive(g.resource)});for(const g of o)s.deregisterLogger(g.resource)}))}}export{O as LoggerChannel,P as LoggerChannelClient,A as RemoteLoggerChannelClient};
