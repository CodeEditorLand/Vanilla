{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/common/logIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../base/common/event.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type { IURITransformer } from \"../../../base/common/uriIpc.js\";\nimport type {\n\tIChannel,\n\tIServerChannel,\n} from \"../../../base/parts/ipc/common/ipc.js\";\nimport {\n\tAbstractLoggerService,\n\tAbstractMessageLogger,\n\tAdapterLogger,\n\ttype DidChangeLoggersEvent,\n\ttype ILogger,\n\ttype ILoggerOptions,\n\ttype ILoggerResource,\n\ttype ILoggerService,\n\ttype LogLevel,\n\tisLogLevel,\n} from \"./log.js\";\n\nexport class LoggerChannelClient\n\textends AbstractLoggerService\n\timplements ILoggerService\n{\n\tconstructor(\n\t\tprivate readonly windowId: number | undefined,\n\t\tlogLevel: LogLevel,\n\t\tlogsHome: URI,\n\t\tloggers: ILoggerResource[],\n\t\tprivate readonly channel: IChannel,\n\t) {\n\t\tsuper(logLevel, logsHome, loggers);\n\t\tthis._register(\n\t\t\tchannel.listen<LogLevel | [URI, LogLevel]>(\n\t\t\t\t\"onDidChangeLogLevel\",\n\t\t\t\twindowId,\n\t\t\t)((arg) => {\n\t\t\t\tif (isLogLevel(arg)) {\n\t\t\t\t\tsuper.setLogLevel(arg);\n\t\t\t\t} else {\n\t\t\t\t\tsuper.setLogLevel(URI.revive(arg[0]), arg[1]);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tchannel.listen<[URI, boolean]>(\n\t\t\t\t\"onDidChangeVisibility\",\n\t\t\t\twindowId,\n\t\t\t)(([resource, visibility]) =>\n\t\t\t\tsuper.setVisibility(URI.revive(resource), visibility),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tchannel.listen<DidChangeLoggersEvent>(\n\t\t\t\t\"onDidChangeLoggers\",\n\t\t\t\twindowId,\n\t\t\t)(({ added, removed }) => {\n\t\t\t\tfor (const loggerResource of added) {\n\t\t\t\t\tsuper.registerLogger({\n\t\t\t\t\t\t...loggerResource,\n\t\t\t\t\t\tresource: URI.revive(loggerResource.resource),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tfor (const loggerResource of removed) {\n\t\t\t\t\tsuper.deregisterLogger(loggerResource.resource);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tcreateConsoleMainLogger(): ILogger {\n\t\treturn new AdapterLogger({\n\t\t\tlog: (level: LogLevel, args: any[]) => {\n\t\t\t\tthis.channel.call(\"consoleLog\", [level, args]);\n\t\t\t},\n\t\t});\n\t}\n\n\toverride registerLogger(logger: ILoggerResource): void {\n\t\tsuper.registerLogger(logger);\n\t\tthis.channel.call(\"registerLogger\", [logger, this.windowId]);\n\t}\n\n\toverride deregisterLogger(resource: URI): void {\n\t\tsuper.deregisterLogger(resource);\n\t\tthis.channel.call(\"deregisterLogger\", [resource, this.windowId]);\n\t}\n\n\toverride setLogLevel(logLevel: LogLevel): void;\n\toverride setLogLevel(resource: URI, logLevel: LogLevel): void;\n\toverride setLogLevel(arg1: any, arg2?: any): void {\n\t\tsuper.setLogLevel(arg1, arg2);\n\t\tthis.channel.call(\"setLogLevel\", [arg1, arg2]);\n\t}\n\n\toverride setVisibility(\n\t\tresourceOrId: URI | string,\n\t\tvisibility: boolean,\n\t): void {\n\t\tsuper.setVisibility(resourceOrId, visibility);\n\t\tthis.channel.call(\"setVisibility\", [\n\t\t\tthis.toResource(resourceOrId),\n\t\t\tvisibility,\n\t\t]);\n\t}\n\n\tprotected doCreateLogger(\n\t\tfile: URI,\n\t\tlogLevel: LogLevel,\n\t\toptions?: ILoggerOptions,\n\t): ILogger {\n\t\treturn new Logger(this.channel, file, logLevel, options, this.windowId);\n\t}\n\n\tpublic static setLogLevel(\n\t\tchannel: IChannel,\n\t\tlevel: LogLevel,\n\t): Promise<void>;\n\tpublic static setLogLevel(\n\t\tchannel: IChannel,\n\t\tresource: URI,\n\t\tlevel: LogLevel,\n\t): Promise<void>;\n\tpublic static setLogLevel(\n\t\tchannel: IChannel,\n\t\targ1: any,\n\t\targ2?: any,\n\t): Promise<void> {\n\t\treturn channel.call(\"setLogLevel\", [arg1, arg2]);\n\t}\n}\n\nclass Logger extends AbstractMessageLogger {\n\tprivate isLoggerCreated = false;\n\tprivate buffer: [LogLevel, string][] = [];\n\n\tconstructor(\n\t\tprivate readonly channel: IChannel,\n\t\tprivate readonly file: URI,\n\t\tlogLevel: LogLevel,\n\t\tloggerOptions?: ILoggerOptions,\n\t\twindowId?: number | undefined,\n\t) {\n\t\tsuper(loggerOptions?.logLevel === \"always\");\n\t\tthis.setLevel(logLevel);\n\t\tthis.channel\n\t\t\t.call(\"createLogger\", [file, loggerOptions, windowId])\n\t\t\t.then(() => {\n\t\t\t\tthis.doLog(this.buffer);\n\t\t\t\tthis.isLoggerCreated = true;\n\t\t\t});\n\t}\n\n\tprotected log(level: LogLevel, message: string) {\n\t\tconst messages: [LogLevel, string][] = [[level, message]];\n\t\tif (this.isLoggerCreated) {\n\t\t\tthis.doLog(messages);\n\t\t} else {\n\t\t\tthis.buffer.push(...messages);\n\t\t}\n\t}\n\n\tprivate doLog(messages: [LogLevel, string][]) {\n\t\tthis.channel.call(\"log\", [this.file, messages]);\n\t}\n}\n\nexport class LoggerChannel implements IServerChannel {\n\tconstructor(\n\t\tprivate readonly loggerService: ILoggerService,\n\t\tprivate getUriTransformer: (requestContext: any) => IURITransformer,\n\t) {}\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (event) {\n\t\t\tcase \"onDidChangeLoggers\":\n\t\t\t\treturn Event.map<DidChangeLoggersEvent, DidChangeLoggersEvent>(\n\t\t\t\t\tthis.loggerService.onDidChangeLoggers,\n\t\t\t\t\t(e) => ({\n\t\t\t\t\t\tadded: [...e.added].map((logger) =>\n\t\t\t\t\t\t\tthis.transformLogger(logger, uriTransformer),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tremoved: [...e.removed].map((logger) =>\n\t\t\t\t\t\t\tthis.transformLogger(logger, uriTransformer),\n\t\t\t\t\t\t),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\tcase \"onDidChangeVisibility\":\n\t\t\t\treturn Event.map<[URI, boolean], [URI, boolean]>(\n\t\t\t\t\tthis.loggerService.onDidChangeVisibility,\n\t\t\t\t\t(e) => [uriTransformer.transformOutgoingURI(e[0]), e[1]],\n\t\t\t\t);\n\t\t\tcase \"onDidChangeLogLevel\":\n\t\t\t\treturn Event.map<\n\t\t\t\t\tLogLevel | [URI, LogLevel],\n\t\t\t\t\tLogLevel | [URI, LogLevel]\n\t\t\t\t>(this.loggerService.onDidChangeLogLevel, (e) =>\n\t\t\t\t\tisLogLevel(e)\n\t\t\t\t\t\t? e\n\t\t\t\t\t\t: [uriTransformer.transformOutgoingURI(e[0]), e[1]],\n\t\t\t\t);\n\t\t}\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(context: any, command: string, arg?: any): Promise<any> {\n\t\tconst uriTransformer: IURITransformer | null =\n\t\t\tthis.getUriTransformer(context);\n\t\tswitch (command) {\n\t\t\tcase \"setLogLevel\":\n\t\t\t\treturn isLogLevel(arg[0])\n\t\t\t\t\t? this.loggerService.setLogLevel(arg[0])\n\t\t\t\t\t: this.loggerService.setLogLevel(\n\t\t\t\t\t\t\tURI.revive(\n\t\t\t\t\t\t\t\turiTransformer.transformIncoming(arg[0][0]),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\targ[0][1],\n\t\t\t\t\t\t);\n\t\t\tcase \"getRegisteredLoggers\":\n\t\t\t\treturn Promise.resolve(\n\t\t\t\t\t[...this.loggerService.getRegisteredLoggers()].map(\n\t\t\t\t\t\t(logger) =>\n\t\t\t\t\t\t\tthis.transformLogger(logger, uriTransformer),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n\tprivate transformLogger(\n\t\tlogger: ILoggerResource,\n\t\ttransformer: IURITransformer,\n\t): ILoggerResource {\n\t\treturn {\n\t\t\t...logger,\n\t\t\tresource: transformer.transformOutgoingURI(logger.resource),\n\t\t};\n\t}\n}\n\nexport class RemoteLoggerChannelClient extends Disposable {\n\tconstructor(loggerService: ILoggerService, channel: IChannel) {\n\t\tsuper();\n\n\t\tchannel.call(\"setLogLevel\", [loggerService.getLogLevel()]);\n\t\tthis._register(\n\t\t\tloggerService.onDidChangeLogLevel((arg) =>\n\t\t\t\tchannel.call(\"setLogLevel\", [arg]),\n\t\t\t),\n\t\t);\n\n\t\tchannel\n\t\t\t.call<ILoggerResource[]>(\"getRegisteredLoggers\")\n\t\t\t.then((loggers) => {\n\t\t\t\tfor (const loggerResource of loggers) {\n\t\t\t\t\tloggerService.registerLogger({\n\t\t\t\t\t\t...loggerResource,\n\t\t\t\t\t\tresource: URI.revive(loggerResource.resource),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis._register(\n\t\t\tchannel.listen<[URI, boolean]>(\"onDidChangeVisibility\")(\n\t\t\t\t([resource, visibility]) =>\n\t\t\t\t\tloggerService.setVisibility(\n\t\t\t\t\t\tURI.revive(resource),\n\t\t\t\t\t\tvisibility,\n\t\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tchannel.listen<DidChangeLoggersEvent>(\"onDidChangeLoggers\")(\n\t\t\t\t({ added, removed }) => {\n\t\t\t\t\tfor (const loggerResource of added) {\n\t\t\t\t\t\tloggerService.registerLogger({\n\t\t\t\t\t\t\t...loggerResource,\n\t\t\t\t\t\t\tresource: URI.revive(loggerResource.resource),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tfor (const loggerResource of removed) {\n\t\t\t\t\t\tloggerService.deregisterLogger(loggerResource.resource);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AAMpB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EAOA;AAAA,OACM;AAEA,MAAM,4BACJ,sBAET;AAAA,EACC,YACkB,UACjB,UACA,UACA,SACiB,SAChB;AACD,UAAM,UAAU,UAAU,OAAO;AANhB;AAIA;AAGjB,SAAK;AAAA,MACJ,QAAQ;AAAA,QACP;AAAA,QACA;AAAA,MACD,EAAE,CAAC,QAAQ;AACV,YAAI,WAAW,GAAG,GAAG;AACpB,gBAAM,YAAY,GAAG;AAAA,QACtB,OAAO;AACN,gBAAM,YAAY,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,QAC7C;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK;AAAA,MACJ,QAAQ;AAAA,QACP;AAAA,QACA;AAAA,MACD;AAAA,QAAE,CAAC,CAAC,UAAU,UAAU,MACvB,MAAM,cAAc,IAAI,OAAO,QAAQ,GAAG,UAAU;AAAA,MACrD;AAAA,IACD;AACA,SAAK;AAAA,MACJ,QAAQ;AAAA,QACP;AAAA,QACA;AAAA,MACD,EAAE,CAAC,EAAE,OAAO,QAAQ,MAAM;AACzB,mBAAW,kBAAkB,OAAO;AACnC,gBAAM,eAAe;AAAA,YACpB,GAAG;AAAA,YACH,UAAU,IAAI,OAAO,eAAe,QAAQ;AAAA,UAC7C,CAAC;AAAA,QACF;AACA,mBAAW,kBAAkB,SAAS;AACrC,gBAAM,iBAAiB,eAAe,QAAQ;AAAA,QAC/C;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EA1ED,OA6BA;AAAA;AAAA;AAAA,EA+CC,0BAAmC;AAClC,WAAO,IAAI,cAAc;AAAA,MACxB,KAAK,wBAAC,OAAiB,SAAgB;AACtC,aAAK,QAAQ,KAAK,cAAc,CAAC,OAAO,IAAI,CAAC;AAAA,MAC9C,GAFK;AAAA,IAGN,CAAC;AAAA,EACF;AAAA,EAES,eAAe,QAA+B;AACtD,UAAM,eAAe,MAAM;AAC3B,SAAK,QAAQ,KAAK,kBAAkB,CAAC,QAAQ,KAAK,QAAQ,CAAC;AAAA,EAC5D;AAAA,EAES,iBAAiB,UAAqB;AAC9C,UAAM,iBAAiB,QAAQ;AAC/B,SAAK,QAAQ,KAAK,oBAAoB,CAAC,UAAU,KAAK,QAAQ,CAAC;AAAA,EAChE;AAAA,EAIS,YAAY,MAAW,MAAkB;AACjD,UAAM,YAAY,MAAM,IAAI;AAC5B,SAAK,QAAQ,KAAK,eAAe,CAAC,MAAM,IAAI,CAAC;AAAA,EAC9C;AAAA,EAES,cACR,cACA,YACO;AACP,UAAM,cAAc,cAAc,UAAU;AAC5C,SAAK,QAAQ,KAAK,iBAAiB;AAAA,MAClC,KAAK,WAAW,YAAY;AAAA,MAC5B;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEU,eACT,MACA,UACA,SACU;AACV,WAAO,IAAI,OAAO,KAAK,SAAS,MAAM,UAAU,SAAS,KAAK,QAAQ;AAAA,EACvE;AAAA,EAWA,OAAc,YACb,SACA,MACA,MACgB;AAChB,WAAO,QAAQ,KAAK,eAAe,CAAC,MAAM,IAAI,CAAC;AAAA,EAChD;AACD;AAEA,MAAM,eAAe,sBAAsB;AAAA,EAI1C,YACkB,SACA,MACjB,UACA,eACA,UACC;AACD,UAAM,eAAe,aAAa,QAAQ;AANzB;AACA;AAMjB,SAAK,SAAS,QAAQ;AACtB,SAAK,QACH,KAAK,gBAAgB,CAAC,MAAM,eAAe,QAAQ,CAAC,EACpD,KAAK,MAAM;AACX,WAAK,MAAM,KAAK,MAAM;AACtB,WAAK,kBAAkB;AAAA,IACxB,CAAC;AAAA,EACH;AAAA,EA7JD,OA0I2C;AAAA;AAAA;AAAA,EAClC,kBAAkB;AAAA,EAClB,SAA+B,CAAC;AAAA,EAmB9B,IAAI,OAAiB,SAAiB;AAC/C,UAAM,WAAiC,CAAC,CAAC,OAAO,OAAO,CAAC;AACxD,QAAI,KAAK,iBAAiB;AACzB,WAAK,MAAM,QAAQ;AAAA,IACpB,OAAO;AACN,WAAK,OAAO,KAAK,GAAG,QAAQ;AAAA,IAC7B;AAAA,EACD;AAAA,EAEQ,MAAM,UAAgC;AAC7C,SAAK,QAAQ,KAAK,OAAO,CAAC,KAAK,MAAM,QAAQ,CAAC;AAAA,EAC/C;AACD;AAEO,MAAM,cAAwC;AAAA,EACpD,YACkB,eACT,mBACP;AAFgB;AACT;AAAA,EACN;AAAA,EAjLJ,OA6KqD;AAAA;AAAA;AAAA,EAMpD,OAAO,SAAc,OAA2B;AAC/C,UAAM,iBAAiB,KAAK,kBAAkB,OAAO;AACrD,YAAQ,OAAO;AAAA,MACd,KAAK;AACJ,eAAO,MAAM;AAAA,UACZ,KAAK,cAAc;AAAA,UACnB,CAAC,OAAO;AAAA,YACP,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE;AAAA,cAAI,CAAC,WACxB,KAAK,gBAAgB,QAAQ,cAAc;AAAA,YAC5C;AAAA,YACA,SAAS,CAAC,GAAG,EAAE,OAAO,EAAE;AAAA,cAAI,CAAC,WAC5B,KAAK,gBAAgB,QAAQ,cAAc;AAAA,YAC5C;AAAA,UACD;AAAA,QACD;AAAA,MACD,KAAK;AACJ,eAAO,MAAM;AAAA,UACZ,KAAK,cAAc;AAAA,UACnB,CAAC,MAAM,CAAC,eAAe,qBAAqB,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,QACxD;AAAA,MACD,KAAK;AACJ,eAAO,MAAM;AAAA,UAGX,KAAK,cAAc;AAAA,UAAqB,CAAC,MAC1C,WAAW,CAAC,IACT,IACA,CAAC,eAAe,qBAAqB,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,QACpD;AAAA,IACF;AACA,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,MAAM,KAAK,SAAc,SAAiB,KAAyB;AAClE,UAAM,iBACL,KAAK,kBAAkB,OAAO;AAC/B,YAAQ,SAAS;AAAA,MAChB,KAAK;AACJ,eAAO,WAAW,IAAI,CAAC,CAAC,IACrB,KAAK,cAAc,YAAY,IAAI,CAAC,CAAC,IACrC,KAAK,cAAc;AAAA,UACnB,IAAI;AAAA,YACH,eAAe,kBAAkB,IAAI,CAAC,EAAE,CAAC,CAAC;AAAA,UAC3C;AAAA,UACA,IAAI,CAAC,EAAE,CAAC;AAAA,QACT;AAAA,MACH,KAAK;AACJ,eAAO,QAAQ;AAAA,UACd,CAAC,GAAG,KAAK,cAAc,qBAAqB,CAAC,EAAE;AAAA,YAC9C,CAAC,WACA,KAAK,gBAAgB,QAAQ,cAAc;AAAA,UAC7C;AAAA,QACD;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,mBAAmB,OAAO,EAAE;AAAA,EAC7C;AAAA,EAEQ,gBACP,QACA,aACkB;AAClB,WAAO;AAAA,MACN,GAAG;AAAA,MACH,UAAU,YAAY,qBAAqB,OAAO,QAAQ;AAAA,IAC3D;AAAA,EACD;AACD;AAEO,MAAM,kCAAkC,WAAW;AAAA,EAxP1D,OAwP0D;AAAA;AAAA;AAAA,EACzD,YAAY,eAA+B,SAAmB;AAC7D,UAAM;AAEN,YAAQ,KAAK,eAAe,CAAC,cAAc,YAAY,CAAC,CAAC;AACzD,SAAK;AAAA,MACJ,cAAc;AAAA,QAAoB,CAAC,QAClC,QAAQ,KAAK,eAAe,CAAC,GAAG,CAAC;AAAA,MAClC;AAAA,IACD;AAEA,YACE,KAAwB,sBAAsB,EAC9C,KAAK,CAAC,YAAY;AAClB,iBAAW,kBAAkB,SAAS;AACrC,sBAAc,eAAe;AAAA,UAC5B,GAAG;AAAA,UACH,UAAU,IAAI,OAAO,eAAe,QAAQ;AAAA,QAC7C,CAAC;AAAA,MACF;AAAA,IACD,CAAC;AAEF,SAAK;AAAA,MACJ,QAAQ,OAAuB,uBAAuB;AAAA,QACrD,CAAC,CAAC,UAAU,UAAU,MACrB,cAAc;AAAA,UACb,IAAI,OAAO,QAAQ;AAAA,UACnB;AAAA,QACD;AAAA,MACF;AAAA,IACD;AAEA,SAAK;AAAA,MACJ,QAAQ,OAA8B,oBAAoB;AAAA,QACzD,CAAC,EAAE,OAAO,QAAQ,MAAM;AACvB,qBAAW,kBAAkB,OAAO;AACnC,0BAAc,eAAe;AAAA,cAC5B,GAAG;AAAA,cACH,UAAU,IAAI,OAAO,eAAe,QAAQ;AAAA,YAC7C,CAAC;AAAA,UACF;AACA,qBAAW,kBAAkB,SAAS;AACrC,0BAAc,iBAAiB,eAAe,QAAQ;AAAA,UACvD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
