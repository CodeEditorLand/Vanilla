{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/common/logIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../base/common/uri.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IChannel, IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { AbstractLoggerService, AbstractMessageLogger, AdapterLogger, DidChangeLoggersEvent, ILogger, ILoggerOptions, ILoggerResource, ILoggerService, isLogLevel, LogLevel } from './log.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { IURITransformer } from '../../../base/common/uriIpc.js';\n\nexport class LoggerChannelClient extends AbstractLoggerService implements ILoggerService {\n\n\tconstructor(private readonly windowId: number | undefined, logLevel: LogLevel, logsHome: URI, loggers: ILoggerResource[], private readonly channel: IChannel) {\n\t\tsuper(logLevel, logsHome, loggers);\n\t\tthis._register(channel.listen<LogLevel | [URI, LogLevel]>('onDidChangeLogLevel', windowId)(arg => {\n\t\t\tif (isLogLevel(arg)) {\n\t\t\t\tsuper.setLogLevel(arg);\n\t\t\t} else {\n\t\t\t\tsuper.setLogLevel(URI.revive(arg[0]), arg[1]);\n\t\t\t}\n\t\t}));\n\t\tthis._register(channel.listen<[URI, boolean]>('onDidChangeVisibility', windowId)(([resource, visibility]) => super.setVisibility(URI.revive(resource), visibility)));\n\t\tthis._register(channel.listen<DidChangeLoggersEvent>('onDidChangeLoggers', windowId)(({ added, removed }) => {\n\t\t\tfor (const loggerResource of added) {\n\t\t\t\tsuper.registerLogger({ ...loggerResource, resource: URI.revive(loggerResource.resource) });\n\t\t\t}\n\t\t\tfor (const loggerResource of removed) {\n\t\t\t\tsuper.deregisterLogger(loggerResource.resource);\n\t\t\t}\n\t\t}));\n\t}\n\n\tcreateConsoleMainLogger(): ILogger {\n\t\treturn new AdapterLogger({\n\t\t\tlog: (level: LogLevel, args: any[]) => {\n\t\t\t\tthis.channel.call('consoleLog', [level, args]);\n\t\t\t}\n\t\t});\n\t}\n\n\toverride registerLogger(logger: ILoggerResource): void {\n\t\tsuper.registerLogger(logger);\n\t\tthis.channel.call('registerLogger', [logger, this.windowId]);\n\t}\n\n\toverride deregisterLogger(resource: URI): void {\n\t\tsuper.deregisterLogger(resource);\n\t\tthis.channel.call('deregisterLogger', [resource, this.windowId]);\n\t}\n\n\toverride setLogLevel(logLevel: LogLevel): void;\n\toverride setLogLevel(resource: URI, logLevel: LogLevel): void;\n\toverride setLogLevel(arg1: any, arg2?: any): void {\n\t\tsuper.setLogLevel(arg1, arg2);\n\t\tthis.channel.call('setLogLevel', [arg1, arg2]);\n\t}\n\n\toverride setVisibility(resourceOrId: URI | string, visibility: boolean): void {\n\t\tsuper.setVisibility(resourceOrId, visibility);\n\t\tthis.channel.call('setVisibility', [this.toResource(resourceOrId), visibility]);\n\t}\n\n\tprotected doCreateLogger(file: URI, logLevel: LogLevel, options?: ILoggerOptions): ILogger {\n\t\treturn new Logger(this.channel, file, logLevel, options, this.windowId);\n\t}\n\n\tpublic static setLogLevel(channel: IChannel, level: LogLevel): Promise<void>;\n\tpublic static setLogLevel(channel: IChannel, resource: URI, level: LogLevel): Promise<void>;\n\tpublic static setLogLevel(channel: IChannel, arg1: any, arg2?: any): Promise<void> {\n\t\treturn channel.call('setLogLevel', [arg1, arg2]);\n\t}\n\n}\n\nclass Logger extends AbstractMessageLogger {\n\n\tprivate isLoggerCreated: boolean = false;\n\tprivate buffer: [LogLevel, string][] = [];\n\n\tconstructor(\n\t\tprivate readonly channel: IChannel,\n\t\tprivate readonly file: URI,\n\t\tlogLevel: LogLevel,\n\t\tloggerOptions?: ILoggerOptions,\n\t\twindowId?: number | undefined\n\t) {\n\t\tsuper(loggerOptions?.logLevel === 'always');\n\t\tthis.setLevel(logLevel);\n\t\tthis.channel.call('createLogger', [file, loggerOptions, windowId])\n\t\t\t.then(() => {\n\t\t\t\tthis.doLog(this.buffer);\n\t\t\t\tthis.isLoggerCreated = true;\n\t\t\t});\n\t}\n\n\tprotected log(level: LogLevel, message: string) {\n\t\tconst messages: [LogLevel, string][] = [[level, message]];\n\t\tif (this.isLoggerCreated) {\n\t\t\tthis.doLog(messages);\n\t\t} else {\n\t\t\tthis.buffer.push(...messages);\n\t\t}\n\t}\n\n\tprivate doLog(messages: [LogLevel, string][]) {\n\t\tthis.channel.call('log', [this.file, messages]);\n\t}\n}\n\nexport class LoggerChannel implements IServerChannel {\n\n\tconstructor(private readonly loggerService: ILoggerService, private getUriTransformer: (requestContext: any) => IURITransformer) { }\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeLoggers': return Event.map<DidChangeLoggersEvent, DidChangeLoggersEvent>(this.loggerService.onDidChangeLoggers, (e) =>\n\t\t\t({\n\t\t\t\tadded: [...e.added].map(logger => this.transformLogger(logger, uriTransformer)),\n\t\t\t\tremoved: [...e.removed].map(logger => this.transformLogger(logger, uriTransformer)),\n\t\t\t}));\n\t\t\tcase 'onDidChangeVisibility': return Event.map<[URI, boolean], [URI, boolean]>(this.loggerService.onDidChangeVisibility, e => [uriTransformer.transformOutgoingURI(e[0]), e[1]]);\n\t\t\tcase 'onDidChangeLogLevel': return Event.map<LogLevel | [URI, LogLevel], LogLevel | [URI, LogLevel]>(this.loggerService.onDidChangeLogLevel, e => isLogLevel(e) ? e : [uriTransformer.transformOutgoingURI(e[0]), e[1]]);\n\t\t}\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(context: any, command: string, arg?: any): Promise<any> {\n\t\tconst uriTransformer: IURITransformer | null = this.getUriTransformer(context);\n\t\tswitch (command) {\n\t\t\tcase 'setLogLevel': return isLogLevel(arg[0]) ? this.loggerService.setLogLevel(arg[0]) : this.loggerService.setLogLevel(URI.revive(uriTransformer.transformIncoming(arg[0][0])), arg[0][1]);\n\t\t\tcase 'getRegisteredLoggers': return Promise.resolve([...this.loggerService.getRegisteredLoggers()].map(logger => this.transformLogger(logger, uriTransformer)));\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n\tprivate transformLogger(logger: ILoggerResource, transformer: IURITransformer): ILoggerResource {\n\t\treturn {\n\t\t\t...logger,\n\t\t\tresource: transformer.transformOutgoingURI(logger.resource)\n\t\t};\n\t}\n\n}\n\nexport class RemoteLoggerChannelClient extends Disposable {\n\n\tconstructor(loggerService: ILoggerService, channel: IChannel) {\n\t\tsuper();\n\n\t\tchannel.call('setLogLevel', [loggerService.getLogLevel()]);\n\t\tthis._register(loggerService.onDidChangeLogLevel(arg => channel.call('setLogLevel', [arg])));\n\n\t\tchannel.call<ILoggerResource[]>('getRegisteredLoggers').then(loggers => {\n\t\t\tfor (const loggerResource of loggers) {\n\t\t\t\tloggerService.registerLogger({ ...loggerResource, resource: URI.revive(loggerResource.resource) });\n\t\t\t}\n\t\t});\n\n\t\tthis._register(channel.listen<[URI, boolean]>('onDidChangeVisibility')(([resource, visibility]) => loggerService.setVisibility(URI.revive(resource), visibility)));\n\n\t\tthis._register(channel.listen<DidChangeLoggersEvent>('onDidChangeLoggers')(({ added, removed }) => {\n\t\t\tfor (const loggerResource of added) {\n\t\t\t\tloggerService.registerLogger({ ...loggerResource, resource: URI.revive(loggerResource.resource) });\n\t\t\t}\n\t\t\tfor (const loggerResource of removed) {\n\t\t\t\tloggerService.deregisterLogger(loggerResource.resource);\n\t\t\t}\n\t\t}));\n\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
