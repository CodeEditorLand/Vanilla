{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/common/fileLog.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ThrottledDelayer } from \"../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { basename, dirname, joinPath } from \"../../../base/common/resources.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport {\n\tByteSize,\n\ttype FileOperationError,\n\tFileOperationResult,\n\tIFileService,\n\twhenProviderRegistered,\n} from \"../../files/common/files.js\";\nimport { BufferLogger } from \"./bufferLog.js\";\nimport {\n\tAbstractLoggerService,\n\tAbstractMessageLogger,\n\ttype ILogger,\n\ttype ILoggerOptions,\n\ttype ILoggerService,\n\tLogLevel,\n} from \"./log.js\";\n\nconst MAX_FILE_SIZE = 5 * ByteSize.MB;\n\nclass FileLogger extends AbstractMessageLogger implements ILogger {\n\tprivate readonly initializePromise: Promise<void>;\n\tprivate readonly flushDelayer: ThrottledDelayer<void>;\n\tprivate backupIndex = 1;\n\tprivate buffer = \"\";\n\n\tconstructor(\n\t\tprivate readonly resource: URI,\n\t\tlevel: LogLevel,\n\t\tprivate readonly donotUseFormatters: boolean,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\t\tthis.setLevel(level);\n\t\tthis.flushDelayer = new ThrottledDelayer<void>(100 /* buffer saves over a short time */);\n\t\tthis.initializePromise = this.initialize();\n\t}\n\n\toverride async flush(): Promise<void> {\n\t\tif (!this.buffer) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.initializePromise;\n\t\tlet content = await this.loadContent();\n\t\tif (content.length > MAX_FILE_SIZE) {\n\t\t\tawait this.fileService.writeFile(\n\t\t\t\tthis.getBackupResource(),\n\t\t\t\tVSBuffer.fromString(content),\n\t\t\t);\n\t\t\tcontent = \"\";\n\t\t}\n\t\tif (this.buffer) {\n\t\t\tcontent += this.buffer;\n\t\t\tthis.buffer = \"\";\n\t\t\tawait this.fileService.writeFile(\n\t\t\t\tthis.resource,\n\t\t\t\tVSBuffer.fromString(content),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.createFile(this.resource);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\t(<FileOperationError>error).fileOperationResult !==\n\t\t\t\tFileOperationResult.FILE_MODIFIED_SINCE\n\t\t\t) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected log(level: LogLevel, message: string): void {\n\t\tif (this.donotUseFormatters) {\n\t\t\tthis.buffer += message;\n\t\t} else {\n\t\t\tthis.buffer += `${this.getCurrentTimestamp()} [${this.stringifyLogLevel(level)}] ${message}\\n`;\n\t\t}\n\t\tthis.flushDelayer.trigger(() => this.flush());\n\t}\n\n\tprivate getCurrentTimestamp(): string {\n\t\tconst toTwoDigits = (v: number) => (v < 10 ? `0${v}` : v);\n\t\tconst toThreeDigits = (v: number) =>\n\t\t\tv < 10 ? `00${v}` : v < 100 ? `0${v}` : v;\n\t\tconst currentTime = new Date();\n\t\treturn `${currentTime.getFullYear()}-${toTwoDigits(currentTime.getMonth() + 1)}-${toTwoDigits(currentTime.getDate())} ${toTwoDigits(currentTime.getHours())}:${toTwoDigits(currentTime.getMinutes())}:${toTwoDigits(currentTime.getSeconds())}.${toThreeDigits(currentTime.getMilliseconds())}`;\n\t}\n\n\tprivate getBackupResource(): URI {\n\t\tthis.backupIndex = this.backupIndex > 5 ? 1 : this.backupIndex;\n\t\treturn joinPath(\n\t\t\tdirname(this.resource),\n\t\t\t`${basename(this.resource)}_${this.backupIndex++}`,\n\t\t);\n\t}\n\n\tprivate async loadContent(): Promise<string> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.resource);\n\t\t\treturn content.value.toString();\n\t\t} catch (e) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tprivate stringifyLogLevel(level: LogLevel): string {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.Debug:\n\t\t\t\treturn \"debug\";\n\t\t\tcase LogLevel.Error:\n\t\t\t\treturn \"error\";\n\t\t\tcase LogLevel.Info:\n\t\t\t\treturn \"info\";\n\t\t\tcase LogLevel.Trace:\n\t\t\t\treturn \"trace\";\n\t\t\tcase LogLevel.Warning:\n\t\t\t\treturn \"warning\";\n\t\t}\n\t\treturn \"\";\n\t}\n}\n\nexport class FileLoggerService\n\textends AbstractLoggerService\n\timplements ILoggerService\n{\n\tconstructor(\n\t\tlogLevel: LogLevel,\n\t\tlogsHome: URI,\n\t\tprivate readonly fileService: IFileService,\n\t) {\n\t\tsuper(logLevel, logsHome);\n\t}\n\n\tprotected doCreateLogger(\n\t\tresource: URI,\n\t\tlogLevel: LogLevel,\n\t\toptions?: ILoggerOptions,\n\t): ILogger {\n\t\tconst logger = new BufferLogger(logLevel);\n\t\twhenProviderRegistered(resource, this.fileService).then(\n\t\t\t() =>\n\t\t\t\t(logger.logger = new FileLogger(\n\t\t\t\t\tresource,\n\t\t\t\t\tlogger.getLevel(),\n\t\t\t\t\t!!options?.donotUseFormatters,\n\t\t\t\t\tthis.fileService,\n\t\t\t\t)),\n\t\t);\n\t\treturn logger;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
