{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/common/log.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { isWindows } from '../../../base/common/platform.js';\nimport { joinPath } from '../../../base/common/resources.js';\nimport { Mutable, isNumber, isString } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ILocalizedString } from '../../action/common/action.js';\nimport { RawContextKey } from '../../contextkey/common/contextkey.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const ILogService = createDecorator<ILogService>('logService');\nexport const ILoggerService = createDecorator<ILoggerService>('loggerService');\n\nfunction now(): string {\n\treturn new Date().toISOString();\n}\n\nexport function isLogLevel(thing: unknown): thing is LogLevel {\n\treturn isNumber(thing);\n}\n\nexport enum LogLevel {\n\tOff,\n\tTrace,\n\tDebug,\n\tInfo,\n\tWarning,\n\tError\n}\n\nexport const DEFAULT_LOG_LEVEL: LogLevel = LogLevel.Info;\n\nexport interface ILogger extends IDisposable {\n\tonDidChangeLogLevel: Event<LogLevel>;\n\tgetLevel(): LogLevel;\n\tsetLevel(level: LogLevel): void;\n\n\ttrace(message: string, ...args: any[]): void;\n\tdebug(message: string, ...args: any[]): void;\n\tinfo(message: string, ...args: any[]): void;\n\twarn(message: string, ...args: any[]): void;\n\terror(message: string | Error, ...args: any[]): void;\n\n\t/**\n\t * An operation to flush the contents. Can be synchronous.\n\t */\n\tflush(): void;\n}\n\nexport function log(logger: ILogger, level: LogLevel, message: string): void {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: logger.trace(message); break;\n\t\tcase LogLevel.Debug: logger.debug(message); break;\n\t\tcase LogLevel.Info: logger.info(message); break;\n\t\tcase LogLevel.Warning: logger.warn(message); break;\n\t\tcase LogLevel.Error: logger.error(message); break;\n\t\tcase LogLevel.Off: /* do nothing */ break;\n\t\tdefault: throw new Error(`Invalid log level ${level}`);\n\t}\n}\n\nfunction format(args: any, verbose: boolean = false): string {\n\tlet result = '';\n\n\tfor (let i = 0; i < args.length; i++) {\n\t\tlet a = args[i];\n\n\t\tif (a instanceof Error) {\n\t\t\ta = toErrorMessage(a, verbose);\n\t\t}\n\n\t\tif (typeof a === 'object') {\n\t\t\ttry {\n\t\t\t\ta = JSON.stringify(a);\n\t\t\t} catch (e) { }\n\t\t}\n\n\t\tresult += (i > 0 ? ' ' : '') + a;\n\t}\n\n\treturn result;\n}\n\nexport interface ILogService extends ILogger {\n\treadonly _serviceBrand: undefined;\n}\n\nexport interface ILoggerOptions {\n\n\t/**\n\t * Id of the logger.\n\t */\n\tid?: string;\n\n\t/**\n\t * Name of the logger.\n\t */\n\tname?: string;\n\n\t/**\n\t * Do not create rotating files if max size exceeds.\n\t */\n\tdonotRotate?: boolean;\n\n\t/**\n\t * Do not use formatters.\n\t */\n\tdonotUseFormatters?: boolean;\n\n\t/**\n\t * When to log. Set to `always` to log always.\n\t */\n\tlogLevel?: 'always' | LogLevel;\n\n\t/**\n\t * Whether the log should be hidden from the user.\n\t */\n\thidden?: boolean;\n\n\t/**\n\t * Condition which must be true to show this logger\n\t */\n\twhen?: string;\n\n\t/**\n\t * Id of the extension that created this logger.\n\t */\n\textensionId?: string;\n}\n\nexport interface ILoggerResource {\n\treadonly resource: URI;\n\treadonly id: string;\n\treadonly name?: string;\n\treadonly logLevel?: LogLevel;\n\treadonly hidden?: boolean;\n\treadonly when?: string;\n\treadonly extensionId?: string;\n}\n\nexport type DidChangeLoggersEvent = {\n\treadonly added: Iterable<ILoggerResource>;\n\treadonly removed: Iterable<ILoggerResource>;\n};\n\nexport interface ILoggerService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Creates a logger for the given resource, or gets one if it already exists.\n\t *\n\t * This will also register the logger with the logger service.\n\t */\n\tcreateLogger(resource: URI, options?: ILoggerOptions): ILogger;\n\n\t/**\n\t * Creates a logger with the given id in the logs folder, or gets one if it already exists.\n\t *\n\t * This will also register the logger with the logger service.\n\t */\n\tcreateLogger(id: string, options?: Omit<ILoggerOptions, 'id'>): ILogger;\n\n\t/**\n\t * Gets an existing logger, if any.\n\t */\n\tgetLogger(resourceOrId: URI | string): ILogger | undefined;\n\n\t/**\n\t * An event which fires when the log level of a logger has changed\n\t */\n\treadonly onDidChangeLogLevel: Event<LogLevel | [URI, LogLevel]>;\n\n\t/**\n\t * Set default log level.\n\t */\n\tsetLogLevel(level: LogLevel): void;\n\n\t/**\n\t * Set log level for a logger.\n\t */\n\tsetLogLevel(resource: URI, level: LogLevel): void;\n\n\t/**\n\t * Get log level for a logger or the default log level.\n\t */\n\tgetLogLevel(resource?: URI): LogLevel;\n\n\t/**\n\t * An event which fires when the visibility of a logger has changed\n\t */\n\treadonly onDidChangeVisibility: Event<[URI, boolean]>;\n\n\t/**\n\t * Set the visibility of a logger.\n\t */\n\tsetVisibility(resourceOrId: URI | string, visible: boolean): void;\n\n\t/**\n\t * An event which fires when the logger resources are changed\n\t */\n\treadonly onDidChangeLoggers: Event<DidChangeLoggersEvent>;\n\n\t/**\n\t * Register a logger with the logger service.\n\t *\n\t * Note that this will not create a logger, but only register it.\n\t *\n\t * Use `createLogger` to create a logger and register it.\n\t *\n\t * Use it when you want to register a logger that is not created by the logger service.\n\t */\n\tregisterLogger(resource: ILoggerResource): void;\n\n\t/**\n\t * Deregister the logger for the given resource.\n\t */\n\tderegisterLogger(resource: URI): void;\n\n\t/**\n\t * Get all registered loggers\n\t */\n\tgetRegisteredLoggers(): Iterable<ILoggerResource>;\n\n\t/**\n\t * Get the registered logger for the given resource.\n\t */\n\tgetRegisteredLogger(resource: URI): ILoggerResource | undefined;\n}\n\nexport abstract class AbstractLogger extends Disposable implements ILogger {\n\n\tprivate level: LogLevel = DEFAULT_LOG_LEVEL;\n\tprivate readonly _onDidChangeLogLevel: Emitter<LogLevel> = this._register(new Emitter<LogLevel>());\n\treadonly onDidChangeLogLevel: Event<LogLevel> = this._onDidChangeLogLevel.event;\n\n\tsetLevel(level: LogLevel): void {\n\t\tif (this.level !== level) {\n\t\t\tthis.level = level;\n\t\t\tthis._onDidChangeLogLevel.fire(this.level);\n\t\t}\n\t}\n\n\tgetLevel(): LogLevel {\n\t\treturn this.level;\n\t}\n\n\tprotected checkLogLevel(level: LogLevel): boolean {\n\t\treturn this.level !== LogLevel.Off && this.level <= level;\n\t}\n\n\tabstract trace(message: string, ...args: any[]): void;\n\tabstract debug(message: string, ...args: any[]): void;\n\tabstract info(message: string, ...args: any[]): void;\n\tabstract warn(message: string, ...args: any[]): void;\n\tabstract error(message: string | Error, ...args: any[]): void;\n\tabstract flush(): void;\n}\n\nexport abstract class AbstractMessageLogger extends AbstractLogger implements ILogger {\n\n\tprotected abstract log(level: LogLevel, message: string): void;\n\n\tconstructor(private readonly logAlways?: boolean) {\n\t\tsuper();\n\t}\n\n\tprotected override checkLogLevel(level: LogLevel): boolean {\n\t\treturn this.logAlways || super.checkLogLevel(level);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Trace)) {\n\t\t\tthis.log(LogLevel.Trace, format([message, ...args], true));\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Debug)) {\n\t\t\tthis.log(LogLevel.Debug, format([message, ...args]));\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Info)) {\n\t\t\tthis.log(LogLevel.Info, format([message, ...args]));\n\t\t}\n\t}\n\n\twarn(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Warning)) {\n\t\t\tthis.log(LogLevel.Warning, format([message, ...args]));\n\t\t}\n\t}\n\n\terror(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Error)) {\n\n\t\t\tif (message instanceof Error) {\n\t\t\t\tconst array = Array.prototype.slice.call(arguments) as any[];\n\t\t\t\tarray[0] = message.stack;\n\t\t\t\tthis.log(LogLevel.Error, format(array));\n\t\t\t} else {\n\t\t\t\tthis.log(LogLevel.Error, format([message, ...args]));\n\t\t\t}\n\t\t}\n\t}\n\n\tflush(): void { }\n}\n\n\nexport class ConsoleMainLogger extends AbstractLogger implements ILogger {\n\n\tprivate useColors: boolean;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t\tthis.useColors = !isWindows;\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Trace)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[main ${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[main ${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Debug)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[main ${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[main ${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Info)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[main ${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[main ${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\twarn(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Warning)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.warn(`\\x1b[93m[main ${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`[main ${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\terror(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Error)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.error(`\\x1b[91m[main ${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.error(`[main ${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tflush(): void {\n\t\t// noop\n\t}\n\n}\n\nexport class ConsoleLogger extends AbstractLogger implements ILogger {\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL, private readonly useColors: boolean = true) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Trace)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log('%cTRACE', 'color: #888', message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Debug)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log('%cDEBUG', 'background: #eee; color: #888', message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Info)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log('%c INFO', 'color: #33f', message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\twarn(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Warning)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log('%c WARN', 'color: #993', message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\terror(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Error)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log('%c  ERR', 'color: #f33', message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.error(message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tflush(): void {\n\t\t// noop\n\t}\n}\n\nexport class AdapterLogger extends AbstractLogger implements ILogger {\n\n\tconstructor(private readonly adapter: { log: (logLevel: LogLevel, args: any[]) => void }, logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Trace)) {\n\t\t\tthis.adapter.log(LogLevel.Trace, [this.extractMessage(message), ...args]);\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Debug)) {\n\t\t\tthis.adapter.log(LogLevel.Debug, [this.extractMessage(message), ...args]);\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Info)) {\n\t\t\tthis.adapter.log(LogLevel.Info, [this.extractMessage(message), ...args]);\n\t\t}\n\t}\n\n\twarn(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Warning)) {\n\t\t\tthis.adapter.log(LogLevel.Warning, [this.extractMessage(message), ...args]);\n\t\t}\n\t}\n\n\terror(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Error)) {\n\t\t\tthis.adapter.log(LogLevel.Error, [this.extractMessage(message), ...args]);\n\t\t}\n\t}\n\n\tprivate extractMessage(msg: string | Error): string {\n\t\tif (typeof msg === 'string') {\n\t\t\treturn msg;\n\t\t}\n\n\t\treturn toErrorMessage(msg, this.checkLogLevel(LogLevel.Trace));\n\t}\n\n\tflush(): void {\n\t\t// noop\n\t}\n}\n\nexport class MultiplexLogger extends AbstractLogger implements ILogger {\n\n\tconstructor(private readonly loggers: ReadonlyArray<ILogger>) {\n\t\tsuper();\n\t\tif (loggers.length) {\n\t\t\tthis.setLevel(loggers[0].getLevel());\n\t\t}\n\t}\n\n\toverride setLevel(level: LogLevel): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.setLevel(level);\n\t\t}\n\t\tsuper.setLevel(level);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.trace(message, ...args);\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.debug(message, ...args);\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.info(message, ...args);\n\t\t}\n\t}\n\n\twarn(message: string, ...args: any[]): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.warn(message, ...args);\n\t\t}\n\t}\n\n\terror(message: string | Error, ...args: any[]): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.error(message, ...args);\n\t\t}\n\t}\n\n\tflush(): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.flush();\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.dispose();\n\t\t}\n\t\tsuper.dispose();\n\t}\n}\n\ntype LoggerEntry = { logger: ILogger | undefined; info: Mutable<ILoggerResource> };\n\nexport abstract class AbstractLoggerService extends Disposable implements ILoggerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _loggers = new ResourceMap<LoggerEntry>();\n\n\tprivate _onDidChangeLoggers = this._register(new Emitter<{ added: ILoggerResource[]; removed: ILoggerResource[] }>);\n\treadonly onDidChangeLoggers = this._onDidChangeLoggers.event;\n\n\tprivate _onDidChangeLogLevel = this._register(new Emitter<LogLevel | [URI, LogLevel]>);\n\treadonly onDidChangeLogLevel = this._onDidChangeLogLevel.event;\n\n\tprivate _onDidChangeVisibility = this._register(new Emitter<[URI, boolean]>);\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tconstructor(\n\t\tprotected logLevel: LogLevel,\n\t\tprivate readonly logsHome: URI,\n\t\tloggerResources?: Iterable<ILoggerResource>,\n\t) {\n\t\tsuper();\n\t\tif (loggerResources) {\n\t\t\tfor (const loggerResource of loggerResources) {\n\t\t\t\tthis._loggers.set(loggerResource.resource, { logger: undefined, info: loggerResource });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getLoggerEntry(resourceOrId: URI | string): LoggerEntry | undefined {\n\t\tif (isString(resourceOrId)) {\n\t\t\treturn [...this._loggers.values()].find(logger => logger.info.id === resourceOrId);\n\t\t}\n\t\treturn this._loggers.get(resourceOrId);\n\t}\n\n\tgetLogger(resourceOrId: URI | string): ILogger | undefined {\n\t\treturn this.getLoggerEntry(resourceOrId)?.logger;\n\t}\n\n\tcreateLogger(idOrResource: URI | string, options?: ILoggerOptions): ILogger {\n\t\tconst resource = this.toResource(idOrResource);\n\t\tconst id = isString(idOrResource) ? idOrResource : (options?.id ?? hash(resource.toString()).toString(16));\n\t\tlet logger = this._loggers.get(resource)?.logger;\n\t\tconst logLevel = options?.logLevel === 'always' ? LogLevel.Trace : options?.logLevel;\n\t\tif (!logger) {\n\t\t\tlogger = this.doCreateLogger(resource, logLevel ?? this.getLogLevel(resource) ?? this.logLevel, { ...options, id });\n\t\t}\n\t\tconst loggerEntry: LoggerEntry = {\n\t\t\tlogger,\n\t\t\tinfo: { resource, id, logLevel, name: options?.name, hidden: options?.hidden, extensionId: options?.extensionId, when: options?.when }\n\t\t};\n\t\tthis.registerLogger(loggerEntry.info);\n\t\t// TODO: @sandy081 Remove this once registerLogger can take ILogger\n\t\tthis._loggers.set(resource, loggerEntry);\n\t\treturn logger;\n\t}\n\n\tprotected toResource(idOrResource: string | URI): URI {\n\t\treturn isString(idOrResource) ? joinPath(this.logsHome, `${idOrResource}.log`) : idOrResource;\n\t}\n\n\tsetLogLevel(logLevel: LogLevel): void;\n\tsetLogLevel(resource: URI, logLevel: LogLevel): void;\n\tsetLogLevel(arg1: any, arg2?: any): void {\n\t\tif (URI.isUri(arg1)) {\n\t\t\tconst resource = arg1;\n\t\t\tconst logLevel = arg2;\n\t\t\tconst logger = this._loggers.get(resource);\n\t\t\tif (logger && logLevel !== logger.info.logLevel) {\n\t\t\t\tlogger.info.logLevel = logLevel === this.logLevel ? undefined : logLevel;\n\t\t\t\tlogger.logger?.setLevel(logLevel);\n\t\t\t\tthis._loggers.set(logger.info.resource, logger);\n\t\t\t\tthis._onDidChangeLogLevel.fire([resource, logLevel]);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logLevel = arg1;\n\t\t\tfor (const [resource, logger] of this._loggers.entries()) {\n\t\t\t\tif (this._loggers.get(resource)?.info.logLevel === undefined) {\n\t\t\t\t\tlogger.logger?.setLevel(this.logLevel);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onDidChangeLogLevel.fire(this.logLevel);\n\t\t}\n\t}\n\n\tsetVisibility(resourceOrId: URI | string, visibility: boolean): void {\n\t\tconst logger = this.getLoggerEntry(resourceOrId);\n\t\tif (logger && visibility !== !logger.info.hidden) {\n\t\t\tlogger.info.hidden = !visibility;\n\t\t\tthis._loggers.set(logger.info.resource, logger);\n\t\t\tthis._onDidChangeVisibility.fire([logger.info.resource, visibility]);\n\t\t}\n\t}\n\n\tgetLogLevel(resource?: URI): LogLevel {\n\t\tlet logLevel;\n\t\tif (resource) {\n\t\t\tlogLevel = this._loggers.get(resource)?.info.logLevel;\n\t\t}\n\t\treturn logLevel ?? this.logLevel;\n\t}\n\n\tregisterLogger(resource: ILoggerResource): void {\n\t\tconst existing = this._loggers.get(resource.resource);\n\t\tif (existing) {\n\t\t\tif (existing.info.hidden !== resource.hidden) {\n\t\t\t\tthis.setVisibility(resource.resource, !resource.hidden);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._loggers.set(resource.resource, { info: resource, logger: undefined });\n\t\t\tthis._onDidChangeLoggers.fire({ added: [resource], removed: [] });\n\t\t}\n\t}\n\n\tderegisterLogger(resource: URI): void {\n\t\tconst existing = this._loggers.get(resource);\n\t\tif (existing) {\n\t\t\tif (existing.logger) {\n\t\t\t\texisting.logger.dispose();\n\t\t\t}\n\t\t\tthis._loggers.delete(resource);\n\t\t\tthis._onDidChangeLoggers.fire({ added: [], removed: [existing.info] });\n\t\t}\n\t}\n\n\t*getRegisteredLoggers(): Iterable<ILoggerResource> {\n\t\tfor (const entry of this._loggers.values()) {\n\t\t\tyield entry.info;\n\t\t}\n\t}\n\n\tgetRegisteredLogger(resource: URI): ILoggerResource | undefined {\n\t\treturn this._loggers.get(resource)?.info;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._loggers.forEach(logger => logger.logger?.dispose());\n\t\tthis._loggers.clear();\n\t\tsuper.dispose();\n\t}\n\n\tprotected abstract doCreateLogger(resource: URI, logLevel: LogLevel, options?: ILoggerOptions): ILogger;\n}\n\nexport class NullLogger implements ILogger {\n\treadonly onDidChangeLogLevel: Event<LogLevel> = new Emitter<LogLevel>().event;\n\tsetLevel(level: LogLevel): void { }\n\tgetLevel(): LogLevel { return LogLevel.Info; }\n\ttrace(message: string, ...args: any[]): void { }\n\tdebug(message: string, ...args: any[]): void { }\n\tinfo(message: string, ...args: any[]): void { }\n\twarn(message: string, ...args: any[]): void { }\n\terror(message: string | Error, ...args: any[]): void { }\n\tcritical(message: string | Error, ...args: any[]): void { }\n\tdispose(): void { }\n\tflush(): void { }\n}\n\nexport class NullLogService extends NullLogger implements ILogService {\n\tdeclare readonly _serviceBrand: undefined;\n}\n\nexport function getLogLevel(environmentService: IEnvironmentService): LogLevel {\n\tif (environmentService.verbose) {\n\t\treturn LogLevel.Trace;\n\t}\n\tif (typeof environmentService.logLevel === 'string') {\n\t\tconst logLevel = parseLogLevel(environmentService.logLevel.toLowerCase());\n\t\tif (logLevel !== undefined) {\n\t\t\treturn logLevel;\n\t\t}\n\t}\n\treturn DEFAULT_LOG_LEVEL;\n}\n\nexport function LogLevelToString(logLevel: LogLevel): string {\n\tswitch (logLevel) {\n\t\tcase LogLevel.Trace: return 'trace';\n\t\tcase LogLevel.Debug: return 'debug';\n\t\tcase LogLevel.Info: return 'info';\n\t\tcase LogLevel.Warning: return 'warn';\n\t\tcase LogLevel.Error: return 'error';\n\t\tcase LogLevel.Off: return 'off';\n\t}\n}\n\nexport function LogLevelToLocalizedString(logLevel: LogLevel): ILocalizedString {\n\tswitch (logLevel) {\n\t\tcase LogLevel.Trace: return { original: 'Trace', value: nls.localize('trace', \"Trace\") };\n\t\tcase LogLevel.Debug: return { original: 'Debug', value: nls.localize('debug', \"Debug\") };\n\t\tcase LogLevel.Info: return { original: 'Info', value: nls.localize('info', \"Info\") };\n\t\tcase LogLevel.Warning: return { original: 'Warning', value: nls.localize('warn', \"Warning\") };\n\t\tcase LogLevel.Error: return { original: 'Error', value: nls.localize('error', \"Error\") };\n\t\tcase LogLevel.Off: return { original: 'Off', value: nls.localize('off', \"Off\") };\n\t}\n}\n\nexport function parseLogLevel(logLevel: string): LogLevel | undefined {\n\tswitch (logLevel) {\n\t\tcase 'trace':\n\t\t\treturn LogLevel.Trace;\n\t\tcase 'debug':\n\t\t\treturn LogLevel.Debug;\n\t\tcase 'info':\n\t\t\treturn LogLevel.Info;\n\t\tcase 'warn':\n\t\t\treturn LogLevel.Warning;\n\t\tcase 'error':\n\t\t\treturn LogLevel.Error;\n\t\tcase 'critical':\n\t\t\treturn LogLevel.Error;\n\t\tcase 'off':\n\t\t\treturn LogLevel.Off;\n\t}\n\treturn undefined;\n}\n\n// Contexts\nexport const CONTEXT_LOG_LEVEL = new RawContextKey<string>('logLevel', LogLevelToString(LogLevel.Info));\n"],
  "mappings": "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",
  "names": ["LogLevel"]
}
