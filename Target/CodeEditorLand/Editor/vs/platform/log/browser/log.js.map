{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/browser/log.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from \"../../../base/browser/window.js\";\nimport { relativePath } from \"../../../base/common/resources.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport type { IEnvironmentService } from \"../../environment/common/environment.js\";\nimport type { IFileService } from \"../../files/common/files.js\";\nimport {\n\tAdapterLogger,\n\tDEFAULT_LOG_LEVEL,\n\ttype ILogger,\n\tLogLevel,\n} from \"../common/log.js\";\n\nexport interface IAutomatedWindow {\n\tcodeAutomationLog(type: string, args: any[]): void;\n\tcodeAutomationExit(code: number, logs: Array<ILogFile>): void;\n}\n\nexport interface ILogFile {\n\treadonly relativePath: string;\n\treadonly contents: string;\n}\n\n/**\n * Only used in browser contexts where the log files are not stored on disk\n * but in IndexedDB. A method to get all logs with their contents so that\n * CI automation can persist them.\n */\nexport async function getLogs(\n\tfileService: IFileService,\n\tenvironmentService: IEnvironmentService,\n): Promise<ILogFile[]> {\n\tconst result: ILogFile[] = [];\n\n\tawait doGetLogs(\n\t\tfileService,\n\t\tresult,\n\t\tenvironmentService.logsHome,\n\t\tenvironmentService.logsHome,\n\t);\n\n\treturn result;\n}\n\nasync function doGetLogs(\n\tfileService: IFileService,\n\tlogs: ILogFile[],\n\tcurFolder: URI,\n\tlogsHome: URI,\n): Promise<void> {\n\tconst stat = await fileService.resolve(curFolder);\n\n\tfor (const { resource, isDirectory } of stat.children || []) {\n\t\tif (isDirectory) {\n\t\t\tawait doGetLogs(fileService, logs, resource, logsHome);\n\t\t} else {\n\t\t\tconst contents = (\n\t\t\t\tawait fileService.readFile(resource)\n\t\t\t).value.toString();\n\t\t\tif (contents) {\n\t\t\t\tconst path = relativePath(logsHome, resource);\n\t\t\t\tif (path) {\n\t\t\t\t\tlogs.push({ relativePath: path, contents });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction logLevelToString(level: LogLevel): string {\n\tswitch (level) {\n\t\tcase LogLevel.Trace:\n\t\t\treturn \"trace\";\n\t\tcase LogLevel.Debug:\n\t\t\treturn \"debug\";\n\t\tcase LogLevel.Info:\n\t\t\treturn \"info\";\n\t\tcase LogLevel.Warning:\n\t\t\treturn \"warn\";\n\t\tcase LogLevel.Error:\n\t\t\treturn \"error\";\n\t}\n\treturn \"info\";\n}\n\n/**\n * A logger that is used when VSCode is running in the web with\n * an automation such as playwright. We expect a global codeAutomationLog\n * to be defined that we can use to log to.\n */\nexport class ConsoleLogInAutomationLogger\n\textends AdapterLogger\n\timplements ILogger\n{\n\tdeclare codeAutomationLog: any;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tlog: (level, args) =>\n\t\t\t\t\tthis.consoleLog(logLevelToString(level), args),\n\t\t\t},\n\t\t\tlogLevel,\n\t\t);\n\t}\n\n\tprivate consoleLog(type: string, args: any[]): void {\n\t\tconst automatedWindow = mainWindow as unknown as IAutomatedWindow;\n\t\tif (typeof automatedWindow.codeAutomationLog === \"function\") {\n\t\t\ttry {\n\t\t\t\tautomatedWindow.codeAutomationLog(type, args);\n\t\t\t} catch (err) {\n\t\t\t\t// see https://github.com/microsoft/vscode-test-web/issues/69\n\t\t\t\tconsole.error(\"Problems writing to codeAutomationLog\", err);\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;AAI7B;AAAA,EACC;AAAA,EACA;AAAA,EAEA;AAAA,OACM;AAiBP,eAAsB,QACrB,aACA,oBACsB;AACtB,QAAM,SAAqB,CAAC;AAE5B,QAAM;AAAA,IACL;AAAA,IACA;AAAA,IACA,mBAAmB;AAAA,IACnB,mBAAmB;AAAA,EACpB;AAEA,SAAO;AACR;AAdsB;AAgBtB,eAAe,UACd,aACA,MACA,WACA,UACgB;AAChB,QAAM,OAAO,MAAM,YAAY,QAAQ,SAAS;AAEhD,aAAW,EAAE,UAAU,YAAY,KAAK,KAAK,YAAY,CAAC,GAAG;AAC5D,QAAI,aAAa;AAChB,YAAM,UAAU,aAAa,MAAM,UAAU,QAAQ;AAAA,IACtD,OAAO;AACN,YAAM,YACL,MAAM,YAAY,SAAS,QAAQ,GAClC,MAAM,SAAS;AACjB,UAAI,UAAU;AACb,cAAM,OAAO,aAAa,UAAU,QAAQ;AAC5C,YAAI,MAAM;AACT,eAAK,KAAK,EAAE,cAAc,MAAM,SAAS,CAAC;AAAA,QAC3C;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAvBe;AAyBf,SAAS,iBAAiB,OAAyB;AAClD,UAAQ,OAAO;AAAA,IACd,KAAK,SAAS;AACb,aAAO;AAAA,IACR,KAAK,SAAS;AACb,aAAO;AAAA,IACR,KAAK,SAAS;AACb,aAAO;AAAA,IACR,KAAK,SAAS;AACb,aAAO;AAAA,IACR,KAAK,SAAS;AACb,aAAO;AAAA,EACT;AACA,SAAO;AACR;AAdS;AAqBF,MAAM,qCACJ,cAET;AAAA,EAjGA,OAiGA;AAAA;AAAA;AAAA,EAGC,YAAY,WAAqB,mBAAmB;AACnD;AAAA,MACC;AAAA,QACC,KAAK,wBAAC,OAAO,SACZ,KAAK,WAAW,iBAAiB,KAAK,GAAG,IAAI,GADzC;AAAA,MAEN;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,WAAW,MAAc,MAAmB;AACnD,UAAM,kBAAkB;AACxB,QAAI,OAAO,gBAAgB,sBAAsB,YAAY;AAC5D,UAAI;AACH,wBAAgB,kBAAkB,MAAM,IAAI;AAAA,MAC7C,SAAS,KAAK;AAEb,gBAAQ,MAAM,yCAAyC,GAAG;AAAA,MAC3D;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
