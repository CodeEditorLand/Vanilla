{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/browser/log.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { relativePath } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { IFileService } from '../../files/common/files.js';\nimport { AdapterLogger, DEFAULT_LOG_LEVEL, ILogger, LogLevel } from '../common/log.js';\n\nexport interface IAutomatedWindow {\n\tcodeAutomationLog(type: string, args: any[]): void;\n\tcodeAutomationExit(code: number, logs: Array<ILogFile>): void;\n}\n\nexport interface ILogFile {\n\treadonly relativePath: string;\n\treadonly contents: string;\n}\n\n/**\n * Only used in browser contexts where the log files are not stored on disk\n * but in IndexedDB. A method to get all logs with their contents so that\n * CI automation can persist them.\n */\nexport async function getLogs(fileService: IFileService, environmentService: IEnvironmentService): Promise<ILogFile[]> {\n\tconst result: ILogFile[] = [];\n\n\tawait doGetLogs(fileService, result, environmentService.logsHome, environmentService.logsHome);\n\n\treturn result;\n}\n\nasync function doGetLogs(fileService: IFileService, logs: ILogFile[], curFolder: URI, logsHome: URI): Promise<void> {\n\tconst stat = await fileService.resolve(curFolder);\n\n\tfor (const { resource, isDirectory } of stat.children || []) {\n\t\tif (isDirectory) {\n\t\t\tawait doGetLogs(fileService, logs, resource, logsHome);\n\t\t} else {\n\t\t\tconst contents = (await fileService.readFile(resource)).value.toString();\n\t\t\tif (contents) {\n\t\t\t\tconst path = relativePath(logsHome, resource);\n\t\t\t\tif (path) {\n\t\t\t\t\tlogs.push({ relativePath: path, contents });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction logLevelToString(level: LogLevel): string {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: return 'trace';\n\t\tcase LogLevel.Debug: return 'debug';\n\t\tcase LogLevel.Info: return 'info';\n\t\tcase LogLevel.Warning: return 'warn';\n\t\tcase LogLevel.Error: return 'error';\n\t}\n\treturn 'info';\n}\n\n/**\n * A logger that is used when VSCode is running in the web with\n * an automation such as playwright. We expect a global codeAutomationLog\n * to be defined that we can use to log to.\n */\nexport class ConsoleLogInAutomationLogger extends AdapterLogger implements ILogger {\n\n\tdeclare codeAutomationLog: any;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper({ log: (level, args) => this.consoleLog(logLevelToString(level), args) }, logLevel);\n\t}\n\n\tprivate consoleLog(type: string, args: any[]): void {\n\t\tconst automatedWindow = mainWindow as unknown as IAutomatedWindow;\n\t\tif (typeof automatedWindow.codeAutomationLog === 'function') {\n\t\t\ttry {\n\t\t\t\tautomatedWindow.codeAutomationLog(type, args);\n\t\t\t} catch (err) {\n\t\t\t\t// see https://github.com/microsoft/vscode-test-web/issues/69\n\t\t\t\tconsole.error('Problems writing to codeAutomationLog', err);\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;AAC7B,SAAS,WAAW;AACpB,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,eAAe,mBAAmB,SAAS,gBAAgB;AAiBpE,eAAsB,QAAQ,aAA2B,oBAA8D;AACtH,QAAM,SAAqB,CAAC;AAE5B,QAAM,UAAU,aAAa,QAAQ,mBAAmB,UAAU,mBAAmB,QAAQ;AAE7F,SAAO;AACR;AANsB;AAQtB,eAAe,UAAU,aAA2B,MAAkB,WAAgB,UAA8B;AACnH,QAAM,OAAO,MAAM,YAAY,QAAQ,SAAS;AAEhD,aAAW,EAAE,UAAU,YAAY,KAAK,KAAK,YAAY,CAAC,GAAG;AAC5D,QAAI,aAAa;AAChB,YAAM,UAAU,aAAa,MAAM,UAAU,QAAQ;AAAA,IACtD,OAAO;AACN,YAAM,YAAY,MAAM,YAAY,SAAS,QAAQ,GAAG,MAAM,SAAS;AACvE,UAAI,UAAU;AACb,cAAM,OAAO,aAAa,UAAU,QAAQ;AAC5C,YAAI,MAAM;AACT,eAAK,KAAK,EAAE,cAAc,MAAM,SAAS,CAAC;AAAA,QAC3C;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAhBe;AAkBf,SAAS,iBAAiB,OAAyB;AAClD,UAAQ,OAAO;AAAA,IACd,KAAK,SAAS;AAAO,aAAO;AAAA,IAC5B,KAAK,SAAS;AAAO,aAAO;AAAA,IAC5B,KAAK,SAAS;AAAM,aAAO;AAAA,IAC3B,KAAK,SAAS;AAAS,aAAO;AAAA,IAC9B,KAAK,SAAS;AAAO,aAAO;AAAA,EAC7B;AACA,SAAO;AACR;AATS;AAgBF,MAAM,qCAAqC,cAAiC;AAAA,EArEnF,OAqEmF;AAAA;AAAA;AAAA,EAIlF,YAAY,WAAqB,mBAAmB;AACnD,UAAM,EAAE,KAAK,wBAAC,OAAO,SAAS,KAAK,WAAW,iBAAiB,KAAK,GAAG,IAAI,GAA9D,OAAgE,GAAG,QAAQ;AAAA,EACzF;AAAA,EAEQ,WAAW,MAAc,MAAmB;AACnD,UAAM,kBAAkB;AACxB,QAAI,OAAO,gBAAgB,sBAAsB,YAAY;AAC5D,UAAI;AACH,wBAAgB,kBAAkB,MAAM,IAAI;AAAA,MAC7C,SAAS,KAAK;AAEb,gBAAQ,MAAM,yCAAyC,GAAG;AAAA,MAC3D;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
