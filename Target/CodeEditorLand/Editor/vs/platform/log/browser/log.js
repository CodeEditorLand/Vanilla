import{mainWindow as m}from"../../../../vs/base/browser/window.js";import{relativePath as u}from"../../../../vs/base/common/resources.js";import"../../../../vs/base/common/uri.js";import"../../../../vs/platform/environment/common/environment.js";import"../../../../vs/platform/files/common/files.js";import{AdapterLogger as L,DEFAULT_LOG_LEVEL as d,LogLevel as n}from"../../../../vs/platform/log/common/log.js";async function P(e,o){const t=[];return await g(e,t,o.logsHome,o.logsHome),t}async function g(e,o,t,r){const i=await e.resolve(t);for(const{resource:a,isDirectory:l}of i.children||[])if(l)await g(e,o,a,r);else{const s=(await e.readFile(a)).value.toString();if(s){const c=u(r,a);c&&o.push({relativePath:c,contents:s})}}}function f(e){switch(e){case n.Trace:return"trace";case n.Debug:return"debug";case n.Info:return"info";case n.Warning:return"warn";case n.Error:return"error"}return"info"}class W extends L{constructor(o=d){super({log:(t,r)=>this.consoleLog(f(t),r)},o)}consoleLog(o,t){const r=m;if(typeof r.codeAutomationLog=="function")try{r.codeAutomationLog(o,t)}catch(i){console.error("Problems writing to codeAutomationLog",i)}}}export{W as ConsoleLogInAutomationLogger,P as getLogs};
