import{mainWindow as l}from"../../../base/browser/window.js";import{relativePath as u}from"../../../base/common/resources.js";import{AdapterLogger as L,DEFAULT_LOG_LEVEL as d,LogLevel as n}from"../common/log.js";async function y(e,o){const t=[];return await g(e,t,o.logsHome,o.logsHome),t}async function g(e,o,t,r){const a=await e.resolve(t);for(const{resource:i,isDirectory:m}of a.children||[])if(m)await g(e,o,i,r);else{const s=(await e.readFile(i)).value.toString();if(s){const c=u(r,i);c&&o.push({relativePath:c,contents:s})}}}function f(e){switch(e){case n.Trace:return"trace";case n.Debug:return"debug";case n.Info:return"info";case n.Warning:return"warn";case n.Error:return"error"}return"info"}class w extends L{constructor(o=d){super({log:(t,r)=>this.consoleLog(f(t),r)},o)}consoleLog(o,t){const r=l;if(typeof r.codeAutomationLog=="function")try{r.codeAutomationLog(o,t)}catch{}}}export{w as ConsoleLogInAutomationLogger,y as getLogs};
