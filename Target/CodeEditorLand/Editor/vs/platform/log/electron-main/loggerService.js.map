{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/electron-main/loggerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../base/common/event.js\";\nimport { ResourceMap } from \"../../../base/common/map.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { refineServiceDecorator } from \"../../instantiation/common/instantiation.js\";\nimport {\n\ttype DidChangeLoggersEvent,\n\ttype ILogger,\n\ttype ILoggerOptions,\n\ttype ILoggerResource,\n\tILoggerService,\n\ttype LogLevel,\n\tisLogLevel,\n} from \"../common/log.js\";\nimport { LoggerService } from \"../node/loggerService.js\";\n\nexport const ILoggerMainService = refineServiceDecorator<\n\tILoggerService,\n\tILoggerMainService\n>(ILoggerService);\n\nexport interface ILoggerMainService extends ILoggerService {\n\tgetOnDidChangeLogLevelEvent(\n\t\twindowId: number,\n\t): Event<LogLevel | [URI, LogLevel]>;\n\n\tgetOnDidChangeVisibilityEvent(windowId: number): Event<[URI, boolean]>;\n\n\tgetOnDidChangeLoggersEvent(windowId: number): Event<DidChangeLoggersEvent>;\n\n\tcreateLogger(\n\t\tresource: URI,\n\t\toptions?: ILoggerOptions,\n\t\twindowId?: number,\n\t): ILogger;\n\n\tcreateLogger(\n\t\tid: string,\n\t\toptions?: Omit<ILoggerOptions, \"id\">,\n\t\twindowId?: number,\n\t): ILogger;\n\n\tregisterLogger(resource: ILoggerResource, windowId?: number): void;\n\n\tgetRegisteredLoggers(windowId?: number): ILoggerResource[];\n\n\tderegisterLoggers(windowId: number): void;\n}\n\nexport class LoggerMainService\n\textends LoggerService\n\timplements ILoggerMainService\n{\n\tprivate readonly loggerResourcesByWindow = new ResourceMap<number>();\n\n\toverride createLogger(\n\t\tidOrResource: URI | string,\n\t\toptions?: ILoggerOptions,\n\t\twindowId?: number,\n\t): ILogger {\n\t\tif (windowId !== undefined) {\n\t\t\tthis.loggerResourcesByWindow.set(\n\t\t\t\tthis.toResource(idOrResource),\n\t\t\t\twindowId,\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\treturn super.createLogger(idOrResource, options);\n\t\t} catch (error) {\n\t\t\tthis.loggerResourcesByWindow.delete(this.toResource(idOrResource));\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\toverride registerLogger(\n\t\tresource: ILoggerResource,\n\t\twindowId?: number,\n\t): void {\n\t\tif (windowId !== undefined) {\n\t\t\tthis.loggerResourcesByWindow.set(resource.resource, windowId);\n\t\t}\n\t\tsuper.registerLogger(resource);\n\t}\n\n\toverride deregisterLogger(resource: URI): void {\n\t\tthis.loggerResourcesByWindow.delete(resource);\n\t\tsuper.deregisterLogger(resource);\n\t}\n\n\toverride getRegisteredLoggers(windowId?: number): ILoggerResource[] {\n\t\tconst resources: ILoggerResource[] = [];\n\t\tfor (const resource of super.getRegisteredLoggers()) {\n\t\t\tif (\n\t\t\t\twindowId === this.loggerResourcesByWindow.get(resource.resource)\n\t\t\t) {\n\t\t\t\tresources.push(resource);\n\t\t\t}\n\t\t}\n\t\treturn resources;\n\t}\n\n\tgetOnDidChangeLogLevelEvent(\n\t\twindowId: number,\n\t): Event<LogLevel | [URI, LogLevel]> {\n\t\treturn Event.filter(\n\t\t\tthis.onDidChangeLogLevel,\n\t\t\t(arg) =>\n\t\t\t\tisLogLevel(arg) ||\n\t\t\t\tthis.isInterestedLoggerResource(arg[0], windowId),\n\t\t);\n\t}\n\n\tgetOnDidChangeVisibilityEvent(windowId: number): Event<[URI, boolean]> {\n\t\treturn Event.filter(this.onDidChangeVisibility, ([resource]) =>\n\t\t\tthis.isInterestedLoggerResource(resource, windowId),\n\t\t);\n\t}\n\n\tgetOnDidChangeLoggersEvent(windowId: number): Event<DidChangeLoggersEvent> {\n\t\treturn Event.filter(\n\t\t\tEvent.map(this.onDidChangeLoggers, (e) => {\n\t\t\t\tconst r = {\n\t\t\t\t\tadded: [...e.added].filter((loggerResource) =>\n\t\t\t\t\t\tthis.isInterestedLoggerResource(\n\t\t\t\t\t\t\tloggerResource.resource,\n\t\t\t\t\t\t\twindowId,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t\tremoved: [...e.removed].filter((loggerResource) =>\n\t\t\t\t\t\tthis.isInterestedLoggerResource(\n\t\t\t\t\t\t\tloggerResource.resource,\n\t\t\t\t\t\t\twindowId,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t\treturn r;\n\t\t\t}),\n\t\t\t(e) => e.added.length > 0 || e.removed.length > 0,\n\t\t);\n\t}\n\n\tderegisterLoggers(windowId: number): void {\n\t\tfor (const [resource, resourceWindow] of this.loggerResourcesByWindow) {\n\t\t\tif (resourceWindow === windowId) {\n\t\t\t\tthis.deregisterLogger(resource);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isInterestedLoggerResource(\n\t\tresource: URI,\n\t\twindowId: number | undefined,\n\t): boolean {\n\t\tconst loggerWindowId = this.loggerResourcesByWindow.get(resource);\n\t\treturn loggerWindowId === undefined || loggerWindowId === windowId;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.loggerResourcesByWindow.clear();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAE5B,SAAS,8BAA8B;AACvC;AAAA,EAKC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,qBAAqB;AAEvB,MAAM,qBAAqB,uBAGhC,cAAc;AA8BT,MAAM,0BACJ,cAET;AAAA,EAxDA,OAwDA;AAAA;AAAA;AAAA,EACkB,0BAA0B,IAAI,YAAoB;AAAA,EAE1D,aACR,cACA,SACA,UACU;AACV,QAAI,aAAa,QAAW;AAC3B,WAAK,wBAAwB;AAAA,QAC5B,KAAK,WAAW,YAAY;AAAA,QAC5B;AAAA,MACD;AAAA,IACD;AACA,QAAI;AACH,aAAO,MAAM,aAAa,cAAc,OAAO;AAAA,IAChD,SAAS,OAAO;AACf,WAAK,wBAAwB,OAAO,KAAK,WAAW,YAAY,CAAC;AACjE,YAAM;AAAA,IACP;AAAA,EACD;AAAA,EAES,eACR,UACA,UACO;AACP,QAAI,aAAa,QAAW;AAC3B,WAAK,wBAAwB,IAAI,SAAS,UAAU,QAAQ;AAAA,IAC7D;AACA,UAAM,eAAe,QAAQ;AAAA,EAC9B;AAAA,EAES,iBAAiB,UAAqB;AAC9C,SAAK,wBAAwB,OAAO,QAAQ;AAC5C,UAAM,iBAAiB,QAAQ;AAAA,EAChC;AAAA,EAES,qBAAqB,UAAsC;AACnE,UAAM,YAA+B,CAAC;AACtC,eAAW,YAAY,MAAM,qBAAqB,GAAG;AACpD,UACC,aAAa,KAAK,wBAAwB,IAAI,SAAS,QAAQ,GAC9D;AACD,kBAAU,KAAK,QAAQ;AAAA,MACxB;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,4BACC,UACoC;AACpC,WAAO,MAAM;AAAA,MACZ,KAAK;AAAA,MACL,CAAC,QACA,WAAW,GAAG,KACd,KAAK,2BAA2B,IAAI,CAAC,GAAG,QAAQ;AAAA,IAClD;AAAA,EACD;AAAA,EAEA,8BAA8B,UAAyC;AACtE,WAAO,MAAM;AAAA,MAAO,KAAK;AAAA,MAAuB,CAAC,CAAC,QAAQ,MACzD,KAAK,2BAA2B,UAAU,QAAQ;AAAA,IACnD;AAAA,EACD;AAAA,EAEA,2BAA2B,UAAgD;AAC1E,WAAO,MAAM;AAAA,MACZ,MAAM,IAAI,KAAK,oBAAoB,CAAC,MAAM;AACzC,cAAM,IAAI;AAAA,UACT,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE;AAAA,YAAO,CAAC,mBAC3B,KAAK;AAAA,cACJ,eAAe;AAAA,cACf;AAAA,YACD;AAAA,UACD;AAAA,UACA,SAAS,CAAC,GAAG,EAAE,OAAO,EAAE;AAAA,YAAO,CAAC,mBAC/B,KAAK;AAAA,cACJ,eAAe;AAAA,cACf;AAAA,YACD;AAAA,UACD;AAAA,QACD;AACA,eAAO;AAAA,MACR,CAAC;AAAA,MACD,CAAC,MAAM,EAAE,MAAM,SAAS,KAAK,EAAE,QAAQ,SAAS;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,kBAAkB,UAAwB;AACzC,eAAW,CAAC,UAAU,cAAc,KAAK,KAAK,yBAAyB;AACtE,UAAI,mBAAmB,UAAU;AAChC,aAAK,iBAAiB,QAAQ;AAAA,MAC/B;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,2BACP,UACA,UACU;AACV,UAAM,iBAAiB,KAAK,wBAAwB,IAAI,QAAQ;AAChE,WAAO,mBAAmB,UAAa,mBAAmB;AAAA,EAC3D;AAAA,EAES,UAAgB;AACxB,UAAM,QAAQ;AACd,SAAK,wBAAwB,MAAM;AAAA,EACpC;AACD;",
  "names": []
}
