{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/electron-main/logIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../base/common/event.js\";\nimport { ResourceMap } from \"../../../base/common/map.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type { IServerChannel } from \"../../../base/parts/ipc/common/ipc.js\";\nimport {\n\ttype ILogger,\n\ttype ILoggerOptions,\n\tLogLevel,\n\tisLogLevel,\n\tlog,\n} from \"../common/log.js\";\nimport type { ILoggerMainService } from \"./loggerService.js\";\n\nexport class LoggerChannel implements IServerChannel {\n\tprivate readonly loggers = new ResourceMap<ILogger>();\n\n\tconstructor(private readonly loggerService: ILoggerMainService) {}\n\n\tlisten(_: unknown, event: string, windowId?: number): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase \"onDidChangeLoggers\":\n\t\t\t\treturn windowId\n\t\t\t\t\t? this.loggerService.getOnDidChangeLoggersEvent(windowId)\n\t\t\t\t\t: this.loggerService.onDidChangeLoggers;\n\t\t\tcase \"onDidChangeLogLevel\":\n\t\t\t\treturn windowId\n\t\t\t\t\t? this.loggerService.getOnDidChangeLogLevelEvent(windowId)\n\t\t\t\t\t: this.loggerService.onDidChangeLogLevel;\n\t\t\tcase \"onDidChangeVisibility\":\n\t\t\t\treturn windowId\n\t\t\t\t\t? this.loggerService.getOnDidChangeVisibilityEvent(windowId)\n\t\t\t\t\t: this.loggerService.onDidChangeVisibility;\n\t\t}\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase \"createLogger\":\n\t\t\t\tthis.createLogger(URI.revive(arg[0]), arg[1], arg[2]);\n\t\t\t\treturn;\n\t\t\tcase \"log\":\n\t\t\t\treturn this.log(URI.revive(arg[0]), arg[1]);\n\t\t\tcase \"consoleLog\":\n\t\t\t\treturn this.consoleLog(arg[0], arg[1]);\n\t\t\tcase \"setLogLevel\":\n\t\t\t\treturn isLogLevel(arg[0])\n\t\t\t\t\t? this.loggerService.setLogLevel(arg[0])\n\t\t\t\t\t: this.loggerService.setLogLevel(\n\t\t\t\t\t\t\tURI.revive(arg[0]),\n\t\t\t\t\t\t\targ[1],\n\t\t\t\t\t\t);\n\t\t\tcase \"setVisibility\":\n\t\t\t\treturn this.loggerService.setVisibility(\n\t\t\t\t\tURI.revive(arg[0]),\n\t\t\t\t\targ[1],\n\t\t\t\t);\n\t\t\tcase \"registerLogger\":\n\t\t\t\treturn this.loggerService.registerLogger(\n\t\t\t\t\t{ ...arg[0], resource: URI.revive(arg[0].resource) },\n\t\t\t\t\targ[1],\n\t\t\t\t);\n\t\t\tcase \"deregisterLogger\":\n\t\t\t\treturn this.loggerService.deregisterLogger(URI.revive(arg[0]));\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n\tprivate createLogger(\n\t\tfile: URI,\n\t\toptions: ILoggerOptions,\n\t\twindowId: number | undefined,\n\t): void {\n\t\tthis.loggers.set(\n\t\t\tfile,\n\t\t\tthis.loggerService.createLogger(file, options, windowId),\n\t\t);\n\t}\n\n\tprivate consoleLog(level: LogLevel, args: any[]): void {\n\t\tlet consoleFn = console.log;\n\n\t\tswitch (level) {\n\t\t\tcase LogLevel.Error:\n\t\t\t\tconsoleFn = console.error;\n\t\t\t\tbreak;\n\t\t\tcase LogLevel.Warning:\n\t\t\t\tconsoleFn = console.warn;\n\t\t\t\tbreak;\n\t\t\tcase LogLevel.Info:\n\t\t\t\tconsoleFn = console.info;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconsoleFn.call(console, ...args);\n\t}\n\n\tprivate log(file: URI, messages: [LogLevel, string][]): void {\n\t\tconst logger = this.loggers.get(file);\n\t\tif (!logger) {\n\t\t\tthrow new Error(\"Create the logger before logging\");\n\t\t}\n\t\tfor (const [level, message] of messages) {\n\t\t\tlog(logger, level, message);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AAEpB;AAAA,EAGC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAGA,MAAM,cAAwC;AAAA,EAGpD,YAA6B,eAAmC;AAAnC;AAAA,EAAoC;AAAA,EArBlE,OAkBqD;AAAA;AAAA;AAAA,EACnC,UAAU,IAAI,YAAqB;AAAA,EAIpD,OAAO,GAAY,OAAe,UAA+B;AAChE,YAAQ,OAAO;AAAA,MACd,KAAK;AACJ,eAAO,WACJ,KAAK,cAAc,2BAA2B,QAAQ,IACtD,KAAK,cAAc;AAAA,MACvB,KAAK;AACJ,eAAO,WACJ,KAAK,cAAc,4BAA4B,QAAQ,IACvD,KAAK,cAAc;AAAA,MACvB,KAAK;AACJ,eAAO,WACJ,KAAK,cAAc,8BAA8B,QAAQ,IACzD,KAAK,cAAc;AAAA,IACxB;AACA,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,MAAM,KAAK,GAAY,SAAiB,KAAyB;AAChE,YAAQ,SAAS;AAAA,MAChB,KAAK;AACJ,aAAK,aAAa,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACpD;AAAA,MACD,KAAK;AACJ,eAAO,KAAK,IAAI,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,MAC3C,KAAK;AACJ,eAAO,KAAK,WAAW,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,MACtC,KAAK;AACJ,eAAO,WAAW,IAAI,CAAC,CAAC,IACrB,KAAK,cAAc,YAAY,IAAI,CAAC,CAAC,IACrC,KAAK,cAAc;AAAA,UACnB,IAAI,OAAO,IAAI,CAAC,CAAC;AAAA,UACjB,IAAI,CAAC;AAAA,QACN;AAAA,MACH,KAAK;AACJ,eAAO,KAAK,cAAc;AAAA,UACzB,IAAI,OAAO,IAAI,CAAC,CAAC;AAAA,UACjB,IAAI,CAAC;AAAA,QACN;AAAA,MACD,KAAK;AACJ,eAAO,KAAK,cAAc;AAAA,UACzB,EAAE,GAAG,IAAI,CAAC,GAAG,UAAU,IAAI,OAAO,IAAI,CAAC,EAAE,QAAQ,EAAE;AAAA,UACnD,IAAI,CAAC;AAAA,QACN;AAAA,MACD,KAAK;AACJ,eAAO,KAAK,cAAc,iBAAiB,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC;AAAA,IAC/D;AAEA,UAAM,IAAI,MAAM,mBAAmB,OAAO,EAAE;AAAA,EAC7C;AAAA,EAEQ,aACP,MACA,SACA,UACO;AACP,SAAK,QAAQ;AAAA,MACZ;AAAA,MACA,KAAK,cAAc,aAAa,MAAM,SAAS,QAAQ;AAAA,IACxD;AAAA,EACD;AAAA,EAEQ,WAAW,OAAiB,MAAmB;AACtD,QAAI,YAAY,QAAQ;AAExB,YAAQ,OAAO;AAAA,MACd,KAAK,SAAS;AACb,oBAAY,QAAQ;AACpB;AAAA,MACD,KAAK,SAAS;AACb,oBAAY,QAAQ;AACpB;AAAA,MACD,KAAK,SAAS;AACb,oBAAY,QAAQ;AACpB;AAAA,IACF;AAEA,cAAU,KAAK,SAAS,GAAG,IAAI;AAAA,EAChC;AAAA,EAEQ,IAAI,MAAW,UAAsC;AAC5D,UAAM,SAAS,KAAK,QAAQ,IAAI,IAAI;AACpC,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,eAAW,CAAC,OAAO,OAAO,KAAK,UAAU;AACxC,UAAI,QAAQ,OAAO,OAAO;AAAA,IAC3B;AAAA,EACD;AACD;",
  "names": []
}
