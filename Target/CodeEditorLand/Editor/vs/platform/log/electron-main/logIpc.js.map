{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/platform/log/electron-main/logIpc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IServerChannel } from '../../../base/parts/ipc/common/ipc.js';\nimport { ILogger, ILoggerOptions, isLogLevel, log, LogLevel } from '../common/log.js';\nimport { ILoggerMainService } from './loggerService.js';\n\nexport class LoggerChannel implements IServerChannel {\n\n\tprivate readonly loggers = new ResourceMap<ILogger>();\n\n\tconstructor(private readonly loggerService: ILoggerMainService) { }\n\n\tlisten(_: unknown, event: string, windowId?: number): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeLoggers': return windowId ? this.loggerService.getOnDidChangeLoggersEvent(windowId) : this.loggerService.onDidChangeLoggers;\n\t\t\tcase 'onDidChangeLogLevel': return windowId ? this.loggerService.getOnDidChangeLogLevelEvent(windowId) : this.loggerService.onDidChangeLogLevel;\n\t\t\tcase 'onDidChangeVisibility': return windowId ? this.loggerService.getOnDidChangeVisibilityEvent(windowId) : this.loggerService.onDidChangeVisibility;\n\t\t}\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'createLogger': this.createLogger(URI.revive(arg[0]), arg[1], arg[2]); return;\n\t\t\tcase 'log': return this.log(URI.revive(arg[0]), arg[1]);\n\t\t\tcase 'consoleLog': return this.consoleLog(arg[0], arg[1]);\n\t\t\tcase 'setLogLevel': return isLogLevel(arg[0]) ? this.loggerService.setLogLevel(arg[0]) : this.loggerService.setLogLevel(URI.revive(arg[0]), arg[1]);\n\t\t\tcase 'setVisibility': return this.loggerService.setVisibility(URI.revive(arg[0]), arg[1]);\n\t\t\tcase 'registerLogger': return this.loggerService.registerLogger({ ...arg[0], resource: URI.revive(arg[0].resource) }, arg[1]);\n\t\t\tcase 'deregisterLogger': return this.loggerService.deregisterLogger(URI.revive(arg[0]));\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n\tprivate createLogger(file: URI, options: ILoggerOptions, windowId: number | undefined): void {\n\t\tthis.loggers.set(file, this.loggerService.createLogger(file, options, windowId));\n\t}\n\n\tprivate consoleLog(level: LogLevel, args: any[]): void {\n\t\tlet consoleFn = console.log;\n\n\t\tswitch (level) {\n\t\t\tcase LogLevel.Error:\n\t\t\t\tconsoleFn = console.error;\n\t\t\t\tbreak;\n\t\t\tcase LogLevel.Warning:\n\t\t\t\tconsoleFn = console.warn;\n\t\t\t\tbreak;\n\t\t\tcase LogLevel.Info:\n\t\t\t\tconsoleFn = console.info;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconsoleFn.call(console, ...args);\n\t}\n\n\tprivate log(file: URI, messages: [LogLevel, string][]): void {\n\t\tconst logger = this.loggers.get(file);\n\t\tif (!logger) {\n\t\t\tthrow new Error('Create the logger before logging');\n\t\t}\n\t\tfor (const [level, message] of messages) {\n\t\t\tlog(logger, level, message);\n\t\t}\n\t}\n}\n\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AACpB,SAAS,sBAAsB;AAC/B,SAAS,SAAS,gBAAgB,YAAY,KAAK,gBAAgB;AACnE,SAAS,0BAA0B;AAE5B,MAAM,cAAwC;AAAA,EAIpD,YAA6B,eAAmC;AAAnC;AAAA,EAAqC;AAAA,EAhBnE,OAYqD;AAAA;AAAA;AAAA,EAEnC,UAAU,IAAI,YAAqB;AAAA,EAIpD,OAAO,GAAY,OAAe,UAA+B;AAChE,YAAQ,OAAO;AAAA,MACd,KAAK;AAAsB,eAAO,WAAW,KAAK,cAAc,2BAA2B,QAAQ,IAAI,KAAK,cAAc;AAAA,MAC1H,KAAK;AAAuB,eAAO,WAAW,KAAK,cAAc,4BAA4B,QAAQ,IAAI,KAAK,cAAc;AAAA,MAC5H,KAAK;AAAyB,eAAO,WAAW,KAAK,cAAc,8BAA8B,QAAQ,IAAI,KAAK,cAAc;AAAA,IACjI;AACA,UAAM,IAAI,MAAM,oBAAoB,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,MAAM,KAAK,GAAY,SAAiB,KAAyB;AAChE,YAAQ,SAAS;AAAA,MAChB,KAAK;AAAgB,aAAK,aAAa,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAG;AAAA,MAC5E,KAAK;AAAO,eAAO,KAAK,IAAI,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,MACtD,KAAK;AAAc,eAAO,KAAK,WAAW,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,MACxD,KAAK;AAAe,eAAO,WAAW,IAAI,CAAC,CAAC,IAAI,KAAK,cAAc,YAAY,IAAI,CAAC,CAAC,IAAI,KAAK,cAAc,YAAY,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,MAClJ,KAAK;AAAiB,eAAO,KAAK,cAAc,cAAc,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,MACxF,KAAK;AAAkB,eAAO,KAAK,cAAc,eAAe,EAAE,GAAG,IAAI,CAAC,GAAG,UAAU,IAAI,OAAO,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;AAAA,MAC5H,KAAK;AAAoB,eAAO,KAAK,cAAc,iBAAiB,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC;AAAA,IACvF;AAEA,UAAM,IAAI,MAAM,mBAAmB,OAAO,EAAE;AAAA,EAC7C;AAAA,EAEQ,aAAa,MAAW,SAAyB,UAAoC;AAC5F,SAAK,QAAQ,IAAI,MAAM,KAAK,cAAc,aAAa,MAAM,SAAS,QAAQ,CAAC;AAAA,EAChF;AAAA,EAEQ,WAAW,OAAiB,MAAmB;AACtD,QAAI,YAAY,QAAQ;AAExB,YAAQ,OAAO;AAAA,MACd,KAAK,SAAS;AACb,oBAAY,QAAQ;AACpB;AAAA,MACD,KAAK,SAAS;AACb,oBAAY,QAAQ;AACpB;AAAA,MACD,KAAK,SAAS;AACb,oBAAY,QAAQ;AACpB;AAAA,IACF;AAEA,cAAU,KAAK,SAAS,GAAG,IAAI;AAAA,EAChC;AAAA,EAEQ,IAAI,MAAW,UAAsC;AAC5D,UAAM,SAAS,KAAK,QAAQ,IAAI,IAAI;AACpC,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,eAAW,CAAC,OAAO,OAAO,KAAK,UAAU;AACxC,UAAI,QAAQ,OAAO,OAAO;AAAA,IAC3B;AAAA,EACD;AACD;",
  "names": []
}
