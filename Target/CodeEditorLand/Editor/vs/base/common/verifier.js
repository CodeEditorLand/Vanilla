import{isObject as o}from"./types.js";class i{constructor(e){this.defaultValue=e}verify(e){return this.isType(e)?e:this.defaultValue}}class l extends i{isType(e){return typeof e=="boolean"}}class c extends i{isType(e){return typeof e=="number"}}class T extends i{isType(e){return e instanceof Set}}class f extends i{allowedValues;constructor(e,r){super(e),this.allowedValues=r}isType(e){return this.allowedValues.includes(e)}}class p extends i{constructor(r,n){super(r);this.verifier=n}verify(r){return this.isType(r)?a(this.verifier,r):this.defaultValue}isType(r){return o(r)}}function a(t,e){const r=Object.create(null);for(const n in t)if(Object.hasOwnProperty.call(t,n)){const s=t[n];r[n]=s.verify(e[n])}return r}export{l as BooleanVerifier,f as EnumVerifier,c as NumberVerifier,p as ObjectVerifier,T as SetVerifier,a as verifyObject};
