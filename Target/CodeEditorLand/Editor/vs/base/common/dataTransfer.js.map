{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/dataTransfer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"./arrays.js\";\nimport { Iterable } from \"./iterator.js\";\nimport type { URI } from \"./uri.js\";\nimport { generateUuid } from \"./uuid.js\";\n\nexport interface IDataTransferFile {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly uri?: URI;\n\tdata(): Promise<Uint8Array>;\n}\n\nexport interface IDataTransferItem {\n\tasString(): Thenable<string>;\n\tasFile(): IDataTransferFile | undefined;\n\tvalue: any;\n}\n\nexport function createStringDataTransferItem(\n\tstringOrPromise: string | Promise<string>,\n): IDataTransferItem {\n\treturn {\n\t\tasString: async () => stringOrPromise,\n\t\tasFile: () => undefined,\n\t\tvalue:\n\t\t\ttypeof stringOrPromise === \"string\" ? stringOrPromise : undefined,\n\t};\n}\n\nexport function createFileDataTransferItem(\n\tfileName: string,\n\turi: URI | undefined,\n\tdata: () => Promise<Uint8Array>,\n): IDataTransferItem {\n\tconst file = { id: generateUuid(), name: fileName, uri, data };\n\treturn {\n\t\tasString: async () => \"\",\n\t\tasFile: () => file,\n\t\tvalue: undefined,\n\t};\n}\n\nexport interface IReadonlyVSDataTransfer\n\textends Iterable<readonly [string, IDataTransferItem]> {\n\t/**\n\t * Get the total number of entries in this data transfer.\n\t */\n\tget size(): number;\n\n\t/**\n\t * Check if this data transfer contains data for `mimeType`.\n\t *\n\t * This uses exact matching and does not support wildcards.\n\t */\n\thas(mimeType: string): boolean;\n\n\t/**\n\t * Check if this data transfer contains data matching `pattern`.\n\t *\n\t * This allows matching for wildcards, such as `image/*`.\n\t *\n\t * Use the special `files` mime type to match any file in the data transfer.\n\t */\n\tmatches(pattern: string): boolean;\n\n\t/**\n\t * Retrieve the first entry for `mimeType`.\n\t *\n\t * Note that if you want to find all entries for a given mime type, use {@link IReadonlyVSDataTransfer.entries} instead.\n\t */\n\tget(mimeType: string): IDataTransferItem | undefined;\n}\n\nexport class VSDataTransfer implements IReadonlyVSDataTransfer {\n\tprivate readonly _entries = new Map<string, IDataTransferItem[]>();\n\n\tpublic get size(): number {\n\t\tlet size = 0;\n\t\tfor (const _ of this._entries) {\n\t\t\tsize++;\n\t\t}\n\t\treturn size;\n\t}\n\n\tpublic has(mimeType: string): boolean {\n\t\treturn this._entries.has(this.toKey(mimeType));\n\t}\n\n\tpublic matches(pattern: string): boolean {\n\t\tconst mimes = [...this._entries.keys()];\n\t\tif (Iterable.some(this, ([_, item]) => item.asFile())) {\n\t\t\tmimes.push(\"files\");\n\t\t}\n\n\t\treturn matchesMimeType_normalized(normalizeMimeType(pattern), mimes);\n\t}\n\n\tpublic get(mimeType: string): IDataTransferItem | undefined {\n\t\treturn this._entries.get(this.toKey(mimeType))?.[0];\n\t}\n\n\t/**\n\t * Add a new entry to this data transfer.\n\t *\n\t * This does not replace existing entries for `mimeType`.\n\t */\n\tpublic append(mimeType: string, value: IDataTransferItem): void {\n\t\tconst existing = this._entries.get(mimeType);\n\t\tif (existing) {\n\t\t\texisting.push(value);\n\t\t} else {\n\t\t\tthis._entries.set(this.toKey(mimeType), [value]);\n\t\t}\n\t}\n\n\t/**\n\t * Set the entry for a given mime type.\n\t *\n\t * This replaces all existing entries for `mimeType`.\n\t */\n\tpublic replace(mimeType: string, value: IDataTransferItem): void {\n\t\tthis._entries.set(this.toKey(mimeType), [value]);\n\t}\n\n\t/**\n\t * Remove all entries for `mimeType`.\n\t */\n\tpublic delete(mimeType: string) {\n\t\tthis._entries.delete(this.toKey(mimeType));\n\t}\n\n\t/**\n\t * Iterate over all `[mime, item]` pairs in this data transfer.\n\t *\n\t * There may be multiple entries for each mime type.\n\t */\n\tpublic *[Symbol.iterator](): IterableIterator<\n\t\treadonly [string, IDataTransferItem]\n\t> {\n\t\tfor (const [mine, items] of this._entries) {\n\t\t\tfor (const item of items) {\n\t\t\t\tyield [mine, item];\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate toKey(mimeType: string): string {\n\t\treturn normalizeMimeType(mimeType);\n\t}\n}\n\nfunction normalizeMimeType(mimeType: string): string {\n\treturn mimeType.toLowerCase();\n}\n\nexport function matchesMimeType(\n\tpattern: string,\n\tmimeTypes: readonly string[],\n): boolean {\n\treturn matchesMimeType_normalized(\n\t\tnormalizeMimeType(pattern),\n\t\tmimeTypes.map(normalizeMimeType),\n\t);\n}\n\nfunction matchesMimeType_normalized(\n\tnormalizedPattern: string,\n\tnormalizedMimeTypes: readonly string[],\n): boolean {\n\t// Anything wildcard\n\tif (normalizedPattern === \"*/*\") {\n\t\treturn normalizedMimeTypes.length > 0;\n\t}\n\n\t// Exact match\n\tif (normalizedMimeTypes.includes(normalizedPattern)) {\n\t\treturn true;\n\t}\n\n\t// Wildcard, such as `image/*`\n\tconst wildcard = normalizedPattern.match(/^([a-z]+)\\/([a-z]+|\\*)$/i);\n\tif (!wildcard) {\n\t\treturn false;\n\t}\n\n\tconst [_, type, subtype] = wildcard;\n\tif (subtype === \"*\") {\n\t\treturn normalizedMimeTypes.some((mime) => mime.startsWith(type + \"/\"));\n\t}\n\n\treturn false;\n}\n\nexport const UriList = Object.freeze({\n\t// http://amundsen.com/hypermedia/urilist/\n\tcreate: (entries: ReadonlyArray<string | URI>): string => {\n\t\treturn distinct(entries.map((x) => x.toString())).join(\"\\r\\n\");\n\t},\n\tsplit: (str: string): string[] => {\n\t\treturn str.split(\"\\r\\n\");\n\t},\n\tparse: (str: string): string[] => {\n\t\treturn UriList.split(str).filter((value) => !value.startsWith(\"#\"));\n\t},\n});\n"],
  "mappings": "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",
  "names": []
}
