{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/uuid.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst _UUIDPattern =\n\t/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n\nexport function isUUID(value: string): boolean {\n\treturn _UUIDPattern.test(value);\n}\n\ndeclare const crypto:\n\t| undefined\n\t| {\n\t\t\t//https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#browser_compatibility\n\t\t\tgetRandomValues?(data: Uint8Array): Uint8Array;\n\t\t\t//https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID#browser_compatibility\n\t\t\trandomUUID?(): string;\n\t  };\n\nexport const generateUuid = ((): (() => string) => {\n\t// use `randomUUID` if possible\n\tif (typeof crypto === \"object\" && typeof crypto.randomUUID === \"function\") {\n\t\treturn crypto.randomUUID.bind(crypto);\n\t}\n\n\t// use `randomValues` if possible\n\tlet getRandomValues: (bucket: Uint8Array) => Uint8Array;\n\tif (\n\t\ttypeof crypto === \"object\" &&\n\t\ttypeof crypto.getRandomValues === \"function\"\n\t) {\n\t\tgetRandomValues = crypto.getRandomValues.bind(crypto);\n\t} else {\n\t\tgetRandomValues = (bucket: Uint8Array): Uint8Array => {\n\t\t\tfor (let i = 0; i < bucket.length; i++) {\n\t\t\t\tbucket[i] = Math.floor(Math.random() * 256);\n\t\t\t}\n\t\t\treturn bucket;\n\t\t};\n\t}\n\n\t// prep-work\n\tconst _data = new Uint8Array(16);\n\tconst _hex: string[] = [];\n\tfor (let i = 0; i < 256; i++) {\n\t\t_hex.push(i.toString(16).padStart(2, \"0\"));\n\t}\n\n\treturn function generateUuid(): string {\n\t\t// get data\n\t\tgetRandomValues(_data);\n\n\t\t// set version bits\n\t\t_data[6] = (_data[6] & 0x0f) | 0x40;\n\t\t_data[8] = (_data[8] & 0x3f) | 0x80;\n\n\t\t// print as string\n\t\tlet i = 0;\n\t\tlet result = \"\";\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += \"-\";\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += \"-\";\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += \"-\";\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += \"-\";\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\tresult += _hex[_data[i++]];\n\t\treturn result;\n\t};\n})();\n"],
  "mappings": ";;AAKA,MAAM,eACL;AAEM,SAAS,OAAO,OAAwB;AAC9C,SAAO,aAAa,KAAK,KAAK;AAC/B;AAFgB;AAaT,MAAM,gBAAgB,MAAsB;AAElD,MAAI,OAAO,WAAW,YAAY,OAAO,OAAO,eAAe,YAAY;AAC1E,WAAO,OAAO,WAAW,KAAK,MAAM;AAAA,EACrC;AAGA,MAAI;AACJ,MACC,OAAO,WAAW,YAClB,OAAO,OAAO,oBAAoB,YACjC;AACD,sBAAkB,OAAO,gBAAgB,KAAK,MAAM;AAAA,EACrD,OAAO;AACN,sBAAkB,wBAAC,WAAmC;AACrD,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACvC,eAAO,CAAC,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG;AAAA,MAC3C;AACA,aAAO;AAAA,IACR,GALkB;AAAA,EAMnB;AAGA,QAAM,QAAQ,IAAI,WAAW,EAAE;AAC/B,QAAM,OAAiB,CAAC;AACxB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC7B,SAAK,KAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AAAA,EAC1C;AAEA,SAAO,gCAASA,gBAAuB;AAEtC,oBAAgB,KAAK;AAGrB,UAAM,CAAC,IAAK,MAAM,CAAC,IAAI,KAAQ;AAC/B,UAAM,CAAC,IAAK,MAAM,CAAC,IAAI,KAAQ;AAG/B,QAAI,IAAI;AACR,QAAI,SAAS;AACb,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU;AACV,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU;AACV,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU;AACV,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU;AACV,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,cAAU,KAAK,MAAM,GAAG,CAAC;AACzB,WAAO;AAAA,EACR,GAhCO;AAiCR,GAAG;",
  "names": ["generateUuid"]
}
