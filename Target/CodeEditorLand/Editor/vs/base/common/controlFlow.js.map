{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/controlFlow.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from \"./errors.js\";\n\n/*\n * This file contains helper classes to manage control flow.\n */\n\n/**\n * Prevents code from being re-entrant.\n */\nexport class ReentrancyBarrier {\n\tprivate _isOccupied = false;\n\n\t/**\n\t * Calls `runner` if the barrier is not occupied.\n\t * During the call, the barrier becomes occupied.\n\t */\n\tpublic runExclusivelyOrSkip(runner: () => void): void {\n\t\tif (this._isOccupied) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isOccupied = true;\n\t\ttry {\n\t\t\trunner();\n\t\t} finally {\n\t\t\tthis._isOccupied = false;\n\t\t}\n\t}\n\n\t/**\n\t * Calls `runner`. If the barrier is occupied, throws an error.\n\t * During the call, the barrier becomes active.\n\t */\n\tpublic runExclusivelyOrThrow(runner: () => void): void {\n\t\tif (this._isOccupied) {\n\t\t\tthrow new BugIndicatingError(\n\t\t\t\t`ReentrancyBarrier: reentrant call detected!`,\n\t\t\t);\n\t\t}\n\t\tthis._isOccupied = true;\n\t\ttry {\n\t\t\trunner();\n\t\t} finally {\n\t\t\tthis._isOccupied = false;\n\t\t}\n\t}\n\n\t/**\n\t * Indicates if some runner occupies this barrier.\n\t */\n\tpublic get isOccupied() {\n\t\treturn this._isOccupied;\n\t}\n\n\tpublic makeExclusiveOrSkip<TFunction extends Function>(\n\t\tfn: TFunction,\n\t): TFunction {\n\t\treturn ((...args: any[]) => {\n\t\t\tif (this._isOccupied) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._isOccupied = true;\n\t\t\ttry {\n\t\t\t\treturn fn(...args);\n\t\t\t} finally {\n\t\t\t\tthis._isOccupied = false;\n\t\t\t}\n\t\t}) as any;\n\t}\n}\n"],
  "mappings": ";;AAIA,SAAS,0BAA0B;AAS5B,MAAM,kBAAkB;AAAA,EAb/B,OAa+B;AAAA;AAAA;AAAA,EACtB,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAMf,qBAAqB,QAA0B;AACrD,QAAI,KAAK,aAAa;AACrB;AAAA,IACD;AACA,SAAK,cAAc;AACnB,QAAI;AACH,aAAO;AAAA,IACR,UAAE;AACD,WAAK,cAAc;AAAA,IACpB;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,sBAAsB,QAA0B;AACtD,QAAI,KAAK,aAAa;AACrB,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AACA,SAAK,cAAc;AACnB,QAAI;AACH,aAAO;AAAA,IACR,UAAE;AACD,WAAK,cAAc;AAAA,IACpB;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,aAAa;AACvB,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,oBACN,IACY;AACZ,WAAQ,IAAI,SAAgB;AAC3B,UAAI,KAAK,aAAa;AACrB;AAAA,MACD;AACA,WAAK,cAAc;AACnB,UAAI;AACH,eAAO,GAAG,GAAG,IAAI;AAAA,MAClB,UAAE;AACD,aAAK,cAAc;AAAA,MACpB;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
