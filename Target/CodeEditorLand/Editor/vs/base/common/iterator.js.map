{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/iterator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport namespace Iterable {\n\n\texport function is<T = any>(thing: any): thing is Iterable<T> {\n\t\treturn thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n\t}\n\n\tconst _empty: Iterable<any> = Object.freeze([]);\n\texport function empty<T = any>(): Iterable<T> {\n\t\treturn _empty;\n\t}\n\n\texport function* single<T>(element: T): Iterable<T> {\n\t\tyield element;\n\t}\n\n\texport function wrap<T>(iterableOrElement: Iterable<T> | T): Iterable<T> {\n\t\tif (is(iterableOrElement)) {\n\t\t\treturn iterableOrElement;\n\t\t} else {\n\t\t\treturn single(iterableOrElement);\n\t\t}\n\t}\n\n\texport function from<T>(iterable: Iterable<T> | undefined | null): Iterable<T> {\n\t\treturn iterable || _empty;\n\t}\n\n\texport function* reverse<T>(array: Array<T>): Iterable<T> {\n\t\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\t\tyield array[i];\n\t\t}\n\t}\n\n\texport function isEmpty<T>(iterable: Iterable<T> | undefined | null): boolean {\n\t\treturn !iterable || iterable[Symbol.iterator]().next().done === true;\n\t}\n\n\texport function first<T>(iterable: Iterable<T>): T | undefined {\n\t\treturn iterable[Symbol.iterator]().next().value;\n\t}\n\n\texport function some<T>(iterable: Iterable<T>, predicate: (t: T, i: number) => unknown): boolean {\n\t\tlet i = 0;\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element, i++)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\texport function find<T, R extends T>(iterable: Iterable<T>, predicate: (t: T) => t is R): R | undefined;\n\texport function find<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): T | undefined;\n\texport function find<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): T | undefined {\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element)) {\n\t\t\t\treturn element;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\texport function filter<T, R extends T>(iterable: Iterable<T>, predicate: (t: T) => t is R): Iterable<R>;\n\texport function filter<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): Iterable<T>;\n\texport function* filter<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): Iterable<T> {\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element)) {\n\t\t\t\tyield element;\n\t\t\t}\n\t\t}\n\t}\n\n\texport function* map<T, R>(iterable: Iterable<T>, fn: (t: T, index: number) => R): Iterable<R> {\n\t\tlet index = 0;\n\t\tfor (const element of iterable) {\n\t\t\tyield fn(element, index++);\n\t\t}\n\t}\n\n\texport function* flatMap<T, R>(iterable: Iterable<T>, fn: (t: T, index: number) => Iterable<R>): Iterable<R> {\n\t\tlet index = 0;\n\t\tfor (const element of iterable) {\n\t\t\tyield* fn(element, index++);\n\t\t}\n\t}\n\n\texport function* concat<T>(...iterables: Iterable<T>[]): Iterable<T> {\n\t\tfor (const iterable of iterables) {\n\t\t\tyield* iterable;\n\t\t}\n\t}\n\n\texport function reduce<T, R>(iterable: Iterable<T>, reducer: (previousValue: R, currentValue: T) => R, initialValue: R): R {\n\t\tlet value = initialValue;\n\t\tfor (const element of iterable) {\n\t\t\tvalue = reducer(value, element);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n\t */\n\texport function* slice<T>(arr: ReadonlyArray<T>, from: number, to = arr.length): Iterable<T> {\n\t\tif (from < 0) {\n\t\t\tfrom += arr.length;\n\t\t}\n\n\t\tif (to < 0) {\n\t\t\tto += arr.length;\n\t\t} else if (to > arr.length) {\n\t\t\tto = arr.length;\n\t\t}\n\n\t\tfor (; from < to; from++) {\n\t\t\tyield arr[from];\n\t\t}\n\t}\n\n\t/**\n\t * Consumes `atMost` elements from iterable and returns the consumed elements,\n\t * and an iterable for the rest of the elements.\n\t */\n\texport function consume<T>(iterable: Iterable<T>, atMost: number = Number.POSITIVE_INFINITY): [T[], Iterable<T>] {\n\t\tconst consumed: T[] = [];\n\n\t\tif (atMost === 0) {\n\t\t\treturn [consumed, iterable];\n\t\t}\n\n\t\tconst iterator = iterable[Symbol.iterator]();\n\n\t\tfor (let i = 0; i < atMost; i++) {\n\t\t\tconst next = iterator.next();\n\n\t\t\tif (next.done) {\n\t\t\t\treturn [consumed, Iterable.empty()];\n\t\t\t}\n\n\t\t\tconsumed.push(next.value);\n\t\t}\n\n\t\treturn [consumed, { [Symbol.iterator]() { return iterator; } }];\n\t}\n\n\texport async function asyncToArray<T>(iterable: AsyncIterable<T>): Promise<T[]> {\n\t\tconst result: T[] = [];\n\t\tfor await (const item of iterable) {\n\t\t\tresult.push(item);\n\t\t}\n\t\treturn Promise.resolve(result);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Iterable", "from"]
}
