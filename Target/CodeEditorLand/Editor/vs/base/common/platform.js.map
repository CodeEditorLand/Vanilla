{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/platform.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../nls.js';\n\nexport const LANGUAGE_DEFAULT = 'en';\n\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _isCI = false;\nlet _isMobile = false;\nlet _locale: string | undefined = undefined;\nlet _language: string = LANGUAGE_DEFAULT;\nlet _platformLocale: string = LANGUAGE_DEFAULT;\nlet _translationsConfigFile: string | undefined = undefined;\nlet _userAgent: string | undefined = undefined;\n\nexport interface IProcessEnvironment {\n\t[key: string]: string | undefined;\n}\n\n/**\n * This interface is intentionally not identical to node.js\n * process because it also works in sandboxed environments\n * where the process object is implemented differently. We\n * define the properties here that we need for `platform`\n * to work and nothing else.\n */\nexport interface INodeProcess {\n\tplatform: string;\n\tarch: string;\n\tenv: IProcessEnvironment;\n\tversions?: {\n\t\tnode?: string;\n\t\telectron?: string;\n\t\tchrome?: string;\n\t};\n\ttype?: string;\n\tcwd: () => string;\n}\n\ndeclare const process: INodeProcess;\n\nconst $globalThis: any = globalThis;\n\nlet nodeProcess: INodeProcess | undefined = undefined;\nif (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {\n\t// Native environment (sandboxed)\n\tnodeProcess = $globalThis.vscode.process;\n} else if (typeof process !== 'undefined' && typeof process?.versions?.node === 'string') {\n\t// Native environment (non-sandboxed)\n\tnodeProcess = process;\n}\n\nconst isElectronProcess = typeof nodeProcess?.versions?.electron === 'string';\nconst isElectronRenderer = isElectronProcess && nodeProcess?.type === 'renderer';\n\ninterface INavigator {\n\tuserAgent: string;\n\tmaxTouchPoints?: number;\n\tlanguage: string;\n}\ndeclare const navigator: INavigator;\n\n// Native environment\nif (typeof nodeProcess === 'object') {\n\t_isWindows = (nodeProcess.platform === 'win32');\n\t_isMacintosh = (nodeProcess.platform === 'darwin');\n\t_isLinux = (nodeProcess.platform === 'linux');\n\t_isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n\t_isElectron = isElectronProcess;\n\t_isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];\n\t_locale = LANGUAGE_DEFAULT;\n\t_language = LANGUAGE_DEFAULT;\n\tconst rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n\tif (rawNlsConfig) {\n\t\ttry {\n\t\t\tconst nlsConfig: nls.INLSConfiguration = JSON.parse(rawNlsConfig);\n\t\t\t_locale = nlsConfig.userLocale;\n\t\t\t_platformLocale = nlsConfig.osLocale;\n\t\t\t_language = nlsConfig.resolvedLanguage || LANGUAGE_DEFAULT;\n\t\t\t_translationsConfigFile = nlsConfig.languagePack?.translationsConfigFile;\n\t\t} catch (e) {\n\t\t}\n\t}\n\t_isNative = true;\n}\n\n// Web environment\nelse if (typeof navigator === 'object' && !isElectronRenderer) {\n\t_userAgent = navigator.userAgent;\n\t_isWindows = _userAgent.indexOf('Windows') >= 0;\n\t_isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n\t_isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n\t_isLinux = _userAgent.indexOf('Linux') >= 0;\n\t_isMobile = _userAgent?.indexOf('Mobi') >= 0;\n\t_isWeb = true;\n\t_language = nls.getNLSLanguage() || LANGUAGE_DEFAULT;\n\t_locale = navigator.language.toLowerCase();\n\t_platformLocale = _locale;\n}\n\n// Unknown environment\nelse {\n\tconsole.error('Unable to resolve platform.');\n}\n\nexport const enum Platform {\n\tWeb,\n\tMac,\n\tLinux,\n\tWindows\n}\nexport type PlatformName = 'Web' | 'Windows' | 'Mac' | 'Linux';\n\nexport function PlatformToString(platform: Platform): PlatformName {\n\tswitch (platform) {\n\t\tcase Platform.Web: return 'Web';\n\t\tcase Platform.Mac: return 'Mac';\n\t\tcase Platform.Linux: return 'Linux';\n\t\tcase Platform.Windows: return 'Windows';\n\t}\n}\n\nlet _platform: Platform = Platform.Web;\nif (_isMacintosh) {\n\t_platform = Platform.Mac;\n} else if (_isWindows) {\n\t_platform = Platform.Windows;\n} else if (_isLinux) {\n\t_platform = Platform.Linux;\n}\n\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isLinuxSnap = _isLinuxSnap;\nexport const isNative = _isNative;\nexport const isElectron = _isElectron;\nexport const isWeb = _isWeb;\nexport const isWebWorker = (_isWeb && typeof $globalThis.importScripts === 'function');\nexport const webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;\nexport const isIOS = _isIOS;\nexport const isMobile = _isMobile;\n/**\n * Whether we run inside a CI environment, such as\n * GH actions or Azure Pipelines.\n */\nexport const isCI = _isCI;\nexport const platform = _platform;\nexport const userAgent = _userAgent;\n\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese or de for German)\n */\nexport const language = _language;\n\nexport namespace Language {\n\n\texport function value(): string {\n\t\treturn language;\n\t}\n\n\texport function isDefaultVariant(): boolean {\n\t\tif (language.length === 2) {\n\t\t\treturn language === 'en';\n\t\t} else if (language.length >= 3) {\n\t\t\treturn language[0] === 'e' && language[1] === 'n' && language[2] === '-';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\texport function isDefault(): boolean {\n\t\treturn language === 'en';\n\t}\n}\n\n/**\n * Desktop: The OS locale or the locale specified by --locale or `argv.json`.\n * Web: matches `platformLocale`.\n *\n * The UI is not necessarily shown in the provided locale.\n */\nexport const locale = _locale;\n\n/**\n * This will always be set to the OS/browser's locale regardless of\n * what was specified otherwise. The format of the string is all\n * lower case (e.g. zh-tw for Traditional Chinese). The UI is not\n * necessarily shown in the provided locale.\n */\nexport const platformLocale = _platformLocale;\n\n/**\n * The translations that are available through language packs.\n */\nexport const translationsConfigFile = _translationsConfigFile;\n\nexport const setTimeout0IsFaster = (typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts);\n\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\nexport const setTimeout0 = (() => {\n\tif (setTimeout0IsFaster) {\n\t\tinterface IQueueElement {\n\t\t\tid: number;\n\t\t\tcallback: () => void;\n\t\t}\n\t\tconst pending: IQueueElement[] = [];\n\n\t\t$globalThis.addEventListener('message', (e: any) => {\n\t\t\tif (e.data && e.data.vscodeScheduleAsyncWork) {\n\t\t\t\tfor (let i = 0, len = pending.length; i < len; i++) {\n\t\t\t\t\tconst candidate = pending[i];\n\t\t\t\t\tif (candidate.id === e.data.vscodeScheduleAsyncWork) {\n\t\t\t\t\t\tpending.splice(i, 1);\n\t\t\t\t\t\tcandidate.callback();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlet lastId = 0;\n\t\treturn (callback: () => void) => {\n\t\t\tconst myId = ++lastId;\n\t\t\tpending.push({\n\t\t\t\tid: myId,\n\t\t\t\tcallback: callback\n\t\t\t});\n\t\t\t$globalThis.postMessage({ vscodeScheduleAsyncWork: myId }, '*');\n\t\t};\n\t}\n\treturn (callback: () => void) => setTimeout(callback);\n})();\n\nexport const enum OperatingSystem {\n\tWindows = 1,\n\tMacintosh = 2,\n\tLinux = 3\n}\nexport const OS = (_isMacintosh || _isIOS ? OperatingSystem.Macintosh : (_isWindows ? OperatingSystem.Windows : OperatingSystem.Linux));\n\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nexport function isLittleEndian(): boolean {\n\tif (!_isLittleEndianComputed) {\n\t\t_isLittleEndianComputed = true;\n\t\tconst test = new Uint8Array(2);\n\t\ttest[0] = 1;\n\t\ttest[1] = 2;\n\t\tconst view = new Uint16Array(test.buffer);\n\t\t_isLittleEndian = (view[0] === (2 << 8) + 1);\n\t}\n\treturn _isLittleEndian;\n}\n\nexport const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nexport const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nexport const isSafari = !!(!isChrome && (userAgent && userAgent.indexOf('Safari') >= 0));\nexport const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nexport const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);\n\nexport function isBigSurOrNewer(osVersion: string): boolean {\n\treturn parseFloat(osVersion) >= 20;\n}\n"],
  "mappings": "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",
  "names": ["Platform", "platform", "Language", "OperatingSystem"]
}
