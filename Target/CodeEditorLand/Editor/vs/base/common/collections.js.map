{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/collections.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are strings.\n */\nexport type IStringDictionary<V> = Record<string, V>;\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are numbers.\n */\nexport type INumberDictionary<V> = Record<number, V>;\n\n/**\n * Groups the collection into a dictionary based on the provided\n * group function.\n */\nexport function groupBy<K extends string | number | symbol, V>(data: V[], groupFn: (element: V) => K): Record<K, V[]> {\n\tconst result: Record<K, V[]> = Object.create(null);\n\tfor (const element of data) {\n\t\tconst key = groupFn(element);\n\t\tlet target = result[key];\n\t\tif (!target) {\n\t\t\ttarget = result[key] = [];\n\t\t}\n\t\ttarget.push(element);\n\t}\n\treturn result;\n}\n\nexport function diffSets<T>(before: ReadonlySet<T>, after: ReadonlySet<T>): { removed: T[]; added: T[] } {\n\tconst removed: T[] = [];\n\tconst added: T[] = [];\n\tfor (const element of before) {\n\t\tif (!after.has(element)) {\n\t\t\tremoved.push(element);\n\t\t}\n\t}\n\tfor (const element of after) {\n\t\tif (!before.has(element)) {\n\t\t\tadded.push(element);\n\t\t}\n\t}\n\treturn { removed, added };\n}\n\nexport function diffMaps<K, V>(before: Map<K, V>, after: Map<K, V>): { removed: V[]; added: V[] } {\n\tconst removed: V[] = [];\n\tconst added: V[] = [];\n\tfor (const [index, value] of before) {\n\t\tif (!after.has(index)) {\n\t\t\tremoved.push(value);\n\t\t}\n\t}\n\tfor (const [index, value] of after) {\n\t\tif (!before.has(index)) {\n\t\t\tadded.push(value);\n\t\t}\n\t}\n\treturn { removed, added };\n}\n\n/**\n * Computes the intersection of two sets.\n *\n * @param setA - The first set.\n * @param setB - The second iterable.\n * @returns A new set containing the elements that are in both `setA` and `setB`.\n */\nexport function intersection<T>(setA: Set<T>, setB: Iterable<T>): Set<T> {\n\tconst result = new Set<T>();\n\tfor (const elem of setB) {\n\t\tif (setA.has(elem)) {\n\t\t\tresult.add(elem);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class SetWithKey<T> implements Set<T> {\n\tprivate _map = new Map<any, T>();\n\n\tconstructor(values: T[], private toKey: (t: T) => any) {\n\t\tfor (const value of values) {\n\t\t\tthis.add(value);\n\t\t}\n\t}\n\n\tget size(): number {\n\t\treturn this._map.size;\n\t}\n\n\tadd(value: T): this {\n\t\tconst key = this.toKey(value);\n\t\tthis._map.set(key, value);\n\t\treturn this;\n\t}\n\n\tdelete(value: T): boolean {\n\t\treturn this._map.delete(this.toKey(value));\n\t}\n\n\thas(value: T): boolean {\n\t\treturn this._map.has(this.toKey(value));\n\t}\n\n\t*entries(): IterableIterator<[T, T]> {\n\t\tfor (const entry of this._map.values()) {\n\t\t\tyield [entry, entry];\n\t\t}\n\t}\n\n\tkeys(): IterableIterator<T> {\n\t\treturn this.values();\n\t}\n\n\t*values(): IterableIterator<T> {\n\t\tfor (const entry of this._map.values()) {\n\t\t\tyield entry;\n\t\t}\n\t}\n\n\tclear(): void {\n\t\tthis._map.clear();\n\t}\n\n\tforEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void {\n\t\tthis._map.forEach(entry => callbackfn.call(thisArg, entry, entry, this));\n\t}\n\n\t[Symbol.iterator](): IterableIterator<T> {\n\t\treturn this.values();\n\t}\n\n\t[Symbol.toStringTag]: string = 'SetWithKey';\n}\n"],
  "mappings": "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",
  "names": []
}
