{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/marked/marked.js"],
  "sourcesContent": ["/**\n * marked v14.0.0 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n// ESM-uncomment-begin\nconst __marked_exports = {};\n(function () {\n\tfunction define(deps, factory) {\n\t\tfactory(__marked_exports);\n\t}\n\tdefine.amd = true;\n\t// ESM-uncomment-end\n\n\t((global, factory) => {\n\t\ttypeof define === \"function\" && define.amd\n\t\t\t? define([\"exports\"], factory)\n\t\t\t: typeof exports === \"object\" && typeof module !== \"undefined\"\n\t\t\t\t? factory(exports)\n\t\t\t\t: ((global =\n\t\t\t\t\t\ttypeof globalThis !== \"undefined\"\n\t\t\t\t\t\t\t? globalThis\n\t\t\t\t\t\t\t: global || self),\n\t\t\t\t\tfactory((global.marked = {})));\n\t})(this, function (exports) {\n\t\t/**\n\t\t * Gets the original marked default options.\n\t\t */\n\t\tfunction _getDefaults() {\n\t\t\treturn {\n\t\t\t\tasync: false,\n\t\t\t\tbreaks: false,\n\t\t\t\textensions: null,\n\t\t\t\tgfm: true,\n\t\t\t\thooks: null,\n\t\t\t\tpedantic: false,\n\t\t\t\trenderer: null,\n\t\t\t\tsilent: false,\n\t\t\t\ttokenizer: null,\n\t\t\t\twalkTokens: null,\n\t\t\t};\n\t\t}\n\t\texports.defaults = _getDefaults();\n\t\tfunction changeDefaults(newDefaults) {\n\t\t\texports.defaults = newDefaults;\n\t\t}\n\n\t\t/**\n\t\t * Helpers\n\t\t */\n\t\tconst escapeTest = /[&<>\"']/;\n\t\tconst escapeReplace = new RegExp(escapeTest.source, \"g\");\n\t\tconst escapeTestNoEncode =\n\t\t\t/[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\n\t\tconst escapeReplaceNoEncode = new RegExp(\n\t\t\tescapeTestNoEncode.source,\n\t\t\t\"g\",\n\t\t);\n\t\tconst escapeReplacements = {\n\t\t\t\"&\": \"&amp;\",\n\t\t\t\"<\": \"&lt;\",\n\t\t\t\">\": \"&gt;\",\n\t\t\t'\"': \"&quot;\",\n\t\t\t\"'\": \"&#39;\",\n\t\t};\n\t\tconst getEscapeReplacement = (ch) => escapeReplacements[ch];\n\t\tfunction escape$1(html, encode) {\n\t\t\tif (encode) {\n\t\t\t\tif (escapeTest.test(html)) {\n\t\t\t\t\treturn html.replace(escapeReplace, getEscapeReplacement);\n\t\t\t\t}\n\t\t\t} else if (escapeTestNoEncode.test(html)) {\n\t\t\t\treturn html.replace(\n\t\t\t\t\tescapeReplaceNoEncode,\n\t\t\t\t\tgetEscapeReplacement,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn html;\n\t\t}\n\t\tconst caret = /(^|[^[])\\^/g;\n\t\tfunction edit(regex, opt) {\n\t\t\tlet source = typeof regex === \"string\" ? regex : regex.source;\n\t\t\topt = opt || \"\";\n\t\t\tconst obj = {\n\t\t\t\treplace: (name, val) => {\n\t\t\t\t\tlet valSource = typeof val === \"string\" ? val : val.source;\n\t\t\t\t\tvalSource = valSource.replace(caret, \"$1\");\n\t\t\t\t\tsource = source.replace(name, valSource);\n\t\t\t\t\treturn obj;\n\t\t\t\t},\n\t\t\t\tgetRegex: () => {\n\t\t\t\t\treturn new RegExp(source, opt);\n\t\t\t\t},\n\t\t\t};\n\t\t\treturn obj;\n\t\t}\n\t\tfunction cleanUrl(href) {\n\t\t\ttry {\n\t\t\t\thref = encodeURI(href).replace(/%25/g, \"%\");\n\t\t\t} catch {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn href;\n\t\t}\n\t\tconst noopTest = { exec: () => null };\n\t\tfunction splitCells(tableRow, count) {\n\t\t\t// ensure that every cell-delimiting pipe has a space\n\t\t\t// before it to distinguish it from an escaped pipe\n\t\t\tconst row = tableRow.replace(/\\|/g, (match, offset, str) => {\n\t\t\t\t\tlet escaped = false;\n\t\t\t\t\tlet curr = offset;\n\t\t\t\t\twhile (--curr >= 0 && str[curr] === \"\\\\\")\n\t\t\t\t\t\tescaped = !escaped;\n\t\t\t\t\tif (escaped) {\n\t\t\t\t\t\t// odd number of slashes means | is escaped\n\t\t\t\t\t\t// so we leave it alone\n\t\t\t\t\t\treturn \"|\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// add space before unescaped |\n\t\t\t\t\t\treturn \" |\";\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tcells = row.split(/ \\|/);\n\t\t\tlet i = 0;\n\t\t\t// First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\t\t\tif (!cells[0].trim()) {\n\t\t\t\tcells.shift();\n\t\t\t}\n\t\t\tif (cells.length > 0 && !cells[cells.length - 1].trim()) {\n\t\t\t\tcells.pop();\n\t\t\t}\n\t\t\tif (count) {\n\t\t\t\tif (cells.length > count) {\n\t\t\t\t\tcells.splice(count);\n\t\t\t\t} else {\n\t\t\t\t\twhile (cells.length < count) cells.push(\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (; i < cells.length; i++) {\n\t\t\t\t// leading or trailing whitespace is ignored per the gfm spec\n\t\t\t\tcells[i] = cells[i].trim().replace(/\\\\\\|/g, \"|\");\n\t\t\t}\n\t\t\treturn cells;\n\t\t}\n\t\t/**\n\t\t * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n\t\t * /c*$/ is vulnerable to REDOS.\n\t\t *\n\t\t * @param str\n\t\t * @param c\n\t\t * @param invert Remove suffix of non-c chars instead. Default falsey.\n\t\t */\n\t\tfunction rtrim(str, c, invert) {\n\t\t\tconst l = str.length;\n\t\t\tif (l === 0) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\t// Length of suffix matching the invert condition.\n\t\t\tlet suffLen = 0;\n\t\t\t// Step left until we fail to match the invert condition.\n\t\t\twhile (suffLen < l) {\n\t\t\t\tconst currChar = str.charAt(l - suffLen - 1);\n\t\t\t\tif (currChar === c && !invert) {\n\t\t\t\t\tsuffLen++;\n\t\t\t\t} else if (currChar !== c && invert) {\n\t\t\t\t\tsuffLen++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str.slice(0, l - suffLen);\n\t\t}\n\t\tfunction findClosingBracket(str, b) {\n\t\t\tif (str.indexOf(b[1]) === -1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tlet level = 0;\n\t\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\t\tif (str[i] === \"\\\\\") {\n\t\t\t\t\ti++;\n\t\t\t\t} else if (str[i] === b[0]) {\n\t\t\t\t\tlevel++;\n\t\t\t\t} else if (str[i] === b[1]) {\n\t\t\t\t\tlevel--;\n\t\t\t\t\tif (level < 0) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\tfunction outputLink(cap, link, raw, lexer) {\n\t\t\tconst href = link.href;\n\t\t\tconst title = link.title ? escape$1(link.title) : null;\n\t\t\tconst text = cap[1].replace(/\\\\([[\\]])/g, \"$1\");\n\t\t\tif (cap[0].charAt(0) !== \"!\") {\n\t\t\t\tlexer.state.inLink = true;\n\t\t\t\tconst token = {\n\t\t\t\t\ttype: \"link\",\n\t\t\t\t\traw,\n\t\t\t\t\thref,\n\t\t\t\t\ttitle,\n\t\t\t\t\ttext,\n\t\t\t\t\ttokens: lexer.inlineTokens(text),\n\t\t\t\t};\n\t\t\t\tlexer.state.inLink = false;\n\t\t\t\treturn token;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttype: \"image\",\n\t\t\t\traw,\n\t\t\t\thref,\n\t\t\t\ttitle,\n\t\t\t\ttext: escape$1(text),\n\t\t\t};\n\t\t}\n\t\tfunction indentCodeCompensation(raw, text) {\n\t\t\tconst matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\t\t\tif (matchIndentToCode === null) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\tconst indentToCode = matchIndentToCode[1];\n\t\t\treturn text\n\t\t\t\t.split(\"\\n\")\n\t\t\t\t.map((node) => {\n\t\t\t\t\tconst matchIndentInNode = node.match(/^\\s+/);\n\t\t\t\t\tif (matchIndentInNode === null) {\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}\n\t\t\t\t\tconst [indentInNode] = matchIndentInNode;\n\t\t\t\t\tif (indentInNode.length >= indentToCode.length) {\n\t\t\t\t\t\treturn node.slice(indentToCode.length);\n\t\t\t\t\t}\n\t\t\t\t\treturn node;\n\t\t\t\t})\n\t\t\t\t.join(\"\\n\");\n\t\t}\n\t\t/**\n\t\t * Tokenizer\n\t\t */\n\t\tclass _Tokenizer {\n\t\t\toptions;\n\t\t\trules; // set by the lexer\n\t\t\tlexer; // set by the lexer\n\t\t\tconstructor(options) {\n\t\t\t\tthis.options = options || exports.defaults;\n\t\t\t}\n\t\t\tspace(src) {\n\t\t\t\tconst cap = this.rules.block.newline.exec(src);\n\t\t\t\tif (cap && cap[0].length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"space\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tcode(src) {\n\t\t\t\tconst cap = this.rules.block.code.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tconst text = cap[0].replace(/^ {1,4}/gm, \"\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"code\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\tcodeBlockStyle: \"indented\",\n\t\t\t\t\t\ttext: this.options.pedantic ? text : rtrim(text, \"\\n\"),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tfences(src) {\n\t\t\t\tconst cap = this.rules.block.fences.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tconst raw = cap[0];\n\t\t\t\t\tconst text = indentCodeCompensation(raw, cap[3] || \"\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"code\",\n\t\t\t\t\t\traw,\n\t\t\t\t\t\tlang: cap[2]\n\t\t\t\t\t\t\t? cap[2]\n\t\t\t\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t\t\tthis.rules.inline.anyPunctuation,\n\t\t\t\t\t\t\t\t\t\t\"$1\",\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: cap[2],\n\t\t\t\t\t\ttext,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\theading(src) {\n\t\t\t\tconst cap = this.rules.block.heading.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tlet text = cap[2].trim();\n\t\t\t\t\t// remove trailing #s\n\t\t\t\t\tif (/#$/.test(text)) {\n\t\t\t\t\t\tconst trimmed = rtrim(text, \"#\");\n\t\t\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t\t\ttext = trimmed.trim();\n\t\t\t\t\t\t} else if (!trimmed || / $/.test(trimmed)) {\n\t\t\t\t\t\t\t// CommonMark requires space before trailing #s\n\t\t\t\t\t\t\ttext = trimmed.trim();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"heading\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\tdepth: cap[1].length,\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\ttokens: this.lexer.inline(text),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\thr(src) {\n\t\t\t\tconst cap = this.rules.block.hr.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"hr\",\n\t\t\t\t\t\traw: rtrim(cap[0], \"\\n\"),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tblockquote(src) {\n\t\t\t\tconst cap = this.rules.block.blockquote.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tlet lines = rtrim(cap[0], \"\\n\").split(\"\\n\");\n\t\t\t\t\tlet raw = \"\";\n\t\t\t\t\tlet text = \"\";\n\t\t\t\t\tconst tokens = [];\n\t\t\t\t\twhile (lines.length > 0) {\n\t\t\t\t\t\tlet inBlockquote = false;\n\t\t\t\t\t\tconst currentLines = [];\n\t\t\t\t\t\tlet i;\n\t\t\t\t\t\tfor (i = 0; i < lines.length; i++) {\n\t\t\t\t\t\t\t// get lines up to a continuation\n\t\t\t\t\t\t\tif (/^ {0,3}>/.test(lines[i])) {\n\t\t\t\t\t\t\t\tcurrentLines.push(lines[i]);\n\t\t\t\t\t\t\t\tinBlockquote = true;\n\t\t\t\t\t\t\t} else if (inBlockquote) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcurrentLines.push(lines[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlines = lines.slice(i);\n\t\t\t\t\t\tconst currentRaw = currentLines.join(\"\\n\");\n\t\t\t\t\t\tconst currentText = currentRaw\n\t\t\t\t\t\t\t// precede setext continuation with 4 spaces so it isn't a setext\n\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n\t\t\t\t\t\t\t\t\"\\n    $1\",\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.replace(/^ {0,3}>[ \\t]?/gm, \"\");\n\t\t\t\t\t\traw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n\t\t\t\t\t\ttext = text ? `${text}\\n${currentText}` : currentText;\n\t\t\t\t\t\t// parse blockquote lines as top level tokens\n\t\t\t\t\t\t// merge paragraphs if this is a continuation\n\t\t\t\t\t\tconst top = this.lexer.state.top;\n\t\t\t\t\t\tthis.lexer.state.top = true;\n\t\t\t\t\t\tthis.lexer.blockTokens(currentText, tokens, true);\n\t\t\t\t\t\tthis.lexer.state.top = top;\n\t\t\t\t\t\t// if there is no continuation then we are done\n\t\t\t\t\t\tif (lines.length === 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst lastToken = tokens[tokens.length - 1];\n\t\t\t\t\t\tif (lastToken?.type === \"code\") {\n\t\t\t\t\t\t\t// blockquote continuation cannot be preceded by a code block\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (lastToken?.type === \"blockquote\") {\n\t\t\t\t\t\t\t// include continuation in nested blockquote\n\t\t\t\t\t\t\tconst oldToken = lastToken;\n\t\t\t\t\t\t\tconst newText =\n\t\t\t\t\t\t\t\toldToken.raw + \"\\n\" + lines.join(\"\\n\");\n\t\t\t\t\t\t\tconst newToken = this.blockquote(newText);\n\t\t\t\t\t\t\ttokens[tokens.length - 1] = newToken;\n\t\t\t\t\t\t\traw =\n\t\t\t\t\t\t\t\traw.substring(\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\traw.length - oldToken.raw.length,\n\t\t\t\t\t\t\t\t) + newToken.raw;\n\t\t\t\t\t\t\ttext =\n\t\t\t\t\t\t\t\ttext.substring(\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\ttext.length - oldToken.text.length,\n\t\t\t\t\t\t\t\t) + newToken.text;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (lastToken?.type === \"list\") {\n\t\t\t\t\t\t\t// include continuation in nested list\n\t\t\t\t\t\t\tconst oldToken = lastToken;\n\t\t\t\t\t\t\tconst newText =\n\t\t\t\t\t\t\t\toldToken.raw + \"\\n\" + lines.join(\"\\n\");\n\t\t\t\t\t\t\tconst newToken = this.list(newText);\n\t\t\t\t\t\t\ttokens[tokens.length - 1] = newToken;\n\t\t\t\t\t\t\traw =\n\t\t\t\t\t\t\t\traw.substring(\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\traw.length - lastToken.raw.length,\n\t\t\t\t\t\t\t\t) + newToken.raw;\n\t\t\t\t\t\t\ttext =\n\t\t\t\t\t\t\t\ttext.substring(\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\ttext.length - oldToken.raw.length,\n\t\t\t\t\t\t\t\t) + newToken.raw;\n\t\t\t\t\t\t\tlines = newText\n\t\t\t\t\t\t\t\t.substring(tokens[tokens.length - 1].raw.length)\n\t\t\t\t\t\t\t\t.split(\"\\n\");\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"blockquote\",\n\t\t\t\t\t\traw,\n\t\t\t\t\t\ttokens,\n\t\t\t\t\t\ttext,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist(src) {\n\t\t\t\tlet cap = this.rules.block.list.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tlet bull = cap[1].trim();\n\t\t\t\t\tconst isordered = bull.length > 1;\n\t\t\t\t\tconst list = {\n\t\t\t\t\t\ttype: \"list\",\n\t\t\t\t\t\traw: \"\",\n\t\t\t\t\t\tordered: isordered,\n\t\t\t\t\t\tstart: isordered ? +bull.slice(0, -1) : \"\",\n\t\t\t\t\t\tloose: false,\n\t\t\t\t\t\titems: [],\n\t\t\t\t\t};\n\t\t\t\t\tbull = isordered\n\t\t\t\t\t\t? `\\\\d{1,9}\\\\${bull.slice(-1)}`\n\t\t\t\t\t\t: `\\\\${bull}`;\n\t\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t\tbull = isordered ? bull : \"[*+-]\";\n\t\t\t\t\t}\n\t\t\t\t\t// Get next list item\n\t\t\t\t\tconst itemRegex = new RegExp(\n\t\t\t\t\t\t`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`,\n\t\t\t\t\t);\n\t\t\t\t\tlet endsWithBlankLine = false;\n\t\t\t\t\t// Check if current bullet point can start a new List Item\n\t\t\t\t\twhile (src) {\n\t\t\t\t\t\tlet endEarly = false;\n\t\t\t\t\t\tlet raw = \"\";\n\t\t\t\t\t\tlet itemContents = \"\";\n\t\t\t\t\t\tif (!(cap = itemRegex.exec(src))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.rules.block.hr.test(src)) {\n\t\t\t\t\t\t\t// End list if bullet was actually HR (possibly move into itemRegex?)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\traw = cap[0];\n\t\t\t\t\t\tsrc = src.substring(raw.length);\n\t\t\t\t\t\tlet line = cap[2]\n\t\t\t\t\t\t\t.split(\"\\n\", 1)[0]\n\t\t\t\t\t\t\t.replace(/^\\t+/, (t) => \" \".repeat(3 * t.length));\n\t\t\t\t\t\tlet nextLine = src.split(\"\\n\", 1)[0];\n\t\t\t\t\t\tlet blankLine = !line.trim();\n\t\t\t\t\t\tlet indent = 0;\n\t\t\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t\t\tindent = 2;\n\t\t\t\t\t\t\titemContents = line.trimStart();\n\t\t\t\t\t\t} else if (blankLine) {\n\t\t\t\t\t\t\tindent = cap[1].length + 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindent = cap[2].search(/[^ ]/); // Find first non-space char\n\t\t\t\t\t\t\tindent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n\t\t\t\t\t\t\titemContents = line.slice(indent);\n\t\t\t\t\t\t\tindent += cap[1].length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (blankLine && /^ *$/.test(nextLine)) {\n\t\t\t\t\t\t\t// Items begin with at most one blank line\n\t\t\t\t\t\t\traw += nextLine + \"\\n\";\n\t\t\t\t\t\t\tsrc = src.substring(nextLine.length + 1);\n\t\t\t\t\t\t\tendEarly = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!endEarly) {\n\t\t\t\t\t\t\tconst nextBulletRegex = new RegExp(\n\t\t\t\t\t\t\t\t`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst hrRegex = new RegExp(\n\t\t\t\t\t\t\t\t`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst fencesBeginRegex = new RegExp(\n\t\t\t\t\t\t\t\t`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst headingBeginRegex = new RegExp(\n\t\t\t\t\t\t\t\t`^ {0,${Math.min(3, indent - 1)}}#`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t// Check if following lines should be included in List Item\n\t\t\t\t\t\t\twhile (src) {\n\t\t\t\t\t\t\t\tconst rawLine = src.split(\"\\n\", 1)[0];\n\t\t\t\t\t\t\t\tnextLine = rawLine;\n\t\t\t\t\t\t\t\t// Re-align to follow commonmark nesting rules\n\t\t\t\t\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t\t\t\t\tnextLine = nextLine.replace(\n\t\t\t\t\t\t\t\t\t\t/^ {1,4}(?=( {4})*[^ ])/g,\n\t\t\t\t\t\t\t\t\t\t\"  \",\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// End list item if found code fences\n\t\t\t\t\t\t\t\tif (fencesBeginRegex.test(nextLine)) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// End list item if found start of new heading\n\t\t\t\t\t\t\t\tif (headingBeginRegex.test(nextLine)) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// End list item if found start of new bullet\n\t\t\t\t\t\t\t\tif (nextBulletRegex.test(nextLine)) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Horizontal rule found\n\t\t\t\t\t\t\t\tif (hrRegex.test(src)) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tnextLine.search(/[^ ]/) >= indent ||\n\t\t\t\t\t\t\t\t\t!nextLine.trim()\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t// Dedent if possible\n\t\t\t\t\t\t\t\t\titemContents +=\n\t\t\t\t\t\t\t\t\t\t\"\\n\" + nextLine.slice(indent);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// not enough indentation\n\t\t\t\t\t\t\t\t\tif (blankLine) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// paragraph continuation unless last line was a different block level element\n\t\t\t\t\t\t\t\t\tif (line.search(/[^ ]/) >= 4) {\n\t\t\t\t\t\t\t\t\t\t// indented code block\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (fencesBeginRegex.test(line)) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (headingBeginRegex.test(line)) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (hrRegex.test(line)) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\titemContents += \"\\n\" + nextLine;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!blankLine && !nextLine.trim()) {\n\t\t\t\t\t\t\t\t\t// Check if current line is blank\n\t\t\t\t\t\t\t\t\tblankLine = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\traw += rawLine + \"\\n\";\n\t\t\t\t\t\t\t\tsrc = src.substring(rawLine.length + 1);\n\t\t\t\t\t\t\t\tline = nextLine.slice(indent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!list.loose) {\n\t\t\t\t\t\t\t// If the previous item ended with a blank line, the list is loose\n\t\t\t\t\t\t\tif (endsWithBlankLine) {\n\t\t\t\t\t\t\t\tlist.loose = true;\n\t\t\t\t\t\t\t} else if (/\\n *\\n *$/.test(raw)) {\n\t\t\t\t\t\t\t\tendsWithBlankLine = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet istask = null;\n\t\t\t\t\t\tlet ischecked;\n\t\t\t\t\t\t// Check for task list items\n\t\t\t\t\t\tif (this.options.gfm) {\n\t\t\t\t\t\t\tistask = /^\\[[ xX]\\] /.exec(itemContents);\n\t\t\t\t\t\t\tif (istask) {\n\t\t\t\t\t\t\t\tischecked = istask[0] !== \"[ ] \";\n\t\t\t\t\t\t\t\titemContents = itemContents.replace(\n\t\t\t\t\t\t\t\t\t/^\\[[ xX]\\] +/,\n\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlist.items.push({\n\t\t\t\t\t\t\ttype: \"list_item\",\n\t\t\t\t\t\t\traw,\n\t\t\t\t\t\t\ttask: !!istask,\n\t\t\t\t\t\t\tchecked: ischecked,\n\t\t\t\t\t\t\tloose: false,\n\t\t\t\t\t\t\ttext: itemContents,\n\t\t\t\t\t\t\ttokens: [],\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlist.raw += raw;\n\t\t\t\t\t}\n\t\t\t\t\t// Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\t\t\t\t\tlist.items[list.items.length - 1].raw =\n\t\t\t\t\t\tlist.items[list.items.length - 1].raw.trimEnd();\n\t\t\t\t\tlist.items[list.items.length - 1].text =\n\t\t\t\t\t\tlist.items[list.items.length - 1].text.trimEnd();\n\t\t\t\t\tlist.raw = list.raw.trimEnd();\n\t\t\t\t\t// Item child tokens handled here at end because we needed to have the final item to trim it first\n\t\t\t\t\tfor (let i = 0; i < list.items.length; i++) {\n\t\t\t\t\t\tthis.lexer.state.top = false;\n\t\t\t\t\t\tlist.items[i].tokens = this.lexer.blockTokens(\n\t\t\t\t\t\t\tlist.items[i].text,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!list.loose) {\n\t\t\t\t\t\t\t// Check if list should be loose\n\t\t\t\t\t\t\tconst spacers = list.items[i].tokens.filter(\n\t\t\t\t\t\t\t\t(t) => t.type === \"space\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst hasMultipleLineBreaks =\n\t\t\t\t\t\t\t\tspacers.length > 0 &&\n\t\t\t\t\t\t\t\tspacers.some((t) => /\\n.*\\n/.test(t.raw));\n\t\t\t\t\t\t\tlist.loose = hasMultipleLineBreaks;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Set all items to loose if list is loose\n\t\t\t\t\tif (list.loose) {\n\t\t\t\t\t\tfor (let i = 0; i < list.items.length; i++) {\n\t\t\t\t\t\t\tlist.items[i].loose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn list;\n\t\t\t\t}\n\t\t\t}\n\t\t\thtml(src) {\n\t\t\t\tconst cap = this.rules.block.html.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tconst token = {\n\t\t\t\t\t\ttype: \"html\",\n\t\t\t\t\t\tblock: true,\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\tpre:\n\t\t\t\t\t\t\tcap[1] === \"pre\" ||\n\t\t\t\t\t\t\tcap[1] === \"script\" ||\n\t\t\t\t\t\t\tcap[1] === \"style\",\n\t\t\t\t\t\ttext: cap[0],\n\t\t\t\t\t};\n\t\t\t\t\treturn token;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdef(src) {\n\t\t\t\tconst cap = this.rules.block.def.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tconst tag = cap[1].toLowerCase().replace(/\\s+/g, \" \");\n\t\t\t\t\tconst href = cap[2]\n\t\t\t\t\t\t? cap[2]\n\t\t\t\t\t\t\t\t.replace(/^<(.*)>$/, \"$1\")\n\t\t\t\t\t\t\t\t.replace(this.rules.inline.anyPunctuation, \"$1\")\n\t\t\t\t\t\t: \"\";\n\t\t\t\t\tconst title = cap[3]\n\t\t\t\t\t\t? cap[3]\n\t\t\t\t\t\t\t\t.substring(1, cap[3].length - 1)\n\t\t\t\t\t\t\t\t.replace(this.rules.inline.anyPunctuation, \"$1\")\n\t\t\t\t\t\t: cap[3];\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"def\",\n\t\t\t\t\t\ttag,\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\thref,\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\ttable(src) {\n\t\t\t\tconst cap = this.rules.block.table.exec(src);\n\t\t\t\tif (!cap) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!/[:|]/.test(cap[2])) {\n\t\t\t\t\t// delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst headers = splitCells(cap[1]);\n\t\t\t\tconst aligns = cap[2].replace(/^\\||\\| *$/g, \"\").split(\"|\");\n\t\t\t\tconst rows =\n\t\t\t\t\tcap[3] && cap[3].trim()\n\t\t\t\t\t\t? cap[3].replace(/\\n[ \\t]*$/, \"\").split(\"\\n\")\n\t\t\t\t\t\t: [];\n\t\t\t\tconst item = {\n\t\t\t\t\ttype: \"table\",\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\theader: [],\n\t\t\t\t\talign: [],\n\t\t\t\t\trows: [],\n\t\t\t\t};\n\t\t\t\tif (headers.length !== aligns.length) {\n\t\t\t\t\t// header and align columns must be equal, rows can be different.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (const align of aligns) {\n\t\t\t\t\tif (/^ *-+: *$/.test(align)) {\n\t\t\t\t\t\titem.align.push(\"right\");\n\t\t\t\t\t} else if (/^ *:-+: *$/.test(align)) {\n\t\t\t\t\t\titem.align.push(\"center\");\n\t\t\t\t\t} else if (/^ *:-+ *$/.test(align)) {\n\t\t\t\t\t\titem.align.push(\"left\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem.align.push(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < headers.length; i++) {\n\t\t\t\t\titem.header.push({\n\t\t\t\t\t\ttext: headers[i],\n\t\t\t\t\t\ttokens: this.lexer.inline(headers[i]),\n\t\t\t\t\t\theader: true,\n\t\t\t\t\t\talign: item.align[i],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tfor (const row of rows) {\n\t\t\t\t\titem.rows.push(\n\t\t\t\t\t\tsplitCells(row, item.header.length).map((cell, i) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttext: cell,\n\t\t\t\t\t\t\t\ttokens: this.lexer.inline(cell),\n\t\t\t\t\t\t\t\theader: false,\n\t\t\t\t\t\t\t\talign: item.align[i],\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\tlheading(src) {\n\t\t\t\tconst cap = this.rules.block.lheading.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"heading\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\tdepth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n\t\t\t\t\t\ttext: cap[1],\n\t\t\t\t\t\ttokens: this.lexer.inline(cap[1]),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tparagraph(src) {\n\t\t\t\tconst cap = this.rules.block.paragraph.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tconst text =\n\t\t\t\t\t\tcap[1].charAt(cap[1].length - 1) === \"\\n\"\n\t\t\t\t\t\t\t? cap[1].slice(0, -1)\n\t\t\t\t\t\t\t: cap[1];\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"paragraph\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\ttokens: this.lexer.inline(text),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\ttext(src) {\n\t\t\t\tconst cap = this.rules.block.text.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\ttext: cap[0],\n\t\t\t\t\t\ttokens: this.lexer.inline(cap[0]),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tescape(src) {\n\t\t\t\tconst cap = this.rules.inline.escape.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"escape\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\ttext: escape$1(cap[1]),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\ttag(src) {\n\t\t\t\tconst cap = this.rules.inline.tag.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tif (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n\t\t\t\t\t\tthis.lexer.state.inLink = true;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tthis.lexer.state.inLink &&\n\t\t\t\t\t\t/^<\\/a>/i.test(cap[0])\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.lexer.state.inLink = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.lexer.state.inRawBlock &&\n\t\t\t\t\t\t/^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.lexer.state.inRawBlock = true;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tthis.lexer.state.inRawBlock &&\n\t\t\t\t\t\t/^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.lexer.state.inRawBlock = false;\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"html\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\tinLink: this.lexer.state.inLink,\n\t\t\t\t\t\tinRawBlock: this.lexer.state.inRawBlock,\n\t\t\t\t\t\tblock: false,\n\t\t\t\t\t\ttext: cap[0],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tlink(src) {\n\t\t\t\tconst cap = this.rules.inline.link.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tconst trimmedUrl = cap[2].trim();\n\t\t\t\t\tif (!this.options.pedantic && /^</.test(trimmedUrl)) {\n\t\t\t\t\t\t// commonmark requires matching angle brackets\n\t\t\t\t\t\tif (!/>$/.test(trimmedUrl)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// ending angle bracket cannot be escaped\n\t\t\t\t\t\tconst rtrimSlash = rtrim(trimmedUrl.slice(0, -1), \"\\\\\");\n\t\t\t\t\t\tif ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// find closing parenthesis\n\t\t\t\t\t\tconst lastParenIndex = findClosingBracket(cap[2], \"()\");\n\t\t\t\t\t\tif (lastParenIndex > -1) {\n\t\t\t\t\t\t\tconst start = cap[0].indexOf(\"!\") === 0 ? 5 : 4;\n\t\t\t\t\t\t\tconst linkLen =\n\t\t\t\t\t\t\t\tstart + cap[1].length + lastParenIndex;\n\t\t\t\t\t\t\tcap[2] = cap[2].substring(0, lastParenIndex);\n\t\t\t\t\t\t\tcap[0] = cap[0].substring(0, linkLen).trim();\n\t\t\t\t\t\t\tcap[3] = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet href = cap[2];\n\t\t\t\t\tlet title = \"\";\n\t\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t\t// split pedantic href and title\n\t\t\t\t\t\tconst link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\t\t\t\t\t\tif (link) {\n\t\t\t\t\t\t\thref = link[1];\n\t\t\t\t\t\t\ttitle = link[3];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttitle = cap[3] ? cap[3].slice(1, -1) : \"\";\n\t\t\t\t\t}\n\t\t\t\t\thref = href.trim();\n\t\t\t\t\tif (/^</.test(href)) {\n\t\t\t\t\t\tif (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n\t\t\t\t\t\t\t// pedantic allows starting angle bracket without ending angle bracket\n\t\t\t\t\t\t\thref = href.slice(1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thref = href.slice(1, -1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn outputLink(\n\t\t\t\t\t\tcap,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thref: href\n\t\t\t\t\t\t\t\t? href.replace(\n\t\t\t\t\t\t\t\t\t\tthis.rules.inline.anyPunctuation,\n\t\t\t\t\t\t\t\t\t\t\"$1\",\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: href,\n\t\t\t\t\t\t\ttitle: title\n\t\t\t\t\t\t\t\t? title.replace(\n\t\t\t\t\t\t\t\t\t\tthis.rules.inline.anyPunctuation,\n\t\t\t\t\t\t\t\t\t\t\"$1\",\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: title,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcap[0],\n\t\t\t\t\t\tthis.lexer,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treflink(src, links) {\n\t\t\t\tlet cap;\n\t\t\t\tif (\n\t\t\t\t\t(cap = this.rules.inline.reflink.exec(src)) ||\n\t\t\t\t\t(cap = this.rules.inline.nolink.exec(src))\n\t\t\t\t) {\n\t\t\t\t\tconst linkString = (cap[2] || cap[1]).replace(/\\s+/g, \" \");\n\t\t\t\t\tconst link = links[linkString.toLowerCase()];\n\t\t\t\t\tif (!link) {\n\t\t\t\t\t\tconst text = cap[0].charAt(0);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\traw: text,\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn outputLink(cap, link, cap[0], this.lexer);\n\t\t\t\t}\n\t\t\t}\n\t\t\temStrong(src, maskedSrc, prevChar = \"\") {\n\t\t\t\tlet match = this.rules.inline.emStrongLDelim.exec(src);\n\t\t\t\tif (!match) return;\n\t\t\t\t// _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\t\t\t\tif (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\t\t\t\tconst nextChar = match[1] || match[2] || \"\";\n\t\t\t\tif (\n\t\t\t\t\t!nextChar ||\n\t\t\t\t\t!prevChar ||\n\t\t\t\t\tthis.rules.inline.punctuation.exec(prevChar)\n\t\t\t\t) {\n\t\t\t\t\t// unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n\t\t\t\t\tconst lLength = [...match[0]].length - 1;\n\t\t\t\t\tlet rDelim,\n\t\t\t\t\t\trLength,\n\t\t\t\t\t\tdelimTotal = lLength,\n\t\t\t\t\t\tmidDelimTotal = 0;\n\t\t\t\t\tconst endReg =\n\t\t\t\t\t\tmatch[0][0] === \"*\"\n\t\t\t\t\t\t\t? this.rules.inline.emStrongRDelimAst\n\t\t\t\t\t\t\t: this.rules.inline.emStrongRDelimUnd;\n\t\t\t\t\tendReg.lastIndex = 0;\n\t\t\t\t\t// Clip maskedSrc to same section of string as src (move to lexer?)\n\t\t\t\t\tmaskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\t\t\t\t\twhile ((match = endReg.exec(maskedSrc)) != null) {\n\t\t\t\t\t\trDelim =\n\t\t\t\t\t\t\tmatch[1] ||\n\t\t\t\t\t\t\tmatch[2] ||\n\t\t\t\t\t\t\tmatch[3] ||\n\t\t\t\t\t\t\tmatch[4] ||\n\t\t\t\t\t\t\tmatch[5] ||\n\t\t\t\t\t\t\tmatch[6];\n\t\t\t\t\t\tif (!rDelim) continue; // skip single * in __abc*abc__\n\t\t\t\t\t\trLength = [...rDelim].length;\n\t\t\t\t\t\tif (match[3] || match[4]) {\n\t\t\t\t\t\t\t// found another Left Delim\n\t\t\t\t\t\t\tdelimTotal += rLength;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (match[5] || match[6]) {\n\t\t\t\t\t\t\t// either Left or Right Delim\n\t\t\t\t\t\t\tif (lLength % 3 && !((lLength + rLength) % 3)) {\n\t\t\t\t\t\t\t\tmidDelimTotal += rLength;\n\t\t\t\t\t\t\t\tcontinue; // CommonMark Emphasis Rules 9-10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelimTotal -= rLength;\n\t\t\t\t\t\tif (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\t\t\t\t\t\t// Remove extra characters. *a*** -> *a*\n\t\t\t\t\t\trLength = Math.min(\n\t\t\t\t\t\t\trLength,\n\t\t\t\t\t\t\trLength + delimTotal + midDelimTotal,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// char length can be >1 for unicode characters;\n\t\t\t\t\t\tconst lastCharLength = [...match[0]][0].length;\n\t\t\t\t\t\tconst raw = src.slice(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tlLength + match.index + lastCharLength + rLength,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// Create `em` if smallest delimiter has odd char count. *a***\n\t\t\t\t\t\tif (Math.min(lLength, rLength) % 2) {\n\t\t\t\t\t\t\tconst text = raw.slice(1, -1);\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttype: \"em\",\n\t\t\t\t\t\t\t\traw,\n\t\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t\ttokens: this.lexer.inlineTokens(text),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Create 'strong' if smallest delimiter has even char count. **a***\n\t\t\t\t\t\tconst text = raw.slice(2, -2);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: \"strong\",\n\t\t\t\t\t\t\traw,\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\ttokens: this.lexer.inlineTokens(text),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcodespan(src) {\n\t\t\t\tconst cap = this.rules.inline.code.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tlet text = cap[2].replace(/\\n/g, \" \");\n\t\t\t\t\tconst hasNonSpaceChars = /[^ ]/.test(text);\n\t\t\t\t\tconst hasSpaceCharsOnBothEnds =\n\t\t\t\t\t\t/^ /.test(text) && / $/.test(text);\n\t\t\t\t\tif (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n\t\t\t\t\t\ttext = text.substring(1, text.length - 1);\n\t\t\t\t\t}\n\t\t\t\t\ttext = escape$1(text, true);\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"codespan\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\ttext,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tbr(src) {\n\t\t\t\tconst cap = this.rules.inline.br.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"br\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tdel(src) {\n\t\t\t\tconst cap = this.rules.inline.del.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"del\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\ttext: cap[2],\n\t\t\t\t\t\ttokens: this.lexer.inlineTokens(cap[2]),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tautolink(src) {\n\t\t\t\tconst cap = this.rules.inline.autolink.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tlet text, href;\n\t\t\t\t\tif (cap[2] === \"@\") {\n\t\t\t\t\t\ttext = escape$1(cap[1]);\n\t\t\t\t\t\thref = \"mailto:\" + text;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttext = escape$1(cap[1]);\n\t\t\t\t\t\thref = text;\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"link\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\thref,\n\t\t\t\t\t\ttokens: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\t\traw: text,\n\t\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\turl(src) {\n\t\t\t\tlet cap;\n\t\t\t\tif ((cap = this.rules.inline.url.exec(src))) {\n\t\t\t\t\tlet text, href;\n\t\t\t\t\tif (cap[2] === \"@\") {\n\t\t\t\t\t\ttext = escape$1(cap[0]);\n\t\t\t\t\t\thref = \"mailto:\" + text;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// do extended autolink path validation\n\t\t\t\t\t\tlet prevCapZero;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tprevCapZero = cap[0];\n\t\t\t\t\t\t\tcap[0] =\n\t\t\t\t\t\t\t\tthis.rules.inline._backpedal.exec(\n\t\t\t\t\t\t\t\t\tcap[0],\n\t\t\t\t\t\t\t\t)?.[0] ?? \"\";\n\t\t\t\t\t\t} while (prevCapZero !== cap[0]);\n\t\t\t\t\t\ttext = escape$1(cap[0]);\n\t\t\t\t\t\tif (cap[1] === \"www.\") {\n\t\t\t\t\t\t\thref = \"http://\" + cap[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thref = cap[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"link\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\thref,\n\t\t\t\t\t\ttokens: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\t\traw: text,\n\t\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tinlineText(src) {\n\t\t\t\tconst cap = this.rules.inline.text.exec(src);\n\t\t\t\tif (cap) {\n\t\t\t\t\tlet text;\n\t\t\t\t\tif (this.lexer.state.inRawBlock) {\n\t\t\t\t\t\ttext = cap[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttext = escape$1(cap[0]);\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\traw: cap[0],\n\t\t\t\t\t\ttext,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Block-Level Grammar\n\t\t */\n\t\tconst newline = /^(?: *(?:\\n|$))+/;\n\t\tconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\n\t\tconst fences =\n\t\t\t/^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\n\t\tconst hr =\n\t\t\t/^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\n\t\tconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\n\t\tconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n\t\tconst lheading = edit(\n\t\t\t/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n\t\t)\n\t\t\t.replace(/bull/g, bullet) // lists can interrupt\n\t\t\t.replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n\t\t\t.replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n\t\t\t.replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n\t\t\t.replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n\t\t\t.replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n\t\t\t.getRegex();\n\t\tconst _paragraph =\n\t\t\t/^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\n\t\tconst blockText = /^[^\\n]+/;\n\t\tconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^[\\]\\\\])+/;\n\t\tconst def = edit(\n\t\t\t/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n\t\t)\n\t\t\t.replace(\"label\", _blockLabel)\n\t\t\t.replace(\n\t\t\t\t\"title\",\n\t\t\t\t/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/,\n\t\t\t)\n\t\t\t.getRegex();\n\t\tconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n\t\t\t.replace(/bull/g, bullet)\n\t\t\t.getRegex();\n\t\tconst _tag =\n\t\t\t\"address|article|aside|base|basefont|blockquote|body|caption\" +\n\t\t\t\"|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption\" +\n\t\t\t\"|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe\" +\n\t\t\t\"|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option\" +\n\t\t\t\"|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title\" +\n\t\t\t\"|tr|track|ul\";\n\t\tconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\n\t\tconst html = edit(\n\t\t\t\"^ {0,3}(?:\" + // optional indentation\n\t\t\t\t\"<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)\" + // (1)\n\t\t\t\t\"|comment[^\\\\n]*(\\\\n+|$)\" + // (2)\n\t\t\t\t\"|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)\" + // (3)\n\t\t\t\t\"|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)\" + // (4)\n\t\t\t\t\"|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)\" + // (5)\n\t\t\t\t\"|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)\" + // (6)\n\t\t\t\t\"|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)\" + // (7) open tag\n\t\t\t\t\"|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)\" + // (7) closing tag\n\t\t\t\t\")\",\n\t\t\t\"i\",\n\t\t)\n\t\t\t.replace(\"comment\", _comment)\n\t\t\t.replace(\"tag\", _tag)\n\t\t\t.replace(\n\t\t\t\t\"attribute\",\n\t\t\t\t/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/,\n\t\t\t)\n\t\t\t.getRegex();\n\t\tconst paragraph = edit(_paragraph)\n\t\t\t.replace(\"hr\", hr)\n\t\t\t.replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\")\n\t\t\t.replace(\"|lheading\", \"\") // setext headings don't interrupt commonmark paragraphs\n\t\t\t.replace(\"|table\", \"\")\n\t\t\t.replace(\"blockquote\", \" {0,3}>\")\n\t\t\t.replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\")\n\t\t\t.replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \") // only lists starting from 1 can interrupt\n\t\t\t.replace(\n\t\t\t\t\"html\",\n\t\t\t\t\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\",\n\t\t\t)\n\t\t\t.replace(\"tag\", _tag) // pars can be interrupted by type (6) html blocks\n\t\t\t.getRegex();\n\t\tconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n\t\t\t.replace(\"paragraph\", paragraph)\n\t\t\t.getRegex();\n\t\t/**\n\t\t * Normal Block Grammar\n\t\t */\n\t\tconst blockNormal = {\n\t\t\tblockquote,\n\t\t\tcode: blockCode,\n\t\t\tdef,\n\t\t\tfences,\n\t\t\theading,\n\t\t\thr,\n\t\t\thtml,\n\t\t\tlheading,\n\t\t\tlist,\n\t\t\tnewline,\n\t\t\tparagraph,\n\t\t\ttable: noopTest,\n\t\t\ttext: blockText,\n\t\t};\n\t\t/**\n\t\t * GFM Block Grammar\n\t\t */\n\t\tconst gfmTable = edit(\n\t\t\t\"^ *([^\\\\n ].*)\\\\n\" + // Header\n\t\t\t\t\" {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)\" + // Align\n\t\t\t\t\"(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\",\n\t\t) // Cells\n\t\t\t.replace(\"hr\", hr)\n\t\t\t.replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\")\n\t\t\t.replace(\"blockquote\", \" {0,3}>\")\n\t\t\t.replace(\"code\", \" {4}[^\\\\n]\")\n\t\t\t.replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\")\n\t\t\t.replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \") // only lists starting from 1 can interrupt\n\t\t\t.replace(\n\t\t\t\t\"html\",\n\t\t\t\t\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\",\n\t\t\t)\n\t\t\t.replace(\"tag\", _tag) // tables can be interrupted by type (6) html blocks\n\t\t\t.getRegex();\n\t\tconst blockGfm = {\n\t\t\t...blockNormal,\n\t\t\ttable: gfmTable,\n\t\t\tparagraph: edit(_paragraph)\n\t\t\t\t.replace(\"hr\", hr)\n\t\t\t\t.replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\")\n\t\t\t\t.replace(\"|lheading\", \"\") // setext headings don't interrupt commonmark paragraphs\n\t\t\t\t.replace(\"table\", gfmTable) // interrupt paragraphs with table\n\t\t\t\t.replace(\"blockquote\", \" {0,3}>\")\n\t\t\t\t.replace(\n\t\t\t\t\t\"fences\",\n\t\t\t\t\t\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\",\n\t\t\t\t)\n\t\t\t\t.replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \") // only lists starting from 1 can interrupt\n\t\t\t\t.replace(\n\t\t\t\t\t\"html\",\n\t\t\t\t\t\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\",\n\t\t\t\t)\n\t\t\t\t.replace(\"tag\", _tag) // pars can be interrupted by type (6) html blocks\n\t\t\t\t.getRegex(),\n\t\t};\n\t\t/**\n\t\t * Pedantic grammar (original John Gruber's loose markdown specification)\n\t\t */\n\t\tconst blockPedantic = {\n\t\t\t...blockNormal,\n\t\t\thtml: edit(\n\t\t\t\t\"^ *(?:comment *(?:\\\\n|\\\\s*$)\" +\n\t\t\t\t\t\"|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)\" + // closed tag\n\t\t\t\t\t\"|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\",\n\t\t\t)\n\t\t\t\t.replace(\"comment\", _comment)\n\t\t\t\t.replace(\n\t\t\t\t\t/tag/g,\n\t\t\t\t\t\"(?!(?:\" +\n\t\t\t\t\t\t\"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub\" +\n\t\t\t\t\t\t\"|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\" +\n\t\t\t\t\t\t\"\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\",\n\t\t\t\t)\n\t\t\t\t.getRegex(),\n\t\t\tdef: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n\t\t\theading: /^(#{1,6})(.*)(?:\\n+|$)/,\n\t\t\tfences: noopTest, // fences not supported\n\t\t\tlheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n\t\t\tparagraph: edit(_paragraph)\n\t\t\t\t.replace(\"hr\", hr)\n\t\t\t\t.replace(\"heading\", \" *#{1,6} *[^\\n]\")\n\t\t\t\t.replace(\"lheading\", lheading)\n\t\t\t\t.replace(\"|table\", \"\")\n\t\t\t\t.replace(\"blockquote\", \" {0,3}>\")\n\t\t\t\t.replace(\"|fences\", \"\")\n\t\t\t\t.replace(\"|list\", \"\")\n\t\t\t\t.replace(\"|html\", \"\")\n\t\t\t\t.replace(\"|tag\", \"\")\n\t\t\t\t.getRegex(),\n\t\t};\n\t\t/**\n\t\t * Inline-Level Grammar\n\t\t */\n\t\tconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\]\\\\^_`{|}~])/;\n\t\tconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\n\t\tconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\n\t\tconst inlineText =\n\t\t\t/^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<![`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\t\t// list of unicode punctuation marks, plus any missing characters from CommonMark spec\n\t\tconst _punctuation = \"\\\\p{P}\\\\p{S}\";\n\t\tconst punctuation = edit(/^((?![*_])[\\spunctuation])/, \"u\")\n\t\t\t.replace(/punctuation/g, _punctuation)\n\t\t\t.getRegex();\n\t\t// sequences em should skip over [title](link), `code`, <html>\n\t\tconst blockSkip = /\\[[^[\\]]*?\\]\\([^()]*?\\)|`[^`]*?`|<[^<>]*?>/g;\n\t\tconst emStrongLDelim = edit(\n\t\t\t/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n\t\t\t\"u\",\n\t\t)\n\t\t\t.replace(/punct/g, _punctuation)\n\t\t\t.getRegex();\n\t\tconst emStrongRDelimAst = edit(\n\t\t\t\"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)\" + // Skip orphan inside strong\n\t\t\t\t\"|[^*]+(?=[^*])\" + // Consume to delim\n\t\t\t\t\"|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)\" + // (1) #*** can only be a Right Delimiter\n\t\t\t\t\"|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)\" + // (2) a***#, a*** can only be a Right Delimiter\n\t\t\t\t\"|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])\" + // (3) #***a, ***a can only be Left Delimiter\n\t\t\t\t\"|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])\" + // (4) ***# can only be Left Delimiter\n\t\t\t\t\"|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])\" + // (5) #***# can be either Left or Right Delimiter\n\t\t\t\t\"|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])\",\n\t\t\t\"gu\",\n\t\t) // (6) a***a can be either Left or Right Delimiter\n\t\t\t.replace(/punct/g, _punctuation)\n\t\t\t.getRegex();\n\t\t// (6) Not allowed for _\n\t\tconst emStrongRDelimUnd = edit(\n\t\t\t\"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)\" + // Skip orphan inside strong\n\t\t\t\t\"|[^_]+(?=[^_])\" + // Consume to delim\n\t\t\t\t\"|(?!_)[punct](_+)(?=[\\\\s]|$)\" + // (1) #___ can only be a Right Delimiter\n\t\t\t\t\"|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)\" + // (2) a___#, a___ can only be a Right Delimiter\n\t\t\t\t\"|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])\" + // (3) #___a, ___a can only be Left Delimiter\n\t\t\t\t\"|[\\\\s](_+)(?!_)(?=[punct])\" + // (4) ___# can only be Left Delimiter\n\t\t\t\t\"|(?!_)[punct](_+)(?!_)(?=[punct])\",\n\t\t\t\"gu\",\n\t\t) // (5) #___# can be either Left or Right Delimiter\n\t\t\t.replace(/punct/g, _punctuation)\n\t\t\t.getRegex();\n\t\tconst anyPunctuation = edit(/\\\\([punct])/, \"gu\")\n\t\t\t.replace(/punct/g, _punctuation)\n\t\t\t.getRegex();\n\t\tconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n\t\t\t.replace(\"scheme\", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n\t\t\t.replace(\n\t\t\t\t\"email\",\n\t\t\t\t/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,\n\t\t\t)\n\t\t\t.getRegex();\n\t\tconst _inlineComment = edit(_comment)\n\t\t\t.replace(\"(?:-->|$)\", \"-->\")\n\t\t\t.getRegex();\n\t\tconst tag = edit(\n\t\t\t\"^comment\" +\n\t\t\t\t\"|^</[a-zA-Z][\\\\w:-]*\\\\s*>\" + // self-closing tag\n\t\t\t\t\"|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>\" + // open tag\n\t\t\t\t\"|^<\\\\?[\\\\s\\\\S]*?\\\\?>\" + // processing instruction, e.g. <?php ?>\n\t\t\t\t\"|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>\" + // declaration, e.g. <!DOCTYPE html>\n\t\t\t\t\"|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",\n\t\t) // CDATA section\n\t\t\t.replace(\"comment\", _inlineComment)\n\t\t\t.replace(\n\t\t\t\t\"attribute\",\n\t\t\t\t/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,\n\t\t\t)\n\t\t\t.getRegex();\n\t\tconst _inlineLabel =\n\t\t\t/(?:\\[(?:\\\\.|[^[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^[\\]\\\\`])*?/;\n\t\tconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n\t\t\t.replace(\"label\", _inlineLabel)\n\t\t\t.replace(\"href\", /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n\t\t\t.replace(\n\t\t\t\t\"title\",\n\t\t\t\t/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,\n\t\t\t)\n\t\t\t.getRegex();\n\t\tconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n\t\t\t.replace(\"label\", _inlineLabel)\n\t\t\t.replace(\"ref\", _blockLabel)\n\t\t\t.getRegex();\n\t\tconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n\t\t\t.replace(\"ref\", _blockLabel)\n\t\t\t.getRegex();\n\t\tconst reflinkSearch = edit(\"reflink|nolink(?!\\\\()\", \"g\")\n\t\t\t.replace(\"reflink\", reflink)\n\t\t\t.replace(\"nolink\", nolink)\n\t\t\t.getRegex();\n\t\t/**\n\t\t * Normal Inline Grammar\n\t\t */\n\t\tconst inlineNormal = {\n\t\t\t_backpedal: noopTest, // only used for GFM url\n\t\t\tanyPunctuation,\n\t\t\tautolink,\n\t\t\tblockSkip,\n\t\t\tbr,\n\t\t\tcode: inlineCode,\n\t\t\tdel: noopTest,\n\t\t\temStrongLDelim,\n\t\t\temStrongRDelimAst,\n\t\t\temStrongRDelimUnd,\n\t\t\tescape,\n\t\t\tlink,\n\t\t\tnolink,\n\t\t\tpunctuation,\n\t\t\treflink,\n\t\t\treflinkSearch,\n\t\t\ttag,\n\t\t\ttext: inlineText,\n\t\t\turl: noopTest,\n\t\t};\n\t\t/**\n\t\t * Pedantic Inline Grammar\n\t\t */\n\t\tconst inlinePedantic = {\n\t\t\t...inlineNormal,\n\t\t\tlink: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n\t\t\t\t.replace(\"label\", _inlineLabel)\n\t\t\t\t.getRegex(),\n\t\t\treflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n\t\t\t\t.replace(\"label\", _inlineLabel)\n\t\t\t\t.getRegex(),\n\t\t};\n\t\t/**\n\t\t * GFM Inline Grammar\n\t\t */\n\t\tconst inlineGfm = {\n\t\t\t...inlineNormal,\n\t\t\tescape: edit(escape).replace(\"])\", \"~|])\").getRegex(),\n\t\t\turl: edit(\n\t\t\t\t/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9-]+\\.?)+[^\\s<]*|^email/,\n\t\t\t\t\"i\",\n\t\t\t)\n\t\t\t\t.replace(\n\t\t\t\t\t\"email\",\n\t\t\t\t\t/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n\t\t\t\t)\n\t\t\t\t.getRegex(),\n\t\t\t_backpedal:\n\t\t\t\t/(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n\t\t\tdel: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n\t\t\ttext: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+/=?_`{|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<![`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+/=?_`{|}~-](?=[a-zA-Z0-9.!#$%&'*+/=?_`{|}~-]+@)))/,\n\t\t};\n\t\t/**\n\t\t * GFM + Line Breaks Inline Grammar\n\t\t */\n\t\tconst inlineBreaks = {\n\t\t\t...inlineGfm,\n\t\t\tbr: edit(br).replace(\"{2,}\", \"*\").getRegex(),\n\t\t\ttext: edit(inlineGfm.text)\n\t\t\t\t.replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\")\n\t\t\t\t.replace(/\\{2,\\}/g, \"*\")\n\t\t\t\t.getRegex(),\n\t\t};\n\t\t/**\n\t\t * exports\n\t\t */\n\t\tconst block = {\n\t\t\tnormal: blockNormal,\n\t\t\tgfm: blockGfm,\n\t\t\tpedantic: blockPedantic,\n\t\t};\n\t\tconst inline = {\n\t\t\tnormal: inlineNormal,\n\t\t\tgfm: inlineGfm,\n\t\t\tbreaks: inlineBreaks,\n\t\t\tpedantic: inlinePedantic,\n\t\t};\n\n\t\t/**\n\t\t * Block Lexer\n\t\t */\n\t\tclass _Lexer {\n\t\t\ttokens;\n\t\t\toptions;\n\t\t\tstate;\n\t\t\ttokenizer;\n\t\t\tinlineQueue;\n\t\t\tconstructor(options) {\n\t\t\t\t// TokenList cannot be created in one go\n\t\t\t\tthis.tokens = [];\n\t\t\t\tthis.tokens.links = Object.create(null);\n\t\t\t\tthis.options = options || exports.defaults;\n\t\t\t\tthis.options.tokenizer =\n\t\t\t\t\tthis.options.tokenizer || new _Tokenizer();\n\t\t\t\tthis.tokenizer = this.options.tokenizer;\n\t\t\t\tthis.tokenizer.options = this.options;\n\t\t\t\tthis.tokenizer.lexer = this;\n\t\t\t\tthis.inlineQueue = [];\n\t\t\t\tthis.state = {\n\t\t\t\t\tinLink: false,\n\t\t\t\t\tinRawBlock: false,\n\t\t\t\t\ttop: true,\n\t\t\t\t};\n\t\t\t\tconst rules = {\n\t\t\t\t\tblock: block.normal,\n\t\t\t\t\tinline: inline.normal,\n\t\t\t\t};\n\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\trules.block = block.pedantic;\n\t\t\t\t\trules.inline = inline.pedantic;\n\t\t\t\t} else if (this.options.gfm) {\n\t\t\t\t\trules.block = block.gfm;\n\t\t\t\t\tif (this.options.breaks) {\n\t\t\t\t\t\trules.inline = inline.breaks;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trules.inline = inline.gfm;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.tokenizer.rules = rules;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Expose Rules\n\t\t\t */\n\t\t\tstatic get rules() {\n\t\t\t\treturn {\n\t\t\t\t\tblock,\n\t\t\t\t\tinline,\n\t\t\t\t};\n\t\t\t}\n\t\t\t/**\n\t\t\t * Static Lex Method\n\t\t\t */\n\t\t\tstatic lex(src, options) {\n\t\t\t\tconst lexer = new _Lexer(options);\n\t\t\t\treturn lexer.lex(src);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Static Lex Inline Method\n\t\t\t */\n\t\t\tstatic lexInline(src, options) {\n\t\t\t\tconst lexer = new _Lexer(options);\n\t\t\t\treturn lexer.inlineTokens(src);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Preprocessing\n\t\t\t */\n\t\t\tlex(src) {\n\t\t\t\tsrc = src.replace(/\\r\\n|\\r/g, \"\\n\");\n\t\t\t\tthis.blockTokens(src, this.tokens);\n\t\t\t\tfor (let i = 0; i < this.inlineQueue.length; i++) {\n\t\t\t\t\tconst next = this.inlineQueue[i];\n\t\t\t\t\tthis.inlineTokens(next.src, next.tokens);\n\t\t\t\t}\n\t\t\t\tthis.inlineQueue = [];\n\t\t\t\treturn this.tokens;\n\t\t\t}\n\t\t\tblockTokens(src, tokens = [], lastParagraphClipped = false) {\n\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\tsrc = src.replace(/\\t/g, \"    \").replace(/^ +$/gm, \"\");\n\t\t\t\t} else {\n\t\t\t\t\tsrc = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n\t\t\t\t\t\treturn leading + \"    \".repeat(tabs.length);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tlet token;\n\t\t\t\tlet lastToken;\n\t\t\t\tlet cutSrc;\n\t\t\t\twhile (src) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.options.extensions &&\n\t\t\t\t\t\tthis.options.extensions.block &&\n\t\t\t\t\t\tthis.options.extensions.block.some((extTokenizer) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(token = extTokenizer.call(\n\t\t\t\t\t\t\t\t\t{ lexer: this },\n\t\t\t\t\t\t\t\t\tsrc,\n\t\t\t\t\t\t\t\t\ttokens,\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t})\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// newline\n\t\t\t\t\tif ((token = this.tokenizer.space(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\tif (token.raw.length === 1 && tokens.length > 0) {\n\t\t\t\t\t\t\t// if there's a single \\n as a spacer, it's terminating the last line,\n\t\t\t\t\t\t\t// so move it there so that we don't get unnecessary paragraph tags\n\t\t\t\t\t\t\ttokens[tokens.length - 1].raw += \"\\n\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// code\n\t\t\t\t\tif ((token = this.tokenizer.code(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\t\t// An indented code block cannot interrupt a paragraph.\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlastToken &&\n\t\t\t\t\t\t\t(lastToken.type === \"paragraph\" ||\n\t\t\t\t\t\t\t\tlastToken.type === \"text\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlastToken.raw += \"\\n\" + token.raw;\n\t\t\t\t\t\t\tlastToken.text += \"\\n\" + token.text;\n\t\t\t\t\t\t\tthis.inlineQueue[this.inlineQueue.length - 1].src =\n\t\t\t\t\t\t\t\tlastToken.text;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// fences\n\t\t\t\t\tif ((token = this.tokenizer.fences(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// heading\n\t\t\t\t\tif ((token = this.tokenizer.heading(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// hr\n\t\t\t\t\tif ((token = this.tokenizer.hr(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// blockquote\n\t\t\t\t\tif ((token = this.tokenizer.blockquote(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// list\n\t\t\t\t\tif ((token = this.tokenizer.list(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// html\n\t\t\t\t\tif ((token = this.tokenizer.html(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// def\n\t\t\t\t\tif ((token = this.tokenizer.def(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlastToken &&\n\t\t\t\t\t\t\t(lastToken.type === \"paragraph\" ||\n\t\t\t\t\t\t\t\tlastToken.type === \"text\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlastToken.raw += \"\\n\" + token.raw;\n\t\t\t\t\t\t\tlastToken.text += \"\\n\" + token.raw;\n\t\t\t\t\t\t\tthis.inlineQueue[this.inlineQueue.length - 1].src =\n\t\t\t\t\t\t\t\tlastToken.text;\n\t\t\t\t\t\t} else if (!this.tokens.links[token.tag]) {\n\t\t\t\t\t\t\tthis.tokens.links[token.tag] = {\n\t\t\t\t\t\t\t\thref: token.href,\n\t\t\t\t\t\t\t\ttitle: token.title,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// table (gfm)\n\t\t\t\t\tif ((token = this.tokenizer.table(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// lheading\n\t\t\t\t\tif ((token = this.tokenizer.lheading(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// top-level paragraph\n\t\t\t\t\t// prevent paragraph consuming extensions by clipping 'src' to extension start\n\t\t\t\t\tcutSrc = src;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.options.extensions &&\n\t\t\t\t\t\tthis.options.extensions.startBlock\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet startIndex = Number.POSITIVE_INFINITY;\n\t\t\t\t\t\tconst tempSrc = src.slice(1);\n\t\t\t\t\t\tlet tempStart;\n\t\t\t\t\t\tthis.options.extensions.startBlock.forEach(\n\t\t\t\t\t\t\t(getStartIndex) => {\n\t\t\t\t\t\t\t\ttempStart = getStartIndex.call(\n\t\t\t\t\t\t\t\t\t{ lexer: this },\n\t\t\t\t\t\t\t\t\ttempSrc,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\ttypeof tempStart === \"number\" &&\n\t\t\t\t\t\t\t\t\ttempStart >= 0\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tstartIndex = Math.min(\n\t\t\t\t\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\t\t\t\t\ttempStart,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tstartIndex < Number.POSITIVE_INFINITY &&\n\t\t\t\t\t\t\tstartIndex >= 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcutSrc = src.substring(0, startIndex + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.state.top &&\n\t\t\t\t\t\t(token = this.tokenizer.paragraph(cutSrc))\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlastParagraphClipped &&\n\t\t\t\t\t\t\tlastToken?.type === \"paragraph\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlastToken.raw += \"\\n\" + token.raw;\n\t\t\t\t\t\t\tlastToken.text += \"\\n\" + token.text;\n\t\t\t\t\t\t\tthis.inlineQueue.pop();\n\t\t\t\t\t\t\tthis.inlineQueue[this.inlineQueue.length - 1].src =\n\t\t\t\t\t\t\t\tlastToken.text;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastParagraphClipped = cutSrc.length !== src.length;\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// text\n\t\t\t\t\tif ((token = this.tokenizer.text(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\t\tif (lastToken && lastToken.type === \"text\") {\n\t\t\t\t\t\t\tlastToken.raw += \"\\n\" + token.raw;\n\t\t\t\t\t\t\tlastToken.text += \"\\n\" + token.text;\n\t\t\t\t\t\t\tthis.inlineQueue.pop();\n\t\t\t\t\t\t\tthis.inlineQueue[this.inlineQueue.length - 1].src =\n\t\t\t\t\t\t\t\tlastToken.text;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tconst errMsg =\n\t\t\t\t\t\t\t\"Infinite loop on byte: \" + src.charCodeAt(0);\n\t\t\t\t\t\tif (this.options.silent) {\n\t\t\t\t\t\t\tconsole.error(errMsg);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(errMsg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.state.top = true;\n\t\t\t\treturn tokens;\n\t\t\t}\n\t\t\tinline(src, tokens = []) {\n\t\t\t\tthis.inlineQueue.push({ src, tokens });\n\t\t\t\treturn tokens;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Lexing/Compiling\n\t\t\t */\n\t\t\tinlineTokens(src, tokens = []) {\n\t\t\t\tlet token, lastToken, cutSrc;\n\t\t\t\t// String with links masked to avoid interference with em and strong\n\t\t\t\tlet maskedSrc = src;\n\t\t\t\tlet match;\n\t\t\t\tlet keepPrevChar, prevChar;\n\t\t\t\t// Mask out reflinks\n\t\t\t\tif (this.tokens.links) {\n\t\t\t\t\tconst links = Object.keys(this.tokens.links);\n\t\t\t\t\tif (links.length > 0) {\n\t\t\t\t\t\twhile (\n\t\t\t\t\t\t\t(match =\n\t\t\t\t\t\t\t\tthis.tokenizer.rules.inline.reflinkSearch.exec(\n\t\t\t\t\t\t\t\t\tmaskedSrc,\n\t\t\t\t\t\t\t\t)) != null\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tlinks.includes(\n\t\t\t\t\t\t\t\t\tmatch[0].slice(\n\t\t\t\t\t\t\t\t\t\tmatch[0].lastIndexOf(\"[\") + 1,\n\t\t\t\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tmaskedSrc =\n\t\t\t\t\t\t\t\t\tmaskedSrc.slice(0, match.index) +\n\t\t\t\t\t\t\t\t\t\"[\" +\n\t\t\t\t\t\t\t\t\t\"a\".repeat(match[0].length - 2) +\n\t\t\t\t\t\t\t\t\t\"]\" +\n\t\t\t\t\t\t\t\t\tmaskedSrc.slice(\n\t\t\t\t\t\t\t\t\t\tthis.tokenizer.rules.inline\n\t\t\t\t\t\t\t\t\t\t\t.reflinkSearch.lastIndex,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Mask out other blocks\n\t\t\t\twhile (\n\t\t\t\t\t(match =\n\t\t\t\t\t\tthis.tokenizer.rules.inline.blockSkip.exec(\n\t\t\t\t\t\t\tmaskedSrc,\n\t\t\t\t\t\t)) != null\n\t\t\t\t) {\n\t\t\t\t\tmaskedSrc =\n\t\t\t\t\t\tmaskedSrc.slice(0, match.index) +\n\t\t\t\t\t\t\"[\" +\n\t\t\t\t\t\t\"a\".repeat(match[0].length - 2) +\n\t\t\t\t\t\t\"]\" +\n\t\t\t\t\t\tmaskedSrc.slice(\n\t\t\t\t\t\t\tthis.tokenizer.rules.inline.blockSkip.lastIndex,\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Mask out escaped characters\n\t\t\t\twhile (\n\t\t\t\t\t(match =\n\t\t\t\t\t\tthis.tokenizer.rules.inline.anyPunctuation.exec(\n\t\t\t\t\t\t\tmaskedSrc,\n\t\t\t\t\t\t)) != null\n\t\t\t\t) {\n\t\t\t\t\tmaskedSrc =\n\t\t\t\t\t\tmaskedSrc.slice(0, match.index) +\n\t\t\t\t\t\t\"++\" +\n\t\t\t\t\t\tmaskedSrc.slice(\n\t\t\t\t\t\t\tthis.tokenizer.rules.inline.anyPunctuation\n\t\t\t\t\t\t\t\t.lastIndex,\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\twhile (src) {\n\t\t\t\t\tif (!keepPrevChar) {\n\t\t\t\t\t\tprevChar = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tkeepPrevChar = false;\n\t\t\t\t\t// extensions\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.options.extensions &&\n\t\t\t\t\t\tthis.options.extensions.inline &&\n\t\t\t\t\t\tthis.options.extensions.inline.some((extTokenizer) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(token = extTokenizer.call(\n\t\t\t\t\t\t\t\t\t{ lexer: this },\n\t\t\t\t\t\t\t\t\tsrc,\n\t\t\t\t\t\t\t\t\ttokens,\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t})\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// escape\n\t\t\t\t\tif ((token = this.tokenizer.escape(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// tag\n\t\t\t\t\tif ((token = this.tokenizer.tag(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlastToken &&\n\t\t\t\t\t\t\ttoken.type === \"text\" &&\n\t\t\t\t\t\t\tlastToken.type === \"text\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlastToken.raw += token.raw;\n\t\t\t\t\t\t\tlastToken.text += token.text;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// link\n\t\t\t\t\tif ((token = this.tokenizer.link(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// reflink, nolink\n\t\t\t\t\tif (\n\t\t\t\t\t\t(token = this.tokenizer.reflink(src, this.tokens.links))\n\t\t\t\t\t) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlastToken &&\n\t\t\t\t\t\t\ttoken.type === \"text\" &&\n\t\t\t\t\t\t\tlastToken.type === \"text\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tlastToken.raw += token.raw;\n\t\t\t\t\t\t\tlastToken.text += token.text;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// em & strong\n\t\t\t\t\tif (\n\t\t\t\t\t\t(token = this.tokenizer.emStrong(\n\t\t\t\t\t\t\tsrc,\n\t\t\t\t\t\t\tmaskedSrc,\n\t\t\t\t\t\t\tprevChar,\n\t\t\t\t\t\t))\n\t\t\t\t\t) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// code\n\t\t\t\t\tif ((token = this.tokenizer.codespan(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// br\n\t\t\t\t\tif ((token = this.tokenizer.br(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// del (gfm)\n\t\t\t\t\tif ((token = this.tokenizer.del(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// autolink\n\t\t\t\t\tif ((token = this.tokenizer.autolink(src))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// url (gfm)\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.state.inLink &&\n\t\t\t\t\t\t(token = this.tokenizer.url(src))\n\t\t\t\t\t) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// text\n\t\t\t\t\t// prevent inlineText consuming extensions by clipping 'src' to extension start\n\t\t\t\t\tcutSrc = src;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.options.extensions &&\n\t\t\t\t\t\tthis.options.extensions.startInline\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet startIndex = Number.POSITIVE_INFINITY;\n\t\t\t\t\t\tconst tempSrc = src.slice(1);\n\t\t\t\t\t\tlet tempStart;\n\t\t\t\t\t\tthis.options.extensions.startInline.forEach(\n\t\t\t\t\t\t\t(getStartIndex) => {\n\t\t\t\t\t\t\t\ttempStart = getStartIndex.call(\n\t\t\t\t\t\t\t\t\t{ lexer: this },\n\t\t\t\t\t\t\t\t\ttempSrc,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\ttypeof tempStart === \"number\" &&\n\t\t\t\t\t\t\t\t\ttempStart >= 0\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tstartIndex = Math.min(\n\t\t\t\t\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\t\t\t\t\ttempStart,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tstartIndex < Number.POSITIVE_INFINITY &&\n\t\t\t\t\t\t\tstartIndex >= 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcutSrc = src.substring(0, startIndex + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ((token = this.tokenizer.inlineText(cutSrc))) {\n\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\tif (token.raw.slice(-1) !== \"_\") {\n\t\t\t\t\t\t\t// Track prevChar before string of ____ started\n\t\t\t\t\t\t\tprevChar = token.raw.slice(-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tkeepPrevChar = true;\n\t\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\t\tif (lastToken && lastToken.type === \"text\") {\n\t\t\t\t\t\t\tlastToken.raw += token.raw;\n\t\t\t\t\t\t\tlastToken.text += token.text;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tconst errMsg =\n\t\t\t\t\t\t\t\"Infinite loop on byte: \" + src.charCodeAt(0);\n\t\t\t\t\t\tif (this.options.silent) {\n\t\t\t\t\t\t\tconsole.error(errMsg);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(errMsg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn tokens;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Renderer\n\t\t */\n\t\tclass _Renderer {\n\t\t\toptions;\n\t\t\tparser; // set by the parser\n\t\t\tconstructor(options) {\n\t\t\t\tthis.options = options || exports.defaults;\n\t\t\t}\n\t\t\tspace(token) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tcode({ text, lang, escaped }) {\n\t\t\t\tconst langString = (lang || \"\").match(/^\\S*/)?.[0];\n\t\t\t\tconst code = text.replace(/\\n$/, \"\") + \"\\n\";\n\t\t\t\tif (!langString) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"<pre><code>\" +\n\t\t\t\t\t\t(escaped ? code : escape$1(code, true)) +\n\t\t\t\t\t\t\"</code></pre>\\n\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t'<pre><code class=\"language-' +\n\t\t\t\t\tescape$1(langString) +\n\t\t\t\t\t'\">' +\n\t\t\t\t\t(escaped ? code : escape$1(code, true)) +\n\t\t\t\t\t\"</code></pre>\\n\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tblockquote({ tokens }) {\n\t\t\t\tconst body = this.parser.parse(tokens);\n\t\t\t\treturn `<blockquote>\\n${body}</blockquote>\\n`;\n\t\t\t}\n\t\t\thtml({ text }) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\theading({ tokens, depth }) {\n\t\t\t\treturn `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n\t\t\t}\n\t\t\thr(token) {\n\t\t\t\treturn \"<hr>\\n\";\n\t\t\t}\n\t\t\tlist(token) {\n\t\t\t\tconst ordered = token.ordered;\n\t\t\t\tconst start = token.start;\n\t\t\t\tlet body = \"\";\n\t\t\t\tfor (let j = 0; j < token.items.length; j++) {\n\t\t\t\t\tconst item = token.items[j];\n\t\t\t\t\tbody += this.listitem(item);\n\t\t\t\t}\n\t\t\t\tconst type = ordered ? \"ol\" : \"ul\";\n\t\t\t\tconst startAttr =\n\t\t\t\t\tordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n\t\t\t\treturn (\n\t\t\t\t\t\"<\" + type + startAttr + \">\\n\" + body + \"</\" + type + \">\\n\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tlistitem(item) {\n\t\t\t\tlet itemBody = \"\";\n\t\t\t\tif (item.task) {\n\t\t\t\t\tconst checkbox = this.checkbox({ checked: !!item.checked });\n\t\t\t\t\tif (item.loose) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\titem.tokens.length > 0 &&\n\t\t\t\t\t\t\titem.tokens[0].type === \"paragraph\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\titem.tokens[0].text =\n\t\t\t\t\t\t\t\tcheckbox + \" \" + item.tokens[0].text;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\titem.tokens[0].tokens &&\n\t\t\t\t\t\t\t\titem.tokens[0].tokens.length > 0 &&\n\t\t\t\t\t\t\t\titem.tokens[0].tokens[0].type === \"text\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\titem.tokens[0].tokens[0].text =\n\t\t\t\t\t\t\t\t\tcheckbox +\n\t\t\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\t\t\titem.tokens[0].tokens[0].text;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titem.tokens.unshift({\n\t\t\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\t\t\traw: checkbox + \" \",\n\t\t\t\t\t\t\t\ttext: checkbox + \" \",\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\titemBody += checkbox + \" \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titemBody += this.parser.parse(item.tokens, !!item.loose);\n\t\t\t\treturn `<li>${itemBody}</li>\\n`;\n\t\t\t}\n\t\t\tcheckbox({ checked }) {\n\t\t\t\treturn (\n\t\t\t\t\t\"<input \" +\n\t\t\t\t\t(checked ? 'checked=\"\" ' : \"\") +\n\t\t\t\t\t'disabled=\"\" type=\"checkbox\">'\n\t\t\t\t);\n\t\t\t}\n\t\t\tparagraph({ tokens }) {\n\t\t\t\treturn `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n\t\t\t}\n\t\t\ttable(token) {\n\t\t\t\tlet header = \"\";\n\t\t\t\t// header\n\t\t\t\tlet cell = \"\";\n\t\t\t\tfor (let j = 0; j < token.header.length; j++) {\n\t\t\t\t\tcell += this.tablecell(token.header[j]);\n\t\t\t\t}\n\t\t\t\theader += this.tablerow({ text: cell });\n\t\t\t\tlet body = \"\";\n\t\t\t\tfor (let j = 0; j < token.rows.length; j++) {\n\t\t\t\t\tconst row = token.rows[j];\n\t\t\t\t\tcell = \"\";\n\t\t\t\t\tfor (let k = 0; k < row.length; k++) {\n\t\t\t\t\t\tcell += this.tablecell(row[k]);\n\t\t\t\t\t}\n\t\t\t\t\tbody += this.tablerow({ text: cell });\n\t\t\t\t}\n\t\t\t\tif (body) body = `<tbody>${body}</tbody>`;\n\t\t\t\treturn (\n\t\t\t\t\t\"<table>\\n\" +\n\t\t\t\t\t\"<thead>\\n\" +\n\t\t\t\t\theader +\n\t\t\t\t\t\"</thead>\\n\" +\n\t\t\t\t\tbody +\n\t\t\t\t\t\"</table>\\n\"\n\t\t\t\t);\n\t\t\t}\n\t\t\ttablerow({ text }) {\n\t\t\t\treturn `<tr>\\n${text}</tr>\\n`;\n\t\t\t}\n\t\t\ttablecell(token) {\n\t\t\t\tconst content = this.parser.parseInline(token.tokens);\n\t\t\t\tconst type = token.header ? \"th\" : \"td\";\n\t\t\t\tconst tag = token.align\n\t\t\t\t\t? `<${type} align=\"${token.align}\">`\n\t\t\t\t\t: `<${type}>`;\n\t\t\t\treturn tag + content + `</${type}>\\n`;\n\t\t\t}\n\t\t\t/**\n\t\t\t * span level renderer\n\t\t\t */\n\t\t\tstrong({ tokens }) {\n\t\t\t\treturn `<strong>${this.parser.parseInline(tokens)}</strong>`;\n\t\t\t}\n\t\t\tem({ tokens }) {\n\t\t\t\treturn `<em>${this.parser.parseInline(tokens)}</em>`;\n\t\t\t}\n\t\t\tcodespan({ text }) {\n\t\t\t\treturn `<code>${text}</code>`;\n\t\t\t}\n\t\t\tbr(token) {\n\t\t\t\treturn \"<br>\";\n\t\t\t}\n\t\t\tdel({ tokens }) {\n\t\t\t\treturn `<del>${this.parser.parseInline(tokens)}</del>`;\n\t\t\t}\n\t\t\tlink({ href, title, tokens }) {\n\t\t\t\tconst text = this.parser.parseInline(tokens);\n\t\t\t\tconst cleanHref = cleanUrl(href);\n\t\t\t\tif (cleanHref === null) {\n\t\t\t\t\treturn text;\n\t\t\t\t}\n\t\t\t\thref = cleanHref;\n\t\t\t\tlet out = '<a href=\"' + href + '\"';\n\t\t\t\tif (title) {\n\t\t\t\t\tout += ' title=\"' + title + '\"';\n\t\t\t\t}\n\t\t\t\tout += \">\" + text + \"</a>\";\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\timage({ href, title, text }) {\n\t\t\t\tconst cleanHref = cleanUrl(href);\n\t\t\t\tif (cleanHref === null) {\n\t\t\t\t\treturn text;\n\t\t\t\t}\n\t\t\t\thref = cleanHref;\n\t\t\t\tlet out = `<img src=\"${href}\" alt=\"${text}\"`;\n\t\t\t\tif (title) {\n\t\t\t\t\tout += ` title=\"${title}\"`;\n\t\t\t\t}\n\t\t\t\tout += \">\";\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\ttext(token) {\n\t\t\t\treturn \"tokens\" in token && token.tokens\n\t\t\t\t\t? this.parser.parseInline(token.tokens)\n\t\t\t\t\t: token.text;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * TextRenderer\n\t\t * returns only the textual part of the token\n\t\t */\n\t\tclass _TextRenderer {\n\t\t\t// no need for block level renderers\n\t\t\tstrong({ text }) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\tem({ text }) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\tcodespan({ text }) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\tdel({ text }) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\thtml({ text }) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\ttext({ text }) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\tlink({ text }) {\n\t\t\t\treturn \"\" + text;\n\t\t\t}\n\t\t\timage({ text }) {\n\t\t\t\treturn \"\" + text;\n\t\t\t}\n\t\t\tbr() {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Parsing & Compiling\n\t\t */\n\t\tclass _Parser {\n\t\t\toptions;\n\t\t\trenderer;\n\t\t\ttextRenderer;\n\t\t\tconstructor(options) {\n\t\t\t\tthis.options = options || exports.defaults;\n\t\t\t\tthis.options.renderer =\n\t\t\t\t\tthis.options.renderer || new _Renderer();\n\t\t\t\tthis.renderer = this.options.renderer;\n\t\t\t\tthis.renderer.options = this.options;\n\t\t\t\tthis.renderer.parser = this;\n\t\t\t\tthis.textRenderer = new _TextRenderer();\n\t\t\t}\n\t\t\t/**\n\t\t\t * Static Parse Method\n\t\t\t */\n\t\t\tstatic parse(tokens, options) {\n\t\t\t\tconst parser = new _Parser(options);\n\t\t\t\treturn parser.parse(tokens);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Static Parse Inline Method\n\t\t\t */\n\t\t\tstatic parseInline(tokens, options) {\n\t\t\t\tconst parser = new _Parser(options);\n\t\t\t\treturn parser.parseInline(tokens);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Parse Loop\n\t\t\t */\n\t\t\tparse(tokens, top = true) {\n\t\t\t\tlet out = \"\";\n\t\t\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\t\t\tconst anyToken = tokens[i];\n\t\t\t\t\t// Run any renderer extensions\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.options.extensions &&\n\t\t\t\t\t\tthis.options.extensions.renderers &&\n\t\t\t\t\t\tthis.options.extensions.renderers[anyToken.type]\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst genericToken = anyToken;\n\t\t\t\t\t\tconst ret = this.options.extensions.renderers[\n\t\t\t\t\t\t\tgenericToken.type\n\t\t\t\t\t\t].call({ parser: this }, genericToken);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tret !== false ||\n\t\t\t\t\t\t\t![\n\t\t\t\t\t\t\t\t\"space\",\n\t\t\t\t\t\t\t\t\"hr\",\n\t\t\t\t\t\t\t\t\"heading\",\n\t\t\t\t\t\t\t\t\"code\",\n\t\t\t\t\t\t\t\t\"table\",\n\t\t\t\t\t\t\t\t\"blockquote\",\n\t\t\t\t\t\t\t\t\"list\",\n\t\t\t\t\t\t\t\t\"html\",\n\t\t\t\t\t\t\t\t\"paragraph\",\n\t\t\t\t\t\t\t\t\"text\",\n\t\t\t\t\t\t\t].includes(genericToken.type)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tout += ret || \"\";\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst token = anyToken;\n\t\t\t\t\tswitch (token.type) {\n\t\t\t\t\t\tcase \"space\": {\n\t\t\t\t\t\t\tout += this.renderer.space(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"hr\": {\n\t\t\t\t\t\t\tout += this.renderer.hr(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"heading\": {\n\t\t\t\t\t\t\tout += this.renderer.heading(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"code\": {\n\t\t\t\t\t\t\tout += this.renderer.code(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"table\": {\n\t\t\t\t\t\t\tout += this.renderer.table(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"blockquote\": {\n\t\t\t\t\t\t\tout += this.renderer.blockquote(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"list\": {\n\t\t\t\t\t\t\tout += this.renderer.list(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"html\": {\n\t\t\t\t\t\t\tout += this.renderer.html(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"paragraph\": {\n\t\t\t\t\t\t\tout += this.renderer.paragraph(token);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"text\": {\n\t\t\t\t\t\t\tlet textToken = token;\n\t\t\t\t\t\t\tlet body = this.renderer.text(textToken);\n\t\t\t\t\t\t\twhile (\n\t\t\t\t\t\t\t\ti + 1 < tokens.length &&\n\t\t\t\t\t\t\t\ttokens[i + 1].type === \"text\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\ttextToken = tokens[++i];\n\t\t\t\t\t\t\t\tbody += \"\\n\" + this.renderer.text(textToken);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (top) {\n\t\t\t\t\t\t\t\tout += this.renderer.paragraph({\n\t\t\t\t\t\t\t\t\ttype: \"paragraph\",\n\t\t\t\t\t\t\t\t\traw: body,\n\t\t\t\t\t\t\t\t\ttext: body,\n\t\t\t\t\t\t\t\t\ttokens: [\n\t\t\t\t\t\t\t\t\t\t{ type: \"text\", raw: body, text: body },\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tout += body;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\tconst errMsg =\n\t\t\t\t\t\t\t\t'Token with \"' +\n\t\t\t\t\t\t\t\ttoken.type +\n\t\t\t\t\t\t\t\t'\" type was not found.';\n\t\t\t\t\t\t\tif (this.options.silent) {\n\t\t\t\t\t\t\t\tconsole.error(errMsg);\n\t\t\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error(errMsg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Parse Inline Tokens\n\t\t\t */\n\t\t\tparseInline(tokens, renderer) {\n\t\t\t\trenderer = renderer || this.renderer;\n\t\t\t\tlet out = \"\";\n\t\t\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\t\t\tconst anyToken = tokens[i];\n\t\t\t\t\t// Run any renderer extensions\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.options.extensions &&\n\t\t\t\t\t\tthis.options.extensions.renderers &&\n\t\t\t\t\t\tthis.options.extensions.renderers[anyToken.type]\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst ret = this.options.extensions.renderers[\n\t\t\t\t\t\t\tanyToken.type\n\t\t\t\t\t\t].call({ parser: this }, anyToken);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tret !== false ||\n\t\t\t\t\t\t\t![\n\t\t\t\t\t\t\t\t\"escape\",\n\t\t\t\t\t\t\t\t\"html\",\n\t\t\t\t\t\t\t\t\"link\",\n\t\t\t\t\t\t\t\t\"image\",\n\t\t\t\t\t\t\t\t\"strong\",\n\t\t\t\t\t\t\t\t\"em\",\n\t\t\t\t\t\t\t\t\"codespan\",\n\t\t\t\t\t\t\t\t\"br\",\n\t\t\t\t\t\t\t\t\"del\",\n\t\t\t\t\t\t\t\t\"text\",\n\t\t\t\t\t\t\t].includes(anyToken.type)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tout += ret || \"\";\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst token = anyToken;\n\t\t\t\t\tswitch (token.type) {\n\t\t\t\t\t\tcase \"escape\": {\n\t\t\t\t\t\t\tout += renderer.text(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"html\": {\n\t\t\t\t\t\t\tout += renderer.html(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"link\": {\n\t\t\t\t\t\t\tout += renderer.link(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"image\": {\n\t\t\t\t\t\t\tout += renderer.image(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"strong\": {\n\t\t\t\t\t\t\tout += renderer.strong(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"em\": {\n\t\t\t\t\t\t\tout += renderer.em(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"codespan\": {\n\t\t\t\t\t\t\tout += renderer.codespan(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"br\": {\n\t\t\t\t\t\t\tout += renderer.br(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"del\": {\n\t\t\t\t\t\t\tout += renderer.del(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"text\": {\n\t\t\t\t\t\t\tout += renderer.text(token);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\tconst errMsg =\n\t\t\t\t\t\t\t\t'Token with \"' +\n\t\t\t\t\t\t\t\ttoken.type +\n\t\t\t\t\t\t\t\t'\" type was not found.';\n\t\t\t\t\t\t\tif (this.options.silent) {\n\t\t\t\t\t\t\t\tconsole.error(errMsg);\n\t\t\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error(errMsg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t}\n\n\t\tclass _Hooks {\n\t\t\toptions;\n\t\t\tconstructor(options) {\n\t\t\t\tthis.options = options || exports.defaults;\n\t\t\t}\n\t\t\tstatic passThroughHooks = new Set([\n\t\t\t\t\"preprocess\",\n\t\t\t\t\"postprocess\",\n\t\t\t\t\"processAllTokens\",\n\t\t\t]);\n\t\t\t/**\n\t\t\t * Process markdown before marked\n\t\t\t */\n\t\t\tpreprocess(markdown) {\n\t\t\t\treturn markdown;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Process HTML after marked is finished\n\t\t\t */\n\t\t\tpostprocess(html) {\n\t\t\t\treturn html;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Process all tokens before walk tokens\n\t\t\t */\n\t\t\tprocessAllTokens(tokens) {\n\t\t\t\treturn tokens;\n\t\t\t}\n\t\t}\n\n\t\tclass Marked {\n\t\t\tdefaults = _getDefaults();\n\t\t\toptions = this.setOptions;\n\t\t\tparse = this.parseMarkdown(_Lexer.lex, _Parser.parse);\n\t\t\tparseInline = this.parseMarkdown(\n\t\t\t\t_Lexer.lexInline,\n\t\t\t\t_Parser.parseInline,\n\t\t\t);\n\t\t\tParser = _Parser;\n\t\t\tRenderer = _Renderer;\n\t\t\tTextRenderer = _TextRenderer;\n\t\t\tLexer = _Lexer;\n\t\t\tTokenizer = _Tokenizer;\n\t\t\tHooks = _Hooks;\n\t\t\tconstructor(...args) {\n\t\t\t\tthis.use(...args);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Run callback for every token\n\t\t\t */\n\t\t\twalkTokens(tokens, callback) {\n\t\t\t\tlet values = [];\n\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\tvalues = values.concat(callback.call(this, token));\n\t\t\t\t\tswitch (token.type) {\n\t\t\t\t\t\tcase \"table\": {\n\t\t\t\t\t\t\tconst tableToken = token;\n\t\t\t\t\t\t\tfor (const cell of tableToken.header) {\n\t\t\t\t\t\t\t\tvalues = values.concat(\n\t\t\t\t\t\t\t\t\tthis.walkTokens(cell.tokens, callback),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const row of tableToken.rows) {\n\t\t\t\t\t\t\t\tfor (const cell of row) {\n\t\t\t\t\t\t\t\t\tvalues = values.concat(\n\t\t\t\t\t\t\t\t\t\tthis.walkTokens(cell.tokens, callback),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"list\": {\n\t\t\t\t\t\t\tconst listToken = token;\n\t\t\t\t\t\t\tvalues = values.concat(\n\t\t\t\t\t\t\t\tthis.walkTokens(listToken.items, callback),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\tconst genericToken = token;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.defaults.extensions?.childTokens?.[\n\t\t\t\t\t\t\t\t\tgenericToken.type\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.defaults.extensions.childTokens[\n\t\t\t\t\t\t\t\t\tgenericToken.type\n\t\t\t\t\t\t\t\t].forEach((childTokens) => {\n\t\t\t\t\t\t\t\t\tconst tokens = genericToken[\n\t\t\t\t\t\t\t\t\t\tchildTokens\n\t\t\t\t\t\t\t\t\t].flat(Number.POSITIVE_INFINITY);\n\t\t\t\t\t\t\t\t\tvalues = values.concat(\n\t\t\t\t\t\t\t\t\t\tthis.walkTokens(tokens, callback),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else if (genericToken.tokens) {\n\t\t\t\t\t\t\t\tvalues = values.concat(\n\t\t\t\t\t\t\t\t\tthis.walkTokens(\n\t\t\t\t\t\t\t\t\t\tgenericToken.tokens,\n\t\t\t\t\t\t\t\t\t\tcallback,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t\tuse(...args) {\n\t\t\t\tconst extensions = this.defaults.extensions || {\n\t\t\t\t\trenderers: {},\n\t\t\t\t\tchildTokens: {},\n\t\t\t\t};\n\t\t\t\targs.forEach((pack) => {\n\t\t\t\t\t// copy options to new object\n\t\t\t\t\tconst opts = { ...pack };\n\t\t\t\t\t// set async to true if it was set to true before\n\t\t\t\t\topts.async = this.defaults.async || opts.async || false;\n\t\t\t\t\t// ==-- Parse \"addon\" extensions --== //\n\t\t\t\t\tif (pack.extensions) {\n\t\t\t\t\t\tpack.extensions.forEach((ext) => {\n\t\t\t\t\t\t\tif (!ext.name) {\n\t\t\t\t\t\t\t\tthrow new Error(\"extension name required\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\"renderer\" in ext) {\n\t\t\t\t\t\t\t\t// Renderer extensions\n\t\t\t\t\t\t\t\tconst prevRenderer =\n\t\t\t\t\t\t\t\t\textensions.renderers[ext.name];\n\t\t\t\t\t\t\t\tif (prevRenderer) {\n\t\t\t\t\t\t\t\t\t// Replace extension with func to run new extension but fall back if false\n\t\t\t\t\t\t\t\t\textensions.renderers[ext.name] = function (\n\t\t\t\t\t\t\t\t\t\t...args\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tlet ret = ext.renderer.apply(\n\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\targs,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tif (ret === false) {\n\t\t\t\t\t\t\t\t\t\t\tret = prevRenderer.apply(\n\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\targs,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\textensions.renderers[ext.name] =\n\t\t\t\t\t\t\t\t\t\text.renderer;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\"tokenizer\" in ext) {\n\t\t\t\t\t\t\t\t// Tokenizer Extensions\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t!ext.level ||\n\t\t\t\t\t\t\t\t\t(ext.level !== \"block\" &&\n\t\t\t\t\t\t\t\t\t\text.level !== \"inline\")\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\"extension level must be 'block' or 'inline'\",\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst extLevel = extensions[ext.level];\n\t\t\t\t\t\t\t\tif (extLevel) {\n\t\t\t\t\t\t\t\t\textLevel.unshift(ext.tokenizer);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\textensions[ext.level] = [ext.tokenizer];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (ext.start) {\n\t\t\t\t\t\t\t\t\t// Function to check for start of token\n\t\t\t\t\t\t\t\t\tif (ext.level === \"block\") {\n\t\t\t\t\t\t\t\t\t\tif (extensions.startBlock) {\n\t\t\t\t\t\t\t\t\t\t\textensions.startBlock.push(\n\t\t\t\t\t\t\t\t\t\t\t\text.start,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\textensions.startBlock = [ext.start];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if (ext.level === \"inline\") {\n\t\t\t\t\t\t\t\t\t\tif (extensions.startInline) {\n\t\t\t\t\t\t\t\t\t\t\textensions.startInline.push(\n\t\t\t\t\t\t\t\t\t\t\t\text.start,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\textensions.startInline = [\n\t\t\t\t\t\t\t\t\t\t\t\text.start,\n\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\"childTokens\" in ext && ext.childTokens) {\n\t\t\t\t\t\t\t\t// Child tokens to be visited by walkTokens\n\t\t\t\t\t\t\t\textensions.childTokens[ext.name] =\n\t\t\t\t\t\t\t\t\text.childTokens;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\topts.extensions = extensions;\n\t\t\t\t\t}\n\t\t\t\t\t// ==-- Parse \"overwrite\" extensions --== //\n\t\t\t\t\tif (pack.renderer) {\n\t\t\t\t\t\tconst renderer =\n\t\t\t\t\t\t\tthis.defaults.renderer ||\n\t\t\t\t\t\t\tnew _Renderer(this.defaults);\n\t\t\t\t\t\tfor (const prop in pack.renderer) {\n\t\t\t\t\t\t\tif (!(prop in renderer)) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`renderer '${prop}' does not exist`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ([\"options\", \"parser\"].includes(prop)) {\n\t\t\t\t\t\t\t\t// ignore options property\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst rendererProp = prop;\n\t\t\t\t\t\t\tconst rendererFunc = pack.renderer[rendererProp];\n\t\t\t\t\t\t\tconst prevRenderer = renderer[rendererProp];\n\t\t\t\t\t\t\t// Replace renderer with func to run extension, but fall back if false\n\t\t\t\t\t\t\trenderer[rendererProp] = (...args) => {\n\t\t\t\t\t\t\t\tlet ret = rendererFunc.apply(renderer, args);\n\t\t\t\t\t\t\t\tif (ret === false) {\n\t\t\t\t\t\t\t\t\tret = prevRenderer.apply(renderer, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn ret || \"\";\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\topts.renderer = renderer;\n\t\t\t\t\t}\n\t\t\t\t\tif (pack.tokenizer) {\n\t\t\t\t\t\tconst tokenizer =\n\t\t\t\t\t\t\tthis.defaults.tokenizer ||\n\t\t\t\t\t\t\tnew _Tokenizer(this.defaults);\n\t\t\t\t\t\tfor (const prop in pack.tokenizer) {\n\t\t\t\t\t\t\tif (!(prop in tokenizer)) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`tokenizer '${prop}' does not exist`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ([\"options\", \"rules\", \"lexer\"].includes(prop)) {\n\t\t\t\t\t\t\t\t// ignore options, rules, and lexer properties\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst tokenizerProp = prop;\n\t\t\t\t\t\t\tconst tokenizerFunc = pack.tokenizer[tokenizerProp];\n\t\t\t\t\t\t\tconst prevTokenizer = tokenizer[tokenizerProp];\n\t\t\t\t\t\t\t// Replace tokenizer with func to run extension, but fall back if false\n\t\t\t\t\t\t\t// @ts-expect-error cannot type tokenizer function dynamically\n\t\t\t\t\t\t\ttokenizer[tokenizerProp] = (...args) => {\n\t\t\t\t\t\t\t\tlet ret = tokenizerFunc.apply(tokenizer, args);\n\t\t\t\t\t\t\t\tif (ret === false) {\n\t\t\t\t\t\t\t\t\tret = prevTokenizer.apply(tokenizer, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\topts.tokenizer = tokenizer;\n\t\t\t\t\t}\n\t\t\t\t\t// ==-- Parse Hooks extensions --== //\n\t\t\t\t\tif (pack.hooks) {\n\t\t\t\t\t\tconst hooks = this.defaults.hooks || new _Hooks();\n\t\t\t\t\t\tfor (const prop in pack.hooks) {\n\t\t\t\t\t\t\tif (!(prop in hooks)) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`hook '${prop}' does not exist`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (prop === \"options\") {\n\t\t\t\t\t\t\t\t// ignore options property\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst hooksProp = prop;\n\t\t\t\t\t\t\tconst hooksFunc = pack.hooks[hooksProp];\n\t\t\t\t\t\t\tconst prevHook = hooks[hooksProp];\n\t\t\t\t\t\t\tif (_Hooks.passThroughHooks.has(prop)) {\n\t\t\t\t\t\t\t\t// @ts-expect-error cannot type hook function dynamically\n\t\t\t\t\t\t\t\thooks[hooksProp] = (arg) => {\n\t\t\t\t\t\t\t\t\tif (this.defaults.async) {\n\t\t\t\t\t\t\t\t\t\treturn Promise.resolve(\n\t\t\t\t\t\t\t\t\t\t\thooksFunc.call(hooks, arg),\n\t\t\t\t\t\t\t\t\t\t).then((ret) => {\n\t\t\t\t\t\t\t\t\t\t\treturn prevHook.call(hooks, ret);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst ret = hooksFunc.call(hooks, arg);\n\t\t\t\t\t\t\t\t\treturn prevHook.call(hooks, ret);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// @ts-expect-error cannot type hook function dynamically\n\t\t\t\t\t\t\t\thooks[hooksProp] = (...args) => {\n\t\t\t\t\t\t\t\t\tlet ret = hooksFunc.apply(hooks, args);\n\t\t\t\t\t\t\t\t\tif (ret === false) {\n\t\t\t\t\t\t\t\t\t\tret = prevHook.apply(hooks, args);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\topts.hooks = hooks;\n\t\t\t\t\t}\n\t\t\t\t\t// ==-- Parse WalkTokens extensions --== //\n\t\t\t\t\tif (pack.walkTokens) {\n\t\t\t\t\t\tconst walkTokens = this.defaults.walkTokens;\n\t\t\t\t\t\tconst packWalktokens = pack.walkTokens;\n\t\t\t\t\t\topts.walkTokens = function (token) {\n\t\t\t\t\t\t\tlet values = [];\n\t\t\t\t\t\t\tvalues.push(packWalktokens.call(this, token));\n\t\t\t\t\t\t\tif (walkTokens) {\n\t\t\t\t\t\t\t\tvalues = values.concat(\n\t\t\t\t\t\t\t\t\twalkTokens.call(this, token),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn values;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tthis.defaults = { ...this.defaults, ...opts };\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tsetOptions(opt) {\n\t\t\t\tthis.defaults = { ...this.defaults, ...opt };\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tlexer(src, options) {\n\t\t\t\treturn _Lexer.lex(src, options ?? this.defaults);\n\t\t\t}\n\t\t\tparser(tokens, options) {\n\t\t\t\treturn _Parser.parse(tokens, options ?? this.defaults);\n\t\t\t}\n\t\t\tparseMarkdown(lexer, parser) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\tconst parse = (src, options) => {\n\t\t\t\t\tconst origOpt = { ...options };\n\t\t\t\t\tconst opt = { ...this.defaults, ...origOpt };\n\t\t\t\t\tconst throwError = this.onError(!!opt.silent, !!opt.async);\n\t\t\t\t\t// throw error if an extension set async to true but parse was called with async: false\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.defaults.async === true &&\n\t\t\t\t\t\torigOpt.async === false\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn throwError(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\"marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// throw error in case of non string input\n\t\t\t\t\tif (typeof src === \"undefined\" || src === null) {\n\t\t\t\t\t\treturn throwError(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\"marked(): input parameter is undefined or null\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof src !== \"string\") {\n\t\t\t\t\t\treturn throwError(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\"marked(): input parameter is of type \" +\n\t\t\t\t\t\t\t\t\tObject.prototype.toString.call(src) +\n\t\t\t\t\t\t\t\t\t\", string expected\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (opt.hooks) {\n\t\t\t\t\t\topt.hooks.options = opt;\n\t\t\t\t\t}\n\t\t\t\t\tif (opt.async) {\n\t\t\t\t\t\treturn Promise.resolve(\n\t\t\t\t\t\t\topt.hooks ? opt.hooks.preprocess(src) : src,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then((src) => lexer(src, opt))\n\t\t\t\t\t\t\t.then((tokens) =>\n\t\t\t\t\t\t\t\topt.hooks\n\t\t\t\t\t\t\t\t\t? opt.hooks.processAllTokens(tokens)\n\t\t\t\t\t\t\t\t\t: tokens,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then((tokens) =>\n\t\t\t\t\t\t\t\topt.walkTokens\n\t\t\t\t\t\t\t\t\t? Promise.all(\n\t\t\t\t\t\t\t\t\t\t\tthis.walkTokens(\n\t\t\t\t\t\t\t\t\t\t\t\ttokens,\n\t\t\t\t\t\t\t\t\t\t\t\topt.walkTokens,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t).then(() => tokens)\n\t\t\t\t\t\t\t\t\t: tokens,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then((tokens) => parser(tokens, opt))\n\t\t\t\t\t\t\t.then((html) =>\n\t\t\t\t\t\t\t\topt.hooks ? opt.hooks.postprocess(html) : html,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.catch(throwError);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (opt.hooks) {\n\t\t\t\t\t\t\tsrc = opt.hooks.preprocess(src);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet tokens = lexer(src, opt);\n\t\t\t\t\t\tif (opt.hooks) {\n\t\t\t\t\t\t\ttokens = opt.hooks.processAllTokens(tokens);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (opt.walkTokens) {\n\t\t\t\t\t\t\tthis.walkTokens(tokens, opt.walkTokens);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet html = parser(tokens, opt);\n\t\t\t\t\t\tif (opt.hooks) {\n\t\t\t\t\t\t\thtml = opt.hooks.postprocess(html);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn html;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn throwError(e);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn parse;\n\t\t\t}\n\t\t\tonError(silent, async) {\n\t\t\t\treturn (e) => {\n\t\t\t\t\te.message +=\n\t\t\t\t\t\t\"\\nPlease report this to https://github.com/markedjs/marked.\";\n\t\t\t\t\tif (silent) {\n\t\t\t\t\t\tconst msg =\n\t\t\t\t\t\t\t\"<p>An error occurred:</p><pre>\" +\n\t\t\t\t\t\t\tescape$1(e.message + \"\", true) +\n\t\t\t\t\t\t\t\"</pre>\";\n\t\t\t\t\t\tif (async) {\n\t\t\t\t\t\t\treturn Promise.resolve(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn msg;\n\t\t\t\t\t}\n\t\t\t\t\tif (async) {\n\t\t\t\t\t\treturn Promise.reject(e);\n\t\t\t\t\t}\n\t\t\t\t\tthrow e;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst markedInstance = new Marked();\n\t\tfunction marked(src, opt) {\n\t\t\treturn markedInstance.parse(src, opt);\n\t\t}\n\t\t/**\n\t\t * Sets the default options.\n\t\t *\n\t\t * @param options Hash of options\n\t\t */\n\t\tmarked.options = marked.setOptions = (options) => {\n\t\t\tmarkedInstance.setOptions(options);\n\t\t\tmarked.defaults = markedInstance.defaults;\n\t\t\tchangeDefaults(marked.defaults);\n\t\t\treturn marked;\n\t\t};\n\t\t/**\n\t\t * Gets the original marked default options.\n\t\t */\n\t\tmarked.getDefaults = _getDefaults;\n\t\tmarked.defaults = exports.defaults;\n\t\t/**\n\t\t * Use Extension\n\t\t */\n\t\tmarked.use = (...args) => {\n\t\t\tmarkedInstance.use(...args);\n\t\t\tmarked.defaults = markedInstance.defaults;\n\t\t\tchangeDefaults(marked.defaults);\n\t\t\treturn marked;\n\t\t};\n\t\t/**\n\t\t * Run callback for every token\n\t\t */\n\t\tmarked.walkTokens = (tokens, callback) =>\n\t\t\tmarkedInstance.walkTokens(tokens, callback);\n\t\t/**\n\t\t * Compiles markdown to HTML without enclosing `p` tag.\n\t\t *\n\t\t * @param src String of markdown source to be compiled\n\t\t * @param options Hash of options\n\t\t * @return String of compiled HTML\n\t\t */\n\t\tmarked.parseInline = markedInstance.parseInline;\n\t\t/**\n\t\t * Expose\n\t\t */\n\t\tmarked.Parser = _Parser;\n\t\tmarked.parser = _Parser.parse;\n\t\tmarked.Renderer = _Renderer;\n\t\tmarked.TextRenderer = _TextRenderer;\n\t\tmarked.Lexer = _Lexer;\n\t\tmarked.lexer = _Lexer.lex;\n\t\tmarked.Tokenizer = _Tokenizer;\n\t\tmarked.Hooks = _Hooks;\n\t\tmarked.parse = marked;\n\t\tconst options = marked.options;\n\t\tconst setOptions = marked.setOptions;\n\t\tconst use = marked.use;\n\t\tconst walkTokens = marked.walkTokens;\n\t\tconst parseInline = marked.parseInline;\n\t\tconst parse = marked;\n\t\tconst parser = _Parser.parse;\n\t\tconst lexer = _Lexer.lex;\n\n\t\texports.Hooks = _Hooks;\n\t\texports.Lexer = _Lexer;\n\t\texports.Marked = Marked;\n\t\texports.Parser = _Parser;\n\t\texports.Renderer = _Renderer;\n\t\texports.TextRenderer = _TextRenderer;\n\t\texports.Tokenizer = _Tokenizer;\n\t\texports.getDefaults = _getDefaults;\n\t\texports.lexer = lexer;\n\t\texports.marked = marked;\n\t\texports.options = options;\n\t\texports.parse = parse;\n\t\texports.parseInline = parseInline;\n\t\texports.parser = parser;\n\t\texports.setOptions = setOptions;\n\t\texports.use = use;\n\t\texports.walkTokens = walkTokens;\n\t});\n\n\t// ESM-uncomment-begin\n})();\nexport var Hooks = __marked_exports.Hooks || exports.Hooks;\nexport var Lexer = __marked_exports.Lexer || exports.Lexer;\nexport var Marked = __marked_exports.Marked || exports.Marked;\nexport var Parser = __marked_exports.Parser || exports.Parser;\nexport var Renderer = __marked_exports.Renderer || exports.Renderer;\nexport var TextRenderer = __marked_exports.TextRenderer || exports.TextRenderer;\nexport var Tokenizer = __marked_exports.Tokenizer || exports.Tokenizer;\nexport var defaults = __marked_exports.defaults || exports.defaults;\nexport var getDefaults = __marked_exports.getDefaults || exports.getDefaults;\nexport var lexer = __marked_exports.lexer || exports.lexer;\nexport var marked = __marked_exports.marked || exports.marked;\nexport var options = __marked_exports.options || exports.options;\nexport var parse = __marked_exports.parse || exports.parse;\nexport var parseInline = __marked_exports.parseInline || exports.parseInline;\nexport var parser = __marked_exports.parser || exports.parser;\nexport var setOptions = __marked_exports.setOptions || exports.setOptions;\nexport var use = __marked_exports.use || exports.use;\nexport var walkTokens = __marked_exports.walkTokens || exports.walkTokens;\n// ESM-uncomment-end\n\n//# sourceMappingURL=marked.umd.js.map\n"],
  "mappings": "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",
  "names": ["exports", "html", "link", "lexer", "options", "list", "tag", "text", "parser", "Marked", "tokens", "args", "ret", "walkTokens", "parse", "src", "marked", "setOptions", "use", "parseInline"]
}
