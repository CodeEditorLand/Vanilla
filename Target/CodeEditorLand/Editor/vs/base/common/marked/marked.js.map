{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/marked/marked.js"],
  "sourcesContent": ["/**\n * marked v14.0.0 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n// ESM-uncomment-begin\nlet __marked_exports = {};\n(function() {\n  function define(deps, factory) {\n    factory(__marked_exports);\n  }\n  define.amd = true;\n// ESM-uncomment-end\n\n(function (global, factory) {\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.marked = {}));\n  })(this, (function (exports) {\n\t'use strict';\n\n\t/**\n\t * Gets the original marked default options.\n\t */\n\tfunction _getDefaults() {\n\t\treturn {\n\t\t\tasync: false,\n\t\t\tbreaks: false,\n\t\t\textensions: null,\n\t\t\tgfm: true,\n\t\t\thooks: null,\n\t\t\tpedantic: false,\n\t\t\trenderer: null,\n\t\t\tsilent: false,\n\t\t\ttokenizer: null,\n\t\t\twalkTokens: null,\n\t\t};\n\t}\n\texports.defaults = _getDefaults();\n\tfunction changeDefaults(newDefaults) {\n\t\texports.defaults = newDefaults;\n\t}\n\n\t/**\n\t * Helpers\n\t */\n\tconst escapeTest = /[&<>\"']/;\n\tconst escapeReplace = new RegExp(escapeTest.source, 'g');\n\tconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\n\tconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\n\tconst escapeReplacements = {\n\t\t'&': '&amp;',\n\t\t'<': '&lt;',\n\t\t'>': '&gt;',\n\t\t'\"': '&quot;',\n\t\t\"'\": '&#39;',\n\t};\n\tconst getEscapeReplacement = (ch) => escapeReplacements[ch];\n\tfunction escape$1(html, encode) {\n\t\tif (encode) {\n\t\t\tif (escapeTest.test(html)) {\n\t\t\t\treturn html.replace(escapeReplace, getEscapeReplacement);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (escapeTestNoEncode.test(html)) {\n\t\t\t\treturn html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n\t\t\t}\n\t\t}\n\t\treturn html;\n\t}\n\tconst caret = /(^|[^\\[])\\^/g;\n\tfunction edit(regex, opt) {\n\t\tlet source = typeof regex === 'string' ? regex : regex.source;\n\t\topt = opt || '';\n\t\tconst obj = {\n\t\t\treplace: (name, val) => {\n\t\t\t\tlet valSource = typeof val === 'string' ? val : val.source;\n\t\t\t\tvalSource = valSource.replace(caret, '$1');\n\t\t\t\tsource = source.replace(name, valSource);\n\t\t\t\treturn obj;\n\t\t\t},\n\t\t\tgetRegex: () => {\n\t\t\t\treturn new RegExp(source, opt);\n\t\t\t},\n\t\t};\n\t\treturn obj;\n\t}\n\tfunction cleanUrl(href) {\n\t\ttry {\n\t\t\thref = encodeURI(href).replace(/%25/g, '%');\n\t\t}\n\t\tcatch {\n\t\t\treturn null;\n\t\t}\n\t\treturn href;\n\t}\n\tconst noopTest = { exec: () => null };\n\tfunction splitCells(tableRow, count) {\n\t\t// ensure that every cell-delimiting pipe has a space\n\t\t// before it to distinguish it from an escaped pipe\n\t\tconst row = tableRow.replace(/\\|/g, (match, offset, str) => {\n\t\t\tlet escaped = false;\n\t\t\tlet curr = offset;\n\t\t\twhile (--curr >= 0 && str[curr] === '\\\\')\n\t\t\t\tescaped = !escaped;\n\t\t\tif (escaped) {\n\t\t\t\t// odd number of slashes means | is escaped\n\t\t\t\t// so we leave it alone\n\t\t\t\treturn '|';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// add space before unescaped |\n\t\t\t\treturn ' |';\n\t\t\t}\n\t\t}), cells = row.split(/ \\|/);\n\t\tlet i = 0;\n\t\t// First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\t\tif (!cells[0].trim()) {\n\t\t\tcells.shift();\n\t\t}\n\t\tif (cells.length > 0 && !cells[cells.length - 1].trim()) {\n\t\t\tcells.pop();\n\t\t}\n\t\tif (count) {\n\t\t\tif (cells.length > count) {\n\t\t\t\tcells.splice(count);\n\t\t\t}\n\t\t\telse {\n\t\t\t\twhile (cells.length < count)\n\t\t\t\t\tcells.push('');\n\t\t\t}\n\t\t}\n\t\tfor (; i < cells.length; i++) {\n\t\t\t// leading or trailing whitespace is ignored per the gfm spec\n\t\t\tcells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n\t\t}\n\t\treturn cells;\n\t}\n\t/**\n\t * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n\t * /c*$/ is vulnerable to REDOS.\n\t *\n\t * @param str\n\t * @param c\n\t * @param invert Remove suffix of non-c chars instead. Default falsey.\n\t */\n\tfunction rtrim(str, c, invert) {\n\t\tconst l = str.length;\n\t\tif (l === 0) {\n\t\t\treturn '';\n\t\t}\n\t\t// Length of suffix matching the invert condition.\n\t\tlet suffLen = 0;\n\t\t// Step left until we fail to match the invert condition.\n\t\twhile (suffLen < l) {\n\t\t\tconst currChar = str.charAt(l - suffLen - 1);\n\t\t\tif (currChar === c && !invert) {\n\t\t\t\tsuffLen++;\n\t\t\t}\n\t\t\telse if (currChar !== c && invert) {\n\t\t\t\tsuffLen++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn str.slice(0, l - suffLen);\n\t}\n\tfunction findClosingBracket(str, b) {\n\t\tif (str.indexOf(b[1]) === -1) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet level = 0;\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tif (str[i] === '\\\\') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse if (str[i] === b[0]) {\n\t\t\t\tlevel++;\n\t\t\t}\n\t\t\telse if (str[i] === b[1]) {\n\t\t\t\tlevel--;\n\t\t\t\tif (level < 0) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tfunction outputLink(cap, link, raw, lexer) {\n\t\tconst href = link.href;\n\t\tconst title = link.title ? escape$1(link.title) : null;\n\t\tconst text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\t\tif (cap[0].charAt(0) !== '!') {\n\t\t\tlexer.state.inLink = true;\n\t\t\tconst token = {\n\t\t\t\ttype: 'link',\n\t\t\t\traw,\n\t\t\t\thref,\n\t\t\t\ttitle,\n\t\t\t\ttext,\n\t\t\t\ttokens: lexer.inlineTokens(text),\n\t\t\t};\n\t\t\tlexer.state.inLink = false;\n\t\t\treturn token;\n\t\t}\n\t\treturn {\n\t\t\ttype: 'image',\n\t\t\traw,\n\t\t\thref,\n\t\t\ttitle,\n\t\t\ttext: escape$1(text),\n\t\t};\n\t}\n\tfunction indentCodeCompensation(raw, text) {\n\t\tconst matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\t\tif (matchIndentToCode === null) {\n\t\t\treturn text;\n\t\t}\n\t\tconst indentToCode = matchIndentToCode[1];\n\t\treturn text\n\t\t\t.split('\\n')\n\t\t\t.map(node => {\n\t\t\t\tconst matchIndentInNode = node.match(/^\\s+/);\n\t\t\t\tif (matchIndentInNode === null) {\n\t\t\t\t\treturn node;\n\t\t\t\t}\n\t\t\t\tconst [indentInNode] = matchIndentInNode;\n\t\t\t\tif (indentInNode.length >= indentToCode.length) {\n\t\t\t\t\treturn node.slice(indentToCode.length);\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t})\n\t\t\t.join('\\n');\n\t}\n\t/**\n\t * Tokenizer\n\t */\n\tclass _Tokenizer {\n\t\toptions;\n\t\trules; // set by the lexer\n\t\tlexer; // set by the lexer\n\t\tconstructor(options) {\n\t\t\tthis.options = options || exports.defaults;\n\t\t}\n\t\tspace(src) {\n\t\t\tconst cap = this.rules.block.newline.exec(src);\n\t\t\tif (cap && cap[0].length > 0) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'space',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tcode(src) {\n\t\t\tconst cap = this.rules.block.code.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tconst text = cap[0].replace(/^ {1,4}/gm, '');\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'code',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\tcodeBlockStyle: 'indented',\n\t\t\t\t\ttext: !this.options.pedantic\n\t\t\t\t\t\t? rtrim(text, '\\n')\n\t\t\t\t\t\t: text,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tfences(src) {\n\t\t\tconst cap = this.rules.block.fences.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tconst raw = cap[0];\n\t\t\t\tconst text = indentCodeCompensation(raw, cap[3] || '');\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'code',\n\t\t\t\t\traw,\n\t\t\t\t\tlang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n\t\t\t\t\ttext,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\theading(src) {\n\t\t\tconst cap = this.rules.block.heading.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tlet text = cap[2].trim();\n\t\t\t\t// remove trailing #s\n\t\t\t\tif (/#$/.test(text)) {\n\t\t\t\t\tconst trimmed = rtrim(text, '#');\n\t\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t\ttext = trimmed.trim();\n\t\t\t\t\t}\n\t\t\t\t\telse if (!trimmed || / $/.test(trimmed)) {\n\t\t\t\t\t\t// CommonMark requires space before trailing #s\n\t\t\t\t\t\ttext = trimmed.trim();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'heading',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\tdepth: cap[1].length,\n\t\t\t\t\ttext,\n\t\t\t\t\ttokens: this.lexer.inline(text),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\thr(src) {\n\t\t\tconst cap = this.rules.block.hr.exec(src);\n\t\t\tif (cap) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'hr',\n\t\t\t\t\traw: rtrim(cap[0], '\\n'),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tblockquote(src) {\n\t\t\tconst cap = this.rules.block.blockquote.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tlet lines = rtrim(cap[0], '\\n').split('\\n');\n\t\t\t\tlet raw = '';\n\t\t\t\tlet text = '';\n\t\t\t\tconst tokens = [];\n\t\t\t\twhile (lines.length > 0) {\n\t\t\t\t\tlet inBlockquote = false;\n\t\t\t\t\tconst currentLines = [];\n\t\t\t\t\tlet i;\n\t\t\t\t\tfor (i = 0; i < lines.length; i++) {\n\t\t\t\t\t\t// get lines up to a continuation\n\t\t\t\t\t\tif (/^ {0,3}>/.test(lines[i])) {\n\t\t\t\t\t\t\tcurrentLines.push(lines[i]);\n\t\t\t\t\t\t\tinBlockquote = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!inBlockquote) {\n\t\t\t\t\t\t\tcurrentLines.push(lines[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlines = lines.slice(i);\n\t\t\t\t\tconst currentRaw = currentLines.join('\\n');\n\t\t\t\t\tconst currentText = currentRaw\n\t\t\t\t\t\t// precede setext continuation with 4 spaces so it isn't a setext\n\t\t\t\t\t\t.replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n\t\t\t\t\t\t.replace(/^ {0,3}>[ \\t]?/gm, '');\n\t\t\t\t\traw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n\t\t\t\t\ttext = text ? `${text}\\n${currentText}` : currentText;\n\t\t\t\t\t// parse blockquote lines as top level tokens\n\t\t\t\t\t// merge paragraphs if this is a continuation\n\t\t\t\t\tconst top = this.lexer.state.top;\n\t\t\t\t\tthis.lexer.state.top = true;\n\t\t\t\t\tthis.lexer.blockTokens(currentText, tokens, true);\n\t\t\t\t\tthis.lexer.state.top = top;\n\t\t\t\t\t// if there is no continuation then we are done\n\t\t\t\t\tif (lines.length === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst lastToken = tokens[tokens.length - 1];\n\t\t\t\t\tif (lastToken?.type === 'code') {\n\t\t\t\t\t\t// blockquote continuation cannot be preceded by a code block\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lastToken?.type === 'blockquote') {\n\t\t\t\t\t\t// include continuation in nested blockquote\n\t\t\t\t\t\tconst oldToken = lastToken;\n\t\t\t\t\t\tconst newText = oldToken.raw + '\\n' + lines.join('\\n');\n\t\t\t\t\t\tconst newToken = this.blockquote(newText);\n\t\t\t\t\t\ttokens[tokens.length - 1] = newToken;\n\t\t\t\t\t\traw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n\t\t\t\t\t\ttext = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if (lastToken?.type === 'list') {\n\t\t\t\t\t\t// include continuation in nested list\n\t\t\t\t\t\tconst oldToken = lastToken;\n\t\t\t\t\t\tconst newText = oldToken.raw + '\\n' + lines.join('\\n');\n\t\t\t\t\t\tconst newToken = this.list(newText);\n\t\t\t\t\t\ttokens[tokens.length - 1] = newToken;\n\t\t\t\t\t\traw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n\t\t\t\t\t\ttext = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n\t\t\t\t\t\tlines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'blockquote',\n\t\t\t\t\traw,\n\t\t\t\t\ttokens,\n\t\t\t\t\ttext,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tlist(src) {\n\t\t\tlet cap = this.rules.block.list.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tlet bull = cap[1].trim();\n\t\t\t\tconst isordered = bull.length > 1;\n\t\t\t\tconst list = {\n\t\t\t\t\ttype: 'list',\n\t\t\t\t\traw: '',\n\t\t\t\t\tordered: isordered,\n\t\t\t\t\tstart: isordered ? +bull.slice(0, -1) : '',\n\t\t\t\t\tloose: false,\n\t\t\t\t\titems: [],\n\t\t\t\t};\n\t\t\t\tbull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\tbull = isordered ? bull : '[*+-]';\n\t\t\t\t}\n\t\t\t\t// Get next list item\n\t\t\t\tconst itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\t\t\t\tlet endsWithBlankLine = false;\n\t\t\t\t// Check if current bullet point can start a new List Item\n\t\t\t\twhile (src) {\n\t\t\t\t\tlet endEarly = false;\n\t\t\t\t\tlet raw = '';\n\t\t\t\t\tlet itemContents = '';\n\t\t\t\t\tif (!(cap = itemRegex.exec(src))) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\traw = cap[0];\n\t\t\t\t\tsrc = src.substring(raw.length);\n\t\t\t\t\tlet line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n\t\t\t\t\tlet nextLine = src.split('\\n', 1)[0];\n\t\t\t\t\tlet blankLine = !line.trim();\n\t\t\t\t\tlet indent = 0;\n\t\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t\tindent = 2;\n\t\t\t\t\t\titemContents = line.trimStart();\n\t\t\t\t\t}\n\t\t\t\t\telse if (blankLine) {\n\t\t\t\t\t\tindent = cap[1].length + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tindent = cap[2].search(/[^ ]/); // Find first non-space char\n\t\t\t\t\t\tindent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n\t\t\t\t\t\titemContents = line.slice(indent);\n\t\t\t\t\t\tindent += cap[1].length;\n\t\t\t\t\t}\n\t\t\t\t\tif (blankLine && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n\t\t\t\t\t\traw += nextLine + '\\n';\n\t\t\t\t\t\tsrc = src.substring(nextLine.length + 1);\n\t\t\t\t\t\tendEarly = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!endEarly) {\n\t\t\t\t\t\tconst nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n\t\t\t\t\t\tconst hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n\t\t\t\t\t\tconst fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n\t\t\t\t\t\tconst headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\t\t\t\t\t\t// Check if following lines should be included in List Item\n\t\t\t\t\t\twhile (src) {\n\t\t\t\t\t\t\tconst rawLine = src.split('\\n', 1)[0];\n\t\t\t\t\t\t\tnextLine = rawLine;\n\t\t\t\t\t\t\t// Re-align to follow commonmark nesting rules\n\t\t\t\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t\t\t\tnextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// End list item if found code fences\n\t\t\t\t\t\t\tif (fencesBeginRegex.test(nextLine)) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// End list item if found start of new heading\n\t\t\t\t\t\t\tif (headingBeginRegex.test(nextLine)) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// End list item if found start of new bullet\n\t\t\t\t\t\t\tif (nextBulletRegex.test(nextLine)) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Horizontal rule found\n\t\t\t\t\t\t\tif (hrRegex.test(src)) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n\t\t\t\t\t\t\t\titemContents += '\\n' + nextLine.slice(indent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// not enough indentation\n\t\t\t\t\t\t\t\tif (blankLine) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// paragraph continuation unless last line was a different block level element\n\t\t\t\t\t\t\t\tif (line.search(/[^ ]/) >= 4) { // indented code block\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (fencesBeginRegex.test(line)) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (headingBeginRegex.test(line)) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (hrRegex.test(line)) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\titemContents += '\\n' + nextLine;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!blankLine && !nextLine.trim()) { // Check if current line is blank\n\t\t\t\t\t\t\t\tblankLine = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\traw += rawLine + '\\n';\n\t\t\t\t\t\t\tsrc = src.substring(rawLine.length + 1);\n\t\t\t\t\t\t\tline = nextLine.slice(indent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!list.loose) {\n\t\t\t\t\t\t// If the previous item ended with a blank line, the list is loose\n\t\t\t\t\t\tif (endsWithBlankLine) {\n\t\t\t\t\t\t\tlist.loose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (/\\n *\\n *$/.test(raw)) {\n\t\t\t\t\t\t\tendsWithBlankLine = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet istask = null;\n\t\t\t\t\tlet ischecked;\n\t\t\t\t\t// Check for task list items\n\t\t\t\t\tif (this.options.gfm) {\n\t\t\t\t\t\tistask = /^\\[[ xX]\\] /.exec(itemContents);\n\t\t\t\t\t\tif (istask) {\n\t\t\t\t\t\t\tischecked = istask[0] !== '[ ] ';\n\t\t\t\t\t\t\titemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlist.items.push({\n\t\t\t\t\t\ttype: 'list_item',\n\t\t\t\t\t\traw,\n\t\t\t\t\t\ttask: !!istask,\n\t\t\t\t\t\tchecked: ischecked,\n\t\t\t\t\t\tloose: false,\n\t\t\t\t\t\ttext: itemContents,\n\t\t\t\t\t\ttokens: [],\n\t\t\t\t\t});\n\t\t\t\t\tlist.raw += raw;\n\t\t\t\t}\n\t\t\t\t// Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\t\t\t\tlist.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n\t\t\t\tlist.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n\t\t\t\tlist.raw = list.raw.trimEnd();\n\t\t\t\t// Item child tokens handled here at end because we needed to have the final item to trim it first\n\t\t\t\tfor (let i = 0; i < list.items.length; i++) {\n\t\t\t\t\tthis.lexer.state.top = false;\n\t\t\t\t\tlist.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\t\t\t\t\tif (!list.loose) {\n\t\t\t\t\t\t// Check if list should be loose\n\t\t\t\t\t\tconst spacers = list.items[i].tokens.filter(t => t.type === 'space');\n\t\t\t\t\t\tconst hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\t\t\t\t\t\tlist.loose = hasMultipleLineBreaks;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Set all items to loose if list is loose\n\t\t\t\tif (list.loose) {\n\t\t\t\t\tfor (let i = 0; i < list.items.length; i++) {\n\t\t\t\t\t\tlist.items[i].loose = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t}\n\t\t}\n\t\thtml(src) {\n\t\t\tconst cap = this.rules.block.html.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tconst token = {\n\t\t\t\t\ttype: 'html',\n\t\t\t\t\tblock: true,\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\tpre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n\t\t\t\t\ttext: cap[0],\n\t\t\t\t};\n\t\t\t\treturn token;\n\t\t\t}\n\t\t}\n\t\tdef(src) {\n\t\t\tconst cap = this.rules.block.def.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tconst tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n\t\t\t\tconst href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n\t\t\t\tconst title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'def',\n\t\t\t\t\ttag,\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\thref,\n\t\t\t\t\ttitle,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\ttable(src) {\n\t\t\tconst cap = this.rules.block.table.exec(src);\n\t\t\tif (!cap) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!/[:|]/.test(cap[2])) {\n\t\t\t\t// delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst headers = splitCells(cap[1]);\n\t\t\tconst aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n\t\t\tconst rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n\t\t\tconst item = {\n\t\t\t\ttype: 'table',\n\t\t\t\traw: cap[0],\n\t\t\t\theader: [],\n\t\t\t\talign: [],\n\t\t\t\trows: [],\n\t\t\t};\n\t\t\tif (headers.length !== aligns.length) {\n\t\t\t\t// header and align columns must be equal, rows can be different.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const align of aligns) {\n\t\t\t\tif (/^ *-+: *$/.test(align)) {\n\t\t\t\t\titem.align.push('right');\n\t\t\t\t}\n\t\t\t\telse if (/^ *:-+: *$/.test(align)) {\n\t\t\t\t\titem.align.push('center');\n\t\t\t\t}\n\t\t\t\telse if (/^ *:-+ *$/.test(align)) {\n\t\t\t\t\titem.align.push('left');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\titem.align.push(null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let i = 0; i < headers.length; i++) {\n\t\t\t\titem.header.push({\n\t\t\t\t\ttext: headers[i],\n\t\t\t\t\ttokens: this.lexer.inline(headers[i]),\n\t\t\t\t\theader: true,\n\t\t\t\t\talign: item.align[i],\n\t\t\t\t});\n\t\t\t}\n\t\t\tfor (const row of rows) {\n\t\t\t\titem.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: cell,\n\t\t\t\t\t\ttokens: this.lexer.inline(cell),\n\t\t\t\t\t\theader: false,\n\t\t\t\t\t\talign: item.align[i],\n\t\t\t\t\t};\n\t\t\t\t}));\n\t\t\t}\n\t\t\treturn item;\n\t\t}\n\t\tlheading(src) {\n\t\t\tconst cap = this.rules.block.lheading.exec(src);\n\t\t\tif (cap) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'heading',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\tdepth: cap[2].charAt(0) === '=' ? 1 : 2,\n\t\t\t\t\ttext: cap[1],\n\t\t\t\t\ttokens: this.lexer.inline(cap[1]),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tparagraph(src) {\n\t\t\tconst cap = this.rules.block.paragraph.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tconst text = cap[1].charAt(cap[1].length - 1) === '\\n'\n\t\t\t\t\t? cap[1].slice(0, -1)\n\t\t\t\t\t: cap[1];\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'paragraph',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\ttext,\n\t\t\t\t\ttokens: this.lexer.inline(text),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\ttext(src) {\n\t\t\tconst cap = this.rules.block.text.exec(src);\n\t\t\tif (cap) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\ttext: cap[0],\n\t\t\t\t\ttokens: this.lexer.inline(cap[0]),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tescape(src) {\n\t\t\tconst cap = this.rules.inline.escape.exec(src);\n\t\t\tif (cap) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'escape',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\ttext: escape$1(cap[1]),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\ttag(src) {\n\t\t\tconst cap = this.rules.inline.tag.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tif (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n\t\t\t\t\tthis.lexer.state.inLink = true;\n\t\t\t\t}\n\t\t\t\telse if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n\t\t\t\t\tthis.lexer.state.inLink = false;\n\t\t\t\t}\n\t\t\t\tif (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n\t\t\t\t\tthis.lexer.state.inRawBlock = true;\n\t\t\t\t}\n\t\t\t\telse if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n\t\t\t\t\tthis.lexer.state.inRawBlock = false;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'html',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\tinLink: this.lexer.state.inLink,\n\t\t\t\t\tinRawBlock: this.lexer.state.inRawBlock,\n\t\t\t\t\tblock: false,\n\t\t\t\t\ttext: cap[0],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tlink(src) {\n\t\t\tconst cap = this.rules.inline.link.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tconst trimmedUrl = cap[2].trim();\n\t\t\t\tif (!this.options.pedantic && /^</.test(trimmedUrl)) {\n\t\t\t\t\t// commonmark requires matching angle brackets\n\t\t\t\t\tif (!(/>$/.test(trimmedUrl))) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// ending angle bracket cannot be escaped\n\t\t\t\t\tconst rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n\t\t\t\t\tif ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// find closing parenthesis\n\t\t\t\t\tconst lastParenIndex = findClosingBracket(cap[2], '()');\n\t\t\t\t\tif (lastParenIndex > -1) {\n\t\t\t\t\t\tconst start = cap[0].indexOf('!') === 0 ? 5 : 4;\n\t\t\t\t\t\tconst linkLen = start + cap[1].length + lastParenIndex;\n\t\t\t\t\t\tcap[2] = cap[2].substring(0, lastParenIndex);\n\t\t\t\t\t\tcap[0] = cap[0].substring(0, linkLen).trim();\n\t\t\t\t\t\tcap[3] = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet href = cap[2];\n\t\t\t\tlet title = '';\n\t\t\t\tif (this.options.pedantic) {\n\t\t\t\t\t// split pedantic href and title\n\t\t\t\t\tconst link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\t\t\t\t\tif (link) {\n\t\t\t\t\t\thref = link[1];\n\t\t\t\t\t\ttitle = link[3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttitle = cap[3] ? cap[3].slice(1, -1) : '';\n\t\t\t\t}\n\t\t\t\thref = href.trim();\n\t\t\t\tif (/^</.test(href)) {\n\t\t\t\t\tif (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n\t\t\t\t\t\t// pedantic allows starting angle bracket without ending angle bracket\n\t\t\t\t\t\thref = href.slice(1);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thref = href.slice(1, -1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn outputLink(cap, {\n\t\t\t\t\thref: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n\t\t\t\t\ttitle: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n\t\t\t\t}, cap[0], this.lexer);\n\t\t\t}\n\t\t}\n\t\treflink(src, links) {\n\t\t\tlet cap;\n\t\t\tif ((cap = this.rules.inline.reflink.exec(src))\n\t\t\t\t|| (cap = this.rules.inline.nolink.exec(src))) {\n\t\t\t\tconst linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n\t\t\t\tconst link = links[linkString.toLowerCase()];\n\t\t\t\tif (!link) {\n\t\t\t\t\tconst text = cap[0].charAt(0);\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\traw: text,\n\t\t\t\t\t\ttext,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn outputLink(cap, link, cap[0], this.lexer);\n\t\t\t}\n\t\t}\n\t\temStrong(src, maskedSrc, prevChar = '') {\n\t\t\tlet match = this.rules.inline.emStrongLDelim.exec(src);\n\t\t\tif (!match)\n\t\t\t\treturn;\n\t\t\t// _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\t\t\tif (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n\t\t\t\treturn;\n\t\t\tconst nextChar = match[1] || match[2] || '';\n\t\t\tif (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n\t\t\t\t// unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n\t\t\t\tconst lLength = [...match[0]].length - 1;\n\t\t\t\tlet rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\t\t\t\tconst endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n\t\t\t\tendReg.lastIndex = 0;\n\t\t\t\t// Clip maskedSrc to same section of string as src (move to lexer?)\n\t\t\t\tmaskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\t\t\t\twhile ((match = endReg.exec(maskedSrc)) != null) {\n\t\t\t\t\trDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\t\t\t\t\tif (!rDelim)\n\t\t\t\t\t\tcontinue; // skip single * in __abc*abc__\n\t\t\t\t\trLength = [...rDelim].length;\n\t\t\t\t\tif (match[3] || match[4]) { // found another Left Delim\n\t\t\t\t\t\tdelimTotal += rLength;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse if (match[5] || match[6]) { // either Left or Right Delim\n\t\t\t\t\t\tif (lLength % 3 && !((lLength + rLength) % 3)) {\n\t\t\t\t\t\t\tmidDelimTotal += rLength;\n\t\t\t\t\t\t\tcontinue; // CommonMark Emphasis Rules 9-10\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdelimTotal -= rLength;\n\t\t\t\t\tif (delimTotal > 0)\n\t\t\t\t\t\tcontinue; // Haven't found enough closing delimiters\n\t\t\t\t\t// Remove extra characters. *a*** -> *a*\n\t\t\t\t\trLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\t\t\t\t\t// char length can be >1 for unicode characters;\n\t\t\t\t\tconst lastCharLength = [...match[0]][0].length;\n\t\t\t\t\tconst raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\t\t\t\t\t// Create `em` if smallest delimiter has odd char count. *a***\n\t\t\t\t\tif (Math.min(lLength, rLength) % 2) {\n\t\t\t\t\t\tconst text = raw.slice(1, -1);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: 'em',\n\t\t\t\t\t\t\traw,\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\ttokens: this.lexer.inlineTokens(text),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t// Create 'strong' if smallest delimiter has even char count. **a***\n\t\t\t\t\tconst text = raw.slice(2, -2);\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'strong',\n\t\t\t\t\t\traw,\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\ttokens: this.lexer.inlineTokens(text),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcodespan(src) {\n\t\t\tconst cap = this.rules.inline.code.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tlet text = cap[2].replace(/\\n/g, ' ');\n\t\t\t\tconst hasNonSpaceChars = /[^ ]/.test(text);\n\t\t\t\tconst hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n\t\t\t\tif (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n\t\t\t\t\ttext = text.substring(1, text.length - 1);\n\t\t\t\t}\n\t\t\t\ttext = escape$1(text, true);\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'codespan',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\ttext,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tbr(src) {\n\t\t\tconst cap = this.rules.inline.br.exec(src);\n\t\t\tif (cap) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'br',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tdel(src) {\n\t\t\tconst cap = this.rules.inline.del.exec(src);\n\t\t\tif (cap) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'del',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\ttext: cap[2],\n\t\t\t\t\ttokens: this.lexer.inlineTokens(cap[2]),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tautolink(src) {\n\t\t\tconst cap = this.rules.inline.autolink.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tlet text, href;\n\t\t\t\tif (cap[2] === '@') {\n\t\t\t\t\ttext = escape$1(cap[1]);\n\t\t\t\t\thref = 'mailto:' + text;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext = escape$1(cap[1]);\n\t\t\t\t\thref = text;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'link',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\ttext,\n\t\t\t\t\thref,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\traw: text,\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\turl(src) {\n\t\t\tlet cap;\n\t\t\tif (cap = this.rules.inline.url.exec(src)) {\n\t\t\t\tlet text, href;\n\t\t\t\tif (cap[2] === '@') {\n\t\t\t\t\ttext = escape$1(cap[0]);\n\t\t\t\t\thref = 'mailto:' + text;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// do extended autolink path validation\n\t\t\t\t\tlet prevCapZero;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tprevCapZero = cap[0];\n\t\t\t\t\t\tcap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n\t\t\t\t\t} while (prevCapZero !== cap[0]);\n\t\t\t\t\ttext = escape$1(cap[0]);\n\t\t\t\t\tif (cap[1] === 'www.') {\n\t\t\t\t\t\thref = 'http://' + cap[0];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thref = cap[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'link',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\ttext,\n\t\t\t\t\thref,\n\t\t\t\t\ttokens: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\traw: text,\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tinlineText(src) {\n\t\t\tconst cap = this.rules.inline.text.exec(src);\n\t\t\tif (cap) {\n\t\t\t\tlet text;\n\t\t\t\tif (this.lexer.state.inRawBlock) {\n\t\t\t\t\ttext = cap[0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext = escape$1(cap[0]);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\traw: cap[0],\n\t\t\t\t\ttext,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Block-Level Grammar\n\t */\n\tconst newline = /^(?: *(?:\\n|$))+/;\n\tconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\n\tconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\n\tconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\n\tconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\n\tconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n\tconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n\t\t.replace(/bull/g, bullet) // lists can interrupt\n\t\t.replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n\t\t.replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n\t\t.replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n\t\t.replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n\t\t.replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n\t\t.getRegex();\n\tconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\n\tconst blockText = /^[^\\n]+/;\n\tconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\n\tconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n\t\t.replace('label', _blockLabel)\n\t\t.replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n\t\t.getRegex();\n\tconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n\t\t.replace(/bull/g, bullet)\n\t\t.getRegex();\n\tconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n\t\t+ '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n\t\t+ '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n\t\t+ '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n\t\t+ '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n\t\t+ '|tr|track|ul';\n\tconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\n\tconst html = edit('^ {0,3}(?:' // optional indentation\n\t\t+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n\t\t+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n\t\t+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n\t\t+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n\t\t+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n\t\t+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n\t\t+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n\t\t+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n\t\t+ ')', 'i')\n\t\t.replace('comment', _comment)\n\t\t.replace('tag', _tag)\n\t\t.replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n\t\t.getRegex();\n\tconst paragraph = edit(_paragraph)\n\t\t.replace('hr', hr)\n\t\t.replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n\t\t.replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n\t\t.replace('|table', '')\n\t\t.replace('blockquote', ' {0,3}>')\n\t\t.replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n\t\t.replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n\t\t.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n\t\t.replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n\t\t.getRegex();\n\tconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n\t\t.replace('paragraph', paragraph)\n\t\t.getRegex();\n\t/**\n\t * Normal Block Grammar\n\t */\n\tconst blockNormal = {\n\t\tblockquote,\n\t\tcode: blockCode,\n\t\tdef,\n\t\tfences,\n\t\theading,\n\t\thr,\n\t\thtml,\n\t\tlheading,\n\t\tlist,\n\t\tnewline,\n\t\tparagraph,\n\t\ttable: noopTest,\n\t\ttext: blockText,\n\t};\n\t/**\n\t * GFM Block Grammar\n\t */\n\tconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n\t\t+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n\t\t+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n\t\t.replace('hr', hr)\n\t\t.replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n\t\t.replace('blockquote', ' {0,3}>')\n\t\t.replace('code', ' {4}[^\\\\n]')\n\t\t.replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n\t\t.replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n\t\t.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n\t\t.replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n\t\t.getRegex();\n\tconst blockGfm = {\n\t\t...blockNormal,\n\t\ttable: gfmTable,\n\t\tparagraph: edit(_paragraph)\n\t\t\t.replace('hr', hr)\n\t\t\t.replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n\t\t\t.replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n\t\t\t.replace('table', gfmTable) // interrupt paragraphs with table\n\t\t\t.replace('blockquote', ' {0,3}>')\n\t\t\t.replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n\t\t\t.replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n\t\t\t.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n\t\t\t.replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n\t\t\t.getRegex(),\n\t};\n\t/**\n\t * Pedantic grammar (original John Gruber's loose markdown specification)\n\t */\n\tconst blockPedantic = {\n\t\t...blockNormal,\n\t\thtml: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n\t\t\t+ '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n\t\t\t+ '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n\t\t\t.replace('comment', _comment)\n\t\t\t.replace(/tag/g, '(?!(?:'\n\t\t\t\t+ 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n\t\t\t\t+ '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n\t\t\t\t+ '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n\t\t\t.getRegex(),\n\t\tdef: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n\t\theading: /^(#{1,6})(.*)(?:\\n+|$)/,\n\t\tfences: noopTest, // fences not supported\n\t\tlheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n\t\tparagraph: edit(_paragraph)\n\t\t\t.replace('hr', hr)\n\t\t\t.replace('heading', ' *#{1,6} *[^\\n]')\n\t\t\t.replace('lheading', lheading)\n\t\t\t.replace('|table', '')\n\t\t\t.replace('blockquote', ' {0,3}>')\n\t\t\t.replace('|fences', '')\n\t\t\t.replace('|list', '')\n\t\t\t.replace('|html', '')\n\t\t\t.replace('|tag', '')\n\t\t\t.getRegex(),\n\t};\n\t/**\n\t * Inline-Level Grammar\n\t */\n\tconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\n\tconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\n\tconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\n\tconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\t// list of unicode punctuation marks, plus any missing characters from CommonMark spec\n\tconst _punctuation = '\\\\p{P}\\\\p{S}';\n\tconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n\t\t.replace(/punctuation/g, _punctuation).getRegex();\n\t// sequences em should skip over [title](link), `code`, <html>\n\tconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\n\tconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n\t\t.replace(/punct/g, _punctuation)\n\t\t.getRegex();\n\tconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n\t\t+ '|[^*]+(?=[^*])' // Consume to delim\n\t\t+ '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n\t\t+ '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n\t\t+ '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n\t\t+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n\t\t+ '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n\t\t+ '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n\t\t.replace(/punct/g, _punctuation)\n\t\t.getRegex();\n\t// (6) Not allowed for _\n\tconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n\t\t+ '|[^_]+(?=[^_])' // Consume to delim\n\t\t+ '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n\t\t+ '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n\t\t+ '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n\t\t+ '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n\t\t+ '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n\t\t.replace(/punct/g, _punctuation)\n\t\t.getRegex();\n\tconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n\t\t.replace(/punct/g, _punctuation)\n\t\t.getRegex();\n\tconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n\t\t.replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n\t\t.replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n\t\t.getRegex();\n\tconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\n\tconst tag = edit('^comment'\n\t\t+ '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n\t\t+ '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n\t\t+ '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n\t\t+ '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n\t\t+ '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n\t\t.replace('comment', _inlineComment)\n\t\t.replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n\t\t.getRegex();\n\tconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\tconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n\t\t.replace('label', _inlineLabel)\n\t\t.replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n\t\t.replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n\t\t.getRegex();\n\tconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n\t\t.replace('label', _inlineLabel)\n\t\t.replace('ref', _blockLabel)\n\t\t.getRegex();\n\tconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n\t\t.replace('ref', _blockLabel)\n\t\t.getRegex();\n\tconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n\t\t.replace('reflink', reflink)\n\t\t.replace('nolink', nolink)\n\t\t.getRegex();\n\t/**\n\t * Normal Inline Grammar\n\t */\n\tconst inlineNormal = {\n\t\t_backpedal: noopTest, // only used for GFM url\n\t\tanyPunctuation,\n\t\tautolink,\n\t\tblockSkip,\n\t\tbr,\n\t\tcode: inlineCode,\n\t\tdel: noopTest,\n\t\temStrongLDelim,\n\t\temStrongRDelimAst,\n\t\temStrongRDelimUnd,\n\t\tescape,\n\t\tlink,\n\t\tnolink,\n\t\tpunctuation,\n\t\treflink,\n\t\treflinkSearch,\n\t\ttag,\n\t\ttext: inlineText,\n\t\turl: noopTest,\n\t};\n\t/**\n\t * Pedantic Inline Grammar\n\t */\n\tconst inlinePedantic = {\n\t\t...inlineNormal,\n\t\tlink: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n\t\t\t.replace('label', _inlineLabel)\n\t\t\t.getRegex(),\n\t\treflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n\t\t\t.replace('label', _inlineLabel)\n\t\t\t.getRegex(),\n\t};\n\t/**\n\t * GFM Inline Grammar\n\t */\n\tconst inlineGfm = {\n\t\t...inlineNormal,\n\t\tescape: edit(escape).replace('])', '~|])').getRegex(),\n\t\turl: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n\t\t\t.replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n\t\t\t.getRegex(),\n\t\t_backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n\t\tdel: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n\t\ttext: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n\t};\n\t/**\n\t * GFM + Line Breaks Inline Grammar\n\t */\n\tconst inlineBreaks = {\n\t\t...inlineGfm,\n\t\tbr: edit(br).replace('{2,}', '*').getRegex(),\n\t\ttext: edit(inlineGfm.text)\n\t\t\t.replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n\t\t\t.replace(/\\{2,\\}/g, '*')\n\t\t\t.getRegex(),\n\t};\n\t/**\n\t * exports\n\t */\n\tconst block = {\n\t\tnormal: blockNormal,\n\t\tgfm: blockGfm,\n\t\tpedantic: blockPedantic,\n\t};\n\tconst inline = {\n\t\tnormal: inlineNormal,\n\t\tgfm: inlineGfm,\n\t\tbreaks: inlineBreaks,\n\t\tpedantic: inlinePedantic,\n\t};\n\n\t/**\n\t * Block Lexer\n\t */\n\tclass _Lexer {\n\t\ttokens;\n\t\toptions;\n\t\tstate;\n\t\ttokenizer;\n\t\tinlineQueue;\n\t\tconstructor(options) {\n\t\t\t// TokenList cannot be created in one go\n\t\t\tthis.tokens = [];\n\t\t\tthis.tokens.links = Object.create(null);\n\t\t\tthis.options = options || exports.defaults;\n\t\t\tthis.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n\t\t\tthis.tokenizer = this.options.tokenizer;\n\t\t\tthis.tokenizer.options = this.options;\n\t\t\tthis.tokenizer.lexer = this;\n\t\t\tthis.inlineQueue = [];\n\t\t\tthis.state = {\n\t\t\t\tinLink: false,\n\t\t\t\tinRawBlock: false,\n\t\t\t\ttop: true,\n\t\t\t};\n\t\t\tconst rules = {\n\t\t\t\tblock: block.normal,\n\t\t\t\tinline: inline.normal,\n\t\t\t};\n\t\t\tif (this.options.pedantic) {\n\t\t\t\trules.block = block.pedantic;\n\t\t\t\trules.inline = inline.pedantic;\n\t\t\t}\n\t\t\telse if (this.options.gfm) {\n\t\t\t\trules.block = block.gfm;\n\t\t\t\tif (this.options.breaks) {\n\t\t\t\t\trules.inline = inline.breaks;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trules.inline = inline.gfm;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tokenizer.rules = rules;\n\t\t}\n\t\t/**\n\t\t * Expose Rules\n\t\t */\n\t\tstatic get rules() {\n\t\t\treturn {\n\t\t\t\tblock,\n\t\t\t\tinline,\n\t\t\t};\n\t\t}\n\t\t/**\n\t\t * Static Lex Method\n\t\t */\n\t\tstatic lex(src, options) {\n\t\t\tconst lexer = new _Lexer(options);\n\t\t\treturn lexer.lex(src);\n\t\t}\n\t\t/**\n\t\t * Static Lex Inline Method\n\t\t */\n\t\tstatic lexInline(src, options) {\n\t\t\tconst lexer = new _Lexer(options);\n\t\t\treturn lexer.inlineTokens(src);\n\t\t}\n\t\t/**\n\t\t * Preprocessing\n\t\t */\n\t\tlex(src) {\n\t\t\tsrc = src\n\t\t\t\t.replace(/\\r\\n|\\r/g, '\\n');\n\t\t\tthis.blockTokens(src, this.tokens);\n\t\t\tfor (let i = 0; i < this.inlineQueue.length; i++) {\n\t\t\t\tconst next = this.inlineQueue[i];\n\t\t\t\tthis.inlineTokens(next.src, next.tokens);\n\t\t\t}\n\t\t\tthis.inlineQueue = [];\n\t\t\treturn this.tokens;\n\t\t}\n\t\tblockTokens(src, tokens = [], lastParagraphClipped = false) {\n\t\t\tif (this.options.pedantic) {\n\t\t\t\tsrc = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsrc = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n\t\t\t\t\treturn leading + '    '.repeat(tabs.length);\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet token;\n\t\t\tlet lastToken;\n\t\t\tlet cutSrc;\n\t\t\twhile (src) {\n\t\t\t\tif (this.options.extensions\n\t\t\t\t\t&& this.options.extensions.block\n\t\t\t\t\t&& this.options.extensions.block.some((extTokenizer) => {\n\t\t\t\t\t\tif (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n\t\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t})) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// newline\n\t\t\t\tif (token = this.tokenizer.space(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\tif (token.raw.length === 1 && tokens.length > 0) {\n\t\t\t\t\t\t// if there's a single \\n as a spacer, it's terminating the last line,\n\t\t\t\t\t\t// so move it there so that we don't get unnecessary paragraph tags\n\t\t\t\t\t\ttokens[tokens.length - 1].raw += '\\n';\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// code\n\t\t\t\tif (token = this.tokenizer.code(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\t// An indented code block cannot interrupt a paragraph.\n\t\t\t\t\tif (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n\t\t\t\t\t\tlastToken.raw += '\\n' + token.raw;\n\t\t\t\t\t\tlastToken.text += '\\n' + token.text;\n\t\t\t\t\t\tthis.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// fences\n\t\t\t\tif (token = this.tokenizer.fences(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// heading\n\t\t\t\tif (token = this.tokenizer.heading(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// hr\n\t\t\t\tif (token = this.tokenizer.hr(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// blockquote\n\t\t\t\tif (token = this.tokenizer.blockquote(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// list\n\t\t\t\tif (token = this.tokenizer.list(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// html\n\t\t\t\tif (token = this.tokenizer.html(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// def\n\t\t\t\tif (token = this.tokenizer.def(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\tif (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n\t\t\t\t\t\tlastToken.raw += '\\n' + token.raw;\n\t\t\t\t\t\tlastToken.text += '\\n' + token.raw;\n\t\t\t\t\t\tthis.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.tokens.links[token.tag]) {\n\t\t\t\t\t\tthis.tokens.links[token.tag] = {\n\t\t\t\t\t\t\thref: token.href,\n\t\t\t\t\t\t\ttitle: token.title,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// table (gfm)\n\t\t\t\tif (token = this.tokenizer.table(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// lheading\n\t\t\t\tif (token = this.tokenizer.lheading(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// top-level paragraph\n\t\t\t\t// prevent paragraph consuming extensions by clipping 'src' to extension start\n\t\t\t\tcutSrc = src;\n\t\t\t\tif (this.options.extensions && this.options.extensions.startBlock) {\n\t\t\t\t\tlet startIndex = Infinity;\n\t\t\t\t\tconst tempSrc = src.slice(1);\n\t\t\t\t\tlet tempStart;\n\t\t\t\t\tthis.options.extensions.startBlock.forEach((getStartIndex) => {\n\t\t\t\t\t\ttempStart = getStartIndex.call({ lexer: this }, tempSrc);\n\t\t\t\t\t\tif (typeof tempStart === 'number' && tempStart >= 0) {\n\t\t\t\t\t\t\tstartIndex = Math.min(startIndex, tempStart);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (startIndex < Infinity && startIndex >= 0) {\n\t\t\t\t\t\tcutSrc = src.substring(0, startIndex + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\tif (lastParagraphClipped && lastToken?.type === 'paragraph') {\n\t\t\t\t\t\tlastToken.raw += '\\n' + token.raw;\n\t\t\t\t\t\tlastToken.text += '\\n' + token.text;\n\t\t\t\t\t\tthis.inlineQueue.pop();\n\t\t\t\t\t\tthis.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t}\n\t\t\t\t\tlastParagraphClipped = (cutSrc.length !== src.length);\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// text\n\t\t\t\tif (token = this.tokenizer.text(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\tif (lastToken && lastToken.type === 'text') {\n\t\t\t\t\t\tlastToken.raw += '\\n' + token.raw;\n\t\t\t\t\t\tlastToken.text += '\\n' + token.text;\n\t\t\t\t\t\tthis.inlineQueue.pop();\n\t\t\t\t\t\tthis.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (src) {\n\t\t\t\t\tconst errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\t\t\t\t\tif (this.options.silent) {\n\t\t\t\t\t\tconsole.error(errMsg);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow new Error(errMsg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.state.top = true;\n\t\t\treturn tokens;\n\t\t}\n\t\tinline(src, tokens = []) {\n\t\t\tthis.inlineQueue.push({ src, tokens });\n\t\t\treturn tokens;\n\t\t}\n\t\t/**\n\t\t * Lexing/Compiling\n\t\t */\n\t\tinlineTokens(src, tokens = []) {\n\t\t\tlet token, lastToken, cutSrc;\n\t\t\t// String with links masked to avoid interference with em and strong\n\t\t\tlet maskedSrc = src;\n\t\t\tlet match;\n\t\t\tlet keepPrevChar, prevChar;\n\t\t\t// Mask out reflinks\n\t\t\tif (this.tokens.links) {\n\t\t\t\tconst links = Object.keys(this.tokens.links);\n\t\t\t\tif (links.length > 0) {\n\t\t\t\t\twhile ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n\t\t\t\t\t\tif (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n\t\t\t\t\t\t\tmaskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Mask out other blocks\n\t\t\twhile ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n\t\t\t\tmaskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n\t\t\t}\n\t\t\t// Mask out escaped characters\n\t\t\twhile ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n\t\t\t\tmaskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n\t\t\t}\n\t\t\twhile (src) {\n\t\t\t\tif (!keepPrevChar) {\n\t\t\t\t\tprevChar = '';\n\t\t\t\t}\n\t\t\t\tkeepPrevChar = false;\n\t\t\t\t// extensions\n\t\t\t\tif (this.options.extensions\n\t\t\t\t\t&& this.options.extensions.inline\n\t\t\t\t\t&& this.options.extensions.inline.some((extTokenizer) => {\n\t\t\t\t\t\tif (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n\t\t\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t})) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// escape\n\t\t\t\tif (token = this.tokenizer.escape(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// tag\n\t\t\t\tif (token = this.tokenizer.tag(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\tif (lastToken && token.type === 'text' && lastToken.type === 'text') {\n\t\t\t\t\t\tlastToken.raw += token.raw;\n\t\t\t\t\t\tlastToken.text += token.text;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// link\n\t\t\t\tif (token = this.tokenizer.link(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// reflink, nolink\n\t\t\t\tif (token = this.tokenizer.reflink(src, this.tokens.links)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\tif (lastToken && token.type === 'text' && lastToken.type === 'text') {\n\t\t\t\t\t\tlastToken.raw += token.raw;\n\t\t\t\t\t\tlastToken.text += token.text;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// em & strong\n\t\t\t\tif (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// code\n\t\t\t\tif (token = this.tokenizer.codespan(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// br\n\t\t\t\tif (token = this.tokenizer.br(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// del (gfm)\n\t\t\t\tif (token = this.tokenizer.del(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// autolink\n\t\t\t\tif (token = this.tokenizer.autolink(src)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// url (gfm)\n\t\t\t\tif (!this.state.inLink && (token = this.tokenizer.url(src))) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\ttokens.push(token);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// text\n\t\t\t\t// prevent inlineText consuming extensions by clipping 'src' to extension start\n\t\t\t\tcutSrc = src;\n\t\t\t\tif (this.options.extensions && this.options.extensions.startInline) {\n\t\t\t\t\tlet startIndex = Infinity;\n\t\t\t\t\tconst tempSrc = src.slice(1);\n\t\t\t\t\tlet tempStart;\n\t\t\t\t\tthis.options.extensions.startInline.forEach((getStartIndex) => {\n\t\t\t\t\t\ttempStart = getStartIndex.call({ lexer: this }, tempSrc);\n\t\t\t\t\t\tif (typeof tempStart === 'number' && tempStart >= 0) {\n\t\t\t\t\t\t\tstartIndex = Math.min(startIndex, tempStart);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (startIndex < Infinity && startIndex >= 0) {\n\t\t\t\t\t\tcutSrc = src.substring(0, startIndex + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (token = this.tokenizer.inlineText(cutSrc)) {\n\t\t\t\t\tsrc = src.substring(token.raw.length);\n\t\t\t\t\tif (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n\t\t\t\t\t\tprevChar = token.raw.slice(-1);\n\t\t\t\t\t}\n\t\t\t\t\tkeepPrevChar = true;\n\t\t\t\t\tlastToken = tokens[tokens.length - 1];\n\t\t\t\t\tif (lastToken && lastToken.type === 'text') {\n\t\t\t\t\t\tlastToken.raw += token.raw;\n\t\t\t\t\t\tlastToken.text += token.text;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttokens.push(token);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (src) {\n\t\t\t\t\tconst errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\t\t\t\t\tif (this.options.silent) {\n\t\t\t\t\t\tconsole.error(errMsg);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow new Error(errMsg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokens;\n\t\t}\n\t}\n\n\t/**\n\t * Renderer\n\t */\n\tclass _Renderer {\n\t\toptions;\n\t\tparser; // set by the parser\n\t\tconstructor(options) {\n\t\t\tthis.options = options || exports.defaults;\n\t\t}\n\t\tspace(token) {\n\t\t\treturn '';\n\t\t}\n\t\tcode({ text, lang, escaped }) {\n\t\t\tconst langString = (lang || '').match(/^\\S*/)?.[0];\n\t\t\tconst code = text.replace(/\\n$/, '') + '\\n';\n\t\t\tif (!langString) {\n\t\t\t\treturn '<pre><code>'\n\t\t\t\t\t+ (escaped ? code : escape$1(code, true))\n\t\t\t\t\t+ '</code></pre>\\n';\n\t\t\t}\n\t\t\treturn '<pre><code class=\"language-'\n\t\t\t\t+ escape$1(langString)\n\t\t\t\t+ '\">'\n\t\t\t\t+ (escaped ? code : escape$1(code, true))\n\t\t\t\t+ '</code></pre>\\n';\n\t\t}\n\t\tblockquote({ tokens }) {\n\t\t\tconst body = this.parser.parse(tokens);\n\t\t\treturn `<blockquote>\\n${body}</blockquote>\\n`;\n\t\t}\n\t\thtml({ text }) {\n\t\t\treturn text;\n\t\t}\n\t\theading({ tokens, depth }) {\n\t\t\treturn `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n\t\t}\n\t\thr(token) {\n\t\t\treturn '<hr>\\n';\n\t\t}\n\t\tlist(token) {\n\t\t\tconst ordered = token.ordered;\n\t\t\tconst start = token.start;\n\t\t\tlet body = '';\n\t\t\tfor (let j = 0; j < token.items.length; j++) {\n\t\t\t\tconst item = token.items[j];\n\t\t\t\tbody += this.listitem(item);\n\t\t\t}\n\t\t\tconst type = ordered ? 'ol' : 'ul';\n\t\t\tconst startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n\t\t\treturn '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n\t\t}\n\t\tlistitem(item) {\n\t\t\tlet itemBody = '';\n\t\t\tif (item.task) {\n\t\t\t\tconst checkbox = this.checkbox({ checked: !!item.checked });\n\t\t\t\tif (item.loose) {\n\t\t\t\t\tif (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n\t\t\t\t\t\titem.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n\t\t\t\t\t\tif (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n\t\t\t\t\t\t\titem.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\titem.tokens.unshift({\n\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\traw: checkbox + ' ',\n\t\t\t\t\t\t\ttext: checkbox + ' ',\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\titemBody += checkbox + ' ';\n\t\t\t\t}\n\t\t\t}\n\t\t\titemBody += this.parser.parse(item.tokens, !!item.loose);\n\t\t\treturn `<li>${itemBody}</li>\\n`;\n\t\t}\n\t\tcheckbox({ checked }) {\n\t\t\treturn '<input '\n\t\t\t\t+ (checked ? 'checked=\"\" ' : '')\n\t\t\t\t+ 'disabled=\"\" type=\"checkbox\">';\n\t\t}\n\t\tparagraph({ tokens }) {\n\t\t\treturn `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n\t\t}\n\t\ttable(token) {\n\t\t\tlet header = '';\n\t\t\t// header\n\t\t\tlet cell = '';\n\t\t\tfor (let j = 0; j < token.header.length; j++) {\n\t\t\t\tcell += this.tablecell(token.header[j]);\n\t\t\t}\n\t\t\theader += this.tablerow({ text: cell });\n\t\t\tlet body = '';\n\t\t\tfor (let j = 0; j < token.rows.length; j++) {\n\t\t\t\tconst row = token.rows[j];\n\t\t\t\tcell = '';\n\t\t\t\tfor (let k = 0; k < row.length; k++) {\n\t\t\t\t\tcell += this.tablecell(row[k]);\n\t\t\t\t}\n\t\t\t\tbody += this.tablerow({ text: cell });\n\t\t\t}\n\t\t\tif (body)\n\t\t\t\tbody = `<tbody>${body}</tbody>`;\n\t\t\treturn '<table>\\n'\n\t\t\t\t+ '<thead>\\n'\n\t\t\t\t+ header\n\t\t\t\t+ '</thead>\\n'\n\t\t\t\t+ body\n\t\t\t\t+ '</table>\\n';\n\t\t}\n\t\ttablerow({ text }) {\n\t\t\treturn `<tr>\\n${text}</tr>\\n`;\n\t\t}\n\t\ttablecell(token) {\n\t\t\tconst content = this.parser.parseInline(token.tokens);\n\t\t\tconst type = token.header ? 'th' : 'td';\n\t\t\tconst tag = token.align\n\t\t\t\t? `<${type} align=\"${token.align}\">`\n\t\t\t\t: `<${type}>`;\n\t\t\treturn tag + content + `</${type}>\\n`;\n\t\t}\n\t\t/**\n\t\t * span level renderer\n\t\t */\n\t\tstrong({ tokens }) {\n\t\t\treturn `<strong>${this.parser.parseInline(tokens)}</strong>`;\n\t\t}\n\t\tem({ tokens }) {\n\t\t\treturn `<em>${this.parser.parseInline(tokens)}</em>`;\n\t\t}\n\t\tcodespan({ text }) {\n\t\t\treturn `<code>${text}</code>`;\n\t\t}\n\t\tbr(token) {\n\t\t\treturn '<br>';\n\t\t}\n\t\tdel({ tokens }) {\n\t\t\treturn `<del>${this.parser.parseInline(tokens)}</del>`;\n\t\t}\n\t\tlink({ href, title, tokens }) {\n\t\t\tconst text = this.parser.parseInline(tokens);\n\t\t\tconst cleanHref = cleanUrl(href);\n\t\t\tif (cleanHref === null) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\thref = cleanHref;\n\t\t\tlet out = '<a href=\"' + href + '\"';\n\t\t\tif (title) {\n\t\t\t\tout += ' title=\"' + title + '\"';\n\t\t\t}\n\t\t\tout += '>' + text + '</a>';\n\t\t\treturn out;\n\t\t}\n\t\timage({ href, title, text }) {\n\t\t\tconst cleanHref = cleanUrl(href);\n\t\t\tif (cleanHref === null) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\thref = cleanHref;\n\t\t\tlet out = `<img src=\"${href}\" alt=\"${text}\"`;\n\t\t\tif (title) {\n\t\t\t\tout += ` title=\"${title}\"`;\n\t\t\t}\n\t\t\tout += '>';\n\t\t\treturn out;\n\t\t}\n\t\ttext(token) {\n\t\t\treturn 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n\t\t}\n\t}\n\n\t/**\n\t * TextRenderer\n\t * returns only the textual part of the token\n\t */\n\tclass _TextRenderer {\n\t\t// no need for block level renderers\n\t\tstrong({ text }) {\n\t\t\treturn text;\n\t\t}\n\t\tem({ text }) {\n\t\t\treturn text;\n\t\t}\n\t\tcodespan({ text }) {\n\t\t\treturn text;\n\t\t}\n\t\tdel({ text }) {\n\t\t\treturn text;\n\t\t}\n\t\thtml({ text }) {\n\t\t\treturn text;\n\t\t}\n\t\ttext({ text }) {\n\t\t\treturn text;\n\t\t}\n\t\tlink({ text }) {\n\t\t\treturn '' + text;\n\t\t}\n\t\timage({ text }) {\n\t\t\treturn '' + text;\n\t\t}\n\t\tbr() {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Parsing & Compiling\n\t */\n\tclass _Parser {\n\t\toptions;\n\t\trenderer;\n\t\ttextRenderer;\n\t\tconstructor(options) {\n\t\t\tthis.options = options || exports.defaults;\n\t\t\tthis.options.renderer = this.options.renderer || new _Renderer();\n\t\t\tthis.renderer = this.options.renderer;\n\t\t\tthis.renderer.options = this.options;\n\t\t\tthis.renderer.parser = this;\n\t\t\tthis.textRenderer = new _TextRenderer();\n\t\t}\n\t\t/**\n\t\t * Static Parse Method\n\t\t */\n\t\tstatic parse(tokens, options) {\n\t\t\tconst parser = new _Parser(options);\n\t\t\treturn parser.parse(tokens);\n\t\t}\n\t\t/**\n\t\t * Static Parse Inline Method\n\t\t */\n\t\tstatic parseInline(tokens, options) {\n\t\t\tconst parser = new _Parser(options);\n\t\t\treturn parser.parseInline(tokens);\n\t\t}\n\t\t/**\n\t\t * Parse Loop\n\t\t */\n\t\tparse(tokens, top = true) {\n\t\t\tlet out = '';\n\t\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\t\tconst anyToken = tokens[i];\n\t\t\t\t// Run any renderer extensions\n\t\t\t\tif (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n\t\t\t\t\tconst genericToken = anyToken;\n\t\t\t\t\tconst ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n\t\t\t\t\tif (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n\t\t\t\t\t\tout += ret || '';\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst token = anyToken;\n\t\t\t\tswitch (token.type) {\n\t\t\t\t\tcase 'space': {\n\t\t\t\t\t\tout += this.renderer.space(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'hr': {\n\t\t\t\t\t\tout += this.renderer.hr(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'heading': {\n\t\t\t\t\t\tout += this.renderer.heading(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'code': {\n\t\t\t\t\t\tout += this.renderer.code(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'table': {\n\t\t\t\t\t\tout += this.renderer.table(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'blockquote': {\n\t\t\t\t\t\tout += this.renderer.blockquote(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'list': {\n\t\t\t\t\t\tout += this.renderer.list(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'html': {\n\t\t\t\t\t\tout += this.renderer.html(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'paragraph': {\n\t\t\t\t\t\tout += this.renderer.paragraph(token);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\tlet textToken = token;\n\t\t\t\t\t\tlet body = this.renderer.text(textToken);\n\t\t\t\t\t\twhile (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n\t\t\t\t\t\t\ttextToken = tokens[++i];\n\t\t\t\t\t\t\tbody += '\\n' + this.renderer.text(textToken);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (top) {\n\t\t\t\t\t\t\tout += this.renderer.paragraph({\n\t\t\t\t\t\t\t\ttype: 'paragraph',\n\t\t\t\t\t\t\t\traw: body,\n\t\t\t\t\t\t\t\ttext: body,\n\t\t\t\t\t\t\t\ttokens: [{ type: 'text', raw: body, text: body }],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tout += body;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tconst errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\t\t\t\t\t\tif (this.options.silent) {\n\t\t\t\t\t\t\tconsole.error(errMsg);\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthrow new Error(errMsg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t/**\n\t\t * Parse Inline Tokens\n\t\t */\n\t\tparseInline(tokens, renderer) {\n\t\t\trenderer = renderer || this.renderer;\n\t\t\tlet out = '';\n\t\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\t\tconst anyToken = tokens[i];\n\t\t\t\t// Run any renderer extensions\n\t\t\t\tif (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n\t\t\t\t\tconst ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n\t\t\t\t\tif (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n\t\t\t\t\t\tout += ret || '';\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst token = anyToken;\n\t\t\t\tswitch (token.type) {\n\t\t\t\t\tcase 'escape': {\n\t\t\t\t\t\tout += renderer.text(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'html': {\n\t\t\t\t\t\tout += renderer.html(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'link': {\n\t\t\t\t\t\tout += renderer.link(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'image': {\n\t\t\t\t\t\tout += renderer.image(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'strong': {\n\t\t\t\t\t\tout += renderer.strong(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'em': {\n\t\t\t\t\t\tout += renderer.em(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'codespan': {\n\t\t\t\t\t\tout += renderer.codespan(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'br': {\n\t\t\t\t\t\tout += renderer.br(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'del': {\n\t\t\t\t\t\tout += renderer.del(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\tout += renderer.text(token);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tconst errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\t\t\t\t\t\tif (this.options.silent) {\n\t\t\t\t\t\t\tconsole.error(errMsg);\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthrow new Error(errMsg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t}\n\n\tclass _Hooks {\n\t\toptions;\n\t\tconstructor(options) {\n\t\t\tthis.options = options || exports.defaults;\n\t\t}\n\t\tstatic passThroughHooks = new Set([\n\t\t\t'preprocess',\n\t\t\t'postprocess',\n\t\t\t'processAllTokens',\n\t\t]);\n\t\t/**\n\t\t * Process markdown before marked\n\t\t */\n\t\tpreprocess(markdown) {\n\t\t\treturn markdown;\n\t\t}\n\t\t/**\n\t\t * Process HTML after marked is finished\n\t\t */\n\t\tpostprocess(html) {\n\t\t\treturn html;\n\t\t}\n\t\t/**\n\t\t * Process all tokens before walk tokens\n\t\t */\n\t\tprocessAllTokens(tokens) {\n\t\t\treturn tokens;\n\t\t}\n\t}\n\n\tclass Marked {\n\t\tdefaults = _getDefaults();\n\t\toptions = this.setOptions;\n\t\tparse = this.parseMarkdown(_Lexer.lex, _Parser.parse);\n\t\tparseInline = this.parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n\t\tParser = _Parser;\n\t\tRenderer = _Renderer;\n\t\tTextRenderer = _TextRenderer;\n\t\tLexer = _Lexer;\n\t\tTokenizer = _Tokenizer;\n\t\tHooks = _Hooks;\n\t\tconstructor(...args) {\n\t\t\tthis.use(...args);\n\t\t}\n\t\t/**\n\t\t * Run callback for every token\n\t\t */\n\t\twalkTokens(tokens, callback) {\n\t\t\tlet values = [];\n\t\t\tfor (const token of tokens) {\n\t\t\t\tvalues = values.concat(callback.call(this, token));\n\t\t\t\tswitch (token.type) {\n\t\t\t\t\tcase 'table': {\n\t\t\t\t\t\tconst tableToken = token;\n\t\t\t\t\t\tfor (const cell of tableToken.header) {\n\t\t\t\t\t\t\tvalues = values.concat(this.walkTokens(cell.tokens, callback));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const row of tableToken.rows) {\n\t\t\t\t\t\t\tfor (const cell of row) {\n\t\t\t\t\t\t\t\tvalues = values.concat(this.walkTokens(cell.tokens, callback));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'list': {\n\t\t\t\t\t\tconst listToken = token;\n\t\t\t\t\t\tvalues = values.concat(this.walkTokens(listToken.items, callback));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tconst genericToken = token;\n\t\t\t\t\t\tif (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n\t\t\t\t\t\t\tthis.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n\t\t\t\t\t\t\t\tconst tokens = genericToken[childTokens].flat(Infinity);\n\t\t\t\t\t\t\t\tvalues = values.concat(this.walkTokens(tokens, callback));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (genericToken.tokens) {\n\t\t\t\t\t\t\tvalues = values.concat(this.walkTokens(genericToken.tokens, callback));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn values;\n\t\t}\n\t\tuse(...args) {\n\t\t\tconst extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\t\t\targs.forEach((pack) => {\n\t\t\t\t// copy options to new object\n\t\t\t\tconst opts = { ...pack };\n\t\t\t\t// set async to true if it was set to true before\n\t\t\t\topts.async = this.defaults.async || opts.async || false;\n\t\t\t\t// ==-- Parse \"addon\" extensions --== //\n\t\t\t\tif (pack.extensions) {\n\t\t\t\t\tpack.extensions.forEach((ext) => {\n\t\t\t\t\t\tif (!ext.name) {\n\t\t\t\t\t\t\tthrow new Error('extension name required');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ('renderer' in ext) { // Renderer extensions\n\t\t\t\t\t\t\tconst prevRenderer = extensions.renderers[ext.name];\n\t\t\t\t\t\t\tif (prevRenderer) {\n\t\t\t\t\t\t\t\t// Replace extension with func to run new extension but fall back if false\n\t\t\t\t\t\t\t\textensions.renderers[ext.name] = function (...args) {\n\t\t\t\t\t\t\t\t\tlet ret = ext.renderer.apply(this, args);\n\t\t\t\t\t\t\t\t\tif (ret === false) {\n\t\t\t\t\t\t\t\t\t\tret = prevRenderer.apply(this, args);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\textensions.renderers[ext.name] = ext.renderer;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ('tokenizer' in ext) { // Tokenizer Extensions\n\t\t\t\t\t\t\tif (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n\t\t\t\t\t\t\t\tthrow new Error(\"extension level must be 'block' or 'inline'\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst extLevel = extensions[ext.level];\n\t\t\t\t\t\t\tif (extLevel) {\n\t\t\t\t\t\t\t\textLevel.unshift(ext.tokenizer);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\textensions[ext.level] = [ext.tokenizer];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (ext.start) { // Function to check for start of token\n\t\t\t\t\t\t\t\tif (ext.level === 'block') {\n\t\t\t\t\t\t\t\t\tif (extensions.startBlock) {\n\t\t\t\t\t\t\t\t\t\textensions.startBlock.push(ext.start);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\textensions.startBlock = [ext.start];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (ext.level === 'inline') {\n\t\t\t\t\t\t\t\t\tif (extensions.startInline) {\n\t\t\t\t\t\t\t\t\t\textensions.startInline.push(ext.start);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\textensions.startInline = [ext.start];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n\t\t\t\t\t\t\textensions.childTokens[ext.name] = ext.childTokens;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\topts.extensions = extensions;\n\t\t\t\t}\n\t\t\t\t// ==-- Parse \"overwrite\" extensions --== //\n\t\t\t\tif (pack.renderer) {\n\t\t\t\t\tconst renderer = this.defaults.renderer || new _Renderer(this.defaults);\n\t\t\t\t\tfor (const prop in pack.renderer) {\n\t\t\t\t\t\tif (!(prop in renderer)) {\n\t\t\t\t\t\t\tthrow new Error(`renderer '${prop}' does not exist`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (['options', 'parser'].includes(prop)) {\n\t\t\t\t\t\t\t// ignore options property\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst rendererProp = prop;\n\t\t\t\t\t\tconst rendererFunc = pack.renderer[rendererProp];\n\t\t\t\t\t\tconst prevRenderer = renderer[rendererProp];\n\t\t\t\t\t\t// Replace renderer with func to run extension, but fall back if false\n\t\t\t\t\t\trenderer[rendererProp] = (...args) => {\n\t\t\t\t\t\t\tlet ret = rendererFunc.apply(renderer, args);\n\t\t\t\t\t\t\tif (ret === false) {\n\t\t\t\t\t\t\t\tret = prevRenderer.apply(renderer, args);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret || '';\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\topts.renderer = renderer;\n\t\t\t\t}\n\t\t\t\tif (pack.tokenizer) {\n\t\t\t\t\tconst tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n\t\t\t\t\tfor (const prop in pack.tokenizer) {\n\t\t\t\t\t\tif (!(prop in tokenizer)) {\n\t\t\t\t\t\t\tthrow new Error(`tokenizer '${prop}' does not exist`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (['options', 'rules', 'lexer'].includes(prop)) {\n\t\t\t\t\t\t\t// ignore options, rules, and lexer properties\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst tokenizerProp = prop;\n\t\t\t\t\t\tconst tokenizerFunc = pack.tokenizer[tokenizerProp];\n\t\t\t\t\t\tconst prevTokenizer = tokenizer[tokenizerProp];\n\t\t\t\t\t\t// Replace tokenizer with func to run extension, but fall back if false\n\t\t\t\t\t\t// @ts-expect-error cannot type tokenizer function dynamically\n\t\t\t\t\t\ttokenizer[tokenizerProp] = (...args) => {\n\t\t\t\t\t\t\tlet ret = tokenizerFunc.apply(tokenizer, args);\n\t\t\t\t\t\t\tif (ret === false) {\n\t\t\t\t\t\t\t\tret = prevTokenizer.apply(tokenizer, args);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\topts.tokenizer = tokenizer;\n\t\t\t\t}\n\t\t\t\t// ==-- Parse Hooks extensions --== //\n\t\t\t\tif (pack.hooks) {\n\t\t\t\t\tconst hooks = this.defaults.hooks || new _Hooks();\n\t\t\t\t\tfor (const prop in pack.hooks) {\n\t\t\t\t\t\tif (!(prop in hooks)) {\n\t\t\t\t\t\t\tthrow new Error(`hook '${prop}' does not exist`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (prop === 'options') {\n\t\t\t\t\t\t\t// ignore options property\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst hooksProp = prop;\n\t\t\t\t\t\tconst hooksFunc = pack.hooks[hooksProp];\n\t\t\t\t\t\tconst prevHook = hooks[hooksProp];\n\t\t\t\t\t\tif (_Hooks.passThroughHooks.has(prop)) {\n\t\t\t\t\t\t\t// @ts-expect-error cannot type hook function dynamically\n\t\t\t\t\t\t\thooks[hooksProp] = (arg) => {\n\t\t\t\t\t\t\t\tif (this.defaults.async) {\n\t\t\t\t\t\t\t\t\treturn Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n\t\t\t\t\t\t\t\t\t\treturn prevHook.call(hooks, ret);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst ret = hooksFunc.call(hooks, arg);\n\t\t\t\t\t\t\t\treturn prevHook.call(hooks, ret);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// @ts-expect-error cannot type hook function dynamically\n\t\t\t\t\t\t\thooks[hooksProp] = (...args) => {\n\t\t\t\t\t\t\t\tlet ret = hooksFunc.apply(hooks, args);\n\t\t\t\t\t\t\t\tif (ret === false) {\n\t\t\t\t\t\t\t\t\tret = prevHook.apply(hooks, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\topts.hooks = hooks;\n\t\t\t\t}\n\t\t\t\t// ==-- Parse WalkTokens extensions --== //\n\t\t\t\tif (pack.walkTokens) {\n\t\t\t\t\tconst walkTokens = this.defaults.walkTokens;\n\t\t\t\t\tconst packWalktokens = pack.walkTokens;\n\t\t\t\t\topts.walkTokens = function (token) {\n\t\t\t\t\t\tlet values = [];\n\t\t\t\t\t\tvalues.push(packWalktokens.call(this, token));\n\t\t\t\t\t\tif (walkTokens) {\n\t\t\t\t\t\t\tvalues = values.concat(walkTokens.call(this, token));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn values;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tthis.defaults = { ...this.defaults, ...opts };\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\t\tsetOptions(opt) {\n\t\t\tthis.defaults = { ...this.defaults, ...opt };\n\t\t\treturn this;\n\t\t}\n\t\tlexer(src, options) {\n\t\t\treturn _Lexer.lex(src, options ?? this.defaults);\n\t\t}\n\t\tparser(tokens, options) {\n\t\t\treturn _Parser.parse(tokens, options ?? this.defaults);\n\t\t}\n\t\tparseMarkdown(lexer, parser) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst parse = (src, options) => {\n\t\t\t\tconst origOpt = { ...options };\n\t\t\t\tconst opt = { ...this.defaults, ...origOpt };\n\t\t\t\tconst throwError = this.onError(!!opt.silent, !!opt.async);\n\t\t\t\t// throw error if an extension set async to true but parse was called with async: false\n\t\t\t\tif (this.defaults.async === true && origOpt.async === false) {\n\t\t\t\t\treturn throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n\t\t\t\t}\n\t\t\t\t// throw error in case of non string input\n\t\t\t\tif (typeof src === 'undefined' || src === null) {\n\t\t\t\t\treturn throwError(new Error('marked(): input parameter is undefined or null'));\n\t\t\t\t}\n\t\t\t\tif (typeof src !== 'string') {\n\t\t\t\t\treturn throwError(new Error('marked(): input parameter is of type '\n\t\t\t\t\t\t+ Object.prototype.toString.call(src) + ', string expected'));\n\t\t\t\t}\n\t\t\t\tif (opt.hooks) {\n\t\t\t\t\topt.hooks.options = opt;\n\t\t\t\t}\n\t\t\t\tif (opt.async) {\n\t\t\t\t\treturn Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n\t\t\t\t\t\t.then(src => lexer(src, opt))\n\t\t\t\t\t\t.then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n\t\t\t\t\t\t.then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n\t\t\t\t\t\t.then(tokens => parser(tokens, opt))\n\t\t\t\t\t\t.then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n\t\t\t\t\t\t.catch(throwError);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tif (opt.hooks) {\n\t\t\t\t\t\tsrc = opt.hooks.preprocess(src);\n\t\t\t\t\t}\n\t\t\t\t\tlet tokens = lexer(src, opt);\n\t\t\t\t\tif (opt.hooks) {\n\t\t\t\t\t\ttokens = opt.hooks.processAllTokens(tokens);\n\t\t\t\t\t}\n\t\t\t\t\tif (opt.walkTokens) {\n\t\t\t\t\t\tthis.walkTokens(tokens, opt.walkTokens);\n\t\t\t\t\t}\n\t\t\t\t\tlet html = parser(tokens, opt);\n\t\t\t\t\tif (opt.hooks) {\n\t\t\t\t\t\thtml = opt.hooks.postprocess(html);\n\t\t\t\t\t}\n\t\t\t\t\treturn html;\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\treturn throwError(e);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn parse;\n\t\t}\n\t\tonError(silent, async) {\n\t\t\treturn (e) => {\n\t\t\t\te.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\t\t\t\tif (silent) {\n\t\t\t\t\tconst msg = '<p>An error occurred:</p><pre>'\n\t\t\t\t\t\t+ escape$1(e.message + '', true)\n\t\t\t\t\t\t+ '</pre>';\n\t\t\t\t\tif (async) {\n\t\t\t\t\t\treturn Promise.resolve(msg);\n\t\t\t\t\t}\n\t\t\t\t\treturn msg;\n\t\t\t\t}\n\t\t\t\tif (async) {\n\t\t\t\t\treturn Promise.reject(e);\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t};\n\t\t}\n\t}\n\n\tconst markedInstance = new Marked();\n\tfunction marked(src, opt) {\n\t\treturn markedInstance.parse(src, opt);\n\t}\n\t/**\n\t * Sets the default options.\n\t *\n\t * @param options Hash of options\n\t */\n\tmarked.options =\n\t\tmarked.setOptions = function (options) {\n\t\t\tmarkedInstance.setOptions(options);\n\t\t\tmarked.defaults = markedInstance.defaults;\n\t\t\tchangeDefaults(marked.defaults);\n\t\t\treturn marked;\n\t\t};\n\t/**\n\t * Gets the original marked default options.\n\t */\n\tmarked.getDefaults = _getDefaults;\n\tmarked.defaults = exports.defaults;\n\t/**\n\t * Use Extension\n\t */\n\tmarked.use = function (...args) {\n\t\tmarkedInstance.use(...args);\n\t\tmarked.defaults = markedInstance.defaults;\n\t\tchangeDefaults(marked.defaults);\n\t\treturn marked;\n\t};\n\t/**\n\t * Run callback for every token\n\t */\n\tmarked.walkTokens = function (tokens, callback) {\n\t\treturn markedInstance.walkTokens(tokens, callback);\n\t};\n\t/**\n\t * Compiles markdown to HTML without enclosing `p` tag.\n\t *\n\t * @param src String of markdown source to be compiled\n\t * @param options Hash of options\n\t * @return String of compiled HTML\n\t */\n\tmarked.parseInline = markedInstance.parseInline;\n\t/**\n\t * Expose\n\t */\n\tmarked.Parser = _Parser;\n\tmarked.parser = _Parser.parse;\n\tmarked.Renderer = _Renderer;\n\tmarked.TextRenderer = _TextRenderer;\n\tmarked.Lexer = _Lexer;\n\tmarked.lexer = _Lexer.lex;\n\tmarked.Tokenizer = _Tokenizer;\n\tmarked.Hooks = _Hooks;\n\tmarked.parse = marked;\n\tconst options = marked.options;\n\tconst setOptions = marked.setOptions;\n\tconst use = marked.use;\n\tconst walkTokens = marked.walkTokens;\n\tconst parseInline = marked.parseInline;\n\tconst parse = marked;\n\tconst parser = _Parser.parse;\n\tconst lexer = _Lexer.lex;\n\n\texports.Hooks = _Hooks;\n\texports.Lexer = _Lexer;\n\texports.Marked = Marked;\n\texports.Parser = _Parser;\n\texports.Renderer = _Renderer;\n\texports.TextRenderer = _TextRenderer;\n\texports.Tokenizer = _Tokenizer;\n\texports.getDefaults = _getDefaults;\n\texports.lexer = lexer;\n\texports.marked = marked;\n\texports.options = options;\n\texports.parse = parse;\n\texports.parseInline = parseInline;\n\texports.parser = parser;\n\texports.setOptions = setOptions;\n\texports.use = use;\n\texports.walkTokens = walkTokens;\n}));\n\n// ESM-uncomment-begin\n})();\nexport var Hooks = (__marked_exports.Hooks || exports.Hooks);\nexport var Lexer = (__marked_exports.Lexer || exports.Lexer);\nexport var Marked = (__marked_exports.Marked || exports.Marked);\nexport var Parser = (__marked_exports.Parser || exports.Parser);\nexport var Renderer = (__marked_exports.Renderer || exports.Renderer);\nexport var TextRenderer = (__marked_exports.TextRenderer || exports.TextRenderer);\nexport var Tokenizer = (__marked_exports.Tokenizer || exports.Tokenizer);\nexport var defaults = (__marked_exports.defaults || exports.defaults);\nexport var getDefaults = (__marked_exports.getDefaults || exports.getDefaults);\nexport var lexer = (__marked_exports.lexer || exports.lexer);\nexport var marked = (__marked_exports.marked || exports.marked);\nexport var options = (__marked_exports.options || exports.options);\nexport var parse = (__marked_exports.parse || exports.parse);\nexport var parseInline = (__marked_exports.parseInline || exports.parseInline);\nexport var parser = (__marked_exports.parser || exports.parser);\nexport var setOptions = (__marked_exports.setOptions || exports.setOptions);\nexport var use = (__marked_exports.use || exports.use);\nexport var walkTokens = (__marked_exports.walkTokens || exports.walkTokens);\n// ESM-uncomment-end\n\n//# sourceMappingURL=marked.umd.js.map\n"],
  "mappings": "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",
  "names": ["exports", "html", "link", "lexer", "options", "list", "tag", "text", "parser", "Marked", "tokens", "args", "ret", "walkTokens", "parse", "src", "marked", "setOptions", "use", "parseInline"]
}
