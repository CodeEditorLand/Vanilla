import{KeyCodeUtils as h,ScanCodeUtils as c}from"./keyCodes.js";import{KeyCodeChord as i,Keybinding as f,ScanCodeChord as n}from"./keybindings.js";class b{static _readModifiers(e){e=e.toLowerCase().trim();let t=!1,s=!1,a=!1,l=!1,r;do r=!1,/^ctrl(\+|-)/.test(e)&&(t=!0,e=e.substr(5),r=!0),/^shift(\+|-)/.test(e)&&(s=!0,e=e.substr(6),r=!0),/^alt(\+|-)/.test(e)&&(a=!0,e=e.substr(4),r=!0),/^meta(\+|-)/.test(e)&&(l=!0,e=e.substr(5),r=!0),/^win(\+|-)/.test(e)&&(l=!0,e=e.substr(4),r=!0),/^cmd(\+|-)/.test(e)&&(l=!0,e=e.substr(4),r=!0);while(r);let o;const d=e.indexOf(" ");return d>0?(o=e.substring(0,d),e=e.substring(d)):(o=e,e=""),{remains:e,ctrl:t,shift:s,alt:a,meta:l,key:o}}static parseChord(e){const t=this._readModifiers(e),s=t.key.match(/^\[([^\]]+)\]$/);if(s){const l=s[1],r=c.lowerCaseToEnum(l);return[new n(t.ctrl,t.shift,t.alt,t.meta,r),t.remains]}const a=h.fromUserSettings(t.key);return[new i(t.ctrl,t.shift,t.alt,t.meta,a),t.remains]}static parseKeybinding(e){if(!e)return null;const t=[];let s;for(;e.length>0;)[s,e]=this.parseChord(e),t.push(s);return t.length>0?new f(t):null}}export{b as KeybindingParser};
