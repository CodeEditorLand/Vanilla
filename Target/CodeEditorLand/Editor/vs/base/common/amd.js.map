{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/amd.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// ESM-comment-begin\n// export const isESM = false;\n// export const canASAR = true;\n// ESM-comment-end\n// ESM-uncomment-begin\nexport const isESM = true;\nexport const canASAR = false; // TODO@esm: ASAR disabled in ESM\n// ESM-uncomment-end\n\nexport enum LoaderEventType {\n\tLoaderAvailable = 1,\n\n\tBeginLoadingScript = 10,\n\tEndLoadingScriptOK = 11,\n\tEndLoadingScriptError = 12,\n\n\tBeginInvokeFactory = 21,\n\tEndInvokeFactory = 22,\n\n\tNodeBeginEvaluatingScript = 31,\n\tNodeEndEvaluatingScript = 32,\n\n\tNodeBeginNativeRequire = 33,\n\tNodeEndNativeRequire = 34,\n\n\tCachedDataFound = 60,\n\tCachedDataMissed = 61,\n\tCachedDataRejected = 62,\n\tCachedDataCreated = 63,\n}\n\nexport abstract class LoaderStats {\n\tabstract get amdLoad(): [string, number][];\n\tabstract get amdInvoke(): [string, number][];\n\tabstract get nodeRequire(): [string, number][];\n\tabstract get nodeEval(): [string, number][];\n\tabstract get nodeRequireTotal(): number;\n\n\tstatic get(): LoaderStats {\n\t\tconst amdLoadScript = new Map<string, number>();\n\t\tconst amdInvokeFactory = new Map<string, number>();\n\t\tconst nodeRequire = new Map<string, number>();\n\t\tconst nodeEval = new Map<string, number>();\n\n\t\tfunction mark(map: Map<string, number>, stat: LoaderEvent) {\n\t\t\tif (map.has(stat.detail)) {\n\t\t\t\t// console.warn('BAD events, DOUBLE start', stat);\n\t\t\t\t// map.delete(stat.detail);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmap.set(stat.detail, -stat.timestamp);\n\t\t}\n\n\t\tfunction diff(map: Map<string, number>, stat: LoaderEvent) {\n\t\t\tconst duration = map.get(stat.detail);\n\t\t\tif (!duration) {\n\t\t\t\t// console.warn('BAD events, end WITHOUT start', stat);\n\t\t\t\t// map.delete(stat.detail);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (duration >= 0) {\n\t\t\t\t// console.warn('BAD events, DOUBLE end', stat);\n\t\t\t\t// map.delete(stat.detail);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmap.set(stat.detail, duration + stat.timestamp);\n\t\t}\n\n\t\tlet stats: readonly LoaderEvent[] = [];\n\t\tif (\n\t\t\ttypeof require === \"function\" &&\n\t\t\ttypeof require.getStats === \"function\"\n\t\t) {\n\t\t\tstats = require\n\t\t\t\t.getStats()\n\t\t\t\t.slice(0)\n\t\t\t\t.sort((a, b) => a.timestamp - b.timestamp);\n\t\t}\n\n\t\tfor (const stat of stats) {\n\t\t\tswitch (stat.type) {\n\t\t\t\tcase LoaderEventType.BeginLoadingScript:\n\t\t\t\t\tmark(amdLoadScript, stat);\n\t\t\t\t\tbreak;\n\t\t\t\tcase LoaderEventType.EndLoadingScriptOK:\n\t\t\t\tcase LoaderEventType.EndLoadingScriptError:\n\t\t\t\t\tdiff(amdLoadScript, stat);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LoaderEventType.BeginInvokeFactory:\n\t\t\t\t\tmark(amdInvokeFactory, stat);\n\t\t\t\t\tbreak;\n\t\t\t\tcase LoaderEventType.EndInvokeFactory:\n\t\t\t\t\tdiff(amdInvokeFactory, stat);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LoaderEventType.NodeBeginNativeRequire:\n\t\t\t\t\tmark(nodeRequire, stat);\n\t\t\t\t\tbreak;\n\t\t\t\tcase LoaderEventType.NodeEndNativeRequire:\n\t\t\t\t\tdiff(nodeRequire, stat);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LoaderEventType.NodeBeginEvaluatingScript:\n\t\t\t\t\tmark(nodeEval, stat);\n\t\t\t\t\tbreak;\n\t\t\t\tcase LoaderEventType.NodeEndEvaluatingScript:\n\t\t\t\t\tdiff(nodeEval, stat);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet nodeRequireTotal = 0;\n\t\tnodeRequire.forEach((value) => (nodeRequireTotal += value));\n\n\t\tfunction to2dArray(map: Map<string, number>): [string, number][] {\n\t\t\tconst res: [string, number][] = [];\n\t\t\tmap.forEach((value, index) => res.push([index, value]));\n\t\t\treturn res;\n\t\t}\n\n\t\treturn {\n\t\t\tamdLoad: to2dArray(amdLoadScript),\n\t\t\tamdInvoke: to2dArray(amdInvokeFactory),\n\t\t\tnodeRequire: to2dArray(nodeRequire),\n\t\t\tnodeEval: to2dArray(nodeEval),\n\t\t\tnodeRequireTotal,\n\t\t};\n\t}\n\n\tstatic toMarkdownTable(\n\t\theader: string[],\n\t\trows: Array<Array<{ toString(): string } | undefined>>,\n\t): string {\n\t\tlet result = \"\";\n\n\t\tconst lengths: number[] = [];\n\t\theader.forEach((cell, ci) => {\n\t\t\tlengths[ci] = cell.length;\n\t\t});\n\t\trows.forEach((row) => {\n\t\t\trow.forEach((cell, ci) => {\n\t\t\t\tif (typeof cell === \"undefined\") {\n\t\t\t\t\tcell = row[ci] = \"-\";\n\t\t\t\t}\n\t\t\t\tconst len = cell.toString().length;\n\t\t\t\tlengths[ci] = Math.max(len, lengths[ci]);\n\t\t\t});\n\t\t});\n\n\t\t// header\n\t\theader.forEach((cell, ci) => {\n\t\t\tresult += `| ${cell + \" \".repeat(lengths[ci] - cell.toString().length)} `;\n\t\t});\n\t\tresult += \"|\\n\";\n\t\theader.forEach((_cell, ci) => {\n\t\t\tresult += `| ${\"-\".repeat(lengths[ci])} `;\n\t\t});\n\t\tresult += \"|\\n\";\n\n\t\t// cells\n\t\trows.forEach((row) => {\n\t\t\trow.forEach((cell, ci) => {\n\t\t\t\tif (typeof cell !== \"undefined\") {\n\t\t\t\t\tresult += `| ${cell + \" \".repeat(lengths[ci] - cell.toString().length)} `;\n\t\t\t\t}\n\t\t\t});\n\t\t\tresult += \"|\\n\";\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["LoaderEventType"]
}
