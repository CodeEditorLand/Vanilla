import{env as a}from"./process.js";function c(){return a&&!!a.VSCODE_DEV}function u(t){if(c()){const p=g();return p.add(t),{dispose(){p.delete(t)}}}else return{dispose(){}}}function g(){s||(s=new Set);const t=globalThis;return t.$hotReload_applyNewExports||(t.$hotReload_applyNewExports=p=>{const i={config:{mode:void 0},...p},n=[];for(const e of s){const o=e(i);o&&n.push(o)}if(n.length>0)return e=>{let o=!1;for(const r of n)r(e)&&(o=!0);return o}}),s}let s;c()&&u(({oldExports:t,newSrc:p,config:i})=>{if(i.mode==="patch-prototype")return n=>{for(const e in n){const o=n[e];if(console.log(`[hot-reload] Patching prototype methods of '${e}'`,{exportedItem:o}),typeof o=="function"&&o.prototype){const r=t[e];if(r){for(const d of Object.getOwnPropertyNames(o.prototype)){const l=Object.getOwnPropertyDescriptor(o.prototype,d),f=Object.getOwnPropertyDescriptor(r.prototype,d);l?.value?.toString()!==f?.value?.toString()&&console.log(`[hot-reload] Patching prototype method '${e}.${d}'`),Object.defineProperty(r.prototype,d,l)}n[e]=r}}}return!0}});export{c as isHotReloadEnabled,u as registerHotReloadHandler};
