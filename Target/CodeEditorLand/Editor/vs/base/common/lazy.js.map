{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/lazy.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class Lazy<T> {\n\tprivate _didRun = false;\n\tprivate _value?: T;\n\tprivate _error: Error | undefined;\n\n\tconstructor(private readonly executor: () => T) {}\n\n\t/**\n\t * True if the lazy value has been resolved.\n\t */\n\tget hasValue() {\n\t\treturn this._didRun;\n\t}\n\n\t/**\n\t * Get the wrapped value.\n\t *\n\t * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n\t * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n\t */\n\tget value(): T {\n\t\tif (!this._didRun) {\n\t\t\ttry {\n\t\t\t\tthis._value = this.executor();\n\t\t\t} catch (err) {\n\t\t\t\tthis._error = err;\n\t\t\t} finally {\n\t\t\t\tthis._didRun = true;\n\t\t\t}\n\t\t}\n\t\tif (this._error) {\n\t\t\tthrow this._error;\n\t\t}\n\t\treturn this._value!;\n\t}\n\n\t/**\n\t * Get the wrapped value without forcing evaluation.\n\t */\n\tget rawValue(): T | undefined {\n\t\treturn this._value;\n\t}\n}\n"],
  "mappings": ";;AAKO,MAAM,KAAQ;AAAA,EAKpB,YAA6B,UAAmB;AAAnB;AAAA,EAAoB;AAAA,EAVlD,OAKqB;AAAA;AAAA;AAAA,EACZ,UAAU;AAAA,EACV;AAAA,EACA;AAAA;AAAA;AAAA;AAAA,EAOR,IAAI,WAAW;AACd,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,QAAW;AACd,QAAI,CAAC,KAAK,SAAS;AAClB,UAAI;AACH,aAAK,SAAS,KAAK,SAAS;AAAA,MAC7B,SAAS,KAAK;AACb,aAAK,SAAS;AAAA,MACf,UAAE;AACD,aAAK,UAAU;AAAA,MAChB;AAAA,IACD;AACA,QAAI,KAAK,QAAQ;AAChB,YAAM,KAAK;AAAA,IACZ;AACA,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAA0B;AAC7B,WAAO,KAAK;AAAA,EACb;AACD;",
  "names": []
}
