{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/verifier.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isObject } from \"./types.js\";\n\ninterface IVerifier<T> {\n\tverify(value: unknown): T;\n}\n\nabstract class Verifier<T> implements IVerifier<T> {\n\tconstructor(protected readonly defaultValue: T) {}\n\n\tverify(value: unknown): T {\n\t\tif (!this.isType(value)) {\n\t\t\treturn this.defaultValue;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprotected abstract isType(value: unknown): value is T;\n}\n\nexport class BooleanVerifier extends Verifier<boolean> {\n\tprotected isType(value: unknown): value is boolean {\n\t\treturn typeof value === \"boolean\";\n\t}\n}\n\nexport class NumberVerifier extends Verifier<number> {\n\tprotected isType(value: unknown): value is number {\n\t\treturn typeof value === \"number\";\n\t}\n}\n\nexport class SetVerifier<T> extends Verifier<Set<T>> {\n\tprotected isType(value: unknown): value is Set<T> {\n\t\treturn value instanceof Set;\n\t}\n}\n\nexport class EnumVerifier<T> extends Verifier<T> {\n\tprivate readonly allowedValues: ReadonlyArray<T>;\n\n\tconstructor(defaultValue: T, allowedValues: ReadonlyArray<T>) {\n\t\tsuper(defaultValue);\n\t\tthis.allowedValues = allowedValues;\n\t}\n\n\tprotected isType(value: unknown): value is T {\n\t\treturn this.allowedValues.includes(value as T);\n\t}\n}\n\nexport class ObjectVerifier<T extends Object> extends Verifier<T> {\n\tconstructor(\n\t\tdefaultValue: T,\n\t\tprivate readonly verifier: { [K in keyof T]: IVerifier<T[K]> },\n\t) {\n\t\tsuper(defaultValue);\n\t}\n\n\toverride verify(value: unknown): T {\n\t\tif (!this.isType(value)) {\n\t\t\treturn this.defaultValue;\n\t\t}\n\t\treturn verifyObject<T>(this.verifier, value);\n\t}\n\n\tprotected isType(value: unknown): value is T {\n\t\treturn isObject(value);\n\t}\n}\n\nexport function verifyObject<T extends Object>(\n\tverifiers: { [K in keyof T]: IVerifier<T[K]> },\n\tvalue: Object,\n): T {\n\tconst result = Object.create(null);\n\n\tfor (const key in verifiers) {\n\t\tif (Object.hasOwnProperty.call(verifiers, key)) {\n\t\t\tconst verifier = verifiers[key];\n\t\t\tresult[key] = verifier.verify((value as any)[key]);\n\t\t}\n\t}\n\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AAMzB,MAAe,SAAoC;AAAA,EAClD,YAA+B,cAAiB;AAAjB;AAAA,EAAkB;AAAA,EAZlD,OAWmD;AAAA;AAAA;AAAA,EAGlD,OAAO,OAAmB;AACzB,QAAI,CAAC,KAAK,OAAO,KAAK,GAAG;AACxB,aAAO,KAAK;AAAA,IACb;AAEA,WAAO;AAAA,EACR;AAGD;AAEO,MAAM,wBAAwB,SAAkB;AAAA,EAzBvD,OAyBuD;AAAA;AAAA;AAAA,EAC5C,OAAO,OAAkC;AAClD,WAAO,OAAO,UAAU;AAAA,EACzB;AACD;AAEO,MAAM,uBAAuB,SAAiB;AAAA,EA/BrD,OA+BqD;AAAA;AAAA;AAAA,EAC1C,OAAO,OAAiC;AACjD,WAAO,OAAO,UAAU;AAAA,EACzB;AACD;AAEO,MAAM,oBAAuB,SAAiB;AAAA,EArCrD,OAqCqD;AAAA;AAAA;AAAA,EAC1C,OAAO,OAAiC;AACjD,WAAO,iBAAiB;AAAA,EACzB;AACD;AAEO,MAAM,qBAAwB,SAAY;AAAA,EA3CjD,OA2CiD;AAAA;AAAA;AAAA,EAC/B;AAAA,EAEjB,YAAY,cAAiB,eAAiC;AAC7D,UAAM,YAAY;AAClB,SAAK,gBAAgB;AAAA,EACtB;AAAA,EAEU,OAAO,OAA4B;AAC5C,WAAO,KAAK,cAAc,SAAS,KAAU;AAAA,EAC9C;AACD;AAEO,MAAM,uBAAyC,SAAY;AAAA,EACjE,YACC,cACiB,UAChB;AACD,UAAM,YAAY;AAFD;AAAA,EAGlB;AAAA,EA9DD,OAwDkE;AAAA;AAAA;AAAA,EAQxD,OAAO,OAAmB;AAClC,QAAI,CAAC,KAAK,OAAO,KAAK,GAAG;AACxB,aAAO,KAAK;AAAA,IACb;AACA,WAAO,aAAgB,KAAK,UAAU,KAAK;AAAA,EAC5C;AAAA,EAEU,OAAO,OAA4B;AAC5C,WAAO,SAAS,KAAK;AAAA,EACtB;AACD;AAEO,SAAS,aACf,WACA,OACI;AACJ,QAAM,SAAS,uBAAO,OAAO,IAAI;AAEjC,aAAW,OAAO,WAAW;AAC5B,QAAI,OAAO,eAAe,KAAK,WAAW,GAAG,GAAG;AAC/C,YAAM,WAAW,UAAU,GAAG;AAC9B,aAAO,GAAG,IAAI,SAAS,OAAQ,MAAc,GAAG,CAAC;AAAA,IAClD;AAAA,EACD;AAEA,SAAO;AACR;AAdgB;",
  "names": []
}
