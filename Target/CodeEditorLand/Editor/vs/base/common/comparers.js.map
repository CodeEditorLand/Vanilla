{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/comparers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Lazy } from './lazy.js';\nimport { sep } from './path.js';\n\n// When comparing large numbers of strings it's better for performance to create an\n// Intl.Collator object and use the function provided by its compare property\n// than it is to use String.prototype.localeCompare()\n\n// A collator with numeric sorting enabled, and no sensitivity to case, accents or diacritics.\nconst intlFileNameCollatorBaseNumeric: Lazy<{ collator: Intl.Collator; collatorIsNumeric: boolean }> = new Lazy(() => {\n\tconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n\treturn {\n\t\tcollator,\n\t\tcollatorIsNumeric: collator.resolvedOptions().numeric\n\t};\n});\n\n// A collator with numeric sorting enabled.\nconst intlFileNameCollatorNumeric: Lazy<{ collator: Intl.Collator }> = new Lazy(() => {\n\tconst collator = new Intl.Collator(undefined, { numeric: true });\n\treturn {\n\t\tcollator\n\t};\n});\n\n// A collator with numeric sorting enabled, and sensitivity to accents and diacritics but not case.\nconst intlFileNameCollatorNumericCaseInsensitive: Lazy<{ collator: Intl.Collator }> = new Lazy(() => {\n\tconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'accent' });\n\treturn {\n\t\tcollator\n\t};\n});\n\n/** Compares filenames without distinguishing the name from the extension. Disambiguates by unicode comparison. */\nexport function compareFileNames(one: string | null, other: string | null, caseSensitive = false): number {\n\tconst a = one || '';\n\tconst b = other || '';\n\tconst result = intlFileNameCollatorBaseNumeric.value.collator.compare(a, b);\n\n\t// Using the numeric option will make compare(`foo1`, `foo01`) === 0. Disambiguate.\n\tif (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && a !== b) {\n\t\treturn a < b ? -1 : 1;\n\t}\n\n\treturn result;\n}\n\n/** Compares full filenames without grouping by case. */\nexport function compareFileNamesDefault(one: string | null, other: string | null): number {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || '';\n\tother = other || '';\n\n\treturn compareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares full filenames grouping uppercase names before lowercase. */\nexport function compareFileNamesUpper(one: string | null, other: string | null) {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || '';\n\tother = other || '';\n\n\treturn compareCaseUpperFirst(one, other) || compareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares full filenames grouping lowercase names before uppercase. */\nexport function compareFileNamesLower(one: string | null, other: string | null) {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || '';\n\tother = other || '';\n\n\treturn compareCaseLowerFirst(one, other) || compareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares full filenames by unicode value. */\nexport function compareFileNamesUnicode(one: string | null, other: string | null) {\n\tone = one || '';\n\tother = other || '';\n\n\tif (one === other) {\n\t\treturn 0;\n\t}\n\n\treturn one < other ? -1 : 1;\n}\n\n/** Compares filenames by extension, then by name. Disambiguates by unicode comparison. */\nexport function compareFileExtensions(one: string | null, other: string | null): number {\n\tconst [oneName, oneExtension] = extractNameAndExtension(one);\n\tconst [otherName, otherExtension] = extractNameAndExtension(other);\n\n\tlet result = intlFileNameCollatorBaseNumeric.value.collator.compare(oneExtension, otherExtension);\n\n\tif (result === 0) {\n\t\t// Using the numeric option will  make compare(`foo1`, `foo01`) === 0. Disambiguate.\n\t\tif (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && oneExtension !== otherExtension) {\n\t\t\treturn oneExtension < otherExtension ? -1 : 1;\n\t\t}\n\n\t\t// Extensions are equal, compare filenames\n\t\tresult = intlFileNameCollatorBaseNumeric.value.collator.compare(oneName, otherName);\n\n\t\tif (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && oneName !== otherName) {\n\t\t\treturn oneName < otherName ? -1 : 1;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/** Compares filenames by extension, then by full filename. Mixes uppercase and lowercase names together. */\nexport function compareFileExtensionsDefault(one: string | null, other: string | null): number {\n\tone = one || '';\n\tother = other || '';\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares filenames by extension, then case, then full filename. Groups uppercase names before lowercase. */\nexport function compareFileExtensionsUpper(one: string | null, other: string | null): number {\n\tone = one || '';\n\tother = other || '';\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||\n\t\tcompareCaseUpperFirst(one, other) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares filenames by extension, then case, then full filename. Groups lowercase names before uppercase. */\nexport function compareFileExtensionsLower(one: string | null, other: string | null): number {\n\tone = one || '';\n\tother = other || '';\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||\n\t\tcompareCaseLowerFirst(one, other) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares filenames by case-insensitive extension unicode value, then by full filename unicode value. */\nexport function compareFileExtensionsUnicode(one: string | null, other: string | null) {\n\tone = one || '';\n\tother = other || '';\n\tconst oneExtension = extractExtension(one).toLowerCase();\n\tconst otherExtension = extractExtension(other).toLowerCase();\n\n\t// Check for extension differences\n\tif (oneExtension !== otherExtension) {\n\t\treturn oneExtension < otherExtension ? -1 : 1;\n\t}\n\n\t// Check for full filename differences.\n\tif (one !== other) {\n\t\treturn one < other ? -1 : 1;\n\t}\n\n\treturn 0;\n}\n\nconst FileNameMatch = /^(.*?)(\\.([^.]*))?$/;\n\n/** Extracts the name and extension from a full filename, with optional special handling for dotfiles */\nfunction extractNameAndExtension(str?: string | null, dotfilesAsNames = false): [string, string] {\n\tconst match = str ? FileNameMatch.exec(str) as Array<string> : ([] as Array<string>);\n\n\tlet result: [string, string] = [(match && match[1]) || '', (match && match[3]) || ''];\n\n\t// if the dotfilesAsNames option is selected, treat an empty filename with an extension\n\t// or a filename that starts with a dot, as a dotfile name\n\tif (dotfilesAsNames && (!result[0] && result[1] || result[0] && result[0].charAt(0) === '.')) {\n\t\tresult = [result[0] + '.' + result[1], ''];\n\t}\n\n\treturn result;\n}\n\n/** Extracts the extension from a full filename. Treats dotfiles as names, not extensions. */\nfunction extractExtension(str?: string | null): string {\n\tconst match = str ? FileNameMatch.exec(str) as Array<string> : ([] as Array<string>);\n\n\treturn (match && match[1] && match[1].charAt(0) !== '.' && match[3]) || '';\n}\n\nfunction compareAndDisambiguateByLength(collator: Intl.Collator, one: string, other: string) {\n\t// Check for differences\n\tconst result = collator.compare(one, other);\n\tif (result !== 0) {\n\t\treturn result;\n\t}\n\n\t// In a numeric comparison, `foo1` and `foo01` will compare as equivalent.\n\t// Disambiguate by sorting the shorter string first.\n\tif (one.length !== other.length) {\n\t\treturn one.length < other.length ? -1 : 1;\n\t}\n\n\treturn 0;\n}\n\n/** @returns `true` if the string is starts with a lowercase letter. Otherwise, `false`. */\nfunction startsWithLower(string: string) {\n\tconst character = string.charAt(0);\n\n\treturn (character.toLocaleUpperCase() !== character) ? true : false;\n}\n\n/** @returns `true` if the string starts with an uppercase letter. Otherwise, `false`. */\nfunction startsWithUpper(string: string) {\n\tconst character = string.charAt(0);\n\n\treturn (character.toLocaleLowerCase() !== character) ? true : false;\n}\n\n/**\n * Compares the case of the provided strings - lowercase before uppercase\n *\n * @returns\n * ```text\n *   -1 if one is lowercase and other is uppercase\n *    1 if one is uppercase and other is lowercase\n *    0 otherwise\n * ```\n */\nfunction compareCaseLowerFirst(one: string, other: string): number {\n\tif (startsWithLower(one) && startsWithUpper(other)) {\n\t\treturn -1;\n\t}\n\treturn (startsWithUpper(one) && startsWithLower(other)) ? 1 : 0;\n}\n\n/**\n * Compares the case of the provided strings - uppercase before lowercase\n *\n * @returns\n * ```text\n *   -1 if one is uppercase and other is lowercase\n *    1 if one is lowercase and other is uppercase\n *    0 otherwise\n * ```\n */\nfunction compareCaseUpperFirst(one: string, other: string): number {\n\tif (startsWithUpper(one) && startsWithLower(other)) {\n\t\treturn -1;\n\t}\n\treturn (startsWithLower(one) && startsWithUpper(other)) ? 1 : 0;\n}\n\nfunction comparePathComponents(one: string, other: string, caseSensitive = false): number {\n\tif (!caseSensitive) {\n\t\tone = one && one.toLowerCase();\n\t\tother = other && other.toLowerCase();\n\t}\n\n\tif (one === other) {\n\t\treturn 0;\n\t}\n\n\treturn one < other ? -1 : 1;\n}\n\nexport function comparePaths(one: string, other: string, caseSensitive = false): number {\n\tconst oneParts = one.split(sep);\n\tconst otherParts = other.split(sep);\n\n\tconst lastOne = oneParts.length - 1;\n\tconst lastOther = otherParts.length - 1;\n\tlet endOne: boolean, endOther: boolean;\n\n\tfor (let i = 0; ; i++) {\n\t\tendOne = lastOne === i;\n\t\tendOther = lastOther === i;\n\n\t\tif (endOne && endOther) {\n\t\t\treturn compareFileNames(oneParts[i], otherParts[i], caseSensitive);\n\t\t} else if (endOne) {\n\t\t\treturn -1;\n\t\t} else if (endOther) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst result = comparePathComponents(oneParts[i], otherParts[i], caseSensitive);\n\n\t\tif (result !== 0) {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport function compareAnything(one: string, other: string, lookFor: string): number {\n\tconst elementAName = one.toLowerCase();\n\tconst elementBName = other.toLowerCase();\n\n\t// Sort prefix matches over non prefix matches\n\tconst prefixCompare = compareByPrefix(one, other, lookFor);\n\tif (prefixCompare) {\n\t\treturn prefixCompare;\n\t}\n\n\t// Sort suffix matches over non suffix matches\n\tconst elementASuffixMatch = elementAName.endsWith(lookFor);\n\tconst elementBSuffixMatch = elementBName.endsWith(lookFor);\n\tif (elementASuffixMatch !== elementBSuffixMatch) {\n\t\treturn elementASuffixMatch ? -1 : 1;\n\t}\n\n\t// Understand file names\n\tconst r = compareFileNames(elementAName, elementBName);\n\tif (r !== 0) {\n\t\treturn r;\n\t}\n\n\t// Compare by name\n\treturn elementAName.localeCompare(elementBName);\n}\n\nexport function compareByPrefix(one: string, other: string, lookFor: string): number {\n\tconst elementAName = one.toLowerCase();\n\tconst elementBName = other.toLowerCase();\n\n\t// Sort prefix matches over non prefix matches\n\tconst elementAPrefixMatch = elementAName.startsWith(lookFor);\n\tconst elementBPrefixMatch = elementBName.startsWith(lookFor);\n\tif (elementAPrefixMatch !== elementBPrefixMatch) {\n\t\treturn elementAPrefixMatch ? -1 : 1;\n\t}\n\n\t// Same prefix: Sort shorter matches to the top to have those on top that match more precisely\n\telse if (elementAPrefixMatch && elementBPrefixMatch) {\n\t\tif (elementAName.length < elementBName.length) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (elementAName.length > elementBName.length) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"],
  "mappings": "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",
  "names": []
}
