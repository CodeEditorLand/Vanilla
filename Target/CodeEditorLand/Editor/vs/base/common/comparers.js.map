{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/comparers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Lazy } from \"./lazy.js\";\nimport { sep } from \"./path.js\";\n\n// When comparing large numbers of strings it's better for performance to create an\n// Intl.Collator object and use the function provided by its compare property\n// than it is to use String.prototype.localeCompare()\n\n// A collator with numeric sorting enabled, and no sensitivity to case, accents or diacritics.\nconst intlFileNameCollatorBaseNumeric: Lazy<{\n\tcollator: Intl.Collator;\n\tcollatorIsNumeric: boolean;\n}> = new Lazy(() => {\n\tconst collator = new Intl.Collator(undefined, {\n\t\tnumeric: true,\n\t\tsensitivity: \"base\",\n\t});\n\treturn {\n\t\tcollator,\n\t\tcollatorIsNumeric: collator.resolvedOptions().numeric,\n\t};\n});\n\n// A collator with numeric sorting enabled.\nconst intlFileNameCollatorNumeric: Lazy<{ collator: Intl.Collator }> = new Lazy(\n\t() => {\n\t\tconst collator = new Intl.Collator(undefined, { numeric: true });\n\t\treturn {\n\t\t\tcollator,\n\t\t};\n\t},\n);\n\n// A collator with numeric sorting enabled, and sensitivity to accents and diacritics but not case.\nconst intlFileNameCollatorNumericCaseInsensitive: Lazy<{\n\tcollator: Intl.Collator;\n}> = new Lazy(() => {\n\tconst collator = new Intl.Collator(undefined, {\n\t\tnumeric: true,\n\t\tsensitivity: \"accent\",\n\t});\n\treturn {\n\t\tcollator,\n\t};\n});\n\n/** Compares filenames without distinguishing the name from the extension. Disambiguates by unicode comparison. */\nexport function compareFileNames(\n\tone: string | null,\n\tother: string | null,\n\tcaseSensitive = false,\n): number {\n\tconst a = one || \"\";\n\tconst b = other || \"\";\n\tconst result = intlFileNameCollatorBaseNumeric.value.collator.compare(a, b);\n\n\t// Using the numeric option will make compare(`foo1`, `foo01`) === 0. Disambiguate.\n\tif (\n\t\tintlFileNameCollatorBaseNumeric.value.collatorIsNumeric &&\n\t\tresult === 0 &&\n\t\ta !== b\n\t) {\n\t\treturn a < b ? -1 : 1;\n\t}\n\n\treturn result;\n}\n\n/** Compares full filenames without grouping by case. */\nexport function compareFileNamesDefault(\n\tone: string | null,\n\tother: string | null,\n): number {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || \"\";\n\tother = other || \"\";\n\n\treturn compareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares full filenames grouping uppercase names before lowercase. */\nexport function compareFileNamesUpper(\n\tone: string | null,\n\tother: string | null,\n) {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || \"\";\n\tother = other || \"\";\n\n\treturn (\n\t\tcompareCaseUpperFirst(one, other) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other)\n\t);\n}\n\n/** Compares full filenames grouping lowercase names before uppercase. */\nexport function compareFileNamesLower(\n\tone: string | null,\n\tother: string | null,\n) {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || \"\";\n\tother = other || \"\";\n\n\treturn (\n\t\tcompareCaseLowerFirst(one, other) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other)\n\t);\n}\n\n/** Compares full filenames by unicode value. */\nexport function compareFileNamesUnicode(\n\tone: string | null,\n\tother: string | null,\n) {\n\tone = one || \"\";\n\tother = other || \"\";\n\n\tif (one === other) {\n\t\treturn 0;\n\t}\n\n\treturn one < other ? -1 : 1;\n}\n\n/** Compares filenames by extension, then by name. Disambiguates by unicode comparison. */\nexport function compareFileExtensions(\n\tone: string | null,\n\tother: string | null,\n): number {\n\tconst [oneName, oneExtension] = extractNameAndExtension(one);\n\tconst [otherName, otherExtension] = extractNameAndExtension(other);\n\n\tlet result = intlFileNameCollatorBaseNumeric.value.collator.compare(\n\t\toneExtension,\n\t\totherExtension,\n\t);\n\n\tif (result === 0) {\n\t\t// Using the numeric option will  make compare(`foo1`, `foo01`) === 0. Disambiguate.\n\t\tif (\n\t\t\tintlFileNameCollatorBaseNumeric.value.collatorIsNumeric &&\n\t\t\toneExtension !== otherExtension\n\t\t) {\n\t\t\treturn oneExtension < otherExtension ? -1 : 1;\n\t\t}\n\n\t\t// Extensions are equal, compare filenames\n\t\tresult = intlFileNameCollatorBaseNumeric.value.collator.compare(\n\t\t\toneName,\n\t\t\totherName,\n\t\t);\n\n\t\tif (\n\t\t\tintlFileNameCollatorBaseNumeric.value.collatorIsNumeric &&\n\t\t\tresult === 0 &&\n\t\t\toneName !== otherName\n\t\t) {\n\t\t\treturn oneName < otherName ? -1 : 1;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/** Compares filenames by extension, then by full filename. Mixes uppercase and lowercase names together. */\nexport function compareFileExtensionsDefault(\n\tone: string | null,\n\tother: string | null,\n): number {\n\tone = one || \"\";\n\tother = other || \"\";\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive =\n\t\tintlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn (\n\t\tcompareAndDisambiguateByLength(\n\t\t\tcollatorNumericCaseInsensitive,\n\t\t\toneExtension,\n\t\t\totherExtension,\n\t\t) || compareAndDisambiguateByLength(collatorNumeric, one, other)\n\t);\n}\n\n/** Compares filenames by extension, then case, then full filename. Groups uppercase names before lowercase. */\nexport function compareFileExtensionsUpper(\n\tone: string | null,\n\tother: string | null,\n): number {\n\tone = one || \"\";\n\tother = other || \"\";\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive =\n\t\tintlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn (\n\t\tcompareAndDisambiguateByLength(\n\t\t\tcollatorNumericCaseInsensitive,\n\t\t\toneExtension,\n\t\t\totherExtension,\n\t\t) ||\n\t\tcompareCaseUpperFirst(one, other) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other)\n\t);\n}\n\n/** Compares filenames by extension, then case, then full filename. Groups lowercase names before uppercase. */\nexport function compareFileExtensionsLower(\n\tone: string | null,\n\tother: string | null,\n): number {\n\tone = one || \"\";\n\tother = other || \"\";\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive =\n\t\tintlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn (\n\t\tcompareAndDisambiguateByLength(\n\t\t\tcollatorNumericCaseInsensitive,\n\t\t\toneExtension,\n\t\t\totherExtension,\n\t\t) ||\n\t\tcompareCaseLowerFirst(one, other) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other)\n\t);\n}\n\n/** Compares filenames by case-insensitive extension unicode value, then by full filename unicode value. */\nexport function compareFileExtensionsUnicode(\n\tone: string | null,\n\tother: string | null,\n) {\n\tone = one || \"\";\n\tother = other || \"\";\n\tconst oneExtension = extractExtension(one).toLowerCase();\n\tconst otherExtension = extractExtension(other).toLowerCase();\n\n\t// Check for extension differences\n\tif (oneExtension !== otherExtension) {\n\t\treturn oneExtension < otherExtension ? -1 : 1;\n\t}\n\n\t// Check for full filename differences.\n\tif (one !== other) {\n\t\treturn one < other ? -1 : 1;\n\t}\n\n\treturn 0;\n}\n\nconst FileNameMatch = /^(.*?)(\\.([^.]*))?$/;\n\n/** Extracts the name and extension from a full filename, with optional special handling for dotfiles */\nfunction extractNameAndExtension(\n\tstr?: string | null,\n\tdotfilesAsNames = false,\n): [string, string] {\n\tconst match = str\n\t\t? (FileNameMatch.exec(str) as Array<string>)\n\t\t: ([] as Array<string>);\n\n\tlet result: [string, string] = [\n\t\t(match && match[1]) || \"\",\n\t\t(match && match[3]) || \"\",\n\t];\n\n\t// if the dotfilesAsNames option is selected, treat an empty filename with an extension\n\t// or a filename that starts with a dot, as a dotfile name\n\tif (\n\t\tdotfilesAsNames &&\n\t\t((!result[0] && result[1]) ||\n\t\t\t(result[0] && result[0].charAt(0) === \".\"))\n\t) {\n\t\tresult = [result[0] + \".\" + result[1], \"\"];\n\t}\n\n\treturn result;\n}\n\n/** Extracts the extension from a full filename. Treats dotfiles as names, not extensions. */\nfunction extractExtension(str?: string | null): string {\n\tconst match = str\n\t\t? (FileNameMatch.exec(str) as Array<string>)\n\t\t: ([] as Array<string>);\n\n\treturn (match && match[1] && match[1].charAt(0) !== \".\" && match[3]) || \"\";\n}\n\nfunction compareAndDisambiguateByLength(\n\tcollator: Intl.Collator,\n\tone: string,\n\tother: string,\n) {\n\t// Check for differences\n\tconst result = collator.compare(one, other);\n\tif (result !== 0) {\n\t\treturn result;\n\t}\n\n\t// In a numeric comparison, `foo1` and `foo01` will compare as equivalent.\n\t// Disambiguate by sorting the shorter string first.\n\tif (one.length !== other.length) {\n\t\treturn one.length < other.length ? -1 : 1;\n\t}\n\n\treturn 0;\n}\n\n/** @returns `true` if the string is starts with a lowercase letter. Otherwise, `false`. */\nfunction startsWithLower(string: string) {\n\tconst character = string.charAt(0);\n\n\treturn character.toLocaleUpperCase() !== character ? true : false;\n}\n\n/** @returns `true` if the string starts with an uppercase letter. Otherwise, `false`. */\nfunction startsWithUpper(string: string) {\n\tconst character = string.charAt(0);\n\n\treturn character.toLocaleLowerCase() !== character ? true : false;\n}\n\n/**\n * Compares the case of the provided strings - lowercase before uppercase\n *\n * @returns\n * ```text\n *   -1 if one is lowercase and other is uppercase\n *    1 if one is uppercase and other is lowercase\n *    0 otherwise\n * ```\n */\nfunction compareCaseLowerFirst(one: string, other: string): number {\n\tif (startsWithLower(one) && startsWithUpper(other)) {\n\t\treturn -1;\n\t}\n\treturn startsWithUpper(one) && startsWithLower(other) ? 1 : 0;\n}\n\n/**\n * Compares the case of the provided strings - uppercase before lowercase\n *\n * @returns\n * ```text\n *   -1 if one is uppercase and other is lowercase\n *    1 if one is lowercase and other is uppercase\n *    0 otherwise\n * ```\n */\nfunction compareCaseUpperFirst(one: string, other: string): number {\n\tif (startsWithUpper(one) && startsWithLower(other)) {\n\t\treturn -1;\n\t}\n\treturn startsWithLower(one) && startsWithUpper(other) ? 1 : 0;\n}\n\nfunction comparePathComponents(\n\tone: string,\n\tother: string,\n\tcaseSensitive = false,\n): number {\n\tif (!caseSensitive) {\n\t\tone = one && one.toLowerCase();\n\t\tother = other && other.toLowerCase();\n\t}\n\n\tif (one === other) {\n\t\treturn 0;\n\t}\n\n\treturn one < other ? -1 : 1;\n}\n\nexport function comparePaths(\n\tone: string,\n\tother: string,\n\tcaseSensitive = false,\n): number {\n\tconst oneParts = one.split(sep);\n\tconst otherParts = other.split(sep);\n\n\tconst lastOne = oneParts.length - 1;\n\tconst lastOther = otherParts.length - 1;\n\tlet endOne: boolean, endOther: boolean;\n\n\tfor (let i = 0; ; i++) {\n\t\tendOne = lastOne === i;\n\t\tendOther = lastOther === i;\n\n\t\tif (endOne && endOther) {\n\t\t\treturn compareFileNames(oneParts[i], otherParts[i], caseSensitive);\n\t\t} else if (endOne) {\n\t\t\treturn -1;\n\t\t} else if (endOther) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst result = comparePathComponents(\n\t\t\toneParts[i],\n\t\t\totherParts[i],\n\t\t\tcaseSensitive,\n\t\t);\n\n\t\tif (result !== 0) {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport function compareAnything(\n\tone: string,\n\tother: string,\n\tlookFor: string,\n): number {\n\tconst elementAName = one.toLowerCase();\n\tconst elementBName = other.toLowerCase();\n\n\t// Sort prefix matches over non prefix matches\n\tconst prefixCompare = compareByPrefix(one, other, lookFor);\n\tif (prefixCompare) {\n\t\treturn prefixCompare;\n\t}\n\n\t// Sort suffix matches over non suffix matches\n\tconst elementASuffixMatch = elementAName.endsWith(lookFor);\n\tconst elementBSuffixMatch = elementBName.endsWith(lookFor);\n\tif (elementASuffixMatch !== elementBSuffixMatch) {\n\t\treturn elementASuffixMatch ? -1 : 1;\n\t}\n\n\t// Understand file names\n\tconst r = compareFileNames(elementAName, elementBName);\n\tif (r !== 0) {\n\t\treturn r;\n\t}\n\n\t// Compare by name\n\treturn elementAName.localeCompare(elementBName);\n}\n\nexport function compareByPrefix(\n\tone: string,\n\tother: string,\n\tlookFor: string,\n): number {\n\tconst elementAName = one.toLowerCase();\n\tconst elementBName = other.toLowerCase();\n\n\t// Sort prefix matches over non prefix matches\n\tconst elementAPrefixMatch = elementAName.startsWith(lookFor);\n\tconst elementBPrefixMatch = elementBName.startsWith(lookFor);\n\tif (elementAPrefixMatch !== elementBPrefixMatch) {\n\t\treturn elementAPrefixMatch ? -1 : 1;\n\t}\n\n\t// Same prefix: Sort shorter matches to the top to have those on top that match more precisely\n\telse if (elementAPrefixMatch && elementBPrefixMatch) {\n\t\tif (elementAName.length < elementBName.length) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (elementAName.length > elementBName.length) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"],
  "mappings": "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",
  "names": []
}
