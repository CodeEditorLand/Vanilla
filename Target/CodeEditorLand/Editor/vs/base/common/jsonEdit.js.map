{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/jsonEdit.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findNodeAtLocation, JSONPath, Node, ParseError, parseTree, Segment } from './json.js';\nimport { Edit, format, FormattingOptions, isEOL } from './jsonFormatter.js';\n\n\nexport function removeProperty(text: string, path: JSONPath, formattingOptions: FormattingOptions): Edit[] {\n\treturn setProperty(text, path, undefined, formattingOptions);\n}\n\nexport function setProperty(text: string, originalPath: JSONPath, value: any, formattingOptions: FormattingOptions, getInsertionIndex?: (properties: string[]) => number): Edit[] {\n\tconst path = originalPath.slice();\n\tconst errors: ParseError[] = [];\n\tconst root = parseTree(text, errors);\n\tlet parent: Node | undefined = undefined;\n\n\tlet lastSegment: Segment | undefined = undefined;\n\twhile (path.length > 0) {\n\t\tlastSegment = path.pop();\n\t\tparent = findNodeAtLocation(root, path);\n\t\tif (parent === undefined && value !== undefined) {\n\t\t\tif (typeof lastSegment === 'string') {\n\t\t\t\tvalue = { [lastSegment]: value };\n\t\t\t} else {\n\t\t\t\tvalue = [value];\n\t\t\t}\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!parent) {\n\t\t// empty document\n\t\tif (value === undefined) { // delete\n\t\t\treturn []; // property does not exist, nothing to do\n\t\t}\n\t\treturn withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n\t} else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n\t\tconst existing = findNodeAtLocation(parent, [lastSegment]);\n\t\tif (existing !== undefined) {\n\t\t\tif (value === undefined) { // delete\n\t\t\t\tif (!existing.parent) {\n\t\t\t\t\tthrow new Error('Malformed AST');\n\t\t\t\t}\n\t\t\t\tconst propertyIndex = parent.children.indexOf(existing.parent);\n\t\t\t\tlet removeBegin: number;\n\t\t\t\tlet removeEnd = existing.parent.offset + existing.parent.length;\n\t\t\t\tif (propertyIndex > 0) {\n\t\t\t\t\t// remove the comma of the previous node\n\t\t\t\t\tconst previous = parent.children[propertyIndex - 1];\n\t\t\t\t\tremoveBegin = previous.offset + previous.length;\n\t\t\t\t} else {\n\t\t\t\t\tremoveBegin = parent.offset + 1;\n\t\t\t\t\tif (parent.children.length > 1) {\n\t\t\t\t\t\t// remove the comma of the next node\n\t\t\t\t\t\tconst next = parent.children[1];\n\t\t\t\t\t\tremoveEnd = next.offset;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n\t\t\t} else {\n\t\t\t\t// set value of existing property\n\t\t\t\treturn withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n\t\t\t}\n\t\t} else {\n\t\t\tif (value === undefined) { // delete\n\t\t\t\treturn []; // property does not exist, nothing to do\n\t\t\t}\n\t\t\tconst newProperty = `${JSON.stringify(lastSegment)}: ${JSON.stringify(value)}`;\n\t\t\tconst index = getInsertionIndex ? getInsertionIndex(parent.children.map(p => p.children![0].value)) : parent.children.length;\n\t\t\tlet edit: Edit;\n\t\t\tif (index > 0) {\n\t\t\t\tconst previous = parent.children[index - 1];\n\t\t\t\tedit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n\t\t\t} else if (parent.children.length === 0) {\n\t\t\t\tedit = { offset: parent.offset + 1, length: 0, content: newProperty };\n\t\t\t} else {\n\t\t\t\tedit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n\t\t\t}\n\t\t\treturn withFormatting(text, edit, formattingOptions);\n\t\t}\n\t} else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n\t\tif (value !== undefined) {\n\t\t\t// Insert\n\t\t\tconst newProperty = `${JSON.stringify(value)}`;\n\t\t\tlet edit: Edit;\n\t\t\tif (parent.children.length === 0 || lastSegment === 0) {\n\t\t\t\tedit = { offset: parent.offset + 1, length: 0, content: parent.children.length === 0 ? newProperty : newProperty + ',' };\n\t\t\t} else {\n\t\t\t\tconst index = lastSegment === -1 || lastSegment > parent.children.length ? parent.children.length : lastSegment;\n\t\t\t\tconst previous = parent.children[index - 1];\n\t\t\t\tedit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n\t\t\t}\n\t\t\treturn withFormatting(text, edit, formattingOptions);\n\t\t} else {\n\t\t\t//Removal\n\t\t\tconst removalIndex = lastSegment;\n\t\t\tconst toRemove = parent.children[removalIndex];\n\t\t\tlet edit: Edit;\n\t\t\tif (parent.children.length === 1) {\n\t\t\t\t// only item\n\t\t\t\tedit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n\t\t\t} else if (parent.children.length - 1 === removalIndex) {\n\t\t\t\t// last item\n\t\t\t\tconst previous = parent.children[removalIndex - 1];\n\t\t\t\tconst offset = previous.offset + previous.length;\n\t\t\t\tconst parentEndOffset = parent.offset + parent.length;\n\t\t\t\tedit = { offset, length: parentEndOffset - 2 - offset, content: '' };\n\t\t\t} else {\n\t\t\t\tedit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n\t\t\t}\n\t\t\treturn withFormatting(text, edit, formattingOptions);\n\t\t}\n\t} else {\n\t\tthrow new Error(`Can not add ${typeof lastSegment !== 'number' ? 'index' : 'property'} to parent of type ${parent.type}`);\n\t}\n}\n\nexport function withFormatting(text: string, edit: Edit, formattingOptions: FormattingOptions): Edit[] {\n\t// apply the edit\n\tlet newText = applyEdit(text, edit);\n\n\t// format the new text\n\tlet begin = edit.offset;\n\tlet end = edit.offset + edit.content.length;\n\tif (edit.length === 0 || edit.content.length === 0) { // insert or remove\n\t\twhile (begin > 0 && !isEOL(newText, begin - 1)) {\n\t\t\tbegin--;\n\t\t}\n\t\twhile (end < newText.length && !isEOL(newText, end)) {\n\t\t\tend++;\n\t\t}\n\t}\n\n\tconst edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n\n\t// apply the formatting edits and track the begin and end offsets of the changes\n\tfor (let i = edits.length - 1; i >= 0; i--) {\n\t\tconst curr = edits[i];\n\t\tnewText = applyEdit(newText, curr);\n\t\tbegin = Math.min(begin, curr.offset);\n\t\tend = Math.max(end, curr.offset + curr.length);\n\t\tend += curr.content.length - curr.length;\n\t}\n\t// create a single edit with all changes\n\tconst editLength = text.length - (newText.length - end) - begin;\n\treturn [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\n\nexport function applyEdit(text: string, edit: Edit): string {\n\treturn text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\n\nexport function applyEdits(text: string, edits: Edit[]): string {\n\tconst sortedEdits = edits.slice(0).sort((a, b) => {\n\t\tconst diff = a.offset - b.offset;\n\t\tif (diff === 0) {\n\t\t\treturn a.length - b.length;\n\t\t}\n\t\treturn diff;\n\t});\n\tlet lastModifiedOffset = text.length;\n\tfor (let i = sortedEdits.length - 1; i >= 0; i--) {\n\t\tconst e = sortedEdits[i];\n\t\tif (e.offset + e.length <= lastModifiedOffset) {\n\t\t\ttext = applyEdit(text, e);\n\t\t} else {\n\t\t\tthrow new Error('Overlapping edit');\n\t\t}\n\t\tlastModifiedOffset = e.offset;\n\t}\n\treturn text;\n}\n"],
  "mappings": "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",
  "names": []
}
