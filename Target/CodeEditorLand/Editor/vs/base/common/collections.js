function i(s,e){let t=Object.create(null);for(let r of s){let o=e(r),n=t[o];n||(n=t[o]=[]),n.push(r)}return t}function l(s,e){let t=[],r=[];for(let o of s)e.has(o)||t.push(o);for(let o of e)s.has(o)||r.push(o);return{removed:t,added:r}}function c(s,e){let t=[],r=[];for(let[o,n]of s)e.has(o)||t.push(n);for(let[o,n]of e)s.has(o)||r.push(n);return{removed:t,added:r}}function d(s,e){let t=new Set;for(let r of e)s.has(r)&&t.add(r);return t}var a=class{constructor(e,t){this.toKey=t;for(let r of e)this.add(r)}_map=new Map;get size(){return this._map.size}add(e){let t=this.toKey(e);return this._map.set(t,e),this}delete(e){return this._map.delete(this.toKey(e))}has(e){return this._map.has(this.toKey(e))}*entries(){for(let e of this._map.values())yield[e,e]}keys(){return this.values()}*values(){for(let e of this._map.values())yield e}clear(){this._map.clear()}forEach(e,t){this._map.forEach(r=>e.call(t,r,r,this))}[Symbol.iterator](){return this.values()}[Symbol.toStringTag]="SetWithKey"};export{a as SetWithKey,c as diffMaps,l as diffSets,i as groupBy,d as intersection};
