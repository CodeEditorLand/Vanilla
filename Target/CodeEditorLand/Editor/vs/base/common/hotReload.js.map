{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/hotReload.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from './lifecycle.js';\nimport { env } from './process.js';\n\nfunction hotReloadDisabled() {\n\treturn true; // TODO@hediet fix hot reload.\n}\n\nexport function isHotReloadEnabled(): boolean {\n\treturn !hotReloadDisabled() && env && !!env['VSCODE_DEV'];\n}\nexport function registerHotReloadHandler(handler: HotReloadHandler): IDisposable {\n\tif (!isHotReloadEnabled()) {\n\t\treturn { dispose() { } };\n\t} else {\n\t\tconst handlers = registerGlobalHotReloadHandler();\n\t\thandlers.add(handler);\n\t\treturn {\n\t\t\tdispose() { handlers.delete(handler); }\n\t\t};\n\t}\n}\n\n/**\n * Takes the old exports of the module to reload and returns a function to apply the new exports.\n * If `undefined` is returned, this handler is not able to handle the module.\n *\n * If no handler can apply the new exports, the module will not be reloaded.\n */\nexport type HotReloadHandler = (args: { oldExports: Record<string, unknown>; newSrc: string; config: IHotReloadConfig }) => AcceptNewExportsHandler | undefined;\nexport type AcceptNewExportsHandler = (newExports: Record<string, unknown>) => boolean;\nexport type IHotReloadConfig = HotReloadConfig;\n\nfunction registerGlobalHotReloadHandler() {\n\tif (!hotReloadHandlers) {\n\t\thotReloadHandlers = new Set();\n\t}\n\n\tconst g = globalThis as unknown as GlobalThisAddition;\n\tif (!g.$hotReload_applyNewExports) {\n\t\tg.$hotReload_applyNewExports = args => {\n\t\t\tconst args2 = { config: { mode: undefined }, ...args };\n\n\t\t\tconst results: AcceptNewExportsHandler[] = [];\n\t\t\tfor (const h of hotReloadHandlers!) {\n\t\t\t\tconst result = h(args2);\n\t\t\t\tif (result) {\n\t\t\t\t\tresults.push(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (results.length > 0) {\n\t\t\t\treturn newExports => {\n\t\t\t\t\tlet result = false;\n\t\t\t\t\tfor (const r of results) {\n\t\t\t\t\t\tif (r(newExports)) {\n\t\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n\n\treturn hotReloadHandlers;\n}\n\nlet hotReloadHandlers: Set<(args: { oldExports: Record<string, unknown>; newSrc: string; config: HotReloadConfig }) => AcceptNewExportsFn | undefined> | undefined = undefined;\n\ninterface HotReloadConfig {\n\tmode?: 'patch-prototype' | undefined;\n}\n\ninterface GlobalThisAddition {\n\t$hotReload_applyNewExports?(args: { oldExports: Record<string, unknown>; newSrc: string; config?: HotReloadConfig }): AcceptNewExportsFn | undefined;\n}\n\ntype AcceptNewExportsFn = (newExports: Record<string, unknown>) => boolean;\n\nif (isHotReloadEnabled()) {\n\t// This code does not run in production.\n\tregisterHotReloadHandler(({ oldExports, newSrc, config }) => {\n\t\tif (config.mode !== 'patch-prototype') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn newExports => {\n\t\t\tfor (const key in newExports) {\n\t\t\t\tconst exportedItem = newExports[key];\n\t\t\t\tconsole.log(`[hot-reload] Patching prototype methods of '${key}'`, { exportedItem });\n\t\t\t\tif (typeof exportedItem === 'function' && exportedItem.prototype) {\n\t\t\t\t\tconst oldExportedItem = oldExports[key];\n\t\t\t\t\tif (oldExportedItem) {\n\t\t\t\t\t\tfor (const prop of Object.getOwnPropertyNames(exportedItem.prototype)) {\n\t\t\t\t\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(exportedItem.prototype, prop)!;\n\t\t\t\t\t\t\tconst oldDescriptor = Object.getOwnPropertyDescriptor((oldExportedItem as any).prototype, prop);\n\n\t\t\t\t\t\t\tif (descriptor?.value?.toString() !== oldDescriptor?.value?.toString()) {\n\t\t\t\t\t\t\t\tconsole.log(`[hot-reload] Patching prototype method '${key}.${prop}'`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tObject.defineProperty((oldExportedItem as any).prototype, prop, descriptor);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewExports[key] = oldExportedItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t});\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AAEpB,SAAS,oBAAoB;AAC5B,SAAO;AACR;AAFS;AAIF,SAAS,qBAA8B;AAC7C,SAAO,CAAC,kBAAkB,KAAK,OAAO,CAAC,CAAC,IAAI,YAAY;AACzD;AAFgB;AAGT,SAAS,yBAAyB,SAAwC;AAChF,MAAI,CAAC,mBAAmB,GAAG;AAC1B,WAAO,EAAE,UAAU;AAAA,IAAE,EAAE;AAAA,EACxB,OAAO;AACN,UAAM,WAAW,+BAA+B;AAChD,aAAS,IAAI,OAAO;AACpB,WAAO;AAAA,MACN,UAAU;AAAE,iBAAS,OAAO,OAAO;AAAA,MAAG;AAAA,IACvC;AAAA,EACD;AACD;AAVgB;AAsBhB,SAAS,iCAAiC;AACzC,MAAI,CAAC,mBAAmB;AACvB,wBAAoB,oBAAI,IAAI;AAAA,EAC7B;AAEA,QAAM,IAAI;AACV,MAAI,CAAC,EAAE,4BAA4B;AAClC,MAAE,6BAA6B,UAAQ;AACtC,YAAM,QAAQ,EAAE,QAAQ,EAAE,MAAM,OAAU,GAAG,GAAG,KAAK;AAErD,YAAM,UAAqC,CAAC;AAC5C,iBAAW,KAAK,mBAAoB;AACnC,cAAM,SAAS,EAAE,KAAK;AACtB,YAAI,QAAQ;AACX,kBAAQ,KAAK,MAAM;AAAA,QACpB;AAAA,MACD;AACA,UAAI,QAAQ,SAAS,GAAG;AACvB,eAAO,gBAAc;AACpB,cAAI,SAAS;AACb,qBAAW,KAAK,SAAS;AACxB,gBAAI,EAAE,UAAU,GAAG;AAClB,uBAAS;AAAA,YACV;AAAA,UACD;AACA,iBAAO;AAAA,QACR;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAjCS;AAmCT,IAAI,oBAAiK;AAYrK,IAAI,mBAAmB,GAAG;AAEzB,2BAAyB,CAAC,EAAE,YAAY,QAAQ,OAAO,MAAM;AAC5D,QAAI,OAAO,SAAS,mBAAmB;AACtC,aAAO;AAAA,IACR;AAEA,WAAO,gBAAc;AACpB,iBAAW,OAAO,YAAY;AAC7B,cAAM,eAAe,WAAW,GAAG;AACnC,gBAAQ,IAAI,+CAA+C,GAAG,KAAK,EAAE,aAAa,CAAC;AACnF,YAAI,OAAO,iBAAiB,cAAc,aAAa,WAAW;AACjE,gBAAM,kBAAkB,WAAW,GAAG;AACtC,cAAI,iBAAiB;AACpB,uBAAW,QAAQ,OAAO,oBAAoB,aAAa,SAAS,GAAG;AACtE,oBAAM,aAAa,OAAO,yBAAyB,aAAa,WAAW,IAAI;AAC/E,oBAAM,gBAAgB,OAAO,yBAA0B,gBAAwB,WAAW,IAAI;AAE9F,kBAAI,YAAY,OAAO,SAAS,MAAM,eAAe,OAAO,SAAS,GAAG;AACvE,wBAAQ,IAAI,2CAA2C,GAAG,IAAI,IAAI,GAAG;AAAA,cACtE;AAEA,qBAAO,eAAgB,gBAAwB,WAAW,MAAM,UAAU;AAAA,YAC3E;AACA,uBAAW,GAAG,IAAI;AAAA,UACnB;AAAA,QACD;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD,CAAC;AACF;",
  "names": []
}
