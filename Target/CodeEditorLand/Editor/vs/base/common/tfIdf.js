import"../../../vs/base/common/cancellation.js";function a(m){const t=new Map;for(const e of m)t.set(e,(t.get(e)??0)+1);return t}class f{calculateScores(t,e){const r=this.computeEmbedding(t),c=new Map,n=[];for(const[s,u]of this.documents){if(e.isCancellationRequested)return[];for(const o of u.chunks){const i=this.computeSimilarityScore(o,r,c);i>0&&n.push({key:s,score:i})}}return n}static termFrequencies(t){return a(f.splitTerms(t))}static*splitTerms(t){const e=r=>r.toLowerCase();for(const[r]of t.matchAll(/\b\p{Letter}[\p{Letter}\d]{2,}\b/gu)){yield e(r);const c=r.replace(/([a-z])([A-Z])/g,"$1 $2").split(/\s+/g);if(c.length>1)for(const n of c)n.length>2&&/\p{Letter}{3,}/gu.test(n)&&(yield e(n))}}chunkCount=0;chunkOccurrences=new Map;documents=new Map;updateDocuments(t){for(const{key:e}of t)this.deleteDocument(e);for(const e of t){const r=[];for(const c of e.textChunks){const n=f.termFrequencies(c);for(const s of n.keys())this.chunkOccurrences.set(s,(this.chunkOccurrences.get(s)??0)+1);r.push({text:c,tf:n})}this.chunkCount+=r.length,this.documents.set(e.key,{chunks:r})}return this}deleteDocument(t){const e=this.documents.get(t);if(e){this.documents.delete(t),this.chunkCount-=e.chunks.length;for(const r of e.chunks)for(const c of r.tf.keys()){const n=this.chunkOccurrences.get(c);if(typeof n=="number"){const s=n-1;s<=0?this.chunkOccurrences.delete(c):this.chunkOccurrences.set(c,s)}}}}computeSimilarityScore(t,e,r){let c=0;for(const[n,s]of Object.entries(e)){const u=t.tf.get(n);if(!u)continue;let o=r.get(n);typeof o!="number"&&(o=this.computeIdf(n),r.set(n,o));const i=u*o;c+=i*s}return c}computeEmbedding(t){const e=f.termFrequencies(t);return this.computeTfidf(e)}computeIdf(t){const e=this.chunkOccurrences.get(t)??0;return e>0?Math.log((this.chunkCount+1)/e):0}computeTfidf(t){const e=Object.create(null);for(const[r,c]of t){const n=this.computeIdf(r);n>0&&(e[r]=c*n)}return e}}function p(m){const t=m.slice(0);t.sort((r,c)=>c.score-r.score);const e=t[0]?.score??0;if(e>0)for(const r of t)r.score/=e;return t}export{f as TfIdfCalculator,p as normalizeTfIdfScores};
