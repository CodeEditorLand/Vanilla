{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/naturalLanguage/korean.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// allow-any-unicode-comment-file\n\n/**\n * Gets alternative Korean characters for the character code. This will return the ascii\n * character code(s) that a Hangul character may have been input with using a qwerty layout.\n *\n * This only aims to cover modern (not archaic) Hangul syllables.\n *\n * @param code The character code to get alternate characters for\n */\nexport function getKoreanAltChars(code: number): ArrayLike<number> | undefined {\n\tconst result = disassembleKorean(code);\n\tif (result && result.length > 0) {\n\t\treturn new Uint32Array(result);\n\t}\n\treturn undefined;\n}\n\nlet codeBufferLength = 0;\nconst codeBuffer = new Uint32Array(10);\nfunction disassembleKorean(code: number): Uint32Array | undefined {\n\tcodeBufferLength = 0;\n\n\t// Initial consonants (\uCD08\uC131)\n\tgetCodesFromArray(code, modernConsonants, HangulRangeStartCode.InitialConsonant);\n\tif (codeBufferLength > 0) {\n\t\treturn codeBuffer.subarray(0, codeBufferLength);\n\t}\n\n\t// Vowels (\uC911\uC131)\n\tgetCodesFromArray(code, modernVowels, HangulRangeStartCode.Vowel);\n\tif (codeBufferLength > 0) {\n\t\treturn codeBuffer.subarray(0, codeBufferLength);\n\t}\n\n\t// Final consonants (\uC885\uC131)\n\tgetCodesFromArray(code, modernFinalConsonants, HangulRangeStartCode.FinalConsonant);\n\tif (codeBufferLength > 0) {\n\t\treturn codeBuffer.subarray(0, codeBufferLength);\n\t}\n\n\t// Hangul Compatibility Jamo\n\tgetCodesFromArray(code, compatibilityJamo, HangulRangeStartCode.CompatibilityJamo);\n\tif (codeBufferLength) {\n\t\treturn codeBuffer.subarray(0, codeBufferLength);\n\t}\n\n\t// Hangul Syllables\n\tif (code >= 0xAC00 && code <= 0xD7A3) {\n\t\tconst hangulIndex = code - 0xAC00;\n\t\tconst vowelAndFinalConsonantProduct = hangulIndex % 588;\n\n\t\t// 0-based starting at 0x1100\n\t\tconst initialConsonantIndex = Math.floor(hangulIndex / 588);\n\t\t// 0-based starting at 0x1161\n\t\tconst vowelIndex = Math.floor(vowelAndFinalConsonantProduct / 28);\n\t\t// 0-based starting at 0x11A8\n\t\t// Subtract 1 as the standard algorithm uses the 0 index to represent no\n\t\t// final consonant\n\t\tconst finalConsonantIndex = vowelAndFinalConsonantProduct % 28 - 1;\n\n\t\tif (initialConsonantIndex < modernConsonants.length) {\n\t\t\tgetCodesFromArray(initialConsonantIndex, modernConsonants, 0);\n\t\t} else if (HangulRangeStartCode.InitialConsonant + initialConsonantIndex - HangulRangeStartCode.CompatibilityJamo < compatibilityJamo.length) {\n\t\t\tgetCodesFromArray(HangulRangeStartCode.InitialConsonant + initialConsonantIndex, compatibilityJamo, HangulRangeStartCode.CompatibilityJamo);\n\t\t}\n\n\t\tif (vowelIndex < modernVowels.length) {\n\t\t\tgetCodesFromArray(vowelIndex, modernVowels, 0);\n\t\t} else if (HangulRangeStartCode.Vowel + vowelIndex - HangulRangeStartCode.CompatibilityJamo < compatibilityJamo.length) {\n\t\t\tgetCodesFromArray(HangulRangeStartCode.Vowel + vowelIndex - HangulRangeStartCode.CompatibilityJamo, compatibilityJamo, HangulRangeStartCode.CompatibilityJamo);\n\t\t}\n\n\t\tif (finalConsonantIndex >= 0) {\n\t\t\tif (finalConsonantIndex < modernFinalConsonants.length) {\n\t\t\t\tgetCodesFromArray(finalConsonantIndex, modernFinalConsonants, 0);\n\t\t\t} else if (HangulRangeStartCode.FinalConsonant + finalConsonantIndex - HangulRangeStartCode.CompatibilityJamo < compatibilityJamo.length) {\n\t\t\t\tgetCodesFromArray(HangulRangeStartCode.FinalConsonant + finalConsonantIndex - HangulRangeStartCode.CompatibilityJamo, compatibilityJamo, HangulRangeStartCode.CompatibilityJamo);\n\t\t\t}\n\t\t}\n\n\t\tif (codeBufferLength > 0) {\n\t\t\treturn codeBuffer.subarray(0, codeBufferLength);\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction getCodesFromArray(code: number, array: ArrayLike<number>, arrayStartIndex: number): void {\n\t// Verify the code is within the array's range\n\tif (code >= arrayStartIndex && code < arrayStartIndex + array.length) {\n\t\taddCodesToBuffer(array[code - arrayStartIndex]);\n\t}\n}\n\nfunction addCodesToBuffer(codes: number): void {\n\t// NUL is ignored, this is used for archaic characters to avoid using a Map\n\t// for the data\n\tif (codes === AsciiCode.NUL) {\n\t\treturn;\n\t}\n\t// Number stored in format: OptionalThirdCode << 16 | OptionalSecondCode << 8 | Code\n\tcodeBuffer[codeBufferLength++] = codes & 0xFF;\n\tif (codes >> 8) {\n\t\tcodeBuffer[codeBufferLength++] = (codes >> 8) & 0xFF;\n\t}\n\tif (codes >> 16) {\n\t\tcodeBuffer[codeBufferLength++] = (codes >> 16) & 0xFF;\n\t}\n}\n\nconst enum HangulRangeStartCode {\n\tInitialConsonant = 0x1100,\n\tVowel = 0x1161,\n\tFinalConsonant = 0x11A8,\n\tCompatibilityJamo = 0x3131,\n}\n\nconst enum AsciiCode {\n\tNUL = 0,\n\tA = 65,\n\tB = 66,\n\tC = 67,\n\tD = 68,\n\tE = 69,\n\tF = 70,\n\tG = 71,\n\tH = 72,\n\tI = 73,\n\tJ = 74,\n\tK = 75,\n\tL = 76,\n\tM = 77,\n\tN = 78,\n\tO = 79,\n\tP = 80,\n\tQ = 81,\n\tR = 82,\n\tS = 83,\n\tT = 84,\n\tU = 85,\n\tV = 86,\n\tW = 87,\n\tX = 88,\n\tY = 89,\n\tZ = 90,\n\ta = 97,\n\tb = 98,\n\tc = 99,\n\td = 100,\n\te = 101,\n\tf = 102,\n\tg = 103,\n\th = 104,\n\ti = 105,\n\tj = 106,\n\tk = 107,\n\tl = 108,\n\tm = 109,\n\tn = 110,\n\to = 111,\n\tp = 112,\n\tq = 113,\n\tr = 114,\n\ts = 115,\n\tt = 116,\n\tu = 117,\n\tv = 118,\n\tw = 119,\n\tx = 120,\n\ty = 121,\n\tz = 122,\n}\n\n/**\n * Numbers that represent multiple ascii codes. These are precomputed at compile time to reduce\n * bundle and runtime overhead.\n */\nconst enum AsciiCodeCombo {\n\tfa = AsciiCode.a << 8 | AsciiCode.f,\n\tfg = AsciiCode.g << 8 | AsciiCode.f,\n\tfq = AsciiCode.q << 8 | AsciiCode.f,\n\tfr = AsciiCode.r << 8 | AsciiCode.f,\n\tft = AsciiCode.t << 8 | AsciiCode.f,\n\tfv = AsciiCode.v << 8 | AsciiCode.f,\n\tfx = AsciiCode.x << 8 | AsciiCode.f,\n\thk = AsciiCode.k << 8 | AsciiCode.h,\n\thl = AsciiCode.l << 8 | AsciiCode.h,\n\tho = AsciiCode.o << 8 | AsciiCode.h,\n\tml = AsciiCode.l << 8 | AsciiCode.m,\n\tnj = AsciiCode.j << 8 | AsciiCode.n,\n\tnl = AsciiCode.l << 8 | AsciiCode.n,\n\tnp = AsciiCode.p << 8 | AsciiCode.n,\n\tqt = AsciiCode.t << 8 | AsciiCode.q,\n\trt = AsciiCode.t << 8 | AsciiCode.r,\n\tsg = AsciiCode.g << 8 | AsciiCode.s,\n\tsw = AsciiCode.w << 8 | AsciiCode.s,\n}\n\n/**\n * Hangul Jamo - Modern consonants #1\n *\n * Range U+1100..U+1112\n *\n * |        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F |\n * |--------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n * | U+110x | \u1100 | \u1101 | \u1102 | \u1103 | \u1104 | \u1105 | \u1106 | \u1107 | \u1108 | \u1109 | \u110A | \u110B | \u110C | \u110D | \u110E | \u110F |\n * | U+111x | \u1110 | \u1111 | \u1112 |\n */\nconst modernConsonants = new Uint8Array([\n\tAsciiCode.r, // \u3131\n\tAsciiCode.R, // \u3132\n\tAsciiCode.s, // \u3134\n\tAsciiCode.e, // \u3137\n\tAsciiCode.E, // \u3138\n\tAsciiCode.f, // \u3139\n\tAsciiCode.a, // \u3141\n\tAsciiCode.q, // \u3142\n\tAsciiCode.Q, // \u3143\n\tAsciiCode.t, // \u3145\n\tAsciiCode.T, // \u3146\n\tAsciiCode.d, // \u3147\n\tAsciiCode.w, // \u3148\n\tAsciiCode.W, // \u3149\n\tAsciiCode.c, // \u314A\n\tAsciiCode.z, // \u314B\n\tAsciiCode.x, // \u314C\n\tAsciiCode.v, // \u314D\n\tAsciiCode.g, // \u314E\n]);\n\n/**\n * Hangul Jamo - Modern Vowels\n *\n * Range U+1161..U+1175\n *\n * |        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F |\n * |--------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n * | U+116x |   | \u1161 | \u1162 | \u1163 | \u1164 | \u1165 | \u1166 | \u1167 | \u1168 | \u1169 | \u116A | \u116B | \u116C | \u116D | \u116E | \u116F |\n * | U+117x | \u1170 | \u1171 | \u1172 | \u1173 | \u1174 | \u1175 |\n */\nconst modernVowels = new Uint16Array([\n\tAsciiCode.k,       //  -> \u314F\n\tAsciiCode.o,       //  -> \u3150\n\tAsciiCode.i,       //  -> \u3151\n\tAsciiCode.O,       //  -> \u3152\n\tAsciiCode.j,       //  -> \u3153\n\tAsciiCode.p,       //  -> \u3154\n\tAsciiCode.u,       //  -> \u3155\n\tAsciiCode.P,       //  -> \u3156\n\tAsciiCode.h,       //  -> \u3157\n\tAsciiCodeCombo.hk, //  -> \u3158\n\tAsciiCodeCombo.ho, //  -> \u3159\n\tAsciiCodeCombo.hl, //  -> \u315A\n\tAsciiCode.y,       //  -> \u315B\n\tAsciiCode.n,       //  -> \u315C\n\tAsciiCodeCombo.nj, //  -> \u315D\n\tAsciiCodeCombo.np, //  -> \u315E\n\tAsciiCodeCombo.nl, //  -> \u315F\n\tAsciiCode.b,       //  -> \u3160\n\tAsciiCode.m,       //  -> \u3161\n\tAsciiCodeCombo.ml, //  -> \u3162\n\tAsciiCode.l,       //  -> \u3163\n]);\n\n/**\n * Hangul Jamo - Modern Consonants #2\n *\n * Range U+11A8..U+11C2\n *\n * |        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F |\n * |--------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n * | U+11Ax |   |   |   |   |   |   |   |   | \u11A8 | \u11A9 | \u11AA | \u11AB | \u11AC | \u11AD | \u11AE | \u11AF |\n * | U+11Bx | \u11B0 | \u11B1 | \u11B2 | \u11B3 | \u11B4 | \u11B5 | \u11B6 | \u11B7 | \u11B8 | \u11B9 | \u11BA | \u11BB | \u11BC | \u11BD | \u11BE | \u11BF |\n * | U+11Cx | \u11C0 | \u11C1 | \u11C2 |\n */\nconst modernFinalConsonants = new Uint16Array([\n\tAsciiCode.r,       // \u3131\n\tAsciiCode.R,       // \u3132\n\tAsciiCodeCombo.rt, // \u3133\n\tAsciiCode.s,       // \u3134\n\tAsciiCodeCombo.sw, // \u3135\n\tAsciiCodeCombo.sg, // \u3136\n\tAsciiCode.e,       // \u3137\n\tAsciiCode.f,       // \u3139\n\tAsciiCodeCombo.fr, // \u313A\n\tAsciiCodeCombo.fa, // \u313B\n\tAsciiCodeCombo.fq, // \u313C\n\tAsciiCodeCombo.ft, // \u313D\n\tAsciiCodeCombo.fx, // \u313E\n\tAsciiCodeCombo.fv, // \u313F\n\tAsciiCodeCombo.fg, // \u3140\n\tAsciiCode.a,       // \u3141\n\tAsciiCode.q,       // \u3142\n\tAsciiCodeCombo.qt, // \u3144\n\tAsciiCode.t,       // \u3145\n\tAsciiCode.T,       // \u3146\n\tAsciiCode.d,       // \u3147\n\tAsciiCode.w,       // \u3148\n\tAsciiCode.c,       // \u314A\n\tAsciiCode.z,       // \u314B\n\tAsciiCode.x,       // \u314C\n\tAsciiCode.v,       // \u314D\n\tAsciiCode.g,       // \u314E\n]);\n\n/**\n * Hangul Compatibility Jamo\n *\n * Range U+3131..U+318F\n *\n * This includes range includes archaic jamo which we don't consider, these are\n * given the NUL character code in order to be ignored.\n *\n * |        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F |\n * |--------|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n * | U+313x |   | \u3131 | \u3132 | \u3133 | \u3134 | \u3135 | \u3136 | \u3137 | \u3138 | \u3139 | \u313A | \u313B | \u313C | \u313D | \u313E | \u313F |\n * | U+314x | \u3140 | \u3141 | \u3142 | \u3143 | \u3144 | \u3145 | \u3146 | \u3147 | \u3148 | \u3149 | \u314A | \u314B | \u314C | \u314D | \u314E | \u314F |\n * | U+315x | \u3150 | \u3151 | \u3152 | \u3153 | \u3154 | \u3155 | \u3156 | \u3157 | \u3158 | \u3159 | \u315A | \u315B | \u315C | \u315D | \u315E | \u315F |\n * | U+316x | \u3160 | \u3161 | \u3162 | \u3163 | HF | \u3165 | \u3166 | \u3167 | \u3168 | \u3169 | \u316A | \u316B | \u316C | \u316D | \u316E | \u316F |\n * | U+317x | \u3170 | \u3171 | \u3172 | \u3173 | \u3174 | \u3175 | \u3176 | \u3177 | \u3178 | \u3179 | \u317A | \u317B | \u317C | \u317D | \u317E | \u317F |\n * | U+318x | \u3180 | \u3181 | \u3182 | \u3183 | \u3184 | \u3185 | \u3186 | \u3187 | \u3188 | \u3189 | \u318A | \u318B | \u318C | \u318D | \u318E |\n */\nconst compatibilityJamo = new Uint16Array([\n\tAsciiCode.r,        // \u3131\n\tAsciiCode.R,        // \u3132\n\tAsciiCodeCombo.rt,  // \u3133\n\tAsciiCode.s,        // \u3134\n\tAsciiCodeCombo.sw,  // \u3135\n\tAsciiCodeCombo.sg,  // \u3136\n\tAsciiCode.e,        // \u3137\n\tAsciiCode.E,        // \u3138\n\tAsciiCode.f,        // \u3139\n\tAsciiCodeCombo.fr,  // \u313A\n\tAsciiCodeCombo.fa,  // \u313B\n\tAsciiCodeCombo.fq,  // \u313C\n\tAsciiCodeCombo.ft,  // \u313D\n\tAsciiCodeCombo.fx,  // \u313E\n\tAsciiCodeCombo.fv,  // \u313F\n\tAsciiCodeCombo.fg,  // \u3140\n\tAsciiCode.a,        // \u3141\n\tAsciiCode.q,        // \u3142\n\tAsciiCode.Q,        // \u3143\n\tAsciiCodeCombo.qt,  // \u3144\n\tAsciiCode.t,        // \u3145\n\tAsciiCode.T,        // \u3146\n\tAsciiCode.d,        // \u3147\n\tAsciiCode.w,        // \u3148\n\tAsciiCode.W,        // \u3149\n\tAsciiCode.c,        // \u314A\n\tAsciiCode.z,        // \u314B\n\tAsciiCode.x,        // \u314C\n\tAsciiCode.v,        // \u314D\n\tAsciiCode.g,        // \u314E\n\tAsciiCode.k,        // \u314F\n\tAsciiCode.o,        // \u3150\n\tAsciiCode.i,        // \u3151\n\tAsciiCode.O,        // \u3152\n\tAsciiCode.j,        // \u3153\n\tAsciiCode.p,        // \u3154\n\tAsciiCode.u,        // \u3155\n\tAsciiCode.P,        // \u3156\n\tAsciiCode.h,        // \u3157\n\tAsciiCodeCombo.hk,  // \u3158\n\tAsciiCodeCombo.ho,  // \u3159\n\tAsciiCodeCombo.hl,  // \u315A\n\tAsciiCode.y,        // \u315B\n\tAsciiCode.n,        // \u315C\n\tAsciiCodeCombo.nj,  // \u315D\n\tAsciiCodeCombo.np,  // \u315E\n\tAsciiCodeCombo.nl,  // \u315F\n\tAsciiCode.b,        // \u3160\n\tAsciiCode.m,        // \u3161\n\tAsciiCodeCombo.ml,  // \u3162\n\tAsciiCode.l,        // \u3163\n\t// HF: Hangul Filler (everything after this is archaic)\n\t// \u3165\n\t// \u3166\n\t// \u3167\n\t// \u3168\n\t// \u3169\n\t// \u316A\n\t// \u316B\n\t// \u316C\n\t// \u316E\n\t// \u316F\n\t// \u3170\n\t// \u3171\n\t// \u3172\n\t// \u3173\n\t// \u3174\n\t// \u3175\n\t// \u3176\n\t// \u3177\n\t// \u3178\n\t// \u3179\n\t// \u317A\n\t// \u317B\n\t// \u317C\n\t// \u317D\n\t// \u317E\n\t// \u317F\n\t// \u3180\n\t// \u3181\n\t// \u3182\n\t// \u3183\n\t// \u3184\n\t// \u3185\n\t// \u3186\n\t// \u3187\n\t// \u3188\n\t// \u3189\n\t// \u318A\n\t// \u318B\n\t// \u318C\n\t// \u318D\n\t// \u318E\n]);\n"],
  "mappings": "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
  "names": ["HangulRangeStartCode", "AsciiCode", "AsciiCodeCombo"]
}
