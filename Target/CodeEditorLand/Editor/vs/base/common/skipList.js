class f{constructor(e,r,o){this.level=e;this.key=r;this.value=o;this.forward=[]}forward}const h=void 0;class n{constructor(e,r=2**16){this.comparator=e;this._maxLevel=Math.max(1,Math.log2(r)|0),this._header=new f(this._maxLevel,h,h)}[Symbol.toStringTag]="SkipList";_maxLevel;_level=0;_header;_size=0;get size(){return this._size}clear(){this._header=new f(this._maxLevel,h,h),this._size=0}has(e){return!!n._search(this,e,this.comparator)}get(e){return n._search(this,e,this.comparator)?.value}set(e,r){return n._insert(this,e,r,this.comparator)&&(this._size+=1),this}delete(e){const r=n._delete(this,e,this.comparator);return r&&(this._size-=1),r}forEach(e,r){let o=this._header.forward[0];for(;o;)e.call(r,o.value,o.key,this),o=o.forward[0]}[Symbol.iterator](){return this.entries()}*entries(){let e=this._header.forward[0];for(;e;)yield[e.key,e.value],e=e.forward[0]}*keys(){let e=this._header.forward[0];for(;e;)yield e.key,e=e.forward[0]}*values(){let e=this._header.forward[0];for(;e;)yield e.value,e=e.forward[0]}toString(){let e="[SkipList]:",r=this._header.forward[0];for(;r;)e+=`node(${r.key}, ${r.value}, lvl:${r.level})`,r=r.forward[0];return e}static _search(e,r,o){let l=e._header;for(let t=e._level-1;t>=0;t--)for(;l.forward[t]&&o(l.forward[t].key,r)<0;)l=l.forward[t];if(l=l.forward[0],l&&o(l.key,r)===0)return l}static _insert(e,r,o,l){const t=[];let a=e._header;for(let d=e._level-1;d>=0;d--){for(;a.forward[d]&&l(a.forward[d].key,r)<0;)a=a.forward[d];t[d]=a}if(a=a.forward[0],a&&l(a.key,r)===0)return a.value=o,!1;{const d=n._randomLevel(e);if(d>e._level){for(let i=e._level;i<d;i++)t[i]=e._header;e._level=d}a=new f(d,r,o);for(let i=0;i<d;i++)a.forward[i]=t[i].forward[i],t[i].forward[i]=a;return!0}}static _randomLevel(e,r=.5){let o=1;for(;Math.random()<r&&o<e._maxLevel;)o+=1;return o}static _delete(e,r,o){const l=[];let t=e._header;for(let a=e._level-1;a>=0;a--){for(;t.forward[a]&&o(t.forward[a].key,r)<0;)t=t.forward[a];l[a]=t}if(t=t.forward[0],!t||o(t.key,r)!==0)return!1;for(let a=0;a<e._level&&l[a].forward[a]===t;a++)l[a].forward[a]=t.forward[a];for(;e._level>0&&e._header.forward[e._level-1]===h;)e._level-=1;return!0}}export{n as SkipList};
