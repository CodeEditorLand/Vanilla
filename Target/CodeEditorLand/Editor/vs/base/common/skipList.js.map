{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/skipList.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass Node<K, V> {\n\treadonly forward: Node<K, V>[];\n\tconstructor(readonly level: number, readonly key: K, public value: V) {\n\t\tthis.forward = [];\n\t}\n}\n\nconst NIL: undefined = undefined;\n\ninterface Comparator<K> {\n\t(a: K, b: K): number;\n}\n\nexport class SkipList<K, V> implements Map<K, V> {\n\n\treadonly [Symbol.toStringTag] = 'SkipList';\n\n\tprivate _maxLevel: number;\n\tprivate _level: number = 0;\n\tprivate _header: Node<K, V>;\n\tprivate _size: number = 0;\n\n\t/**\n\t *\n\t * @param capacity Capacity at which the list performs best\n\t */\n\tconstructor(\n\t\treadonly comparator: (a: K, b: K) => number,\n\t\tcapacity: number = 2 ** 16\n\t) {\n\t\tthis._maxLevel = Math.max(1, Math.log2(capacity) | 0);\n\t\tthis._header = <any>new Node(this._maxLevel, NIL, NIL);\n\t}\n\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\tclear(): void {\n\t\tthis._header = <any>new Node(this._maxLevel, NIL, NIL);\n\t\tthis._size = 0;\n\t}\n\n\thas(key: K): boolean {\n\t\treturn Boolean(SkipList._search(this, key, this.comparator));\n\t}\n\n\tget(key: K): V | undefined {\n\t\treturn SkipList._search(this, key, this.comparator)?.value;\n\t}\n\n\tset(key: K, value: V): this {\n\t\tif (SkipList._insert(this, key, value, this.comparator)) {\n\t\t\tthis._size += 1;\n\t\t}\n\t\treturn this;\n\t}\n\n\tdelete(key: K): boolean {\n\t\tconst didDelete = SkipList._delete(this, key, this.comparator);\n\t\tif (didDelete) {\n\t\t\tthis._size -= 1;\n\t\t}\n\t\treturn didDelete;\n\t}\n\n\t// --- iteration\n\n\tforEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\t\tlet node = this._header.forward[0];\n\t\twhile (node) {\n\t\t\tcallbackfn.call(thisArg, node.value, node.key, this);\n\t\t\tnode = node.forward[0];\n\t\t}\n\t}\n\n\t[Symbol.iterator](): IterableIterator<[K, V]> {\n\t\treturn this.entries();\n\t}\n\n\t*entries(): IterableIterator<[K, V]> {\n\t\tlet node = this._header.forward[0];\n\t\twhile (node) {\n\t\t\tyield [node.key, node.value];\n\t\t\tnode = node.forward[0];\n\t\t}\n\t}\n\n\t*keys(): IterableIterator<K> {\n\t\tlet node = this._header.forward[0];\n\t\twhile (node) {\n\t\t\tyield node.key;\n\t\t\tnode = node.forward[0];\n\t\t}\n\t}\n\n\t*values(): IterableIterator<V> {\n\t\tlet node = this._header.forward[0];\n\t\twhile (node) {\n\t\t\tyield node.value;\n\t\t\tnode = node.forward[0];\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\t// debug string...\n\t\tlet result = '[SkipList]:';\n\t\tlet node = this._header.forward[0];\n\t\twhile (node) {\n\t\t\tresult += `node(${node.key}, ${node.value}, lvl:${node.level})`;\n\t\t\tnode = node.forward[0];\n\t\t}\n\t\treturn result;\n\t}\n\n\t// from https://www.epaperpress.com/sortsearch/download/skiplist.pdf\n\n\tprivate static _search<K, V>(list: SkipList<K, V>, searchKey: K, comparator: Comparator<K>) {\n\t\tlet x = list._header;\n\t\tfor (let i = list._level - 1; i >= 0; i--) {\n\t\t\twhile (x.forward[i] && comparator(x.forward[i].key, searchKey) < 0) {\n\t\t\t\tx = x.forward[i];\n\t\t\t}\n\t\t}\n\t\tx = x.forward[0];\n\t\tif (x && comparator(x.key, searchKey) === 0) {\n\t\t\treturn x;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate static _insert<K, V>(list: SkipList<K, V>, searchKey: K, value: V, comparator: Comparator<K>) {\n\t\tconst update: Node<K, V>[] = [];\n\t\tlet x = list._header;\n\t\tfor (let i = list._level - 1; i >= 0; i--) {\n\t\t\twhile (x.forward[i] && comparator(x.forward[i].key, searchKey) < 0) {\n\t\t\t\tx = x.forward[i];\n\t\t\t}\n\t\t\tupdate[i] = x;\n\t\t}\n\t\tx = x.forward[0];\n\t\tif (x && comparator(x.key, searchKey) === 0) {\n\t\t\t// update\n\t\t\tx.value = value;\n\t\t\treturn false;\n\t\t} else {\n\t\t\t// insert\n\t\t\tconst lvl = SkipList._randomLevel(list);\n\t\t\tif (lvl > list._level) {\n\t\t\t\tfor (let i = list._level; i < lvl; i++) {\n\t\t\t\t\tupdate[i] = list._header;\n\t\t\t\t}\n\t\t\t\tlist._level = lvl;\n\t\t\t}\n\t\t\tx = new Node<K, V>(lvl, searchKey, value);\n\t\t\tfor (let i = 0; i < lvl; i++) {\n\t\t\t\tx.forward[i] = update[i].forward[i];\n\t\t\t\tupdate[i].forward[i] = x;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate static _randomLevel(list: SkipList<any, any>, p: number = 0.5): number {\n\t\tlet lvl = 1;\n\t\twhile (Math.random() < p && lvl < list._maxLevel) {\n\t\t\tlvl += 1;\n\t\t}\n\t\treturn lvl;\n\t}\n\n\tprivate static _delete<K, V>(list: SkipList<K, V>, searchKey: K, comparator: Comparator<K>) {\n\t\tconst update: Node<K, V>[] = [];\n\t\tlet x = list._header;\n\t\tfor (let i = list._level - 1; i >= 0; i--) {\n\t\t\twhile (x.forward[i] && comparator(x.forward[i].key, searchKey) < 0) {\n\t\t\t\tx = x.forward[i];\n\t\t\t}\n\t\t\tupdate[i] = x;\n\t\t}\n\t\tx = x.forward[0];\n\t\tif (!x || comparator(x.key, searchKey) !== 0) {\n\t\t\t// not found\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < list._level; i++) {\n\t\t\tif (update[i].forward[i] !== x) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tupdate[i].forward[i] = x.forward[i];\n\t\t}\n\t\twhile (list._level > 0 && list._header.forward[list._level - 1] === NIL) {\n\t\t\tlist._level -= 1;\n\t\t}\n\t\treturn true;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
