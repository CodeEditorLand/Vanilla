{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/observableInternal/debugName.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IDebugNameData {\n\t/**\n\t * The owner object of an observable.\n\t * Used for debugging only, such as computing a name for the observable by iterating over the fields of the owner.\n\t */\n\treadonly owner?: DebugOwner | undefined;\n\n\t/**\n\t * A string or function that returns a string that represents the name of the observable.\n\t * Used for debugging only.\n\t */\n\treadonly debugName?: DebugNameSource | undefined;\n\n\t/**\n\t * A function that points to the defining function of the object.\n\t * Used for debugging only.\n\t */\n\treadonly debugReferenceFn?: Function | undefined;\n}\n\nexport class DebugNameData {\n\tconstructor(\n\t\tpublic readonly owner: DebugOwner | undefined,\n\t\tpublic readonly debugNameSource: DebugNameSource | undefined,\n\t\tpublic readonly referenceFn: Function | undefined,\n\t) { }\n\n\tpublic getDebugName(target: object): string | undefined {\n\t\treturn getDebugName(target, this);\n\t}\n}\n\n/**\n * The owning object of an observable.\n * Is only used for debugging purposes, such as computing a name for the observable by iterating over the fields of the owner.\n */\nexport type DebugOwner = object | undefined;\nexport type DebugNameSource = string | (() => string | undefined);\n\nconst countPerName = new Map<string, number>();\nconst cachedDebugName = new WeakMap<object, string>();\n\nexport function getDebugName(target: object, data: DebugNameData): string | undefined {\n\tconst cached = cachedDebugName.get(target);\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tconst dbgName = computeDebugName(target, data);\n\tif (dbgName) {\n\t\tlet count = countPerName.get(dbgName) ?? 0;\n\t\tcount++;\n\t\tcountPerName.set(dbgName, count);\n\t\tconst result = count === 1 ? dbgName : `${dbgName}#${count}`;\n\t\tcachedDebugName.set(target, result);\n\t\treturn result;\n\t}\n\treturn undefined;\n}\n\nfunction computeDebugName(self: object, data: DebugNameData): string | undefined {\n\tconst cached = cachedDebugName.get(self);\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tconst ownerStr = data.owner ? formatOwner(data.owner) + `.` : '';\n\n\tlet result: string | undefined;\n\tconst debugNameSource = data.debugNameSource;\n\tif (debugNameSource !== undefined) {\n\t\tif (typeof debugNameSource === 'function') {\n\t\t\tresult = debugNameSource();\n\t\t\tif (result !== undefined) {\n\t\t\t\treturn ownerStr + result;\n\t\t\t}\n\t\t} else {\n\t\t\treturn ownerStr + debugNameSource;\n\t\t}\n\t}\n\n\tconst referenceFn = data.referenceFn;\n\tif (referenceFn !== undefined) {\n\t\tresult = getFunctionName(referenceFn);\n\t\tif (result !== undefined) {\n\t\t\treturn ownerStr + result;\n\t\t}\n\t}\n\n\tif (data.owner !== undefined) {\n\t\tconst key = findKey(data.owner, self);\n\t\tif (key !== undefined) {\n\t\t\treturn ownerStr + key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction findKey(obj: object, value: object): string | undefined {\n\tfor (const key in obj) {\n\t\tif ((obj as any)[key] === value) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst countPerClassName = new Map<string, number>();\nconst ownerId = new WeakMap<object, string>();\n\nfunction formatOwner(owner: object): string {\n\tconst id = ownerId.get(owner);\n\tif (id) {\n\t\treturn id;\n\t}\n\tconst className = getClassName(owner);\n\tlet count = countPerClassName.get(className) ?? 0;\n\tcount++;\n\tcountPerClassName.set(className, count);\n\tconst result = count === 1 ? className : `${className}#${count}`;\n\townerId.set(owner, result);\n\treturn result;\n}\n\nfunction getClassName(obj: object): string {\n\tconst ctor = obj.constructor;\n\tif (ctor) {\n\t\treturn ctor.name;\n\t}\n\treturn 'Object';\n}\n\nexport function getFunctionName(fn: Function): string | undefined {\n\tconst fnSrc = fn.toString();\n\t// Pattern: /** @description ... */\n\tconst regexp = /\\/\\*\\*\\s*@description\\s*([^*]*)\\*\\//;\n\tconst match = regexp.exec(fnSrc);\n\tconst result = match ? match[1] : undefined;\n\treturn result?.trim();\n}\n"],
  "mappings": ";;AAyBO,MAAM,cAAc;AAAA,EAC1B,YACiB,OACA,iBACA,aACf;AAHe;AACA;AACA;AAAA,EACb;AAAA,EA9BL,OAyB2B;AAAA;AAAA;AAAA,EAOnB,aAAa,QAAoC;AACvD,WAAO,aAAa,QAAQ,IAAI;AAAA,EACjC;AACD;AASA,MAAM,eAAe,oBAAI,IAAoB;AAC7C,MAAM,kBAAkB,oBAAI,QAAwB;AAE7C,SAAS,aAAa,QAAgB,MAAyC;AACrF,QAAM,SAAS,gBAAgB,IAAI,MAAM;AACzC,MAAI,QAAQ;AACX,WAAO;AAAA,EACR;AAEA,QAAM,UAAU,iBAAiB,QAAQ,IAAI;AAC7C,MAAI,SAAS;AACZ,QAAI,QAAQ,aAAa,IAAI,OAAO,KAAK;AACzC;AACA,iBAAa,IAAI,SAAS,KAAK;AAC/B,UAAM,SAAS,UAAU,IAAI,UAAU,GAAG,OAAO,IAAI,KAAK;AAC1D,oBAAgB,IAAI,QAAQ,MAAM;AAClC,WAAO;AAAA,EACR;AACA,SAAO;AACR;AAhBgB;AAkBhB,SAAS,iBAAiB,MAAc,MAAyC;AAChF,QAAM,SAAS,gBAAgB,IAAI,IAAI;AACvC,MAAI,QAAQ;AACX,WAAO;AAAA,EACR;AAEA,QAAM,WAAW,KAAK,QAAQ,YAAY,KAAK,KAAK,IAAI,MAAM;AAE9D,MAAI;AACJ,QAAM,kBAAkB,KAAK;AAC7B,MAAI,oBAAoB,QAAW;AAClC,QAAI,OAAO,oBAAoB,YAAY;AAC1C,eAAS,gBAAgB;AACzB,UAAI,WAAW,QAAW;AACzB,eAAO,WAAW;AAAA,MACnB;AAAA,IACD,OAAO;AACN,aAAO,WAAW;AAAA,IACnB;AAAA,EACD;AAEA,QAAM,cAAc,KAAK;AACzB,MAAI,gBAAgB,QAAW;AAC9B,aAAS,gBAAgB,WAAW;AACpC,QAAI,WAAW,QAAW;AACzB,aAAO,WAAW;AAAA,IACnB;AAAA,EACD;AAEA,MAAI,KAAK,UAAU,QAAW;AAC7B,UAAM,MAAM,QAAQ,KAAK,OAAO,IAAI;AACpC,QAAI,QAAQ,QAAW;AACtB,aAAO,WAAW;AAAA,IACnB;AAAA,EACD;AACA,SAAO;AACR;AApCS;AAsCT,SAAS,QAAQ,KAAa,OAAmC;AAChE,aAAW,OAAO,KAAK;AACtB,QAAK,IAAY,GAAG,MAAM,OAAO;AAChC,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO;AACR;AAPS;AAST,MAAM,oBAAoB,oBAAI,IAAoB;AAClD,MAAM,UAAU,oBAAI,QAAwB;AAE5C,SAAS,YAAY,OAAuB;AAC3C,QAAM,KAAK,QAAQ,IAAI,KAAK;AAC5B,MAAI,IAAI;AACP,WAAO;AAAA,EACR;AACA,QAAM,YAAY,aAAa,KAAK;AACpC,MAAI,QAAQ,kBAAkB,IAAI,SAAS,KAAK;AAChD;AACA,oBAAkB,IAAI,WAAW,KAAK;AACtC,QAAM,SAAS,UAAU,IAAI,YAAY,GAAG,SAAS,IAAI,KAAK;AAC9D,UAAQ,IAAI,OAAO,MAAM;AACzB,SAAO;AACR;AAZS;AAcT,SAAS,aAAa,KAAqB;AAC1C,QAAM,OAAO,IAAI;AACjB,MAAI,MAAM;AACT,WAAO,KAAK;AAAA,EACb;AACA,SAAO;AACR;AANS;AAQF,SAAS,gBAAgB,IAAkC;AACjE,QAAM,QAAQ,GAAG,SAAS;AAE1B,QAAM,SAAS;AACf,QAAM,QAAQ,OAAO,KAAK,KAAK;AAC/B,QAAM,SAAS,QAAQ,MAAM,CAAC,IAAI;AAClC,SAAO,QAAQ,KAAK;AACrB;AAPgB;",
  "names": []
}
