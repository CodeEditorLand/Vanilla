{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/observableInternal/api.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type ISettableObservable, ObservableValue } from \"./base.js\";\nimport { type EqualityComparer, strictEquals } from \"./commonFacade/deps.js\";\nimport { DebugNameData, type IDebugNameData } from \"./debugName.js\";\nimport { LazyObservableValue } from \"./lazyObservableValue.js\";\n\nexport function observableValueOpts<T, TChange = void>(\n\toptions: IDebugNameData & {\n\t\tequalsFn?: EqualityComparer<T>;\n\t\tlazy?: boolean;\n\t},\n\tinitialValue: T,\n): ISettableObservable<T, TChange> {\n\tif (options.lazy) {\n\t\treturn new LazyObservableValue(\n\t\t\tnew DebugNameData(options.owner, options.debugName, undefined),\n\t\t\tinitialValue,\n\t\t\toptions.equalsFn ?? strictEquals,\n\t\t);\n\t}\n\treturn new ObservableValue(\n\t\tnew DebugNameData(options.owner, options.debugName, undefined),\n\t\tinitialValue,\n\t\toptions.equalsFn ?? strictEquals,\n\t);\n}\n"],
  "mappings": ";;AAKA,SAAmC,uBAAuB;AAC1D,SAAgC,oBAAoB;AACpD,SAAS,qBAA0C;AACnD,SAAS,2BAA2B;AAE7B,SAAS,oBACf,SAIA,cACkC;AAClC,MAAI,QAAQ,MAAM;AACjB,WAAO,IAAI;AAAA,MACV,IAAI,cAAc,QAAQ,OAAO,QAAQ,WAAW,MAAS;AAAA,MAC7D;AAAA,MACA,QAAQ,YAAY;AAAA,IACrB;AAAA,EACD;AACA,SAAO,IAAI;AAAA,IACV,IAAI,cAAc,QAAQ,OAAO,QAAQ,WAAW,MAAS;AAAA,IAC7D;AAAA,IACA,QAAQ,YAAY;AAAA,EACrB;AACD;AAnBgB;",
  "names": []
}
