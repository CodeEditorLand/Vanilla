{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/observableInternal/lazyObservableValue.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tBaseObservable,\n\ttype IObserver,\n\ttype ISettableObservable,\n\ttype ITransaction,\n\tTransactionImpl,\n} from \"./base.js\";\nimport type { EqualityComparer } from \"./commonFacade/deps.js\";\nimport type { DebugNameData } from \"./debugName.js\";\n\n/**\n * Holds off updating observers until the value is actually read.\n */\nexport class LazyObservableValue<T, TChange = void>\n\textends BaseObservable<T, TChange>\n\timplements ISettableObservable<T, TChange>\n{\n\tprotected _value: T;\n\tprivate _isUpToDate = true;\n\tprivate readonly _deltas: TChange[] = [];\n\n\tget debugName() {\n\t\treturn this._debugNameData.getDebugName(this) ?? \"LazyObservableValue\";\n\t}\n\n\tconstructor(\n\t\tprivate readonly _debugNameData: DebugNameData,\n\t\tinitialValue: T,\n\t\tprivate readonly _equalityComparator: EqualityComparer<T>,\n\t) {\n\t\tsuper();\n\t\tthis._value = initialValue;\n\t}\n\n\tpublic override get(): T {\n\t\tthis._update();\n\t\treturn this._value;\n\t}\n\n\tprivate _update(): void {\n\t\tif (this._isUpToDate) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isUpToDate = true;\n\n\t\tif (this._deltas.length > 0) {\n\t\t\tfor (const observer of this.observers) {\n\t\t\t\tfor (const change of this._deltas) {\n\t\t\t\t\tobserver.handleChange(this, change);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._deltas.length = 0;\n\t\t} else {\n\t\t\tfor (const observer of this.observers) {\n\t\t\t\tobserver.handleChange(this, undefined);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _updateCounter = 0;\n\n\tprivate _beginUpdate(): void {\n\t\tthis._updateCounter++;\n\t\tif (this._updateCounter === 1) {\n\t\t\tfor (const observer of this.observers) {\n\t\t\t\tobserver.beginUpdate(this);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _endUpdate(): void {\n\t\tthis._updateCounter--;\n\t\tif (this._updateCounter === 0) {\n\t\t\tthis._update();\n\n\t\t\t// End update could change the observer list.\n\t\t\tconst observers = [...this.observers];\n\t\t\tfor (const r of observers) {\n\t\t\t\tr.endUpdate(this);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic override addObserver(observer: IObserver): void {\n\t\tconst shouldCallBeginUpdate =\n\t\t\t!this.observers.has(observer) && this._updateCounter > 0;\n\t\tsuper.addObserver(observer);\n\n\t\tif (shouldCallBeginUpdate) {\n\t\t\tobserver.beginUpdate(this);\n\t\t}\n\t}\n\n\tpublic override removeObserver(observer: IObserver): void {\n\t\tconst shouldCallEndUpdate =\n\t\t\tthis.observers.has(observer) && this._updateCounter > 0;\n\t\tsuper.removeObserver(observer);\n\n\t\tif (shouldCallEndUpdate) {\n\t\t\t// Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n\t\t\tobserver.endUpdate(this);\n\t\t}\n\t}\n\n\tpublic set(value: T, tx: ITransaction | undefined, change: TChange): void {\n\t\tif (\n\t\t\tchange === undefined &&\n\t\t\tthis._equalityComparator(this._value, value)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet _tx: TransactionImpl | undefined;\n\t\tif (!tx) {\n\t\t\ttx = _tx = new TransactionImpl(\n\t\t\t\t() => {},\n\t\t\t\t() => `Setting ${this.debugName}`,\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tthis._isUpToDate = false;\n\t\t\tthis._setValue(value);\n\t\t\tif (change !== undefined) {\n\t\t\t\tthis._deltas.push(change);\n\t\t\t}\n\n\t\t\ttx.updateObserver(\n\t\t\t\t{\n\t\t\t\t\tbeginUpdate: () => this._beginUpdate(),\n\t\t\t\t\tendUpdate: () => this._endUpdate(),\n\t\t\t\t\thandleChange: (observable, change) => {},\n\t\t\t\t\thandlePossibleChange: (observable) => {},\n\t\t\t\t},\n\t\t\t\tthis,\n\t\t\t);\n\n\t\t\tif (this._updateCounter > 1) {\n\t\t\t\t// We already started begin/end update, so we need to manually call handlePossibleChange\n\t\t\t\tfor (const observer of this.observers) {\n\t\t\t\t\tobserver.handlePossibleChange(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_tx) {\n\t\t\t\t_tx.finish();\n\t\t\t}\n\t\t}\n\t}\n\n\toverride toString(): string {\n\t\treturn `${this.debugName}: ${this._value}`;\n\t}\n\n\tprotected _setValue(newValue: T): void {\n\t\tthis._value = newValue;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["change"]
}
