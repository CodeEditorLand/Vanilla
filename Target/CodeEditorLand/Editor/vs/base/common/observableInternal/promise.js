import{observableValue as a,transaction as u}from"./base.js";import{derived as o}from"./derived.js";class n{constructor(e){this._computeValue=e}_value=a(this,void 0);get cachedValue(){return this._value}getValue(){let e=this._value.get();return e||(e=this._computeValue(),this._value.set(e,void 0)),e}}class i{static fromFn(e){return new i(e())}_value=a(this,void 0);promise;promiseResult=this._value;constructor(e){this.promise=e.then(r=>(u(t=>{this._value.set(new l(r,void 0),t)}),r),r=>{throw u(t=>{this._value.set(new l(void 0,r),t)}),r})}}class l{constructor(e,r){this.data=e;this.error=r}getDataOrThrow(){if(this.error)throw this.error;return this.data}}class m{constructor(e){this._computePromise=e}_lazyValue=new n(()=>new i(this._computePromise()));cachedPromiseResult=o(this,e=>this._lazyValue.cachedValue.read(e)?.promiseResult.read(e));getPromise(){return this._lazyValue.getValue().promise}}export{n as ObservableLazy,m as ObservableLazyPromise,i as ObservablePromise,l as PromiseResult};
