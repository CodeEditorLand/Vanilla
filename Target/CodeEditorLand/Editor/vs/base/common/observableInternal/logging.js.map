{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/observableInternal/logging.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { AutorunObserver } from \"./autorun.js\";\nimport type { IObservable, ObservableValue, TransactionImpl } from \"./base.js\";\nimport type { Derived } from \"./derived.js\";\nimport type { FromEventObservable } from \"./utils.js\";\n\nlet globalObservableLogger: IObservableLogger | undefined;\n\nexport function setLogger(logger: IObservableLogger): void {\n\tglobalObservableLogger = logger;\n}\n\nexport function getLogger(): IObservableLogger | undefined {\n\treturn globalObservableLogger;\n}\n\ninterface IChangeInformation {\n\toldValue: unknown;\n\tnewValue: unknown;\n\tchange: unknown;\n\tdidChange: boolean;\n\thadValue: boolean;\n}\n\nexport interface IObservableLogger {\n\thandleObservableChanged(\n\t\tobservable: ObservableValue<any, any>,\n\t\tinfo: IChangeInformation,\n\t): void;\n\thandleFromEventObservableTriggered(\n\t\tobservable: FromEventObservable<any, any>,\n\t\tinfo: IChangeInformation,\n\t): void;\n\n\thandleAutorunCreated(autorun: AutorunObserver): void;\n\thandleAutorunTriggered(autorun: AutorunObserver): void;\n\thandleAutorunFinished(autorun: AutorunObserver): void;\n\n\thandleDerivedCreated(observable: Derived<any>): void;\n\thandleDerivedRecomputed(\n\t\tobservable: Derived<any>,\n\t\tinfo: IChangeInformation,\n\t): void;\n\n\thandleBeginTransaction(transaction: TransactionImpl): void;\n\thandleEndTransaction(): void;\n}\n\nexport class ConsoleObservableLogger implements IObservableLogger {\n\tprivate indentation = 0;\n\n\tprivate textToConsoleArgs(text: ConsoleText): unknown[] {\n\t\treturn consoleTextToArgs([\n\t\t\tnormalText(repeat(\"|  \", this.indentation)),\n\t\t\ttext,\n\t\t]);\n\t}\n\n\tprivate formatInfo(info: IChangeInformation): ConsoleText[] {\n\t\tif (!info.hadValue) {\n\t\t\treturn [\n\t\t\t\tnormalText(` `),\n\t\t\t\tstyled(formatValue(info.newValue, 60), {\n\t\t\t\t\tcolor: \"green\",\n\t\t\t\t}),\n\t\t\t\tnormalText(` (initial)`),\n\t\t\t];\n\t\t}\n\t\treturn info.didChange\n\t\t\t? [\n\t\t\t\t\tnormalText(` `),\n\t\t\t\t\tstyled(formatValue(info.oldValue, 70), {\n\t\t\t\t\t\tcolor: \"red\",\n\t\t\t\t\t\tstrikeThrough: true,\n\t\t\t\t\t}),\n\t\t\t\t\tnormalText(` `),\n\t\t\t\t\tstyled(formatValue(info.newValue, 60), {\n\t\t\t\t\t\tcolor: \"green\",\n\t\t\t\t\t}),\n\t\t\t\t]\n\t\t\t: [normalText(` (unchanged)`)];\n\t}\n\n\thandleObservableChanged(\n\t\tobservable: IObservable<unknown, unknown>,\n\t\tinfo: IChangeInformation,\n\t): void {\n\t\tconsole.log(\n\t\t\t...this.textToConsoleArgs([\n\t\t\t\tformatKind(\"observable value changed\"),\n\t\t\t\tstyled(observable.debugName, { color: \"BlueViolet\" }),\n\t\t\t\t...this.formatInfo(info),\n\t\t\t]),\n\t\t);\n\t}\n\n\tprivate readonly changedObservablesSets = new WeakMap<\n\t\tobject,\n\t\tSet<IObservable<any, any>>\n\t>();\n\n\tformatChanges(\n\t\tchanges: Set<IObservable<any, any>>,\n\t): ConsoleText | undefined {\n\t\tif (changes.size === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn styled(\n\t\t\t\" (changed deps: \" +\n\t\t\t\t[...changes].map((o) => o.debugName).join(\", \") +\n\t\t\t\t\")\",\n\t\t\t{ color: \"gray\" },\n\t\t);\n\t}\n\n\thandleDerivedCreated(derived: Derived<unknown>): void {\n\t\tconst existingHandleChange = derived.handleChange;\n\t\tthis.changedObservablesSets.set(derived, new Set());\n\t\tderived.handleChange = (observable, change) => {\n\t\t\tthis.changedObservablesSets.get(derived)!.add(observable);\n\t\t\treturn existingHandleChange.apply(derived, [observable, change]);\n\t\t};\n\t}\n\n\thandleDerivedRecomputed(\n\t\tderived: Derived<unknown>,\n\t\tinfo: IChangeInformation,\n\t): void {\n\t\tconst changedObservables = this.changedObservablesSets.get(derived)!;\n\t\tconsole.log(\n\t\t\t...this.textToConsoleArgs([\n\t\t\t\tformatKind(\"derived recomputed\"),\n\t\t\t\tstyled(derived.debugName, { color: \"BlueViolet\" }),\n\t\t\t\t...this.formatInfo(info),\n\t\t\t\tthis.formatChanges(changedObservables),\n\t\t\t\t{\n\t\t\t\t\tdata: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfn:\n\t\t\t\t\t\t\t\tderived._debugNameData.referenceFn ??\n\t\t\t\t\t\t\t\tderived._computeFn,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t]),\n\t\t);\n\t\tchangedObservables.clear();\n\t}\n\n\thandleFromEventObservableTriggered(\n\t\tobservable: FromEventObservable<any, any>,\n\t\tinfo: IChangeInformation,\n\t): void {\n\t\tconsole.log(\n\t\t\t...this.textToConsoleArgs([\n\t\t\t\tformatKind(\"observable from event triggered\"),\n\t\t\t\tstyled(observable.debugName, { color: \"BlueViolet\" }),\n\t\t\t\t...this.formatInfo(info),\n\t\t\t\t{ data: [{ fn: observable._getValue }] },\n\t\t\t]),\n\t\t);\n\t}\n\n\thandleAutorunCreated(autorun: AutorunObserver): void {\n\t\tconst existingHandleChange = autorun.handleChange;\n\t\tthis.changedObservablesSets.set(autorun, new Set());\n\t\tautorun.handleChange = (observable, change) => {\n\t\t\tthis.changedObservablesSets.get(autorun)!.add(observable);\n\t\t\treturn existingHandleChange.apply(autorun, [observable, change]);\n\t\t};\n\t}\n\n\thandleAutorunTriggered(autorun: AutorunObserver): void {\n\t\tconst changedObservables = this.changedObservablesSets.get(autorun)!;\n\t\tconsole.log(\n\t\t\t...this.textToConsoleArgs([\n\t\t\t\tformatKind(\"autorun\"),\n\t\t\t\tstyled(autorun.debugName, { color: \"BlueViolet\" }),\n\t\t\t\tthis.formatChanges(changedObservables),\n\t\t\t\t{\n\t\t\t\t\tdata: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfn:\n\t\t\t\t\t\t\t\tautorun._debugNameData.referenceFn ??\n\t\t\t\t\t\t\t\tautorun._runFn,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t]),\n\t\t);\n\t\tchangedObservables.clear();\n\t\tthis.indentation++;\n\t}\n\n\thandleAutorunFinished(autorun: AutorunObserver): void {\n\t\tthis.indentation--;\n\t}\n\n\thandleBeginTransaction(transaction: TransactionImpl): void {\n\t\tlet transactionName = transaction.getDebugName();\n\t\tif (transactionName === undefined) {\n\t\t\ttransactionName = \"\";\n\t\t}\n\t\tconsole.log(\n\t\t\t...this.textToConsoleArgs([\n\t\t\t\tformatKind(\"transaction\"),\n\t\t\t\tstyled(transactionName, { color: \"BlueViolet\" }),\n\t\t\t\t{ data: [{ fn: transaction._fn }] },\n\t\t\t]),\n\t\t);\n\t\tthis.indentation++;\n\t}\n\n\thandleEndTransaction(): void {\n\t\tthis.indentation--;\n\t}\n}\n\ntype ConsoleText =\n\t| (ConsoleText | undefined)[]\n\t| { text: string; style: string; data?: unknown[] }\n\t| { data: unknown[] };\n\nfunction consoleTextToArgs(text: ConsoleText): unknown[] {\n\tconst styles = new Array<any>();\n\tconst data: unknown[] = [];\n\tlet firstArg = \"\";\n\n\tfunction process(t: ConsoleText): void {\n\t\tif (\"length\" in t) {\n\t\t\tfor (const item of t) {\n\t\t\t\tif (item) {\n\t\t\t\t\tprocess(item);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (\"text\" in t) {\n\t\t\tfirstArg += `%c${t.text}`;\n\t\t\tstyles.push(t.style);\n\t\t\tif (t.data) {\n\t\t\t\tdata.push(...t.data);\n\t\t\t}\n\t\t} else if (\"data\" in t) {\n\t\t\tdata.push(...t.data);\n\t\t}\n\t}\n\n\tprocess(text);\n\n\tconst result = [firstArg, ...styles];\n\tresult.push(...data);\n\treturn result;\n}\n\nfunction normalText(text: string): ConsoleText {\n\treturn styled(text, { color: \"black\" });\n}\n\nfunction formatKind(kind: string): ConsoleText {\n\treturn styled(padStr(`${kind}: `, 10), { color: \"black\", bold: true });\n}\n\nfunction styled(\n\ttext: string,\n\toptions: { color: string; strikeThrough?: boolean; bold?: boolean } = {\n\t\tcolor: \"black\",\n\t},\n): ConsoleText {\n\tfunction objToCss(styleObj: Record<string, string>): string {\n\t\treturn Object.entries(styleObj).reduce(\n\t\t\t(styleString, [propName, propValue]) => {\n\t\t\t\treturn `${styleString}${propName}:${propValue};`;\n\t\t\t},\n\t\t\t\"\",\n\t\t);\n\t}\n\n\tconst style: Record<string, string> = {\n\t\tcolor: options.color,\n\t};\n\tif (options.strikeThrough) {\n\t\tstyle[\"text-decoration\"] = \"line-through\";\n\t}\n\tif (options.bold) {\n\t\tstyle[\"font-weight\"] = \"bold\";\n\t}\n\n\treturn {\n\t\ttext,\n\t\tstyle: objToCss(style),\n\t};\n}\n\nfunction formatValue(value: unknown, availableLen: number): string {\n\tswitch (typeof value) {\n\t\tcase \"number\":\n\t\t\treturn \"\" + value;\n\t\tcase \"string\":\n\t\t\tif (value.length + 2 <= availableLen) {\n\t\t\t\treturn `\"${value}\"`;\n\t\t\t}\n\t\t\treturn `\"${value.substr(0, availableLen - 7)}\"+...`;\n\n\t\tcase \"boolean\":\n\t\t\treturn value ? \"true\" : \"false\";\n\t\tcase \"undefined\":\n\t\t\treturn \"undefined\";\n\t\tcase \"object\":\n\t\t\tif (value === null) {\n\t\t\t\treturn \"null\";\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\treturn formatArray(value, availableLen);\n\t\t\t}\n\t\t\treturn formatObject(value, availableLen);\n\t\tcase \"symbol\":\n\t\t\treturn value.toString();\n\t\tcase \"function\":\n\t\t\treturn `[[Function${value.name ? \" \" + value.name : \"\"}]]`;\n\t\tdefault:\n\t\t\treturn \"\" + value;\n\t}\n}\n\nfunction formatArray(value: unknown[], availableLen: number): string {\n\tlet result = \"[ \";\n\tlet first = true;\n\tfor (const val of value) {\n\t\tif (!first) {\n\t\t\tresult += \", \";\n\t\t}\n\t\tif (result.length - 5 > availableLen) {\n\t\t\tresult += \"...\";\n\t\t\tbreak;\n\t\t}\n\t\tfirst = false;\n\t\tresult += `${formatValue(val, availableLen - result.length)}`;\n\t}\n\tresult += \" ]\";\n\treturn result;\n}\n\nfunction formatObject(value: object, availableLen: number): string {\n\tlet result = \"{ \";\n\tlet first = true;\n\tfor (const [key, val] of Object.entries(value)) {\n\t\tif (!first) {\n\t\t\tresult += \", \";\n\t\t}\n\t\tif (result.length - 5 > availableLen) {\n\t\t\tresult += \"...\";\n\t\t\tbreak;\n\t\t}\n\t\tfirst = false;\n\t\tresult += `${key}: ${formatValue(val, availableLen - result.length)}`;\n\t}\n\tresult += \" }\";\n\treturn result;\n}\n\nfunction repeat(str: string, count: number): string {\n\tlet result = \"\";\n\tfor (let i = 1; i <= count; i++) {\n\t\tresult += str;\n\t}\n\treturn result;\n}\n\nfunction padStr(str: string, length: number): string {\n\twhile (str.length < length) {\n\t\tstr += \" \";\n\t}\n\treturn str;\n}\n"],
  "mappings": "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",
  "names": []
}
