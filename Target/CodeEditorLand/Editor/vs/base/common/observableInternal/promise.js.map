{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/observableInternal/promise.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { type IObservable, observableValue, transaction } from \"./base.js\";\nimport { derived } from \"./derived.js\";\n\nexport class ObservableLazy<T> {\n\tprivate readonly _value = observableValue<T | undefined>(this, undefined);\n\n\t/**\n\t * The cached value.\n\t * Does not force a computation of the value.\n\t */\n\tpublic get cachedValue(): IObservable<T | undefined> {\n\t\treturn this._value;\n\t}\n\n\tconstructor(private readonly _computeValue: () => T) {}\n\n\t/**\n\t * Returns the cached value.\n\t * Computes the value if the value has not been cached yet.\n\t */\n\tpublic getValue() {\n\t\tlet v = this._value.get();\n\t\tif (!v) {\n\t\t\tv = this._computeValue();\n\t\t\tthis._value.set(v, undefined);\n\t\t}\n\t\treturn v;\n\t}\n}\n\n/**\n * A promise whose state is observable.\n */\nexport class ObservablePromise<T> {\n\tpublic static fromFn<T>(fn: () => Promise<T>): ObservablePromise<T> {\n\t\treturn new ObservablePromise(fn());\n\t}\n\n\tprivate readonly _value = observableValue<PromiseResult<T> | undefined>(\n\t\tthis,\n\t\tundefined,\n\t);\n\n\t/**\n\t * The promise that this object wraps.\n\t */\n\tpublic readonly promise: Promise<T>;\n\n\t/**\n\t * The current state of the promise.\n\t * Is `undefined` if the promise didn't resolve yet.\n\t */\n\tpublic readonly promiseResult: IObservable<PromiseResult<T> | undefined> =\n\t\tthis._value;\n\n\tconstructor(promise: Promise<T>) {\n\t\tthis.promise = promise.then(\n\t\t\t(value) => {\n\t\t\t\ttransaction((tx) => {\n\t\t\t\t\t/** @description onPromiseResolved */\n\t\t\t\t\tthis._value.set(new PromiseResult(value, undefined), tx);\n\t\t\t\t});\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\ttransaction((tx) => {\n\t\t\t\t\t/** @description onPromiseRejected */\n\t\t\t\t\tthis._value.set(new PromiseResult<T>(undefined, error), tx);\n\t\t\t\t});\n\t\t\t\tthrow error;\n\t\t\t},\n\t\t);\n\t}\n}\n\nexport class PromiseResult<T> {\n\tconstructor(\n\t\t/**\n\t\t * The value of the resolved promise.\n\t\t * Undefined if the promise rejected.\n\t\t */\n\t\tpublic readonly data: T | undefined,\n\n\t\t/**\n\t\t * The error in case of a rejected promise.\n\t\t * Undefined if the promise resolved.\n\t\t */\n\t\tpublic readonly error: unknown | undefined,\n\t) {}\n\n\t/**\n\t * Returns the value if the promise resolved, otherwise throws the error.\n\t */\n\tpublic getDataOrThrow(): T {\n\t\tif (this.error) {\n\t\t\tthrow this.error;\n\t\t}\n\t\treturn this.data!;\n\t}\n}\n\n/**\n * A lazy promise whose state is observable.\n */\nexport class ObservableLazyPromise<T> {\n\tprivate readonly _lazyValue = new ObservableLazy(\n\t\t() => new ObservablePromise(this._computePromise()),\n\t);\n\n\t/**\n\t * Does not enforce evaluation of the promise compute function.\n\t * Is undefined if the promise has not been computed yet.\n\t */\n\tpublic readonly cachedPromiseResult = derived(this, (reader) =>\n\t\tthis._lazyValue.cachedValue.read(reader)?.promiseResult.read(reader),\n\t);\n\n\tconstructor(private readonly _computePromise: () => Promise<T>) {}\n\n\tpublic getPromise(): Promise<T> {\n\t\treturn this._lazyValue.getValue().promise;\n\t}\n}\n"],
  "mappings": ";;AAIA,SAA2B,iBAAiB,mBAAmB;AAC/D,SAAS,eAAe;AAEjB,MAAM,eAAkB;AAAA,EAW9B,YAA6B,eAAwB;AAAxB;AAAA,EAAyB;AAAA,EAlBvD,OAO+B;AAAA;AAAA;AAAA,EACb,SAAS,gBAA+B,MAAM,MAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAMxE,IAAW,cAA0C;AACpD,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,WAAW;AACjB,QAAI,IAAI,KAAK,OAAO,IAAI;AACxB,QAAI,CAAC,GAAG;AACP,UAAI,KAAK,cAAc;AACvB,WAAK,OAAO,IAAI,GAAG,MAAS;AAAA,IAC7B;AACA,WAAO;AAAA,EACR;AACD;AAKO,MAAM,kBAAqB;AAAA,EArClC,OAqCkC;AAAA;AAAA;AAAA,EACjC,OAAc,OAAU,IAA4C;AACnE,WAAO,IAAI,kBAAkB,GAAG,CAAC;AAAA,EAClC;AAAA,EAEiB,SAAS;AAAA,IACzB;AAAA,IACA;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKgB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBACf,KAAK;AAAA,EAEN,YAAY,SAAqB;AAChC,SAAK,UAAU,QAAQ;AAAA,MACtB,CAAC,UAAU;AACV,oBAAY,CAAC,OAAO;AAEnB,eAAK,OAAO,IAAI,IAAI,cAAc,OAAO,MAAS,GAAG,EAAE;AAAA,QACxD,CAAC;AACD,eAAO;AAAA,MACR;AAAA,MACA,CAAC,UAAU;AACV,oBAAY,CAAC,OAAO;AAEnB,eAAK,OAAO,IAAI,IAAI,cAAiB,QAAW,KAAK,GAAG,EAAE;AAAA,QAC3D,CAAC;AACD,cAAM;AAAA,MACP;AAAA,IACD;AAAA,EACD;AACD;AAEO,MAAM,cAAiB;AAAA,EAC7B,YAKiB,MAMA,OACf;AAPe;AAMA;AAAA,EACd;AAAA,EA5FJ,OA+E8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBtB,iBAAoB;AAC1B,QAAI,KAAK,OAAO;AACf,YAAM,KAAK;AAAA,IACZ;AACA,WAAO,KAAK;AAAA,EACb;AACD;AAKO,MAAM,sBAAyB;AAAA,EAarC,YAA6B,iBAAmC;AAAnC;AAAA,EAAoC;AAAA,EAzHlE,OA4GsC;AAAA;AAAA;AAAA,EACpB,aAAa,IAAI;AAAA,IACjC,MAAM,IAAI,kBAAkB,KAAK,gBAAgB,CAAC;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMgB,sBAAsB;AAAA,IAAQ;AAAA,IAAM,CAAC,WACpD,KAAK,WAAW,YAAY,KAAK,MAAM,GAAG,cAAc,KAAK,MAAM;AAAA,EACpE;AAAA,EAIO,aAAyB;AAC/B,WAAO,KAAK,WAAW,SAAS,EAAE;AAAA,EACnC;AACD;",
  "names": []
}
