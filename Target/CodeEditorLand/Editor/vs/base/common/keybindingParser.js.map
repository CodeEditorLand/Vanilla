{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/keybindingParser.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCodeUtils, ScanCodeUtils } from \"./keyCodes.js\";\nimport {\n\ttype Chord,\n\tKeyCodeChord,\n\tKeybinding,\n\tScanCodeChord,\n} from \"./keybindings.js\";\n\nexport class KeybindingParser {\n\tprivate static _readModifiers(input: string) {\n\t\tinput = input.toLowerCase().trim();\n\n\t\tlet ctrl = false;\n\t\tlet shift = false;\n\t\tlet alt = false;\n\t\tlet meta = false;\n\n\t\tlet matchedModifier: boolean;\n\n\t\tdo {\n\t\t\tmatchedModifier = false;\n\t\t\tif (/^ctrl(\\+|-)/.test(input)) {\n\t\t\t\tctrl = true;\n\t\t\t\tinput = input.substr(\"ctrl-\".length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^shift(\\+|-)/.test(input)) {\n\t\t\t\tshift = true;\n\t\t\t\tinput = input.substr(\"shift-\".length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^alt(\\+|-)/.test(input)) {\n\t\t\t\talt = true;\n\t\t\t\tinput = input.substr(\"alt-\".length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^meta(\\+|-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr(\"meta-\".length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^win(\\+|-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr(\"win-\".length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t\tif (/^cmd(\\+|-)/.test(input)) {\n\t\t\t\tmeta = true;\n\t\t\t\tinput = input.substr(\"cmd-\".length);\n\t\t\t\tmatchedModifier = true;\n\t\t\t}\n\t\t} while (matchedModifier);\n\n\t\tlet key: string;\n\n\t\tconst firstSpaceIdx = input.indexOf(\" \");\n\t\tif (firstSpaceIdx > 0) {\n\t\t\tkey = input.substring(0, firstSpaceIdx);\n\t\t\tinput = input.substring(firstSpaceIdx);\n\t\t} else {\n\t\t\tkey = input;\n\t\t\tinput = \"\";\n\t\t}\n\n\t\treturn {\n\t\t\tremains: input,\n\t\t\tctrl,\n\t\t\tshift,\n\t\t\talt,\n\t\t\tmeta,\n\t\t\tkey,\n\t\t};\n\t}\n\n\tprivate static parseChord(input: string): [Chord, string] {\n\t\tconst mods = this._readModifiers(input);\n\t\tconst scanCodeMatch = mods.key.match(/^\\[([^\\]]+)\\]$/);\n\t\tif (scanCodeMatch) {\n\t\t\tconst strScanCode = scanCodeMatch[1];\n\t\t\tconst scanCode = ScanCodeUtils.lowerCaseToEnum(strScanCode);\n\t\t\treturn [\n\t\t\t\tnew ScanCodeChord(\n\t\t\t\t\tmods.ctrl,\n\t\t\t\t\tmods.shift,\n\t\t\t\t\tmods.alt,\n\t\t\t\t\tmods.meta,\n\t\t\t\t\tscanCode,\n\t\t\t\t),\n\t\t\t\tmods.remains,\n\t\t\t];\n\t\t}\n\t\tconst keyCode = KeyCodeUtils.fromUserSettings(mods.key);\n\t\treturn [\n\t\t\tnew KeyCodeChord(\n\t\t\t\tmods.ctrl,\n\t\t\t\tmods.shift,\n\t\t\t\tmods.alt,\n\t\t\t\tmods.meta,\n\t\t\t\tkeyCode,\n\t\t\t),\n\t\t\tmods.remains,\n\t\t];\n\t}\n\n\tstatic parseKeybinding(input: string): Keybinding | null {\n\t\tif (!input) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst chords: Chord[] = [];\n\t\tlet chord: Chord;\n\n\t\twhile (input.length > 0) {\n\t\t\t[chord, input] = this.parseChord(input);\n\t\t\tchords.push(chord);\n\t\t}\n\t\treturn chords.length > 0 ? new Keybinding(chords) : null;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc,qBAAqB;AAC5C;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEA,MAAM,iBAAiB;AAAA,EAb9B,OAa8B;AAAA;AAAA;AAAA,EAC7B,OAAe,eAAe,OAAe;AAC5C,YAAQ,MAAM,YAAY,EAAE,KAAK;AAEjC,QAAI,OAAO;AACX,QAAI,QAAQ;AACZ,QAAI,MAAM;AACV,QAAI,OAAO;AAEX,QAAI;AAEJ,OAAG;AACF,wBAAkB;AAClB,UAAI,cAAc,KAAK,KAAK,GAAG;AAC9B,eAAO;AACP,gBAAQ,MAAM,OAAO,QAAQ,MAAM;AACnC,0BAAkB;AAAA,MACnB;AACA,UAAI,eAAe,KAAK,KAAK,GAAG;AAC/B,gBAAQ;AACR,gBAAQ,MAAM,OAAO,SAAS,MAAM;AACpC,0BAAkB;AAAA,MACnB;AACA,UAAI,aAAa,KAAK,KAAK,GAAG;AAC7B,cAAM;AACN,gBAAQ,MAAM,OAAO,OAAO,MAAM;AAClC,0BAAkB;AAAA,MACnB;AACA,UAAI,cAAc,KAAK,KAAK,GAAG;AAC9B,eAAO;AACP,gBAAQ,MAAM,OAAO,QAAQ,MAAM;AACnC,0BAAkB;AAAA,MACnB;AACA,UAAI,aAAa,KAAK,KAAK,GAAG;AAC7B,eAAO;AACP,gBAAQ,MAAM,OAAO,OAAO,MAAM;AAClC,0BAAkB;AAAA,MACnB;AACA,UAAI,aAAa,KAAK,KAAK,GAAG;AAC7B,eAAO;AACP,gBAAQ,MAAM,OAAO,OAAO,MAAM;AAClC,0BAAkB;AAAA,MACnB;AAAA,IACD,SAAS;AAET,QAAI;AAEJ,UAAM,gBAAgB,MAAM,QAAQ,GAAG;AACvC,QAAI,gBAAgB,GAAG;AACtB,YAAM,MAAM,UAAU,GAAG,aAAa;AACtC,cAAQ,MAAM,UAAU,aAAa;AAAA,IACtC,OAAO;AACN,YAAM;AACN,cAAQ;AAAA,IACT;AAEA,WAAO;AAAA,MACN,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,OAAe,WAAW,OAAgC;AACzD,UAAM,OAAO,KAAK,eAAe,KAAK;AACtC,UAAM,gBAAgB,KAAK,IAAI,MAAM,gBAAgB;AACrD,QAAI,eAAe;AAClB,YAAM,cAAc,cAAc,CAAC;AACnC,YAAM,WAAW,cAAc,gBAAgB,WAAW;AAC1D,aAAO;AAAA,QACN,IAAI;AAAA,UACH,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,QACD;AAAA,QACA,KAAK;AAAA,MACN;AAAA,IACD;AACA,UAAM,UAAU,aAAa,iBAAiB,KAAK,GAAG;AACtD,WAAO;AAAA,MACN,IAAI;AAAA,QACH,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA,MACD;AAAA,MACA,KAAK;AAAA,IACN;AAAA,EACD;AAAA,EAEA,OAAO,gBAAgB,OAAkC;AACxD,QAAI,CAAC,OAAO;AACX,aAAO;AAAA,IACR;AAEA,UAAM,SAAkB,CAAC;AACzB,QAAI;AAEJ,WAAO,MAAM,SAAS,GAAG;AACxB,OAAC,OAAO,KAAK,IAAI,KAAK,WAAW,KAAK;AACtC,aAAO,KAAK,KAAK;AAAA,IAClB;AACA,WAAO,OAAO,SAAS,IAAI,IAAI,WAAW,MAAM,IAAI;AAAA,EACrD;AACD;",
  "names": []
}
