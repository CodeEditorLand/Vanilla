{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/search.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from './strings.js';\n\nexport function buildReplaceStringWithCasePreserved(matches: string[] | null, pattern: string): string {\n\tif (matches && (matches[0] !== '')) {\n\t\tconst containsHyphens = validateSpecificSpecialCharacter(matches, pattern, '-');\n\t\tconst containsUnderscores = validateSpecificSpecialCharacter(matches, pattern, '_');\n\t\tif (containsHyphens && !containsUnderscores) {\n\t\t\treturn buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '-');\n\t\t} else if (!containsHyphens && containsUnderscores) {\n\t\t\treturn buildReplaceStringForSpecificSpecialCharacter(matches, pattern, '_');\n\t\t}\n\t\tif (matches[0].toUpperCase() === matches[0]) {\n\t\t\treturn pattern.toUpperCase();\n\t\t} else if (matches[0].toLowerCase() === matches[0]) {\n\t\t\treturn pattern.toLowerCase();\n\t\t} else if (strings.containsUppercaseCharacter(matches[0][0]) && pattern.length > 0) {\n\t\t\treturn pattern[0].toUpperCase() + pattern.substr(1);\n\t\t} else if (matches[0][0].toUpperCase() !== matches[0][0] && pattern.length > 0) {\n\t\t\treturn pattern[0].toLowerCase() + pattern.substr(1);\n\t\t} else {\n\t\t\t// we don't understand its pattern yet.\n\t\t\treturn pattern;\n\t\t}\n\t} else {\n\t\treturn pattern;\n\t}\n}\n\nfunction validateSpecificSpecialCharacter(matches: string[], pattern: string, specialCharacter: string): boolean {\n\tconst doesContainSpecialCharacter = matches[0].indexOf(specialCharacter) !== -1 && pattern.indexOf(specialCharacter) !== -1;\n\treturn doesContainSpecialCharacter && matches[0].split(specialCharacter).length === pattern.split(specialCharacter).length;\n}\n\nfunction buildReplaceStringForSpecificSpecialCharacter(matches: string[], pattern: string, specialCharacter: string): string {\n\tconst splitPatternAtSpecialCharacter = pattern.split(specialCharacter);\n\tconst splitMatchAtSpecialCharacter = matches[0].split(specialCharacter);\n\tlet replaceString: string = '';\n\tsplitPatternAtSpecialCharacter.forEach((splitValue, index) => {\n\t\treplaceString += buildReplaceStringWithCasePreserved([splitMatchAtSpecialCharacter[index]], splitValue) + specialCharacter;\n\t});\n\n\treturn replaceString.slice(0, -1);\n}\n"],
  "mappings": ";;AAKA,YAAY,aAAa;AAElB,SAAS,oCAAoC,SAA0B,SAAyB;AACtG,MAAI,WAAY,QAAQ,CAAC,MAAM,IAAK;AACnC,UAAM,kBAAkB,iCAAiC,SAAS,SAAS,GAAG;AAC9E,UAAM,sBAAsB,iCAAiC,SAAS,SAAS,GAAG;AAClF,QAAI,mBAAmB,CAAC,qBAAqB;AAC5C,aAAO,8CAA8C,SAAS,SAAS,GAAG;AAAA,IAC3E,WAAW,CAAC,mBAAmB,qBAAqB;AACnD,aAAO,8CAA8C,SAAS,SAAS,GAAG;AAAA,IAC3E;AACA,QAAI,QAAQ,CAAC,EAAE,YAAY,MAAM,QAAQ,CAAC,GAAG;AAC5C,aAAO,QAAQ,YAAY;AAAA,IAC5B,WAAW,QAAQ,CAAC,EAAE,YAAY,MAAM,QAAQ,CAAC,GAAG;AACnD,aAAO,QAAQ,YAAY;AAAA,IAC5B,WAAW,QAAQ,2BAA2B,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,SAAS,GAAG;AACnF,aAAO,QAAQ,CAAC,EAAE,YAAY,IAAI,QAAQ,OAAO,CAAC;AAAA,IACnD,WAAW,QAAQ,CAAC,EAAE,CAAC,EAAE,YAAY,MAAM,QAAQ,CAAC,EAAE,CAAC,KAAK,QAAQ,SAAS,GAAG;AAC/E,aAAO,QAAQ,CAAC,EAAE,YAAY,IAAI,QAAQ,OAAO,CAAC;AAAA,IACnD,OAAO;AAEN,aAAO;AAAA,IACR;AAAA,EACD,OAAO;AACN,WAAO;AAAA,EACR;AACD;AAxBgB;AA0BhB,SAAS,iCAAiC,SAAmB,SAAiB,kBAAmC;AAChH,QAAM,8BAA8B,QAAQ,CAAC,EAAE,QAAQ,gBAAgB,MAAM,MAAM,QAAQ,QAAQ,gBAAgB,MAAM;AACzH,SAAO,+BAA+B,QAAQ,CAAC,EAAE,MAAM,gBAAgB,EAAE,WAAW,QAAQ,MAAM,gBAAgB,EAAE;AACrH;AAHS;AAKT,SAAS,8CAA8C,SAAmB,SAAiB,kBAAkC;AAC5H,QAAM,iCAAiC,QAAQ,MAAM,gBAAgB;AACrE,QAAM,+BAA+B,QAAQ,CAAC,EAAE,MAAM,gBAAgB;AACtE,MAAI,gBAAwB;AAC5B,iCAA+B,QAAQ,CAAC,YAAY,UAAU;AAC7D,qBAAiB,oCAAoC,CAAC,6BAA6B,KAAK,CAAC,GAAG,UAAU,IAAI;AAAA,EAC3G,CAAC;AAED,SAAO,cAAc,MAAM,GAAG,EAAE;AACjC;AATS;",
  "names": []
}
