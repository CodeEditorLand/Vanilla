{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/search.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from \"./strings.js\";\n\nexport function buildReplaceStringWithCasePreserved(\n\tmatches: string[] | null,\n\tpattern: string,\n): string {\n\tif (matches && matches[0] !== \"\") {\n\t\tconst containsHyphens = validateSpecificSpecialCharacter(\n\t\t\tmatches,\n\t\t\tpattern,\n\t\t\t\"-\",\n\t\t);\n\t\tconst containsUnderscores = validateSpecificSpecialCharacter(\n\t\t\tmatches,\n\t\t\tpattern,\n\t\t\t\"_\",\n\t\t);\n\t\tif (containsHyphens && !containsUnderscores) {\n\t\t\treturn buildReplaceStringForSpecificSpecialCharacter(\n\t\t\t\tmatches,\n\t\t\t\tpattern,\n\t\t\t\t\"-\",\n\t\t\t);\n\t\t} else if (!containsHyphens && containsUnderscores) {\n\t\t\treturn buildReplaceStringForSpecificSpecialCharacter(\n\t\t\t\tmatches,\n\t\t\t\tpattern,\n\t\t\t\t\"_\",\n\t\t\t);\n\t\t}\n\t\tif (matches[0].toUpperCase() === matches[0]) {\n\t\t\treturn pattern.toUpperCase();\n\t\t} else if (matches[0].toLowerCase() === matches[0]) {\n\t\t\treturn pattern.toLowerCase();\n\t\t} else if (\n\t\t\tstrings.containsUppercaseCharacter(matches[0][0]) &&\n\t\t\tpattern.length > 0\n\t\t) {\n\t\t\treturn pattern[0].toUpperCase() + pattern.substr(1);\n\t\t} else if (\n\t\t\tmatches[0][0].toUpperCase() !== matches[0][0] &&\n\t\t\tpattern.length > 0\n\t\t) {\n\t\t\treturn pattern[0].toLowerCase() + pattern.substr(1);\n\t\t} else {\n\t\t\t// we don't understand its pattern yet.\n\t\t\treturn pattern;\n\t\t}\n\t} else {\n\t\treturn pattern;\n\t}\n}\n\nfunction validateSpecificSpecialCharacter(\n\tmatches: string[],\n\tpattern: string,\n\tspecialCharacter: string,\n): boolean {\n\tconst doesContainSpecialCharacter =\n\t\tmatches[0].indexOf(specialCharacter) !== -1 &&\n\t\tpattern.indexOf(specialCharacter) !== -1;\n\treturn (\n\t\tdoesContainSpecialCharacter &&\n\t\tmatches[0].split(specialCharacter).length ===\n\t\t\tpattern.split(specialCharacter).length\n\t);\n}\n\nfunction buildReplaceStringForSpecificSpecialCharacter(\n\tmatches: string[],\n\tpattern: string,\n\tspecialCharacter: string,\n): string {\n\tconst splitPatternAtSpecialCharacter = pattern.split(specialCharacter);\n\tconst splitMatchAtSpecialCharacter = matches[0].split(specialCharacter);\n\tlet replaceString = \"\";\n\tsplitPatternAtSpecialCharacter.forEach((splitValue, index) => {\n\t\treplaceString +=\n\t\t\tbuildReplaceStringWithCasePreserved(\n\t\t\t\t[splitMatchAtSpecialCharacter[index]],\n\t\t\t\tsplitValue,\n\t\t\t) + specialCharacter;\n\t});\n\n\treturn replaceString.slice(0, -1);\n}\n"],
  "mappings": ";;AAKA,YAAY,aAAa;AAElB,SAAS,oCACf,SACA,SACS;AACT,MAAI,WAAW,QAAQ,CAAC,MAAM,IAAI;AACjC,UAAM,kBAAkB;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,sBAAsB;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,QAAI,mBAAmB,CAAC,qBAAqB;AAC5C,aAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,WAAW,CAAC,mBAAmB,qBAAqB;AACnD,aAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,QAAI,QAAQ,CAAC,EAAE,YAAY,MAAM,QAAQ,CAAC,GAAG;AAC5C,aAAO,QAAQ,YAAY;AAAA,IAC5B,WAAW,QAAQ,CAAC,EAAE,YAAY,MAAM,QAAQ,CAAC,GAAG;AACnD,aAAO,QAAQ,YAAY;AAAA,IAC5B,WACC,QAAQ,2BAA2B,QAAQ,CAAC,EAAE,CAAC,CAAC,KAChD,QAAQ,SAAS,GAChB;AACD,aAAO,QAAQ,CAAC,EAAE,YAAY,IAAI,QAAQ,OAAO,CAAC;AAAA,IACnD,WACC,QAAQ,CAAC,EAAE,CAAC,EAAE,YAAY,MAAM,QAAQ,CAAC,EAAE,CAAC,KAC5C,QAAQ,SAAS,GAChB;AACD,aAAO,QAAQ,CAAC,EAAE,YAAY,IAAI,QAAQ,OAAO,CAAC;AAAA,IACnD,OAAO;AAEN,aAAO;AAAA,IACR;AAAA,EACD,OAAO;AACN,WAAO;AAAA,EACR;AACD;AAjDgB;AAmDhB,SAAS,iCACR,SACA,SACA,kBACU;AACV,QAAM,8BACL,QAAQ,CAAC,EAAE,QAAQ,gBAAgB,MAAM,MACzC,QAAQ,QAAQ,gBAAgB,MAAM;AACvC,SACC,+BACA,QAAQ,CAAC,EAAE,MAAM,gBAAgB,EAAE,WAClC,QAAQ,MAAM,gBAAgB,EAAE;AAEnC;AAbS;AAeT,SAAS,8CACR,SACA,SACA,kBACS;AACT,QAAM,iCAAiC,QAAQ,MAAM,gBAAgB;AACrE,QAAM,+BAA+B,QAAQ,CAAC,EAAE,MAAM,gBAAgB;AACtE,MAAI,gBAAgB;AACpB,iCAA+B,QAAQ,CAAC,YAAY,UAAU;AAC7D,qBACC;AAAA,MACC,CAAC,6BAA6B,KAAK,CAAC;AAAA,MACpC;AAAA,IACD,IAAI;AAAA,EACN,CAAC;AAED,SAAO,cAAc,MAAM,GAAG,EAAE;AACjC;AAjBS;",
  "names": []
}
