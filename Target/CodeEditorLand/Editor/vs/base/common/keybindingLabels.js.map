{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/keybindingLabels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Modifiers } from './keybindings.js';\nimport { OperatingSystem } from './platform.js';\nimport * as nls from '../../nls.js';\n\nexport interface ModifierLabels {\n\treadonly ctrlKey: string;\n\treadonly shiftKey: string;\n\treadonly altKey: string;\n\treadonly metaKey: string;\n\treadonly separator: string;\n}\n\nexport interface KeyLabelProvider<T extends Modifiers> {\n\t(keybinding: T): string | null;\n}\n\nexport class ModifierLabelProvider {\n\n\tpublic readonly modifierLabels: ModifierLabels[];\n\n\tconstructor(mac: ModifierLabels, windows: ModifierLabels, linux: ModifierLabels = windows) {\n\t\tthis.modifierLabels = [null!]; // index 0 will never me accessed.\n\t\tthis.modifierLabels[OperatingSystem.Macintosh] = mac;\n\t\tthis.modifierLabels[OperatingSystem.Windows] = windows;\n\t\tthis.modifierLabels[OperatingSystem.Linux] = linux;\n\t}\n\n\tpublic toLabel<T extends Modifiers>(OS: OperatingSystem, chords: readonly T[], keyLabelProvider: KeyLabelProvider<T>): string | null {\n\t\tif (chords.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tfor (let i = 0, len = chords.length; i < len; i++) {\n\t\t\tconst chord = chords[i];\n\t\t\tconst keyLabel = keyLabelProvider(chord);\n\t\t\tif (keyLabel === null) {\n\t\t\t\t// this keybinding cannot be expressed...\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresult[i] = _simpleAsString(chord, keyLabel, this.modifierLabels[OS]);\n\t\t}\n\t\treturn result.join(' ');\n\t}\n}\n\n/**\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\n */\nexport const UILabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: '\\u2303',\n\t\tshiftKey: '\u21E7',\n\t\taltKey: '\u2325',\n\t\tmetaKey: '\u2318',\n\t\tseparator: '',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, \"Windows\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, \"Super\"),\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for ARIA.\n */\nexport const AriaLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'optKey.long', comment: ['This is the long form for the Alt/Option key on the keyboard'] }, \"Option\"),\n\t\tmetaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, \"Command\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, \"Windows\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, \"Super\"),\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for Electron Accelerators.\n * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md\n */\nexport const ElectronAcceleratorLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: 'Ctrl',\n\t\tshiftKey: 'Shift',\n\t\taltKey: 'Alt',\n\t\tmetaKey: 'Cmd',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'Ctrl',\n\t\tshiftKey: 'Shift',\n\t\taltKey: 'Alt',\n\t\tmetaKey: 'Super',\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for user settings.\n */\nexport const UserSettingsLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'cmd',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'win',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'meta',\n\t\tseparator: '+',\n\t}\n);\n\nfunction _simpleAsString(modifiers: Modifiers, key: string, labels: ModifierLabels): string {\n\tif (key === null) {\n\t\treturn '';\n\t}\n\n\tconst result: string[] = [];\n\n\t// translate modifier keys: Ctrl-Shift-Alt-Meta\n\tif (modifiers.ctrlKey) {\n\t\tresult.push(labels.ctrlKey);\n\t}\n\n\tif (modifiers.shiftKey) {\n\t\tresult.push(labels.shiftKey);\n\t}\n\n\tif (modifiers.altKey) {\n\t\tresult.push(labels.altKey);\n\t}\n\n\tif (modifiers.metaKey) {\n\t\tresult.push(labels.metaKey);\n\t}\n\n\t// the actual key\n\tif (key !== '') {\n\t\tresult.push(key);\n\t}\n\n\treturn result.join(labels.separator);\n}\n"],
  "mappings": ";;AAKA,SAAS,iBAAiB;AAC1B,SAAS,uBAAuB;AAChC,YAAY,SAAS;AAcd,MAAM,sBAAsB;AAAA,EArBnC,OAqBmC;AAAA;AAAA;AAAA,EAElB;AAAA,EAEhB,YAAY,KAAqB,SAAyB,QAAwB,SAAS;AAC1F,SAAK,iBAAiB,CAAC,IAAK;AAC5B,SAAK,eAAe,gBAAgB,SAAS,IAAI;AACjD,SAAK,eAAe,gBAAgB,OAAO,IAAI;AAC/C,SAAK,eAAe,gBAAgB,KAAK,IAAI;AAAA,EAC9C;AAAA,EAEO,QAA6B,IAAqB,QAAsB,kBAAsD;AACpI,QAAI,OAAO,WAAW,GAAG;AACxB,aAAO;AAAA,IACR;AAEA,UAAM,SAAmB,CAAC;AAC1B,aAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAClD,YAAM,QAAQ,OAAO,CAAC;AACtB,YAAM,WAAW,iBAAiB,KAAK;AACvC,UAAI,aAAa,MAAM;AAEtB,eAAO;AAAA,MACR;AACA,aAAO,CAAC,IAAI,gBAAgB,OAAO,UAAU,KAAK,eAAe,EAAE,CAAC;AAAA,IACrE;AACA,WAAO,OAAO,KAAK,GAAG;AAAA,EACvB;AACD;AAKO,MAAM,kBAAkB,IAAI;AAAA,EAClC;AAAA,IACC,SAAS;AAAA,IACT,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,WAAW;AAAA,EACZ;AAAA,EACA;AAAA,IACC,SAAS,IAAI,SAAS,EAAE,KAAK,WAAW,SAAS,CAAC,4DAA4D,EAAE,GAAG,MAAM;AAAA,IACzH,UAAU,IAAI,SAAS,EAAE,KAAK,YAAY,SAAS,CAAC,0DAA0D,EAAE,GAAG,OAAO;AAAA,IAC1H,QAAQ,IAAI,SAAS,EAAE,KAAK,UAAU,SAAS,CAAC,wDAAwD,EAAE,GAAG,KAAK;AAAA,IAClH,SAAS,IAAI,SAAS,EAAE,KAAK,cAAc,SAAS,CAAC,4DAA4D,EAAE,GAAG,SAAS;AAAA,IAC/H,WAAW;AAAA,EACZ;AAAA,EACA;AAAA,IACC,SAAS,IAAI,SAAS,EAAE,KAAK,WAAW,SAAS,CAAC,4DAA4D,EAAE,GAAG,MAAM;AAAA,IACzH,UAAU,IAAI,SAAS,EAAE,KAAK,YAAY,SAAS,CAAC,0DAA0D,EAAE,GAAG,OAAO;AAAA,IAC1H,QAAQ,IAAI,SAAS,EAAE,KAAK,UAAU,SAAS,CAAC,wDAAwD,EAAE,GAAG,KAAK;AAAA,IAClH,SAAS,IAAI,SAAS,EAAE,KAAK,YAAY,SAAS,CAAC,0DAA0D,EAAE,GAAG,OAAO;AAAA,IACzH,WAAW;AAAA,EACZ;AACD;AAKO,MAAM,oBAAoB,IAAI;AAAA,EACpC;AAAA,IACC,SAAS,IAAI,SAAS,EAAE,KAAK,gBAAgB,SAAS,CAAC,2DAA2D,EAAE,GAAG,SAAS;AAAA,IAChI,UAAU,IAAI,SAAS,EAAE,KAAK,iBAAiB,SAAS,CAAC,yDAAyD,EAAE,GAAG,OAAO;AAAA,IAC9H,QAAQ,IAAI,SAAS,EAAE,KAAK,eAAe,SAAS,CAAC,8DAA8D,EAAE,GAAG,QAAQ;AAAA,IAChI,SAAS,IAAI,SAAS,EAAE,KAAK,eAAe,SAAS,CAAC,2DAA2D,EAAE,GAAG,SAAS;AAAA,IAC/H,WAAW;AAAA,EACZ;AAAA,EACA;AAAA,IACC,SAAS,IAAI,SAAS,EAAE,KAAK,gBAAgB,SAAS,CAAC,2DAA2D,EAAE,GAAG,SAAS;AAAA,IAChI,UAAU,IAAI,SAAS,EAAE,KAAK,iBAAiB,SAAS,CAAC,yDAAyD,EAAE,GAAG,OAAO;AAAA,IAC9H,QAAQ,IAAI,SAAS,EAAE,KAAK,eAAe,SAAS,CAAC,uDAAuD,EAAE,GAAG,KAAK;AAAA,IACtH,SAAS,IAAI,SAAS,EAAE,KAAK,mBAAmB,SAAS,CAAC,2DAA2D,EAAE,GAAG,SAAS;AAAA,IACnI,WAAW;AAAA,EACZ;AAAA,EACA;AAAA,IACC,SAAS,IAAI,SAAS,EAAE,KAAK,gBAAgB,SAAS,CAAC,2DAA2D,EAAE,GAAG,SAAS;AAAA,IAChI,UAAU,IAAI,SAAS,EAAE,KAAK,iBAAiB,SAAS,CAAC,yDAAyD,EAAE,GAAG,OAAO;AAAA,IAC9H,QAAQ,IAAI,SAAS,EAAE,KAAK,eAAe,SAAS,CAAC,uDAAuD,EAAE,GAAG,KAAK;AAAA,IACtH,SAAS,IAAI,SAAS,EAAE,KAAK,iBAAiB,SAAS,CAAC,yDAAyD,EAAE,GAAG,OAAO;AAAA,IAC7H,WAAW;AAAA,EACZ;AACD;AAMO,MAAM,mCAAmC,IAAI;AAAA,EACnD;AAAA,IACC,SAAS;AAAA,IACT,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,WAAW;AAAA,EACZ;AAAA,EACA;AAAA,IACC,SAAS;AAAA,IACT,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,WAAW;AAAA,EACZ;AACD;AAKO,MAAM,4BAA4B,IAAI;AAAA,EAC5C;AAAA,IACC,SAAS;AAAA,IACT,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,WAAW;AAAA,EACZ;AAAA,EACA;AAAA,IACC,SAAS;AAAA,IACT,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,WAAW;AAAA,EACZ;AAAA,EACA;AAAA,IACC,SAAS;AAAA,IACT,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,WAAW;AAAA,EACZ;AACD;AAEA,SAAS,gBAAgB,WAAsB,KAAa,QAAgC;AAC3F,MAAI,QAAQ,MAAM;AACjB,WAAO;AAAA,EACR;AAEA,QAAM,SAAmB,CAAC;AAG1B,MAAI,UAAU,SAAS;AACtB,WAAO,KAAK,OAAO,OAAO;AAAA,EAC3B;AAEA,MAAI,UAAU,UAAU;AACvB,WAAO,KAAK,OAAO,QAAQ;AAAA,EAC5B;AAEA,MAAI,UAAU,QAAQ;AACrB,WAAO,KAAK,OAAO,MAAM;AAAA,EAC1B;AAEA,MAAI,UAAU,SAAS;AACtB,WAAO,KAAK,OAAO,OAAO;AAAA,EAC3B;AAGA,MAAI,QAAQ,IAAI;AACf,WAAO,KAAK,GAAG;AAAA,EAChB;AAEA,SAAO,OAAO,KAAK,OAAO,SAAS;AACpC;AA9BS;",
  "names": []
}
