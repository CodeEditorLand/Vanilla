{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/keybindings.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { illegalArgument } from './errors.js';\nimport { KeyCode, ScanCode } from './keyCodes.js';\nimport { OperatingSystem } from './platform.js';\n\n/**\n * Binary encoding strategy:\n * ```\n *    1111 11\n *    5432 1098 7654 3210\n *    ---- CSAW KKKK KKKK\n *  C = bit 11 = ctrlCmd flag\n *  S = bit 10 = shift flag\n *  A = bit 9 = alt flag\n *  W = bit 8 = winCtrl flag\n *  K = bits 0-7 = key code\n * ```\n */\nconst enum BinaryKeybindingsMask {\n\tCtrlCmd = (1 << 11) >>> 0,\n\tShift = (1 << 10) >>> 0,\n\tAlt = (1 << 9) >>> 0,\n\tWinCtrl = (1 << 8) >>> 0,\n\tKeyCode = 0x000000FF\n}\n\nexport function decodeKeybinding(keybinding: number | number[], OS: OperatingSystem): Keybinding | null {\n\tif (typeof keybinding === 'number') {\n\t\tif (keybinding === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst firstChord = (keybinding & 0x0000FFFF) >>> 0;\n\t\tconst secondChord = (keybinding & 0xFFFF0000) >>> 16;\n\t\tif (secondChord !== 0) {\n\t\t\treturn new Keybinding([\n\t\t\t\tcreateSimpleKeybinding(firstChord, OS),\n\t\t\t\tcreateSimpleKeybinding(secondChord, OS)\n\t\t\t]);\n\t\t}\n\t\treturn new Keybinding([createSimpleKeybinding(firstChord, OS)]);\n\t} else {\n\t\tconst chords = [];\n\t\tfor (let i = 0; i < keybinding.length; i++) {\n\t\t\tchords.push(createSimpleKeybinding(keybinding[i], OS));\n\t\t}\n\t\treturn new Keybinding(chords);\n\t}\n}\n\nexport function createSimpleKeybinding(keybinding: number, OS: OperatingSystem): KeyCodeChord {\n\n\tconst ctrlCmd = (keybinding & BinaryKeybindingsMask.CtrlCmd ? true : false);\n\tconst winCtrl = (keybinding & BinaryKeybindingsMask.WinCtrl ? true : false);\n\n\tconst ctrlKey = (OS === OperatingSystem.Macintosh ? winCtrl : ctrlCmd);\n\tconst shiftKey = (keybinding & BinaryKeybindingsMask.Shift ? true : false);\n\tconst altKey = (keybinding & BinaryKeybindingsMask.Alt ? true : false);\n\tconst metaKey = (OS === OperatingSystem.Macintosh ? ctrlCmd : winCtrl);\n\tconst keyCode = (keybinding & BinaryKeybindingsMask.KeyCode);\n\n\treturn new KeyCodeChord(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\n\nexport interface Modifiers {\n\treadonly ctrlKey: boolean;\n\treadonly shiftKey: boolean;\n\treadonly altKey: boolean;\n\treadonly metaKey: boolean;\n}\n\n/**\n * Represents a chord which uses the `keyCode` field of keyboard events.\n * A chord is a combination of keys pressed simultaneously.\n */\nexport class KeyCodeChord implements Modifiers {\n\n\tconstructor(\n\t\tpublic readonly ctrlKey: boolean,\n\t\tpublic readonly shiftKey: boolean,\n\t\tpublic readonly altKey: boolean,\n\t\tpublic readonly metaKey: boolean,\n\t\tpublic readonly keyCode: KeyCode\n\t) { }\n\n\tpublic equals(other: Chord): boolean {\n\t\treturn (\n\t\t\tother instanceof KeyCodeChord\n\t\t\t&& this.ctrlKey === other.ctrlKey\n\t\t\t&& this.shiftKey === other.shiftKey\n\t\t\t&& this.altKey === other.altKey\n\t\t\t&& this.metaKey === other.metaKey\n\t\t\t&& this.keyCode === other.keyCode\n\t\t);\n\t}\n\n\tpublic getHashCode(): string {\n\t\tconst ctrl = this.ctrlKey ? '1' : '0';\n\t\tconst shift = this.shiftKey ? '1' : '0';\n\t\tconst alt = this.altKey ? '1' : '0';\n\t\tconst meta = this.metaKey ? '1' : '0';\n\t\treturn `K${ctrl}${shift}${alt}${meta}${this.keyCode}`;\n\t}\n\n\tpublic isModifierKey(): boolean {\n\t\treturn (\n\t\t\tthis.keyCode === KeyCode.Unknown\n\t\t\t|| this.keyCode === KeyCode.Ctrl\n\t\t\t|| this.keyCode === KeyCode.Meta\n\t\t\t|| this.keyCode === KeyCode.Alt\n\t\t\t|| this.keyCode === KeyCode.Shift\n\t\t);\n\t}\n\n\tpublic toKeybinding(): Keybinding {\n\t\treturn new Keybinding([this]);\n\t}\n\n\t/**\n\t * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n\t */\n\tpublic isDuplicateModifierCase(): boolean {\n\t\treturn (\n\t\t\t(this.ctrlKey && this.keyCode === KeyCode.Ctrl)\n\t\t\t|| (this.shiftKey && this.keyCode === KeyCode.Shift)\n\t\t\t|| (this.altKey && this.keyCode === KeyCode.Alt)\n\t\t\t|| (this.metaKey && this.keyCode === KeyCode.Meta)\n\t\t);\n\t}\n}\n\n/**\n * Represents a chord which uses the `code` field of keyboard events.\n * A chord is a combination of keys pressed simultaneously.\n */\nexport class ScanCodeChord implements Modifiers {\n\n\tconstructor(\n\t\tpublic readonly ctrlKey: boolean,\n\t\tpublic readonly shiftKey: boolean,\n\t\tpublic readonly altKey: boolean,\n\t\tpublic readonly metaKey: boolean,\n\t\tpublic readonly scanCode: ScanCode\n\t) { }\n\n\tpublic equals(other: Chord): boolean {\n\t\treturn (\n\t\t\tother instanceof ScanCodeChord\n\t\t\t&& this.ctrlKey === other.ctrlKey\n\t\t\t&& this.shiftKey === other.shiftKey\n\t\t\t&& this.altKey === other.altKey\n\t\t\t&& this.metaKey === other.metaKey\n\t\t\t&& this.scanCode === other.scanCode\n\t\t);\n\t}\n\n\tpublic getHashCode(): string {\n\t\tconst ctrl = this.ctrlKey ? '1' : '0';\n\t\tconst shift = this.shiftKey ? '1' : '0';\n\t\tconst alt = this.altKey ? '1' : '0';\n\t\tconst meta = this.metaKey ? '1' : '0';\n\t\treturn `S${ctrl}${shift}${alt}${meta}${this.scanCode}`;\n\t}\n\n\t/**\n\t * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n\t */\n\tpublic isDuplicateModifierCase(): boolean {\n\t\treturn (\n\t\t\t(this.ctrlKey && (this.scanCode === ScanCode.ControlLeft || this.scanCode === ScanCode.ControlRight))\n\t\t\t|| (this.shiftKey && (this.scanCode === ScanCode.ShiftLeft || this.scanCode === ScanCode.ShiftRight))\n\t\t\t|| (this.altKey && (this.scanCode === ScanCode.AltLeft || this.scanCode === ScanCode.AltRight))\n\t\t\t|| (this.metaKey && (this.scanCode === ScanCode.MetaLeft || this.scanCode === ScanCode.MetaRight))\n\t\t);\n\t}\n}\n\nexport type Chord = KeyCodeChord | ScanCodeChord;\n\n/**\n * A keybinding is a sequence of chords.\n */\nexport class Keybinding {\n\n\tpublic readonly chords: Chord[];\n\n\tconstructor(chords: Chord[]) {\n\t\tif (chords.length === 0) {\n\t\t\tthrow illegalArgument(`chords`);\n\t\t}\n\t\tthis.chords = chords;\n\t}\n\n\tpublic getHashCode(): string {\n\t\tlet result = '';\n\t\tfor (let i = 0, len = this.chords.length; i < len; i++) {\n\t\t\tif (i !== 0) {\n\t\t\t\tresult += ';';\n\t\t\t}\n\t\t\tresult += this.chords[i].getHashCode();\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic equals(other: Keybinding | null): boolean {\n\t\tif (other === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.chords.length !== other.chords.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < this.chords.length; i++) {\n\t\t\tif (!this.chords[i].equals(other.chords[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class ResolvedChord {\n\tconstructor(\n\t\tpublic readonly ctrlKey: boolean,\n\t\tpublic readonly shiftKey: boolean,\n\t\tpublic readonly altKey: boolean,\n\t\tpublic readonly metaKey: boolean,\n\t\tpublic readonly keyLabel: string | null,\n\t\tpublic readonly keyAriaLabel: string | null\n\t) { }\n}\n\nexport type SingleModifierChord = 'ctrl' | 'shift' | 'alt' | 'meta';\n\n/**\n * A resolved keybinding. Consists of one or multiple chords.\n */\nexport abstract class ResolvedKeybinding {\n\t/**\n\t * This prints the binding in a format suitable for displaying in the UI.\n\t */\n\tpublic abstract getLabel(): string | null;\n\t/**\n\t * This prints the binding in a format suitable for ARIA.\n\t */\n\tpublic abstract getAriaLabel(): string | null;\n\t/**\n\t * This prints the binding in a format suitable for electron's accelerators.\n\t * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md\n\t */\n\tpublic abstract getElectronAccelerator(): string | null;\n\t/**\n\t * This prints the binding in a format suitable for user settings.\n\t */\n\tpublic abstract getUserSettingsLabel(): string | null;\n\t/**\n\t * Is the user settings label reflecting the label?\n\t */\n\tpublic abstract isWYSIWYG(): boolean;\n\t/**\n\t * Does the keybinding consist of more than one chord?\n\t */\n\tpublic abstract hasMultipleChords(): boolean;\n\t/**\n\t * Returns the chords that comprise of the keybinding.\n\t */\n\tpublic abstract getChords(): ResolvedChord[];\n\t/**\n\t * Returns the chords as strings useful for dispatching.\n\t * Returns null for modifier only chords.\n\t * @example keybinding \"Shift\" -> null\n\t * @example keybinding (\"D\" with shift == true) -> \"shift+D\"\n\t */\n\tpublic abstract getDispatchChords(): (string | null)[];\n\t/**\n\t * Returns the modifier only chords as strings useful for dispatching.\n\t * Returns null for chords that contain more than one modifier or a regular key.\n\t * @example keybinding \"Shift\" -> \"shift\"\n\t * @example keybinding (\"D\" with shift == true\") -> null\n\t */\n\tpublic abstract getSingleModifierDispatchChords(): (SingleModifierChord | null)[];\n}\n"],
  "mappings": "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",
  "names": ["BinaryKeybindingsMask"]
}
