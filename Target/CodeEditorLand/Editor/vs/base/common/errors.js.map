{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/errors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface ErrorListenerCallback {\n\t(error: any): void;\n}\n\nexport interface ErrorListenerUnbind {\n\t(): void;\n}\n\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nexport class ErrorHandler {\n\tprivate unexpectedErrorHandler: (e: any) => void;\n\tprivate listeners: ErrorListenerCallback[];\n\n\tconstructor() {\n\n\t\tthis.listeners = [];\n\n\t\tthis.unexpectedErrorHandler = function (e: any) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tif (ErrorNoTelemetry.isErrorNoTelemetry(e)) {\n\t\t\t\t\t\tthrow new ErrorNoTelemetry(e.message + '\\n\\n' + e.stack);\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new Error(e.message + '\\n\\n' + e.stack);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}, 0);\n\t\t};\n\t}\n\n\taddListener(listener: ErrorListenerCallback): ErrorListenerUnbind {\n\t\tthis.listeners.push(listener);\n\n\t\treturn () => {\n\t\t\tthis._removeListener(listener);\n\t\t};\n\t}\n\n\tprivate emit(e: any): void {\n\t\tthis.listeners.forEach((listener) => {\n\t\t\tlistener(e);\n\t\t});\n\t}\n\n\tprivate _removeListener(listener: ErrorListenerCallback): void {\n\t\tthis.listeners.splice(this.listeners.indexOf(listener), 1);\n\t}\n\n\tsetUnexpectedErrorHandler(newUnexpectedErrorHandler: (e: any) => void): void {\n\t\tthis.unexpectedErrorHandler = newUnexpectedErrorHandler;\n\t}\n\n\tgetUnexpectedErrorHandler(): (e: any) => void {\n\t\treturn this.unexpectedErrorHandler;\n\t}\n\n\tonUnexpectedError(e: any): void {\n\t\tthis.unexpectedErrorHandler(e);\n\t\tthis.emit(e);\n\t}\n\n\t// For external errors, we don't want the listeners to be called\n\tonUnexpectedExternalError(e: any): void {\n\t\tthis.unexpectedErrorHandler(e);\n\t}\n}\n\nexport const errorHandler = new ErrorHandler();\n\n/** @skipMangle */\nexport function setUnexpectedErrorHandler(newUnexpectedErrorHandler: (e: any) => void): void {\n\terrorHandler.setUnexpectedErrorHandler(newUnexpectedErrorHandler);\n}\n\n/**\n * Returns if the error is a SIGPIPE error. SIGPIPE errors should generally be\n * logged at most once, to avoid a loop.\n *\n * @see https://github.com/microsoft/vscode-remote-release/issues/6481\n */\nexport function isSigPipeError(e: unknown): e is Error {\n\tif (!e || typeof e !== 'object') {\n\t\treturn false;\n\t}\n\n\tconst cast = e as Record<string, string | undefined>;\n\treturn cast.code === 'EPIPE' && cast.syscall?.toUpperCase() === 'WRITE';\n}\n\n/**\n * This function should only be called with errors that indicate a bug in the product.\n * E.g. buggy extensions/invalid user-input/network issues should not be able to trigger this code path.\n * If they are, this indicates there is also a bug in the product.\n*/\nexport function onBugIndicatingError(e: any): undefined {\n\terrorHandler.onUnexpectedError(e);\n\treturn undefined;\n}\n\nexport function onUnexpectedError(e: any): undefined {\n\t// ignore errors from cancelled promises\n\tif (!isCancellationError(e)) {\n\t\terrorHandler.onUnexpectedError(e);\n\t}\n\treturn undefined;\n}\n\nexport function onUnexpectedExternalError(e: any): undefined {\n\t// ignore errors from cancelled promises\n\tif (!isCancellationError(e)) {\n\t\terrorHandler.onUnexpectedExternalError(e);\n\t}\n\treturn undefined;\n}\n\nexport interface SerializedError {\n\treadonly $isError: true;\n\treadonly name: string;\n\treadonly message: string;\n\treadonly stack: string;\n\treadonly noTelemetry: boolean;\n}\n\nexport function transformErrorForSerialization(error: Error): SerializedError;\nexport function transformErrorForSerialization(error: any): any;\nexport function transformErrorForSerialization(error: any): any {\n\tif (error instanceof Error) {\n\t\tconst { name, message } = error;\n\t\tconst stack: string = (<any>error).stacktrace || (<any>error).stack;\n\t\treturn {\n\t\t\t$isError: true,\n\t\t\tname,\n\t\t\tmessage,\n\t\t\tstack,\n\t\t\tnoTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)\n\t\t};\n\t}\n\n\t// return as is\n\treturn error;\n}\n\nexport function transformErrorFromSerialization(data: SerializedError): Error {\n\tlet error: Error;\n\tif (data.noTelemetry) {\n\t\terror = new ErrorNoTelemetry();\n\t} else {\n\t\terror = new Error();\n\t\terror.name = data.name;\n\t}\n\terror.message = data.message;\n\terror.stack = data.stack;\n\treturn error;\n}\n\n// see https://github.com/v8/v8/wiki/Stack%20Trace%20API#basic-stack-traces\nexport interface V8CallSite {\n\tgetThis(): unknown;\n\tgetTypeName(): string | null;\n\tgetFunction(): Function | undefined;\n\tgetFunctionName(): string | null;\n\tgetMethodName(): string | null;\n\tgetFileName(): string | null;\n\tgetLineNumber(): number | null;\n\tgetColumnNumber(): number | null;\n\tgetEvalOrigin(): string | undefined;\n\tisToplevel(): boolean;\n\tisEval(): boolean;\n\tisNative(): boolean;\n\tisConstructor(): boolean;\n\ttoString(): string;\n}\n\nconst canceledName = 'Canceled';\n\n/**\n * Checks if the given error is a promise in canceled state\n */\nexport function isCancellationError(error: any): boolean {\n\tif (error instanceof CancellationError) {\n\t\treturn true;\n\t}\n\treturn error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n\n// !!!IMPORTANT!!!\n// Do NOT change this class because it is also used as an API-type.\nexport class CancellationError extends Error {\n\tconstructor() {\n\t\tsuper(canceledName);\n\t\tthis.name = this.message;\n\t}\n}\n\n/**\n * @deprecated use {@link CancellationError `new CancellationError()`} instead\n */\nexport function canceled(): Error {\n\tconst error = new Error(canceledName);\n\terror.name = error.message;\n\treturn error;\n}\n\nexport function illegalArgument(name?: string): Error {\n\tif (name) {\n\t\treturn new Error(`Illegal argument: ${name}`);\n\t} else {\n\t\treturn new Error('Illegal argument');\n\t}\n}\n\nexport function illegalState(name?: string): Error {\n\tif (name) {\n\t\treturn new Error(`Illegal state: ${name}`);\n\t} else {\n\t\treturn new Error('Illegal state');\n\t}\n}\n\nexport class ReadonlyError extends TypeError {\n\tconstructor(name?: string) {\n\t\tsuper(name ? `${name} is read-only and cannot be changed` : 'Cannot change read-only property');\n\t}\n}\n\nexport function getErrorMessage(err: any): string {\n\tif (!err) {\n\t\treturn 'Error';\n\t}\n\n\tif (err.message) {\n\t\treturn err.message;\n\t}\n\n\tif (err.stack) {\n\t\treturn err.stack.split('\\n')[0];\n\t}\n\n\treturn String(err);\n}\n\nexport class NotImplementedError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper('NotImplemented');\n\t\tif (message) {\n\t\t\tthis.message = message;\n\t\t}\n\t}\n}\n\nexport class NotSupportedError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper('NotSupported');\n\t\tif (message) {\n\t\t\tthis.message = message;\n\t\t}\n\t}\n}\n\nexport class ExpectedError extends Error {\n\treadonly isExpected = true;\n}\n\n/**\n * Error that when thrown won't be logged in telemetry as an unhandled error.\n */\nexport class ErrorNoTelemetry extends Error {\n\toverride readonly name: string;\n\n\tconstructor(msg?: string) {\n\t\tsuper(msg);\n\t\tthis.name = 'CodeExpectedError';\n\t}\n\n\tpublic static fromError(err: Error): ErrorNoTelemetry {\n\t\tif (err instanceof ErrorNoTelemetry) {\n\t\t\treturn err;\n\t\t}\n\n\t\tconst result = new ErrorNoTelemetry();\n\t\tresult.message = err.message;\n\t\tresult.stack = err.stack;\n\t\treturn result;\n\t}\n\n\tpublic static isErrorNoTelemetry(err: Error): err is ErrorNoTelemetry {\n\t\treturn err.name === 'CodeExpectedError';\n\t}\n}\n\n/**\n * This error indicates a bug.\n * Do not throw this for invalid user input.\n * Only catch this error to recover gracefully from bugs.\n */\nexport class BugIndicatingError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message || 'An unexpected bug occurred.');\n\t\tObject.setPrototypeOf(this, BugIndicatingError.prototype);\n\n\t\t// Because we know for sure only buggy code throws this,\n\t\t// we definitely want to break here and fix the bug.\n\t\t// eslint-disable-next-line no-debugger\n\t\t// debugger;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
