import{range as p}from"./arrays.js";import{CancellationTokenSource as m}from"./cancellation.js";import{CancellationError as i}from"./errors.js";function g(r){return{isResolved:!!r,promise:null,cts:null,promiseIndexes:new Set,elements:r||[]}}function u(r){return{firstPage:r,total:r.length,pageSize:r.length,getPage:(e,n)=>Promise.resolve(r)}}class T{pager;pages=[];get length(){return this.pager.total}constructor(e){this.pager=Array.isArray(e)?u(e):e;const n=Math.ceil(this.pager.total/this.pager.pageSize);this.pages=[g(this.pager.firstPage.slice()),...p(n-1).map(()=>g())]}isResolved(e){const n=Math.floor(e/this.pager.pageSize);return!!this.pages[n].isResolved}get(e){const n=Math.floor(e/this.pager.pageSize),s=e%this.pager.pageSize;return this.pages[n].elements[s]}resolve(e,n){if(n.isCancellationRequested)return Promise.reject(new i);const s=Math.floor(e/this.pager.pageSize),o=e%this.pager.pageSize,t=this.pages[s];if(t.isResolved)return Promise.resolve(t.elements[o]);t.promise||(t.cts=new m,t.promise=this.pager.getPage(s,t.cts.token).then(l=>{t.elements=l,t.isResolved=!0,t.promise=null,t.cts=null},l=>(t.isResolved=!1,t.promise=null,t.cts=null,Promise.reject(l))));const a=n.onCancellationRequested(()=>{t.cts&&(t.promiseIndexes.delete(e),t.promiseIndexes.size===0&&t.cts.cancel())});return t.promiseIndexes.add(e),t.promise.then(()=>t.elements[o]).finally(()=>a.dispose())}}class h{constructor(e,n=500){this.model=e;this.timeout=n}get length(){return this.model.length}isResolved(e){return this.model.isResolved(e)}get(e){return this.model.get(e)}resolve(e,n){return new Promise((s,o)=>{if(n.isCancellationRequested)return o(new i);const t=setTimeout(()=>{if(n.isCancellationRequested)return o(new i);a.dispose(),this.model.resolve(e,n).then(s,o)},this.timeout),a=n.onCancellationRequested(()=>{clearTimeout(t),a.dispose(),o(new i)})})}}function f(r,e){return{firstPage:r.firstPage.map(e),total:r.total,pageSize:r.pageSize,getPage:(n,s)=>r.getPage(n,s).then(o=>o.map(e))}}export{h as DelayedPagedModel,T as PagedModel,f as mapPager,u as singlePagePager};
