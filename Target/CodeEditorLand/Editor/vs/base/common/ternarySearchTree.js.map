{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/ternarySearchTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { shuffle } from './arrays.js';\nimport { CharCode } from './charCode.js';\nimport { compare, compareIgnoreCase, compareSubstring, compareSubstringIgnoreCase } from './strings.js';\nimport { URI } from './uri.js';\n\nexport interface IKeyIterator<K> {\n\treset(key: K): this;\n\tnext(): this;\n\n\thasNext(): boolean;\n\tcmp(a: string): number;\n\tvalue(): string;\n}\n\nexport class StringIterator implements IKeyIterator<string> {\n\n\tprivate _value: string = '';\n\tprivate _pos: number = 0;\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._pos = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tthis._pos += 1;\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._pos < this._value.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tconst aCode = a.charCodeAt(0);\n\t\tconst thisCode = this._value.charCodeAt(this._pos);\n\t\treturn aCode - thisCode;\n\t}\n\n\tvalue(): string {\n\t\treturn this._value[this._pos];\n\t}\n}\n\nexport class ConfigKeysIterator implements IKeyIterator<string> {\n\n\tprivate _value!: string;\n\tprivate _from!: number;\n\tprivate _to!: number;\n\n\tconstructor(\n\t\tprivate readonly _caseSensitive: boolean = true\n\t) { }\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._value.length;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._value.length; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Period) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\t\treturn this._caseSensitive\n\t\t\t? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n\t\t\t: compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nexport class PathIterator implements IKeyIterator<string> {\n\n\tprivate _value!: string;\n\tprivate _valueLen!: number;\n\tprivate _from!: number;\n\tprivate _to!: number;\n\n\tconstructor(\n\t\tprivate readonly _splitOnBackslash: boolean = true,\n\t\tprivate readonly _caseSensitive: boolean = true\n\t) { }\n\n\treset(key: string): this {\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\tthis._value = key;\n\t\tthis._valueLen = key.length;\n\t\tfor (let pos = key.length - 1; pos >= 0; pos--, this._valueLen--) {\n\t\t\tconst ch = this._value.charCodeAt(pos);\n\t\t\tif (!(ch === CharCode.Slash || this._splitOnBackslash && ch === CharCode.Backslash)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._valueLen;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._valueLen; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Slash || this._splitOnBackslash && ch === CharCode.Backslash) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\t\treturn this._caseSensitive\n\t\t\t? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n\t\t\t: compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nconst enum UriIteratorState {\n\tScheme = 1, Authority = 2, Path = 3, Query = 4, Fragment = 5\n}\n\nexport class UriIterator implements IKeyIterator<URI> {\n\n\tprivate _pathIterator!: PathIterator;\n\tprivate _value!: URI;\n\tprivate _states: UriIteratorState[] = [];\n\tprivate _stateIdx: number = 0;\n\n\tconstructor(\n\t\tprivate readonly _ignorePathCasing: (uri: URI) => boolean,\n\t\tprivate readonly _ignoreQueryAndFragment: (uri: URI) => boolean) { }\n\n\treset(key: URI): this {\n\t\tthis._value = key;\n\t\tthis._states = [];\n\t\tif (this._value.scheme) {\n\t\t\tthis._states.push(UriIteratorState.Scheme);\n\t\t}\n\t\tif (this._value.authority) {\n\t\t\tthis._states.push(UriIteratorState.Authority);\n\t\t}\n\t\tif (this._value.path) {\n\t\t\tthis._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\n\t\t\tthis._pathIterator.reset(key.path);\n\t\t\tif (this._pathIterator.value()) {\n\t\t\t\tthis._states.push(UriIteratorState.Path);\n\t\t\t}\n\t\t}\n\t\tif (!this._ignoreQueryAndFragment(key)) {\n\t\t\tif (this._value.query) {\n\t\t\t\tthis._states.push(UriIteratorState.Query);\n\t\t\t}\n\t\t\tif (this._value.fragment) {\n\t\t\t\tthis._states.push(UriIteratorState.Fragment);\n\t\t\t}\n\t\t}\n\t\tthis._stateIdx = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext()) {\n\t\t\tthis._pathIterator.next();\n\t\t} else {\n\t\t\tthis._stateIdx += 1;\n\t\t}\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext())\n\t\t\t|| this._stateIdx < this._states.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n\t\t\treturn compareIgnoreCase(a, this._value.scheme);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n\t\t\treturn compareIgnoreCase(a, this._value.authority);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n\t\t\treturn this._pathIterator.cmp(a);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n\t\t\treturn compare(a, this._value.query);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n\t\t\treturn compare(a, this._value.fragment);\n\t\t}\n\t\tthrow new Error();\n\t}\n\n\tvalue(): string {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n\t\t\treturn this._value.scheme;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n\t\t\treturn this._value.authority;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n\t\t\treturn this._pathIterator.value();\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n\t\t\treturn this._value.query;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n\t\t\treturn this._value.fragment;\n\t\t}\n\t\tthrow new Error();\n\t}\n}\nclass TernarySearchTreeNode<K, V> {\n\theight: number = 1;\n\tsegment!: string;\n\tvalue: V | undefined;\n\tkey: K | undefined;\n\tleft: TernarySearchTreeNode<K, V> | undefined;\n\tmid: TernarySearchTreeNode<K, V> | undefined;\n\tright: TernarySearchTreeNode<K, V> | undefined;\n\n\tisEmpty(): boolean {\n\t\treturn !this.left && !this.mid && !this.right && !this.value;\n\t}\n\n\trotateLeft() {\n\t\tconst tmp = this.right!;\n\t\tthis.right = tmp.left;\n\t\ttmp.left = this;\n\t\tthis.updateHeight();\n\t\ttmp.updateHeight();\n\t\treturn tmp;\n\t}\n\n\trotateRight() {\n\t\tconst tmp = this.left!;\n\t\tthis.left = tmp.right;\n\t\ttmp.right = this;\n\t\tthis.updateHeight();\n\t\ttmp.updateHeight();\n\t\treturn tmp;\n\t}\n\n\tupdateHeight() {\n\t\tthis.height = 1 + Math.max(this.heightLeft, this.heightRight);\n\t}\n\n\tbalanceFactor() {\n\t\treturn this.heightRight - this.heightLeft;\n\t}\n\n\tget heightLeft() {\n\t\treturn this.left?.height ?? 0;\n\t}\n\n\tget heightRight() {\n\t\treturn this.right?.height ?? 0;\n\t}\n}\n\nconst enum Dir {\n\tLeft = -1,\n\tMid = 0,\n\tRight = 1\n}\n\nexport class TernarySearchTree<K, V> {\n\n\tstatic forUris<E>(ignorePathCasing: (key: URI) => boolean = () => false, ignoreQueryAndFragment: (key: URI) => boolean = () => false): TernarySearchTree<URI, E> {\n\t\treturn new TernarySearchTree<URI, E>(new UriIterator(ignorePathCasing, ignoreQueryAndFragment));\n\t}\n\n\tstatic forPaths<E>(ignorePathCasing = false): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new PathIterator(undefined, !ignorePathCasing));\n\t}\n\n\tstatic forStrings<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new StringIterator());\n\t}\n\n\tstatic forConfigKeys<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new ConfigKeysIterator());\n\t}\n\n\tprivate _iter: IKeyIterator<K>;\n\tprivate _root: TernarySearchTreeNode<K, V> | undefined;\n\n\tconstructor(segments: IKeyIterator<K>) {\n\t\tthis._iter = segments;\n\t}\n\n\tclear(): void {\n\t\tthis._root = undefined;\n\t}\n\n\t/**\n\t * Fill the tree with the same value of the given keys\n\t */\n\tfill(element: V, keys: readonly K[]): void;\n\t/**\n\t * Fill the tree with given [key,value]-tuples\n\t */\n\tfill(values: readonly [K, V][]): void;\n\tfill(values: readonly [K, V][] | V, keys?: readonly K[]): void {\n\t\tif (keys) {\n\t\t\tconst arr = keys.slice(0);\n\t\t\tshuffle(arr);\n\t\t\tfor (const k of arr) {\n\t\t\t\tthis.set(k, (<V>values));\n\t\t\t}\n\t\t} else {\n\t\t\tconst arr = (<[K, V][]>values).slice(0);\n\t\t\tshuffle(arr);\n\t\t\tfor (const entry of arr) {\n\t\t\t\tthis.set(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tset(key: K, element: V): V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node: TernarySearchTreeNode<K, V>;\n\n\t\tif (!this._root) {\n\t\t\tthis._root = new TernarySearchTreeNode<K, V>();\n\t\t\tthis._root.segment = iter.value();\n\t\t}\n\t\tconst stack: [Dir, TernarySearchTreeNode<K, V>][] = [];\n\n\t\t// find insert_node\n\t\tnode = this._root;\n\t\twhile (true) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tif (!node.left) {\n\t\t\t\t\tnode.left = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.left.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Left, node]);\n\t\t\t\tnode = node.left;\n\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tif (!node.right) {\n\t\t\t\t\tnode.right = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.right.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Right, node]);\n\t\t\t\tnode = node.right;\n\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\tnode.mid = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.mid.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Mid, node]);\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// set value\n\t\tconst oldElement = node.value;\n\t\tnode.value = element;\n\t\tnode.key = key;\n\n\t\t// balance\n\t\tfor (let i = stack.length - 1; i >= 0; i--) {\n\t\t\tconst node = stack[i][1];\n\n\t\t\tnode.updateHeight();\n\t\t\tconst bf = node.balanceFactor();\n\n\t\t\tif (bf < -1 || bf > 1) {\n\t\t\t\t// needs rotate\n\t\t\t\tconst d1 = stack[i][0];\n\t\t\t\tconst d2 = stack[i + 1][0];\n\n\t\t\t\tif (d1 === Dir.Right && d2 === Dir.Right) {\n\t\t\t\t\t//right, right -> rotate left\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\n\t\t\t\t} else if (d1 === Dir.Left && d2 === Dir.Left) {\n\t\t\t\t\t// left, left -> rotate right\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\n\t\t\t\t} else if (d1 === Dir.Right && d2 === Dir.Left) {\n\t\t\t\t\t// right, left -> double rotate right, left\n\t\t\t\t\tnode.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\n\t\t\t\t} else if (d1 === Dir.Left && d2 === Dir.Right) {\n\t\t\t\t\t// left, right -> double rotate left, right\n\t\t\t\t\tnode.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\n\t\t\t\t// patch path to parent\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tswitch (stack[i - 1][0]) {\n\t\t\t\t\t\tcase Dir.Left:\n\t\t\t\t\t\t\tstack[i - 1][1].left = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Dir.Right:\n\t\t\t\t\t\t\tstack[i - 1][1].right = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Dir.Mid:\n\t\t\t\t\t\t\tstack[i - 1][1].mid = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._root = stack[0][1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn oldElement;\n\t}\n\n\tget(key: K): V | undefined {\n\t\treturn this._getNode(key)?.value;\n\t}\n\n\tprivate _getNode(key: K) {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\thas(key: K): boolean {\n\t\tconst node = this._getNode(key);\n\t\treturn !(node?.value === undefined && node?.mid === undefined);\n\t}\n\n\tdelete(key: K): void {\n\t\treturn this._delete(key, false);\n\t}\n\n\tdeleteSuperstr(key: K): void {\n\t\treturn this._delete(key, true);\n\t}\n\n\tprivate _delete(key: K, superStr: boolean): void {\n\t\tconst iter = this._iter.reset(key);\n\t\tconst stack: [Dir, TernarySearchTreeNode<K, V>][] = [];\n\t\tlet node = this._root;\n\n\t\t// find node\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tstack.push([Dir.Left, node]);\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tstack.push([Dir.Right, node]);\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tstack.push([Dir.Mid, node]);\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!node) {\n\t\t\t// node not found\n\t\t\treturn;\n\t\t}\n\n\t\tif (superStr) {\n\t\t\t// removing children, reset height\n\t\t\tnode.left = undefined;\n\t\t\tnode.mid = undefined;\n\t\t\tnode.right = undefined;\n\t\t\tnode.height = 1;\n\t\t} else {\n\t\t\t// removing element\n\t\t\tnode.key = undefined;\n\t\t\tnode.value = undefined;\n\t\t}\n\n\t\t// BST node removal\n\t\tif (!node.mid && !node.value) {\n\t\t\tif (node.left && node.right) {\n\t\t\t\t// full node\n\t\t\t\t// replace deleted-node with the min-node of the right branch.\n\t\t\t\t// If there is no true min-node leave things as they are\n\t\t\t\tconst min = this._min(node.right);\n\t\t\t\tif (min.key) {\n\t\t\t\t\tconst { key, value, segment } = min;\n\t\t\t\t\tthis._delete(min.key, false);\n\t\t\t\t\tnode.key = key;\n\t\t\t\t\tnode.value = value;\n\t\t\t\t\tnode.segment = segment;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// empty or half empty\n\t\t\t\tconst newChild = node.left ?? node.right;\n\t\t\t\tif (stack.length > 0) {\n\t\t\t\t\tconst [dir, parent] = stack[stack.length - 1];\n\t\t\t\t\tswitch (dir) {\n\t\t\t\t\t\tcase Dir.Left: parent.left = newChild; break;\n\t\t\t\t\t\tcase Dir.Mid: parent.mid = newChild; break;\n\t\t\t\t\t\tcase Dir.Right: parent.right = newChild; break;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._root = newChild;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// AVL balance\n\t\tfor (let i = stack.length - 1; i >= 0; i--) {\n\t\t\tconst node = stack[i][1];\n\n\t\t\tnode.updateHeight();\n\t\t\tconst bf = node.balanceFactor();\n\t\t\tif (bf > 1) {\n\t\t\t\t// right heavy\n\t\t\t\tif (node.right!.balanceFactor() >= 0) {\n\t\t\t\t\t// right, right -> rotate left\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\t\t\t\t} else {\n\t\t\t\t\t// right, left -> double rotate\n\t\t\t\t\tnode.right = node.right!.rotateRight();\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\t\t\t\t}\n\n\t\t\t} else if (bf < -1) {\n\t\t\t\t// left heavy\n\t\t\t\tif (node.left!.balanceFactor() <= 0) {\n\t\t\t\t\t// left, left -> rotate right\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\t\t\t\t} else {\n\t\t\t\t\t// left, right -> double rotate\n\t\t\t\t\tnode.left = node.left!.rotateLeft();\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// patch path to parent\n\t\t\tif (i > 0) {\n\t\t\t\tswitch (stack[i - 1][0]) {\n\t\t\t\t\tcase Dir.Left:\n\t\t\t\t\t\tstack[i - 1][1].left = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Dir.Right:\n\t\t\t\t\t\tstack[i - 1][1].right = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Dir.Mid:\n\t\t\t\t\t\tstack[i - 1][1].mid = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._root = stack[0][1];\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _min(node: TernarySearchTreeNode<K, V>): TernarySearchTreeNode<K, V> {\n\t\twhile (node.left) {\n\t\t\tnode = node.left;\n\t\t}\n\t\treturn node;\n\t}\n\n\tfindSubstr(key: K): V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\tlet candidate: V | undefined = undefined;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tcandidate = node.value || candidate;\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node && node.value || candidate;\n\t}\n\n\tfindSuperstr(key: K): IterableIterator<[K, V]> | undefined {\n\t\treturn this._findSuperstrOrElement(key, false);\n\t}\n\n\tprivate _findSuperstrOrElement(key: K, allowValue: true): IterableIterator<[K, V]> | V | undefined;\n\tprivate _findSuperstrOrElement(key: K, allowValue: false): IterableIterator<[K, V]> | undefined;\n\tprivate _findSuperstrOrElement(key: K, allowValue: boolean): IterableIterator<[K, V]> | V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\t// collect\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\tif (allowValue) {\n\t\t\t\t\t\treturn node.value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn this._entries(node.mid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\thasElementOrSubtree(key: K): boolean {\n\t\treturn this._findSuperstrOrElement(key, true) !== undefined;\n\t}\n\n\tforEach(callback: (value: V, index: K) => any): void {\n\t\tfor (const [key, value] of this) {\n\t\t\tcallback(value, key);\n\t\t}\n\t}\n\n\t*[Symbol.iterator](): IterableIterator<[K, V]> {\n\t\tyield* this._entries(this._root);\n\t}\n\n\tprivate _entries(node: TernarySearchTreeNode<K, V> | undefined): IterableIterator<[K, V]> {\n\t\tconst result: [K, V][] = [];\n\t\tthis._dfsEntries(node, result);\n\t\treturn result[Symbol.iterator]();\n\t}\n\n\tprivate _dfsEntries(node: TernarySearchTreeNode<K, V> | undefined, bucket: [K, V][]) {\n\t\t// DFS\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\t\tif (node.left) {\n\t\t\tthis._dfsEntries(node.left, bucket);\n\t\t}\n\t\tif (node.value) {\n\t\t\tbucket.push([node.key!, node.value]);\n\t\t}\n\t\tif (node.mid) {\n\t\t\tthis._dfsEntries(node.mid, bucket);\n\t\t}\n\t\tif (node.right) {\n\t\t\tthis._dfsEntries(node.right, bucket);\n\t\t}\n\t}\n\n\t// for debug/testing\n\t_isBalanced(): boolean {\n\t\tconst nodeIsBalanced = (node: TernarySearchTreeNode<any, any> | undefined): boolean => {\n\t\t\tif (!node) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst bf = node.balanceFactor();\n\t\t\tif (bf < -1 || bf > 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn nodeIsBalanced(node.left) && nodeIsBalanced(node.right);\n\t\t};\n\t\treturn nodeIsBalanced(this._root);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["UriIteratorState", "Dir", "node", "key"]
}
