{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/console.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from './uri.js';\n\nexport interface IRemoteConsoleLog {\n\ttype: string;\n\tseverity: string;\n\targuments: string;\n}\n\nexport interface IStackArgument {\n\t__$stack: string;\n}\n\nexport interface IStackFrame {\n\turi: URI;\n\tline: number;\n\tcolumn: number;\n}\n\nexport function isRemoteConsoleLog(obj: any): obj is IRemoteConsoleLog {\n\tconst entry = obj as IRemoteConsoleLog;\n\n\treturn entry && typeof entry.type === 'string' && typeof entry.severity === 'string';\n}\n\nexport function parse(entry: IRemoteConsoleLog): { args: any[]; stack?: string } {\n\tconst args: any[] = [];\n\tlet stack: string | undefined;\n\n\t// Parse Entry\n\ttry {\n\t\tconst parsedArguments: any[] = JSON.parse(entry.arguments);\n\n\t\t// Check for special stack entry as last entry\n\t\tconst stackArgument = parsedArguments[parsedArguments.length - 1] as IStackArgument;\n\t\tif (stackArgument && stackArgument.__$stack) {\n\t\t\tparsedArguments.pop(); // stack is handled specially\n\t\t\tstack = stackArgument.__$stack;\n\t\t}\n\n\t\targs.push(...parsedArguments);\n\t} catch (error) {\n\t\targs.push('Unable to log remote console arguments', entry.arguments);\n\t}\n\n\treturn { args, stack };\n}\n\nexport function getFirstFrame(entry: IRemoteConsoleLog): IStackFrame | undefined;\nexport function getFirstFrame(stack: string | undefined): IStackFrame | undefined;\nexport function getFirstFrame(arg0: IRemoteConsoleLog | string | undefined): IStackFrame | undefined {\n\tif (typeof arg0 !== 'string') {\n\t\treturn getFirstFrame(parse(arg0!).stack);\n\t}\n\n\t// Parse a source information out of the stack if we have one. Format can be:\n\t// at vscode.commands.registerCommand (/Users/someone/Desktop/test-ts/out/src/extension.js:18:17)\n\t// or\n\t// at /Users/someone/Desktop/test-ts/out/src/extension.js:18:17\n\t// or\n\t// at c:\\Users\\someone\\Desktop\\end-js\\extension.js:19:17\n\t// or\n\t// at e.$executeContributedCommand(c:\\Users\\someone\\Desktop\\end-js\\extension.js:19:17)\n\tconst stack = arg0;\n\tif (stack) {\n\t\tconst topFrame = findFirstFrame(stack);\n\n\t\t// at [^\\/]* => line starts with \"at\" followed by any character except '/' (to not capture unix paths too late)\n\t\t// (?:(?:[a-zA-Z]+:)|(?:[\\/])|(?:\\\\\\\\) => windows drive letter OR unix root OR unc root\n\t\t// (?:.+) => simple pattern for the path, only works because of the line/col pattern after\n\t\t// :(?:\\d+):(?:\\d+) => :line:column data\n\t\tconst matches = /at [^\\/]*((?:(?:[a-zA-Z]+:)|(?:[\\/])|(?:\\\\\\\\))(?:.+)):(\\d+):(\\d+)/.exec(topFrame || '');\n\t\tif (matches && matches.length === 4) {\n\t\t\treturn {\n\t\t\t\turi: URI.file(matches[1]),\n\t\t\t\tline: Number(matches[2]),\n\t\t\t\tcolumn: Number(matches[3])\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nfunction findFirstFrame(stack: string | undefined): string | undefined {\n\tif (!stack) {\n\t\treturn stack;\n\t}\n\n\tconst newlineIndex = stack.indexOf('\\n');\n\tif (newlineIndex === -1) {\n\t\treturn stack;\n\t}\n\n\treturn stack.substring(0, newlineIndex);\n}\n\nexport function log(entry: IRemoteConsoleLog, label: string): void {\n\tconst { args, stack } = parse(entry);\n\n\tconst isOneStringArg = typeof args[0] === 'string' && args.length === 1;\n\n\tlet topFrame = findFirstFrame(stack);\n\tif (topFrame) {\n\t\ttopFrame = `(${topFrame.trim()})`;\n\t}\n\n\tlet consoleArgs: string[] = [];\n\n\t// First arg is a string\n\tif (typeof args[0] === 'string') {\n\t\tif (topFrame && isOneStringArg) {\n\t\t\tconsoleArgs = [`%c[${label}] %c${args[0]} %c${topFrame}`, color('blue'), color(''), color('grey')];\n\t\t} else {\n\t\t\tconsoleArgs = [`%c[${label}] %c${args[0]}`, color('blue'), color(''), ...args.slice(1)];\n\t\t}\n\t}\n\n\t// First arg is something else, just apply all\n\telse {\n\t\tconsoleArgs = [`%c[${label}]%`, color('blue'), ...args];\n\t}\n\n\t// Stack: add to args unless already added\n\tif (topFrame && !isOneStringArg) {\n\t\tconsoleArgs.push(topFrame);\n\t}\n\n\t// Log it\n\tif (typeof (console as any)[entry.severity] !== 'function') {\n\t\tthrow new Error('Unknown console method');\n\t}\n\t(console as any)[entry.severity].apply(console, consoleArgs);\n}\n\nfunction color(color: string): string {\n\treturn `color: ${color}`;\n}\n"],
  "mappings": ";;AAKA,SAAS,WAAW;AAkBb,SAAS,mBAAmB,KAAoC;AACtE,QAAM,QAAQ;AAEd,SAAO,SAAS,OAAO,MAAM,SAAS,YAAY,OAAO,MAAM,aAAa;AAC7E;AAJgB;AAMT,SAAS,MAAM,OAA2D;AAChF,QAAM,OAAc,CAAC;AACrB,MAAI;AAGJ,MAAI;AACH,UAAM,kBAAyB,KAAK,MAAM,MAAM,SAAS;AAGzD,UAAM,gBAAgB,gBAAgB,gBAAgB,SAAS,CAAC;AAChE,QAAI,iBAAiB,cAAc,UAAU;AAC5C,sBAAgB,IAAI;AACpB,cAAQ,cAAc;AAAA,IACvB;AAEA,SAAK,KAAK,GAAG,eAAe;AAAA,EAC7B,SAAS,OAAO;AACf,SAAK,KAAK,0CAA0C,MAAM,SAAS;AAAA,EACpE;AAEA,SAAO,EAAE,MAAM,MAAM;AACtB;AArBgB;AAyBT,SAAS,cAAc,MAAuE;AACpG,MAAI,OAAO,SAAS,UAAU;AAC7B,WAAO,cAAc,MAAM,IAAK,EAAE,KAAK;AAAA,EACxC;AAUA,QAAM,QAAQ;AACd,MAAI,OAAO;AACV,UAAM,WAAW,eAAe,KAAK;AAMrC,UAAM,UAAU,oEAAoE,KAAK,YAAY,EAAE;AACvG,QAAI,WAAW,QAAQ,WAAW,GAAG;AACpC,aAAO;AAAA,QACN,KAAK,IAAI,KAAK,QAAQ,CAAC,CAAC;AAAA,QACxB,MAAM,OAAO,QAAQ,CAAC,CAAC;AAAA,QACvB,QAAQ,OAAO,QAAQ,CAAC,CAAC;AAAA,MAC1B;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAhCgB;AAkChB,SAAS,eAAe,OAA+C;AACtE,MAAI,CAAC,OAAO;AACX,WAAO;AAAA,EACR;AAEA,QAAM,eAAe,MAAM,QAAQ,IAAI;AACvC,MAAI,iBAAiB,IAAI;AACxB,WAAO;AAAA,EACR;AAEA,SAAO,MAAM,UAAU,GAAG,YAAY;AACvC;AAXS;AAaF,SAAS,IAAI,OAA0B,OAAqB;AAClE,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,KAAK;AAEnC,QAAM,iBAAiB,OAAO,KAAK,CAAC,MAAM,YAAY,KAAK,WAAW;AAEtE,MAAI,WAAW,eAAe,KAAK;AACnC,MAAI,UAAU;AACb,eAAW,IAAI,SAAS,KAAK,CAAC;AAAA,EAC/B;AAEA,MAAI,cAAwB,CAAC;AAG7B,MAAI,OAAO,KAAK,CAAC,MAAM,UAAU;AAChC,QAAI,YAAY,gBAAgB;AAC/B,oBAAc,CAAC,MAAM,KAAK,OAAO,KAAK,CAAC,CAAC,MAAM,QAAQ,IAAI,MAAM,MAAM,GAAG,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC;AAAA,IAClG,OAAO;AACN,oBAAc,CAAC,MAAM,KAAK,OAAO,KAAK,CAAC,CAAC,IAAI,MAAM,MAAM,GAAG,MAAM,EAAE,GAAG,GAAG,KAAK,MAAM,CAAC,CAAC;AAAA,IACvF;AAAA,EACD,OAGK;AACJ,kBAAc,CAAC,MAAM,KAAK,MAAM,MAAM,MAAM,GAAG,GAAG,IAAI;AAAA,EACvD;AAGA,MAAI,YAAY,CAAC,gBAAgB;AAChC,gBAAY,KAAK,QAAQ;AAAA,EAC1B;AAGA,MAAI,OAAQ,QAAgB,MAAM,QAAQ,MAAM,YAAY;AAC3D,UAAM,IAAI,MAAM,wBAAwB;AAAA,EACzC;AACA,EAAC,QAAgB,MAAM,QAAQ,EAAE,MAAM,SAAS,WAAW;AAC5D;AApCgB;AAsChB,SAAS,MAAMA,QAAuB;AACrC,SAAO,UAAUA,MAAK;AACvB;AAFS;",
  "names": ["color"]
}
