{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/paging.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { range } from './arrays.js';\nimport { CancellationToken, CancellationTokenSource } from './cancellation.js';\nimport { CancellationError } from './errors.js';\n\n/**\n * A Pager is a stateless abstraction over a paged collection.\n */\nexport interface IPager<T> {\n\tfirstPage: T[];\n\ttotal: number;\n\tpageSize: number;\n\tgetPage(pageIndex: number, cancellationToken: CancellationToken): Promise<T[]>;\n}\n\ninterface IPage<T> {\n\tisResolved: boolean;\n\tpromise: Promise<void> | null;\n\tcts: CancellationTokenSource | null;\n\tpromiseIndexes: Set<number>;\n\telements: T[];\n}\n\nfunction createPage<T>(elements?: T[]): IPage<T> {\n\treturn {\n\t\tisResolved: !!elements,\n\t\tpromise: null,\n\t\tcts: null,\n\t\tpromiseIndexes: new Set<number>(),\n\t\telements: elements || []\n\t};\n}\n\n/**\n * A PagedModel is a stateful model over an abstracted paged collection.\n */\nexport interface IPagedModel<T> {\n\tlength: number;\n\tisResolved(index: number): boolean;\n\tget(index: number): T;\n\tresolve(index: number, cancellationToken: CancellationToken): Promise<T>;\n}\n\nexport function singlePagePager<T>(elements: T[]): IPager<T> {\n\treturn {\n\t\tfirstPage: elements,\n\t\ttotal: elements.length,\n\t\tpageSize: elements.length,\n\t\tgetPage: (pageIndex: number, cancellationToken: CancellationToken): Promise<T[]> => {\n\t\t\treturn Promise.resolve(elements);\n\t\t}\n\t};\n}\n\nexport class PagedModel<T> implements IPagedModel<T> {\n\n\tprivate pager: IPager<T>;\n\tprivate pages: IPage<T>[] = [];\n\n\tget length(): number { return this.pager.total; }\n\n\tconstructor(arg: IPager<T> | T[]) {\n\t\tthis.pager = Array.isArray(arg) ? singlePagePager<T>(arg) : arg;\n\n\t\tconst totalPages = Math.ceil(this.pager.total / this.pager.pageSize);\n\n\t\tthis.pages = [\n\t\t\tcreatePage(this.pager.firstPage.slice()),\n\t\t\t...range(totalPages - 1).map(() => createPage<T>())\n\t\t];\n\t}\n\n\tisResolved(index: number): boolean {\n\t\tconst pageIndex = Math.floor(index / this.pager.pageSize);\n\t\tconst page = this.pages[pageIndex];\n\n\t\treturn !!page.isResolved;\n\t}\n\n\tget(index: number): T {\n\t\tconst pageIndex = Math.floor(index / this.pager.pageSize);\n\t\tconst indexInPage = index % this.pager.pageSize;\n\t\tconst page = this.pages[pageIndex];\n\n\t\treturn page.elements[indexInPage];\n\t}\n\n\tresolve(index: number, cancellationToken: CancellationToken): Promise<T> {\n\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\treturn Promise.reject(new CancellationError());\n\t\t}\n\n\t\tconst pageIndex = Math.floor(index / this.pager.pageSize);\n\t\tconst indexInPage = index % this.pager.pageSize;\n\t\tconst page = this.pages[pageIndex];\n\n\t\tif (page.isResolved) {\n\t\t\treturn Promise.resolve(page.elements[indexInPage]);\n\t\t}\n\n\t\tif (!page.promise) {\n\t\t\tpage.cts = new CancellationTokenSource();\n\t\t\tpage.promise = this.pager.getPage(pageIndex, page.cts.token)\n\t\t\t\t.then(elements => {\n\t\t\t\t\tpage.elements = elements;\n\t\t\t\t\tpage.isResolved = true;\n\t\t\t\t\tpage.promise = null;\n\t\t\t\t\tpage.cts = null;\n\t\t\t\t}, err => {\n\t\t\t\t\tpage.isResolved = false;\n\t\t\t\t\tpage.promise = null;\n\t\t\t\t\tpage.cts = null;\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t});\n\t\t}\n\n\t\tconst listener = cancellationToken.onCancellationRequested(() => {\n\t\t\tif (!page.cts) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tpage.promiseIndexes.delete(index);\n\n\t\t\tif (page.promiseIndexes.size === 0) {\n\t\t\t\tpage.cts.cancel();\n\t\t\t}\n\t\t});\n\n\t\tpage.promiseIndexes.add(index);\n\n\t\treturn page.promise.then(() => page.elements[indexInPage])\n\t\t\t.finally(() => listener.dispose());\n\t}\n}\n\nexport class DelayedPagedModel<T> implements IPagedModel<T> {\n\n\tget length(): number { return this.model.length; }\n\n\tconstructor(private model: IPagedModel<T>, private timeout: number = 500) { }\n\n\tisResolved(index: number): boolean {\n\t\treturn this.model.isResolved(index);\n\t}\n\n\tget(index: number): T {\n\t\treturn this.model.get(index);\n\t}\n\n\tresolve(index: number, cancellationToken: CancellationToken): Promise<T> {\n\t\treturn new Promise((c, e) => {\n\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\treturn e(new CancellationError());\n\t\t\t}\n\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\t\treturn e(new CancellationError());\n\t\t\t\t}\n\n\t\t\t\ttimeoutCancellation.dispose();\n\t\t\t\tthis.model.resolve(index, cancellationToken).then(c, e);\n\t\t\t}, this.timeout);\n\n\t\t\tconst timeoutCancellation = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(timer);\n\t\t\t\ttimeoutCancellation.dispose();\n\t\t\t\te(new CancellationError());\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * Similar to array.map, `mapPager` lets you map the elements of an\n * abstract paged collection to another type.\n */\nexport function mapPager<T, R>(pager: IPager<T>, fn: (t: T) => R): IPager<R> {\n\treturn {\n\t\tfirstPage: pager.firstPage.map(fn),\n\t\ttotal: pager.total,\n\t\tpageSize: pager.pageSize,\n\t\tgetPage: (pageIndex, token) => pager.getPage(pageIndex, token).then(r => r.map(fn))\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
