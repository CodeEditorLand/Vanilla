{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/color.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"./charCode.js\";\n\nfunction roundFloat(number: number, decimalPoints: number): number {\n\tconst decimal = Math.pow(10, decimalPoints);\n\treturn Math.round(number * decimal) / decimal;\n}\n\nexport class RGBA {\n\t_rgbaBrand: void = undefined;\n\n\t/**\n\t * Red: integer in [0-255]\n\t */\n\treadonly r: number;\n\n\t/**\n\t * Green: integer in [0-255]\n\t */\n\treadonly g: number;\n\n\t/**\n\t * Blue: integer in [0-255]\n\t */\n\treadonly b: number;\n\n\t/**\n\t * Alpha: float in [0-1]\n\t */\n\treadonly a: number;\n\n\tconstructor(r: number, g: number, b: number, a = 1) {\n\t\tthis.r = Math.min(255, Math.max(0, r)) | 0;\n\t\tthis.g = Math.min(255, Math.max(0, g)) | 0;\n\t\tthis.b = Math.min(255, Math.max(0, b)) | 0;\n\t\tthis.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n\t}\n\n\tstatic equals(a: RGBA, b: RGBA): boolean {\n\t\treturn a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n\t}\n}\n\nexport class HSLA {\n\t_hslaBrand: void = undefined;\n\n\t/**\n\t * Hue: integer in [0, 360]\n\t */\n\treadonly h: number;\n\n\t/**\n\t * Saturation: float in [0, 1]\n\t */\n\treadonly s: number;\n\n\t/**\n\t * Luminosity: float in [0, 1]\n\t */\n\treadonly l: number;\n\n\t/**\n\t * Alpha: float in [0, 1]\n\t */\n\treadonly a: number;\n\n\tconstructor(h: number, s: number, l: number, a: number) {\n\t\tthis.h = Math.max(Math.min(360, h), 0) | 0;\n\t\tthis.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n\t\tthis.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n\t\tthis.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n\t}\n\n\tstatic equals(a: HSLA, b: HSLA): boolean {\n\t\treturn a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n\t}\n\n\t/**\n\t * Converts an RGB color value to HSL. Conversion formula\n\t * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n\t * Assumes r, g, and b are contained in the set [0, 255] and\n\t * returns h in the set [0, 360], s, and l in the set [0, 1].\n\t */\n\tstatic fromRGBA(rgba: RGBA): HSLA {\n\t\tconst r = rgba.r / 255;\n\t\tconst g = rgba.g / 255;\n\t\tconst b = rgba.b / 255;\n\t\tconst a = rgba.a;\n\n\t\tconst max = Math.max(r, g, b);\n\t\tconst min = Math.min(r, g, b);\n\t\tlet h = 0;\n\t\tlet s = 0;\n\t\tconst l = (min + max) / 2;\n\t\tconst chroma = max - min;\n\n\t\tif (chroma > 0) {\n\t\t\ts = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n\n\t\t\tswitch (max) {\n\t\t\t\tcase r:\n\t\t\t\t\th = (g - b) / chroma + (g < b ? 6 : 0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase g:\n\t\t\t\t\th = (b - r) / chroma + 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase b:\n\t\t\t\t\th = (r - g) / chroma + 4;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\th *= 60;\n\t\t\th = Math.round(h);\n\t\t}\n\t\treturn new HSLA(h, s, l, a);\n\t}\n\n\tprivate static _hue2rgb(p: number, q: number, t: number): number {\n\t\tif (t < 0) {\n\t\t\tt += 1;\n\t\t}\n\t\tif (t > 1) {\n\t\t\tt -= 1;\n\t\t}\n\t\tif (t < 1 / 6) {\n\t\t\treturn p + (q - p) * 6 * t;\n\t\t}\n\t\tif (t < 1 / 2) {\n\t\t\treturn q;\n\t\t}\n\t\tif (t < 2 / 3) {\n\t\t\treturn p + (q - p) * (2 / 3 - t) * 6;\n\t\t}\n\t\treturn p;\n\t}\n\n\t/**\n\t * Converts an HSL color value to RGB. Conversion formula\n\t * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n\t * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n\t * returns r, g, and b in the set [0, 255].\n\t */\n\tstatic toRGBA(hsla: HSLA): RGBA {\n\t\tconst h = hsla.h / 360;\n\t\tconst { s, l, a } = hsla;\n\t\tlet r: number, g: number, b: number;\n\n\t\tif (s === 0) {\n\t\t\tr = g = b = l; // achromatic\n\t\t} else {\n\t\t\tconst q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\tconst p = 2 * l - q;\n\t\t\tr = HSLA._hue2rgb(p, q, h + 1 / 3);\n\t\t\tg = HSLA._hue2rgb(p, q, h);\n\t\t\tb = HSLA._hue2rgb(p, q, h - 1 / 3);\n\t\t}\n\n\t\treturn new RGBA(\n\t\t\tMath.round(r * 255),\n\t\t\tMath.round(g * 255),\n\t\t\tMath.round(b * 255),\n\t\t\ta,\n\t\t);\n\t}\n}\n\nexport class HSVA {\n\t_hsvaBrand: void = undefined;\n\n\t/**\n\t * Hue: integer in [0, 360]\n\t */\n\treadonly h: number;\n\n\t/**\n\t * Saturation: float in [0, 1]\n\t */\n\treadonly s: number;\n\n\t/**\n\t * Value: float in [0, 1]\n\t */\n\treadonly v: number;\n\n\t/**\n\t * Alpha: float in [0, 1]\n\t */\n\treadonly a: number;\n\n\tconstructor(h: number, s: number, v: number, a: number) {\n\t\tthis.h = Math.max(Math.min(360, h), 0) | 0;\n\t\tthis.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n\t\tthis.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n\t\tthis.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n\t}\n\n\tstatic equals(a: HSVA, b: HSVA): boolean {\n\t\treturn a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n\t}\n\n\t// from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n\tstatic fromRGBA(rgba: RGBA): HSVA {\n\t\tconst r = rgba.r / 255;\n\t\tconst g = rgba.g / 255;\n\t\tconst b = rgba.b / 255;\n\t\tconst cmax = Math.max(r, g, b);\n\t\tconst cmin = Math.min(r, g, b);\n\t\tconst delta = cmax - cmin;\n\t\tconst s = cmax === 0 ? 0 : delta / cmax;\n\t\tlet m: number;\n\n\t\tif (delta === 0) {\n\t\t\tm = 0;\n\t\t} else if (cmax === r) {\n\t\t\tm = ((((g - b) / delta) % 6) + 6) % 6;\n\t\t} else if (cmax === g) {\n\t\t\tm = (b - r) / delta + 2;\n\t\t} else {\n\t\t\tm = (r - g) / delta + 4;\n\t\t}\n\n\t\treturn new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n\t}\n\n\t// from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n\tstatic toRGBA(hsva: HSVA): RGBA {\n\t\tconst { h, s, v, a } = hsva;\n\t\tconst c = v * s;\n\t\tconst x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n\t\tconst m = v - c;\n\t\tlet [r, g, b] = [0, 0, 0];\n\n\t\tif (h < 60) {\n\t\t\tr = c;\n\t\t\tg = x;\n\t\t} else if (h < 120) {\n\t\t\tr = x;\n\t\t\tg = c;\n\t\t} else if (h < 180) {\n\t\t\tg = c;\n\t\t\tb = x;\n\t\t} else if (h < 240) {\n\t\t\tg = x;\n\t\t\tb = c;\n\t\t} else if (h < 300) {\n\t\t\tr = x;\n\t\t\tb = c;\n\t\t} else if (h <= 360) {\n\t\t\tr = c;\n\t\t\tb = x;\n\t\t}\n\n\t\tr = Math.round((r + m) * 255);\n\t\tg = Math.round((g + m) * 255);\n\t\tb = Math.round((b + m) * 255);\n\n\t\treturn new RGBA(r, g, b, a);\n\t}\n}\n\nexport class Color {\n\tstatic fromHex(hex: string): Color {\n\t\treturn Color.Format.CSS.parseHex(hex) || Color.red;\n\t}\n\n\tstatic equals(a: Color | null, b: Color | null): boolean {\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a || !b) {\n\t\t\treturn false;\n\t\t}\n\t\treturn a.equals(b);\n\t}\n\n\treadonly rgba: RGBA;\n\tprivate _hsla?: HSLA;\n\tget hsla(): HSLA {\n\t\tif (this._hsla) {\n\t\t\treturn this._hsla;\n\t\t} else {\n\t\t\treturn HSLA.fromRGBA(this.rgba);\n\t\t}\n\t}\n\n\tprivate _hsva?: HSVA;\n\tget hsva(): HSVA {\n\t\tif (this._hsva) {\n\t\t\treturn this._hsva;\n\t\t}\n\t\treturn HSVA.fromRGBA(this.rgba);\n\t}\n\n\tconstructor(arg: RGBA | HSLA | HSVA) {\n\t\tif (!arg) {\n\t\t\tthrow new Error(\"Color needs a value\");\n\t\t} else if (arg instanceof RGBA) {\n\t\t\tthis.rgba = arg;\n\t\t} else if (arg instanceof HSLA) {\n\t\t\tthis._hsla = arg;\n\t\t\tthis.rgba = HSLA.toRGBA(arg);\n\t\t} else if (arg instanceof HSVA) {\n\t\t\tthis._hsva = arg;\n\t\t\tthis.rgba = HSVA.toRGBA(arg);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid color ctor argument\");\n\t\t}\n\t}\n\n\tequals(other: Color | null): boolean {\n\t\treturn (\n\t\t\t!!other &&\n\t\t\tRGBA.equals(this.rgba, other.rgba) &&\n\t\t\tHSLA.equals(this.hsla, other.hsla) &&\n\t\t\tHSVA.equals(this.hsva, other.hsva)\n\t\t);\n\t}\n\n\t/**\n\t * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n\t */\n\tgetRelativeLuminance(): number {\n\t\tconst R = Color._relativeLuminanceForComponent(this.rgba.r);\n\t\tconst G = Color._relativeLuminanceForComponent(this.rgba.g);\n\t\tconst B = Color._relativeLuminanceForComponent(this.rgba.b);\n\t\tconst luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n\n\t\treturn roundFloat(luminance, 4);\n\t}\n\n\tprivate static _relativeLuminanceForComponent(color: number): number {\n\t\tconst c = color / 255;\n\t\treturn c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n\t}\n\n\t/**\n\t * http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t * Returns the contrast ration number in the set [1, 21].\n\t */\n\tgetContrastRatio(another: Color): number {\n\t\tconst lum1 = this.getRelativeLuminance();\n\t\tconst lum2 = another.getRelativeLuminance();\n\t\treturn lum1 > lum2\n\t\t\t? (lum1 + 0.05) / (lum2 + 0.05)\n\t\t\t: (lum2 + 0.05) / (lum1 + 0.05);\n\t}\n\n\t/**\n\t *\thttp://24ways.org/2010/calculating-color-contrast\n\t *  Return 'true' if darker color otherwise 'false'\n\t */\n\tisDarker(): boolean {\n\t\tconst yiq =\n\t\t\t(this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n\t\treturn yiq < 128;\n\t}\n\n\t/**\n\t *\thttp://24ways.org/2010/calculating-color-contrast\n\t *  Return 'true' if lighter color otherwise 'false'\n\t */\n\tisLighter(): boolean {\n\t\tconst yiq =\n\t\t\t(this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n\t\treturn yiq >= 128;\n\t}\n\n\tisLighterThan(another: Color): boolean {\n\t\tconst lum1 = this.getRelativeLuminance();\n\t\tconst lum2 = another.getRelativeLuminance();\n\t\treturn lum1 > lum2;\n\t}\n\n\tisDarkerThan(another: Color): boolean {\n\t\tconst lum1 = this.getRelativeLuminance();\n\t\tconst lum2 = another.getRelativeLuminance();\n\t\treturn lum1 < lum2;\n\t}\n\n\tlighten(factor: number): Color {\n\t\treturn new Color(\n\t\t\tnew HSLA(\n\t\t\t\tthis.hsla.h,\n\t\t\t\tthis.hsla.s,\n\t\t\t\tthis.hsla.l + this.hsla.l * factor,\n\t\t\t\tthis.hsla.a,\n\t\t\t),\n\t\t);\n\t}\n\n\tdarken(factor: number): Color {\n\t\treturn new Color(\n\t\t\tnew HSLA(\n\t\t\t\tthis.hsla.h,\n\t\t\t\tthis.hsla.s,\n\t\t\t\tthis.hsla.l - this.hsla.l * factor,\n\t\t\t\tthis.hsla.a,\n\t\t\t),\n\t\t);\n\t}\n\n\ttransparent(factor: number): Color {\n\t\tconst { r, g, b, a } = this.rgba;\n\t\treturn new Color(new RGBA(r, g, b, a * factor));\n\t}\n\n\tisTransparent(): boolean {\n\t\treturn this.rgba.a === 0;\n\t}\n\n\tisOpaque(): boolean {\n\t\treturn this.rgba.a === 1;\n\t}\n\n\topposite(): Color {\n\t\treturn new Color(\n\t\t\tnew RGBA(\n\t\t\t\t255 - this.rgba.r,\n\t\t\t\t255 - this.rgba.g,\n\t\t\t\t255 - this.rgba.b,\n\t\t\t\tthis.rgba.a,\n\t\t\t),\n\t\t);\n\t}\n\n\tblend(c: Color): Color {\n\t\tconst rgba = c.rgba;\n\n\t\t// Convert to 0..1 opacity\n\t\tconst thisA = this.rgba.a;\n\t\tconst colorA = rgba.a;\n\n\t\tconst a = thisA + colorA * (1 - thisA);\n\t\tif (a < 1e-6) {\n\t\t\treturn Color.transparent;\n\t\t}\n\n\t\tconst r =\n\t\t\t(this.rgba.r * thisA) / a + (rgba.r * colorA * (1 - thisA)) / a;\n\t\tconst g =\n\t\t\t(this.rgba.g * thisA) / a + (rgba.g * colorA * (1 - thisA)) / a;\n\t\tconst b =\n\t\t\t(this.rgba.b * thisA) / a + (rgba.b * colorA * (1 - thisA)) / a;\n\n\t\treturn new Color(new RGBA(r, g, b, a));\n\t}\n\n\tmakeOpaque(opaqueBackground: Color): Color {\n\t\tif (this.isOpaque() || opaqueBackground.rgba.a !== 1) {\n\t\t\t// only allow to blend onto a non-opaque color onto a opaque color\n\t\t\treturn this;\n\t\t}\n\n\t\tconst { r, g, b, a } = this.rgba;\n\n\t\t// https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity\n\t\treturn new Color(\n\t\t\tnew RGBA(\n\t\t\t\topaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r),\n\t\t\t\topaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g),\n\t\t\t\topaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b),\n\t\t\t\t1,\n\t\t\t),\n\t\t);\n\t}\n\n\tflatten(...backgrounds: Color[]): Color {\n\t\tconst background = backgrounds.reduceRight((accumulator, color) => {\n\t\t\treturn Color._flatten(color, accumulator);\n\t\t});\n\t\treturn Color._flatten(this, background);\n\t}\n\n\tprivate static _flatten(foreground: Color, background: Color) {\n\t\tconst backgroundAlpha = 1 - foreground.rgba.a;\n\t\treturn new Color(\n\t\t\tnew RGBA(\n\t\t\t\tbackgroundAlpha * background.rgba.r +\n\t\t\t\t\tforeground.rgba.a * foreground.rgba.r,\n\t\t\t\tbackgroundAlpha * background.rgba.g +\n\t\t\t\t\tforeground.rgba.a * foreground.rgba.g,\n\t\t\t\tbackgroundAlpha * background.rgba.b +\n\t\t\t\t\tforeground.rgba.a * foreground.rgba.b,\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _toString?: string;\n\ttoString(): string {\n\t\tif (!this._toString) {\n\t\t\tthis._toString = Color.Format.CSS.format(this);\n\t\t}\n\t\treturn this._toString;\n\t}\n\n\tstatic getLighterColor(of: Color, relative: Color, factor?: number): Color {\n\t\tif (of.isLighterThan(relative)) {\n\t\t\treturn of;\n\t\t}\n\t\tfactor = factor ? factor : 0.5;\n\t\tconst lum1 = of.getRelativeLuminance();\n\t\tconst lum2 = relative.getRelativeLuminance();\n\t\tfactor = (factor * (lum2 - lum1)) / lum2;\n\t\treturn of.lighten(factor);\n\t}\n\n\tstatic getDarkerColor(of: Color, relative: Color, factor?: number): Color {\n\t\tif (of.isDarkerThan(relative)) {\n\t\t\treturn of;\n\t\t}\n\t\tfactor = factor ? factor : 0.5;\n\t\tconst lum1 = of.getRelativeLuminance();\n\t\tconst lum2 = relative.getRelativeLuminance();\n\t\tfactor = (factor * (lum1 - lum2)) / lum1;\n\t\treturn of.darken(factor);\n\t}\n\n\tstatic readonly white = new Color(new RGBA(255, 255, 255, 1));\n\tstatic readonly black = new Color(new RGBA(0, 0, 0, 1));\n\tstatic readonly red = new Color(new RGBA(255, 0, 0, 1));\n\tstatic readonly blue = new Color(new RGBA(0, 0, 255, 1));\n\tstatic readonly green = new Color(new RGBA(0, 255, 0, 1));\n\tstatic readonly cyan = new Color(new RGBA(0, 255, 255, 1));\n\tstatic readonly lightgrey = new Color(new RGBA(211, 211, 211, 1));\n\tstatic readonly transparent = new Color(new RGBA(0, 0, 0, 0));\n}\n\nexport namespace Color {\n\texport namespace Format {\n\t\texport namespace CSS {\n\t\t\texport function formatRGB(color: Color): string {\n\t\t\t\tif (color.rgba.a === 1) {\n\t\t\t\t\treturn `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n\t\t\t\t}\n\n\t\t\t\treturn Color.Format.CSS.formatRGBA(color);\n\t\t\t}\n\n\t\t\texport function formatRGBA(color: Color): string {\n\t\t\t\treturn `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+color.rgba.a.toFixed(2)})`;\n\t\t\t}\n\n\t\t\texport function formatHSL(color: Color): string {\n\t\t\t\tif (color.hsla.a === 1) {\n\t\t\t\t\treturn `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n\t\t\t\t}\n\n\t\t\t\treturn Color.Format.CSS.formatHSLA(color);\n\t\t\t}\n\n\t\t\texport function formatHSLA(color: Color): string {\n\t\t\t\treturn `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n\t\t\t}\n\n\t\t\tfunction _toTwoDigitHex(n: number): string {\n\t\t\t\tconst r = n.toString(16);\n\t\t\t\treturn r.length !== 2 ? \"0\" + r : r;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Formats the color as #RRGGBB\n\t\t\t */\n\t\t\texport function formatHex(color: Color): string {\n\t\t\t\treturn `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Formats the color as #RRGGBBAA\n\t\t\t * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n\t\t\t */\n\t\t\texport function formatHexA(color: Color, compact = false): string {\n\t\t\t\tif (compact && color.rgba.a === 1) {\n\t\t\t\t\treturn Color.Format.CSS.formatHex(color);\n\t\t\t\t}\n\n\t\t\t\treturn `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * The default format will use HEX if opaque and RGBA otherwise.\n\t\t\t */\n\t\t\texport function format(color: Color): string {\n\t\t\t\tif (color.isOpaque()) {\n\t\t\t\t\treturn Color.Format.CSS.formatHex(color);\n\t\t\t\t}\n\n\t\t\t\treturn Color.Format.CSS.formatRGBA(color);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Converts an Hex color value to a Color.\n\t\t\t * returns r, g, and b are contained in the set [0, 255]\n\t\t\t * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n\t\t\t */\n\t\t\texport function parseHex(hex: string): Color | null {\n\t\t\t\tconst length = hex.length;\n\n\t\t\t\tif (length === 0) {\n\t\t\t\t\t// Invalid color\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (hex.charCodeAt(0) !== CharCode.Hash) {\n\t\t\t\t\t// Does not begin with a #\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (length === 7) {\n\t\t\t\t\t// #RRGGBB format\n\t\t\t\t\tconst r =\n\t\t\t\t\t\t16 * _parseHexDigit(hex.charCodeAt(1)) +\n\t\t\t\t\t\t_parseHexDigit(hex.charCodeAt(2));\n\t\t\t\t\tconst g =\n\t\t\t\t\t\t16 * _parseHexDigit(hex.charCodeAt(3)) +\n\t\t\t\t\t\t_parseHexDigit(hex.charCodeAt(4));\n\t\t\t\t\tconst b =\n\t\t\t\t\t\t16 * _parseHexDigit(hex.charCodeAt(5)) +\n\t\t\t\t\t\t_parseHexDigit(hex.charCodeAt(6));\n\t\t\t\t\treturn new Color(new RGBA(r, g, b, 1));\n\t\t\t\t}\n\n\t\t\t\tif (length === 9) {\n\t\t\t\t\t// #RRGGBBAA format\n\t\t\t\t\tconst r =\n\t\t\t\t\t\t16 * _parseHexDigit(hex.charCodeAt(1)) +\n\t\t\t\t\t\t_parseHexDigit(hex.charCodeAt(2));\n\t\t\t\t\tconst g =\n\t\t\t\t\t\t16 * _parseHexDigit(hex.charCodeAt(3)) +\n\t\t\t\t\t\t_parseHexDigit(hex.charCodeAt(4));\n\t\t\t\t\tconst b =\n\t\t\t\t\t\t16 * _parseHexDigit(hex.charCodeAt(5)) +\n\t\t\t\t\t\t_parseHexDigit(hex.charCodeAt(6));\n\t\t\t\t\tconst a =\n\t\t\t\t\t\t16 * _parseHexDigit(hex.charCodeAt(7)) +\n\t\t\t\t\t\t_parseHexDigit(hex.charCodeAt(8));\n\t\t\t\t\treturn new Color(new RGBA(r, g, b, a / 255));\n\t\t\t\t}\n\n\t\t\t\tif (length === 4) {\n\t\t\t\t\t// #RGB format\n\t\t\t\t\tconst r = _parseHexDigit(hex.charCodeAt(1));\n\t\t\t\t\tconst g = _parseHexDigit(hex.charCodeAt(2));\n\t\t\t\t\tconst b = _parseHexDigit(hex.charCodeAt(3));\n\t\t\t\t\treturn new Color(\n\t\t\t\t\t\tnew RGBA(16 * r + r, 16 * g + g, 16 * b + b),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (length === 5) {\n\t\t\t\t\t// #RGBA format\n\t\t\t\t\tconst r = _parseHexDigit(hex.charCodeAt(1));\n\t\t\t\t\tconst g = _parseHexDigit(hex.charCodeAt(2));\n\t\t\t\t\tconst b = _parseHexDigit(hex.charCodeAt(3));\n\t\t\t\t\tconst a = _parseHexDigit(hex.charCodeAt(4));\n\t\t\t\t\treturn new Color(\n\t\t\t\t\t\tnew RGBA(\n\t\t\t\t\t\t\t16 * r + r,\n\t\t\t\t\t\t\t16 * g + g,\n\t\t\t\t\t\t\t16 * b + b,\n\t\t\t\t\t\t\t(16 * a + a) / 255,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Invalid color\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfunction _parseHexDigit(charCode: CharCode): number {\n\t\t\t\tswitch (charCode) {\n\t\t\t\t\tcase CharCode.Digit0:\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\tcase CharCode.Digit1:\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\tcase CharCode.Digit2:\n\t\t\t\t\t\treturn 2;\n\t\t\t\t\tcase CharCode.Digit3:\n\t\t\t\t\t\treturn 3;\n\t\t\t\t\tcase CharCode.Digit4:\n\t\t\t\t\t\treturn 4;\n\t\t\t\t\tcase CharCode.Digit5:\n\t\t\t\t\t\treturn 5;\n\t\t\t\t\tcase CharCode.Digit6:\n\t\t\t\t\t\treturn 6;\n\t\t\t\t\tcase CharCode.Digit7:\n\t\t\t\t\t\treturn 7;\n\t\t\t\t\tcase CharCode.Digit8:\n\t\t\t\t\t\treturn 8;\n\t\t\t\t\tcase CharCode.Digit9:\n\t\t\t\t\t\treturn 9;\n\t\t\t\t\tcase CharCode.a:\n\t\t\t\t\t\treturn 10;\n\t\t\t\t\tcase CharCode.A:\n\t\t\t\t\t\treturn 10;\n\t\t\t\t\tcase CharCode.b:\n\t\t\t\t\t\treturn 11;\n\t\t\t\t\tcase CharCode.B:\n\t\t\t\t\t\treturn 11;\n\t\t\t\t\tcase CharCode.c:\n\t\t\t\t\t\treturn 12;\n\t\t\t\t\tcase CharCode.C:\n\t\t\t\t\t\treturn 12;\n\t\t\t\t\tcase CharCode.d:\n\t\t\t\t\t\treturn 13;\n\t\t\t\t\tcase CharCode.D:\n\t\t\t\t\t\treturn 13;\n\t\t\t\t\tcase CharCode.e:\n\t\t\t\t\t\treturn 14;\n\t\t\t\t\tcase CharCode.E:\n\t\t\t\t\t\treturn 14;\n\t\t\t\t\tcase CharCode.f:\n\t\t\t\t\t\treturn 15;\n\t\t\t\t\tcase CharCode.F:\n\t\t\t\t\t\treturn 15;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Color", "Format", "CSS"]
}
