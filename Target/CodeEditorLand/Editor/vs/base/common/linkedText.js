var h=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var r=(o,t,n,i)=>{for(var e=i>1?void 0:i?c(t,n):t,s=o.length-1,u;s>=0;s--)(u=o[s])&&(e=(i?u(t,n,e):u(e))||e);return i&&e&&h(t,n,e),e};function f(o,t,n){let i=null,e=null;if(typeof n.value=="function"?(i="value",e=n.value,e.length!==0&&console.warn("Memoize should only be used in functions with zero parameters")):typeof n.get=="function"&&(i="get",e=n.get),!e)throw new Error("not supported");let s=`$memoize$${t}`;n[i]=function(...u){return this.hasOwnProperty(s)||Object.defineProperty(this,s,{configurable:!1,enumerable:!1,writable:!1,value:e.apply(this,u)}),this[s]}}var l=class{constructor(t){this.nodes=t}toString(){return this.nodes.map(t=>typeof t=="string"?t:t.label).join("")}};r([f],l.prototype,"toString",1);var a=/\[([^\]]+)\]\(((?:https?:\/\/|command:|file:)[^\)\s]+)(?: (["'])(.+?)(\3))?\)/gi;function m(o){let t=[],n=0,i;for(;i=a.exec(o);){i.index-n>0&&t.push(o.substring(n,i.index));let[,e,s,,u]=i;u?t.push({label:e,href:s,title:u}):t.push({label:e,href:s}),n=i.index+i[0].length}return n<o.length&&t.push(o.substring(n)),new l(t)}export{l as LinkedText,m as parseLinkedText};
