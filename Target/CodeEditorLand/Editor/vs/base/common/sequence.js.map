{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/sequence.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"./event.js\";\n\nexport interface ISplice<T> {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly toInsert: readonly T[];\n}\n\nexport interface ISpliceable<T> {\n\tsplice(start: number, deleteCount: number, toInsert: readonly T[]): void;\n}\n\nexport interface ISequence<T> {\n\treadonly elements: T[];\n\treadonly onDidSplice: Event<ISplice<T>>;\n}\n\nexport class Sequence<T> implements ISequence<T>, ISpliceable<T> {\n\treadonly elements: T[] = [];\n\n\tprivate readonly _onDidSplice = new Emitter<ISplice<T>>();\n\treadonly onDidSplice: Event<ISplice<T>> = this._onDidSplice.event;\n\n\tsplice(\n\t\tstart: number,\n\t\tdeleteCount: number,\n\t\ttoInsert: readonly T[] = [],\n\t): void {\n\t\tthis.elements.splice(start, deleteCount, ...toInsert);\n\t\tthis._onDidSplice.fire({ start, deleteCount, toInsert });\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAA2B;AAiB7B,MAAM,SAAoD;AAAA,EAtBjE,OAsBiE;AAAA;AAAA;AAAA,EACvD,WAAgB,CAAC;AAAA,EAET,eAAe,IAAI,QAAoB;AAAA,EAC/C,cAAiC,KAAK,aAAa;AAAA,EAE5D,OACC,OACA,aACA,WAAyB,CAAC,GACnB;AACP,SAAK,SAAS,OAAO,OAAO,aAAa,GAAG,QAAQ;AACpD,SAAK,aAAa,KAAK,EAAE,OAAO,aAAa,SAAS,CAAC;AAAA,EACxD;AACD;",
  "names": []
}
