var s=class{unexpectedErrorHandler;listeners;constructor(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout(()=>{throw e.stack?o.isErrorNoTelemetry(e)?new o(e.message+`

`+e.stack):new Error(e.message+`

`+e.stack):e},0)}}addListener(e){return this.listeners.push(e),()=>{this._removeListener(e)}}emit(e){this.listeners.forEach(n=>{n(e)})}_removeListener(e){this.listeners.splice(this.listeners.indexOf(e),1)}setUnexpectedErrorHandler(e){this.unexpectedErrorHandler=e}getUnexpectedErrorHandler(){return this.unexpectedErrorHandler}onUnexpectedError(e){this.unexpectedErrorHandler(e),this.emit(e)}onUnexpectedExternalError(e){this.unexpectedErrorHandler(e)}},d=new s;function l(r){p(r)||d.onUnexpectedError(r)}var i="Canceled";function p(r){return r instanceof a?!0:r instanceof Error&&r.name===i&&r.message===i}var a=class extends Error{constructor(){super(i),this.name=this.message}};var o=class r extends Error{name;constructor(e){super(e),this.name="CodeExpectedError"}static fromError(e){if(e instanceof r)return e;let n=new r;return n.message=e.message,n.stack=e.stack,n}static isErrorNoTelemetry(e){return e.name==="CodeExpectedError"}},t=class r extends Error{constructor(e){super(e||"An unexpected bug occurred."),Object.setPrototypeOf(this,r.prototype)}};function g(r,e){if(!r)throw new Error(e?`Assertion failed (${e})`:"Assertion Failed")}function x(r,e="Unreachable"){throw new Error(e)}function m(r,e="unexpected state"){if(!r)throw new t(`Assertion Failed: ${e}`)}function y(r){r||l(new t("Soft Assertion Failed"))}function h(r){if(!r()){debugger;r(),l(new t("Assertion Failed"))}}function b(r,e){let n=0;for(;n<r.length-1;){let c=r[n],u=r[n+1];if(!e(c,u))return!1;n++}return!0}export{m as assert,h as assertFn,x as assertNever,b as checkAdjacentItems,g as ok,y as softAssert};
