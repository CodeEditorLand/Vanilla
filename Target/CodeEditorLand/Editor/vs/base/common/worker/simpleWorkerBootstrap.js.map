{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/worker/simpleWorkerBootstrap.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype IRequestHandlerFactory,\n\tSimpleWorkerServer,\n} from \"./simpleWorker.js\";\n\ntype MessageEvent = {\n\tdata: any;\n};\n\ndeclare const globalThis: {\n\tpostMessage: (message: any) => void;\n\tonmessage: (event: MessageEvent) => void;\n};\n\nlet initialized = false;\n\nfunction initialize(factory: IRequestHandlerFactory) {\n\tif (initialized) {\n\t\treturn;\n\t}\n\tinitialized = true;\n\n\tconst simpleWorker = new SimpleWorkerServer(\n\t\t(msg) => globalThis.postMessage(msg),\n\t\t(workerServer) => factory(workerServer),\n\t);\n\n\tglobalThis.onmessage = (e: MessageEvent) => {\n\t\tsimpleWorker.onmessage(e.data);\n\t};\n}\n\nexport function bootstrapSimpleWorker(factory: IRequestHandlerFactory) {\n\tglobalThis.onmessage = (_e: MessageEvent) => {\n\t\t// Ignore first message in this case and initialize if not yet initialized\n\t\tif (!initialized) {\n\t\t\tinitialize(factory);\n\t\t}\n\t};\n}\n"],
  "mappings": ";;AAKA;AAAA,EAEC;AAAA,OACM;AAWP,IAAI,cAAc;AAElB,SAAS,WAAW,SAAiC;AACpD,MAAI,aAAa;AAChB;AAAA,EACD;AACA,gBAAc;AAEd,QAAM,eAAe,IAAI;AAAA,IACxB,CAAC,QAAQ,WAAW,YAAY,GAAG;AAAA,IACnC,CAAC,iBAAiB,QAAQ,YAAY;AAAA,EACvC;AAEA,aAAW,YAAY,CAAC,MAAoB;AAC3C,iBAAa,UAAU,EAAE,IAAI;AAAA,EAC9B;AACD;AAdS;AAgBF,SAAS,sBAAsB,SAAiC;AACtE,aAAW,YAAY,CAAC,OAAqB;AAE5C,QAAI,CAAC,aAAa;AACjB,iBAAW,OAAO;AAAA,IACnB;AAAA,EACD;AACD;AAPgB;",
  "names": []
}
