{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/worker/simpleWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../charCode.js';\nimport { onUnexpectedError, transformErrorForSerialization } from '../errors.js';\nimport { Emitter, Event } from '../event.js';\nimport { Disposable, IDisposable } from '../lifecycle.js';\nimport { AppResourcePath, FileAccess } from '../network.js';\nimport { isWeb } from '../platform.js';\nimport * as strings from '../strings.js';\nimport { URI } from '../uri.js';\n\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n\nconst DEFAULT_CHANNEL = 'default';\nconst INITIALIZE = '$initialize';\n\nexport interface IWorker extends IDisposable {\n\tgetId(): number;\n\tpostMessage(message: Message, transfer: ArrayBuffer[]): void;\n}\n\nexport interface IWorkerCallback {\n\t(message: Message): void;\n}\n\nexport interface IWorkerFactory {\n\tcreate(modules: IWorkerDescriptor, callback: IWorkerCallback, onErrorCallback: (err: any) => void): IWorker;\n}\n\nexport interface IWorkerDescriptor {\n\treadonly amdModuleId: string;\n\treadonly esmModuleLocation: URI | undefined;\n\treadonly label: string | undefined;\n}\n\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err: any): void {\n\tif (!isWeb) {\n\t\t// running tests\n\t\treturn;\n\t}\n\tif (!webWorkerWarningLogged) {\n\t\twebWorkerWarningLogged = true;\n\t\tconsole.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n\t}\n\tconsole.warn(err.message);\n}\n\nconst enum MessageType {\n\tRequest,\n\tReply,\n\tSubscribeEvent,\n\tEvent,\n\tUnsubscribeEvent\n}\nclass RequestMessage {\n\tpublic readonly type = MessageType.Request;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly req: string,\n\t\tpublic readonly channel: string,\n\t\tpublic readonly method: string,\n\t\tpublic readonly args: any[]\n\t) { }\n}\nclass ReplyMessage {\n\tpublic readonly type = MessageType.Reply;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly seq: string,\n\t\tpublic readonly res: any,\n\t\tpublic readonly err: any\n\t) { }\n}\nclass SubscribeEventMessage {\n\tpublic readonly type = MessageType.SubscribeEvent;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly req: string,\n\t\tpublic readonly channel: string,\n\t\tpublic readonly eventName: string,\n\t\tpublic readonly arg: any\n\t) { }\n}\nclass EventMessage {\n\tpublic readonly type = MessageType.Event;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly req: string,\n\t\tpublic readonly event: any\n\t) { }\n}\nclass UnsubscribeEventMessage {\n\tpublic readonly type = MessageType.UnsubscribeEvent;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly req: string\n\t) { }\n}\ntype Message = RequestMessage | ReplyMessage | SubscribeEventMessage | EventMessage | UnsubscribeEventMessage;\n\ninterface IMessageReply {\n\tresolve: (value?: any) => void;\n\treject: (error?: any) => void;\n}\n\ninterface IMessageHandler {\n\tsendMessage(msg: any, transfer?: ArrayBuffer[]): void;\n\thandleMessage(channel: string, method: string, args: any[]): Promise<any>;\n\thandleEvent(channel: string, eventName: string, arg: any): Event<any>;\n}\n\nclass SimpleWorkerProtocol {\n\n\tprivate _workerId: number;\n\tprivate _lastSentReq: number;\n\tprivate _pendingReplies: { [req: string]: IMessageReply };\n\tprivate _pendingEmitters: Map<string, Emitter<any>>;\n\tprivate _pendingEvents: Map<string, IDisposable>;\n\tprivate _handler: IMessageHandler;\n\n\tconstructor(handler: IMessageHandler) {\n\t\tthis._workerId = -1;\n\t\tthis._handler = handler;\n\t\tthis._lastSentReq = 0;\n\t\tthis._pendingReplies = Object.create(null);\n\t\tthis._pendingEmitters = new Map<string, Emitter<any>>();\n\t\tthis._pendingEvents = new Map<string, IDisposable>();\n\t}\n\n\tpublic setWorkerId(workerId: number): void {\n\t\tthis._workerId = workerId;\n\t}\n\n\tpublic sendMessage(channel: string, method: string, args: any[]): Promise<any> {\n\t\tconst req = String(++this._lastSentReq);\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis._pendingReplies[req] = {\n\t\t\t\tresolve: resolve,\n\t\t\t\treject: reject\n\t\t\t};\n\t\t\tthis._send(new RequestMessage(this._workerId, req, channel, method, args));\n\t\t});\n\t}\n\n\tpublic listen(channel: string, eventName: string, arg: any): Event<any> {\n\t\tlet req: string | null = null;\n\t\tconst emitter = new Emitter<any>({\n\t\t\tonWillAddFirstListener: () => {\n\t\t\t\treq = String(++this._lastSentReq);\n\t\t\t\tthis._pendingEmitters.set(req, emitter);\n\t\t\t\tthis._send(new SubscribeEventMessage(this._workerId, req, channel, eventName, arg));\n\t\t\t},\n\t\t\tonDidRemoveLastListener: () => {\n\t\t\t\tthis._pendingEmitters.delete(req!);\n\t\t\t\tthis._send(new UnsubscribeEventMessage(this._workerId, req!));\n\t\t\t\treq = null;\n\t\t\t}\n\t\t});\n\t\treturn emitter.event;\n\t}\n\n\tpublic handleMessage(message: Message): void {\n\t\tif (!message || !message.vsWorker) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n\t\t\treturn;\n\t\t}\n\t\tthis._handleMessage(message);\n\t}\n\n\tpublic createProxyToRemoteChannel<T extends object>(channel: string, sendMessageBarrier?: () => Promise<void>): T {\n\t\tconst handler = {\n\t\t\tget: (target: any, name: PropertyKey) => {\n\t\t\t\tif (typeof name === 'string' && !target[name]) {\n\t\t\t\t\tif (propertyIsDynamicEvent(name)) { // onDynamic...\n\t\t\t\t\t\ttarget[name] = (arg: any): Event<any> => {\n\t\t\t\t\t\t\treturn this.listen(channel, name, arg);\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (propertyIsEvent(name)) { // on...\n\t\t\t\t\t\ttarget[name] = this.listen(channel, name, undefined);\n\t\t\t\t\t} else if (name.charCodeAt(0) === CharCode.DollarSign) { // $...\n\t\t\t\t\t\ttarget[name] = async (...myArgs: any[]) => {\n\t\t\t\t\t\t\tawait sendMessageBarrier?.();\n\t\t\t\t\t\t\treturn this.sendMessage(channel, name, myArgs);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn target[name];\n\t\t\t}\n\t\t};\n\t\treturn new Proxy(Object.create(null), handler);\n\t}\n\n\tprivate _handleMessage(msg: Message): void {\n\t\tswitch (msg.type) {\n\t\t\tcase MessageType.Reply:\n\t\t\t\treturn this._handleReplyMessage(msg);\n\t\t\tcase MessageType.Request:\n\t\t\t\treturn this._handleRequestMessage(msg);\n\t\t\tcase MessageType.SubscribeEvent:\n\t\t\t\treturn this._handleSubscribeEventMessage(msg);\n\t\t\tcase MessageType.Event:\n\t\t\t\treturn this._handleEventMessage(msg);\n\t\t\tcase MessageType.UnsubscribeEvent:\n\t\t\t\treturn this._handleUnsubscribeEventMessage(msg);\n\t\t}\n\t}\n\n\tprivate _handleReplyMessage(replyMessage: ReplyMessage): void {\n\t\tif (!this._pendingReplies[replyMessage.seq]) {\n\t\t\tconsole.warn('Got reply to unknown seq');\n\t\t\treturn;\n\t\t}\n\n\t\tconst reply = this._pendingReplies[replyMessage.seq];\n\t\tdelete this._pendingReplies[replyMessage.seq];\n\n\t\tif (replyMessage.err) {\n\t\t\tlet err = replyMessage.err;\n\t\t\tif (replyMessage.err.$isError) {\n\t\t\t\terr = new Error();\n\t\t\t\terr.name = replyMessage.err.name;\n\t\t\t\terr.message = replyMessage.err.message;\n\t\t\t\terr.stack = replyMessage.err.stack;\n\t\t\t}\n\t\t\treply.reject(err);\n\t\t\treturn;\n\t\t}\n\n\t\treply.resolve(replyMessage.res);\n\t}\n\n\tprivate _handleRequestMessage(requestMessage: RequestMessage): void {\n\t\tconst req = requestMessage.req;\n\t\tconst result = this._handler.handleMessage(requestMessage.channel, requestMessage.method, requestMessage.args);\n\t\tresult.then((r) => {\n\t\t\tthis._send(new ReplyMessage(this._workerId, req, r, undefined));\n\t\t}, (e) => {\n\t\t\tif (e.detail instanceof Error) {\n\t\t\t\t// Loading errors have a detail property that points to the actual error\n\t\t\t\te.detail = transformErrorForSerialization(e.detail);\n\t\t\t}\n\t\t\tthis._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n\t\t});\n\t}\n\n\tprivate _handleSubscribeEventMessage(msg: SubscribeEventMessage): void {\n\t\tconst req = msg.req;\n\t\tconst disposable = this._handler.handleEvent(msg.channel, msg.eventName, msg.arg)((event) => {\n\t\t\tthis._send(new EventMessage(this._workerId, req, event));\n\t\t});\n\t\tthis._pendingEvents.set(req, disposable);\n\t}\n\n\tprivate _handleEventMessage(msg: EventMessage): void {\n\t\tif (!this._pendingEmitters.has(msg.req)) {\n\t\t\tconsole.warn('Got event for unknown req');\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingEmitters.get(msg.req)!.fire(msg.event);\n\t}\n\n\tprivate _handleUnsubscribeEventMessage(msg: UnsubscribeEventMessage): void {\n\t\tif (!this._pendingEvents.has(msg.req)) {\n\t\t\tconsole.warn('Got unsubscribe for unknown req');\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingEvents.get(msg.req)!.dispose();\n\t\tthis._pendingEvents.delete(msg.req);\n\t}\n\n\tprivate _send(msg: Message): void {\n\t\tconst transfer: ArrayBuffer[] = [];\n\t\tif (msg.type === MessageType.Request) {\n\t\t\tfor (let i = 0; i < msg.args.length; i++) {\n\t\t\t\tif (msg.args[i] instanceof ArrayBuffer) {\n\t\t\t\t\ttransfer.push(msg.args[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (msg.type === MessageType.Reply) {\n\t\t\tif (msg.res instanceof ArrayBuffer) {\n\t\t\t\ttransfer.push(msg.res);\n\t\t\t}\n\t\t}\n\t\tthis._handler.sendMessage(msg, transfer);\n\t}\n}\n\ntype ProxiedMethodName = (`$${string}` | `on${string}`);\n\nexport type Proxied<T> = { [K in keyof T]: T[K] extends (...args: infer A) => infer R\n\t? (\n\t\tK extends ProxiedMethodName\n\t\t? (...args: A) => Promise<Awaited<R>>\n\t\t: never\n\t)\n\t: never\n};\n\nexport interface IWorkerClient<W> {\n\tproxy: Proxied<W>;\n\tdispose(): void;\n\tsetChannel<T extends object>(channel: string, handler: T): void;\n\tgetChannel<T extends object>(channel: string): Proxied<T>;\n}\n\nexport interface IWorkerServer {\n\tsetChannel<T extends object>(channel: string, handler: T): void;\n\tgetChannel<T extends object>(channel: string): Proxied<T>;\n}\n\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient<W extends object> extends Disposable implements IWorkerClient<W> {\n\n\tprivate readonly _worker: IWorker;\n\tprivate readonly _onModuleLoaded: Promise<void>;\n\tprivate readonly _protocol: SimpleWorkerProtocol;\n\tpublic readonly proxy: Proxied<W>;\n\tprivate readonly _localChannels: Map<string, object> = new Map();\n\tprivate readonly _remoteChannels: Map<string, object> = new Map();\n\n\tconstructor(\n\t\tworkerFactory: IWorkerFactory,\n\t\tworkerDescriptor: IWorkerDescriptor,\n\t) {\n\t\tsuper();\n\n\t\tthis._worker = this._register(workerFactory.create(\n\t\t\t{\n\t\t\t\tamdModuleId: 'vs/base/common/worker/simpleWorker',\n\t\t\t\tesmModuleLocation: workerDescriptor.esmModuleLocation,\n\t\t\t\tlabel: workerDescriptor.label\n\t\t\t},\n\t\t\t(msg: Message) => {\n\t\t\t\tthis._protocol.handleMessage(msg);\n\t\t\t},\n\t\t\t(err: any) => {\n\t\t\t\t// in Firefox, web workers fail lazily :(\n\t\t\t\t// we will reject the proxy\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t));\n\n\t\tthis._protocol = new SimpleWorkerProtocol({\n\t\t\tsendMessage: (msg: any, transfer: ArrayBuffer[]): void => {\n\t\t\t\tthis._worker.postMessage(msg, transfer);\n\t\t\t},\n\t\t\thandleMessage: (channel: string, method: string, args: any[]): Promise<any> => {\n\t\t\t\treturn this._handleMessage(channel, method, args);\n\t\t\t},\n\t\t\thandleEvent: (channel: string, eventName: string, arg: any): Event<any> => {\n\t\t\t\treturn this._handleEvent(channel, eventName, arg);\n\t\t\t}\n\t\t});\n\t\tthis._protocol.setWorkerId(this._worker.getId());\n\n\t\t// Gather loader configuration\n\t\tlet loaderConfiguration: any = null;\n\n\t\tconst globalRequire: { getConfig?(): object } | undefined = (globalThis as any).require;\n\t\tif (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n\t\t\t// Get the configuration from the Monaco AMD Loader\n\t\t\tloaderConfiguration = globalRequire.getConfig();\n\t\t} else if (typeof (globalThis as any).requirejs !== 'undefined') {\n\t\t\t// Get the configuration from requirejs\n\t\t\tloaderConfiguration = (globalThis as any).requirejs.s.contexts._.config;\n\t\t}\n\n\t\t// Send initialize message\n\t\tthis._onModuleLoaded = this._protocol.sendMessage(DEFAULT_CHANNEL, INITIALIZE, [\n\t\t\tthis._worker.getId(),\n\t\t\tJSON.parse(JSON.stringify(loaderConfiguration)),\n\t\t\tworkerDescriptor.amdModuleId,\n\t\t]);\n\n\t\tthis.proxy = this._protocol.createProxyToRemoteChannel(DEFAULT_CHANNEL, async () => { await this._onModuleLoaded; });\n\t\tthis._onModuleLoaded.catch((e) => {\n\t\t\tthis._onError('Worker failed to load ' + workerDescriptor.amdModuleId, e);\n\t\t});\n\t}\n\n\tprivate _handleMessage(channelName: string, method: string, args: any[]): Promise<any> {\n\t\tconst channel: object | undefined = this._localChannels.get(channelName);\n\t\tif (!channel) {\n\t\t\treturn Promise.reject(new Error(`Missing channel ${channelName} on main thread`));\n\t\t}\n\t\tif (typeof (channel as any)[method] !== 'function') {\n\t\t\treturn Promise.reject(new Error(`Missing method ${method} on main thread channel ${channelName}`));\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve((channel as any)[method].apply(channel, args));\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tprivate _handleEvent(channelName: string, eventName: string, arg: any): Event<any> {\n\t\tconst channel: object | undefined = this._localChannels.get(channelName);\n\t\tif (!channel) {\n\t\t\tthrow new Error(`Missing channel ${channelName} on main thread`);\n\t\t}\n\t\tif (propertyIsDynamicEvent(eventName)) {\n\t\t\tconst event = (channel as any)[eventName].call(channel, arg);\n\t\t\tif (typeof event !== 'function') {\n\t\t\t\tthrow new Error(`Missing dynamic event ${eventName} on main thread channel ${channelName}.`);\n\t\t\t}\n\t\t\treturn event;\n\t\t}\n\t\tif (propertyIsEvent(eventName)) {\n\t\t\tconst event = (channel as any)[eventName];\n\t\t\tif (typeof event !== 'function') {\n\t\t\t\tthrow new Error(`Missing event ${eventName} on main thread channel ${channelName}.`);\n\t\t\t}\n\t\t\treturn event;\n\t\t}\n\t\tthrow new Error(`Malformed event name ${eventName}`);\n\t}\n\n\tpublic setChannel<T extends object>(channel: string, handler: T): void {\n\t\tthis._localChannels.set(channel, handler);\n\t}\n\n\tpublic getChannel<T extends object>(channel: string): Proxied<T> {\n\t\tif (!this._remoteChannels.has(channel)) {\n\t\t\tconst inst = this._protocol.createProxyToRemoteChannel(channel, async () => { await this._onModuleLoaded; });\n\t\t\tthis._remoteChannels.set(channel, inst);\n\t\t}\n\t\treturn this._remoteChannels.get(channel) as Proxied<T>;\n\t}\n\n\tprivate _onError(message: string, error?: any): void {\n\t\tconsole.error(message);\n\t\tconsole.info(error);\n\t}\n}\n\nfunction propertyIsEvent(name: string): boolean {\n\t// Assume a property is an event if it has a form of \"onSomething\"\n\treturn name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\n\nfunction propertyIsDynamicEvent(name: string): boolean {\n\t// Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n\treturn /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\n\nexport interface IRequestHandler {\n\t_requestHandlerBrand: any;\n\t[prop: string]: any;\n}\n\nexport interface IRequestHandlerFactory {\n\t(workerServer: IWorkerServer): IRequestHandler;\n}\n\n/**\n * Worker side\n */\nexport class SimpleWorkerServer implements IWorkerServer {\n\n\tprivate _requestHandlerFactory: IRequestHandlerFactory | null;\n\tprivate _requestHandler: IRequestHandler | null;\n\tprivate _protocol: SimpleWorkerProtocol;\n\tprivate readonly _localChannels: Map<string, object> = new Map();\n\tprivate readonly _remoteChannels: Map<string, object> = new Map();\n\n\tconstructor(postMessage: (msg: Message, transfer?: ArrayBuffer[]) => void, requestHandlerFactory: IRequestHandlerFactory | null) {\n\t\tthis._requestHandlerFactory = requestHandlerFactory;\n\t\tthis._requestHandler = null;\n\t\tthis._protocol = new SimpleWorkerProtocol({\n\t\t\tsendMessage: (msg: any, transfer: ArrayBuffer[]): void => {\n\t\t\t\tpostMessage(msg, transfer);\n\t\t\t},\n\t\t\thandleMessage: (channel: string, method: string, args: any[]): Promise<any> => this._handleMessage(channel, method, args),\n\t\t\thandleEvent: (channel: string, eventName: string, arg: any): Event<any> => this._handleEvent(channel, eventName, arg)\n\t\t});\n\t}\n\n\tpublic onmessage(msg: any): void {\n\t\tthis._protocol.handleMessage(msg);\n\t}\n\n\tprivate _handleMessage(channel: string, method: string, args: any[]): Promise<any> {\n\t\tif (channel === DEFAULT_CHANNEL && method === INITIALIZE) {\n\t\t\treturn this.initialize(<number>args[0], <any>args[1], <string>args[2]);\n\t\t}\n\n\t\tconst requestHandler: object | null | undefined = (channel === DEFAULT_CHANNEL ? this._requestHandler : this._localChannels.get(channel));\n\t\tif (!requestHandler) {\n\t\t\treturn Promise.reject(new Error(`Missing channel ${channel} on worker thread`));\n\t\t}\n\t\tif (typeof (requestHandler as any)[method] !== 'function') {\n\t\t\treturn Promise.reject(new Error(`Missing method ${method} on worker thread channel ${channel}`));\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve((requestHandler as any)[method].apply(requestHandler, args));\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tprivate _handleEvent(channel: string, eventName: string, arg: any): Event<any> {\n\t\tconst requestHandler: object | null | undefined = (channel === DEFAULT_CHANNEL ? this._requestHandler : this._localChannels.get(channel));\n\t\tif (!requestHandler) {\n\t\t\tthrow new Error(`Missing channel ${channel} on worker thread`);\n\t\t}\n\t\tif (propertyIsDynamicEvent(eventName)) {\n\t\t\tconst event = (requestHandler as any)[eventName].call(requestHandler, arg);\n\t\t\tif (typeof event !== 'function') {\n\t\t\t\tthrow new Error(`Missing dynamic event ${eventName} on request handler.`);\n\t\t\t}\n\t\t\treturn event;\n\t\t}\n\t\tif (propertyIsEvent(eventName)) {\n\t\t\tconst event = (requestHandler as any)[eventName];\n\t\t\tif (typeof event !== 'function') {\n\t\t\t\tthrow new Error(`Missing event ${eventName} on request handler.`);\n\t\t\t}\n\t\t\treturn event;\n\t\t}\n\t\tthrow new Error(`Malformed event name ${eventName}`);\n\t}\n\n\tpublic setChannel<T extends object>(channel: string, handler: T): void {\n\t\tthis._localChannels.set(channel, handler);\n\t}\n\n\tpublic getChannel<T extends object>(channel: string): Proxied<T> {\n\t\tif (!this._remoteChannels.has(channel)) {\n\t\t\tconst inst = this._protocol.createProxyToRemoteChannel(channel);\n\t\t\tthis._remoteChannels.set(channel, inst);\n\t\t}\n\t\treturn this._remoteChannels.get(channel) as Proxied<T>;\n\t}\n\n\tprivate async initialize(workerId: number, loaderConfig: any, moduleId: string): Promise<void> {\n\t\tthis._protocol.setWorkerId(workerId);\n\n\t\tif (this._requestHandlerFactory) {\n\t\t\t// static request handler\n\t\t\tthis._requestHandler = this._requestHandlerFactory(this);\n\t\t\treturn;\n\t\t}\n\n\t\tif (loaderConfig) {\n\t\t\t// Remove 'baseUrl', handling it is beyond scope for now\n\t\t\tif (typeof loaderConfig.baseUrl !== 'undefined') {\n\t\t\t\tdelete loaderConfig['baseUrl'];\n\t\t\t}\n\t\t\tif (typeof loaderConfig.paths !== 'undefined') {\n\t\t\t\tif (typeof loaderConfig.paths.vs !== 'undefined') {\n\t\t\t\t\tdelete loaderConfig.paths['vs'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {\n\t\t\t\t// don't use, it has been destroyed during serialize\n\t\t\t\tdelete loaderConfig['trustedTypesPolicy'];\n\t\t\t}\n\n\t\t\t// Since this is in a web worker, enable catching errors\n\t\t\tloaderConfig.catchError = true;\n\t\t\tglobalThis.require.config(loaderConfig);\n\t\t}\n\n\t\tif (isESM) {\n\t\t\tconst url = FileAccess.asBrowserUri(`${moduleId}.js` as AppResourcePath).toString(true);\n\t\t\treturn import(`${url}`).then((module: { create: IRequestHandlerFactory }) => {\n\t\t\t\tthis._requestHandler = module.create(this);\n\n\t\t\t\tif (!this._requestHandler) {\n\t\t\t\t\tthrow new Error(`No RequestHandler!`);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t// Use the global require to be sure to get the global config\n\n\t\t\t// ESM-comment-begin\n\t\t\t// const req = (globalThis.require || require);\n\t\t\t// ESM-comment-end\n\t\t\t// ESM-uncomment-begin\n\t\t\tconst req = globalThis.require;\n\t\t\t// ESM-uncomment-end\n\n\t\t\treq([moduleId], (module: { create: IRequestHandlerFactory }) => {\n\t\t\t\tthis._requestHandler = module.create(this);\n\n\t\t\t\tif (!this._requestHandler) {\n\t\t\t\t\treject(new Error(`No RequestHandler!`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve();\n\t\t\t}, reject);\n\t\t});\n\t}\n}\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(postMessage: (msg: Message, transfer?: ArrayBuffer[]) => void): SimpleWorkerServer {\n\treturn new SimpleWorkerServer(postMessage, null);\n}\n"],
  "mappings": "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",
  "names": ["MessageType"]
}
