{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/worker/simpleWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../charCode.js\";\nimport {\n\tonUnexpectedError,\n\ttransformErrorForSerialization,\n} from \"../errors.js\";\nimport { Emitter, type Event } from \"../event.js\";\nimport { Disposable, type IDisposable } from \"../lifecycle.js\";\nimport { type AppResourcePath, FileAccess } from \"../network.js\";\nimport { isWeb } from \"../platform.js\";\nimport * as strings from \"../strings.js\";\nimport type { URI } from \"../uri.js\";\n\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n\nconst DEFAULT_CHANNEL = \"default\";\nconst INITIALIZE = \"$initialize\";\n\nexport interface IWorker extends IDisposable {\n\tgetId(): number;\n\tpostMessage(message: Message, transfer: ArrayBuffer[]): void;\n}\n\nexport interface IWorkerCallback {\n\t(message: Message): void;\n}\n\nexport interface IWorkerFactory {\n\tcreate(\n\t\tmodules: IWorkerDescriptor,\n\t\tcallback: IWorkerCallback,\n\t\tonErrorCallback: (err: any) => void,\n\t): IWorker;\n}\n\nexport interface IWorkerDescriptor {\n\treadonly amdModuleId: string;\n\treadonly esmModuleLocation: URI | undefined;\n\treadonly label: string | undefined;\n}\n\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err: any): void {\n\tif (!isWeb) {\n\t\t// running tests\n\t\treturn;\n\t}\n\tif (!webWorkerWarningLogged) {\n\t\twebWorkerWarningLogged = true;\n\t\tconsole.warn(\n\t\t\t\"Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq\",\n\t\t);\n\t}\n\tconsole.warn(err.message);\n}\n\nenum MessageType {\n\tRequest = 0,\n\tReply = 1,\n\tSubscribeEvent = 2,\n\tEvent = 3,\n\tUnsubscribeEvent = 4,\n}\nclass RequestMessage {\n\tpublic readonly type = MessageType.Request;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly req: string,\n\t\tpublic readonly channel: string,\n\t\tpublic readonly method: string,\n\t\tpublic readonly args: any[],\n\t) {}\n}\nclass ReplyMessage {\n\tpublic readonly type = MessageType.Reply;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly seq: string,\n\t\tpublic readonly res: any,\n\t\tpublic readonly err: any,\n\t) {}\n}\nclass SubscribeEventMessage {\n\tpublic readonly type = MessageType.SubscribeEvent;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly req: string,\n\t\tpublic readonly channel: string,\n\t\tpublic readonly eventName: string,\n\t\tpublic readonly arg: any,\n\t) {}\n}\nclass EventMessage {\n\tpublic readonly type = MessageType.Event;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly req: string,\n\t\tpublic readonly event: any,\n\t) {}\n}\nclass UnsubscribeEventMessage {\n\tpublic readonly type = MessageType.UnsubscribeEvent;\n\tconstructor(\n\t\tpublic readonly vsWorker: number,\n\t\tpublic readonly req: string,\n\t) {}\n}\ntype Message =\n\t| RequestMessage\n\t| ReplyMessage\n\t| SubscribeEventMessage\n\t| EventMessage\n\t| UnsubscribeEventMessage;\n\ninterface IMessageReply {\n\tresolve: (value?: any) => void;\n\treject: (error?: any) => void;\n}\n\ninterface IMessageHandler {\n\tsendMessage(msg: any, transfer?: ArrayBuffer[]): void;\n\thandleMessage(channel: string, method: string, args: any[]): Promise<any>;\n\thandleEvent(channel: string, eventName: string, arg: any): Event<any>;\n}\n\nclass SimpleWorkerProtocol {\n\tprivate _workerId: number;\n\tprivate _lastSentReq: number;\n\tprivate _pendingReplies: { [req: string]: IMessageReply };\n\tprivate _pendingEmitters: Map<string, Emitter<any>>;\n\tprivate _pendingEvents: Map<string, IDisposable>;\n\tprivate _handler: IMessageHandler;\n\n\tconstructor(handler: IMessageHandler) {\n\t\tthis._workerId = -1;\n\t\tthis._handler = handler;\n\t\tthis._lastSentReq = 0;\n\t\tthis._pendingReplies = Object.create(null);\n\t\tthis._pendingEmitters = new Map<string, Emitter<any>>();\n\t\tthis._pendingEvents = new Map<string, IDisposable>();\n\t}\n\n\tpublic setWorkerId(workerId: number): void {\n\t\tthis._workerId = workerId;\n\t}\n\n\tpublic sendMessage(\n\t\tchannel: string,\n\t\tmethod: string,\n\t\targs: any[],\n\t): Promise<any> {\n\t\tconst req = String(++this._lastSentReq);\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tthis._pendingReplies[req] = {\n\t\t\t\tresolve: resolve,\n\t\t\t\treject: reject,\n\t\t\t};\n\t\t\tthis._send(\n\t\t\t\tnew RequestMessage(this._workerId, req, channel, method, args),\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic listen(channel: string, eventName: string, arg: any): Event<any> {\n\t\tlet req: string | null = null;\n\t\tconst emitter = new Emitter<any>({\n\t\t\tonWillAddFirstListener: () => {\n\t\t\t\treq = String(++this._lastSentReq);\n\t\t\t\tthis._pendingEmitters.set(req, emitter);\n\t\t\t\tthis._send(\n\t\t\t\t\tnew SubscribeEventMessage(\n\t\t\t\t\t\tthis._workerId,\n\t\t\t\t\t\treq,\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\teventName,\n\t\t\t\t\t\targ,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t\tonDidRemoveLastListener: () => {\n\t\t\t\tthis._pendingEmitters.delete(req!);\n\t\t\t\tthis._send(new UnsubscribeEventMessage(this._workerId, req!));\n\t\t\t\treq = null;\n\t\t\t},\n\t\t});\n\t\treturn emitter.event;\n\t}\n\n\tpublic handleMessage(message: Message): void {\n\t\tif (!message || !message.vsWorker) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n\t\t\treturn;\n\t\t}\n\t\tthis._handleMessage(message);\n\t}\n\n\tpublic createProxyToRemoteChannel<T extends object>(\n\t\tchannel: string,\n\t\tsendMessageBarrier?: () => Promise<void>,\n\t): T {\n\t\tconst handler = {\n\t\t\tget: (target: any, name: PropertyKey) => {\n\t\t\t\tif (typeof name === \"string\" && !target[name]) {\n\t\t\t\t\tif (propertyIsDynamicEvent(name)) {\n\t\t\t\t\t\t// onDynamic...\n\t\t\t\t\t\ttarget[name] = (arg: any): Event<any> => {\n\t\t\t\t\t\t\treturn this.listen(channel, name, arg);\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (propertyIsEvent(name)) {\n\t\t\t\t\t\t// on...\n\t\t\t\t\t\ttarget[name] = this.listen(channel, name, undefined);\n\t\t\t\t\t} else if (name.charCodeAt(0) === CharCode.DollarSign) {\n\t\t\t\t\t\t// $...\n\t\t\t\t\t\ttarget[name] = async (...myArgs: any[]) => {\n\t\t\t\t\t\t\tawait sendMessageBarrier?.();\n\t\t\t\t\t\t\treturn this.sendMessage(channel, name, myArgs);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn target[name];\n\t\t\t},\n\t\t};\n\t\treturn new Proxy(Object.create(null), handler);\n\t}\n\n\tprivate _handleMessage(msg: Message): void {\n\t\tswitch (msg.type) {\n\t\t\tcase MessageType.Reply:\n\t\t\t\treturn this._handleReplyMessage(msg);\n\t\t\tcase MessageType.Request:\n\t\t\t\treturn this._handleRequestMessage(msg);\n\t\t\tcase MessageType.SubscribeEvent:\n\t\t\t\treturn this._handleSubscribeEventMessage(msg);\n\t\t\tcase MessageType.Event:\n\t\t\t\treturn this._handleEventMessage(msg);\n\t\t\tcase MessageType.UnsubscribeEvent:\n\t\t\t\treturn this._handleUnsubscribeEventMessage(msg);\n\t\t}\n\t}\n\n\tprivate _handleReplyMessage(replyMessage: ReplyMessage): void {\n\t\tif (!this._pendingReplies[replyMessage.seq]) {\n\t\t\tconsole.warn(\"Got reply to unknown seq\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst reply = this._pendingReplies[replyMessage.seq];\n\t\tdelete this._pendingReplies[replyMessage.seq];\n\n\t\tif (replyMessage.err) {\n\t\t\tlet err = replyMessage.err;\n\t\t\tif (replyMessage.err.$isError) {\n\t\t\t\terr = new Error();\n\t\t\t\terr.name = replyMessage.err.name;\n\t\t\t\terr.message = replyMessage.err.message;\n\t\t\t\terr.stack = replyMessage.err.stack;\n\t\t\t}\n\t\t\treply.reject(err);\n\t\t\treturn;\n\t\t}\n\n\t\treply.resolve(replyMessage.res);\n\t}\n\n\tprivate _handleRequestMessage(requestMessage: RequestMessage): void {\n\t\tconst req = requestMessage.req;\n\t\tconst result = this._handler.handleMessage(\n\t\t\trequestMessage.channel,\n\t\t\trequestMessage.method,\n\t\t\trequestMessage.args,\n\t\t);\n\t\tresult.then(\n\t\t\t(r) => {\n\t\t\t\tthis._send(new ReplyMessage(this._workerId, req, r, undefined));\n\t\t\t},\n\t\t\t(e) => {\n\t\t\t\tif (e.detail instanceof Error) {\n\t\t\t\t\t// Loading errors have a detail property that points to the actual error\n\t\t\t\t\te.detail = transformErrorForSerialization(e.detail);\n\t\t\t\t}\n\t\t\t\tthis._send(\n\t\t\t\t\tnew ReplyMessage(\n\t\t\t\t\t\tthis._workerId,\n\t\t\t\t\t\treq,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\ttransformErrorForSerialization(e),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate _handleSubscribeEventMessage(msg: SubscribeEventMessage): void {\n\t\tconst req = msg.req;\n\t\tconst disposable = this._handler.handleEvent(\n\t\t\tmsg.channel,\n\t\t\tmsg.eventName,\n\t\t\tmsg.arg,\n\t\t)((event) => {\n\t\t\tthis._send(new EventMessage(this._workerId, req, event));\n\t\t});\n\t\tthis._pendingEvents.set(req, disposable);\n\t}\n\n\tprivate _handleEventMessage(msg: EventMessage): void {\n\t\tif (!this._pendingEmitters.has(msg.req)) {\n\t\t\tconsole.warn(\"Got event for unknown req\");\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingEmitters.get(msg.req)!.fire(msg.event);\n\t}\n\n\tprivate _handleUnsubscribeEventMessage(msg: UnsubscribeEventMessage): void {\n\t\tif (!this._pendingEvents.has(msg.req)) {\n\t\t\tconsole.warn(\"Got unsubscribe for unknown req\");\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingEvents.get(msg.req)!.dispose();\n\t\tthis._pendingEvents.delete(msg.req);\n\t}\n\n\tprivate _send(msg: Message): void {\n\t\tconst transfer: ArrayBuffer[] = [];\n\t\tif (msg.type === MessageType.Request) {\n\t\t\tfor (let i = 0; i < msg.args.length; i++) {\n\t\t\t\tif (msg.args[i] instanceof ArrayBuffer) {\n\t\t\t\t\ttransfer.push(msg.args[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (msg.type === MessageType.Reply) {\n\t\t\tif (msg.res instanceof ArrayBuffer) {\n\t\t\t\ttransfer.push(msg.res);\n\t\t\t}\n\t\t}\n\t\tthis._handler.sendMessage(msg, transfer);\n\t}\n}\n\ntype ProxiedMethodName = `$${string}` | `on${string}`;\n\nexport type Proxied<T> = {\n\t[K in keyof T]: T[K] extends (...args: infer A) => infer R\n\t\t? K extends ProxiedMethodName\n\t\t\t? (...args: A) => Promise<Awaited<R>>\n\t\t\t: never\n\t\t: never;\n};\n\nexport interface IWorkerClient<W> {\n\tproxy: Proxied<W>;\n\tdispose(): void;\n\tsetChannel<T extends object>(channel: string, handler: T): void;\n\tgetChannel<T extends object>(channel: string): Proxied<T>;\n}\n\nexport interface IWorkerServer {\n\tsetChannel<T extends object>(channel: string, handler: T): void;\n\tgetChannel<T extends object>(channel: string): Proxied<T>;\n}\n\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient<W extends object>\n\textends Disposable\n\timplements IWorkerClient<W>\n{\n\tprivate readonly _worker: IWorker;\n\tprivate readonly _onModuleLoaded: Promise<void>;\n\tprivate readonly _protocol: SimpleWorkerProtocol;\n\tpublic readonly proxy: Proxied<W>;\n\tprivate readonly _localChannels: Map<string, object> = new Map();\n\tprivate readonly _remoteChannels: Map<string, object> = new Map();\n\n\tconstructor(\n\t\tworkerFactory: IWorkerFactory,\n\t\tworkerDescriptor: IWorkerDescriptor,\n\t) {\n\t\tsuper();\n\n\t\tthis._worker = this._register(\n\t\t\tworkerFactory.create(\n\t\t\t\t{\n\t\t\t\t\tamdModuleId: \"vs/base/common/worker/simpleWorker\",\n\t\t\t\t\tesmModuleLocation: workerDescriptor.esmModuleLocation,\n\t\t\t\t\tlabel: workerDescriptor.label,\n\t\t\t\t},\n\t\t\t\t(msg: Message) => {\n\t\t\t\t\tthis._protocol.handleMessage(msg);\n\t\t\t\t},\n\t\t\t\t(err: any) => {\n\t\t\t\t\t// in Firefox, web workers fail lazily :(\n\t\t\t\t\t// we will reject the proxy\n\t\t\t\t\tonUnexpectedError(err);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._protocol = new SimpleWorkerProtocol({\n\t\t\tsendMessage: (msg: any, transfer: ArrayBuffer[]): void => {\n\t\t\t\tthis._worker.postMessage(msg, transfer);\n\t\t\t},\n\t\t\thandleMessage: (\n\t\t\t\tchannel: string,\n\t\t\t\tmethod: string,\n\t\t\t\targs: any[],\n\t\t\t): Promise<any> => {\n\t\t\t\treturn this._handleMessage(channel, method, args);\n\t\t\t},\n\t\t\thandleEvent: (\n\t\t\t\tchannel: string,\n\t\t\t\teventName: string,\n\t\t\t\targ: any,\n\t\t\t): Event<any> => {\n\t\t\t\treturn this._handleEvent(channel, eventName, arg);\n\t\t\t},\n\t\t});\n\t\tthis._protocol.setWorkerId(this._worker.getId());\n\n\t\t// Gather loader configuration\n\t\tlet loaderConfiguration: any = null;\n\n\t\tconst globalRequire: { getConfig?(): object } | undefined = (\n\t\t\tglobalThis as any\n\t\t).require;\n\t\tif (\n\t\t\ttypeof globalRequire !== \"undefined\" &&\n\t\t\ttypeof globalRequire.getConfig === \"function\"\n\t\t) {\n\t\t\t// Get the configuration from the Monaco AMD Loader\n\t\t\tloaderConfiguration = globalRequire.getConfig();\n\t\t} else if (typeof (globalThis as any).requirejs !== \"undefined\") {\n\t\t\t// Get the configuration from requirejs\n\t\t\tloaderConfiguration = (globalThis as any).requirejs.s.contexts._\n\t\t\t\t.config;\n\t\t}\n\n\t\t// Send initialize message\n\t\tthis._onModuleLoaded = this._protocol.sendMessage(\n\t\t\tDEFAULT_CHANNEL,\n\t\t\tINITIALIZE,\n\t\t\t[\n\t\t\t\tthis._worker.getId(),\n\t\t\t\tJSON.parse(JSON.stringify(loaderConfiguration)),\n\t\t\t\tworkerDescriptor.amdModuleId,\n\t\t\t],\n\t\t);\n\n\t\tthis.proxy = this._protocol.createProxyToRemoteChannel(\n\t\t\tDEFAULT_CHANNEL,\n\t\t\tasync () => {\n\t\t\t\tawait this._onModuleLoaded;\n\t\t\t},\n\t\t);\n\t\tthis._onModuleLoaded.catch((e) => {\n\t\t\tthis._onError(\n\t\t\t\t\"Worker failed to load \" + workerDescriptor.amdModuleId,\n\t\t\t\te,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _handleMessage(\n\t\tchannelName: string,\n\t\tmethod: string,\n\t\targs: any[],\n\t): Promise<any> {\n\t\tconst channel: object | undefined =\n\t\t\tthis._localChannels.get(channelName);\n\t\tif (!channel) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(`Missing channel ${channelName} on main thread`),\n\t\t\t);\n\t\t}\n\t\tif (typeof (channel as any)[method] !== \"function\") {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\t`Missing method ${method} on main thread channel ${channelName}`,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve(\n\t\t\t\t(channel as any)[method].apply(channel, args),\n\t\t\t);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tprivate _handleEvent(\n\t\tchannelName: string,\n\t\teventName: string,\n\t\targ: any,\n\t): Event<any> {\n\t\tconst channel: object | undefined =\n\t\t\tthis._localChannels.get(channelName);\n\t\tif (!channel) {\n\t\t\tthrow new Error(`Missing channel ${channelName} on main thread`);\n\t\t}\n\t\tif (propertyIsDynamicEvent(eventName)) {\n\t\t\tconst event = (channel as any)[eventName].call(channel, arg);\n\t\t\tif (typeof event !== \"function\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Missing dynamic event ${eventName} on main thread channel ${channelName}.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn event;\n\t\t}\n\t\tif (propertyIsEvent(eventName)) {\n\t\t\tconst event = (channel as any)[eventName];\n\t\t\tif (typeof event !== \"function\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Missing event ${eventName} on main thread channel ${channelName}.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn event;\n\t\t}\n\t\tthrow new Error(`Malformed event name ${eventName}`);\n\t}\n\n\tpublic setChannel<T extends object>(channel: string, handler: T): void {\n\t\tthis._localChannels.set(channel, handler);\n\t}\n\n\tpublic getChannel<T extends object>(channel: string): Proxied<T> {\n\t\tif (!this._remoteChannels.has(channel)) {\n\t\t\tconst inst = this._protocol.createProxyToRemoteChannel(\n\t\t\t\tchannel,\n\t\t\t\tasync () => {\n\t\t\t\t\tawait this._onModuleLoaded;\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._remoteChannels.set(channel, inst);\n\t\t}\n\t\treturn this._remoteChannels.get(channel) as Proxied<T>;\n\t}\n\n\tprivate _onError(message: string, error?: any): void {\n\t\tconsole.error(message);\n\t\tconsole.info(error);\n\t}\n}\n\nfunction propertyIsEvent(name: string): boolean {\n\t// Assume a property is an event if it has a form of \"onSomething\"\n\treturn (\n\t\tname[0] === \"o\" &&\n\t\tname[1] === \"n\" &&\n\t\tstrings.isUpperAsciiLetter(name.charCodeAt(2))\n\t);\n}\n\nfunction propertyIsDynamicEvent(name: string): boolean {\n\t// Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n\treturn (\n\t\t/^onDynamic/.test(name) &&\n\t\tstrings.isUpperAsciiLetter(name.charCodeAt(9))\n\t);\n}\n\nexport interface IRequestHandler {\n\t_requestHandlerBrand: any;\n\t[prop: string]: any;\n}\n\nexport interface IRequestHandlerFactory {\n\t(workerServer: IWorkerServer): IRequestHandler;\n}\n\n/**\n * Worker side\n */\nexport class SimpleWorkerServer implements IWorkerServer {\n\tprivate _requestHandlerFactory: IRequestHandlerFactory | null;\n\tprivate _requestHandler: IRequestHandler | null;\n\tprivate _protocol: SimpleWorkerProtocol;\n\tprivate readonly _localChannels: Map<string, object> = new Map();\n\tprivate readonly _remoteChannels: Map<string, object> = new Map();\n\n\tconstructor(\n\t\tpostMessage: (msg: Message, transfer?: ArrayBuffer[]) => void,\n\t\trequestHandlerFactory: IRequestHandlerFactory | null,\n\t) {\n\t\tthis._requestHandlerFactory = requestHandlerFactory;\n\t\tthis._requestHandler = null;\n\t\tthis._protocol = new SimpleWorkerProtocol({\n\t\t\tsendMessage: (msg: any, transfer: ArrayBuffer[]): void => {\n\t\t\t\tpostMessage(msg, transfer);\n\t\t\t},\n\t\t\thandleMessage: (\n\t\t\t\tchannel: string,\n\t\t\t\tmethod: string,\n\t\t\t\targs: any[],\n\t\t\t): Promise<any> => this._handleMessage(channel, method, args),\n\t\t\thandleEvent: (\n\t\t\t\tchannel: string,\n\t\t\t\teventName: string,\n\t\t\t\targ: any,\n\t\t\t): Event<any> => this._handleEvent(channel, eventName, arg),\n\t\t});\n\t}\n\n\tpublic onmessage(msg: any): void {\n\t\tthis._protocol.handleMessage(msg);\n\t}\n\n\tprivate _handleMessage(\n\t\tchannel: string,\n\t\tmethod: string,\n\t\targs: any[],\n\t): Promise<any> {\n\t\tif (channel === DEFAULT_CHANNEL && method === INITIALIZE) {\n\t\t\treturn this.initialize(\n\t\t\t\t<number>args[0],\n\t\t\t\t<any>args[1],\n\t\t\t\t<string>args[2],\n\t\t\t);\n\t\t}\n\n\t\tconst requestHandler: object | null | undefined =\n\t\t\tchannel === DEFAULT_CHANNEL\n\t\t\t\t? this._requestHandler\n\t\t\t\t: this._localChannels.get(channel);\n\t\tif (!requestHandler) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(`Missing channel ${channel} on worker thread`),\n\t\t\t);\n\t\t}\n\t\tif (typeof (requestHandler as any)[method] !== \"function\") {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\t`Missing method ${method} on worker thread channel ${channel}`,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve(\n\t\t\t\t(requestHandler as any)[method].apply(requestHandler, args),\n\t\t\t);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tprivate _handleEvent(\n\t\tchannel: string,\n\t\teventName: string,\n\t\targ: any,\n\t): Event<any> {\n\t\tconst requestHandler: object | null | undefined =\n\t\t\tchannel === DEFAULT_CHANNEL\n\t\t\t\t? this._requestHandler\n\t\t\t\t: this._localChannels.get(channel);\n\t\tif (!requestHandler) {\n\t\t\tthrow new Error(`Missing channel ${channel} on worker thread`);\n\t\t}\n\t\tif (propertyIsDynamicEvent(eventName)) {\n\t\t\tconst event = (requestHandler as any)[eventName].call(\n\t\t\t\trequestHandler,\n\t\t\t\targ,\n\t\t\t);\n\t\t\tif (typeof event !== \"function\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Missing dynamic event ${eventName} on request handler.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn event;\n\t\t}\n\t\tif (propertyIsEvent(eventName)) {\n\t\t\tconst event = (requestHandler as any)[eventName];\n\t\t\tif (typeof event !== \"function\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Missing event ${eventName} on request handler.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn event;\n\t\t}\n\t\tthrow new Error(`Malformed event name ${eventName}`);\n\t}\n\n\tpublic setChannel<T extends object>(channel: string, handler: T): void {\n\t\tthis._localChannels.set(channel, handler);\n\t}\n\n\tpublic getChannel<T extends object>(channel: string): Proxied<T> {\n\t\tif (!this._remoteChannels.has(channel)) {\n\t\t\tconst inst = this._protocol.createProxyToRemoteChannel(channel);\n\t\t\tthis._remoteChannels.set(channel, inst);\n\t\t}\n\t\treturn this._remoteChannels.get(channel) as Proxied<T>;\n\t}\n\n\tprivate async initialize(\n\t\tworkerId: number,\n\t\tloaderConfig: any,\n\t\tmoduleId: string,\n\t): Promise<void> {\n\t\tthis._protocol.setWorkerId(workerId);\n\n\t\tif (this._requestHandlerFactory) {\n\t\t\t// static request handler\n\t\t\tthis._requestHandler = this._requestHandlerFactory(this);\n\t\t\treturn;\n\t\t}\n\n\t\tif (loaderConfig) {\n\t\t\t// Remove 'baseUrl', handling it is beyond scope for now\n\t\t\tif (typeof loaderConfig.baseUrl !== \"undefined\") {\n\t\t\t\tdelete loaderConfig[\"baseUrl\"];\n\t\t\t}\n\t\t\tif (typeof loaderConfig.paths !== \"undefined\") {\n\t\t\t\tif (typeof loaderConfig.paths.vs !== \"undefined\") {\n\t\t\t\t\tdelete loaderConfig.paths[\"vs\"];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof loaderConfig.trustedTypesPolicy !== \"undefined\") {\n\t\t\t\t// don't use, it has been destroyed during serialize\n\t\t\t\tdelete loaderConfig[\"trustedTypesPolicy\"];\n\t\t\t}\n\n\t\t\t// Since this is in a web worker, enable catching errors\n\t\t\tloaderConfig.catchError = true;\n\t\t\tglobalThis.require.config(loaderConfig);\n\t\t}\n\n\t\tif (isESM) {\n\t\t\tconst url = FileAccess.asBrowserUri(\n\t\t\t\t`${moduleId}.js` as AppResourcePath,\n\t\t\t).toString(true);\n\t\t\treturn import(`${url}`).then(\n\t\t\t\t(module: { create: IRequestHandlerFactory }) => {\n\t\t\t\t\tthis._requestHandler = module.create(this);\n\n\t\t\t\t\tif (!this._requestHandler) {\n\t\t\t\t\t\tthrow new Error(`No RequestHandler!`);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t// Use the global require to be sure to get the global config\n\n\t\t\t// ESM-comment-begin\n\t\t\t// const req = (globalThis.require || require);\n\t\t\t// ESM-comment-end\n\t\t\t// ESM-uncomment-begin\n\t\t\tconst req = globalThis.require;\n\t\t\t// ESM-uncomment-end\n\n\t\t\treq(\n\t\t\t\t[moduleId],\n\t\t\t\t(module: { create: IRequestHandlerFactory }) => {\n\t\t\t\t\tthis._requestHandler = module.create(this);\n\n\t\t\t\t\tif (!this._requestHandler) {\n\t\t\t\t\t\treject(new Error(`No RequestHandler!`));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t},\n\t\t\t\treject,\n\t\t\t);\n\t\t});\n\t}\n}\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(\n\tpostMessage: (msg: Message, transfer?: ArrayBuffer[]) => void,\n): SimpleWorkerServer {\n\treturn new SimpleWorkerServer(postMessage, null);\n}\n"],
  "mappings": "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",
  "names": ["MessageType"]
}
