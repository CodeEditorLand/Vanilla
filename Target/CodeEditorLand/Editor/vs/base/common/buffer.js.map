{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/buffer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Lazy } from './lazy.js';\nimport * as streams from './stream.js';\n\ndeclare const Buffer: any;\n\nconst hasBuffer = (typeof Buffer !== 'undefined');\nconst indexOfTable = new Lazy(() => new Uint8Array(256));\n\nlet textEncoder: TextEncoder | null;\nlet textDecoder: TextDecoder | null;\n\nexport class VSBuffer {\n\n\t/**\n\t * When running in a nodejs context, the backing store for the returned `VSBuffer` instance\n\t * might use a nodejs Buffer allocated from node's Buffer pool, which is not transferrable.\n\t */\n\tstatic alloc(byteLength: number): VSBuffer {\n\t\tif (hasBuffer) {\n\t\t\treturn new VSBuffer(Buffer.allocUnsafe(byteLength));\n\t\t} else {\n\t\t\treturn new VSBuffer(new Uint8Array(byteLength));\n\t\t}\n\t}\n\n\t/**\n\t * When running in a nodejs context, if `actual` is not a nodejs Buffer, the backing store for\n\t * the returned `VSBuffer` instance might use a nodejs Buffer allocated from node's Buffer pool,\n\t * which is not transferrable.\n\t */\n\tstatic wrap(actual: Uint8Array): VSBuffer {\n\t\tif (hasBuffer && !(Buffer.isBuffer(actual))) {\n\t\t\t// https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\n\t\t\t// Create a zero-copy Buffer wrapper around the ArrayBuffer pointed to by the Uint8Array\n\t\t\tactual = Buffer.from(actual.buffer, actual.byteOffset, actual.byteLength);\n\t\t}\n\t\treturn new VSBuffer(actual);\n\t}\n\n\t/**\n\t * When running in a nodejs context, the backing store for the returned `VSBuffer` instance\n\t * might use a nodejs Buffer allocated from node's Buffer pool, which is not transferrable.\n\t */\n\tstatic fromString(source: string, options?: { dontUseNodeBuffer?: boolean }): VSBuffer {\n\t\tconst dontUseNodeBuffer = options?.dontUseNodeBuffer || false;\n\t\tif (!dontUseNodeBuffer && hasBuffer) {\n\t\t\treturn new VSBuffer(Buffer.from(source));\n\t\t} else {\n\t\t\tif (!textEncoder) {\n\t\t\t\ttextEncoder = new TextEncoder();\n\t\t\t}\n\t\t\treturn new VSBuffer(textEncoder.encode(source));\n\t\t}\n\t}\n\n\t/**\n\t * When running in a nodejs context, the backing store for the returned `VSBuffer` instance\n\t * might use a nodejs Buffer allocated from node's Buffer pool, which is not transferrable.\n\t */\n\tstatic fromByteArray(source: number[]): VSBuffer {\n\t\tconst result = VSBuffer.alloc(source.length);\n\t\tfor (let i = 0, len = source.length; i < len; i++) {\n\t\t\tresult.buffer[i] = source[i];\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * When running in a nodejs context, the backing store for the returned `VSBuffer` instance\n\t * might use a nodejs Buffer allocated from node's Buffer pool, which is not transferrable.\n\t */\n\tstatic concat(buffers: VSBuffer[], totalLength?: number): VSBuffer {\n\t\tif (typeof totalLength === 'undefined') {\n\t\t\ttotalLength = 0;\n\t\t\tfor (let i = 0, len = buffers.length; i < len; i++) {\n\t\t\t\ttotalLength += buffers[i].byteLength;\n\t\t\t}\n\t\t}\n\n\t\tconst ret = VSBuffer.alloc(totalLength);\n\t\tlet offset = 0;\n\t\tfor (let i = 0, len = buffers.length; i < len; i++) {\n\t\t\tconst element = buffers[i];\n\t\t\tret.set(element, offset);\n\t\t\toffset += element.byteLength;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\treadonly buffer: Uint8Array;\n\treadonly byteLength: number;\n\n\tprivate constructor(buffer: Uint8Array) {\n\t\tthis.buffer = buffer;\n\t\tthis.byteLength = this.buffer.byteLength;\n\t}\n\n\t/**\n\t * When running in a nodejs context, the backing store for the returned `VSBuffer` instance\n\t * might use a nodejs Buffer allocated from node's Buffer pool, which is not transferrable.\n\t */\n\tclone(): VSBuffer {\n\t\tconst result = VSBuffer.alloc(this.byteLength);\n\t\tresult.set(this);\n\t\treturn result;\n\t}\n\n\ttoString(): string {\n\t\tif (hasBuffer) {\n\t\t\treturn this.buffer.toString();\n\t\t} else {\n\t\t\tif (!textDecoder) {\n\t\t\t\ttextDecoder = new TextDecoder();\n\t\t\t}\n\t\t\treturn textDecoder.decode(this.buffer);\n\t\t}\n\t}\n\n\tslice(start?: number, end?: number): VSBuffer {\n\t\t// IMPORTANT: use subarray instead of slice because TypedArray#slice\n\t\t// creates shallow copy and NodeBuffer#slice doesn't. The use of subarray\n\t\t// ensures the same, performance, behaviour.\n\t\treturn new VSBuffer(this.buffer.subarray(start, end));\n\t}\n\n\tset(array: VSBuffer, offset?: number): void;\n\tset(array: Uint8Array, offset?: number): void;\n\tset(array: ArrayBuffer, offset?: number): void;\n\tset(array: ArrayBufferView, offset?: number): void;\n\tset(array: VSBuffer | Uint8Array | ArrayBuffer | ArrayBufferView, offset?: number): void;\n\tset(array: VSBuffer | Uint8Array | ArrayBuffer | ArrayBufferView, offset?: number): void {\n\t\tif (array instanceof VSBuffer) {\n\t\t\tthis.buffer.set(array.buffer, offset);\n\t\t} else if (array instanceof Uint8Array) {\n\t\t\tthis.buffer.set(array, offset);\n\t\t} else if (array instanceof ArrayBuffer) {\n\t\t\tthis.buffer.set(new Uint8Array(array), offset);\n\t\t} else if (ArrayBuffer.isView(array)) {\n\t\t\tthis.buffer.set(new Uint8Array(array.buffer, array.byteOffset, array.byteLength), offset);\n\t\t} else {\n\t\t\tthrow new Error(`Unknown argument 'array'`);\n\t\t}\n\t}\n\n\treadUInt32BE(offset: number): number {\n\t\treturn readUInt32BE(this.buffer, offset);\n\t}\n\n\twriteUInt32BE(value: number, offset: number): void {\n\t\twriteUInt32BE(this.buffer, value, offset);\n\t}\n\n\treadUInt32LE(offset: number): number {\n\t\treturn readUInt32LE(this.buffer, offset);\n\t}\n\n\twriteUInt32LE(value: number, offset: number): void {\n\t\twriteUInt32LE(this.buffer, value, offset);\n\t}\n\n\treadUInt8(offset: number): number {\n\t\treturn readUInt8(this.buffer, offset);\n\t}\n\n\twriteUInt8(value: number, offset: number): void {\n\t\twriteUInt8(this.buffer, value, offset);\n\t}\n\n\tindexOf(subarray: VSBuffer | Uint8Array, offset = 0) {\n\t\treturn binaryIndexOf(this.buffer, subarray instanceof VSBuffer ? subarray.buffer : subarray, offset);\n\t}\n}\n\n/**\n * Like String.indexOf, but works on Uint8Arrays.\n * Uses the boyer-moore-horspool algorithm to be reasonably speedy.\n */\nexport function binaryIndexOf(haystack: Uint8Array, needle: Uint8Array, offset = 0): number {\n\tconst needleLen = needle.byteLength;\n\tconst haystackLen = haystack.byteLength;\n\n\tif (needleLen === 0) {\n\t\treturn 0;\n\t}\n\n\tif (needleLen === 1) {\n\t\treturn haystack.indexOf(needle[0]);\n\t}\n\n\tif (needleLen > haystackLen - offset) {\n\t\treturn -1;\n\t}\n\n\t// find index of the subarray using boyer-moore-horspool algorithm\n\tconst table = indexOfTable.value;\n\ttable.fill(needle.length);\n\tfor (let i = 0; i < needle.length; i++) {\n\t\ttable[needle[i]] = needle.length - i - 1;\n\t}\n\n\tlet i = offset + needle.length - 1;\n\tlet j = i;\n\tlet result = -1;\n\twhile (i < haystackLen) {\n\t\tif (haystack[i] === needle[j]) {\n\t\t\tif (j === 0) {\n\t\t\t\tresult = i;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ti--;\n\t\t\tj--;\n\t\t} else {\n\t\t\ti += Math.max(needle.length - j, table[haystack[i]]);\n\t\t\tj = needle.length - 1;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function readUInt16LE(source: Uint8Array, offset: number): number {\n\treturn (\n\t\t((source[offset + 0] << 0) >>> 0) |\n\t\t((source[offset + 1] << 8) >>> 0)\n\t);\n}\n\nexport function writeUInt16LE(destination: Uint8Array, value: number, offset: number): void {\n\tdestination[offset + 0] = (value & 0b11111111);\n\tvalue = value >>> 8;\n\tdestination[offset + 1] = (value & 0b11111111);\n}\n\nexport function readUInt32BE(source: Uint8Array, offset: number): number {\n\treturn (\n\t\tsource[offset] * 2 ** 24\n\t\t+ source[offset + 1] * 2 ** 16\n\t\t+ source[offset + 2] * 2 ** 8\n\t\t+ source[offset + 3]\n\t);\n}\n\nexport function writeUInt32BE(destination: Uint8Array, value: number, offset: number): void {\n\tdestination[offset + 3] = value;\n\tvalue = value >>> 8;\n\tdestination[offset + 2] = value;\n\tvalue = value >>> 8;\n\tdestination[offset + 1] = value;\n\tvalue = value >>> 8;\n\tdestination[offset] = value;\n}\n\nexport function readUInt32LE(source: Uint8Array, offset: number): number {\n\treturn (\n\t\t((source[offset + 0] << 0) >>> 0) |\n\t\t((source[offset + 1] << 8) >>> 0) |\n\t\t((source[offset + 2] << 16) >>> 0) |\n\t\t((source[offset + 3] << 24) >>> 0)\n\t);\n}\n\nexport function writeUInt32LE(destination: Uint8Array, value: number, offset: number): void {\n\tdestination[offset + 0] = (value & 0b11111111);\n\tvalue = value >>> 8;\n\tdestination[offset + 1] = (value & 0b11111111);\n\tvalue = value >>> 8;\n\tdestination[offset + 2] = (value & 0b11111111);\n\tvalue = value >>> 8;\n\tdestination[offset + 3] = (value & 0b11111111);\n}\n\nexport function readUInt8(source: Uint8Array, offset: number): number {\n\treturn source[offset];\n}\n\nexport function writeUInt8(destination: Uint8Array, value: number, offset: number): void {\n\tdestination[offset] = value;\n}\n\nexport interface VSBufferReadable extends streams.Readable<VSBuffer> { }\n\nexport interface VSBufferReadableStream extends streams.ReadableStream<VSBuffer> { }\n\nexport interface VSBufferWriteableStream extends streams.WriteableStream<VSBuffer> { }\n\nexport interface VSBufferReadableBufferedStream extends streams.ReadableBufferedStream<VSBuffer> { }\n\nexport function readableToBuffer(readable: VSBufferReadable): VSBuffer {\n\treturn streams.consumeReadable<VSBuffer>(readable, chunks => VSBuffer.concat(chunks));\n}\n\nexport function bufferToReadable(buffer: VSBuffer): VSBufferReadable {\n\treturn streams.toReadable<VSBuffer>(buffer);\n}\n\nexport function streamToBuffer(stream: streams.ReadableStream<VSBuffer>): Promise<VSBuffer> {\n\treturn streams.consumeStream<VSBuffer>(stream, chunks => VSBuffer.concat(chunks));\n}\n\nexport async function bufferedStreamToBuffer(bufferedStream: streams.ReadableBufferedStream<VSBuffer>): Promise<VSBuffer> {\n\tif (bufferedStream.ended) {\n\t\treturn VSBuffer.concat(bufferedStream.buffer);\n\t}\n\n\treturn VSBuffer.concat([\n\n\t\t// Include already read chunks...\n\t\t...bufferedStream.buffer,\n\n\t\t// ...and all additional chunks\n\t\tawait streamToBuffer(bufferedStream.stream)\n\t]);\n}\n\nexport function bufferToStream(buffer: VSBuffer): streams.ReadableStream<VSBuffer> {\n\treturn streams.toStream<VSBuffer>(buffer, chunks => VSBuffer.concat(chunks));\n}\n\nexport function streamToBufferReadableStream(stream: streams.ReadableStreamEvents<Uint8Array | string>): streams.ReadableStream<VSBuffer> {\n\treturn streams.transform<Uint8Array | string, VSBuffer>(stream, { data: data => typeof data === 'string' ? VSBuffer.fromString(data) : VSBuffer.wrap(data) }, chunks => VSBuffer.concat(chunks));\n}\n\nexport function newWriteableBufferStream(options?: streams.WriteableStreamOptions): streams.WriteableStream<VSBuffer> {\n\treturn streams.newWriteableStream<VSBuffer>(chunks => VSBuffer.concat(chunks), options);\n}\n\nexport function prefixedBufferReadable(prefix: VSBuffer, readable: VSBufferReadable): VSBufferReadable {\n\treturn streams.prefixedReadable(prefix, readable, chunks => VSBuffer.concat(chunks));\n}\n\nexport function prefixedBufferStream(prefix: VSBuffer, stream: VSBufferReadableStream): VSBufferReadableStream {\n\treturn streams.prefixedStream(prefix, stream, chunks => VSBuffer.concat(chunks));\n}\n\n/** Decodes base64 to a uint8 array. URL-encoded and unpadded base64 is allowed. */\nexport function decodeBase64(encoded: string) {\n\tlet building = 0;\n\tlet remainder = 0;\n\tlet bufi = 0;\n\n\t// The simpler way to do this is `Uint8Array.from(atob(str), c => c.charCodeAt(0))`,\n\t// but that's about 10-20x slower than this function in current Chromium versions.\n\n\tconst buffer = new Uint8Array(Math.floor(encoded.length / 4 * 3));\n\tconst append = (value: number) => {\n\t\tswitch (remainder) {\n\t\t\tcase 3:\n\t\t\t\tbuffer[bufi++] = building | value;\n\t\t\t\tremainder = 0;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tbuffer[bufi++] = building | (value >>> 2);\n\t\t\t\tbuilding = value << 6;\n\t\t\t\tremainder = 3;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tbuffer[bufi++] = building | (value >>> 4);\n\t\t\t\tbuilding = value << 4;\n\t\t\t\tremainder = 2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbuilding = value << 2;\n\t\t\t\tremainder = 1;\n\t\t}\n\t};\n\n\tfor (let i = 0; i < encoded.length; i++) {\n\t\tconst code = encoded.charCodeAt(i);\n\t\t// See https://datatracker.ietf.org/doc/html/rfc4648#section-4\n\t\t// This branchy code is about 3x faster than an indexOf on a base64 char string.\n\t\tif (code >= 65 && code <= 90) {\n\t\t\tappend(code - 65); // A-Z starts ranges from char code 65 to 90\n\t\t} else if (code >= 97 && code <= 122) {\n\t\t\tappend(code - 97 + 26); // a-z starts ranges from char code 97 to 122, starting at byte 26\n\t\t} else if (code >= 48 && code <= 57) {\n\t\t\tappend(code - 48 + 52); // 0-9 starts ranges from char code 48 to 58, starting at byte 52\n\t\t} else if (code === 43 || code === 45) {\n\t\t\tappend(62); // \"+\" or \"-\" for URLS\n\t\t} else if (code === 47 || code === 95) {\n\t\t\tappend(63); // \"/\" or \"_\" for URLS\n\t\t} else if (code === 61) {\n\t\t\tbreak; // \"=\"\n\t\t} else {\n\t\t\tthrow new SyntaxError(`Unexpected base64 character ${encoded[i]}`);\n\t\t}\n\t}\n\n\tconst unpadded = bufi;\n\twhile (remainder > 0) {\n\t\tappend(0);\n\t}\n\n\t// slice is needed to account for overestimation due to padding\n\treturn VSBuffer.wrap(buffer).slice(0, unpadded);\n}\n\nconst base64Alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64UrlSafeAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n\n/** Encodes a buffer to a base64 string. */\nexport function encodeBase64({ buffer }: VSBuffer, padded = true, urlSafe = false) {\n\tconst dictionary = urlSafe ? base64UrlSafeAlphabet : base64Alphabet;\n\tlet output = '';\n\n\tconst remainder = buffer.byteLength % 3;\n\n\tlet i = 0;\n\tfor (; i < buffer.byteLength - remainder; i += 3) {\n\t\tconst a = buffer[i + 0];\n\t\tconst b = buffer[i + 1];\n\t\tconst c = buffer[i + 2];\n\n\t\toutput += dictionary[a >>> 2];\n\t\toutput += dictionary[(a << 4 | b >>> 4) & 0b111111];\n\t\toutput += dictionary[(b << 2 | c >>> 6) & 0b111111];\n\t\toutput += dictionary[c & 0b111111];\n\t}\n\n\tif (remainder === 1) {\n\t\tconst a = buffer[i + 0];\n\t\toutput += dictionary[a >>> 2];\n\t\toutput += dictionary[(a << 4) & 0b111111];\n\t\tif (padded) { output += '=='; }\n\t} else if (remainder === 2) {\n\t\tconst a = buffer[i + 0];\n\t\tconst b = buffer[i + 1];\n\t\toutput += dictionary[a >>> 2];\n\t\toutput += dictionary[(a << 4 | b >>> 4) & 0b111111];\n\t\toutput += dictionary[(b << 2) & 0b111111];\n\t\tif (padded) { output += '='; }\n\t}\n\n\treturn output;\n}\n"],
  "mappings": "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",
  "names": ["i"]
}
