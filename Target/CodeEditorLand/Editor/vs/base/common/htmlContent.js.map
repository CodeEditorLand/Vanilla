{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/common/htmlContent.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { illegalArgument } from './errors.js';\nimport { escapeIcons } from './iconLabels.js';\nimport { isEqual } from './resources.js';\nimport { escapeRegExpCharacters } from './strings.js';\nimport { URI, UriComponents } from './uri.js';\n\nexport interface MarkdownStringTrustedOptions {\n\treadonly enabledCommands: readonly string[];\n}\n\nexport interface IMarkdownString {\n\treadonly value: string;\n\treadonly isTrusted?: boolean | MarkdownStringTrustedOptions;\n\treadonly supportThemeIcons?: boolean;\n\treadonly supportHtml?: boolean;\n\treadonly baseUri?: UriComponents;\n\turis?: { [href: string]: UriComponents };\n}\n\nexport const enum MarkdownStringTextNewlineStyle {\n\tParagraph = 0,\n\tBreak = 1,\n}\n\nexport class MarkdownString implements IMarkdownString {\n\n\tpublic value: string;\n\tpublic isTrusted?: boolean | MarkdownStringTrustedOptions;\n\tpublic supportThemeIcons?: boolean;\n\tpublic supportHtml?: boolean;\n\tpublic baseUri?: URI;\n\n\tconstructor(\n\t\tvalue: string = '',\n\t\tisTrustedOrOptions: boolean | { isTrusted?: boolean | MarkdownStringTrustedOptions; supportThemeIcons?: boolean; supportHtml?: boolean } = false,\n\t) {\n\t\tthis.value = value;\n\t\tif (typeof this.value !== 'string') {\n\t\t\tthrow illegalArgument('value');\n\t\t}\n\n\t\tif (typeof isTrustedOrOptions === 'boolean') {\n\t\t\tthis.isTrusted = isTrustedOrOptions;\n\t\t\tthis.supportThemeIcons = false;\n\t\t\tthis.supportHtml = false;\n\t\t}\n\t\telse {\n\t\t\tthis.isTrusted = isTrustedOrOptions.isTrusted ?? undefined;\n\t\t\tthis.supportThemeIcons = isTrustedOrOptions.supportThemeIcons ?? false;\n\t\t\tthis.supportHtml = isTrustedOrOptions.supportHtml ?? false;\n\t\t}\n\t}\n\n\tappendText(value: string, newlineStyle: MarkdownStringTextNewlineStyle = MarkdownStringTextNewlineStyle.Paragraph): MarkdownString {\n\t\tthis.value += escapeMarkdownSyntaxTokens(this.supportThemeIcons ? escapeIcons(value) : value) // CodeQL [SM02383] The Markdown is fully sanitized after being rendered.\n\t\t\t.replace(/([ \\t]+)/g, (_match, g1) => '&nbsp;'.repeat(g1.length)) // CodeQL [SM02383] The Markdown is fully sanitized after being rendered.\n\t\t\t.replace(/\\>/gm, '\\\\>') // CodeQL [SM02383] The Markdown is fully sanitized after being rendered.\n\t\t\t.replace(/\\n/g, newlineStyle === MarkdownStringTextNewlineStyle.Break ? '\\\\\\n' : '\\n\\n'); // CodeQL [SM02383] The Markdown is fully sanitized after being rendered.\n\n\t\treturn this;\n\t}\n\n\tappendMarkdown(value: string): MarkdownString {\n\t\tthis.value += value;\n\t\treturn this;\n\t}\n\n\tappendCodeblock(langId: string, code: string): MarkdownString {\n\t\tthis.value += `\\n${appendEscapedMarkdownCodeBlockFence(code, langId)}\\n`;\n\t\treturn this;\n\t}\n\n\tappendLink(target: URI | string, label: string, title?: string): MarkdownString {\n\t\tthis.value += '[';\n\t\tthis.value += this._escape(label, ']');\n\t\tthis.value += '](';\n\t\tthis.value += this._escape(String(target), ')');\n\t\tif (title) {\n\t\t\tthis.value += ` \"${this._escape(this._escape(title, '\"'), ')')}\"`;\n\t\t}\n\t\tthis.value += ')';\n\t\treturn this;\n\t}\n\n\tprivate _escape(value: string, ch: string): string {\n\t\tconst r = new RegExp(escapeRegExpCharacters(ch), 'g');\n\t\treturn value.replace(r, (match, offset) => {\n\t\t\tif (value.charAt(offset - 1) !== '\\\\') {\n\t\t\t\treturn `\\\\${match}`;\n\t\t\t} else {\n\t\t\t\treturn match;\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function isEmptyMarkdownString(oneOrMany: IMarkdownString | IMarkdownString[] | null | undefined): boolean {\n\tif (isMarkdownString(oneOrMany)) {\n\t\treturn !oneOrMany.value;\n\t} else if (Array.isArray(oneOrMany)) {\n\t\treturn oneOrMany.every(isEmptyMarkdownString);\n\t} else {\n\t\treturn true;\n\t}\n}\n\nexport function isMarkdownString(thing: any): thing is IMarkdownString {\n\tif (thing instanceof MarkdownString) {\n\t\treturn true;\n\t} else if (thing && typeof thing === 'object') {\n\t\treturn typeof (<IMarkdownString>thing).value === 'string'\n\t\t\t&& (typeof (<IMarkdownString>thing).isTrusted === 'boolean' || typeof (<IMarkdownString>thing).isTrusted === 'object' || (<IMarkdownString>thing).isTrusted === undefined)\n\t\t\t&& (typeof (<IMarkdownString>thing).supportThemeIcons === 'boolean' || (<IMarkdownString>thing).supportThemeIcons === undefined);\n\t}\n\treturn false;\n}\n\nexport function markdownStringEqual(a: IMarkdownString, b: IMarkdownString): boolean {\n\tif (a === b) {\n\t\treturn true;\n\t} else if (!a || !b) {\n\t\treturn false;\n\t} else {\n\t\treturn a.value === b.value\n\t\t\t&& a.isTrusted === b.isTrusted\n\t\t\t&& a.supportThemeIcons === b.supportThemeIcons\n\t\t\t&& a.supportHtml === b.supportHtml\n\t\t\t&& (a.baseUri === b.baseUri || !!a.baseUri && !!b.baseUri && isEqual(URI.from(a.baseUri), URI.from(b.baseUri)));\n\t}\n}\n\nexport function escapeMarkdownSyntaxTokens(text: string): string {\n\t// escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n\treturn text.replace(/[\\\\`*_{}[\\]()#+\\-!~]/g, '\\\\$&'); // CodeQL [SM02383] Backslash is escaped in the character class\n}\n\n/**\n * @see https://github.com/microsoft/vscode/issues/193746\n */\nexport function appendEscapedMarkdownCodeBlockFence(code: string, langId: string) {\n\tconst longestFenceLength =\n\t\tcode.match(/^`+/gm)?.reduce((a, b) => (a.length > b.length ? a : b)).length ??\n\t\t0;\n\tconst desiredFenceLength =\n\t\tlongestFenceLength >= 3 ? longestFenceLength + 1 : 3;\n\n\t// the markdown result\n\treturn [\n\t\t`${'`'.repeat(desiredFenceLength)}${langId}`,\n\t\tcode,\n\t\t`${'`'.repeat(desiredFenceLength)}`,\n\t].join('\\n');\n}\n\nexport function escapeDoubleQuotes(input: string) {\n\treturn input.replace(/\"/g, '&quot;');\n}\n\nexport function removeMarkdownEscapes(text: string): string {\n\tif (!text) {\n\t\treturn text;\n\t}\n\treturn text.replace(/\\\\([\\\\`*_{}[\\]()#+\\-.!~])/g, '$1');\n}\n\nexport function parseHrefAndDimensions(href: string): { href: string; dimensions: string[] } {\n\tconst dimensions: string[] = [];\n\tconst splitted = href.split('|').map(s => s.trim());\n\thref = splitted[0];\n\tconst parameters = splitted[1];\n\tif (parameters) {\n\t\tconst heightFromParams = /height=(\\d+)/.exec(parameters);\n\t\tconst widthFromParams = /width=(\\d+)/.exec(parameters);\n\t\tconst height = heightFromParams ? heightFromParams[1] : '';\n\t\tconst width = widthFromParams ? widthFromParams[1] : '';\n\t\tconst widthIsFinite = isFinite(parseInt(width));\n\t\tconst heightIsFinite = isFinite(parseInt(height));\n\t\tif (widthIsFinite) {\n\t\t\tdimensions.push(`width=\"${width}\"`);\n\t\t}\n\t\tif (heightIsFinite) {\n\t\t\tdimensions.push(`height=\"${height}\"`);\n\t\t}\n\t}\n\treturn { href, dimensions };\n}\n"],
  "mappings": "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",
  "names": ["MarkdownStringTextNewlineStyle"]
}
