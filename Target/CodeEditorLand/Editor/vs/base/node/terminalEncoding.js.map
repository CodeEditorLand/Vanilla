{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/terminalEncoding.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * This code is also used by standalone cli's. Avoid adding dependencies to keep the size of the cli small.\n */\nimport { exec } from 'child_process';\nimport { isWindows } from '../common/platform.js';\n\nconst windowsTerminalEncodings = {\n\t'437': 'cp437', // United States\n\t'850': 'cp850', // Multilingual(Latin I)\n\t'852': 'cp852', // Slavic(Latin II)\n\t'855': 'cp855', // Cyrillic(Russian)\n\t'857': 'cp857', // Turkish\n\t'860': 'cp860', // Portuguese\n\t'861': 'cp861', // Icelandic\n\t'863': 'cp863', // Canadian - French\n\t'865': 'cp865', // Nordic\n\t'866': 'cp866', // Russian\n\t'869': 'cp869', // Modern Greek\n\t'936': 'cp936', // Simplified Chinese\n\t'1252': 'cp1252' // West European Latin\n};\n\nfunction toIconvLiteEncoding(encodingName: string): string {\n\tconst normalizedEncodingName = encodingName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\tconst mapped = JSCHARDET_TO_ICONV_ENCODINGS[normalizedEncodingName];\n\n\treturn mapped || normalizedEncodingName;\n}\n\nconst JSCHARDET_TO_ICONV_ENCODINGS: { [name: string]: string } = {\n\t'ibm866': 'cp866',\n\t'big5': 'cp950'\n};\n\nconst UTF8 = 'utf8';\n\nexport async function resolveTerminalEncoding(verbose?: boolean): Promise<string> {\n\tlet rawEncodingPromise: Promise<string | undefined>;\n\n\t// Support a global environment variable to win over other mechanics\n\tconst cliEncodingEnv = process.env['VSCODE_CLI_ENCODING'];\n\tif (cliEncodingEnv) {\n\t\tif (verbose) {\n\t\t\tconsole.log(`Found VSCODE_CLI_ENCODING variable: ${cliEncodingEnv}`);\n\t\t}\n\n\t\trawEncodingPromise = Promise.resolve(cliEncodingEnv);\n\t}\n\n\t// Windows: educated guess\n\telse if (isWindows) {\n\t\trawEncodingPromise = new Promise<string | undefined>(resolve => {\n\t\t\tif (verbose) {\n\t\t\t\tconsole.log('Running \"chcp\" to detect terminal encoding...');\n\t\t\t}\n\n\t\t\texec('chcp', (err, stdout, stderr) => {\n\t\t\t\tif (stdout) {\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tconsole.log(`Output from \"chcp\" command is: ${stdout}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst windowsTerminalEncodingKeys = Object.keys(windowsTerminalEncodings) as Array<keyof typeof windowsTerminalEncodings>;\n\t\t\t\t\tfor (const key of windowsTerminalEncodingKeys) {\n\t\t\t\t\t\tif (stdout.indexOf(key) >= 0) {\n\t\t\t\t\t\t\treturn resolve(windowsTerminalEncodings[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn resolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\t// Linux/Mac: use \"locale charmap\" command\n\telse {\n\t\trawEncodingPromise = new Promise<string>(resolve => {\n\t\t\tif (verbose) {\n\t\t\t\tconsole.log('Running \"locale charmap\" to detect terminal encoding...');\n\t\t\t}\n\n\t\t\texec('locale charmap', (err, stdout, stderr) => resolve(stdout));\n\t\t});\n\t}\n\n\tconst rawEncoding = await rawEncodingPromise;\n\tif (verbose) {\n\t\tconsole.log(`Detected raw terminal encoding: ${rawEncoding}`);\n\t}\n\n\tif (!rawEncoding || rawEncoding.toLowerCase() === 'utf-8' || rawEncoding.toLowerCase() === UTF8) {\n\t\treturn UTF8;\n\t}\n\n\treturn toIconvLiteEncoding(rawEncoding);\n}\n"],
  "mappings": ";;AAQA,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAE1B,MAAM,2BAA2B;AAAA,EAChC,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,OAAO;AAAA;AAAA,EACP,QAAQ;AAAA;AACT;AAEA,SAAS,oBAAoB,cAA8B;AAC1D,QAAM,yBAAyB,aAAa,QAAQ,iBAAiB,EAAE,EAAE,YAAY;AACrF,QAAM,SAAS,6BAA6B,sBAAsB;AAElE,SAAO,UAAU;AAClB;AALS;AAOT,MAAM,+BAA2D;AAAA,EAChE,UAAU;AAAA,EACV,QAAQ;AACT;AAEA,MAAM,OAAO;AAEb,eAAsB,wBAAwB,SAAoC;AACjF,MAAI;AAGJ,QAAM,iBAAiB,QAAQ,IAAI,qBAAqB;AACxD,MAAI,gBAAgB;AACnB,QAAI,SAAS;AACZ,cAAQ,IAAI,uCAAuC,cAAc,EAAE;AAAA,IACpE;AAEA,yBAAqB,QAAQ,QAAQ,cAAc;AAAA,EACpD,WAGS,WAAW;AACnB,yBAAqB,IAAI,QAA4B,aAAW;AAC/D,UAAI,SAAS;AACZ,gBAAQ,IAAI,+CAA+C;AAAA,MAC5D;AAEA,WAAK,QAAQ,CAAC,KAAK,QAAQ,WAAW;AACrC,YAAI,QAAQ;AACX,cAAI,SAAS;AACZ,oBAAQ,IAAI,kCAAkC,MAAM,EAAE;AAAA,UACvD;AAEA,gBAAM,8BAA8B,OAAO,KAAK,wBAAwB;AACxE,qBAAW,OAAO,6BAA6B;AAC9C,gBAAI,OAAO,QAAQ,GAAG,KAAK,GAAG;AAC7B,qBAAO,QAAQ,yBAAyB,GAAG,CAAC;AAAA,YAC7C;AAAA,UACD;AAAA,QACD;AAEA,eAAO,QAAQ,MAAS;AAAA,MACzB,CAAC;AAAA,IACF,CAAC;AAAA,EACF,OAEK;AACJ,yBAAqB,IAAI,QAAgB,aAAW;AACnD,UAAI,SAAS;AACZ,gBAAQ,IAAI,yDAAyD;AAAA,MACtE;AAEA,WAAK,kBAAkB,CAAC,KAAK,QAAQ,WAAW,QAAQ,MAAM,CAAC;AAAA,IAChE,CAAC;AAAA,EACF;AAEA,QAAM,cAAc,MAAM;AAC1B,MAAI,SAAS;AACZ,YAAQ,IAAI,mCAAmC,WAAW,EAAE;AAAA,EAC7D;AAEA,MAAI,CAAC,eAAe,YAAY,YAAY,MAAM,WAAW,YAAY,YAAY,MAAM,MAAM;AAChG,WAAO;AAAA,EACR;AAEA,SAAO,oBAAoB,WAAW;AACvC;AA3DsB;",
  "names": []
}
