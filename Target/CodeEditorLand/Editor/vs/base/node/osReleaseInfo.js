import{constants as G,promises as U}from"fs";import{createInterface as B}from"readline";function d(){return globalThis._VSCODE_NLS_LANGUAGE}var $=d()==="pseudo"||typeof document<"u"&&document.location&&document.location.hash.indexOf("pseudo=true")>=0;var f="en",m=!1,I=!1,p=!1,E=!1,w=!1,b=!1,k=!1,C=!1,O=!1,A=!1,g,x=f,S=f,F,a,l=globalThis,t;typeof l.vscode<"u"&&typeof l.vscode.process<"u"?t=l.vscode.process:typeof process<"u"&&typeof process?.versions?.node=="string"&&(t=process);var _=typeof t?.versions?.electron=="string",R=_&&t?.type==="renderer";if(typeof t=="object"){m=t.platform==="win32",I=t.platform==="darwin",p=t.platform==="linux",E=p&&!!t.env.SNAP&&!!t.env.SNAP_REVISION,k=_,O=!!t.env.CI||!!t.env.BUILD_ARTIFACTSTAGINGDIRECTORY,g=f,x=f;let n=t.env.VSCODE_NLS_CONFIG;if(n)try{let o=JSON.parse(n);g=o.userLocale,S=o.osLocale,x=o.resolvedLanguage||f,F=o.languagePack?.translationsConfigFile}catch{}w=!0}else typeof navigator=="object"&&!R?(a=navigator.userAgent,m=a.indexOf("Windows")>=0,I=a.indexOf("Macintosh")>=0,C=(a.indexOf("Macintosh")>=0||a.indexOf("iPad")>=0||a.indexOf("iPhone")>=0)&&!!navigator.maxTouchPoints&&navigator.maxTouchPoints>0,p=a.indexOf("Linux")>=0,A=a?.indexOf("Mobi")>=0,b=!0,x=d()||f,g=navigator.language.toLowerCase(),S=g):console.error("Unable to resolve platform.");var y=0;I?y=1:m?y=3:p&&(y=2);var v=m,h=I;var W=b&&typeof l.importScripts=="function",Q=W?l.origin:void 0;var i=a,c=x,D;(e=>{function n(){return c}e.value=n;function o(){return c.length===2?c==="en":c.length>=3?c[0]==="e"&&c[1]==="n"&&c[2]==="-":!1}e.isDefaultVariant=o;function r(){return c==="en"}e.isDefault=r})(D||={});var M=typeof l.postMessage=="function"&&!l.importScripts,H=(()=>{if(M){let n=[];l.addEventListener("message",r=>{if(r.data&&r.data.vscodeScheduleAsyncWork)for(let e=0,u=n.length;e<u;e++){let s=n[e];if(s.id===r.data.vscodeScheduleAsyncWork){n.splice(e,1),s.callback();return}}});let o=0;return r=>{let e=++o;n.push({id:e,callback:r}),l.postMessage({vscodeScheduleAsyncWork:e},"*")}}return n=>setTimeout(n)})();var T=!!(i&&i.indexOf("Chrome")>=0),J=!!(i&&i.indexOf("Firefox")>=0),Y=!!(!T&&i&&i.indexOf("Safari")>=0),q=!!(i&&i.indexOf("Edg/")>=0),X=!!(i&&i.indexOf("Android")>=0);async function ne(n){if(h||v)return;let o;for(let r of["/etc/os-release","/usr/lib/os-release","/etc/lsb-release"])try{o=await U.open(r,G.R_OK);break}catch{}if(!o){n("Unable to retrieve release information from known identifier paths.");return}try{let r=new Set(["ID","DISTRIB_ID","ID_LIKE","VERSION_ID","DISTRIB_RELEASE"]),e={id:"unknown"};for await(let u of B({input:o.createReadStream(),crlfDelay:1/0})){if(!u.includes("="))continue;let s=u.split("=")[0].toUpperCase().trim();if(r.has(s)){let L=u.split("=")[1].replace(/"/g,"").toLowerCase().trim();s==="ID"||s==="DISTRIB_ID"?e.id=L:s==="ID_LIKE"?e.id_like=L:(s==="VERSION_ID"||s==="DISTRIB_RELEASE")&&(e.version_id=L)}}return e}catch(r){n(r)}}export{ne as getOSReleaseInfo};
