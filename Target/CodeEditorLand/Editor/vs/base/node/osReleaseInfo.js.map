{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/osReleaseInfo.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { constants as FSConstants, promises as FSPromises } from \"fs\";\nimport { createInterface as readLines } from \"readline\";\nimport * as Platform from \"../common/platform.js\";\n\ntype ReleaseInfo = {\n\tid: string;\n\tid_like?: string;\n\tversion_id?: string;\n};\n\nexport async function getOSReleaseInfo(\n\terrorLogger: (error: any) => void,\n): Promise<ReleaseInfo | undefined> {\n\tif (Platform.isMacintosh || Platform.isWindows) {\n\t\treturn;\n\t}\n\n\t// Extract release information on linux based systems\n\t// using the identifiers specified in\n\t// https://www.freedesktop.org/software/systemd/man/os-release.html\n\tlet handle: FSPromises.FileHandle | undefined;\n\tfor (const filePath of [\n\t\t\"/etc/os-release\",\n\t\t\"/usr/lib/os-release\",\n\t\t\"/etc/lsb-release\",\n\t]) {\n\t\ttry {\n\t\t\thandle = await FSPromises.open(filePath, FSConstants.R_OK);\n\t\t\tbreak;\n\t\t} catch (err) {}\n\t}\n\n\tif (!handle) {\n\t\terrorLogger(\n\t\t\t\"Unable to retrieve release information from known identifier paths.\",\n\t\t);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst osReleaseKeys = new Set([\n\t\t\t\"ID\",\n\t\t\t\"DISTRIB_ID\",\n\t\t\t\"ID_LIKE\",\n\t\t\t\"VERSION_ID\",\n\t\t\t\"DISTRIB_RELEASE\",\n\t\t]);\n\t\tconst releaseInfo: ReleaseInfo = {\n\t\t\tid: \"unknown\",\n\t\t};\n\n\t\tfor await (const line of readLines({\n\t\t\tinput: handle.createReadStream(),\n\t\t\tcrlfDelay: Number.POSITIVE_INFINITY,\n\t\t})) {\n\t\t\tif (!line.includes(\"=\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst key = line.split(\"=\")[0].toUpperCase().trim();\n\t\t\tif (osReleaseKeys.has(key)) {\n\t\t\t\tconst value = line\n\t\t\t\t\t.split(\"=\")[1]\n\t\t\t\t\t.replace(/\"/g, \"\")\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.trim();\n\t\t\t\tif (key === \"ID\" || key === \"DISTRIB_ID\") {\n\t\t\t\t\treleaseInfo.id = value;\n\t\t\t\t} else if (key === \"ID_LIKE\") {\n\t\t\t\t\treleaseInfo.id_like = value;\n\t\t\t\t} else if (key === \"VERSION_ID\" || key === \"DISTRIB_RELEASE\") {\n\t\t\t\t\treleaseInfo.version_id = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn releaseInfo;\n\t} catch (err) {\n\t\terrorLogger(err);\n\t}\n\n\treturn;\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa,aAAa,YAAY,kBAAkB;AACjE,SAAS,mBAAmB,iBAAiB;AAC7C,YAAY,cAAc;AAQ1B,eAAsB,iBACrB,aACmC;AACnC,MAAI,SAAS,eAAe,SAAS,WAAW;AAC/C;AAAA,EACD;AAKA,MAAI;AACJ,aAAW,YAAY;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,EACD,GAAG;AACF,QAAI;AACH,eAAS,MAAM,WAAW,KAAK,UAAU,YAAY,IAAI;AACzD;AAAA,IACD,SAAS,KAAK;AAAA,IAAC;AAAA,EAChB;AAEA,MAAI,CAAC,QAAQ;AACZ;AAAA,MACC;AAAA,IACD;AACA;AAAA,EACD;AAEA,MAAI;AACH,UAAM,gBAAgB,oBAAI,IAAI;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AACD,UAAM,cAA2B;AAAA,MAChC,IAAI;AAAA,IACL;AAEA,qBAAiB,QAAQ,UAAU;AAAA,MAClC,OAAO,OAAO,iBAAiB;AAAA,MAC/B,WAAW,OAAO;AAAA,IACnB,CAAC,GAAG;AACH,UAAI,CAAC,KAAK,SAAS,GAAG,GAAG;AACxB;AAAA,MACD;AACA,YAAM,MAAM,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,YAAY,EAAE,KAAK;AAClD,UAAI,cAAc,IAAI,GAAG,GAAG;AAC3B,cAAM,QAAQ,KACZ,MAAM,GAAG,EAAE,CAAC,EACZ,QAAQ,MAAM,EAAE,EAChB,YAAY,EACZ,KAAK;AACP,YAAI,QAAQ,QAAQ,QAAQ,cAAc;AACzC,sBAAY,KAAK;AAAA,QAClB,WAAW,QAAQ,WAAW;AAC7B,sBAAY,UAAU;AAAA,QACvB,WAAW,QAAQ,gBAAgB,QAAQ,mBAAmB;AAC7D,sBAAY,aAAa;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR,SAAS,KAAK;AACb,gBAAY,GAAG;AAAA,EAChB;AAEA;AACD;AAvEsB;",
  "names": []
}
