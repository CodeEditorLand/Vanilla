{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/osReleaseInfo.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { constants as FSConstants, promises as FSPromises } from 'fs';\nimport { createInterface as readLines } from 'readline';\nimport * as Platform from '../common/platform.js';\n\ntype ReleaseInfo = {\n\tid: string;\n\tid_like?: string;\n\tversion_id?: string;\n};\n\nexport async function getOSReleaseInfo(errorLogger: (error: any) => void): Promise<ReleaseInfo | undefined> {\n\tif (Platform.isMacintosh || Platform.isWindows) {\n\t\treturn;\n\t}\n\n\t// Extract release information on linux based systems\n\t// using the identifiers specified in\n\t// https://www.freedesktop.org/software/systemd/man/os-release.html\n\tlet handle: FSPromises.FileHandle | undefined;\n\tfor (const filePath of ['/etc/os-release', '/usr/lib/os-release', '/etc/lsb-release']) {\n\t\ttry {\n\t\t\thandle = await FSPromises.open(filePath, FSConstants.R_OK);\n\t\t\tbreak;\n\t\t} catch (err) { }\n\t}\n\n\tif (!handle) {\n\t\terrorLogger('Unable to retrieve release information from known identifier paths.');\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst osReleaseKeys = new Set([\n\t\t\t'ID',\n\t\t\t'DISTRIB_ID',\n\t\t\t'ID_LIKE',\n\t\t\t'VERSION_ID',\n\t\t\t'DISTRIB_RELEASE',\n\t\t]);\n\t\tconst releaseInfo: ReleaseInfo = {\n\t\t\tid: 'unknown'\n\t\t};\n\n\t\tfor await (const line of readLines({ input: handle.createReadStream(), crlfDelay: Infinity })) {\n\t\t\tif (!line.includes('=')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst key = line.split('=')[0].toUpperCase().trim();\n\t\t\tif (osReleaseKeys.has(key)) {\n\t\t\t\tconst value = line.split('=')[1].replace(/\"/g, '').toLowerCase().trim();\n\t\t\t\tif (key === 'ID' || key === 'DISTRIB_ID') {\n\t\t\t\t\treleaseInfo.id = value;\n\t\t\t\t} else if (key === 'ID_LIKE') {\n\t\t\t\t\treleaseInfo.id_like = value;\n\t\t\t\t} else if (key === 'VERSION_ID' || key === 'DISTRIB_RELEASE') {\n\t\t\t\t\treleaseInfo.version_id = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn releaseInfo;\n\t} catch (err) {\n\t\terrorLogger(err);\n\t}\n\n\treturn;\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa,aAAa,YAAY,kBAAkB;AACjE,SAAS,mBAAmB,iBAAiB;AAC7C,YAAY,cAAc;AAQ1B,eAAsB,iBAAiB,aAAqE;AAC3G,MAAI,SAAS,eAAe,SAAS,WAAW;AAC/C;AAAA,EACD;AAKA,MAAI;AACJ,aAAW,YAAY,CAAC,mBAAmB,uBAAuB,kBAAkB,GAAG;AACtF,QAAI;AACH,eAAS,MAAM,WAAW,KAAK,UAAU,YAAY,IAAI;AACzD;AAAA,IACD,SAAS,KAAK;AAAA,IAAE;AAAA,EACjB;AAEA,MAAI,CAAC,QAAQ;AACZ,gBAAY,qEAAqE;AACjF;AAAA,EACD;AAEA,MAAI;AACH,UAAM,gBAAgB,oBAAI,IAAI;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AACD,UAAM,cAA2B;AAAA,MAChC,IAAI;AAAA,IACL;AAEA,qBAAiB,QAAQ,UAAU,EAAE,OAAO,OAAO,iBAAiB,GAAG,WAAW,SAAS,CAAC,GAAG;AAC9F,UAAI,CAAC,KAAK,SAAS,GAAG,GAAG;AACxB;AAAA,MACD;AACA,YAAM,MAAM,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,YAAY,EAAE,KAAK;AAClD,UAAI,cAAc,IAAI,GAAG,GAAG;AAC3B,cAAM,QAAQ,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,QAAQ,MAAM,EAAE,EAAE,YAAY,EAAE,KAAK;AACtE,YAAI,QAAQ,QAAQ,QAAQ,cAAc;AACzC,sBAAY,KAAK;AAAA,QAClB,WAAW,QAAQ,WAAW;AAC7B,sBAAY,UAAU;AAAA,QACvB,WAAW,QAAQ,gBAAgB,QAAQ,mBAAmB;AAC7D,sBAAY,aAAa;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR,SAAS,KAAK;AACb,gBAAY,GAAG;AAAA,EAChB;AAEA;AACD;AAxDsB;",
  "names": []
}
