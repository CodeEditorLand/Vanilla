var R=Object.defineProperty;var W=(w,f)=>{for(var t in f)R(w,t,{get:f[t],enumerable:!0})};import*as V from"path";import*as $ from"fs";var O={};W(O,{getMarks:()=>q,mark:()=>U});var j={exports:{}};(function(){function f(r){let a=[];typeof r=="number"&&a.push("code/timeOrigin",r);function l(c){a.push(c,Date.now())}function b(){let c=[];for(let g=0;g<a.length;g+=2)c.push({name:a[g],startTime:a[g+1]});return c}return{mark:l,getMarks:b}}function t(){if(typeof performance=="object"&&typeof performance.mark=="function"&&!performance.nodeTiming)return typeof performance.timeOrigin!="number"&&!performance.timing?f():{mark(r){performance.mark(r)},getMarks(){let r=performance.timeOrigin;typeof r!="number"&&(r=performance.timing.navigationStart||performance.timing.redirectStart||performance.timing.fetchStart);let a=[{name:"code/timeOrigin",startTime:Math.round(r)}];for(let l of performance.getEntriesByType("mark"))a.push({name:l.name,startTime:Math.round(r+l.startTime)});return a}};if(typeof process=="object"){let r=performance?.timeOrigin;return f(r)}else return console.trace("perf-util loaded in UNKNOWN environment"),f()}function o(r){return r.MonacoPerformanceMarks||(r.MonacoPerformanceMarks=t()),r.MonacoPerformanceMarks}var i;typeof global=="object"?i=global:typeof self=="object"?i=self:i={},typeof j=="object"&&typeof j.exports=="object"?j.exports=o(i):(console.trace("perf-util defined in UNKNOWN context (neither requirejs or commonjs)"),i.perf=o(i))})();var U=j.exports.mark,q=j.exports.getMarks;var N={exports:{}};(function(){function f(t,o,i){async function r(e){try{return await o.promises.access(e),!0}catch{return!1}}function a(e){let n=new Date;return o.promises.utimes(e,n,n)}async function l(e){let n=t.join(e,"languagepacks.json");try{return JSON.parse(await o.promises.readFile(n,"utf-8"))}catch{return}}function b(e,n){try{for(;n;){if(e[n])return n;let s=n.lastIndexOf("-");if(s>0)n=n.substring(0,s);else return}}catch(s){console.error("Resolving language pack configuration failed.",s)}}function c(e,n,s){return i.mark("code/didGenerateNls"),{userLocale:e,osLocale:n,resolvedLanguage:"en",defaultMessagesFile:t.join(s,"nls.messages.json"),locale:e,availableLanguages:{}}}async function g({userLocale:e,osLocale:n,userDataPath:s,commit:h,nlsMetadataPath:u}){if(i.mark("code/willGenerateNls"),process.env.VSCODE_DEV||e==="pseudo"||e.startsWith("en")||!h||!s)return c(e,n,u);try{let p=await l(s);if(!p)return c(e,n,u);let d=b(p,e);if(!d)return c(e,n,u);let m=p[d],v=m?.translations?.vscode;if(!m||typeof m.hash!="string"||!m.translations||typeof v!="string"||!await r(v))return c(e,n,u);let F=`${m.hash}.${d}`,k=t.join(s,"clp",F),y=t.join(k,h),M=t.join(y,"nls.messages.json"),x=t.join(k,"tcf.json"),S=t.join(k,"corrupted.info");await r(S)&&await o.promises.rm(k,{recursive:!0,force:!0,maxRetries:3});let P={userLocale:e,osLocale:n,resolvedLanguage:d,defaultMessagesFile:t.join(u,"nls.messages.json"),languagePack:{translationsConfigFile:x,messagesFile:M,corruptMarkerFile:S},locale:e,availableLanguages:{"*":d},_languagePackId:F,_languagePackSupport:!0,_translationsConfigFile:x,_cacheRoot:k,_resolvedLanguagePackCoreLocation:y,_corruptedFile:S};if(await r(y))return a(y).catch(()=>{}),i.mark("code/didGenerateNls"),P;let[,E,T,J]=await Promise.all([o.promises.mkdir(y,{recursive:!0}),JSON.parse(await o.promises.readFile(t.join(u,"nls.keys.json"),"utf-8")),JSON.parse(await o.promises.readFile(t.join(u,"nls.messages.json"),"utf-8")),JSON.parse(await o.promises.readFile(v,"utf-8"))]),C=[],_=0;for(let[K,G]of E){let I=J.contents[K];for(let D of G)C.push(I?.[D]||T[_]),_++}return await Promise.all([o.promises.writeFile(M,JSON.stringify(C),"utf-8"),o.promises.writeFile(x,JSON.stringify(m.translations),"utf-8")]),i.mark("code/didGenerateNls"),P}catch(p){console.error("Generating translation files failed.",p)}return c(e,n,u)}return{resolveNLSConfiguration:g}}if(typeof N=="object"&&typeof N.exports=="object")N.exports=f(V,$,O);else throw new Error("vs/base/node/nls defined in UNKNOWN context (neither requirejs or commonjs)")})();var L=N.exports.resolveNLSConfiguration;export{L as resolveNLSConfiguration};
