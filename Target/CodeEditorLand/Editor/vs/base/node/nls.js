import*as R from"path";import*as D from"fs";import*as V from"../common/performance.js";const d={exports:{}};(function(){function C(r,s,a){async function m(e){try{return await s.promises.access(e),!0}catch{return!1}}function x(e){const n=new Date;return s.promises.utimes(e,n,n)}async function P(e){const n=r.join(e,"languagepacks.json");try{return JSON.parse(await s.promises.readFile(n,"utf-8"))}catch{return}}function O(e,n){try{for(;n;){if(e[n])return n;const t=n.lastIndexOf("-");if(t>0)n=n.substring(0,t);else return}}catch{}}function u(e,n,t){return a.mark("code/didGenerateNls"),{userLocale:e,osLocale:n,resolvedLanguage:"en",defaultMessagesFile:r.join(t,"nls.messages.json"),locale:e,availableLanguages:{}}}async function b({userLocale:e,osLocale:n,userDataPath:t,commit:y,nlsMetadataPath:i}){if(a.mark("code/willGenerateNls"),process.env.VSCODE_DEV||e==="pseudo"||e.startsWith("en")||!y||!t)return u(e,n,i);try{const l=await P(t);if(!l)return u(e,n,i);const c=O(l,e);if(!c)return u(e,n,i);const o=l[c],p=o?.translations?.vscode;if(!o||typeof o.hash!="string"||!o.translations||typeof p!="string"||!await m(p))return u(e,n,i);const w=`${o.hash}.${c}`,g=r.join(t,"clp",w),f=r.join(g,y),N=r.join(f,"nls.messages.json"),k=r.join(g,"tcf.json"),j=r.join(g,"corrupted.info");await m(j)&&await s.promises.rm(g,{recursive:!0,force:!0,maxRetries:3});const v={userLocale:e,osLocale:n,resolvedLanguage:c,defaultMessagesFile:r.join(i,"nls.messages.json"),languagePack:{translationsConfigFile:k,messagesFile:N,corruptMarkerFile:j},locale:e,availableLanguages:{"*":c},_languagePackId:w,_languagePackSupport:!0,_translationsConfigFile:k,_cacheRoot:g,_resolvedLanguagePackCoreLocation:f,_corruptedFile:j};if(await m(f))return x(f).catch(()=>{}),a.mark("code/didGenerateNls"),v;const[,h,_,J]=await Promise.all([s.promises.mkdir(f,{recursive:!0}),JSON.parse(await s.promises.readFile(r.join(i,"nls.keys.json"),"utf-8")),JSON.parse(await s.promises.readFile(r.join(i,"nls.messages.json"),"utf-8")),JSON.parse(await s.promises.readFile(p,"utf-8"))]),F=[];let S=0;for(const[E,G]of h){const I=J.contents[E];for(const K of G)F.push(I?.[K]||_[S]),S++}return await Promise.all([s.promises.writeFile(N,JSON.stringify(F),"utf-8"),s.promises.writeFile(k,JSON.stringify(o.translations),"utf-8")]),a.mark("code/didGenerateNls"),v}catch{}return u(e,n,i)}return{resolveNLSConfiguration:b}}if(typeof d=="object"&&typeof d.exports=="object")d.exports=C(R,D,V);else throw new Error("vs/base/node/nls defined in UNKNOWN context (neither requirejs or commonjs)")})();const $=d.exports.resolveNLSConfiguration;export{$ as resolveNLSConfiguration};
