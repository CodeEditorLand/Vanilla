{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/shell.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { userInfo } from 'os';\nimport * as platform from '../common/platform.js';\nimport { getFirstAvailablePowerShellInstallation } from './powershell.js';\nimport * as processes from './processes.js';\n\n/**\n * Gets the detected default shell for the _system_, not to be confused with VS Code's _default_\n * shell that the terminal uses by default.\n * @param os The platform to detect the shell of.\n */\nexport async function getSystemShell(os: platform.OperatingSystem, env: platform.IProcessEnvironment): Promise<string> {\n\tif (os === platform.OperatingSystem.Windows) {\n\t\tif (platform.isWindows) {\n\t\t\treturn getSystemShellWindows();\n\t\t}\n\t\t// Don't detect Windows shell when not on Windows\n\t\treturn processes.getWindowsShell(env);\n\t}\n\n\treturn getSystemShellUnixLike(os, env);\n}\n\nlet _TERMINAL_DEFAULT_SHELL_UNIX_LIKE: string | null = null;\nfunction getSystemShellUnixLike(os: platform.OperatingSystem, env: platform.IProcessEnvironment): string {\n\t// Only use $SHELL for the current OS\n\tif (platform.isLinux && os === platform.OperatingSystem.Macintosh || platform.isMacintosh && os === platform.OperatingSystem.Linux) {\n\t\treturn '/bin/bash';\n\t}\n\n\tif (!_TERMINAL_DEFAULT_SHELL_UNIX_LIKE) {\n\t\tlet unixLikeTerminal: string | undefined | null;\n\t\tif (platform.isWindows) {\n\t\t\tunixLikeTerminal = '/bin/bash'; // for WSL\n\t\t} else {\n\t\t\tunixLikeTerminal = env['SHELL'];\n\n\t\t\tif (!unixLikeTerminal) {\n\t\t\t\ttry {\n\t\t\t\t\t// It's possible for $SHELL to be unset, this API reads /etc/passwd. See https://github.com/github/codespaces/issues/1639\n\t\t\t\t\t// Node docs: \"Throws a SystemError if a user has no username or homedir.\"\n\t\t\t\t\tunixLikeTerminal = userInfo().shell;\n\t\t\t\t} catch (err) { }\n\t\t\t}\n\n\t\t\tif (!unixLikeTerminal) {\n\t\t\t\tunixLikeTerminal = 'sh';\n\t\t\t}\n\n\t\t\t// Some systems have $SHELL set to /bin/false which breaks the terminal\n\t\t\tif (unixLikeTerminal === '/bin/false') {\n\t\t\t\tunixLikeTerminal = '/bin/bash';\n\t\t\t}\n\t\t}\n\t\t_TERMINAL_DEFAULT_SHELL_UNIX_LIKE = unixLikeTerminal;\n\t}\n\treturn _TERMINAL_DEFAULT_SHELL_UNIX_LIKE;\n}\n\nlet _TERMINAL_DEFAULT_SHELL_WINDOWS: string | null = null;\nasync function getSystemShellWindows(): Promise<string> {\n\tif (!_TERMINAL_DEFAULT_SHELL_WINDOWS) {\n\t\t_TERMINAL_DEFAULT_SHELL_WINDOWS = (await getFirstAvailablePowerShellInstallation())!.exePath;\n\t}\n\treturn _TERMINAL_DEFAULT_SHELL_WINDOWS;\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,YAAY,cAAc;AAC1B,SAAS,+CAA+C;AACxD,YAAY,eAAe;AAO3B,eAAsB,eAAe,IAA8B,KAAoD;AACtH,MAAI,OAAO,SAAS,gBAAgB,SAAS;AAC5C,QAAI,SAAS,WAAW;AACvB,aAAO,sBAAsB;AAAA,IAC9B;AAEA,WAAO,UAAU,gBAAgB,GAAG;AAAA,EACrC;AAEA,SAAO,uBAAuB,IAAI,GAAG;AACtC;AAVsB;AAYtB,IAAI,oCAAmD;AACvD,SAAS,uBAAuB,IAA8B,KAA2C;AAExG,MAAI,SAAS,WAAW,OAAO,SAAS,gBAAgB,aAAa,SAAS,eAAe,OAAO,SAAS,gBAAgB,OAAO;AACnI,WAAO;AAAA,EACR;AAEA,MAAI,CAAC,mCAAmC;AACvC,QAAI;AACJ,QAAI,SAAS,WAAW;AACvB,yBAAmB;AAAA,IACpB,OAAO;AACN,yBAAmB,IAAI,OAAO;AAE9B,UAAI,CAAC,kBAAkB;AACtB,YAAI;AAGH,6BAAmB,SAAS,EAAE;AAAA,QAC/B,SAAS,KAAK;AAAA,QAAE;AAAA,MACjB;AAEA,UAAI,CAAC,kBAAkB;AACtB,2BAAmB;AAAA,MACpB;AAGA,UAAI,qBAAqB,cAAc;AACtC,2BAAmB;AAAA,MACpB;AAAA,IACD;AACA,wCAAoC;AAAA,EACrC;AACA,SAAO;AACR;AAjCS;AAmCT,IAAI,kCAAiD;AACrD,eAAe,wBAAyC;AACvD,MAAI,CAAC,iCAAiC;AACrC,uCAAmC,MAAM,wCAAwC,GAAI;AAAA,EACtF;AACA,SAAO;AACR;AALe;",
  "names": []
}
