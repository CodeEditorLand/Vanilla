{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/id.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { networkInterfaces } from 'os';\nimport { TernarySearchTree } from '../common/ternarySearchTree.js';\nimport * as uuid from '../common/uuid.js';\nimport { getMac } from './macAddress.js';\nimport { isWindows } from '../common/platform.js';\n\n// http://www.techrepublic.com/blog/data-center/mac-address-scorecard-for-common-virtual-machine-platforms/\n// VMware ESX 3, Server, Workstation, Player\t00-50-56, 00-0C-29, 00-05-69\n// Microsoft Hyper-V, Virtual Server, Virtual PC\t00-03-FF\n// Parallels Desktop, Workstation, Server, Virtuozzo\t00-1C-42\n// Virtual Iron 4\t00-0F-4B\n// Red Hat Xen\t00-16-3E\n// Oracle VM\t00-16-3E\n// XenSource\t00-16-3E\n// Novell Xen\t00-16-3E\n// Sun xVM VirtualBox\t08-00-27\nexport const virtualMachineHint: { value(): number } = new class {\n\n\tprivate _virtualMachineOUIs?: TernarySearchTree<string, boolean>;\n\tprivate _value?: number;\n\n\tprivate _isVirtualMachineMacAddress(mac: string): boolean {\n\t\tif (!this._virtualMachineOUIs) {\n\t\t\tthis._virtualMachineOUIs = TernarySearchTree.forStrings<boolean>();\n\n\t\t\t// dash-separated\n\t\t\tthis._virtualMachineOUIs.set('00-50-56', true);\n\t\t\tthis._virtualMachineOUIs.set('00-0C-29', true);\n\t\t\tthis._virtualMachineOUIs.set('00-05-69', true);\n\t\t\tthis._virtualMachineOUIs.set('00-03-FF', true);\n\t\t\tthis._virtualMachineOUIs.set('00-1C-42', true);\n\t\t\tthis._virtualMachineOUIs.set('00-16-3E', true);\n\t\t\tthis._virtualMachineOUIs.set('08-00-27', true);\n\n\t\t\t// colon-separated\n\t\t\tthis._virtualMachineOUIs.set('00:50:56', true);\n\t\t\tthis._virtualMachineOUIs.set('00:0C:29', true);\n\t\t\tthis._virtualMachineOUIs.set('00:05:69', true);\n\t\t\tthis._virtualMachineOUIs.set('00:03:FF', true);\n\t\t\tthis._virtualMachineOUIs.set('00:1C:42', true);\n\t\t\tthis._virtualMachineOUIs.set('00:16:3E', true);\n\t\t\tthis._virtualMachineOUIs.set('08:00:27', true);\n\t\t}\n\t\treturn !!this._virtualMachineOUIs.findSubstr(mac);\n\t}\n\n\tvalue(): number {\n\t\tif (this._value === undefined) {\n\t\t\tlet vmOui = 0;\n\t\t\tlet interfaceCount = 0;\n\n\t\t\tconst interfaces = networkInterfaces();\n\t\t\tfor (const name in interfaces) {\n\t\t\t\tconst networkInterface = interfaces[name];\n\t\t\t\tif (networkInterface) {\n\t\t\t\t\tfor (const { mac, internal } of networkInterface) {\n\t\t\t\t\t\tif (!internal) {\n\t\t\t\t\t\t\tinterfaceCount += 1;\n\t\t\t\t\t\t\tif (this._isVirtualMachineMacAddress(mac.toUpperCase())) {\n\t\t\t\t\t\t\t\tvmOui += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._value = interfaceCount > 0\n\t\t\t\t? vmOui / interfaceCount\n\t\t\t\t: 0;\n\t\t}\n\n\t\treturn this._value;\n\t}\n};\n\nlet machineId: Promise<string>;\nexport async function getMachineId(errorLogger: (error: any) => void): Promise<string> {\n\tif (!machineId) {\n\t\tmachineId = (async () => {\n\t\t\tconst id = await getMacMachineId(errorLogger);\n\n\t\t\treturn id || uuid.generateUuid(); // fallback, generate a UUID\n\t\t})();\n\t}\n\n\treturn machineId;\n}\n\nasync function getMacMachineId(errorLogger: (error: any) => void): Promise<string | undefined> {\n\ttry {\n\t\tconst crypto = await import('crypto');\n\t\tconst macAddress = getMac();\n\t\treturn crypto.createHash('sha256').update(macAddress, 'utf8').digest('hex');\n\t} catch (err) {\n\t\terrorLogger(err);\n\t\treturn undefined;\n\t}\n}\n\nconst SQM_KEY: string = 'Software\\\\Microsoft\\\\SQMClient';\nexport async function getSqmMachineId(errorLogger: (error: any) => void): Promise<string> {\n\tif (isWindows) {\n\t\tconst Registry = await import('@vscode/windows-registry');\n\t\ttry {\n\t\t\treturn Registry.GetStringRegKey('HKEY_LOCAL_MACHINE', SQM_KEY, 'MachineId') || '';\n\t\t} catch (err) {\n\t\t\terrorLogger(err);\n\t\t\treturn '';\n\t\t}\n\t}\n\treturn '';\n}\n\nexport async function getdevDeviceId(errorLogger: (error: any) => void): Promise<string> {\n\ttry {\n\t\tconst deviceIdPackage = await import('@vscode/deviceid');\n\t\tconst id = await deviceIdPackage.getDeviceId();\n\t\treturn id;\n\t} catch (err) {\n\t\terrorLogger(err);\n\t\treturn '';\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,yBAAyB;AAClC,YAAY,UAAU;AACtB,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAYnB,MAAM,qBAA0C,IAAI,MAAM;AAAA,EAExD;AAAA,EACA;AAAA,EAEA,4BAA4B,KAAsB;AACzD,QAAI,CAAC,KAAK,qBAAqB;AAC9B,WAAK,sBAAsB,kBAAkB,WAAoB;AAGjE,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAG7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAC7C,WAAK,oBAAoB,IAAI,YAAY,IAAI;AAAA,IAC9C;AACA,WAAO,CAAC,CAAC,KAAK,oBAAoB,WAAW,GAAG;AAAA,EACjD;AAAA,EAEA,QAAgB;AACf,QAAI,KAAK,WAAW,QAAW;AAC9B,UAAI,QAAQ;AACZ,UAAI,iBAAiB;AAErB,YAAM,aAAa,kBAAkB;AACrC,iBAAW,QAAQ,YAAY;AAC9B,cAAM,mBAAmB,WAAW,IAAI;AACxC,YAAI,kBAAkB;AACrB,qBAAW,EAAE,KAAK,SAAS,KAAK,kBAAkB;AACjD,gBAAI,CAAC,UAAU;AACd,gCAAkB;AAClB,kBAAI,KAAK,4BAA4B,IAAI,YAAY,CAAC,GAAG;AACxD,yBAAS;AAAA,cACV;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AACA,WAAK,SAAS,iBAAiB,IAC5B,QAAQ,iBACR;AAAA,IACJ;AAEA,WAAO,KAAK;AAAA,EACb;AACD;AAEA,IAAI;AACJ,eAAsB,aAAa,aAAoD;AACtF,MAAI,CAAC,WAAW;AACf,iBAAa,YAAY;AACxB,YAAM,KAAK,MAAM,gBAAgB,WAAW;AAE5C,aAAO,MAAM,KAAK,aAAa;AAAA,IAChC,GAAG;AAAA,EACJ;AAEA,SAAO;AACR;AAVsB;AAYtB,eAAe,gBAAgB,aAAgE;AAC9F,MAAI;AACH,UAAM,SAAS,MAAM,OAAO,QAAQ;AACpC,UAAM,aAAa,OAAO;AAC1B,WAAO,OAAO,WAAW,QAAQ,EAAE,OAAO,YAAY,MAAM,EAAE,OAAO,KAAK;AAAA,EAC3E,SAAS,KAAK;AACb,gBAAY,GAAG;AACf,WAAO;AAAA,EACR;AACD;AATe;AAWf,MAAM,UAAkB;AACxB,eAAsB,gBAAgB,aAAoD;AACzF,MAAI,WAAW;AACd,UAAM,WAAW,MAAM,OAAO,0BAA0B;AACxD,QAAI;AACH,aAAO,SAAS,gBAAgB,sBAAsB,SAAS,WAAW,KAAK;AAAA,IAChF,SAAS,KAAK;AACb,kBAAY,GAAG;AACf,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO;AACR;AAXsB;AAatB,eAAsB,eAAe,aAAoD;AACxF,MAAI;AACH,UAAM,kBAAkB,MAAM,OAAO,kBAAkB;AACvD,UAAM,KAAK,MAAM,gBAAgB,YAAY;AAC7C,WAAO;AAAA,EACR,SAAS,KAAK;AACb,gBAAY,GAAG;AACf,WAAO;AAAA,EACR;AACD;AATsB;",
  "names": []
}
