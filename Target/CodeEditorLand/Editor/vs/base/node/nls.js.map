{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/nls.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/// <reference path=\"../../../typings/require.d.ts\" />\n\n//@ts-check\n'use strict';\n\n/**\n * @import { INLSConfiguration, ILanguagePacks } from '../../nls'\n * @import { IResolveNLSConfigurationContext } from './nls'\n */\n\n// ESM-uncomment-begin\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as perf from '../common/performance.js';\n\n/** @type any */\nconst module = { exports: {} };\n// ESM-uncomment-end\n\n(function () {\n\t// ESM-comment-begin\n\t// const isESM = false;\n\t// ESM-comment-end\n\t// ESM-uncomment-begin\n\tconst isESM = true;\n\t// ESM-uncomment-end\n\n\t/**\n\t * @param {typeof import('path')} path\n\t * @param {typeof import('fs')} fs\n\t * @param {typeof import('../common/performance')} perf\n\t */\n\tfunction factory(path, fs, perf) {\n\n\t\t//#region fs helpers\n\n\t\t/**\n\t\t * @param {string} path\n\t\t */\n\t\tasync function exists(path) {\n\t\t\ttry {\n\t\t\t\tawait fs.promises.access(path);\n\n\t\t\t\treturn true;\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} path\n\t\t */\n\t\tfunction touch(path) {\n\t\t\tconst date = new Date();\n\t\t\treturn fs.promises.utimes(path, date, date);\n\t\t}\n\n\t\t//#endregion\n\n\t\t/**\n\t\t * The `languagepacks.json` file is a JSON file that contains all metadata\n\t\t * about installed language extensions per language. Specifically, for\n\t\t * core (`vscode`) and all extensions it supports, it points to the related\n\t\t * translation files.\n\t\t *\n\t\t * The file is updated whenever a new language pack is installed or removed.\n\t\t *\n\t\t * @param {string} userDataPath\n\t\t * @returns {Promise<ILanguagePacks | undefined>}\n\t\t */\n\t\tasync function getLanguagePackConfigurations(userDataPath) {\n\t\t\tconst configFile = path.join(userDataPath, 'languagepacks.json');\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(await fs.promises.readFile(configFile, 'utf-8'));\n\t\t\t} catch (err) {\n\t\t\t\treturn undefined; // Do nothing. If we can't read the file we have no language pack config.\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {ILanguagePacks} languagePacks\n\t\t * @param {string | undefined} locale\n\t\t */\n\t\tfunction resolveLanguagePackLanguage(languagePacks, locale) {\n\t\t\ttry {\n\t\t\t\twhile (locale) {\n\t\t\t\t\tif (languagePacks[locale]) {\n\t\t\t\t\t\treturn locale;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = locale.lastIndexOf('-');\n\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\tlocale = locale.substring(0, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Resolving language pack configuration failed.', error);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} userLocale\n\t\t * @param {string} osLocale\n\t\t * @param {string} nlsMetadataPath\n\t\t * @returns {INLSConfiguration}\n\t\t */\n\t\tfunction defaultNLSConfiguration(userLocale, osLocale, nlsMetadataPath) {\n\t\t\tperf.mark('code/didGenerateNls');\n\n\t\t\treturn {\n\t\t\t\tuserLocale,\n\t\t\t\tosLocale,\n\t\t\t\tresolvedLanguage: 'en',\n\t\t\t\tdefaultMessagesFile: path.join(nlsMetadataPath, 'nls.messages.json'),\n\n\t\t\t\t// NLS: below 2 are a relic from old times only used by vscode-nls and deprecated\n\t\t\t\tlocale: userLocale,\n\t\t\t\tavailableLanguages: {}\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @param {IResolveNLSConfigurationContext} context\n\t\t * @returns {Promise<INLSConfiguration>}\n\t\t */\n\t\tasync function resolveNLSConfiguration({ userLocale, osLocale, userDataPath, commit, nlsMetadataPath }) {\n\t\t\tperf.mark('code/willGenerateNls');\n\n\t\t\tif (\n\t\t\t\tprocess.env['VSCODE_DEV'] ||\n\t\t\t\tuserLocale === 'pseudo' ||\n\t\t\t\tuserLocale.startsWith('en') ||\n\t\t\t\t!commit ||\n\t\t\t\t!userDataPath\n\t\t\t) {\n\t\t\t\treturn defaultNLSConfiguration(userLocale, osLocale, nlsMetadataPath);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst languagePacks = await getLanguagePackConfigurations(userDataPath);\n\t\t\t\tif (!languagePacks) {\n\t\t\t\t\treturn defaultNLSConfiguration(userLocale, osLocale, nlsMetadataPath);\n\t\t\t\t}\n\n\t\t\t\tconst resolvedLanguage = resolveLanguagePackLanguage(languagePacks, userLocale);\n\t\t\t\tif (!resolvedLanguage) {\n\t\t\t\t\treturn defaultNLSConfiguration(userLocale, osLocale, nlsMetadataPath);\n\t\t\t\t}\n\n\t\t\t\tconst languagePack = languagePacks[resolvedLanguage];\n\t\t\t\tconst mainLanguagePackPath = languagePack?.translations?.['vscode'];\n\t\t\t\tif (\n\t\t\t\t\t!languagePack ||\n\t\t\t\t\ttypeof languagePack.hash !== 'string' ||\n\t\t\t\t\t!languagePack.translations ||\n\t\t\t\t\ttypeof mainLanguagePackPath !== 'string' ||\n\t\t\t\t\t!(await exists(mainLanguagePackPath))\n\t\t\t\t) {\n\t\t\t\t\treturn defaultNLSConfiguration(userLocale, osLocale, nlsMetadataPath);\n\t\t\t\t}\n\n\t\t\t\tconst languagePackId = `${languagePack.hash}.${resolvedLanguage}`;\n\t\t\t\tconst globalLanguagePackCachePath = path.join(userDataPath, 'clp', languagePackId);\n\t\t\t\tconst commitLanguagePackCachePath = path.join(globalLanguagePackCachePath, commit);\n\t\t\t\tconst languagePackMessagesFile = path.join(commitLanguagePackCachePath, 'nls.messages.json');\n\t\t\t\tconst translationsConfigFile = path.join(globalLanguagePackCachePath, 'tcf.json');\n\t\t\t\tconst languagePackCorruptMarkerFile = path.join(globalLanguagePackCachePath, 'corrupted.info');\n\n\t\t\t\tif (await exists(languagePackCorruptMarkerFile)) {\n\t\t\t\t\tawait fs.promises.rm(globalLanguagePackCachePath, { recursive: true, force: true, maxRetries: 3 }); // delete corrupted cache folder\n\t\t\t\t}\n\n\t\t\t\t/** @type {INLSConfiguration} */\n\t\t\t\tconst result = {\n\t\t\t\t\tuserLocale,\n\t\t\t\t\tosLocale,\n\t\t\t\t\tresolvedLanguage,\n\t\t\t\t\tdefaultMessagesFile: path.join(nlsMetadataPath, 'nls.messages.json'),\n\t\t\t\t\tlanguagePack: {\n\t\t\t\t\t\ttranslationsConfigFile,\n\t\t\t\t\t\tmessagesFile: languagePackMessagesFile,\n\t\t\t\t\t\tcorruptMarkerFile: languagePackCorruptMarkerFile\n\t\t\t\t\t},\n\n\t\t\t\t\t// NLS: below properties are a relic from old times only used by vscode-nls and deprecated\n\t\t\t\t\tlocale: userLocale,\n\t\t\t\t\tavailableLanguages: { '*': resolvedLanguage },\n\t\t\t\t\t_languagePackId: languagePackId,\n\t\t\t\t\t_languagePackSupport: true,\n\t\t\t\t\t_translationsConfigFile: translationsConfigFile,\n\t\t\t\t\t_cacheRoot: globalLanguagePackCachePath,\n\t\t\t\t\t_resolvedLanguagePackCoreLocation: commitLanguagePackCachePath,\n\t\t\t\t\t_corruptedFile: languagePackCorruptMarkerFile\n\t\t\t\t};\n\n\t\t\t\tif (await exists(commitLanguagePackCachePath)) {\n\t\t\t\t\ttouch(commitLanguagePackCachePath).catch(() => { }); // We don't wait for this. No big harm if we can't touch\n\t\t\t\t\tperf.mark('code/didGenerateNls');\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t/** @type {[unknown, Array<[string, string[]]>, string[], { contents: Record<string, Record<string, string>> }]} */\n\t\t\t\t//                          ^moduleId ^nlsKeys                               ^moduleId      ^nlsKey ^nlsValue\n\t\t\t\tconst [\n\t\t\t\t\t,\n\t\t\t\t\tnlsDefaultKeys,\n\t\t\t\t\tnlsDefaultMessages,\n\t\t\t\t\tnlsPackdata\n\t\t\t\t] = await Promise.all([\n\t\t\t\t\tfs.promises.mkdir(commitLanguagePackCachePath, { recursive: true }),\n\t\t\t\t\tJSON.parse(await fs.promises.readFile(path.join(nlsMetadataPath, 'nls.keys.json'), 'utf-8')),\n\t\t\t\t\tJSON.parse(await fs.promises.readFile(path.join(nlsMetadataPath, 'nls.messages.json'), 'utf-8')),\n\t\t\t\t\tJSON.parse(await fs.promises.readFile(mainLanguagePackPath, 'utf-8'))\n\t\t\t\t]);\n\n\t\t\t\t/** @type {string[]} */\n\t\t\t\tconst nlsResult = [];\n\n\t\t\t\t// We expect NLS messages to be in a flat array in sorted order as they\n\t\t\t\t// where produced during build time. We use `nls.keys.json` to know the\n\t\t\t\t// right order and then lookup the related message from the translation.\n\t\t\t\t// If a translation does not exist, we fallback to the default message.\n\n\t\t\t\tlet nlsIndex = 0;\n\t\t\t\tfor (const [moduleId, nlsKeys] of nlsDefaultKeys) {\n\t\t\t\t\tconst moduleTranslations = nlsPackdata.contents[moduleId];\n\t\t\t\t\tfor (const nlsKey of nlsKeys) {\n\t\t\t\t\t\tnlsResult.push(moduleTranslations?.[nlsKey] || nlsDefaultMessages[nlsIndex]);\n\t\t\t\t\t\tnlsIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tfs.promises.writeFile(languagePackMessagesFile, JSON.stringify(nlsResult), 'utf-8'),\n\t\t\t\t\tfs.promises.writeFile(translationsConfigFile, JSON.stringify(languagePack.translations), 'utf-8')\n\t\t\t\t]);\n\n\t\t\t\tperf.mark('code/didGenerateNls');\n\n\t\t\t\treturn result;\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Generating translation files failed.', error);\n\t\t\t}\n\n\t\t\treturn defaultNLSConfiguration(userLocale, osLocale, nlsMetadataPath);\n\t\t}\n\n\t\treturn {\n\t\t\tresolveNLSConfiguration\n\t\t};\n\t}\n\n\tif (!isESM && typeof define === 'function') {\n\t\t// amd\n\t\tdefine(['path', 'fs', 'vs/base/common/performance'], function (/** @type {typeof import('path')} */ path, /** @type {typeof import('fs')} */ fs, /** @type {typeof import('../common/performance')} */ perf) { return factory(path, fs, perf); });\n\t} else if (typeof module === 'object' && typeof module.exports === 'object') {\n\t\t// commonjs\n\t\t// ESM-comment-begin\n\t\t// const path = require('path');\n\t\t// const fs = require('fs');\n\t\t// const perf = require('../common/performance');\n\t\t// ESM-comment-end\n\t\tmodule.exports = factory(path, fs, perf);\n\t} else {\n\t\tthrow new Error('vs/base/node/nls defined in UNKNOWN context (neither requirejs or commonjs)');\n\t}\n})();\n\n// ESM-uncomment-begin\nexport const resolveNLSConfiguration = module.exports.resolveNLSConfiguration;\n// ESM-uncomment-end\n"],
  "mappings": ";;AAgBA,YAAY,UAAU;AACtB,YAAY,QAAQ;AACpB,YAAY,UAAU;AAGtB,MAAM,SAAS,EAAE,SAAS,CAAC,EAAE;AAAA,CAG5B,WAAY;AAKZ,QAAM,QAAQ;AAQd,WAAS,QAAQA,OAAMC,KAAIC,OAAM;AAOhC,mBAAe,OAAOF,OAAM;AAC3B,UAAI;AACH,cAAMC,IAAG,SAAS,OAAOD,KAAI;AAE7B,eAAO;AAAA,MACR,QAAQ;AACP,eAAO;AAAA,MACR;AAAA,IACD;AARe;AAaf,aAAS,MAAMA,OAAM;AACpB,YAAM,OAAO,oBAAI,KAAK;AACtB,aAAOC,IAAG,SAAS,OAAOD,OAAM,MAAM,IAAI;AAAA,IAC3C;AAHS;AAkBT,mBAAe,8BAA8B,cAAc;AAC1D,YAAM,aAAaA,MAAK,KAAK,cAAc,oBAAoB;AAC/D,UAAI;AACH,eAAO,KAAK,MAAM,MAAMC,IAAG,SAAS,SAAS,YAAY,OAAO,CAAC;AAAA,MAClE,SAAS,KAAK;AACb,eAAO;AAAA,MACR;AAAA,IACD;AAPe;AAaf,aAAS,4BAA4B,eAAe,QAAQ;AAC3D,UAAI;AACH,eAAO,QAAQ;AACd,cAAI,cAAc,MAAM,GAAG;AAC1B,mBAAO;AAAA,UACR;AAEA,gBAAM,QAAQ,OAAO,YAAY,GAAG;AACpC,cAAI,QAAQ,GAAG;AACd,qBAAS,OAAO,UAAU,GAAG,KAAK;AAAA,UACnC,OAAO;AACN,mBAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD,SAAS,OAAO;AACf,gBAAQ,MAAM,iDAAiD,KAAK;AAAA,MACrE;AAEA,aAAO;AAAA,IACR;AAnBS;AA2BT,aAAS,wBAAwB,YAAY,UAAU,iBAAiB;AACvE,MAAAC,MAAK,KAAK,qBAAqB;AAE/B,aAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA,kBAAkB;AAAA,QAClB,qBAAqBF,MAAK,KAAK,iBAAiB,mBAAmB;AAAA;AAAA,QAGnE,QAAQ;AAAA,QACR,oBAAoB,CAAC;AAAA,MACtB;AAAA,IACD;AAbS;AAmBT,mBAAeG,yBAAwB,EAAE,YAAY,UAAU,cAAc,QAAQ,gBAAgB,GAAG;AACvG,MAAAD,MAAK,KAAK,sBAAsB;AAEhC,UACC,QAAQ,IAAI,YAAY,KACxB,eAAe,YACf,WAAW,WAAW,IAAI,KAC1B,CAAC,UACD,CAAC,cACA;AACD,eAAO,wBAAwB,YAAY,UAAU,eAAe;AAAA,MACrE;AAEA,UAAI;AACH,cAAM,gBAAgB,MAAM,8BAA8B,YAAY;AACtE,YAAI,CAAC,eAAe;AACnB,iBAAO,wBAAwB,YAAY,UAAU,eAAe;AAAA,QACrE;AAEA,cAAM,mBAAmB,4BAA4B,eAAe,UAAU;AAC9E,YAAI,CAAC,kBAAkB;AACtB,iBAAO,wBAAwB,YAAY,UAAU,eAAe;AAAA,QACrE;AAEA,cAAM,eAAe,cAAc,gBAAgB;AACnD,cAAM,uBAAuB,cAAc,eAAe,QAAQ;AAClE,YACC,CAAC,gBACD,OAAO,aAAa,SAAS,YAC7B,CAAC,aAAa,gBACd,OAAO,yBAAyB,YAChC,CAAE,MAAM,OAAO,oBAAoB,GAClC;AACD,iBAAO,wBAAwB,YAAY,UAAU,eAAe;AAAA,QACrE;AAEA,cAAM,iBAAiB,GAAG,aAAa,IAAI,IAAI,gBAAgB;AAC/D,cAAM,8BAA8BF,MAAK,KAAK,cAAc,OAAO,cAAc;AACjF,cAAM,8BAA8BA,MAAK,KAAK,6BAA6B,MAAM;AACjF,cAAM,2BAA2BA,MAAK,KAAK,6BAA6B,mBAAmB;AAC3F,cAAM,yBAAyBA,MAAK,KAAK,6BAA6B,UAAU;AAChF,cAAM,gCAAgCA,MAAK,KAAK,6BAA6B,gBAAgB;AAE7F,YAAI,MAAM,OAAO,6BAA6B,GAAG;AAChD,gBAAMC,IAAG,SAAS,GAAG,6BAA6B,EAAE,WAAW,MAAM,OAAO,MAAM,YAAY,EAAE,CAAC;AAAA,QAClG;AAGA,cAAM,SAAS;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA,qBAAqBD,MAAK,KAAK,iBAAiB,mBAAmB;AAAA,UACnE,cAAc;AAAA,YACb;AAAA,YACA,cAAc;AAAA,YACd,mBAAmB;AAAA,UACpB;AAAA;AAAA,UAGA,QAAQ;AAAA,UACR,oBAAoB,EAAE,KAAK,iBAAiB;AAAA,UAC5C,iBAAiB;AAAA,UACjB,sBAAsB;AAAA,UACtB,yBAAyB;AAAA,UACzB,YAAY;AAAA,UACZ,mCAAmC;AAAA,UACnC,gBAAgB;AAAA,QACjB;AAEA,YAAI,MAAM,OAAO,2BAA2B,GAAG;AAC9C,gBAAM,2BAA2B,EAAE,MAAM,MAAM;AAAA,UAAE,CAAC;AAClD,UAAAE,MAAK,KAAK,qBAAqB;AAC/B,iBAAO;AAAA,QACR;AAIA,cAAM;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,IAAI,MAAM,QAAQ,IAAI;AAAA,UACrBD,IAAG,SAAS,MAAM,6BAA6B,EAAE,WAAW,KAAK,CAAC;AAAA,UAClE,KAAK,MAAM,MAAMA,IAAG,SAAS,SAASD,MAAK,KAAK,iBAAiB,eAAe,GAAG,OAAO,CAAC;AAAA,UAC3F,KAAK,MAAM,MAAMC,IAAG,SAAS,SAASD,MAAK,KAAK,iBAAiB,mBAAmB,GAAG,OAAO,CAAC;AAAA,UAC/F,KAAK,MAAM,MAAMC,IAAG,SAAS,SAAS,sBAAsB,OAAO,CAAC;AAAA,QACrE,CAAC;AAGD,cAAM,YAAY,CAAC;AAOnB,YAAI,WAAW;AACf,mBAAW,CAAC,UAAU,OAAO,KAAK,gBAAgB;AACjD,gBAAM,qBAAqB,YAAY,SAAS,QAAQ;AACxD,qBAAW,UAAU,SAAS;AAC7B,sBAAU,KAAK,qBAAqB,MAAM,KAAK,mBAAmB,QAAQ,CAAC;AAC3E;AAAA,UACD;AAAA,QACD;AAEA,cAAM,QAAQ,IAAI;AAAA,UACjBA,IAAG,SAAS,UAAU,0BAA0B,KAAK,UAAU,SAAS,GAAG,OAAO;AAAA,UAClFA,IAAG,SAAS,UAAU,wBAAwB,KAAK,UAAU,aAAa,YAAY,GAAG,OAAO;AAAA,QACjG,CAAC;AAED,QAAAC,MAAK,KAAK,qBAAqB;AAE/B,eAAO;AAAA,MACR,SAAS,OAAO;AACf,gBAAQ,MAAM,wCAAwC,KAAK;AAAA,MAC5D;AAEA,aAAO,wBAAwB,YAAY,UAAU,eAAe;AAAA,IACrE;AAxHe,WAAAC,0BAAA;AA0Hf,WAAO;AAAA,MACN,yBAAAA;AAAA,IACD;AAAA,EACD;AA9NS;AAgOT,MAAI,CAAC,SAAS,OAAO,WAAW,YAAY;AAE3C,WAAO,CAAC,QAAQ,MAAM,4BAA4B,GAAG,SAA+CH,OAAyCC,KAA0DC,OAAM;AAAE,aAAO,QAAQF,OAAMC,KAAIC,KAAI;AAAA,IAAG,CAAC;AAAA,EACjP,WAAW,OAAO,WAAW,YAAY,OAAO,OAAO,YAAY,UAAU;AAO5E,WAAO,UAAU,QAAQ,MAAM,IAAI,IAAI;AAAA,EACxC,OAAO;AACN,UAAM,IAAI,MAAM,6EAA6E;AAAA,EAC9F;AACD,GAAG;AAGI,MAAM,0BAA0B,OAAO,QAAQ;",
  "names": ["path", "fs", "perf", "resolveNLSConfiguration"]
}
