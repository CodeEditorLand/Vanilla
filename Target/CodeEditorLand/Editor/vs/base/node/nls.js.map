{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/nls.js"],
  "sourcesContent": ["/**\n * @import { INLSConfiguration, ILanguagePacks } from '../../nls'\n * @import { IResolveNLSConfigurationContext } from './nls'\n */\n\nimport * as fs from \"fs\";\n// ESM-uncomment-begin\nimport * as path from \"path\";\nimport * as perf from \"../common/performance.js\";\n\n/** @type any */\nconst module = { exports: {} };\n// ESM-uncomment-end\n\n(() => {\n\t// ESM-comment-begin\n\t// const isESM = false;\n\t// ESM-comment-end\n\t// ESM-uncomment-begin\n\tconst isESM = true;\n\t// ESM-uncomment-end\n\n\t/**\n\t * @param {typeof import('path')} path\n\t * @param {typeof import('fs')} fs\n\t * @param {typeof import('../common/performance')} perf\n\t */\n\tfunction factory(path, fs, perf) {\n\t\t//#region fs helpers\n\n\t\t/**\n\t\t * @param {string} path\n\t\t */\n\t\tasync function exists(path) {\n\t\t\ttry {\n\t\t\t\tawait fs.promises.access(path);\n\n\t\t\t\treturn true;\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} path\n\t\t */\n\t\tfunction touch(path) {\n\t\t\tconst date = new Date();\n\t\t\treturn fs.promises.utimes(path, date, date);\n\t\t}\n\n\t\t//#endregion\n\n\t\t/**\n\t\t * The `languagepacks.json` file is a JSON file that contains all metadata\n\t\t * about installed language extensions per language. Specifically, for\n\t\t * core (`vscode`) and all extensions it supports, it points to the related\n\t\t * translation files.\n\t\t *\n\t\t * The file is updated whenever a new language pack is installed or removed.\n\t\t *\n\t\t * @param {string} userDataPath\n\t\t * @returns {Promise<ILanguagePacks | undefined>}\n\t\t */\n\t\tasync function getLanguagePackConfigurations(userDataPath) {\n\t\t\tconst configFile = path.join(userDataPath, \"languagepacks.json\");\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(\n\t\t\t\t\tawait fs.promises.readFile(configFile, \"utf-8\"),\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\treturn undefined; // Do nothing. If we can't read the file we have no language pack config.\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {ILanguagePacks} languagePacks\n\t\t * @param {string | undefined} locale\n\t\t */\n\t\tfunction resolveLanguagePackLanguage(languagePacks, locale) {\n\t\t\ttry {\n\t\t\t\twhile (locale) {\n\t\t\t\t\tif (languagePacks[locale]) {\n\t\t\t\t\t\treturn locale;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = locale.lastIndexOf(\"-\");\n\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\tlocale = locale.substring(0, index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t\"Resolving language pack configuration failed.\",\n\t\t\t\t\terror,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} userLocale\n\t\t * @param {string} osLocale\n\t\t * @param {string} nlsMetadataPath\n\t\t * @returns {INLSConfiguration}\n\t\t */\n\t\tfunction defaultNLSConfiguration(\n\t\t\tuserLocale,\n\t\t\tosLocale,\n\t\t\tnlsMetadataPath,\n\t\t) {\n\t\t\tperf.mark(\"code/didGenerateNls\");\n\n\t\t\treturn {\n\t\t\t\tuserLocale,\n\t\t\t\tosLocale,\n\t\t\t\tresolvedLanguage: \"en\",\n\t\t\t\tdefaultMessagesFile: path.join(\n\t\t\t\t\tnlsMetadataPath,\n\t\t\t\t\t\"nls.messages.json\",\n\t\t\t\t),\n\n\t\t\t\t// NLS: below 2 are a relic from old times only used by vscode-nls and deprecated\n\t\t\t\tlocale: userLocale,\n\t\t\t\tavailableLanguages: {},\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @param {IResolveNLSConfigurationContext} context\n\t\t * @returns {Promise<INLSConfiguration>}\n\t\t */\n\t\tasync function resolveNLSConfiguration({\n\t\t\tuserLocale,\n\t\t\tosLocale,\n\t\t\tuserDataPath,\n\t\t\tcommit,\n\t\t\tnlsMetadataPath,\n\t\t}) {\n\t\t\tperf.mark(\"code/willGenerateNls\");\n\n\t\t\tif (\n\t\t\t\tprocess.env[\"VSCODE_DEV\"] ||\n\t\t\t\tuserLocale === \"pseudo\" ||\n\t\t\t\tuserLocale.startsWith(\"en\") ||\n\t\t\t\t!commit ||\n\t\t\t\t!userDataPath\n\t\t\t) {\n\t\t\t\treturn defaultNLSConfiguration(\n\t\t\t\t\tuserLocale,\n\t\t\t\t\tosLocale,\n\t\t\t\t\tnlsMetadataPath,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst languagePacks =\n\t\t\t\t\tawait getLanguagePackConfigurations(userDataPath);\n\t\t\t\tif (!languagePacks) {\n\t\t\t\t\treturn defaultNLSConfiguration(\n\t\t\t\t\t\tuserLocale,\n\t\t\t\t\t\tosLocale,\n\t\t\t\t\t\tnlsMetadataPath,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst resolvedLanguage = resolveLanguagePackLanguage(\n\t\t\t\t\tlanguagePacks,\n\t\t\t\t\tuserLocale,\n\t\t\t\t);\n\t\t\t\tif (!resolvedLanguage) {\n\t\t\t\t\treturn defaultNLSConfiguration(\n\t\t\t\t\t\tuserLocale,\n\t\t\t\t\t\tosLocale,\n\t\t\t\t\t\tnlsMetadataPath,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst languagePack = languagePacks[resolvedLanguage];\n\t\t\t\tconst mainLanguagePackPath =\n\t\t\t\t\tlanguagePack?.translations?.[\"vscode\"];\n\t\t\t\tif (\n\t\t\t\t\t!languagePack ||\n\t\t\t\t\ttypeof languagePack.hash !== \"string\" ||\n\t\t\t\t\t!languagePack.translations ||\n\t\t\t\t\ttypeof mainLanguagePackPath !== \"string\" ||\n\t\t\t\t\t!(await exists(mainLanguagePackPath))\n\t\t\t\t) {\n\t\t\t\t\treturn defaultNLSConfiguration(\n\t\t\t\t\t\tuserLocale,\n\t\t\t\t\t\tosLocale,\n\t\t\t\t\t\tnlsMetadataPath,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst languagePackId = `${languagePack.hash}.${resolvedLanguage}`;\n\t\t\t\tconst globalLanguagePackCachePath = path.join(\n\t\t\t\t\tuserDataPath,\n\t\t\t\t\t\"clp\",\n\t\t\t\t\tlanguagePackId,\n\t\t\t\t);\n\t\t\t\tconst commitLanguagePackCachePath = path.join(\n\t\t\t\t\tglobalLanguagePackCachePath,\n\t\t\t\t\tcommit,\n\t\t\t\t);\n\t\t\t\tconst languagePackMessagesFile = path.join(\n\t\t\t\t\tcommitLanguagePackCachePath,\n\t\t\t\t\t\"nls.messages.json\",\n\t\t\t\t);\n\t\t\t\tconst translationsConfigFile = path.join(\n\t\t\t\t\tglobalLanguagePackCachePath,\n\t\t\t\t\t\"tcf.json\",\n\t\t\t\t);\n\t\t\t\tconst languagePackCorruptMarkerFile = path.join(\n\t\t\t\t\tglobalLanguagePackCachePath,\n\t\t\t\t\t\"corrupted.info\",\n\t\t\t\t);\n\n\t\t\t\tif (await exists(languagePackCorruptMarkerFile)) {\n\t\t\t\t\tawait fs.promises.rm(globalLanguagePackCachePath, {\n\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\tforce: true,\n\t\t\t\t\t\tmaxRetries: 3,\n\t\t\t\t\t}); // delete corrupted cache folder\n\t\t\t\t}\n\n\t\t\t\t/** @type {INLSConfiguration} */\n\t\t\t\tconst result = {\n\t\t\t\t\tuserLocale,\n\t\t\t\t\tosLocale,\n\t\t\t\t\tresolvedLanguage,\n\t\t\t\t\tdefaultMessagesFile: path.join(\n\t\t\t\t\t\tnlsMetadataPath,\n\t\t\t\t\t\t\"nls.messages.json\",\n\t\t\t\t\t),\n\t\t\t\t\tlanguagePack: {\n\t\t\t\t\t\ttranslationsConfigFile,\n\t\t\t\t\t\tmessagesFile: languagePackMessagesFile,\n\t\t\t\t\t\tcorruptMarkerFile: languagePackCorruptMarkerFile,\n\t\t\t\t\t},\n\n\t\t\t\t\t// NLS: below properties are a relic from old times only used by vscode-nls and deprecated\n\t\t\t\t\tlocale: userLocale,\n\t\t\t\t\tavailableLanguages: { \"*\": resolvedLanguage },\n\t\t\t\t\t_languagePackId: languagePackId,\n\t\t\t\t\t_languagePackSupport: true,\n\t\t\t\t\t_translationsConfigFile: translationsConfigFile,\n\t\t\t\t\t_cacheRoot: globalLanguagePackCachePath,\n\t\t\t\t\t_resolvedLanguagePackCoreLocation:\n\t\t\t\t\t\tcommitLanguagePackCachePath,\n\t\t\t\t\t_corruptedFile: languagePackCorruptMarkerFile,\n\t\t\t\t};\n\n\t\t\t\tif (await exists(commitLanguagePackCachePath)) {\n\t\t\t\t\ttouch(commitLanguagePackCachePath).catch(() => {}); // We don't wait for this. No big harm if we can't touch\n\t\t\t\t\tperf.mark(\"code/didGenerateNls\");\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t/** @type {[unknown, Array<[string, string[]]>, string[], { contents: Record<string, Record<string, string>> }]} */\n\t\t\t\t//                          ^moduleId ^nlsKeys                               ^moduleId      ^nlsKey ^nlsValue\n\t\t\t\tconst [, nlsDefaultKeys, nlsDefaultMessages, nlsPackdata] =\n\t\t\t\t\tawait Promise.all([\n\t\t\t\t\t\tfs.promises.mkdir(commitLanguagePackCachePath, {\n\t\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tJSON.parse(\n\t\t\t\t\t\t\tawait fs.promises.readFile(\n\t\t\t\t\t\t\t\tpath.join(nlsMetadataPath, \"nls.keys.json\"),\n\t\t\t\t\t\t\t\t\"utf-8\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tJSON.parse(\n\t\t\t\t\t\t\tawait fs.promises.readFile(\n\t\t\t\t\t\t\t\tpath.join(nlsMetadataPath, \"nls.messages.json\"),\n\t\t\t\t\t\t\t\t\"utf-8\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tJSON.parse(\n\t\t\t\t\t\t\tawait fs.promises.readFile(\n\t\t\t\t\t\t\t\tmainLanguagePackPath,\n\t\t\t\t\t\t\t\t\"utf-8\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t]);\n\n\t\t\t\t/** @type {string[]} */\n\t\t\t\tconst nlsResult = [];\n\n\t\t\t\t// We expect NLS messages to be in a flat array in sorted order as they\n\t\t\t\t// where produced during build time. We use `nls.keys.json` to know the\n\t\t\t\t// right order and then lookup the related message from the translation.\n\t\t\t\t// If a translation does not exist, we fallback to the default message.\n\n\t\t\t\tlet nlsIndex = 0;\n\t\t\t\tfor (const [moduleId, nlsKeys] of nlsDefaultKeys) {\n\t\t\t\t\tconst moduleTranslations = nlsPackdata.contents[moduleId];\n\t\t\t\t\tfor (const nlsKey of nlsKeys) {\n\t\t\t\t\t\tnlsResult.push(\n\t\t\t\t\t\t\tmoduleTranslations?.[nlsKey] ||\n\t\t\t\t\t\t\t\tnlsDefaultMessages[nlsIndex],\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnlsIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tfs.promises.writeFile(\n\t\t\t\t\t\tlanguagePackMessagesFile,\n\t\t\t\t\t\tJSON.stringify(nlsResult),\n\t\t\t\t\t\t\"utf-8\",\n\t\t\t\t\t),\n\t\t\t\t\tfs.promises.writeFile(\n\t\t\t\t\t\ttranslationsConfigFile,\n\t\t\t\t\t\tJSON.stringify(languagePack.translations),\n\t\t\t\t\t\t\"utf-8\",\n\t\t\t\t\t),\n\t\t\t\t]);\n\n\t\t\t\tperf.mark(\"code/didGenerateNls\");\n\n\t\t\t\treturn result;\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Generating translation files failed.\", error);\n\t\t\t}\n\n\t\t\treturn defaultNLSConfiguration(\n\t\t\t\tuserLocale,\n\t\t\t\tosLocale,\n\t\t\t\tnlsMetadataPath,\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\tresolveNLSConfiguration,\n\t\t};\n\t}\n\n\tif (!isESM && typeof define === \"function\") {\n\t\t// amd\n\t\tdefine([\"path\", \"fs\", \"vs/base/common/performance\"], (\n\t\t\t/** @type {typeof import('path')} */ path,\n\t\t\t/** @type {typeof import('fs')} */ fs,\n\t\t\t/** @type {typeof import('../common/performance')} */ perf,\n\t\t) => factory(path, fs, perf));\n\t} else if (\n\t\ttypeof module === \"object\" &&\n\t\ttypeof module.exports === \"object\"\n\t) {\n\t\t// commonjs\n\t\t// ESM-comment-begin\n\t\t// const path = require('path');\n\t\t// const fs = require('fs');\n\t\t// const perf = require('../common/performance');\n\t\t// ESM-comment-end\n\t\tmodule.exports = factory(path, fs, perf);\n\t} else {\n\t\tthrow new Error(\n\t\t\t\"vs/base/node/nls defined in UNKNOWN context (neither requirejs or commonjs)\",\n\t\t);\n\t}\n})();\n\n// ESM-uncomment-begin\nexport const resolveNLSConfiguration = module.exports.resolveNLSConfiguration;\n// ESM-uncomment-end\n"],
  "mappings": "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",
  "names": ["path", "fs", "perf", "resolveNLSConfiguration"]
}
