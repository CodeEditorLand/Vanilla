{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/ports.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as net from 'net';\n\n/**\n * Given a start point and a max number of retries, will find a port that\n * is openable. Will return 0 in case no free port can be found.\n */\nexport function findFreePort(startPort: number, giveUpAfter: number, timeout: number, stride = 1): Promise<number> {\n\tlet done = false;\n\n\treturn new Promise(resolve => {\n\t\tconst timeoutHandle = setTimeout(() => {\n\t\t\tif (!done) {\n\t\t\t\tdone = true;\n\t\t\t\treturn resolve(0);\n\t\t\t}\n\t\t}, timeout);\n\n\t\tdoFindFreePort(startPort, giveUpAfter, stride, (port) => {\n\t\t\tif (!done) {\n\t\t\t\tdone = true;\n\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t\treturn resolve(port);\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction doFindFreePort(startPort: number, giveUpAfter: number, stride: number, clb: (port: number) => void): void {\n\tif (giveUpAfter === 0) {\n\t\treturn clb(0);\n\t}\n\n\tconst client = new net.Socket();\n\n\t// If we can connect to the port it means the port is already taken so we continue searching\n\tclient.once('connect', () => {\n\t\tdispose(client);\n\n\t\treturn doFindFreePort(startPort + stride, giveUpAfter - 1, stride, clb);\n\t});\n\n\tclient.once('data', () => {\n\t\t// this listener is required since node.js 8.x\n\t});\n\n\tclient.once('error', (err: Error & { code?: string }) => {\n\t\tdispose(client);\n\n\t\t// If we receive any non ECONNREFUSED error, it means the port is used but we cannot connect\n\t\tif (err.code !== 'ECONNREFUSED') {\n\t\t\treturn doFindFreePort(startPort + stride, giveUpAfter - 1, stride, clb);\n\t\t}\n\n\t\t// Otherwise it means the port is free to use!\n\t\treturn clb(startPort);\n\t});\n\n\tclient.connect(startPort, '127.0.0.1');\n}\n\n// Reference: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/main/net/base/port_util.cc#56\nexport const BROWSER_RESTRICTED_PORTS: any = {\n\t1: true,      // tcpmux\n\t7: true,      // echo\n\t9: true,      // discard\n\t11: true,     // systat\n\t13: true,     // daytime\n\t15: true,     // netstat\n\t17: true,     // qotd\n\t19: true,     // chargen\n\t20: true,     // ftp data\n\t21: true,     // ftp access\n\t22: true,     // ssh\n\t23: true,     // telnet\n\t25: true,     // smtp\n\t37: true,     // time\n\t42: true,     // name\n\t43: true,     // nicname\n\t53: true,     // domain\n\t69: true,     // tftp\n\t77: true,     // priv-rjs\n\t79: true,     // finger\n\t87: true,     // ttylink\n\t95: true,     // supdup\n\t101: true,    // hostriame\n\t102: true,    // iso-tsap\n\t103: true,    // gppitnp\n\t104: true,    // acr-nema\n\t109: true,    // pop2\n\t110: true,    // pop3\n\t111: true,    // sunrpc\n\t113: true,    // auth\n\t115: true,    // sftp\n\t117: true,    // uucp-path\n\t119: true,    // nntp\n\t123: true,    // NTP\n\t135: true,    // loc-srv /epmap\n\t137: true,    // netbios\n\t139: true,    // netbios\n\t143: true,    // imap2\n\t161: true,    // snmp\n\t179: true,    // BGP\n\t389: true,    // ldap\n\t427: true,    // SLP (Also used by Apple Filing Protocol)\n\t465: true,    // smtp+ssl\n\t512: true,    // print / exec\n\t513: true,    // login\n\t514: true,    // shell\n\t515: true,    // printer\n\t526: true,    // tempo\n\t530: true,    // courier\n\t531: true,    // chat\n\t532: true,    // netnews\n\t540: true,    // uucp\n\t548: true,    // AFP (Apple Filing Protocol)\n\t554: true,    // rtsp\n\t556: true,    // remotefs\n\t563: true,    // nntp+ssl\n\t587: true,    // smtp (rfc6409)\n\t601: true,    // syslog-conn (rfc3195)\n\t636: true,    // ldap+ssl\n\t989: true,    // ftps-data\n\t990: true,    // ftps\n\t993: true,    // ldap+ssl\n\t995: true,    // pop3+ssl\n\t1719: true,   // h323gatestat\n\t1720: true,   // h323hostcall\n\t1723: true,   // pptp\n\t2049: true,   // nfs\n\t3659: true,   // apple-sasl / PasswordServer\n\t4045: true,   // lockd\n\t5060: true,   // sip\n\t5061: true,   // sips\n\t6000: true,   // X11\n\t6566: true,   // sane-port\n\t6665: true,   // Alternate IRC [Apple addition]\n\t6666: true,   // Alternate IRC [Apple addition]\n\t6667: true,   // Standard IRC [Apple addition]\n\t6668: true,   // Alternate IRC [Apple addition]\n\t6669: true,   // Alternate IRC [Apple addition]\n\t6697: true,   // IRC + TLS\n\t10080: true   // Amanda\n};\n\n/**\n * Uses listen instead of connect. Is faster, but if there is another listener on 0.0.0.0 then this will take 127.0.0.1 from that listener.\n */\nexport function findFreePortFaster(startPort: number, giveUpAfter: number, timeout: number, hostname: string = '127.0.0.1'): Promise<number> {\n\tlet resolved: boolean = false;\n\tlet timeoutHandle: NodeJS.Timeout | undefined = undefined;\n\tlet countTried: number = 1;\n\tconst server = net.createServer({ pauseOnConnect: true });\n\tfunction doResolve(port: number, resolve: (port: number) => void) {\n\t\tif (!resolved) {\n\t\t\tresolved = true;\n\t\t\tserver.removeAllListeners();\n\t\t\tserver.close();\n\t\t\tif (timeoutHandle) {\n\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t}\n\t\t\tresolve(port);\n\t\t}\n\t}\n\treturn new Promise<number>(resolve => {\n\t\ttimeoutHandle = setTimeout(() => {\n\t\t\tdoResolve(0, resolve);\n\t\t}, timeout);\n\n\t\tserver.on('listening', () => {\n\t\t\tdoResolve(startPort, resolve);\n\t\t});\n\t\tserver.on('error', err => {\n\t\t\tif (err && ((<any>err).code === 'EADDRINUSE' || (<any>err).code === 'EACCES') && (countTried < giveUpAfter)) {\n\t\t\t\tstartPort++;\n\t\t\t\tcountTried++;\n\t\t\t\tserver.listen(startPort, hostname);\n\t\t\t} else {\n\t\t\t\tdoResolve(0, resolve);\n\t\t\t}\n\t\t});\n\t\tserver.on('close', () => {\n\t\t\tdoResolve(0, resolve);\n\t\t});\n\t\tserver.listen(startPort, hostname);\n\t});\n}\n\nfunction dispose(socket: net.Socket): void {\n\ttry {\n\t\tsocket.removeAllListeners('connect');\n\t\tsocket.removeAllListeners('error');\n\t\tsocket.end();\n\t\tsocket.destroy();\n\t\tsocket.unref();\n\t} catch (error) {\n\t\tconsole.error(error); // otherwise this error would get lost in the callback chain\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AAMd,SAAS,aAAa,WAAmB,aAAqB,SAAiB,SAAS,GAAoB;AAClH,MAAI,OAAO;AAEX,SAAO,IAAI,QAAQ,aAAW;AAC7B,UAAM,gBAAgB,WAAW,MAAM;AACtC,UAAI,CAAC,MAAM;AACV,eAAO;AACP,eAAO,QAAQ,CAAC;AAAA,MACjB;AAAA,IACD,GAAG,OAAO;AAEV,mBAAe,WAAW,aAAa,QAAQ,CAAC,SAAS;AACxD,UAAI,CAAC,MAAM;AACV,eAAO;AACP,qBAAa,aAAa;AAC1B,eAAO,QAAQ,IAAI;AAAA,MACpB;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF;AAnBgB;AAqBhB,SAAS,eAAe,WAAmB,aAAqB,QAAgB,KAAmC;AAClH,MAAI,gBAAgB,GAAG;AACtB,WAAO,IAAI,CAAC;AAAA,EACb;AAEA,QAAM,SAAS,IAAI,IAAI,OAAO;AAG9B,SAAO,KAAK,WAAW,MAAM;AAC5B,YAAQ,MAAM;AAEd,WAAO,eAAe,YAAY,QAAQ,cAAc,GAAG,QAAQ,GAAG;AAAA,EACvE,CAAC;AAED,SAAO,KAAK,QAAQ,MAAM;AAAA,EAE1B,CAAC;AAED,SAAO,KAAK,SAAS,CAAC,QAAmC;AACxD,YAAQ,MAAM;AAGd,QAAI,IAAI,SAAS,gBAAgB;AAChC,aAAO,eAAe,YAAY,QAAQ,cAAc,GAAG,QAAQ,GAAG;AAAA,IACvE;AAGA,WAAO,IAAI,SAAS;AAAA,EACrB,CAAC;AAED,SAAO,QAAQ,WAAW,WAAW;AACtC;AA/BS;AAkCF,MAAM,2BAAgC;AAAA,EAC5C,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,IAAI;AAAA;AAAA,EACJ,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,KAAK;AAAA;AAAA,EACL,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,KAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,OAAO;AAAA;AACR;AAKO,SAAS,mBAAmB,WAAmB,aAAqB,SAAiB,WAAmB,aAA8B;AAC5I,MAAI,WAAoB;AACxB,MAAI,gBAA4C;AAChD,MAAI,aAAqB;AACzB,QAAM,SAAS,IAAI,aAAa,EAAE,gBAAgB,KAAK,CAAC;AACxD,WAAS,UAAU,MAAc,SAAiC;AACjE,QAAI,CAAC,UAAU;AACd,iBAAW;AACX,aAAO,mBAAmB;AAC1B,aAAO,MAAM;AACb,UAAI,eAAe;AAClB,qBAAa,aAAa;AAAA,MAC3B;AACA,cAAQ,IAAI;AAAA,IACb;AAAA,EACD;AAVS;AAWT,SAAO,IAAI,QAAgB,aAAW;AACrC,oBAAgB,WAAW,MAAM;AAChC,gBAAU,GAAG,OAAO;AAAA,IACrB,GAAG,OAAO;AAEV,WAAO,GAAG,aAAa,MAAM;AAC5B,gBAAU,WAAW,OAAO;AAAA,IAC7B,CAAC;AACD,WAAO,GAAG,SAAS,SAAO;AACzB,UAAI,QAAc,IAAK,SAAS,gBAAsB,IAAK,SAAS,aAAc,aAAa,aAAc;AAC5G;AACA;AACA,eAAO,OAAO,WAAW,QAAQ;AAAA,MAClC,OAAO;AACN,kBAAU,GAAG,OAAO;AAAA,MACrB;AAAA,IACD,CAAC;AACD,WAAO,GAAG,SAAS,MAAM;AACxB,gBAAU,GAAG,OAAO;AAAA,IACrB,CAAC;AACD,WAAO,OAAO,WAAW,QAAQ;AAAA,EAClC,CAAC;AACF;AAtCgB;AAwChB,SAAS,QAAQ,QAA0B;AAC1C,MAAI;AACH,WAAO,mBAAmB,SAAS;AACnC,WAAO,mBAAmB,OAAO;AACjC,WAAO,IAAI;AACX,WAAO,QAAQ;AACf,WAAO,MAAM;AAAA,EACd,SAAS,OAAO;AACf,YAAQ,MAAM,KAAK;AAAA,EACpB;AACD;AAVS;",
  "names": []
}
