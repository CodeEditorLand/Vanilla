{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/osDisplayProtocolInfo.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { constants as FSConstants, promises as FSPromises } from 'fs';\nimport { join } from '../common/path.js';\nimport { env } from '../common/process.js';\n\nconst XDG_SESSION_TYPE = 'XDG_SESSION_TYPE';\nconst WAYLAND_DISPLAY = 'WAYLAND_DISPLAY';\nconst XDG_RUNTIME_DIR = 'XDG_RUNTIME_DIR';\n\nconst enum DisplayProtocolType {\n\tWayland = 'wayland',\n\tXWayland = 'xwayland',\n\tX11 = 'x11',\n\tUnknown = 'unknown'\n}\n\nexport async function getDisplayProtocol(errorLogger: (error: any) => void): Promise<DisplayProtocolType> {\n\tconst xdgSessionType = env[XDG_SESSION_TYPE];\n\n\tif (xdgSessionType) {\n\t\t// If XDG_SESSION_TYPE is set, return its value if it's either 'wayland' or 'x11'.\n\t\t// We assume that any value other than 'wayland' or 'x11' is an error or unexpected,\n\t\t// hence 'unknown' is returned.\n\t\treturn xdgSessionType === DisplayProtocolType.Wayland || xdgSessionType === DisplayProtocolType.X11 ? xdgSessionType : DisplayProtocolType.Unknown;\n\t} else {\n\t\tconst waylandDisplay = env[WAYLAND_DISPLAY];\n\n\t\tif (!waylandDisplay) {\n\t\t\t// If WAYLAND_DISPLAY is empty, then the session is x11.\n\t\t\treturn DisplayProtocolType.X11;\n\t\t} else {\n\t\t\tconst xdgRuntimeDir = env[XDG_RUNTIME_DIR];\n\n\t\t\tif (!xdgRuntimeDir) {\n\t\t\t\t// If XDG_RUNTIME_DIR is empty, then the session can only be guessed.\n\t\t\t\treturn DisplayProtocolType.Unknown;\n\t\t\t} else {\n\t\t\t\t// Check for the presence of the file $XDG_RUNTIME_DIR/wayland-0.\n\t\t\t\tconst waylandServerPipe = join(xdgRuntimeDir, 'wayland-0');\n\n\t\t\t\ttry {\n\t\t\t\t\tawait FSPromises.access(waylandServerPipe, FSConstants.R_OK);\n\n\t\t\t\t\t// If the file exists, then the session is wayland.\n\t\t\t\t\treturn DisplayProtocolType.Wayland;\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// If the file does not exist or an error occurs, we guess 'unknown'\n\t\t\t\t\t// since WAYLAND_DISPLAY was set but no wayland-0 pipe could be confirmed.\n\t\t\t\t\terrorLogger(err);\n\t\t\t\t\treturn DisplayProtocolType.Unknown;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport function getCodeDisplayProtocol(displayProtocol: DisplayProtocolType, ozonePlatform: string | undefined): DisplayProtocolType {\n\tif (!ozonePlatform) {\n\t\treturn displayProtocol === DisplayProtocolType.Wayland ? DisplayProtocolType.XWayland : DisplayProtocolType.X11;\n\t} else {\n\t\tswitch (ozonePlatform) {\n\t\t\tcase 'auto':\n\t\t\t\treturn displayProtocol;\n\t\t\tcase 'x11':\n\t\t\t\treturn displayProtocol === DisplayProtocolType.Wayland ? DisplayProtocolType.XWayland : DisplayProtocolType.X11;\n\t\t\tcase 'wayland':\n\t\t\t\treturn DisplayProtocolType.Wayland;\n\t\t\tdefault:\n\t\t\t\treturn DisplayProtocolType.Unknown;\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa,aAAa,YAAY,kBAAkB;AACjE,SAAS,YAAY;AACrB,SAAS,WAAW;AAEpB,MAAM,mBAAmB;AACzB,MAAM,kBAAkB;AACxB,MAAM,kBAAkB;AAExB,IAAW,sBAAX,kBAAWA,yBAAX;AACC,EAAAA,qBAAA,aAAU;AACV,EAAAA,qBAAA,cAAW;AACX,EAAAA,qBAAA,SAAM;AACN,EAAAA,qBAAA,aAAU;AAJA,SAAAA;AAAA,GAAA;AAOX,eAAsB,mBAAmB,aAAiE;AACzG,QAAM,iBAAiB,IAAI,gBAAgB;AAE3C,MAAI,gBAAgB;AAInB,WAAO,mBAAmB,2BAA+B,mBAAmB,kBAA0B,iBAAiB;AAAA,EACxH,OAAO;AACN,UAAM,iBAAiB,IAAI,eAAe;AAE1C,QAAI,CAAC,gBAAgB;AAEpB,aAAO;AAAA,IACR,OAAO;AACN,YAAM,gBAAgB,IAAI,eAAe;AAEzC,UAAI,CAAC,eAAe;AAEnB,eAAO;AAAA,MACR,OAAO;AAEN,cAAM,oBAAoB,KAAK,eAAe,WAAW;AAEzD,YAAI;AACH,gBAAM,WAAW,OAAO,mBAAmB,YAAY,IAAI;AAG3D,iBAAO;AAAA,QACR,SAAS,KAAK;AAGb,sBAAY,GAAG;AACf,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAtCsB;AAyCf,SAAS,uBAAuB,iBAAsC,eAAwD;AACpI,MAAI,CAAC,eAAe;AACnB,WAAO,oBAAoB,0BAA8B,4BAA+B;AAAA,EACzF,OAAO;AACN,YAAQ,eAAe;AAAA,MACtB,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO,oBAAoB,0BAA8B,4BAA+B;AAAA,MACzF,KAAK;AACJ,eAAO;AAAA,MACR;AACC,eAAO;AAAA,IACT;AAAA,EACD;AACD;AAfgB;",
  "names": ["DisplayProtocolType"]
}
