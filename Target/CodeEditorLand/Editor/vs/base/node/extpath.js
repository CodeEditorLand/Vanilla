import*as s from"fs";import{basename as l,dirname as u,join as a,normalize as p,sep as w}from"../common/path.js";import{isLinux as m}from"../common/platform.js";import{rtrim as C}from"../common/strings.js";import{Promises as d,readdirSync as P}from"./pfs.js";function g(r){if(m)return r;const t=u(r);if(r===t)return r;const n=(l(r)||r).toLowerCase();try{const o=P(t).filter(e=>e.toLowerCase()===n);if(o.length===1){const e=g(t);if(e)return a(e,o[0])}else if(o.length>1){const e=o.indexOf(n);if(e>=0){const i=g(t);if(i)return a(i,o[e])}}}catch{}return null}async function x(r,t){if(m)return r;const n=u(r);if(r===n)return r;const c=(l(r)||r).toLowerCase();try{if(t?.isCancellationRequested)return null;const e=(await d.readdir(n)).filter(i=>i.toLowerCase()===c);if(e.length===1){const i=await x(n,t);if(i)return a(i,e[0])}else if(e.length>1){const i=e.indexOf(c);if(i>=0){const f=await x(n,t);if(f)return a(f,e[i])}}}catch{}return null}async function h(r){try{return await d.realpath(r)}catch{const n=y(r);return await s.promises.access(n,s.constants.R_OK),n}}function R(r){try{return s.realpathSync(r)}catch{const n=y(r);return s.accessSync(n,s.constants.R_OK),n}}function y(r){return C(p(r),w)}export{x as realcase,g as realcaseSync,h as realpath,R as realpathSync};
