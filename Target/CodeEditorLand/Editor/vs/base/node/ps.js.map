{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/ps.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exec } from \"child_process\";\nimport { FileAccess } from \"../common/network.js\";\nimport type { ProcessItem } from \"../common/processes.js\";\n\nexport function listProcesses(rootPid: number): Promise<ProcessItem> {\n\treturn new Promise((resolve, reject) => {\n\t\tlet rootItem: ProcessItem | undefined;\n\t\tconst map = new Map<number, ProcessItem>();\n\n\t\tfunction addToTree(\n\t\t\tpid: number,\n\t\t\tppid: number,\n\t\t\tcmd: string,\n\t\t\tload: number,\n\t\t\tmem: number,\n\t\t) {\n\t\t\tconst parent = map.get(ppid);\n\t\t\tif (pid === rootPid || parent) {\n\t\t\t\tconst item: ProcessItem = {\n\t\t\t\t\tname: findName(cmd),\n\t\t\t\t\tcmd,\n\t\t\t\t\tpid,\n\t\t\t\t\tppid,\n\t\t\t\t\tload,\n\t\t\t\t\tmem,\n\t\t\t\t};\n\t\t\t\tmap.set(pid, item);\n\n\t\t\t\tif (pid === rootPid) {\n\t\t\t\t\trootItem = item;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tif (!parent.children) {\n\t\t\t\t\t\tparent.children = [];\n\t\t\t\t\t}\n\t\t\t\t\tparent.children.push(item);\n\t\t\t\t\tif (parent.children.length > 1) {\n\t\t\t\t\t\tparent.children = parent.children.sort(\n\t\t\t\t\t\t\t(a, b) => a.pid - b.pid,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction findName(cmd: string): string {\n\t\t\tconst UTILITY_NETWORK_HINT = /--utility-sub-type=network/i;\n\t\t\tconst WINDOWS_CRASH_REPORTER = /--crashes-directory/i;\n\t\t\tconst WINPTY = /\\\\pipe\\\\winpty-control/i;\n\t\t\tconst CONPTY = /conhost\\.exe.+--headless/i;\n\t\t\tconst TYPE = /--type=([a-zA-Z-]+)/;\n\n\t\t\t// find windows crash reporter\n\t\t\tif (WINDOWS_CRASH_REPORTER.exec(cmd)) {\n\t\t\t\treturn \"electron-crash-reporter\";\n\t\t\t}\n\n\t\t\t// find winpty process\n\t\t\tif (WINPTY.exec(cmd)) {\n\t\t\t\treturn \"winpty-agent\";\n\t\t\t}\n\n\t\t\t// find conpty process\n\t\t\tif (CONPTY.exec(cmd)) {\n\t\t\t\treturn \"conpty-agent\";\n\t\t\t}\n\n\t\t\t// find \"--type=xxxx\"\n\t\t\tlet matches = TYPE.exec(cmd);\n\t\t\tif (matches && matches.length === 2) {\n\t\t\t\tif (matches[1] === \"renderer\") {\n\t\t\t\t\treturn `window`;\n\t\t\t\t} else if (matches[1] === \"utility\") {\n\t\t\t\t\tif (UTILITY_NETWORK_HINT.exec(cmd)) {\n\t\t\t\t\t\treturn \"utility-network-service\";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn \"utility-process\";\n\t\t\t\t} else if (matches[1] === \"extensionHost\") {\n\t\t\t\t\treturn \"extension-host\"; // normalize remote extension host type\n\t\t\t\t}\n\t\t\t\treturn matches[1];\n\t\t\t}\n\n\t\t\t// find all xxxx.js\n\t\t\tconst JS = /[a-zA-Z-]+\\.js/g;\n\t\t\tlet result = \"\";\n\t\t\tdo {\n\t\t\t\tmatches = JS.exec(cmd);\n\t\t\t\tif (matches) {\n\t\t\t\t\tresult += matches + \" \";\n\t\t\t\t}\n\t\t\t} while (matches);\n\n\t\t\tif (result) {\n\t\t\t\tif (cmd.indexOf(\"node \") < 0 && cmd.indexOf(\"node.exe\") < 0) {\n\t\t\t\t\treturn `electron-nodejs (${result})`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn cmd;\n\t\t}\n\n\t\tif (process.platform === \"win32\") {\n\t\t\tconst cleanUNCPrefix = (value: string): string => {\n\t\t\t\tif (value.indexOf(\"\\\\\\\\?\\\\\") === 0) {\n\t\t\t\t\treturn value.substring(4);\n\t\t\t\t} else if (value.indexOf(\"\\\\??\\\\\") === 0) {\n\t\t\t\t\treturn value.substring(4);\n\t\t\t\t} else if (value.indexOf('\"\\\\\\\\?\\\\') === 0) {\n\t\t\t\t\treturn '\"' + value.substring(5);\n\t\t\t\t} else if (value.indexOf('\"\\\\??\\\\') === 0) {\n\t\t\t\t\treturn '\"' + value.substring(5);\n\t\t\t\t} else {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\timport(\"@vscode/windows-process-tree\").then(\n\t\t\t\t(windowsProcessTree) => {\n\t\t\t\t\twindowsProcessTree.getProcessList(\n\t\t\t\t\t\trootPid,\n\t\t\t\t\t\t(processList) => {\n\t\t\t\t\t\t\tif (!processList) {\n\t\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t`Root process ${rootPid} not found`,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twindowsProcessTree.getProcessCpuUsage(\n\t\t\t\t\t\t\t\tprocessList,\n\t\t\t\t\t\t\t\t(completeProcessList) => {\n\t\t\t\t\t\t\t\t\tconst processItems: Map<\n\t\t\t\t\t\t\t\t\t\tnumber,\n\t\t\t\t\t\t\t\t\t\tProcessItem\n\t\t\t\t\t\t\t\t\t> = new Map();\n\t\t\t\t\t\t\t\t\tcompleteProcessList.forEach((process) => {\n\t\t\t\t\t\t\t\t\t\tconst commandLine = cleanUNCPrefix(\n\t\t\t\t\t\t\t\t\t\t\tprocess.commandLine || \"\",\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tprocessItems.set(process.pid, {\n\t\t\t\t\t\t\t\t\t\t\tname: findName(commandLine),\n\t\t\t\t\t\t\t\t\t\t\tcmd: commandLine,\n\t\t\t\t\t\t\t\t\t\t\tpid: process.pid,\n\t\t\t\t\t\t\t\t\t\t\tppid: process.ppid,\n\t\t\t\t\t\t\t\t\t\t\tload: process.cpu || 0,\n\t\t\t\t\t\t\t\t\t\t\tmem: process.memory || 0,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\trootItem = processItems.get(rootPid);\n\t\t\t\t\t\t\t\t\tif (rootItem) {\n\t\t\t\t\t\t\t\t\t\tprocessItems.forEach((item) => {\n\t\t\t\t\t\t\t\t\t\t\tconst parent = processItems.get(\n\t\t\t\t\t\t\t\t\t\t\t\titem.ppid,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!parent.children) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tparent.children = [];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tparent.children.push(item);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tprocessItems.forEach((item) => {\n\t\t\t\t\t\t\t\t\t\t\tif (item.children) {\n\t\t\t\t\t\t\t\t\t\t\t\titem.children =\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.children.sort(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(a, b) => a.pid - b.pid,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Root process ${rootPid} not found`,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\twindowsProcessTree.ProcessDataFlag.CommandLine |\n\t\t\t\t\t\t\twindowsProcessTree.ProcessDataFlag.Memory,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\t// OS X & Linux\n\t\t\tfunction calculateLinuxCpuUsage() {\n\t\t\t\t// Flatten rootItem to get a list of all VSCode processes\n\t\t\t\tlet processes = [rootItem];\n\t\t\t\tconst pids: number[] = [];\n\t\t\t\twhile (processes.length) {\n\t\t\t\t\tconst process = processes.shift();\n\t\t\t\t\tif (process) {\n\t\t\t\t\t\tpids.push(process.pid);\n\t\t\t\t\t\tif (process.children) {\n\t\t\t\t\t\t\tprocesses = processes.concat(process.children);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// The cpu usage value reported on Linux is the average over the process lifetime,\n\t\t\t\t// recalculate the usage over a one second interval\n\t\t\t\t// JSON.stringify is needed to escape spaces, https://github.com/nodejs/node/issues/6803\n\t\t\t\tlet cmd = JSON.stringify(\n\t\t\t\t\tFileAccess.asFileUri(\"vs/base/node/cpuUsage.sh\").fsPath,\n\t\t\t\t);\n\t\t\t\tcmd += \" \" + pids.join(\" \");\n\n\t\t\t\texec(cmd, {}, (err, stdout, stderr) => {\n\t\t\t\t\tif (err || stderr) {\n\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst cpuUsage = stdout.toString().split(\"\\n\");\n\t\t\t\t\t\tfor (let i = 0; i < pids.length; i++) {\n\t\t\t\t\t\t\tconst processInfo = map.get(pids[i])!;\n\t\t\t\t\t\t\tprocessInfo.load = Number.parseFloat(cpuUsage[i]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rootItem) {\n\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\tnew Error(`Root process ${rootPid} not found`),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\texec(\"which ps\", {}, (err, stdout, stderr) => {\n\t\t\t\tif (err || stderr) {\n\t\t\t\t\tif (process.platform !== \"linux\") {\n\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst cmd = JSON.stringify(\n\t\t\t\t\t\t\tFileAccess.asFileUri(\"vs/base/node/ps.sh\").fsPath,\n\t\t\t\t\t\t);\n\t\t\t\t\t\texec(cmd, {}, (err, stdout, stderr) => {\n\t\t\t\t\t\t\tif (err || stderr) {\n\t\t\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparsePsOutput(stdout, addToTree);\n\t\t\t\t\t\t\t\tcalculateLinuxCpuUsage();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst ps = stdout.toString().trim();\n\t\t\t\t\tconst args = \"-ax -o pid=,ppid=,pcpu=,pmem=,command=\";\n\n\t\t\t\t\t// Set numeric locale to ensure '.' is used as the decimal separator\n\t\t\t\t\texec(\n\t\t\t\t\t\t`${ps} ${args}`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxBuffer: 1000 * 1024,\n\t\t\t\t\t\t\tenv: { LC_NUMERIC: \"en_US.UTF-8\" },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(err, stdout, stderr) => {\n\t\t\t\t\t\t\t// Silently ignoring the screen size is bogus error. See https://github.com/microsoft/vscode/issues/98590\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\terr ||\n\t\t\t\t\t\t\t\t(stderr &&\n\t\t\t\t\t\t\t\t\t!stderr.includes(\"screen size is bogus\"))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparsePsOutput(stdout, addToTree);\n\n\t\t\t\t\t\t\t\tif (process.platform === \"linux\") {\n\t\t\t\t\t\t\t\t\tcalculateLinuxCpuUsage();\n\t\t\t\t\t\t\t\t} else if (rootItem) {\n\t\t\t\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t`Root process ${rootPid} not found`,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction parsePsOutput(\n\tstdout: string,\n\taddToTree: (\n\t\tpid: number,\n\t\tppid: number,\n\t\tcmd: string,\n\t\tload: number,\n\t\tmem: number,\n\t) => void,\n): void {\n\tconst PID_CMD =\n\t\t/^\\s*([0-9]+)\\s+([0-9]+)\\s+([0-9]+\\.[0-9]+)\\s+([0-9]+\\.[0-9]+)\\s+(.+)$/;\n\tconst lines = stdout.toString().split(\"\\n\");\n\tfor (const line of lines) {\n\t\tconst matches = PID_CMD.exec(line.trim());\n\t\tif (matches && matches.length === 6) {\n\t\t\taddToTree(\n\t\t\t\tNumber.parseInt(matches[1]),\n\t\t\t\tNumber.parseInt(matches[2]),\n\t\t\t\tmatches[5],\n\t\t\t\tNumber.parseFloat(matches[3]),\n\t\t\t\tNumber.parseFloat(matches[4]),\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["process", "calculateLinuxCpuUsage", "err", "stdout", "stderr"]
}
