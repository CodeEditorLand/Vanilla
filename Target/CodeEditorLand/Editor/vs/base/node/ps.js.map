{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/ps.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exec } from 'child_process';\nimport { FileAccess } from '../common/network.js';\nimport { ProcessItem } from '../common/processes.js';\n\nexport function listProcesses(rootPid: number): Promise<ProcessItem> {\n\n\treturn new Promise((resolve, reject) => {\n\n\t\tlet rootItem: ProcessItem | undefined;\n\t\tconst map = new Map<number, ProcessItem>();\n\n\n\t\tfunction addToTree(pid: number, ppid: number, cmd: string, load: number, mem: number) {\n\n\t\t\tconst parent = map.get(ppid);\n\t\t\tif (pid === rootPid || parent) {\n\n\t\t\t\tconst item: ProcessItem = {\n\t\t\t\t\tname: findName(cmd),\n\t\t\t\t\tcmd,\n\t\t\t\t\tpid,\n\t\t\t\t\tppid,\n\t\t\t\t\tload,\n\t\t\t\t\tmem\n\t\t\t\t};\n\t\t\t\tmap.set(pid, item);\n\n\t\t\t\tif (pid === rootPid) {\n\t\t\t\t\trootItem = item;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tif (!parent.children) {\n\t\t\t\t\t\tparent.children = [];\n\t\t\t\t\t}\n\t\t\t\t\tparent.children.push(item);\n\t\t\t\t\tif (parent.children.length > 1) {\n\t\t\t\t\t\tparent.children = parent.children.sort((a, b) => a.pid - b.pid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction findName(cmd: string): string {\n\n\t\t\tconst UTILITY_NETWORK_HINT = /--utility-sub-type=network/i;\n\t\t\tconst WINDOWS_CRASH_REPORTER = /--crashes-directory/i;\n\t\t\tconst WINPTY = /\\\\pipe\\\\winpty-control/i;\n\t\t\tconst CONPTY = /conhost\\.exe.+--headless/i;\n\t\t\tconst TYPE = /--type=([a-zA-Z-]+)/;\n\n\t\t\t// find windows crash reporter\n\t\t\tif (WINDOWS_CRASH_REPORTER.exec(cmd)) {\n\t\t\t\treturn 'electron-crash-reporter';\n\t\t\t}\n\n\t\t\t// find winpty process\n\t\t\tif (WINPTY.exec(cmd)) {\n\t\t\t\treturn 'winpty-agent';\n\t\t\t}\n\n\t\t\t// find conpty process\n\t\t\tif (CONPTY.exec(cmd)) {\n\t\t\t\treturn 'conpty-agent';\n\t\t\t}\n\n\t\t\t// find \"--type=xxxx\"\n\t\t\tlet matches = TYPE.exec(cmd);\n\t\t\tif (matches && matches.length === 2) {\n\t\t\t\tif (matches[1] === 'renderer') {\n\t\t\t\t\treturn `window`;\n\t\t\t\t} else if (matches[1] === 'utility') {\n\t\t\t\t\tif (UTILITY_NETWORK_HINT.exec(cmd)) {\n\t\t\t\t\t\treturn 'utility-network-service';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 'utility-process';\n\t\t\t\t} else if (matches[1] === 'extensionHost') {\n\t\t\t\t\treturn 'extension-host'; // normalize remote extension host type\n\t\t\t\t}\n\t\t\t\treturn matches[1];\n\t\t\t}\n\n\t\t\t// find all xxxx.js\n\t\t\tconst JS = /[a-zA-Z-]+\\.js/g;\n\t\t\tlet result = '';\n\t\t\tdo {\n\t\t\t\tmatches = JS.exec(cmd);\n\t\t\t\tif (matches) {\n\t\t\t\t\tresult += matches + ' ';\n\t\t\t\t}\n\t\t\t} while (matches);\n\n\t\t\tif (result) {\n\t\t\t\tif (cmd.indexOf('node ') < 0 && cmd.indexOf('node.exe') < 0) {\n\t\t\t\t\treturn `electron-nodejs (${result})`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn cmd;\n\t\t}\n\n\t\tif (process.platform === 'win32') {\n\n\t\t\tconst cleanUNCPrefix = (value: string): string => {\n\t\t\t\tif (value.indexOf('\\\\\\\\?\\\\') === 0) {\n\t\t\t\t\treturn value.substring(4);\n\t\t\t\t} else if (value.indexOf('\\\\??\\\\') === 0) {\n\t\t\t\t\treturn value.substring(4);\n\t\t\t\t} else if (value.indexOf('\"\\\\\\\\?\\\\') === 0) {\n\t\t\t\t\treturn '\"' + value.substring(5);\n\t\t\t\t} else if (value.indexOf('\"\\\\??\\\\') === 0) {\n\t\t\t\t\treturn '\"' + value.substring(5);\n\t\t\t\t} else {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t(import('@vscode/windows-process-tree')).then(windowsProcessTree => {\n\t\t\t\twindowsProcessTree.getProcessList(rootPid, (processList) => {\n\t\t\t\t\tif (!processList) {\n\t\t\t\t\t\treject(new Error(`Root process ${rootPid} not found`));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\twindowsProcessTree.getProcessCpuUsage(processList, (completeProcessList) => {\n\t\t\t\t\t\tconst processItems: Map<number, ProcessItem> = new Map();\n\t\t\t\t\t\tcompleteProcessList.forEach(process => {\n\t\t\t\t\t\t\tconst commandLine = cleanUNCPrefix(process.commandLine || '');\n\t\t\t\t\t\t\tprocessItems.set(process.pid, {\n\t\t\t\t\t\t\t\tname: findName(commandLine),\n\t\t\t\t\t\t\t\tcmd: commandLine,\n\t\t\t\t\t\t\t\tpid: process.pid,\n\t\t\t\t\t\t\t\tppid: process.ppid,\n\t\t\t\t\t\t\t\tload: process.cpu || 0,\n\t\t\t\t\t\t\t\tmem: process.memory || 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trootItem = processItems.get(rootPid);\n\t\t\t\t\t\tif (rootItem) {\n\t\t\t\t\t\t\tprocessItems.forEach(item => {\n\t\t\t\t\t\t\t\tconst parent = processItems.get(item.ppid);\n\t\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\t\tif (!parent.children) {\n\t\t\t\t\t\t\t\t\t\tparent.children = [];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tparent.children.push(item);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tprocessItems.forEach(item => {\n\t\t\t\t\t\t\t\tif (item.children) {\n\t\t\t\t\t\t\t\t\titem.children = item.children.sort((a, b) => a.pid - b.pid);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(new Error(`Root process ${rootPid} not found`));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, windowsProcessTree.ProcessDataFlag.CommandLine | windowsProcessTree.ProcessDataFlag.Memory);\n\t\t\t});\n\t\t} else {\t// OS X & Linux\n\t\t\tfunction calculateLinuxCpuUsage() {\n\t\t\t\t// Flatten rootItem to get a list of all VSCode processes\n\t\t\t\tlet processes = [rootItem];\n\t\t\t\tconst pids: number[] = [];\n\t\t\t\twhile (processes.length) {\n\t\t\t\t\tconst process = processes.shift();\n\t\t\t\t\tif (process) {\n\t\t\t\t\t\tpids.push(process.pid);\n\t\t\t\t\t\tif (process.children) {\n\t\t\t\t\t\t\tprocesses = processes.concat(process.children);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// The cpu usage value reported on Linux is the average over the process lifetime,\n\t\t\t\t// recalculate the usage over a one second interval\n\t\t\t\t// JSON.stringify is needed to escape spaces, https://github.com/nodejs/node/issues/6803\n\t\t\t\tlet cmd = JSON.stringify(FileAccess.asFileUri('vs/base/node/cpuUsage.sh').fsPath);\n\t\t\t\tcmd += ' ' + pids.join(' ');\n\n\t\t\t\texec(cmd, {}, (err, stdout, stderr) => {\n\t\t\t\t\tif (err || stderr) {\n\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst cpuUsage = stdout.toString().split('\\n');\n\t\t\t\t\t\tfor (let i = 0; i < pids.length; i++) {\n\t\t\t\t\t\t\tconst processInfo = map.get(pids[i])!;\n\t\t\t\t\t\t\tprocessInfo.load = parseFloat(cpuUsage[i]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rootItem) {\n\t\t\t\t\t\t\treject(new Error(`Root process ${rootPid} not found`));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\texec('which ps', {}, (err, stdout, stderr) => {\n\t\t\t\tif (err || stderr) {\n\t\t\t\t\tif (process.platform !== 'linux') {\n\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst cmd = JSON.stringify(FileAccess.asFileUri('vs/base/node/ps.sh').fsPath);\n\t\t\t\t\t\texec(cmd, {}, (err, stdout, stderr) => {\n\t\t\t\t\t\t\tif (err || stderr) {\n\t\t\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparsePsOutput(stdout, addToTree);\n\t\t\t\t\t\t\t\tcalculateLinuxCpuUsage();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst ps = stdout.toString().trim();\n\t\t\t\t\tconst args = '-ax -o pid=,ppid=,pcpu=,pmem=,command=';\n\n\t\t\t\t\t// Set numeric locale to ensure '.' is used as the decimal separator\n\t\t\t\t\texec(`${ps} ${args}`, { maxBuffer: 1000 * 1024, env: { LC_NUMERIC: 'en_US.UTF-8' } }, (err, stdout, stderr) => {\n\t\t\t\t\t\t// Silently ignoring the screen size is bogus error. See https://github.com/microsoft/vscode/issues/98590\n\t\t\t\t\t\tif (err || (stderr && !stderr.includes('screen size is bogus'))) {\n\t\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparsePsOutput(stdout, addToTree);\n\n\t\t\t\t\t\t\tif (process.platform === 'linux') {\n\t\t\t\t\t\t\t\tcalculateLinuxCpuUsage();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (!rootItem) {\n\t\t\t\t\t\t\t\t\treject(new Error(`Root process ${rootPid} not found`));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction parsePsOutput(stdout: string, addToTree: (pid: number, ppid: number, cmd: string, load: number, mem: number) => void): void {\n\tconst PID_CMD = /^\\s*([0-9]+)\\s+([0-9]+)\\s+([0-9]+\\.[0-9]+)\\s+([0-9]+\\.[0-9]+)\\s+(.+)$/;\n\tconst lines = stdout.toString().split('\\n');\n\tfor (const line of lines) {\n\t\tconst matches = PID_CMD.exec(line.trim());\n\t\tif (matches && matches.length === 6) {\n\t\t\taddToTree(parseInt(matches[1]), parseInt(matches[2]), matches[5], parseFloat(matches[3]), parseFloat(matches[4]));\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["process", "calculateLinuxCpuUsage", "err", "stdout", "stderr"]
}
