import{Transform as s}from"stream";import{binaryIndexOf as n}from"../../../vs/base/common/buffer.js";class b extends s{buffer;splitter;spitterLen;constructor(e){if(super(),typeof e=="number")this.splitter=e,this.spitterLen=1;else{const t=Buffer.isBuffer(e)?e:Buffer.from(e);this.splitter=t.length===1?t[0]:t,this.spitterLen=t.length}}_transform(e,t,i){this.buffer?this.buffer=Buffer.concat([this.buffer,e]):this.buffer=e;let r=0;for(;r<this.buffer.length;){const f=typeof this.splitter=="number"?this.buffer.indexOf(this.splitter,r):n(this.buffer,this.splitter,r);if(f===-1)break;this.push(this.buffer.slice(r,f+this.spitterLen)),r=f+this.spitterLen}this.buffer=r===this.buffer.length?void 0:this.buffer.slice(r),i()}_flush(e){this.buffer&&this.push(this.buffer),e()}}export{b as StreamSplitter};
