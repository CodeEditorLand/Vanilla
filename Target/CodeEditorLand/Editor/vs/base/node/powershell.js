import*as b from"os";import*as t from"../common/path.js";import*as o from"./pfs.js";const S=/^\d+$/,E=/^Microsoft.PowerShell_.*/,y=/^Microsoft.PowerShellPreview_.*/;var g=(s=>(s[s.x64=0]="x64",s[s.x86=1]="x86",s[s.ARM=2]="ARM",s))(g||{});let w;switch(process.arch){case"ia32":w=1;break;case"arm":case"arm64":w=2;break;default:w=0;break}let l;process.env.PROCESSOR_ARCHITEW6432?l=process.env.PROCESSOR_ARCHITEW6432==="ARM64"?2:0:process.env.PROCESSOR_ARCHITECTURE==="ARM64"?l=2:process.env.PROCESSOR_ARCHITECTURE==="X86"?l=1:l=0;class P{constructor(i,r,s){this.exePath=i;this.displayName=r;this.knownToExist=s}async exists(){return this.knownToExist===void 0&&(this.knownToExist=await o.SymlinkSupport.existsFile(this.exePath)),this.knownToExist}}function R({useAlternateBitness:e=!1}={}){return e?w===0?process.env["ProgramFiles(x86)"]||null:l===0&&process.env.ProgramW6432||null:process.env.ProgramFiles||null}async function x({useAlternateBitness:e=!1,findPreview:i=!1}={}){const r=R({useAlternateBitness:e});if(!r)return null;const s=t.join(r,"PowerShell");if(!await o.SymlinkSupport.existsDirectory(s))return null;let a=-1,c=null;for(const n of await o.Promises.readdir(s)){let u=-1;if(i){const h=n.indexOf("-");if(h<0)continue;const p=n.substring(0,h);if(!S.test(p)||n.substring(h+1)!=="preview")continue;u=Number.parseInt(p,10)}else{if(!S.test(n))continue;u=Number.parseInt(n,10)}if(u<=a)continue;const f=t.join(s,n,"pwsh.exe");await o.SymlinkSupport.existsFile(f)&&(c=f,a=u)}if(!c)return null;const m=r.includes("x86")?" (x86)":"",A=i?" Preview":"";return new P(c,`PowerShell${A}${m}`,!0)}async function d({findPreview:e}={}){if(!process.env.LOCALAPPDATA)return null;const i=t.join(process.env.LOCALAPPDATA,"Microsoft","WindowsApps");if(!await o.SymlinkSupport.existsDirectory(i))return null;const{pwshMsixDirRegex:r,pwshMsixName:s}=e?{pwshMsixDirRegex:y,pwshMsixName:"PowerShell Preview (Store)"}:{pwshMsixDirRegex:E,pwshMsixName:"PowerShell (Store)"};for(const a of await o.Promises.readdir(i))if(r.test(a)){const c=t.join(i,a,"pwsh.exe");return new P(c,s)}return null}function I(){const e=t.join(b.homedir(),".dotnet","tools","pwsh.exe");return new P(e,".NET Core PowerShell Global Tool")}function v(){const e=t.join(process.env.windir,w===1&&l!==1?"SysNative":"System32","WindowsPowerShell","v1.0","powershell.exe");return new P(e,"Windows PowerShell",!0)}async function*M(){let e=await x();e&&(yield e),e=await x({useAlternateBitness:!0}),e&&(yield e),e=await d(),e&&(yield e),e=I(),e&&(yield e),e=await x({findPreview:!0}),e&&(yield e),e=await d({findPreview:!0}),e&&(yield e),e=await x({useAlternateBitness:!0,findPreview:!0}),e&&(yield e),e=v(),e&&(yield e)}async function*C(){for await(const e of M())await e.exists()&&(yield e)}async function T(){for await(const e of C())return e;return null}export{C as enumeratePowerShellInstallations,T as getFirstAvailablePowerShellInstallation};
