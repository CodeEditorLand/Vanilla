{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/crypto.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as crypto from 'crypto';\nimport * as fs from 'fs';\nimport { createSingleCallFunction } from '../common/functional.js';\n\nexport async function checksum(path: string, sha256hash: string | undefined): Promise<void> {\n\tconst checksumPromise = new Promise<string | undefined>((resolve, reject) => {\n\t\tconst input = fs.createReadStream(path);\n\t\tconst hash = crypto.createHash('sha256');\n\t\tinput.pipe(hash);\n\n\t\tconst done = createSingleCallFunction((err?: Error, result?: string) => {\n\t\t\tinput.removeAllListeners();\n\t\t\thash.removeAllListeners();\n\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\n\t\tinput.once('error', done);\n\t\tinput.once('end', done);\n\t\thash.once('error', done);\n\t\thash.once('data', (data: Buffer) => done(undefined, data.toString('hex')));\n\t});\n\n\tconst hash = await checksumPromise;\n\n\tif (hash !== sha256hash) {\n\t\tthrow new Error('Hash mismatch');\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,YAAY;AACxB,YAAY,QAAQ;AACpB,SAAS,gCAAgC;AAEzC,eAAsB,SAAS,MAAc,YAA+C;AAC3F,QAAM,kBAAkB,IAAI,QAA4B,CAAC,SAAS,WAAW;AAC5E,UAAM,QAAQ,GAAG,iBAAiB,IAAI;AACtC,UAAMA,QAAO,OAAO,WAAW,QAAQ;AACvC,UAAM,KAAKA,KAAI;AAEf,UAAM,OAAO,yBAAyB,CAAC,KAAa,WAAoB;AACvE,YAAM,mBAAmB;AACzB,MAAAA,MAAK,mBAAmB;AAExB,UAAI,KAAK;AACR,eAAO,GAAG;AAAA,MACX,OAAO;AACN,gBAAQ,MAAM;AAAA,MACf;AAAA,IACD,CAAC;AAED,UAAM,KAAK,SAAS,IAAI;AACxB,UAAM,KAAK,OAAO,IAAI;AACtB,IAAAA,MAAK,KAAK,SAAS,IAAI;AACvB,IAAAA,MAAK,KAAK,QAAQ,CAAC,SAAiB,KAAK,QAAW,KAAK,SAAS,KAAK,CAAC,CAAC;AAAA,EAC1E,CAAC;AAED,QAAM,OAAO,MAAM;AAEnB,MAAI,SAAS,YAAY;AACxB,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AACD;AA5BsB;",
  "names": ["hash"]
}
