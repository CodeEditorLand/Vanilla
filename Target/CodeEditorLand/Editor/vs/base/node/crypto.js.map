{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/node/crypto.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as crypto from \"crypto\";\nimport * as fs from \"fs\";\nimport { createSingleCallFunction } from \"../common/functional.js\";\n\nexport async function checksum(\n\tpath: string,\n\tsha256hash: string | undefined,\n): Promise<void> {\n\tconst checksumPromise = new Promise<string | undefined>(\n\t\t(resolve, reject) => {\n\t\t\tconst input = fs.createReadStream(path);\n\t\t\tconst hash = crypto.createHash(\"sha256\");\n\t\t\tinput.pipe(hash);\n\n\t\t\tconst done = createSingleCallFunction(\n\t\t\t\t(err?: Error, result?: string) => {\n\t\t\t\t\tinput.removeAllListeners();\n\t\t\t\t\thash.removeAllListeners();\n\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tinput.once(\"error\", done);\n\t\t\tinput.once(\"end\", done);\n\t\t\thash.once(\"error\", done);\n\t\t\thash.once(\"data\", (data: Buffer) =>\n\t\t\t\tdone(undefined, data.toString(\"hex\")),\n\t\t\t);\n\t\t},\n\t);\n\n\tconst hash = await checksumPromise;\n\n\tif (hash !== sha256hash) {\n\t\tthrow new Error(\"Hash mismatch\");\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,YAAY;AACxB,YAAY,QAAQ;AACpB,SAAS,gCAAgC;AAEzC,eAAsB,SACrB,MACA,YACgB;AAChB,QAAM,kBAAkB,IAAI;AAAA,IAC3B,CAAC,SAAS,WAAW;AACpB,YAAM,QAAQ,GAAG,iBAAiB,IAAI;AACtC,YAAMA,QAAO,OAAO,WAAW,QAAQ;AACvC,YAAM,KAAKA,KAAI;AAEf,YAAM,OAAO;AAAA,QACZ,CAAC,KAAa,WAAoB;AACjC,gBAAM,mBAAmB;AACzB,UAAAA,MAAK,mBAAmB;AAExB,cAAI,KAAK;AACR,mBAAO,GAAG;AAAA,UACX,OAAO;AACN,oBAAQ,MAAM;AAAA,UACf;AAAA,QACD;AAAA,MACD;AAEA,YAAM,KAAK,SAAS,IAAI;AACxB,YAAM,KAAK,OAAO,IAAI;AACtB,MAAAA,MAAK,KAAK,SAAS,IAAI;AACvB,MAAAA,MAAK;AAAA,QAAK;AAAA,QAAQ,CAAC,SAClB,KAAK,QAAW,KAAK,SAAS,KAAK,CAAC;AAAA,MACrC;AAAA,IACD;AAAA,EACD;AAEA,QAAM,OAAO,MAAM;AAEnB,MAAI,SAAS,YAAY;AACxB,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AACD;AArCsB;",
  "names": ["hash"]
}
