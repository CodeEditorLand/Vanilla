import{KeyCodeChord as d}from"../common/keybindings.js";import{EVENT_KEY_CODE_MAP as y,KeyCode as t,KeyCodeUtils as n,KeyMod as i}from"../common/keyCodes.js";import*as a from"../common/platform.js";import*as s from"./browser.js";function l(o){if(o.charCode){const r=String.fromCharCode(o.charCode).toUpperCase();return n.fromString(r)}const e=o.keyCode;if(e===3)return t.PauseBreak;if(s.isFirefox)switch(e){case 59:return t.Semicolon;case 60:if(a.isLinux)return t.IntlBackslash;break;case 61:return t.Equal;case 107:return t.NumpadAdd;case 109:return t.NumpadSubtract;case 173:return t.Minus;case 224:if(a.isMacintosh)return t.Meta;break}else if(s.isWebKit){if(a.isMacintosh&&e===93)return t.Meta;if(!a.isMacintosh&&e===92)return t.Meta}return y[e]||t.Unknown}const h=a.isMacintosh?i.WinCtrl:i.CtrlCmd,K=i.Alt,c=i.Shift,C=a.isMacintosh?i.CtrlCmd:i.WinCtrl;function f(o){const e=[];return o.ctrlKey&&e.push("ctrl"),o.shiftKey&&e.push("shift"),o.altKey&&e.push("alt"),o.metaKey&&e.push("meta"),`modifiers: [${e.join(",")}], code: ${o.code}, keyCode: ${o.keyCode}, key: ${o.key}`}function p(o){const e=[];return o.ctrlKey&&e.push("ctrl"),o.shiftKey&&e.push("shift"),o.altKey&&e.push("alt"),o.metaKey&&e.push("meta"),`modifiers: [${e.join(",")}], code: ${o.code}, keyCode: ${o.keyCode} ('${n.toString(o.keyCode)}')`}class m{_standardKeyboardEventBrand=!0;browserEvent;target;ctrlKey;shiftKey;altKey;metaKey;altGraphKey;keyCode;code;_asKeybinding;_asKeyCodeChord;constructor(e){const r=e;this.browserEvent=r,this.target=r.target,this.ctrlKey=r.ctrlKey,this.shiftKey=r.shiftKey,this.altKey=r.altKey,this.metaKey=r.metaKey,this.altGraphKey=r.getModifierState?.("AltGraph"),this.keyCode=l(r),this.code=r.code,this.ctrlKey=this.ctrlKey||this.keyCode===t.Ctrl,this.altKey=this.altKey||this.keyCode===t.Alt,this.shiftKey=this.shiftKey||this.keyCode===t.Shift,this.metaKey=this.metaKey||this.keyCode===t.Meta,this._asKeybinding=this._computeKeybinding(),this._asKeyCodeChord=this._computeKeyCodeChord()}preventDefault(){this.browserEvent&&this.browserEvent.preventDefault&&this.browserEvent.preventDefault()}stopPropagation(){this.browserEvent&&this.browserEvent.stopPropagation&&this.browserEvent.stopPropagation()}toKeyCodeChord(){return this._asKeyCodeChord}equals(e){return this._asKeybinding===e}_computeKeybinding(){let e=t.Unknown;this.keyCode!==t.Ctrl&&this.keyCode!==t.Shift&&this.keyCode!==t.Alt&&this.keyCode!==t.Meta&&(e=this.keyCode);let r=0;return this.ctrlKey&&(r|=h),this.altKey&&(r|=K),this.shiftKey&&(r|=c),this.metaKey&&(r|=C),r|=e,r}_computeKeyCodeChord(){let e=t.Unknown;return this.keyCode!==t.Ctrl&&this.keyCode!==t.Shift&&this.keyCode!==t.Alt&&this.keyCode!==t.Meta&&(e=this.keyCode),new d(this.ctrlKey,this.shiftKey,this.altKey,this.metaKey,e)}}export{m as StandardKeyboardEvent,f as printKeyboardEvent,p as printStandardKeyboardEvent};
