import"../../../../../vs/base/browser/contextmenu.js";import{$ as m,addDisposableListener as u,append as a,EventType as h,h as c}from"../../../../../vs/base/browser/dom.js";import{StandardKeyboardEvent as A}from"../../../../../vs/base/browser/keyboardEvent.js";import"../../../../../vs/base/browser/ui/actionbar/actionbar.js";import{ActionViewItem as w,BaseActionViewItem as I}from"../../../../../vs/base/browser/ui/actionbar/actionViewItems.js";import"../../../../../vs/base/browser/ui/contextview/contextview.js";import{DropdownMenu as v}from"../../../../../vs/base/browser/ui/dropdown/dropdown.js";import{Action as g}from"../../../../../vs/base/common/actions.js";import{Codicon as f}from"../../../../../vs/base/common/codicons.js";import{Emitter as b}from"../../../../../vs/base/common/event.js";import"../../../../../vs/base/common/keybindings.js";import{KeyCode as l}from"../../../../../vs/base/common/keyCodes.js";import"../../../../../vs/base/common/lifecycle.js";import{ThemeIcon as M}from"../../../../../vs/base/common/themables.js";import*as y from"../../../../../vs/nls.js";import"vs/css!./dropdown";import{getBaseLayerHoverDelegate as P}from"../../../../../vs/base/browser/ui/hover/hoverDelegate2.js";import{getDefaultHoverDelegate as V}from"../../../../../vs/base/browser/ui/hover/hoverDelegateFactory.js";class D extends I{menuActionsOrProvider;dropdownMenu;contextMenuProvider;actionItem=null;_onDidChangeVisibility=this._register(new b);onDidChangeVisibility=this._onDidChangeVisibility.event;options;constructor(e,i,n,r=Object.create(null)){super(null,e,r),this.menuActionsOrProvider=i,this.contextMenuProvider=n,this.options=r,this.options.actionRunner&&(this.actionRunner=this.options.actionRunner)}render(e){this.actionItem=e;const i=o=>{this.element=a(o,m("a.action-label"));let t=[];return typeof this.options.classNames=="string"?t=this.options.classNames.split(/\s+/g).filter(s=>!!s):this.options.classNames&&(t=this.options.classNames),t.find(s=>s==="icon")||t.push("codicon"),this.element.classList.add(...t),this.element.setAttribute("role","button"),this.element.setAttribute("aria-haspopup","true"),this.element.setAttribute("aria-expanded","false"),this._action.label&&this._register(P().setupManagedHover(this.options.hoverDelegate??V("mouse"),this.element,this._action.label)),this.element.ariaLabel=this._action.label||"",null},n=Array.isArray(this.menuActionsOrProvider),r={contextMenuProvider:this.contextMenuProvider,labelRenderer:i,menuAsChild:this.options.menuAsChild,actions:n?this.menuActionsOrProvider:void 0,actionProvider:n?void 0:this.menuActionsOrProvider,skipTelemetry:this.options.skipTelemetry};if(this.dropdownMenu=this._register(new v(e,r)),this._register(this.dropdownMenu.onDidChangeVisibility(o=>{this.element?.setAttribute("aria-expanded",`${o}`),this._onDidChangeVisibility.fire(o)})),this.dropdownMenu.menuOptions={actionViewItemProvider:this.options.actionViewItemProvider,actionRunner:this.actionRunner,getKeyBinding:this.options.keybindingProvider,context:this._context},this.options.anchorAlignmentProvider){const o=this;this.dropdownMenu.menuOptions={...this.dropdownMenu.menuOptions,get anchorAlignment(){return o.options.anchorAlignmentProvider()}}}this.updateTooltip(),this.updateEnabled()}getTooltip(){let e=null;return this.action.tooltip?e=this.action.tooltip:this.action.label&&(e=this.action.label),e??void 0}setActionContext(e){super.setActionContext(e),this.dropdownMenu&&(this.dropdownMenu.menuOptions?this.dropdownMenu.menuOptions.context=e:this.dropdownMenu.menuOptions={context:e})}show(){this.dropdownMenu?.show()}updateEnabled(){const e=!this.action.enabled;this.actionItem?.classList.toggle("disabled",e),this.element?.classList.toggle("disabled",e)}}class ie extends w{constructor(i,n,r,o){super(i,n,r);this.contextMenuProvider=o}dropdownMenuActionViewItem;render(i){if(super.render(i),this.element){this.element.classList.add("action-dropdown-item");const n={getActions:()=>{const t=this.options.menuActionsOrProvider;return Array.isArray(t)?t:t.getActions()}},r=this.options.menuActionClassNames||[],o=c("div.action-dropdown-item-separator",[c("div",{})]).root;o.classList.toggle("prominent",r.includes("prominent")),a(this.element,o),this.dropdownMenuActionViewItem=this._register(new D(this._register(new g("dropdownAction",y.localize("moreActions","More Actions..."))),n,this.contextMenuProvider,{classNames:["dropdown",...M.asClassNameArray(f.dropDownButton),...r],hoverDelegate:this.options.hoverDelegate})),this.dropdownMenuActionViewItem.render(this.element),this._register(u(this.element,h.KEY_DOWN,t=>{if(n.getActions().length===0)return;const s=new A(t);let d=!1;this.dropdownMenuActionViewItem?.isFocused()&&s.equals(l.LeftArrow)?(d=!0,this.dropdownMenuActionViewItem?.blur(),this.focus()):this.isFocused()&&s.equals(l.RightArrow)&&(d=!0,this.blur(),this.dropdownMenuActionViewItem?.focus()),d&&(s.preventDefault(),s.stopPropagation())}))}}blur(){super.blur(),this.dropdownMenuActionViewItem?.blur()}setFocusable(i){super.setFocusable(i),this.dropdownMenuActionViewItem?.setFocusable(i)}}export{ie as ActionWithDropdownActionViewItem,D as DropdownMenuActionViewItem};
