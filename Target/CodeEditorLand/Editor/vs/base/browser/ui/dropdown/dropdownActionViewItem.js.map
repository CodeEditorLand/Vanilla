{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/dropdown/dropdownActionViewItem.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { IContextMenuProvider } from '../../contextmenu.js';\nimport { $, addDisposableListener, append, EventType, h } from '../../dom.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { IActionViewItemProvider } from '../actionbar/actionbar.js';\nimport { ActionViewItem, BaseActionViewItem, IActionViewItemOptions, IBaseActionViewItemOptions } from '../actionbar/actionViewItems.js';\nimport { AnchorAlignment } from '../contextview/contextview.js';\nimport { DropdownMenu, IActionProvider, IDropdownMenuOptions, ILabelRenderer } from './dropdown.js';\nimport { Action, IAction, IActionRunner } from '../../../common/actions.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { Emitter } from '../../../common/event.js';\nimport { KeyCode } from '../../../common/keyCodes.js';\nimport { ResolvedKeybinding } from '../../../common/keybindings.js';\nimport { IDisposable } from '../../../common/lifecycle.js';\nimport './dropdown.css';\nimport { getDefaultHoverDelegate } from '../hover/hoverDelegateFactory.js';\nimport { getBaseLayerHoverDelegate } from '../hover/hoverDelegate2.js';\n\nexport interface IKeybindingProvider {\n\t(action: IAction): ResolvedKeybinding | undefined;\n}\n\nexport interface IAnchorAlignmentProvider {\n\t(): AnchorAlignment;\n}\n\nexport interface IDropdownMenuActionViewItemOptions extends IBaseActionViewItemOptions {\n\treadonly actionViewItemProvider?: IActionViewItemProvider;\n\treadonly keybindingProvider?: IKeybindingProvider;\n\treadonly actionRunner?: IActionRunner;\n\treadonly classNames?: string[] | string;\n\treadonly anchorAlignmentProvider?: IAnchorAlignmentProvider;\n\treadonly menuAsChild?: boolean;\n\treadonly skipTelemetry?: boolean;\n}\n\nexport class DropdownMenuActionViewItem extends BaseActionViewItem {\n\tprivate menuActionsOrProvider: readonly IAction[] | IActionProvider;\n\tprivate dropdownMenu: DropdownMenu | undefined;\n\tprivate contextMenuProvider: IContextMenuProvider;\n\tprivate actionItem: HTMLElement | null = null;\n\n\tprivate _onDidChangeVisibility = this._register(new Emitter<boolean>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprotected override readonly options: IDropdownMenuActionViewItemOptions;\n\n\tconstructor(\n\t\taction: IAction,\n\t\tmenuActionsOrProvider: readonly IAction[] | IActionProvider,\n\t\tcontextMenuProvider: IContextMenuProvider,\n\t\toptions: IDropdownMenuActionViewItemOptions = Object.create(null)\n\t) {\n\t\tsuper(null, action, options);\n\n\t\tthis.menuActionsOrProvider = menuActionsOrProvider;\n\t\tthis.contextMenuProvider = contextMenuProvider;\n\t\tthis.options = options;\n\n\t\tif (this.options.actionRunner) {\n\t\t\tthis.actionRunner = this.options.actionRunner;\n\t\t}\n\t}\n\n\toverride render(container: HTMLElement): void {\n\t\tthis.actionItem = container;\n\n\t\tconst labelRenderer: ILabelRenderer = (el: HTMLElement): IDisposable | null => {\n\t\t\tthis.element = append(el, $('a.action-label'));\n\n\t\t\tlet classNames: string[] = [];\n\n\t\t\tif (typeof this.options.classNames === 'string') {\n\t\t\t\tclassNames = this.options.classNames.split(/\\s+/g).filter(s => !!s);\n\t\t\t} else if (this.options.classNames) {\n\t\t\t\tclassNames = this.options.classNames;\n\t\t\t}\n\n\t\t\t// todo@aeschli: remove codicon, should come through `this.options.classNames`\n\t\t\tif (!classNames.find(c => c === 'icon')) {\n\t\t\t\tclassNames.push('codicon');\n\t\t\t}\n\n\t\t\tthis.element.classList.add(...classNames);\n\n\t\t\tthis.element.setAttribute('role', 'button');\n\t\t\tthis.element.setAttribute('aria-haspopup', 'true');\n\t\t\tthis.element.setAttribute('aria-expanded', 'false');\n\t\t\tif (this._action.label) {\n\t\t\t\tthis._register(getBaseLayerHoverDelegate().setupManagedHover(this.options.hoverDelegate ?? getDefaultHoverDelegate('mouse'), this.element, this._action.label));\n\t\t\t}\n\t\t\tthis.element.ariaLabel = this._action.label || '';\n\n\t\t\treturn null;\n\t\t};\n\n\t\tconst isActionsArray = Array.isArray(this.menuActionsOrProvider);\n\t\tconst options: IDropdownMenuOptions = {\n\t\t\tcontextMenuProvider: this.contextMenuProvider,\n\t\t\tlabelRenderer: labelRenderer,\n\t\t\tmenuAsChild: this.options.menuAsChild,\n\t\t\tactions: isActionsArray ? this.menuActionsOrProvider as IAction[] : undefined,\n\t\t\tactionProvider: isActionsArray ? undefined : this.menuActionsOrProvider as IActionProvider,\n\t\t\tskipTelemetry: this.options.skipTelemetry\n\t\t};\n\n\t\tthis.dropdownMenu = this._register(new DropdownMenu(container, options));\n\t\tthis._register(this.dropdownMenu.onDidChangeVisibility(visible => {\n\t\t\tthis.element?.setAttribute('aria-expanded', `${visible}`);\n\t\t\tthis._onDidChangeVisibility.fire(visible);\n\t\t}));\n\n\t\tthis.dropdownMenu.menuOptions = {\n\t\t\tactionViewItemProvider: this.options.actionViewItemProvider,\n\t\t\tactionRunner: this.actionRunner,\n\t\t\tgetKeyBinding: this.options.keybindingProvider,\n\t\t\tcontext: this._context\n\t\t};\n\n\t\tif (this.options.anchorAlignmentProvider) {\n\t\t\tconst that = this;\n\n\t\t\tthis.dropdownMenu.menuOptions = {\n\t\t\t\t...this.dropdownMenu.menuOptions,\n\t\t\t\tget anchorAlignment(): AnchorAlignment {\n\t\t\t\t\treturn that.options.anchorAlignmentProvider!();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tthis.updateTooltip();\n\t\tthis.updateEnabled();\n\t}\n\n\tprotected override getTooltip(): string | undefined {\n\t\tlet title: string | null = null;\n\n\t\tif (this.action.tooltip) {\n\t\t\ttitle = this.action.tooltip;\n\t\t} else if (this.action.label) {\n\t\t\ttitle = this.action.label;\n\t\t}\n\n\t\treturn title ?? undefined;\n\t}\n\n\toverride setActionContext(newContext: unknown): void {\n\t\tsuper.setActionContext(newContext);\n\n\t\tif (this.dropdownMenu) {\n\t\t\tif (this.dropdownMenu.menuOptions) {\n\t\t\t\tthis.dropdownMenu.menuOptions.context = newContext;\n\t\t\t} else {\n\t\t\t\tthis.dropdownMenu.menuOptions = { context: newContext };\n\t\t\t}\n\t\t}\n\t}\n\n\tshow(): void {\n\t\tthis.dropdownMenu?.show();\n\t}\n\n\tprotected override updateEnabled(): void {\n\t\tconst disabled = !this.action.enabled;\n\t\tthis.actionItem?.classList.toggle('disabled', disabled);\n\t\tthis.element?.classList.toggle('disabled', disabled);\n\t}\n}\n\nexport interface IActionWithDropdownActionViewItemOptions extends IActionViewItemOptions {\n\treadonly menuActionsOrProvider: readonly IAction[] | IActionProvider;\n\treadonly menuActionClassNames?: string[];\n}\n\nexport class ActionWithDropdownActionViewItem extends ActionViewItem {\n\n\tprotected dropdownMenuActionViewItem: DropdownMenuActionViewItem | undefined;\n\n\tconstructor(\n\t\tcontext: unknown,\n\t\taction: IAction,\n\t\toptions: IActionWithDropdownActionViewItemOptions,\n\t\tprivate readonly contextMenuProvider: IContextMenuProvider\n\t) {\n\t\tsuper(context, action, options);\n\t}\n\n\toverride render(container: HTMLElement): void {\n\t\tsuper.render(container);\n\t\tif (this.element) {\n\t\t\tthis.element.classList.add('action-dropdown-item');\n\t\t\tconst menuActionsProvider = {\n\t\t\t\tgetActions: () => {\n\t\t\t\t\tconst actionsProvider = (<IActionWithDropdownActionViewItemOptions>this.options).menuActionsOrProvider;\n\t\t\t\t\treturn Array.isArray(actionsProvider) ? actionsProvider : (actionsProvider as IActionProvider).getActions(); // TODO: microsoft/TypeScript#42768\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst menuActionClassNames = (<IActionWithDropdownActionViewItemOptions>this.options).menuActionClassNames || [];\n\t\t\tconst separator = h('div.action-dropdown-item-separator', [h('div', {})]).root;\n\t\t\tseparator.classList.toggle('prominent', menuActionClassNames.includes('prominent'));\n\t\t\tappend(this.element, separator);\n\n\t\t\tthis.dropdownMenuActionViewItem = this._register(new DropdownMenuActionViewItem(this._register(new Action('dropdownAction', nls.localize('moreActions', \"More Actions...\"))), menuActionsProvider, this.contextMenuProvider, { classNames: ['dropdown', ...ThemeIcon.asClassNameArray(Codicon.dropDownButton), ...menuActionClassNames], hoverDelegate: this.options.hoverDelegate }));\n\t\t\tthis.dropdownMenuActionViewItem.render(this.element);\n\n\t\t\tthis._register(addDisposableListener(this.element, EventType.KEY_DOWN, e => {\n\t\t\t\t// If we don't have any actions then the dropdown is hidden so don't try to focus it #164050\n\t\t\t\tif (menuActionsProvider.getActions().length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst event = new StandardKeyboardEvent(e);\n\t\t\t\tlet handled: boolean = false;\n\t\t\t\tif (this.dropdownMenuActionViewItem?.isFocused() && event.equals(KeyCode.LeftArrow)) {\n\t\t\t\t\thandled = true;\n\t\t\t\t\tthis.dropdownMenuActionViewItem?.blur();\n\t\t\t\t\tthis.focus();\n\t\t\t\t} else if (this.isFocused() && event.equals(KeyCode.RightArrow)) {\n\t\t\t\t\thandled = true;\n\t\t\t\t\tthis.blur();\n\t\t\t\t\tthis.dropdownMenuActionViewItem?.focus();\n\t\t\t\t}\n\t\t\t\tif (handled) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\toverride blur(): void {\n\t\tsuper.blur();\n\t\tthis.dropdownMenuActionViewItem?.blur();\n\t}\n\n\toverride setFocusable(focusable: boolean): void {\n\t\tsuper.setFocusable(focusable);\n\t\tthis.dropdownMenuActionViewItem?.setFocusable(focusable);\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,4BAA4B;AACrC,SAAS,GAAG,uBAAuB,QAAQ,WAAW,SAAS;AAC/D,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC,SAAS,gBAAgB,oBAAoB,wBAAwB,kCAAkC;AACvG,SAAS,uBAAuB;AAChC,SAAS,cAAc,iBAAiB,sBAAsB,sBAAsB;AACpF,SAAS,QAAQ,SAAS,qBAAqB;AAC/C,SAAS,eAAe;AACxB,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,0BAA0B;AACnC,SAAS,mBAAmB;AAC5B,OAAO;AACP,SAAS,+BAA+B;AACxC,SAAS,iCAAiC;AAoBnC,MAAM,mCAAmC,mBAAmB;AAAA,EA1CnE,OA0CmE;AAAA;AAAA;AAAA,EAC1D;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAiC;AAAA,EAEjC,yBAAyB,KAAK,UAAU,IAAI,QAAiB,CAAC;AAAA,EAC7D,wBAAwB,KAAK,uBAAuB;AAAA,EAEjC;AAAA,EAE5B,YACC,QACA,uBACA,qBACA,UAA8C,uBAAO,OAAO,IAAI,GAC/D;AACD,UAAM,MAAM,QAAQ,OAAO;AAE3B,SAAK,wBAAwB;AAC7B,SAAK,sBAAsB;AAC3B,SAAK,UAAU;AAEf,QAAI,KAAK,QAAQ,cAAc;AAC9B,WAAK,eAAe,KAAK,QAAQ;AAAA,IAClC;AAAA,EACD;AAAA,EAES,OAAO,WAA8B;AAC7C,SAAK,aAAa;AAElB,UAAM,gBAAgC,wBAAC,OAAwC;AAC9E,WAAK,UAAU,OAAO,IAAI,EAAE,gBAAgB,CAAC;AAE7C,UAAI,aAAuB,CAAC;AAE5B,UAAI,OAAO,KAAK,QAAQ,eAAe,UAAU;AAChD,qBAAa,KAAK,QAAQ,WAAW,MAAM,MAAM,EAAE,OAAO,OAAK,CAAC,CAAC,CAAC;AAAA,MACnE,WAAW,KAAK,QAAQ,YAAY;AACnC,qBAAa,KAAK,QAAQ;AAAA,MAC3B;AAGA,UAAI,CAAC,WAAW,KAAK,OAAK,MAAM,MAAM,GAAG;AACxC,mBAAW,KAAK,SAAS;AAAA,MAC1B;AAEA,WAAK,QAAQ,UAAU,IAAI,GAAG,UAAU;AAExC,WAAK,QAAQ,aAAa,QAAQ,QAAQ;AAC1C,WAAK,QAAQ,aAAa,iBAAiB,MAAM;AACjD,WAAK,QAAQ,aAAa,iBAAiB,OAAO;AAClD,UAAI,KAAK,QAAQ,OAAO;AACvB,aAAK,UAAU,0BAA0B,EAAE,kBAAkB,KAAK,QAAQ,iBAAiB,wBAAwB,OAAO,GAAG,KAAK,SAAS,KAAK,QAAQ,KAAK,CAAC;AAAA,MAC/J;AACA,WAAK,QAAQ,YAAY,KAAK,QAAQ,SAAS;AAE/C,aAAO;AAAA,IACR,GA3BsC;AA6BtC,UAAM,iBAAiB,MAAM,QAAQ,KAAK,qBAAqB;AAC/D,UAAM,UAAgC;AAAA,MACrC,qBAAqB,KAAK;AAAA,MAC1B;AAAA,MACA,aAAa,KAAK,QAAQ;AAAA,MAC1B,SAAS,iBAAiB,KAAK,wBAAqC;AAAA,MACpE,gBAAgB,iBAAiB,SAAY,KAAK;AAAA,MAClD,eAAe,KAAK,QAAQ;AAAA,IAC7B;AAEA,SAAK,eAAe,KAAK,UAAU,IAAI,aAAa,WAAW,OAAO,CAAC;AACvE,SAAK,UAAU,KAAK,aAAa,sBAAsB,aAAW;AACjE,WAAK,SAAS,aAAa,iBAAiB,GAAG,OAAO,EAAE;AACxD,WAAK,uBAAuB,KAAK,OAAO;AAAA,IACzC,CAAC,CAAC;AAEF,SAAK,aAAa,cAAc;AAAA,MAC/B,wBAAwB,KAAK,QAAQ;AAAA,MACrC,cAAc,KAAK;AAAA,MACnB,eAAe,KAAK,QAAQ;AAAA,MAC5B,SAAS,KAAK;AAAA,IACf;AAEA,QAAI,KAAK,QAAQ,yBAAyB;AACzC,YAAM,OAAO;AAEb,WAAK,aAAa,cAAc;AAAA,QAC/B,GAAG,KAAK,aAAa;AAAA,QACrB,IAAI,kBAAmC;AACtC,iBAAO,KAAK,QAAQ,wBAAyB;AAAA,QAC9C;AAAA,MACD;AAAA,IACD;AAEA,SAAK,cAAc;AACnB,SAAK,cAAc;AAAA,EACpB;AAAA,EAEmB,aAAiC;AACnD,QAAI,QAAuB;AAE3B,QAAI,KAAK,OAAO,SAAS;AACxB,cAAQ,KAAK,OAAO;AAAA,IACrB,WAAW,KAAK,OAAO,OAAO;AAC7B,cAAQ,KAAK,OAAO;AAAA,IACrB;AAEA,WAAO,SAAS;AAAA,EACjB;AAAA,EAES,iBAAiB,YAA2B;AACpD,UAAM,iBAAiB,UAAU;AAEjC,QAAI,KAAK,cAAc;AACtB,UAAI,KAAK,aAAa,aAAa;AAClC,aAAK,aAAa,YAAY,UAAU;AAAA,MACzC,OAAO;AACN,aAAK,aAAa,cAAc,EAAE,SAAS,WAAW;AAAA,MACvD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,OAAa;AACZ,SAAK,cAAc,KAAK;AAAA,EACzB;AAAA,EAEmB,gBAAsB;AACxC,UAAM,WAAW,CAAC,KAAK,OAAO;AAC9B,SAAK,YAAY,UAAU,OAAO,YAAY,QAAQ;AACtD,SAAK,SAAS,UAAU,OAAO,YAAY,QAAQ;AAAA,EACpD;AACD;AAOO,MAAM,yCAAyC,eAAe;AAAA,EAIpE,YACC,SACA,QACA,SACiB,qBAChB;AACD,UAAM,SAAS,QAAQ,OAAO;AAFb;AAAA,EAGlB;AAAA,EA/LD,OAoLqE;AAAA;AAAA;AAAA,EAE1D;AAAA,EAWD,OAAO,WAA8B;AAC7C,UAAM,OAAO,SAAS;AACtB,QAAI,KAAK,SAAS;AACjB,WAAK,QAAQ,UAAU,IAAI,sBAAsB;AACjD,YAAM,sBAAsB;AAAA,QAC3B,YAAY,6BAAM;AACjB,gBAAM,kBAA6D,KAAK,QAAS;AACjF,iBAAO,MAAM,QAAQ,eAAe,IAAI,kBAAmB,gBAAoC,WAAW;AAAA,QAC3G,GAHY;AAAA,MAIb;AAEA,YAAM,uBAAkE,KAAK,QAAS,wBAAwB,CAAC;AAC/G,YAAM,YAAY,EAAE,sCAAsC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;AAC1E,gBAAU,UAAU,OAAO,aAAa,qBAAqB,SAAS,WAAW,CAAC;AAClF,aAAO,KAAK,SAAS,SAAS;AAE9B,WAAK,6BAA6B,KAAK,UAAU,IAAI,2BAA2B,KAAK,UAAU,IAAI,OAAO,kBAAkB,IAAI,SAAS,eAAe,iBAAiB,CAAC,CAAC,GAAG,qBAAqB,KAAK,qBAAqB,EAAE,YAAY,CAAC,YAAY,GAAG,UAAU,iBAAiB,QAAQ,cAAc,GAAG,GAAG,oBAAoB,GAAG,eAAe,KAAK,QAAQ,cAAc,CAAC,CAAC;AACrX,WAAK,2BAA2B,OAAO,KAAK,OAAO;AAEnD,WAAK,UAAU,sBAAsB,KAAK,SAAS,UAAU,UAAU,OAAK;AAE3E,YAAI,oBAAoB,WAAW,EAAE,WAAW,GAAG;AAClD;AAAA,QACD;AACA,cAAM,QAAQ,IAAI,sBAAsB,CAAC;AACzC,YAAI,UAAmB;AACvB,YAAI,KAAK,4BAA4B,UAAU,KAAK,MAAM,OAAO,QAAQ,SAAS,GAAG;AACpF,oBAAU;AACV,eAAK,4BAA4B,KAAK;AACtC,eAAK,MAAM;AAAA,QACZ,WAAW,KAAK,UAAU,KAAK,MAAM,OAAO,QAAQ,UAAU,GAAG;AAChE,oBAAU;AACV,eAAK,KAAK;AACV,eAAK,4BAA4B,MAAM;AAAA,QACxC;AACA,YAAI,SAAS;AACZ,gBAAM,eAAe;AACrB,gBAAM,gBAAgB;AAAA,QACvB;AAAA,MACD,CAAC,CAAC;AAAA,IACH;AAAA,EACD;AAAA,EAES,OAAa;AACrB,UAAM,KAAK;AACX,SAAK,4BAA4B,KAAK;AAAA,EACvC;AAAA,EAES,aAAa,WAA0B;AAC/C,UAAM,aAAa,SAAS;AAC5B,SAAK,4BAA4B,aAAa,SAAS;AAAA,EACxD;AACD;",
  "names": []
}
