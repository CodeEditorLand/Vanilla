import"../../contextmenu.js";import{ActionBar as l,ActionsOrientation as c}from"../actionbar/actionbar.js";import"../contextview/contextview.js";import{DropdownMenuActionViewItem as s}from"../dropdown/dropdownActionViewItem.js";import{Action as h,SubmenuAction as d}from"../../../common/actions.js";import{Codicon as m}from"../../../common/codicons.js";import{ThemeIcon as g}from"../../../common/themables.js";import{EventMultiplexer as u}from"../../../common/event.js";import"../../../common/keybindings.js";import{Disposable as A,DisposableStore as p}from"../../../common/lifecycle.js";import"./toolbar.css";import*as I from"../../../../nls.js";import"../hover/hoverDelegate.js";import{createInstantHoverDelegate as v}from"../hover/hoverDelegateFactory.js";class N extends A{options;actionBar;toggleMenuAction;toggleMenuActionViewItem;submenuActionViewItems=[];hasSecondaryActions=!1;element;_onDidChangeDropdownVisibility=this._register(new u);onDidChangeDropdownVisibility=this._onDidChangeDropdownVisibility.event;disposables=this._register(new p);constructor(e,t,i={orientation:c.HORIZONTAL}){super(),i.hoverDelegate=i.hoverDelegate??this._register(v()),this.options=i,this.toggleMenuAction=this._register(new r(()=>this.toggleMenuActionViewItem?.show(),i.toggleMenuTitle)),this.element=document.createElement("div"),this.element.className="monaco-toolbar",e.appendChild(this.element),this.actionBar=this._register(new l(this.element,{orientation:i.orientation,ariaLabel:i.ariaLabel,actionRunner:i.actionRunner,allowContextMenu:i.allowContextMenu,highlightToggledItems:i.highlightToggledItems,hoverDelegate:i.hoverDelegate,actionViewItemProvider:(n,a)=>{if(n.id===r.ID)return this.toggleMenuActionViewItem=new s(n,n.menuActions,t,{actionViewItemProvider:this.options.actionViewItemProvider,actionRunner:this.actionRunner,keybindingProvider:this.options.getKeyBinding,classNames:g.asClassNameArray(i.moreIcon??m.toolBarMore),anchorAlignmentProvider:this.options.anchorAlignmentProvider,menuAsChild:!!this.options.renderDropdownAsChildElement,skipTelemetry:this.options.skipTelemetry,isMenu:!0,hoverDelegate:this.options.hoverDelegate}),this.toggleMenuActionViewItem.setActionContext(this.actionBar.context),this.disposables.add(this._onDidChangeDropdownVisibility.add(this.toggleMenuActionViewItem.onDidChangeVisibility)),this.toggleMenuActionViewItem;if(i.actionViewItemProvider){const o=i.actionViewItemProvider(n,a);if(o)return o}if(n instanceof d){const o=new s(n,n.actions,t,{actionViewItemProvider:this.options.actionViewItemProvider,actionRunner:this.actionRunner,keybindingProvider:this.options.getKeyBinding,classNames:n.class,anchorAlignmentProvider:this.options.anchorAlignmentProvider,menuAsChild:!!this.options.renderDropdownAsChildElement,skipTelemetry:this.options.skipTelemetry,hoverDelegate:this.options.hoverDelegate});return o.setActionContext(this.actionBar.context),this.submenuActionViewItems.push(o),this.disposables.add(this._onDidChangeDropdownVisibility.add(o.onDidChangeVisibility)),o}}}))}set actionRunner(e){this.actionBar.actionRunner=e}get actionRunner(){return this.actionBar.actionRunner}set context(e){this.actionBar.context=e,this.toggleMenuActionViewItem?.setActionContext(e);for(const t of this.submenuActionViewItems)t.setActionContext(e)}getElement(){return this.element}focus(){this.actionBar.focus()}getItemsWidth(){let e=0;for(let t=0;t<this.actionBar.length();t++)e+=this.actionBar.getWidth(t);return e}getItemAction(e){return this.actionBar.getAction(e)}getItemWidth(e){return this.actionBar.getWidth(e)}getItemsLength(){return this.actionBar.length()}setAriaLabel(e){this.actionBar.setAriaLabel(e)}setActions(e,t){this.clear();const i=e?e.slice(0):[];this.hasSecondaryActions=!!(t&&t.length>0),this.hasSecondaryActions&&t&&(this.toggleMenuAction.menuActions=t.slice(0),i.push(this.toggleMenuAction)),i.forEach(n=>{this.actionBar.push(n,{icon:this.options.icon??!0,label:this.options.label??!1,keybinding:this.getKeybindingLabel(n)})})}isEmpty(){return this.actionBar.isEmpty()}getKeybindingLabel(e){return this.options.getKeyBinding?.(e)?.getLabel()??void 0}clear(){this.submenuActionViewItems=[],this.disposables.clear(),this.actionBar.clear()}dispose(){this.clear(),this.disposables.dispose(),super.dispose()}}class r extends h{static ID="toolbar.toggle.more";_menuActions;toggleDropdownMenu;constructor(e,t){t=t||I.localize("moreActions","More Actions..."),super(r.ID,t,void 0,!0),this._menuActions=[],this.toggleDropdownMenu=e}async run(){this.toggleDropdownMenu()}get menuActions(){return this._menuActions}set menuActions(e){this._menuActions=e}}export{r as ToggleMenuAction,N as ToolBar};
