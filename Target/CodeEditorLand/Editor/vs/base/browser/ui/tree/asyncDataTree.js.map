{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/tree/asyncDataTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype CancelablePromise,\n\tPromises,\n\tcreateCancelablePromise,\n\ttimeout,\n} from \"../../../common/async.js\";\nimport { Codicon } from \"../../../common/codicons.js\";\nimport {\n\tisCancellationError,\n\tonUnexpectedError,\n} from \"../../../common/errors.js\";\nimport { Emitter, Event } from \"../../../common/event.js\";\nimport { Iterable } from \"../../../common/iterator.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n} from \"../../../common/lifecycle.js\";\nimport type { ScrollEvent } from \"../../../common/scrollable.js\";\nimport { ThemeIcon } from \"../../../common/themables.js\";\nimport { isIterable } from \"../../../common/types.js\";\nimport type { IDragAndDropData } from \"../../dnd.js\";\nimport type {\n\tIIdentityProvider,\n\tIListDragAndDrop,\n\tIListDragOverReaction,\n\tIListVirtualDelegate,\n} from \"../list/list.js\";\nimport {\n\tElementsDragAndDropData,\n\ttype ListViewTargetSector,\n} from \"../list/listView.js\";\nimport type { IListStyles } from \"../list/listWidget.js\";\nimport {\n\ttype AbstractTreePart,\n\tComposedTreeDelegate,\n\ttype IAbstractTreeOptions,\n\ttype IAbstractTreeOptionsUpdate,\n\ttype TreeFindMatchType,\n\ttype TreeFindMode,\n} from \"./abstractTree.js\";\nimport type {\n\tICompressedTreeElement,\n\tICompressedTreeNode,\n} from \"./compressedObjectTreeModel.js\";\nimport { getVisibleState, isFilterResult } from \"./indexTreeModel.js\";\nimport {\n\tCompressibleObjectTree,\n\ttype ICompressibleKeyboardNavigationLabelProvider,\n\ttype ICompressibleObjectTreeOptions,\n\ttype ICompressibleTreeRenderer,\n\ttype IObjectTreeOptions,\n\ttype IObjectTreeSetChildrenOptions,\n\tObjectTree,\n} from \"./objectTree.js\";\nimport {\n\ttype IAsyncDataSource,\n\ttype ICollapseStateChangeEvent,\n\ttype IObjectTreeElement,\n\ttype ITreeContextMenuEvent,\n\ttype ITreeDragAndDrop,\n\ttype ITreeEvent,\n\ttype ITreeFilter,\n\ttype ITreeMouseEvent,\n\ttype ITreeNode,\n\ttype ITreeRenderer,\n\ttype ITreeSorter,\n\tObjectTreeElementCollapseState,\n\tTreeError,\n\ttype TreeFilterResult,\n\tTreeVisibility,\n\tWeakMapper,\n} from \"./tree.js\";\n\ninterface IAsyncDataTreeNode<TInput, T> {\n\telement: TInput | T;\n\treadonly parent: IAsyncDataTreeNode<TInput, T> | null;\n\treadonly children: IAsyncDataTreeNode<TInput, T>[];\n\treadonly id?: string | null;\n\trefreshPromise: Promise<void> | undefined;\n\thasChildren: boolean;\n\tstale: boolean;\n\tslow: boolean;\n\treadonly defaultCollapseState:\n\t\t| undefined\n\t\t| ObjectTreeElementCollapseState.PreserveOrCollapsed\n\t\t| ObjectTreeElementCollapseState.PreserveOrExpanded;\n\tforceExpanded: boolean;\n}\n\ninterface IAsyncDataTreeNodeRequiredProps<TInput, T>\n\textends Partial<IAsyncDataTreeNode<TInput, T>> {\n\treadonly element: TInput | T;\n\treadonly parent: IAsyncDataTreeNode<TInput, T> | null;\n\treadonly hasChildren: boolean;\n\treadonly defaultCollapseState:\n\t\t| undefined\n\t\t| ObjectTreeElementCollapseState.PreserveOrCollapsed\n\t\t| ObjectTreeElementCollapseState.PreserveOrExpanded;\n}\n\nfunction createAsyncDataTreeNode<TInput, T>(\n\tprops: IAsyncDataTreeNodeRequiredProps<TInput, T>,\n): IAsyncDataTreeNode<TInput, T> {\n\treturn {\n\t\t...props,\n\t\tchildren: [],\n\t\trefreshPromise: undefined,\n\t\tstale: true,\n\t\tslow: false,\n\t\tforceExpanded: false,\n\t};\n}\n\nfunction isAncestor<TInput, T>(\n\tancestor: IAsyncDataTreeNode<TInput, T>,\n\tdescendant: IAsyncDataTreeNode<TInput, T>,\n): boolean {\n\tif (!descendant.parent) {\n\t\treturn false;\n\t} else if (descendant.parent === ancestor) {\n\t\treturn true;\n\t} else {\n\t\treturn isAncestor(ancestor, descendant.parent);\n\t}\n}\n\nfunction intersects<TInput, T>(\n\tnode: IAsyncDataTreeNode<TInput, T>,\n\tother: IAsyncDataTreeNode<TInput, T>,\n): boolean {\n\treturn node === other || isAncestor(node, other) || isAncestor(other, node);\n}\n\ninterface IDataTreeListTemplateData<T> {\n\ttemplateData: T;\n}\n\ntype AsyncDataTreeNodeMapper<TInput, T, TFilterData> = WeakMapper<\n\tITreeNode<IAsyncDataTreeNode<TInput, T> | null, TFilterData>,\n\tITreeNode<TInput | T, TFilterData>\n>;\n\nclass AsyncDataTreeNodeWrapper<TInput, T, TFilterData>\n\timplements ITreeNode<TInput | T, TFilterData>\n{\n\tget element(): T {\n\t\treturn this.node.element!.element as T;\n\t}\n\tget children(): ITreeNode<T, TFilterData>[] {\n\t\treturn this.node.children.map(\n\t\t\t(node) => new AsyncDataTreeNodeWrapper(node),\n\t\t);\n\t}\n\tget depth(): number {\n\t\treturn this.node.depth;\n\t}\n\tget visibleChildrenCount(): number {\n\t\treturn this.node.visibleChildrenCount;\n\t}\n\tget visibleChildIndex(): number {\n\t\treturn this.node.visibleChildIndex;\n\t}\n\tget collapsible(): boolean {\n\t\treturn this.node.collapsible;\n\t}\n\tget collapsed(): boolean {\n\t\treturn this.node.collapsed;\n\t}\n\tget visible(): boolean {\n\t\treturn this.node.visible;\n\t}\n\tget filterData(): TFilterData | undefined {\n\t\treturn this.node.filterData;\n\t}\n\n\tconstructor(\n\t\tprivate node: ITreeNode<\n\t\t\tIAsyncDataTreeNode<TInput, T> | null,\n\t\t\tTFilterData\n\t\t>,\n\t) {}\n}\n\nclass AsyncDataTreeRenderer<TInput, T, TFilterData, TTemplateData>\n\timplements\n\t\tITreeRenderer<\n\t\t\tIAsyncDataTreeNode<TInput, T>,\n\t\t\tTFilterData,\n\t\t\tIDataTreeListTemplateData<TTemplateData>\n\t\t>\n{\n\treadonly templateId: string;\n\tprivate renderedNodes = new Map<\n\t\tIAsyncDataTreeNode<TInput, T>,\n\t\tIDataTreeListTemplateData<TTemplateData>\n\t>();\n\n\tconstructor(\n\t\tprotected renderer: ITreeRenderer<T, TFilterData, TTemplateData>,\n\t\tprotected nodeMapper: AsyncDataTreeNodeMapper<TInput, T, TFilterData>,\n\t\treadonly onDidChangeTwistieState: Event<IAsyncDataTreeNode<TInput, T>>,\n\t) {\n\t\tthis.templateId = renderer.templateId;\n\t}\n\n\trenderTemplate(\n\t\tcontainer: HTMLElement,\n\t): IDataTreeListTemplateData<TTemplateData> {\n\t\tconst templateData = this.renderer.renderTemplate(container);\n\t\treturn { templateData };\n\t}\n\n\trenderElement(\n\t\tnode: ITreeNode<IAsyncDataTreeNode<TInput, T>, TFilterData>,\n\t\tindex: number,\n\t\ttemplateData: IDataTreeListTemplateData<TTemplateData>,\n\t\theight: number | undefined,\n\t): void {\n\t\tthis.renderer.renderElement(\n\t\t\tthis.nodeMapper.map(node) as ITreeNode<T, TFilterData>,\n\t\t\tindex,\n\t\t\ttemplateData.templateData,\n\t\t\theight,\n\t\t);\n\t}\n\n\trenderTwistie(\n\t\telement: IAsyncDataTreeNode<TInput, T>,\n\t\ttwistieElement: HTMLElement,\n\t): boolean {\n\t\tif (element.slow) {\n\t\t\ttwistieElement.classList.add(\n\t\t\t\t...ThemeIcon.asClassNameArray(Codicon.treeItemLoading),\n\t\t\t);\n\t\t\treturn true;\n\t\t} else {\n\t\t\ttwistieElement.classList.remove(\n\t\t\t\t...ThemeIcon.asClassNameArray(Codicon.treeItemLoading),\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tdisposeElement(\n\t\tnode: ITreeNode<IAsyncDataTreeNode<TInput, T>, TFilterData>,\n\t\tindex: number,\n\t\ttemplateData: IDataTreeListTemplateData<TTemplateData>,\n\t\theight: number | undefined,\n\t): void {\n\t\tthis.renderer.disposeElement?.(\n\t\t\tthis.nodeMapper.map(node) as ITreeNode<T, TFilterData>,\n\t\t\tindex,\n\t\t\ttemplateData.templateData,\n\t\t\theight,\n\t\t);\n\t}\n\n\tdisposeTemplate(\n\t\ttemplateData: IDataTreeListTemplateData<TTemplateData>,\n\t): void {\n\t\tthis.renderer.disposeTemplate(templateData.templateData);\n\t}\n\n\tdispose(): void {\n\t\tthis.renderedNodes.clear();\n\t}\n}\n\nfunction asTreeEvent<TInput, T>(\n\te: ITreeEvent<IAsyncDataTreeNode<TInput, T> | null>,\n): ITreeEvent<T> {\n\treturn {\n\t\tbrowserEvent: e.browserEvent,\n\t\telements: e.elements.map((e) => e!.element as T),\n\t};\n}\n\nfunction asTreeMouseEvent<TInput, T>(\n\te: ITreeMouseEvent<IAsyncDataTreeNode<TInput, T> | null>,\n): ITreeMouseEvent<T> {\n\treturn {\n\t\tbrowserEvent: e.browserEvent,\n\t\telement: e.element && (e.element.element as T),\n\t\ttarget: e.target,\n\t};\n}\n\nfunction asTreeContextMenuEvent<TInput, T>(\n\te: ITreeContextMenuEvent<IAsyncDataTreeNode<TInput, T> | null>,\n): ITreeContextMenuEvent<T> {\n\treturn {\n\t\tbrowserEvent: e.browserEvent,\n\t\telement: e.element && (e.element.element as T),\n\t\tanchor: e.anchor,\n\t\tisStickyScroll: e.isStickyScroll,\n\t};\n}\n\nclass AsyncDataTreeElementsDragAndDropData<\n\tTInput,\n\tT,\n\tTContext,\n> extends ElementsDragAndDropData<T, TContext> {\n\toverride set context(context: TContext | undefined) {\n\t\tthis.data.context = context;\n\t}\n\n\toverride get context(): TContext | undefined {\n\t\treturn this.data.context;\n\t}\n\n\tconstructor(\n\t\tprivate data: ElementsDragAndDropData<\n\t\t\tIAsyncDataTreeNode<TInput, T>,\n\t\t\tTContext\n\t\t>,\n\t) {\n\t\tsuper(data.elements.map((node) => node.element as T));\n\t}\n}\n\nfunction asAsyncDataTreeDragAndDropData<TInput, T>(\n\tdata: IDragAndDropData,\n): IDragAndDropData {\n\tif (data instanceof ElementsDragAndDropData) {\n\t\treturn new AsyncDataTreeElementsDragAndDropData(data);\n\t}\n\n\treturn data;\n}\n\nclass AsyncDataTreeNodeListDragAndDrop<TInput, T>\n\timplements IListDragAndDrop<IAsyncDataTreeNode<TInput, T>>\n{\n\tconstructor(private dnd: ITreeDragAndDrop<T>) {}\n\n\tgetDragURI(node: IAsyncDataTreeNode<TInput, T>): string | null {\n\t\treturn this.dnd.getDragURI(node.element as T);\n\t}\n\n\tgetDragLabel(\n\t\tnodes: IAsyncDataTreeNode<TInput, T>[],\n\t\toriginalEvent: DragEvent,\n\t): string | undefined {\n\t\tif (this.dnd.getDragLabel) {\n\t\t\treturn this.dnd.getDragLabel(\n\t\t\t\tnodes.map((node) => node.element as T),\n\t\t\t\toriginalEvent,\n\t\t\t);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tonDragStart(data: IDragAndDropData, originalEvent: DragEvent): void {\n\t\tthis.dnd.onDragStart?.(\n\t\t\tasAsyncDataTreeDragAndDropData(data),\n\t\t\toriginalEvent,\n\t\t);\n\t}\n\n\tonDragOver(\n\t\tdata: IDragAndDropData,\n\t\ttargetNode: IAsyncDataTreeNode<TInput, T> | undefined,\n\t\ttargetIndex: number | undefined,\n\t\ttargetSector: ListViewTargetSector | undefined,\n\t\toriginalEvent: DragEvent,\n\t\traw = true,\n\t): boolean | IListDragOverReaction {\n\t\treturn this.dnd.onDragOver(\n\t\t\tasAsyncDataTreeDragAndDropData(data),\n\t\t\ttargetNode && (targetNode.element as T),\n\t\t\ttargetIndex,\n\t\t\ttargetSector,\n\t\t\toriginalEvent,\n\t\t);\n\t}\n\n\tdrop(\n\t\tdata: IDragAndDropData,\n\t\ttargetNode: IAsyncDataTreeNode<TInput, T> | undefined,\n\t\ttargetIndex: number | undefined,\n\t\ttargetSector: ListViewTargetSector | undefined,\n\t\toriginalEvent: DragEvent,\n\t): void {\n\t\tthis.dnd.drop(\n\t\t\tasAsyncDataTreeDragAndDropData(data),\n\t\t\ttargetNode && (targetNode.element as T),\n\t\t\ttargetIndex,\n\t\t\ttargetSector,\n\t\t\toriginalEvent,\n\t\t);\n\t}\n\n\tonDragEnd(originalEvent: DragEvent): void {\n\t\tthis.dnd.onDragEnd?.(originalEvent);\n\t}\n\n\tdispose(): void {\n\t\tthis.dnd.dispose();\n\t}\n}\n\nfunction asObjectTreeOptions<TInput, T, TFilterData>(\n\toptions?: IAsyncDataTreeOptions<T, TFilterData>,\n): IObjectTreeOptions<IAsyncDataTreeNode<TInput, T>, TFilterData> | undefined {\n\treturn (\n\t\toptions && {\n\t\t\t...options,\n\t\t\tcollapseByDefault: true,\n\t\t\tidentityProvider: options.identityProvider && {\n\t\t\t\tgetId(el) {\n\t\t\t\t\treturn options.identityProvider!.getId(el.element as T);\n\t\t\t\t},\n\t\t\t},\n\t\t\tdnd:\n\t\t\t\toptions.dnd &&\n\t\t\t\tnew AsyncDataTreeNodeListDragAndDrop(options.dnd),\n\t\t\tmultipleSelectionController:\n\t\t\t\toptions.multipleSelectionController && {\n\t\t\t\t\tisSelectionSingleChangeEvent(e) {\n\t\t\t\t\t\treturn options.multipleSelectionController!.isSelectionSingleChangeEvent(\n\t\t\t\t\t\t\t{ ...e, element: e.element } as any,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tisSelectionRangeChangeEvent(e) {\n\t\t\t\t\t\treturn options.multipleSelectionController!.isSelectionRangeChangeEvent(\n\t\t\t\t\t\t\t{ ...e, element: e.element } as any,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\taccessibilityProvider: options.accessibilityProvider && {\n\t\t\t\t...options.accessibilityProvider,\n\t\t\t\tgetPosInSet: undefined,\n\t\t\t\tgetSetSize: undefined,\n\t\t\t\tgetRole: options.accessibilityProvider.getRole\n\t\t\t\t\t? (el) => {\n\t\t\t\t\t\t\treturn options.accessibilityProvider!.getRole!(\n\t\t\t\t\t\t\t\tel.element as T,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t: () => \"treeitem\",\n\t\t\t\tisChecked: options.accessibilityProvider.isChecked\n\t\t\t\t\t? (e) => {\n\t\t\t\t\t\t\treturn !!options.accessibilityProvider?.isChecked!(\n\t\t\t\t\t\t\t\te.element as T,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined,\n\t\t\t\tgetAriaLabel(e) {\n\t\t\t\t\treturn options.accessibilityProvider!.getAriaLabel(\n\t\t\t\t\t\te.element as T,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tgetWidgetAriaLabel() {\n\t\t\t\t\treturn options.accessibilityProvider!.getWidgetAriaLabel();\n\t\t\t\t},\n\t\t\t\tgetWidgetRole: options.accessibilityProvider.getWidgetRole\n\t\t\t\t\t? () => options.accessibilityProvider!.getWidgetRole!()\n\t\t\t\t\t: () => \"tree\",\n\t\t\t\tgetAriaLevel:\n\t\t\t\t\toptions.accessibilityProvider.getAriaLevel &&\n\t\t\t\t\t((node) => {\n\t\t\t\t\t\treturn options.accessibilityProvider!.getAriaLevel!(\n\t\t\t\t\t\t\tnode.element as T,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\tgetActiveDescendantId:\n\t\t\t\t\toptions.accessibilityProvider.getActiveDescendantId &&\n\t\t\t\t\t((node) => {\n\t\t\t\t\t\treturn options.accessibilityProvider!\n\t\t\t\t\t\t\t.getActiveDescendantId!(node.element as T);\n\t\t\t\t\t}),\n\t\t\t},\n\t\t\tfilter: options.filter && {\n\t\t\t\tfilter(e, parentVisibility) {\n\t\t\t\t\treturn options.filter!.filter(\n\t\t\t\t\t\te.element as T,\n\t\t\t\t\t\tparentVisibility,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t},\n\t\t\tkeyboardNavigationLabelProvider:\n\t\t\t\toptions.keyboardNavigationLabelProvider && {\n\t\t\t\t\t...options.keyboardNavigationLabelProvider,\n\t\t\t\t\tgetKeyboardNavigationLabel(e) {\n\t\t\t\t\t\treturn options.keyboardNavigationLabelProvider!.getKeyboardNavigationLabel(\n\t\t\t\t\t\t\te.element as T,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\tsorter: undefined,\n\t\t\texpandOnlyOnTwistieClick:\n\t\t\t\ttypeof options.expandOnlyOnTwistieClick === \"undefined\"\n\t\t\t\t\t? undefined\n\t\t\t\t\t: typeof options.expandOnlyOnTwistieClick !== \"function\"\n\t\t\t\t\t\t? options.expandOnlyOnTwistieClick\n\t\t\t\t\t\t: (e) =>\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\toptions.expandOnlyOnTwistieClick as (\n\t\t\t\t\t\t\t\t\t\te: T,\n\t\t\t\t\t\t\t\t\t) => boolean\n\t\t\t\t\t\t\t\t)(e.element as T),\n\t\t\tdefaultFindVisibility: (e) => {\n\t\t\t\tif (e.hasChildren && e.stale) {\n\t\t\t\t\treturn TreeVisibility.Visible;\n\t\t\t\t} else if (typeof options.defaultFindVisibility === \"number\") {\n\t\t\t\t\treturn options.defaultFindVisibility;\n\t\t\t\t} else if (\n\t\t\t\t\ttypeof options.defaultFindVisibility === \"undefined\"\n\t\t\t\t) {\n\t\t\t\t\treturn TreeVisibility.Recurse;\n\t\t\t\t} else {\n\t\t\t\t\treturn (\n\t\t\t\t\t\toptions.defaultFindVisibility as (\n\t\t\t\t\t\t\te: T,\n\t\t\t\t\t\t) => TreeVisibility\n\t\t\t\t\t)(e.element as T);\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t);\n}\n\nexport interface IAsyncDataTreeOptionsUpdate\n\textends IAbstractTreeOptionsUpdate {}\nexport interface IAsyncDataTreeUpdateChildrenOptions<T>\n\textends IObjectTreeSetChildrenOptions<T> {}\n\nexport interface IAsyncDataTreeOptions<T, TFilterData = void>\n\textends IAsyncDataTreeOptionsUpdate,\n\t\tPick<\n\t\t\tIAbstractTreeOptions<T, TFilterData>,\n\t\t\tExclude<\n\t\t\t\tkeyof IAbstractTreeOptions<T, TFilterData>,\n\t\t\t\t\"collapseByDefault\"\n\t\t\t>\n\t\t> {\n\treadonly collapseByDefault?: { (e: T): boolean };\n\treadonly identityProvider?: IIdentityProvider<T>;\n\treadonly sorter?: ITreeSorter<T>;\n\treadonly autoExpandSingleChildren?: boolean;\n}\n\nexport interface IAsyncDataTreeViewState {\n\treadonly focus?: string[];\n\treadonly selection?: string[];\n\treadonly expanded?: string[];\n\treadonly scrollTop?: number;\n}\n\ninterface IAsyncDataTreeViewStateContext<TInput, T> {\n\treadonly viewState: IAsyncDataTreeViewState;\n\treadonly selection: IAsyncDataTreeNode<TInput, T>[];\n\treadonly focus: IAsyncDataTreeNode<TInput, T>[];\n}\n\nfunction dfs<TInput, T>(\n\tnode: IAsyncDataTreeNode<TInput, T>,\n\tfn: (node: IAsyncDataTreeNode<TInput, T>) => void,\n): void {\n\tfn(node);\n\tnode.children.forEach((child) => dfs(child, fn));\n}\n\nexport class AsyncDataTree<TInput, T, TFilterData = void>\n\timplements IDisposable\n{\n\tprotected readonly tree: ObjectTree<\n\t\tIAsyncDataTreeNode<TInput, T>,\n\t\tTFilterData\n\t>;\n\tprotected readonly root: IAsyncDataTreeNode<TInput, T>;\n\tprivate readonly nodes = new Map<null | T, IAsyncDataTreeNode<TInput, T>>();\n\tprivate readonly sorter?: ITreeSorter<T>;\n\tprivate readonly getDefaultCollapseState: {\n\t\t(\n\t\t\te: T,\n\t\t):\n\t\t\t| undefined\n\t\t\t| ObjectTreeElementCollapseState.PreserveOrCollapsed\n\t\t\t| ObjectTreeElementCollapseState.PreserveOrExpanded;\n\t};\n\n\tprivate readonly subTreeRefreshPromises = new Map<\n\t\tIAsyncDataTreeNode<TInput, T>,\n\t\tPromise<void>\n\t>();\n\tprivate readonly refreshPromises = new Map<\n\t\tIAsyncDataTreeNode<TInput, T>,\n\t\tCancelablePromise<Iterable<T>>\n\t>();\n\n\tprotected readonly identityProvider?: IIdentityProvider<T>;\n\tprivate readonly autoExpandSingleChildren: boolean;\n\n\tprivate readonly _onDidRender = new Emitter<void>();\n\tprotected readonly _onDidChangeNodeSlowState = new Emitter<\n\t\tIAsyncDataTreeNode<TInput, T>\n\t>();\n\n\tprotected readonly nodeMapper: AsyncDataTreeNodeMapper<\n\t\tTInput,\n\t\tT,\n\t\tTFilterData\n\t> = new WeakMapper((node) => new AsyncDataTreeNodeWrapper(node));\n\n\tprotected readonly disposables = new DisposableStore();\n\n\tget onDidScroll(): Event<ScrollEvent> {\n\t\treturn this.tree.onDidScroll;\n\t}\n\n\tget onDidChangeFocus(): Event<ITreeEvent<T>> {\n\t\treturn Event.map(this.tree.onDidChangeFocus, asTreeEvent);\n\t}\n\tget onDidChangeSelection(): Event<ITreeEvent<T>> {\n\t\treturn Event.map(this.tree.onDidChangeSelection, asTreeEvent);\n\t}\n\n\tget onKeyDown(): Event<KeyboardEvent> {\n\t\treturn this.tree.onKeyDown;\n\t}\n\tget onMouseClick(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.tree.onMouseClick, asTreeMouseEvent);\n\t}\n\tget onMouseDblClick(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.tree.onMouseDblClick, asTreeMouseEvent);\n\t}\n\tget onContextMenu(): Event<ITreeContextMenuEvent<T>> {\n\t\treturn Event.map(this.tree.onContextMenu, asTreeContextMenuEvent);\n\t}\n\tget onTap(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.tree.onTap, asTreeMouseEvent);\n\t}\n\tget onPointer(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.tree.onPointer, asTreeMouseEvent);\n\t}\n\tget onDidFocus(): Event<void> {\n\t\treturn this.tree.onDidFocus;\n\t}\n\tget onDidBlur(): Event<void> {\n\t\treturn this.tree.onDidBlur;\n\t}\n\n\t/**\n\t * To be used internally only!\n\t * @deprecated\n\t */\n\tget onDidChangeModel(): Event<void> {\n\t\treturn this.tree.onDidChangeModel;\n\t}\n\tget onDidChangeCollapseState(): Event<\n\t\tICollapseStateChangeEvent<\n\t\t\tIAsyncDataTreeNode<TInput, T> | null,\n\t\t\tTFilterData\n\t\t>\n\t> {\n\t\treturn this.tree.onDidChangeCollapseState;\n\t}\n\n\tget onDidUpdateOptions(): Event<IAsyncDataTreeOptionsUpdate> {\n\t\treturn this.tree.onDidUpdateOptions;\n\t}\n\n\tget onDidChangeFindOpenState(): Event<boolean> {\n\t\treturn this.tree.onDidChangeFindOpenState;\n\t}\n\tget onDidChangeStickyScrollFocused(): Event<boolean> {\n\t\treturn this.tree.onDidChangeStickyScrollFocused;\n\t}\n\n\tget findMode(): TreeFindMode {\n\t\treturn this.tree.findMode;\n\t}\n\tset findMode(mode: TreeFindMode) {\n\t\tthis.tree.findMode = mode;\n\t}\n\treadonly onDidChangeFindMode: Event<TreeFindMode>;\n\n\tget findMatchType(): TreeFindMatchType {\n\t\treturn this.tree.findMatchType;\n\t}\n\tset findMatchType(matchType: TreeFindMatchType) {\n\t\tthis.tree.findMatchType = matchType;\n\t}\n\treadonly onDidChangeFindMatchType: Event<TreeFindMatchType>;\n\n\tget expandOnlyOnTwistieClick(): boolean | ((e: T) => boolean) {\n\t\tif (typeof this.tree.expandOnlyOnTwistieClick === \"boolean\") {\n\t\t\treturn this.tree.expandOnlyOnTwistieClick;\n\t\t}\n\n\t\tconst fn = this.tree.expandOnlyOnTwistieClick;\n\t\treturn (element) =>\n\t\t\tfn(\n\t\t\t\tthis.nodes.get(\n\t\t\t\t\t(element === this.root.element ? null : element) as T,\n\t\t\t\t) || null,\n\t\t\t);\n\t}\n\n\tget onDidDispose(): Event<void> {\n\t\treturn this.tree.onDidDispose;\n\t}\n\n\tconstructor(\n\t\tprotected user: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tprivate dataSource: IAsyncDataSource<TInput, T>,\n\t\toptions: IAsyncDataTreeOptions<T, TFilterData> = {},\n\t) {\n\t\tthis.identityProvider = options.identityProvider;\n\t\tthis.autoExpandSingleChildren =\n\t\t\ttypeof options.autoExpandSingleChildren === \"undefined\"\n\t\t\t\t? false\n\t\t\t\t: options.autoExpandSingleChildren;\n\t\tthis.sorter = options.sorter;\n\t\tthis.getDefaultCollapseState = (e) =>\n\t\t\toptions.collapseByDefault\n\t\t\t\t? options.collapseByDefault(e)\n\t\t\t\t\t? ObjectTreeElementCollapseState.PreserveOrCollapsed\n\t\t\t\t\t: ObjectTreeElementCollapseState.PreserveOrExpanded\n\t\t\t\t: undefined;\n\n\t\tthis.tree = this.createTree(\n\t\t\tuser,\n\t\t\tcontainer,\n\t\t\tdelegate,\n\t\t\trenderers,\n\t\t\toptions,\n\t\t);\n\t\tthis.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n\t\tthis.onDidChangeFindMatchType = this.tree.onDidChangeFindMatchType;\n\n\t\tthis.root = createAsyncDataTreeNode({\n\t\t\telement: undefined!,\n\t\t\tparent: null,\n\t\t\thasChildren: true,\n\t\t\tdefaultCollapseState: undefined,\n\t\t});\n\n\t\tif (this.identityProvider) {\n\t\t\tthis.root = {\n\t\t\t\t...this.root,\n\t\t\t\tid: null,\n\t\t\t};\n\t\t}\n\n\t\tthis.nodes.set(null, this.root);\n\n\t\tthis.tree.onDidChangeCollapseState(\n\t\t\tthis._onDidChangeCollapseState,\n\t\t\tthis,\n\t\t\tthis.disposables,\n\t\t);\n\t}\n\n\tprotected createTree(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\toptions: IAsyncDataTreeOptions<T, TFilterData>,\n\t): ObjectTree<IAsyncDataTreeNode<TInput, T>, TFilterData> {\n\t\tconst objectTreeDelegate = new ComposedTreeDelegate<\n\t\t\tTInput | T,\n\t\t\tIAsyncDataTreeNode<TInput, T>\n\t\t>(delegate);\n\t\tconst objectTreeRenderers = renderers.map(\n\t\t\t(r) =>\n\t\t\t\tnew AsyncDataTreeRenderer(\n\t\t\t\t\tr,\n\t\t\t\t\tthis.nodeMapper,\n\t\t\t\t\tthis._onDidChangeNodeSlowState.event,\n\t\t\t\t),\n\t\t);\n\t\tconst objectTreeOptions =\n\t\t\tasObjectTreeOptions<TInput, T, TFilterData>(options) || {};\n\n\t\treturn new ObjectTree(\n\t\t\tuser,\n\t\t\tcontainer,\n\t\t\tobjectTreeDelegate,\n\t\t\tobjectTreeRenderers,\n\t\t\tobjectTreeOptions,\n\t\t);\n\t}\n\n\tupdateOptions(options: IAsyncDataTreeOptionsUpdate = {}): void {\n\t\tthis.tree.updateOptions(options);\n\t}\n\n\tget options(): IAsyncDataTreeOptions<T, TFilterData> {\n\t\treturn this.tree.options as IAsyncDataTreeOptions<T, TFilterData>;\n\t}\n\n\t// Widget\n\n\tgetHTMLElement(): HTMLElement {\n\t\treturn this.tree.getHTMLElement();\n\t}\n\n\tget contentHeight(): number {\n\t\treturn this.tree.contentHeight;\n\t}\n\n\tget contentWidth(): number {\n\t\treturn this.tree.contentWidth;\n\t}\n\n\tget onDidChangeContentHeight(): Event<number> {\n\t\treturn this.tree.onDidChangeContentHeight;\n\t}\n\n\tget onDidChangeContentWidth(): Event<number> {\n\t\treturn this.tree.onDidChangeContentWidth;\n\t}\n\n\tget scrollTop(): number {\n\t\treturn this.tree.scrollTop;\n\t}\n\n\tset scrollTop(scrollTop: number) {\n\t\tthis.tree.scrollTop = scrollTop;\n\t}\n\n\tget scrollLeft(): number {\n\t\treturn this.tree.scrollLeft;\n\t}\n\n\tset scrollLeft(scrollLeft: number) {\n\t\tthis.tree.scrollLeft = scrollLeft;\n\t}\n\n\tget scrollHeight(): number {\n\t\treturn this.tree.scrollHeight;\n\t}\n\n\tget renderHeight(): number {\n\t\treturn this.tree.renderHeight;\n\t}\n\n\tget lastVisibleElement(): T {\n\t\treturn this.tree.lastVisibleElement!.element as T;\n\t}\n\n\tget ariaLabel(): string {\n\t\treturn this.tree.ariaLabel;\n\t}\n\n\tset ariaLabel(value: string) {\n\t\tthis.tree.ariaLabel = value;\n\t}\n\n\tdomFocus(): void {\n\t\tthis.tree.domFocus();\n\t}\n\n\tlayout(height?: number, width?: number): void {\n\t\tthis.tree.layout(height, width);\n\t}\n\n\tstyle(styles: IListStyles): void {\n\t\tthis.tree.style(styles);\n\t}\n\n\t// Model\n\n\tgetInput(): TInput | undefined {\n\t\treturn this.root.element as TInput;\n\t}\n\n\tasync setInput(\n\t\tinput: TInput,\n\t\tviewState?: IAsyncDataTreeViewState,\n\t): Promise<void> {\n\t\tthis.refreshPromises.forEach((promise) => promise.cancel());\n\t\tthis.refreshPromises.clear();\n\n\t\tthis.root.element = input!;\n\n\t\tconst viewStateContext:\n\t\t\t| IAsyncDataTreeViewStateContext<TInput, T>\n\t\t\t| undefined = viewState && { viewState, focus: [], selection: [] };\n\n\t\tawait this._updateChildren(input, true, false, viewStateContext);\n\n\t\tif (viewStateContext) {\n\t\t\tthis.tree.setFocus(viewStateContext.focus);\n\t\t\tthis.tree.setSelection(viewStateContext.selection);\n\t\t}\n\n\t\tif (viewState && typeof viewState.scrollTop === \"number\") {\n\t\t\tthis.scrollTop = viewState.scrollTop;\n\t\t}\n\t}\n\n\tasync updateChildren(\n\t\telement: TInput | T = this.root.element,\n\t\trecursive = true,\n\t\trerender = false,\n\t\toptions?: IAsyncDataTreeUpdateChildrenOptions<T>,\n\t): Promise<void> {\n\t\tawait this._updateChildren(\n\t\t\telement,\n\t\t\trecursive,\n\t\t\trerender,\n\t\t\tundefined,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tprivate async _updateChildren(\n\t\telement: TInput | T = this.root.element,\n\t\trecursive = true,\n\t\trerender = false,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t\toptions?: IAsyncDataTreeUpdateChildrenOptions<T>,\n\t): Promise<void> {\n\t\tif (typeof this.root.element === \"undefined\") {\n\t\t\tthrow new TreeError(this.user, \"Tree input not set\");\n\t\t}\n\n\t\tif (this.root.refreshPromise) {\n\t\t\tawait this.root.refreshPromise;\n\t\t\tawait Event.toPromise(this._onDidRender.event);\n\t\t}\n\n\t\tconst node = this.getDataNode(element);\n\t\tawait this.refreshAndRenderNode(\n\t\t\tnode,\n\t\t\trecursive,\n\t\t\tviewStateContext,\n\t\t\toptions,\n\t\t);\n\n\t\tif (rerender) {\n\t\t\ttry {\n\t\t\t\tthis.tree.rerender(node);\n\t\t\t} catch {\n\t\t\t\t// missing nodes are fine, this could've resulted from\n\t\t\t\t// parallel refresh calls, removing `node` altogether\n\t\t\t}\n\t\t}\n\t}\n\n\tresort(element: TInput | T = this.root.element, recursive = true): void {\n\t\tthis.tree.resort(this.getDataNode(element), recursive);\n\t}\n\n\thasNode(element: TInput | T): boolean {\n\t\treturn element === this.root.element || this.nodes.has(element as T);\n\t}\n\n\t// View\n\n\trerender(element?: T): void {\n\t\tif (element === undefined || element === this.root.element) {\n\t\t\tthis.tree.rerender();\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = this.getDataNode(element);\n\t\tthis.tree.rerender(node);\n\t}\n\n\tupdateElementHeight(element: T, height: number | undefined): void {\n\t\tconst node = this.getDataNode(element);\n\t\tthis.tree.updateElementHeight(node, height);\n\t}\n\n\tupdateWidth(element: T): void {\n\t\tconst node = this.getDataNode(element);\n\t\tthis.tree.updateWidth(node);\n\t}\n\n\t// Tree\n\n\tgetNode(\n\t\telement: TInput | T = this.root.element,\n\t): ITreeNode<TInput | T, TFilterData> {\n\t\tconst dataNode = this.getDataNode(element);\n\t\tconst node = this.tree.getNode(\n\t\t\tdataNode === this.root ? null : dataNode,\n\t\t);\n\t\treturn this.nodeMapper.map(node);\n\t}\n\n\tcollapse(element: T, recursive = false): boolean {\n\t\tconst node = this.getDataNode(element);\n\t\treturn this.tree.collapse(node === this.root ? null : node, recursive);\n\t}\n\n\tasync expand(element: T, recursive = false): Promise<boolean> {\n\t\tif (typeof this.root.element === \"undefined\") {\n\t\t\tthrow new TreeError(this.user, \"Tree input not set\");\n\t\t}\n\n\t\tif (this.root.refreshPromise) {\n\t\t\tawait this.root.refreshPromise;\n\t\t\tawait Event.toPromise(this._onDidRender.event);\n\t\t}\n\n\t\tconst node = this.getDataNode(element);\n\n\t\tif (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node.refreshPromise) {\n\t\t\tawait this.root.refreshPromise;\n\t\t\tawait Event.toPromise(this._onDidRender.event);\n\t\t}\n\n\t\tif (\n\t\t\tnode !== this.root &&\n\t\t\t!node.refreshPromise &&\n\t\t\t!this.tree.isCollapsed(node)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst result = this.tree.expand(\n\t\t\tnode === this.root ? null : node,\n\t\t\trecursive,\n\t\t);\n\n\t\tif (node.refreshPromise) {\n\t\t\tawait this.root.refreshPromise;\n\t\t\tawait Event.toPromise(this._onDidRender.event);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\ttoggleCollapsed(element: T, recursive = false): boolean {\n\t\treturn this.tree.toggleCollapsed(this.getDataNode(element), recursive);\n\t}\n\n\texpandAll(): void {\n\t\tthis.tree.expandAll();\n\t}\n\n\tasync expandTo(element: T): Promise<void> {\n\t\tif (!this.dataSource.getParent) {\n\t\t\tthrow new Error(\"Can't expand to element without getParent method\");\n\t\t}\n\n\t\tconst elements: T[] = [];\n\n\t\twhile (!this.hasNode(element)) {\n\t\t\telement = this.dataSource.getParent(element) as T;\n\n\t\t\tif (element !== this.root.element) {\n\t\t\t\telements.push(element);\n\t\t\t}\n\t\t}\n\n\t\tfor (const element of Iterable.reverse(elements)) {\n\t\t\tawait this.expand(element);\n\t\t}\n\n\t\tthis.tree.expandTo(this.getDataNode(element));\n\t}\n\n\tcollapseAll(): void {\n\t\tthis.tree.collapseAll();\n\t}\n\n\tisCollapsible(element: T): boolean {\n\t\treturn this.tree.isCollapsible(this.getDataNode(element));\n\t}\n\n\tisCollapsed(element: TInput | T): boolean {\n\t\treturn this.tree.isCollapsed(this.getDataNode(element));\n\t}\n\n\ttriggerTypeNavigation(): void {\n\t\tthis.tree.triggerTypeNavigation();\n\t}\n\n\topenFind(): void {\n\t\tthis.tree.openFind();\n\t}\n\n\tcloseFind(): void {\n\t\tthis.tree.closeFind();\n\t}\n\n\trefilter(): void {\n\t\tthis.tree.refilter();\n\t}\n\n\tsetAnchor(element: T | undefined): void {\n\t\tthis.tree.setAnchor(\n\t\t\ttypeof element === \"undefined\"\n\t\t\t\t? undefined\n\t\t\t\t: this.getDataNode(element),\n\t\t);\n\t}\n\n\tgetAnchor(): T | undefined {\n\t\tconst node = this.tree.getAnchor();\n\t\treturn node?.element as T;\n\t}\n\n\tsetSelection(elements: T[], browserEvent?: UIEvent): void {\n\t\tconst nodes = elements.map((e) => this.getDataNode(e));\n\t\tthis.tree.setSelection(nodes, browserEvent);\n\t}\n\n\tgetSelection(): T[] {\n\t\tconst nodes = this.tree.getSelection();\n\t\treturn nodes.map((n) => n!.element as T);\n\t}\n\n\tsetFocus(elements: T[], browserEvent?: UIEvent): void {\n\t\tconst nodes = elements.map((e) => this.getDataNode(e));\n\t\tthis.tree.setFocus(nodes, browserEvent);\n\t}\n\n\tfocusNext(n = 1, loop = false, browserEvent?: UIEvent): void {\n\t\tthis.tree.focusNext(n, loop, browserEvent);\n\t}\n\n\tfocusPrevious(n = 1, loop = false, browserEvent?: UIEvent): void {\n\t\tthis.tree.focusPrevious(n, loop, browserEvent);\n\t}\n\n\tfocusNextPage(browserEvent?: UIEvent): Promise<void> {\n\t\treturn this.tree.focusNextPage(browserEvent);\n\t}\n\n\tfocusPreviousPage(browserEvent?: UIEvent): Promise<void> {\n\t\treturn this.tree.focusPreviousPage(browserEvent);\n\t}\n\n\tfocusLast(browserEvent?: UIEvent): void {\n\t\tthis.tree.focusLast(browserEvent);\n\t}\n\n\tfocusFirst(browserEvent?: UIEvent): void {\n\t\tthis.tree.focusFirst(browserEvent);\n\t}\n\n\tgetFocus(): T[] {\n\t\tconst nodes = this.tree.getFocus();\n\t\treturn nodes.map((n) => n!.element as T);\n\t}\n\n\tgetStickyScrollFocus(): T[] {\n\t\tconst nodes = this.tree.getStickyScrollFocus();\n\t\treturn nodes.map((n) => n!.element as T);\n\t}\n\n\tgetFocusedPart(): AbstractTreePart {\n\t\treturn this.tree.getFocusedPart();\n\t}\n\n\treveal(element: T, relativeTop?: number): void {\n\t\tthis.tree.reveal(this.getDataNode(element), relativeTop);\n\t}\n\n\tgetRelativeTop(element: T): number | null {\n\t\treturn this.tree.getRelativeTop(this.getDataNode(element));\n\t}\n\n\t// Tree navigation\n\n\tgetParentElement(element: T): TInput | T {\n\t\tconst node = this.tree.getParentElement(this.getDataNode(element));\n\t\treturn (node && node.element)!;\n\t}\n\n\tgetFirstElementChild(\n\t\telement: TInput | T = this.root.element,\n\t): TInput | T | undefined {\n\t\tconst dataNode = this.getDataNode(element);\n\t\tconst node = this.tree.getFirstElementChild(\n\t\t\tdataNode === this.root ? null : dataNode,\n\t\t);\n\t\treturn (node && node.element)!;\n\t}\n\n\t// Implementation\n\n\tprivate getDataNode(element: TInput | T): IAsyncDataTreeNode<TInput, T> {\n\t\tconst node: IAsyncDataTreeNode<TInput, T> | undefined = this.nodes.get(\n\t\t\t(element === this.root.element ? null : element) as T,\n\t\t);\n\n\t\tif (!node) {\n\t\t\tthrow new TreeError(\n\t\t\t\tthis.user,\n\t\t\t\t`Data tree node not found: ${element}`,\n\t\t\t);\n\t\t}\n\n\t\treturn node;\n\t}\n\n\tprivate async refreshAndRenderNode(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\trecursive: boolean,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t\toptions?: IAsyncDataTreeUpdateChildrenOptions<T>,\n\t): Promise<void> {\n\t\tawait this.refreshNode(node, recursive, viewStateContext);\n\t\tif (this.disposables.isDisposed) {\n\t\t\treturn; // tree disposed during refresh (#199264)\n\t\t}\n\t\tthis.render(node, viewStateContext, options);\n\t}\n\n\tprivate async refreshNode(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\trecursive: boolean,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t): Promise<void> {\n\t\tlet result: Promise<void> | undefined;\n\n\t\tthis.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n\t\t\tif (!result && intersects(refreshNode, node)) {\n\t\t\t\tresult = refreshPromise.then(() =>\n\t\t\t\t\tthis.refreshNode(node, recursive, viewStateContext),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (node !== this.root) {\n\t\t\tconst treeNode = this.tree.getNode(node);\n\n\t\t\tif (treeNode.collapsed) {\n\t\t\t\tnode.hasChildren = !!this.dataSource.hasChildren(node.element);\n\t\t\t\tnode.stale = true;\n\t\t\t\tthis.setChildren(node, [], recursive, viewStateContext);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\treturn this.doRefreshSubTree(node, recursive, viewStateContext);\n\t}\n\n\tprivate async doRefreshSubTree(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\trecursive: boolean,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t): Promise<void> {\n\t\tlet done: () => void;\n\t\tnode.refreshPromise = new Promise((c) => (done = c));\n\t\tthis.subTreeRefreshPromises.set(node, node.refreshPromise);\n\n\t\tnode.refreshPromise.finally(() => {\n\t\t\tnode.refreshPromise = undefined;\n\t\t\tthis.subTreeRefreshPromises.delete(node);\n\t\t});\n\n\t\ttry {\n\t\t\tconst childrenToRefresh = await this.doRefreshNode(\n\t\t\t\tnode,\n\t\t\t\trecursive,\n\t\t\t\tviewStateContext,\n\t\t\t);\n\t\t\tnode.stale = false;\n\n\t\t\tawait Promises.settled(\n\t\t\t\tchildrenToRefresh.map((child) =>\n\t\t\t\t\tthis.doRefreshSubTree(child, recursive, viewStateContext),\n\t\t\t\t),\n\t\t\t);\n\t\t} finally {\n\t\t\tdone!();\n\t\t}\n\t}\n\n\tprivate async doRefreshNode(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\trecursive: boolean,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t): Promise<IAsyncDataTreeNode<TInput, T>[]> {\n\t\tnode.hasChildren = !!this.dataSource.hasChildren(node.element);\n\n\t\tlet childrenPromise: Promise<Iterable<T>>;\n\n\t\tif (node.hasChildren) {\n\t\t\tconst children = this.doGetChildren(node);\n\t\t\tif (isIterable(children)) {\n\t\t\t\tchildrenPromise = Promise.resolve(children);\n\t\t\t} else {\n\t\t\t\tconst slowTimeout = timeout(800);\n\n\t\t\t\tslowTimeout.then(\n\t\t\t\t\t() => {\n\t\t\t\t\t\tnode.slow = true;\n\t\t\t\t\t\tthis._onDidChangeNodeSlowState.fire(node);\n\t\t\t\t\t},\n\t\t\t\t\t(_) => null,\n\t\t\t\t);\n\n\t\t\t\tchildrenPromise = children.finally(() => slowTimeout.cancel());\n\t\t\t}\n\t\t} else {\n\t\t\tchildrenPromise = Promise.resolve(Iterable.empty());\n\t\t}\n\n\t\ttry {\n\t\t\tconst children = await childrenPromise;\n\t\t\treturn this.setChildren(\n\t\t\t\tnode,\n\t\t\t\tchildren,\n\t\t\t\trecursive,\n\t\t\t\tviewStateContext,\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tif (node !== this.root && this.tree.hasElement(node)) {\n\t\t\t\tthis.tree.collapse(node);\n\t\t\t}\n\n\t\t\tif (isCancellationError(err)) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tif (node.slow) {\n\t\t\t\tnode.slow = false;\n\t\t\t\tthis._onDidChangeNodeSlowState.fire(node);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doGetChildren(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t): Promise<Iterable<T>> | Iterable<T> {\n\t\tlet result = this.refreshPromises.get(node);\n\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\tconst children = this.dataSource.getChildren(node.element);\n\t\tif (isIterable(children)) {\n\t\t\treturn this.processChildren(children);\n\t\t} else {\n\t\t\tresult = createCancelablePromise(async () =>\n\t\t\t\tthis.processChildren(await children),\n\t\t\t);\n\t\t\tthis.refreshPromises.set(node, result);\n\t\t\treturn result.finally(() => {\n\t\t\t\tthis.refreshPromises.delete(node);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _onDidChangeCollapseState({\n\t\tnode,\n\t\tdeep,\n\t}: ICollapseStateChangeEvent<\n\t\tIAsyncDataTreeNode<TInput, T> | null,\n\t\tany\n\t>): void {\n\t\tif (node.element === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!node.collapsed && node.element.stale) {\n\t\t\tif (deep) {\n\t\t\t\tthis.collapse(node.element.element as T);\n\t\t\t} else {\n\t\t\t\tthis.refreshAndRenderNode(node.element, false).catch(\n\t\t\t\t\tonUnexpectedError,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setChildren(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\tchildrenElementsIterable: Iterable<T>,\n\t\trecursive: boolean,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t): IAsyncDataTreeNode<TInput, T>[] {\n\t\tconst childrenElements = [...childrenElementsIterable];\n\n\t\t// perf: if the node was and still is a leaf, avoid all this hassle\n\t\tif (node.children.length === 0 && childrenElements.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst nodesToForget = new Map<T, IAsyncDataTreeNode<TInput, T>>();\n\t\tconst childrenTreeNodesById = new Map<\n\t\t\tstring,\n\t\t\t{ node: IAsyncDataTreeNode<TInput, T>; collapsed: boolean }\n\t\t>();\n\n\t\tfor (const child of node.children) {\n\t\t\tnodesToForget.set(child.element as T, child);\n\n\t\t\tif (this.identityProvider) {\n\t\t\t\tchildrenTreeNodesById.set(child.id!, {\n\t\t\t\t\tnode: child,\n\t\t\t\t\tcollapsed:\n\t\t\t\t\t\tthis.tree.hasElement(child) &&\n\t\t\t\t\t\tthis.tree.isCollapsed(child),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst childrenToRefresh: IAsyncDataTreeNode<TInput, T>[] = [];\n\n\t\tconst children = childrenElements.map<IAsyncDataTreeNode<TInput, T>>(\n\t\t\t(element) => {\n\t\t\t\tconst hasChildren = !!this.dataSource.hasChildren(element);\n\n\t\t\t\tif (!this.identityProvider) {\n\t\t\t\t\tconst asyncDataTreeNode = createAsyncDataTreeNode({\n\t\t\t\t\t\telement,\n\t\t\t\t\t\tparent: node,\n\t\t\t\t\t\thasChildren,\n\t\t\t\t\t\tdefaultCollapseState:\n\t\t\t\t\t\t\tthis.getDefaultCollapseState(element),\n\t\t\t\t\t});\n\n\t\t\t\t\tif (\n\t\t\t\t\t\thasChildren &&\n\t\t\t\t\t\tasyncDataTreeNode.defaultCollapseState ===\n\t\t\t\t\t\t\tObjectTreeElementCollapseState.PreserveOrExpanded\n\t\t\t\t\t) {\n\t\t\t\t\t\tchildrenToRefresh.push(asyncDataTreeNode);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn asyncDataTreeNode;\n\t\t\t\t}\n\n\t\t\t\tconst id = this.identityProvider.getId(element).toString();\n\t\t\t\tconst result = childrenTreeNodesById.get(id);\n\n\t\t\t\tif (result) {\n\t\t\t\t\tconst asyncDataTreeNode = result.node;\n\n\t\t\t\t\tnodesToForget.delete(asyncDataTreeNode.element as T);\n\t\t\t\t\tthis.nodes.delete(asyncDataTreeNode.element as T);\n\t\t\t\t\tthis.nodes.set(element, asyncDataTreeNode);\n\n\t\t\t\t\tasyncDataTreeNode.element = element;\n\t\t\t\t\tasyncDataTreeNode.hasChildren = hasChildren;\n\n\t\t\t\t\tif (recursive) {\n\t\t\t\t\t\tif (result.collapsed) {\n\t\t\t\t\t\t\tasyncDataTreeNode.children.forEach((node) =>\n\t\t\t\t\t\t\t\tdfs(node, (node) =>\n\t\t\t\t\t\t\t\t\tthis.nodes.delete(node.element as T),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tasyncDataTreeNode.children.splice(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tasyncDataTreeNode.children.length,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tasyncDataTreeNode.stale = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchildrenToRefresh.push(asyncDataTreeNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (hasChildren && !result.collapsed) {\n\t\t\t\t\t\tchildrenToRefresh.push(asyncDataTreeNode);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn asyncDataTreeNode;\n\t\t\t\t}\n\n\t\t\t\tconst childAsyncDataTreeNode = createAsyncDataTreeNode({\n\t\t\t\t\telement,\n\t\t\t\t\tparent: node,\n\t\t\t\t\tid,\n\t\t\t\t\thasChildren,\n\t\t\t\t\tdefaultCollapseState: this.getDefaultCollapseState(element),\n\t\t\t\t});\n\n\t\t\t\tif (\n\t\t\t\t\tviewStateContext &&\n\t\t\t\t\tviewStateContext.viewState.focus &&\n\t\t\t\t\tviewStateContext.viewState.focus.indexOf(id) > -1\n\t\t\t\t) {\n\t\t\t\t\tviewStateContext.focus.push(childAsyncDataTreeNode);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tviewStateContext &&\n\t\t\t\t\tviewStateContext.viewState.selection &&\n\t\t\t\t\tviewStateContext.viewState.selection.indexOf(id) > -1\n\t\t\t\t) {\n\t\t\t\t\tviewStateContext.selection.push(childAsyncDataTreeNode);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tviewStateContext &&\n\t\t\t\t\tviewStateContext.viewState.expanded &&\n\t\t\t\t\tviewStateContext.viewState.expanded.indexOf(id) > -1\n\t\t\t\t) {\n\t\t\t\t\tchildrenToRefresh.push(childAsyncDataTreeNode);\n\t\t\t\t} else if (\n\t\t\t\t\thasChildren &&\n\t\t\t\t\tchildAsyncDataTreeNode.defaultCollapseState ===\n\t\t\t\t\t\tObjectTreeElementCollapseState.PreserveOrExpanded\n\t\t\t\t) {\n\t\t\t\t\tchildrenToRefresh.push(childAsyncDataTreeNode);\n\t\t\t\t}\n\n\t\t\t\treturn childAsyncDataTreeNode;\n\t\t\t},\n\t\t);\n\n\t\tfor (const node of nodesToForget.values()) {\n\t\t\tdfs(node, (node) => this.nodes.delete(node.element as T));\n\t\t}\n\n\t\tfor (const child of children) {\n\t\t\tthis.nodes.set(child.element as T, child);\n\t\t}\n\n\t\tnode.children.splice(0, node.children.length, ...children);\n\n\t\t// TODO@joao this doesn't take filter into account\n\t\tif (\n\t\t\tnode !== this.root &&\n\t\t\tthis.autoExpandSingleChildren &&\n\t\t\tchildren.length === 1 &&\n\t\t\tchildrenToRefresh.length === 0\n\t\t) {\n\t\t\tchildren[0].forceExpanded = true;\n\t\t\tchildrenToRefresh.push(children[0]);\n\t\t}\n\n\t\treturn childrenToRefresh;\n\t}\n\n\tprotected render(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t\toptions?: IAsyncDataTreeUpdateChildrenOptions<T>,\n\t): void {\n\t\tconst children = node.children.map((node) =>\n\t\t\tthis.asTreeElement(node, viewStateContext),\n\t\t);\n\t\tconst objectTreeOptions:\n\t\t\t| IObjectTreeSetChildrenOptions<IAsyncDataTreeNode<TInput, T>>\n\t\t\t| undefined = options && {\n\t\t\t...options,\n\t\t\tdiffIdentityProvider: options.diffIdentityProvider && {\n\t\t\t\tgetId(node: IAsyncDataTreeNode<TInput, T>): {\n\t\t\t\t\ttoString(): string;\n\t\t\t\t} {\n\t\t\t\t\treturn options.diffIdentityProvider!.getId(\n\t\t\t\t\t\tnode.element as T,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tthis.tree.setChildren(\n\t\t\tnode === this.root ? null : node,\n\t\t\tchildren,\n\t\t\tobjectTreeOptions,\n\t\t);\n\n\t\tif (node !== this.root) {\n\t\t\tthis.tree.setCollapsible(node, node.hasChildren);\n\t\t}\n\n\t\tthis._onDidRender.fire();\n\t}\n\n\tprotected asTreeElement(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t): IObjectTreeElement<IAsyncDataTreeNode<TInput, T>> {\n\t\tif (node.stale) {\n\t\t\treturn {\n\t\t\t\telement: node,\n\t\t\t\tcollapsible: node.hasChildren,\n\t\t\t\tcollapsed: true,\n\t\t\t};\n\t\t}\n\n\t\tlet collapsed:\n\t\t\t| boolean\n\t\t\t| ObjectTreeElementCollapseState.PreserveOrCollapsed\n\t\t\t| ObjectTreeElementCollapseState.PreserveOrExpanded\n\t\t\t| undefined;\n\n\t\tif (\n\t\t\tviewStateContext &&\n\t\t\tviewStateContext.viewState.expanded &&\n\t\t\tnode.id &&\n\t\t\tviewStateContext.viewState.expanded.indexOf(node.id) > -1\n\t\t) {\n\t\t\tcollapsed = false;\n\t\t} else if (node.forceExpanded) {\n\t\t\tcollapsed = false;\n\t\t\tnode.forceExpanded = false;\n\t\t} else {\n\t\t\tcollapsed = node.defaultCollapseState;\n\t\t}\n\n\t\treturn {\n\t\t\telement: node,\n\t\t\tchildren: node.hasChildren\n\t\t\t\t? Iterable.map(node.children, (child) =>\n\t\t\t\t\t\tthis.asTreeElement(child, viewStateContext),\n\t\t\t\t\t)\n\t\t\t\t: [],\n\t\t\tcollapsible: node.hasChildren,\n\t\t\tcollapsed,\n\t\t};\n\t}\n\n\tprotected processChildren(children: Iterable<T>): Iterable<T> {\n\t\tif (this.sorter) {\n\t\t\tchildren = [...children].sort(\n\t\t\t\tthis.sorter.compare.bind(this.sorter),\n\t\t\t);\n\t\t}\n\n\t\treturn children;\n\t}\n\n\t// view state\n\n\tgetViewState(): IAsyncDataTreeViewState {\n\t\tif (!this.identityProvider) {\n\t\t\tthrow new TreeError(\n\t\t\t\tthis.user,\n\t\t\t\t\"Can't get tree view state without an identity provider\",\n\t\t\t);\n\t\t}\n\n\t\tconst getId = (element: T) =>\n\t\t\tthis.identityProvider!.getId(element).toString();\n\t\tconst focus = this.getFocus().map(getId);\n\t\tconst selection = this.getSelection().map(getId);\n\n\t\tconst expanded: string[] = [];\n\t\tconst root = this.tree.getNode();\n\t\tconst stack = [root];\n\n\t\twhile (stack.length > 0) {\n\t\t\tconst node = stack.pop()!;\n\n\t\t\tif (node !== root && node.collapsible && !node.collapsed) {\n\t\t\t\texpanded.push(getId(node.element!.element as T));\n\t\t\t}\n\n\t\t\tstack.push(...node.children);\n\t\t}\n\n\t\treturn { focus, selection, expanded, scrollTop: this.scrollTop };\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis.tree.dispose();\n\t}\n}\n\ntype CompressibleAsyncDataTreeNodeMapper<TInput, T, TFilterData> = WeakMapper<\n\tITreeNode<ICompressedTreeNode<IAsyncDataTreeNode<TInput, T>>, TFilterData>,\n\tITreeNode<ICompressedTreeNode<TInput | T>, TFilterData>\n>;\n\nclass CompressibleAsyncDataTreeNodeWrapper<TInput, T, TFilterData>\n\timplements ITreeNode<ICompressedTreeNode<TInput | T>, TFilterData>\n{\n\tget element(): ICompressedTreeNode<TInput | T> {\n\t\treturn {\n\t\t\telements: this.node.element.elements.map((e) => e.element),\n\t\t\tincompressible: this.node.element.incompressible,\n\t\t};\n\t}\n\n\tget children(): ITreeNode<ICompressedTreeNode<TInput | T>, TFilterData>[] {\n\t\treturn this.node.children.map(\n\t\t\t(node) => new CompressibleAsyncDataTreeNodeWrapper(node),\n\t\t);\n\t}\n\tget depth(): number {\n\t\treturn this.node.depth;\n\t}\n\tget visibleChildrenCount(): number {\n\t\treturn this.node.visibleChildrenCount;\n\t}\n\tget visibleChildIndex(): number {\n\t\treturn this.node.visibleChildIndex;\n\t}\n\tget collapsible(): boolean {\n\t\treturn this.node.collapsible;\n\t}\n\tget collapsed(): boolean {\n\t\treturn this.node.collapsed;\n\t}\n\tget visible(): boolean {\n\t\treturn this.node.visible;\n\t}\n\tget filterData(): TFilterData | undefined {\n\t\treturn this.node.filterData;\n\t}\n\n\tconstructor(\n\t\tprivate node: ITreeNode<\n\t\t\tICompressedTreeNode<IAsyncDataTreeNode<TInput, T>>,\n\t\t\tTFilterData\n\t\t>,\n\t) {}\n}\n\nclass CompressibleAsyncDataTreeRenderer<TInput, T, TFilterData, TTemplateData>\n\timplements\n\t\tICompressibleTreeRenderer<\n\t\t\tIAsyncDataTreeNode<TInput, T>,\n\t\t\tTFilterData,\n\t\t\tIDataTreeListTemplateData<TTemplateData>\n\t\t>\n{\n\treadonly templateId: string;\n\tprivate renderedNodes = new Map<\n\t\tIAsyncDataTreeNode<TInput, T>,\n\t\tIDataTreeListTemplateData<TTemplateData>\n\t>();\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\tprotected renderer: ICompressibleTreeRenderer<\n\t\t\tT,\n\t\t\tTFilterData,\n\t\t\tTTemplateData\n\t\t>,\n\t\tprotected nodeMapper: AsyncDataTreeNodeMapper<TInput, T, TFilterData>,\n\t\tprivate compressibleNodeMapperProvider: () => CompressibleAsyncDataTreeNodeMapper<\n\t\t\tTInput,\n\t\t\tT,\n\t\t\tTFilterData\n\t\t>,\n\t\treadonly onDidChangeTwistieState: Event<IAsyncDataTreeNode<TInput, T>>,\n\t) {\n\t\tthis.templateId = renderer.templateId;\n\t}\n\n\trenderTemplate(\n\t\tcontainer: HTMLElement,\n\t): IDataTreeListTemplateData<TTemplateData> {\n\t\tconst templateData = this.renderer.renderTemplate(container);\n\t\treturn { templateData };\n\t}\n\n\trenderElement(\n\t\tnode: ITreeNode<IAsyncDataTreeNode<TInput, T>, TFilterData>,\n\t\tindex: number,\n\t\ttemplateData: IDataTreeListTemplateData<TTemplateData>,\n\t\theight: number | undefined,\n\t): void {\n\t\tthis.renderer.renderElement(\n\t\t\tthis.nodeMapper.map(node) as ITreeNode<T, TFilterData>,\n\t\t\tindex,\n\t\t\ttemplateData.templateData,\n\t\t\theight,\n\t\t);\n\t}\n\n\trenderCompressedElements(\n\t\tnode: ITreeNode<\n\t\t\tICompressedTreeNode<IAsyncDataTreeNode<TInput, T>>,\n\t\t\tTFilterData\n\t\t>,\n\t\tindex: number,\n\t\ttemplateData: IDataTreeListTemplateData<TTemplateData>,\n\t\theight: number | undefined,\n\t): void {\n\t\tthis.renderer.renderCompressedElements(\n\t\t\tthis.compressibleNodeMapperProvider().map(node) as ITreeNode<\n\t\t\t\tICompressedTreeNode<T>,\n\t\t\t\tTFilterData\n\t\t\t>,\n\t\t\tindex,\n\t\t\ttemplateData.templateData,\n\t\t\theight,\n\t\t);\n\t}\n\n\trenderTwistie(\n\t\telement: IAsyncDataTreeNode<TInput, T>,\n\t\ttwistieElement: HTMLElement,\n\t): boolean {\n\t\tif (element.slow) {\n\t\t\ttwistieElement.classList.add(\n\t\t\t\t...ThemeIcon.asClassNameArray(Codicon.treeItemLoading),\n\t\t\t);\n\t\t\treturn true;\n\t\t} else {\n\t\t\ttwistieElement.classList.remove(\n\t\t\t\t...ThemeIcon.asClassNameArray(Codicon.treeItemLoading),\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tdisposeElement(\n\t\tnode: ITreeNode<IAsyncDataTreeNode<TInput, T>, TFilterData>,\n\t\tindex: number,\n\t\ttemplateData: IDataTreeListTemplateData<TTemplateData>,\n\t\theight: number | undefined,\n\t): void {\n\t\tthis.renderer.disposeElement?.(\n\t\t\tthis.nodeMapper.map(node) as ITreeNode<T, TFilterData>,\n\t\t\tindex,\n\t\t\ttemplateData.templateData,\n\t\t\theight,\n\t\t);\n\t}\n\n\tdisposeCompressedElements(\n\t\tnode: ITreeNode<\n\t\t\tICompressedTreeNode<IAsyncDataTreeNode<TInput, T>>,\n\t\t\tTFilterData\n\t\t>,\n\t\tindex: number,\n\t\ttemplateData: IDataTreeListTemplateData<TTemplateData>,\n\t\theight: number | undefined,\n\t): void {\n\t\tthis.renderer.disposeCompressedElements?.(\n\t\t\tthis.compressibleNodeMapperProvider().map(node) as ITreeNode<\n\t\t\t\tICompressedTreeNode<T>,\n\t\t\t\tTFilterData\n\t\t\t>,\n\t\t\tindex,\n\t\t\ttemplateData.templateData,\n\t\t\theight,\n\t\t);\n\t}\n\n\tdisposeTemplate(\n\t\ttemplateData: IDataTreeListTemplateData<TTemplateData>,\n\t): void {\n\t\tthis.renderer.disposeTemplate(templateData.templateData);\n\t}\n\n\tdispose(): void {\n\t\tthis.renderedNodes.clear();\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\nexport interface ITreeCompressionDelegate<T> {\n\tisIncompressible(element: T): boolean;\n}\n\nfunction asCompressibleObjectTreeOptions<TInput, T, TFilterData>(\n\toptions?: ICompressibleAsyncDataTreeOptions<T, TFilterData>,\n):\n\t| ICompressibleObjectTreeOptions<IAsyncDataTreeNode<TInput, T>, TFilterData>\n\t| undefined {\n\tconst objectTreeOptions = options && asObjectTreeOptions(options);\n\n\treturn (\n\t\tobjectTreeOptions && {\n\t\t\t...objectTreeOptions,\n\t\t\tkeyboardNavigationLabelProvider:\n\t\t\t\tobjectTreeOptions.keyboardNavigationLabelProvider && {\n\t\t\t\t\t...objectTreeOptions.keyboardNavigationLabelProvider,\n\t\t\t\t\tgetCompressedNodeKeyboardNavigationLabel(els) {\n\t\t\t\t\t\treturn options.keyboardNavigationLabelProvider!.getCompressedNodeKeyboardNavigationLabel(\n\t\t\t\t\t\t\tels.map((e) => e.element as T),\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t}\n\t);\n}\n\nexport interface ICompressibleAsyncDataTreeOptions<T, TFilterData = void>\n\textends IAsyncDataTreeOptions<T, TFilterData> {\n\treadonly compressionEnabled?: boolean;\n\treadonly keyboardNavigationLabelProvider?: ICompressibleKeyboardNavigationLabelProvider<T>;\n}\n\nexport interface ICompressibleAsyncDataTreeOptionsUpdate\n\textends IAsyncDataTreeOptionsUpdate {\n\treadonly compressionEnabled?: boolean;\n}\n\nexport class CompressibleAsyncDataTree<\n\tTInput,\n\tT,\n\tTFilterData = void,\n> extends AsyncDataTree<TInput, T, TFilterData> {\n\tprotected declare readonly tree: CompressibleObjectTree<\n\t\tIAsyncDataTreeNode<TInput, T>,\n\t\tTFilterData\n\t>;\n\tprotected readonly compressibleNodeMapper: CompressibleAsyncDataTreeNodeMapper<\n\t\tTInput,\n\t\tT,\n\t\tTFilterData\n\t> = new WeakMapper(\n\t\t(node) => new CompressibleAsyncDataTreeNodeWrapper(node),\n\t);\n\tprivate filter?: ITreeFilter<T, TFilterData>;\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tvirtualDelegate: IListVirtualDelegate<T>,\n\t\tprivate compressionDelegate: ITreeCompressionDelegate<T>,\n\t\trenderers: ICompressibleTreeRenderer<T, TFilterData, any>[],\n\t\tdataSource: IAsyncDataSource<TInput, T>,\n\t\toptions: ICompressibleAsyncDataTreeOptions<T, TFilterData> = {},\n\t) {\n\t\tsuper(user, container, virtualDelegate, renderers, dataSource, options);\n\t\tthis.filter = options.filter;\n\t}\n\n\tprotected override createTree(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ICompressibleTreeRenderer<T, TFilterData, any>[],\n\t\toptions: ICompressibleAsyncDataTreeOptions<T, TFilterData>,\n\t): ObjectTree<IAsyncDataTreeNode<TInput, T>, TFilterData> {\n\t\tconst objectTreeDelegate = new ComposedTreeDelegate<\n\t\t\tTInput | T,\n\t\t\tIAsyncDataTreeNode<TInput, T>\n\t\t>(delegate);\n\t\tconst objectTreeRenderers = renderers.map(\n\t\t\t(r) =>\n\t\t\t\tnew CompressibleAsyncDataTreeRenderer(\n\t\t\t\t\tr,\n\t\t\t\t\tthis.nodeMapper,\n\t\t\t\t\t() => this.compressibleNodeMapper,\n\t\t\t\t\tthis._onDidChangeNodeSlowState.event,\n\t\t\t\t),\n\t\t);\n\t\tconst objectTreeOptions =\n\t\t\tasCompressibleObjectTreeOptions<TInput, T, TFilterData>(options) ||\n\t\t\t{};\n\n\t\treturn new CompressibleObjectTree(\n\t\t\tuser,\n\t\t\tcontainer,\n\t\t\tobjectTreeDelegate,\n\t\t\tobjectTreeRenderers,\n\t\t\tobjectTreeOptions,\n\t\t);\n\t}\n\n\tprotected override asTreeElement(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t): ICompressedTreeElement<IAsyncDataTreeNode<TInput, T>> {\n\t\treturn {\n\t\t\tincompressible: this.compressionDelegate.isIncompressible(\n\t\t\t\tnode.element as T,\n\t\t\t),\n\t\t\t...super.asTreeElement(node, viewStateContext),\n\t\t};\n\t}\n\n\toverride updateOptions(\n\t\toptions: ICompressibleAsyncDataTreeOptionsUpdate = {},\n\t): void {\n\t\tthis.tree.updateOptions(options);\n\t}\n\n\toverride getViewState(): IAsyncDataTreeViewState {\n\t\tif (!this.identityProvider) {\n\t\t\tthrow new TreeError(\n\t\t\t\tthis.user,\n\t\t\t\t\"Can't get tree view state without an identity provider\",\n\t\t\t);\n\t\t}\n\n\t\tconst getId = (element: T) =>\n\t\t\tthis.identityProvider!.getId(element).toString();\n\t\tconst focus = this.getFocus().map(getId);\n\t\tconst selection = this.getSelection().map(getId);\n\n\t\tconst expanded: string[] = [];\n\t\tconst root = this.tree.getCompressedTreeNode();\n\t\tconst stack = [root];\n\n\t\twhile (stack.length > 0) {\n\t\t\tconst node = stack.pop()!;\n\n\t\t\tif (node !== root && node.collapsible && !node.collapsed) {\n\t\t\t\tfor (const asyncNode of node.element!.elements) {\n\t\t\t\t\texpanded.push(getId(asyncNode.element as T));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstack.push(...node.children);\n\t\t}\n\n\t\treturn { focus, selection, expanded, scrollTop: this.scrollTop };\n\t}\n\n\tprotected override render(\n\t\tnode: IAsyncDataTreeNode<TInput, T>,\n\t\tviewStateContext?: IAsyncDataTreeViewStateContext<TInput, T>,\n\t\toptions?: IAsyncDataTreeUpdateChildrenOptions<T>,\n\t): void {\n\t\tif (!this.identityProvider) {\n\t\t\treturn super.render(node, viewStateContext);\n\t\t}\n\n\t\t// Preserve traits across compressions. Hacky but does the trick.\n\t\t// This is hard to fix properly since it requires rewriting the traits\n\t\t// across trees and lists. Let's just keep it this way for now.\n\t\tconst getId = (element: T) =>\n\t\t\tthis.identityProvider!.getId(element).toString();\n\t\tconst getUncompressedIds = (\n\t\t\tnodes: IAsyncDataTreeNode<TInput, T>[],\n\t\t): Set<string> => {\n\t\t\tconst result = new Set<string>();\n\n\t\t\tfor (const node of nodes) {\n\t\t\t\tconst compressedNode = this.tree.getCompressedTreeNode(\n\t\t\t\t\tnode === this.root ? null : node,\n\t\t\t\t);\n\n\t\t\t\tif (!compressedNode.element) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (const node of compressedNode.element.elements) {\n\t\t\t\t\tresult.add(getId(node.element as T));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\tconst oldSelection = getUncompressedIds(\n\t\t\tthis.tree.getSelection() as IAsyncDataTreeNode<TInput, T>[],\n\t\t);\n\t\tconst oldFocus = getUncompressedIds(\n\t\t\tthis.tree.getFocus() as IAsyncDataTreeNode<TInput, T>[],\n\t\t);\n\n\t\tsuper.render(node, viewStateContext, options);\n\n\t\tconst selection = this.getSelection();\n\t\tlet didChangeSelection = false;\n\n\t\tconst focus = this.getFocus();\n\t\tlet didChangeFocus = false;\n\n\t\tconst visit = (\n\t\t\tnode: ITreeNode<\n\t\t\t\tICompressedTreeNode<IAsyncDataTreeNode<TInput, T>> | null,\n\t\t\t\tTFilterData\n\t\t\t>,\n\t\t) => {\n\t\t\tconst compressedNode = node.element;\n\n\t\t\tif (compressedNode) {\n\t\t\t\tfor (let i = 0; i < compressedNode.elements.length; i++) {\n\t\t\t\t\tconst id = getId(compressedNode.elements[i].element as T);\n\t\t\t\t\tconst element = compressedNode.elements[\n\t\t\t\t\t\tcompressedNode.elements.length - 1\n\t\t\t\t\t].element as T;\n\n\t\t\t\t\t// github.com/microsoft/vscode/issues/85938\n\t\t\t\t\tif (\n\t\t\t\t\t\toldSelection.has(id) &&\n\t\t\t\t\t\tselection.indexOf(element) === -1\n\t\t\t\t\t) {\n\t\t\t\t\t\tselection.push(element);\n\t\t\t\t\t\tdidChangeSelection = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (oldFocus.has(id) && focus.indexOf(element) === -1) {\n\t\t\t\t\t\tfocus.push(element);\n\t\t\t\t\t\tdidChangeFocus = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnode.children.forEach(visit);\n\t\t};\n\n\t\tvisit(\n\t\t\tthis.tree.getCompressedTreeNode(node === this.root ? null : node),\n\t\t);\n\n\t\tif (didChangeSelection) {\n\t\t\tthis.setSelection(selection);\n\t\t}\n\n\t\tif (didChangeFocus) {\n\t\t\tthis.setFocus(focus);\n\t\t}\n\t}\n\n\t// For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n\t// and we have to filter everything beforehand\n\t// Related to #85193 and #85835\n\tprotected override processChildren(children: Iterable<T>): Iterable<T> {\n\t\tif (this.filter) {\n\t\t\tchildren = Iterable.filter(children, (e) => {\n\t\t\t\tconst result = this.filter!.filter(e, TreeVisibility.Visible);\n\t\t\t\tconst visibility = getVisibility(result);\n\n\t\t\t\tif (visibility === TreeVisibility.Recurse) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Recursive tree visibility not supported in async data compressed trees\",\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn visibility === TreeVisibility.Visible;\n\t\t\t});\n\t\t}\n\n\t\treturn super.processChildren(children);\n\t}\n}\n\nfunction getVisibility<TFilterData>(\n\tfilterResult: TreeFilterResult<TFilterData>,\n): TreeVisibility {\n\tif (typeof filterResult === \"boolean\") {\n\t\treturn filterResult ? TreeVisibility.Visible : TreeVisibility.Hidden;\n\t} else if (isFilterResult(filterResult)) {\n\t\treturn getVisibleState(filterResult.visibility);\n\t} else {\n\t\treturn getVisibleState(filterResult);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["e", "element", "node"]
}
