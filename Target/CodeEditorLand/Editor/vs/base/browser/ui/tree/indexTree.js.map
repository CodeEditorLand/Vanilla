{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/tree/indexTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IListVirtualDelegate } from '../list/list.js';\nimport { AbstractTree, IAbstractTreeOptions } from './abstractTree.js';\nimport { IndexTreeModel } from './indexTreeModel.js';\nimport { ITreeElement, ITreeModel, ITreeRenderer, TreeError } from './tree.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport './media/tree.css';\n\nexport interface IIndexTreeOptions<T, TFilterData = void> extends IAbstractTreeOptions<T, TFilterData> { }\n\nexport class IndexTree<T, TFilterData = void> extends AbstractTree<T, TFilterData, number[]> {\n\n\tprotected declare model: IndexTreeModel<T, TFilterData>;\n\n\tconstructor(\n\t\tprivate readonly user: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tprivate rootElement: T,\n\t\toptions: IIndexTreeOptions<T, TFilterData> = {}\n\t) {\n\t\tsuper(user, container, delegate, renderers, options);\n\t}\n\n\tsplice(location: number[], deleteCount: number, toInsert: Iterable<ITreeElement<T>> = Iterable.empty()): void {\n\t\tthis.model.splice(location, deleteCount, toInsert);\n\t}\n\n\trerender(location?: number[]): void {\n\t\tif (location === undefined) {\n\t\t\tthis.view.rerender();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.rerender(location);\n\t}\n\n\tupdateElementHeight(location: number[], height: number): void {\n\t\tif (location.length === 0) {\n\t\t\tthrow new TreeError(this.user, `Update element height failed: invalid location`);\n\t\t}\n\n\t\tconst elementIndex = this.model.getListIndex(location);\n\t\tif (elementIndex === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.view.updateElementHeight(elementIndex, height);\n\t}\n\n\tprotected createModel(user: string, options: IIndexTreeOptions<T, TFilterData>): ITreeModel<T, TFilterData, number[]> {\n\t\treturn new IndexTreeModel(user, this.rootElement, options);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,4BAA4B;AACrC,SAAS,cAAc,4BAA4B;AACnD,SAAS,sBAAsB;AAC/B,SAAS,cAAc,YAAY,eAAe,iBAAiB;AACnE,SAAS,gBAAgB;AACzB,OAAO;AAIA,MAAM,kBAAyC,aAAuC;AAAA,EAI5F,YACkB,MACjB,WACA,UACA,WACQ,aACR,UAA6C,CAAC,GAC7C;AACD,UAAM,MAAM,WAAW,UAAU,WAAW,OAAO;AAPlC;AAIT;AAAA,EAIT;AAAA,EA3BD,OAc6F;AAAA;AAAA;AAAA,EAe5F,OAAO,UAAoB,aAAqB,WAAsC,SAAS,MAAM,GAAS;AAC7G,SAAK,MAAM,OAAO,UAAU,aAAa,QAAQ;AAAA,EAClD;AAAA,EAEA,SAAS,UAA2B;AACnC,QAAI,aAAa,QAAW;AAC3B,WAAK,KAAK,SAAS;AACnB;AAAA,IACD;AAEA,SAAK,MAAM,SAAS,QAAQ;AAAA,EAC7B;AAAA,EAEA,oBAAoB,UAAoB,QAAsB;AAC7D,QAAI,SAAS,WAAW,GAAG;AAC1B,YAAM,IAAI,UAAU,KAAK,MAAM,gDAAgD;AAAA,IAChF;AAEA,UAAM,eAAe,KAAK,MAAM,aAAa,QAAQ;AACrD,QAAI,iBAAiB,IAAI;AACxB;AAAA,IACD;AAEA,SAAK,KAAK,oBAAoB,cAAc,MAAM;AAAA,EACnD;AAAA,EAEU,YAAY,MAAc,SAAkF;AACrH,WAAO,IAAI,eAAe,MAAM,KAAK,aAAa,OAAO;AAAA,EAC1D;AACD;",
  "names": []
}
