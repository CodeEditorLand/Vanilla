{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/tree/dataTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IIdentityProvider, IListVirtualDelegate } from '../list/list.js';\nimport { AbstractTree, AbstractTreeViewState, IAbstractTreeOptions } from './abstractTree.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { IDataSource, ITreeElement, ITreeModel, ITreeNode, ITreeRenderer, ITreeSorter, TreeError } from './tree.js';\nimport { Iterable } from '../../../common/iterator.js';\n\nexport interface IDataTreeOptions<T, TFilterData = void> extends IAbstractTreeOptions<T, TFilterData> {\n\treadonly sorter?: ITreeSorter<T>;\n}\n\nexport class DataTree<TInput, T, TFilterData = void> extends AbstractTree<T | null, TFilterData, T | null> {\n\n\tprotected declare model: ObjectTreeModel<T, TFilterData>;\n\tprivate input: TInput | undefined;\n\n\tprivate identityProvider: IIdentityProvider<T> | undefined;\n\tprivate nodesByIdentity = new Map<string, ITreeNode<T, TFilterData>>();\n\n\tconstructor(\n\t\tprivate user: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tprivate dataSource: IDataSource<TInput, T>,\n\t\toptions: IDataTreeOptions<T, TFilterData> = {}\n\t) {\n\t\tsuper(user, container, delegate, renderers, options as IDataTreeOptions<T | null, TFilterData>);\n\t\tthis.identityProvider = options.identityProvider;\n\t}\n\n\t// Model\n\n\tgetInput(): TInput | undefined {\n\t\treturn this.input;\n\t}\n\n\tsetInput(input: TInput | undefined, viewState?: AbstractTreeViewState): void {\n\t\tif (viewState && !this.identityProvider) {\n\t\t\tthrow new TreeError(this.user, 'Can\\'t restore tree view state without an identity provider');\n\t\t}\n\n\t\tthis.input = input;\n\n\t\tif (!input) {\n\t\t\tthis.nodesByIdentity.clear();\n\t\t\tthis.model.setChildren(null, Iterable.empty());\n\t\t\treturn;\n\t\t}\n\n\t\tif (!viewState) {\n\t\t\tthis._refresh(input);\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus: T[] = [];\n\t\tconst selection: T[] = [];\n\n\t\tconst isCollapsed = (element: T) => {\n\t\t\tconst id = this.identityProvider!.getId(element).toString();\n\t\t\treturn !viewState.expanded[id];\n\t\t};\n\n\t\tconst onDidCreateNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\tconst id = this.identityProvider!.getId(node.element).toString();\n\n\t\t\tif (viewState.focus.has(id)) {\n\t\t\t\tfocus.push(node.element);\n\t\t\t}\n\n\t\t\tif (viewState.selection.has(id)) {\n\t\t\t\tselection.push(node.element);\n\t\t\t}\n\t\t};\n\n\t\tthis._refresh(input, isCollapsed, onDidCreateNode);\n\t\tthis.setFocus(focus);\n\t\tthis.setSelection(selection);\n\n\t\tif (viewState && typeof viewState.scrollTop === 'number') {\n\t\t\tthis.scrollTop = viewState.scrollTop;\n\t\t}\n\t}\n\n\tupdateChildren(element: TInput | T = this.input!): void {\n\t\tif (typeof this.input === 'undefined') {\n\t\t\tthrow new TreeError(this.user, 'Tree input not set');\n\t\t}\n\n\t\tlet isCollapsed: ((el: T) => boolean | undefined) | undefined;\n\n\t\tif (this.identityProvider) {\n\t\t\tisCollapsed = element => {\n\t\t\t\tconst id = this.identityProvider!.getId(element).toString();\n\t\t\t\tconst node = this.nodesByIdentity.get(id);\n\n\t\t\t\tif (!node) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn node.collapsed;\n\t\t\t};\n\t\t}\n\n\t\tthis._refresh(element, isCollapsed);\n\t}\n\n\tresort(element: T | TInput = this.input!, recursive = true): void {\n\t\tthis.model.resort((element === this.input ? null : element) as T, recursive);\n\t}\n\n\t// View\n\n\trefresh(element?: T): void {\n\t\tif (element === undefined) {\n\t\t\tthis.view.rerender();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.rerender(element);\n\t}\n\n\t// Implementation\n\n\tprivate _refresh(element: TInput | T, isCollapsed?: (el: T) => boolean | undefined, onDidCreateNode?: (node: ITreeNode<T, TFilterData>) => void): void {\n\t\tlet onDidDeleteNode: ((node: ITreeNode<T, TFilterData>) => void) | undefined;\n\n\t\tif (this.identityProvider) {\n\t\t\tconst insertedElements = new Set<string>();\n\n\t\t\tconst outerOnDidCreateNode = onDidCreateNode;\n\t\t\tonDidCreateNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\t\tconst id = this.identityProvider!.getId(node.element).toString();\n\n\t\t\t\tinsertedElements.add(id);\n\t\t\t\tthis.nodesByIdentity.set(id, node);\n\n\t\t\t\touterOnDidCreateNode?.(node);\n\t\t\t};\n\n\t\t\tonDidDeleteNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\t\tconst id = this.identityProvider!.getId(node.element).toString();\n\n\t\t\t\tif (!insertedElements.has(id)) {\n\t\t\t\t\tthis.nodesByIdentity.delete(id);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tthis.model.setChildren((element === this.input ? null : element) as T, this.iterate(element, isCollapsed).elements, { onDidCreateNode, onDidDeleteNode });\n\t}\n\n\tprivate iterate(element: TInput | T, isCollapsed?: (el: T) => boolean | undefined): { elements: Iterable<ITreeElement<T>>; size: number } {\n\t\tconst children = [...this.dataSource.getChildren(element)];\n\t\tconst elements = Iterable.map(children, element => {\n\t\t\tconst { elements: children, size } = this.iterate(element, isCollapsed);\n\t\t\tconst collapsible = this.dataSource.hasChildren ? this.dataSource.hasChildren(element) : undefined;\n\t\t\tconst collapsed = size === 0 ? undefined : (isCollapsed && isCollapsed(element));\n\n\t\t\treturn { element, children, collapsible, collapsed };\n\t\t});\n\n\t\treturn { elements, size: children.length };\n\t}\n\n\tprotected createModel(user: string, options: IDataTreeOptions<T, TFilterData>): ITreeModel<T | null, TFilterData, T | null> {\n\t\treturn new ObjectTreeModel(user, options);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["element", "children"]
}
