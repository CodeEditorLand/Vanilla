{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/tree/dataTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Iterable } from \"../../../common/iterator.js\";\nimport type { IIdentityProvider, IListVirtualDelegate } from \"../list/list.js\";\nimport {\n\tAbstractTree,\n\ttype AbstractTreeViewState,\n\ttype IAbstractTreeOptions,\n} from \"./abstractTree.js\";\nimport { ObjectTreeModel } from \"./objectTreeModel.js\";\nimport {\n\ttype IDataSource,\n\ttype ITreeElement,\n\ttype ITreeModel,\n\ttype ITreeNode,\n\ttype ITreeRenderer,\n\ttype ITreeSorter,\n\tTreeError,\n} from \"./tree.js\";\n\nexport interface IDataTreeOptions<T, TFilterData = void>\n\textends IAbstractTreeOptions<T, TFilterData> {\n\treadonly sorter?: ITreeSorter<T>;\n}\n\nexport class DataTree<TInput, T, TFilterData = void> extends AbstractTree<\n\tT | null,\n\tTFilterData,\n\tT | null\n> {\n\tprotected declare model: ObjectTreeModel<T, TFilterData>;\n\tprivate input: TInput | undefined;\n\n\tprivate identityProvider: IIdentityProvider<T> | undefined;\n\tprivate nodesByIdentity = new Map<string, ITreeNode<T, TFilterData>>();\n\n\tconstructor(\n\t\tprivate user: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tprivate dataSource: IDataSource<TInput, T>,\n\t\toptions: IDataTreeOptions<T, TFilterData> = {},\n\t) {\n\t\tsuper(\n\t\t\tuser,\n\t\t\tcontainer,\n\t\t\tdelegate,\n\t\t\trenderers,\n\t\t\toptions as IDataTreeOptions<T | null, TFilterData>,\n\t\t);\n\t\tthis.identityProvider = options.identityProvider;\n\t}\n\n\t// Model\n\n\tgetInput(): TInput | undefined {\n\t\treturn this.input;\n\t}\n\n\tsetInput(\n\t\tinput: TInput | undefined,\n\t\tviewState?: AbstractTreeViewState,\n\t): void {\n\t\tif (viewState && !this.identityProvider) {\n\t\t\tthrow new TreeError(\n\t\t\t\tthis.user,\n\t\t\t\t\"Can't restore tree view state without an identity provider\",\n\t\t\t);\n\t\t}\n\n\t\tthis.input = input;\n\n\t\tif (!input) {\n\t\t\tthis.nodesByIdentity.clear();\n\t\t\tthis.model.setChildren(null, Iterable.empty());\n\t\t\treturn;\n\t\t}\n\n\t\tif (!viewState) {\n\t\t\tthis._refresh(input);\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus: T[] = [];\n\t\tconst selection: T[] = [];\n\n\t\tconst isCollapsed = (element: T) => {\n\t\t\tconst id = this.identityProvider!.getId(element).toString();\n\t\t\treturn !viewState.expanded[id];\n\t\t};\n\n\t\tconst onDidCreateNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\tconst id = this.identityProvider!.getId(node.element).toString();\n\n\t\t\tif (viewState.focus.has(id)) {\n\t\t\t\tfocus.push(node.element);\n\t\t\t}\n\n\t\t\tif (viewState.selection.has(id)) {\n\t\t\t\tselection.push(node.element);\n\t\t\t}\n\t\t};\n\n\t\tthis._refresh(input, isCollapsed, onDidCreateNode);\n\t\tthis.setFocus(focus);\n\t\tthis.setSelection(selection);\n\n\t\tif (viewState && typeof viewState.scrollTop === \"number\") {\n\t\t\tthis.scrollTop = viewState.scrollTop;\n\t\t}\n\t}\n\n\tupdateChildren(element: TInput | T = this.input!): void {\n\t\tif (typeof this.input === \"undefined\") {\n\t\t\tthrow new TreeError(this.user, \"Tree input not set\");\n\t\t}\n\n\t\tlet isCollapsed: ((el: T) => boolean | undefined) | undefined;\n\n\t\tif (this.identityProvider) {\n\t\t\tisCollapsed = (element) => {\n\t\t\t\tconst id = this.identityProvider!.getId(element).toString();\n\t\t\t\tconst node = this.nodesByIdentity.get(id);\n\n\t\t\t\tif (!node) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn node.collapsed;\n\t\t\t};\n\t\t}\n\n\t\tthis._refresh(element, isCollapsed);\n\t}\n\n\tresort(element: T | TInput = this.input!, recursive = true): void {\n\t\tthis.model.resort(\n\t\t\t(element === this.input ? null : element) as T,\n\t\t\trecursive,\n\t\t);\n\t}\n\n\t// View\n\n\trefresh(element?: T): void {\n\t\tif (element === undefined) {\n\t\t\tthis.view.rerender();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.rerender(element);\n\t}\n\n\t// Implementation\n\n\tprivate _refresh(\n\t\telement: TInput | T,\n\t\tisCollapsed?: (el: T) => boolean | undefined,\n\t\tonDidCreateNode?: (node: ITreeNode<T, TFilterData>) => void,\n\t): void {\n\t\tlet onDidDeleteNode:\n\t\t\t| ((node: ITreeNode<T, TFilterData>) => void)\n\t\t\t| undefined;\n\n\t\tif (this.identityProvider) {\n\t\t\tconst insertedElements = new Set<string>();\n\n\t\t\tconst outerOnDidCreateNode = onDidCreateNode;\n\t\t\tonDidCreateNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\t\tconst id = this.identityProvider!.getId(\n\t\t\t\t\tnode.element,\n\t\t\t\t).toString();\n\n\t\t\t\tinsertedElements.add(id);\n\t\t\t\tthis.nodesByIdentity.set(id, node);\n\n\t\t\t\touterOnDidCreateNode?.(node);\n\t\t\t};\n\n\t\t\tonDidDeleteNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\t\tconst id = this.identityProvider!.getId(\n\t\t\t\t\tnode.element,\n\t\t\t\t).toString();\n\n\t\t\t\tif (!insertedElements.has(id)) {\n\t\t\t\t\tthis.nodesByIdentity.delete(id);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tthis.model.setChildren(\n\t\t\t(element === this.input ? null : element) as T,\n\t\t\tthis.iterate(element, isCollapsed).elements,\n\t\t\t{ onDidCreateNode, onDidDeleteNode },\n\t\t);\n\t}\n\n\tprivate iterate(\n\t\telement: TInput | T,\n\t\tisCollapsed?: (el: T) => boolean | undefined,\n\t): { elements: Iterable<ITreeElement<T>>; size: number } {\n\t\tconst children = [...this.dataSource.getChildren(element)];\n\t\tconst elements = Iterable.map(children, (element) => {\n\t\t\tconst { elements: children, size } = this.iterate(\n\t\t\t\telement,\n\t\t\t\tisCollapsed,\n\t\t\t);\n\t\t\tconst collapsible = this.dataSource.hasChildren\n\t\t\t\t? this.dataSource.hasChildren(element)\n\t\t\t\t: undefined;\n\t\t\tconst collapsed =\n\t\t\t\tsize === 0 ? undefined : isCollapsed && isCollapsed(element);\n\n\t\t\treturn { element, children, collapsible, collapsed };\n\t\t});\n\n\t\treturn { elements, size: children.length };\n\t}\n\n\tprotected createModel(\n\t\tuser: string,\n\t\toptions: IDataTreeOptions<T, TFilterData>,\n\t): ITreeModel<T | null, TFilterData, T | null> {\n\t\treturn new ObjectTreeModel(user, options);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["element", "children"]
}
