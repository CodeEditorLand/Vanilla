{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/tree/compressedObjectTreeModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from \"../../../common/arrays.js\";\nimport { Event } from \"../../../common/event.js\";\nimport { Iterable } from \"../../../common/iterator.js\";\nimport type { IIdentityProvider } from \"../list/list.js\";\nimport type { IIndexTreeModelSpliceOptions } from \"./indexTreeModel.js\";\nimport {\n\ttype IObjectTreeModel,\n\ttype IObjectTreeModelOptions,\n\ttype IObjectTreeModelSetChildrenOptions,\n\tObjectTreeModel,\n} from \"./objectTreeModel.js\";\nimport {\n\ttype ICollapseStateChangeEvent,\n\ttype IObjectTreeElement,\n\ttype ITreeListSpliceData,\n\ttype ITreeModel,\n\ttype ITreeModelSpliceEvent,\n\ttype ITreeNode,\n\tTreeError,\n\ttype TreeFilterResult,\n\ttype TreeVisibility,\n\tWeakMapper,\n} from \"./tree.js\";\n\n// Exported only for test reasons, do not use directly\nexport interface ICompressedTreeElement<T> extends IObjectTreeElement<T> {\n\treadonly children?: Iterable<ICompressedTreeElement<T>>;\n\treadonly incompressible?: boolean;\n}\n\n// Exported only for test reasons, do not use directly\nexport interface ICompressedTreeNode<T> {\n\treadonly elements: T[];\n\treadonly incompressible: boolean;\n}\n\nfunction noCompress<T>(\n\telement: ICompressedTreeElement<T>,\n): ICompressedTreeElement<ICompressedTreeNode<T>> {\n\tconst elements = [element.element];\n\tconst incompressible = element.incompressible || false;\n\n\treturn {\n\t\telement: { elements, incompressible },\n\t\tchildren: Iterable.map(Iterable.from(element.children), noCompress),\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed,\n\t};\n}\n\n// Exported only for test reasons, do not use directly\nexport function compress<T>(\n\telement: ICompressedTreeElement<T>,\n): ICompressedTreeElement<ICompressedTreeNode<T>> {\n\tconst elements = [element.element];\n\tconst incompressible = element.incompressible || false;\n\n\tlet childrenIterator: Iterable<ICompressedTreeElement<T>>;\n\tlet children: ICompressedTreeElement<T>[];\n\n\twhile (true) {\n\t\t[children, childrenIterator] = Iterable.consume(\n\t\t\tIterable.from(element.children),\n\t\t\t2,\n\t\t);\n\n\t\tif (children.length !== 1) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (children[0].incompressible) {\n\t\t\tbreak;\n\t\t}\n\n\t\telement = children[0];\n\t\telements.push(element.element);\n\t}\n\n\treturn {\n\t\telement: { elements, incompressible },\n\t\tchildren: Iterable.map(\n\t\t\tIterable.concat(children, childrenIterator),\n\t\t\tcompress,\n\t\t),\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed,\n\t};\n}\n\nfunction _decompress<T>(\n\telement: ICompressedTreeElement<ICompressedTreeNode<T>>,\n\tindex = 0,\n): ICompressedTreeElement<T> {\n\tlet children: Iterable<ICompressedTreeElement<T>>;\n\n\tif (index < element.element.elements.length - 1) {\n\t\tchildren = [_decompress(element, index + 1)];\n\t} else {\n\t\tchildren = Iterable.map(Iterable.from(element.children), (el) =>\n\t\t\t_decompress(el, 0),\n\t\t);\n\t}\n\n\tif (index === 0 && element.element.incompressible) {\n\t\treturn {\n\t\t\telement: element.element.elements[index],\n\t\t\tchildren,\n\t\t\tincompressible: true,\n\t\t\tcollapsible: element.collapsible,\n\t\t\tcollapsed: element.collapsed,\n\t\t};\n\t}\n\n\treturn {\n\t\telement: element.element.elements[index],\n\t\tchildren,\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed,\n\t};\n}\n\n// Exported only for test reasons, do not use directly\nexport function decompress<T>(\n\telement: ICompressedTreeElement<ICompressedTreeNode<T>>,\n): ICompressedTreeElement<T> {\n\treturn _decompress(element, 0);\n}\n\nfunction splice<T>(\n\ttreeElement: ICompressedTreeElement<T>,\n\telement: T,\n\tchildren: Iterable<ICompressedTreeElement<T>>,\n): ICompressedTreeElement<T> {\n\tif (treeElement.element === element) {\n\t\treturn { ...treeElement, children };\n\t}\n\n\treturn {\n\t\t...treeElement,\n\t\tchildren: Iterable.map(Iterable.from(treeElement.children), (e) =>\n\t\t\tsplice(e, element, children),\n\t\t),\n\t};\n}\n\ninterface ICompressedObjectTreeModelOptions<T, TFilterData>\n\textends IObjectTreeModelOptions<ICompressedTreeNode<T>, TFilterData> {\n\treadonly compressionEnabled?: boolean;\n}\n\nconst wrapIdentityProvider = <T>(\n\tbase: IIdentityProvider<T>,\n): IIdentityProvider<ICompressedTreeNode<T>> => ({\n\tgetId(node) {\n\t\treturn node.elements.map((e) => base.getId(e).toString()).join(\"\\0\");\n\t},\n});\n\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel<\n\tT extends NonNullable<any>,\n\tTFilterData extends NonNullable<any> = void,\n> implements ITreeModel<ICompressedTreeNode<T> | null, TFilterData, T | null>\n{\n\treadonly rootRef = null;\n\n\tget onDidSpliceRenderedNodes(): Event<\n\t\tITreeListSpliceData<ICompressedTreeNode<T> | null, TFilterData>\n\t> {\n\t\treturn this.model.onDidSpliceRenderedNodes;\n\t}\n\tget onDidSpliceModel(): Event<\n\t\tITreeModelSpliceEvent<ICompressedTreeNode<T> | null, TFilterData>\n\t> {\n\t\treturn this.model.onDidSpliceModel;\n\t}\n\tget onDidChangeCollapseState(): Event<\n\t\tICollapseStateChangeEvent<ICompressedTreeNode<T>, TFilterData>\n\t> {\n\t\treturn this.model.onDidChangeCollapseState;\n\t}\n\tget onDidChangeRenderNodeCount(): Event<\n\t\tITreeNode<ICompressedTreeNode<T>, TFilterData>\n\t> {\n\t\treturn this.model.onDidChangeRenderNodeCount;\n\t}\n\n\tprivate model: ObjectTreeModel<ICompressedTreeNode<T>, TFilterData>;\n\tprivate nodes = new Map<T | null, ICompressedTreeNode<T>>();\n\tprivate enabled: boolean;\n\tprivate readonly identityProvider?: IIdentityProvider<\n\t\tICompressedTreeNode<T>\n\t>;\n\n\tget size(): number {\n\t\treturn this.nodes.size;\n\t}\n\n\tconstructor(\n\t\tprivate user: string,\n\t\toptions: ICompressedObjectTreeModelOptions<T, TFilterData> = {},\n\t) {\n\t\tthis.model = new ObjectTreeModel(user, options);\n\t\tthis.enabled =\n\t\t\ttypeof options.compressionEnabled === \"undefined\"\n\t\t\t\t? true\n\t\t\t\t: options.compressionEnabled;\n\t\tthis.identityProvider = options.identityProvider;\n\t}\n\n\tsetChildren(\n\t\telement: T | null,\n\t\tchildren: Iterable<ICompressedTreeElement<T>> = Iterable.empty(),\n\t\toptions: IObjectTreeModelSetChildrenOptions<T, TFilterData>,\n\t): void {\n\t\t// Diffs must be deep, since the compression can affect nested elements.\n\t\t// @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n\n\t\tconst diffIdentityProvider =\n\t\t\toptions.diffIdentityProvider &&\n\t\t\twrapIdentityProvider(options.diffIdentityProvider);\n\t\tif (element === null) {\n\t\t\tconst compressedChildren = Iterable.map(\n\t\t\t\tchildren,\n\t\t\t\tthis.enabled ? compress : noCompress,\n\t\t\t);\n\t\t\tthis._setChildren(null, compressedChildren, {\n\t\t\t\tdiffIdentityProvider,\n\t\t\t\tdiffDepth: Number.POSITIVE_INFINITY,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst compressedNode = this.nodes.get(element);\n\n\t\tif (!compressedNode) {\n\t\t\tthrow new TreeError(this.user, \"Unknown compressed tree node\");\n\t\t}\n\n\t\tconst node = this.model.getNode(compressedNode) as ITreeNode<\n\t\t\tICompressedTreeNode<T>,\n\t\t\tTFilterData\n\t\t>;\n\t\tconst compressedParentNode =\n\t\t\tthis.model.getParentNodeLocation(compressedNode);\n\t\tconst parent = this.model.getNode(compressedParentNode) as ITreeNode<\n\t\t\tICompressedTreeNode<T>,\n\t\t\tTFilterData\n\t\t>;\n\n\t\tconst decompressedElement = decompress(node);\n\t\tconst splicedElement = splice(decompressedElement, element, children);\n\t\tconst recompressedElement = (this.enabled ? compress : noCompress)(\n\t\t\tsplicedElement,\n\t\t);\n\n\t\t// If the recompressed node is identical to the original, just set its children.\n\t\t// Saves work and churn diffing the parent element.\n\t\tconst elementComparator = options.diffIdentityProvider\n\t\t\t? (a: T, b: T) =>\n\t\t\t\t\toptions.diffIdentityProvider!.getId(a) ===\n\t\t\t\t\toptions.diffIdentityProvider!.getId(b)\n\t\t\t: undefined;\n\t\tif (\n\t\t\tequals(\n\t\t\t\trecompressedElement.element.elements,\n\t\t\t\tnode.element.elements,\n\t\t\t\telementComparator,\n\t\t\t)\n\t\t) {\n\t\t\tthis._setChildren(\n\t\t\t\tcompressedNode,\n\t\t\t\trecompressedElement.children || Iterable.empty(),\n\t\t\t\t{ diffIdentityProvider, diffDepth: 1 },\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentChildren = parent.children.map((child) =>\n\t\t\tchild === node ? recompressedElement : child,\n\t\t);\n\n\t\tthis._setChildren(parent.element, parentChildren, {\n\t\t\tdiffIdentityProvider,\n\t\t\tdiffDepth: node.depth - parent.depth,\n\t\t});\n\t}\n\n\tisCompressionEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tsetCompressionEnabled(enabled: boolean): void {\n\t\tif (enabled === this.enabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.enabled = enabled;\n\n\t\tconst root = this.model.getNode();\n\t\tconst rootChildren = root.children as ITreeNode<\n\t\t\tICompressedTreeNode<T>\n\t\t>[];\n\t\tconst decompressedRootChildren = Iterable.map(rootChildren, decompress);\n\t\tconst recompressedRootChildren = Iterable.map(\n\t\t\tdecompressedRootChildren,\n\t\t\tenabled ? compress : noCompress,\n\t\t);\n\n\t\t// it should be safe to always use deep diff mode here if an identity\n\t\t// provider is available, since we know the raw nodes are unchanged.\n\t\tthis._setChildren(null, recompressedRootChildren, {\n\t\t\tdiffIdentityProvider: this.identityProvider,\n\t\t\tdiffDepth: Number.POSITIVE_INFINITY,\n\t\t});\n\t}\n\n\tprivate _setChildren(\n\t\tnode: ICompressedTreeNode<T> | null,\n\t\tchildren: Iterable<IObjectTreeElement<ICompressedTreeNode<T>>>,\n\t\toptions: IIndexTreeModelSpliceOptions<\n\t\t\tICompressedTreeNode<T>,\n\t\t\tTFilterData\n\t\t>,\n\t): void {\n\t\tconst insertedElements = new Set<T | null>();\n\t\tconst onDidCreateNode = (\n\t\t\tnode: ITreeNode<ICompressedTreeNode<T>, TFilterData>,\n\t\t) => {\n\t\t\tfor (const element of node.element.elements) {\n\t\t\t\tinsertedElements.add(element);\n\t\t\t\tthis.nodes.set(element, node.element);\n\t\t\t}\n\t\t};\n\n\t\tconst onDidDeleteNode = (\n\t\t\tnode: ITreeNode<ICompressedTreeNode<T>, TFilterData>,\n\t\t) => {\n\t\t\tfor (const element of node.element.elements) {\n\t\t\t\tif (!insertedElements.has(element)) {\n\t\t\t\t\tthis.nodes.delete(element);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.model.setChildren(node, children, {\n\t\t\t...options,\n\t\t\tonDidCreateNode,\n\t\t\tonDidDeleteNode,\n\t\t});\n\t}\n\n\thas(element: T | null): boolean {\n\t\treturn this.nodes.has(element);\n\t}\n\n\tgetListIndex(location: T | null): number {\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getListIndex(node);\n\t}\n\n\tgetListRenderCount(location: T | null): number {\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getListRenderCount(node);\n\t}\n\n\tgetNode(\n\t\tlocation?: T | null | undefined,\n\t): ITreeNode<ICompressedTreeNode<T> | null, TFilterData> {\n\t\tif (typeof location === \"undefined\") {\n\t\t\treturn this.model.getNode();\n\t\t}\n\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getNode(node);\n\t}\n\n\t// TODO: review this\n\tgetNodeLocation(\n\t\tnode: ITreeNode<ICompressedTreeNode<T>, TFilterData>,\n\t): T | null {\n\t\tconst compressedNode = this.model.getNodeLocation(node);\n\n\t\tif (compressedNode === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn compressedNode.elements[compressedNode.elements.length - 1];\n\t}\n\n\t// TODO: review this\n\tgetParentNodeLocation(location: T | null): T | null {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tconst parentNode = this.model.getParentNodeLocation(compressedNode);\n\n\t\tif (parentNode === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn parentNode.elements[parentNode.elements.length - 1];\n\t}\n\n\tgetFirstElementChild(\n\t\tlocation: T | null,\n\t): ICompressedTreeNode<T> | null | undefined {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.getFirstElementChild(compressedNode);\n\t}\n\n\tgetLastElementAncestor(\n\t\tlocation?: T | null | undefined,\n\t): ICompressedTreeNode<T> | null | undefined {\n\t\tconst compressedNode =\n\t\t\ttypeof location === \"undefined\"\n\t\t\t\t? undefined\n\t\t\t\t: this.getCompressedNode(location);\n\t\treturn this.model.getLastElementAncestor(compressedNode);\n\t}\n\n\tisCollapsible(location: T | null): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.isCollapsible(compressedNode);\n\t}\n\n\tsetCollapsible(location: T | null, collapsible?: boolean): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.setCollapsible(compressedNode, collapsible);\n\t}\n\n\tisCollapsed(location: T | null): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.isCollapsed(compressedNode);\n\t}\n\n\tsetCollapsed(\n\t\tlocation: T | null,\n\t\tcollapsed?: boolean | undefined,\n\t\trecursive?: boolean | undefined,\n\t): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.setCollapsed(compressedNode, collapsed, recursive);\n\t}\n\n\texpandTo(location: T | null): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.expandTo(compressedNode);\n\t}\n\n\trerender(location: T | null): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.rerender(compressedNode);\n\t}\n\n\trefilter(): void {\n\t\tthis.model.refilter();\n\t}\n\n\tresort(location: T | null = null, recursive = true): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.resort(compressedNode, recursive);\n\t}\n\n\tgetCompressedNode(element: T | null): ICompressedTreeNode<T> | null {\n\t\tif (element === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst node = this.nodes.get(element);\n\n\t\tif (!node) {\n\t\t\tthrow new TreeError(\n\t\t\t\tthis.user,\n\t\t\t\t`Tree element not found: ${element}`,\n\t\t\t);\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n// Compressible Object Tree\n\nexport type ElementMapper<T> = (elements: T[]) => T;\nexport const DefaultElementMapper: ElementMapper<any> = (elements) =>\n\telements[elements.length - 1];\n\nexport type CompressedNodeUnwrapper<T> = (node: ICompressedTreeNode<T>) => T;\ntype CompressedNodeWeakMapper<T, TFilterData> = WeakMapper<\n\tITreeNode<ICompressedTreeNode<T> | null, TFilterData>,\n\tITreeNode<T | null, TFilterData>\n>;\n\nclass CompressedTreeNodeWrapper<T, TFilterData>\n\timplements ITreeNode<T | null, TFilterData>\n{\n\tget element(): T | null {\n\t\treturn this.node.element === null\n\t\t\t? null\n\t\t\t: this.unwrapper(this.node.element);\n\t}\n\tget children(): ITreeNode<T | null, TFilterData>[] {\n\t\treturn this.node.children.map(\n\t\t\t(node) => new CompressedTreeNodeWrapper(this.unwrapper, node),\n\t\t);\n\t}\n\tget depth(): number {\n\t\treturn this.node.depth;\n\t}\n\tget visibleChildrenCount(): number {\n\t\treturn this.node.visibleChildrenCount;\n\t}\n\tget visibleChildIndex(): number {\n\t\treturn this.node.visibleChildIndex;\n\t}\n\tget collapsible(): boolean {\n\t\treturn this.node.collapsible;\n\t}\n\tget collapsed(): boolean {\n\t\treturn this.node.collapsed;\n\t}\n\tget visible(): boolean {\n\t\treturn this.node.visible;\n\t}\n\tget filterData(): TFilterData | undefined {\n\t\treturn this.node.filterData;\n\t}\n\n\tconstructor(\n\t\tprivate unwrapper: CompressedNodeUnwrapper<T>,\n\t\tprivate node: ITreeNode<ICompressedTreeNode<T> | null, TFilterData>,\n\t) {}\n}\n\nfunction mapOptions<T, TFilterData>(\n\tcompressedNodeUnwrapper: CompressedNodeUnwrapper<T>,\n\toptions: ICompressibleObjectTreeModelOptions<T, TFilterData>,\n): ICompressedObjectTreeModelOptions<T, TFilterData> {\n\treturn {\n\t\t...options,\n\t\tidentityProvider: options.identityProvider && {\n\t\t\tgetId(node: ICompressedTreeNode<T>): { toString(): string } {\n\t\t\t\treturn options.identityProvider!.getId(\n\t\t\t\t\tcompressedNodeUnwrapper(node),\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t\tsorter: options.sorter && {\n\t\t\tcompare(\n\t\t\t\tnode: ICompressedTreeNode<T>,\n\t\t\t\totherNode: ICompressedTreeNode<T>,\n\t\t\t): number {\n\t\t\t\treturn options.sorter!.compare(\n\t\t\t\t\tnode.elements[0],\n\t\t\t\t\totherNode.elements[0],\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t\tfilter: options.filter && {\n\t\t\tfilter(\n\t\t\t\tnode: ICompressedTreeNode<T>,\n\t\t\t\tparentVisibility: TreeVisibility,\n\t\t\t): TreeFilterResult<TFilterData> {\n\t\t\t\treturn options.filter!.filter(\n\t\t\t\t\tcompressedNodeUnwrapper(node),\n\t\t\t\t\tparentVisibility,\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t};\n}\n\nexport interface ICompressibleObjectTreeModelOptions<T, TFilterData>\n\textends IObjectTreeModelOptions<T, TFilterData> {\n\treadonly compressionEnabled?: boolean;\n\treadonly elementMapper?: ElementMapper<T>;\n}\n\nexport class CompressibleObjectTreeModel<\n\tT extends NonNullable<any>,\n\tTFilterData extends NonNullable<any> = void,\n> implements IObjectTreeModel<T, TFilterData>\n{\n\treadonly rootRef = null;\n\n\tget onDidSpliceModel(): Event<\n\t\tITreeModelSpliceEvent<T | null, TFilterData>\n\t> {\n\t\treturn Event.map(\n\t\t\tthis.model.onDidSpliceModel,\n\t\t\t({ insertedNodes, deletedNodes }) => ({\n\t\t\t\tinsertedNodes: insertedNodes.map((node) =>\n\t\t\t\t\tthis.nodeMapper.map(node),\n\t\t\t\t),\n\t\t\t\tdeletedNodes: deletedNodes.map((node) =>\n\t\t\t\t\tthis.nodeMapper.map(node),\n\t\t\t\t),\n\t\t\t}),\n\t\t);\n\t}\n\n\tget onDidSpliceRenderedNodes(): Event<\n\t\tITreeListSpliceData<T | null, TFilterData>\n\t> {\n\t\treturn Event.map(\n\t\t\tthis.model.onDidSpliceRenderedNodes,\n\t\t\t({ start, deleteCount, elements }) => ({\n\t\t\t\tstart,\n\t\t\t\tdeleteCount,\n\t\t\t\telements: elements.map((node) => this.nodeMapper.map(node)),\n\t\t\t}),\n\t\t);\n\t}\n\n\tget onDidChangeCollapseState(): Event<\n\t\tICollapseStateChangeEvent<T | null, TFilterData>\n\t> {\n\t\treturn Event.map(\n\t\t\tthis.model.onDidChangeCollapseState,\n\t\t\t({ node, deep }) => ({\n\t\t\t\tnode: this.nodeMapper.map(node),\n\t\t\t\tdeep,\n\t\t\t}),\n\t\t);\n\t}\n\n\tget onDidChangeRenderNodeCount(): Event<ITreeNode<T | null, TFilterData>> {\n\t\treturn Event.map(this.model.onDidChangeRenderNodeCount, (node) =>\n\t\t\tthis.nodeMapper.map(node),\n\t\t);\n\t}\n\n\tprivate elementMapper: ElementMapper<T>;\n\tprivate nodeMapper: CompressedNodeWeakMapper<T, TFilterData>;\n\tprivate model: CompressedObjectTreeModel<T, TFilterData>;\n\n\tconstructor(\n\t\tuser: string,\n\t\toptions: ICompressibleObjectTreeModelOptions<T, TFilterData> = {},\n\t) {\n\t\tthis.elementMapper = options.elementMapper || DefaultElementMapper;\n\t\tconst compressedNodeUnwrapper: CompressedNodeUnwrapper<T> = (node) =>\n\t\t\tthis.elementMapper(node.elements);\n\t\tthis.nodeMapper = new WeakMapper(\n\t\t\t(node) =>\n\t\t\t\tnew CompressedTreeNodeWrapper(compressedNodeUnwrapper, node),\n\t\t);\n\n\t\tthis.model = new CompressedObjectTreeModel(\n\t\t\tuser,\n\t\t\tmapOptions(compressedNodeUnwrapper, options),\n\t\t);\n\t}\n\n\tsetChildren(\n\t\telement: T | null,\n\t\tchildren: Iterable<ICompressedTreeElement<T>> = Iterable.empty(),\n\t\toptions: IObjectTreeModelSetChildrenOptions<T, TFilterData> = {},\n\t): void {\n\t\tthis.model.setChildren(element, children, options);\n\t}\n\n\tisCompressionEnabled(): boolean {\n\t\treturn this.model.isCompressionEnabled();\n\t}\n\n\tsetCompressionEnabled(enabled: boolean): void {\n\t\tthis.model.setCompressionEnabled(enabled);\n\t}\n\n\thas(location: T | null): boolean {\n\t\treturn this.model.has(location);\n\t}\n\n\tgetListIndex(location: T | null): number {\n\t\treturn this.model.getListIndex(location);\n\t}\n\n\tgetListRenderCount(location: T | null): number {\n\t\treturn this.model.getListRenderCount(location);\n\t}\n\n\tgetNode(location?: T | null | undefined): ITreeNode<T | null, any> {\n\t\treturn this.nodeMapper.map(this.model.getNode(location));\n\t}\n\n\tgetNodeLocation(node: ITreeNode<T | null, any>): T | null {\n\t\treturn node.element;\n\t}\n\n\tgetParentNodeLocation(location: T | null): T | null {\n\t\treturn this.model.getParentNodeLocation(location);\n\t}\n\n\tgetFirstElementChild(location: T | null): T | null | undefined {\n\t\tconst result = this.model.getFirstElementChild(location);\n\n\t\tif (result === null || typeof result === \"undefined\") {\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.elementMapper(result.elements);\n\t}\n\n\tgetLastElementAncestor(\n\t\tlocation?: T | null | undefined,\n\t): T | null | undefined {\n\t\tconst result = this.model.getLastElementAncestor(location);\n\n\t\tif (result === null || typeof result === \"undefined\") {\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.elementMapper(result.elements);\n\t}\n\n\tisCollapsible(location: T | null): boolean {\n\t\treturn this.model.isCollapsible(location);\n\t}\n\n\tsetCollapsible(location: T | null, collapsed?: boolean): boolean {\n\t\treturn this.model.setCollapsible(location, collapsed);\n\t}\n\n\tisCollapsed(location: T | null): boolean {\n\t\treturn this.model.isCollapsed(location);\n\t}\n\n\tsetCollapsed(\n\t\tlocation: T | null,\n\t\tcollapsed?: boolean | undefined,\n\t\trecursive?: boolean | undefined,\n\t): boolean {\n\t\treturn this.model.setCollapsed(location, collapsed, recursive);\n\t}\n\n\texpandTo(location: T | null): void {\n\t\treturn this.model.expandTo(location);\n\t}\n\n\trerender(location: T | null): void {\n\t\treturn this.model.rerender(location);\n\t}\n\n\trefilter(): void {\n\t\treturn this.model.refilter();\n\t}\n\n\tresort(element: T | null = null, recursive = true): void {\n\t\treturn this.model.resort(element, recursive);\n\t}\n\n\tgetCompressedTreeNode(\n\t\tlocation: T | null = null,\n\t): ITreeNode<ICompressedTreeNode<T> | null, TFilterData> {\n\t\treturn this.model.getNode(location);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc;AACvB,SAAS,aAAa;AACtB,SAAS,gBAAgB;AAGzB;AAAA,EAIC;AAAA,OACM;AACP;AAAA,EAOC;AAAA,EAGA;AAAA,OACM;AAcP,SAAS,WACR,SACiD;AACjD,QAAM,WAAW,CAAC,QAAQ,OAAO;AACjC,QAAM,iBAAiB,QAAQ,kBAAkB;AAEjD,SAAO;AAAA,IACN,SAAS,EAAE,UAAU,eAAe;AAAA,IACpC,UAAU,SAAS,IAAI,SAAS,KAAK,QAAQ,QAAQ,GAAG,UAAU;AAAA,IAClE,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACpB;AACD;AAZS;AAeF,SAAS,SACf,SACiD;AACjD,QAAM,WAAW,CAAC,QAAQ,OAAO;AACjC,QAAM,iBAAiB,QAAQ,kBAAkB;AAEjD,MAAI;AACJ,MAAI;AAEJ,SAAO,MAAM;AACZ,KAAC,UAAU,gBAAgB,IAAI,SAAS;AAAA,MACvC,SAAS,KAAK,QAAQ,QAAQ;AAAA,MAC9B;AAAA,IACD;AAEA,QAAI,SAAS,WAAW,GAAG;AAC1B;AAAA,IACD;AAEA,QAAI,SAAS,CAAC,EAAE,gBAAgB;AAC/B;AAAA,IACD;AAEA,cAAU,SAAS,CAAC;AACpB,aAAS,KAAK,QAAQ,OAAO;AAAA,EAC9B;AAEA,SAAO;AAAA,IACN,SAAS,EAAE,UAAU,eAAe;AAAA,IACpC,UAAU,SAAS;AAAA,MAClB,SAAS,OAAO,UAAU,gBAAgB;AAAA,MAC1C;AAAA,IACD;AAAA,IACA,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACpB;AACD;AApCgB;AAsChB,SAAS,YACR,SACA,QAAQ,GACoB;AAC5B,MAAI;AAEJ,MAAI,QAAQ,QAAQ,QAAQ,SAAS,SAAS,GAAG;AAChD,eAAW,CAAC,YAAY,SAAS,QAAQ,CAAC,CAAC;AAAA,EAC5C,OAAO;AACN,eAAW,SAAS;AAAA,MAAI,SAAS,KAAK,QAAQ,QAAQ;AAAA,MAAG,CAAC,OACzD,YAAY,IAAI,CAAC;AAAA,IAClB;AAAA,EACD;AAEA,MAAI,UAAU,KAAK,QAAQ,QAAQ,gBAAgB;AAClD,WAAO;AAAA,MACN,SAAS,QAAQ,QAAQ,SAAS,KAAK;AAAA,MACvC;AAAA,MACA,gBAAgB;AAAA,MAChB,aAAa,QAAQ;AAAA,MACrB,WAAW,QAAQ;AAAA,IACpB;AAAA,EACD;AAEA,SAAO;AAAA,IACN,SAAS,QAAQ,QAAQ,SAAS,KAAK;AAAA,IACvC;AAAA,IACA,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACpB;AACD;AA9BS;AAiCF,SAAS,WACf,SAC4B;AAC5B,SAAO,YAAY,SAAS,CAAC;AAC9B;AAJgB;AAMhB,SAAS,OACR,aACA,SACA,UAC4B;AAC5B,MAAI,YAAY,YAAY,SAAS;AACpC,WAAO,EAAE,GAAG,aAAa,SAAS;AAAA,EACnC;AAEA,SAAO;AAAA,IACN,GAAG;AAAA,IACH,UAAU,SAAS;AAAA,MAAI,SAAS,KAAK,YAAY,QAAQ;AAAA,MAAG,CAAC,MAC5D,OAAO,GAAG,SAAS,QAAQ;AAAA,IAC5B;AAAA,EACD;AACD;AAfS;AAsBT,MAAM,uBAAuB,wBAC5B,UACgD;AAAA,EAChD,MAAM,MAAM;AACX,WAAO,KAAK,SAAS,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,EAAE,SAAS,CAAC,EAAE,KAAK,IAAI;AAAA,EACpE;AACD,IAN6B;AAStB,MAAM,0BAIb;AAAA,EAmCC,YACS,MACR,UAA6D,CAAC,GAC7D;AAFO;AAGR,SAAK,QAAQ,IAAI,gBAAgB,MAAM,OAAO;AAC9C,SAAK,UACJ,OAAO,QAAQ,uBAAuB,cACnC,OACA,QAAQ;AACZ,SAAK,mBAAmB,QAAQ;AAAA,EACjC;AAAA,EArND,OAwKA;AAAA;AAAA;AAAA,EACU,UAAU;AAAA,EAEnB,IAAI,2BAEF;AACD,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EACA,IAAI,mBAEF;AACD,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EACA,IAAI,2BAEF;AACD,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EACA,IAAI,6BAEF;AACD,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EAEQ;AAAA,EACA,QAAQ,oBAAI,IAAsC;AAAA,EAClD;AAAA,EACS;AAAA,EAIjB,IAAI,OAAe;AAClB,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EAcA,YACC,SACA,WAAgD,SAAS,MAAM,GAC/D,SACO;AAIP,UAAM,uBACL,QAAQ,wBACR,qBAAqB,QAAQ,oBAAoB;AAClD,QAAI,YAAY,MAAM;AACrB,YAAM,qBAAqB,SAAS;AAAA,QACnC;AAAA,QACA,KAAK,UAAU,WAAW;AAAA,MAC3B;AACA,WAAK,aAAa,MAAM,oBAAoB;AAAA,QAC3C;AAAA,QACA,WAAW,OAAO;AAAA,MACnB,CAAC;AACD;AAAA,IACD;AAEA,UAAM,iBAAiB,KAAK,MAAM,IAAI,OAAO;AAE7C,QAAI,CAAC,gBAAgB;AACpB,YAAM,IAAI,UAAU,KAAK,MAAM,8BAA8B;AAAA,IAC9D;AAEA,UAAM,OAAO,KAAK,MAAM,QAAQ,cAAc;AAI9C,UAAM,uBACL,KAAK,MAAM,sBAAsB,cAAc;AAChD,UAAM,SAAS,KAAK,MAAM,QAAQ,oBAAoB;AAKtD,UAAM,sBAAsB,WAAW,IAAI;AAC3C,UAAM,iBAAiB,OAAO,qBAAqB,SAAS,QAAQ;AACpE,UAAM,uBAAuB,KAAK,UAAU,WAAW;AAAA,MACtD;AAAA,IACD;AAIA,UAAM,oBAAoB,QAAQ,uBAC/B,CAAC,GAAM,MACP,QAAQ,qBAAsB,MAAM,CAAC,MACrC,QAAQ,qBAAsB,MAAM,CAAC,IACrC;AACH,QACC;AAAA,MACC,oBAAoB,QAAQ;AAAA,MAC5B,KAAK,QAAQ;AAAA,MACb;AAAA,IACD,GACC;AACD,WAAK;AAAA,QACJ;AAAA,QACA,oBAAoB,YAAY,SAAS,MAAM;AAAA,QAC/C,EAAE,sBAAsB,WAAW,EAAE;AAAA,MACtC;AACA;AAAA,IACD;AAEA,UAAM,iBAAiB,OAAO,SAAS;AAAA,MAAI,CAAC,UAC3C,UAAU,OAAO,sBAAsB;AAAA,IACxC;AAEA,SAAK,aAAa,OAAO,SAAS,gBAAgB;AAAA,MACjD;AAAA,MACA,WAAW,KAAK,QAAQ,OAAO;AAAA,IAChC,CAAC;AAAA,EACF;AAAA,EAEA,uBAAgC;AAC/B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,sBAAsB,SAAwB;AAC7C,QAAI,YAAY,KAAK,SAAS;AAC7B;AAAA,IACD;AAEA,SAAK,UAAU;AAEf,UAAM,OAAO,KAAK,MAAM,QAAQ;AAChC,UAAM,eAAe,KAAK;AAG1B,UAAM,2BAA2B,SAAS,IAAI,cAAc,UAAU;AACtE,UAAM,2BAA2B,SAAS;AAAA,MACzC;AAAA,MACA,UAAU,WAAW;AAAA,IACtB;AAIA,SAAK,aAAa,MAAM,0BAA0B;AAAA,MACjD,sBAAsB,KAAK;AAAA,MAC3B,WAAW,OAAO;AAAA,IACnB,CAAC;AAAA,EACF;AAAA,EAEQ,aACP,MACA,UACA,SAIO;AACP,UAAM,mBAAmB,oBAAI,IAAc;AAC3C,UAAM,kBAAkB,wBACvBA,UACI;AACJ,iBAAW,WAAWA,MAAK,QAAQ,UAAU;AAC5C,yBAAiB,IAAI,OAAO;AAC5B,aAAK,MAAM,IAAI,SAASA,MAAK,OAAO;AAAA,MACrC;AAAA,IACD,GAPwB;AASxB,UAAM,kBAAkB,wBACvBA,UACI;AACJ,iBAAW,WAAWA,MAAK,QAAQ,UAAU;AAC5C,YAAI,CAAC,iBAAiB,IAAI,OAAO,GAAG;AACnC,eAAK,MAAM,OAAO,OAAO;AAAA,QAC1B;AAAA,MACD;AAAA,IACD,GARwB;AAUxB,SAAK,MAAM,YAAY,MAAM,UAAU;AAAA,MACtC,GAAG;AAAA,MACH;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,IAAI,SAA4B;AAC/B,WAAO,KAAK,MAAM,IAAI,OAAO;AAAA,EAC9B;AAAA,EAEA,aAAa,UAA4B;AACxC,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,aAAa,IAAI;AAAA,EACpC;AAAA,EAEA,mBAAmB,UAA4B;AAC9C,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,mBAAmB,IAAI;AAAA,EAC1C;AAAA,EAEA,QACC,UACwD;AACxD,QAAI,OAAO,aAAa,aAAa;AACpC,aAAO,KAAK,MAAM,QAAQ;AAAA,IAC3B;AAEA,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,QAAQ,IAAI;AAAA,EAC/B;AAAA;AAAA,EAGA,gBACC,MACW;AACX,UAAM,iBAAiB,KAAK,MAAM,gBAAgB,IAAI;AAEtD,QAAI,mBAAmB,MAAM;AAC5B,aAAO;AAAA,IACR;AAEA,WAAO,eAAe,SAAS,eAAe,SAAS,SAAS,CAAC;AAAA,EAClE;AAAA;AAAA,EAGA,sBAAsB,UAA8B;AACnD,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,UAAM,aAAa,KAAK,MAAM,sBAAsB,cAAc;AAElE,QAAI,eAAe,MAAM;AACxB,aAAO;AAAA,IACR;AAEA,WAAO,WAAW,SAAS,WAAW,SAAS,SAAS,CAAC;AAAA,EAC1D;AAAA,EAEA,qBACC,UAC4C;AAC5C,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,qBAAqB,cAAc;AAAA,EACtD;AAAA,EAEA,uBACC,UAC4C;AAC5C,UAAM,iBACL,OAAO,aAAa,cACjB,SACA,KAAK,kBAAkB,QAAQ;AACnC,WAAO,KAAK,MAAM,uBAAuB,cAAc;AAAA,EACxD;AAAA,EAEA,cAAc,UAA6B;AAC1C,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,cAAc,cAAc;AAAA,EAC/C;AAAA,EAEA,eAAe,UAAoB,aAAgC;AAClE,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,eAAe,gBAAgB,WAAW;AAAA,EAC7D;AAAA,EAEA,YAAY,UAA6B;AACxC,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,YAAY,cAAc;AAAA,EAC7C;AAAA,EAEA,aACC,UACA,WACA,WACU;AACV,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,aAAa,gBAAgB,WAAW,SAAS;AAAA,EACpE;AAAA,EAEA,SAAS,UAA0B;AAClC,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,SAAK,MAAM,SAAS,cAAc;AAAA,EACnC;AAAA,EAEA,SAAS,UAA0B;AAClC,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,SAAK,MAAM,SAAS,cAAc;AAAA,EACnC;AAAA,EAEA,WAAiB;AAChB,SAAK,MAAM,SAAS;AAAA,EACrB;AAAA,EAEA,OAAO,WAAqB,MAAM,YAAY,MAAY;AACzD,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,SAAK,MAAM,OAAO,gBAAgB,SAAS;AAAA,EAC5C;AAAA,EAEA,kBAAkB,SAAkD;AACnE,QAAI,YAAY,MAAM;AACrB,aAAO;AAAA,IACR;AAEA,UAAM,OAAO,KAAK,MAAM,IAAI,OAAO;AAEnC,QAAI,CAAC,MAAM;AACV,YAAM,IAAI;AAAA,QACT,KAAK;AAAA,QACL,2BAA2B,OAAO;AAAA,MACnC;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAKO,MAAM,uBAA2C,wBAAC,aACxD,SAAS,SAAS,SAAS,CAAC,GAD2B;AASxD,MAAM,0BAEN;AAAA,EAiCC,YACS,WACA,MACP;AAFO;AACA;AAAA,EACN;AAAA,EAvhBJ,OAmfA;AAAA;AAAA;AAAA,EACC,IAAI,UAAoB;AACvB,WAAO,KAAK,KAAK,YAAY,OAC1B,OACA,KAAK,UAAU,KAAK,KAAK,OAAO;AAAA,EACpC;AAAA,EACA,IAAI,WAA+C;AAClD,WAAO,KAAK,KAAK,SAAS;AAAA,MACzB,CAAC,SAAS,IAAI,0BAA0B,KAAK,WAAW,IAAI;AAAA,IAC7D;AAAA,EACD;AAAA,EACA,IAAI,QAAgB;AACnB,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,uBAA+B;AAClC,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,oBAA4B;AAC/B,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,cAAuB;AAC1B,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,YAAqB;AACxB,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,UAAmB;AACtB,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,aAAsC;AACzC,WAAO,KAAK,KAAK;AAAA,EAClB;AAMD;AAEA,SAAS,WACR,yBACA,SACoD;AACpD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,kBAAkB,QAAQ,oBAAoB;AAAA,MAC7C,MAAM,MAAsD;AAC3D,eAAO,QAAQ,iBAAkB;AAAA,UAChC,wBAAwB,IAAI;AAAA,QAC7B;AAAA,MACD;AAAA,IACD;AAAA,IACA,QAAQ,QAAQ,UAAU;AAAA,MACzB,QACC,MACA,WACS;AACT,eAAO,QAAQ,OAAQ;AAAA,UACtB,KAAK,SAAS,CAAC;AAAA,UACf,UAAU,SAAS,CAAC;AAAA,QACrB;AAAA,MACD;AAAA,IACD;AAAA,IACA,QAAQ,QAAQ,UAAU;AAAA,MACzB,OACC,MACA,kBACgC;AAChC,eAAO,QAAQ,OAAQ;AAAA,UACtB,wBAAwB,IAAI;AAAA,UAC5B;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AApCS;AA4CF,MAAM,4BAIb;AAAA,EA1kBA,OA0kBA;AAAA;AAAA;AAAA,EACU,UAAU;AAAA,EAEnB,IAAI,mBAEF;AACD,WAAO,MAAM;AAAA,MACZ,KAAK,MAAM;AAAA,MACX,CAAC,EAAE,eAAe,aAAa,OAAO;AAAA,QACrC,eAAe,cAAc;AAAA,UAAI,CAAC,SACjC,KAAK,WAAW,IAAI,IAAI;AAAA,QACzB;AAAA,QACA,cAAc,aAAa;AAAA,UAAI,CAAC,SAC/B,KAAK,WAAW,IAAI,IAAI;AAAA,QACzB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,IAAI,2BAEF;AACD,WAAO,MAAM;AAAA,MACZ,KAAK,MAAM;AAAA,MACX,CAAC,EAAE,OAAO,aAAa,SAAS,OAAO;AAAA,QACtC;AAAA,QACA;AAAA,QACA,UAAU,SAAS,IAAI,CAAC,SAAS,KAAK,WAAW,IAAI,IAAI,CAAC;AAAA,MAC3D;AAAA,IACD;AAAA,EACD;AAAA,EAEA,IAAI,2BAEF;AACD,WAAO,MAAM;AAAA,MACZ,KAAK,MAAM;AAAA,MACX,CAAC,EAAE,MAAM,KAAK,OAAO;AAAA,QACpB,MAAM,KAAK,WAAW,IAAI,IAAI;AAAA,QAC9B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,IAAI,6BAAsE;AACzE,WAAO,MAAM;AAAA,MAAI,KAAK,MAAM;AAAA,MAA4B,CAAC,SACxD,KAAK,WAAW,IAAI,IAAI;AAAA,IACzB;AAAA,EACD;AAAA,EAEQ;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACC,MACA,UAA+D,CAAC,GAC/D;AACD,SAAK,gBAAgB,QAAQ,iBAAiB;AAC9C,UAAM,0BAAsD,wBAAC,SAC5D,KAAK,cAAc,KAAK,QAAQ,GAD2B;AAE5D,SAAK,aAAa,IAAI;AAAA,MACrB,CAAC,SACA,IAAI,0BAA0B,yBAAyB,IAAI;AAAA,IAC7D;AAEA,SAAK,QAAQ,IAAI;AAAA,MAChB;AAAA,MACA,WAAW,yBAAyB,OAAO;AAAA,IAC5C;AAAA,EACD;AAAA,EAEA,YACC,SACA,WAAgD,SAAS,MAAM,GAC/D,UAA8D,CAAC,GACxD;AACP,SAAK,MAAM,YAAY,SAAS,UAAU,OAAO;AAAA,EAClD;AAAA,EAEA,uBAAgC;AAC/B,WAAO,KAAK,MAAM,qBAAqB;AAAA,EACxC;AAAA,EAEA,sBAAsB,SAAwB;AAC7C,SAAK,MAAM,sBAAsB,OAAO;AAAA,EACzC;AAAA,EAEA,IAAI,UAA6B;AAChC,WAAO,KAAK,MAAM,IAAI,QAAQ;AAAA,EAC/B;AAAA,EAEA,aAAa,UAA4B;AACxC,WAAO,KAAK,MAAM,aAAa,QAAQ;AAAA,EACxC;AAAA,EAEA,mBAAmB,UAA4B;AAC9C,WAAO,KAAK,MAAM,mBAAmB,QAAQ;AAAA,EAC9C;AAAA,EAEA,QAAQ,UAA2D;AAClE,WAAO,KAAK,WAAW,IAAI,KAAK,MAAM,QAAQ,QAAQ,CAAC;AAAA,EACxD;AAAA,EAEA,gBAAgB,MAA0C;AACzD,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,sBAAsB,UAA8B;AACnD,WAAO,KAAK,MAAM,sBAAsB,QAAQ;AAAA,EACjD;AAAA,EAEA,qBAAqB,UAA0C;AAC9D,UAAM,SAAS,KAAK,MAAM,qBAAqB,QAAQ;AAEvD,QAAI,WAAW,QAAQ,OAAO,WAAW,aAAa;AACrD,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,cAAc,OAAO,QAAQ;AAAA,EAC1C;AAAA,EAEA,uBACC,UACuB;AACvB,UAAM,SAAS,KAAK,MAAM,uBAAuB,QAAQ;AAEzD,QAAI,WAAW,QAAQ,OAAO,WAAW,aAAa;AACrD,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,cAAc,OAAO,QAAQ;AAAA,EAC1C;AAAA,EAEA,cAAc,UAA6B;AAC1C,WAAO,KAAK,MAAM,cAAc,QAAQ;AAAA,EACzC;AAAA,EAEA,eAAe,UAAoB,WAA8B;AAChE,WAAO,KAAK,MAAM,eAAe,UAAU,SAAS;AAAA,EACrD;AAAA,EAEA,YAAY,UAA6B;AACxC,WAAO,KAAK,MAAM,YAAY,QAAQ;AAAA,EACvC;AAAA,EAEA,aACC,UACA,WACA,WACU;AACV,WAAO,KAAK,MAAM,aAAa,UAAU,WAAW,SAAS;AAAA,EAC9D;AAAA,EAEA,SAAS,UAA0B;AAClC,WAAO,KAAK,MAAM,SAAS,QAAQ;AAAA,EACpC;AAAA,EAEA,SAAS,UAA0B;AAClC,WAAO,KAAK,MAAM,SAAS,QAAQ;AAAA,EACpC;AAAA,EAEA,WAAiB;AAChB,WAAO,KAAK,MAAM,SAAS;AAAA,EAC5B;AAAA,EAEA,OAAO,UAAoB,MAAM,YAAY,MAAY;AACxD,WAAO,KAAK,MAAM,OAAO,SAAS,SAAS;AAAA,EAC5C;AAAA,EAEA,sBACC,WAAqB,MACmC;AACxD,WAAO,KAAK,MAAM,QAAQ,QAAQ;AAAA,EACnC;AACD;",
  "names": ["node"]
}
