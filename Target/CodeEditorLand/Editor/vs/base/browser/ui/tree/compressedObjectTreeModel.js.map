{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/tree/compressedObjectTreeModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IIdentityProvider } from '../list/list.js';\nimport { IIndexTreeModelSpliceOptions } from './indexTreeModel.js';\nimport { IObjectTreeModel, IObjectTreeModelOptions, IObjectTreeModelSetChildrenOptions, ObjectTreeModel } from './objectTreeModel.js';\nimport { ICollapseStateChangeEvent, IObjectTreeElement, ITreeListSpliceData, ITreeModel, ITreeModelSpliceEvent, ITreeNode, TreeError, TreeFilterResult, TreeVisibility, WeakMapper } from './tree.js';\nimport { equals } from '../../../common/arrays.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\n\n// Exported only for test reasons, do not use directly\nexport interface ICompressedTreeElement<T> extends IObjectTreeElement<T> {\n\treadonly children?: Iterable<ICompressedTreeElement<T>>;\n\treadonly incompressible?: boolean;\n}\n\n// Exported only for test reasons, do not use directly\nexport interface ICompressedTreeNode<T> {\n\treadonly elements: T[];\n\treadonly incompressible: boolean;\n}\n\nfunction noCompress<T>(element: ICompressedTreeElement<T>): ICompressedTreeElement<ICompressedTreeNode<T>> {\n\tconst elements = [element.element];\n\tconst incompressible = element.incompressible || false;\n\n\treturn {\n\t\telement: { elements, incompressible },\n\t\tchildren: Iterable.map(Iterable.from(element.children), noCompress),\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed\n\t};\n}\n\n// Exported only for test reasons, do not use directly\nexport function compress<T>(element: ICompressedTreeElement<T>): ICompressedTreeElement<ICompressedTreeNode<T>> {\n\tconst elements = [element.element];\n\tconst incompressible = element.incompressible || false;\n\n\tlet childrenIterator: Iterable<ICompressedTreeElement<T>>;\n\tlet children: ICompressedTreeElement<T>[];\n\n\twhile (true) {\n\t\t[children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n\n\t\tif (children.length !== 1) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (children[0].incompressible) {\n\t\t\tbreak;\n\t\t}\n\n\t\telement = children[0];\n\t\telements.push(element.element);\n\t}\n\n\treturn {\n\t\telement: { elements, incompressible },\n\t\tchildren: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed\n\t};\n}\n\nfunction _decompress<T>(element: ICompressedTreeElement<ICompressedTreeNode<T>>, index = 0): ICompressedTreeElement<T> {\n\tlet children: Iterable<ICompressedTreeElement<T>>;\n\n\tif (index < element.element.elements.length - 1) {\n\t\tchildren = [_decompress(element, index + 1)];\n\t} else {\n\t\tchildren = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n\t}\n\n\tif (index === 0 && element.element.incompressible) {\n\t\treturn {\n\t\t\telement: element.element.elements[index],\n\t\t\tchildren,\n\t\t\tincompressible: true,\n\t\t\tcollapsible: element.collapsible,\n\t\t\tcollapsed: element.collapsed\n\t\t};\n\t}\n\n\treturn {\n\t\telement: element.element.elements[index],\n\t\tchildren,\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed\n\t};\n}\n\n// Exported only for test reasons, do not use directly\nexport function decompress<T>(element: ICompressedTreeElement<ICompressedTreeNode<T>>): ICompressedTreeElement<T> {\n\treturn _decompress(element, 0);\n}\n\nfunction splice<T>(treeElement: ICompressedTreeElement<T>, element: T, children: Iterable<ICompressedTreeElement<T>>): ICompressedTreeElement<T> {\n\tif (treeElement.element === element) {\n\t\treturn { ...treeElement, children };\n\t}\n\n\treturn { ...treeElement, children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) };\n}\n\ninterface ICompressedObjectTreeModelOptions<T, TFilterData> extends IObjectTreeModelOptions<ICompressedTreeNode<T>, TFilterData> {\n\treadonly compressionEnabled?: boolean;\n}\n\nconst wrapIdentityProvider = <T>(base: IIdentityProvider<T>): IIdentityProvider<ICompressedTreeNode<T>> => ({\n\tgetId(node) {\n\t\treturn node.elements.map(e => base.getId(e).toString()).join('\\0');\n\t}\n});\n\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel<T extends NonNullable<any>, TFilterData extends NonNullable<any> = void> implements ITreeModel<ICompressedTreeNode<T> | null, TFilterData, T | null> {\n\n\treadonly rootRef = null;\n\n\tget onDidSpliceRenderedNodes(): Event<ITreeListSpliceData<ICompressedTreeNode<T> | null, TFilterData>> { return this.model.onDidSpliceRenderedNodes; }\n\tget onDidSpliceModel(): Event<ITreeModelSpliceEvent<ICompressedTreeNode<T> | null, TFilterData>> { return this.model.onDidSpliceModel; }\n\tget onDidChangeCollapseState(): Event<ICollapseStateChangeEvent<ICompressedTreeNode<T>, TFilterData>> { return this.model.onDidChangeCollapseState; }\n\tget onDidChangeRenderNodeCount(): Event<ITreeNode<ICompressedTreeNode<T>, TFilterData>> { return this.model.onDidChangeRenderNodeCount; }\n\n\tprivate model: ObjectTreeModel<ICompressedTreeNode<T>, TFilterData>;\n\tprivate nodes = new Map<T | null, ICompressedTreeNode<T>>();\n\tprivate enabled: boolean;\n\tprivate readonly identityProvider?: IIdentityProvider<ICompressedTreeNode<T>>;\n\n\tget size(): number { return this.nodes.size; }\n\n\tconstructor(\n\t\tprivate user: string,\n\t\toptions: ICompressedObjectTreeModelOptions<T, TFilterData> = {}\n\t) {\n\t\tthis.model = new ObjectTreeModel(user, options);\n\t\tthis.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n\t\tthis.identityProvider = options.identityProvider;\n\t}\n\n\tsetChildren(\n\t\telement: T | null,\n\t\tchildren: Iterable<ICompressedTreeElement<T>> = Iterable.empty(),\n\t\toptions: IObjectTreeModelSetChildrenOptions<T, TFilterData>,\n\t): void {\n\t\t// Diffs must be deep, since the compression can affect nested elements.\n\t\t// @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n\n\t\tconst diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n\t\tif (element === null) {\n\t\t\tconst compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n\t\t\tthis._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\n\t\t\treturn;\n\t\t}\n\n\t\tconst compressedNode = this.nodes.get(element);\n\n\t\tif (!compressedNode) {\n\t\t\tthrow new TreeError(this.user, 'Unknown compressed tree node');\n\t\t}\n\n\t\tconst node = this.model.getNode(compressedNode) as ITreeNode<ICompressedTreeNode<T>, TFilterData>;\n\t\tconst compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n\t\tconst parent = this.model.getNode(compressedParentNode) as ITreeNode<ICompressedTreeNode<T>, TFilterData>;\n\n\t\tconst decompressedElement = decompress(node);\n\t\tconst splicedElement = splice(decompressedElement, element, children);\n\t\tconst recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n\n\t\t// If the recompressed node is identical to the original, just set its children.\n\t\t// Saves work and churn diffing the parent element.\n\t\tconst elementComparator = options.diffIdentityProvider\n\t\t\t? ((a: T, b: T) => options.diffIdentityProvider!.getId(a) === options.diffIdentityProvider!.getId(b))\n\t\t\t: undefined;\n\t\tif (equals(recompressedElement.element.elements, node.element.elements, elementComparator)) {\n\t\t\tthis._setChildren(compressedNode, recompressedElement.children || Iterable.empty(), { diffIdentityProvider, diffDepth: 1 });\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentChildren = parent.children\n\t\t\t.map(child => child === node ? recompressedElement : child);\n\n\t\tthis._setChildren(parent.element, parentChildren, {\n\t\t\tdiffIdentityProvider,\n\t\t\tdiffDepth: node.depth - parent.depth,\n\t\t});\n\t}\n\n\tisCompressionEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tsetCompressionEnabled(enabled: boolean): void {\n\t\tif (enabled === this.enabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.enabled = enabled;\n\n\t\tconst root = this.model.getNode();\n\t\tconst rootChildren = root.children as ITreeNode<ICompressedTreeNode<T>>[];\n\t\tconst decompressedRootChildren = Iterable.map(rootChildren, decompress);\n\t\tconst recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n\n\t\t// it should be safe to always use deep diff mode here if an identity\n\t\t// provider is available, since we know the raw nodes are unchanged.\n\t\tthis._setChildren(null, recompressedRootChildren, {\n\t\t\tdiffIdentityProvider: this.identityProvider,\n\t\t\tdiffDepth: Infinity,\n\t\t});\n\t}\n\n\tprivate _setChildren(\n\t\tnode: ICompressedTreeNode<T> | null,\n\t\tchildren: Iterable<IObjectTreeElement<ICompressedTreeNode<T>>>,\n\t\toptions: IIndexTreeModelSpliceOptions<ICompressedTreeNode<T>, TFilterData>,\n\t): void {\n\t\tconst insertedElements = new Set<T | null>();\n\t\tconst onDidCreateNode = (node: ITreeNode<ICompressedTreeNode<T>, TFilterData>) => {\n\t\t\tfor (const element of node.element.elements) {\n\t\t\t\tinsertedElements.add(element);\n\t\t\t\tthis.nodes.set(element, node.element);\n\t\t\t}\n\t\t};\n\n\t\tconst onDidDeleteNode = (node: ITreeNode<ICompressedTreeNode<T>, TFilterData>) => {\n\t\t\tfor (const element of node.element.elements) {\n\t\t\t\tif (!insertedElements.has(element)) {\n\t\t\t\t\tthis.nodes.delete(element);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.model.setChildren(node, children, { ...options, onDidCreateNode, onDidDeleteNode });\n\t}\n\n\thas(element: T | null): boolean {\n\t\treturn this.nodes.has(element);\n\t}\n\n\tgetListIndex(location: T | null): number {\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getListIndex(node);\n\t}\n\n\tgetListRenderCount(location: T | null): number {\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getListRenderCount(node);\n\t}\n\n\tgetNode(location?: T | null | undefined): ITreeNode<ICompressedTreeNode<T> | null, TFilterData> {\n\t\tif (typeof location === 'undefined') {\n\t\t\treturn this.model.getNode();\n\t\t}\n\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getNode(node);\n\t}\n\n\t// TODO: review this\n\tgetNodeLocation(node: ITreeNode<ICompressedTreeNode<T>, TFilterData>): T | null {\n\t\tconst compressedNode = this.model.getNodeLocation(node);\n\n\t\tif (compressedNode === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn compressedNode.elements[compressedNode.elements.length - 1];\n\t}\n\n\t// TODO: review this\n\tgetParentNodeLocation(location: T | null): T | null {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tconst parentNode = this.model.getParentNodeLocation(compressedNode);\n\n\t\tif (parentNode === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn parentNode.elements[parentNode.elements.length - 1];\n\t}\n\n\tgetFirstElementChild(location: T | null): ICompressedTreeNode<T> | null | undefined {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.getFirstElementChild(compressedNode);\n\t}\n\n\tgetLastElementAncestor(location?: T | null | undefined): ICompressedTreeNode<T> | null | undefined {\n\t\tconst compressedNode = typeof location === 'undefined' ? undefined : this.getCompressedNode(location);\n\t\treturn this.model.getLastElementAncestor(compressedNode);\n\t}\n\n\tisCollapsible(location: T | null): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.isCollapsible(compressedNode);\n\t}\n\n\tsetCollapsible(location: T | null, collapsible?: boolean): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.setCollapsible(compressedNode, collapsible);\n\t}\n\n\tisCollapsed(location: T | null): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.isCollapsed(compressedNode);\n\t}\n\n\tsetCollapsed(location: T | null, collapsed?: boolean | undefined, recursive?: boolean | undefined): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.setCollapsed(compressedNode, collapsed, recursive);\n\t}\n\n\texpandTo(location: T | null): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.expandTo(compressedNode);\n\t}\n\n\trerender(location: T | null): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.rerender(compressedNode);\n\t}\n\n\trefilter(): void {\n\t\tthis.model.refilter();\n\t}\n\n\tresort(location: T | null = null, recursive = true): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.resort(compressedNode, recursive);\n\t}\n\n\tgetCompressedNode(element: T | null): ICompressedTreeNode<T> | null {\n\t\tif (element === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst node = this.nodes.get(element);\n\n\t\tif (!node) {\n\t\t\tthrow new TreeError(this.user, `Tree element not found: ${element}`);\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n// Compressible Object Tree\n\nexport type ElementMapper<T> = (elements: T[]) => T;\nexport const DefaultElementMapper: ElementMapper<any> = elements => elements[elements.length - 1];\n\nexport type CompressedNodeUnwrapper<T> = (node: ICompressedTreeNode<T>) => T;\ntype CompressedNodeWeakMapper<T, TFilterData> = WeakMapper<ITreeNode<ICompressedTreeNode<T> | null, TFilterData>, ITreeNode<T | null, TFilterData>>;\n\nclass CompressedTreeNodeWrapper<T, TFilterData> implements ITreeNode<T | null, TFilterData> {\n\n\tget element(): T | null { return this.node.element === null ? null : this.unwrapper(this.node.element); }\n\tget children(): ITreeNode<T | null, TFilterData>[] { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\n\tget depth(): number { return this.node.depth; }\n\tget visibleChildrenCount(): number { return this.node.visibleChildrenCount; }\n\tget visibleChildIndex(): number { return this.node.visibleChildIndex; }\n\tget collapsible(): boolean { return this.node.collapsible; }\n\tget collapsed(): boolean { return this.node.collapsed; }\n\tget visible(): boolean { return this.node.visible; }\n\tget filterData(): TFilterData | undefined { return this.node.filterData; }\n\n\tconstructor(\n\t\tprivate unwrapper: CompressedNodeUnwrapper<T>,\n\t\tprivate node: ITreeNode<ICompressedTreeNode<T> | null, TFilterData>\n\t) { }\n}\n\nfunction mapOptions<T, TFilterData>(compressedNodeUnwrapper: CompressedNodeUnwrapper<T>, options: ICompressibleObjectTreeModelOptions<T, TFilterData>): ICompressedObjectTreeModelOptions<T, TFilterData> {\n\treturn {\n\t\t...options,\n\t\tidentityProvider: options.identityProvider && {\n\t\t\tgetId(node: ICompressedTreeNode<T>): { toString(): string } {\n\t\t\t\treturn options.identityProvider!.getId(compressedNodeUnwrapper(node));\n\t\t\t}\n\t\t},\n\t\tsorter: options.sorter && {\n\t\t\tcompare(node: ICompressedTreeNode<T>, otherNode: ICompressedTreeNode<T>): number {\n\t\t\t\treturn options.sorter!.compare(node.elements[0], otherNode.elements[0]);\n\t\t\t}\n\t\t},\n\t\tfilter: options.filter && {\n\t\t\tfilter(node: ICompressedTreeNode<T>, parentVisibility: TreeVisibility): TreeFilterResult<TFilterData> {\n\t\t\t\treturn options.filter!.filter(compressedNodeUnwrapper(node), parentVisibility);\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport interface ICompressibleObjectTreeModelOptions<T, TFilterData> extends IObjectTreeModelOptions<T, TFilterData> {\n\treadonly compressionEnabled?: boolean;\n\treadonly elementMapper?: ElementMapper<T>;\n}\n\nexport class CompressibleObjectTreeModel<T extends NonNullable<any>, TFilterData extends NonNullable<any> = void> implements IObjectTreeModel<T, TFilterData> {\n\n\treadonly rootRef = null;\n\n\tget onDidSpliceModel(): Event<ITreeModelSpliceEvent<T | null, TFilterData>> {\n\t\treturn Event.map(this.model.onDidSpliceModel, ({ insertedNodes, deletedNodes }) => ({\n\t\t\tinsertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n\t\t\tdeletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\n\t\t}));\n\t}\n\n\tget onDidSpliceRenderedNodes(): Event<ITreeListSpliceData<T | null, TFilterData>> {\n\t\treturn Event.map(this.model.onDidSpliceRenderedNodes, ({ start, deleteCount, elements }) => ({\n\t\t\tstart,\n\t\t\tdeleteCount,\n\t\t\telements: elements.map(node => this.nodeMapper.map(node))\n\t\t}));\n\t}\n\n\tget onDidChangeCollapseState(): Event<ICollapseStateChangeEvent<T | null, TFilterData>> {\n\t\treturn Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\n\t\t\tnode: this.nodeMapper.map(node),\n\t\t\tdeep\n\t\t}));\n\t}\n\n\tget onDidChangeRenderNodeCount(): Event<ITreeNode<T | null, TFilterData>> {\n\t\treturn Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n\t}\n\n\tprivate elementMapper: ElementMapper<T>;\n\tprivate nodeMapper: CompressedNodeWeakMapper<T, TFilterData>;\n\tprivate model: CompressedObjectTreeModel<T, TFilterData>;\n\n\tconstructor(\n\t\tuser: string,\n\t\toptions: ICompressibleObjectTreeModelOptions<T, TFilterData> = {}\n\t) {\n\t\tthis.elementMapper = options.elementMapper || DefaultElementMapper;\n\t\tconst compressedNodeUnwrapper: CompressedNodeUnwrapper<T> = node => this.elementMapper(node.elements);\n\t\tthis.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n\n\t\tthis.model = new CompressedObjectTreeModel(user, mapOptions(compressedNodeUnwrapper, options));\n\t}\n\n\tsetChildren(\n\t\telement: T | null,\n\t\tchildren: Iterable<ICompressedTreeElement<T>> = Iterable.empty(),\n\t\toptions: IObjectTreeModelSetChildrenOptions<T, TFilterData> = {},\n\t): void {\n\t\tthis.model.setChildren(element, children, options);\n\t}\n\n\tisCompressionEnabled(): boolean {\n\t\treturn this.model.isCompressionEnabled();\n\t}\n\n\tsetCompressionEnabled(enabled: boolean): void {\n\t\tthis.model.setCompressionEnabled(enabled);\n\t}\n\n\thas(location: T | null): boolean {\n\t\treturn this.model.has(location);\n\t}\n\n\tgetListIndex(location: T | null): number {\n\t\treturn this.model.getListIndex(location);\n\t}\n\n\tgetListRenderCount(location: T | null): number {\n\t\treturn this.model.getListRenderCount(location);\n\t}\n\n\tgetNode(location?: T | null | undefined): ITreeNode<T | null, any> {\n\t\treturn this.nodeMapper.map(this.model.getNode(location));\n\t}\n\n\tgetNodeLocation(node: ITreeNode<T | null, any>): T | null {\n\t\treturn node.element;\n\t}\n\n\tgetParentNodeLocation(location: T | null): T | null {\n\t\treturn this.model.getParentNodeLocation(location);\n\t}\n\n\tgetFirstElementChild(location: T | null): T | null | undefined {\n\t\tconst result = this.model.getFirstElementChild(location);\n\n\t\tif (result === null || typeof result === 'undefined') {\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.elementMapper(result.elements);\n\t}\n\n\tgetLastElementAncestor(location?: T | null | undefined): T | null | undefined {\n\t\tconst result = this.model.getLastElementAncestor(location);\n\n\t\tif (result === null || typeof result === 'undefined') {\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.elementMapper(result.elements);\n\t}\n\n\tisCollapsible(location: T | null): boolean {\n\t\treturn this.model.isCollapsible(location);\n\t}\n\n\tsetCollapsible(location: T | null, collapsed?: boolean): boolean {\n\t\treturn this.model.setCollapsible(location, collapsed);\n\t}\n\n\tisCollapsed(location: T | null): boolean {\n\t\treturn this.model.isCollapsed(location);\n\t}\n\n\tsetCollapsed(location: T | null, collapsed?: boolean | undefined, recursive?: boolean | undefined): boolean {\n\t\treturn this.model.setCollapsed(location, collapsed, recursive);\n\t}\n\n\texpandTo(location: T | null): void {\n\t\treturn this.model.expandTo(location);\n\t}\n\n\trerender(location: T | null): void {\n\t\treturn this.model.rerender(location);\n\t}\n\n\trefilter(): void {\n\t\treturn this.model.refilter();\n\t}\n\n\tresort(element: T | null = null, recursive = true): void {\n\t\treturn this.model.resort(element, recursive);\n\t}\n\n\tgetCompressedTreeNode(location: T | null = null): ITreeNode<ICompressedTreeNode<T> | null, TFilterData> {\n\t\treturn this.model.getNode(location);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,oCAAoC;AAC7C,SAAS,kBAAkB,yBAAyB,oCAAoC,uBAAuB;AAC/G,SAAS,2BAA2B,oBAAoB,qBAAqB,YAAY,uBAAuB,WAAW,WAAW,kBAAkB,gBAAgB,kBAAkB;AAC1L,SAAS,cAAc;AACvB,SAAS,aAAa;AACtB,SAAS,gBAAgB;AAczB,SAAS,WAAc,SAAoF;AAC1G,QAAM,WAAW,CAAC,QAAQ,OAAO;AACjC,QAAM,iBAAiB,QAAQ,kBAAkB;AAEjD,SAAO;AAAA,IACN,SAAS,EAAE,UAAU,eAAe;AAAA,IACpC,UAAU,SAAS,IAAI,SAAS,KAAK,QAAQ,QAAQ,GAAG,UAAU;AAAA,IAClE,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACpB;AACD;AAVS;AAaF,SAAS,SAAY,SAAoF;AAC/G,QAAM,WAAW,CAAC,QAAQ,OAAO;AACjC,QAAM,iBAAiB,QAAQ,kBAAkB;AAEjD,MAAI;AACJ,MAAI;AAEJ,SAAO,MAAM;AACZ,KAAC,UAAU,gBAAgB,IAAI,SAAS,QAAQ,SAAS,KAAK,QAAQ,QAAQ,GAAG,CAAC;AAElF,QAAI,SAAS,WAAW,GAAG;AAC1B;AAAA,IACD;AAEA,QAAI,SAAS,CAAC,EAAE,gBAAgB;AAC/B;AAAA,IACD;AAEA,cAAU,SAAS,CAAC;AACpB,aAAS,KAAK,QAAQ,OAAO;AAAA,EAC9B;AAEA,SAAO;AAAA,IACN,SAAS,EAAE,UAAU,eAAe;AAAA,IACpC,UAAU,SAAS,IAAI,SAAS,OAAO,UAAU,gBAAgB,GAAG,QAAQ;AAAA,IAC5E,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACpB;AACD;AA5BgB;AA8BhB,SAAS,YAAe,SAAyD,QAAQ,GAA8B;AACtH,MAAI;AAEJ,MAAI,QAAQ,QAAQ,QAAQ,SAAS,SAAS,GAAG;AAChD,eAAW,CAAC,YAAY,SAAS,QAAQ,CAAC,CAAC;AAAA,EAC5C,OAAO;AACN,eAAW,SAAS,IAAI,SAAS,KAAK,QAAQ,QAAQ,GAAG,QAAM,YAAY,IAAI,CAAC,CAAC;AAAA,EAClF;AAEA,MAAI,UAAU,KAAK,QAAQ,QAAQ,gBAAgB;AAClD,WAAO;AAAA,MACN,SAAS,QAAQ,QAAQ,SAAS,KAAK;AAAA,MACvC;AAAA,MACA,gBAAgB;AAAA,MAChB,aAAa,QAAQ;AAAA,MACrB,WAAW,QAAQ;AAAA,IACpB;AAAA,EACD;AAEA,SAAO;AAAA,IACN,SAAS,QAAQ,QAAQ,SAAS,KAAK;AAAA,IACvC;AAAA,IACA,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACpB;AACD;AAzBS;AA4BF,SAAS,WAAc,SAAoF;AACjH,SAAO,YAAY,SAAS,CAAC;AAC9B;AAFgB;AAIhB,SAAS,OAAU,aAAwC,SAAY,UAA0E;AAChJ,MAAI,YAAY,YAAY,SAAS;AACpC,WAAO,EAAE,GAAG,aAAa,SAAS;AAAA,EACnC;AAEA,SAAO,EAAE,GAAG,aAAa,UAAU,SAAS,IAAI,SAAS,KAAK,YAAY,QAAQ,GAAG,OAAK,OAAO,GAAG,SAAS,QAAQ,CAAC,EAAE;AACzH;AANS;AAYT,MAAM,uBAAuB,wBAAI,UAA2E;AAAA,EAC3G,MAAM,MAAM;AACX,WAAO,KAAK,SAAS,IAAI,OAAK,KAAK,MAAM,CAAC,EAAE,SAAS,CAAC,EAAE,KAAK,IAAI;AAAA,EAClE;AACD,IAJ6B;AAOtB,MAAM,0BAA+K;AAAA,EAgB3L,YACS,MACR,UAA6D,CAAC,GAC7D;AAFO;AAGR,SAAK,QAAQ,IAAI,gBAAgB,MAAM,OAAO;AAC9C,SAAK,UAAU,OAAO,QAAQ,uBAAuB,cAAc,OAAO,QAAQ;AAClF,SAAK,mBAAmB,QAAQ;AAAA,EACjC;AAAA,EA9ID,OAuH4L;AAAA;AAAA;AAAA,EAElL,UAAU;AAAA,EAEnB,IAAI,2BAAmG;AAAE,WAAO,KAAK,MAAM;AAAA,EAA0B;AAAA,EACrJ,IAAI,mBAA6F;AAAE,WAAO,KAAK,MAAM;AAAA,EAAkB;AAAA,EACvI,IAAI,2BAAkG;AAAE,WAAO,KAAK,MAAM;AAAA,EAA0B;AAAA,EACpJ,IAAI,6BAAoF;AAAE,WAAO,KAAK,MAAM;AAAA,EAA4B;AAAA,EAEhI;AAAA,EACA,QAAQ,oBAAI,IAAsC;AAAA,EAClD;AAAA,EACS;AAAA,EAEjB,IAAI,OAAe;AAAE,WAAO,KAAK,MAAM;AAAA,EAAM;AAAA,EAW7C,YACC,SACA,WAAgD,SAAS,MAAM,GAC/D,SACO;AAIP,UAAM,uBAAuB,QAAQ,wBAAwB,qBAAqB,QAAQ,oBAAoB;AAC9G,QAAI,YAAY,MAAM;AACrB,YAAM,qBAAqB,SAAS,IAAI,UAAU,KAAK,UAAU,WAAW,UAAU;AACtF,WAAK,aAAa,MAAM,oBAAoB,EAAE,sBAAsB,WAAW,SAAS,CAAC;AACzF;AAAA,IACD;AAEA,UAAM,iBAAiB,KAAK,MAAM,IAAI,OAAO;AAE7C,QAAI,CAAC,gBAAgB;AACpB,YAAM,IAAI,UAAU,KAAK,MAAM,8BAA8B;AAAA,IAC9D;AAEA,UAAM,OAAO,KAAK,MAAM,QAAQ,cAAc;AAC9C,UAAM,uBAAuB,KAAK,MAAM,sBAAsB,cAAc;AAC5E,UAAM,SAAS,KAAK,MAAM,QAAQ,oBAAoB;AAEtD,UAAM,sBAAsB,WAAW,IAAI;AAC3C,UAAM,iBAAiB,OAAO,qBAAqB,SAAS,QAAQ;AACpE,UAAM,uBAAuB,KAAK,UAAU,WAAW,YAAY,cAAc;AAIjF,UAAM,oBAAoB,QAAQ,uBAC9B,CAAC,GAAM,MAAS,QAAQ,qBAAsB,MAAM,CAAC,MAAM,QAAQ,qBAAsB,MAAM,CAAC,IACjG;AACH,QAAI,OAAO,oBAAoB,QAAQ,UAAU,KAAK,QAAQ,UAAU,iBAAiB,GAAG;AAC3F,WAAK,aAAa,gBAAgB,oBAAoB,YAAY,SAAS,MAAM,GAAG,EAAE,sBAAsB,WAAW,EAAE,CAAC;AAC1H;AAAA,IACD;AAEA,UAAM,iBAAiB,OAAO,SAC5B,IAAI,WAAS,UAAU,OAAO,sBAAsB,KAAK;AAE3D,SAAK,aAAa,OAAO,SAAS,gBAAgB;AAAA,MACjD;AAAA,MACA,WAAW,KAAK,QAAQ,OAAO;AAAA,IAChC,CAAC;AAAA,EACF;AAAA,EAEA,uBAAgC;AAC/B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,sBAAsB,SAAwB;AAC7C,QAAI,YAAY,KAAK,SAAS;AAC7B;AAAA,IACD;AAEA,SAAK,UAAU;AAEf,UAAM,OAAO,KAAK,MAAM,QAAQ;AAChC,UAAM,eAAe,KAAK;AAC1B,UAAM,2BAA2B,SAAS,IAAI,cAAc,UAAU;AACtE,UAAM,2BAA2B,SAAS,IAAI,0BAA0B,UAAU,WAAW,UAAU;AAIvG,SAAK,aAAa,MAAM,0BAA0B;AAAA,MACjD,sBAAsB,KAAK;AAAA,MAC3B,WAAW;AAAA,IACZ,CAAC;AAAA,EACF;AAAA,EAEQ,aACP,MACA,UACA,SACO;AACP,UAAM,mBAAmB,oBAAI,IAAc;AAC3C,UAAM,kBAAkB,wBAACA,UAAyD;AACjF,iBAAW,WAAWA,MAAK,QAAQ,UAAU;AAC5C,yBAAiB,IAAI,OAAO;AAC5B,aAAK,MAAM,IAAI,SAASA,MAAK,OAAO;AAAA,MACrC;AAAA,IACD,GALwB;AAOxB,UAAM,kBAAkB,wBAACA,UAAyD;AACjF,iBAAW,WAAWA,MAAK,QAAQ,UAAU;AAC5C,YAAI,CAAC,iBAAiB,IAAI,OAAO,GAAG;AACnC,eAAK,MAAM,OAAO,OAAO;AAAA,QAC1B;AAAA,MACD;AAAA,IACD,GANwB;AAQxB,SAAK,MAAM,YAAY,MAAM,UAAU,EAAE,GAAG,SAAS,iBAAiB,gBAAgB,CAAC;AAAA,EACxF;AAAA,EAEA,IAAI,SAA4B;AAC/B,WAAO,KAAK,MAAM,IAAI,OAAO;AAAA,EAC9B;AAAA,EAEA,aAAa,UAA4B;AACxC,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,aAAa,IAAI;AAAA,EACpC;AAAA,EAEA,mBAAmB,UAA4B;AAC9C,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,mBAAmB,IAAI;AAAA,EAC1C;AAAA,EAEA,QAAQ,UAAwF;AAC/F,QAAI,OAAO,aAAa,aAAa;AACpC,aAAO,KAAK,MAAM,QAAQ;AAAA,IAC3B;AAEA,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,QAAQ,IAAI;AAAA,EAC/B;AAAA;AAAA,EAGA,gBAAgB,MAAgE;AAC/E,UAAM,iBAAiB,KAAK,MAAM,gBAAgB,IAAI;AAEtD,QAAI,mBAAmB,MAAM;AAC5B,aAAO;AAAA,IACR;AAEA,WAAO,eAAe,SAAS,eAAe,SAAS,SAAS,CAAC;AAAA,EAClE;AAAA;AAAA,EAGA,sBAAsB,UAA8B;AACnD,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,UAAM,aAAa,KAAK,MAAM,sBAAsB,cAAc;AAElE,QAAI,eAAe,MAAM;AACxB,aAAO;AAAA,IACR;AAEA,WAAO,WAAW,SAAS,WAAW,SAAS,SAAS,CAAC;AAAA,EAC1D;AAAA,EAEA,qBAAqB,UAA+D;AACnF,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,qBAAqB,cAAc;AAAA,EACtD;AAAA,EAEA,uBAAuB,UAA4E;AAClG,UAAM,iBAAiB,OAAO,aAAa,cAAc,SAAY,KAAK,kBAAkB,QAAQ;AACpG,WAAO,KAAK,MAAM,uBAAuB,cAAc;AAAA,EACxD;AAAA,EAEA,cAAc,UAA6B;AAC1C,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,cAAc,cAAc;AAAA,EAC/C;AAAA,EAEA,eAAe,UAAoB,aAAgC;AAClE,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,eAAe,gBAAgB,WAAW;AAAA,EAC7D;AAAA,EAEA,YAAY,UAA6B;AACxC,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,YAAY,cAAc;AAAA,EAC7C;AAAA,EAEA,aAAa,UAAoB,WAAiC,WAA0C;AAC3G,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,aAAa,gBAAgB,WAAW,SAAS;AAAA,EACpE;AAAA,EAEA,SAAS,UAA0B;AAClC,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,SAAK,MAAM,SAAS,cAAc;AAAA,EACnC;AAAA,EAEA,SAAS,UAA0B;AAClC,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,SAAK,MAAM,SAAS,cAAc;AAAA,EACnC;AAAA,EAEA,WAAiB;AAChB,SAAK,MAAM,SAAS;AAAA,EACrB;AAAA,EAEA,OAAO,WAAqB,MAAM,YAAY,MAAY;AACzD,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,SAAK,MAAM,OAAO,gBAAgB,SAAS;AAAA,EAC5C;AAAA,EAEA,kBAAkB,SAAkD;AACnE,QAAI,YAAY,MAAM;AACrB,aAAO;AAAA,IACR;AAEA,UAAM,OAAO,KAAK,MAAM,IAAI,OAAO;AAEnC,QAAI,CAAC,MAAM;AACV,YAAM,IAAI,UAAU,KAAK,MAAM,2BAA2B,OAAO,EAAE;AAAA,IACpE;AAEA,WAAO;AAAA,EACR;AACD;AAKO,MAAM,uBAA2C,qCAAY,SAAS,SAAS,SAAS,CAAC,GAAxC;AAKxD,MAAM,0BAAsF;AAAA,EAY3F,YACS,WACA,MACP;AAFO;AACA;AAAA,EACL;AAAA,EArXL,OAsW4F;AAAA;AAAA;AAAA,EAE3F,IAAI,UAAoB;AAAE,WAAO,KAAK,KAAK,YAAY,OAAO,OAAO,KAAK,UAAU,KAAK,KAAK,OAAO;AAAA,EAAG;AAAA,EACxG,IAAI,WAA+C;AAAE,WAAO,KAAK,KAAK,SAAS,IAAI,UAAQ,IAAI,0BAA0B,KAAK,WAAW,IAAI,CAAC;AAAA,EAAG;AAAA,EACjJ,IAAI,QAAgB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAO;AAAA,EAC9C,IAAI,uBAA+B;AAAE,WAAO,KAAK,KAAK;AAAA,EAAsB;AAAA,EAC5E,IAAI,oBAA4B;AAAE,WAAO,KAAK,KAAK;AAAA,EAAmB;AAAA,EACtE,IAAI,cAAuB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EAC3D,IAAI,YAAqB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAW;AAAA,EACvD,IAAI,UAAmB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAS;AAAA,EACnD,IAAI,aAAsC;AAAE,WAAO,KAAK,KAAK;AAAA,EAAY;AAM1E;AAEA,SAAS,WAA2B,yBAAqD,SAAiH;AACzM,SAAO;AAAA,IACN,GAAG;AAAA,IACH,kBAAkB,QAAQ,oBAAoB;AAAA,MAC7C,MAAM,MAAsD;AAC3D,eAAO,QAAQ,iBAAkB,MAAM,wBAAwB,IAAI,CAAC;AAAA,MACrE;AAAA,IACD;AAAA,IACA,QAAQ,QAAQ,UAAU;AAAA,MACzB,QAAQ,MAA8B,WAA2C;AAChF,eAAO,QAAQ,OAAQ,QAAQ,KAAK,SAAS,CAAC,GAAG,UAAU,SAAS,CAAC,CAAC;AAAA,MACvE;AAAA,IACD;AAAA,IACA,QAAQ,QAAQ,UAAU;AAAA,MACzB,OAAO,MAA8B,kBAAiE;AACrG,eAAO,QAAQ,OAAQ,OAAO,wBAAwB,IAAI,GAAG,gBAAgB;AAAA,MAC9E;AAAA,IACD;AAAA,EACD;AACD;AAnBS;AA0BF,MAAM,4BAAiJ;AAAA,EAlZ9J,OAkZ8J;AAAA;AAAA;AAAA,EAEpJ,UAAU;AAAA,EAEnB,IAAI,mBAAwE;AAC3E,WAAO,MAAM,IAAI,KAAK,MAAM,kBAAkB,CAAC,EAAE,eAAe,aAAa,OAAO;AAAA,MACnF,eAAe,cAAc,IAAI,UAAQ,KAAK,WAAW,IAAI,IAAI,CAAC;AAAA,MAClE,cAAc,aAAa,IAAI,UAAQ,KAAK,WAAW,IAAI,IAAI,CAAC;AAAA,IACjE,EAAE;AAAA,EACH;AAAA,EAEA,IAAI,2BAA8E;AACjF,WAAO,MAAM,IAAI,KAAK,MAAM,0BAA0B,CAAC,EAAE,OAAO,aAAa,SAAS,OAAO;AAAA,MAC5F;AAAA,MACA;AAAA,MACA,UAAU,SAAS,IAAI,UAAQ,KAAK,WAAW,IAAI,IAAI,CAAC;AAAA,IACzD,EAAE;AAAA,EACH;AAAA,EAEA,IAAI,2BAAoF;AACvF,WAAO,MAAM,IAAI,KAAK,MAAM,0BAA0B,CAAC,EAAE,MAAM,KAAK,OAAO;AAAA,MAC1E,MAAM,KAAK,WAAW,IAAI,IAAI;AAAA,MAC9B;AAAA,IACD,EAAE;AAAA,EACH;AAAA,EAEA,IAAI,6BAAsE;AACzE,WAAO,MAAM,IAAI,KAAK,MAAM,4BAA4B,UAAQ,KAAK,WAAW,IAAI,IAAI,CAAC;AAAA,EAC1F;AAAA,EAEQ;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACC,MACA,UAA+D,CAAC,GAC/D;AACD,SAAK,gBAAgB,QAAQ,iBAAiB;AAC9C,UAAM,0BAAsD,iCAAQ,KAAK,cAAc,KAAK,QAAQ,GAAxC;AAC5D,SAAK,aAAa,IAAI,WAAW,UAAQ,IAAI,0BAA0B,yBAAyB,IAAI,CAAC;AAErG,SAAK,QAAQ,IAAI,0BAA0B,MAAM,WAAW,yBAAyB,OAAO,CAAC;AAAA,EAC9F;AAAA,EAEA,YACC,SACA,WAAgD,SAAS,MAAM,GAC/D,UAA8D,CAAC,GACxD;AACP,SAAK,MAAM,YAAY,SAAS,UAAU,OAAO;AAAA,EAClD;AAAA,EAEA,uBAAgC;AAC/B,WAAO,KAAK,MAAM,qBAAqB;AAAA,EACxC;AAAA,EAEA,sBAAsB,SAAwB;AAC7C,SAAK,MAAM,sBAAsB,OAAO;AAAA,EACzC;AAAA,EAEA,IAAI,UAA6B;AAChC,WAAO,KAAK,MAAM,IAAI,QAAQ;AAAA,EAC/B;AAAA,EAEA,aAAa,UAA4B;AACxC,WAAO,KAAK,MAAM,aAAa,QAAQ;AAAA,EACxC;AAAA,EAEA,mBAAmB,UAA4B;AAC9C,WAAO,KAAK,MAAM,mBAAmB,QAAQ;AAAA,EAC9C;AAAA,EAEA,QAAQ,UAA2D;AAClE,WAAO,KAAK,WAAW,IAAI,KAAK,MAAM,QAAQ,QAAQ,CAAC;AAAA,EACxD;AAAA,EAEA,gBAAgB,MAA0C;AACzD,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,sBAAsB,UAA8B;AACnD,WAAO,KAAK,MAAM,sBAAsB,QAAQ;AAAA,EACjD;AAAA,EAEA,qBAAqB,UAA0C;AAC9D,UAAM,SAAS,KAAK,MAAM,qBAAqB,QAAQ;AAEvD,QAAI,WAAW,QAAQ,OAAO,WAAW,aAAa;AACrD,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,cAAc,OAAO,QAAQ;AAAA,EAC1C;AAAA,EAEA,uBAAuB,UAAuD;AAC7E,UAAM,SAAS,KAAK,MAAM,uBAAuB,QAAQ;AAEzD,QAAI,WAAW,QAAQ,OAAO,WAAW,aAAa;AACrD,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,cAAc,OAAO,QAAQ;AAAA,EAC1C;AAAA,EAEA,cAAc,UAA6B;AAC1C,WAAO,KAAK,MAAM,cAAc,QAAQ;AAAA,EACzC;AAAA,EAEA,eAAe,UAAoB,WAA8B;AAChE,WAAO,KAAK,MAAM,eAAe,UAAU,SAAS;AAAA,EACrD;AAAA,EAEA,YAAY,UAA6B;AACxC,WAAO,KAAK,MAAM,YAAY,QAAQ;AAAA,EACvC;AAAA,EAEA,aAAa,UAAoB,WAAiC,WAA0C;AAC3G,WAAO,KAAK,MAAM,aAAa,UAAU,WAAW,SAAS;AAAA,EAC9D;AAAA,EAEA,SAAS,UAA0B;AAClC,WAAO,KAAK,MAAM,SAAS,QAAQ;AAAA,EACpC;AAAA,EAEA,SAAS,UAA0B;AAClC,WAAO,KAAK,MAAM,SAAS,QAAQ;AAAA,EACpC;AAAA,EAEA,WAAiB;AAChB,WAAO,KAAK,MAAM,SAAS;AAAA,EAC5B;AAAA,EAEA,OAAO,UAAoB,MAAM,YAAY,MAAY;AACxD,WAAO,KAAK,MAAM,OAAO,SAAS,SAAS;AAAA,EAC5C;AAAA,EAEA,sBAAsB,WAAqB,MAA6D;AACvG,WAAO,KAAK,MAAM,QAAQ,QAAQ;AAAA,EACnC;AACD;",
  "names": ["node"]
}
