{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/tree/abstractTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../common/actions.js\";\nimport { distinct, equals, range } from \"../../../common/arrays.js\";\nimport { Delayer, disposableTimeout, timeout } from \"../../../common/async.js\";\nimport { Codicon } from \"../../../common/codicons.js\";\nimport { Emitter, Event, EventBufferer, Relay } from \"../../../common/event.js\";\nimport { FuzzyScore, fuzzyScore } from \"../../../common/filters.js\";\nimport { KeyCode } from \"../../../common/keyCodes.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../common/lifecycle.js\";\nimport { SetMap } from \"../../../common/map.js\";\nimport { clamp } from \"../../../common/numbers.js\";\nimport type { ScrollEvent } from \"../../../common/scrollable.js\";\nimport { ThemeIcon } from \"../../../common/themables.js\";\nimport { isNumber } from \"../../../common/types.js\";\nimport type { IDragAndDropData } from \"../../dnd.js\";\nimport {\n\t$,\n\taddDisposableListener,\n\tappend,\n\tasCssValueWithDefault,\n\tclearNode,\n\tcreateStyleSheet,\n\tgetWindow,\n\th,\n\thasParentWithClass,\n\tisActiveElement,\n\tisEditableElement,\n\tisKeyboardEvent,\n} from \"../../dom.js\";\nimport { DomEmitter } from \"../../event.js\";\nimport { StandardKeyboardEvent } from \"../../keyboardEvent.js\";\nimport { ActionBar } from \"../actionbar/actionbar.js\";\nimport type { IContextViewProvider } from \"../contextview/contextview.js\";\nimport { FindInput } from \"../findinput/findInput.js\";\nimport {\n\ttype IInputBoxStyles,\n\ttype IMessage,\n\tMessageType,\n\tunthemedInboxStyles,\n} from \"../inputbox/inputBox.js\";\nimport type {\n\tIIdentityProvider,\n\tIKeyboardNavigationLabelProvider,\n\tIListContextMenuEvent,\n\tIListDragAndDrop,\n\tIListDragOverReaction,\n\tIListMouseEvent,\n\tIListRenderer,\n\tIListTouchEvent,\n\tIListVirtualDelegate,\n} from \"../list/list.js\";\nimport {\n\tElementsDragAndDropData,\n\ttype ListViewTargetSector,\n} from \"../list/listView.js\";\nimport {\n\ttype IListAccessibilityProvider,\n\ttype IListOptions,\n\ttype IListStyles,\n\tList,\n\tMouseController,\n\ttype TypeNavigationMode,\n\tisActionItem,\n\tisButton,\n\tisMonacoCustomToggle,\n\tisMonacoEditor,\n\tisStickyScrollContainer,\n\tisStickyScrollElement,\n} from \"../list/listWidget.js\";\nimport {\n\ttype IToggleStyles,\n\tToggle,\n\tunthemedToggleStyles,\n} from \"../toggle/toggle.js\";\nimport { getVisibleState, isFilterResult } from \"./indexTreeModel.js\";\nimport {\n\ttype ICollapseStateChangeEvent,\n\ttype ITreeContextMenuEvent,\n\ttype ITreeDragAndDrop,\n\ttype ITreeEvent,\n\ttype ITreeFilter,\n\ttype ITreeModel,\n\ttype ITreeModelSpliceEvent,\n\ttype ITreeMouseEvent,\n\ttype ITreeNavigator,\n\ttype ITreeNode,\n\ttype ITreeRenderer,\n\tTreeDragOverBubble,\n\tTreeError,\n\ttype TreeFilterResult,\n\tTreeMouseEventTarget,\n\tTreeVisibility,\n} from \"./tree.js\";\nimport \"./media/tree.css\";\nimport { localize } from \"../../../../nls.js\";\nimport { autorun, constObservable } from \"../../../common/observable.js\";\nimport { alert } from \"../aria/aria.js\";\nimport type { IHoverDelegate } from \"../hover/hoverDelegate.js\";\nimport {\n\tcreateInstantHoverDelegate,\n\tgetDefaultHoverDelegate,\n} from \"../hover/hoverDelegateFactory.js\";\n\nclass TreeElementsDragAndDropData<\n\tT,\n\tTFilterData,\n\tTContext,\n> extends ElementsDragAndDropData<T, TContext> {\n\toverride set context(context: TContext | undefined) {\n\t\tthis.data.context = context;\n\t}\n\n\toverride get context(): TContext | undefined {\n\t\treturn this.data.context;\n\t}\n\n\tconstructor(\n\t\tprivate data: ElementsDragAndDropData<\n\t\t\tITreeNode<T, TFilterData>,\n\t\t\tTContext\n\t\t>,\n\t) {\n\t\tsuper(data.elements.map((node) => node.element));\n\t}\n}\n\nfunction asTreeDragAndDropData<T, TFilterData>(\n\tdata: IDragAndDropData,\n): IDragAndDropData {\n\tif (data instanceof ElementsDragAndDropData) {\n\t\treturn new TreeElementsDragAndDropData(data);\n\t}\n\n\treturn data;\n}\n\nclass TreeNodeListDragAndDrop<T, TFilterData, TRef>\n\timplements IListDragAndDrop<ITreeNode<T, TFilterData>>\n{\n\tprivate autoExpandNode: ITreeNode<T, TFilterData> | undefined;\n\tprivate autoExpandDisposable: IDisposable = Disposable.None;\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\tprivate modelProvider: () => ITreeModel<T, TFilterData, TRef>,\n\t\tprivate dnd: ITreeDragAndDrop<T>,\n\t) {}\n\n\tgetDragURI(node: ITreeNode<T, TFilterData>): string | null {\n\t\treturn this.dnd.getDragURI(node.element);\n\t}\n\n\tgetDragLabel(\n\t\tnodes: ITreeNode<T, TFilterData>[],\n\t\toriginalEvent: DragEvent,\n\t): string | undefined {\n\t\tif (this.dnd.getDragLabel) {\n\t\t\treturn this.dnd.getDragLabel(\n\t\t\t\tnodes.map((node) => node.element),\n\t\t\t\toriginalEvent,\n\t\t\t);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tonDragStart(data: IDragAndDropData, originalEvent: DragEvent): void {\n\t\tthis.dnd.onDragStart?.(asTreeDragAndDropData(data), originalEvent);\n\t}\n\n\tonDragOver(\n\t\tdata: IDragAndDropData,\n\t\ttargetNode: ITreeNode<T, TFilterData> | undefined,\n\t\ttargetIndex: number | undefined,\n\t\ttargetSector: ListViewTargetSector | undefined,\n\t\toriginalEvent: DragEvent,\n\t\traw = true,\n\t): boolean | IListDragOverReaction {\n\t\tconst result = this.dnd.onDragOver(\n\t\t\tasTreeDragAndDropData(data),\n\t\t\ttargetNode && targetNode.element,\n\t\t\ttargetIndex,\n\t\t\ttargetSector,\n\t\t\toriginalEvent,\n\t\t);\n\t\tconst didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n\n\t\tif (didChangeAutoExpandNode) {\n\t\t\tthis.autoExpandDisposable.dispose();\n\t\t\tthis.autoExpandNode = targetNode;\n\t\t}\n\n\t\tif (typeof targetNode === \"undefined\") {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (\n\t\t\tdidChangeAutoExpandNode &&\n\t\t\ttypeof result !== \"boolean\" &&\n\t\t\tresult.autoExpand\n\t\t) {\n\t\t\tthis.autoExpandDisposable = disposableTimeout(\n\t\t\t\t() => {\n\t\t\t\t\tconst model = this.modelProvider();\n\t\t\t\t\tconst ref = model.getNodeLocation(targetNode);\n\n\t\t\t\t\tif (model.isCollapsed(ref)) {\n\t\t\t\t\t\tmodel.setCollapsed(ref, false);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.autoExpandNode = undefined;\n\t\t\t\t},\n\t\t\t\t500,\n\t\t\t\tthis.disposables,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\ttypeof result === \"boolean\" ||\n\t\t\t!result.accept ||\n\t\t\ttypeof result.bubble === \"undefined\" ||\n\t\t\tresult.feedback\n\t\t) {\n\t\t\tif (!raw) {\n\t\t\t\tconst accept =\n\t\t\t\t\ttypeof result === \"boolean\" ? result : result.accept;\n\t\t\t\tconst effect =\n\t\t\t\t\ttypeof result === \"boolean\" ? undefined : result.effect;\n\t\t\t\treturn { accept, effect, feedback: [targetIndex!] };\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tif (result.bubble === TreeDragOverBubble.Up) {\n\t\t\tconst model = this.modelProvider();\n\t\t\tconst ref = model.getNodeLocation(targetNode);\n\t\t\tconst parentRef = model.getParentNodeLocation(ref);\n\t\t\tconst parentNode = model.getNode(parentRef);\n\t\t\tconst parentIndex = parentRef && model.getListIndex(parentRef);\n\n\t\t\treturn this.onDragOver(\n\t\t\t\tdata,\n\t\t\t\tparentNode,\n\t\t\t\tparentIndex,\n\t\t\t\ttargetSector,\n\t\t\t\toriginalEvent,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t}\n\n\t\tconst model = this.modelProvider();\n\t\tconst ref = model.getNodeLocation(targetNode);\n\t\tconst start = model.getListIndex(ref);\n\t\tconst length = model.getListRenderCount(ref);\n\n\t\treturn { ...result, feedback: range(start, start + length) };\n\t}\n\n\tdrop(\n\t\tdata: IDragAndDropData,\n\t\ttargetNode: ITreeNode<T, TFilterData> | undefined,\n\t\ttargetIndex: number | undefined,\n\t\ttargetSector: ListViewTargetSector | undefined,\n\t\toriginalEvent: DragEvent,\n\t): void {\n\t\tthis.autoExpandDisposable.dispose();\n\t\tthis.autoExpandNode = undefined;\n\n\t\tthis.dnd.drop(\n\t\t\tasTreeDragAndDropData(data),\n\t\t\ttargetNode && targetNode.element,\n\t\t\ttargetIndex,\n\t\t\ttargetSector,\n\t\t\toriginalEvent,\n\t\t);\n\t}\n\n\tonDragEnd(originalEvent: DragEvent): void {\n\t\tthis.dnd.onDragEnd?.(originalEvent);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis.dnd.dispose();\n\t}\n}\n\nfunction asListOptions<T, TFilterData, TRef>(\n\tmodelProvider: () => ITreeModel<T, TFilterData, TRef>,\n\toptions?: IAbstractTreeOptions<T, TFilterData>,\n): IListOptions<ITreeNode<T, TFilterData>> | undefined {\n\treturn (\n\t\toptions && {\n\t\t\t...options,\n\t\t\tidentityProvider: options.identityProvider && {\n\t\t\t\tgetId(el) {\n\t\t\t\t\treturn options.identityProvider!.getId(el.element);\n\t\t\t\t},\n\t\t\t},\n\t\t\tdnd:\n\t\t\t\toptions.dnd &&\n\t\t\t\tnew TreeNodeListDragAndDrop(modelProvider, options.dnd),\n\t\t\tmultipleSelectionController:\n\t\t\t\toptions.multipleSelectionController && {\n\t\t\t\t\tisSelectionSingleChangeEvent(e) {\n\t\t\t\t\t\treturn options.multipleSelectionController!.isSelectionSingleChangeEvent(\n\t\t\t\t\t\t\t{ ...e, element: e.element } as any,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tisSelectionRangeChangeEvent(e) {\n\t\t\t\t\t\treturn options.multipleSelectionController!.isSelectionRangeChangeEvent(\n\t\t\t\t\t\t\t{ ...e, element: e.element } as any,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\taccessibilityProvider: options.accessibilityProvider && {\n\t\t\t\t...options.accessibilityProvider,\n\t\t\t\tgetSetSize(node) {\n\t\t\t\t\tconst model = modelProvider();\n\t\t\t\t\tconst ref = model.getNodeLocation(node);\n\t\t\t\t\tconst parentRef = model.getParentNodeLocation(ref);\n\t\t\t\t\tconst parentNode = model.getNode(parentRef);\n\n\t\t\t\t\treturn parentNode.visibleChildrenCount;\n\t\t\t\t},\n\t\t\t\tgetPosInSet(node) {\n\t\t\t\t\treturn node.visibleChildIndex + 1;\n\t\t\t\t},\n\t\t\t\tisChecked:\n\t\t\t\t\toptions.accessibilityProvider &&\n\t\t\t\t\toptions.accessibilityProvider.isChecked\n\t\t\t\t\t\t? (node) => {\n\t\t\t\t\t\t\t\treturn options.accessibilityProvider!\n\t\t\t\t\t\t\t\t\t.isChecked!(node.element);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\tgetRole:\n\t\t\t\t\toptions.accessibilityProvider &&\n\t\t\t\t\toptions.accessibilityProvider.getRole\n\t\t\t\t\t\t? (node) => {\n\t\t\t\t\t\t\t\treturn options.accessibilityProvider!.getRole!(\n\t\t\t\t\t\t\t\t\tnode.element,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: () => \"treeitem\",\n\t\t\t\tgetAriaLabel(e) {\n\t\t\t\t\treturn options.accessibilityProvider!.getAriaLabel(\n\t\t\t\t\t\te.element,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tgetWidgetAriaLabel() {\n\t\t\t\t\treturn options.accessibilityProvider!.getWidgetAriaLabel();\n\t\t\t\t},\n\t\t\t\tgetWidgetRole:\n\t\t\t\t\toptions.accessibilityProvider &&\n\t\t\t\t\toptions.accessibilityProvider.getWidgetRole\n\t\t\t\t\t\t? () => options.accessibilityProvider!.getWidgetRole!()\n\t\t\t\t\t\t: () => \"tree\",\n\t\t\t\tgetAriaLevel:\n\t\t\t\t\toptions.accessibilityProvider &&\n\t\t\t\t\toptions.accessibilityProvider.getAriaLevel\n\t\t\t\t\t\t? (node) =>\n\t\t\t\t\t\t\t\toptions.accessibilityProvider!.getAriaLevel!(\n\t\t\t\t\t\t\t\t\tnode.element,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: (node) => {\n\t\t\t\t\t\t\t\treturn node.depth;\n\t\t\t\t\t\t\t},\n\t\t\t\tgetActiveDescendantId:\n\t\t\t\t\toptions.accessibilityProvider.getActiveDescendantId &&\n\t\t\t\t\t((node) => {\n\t\t\t\t\t\treturn options.accessibilityProvider!\n\t\t\t\t\t\t\t.getActiveDescendantId!(node.element);\n\t\t\t\t\t}),\n\t\t\t},\n\t\t\tkeyboardNavigationLabelProvider:\n\t\t\t\toptions.keyboardNavigationLabelProvider && {\n\t\t\t\t\t...options.keyboardNavigationLabelProvider,\n\t\t\t\t\tgetKeyboardNavigationLabel(node) {\n\t\t\t\t\t\treturn options.keyboardNavigationLabelProvider!.getKeyboardNavigationLabel(\n\t\t\t\t\t\t\tnode.element,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t}\n\t);\n}\n\nexport class ComposedTreeDelegate<T, N extends { element: T }>\n\timplements IListVirtualDelegate<N>\n{\n\tconstructor(private delegate: IListVirtualDelegate<T>) {}\n\n\tgetHeight(element: N): number {\n\t\treturn this.delegate.getHeight(element.element);\n\t}\n\n\tgetTemplateId(element: N): string {\n\t\treturn this.delegate.getTemplateId(element.element);\n\t}\n\n\thasDynamicHeight(element: N): boolean {\n\t\treturn (\n\t\t\t!!this.delegate.hasDynamicHeight &&\n\t\t\tthis.delegate.hasDynamicHeight(element.element)\n\t\t);\n\t}\n\n\tsetDynamicHeight(element: N, height: number): void {\n\t\tthis.delegate.setDynamicHeight?.(element.element, height);\n\t}\n}\n\ninterface ITreeListTemplateData<T> {\n\treadonly container: HTMLElement;\n\treadonly indent: HTMLElement;\n\treadonly twistie: HTMLElement;\n\tindentGuidesDisposable: IDisposable;\n\treadonly templateData: T;\n}\n\nexport interface IAbstractTreeViewState {\n\treadonly focus: Iterable<string>;\n\treadonly selection: Iterable<string>;\n\treadonly expanded: { [id: string]: 1 | 0 };\n\treadonly scrollTop: number;\n}\n\nexport class AbstractTreeViewState implements IAbstractTreeViewState {\n\tpublic readonly focus: Set<string>;\n\tpublic readonly selection: Set<string>;\n\tpublic readonly expanded: { [id: string]: 1 | 0 };\n\tpublic scrollTop: number;\n\n\tpublic static lift(state: IAbstractTreeViewState) {\n\t\treturn state instanceof AbstractTreeViewState\n\t\t\t? state\n\t\t\t: new AbstractTreeViewState(state);\n\t}\n\n\tpublic static empty(scrollTop = 0) {\n\t\treturn new AbstractTreeViewState({\n\t\t\tfocus: [],\n\t\t\tselection: [],\n\t\t\texpanded: Object.create(null),\n\t\t\tscrollTop,\n\t\t});\n\t}\n\n\tprotected constructor(state: IAbstractTreeViewState) {\n\t\tthis.focus = new Set(state.focus);\n\t\tthis.selection = new Set(state.selection);\n\t\tif (state.expanded instanceof Array) {\n\t\t\t// old format\n\t\t\tthis.expanded = Object.create(null);\n\t\t\tfor (const id of state.expanded as string[]) {\n\t\t\t\tthis.expanded[id] = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.expanded = state.expanded;\n\t\t}\n\t\tthis.expanded = state.expanded;\n\t\tthis.scrollTop = state.scrollTop;\n\t}\n\n\tpublic toJSON(): IAbstractTreeViewState {\n\t\treturn {\n\t\t\tfocus: Array.from(this.focus),\n\t\t\tselection: Array.from(this.selection),\n\t\t\texpanded: this.expanded,\n\t\t\tscrollTop: this.scrollTop,\n\t\t};\n\t}\n}\n\nexport enum RenderIndentGuides {\n\tNone = \"none\",\n\tOnHover = \"onHover\",\n\tAlways = \"always\",\n}\n\ninterface ITreeRendererOptions {\n\treadonly indent?: number;\n\treadonly renderIndentGuides?: RenderIndentGuides;\n\t// TODO@joao replace this with collapsible: boolean | 'ondemand'\n\treadonly hideTwistiesOfChildlessElements?: boolean;\n}\n\ninterface Collection<T> {\n\treadonly elements: T[];\n\treadonly onDidChange: Event<T[]>;\n}\n\nclass EventCollection<T> implements Collection<T>, IDisposable {\n\tprivate readonly disposables = new DisposableStore();\n\treadonly onDidChange: Event<T[]>;\n\n\tget elements(): T[] {\n\t\treturn this._elements;\n\t}\n\n\tconstructor(\n\t\tonDidChange: Event<T[]>,\n\t\tprivate _elements: T[] = [],\n\t) {\n\t\tthis.onDidChange = Event.forEach(\n\t\t\tonDidChange,\n\t\t\t(elements) => (this._elements = elements),\n\t\t\tthis.disposables,\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport class TreeRenderer<T, TFilterData, TRef, TTemplateData>\n\timplements\n\t\tIListRenderer<\n\t\t\tITreeNode<T, TFilterData>,\n\t\t\tITreeListTemplateData<TTemplateData>\n\t\t>\n{\n\tprivate static readonly DefaultIndent = 8;\n\n\treadonly templateId: string;\n\tprivate renderedElements = new Map<T, ITreeNode<T, TFilterData>>();\n\tprivate renderedNodes = new Map<\n\t\tITreeNode<T, TFilterData>,\n\t\tITreeListTemplateData<TTemplateData>\n\t>();\n\tprivate indent: number = TreeRenderer.DefaultIndent;\n\tprivate hideTwistiesOfChildlessElements = false;\n\n\tprivate shouldRenderIndentGuides = false;\n\tprivate activeIndentNodes = new Set<ITreeNode<T, TFilterData>>();\n\tprivate indentGuidesDisposable: IDisposable = Disposable.None;\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\tprivate renderer: ITreeRenderer<T, TFilterData, TTemplateData>,\n\t\tprivate model: ITreeModel<T, TFilterData, TRef>,\n\t\tonDidChangeCollapseState: Event<\n\t\t\tICollapseStateChangeEvent<T, TFilterData>\n\t\t>,\n\t\tprivate activeNodes: Collection<ITreeNode<T, TFilterData>>,\n\t\tprivate renderedIndentGuides: SetMap<\n\t\t\tITreeNode<T, TFilterData>,\n\t\t\tHTMLDivElement\n\t\t>,\n\t\toptions: ITreeRendererOptions = {},\n\t) {\n\t\tthis.templateId = renderer.templateId;\n\t\tthis.updateOptions(options);\n\n\t\tEvent.map(onDidChangeCollapseState, (e) => e.node)(\n\t\t\tthis.onDidChangeNodeTwistieState,\n\t\t\tthis,\n\t\t\tthis.disposables,\n\t\t);\n\t\trenderer.onDidChangeTwistieState?.(\n\t\t\tthis.onDidChangeTwistieState,\n\t\t\tthis,\n\t\t\tthis.disposables,\n\t\t);\n\t}\n\n\tupdateOptions(options: ITreeRendererOptions = {}): void {\n\t\tif (typeof options.indent !== \"undefined\") {\n\t\t\tconst indent = clamp(options.indent, 0, 40);\n\n\t\t\tif (indent !== this.indent) {\n\t\t\t\tthis.indent = indent;\n\n\t\t\t\tfor (const [node, templateData] of this.renderedNodes) {\n\t\t\t\t\tthis.renderTreeElement(node, templateData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof options.renderIndentGuides !== \"undefined\") {\n\t\t\tconst shouldRenderIndentGuides =\n\t\t\t\toptions.renderIndentGuides !== RenderIndentGuides.None;\n\n\t\t\tif (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n\t\t\t\tthis.shouldRenderIndentGuides = shouldRenderIndentGuides;\n\n\t\t\t\tfor (const [node, templateData] of this.renderedNodes) {\n\t\t\t\t\tthis._renderIndentGuides(node, templateData);\n\t\t\t\t}\n\n\t\t\t\tthis.indentGuidesDisposable.dispose();\n\n\t\t\t\tif (shouldRenderIndentGuides) {\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tthis.activeNodes.onDidChange(\n\t\t\t\t\t\tthis._onDidChangeActiveNodes,\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tdisposables,\n\t\t\t\t\t);\n\t\t\t\t\tthis.indentGuidesDisposable = disposables;\n\n\t\t\t\t\tthis._onDidChangeActiveNodes(this.activeNodes.elements);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof options.hideTwistiesOfChildlessElements !== \"undefined\") {\n\t\t\tthis.hideTwistiesOfChildlessElements =\n\t\t\t\toptions.hideTwistiesOfChildlessElements;\n\t\t}\n\t}\n\n\trenderTemplate(\n\t\tcontainer: HTMLElement,\n\t): ITreeListTemplateData<TTemplateData> {\n\t\tconst el = append(container, $(\".monaco-tl-row\"));\n\t\tconst indent = append(el, $(\".monaco-tl-indent\"));\n\t\tconst twistie = append(el, $(\".monaco-tl-twistie\"));\n\t\tconst contents = append(el, $(\".monaco-tl-contents\"));\n\t\tconst templateData = this.renderer.renderTemplate(contents);\n\n\t\treturn {\n\t\t\tcontainer,\n\t\t\tindent,\n\t\t\ttwistie,\n\t\t\tindentGuidesDisposable: Disposable.None,\n\t\t\ttemplateData,\n\t\t};\n\t}\n\n\trenderElement(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t\tindex: number,\n\t\ttemplateData: ITreeListTemplateData<TTemplateData>,\n\t\theight: number | undefined,\n\t): void {\n\t\tthis.renderedNodes.set(node, templateData);\n\t\tthis.renderedElements.set(node.element, node);\n\t\tthis.renderTreeElement(node, templateData);\n\t\tthis.renderer.renderElement(\n\t\t\tnode,\n\t\t\tindex,\n\t\t\ttemplateData.templateData,\n\t\t\theight,\n\t\t);\n\t}\n\n\tdisposeElement(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t\tindex: number,\n\t\ttemplateData: ITreeListTemplateData<TTemplateData>,\n\t\theight: number | undefined,\n\t): void {\n\t\ttemplateData.indentGuidesDisposable.dispose();\n\n\t\tthis.renderer.disposeElement?.(\n\t\t\tnode,\n\t\t\tindex,\n\t\t\ttemplateData.templateData,\n\t\t\theight,\n\t\t);\n\n\t\tif (typeof height === \"number\") {\n\t\t\tthis.renderedNodes.delete(node);\n\t\t\tthis.renderedElements.delete(node.element);\n\t\t}\n\t}\n\n\tdisposeTemplate(templateData: ITreeListTemplateData<TTemplateData>): void {\n\t\tthis.renderer.disposeTemplate(templateData.templateData);\n\t}\n\n\tprivate onDidChangeTwistieState(element: T): void {\n\t\tconst node = this.renderedElements.get(element);\n\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.onDidChangeNodeTwistieState(node);\n\t}\n\n\tprivate onDidChangeNodeTwistieState(node: ITreeNode<T, TFilterData>): void {\n\t\tconst templateData = this.renderedNodes.get(node);\n\n\t\tif (!templateData) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDidChangeActiveNodes(this.activeNodes.elements);\n\t\tthis.renderTreeElement(node, templateData);\n\t}\n\n\tprivate renderTreeElement(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t\ttemplateData: ITreeListTemplateData<TTemplateData>,\n\t) {\n\t\tconst indent =\n\t\t\tTreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n\t\ttemplateData.twistie.style.paddingLeft = `${indent}px`;\n\t\ttemplateData.indent.style.width = `${indent + this.indent - 16}px`;\n\n\t\tif (node.collapsible) {\n\t\t\ttemplateData.container.setAttribute(\n\t\t\t\t\"aria-expanded\",\n\t\t\t\tString(!node.collapsed),\n\t\t\t);\n\t\t} else {\n\t\t\ttemplateData.container.removeAttribute(\"aria-expanded\");\n\t\t}\n\n\t\ttemplateData.twistie.classList.remove(\n\t\t\t...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded),\n\t\t);\n\n\t\tlet twistieRendered = false;\n\n\t\tif (this.renderer.renderTwistie) {\n\t\t\ttwistieRendered = this.renderer.renderTwistie(\n\t\t\t\tnode.element,\n\t\t\t\ttemplateData.twistie,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tnode.collapsible &&\n\t\t\t(!this.hideTwistiesOfChildlessElements ||\n\t\t\t\tnode.visibleChildrenCount > 0)\n\t\t) {\n\t\t\tif (!twistieRendered) {\n\t\t\t\ttemplateData.twistie.classList.add(\n\t\t\t\t\t...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttemplateData.twistie.classList.add(\"collapsible\");\n\t\t\ttemplateData.twistie.classList.toggle(\"collapsed\", node.collapsed);\n\t\t} else {\n\t\t\ttemplateData.twistie.classList.remove(\"collapsible\", \"collapsed\");\n\t\t}\n\n\t\tthis._renderIndentGuides(node, templateData);\n\t}\n\n\tprivate _renderIndentGuides(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t\ttemplateData: ITreeListTemplateData<TTemplateData>,\n\t): void {\n\t\tclearNode(templateData.indent);\n\t\ttemplateData.indentGuidesDisposable.dispose();\n\n\t\tif (!this.shouldRenderIndentGuides) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposableStore = new DisposableStore();\n\n\t\twhile (true) {\n\t\t\tconst ref = this.model.getNodeLocation(node);\n\t\t\tconst parentRef = this.model.getParentNodeLocation(ref);\n\n\t\t\tif (!parentRef) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst parent = this.model.getNode(parentRef);\n\t\t\tconst guide = $<HTMLDivElement>(\".indent-guide\", {\n\t\t\t\tstyle: `width: ${this.indent}px`,\n\t\t\t});\n\n\t\t\tif (this.activeIndentNodes.has(parent)) {\n\t\t\t\tguide.classList.add(\"active\");\n\t\t\t}\n\n\t\t\tif (templateData.indent.childElementCount === 0) {\n\t\t\t\ttemplateData.indent.appendChild(guide);\n\t\t\t} else {\n\t\t\t\ttemplateData.indent.insertBefore(\n\t\t\t\t\tguide,\n\t\t\t\t\ttemplateData.indent.firstElementChild,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.renderedIndentGuides.add(parent, guide);\n\t\t\tdisposableStore.add(\n\t\t\t\ttoDisposable(() =>\n\t\t\t\t\tthis.renderedIndentGuides.delete(parent, guide),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tnode = parent;\n\t\t}\n\n\t\ttemplateData.indentGuidesDisposable = disposableStore;\n\t}\n\n\tprivate _onDidChangeActiveNodes(nodes: ITreeNode<T, TFilterData>[]): void {\n\t\tif (!this.shouldRenderIndentGuides) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst set = new Set<ITreeNode<T, TFilterData>>();\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst ref = this.model.getNodeLocation(node);\n\t\t\ttry {\n\t\t\t\tconst parentRef = this.model.getParentNodeLocation(ref);\n\n\t\t\t\tif (\n\t\t\t\t\tnode.collapsible &&\n\t\t\t\t\tnode.children.length > 0 &&\n\t\t\t\t\t!node.collapsed\n\t\t\t\t) {\n\t\t\t\t\tset.add(node);\n\t\t\t\t} else if (parentRef) {\n\t\t\t\t\tset.add(this.model.getNode(parentRef));\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// noop\n\t\t\t}\n\t\t});\n\n\t\tthis.activeIndentNodes.forEach((node) => {\n\t\t\tif (!set.has(node)) {\n\t\t\t\tthis.renderedIndentGuides.forEach(node, (line) =>\n\t\t\t\t\tline.classList.remove(\"active\"),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tset.forEach((node) => {\n\t\t\tif (!this.activeIndentNodes.has(node)) {\n\t\t\t\tthis.renderedIndentGuides.forEach(node, (line) =>\n\t\t\t\t\tline.classList.add(\"active\"),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis.activeIndentNodes = set;\n\t}\n\n\tsetModel(model: ITreeModel<T, TFilterData, TRef>): void {\n\t\tthis.model = model;\n\t}\n\n\tdispose(): void {\n\t\tthis.renderedNodes.clear();\n\t\tthis.renderedElements.clear();\n\t\tthis.indentGuidesDisposable.dispose();\n\t\tdispose(this.disposables);\n\t}\n}\n\nexport type LabelFuzzyScore = { label: string; score: FuzzyScore };\n\nclass FindFilter<T>\n\timplements ITreeFilter<T, FuzzyScore | LabelFuzzyScore>, IDisposable\n{\n\tprivate _totalCount = 0;\n\tget totalCount(): number {\n\t\treturn this._totalCount;\n\t}\n\tprivate _matchCount = 0;\n\tget matchCount(): number {\n\t\treturn this._matchCount;\n\t}\n\n\tprivate _pattern = \"\";\n\tprivate _lowercasePattern = \"\";\n\tprivate readonly disposables = new DisposableStore();\n\n\tset pattern(pattern: string) {\n\t\tthis._pattern = pattern;\n\t\tthis._lowercasePattern = pattern.toLowerCase();\n\t}\n\n\tconstructor(\n\t\tprivate tree: AbstractTree<T, any, any>,\n\t\tprivate keyboardNavigationLabelProvider: IKeyboardNavigationLabelProvider<T>,\n\t\tprivate _filter?: ITreeFilter<T, FuzzyScore>,\n\t) {\n\t\ttree.onWillRefilter(this.reset, this, this.disposables);\n\t}\n\n\tfilter(\n\t\telement: T,\n\t\tparentVisibility: TreeVisibility,\n\t): TreeFilterResult<FuzzyScore | LabelFuzzyScore> {\n\t\tlet visibility = TreeVisibility.Visible;\n\n\t\tif (this._filter) {\n\t\t\tconst result = this._filter.filter(element, parentVisibility);\n\n\t\t\tif (typeof result === \"boolean\") {\n\t\t\t\tvisibility = result\n\t\t\t\t\t? TreeVisibility.Visible\n\t\t\t\t\t: TreeVisibility.Hidden;\n\t\t\t} else if (isFilterResult(result)) {\n\t\t\t\tvisibility = getVisibleState(result.visibility);\n\t\t\t} else {\n\t\t\t\tvisibility = result;\n\t\t\t}\n\n\t\t\tif (visibility === TreeVisibility.Hidden) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tthis._totalCount++;\n\n\t\tif (!this._pattern) {\n\t\t\tthis._matchCount++;\n\t\t\treturn { data: FuzzyScore.Default, visibility };\n\t\t}\n\n\t\tconst label =\n\t\t\tthis.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(\n\t\t\t\telement,\n\t\t\t);\n\t\tconst labels = Array.isArray(label) ? label : [label];\n\n\t\tfor (const l of labels) {\n\t\t\tconst labelStr: string = l && l.toString();\n\t\t\tif (typeof labelStr === \"undefined\") {\n\t\t\t\treturn { data: FuzzyScore.Default, visibility };\n\t\t\t}\n\n\t\t\tlet score: FuzzyScore | undefined;\n\t\t\tif (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n\t\t\t\tconst index = labelStr\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.indexOf(this._lowercasePattern);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tscore = [Number.MAX_SAFE_INTEGER, 0];\n\t\t\t\t\tfor (let i = this._lowercasePattern.length; i > 0; i--) {\n\t\t\t\t\t\tscore.push(index + i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscore = fuzzyScore(\n\t\t\t\t\tthis._pattern,\n\t\t\t\t\tthis._lowercasePattern,\n\t\t\t\t\t0,\n\t\t\t\t\tlabelStr,\n\t\t\t\t\tlabelStr.toLowerCase(),\n\t\t\t\t\t0,\n\t\t\t\t\t{ firstMatchCanBeWeak: true, boostFullMatch: true },\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (score) {\n\t\t\t\tthis._matchCount++;\n\t\t\t\treturn labels.length === 1\n\t\t\t\t\t? { data: score, visibility }\n\t\t\t\t\t: { data: { label: labelStr, score: score }, visibility };\n\t\t\t}\n\t\t}\n\n\t\tif (this.tree.findMode === TreeFindMode.Filter) {\n\t\t\tif (typeof this.tree.options.defaultFindVisibility === \"number\") {\n\t\t\t\treturn this.tree.options.defaultFindVisibility;\n\t\t\t} else if (this.tree.options.defaultFindVisibility) {\n\t\t\t\treturn this.tree.options.defaultFindVisibility(element);\n\t\t\t} else {\n\t\t\t\treturn TreeVisibility.Recurse;\n\t\t\t}\n\t\t} else {\n\t\t\treturn { data: FuzzyScore.Default, visibility };\n\t\t}\n\t}\n\n\tprivate reset(): void {\n\t\tthis._totalCount = 0;\n\t\tthis._matchCount = 0;\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.disposables);\n\t}\n}\n\nexport interface ITreeFindToggleOpts {\n\treadonly isChecked: boolean;\n\treadonly inputActiveOptionBorder: string | undefined;\n\treadonly inputActiveOptionForeground: string | undefined;\n\treadonly inputActiveOptionBackground: string | undefined;\n\treadonly hoverDelegate?: IHoverDelegate;\n}\n\nexport class ModeToggle extends Toggle {\n\tconstructor(opts: ITreeFindToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.listFilter,\n\t\t\ttitle: localize(\"filter\", \"Filter\"),\n\t\t\tisChecked: opts.isChecked ?? false,\n\t\t\thoverDelegate:\n\t\t\t\topts.hoverDelegate ?? getDefaultHoverDelegate(\"element\"),\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground,\n\t\t});\n\t}\n}\n\nexport class FuzzyToggle extends Toggle {\n\tconstructor(opts: ITreeFindToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.searchFuzzy,\n\t\t\ttitle: localize(\"fuzzySearch\", \"Fuzzy Match\"),\n\t\t\tisChecked: opts.isChecked ?? false,\n\t\t\thoverDelegate:\n\t\t\t\topts.hoverDelegate ?? getDefaultHoverDelegate(\"element\"),\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground,\n\t\t});\n\t}\n}\n\nexport interface IFindWidgetStyles {\n\tlistFilterWidgetBackground: string | undefined;\n\tlistFilterWidgetOutline: string | undefined;\n\tlistFilterWidgetNoMatchesOutline: string | undefined;\n\tlistFilterWidgetShadow: string | undefined;\n\treadonly toggleStyles: IToggleStyles;\n\treadonly inputBoxStyles: IInputBoxStyles;\n}\n\nexport interface IFindWidgetOptions {\n\treadonly history?: string[];\n\treadonly styles?: IFindWidgetStyles;\n}\n\nconst unthemedFindWidgetStyles: IFindWidgetStyles = {\n\tinputBoxStyles: unthemedInboxStyles,\n\ttoggleStyles: unthemedToggleStyles,\n\tlistFilterWidgetBackground: undefined,\n\tlistFilterWidgetNoMatchesOutline: undefined,\n\tlistFilterWidgetOutline: undefined,\n\tlistFilterWidgetShadow: undefined,\n};\n\nexport enum TreeFindMode {\n\tHighlight = 0,\n\tFilter = 1,\n}\n\nexport enum TreeFindMatchType {\n\tFuzzy = 0,\n\tContiguous = 1,\n}\n\nclass FindWidget<T, TFilterData> extends Disposable {\n\tprivate readonly elements = h(\".monaco-tree-type-filter\", [\n\t\th(\".monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab\", {\n\t\t\ttabIndex: 0,\n\t\t}),\n\t\th(\".monaco-tree-type-filter-input@findInput\"),\n\t\th(\".monaco-tree-type-filter-actionbar@actionbar\"),\n\t]);\n\n\tset mode(mode: TreeFindMode) {\n\t\tthis.modeToggle.checked = mode === TreeFindMode.Filter;\n\t\tthis.findInput.inputBox.setPlaceHolder(\n\t\t\tmode === TreeFindMode.Filter\n\t\t\t\t? localize(\"type to filter\", \"Type to filter\")\n\t\t\t\t: localize(\"type to search\", \"Type to search\"),\n\t\t);\n\t}\n\n\tset matchType(matchType: TreeFindMatchType) {\n\t\tthis.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n\t}\n\n\tget value(): string {\n\t\treturn this.findInput.inputBox.value;\n\t}\n\n\tset value(value: string) {\n\t\tthis.findInput.inputBox.value = value;\n\t}\n\n\tprivate readonly modeToggle: ModeToggle;\n\tprivate readonly matchTypeToggle: FuzzyToggle;\n\tprivate readonly findInput: FindInput;\n\tprivate readonly actionbar: ActionBar;\n\tprivate width = 0;\n\tprivate right = 0;\n\tprivate top = 0;\n\n\treadonly _onDidDisable = new Emitter<void>();\n\treadonly onDidDisable = this._onDidDisable.event;\n\treadonly onDidChangeValue: Event<string>;\n\treadonly onDidChangeMode: Event<TreeFindMode>;\n\treadonly onDidChangeMatchType: Event<TreeFindMatchType>;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate tree: AbstractTree<T, TFilterData, any>,\n\t\tcontextViewProvider: IContextViewProvider,\n\t\tmode: TreeFindMode,\n\t\tmatchType: TreeFindMatchType,\n\t\toptions?: IFindWidgetOptions,\n\t) {\n\t\tsuper();\n\n\t\tcontainer.appendChild(this.elements.root);\n\t\tthis._register(toDisposable(() => this.elements.root.remove()));\n\n\t\tconst styles = options?.styles ?? unthemedFindWidgetStyles;\n\n\t\tif (styles.listFilterWidgetBackground) {\n\t\t\tthis.elements.root.style.backgroundColor =\n\t\t\t\tstyles.listFilterWidgetBackground;\n\t\t}\n\n\t\tif (styles.listFilterWidgetShadow) {\n\t\t\tthis.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n\t\t}\n\n\t\tconst toggleHoverDelegate = this._register(\n\t\t\tcreateInstantHoverDelegate(),\n\t\t);\n\t\tthis.modeToggle = this._register(\n\t\t\tnew ModeToggle({\n\t\t\t\t...styles.toggleStyles,\n\t\t\t\tisChecked: mode === TreeFindMode.Filter,\n\t\t\t\thoverDelegate: toggleHoverDelegate,\n\t\t\t}),\n\t\t);\n\t\tthis.matchTypeToggle = this._register(\n\t\t\tnew FuzzyToggle({\n\t\t\t\t...styles.toggleStyles,\n\t\t\t\tisChecked: matchType === TreeFindMatchType.Fuzzy,\n\t\t\t\thoverDelegate: toggleHoverDelegate,\n\t\t\t}),\n\t\t);\n\t\tthis.onDidChangeMode = Event.map(\n\t\t\tthis.modeToggle.onChange,\n\t\t\t() =>\n\t\t\t\tthis.modeToggle.checked\n\t\t\t\t\t? TreeFindMode.Filter\n\t\t\t\t\t: TreeFindMode.Highlight,\n\t\t\tthis._store,\n\t\t);\n\t\tthis.onDidChangeMatchType = Event.map(\n\t\t\tthis.matchTypeToggle.onChange,\n\t\t\t() =>\n\t\t\t\tthis.matchTypeToggle.checked\n\t\t\t\t\t? TreeFindMatchType.Fuzzy\n\t\t\t\t\t: TreeFindMatchType.Contiguous,\n\t\t\tthis._store,\n\t\t);\n\n\t\tthis.findInput = this._register(\n\t\t\tnew FindInput(this.elements.findInput, contextViewProvider, {\n\t\t\t\tlabel: localize(\"type to search\", \"Type to search\"),\n\t\t\t\tadditionalToggles: [this.modeToggle, this.matchTypeToggle],\n\t\t\t\tshowCommonFindToggles: false,\n\t\t\t\tinputBoxStyles: styles.inputBoxStyles,\n\t\t\t\ttoggleStyles: styles.toggleStyles,\n\t\t\t\thistory: options?.history,\n\t\t\t}),\n\t\t);\n\n\t\tthis.actionbar = this._register(new ActionBar(this.elements.actionbar));\n\t\tthis.mode = mode;\n\n\t\tconst emitter = this._register(\n\t\t\tnew DomEmitter(this.findInput.inputBox.inputElement, \"keydown\"),\n\t\t);\n\t\tconst onKeyDown = Event.chain(emitter.event, ($) =>\n\t\t\t$.map((e) => new StandardKeyboardEvent(e)),\n\t\t);\n\n\t\tthis._register(\n\t\t\tonKeyDown((e): any => {\n\t\t\t\t// Using equals() so we reserve modified keys for future use\n\t\t\t\tif (e.equals(KeyCode.Enter)) {\n\t\t\t\t\t// This is the only keyboard way to return to the tree from a history item that isn't the last one\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tthis.findInput.inputBox.addToHistory();\n\t\t\t\t\tthis.tree.domFocus();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (e.equals(KeyCode.DownArrow)) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.findInput.inputBox.isAtLastInHistory() ||\n\t\t\t\t\t\tthis.findInput.inputBox.isNowhereInHistory()\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Retain original pre-history DownArrow behavior\n\t\t\t\t\t\tthis.findInput.inputBox.addToHistory();\n\t\t\t\t\t\tthis.tree.domFocus();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Downward through history\n\t\t\t\t\t\tthis.findInput.inputBox.showNextValue();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (e.equals(KeyCode.UpArrow)) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t// Upward through history\n\t\t\t\t\tthis.findInput.inputBox.showPreviousValue();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tconst closeAction = this._register(\n\t\t\tnew Action(\n\t\t\t\t\"close\",\n\t\t\t\tlocalize(\"close\", \"Close\"),\n\t\t\t\t\"codicon codicon-close\",\n\t\t\t\ttrue,\n\t\t\t\t() => this.dispose(),\n\t\t\t),\n\t\t);\n\t\tthis.actionbar.push(closeAction, { icon: true, label: false });\n\n\t\tconst onGrabMouseDown = this._register(\n\t\t\tnew DomEmitter(this.elements.grab, \"mousedown\"),\n\t\t);\n\n\t\tthis._register(\n\t\t\tonGrabMouseDown.event((e) => {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst onWindowMouseMove = disposables.add(\n\t\t\t\t\tnew DomEmitter(getWindow(e), \"mousemove\"),\n\t\t\t\t);\n\t\t\t\tconst onWindowMouseUp = disposables.add(\n\t\t\t\t\tnew DomEmitter(getWindow(e), \"mouseup\"),\n\t\t\t\t);\n\n\t\t\t\tconst startRight = this.right;\n\t\t\t\tconst startX = e.pageX;\n\t\t\t\tconst startTop = this.top;\n\t\t\t\tconst startY = e.pageY;\n\t\t\t\tthis.elements.grab.classList.add(\"grabbing\");\n\n\t\t\t\tconst transition = this.elements.root.style.transition;\n\t\t\t\tthis.elements.root.style.transition = \"unset\";\n\n\t\t\t\tconst update = (e: MouseEvent) => {\n\t\t\t\t\tconst deltaX = e.pageX - startX;\n\t\t\t\t\tthis.right = startRight - deltaX;\n\t\t\t\t\tconst deltaY = e.pageY - startY;\n\t\t\t\t\tthis.top = startTop + deltaY;\n\t\t\t\t\tthis.layout();\n\t\t\t\t};\n\n\t\t\t\tdisposables.add(onWindowMouseMove.event(update));\n\t\t\t\tdisposables.add(\n\t\t\t\t\tonWindowMouseUp.event((e) => {\n\t\t\t\t\t\tupdate(e);\n\t\t\t\t\t\tthis.elements.grab.classList.remove(\"grabbing\");\n\t\t\t\t\t\tthis.elements.root.style.transition = transition;\n\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tconst onGrabKeyDown = Event.chain(\n\t\t\tthis._register(new DomEmitter(this.elements.grab, \"keydown\")).event,\n\t\t\t($) => $.map((e) => new StandardKeyboardEvent(e)),\n\t\t);\n\n\t\tthis._register(\n\t\t\tonGrabKeyDown((e): any => {\n\t\t\t\tlet right: number | undefined;\n\t\t\t\tlet top: number | undefined;\n\n\t\t\t\tif (e.keyCode === KeyCode.LeftArrow) {\n\t\t\t\t\tright = Number.POSITIVE_INFINITY;\n\t\t\t\t} else if (e.keyCode === KeyCode.RightArrow) {\n\t\t\t\t\tright = 0;\n\t\t\t\t} else if (e.keyCode === KeyCode.Space) {\n\t\t\t\t\tright = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n\t\t\t\t}\n\n\t\t\t\tif (e.keyCode === KeyCode.UpArrow) {\n\t\t\t\t\ttop = 0;\n\t\t\t\t} else if (e.keyCode === KeyCode.DownArrow) {\n\t\t\t\t\ttop = Number.POSITIVE_INFINITY;\n\t\t\t\t}\n\n\t\t\t\tif (right !== undefined) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tthis.right = right;\n\t\t\t\t\tthis.layout();\n\t\t\t\t}\n\n\t\t\t\tif (top !== undefined) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tthis.top = top;\n\t\t\t\t\tconst transition = this.elements.root.style.transition;\n\t\t\t\t\tthis.elements.root.style.transition = \"unset\";\n\t\t\t\t\tthis.layout();\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.elements.root.style.transition = transition;\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.onDidChangeValue = this.findInput.onDidChange;\n\t}\n\n\tgetHistory(): string[] {\n\t\treturn this.findInput.inputBox.getHistory();\n\t}\n\n\tfocus() {\n\t\tthis.findInput.focus();\n\t}\n\n\tselect() {\n\t\tthis.findInput.select();\n\n\t\t// Reposition to last in history\n\t\tthis.findInput.inputBox.addToHistory(true);\n\t}\n\n\tlayout(width: number = this.width): void {\n\t\tthis.width = width;\n\t\tthis.right = clamp(this.right, 0, Math.max(0, width - 212));\n\t\tthis.elements.root.style.right = `${this.right}px`;\n\t\tthis.top = clamp(this.top, 0, 24);\n\t\tthis.elements.root.style.top = `${this.top}px`;\n\t}\n\n\tshowMessage(message: IMessage): void {\n\t\tthis.findInput.showMessage(message);\n\t}\n\n\tclearMessage(): void {\n\t\tthis.findInput.clearMessage();\n\t}\n\n\toverride async dispose(): Promise<void> {\n\t\tthis._onDidDisable.fire();\n\t\tthis.elements.root.classList.add(\"disabled\");\n\t\tawait timeout(300);\n\t\tsuper.dispose();\n\t}\n}\n\ninterface IFindControllerOptions extends IFindWidgetOptions {}\n\nclass FindController<T, TFilterData> implements IDisposable {\n\tprivate _history: string[] | undefined;\n\n\tprivate _pattern = \"\";\n\tget pattern(): string {\n\t\treturn this._pattern;\n\t}\n\tprivate previousPattern = \"\";\n\n\tprivate _mode: TreeFindMode;\n\tget mode(): TreeFindMode {\n\t\treturn this._mode;\n\t}\n\tset mode(mode: TreeFindMode) {\n\t\tif (mode === this._mode) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._mode = mode;\n\n\t\tif (this.widget) {\n\t\t\tthis.widget.mode = this._mode;\n\t\t}\n\n\t\tthis.tree.refilter();\n\t\tthis.render();\n\t\tthis._onDidChangeMode.fire(mode);\n\t}\n\n\tprivate _matchType: TreeFindMatchType;\n\tget matchType(): TreeFindMatchType {\n\t\treturn this._matchType;\n\t}\n\tset matchType(matchType: TreeFindMatchType) {\n\t\tif (matchType === this._matchType) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._matchType = matchType;\n\n\t\tif (this.widget) {\n\t\t\tthis.widget.matchType = this._matchType;\n\t\t}\n\n\t\tthis.tree.refilter();\n\t\tthis.render();\n\t\tthis._onDidChangeMatchType.fire(matchType);\n\t}\n\n\tprivate widget: FindWidget<T, TFilterData> | undefined;\n\tprivate width = 0;\n\n\tprivate readonly _onDidChangeMode = new Emitter<TreeFindMode>();\n\treadonly onDidChangeMode = this._onDidChangeMode.event;\n\n\tprivate readonly _onDidChangeMatchType = new Emitter<TreeFindMatchType>();\n\treadonly onDidChangeMatchType = this._onDidChangeMatchType.event;\n\n\tprivate readonly _onDidChangePattern = new Emitter<string>();\n\treadonly onDidChangePattern = this._onDidChangePattern.event;\n\n\tprivate readonly _onDidChangeOpenState = new Emitter<boolean>();\n\treadonly onDidChangeOpenState = this._onDidChangeOpenState.event;\n\n\tprivate readonly enabledDisposables = new DisposableStore();\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\tprivate tree: AbstractTree<T, TFilterData, any>,\n\t\tprivate view: List<ITreeNode<T, TFilterData>>,\n\t\tprivate filter: FindFilter<T>,\n\t\tprivate readonly contextViewProvider: IContextViewProvider,\n\t\tprivate readonly options: IFindControllerOptions = {},\n\t) {\n\t\tthis._mode = tree.options.defaultFindMode ?? TreeFindMode.Highlight;\n\t\tthis._matchType =\n\t\t\ttree.options.defaultFindMatchType ?? TreeFindMatchType.Fuzzy;\n\t}\n\n\tupdateOptions(optionsUpdate: IAbstractTreeOptionsUpdate = {}): void {\n\t\tif (optionsUpdate.defaultFindMode !== undefined) {\n\t\t\tthis.mode = optionsUpdate.defaultFindMode;\n\t\t}\n\n\t\tif (optionsUpdate.defaultFindMatchType !== undefined) {\n\t\t\tthis.matchType = optionsUpdate.defaultFindMatchType;\n\t\t}\n\t}\n\n\tisOpened(): boolean {\n\t\treturn !!this.widget;\n\t}\n\n\topen(): void {\n\t\tif (this.widget) {\n\t\t\tthis.widget.focus();\n\t\t\tthis.widget.select();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.widget = new FindWidget(\n\t\t\tthis.view.getHTMLElement(),\n\t\t\tthis.tree,\n\t\t\tthis.contextViewProvider,\n\t\t\tthis.mode,\n\t\t\tthis.matchType,\n\t\t\t{ ...this.options, history: this._history },\n\t\t);\n\t\tthis.enabledDisposables.add(this.widget);\n\n\t\tthis.widget.onDidChangeValue(\n\t\t\tthis.onDidChangeValue,\n\t\t\tthis,\n\t\t\tthis.enabledDisposables,\n\t\t);\n\t\tthis.widget.onDidChangeMode(\n\t\t\t(mode) => (this.mode = mode),\n\t\t\tundefined,\n\t\t\tthis.enabledDisposables,\n\t\t);\n\t\tthis.widget.onDidChangeMatchType(\n\t\t\t(matchType) => (this.matchType = matchType),\n\t\t\tundefined,\n\t\t\tthis.enabledDisposables,\n\t\t);\n\t\tthis.widget.onDidDisable(this.close, this, this.enabledDisposables);\n\n\t\tthis.widget.layout(this.width);\n\t\tthis.widget.focus();\n\n\t\tthis.widget.value = this.previousPattern;\n\t\tthis.widget.select();\n\n\t\tthis._onDidChangeOpenState.fire(true);\n\t}\n\n\tclose(): void {\n\t\tif (!this.widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._history = this.widget.getHistory();\n\t\tthis.widget = undefined;\n\n\t\tthis.enabledDisposables.clear();\n\n\t\tthis.previousPattern = this.pattern;\n\t\tthis.onDidChangeValue(\"\");\n\t\tthis.tree.domFocus();\n\n\t\tthis._onDidChangeOpenState.fire(false);\n\t}\n\n\tprivate onDidChangeValue(pattern: string): void {\n\t\tthis._pattern = pattern;\n\t\tthis._onDidChangePattern.fire(pattern);\n\n\t\tthis.filter.pattern = pattern;\n\t\tthis.tree.refilter();\n\n\t\tif (pattern) {\n\t\t\tthis.tree.focusNext(\n\t\t\t\t0,\n\t\t\t\ttrue,\n\t\t\t\tundefined,\n\t\t\t\t(node) =>\n\t\t\t\t\t!FuzzyScore.isDefault(node.filterData as any as FuzzyScore),\n\t\t\t);\n\t\t}\n\n\t\tconst focus = this.tree.getFocus();\n\n\t\tif (focus.length > 0) {\n\t\t\tconst element = focus[0];\n\n\t\t\tif (this.tree.getRelativeTop(element) === null) {\n\t\t\t\tthis.tree.reveal(element, 0.5);\n\t\t\t}\n\t\t}\n\n\t\tthis.render();\n\t}\n\n\trender(): void {\n\t\tconst noMatches =\n\t\t\tthis.filter.totalCount > 0 && this.filter.matchCount === 0;\n\n\t\tif (this.pattern && noMatches) {\n\t\t\talert(localize(\"replFindNoResults\", \"No results\"));\n\t\t\tif (this.tree.options.showNotFoundMessage ?? true) {\n\t\t\t\tthis.widget?.showMessage({\n\t\t\t\t\ttype: MessageType.WARNING,\n\t\t\t\t\tcontent: localize(\"not found\", \"No elements found.\"),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.widget?.showMessage({ type: MessageType.WARNING });\n\t\t\t}\n\t\t} else {\n\t\t\tthis.widget?.clearMessage();\n\t\t\tif (this.pattern) {\n\t\t\t\talert(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"replFindResults\",\n\t\t\t\t\t\t\"{0} results\",\n\t\t\t\t\t\tthis.filter.matchCount,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tshouldAllowFocus(node: ITreeNode<T, TFilterData>): boolean {\n\t\tif (!this.widget || !this.pattern) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !FuzzyScore.isDefault(node.filterData as any as FuzzyScore);\n\t}\n\n\tlayout(width: number): void {\n\t\tthis.width = width;\n\t\tthis.widget?.layout(width);\n\t}\n\n\tdispose() {\n\t\tthis._history = undefined;\n\t\tthis._onDidChangePattern.dispose();\n\t\tthis.enabledDisposables.dispose();\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport interface StickyScrollNode<T, TFilterData> {\n\treadonly node: ITreeNode<T, TFilterData>;\n\treadonly startIndex: number;\n\treadonly endIndex: number;\n\treadonly height: number;\n\treadonly position: number;\n}\n\nfunction stickyScrollNodeStateEquals<T, TFilterData>(\n\tnode1: StickyScrollNode<T, TFilterData>,\n\tnode2: StickyScrollNode<T, TFilterData>,\n) {\n\treturn (\n\t\tnode1.position === node2.position &&\n\t\tstickyScrollNodeEquals(node1, node2)\n\t);\n}\n\nfunction stickyScrollNodeEquals<T, TFilterData>(\n\tnode1: StickyScrollNode<T, TFilterData>,\n\tnode2: StickyScrollNode<T, TFilterData>,\n) {\n\treturn (\n\t\tnode1.node.element === node2.node.element &&\n\t\tnode1.startIndex === node2.startIndex &&\n\t\tnode1.height === node2.height &&\n\t\tnode1.endIndex === node2.endIndex\n\t);\n}\n\nclass StickyScrollState<T, TFilterData, TRef> {\n\tconstructor(\n\t\treadonly stickyNodes: StickyScrollNode<T, TFilterData>[] = [],\n\t) {}\n\n\tget count(): number {\n\t\treturn this.stickyNodes.length;\n\t}\n\n\tequal(state: StickyScrollState<T, TFilterData, TRef>): boolean {\n\t\treturn equals(\n\t\t\tthis.stickyNodes,\n\t\t\tstate.stickyNodes,\n\t\t\tstickyScrollNodeStateEquals,\n\t\t);\n\t}\n\n\tlastNodePartiallyVisible(): boolean {\n\t\tif (this.count === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst lastStickyNode = this.stickyNodes[this.count - 1];\n\t\tif (this.count === 1) {\n\t\t\treturn lastStickyNode.position !== 0;\n\t\t}\n\n\t\tconst secondLastStickyNode = this.stickyNodes[this.count - 2];\n\t\treturn (\n\t\t\tsecondLastStickyNode.position + secondLastStickyNode.height !==\n\t\t\tlastStickyNode.position\n\t\t);\n\t}\n\n\tanimationStateChanged(\n\t\tpreviousState: StickyScrollState<T, TFilterData, TRef>,\n\t): boolean {\n\t\tif (\n\t\t\t!equals(\n\t\t\t\tthis.stickyNodes,\n\t\t\t\tpreviousState.stickyNodes,\n\t\t\t\tstickyScrollNodeEquals,\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.count === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst lastStickyNode = this.stickyNodes[this.count - 1];\n\t\tconst previousLastStickyNode =\n\t\t\tpreviousState.stickyNodes[previousState.count - 1];\n\n\t\treturn lastStickyNode.position !== previousLastStickyNode.position;\n\t}\n}\n\nexport interface IStickyScrollDelegate<T, TFilterData> {\n\tconstrainStickyScrollNodes(\n\t\tstickyNodes: StickyScrollNode<T, TFilterData>[],\n\t\tstickyScrollMaxItemCount: number,\n\t\tmaxWidgetHeight: number,\n\t): StickyScrollNode<T, TFilterData>[];\n}\n\nclass DefaultStickyScrollDelegate<T, TFilterData>\n\timplements IStickyScrollDelegate<T, TFilterData>\n{\n\tconstrainStickyScrollNodes(\n\t\tstickyNodes: StickyScrollNode<T, TFilterData>[],\n\t\tstickyScrollMaxItemCount: number,\n\t\tmaxWidgetHeight: number,\n\t): StickyScrollNode<T, TFilterData>[] {\n\t\tfor (let i = 0; i < stickyNodes.length; i++) {\n\t\t\tconst stickyNode = stickyNodes[i];\n\t\t\tconst stickyNodeBottom = stickyNode.position + stickyNode.height;\n\t\t\tif (\n\t\t\t\tstickyNodeBottom > maxWidgetHeight ||\n\t\t\t\ti >= stickyScrollMaxItemCount\n\t\t\t) {\n\t\t\t\treturn stickyNodes.slice(0, i);\n\t\t\t}\n\t\t}\n\n\t\treturn stickyNodes;\n\t}\n}\n\nclass StickyScrollController<T, TFilterData, TRef> extends Disposable {\n\treadonly onDidChangeHasFocus: Event<boolean>;\n\treadonly onContextMenu: Event<ITreeContextMenuEvent<T>>;\n\n\tprivate readonly stickyScrollDelegate: IStickyScrollDelegate<\n\t\tT,\n\t\tTFilterData\n\t>;\n\n\tprivate stickyScrollMaxItemCount: number;\n\tprivate readonly maxWidgetViewRatio = 0.4;\n\n\tprivate readonly _widget: StickyScrollWidget<T, TFilterData, TRef>;\n\n\tconstructor(\n\t\tprivate readonly tree: AbstractTree<T, TFilterData, TRef>,\n\t\tprivate model: ITreeModel<T, TFilterData, TRef>,\n\t\tprivate readonly view: List<ITreeNode<T, TFilterData>>,\n\t\trenderers: TreeRenderer<T, TFilterData, TRef, any>[],\n\t\tprivate readonly treeDelegate: IListVirtualDelegate<\n\t\t\tITreeNode<T, TFilterData>\n\t\t>,\n\t\toptions: IAbstractTreeOptions<T, TFilterData> = {},\n\t) {\n\t\tsuper();\n\n\t\tconst stickyScrollOptions = this.validateStickySettings(options);\n\t\tthis.stickyScrollMaxItemCount =\n\t\t\tstickyScrollOptions.stickyScrollMaxItemCount;\n\n\t\tthis.stickyScrollDelegate =\n\t\t\toptions.stickyScrollDelegate ?? new DefaultStickyScrollDelegate();\n\n\t\tthis._widget = this._register(\n\t\t\tnew StickyScrollWidget(\n\t\t\t\tview.getScrollableElement(),\n\t\t\t\tview,\n\t\t\t\ttree,\n\t\t\t\trenderers,\n\t\t\t\ttreeDelegate,\n\t\t\t\toptions.accessibilityProvider,\n\t\t\t),\n\t\t);\n\t\tthis.onDidChangeHasFocus = this._widget.onDidChangeHasFocus;\n\t\tthis.onContextMenu = this._widget.onContextMenu;\n\n\t\tthis._register(view.onDidScroll(() => this.update()));\n\t\tthis._register(view.onDidChangeContentHeight(() => this.update()));\n\t\tthis._register(tree.onDidChangeCollapseState(() => this.update()));\n\n\t\tthis.update();\n\t}\n\n\tget height(): number {\n\t\treturn this._widget.height;\n\t}\n\n\tget count(): number {\n\t\treturn this._widget.count;\n\t}\n\n\tgetNode(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t): StickyScrollNode<T, TFilterData> | undefined {\n\t\treturn this._widget.getNode(node);\n\t}\n\n\tprivate getNodeAtHeight(\n\t\theight: number,\n\t): ITreeNode<T, TFilterData> | undefined {\n\t\tlet index;\n\t\tif (height === 0) {\n\t\t\tindex = this.view.firstVisibleIndex;\n\t\t} else {\n\t\t\tindex = this.view.indexAt(height + this.view.scrollTop);\n\t\t}\n\n\t\tif (index < 0 || index >= this.view.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.view.element(index);\n\t}\n\n\tprivate update() {\n\t\tconst firstVisibleNode = this.getNodeAtHeight(0);\n\n\t\t// Don't render anything if there are no elements\n\t\tif (!firstVisibleNode || this.tree.scrollTop === 0) {\n\t\t\tthis._widget.setState(undefined);\n\t\t\treturn;\n\t\t}\n\n\t\tconst stickyState = this.findStickyState(firstVisibleNode);\n\t\tthis._widget.setState(stickyState);\n\t}\n\n\tprivate findStickyState(\n\t\tfirstVisibleNode: ITreeNode<T, TFilterData>,\n\t): StickyScrollState<T, TFilterData, TRef> | undefined {\n\t\tconst stickyNodes: StickyScrollNode<T, TFilterData>[] = [];\n\t\tlet firstVisibleNodeUnderWidget: ITreeNode<T, TFilterData> | undefined =\n\t\t\tfirstVisibleNode;\n\t\tlet stickyNodesHeight = 0;\n\n\t\tlet nextStickyNode = this.getNextStickyNode(\n\t\t\tfirstVisibleNodeUnderWidget,\n\t\t\tundefined,\n\t\t\tstickyNodesHeight,\n\t\t);\n\t\twhile (nextStickyNode) {\n\t\t\tstickyNodes.push(nextStickyNode);\n\t\t\tstickyNodesHeight += nextStickyNode.height;\n\n\t\t\tif (stickyNodes.length <= this.stickyScrollMaxItemCount) {\n\t\t\t\tfirstVisibleNodeUnderWidget =\n\t\t\t\t\tthis.getNextVisibleNode(nextStickyNode);\n\t\t\t\tif (!firstVisibleNodeUnderWidget) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnextStickyNode = this.getNextStickyNode(\n\t\t\t\tfirstVisibleNodeUnderWidget,\n\t\t\t\tnextStickyNode.node,\n\t\t\t\tstickyNodesHeight,\n\t\t\t);\n\t\t}\n\n\t\tconst contrainedStickyNodes = this.constrainStickyNodes(stickyNodes);\n\t\treturn contrainedStickyNodes.length\n\t\t\t? new StickyScrollState(contrainedStickyNodes)\n\t\t\t: undefined;\n\t}\n\n\tprivate getNextVisibleNode(\n\t\tpreviousStickyNode: StickyScrollNode<T, TFilterData>,\n\t): ITreeNode<T, TFilterData> | undefined {\n\t\treturn this.getNodeAtHeight(\n\t\t\tpreviousStickyNode.position + previousStickyNode.height,\n\t\t);\n\t}\n\n\tprivate getNextStickyNode(\n\t\tfirstVisibleNodeUnderWidget: ITreeNode<T, TFilterData>,\n\t\tpreviousStickyNode: ITreeNode<T, TFilterData> | undefined,\n\t\tstickyNodesHeight: number,\n\t): StickyScrollNode<T, TFilterData> | undefined {\n\t\tconst nextStickyNode = this.getAncestorUnderPrevious(\n\t\t\tfirstVisibleNodeUnderWidget,\n\t\t\tpreviousStickyNode,\n\t\t);\n\t\tif (!nextStickyNode) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (nextStickyNode === firstVisibleNodeUnderWidget) {\n\t\t\tif (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.nodeTopAlignsWithStickyNodesBottom(\n\t\t\t\t\tfirstVisibleNodeUnderWidget,\n\t\t\t\t\tstickyNodesHeight,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n\t}\n\n\tprivate nodeTopAlignsWithStickyNodesBottom(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t\tstickyNodesHeight: number,\n\t): boolean {\n\t\tconst nodeIndex = this.getNodeIndex(node);\n\t\tconst elementTop = this.view.getElementTop(nodeIndex);\n\t\tconst stickyPosition = stickyNodesHeight;\n\t\treturn this.view.scrollTop === elementTop - stickyPosition;\n\t}\n\n\tprivate createStickyScrollNode(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t\tcurrentStickyNodesHeight: number,\n\t): StickyScrollNode<T, TFilterData> {\n\t\tconst height = this.treeDelegate.getHeight(node);\n\t\tconst { startIndex, endIndex } = this.getNodeRange(node);\n\n\t\tconst position = this.calculateStickyNodePosition(\n\t\t\tendIndex,\n\t\t\tcurrentStickyNodesHeight,\n\t\t\theight,\n\t\t);\n\n\t\treturn { node, position, height, startIndex, endIndex };\n\t}\n\n\tprivate getAncestorUnderPrevious(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t\tpreviousAncestor: ITreeNode<T, TFilterData> | undefined = undefined,\n\t): ITreeNode<T, TFilterData> | undefined {\n\t\tlet currentAncestor: ITreeNode<T, TFilterData> = node;\n\t\tlet parentOfcurrentAncestor: ITreeNode<T, TFilterData> | undefined =\n\t\t\tthis.getParentNode(currentAncestor);\n\n\t\twhile (parentOfcurrentAncestor) {\n\t\t\tif (parentOfcurrentAncestor === previousAncestor) {\n\t\t\t\treturn currentAncestor;\n\t\t\t}\n\t\t\tcurrentAncestor = parentOfcurrentAncestor;\n\t\t\tparentOfcurrentAncestor = this.getParentNode(currentAncestor);\n\t\t}\n\n\t\tif (previousAncestor === undefined) {\n\t\t\treturn currentAncestor;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate calculateStickyNodePosition(\n\t\tlastDescendantIndex: number,\n\t\tstickyRowPositionTop: number,\n\t\tstickyNodeHeight: number,\n\t): number {\n\t\tlet lastChildRelativeTop =\n\t\t\tthis.view.getRelativeTop(lastDescendantIndex);\n\n\t\t// If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n\t\t// In that case, utilize the next node's relative top to calculate the sticky node's position\n\t\tif (\n\t\t\tlastChildRelativeTop === null &&\n\t\t\tthis.view.firstVisibleIndex === lastDescendantIndex &&\n\t\t\tlastDescendantIndex + 1 < this.view.length\n\t\t) {\n\t\t\tconst nodeHeight = this.treeDelegate.getHeight(\n\t\t\t\tthis.view.element(lastDescendantIndex),\n\t\t\t);\n\t\t\tconst nextNodeRelativeTop = this.view.getRelativeTop(\n\t\t\t\tlastDescendantIndex + 1,\n\t\t\t);\n\t\t\tlastChildRelativeTop = nextNodeRelativeTop\n\t\t\t\t? nextNodeRelativeTop - nodeHeight / this.view.renderHeight\n\t\t\t\t: null;\n\t\t}\n\n\t\tif (lastChildRelativeTop === null) {\n\t\t\treturn stickyRowPositionTop;\n\t\t}\n\n\t\tconst lastChildNode = this.view.element(lastDescendantIndex);\n\t\tconst lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n\t\tconst topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n\t\tconst bottomOfLastChild = topOfLastChild + lastChildHeight;\n\n\t\tif (\n\t\t\tstickyRowPositionTop + stickyNodeHeight > bottomOfLastChild &&\n\t\t\tstickyRowPositionTop <= bottomOfLastChild\n\t\t) {\n\t\t\treturn bottomOfLastChild - stickyNodeHeight;\n\t\t}\n\n\t\treturn stickyRowPositionTop;\n\t}\n\n\tprivate constrainStickyNodes(\n\t\tstickyNodes: StickyScrollNode<T, TFilterData>[],\n\t): StickyScrollNode<T, TFilterData>[] {\n\t\tif (stickyNodes.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Check if sticky nodes need to be constrained\n\t\tconst maximumStickyWidgetHeight =\n\t\t\tthis.view.renderHeight * this.maxWidgetViewRatio;\n\t\tconst lastStickyNode = stickyNodes[stickyNodes.length - 1];\n\t\tif (\n\t\t\tstickyNodes.length <= this.stickyScrollMaxItemCount &&\n\t\t\tlastStickyNode.position + lastStickyNode.height <=\n\t\t\t\tmaximumStickyWidgetHeight\n\t\t) {\n\t\t\treturn stickyNodes;\n\t\t}\n\n\t\t// constrain sticky nodes\n\t\tconst constrainedStickyNodes =\n\t\t\tthis.stickyScrollDelegate.constrainStickyScrollNodes(\n\t\t\t\tstickyNodes,\n\t\t\t\tthis.stickyScrollMaxItemCount,\n\t\t\t\tmaximumStickyWidgetHeight,\n\t\t\t);\n\n\t\tif (!constrainedStickyNodes.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Validate constraints\n\t\tconst lastConstrainedStickyNode =\n\t\t\tconstrainedStickyNodes[constrainedStickyNodes.length - 1];\n\t\tif (\n\t\t\tconstrainedStickyNodes.length > this.stickyScrollMaxItemCount ||\n\t\t\tlastConstrainedStickyNode.position +\n\t\t\t\tlastConstrainedStickyNode.height >\n\t\t\t\tmaximumStickyWidgetHeight\n\t\t) {\n\t\t\tthrow new Error(\"stickyScrollDelegate violates constraints\");\n\t\t}\n\n\t\treturn constrainedStickyNodes;\n\t}\n\n\tprivate getParentNode(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t): ITreeNode<T, TFilterData> | undefined {\n\t\tconst nodeLocation = this.model.getNodeLocation(node);\n\t\tconst parentLocation = this.model.getParentNodeLocation(nodeLocation);\n\t\treturn parentLocation ? this.model.getNode(parentLocation) : undefined;\n\t}\n\n\tprivate nodeIsUncollapsedParent(node: ITreeNode<T, TFilterData>): boolean {\n\t\tconst nodeLocation = this.model.getNodeLocation(node);\n\t\treturn this.model.getListRenderCount(nodeLocation) > 1;\n\t}\n\n\tprivate getNodeIndex(node: ITreeNode<T, TFilterData>): number {\n\t\tconst nodeLocation = this.model.getNodeLocation(node);\n\t\tconst nodeIndex = this.model.getListIndex(nodeLocation);\n\t\treturn nodeIndex;\n\t}\n\n\tprivate getNodeRange(node: ITreeNode<T, TFilterData>): {\n\t\tstartIndex: number;\n\t\tendIndex: number;\n\t} {\n\t\tconst nodeLocation = this.model.getNodeLocation(node);\n\t\tconst startIndex = this.model.getListIndex(nodeLocation);\n\n\t\tif (startIndex < 0) {\n\t\t\tthrow new Error(\"Node not found in tree\");\n\t\t}\n\n\t\tconst renderCount = this.model.getListRenderCount(nodeLocation);\n\t\tconst endIndex = startIndex + renderCount - 1;\n\n\t\treturn { startIndex, endIndex };\n\t}\n\n\tnodePositionTopBelowWidget(node: ITreeNode<T, TFilterData>): number {\n\t\tconst ancestors = [];\n\t\tlet currentAncestor = this.getParentNode(node);\n\t\twhile (currentAncestor) {\n\t\t\tancestors.push(currentAncestor);\n\t\t\tcurrentAncestor = this.getParentNode(currentAncestor);\n\t\t}\n\n\t\tlet widgetHeight = 0;\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti < ancestors.length && i < this.stickyScrollMaxItemCount;\n\t\t\ti++\n\t\t) {\n\t\t\twidgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n\t\t}\n\t\treturn widgetHeight;\n\t}\n\n\tgetFocus(): T | undefined {\n\t\treturn this._widget.getFocus();\n\t}\n\n\tdomFocus(): void {\n\t\tthis._widget.domFocus();\n\t}\n\n\t// Whether sticky scroll was the last focused part in the tree or not\n\tfocusedLast(): boolean {\n\t\treturn this._widget.focusedLast();\n\t}\n\n\tupdateOptions(optionsUpdate: IAbstractTreeOptionsUpdate = {}): void {\n\t\tif (!optionsUpdate.stickyScrollMaxItemCount) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst validatedOptions = this.validateStickySettings(optionsUpdate);\n\t\tif (\n\t\t\tthis.stickyScrollMaxItemCount !==\n\t\t\tvalidatedOptions.stickyScrollMaxItemCount\n\t\t) {\n\t\t\tthis.stickyScrollMaxItemCount =\n\t\t\t\tvalidatedOptions.stickyScrollMaxItemCount;\n\t\t\tthis.update();\n\t\t}\n\t}\n\n\tvalidateStickySettings(options: IAbstractTreeOptionsUpdate): {\n\t\tstickyScrollMaxItemCount: number;\n\t} {\n\t\tlet stickyScrollMaxItemCount = 7;\n\t\tif (typeof options.stickyScrollMaxItemCount === \"number\") {\n\t\t\tstickyScrollMaxItemCount = Math.max(\n\t\t\t\toptions.stickyScrollMaxItemCount,\n\t\t\t\t1,\n\t\t\t);\n\t\t}\n\t\treturn { stickyScrollMaxItemCount };\n\t}\n\n\tsetModel(model: ITreeModel<T, TFilterData, TRef>): void {\n\t\tthis.model = model;\n\t}\n}\n\nclass StickyScrollWidget<T, TFilterData, TRef> implements IDisposable {\n\tprivate readonly _rootDomNode: HTMLElement;\n\tprivate _previousState: StickyScrollState<T, TFilterData, TRef> | undefined;\n\tprivate _previousElements: HTMLElement[] = [];\n\tprivate readonly _previousStateDisposables: DisposableStore =\n\t\tnew DisposableStore();\n\n\tprivate stickyScrollFocus: StickyScrollFocus<T, TFilterData, TRef>;\n\treadonly onDidChangeHasFocus: Event<boolean>;\n\treadonly onContextMenu: Event<ITreeContextMenuEvent<T>>;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate readonly view: List<ITreeNode<T, TFilterData>>,\n\t\tprivate readonly tree: AbstractTree<T, TFilterData, TRef>,\n\t\tprivate readonly treeRenderers: TreeRenderer<\n\t\t\tT,\n\t\t\tTFilterData,\n\t\t\tTRef,\n\t\t\tany\n\t\t>[],\n\t\tprivate readonly treeDelegate: IListVirtualDelegate<\n\t\t\tITreeNode<T, TFilterData>\n\t\t>,\n\t\tprivate readonly accessibilityProvider:\n\t\t\t| IListAccessibilityProvider<T>\n\t\t\t| undefined,\n\t) {\n\t\tthis._rootDomNode = $(\".monaco-tree-sticky-container.empty\");\n\t\tcontainer.appendChild(this._rootDomNode);\n\n\t\tconst shadow = $(\".monaco-tree-sticky-container-shadow\");\n\t\tthis._rootDomNode.appendChild(shadow);\n\n\t\tthis.stickyScrollFocus = new StickyScrollFocus(this._rootDomNode, view);\n\t\tthis.onDidChangeHasFocus = this.stickyScrollFocus.onDidChangeHasFocus;\n\t\tthis.onContextMenu = this.stickyScrollFocus.onContextMenu;\n\t}\n\n\tget height(): number {\n\t\tif (!this._previousState) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst lastElement =\n\t\t\tthis._previousState.stickyNodes[this._previousState.count - 1];\n\t\treturn lastElement.position + lastElement.height;\n\t}\n\n\tget count(): number {\n\t\treturn this._previousState?.count ?? 0;\n\t}\n\n\tgetNode(\n\t\tnode: ITreeNode<T, TFilterData>,\n\t): StickyScrollNode<T, TFilterData> | undefined {\n\t\treturn this._previousState?.stickyNodes.find(\n\t\t\t(stickyNode) => stickyNode.node === node,\n\t\t);\n\t}\n\n\tsetState(state: StickyScrollState<T, TFilterData, TRef> | undefined): void {\n\t\tconst wasVisible =\n\t\t\t!!this._previousState && this._previousState.count > 0;\n\t\tconst isVisible = !!state && state.count > 0;\n\n\t\t// If state has not changed, do nothing\n\t\tif (\n\t\t\t(!wasVisible && !isVisible) ||\n\t\t\t(wasVisible && isVisible && this._previousState!.equal(state))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update visibility of the widget if changed\n\t\tif (wasVisible !== isVisible) {\n\t\t\tthis.setVisible(isVisible);\n\t\t}\n\n\t\tif (!isVisible) {\n\t\t\tthis._previousState = undefined;\n\t\t\tthis._previousElements = [];\n\t\t\tthis._previousStateDisposables.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst lastStickyNode = state.stickyNodes[state.count - 1];\n\n\t\t// If the new state is only a change in the last node's position, update the position of the last element\n\t\tif (\n\t\t\tthis._previousState &&\n\t\t\tstate.animationStateChanged(this._previousState)\n\t\t) {\n\t\t\tthis._previousElements[this._previousState.count - 1].style.top =\n\t\t\t\t`${lastStickyNode.position}px`;\n\t\t}\n\t\t// create new dom elements\n\t\telse {\n\t\t\tthis._previousStateDisposables.clear();\n\n\t\t\tconst elements = Array(state.count);\n\t\t\tfor (\n\t\t\t\tlet stickyIndex = state.count - 1;\n\t\t\t\tstickyIndex >= 0;\n\t\t\t\tstickyIndex--\n\t\t\t) {\n\t\t\t\tconst stickyNode = state.stickyNodes[stickyIndex];\n\n\t\t\t\tconst { element, disposable } = this.createElement(\n\t\t\t\t\tstickyNode,\n\t\t\t\t\tstickyIndex,\n\t\t\t\t\tstate.count,\n\t\t\t\t);\n\t\t\t\telements[stickyIndex] = element;\n\n\t\t\t\tthis._rootDomNode.appendChild(element);\n\t\t\t\tthis._previousStateDisposables.add(disposable);\n\t\t\t}\n\n\t\t\tthis.stickyScrollFocus.updateElements(elements, state);\n\n\t\t\tthis._previousElements = elements;\n\t\t}\n\n\t\tthis._previousState = state;\n\n\t\t// Set the height of the widget to the bottom of the last sticky node\n\t\tthis._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n\t}\n\n\tprivate createElement(\n\t\tstickyNode: StickyScrollNode<T, TFilterData>,\n\t\tstickyIndex: number,\n\t\tstickyNodesTotal: number,\n\t): { element: HTMLElement; disposable: IDisposable } {\n\t\tconst nodeIndex = stickyNode.startIndex;\n\n\t\t// Sticky element container\n\t\tconst stickyElement = document.createElement(\"div\");\n\t\tstickyElement.style.top = `${stickyNode.position}px`;\n\n\t\tif (this.tree.options.setRowHeight !== false) {\n\t\t\tstickyElement.style.height = `${stickyNode.height}px`;\n\t\t}\n\n\t\tif (this.tree.options.setRowLineHeight !== false) {\n\t\t\tstickyElement.style.lineHeight = `${stickyNode.height}px`;\n\t\t}\n\n\t\tstickyElement.classList.add(\"monaco-tree-sticky-row\");\n\t\tstickyElement.classList.add(\"monaco-list-row\");\n\n\t\tstickyElement.setAttribute(\"data-index\", `${nodeIndex}`);\n\t\tstickyElement.setAttribute(\n\t\t\t\"data-parity\",\n\t\t\tnodeIndex % 2 === 0 ? \"even\" : \"odd\",\n\t\t);\n\t\tstickyElement.setAttribute(\"id\", this.view.getElementID(nodeIndex));\n\t\tconst accessibilityDisposable = this.setAccessibilityAttributes(\n\t\t\tstickyElement,\n\t\t\tstickyNode.node.element,\n\t\t\tstickyIndex,\n\t\t\tstickyNodesTotal,\n\t\t);\n\n\t\t// Get the renderer for the node\n\t\tconst nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n\t\tconst renderer = this.treeRenderers.find(\n\t\t\t(renderer) => renderer.templateId === nodeTemplateId,\n\t\t);\n\t\tif (!renderer) {\n\t\t\tthrow new Error(\n\t\t\t\t`No renderer found for template id ${nodeTemplateId}`,\n\t\t\t);\n\t\t}\n\n\t\t// To make sure we do not influence the original node, we create a copy of the node\n\t\t// We need to check if it is already a unique instance of the node by the delegate\n\t\tlet nodeCopy = stickyNode.node;\n\t\tif (\n\t\t\tnodeCopy ===\n\t\t\tthis.tree.getNode(this.tree.getNodeLocation(stickyNode.node))\n\t\t) {\n\t\t\tnodeCopy = new Proxy(stickyNode.node, {});\n\t\t}\n\n\t\t// Render the element\n\t\tconst templateData = renderer.renderTemplate(stickyElement);\n\t\trenderer.renderElement(\n\t\t\tnodeCopy,\n\t\t\tstickyNode.startIndex,\n\t\t\ttemplateData,\n\t\t\tstickyNode.height,\n\t\t);\n\n\t\t// Remove the element from the DOM when state is disposed\n\t\tconst disposable = toDisposable(() => {\n\t\t\taccessibilityDisposable.dispose();\n\t\t\trenderer.disposeElement(\n\t\t\t\tnodeCopy,\n\t\t\t\tstickyNode.startIndex,\n\t\t\t\ttemplateData,\n\t\t\t\tstickyNode.height,\n\t\t\t);\n\t\t\trenderer.disposeTemplate(templateData);\n\t\t\tstickyElement.remove();\n\t\t});\n\n\t\treturn { element: stickyElement, disposable };\n\t}\n\n\tprivate setAccessibilityAttributes(\n\t\tcontainer: HTMLElement,\n\t\telement: T,\n\t\tstickyIndex: number,\n\t\tstickyNodesTotal: number,\n\t): IDisposable {\n\t\tif (!this.accessibilityProvider) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.accessibilityProvider.getSetSize) {\n\t\t\tcontainer.setAttribute(\n\t\t\t\t\"aria-setsize\",\n\t\t\t\tString(\n\t\t\t\t\tthis.accessibilityProvider.getSetSize(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\tstickyIndex,\n\t\t\t\t\t\tstickyNodesTotal,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (this.accessibilityProvider.getPosInSet) {\n\t\t\tcontainer.setAttribute(\n\t\t\t\t\"aria-posinset\",\n\t\t\t\tString(\n\t\t\t\t\tthis.accessibilityProvider.getPosInSet(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\tstickyIndex,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (this.accessibilityProvider.getRole) {\n\t\t\tcontainer.setAttribute(\n\t\t\t\t\"role\",\n\t\t\t\tthis.accessibilityProvider.getRole(element) ?? \"treeitem\",\n\t\t\t);\n\t\t}\n\n\t\tconst ariaLabel = this.accessibilityProvider.getAriaLabel(element);\n\t\tconst observable =\n\t\t\tariaLabel && typeof ariaLabel !== \"string\"\n\t\t\t\t? ariaLabel\n\t\t\t\t: constObservable(ariaLabel);\n\t\tconst result = autorun((reader) => {\n\t\t\tconst value = reader.readObservable(observable);\n\n\t\t\tif (value) {\n\t\t\t\tcontainer.setAttribute(\"aria-label\", value);\n\t\t\t} else {\n\t\t\t\tcontainer.removeAttribute(\"aria-label\");\n\t\t\t}\n\t\t});\n\n\t\tif (typeof ariaLabel === \"string\") {\n\t\t} else if (ariaLabel) {\n\t\t\tcontainer.setAttribute(\"aria-label\", ariaLabel.get());\n\t\t}\n\n\t\tconst ariaLevel =\n\t\t\tthis.accessibilityProvider.getAriaLevel &&\n\t\t\tthis.accessibilityProvider.getAriaLevel(element);\n\t\tif (typeof ariaLevel === \"number\") {\n\t\t\tcontainer.setAttribute(\"aria-level\", `${ariaLevel}`);\n\t\t}\n\n\t\t// Sticky Scroll elements can not be selected\n\t\tcontainer.setAttribute(\"aria-selected\", String(false));\n\n\t\treturn result;\n\t}\n\n\tprivate setVisible(visible: boolean): void {\n\t\tthis._rootDomNode.classList.toggle(\"empty\", !visible);\n\n\t\tif (!visible) {\n\t\t\tthis.stickyScrollFocus.updateElements([], undefined);\n\t\t}\n\t}\n\n\tgetFocus(): T | undefined {\n\t\treturn this.stickyScrollFocus.getFocus();\n\t}\n\n\tdomFocus(): void {\n\t\tthis.stickyScrollFocus.domFocus();\n\t}\n\n\tfocusedLast(): boolean {\n\t\treturn this.stickyScrollFocus.focusedLast();\n\t}\n\n\tdispose(): void {\n\t\tthis.stickyScrollFocus.dispose();\n\t\tthis._previousStateDisposables.dispose();\n\t\tthis._rootDomNode.remove();\n\t}\n}\n\nclass StickyScrollFocus<T, TFilterData, TRef> extends Disposable {\n\tprivate focusedIndex = -1;\n\tprivate elements: HTMLElement[] = [];\n\tprivate state: StickyScrollState<T, TFilterData, TRef> | undefined;\n\n\tprivate _onDidChangeHasFocus = new Emitter<boolean>();\n\treadonly onDidChangeHasFocus = this._onDidChangeHasFocus.event;\n\n\tprivate _onContextMenu = new Emitter<ITreeContextMenuEvent<T>>();\n\treadonly onContextMenu: Event<ITreeContextMenuEvent<T>> =\n\t\tthis._onContextMenu.event;\n\n\tprivate _domHasFocus = false;\n\tprivate get domHasFocus(): boolean {\n\t\treturn this._domHasFocus;\n\t}\n\tprivate set domHasFocus(hasFocus: boolean) {\n\t\tif (hasFocus !== this._domHasFocus) {\n\t\t\tthis._onDidChangeHasFocus.fire(hasFocus);\n\t\t\tthis._domHasFocus = hasFocus;\n\t\t}\n\t}\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly view: List<ITreeNode<T, TFilterData>>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\taddDisposableListener(this.container, \"focus\", () =>\n\t\t\t\tthis.onFocus(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\taddDisposableListener(this.container, \"blur\", () => this.onBlur()),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.view.onDidFocus(() => this.toggleStickyScrollFocused(false)),\n\t\t);\n\t\tthis._register(this.view.onKeyDown((e) => this.onKeyDown(e)));\n\t\tthis._register(this.view.onMouseDown((e) => this.onMouseDown(e)));\n\t\tthis._register(\n\t\t\tthis.view.onContextMenu((e) => this.handleContextMenu(e)),\n\t\t);\n\t}\n\n\tprivate handleContextMenu(\n\t\te: IListContextMenuEvent<ITreeNode<T, TFilterData>>,\n\t): void {\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tif (\n\t\t\t!isStickyScrollContainer(target) &&\n\t\t\t!isStickyScrollElement(target)\n\t\t) {\n\t\t\tif (this.focusedLast()) {\n\t\t\t\tthis.view.domFocus();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// The list handles the context menu triggered by a mouse event\n\t\t// In that case only set the focus of the element clicked and leave the rest to the list to handle\n\t\tif (!isKeyboardEvent(e.browserEvent)) {\n\t\t\tif (!this.state) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Context menu should not be triggered when state is undefined\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst stickyIndex = this.state.stickyNodes.findIndex(\n\t\t\t\t(stickyNode) => stickyNode.node.element === e.element?.element,\n\t\t\t);\n\n\t\t\tif (stickyIndex === -1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Context menu should not be triggered when element is not in sticky scroll widget\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.container.focus();\n\t\t\tthis.setFocus(stickyIndex);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.state || this.focusedIndex < 0) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Context menu key should not be triggered when focus is not in sticky scroll widget\",\n\t\t\t);\n\t\t}\n\n\t\tconst stickyNode = this.state.stickyNodes[this.focusedIndex];\n\t\tconst element = stickyNode.node.element;\n\t\tconst anchor = this.elements[this.focusedIndex];\n\t\tthis._onContextMenu.fire({\n\t\t\telement,\n\t\t\tanchor,\n\t\t\tbrowserEvent: e.browserEvent,\n\t\t\tisStickyScroll: true,\n\t\t});\n\t}\n\n\tprivate onKeyDown(e: KeyboardEvent): void {\n\t\t// Sticky Scroll Navigation\n\t\tif (this.domHasFocus && this.state) {\n\t\t\t// Move up\n\t\t\tif (e.key === \"ArrowUp\") {\n\t\t\t\tthis.setFocusedElement(Math.max(0, this.focusedIndex - 1));\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t\t// Move down, if last sticky node is focused, move focus into first child of last sticky node\n\t\t\telse if (e.key === \"ArrowDown\" || e.key === \"ArrowRight\") {\n\t\t\t\tif (this.focusedIndex >= this.state.count - 1) {\n\t\t\t\t\tconst nodeIndexToFocus =\n\t\t\t\t\t\tthis.state.stickyNodes[this.state.count - 1]\n\t\t\t\t\t\t\t.startIndex + 1;\n\t\t\t\t\tthis.view.domFocus();\n\t\t\t\t\tthis.view.setFocus([nodeIndexToFocus]);\n\t\t\t\t\tthis.scrollNodeUnderWidget(nodeIndexToFocus, this.state);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setFocusedElement(this.focusedIndex + 1);\n\t\t\t\t}\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onMouseDown(e: IListMouseEvent<ITreeNode<T, TFilterData>>): void {\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tif (\n\t\t\t!isStickyScrollContainer(target) &&\n\t\t\t!isStickyScrollElement(target)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\te.browserEvent.preventDefault();\n\t\te.browserEvent.stopPropagation();\n\t}\n\n\tupdateElements(\n\t\telements: HTMLElement[],\n\t\tstate: StickyScrollState<T, TFilterData, TRef> | undefined,\n\t): void {\n\t\tif (state && state.count === 0) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Sticky scroll state must be undefined when there are no sticky nodes\",\n\t\t\t);\n\t\t}\n\t\tif (state && state.count !== elements.length) {\n\t\t\tthrow new Error(\"Sticky scroll focus received illigel state\");\n\t\t}\n\n\t\tconst previousIndex = this.focusedIndex;\n\t\tthis.removeFocus();\n\n\t\tthis.elements = elements;\n\t\tthis.state = state;\n\n\t\tif (state) {\n\t\t\tconst newFocusedIndex = clamp(previousIndex, 0, state.count - 1);\n\t\t\tthis.setFocus(newFocusedIndex);\n\t\t} else if (this.domHasFocus) {\n\t\t\tthis.view.domFocus();\n\t\t}\n\n\t\t// must come last as it calls blur()\n\t\tthis.container.tabIndex = state ? 0 : -1;\n\t}\n\n\tprivate setFocusedElement(stickyIndex: number): void {\n\t\t// doesn't imply that the widget has (or will have) focus\n\n\t\tconst state = this.state;\n\t\tif (!state) {\n\t\t\tthrow new Error(\"Cannot set focus when state is undefined\");\n\t\t}\n\n\t\tthis.setFocus(stickyIndex);\n\n\t\tif (stickyIndex < state.count - 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the last sticky node is not fully visible, scroll it into view\n\t\tif (state.lastNodePartiallyVisible()) {\n\t\t\tconst lastStickyNode = state.stickyNodes[stickyIndex];\n\t\t\tthis.scrollNodeUnderWidget(lastStickyNode.endIndex + 1, state);\n\t\t}\n\t}\n\n\tprivate scrollNodeUnderWidget(\n\t\tnodeIndex: number,\n\t\tstate: StickyScrollState<T, TFilterData, TRef>,\n\t) {\n\t\tconst lastStickyNode = state.stickyNodes[state.count - 1];\n\t\tconst secondLastStickyNode =\n\t\t\tstate.count > 1 ? state.stickyNodes[state.count - 2] : undefined;\n\n\t\tconst elementScrollTop = this.view.getElementTop(nodeIndex);\n\t\tconst elementTargetViewTop = secondLastStickyNode\n\t\t\t? secondLastStickyNode.position +\n\t\t\t\tsecondLastStickyNode.height +\n\t\t\t\tlastStickyNode.height\n\t\t\t: lastStickyNode.height;\n\t\tthis.view.scrollTop = elementScrollTop - elementTargetViewTop;\n\t}\n\n\tgetFocus(): T | undefined {\n\t\tif (!this.state || this.focusedIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.state.stickyNodes[this.focusedIndex].node.element;\n\t}\n\n\tdomFocus(): void {\n\t\tif (!this.state) {\n\t\t\tthrow new Error(\"Cannot focus when state is undefined\");\n\t\t}\n\n\t\tthis.container.focus();\n\t}\n\n\tfocusedLast(): boolean {\n\t\tif (!this.state) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.view\n\t\t\t.getHTMLElement()\n\t\t\t.classList.contains(\"sticky-scroll-focused\");\n\t}\n\n\tprivate removeFocus(): void {\n\t\tif (this.focusedIndex === -1) {\n\t\t\treturn;\n\t\t}\n\t\tthis.toggleElementFocus(this.elements[this.focusedIndex], false);\n\t\tthis.focusedIndex = -1;\n\t}\n\n\tprivate setFocus(newFocusIndex: number): void {\n\t\tif (newFocusIndex < 0) {\n\t\t\tthrow new Error(\"addFocus() can not remove focus\");\n\t\t}\n\t\tif (!this.state && newFocusIndex >= 0) {\n\t\t\tthrow new Error(\"Cannot set focus index when state is undefined\");\n\t\t}\n\t\tif (this.state && newFocusIndex >= this.state.count) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot set focus index to an index that does not exist\",\n\t\t\t);\n\t\t}\n\n\t\tconst oldIndex = this.focusedIndex;\n\t\tif (oldIndex >= 0) {\n\t\t\tthis.toggleElementFocus(this.elements[oldIndex], false);\n\t\t}\n\t\tif (newFocusIndex >= 0) {\n\t\t\tthis.toggleElementFocus(this.elements[newFocusIndex], true);\n\t\t}\n\t\tthis.focusedIndex = newFocusIndex;\n\t}\n\n\tprivate toggleElementFocus(element: HTMLElement, focused: boolean): void {\n\t\tthis.toggleElementActiveFocus(element, focused && this.domHasFocus);\n\t\tthis.toggleElementPassiveFocus(element, focused);\n\t}\n\n\tprivate toggleCurrentElementActiveFocus(focused: boolean): void {\n\t\tif (this.focusedIndex === -1) {\n\t\t\treturn;\n\t\t}\n\t\tthis.toggleElementActiveFocus(\n\t\t\tthis.elements[this.focusedIndex],\n\t\t\tfocused,\n\t\t);\n\t}\n\n\tprivate toggleElementActiveFocus(element: HTMLElement, focused: boolean) {\n\t\t// active focus is set when sticky scroll has focus\n\t\telement.classList.toggle(\"focused\", focused);\n\t}\n\n\tprivate toggleElementPassiveFocus(element: HTMLElement, focused: boolean) {\n\t\t// passive focus allows to show focus when sticky scroll does not have focus\n\t\t// for example when the context menu has focus\n\t\telement.classList.toggle(\"passive-focused\", focused);\n\t}\n\n\tprivate toggleStickyScrollFocused(focused: boolean) {\n\t\t// Weather the last focus in the view was sticky scroll and not the list\n\t\t// Is only removed when the focus is back in the tree an no longer in sticky scroll\n\t\tthis.view\n\t\t\t.getHTMLElement()\n\t\t\t.classList.toggle(\"sticky-scroll-focused\", focused);\n\t}\n\n\tprivate onFocus(): void {\n\t\tif (!this.state || this.elements.length === 0) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot focus when state is undefined or elements are empty\",\n\t\t\t);\n\t\t}\n\t\tthis.domHasFocus = true;\n\t\tthis.toggleStickyScrollFocused(true);\n\t\tthis.toggleCurrentElementActiveFocus(true);\n\t\tif (this.focusedIndex === -1) {\n\t\t\tthis.setFocus(0);\n\t\t}\n\t}\n\n\tprivate onBlur(): void {\n\t\tthis.domHasFocus = false;\n\t\tthis.toggleCurrentElementActiveFocus(false);\n\t}\n\n\toverride dispose(): void {\n\t\tthis.toggleStickyScrollFocused(false);\n\t\tthis._onDidChangeHasFocus.fire(false);\n\t\tsuper.dispose();\n\t}\n}\n\nfunction asTreeMouseEvent<T>(\n\tevent: IListMouseEvent<ITreeNode<T, any>>,\n): ITreeMouseEvent<T> {\n\tlet target: TreeMouseEventTarget = TreeMouseEventTarget.Unknown;\n\n\tif (\n\t\thasParentWithClass(\n\t\t\tevent.browserEvent.target as HTMLElement,\n\t\t\t\"monaco-tl-twistie\",\n\t\t\t\"monaco-tl-row\",\n\t\t)\n\t) {\n\t\ttarget = TreeMouseEventTarget.Twistie;\n\t} else if (\n\t\thasParentWithClass(\n\t\t\tevent.browserEvent.target as HTMLElement,\n\t\t\t\"monaco-tl-contents\",\n\t\t\t\"monaco-tl-row\",\n\t\t)\n\t) {\n\t\ttarget = TreeMouseEventTarget.Element;\n\t} else if (\n\t\thasParentWithClass(\n\t\t\tevent.browserEvent.target as HTMLElement,\n\t\t\t\"monaco-tree-type-filter\",\n\t\t\t\"monaco-list\",\n\t\t)\n\t) {\n\t\ttarget = TreeMouseEventTarget.Filter;\n\t}\n\n\treturn {\n\t\tbrowserEvent: event.browserEvent,\n\t\telement: event.element ? event.element.element : null,\n\t\ttarget,\n\t};\n}\n\nfunction asTreeContextMenuEvent<T>(\n\tevent: IListContextMenuEvent<ITreeNode<T, any>>,\n): ITreeContextMenuEvent<T> {\n\tconst isStickyScroll = isStickyScrollContainer(\n\t\tevent.browserEvent.target as HTMLElement,\n\t);\n\n\treturn {\n\t\telement: event.element ? event.element.element : null,\n\t\tbrowserEvent: event.browserEvent,\n\t\tanchor: event.anchor,\n\t\tisStickyScroll,\n\t};\n}\n\nexport interface IAbstractTreeOptionsUpdate extends ITreeRendererOptions {\n\treadonly multipleSelectionSupport?: boolean;\n\treadonly typeNavigationEnabled?: boolean;\n\treadonly typeNavigationMode?: TypeNavigationMode;\n\treadonly defaultFindMode?: TreeFindMode;\n\treadonly defaultFindMatchType?: TreeFindMatchType;\n\treadonly showNotFoundMessage?: boolean;\n\treadonly smoothScrolling?: boolean;\n\treadonly horizontalScrolling?: boolean;\n\treadonly scrollByPage?: boolean;\n\treadonly mouseWheelScrollSensitivity?: number;\n\treadonly fastScrollSensitivity?: number;\n\treadonly expandOnDoubleClick?: boolean;\n\treadonly expandOnlyOnTwistieClick?: boolean | ((e: any) => boolean); // e is T\n\treadonly enableStickyScroll?: boolean;\n\treadonly stickyScrollMaxItemCount?: number;\n}\n\nexport interface IAbstractTreeOptions<T, TFilterData = void>\n\textends IAbstractTreeOptionsUpdate,\n\t\tIListOptions<T> {\n\treadonly contextViewProvider?: IContextViewProvider;\n\treadonly collapseByDefault?: boolean; // defaults to false\n\treadonly allowNonCollapsibleParents?: boolean; // defaults to false\n\treadonly filter?: ITreeFilter<T, TFilterData>;\n\treadonly dnd?: ITreeDragAndDrop<T>;\n\treadonly paddingBottom?: number;\n\treadonly findWidgetEnabled?: boolean;\n\treadonly findWidgetStyles?: IFindWidgetStyles;\n\treadonly defaultFindVisibility?:\n\t\t| TreeVisibility\n\t\t| ((e: T) => TreeVisibility);\n\treadonly stickyScrollDelegate?: IStickyScrollDelegate<any, TFilterData>;\n}\n\nfunction dfs<T, TFilterData>(\n\tnode: ITreeNode<T, TFilterData>,\n\tfn: (node: ITreeNode<T, TFilterData>) => void,\n): void {\n\tfn(node);\n\tnode.children.forEach((child) => dfs(child, fn));\n}\n\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait<T> {\n\tprivate nodes: ITreeNode<T, any>[] = [];\n\tprivate elements: T[] | undefined;\n\n\tprivate readonly _onDidChange = new Emitter<ITreeEvent<T>>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate _nodeSet: Set<ITreeNode<T, any>> | undefined;\n\tprivate get nodeSet(): Set<ITreeNode<T, any>> {\n\t\tif (!this._nodeSet) {\n\t\t\tthis._nodeSet = this.createNodeSet();\n\t\t}\n\n\t\treturn this._nodeSet;\n\t}\n\n\tconstructor(\n\t\tprivate getFirstViewElementWithTrait: () =>\n\t\t\t| ITreeNode<T, any>\n\t\t\t| undefined,\n\t\tprivate identityProvider?: IIdentityProvider<T>,\n\t) {}\n\n\tset(nodes: ITreeNode<T, any>[], browserEvent?: UIEvent): void {\n\t\tif (!(browserEvent as any)?.__forceEvent && equals(this.nodes, nodes)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._set(nodes, false, browserEvent);\n\t}\n\n\tprivate _set(\n\t\tnodes: ITreeNode<T, any>[],\n\t\tsilent: boolean,\n\t\tbrowserEvent?: UIEvent,\n\t): void {\n\t\tthis.nodes = [...nodes];\n\t\tthis.elements = undefined;\n\t\tthis._nodeSet = undefined;\n\n\t\tif (!silent) {\n\t\t\tconst that = this;\n\t\t\tthis._onDidChange.fire({\n\t\t\t\tget elements() {\n\t\t\t\t\treturn that.get();\n\t\t\t\t},\n\t\t\t\tbrowserEvent,\n\t\t\t});\n\t\t}\n\t}\n\n\tget(): T[] {\n\t\tif (!this.elements) {\n\t\t\tthis.elements = this.nodes.map((node) => node.element);\n\t\t}\n\n\t\treturn [...this.elements];\n\t}\n\n\tgetNodes(): readonly ITreeNode<T, any>[] {\n\t\treturn this.nodes;\n\t}\n\n\thas(node: ITreeNode<T, any>): boolean {\n\t\treturn this.nodeSet.has(node);\n\t}\n\n\tonDidModelSplice({\n\t\tinsertedNodes,\n\t\tdeletedNodes,\n\t}: ITreeModelSpliceEvent<T, any>): void {\n\t\tif (!this.identityProvider) {\n\t\t\tconst set = this.createNodeSet();\n\t\t\tconst visit = (node: ITreeNode<T, any>) => set.delete(node);\n\t\t\tdeletedNodes.forEach((node) => dfs(node, visit));\n\t\t\tthis.set([...set.values()]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst deletedNodesIdSet = new Set<string>();\n\t\tconst deletedNodesVisitor = (node: ITreeNode<T, any>) =>\n\t\t\tdeletedNodesIdSet.add(\n\t\t\t\tthis.identityProvider!.getId(node.element).toString(),\n\t\t\t);\n\t\tdeletedNodes.forEach((node) => dfs(node, deletedNodesVisitor));\n\n\t\tconst insertedNodesMap = new Map<string, ITreeNode<T, any>>();\n\t\tconst insertedNodesVisitor = (node: ITreeNode<T, any>) =>\n\t\t\tinsertedNodesMap.set(\n\t\t\t\tthis.identityProvider!.getId(node.element).toString(),\n\t\t\t\tnode,\n\t\t\t);\n\t\tinsertedNodes.forEach((node) => dfs(node, insertedNodesVisitor));\n\n\t\tconst nodes: ITreeNode<T, any>[] = [];\n\n\t\tfor (const node of this.nodes) {\n\t\t\tconst id = this.identityProvider.getId(node.element).toString();\n\t\t\tconst wasDeleted = deletedNodesIdSet.has(id);\n\n\t\t\tif (wasDeleted) {\n\t\t\t\tconst insertedNode = insertedNodesMap.get(id);\n\n\t\t\t\tif (insertedNode && insertedNode.visible) {\n\t\t\t\t\tnodes.push(insertedNode);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t}\n\n\t\tif (this.nodes.length > 0 && nodes.length === 0) {\n\t\t\tconst node = this.getFirstViewElementWithTrait();\n\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t}\n\n\t\tthis._set(nodes, true);\n\t}\n\n\tprivate createNodeSet(): Set<ITreeNode<T, any>> {\n\t\tconst set = new Set<ITreeNode<T, any>>();\n\n\t\tfor (const node of this.nodes) {\n\t\t\tset.add(node);\n\t\t}\n\n\t\treturn set;\n\t}\n}\n\nclass TreeNodeListMouseController<T, TFilterData, TRef> extends MouseController<\n\tITreeNode<T, TFilterData>\n> {\n\tconstructor(\n\t\tlist: TreeNodeList<T, TFilterData, TRef>,\n\t\tprivate tree: AbstractTree<T, TFilterData, TRef>,\n\t\tprivate stickyScrollProvider: () =>\n\t\t\t| StickyScrollController<T, TFilterData, TRef>\n\t\t\t| undefined,\n\t) {\n\t\tsuper(list);\n\t}\n\n\tprotected override onViewPointer(\n\t\te: IListMouseEvent<ITreeNode<T, TFilterData>>,\n\t): void {\n\t\tif (\n\t\t\tisButton(e.browserEvent.target as HTMLElement) ||\n\t\t\tisEditableElement(e.browserEvent.target as HTMLElement) ||\n\t\t\tisMonacoEditor(e.browserEvent.target as HTMLElement)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (e.browserEvent.isHandledByList) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = e.element;\n\n\t\tif (!node) {\n\t\t\treturn super.onViewPointer(e);\n\t\t}\n\n\t\tif (\n\t\t\tthis.isSelectionRangeChangeEvent(e) ||\n\t\t\tthis.isSelectionSingleChangeEvent(e)\n\t\t) {\n\t\t\treturn super.onViewPointer(e);\n\t\t}\n\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tconst onTwistie =\n\t\t\ttarget.classList.contains(\"monaco-tl-twistie\") ||\n\t\t\t(target.classList.contains(\"monaco-icon-label\") &&\n\t\t\t\ttarget.classList.contains(\"folder-icon\") &&\n\t\t\t\te.browserEvent.offsetX < 16);\n\t\tconst isStickyElement = isStickyScrollElement(\n\t\t\te.browserEvent.target as HTMLElement,\n\t\t);\n\n\t\tlet expandOnlyOnTwistieClick = false;\n\n\t\tif (isStickyElement) {\n\t\t\texpandOnlyOnTwistieClick = true;\n\t\t} else if (typeof this.tree.expandOnlyOnTwistieClick === \"function\") {\n\t\t\texpandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(\n\t\t\t\tnode.element,\n\t\t\t);\n\t\t} else {\n\t\t\texpandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n\t\t}\n\n\t\tif (isStickyElement) {\n\t\t\tthis.handleStickyScrollMouseEvent(e, node);\n\t\t} else {\n\t\t\tif (\n\t\t\t\texpandOnlyOnTwistieClick &&\n\t\t\t\t!onTwistie &&\n\t\t\t\te.browserEvent.detail !== 2\n\t\t\t) {\n\t\t\t\treturn super.onViewPointer(e);\n\t\t\t}\n\n\t\t\tif (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n\t\t\t\treturn super.onViewPointer(e);\n\t\t\t}\n\t\t}\n\n\t\tif (node.collapsible && (!isStickyElement || onTwistie)) {\n\t\t\tconst location = this.tree.getNodeLocation(node);\n\t\t\tconst recursive = e.browserEvent.altKey;\n\t\t\tthis.tree.setFocus([location]);\n\t\t\tthis.tree.toggleCollapsed(location, recursive);\n\n\t\t\tif (onTwistie) {\n\t\t\t\t// Do not set this before calling a handler on the super class, because it will reject it as handled\n\t\t\t\te.browserEvent.isHandledByList = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (!isStickyElement) {\n\t\t\tsuper.onViewPointer(e);\n\t\t}\n\t}\n\n\tprivate handleStickyScrollMouseEvent(\n\t\te: IListMouseEvent<ITreeNode<T, TFilterData>>,\n\t\tnode: ITreeNode<T, TFilterData>,\n\t): void {\n\t\tif (\n\t\t\tisMonacoCustomToggle(e.browserEvent.target as HTMLElement) ||\n\t\t\tisActionItem(e.browserEvent.target as HTMLElement)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stickyScrollController = this.stickyScrollProvider();\n\t\tif (!stickyScrollController) {\n\t\t\tthrow new Error(\"Sticky scroll controller not found\");\n\t\t}\n\n\t\tconst nodeIndex = this.list.indexOf(node);\n\t\tconst elementScrollTop = this.list.getElementTop(nodeIndex);\n\t\tconst elementTargetViewTop =\n\t\t\tstickyScrollController.nodePositionTopBelowWidget(node);\n\t\tthis.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n\t\tthis.list.domFocus();\n\t\tthis.list.setFocus([nodeIndex]);\n\t\tthis.list.setSelection([nodeIndex]);\n\t}\n\n\tprotected override onDoubleClick(\n\t\te: IListMouseEvent<ITreeNode<T, TFilterData>>,\n\t): void {\n\t\tconst onTwistie = (\n\t\t\te.browserEvent.target as HTMLElement\n\t\t).classList.contains(\"monaco-tl-twistie\");\n\n\t\tif (onTwistie || !this.tree.expandOnDoubleClick) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (e.browserEvent.isHandledByList) {\n\t\t\treturn;\n\t\t}\n\n\t\tsuper.onDoubleClick(e);\n\t}\n\n\t// to make sure dom focus is not stolen (for example with context menu)\n\tprotected override onMouseDown(\n\t\te:\n\t\t\t| IListMouseEvent<ITreeNode<T, TFilterData>>\n\t\t\t| IListTouchEvent<ITreeNode<T, TFilterData>>,\n\t): void {\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tif (\n\t\t\t!isStickyScrollContainer(target) &&\n\t\t\t!isStickyScrollElement(target)\n\t\t) {\n\t\t\tsuper.onMouseDown(e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprotected override onContextMenu(\n\t\te: IListContextMenuEvent<ITreeNode<T, TFilterData>>,\n\t): void {\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tif (\n\t\t\t!isStickyScrollContainer(target) &&\n\t\t\t!isStickyScrollElement(target)\n\t\t) {\n\t\t\tsuper.onContextMenu(e);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\ninterface ITreeNodeListOptions<T, TFilterData, TRef>\n\textends IListOptions<ITreeNode<T, TFilterData>> {\n\treadonly tree: AbstractTree<T, TFilterData, TRef>;\n\treadonly stickyScrollProvider: () =>\n\t\t| StickyScrollController<T, TFilterData, TRef>\n\t\t| undefined;\n}\n\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList<T, TFilterData, TRef> extends List<\n\tITreeNode<T, TFilterData>\n> {\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tvirtualDelegate: IListVirtualDelegate<ITreeNode<T, TFilterData>>,\n\t\trenderers: IListRenderer<any /* TODO@joao */, any>[],\n\t\tprivate focusTrait: Trait<T>,\n\t\tprivate selectionTrait: Trait<T>,\n\t\tprivate anchorTrait: Trait<T>,\n\t\toptions: ITreeNodeListOptions<T, TFilterData, TRef>,\n\t) {\n\t\tsuper(user, container, virtualDelegate, renderers, options);\n\t}\n\n\tprotected override createMouseController(\n\t\toptions: ITreeNodeListOptions<T, TFilterData, TRef>,\n\t): MouseController<ITreeNode<T, TFilterData>> {\n\t\treturn new TreeNodeListMouseController(\n\t\t\tthis,\n\t\t\toptions.tree,\n\t\t\toptions.stickyScrollProvider,\n\t\t);\n\t}\n\n\toverride splice(\n\t\tstart: number,\n\t\tdeleteCount: number,\n\t\telements: readonly ITreeNode<T, TFilterData>[] = [],\n\t): void {\n\t\tsuper.splice(start, deleteCount, elements);\n\n\t\tif (elements.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst additionalFocus: number[] = [];\n\t\tconst additionalSelection: number[] = [];\n\t\tlet anchor: number | undefined;\n\n\t\telements.forEach((node, index) => {\n\t\t\tif (this.focusTrait.has(node)) {\n\t\t\t\tadditionalFocus.push(start + index);\n\t\t\t}\n\n\t\t\tif (this.selectionTrait.has(node)) {\n\t\t\t\tadditionalSelection.push(start + index);\n\t\t\t}\n\n\t\t\tif (this.anchorTrait.has(node)) {\n\t\t\t\tanchor = start + index;\n\t\t\t}\n\t\t});\n\n\t\tif (additionalFocus.length > 0) {\n\t\t\tsuper.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n\t\t}\n\n\t\tif (additionalSelection.length > 0) {\n\t\t\tsuper.setSelection(\n\t\t\t\tdistinct([...super.getSelection(), ...additionalSelection]),\n\t\t\t);\n\t\t}\n\n\t\tif (typeof anchor === \"number\") {\n\t\t\tsuper.setAnchor(anchor);\n\t\t}\n\t}\n\n\toverride setFocus(\n\t\tindexes: number[],\n\t\tbrowserEvent?: UIEvent,\n\t\tfromAPI = false,\n\t): void {\n\t\tsuper.setFocus(indexes, browserEvent);\n\n\t\tif (!fromAPI) {\n\t\t\tthis.focusTrait.set(\n\t\t\t\tindexes.map((i) => this.element(i)),\n\t\t\t\tbrowserEvent,\n\t\t\t);\n\t\t}\n\t}\n\n\toverride setSelection(\n\t\tindexes: number[],\n\t\tbrowserEvent?: UIEvent,\n\t\tfromAPI = false,\n\t): void {\n\t\tsuper.setSelection(indexes, browserEvent);\n\n\t\tif (!fromAPI) {\n\t\t\tthis.selectionTrait.set(\n\t\t\t\tindexes.map((i) => this.element(i)),\n\t\t\t\tbrowserEvent,\n\t\t\t);\n\t\t}\n\t}\n\n\toverride setAnchor(index: number | undefined, fromAPI = false): void {\n\t\tsuper.setAnchor(index);\n\n\t\tif (!fromAPI) {\n\t\t\tif (typeof index === \"undefined\") {\n\t\t\t\tthis.anchorTrait.set([]);\n\t\t\t} else {\n\t\t\t\tthis.anchorTrait.set([this.element(index)]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport enum AbstractTreePart {\n\tTree = 0,\n\tStickyScroll = 1,\n}\n\nexport abstract class AbstractTree<T, TFilterData, TRef>\n\timplements IDisposable\n{\n\tprotected view: TreeNodeList<T, TFilterData, TRef>;\n\tprivate renderers: TreeRenderer<T, TFilterData, TRef, any>[];\n\tprotected model: ITreeModel<T, TFilterData, TRef>;\n\tprivate treeDelegate: ComposedTreeDelegate<T, ITreeNode<T, TFilterData>>;\n\tprivate focus: Trait<T>;\n\tprivate selection: Trait<T>;\n\tprivate anchor: Trait<T>;\n\tprivate eventBufferer = new EventBufferer();\n\tprivate findController?: FindController<T, TFilterData>;\n\treadonly onDidChangeFindOpenState: Event<boolean> = Event.None;\n\tonDidChangeStickyScrollFocused: Event<boolean> = Event.None;\n\tprivate focusNavigationFilter:\n\t\t| ((node: ITreeNode<T, TFilterData>) => boolean)\n\t\t| undefined;\n\tprivate stickyScrollController?: StickyScrollController<\n\t\tT,\n\t\tTFilterData,\n\t\tTRef\n\t>;\n\tprivate styleElement: HTMLStyleElement;\n\tprotected readonly disposables = new DisposableStore();\n\n\tget onDidScroll(): Event<ScrollEvent> {\n\t\treturn this.view.onDidScroll;\n\t}\n\n\tget onDidChangeFocus(): Event<ITreeEvent<T>> {\n\t\treturn this.eventBufferer.wrapEvent(this.focus.onDidChange);\n\t}\n\tget onDidChangeSelection(): Event<ITreeEvent<T>> {\n\t\treturn this.eventBufferer.wrapEvent(this.selection.onDidChange);\n\t}\n\n\tget onMouseClick(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.view.onMouseClick, asTreeMouseEvent);\n\t}\n\tget onMouseDblClick(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.filter(\n\t\t\tEvent.map(this.view.onMouseDblClick, asTreeMouseEvent),\n\t\t\t(e) => e.target !== TreeMouseEventTarget.Filter,\n\t\t);\n\t}\n\tget onMouseOver(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.view.onMouseOver, asTreeMouseEvent);\n\t}\n\tget onMouseOut(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.view.onMouseOut, asTreeMouseEvent);\n\t}\n\tget onContextMenu(): Event<ITreeContextMenuEvent<T>> {\n\t\treturn Event.any(\n\t\t\tEvent.filter(\n\t\t\t\tEvent.map(this.view.onContextMenu, asTreeContextMenuEvent),\n\t\t\t\t(e) => !e.isStickyScroll,\n\t\t\t),\n\t\t\tthis.stickyScrollController?.onContextMenu ?? Event.None,\n\t\t);\n\t}\n\tget onTap(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.view.onTap, asTreeMouseEvent);\n\t}\n\tget onPointer(): Event<ITreeMouseEvent<T>> {\n\t\treturn Event.map(this.view.onPointer, asTreeMouseEvent);\n\t}\n\n\tget onKeyDown(): Event<KeyboardEvent> {\n\t\treturn this.view.onKeyDown;\n\t}\n\tget onKeyUp(): Event<KeyboardEvent> {\n\t\treturn this.view.onKeyUp;\n\t}\n\tget onKeyPress(): Event<KeyboardEvent> {\n\t\treturn this.view.onKeyPress;\n\t}\n\n\tget onDidFocus(): Event<void> {\n\t\treturn this.view.onDidFocus;\n\t}\n\tget onDidBlur(): Event<void> {\n\t\treturn this.view.onDidBlur;\n\t}\n\n\tprivate readonly onDidSwapModel = this.disposables.add(new Emitter<void>());\n\tprivate readonly onDidChangeModelRelay = this.disposables.add(\n\t\tnew Relay<void>(),\n\t);\n\tprivate readonly onDidSpliceModelRelay = this.disposables.add(\n\t\tnew Relay<ITreeModelSpliceEvent<T, TFilterData>>(),\n\t);\n\tprivate readonly onDidChangeCollapseStateRelay = this.disposables.add(\n\t\tnew Relay<ICollapseStateChangeEvent<T, TFilterData>>(),\n\t);\n\tprivate readonly onDidChangeRenderNodeCountRelay = this.disposables.add(\n\t\tnew Relay<ITreeNode<T, TFilterData>>(),\n\t);\n\tprivate readonly onDidChangeActiveNodesRelay = this.disposables.add(\n\t\tnew Relay<ITreeNode<T, TFilterData>[]>(),\n\t);\n\n\tget onDidChangeModel(): Event<void> {\n\t\treturn Event.any(\n\t\t\tthis.onDidChangeModelRelay.event,\n\t\t\tthis.onDidSwapModel.event,\n\t\t);\n\t}\n\tget onDidChangeCollapseState(): Event<\n\t\tICollapseStateChangeEvent<T, TFilterData>\n\t> {\n\t\treturn this.model.onDidChangeCollapseState;\n\t}\n\tget onDidChangeRenderNodeCount(): Event<ITreeNode<T, TFilterData>> {\n\t\treturn this.model.onDidChangeRenderNodeCount;\n\t}\n\n\tprivate readonly _onWillRefilter = new Emitter<void>();\n\treadonly onWillRefilter: Event<void> = this._onWillRefilter.event;\n\n\tget findMode(): TreeFindMode {\n\t\treturn this.findController?.mode ?? TreeFindMode.Highlight;\n\t}\n\tset findMode(findMode: TreeFindMode) {\n\t\tif (this.findController) {\n\t\t\tthis.findController.mode = findMode;\n\t\t}\n\t}\n\treadonly onDidChangeFindMode: Event<TreeFindMode>;\n\n\tget findMatchType(): TreeFindMatchType {\n\t\treturn this.findController?.matchType ?? TreeFindMatchType.Fuzzy;\n\t}\n\tset findMatchType(findFuzzy: TreeFindMatchType) {\n\t\tif (this.findController) {\n\t\t\tthis.findController.matchType = findFuzzy;\n\t\t}\n\t}\n\treadonly onDidChangeFindMatchType: Event<TreeFindMatchType>;\n\n\tget onDidChangeFindPattern(): Event<string> {\n\t\treturn this.findController\n\t\t\t? this.findController.onDidChangePattern\n\t\t\t: Event.None;\n\t}\n\n\tget expandOnDoubleClick(): boolean {\n\t\treturn typeof this._options.expandOnDoubleClick === \"undefined\"\n\t\t\t? true\n\t\t\t: this._options.expandOnDoubleClick;\n\t}\n\tget expandOnlyOnTwistieClick(): boolean | ((e: T) => boolean) {\n\t\treturn typeof this._options.expandOnlyOnTwistieClick === \"undefined\"\n\t\t\t? true\n\t\t\t: this._options.expandOnlyOnTwistieClick;\n\t}\n\n\tprivate readonly _onDidUpdateOptions = new Emitter<\n\t\tIAbstractTreeOptions<T, TFilterData>\n\t>();\n\treadonly onDidUpdateOptions: Event<IAbstractTreeOptions<T, TFilterData>> =\n\t\tthis._onDidUpdateOptions.event;\n\n\tget onDidDispose(): Event<void> {\n\t\treturn this.view.onDidDispose;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _user: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tprivate _options: IAbstractTreeOptions<T, TFilterData> = {},\n\t) {\n\t\tlet filter: FindFilter<T> | undefined;\n\t\tif (_options.keyboardNavigationLabelProvider) {\n\t\t\tfilter = new FindFilter(\n\t\t\t\tthis,\n\t\t\t\t_options.keyboardNavigationLabelProvider,\n\t\t\t\t_options.filter as any as ITreeFilter<T, FuzzyScore>,\n\t\t\t);\n\t\t\t_options = {\n\t\t\t\t..._options,\n\t\t\t\tfilter: filter as ITreeFilter<T, TFilterData>,\n\t\t\t}; // TODO need typescript help here\n\t\t\tthis.disposables.add(filter);\n\t\t}\n\n\t\tthis.model = this.createModel(_user, _options);\n\t\tthis.treeDelegate = new ComposedTreeDelegate<\n\t\t\tT,\n\t\t\tITreeNode<T, TFilterData>\n\t\t>(delegate);\n\n\t\tconst activeNodes = this.disposables.add(\n\t\t\tnew EventCollection(this.onDidChangeActiveNodesRelay.event),\n\t\t);\n\t\tconst renderedIndentGuides = new SetMap<\n\t\t\tITreeNode<T, TFilterData>,\n\t\t\tHTMLDivElement\n\t\t>();\n\t\tthis.renderers = renderers.map(\n\t\t\t(r) =>\n\t\t\t\tnew TreeRenderer<T, TFilterData, TRef, any>(\n\t\t\t\t\tr,\n\t\t\t\t\tthis.model,\n\t\t\t\t\tthis.onDidChangeCollapseStateRelay.event,\n\t\t\t\t\tactiveNodes,\n\t\t\t\t\trenderedIndentGuides,\n\t\t\t\t\t_options,\n\t\t\t\t),\n\t\t);\n\t\tfor (const r of this.renderers) {\n\t\t\tthis.disposables.add(r);\n\t\t}\n\n\t\tthis.focus = new Trait(\n\t\t\t() => this.view.getFocusedElements()[0],\n\t\t\t_options.identityProvider,\n\t\t);\n\t\tthis.selection = new Trait(\n\t\t\t() => this.view.getSelectedElements()[0],\n\t\t\t_options.identityProvider,\n\t\t);\n\t\tthis.anchor = new Trait(\n\t\t\t() => this.view.getAnchorElement(),\n\t\t\t_options.identityProvider,\n\t\t);\n\t\tthis.view = new TreeNodeList(\n\t\t\t_user,\n\t\t\tcontainer,\n\t\t\tthis.treeDelegate,\n\t\t\tthis.renderers,\n\t\t\tthis.focus,\n\t\t\tthis.selection,\n\t\t\tthis.anchor,\n\t\t\t{\n\t\t\t\t...asListOptions(() => this.model, _options),\n\t\t\t\ttree: this,\n\t\t\t\tstickyScrollProvider: () => this.stickyScrollController,\n\t\t\t},\n\t\t);\n\n\t\tthis.setupModel(this.model); // model needs to be setup after the traits have been created\n\n\t\tif (_options.keyboardSupport !== false) {\n\t\t\tconst onKeyDown = Event.chain(this.view.onKeyDown, ($) =>\n\t\t\t\t$.filter(\n\t\t\t\t\t(e) => !isEditableElement(e.target as HTMLElement),\n\t\t\t\t).map((e) => new StandardKeyboardEvent(e)),\n\t\t\t);\n\n\t\t\tEvent.chain(onKeyDown, ($) =>\n\t\t\t\t$.filter((e) => e.keyCode === KeyCode.LeftArrow),\n\t\t\t)(this.onLeftArrow, this, this.disposables);\n\t\t\tEvent.chain(onKeyDown, ($) =>\n\t\t\t\t$.filter((e) => e.keyCode === KeyCode.RightArrow),\n\t\t\t)(this.onRightArrow, this, this.disposables);\n\t\t\tEvent.chain(onKeyDown, ($) =>\n\t\t\t\t$.filter((e) => e.keyCode === KeyCode.Space),\n\t\t\t)(this.onSpace, this, this.disposables);\n\t\t}\n\n\t\tif (\n\t\t\t(_options.findWidgetEnabled ?? true) &&\n\t\t\t_options.keyboardNavigationLabelProvider &&\n\t\t\t_options.contextViewProvider\n\t\t) {\n\t\t\tconst opts = this.options.findWidgetStyles\n\t\t\t\t? { styles: this.options.findWidgetStyles }\n\t\t\t\t: undefined;\n\t\t\tthis.findController = new FindController(\n\t\t\t\tthis,\n\t\t\t\tthis.view,\n\t\t\t\tfilter!,\n\t\t\t\t_options.contextViewProvider,\n\t\t\t\topts,\n\t\t\t);\n\t\t\tthis.focusNavigationFilter = (node) =>\n\t\t\t\tthis.findController!.shouldAllowFocus(node);\n\t\t\tthis.onDidChangeFindOpenState =\n\t\t\t\tthis.findController.onDidChangeOpenState;\n\t\t\tthis.disposables.add(this.findController);\n\t\t\tthis.onDidChangeFindMode = this.findController.onDidChangeMode;\n\t\t\tthis.onDidChangeFindMatchType =\n\t\t\t\tthis.findController.onDidChangeMatchType;\n\t\t\tthis.disposables.add(\n\t\t\t\tthis.onDidSpliceModelRelay.event(() => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.findController!.isOpened() ||\n\t\t\t\t\t\tthis.findController!.pattern.length === 0\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.refilter();\n\t\t\t\t\tthis.findController!.render();\n\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.onDidChangeFindMode = Event.None;\n\t\t\tthis.onDidChangeFindMatchType = Event.None;\n\t\t}\n\n\t\tif (_options.enableStickyScroll) {\n\t\t\tthis.stickyScrollController = new StickyScrollController(\n\t\t\t\tthis,\n\t\t\t\tthis.model,\n\t\t\t\tthis.view,\n\t\t\t\tthis.renderers,\n\t\t\t\tthis.treeDelegate,\n\t\t\t\t_options,\n\t\t\t);\n\t\t\tthis.onDidChangeStickyScrollFocused =\n\t\t\t\tthis.stickyScrollController.onDidChangeHasFocus;\n\t\t}\n\n\t\tthis.styleElement = createStyleSheet(this.view.getHTMLElement());\n\t\tthis.getHTMLElement().classList.toggle(\n\t\t\t\"always\",\n\t\t\tthis._options.renderIndentGuides === RenderIndentGuides.Always,\n\t\t);\n\t}\n\n\tupdateOptions(optionsUpdate: IAbstractTreeOptionsUpdate = {}): void {\n\t\tthis._options = { ...this._options, ...optionsUpdate };\n\n\t\tfor (const renderer of this.renderers) {\n\t\t\trenderer.updateOptions(optionsUpdate);\n\t\t}\n\n\t\tthis.view.updateOptions(this._options);\n\t\tthis.findController?.updateOptions(optionsUpdate);\n\t\tthis.updateStickyScroll(optionsUpdate);\n\n\t\tthis._onDidUpdateOptions.fire(this._options);\n\n\t\tthis.getHTMLElement().classList.toggle(\n\t\t\t\"always\",\n\t\t\tthis._options.renderIndentGuides === RenderIndentGuides.Always,\n\t\t);\n\t}\n\n\tget options(): IAbstractTreeOptions<T, TFilterData> {\n\t\treturn this._options;\n\t}\n\n\tprivate updateStickyScroll(optionsUpdate: IAbstractTreeOptionsUpdate) {\n\t\tif (!this.stickyScrollController && this._options.enableStickyScroll) {\n\t\t\tthis.stickyScrollController = new StickyScrollController(\n\t\t\t\tthis,\n\t\t\t\tthis.model,\n\t\t\t\tthis.view,\n\t\t\t\tthis.renderers,\n\t\t\t\tthis.treeDelegate,\n\t\t\t\tthis._options,\n\t\t\t);\n\t\t\tthis.onDidChangeStickyScrollFocused =\n\t\t\t\tthis.stickyScrollController.onDidChangeHasFocus;\n\t\t} else if (\n\t\t\tthis.stickyScrollController &&\n\t\t\t!this._options.enableStickyScroll\n\t\t) {\n\t\t\tthis.onDidChangeStickyScrollFocused = Event.None;\n\t\t\tthis.stickyScrollController.dispose();\n\t\t\tthis.stickyScrollController = undefined;\n\t\t}\n\t\tthis.stickyScrollController?.updateOptions(optionsUpdate);\n\t}\n\n\tupdateWidth(element: TRef): void {\n\t\tconst index = this.model.getListIndex(element);\n\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.view.updateWidth(index);\n\t}\n\n\t// Widget\n\n\tgetHTMLElement(): HTMLElement {\n\t\treturn this.view.getHTMLElement();\n\t}\n\n\tget contentHeight(): number {\n\t\treturn this.view.contentHeight;\n\t}\n\n\tget contentWidth(): number {\n\t\treturn this.view.contentWidth;\n\t}\n\n\tget onDidChangeContentHeight(): Event<number> {\n\t\treturn this.view.onDidChangeContentHeight;\n\t}\n\n\tget onDidChangeContentWidth(): Event<number> {\n\t\treturn this.view.onDidChangeContentWidth;\n\t}\n\n\tget scrollTop(): number {\n\t\treturn this.view.scrollTop;\n\t}\n\n\tset scrollTop(scrollTop: number) {\n\t\tthis.view.scrollTop = scrollTop;\n\t}\n\n\tget scrollLeft(): number {\n\t\treturn this.view.scrollLeft;\n\t}\n\n\tset scrollLeft(scrollLeft: number) {\n\t\tthis.view.scrollLeft = scrollLeft;\n\t}\n\n\tget scrollHeight(): number {\n\t\treturn this.view.scrollHeight;\n\t}\n\n\tget renderHeight(): number {\n\t\treturn this.view.renderHeight;\n\t}\n\n\tget firstVisibleElement(): T | undefined {\n\t\tlet index = this.view.firstVisibleIndex;\n\n\t\tif (this.stickyScrollController) {\n\t\t\tindex += this.stickyScrollController.count;\n\t\t}\n\n\t\tif (index < 0 || index >= this.view.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst node = this.view.element(index);\n\t\treturn node.element;\n\t}\n\n\tget lastVisibleElement(): T {\n\t\tconst index = this.view.lastVisibleIndex;\n\t\tconst node = this.view.element(index);\n\t\treturn node.element;\n\t}\n\n\tget ariaLabel(): string {\n\t\treturn this.view.ariaLabel;\n\t}\n\n\tset ariaLabel(value: string) {\n\t\tthis.view.ariaLabel = value;\n\t}\n\n\tget selectionSize() {\n\t\treturn this.selection.getNodes().length;\n\t}\n\n\tdomFocus(): void {\n\t\tif (this.stickyScrollController?.focusedLast()) {\n\t\t\tthis.stickyScrollController.domFocus();\n\t\t} else {\n\t\t\tthis.view.domFocus();\n\t\t}\n\t}\n\n\tisDOMFocused(): boolean {\n\t\treturn isActiveElement(this.getHTMLElement());\n\t}\n\n\tlayout(height?: number, width?: number): void {\n\t\tthis.view.layout(height, width);\n\n\t\tif (isNumber(width)) {\n\t\t\tthis.findController?.layout(width);\n\t\t}\n\t}\n\n\tstyle(styles: IListStyles): void {\n\t\tconst suffix = `.${this.view.domId}`;\n\t\tconst content: string[] = [];\n\n\t\tif (styles.treeIndentGuidesStroke) {\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`,\n\t\t\t);\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`,\n\t\t\t);\n\t\t}\n\n\t\t// Sticky Scroll Background\n\t\tconst stickyScrollBackground =\n\t\t\tstyles.treeStickyScrollBackground ?? styles.listBackground;\n\t\tif (stickyScrollBackground) {\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${stickyScrollBackground}; }`,\n\t\t\t);\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${stickyScrollBackground}; }`,\n\t\t\t);\n\t\t}\n\n\t\t// Sticky Scroll Border\n\t\tif (styles.treeStickyScrollBorder) {\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { border-bottom: 1px solid ${styles.treeStickyScrollBorder}; }`,\n\t\t\t);\n\t\t}\n\n\t\t// Sticky Scroll Shadow\n\t\tif (styles.treeStickyScrollShadow) {\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-container-shadow { box-shadow: ${styles.treeStickyScrollShadow} 0 6px 6px -6px inset; height: 3px; }`,\n\t\t\t);\n\t\t}\n\n\t\t// Sticky Scroll Focus\n\t\tif (styles.listFocusForeground) {\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { color: ${styles.listFocusForeground}; }`,\n\t\t\t);\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { color: inherit; }`,\n\t\t\t);\n\t\t}\n\n\t\t// Sticky Scroll Focus Outlines\n\t\tconst focusAndSelectionOutline = asCssValueWithDefault(\n\t\t\tstyles.listFocusAndSelectionOutline,\n\t\t\tasCssValueWithDefault(\n\t\t\t\tstyles.listSelectionOutline,\n\t\t\t\tstyles.listFocusOutline ?? \"\",\n\t\t\t),\n\t\t);\n\t\tif (focusAndSelectionOutline) {\n\t\t\t// default: listFocusOutline\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused.selected { outline: 1px solid ${focusAndSelectionOutline}; outline-offset: -1px;}`,\n\t\t\t);\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused.selected { outline: inherit;}`,\n\t\t\t);\n\t\t}\n\n\t\tif (styles.listFocusOutline) {\n\t\t\t// default: set\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`,\n\t\t\t);\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { outline: inherit; }`,\n\t\t\t);\n\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.passive-focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`,\n\t\t\t);\n\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`,\n\t\t\t);\n\t\t\tcontent.push(\n\t\t\t\t`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused:not(.sticky-scroll-focused) .monaco-tree-sticky-container .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`,\n\t\t\t);\n\t\t}\n\n\t\tthis.styleElement.textContent = content.join(\"\\n\");\n\n\t\tthis.view.style(styles);\n\t}\n\n\t// Tree navigation\n\n\tgetParentElement(location: TRef): T {\n\t\tconst parentRef = this.model.getParentNodeLocation(location);\n\t\tconst parentNode = this.model.getNode(parentRef);\n\t\treturn parentNode.element;\n\t}\n\n\tgetFirstElementChild(location: TRef): T | undefined {\n\t\treturn this.model.getFirstElementChild(location);\n\t}\n\n\t// Tree\n\n\tgetNode(location?: TRef): ITreeNode<T, TFilterData> {\n\t\treturn this.model.getNode(location);\n\t}\n\n\tgetNodeLocation(node: ITreeNode<T, TFilterData>): TRef {\n\t\treturn this.model.getNodeLocation(node);\n\t}\n\n\tcollapse(location: TRef, recursive = false): boolean {\n\t\treturn this.model.setCollapsed(location, true, recursive);\n\t}\n\n\texpand(location: TRef, recursive = false): boolean {\n\t\treturn this.model.setCollapsed(location, false, recursive);\n\t}\n\n\ttoggleCollapsed(location: TRef, recursive = false): boolean {\n\t\treturn this.model.setCollapsed(location, undefined, recursive);\n\t}\n\n\texpandAll(): void {\n\t\tthis.model.setCollapsed(this.model.rootRef, false, true);\n\t}\n\n\tcollapseAll(): void {\n\t\tthis.model.setCollapsed(this.model.rootRef, true, true);\n\t}\n\n\tisCollapsible(location: TRef): boolean {\n\t\treturn this.model.isCollapsible(location);\n\t}\n\n\tsetCollapsible(location: TRef, collapsible?: boolean): boolean {\n\t\treturn this.model.setCollapsible(location, collapsible);\n\t}\n\n\tisCollapsed(location: TRef): boolean {\n\t\treturn this.model.isCollapsed(location);\n\t}\n\n\texpandTo(location: TRef): void {\n\t\tthis.model.expandTo(location);\n\t}\n\n\ttriggerTypeNavigation(): void {\n\t\tthis.view.triggerTypeNavigation();\n\t}\n\n\topenFind(): void {\n\t\tthis.findController?.open();\n\t}\n\n\tcloseFind(): void {\n\t\tthis.findController?.close();\n\t}\n\n\trefilter(): void {\n\t\tthis._onWillRefilter.fire(undefined);\n\t\tthis.model.refilter();\n\t}\n\n\tsetAnchor(element: TRef | undefined): void {\n\t\tif (typeof element === \"undefined\") {\n\t\t\treturn this.view.setAnchor(undefined);\n\t\t}\n\n\t\tthis.eventBufferer.bufferEvents(() => {\n\t\t\tconst node = this.model.getNode(element);\n\t\t\tthis.anchor.set([node]);\n\n\t\t\tconst index = this.model.getListIndex(element);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.view.setAnchor(index, true);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetAnchor(): T | undefined {\n\t\treturn this.anchor.get().at(0);\n\t}\n\n\tsetSelection(elements: TRef[], browserEvent?: UIEvent): void {\n\t\tthis.eventBufferer.bufferEvents(() => {\n\t\t\tconst nodes = elements.map((e) => this.model.getNode(e));\n\t\t\tthis.selection.set(nodes, browserEvent);\n\n\t\t\tconst indexes = elements\n\t\t\t\t.map((e) => this.model.getListIndex(e))\n\t\t\t\t.filter((i) => i > -1);\n\t\t\tthis.view.setSelection(indexes, browserEvent, true);\n\t\t});\n\t}\n\n\tgetSelection(): T[] {\n\t\treturn this.selection.get();\n\t}\n\n\tsetFocus(elements: TRef[], browserEvent?: UIEvent): void {\n\t\tthis.eventBufferer.bufferEvents(() => {\n\t\t\tconst nodes = elements.map((e) => this.model.getNode(e));\n\t\t\tthis.focus.set(nodes, browserEvent);\n\n\t\t\tconst indexes = elements\n\t\t\t\t.map((e) => this.model.getListIndex(e))\n\t\t\t\t.filter((i) => i > -1);\n\t\t\tthis.view.setFocus(indexes, browserEvent, true);\n\t\t});\n\t}\n\n\tfocusNext(\n\t\tn = 1,\n\t\tloop = false,\n\t\tbrowserEvent?: UIEvent,\n\t\tfilter:\n\t\t\t| ((node: ITreeNode<T, TFilterData>) => boolean)\n\t\t\t| undefined = isKeyboardEvent(browserEvent) && browserEvent.altKey\n\t\t\t? undefined\n\t\t\t: this.focusNavigationFilter,\n\t): void {\n\t\tthis.view.focusNext(n, loop, browserEvent, filter);\n\t}\n\n\tfocusPrevious(\n\t\tn = 1,\n\t\tloop = false,\n\t\tbrowserEvent?: UIEvent,\n\t\tfilter:\n\t\t\t| ((node: ITreeNode<T, TFilterData>) => boolean)\n\t\t\t| undefined = isKeyboardEvent(browserEvent) && browserEvent.altKey\n\t\t\t? undefined\n\t\t\t: this.focusNavigationFilter,\n\t): void {\n\t\tthis.view.focusPrevious(n, loop, browserEvent, filter);\n\t}\n\n\tfocusNextPage(\n\t\tbrowserEvent?: UIEvent,\n\t\tfilter:\n\t\t\t| ((node: ITreeNode<T, TFilterData>) => boolean)\n\t\t\t| undefined = isKeyboardEvent(browserEvent) && browserEvent.altKey\n\t\t\t? undefined\n\t\t\t: this.focusNavigationFilter,\n\t): Promise<void> {\n\t\treturn this.view.focusNextPage(browserEvent, filter);\n\t}\n\n\tfocusPreviousPage(\n\t\tbrowserEvent?: UIEvent,\n\t\tfilter:\n\t\t\t| ((node: ITreeNode<T, TFilterData>) => boolean)\n\t\t\t| undefined = isKeyboardEvent(browserEvent) && browserEvent.altKey\n\t\t\t? undefined\n\t\t\t: this.focusNavigationFilter,\n\t): Promise<void> {\n\t\treturn this.view.focusPreviousPage(\n\t\t\tbrowserEvent,\n\t\t\tfilter,\n\t\t\t() => this.stickyScrollController?.height ?? 0,\n\t\t);\n\t}\n\n\tfocusLast(\n\t\tbrowserEvent?: UIEvent,\n\t\tfilter:\n\t\t\t| ((node: ITreeNode<T, TFilterData>) => boolean)\n\t\t\t| undefined = isKeyboardEvent(browserEvent) && browserEvent.altKey\n\t\t\t? undefined\n\t\t\t: this.focusNavigationFilter,\n\t): void {\n\t\tthis.view.focusLast(browserEvent, filter);\n\t}\n\n\tfocusFirst(\n\t\tbrowserEvent?: UIEvent,\n\t\tfilter:\n\t\t\t| ((node: ITreeNode<T, TFilterData>) => boolean)\n\t\t\t| undefined = isKeyboardEvent(browserEvent) && browserEvent.altKey\n\t\t\t? undefined\n\t\t\t: this.focusNavigationFilter,\n\t): void {\n\t\tthis.view.focusFirst(browserEvent, filter);\n\t}\n\n\tgetFocus(): T[] {\n\t\treturn this.focus.get();\n\t}\n\n\tgetStickyScrollFocus(): T[] {\n\t\tconst focus = this.stickyScrollController?.getFocus();\n\t\treturn focus !== undefined ? [focus] : [];\n\t}\n\n\tgetFocusedPart(): AbstractTreePart {\n\t\treturn this.stickyScrollController?.focusedLast()\n\t\t\t? AbstractTreePart.StickyScroll\n\t\t\t: AbstractTreePart.Tree;\n\t}\n\n\treveal(location: TRef, relativeTop?: number): void {\n\t\tthis.model.expandTo(location);\n\n\t\tconst index = this.model.getListIndex(location);\n\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.stickyScrollController) {\n\t\t\tconst paddingTop =\n\t\t\t\tthis.stickyScrollController.nodePositionTopBelowWidget(\n\t\t\t\t\tthis.getNode(location),\n\t\t\t\t);\n\t\t\tthis.view.reveal(index, relativeTop, paddingTop);\n\t\t} else {\n\t\t\tthis.view.reveal(index, relativeTop);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the relative position of an element rendered in the list.\n\t * Returns `null` if the element isn't *entirely* in the visible viewport.\n\t */\n\tgetRelativeTop(location: TRef): number | null {\n\t\tconst index = this.model.getListIndex(location);\n\n\t\tif (index === -1) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst stickyScrollNode = this.stickyScrollController?.getNode(\n\t\t\tthis.getNode(location),\n\t\t);\n\t\treturn this.view.getRelativeTop(\n\t\t\tindex,\n\t\t\tstickyScrollNode?.position ?? this.stickyScrollController?.height,\n\t\t);\n\t}\n\n\tgetViewState(\n\t\tidentityProvider = this.options.identityProvider,\n\t): AbstractTreeViewState {\n\t\tif (!identityProvider) {\n\t\t\tthrow new TreeError(\n\t\t\t\tthis._user,\n\t\t\t\t\"Can't get tree view state without an identity provider\",\n\t\t\t);\n\t\t}\n\n\t\tconst getId = (element: T | null) =>\n\t\t\tidentityProvider.getId(element!).toString();\n\t\tconst state = AbstractTreeViewState.empty(this.scrollTop);\n\t\tfor (const focus of this.getFocus()) {\n\t\t\tstate.focus.add(getId(focus));\n\t\t}\n\t\tfor (const selection of this.getSelection()) {\n\t\t\tstate.selection.add(getId(selection));\n\t\t}\n\n\t\tconst root = this.model.getNode();\n\t\tconst queue = [root];\n\n\t\twhile (queue.length > 0) {\n\t\t\tconst node = queue.shift()!;\n\n\t\t\tif (node !== root && node.collapsible) {\n\t\t\t\tstate.expanded[getId(node.element)] = node.collapsed ? 0 : 1;\n\t\t\t}\n\n\t\t\tqueue.push(...node.children);\n\t\t}\n\n\t\treturn state;\n\t}\n\n\t// List\n\n\tprivate onLeftArrow(e: StandardKeyboardEvent): void {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tconst nodes = this.view.getFocusedElements();\n\n\t\tif (nodes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = nodes[0];\n\t\tconst location = this.model.getNodeLocation(node);\n\t\tconst didChange = this.model.setCollapsed(location, true);\n\n\t\tif (!didChange) {\n\t\t\tconst parentLocation = this.model.getParentNodeLocation(location);\n\n\t\t\tif (!parentLocation) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parentListIndex = this.model.getListIndex(parentLocation);\n\n\t\t\tthis.view.reveal(parentListIndex);\n\t\t\tthis.view.setFocus([parentListIndex]);\n\t\t}\n\t}\n\n\tprivate onRightArrow(e: StandardKeyboardEvent): void {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tconst nodes = this.view.getFocusedElements();\n\n\t\tif (nodes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = nodes[0];\n\t\tconst location = this.model.getNodeLocation(node);\n\t\tconst didChange = this.model.setCollapsed(location, false);\n\n\t\tif (!didChange) {\n\t\t\tif (!node.children.some((child) => child.visible)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [focusedIndex] = this.view.getFocus();\n\t\t\tconst firstChildIndex = focusedIndex + 1;\n\n\t\t\tthis.view.reveal(firstChildIndex);\n\t\t\tthis.view.setFocus([firstChildIndex]);\n\t\t}\n\t}\n\n\tprivate onSpace(e: StandardKeyboardEvent): void {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tconst nodes = this.view.getFocusedElements();\n\n\t\tif (nodes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = nodes[0];\n\t\tconst location = this.model.getNodeLocation(node);\n\t\tconst recursive = e.browserEvent.altKey;\n\n\t\tthis.model.setCollapsed(location, undefined, recursive);\n\t}\n\n\tprotected abstract createModel(\n\t\tuser: string,\n\t\toptions: IAbstractTreeOptions<T, TFilterData>,\n\t): ITreeModel<T, TFilterData, TRef>;\n\n\tprivate readonly modelDisposables = new DisposableStore();\n\tprivate setupModel(model: ITreeModel<T, TFilterData, TRef>) {\n\t\tthis.modelDisposables.clear();\n\n\t\tthis.modelDisposables.add(\n\t\t\tmodel.onDidSpliceRenderedNodes(({ start, deleteCount, elements }) =>\n\t\t\t\tthis.view.splice(start, deleteCount, elements),\n\t\t\t),\n\t\t);\n\n\t\tconst onDidModelSplice = Event.forEach(\n\t\t\tmodel.onDidSpliceModel,\n\t\t\t(e) => {\n\t\t\t\tthis.eventBufferer.bufferEvents(() => {\n\t\t\t\t\tthis.focus.onDidModelSplice(e);\n\t\t\t\t\tthis.selection.onDidModelSplice(e);\n\t\t\t\t});\n\t\t\t},\n\t\t\tthis.modelDisposables,\n\t\t);\n\n\t\t// Make sure the `forEach` always runs\n\t\tonDidModelSplice(() => null, null, this.modelDisposables);\n\n\t\t// Active nodes can change when the model changes or when focus or selection change.\n\t\t// We debounce it with 0 delay since these events may fire in the same stack and we only\n\t\t// want to run this once. It also doesn't matter if it runs on the next tick since it's only\n\t\t// a nice to have UI feature.\n\t\tconst activeNodesEmitter = this.modelDisposables.add(\n\t\t\tnew Emitter<ITreeNode<T, TFilterData>[]>(),\n\t\t);\n\t\tconst activeNodesDebounce = this.modelDisposables.add(new Delayer(0));\n\t\tthis.modelDisposables.add(\n\t\t\tEvent.any<any>(\n\t\t\t\tonDidModelSplice,\n\t\t\t\tthis.focus.onDidChange,\n\t\t\t\tthis.selection.onDidChange,\n\t\t\t)(() => {\n\t\t\t\tactiveNodesDebounce.trigger(() => {\n\t\t\t\t\tconst set = new Set<ITreeNode<T, TFilterData>>();\n\n\t\t\t\t\tfor (const node of this.focus.getNodes()) {\n\t\t\t\t\t\tset.add(node);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const node of this.selection.getNodes()) {\n\t\t\t\t\t\tset.add(node);\n\t\t\t\t\t}\n\n\t\t\t\t\tactiveNodesEmitter.fire([...set.values()]);\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tthis.onDidChangeActiveNodesRelay.input = activeNodesEmitter.event;\n\t\tthis.onDidChangeModelRelay.input = Event.signal(model.onDidSpliceModel);\n\t\tthis.onDidChangeCollapseStateRelay.input =\n\t\t\tmodel.onDidChangeCollapseState;\n\t\tthis.onDidChangeRenderNodeCountRelay.input =\n\t\t\tmodel.onDidChangeRenderNodeCount;\n\t}\n\n\tsetModel(newModel: ITreeModel<T, TFilterData, TRef>) {\n\t\tconst oldModel = this.model;\n\n\t\tthis.model = newModel;\n\t\tthis.setupModel(newModel);\n\n\t\tthis.renderers.forEach((r) => r.setModel(newModel));\n\t\tthis.stickyScrollController?.setModel(newModel);\n\n\t\tthis.focus.set([]);\n\t\tthis.selection.set([]);\n\t\tthis.anchor.set([]);\n\n\t\tthis.view.splice(0, oldModel.getListRenderCount(oldModel.rootRef));\n\t\tthis.model.refilter();\n\n\t\tthis.onDidSwapModel.fire();\n\t}\n\n\tgetModel(): ITreeModel<T, TFilterData, TRef> {\n\t\treturn this.model;\n\t}\n\n\tnavigate(start?: TRef): ITreeNavigator<T> {\n\t\treturn new TreeNavigator(this.view, this.model, start);\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.disposables);\n\t\tthis.stickyScrollController?.dispose();\n\t\tthis.view.dispose();\n\t\tthis.modelDisposables.dispose();\n\t}\n}\n\ninterface ITreeNavigatorView<T extends NonNullable<any>, TFilterData> {\n\treadonly length: number;\n\telement(index: number): ITreeNode<T, TFilterData>;\n}\n\nclass TreeNavigator<T extends NonNullable<any>, TFilterData, TRef>\n\timplements ITreeNavigator<T>\n{\n\tprivate index: number;\n\n\tconstructor(\n\t\tprivate view: ITreeNavigatorView<T, TFilterData>,\n\t\tprivate model: ITreeModel<T, TFilterData, TRef>,\n\t\tstart?: TRef,\n\t) {\n\t\tif (start) {\n\t\t\tthis.index = this.model.getListIndex(start);\n\t\t} else {\n\t\t\tthis.index = -1;\n\t\t}\n\t}\n\n\tcurrent(): T | null {\n\t\tif (this.index < 0 || this.index >= this.view.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.view.element(this.index).element;\n\t}\n\n\tprevious(): T | null {\n\t\tthis.index--;\n\t\treturn this.current();\n\t}\n\n\tnext(): T | null {\n\t\tthis.index++;\n\t\treturn this.current();\n\t}\n\n\tfirst(): T | null {\n\t\tthis.index = 0;\n\t\treturn this.current();\n\t}\n\n\tlast(): T | null {\n\t\tthis.index = this.view.length - 1;\n\t\treturn this.current();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["model", "ref", "RenderIndentGuides", "TreeFindMode", "TreeFindMatchType", "$", "e", "renderer", "stickyNode", "AbstractTreePart"]
}
