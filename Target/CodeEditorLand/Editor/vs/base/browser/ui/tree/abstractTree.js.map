{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/tree/abstractTree.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDragAndDropData } from '../../dnd.js';\nimport { $, append, clearNode, createStyleSheet, getWindow, h, hasParentWithClass, isActiveElement, asCssValueWithDefault, isKeyboardEvent, addDisposableListener, isEditableElement } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { IContextViewProvider } from '../contextview/contextview.js';\nimport { FindInput } from '../findinput/findInput.js';\nimport { IInputBoxStyles, IMessage, MessageType, unthemedInboxStyles } from '../inputbox/inputBox.js';\nimport { IIdentityProvider, IKeyboardNavigationLabelProvider, IListContextMenuEvent, IListDragAndDrop, IListDragOverReaction, IListMouseEvent, IListRenderer, IListTouchEvent, IListVirtualDelegate } from '../list/list.js';\nimport { ElementsDragAndDropData, ListViewTargetSector } from '../list/listView.js';\nimport { IListAccessibilityProvider, IListOptions, IListStyles, isActionItem, isButton, isMonacoCustomToggle, isMonacoEditor, isStickyScrollContainer, isStickyScrollElement, List, MouseController, TypeNavigationMode } from '../list/listWidget.js';\nimport { IToggleStyles, Toggle, unthemedToggleStyles } from '../toggle/toggle.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { ICollapseStateChangeEvent, ITreeContextMenuEvent, ITreeDragAndDrop, ITreeEvent, ITreeFilter, ITreeModel, ITreeModelSpliceEvent, ITreeMouseEvent, ITreeNavigator, ITreeNode, ITreeRenderer, TreeDragOverBubble, TreeError, TreeFilterResult, TreeMouseEventTarget, TreeVisibility } from './tree.js';\nimport { Action } from '../../../common/actions.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { Delayer, disposableTimeout, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { SetMap } from '../../../common/map.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { KeyCode } from '../../../common/keyCodes.js';\nimport { Disposable, DisposableStore, dispose, IDisposable, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { ScrollEvent } from '../../../common/scrollable.js';\nimport { isNumber } from '../../../common/types.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nimport { IHoverDelegate } from '../hover/hoverDelegate.js';\nimport { createInstantHoverDelegate, getDefaultHoverDelegate } from '../hover/hoverDelegateFactory.js';\nimport { autorun, constObservable } from '../../../common/observable.js';\nimport { alert } from '../aria/aria.js';\n\nclass TreeElementsDragAndDropData<T, TFilterData, TContext> extends ElementsDragAndDropData<T, TContext> {\n\n\toverride set context(context: TContext | undefined) {\n\t\tthis.data.context = context;\n\t}\n\n\toverride get context(): TContext | undefined {\n\t\treturn this.data.context;\n\t}\n\n\tconstructor(private data: ElementsDragAndDropData<ITreeNode<T, TFilterData>, TContext>) {\n\t\tsuper(data.elements.map(node => node.element));\n\t}\n}\n\nfunction asTreeDragAndDropData<T, TFilterData>(data: IDragAndDropData): IDragAndDropData {\n\tif (data instanceof ElementsDragAndDropData) {\n\t\treturn new TreeElementsDragAndDropData(data);\n\t}\n\n\treturn data;\n}\n\nclass TreeNodeListDragAndDrop<T, TFilterData, TRef> implements IListDragAndDrop<ITreeNode<T, TFilterData>> {\n\n\tprivate autoExpandNode: ITreeNode<T, TFilterData> | undefined;\n\tprivate autoExpandDisposable: IDisposable = Disposable.None;\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(private modelProvider: () => ITreeModel<T, TFilterData, TRef>, private dnd: ITreeDragAndDrop<T>) { }\n\n\tgetDragURI(node: ITreeNode<T, TFilterData>): string | null {\n\t\treturn this.dnd.getDragURI(node.element);\n\t}\n\n\tgetDragLabel(nodes: ITreeNode<T, TFilterData>[], originalEvent: DragEvent): string | undefined {\n\t\tif (this.dnd.getDragLabel) {\n\t\t\treturn this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tonDragStart(data: IDragAndDropData, originalEvent: DragEvent): void {\n\t\tthis.dnd.onDragStart?.(asTreeDragAndDropData(data), originalEvent);\n\t}\n\n\tonDragOver(data: IDragAndDropData, targetNode: ITreeNode<T, TFilterData> | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent, raw = true): boolean | IListDragOverReaction {\n\t\tconst result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n\t\tconst didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n\n\t\tif (didChangeAutoExpandNode) {\n\t\t\tthis.autoExpandDisposable.dispose();\n\t\t\tthis.autoExpandNode = targetNode;\n\t\t}\n\n\t\tif (typeof targetNode === 'undefined') {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n\t\t\tthis.autoExpandDisposable = disposableTimeout(() => {\n\t\t\t\tconst model = this.modelProvider();\n\t\t\t\tconst ref = model.getNodeLocation(targetNode);\n\n\t\t\t\tif (model.isCollapsed(ref)) {\n\t\t\t\t\tmodel.setCollapsed(ref, false);\n\t\t\t\t}\n\n\t\t\t\tthis.autoExpandNode = undefined;\n\t\t\t}, 500, this.disposables);\n\t\t}\n\n\t\tif (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n\t\t\tif (!raw) {\n\t\t\t\tconst accept = typeof result === 'boolean' ? result : result.accept;\n\t\t\t\tconst effect = typeof result === 'boolean' ? undefined : result.effect;\n\t\t\t\treturn { accept, effect, feedback: [targetIndex!] };\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tif (result.bubble === TreeDragOverBubble.Up) {\n\t\t\tconst model = this.modelProvider();\n\t\t\tconst ref = model.getNodeLocation(targetNode);\n\t\t\tconst parentRef = model.getParentNodeLocation(ref);\n\t\t\tconst parentNode = model.getNode(parentRef);\n\t\t\tconst parentIndex = parentRef && model.getListIndex(parentRef);\n\n\t\t\treturn this.onDragOver(data, parentNode, parentIndex, targetSector, originalEvent, false);\n\t\t}\n\n\t\tconst model = this.modelProvider();\n\t\tconst ref = model.getNodeLocation(targetNode);\n\t\tconst start = model.getListIndex(ref);\n\t\tconst length = model.getListRenderCount(ref);\n\n\t\treturn { ...result, feedback: range(start, start + length) };\n\t}\n\n\tdrop(data: IDragAndDropData, targetNode: ITreeNode<T, TFilterData> | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): void {\n\t\tthis.autoExpandDisposable.dispose();\n\t\tthis.autoExpandNode = undefined;\n\n\t\tthis.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n\t}\n\n\tonDragEnd(originalEvent: DragEvent): void {\n\t\tthis.dnd.onDragEnd?.(originalEvent);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis.dnd.dispose();\n\t}\n}\n\nfunction asListOptions<T, TFilterData, TRef>(modelProvider: () => ITreeModel<T, TFilterData, TRef>, options?: IAbstractTreeOptions<T, TFilterData>): IListOptions<ITreeNode<T, TFilterData>> | undefined {\n\treturn options && {\n\t\t...options,\n\t\tidentityProvider: options.identityProvider && {\n\t\t\tgetId(el) {\n\t\t\t\treturn options.identityProvider!.getId(el.element);\n\t\t\t}\n\t\t},\n\t\tdnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n\t\tmultipleSelectionController: options.multipleSelectionController && {\n\t\t\tisSelectionSingleChangeEvent(e) {\n\t\t\t\treturn options.multipleSelectionController!.isSelectionSingleChangeEvent({ ...e, element: e.element } as any);\n\t\t\t},\n\t\t\tisSelectionRangeChangeEvent(e) {\n\t\t\t\treturn options.multipleSelectionController!.isSelectionRangeChangeEvent({ ...e, element: e.element } as any);\n\t\t\t}\n\t\t},\n\t\taccessibilityProvider: options.accessibilityProvider && {\n\t\t\t...options.accessibilityProvider,\n\t\t\tgetSetSize(node) {\n\t\t\t\tconst model = modelProvider();\n\t\t\t\tconst ref = model.getNodeLocation(node);\n\t\t\t\tconst parentRef = model.getParentNodeLocation(ref);\n\t\t\t\tconst parentNode = model.getNode(parentRef);\n\n\t\t\t\treturn parentNode.visibleChildrenCount;\n\t\t\t},\n\t\t\tgetPosInSet(node) {\n\t\t\t\treturn node.visibleChildIndex + 1;\n\t\t\t},\n\t\t\tisChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? (node) => {\n\t\t\t\treturn options.accessibilityProvider!.isChecked!(node.element);\n\t\t\t} : undefined,\n\t\t\tgetRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? (node) => {\n\t\t\t\treturn options.accessibilityProvider!.getRole!(node.element);\n\t\t\t} : () => 'treeitem',\n\t\t\tgetAriaLabel(e) {\n\t\t\t\treturn options.accessibilityProvider!.getAriaLabel(e.element);\n\t\t\t},\n\t\t\tgetWidgetAriaLabel() {\n\t\t\t\treturn options.accessibilityProvider!.getWidgetAriaLabel();\n\t\t\t},\n\t\t\tgetWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider!.getWidgetRole!() : () => 'tree',\n\t\t\tgetAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? (node) => options.accessibilityProvider!.getAriaLevel!(node.element) : (node) => {\n\t\t\t\treturn node.depth;\n\t\t\t},\n\t\t\tgetActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n\t\t\t\treturn options.accessibilityProvider!.getActiveDescendantId!(node.element);\n\t\t\t})\n\t\t},\n\t\tkeyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n\t\t\t...options.keyboardNavigationLabelProvider,\n\t\t\tgetKeyboardNavigationLabel(node) {\n\t\t\t\treturn options.keyboardNavigationLabelProvider!.getKeyboardNavigationLabel(node.element);\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport class ComposedTreeDelegate<T, N extends { element: T }> implements IListVirtualDelegate<N> {\n\n\tconstructor(private delegate: IListVirtualDelegate<T>) { }\n\n\tgetHeight(element: N): number {\n\t\treturn this.delegate.getHeight(element.element);\n\t}\n\n\tgetTemplateId(element: N): string {\n\t\treturn this.delegate.getTemplateId(element.element);\n\t}\n\n\thasDynamicHeight(element: N): boolean {\n\t\treturn !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n\t}\n\n\tsetDynamicHeight(element: N, height: number): void {\n\t\tthis.delegate.setDynamicHeight?.(element.element, height);\n\t}\n}\n\ninterface ITreeListTemplateData<T> {\n\treadonly container: HTMLElement;\n\treadonly indent: HTMLElement;\n\treadonly twistie: HTMLElement;\n\tindentGuidesDisposable: IDisposable;\n\treadonly templateData: T;\n}\n\nexport interface IAbstractTreeViewState {\n\treadonly focus: Iterable<string>;\n\treadonly selection: Iterable<string>;\n\treadonly expanded: { [id: string]: 1 | 0 };\n\treadonly scrollTop: number;\n}\n\nexport class AbstractTreeViewState implements IAbstractTreeViewState {\n\tpublic readonly focus: Set<string>;\n\tpublic readonly selection: Set<string>;\n\tpublic readonly expanded: { [id: string]: 1 | 0 };\n\tpublic scrollTop: number;\n\n\tpublic static lift(state: IAbstractTreeViewState) {\n\t\treturn state instanceof AbstractTreeViewState ? state : new AbstractTreeViewState(state);\n\t}\n\n\tpublic static empty(scrollTop = 0) {\n\t\treturn new AbstractTreeViewState({\n\t\t\tfocus: [],\n\t\t\tselection: [],\n\t\t\texpanded: Object.create(null),\n\t\t\tscrollTop,\n\t\t});\n\t}\n\n\tprotected constructor(state: IAbstractTreeViewState) {\n\t\tthis.focus = new Set(state.focus);\n\t\tthis.selection = new Set(state.selection);\n\t\tif (state.expanded instanceof Array) { // old format\n\t\t\tthis.expanded = Object.create(null);\n\t\t\tfor (const id of state.expanded as string[]) {\n\t\t\t\tthis.expanded[id] = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.expanded = state.expanded;\n\t\t}\n\t\tthis.expanded = state.expanded;\n\t\tthis.scrollTop = state.scrollTop;\n\t}\n\n\tpublic toJSON(): IAbstractTreeViewState {\n\t\treturn {\n\t\t\tfocus: Array.from(this.focus),\n\t\t\tselection: Array.from(this.selection),\n\t\t\texpanded: this.expanded,\n\t\t\tscrollTop: this.scrollTop,\n\t\t};\n\t}\n}\n\nexport enum RenderIndentGuides {\n\tNone = 'none',\n\tOnHover = 'onHover',\n\tAlways = 'always'\n}\n\ninterface ITreeRendererOptions {\n\treadonly indent?: number;\n\treadonly renderIndentGuides?: RenderIndentGuides;\n\t// TODO@joao replace this with collapsible: boolean | 'ondemand'\n\treadonly hideTwistiesOfChildlessElements?: boolean;\n}\n\ninterface Collection<T> {\n\treadonly elements: T[];\n\treadonly onDidChange: Event<T[]>;\n}\n\nclass EventCollection<T> implements Collection<T>, IDisposable {\n\n\tprivate readonly disposables = new DisposableStore();\n\treadonly onDidChange: Event<T[]>;\n\n\tget elements(): T[] {\n\t\treturn this._elements;\n\t}\n\n\tconstructor(onDidChange: Event<T[]>, private _elements: T[] = []) {\n\t\tthis.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements, this.disposables);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport class TreeRenderer<T, TFilterData, TRef, TTemplateData> implements IListRenderer<ITreeNode<T, TFilterData>, ITreeListTemplateData<TTemplateData>> {\n\n\tprivate static readonly DefaultIndent = 8;\n\n\treadonly templateId: string;\n\tprivate renderedElements = new Map<T, ITreeNode<T, TFilterData>>();\n\tprivate renderedNodes = new Map<ITreeNode<T, TFilterData>, ITreeListTemplateData<TTemplateData>>();\n\tprivate indent: number = TreeRenderer.DefaultIndent;\n\tprivate hideTwistiesOfChildlessElements: boolean = false;\n\n\tprivate shouldRenderIndentGuides: boolean = false;\n\tprivate activeIndentNodes = new Set<ITreeNode<T, TFilterData>>();\n\tprivate indentGuidesDisposable: IDisposable = Disposable.None;\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\tprivate renderer: ITreeRenderer<T, TFilterData, TTemplateData>,\n\t\tprivate model: ITreeModel<T, TFilterData, TRef>,\n\t\tonDidChangeCollapseState: Event<ICollapseStateChangeEvent<T, TFilterData>>,\n\t\tprivate activeNodes: Collection<ITreeNode<T, TFilterData>>,\n\t\tprivate renderedIndentGuides: SetMap<ITreeNode<T, TFilterData>, HTMLDivElement>,\n\t\toptions: ITreeRendererOptions = {}\n\t) {\n\t\tthis.templateId = renderer.templateId;\n\t\tthis.updateOptions(options);\n\n\t\tEvent.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n\t\trenderer.onDidChangeTwistieState?.(this.onDidChangeTwistieState, this, this.disposables);\n\t}\n\n\tupdateOptions(options: ITreeRendererOptions = {}): void {\n\t\tif (typeof options.indent !== 'undefined') {\n\t\t\tconst indent = clamp(options.indent, 0, 40);\n\n\t\t\tif (indent !== this.indent) {\n\t\t\t\tthis.indent = indent;\n\n\t\t\t\tfor (const [node, templateData] of this.renderedNodes) {\n\t\t\t\t\tthis.renderTreeElement(node, templateData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof options.renderIndentGuides !== 'undefined') {\n\t\t\tconst shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n\n\t\t\tif (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n\t\t\t\tthis.shouldRenderIndentGuides = shouldRenderIndentGuides;\n\n\t\t\t\tfor (const [node, templateData] of this.renderedNodes) {\n\t\t\t\t\tthis._renderIndentGuides(node, templateData);\n\t\t\t\t}\n\n\t\t\t\tthis.indentGuidesDisposable.dispose();\n\n\t\t\t\tif (shouldRenderIndentGuides) {\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tthis.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n\t\t\t\t\tthis.indentGuidesDisposable = disposables;\n\n\t\t\t\t\tthis._onDidChangeActiveNodes(this.activeNodes.elements);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n\t\t\tthis.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n\t\t}\n\t}\n\n\trenderTemplate(container: HTMLElement): ITreeListTemplateData<TTemplateData> {\n\t\tconst el = append(container, $('.monaco-tl-row'));\n\t\tconst indent = append(el, $('.monaco-tl-indent'));\n\t\tconst twistie = append(el, $('.monaco-tl-twistie'));\n\t\tconst contents = append(el, $('.monaco-tl-contents'));\n\t\tconst templateData = this.renderer.renderTemplate(contents);\n\n\t\treturn { container, indent, twistie, indentGuidesDisposable: Disposable.None, templateData };\n\t}\n\n\trenderElement(node: ITreeNode<T, TFilterData>, index: number, templateData: ITreeListTemplateData<TTemplateData>, height: number | undefined): void {\n\t\tthis.renderedNodes.set(node, templateData);\n\t\tthis.renderedElements.set(node.element, node);\n\t\tthis.renderTreeElement(node, templateData);\n\t\tthis.renderer.renderElement(node, index, templateData.templateData, height);\n\t}\n\n\tdisposeElement(node: ITreeNode<T, TFilterData>, index: number, templateData: ITreeListTemplateData<TTemplateData>, height: number | undefined): void {\n\t\ttemplateData.indentGuidesDisposable.dispose();\n\n\t\tthis.renderer.disposeElement?.(node, index, templateData.templateData, height);\n\n\t\tif (typeof height === 'number') {\n\t\t\tthis.renderedNodes.delete(node);\n\t\t\tthis.renderedElements.delete(node.element);\n\t\t}\n\t}\n\n\tdisposeTemplate(templateData: ITreeListTemplateData<TTemplateData>): void {\n\t\tthis.renderer.disposeTemplate(templateData.templateData);\n\t}\n\n\tprivate onDidChangeTwistieState(element: T): void {\n\t\tconst node = this.renderedElements.get(element);\n\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.onDidChangeNodeTwistieState(node);\n\t}\n\n\tprivate onDidChangeNodeTwistieState(node: ITreeNode<T, TFilterData>): void {\n\t\tconst templateData = this.renderedNodes.get(node);\n\n\t\tif (!templateData) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDidChangeActiveNodes(this.activeNodes.elements);\n\t\tthis.renderTreeElement(node, templateData);\n\t}\n\n\tprivate renderTreeElement(node: ITreeNode<T, TFilterData>, templateData: ITreeListTemplateData<TTemplateData>) {\n\t\tconst indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n\t\ttemplateData.twistie.style.paddingLeft = `${indent}px`;\n\t\ttemplateData.indent.style.width = `${indent + this.indent - 16}px`;\n\n\t\tif (node.collapsible) {\n\t\t\ttemplateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n\t\t} else {\n\t\t\ttemplateData.container.removeAttribute('aria-expanded');\n\t\t}\n\n\t\ttemplateData.twistie.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n\n\t\tlet twistieRendered = false;\n\n\t\tif (this.renderer.renderTwistie) {\n\t\t\ttwistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n\t\t}\n\n\t\tif (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n\t\t\tif (!twistieRendered) {\n\t\t\t\ttemplateData.twistie.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n\t\t\t}\n\n\t\t\ttemplateData.twistie.classList.add('collapsible');\n\t\t\ttemplateData.twistie.classList.toggle('collapsed', node.collapsed);\n\t\t} else {\n\t\t\ttemplateData.twistie.classList.remove('collapsible', 'collapsed');\n\t\t}\n\n\t\tthis._renderIndentGuides(node, templateData);\n\t}\n\n\tprivate _renderIndentGuides(node: ITreeNode<T, TFilterData>, templateData: ITreeListTemplateData<TTemplateData>): void {\n\t\tclearNode(templateData.indent);\n\t\ttemplateData.indentGuidesDisposable.dispose();\n\n\t\tif (!this.shouldRenderIndentGuides) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposableStore = new DisposableStore();\n\n\t\twhile (true) {\n\t\t\tconst ref = this.model.getNodeLocation(node);\n\t\t\tconst parentRef = this.model.getParentNodeLocation(ref);\n\n\t\t\tif (!parentRef) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst parent = this.model.getNode(parentRef);\n\t\t\tconst guide = $<HTMLDivElement>('.indent-guide', { style: `width: ${this.indent}px` });\n\n\t\t\tif (this.activeIndentNodes.has(parent)) {\n\t\t\t\tguide.classList.add('active');\n\t\t\t}\n\n\t\t\tif (templateData.indent.childElementCount === 0) {\n\t\t\t\ttemplateData.indent.appendChild(guide);\n\t\t\t} else {\n\t\t\t\ttemplateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n\t\t\t}\n\n\t\t\tthis.renderedIndentGuides.add(parent, guide);\n\t\t\tdisposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n\n\t\t\tnode = parent;\n\t\t}\n\n\t\ttemplateData.indentGuidesDisposable = disposableStore;\n\t}\n\n\tprivate _onDidChangeActiveNodes(nodes: ITreeNode<T, TFilterData>[]): void {\n\t\tif (!this.shouldRenderIndentGuides) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst set = new Set<ITreeNode<T, TFilterData>>();\n\n\t\tnodes.forEach(node => {\n\t\t\tconst ref = this.model.getNodeLocation(node);\n\t\t\ttry {\n\t\t\t\tconst parentRef = this.model.getParentNodeLocation(ref);\n\n\t\t\t\tif (node.collapsible && node.children.length > 0 && !node.collapsed) {\n\t\t\t\t\tset.add(node);\n\t\t\t\t} else if (parentRef) {\n\t\t\t\t\tset.add(this.model.getNode(parentRef));\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// noop\n\t\t\t}\n\t\t});\n\n\t\tthis.activeIndentNodes.forEach(node => {\n\t\t\tif (!set.has(node)) {\n\t\t\t\tthis.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n\t\t\t}\n\t\t});\n\n\t\tset.forEach(node => {\n\t\t\tif (!this.activeIndentNodes.has(node)) {\n\t\t\t\tthis.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n\t\t\t}\n\t\t});\n\n\t\tthis.activeIndentNodes = set;\n\t}\n\n\tsetModel(model: ITreeModel<T, TFilterData, TRef>): void {\n\t\tthis.model = model;\n\t}\n\n\tdispose(): void {\n\t\tthis.renderedNodes.clear();\n\t\tthis.renderedElements.clear();\n\t\tthis.indentGuidesDisposable.dispose();\n\t\tdispose(this.disposables);\n\t}\n}\n\nexport type LabelFuzzyScore = { label: string; score: FuzzyScore };\n\nclass FindFilter<T> implements ITreeFilter<T, FuzzyScore | LabelFuzzyScore>, IDisposable {\n\tprivate _totalCount = 0;\n\tget totalCount(): number { return this._totalCount; }\n\tprivate _matchCount = 0;\n\tget matchCount(): number { return this._matchCount; }\n\n\tprivate _pattern: string = '';\n\tprivate _lowercasePattern: string = '';\n\tprivate readonly disposables = new DisposableStore();\n\n\tset pattern(pattern: string) {\n\t\tthis._pattern = pattern;\n\t\tthis._lowercasePattern = pattern.toLowerCase();\n\t}\n\n\tconstructor(\n\t\tprivate tree: AbstractTree<T, any, any>,\n\t\tprivate keyboardNavigationLabelProvider: IKeyboardNavigationLabelProvider<T>,\n\t\tprivate _filter?: ITreeFilter<T, FuzzyScore>\n\t) {\n\t\ttree.onWillRefilter(this.reset, this, this.disposables);\n\t}\n\n\tfilter(element: T, parentVisibility: TreeVisibility): TreeFilterResult<FuzzyScore | LabelFuzzyScore> {\n\t\tlet visibility = TreeVisibility.Visible;\n\n\t\tif (this._filter) {\n\t\t\tconst result = this._filter.filter(element, parentVisibility);\n\n\t\t\tif (typeof result === 'boolean') {\n\t\t\t\tvisibility = result ? TreeVisibility.Visible : TreeVisibility.Hidden;\n\t\t\t} else if (isFilterResult(result)) {\n\t\t\t\tvisibility = getVisibleState(result.visibility);\n\t\t\t} else {\n\t\t\t\tvisibility = result;\n\t\t\t}\n\n\t\t\tif (visibility === TreeVisibility.Hidden) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tthis._totalCount++;\n\n\t\tif (!this._pattern) {\n\t\t\tthis._matchCount++;\n\t\t\treturn { data: FuzzyScore.Default, visibility };\n\t\t}\n\n\t\tconst label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n\t\tconst labels = Array.isArray(label) ? label : [label];\n\n\t\tfor (const l of labels) {\n\t\t\tconst labelStr: string = l && l.toString();\n\t\t\tif (typeof labelStr === 'undefined') {\n\t\t\t\treturn { data: FuzzyScore.Default, visibility };\n\t\t\t}\n\n\t\t\tlet score: FuzzyScore | undefined;\n\t\t\tif (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n\t\t\t\tconst index = labelStr.toLowerCase().indexOf(this._lowercasePattern);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tscore = [Number.MAX_SAFE_INTEGER, 0];\n\t\t\t\t\tfor (let i = this._lowercasePattern.length; i > 0; i--) {\n\t\t\t\t\t\tscore.push(index + i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscore = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, { firstMatchCanBeWeak: true, boostFullMatch: true });\n\t\t\t}\n\t\t\tif (score) {\n\t\t\t\tthis._matchCount++;\n\t\t\t\treturn labels.length === 1 ?\n\t\t\t\t\t{ data: score, visibility } :\n\t\t\t\t\t{ data: { label: labelStr, score: score }, visibility };\n\t\t\t}\n\t\t}\n\n\t\tif (this.tree.findMode === TreeFindMode.Filter) {\n\t\t\tif (typeof this.tree.options.defaultFindVisibility === 'number') {\n\t\t\t\treturn this.tree.options.defaultFindVisibility;\n\t\t\t} else if (this.tree.options.defaultFindVisibility) {\n\t\t\t\treturn this.tree.options.defaultFindVisibility(element);\n\t\t\t} else {\n\t\t\t\treturn TreeVisibility.Recurse;\n\t\t\t}\n\t\t} else {\n\t\t\treturn { data: FuzzyScore.Default, visibility };\n\t\t}\n\t}\n\n\tprivate reset(): void {\n\t\tthis._totalCount = 0;\n\t\tthis._matchCount = 0;\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.disposables);\n\t}\n}\n\nexport interface ITreeFindToggleOpts {\n\treadonly isChecked: boolean;\n\treadonly inputActiveOptionBorder: string | undefined;\n\treadonly inputActiveOptionForeground: string | undefined;\n\treadonly inputActiveOptionBackground: string | undefined;\n\treadonly hoverDelegate?: IHoverDelegate;\n}\n\nexport class ModeToggle extends Toggle {\n\tconstructor(opts: ITreeFindToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.listFilter,\n\t\t\ttitle: localize('filter', \"Filter\"),\n\t\t\tisChecked: opts.isChecked ?? false,\n\t\t\thoverDelegate: opts.hoverDelegate ?? getDefaultHoverDelegate('element'),\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground\n\t\t});\n\t}\n}\n\nexport class FuzzyToggle extends Toggle {\n\tconstructor(opts: ITreeFindToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.searchFuzzy,\n\t\t\ttitle: localize('fuzzySearch', \"Fuzzy Match\"),\n\t\t\tisChecked: opts.isChecked ?? false,\n\t\t\thoverDelegate: opts.hoverDelegate ?? getDefaultHoverDelegate('element'),\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground\n\t\t});\n\t}\n}\n\nexport interface IFindWidgetStyles {\n\tlistFilterWidgetBackground: string | undefined;\n\tlistFilterWidgetOutline: string | undefined;\n\tlistFilterWidgetNoMatchesOutline: string | undefined;\n\tlistFilterWidgetShadow: string | undefined;\n\treadonly toggleStyles: IToggleStyles;\n\treadonly inputBoxStyles: IInputBoxStyles;\n}\n\nexport interface IFindWidgetOptions {\n\treadonly history?: string[];\n\treadonly styles?: IFindWidgetStyles;\n}\n\nconst unthemedFindWidgetStyles: IFindWidgetStyles = {\n\tinputBoxStyles: unthemedInboxStyles,\n\ttoggleStyles: unthemedToggleStyles,\n\tlistFilterWidgetBackground: undefined,\n\tlistFilterWidgetNoMatchesOutline: undefined,\n\tlistFilterWidgetOutline: undefined,\n\tlistFilterWidgetShadow: undefined\n};\n\nexport enum TreeFindMode {\n\tHighlight,\n\tFilter\n}\n\nexport enum TreeFindMatchType {\n\tFuzzy,\n\tContiguous\n}\n\nclass FindWidget<T, TFilterData> extends Disposable {\n\n\tprivate readonly elements = h('.monaco-tree-type-filter', [\n\t\th('.monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab', { tabIndex: 0 }),\n\t\th('.monaco-tree-type-filter-input@findInput'),\n\t\th('.monaco-tree-type-filter-actionbar@actionbar'),\n\t]);\n\n\tset mode(mode: TreeFindMode) {\n\t\tthis.modeToggle.checked = mode === TreeFindMode.Filter;\n\t\tthis.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', \"Type to filter\") : localize('type to search', \"Type to search\"));\n\t}\n\n\tset matchType(matchType: TreeFindMatchType) {\n\t\tthis.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n\t}\n\n\tget value(): string {\n\t\treturn this.findInput.inputBox.value;\n\t}\n\n\tset value(value: string) {\n\t\tthis.findInput.inputBox.value = value;\n\t}\n\n\tprivate readonly modeToggle: ModeToggle;\n\tprivate readonly matchTypeToggle: FuzzyToggle;\n\tprivate readonly findInput: FindInput;\n\tprivate readonly actionbar: ActionBar;\n\tprivate width = 0;\n\tprivate right = 0;\n\tprivate top = 0;\n\n\treadonly _onDidDisable = new Emitter<void>();\n\treadonly onDidDisable = this._onDidDisable.event;\n\treadonly onDidChangeValue: Event<string>;\n\treadonly onDidChangeMode: Event<TreeFindMode>;\n\treadonly onDidChangeMatchType: Event<TreeFindMatchType>;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate tree: AbstractTree<T, TFilterData, any>,\n\t\tcontextViewProvider: IContextViewProvider,\n\t\tmode: TreeFindMode,\n\t\tmatchType: TreeFindMatchType,\n\t\toptions?: IFindWidgetOptions\n\t) {\n\t\tsuper();\n\n\t\tcontainer.appendChild(this.elements.root);\n\t\tthis._register(toDisposable(() => this.elements.root.remove()));\n\n\t\tconst styles = options?.styles ?? unthemedFindWidgetStyles;\n\n\t\tif (styles.listFilterWidgetBackground) {\n\t\t\tthis.elements.root.style.backgroundColor = styles.listFilterWidgetBackground;\n\t\t}\n\n\t\tif (styles.listFilterWidgetShadow) {\n\t\t\tthis.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n\t\t}\n\n\t\tconst toggleHoverDelegate = this._register(createInstantHoverDelegate());\n\t\tthis.modeToggle = this._register(new ModeToggle({ ...styles.toggleStyles, isChecked: mode === TreeFindMode.Filter, hoverDelegate: toggleHoverDelegate }));\n\t\tthis.matchTypeToggle = this._register(new FuzzyToggle({ ...styles.toggleStyles, isChecked: matchType === TreeFindMatchType.Fuzzy, hoverDelegate: toggleHoverDelegate }));\n\t\tthis.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);\n\t\tthis.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);\n\n\t\tthis.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {\n\t\t\tlabel: localize('type to search', \"Type to search\"),\n\t\t\tadditionalToggles: [this.modeToggle, this.matchTypeToggle],\n\t\t\tshowCommonFindToggles: false,\n\t\t\tinputBoxStyles: styles.inputBoxStyles,\n\t\t\ttoggleStyles: styles.toggleStyles,\n\t\t\thistory: options?.history\n\t\t}));\n\n\t\tthis.actionbar = this._register(new ActionBar(this.elements.actionbar));\n\t\tthis.mode = mode;\n\n\t\tconst emitter = this._register(new DomEmitter(this.findInput.inputBox.inputElement, 'keydown'));\n\t\tconst onKeyDown = Event.chain(emitter.event, $ => $.map(e => new StandardKeyboardEvent(e)));\n\n\t\tthis._register(onKeyDown((e): any => {\n\t\t\t// Using equals() so we reserve modified keys for future use\n\t\t\tif (e.equals(KeyCode.Enter)) {\n\t\t\t\t// This is the only keyboard way to return to the tree from a history item that isn't the last one\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tthis.findInput.inputBox.addToHistory();\n\t\t\t\tthis.tree.domFocus();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.equals(KeyCode.DownArrow)) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tif (this.findInput.inputBox.isAtLastInHistory() || this.findInput.inputBox.isNowhereInHistory()) {\n\t\t\t\t\t// Retain original pre-history DownArrow behavior\n\t\t\t\t\tthis.findInput.inputBox.addToHistory();\n\t\t\t\t\tthis.tree.domFocus();\n\t\t\t\t} else {\n\t\t\t\t\t// Downward through history\n\t\t\t\t\tthis.findInput.inputBox.showNextValue();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.equals(KeyCode.UpArrow)) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\t// Upward through history\n\t\t\t\tthis.findInput.inputBox.showPreviousValue();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}));\n\n\t\tconst closeAction = this._register(new Action('close', localize('close', \"Close\"), 'codicon codicon-close', true, () => this.dispose()));\n\t\tthis.actionbar.push(closeAction, { icon: true, label: false });\n\n\t\tconst onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));\n\n\t\tthis._register(onGrabMouseDown.event(e => {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst onWindowMouseMove = disposables.add(new DomEmitter(getWindow(e), 'mousemove'));\n\t\t\tconst onWindowMouseUp = disposables.add(new DomEmitter(getWindow(e), 'mouseup'));\n\n\t\t\tconst startRight = this.right;\n\t\t\tconst startX = e.pageX;\n\t\t\tconst startTop = this.top;\n\t\t\tconst startY = e.pageY;\n\t\t\tthis.elements.grab.classList.add('grabbing');\n\n\t\t\tconst transition = this.elements.root.style.transition;\n\t\t\tthis.elements.root.style.transition = 'unset';\n\n\t\t\tconst update = (e: MouseEvent) => {\n\t\t\t\tconst deltaX = e.pageX - startX;\n\t\t\t\tthis.right = startRight - deltaX;\n\t\t\t\tconst deltaY = e.pageY - startY;\n\t\t\t\tthis.top = startTop + deltaY;\n\t\t\t\tthis.layout();\n\t\t\t};\n\n\t\t\tdisposables.add(onWindowMouseMove.event(update));\n\t\t\tdisposables.add(onWindowMouseUp.event(e => {\n\t\t\t\tupdate(e);\n\t\t\t\tthis.elements.grab.classList.remove('grabbing');\n\t\t\t\tthis.elements.root.style.transition = transition;\n\t\t\t\tdisposables.dispose();\n\t\t\t}));\n\t\t}));\n\n\t\tconst onGrabKeyDown = Event.chain(this._register(new DomEmitter(this.elements.grab, 'keydown')).event, $ => $.map(e => new StandardKeyboardEvent(e)));\n\n\t\tthis._register(onGrabKeyDown((e): any => {\n\t\t\tlet right: number | undefined;\n\t\t\tlet top: number | undefined;\n\n\t\t\tif (e.keyCode === KeyCode.LeftArrow) {\n\t\t\t\tright = Number.POSITIVE_INFINITY;\n\t\t\t} else if (e.keyCode === KeyCode.RightArrow) {\n\t\t\t\tright = 0;\n\t\t\t} else if (e.keyCode === KeyCode.Space) {\n\t\t\t\tright = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n\t\t\t}\n\n\t\t\tif (e.keyCode === KeyCode.UpArrow) {\n\t\t\t\ttop = 0;\n\t\t\t} else if (e.keyCode === KeyCode.DownArrow) {\n\t\t\t\ttop = Number.POSITIVE_INFINITY;\n\t\t\t}\n\n\t\t\tif (right !== undefined) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tthis.right = right;\n\t\t\t\tthis.layout();\n\t\t\t}\n\n\t\t\tif (top !== undefined) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\tthis.top = top;\n\t\t\t\tconst transition = this.elements.root.style.transition;\n\t\t\t\tthis.elements.root.style.transition = 'unset';\n\t\t\t\tthis.layout();\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.elements.root.style.transition = transition;\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t}));\n\n\t\tthis.onDidChangeValue = this.findInput.onDidChange;\n\t}\n\n\tgetHistory(): string[] {\n\t\treturn this.findInput.inputBox.getHistory();\n\t}\n\n\tfocus() {\n\t\tthis.findInput.focus();\n\t}\n\n\tselect() {\n\t\tthis.findInput.select();\n\n\t\t// Reposition to last in history\n\t\tthis.findInput.inputBox.addToHistory(true);\n\t}\n\n\tlayout(width: number = this.width): void {\n\t\tthis.width = width;\n\t\tthis.right = clamp(this.right, 0, Math.max(0, width - 212));\n\t\tthis.elements.root.style.right = `${this.right}px`;\n\t\tthis.top = clamp(this.top, 0, 24);\n\t\tthis.elements.root.style.top = `${this.top}px`;\n\t}\n\n\tshowMessage(message: IMessage): void {\n\t\tthis.findInput.showMessage(message);\n\t}\n\n\tclearMessage(): void {\n\t\tthis.findInput.clearMessage();\n\t}\n\n\toverride async dispose(): Promise<void> {\n\t\tthis._onDidDisable.fire();\n\t\tthis.elements.root.classList.add('disabled');\n\t\tawait timeout(300);\n\t\tsuper.dispose();\n\t}\n}\n\ninterface IFindControllerOptions extends IFindWidgetOptions { }\n\nclass FindController<T, TFilterData> implements IDisposable {\n\n\tprivate _history: string[] | undefined;\n\n\tprivate _pattern = '';\n\tget pattern(): string { return this._pattern; }\n\tprivate previousPattern = '';\n\n\tprivate _mode: TreeFindMode;\n\tget mode(): TreeFindMode { return this._mode; }\n\tset mode(mode: TreeFindMode) {\n\t\tif (mode === this._mode) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._mode = mode;\n\n\t\tif (this.widget) {\n\t\t\tthis.widget.mode = this._mode;\n\t\t}\n\n\t\tthis.tree.refilter();\n\t\tthis.render();\n\t\tthis._onDidChangeMode.fire(mode);\n\t}\n\n\tprivate _matchType: TreeFindMatchType;\n\tget matchType(): TreeFindMatchType { return this._matchType; }\n\tset matchType(matchType: TreeFindMatchType) {\n\t\tif (matchType === this._matchType) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._matchType = matchType;\n\n\t\tif (this.widget) {\n\t\t\tthis.widget.matchType = this._matchType;\n\t\t}\n\n\t\tthis.tree.refilter();\n\t\tthis.render();\n\t\tthis._onDidChangeMatchType.fire(matchType);\n\t}\n\n\tprivate widget: FindWidget<T, TFilterData> | undefined;\n\tprivate width = 0;\n\n\tprivate readonly _onDidChangeMode = new Emitter<TreeFindMode>();\n\treadonly onDidChangeMode = this._onDidChangeMode.event;\n\n\tprivate readonly _onDidChangeMatchType = new Emitter<TreeFindMatchType>();\n\treadonly onDidChangeMatchType = this._onDidChangeMatchType.event;\n\n\tprivate readonly _onDidChangePattern = new Emitter<string>();\n\treadonly onDidChangePattern = this._onDidChangePattern.event;\n\n\tprivate readonly _onDidChangeOpenState = new Emitter<boolean>();\n\treadonly onDidChangeOpenState = this._onDidChangeOpenState.event;\n\n\tprivate readonly enabledDisposables = new DisposableStore();\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\tprivate tree: AbstractTree<T, TFilterData, any>,\n\t\tprivate view: List<ITreeNode<T, TFilterData>>,\n\t\tprivate filter: FindFilter<T>,\n\t\tprivate readonly contextViewProvider: IContextViewProvider,\n\t\tprivate readonly options: IFindControllerOptions = {}\n\t) {\n\t\tthis._mode = tree.options.defaultFindMode ?? TreeFindMode.Highlight;\n\t\tthis._matchType = tree.options.defaultFindMatchType ?? TreeFindMatchType.Fuzzy;\n\t}\n\n\tupdateOptions(optionsUpdate: IAbstractTreeOptionsUpdate = {}): void {\n\t\tif (optionsUpdate.defaultFindMode !== undefined) {\n\t\t\tthis.mode = optionsUpdate.defaultFindMode;\n\t\t}\n\n\t\tif (optionsUpdate.defaultFindMatchType !== undefined) {\n\t\t\tthis.matchType = optionsUpdate.defaultFindMatchType;\n\t\t}\n\t}\n\n\tisOpened(): boolean {\n\t\treturn !!this.widget;\n\t}\n\n\topen(): void {\n\t\tif (this.widget) {\n\t\t\tthis.widget.focus();\n\t\t\tthis.widget.select();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.widget = new FindWidget(this.view.getHTMLElement(), this.tree, this.contextViewProvider, this.mode, this.matchType, { ...this.options, history: this._history });\n\t\tthis.enabledDisposables.add(this.widget);\n\n\t\tthis.widget.onDidChangeValue(this.onDidChangeValue, this, this.enabledDisposables);\n\t\tthis.widget.onDidChangeMode(mode => this.mode = mode, undefined, this.enabledDisposables);\n\t\tthis.widget.onDidChangeMatchType(matchType => this.matchType = matchType, undefined, this.enabledDisposables);\n\t\tthis.widget.onDidDisable(this.close, this, this.enabledDisposables);\n\n\t\tthis.widget.layout(this.width);\n\t\tthis.widget.focus();\n\n\t\tthis.widget.value = this.previousPattern;\n\t\tthis.widget.select();\n\n\t\tthis._onDidChangeOpenState.fire(true);\n\t}\n\n\tclose(): void {\n\t\tif (!this.widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._history = this.widget.getHistory();\n\t\tthis.widget = undefined;\n\n\t\tthis.enabledDisposables.clear();\n\n\t\tthis.previousPattern = this.pattern;\n\t\tthis.onDidChangeValue('');\n\t\tthis.tree.domFocus();\n\n\t\tthis._onDidChangeOpenState.fire(false);\n\t}\n\n\tprivate onDidChangeValue(pattern: string): void {\n\t\tthis._pattern = pattern;\n\t\tthis._onDidChangePattern.fire(pattern);\n\n\t\tthis.filter.pattern = pattern;\n\t\tthis.tree.refilter();\n\n\t\tif (pattern) {\n\t\t\tthis.tree.focusNext(0, true, undefined, node => !FuzzyScore.isDefault(node.filterData as any as FuzzyScore));\n\t\t}\n\n\t\tconst focus = this.tree.getFocus();\n\n\t\tif (focus.length > 0) {\n\t\t\tconst element = focus[0];\n\n\t\t\tif (this.tree.getRelativeTop(element) === null) {\n\t\t\t\tthis.tree.reveal(element, 0.5);\n\t\t\t}\n\t\t}\n\n\t\tthis.render();\n\t}\n\n\trender(): void {\n\t\tconst noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n\n\t\tif (this.pattern && noMatches) {\n\t\t\talert(localize('replFindNoResults', \"No results\"));\n\t\t\tif (this.tree.options.showNotFoundMessage ?? true) {\n\t\t\t\tthis.widget?.showMessage({ type: MessageType.WARNING, content: localize('not found', \"No elements found.\") });\n\t\t\t} else {\n\t\t\t\tthis.widget?.showMessage({ type: MessageType.WARNING });\n\t\t\t}\n\t\t} else {\n\t\t\tthis.widget?.clearMessage();\n\t\t\tif (this.pattern) {\n\t\t\t\talert(localize('replFindResults', \"{0} results\", this.filter.matchCount));\n\t\t\t}\n\t\t}\n\t}\n\n\tshouldAllowFocus(node: ITreeNode<T, TFilterData>): boolean {\n\t\tif (!this.widget || !this.pattern) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !FuzzyScore.isDefault(node.filterData as any as FuzzyScore);\n\t}\n\n\tlayout(width: number): void {\n\t\tthis.width = width;\n\t\tthis.widget?.layout(width);\n\t}\n\n\tdispose() {\n\t\tthis._history = undefined;\n\t\tthis._onDidChangePattern.dispose();\n\t\tthis.enabledDisposables.dispose();\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport interface StickyScrollNode<T, TFilterData> {\n\treadonly node: ITreeNode<T, TFilterData>;\n\treadonly startIndex: number;\n\treadonly endIndex: number;\n\treadonly height: number;\n\treadonly position: number;\n}\n\nfunction stickyScrollNodeStateEquals<T, TFilterData>(node1: StickyScrollNode<T, TFilterData>, node2: StickyScrollNode<T, TFilterData>) {\n\treturn node1.position === node2.position && stickyScrollNodeEquals(node1, node2);\n}\n\nfunction stickyScrollNodeEquals<T, TFilterData>(node1: StickyScrollNode<T, TFilterData>, node2: StickyScrollNode<T, TFilterData>) {\n\treturn node1.node.element === node2.node.element &&\n\t\tnode1.startIndex === node2.startIndex &&\n\t\tnode1.height === node2.height &&\n\t\tnode1.endIndex === node2.endIndex;\n}\n\nclass StickyScrollState<T, TFilterData, TRef> {\n\n\tconstructor(\n\t\treadonly stickyNodes: StickyScrollNode<T, TFilterData>[] = []\n\t) { }\n\n\tget count(): number { return this.stickyNodes.length; }\n\n\tequal(state: StickyScrollState<T, TFilterData, TRef>): boolean {\n\t\treturn equals(this.stickyNodes, state.stickyNodes, stickyScrollNodeStateEquals);\n\t}\n\n\tlastNodePartiallyVisible(): boolean {\n\t\tif (this.count === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst lastStickyNode = this.stickyNodes[this.count - 1];\n\t\tif (this.count === 1) {\n\t\t\treturn lastStickyNode.position !== 0;\n\t\t}\n\n\t\tconst secondLastStickyNode = this.stickyNodes[this.count - 2];\n\t\treturn secondLastStickyNode.position + secondLastStickyNode.height !== lastStickyNode.position;\n\t}\n\n\tanimationStateChanged(previousState: StickyScrollState<T, TFilterData, TRef>): boolean {\n\t\tif (!equals(this.stickyNodes, previousState.stickyNodes, stickyScrollNodeEquals)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.count === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst lastStickyNode = this.stickyNodes[this.count - 1];\n\t\tconst previousLastStickyNode = previousState.stickyNodes[previousState.count - 1];\n\n\t\treturn lastStickyNode.position !== previousLastStickyNode.position;\n\t}\n}\n\nexport interface IStickyScrollDelegate<T, TFilterData> {\n\tconstrainStickyScrollNodes(stickyNodes: StickyScrollNode<T, TFilterData>[], stickyScrollMaxItemCount: number, maxWidgetHeight: number): StickyScrollNode<T, TFilterData>[];\n}\n\nclass DefaultStickyScrollDelegate<T, TFilterData> implements IStickyScrollDelegate<T, TFilterData> {\n\n\tconstrainStickyScrollNodes(stickyNodes: StickyScrollNode<T, TFilterData>[], stickyScrollMaxItemCount: number, maxWidgetHeight: number): StickyScrollNode<T, TFilterData>[] {\n\n\t\tfor (let i = 0; i < stickyNodes.length; i++) {\n\t\t\tconst stickyNode = stickyNodes[i];\n\t\t\tconst stickyNodeBottom = stickyNode.position + stickyNode.height;\n\t\t\tif (stickyNodeBottom > maxWidgetHeight || i >= stickyScrollMaxItemCount) {\n\t\t\t\treturn stickyNodes.slice(0, i);\n\t\t\t}\n\t\t}\n\n\t\treturn stickyNodes;\n\t}\n}\n\nclass StickyScrollController<T, TFilterData, TRef> extends Disposable {\n\n\treadonly onDidChangeHasFocus: Event<boolean>;\n\treadonly onContextMenu: Event<ITreeContextMenuEvent<T>>;\n\n\tprivate readonly stickyScrollDelegate: IStickyScrollDelegate<T, TFilterData>;\n\n\tprivate stickyScrollMaxItemCount: number;\n\tprivate readonly maxWidgetViewRatio = 0.4;\n\n\tprivate readonly _widget: StickyScrollWidget<T, TFilterData, TRef>;\n\n\tconstructor(\n\t\tprivate readonly tree: AbstractTree<T, TFilterData, TRef>,\n\t\tprivate model: ITreeModel<T, TFilterData, TRef>,\n\t\tprivate readonly view: List<ITreeNode<T, TFilterData>>,\n\t\trenderers: TreeRenderer<T, TFilterData, TRef, any>[],\n\t\tprivate readonly treeDelegate: IListVirtualDelegate<ITreeNode<T, TFilterData>>,\n\t\toptions: IAbstractTreeOptions<T, TFilterData> = {},\n\t) {\n\t\tsuper();\n\n\t\tconst stickyScrollOptions = this.validateStickySettings(options);\n\t\tthis.stickyScrollMaxItemCount = stickyScrollOptions.stickyScrollMaxItemCount;\n\n\t\tthis.stickyScrollDelegate = options.stickyScrollDelegate ?? new DefaultStickyScrollDelegate();\n\n\t\tthis._widget = this._register(new StickyScrollWidget(view.getScrollableElement(), view, tree, renderers, treeDelegate, options.accessibilityProvider));\n\t\tthis.onDidChangeHasFocus = this._widget.onDidChangeHasFocus;\n\t\tthis.onContextMenu = this._widget.onContextMenu;\n\n\t\tthis._register(view.onDidScroll(() => this.update()));\n\t\tthis._register(view.onDidChangeContentHeight(() => this.update()));\n\t\tthis._register(tree.onDidChangeCollapseState(() => this.update()));\n\n\t\tthis.update();\n\t}\n\n\tget height(): number {\n\t\treturn this._widget.height;\n\t}\n\n\tget count(): number {\n\t\treturn this._widget.count;\n\t}\n\n\tgetNode(node: ITreeNode<T, TFilterData>): StickyScrollNode<T, TFilterData> | undefined {\n\t\treturn this._widget.getNode(node);\n\t}\n\n\tprivate getNodeAtHeight(height: number): ITreeNode<T, TFilterData> | undefined {\n\t\tlet index;\n\t\tif (height === 0) {\n\t\t\tindex = this.view.firstVisibleIndex;\n\t\t} else {\n\t\t\tindex = this.view.indexAt(height + this.view.scrollTop);\n\t\t}\n\n\t\tif (index < 0 || index >= this.view.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.view.element(index);\n\t}\n\n\tprivate update() {\n\t\tconst firstVisibleNode = this.getNodeAtHeight(0);\n\n\t\t// Don't render anything if there are no elements\n\t\tif (!firstVisibleNode || this.tree.scrollTop === 0) {\n\t\t\tthis._widget.setState(undefined);\n\t\t\treturn;\n\t\t}\n\n\t\tconst stickyState = this.findStickyState(firstVisibleNode);\n\t\tthis._widget.setState(stickyState);\n\t}\n\n\tprivate findStickyState(firstVisibleNode: ITreeNode<T, TFilterData>): StickyScrollState<T, TFilterData, TRef> | undefined {\n\t\tconst stickyNodes: StickyScrollNode<T, TFilterData>[] = [];\n\t\tlet firstVisibleNodeUnderWidget: ITreeNode<T, TFilterData> | undefined = firstVisibleNode;\n\t\tlet stickyNodesHeight = 0;\n\n\t\tlet nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, undefined, stickyNodesHeight);\n\t\twhile (nextStickyNode) {\n\n\t\t\tstickyNodes.push(nextStickyNode);\n\t\t\tstickyNodesHeight += nextStickyNode.height;\n\n\t\t\tif (stickyNodes.length <= this.stickyScrollMaxItemCount) {\n\t\t\t\tfirstVisibleNodeUnderWidget = this.getNextVisibleNode(nextStickyNode);\n\t\t\t\tif (!firstVisibleNodeUnderWidget) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, nextStickyNode.node, stickyNodesHeight);\n\t\t}\n\n\t\tconst contrainedStickyNodes = this.constrainStickyNodes(stickyNodes);\n\t\treturn contrainedStickyNodes.length ? new StickyScrollState(contrainedStickyNodes) : undefined;\n\t}\n\n\tprivate getNextVisibleNode(previousStickyNode: StickyScrollNode<T, TFilterData>): ITreeNode<T, TFilterData> | undefined {\n\t\treturn this.getNodeAtHeight(previousStickyNode.position + previousStickyNode.height);\n\t}\n\n\tprivate getNextStickyNode(firstVisibleNodeUnderWidget: ITreeNode<T, TFilterData>, previousStickyNode: ITreeNode<T, TFilterData> | undefined, stickyNodesHeight: number): StickyScrollNode<T, TFilterData> | undefined {\n\t\tconst nextStickyNode = this.getAncestorUnderPrevious(firstVisibleNodeUnderWidget, previousStickyNode);\n\t\tif (!nextStickyNode) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (nextStickyNode === firstVisibleNodeUnderWidget) {\n\t\t\tif (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tif (this.nodeTopAlignsWithStickyNodesBottom(firstVisibleNodeUnderWidget, stickyNodesHeight)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n\t}\n\n\tprivate nodeTopAlignsWithStickyNodesBottom(node: ITreeNode<T, TFilterData>, stickyNodesHeight: number): boolean {\n\t\tconst nodeIndex = this.getNodeIndex(node);\n\t\tconst elementTop = this.view.getElementTop(nodeIndex);\n\t\tconst stickyPosition = stickyNodesHeight;\n\t\treturn this.view.scrollTop === elementTop - stickyPosition;\n\t}\n\n\tprivate createStickyScrollNode(node: ITreeNode<T, TFilterData>, currentStickyNodesHeight: number): StickyScrollNode<T, TFilterData> {\n\t\tconst height = this.treeDelegate.getHeight(node);\n\t\tconst { startIndex, endIndex } = this.getNodeRange(node);\n\n\t\tconst position = this.calculateStickyNodePosition(endIndex, currentStickyNodesHeight, height);\n\n\t\treturn { node, position, height, startIndex, endIndex };\n\t}\n\n\tprivate getAncestorUnderPrevious(node: ITreeNode<T, TFilterData>, previousAncestor: ITreeNode<T, TFilterData> | undefined = undefined): ITreeNode<T, TFilterData> | undefined {\n\t\tlet currentAncestor: ITreeNode<T, TFilterData> = node;\n\t\tlet parentOfcurrentAncestor: ITreeNode<T, TFilterData> | undefined = this.getParentNode(currentAncestor);\n\n\t\twhile (parentOfcurrentAncestor) {\n\t\t\tif (parentOfcurrentAncestor === previousAncestor) {\n\t\t\t\treturn currentAncestor;\n\t\t\t}\n\t\t\tcurrentAncestor = parentOfcurrentAncestor;\n\t\t\tparentOfcurrentAncestor = this.getParentNode(currentAncestor);\n\t\t}\n\n\t\tif (previousAncestor === undefined) {\n\t\t\treturn currentAncestor;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate calculateStickyNodePosition(lastDescendantIndex: number, stickyRowPositionTop: number, stickyNodeHeight: number): number {\n\t\tlet lastChildRelativeTop = this.view.getRelativeTop(lastDescendantIndex);\n\n\t\t// If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n\t\t// In that case, utilize the next node's relative top to calculate the sticky node's position\n\t\tif (lastChildRelativeTop === null && this.view.firstVisibleIndex === lastDescendantIndex && lastDescendantIndex + 1 < this.view.length) {\n\t\t\tconst nodeHeight = this.treeDelegate.getHeight(this.view.element(lastDescendantIndex));\n\t\t\tconst nextNodeRelativeTop = this.view.getRelativeTop(lastDescendantIndex + 1);\n\t\t\tlastChildRelativeTop = nextNodeRelativeTop ? nextNodeRelativeTop - nodeHeight / this.view.renderHeight : null;\n\t\t}\n\n\t\tif (lastChildRelativeTop === null) {\n\t\t\treturn stickyRowPositionTop;\n\t\t}\n\n\t\tconst lastChildNode = this.view.element(lastDescendantIndex);\n\t\tconst lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n\t\tconst topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n\t\tconst bottomOfLastChild = topOfLastChild + lastChildHeight;\n\n\t\tif (stickyRowPositionTop + stickyNodeHeight > bottomOfLastChild && stickyRowPositionTop <= bottomOfLastChild) {\n\t\t\treturn bottomOfLastChild - stickyNodeHeight;\n\t\t}\n\n\t\treturn stickyRowPositionTop;\n\t}\n\n\tprivate constrainStickyNodes(stickyNodes: StickyScrollNode<T, TFilterData>[]): StickyScrollNode<T, TFilterData>[] {\n\t\tif (stickyNodes.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Check if sticky nodes need to be constrained\n\t\tconst maximumStickyWidgetHeight = this.view.renderHeight * this.maxWidgetViewRatio;\n\t\tconst lastStickyNode = stickyNodes[stickyNodes.length - 1];\n\t\tif (stickyNodes.length <= this.stickyScrollMaxItemCount && lastStickyNode.position + lastStickyNode.height <= maximumStickyWidgetHeight) {\n\t\t\treturn stickyNodes;\n\t\t}\n\n\t\t// constrain sticky nodes\n\t\tconst constrainedStickyNodes = this.stickyScrollDelegate.constrainStickyScrollNodes(stickyNodes, this.stickyScrollMaxItemCount, maximumStickyWidgetHeight);\n\n\t\tif (!constrainedStickyNodes.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Validate constraints\n\t\tconst lastConstrainedStickyNode = constrainedStickyNodes[constrainedStickyNodes.length - 1];\n\t\tif (constrainedStickyNodes.length > this.stickyScrollMaxItemCount || lastConstrainedStickyNode.position + lastConstrainedStickyNode.height > maximumStickyWidgetHeight) {\n\t\t\tthrow new Error('stickyScrollDelegate violates constraints');\n\t\t}\n\n\t\treturn constrainedStickyNodes;\n\t}\n\n\tprivate getParentNode(node: ITreeNode<T, TFilterData>): ITreeNode<T, TFilterData> | undefined {\n\t\tconst nodeLocation = this.model.getNodeLocation(node);\n\t\tconst parentLocation = this.model.getParentNodeLocation(nodeLocation);\n\t\treturn parentLocation ? this.model.getNode(parentLocation) : undefined;\n\t}\n\n\tprivate nodeIsUncollapsedParent(node: ITreeNode<T, TFilterData>): boolean {\n\t\tconst nodeLocation = this.model.getNodeLocation(node);\n\t\treturn this.model.getListRenderCount(nodeLocation) > 1;\n\t}\n\n\tprivate getNodeIndex(node: ITreeNode<T, TFilterData>): number {\n\t\tconst nodeLocation = this.model.getNodeLocation(node);\n\t\tconst nodeIndex = this.model.getListIndex(nodeLocation);\n\t\treturn nodeIndex;\n\t}\n\n\tprivate getNodeRange(node: ITreeNode<T, TFilterData>): { startIndex: number; endIndex: number } {\n\t\tconst nodeLocation = this.model.getNodeLocation(node);\n\t\tconst startIndex = this.model.getListIndex(nodeLocation);\n\n\t\tif (startIndex < 0) {\n\t\t\tthrow new Error('Node not found in tree');\n\t\t}\n\n\t\tconst renderCount = this.model.getListRenderCount(nodeLocation);\n\t\tconst endIndex = startIndex + renderCount - 1;\n\n\t\treturn { startIndex, endIndex };\n\t}\n\n\tnodePositionTopBelowWidget(node: ITreeNode<T, TFilterData>): number {\n\t\tconst ancestors = [];\n\t\tlet currentAncestor = this.getParentNode(node);\n\t\twhile (currentAncestor) {\n\t\t\tancestors.push(currentAncestor);\n\t\t\tcurrentAncestor = this.getParentNode(currentAncestor);\n\t\t}\n\n\t\tlet widgetHeight = 0;\n\t\tfor (let i = 0; i < ancestors.length && i < this.stickyScrollMaxItemCount; i++) {\n\t\t\twidgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n\t\t}\n\t\treturn widgetHeight;\n\t}\n\n\tgetFocus(): T | undefined {\n\t\treturn this._widget.getFocus();\n\t}\n\n\tdomFocus(): void {\n\t\tthis._widget.domFocus();\n\t}\n\n\t// Whether sticky scroll was the last focused part in the tree or not\n\tfocusedLast(): boolean {\n\t\treturn this._widget.focusedLast();\n\t}\n\n\tupdateOptions(optionsUpdate: IAbstractTreeOptionsUpdate = {}): void {\n\t\tif (!optionsUpdate.stickyScrollMaxItemCount) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst validatedOptions = this.validateStickySettings(optionsUpdate);\n\t\tif (this.stickyScrollMaxItemCount !== validatedOptions.stickyScrollMaxItemCount) {\n\t\t\tthis.stickyScrollMaxItemCount = validatedOptions.stickyScrollMaxItemCount;\n\t\t\tthis.update();\n\t\t}\n\t}\n\n\tvalidateStickySettings(options: IAbstractTreeOptionsUpdate): { stickyScrollMaxItemCount: number } {\n\t\tlet stickyScrollMaxItemCount = 7;\n\t\tif (typeof options.stickyScrollMaxItemCount === 'number') {\n\t\t\tstickyScrollMaxItemCount = Math.max(options.stickyScrollMaxItemCount, 1);\n\t\t}\n\t\treturn { stickyScrollMaxItemCount };\n\t}\n\n\tsetModel(model: ITreeModel<T, TFilterData, TRef>): void {\n\t\tthis.model = model;\n\t}\n}\n\nclass StickyScrollWidget<T, TFilterData, TRef> implements IDisposable {\n\n\tprivate readonly _rootDomNode: HTMLElement;\n\tprivate _previousState: StickyScrollState<T, TFilterData, TRef> | undefined;\n\tprivate _previousElements: HTMLElement[] = [];\n\tprivate readonly _previousStateDisposables: DisposableStore = new DisposableStore();\n\n\tprivate stickyScrollFocus: StickyScrollFocus<T, TFilterData, TRef>;\n\treadonly onDidChangeHasFocus: Event<boolean>;\n\treadonly onContextMenu: Event<ITreeContextMenuEvent<T>>;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate readonly view: List<ITreeNode<T, TFilterData>>,\n\t\tprivate readonly tree: AbstractTree<T, TFilterData, TRef>,\n\t\tprivate readonly treeRenderers: TreeRenderer<T, TFilterData, TRef, any>[],\n\t\tprivate readonly treeDelegate: IListVirtualDelegate<ITreeNode<T, TFilterData>>,\n\t\tprivate readonly accessibilityProvider: IListAccessibilityProvider<T> | undefined,\n\t) {\n\n\t\tthis._rootDomNode = $('.monaco-tree-sticky-container.empty');\n\t\tcontainer.appendChild(this._rootDomNode);\n\n\t\tconst shadow = $('.monaco-tree-sticky-container-shadow');\n\t\tthis._rootDomNode.appendChild(shadow);\n\n\t\tthis.stickyScrollFocus = new StickyScrollFocus(this._rootDomNode, view);\n\t\tthis.onDidChangeHasFocus = this.stickyScrollFocus.onDidChangeHasFocus;\n\t\tthis.onContextMenu = this.stickyScrollFocus.onContextMenu;\n\t}\n\n\tget height(): number {\n\t\tif (!this._previousState) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst lastElement = this._previousState.stickyNodes[this._previousState.count - 1];\n\t\treturn lastElement.position + lastElement.height;\n\t}\n\n\tget count(): number {\n\t\treturn this._previousState?.count ?? 0;\n\t}\n\n\tgetNode(node: ITreeNode<T, TFilterData>): StickyScrollNode<T, TFilterData> | undefined {\n\t\treturn this._previousState?.stickyNodes.find(stickyNode => stickyNode.node === node);\n\t}\n\n\tsetState(state: StickyScrollState<T, TFilterData, TRef> | undefined): void {\n\n\t\tconst wasVisible = !!this._previousState && this._previousState.count > 0;\n\t\tconst isVisible = !!state && state.count > 0;\n\n\t\t// If state has not changed, do nothing\n\t\tif ((!wasVisible && !isVisible) || (wasVisible && isVisible && this._previousState!.equal(state))) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update visibility of the widget if changed\n\t\tif (wasVisible !== isVisible) {\n\t\t\tthis.setVisible(isVisible);\n\t\t}\n\n\t\tif (!isVisible) {\n\t\t\tthis._previousState = undefined;\n\t\t\tthis._previousElements = [];\n\t\t\tthis._previousStateDisposables.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst lastStickyNode = state.stickyNodes[state.count - 1];\n\n\t\t// If the new state is only a change in the last node's position, update the position of the last element\n\t\tif (this._previousState && state.animationStateChanged(this._previousState)) {\n\t\t\tthis._previousElements[this._previousState.count - 1].style.top = `${lastStickyNode.position}px`;\n\t\t}\n\t\t// create new dom elements\n\t\telse {\n\t\t\tthis._previousStateDisposables.clear();\n\n\t\t\tconst elements = Array(state.count);\n\t\t\tfor (let stickyIndex = state.count - 1; stickyIndex >= 0; stickyIndex--) {\n\t\t\t\tconst stickyNode = state.stickyNodes[stickyIndex];\n\n\t\t\t\tconst { element, disposable } = this.createElement(stickyNode, stickyIndex, state.count);\n\t\t\t\telements[stickyIndex] = element;\n\n\t\t\t\tthis._rootDomNode.appendChild(element);\n\t\t\t\tthis._previousStateDisposables.add(disposable);\n\t\t\t}\n\n\t\t\tthis.stickyScrollFocus.updateElements(elements, state);\n\n\t\t\tthis._previousElements = elements;\n\t\t}\n\n\t\tthis._previousState = state;\n\n\t\t// Set the height of the widget to the bottom of the last sticky node\n\t\tthis._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n\t}\n\n\tprivate createElement(stickyNode: StickyScrollNode<T, TFilterData>, stickyIndex: number, stickyNodesTotal: number): { element: HTMLElement; disposable: IDisposable } {\n\n\t\tconst nodeIndex = stickyNode.startIndex;\n\n\t\t// Sticky element container\n\t\tconst stickyElement = document.createElement('div');\n\t\tstickyElement.style.top = `${stickyNode.position}px`;\n\n\t\tif (this.tree.options.setRowHeight !== false) {\n\t\t\tstickyElement.style.height = `${stickyNode.height}px`;\n\t\t}\n\n\t\tif (this.tree.options.setRowLineHeight !== false) {\n\t\t\tstickyElement.style.lineHeight = `${stickyNode.height}px`;\n\t\t}\n\n\t\tstickyElement.classList.add('monaco-tree-sticky-row');\n\t\tstickyElement.classList.add('monaco-list-row');\n\n\t\tstickyElement.setAttribute('data-index', `${nodeIndex}`);\n\t\tstickyElement.setAttribute('data-parity', nodeIndex % 2 === 0 ? 'even' : 'odd');\n\t\tstickyElement.setAttribute('id', this.view.getElementID(nodeIndex));\n\t\tconst accessibilityDisposable = this.setAccessibilityAttributes(stickyElement, stickyNode.node.element, stickyIndex, stickyNodesTotal);\n\n\t\t// Get the renderer for the node\n\t\tconst nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n\t\tconst renderer = this.treeRenderers.find((renderer) => renderer.templateId === nodeTemplateId);\n\t\tif (!renderer) {\n\t\t\tthrow new Error(`No renderer found for template id ${nodeTemplateId}`);\n\t\t}\n\n\t\t// To make sure we do not influence the original node, we create a copy of the node\n\t\t// We need to check if it is already a unique instance of the node by the delegate\n\t\tlet nodeCopy = stickyNode.node;\n\t\tif (nodeCopy === this.tree.getNode(this.tree.getNodeLocation(stickyNode.node))) {\n\t\t\tnodeCopy = new Proxy(stickyNode.node, {});\n\t\t}\n\n\t\t// Render the element\n\t\tconst templateData = renderer.renderTemplate(stickyElement);\n\t\trenderer.renderElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n\n\t\t// Remove the element from the DOM when state is disposed\n\t\tconst disposable = toDisposable(() => {\n\t\t\taccessibilityDisposable.dispose();\n\t\t\trenderer.disposeElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n\t\t\trenderer.disposeTemplate(templateData);\n\t\t\tstickyElement.remove();\n\t\t});\n\n\t\treturn { element: stickyElement, disposable };\n\t}\n\n\tprivate setAccessibilityAttributes(container: HTMLElement, element: T, stickyIndex: number, stickyNodesTotal: number): IDisposable {\n\t\tif (!this.accessibilityProvider) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.accessibilityProvider.getSetSize) {\n\t\t\tcontainer.setAttribute('aria-setsize', String(this.accessibilityProvider.getSetSize(element, stickyIndex, stickyNodesTotal)));\n\t\t}\n\t\tif (this.accessibilityProvider.getPosInSet) {\n\t\t\tcontainer.setAttribute('aria-posinset', String(this.accessibilityProvider.getPosInSet(element, stickyIndex)));\n\t\t}\n\t\tif (this.accessibilityProvider.getRole) {\n\t\t\tcontainer.setAttribute('role', this.accessibilityProvider.getRole(element) ?? 'treeitem');\n\t\t}\n\n\t\tconst ariaLabel = this.accessibilityProvider.getAriaLabel(element);\n\t\tconst observable = (ariaLabel && typeof ariaLabel !== 'string') ? ariaLabel : constObservable(ariaLabel);\n\t\tconst result = autorun(reader => {\n\t\t\tconst value = reader.readObservable(observable);\n\n\t\t\tif (value) {\n\t\t\t\tcontainer.setAttribute('aria-label', value);\n\t\t\t} else {\n\t\t\t\tcontainer.removeAttribute('aria-label');\n\t\t\t}\n\t\t});\n\n\t\tif (typeof ariaLabel === 'string') {\n\t\t} else if (ariaLabel) {\n\t\t\tcontainer.setAttribute('aria-label', ariaLabel.get());\n\t\t}\n\n\t\tconst ariaLevel = this.accessibilityProvider.getAriaLevel && this.accessibilityProvider.getAriaLevel(element);\n\t\tif (typeof ariaLevel === 'number') {\n\t\t\tcontainer.setAttribute('aria-level', `${ariaLevel}`);\n\t\t}\n\n\t\t// Sticky Scroll elements can not be selected\n\t\tcontainer.setAttribute('aria-selected', String(false));\n\n\t\treturn result;\n\t}\n\n\tprivate setVisible(visible: boolean): void {\n\t\tthis._rootDomNode.classList.toggle('empty', !visible);\n\n\t\tif (!visible) {\n\t\t\tthis.stickyScrollFocus.updateElements([], undefined);\n\t\t}\n\t}\n\n\tgetFocus(): T | undefined {\n\t\treturn this.stickyScrollFocus.getFocus();\n\t}\n\n\tdomFocus(): void {\n\t\tthis.stickyScrollFocus.domFocus();\n\t}\n\n\tfocusedLast(): boolean {\n\t\treturn this.stickyScrollFocus.focusedLast();\n\t}\n\n\tdispose(): void {\n\t\tthis.stickyScrollFocus.dispose();\n\t\tthis._previousStateDisposables.dispose();\n\t\tthis._rootDomNode.remove();\n\t}\n}\n\nclass StickyScrollFocus<T, TFilterData, TRef> extends Disposable {\n\n\tprivate focusedIndex: number = -1;\n\tprivate elements: HTMLElement[] = [];\n\tprivate state: StickyScrollState<T, TFilterData, TRef> | undefined;\n\n\tprivate _onDidChangeHasFocus = new Emitter<boolean>();\n\treadonly onDidChangeHasFocus = this._onDidChangeHasFocus.event;\n\n\tprivate _onContextMenu = new Emitter<ITreeContextMenuEvent<T>>();\n\treadonly onContextMenu: Event<ITreeContextMenuEvent<T>> = this._onContextMenu.event;\n\n\tprivate _domHasFocus: boolean = false;\n\tprivate get domHasFocus(): boolean { return this._domHasFocus; }\n\tprivate set domHasFocus(hasFocus: boolean) {\n\t\tif (hasFocus !== this._domHasFocus) {\n\t\t\tthis._onDidChangeHasFocus.fire(hasFocus);\n\t\t\tthis._domHasFocus = hasFocus;\n\t\t}\n\t}\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly view: List<ITreeNode<T, TFilterData>>\n\t) {\n\t\tsuper();\n\n\t\tthis._register(addDisposableListener(this.container, 'focus', () => this.onFocus()));\n\t\tthis._register(addDisposableListener(this.container, 'blur', () => this.onBlur()));\n\t\tthis._register(this.view.onDidFocus(() => this.toggleStickyScrollFocused(false)));\n\t\tthis._register(this.view.onKeyDown((e) => this.onKeyDown(e)));\n\t\tthis._register(this.view.onMouseDown((e) => this.onMouseDown(e)));\n\t\tthis._register(this.view.onContextMenu((e) => this.handleContextMenu(e)));\n\t}\n\n\tprivate handleContextMenu(e: IListContextMenuEvent<ITreeNode<T, TFilterData>>): void {\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tif (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n\t\t\tif (this.focusedLast()) {\n\t\t\t\tthis.view.domFocus();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// The list handles the context menu triggered by a mouse event\n\t\t// In that case only set the focus of the element clicked and leave the rest to the list to handle\n\t\tif (!isKeyboardEvent(e.browserEvent)) {\n\t\t\tif (!this.state) {\n\t\t\t\tthrow new Error('Context menu should not be triggered when state is undefined');\n\t\t\t}\n\n\t\t\tconst stickyIndex = this.state.stickyNodes.findIndex(stickyNode => stickyNode.node.element === e.element?.element);\n\n\t\t\tif (stickyIndex === -1) {\n\t\t\t\tthrow new Error('Context menu should not be triggered when element is not in sticky scroll widget');\n\t\t\t}\n\t\t\tthis.container.focus();\n\t\t\tthis.setFocus(stickyIndex);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.state || this.focusedIndex < 0) {\n\t\t\tthrow new Error('Context menu key should not be triggered when focus is not in sticky scroll widget');\n\t\t}\n\n\t\tconst stickyNode = this.state.stickyNodes[this.focusedIndex];\n\t\tconst element = stickyNode.node.element;\n\t\tconst anchor = this.elements[this.focusedIndex];\n\t\tthis._onContextMenu.fire({ element, anchor, browserEvent: e.browserEvent, isStickyScroll: true });\n\t}\n\n\tprivate onKeyDown(e: KeyboardEvent): void {\n\t\t// Sticky Scroll Navigation\n\t\tif (this.domHasFocus && this.state) {\n\t\t\t// Move up\n\t\t\tif (e.key === 'ArrowUp') {\n\t\t\t\tthis.setFocusedElement(Math.max(0, this.focusedIndex - 1));\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t\t// Move down, if last sticky node is focused, move focus into first child of last sticky node\n\t\t\telse if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {\n\t\t\t\tif (this.focusedIndex >= this.state.count - 1) {\n\t\t\t\t\tconst nodeIndexToFocus = this.state.stickyNodes[this.state.count - 1].startIndex + 1;\n\t\t\t\t\tthis.view.domFocus();\n\t\t\t\t\tthis.view.setFocus([nodeIndexToFocus]);\n\t\t\t\t\tthis.scrollNodeUnderWidget(nodeIndexToFocus, this.state);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setFocusedElement(this.focusedIndex + 1);\n\t\t\t\t}\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onMouseDown(e: IListMouseEvent<ITreeNode<T, TFilterData>>): void {\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tif (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n\t\t\treturn;\n\t\t}\n\n\t\te.browserEvent.preventDefault();\n\t\te.browserEvent.stopPropagation();\n\t}\n\n\tupdateElements(elements: HTMLElement[], state: StickyScrollState<T, TFilterData, TRef> | undefined): void {\n\t\tif (state && state.count === 0) {\n\t\t\tthrow new Error('Sticky scroll state must be undefined when there are no sticky nodes');\n\t\t}\n\t\tif (state && state.count !== elements.length) {\n\t\t\tthrow new Error('Sticky scroll focus received illigel state');\n\t\t}\n\n\t\tconst previousIndex = this.focusedIndex;\n\t\tthis.removeFocus();\n\n\t\tthis.elements = elements;\n\t\tthis.state = state;\n\n\t\tif (state) {\n\t\t\tconst newFocusedIndex = clamp(previousIndex, 0, state.count - 1);\n\t\t\tthis.setFocus(newFocusedIndex);\n\t\t} else {\n\t\t\tif (this.domHasFocus) {\n\t\t\t\tthis.view.domFocus();\n\t\t\t}\n\t\t}\n\n\t\t// must come last as it calls blur()\n\t\tthis.container.tabIndex = state ? 0 : -1;\n\t}\n\n\tprivate setFocusedElement(stickyIndex: number): void {\n\t\t// doesn't imply that the widget has (or will have) focus\n\n\t\tconst state = this.state;\n\t\tif (!state) {\n\t\t\tthrow new Error('Cannot set focus when state is undefined');\n\t\t}\n\n\t\tthis.setFocus(stickyIndex);\n\n\t\tif (stickyIndex < state.count - 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the last sticky node is not fully visible, scroll it into view\n\t\tif (state.lastNodePartiallyVisible()) {\n\t\t\tconst lastStickyNode = state.stickyNodes[stickyIndex];\n\t\t\tthis.scrollNodeUnderWidget(lastStickyNode.endIndex + 1, state);\n\t\t}\n\t}\n\n\tprivate scrollNodeUnderWidget(nodeIndex: number, state: StickyScrollState<T, TFilterData, TRef>) {\n\t\tconst lastStickyNode = state.stickyNodes[state.count - 1];\n\t\tconst secondLastStickyNode = state.count > 1 ? state.stickyNodes[state.count - 2] : undefined;\n\n\t\tconst elementScrollTop = this.view.getElementTop(nodeIndex);\n\t\tconst elementTargetViewTop = secondLastStickyNode ? secondLastStickyNode.position + secondLastStickyNode.height + lastStickyNode.height : lastStickyNode.height;\n\t\tthis.view.scrollTop = elementScrollTop - elementTargetViewTop;\n\t}\n\n\tgetFocus(): T | undefined {\n\t\tif (!this.state || this.focusedIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.state.stickyNodes[this.focusedIndex].node.element;\n\t}\n\n\tdomFocus(): void {\n\t\tif (!this.state) {\n\t\t\tthrow new Error('Cannot focus when state is undefined');\n\t\t}\n\n\t\tthis.container.focus();\n\t}\n\n\tfocusedLast(): boolean {\n\t\tif (!this.state) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.view.getHTMLElement().classList.contains('sticky-scroll-focused');\n\t}\n\n\tprivate removeFocus(): void {\n\t\tif (this.focusedIndex === -1) {\n\t\t\treturn;\n\t\t}\n\t\tthis.toggleElementFocus(this.elements[this.focusedIndex], false);\n\t\tthis.focusedIndex = -1;\n\t}\n\n\tprivate setFocus(newFocusIndex: number): void {\n\t\tif (0 > newFocusIndex) {\n\t\t\tthrow new Error('addFocus() can not remove focus');\n\t\t}\n\t\tif (!this.state && newFocusIndex >= 0) {\n\t\t\tthrow new Error('Cannot set focus index when state is undefined');\n\t\t}\n\t\tif (this.state && newFocusIndex >= this.state.count) {\n\t\t\tthrow new Error('Cannot set focus index to an index that does not exist');\n\t\t}\n\n\t\tconst oldIndex = this.focusedIndex;\n\t\tif (oldIndex >= 0) {\n\t\t\tthis.toggleElementFocus(this.elements[oldIndex], false);\n\t\t}\n\t\tif (newFocusIndex >= 0) {\n\t\t\tthis.toggleElementFocus(this.elements[newFocusIndex], true);\n\t\t}\n\t\tthis.focusedIndex = newFocusIndex;\n\t}\n\n\tprivate toggleElementFocus(element: HTMLElement, focused: boolean): void {\n\t\tthis.toggleElementActiveFocus(element, focused && this.domHasFocus);\n\t\tthis.toggleElementPassiveFocus(element, focused);\n\t}\n\n\tprivate toggleCurrentElementActiveFocus(focused: boolean): void {\n\t\tif (this.focusedIndex === -1) {\n\t\t\treturn;\n\t\t}\n\t\tthis.toggleElementActiveFocus(this.elements[this.focusedIndex], focused);\n\t}\n\n\tprivate toggleElementActiveFocus(element: HTMLElement, focused: boolean) {\n\t\t// active focus is set when sticky scroll has focus\n\t\telement.classList.toggle('focused', focused);\n\t}\n\n\tprivate toggleElementPassiveFocus(element: HTMLElement, focused: boolean) {\n\t\t// passive focus allows to show focus when sticky scroll does not have focus\n\t\t// for example when the context menu has focus\n\t\telement.classList.toggle('passive-focused', focused);\n\t}\n\n\tprivate toggleStickyScrollFocused(focused: boolean) {\n\t\t// Weather the last focus in the view was sticky scroll and not the list\n\t\t// Is only removed when the focus is back in the tree an no longer in sticky scroll\n\t\tthis.view.getHTMLElement().classList.toggle('sticky-scroll-focused', focused);\n\t}\n\n\tprivate onFocus(): void {\n\t\tif (!this.state || this.elements.length === 0) {\n\t\t\tthrow new Error('Cannot focus when state is undefined or elements are empty');\n\t\t}\n\t\tthis.domHasFocus = true;\n\t\tthis.toggleStickyScrollFocused(true);\n\t\tthis.toggleCurrentElementActiveFocus(true);\n\t\tif (this.focusedIndex === -1) {\n\t\t\tthis.setFocus(0);\n\t\t}\n\t}\n\n\tprivate onBlur(): void {\n\t\tthis.domHasFocus = false;\n\t\tthis.toggleCurrentElementActiveFocus(false);\n\t}\n\n\toverride dispose(): void {\n\t\tthis.toggleStickyScrollFocused(false);\n\t\tthis._onDidChangeHasFocus.fire(false);\n\t\tsuper.dispose();\n\t}\n}\n\nfunction asTreeMouseEvent<T>(event: IListMouseEvent<ITreeNode<T, any>>): ITreeMouseEvent<T> {\n\tlet target: TreeMouseEventTarget = TreeMouseEventTarget.Unknown;\n\n\tif (hasParentWithClass(event.browserEvent.target as HTMLElement, 'monaco-tl-twistie', 'monaco-tl-row')) {\n\t\ttarget = TreeMouseEventTarget.Twistie;\n\t} else if (hasParentWithClass(event.browserEvent.target as HTMLElement, 'monaco-tl-contents', 'monaco-tl-row')) {\n\t\ttarget = TreeMouseEventTarget.Element;\n\t} else if (hasParentWithClass(event.browserEvent.target as HTMLElement, 'monaco-tree-type-filter', 'monaco-list')) {\n\t\ttarget = TreeMouseEventTarget.Filter;\n\t}\n\n\treturn {\n\t\tbrowserEvent: event.browserEvent,\n\t\telement: event.element ? event.element.element : null,\n\t\ttarget\n\t};\n}\n\nfunction asTreeContextMenuEvent<T>(event: IListContextMenuEvent<ITreeNode<T, any>>): ITreeContextMenuEvent<T> {\n\tconst isStickyScroll = isStickyScrollContainer(event.browserEvent.target as HTMLElement);\n\n\treturn {\n\t\telement: event.element ? event.element.element : null,\n\t\tbrowserEvent: event.browserEvent,\n\t\tanchor: event.anchor,\n\t\tisStickyScroll\n\t};\n}\n\nexport interface IAbstractTreeOptionsUpdate extends ITreeRendererOptions {\n\treadonly multipleSelectionSupport?: boolean;\n\treadonly typeNavigationEnabled?: boolean;\n\treadonly typeNavigationMode?: TypeNavigationMode;\n\treadonly defaultFindMode?: TreeFindMode;\n\treadonly defaultFindMatchType?: TreeFindMatchType;\n\treadonly showNotFoundMessage?: boolean;\n\treadonly smoothScrolling?: boolean;\n\treadonly horizontalScrolling?: boolean;\n\treadonly scrollByPage?: boolean;\n\treadonly mouseWheelScrollSensitivity?: number;\n\treadonly fastScrollSensitivity?: number;\n\treadonly expandOnDoubleClick?: boolean;\n\treadonly expandOnlyOnTwistieClick?: boolean | ((e: any) => boolean); // e is T\n\treadonly enableStickyScroll?: boolean;\n\treadonly stickyScrollMaxItemCount?: number;\n}\n\nexport interface IAbstractTreeOptions<T, TFilterData = void> extends IAbstractTreeOptionsUpdate, IListOptions<T> {\n\treadonly contextViewProvider?: IContextViewProvider;\n\treadonly collapseByDefault?: boolean; // defaults to false\n\treadonly allowNonCollapsibleParents?: boolean; // defaults to false\n\treadonly filter?: ITreeFilter<T, TFilterData>;\n\treadonly dnd?: ITreeDragAndDrop<T>;\n\treadonly paddingBottom?: number;\n\treadonly findWidgetEnabled?: boolean;\n\treadonly findWidgetStyles?: IFindWidgetStyles;\n\treadonly defaultFindVisibility?: TreeVisibility | ((e: T) => TreeVisibility);\n\treadonly stickyScrollDelegate?: IStickyScrollDelegate<any, TFilterData>;\n}\n\nfunction dfs<T, TFilterData>(node: ITreeNode<T, TFilterData>, fn: (node: ITreeNode<T, TFilterData>) => void): void {\n\tfn(node);\n\tnode.children.forEach(child => dfs(child, fn));\n}\n\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait<T> {\n\n\tprivate nodes: ITreeNode<T, any>[] = [];\n\tprivate elements: T[] | undefined;\n\n\tprivate readonly _onDidChange = new Emitter<ITreeEvent<T>>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate _nodeSet: Set<ITreeNode<T, any>> | undefined;\n\tprivate get nodeSet(): Set<ITreeNode<T, any>> {\n\t\tif (!this._nodeSet) {\n\t\t\tthis._nodeSet = this.createNodeSet();\n\t\t}\n\n\t\treturn this._nodeSet;\n\t}\n\n\tconstructor(\n\t\tprivate getFirstViewElementWithTrait: () => ITreeNode<T, any> | undefined,\n\t\tprivate identityProvider?: IIdentityProvider<T>\n\t) { }\n\n\tset(nodes: ITreeNode<T, any>[], browserEvent?: UIEvent): void {\n\t\tif (!(browserEvent as any)?.__forceEvent && equals(this.nodes, nodes)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._set(nodes, false, browserEvent);\n\t}\n\n\tprivate _set(nodes: ITreeNode<T, any>[], silent: boolean, browserEvent?: UIEvent): void {\n\t\tthis.nodes = [...nodes];\n\t\tthis.elements = undefined;\n\t\tthis._nodeSet = undefined;\n\n\t\tif (!silent) {\n\t\t\tconst that = this;\n\t\t\tthis._onDidChange.fire({ get elements() { return that.get(); }, browserEvent });\n\t\t}\n\t}\n\n\tget(): T[] {\n\t\tif (!this.elements) {\n\t\t\tthis.elements = this.nodes.map(node => node.element);\n\t\t}\n\n\t\treturn [...this.elements];\n\t}\n\n\tgetNodes(): readonly ITreeNode<T, any>[] {\n\t\treturn this.nodes;\n\t}\n\n\thas(node: ITreeNode<T, any>): boolean {\n\t\treturn this.nodeSet.has(node);\n\t}\n\n\tonDidModelSplice({ insertedNodes, deletedNodes }: ITreeModelSpliceEvent<T, any>): void {\n\t\tif (!this.identityProvider) {\n\t\t\tconst set = this.createNodeSet();\n\t\t\tconst visit = (node: ITreeNode<T, any>) => set.delete(node);\n\t\t\tdeletedNodes.forEach(node => dfs(node, visit));\n\t\t\tthis.set([...set.values()]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst deletedNodesIdSet = new Set<string>();\n\t\tconst deletedNodesVisitor = (node: ITreeNode<T, any>) => deletedNodesIdSet.add(this.identityProvider!.getId(node.element).toString());\n\t\tdeletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n\n\t\tconst insertedNodesMap = new Map<string, ITreeNode<T, any>>();\n\t\tconst insertedNodesVisitor = (node: ITreeNode<T, any>) => insertedNodesMap.set(this.identityProvider!.getId(node.element).toString(), node);\n\t\tinsertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n\n\t\tconst nodes: ITreeNode<T, any>[] = [];\n\n\t\tfor (const node of this.nodes) {\n\t\t\tconst id = this.identityProvider.getId(node.element).toString();\n\t\t\tconst wasDeleted = deletedNodesIdSet.has(id);\n\n\t\t\tif (!wasDeleted) {\n\t\t\t\tnodes.push(node);\n\t\t\t} else {\n\t\t\t\tconst insertedNode = insertedNodesMap.get(id);\n\n\t\t\t\tif (insertedNode && insertedNode.visible) {\n\t\t\t\t\tnodes.push(insertedNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.nodes.length > 0 && nodes.length === 0) {\n\t\t\tconst node = this.getFirstViewElementWithTrait();\n\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t}\n\n\t\tthis._set(nodes, true);\n\t}\n\n\tprivate createNodeSet(): Set<ITreeNode<T, any>> {\n\t\tconst set = new Set<ITreeNode<T, any>>();\n\n\t\tfor (const node of this.nodes) {\n\t\t\tset.add(node);\n\t\t}\n\n\t\treturn set;\n\t}\n}\n\nclass TreeNodeListMouseController<T, TFilterData, TRef> extends MouseController<ITreeNode<T, TFilterData>> {\n\n\tconstructor(\n\t\tlist: TreeNodeList<T, TFilterData, TRef>,\n\t\tprivate tree: AbstractTree<T, TFilterData, TRef>,\n\t\tprivate stickyScrollProvider: () => StickyScrollController<T, TFilterData, TRef> | undefined\n\t) {\n\t\tsuper(list);\n\t}\n\n\tprotected override onViewPointer(e: IListMouseEvent<ITreeNode<T, TFilterData>>): void {\n\t\tif (isButton(e.browserEvent.target as HTMLElement) ||\n\t\t\tisEditableElement(e.browserEvent.target as HTMLElement) ||\n\t\t\tisMonacoEditor(e.browserEvent.target as HTMLElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (e.browserEvent.isHandledByList) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = e.element;\n\n\t\tif (!node) {\n\t\t\treturn super.onViewPointer(e);\n\t\t}\n\n\t\tif (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n\t\t\treturn super.onViewPointer(e);\n\t\t}\n\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tconst onTwistie = target.classList.contains('monaco-tl-twistie')\n\t\t\t|| (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16);\n\t\tconst isStickyElement = isStickyScrollElement(e.browserEvent.target as HTMLElement);\n\n\t\tlet expandOnlyOnTwistieClick = false;\n\n\t\tif (isStickyElement) {\n\t\t\texpandOnlyOnTwistieClick = true;\n\t\t}\n\t\telse if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n\t\t\texpandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n\t\t} else {\n\t\t\texpandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n\t\t}\n\n\t\tif (!isStickyElement) {\n\t\t\tif (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n\t\t\t\treturn super.onViewPointer(e);\n\t\t\t}\n\n\t\t\tif (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n\t\t\t\treturn super.onViewPointer(e);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.handleStickyScrollMouseEvent(e, node);\n\t\t}\n\n\t\tif (node.collapsible && (!isStickyElement || onTwistie)) {\n\t\t\tconst location = this.tree.getNodeLocation(node);\n\t\t\tconst recursive = e.browserEvent.altKey;\n\t\t\tthis.tree.setFocus([location]);\n\t\t\tthis.tree.toggleCollapsed(location, recursive);\n\n\t\t\tif (onTwistie) {\n\t\t\t\t// Do not set this before calling a handler on the super class, because it will reject it as handled\n\t\t\t\te.browserEvent.isHandledByList = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (!isStickyElement) {\n\t\t\tsuper.onViewPointer(e);\n\t\t}\n\t}\n\n\tprivate handleStickyScrollMouseEvent(e: IListMouseEvent<ITreeNode<T, TFilterData>>, node: ITreeNode<T, TFilterData>): void {\n\t\tif (isMonacoCustomToggle(e.browserEvent.target as HTMLElement) || isActionItem(e.browserEvent.target as HTMLElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stickyScrollController = this.stickyScrollProvider();\n\t\tif (!stickyScrollController) {\n\t\t\tthrow new Error('Sticky scroll controller not found');\n\t\t}\n\n\t\tconst nodeIndex = this.list.indexOf(node);\n\t\tconst elementScrollTop = this.list.getElementTop(nodeIndex);\n\t\tconst elementTargetViewTop = stickyScrollController.nodePositionTopBelowWidget(node);\n\t\tthis.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n\t\tthis.list.domFocus();\n\t\tthis.list.setFocus([nodeIndex]);\n\t\tthis.list.setSelection([nodeIndex]);\n\t}\n\n\tprotected override onDoubleClick(e: IListMouseEvent<ITreeNode<T, TFilterData>>): void {\n\t\tconst onTwistie = (e.browserEvent.target as HTMLElement).classList.contains('monaco-tl-twistie');\n\n\t\tif (onTwistie || !this.tree.expandOnDoubleClick) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (e.browserEvent.isHandledByList) {\n\t\t\treturn;\n\t\t}\n\n\t\tsuper.onDoubleClick(e);\n\t}\n\n\t// to make sure dom focus is not stolen (for example with context menu)\n\tprotected override onMouseDown(e: IListMouseEvent<ITreeNode<T, TFilterData>> | IListTouchEvent<ITreeNode<T, TFilterData>>): void {\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tif (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n\t\t\tsuper.onMouseDown(e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprotected override onContextMenu(e: IListContextMenuEvent<ITreeNode<T, TFilterData>>): void {\n\t\tconst target = e.browserEvent.target as HTMLElement;\n\t\tif (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n\t\t\tsuper.onContextMenu(e);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\ninterface ITreeNodeListOptions<T, TFilterData, TRef> extends IListOptions<ITreeNode<T, TFilterData>> {\n\treadonly tree: AbstractTree<T, TFilterData, TRef>;\n\treadonly stickyScrollProvider: () => StickyScrollController<T, TFilterData, TRef> | undefined;\n}\n\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList<T, TFilterData, TRef> extends List<ITreeNode<T, TFilterData>> {\n\n\tconstructor(\n\t\tuser: string,\n\t\tcontainer: HTMLElement,\n\t\tvirtualDelegate: IListVirtualDelegate<ITreeNode<T, TFilterData>>,\n\t\trenderers: IListRenderer<any /* TODO@joao */, any>[],\n\t\tprivate focusTrait: Trait<T>,\n\t\tprivate selectionTrait: Trait<T>,\n\t\tprivate anchorTrait: Trait<T>,\n\t\toptions: ITreeNodeListOptions<T, TFilterData, TRef>\n\t) {\n\t\tsuper(user, container, virtualDelegate, renderers, options);\n\t}\n\n\tprotected override createMouseController(options: ITreeNodeListOptions<T, TFilterData, TRef>): MouseController<ITreeNode<T, TFilterData>> {\n\t\treturn new TreeNodeListMouseController(this, options.tree, options.stickyScrollProvider);\n\t}\n\n\toverride splice(start: number, deleteCount: number, elements: readonly ITreeNode<T, TFilterData>[] = []): void {\n\t\tsuper.splice(start, deleteCount, elements);\n\n\t\tif (elements.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst additionalFocus: number[] = [];\n\t\tconst additionalSelection: number[] = [];\n\t\tlet anchor: number | undefined;\n\n\t\telements.forEach((node, index) => {\n\t\t\tif (this.focusTrait.has(node)) {\n\t\t\t\tadditionalFocus.push(start + index);\n\t\t\t}\n\n\t\t\tif (this.selectionTrait.has(node)) {\n\t\t\t\tadditionalSelection.push(start + index);\n\t\t\t}\n\n\t\t\tif (this.anchorTrait.has(node)) {\n\t\t\t\tanchor = start + index;\n\t\t\t}\n\t\t});\n\n\t\tif (additionalFocus.length > 0) {\n\t\t\tsuper.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n\t\t}\n\n\t\tif (additionalSelection.length > 0) {\n\t\t\tsuper.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n\t\t}\n\n\t\tif (typeof anchor === 'number') {\n\t\t\tsuper.setAnchor(anchor);\n\t\t}\n\t}\n\n\toverride setFocus(indexes: number[], browserEvent?: UIEvent, fromAPI = false): void {\n\t\tsuper.setFocus(indexes, browserEvent);\n\n\t\tif (!fromAPI) {\n\t\t\tthis.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n\t\t}\n\t}\n\n\toverride setSelection(indexes: number[], browserEvent?: UIEvent, fromAPI = false): void {\n\t\tsuper.setSelection(indexes, browserEvent);\n\n\t\tif (!fromAPI) {\n\t\t\tthis.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n\t\t}\n\t}\n\n\toverride setAnchor(index: number | undefined, fromAPI = false): void {\n\t\tsuper.setAnchor(index);\n\n\t\tif (!fromAPI) {\n\t\t\tif (typeof index === 'undefined') {\n\t\t\t\tthis.anchorTrait.set([]);\n\t\t\t} else {\n\t\t\t\tthis.anchorTrait.set([this.element(index)]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const enum AbstractTreePart {\n\tTree,\n\tStickyScroll,\n}\n\nexport abstract class AbstractTree<T, TFilterData, TRef> implements IDisposable {\n\n\tprotected view: TreeNodeList<T, TFilterData, TRef>;\n\tprivate renderers: TreeRenderer<T, TFilterData, TRef, any>[];\n\tprotected model: ITreeModel<T, TFilterData, TRef>;\n\tprivate treeDelegate: ComposedTreeDelegate<T, ITreeNode<T, TFilterData>>;\n\tprivate focus: Trait<T>;\n\tprivate selection: Trait<T>;\n\tprivate anchor: Trait<T>;\n\tprivate eventBufferer = new EventBufferer();\n\tprivate findController?: FindController<T, TFilterData>;\n\treadonly onDidChangeFindOpenState: Event<boolean> = Event.None;\n\tonDidChangeStickyScrollFocused: Event<boolean> = Event.None;\n\tprivate focusNavigationFilter: ((node: ITreeNode<T, TFilterData>) => boolean) | undefined;\n\tprivate stickyScrollController?: StickyScrollController<T, TFilterData, TRef>;\n\tprivate styleElement: HTMLStyleElement;\n\tprotected readonly disposables = new DisposableStore();\n\n\tget onDidScroll(): Event<ScrollEvent> { return this.view.onDidScroll; }\n\n\tget onDidChangeFocus(): Event<ITreeEvent<T>> { return this.eventBufferer.wrapEvent(this.focus.onDidChange); }\n\tget onDidChangeSelection(): Event<ITreeEvent<T>> { return this.eventBufferer.wrapEvent(this.selection.onDidChange); }\n\n\tget onMouseClick(): Event<ITreeMouseEvent<T>> { return Event.map(this.view.onMouseClick, asTreeMouseEvent); }\n\tget onMouseDblClick(): Event<ITreeMouseEvent<T>> { return Event.filter(Event.map(this.view.onMouseDblClick, asTreeMouseEvent), e => e.target !== TreeMouseEventTarget.Filter); }\n\tget onMouseOver(): Event<ITreeMouseEvent<T>> { return Event.map(this.view.onMouseOver, asTreeMouseEvent); }\n\tget onMouseOut(): Event<ITreeMouseEvent<T>> { return Event.map(this.view.onMouseOut, asTreeMouseEvent); }\n\tget onContextMenu(): Event<ITreeContextMenuEvent<T>> { return Event.any(Event.filter(Event.map(this.view.onContextMenu, asTreeContextMenuEvent), e => !e.isStickyScroll), this.stickyScrollController?.onContextMenu ?? Event.None); }\n\tget onTap(): Event<ITreeMouseEvent<T>> { return Event.map(this.view.onTap, asTreeMouseEvent); }\n\tget onPointer(): Event<ITreeMouseEvent<T>> { return Event.map(this.view.onPointer, asTreeMouseEvent); }\n\n\tget onKeyDown(): Event<KeyboardEvent> { return this.view.onKeyDown; }\n\tget onKeyUp(): Event<KeyboardEvent> { return this.view.onKeyUp; }\n\tget onKeyPress(): Event<KeyboardEvent> { return this.view.onKeyPress; }\n\n\tget onDidFocus(): Event<void> { return this.view.onDidFocus; }\n\tget onDidBlur(): Event<void> { return this.view.onDidBlur; }\n\n\tprivate readonly onDidSwapModel = this.disposables.add(new Emitter<void>());\n\tprivate readonly onDidChangeModelRelay = this.disposables.add(new Relay<void>());\n\tprivate readonly onDidSpliceModelRelay = this.disposables.add(new Relay<ITreeModelSpliceEvent<T, TFilterData>>());\n\tprivate readonly onDidChangeCollapseStateRelay = this.disposables.add(new Relay<ICollapseStateChangeEvent<T, TFilterData>>());\n\tprivate readonly onDidChangeRenderNodeCountRelay = this.disposables.add(new Relay<ITreeNode<T, TFilterData>>());\n\tprivate readonly onDidChangeActiveNodesRelay = this.disposables.add(new Relay<ITreeNode<T, TFilterData>[]>());\n\n\tget onDidChangeModel(): Event<void> { return Event.any(this.onDidChangeModelRelay.event, this.onDidSwapModel.event); }\n\tget onDidChangeCollapseState(): Event<ICollapseStateChangeEvent<T, TFilterData>> { return this.model.onDidChangeCollapseState; }\n\tget onDidChangeRenderNodeCount(): Event<ITreeNode<T, TFilterData>> { return this.model.onDidChangeRenderNodeCount; }\n\n\tprivate readonly _onWillRefilter = new Emitter<void>();\n\treadonly onWillRefilter: Event<void> = this._onWillRefilter.event;\n\n\tget findMode(): TreeFindMode { return this.findController?.mode ?? TreeFindMode.Highlight; }\n\tset findMode(findMode: TreeFindMode) { if (this.findController) { this.findController.mode = findMode; } }\n\treadonly onDidChangeFindMode: Event<TreeFindMode>;\n\n\tget findMatchType(): TreeFindMatchType { return this.findController?.matchType ?? TreeFindMatchType.Fuzzy; }\n\tset findMatchType(findFuzzy: TreeFindMatchType) { if (this.findController) { this.findController.matchType = findFuzzy; } }\n\treadonly onDidChangeFindMatchType: Event<TreeFindMatchType>;\n\n\tget onDidChangeFindPattern(): Event<string> { return this.findController ? this.findController.onDidChangePattern : Event.None; }\n\n\tget expandOnDoubleClick(): boolean { return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick; }\n\tget expandOnlyOnTwistieClick(): boolean | ((e: T) => boolean) { return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick; }\n\n\tprivate readonly _onDidUpdateOptions = new Emitter<IAbstractTreeOptions<T, TFilterData>>();\n\treadonly onDidUpdateOptions: Event<IAbstractTreeOptions<T, TFilterData>> = this._onDidUpdateOptions.event;\n\n\tget onDidDispose(): Event<void> { return this.view.onDidDispose; }\n\n\tconstructor(\n\t\tprivate readonly _user: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tprivate _options: IAbstractTreeOptions<T, TFilterData> = {}\n\t) {\n\t\tlet filter: FindFilter<T> | undefined;\n\t\tif (_options.keyboardNavigationLabelProvider) {\n\t\t\tfilter = new FindFilter(this, _options.keyboardNavigationLabelProvider, _options.filter as any as ITreeFilter<T, FuzzyScore>);\n\t\t\t_options = { ..._options, filter: filter as ITreeFilter<T, TFilterData> }; // TODO need typescript help here\n\t\t\tthis.disposables.add(filter);\n\t\t}\n\n\t\tthis.model = this.createModel(_user, _options);\n\t\tthis.treeDelegate = new ComposedTreeDelegate<T, ITreeNode<T, TFilterData>>(delegate);\n\n\t\tconst activeNodes = this.disposables.add(new EventCollection(this.onDidChangeActiveNodesRelay.event));\n\t\tconst renderedIndentGuides = new SetMap<ITreeNode<T, TFilterData>, HTMLDivElement>();\n\t\tthis.renderers = renderers.map(r => new TreeRenderer<T, TFilterData, TRef, any>(r, this.model, this.onDidChangeCollapseStateRelay.event, activeNodes, renderedIndentGuides, _options));\n\t\tfor (const r of this.renderers) {\n\t\t\tthis.disposables.add(r);\n\t\t}\n\n\t\tthis.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n\t\tthis.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n\t\tthis.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n\t\tthis.view = new TreeNodeList(_user, container, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, { ...asListOptions(() => this.model, _options), tree: this, stickyScrollProvider: () => this.stickyScrollController });\n\n\t\tthis.setupModel(this.model); // model needs to be setup after the traits have been created\n\n\t\tif (_options.keyboardSupport !== false) {\n\t\t\tconst onKeyDown = Event.chain(this.view.onKeyDown, $ =>\n\t\t\t\t$.filter(e => !isEditableElement(e.target as HTMLElement))\n\t\t\t\t\t.map(e => new StandardKeyboardEvent(e))\n\t\t\t);\n\n\t\t\tEvent.chain(onKeyDown, $ => $.filter(e => e.keyCode === KeyCode.LeftArrow))(this.onLeftArrow, this, this.disposables);\n\t\t\tEvent.chain(onKeyDown, $ => $.filter(e => e.keyCode === KeyCode.RightArrow))(this.onRightArrow, this, this.disposables);\n\t\t\tEvent.chain(onKeyDown, $ => $.filter(e => e.keyCode === KeyCode.Space))(this.onSpace, this, this.disposables);\n\t\t}\n\n\t\tif ((_options.findWidgetEnabled ?? true) && _options.keyboardNavigationLabelProvider && _options.contextViewProvider) {\n\t\t\tconst opts = this.options.findWidgetStyles ? { styles: this.options.findWidgetStyles } : undefined;\n\t\t\tthis.findController = new FindController(this, this.view, filter!, _options.contextViewProvider, opts);\n\t\t\tthis.focusNavigationFilter = node => this.findController!.shouldAllowFocus(node);\n\t\t\tthis.onDidChangeFindOpenState = this.findController.onDidChangeOpenState;\n\t\t\tthis.disposables.add(this.findController);\n\t\t\tthis.onDidChangeFindMode = this.findController.onDidChangeMode;\n\t\t\tthis.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;\n\t\t\tthis.disposables.add(this.onDidSpliceModelRelay.event(() => {\n\t\t\t\tif (!this.findController!.isOpened() || this.findController!.pattern.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.refilter();\n\t\t\t\tthis.findController!.render();\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.onDidChangeFindMode = Event.None;\n\t\t\tthis.onDidChangeFindMatchType = Event.None;\n\t\t}\n\n\t\tif (_options.enableStickyScroll) {\n\t\t\tthis.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, _options);\n\t\t\tthis.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n\t\t}\n\n\t\tthis.styleElement = createStyleSheet(this.view.getHTMLElement());\n\t\tthis.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n\t}\n\n\tupdateOptions(optionsUpdate: IAbstractTreeOptionsUpdate = {}): void {\n\t\tthis._options = { ...this._options, ...optionsUpdate };\n\n\t\tfor (const renderer of this.renderers) {\n\t\t\trenderer.updateOptions(optionsUpdate);\n\t\t}\n\n\t\tthis.view.updateOptions(this._options);\n\t\tthis.findController?.updateOptions(optionsUpdate);\n\t\tthis.updateStickyScroll(optionsUpdate);\n\n\t\tthis._onDidUpdateOptions.fire(this._options);\n\n\t\tthis.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n\t}\n\n\tget options(): IAbstractTreeOptions<T, TFilterData> {\n\t\treturn this._options;\n\t}\n\n\tprivate updateStickyScroll(optionsUpdate: IAbstractTreeOptionsUpdate) {\n\t\tif (!this.stickyScrollController && this._options.enableStickyScroll) {\n\t\t\tthis.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, this._options);\n\t\t\tthis.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n\t\t} else if (this.stickyScrollController && !this._options.enableStickyScroll) {\n\t\t\tthis.onDidChangeStickyScrollFocused = Event.None;\n\t\t\tthis.stickyScrollController.dispose();\n\t\t\tthis.stickyScrollController = undefined;\n\t\t}\n\t\tthis.stickyScrollController?.updateOptions(optionsUpdate);\n\t}\n\n\tupdateWidth(element: TRef): void {\n\t\tconst index = this.model.getListIndex(element);\n\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.view.updateWidth(index);\n\t}\n\n\t// Widget\n\n\tgetHTMLElement(): HTMLElement {\n\t\treturn this.view.getHTMLElement();\n\t}\n\n\tget contentHeight(): number {\n\t\treturn this.view.contentHeight;\n\t}\n\n\tget contentWidth(): number {\n\t\treturn this.view.contentWidth;\n\t}\n\n\tget onDidChangeContentHeight(): Event<number> {\n\t\treturn this.view.onDidChangeContentHeight;\n\t}\n\n\tget onDidChangeContentWidth(): Event<number> {\n\t\treturn this.view.onDidChangeContentWidth;\n\t}\n\n\tget scrollTop(): number {\n\t\treturn this.view.scrollTop;\n\t}\n\n\tset scrollTop(scrollTop: number) {\n\t\tthis.view.scrollTop = scrollTop;\n\t}\n\n\tget scrollLeft(): number {\n\t\treturn this.view.scrollLeft;\n\t}\n\n\tset scrollLeft(scrollLeft: number) {\n\t\tthis.view.scrollLeft = scrollLeft;\n\t}\n\n\tget scrollHeight(): number {\n\t\treturn this.view.scrollHeight;\n\t}\n\n\tget renderHeight(): number {\n\t\treturn this.view.renderHeight;\n\t}\n\n\tget firstVisibleElement(): T | undefined {\n\t\tlet index = this.view.firstVisibleIndex;\n\n\t\tif (this.stickyScrollController) {\n\t\t\tindex += this.stickyScrollController.count;\n\t\t}\n\n\t\tif (index < 0 || index >= this.view.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst node = this.view.element(index);\n\t\treturn node.element;\n\t}\n\n\tget lastVisibleElement(): T {\n\t\tconst index = this.view.lastVisibleIndex;\n\t\tconst node = this.view.element(index);\n\t\treturn node.element;\n\t}\n\n\tget ariaLabel(): string {\n\t\treturn this.view.ariaLabel;\n\t}\n\n\tset ariaLabel(value: string) {\n\t\tthis.view.ariaLabel = value;\n\t}\n\n\tget selectionSize() {\n\t\treturn this.selection.getNodes().length;\n\t}\n\n\tdomFocus(): void {\n\t\tif (this.stickyScrollController?.focusedLast()) {\n\t\t\tthis.stickyScrollController.domFocus();\n\t\t} else {\n\t\t\tthis.view.domFocus();\n\t\t}\n\t}\n\n\tisDOMFocused(): boolean {\n\t\treturn isActiveElement(this.getHTMLElement());\n\t}\n\n\tlayout(height?: number, width?: number): void {\n\t\tthis.view.layout(height, width);\n\n\t\tif (isNumber(width)) {\n\t\t\tthis.findController?.layout(width);\n\t\t}\n\t}\n\n\tstyle(styles: IListStyles): void {\n\t\tconst suffix = `.${this.view.domId}`;\n\t\tconst content: string[] = [];\n\n\t\tif (styles.treeIndentGuidesStroke) {\n\t\t\tcontent.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`);\n\t\t\tcontent.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n\t\t}\n\n\t\t// Sticky Scroll Background\n\t\tconst stickyScrollBackground = styles.treeStickyScrollBackground ?? styles.listBackground;\n\t\tif (stickyScrollBackground) {\n\t\t\tcontent.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${stickyScrollBackground}; }`);\n\t\t\tcontent.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${stickyScrollBackground}; }`);\n\t\t}\n\n\t\t// Sticky Scroll Border\n\t\tif (styles.treeStickyScrollBorder) {\n\t\t\tcontent.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { border-bottom: 1px solid ${styles.treeStickyScrollBorder}; }`);\n\t\t}\n\n\t\t// Sticky Scroll Shadow\n\t\tif (styles.treeStickyScrollShadow) {\n\t\t\tcontent.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-container-shadow { box-shadow: ${styles.treeStickyScrollShadow} 0 6px 6px -6px inset; height: 3px; }`);\n\t\t}\n\n\t\t// Sticky Scroll Focus\n\t\tif (styles.listFocusForeground) {\n\t\t\tcontent.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { color: ${styles.listFocusForeground}; }`);\n\t\t\tcontent.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { color: inherit; }`);\n\t\t}\n\n\t\t// Sticky Scroll Focus Outlines\n\t\tconst focusAndSelectionOutline = asCssValueWithDefault(styles.listFocusAndSelectionOutline, asCssValueWithDefault(styles.listSelectionOutline, styles.listFocusOutline ?? ''));\n\t\tif (focusAndSelectionOutline) { // default: listFocusOutline\n\t\t\tcontent.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused.selected { outline: 1px solid ${focusAndSelectionOutline}; outline-offset: -1px;}`);\n\t\t\tcontent.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused.selected { outline: inherit;}`);\n\t\t}\n\n\t\tif (styles.listFocusOutline) { // default: set\n\t\t\tcontent.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n\t\t\tcontent.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { outline: inherit; }`);\n\n\t\t\tcontent.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.passive-focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n\n\t\t\tcontent.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n\t\t\tcontent.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused:not(.sticky-scroll-focused) .monaco-tree-sticky-container .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n\t\t}\n\n\t\tthis.styleElement.textContent = content.join('\\n');\n\n\t\tthis.view.style(styles);\n\t}\n\n\t// Tree navigation\n\n\tgetParentElement(location: TRef): T {\n\t\tconst parentRef = this.model.getParentNodeLocation(location);\n\t\tconst parentNode = this.model.getNode(parentRef);\n\t\treturn parentNode.element;\n\t}\n\n\tgetFirstElementChild(location: TRef): T | undefined {\n\t\treturn this.model.getFirstElementChild(location);\n\t}\n\n\t// Tree\n\n\tgetNode(location?: TRef): ITreeNode<T, TFilterData> {\n\t\treturn this.model.getNode(location);\n\t}\n\n\tgetNodeLocation(node: ITreeNode<T, TFilterData>): TRef {\n\t\treturn this.model.getNodeLocation(node);\n\t}\n\n\tcollapse(location: TRef, recursive: boolean = false): boolean {\n\t\treturn this.model.setCollapsed(location, true, recursive);\n\t}\n\n\texpand(location: TRef, recursive: boolean = false): boolean {\n\t\treturn this.model.setCollapsed(location, false, recursive);\n\t}\n\n\ttoggleCollapsed(location: TRef, recursive: boolean = false): boolean {\n\t\treturn this.model.setCollapsed(location, undefined, recursive);\n\t}\n\n\texpandAll(): void {\n\t\tthis.model.setCollapsed(this.model.rootRef, false, true);\n\t}\n\n\tcollapseAll(): void {\n\t\tthis.model.setCollapsed(this.model.rootRef, true, true);\n\t}\n\n\tisCollapsible(location: TRef): boolean {\n\t\treturn this.model.isCollapsible(location);\n\t}\n\n\tsetCollapsible(location: TRef, collapsible?: boolean): boolean {\n\t\treturn this.model.setCollapsible(location, collapsible);\n\t}\n\n\tisCollapsed(location: TRef): boolean {\n\t\treturn this.model.isCollapsed(location);\n\t}\n\n\texpandTo(location: TRef): void {\n\t\tthis.model.expandTo(location);\n\t}\n\n\ttriggerTypeNavigation(): void {\n\t\tthis.view.triggerTypeNavigation();\n\t}\n\n\topenFind(): void {\n\t\tthis.findController?.open();\n\t}\n\n\tcloseFind(): void {\n\t\tthis.findController?.close();\n\t}\n\n\trefilter(): void {\n\t\tthis._onWillRefilter.fire(undefined);\n\t\tthis.model.refilter();\n\t}\n\n\tsetAnchor(element: TRef | undefined): void {\n\t\tif (typeof element === 'undefined') {\n\t\t\treturn this.view.setAnchor(undefined);\n\t\t}\n\n\t\tthis.eventBufferer.bufferEvents(() => {\n\t\t\tconst node = this.model.getNode(element);\n\t\t\tthis.anchor.set([node]);\n\n\t\t\tconst index = this.model.getListIndex(element);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.view.setAnchor(index, true);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetAnchor(): T | undefined {\n\t\treturn this.anchor.get().at(0);\n\t}\n\n\tsetSelection(elements: TRef[], browserEvent?: UIEvent): void {\n\t\tthis.eventBufferer.bufferEvents(() => {\n\t\t\tconst nodes = elements.map(e => this.model.getNode(e));\n\t\t\tthis.selection.set(nodes, browserEvent);\n\n\t\t\tconst indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n\t\t\tthis.view.setSelection(indexes, browserEvent, true);\n\t\t});\n\t}\n\n\tgetSelection(): T[] {\n\t\treturn this.selection.get();\n\t}\n\n\tsetFocus(elements: TRef[], browserEvent?: UIEvent): void {\n\t\tthis.eventBufferer.bufferEvents(() => {\n\t\t\tconst nodes = elements.map(e => this.model.getNode(e));\n\t\t\tthis.focus.set(nodes, browserEvent);\n\n\t\t\tconst indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n\t\t\tthis.view.setFocus(indexes, browserEvent, true);\n\t\t});\n\t}\n\n\tfocusNext(n = 1, loop = false, browserEvent?: UIEvent, filter: ((node: ITreeNode<T, TFilterData>) => boolean) | undefined = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter): void {\n\t\tthis.view.focusNext(n, loop, browserEvent, filter);\n\t}\n\n\tfocusPrevious(n = 1, loop = false, browserEvent?: UIEvent, filter: ((node: ITreeNode<T, TFilterData>) => boolean) | undefined = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter): void {\n\t\tthis.view.focusPrevious(n, loop, browserEvent, filter);\n\t}\n\n\tfocusNextPage(browserEvent?: UIEvent, filter: ((node: ITreeNode<T, TFilterData>) => boolean) | undefined = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter): Promise<void> {\n\t\treturn this.view.focusNextPage(browserEvent, filter);\n\t}\n\n\tfocusPreviousPage(browserEvent?: UIEvent, filter: ((node: ITreeNode<T, TFilterData>) => boolean) | undefined = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter): Promise<void> {\n\t\treturn this.view.focusPreviousPage(browserEvent, filter, () => this.stickyScrollController?.height ?? 0);\n\t}\n\n\tfocusLast(browserEvent?: UIEvent, filter: ((node: ITreeNode<T, TFilterData>) => boolean) | undefined = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter): void {\n\t\tthis.view.focusLast(browserEvent, filter);\n\t}\n\n\tfocusFirst(browserEvent?: UIEvent, filter: ((node: ITreeNode<T, TFilterData>) => boolean) | undefined = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter): void {\n\t\tthis.view.focusFirst(browserEvent, filter);\n\t}\n\n\tgetFocus(): T[] {\n\t\treturn this.focus.get();\n\t}\n\n\tgetStickyScrollFocus(): T[] {\n\t\tconst focus = this.stickyScrollController?.getFocus();\n\t\treturn focus !== undefined ? [focus] : [];\n\t}\n\n\tgetFocusedPart(): AbstractTreePart {\n\t\treturn this.stickyScrollController?.focusedLast() ? AbstractTreePart.StickyScroll : AbstractTreePart.Tree;\n\t}\n\n\treveal(location: TRef, relativeTop?: number): void {\n\t\tthis.model.expandTo(location);\n\n\t\tconst index = this.model.getListIndex(location);\n\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.stickyScrollController) {\n\t\t\tthis.view.reveal(index, relativeTop);\n\t\t} else {\n\t\t\tconst paddingTop = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(location));\n\t\t\tthis.view.reveal(index, relativeTop, paddingTop);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the relative position of an element rendered in the list.\n\t * Returns `null` if the element isn't *entirely* in the visible viewport.\n\t */\n\tgetRelativeTop(location: TRef): number | null {\n\t\tconst index = this.model.getListIndex(location);\n\n\t\tif (index === -1) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst stickyScrollNode = this.stickyScrollController?.getNode(this.getNode(location));\n\t\treturn this.view.getRelativeTop(index, stickyScrollNode?.position ?? this.stickyScrollController?.height);\n\t}\n\n\tgetViewState(identityProvider = this.options.identityProvider): AbstractTreeViewState {\n\t\tif (!identityProvider) {\n\t\t\tthrow new TreeError(this._user, 'Can\\'t get tree view state without an identity provider');\n\t\t}\n\n\t\tconst getId = (element: T | null) => identityProvider.getId(element!).toString();\n\t\tconst state = AbstractTreeViewState.empty(this.scrollTop);\n\t\tfor (const focus of this.getFocus()) {\n\t\t\tstate.focus.add(getId(focus));\n\t\t}\n\t\tfor (const selection of this.getSelection()) {\n\t\t\tstate.selection.add(getId(selection));\n\t\t}\n\n\t\tconst root = this.model.getNode();\n\t\tconst queue = [root];\n\n\t\twhile (queue.length > 0) {\n\t\t\tconst node = queue.shift()!;\n\n\t\t\tif (node !== root && node.collapsible) {\n\t\t\t\tstate.expanded[getId(node.element)] = node.collapsed ? 0 : 1;\n\t\t\t}\n\n\t\t\tqueue.push(...node.children);\n\t\t}\n\n\t\treturn state;\n\t}\n\n\t// List\n\n\tprivate onLeftArrow(e: StandardKeyboardEvent): void {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tconst nodes = this.view.getFocusedElements();\n\n\t\tif (nodes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = nodes[0];\n\t\tconst location = this.model.getNodeLocation(node);\n\t\tconst didChange = this.model.setCollapsed(location, true);\n\n\t\tif (!didChange) {\n\t\t\tconst parentLocation = this.model.getParentNodeLocation(location);\n\n\t\t\tif (!parentLocation) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst parentListIndex = this.model.getListIndex(parentLocation);\n\n\t\t\tthis.view.reveal(parentListIndex);\n\t\t\tthis.view.setFocus([parentListIndex]);\n\t\t}\n\t}\n\n\tprivate onRightArrow(e: StandardKeyboardEvent): void {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tconst nodes = this.view.getFocusedElements();\n\n\t\tif (nodes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = nodes[0];\n\t\tconst location = this.model.getNodeLocation(node);\n\t\tconst didChange = this.model.setCollapsed(location, false);\n\n\t\tif (!didChange) {\n\t\t\tif (!node.children.some(child => child.visible)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [focusedIndex] = this.view.getFocus();\n\t\t\tconst firstChildIndex = focusedIndex + 1;\n\n\t\t\tthis.view.reveal(firstChildIndex);\n\t\t\tthis.view.setFocus([firstChildIndex]);\n\t\t}\n\t}\n\n\tprivate onSpace(e: StandardKeyboardEvent): void {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tconst nodes = this.view.getFocusedElements();\n\n\t\tif (nodes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = nodes[0];\n\t\tconst location = this.model.getNodeLocation(node);\n\t\tconst recursive = e.browserEvent.altKey;\n\n\t\tthis.model.setCollapsed(location, undefined, recursive);\n\t}\n\n\tprotected abstract createModel(user: string, options: IAbstractTreeOptions<T, TFilterData>): ITreeModel<T, TFilterData, TRef>;\n\n\tprivate readonly modelDisposables = new DisposableStore();\n\tprivate setupModel(model: ITreeModel<T, TFilterData, TRef>) {\n\t\tthis.modelDisposables.clear();\n\n\t\tthis.modelDisposables.add(model.onDidSpliceRenderedNodes(({ start, deleteCount, elements }) => this.view.splice(start, deleteCount, elements)));\n\n\t\tconst onDidModelSplice = Event.forEach(model.onDidSpliceModel, e => {\n\t\t\tthis.eventBufferer.bufferEvents(() => {\n\t\t\t\tthis.focus.onDidModelSplice(e);\n\t\t\t\tthis.selection.onDidModelSplice(e);\n\t\t\t});\n\t\t}, this.modelDisposables);\n\n\t\t// Make sure the `forEach` always runs\n\t\tonDidModelSplice(() => null, null, this.modelDisposables);\n\n\t\t// Active nodes can change when the model changes or when focus or selection change.\n\t\t// We debounce it with 0 delay since these events may fire in the same stack and we only\n\t\t// want to run this once. It also doesn't matter if it runs on the next tick since it's only\n\t\t// a nice to have UI feature.\n\t\tconst activeNodesEmitter = this.modelDisposables.add(new Emitter<ITreeNode<T, TFilterData>[]>());\n\t\tconst activeNodesDebounce = this.modelDisposables.add(new Delayer(0));\n\t\tthis.modelDisposables.add(Event.any<any>(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)(() => {\n\t\t\tactiveNodesDebounce.trigger(() => {\n\t\t\t\tconst set = new Set<ITreeNode<T, TFilterData>>();\n\n\t\t\t\tfor (const node of this.focus.getNodes()) {\n\t\t\t\t\tset.add(node);\n\t\t\t\t}\n\n\t\t\t\tfor (const node of this.selection.getNodes()) {\n\t\t\t\t\tset.add(node);\n\t\t\t\t}\n\n\t\t\t\tactiveNodesEmitter.fire([...set.values()]);\n\t\t\t});\n\t\t}));\n\n\t\tthis.onDidChangeActiveNodesRelay.input = activeNodesEmitter.event;\n\t\tthis.onDidChangeModelRelay.input = Event.signal(model.onDidSpliceModel);\n\t\tthis.onDidChangeCollapseStateRelay.input = model.onDidChangeCollapseState;\n\t\tthis.onDidChangeRenderNodeCountRelay.input = model.onDidChangeRenderNodeCount;\n\t}\n\n\tsetModel(newModel: ITreeModel<T, TFilterData, TRef>) {\n\t\tconst oldModel = this.model;\n\n\t\tthis.model = newModel;\n\t\tthis.setupModel(newModel);\n\n\t\tthis.renderers.forEach(r => r.setModel(newModel));\n\t\tthis.stickyScrollController?.setModel(newModel);\n\n\t\tthis.focus.set([]);\n\t\tthis.selection.set([]);\n\t\tthis.anchor.set([]);\n\n\t\tthis.view.splice(0, oldModel.getListRenderCount(oldModel.rootRef));\n\t\tthis.model.refilter();\n\n\t\tthis.onDidSwapModel.fire();\n\t}\n\n\tgetModel(): ITreeModel<T, TFilterData, TRef> {\n\t\treturn this.model;\n\t}\n\n\tnavigate(start?: TRef): ITreeNavigator<T> {\n\t\treturn new TreeNavigator(this.view, this.model, start);\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.disposables);\n\t\tthis.stickyScrollController?.dispose();\n\t\tthis.view.dispose();\n\t\tthis.modelDisposables.dispose();\n\t}\n}\n\ninterface ITreeNavigatorView<T extends NonNullable<any>, TFilterData> {\n\treadonly length: number;\n\telement(index: number): ITreeNode<T, TFilterData>;\n}\n\nclass TreeNavigator<T extends NonNullable<any>, TFilterData, TRef> implements ITreeNavigator<T> {\n\n\tprivate index: number;\n\n\tconstructor(private view: ITreeNavigatorView<T, TFilterData>, private model: ITreeModel<T, TFilterData, TRef>, start?: TRef) {\n\t\tif (start) {\n\t\t\tthis.index = this.model.getListIndex(start);\n\t\t} else {\n\t\t\tthis.index = -1;\n\t\t}\n\t}\n\n\tcurrent(): T | null {\n\t\tif (this.index < 0 || this.index >= this.view.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.view.element(this.index).element;\n\t}\n\n\tprevious(): T | null {\n\t\tthis.index--;\n\t\treturn this.current();\n\t}\n\n\tnext(): T | null {\n\t\tthis.index++;\n\t\treturn this.current();\n\t}\n\n\tfirst(): T | null {\n\t\tthis.index = 0;\n\t\treturn this.current();\n\t}\n\n\tlast(): T | null {\n\t\tthis.index = this.view.length - 1;\n\t\treturn this.current();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["model", "ref", "RenderIndentGuides", "TreeFindMode", "TreeFindMatchType", "$", "e", "renderer", "stickyNode", "AbstractTreePart"]
}
