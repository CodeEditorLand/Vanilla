var D=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var m=(d,e,t,r)=>{for(var o=r>1?void 0:r?I(e,t):e,a=d.length-1,i;a>=0;a--)(i=d[a])&&(o=(r?i(e,t,o):i(o))||o);return r&&o&&D(e,t,o),o};import{memoize as u}from"../../../common/decorators.js";import{Iterable as c}from"../../../common/iterator.js";import{AbstractTree as N}from"./abstractTree.js";import{CompressibleObjectTreeModel as h}from"./compressedObjectTreeModel.js";import{ObjectTreeModel as g}from"./objectTreeModel.js";import{TreeError as C}from"./tree.js";class v extends N{constructor(t,r,o,a,i={}){super(t,r,o,a,i);this.user=t}get onDidChangeCollapseState(){return this.model.onDidChangeCollapseState}setChildren(t,r=c.empty(),o){this.model.setChildren(t,r,o)}rerender(t){if(t===void 0){this.view.rerender();return}this.model.rerender(t)}updateElementHeight(t,r){const o=this.model.getListIndex(t);if(o===-1)throw new C(this.user,"updateElementHeight failed - index not found");this.view.updateElementHeight(o,r)}resort(t,r=!0){this.model.resort(t,r)}hasElement(t){return this.model.has(t)}createModel(t,r){return new g(t,r)}}class b{constructor(e,t,r){this._compressedTreeNodeProvider=e;this.stickyScrollDelegate=t;this.renderer=r;this.templateId=r.templateId,r.onDidChangeTwistieState&&(this.onDidChangeTwistieState=r.onDidChangeTwistieState)}templateId;onDidChangeTwistieState;get compressedTreeNodeProvider(){return this._compressedTreeNodeProvider()}renderTemplate(e){return{compressedTreeNode:void 0,data:this.renderer.renderTemplate(e)}}renderElement(e,t,r,o){let a=this.stickyScrollDelegate.getCompressedNode(e);a||(a=this.compressedTreeNodeProvider.getCompressedTreeNode(e.element)),a.element.elements.length===1?(r.compressedTreeNode=void 0,this.renderer.renderElement(e,t,r.data,o)):(r.compressedTreeNode=a,this.renderer.renderCompressedElements(a,t,r.data,o))}disposeElement(e,t,r,o){r.compressedTreeNode?this.renderer.disposeCompressedElements?.(r.compressedTreeNode,t,r.data,o):this.renderer.disposeElement?.(e,t,r.data,o)}disposeTemplate(e){this.renderer.disposeTemplate(e.data)}renderTwistie(e,t){return this.renderer.renderTwistie?this.renderer.renderTwistie(e,t):!1}}m([u],b.prototype,"compressedTreeNodeProvider",1);class y{constructor(e){this.modelProvider=e}compressedStickyNodes=new Map;getCompressedNode(e){return this.compressedStickyNodes.get(e)}constrainStickyScrollNodes(e,t,r){if(this.compressedStickyNodes.clear(),e.length===0)return[];for(let o=0;o<e.length;o++){const a=e[o],i=a.position+a.height;if(o+1<e.length&&i+e[o+1].height>r||o>=t-1&&t<e.length){const n=e.slice(0,o),l=e.slice(o),T=this.compressStickyNodes(l);return[...n,T]}}return e}compressStickyNodes(e){if(e.length===0)throw new Error("Can't compress empty sticky nodes");const t=this.modelProvider();if(!t.isCompressionEnabled())return e[0];const r=[];for(let l=0;l<e.length;l++){const T=e[l],p=t.getCompressedTreeNode(T.node.element);if(p.element){if(l!==0&&p.element.incompressible)break;r.push(...p.element.elements)}}if(r.length<2)return e[0];const o=e[e.length-1],a={elements:r,incompressible:!1},i={...o.node,children:[],element:a},s=new Proxy(e[0].node,{}),n={node:s,startIndex:e[0].startIndex,endIndex:o.endIndex,position:e[0].position,height:e[0].height};return this.compressedStickyNodes.set(s,i),n}}function F(d,e){return e&&{...e,keyboardNavigationLabelProvider:e.keyboardNavigationLabelProvider&&{getKeyboardNavigationLabel(t){let r;try{r=d().getCompressedTreeNode(t)}catch{return e.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(t)}return r.element.elements.length===1?e.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(t):e.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(r.element.elements)}}}}class L extends v{constructor(e,t,r,o,a={}){const i=()=>this,s=new y(()=>this.model),n=o.map(l=>new b(i,s,l));super(e,t,r,n,{...F(i,a),stickyScrollDelegate:s})}setChildren(e,t=c.empty(),r){this.model.setChildren(e,t,r)}createModel(e,t){return new h(e,t)}updateOptions(e={}){super.updateOptions(e),typeof e.compressionEnabled<"u"&&this.model.setCompressionEnabled(e.compressionEnabled)}getCompressedTreeNode(e=null){return this.model.getCompressedTreeNode(e)}}export{L as CompressibleObjectTree,v as ObjectTree};
