var D=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var p=(d,e,r,t)=>{for(var o=t>1?void 0:t?I(e,r):e,a=d.length-1,i;a>=0;a--)(i=d[a])&&(o=(t?i(e,r,o):i(o))||o);return t&&o&&D(e,r,o),o};import{AbstractTree as u}from"./abstractTree.js";import{CompressibleObjectTreeModel as N}from"./compressedObjectTreeModel.js";import{ObjectTreeModel as h}from"./objectTreeModel.js";import{TreeError as g}from"./tree.js";import{memoize as C}from"../../../common/decorators.js";import{Iterable as c}from"../../../common/iterator.js";class v extends u{constructor(r,t,o,a,i={}){super(r,t,o,a,i);this.user=r}get onDidChangeCollapseState(){return this.model.onDidChangeCollapseState}setChildren(r,t=c.empty(),o){this.model.setChildren(r,t,o)}rerender(r){if(r===void 0){this.view.rerender();return}this.model.rerender(r)}updateElementHeight(r,t){const o=this.model.getListIndex(r);if(o===-1)throw new g(this.user,"updateElementHeight failed - index not found");this.view.updateElementHeight(o,t)}resort(r,t=!0){this.model.resort(r,t)}hasElement(r){return this.model.has(r)}createModel(r,t){return new h(r,t)}}class b{constructor(e,r,t){this._compressedTreeNodeProvider=e;this.stickyScrollDelegate=r;this.renderer=t;this.templateId=t.templateId,t.onDidChangeTwistieState&&(this.onDidChangeTwistieState=t.onDidChangeTwistieState)}templateId;onDidChangeTwistieState;get compressedTreeNodeProvider(){return this._compressedTreeNodeProvider()}renderTemplate(e){return{compressedTreeNode:void 0,data:this.renderer.renderTemplate(e)}}renderElement(e,r,t,o){let a=this.stickyScrollDelegate.getCompressedNode(e);a||(a=this.compressedTreeNodeProvider.getCompressedTreeNode(e.element)),a.element.elements.length===1?(t.compressedTreeNode=void 0,this.renderer.renderElement(e,r,t.data,o)):(t.compressedTreeNode=a,this.renderer.renderCompressedElements(a,r,t.data,o))}disposeElement(e,r,t,o){t.compressedTreeNode?this.renderer.disposeCompressedElements?.(t.compressedTreeNode,r,t.data,o):this.renderer.disposeElement?.(e,r,t.data,o)}disposeTemplate(e){this.renderer.disposeTemplate(e.data)}renderTwistie(e,r){return this.renderer.renderTwistie?this.renderer.renderTwistie(e,r):!1}}p([C],b.prototype,"compressedTreeNodeProvider",1);class F{constructor(e){this.modelProvider=e}compressedStickyNodes=new Map;getCompressedNode(e){return this.compressedStickyNodes.get(e)}constrainStickyScrollNodes(e,r,t){if(this.compressedStickyNodes.clear(),e.length===0)return[];for(let o=0;o<e.length;o++){const a=e[o],i=a.position+a.height;if(o+1<e.length&&i+e[o+1].height>t||o>=r-1&&r<e.length){const n=e.slice(0,o),l=e.slice(o),T=this.compressStickyNodes(l);return[...n,T]}}return e}compressStickyNodes(e){if(e.length===0)throw new Error("Can't compress empty sticky nodes");const r=this.modelProvider();if(!r.isCompressionEnabled())return e[0];const t=[];for(let l=0;l<e.length;l++){const T=e[l],m=r.getCompressedTreeNode(T.node.element);if(m.element){if(l!==0&&m.element.incompressible)break;t.push(...m.element.elements)}}if(t.length<2)return e[0];const o=e[e.length-1],a={elements:t,incompressible:!1},i={...o.node,children:[],element:a},s=new Proxy(e[0].node,{}),n={node:s,startIndex:e[0].startIndex,endIndex:o.endIndex,position:e[0].position,height:e[0].height};return this.compressedStickyNodes.set(s,i),n}}function f(d,e){return e&&{...e,keyboardNavigationLabelProvider:e.keyboardNavigationLabelProvider&&{getKeyboardNavigationLabel(r){let t;try{t=d().getCompressedTreeNode(r)}catch{return e.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(r)}return t.element.elements.length===1?e.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(r):e.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(t.element.elements)}}}}class Z extends v{constructor(e,r,t,o,a={}){const i=()=>this,s=new F(()=>this.model),n=o.map(l=>new b(i,s,l));super(e,r,t,n,{...f(i,a),stickyScrollDelegate:s})}setChildren(e,r=c.empty(),t){this.model.setChildren(e,r,t)}createModel(e,r){return new N(e,r)}updateOptions(e={}){super.updateOptions(e),typeof e.compressionEnabled<"u"&&this.model.setCompressionEnabled(e.compressionEnabled)}getCompressedTreeNode(e=null){return this.model.getCompressedTreeNode(e)}}export{Z as CompressibleObjectTree,v as ObjectTree};
