import{Iterable as a}from"../../../common/iterator.js";import{AbstractTree as u}from"./abstractTree.js";import{ObjectTreeModel as p}from"./objectTreeModel.js";import{TreeError as l}from"./tree.js";class m extends u{constructor(t,e,r,d,i,o={}){super(t,e,r,d,o);this.user=t;this.dataSource=i;this.identityProvider=o.identityProvider}input;identityProvider;nodesByIdentity=new Map;getInput(){return this.input}setInput(t,e){if(e&&!this.identityProvider)throw new l(this.user,"Can't restore tree view state without an identity provider");if(this.input=t,!t){this.nodesByIdentity.clear(),this.model.setChildren(null,a.empty());return}if(!e){this._refresh(t);return}const r=[],d=[],i=n=>{const s=this.identityProvider.getId(n).toString();return!e.expanded[s]},o=n=>{const s=this.identityProvider.getId(n.element).toString();e.focus.has(s)&&r.push(n.element),e.selection.has(s)&&d.push(n.element)};this._refresh(t,i,o),this.setFocus(r),this.setSelection(d),e&&typeof e.scrollTop=="number"&&(this.scrollTop=e.scrollTop)}updateChildren(t=this.input){if(typeof this.input>"u")throw new l(this.user,"Tree input not set");let e;this.identityProvider&&(e=r=>{const d=this.identityProvider.getId(r).toString(),i=this.nodesByIdentity.get(d);if(i)return i.collapsed}),this._refresh(t,e)}resort(t=this.input,e=!0){this.model.resort(t===this.input?null:t,e)}refresh(t){if(t===void 0){this.view.rerender();return}this.model.rerender(t)}_refresh(t,e,r){let d;if(this.identityProvider){const i=new Set,o=r;r=n=>{const s=this.identityProvider.getId(n.element).toString();i.add(s),this.nodesByIdentity.set(s,n),o?.(n)},d=n=>{const s=this.identityProvider.getId(n.element).toString();i.has(s)||this.nodesByIdentity.delete(s)}}this.model.setChildren(t===this.input?null:t,this.iterate(t,e).elements,{onDidCreateNode:r,onDidDeleteNode:d})}iterate(t,e){const r=[...this.dataSource.getChildren(t)];return{elements:a.map(r,i=>{const{elements:o,size:n}=this.iterate(i,e),s=this.dataSource.hasChildren?this.dataSource.hasChildren(i):void 0,T=n===0?void 0:e&&e(i);return{element:i,children:o,collapsible:s,collapsed:T}}),size:r.length}}createModel(t,e){return new p(t,e)}}export{m as DataTree};
