{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/splitview/splitview.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $, addDisposableListener, append, getWindow, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { ISashEvent as IBaseSashEvent, Orientation, Sash, SashState } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, dispose, IDisposable, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable, ScrollbarVisibility, ScrollEvent } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nexport { Orientation } from '../sash/sash.js';\n\nexport interface ISplitViewStyles {\n\treadonly separatorBorder: Color;\n}\n\nconst defaultStyles: ISplitViewStyles = {\n\tseparatorBorder: Color.transparent\n};\n\nexport const enum LayoutPriority {\n\tNormal,\n\tLow,\n\tHigh\n}\n\n/**\n * The interface to implement for views within a {@link SplitView}.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n */\nexport interface IView<TLayoutContext = undefined> {\n\n\t/**\n\t * The DOM element for this view.\n\t */\n\treadonly element: HTMLElement;\n\n\t/**\n\t * A minimum size for this view.\n\t *\n\t * @remarks If none, set it to `0`.\n\t */\n\treadonly minimumSize: number;\n\n\t/**\n\t * A maximum size for this view.\n\t *\n\t * @remarks If none, set it to `Number.POSITIVE_INFINITY`.\n\t */\n\treadonly maximumSize: number;\n\n\t/**\n\t * The priority of the view when the {@link SplitView.resize layout} algorithm\n\t * runs. Views with higher priority will be resized first.\n\t *\n\t * @remarks Only used when `proportionalLayout` is false.\n\t */\n\treadonly priority?: LayoutPriority;\n\n\t/**\n\t * If the {@link SplitView} supports {@link ISplitViewOptions.proportionalLayout proportional layout},\n\t * this property allows for finer control over the proportional layout algorithm, per view.\n\t *\n\t * @defaultValue `true`\n\t */\n\treadonly proportionalLayout?: boolean;\n\n\t/**\n\t * Whether the view will snap whenever the user reaches its minimum size or\n\t * attempts to grow it beyond the minimum size.\n\t *\n\t * @defaultValue `false`\n\t */\n\treadonly snap?: boolean;\n\n\t/**\n\t * View instances are supposed to fire the {@link IView.onDidChange} event whenever\n\t * any of the constraint properties have changed:\n\t *\n\t * - {@link IView.minimumSize}\n\t * - {@link IView.maximumSize}\n\t * - {@link IView.priority}\n\t * - {@link IView.snap}\n\t *\n\t * The SplitView will relayout whenever that happens. The event can optionally emit\n\t * the view's preferred size for that relayout.\n\t */\n\treadonly onDidChange: Event<number | undefined>;\n\n\t/**\n\t * This will be called by the {@link SplitView} during layout. A view meant to\n\t * pass along the layout information down to its descendants.\n\t *\n\t * @param size The size of this view, in pixels.\n\t * @param offset The offset of this view, relative to the start of the {@link SplitView}.\n\t * @param context The optional {@link IView layout context} passed to {@link SplitView.layout}.\n\t */\n\tlayout(size: number, offset: number, context: TLayoutContext | undefined): void;\n\n\t/**\n\t * This will be called by the {@link SplitView} whenever this view is made\n\t * visible or hidden.\n\t *\n\t * @param visible Whether the view becomes visible.\n\t */\n\tsetVisible?(visible: boolean): void;\n}\n\n/**\n * A descriptor for a {@link SplitView} instance.\n */\nexport interface ISplitViewDescriptor<TLayoutContext = undefined, TView extends IView<TLayoutContext> = IView<TLayoutContext>> {\n\n\t/**\n\t * The layout size of the {@link SplitView}.\n\t */\n\treadonly size: number;\n\n\t/**\n\t * Descriptors for each {@link IView view}.\n\t */\n\treadonly views: {\n\n\t\t/**\n\t\t * Whether the {@link IView view} is visible.\n\t\t *\n\t\t * @defaultValue `true`\n\t\t */\n\t\treadonly visible?: boolean;\n\n\t\t/**\n\t\t * The size of the {@link IView view}.\n\t\t *\n\t\t * @defaultValue `true`\n\t\t */\n\t\treadonly size: number;\n\n\t\t/**\n\t\t * The size of the {@link IView view}.\n\t\t *\n\t\t * @defaultValue `true`\n\t\t */\n\t\treadonly view: TView;\n\t}[];\n}\n\nexport interface ISplitViewOptions<TLayoutContext = undefined, TView extends IView<TLayoutContext> = IView<TLayoutContext>> {\n\n\t/**\n\t * Which axis the views align on.\n\t *\n\t * @defaultValue `Orientation.VERTICAL`\n\t */\n\treadonly orientation?: Orientation;\n\n\t/**\n\t * Styles overriding the {@link defaultStyles default ones}.\n\t */\n\treadonly styles?: ISplitViewStyles;\n\n\t/**\n\t * Make Alt-drag the default drag operation.\n\t */\n\treadonly inverseAltBehavior?: boolean;\n\n\t/**\n\t * Resize each view proportionally when resizing the SplitView.\n\t *\n\t * @defaultValue `true`\n\t */\n\treadonly proportionalLayout?: boolean;\n\n\t/**\n\t * An initial description of this {@link SplitView} instance, allowing\n\t * to initialze all views within the ctor.\n\t */\n\treadonly descriptor?: ISplitViewDescriptor<TLayoutContext, TView>;\n\n\t/**\n\t * The scrollbar visibility setting for whenever the views within\n\t * the {@link SplitView} overflow.\n\t */\n\treadonly scrollbarVisibility?: ScrollbarVisibility;\n\n\t/**\n\t * Override the orthogonal size of sashes.\n\t */\n\treadonly getSashOrthogonalSize?: () => number;\n}\n\ninterface ISashEvent {\n\treadonly sash: Sash;\n\treadonly start: number;\n\treadonly current: number;\n\treadonly alt: boolean;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nabstract class ViewItem<TLayoutContext, TView extends IView<TLayoutContext>> {\n\n\tprivate _size: number;\n\tset size(size: number) {\n\t\tthis._size = size;\n\t}\n\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\tprivate _cachedVisibleSize: number | undefined = undefined;\n\tget cachedVisibleSize(): number | undefined { return this._cachedVisibleSize; }\n\n\tget visible(): boolean {\n\t\treturn typeof this._cachedVisibleSize === 'undefined';\n\t}\n\n\tsetVisible(visible: boolean, size?: number): void {\n\t\tif (visible === this.visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (visible) {\n\t\t\tthis.size = clamp(this._cachedVisibleSize!, this.viewMinimumSize, this.viewMaximumSize);\n\t\t\tthis._cachedVisibleSize = undefined;\n\t\t} else {\n\t\t\tthis._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n\t\t\tthis.size = 0;\n\t\t}\n\n\t\tthis.container.classList.toggle('visible', visible);\n\n\t\ttry {\n\t\t\tthis.view.setVisible?.(visible);\n\t\t} catch (e) {\n\t\t\tconsole.error('Splitview: Failed to set visible view');\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n\n\tget minimumSize(): number { return this.visible ? this.view.minimumSize : 0; }\n\tget viewMinimumSize(): number { return this.view.minimumSize; }\n\n\tget maximumSize(): number { return this.visible ? this.view.maximumSize : 0; }\n\tget viewMaximumSize(): number { return this.view.maximumSize; }\n\n\tget priority(): LayoutPriority | undefined { return this.view.priority; }\n\tget proportionalLayout(): boolean { return this.view.proportionalLayout ?? true; }\n\tget snap(): boolean { return !!this.view.snap; }\n\n\tset enabled(enabled: boolean) {\n\t\tthis.container.style.pointerEvents = enabled ? '' : 'none';\n\t}\n\n\tconstructor(\n\t\tprotected container: HTMLElement,\n\t\treadonly view: TView,\n\t\tsize: ViewItemSize,\n\t\tprivate disposable: IDisposable\n\t) {\n\t\tif (typeof size === 'number') {\n\t\t\tthis._size = size;\n\t\t\tthis._cachedVisibleSize = undefined;\n\t\t\tcontainer.classList.add('visible');\n\t\t} else {\n\t\t\tthis._size = 0;\n\t\t\tthis._cachedVisibleSize = size.cachedVisibleSize;\n\t\t}\n\t}\n\n\tlayout(offset: number, layoutContext: TLayoutContext | undefined): void {\n\t\tthis.layoutContainer(offset);\n\n\t\ttry {\n\t\t\tthis.view.layout(this.size, offset, layoutContext);\n\t\t} catch (e) {\n\t\t\tconsole.error('Splitview: Failed to layout view');\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n\n\tabstract layoutContainer(offset: number): void;\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t}\n}\n\nclass VerticalViewItem<TLayoutContext, TView extends IView<TLayoutContext>> extends ViewItem<TLayoutContext, TView> {\n\n\tlayoutContainer(offset: number): void {\n\t\tthis.container.style.top = `${offset}px`;\n\t\tthis.container.style.height = `${this.size}px`;\n\t}\n}\n\nclass HorizontalViewItem<TLayoutContext, TView extends IView<TLayoutContext>> extends ViewItem<TLayoutContext, TView> {\n\n\tlayoutContainer(offset: number): void {\n\t\tthis.container.style.left = `${offset}px`;\n\t\tthis.container.style.width = `${this.size}px`;\n\t}\n}\n\ninterface ISashItem {\n\tsash: Sash;\n\tdisposable: IDisposable;\n}\n\ninterface ISashDragSnapState {\n\treadonly index: number;\n\treadonly limitDelta: number;\n\treadonly size: number;\n}\n\ninterface ISashDragState {\n\tindex: number;\n\tstart: number;\n\tcurrent: number;\n\tsizes: number[];\n\tminDelta: number;\n\tmaxDelta: number;\n\talt: boolean;\n\tsnapBefore: ISashDragSnapState | undefined;\n\tsnapAfter: ISashDragSnapState | undefined;\n\tdisposable: IDisposable;\n}\n\nenum State {\n\tIdle,\n\tBusy\n}\n\n/**\n * When adding or removing views, uniformly distribute the entire split view space among\n * all views.\n */\nexport type DistributeSizing = { type: 'distribute' };\n\n/**\n * When adding a view, make space for it by reducing the size of another view,\n * indexed by the provided `index`.\n */\nexport type SplitSizing = { type: 'split'; index: number };\n\n/**\n * When adding a view, use DistributeSizing when all pre-existing views are\n * distributed evenly, otherwise use SplitSizing.\n */\nexport type AutoSizing = { type: 'auto'; index: number };\n\n/**\n * When adding or removing views, assume the view is invisible.\n */\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\n\n/**\n * When adding or removing views, the sizing provides fine grained\n * control over how other views get resized.\n */\nexport type Sizing = DistributeSizing | SplitSizing | AutoSizing | InvisibleSizing;\n\nexport namespace Sizing {\n\n\t/**\n\t * When adding or removing views, distribute the delta space among\n\t * all other views.\n\t */\n\texport const Distribute: DistributeSizing = { type: 'distribute' };\n\n\t/**\n\t * When adding or removing views, split the delta space with another\n\t * specific view, indexed by the provided `index`.\n\t */\n\texport function Split(index: number): SplitSizing { return { type: 'split', index }; }\n\n\t/**\n\t * When adding a view, use DistributeSizing when all pre-existing views are\n\t * distributed evenly, otherwise use SplitSizing.\n\t */\n\texport function Auto(index: number): AutoSizing { return { type: 'auto', index }; }\n\n\t/**\n\t * When adding or removing views, assume the view is invisible.\n\t */\n\texport function Invisible(cachedVisibleSize: number): InvisibleSizing { return { type: 'invisible', cachedVisibleSize }; }\n}\n\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\nexport class SplitView<TLayoutContext = undefined, TView extends IView<TLayoutContext> = IView<TLayoutContext>> extends Disposable {\n\n\t/**\n\t * This {@link SplitView}'s orientation.\n\t */\n\treadonly orientation: Orientation;\n\n\t/**\n\t * The DOM element representing this {@link SplitView}.\n\t */\n\treadonly el: HTMLElement;\n\n\tprivate sashContainer: HTMLElement;\n\tprivate viewContainer: HTMLElement;\n\tprivate scrollable: Scrollable;\n\tprivate scrollableElement: SmoothScrollableElement;\n\tprivate size = 0;\n\tprivate layoutContext: TLayoutContext | undefined;\n\tprivate _contentSize = 0;\n\tprivate proportions: (number | undefined)[] | undefined = undefined;\n\tprivate viewItems: ViewItem<TLayoutContext, TView>[] = [];\n\tsashItems: ISashItem[] = []; // used in tests\n\tprivate sashDragState: ISashDragState | undefined;\n\tprivate state: State = State.Idle;\n\tprivate inverseAltBehavior: boolean;\n\tprivate proportionalLayout: boolean;\n\tprivate readonly getSashOrthogonalSize: { (): number } | undefined;\n\n\tprivate _onDidSashChange = this._register(new Emitter<number>());\n\tprivate _onDidSashReset = this._register(new Emitter<number>());\n\tprivate _orthogonalStartSash: Sash | undefined;\n\tprivate _orthogonalEndSash: Sash | undefined;\n\tprivate _startSnappingEnabled = true;\n\tprivate _endSnappingEnabled = true;\n\n\t/**\n\t * The sum of all views' sizes.\n\t */\n\tget contentSize(): number { return this._contentSize; }\n\n\t/**\n\t * Fires whenever the user resizes a {@link Sash sash}.\n\t */\n\treadonly onDidSashChange = this._onDidSashChange.event;\n\n\t/**\n\t * Fires whenever the user double clicks a {@link Sash sash}.\n\t */\n\treadonly onDidSashReset = this._onDidSashReset.event;\n\n\t/**\n\t * Fires whenever the split view is scrolled.\n\t */\n\treadonly onDidScroll: Event<ScrollEvent>;\n\n\t/**\n\t * The amount of views in this {@link SplitView}.\n\t */\n\tget length(): number {\n\t\treturn this.viewItems.length;\n\t}\n\n\t/**\n\t * The minimum size of this {@link SplitView}.\n\t */\n\tget minimumSize(): number {\n\t\treturn this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n\t}\n\n\t/**\n\t * The maximum size of this {@link SplitView}.\n\t */\n\tget maximumSize(): number {\n\t\treturn this.length === 0 ? Number.POSITIVE_INFINITY : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n\t}\n\n\tget orthogonalStartSash(): Sash | undefined { return this._orthogonalStartSash; }\n\tget orthogonalEndSash(): Sash | undefined { return this._orthogonalEndSash; }\n\tget startSnappingEnabled(): boolean { return this._startSnappingEnabled; }\n\tget endSnappingEnabled(): boolean { return this._endSnappingEnabled; }\n\n\t/**\n\t * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n\t * located at the left- or top-most side of the SplitView.\n\t * Corner sashes will be created automatically at the intersections.\n\t */\n\tset orthogonalStartSash(sash: Sash | undefined) {\n\t\tfor (const sashItem of this.sashItems) {\n\t\t\tsashItem.sash.orthogonalStartSash = sash;\n\t\t}\n\n\t\tthis._orthogonalStartSash = sash;\n\t}\n\n\t/**\n\t * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n\t * located at the right- or bottom-most side of the SplitView.\n\t * Corner sashes will be created automatically at the intersections.\n\t */\n\tset orthogonalEndSash(sash: Sash | undefined) {\n\t\tfor (const sashItem of this.sashItems) {\n\t\t\tsashItem.sash.orthogonalEndSash = sash;\n\t\t}\n\n\t\tthis._orthogonalEndSash = sash;\n\t}\n\n\t/**\n\t * The internal sashes within this {@link SplitView}.\n\t */\n\tget sashes(): readonly Sash[] {\n\t\treturn this.sashItems.map(s => s.sash);\n\t}\n\n\t/**\n\t * Enable/disable snapping at the beginning of this {@link SplitView}.\n\t */\n\tset startSnappingEnabled(startSnappingEnabled: boolean) {\n\t\tif (this._startSnappingEnabled === startSnappingEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._startSnappingEnabled = startSnappingEnabled;\n\t\tthis.updateSashEnablement();\n\t}\n\n\t/**\n\t * Enable/disable snapping at the end of this {@link SplitView}.\n\t */\n\tset endSnappingEnabled(endSnappingEnabled: boolean) {\n\t\tif (this._endSnappingEnabled === endSnappingEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._endSnappingEnabled = endSnappingEnabled;\n\t\tthis.updateSashEnablement();\n\t}\n\n\t/**\n\t * Create a new {@link SplitView} instance.\n\t */\n\tconstructor(container: HTMLElement, options: ISplitViewOptions<TLayoutContext, TView> = {}) {\n\t\tsuper();\n\n\t\tthis.orientation = options.orientation ?? Orientation.VERTICAL;\n\t\tthis.inverseAltBehavior = options.inverseAltBehavior ?? false;\n\t\tthis.proportionalLayout = options.proportionalLayout ?? true;\n\t\tthis.getSashOrthogonalSize = options.getSashOrthogonalSize;\n\n\t\tthis.el = document.createElement('div');\n\t\tthis.el.classList.add('monaco-split-view2');\n\t\tthis.el.classList.add(this.orientation === Orientation.VERTICAL ? 'vertical' : 'horizontal');\n\t\tcontainer.appendChild(this.el);\n\n\t\tthis.sashContainer = append(this.el, $('.sash-container'));\n\t\tthis.viewContainer = $('.split-view-container');\n\n\t\tthis.scrollable = this._register(new Scrollable({\n\t\t\tforceIntegerValues: true,\n\t\t\tsmoothScrollDuration: 125,\n\t\t\tscheduleAtNextAnimationFrame: callback => scheduleAtNextAnimationFrame(getWindow(this.el), callback),\n\t\t}));\n\t\tthis.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n\t\t\tvertical: this.orientation === Orientation.VERTICAL ? (options.scrollbarVisibility ?? ScrollbarVisibility.Auto) : ScrollbarVisibility.Hidden,\n\t\t\thorizontal: this.orientation === Orientation.HORIZONTAL ? (options.scrollbarVisibility ?? ScrollbarVisibility.Auto) : ScrollbarVisibility.Hidden\n\t\t}, this.scrollable));\n\n\t\t// https://github.com/microsoft/vscode/issues/157737\n\t\tconst onDidScrollViewContainer = this._register(new DomEmitter(this.viewContainer, 'scroll')).event;\n\t\tthis._register(onDidScrollViewContainer(_ => {\n\t\t\tconst position = this.scrollableElement.getScrollPosition();\n\t\t\tconst scrollLeft = Math.abs(this.viewContainer.scrollLeft - position.scrollLeft) <= 1 ? undefined : this.viewContainer.scrollLeft;\n\t\t\tconst scrollTop = Math.abs(this.viewContainer.scrollTop - position.scrollTop) <= 1 ? undefined : this.viewContainer.scrollTop;\n\n\t\t\tif (scrollLeft !== undefined || scrollTop !== undefined) {\n\t\t\t\tthis.scrollableElement.setScrollPosition({ scrollLeft, scrollTop });\n\t\t\t}\n\t\t}));\n\n\t\tthis.onDidScroll = this.scrollableElement.onScroll;\n\t\tthis._register(this.onDidScroll(e => {\n\t\t\tif (e.scrollTopChanged) {\n\t\t\t\tthis.viewContainer.scrollTop = e.scrollTop;\n\t\t\t}\n\n\t\t\tif (e.scrollLeftChanged) {\n\t\t\t\tthis.viewContainer.scrollLeft = e.scrollLeft;\n\t\t\t}\n\t\t}));\n\n\t\tappend(this.el, this.scrollableElement.getDomNode());\n\n\t\tthis.style(options.styles || defaultStyles);\n\n\t\t// We have an existing set of view, add them now\n\t\tif (options.descriptor) {\n\t\t\tthis.size = options.descriptor.size;\n\t\t\toptions.descriptor.views.forEach((viewDescriptor, index) => {\n\t\t\t\tconst sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : { type: 'invisible', cachedVisibleSize: viewDescriptor.size } satisfies InvisibleSizing;\n\n\t\t\t\tconst view = viewDescriptor.view;\n\t\t\t\tthis.doAddView(view, sizing, index, true);\n\t\t\t});\n\n\t\t\t// Initialize content size and proportions for first layout\n\t\t\tthis._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\t\t\tthis.saveProportions();\n\t\t}\n\t}\n\n\tstyle(styles: ISplitViewStyles): void {\n\t\tif (styles.separatorBorder.isTransparent()) {\n\t\t\tthis.el.classList.remove('separator-border');\n\t\t\tthis.el.style.removeProperty('--separator-border');\n\t\t} else {\n\t\t\tthis.el.classList.add('separator-border');\n\t\t\tthis.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n\t\t}\n\t}\n\n\t/**\n\t * Add a {@link IView view} to this {@link SplitView}.\n\t *\n\t * @param view The view to add.\n\t * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n\t * @param index The index to insert the view on.\n\t * @param skipLayout Whether layout should be skipped.\n\t */\n\taddView(view: TView, size: number | Sizing, index = this.viewItems.length, skipLayout?: boolean): void {\n\t\tthis.doAddView(view, size, index, skipLayout);\n\t}\n\n\t/**\n\t * Remove a {@link IView view} from this {@link SplitView}.\n\t *\n\t * @param index The index where the {@link IView view} is located.\n\t * @param sizing Whether to distribute other {@link IView view}'s sizes.\n\t */\n\tremoveView(index: number, sizing?: Sizing): TView {\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\tthrow new Error('Index out of bounds');\n\t\t}\n\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tthis.state = State.Busy;\n\n\t\ttry {\n\t\t\tif (sizing?.type === 'auto') {\n\t\t\t\tif (this.areViewsDistributed()) {\n\t\t\t\t\tsizing = { type: 'distribute' };\n\t\t\t\t} else {\n\t\t\t\t\tsizing = { type: 'split', index: sizing.index };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Save referene view, in case of `split` sizing\n\t\t\tconst referenceViewItem = sizing?.type === 'split' ? this.viewItems[sizing.index] : undefined;\n\n\t\t\t// Remove view\n\t\t\tconst viewItemToRemove = this.viewItems.splice(index, 1)[0];\n\n\t\t\t// Resize reference view, in case of `split` sizing\n\t\t\tif (referenceViewItem) {\n\t\t\t\treferenceViewItem.size += viewItemToRemove.size;\n\t\t\t}\n\n\t\t\t// Remove sash\n\t\t\tif (this.viewItems.length >= 1) {\n\t\t\t\tconst sashIndex = Math.max(index - 1, 0);\n\t\t\t\tconst sashItem = this.sashItems.splice(sashIndex, 1)[0];\n\t\t\t\tsashItem.disposable.dispose();\n\t\t\t}\n\n\t\t\tthis.relayout();\n\n\t\t\tif (sizing?.type === 'distribute') {\n\t\t\t\tthis.distributeViewSizes();\n\t\t\t}\n\n\t\t\tconst result = viewItemToRemove.view;\n\t\t\tviewItemToRemove.dispose();\n\t\t\treturn result;\n\n\t\t} finally {\n\t\t\tthis.state = State.Idle;\n\t\t}\n\t}\n\n\tremoveAllViews(): TView[] {\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tthis.state = State.Busy;\n\n\t\ttry {\n\t\t\tconst viewItems = this.viewItems.splice(0, this.viewItems.length);\n\n\t\t\tfor (const viewItem of viewItems) {\n\t\t\t\tviewItem.dispose();\n\t\t\t}\n\n\t\t\tconst sashItems = this.sashItems.splice(0, this.sashItems.length);\n\n\t\t\tfor (const sashItem of sashItems) {\n\t\t\t\tsashItem.disposable.dispose();\n\t\t\t}\n\n\t\t\tthis.relayout();\n\t\t\treturn viewItems.map(i => i.view);\n\n\t\t} finally {\n\t\t\tthis.state = State.Idle;\n\t\t}\n\t}\n\n\t/**\n\t * Move a {@link IView view} to a different index.\n\t *\n\t * @param from The source index.\n\t * @param to The target index.\n\t */\n\tmoveView(from: number, to: number): void {\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tconst cachedVisibleSize = this.getViewCachedVisibleSize(from);\n\t\tconst sizing = typeof cachedVisibleSize === 'undefined' ? this.getViewSize(from) : Sizing.Invisible(cachedVisibleSize);\n\t\tconst view = this.removeView(from);\n\t\tthis.addView(view, sizing, to);\n\t}\n\n\n\t/**\n\t * Swap two {@link IView views}.\n\t *\n\t * @param from The source index.\n\t * @param to The target index.\n\t */\n\tswapViews(from: number, to: number): void {\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tif (from > to) {\n\t\t\treturn this.swapViews(to, from);\n\t\t}\n\n\t\tconst fromSize = this.getViewSize(from);\n\t\tconst toSize = this.getViewSize(to);\n\t\tconst toView = this.removeView(to);\n\t\tconst fromView = this.removeView(from);\n\n\t\tthis.addView(toView, fromSize, from);\n\t\tthis.addView(fromView, toSize, to);\n\t}\n\n\t/**\n\t * Returns whether the {@link IView view} is visible.\n\t *\n\t * @param index The {@link IView view} index.\n\t */\n\tisViewVisible(index: number): boolean {\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\tthrow new Error('Index out of bounds');\n\t\t}\n\n\t\tconst viewItem = this.viewItems[index];\n\t\treturn viewItem.visible;\n\t}\n\n\t/**\n\t * Set a {@link IView view}'s visibility.\n\t *\n\t * @param index The {@link IView view} index.\n\t * @param visible Whether the {@link IView view} should be visible.\n\t */\n\tsetViewVisible(index: number, visible: boolean): void {\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\tthrow new Error('Index out of bounds');\n\t\t}\n\n\t\tconst viewItem = this.viewItems[index];\n\t\tviewItem.setVisible(visible);\n\n\t\tthis.distributeEmptySpace(index);\n\t\tthis.layoutViews();\n\t\tthis.saveProportions();\n\t}\n\n\t/**\n\t * Returns the {@link IView view}'s size previously to being hidden.\n\t *\n\t * @param index The {@link IView view} index.\n\t */\n\tgetViewCachedVisibleSize(index: number): number | undefined {\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\tthrow new Error('Index out of bounds');\n\t\t}\n\n\t\tconst viewItem = this.viewItems[index];\n\t\treturn viewItem.cachedVisibleSize;\n\t}\n\n\t/**\n\t * Layout the {@link SplitView}.\n\t *\n\t * @param size The entire size of the {@link SplitView}.\n\t * @param layoutContext An optional layout context to pass along to {@link IView views}.\n\t */\n\tlayout(size: number, layoutContext?: TLayoutContext): void {\n\t\tconst previousSize = Math.max(this.size, this._contentSize);\n\t\tthis.size = size;\n\t\tthis.layoutContext = layoutContext;\n\n\t\tif (!this.proportions) {\n\t\t\tconst indexes = range(this.viewItems.length);\n\t\t\tconst lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low);\n\t\t\tconst highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n\n\t\t\tthis.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n\t\t} else {\n\t\t\tlet total = 0;\n\n\t\t\tfor (let i = 0; i < this.viewItems.length; i++) {\n\t\t\t\tconst item = this.viewItems[i];\n\t\t\t\tconst proportion = this.proportions[i];\n\n\t\t\t\tif (typeof proportion === 'number') {\n\t\t\t\t\ttotal += proportion;\n\t\t\t\t} else {\n\t\t\t\t\tsize -= item.size;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < this.viewItems.length; i++) {\n\t\t\t\tconst item = this.viewItems[i];\n\t\t\t\tconst proportion = this.proportions[i];\n\n\t\t\t\tif (typeof proportion === 'number' && total > 0) {\n\t\t\t\t\titem.size = clamp(Math.round(proportion * size / total), item.minimumSize, item.maximumSize);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.distributeEmptySpace();\n\t\tthis.layoutViews();\n\t}\n\n\tprivate saveProportions(): void {\n\t\tif (this.proportionalLayout && this._contentSize > 0) {\n\t\t\tthis.proportions = this.viewItems.map(v => v.proportionalLayout && v.visible ? v.size / this._contentSize : undefined);\n\t\t}\n\t}\n\n\tprivate onSashStart({ sash, start, alt }: ISashEvent): void {\n\t\tfor (const item of this.viewItems) {\n\t\t\titem.enabled = false;\n\t\t}\n\n\t\tconst index = this.sashItems.findIndex(item => item.sash === sash);\n\n\t\t// This way, we can press Alt while we resize a sash, macOS style!\n\t\tconst disposable = combinedDisposable(\n\t\t\taddDisposableListener(this.el.ownerDocument.body, 'keydown', e => resetSashDragState(this.sashDragState!.current, e.altKey)),\n\t\t\taddDisposableListener(this.el.ownerDocument.body, 'keyup', () => resetSashDragState(this.sashDragState!.current, false))\n\t\t);\n\n\t\tconst resetSashDragState = (start: number, alt: boolean) => {\n\t\t\tconst sizes = this.viewItems.map(i => i.size);\n\t\t\tlet minDelta = Number.NEGATIVE_INFINITY;\n\t\t\tlet maxDelta = Number.POSITIVE_INFINITY;\n\n\t\t\tif (this.inverseAltBehavior) {\n\t\t\t\talt = !alt;\n\t\t\t}\n\n\t\t\tif (alt) {\n\t\t\t\t// When we're using the last sash with Alt, we're resizing\n\t\t\t\t// the view to the left/up, instead of right/down as usual\n\t\t\t\t// Thus, we must do the inverse of the usual\n\t\t\t\tconst isLastSash = index === this.sashItems.length - 1;\n\n\t\t\t\tif (isLastSash) {\n\t\t\t\t\tconst viewItem = this.viewItems[index];\n\t\t\t\t\tminDelta = (viewItem.minimumSize - viewItem.size) / 2;\n\t\t\t\t\tmaxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n\t\t\t\t} else {\n\t\t\t\t\tconst viewItem = this.viewItems[index + 1];\n\t\t\t\t\tminDelta = (viewItem.size - viewItem.maximumSize) / 2;\n\t\t\t\t\tmaxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet snapBefore: ISashDragSnapState | undefined;\n\t\t\tlet snapAfter: ISashDragSnapState | undefined;\n\n\t\t\tif (!alt) {\n\t\t\t\tconst upIndexes = range(index, -1);\n\t\t\t\tconst downIndexes = range(index + 1, this.viewItems.length);\n\t\t\t\tconst minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n\t\t\t\tconst maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n\t\t\t\tconst maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n\t\t\t\tconst minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n\t\t\t\tconst minDelta = Math.max(minDeltaUp, minDeltaDown);\n\t\t\t\tconst maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n\t\t\t\tconst snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n\t\t\t\tconst snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n\t\t\t\tif (typeof snapBeforeIndex === 'number') {\n\t\t\t\t\tconst viewItem = this.viewItems[snapBeforeIndex];\n\t\t\t\t\tconst halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n\n\t\t\t\t\tsnapBefore = {\n\t\t\t\t\t\tindex: snapBeforeIndex,\n\t\t\t\t\t\tlimitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n\t\t\t\t\t\tsize: viewItem.size\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (typeof snapAfterIndex === 'number') {\n\t\t\t\t\tconst viewItem = this.viewItems[snapAfterIndex];\n\t\t\t\t\tconst halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n\n\t\t\t\t\tsnapAfter = {\n\t\t\t\t\t\tindex: snapAfterIndex,\n\t\t\t\t\t\tlimitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n\t\t\t\t\t\tsize: viewItem.size\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.sashDragState = { start, current: start, index, sizes, minDelta, maxDelta, alt, snapBefore, snapAfter, disposable };\n\t\t};\n\n\t\tresetSashDragState(start, alt);\n\t}\n\n\tprivate onSashChange({ current }: ISashEvent): void {\n\t\tconst { index, start, sizes, alt, minDelta, maxDelta, snapBefore, snapAfter } = this.sashDragState!;\n\t\tthis.sashDragState!.current = current;\n\n\t\tconst delta = current - start;\n\t\tconst newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n\n\t\tif (alt) {\n\t\t\tconst isLastSash = index === this.sashItems.length - 1;\n\t\t\tconst newSizes = this.viewItems.map(i => i.size);\n\t\t\tconst viewItemIndex = isLastSash ? index : index + 1;\n\t\t\tconst viewItem = this.viewItems[viewItemIndex];\n\t\t\tconst newMinDelta = viewItem.size - viewItem.maximumSize;\n\t\t\tconst newMaxDelta = viewItem.size - viewItem.minimumSize;\n\t\t\tconst resizeIndex = isLastSash ? index - 1 : index + 1;\n\n\t\t\tthis.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n\t\t}\n\n\t\tthis.distributeEmptySpace();\n\t\tthis.layoutViews();\n\t}\n\n\tprivate onSashEnd(index: number): void {\n\t\tthis._onDidSashChange.fire(index);\n\t\tthis.sashDragState!.disposable.dispose();\n\t\tthis.saveProportions();\n\n\t\tfor (const item of this.viewItems) {\n\t\t\titem.enabled = true;\n\t\t}\n\t}\n\n\tprivate onViewChange(item: ViewItem<TLayoutContext, TView>, size: number | undefined): void {\n\t\tconst index = this.viewItems.indexOf(item);\n\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tsize = typeof size === 'number' ? size : item.size;\n\t\tsize = clamp(size, item.minimumSize, item.maximumSize);\n\n\t\tif (this.inverseAltBehavior && index > 0) {\n\t\t\t// In this case, we want the view to grow or shrink both sides equally\n\t\t\t// so we just resize the \"left\" side by half and let `resize` do the clamping magic\n\t\t\tthis.resize(index - 1, Math.floor((item.size - size) / 2));\n\t\t\tthis.distributeEmptySpace();\n\t\t\tthis.layoutViews();\n\t\t} else {\n\t\t\titem.size = size;\n\t\t\tthis.relayout([index], undefined);\n\t\t}\n\t}\n\n\t/**\n\t * Resize a {@link IView view} within the {@link SplitView}.\n\t *\n\t * @param index The {@link IView view} index.\n\t * @param size The {@link IView view} size.\n\t */\n\tresizeView(index: number, size: number): void {\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tthis.state = State.Busy;\n\n\t\ttry {\n\t\t\tconst indexes = range(this.viewItems.length).filter(i => i !== index);\n\t\t\tconst lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low), index];\n\t\t\tconst highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n\n\t\t\tconst item = this.viewItems[index];\n\t\t\tsize = Math.round(size);\n\t\t\tsize = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n\n\t\t\titem.size = size;\n\t\t\tthis.relayout(lowPriorityIndexes, highPriorityIndexes);\n\t\t} finally {\n\t\t\tthis.state = State.Idle;\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether all other {@link IView views} are at their minimum size.\n\t */\n\tisViewExpanded(index: number): boolean {\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const item of this.viewItems) {\n\t\t\tif (item !== this.viewItems[index] && item.size > item.minimumSize) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Distribute the entire {@link SplitView} size among all {@link IView views}.\n\t */\n\tdistributeViewSizes(): void {\n\t\tconst flexibleViewItems: ViewItem<TLayoutContext, TView>[] = [];\n\t\tlet flexibleSize = 0;\n\n\t\tfor (const item of this.viewItems) {\n\t\t\tif (item.maximumSize - item.minimumSize > 0) {\n\t\t\t\tflexibleViewItems.push(item);\n\t\t\t\tflexibleSize += item.size;\n\t\t\t}\n\t\t}\n\n\t\tconst size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n\t\tfor (const item of flexibleViewItems) {\n\t\t\titem.size = clamp(size, item.minimumSize, item.maximumSize);\n\t\t}\n\n\t\tconst indexes = range(this.viewItems.length);\n\t\tconst lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low);\n\t\tconst highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n\n\t\tthis.relayout(lowPriorityIndexes, highPriorityIndexes);\n\t}\n\n\t/**\n\t * Returns the size of a {@link IView view}.\n\t */\n\tgetViewSize(index: number): number {\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn this.viewItems[index].size;\n\t}\n\n\tprivate doAddView(view: TView, size: number | Sizing, index = this.viewItems.length, skipLayout?: boolean): void {\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tthis.state = State.Busy;\n\n\t\ttry {\n\t\t\t// Add view\n\t\t\tconst container = $('.split-view-view');\n\n\t\t\tif (index === this.viewItems.length) {\n\t\t\t\tthis.viewContainer.appendChild(container);\n\t\t\t} else {\n\t\t\t\tthis.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n\t\t\t}\n\n\t\t\tconst onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n\t\t\tconst containerDisposable = toDisposable(() => container.remove());\n\t\t\tconst disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n\n\t\t\tlet viewSize: ViewItemSize;\n\n\t\t\tif (typeof size === 'number') {\n\t\t\t\tviewSize = size;\n\t\t\t} else {\n\t\t\t\tif (size.type === 'auto') {\n\t\t\t\t\tif (this.areViewsDistributed()) {\n\t\t\t\t\t\tsize = { type: 'distribute' };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsize = { type: 'split', index: size.index };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (size.type === 'split') {\n\t\t\t\t\tviewSize = this.getViewSize(size.index) / 2;\n\t\t\t\t} else if (size.type === 'invisible') {\n\t\t\t\t\tviewSize = { cachedVisibleSize: size.cachedVisibleSize };\n\t\t\t\t} else {\n\t\t\t\t\tviewSize = view.minimumSize;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst item = this.orientation === Orientation.VERTICAL\n\t\t\t\t? new VerticalViewItem(container, view, viewSize, disposable)\n\t\t\t\t: new HorizontalViewItem(container, view, viewSize, disposable);\n\n\t\t\tthis.viewItems.splice(index, 0, item);\n\n\t\t\t// Add sash\n\t\t\tif (this.viewItems.length > 1) {\n\t\t\t\tconst opts = { orthogonalStartSash: this.orthogonalStartSash, orthogonalEndSash: this.orthogonalEndSash };\n\n\t\t\t\tconst sash = this.orientation === Orientation.VERTICAL\n\t\t\t\t\t? new Sash(this.sashContainer, { getHorizontalSashTop: s => this.getSashPosition(s), getHorizontalSashWidth: this.getSashOrthogonalSize }, { ...opts, orientation: Orientation.HORIZONTAL })\n\t\t\t\t\t: new Sash(this.sashContainer, { getVerticalSashLeft: s => this.getSashPosition(s), getVerticalSashHeight: this.getSashOrthogonalSize }, { ...opts, orientation: Orientation.VERTICAL });\n\n\t\t\t\tconst sashEventMapper = this.orientation === Orientation.VERTICAL\n\t\t\t\t\t? (e: IBaseSashEvent) => ({ sash, start: e.startY, current: e.currentY, alt: e.altKey })\n\t\t\t\t\t: (e: IBaseSashEvent) => ({ sash, start: e.startX, current: e.currentX, alt: e.altKey });\n\n\t\t\t\tconst onStart = Event.map(sash.onDidStart, sashEventMapper);\n\t\t\t\tconst onStartDisposable = onStart(this.onSashStart, this);\n\t\t\t\tconst onChange = Event.map(sash.onDidChange, sashEventMapper);\n\t\t\t\tconst onChangeDisposable = onChange(this.onSashChange, this);\n\t\t\t\tconst onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n\t\t\t\tconst onEndDisposable = onEnd(this.onSashEnd, this);\n\n\t\t\t\tconst onDidResetDisposable = sash.onDidReset(() => {\n\t\t\t\t\tconst index = this.sashItems.findIndex(item => item.sash === sash);\n\t\t\t\t\tconst upIndexes = range(index, -1);\n\t\t\t\t\tconst downIndexes = range(index + 1, this.viewItems.length);\n\t\t\t\t\tconst snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n\t\t\t\t\tconst snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n\t\t\t\t\tif (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._onDidSashReset.fire(index);\n\t\t\t\t});\n\n\t\t\t\tconst disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n\t\t\t\tconst sashItem: ISashItem = { sash, disposable };\n\n\t\t\t\tthis.sashItems.splice(index - 1, 0, sashItem);\n\t\t\t}\n\n\t\t\tcontainer.appendChild(view.element);\n\n\t\t\tlet highPriorityIndexes: number[] | undefined;\n\n\t\t\tif (typeof size !== 'number' && size.type === 'split') {\n\t\t\t\thighPriorityIndexes = [size.index];\n\t\t\t}\n\n\t\t\tif (!skipLayout) {\n\t\t\t\tthis.relayout([index], highPriorityIndexes);\n\t\t\t}\n\n\n\t\t\tif (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n\t\t\t\tthis.distributeViewSizes();\n\t\t\t}\n\n\t\t} finally {\n\t\t\tthis.state = State.Idle;\n\t\t}\n\t}\n\n\tprivate relayout(lowPriorityIndexes?: number[], highPriorityIndexes?: number[]): void {\n\t\tconst contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n\t\tthis.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n\t\tthis.distributeEmptySpace();\n\t\tthis.layoutViews();\n\t\tthis.saveProportions();\n\t}\n\n\tprivate resize(\n\t\tindex: number,\n\t\tdelta: number,\n\t\tsizes = this.viewItems.map(i => i.size),\n\t\tlowPriorityIndexes?: number[],\n\t\thighPriorityIndexes?: number[],\n\t\toverloadMinDelta: number = Number.NEGATIVE_INFINITY,\n\t\toverloadMaxDelta: number = Number.POSITIVE_INFINITY,\n\t\tsnapBefore?: ISashDragSnapState,\n\t\tsnapAfter?: ISashDragSnapState\n\t): number {\n\t\tif (index < 0 || index >= this.viewItems.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst upIndexes = range(index, -1);\n\t\tconst downIndexes = range(index + 1, this.viewItems.length);\n\n\t\tif (highPriorityIndexes) {\n\t\t\tfor (const index of highPriorityIndexes) {\n\t\t\t\tpushToStart(upIndexes, index);\n\t\t\t\tpushToStart(downIndexes, index);\n\t\t\t}\n\t\t}\n\n\t\tif (lowPriorityIndexes) {\n\t\t\tfor (const index of lowPriorityIndexes) {\n\t\t\t\tpushToEnd(upIndexes, index);\n\t\t\t\tpushToEnd(downIndexes, index);\n\t\t\t}\n\t\t}\n\n\t\tconst upItems = upIndexes.map(i => this.viewItems[i]);\n\t\tconst upSizes = upIndexes.map(i => sizes[i]);\n\n\t\tconst downItems = downIndexes.map(i => this.viewItems[i]);\n\t\tconst downSizes = downIndexes.map(i => sizes[i]);\n\n\t\tconst minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n\t\tconst maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n\t\tconst maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n\t\tconst minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n\t\tconst minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n\t\tconst maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n\n\t\tlet snapped = false;\n\n\t\tif (snapBefore) {\n\t\t\tconst snapView = this.viewItems[snapBefore.index];\n\t\t\tconst visible = delta >= snapBefore.limitDelta;\n\t\t\tsnapped = visible !== snapView.visible;\n\t\t\tsnapView.setVisible(visible, snapBefore.size);\n\t\t}\n\n\t\tif (!snapped && snapAfter) {\n\t\t\tconst snapView = this.viewItems[snapAfter.index];\n\t\t\tconst visible = delta < snapAfter.limitDelta;\n\t\t\tsnapped = visible !== snapView.visible;\n\t\t\tsnapView.setVisible(visible, snapAfter.size);\n\t\t}\n\n\t\tif (snapped) {\n\t\t\treturn this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n\t\t}\n\n\t\tdelta = clamp(delta, minDelta, maxDelta);\n\n\t\tfor (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n\t\t\tconst item = upItems[i];\n\t\t\tconst size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n\t\t\tconst viewDelta = size - upSizes[i];\n\n\t\t\tdeltaUp -= viewDelta;\n\t\t\titem.size = size;\n\t\t}\n\n\t\tfor (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n\t\t\tconst item = downItems[i];\n\t\t\tconst size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n\t\t\tconst viewDelta = size - downSizes[i];\n\n\t\t\tdeltaDown += viewDelta;\n\t\t\titem.size = size;\n\t\t}\n\n\t\treturn delta;\n\t}\n\n\tprivate distributeEmptySpace(lowPriorityIndex?: number): void {\n\t\tconst contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\t\tlet emptyDelta = this.size - contentSize;\n\n\t\tconst indexes = range(this.viewItems.length - 1, -1);\n\t\tconst lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.Low);\n\t\tconst highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === LayoutPriority.High);\n\n\t\tfor (const index of highPriorityIndexes) {\n\t\t\tpushToStart(indexes, index);\n\t\t}\n\n\t\tfor (const index of lowPriorityIndexes) {\n\t\t\tpushToEnd(indexes, index);\n\t\t}\n\n\t\tif (typeof lowPriorityIndex === 'number') {\n\t\t\tpushToEnd(indexes, lowPriorityIndex);\n\t\t}\n\n\t\tfor (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n\t\t\tconst item = this.viewItems[indexes[i]];\n\t\t\tconst size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n\t\t\tconst viewDelta = size - item.size;\n\n\t\t\temptyDelta -= viewDelta;\n\t\t\titem.size = size;\n\t\t}\n\t}\n\n\tprivate layoutViews(): void {\n\t\t// Save new content size\n\t\tthis._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n\t\t// Layout views\n\t\tlet offset = 0;\n\n\t\tfor (const viewItem of this.viewItems) {\n\t\t\tviewItem.layout(offset, this.layoutContext);\n\t\t\toffset += viewItem.size;\n\t\t}\n\n\t\t// Layout sashes\n\t\tthis.sashItems.forEach(item => item.sash.layout());\n\t\tthis.updateSashEnablement();\n\t\tthis.updateScrollableElement();\n\t}\n\n\tprivate updateScrollableElement(): void {\n\t\tif (this.orientation === Orientation.VERTICAL) {\n\t\t\tthis.scrollableElement.setScrollDimensions({\n\t\t\t\theight: this.size,\n\t\t\t\tscrollHeight: this._contentSize\n\t\t\t});\n\t\t} else {\n\t\t\tthis.scrollableElement.setScrollDimensions({\n\t\t\t\twidth: this.size,\n\t\t\t\tscrollWidth: this._contentSize\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateSashEnablement(): void {\n\t\tlet previous = false;\n\t\tconst collapsesDown = this.viewItems.map(i => previous = (i.size - i.minimumSize > 0) || previous);\n\n\t\tprevious = false;\n\t\tconst expandsDown = this.viewItems.map(i => previous = (i.maximumSize - i.size > 0) || previous);\n\n\t\tconst reverseViews = [...this.viewItems].reverse();\n\t\tprevious = false;\n\t\tconst collapsesUp = reverseViews.map(i => previous = (i.size - i.minimumSize > 0) || previous).reverse();\n\n\t\tprevious = false;\n\t\tconst expandsUp = reverseViews.map(i => previous = (i.maximumSize - i.size > 0) || previous).reverse();\n\n\t\tlet position = 0;\n\t\tfor (let index = 0; index < this.sashItems.length; index++) {\n\t\t\tconst { sash } = this.sashItems[index];\n\t\t\tconst viewItem = this.viewItems[index];\n\t\t\tposition += viewItem.size;\n\n\t\t\tconst min = !(collapsesDown[index] && expandsUp[index + 1]);\n\t\t\tconst max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n\t\t\tif (min && max) {\n\t\t\t\tconst upIndexes = range(index, -1);\n\t\t\t\tconst downIndexes = range(index + 1, this.viewItems.length);\n\t\t\t\tconst snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n\t\t\t\tconst snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n\t\t\t\tconst snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n\t\t\t\tconst snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n\n\t\t\t\tif (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n\t\t\t\t\tsash.state = SashState.AtMinimum;\n\t\t\t\t} else if (snappedAfter && collapsesDown[index] && (position < this._contentSize || this.endSnappingEnabled)) {\n\t\t\t\t\tsash.state = SashState.AtMaximum;\n\t\t\t\t} else {\n\t\t\t\t\tsash.state = SashState.Disabled;\n\t\t\t\t}\n\t\t\t} else if (min && !max) {\n\t\t\t\tsash.state = SashState.AtMinimum;\n\t\t\t} else if (!min && max) {\n\t\t\t\tsash.state = SashState.AtMaximum;\n\t\t\t} else {\n\t\t\t\tsash.state = SashState.Enabled;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getSashPosition(sash: Sash): number {\n\t\tlet position = 0;\n\n\t\tfor (let i = 0; i < this.sashItems.length; i++) {\n\t\t\tposition += this.viewItems[i].size;\n\n\t\t\tif (this.sashItems[i].sash === sash) {\n\t\t\t\treturn position;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tprivate findFirstSnapIndex(indexes: number[]): number | undefined {\n\t\t// visible views first\n\t\tfor (const index of indexes) {\n\t\t\tconst viewItem = this.viewItems[index];\n\n\t\t\tif (!viewItem.visible) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (viewItem.snap) {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\n\t\t// then, hidden views\n\t\tfor (const index of indexes) {\n\t\t\tconst viewItem = this.viewItems[index];\n\n\t\t\tif (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tif (!viewItem.visible && viewItem.snap) {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate areViewsDistributed() {\n\t\tlet min = undefined, max = undefined;\n\n\t\tfor (const view of this.viewItems) {\n\t\t\tmin = min === undefined ? view.size : Math.min(min, view.size);\n\t\t\tmax = max === undefined ? view.size : Math.max(max, view.size);\n\n\t\t\tif (max - min > 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.sashDragState?.disposable.dispose();\n\n\t\tdispose(this.viewItems);\n\t\tthis.viewItems = [];\n\n\t\tthis.sashItems.forEach(i => i.disposable.dispose());\n\t\tthis.sashItems = [];\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Orientation", "LayoutPriority", "State", "Sizing", "start", "alt", "minDelta", "maxDelta", "size", "onChangeDisposable", "item", "index", "disposable"]
}
