{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/highlightedlabel/highlightedLabel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../dom.js';\nimport type { IManagedHover } from '../hover/hover.js';\nimport { IHoverDelegate } from '../hover/hoverDelegate.js';\nimport { getBaseLayerHoverDelegate } from '../hover/hoverDelegate2.js';\nimport { getDefaultHoverDelegate } from '../hover/hoverDelegateFactory.js';\nimport { renderLabelWithIcons } from '../iconLabel/iconLabels.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport * as objects from '../../../common/objects.js';\n\n/**\n * A range to be highlighted.\n */\nexport interface IHighlight {\n\tstart: number;\n\tend: number;\n\treadonly extraClasses?: readonly string[];\n}\n\nexport interface IHighlightedLabelOptions {\n\n\t/**\n\t * Whether the label supports rendering icons.\n\t */\n\treadonly supportIcons?: boolean;\n\n\treadonly hoverDelegate?: IHoverDelegate;\n}\n\n/**\n * A widget which can render a label with substring highlights, often\n * originating from a filter function like the fuzzy matcher.\n */\nexport class HighlightedLabel extends Disposable {\n\n\tprivate readonly domNode: HTMLElement;\n\tprivate text: string = '';\n\tprivate title: string = '';\n\tprivate highlights: readonly IHighlight[] = [];\n\tprivate supportIcons: boolean;\n\tprivate didEverRender: boolean = false;\n\tprivate customHover: IManagedHover | undefined;\n\n\t/**\n\t * Create a new {@link HighlightedLabel}.\n\t *\n\t * @param container The parent container to append to.\n\t */\n\tconstructor(container: HTMLElement, private readonly options?: IHighlightedLabelOptions) {\n\t\tsuper();\n\n\t\tthis.supportIcons = options?.supportIcons ?? false;\n\t\tthis.domNode = dom.append(container, dom.$('span.monaco-highlighted-label'));\n\t}\n\n\t/**\n\t * The label's DOM node.\n\t */\n\tget element(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\t/**\n\t * Set the label and highlights.\n\t *\n\t * @param text The label to display.\n\t * @param highlights The ranges to highlight.\n\t * @param title An optional title for the hover tooltip.\n\t * @param escapeNewLines Whether to escape new lines.\n\t * @returns\n\t */\n\tset(text: string | undefined, highlights: readonly IHighlight[] = [], title: string = '', escapeNewLines?: boolean) {\n\t\tif (!text) {\n\t\t\ttext = '';\n\t\t}\n\n\t\tif (escapeNewLines) {\n\t\t\t// adjusts highlights inplace\n\t\t\ttext = HighlightedLabel.escapeNewLines(text, highlights);\n\t\t}\n\n\t\tif (this.didEverRender && this.text === text && this.title === title && objects.equals(this.highlights, highlights)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.text = text;\n\t\tthis.title = title;\n\t\tthis.highlights = highlights;\n\t\tthis.render();\n\t}\n\n\tprivate render(): void {\n\n\t\tconst children: Array<HTMLSpanElement | string> = [];\n\t\tlet pos = 0;\n\n\t\tfor (const highlight of this.highlights) {\n\t\t\tif (highlight.end === highlight.start) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (pos < highlight.start) {\n\t\t\t\tconst substring = this.text.substring(pos, highlight.start);\n\t\t\t\tif (this.supportIcons) {\n\t\t\t\t\tchildren.push(...renderLabelWithIcons(substring));\n\t\t\t\t} else {\n\t\t\t\t\tchildren.push(substring);\n\t\t\t\t}\n\t\t\t\tpos = highlight.start;\n\t\t\t}\n\n\t\t\tconst substring = this.text.substring(pos, highlight.end);\n\t\t\tconst element = dom.$('span.highlight', undefined, ...this.supportIcons ? renderLabelWithIcons(substring) : [substring]);\n\n\t\t\tif (highlight.extraClasses) {\n\t\t\t\telement.classList.add(...highlight.extraClasses);\n\t\t\t}\n\n\t\t\tchildren.push(element);\n\t\t\tpos = highlight.end;\n\t\t}\n\n\t\tif (pos < this.text.length) {\n\t\t\tconst substring = this.text.substring(pos,);\n\t\t\tif (this.supportIcons) {\n\t\t\t\tchildren.push(...renderLabelWithIcons(substring));\n\t\t\t} else {\n\t\t\t\tchildren.push(substring);\n\t\t\t}\n\t\t}\n\n\t\tdom.reset(this.domNode, ...children);\n\n\t\tif (this.options?.hoverDelegate?.showNativeHover) {\n\t\t\t/* While custom hover is not inside custom hover */\n\t\t\tthis.domNode.title = this.title;\n\t\t} else {\n\t\t\tif (!this.customHover && this.title !== '') {\n\t\t\t\tconst hoverDelegate = this.options?.hoverDelegate ?? getDefaultHoverDelegate('mouse');\n\t\t\t\tthis.customHover = this._register(getBaseLayerHoverDelegate().setupManagedHover(hoverDelegate, this.domNode, this.title));\n\t\t\t} else if (this.customHover) {\n\t\t\t\tthis.customHover.update(this.title);\n\t\t\t}\n\t\t}\n\n\t\tthis.didEverRender = true;\n\t}\n\n\tstatic escapeNewLines(text: string, highlights: readonly IHighlight[]): string {\n\t\tlet total = 0;\n\t\tlet extra = 0;\n\n\t\treturn text.replace(/\\r\\n|\\r|\\n/g, (match, offset) => {\n\t\t\textra = match === '\\r\\n' ? -1 : 0;\n\t\t\toffset += total;\n\n\t\t\tfor (const highlight of highlights) {\n\t\t\t\tif (highlight.end <= offset) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (highlight.start >= offset) {\n\t\t\t\t\thighlight.start += extra;\n\t\t\t\t}\n\t\t\t\tif (highlight.end >= offset) {\n\t\t\t\t\thighlight.end += extra;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttotal += extra;\n\t\t\treturn '\\u23CE';\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["substring"]
}
