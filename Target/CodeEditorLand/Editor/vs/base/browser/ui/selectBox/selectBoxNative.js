import*as n from"../../../common/arrays.js";import{Emitter as c}from"../../../common/event.js";import{KeyCode as l}from"../../../common/keyCodes.js";import{Disposable as r}from"../../../common/lifecycle.js";import{isMacintosh as a}from"../../../common/platform.js";import*as o from"../../dom.js";import{EventType as p,Gesture as h}from"../../touch.js";class S extends r{selectElement;selectBoxOptions;options;selected=0;_onDidSelect;styles;constructor(e,t,i,s){super(),this.selectBoxOptions=s||Object.create(null),this.options=[],this.selectElement=document.createElement("select"),this.selectElement.className="monaco-select-box",typeof this.selectBoxOptions.ariaLabel=="string"&&this.selectElement.setAttribute("aria-label",this.selectBoxOptions.ariaLabel),typeof this.selectBoxOptions.ariaDescription=="string"&&this.selectElement.setAttribute("aria-description",this.selectBoxOptions.ariaDescription),this._onDidSelect=this._register(new c),this.styles=i,this.registerListeners(),this.setOptions(e,t)}registerListeners(){this._register(h.addTarget(this.selectElement)),[p.Tap].forEach(e=>{this._register(o.addDisposableListener(this.selectElement,e,t=>{this.selectElement.focus()}))}),this._register(o.addStandardDisposableListener(this.selectElement,"click",e=>{o.EventHelper.stop(e,!0)})),this._register(o.addStandardDisposableListener(this.selectElement,"change",e=>{this.selectElement.title=e.target.value,this._onDidSelect.fire({index:e.target.selectedIndex,selected:e.target.value})})),this._register(o.addStandardDisposableListener(this.selectElement,"keydown",e=>{let t=!1;a?(e.keyCode===l.DownArrow||e.keyCode===l.UpArrow||e.keyCode===l.Space)&&(t=!0):(e.keyCode===l.DownArrow&&e.altKey||e.keyCode===l.Space||e.keyCode===l.Enter)&&(t=!0),t&&e.stopPropagation()}))}get onDidSelect(){return this._onDidSelect.event}setOptions(e,t){(!this.options||!n.equals(this.options,e))&&(this.options=e,this.selectElement.options.length=0,this.options.forEach((i,s)=>{this.selectElement.add(this.createOption(i.text,s,i.isDisabled))})),t!==void 0&&this.select(t)}select(e){this.options.length===0?this.selected=0:e>=0&&e<this.options.length?this.selected=e:e>this.options.length-1?this.select(this.options.length-1):this.selected<0&&(this.selected=0),this.selectElement.selectedIndex=this.selected,this.selected<this.options.length&&typeof this.options[this.selected].text=="string"?this.selectElement.title=this.options[this.selected].text:this.selectElement.title=""}setAriaLabel(e){this.selectBoxOptions.ariaLabel=e,this.selectElement.setAttribute("aria-label",e)}focus(){this.selectElement&&(this.selectElement.tabIndex=0,this.selectElement.focus())}blur(){this.selectElement&&(this.selectElement.tabIndex=-1,this.selectElement.blur())}setEnabled(e){this.selectElement.disabled=!e}setFocusable(e){this.selectElement.tabIndex=e?0:-1}render(e){e.classList.add("select-container"),e.appendChild(this.selectElement),this.setOptions(this.options,this.selected),this.applyStyles()}style(e){this.styles=e,this.applyStyles()}applyStyles(){this.selectElement&&(this.selectElement.style.backgroundColor=this.styles.selectBackground??"",this.selectElement.style.color=this.styles.selectForeground??"",this.selectElement.style.borderColor=this.styles.selectBorder??"")}createOption(e,t,i){const s=document.createElement("option");return s.value=e,s.text=e,s.disabled=!!i,s}}export{S as SelectBoxNative};
