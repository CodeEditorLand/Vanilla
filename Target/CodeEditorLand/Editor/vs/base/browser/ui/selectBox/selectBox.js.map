{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/selectBox/selectBox.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../common/event.js\";\nimport type { IDisposable } from \"../../../common/lifecycle.js\";\nimport { isMacintosh } from \"../../../common/platform.js\";\nimport type { IContentActionHandler } from \"../../formattedTextRenderer.js\";\nimport type { IContextViewProvider } from \"../contextview/contextview.js\";\nimport { type IListStyles, unthemedListStyles } from \"../list/listWidget.js\";\nimport { Widget } from \"../widget.js\";\nimport { SelectBoxList } from \"./selectBoxCustom.js\";\nimport { SelectBoxNative } from \"./selectBoxNative.js\";\nimport \"./selectBox.css\";\n\n// Public SelectBox interface - Calls routed to appropriate select implementation class\n\nexport interface ISelectBoxDelegate extends IDisposable {\n\t// Public SelectBox Interface\n\treadonly onDidSelect: Event<ISelectData>;\n\tsetOptions(options: ISelectOptionItem[], selected?: number): void;\n\tselect(index: number): void;\n\tsetAriaLabel(label: string): void;\n\tfocus(): void;\n\tblur(): void;\n\tsetFocusable(focus: boolean): void;\n\tsetEnabled(enabled: boolean): void;\n\n\t// Delegated Widget interface\n\trender(container: HTMLElement): void;\n}\n\nexport interface ISelectBoxOptions {\n\tuseCustomDrawn?: boolean;\n\tariaLabel?: string;\n\tariaDescription?: string;\n\tminBottomMargin?: number;\n\toptionsAsChildren?: boolean;\n}\n\n// Utilize optionItem interface to capture all option parameters\nexport interface ISelectOptionItem {\n\ttext: string;\n\tdetail?: string;\n\tdecoratorRight?: string;\n\tdescription?: string;\n\tdescriptionIsMarkdown?: boolean;\n\tdescriptionMarkdownActionHandler?: IContentActionHandler;\n\tisDisabled?: boolean;\n}\n\nexport interface ISelectBoxStyles extends IListStyles {\n\treadonly selectBackground: string | undefined;\n\treadonly selectListBackground: string | undefined;\n\treadonly selectForeground: string | undefined;\n\treadonly decoratorRightForeground: string | undefined;\n\treadonly selectBorder: string | undefined;\n\treadonly selectListBorder: string | undefined;\n\treadonly focusBorder: string | undefined;\n}\n\nexport const unthemedSelectBoxStyles: ISelectBoxStyles = {\n\t...unthemedListStyles,\n\tselectBackground: \"#3C3C3C\",\n\tselectForeground: \"#F0F0F0\",\n\tselectBorder: \"#3C3C3C\",\n\tdecoratorRightForeground: undefined,\n\tselectListBackground: undefined,\n\tselectListBorder: undefined,\n\tfocusBorder: undefined,\n};\n\nexport interface ISelectData {\n\tselected: string;\n\tindex: number;\n}\n\nexport class SelectBox extends Widget implements ISelectBoxDelegate {\n\tprivate selectBoxDelegate: ISelectBoxDelegate;\n\n\tconstructor(\n\t\toptions: ISelectOptionItem[],\n\t\tselected: number,\n\t\tcontextViewProvider: IContextViewProvider,\n\t\tstyles: ISelectBoxStyles,\n\t\tselectBoxOptions?: ISelectBoxOptions,\n\t) {\n\t\tsuper();\n\n\t\t// Default to native SelectBox for OSX unless overridden\n\t\tif (isMacintosh && !selectBoxOptions?.useCustomDrawn) {\n\t\t\tthis.selectBoxDelegate = new SelectBoxNative(\n\t\t\t\toptions,\n\t\t\t\tselected,\n\t\t\t\tstyles,\n\t\t\t\tselectBoxOptions,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.selectBoxDelegate = new SelectBoxList(\n\t\t\t\toptions,\n\t\t\t\tselected,\n\t\t\t\tcontextViewProvider,\n\t\t\t\tstyles,\n\t\t\t\tselectBoxOptions,\n\t\t\t);\n\t\t}\n\n\t\tthis._register(this.selectBoxDelegate);\n\t}\n\n\t// Public SelectBox Methods - routed through delegate interface\n\n\tget onDidSelect(): Event<ISelectData> {\n\t\treturn this.selectBoxDelegate.onDidSelect;\n\t}\n\n\tsetOptions(options: ISelectOptionItem[], selected?: number): void {\n\t\tthis.selectBoxDelegate.setOptions(options, selected);\n\t}\n\n\tselect(index: number): void {\n\t\tthis.selectBoxDelegate.select(index);\n\t}\n\n\tsetAriaLabel(label: string): void {\n\t\tthis.selectBoxDelegate.setAriaLabel(label);\n\t}\n\n\tfocus(): void {\n\t\tthis.selectBoxDelegate.focus();\n\t}\n\n\tblur(): void {\n\t\tthis.selectBoxDelegate.blur();\n\t}\n\n\tsetFocusable(focusable: boolean): void {\n\t\tthis.selectBoxDelegate.setFocusable(focusable);\n\t}\n\n\tsetEnabled(enabled: boolean): void {\n\t\tthis.selectBoxDelegate.setEnabled(enabled);\n\t}\n\n\trender(container: HTMLElement): void {\n\t\tthis.selectBoxDelegate.render(container);\n\t}\n}\n"],
  "mappings": ";;AAOA,SAAS,mBAAmB;AAG5B,SAA2B,0BAA0B;AACrD,SAAS,cAAc;AACvB,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,OAAO;AAgDA,MAAM,0BAA4C;AAAA,EACxD,GAAG;AAAA,EACH,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,cAAc;AAAA,EACd,0BAA0B;AAAA,EAC1B,sBAAsB;AAAA,EACtB,kBAAkB;AAAA,EAClB,aAAa;AACd;AAOO,MAAM,kBAAkB,OAAqC;AAAA,EA9EpE,OA8EoE;AAAA;AAAA;AAAA,EAC3D;AAAA,EAER,YACC,SACA,UACA,qBACA,QACA,kBACC;AACD,UAAM;AAGN,QAAI,eAAe,CAAC,kBAAkB,gBAAgB;AACrD,WAAK,oBAAoB,IAAI;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,OAAO;AACN,WAAK,oBAAoB,IAAI;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAEA,SAAK,UAAU,KAAK,iBAAiB;AAAA,EACtC;AAAA;AAAA,EAIA,IAAI,cAAkC;AACrC,WAAO,KAAK,kBAAkB;AAAA,EAC/B;AAAA,EAEA,WAAW,SAA8B,UAAyB;AACjE,SAAK,kBAAkB,WAAW,SAAS,QAAQ;AAAA,EACpD;AAAA,EAEA,OAAO,OAAqB;AAC3B,SAAK,kBAAkB,OAAO,KAAK;AAAA,EACpC;AAAA,EAEA,aAAa,OAAqB;AACjC,SAAK,kBAAkB,aAAa,KAAK;AAAA,EAC1C;AAAA,EAEA,QAAc;AACb,SAAK,kBAAkB,MAAM;AAAA,EAC9B;AAAA,EAEA,OAAa;AACZ,SAAK,kBAAkB,KAAK;AAAA,EAC7B;AAAA,EAEA,aAAa,WAA0B;AACtC,SAAK,kBAAkB,aAAa,SAAS;AAAA,EAC9C;AAAA,EAEA,WAAW,SAAwB;AAClC,SAAK,kBAAkB,WAAW,OAAO;AAAA,EAC1C;AAAA,EAEA,OAAO,WAA8B;AACpC,SAAK,kBAAkB,OAAO,SAAS;AAAA,EACxC;AACD;",
  "names": []
}
