{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/scrollbar/abstractScrollbar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../dom.js';\nimport { createFastDomNode, FastDomNode } from '../../fastDomNode.js';\nimport { GlobalPointerMoveMonitor } from '../../globalPointerMoveMonitor.js';\nimport { StandardWheelEvent } from '../../mouseEvent.js';\nimport { ScrollbarArrow, ScrollbarArrowOptions } from './scrollbarArrow.js';\nimport { ScrollbarState } from './scrollbarState.js';\nimport { ScrollbarVisibilityController } from './scrollbarVisibilityController.js';\nimport { Widget } from '../widget.js';\nimport * as platform from '../../../common/platform.js';\nimport { INewScrollPosition, Scrollable, ScrollbarVisibility } from '../../../common/scrollable.js';\n\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\n\nexport interface ISimplifiedPointerEvent {\n\tbuttons: number;\n\tpageX: number;\n\tpageY: number;\n}\n\nexport interface ScrollbarHost {\n\tonMouseWheel(mouseWheelEvent: StandardWheelEvent): void;\n\tonDragStart(): void;\n\tonDragEnd(): void;\n}\n\nexport interface AbstractScrollbarOptions {\n\tlazyRender: boolean;\n\thost: ScrollbarHost;\n\tscrollbarState: ScrollbarState;\n\tvisibility: ScrollbarVisibility;\n\textraScrollbarClassName: string;\n\tscrollable: Scrollable;\n\tscrollByPage: boolean;\n}\n\nexport abstract class AbstractScrollbar extends Widget {\n\n\tprotected _host: ScrollbarHost;\n\tprotected _scrollable: Scrollable;\n\tprotected _scrollByPage: boolean;\n\tprivate _lazyRender: boolean;\n\tprotected _scrollbarState: ScrollbarState;\n\tprotected _visibilityController: ScrollbarVisibilityController;\n\tprivate _pointerMoveMonitor: GlobalPointerMoveMonitor;\n\n\tpublic domNode: FastDomNode<HTMLElement>;\n\tpublic slider!: FastDomNode<HTMLElement>;\n\n\tprotected _shouldRender: boolean;\n\n\tconstructor(opts: AbstractScrollbarOptions) {\n\t\tsuper();\n\t\tthis._lazyRender = opts.lazyRender;\n\t\tthis._host = opts.host;\n\t\tthis._scrollable = opts.scrollable;\n\t\tthis._scrollByPage = opts.scrollByPage;\n\t\tthis._scrollbarState = opts.scrollbarState;\n\t\tthis._visibilityController = this._register(new ScrollbarVisibilityController(opts.visibility, 'visible scrollbar ' + opts.extraScrollbarClassName, 'invisible scrollbar ' + opts.extraScrollbarClassName));\n\t\tthis._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\t\tthis._pointerMoveMonitor = this._register(new GlobalPointerMoveMonitor());\n\t\tthis._shouldRender = true;\n\t\tthis.domNode = createFastDomNode(document.createElement('div'));\n\t\tthis.domNode.setAttribute('role', 'presentation');\n\t\tthis.domNode.setAttribute('aria-hidden', 'true');\n\n\t\tthis._visibilityController.setDomNode(this.domNode);\n\t\tthis.domNode.setPosition('absolute');\n\n\t\tthis._register(dom.addDisposableListener(this.domNode.domNode, dom.EventType.POINTER_DOWN, (e: PointerEvent) => this._domNodePointerDown(e)));\n\t}\n\n\t// ----------------- creation\n\n\t/**\n\t * Creates the dom node for an arrow & adds it to the container\n\t */\n\tprotected _createArrow(opts: ScrollbarArrowOptions): void {\n\t\tconst arrow = this._register(new ScrollbarArrow(opts));\n\t\tthis.domNode.domNode.appendChild(arrow.bgDomNode);\n\t\tthis.domNode.domNode.appendChild(arrow.domNode);\n\t}\n\n\t/**\n\t * Creates the slider dom node, adds it to the container & hooks up the events\n\t */\n\tprotected _createSlider(top: number, left: number, width: number | undefined, height: number | undefined): void {\n\t\tthis.slider = createFastDomNode(document.createElement('div'));\n\t\tthis.slider.setClassName('slider');\n\t\tthis.slider.setPosition('absolute');\n\t\tthis.slider.setTop(top);\n\t\tthis.slider.setLeft(left);\n\t\tif (typeof width === 'number') {\n\t\t\tthis.slider.setWidth(width);\n\t\t}\n\t\tif (typeof height === 'number') {\n\t\t\tthis.slider.setHeight(height);\n\t\t}\n\t\tthis.slider.setLayerHinting(true);\n\t\tthis.slider.setContain('strict');\n\n\t\tthis.domNode.domNode.appendChild(this.slider.domNode);\n\n\t\tthis._register(dom.addDisposableListener(\n\t\t\tthis.slider.domNode,\n\t\t\tdom.EventType.POINTER_DOWN,\n\t\t\t(e: PointerEvent) => {\n\t\t\t\tif (e.button === 0) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis._sliderPointerDown(e);\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n\t\tthis.onclick(this.slider.domNode, e => {\n\t\t\tif (e.leftButton) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t});\n\t}\n\n\t// ----------------- Update state\n\n\tprotected _onElementSize(visibleSize: number): boolean {\n\t\tif (this._scrollbarState.setVisibleSize(visibleSize)) {\n\t\t\tthis._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\t\t\tthis._shouldRender = true;\n\t\t\tif (!this._lazyRender) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\t\treturn this._shouldRender;\n\t}\n\n\tprotected _onElementScrollSize(elementScrollSize: number): boolean {\n\t\tif (this._scrollbarState.setScrollSize(elementScrollSize)) {\n\t\t\tthis._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\t\t\tthis._shouldRender = true;\n\t\t\tif (!this._lazyRender) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\t\treturn this._shouldRender;\n\t}\n\n\tprotected _onElementScrollPosition(elementScrollPosition: number): boolean {\n\t\tif (this._scrollbarState.setScrollPosition(elementScrollPosition)) {\n\t\t\tthis._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\t\t\tthis._shouldRender = true;\n\t\t\tif (!this._lazyRender) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\t\treturn this._shouldRender;\n\t}\n\n\t// ----------------- rendering\n\n\tpublic beginReveal(): void {\n\t\tthis._visibilityController.setShouldBeVisible(true);\n\t}\n\n\tpublic beginHide(): void {\n\t\tthis._visibilityController.setShouldBeVisible(false);\n\t}\n\n\tpublic render(): void {\n\t\tif (!this._shouldRender) {\n\t\t\treturn;\n\t\t}\n\t\tthis._shouldRender = false;\n\n\t\tthis._renderDomNode(this._scrollbarState.getRectangleLargeSize(), this._scrollbarState.getRectangleSmallSize());\n\t\tthis._updateSlider(this._scrollbarState.getSliderSize(), this._scrollbarState.getArrowSize() + this._scrollbarState.getSliderPosition());\n\t}\n\t// ----------------- DOM events\n\n\tprivate _domNodePointerDown(e: PointerEvent): void {\n\t\tif (e.target !== this.domNode.domNode) {\n\t\t\treturn;\n\t\t}\n\t\tthis._onPointerDown(e);\n\t}\n\n\tpublic delegatePointerDown(e: PointerEvent): void {\n\t\tconst domTop = this.domNode.domNode.getClientRects()[0].top;\n\t\tconst sliderStart = domTop + this._scrollbarState.getSliderPosition();\n\t\tconst sliderStop = domTop + this._scrollbarState.getSliderPosition() + this._scrollbarState.getSliderSize();\n\t\tconst pointerPos = this._sliderPointerPosition(e);\n\t\tif (sliderStart <= pointerPos && pointerPos <= sliderStop) {\n\t\t\t// Act as if it was a pointer down on the slider\n\t\t\tif (e.button === 0) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis._sliderPointerDown(e);\n\t\t\t}\n\t\t} else {\n\t\t\t// Act as if it was a pointer down on the scrollbar\n\t\t\tthis._onPointerDown(e);\n\t\t}\n\t}\n\n\tprivate _onPointerDown(e: PointerEvent): void {\n\t\tlet offsetX: number;\n\t\tlet offsetY: number;\n\t\tif (e.target === this.domNode.domNode && typeof e.offsetX === 'number' && typeof e.offsetY === 'number') {\n\t\t\toffsetX = e.offsetX;\n\t\t\toffsetY = e.offsetY;\n\t\t} else {\n\t\t\tconst domNodePosition = dom.getDomNodePagePosition(this.domNode.domNode);\n\t\t\toffsetX = e.pageX - domNodePosition.left;\n\t\t\toffsetY = e.pageY - domNodePosition.top;\n\t\t}\n\n\t\tconst offset = this._pointerDownRelativePosition(offsetX, offsetY);\n\t\tthis._setDesiredScrollPositionNow(\n\t\t\tthis._scrollByPage\n\t\t\t\t? this._scrollbarState.getDesiredScrollPositionFromOffsetPaged(offset)\n\t\t\t\t: this._scrollbarState.getDesiredScrollPositionFromOffset(offset)\n\t\t);\n\n\t\tif (e.button === 0) {\n\t\t\t// left button\n\t\t\te.preventDefault();\n\t\t\tthis._sliderPointerDown(e);\n\t\t}\n\t}\n\n\tprivate _sliderPointerDown(e: PointerEvent): void {\n\t\tif (!e.target || !(e.target instanceof Element)) {\n\t\t\treturn;\n\t\t}\n\t\tconst initialPointerPosition = this._sliderPointerPosition(e);\n\t\tconst initialPointerOrthogonalPosition = this._sliderOrthogonalPointerPosition(e);\n\t\tconst initialScrollbarState = this._scrollbarState.clone();\n\t\tthis.slider.toggleClassName('active', true);\n\n\t\tthis._pointerMoveMonitor.startMonitoring(\n\t\t\te.target,\n\t\t\te.pointerId,\n\t\t\te.buttons,\n\t\t\t(pointerMoveData: PointerEvent) => {\n\t\t\t\tconst pointerOrthogonalPosition = this._sliderOrthogonalPointerPosition(pointerMoveData);\n\t\t\t\tconst pointerOrthogonalDelta = Math.abs(pointerOrthogonalPosition - initialPointerOrthogonalPosition);\n\n\t\t\t\tif (platform.isWindows && pointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE) {\n\t\t\t\t\t// The pointer has wondered away from the scrollbar => reset dragging\n\t\t\t\t\tthis._setDesiredScrollPositionNow(initialScrollbarState.getScrollPosition());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst pointerPosition = this._sliderPointerPosition(pointerMoveData);\n\t\t\t\tconst pointerDelta = pointerPosition - initialPointerPosition;\n\t\t\t\tthis._setDesiredScrollPositionNow(initialScrollbarState.getDesiredScrollPositionFromDelta(pointerDelta));\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.slider.toggleClassName('active', false);\n\t\t\t\tthis._host.onDragEnd();\n\t\t\t}\n\t\t);\n\n\t\tthis._host.onDragStart();\n\t}\n\n\tprivate _setDesiredScrollPositionNow(_desiredScrollPosition: number): void {\n\n\t\tconst desiredScrollPosition: INewScrollPosition = {};\n\t\tthis.writeScrollPosition(desiredScrollPosition, _desiredScrollPosition);\n\n\t\tthis._scrollable.setScrollPositionNow(desiredScrollPosition);\n\t}\n\n\tpublic updateScrollbarSize(scrollbarSize: number): void {\n\t\tthis._updateScrollbarSize(scrollbarSize);\n\t\tthis._scrollbarState.setScrollbarSize(scrollbarSize);\n\t\tthis._shouldRender = true;\n\t\tif (!this._lazyRender) {\n\t\t\tthis.render();\n\t\t}\n\t}\n\n\tpublic isNeeded(): boolean {\n\t\treturn this._scrollbarState.isNeeded();\n\t}\n\n\t// ----------------- Overwrite these\n\n\tprotected abstract _renderDomNode(largeSize: number, smallSize: number): void;\n\tprotected abstract _updateSlider(sliderSize: number, sliderPosition: number): void;\n\n\tprotected abstract _pointerDownRelativePosition(offsetX: number, offsetY: number): number;\n\tprotected abstract _sliderPointerPosition(e: ISimplifiedPointerEvent): number;\n\tprotected abstract _sliderOrthogonalPointerPosition(e: ISimplifiedPointerEvent): number;\n\tprotected abstract _updateScrollbarSize(size: number): void;\n\n\tpublic abstract writeScrollPosition(target: INewScrollPosition, scrollPosition: number): void;\n}\n"],
  "mappings": "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",
  "names": []
}
