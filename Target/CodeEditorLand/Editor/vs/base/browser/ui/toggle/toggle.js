import"../../../common/actions.js";import{Codicon as p}from"../../../common/codicons.js";import{Emitter as i}from"../../../common/event.js";import{KeyCode as r}from"../../../common/keyCodes.js";import{ThemeIcon as s}from"../../../common/themables.js";import"../../keyboardEvent.js";import{BaseActionViewItem as h}from"../actionbar/actionViewItems.js";import{Widget as c}from"../widget.js";import"./toggle.css";import{$ as m,addDisposableListener as b,EventType as u,isActiveElement as v}from"../../dom.js";import"../hover/hoverDelegate.js";import{getBaseLayerHoverDelegate as k}from"../hover/hoverDelegate2.js";import{getDefaultHoverDelegate as y}from"../hover/hoverDelegateFactory.js";const _={inputActiveOptionBorder:"#007ACC00",inputActiveOptionForeground:"#FFFFFF",inputActiveOptionBackground:"#0E639C50"};class K extends h{toggle;constructor(e,o,t){super(e,o,t),this.toggle=this._register(new a({actionClassName:this._action.class,isChecked:!!this._action.checked,title:this.options.keybinding?`${this._action.label} (${this.options.keybinding})`:this._action.label,notFocusable:!0,inputActiveOptionBackground:t.toggleStyles?.inputActiveOptionBackground,inputActiveOptionBorder:t.toggleStyles?.inputActiveOptionBorder,inputActiveOptionForeground:t.toggleStyles?.inputActiveOptionForeground,hoverDelegate:t.hoverDelegate})),this._register(this.toggle.onChange(()=>this._action.checked=!!this.toggle&&this.toggle.checked))}render(e){this.element=e,this.element.appendChild(this.toggle.domNode)}updateEnabled(){this.toggle&&(this.isEnabled()?this.toggle.enable():this.toggle.disable())}updateChecked(){this.toggle.checked=!!this._action.checked}focus(){this.toggle.domNode.tabIndex=0,this.toggle.focus()}blur(){this.toggle.domNode.tabIndex=-1,this.toggle.domNode.blur()}setFocusable(e){this.toggle.domNode.tabIndex=e?0:-1}}class a extends c{_onChange=this._register(new i);onChange=this._onChange.event;_onKeyDown=this._register(new i);onKeyDown=this._onKeyDown.event;_opts;_icon;domNode;_checked;_hover;constructor(e){super(),this._opts=e,this._checked=this._opts.isChecked;const o=["monaco-custom-toggle"];this._opts.icon&&(this._icon=this._opts.icon,o.push(...s.asClassNameArray(this._icon))),this._opts.actionClassName&&o.push(...this._opts.actionClassName.split(" ")),this._checked&&o.push("checked"),this.domNode=document.createElement("div"),this._hover=this._register(k().setupManagedHover(e.hoverDelegate??y("mouse"),this.domNode,this._opts.title)),this.domNode.classList.add(...o),this._opts.notFocusable||(this.domNode.tabIndex=0),this.domNode.setAttribute("role","checkbox"),this.domNode.setAttribute("aria-checked",String(this._checked)),this.domNode.setAttribute("aria-label",this._opts.title),this.applyStyles(),this.onclick(this.domNode,t=>{this.enabled&&(this.checked=!this._checked,this._onChange.fire(!1),t.preventDefault())}),this._register(this.ignoreGesture(this.domNode)),this.onkeydown(this.domNode,t=>{if(t.keyCode===r.Space||t.keyCode===r.Enter){this.checked=!this._checked,this._onChange.fire(!0),t.preventDefault(),t.stopPropagation();return}this._onKeyDown.fire(t)})}get enabled(){return this.domNode.getAttribute("aria-disabled")!=="true"}focus(){this.domNode.focus()}get checked(){return this._checked}set checked(e){this._checked=e,this.domNode.setAttribute("aria-checked",String(this._checked)),this.domNode.classList.toggle("checked",this._checked),this.applyStyles()}setIcon(e){this._icon&&this.domNode.classList.remove(...s.asClassNameArray(this._icon)),this._icon=e,this._icon&&this.domNode.classList.add(...s.asClassNameArray(this._icon))}width(){return 22}applyStyles(){this.domNode&&(this.domNode.style.borderColor=this._checked&&this._opts.inputActiveOptionBorder||"",this.domNode.style.color=this._checked&&this._opts.inputActiveOptionForeground||"inherit",this.domNode.style.backgroundColor=this._checked&&this._opts.inputActiveOptionBackground||"")}enable(){this.domNode.setAttribute("aria-disabled",String(!1))}disable(){this.domNode.setAttribute("aria-disabled",String(!0))}setTitle(e){this._hover.update(e),this.domNode.setAttribute("aria-label",e)}set visible(e){this.domNode.style.display=e?"":"none"}get visible(){return this.domNode.style.display!=="none"}}class d extends c{constructor(o,t,l){super();this.title=o;this.isChecked=t;this.checkbox=this._register(new a({title:this.title,isChecked:this.isChecked,icon:p.check,actionClassName:d.CLASS_NAME,..._})),this.domNode=this.checkbox.domNode,this.styles=l,this.applyStyles(),this._register(this.checkbox.onChange(g=>{this.applyStyles(),this._onChange.fire(g)}))}static CLASS_NAME="monaco-checkbox";_onChange=this._register(new i);onChange=this._onChange.event;checkbox;styles;domNode;get checked(){return this.checkbox.checked}set checked(o){this.checkbox.checked=o,this.applyStyles()}focus(){this.domNode.focus()}hasFocus(){return v(this.domNode)}enable(){this.checkbox.enable()}disable(){this.checkbox.disable()}applyStyles(){this.domNode.style.color=this.styles.checkboxForeground||"",this.domNode.style.backgroundColor=this.styles.checkboxBackground||"",this.domNode.style.borderColor=this.styles.checkboxBorder||""}}class $ extends h{toggle;cssClass;constructor(e,o,t){super(e,o,t),this.toggle=this._register(new d(this._action.label,!!this._action.checked,t.checkboxStyles)),this._register(this.toggle.onChange(()=>this.onChange()))}render(e){if(this.element=e,this.element.classList.add("checkbox-action-item"),this.element.appendChild(this.toggle.domNode),this.options.label&&this._action.label){const o=this.element.appendChild(m("span.checkbox-label",void 0,this._action.label));this._register(b(o,u.CLICK,t=>{this.toggle.checked=!this.toggle.checked,t.stopPropagation(),t.preventDefault(),this.onChange()}))}this.updateEnabled(),this.updateClass(),this.updateChecked()}onChange(){this._action.checked=!!this.toggle&&this.toggle.checked,this.actionRunner.run(this._action,this._context)}updateEnabled(){this.isEnabled()?this.toggle.enable():this.toggle.disable(),this.action.enabled?this.element?.classList.remove("disabled"):this.element?.classList.add("disabled")}updateChecked(){this.toggle.checked=!!this._action.checked}updateClass(){this.cssClass&&this.toggle.domNode.classList.remove(...this.cssClass.split(" ")),this.cssClass=this.getClass(),this.cssClass&&this.toggle.domNode.classList.add(...this.cssClass.split(" "))}focus(){this.toggle.domNode.tabIndex=0,this.toggle.focus()}blur(){this.toggle.domNode.tabIndex=-1,this.toggle.domNode.blur()}setFocusable(e){this.toggle.domNode.tabIndex=e?0:-1}}export{d as Checkbox,$ as CheckboxActionViewItem,a as Toggle,K as ToggleActionViewItem,_ as unthemedToggleStyles};
