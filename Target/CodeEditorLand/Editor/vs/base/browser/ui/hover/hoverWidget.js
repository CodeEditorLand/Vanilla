import*as o from"../../dom.js";import{StandardKeyboardEvent as p}from"../../keyboardEvent.js";import{DomScrollableElement as u}from"../scrollbar/scrollableElement.js";import{KeyCode as l}from"../../../common/keyCodes.js";import{Disposable as a}from"../../../common/lifecycle.js";import"./hoverWidget.css";import{localize as c}from"../../../../nls.js";const r=o.$;var h=(t=>(t[t.LEFT=0]="LEFT",t[t.RIGHT=1]="RIGHT",t[t.BELOW=2]="BELOW",t[t.ABOVE=3]="ABOVE",t))(h||{});class f extends a{containerDomNode;contentsDomNode;scrollbar;constructor(){super(),this.containerDomNode=document.createElement("div"),this.containerDomNode.className="monaco-hover",this.containerDomNode.tabIndex=0,this.containerDomNode.setAttribute("role","tooltip"),this.contentsDomNode=document.createElement("div"),this.contentsDomNode.className="monaco-hover-content",this.scrollbar=this._register(new u(this.contentsDomNode,{consumeMouseWheelIfScrollbarIsNeeded:!0})),this.containerDomNode.appendChild(this.scrollbar.getDomNode())}onContentsChanged(){this.scrollbar.scanDomNode()}}class d extends a{static render(e,n,i){return new d(e,n,i)}actionLabel;actionKeybindingLabel;actionContainer;action;constructor(e,n,i){super(),this.actionLabel=n.label,this.actionKeybindingLabel=i,this.actionContainer=o.append(e,r("div.action-container")),this.actionContainer.setAttribute("tabindex","0"),this.action=o.append(this.actionContainer,r("a.action")),this.action.setAttribute("role","button"),n.iconClass&&o.append(this.action,r(`span.icon.${n.iconClass}`));const t=o.append(this.action,r("span"));t.textContent=i?`${n.label} (${i})`:n.label,this._store.add(new E(this.actionContainer,n.run)),this._store.add(new g(this.actionContainer,n.run,[l.Enter,l.Space])),this.setEnabled(!0)}setEnabled(e){e?(this.actionContainer.classList.remove("disabled"),this.actionContainer.removeAttribute("aria-disabled")):(this.actionContainer.classList.add("disabled"),this.actionContainer.setAttribute("aria-disabled","true"))}}function w(s,e){return s&&e?c("acessibleViewHint","Inspect this in the accessible view with {0}.",e):s?c("acessibleViewHintNoKbOpen","Inspect this in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding."):""}class E extends a{constructor(e,n){super(),this._register(o.addDisposableListener(e,o.EventType.CLICK,i=>{i.stopPropagation(),i.preventDefault(),n(e)}))}}class g extends a{constructor(e,n,i){super(),this._register(o.addDisposableListener(e,o.EventType.KEY_DOWN,t=>{const m=new p(t);i.some(b=>m.equals(b))&&(t.stopPropagation(),t.preventDefault(),n(e))}))}}export{E as ClickAction,d as HoverAction,h as HoverPosition,f as HoverWidget,g as KeyDownAction,w as getHoverAccessibleViewHint};
