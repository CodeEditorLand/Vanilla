{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/grid/grid.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IBoundarySashes, Orientation } from '../sash/sash.js';\nimport { equals, tail2 as tail } from '../../../common/arrays.js';\nimport { Event } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport './gridview.css';\nimport { Box, GridView, IGridViewOptions, IGridViewStyles, IView as IGridViewView, IViewSize, orthogonal, Sizing as GridViewSizing, GridLocation } from './gridview.js';\nimport type { SplitView, AutoSizing as SplitViewAutoSizing } from '../splitview/splitview.js';\n\nexport type { IViewSize };\nexport { LayoutPriority, Orientation, orthogonal } from './gridview.js';\n\nexport const enum Direction {\n\tUp,\n\tDown,\n\tLeft,\n\tRight\n}\n\nfunction oppositeDirection(direction: Direction): Direction {\n\tswitch (direction) {\n\t\tcase Direction.Up: return Direction.Down;\n\t\tcase Direction.Down: return Direction.Up;\n\t\tcase Direction.Left: return Direction.Right;\n\t\tcase Direction.Right: return Direction.Left;\n\t}\n}\n\n/**\n * The interface to implement for views within a {@link Grid}.\n */\nexport interface IView extends IGridViewView {\n\n\t/**\n\t * The preferred width for when the user double clicks a sash\n\t * adjacent to this view.\n\t */\n\treadonly preferredWidth?: number;\n\n\t/**\n\t * The preferred height for when the user double clicks a sash\n\t * adjacent to this view.\n\t */\n\treadonly preferredHeight?: number;\n}\n\nexport interface GridLeafNode<T extends IView> {\n\treadonly view: T;\n\treadonly box: Box;\n\treadonly cachedVisibleSize: number | undefined;\n\treadonly maximized: boolean;\n}\n\nexport interface GridBranchNode<T extends IView> {\n\treadonly children: GridNode<T>[];\n\treadonly box: Box;\n}\n\nexport type GridNode<T extends IView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IView>(node: GridNode<T>): node is GridBranchNode<T> {\n\treturn !!(node as any).children;\n}\n\nfunction getGridNode<T extends IView>(node: GridNode<T>, location: GridLocation): GridNode<T> {\n\tif (location.length === 0) {\n\t\treturn node;\n\t}\n\n\tif (!isGridBranchNode(node)) {\n\t\tthrow new Error('Invalid location');\n\t}\n\n\tconst [index, ...rest] = location;\n\treturn getGridNode(node.children[index], rest);\n}\n\ninterface Range {\n\treadonly start: number;\n\treadonly end: number;\n}\n\nfunction intersects(one: Range, other: Range): boolean {\n\treturn !(one.start >= other.end || other.start >= one.end);\n}\n\ninterface Boundary {\n\treadonly offset: number;\n\treadonly range: Range;\n}\n\nfunction getBoxBoundary(box: Box, direction: Direction): Boundary {\n\tconst orientation = getDirectionOrientation(direction);\n\tconst offset = direction === Direction.Up ? box.top :\n\t\tdirection === Direction.Right ? box.left + box.width :\n\t\t\tdirection === Direction.Down ? box.top + box.height :\n\t\t\t\tbox.left;\n\n\tconst range = {\n\t\tstart: orientation === Orientation.HORIZONTAL ? box.top : box.left,\n\t\tend: orientation === Orientation.HORIZONTAL ? box.top + box.height : box.left + box.width\n\t};\n\n\treturn { offset, range };\n}\n\nfunction findAdjacentBoxLeafNodes<T extends IView>(boxNode: GridNode<T>, direction: Direction, boundary: Boundary): GridLeafNode<T>[] {\n\tconst result: GridLeafNode<T>[] = [];\n\n\tfunction _(boxNode: GridNode<T>, direction: Direction, boundary: Boundary): void {\n\t\tif (isGridBranchNode(boxNode)) {\n\t\t\tfor (const child of boxNode.children) {\n\t\t\t\t_(child, direction, boundary);\n\t\t\t}\n\t\t} else {\n\t\t\tconst { offset, range } = getBoxBoundary(boxNode.box, direction);\n\n\t\t\tif (offset === boundary.offset && intersects(range, boundary.range)) {\n\t\t\t\tresult.push(boxNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t_(boxNode, direction, boundary);\n\treturn result;\n}\n\nfunction getLocationOrientation(rootOrientation: Orientation, location: GridLocation): Orientation {\n\treturn location.length % 2 === 0 ? orthogonal(rootOrientation) : rootOrientation;\n}\n\nfunction getDirectionOrientation(direction: Direction): Orientation {\n\treturn direction === Direction.Up || direction === Direction.Down ? Orientation.VERTICAL : Orientation.HORIZONTAL;\n}\n\nexport function getRelativeLocation(rootOrientation: Orientation, location: GridLocation, direction: Direction): GridLocation {\n\tconst orientation = getLocationOrientation(rootOrientation, location);\n\tconst directionOrientation = getDirectionOrientation(direction);\n\n\tif (orientation === directionOrientation) {\n\t\tlet [rest, index] = tail(location);\n\n\t\tif (direction === Direction.Right || direction === Direction.Down) {\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn [...rest, index];\n\t} else {\n\t\tconst index = (direction === Direction.Right || direction === Direction.Down) ? 1 : 0;\n\t\treturn [...location, index];\n\t}\n}\n\nfunction indexInParent(element: HTMLElement): number {\n\tconst parentElement = element.parentElement;\n\n\tif (!parentElement) {\n\t\tthrow new Error('Invalid grid element');\n\t}\n\n\tlet el = parentElement.firstElementChild;\n\tlet index = 0;\n\n\twhile (el !== element && el !== parentElement.lastElementChild && el) {\n\t\tel = el.nextElementSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nfunction getGridLocation(element: HTMLElement): GridLocation {\n\tconst parentElement = element.parentElement;\n\n\tif (!parentElement) {\n\t\tthrow new Error('Invalid grid element');\n\t}\n\n\tif (/\\bmonaco-grid-view\\b/.test(parentElement.className)) {\n\t\treturn [];\n\t}\n\n\tconst index = indexInParent(parentElement);\n\tconst ancestor = parentElement.parentElement!.parentElement!.parentElement!.parentElement!;\n\treturn [...getGridLocation(ancestor), index];\n}\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split' };\nexport type AutoSizing = { type: 'auto' };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | AutoSizing | InvisibleSizing;\n\nexport namespace Sizing {\n\texport const Distribute: DistributeSizing = { type: 'distribute' };\n\texport const Split: SplitSizing = { type: 'split' };\n\texport const Auto: AutoSizing = { type: 'auto' };\n\texport function Invisible(cachedVisibleSize: number): InvisibleSizing { return { type: 'invisible', cachedVisibleSize }; }\n}\n\nexport interface IGridStyles extends IGridViewStyles { }\nexport interface IGridOptions extends IGridViewOptions { }\n\n/**\n * The {@link Grid} exposes a Grid widget in a friendlier API than the underlying\n * {@link GridView} widget. Namely, all mutation operations are addressed by the\n * model elements, rather than indexes.\n *\n * It support the same features as the {@link GridView}.\n */\nexport class Grid<T extends IView = IView> extends Disposable {\n\n\tprotected gridview: GridView;\n\tprivate views = new Map<T, HTMLElement>();\n\n\t/**\n\t * The orientation of the grid. Matches the orientation of the root\n\t * {@link SplitView} in the grid's {@link GridLocation} model.\n\t */\n\tget orientation(): Orientation { return this.gridview.orientation; }\n\tset orientation(orientation: Orientation) { this.gridview.orientation = orientation; }\n\n\t/**\n\t * The width of the grid.\n\t */\n\tget width(): number { return this.gridview.width; }\n\n\t/**\n\t * The height of the grid.\n\t */\n\tget height(): number { return this.gridview.height; }\n\n\t/**\n\t * The minimum width of the grid.\n\t */\n\tget minimumWidth(): number { return this.gridview.minimumWidth; }\n\n\t/**\n\t * The minimum height of the grid.\n\t */\n\tget minimumHeight(): number { return this.gridview.minimumHeight; }\n\n\t/**\n\t * The maximum width of the grid.\n\t */\n\tget maximumWidth(): number { return this.gridview.maximumWidth; }\n\n\t/**\n\t * The maximum height of the grid.\n\t */\n\tget maximumHeight(): number { return this.gridview.maximumHeight; }\n\n\t/**\n\t * Fires whenever a view within the grid changes its size constraints.\n\t */\n\treadonly onDidChange: Event<{ width: number; height: number } | undefined>;\n\n\t/**\n\t * Fires whenever the user scrolls a {@link SplitView} within\n\t * the grid.\n\t */\n\treadonly onDidScroll: Event<void>;\n\n\t/**\n\t * A collection of sashes perpendicular to each edge of the grid.\n\t * Corner sashes will be created for each intersection.\n\t */\n\tget boundarySashes(): IBoundarySashes { return this.gridview.boundarySashes; }\n\tset boundarySashes(boundarySashes: IBoundarySashes) { this.gridview.boundarySashes = boundarySashes; }\n\n\t/**\n\t * Enable/disable edge snapping across all grid views.\n\t */\n\tset edgeSnapping(edgeSnapping: boolean) { this.gridview.edgeSnapping = edgeSnapping; }\n\n\t/**\n\t * The DOM element for this view.\n\t */\n\tget element(): HTMLElement { return this.gridview.element; }\n\n\tprivate didLayout = false;\n\n\treadonly onDidChangeViewMaximized: Event<boolean>;\n\t/**\n\t * Create a new {@link Grid}. A grid must *always* have a view\n\t * inside.\n\t *\n\t * @param view An initial view for this Grid.\n\t */\n\tconstructor(view: T | GridView, options: IGridOptions = {}) {\n\t\tsuper();\n\n\t\tif (view instanceof GridView) {\n\t\t\tthis.gridview = view;\n\t\t\tthis.gridview.getViewMap(this.views);\n\t\t} else {\n\t\t\tthis.gridview = new GridView(options);\n\t\t}\n\n\t\tthis._register(this.gridview);\n\t\tthis._register(this.gridview.onDidSashReset(this.onDidSashReset, this));\n\n\t\tif (!(view instanceof GridView)) {\n\t\t\tthis._addView(view, 0, [0]);\n\t\t}\n\n\t\tthis.onDidChange = this.gridview.onDidChange;\n\t\tthis.onDidScroll = this.gridview.onDidScroll;\n\t\tthis.onDidChangeViewMaximized = this.gridview.onDidChangeViewMaximized;\n\t}\n\n\tstyle(styles: IGridStyles): void {\n\t\tthis.gridview.style(styles);\n\t}\n\n\t/**\n\t * Layout the {@link Grid}.\n\t *\n\t * Optionally provide a `top` and `left` positions, those will propagate\n\t * as an origin for positions passed to {@link IView.layout}.\n\t *\n\t * @param width The width of the {@link Grid}.\n\t * @param height The height of the {@link Grid}.\n\t * @param top Optional, the top location of the {@link Grid}.\n\t * @param left Optional, the left location of the {@link Grid}.\n\t */\n\tlayout(width: number, height: number, top: number = 0, left: number = 0): void {\n\t\tthis.gridview.layout(width, height, top, left);\n\t\tthis.didLayout = true;\n\t}\n\n\t/**\n\t * Add a {@link IView view} to this {@link Grid}, based on another reference view.\n\t *\n\t * Take this grid as an example:\n\t *\n\t * ```\n\t *  +-----+---------------+\n\t *  |  A  |      B        |\n\t *  +-----+---------+-----+\n\t *  |        C      |     |\n\t *  +---------------+  D  |\n\t *  |        E      |     |\n\t *  +---------------+-----+\n\t * ```\n\t *\n\t * Calling `addView(X, Sizing.Distribute, C, Direction.Right)` will make the following\n\t * changes:\n\t *\n\t * ```\n\t *  +-----+---------------+\n\t *  |  A  |      B        |\n\t *  +-----+-+-------+-----+\n\t *  |   C   |   X   |     |\n\t *  +-------+-------+  D  |\n\t *  |        E      |     |\n\t *  +---------------+-----+\n\t * ```\n\t *\n\t * Or `addView(X, Sizing.Distribute, D, Direction.Down)`:\n\t *\n\t * ```\n\t *  +-----+---------------+\n\t *  |  A  |      B        |\n\t *  +-----+---------+-----+\n\t *  |        C      |  D  |\n\t *  +---------------+-----+\n\t *  |        E      |  X  |\n\t *  +---------------+-----+\n\t * ```\n\t *\n\t * @param newView The view to add.\n\t * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n\t * @param referenceView Another view to place this new view next to.\n\t * @param direction The direction the new view should be placed next to the reference view.\n\t */\n\taddView(newView: T, size: number | Sizing, referenceView: T, direction: Direction): void {\n\t\tif (this.views.has(newView)) {\n\t\t\tthrow new Error('Can\\'t add same view twice');\n\t\t}\n\n\t\tconst orientation = getDirectionOrientation(direction);\n\n\t\tif (this.views.size === 1 && this.orientation !== orientation) {\n\t\t\tthis.orientation = orientation;\n\t\t}\n\n\t\tconst referenceLocation = this.getViewLocation(referenceView);\n\t\tconst location = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n\n\t\tlet viewSize: number | GridViewSizing;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else if (size.type === 'split') {\n\t\t\tconst [, index] = tail(referenceLocation);\n\t\t\tviewSize = GridViewSizing.Split(index);\n\t\t} else if (size.type === 'distribute') {\n\t\t\tviewSize = GridViewSizing.Distribute;\n\t\t} else if (size.type === 'auto') {\n\t\t\tconst [, index] = tail(referenceLocation);\n\t\t\tviewSize = GridViewSizing.Auto(index);\n\t\t} else {\n\t\t\tviewSize = size;\n\t\t}\n\n\t\tthis._addView(newView, viewSize, location);\n\t}\n\n\tprivate addViewAt(newView: T, size: number | DistributeSizing | InvisibleSizing, location: GridLocation): void {\n\t\tif (this.views.has(newView)) {\n\t\t\tthrow new Error('Can\\'t add same view twice');\n\t\t}\n\n\t\tlet viewSize: number | GridViewSizing;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else if (size.type === 'distribute') {\n\t\t\tviewSize = GridViewSizing.Distribute;\n\t\t} else {\n\t\t\tviewSize = size;\n\t\t}\n\n\t\tthis._addView(newView, viewSize, location);\n\t}\n\n\tprotected _addView(newView: T, size: number | GridViewSizing, location: GridLocation): void {\n\t\tthis.views.set(newView, newView.element);\n\t\tthis.gridview.addView(newView, size, location);\n\t}\n\n\t/**\n\t * Remove a {@link IView view} from this {@link Grid}.\n\t *\n\t * @param view The {@link IView view} to remove.\n\t * @param sizing Whether to distribute other {@link IView view}'s sizes.\n\t */\n\tremoveView(view: T, sizing?: Sizing): void {\n\t\tif (this.views.size === 1) {\n\t\t\tthrow new Error('Can\\'t remove last view');\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\n\t\tlet gridViewSizing: DistributeSizing | SplitViewAutoSizing | undefined;\n\n\t\tif (sizing?.type === 'distribute') {\n\t\t\tgridViewSizing = GridViewSizing.Distribute;\n\t\t} else if (sizing?.type === 'auto') {\n\t\t\tconst index = location[location.length - 1];\n\t\t\tgridViewSizing = GridViewSizing.Auto(index === 0 ? 1 : index - 1);\n\t\t}\n\n\t\tthis.gridview.removeView(location, gridViewSizing);\n\t\tthis.views.delete(view);\n\t}\n\n\t/**\n\t * Move a {@link IView view} to another location in the grid.\n\t *\n\t * @remarks See {@link Grid.addView}.\n\t *\n\t * @param view The {@link IView view} to move.\n\t * @param sizing Either a fixed size, or a dynamic {@link Sizing} strategy.\n\t * @param referenceView Another view to place the view next to.\n\t * @param direction The direction the view should be placed next to the reference view.\n\t */\n\tmoveView(view: T, sizing: number | Sizing, referenceView: T, direction: Direction): void {\n\t\tconst sourceLocation = this.getViewLocation(view);\n\t\tconst [sourceParentLocation, from] = tail(sourceLocation);\n\n\t\tconst referenceLocation = this.getViewLocation(referenceView);\n\t\tconst targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n\t\tconst [targetParentLocation, to] = tail(targetLocation);\n\n\t\tif (equals(sourceParentLocation, targetParentLocation)) {\n\t\t\tthis.gridview.moveView(sourceParentLocation, from, to);\n\t\t} else {\n\t\t\tthis.removeView(view, typeof sizing === 'number' ? undefined : sizing);\n\t\t\tthis.addView(view, sizing, referenceView, direction);\n\t\t}\n\t}\n\n\t/**\n\t * Move a {@link IView view} to another location in the grid.\n\t *\n\t * @remarks Internal method, do not use without knowing what you're doing.\n\t * @remarks See {@link GridView.moveView}.\n\t *\n\t * @param view The {@link IView view} to move.\n\t * @param location The {@link GridLocation location} to insert the view on.\n\t */\n\tmoveViewTo(view: T, location: GridLocation): void {\n\t\tconst sourceLocation = this.getViewLocation(view);\n\t\tconst [sourceParentLocation, from] = tail(sourceLocation);\n\t\tconst [targetParentLocation, to] = tail(location);\n\n\t\tif (equals(sourceParentLocation, targetParentLocation)) {\n\t\t\tthis.gridview.moveView(sourceParentLocation, from, to);\n\t\t} else {\n\t\t\tconst size = this.getViewSize(view);\n\t\t\tconst orientation = getLocationOrientation(this.gridview.orientation, sourceLocation);\n\t\t\tconst cachedViewSize = this.getViewCachedVisibleSize(view);\n\t\t\tconst sizing = typeof cachedViewSize === 'undefined'\n\t\t\t\t? (orientation === Orientation.HORIZONTAL ? size.width : size.height)\n\t\t\t\t: Sizing.Invisible(cachedViewSize);\n\n\t\t\tthis.removeView(view);\n\t\t\tthis.addViewAt(view, sizing, location);\n\t\t}\n\t}\n\n\t/**\n\t * Swap two {@link IView views} within the {@link Grid}.\n\t *\n\t * @param from One {@link IView view}.\n\t * @param to Another {@link IView view}.\n\t */\n\tswapViews(from: T, to: T): void {\n\t\tconst fromLocation = this.getViewLocation(from);\n\t\tconst toLocation = this.getViewLocation(to);\n\t\treturn this.gridview.swapViews(fromLocation, toLocation);\n\t}\n\n\t/**\n\t * Resize a {@link IView view}.\n\t *\n\t * @param view The {@link IView view} to resize.\n\t * @param size The size the view should be.\n\t */\n\tresizeView(view: T, size: IViewSize): void {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.resizeView(location, size);\n\t}\n\n\t/**\n\t * Returns whether all other {@link IView views} are at their minimum size.\n\t *\n\t * @param view The reference {@link IView view}.\n\t */\n\tisViewExpanded(view: T): boolean {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.isViewExpanded(location);\n\t}\n\n\t/**\n\t * Returns whether the {@link IView view} is maximized.\n\t *\n\t * @param view The reference {@link IView view}.\n\t */\n\tisViewMaximized(view: T): boolean {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.isViewMaximized(location);\n\t}\n\n\t/**\n\t * Returns whether the {@link IView view} is maximized.\n\t *\n\t * @param view The reference {@link IView view}.\n\t */\n\thasMaximizedView(): boolean {\n\t\treturn this.gridview.hasMaximizedView();\n\t}\n\n\t/**\n\t * Get the size of a {@link IView view}.\n\t *\n\t * @param view The {@link IView view}. Provide `undefined` to get the size\n\t * of the grid itself.\n\t */\n\tgetViewSize(view?: T): IViewSize {\n\t\tif (!view) {\n\t\t\treturn this.gridview.getViewSize();\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.getViewSize(location);\n\t}\n\n\t/**\n\t * Get the cached visible size of a {@link IView view}. This was the size\n\t * of the view at the moment it last became hidden.\n\t *\n\t * @param view The {@link IView view}.\n\t */\n\tgetViewCachedVisibleSize(view: T): number | undefined {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.getViewCachedVisibleSize(location);\n\t}\n\n\t/**\n\t * Maximizes the specified view and hides all other views.\n\t * @param view The view to maximize.\n\t */\n\tmaximizeView(view: T) {\n\t\tif (this.views.size < 2) {\n\t\t\tthrow new Error('At least two views are required to maximize a view');\n\t\t}\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.maximizeView(location);\n\t}\n\n\texitMaximizedView(): void {\n\t\tthis.gridview.exitMaximizedView();\n\t}\n\n\t/**\n\t * Expand the size of a {@link IView view} by collapsing all other views\n\t * to their minimum sizes.\n\t *\n\t * @param view The {@link IView view}.\n\t */\n\texpandView(view: T): void {\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.expandView(location);\n\t}\n\n\t/**\n\t * Distribute the size among all {@link IView views} within the entire\n\t * grid or within a single {@link SplitView}.\n\t */\n\tdistributeViewSizes(): void {\n\t\tthis.gridview.distributeViewSizes();\n\t}\n\n\t/**\n\t * Returns whether a {@link IView view} is visible.\n\t *\n\t * @param view The {@link IView view}.\n\t */\n\tisViewVisible(view: T): boolean {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.isViewVisible(location);\n\t}\n\n\t/**\n\t * Set the visibility state of a {@link IView view}.\n\t *\n\t * @param view The {@link IView view}.\n\t */\n\tsetViewVisible(view: T, visible: boolean): void {\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.setViewVisible(location, visible);\n\t}\n\n\t/**\n\t * Returns a descriptor for the entire grid.\n\t */\n\tgetViews(): GridBranchNode<T> {\n\t\treturn this.gridview.getView() as GridBranchNode<T>;\n\t}\n\n\t/**\n\t * Utility method to return the collection all views which intersect\n\t * a view's edge.\n\t *\n\t * @param view The {@link IView view}.\n\t * @param direction Which direction edge to be considered.\n\t * @param wrap Whether the grid wraps around (from right to left, from bottom to top).\n\t */\n\tgetNeighborViews(view: T, direction: Direction, wrap: boolean = false): T[] {\n\t\tif (!this.didLayout) {\n\t\t\tthrow new Error('Can\\'t call getNeighborViews before first layout');\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\t\tconst root = this.getViews();\n\t\tconst node = getGridNode(root, location);\n\t\tlet boundary = getBoxBoundary(node.box, direction);\n\n\t\tif (wrap) {\n\t\t\tif (direction === Direction.Up && node.box.top === 0) {\n\t\t\t\tboundary = { offset: root.box.top + root.box.height, range: boundary.range };\n\t\t\t} else if (direction === Direction.Right && node.box.left + node.box.width === root.box.width) {\n\t\t\t\tboundary = { offset: 0, range: boundary.range };\n\t\t\t} else if (direction === Direction.Down && node.box.top + node.box.height === root.box.height) {\n\t\t\t\tboundary = { offset: 0, range: boundary.range };\n\t\t\t} else if (direction === Direction.Left && node.box.left === 0) {\n\t\t\t\tboundary = { offset: root.box.left + root.box.width, range: boundary.range };\n\t\t\t}\n\t\t}\n\n\t\treturn findAdjacentBoxLeafNodes(root, oppositeDirection(direction), boundary)\n\t\t\t.map(node => node.view);\n\t}\n\n\tprivate getViewLocation(view: T): GridLocation {\n\t\tconst element = this.views.get(view);\n\n\t\tif (!element) {\n\t\t\tthrow new Error('View not found');\n\t\t}\n\n\t\treturn getGridLocation(element);\n\t}\n\n\tprivate onDidSashReset(location: GridLocation): void {\n\t\tconst resizeToPreferredSize = (location: GridLocation): boolean => {\n\t\t\tconst node = this.gridview.getView(location) as GridNode<T>;\n\n\t\t\tif (isGridBranchNode(node)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst direction = getLocationOrientation(this.orientation, location);\n\t\t\tconst size = direction === Orientation.HORIZONTAL ? node.view.preferredWidth : node.view.preferredHeight;\n\n\t\t\tif (typeof size !== 'number') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst viewSize = direction === Orientation.HORIZONTAL ? { width: Math.round(size) } : { height: Math.round(size) };\n\t\t\tthis.gridview.resizeView(location, viewSize);\n\t\t\treturn true;\n\t\t};\n\n\t\tif (resizeToPreferredSize(location)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [parentLocation, index] = tail(location);\n\n\t\tif (resizeToPreferredSize([...parentLocation, index + 1])) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.gridview.distributeViewSizes(parentLocation);\n\t}\n}\n\nexport interface ISerializableView extends IView {\n\ttoJSON(): object;\n}\n\nexport interface IViewDeserializer<T extends ISerializableView> {\n\tfromJSON(json: any): T;\n}\n\nexport interface ISerializedLeafNode {\n\ttype: 'leaf';\n\tdata: any;\n\tsize: number;\n\tvisible?: boolean;\n\tmaximized?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n\ttype: 'branch';\n\tdata: ISerializedNode[];\n\tsize: number;\n\tvisible?: boolean;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface ISerializedGrid {\n\troot: ISerializedNode;\n\torientation: Orientation;\n\twidth: number;\n\theight: number;\n}\n\n/**\n * A {@link Grid} which can serialize itself.\n */\nexport class SerializableGrid<T extends ISerializableView> extends Grid<T> {\n\n\tprivate static serializeNode<T extends ISerializableView>(node: GridNode<T>, orientation: Orientation): ISerializedNode {\n\t\tconst size = orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n\t\tif (!isGridBranchNode(node)) {\n\t\t\tconst serializedLeafNode: ISerializedLeafNode = { type: 'leaf', data: node.view.toJSON(), size };\n\n\t\t\tif (typeof node.cachedVisibleSize === 'number') {\n\t\t\t\tserializedLeafNode.size = node.cachedVisibleSize;\n\t\t\t\tserializedLeafNode.visible = false;\n\t\t\t} else if (node.maximized) {\n\t\t\t\tserializedLeafNode.maximized = true;\n\t\t\t}\n\n\t\t\treturn serializedLeafNode;\n\t\t}\n\n\t\tconst data = node.children.map(c => SerializableGrid.serializeNode(c, orthogonal(orientation)));\n\t\tif (data.some(c => c.visible !== false)) {\n\t\t\treturn { type: 'branch', data: data, size };\n\t\t}\n\t\treturn { type: 'branch', data: data, size, visible: false };\n\t}\n\n\t/**\n\t * Construct a new {@link SerializableGrid} from a JSON object.\n\t *\n\t * @param json The JSON object.\n\t * @param deserializer A deserializer which can revive each view.\n\t * @returns A new {@link SerializableGrid} instance.\n\t */\n\tstatic deserialize<T extends ISerializableView>(json: ISerializedGrid, deserializer: IViewDeserializer<T>, options: IGridOptions = {}): SerializableGrid<T> {\n\t\tif (typeof json.orientation !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'orientation\\' property must be a number.');\n\t\t} else if (typeof json.width !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'width\\' property must be a number.');\n\t\t} else if (typeof json.height !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'height\\' property must be a number.');\n\t\t}\n\n\t\tconst gridview = GridView.deserialize(json, deserializer, options);\n\t\tconst result = new SerializableGrid<T>(gridview, options);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Construct a new {@link SerializableGrid} from a grid descriptor.\n\t *\n\t * @param gridDescriptor A grid descriptor in which leaf nodes point to actual views.\n\t * @returns A new {@link SerializableGrid} instance.\n\t */\n\tstatic from<T extends ISerializableView>(gridDescriptor: GridDescriptor<T>, options: IGridOptions = {}): SerializableGrid<T> {\n\t\treturn SerializableGrid.deserialize(createSerializedGrid(gridDescriptor), { fromJSON: view => view }, options);\n\t}\n\n\t/**\n\t * Useful information in order to proportionally restore view sizes\n\t * upon the very first layout call.\n\t */\n\tprivate initialLayoutContext: boolean = true;\n\n\t/**\n\t * Serialize this grid into a JSON object.\n\t */\n\tserialize(): ISerializedGrid {\n\t\treturn {\n\t\t\troot: SerializableGrid.serializeNode(this.getViews(), this.orientation),\n\t\t\torientation: this.orientation,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\t}\n\n\toverride layout(width: number, height: number, top: number = 0, left: number = 0): void {\n\t\tsuper.layout(width, height, top, left);\n\n\t\tif (this.initialLayoutContext) {\n\t\t\tthis.initialLayoutContext = false;\n\t\t\tthis.gridview.trySet2x2();\n\t\t}\n\t}\n}\n\nexport type GridLeafNodeDescriptor<T> = { size?: number; data?: any };\nexport type GridBranchNodeDescriptor<T> = { size?: number; groups: GridNodeDescriptor<T>[] };\nexport type GridNodeDescriptor<T> = GridBranchNodeDescriptor<T> | GridLeafNodeDescriptor<T>;\nexport type GridDescriptor<T> = { orientation: Orientation } & GridBranchNodeDescriptor<T>;\n\nfunction isGridBranchNodeDescriptor<T>(nodeDescriptor: GridNodeDescriptor<T>): nodeDescriptor is GridBranchNodeDescriptor<T> {\n\treturn !!(nodeDescriptor as GridBranchNodeDescriptor<T>).groups;\n}\n\nexport function sanitizeGridNodeDescriptor<T>(nodeDescriptor: GridNodeDescriptor<T>, rootNode: boolean): void {\n\tif (!rootNode && (nodeDescriptor as any).groups && (nodeDescriptor as any).groups.length <= 1) {\n\t\t(nodeDescriptor as any).groups = undefined;\n\t}\n\n\tif (!isGridBranchNodeDescriptor(nodeDescriptor)) {\n\t\treturn;\n\t}\n\n\tlet totalDefinedSize = 0;\n\tlet totalDefinedSizeCount = 0;\n\n\tfor (const child of nodeDescriptor.groups) {\n\t\tsanitizeGridNodeDescriptor(child, false);\n\n\t\tif (child.size) {\n\t\t\ttotalDefinedSize += child.size;\n\t\t\ttotalDefinedSizeCount++;\n\t\t}\n\t}\n\n\tconst totalUndefinedSize = totalDefinedSizeCount > 0 ? totalDefinedSize : 1;\n\tconst totalUndefinedSizeCount = nodeDescriptor.groups.length - totalDefinedSizeCount;\n\tconst eachUndefinedSize = totalUndefinedSize / totalUndefinedSizeCount;\n\n\tfor (const child of nodeDescriptor.groups) {\n\t\tif (!child.size) {\n\t\t\tchild.size = eachUndefinedSize;\n\t\t}\n\t}\n}\n\nfunction createSerializedNode<T>(nodeDescriptor: GridNodeDescriptor<T>): ISerializedNode {\n\tif (isGridBranchNodeDescriptor(nodeDescriptor)) {\n\t\treturn { type: 'branch', data: nodeDescriptor.groups.map(c => createSerializedNode(c)), size: nodeDescriptor.size! };\n\t} else {\n\t\treturn { type: 'leaf', data: nodeDescriptor.data, size: nodeDescriptor.size! };\n\t}\n}\n\nfunction getDimensions(node: ISerializedNode, orientation: Orientation): { width?: number; height?: number } {\n\tif (node.type === 'branch') {\n\t\tconst childrenDimensions = node.data.map(c => getDimensions(c, orthogonal(orientation)));\n\n\t\tif (orientation === Orientation.VERTICAL) {\n\t\t\tconst width = node.size || (childrenDimensions.length === 0 ? undefined : Math.max(...childrenDimensions.map(d => d.width || 0)));\n\t\t\tconst height = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce((r, d) => r + (d.height || 0), 0);\n\t\t\treturn { width, height };\n\t\t} else {\n\t\t\tconst width = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce((r, d) => r + (d.width || 0), 0);\n\t\t\tconst height = node.size || (childrenDimensions.length === 0 ? undefined : Math.max(...childrenDimensions.map(d => d.height || 0)));\n\t\t\treturn { width, height };\n\t\t}\n\t} else {\n\t\tconst width = orientation === Orientation.VERTICAL ? node.size : undefined;\n\t\tconst height = orientation === Orientation.VERTICAL ? undefined : node.size;\n\t\treturn { width, height };\n\t}\n}\n\n/**\n * Creates a new JSON object from a {@link GridDescriptor}, which can\n * be deserialized by {@link SerializableGrid.deserialize}.\n */\nexport function createSerializedGrid<T>(gridDescriptor: GridDescriptor<T>): ISerializedGrid {\n\tsanitizeGridNodeDescriptor(gridDescriptor, true);\n\n\tconst root = createSerializedNode(gridDescriptor);\n\tconst { width, height } = getDimensions(root, gridDescriptor.orientation);\n\n\treturn {\n\t\troot,\n\t\torientation: gridDescriptor.orientation,\n\t\twidth: width || 1,\n\t\theight: height || 1\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,QAAQ,SAAS,YAAY;AACtC,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,OAAO;AACP,SAAS,KAAK,UAAU,kBAAkB,iBAAiB,SAAS,eAAe,WAAW,YAAY,UAAU,gBAAgB,oBAAoB;AAIxJ,SAAS,gBAAgB,eAAAA,cAAa,cAAAC,mBAAkB;AAEjD,IAAW,YAAX,kBAAWC,eAAX;AACN,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AAJiB,SAAAA;AAAA,GAAA;AAOlB,SAAS,kBAAkB,WAAiC;AAC3D,UAAQ,WAAW;AAAA,IAClB,KAAK;AAAc,aAAO;AAAA,IAC1B,KAAK;AAAgB,aAAO;AAAA,IAC5B,KAAK;AAAgB,aAAO;AAAA,IAC5B,KAAK;AAAiB,aAAO;AAAA,EAC9B;AACD;AAPS;AAyCF,SAAS,iBAAkC,MAA8C;AAC/F,SAAO,CAAC,CAAE,KAAa;AACxB;AAFgB;AAIhB,SAAS,YAA6B,MAAmB,UAAqC;AAC7F,MAAI,SAAS,WAAW,GAAG;AAC1B,WAAO;AAAA,EACR;AAEA,MAAI,CAAC,iBAAiB,IAAI,GAAG;AAC5B,UAAM,IAAI,MAAM,kBAAkB;AAAA,EACnC;AAEA,QAAM,CAAC,OAAO,GAAG,IAAI,IAAI;AACzB,SAAO,YAAY,KAAK,SAAS,KAAK,GAAG,IAAI;AAC9C;AAXS;AAkBT,SAAS,WAAW,KAAY,OAAuB;AACtD,SAAO,EAAE,IAAI,SAAS,MAAM,OAAO,MAAM,SAAS,IAAI;AACvD;AAFS;AAST,SAAS,eAAe,KAAU,WAAgC;AACjE,QAAM,cAAc,wBAAwB,SAAS;AACrD,QAAM,SAAS,cAAc,aAAe,IAAI,MAC/C,cAAc,gBAAkB,IAAI,OAAO,IAAI,QAC9C,cAAc,eAAiB,IAAI,MAAM,IAAI,SAC5C,IAAI;AAEP,QAAM,QAAQ;AAAA,IACb,OAAO,gBAAgB,YAAY,aAAa,IAAI,MAAM,IAAI;AAAA,IAC9D,KAAK,gBAAgB,YAAY,aAAa,IAAI,MAAM,IAAI,SAAS,IAAI,OAAO,IAAI;AAAA,EACrF;AAEA,SAAO,EAAE,QAAQ,MAAM;AACxB;AAbS;AAeT,SAAS,yBAA0C,SAAsB,WAAsB,UAAuC;AACrI,QAAM,SAA4B,CAAC;AAEnC,WAAS,EAAEC,UAAsBC,YAAsBC,WAA0B;AAChF,QAAI,iBAAiBF,QAAO,GAAG;AAC9B,iBAAW,SAASA,SAAQ,UAAU;AACrC,UAAE,OAAOC,YAAWC,SAAQ;AAAA,MAC7B;AAAA,IACD,OAAO;AACN,YAAM,EAAE,QAAQ,MAAM,IAAI,eAAeF,SAAQ,KAAKC,UAAS;AAE/D,UAAI,WAAWC,UAAS,UAAU,WAAW,OAAOA,UAAS,KAAK,GAAG;AACpE,eAAO,KAAKF,QAAO;AAAA,MACpB;AAAA,IACD;AAAA,EACD;AAZS;AAcT,IAAE,SAAS,WAAW,QAAQ;AAC9B,SAAO;AACR;AAnBS;AAqBT,SAAS,uBAAuB,iBAA8B,UAAqC;AAClG,SAAO,SAAS,SAAS,MAAM,IAAI,WAAW,eAAe,IAAI;AAClE;AAFS;AAIT,SAAS,wBAAwB,WAAmC;AACnE,SAAO,cAAc,cAAgB,cAAc,eAAiB,YAAY,WAAW,YAAY;AACxG;AAFS;AAIF,SAAS,oBAAoB,iBAA8B,UAAwB,WAAoC;AAC7H,QAAM,cAAc,uBAAuB,iBAAiB,QAAQ;AACpE,QAAM,uBAAuB,wBAAwB,SAAS;AAE9D,MAAI,gBAAgB,sBAAsB;AACzC,QAAI,CAAC,MAAM,KAAK,IAAI,KAAK,QAAQ;AAEjC,QAAI,cAAc,iBAAmB,cAAc,cAAgB;AAClE,eAAS;AAAA,IACV;AAEA,WAAO,CAAC,GAAG,MAAM,KAAK;AAAA,EACvB,OAAO;AACN,UAAM,QAAS,cAAc,iBAAmB,cAAc,eAAkB,IAAI;AACpF,WAAO,CAAC,GAAG,UAAU,KAAK;AAAA,EAC3B;AACD;AAhBgB;AAkBhB,SAAS,cAAc,SAA8B;AACpD,QAAM,gBAAgB,QAAQ;AAE9B,MAAI,CAAC,eAAe;AACnB,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACvC;AAEA,MAAI,KAAK,cAAc;AACvB,MAAI,QAAQ;AAEZ,SAAO,OAAO,WAAW,OAAO,cAAc,oBAAoB,IAAI;AACrE,SAAK,GAAG;AACR;AAAA,EACD;AAEA,SAAO;AACR;AAhBS;AAwBT,SAAS,gBAAgB,SAAoC;AAC5D,QAAM,gBAAgB,QAAQ;AAE9B,MAAI,CAAC,eAAe;AACnB,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACvC;AAEA,MAAI,uBAAuB,KAAK,cAAc,SAAS,GAAG;AACzD,WAAO,CAAC;AAAA,EACT;AAEA,QAAM,QAAQ,cAAc,aAAa;AACzC,QAAM,WAAW,cAAc,cAAe,cAAe,cAAe;AAC5E,SAAO,CAAC,GAAG,gBAAgB,QAAQ,GAAG,KAAK;AAC5C;AAdS;AAsBF,IAAU;AAAA,CAAV,CAAUG,YAAV;AACC,EAAMA,QAAA,aAA+B,EAAE,MAAM,aAAa;AAC1D,EAAMA,QAAA,QAAqB,EAAE,MAAM,QAAQ;AAC3C,EAAMA,QAAA,OAAmB,EAAE,MAAM,OAAO;AACxC,WAAS,UAAU,mBAA4C;AAAE,WAAO,EAAE,MAAM,aAAa,kBAAkB;AAAA,EAAG;AAAlH,EAAAA,QAAS;AAAA;AAAA,GAJA;AAiBV,MAAM,aAAsC,WAAW;AAAA,EA5N9D,OA4N8D;AAAA;AAAA;AAAA,EAEnD;AAAA,EACF,QAAQ,oBAAI,IAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMxC,IAAI,cAA2B;AAAE,WAAO,KAAK,SAAS;AAAA,EAAa;AAAA,EACnE,IAAI,YAAY,aAA0B;AAAE,SAAK,SAAS,cAAc;AAAA,EAAa;AAAA;AAAA;AAAA;AAAA,EAKrF,IAAI,QAAgB;AAAE,WAAO,KAAK,SAAS;AAAA,EAAO;AAAA;AAAA;AAAA;AAAA,EAKlD,IAAI,SAAiB;AAAE,WAAO,KAAK,SAAS;AAAA,EAAQ;AAAA;AAAA;AAAA;AAAA,EAKpD,IAAI,eAAuB;AAAE,WAAO,KAAK,SAAS;AAAA,EAAc;AAAA;AAAA;AAAA;AAAA,EAKhE,IAAI,gBAAwB;AAAE,WAAO,KAAK,SAAS;AAAA,EAAe;AAAA;AAAA;AAAA;AAAA,EAKlE,IAAI,eAAuB;AAAE,WAAO,KAAK,SAAS;AAAA,EAAc;AAAA;AAAA;AAAA;AAAA,EAKhE,IAAI,gBAAwB;AAAE,WAAO,KAAK,SAAS;AAAA,EAAe;AAAA;AAAA;AAAA;AAAA,EAKzD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMT,IAAI,iBAAkC;AAAE,WAAO,KAAK,SAAS;AAAA,EAAgB;AAAA,EAC7E,IAAI,eAAe,gBAAiC;AAAE,SAAK,SAAS,iBAAiB;AAAA,EAAgB;AAAA;AAAA;AAAA;AAAA,EAKrG,IAAI,aAAa,cAAuB;AAAE,SAAK,SAAS,eAAe;AAAA,EAAc;AAAA;AAAA;AAAA;AAAA,EAKrF,IAAI,UAAuB;AAAE,WAAO,KAAK,SAAS;AAAA,EAAS;AAAA,EAEnD,YAAY;AAAA,EAEX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOT,YAAY,MAAoB,UAAwB,CAAC,GAAG;AAC3D,UAAM;AAEN,QAAI,gBAAgB,UAAU;AAC7B,WAAK,WAAW;AAChB,WAAK,SAAS,WAAW,KAAK,KAAK;AAAA,IACpC,OAAO;AACN,WAAK,WAAW,IAAI,SAAS,OAAO;AAAA,IACrC;AAEA,SAAK,UAAU,KAAK,QAAQ;AAC5B,SAAK,UAAU,KAAK,SAAS,eAAe,KAAK,gBAAgB,IAAI,CAAC;AAEtE,QAAI,EAAE,gBAAgB,WAAW;AAChC,WAAK,SAAS,MAAM,GAAG,CAAC,CAAC,CAAC;AAAA,IAC3B;AAEA,SAAK,cAAc,KAAK,SAAS;AACjC,SAAK,cAAc,KAAK,SAAS;AACjC,SAAK,2BAA2B,KAAK,SAAS;AAAA,EAC/C;AAAA,EAEA,MAAM,QAA2B;AAChC,SAAK,SAAS,MAAM,MAAM;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,OAAe,QAAgB,MAAc,GAAG,OAAe,GAAS;AAC9E,SAAK,SAAS,OAAO,OAAO,QAAQ,KAAK,IAAI;AAC7C,SAAK,YAAY;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+CA,QAAQ,SAAY,MAAuB,eAAkB,WAA4B;AACxF,QAAI,KAAK,MAAM,IAAI,OAAO,GAAG;AAC5B,YAAM,IAAI,MAAM,2BAA4B;AAAA,IAC7C;AAEA,UAAM,cAAc,wBAAwB,SAAS;AAErD,QAAI,KAAK,MAAM,SAAS,KAAK,KAAK,gBAAgB,aAAa;AAC9D,WAAK,cAAc;AAAA,IACpB;AAEA,UAAM,oBAAoB,KAAK,gBAAgB,aAAa;AAC5D,UAAM,WAAW,oBAAoB,KAAK,SAAS,aAAa,mBAAmB,SAAS;AAE5F,QAAI;AAEJ,QAAI,OAAO,SAAS,UAAU;AAC7B,iBAAW;AAAA,IACZ,WAAW,KAAK,SAAS,SAAS;AACjC,YAAM,CAAC,EAAE,KAAK,IAAI,KAAK,iBAAiB;AACxC,iBAAW,eAAe,MAAM,KAAK;AAAA,IACtC,WAAW,KAAK,SAAS,cAAc;AACtC,iBAAW,eAAe;AAAA,IAC3B,WAAW,KAAK,SAAS,QAAQ;AAChC,YAAM,CAAC,EAAE,KAAK,IAAI,KAAK,iBAAiB;AACxC,iBAAW,eAAe,KAAK,KAAK;AAAA,IACrC,OAAO;AACN,iBAAW;AAAA,IACZ;AAEA,SAAK,SAAS,SAAS,UAAU,QAAQ;AAAA,EAC1C;AAAA,EAEQ,UAAU,SAAY,MAAmD,UAA8B;AAC9G,QAAI,KAAK,MAAM,IAAI,OAAO,GAAG;AAC5B,YAAM,IAAI,MAAM,2BAA4B;AAAA,IAC7C;AAEA,QAAI;AAEJ,QAAI,OAAO,SAAS,UAAU;AAC7B,iBAAW;AAAA,IACZ,WAAW,KAAK,SAAS,cAAc;AACtC,iBAAW,eAAe;AAAA,IAC3B,OAAO;AACN,iBAAW;AAAA,IACZ;AAEA,SAAK,SAAS,SAAS,UAAU,QAAQ;AAAA,EAC1C;AAAA,EAEU,SAAS,SAAY,MAA+B,UAA8B;AAC3F,SAAK,MAAM,IAAI,SAAS,QAAQ,OAAO;AACvC,SAAK,SAAS,QAAQ,SAAS,MAAM,QAAQ;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,MAAS,QAAuB;AAC1C,QAAI,KAAK,MAAM,SAAS,GAAG;AAC1B,YAAM,IAAI,MAAM,wBAAyB;AAAA,IAC1C;AAEA,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAE1C,QAAI;AAEJ,QAAI,QAAQ,SAAS,cAAc;AAClC,uBAAiB,eAAe;AAAA,IACjC,WAAW,QAAQ,SAAS,QAAQ;AACnC,YAAM,QAAQ,SAAS,SAAS,SAAS,CAAC;AAC1C,uBAAiB,eAAe,KAAK,UAAU,IAAI,IAAI,QAAQ,CAAC;AAAA,IACjE;AAEA,SAAK,SAAS,WAAW,UAAU,cAAc;AACjD,SAAK,MAAM,OAAO,IAAI;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,SAAS,MAAS,QAAyB,eAAkB,WAA4B;AACxF,UAAM,iBAAiB,KAAK,gBAAgB,IAAI;AAChD,UAAM,CAAC,sBAAsB,IAAI,IAAI,KAAK,cAAc;AAExD,UAAM,oBAAoB,KAAK,gBAAgB,aAAa;AAC5D,UAAM,iBAAiB,oBAAoB,KAAK,SAAS,aAAa,mBAAmB,SAAS;AAClG,UAAM,CAAC,sBAAsB,EAAE,IAAI,KAAK,cAAc;AAEtD,QAAI,OAAO,sBAAsB,oBAAoB,GAAG;AACvD,WAAK,SAAS,SAAS,sBAAsB,MAAM,EAAE;AAAA,IACtD,OAAO;AACN,WAAK,WAAW,MAAM,OAAO,WAAW,WAAW,SAAY,MAAM;AACrE,WAAK,QAAQ,MAAM,QAAQ,eAAe,SAAS;AAAA,IACpD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,WAAW,MAAS,UAA8B;AACjD,UAAM,iBAAiB,KAAK,gBAAgB,IAAI;AAChD,UAAM,CAAC,sBAAsB,IAAI,IAAI,KAAK,cAAc;AACxD,UAAM,CAAC,sBAAsB,EAAE,IAAI,KAAK,QAAQ;AAEhD,QAAI,OAAO,sBAAsB,oBAAoB,GAAG;AACvD,WAAK,SAAS,SAAS,sBAAsB,MAAM,EAAE;AAAA,IACtD,OAAO;AACN,YAAM,OAAO,KAAK,YAAY,IAAI;AAClC,YAAM,cAAc,uBAAuB,KAAK,SAAS,aAAa,cAAc;AACpF,YAAM,iBAAiB,KAAK,yBAAyB,IAAI;AACzD,YAAM,SAAS,OAAO,mBAAmB,cACrC,gBAAgB,YAAY,aAAa,KAAK,QAAQ,KAAK,SAC5D,OAAO,UAAU,cAAc;AAElC,WAAK,WAAW,IAAI;AACpB,WAAK,UAAU,MAAM,QAAQ,QAAQ;AAAA,IACtC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,MAAS,IAAa;AAC/B,UAAM,eAAe,KAAK,gBAAgB,IAAI;AAC9C,UAAM,aAAa,KAAK,gBAAgB,EAAE;AAC1C,WAAO,KAAK,SAAS,UAAU,cAAc,UAAU;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,MAAS,MAAuB;AAC1C,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,WAAO,KAAK,SAAS,WAAW,UAAU,IAAI;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,MAAkB;AAChC,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,WAAO,KAAK,SAAS,eAAe,QAAQ;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,MAAkB;AACjC,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,WAAO,KAAK,SAAS,gBAAgB,QAAQ;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAA4B;AAC3B,WAAO,KAAK,SAAS,iBAAiB;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,MAAqB;AAChC,QAAI,CAAC,MAAM;AACV,aAAO,KAAK,SAAS,YAAY;AAAA,IAClC;AAEA,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,WAAO,KAAK,SAAS,YAAY,QAAQ;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,yBAAyB,MAA6B;AACrD,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,WAAO,KAAK,SAAS,yBAAyB,QAAQ;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,MAAS;AACrB,QAAI,KAAK,MAAM,OAAO,GAAG;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACrE;AACA,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,SAAK,SAAS,aAAa,QAAQ;AAAA,EACpC;AAAA,EAEA,oBAA0B;AACzB,SAAK,SAAS,kBAAkB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,MAAe;AACzB,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,SAAK,SAAS,WAAW,QAAQ;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAA4B;AAC3B,SAAK,SAAS,oBAAoB;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,MAAkB;AAC/B,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,WAAO,KAAK,SAAS,cAAc,QAAQ;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,MAAS,SAAwB;AAC/C,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,SAAK,SAAS,eAAe,UAAU,OAAO;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAKA,WAA8B;AAC7B,WAAO,KAAK,SAAS,QAAQ;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiB,MAAS,WAAsB,OAAgB,OAAY;AAC3E,QAAI,CAAC,KAAK,WAAW;AACpB,YAAM,IAAI,MAAM,iDAAkD;AAAA,IACnE;AAEA,UAAM,WAAW,KAAK,gBAAgB,IAAI;AAC1C,UAAM,OAAO,KAAK,SAAS;AAC3B,UAAM,OAAO,YAAY,MAAM,QAAQ;AACvC,QAAI,WAAW,eAAe,KAAK,KAAK,SAAS;AAEjD,QAAI,MAAM;AACT,UAAI,cAAc,cAAgB,KAAK,IAAI,QAAQ,GAAG;AACrD,mBAAW,EAAE,QAAQ,KAAK,IAAI,MAAM,KAAK,IAAI,QAAQ,OAAO,SAAS,MAAM;AAAA,MAC5E,WAAW,cAAc,iBAAmB,KAAK,IAAI,OAAO,KAAK,IAAI,UAAU,KAAK,IAAI,OAAO;AAC9F,mBAAW,EAAE,QAAQ,GAAG,OAAO,SAAS,MAAM;AAAA,MAC/C,WAAW,cAAc,gBAAkB,KAAK,IAAI,MAAM,KAAK,IAAI,WAAW,KAAK,IAAI,QAAQ;AAC9F,mBAAW,EAAE,QAAQ,GAAG,OAAO,SAAS,MAAM;AAAA,MAC/C,WAAW,cAAc,gBAAkB,KAAK,IAAI,SAAS,GAAG;AAC/D,mBAAW,EAAE,QAAQ,KAAK,IAAI,OAAO,KAAK,IAAI,OAAO,OAAO,SAAS,MAAM;AAAA,MAC5E;AAAA,IACD;AAEA,WAAO,yBAAyB,MAAM,kBAAkB,SAAS,GAAG,QAAQ,EAC1E,IAAI,CAAAC,UAAQA,MAAK,IAAI;AAAA,EACxB;AAAA,EAEQ,gBAAgB,MAAuB;AAC9C,UAAM,UAAU,KAAK,MAAM,IAAI,IAAI;AAEnC,QAAI,CAAC,SAAS;AACb,YAAM,IAAI,MAAM,gBAAgB;AAAA,IACjC;AAEA,WAAO,gBAAgB,OAAO;AAAA,EAC/B;AAAA,EAEQ,eAAe,UAA8B;AACpD,UAAM,wBAAwB,wBAACC,cAAoC;AAClE,YAAM,OAAO,KAAK,SAAS,QAAQA,SAAQ;AAE3C,UAAI,iBAAiB,IAAI,GAAG;AAC3B,eAAO;AAAA,MACR;AAEA,YAAM,YAAY,uBAAuB,KAAK,aAAaA,SAAQ;AACnE,YAAM,OAAO,cAAc,YAAY,aAAa,KAAK,KAAK,iBAAiB,KAAK,KAAK;AAEzF,UAAI,OAAO,SAAS,UAAU;AAC7B,eAAO;AAAA,MACR;AAEA,YAAM,WAAW,cAAc,YAAY,aAAa,EAAE,OAAO,KAAK,MAAM,IAAI,EAAE,IAAI,EAAE,QAAQ,KAAK,MAAM,IAAI,EAAE;AACjH,WAAK,SAAS,WAAWA,WAAU,QAAQ;AAC3C,aAAO;AAAA,IACR,GAjB8B;AAmB9B,QAAI,sBAAsB,QAAQ,GAAG;AACpC;AAAA,IACD;AAEA,UAAM,CAAC,gBAAgB,KAAK,IAAI,KAAK,QAAQ;AAE7C,QAAI,sBAAsB,CAAC,GAAG,gBAAgB,QAAQ,CAAC,CAAC,GAAG;AAC1D;AAAA,IACD;AAEA,SAAK,SAAS,oBAAoB,cAAc;AAAA,EACjD;AACD;AAqCO,MAAM,yBAAsD,KAAQ;AAAA,EAxwB3E,OAwwB2E;AAAA;AAAA;AAAA,EAE1E,OAAe,cAA2C,MAAmB,aAA2C;AACvH,UAAM,OAAO,gBAAgB,YAAY,WAAW,KAAK,IAAI,QAAQ,KAAK,IAAI;AAE9E,QAAI,CAAC,iBAAiB,IAAI,GAAG;AAC5B,YAAM,qBAA0C,EAAE,MAAM,QAAQ,MAAM,KAAK,KAAK,OAAO,GAAG,KAAK;AAE/F,UAAI,OAAO,KAAK,sBAAsB,UAAU;AAC/C,2BAAmB,OAAO,KAAK;AAC/B,2BAAmB,UAAU;AAAA,MAC9B,WAAW,KAAK,WAAW;AAC1B,2BAAmB,YAAY;AAAA,MAChC;AAEA,aAAO;AAAA,IACR;AAEA,UAAM,OAAO,KAAK,SAAS,IAAI,OAAK,iBAAiB,cAAc,GAAG,WAAW,WAAW,CAAC,CAAC;AAC9F,QAAI,KAAK,KAAK,OAAK,EAAE,YAAY,KAAK,GAAG;AACxC,aAAO,EAAE,MAAM,UAAU,MAAY,KAAK;AAAA,IAC3C;AACA,WAAO,EAAE,MAAM,UAAU,MAAY,MAAM,SAAS,MAAM;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,YAAyC,MAAuB,cAAoC,UAAwB,CAAC,GAAwB;AAC3J,QAAI,OAAO,KAAK,gBAAgB,UAAU;AACzC,YAAM,IAAI,MAAM,wDAA0D;AAAA,IAC3E,WAAW,OAAO,KAAK,UAAU,UAAU;AAC1C,YAAM,IAAI,MAAM,kDAAoD;AAAA,IACrE,WAAW,OAAO,KAAK,WAAW,UAAU;AAC3C,YAAM,IAAI,MAAM,mDAAqD;AAAA,IACtE;AAEA,UAAM,WAAW,SAAS,YAAY,MAAM,cAAc,OAAO;AACjE,UAAM,SAAS,IAAI,iBAAoB,UAAU,OAAO;AAExD,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,KAAkC,gBAAmC,UAAwB,CAAC,GAAwB;AAC5H,WAAO,iBAAiB,YAAY,qBAAqB,cAAc,GAAG,EAAE,UAAU,iCAAQ,MAAR,YAAa,GAAG,OAAO;AAAA,EAC9G;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,uBAAgC;AAAA;AAAA;AAAA;AAAA,EAKxC,YAA6B;AAC5B,WAAO;AAAA,MACN,MAAM,iBAAiB,cAAc,KAAK,SAAS,GAAG,KAAK,WAAW;AAAA,MACtE,aAAa,KAAK;AAAA,MAClB,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,IACd;AAAA,EACD;AAAA,EAES,OAAO,OAAe,QAAgB,MAAc,GAAG,OAAe,GAAS;AACvF,UAAM,OAAO,OAAO,QAAQ,KAAK,IAAI;AAErC,QAAI,KAAK,sBAAsB;AAC9B,WAAK,uBAAuB;AAC5B,WAAK,SAAS,UAAU;AAAA,IACzB;AAAA,EACD;AACD;AAOA,SAAS,2BAA8B,gBAAsF;AAC5H,SAAO,CAAC,CAAE,eAA+C;AAC1D;AAFS;AAIF,SAAS,2BAA8B,gBAAuC,UAAyB;AAC7G,MAAI,CAAC,YAAa,eAAuB,UAAW,eAAuB,OAAO,UAAU,GAAG;AAC9F,IAAC,eAAuB,SAAS;AAAA,EAClC;AAEA,MAAI,CAAC,2BAA2B,cAAc,GAAG;AAChD;AAAA,EACD;AAEA,MAAI,mBAAmB;AACvB,MAAI,wBAAwB;AAE5B,aAAW,SAAS,eAAe,QAAQ;AAC1C,+BAA2B,OAAO,KAAK;AAEvC,QAAI,MAAM,MAAM;AACf,0BAAoB,MAAM;AAC1B;AAAA,IACD;AAAA,EACD;AAEA,QAAM,qBAAqB,wBAAwB,IAAI,mBAAmB;AAC1E,QAAM,0BAA0B,eAAe,OAAO,SAAS;AAC/D,QAAM,oBAAoB,qBAAqB;AAE/C,aAAW,SAAS,eAAe,QAAQ;AAC1C,QAAI,CAAC,MAAM,MAAM;AAChB,YAAM,OAAO;AAAA,IACd;AAAA,EACD;AACD;AA9BgB;AAgChB,SAAS,qBAAwB,gBAAwD;AACxF,MAAI,2BAA2B,cAAc,GAAG;AAC/C,WAAO,EAAE,MAAM,UAAU,MAAM,eAAe,OAAO,IAAI,OAAK,qBAAqB,CAAC,CAAC,GAAG,MAAM,eAAe,KAAM;AAAA,EACpH,OAAO;AACN,WAAO,EAAE,MAAM,QAAQ,MAAM,eAAe,MAAM,MAAM,eAAe,KAAM;AAAA,EAC9E;AACD;AANS;AAQT,SAAS,cAAc,MAAuB,aAA+D;AAC5G,MAAI,KAAK,SAAS,UAAU;AAC3B,UAAM,qBAAqB,KAAK,KAAK,IAAI,OAAK,cAAc,GAAG,WAAW,WAAW,CAAC,CAAC;AAEvF,QAAI,gBAAgB,YAAY,UAAU;AACzC,YAAM,QAAQ,KAAK,SAAS,mBAAmB,WAAW,IAAI,SAAY,KAAK,IAAI,GAAG,mBAAmB,IAAI,OAAK,EAAE,SAAS,CAAC,CAAC;AAC/H,YAAM,SAAS,mBAAmB,WAAW,IAAI,SAAY,mBAAmB,OAAO,CAAC,GAAG,MAAM,KAAK,EAAE,UAAU,IAAI,CAAC;AACvH,aAAO,EAAE,OAAO,OAAO;AAAA,IACxB,OAAO;AACN,YAAM,QAAQ,mBAAmB,WAAW,IAAI,SAAY,mBAAmB,OAAO,CAAC,GAAG,MAAM,KAAK,EAAE,SAAS,IAAI,CAAC;AACrH,YAAM,SAAS,KAAK,SAAS,mBAAmB,WAAW,IAAI,SAAY,KAAK,IAAI,GAAG,mBAAmB,IAAI,OAAK,EAAE,UAAU,CAAC,CAAC;AACjI,aAAO,EAAE,OAAO,OAAO;AAAA,IACxB;AAAA,EACD,OAAO;AACN,UAAM,QAAQ,gBAAgB,YAAY,WAAW,KAAK,OAAO;AACjE,UAAM,SAAS,gBAAgB,YAAY,WAAW,SAAY,KAAK;AACvE,WAAO,EAAE,OAAO,OAAO;AAAA,EACxB;AACD;AAlBS;AAwBF,SAAS,qBAAwB,gBAAoD;AAC3F,6BAA2B,gBAAgB,IAAI;AAE/C,QAAM,OAAO,qBAAqB,cAAc;AAChD,QAAM,EAAE,OAAO,OAAO,IAAI,cAAc,MAAM,eAAe,WAAW;AAExE,SAAO;AAAA,IACN;AAAA,IACA,aAAa,eAAe;AAAA,IAC5B,OAAO,SAAS;AAAA,IAChB,QAAQ,UAAU;AAAA,EACnB;AACD;AAZgB;",
  "names": ["Orientation", "orthogonal", "Direction", "boxNode", "direction", "boundary", "Sizing", "node", "location"]
}
