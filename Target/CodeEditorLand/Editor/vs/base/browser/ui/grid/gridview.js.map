{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/grid/gridview.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tequals as arrayEquals,\n\ttail2 as tail,\n} from \"../../../common/arrays.js\";\nimport { Color } from \"../../../common/color.js\";\nimport { Emitter, Event, Relay } from \"../../../common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../common/lifecycle.js\";\nimport { rot } from \"../../../common/numbers.js\";\nimport { isUndefined } from \"../../../common/types.js\";\nimport { $ } from \"../../dom.js\";\nimport { type IBoundarySashes, Orientation, type Sash } from \"../sash/sash.js\";\nimport {\n\ttype AutoSizing,\n\ttype DistributeSizing,\n\ttype IView as ISplitView,\n\ttype ISplitViewStyles,\n\tLayoutPriority,\n\tSizing,\n\tSplitView,\n} from \"../splitview/splitview.js\";\nimport \"./gridview.css\";\n\nexport { Orientation } from \"../sash/sash.js\";\nexport { LayoutPriority, Sizing } from \"../splitview/splitview.js\";\n\nexport interface IGridViewStyles extends ISplitViewStyles {}\n\nconst defaultStyles: IGridViewStyles = {\n\tseparatorBorder: Color.transparent,\n};\n\nexport interface IViewSize {\n\treadonly width: number;\n\treadonly height: number;\n}\n\ninterface IRelativeBoundarySashes {\n\treadonly start?: Sash;\n\treadonly end?: Sash;\n\treadonly orthogonalStart?: Sash;\n\treadonly orthogonalEnd?: Sash;\n}\n\n/**\n * The interface to implement for views within a {@link GridView}.\n */\nexport interface IView {\n\t/**\n\t * The DOM element for this view.\n\t */\n\treadonly element: HTMLElement;\n\n\t/**\n\t * A minimum width for this view.\n\t *\n\t * @remarks If none, set it to `0`.\n\t */\n\treadonly minimumWidth: number;\n\n\t/**\n\t * A minimum width for this view.\n\t *\n\t * @remarks If none, set it to `Number.POSITIVE_INFINITY`.\n\t */\n\treadonly maximumWidth: number;\n\n\t/**\n\t * A minimum height for this view.\n\t *\n\t * @remarks If none, set it to `0`.\n\t */\n\treadonly minimumHeight: number;\n\n\t/**\n\t * A minimum height for this view.\n\t *\n\t * @remarks If none, set it to `Number.POSITIVE_INFINITY`.\n\t */\n\treadonly maximumHeight: number;\n\n\t/**\n\t * The priority of the view when the {@link GridView} layout algorithm\n\t * runs. Views with higher priority will be resized first.\n\t *\n\t * @remarks Only used when `proportionalLayout` is false.\n\t */\n\treadonly priority?: LayoutPriority;\n\n\t/**\n\t * If the {@link GridView} supports proportional layout,\n\t * this property allows for finer control over the proportional layout algorithm, per view.\n\t *\n\t * @defaultValue `true`\n\t */\n\treadonly proportionalLayout?: boolean;\n\n\t/**\n\t * Whether the view will snap whenever the user reaches its minimum size or\n\t * attempts to grow it beyond the minimum size.\n\t *\n\t * @defaultValue `false`\n\t */\n\treadonly snap?: boolean;\n\n\t/**\n\t * View instances are supposed to fire this event whenever any of the constraint\n\t * properties have changed:\n\t *\n\t * - {@link IView.minimumWidth}\n\t * - {@link IView.maximumWidth}\n\t * - {@link IView.minimumHeight}\n\t * - {@link IView.maximumHeight}\n\t * - {@link IView.priority}\n\t * - {@link IView.snap}\n\t *\n\t * The {@link GridView} will relayout whenever that happens. The event can\n\t * optionally emit the view's preferred size for that relayout.\n\t */\n\treadonly onDidChange: Event<IViewSize | undefined>;\n\n\t/**\n\t * This will be called by the {@link GridView} during layout. A view meant to\n\t * pass along the layout information down to its descendants.\n\t */\n\tlayout(width: number, height: number, top: number, left: number): void;\n\n\t/**\n\t * This will be called by the {@link GridView} whenever this view is made\n\t * visible or hidden.\n\t *\n\t * @param visible Whether the view becomes visible.\n\t */\n\tsetVisible?(visible: boolean): void;\n\n\t/**\n\t * This will be called by the {@link GridView} whenever this view is on\n\t * an edge of the grid and the grid's\n\t * {@link GridView.boundarySashes boundary sashes} change.\n\t */\n\tsetBoundarySashes?(sashes: IBoundarySashes): void;\n}\n\nexport interface ISerializableView extends IView {\n\ttoJSON(): object;\n}\n\nexport interface IViewDeserializer<T extends ISerializableView> {\n\tfromJSON(json: any): T;\n}\n\nexport interface ISerializedLeafNode {\n\ttype: \"leaf\";\n\tdata: any;\n\tsize: number;\n\tvisible?: boolean;\n\tmaximized?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n\ttype: \"branch\";\n\tdata: ISerializedNode[];\n\tsize: number;\n\tvisible?: boolean;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface ISerializedGridView {\n\troot: ISerializedNode;\n\torientation: Orientation;\n\twidth: number;\n\theight: number;\n}\n\nexport function orthogonal(orientation: Orientation): Orientation {\n\treturn orientation === Orientation.VERTICAL\n\t\t? Orientation.HORIZONTAL\n\t\t: Orientation.VERTICAL;\n}\n\nexport interface Box {\n\treadonly top: number;\n\treadonly left: number;\n\treadonly width: number;\n\treadonly height: number;\n}\n\nexport interface GridLeafNode {\n\treadonly view: IView;\n\treadonly box: Box;\n\treadonly cachedVisibleSize: number | undefined;\n\treadonly maximized: boolean;\n}\n\nexport interface GridBranchNode {\n\treadonly children: GridNode[];\n\treadonly box: Box;\n}\n\nexport type GridNode = GridLeafNode | GridBranchNode;\n\nexport function isGridBranchNode(node: GridNode): node is GridBranchNode {\n\treturn !!(node as any).children;\n}\n\nclass LayoutController {\n\tconstructor(public isLayoutEnabled: boolean) {}\n}\n\nexport interface IGridViewOptions {\n\t/**\n\t * Styles overriding the {@link defaultStyles default ones}.\n\t */\n\treadonly styles?: IGridViewStyles;\n\n\t/**\n\t * Resize each view proportionally when resizing the {@link GridView}.\n\t *\n\t * @defaultValue `true`\n\t */\n\treadonly proportionalLayout?: boolean; // default true\n}\n\ninterface ILayoutContext {\n\treadonly orthogonalSize: number;\n\treadonly absoluteOffset: number;\n\treadonly absoluteOrthogonalOffset: number;\n\treadonly absoluteSize: number;\n\treadonly absoluteOrthogonalSize: number;\n}\n\nfunction toAbsoluteBoundarySashes(\n\tsashes: IRelativeBoundarySashes,\n\torientation: Orientation,\n): IBoundarySashes {\n\tif (orientation === Orientation.HORIZONTAL) {\n\t\treturn {\n\t\t\tleft: sashes.start,\n\t\t\tright: sashes.end,\n\t\t\ttop: sashes.orthogonalStart,\n\t\t\tbottom: sashes.orthogonalEnd,\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\ttop: sashes.start,\n\t\t\tbottom: sashes.end,\n\t\t\tleft: sashes.orthogonalStart,\n\t\t\tright: sashes.orthogonalEnd,\n\t\t};\n\t}\n}\n\nfunction fromAbsoluteBoundarySashes(\n\tsashes: IBoundarySashes,\n\torientation: Orientation,\n): IRelativeBoundarySashes {\n\tif (orientation === Orientation.HORIZONTAL) {\n\t\treturn {\n\t\t\tstart: sashes.left,\n\t\t\tend: sashes.right,\n\t\t\torthogonalStart: sashes.top,\n\t\t\torthogonalEnd: sashes.bottom,\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tstart: sashes.top,\n\t\t\tend: sashes.bottom,\n\t\t\torthogonalStart: sashes.left,\n\t\t\torthogonalEnd: sashes.right,\n\t\t};\n\t}\n}\n\nfunction validateIndex(index: number, numChildren: number): number {\n\tif (Math.abs(index) > numChildren) {\n\t\tthrow new Error(\"Invalid index\");\n\t}\n\n\treturn rot(index, numChildren + 1);\n}\n\nclass BranchNode implements ISplitView<ILayoutContext>, IDisposable {\n\treadonly element: HTMLElement;\n\treadonly children: Node[] = [];\n\tprivate splitview: SplitView<ILayoutContext, Node>;\n\n\tprivate _size: number;\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\tprivate _orthogonalSize: number;\n\tget orthogonalSize(): number {\n\t\treturn this._orthogonalSize;\n\t}\n\n\tprivate _absoluteOffset = 0;\n\tget absoluteOffset(): number {\n\t\treturn this._absoluteOffset;\n\t}\n\n\tprivate _absoluteOrthogonalOffset = 0;\n\tget absoluteOrthogonalOffset(): number {\n\t\treturn this._absoluteOrthogonalOffset;\n\t}\n\n\tprivate absoluteOrthogonalSize = 0;\n\n\tprivate _styles: IGridViewStyles;\n\tget styles(): IGridViewStyles {\n\t\treturn this._styles;\n\t}\n\n\tget width(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.size\n\t\t\t: this.orthogonalSize;\n\t}\n\n\tget height(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.orthogonalSize\n\t\t\t: this.size;\n\t}\n\n\tget top(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this._absoluteOffset\n\t\t\t: this._absoluteOrthogonalOffset;\n\t}\n\n\tget left(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this._absoluteOrthogonalOffset\n\t\t\t: this._absoluteOffset;\n\t}\n\n\tget minimumSize(): number {\n\t\treturn this.children.length === 0\n\t\t\t? 0\n\t\t\t: Math.max(\n\t\t\t\t\t...this.children.map((c, index) =>\n\t\t\t\t\t\tthis.splitview.isViewVisible(index)\n\t\t\t\t\t\t\t? c.minimumOrthogonalSize\n\t\t\t\t\t\t\t: 0,\n\t\t\t\t\t),\n\t\t\t\t);\n\t}\n\n\tget maximumSize(): number {\n\t\treturn Math.min(\n\t\t\t...this.children.map((c, index) =>\n\t\t\t\tthis.splitview.isViewVisible(index)\n\t\t\t\t\t? c.maximumOrthogonalSize\n\t\t\t\t\t: Number.POSITIVE_INFINITY,\n\t\t\t),\n\t\t);\n\t}\n\n\tget priority(): LayoutPriority {\n\t\tif (this.children.length === 0) {\n\t\t\treturn LayoutPriority.Normal;\n\t\t}\n\n\t\tconst priorities = this.children.map((c) =>\n\t\t\ttypeof c.priority === \"undefined\"\n\t\t\t\t? LayoutPriority.Normal\n\t\t\t\t: c.priority,\n\t\t);\n\n\t\tif (priorities.some((p) => p === LayoutPriority.High)) {\n\t\t\treturn LayoutPriority.High;\n\t\t} else if (priorities.some((p) => p === LayoutPriority.Low)) {\n\t\t\treturn LayoutPriority.Low;\n\t\t}\n\n\t\treturn LayoutPriority.Normal;\n\t}\n\n\tget proportionalLayout(): boolean {\n\t\tif (this.children.length === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.children.every((c) => c.proportionalLayout);\n\t}\n\n\tget minimumOrthogonalSize(): number {\n\t\treturn this.splitview.minimumSize;\n\t}\n\n\tget maximumOrthogonalSize(): number {\n\t\treturn this.splitview.maximumSize;\n\t}\n\n\tget minimumWidth(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.minimumOrthogonalSize\n\t\t\t: this.minimumSize;\n\t}\n\n\tget minimumHeight(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.minimumSize\n\t\t\t: this.minimumOrthogonalSize;\n\t}\n\n\tget maximumWidth(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.maximumOrthogonalSize\n\t\t\t: this.maximumSize;\n\t}\n\n\tget maximumHeight(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.maximumSize\n\t\t\t: this.maximumOrthogonalSize;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<number | undefined>();\n\treadonly onDidChange: Event<number | undefined> = this._onDidChange.event;\n\n\tprivate readonly _onDidVisibilityChange = new Emitter<boolean>();\n\treadonly onDidVisibilityChange: Event<boolean> =\n\t\tthis._onDidVisibilityChange.event;\n\tprivate readonly childrenVisibilityChangeDisposable: DisposableStore =\n\t\tnew DisposableStore();\n\n\tprivate _onDidScroll = new Emitter<void>();\n\tprivate onDidScrollDisposable: IDisposable = Disposable.None;\n\treadonly onDidScroll: Event<void> = this._onDidScroll.event;\n\n\tprivate childrenChangeDisposable: IDisposable = Disposable.None;\n\n\tprivate readonly _onDidSashReset = new Emitter<GridLocation>();\n\treadonly onDidSashReset: Event<GridLocation> = this._onDidSashReset.event;\n\tprivate splitviewSashResetDisposable: IDisposable = Disposable.None;\n\tprivate childrenSashResetDisposable: IDisposable = Disposable.None;\n\n\tprivate _boundarySashes: IRelativeBoundarySashes = {};\n\tget boundarySashes(): IRelativeBoundarySashes {\n\t\treturn this._boundarySashes;\n\t}\n\tset boundarySashes(boundarySashes: IRelativeBoundarySashes) {\n\t\tif (\n\t\t\tthis._boundarySashes.start === boundarySashes.start &&\n\t\t\tthis._boundarySashes.end === boundarySashes.end &&\n\t\t\tthis._boundarySashes.orthogonalStart ===\n\t\t\t\tboundarySashes.orthogonalStart &&\n\t\t\tthis._boundarySashes.orthogonalEnd === boundarySashes.orthogonalEnd\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._boundarySashes = boundarySashes;\n\n\t\tthis.splitview.orthogonalStartSash = boundarySashes.orthogonalStart;\n\t\tthis.splitview.orthogonalEndSash = boundarySashes.orthogonalEnd;\n\n\t\tfor (let index = 0; index < this.children.length; index++) {\n\t\t\tconst child = this.children[index];\n\t\t\tconst first = index === 0;\n\t\t\tconst last = index === this.children.length - 1;\n\n\t\t\tchild.boundarySashes = {\n\t\t\t\tstart: boundarySashes.orthogonalStart,\n\t\t\t\tend: boundarySashes.orthogonalEnd,\n\t\t\t\torthogonalStart: first\n\t\t\t\t\t? boundarySashes.start\n\t\t\t\t\t: child.boundarySashes.orthogonalStart,\n\t\t\t\torthogonalEnd: last\n\t\t\t\t\t? boundarySashes.end\n\t\t\t\t\t: child.boundarySashes.orthogonalEnd,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate _edgeSnapping = false;\n\tget edgeSnapping(): boolean {\n\t\treturn this._edgeSnapping;\n\t}\n\tset edgeSnapping(edgeSnapping: boolean) {\n\t\tif (this._edgeSnapping === edgeSnapping) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._edgeSnapping = edgeSnapping;\n\n\t\tfor (const child of this.children) {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tchild.edgeSnapping = edgeSnapping;\n\t\t\t}\n\t\t}\n\n\t\tthis.updateSplitviewEdgeSnappingEnablement();\n\t}\n\n\tconstructor(\n\t\treadonly orientation: Orientation,\n\t\treadonly layoutController: LayoutController,\n\t\tstyles: IGridViewStyles,\n\t\treadonly splitviewProportionalLayout: boolean,\n\t\tsize = 0,\n\t\torthogonalSize = 0,\n\t\tedgeSnapping = false,\n\t\tchildDescriptors?: INodeDescriptor[],\n\t) {\n\t\tthis._styles = styles;\n\t\tthis._size = size;\n\t\tthis._orthogonalSize = orthogonalSize;\n\n\t\tthis.element = $(\".monaco-grid-branch-node\");\n\n\t\tif (childDescriptors) {\n\t\t\t// Reconstruction behavior, we want to reconstruct a splitview\n\t\t\tconst descriptor = {\n\t\t\t\tviews: childDescriptors.map((childDescriptor) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tview: childDescriptor.node,\n\t\t\t\t\t\tsize: childDescriptor.node.size,\n\t\t\t\t\t\tvisible: childDescriptor.visible !== false,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t\tsize: this.orthogonalSize,\n\t\t\t};\n\n\t\t\tconst options = {\n\t\t\t\tproportionalLayout: splitviewProportionalLayout,\n\t\t\t\torientation,\n\t\t\t\tstyles,\n\t\t\t};\n\n\t\t\tthis.children = childDescriptors.map((c) => c.node);\n\t\t\tthis.splitview = new SplitView(this.element, {\n\t\t\t\t...options,\n\t\t\t\tdescriptor,\n\t\t\t});\n\n\t\t\tthis.children.forEach((node, index) => {\n\t\t\t\tconst first = index === 0;\n\t\t\t\tconst last = index === this.children.length;\n\n\t\t\t\tnode.boundarySashes = {\n\t\t\t\t\tstart: this.boundarySashes.orthogonalStart,\n\t\t\t\t\tend: this.boundarySashes.orthogonalEnd,\n\t\t\t\t\torthogonalStart: first\n\t\t\t\t\t\t? this.boundarySashes.start\n\t\t\t\t\t\t: this.splitview.sashes[index - 1],\n\t\t\t\t\torthogonalEnd: last\n\t\t\t\t\t\t? this.boundarySashes.end\n\t\t\t\t\t\t: this.splitview.sashes[index],\n\t\t\t\t};\n\t\t\t});\n\t\t} else {\n\t\t\t// Normal behavior, we have no children yet, just set up the splitview\n\t\t\tthis.splitview = new SplitView(this.element, {\n\t\t\t\torientation,\n\t\t\t\tstyles,\n\t\t\t\tproportionalLayout: splitviewProportionalLayout,\n\t\t\t});\n\t\t\tthis.splitview.layout(size, {\n\t\t\t\torthogonalSize,\n\t\t\t\tabsoluteOffset: 0,\n\t\t\t\tabsoluteOrthogonalOffset: 0,\n\t\t\t\tabsoluteSize: size,\n\t\t\t\tabsoluteOrthogonalSize: orthogonalSize,\n\t\t\t});\n\t\t}\n\n\t\tconst onDidSashReset = Event.map(this.splitview.onDidSashReset, (i) => [\n\t\t\ti,\n\t\t]);\n\t\tthis.splitviewSashResetDisposable = onDidSashReset(\n\t\t\tthis._onDidSashReset.fire,\n\t\t\tthis._onDidSashReset,\n\t\t);\n\n\t\tthis.updateChildrenEvents();\n\t}\n\n\tstyle(styles: IGridViewStyles): void {\n\t\tthis._styles = styles;\n\t\tthis.splitview.style(styles);\n\n\t\tfor (const child of this.children) {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tchild.style(styles);\n\t\t\t}\n\t\t}\n\t}\n\n\tlayout(\n\t\tsize: number,\n\t\toffset: number,\n\t\tctx: ILayoutContext | undefined,\n\t): void {\n\t\tif (!this.layoutController.isLayoutEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof ctx === \"undefined\") {\n\t\t\tthrow new Error(\"Invalid state\");\n\t\t}\n\n\t\t// branch nodes should flip the normal/orthogonal directions\n\t\tthis._size = ctx.orthogonalSize;\n\t\tthis._orthogonalSize = size;\n\t\tthis._absoluteOffset = ctx.absoluteOffset + offset;\n\t\tthis._absoluteOrthogonalOffset = ctx.absoluteOrthogonalOffset;\n\t\tthis.absoluteOrthogonalSize = ctx.absoluteOrthogonalSize;\n\n\t\tthis.splitview.layout(ctx.orthogonalSize, {\n\t\t\torthogonalSize: size,\n\t\t\tabsoluteOffset: this._absoluteOrthogonalOffset,\n\t\t\tabsoluteOrthogonalOffset: this._absoluteOffset,\n\t\t\tabsoluteSize: ctx.absoluteOrthogonalSize,\n\t\t\tabsoluteOrthogonalSize: ctx.absoluteSize,\n\t\t});\n\n\t\tthis.updateSplitviewEdgeSnappingEnablement();\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tfor (const child of this.children) {\n\t\t\tchild.setVisible(visible);\n\t\t}\n\t}\n\n\taddChild(\n\t\tnode: Node,\n\t\tsize: number | Sizing,\n\t\tindex: number,\n\t\tskipLayout?: boolean,\n\t): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tthis.splitview.addView(node, size, index, skipLayout);\n\t\tthis.children.splice(index, 0, node);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tremoveChild(index: number, sizing?: Sizing): Node {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tconst result = this.splitview.removeView(index, sizing);\n\t\tthis.children.splice(index, 1);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\n\t\treturn result;\n\t}\n\n\tremoveAllChildren(): Node[] {\n\t\tconst result = this.splitview.removeAllViews();\n\n\t\tthis.children.splice(0, this.children.length);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\n\t\treturn result;\n\t}\n\n\tmoveChild(from: number, to: number): void {\n\t\tfrom = validateIndex(from, this.children.length);\n\t\tto = validateIndex(to, this.children.length);\n\n\t\tif (from === to) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (from < to) {\n\t\t\tto -= 1;\n\t\t}\n\n\t\tthis.splitview.moveView(from, to);\n\t\tthis.children.splice(to, 0, this.children.splice(from, 1)[0]);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tswapChildren(from: number, to: number): void {\n\t\tfrom = validateIndex(from, this.children.length);\n\t\tto = validateIndex(to, this.children.length);\n\n\t\tif (from === to) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.splitview.swapViews(from, to);\n\n\t\t// swap boundary sashes\n\t\t[this.children[from].boundarySashes, this.children[to].boundarySashes] =\n\t\t\t[\n\t\t\t\tthis.children[from].boundarySashes,\n\t\t\t\tthis.children[to].boundarySashes,\n\t\t\t];\n\n\t\t// swap children\n\t\t[this.children[from], this.children[to]] = [\n\t\t\tthis.children[to],\n\t\t\tthis.children[from],\n\t\t];\n\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tresizeChild(index: number, size: number): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tthis.splitview.resizeView(index, size);\n\t}\n\n\tisChildExpanded(index: number): boolean {\n\t\treturn this.splitview.isViewExpanded(index);\n\t}\n\n\tdistributeViewSizes(recursive = false): void {\n\t\tthis.splitview.distributeViewSizes();\n\n\t\tif (recursive) {\n\t\t\tfor (const child of this.children) {\n\t\t\t\tif (child instanceof BranchNode) {\n\t\t\t\t\tchild.distributeViewSizes(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetChildSize(index: number): number {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.getViewSize(index);\n\t}\n\n\tisChildVisible(index: number): boolean {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.isViewVisible(index);\n\t}\n\n\tsetChildVisible(index: number, visible: boolean): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tif (this.splitview.isViewVisible(index) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wereAllChildrenHidden = this.splitview.contentSize === 0;\n\t\tthis.splitview.setViewVisible(index, visible);\n\t\tconst areAllChildrenHidden = this.splitview.contentSize === 0;\n\n\t\t// If all children are hidden then the parent should hide the entire splitview\n\t\t// If the entire splitview is hidden then the parent should show the splitview when a child is shown\n\t\tif (\n\t\t\t(visible && wereAllChildrenHidden) ||\n\t\t\t(!visible && areAllChildrenHidden)\n\t\t) {\n\t\t\tthis._onDidVisibilityChange.fire(visible);\n\t\t}\n\t}\n\n\tgetChildCachedVisibleSize(index: number): number | undefined {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.getViewCachedVisibleSize(index);\n\t}\n\n\tprivate updateBoundarySashes(): void {\n\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\tthis.children[i].boundarySashes = {\n\t\t\t\tstart: this.boundarySashes.orthogonalStart,\n\t\t\t\tend: this.boundarySashes.orthogonalEnd,\n\t\t\t\torthogonalStart:\n\t\t\t\t\ti === 0\n\t\t\t\t\t\t? this.boundarySashes.start\n\t\t\t\t\t\t: this.splitview.sashes[i - 1],\n\t\t\t\torthogonalEnd:\n\t\t\t\t\ti === this.children.length - 1\n\t\t\t\t\t\t? this.boundarySashes.end\n\t\t\t\t\t\t: this.splitview.sashes[i],\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate onDidChildrenChange(): void {\n\t\tthis.updateChildrenEvents();\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tprivate updateChildrenEvents(): void {\n\t\tconst onDidChildrenChange = Event.map(\n\t\t\tEvent.any(...this.children.map((c) => c.onDidChange)),\n\t\t\t() => undefined,\n\t\t);\n\t\tthis.childrenChangeDisposable.dispose();\n\t\tthis.childrenChangeDisposable = onDidChildrenChange(\n\t\t\tthis._onDidChange.fire,\n\t\t\tthis._onDidChange,\n\t\t);\n\n\t\tconst onDidChildrenSashReset = Event.any(\n\t\t\t...this.children.map((c, i) =>\n\t\t\t\tEvent.map(c.onDidSashReset, (location) => [i, ...location]),\n\t\t\t),\n\t\t);\n\t\tthis.childrenSashResetDisposable.dispose();\n\t\tthis.childrenSashResetDisposable = onDidChildrenSashReset(\n\t\t\tthis._onDidSashReset.fire,\n\t\t\tthis._onDidSashReset,\n\t\t);\n\n\t\tconst onDidScroll = Event.any(\n\t\t\tEvent.signal(this.splitview.onDidScroll),\n\t\t\t...this.children.map((c) => c.onDidScroll),\n\t\t);\n\t\tthis.onDidScrollDisposable.dispose();\n\t\tthis.onDidScrollDisposable = onDidScroll(\n\t\t\tthis._onDidScroll.fire,\n\t\t\tthis._onDidScroll,\n\t\t);\n\n\t\tthis.childrenVisibilityChangeDisposable.clear();\n\t\tthis.children.forEach((child, index) => {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tthis.childrenVisibilityChangeDisposable.add(\n\t\t\t\t\tchild.onDidVisibilityChange((visible) => {\n\t\t\t\t\t\tthis.setChildVisible(index, visible);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\ttrySet2x2(other: BranchNode): IDisposable {\n\t\tif (this.children.length !== 2 || other.children.length !== 2) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.getChildSize(0) !== other.getChildSize(0)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst [firstChild, secondChild] = this.children;\n\t\tconst [otherFirstChild, otherSecondChild] = other.children;\n\n\t\tif (\n\t\t\t!(firstChild instanceof LeafNode) ||\n\t\t\t!(secondChild instanceof LeafNode)\n\t\t) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (\n\t\t\t!(otherFirstChild instanceof LeafNode) ||\n\t\t\t!(otherSecondChild instanceof LeafNode)\n\t\t) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.orientation === Orientation.VERTICAL) {\n\t\t\tsecondChild.linkedWidthNode = otherFirstChild.linkedHeightNode =\n\t\t\t\tfirstChild;\n\t\t\tfirstChild.linkedWidthNode = otherSecondChild.linkedHeightNode =\n\t\t\t\tsecondChild;\n\t\t\totherSecondChild.linkedWidthNode = firstChild.linkedHeightNode =\n\t\t\t\totherFirstChild;\n\t\t\totherFirstChild.linkedWidthNode = secondChild.linkedHeightNode =\n\t\t\t\totherSecondChild;\n\t\t} else {\n\t\t\totherFirstChild.linkedWidthNode = secondChild.linkedHeightNode =\n\t\t\t\tfirstChild;\n\t\t\totherSecondChild.linkedWidthNode = firstChild.linkedHeightNode =\n\t\t\t\tsecondChild;\n\t\t\tfirstChild.linkedWidthNode = otherSecondChild.linkedHeightNode =\n\t\t\t\totherFirstChild;\n\t\t\tsecondChild.linkedWidthNode = otherFirstChild.linkedHeightNode =\n\t\t\t\totherSecondChild;\n\t\t}\n\n\t\tconst mySash = this.splitview.sashes[0];\n\t\tconst otherSash = other.splitview.sashes[0];\n\t\tmySash.linkedSash = otherSash;\n\t\totherSash.linkedSash = mySash;\n\n\t\tthis._onDidChange.fire(undefined);\n\t\tother._onDidChange.fire(undefined);\n\n\t\treturn toDisposable(() => {\n\t\t\tmySash.linkedSash = otherSash.linkedSash = undefined;\n\t\t\tfirstChild.linkedHeightNode = firstChild.linkedWidthNode =\n\t\t\t\tundefined;\n\t\t\tsecondChild.linkedHeightNode = secondChild.linkedWidthNode =\n\t\t\t\tundefined;\n\t\t\totherFirstChild.linkedHeightNode = otherFirstChild.linkedWidthNode =\n\t\t\t\tundefined;\n\t\t\totherSecondChild.linkedHeightNode =\n\t\t\t\totherSecondChild.linkedWidthNode = undefined;\n\t\t});\n\t}\n\n\tprivate updateSplitviewEdgeSnappingEnablement(): void {\n\t\tthis.splitview.startSnappingEnabled =\n\t\t\tthis._edgeSnapping || this._absoluteOrthogonalOffset > 0;\n\t\tthis.splitview.endSnappingEnabled =\n\t\t\tthis._edgeSnapping ||\n\t\t\tthis._absoluteOrthogonalOffset + this._size <\n\t\t\t\tthis.absoluteOrthogonalSize;\n\t}\n\n\tdispose(): void {\n\t\tfor (const child of this.children) {\n\t\t\tchild.dispose();\n\t\t}\n\n\t\tthis._onDidChange.dispose();\n\t\tthis._onDidSashReset.dispose();\n\t\tthis._onDidVisibilityChange.dispose();\n\n\t\tthis.childrenVisibilityChangeDisposable.dispose();\n\t\tthis.splitviewSashResetDisposable.dispose();\n\t\tthis.childrenSashResetDisposable.dispose();\n\t\tthis.childrenChangeDisposable.dispose();\n\t\tthis.onDidScrollDisposable.dispose();\n\t\tthis.splitview.dispose();\n\t}\n}\n\n/**\n * Creates a latched event that avoids being fired when the view\n * constraints do not change at all.\n */\nfunction createLatchedOnDidChangeViewEvent(\n\tview: IView,\n): Event<IViewSize | undefined> {\n\tconst [onDidChangeViewConstraints, onDidSetViewSize] = Event.split<\n\t\tundefined,\n\t\tIViewSize\n\t>(view.onDidChange, isUndefined);\n\n\treturn Event.any(\n\t\tonDidSetViewSize,\n\t\tEvent.map(\n\t\t\tEvent.latch(\n\t\t\t\tEvent.map(onDidChangeViewConstraints, (_) => [\n\t\t\t\t\tview.minimumWidth,\n\t\t\t\t\tview.maximumWidth,\n\t\t\t\t\tview.minimumHeight,\n\t\t\t\t\tview.maximumHeight,\n\t\t\t\t]),\n\t\t\t\tarrayEquals,\n\t\t\t),\n\t\t\t(_) => undefined,\n\t\t),\n\t);\n}\n\nclass LeafNode implements ISplitView<ILayoutContext>, IDisposable {\n\tprivate _size = 0;\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\tprivate _orthogonalSize: number;\n\tget orthogonalSize(): number {\n\t\treturn this._orthogonalSize;\n\t}\n\n\tprivate absoluteOffset = 0;\n\tprivate absoluteOrthogonalOffset = 0;\n\n\treadonly onDidScroll: Event<void> = Event.None;\n\treadonly onDidSashReset: Event<GridLocation> = Event.None;\n\n\tprivate _onDidLinkedWidthNodeChange = new Relay<number | undefined>();\n\tprivate _linkedWidthNode: LeafNode | undefined = undefined;\n\tget linkedWidthNode(): LeafNode | undefined {\n\t\treturn this._linkedWidthNode;\n\t}\n\tset linkedWidthNode(node: LeafNode | undefined) {\n\t\tthis._onDidLinkedWidthNodeChange.input = node\n\t\t\t? node._onDidViewChange\n\t\t\t: Event.None;\n\t\tthis._linkedWidthNode = node;\n\t\tthis._onDidSetLinkedNode.fire(undefined);\n\t}\n\n\tprivate _onDidLinkedHeightNodeChange = new Relay<number | undefined>();\n\tprivate _linkedHeightNode: LeafNode | undefined = undefined;\n\tget linkedHeightNode(): LeafNode | undefined {\n\t\treturn this._linkedHeightNode;\n\t}\n\tset linkedHeightNode(node: LeafNode | undefined) {\n\t\tthis._onDidLinkedHeightNodeChange.input = node\n\t\t\t? node._onDidViewChange\n\t\t\t: Event.None;\n\t\tthis._linkedHeightNode = node;\n\t\tthis._onDidSetLinkedNode.fire(undefined);\n\t}\n\n\tprivate readonly _onDidSetLinkedNode = new Emitter<number | undefined>();\n\tprivate _onDidViewChange: Event<number | undefined>;\n\treadonly onDidChange: Event<number | undefined>;\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\treadonly view: IView,\n\t\treadonly orientation: Orientation,\n\t\treadonly layoutController: LayoutController,\n\t\torthogonalSize: number,\n\t\tsize = 0,\n\t) {\n\t\tthis._orthogonalSize = orthogonalSize;\n\t\tthis._size = size;\n\n\t\tconst onDidChange = createLatchedOnDidChangeViewEvent(view);\n\t\tthis._onDidViewChange = Event.map(\n\t\t\tonDidChange,\n\t\t\t(e) =>\n\t\t\t\te &&\n\t\t\t\t(this.orientation === Orientation.VERTICAL\n\t\t\t\t\t? e.width\n\t\t\t\t\t: e.height),\n\t\t\tthis.disposables,\n\t\t);\n\t\tthis.onDidChange = Event.any(\n\t\t\tthis._onDidViewChange,\n\t\t\tthis._onDidSetLinkedNode.event,\n\t\t\tthis._onDidLinkedWidthNodeChange.event,\n\t\t\tthis._onDidLinkedHeightNodeChange.event,\n\t\t);\n\t}\n\n\tget width(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.orthogonalSize\n\t\t\t: this.size;\n\t}\n\n\tget height(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.size\n\t\t\t: this.orthogonalSize;\n\t}\n\n\tget top(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.absoluteOffset\n\t\t\t: this.absoluteOrthogonalOffset;\n\t}\n\n\tget left(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.absoluteOrthogonalOffset\n\t\t\t: this.absoluteOffset;\n\t}\n\n\tget element(): HTMLElement {\n\t\treturn this.view.element;\n\t}\n\n\tprivate get minimumWidth(): number {\n\t\treturn this.linkedWidthNode\n\t\t\t? Math.max(\n\t\t\t\t\tthis.linkedWidthNode.view.minimumWidth,\n\t\t\t\t\tthis.view.minimumWidth,\n\t\t\t\t)\n\t\t\t: this.view.minimumWidth;\n\t}\n\n\tprivate get maximumWidth(): number {\n\t\treturn this.linkedWidthNode\n\t\t\t? Math.min(\n\t\t\t\t\tthis.linkedWidthNode.view.maximumWidth,\n\t\t\t\t\tthis.view.maximumWidth,\n\t\t\t\t)\n\t\t\t: this.view.maximumWidth;\n\t}\n\n\tprivate get minimumHeight(): number {\n\t\treturn this.linkedHeightNode\n\t\t\t? Math.max(\n\t\t\t\t\tthis.linkedHeightNode.view.minimumHeight,\n\t\t\t\t\tthis.view.minimumHeight,\n\t\t\t\t)\n\t\t\t: this.view.minimumHeight;\n\t}\n\n\tprivate get maximumHeight(): number {\n\t\treturn this.linkedHeightNode\n\t\t\t? Math.min(\n\t\t\t\t\tthis.linkedHeightNode.view.maximumHeight,\n\t\t\t\t\tthis.view.maximumHeight,\n\t\t\t\t)\n\t\t\t: this.view.maximumHeight;\n\t}\n\n\tget minimumSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.minimumHeight\n\t\t\t: this.minimumWidth;\n\t}\n\n\tget maximumSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.maximumHeight\n\t\t\t: this.maximumWidth;\n\t}\n\n\tget priority(): LayoutPriority | undefined {\n\t\treturn this.view.priority;\n\t}\n\n\tget proportionalLayout(): boolean {\n\t\treturn this.view.proportionalLayout ?? true;\n\t}\n\n\tget snap(): boolean | undefined {\n\t\treturn this.view.snap;\n\t}\n\n\tget minimumOrthogonalSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.minimumWidth\n\t\t\t: this.minimumHeight;\n\t}\n\n\tget maximumOrthogonalSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL\n\t\t\t? this.maximumWidth\n\t\t\t: this.maximumHeight;\n\t}\n\n\tprivate _boundarySashes: IRelativeBoundarySashes = {};\n\tget boundarySashes(): IRelativeBoundarySashes {\n\t\treturn this._boundarySashes;\n\t}\n\tset boundarySashes(boundarySashes: IRelativeBoundarySashes) {\n\t\tthis._boundarySashes = boundarySashes;\n\n\t\tthis.view.setBoundarySashes?.(\n\t\t\ttoAbsoluteBoundarySashes(boundarySashes, this.orientation),\n\t\t);\n\t}\n\n\tlayout(\n\t\tsize: number,\n\t\toffset: number,\n\t\tctx: ILayoutContext | undefined,\n\t): void {\n\t\tif (!this.layoutController.isLayoutEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof ctx === \"undefined\") {\n\t\t\tthrow new Error(\"Invalid state\");\n\t\t}\n\n\t\tthis._size = size;\n\t\tthis._orthogonalSize = ctx.orthogonalSize;\n\t\tthis.absoluteOffset = ctx.absoluteOffset + offset;\n\t\tthis.absoluteOrthogonalOffset = ctx.absoluteOrthogonalOffset;\n\n\t\tthis._layout(this.width, this.height, this.top, this.left);\n\t}\n\n\tprivate cachedWidth = 0;\n\tprivate cachedHeight = 0;\n\tprivate cachedTop = 0;\n\tprivate cachedLeft = 0;\n\n\tprivate _layout(\n\t\twidth: number,\n\t\theight: number,\n\t\ttop: number,\n\t\tleft: number,\n\t): void {\n\t\tif (\n\t\t\tthis.cachedWidth === width &&\n\t\t\tthis.cachedHeight === height &&\n\t\t\tthis.cachedTop === top &&\n\t\t\tthis.cachedLeft === left\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.cachedWidth = width;\n\t\tthis.cachedHeight = height;\n\t\tthis.cachedTop = top;\n\t\tthis.cachedLeft = left;\n\t\tthis.view.layout(width, height, top, left);\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tthis.view.setVisible?.(visible);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\ntype Node = BranchNode | LeafNode;\n\nexport interface INodeDescriptor {\n\tnode: Node;\n\tvisible?: boolean;\n}\n\nfunction flipNode(\n\tnode: BranchNode,\n\tsize: number,\n\torthogonalSize: number,\n): BranchNode;\nfunction flipNode(\n\tnode: LeafNode,\n\tsize: number,\n\torthogonalSize: number,\n): LeafNode;\nfunction flipNode(node: Node, size: number, orthogonalSize: number): Node;\nfunction flipNode(node: Node, size: number, orthogonalSize: number): Node {\n\tif (node instanceof BranchNode) {\n\t\tconst result = new BranchNode(\n\t\t\torthogonal(node.orientation),\n\t\t\tnode.layoutController,\n\t\t\tnode.styles,\n\t\t\tnode.splitviewProportionalLayout,\n\t\t\tsize,\n\t\t\torthogonalSize,\n\t\t\tnode.edgeSnapping,\n\t\t);\n\n\t\tlet totalSize = 0;\n\n\t\tfor (let i = node.children.length - 1; i >= 0; i--) {\n\t\t\tconst child = node.children[i];\n\t\t\tconst childSize =\n\t\t\t\tchild instanceof BranchNode ? child.orthogonalSize : child.size;\n\n\t\t\tlet newSize =\n\t\t\t\tnode.size === 0\n\t\t\t\t\t? 0\n\t\t\t\t\t: Math.round((size * childSize) / node.size);\n\t\t\ttotalSize += newSize;\n\n\t\t\t// The last view to add should adjust to rounding errors\n\t\t\tif (i === 0) {\n\t\t\t\tnewSize += size - totalSize;\n\t\t\t}\n\n\t\t\tresult.addChild(\n\t\t\t\tflipNode(child, orthogonalSize, newSize),\n\t\t\t\tnewSize,\n\t\t\t\t0,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\n\t\tnode.dispose();\n\t\treturn result;\n\t} else {\n\t\tconst result = new LeafNode(\n\t\t\tnode.view,\n\t\t\torthogonal(node.orientation),\n\t\t\tnode.layoutController,\n\t\t\torthogonalSize,\n\t\t);\n\t\tnode.dispose();\n\t\treturn result;\n\t}\n}\n\n/**\n * The location of a {@link IView view} within a {@link GridView}.\n *\n * A GridView is a tree composition of multiple {@link SplitView} instances, orthogonal\n * between one another. Here's an example:\n *\n * ```\n *  +-----+---------------+\n *  |  A  |      B        |\n *  +-----+---------+-----+\n *  |        C      |     |\n *  +---------------+  D  |\n *  |        E      |     |\n *  +---------------+-----+\n * ```\n *\n * The above grid's tree structure is:\n *\n * ```\n *  Vertical SplitView\n *  +-Horizontal SplitView\n *  | +-A\n *  | +-B\n *  +- Horizontal SplitView\n *    +-Vertical SplitView\n *    | +-C\n *    | +-E\n *    +-D\n * ```\n *\n * So, {@link IView views} within a {@link GridView} can be referenced by\n * a sequence of indexes, each index referencing each SplitView. Here are\n * each view's locations, from the example above:\n *\n * - `A`: `[0,0]`\n * - `B`: `[0,1]`\n * - `C`: `[1,0,0]`\n * - `D`: `[1,1]`\n * - `E`: `[1,0,1]`\n */\nexport type GridLocation = number[];\n\n/**\n * The {@link GridView} is the UI component which implements a two dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are mostly HTMLElement instances with size constraints. A {@link GridView} is a\n * tree composition of multiple {@link SplitView} instances, orthogonal between\n * one another. It will respect view's size contraints, just like the SplitView.\n *\n * It has a low-level index based API, allowing for fine grain performant operations.\n * Look into the {@link Grid} widget for a higher-level API.\n *\n * Features:\n * - flex-like layout algorithm\n * - snap support\n * - corner sash support\n * - Alt key modifier behavior, macOS style\n * - layout (de)serialization\n */\nexport class GridView implements IDisposable {\n\t/**\n\t * The DOM element for this view.\n\t */\n\treadonly element: HTMLElement;\n\n\tprivate styles: IGridViewStyles;\n\tprivate proportionalLayout: boolean;\n\tprivate _root!: BranchNode;\n\tprivate onDidSashResetRelay = new Relay<GridLocation>();\n\tprivate _onDidScroll = new Relay<void>();\n\tprivate _onDidChange = new Relay<IViewSize | undefined>();\n\tprivate _boundarySashes: IBoundarySashes = {};\n\n\t/**\n\t * The layout controller makes sure layout only propagates\n\t * to the views after the very first call to {@link GridView.layout}.\n\t */\n\tprivate layoutController: LayoutController;\n\tprivate disposable2x2: IDisposable = Disposable.None;\n\n\tprivate get root(): BranchNode {\n\t\treturn this._root;\n\t}\n\n\tprivate set root(root: BranchNode) {\n\t\tconst oldRoot = this._root;\n\n\t\tif (oldRoot) {\n\t\t\toldRoot.element.remove();\n\t\t\toldRoot.dispose();\n\t\t}\n\n\t\tthis._root = root;\n\t\tthis.element.appendChild(root.element);\n\t\tthis.onDidSashResetRelay.input = root.onDidSashReset;\n\t\tthis._onDidChange.input = Event.map(root.onDidChange, () => undefined); // TODO\n\t\tthis._onDidScroll.input = root.onDidScroll;\n\t}\n\n\t/**\n\t * Fires whenever the user double clicks a {@link Sash sash}.\n\t */\n\treadonly onDidSashReset = this.onDidSashResetRelay.event;\n\n\t/**\n\t * Fires whenever the user scrolls a {@link SplitView} within\n\t * the grid.\n\t */\n\treadonly onDidScroll = this._onDidScroll.event;\n\n\t/**\n\t * Fires whenever a view within the grid changes its size constraints.\n\t */\n\treadonly onDidChange = this._onDidChange.event;\n\n\t/**\n\t * The width of the grid.\n\t */\n\tget width(): number {\n\t\treturn this.root.width;\n\t}\n\n\t/**\n\t * The height of the grid.\n\t */\n\tget height(): number {\n\t\treturn this.root.height;\n\t}\n\n\t/**\n\t * The minimum width of the grid.\n\t */\n\tget minimumWidth(): number {\n\t\treturn this.root.minimumWidth;\n\t}\n\n\t/**\n\t * The minimum height of the grid.\n\t */\n\tget minimumHeight(): number {\n\t\treturn this.root.minimumHeight;\n\t}\n\n\t/**\n\t * The maximum width of the grid.\n\t */\n\tget maximumWidth(): number {\n\t\treturn this.root.maximumHeight;\n\t}\n\n\t/**\n\t * The maximum height of the grid.\n\t */\n\tget maximumHeight(): number {\n\t\treturn this.root.maximumHeight;\n\t}\n\n\tget orientation(): Orientation {\n\t\treturn this._root.orientation;\n\t}\n\tget boundarySashes(): IBoundarySashes {\n\t\treturn this._boundarySashes;\n\t}\n\n\t/**\n\t * The orientation of the grid. Matches the orientation of the root\n\t * {@link SplitView} in the grid's tree model.\n\t */\n\tset orientation(orientation: Orientation) {\n\t\tif (this._root.orientation === orientation) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\tsize,\n\t\t\torthogonalSize,\n\t\t\tabsoluteOffset,\n\t\t\tabsoluteOrthogonalOffset,\n\t\t} = this._root;\n\t\tthis.root = flipNode(this._root, orthogonalSize, size);\n\t\tthis.root.layout(size, 0, {\n\t\t\torthogonalSize,\n\t\t\tabsoluteOffset: absoluteOrthogonalOffset,\n\t\t\tabsoluteOrthogonalOffset: absoluteOffset,\n\t\t\tabsoluteSize: size,\n\t\t\tabsoluteOrthogonalSize: orthogonalSize,\n\t\t});\n\t\tthis.boundarySashes = this.boundarySashes;\n\t}\n\n\t/**\n\t * A collection of sashes perpendicular to each edge of the grid.\n\t * Corner sashes will be created for each intersection.\n\t */\n\tset boundarySashes(boundarySashes: IBoundarySashes) {\n\t\tthis._boundarySashes = boundarySashes;\n\t\tthis.root.boundarySashes = fromAbsoluteBoundarySashes(\n\t\t\tboundarySashes,\n\t\t\tthis.orientation,\n\t\t);\n\t}\n\n\t/**\n\t * Enable/disable edge snapping across all grid views.\n\t */\n\tset edgeSnapping(edgeSnapping: boolean) {\n\t\tthis.root.edgeSnapping = edgeSnapping;\n\t}\n\n\tprivate maximizedNode: LeafNode | undefined = undefined;\n\n\tprivate readonly _onDidChangeViewMaximized = new Emitter<boolean>();\n\treadonly onDidChangeViewMaximized = this._onDidChangeViewMaximized.event;\n\n\t/**\n\t * Create a new {@link GridView} instance.\n\t *\n\t * @remarks It's the caller's responsibility to append the\n\t * {@link GridView.element} to the page's DOM.\n\t */\n\tconstructor(options: IGridViewOptions = {}) {\n\t\tthis.element = $(\".monaco-grid-view\");\n\t\tthis.styles = options.styles || defaultStyles;\n\t\tthis.proportionalLayout =\n\t\t\ttypeof options.proportionalLayout !== \"undefined\"\n\t\t\t\t? !!options.proportionalLayout\n\t\t\t\t: true;\n\t\tthis.layoutController = new LayoutController(false);\n\t\tthis.root = new BranchNode(\n\t\t\tOrientation.VERTICAL,\n\t\t\tthis.layoutController,\n\t\t\tthis.styles,\n\t\t\tthis.proportionalLayout,\n\t\t);\n\t}\n\n\tstyle(styles: IGridViewStyles): void {\n\t\tthis.styles = styles;\n\t\tthis.root.style(styles);\n\t}\n\n\t/**\n\t * Layout the {@link GridView}.\n\t *\n\t * Optionally provide a `top` and `left` positions, those will propagate\n\t * as an origin for positions passed to {@link IView.layout}.\n\t *\n\t * @param width The width of the {@link GridView}.\n\t * @param height The height of the {@link GridView}.\n\t * @param top Optional, the top location of the {@link GridView}.\n\t * @param left Optional, the left location of the {@link GridView}.\n\t */\n\tlayout(width: number, height: number, top = 0, left = 0): void {\n\t\tthis.layoutController.isLayoutEnabled = true;\n\n\t\tconst [size, orthogonalSize, offset, orthogonalOffset] =\n\t\t\tthis.root.orientation === Orientation.HORIZONTAL\n\t\t\t\t? [height, width, top, left]\n\t\t\t\t: [width, height, left, top];\n\t\tthis.root.layout(size, 0, {\n\t\t\torthogonalSize,\n\t\t\tabsoluteOffset: offset,\n\t\t\tabsoluteOrthogonalOffset: orthogonalOffset,\n\t\t\tabsoluteSize: size,\n\t\t\tabsoluteOrthogonalSize: orthogonalSize,\n\t\t});\n\t}\n\n\t/**\n\t * Add a {@link IView view} to this {@link GridView}.\n\t *\n\t * @param view The view to add.\n\t * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n\t * @param location The {@link GridLocation location} to insert the view on.\n\t */\n\taddView(view: IView, size: number | Sizing, location: GridLocation): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (parent instanceof BranchNode) {\n\t\t\tconst node = new LeafNode(\n\t\t\t\tview,\n\t\t\t\torthogonal(parent.orientation),\n\t\t\t\tthis.layoutController,\n\t\t\t\tparent.orthogonalSize,\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\tparent.addChild(node, size, index);\n\t\t\t} catch (err) {\n\t\t\t\tnode.dispose();\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [, grandParent] = tail(pathToParent);\n\t\t\tconst [, parentIndex] = tail(rest);\n\n\t\t\tlet newSiblingSize: number | Sizing = 0;\n\n\t\t\tconst newSiblingCachedVisibleSize =\n\t\t\t\tgrandParent.getChildCachedVisibleSize(parentIndex);\n\t\t\tif (typeof newSiblingCachedVisibleSize === \"number\") {\n\t\t\t\tnewSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n\t\t\t}\n\n\t\t\tconst oldChild = grandParent.removeChild(parentIndex);\n\t\t\toldChild.dispose();\n\n\t\t\tconst newParent = new BranchNode(\n\t\t\t\tparent.orientation,\n\t\t\t\tparent.layoutController,\n\t\t\t\tthis.styles,\n\t\t\t\tthis.proportionalLayout,\n\t\t\t\tparent.size,\n\t\t\t\tparent.orthogonalSize,\n\t\t\t\tgrandParent.edgeSnapping,\n\t\t\t);\n\t\t\tgrandParent.addChild(newParent, parent.size, parentIndex);\n\n\t\t\tconst newSibling = new LeafNode(\n\t\t\t\tparent.view,\n\t\t\t\tgrandParent.orientation,\n\t\t\t\tthis.layoutController,\n\t\t\t\tparent.size,\n\t\t\t);\n\t\t\tnewParent.addChild(newSibling, newSiblingSize, 0);\n\n\t\t\tif (typeof size !== \"number\" && size.type === \"split\") {\n\t\t\t\tsize = Sizing.Split(0);\n\t\t\t}\n\n\t\t\tconst node = new LeafNode(\n\t\t\t\tview,\n\t\t\t\tgrandParent.orientation,\n\t\t\t\tthis.layoutController,\n\t\t\t\tparent.size,\n\t\t\t);\n\t\t\tnewParent.addChild(node, size, index);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Remove a {@link IView view} from this {@link GridView}.\n\t *\n\t * @param location The {@link GridLocation location} of the {@link IView view}.\n\t * @param sizing Whether to distribute other {@link IView view}'s sizes.\n\t */\n\tremoveView(\n\t\tlocation: GridLocation,\n\t\tsizing?: DistributeSizing | AutoSizing,\n\t): IView {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tconst node = parent.children[index];\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tparent.removeChild(index, sizing);\n\t\tnode.dispose();\n\n\t\tif (parent.children.length === 0) {\n\t\t\tthrow new Error(\"Invalid grid state\");\n\t\t}\n\n\t\tif (parent.children.length > 1) {\n\t\t\tthis.trySet2x2();\n\t\t\treturn node.view;\n\t\t}\n\n\t\tif (pathToParent.length === 0) {\n\t\t\t// parent is root\n\t\t\tconst sibling = parent.children[0];\n\n\t\t\tif (sibling instanceof LeafNode) {\n\t\t\t\treturn node.view;\n\t\t\t}\n\n\t\t\t// we must promote sibling to be the new root\n\t\t\tparent.removeChild(0);\n\t\t\tparent.dispose();\n\t\t\tthis.root = sibling;\n\t\t\tthis.boundarySashes = this.boundarySashes;\n\t\t\tthis.trySet2x2();\n\t\t\treturn node.view;\n\t\t}\n\n\t\tconst [, grandParent] = tail(pathToParent);\n\t\tconst [, parentIndex] = tail(rest);\n\n\t\tconst isSiblingVisible = parent.isChildVisible(0);\n\t\tconst sibling = parent.removeChild(0);\n\n\t\tconst sizes = grandParent.children.map((_, i) =>\n\t\t\tgrandParent.getChildSize(i),\n\t\t);\n\t\tgrandParent.removeChild(parentIndex, sizing);\n\t\tparent.dispose();\n\n\t\tif (sibling instanceof BranchNode) {\n\t\t\tsizes.splice(\n\t\t\t\tparentIndex,\n\t\t\t\t1,\n\t\t\t\t...sibling.children.map((c) => c.size),\n\t\t\t);\n\n\t\t\tconst siblingChildren = sibling.removeAllChildren();\n\n\t\t\tfor (let i = 0; i < siblingChildren.length; i++) {\n\t\t\t\tgrandParent.addChild(\n\t\t\t\t\tsiblingChildren[i],\n\t\t\t\t\tsiblingChildren[i].size,\n\t\t\t\t\tparentIndex + i,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst newSibling = new LeafNode(\n\t\t\t\tsibling.view,\n\t\t\t\torthogonal(sibling.orientation),\n\t\t\t\tthis.layoutController,\n\t\t\t\tsibling.size,\n\t\t\t);\n\t\t\tconst sizing = isSiblingVisible\n\t\t\t\t? sibling.orthogonalSize\n\t\t\t\t: Sizing.Invisible(sibling.orthogonalSize);\n\t\t\tgrandParent.addChild(newSibling, sizing, parentIndex);\n\t\t}\n\n\t\tsibling.dispose();\n\n\t\tfor (let i = 0; i < sizes.length; i++) {\n\t\t\tgrandParent.resizeChild(i, sizes[i]);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t\treturn node.view;\n\t}\n\n\t/**\n\t * Move a {@link IView view} within its parent.\n\t *\n\t * @param parentLocation The {@link GridLocation location} of the {@link IView view}'s parent.\n\t * @param from The index of the {@link IView view} to move.\n\t * @param to The index where the {@link IView view} should move to.\n\t */\n\tmoveView(parentLocation: GridLocation, from: number, to: number): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tconst [, parent] = this.getNode(parentLocation);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tparent.moveChild(from, to);\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Swap two {@link IView views} within the {@link GridView}.\n\t *\n\t * @param from The {@link GridLocation location} of one view.\n\t * @param to The {@link GridLocation location} of another view.\n\t */\n\tswapViews(from: GridLocation, to: GridLocation): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tconst [fromRest, fromIndex] = tail(from);\n\t\tconst [, fromParent] = this.getNode(fromRest);\n\n\t\tif (!(fromParent instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid from location\");\n\t\t}\n\n\t\tconst fromSize = fromParent.getChildSize(fromIndex);\n\t\tconst fromNode = fromParent.children[fromIndex];\n\n\t\tif (!(fromNode instanceof LeafNode)) {\n\t\t\tthrow new Error(\"Invalid from location\");\n\t\t}\n\n\t\tconst [toRest, toIndex] = tail(to);\n\t\tconst [, toParent] = this.getNode(toRest);\n\n\t\tif (!(toParent instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid to location\");\n\t\t}\n\n\t\tconst toSize = toParent.getChildSize(toIndex);\n\t\tconst toNode = toParent.children[toIndex];\n\n\t\tif (!(toNode instanceof LeafNode)) {\n\t\t\tthrow new Error(\"Invalid to location\");\n\t\t}\n\n\t\tif (fromParent === toParent) {\n\t\t\tfromParent.swapChildren(fromIndex, toIndex);\n\t\t} else {\n\t\t\tfromParent.removeChild(fromIndex);\n\t\t\ttoParent.removeChild(toIndex);\n\n\t\t\tfromParent.addChild(toNode, fromSize, fromIndex);\n\t\t\ttoParent.addChild(fromNode, toSize, toIndex);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Resize a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t * @param size The size the view should be. Optionally provide a single dimension.\n\t */\n\tresizeView(location: GridLocation, size: Partial<IViewSize>): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tif (!size.width && !size.height) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [parentSize, grandParentSize] =\n\t\t\tparent.orientation === Orientation.HORIZONTAL\n\t\t\t\t? [size.width, size.height]\n\t\t\t\t: [size.height, size.width];\n\n\t\tif (typeof grandParentSize === \"number\" && pathToParent.length > 0) {\n\t\t\tconst [, grandParent] = tail(pathToParent);\n\t\t\tconst [, parentIndex] = tail(rest);\n\n\t\t\tgrandParent.resizeChild(parentIndex, grandParentSize);\n\t\t}\n\n\t\tif (typeof parentSize === \"number\") {\n\t\t\tparent.resizeChild(index, parentSize);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Get the size of a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view. Provide `undefined` to get\n\t * the size of the grid itself.\n\t */\n\tgetViewSize(location?: GridLocation): IViewSize {\n\t\tif (!location) {\n\t\t\treturn { width: this.root.width, height: this.root.height };\n\t\t}\n\n\t\tconst [, node] = this.getNode(location);\n\t\treturn { width: node.width, height: node.height };\n\t}\n\n\t/**\n\t * Get the cached visible size of a {@link IView view}. This was the size\n\t * of the view at the moment it last became hidden.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tgetViewCachedVisibleSize(location: GridLocation): number | undefined {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\treturn parent.getChildCachedVisibleSize(index);\n\t}\n\n\t/**\n\t * Maximize the size of a {@link IView view} by collapsing all other views\n\t * to their minimum sizes.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\texpandView(location: GridLocation): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tconst [ancestors, node] = this.getNode(location);\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tfor (let i = 0; i < ancestors.length; i++) {\n\t\t\tancestors[i].resizeChild(location[i], Number.POSITIVE_INFINITY);\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether all other {@link IView views} are at their minimum size.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tisViewExpanded(location: GridLocation): boolean {\n\t\tif (this.hasMaximizedView()) {\n\t\t\t// No view can be expanded when a view is maximized\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [ancestors, node] = this.getNode(location);\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tfor (let i = 0; i < ancestors.length; i++) {\n\t\t\tif (!ancestors[i].isChildExpanded(location[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tmaximizeView(location: GridLocation) {\n\t\tconst [, nodeToMaximize] = this.getNode(location);\n\t\tif (!(nodeToMaximize instanceof LeafNode)) {\n\t\t\tthrow new Error(\"Location is not a LeafNode\");\n\t\t}\n\n\t\tif (this.maximizedNode === nodeToMaximize) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tfunction hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n\t\t\tfor (let i = 0; i < parent.children.length; i++) {\n\t\t\t\tconst child = parent.children[i];\n\t\t\t\tif (child instanceof LeafNode) {\n\t\t\t\t\tif (child !== exclude) {\n\t\t\t\t\t\tparent.setChildVisible(i, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thideAllViewsBut(child, exclude);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\thideAllViewsBut(this.root, nodeToMaximize);\n\n\t\tthis.maximizedNode = nodeToMaximize;\n\t\tthis._onDidChangeViewMaximized.fire(true);\n\t}\n\n\texitMaximizedView(): void {\n\t\tif (!this.maximizedNode) {\n\t\t\treturn;\n\t\t}\n\t\tthis.maximizedNode = undefined;\n\n\t\t// When hiding a view, it's previous size is cached.\n\t\t// To restore the sizes of all views, they need to be made visible in reverse order.\n\t\tfunction showViewsInReverseOrder(parent: BranchNode): void {\n\t\t\tfor (let index = parent.children.length - 1; index >= 0; index--) {\n\t\t\t\tconst child = parent.children[index];\n\t\t\t\tif (child instanceof LeafNode) {\n\t\t\t\t\tparent.setChildVisible(index, true);\n\t\t\t\t} else {\n\t\t\t\t\tshowViewsInReverseOrder(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tshowViewsInReverseOrder(this.root);\n\n\t\tthis._onDidChangeViewMaximized.fire(false);\n\t}\n\n\thasMaximizedView(): boolean {\n\t\treturn this.maximizedNode !== undefined;\n\t}\n\n\t/**\n\t * Returns whether the {@link IView view} is maximized.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tisViewMaximized(location: GridLocation): boolean {\n\t\tconst [, node] = this.getNode(location);\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error(\"Location is not a LeafNode\");\n\t\t}\n\t\treturn node === this.maximizedNode;\n\t}\n\n\t/**\n\t * Distribute the size among all {@link IView views} within the entire\n\t * grid or within a single {@link SplitView}.\n\t *\n\t * @param location The {@link GridLocation location} of a view containing\n\t * children views, which will have their sizes distributed within the parent\n\t * view's size. Provide `undefined` to recursively distribute all views' sizes\n\t * in the entire grid.\n\t */\n\tdistributeViewSizes(location?: GridLocation): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tif (!location) {\n\t\t\tthis.root.distributeViewSizes(true);\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, node] = this.getNode(location);\n\n\t\tif (!(node instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tnode.distributeViewSizes();\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Returns whether a {@link IView view} is visible.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tisViewVisible(location: GridLocation): boolean {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid from location\");\n\t\t}\n\n\t\treturn parent.isChildVisible(index);\n\t}\n\n\t/**\n\t * Set the visibility state of a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tsetViewVisible(location: GridLocation, visible: boolean): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t\treturn;\n\t\t}\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid from location\");\n\t\t}\n\n\t\tparent.setChildVisible(index, visible);\n\t}\n\n\t/**\n\t * Returns a descriptor for the entire grid.\n\t */\n\tgetView(): GridBranchNode;\n\n\t/**\n\t * Returns a descriptor for a {@link GridLocation subtree} within the\n\t * {@link GridView}.\n\t *\n\t * @param location The {@link GridLocation location} of the root of\n\t * the {@link GridLocation subtree}.\n\t */\n\tgetView(location: GridLocation): GridNode;\n\tgetView(location?: GridLocation): GridNode {\n\t\tconst node = location ? this.getNode(location)[1] : this._root;\n\t\treturn this._getViews(node, this.orientation);\n\t}\n\n\t/**\n\t * Construct a new {@link GridView} from a JSON object.\n\t *\n\t * @param json The JSON object.\n\t * @param deserializer A deserializer which can revive each view.\n\t * @returns A new {@link GridView} instance.\n\t */\n\tstatic deserialize<T extends ISerializableView>(\n\t\tjson: ISerializedGridView,\n\t\tdeserializer: IViewDeserializer<T>,\n\t\toptions: IGridViewOptions = {},\n\t): GridView {\n\t\tif (typeof json.orientation !== \"number\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid JSON: 'orientation' property must be a number.\",\n\t\t\t);\n\t\t} else if (typeof json.width !== \"number\") {\n\t\t\tthrow new Error(\"Invalid JSON: 'width' property must be a number.\");\n\t\t} else if (typeof json.height !== \"number\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid JSON: 'height' property must be a number.\",\n\t\t\t);\n\t\t} else if (json.root?.type !== \"branch\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid JSON: 'root' property must have 'type' value of branch.\",\n\t\t\t);\n\t\t}\n\n\t\tconst orientation = json.orientation;\n\t\tconst height = json.height;\n\n\t\tconst result = new GridView(options);\n\t\tresult._deserialize(\n\t\t\tjson.root as ISerializedBranchNode,\n\t\t\torientation,\n\t\t\tdeserializer,\n\t\t\theight,\n\t\t);\n\n\t\treturn result;\n\t}\n\n\tprivate _deserialize(\n\t\troot: ISerializedBranchNode,\n\t\torientation: Orientation,\n\t\tdeserializer: IViewDeserializer<ISerializableView>,\n\t\torthogonalSize: number,\n\t): void {\n\t\tthis.root = this._deserializeNode(\n\t\t\troot,\n\t\t\torientation,\n\t\t\tdeserializer,\n\t\t\torthogonalSize,\n\t\t) as BranchNode;\n\t}\n\n\tprivate _deserializeNode(\n\t\tnode: ISerializedNode,\n\t\torientation: Orientation,\n\t\tdeserializer: IViewDeserializer<ISerializableView>,\n\t\torthogonalSize: number,\n\t): Node {\n\t\tlet result: Node;\n\t\tif (node.type === \"branch\") {\n\t\t\tconst serializedChildren = node.data as ISerializedNode[];\n\t\t\tconst children = serializedChildren.map((serializedChild) => {\n\t\t\t\treturn {\n\t\t\t\t\tnode: this._deserializeNode(\n\t\t\t\t\t\tserializedChild,\n\t\t\t\t\t\torthogonal(orientation),\n\t\t\t\t\t\tdeserializer,\n\t\t\t\t\t\tnode.size,\n\t\t\t\t\t),\n\t\t\t\t\tvisible: (serializedChild as { visible?: boolean }).visible,\n\t\t\t\t} satisfies INodeDescriptor;\n\t\t\t});\n\n\t\t\tresult = new BranchNode(\n\t\t\t\torientation,\n\t\t\t\tthis.layoutController,\n\t\t\t\tthis.styles,\n\t\t\t\tthis.proportionalLayout,\n\t\t\t\tnode.size,\n\t\t\t\torthogonalSize,\n\t\t\t\tundefined,\n\t\t\t\tchildren,\n\t\t\t);\n\t\t} else {\n\t\t\tresult = new LeafNode(\n\t\t\t\tdeserializer.fromJSON(node.data),\n\t\t\t\torientation,\n\t\t\t\tthis.layoutController,\n\t\t\t\torthogonalSize,\n\t\t\t\tnode.size,\n\t\t\t);\n\t\t\tif (node.maximized && !this.maximizedNode) {\n\t\t\t\tthis.maximizedNode = result;\n\t\t\t\tthis._onDidChangeViewMaximized.fire(true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getViews(\n\t\tnode: Node,\n\t\torientation: Orientation,\n\t\tcachedVisibleSize?: number,\n\t): GridNode {\n\t\tconst box = {\n\t\t\ttop: node.top,\n\t\t\tleft: node.left,\n\t\t\twidth: node.width,\n\t\t\theight: node.height,\n\t\t};\n\n\t\tif (node instanceof LeafNode) {\n\t\t\treturn {\n\t\t\t\tview: node.view,\n\t\t\t\tbox,\n\t\t\t\tcachedVisibleSize,\n\t\t\t\tmaximized: this.maximizedNode === node,\n\t\t\t};\n\t\t}\n\n\t\tconst children: GridNode[] = [];\n\n\t\tfor (let i = 0; i < node.children.length; i++) {\n\t\t\tconst child = node.children[i];\n\t\t\tconst cachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n\t\t\tchildren.push(\n\t\t\t\tthis._getViews(\n\t\t\t\t\tchild,\n\t\t\t\t\torthogonal(orientation),\n\t\t\t\t\tcachedVisibleSize,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn { children, box };\n\t}\n\n\tprivate getNode(\n\t\tlocation: GridLocation,\n\t\tnode: Node = this.root,\n\t\tpath: BranchNode[] = [],\n\t): [BranchNode[], Node] {\n\t\tif (location.length === 0) {\n\t\t\treturn [path, node];\n\t\t}\n\n\t\tif (!(node instanceof BranchNode)) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tconst [index, ...rest] = location;\n\n\t\tif (index < 0 || index >= node.children.length) {\n\t\t\tthrow new Error(\"Invalid location\");\n\t\t}\n\n\t\tconst child = node.children[index];\n\t\tpath.push(node);\n\n\t\treturn this.getNode(rest, child, path);\n\t}\n\n\t/**\n\t * Attempt to lock the {@link Sash sashes} in this {@link GridView} so\n\t * the grid behaves as a 2x2 matrix, with a corner sash in the middle.\n\t *\n\t * In case the grid isn't a 2x2 grid _and_ all sashes are not aligned,\n\t * this method is a no-op.\n\t */\n\ttrySet2x2(): void {\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tif (this.root.children.length !== 2) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [first, second] = this.root.children;\n\n\t\tif (!(first instanceof BranchNode) || !(second instanceof BranchNode)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.disposable2x2 = first.trySet2x2(second);\n\t}\n\n\t/**\n\t * Populate a map with views to DOM nodes.\n\t * @remarks To be used internally only.\n\t */\n\tgetViewMap(map: Map<IView, HTMLElement>, node?: Node): void {\n\t\tif (!node) {\n\t\t\tnode = this.root;\n\t\t}\n\n\t\tif (node instanceof BranchNode) {\n\t\t\tnode.children.forEach((child) => this.getViewMap(map, child));\n\t\t} else {\n\t\t\tmap.set(node.view, node.element);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.onDidSashResetRelay.dispose();\n\t\tthis.root.dispose();\n\t\tthis.element.remove();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Orientation", "LayoutPriority", "Sizing", "sibling", "sizing", "cachedVisibleSize"]
}
