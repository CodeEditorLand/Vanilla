{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/grid/gridview.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $ } from '../../dom.js';\nimport { IBoundarySashes, Orientation, Sash } from '../sash/sash.js';\nimport { DistributeSizing, ISplitViewStyles, IView as ISplitView, LayoutPriority, Sizing, AutoSizing, SplitView } from '../splitview/splitview.js';\nimport { equals as arrayEquals, tail2 as tail } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event, Relay } from '../../../common/event.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../common/lifecycle.js';\nimport { rot } from '../../../common/numbers.js';\nimport { isUndefined } from '../../../common/types.js';\nimport './gridview.css';\n\nexport { Orientation } from '../sash/sash.js';\nexport { LayoutPriority, Sizing } from '../splitview/splitview.js';\n\nexport interface IGridViewStyles extends ISplitViewStyles { }\n\nconst defaultStyles: IGridViewStyles = {\n\tseparatorBorder: Color.transparent\n};\n\nexport interface IViewSize {\n\treadonly width: number;\n\treadonly height: number;\n}\n\ninterface IRelativeBoundarySashes {\n\treadonly start?: Sash;\n\treadonly end?: Sash;\n\treadonly orthogonalStart?: Sash;\n\treadonly orthogonalEnd?: Sash;\n}\n\n/**\n * The interface to implement for views within a {@link GridView}.\n */\nexport interface IView {\n\n\t/**\n\t * The DOM element for this view.\n\t */\n\treadonly element: HTMLElement;\n\n\t/**\n\t * A minimum width for this view.\n\t *\n\t * @remarks If none, set it to `0`.\n\t */\n\treadonly minimumWidth: number;\n\n\t/**\n\t * A minimum width for this view.\n\t *\n\t * @remarks If none, set it to `Number.POSITIVE_INFINITY`.\n\t */\n\treadonly maximumWidth: number;\n\n\t/**\n\t * A minimum height for this view.\n\t *\n\t * @remarks If none, set it to `0`.\n\t */\n\treadonly minimumHeight: number;\n\n\t/**\n\t * A minimum height for this view.\n\t *\n\t * @remarks If none, set it to `Number.POSITIVE_INFINITY`.\n\t */\n\treadonly maximumHeight: number;\n\n\t/**\n\t * The priority of the view when the {@link GridView} layout algorithm\n\t * runs. Views with higher priority will be resized first.\n\t *\n\t * @remarks Only used when `proportionalLayout` is false.\n\t */\n\treadonly priority?: LayoutPriority;\n\n\t/**\n\t * If the {@link GridView} supports proportional layout,\n\t * this property allows for finer control over the proportional layout algorithm, per view.\n\t *\n\t * @defaultValue `true`\n\t */\n\treadonly proportionalLayout?: boolean;\n\n\t/**\n\t * Whether the view will snap whenever the user reaches its minimum size or\n\t * attempts to grow it beyond the minimum size.\n\t *\n\t * @defaultValue `false`\n\t */\n\treadonly snap?: boolean;\n\n\t/**\n\t * View instances are supposed to fire this event whenever any of the constraint\n\t * properties have changed:\n\t *\n\t * - {@link IView.minimumWidth}\n\t * - {@link IView.maximumWidth}\n\t * - {@link IView.minimumHeight}\n\t * - {@link IView.maximumHeight}\n\t * - {@link IView.priority}\n\t * - {@link IView.snap}\n\t *\n\t * The {@link GridView} will relayout whenever that happens. The event can\n\t * optionally emit the view's preferred size for that relayout.\n\t */\n\treadonly onDidChange: Event<IViewSize | undefined>;\n\n\t/**\n\t * This will be called by the {@link GridView} during layout. A view meant to\n\t * pass along the layout information down to its descendants.\n\t */\n\tlayout(width: number, height: number, top: number, left: number): void;\n\n\t/**\n\t * This will be called by the {@link GridView} whenever this view is made\n\t * visible or hidden.\n\t *\n\t * @param visible Whether the view becomes visible.\n\t */\n\tsetVisible?(visible: boolean): void;\n\n\t/**\n\t * This will be called by the {@link GridView} whenever this view is on\n\t * an edge of the grid and the grid's\n\t * {@link GridView.boundarySashes boundary sashes} change.\n\t */\n\tsetBoundarySashes?(sashes: IBoundarySashes): void;\n}\n\nexport interface ISerializableView extends IView {\n\ttoJSON(): object;\n}\n\nexport interface IViewDeserializer<T extends ISerializableView> {\n\tfromJSON(json: any): T;\n}\n\nexport interface ISerializedLeafNode {\n\ttype: 'leaf';\n\tdata: any;\n\tsize: number;\n\tvisible?: boolean;\n\tmaximized?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n\ttype: 'branch';\n\tdata: ISerializedNode[];\n\tsize: number;\n\tvisible?: boolean;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface ISerializedGridView {\n\troot: ISerializedNode;\n\torientation: Orientation;\n\twidth: number;\n\theight: number;\n}\n\nexport function orthogonal(orientation: Orientation): Orientation {\n\treturn orientation === Orientation.VERTICAL ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n}\n\nexport interface Box {\n\treadonly top: number;\n\treadonly left: number;\n\treadonly width: number;\n\treadonly height: number;\n}\n\nexport interface GridLeafNode {\n\treadonly view: IView;\n\treadonly box: Box;\n\treadonly cachedVisibleSize: number | undefined;\n\treadonly maximized: boolean;\n}\n\nexport interface GridBranchNode {\n\treadonly children: GridNode[];\n\treadonly box: Box;\n}\n\nexport type GridNode = GridLeafNode | GridBranchNode;\n\nexport function isGridBranchNode(node: GridNode): node is GridBranchNode {\n\treturn !!(node as any).children;\n}\n\nclass LayoutController {\n\tconstructor(public isLayoutEnabled: boolean) { }\n}\n\nexport interface IGridViewOptions {\n\n\t/**\n\t * Styles overriding the {@link defaultStyles default ones}.\n\t */\n\treadonly styles?: IGridViewStyles;\n\n\t/**\n\t * Resize each view proportionally when resizing the {@link GridView}.\n\t *\n\t * @defaultValue `true`\n\t */\n\treadonly proportionalLayout?: boolean; // default true\n}\n\ninterface ILayoutContext {\n\treadonly orthogonalSize: number;\n\treadonly absoluteOffset: number;\n\treadonly absoluteOrthogonalOffset: number;\n\treadonly absoluteSize: number;\n\treadonly absoluteOrthogonalSize: number;\n}\n\nfunction toAbsoluteBoundarySashes(sashes: IRelativeBoundarySashes, orientation: Orientation): IBoundarySashes {\n\tif (orientation === Orientation.HORIZONTAL) {\n\t\treturn { left: sashes.start, right: sashes.end, top: sashes.orthogonalStart, bottom: sashes.orthogonalEnd };\n\t} else {\n\t\treturn { top: sashes.start, bottom: sashes.end, left: sashes.orthogonalStart, right: sashes.orthogonalEnd };\n\t}\n}\n\nfunction fromAbsoluteBoundarySashes(sashes: IBoundarySashes, orientation: Orientation): IRelativeBoundarySashes {\n\tif (orientation === Orientation.HORIZONTAL) {\n\t\treturn { start: sashes.left, end: sashes.right, orthogonalStart: sashes.top, orthogonalEnd: sashes.bottom };\n\t} else {\n\t\treturn { start: sashes.top, end: sashes.bottom, orthogonalStart: sashes.left, orthogonalEnd: sashes.right };\n\t}\n}\n\nfunction validateIndex(index: number, numChildren: number): number {\n\tif (Math.abs(index) > numChildren) {\n\t\tthrow new Error('Invalid index');\n\t}\n\n\treturn rot(index, numChildren + 1);\n}\n\nclass BranchNode implements ISplitView<ILayoutContext>, IDisposable {\n\n\treadonly element: HTMLElement;\n\treadonly children: Node[] = [];\n\tprivate splitview: SplitView<ILayoutContext, Node>;\n\n\tprivate _size: number;\n\tget size(): number { return this._size; }\n\n\tprivate _orthogonalSize: number;\n\tget orthogonalSize(): number { return this._orthogonalSize; }\n\n\tprivate _absoluteOffset: number = 0;\n\tget absoluteOffset(): number { return this._absoluteOffset; }\n\n\tprivate _absoluteOrthogonalOffset: number = 0;\n\tget absoluteOrthogonalOffset(): number { return this._absoluteOrthogonalOffset; }\n\n\tprivate absoluteOrthogonalSize: number = 0;\n\n\tprivate _styles: IGridViewStyles;\n\tget styles(): IGridViewStyles { return this._styles; }\n\n\tget width(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n\t}\n\n\tget height(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n\t}\n\n\tget top(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this._absoluteOffset : this._absoluteOrthogonalOffset;\n\t}\n\n\tget left(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this._absoluteOrthogonalOffset : this._absoluteOffset;\n\t}\n\n\tget minimumSize(): number {\n\t\treturn this.children.length === 0 ? 0 : Math.max(...this.children.map((c, index) => this.splitview.isViewVisible(index) ? c.minimumOrthogonalSize : 0));\n\t}\n\n\tget maximumSize(): number {\n\t\treturn Math.min(...this.children.map((c, index) => this.splitview.isViewVisible(index) ? c.maximumOrthogonalSize : Number.POSITIVE_INFINITY));\n\t}\n\n\tget priority(): LayoutPriority {\n\t\tif (this.children.length === 0) {\n\t\t\treturn LayoutPriority.Normal;\n\t\t}\n\n\t\tconst priorities = this.children.map(c => typeof c.priority === 'undefined' ? LayoutPriority.Normal : c.priority);\n\n\t\tif (priorities.some(p => p === LayoutPriority.High)) {\n\t\t\treturn LayoutPriority.High;\n\t\t} else if (priorities.some(p => p === LayoutPriority.Low)) {\n\t\t\treturn LayoutPriority.Low;\n\t\t}\n\n\t\treturn LayoutPriority.Normal;\n\t}\n\n\tget proportionalLayout(): boolean {\n\t\tif (this.children.length === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.children.every(c => c.proportionalLayout);\n\t}\n\n\tget minimumOrthogonalSize(): number {\n\t\treturn this.splitview.minimumSize;\n\t}\n\n\tget maximumOrthogonalSize(): number {\n\t\treturn this.splitview.maximumSize;\n\t}\n\n\tget minimumWidth(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumOrthogonalSize : this.minimumSize;\n\t}\n\n\tget minimumHeight(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumSize : this.minimumOrthogonalSize;\n\t}\n\n\tget maximumWidth(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumOrthogonalSize : this.maximumSize;\n\t}\n\n\tget maximumHeight(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumSize : this.maximumOrthogonalSize;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<number | undefined>();\n\treadonly onDidChange: Event<number | undefined> = this._onDidChange.event;\n\n\tprivate readonly _onDidVisibilityChange = new Emitter<boolean>();\n\treadonly onDidVisibilityChange: Event<boolean> = this._onDidVisibilityChange.event;\n\tprivate readonly childrenVisibilityChangeDisposable: DisposableStore = new DisposableStore();\n\n\tprivate _onDidScroll = new Emitter<void>();\n\tprivate onDidScrollDisposable: IDisposable = Disposable.None;\n\treadonly onDidScroll: Event<void> = this._onDidScroll.event;\n\n\tprivate childrenChangeDisposable: IDisposable = Disposable.None;\n\n\tprivate readonly _onDidSashReset = new Emitter<GridLocation>();\n\treadonly onDidSashReset: Event<GridLocation> = this._onDidSashReset.event;\n\tprivate splitviewSashResetDisposable: IDisposable = Disposable.None;\n\tprivate childrenSashResetDisposable: IDisposable = Disposable.None;\n\n\tprivate _boundarySashes: IRelativeBoundarySashes = {};\n\tget boundarySashes(): IRelativeBoundarySashes { return this._boundarySashes; }\n\tset boundarySashes(boundarySashes: IRelativeBoundarySashes) {\n\t\tif (this._boundarySashes.start === boundarySashes.start\n\t\t\t&& this._boundarySashes.end === boundarySashes.end\n\t\t\t&& this._boundarySashes.orthogonalStart === boundarySashes.orthogonalStart\n\t\t\t&& this._boundarySashes.orthogonalEnd === boundarySashes.orthogonalEnd) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._boundarySashes = boundarySashes;\n\n\t\tthis.splitview.orthogonalStartSash = boundarySashes.orthogonalStart;\n\t\tthis.splitview.orthogonalEndSash = boundarySashes.orthogonalEnd;\n\n\t\tfor (let index = 0; index < this.children.length; index++) {\n\t\t\tconst child = this.children[index];\n\t\t\tconst first = index === 0;\n\t\t\tconst last = index === this.children.length - 1;\n\n\t\t\tchild.boundarySashes = {\n\t\t\t\tstart: boundarySashes.orthogonalStart,\n\t\t\t\tend: boundarySashes.orthogonalEnd,\n\t\t\t\torthogonalStart: first ? boundarySashes.start : child.boundarySashes.orthogonalStart,\n\t\t\t\torthogonalEnd: last ? boundarySashes.end : child.boundarySashes.orthogonalEnd,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate _edgeSnapping = false;\n\tget edgeSnapping(): boolean { return this._edgeSnapping; }\n\tset edgeSnapping(edgeSnapping: boolean) {\n\t\tif (this._edgeSnapping === edgeSnapping) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._edgeSnapping = edgeSnapping;\n\n\t\tfor (const child of this.children) {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tchild.edgeSnapping = edgeSnapping;\n\t\t\t}\n\t\t}\n\n\t\tthis.updateSplitviewEdgeSnappingEnablement();\n\t}\n\n\tconstructor(\n\t\treadonly orientation: Orientation,\n\t\treadonly layoutController: LayoutController,\n\t\tstyles: IGridViewStyles,\n\t\treadonly splitviewProportionalLayout: boolean,\n\t\tsize: number = 0,\n\t\torthogonalSize: number = 0,\n\t\tedgeSnapping: boolean = false,\n\t\tchildDescriptors?: INodeDescriptor[]\n\t) {\n\t\tthis._styles = styles;\n\t\tthis._size = size;\n\t\tthis._orthogonalSize = orthogonalSize;\n\n\t\tthis.element = $('.monaco-grid-branch-node');\n\n\t\tif (!childDescriptors) {\n\t\t\t// Normal behavior, we have no children yet, just set up the splitview\n\t\t\tthis.splitview = new SplitView(this.element, { orientation, styles, proportionalLayout: splitviewProportionalLayout });\n\t\t\tthis.splitview.layout(size, { orthogonalSize, absoluteOffset: 0, absoluteOrthogonalOffset: 0, absoluteSize: size, absoluteOrthogonalSize: orthogonalSize });\n\t\t} else {\n\t\t\t// Reconstruction behavior, we want to reconstruct a splitview\n\t\t\tconst descriptor = {\n\t\t\t\tviews: childDescriptors.map(childDescriptor => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tview: childDescriptor.node,\n\t\t\t\t\t\tsize: childDescriptor.node.size,\n\t\t\t\t\t\tvisible: childDescriptor.visible !== false\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t\tsize: this.orthogonalSize\n\t\t\t};\n\n\t\t\tconst options = { proportionalLayout: splitviewProportionalLayout, orientation, styles };\n\n\t\t\tthis.children = childDescriptors.map(c => c.node);\n\t\t\tthis.splitview = new SplitView(this.element, { ...options, descriptor });\n\n\t\t\tthis.children.forEach((node, index) => {\n\t\t\t\tconst first = index === 0;\n\t\t\t\tconst last = index === this.children.length;\n\n\t\t\t\tnode.boundarySashes = {\n\t\t\t\t\tstart: this.boundarySashes.orthogonalStart,\n\t\t\t\t\tend: this.boundarySashes.orthogonalEnd,\n\t\t\t\t\torthogonalStart: first ? this.boundarySashes.start : this.splitview.sashes[index - 1],\n\t\t\t\t\torthogonalEnd: last ? this.boundarySashes.end : this.splitview.sashes[index],\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tconst onDidSashReset = Event.map(this.splitview.onDidSashReset, i => [i]);\n\t\tthis.splitviewSashResetDisposable = onDidSashReset(this._onDidSashReset.fire, this._onDidSashReset);\n\n\t\tthis.updateChildrenEvents();\n\t}\n\n\tstyle(styles: IGridViewStyles): void {\n\t\tthis._styles = styles;\n\t\tthis.splitview.style(styles);\n\n\t\tfor (const child of this.children) {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tchild.style(styles);\n\t\t\t}\n\t\t}\n\t}\n\n\tlayout(size: number, offset: number, ctx: ILayoutContext | undefined): void {\n\t\tif (!this.layoutController.isLayoutEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof ctx === 'undefined') {\n\t\t\tthrow new Error('Invalid state');\n\t\t}\n\n\t\t// branch nodes should flip the normal/orthogonal directions\n\t\tthis._size = ctx.orthogonalSize;\n\t\tthis._orthogonalSize = size;\n\t\tthis._absoluteOffset = ctx.absoluteOffset + offset;\n\t\tthis._absoluteOrthogonalOffset = ctx.absoluteOrthogonalOffset;\n\t\tthis.absoluteOrthogonalSize = ctx.absoluteOrthogonalSize;\n\n\t\tthis.splitview.layout(ctx.orthogonalSize, {\n\t\t\torthogonalSize: size,\n\t\t\tabsoluteOffset: this._absoluteOrthogonalOffset,\n\t\t\tabsoluteOrthogonalOffset: this._absoluteOffset,\n\t\t\tabsoluteSize: ctx.absoluteOrthogonalSize,\n\t\t\tabsoluteOrthogonalSize: ctx.absoluteSize\n\t\t});\n\n\t\tthis.updateSplitviewEdgeSnappingEnablement();\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tfor (const child of this.children) {\n\t\t\tchild.setVisible(visible);\n\t\t}\n\t}\n\n\taddChild(node: Node, size: number | Sizing, index: number, skipLayout?: boolean): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tthis.splitview.addView(node, size, index, skipLayout);\n\t\tthis.children.splice(index, 0, node);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tremoveChild(index: number, sizing?: Sizing): Node {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tconst result = this.splitview.removeView(index, sizing);\n\t\tthis.children.splice(index, 1);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\n\t\treturn result;\n\t}\n\n\tremoveAllChildren(): Node[] {\n\t\tconst result = this.splitview.removeAllViews();\n\n\t\tthis.children.splice(0, this.children.length);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\n\t\treturn result;\n\t}\n\n\tmoveChild(from: number, to: number): void {\n\t\tfrom = validateIndex(from, this.children.length);\n\t\tto = validateIndex(to, this.children.length);\n\n\t\tif (from === to) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (from < to) {\n\t\t\tto -= 1;\n\t\t}\n\n\t\tthis.splitview.moveView(from, to);\n\t\tthis.children.splice(to, 0, this.children.splice(from, 1)[0]);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tswapChildren(from: number, to: number): void {\n\t\tfrom = validateIndex(from, this.children.length);\n\t\tto = validateIndex(to, this.children.length);\n\n\t\tif (from === to) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.splitview.swapViews(from, to);\n\n\t\t// swap boundary sashes\n\t\t[this.children[from].boundarySashes, this.children[to].boundarySashes]\n\t\t\t= [this.children[from].boundarySashes, this.children[to].boundarySashes];\n\n\t\t// swap children\n\t\t[this.children[from], this.children[to]] = [this.children[to], this.children[from]];\n\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tresizeChild(index: number, size: number): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tthis.splitview.resizeView(index, size);\n\t}\n\n\tisChildExpanded(index: number): boolean {\n\t\treturn this.splitview.isViewExpanded(index);\n\t}\n\n\tdistributeViewSizes(recursive = false): void {\n\t\tthis.splitview.distributeViewSizes();\n\n\t\tif (recursive) {\n\t\t\tfor (const child of this.children) {\n\t\t\t\tif (child instanceof BranchNode) {\n\t\t\t\t\tchild.distributeViewSizes(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetChildSize(index: number): number {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.getViewSize(index);\n\t}\n\n\tisChildVisible(index: number): boolean {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.isViewVisible(index);\n\t}\n\n\tsetChildVisible(index: number, visible: boolean): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tif (this.splitview.isViewVisible(index) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wereAllChildrenHidden = this.splitview.contentSize === 0;\n\t\tthis.splitview.setViewVisible(index, visible);\n\t\tconst areAllChildrenHidden = this.splitview.contentSize === 0;\n\n\t\t// If all children are hidden then the parent should hide the entire splitview\n\t\t// If the entire splitview is hidden then the parent should show the splitview when a child is shown\n\t\tif ((visible && wereAllChildrenHidden) || (!visible && areAllChildrenHidden)) {\n\t\t\tthis._onDidVisibilityChange.fire(visible);\n\t\t}\n\t}\n\n\tgetChildCachedVisibleSize(index: number): number | undefined {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.getViewCachedVisibleSize(index);\n\t}\n\n\tprivate updateBoundarySashes(): void {\n\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\tthis.children[i].boundarySashes = {\n\t\t\t\tstart: this.boundarySashes.orthogonalStart,\n\t\t\t\tend: this.boundarySashes.orthogonalEnd,\n\t\t\t\torthogonalStart: i === 0 ? this.boundarySashes.start : this.splitview.sashes[i - 1],\n\t\t\t\torthogonalEnd: i === this.children.length - 1 ? this.boundarySashes.end : this.splitview.sashes[i],\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate onDidChildrenChange(): void {\n\t\tthis.updateChildrenEvents();\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tprivate updateChildrenEvents(): void {\n\t\tconst onDidChildrenChange = Event.map(Event.any(...this.children.map(c => c.onDidChange)), () => undefined);\n\t\tthis.childrenChangeDisposable.dispose();\n\t\tthis.childrenChangeDisposable = onDidChildrenChange(this._onDidChange.fire, this._onDidChange);\n\n\t\tconst onDidChildrenSashReset = Event.any(...this.children.map((c, i) => Event.map(c.onDidSashReset, location => [i, ...location])));\n\t\tthis.childrenSashResetDisposable.dispose();\n\t\tthis.childrenSashResetDisposable = onDidChildrenSashReset(this._onDidSashReset.fire, this._onDidSashReset);\n\n\t\tconst onDidScroll = Event.any(Event.signal(this.splitview.onDidScroll), ...this.children.map(c => c.onDidScroll));\n\t\tthis.onDidScrollDisposable.dispose();\n\t\tthis.onDidScrollDisposable = onDidScroll(this._onDidScroll.fire, this._onDidScroll);\n\n\t\tthis.childrenVisibilityChangeDisposable.clear();\n\t\tthis.children.forEach((child, index) => {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tthis.childrenVisibilityChangeDisposable.add(child.onDidVisibilityChange((visible) => {\n\t\t\t\t\tthis.setChildVisible(index, visible);\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\t}\n\n\ttrySet2x2(other: BranchNode): IDisposable {\n\t\tif (this.children.length !== 2 || other.children.length !== 2) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.getChildSize(0) !== other.getChildSize(0)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst [firstChild, secondChild] = this.children;\n\t\tconst [otherFirstChild, otherSecondChild] = other.children;\n\n\t\tif (!(firstChild instanceof LeafNode) || !(secondChild instanceof LeafNode)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (!(otherFirstChild instanceof LeafNode) || !(otherSecondChild instanceof LeafNode)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.orientation === Orientation.VERTICAL) {\n\t\t\tsecondChild.linkedWidthNode = otherFirstChild.linkedHeightNode = firstChild;\n\t\t\tfirstChild.linkedWidthNode = otherSecondChild.linkedHeightNode = secondChild;\n\t\t\totherSecondChild.linkedWidthNode = firstChild.linkedHeightNode = otherFirstChild;\n\t\t\totherFirstChild.linkedWidthNode = secondChild.linkedHeightNode = otherSecondChild;\n\t\t} else {\n\t\t\totherFirstChild.linkedWidthNode = secondChild.linkedHeightNode = firstChild;\n\t\t\totherSecondChild.linkedWidthNode = firstChild.linkedHeightNode = secondChild;\n\t\t\tfirstChild.linkedWidthNode = otherSecondChild.linkedHeightNode = otherFirstChild;\n\t\t\tsecondChild.linkedWidthNode = otherFirstChild.linkedHeightNode = otherSecondChild;\n\t\t}\n\n\t\tconst mySash = this.splitview.sashes[0];\n\t\tconst otherSash = other.splitview.sashes[0];\n\t\tmySash.linkedSash = otherSash;\n\t\totherSash.linkedSash = mySash;\n\n\t\tthis._onDidChange.fire(undefined);\n\t\tother._onDidChange.fire(undefined);\n\n\t\treturn toDisposable(() => {\n\t\t\tmySash.linkedSash = otherSash.linkedSash = undefined;\n\t\t\tfirstChild.linkedHeightNode = firstChild.linkedWidthNode = undefined;\n\t\t\tsecondChild.linkedHeightNode = secondChild.linkedWidthNode = undefined;\n\t\t\totherFirstChild.linkedHeightNode = otherFirstChild.linkedWidthNode = undefined;\n\t\t\totherSecondChild.linkedHeightNode = otherSecondChild.linkedWidthNode = undefined;\n\t\t});\n\t}\n\n\tprivate updateSplitviewEdgeSnappingEnablement(): void {\n\t\tthis.splitview.startSnappingEnabled = this._edgeSnapping || this._absoluteOrthogonalOffset > 0;\n\t\tthis.splitview.endSnappingEnabled = this._edgeSnapping || this._absoluteOrthogonalOffset + this._size < this.absoluteOrthogonalSize;\n\t}\n\n\tdispose(): void {\n\t\tfor (const child of this.children) {\n\t\t\tchild.dispose();\n\t\t}\n\n\t\tthis._onDidChange.dispose();\n\t\tthis._onDidSashReset.dispose();\n\t\tthis._onDidVisibilityChange.dispose();\n\n\t\tthis.childrenVisibilityChangeDisposable.dispose();\n\t\tthis.splitviewSashResetDisposable.dispose();\n\t\tthis.childrenSashResetDisposable.dispose();\n\t\tthis.childrenChangeDisposable.dispose();\n\t\tthis.onDidScrollDisposable.dispose();\n\t\tthis.splitview.dispose();\n\t}\n}\n\n/**\n * Creates a latched event that avoids being fired when the view\n * constraints do not change at all.\n */\nfunction createLatchedOnDidChangeViewEvent(view: IView): Event<IViewSize | undefined> {\n\tconst [onDidChangeViewConstraints, onDidSetViewSize] = Event.split<undefined, IViewSize>(view.onDidChange, isUndefined);\n\n\treturn Event.any(\n\t\tonDidSetViewSize,\n\t\tEvent.map(\n\t\t\tEvent.latch(\n\t\t\t\tEvent.map(onDidChangeViewConstraints, _ => ([view.minimumWidth, view.maximumWidth, view.minimumHeight, view.maximumHeight])),\n\t\t\t\tarrayEquals\n\t\t\t),\n\t\t\t_ => undefined\n\t\t)\n\t);\n}\n\nclass LeafNode implements ISplitView<ILayoutContext>, IDisposable {\n\n\tprivate _size: number = 0;\n\tget size(): number { return this._size; }\n\n\tprivate _orthogonalSize: number;\n\tget orthogonalSize(): number { return this._orthogonalSize; }\n\n\tprivate absoluteOffset: number = 0;\n\tprivate absoluteOrthogonalOffset: number = 0;\n\n\treadonly onDidScroll: Event<void> = Event.None;\n\treadonly onDidSashReset: Event<GridLocation> = Event.None;\n\n\tprivate _onDidLinkedWidthNodeChange = new Relay<number | undefined>();\n\tprivate _linkedWidthNode: LeafNode | undefined = undefined;\n\tget linkedWidthNode(): LeafNode | undefined { return this._linkedWidthNode; }\n\tset linkedWidthNode(node: LeafNode | undefined) {\n\t\tthis._onDidLinkedWidthNodeChange.input = node ? node._onDidViewChange : Event.None;\n\t\tthis._linkedWidthNode = node;\n\t\tthis._onDidSetLinkedNode.fire(undefined);\n\t}\n\n\tprivate _onDidLinkedHeightNodeChange = new Relay<number | undefined>();\n\tprivate _linkedHeightNode: LeafNode | undefined = undefined;\n\tget linkedHeightNode(): LeafNode | undefined { return this._linkedHeightNode; }\n\tset linkedHeightNode(node: LeafNode | undefined) {\n\t\tthis._onDidLinkedHeightNodeChange.input = node ? node._onDidViewChange : Event.None;\n\t\tthis._linkedHeightNode = node;\n\t\tthis._onDidSetLinkedNode.fire(undefined);\n\t}\n\n\tprivate readonly _onDidSetLinkedNode = new Emitter<number | undefined>();\n\tprivate _onDidViewChange: Event<number | undefined>;\n\treadonly onDidChange: Event<number | undefined>;\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\treadonly view: IView,\n\t\treadonly orientation: Orientation,\n\t\treadonly layoutController: LayoutController,\n\t\torthogonalSize: number,\n\t\tsize: number = 0\n\t) {\n\t\tthis._orthogonalSize = orthogonalSize;\n\t\tthis._size = size;\n\n\t\tconst onDidChange = createLatchedOnDidChangeViewEvent(view);\n\t\tthis._onDidViewChange = Event.map(onDidChange, e => e && (this.orientation === Orientation.VERTICAL ? e.width : e.height), this.disposables);\n\t\tthis.onDidChange = Event.any(this._onDidViewChange, this._onDidSetLinkedNode.event, this._onDidLinkedWidthNodeChange.event, this._onDidLinkedHeightNodeChange.event);\n\t}\n\n\tget width(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n\t}\n\n\tget height(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n\t}\n\n\tget top(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.absoluteOffset : this.absoluteOrthogonalOffset;\n\t}\n\n\tget left(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.absoluteOrthogonalOffset : this.absoluteOffset;\n\t}\n\n\tget element(): HTMLElement {\n\t\treturn this.view.element;\n\t}\n\n\tprivate get minimumWidth(): number {\n\t\treturn this.linkedWidthNode ? Math.max(this.linkedWidthNode.view.minimumWidth, this.view.minimumWidth) : this.view.minimumWidth;\n\t}\n\n\tprivate get maximumWidth(): number {\n\t\treturn this.linkedWidthNode ? Math.min(this.linkedWidthNode.view.maximumWidth, this.view.maximumWidth) : this.view.maximumWidth;\n\t}\n\n\tprivate get minimumHeight(): number {\n\t\treturn this.linkedHeightNode ? Math.max(this.linkedHeightNode.view.minimumHeight, this.view.minimumHeight) : this.view.minimumHeight;\n\t}\n\n\tprivate get maximumHeight(): number {\n\t\treturn this.linkedHeightNode ? Math.min(this.linkedHeightNode.view.maximumHeight, this.view.maximumHeight) : this.view.maximumHeight;\n\t}\n\n\tget minimumSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumHeight : this.minimumWidth;\n\t}\n\n\tget maximumSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumHeight : this.maximumWidth;\n\t}\n\n\tget priority(): LayoutPriority | undefined {\n\t\treturn this.view.priority;\n\t}\n\n\tget proportionalLayout(): boolean {\n\t\treturn this.view.proportionalLayout ?? true;\n\t}\n\n\tget snap(): boolean | undefined {\n\t\treturn this.view.snap;\n\t}\n\n\tget minimumOrthogonalSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumWidth : this.minimumHeight;\n\t}\n\n\tget maximumOrthogonalSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumWidth : this.maximumHeight;\n\t}\n\n\tprivate _boundarySashes: IRelativeBoundarySashes = {};\n\tget boundarySashes(): IRelativeBoundarySashes { return this._boundarySashes; }\n\tset boundarySashes(boundarySashes: IRelativeBoundarySashes) {\n\t\tthis._boundarySashes = boundarySashes;\n\n\t\tthis.view.setBoundarySashes?.(toAbsoluteBoundarySashes(boundarySashes, this.orientation));\n\t}\n\n\tlayout(size: number, offset: number, ctx: ILayoutContext | undefined): void {\n\t\tif (!this.layoutController.isLayoutEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof ctx === 'undefined') {\n\t\t\tthrow new Error('Invalid state');\n\t\t}\n\n\t\tthis._size = size;\n\t\tthis._orthogonalSize = ctx.orthogonalSize;\n\t\tthis.absoluteOffset = ctx.absoluteOffset + offset;\n\t\tthis.absoluteOrthogonalOffset = ctx.absoluteOrthogonalOffset;\n\n\t\tthis._layout(this.width, this.height, this.top, this.left);\n\t}\n\n\tprivate cachedWidth: number = 0;\n\tprivate cachedHeight: number = 0;\n\tprivate cachedTop: number = 0;\n\tprivate cachedLeft: number = 0;\n\n\tprivate _layout(width: number, height: number, top: number, left: number): void {\n\t\tif (this.cachedWidth === width && this.cachedHeight === height && this.cachedTop === top && this.cachedLeft === left) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.cachedWidth = width;\n\t\tthis.cachedHeight = height;\n\t\tthis.cachedTop = top;\n\t\tthis.cachedLeft = left;\n\t\tthis.view.layout(width, height, top, left);\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tthis.view.setVisible?.(visible);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\ntype Node = BranchNode | LeafNode;\n\nexport interface INodeDescriptor {\n\tnode: Node;\n\tvisible?: boolean;\n}\n\nfunction flipNode(node: BranchNode, size: number, orthogonalSize: number): BranchNode;\nfunction flipNode(node: LeafNode, size: number, orthogonalSize: number): LeafNode;\nfunction flipNode(node: Node, size: number, orthogonalSize: number): Node;\nfunction flipNode(node: Node, size: number, orthogonalSize: number): Node {\n\tif (node instanceof BranchNode) {\n\t\tconst result = new BranchNode(orthogonal(node.orientation), node.layoutController, node.styles, node.splitviewProportionalLayout, size, orthogonalSize, node.edgeSnapping);\n\n\t\tlet totalSize = 0;\n\n\t\tfor (let i = node.children.length - 1; i >= 0; i--) {\n\t\t\tconst child = node.children[i];\n\t\t\tconst childSize = child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n\t\t\tlet newSize = node.size === 0 ? 0 : Math.round((size * childSize) / node.size);\n\t\t\ttotalSize += newSize;\n\n\t\t\t// The last view to add should adjust to rounding errors\n\t\t\tif (i === 0) {\n\t\t\t\tnewSize += size - totalSize;\n\t\t\t}\n\n\t\t\tresult.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0, true);\n\t\t}\n\n\t\tnode.dispose();\n\t\treturn result;\n\t} else {\n\t\tconst result = new LeafNode(node.view, orthogonal(node.orientation), node.layoutController, orthogonalSize);\n\t\tnode.dispose();\n\t\treturn result;\n\t}\n}\n\n/**\n * The location of a {@link IView view} within a {@link GridView}.\n *\n * A GridView is a tree composition of multiple {@link SplitView} instances, orthogonal\n * between one another. Here's an example:\n *\n * ```\n *  +-----+---------------+\n *  |  A  |      B        |\n *  +-----+---------+-----+\n *  |        C      |     |\n *  +---------------+  D  |\n *  |        E      |     |\n *  +---------------+-----+\n * ```\n *\n * The above grid's tree structure is:\n *\n * ```\n *  Vertical SplitView\n *  +-Horizontal SplitView\n *  | +-A\n *  | +-B\n *  +- Horizontal SplitView\n *    +-Vertical SplitView\n *    | +-C\n *    | +-E\n *    +-D\n * ```\n *\n * So, {@link IView views} within a {@link GridView} can be referenced by\n * a sequence of indexes, each index referencing each SplitView. Here are\n * each view's locations, from the example above:\n *\n * - `A`: `[0,0]`\n * - `B`: `[0,1]`\n * - `C`: `[1,0,0]`\n * - `D`: `[1,1]`\n * - `E`: `[1,0,1]`\n */\nexport type GridLocation = number[];\n\n/**\n * The {@link GridView} is the UI component which implements a two dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are mostly HTMLElement instances with size constraints. A {@link GridView} is a\n * tree composition of multiple {@link SplitView} instances, orthogonal between\n * one another. It will respect view's size contraints, just like the SplitView.\n *\n * It has a low-level index based API, allowing for fine grain performant operations.\n * Look into the {@link Grid} widget for a higher-level API.\n *\n * Features:\n * - flex-like layout algorithm\n * - snap support\n * - corner sash support\n * - Alt key modifier behavior, macOS style\n * - layout (de)serialization\n */\nexport class GridView implements IDisposable {\n\n\t/**\n\t * The DOM element for this view.\n\t */\n\treadonly element: HTMLElement;\n\n\tprivate styles: IGridViewStyles;\n\tprivate proportionalLayout: boolean;\n\tprivate _root!: BranchNode;\n\tprivate onDidSashResetRelay = new Relay<GridLocation>();\n\tprivate _onDidScroll = new Relay<void>();\n\tprivate _onDidChange = new Relay<IViewSize | undefined>();\n\tprivate _boundarySashes: IBoundarySashes = {};\n\n\t/**\n\t * The layout controller makes sure layout only propagates\n\t * to the views after the very first call to {@link GridView.layout}.\n\t */\n\tprivate layoutController: LayoutController;\n\tprivate disposable2x2: IDisposable = Disposable.None;\n\n\tprivate get root(): BranchNode { return this._root; }\n\n\tprivate set root(root: BranchNode) {\n\t\tconst oldRoot = this._root;\n\n\t\tif (oldRoot) {\n\t\t\toldRoot.element.remove();\n\t\t\toldRoot.dispose();\n\t\t}\n\n\t\tthis._root = root;\n\t\tthis.element.appendChild(root.element);\n\t\tthis.onDidSashResetRelay.input = root.onDidSashReset;\n\t\tthis._onDidChange.input = Event.map(root.onDidChange, () => undefined); // TODO\n\t\tthis._onDidScroll.input = root.onDidScroll;\n\t}\n\n\t/**\n\t * Fires whenever the user double clicks a {@link Sash sash}.\n\t */\n\treadonly onDidSashReset = this.onDidSashResetRelay.event;\n\n\t/**\n\t * Fires whenever the user scrolls a {@link SplitView} within\n\t * the grid.\n\t */\n\treadonly onDidScroll = this._onDidScroll.event;\n\n\t/**\n\t * Fires whenever a view within the grid changes its size constraints.\n\t */\n\treadonly onDidChange = this._onDidChange.event;\n\n\t/**\n\t * The width of the grid.\n\t */\n\tget width(): number { return this.root.width; }\n\n\t/**\n\t * The height of the grid.\n\t */\n\tget height(): number { return this.root.height; }\n\n\t/**\n\t * The minimum width of the grid.\n\t */\n\tget minimumWidth(): number { return this.root.minimumWidth; }\n\n\t/**\n\t * The minimum height of the grid.\n\t */\n\tget minimumHeight(): number { return this.root.minimumHeight; }\n\n\t/**\n\t * The maximum width of the grid.\n\t */\n\tget maximumWidth(): number { return this.root.maximumHeight; }\n\n\t/**\n\t * The maximum height of the grid.\n\t */\n\tget maximumHeight(): number { return this.root.maximumHeight; }\n\n\tget orientation(): Orientation { return this._root.orientation; }\n\tget boundarySashes(): IBoundarySashes { return this._boundarySashes; }\n\n\t/**\n\t * The orientation of the grid. Matches the orientation of the root\n\t * {@link SplitView} in the grid's tree model.\n\t */\n\tset orientation(orientation: Orientation) {\n\t\tif (this._root.orientation === orientation) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { size, orthogonalSize, absoluteOffset, absoluteOrthogonalOffset } = this._root;\n\t\tthis.root = flipNode(this._root, orthogonalSize, size);\n\t\tthis.root.layout(size, 0, { orthogonalSize, absoluteOffset: absoluteOrthogonalOffset, absoluteOrthogonalOffset: absoluteOffset, absoluteSize: size, absoluteOrthogonalSize: orthogonalSize });\n\t\tthis.boundarySashes = this.boundarySashes;\n\t}\n\n\t/**\n\t * A collection of sashes perpendicular to each edge of the grid.\n\t * Corner sashes will be created for each intersection.\n\t */\n\tset boundarySashes(boundarySashes: IBoundarySashes) {\n\t\tthis._boundarySashes = boundarySashes;\n\t\tthis.root.boundarySashes = fromAbsoluteBoundarySashes(boundarySashes, this.orientation);\n\t}\n\n\t/**\n\t * Enable/disable edge snapping across all grid views.\n\t */\n\tset edgeSnapping(edgeSnapping: boolean) {\n\t\tthis.root.edgeSnapping = edgeSnapping;\n\t}\n\n\tprivate maximizedNode: LeafNode | undefined = undefined;\n\n\tprivate readonly _onDidChangeViewMaximized = new Emitter<boolean>();\n\treadonly onDidChangeViewMaximized = this._onDidChangeViewMaximized.event;\n\n\t/**\n\t * Create a new {@link GridView} instance.\n\t *\n\t * @remarks It's the caller's responsibility to append the\n\t * {@link GridView.element} to the page's DOM.\n\t */\n\tconstructor(options: IGridViewOptions = {}) {\n\t\tthis.element = $('.monaco-grid-view');\n\t\tthis.styles = options.styles || defaultStyles;\n\t\tthis.proportionalLayout = typeof options.proportionalLayout !== 'undefined' ? !!options.proportionalLayout : true;\n\t\tthis.layoutController = new LayoutController(false);\n\t\tthis.root = new BranchNode(Orientation.VERTICAL, this.layoutController, this.styles, this.proportionalLayout);\n\t}\n\n\tstyle(styles: IGridViewStyles): void {\n\t\tthis.styles = styles;\n\t\tthis.root.style(styles);\n\t}\n\n\t/**\n\t * Layout the {@link GridView}.\n\t *\n\t * Optionally provide a `top` and `left` positions, those will propagate\n\t * as an origin for positions passed to {@link IView.layout}.\n\t *\n\t * @param width The width of the {@link GridView}.\n\t * @param height The height of the {@link GridView}.\n\t * @param top Optional, the top location of the {@link GridView}.\n\t * @param left Optional, the left location of the {@link GridView}.\n\t */\n\tlayout(width: number, height: number, top: number = 0, left: number = 0): void {\n\t\tthis.layoutController.isLayoutEnabled = true;\n\n\t\tconst [size, orthogonalSize, offset, orthogonalOffset] = this.root.orientation === Orientation.HORIZONTAL ? [height, width, top, left] : [width, height, left, top];\n\t\tthis.root.layout(size, 0, { orthogonalSize, absoluteOffset: offset, absoluteOrthogonalOffset: orthogonalOffset, absoluteSize: size, absoluteOrthogonalSize: orthogonalSize });\n\t}\n\n\t/**\n\t * Add a {@link IView view} to this {@link GridView}.\n\t *\n\t * @param view The view to add.\n\t * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n\t * @param location The {@link GridLocation location} to insert the view on.\n\t */\n\taddView(view: IView, size: number | Sizing, location: GridLocation): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (parent instanceof BranchNode) {\n\t\t\tconst node = new LeafNode(view, orthogonal(parent.orientation), this.layoutController, parent.orthogonalSize);\n\n\t\t\ttry {\n\t\t\t\tparent.addChild(node, size, index);\n\t\t\t} catch (err) {\n\t\t\t\tnode.dispose();\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [, grandParent] = tail(pathToParent);\n\t\t\tconst [, parentIndex] = tail(rest);\n\n\t\t\tlet newSiblingSize: number | Sizing = 0;\n\n\t\t\tconst newSiblingCachedVisibleSize = grandParent.getChildCachedVisibleSize(parentIndex);\n\t\t\tif (typeof newSiblingCachedVisibleSize === 'number') {\n\t\t\t\tnewSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n\t\t\t}\n\n\t\t\tconst oldChild = grandParent.removeChild(parentIndex);\n\t\t\toldChild.dispose();\n\n\t\t\tconst newParent = new BranchNode(parent.orientation, parent.layoutController, this.styles, this.proportionalLayout, parent.size, parent.orthogonalSize, grandParent.edgeSnapping);\n\t\t\tgrandParent.addChild(newParent, parent.size, parentIndex);\n\n\t\t\tconst newSibling = new LeafNode(parent.view, grandParent.orientation, this.layoutController, parent.size);\n\t\t\tnewParent.addChild(newSibling, newSiblingSize, 0);\n\n\t\t\tif (typeof size !== 'number' && size.type === 'split') {\n\t\t\t\tsize = Sizing.Split(0);\n\t\t\t}\n\n\t\t\tconst node = new LeafNode(view, grandParent.orientation, this.layoutController, parent.size);\n\t\t\tnewParent.addChild(node, size, index);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Remove a {@link IView view} from this {@link GridView}.\n\t *\n\t * @param location The {@link GridLocation location} of the {@link IView view}.\n\t * @param sizing Whether to distribute other {@link IView view}'s sizes.\n\t */\n\tremoveView(location: GridLocation, sizing?: DistributeSizing | AutoSizing): IView {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst node = parent.children[index];\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tparent.removeChild(index, sizing);\n\t\tnode.dispose();\n\n\t\tif (parent.children.length === 0) {\n\t\t\tthrow new Error('Invalid grid state');\n\t\t}\n\n\t\tif (parent.children.length > 1) {\n\t\t\tthis.trySet2x2();\n\t\t\treturn node.view;\n\t\t}\n\n\t\tif (pathToParent.length === 0) { // parent is root\n\t\t\tconst sibling = parent.children[0];\n\n\t\t\tif (sibling instanceof LeafNode) {\n\t\t\t\treturn node.view;\n\t\t\t}\n\n\t\t\t// we must promote sibling to be the new root\n\t\t\tparent.removeChild(0);\n\t\t\tparent.dispose();\n\t\t\tthis.root = sibling;\n\t\t\tthis.boundarySashes = this.boundarySashes;\n\t\t\tthis.trySet2x2();\n\t\t\treturn node.view;\n\t\t}\n\n\t\tconst [, grandParent] = tail(pathToParent);\n\t\tconst [, parentIndex] = tail(rest);\n\n\t\tconst isSiblingVisible = parent.isChildVisible(0);\n\t\tconst sibling = parent.removeChild(0);\n\n\t\tconst sizes = grandParent.children.map((_, i) => grandParent.getChildSize(i));\n\t\tgrandParent.removeChild(parentIndex, sizing);\n\t\tparent.dispose();\n\n\t\tif (sibling instanceof BranchNode) {\n\t\t\tsizes.splice(parentIndex, 1, ...sibling.children.map(c => c.size));\n\n\t\t\tconst siblingChildren = sibling.removeAllChildren();\n\n\t\t\tfor (let i = 0; i < siblingChildren.length; i++) {\n\t\t\t\tgrandParent.addChild(siblingChildren[i], siblingChildren[i].size, parentIndex + i);\n\t\t\t}\n\t\t} else {\n\t\t\tconst newSibling = new LeafNode(sibling.view, orthogonal(sibling.orientation), this.layoutController, sibling.size);\n\t\t\tconst sizing = isSiblingVisible ? sibling.orthogonalSize : Sizing.Invisible(sibling.orthogonalSize);\n\t\t\tgrandParent.addChild(newSibling, sizing, parentIndex);\n\t\t}\n\n\t\tsibling.dispose();\n\n\t\tfor (let i = 0; i < sizes.length; i++) {\n\t\t\tgrandParent.resizeChild(i, sizes[i]);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t\treturn node.view;\n\t}\n\n\t/**\n\t * Move a {@link IView view} within its parent.\n\t *\n\t * @param parentLocation The {@link GridLocation location} of the {@link IView view}'s parent.\n\t * @param from The index of the {@link IView view} to move.\n\t * @param to The index where the {@link IView view} should move to.\n\t */\n\tmoveView(parentLocation: GridLocation, from: number, to: number): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tconst [, parent] = this.getNode(parentLocation);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tparent.moveChild(from, to);\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Swap two {@link IView views} within the {@link GridView}.\n\t *\n\t * @param from The {@link GridLocation location} of one view.\n\t * @param to The {@link GridLocation location} of another view.\n\t */\n\tswapViews(from: GridLocation, to: GridLocation): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tconst [fromRest, fromIndex] = tail(from);\n\t\tconst [, fromParent] = this.getNode(fromRest);\n\n\t\tif (!(fromParent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\tconst fromSize = fromParent.getChildSize(fromIndex);\n\t\tconst fromNode = fromParent.children[fromIndex];\n\n\t\tif (!(fromNode instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\tconst [toRest, toIndex] = tail(to);\n\t\tconst [, toParent] = this.getNode(toRest);\n\n\t\tif (!(toParent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid to location');\n\t\t}\n\n\t\tconst toSize = toParent.getChildSize(toIndex);\n\t\tconst toNode = toParent.children[toIndex];\n\n\t\tif (!(toNode instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid to location');\n\t\t}\n\n\t\tif (fromParent === toParent) {\n\t\t\tfromParent.swapChildren(fromIndex, toIndex);\n\t\t} else {\n\t\t\tfromParent.removeChild(fromIndex);\n\t\t\ttoParent.removeChild(toIndex);\n\n\t\t\tfromParent.addChild(toNode, fromSize, fromIndex);\n\t\t\ttoParent.addChild(fromNode, toSize, toIndex);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Resize a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t * @param size The size the view should be. Optionally provide a single dimension.\n\t */\n\tresizeView(location: GridLocation, size: Partial<IViewSize>): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tif (!size.width && !size.height) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [parentSize, grandParentSize] = parent.orientation === Orientation.HORIZONTAL ? [size.width, size.height] : [size.height, size.width];\n\n\t\tif (typeof grandParentSize === 'number' && pathToParent.length > 0) {\n\t\t\tconst [, grandParent] = tail(pathToParent);\n\t\t\tconst [, parentIndex] = tail(rest);\n\n\t\t\tgrandParent.resizeChild(parentIndex, grandParentSize);\n\t\t}\n\n\t\tif (typeof parentSize === 'number') {\n\t\t\tparent.resizeChild(index, parentSize);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Get the size of a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view. Provide `undefined` to get\n\t * the size of the grid itself.\n\t */\n\tgetViewSize(location?: GridLocation): IViewSize {\n\t\tif (!location) {\n\t\t\treturn { width: this.root.width, height: this.root.height };\n\t\t}\n\n\t\tconst [, node] = this.getNode(location);\n\t\treturn { width: node.width, height: node.height };\n\t}\n\n\t/**\n\t * Get the cached visible size of a {@link IView view}. This was the size\n\t * of the view at the moment it last became hidden.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tgetViewCachedVisibleSize(location: GridLocation): number | undefined {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\treturn parent.getChildCachedVisibleSize(index);\n\t}\n\n\t/**\n\t * Maximize the size of a {@link IView view} by collapsing all other views\n\t * to their minimum sizes.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\texpandView(location: GridLocation): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tconst [ancestors, node] = this.getNode(location);\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tfor (let i = 0; i < ancestors.length; i++) {\n\t\t\tancestors[i].resizeChild(location[i], Number.POSITIVE_INFINITY);\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether all other {@link IView views} are at their minimum size.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tisViewExpanded(location: GridLocation): boolean {\n\t\tif (this.hasMaximizedView()) {\n\t\t\t// No view can be expanded when a view is maximized\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [ancestors, node] = this.getNode(location);\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tfor (let i = 0; i < ancestors.length; i++) {\n\t\t\tif (!ancestors[i].isChildExpanded(location[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tmaximizeView(location: GridLocation) {\n\t\tconst [, nodeToMaximize] = this.getNode(location);\n\t\tif (!(nodeToMaximize instanceof LeafNode)) {\n\t\t\tthrow new Error('Location is not a LeafNode');\n\t\t}\n\n\t\tif (this.maximizedNode === nodeToMaximize) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tfunction hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n\t\t\tfor (let i = 0; i < parent.children.length; i++) {\n\t\t\t\tconst child = parent.children[i];\n\t\t\t\tif (child instanceof LeafNode) {\n\t\t\t\t\tif (child !== exclude) {\n\t\t\t\t\t\tparent.setChildVisible(i, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thideAllViewsBut(child, exclude);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\thideAllViewsBut(this.root, nodeToMaximize);\n\n\t\tthis.maximizedNode = nodeToMaximize;\n\t\tthis._onDidChangeViewMaximized.fire(true);\n\t}\n\n\texitMaximizedView(): void {\n\t\tif (!this.maximizedNode) {\n\t\t\treturn;\n\t\t}\n\t\tthis.maximizedNode = undefined;\n\n\t\t// When hiding a view, it's previous size is cached.\n\t\t// To restore the sizes of all views, they need to be made visible in reverse order.\n\t\tfunction showViewsInReverseOrder(parent: BranchNode): void {\n\t\t\tfor (let index = parent.children.length - 1; index >= 0; index--) {\n\t\t\t\tconst child = parent.children[index];\n\t\t\t\tif (child instanceof LeafNode) {\n\t\t\t\t\tparent.setChildVisible(index, true);\n\t\t\t\t} else {\n\t\t\t\t\tshowViewsInReverseOrder(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tshowViewsInReverseOrder(this.root);\n\n\t\tthis._onDidChangeViewMaximized.fire(false);\n\t}\n\n\thasMaximizedView(): boolean {\n\t\treturn this.maximizedNode !== undefined;\n\t}\n\n\t/**\n\t * Returns whether the {@link IView view} is maximized.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tisViewMaximized(location: GridLocation): boolean {\n\t\tconst [, node] = this.getNode(location);\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Location is not a LeafNode');\n\t\t}\n\t\treturn node === this.maximizedNode;\n\t}\n\n\t/**\n\t * Distribute the size among all {@link IView views} within the entire\n\t * grid or within a single {@link SplitView}.\n\t *\n\t * @param location The {@link GridLocation location} of a view containing\n\t * children views, which will have their sizes distributed within the parent\n\t * view's size. Provide `undefined` to recursively distribute all views' sizes\n\t * in the entire grid.\n\t */\n\tdistributeViewSizes(location?: GridLocation): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t}\n\n\t\tif (!location) {\n\t\t\tthis.root.distributeViewSizes(true);\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, node] = this.getNode(location);\n\n\t\tif (!(node instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tnode.distributeViewSizes();\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Returns whether a {@link IView view} is visible.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tisViewVisible(location: GridLocation): boolean {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\treturn parent.isChildVisible(index);\n\t}\n\n\t/**\n\t * Set the visibility state of a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tsetViewVisible(location: GridLocation, visible: boolean): void {\n\t\tif (this.hasMaximizedView()) {\n\t\t\tthis.exitMaximizedView();\n\t\t\treturn;\n\t\t}\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\tparent.setChildVisible(index, visible);\n\t}\n\n\t/**\n\t * Returns a descriptor for the entire grid.\n\t */\n\tgetView(): GridBranchNode;\n\n\t/**\n\t * Returns a descriptor for a {@link GridLocation subtree} within the\n\t * {@link GridView}.\n\t *\n\t * @param location The {@link GridLocation location} of the root of\n\t * the {@link GridLocation subtree}.\n\t */\n\tgetView(location: GridLocation): GridNode;\n\tgetView(location?: GridLocation): GridNode {\n\t\tconst node = location ? this.getNode(location)[1] : this._root;\n\t\treturn this._getViews(node, this.orientation);\n\t}\n\n\t/**\n\t * Construct a new {@link GridView} from a JSON object.\n\t *\n\t * @param json The JSON object.\n\t * @param deserializer A deserializer which can revive each view.\n\t * @returns A new {@link GridView} instance.\n\t */\n\tstatic deserialize<T extends ISerializableView>(json: ISerializedGridView, deserializer: IViewDeserializer<T>, options: IGridViewOptions = {}): GridView {\n\t\tif (typeof json.orientation !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'orientation\\' property must be a number.');\n\t\t} else if (typeof json.width !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'width\\' property must be a number.');\n\t\t} else if (typeof json.height !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'height\\' property must be a number.');\n\t\t} else if (json.root?.type !== 'branch') {\n\t\t\tthrow new Error('Invalid JSON: \\'root\\' property must have \\'type\\' value of branch.');\n\t\t}\n\n\t\tconst orientation = json.orientation;\n\t\tconst height = json.height;\n\n\t\tconst result = new GridView(options);\n\t\tresult._deserialize(json.root as ISerializedBranchNode, orientation, deserializer, height);\n\n\t\treturn result;\n\t}\n\n\tprivate _deserialize(root: ISerializedBranchNode, orientation: Orientation, deserializer: IViewDeserializer<ISerializableView>, orthogonalSize: number): void {\n\t\tthis.root = this._deserializeNode(root, orientation, deserializer, orthogonalSize) as BranchNode;\n\t}\n\n\tprivate _deserializeNode(node: ISerializedNode, orientation: Orientation, deserializer: IViewDeserializer<ISerializableView>, orthogonalSize: number): Node {\n\t\tlet result: Node;\n\t\tif (node.type === 'branch') {\n\t\t\tconst serializedChildren = node.data as ISerializedNode[];\n\t\t\tconst children = serializedChildren.map(serializedChild => {\n\t\t\t\treturn {\n\t\t\t\t\tnode: this._deserializeNode(serializedChild, orthogonal(orientation), deserializer, node.size),\n\t\t\t\t\tvisible: (serializedChild as { visible?: boolean }).visible\n\t\t\t\t} satisfies INodeDescriptor;\n\t\t\t});\n\n\t\t\tresult = new BranchNode(orientation, this.layoutController, this.styles, this.proportionalLayout, node.size, orthogonalSize, undefined, children);\n\t\t} else {\n\t\t\tresult = new LeafNode(deserializer.fromJSON(node.data), orientation, this.layoutController, orthogonalSize, node.size);\n\t\t\tif (node.maximized && !this.maximizedNode) {\n\t\t\t\tthis.maximizedNode = result;\n\t\t\t\tthis._onDidChangeViewMaximized.fire(true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getViews(node: Node, orientation: Orientation, cachedVisibleSize?: number): GridNode {\n\t\tconst box = { top: node.top, left: node.left, width: node.width, height: node.height };\n\n\t\tif (node instanceof LeafNode) {\n\t\t\treturn { view: node.view, box, cachedVisibleSize, maximized: this.maximizedNode === node };\n\t\t}\n\n\t\tconst children: GridNode[] = [];\n\n\t\tfor (let i = 0; i < node.children.length; i++) {\n\t\t\tconst child = node.children[i];\n\t\t\tconst cachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n\t\t\tchildren.push(this._getViews(child, orthogonal(orientation), cachedVisibleSize));\n\t\t}\n\n\t\treturn { children, box };\n\t}\n\n\tprivate getNode(location: GridLocation, node: Node = this.root, path: BranchNode[] = []): [BranchNode[], Node] {\n\t\tif (location.length === 0) {\n\t\t\treturn [path, node];\n\t\t}\n\n\t\tif (!(node instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst [index, ...rest] = location;\n\n\t\tif (index < 0 || index >= node.children.length) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst child = node.children[index];\n\t\tpath.push(node);\n\n\t\treturn this.getNode(rest, child, path);\n\t}\n\n\t/**\n\t * Attempt to lock the {@link Sash sashes} in this {@link GridView} so\n\t * the grid behaves as a 2x2 matrix, with a corner sash in the middle.\n\t *\n\t * In case the grid isn't a 2x2 grid _and_ all sashes are not aligned,\n\t * this method is a no-op.\n\t */\n\ttrySet2x2(): void {\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tif (this.root.children.length !== 2) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [first, second] = this.root.children;\n\n\t\tif (!(first instanceof BranchNode) || !(second instanceof BranchNode)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.disposable2x2 = first.trySet2x2(second);\n\t}\n\n\t/**\n\t * Populate a map with views to DOM nodes.\n\t * @remarks To be used internally only.\n\t */\n\tgetViewMap(map: Map<IView, HTMLElement>, node?: Node): void {\n\t\tif (!node) {\n\t\t\tnode = this.root;\n\t\t}\n\n\t\tif (node instanceof BranchNode) {\n\t\t\tnode.children.forEach(child => this.getViewMap(map, child));\n\t\t} else {\n\t\t\tmap.set(node.view, node.element);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.onDidSashResetRelay.dispose();\n\t\tthis.root.dispose();\n\t\tthis.element.remove();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Orientation", "LayoutPriority", "Sizing", "sibling", "sizing", "cachedVisibleSize"]
}
