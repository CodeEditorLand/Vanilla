{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/findinput/findInputToggles.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getDefaultHoverDelegate } from '../hover/hoverDelegateFactory.js';\nimport { IHoverDelegate } from '../hover/hoverDelegate.js';\nimport { Toggle } from '../toggle/toggle.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport * as nls from '../../../../nls.js';\n\nexport interface IFindInputToggleOpts {\n\treadonly appendTitle: string;\n\treadonly isChecked: boolean;\n\treadonly inputActiveOptionBorder: string | undefined;\n\treadonly inputActiveOptionForeground: string | undefined;\n\treadonly inputActiveOptionBackground: string | undefined;\n\treadonly hoverDelegate?: IHoverDelegate;\n}\n\nconst NLS_CASE_SENSITIVE_TOGGLE_LABEL = nls.localize('caseDescription', \"Match Case\");\nconst NLS_WHOLE_WORD_TOGGLE_LABEL = nls.localize('wordsDescription', \"Match Whole Word\");\nconst NLS_REGEX_TOGGLE_LABEL = nls.localize('regexDescription', \"Use Regular Expression\");\n\nexport class CaseSensitiveToggle extends Toggle {\n\tconstructor(opts: IFindInputToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.caseSensitive,\n\t\t\ttitle: NLS_CASE_SENSITIVE_TOGGLE_LABEL + opts.appendTitle,\n\t\t\tisChecked: opts.isChecked,\n\t\t\thoverDelegate: opts.hoverDelegate ?? getDefaultHoverDelegate('element'),\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground\n\t\t});\n\t}\n}\n\nexport class WholeWordsToggle extends Toggle {\n\tconstructor(opts: IFindInputToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.wholeWord,\n\t\t\ttitle: NLS_WHOLE_WORD_TOGGLE_LABEL + opts.appendTitle,\n\t\t\tisChecked: opts.isChecked,\n\t\t\thoverDelegate: opts.hoverDelegate ?? getDefaultHoverDelegate('element'),\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground\n\t\t});\n\t}\n}\n\nexport class RegexToggle extends Toggle {\n\tconstructor(opts: IFindInputToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.regex,\n\t\t\ttitle: NLS_REGEX_TOGGLE_LABEL + opts.appendTitle,\n\t\t\tisChecked: opts.isChecked,\n\t\t\thoverDelegate: opts.hoverDelegate ?? getDefaultHoverDelegate('element'),\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground\n\t\t});\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,+BAA+B;AACxC,SAAS,sBAAsB;AAC/B,SAAS,cAAc;AACvB,SAAS,eAAe;AACxB,YAAY,SAAS;AAWrB,MAAM,kCAAkC,IAAI,SAAS,mBAAmB,YAAY;AACpF,MAAM,8BAA8B,IAAI,SAAS,oBAAoB,kBAAkB;AACvF,MAAM,yBAAyB,IAAI,SAAS,oBAAoB,wBAAwB;AAEjF,MAAM,4BAA4B,OAAO;AAAA,EAxBhD,OAwBgD;AAAA;AAAA;AAAA,EAC/C,YAAY,MAA4B;AACvC,UAAM;AAAA,MACL,MAAM,QAAQ;AAAA,MACd,OAAO,kCAAkC,KAAK;AAAA,MAC9C,WAAW,KAAK;AAAA,MAChB,eAAe,KAAK,iBAAiB,wBAAwB,SAAS;AAAA,MACtE,yBAAyB,KAAK;AAAA,MAC9B,6BAA6B,KAAK;AAAA,MAClC,6BAA6B,KAAK;AAAA,IACnC,CAAC;AAAA,EACF;AACD;AAEO,MAAM,yBAAyB,OAAO;AAAA,EAtC7C,OAsC6C;AAAA;AAAA;AAAA,EAC5C,YAAY,MAA4B;AACvC,UAAM;AAAA,MACL,MAAM,QAAQ;AAAA,MACd,OAAO,8BAA8B,KAAK;AAAA,MAC1C,WAAW,KAAK;AAAA,MAChB,eAAe,KAAK,iBAAiB,wBAAwB,SAAS;AAAA,MACtE,yBAAyB,KAAK;AAAA,MAC9B,6BAA6B,KAAK;AAAA,MAClC,6BAA6B,KAAK;AAAA,IACnC,CAAC;AAAA,EACF;AACD;AAEO,MAAM,oBAAoB,OAAO;AAAA,EApDxC,OAoDwC;AAAA;AAAA;AAAA,EACvC,YAAY,MAA4B;AACvC,UAAM;AAAA,MACL,MAAM,QAAQ;AAAA,MACd,OAAO,yBAAyB,KAAK;AAAA,MACrC,WAAW,KAAK;AAAA,MAChB,eAAe,KAAK,iBAAiB,wBAAwB,SAAS;AAAA,MACtE,yBAAyB,KAAK;AAAA,MAC9B,6BAA6B,KAAK;AAAA,MAClC,6BAA6B,KAAK;AAAA,IACnC,CAAC;AAAA,EACF;AACD;",
  "names": []
}
