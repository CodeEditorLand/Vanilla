{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/centered/centeredViewLayout.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Color } from \"../../../common/color.js\";\nimport { Event } from \"../../../common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../common/lifecycle.js\";\nimport { $, type IDomNodePagePosition } from \"../../dom.js\";\nimport type { IView, IViewSize } from \"../grid/grid.js\";\nimport type { IBoundarySashes } from \"../sash/sash.js\";\nimport {\n\ttype DistributeSizing,\n\ttype ISplitViewStyles,\n\ttype IView as ISplitViewView,\n\tOrientation,\n\tSplitView,\n} from \"../splitview/splitview.js\";\n\nexport interface CenteredViewState {\n\t// width of the fixed centered layout\n\ttargetWidth: number;\n\t// proportional size of left margin\n\tleftMarginRatio: number;\n\t// proportional size of right margin\n\trightMarginRatio: number;\n}\n\nconst defaultState: CenteredViewState = {\n\ttargetWidth: 900,\n\tleftMarginRatio: 0.1909,\n\trightMarginRatio: 0.1909,\n};\n\nconst distributeSizing: DistributeSizing = { type: \"distribute\" };\n\nfunction createEmptyView(\n\tbackground: Color | undefined,\n): ISplitViewView<{ top: number; left: number }> {\n\tconst element = $(\".centered-layout-margin\");\n\telement.style.height = \"100%\";\n\tif (background) {\n\t\telement.style.backgroundColor = background.toString();\n\t}\n\n\treturn {\n\t\telement,\n\t\tlayout: () => undefined,\n\t\tminimumSize: 60,\n\t\tmaximumSize: Number.POSITIVE_INFINITY,\n\t\tonDidChange: Event.None,\n\t};\n}\n\nfunction toSplitViewView(\n\tview: IView,\n\tgetHeight: () => number,\n): ISplitViewView<{ top: number; left: number }> {\n\treturn {\n\t\telement: view.element,\n\t\tget maximumSize() {\n\t\t\treturn view.maximumWidth;\n\t\t},\n\t\tget minimumSize() {\n\t\t\treturn view.minimumWidth;\n\t\t},\n\t\tonDidChange: Event.map(view.onDidChange, (e) => e && e.width),\n\t\tlayout: (size, offset, ctx) =>\n\t\t\tview.layout(\n\t\t\t\tsize,\n\t\t\t\tgetHeight(),\n\t\t\t\tctx?.top ?? 0,\n\t\t\t\t(ctx?.left ?? 0) + offset,\n\t\t\t),\n\t};\n}\n\nexport interface ICenteredViewStyles extends ISplitViewStyles {\n\tbackground: Color;\n}\n\nexport class CenteredViewLayout implements IDisposable {\n\tprivate splitView?: SplitView<{ top: number; left: number }>;\n\tprivate lastLayoutPosition: IDomNodePagePosition = {\n\t\twidth: 0,\n\t\theight: 0,\n\t\tleft: 0,\n\t\ttop: 0,\n\t};\n\tprivate style!: ICenteredViewStyles;\n\tprivate didLayout = false;\n\tprivate emptyViews:\n\t\t| ISplitViewView<{ top: number; left: number }>[]\n\t\t| undefined;\n\tprivate readonly splitViewDisposables = new DisposableStore();\n\n\tconstructor(\n\t\tprivate container: HTMLElement,\n\t\tprivate view: IView,\n\t\tpublic state: CenteredViewState = { ...defaultState },\n\t\tprivate centeredLayoutFixedWidth = false,\n\t) {\n\t\tthis.container.appendChild(this.view.element);\n\t\t// Make sure to hide the split view overflow like sashes #52892\n\t\tthis.container.style.overflow = \"hidden\";\n\t}\n\n\tget minimumWidth(): number {\n\t\treturn this.splitView\n\t\t\t? this.splitView.minimumSize\n\t\t\t: this.view.minimumWidth;\n\t}\n\tget maximumWidth(): number {\n\t\treturn this.splitView\n\t\t\t? this.splitView.maximumSize\n\t\t\t: this.view.maximumWidth;\n\t}\n\tget minimumHeight(): number {\n\t\treturn this.view.minimumHeight;\n\t}\n\tget maximumHeight(): number {\n\t\treturn this.view.maximumHeight;\n\t}\n\tget onDidChange(): Event<IViewSize | undefined> {\n\t\treturn this.view.onDidChange;\n\t}\n\n\tprivate _boundarySashes: IBoundarySashes = {};\n\tget boundarySashes(): IBoundarySashes {\n\t\treturn this._boundarySashes;\n\t}\n\tset boundarySashes(boundarySashes: IBoundarySashes) {\n\t\tthis._boundarySashes = boundarySashes;\n\n\t\tif (!this.splitView) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.splitView.orthogonalStartSash = boundarySashes.top;\n\t\tthis.splitView.orthogonalEndSash = boundarySashes.bottom;\n\t}\n\n\tlayout(width: number, height: number, top: number, left: number): void {\n\t\tthis.lastLayoutPosition = { width, height, top, left };\n\t\tif (this.splitView) {\n\t\t\tthis.splitView.layout(width, this.lastLayoutPosition);\n\t\t\tif (!this.didLayout || this.centeredLayoutFixedWidth) {\n\t\t\t\tthis.resizeSplitViews();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.view.layout(width, height, top, left);\n\t\t}\n\n\t\tthis.didLayout = true;\n\t}\n\n\tprivate resizeSplitViews(): void {\n\t\tif (!this.splitView) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.centeredLayoutFixedWidth) {\n\t\t\tconst centerViewWidth = Math.min(\n\t\t\t\tthis.lastLayoutPosition.width,\n\t\t\t\tthis.state.targetWidth,\n\t\t\t);\n\t\t\tconst marginWidthFloat =\n\t\t\t\t(this.lastLayoutPosition.width - centerViewWidth) / 2;\n\t\t\tthis.splitView.resizeView(0, Math.floor(marginWidthFloat));\n\t\t\tthis.splitView.resizeView(1, centerViewWidth);\n\t\t\tthis.splitView.resizeView(2, Math.ceil(marginWidthFloat));\n\t\t} else {\n\t\t\tconst leftMargin =\n\t\t\t\tthis.state.leftMarginRatio * this.lastLayoutPosition.width;\n\t\t\tconst rightMargin =\n\t\t\t\tthis.state.rightMarginRatio * this.lastLayoutPosition.width;\n\t\t\tconst center =\n\t\t\t\tthis.lastLayoutPosition.width - leftMargin - rightMargin;\n\t\t\tthis.splitView.resizeView(0, leftMargin);\n\t\t\tthis.splitView.resizeView(1, center);\n\t\t\tthis.splitView.resizeView(2, rightMargin);\n\t\t}\n\t}\n\n\tsetFixedWidth(option: boolean) {\n\t\tthis.centeredLayoutFixedWidth = option;\n\t\tif (!!this.splitView) {\n\t\t\tthis.updateState();\n\t\t\tthis.resizeSplitViews();\n\t\t}\n\t}\n\n\tprivate updateState() {\n\t\tif (!!this.splitView) {\n\t\t\tthis.state.targetWidth = this.splitView.getViewSize(1);\n\t\t\tthis.state.leftMarginRatio =\n\t\t\t\tthis.splitView.getViewSize(0) / this.lastLayoutPosition.width;\n\t\t\tthis.state.rightMarginRatio =\n\t\t\t\tthis.splitView.getViewSize(2) / this.lastLayoutPosition.width;\n\t\t}\n\t}\n\n\tisActive(): boolean {\n\t\treturn !!this.splitView;\n\t}\n\n\tstyles(style: ICenteredViewStyles): void {\n\t\tthis.style = style;\n\t\tif (this.splitView && this.emptyViews) {\n\t\t\tthis.splitView.style(this.style);\n\t\t\tthis.emptyViews[0].element.style.backgroundColor =\n\t\t\t\tthis.style.background.toString();\n\t\t\tthis.emptyViews[1].element.style.backgroundColor =\n\t\t\t\tthis.style.background.toString();\n\t\t}\n\t}\n\n\tactivate(active: boolean): void {\n\t\tif (active === this.isActive()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (active) {\n\t\t\tthis.view.element.remove();\n\t\t\tthis.splitView = new SplitView(this.container, {\n\t\t\t\tinverseAltBehavior: true,\n\t\t\t\torientation: Orientation.HORIZONTAL,\n\t\t\t\tstyles: this.style,\n\t\t\t});\n\t\t\tthis.splitView.orthogonalStartSash = this.boundarySashes.top;\n\t\t\tthis.splitView.orthogonalEndSash = this.boundarySashes.bottom;\n\n\t\t\tthis.splitViewDisposables.add(\n\t\t\t\tthis.splitView.onDidSashChange(() => {\n\t\t\t\t\tif (!!this.splitView) {\n\t\t\t\t\t\tthis.updateState();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.splitViewDisposables.add(\n\t\t\t\tthis.splitView.onDidSashReset(() => {\n\t\t\t\t\tthis.state = { ...defaultState };\n\t\t\t\t\tthis.resizeSplitViews();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tthis.splitView.layout(\n\t\t\t\tthis.lastLayoutPosition.width,\n\t\t\t\tthis.lastLayoutPosition,\n\t\t\t);\n\t\t\tconst backgroundColor = this.style\n\t\t\t\t? this.style.background\n\t\t\t\t: undefined;\n\t\t\tthis.emptyViews = [\n\t\t\t\tcreateEmptyView(backgroundColor),\n\t\t\t\tcreateEmptyView(backgroundColor),\n\t\t\t];\n\n\t\t\tthis.splitView.addView(this.emptyViews[0], distributeSizing, 0);\n\t\t\tthis.splitView.addView(\n\t\t\t\ttoSplitViewView(\n\t\t\t\t\tthis.view,\n\t\t\t\t\t() => this.lastLayoutPosition.height,\n\t\t\t\t),\n\t\t\t\tdistributeSizing,\n\t\t\t\t1,\n\t\t\t);\n\t\t\tthis.splitView.addView(this.emptyViews[1], distributeSizing, 2);\n\n\t\t\tthis.resizeSplitViews();\n\t\t} else {\n\t\t\tthis.splitView?.el.remove();\n\t\t\tthis.splitViewDisposables.clear();\n\t\t\tthis.splitView?.dispose();\n\t\t\tthis.splitView = undefined;\n\t\t\tthis.emptyViews = undefined;\n\t\t\tthis.container.appendChild(this.view.element);\n\t\t\tthis.view.layout(\n\t\t\t\tthis.lastLayoutPosition.width,\n\t\t\t\tthis.lastLayoutPosition.height,\n\t\t\t\tthis.lastLayoutPosition.top,\n\t\t\t\tthis.lastLayoutPosition.left,\n\t\t\t);\n\t\t}\n\t}\n\n\tisDefault(state: CenteredViewState): boolean {\n\t\tif (this.centeredLayoutFixedWidth) {\n\t\t\treturn state.targetWidth === defaultState.targetWidth;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\tstate.leftMarginRatio === defaultState.leftMarginRatio &&\n\t\t\t\tstate.rightMarginRatio === defaultState.rightMarginRatio\n\t\t\t);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.splitViewDisposables.dispose();\n\n\t\tif (this.splitView) {\n\t\t\tthis.splitView.dispose();\n\t\t\tthis.splitView = undefined;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
