import"../../../common/lifecycle.js";import{$ as a}from"../../dom.js";import"./list.js";class p{constructor(e){this.renderers=e}cache=new Map;transactionNodesPendingRemoval=new Set;inTransaction=!1;alloc(e){let t=this.getTemplateCache(e).pop(),r=!1;if(t)r=this.transactionNodesPendingRemoval.has(t.domNode),r&&this.transactionNodesPendingRemoval.delete(t.domNode);else{const o=a(".monaco-list-row"),n=this.getRenderer(e).renderTemplate(o);t={domNode:o,templateId:e,templateData:n}}return{row:t,isReusingConnectedDomNode:r}}release(e){e&&this.releaseRow(e)}transact(e){if(this.inTransaction)throw new Error("Already in transaction");this.inTransaction=!0;try{e()}finally{for(const t of this.transactionNodesPendingRemoval)this.doRemoveNode(t);this.transactionNodesPendingRemoval.clear(),this.inTransaction=!1}}releaseRow(e){const{domNode:t,templateId:r}=e;t&&(this.inTransaction?this.transactionNodesPendingRemoval.add(t):this.doRemoveNode(t)),this.getTemplateCache(r).push(e)}doRemoveNode(e){e.classList.remove("scrolling"),e.remove()}getTemplateCache(e){let t=this.cache.get(e);return t||(t=[],this.cache.set(e,t)),t}dispose(){this.cache.forEach((e,t)=>{for(const r of e)this.getRenderer(t).disposeTemplate(r.templateData),r.templateData=null}),this.cache.clear(),this.transactionNodesPendingRemoval.clear()}getRenderer(e){const t=this.renderers.get(e);if(!t)throw new Error(`No renderer found for ${e}`);return t}}export{p as RowCache};
