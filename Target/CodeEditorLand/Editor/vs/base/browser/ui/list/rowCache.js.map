{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/list/rowCache.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../common/lifecycle.js\";\nimport { $ } from \"../../dom.js\";\nimport type { IListRenderer } from \"./list.js\";\n\nexport interface IRow {\n\tdomNode: HTMLElement;\n\ttemplateId: string;\n\ttemplateData: any;\n}\n\nexport class RowCache<T> implements IDisposable {\n\tprivate cache = new Map<string, IRow[]>();\n\n\tprivate readonly transactionNodesPendingRemoval = new Set<HTMLElement>();\n\tprivate inTransaction = false;\n\n\tconstructor(private renderers: Map<string, IListRenderer<T, any>>) {}\n\n\t/**\n\t * Returns a row either by creating a new one or reusing\n\t * a previously released row which shares the same templateId.\n\t *\n\t * @returns A row and `isReusingConnectedDomNode` if the row's node is already in the dom in a stale position.\n\t */\n\talloc(templateId: string): {\n\t\trow: IRow;\n\t\tisReusingConnectedDomNode: boolean;\n\t} {\n\t\tlet result = this.getTemplateCache(templateId).pop();\n\n\t\tlet isStale = false;\n\t\tif (result) {\n\t\t\tisStale = this.transactionNodesPendingRemoval.has(result.domNode);\n\t\t\tif (isStale) {\n\t\t\t\tthis.transactionNodesPendingRemoval.delete(result.domNode);\n\t\t\t}\n\t\t} else {\n\t\t\tconst domNode = $(\".monaco-list-row\");\n\t\t\tconst renderer = this.getRenderer(templateId);\n\t\t\tconst templateData = renderer.renderTemplate(domNode);\n\t\t\tresult = { domNode, templateId, templateData };\n\t\t}\n\n\t\treturn { row: result, isReusingConnectedDomNode: isStale };\n\t}\n\n\t/**\n\t * Releases the row for eventual reuse.\n\t */\n\trelease(row: IRow): void {\n\t\tif (!row) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.releaseRow(row);\n\t}\n\n\t/**\n\t * Begin a set of changes that use the cache. This lets us skip work when a row is removed and then inserted again.\n\t */\n\ttransact(makeChanges: () => void) {\n\t\tif (this.inTransaction) {\n\t\t\tthrow new Error(\"Already in transaction\");\n\t\t}\n\n\t\tthis.inTransaction = true;\n\n\t\ttry {\n\t\t\tmakeChanges();\n\t\t} finally {\n\t\t\tfor (const domNode of this.transactionNodesPendingRemoval) {\n\t\t\t\tthis.doRemoveNode(domNode);\n\t\t\t}\n\n\t\t\tthis.transactionNodesPendingRemoval.clear();\n\t\t\tthis.inTransaction = false;\n\t\t}\n\t}\n\n\tprivate releaseRow(row: IRow): void {\n\t\tconst { domNode, templateId } = row;\n\t\tif (domNode) {\n\t\t\tif (this.inTransaction) {\n\t\t\t\tthis.transactionNodesPendingRemoval.add(domNode);\n\t\t\t} else {\n\t\t\t\tthis.doRemoveNode(domNode);\n\t\t\t}\n\t\t}\n\n\t\tconst cache = this.getTemplateCache(templateId);\n\t\tcache.push(row);\n\t}\n\n\tprivate doRemoveNode(domNode: HTMLElement) {\n\t\tdomNode.classList.remove(\"scrolling\");\n\t\tdomNode.remove();\n\t}\n\n\tprivate getTemplateCache(templateId: string): IRow[] {\n\t\tlet result = this.cache.get(templateId);\n\n\t\tif (!result) {\n\t\t\tresult = [];\n\t\t\tthis.cache.set(templateId, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tdispose(): void {\n\t\tthis.cache.forEach((cachedRows, templateId) => {\n\t\t\tfor (const cachedRow of cachedRows) {\n\t\t\t\tconst renderer = this.getRenderer(templateId);\n\t\t\t\trenderer.disposeTemplate(cachedRow.templateData);\n\t\t\t\tcachedRow.templateData = null;\n\t\t\t}\n\t\t});\n\n\t\tthis.cache.clear();\n\t\tthis.transactionNodesPendingRemoval.clear();\n\t}\n\n\tprivate getRenderer(templateId: string): IListRenderer<T, any> {\n\t\tconst renderer = this.renderers.get(templateId);\n\t\tif (!renderer) {\n\t\t\tthrow new Error(`No renderer found for ${templateId}`);\n\t\t}\n\t\treturn renderer;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,SAAS;AASX,MAAM,SAAmC;AAAA,EAM/C,YAAoB,WAA+C;AAA/C;AAAA,EAAgD;AAAA,EArBrE,OAegD;AAAA;AAAA;AAAA,EACvC,QAAQ,oBAAI,IAAoB;AAAA,EAEvB,iCAAiC,oBAAI,IAAiB;AAAA,EAC/D,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUxB,MAAM,YAGJ;AACD,QAAI,SAAS,KAAK,iBAAiB,UAAU,EAAE,IAAI;AAEnD,QAAI,UAAU;AACd,QAAI,QAAQ;AACX,gBAAU,KAAK,+BAA+B,IAAI,OAAO,OAAO;AAChE,UAAI,SAAS;AACZ,aAAK,+BAA+B,OAAO,OAAO,OAAO;AAAA,MAC1D;AAAA,IACD,OAAO;AACN,YAAM,UAAU,EAAE,kBAAkB;AACpC,YAAM,WAAW,KAAK,YAAY,UAAU;AAC5C,YAAM,eAAe,SAAS,eAAe,OAAO;AACpD,eAAS,EAAE,SAAS,YAAY,aAAa;AAAA,IAC9C;AAEA,WAAO,EAAE,KAAK,QAAQ,2BAA2B,QAAQ;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,KAAiB;AACxB,QAAI,CAAC,KAAK;AACT;AAAA,IACD;AAEA,SAAK,WAAW,GAAG;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,aAAyB;AACjC,QAAI,KAAK,eAAe;AACvB,YAAM,IAAI,MAAM,wBAAwB;AAAA,IACzC;AAEA,SAAK,gBAAgB;AAErB,QAAI;AACH,kBAAY;AAAA,IACb,UAAE;AACD,iBAAW,WAAW,KAAK,gCAAgC;AAC1D,aAAK,aAAa,OAAO;AAAA,MAC1B;AAEA,WAAK,+BAA+B,MAAM;AAC1C,WAAK,gBAAgB;AAAA,IACtB;AAAA,EACD;AAAA,EAEQ,WAAW,KAAiB;AACnC,UAAM,EAAE,SAAS,WAAW,IAAI;AAChC,QAAI,SAAS;AACZ,UAAI,KAAK,eAAe;AACvB,aAAK,+BAA+B,IAAI,OAAO;AAAA,MAChD,OAAO;AACN,aAAK,aAAa,OAAO;AAAA,MAC1B;AAAA,IACD;AAEA,UAAM,QAAQ,KAAK,iBAAiB,UAAU;AAC9C,UAAM,KAAK,GAAG;AAAA,EACf;AAAA,EAEQ,aAAa,SAAsB;AAC1C,YAAQ,UAAU,OAAO,WAAW;AACpC,YAAQ,OAAO;AAAA,EAChB;AAAA,EAEQ,iBAAiB,YAA4B;AACpD,QAAI,SAAS,KAAK,MAAM,IAAI,UAAU;AAEtC,QAAI,CAAC,QAAQ;AACZ,eAAS,CAAC;AACV,WAAK,MAAM,IAAI,YAAY,MAAM;AAAA,IAClC;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,UAAgB;AACf,SAAK,MAAM,QAAQ,CAAC,YAAY,eAAe;AAC9C,iBAAW,aAAa,YAAY;AACnC,cAAM,WAAW,KAAK,YAAY,UAAU;AAC5C,iBAAS,gBAAgB,UAAU,YAAY;AAC/C,kBAAU,eAAe;AAAA,MAC1B;AAAA,IACD,CAAC;AAED,SAAK,MAAM,MAAM;AACjB,SAAK,+BAA+B,MAAM;AAAA,EAC3C;AAAA,EAEQ,YAAY,YAA2C;AAC9D,UAAM,WAAW,KAAK,UAAU,IAAI,UAAU;AAC9C,QAAI,CAAC,UAAU;AACd,YAAM,IAAI,MAAM,yBAAyB,UAAU,EAAE;AAAA,IACtD;AACA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
