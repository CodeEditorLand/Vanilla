{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/list/list.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../common/lifecycle.js\";\nimport type { IDragAndDropData } from \"../../dnd.js\";\nimport type { IKeyboardEvent } from \"../../keyboardEvent.js\";\nimport type { IMouseEvent } from \"../../mouseEvent.js\";\nimport type { GestureEvent } from \"../../touch.js\";\nimport type { ListViewTargetSector } from \"./listView.js\";\n\nexport interface IListVirtualDelegate<T> {\n\tgetHeight(element: T): number;\n\tgetTemplateId(element: T): string;\n\thasDynamicHeight?(element: T): boolean;\n\tgetDynamicHeight?(element: T): number | null;\n\tsetDynamicHeight?(element: T, height: number): void;\n}\n\nexport interface IListRenderer<T, TTemplateData> {\n\treadonly templateId: string;\n\trenderTemplate(container: HTMLElement): TTemplateData;\n\trenderElement(\n\t\telement: T,\n\t\tindex: number,\n\t\ttemplateData: TTemplateData,\n\t\theight: number | undefined,\n\t): void;\n\tdisposeElement?(\n\t\telement: T,\n\t\tindex: number,\n\t\ttemplateData: TTemplateData,\n\t\theight: number | undefined,\n\t): void;\n\tdisposeTemplate(templateData: TTemplateData): void;\n}\n\nexport interface IListEvent<T> {\n\treadonly elements: readonly T[];\n\treadonly indexes: readonly number[];\n\treadonly browserEvent?: UIEvent;\n}\n\nexport interface IListBrowserMouseEvent extends MouseEvent {\n\tisHandledByList?: boolean;\n}\n\nexport interface IListMouseEvent<T> {\n\treadonly browserEvent: IListBrowserMouseEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListTouchEvent<T> {\n\treadonly browserEvent: TouchEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListGestureEvent<T> {\n\treadonly browserEvent: GestureEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListDragEvent<T> {\n\treadonly browserEvent: DragEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n\treadonly sector: ListViewTargetSector | undefined;\n}\n\nexport interface IListContextMenuEvent<T> {\n\treadonly browserEvent: UIEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n\treadonly anchor: HTMLElement | IMouseEvent;\n}\n\nexport interface IIdentityProvider<T> {\n\tgetId(element: T): { toString(): string };\n}\n\nexport interface IKeyboardNavigationLabelProvider<T> {\n\t/**\n\t * Return a keyboard navigation label(s) which will be used by\n\t * the list for filtering/navigating. Return `undefined` to make\n\t * an element always match.\n\t */\n\tgetKeyboardNavigationLabel(\n\t\telement: T,\n\t):\n\t\t| { toString(): string | undefined }\n\t\t| { toString(): string | undefined }[]\n\t\t| undefined;\n}\n\nexport interface IKeyboardNavigationDelegate {\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean;\n}\n\nexport enum ListDragOverEffectType {\n\tCopy = 0,\n\tMove = 1,\n}\n\nexport enum ListDragOverEffectPosition {\n\tOver = \"drop-target\",\n\tBefore = \"drop-target-before\",\n\tAfter = \"drop-target-after\",\n}\n\nexport interface ListDragOverEffect {\n\ttype: ListDragOverEffectType;\n\tposition?: ListDragOverEffectPosition;\n}\n\nexport interface IListDragOverReaction {\n\taccept: boolean;\n\teffect?: ListDragOverEffect;\n\tfeedback?: number[]; // use -1 for entire list\n}\n\nexport const ListDragOverReactions = {\n\treject(): IListDragOverReaction {\n\t\treturn { accept: false };\n\t},\n\taccept(): IListDragOverReaction {\n\t\treturn { accept: true };\n\t},\n};\n\n/**\n * Warning: Once passed to a list, that list takes up\n * the responsibility of disposing it.\n */\nexport interface IListDragAndDrop<T> extends IDisposable {\n\tgetDragURI(element: T): string | null;\n\tgetDragLabel?(elements: T[], originalEvent: DragEvent): string | undefined;\n\tonDragStart?(data: IDragAndDropData, originalEvent: DragEvent): void;\n\tonDragOver(\n\t\tdata: IDragAndDropData,\n\t\ttargetElement: T | undefined,\n\t\ttargetIndex: number | undefined,\n\t\ttargetSector: ListViewTargetSector | undefined,\n\t\toriginalEvent: DragEvent,\n\t): boolean | IListDragOverReaction;\n\tonDragLeave?(\n\t\tdata: IDragAndDropData,\n\t\ttargetElement: T | undefined,\n\t\ttargetIndex: number | undefined,\n\t\toriginalEvent: DragEvent,\n\t): void;\n\tdrop(\n\t\tdata: IDragAndDropData,\n\t\ttargetElement: T | undefined,\n\t\ttargetIndex: number | undefined,\n\t\ttargetSector: ListViewTargetSector | undefined,\n\t\toriginalEvent: DragEvent,\n\t): void;\n\tonDragEnd?(originalEvent: DragEvent): void;\n}\n\nexport class ListError extends Error {\n\tconstructor(user: string, message: string) {\n\t\tsuper(`ListError [${user}] ${message}`);\n\t}\n}\n\nexport abstract class CachedListVirtualDelegate<T extends object>\n\timplements IListVirtualDelegate<T>\n{\n\tprivate cache = new WeakMap<T, number>();\n\n\tgetHeight(element: T): number {\n\t\treturn this.cache.get(element) ?? this.estimateHeight(element);\n\t}\n\n\tprotected abstract estimateHeight(element: T): number;\n\tabstract getTemplateId(element: T): string;\n\n\tsetDynamicHeight(element: T, height: number): void {\n\t\tif (height > 0) {\n\t\t\tthis.cache.set(element, height);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAsGO,IAAK,yBAAL,kBAAKA,4BAAL;AACN,EAAAA,gDAAA,UAAO,KAAP;AACA,EAAAA,gDAAA,UAAO,KAAP;AAFW,SAAAA;AAAA,GAAA;AAKL,IAAK,6BAAL,kBAAKC,gCAAL;AACN,EAAAA,4BAAA,UAAO;AACP,EAAAA,4BAAA,YAAS;AACT,EAAAA,4BAAA,WAAQ;AAHG,SAAAA;AAAA,GAAA;AAiBL,MAAM,wBAAwB;AAAA,EACpC,SAAgC;AAC/B,WAAO,EAAE,QAAQ,MAAM;AAAA,EACxB;AAAA,EACA,SAAgC;AAC/B,WAAO,EAAE,QAAQ,KAAK;AAAA,EACvB;AACD;AAiCO,MAAM,kBAAkB,MAAM;AAAA,EApKrC,OAoKqC;AAAA;AAAA;AAAA,EACpC,YAAY,MAAc,SAAiB;AAC1C,UAAM,cAAc,IAAI,KAAK,OAAO,EAAE;AAAA,EACvC;AACD;AAEO,MAAe,0BAEtB;AAAA,EA5KA,OA4KA;AAAA;AAAA;AAAA,EACS,QAAQ,oBAAI,QAAmB;AAAA,EAEvC,UAAU,SAAoB;AAC7B,WAAO,KAAK,MAAM,IAAI,OAAO,KAAK,KAAK,eAAe,OAAO;AAAA,EAC9D;AAAA,EAKA,iBAAiB,SAAY,QAAsB;AAClD,QAAI,SAAS,GAAG;AACf,WAAK,MAAM,IAAI,SAAS,MAAM;AAAA,IAC/B;AAAA,EACD;AACD;",
  "names": ["ListDragOverEffectType", "ListDragOverEffectPosition"]
}
