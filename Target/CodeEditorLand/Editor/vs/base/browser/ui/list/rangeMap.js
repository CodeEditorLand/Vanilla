var d;(i=>{function o(n,s){if(n.start>=s.end||s.start>=n.end)return{start:0,end:0};let p=Math.max(n.start,s.start),a=Math.min(n.end,s.end);return a-p<=0?{start:0,end:0}:{start:p,end:a}}i.intersect=o;function e(n){return n.end-n.start<=0}i.isEmpty=e;function t(n,s){return!e(o(n,s))}i.intersects=t;function r(n,s){let p=[],a={start:n.start,end:Math.min(s.start,n.end)},u={start:Math.max(s.end,n.start),end:n.end};return e(a)||p.push(a),e(u)||p.push(u),p}i.relativeComplement=r})(d||={});function g(o,e){let t=[];for(let r of e){if(o.start>=r.range.end)continue;if(o.end<r.range.start)break;let i=d.intersect(o,r.range);d.isEmpty(i)||t.push({range:i,size:r.size})}return t}function m({start:o,end:e},t){return{start:o+t,end:e+t}}function f(o){let e=[],t=null;for(let r of o){let i=r.range.start,n=r.range.end,s=r.size;if(t&&s===t.size){t.range.end=n;continue}t={range:{start:i,end:n},size:s},e.push(t)}return e}function I(...o){return f(o.reduce((e,t)=>e.concat(t),[]))}var c=class{groups=[];_size=0;_paddingTop=0;get paddingTop(){return this._paddingTop}set paddingTop(e){this._size=this._size+e-this._paddingTop,this._paddingTop=e}constructor(e){this._paddingTop=e??0,this._size=this._paddingTop}splice(e,t,r=[]){let i=r.length-t,n=g({start:0,end:e},this.groups),s=g({start:e+t,end:Number.POSITIVE_INFINITY},this.groups).map(a=>({range:m(a.range,i),size:a.size})),p=r.map((a,u)=>({range:{start:e+u,end:e+u+1},size:a.size}));this.groups=I(n,p,s),this._size=this._paddingTop+this.groups.reduce((a,u)=>a+u.size*(u.range.end-u.range.start),0)}get count(){let e=this.groups.length;return e?this.groups[e-1].range.end:0}get size(){return this._size}indexAt(e){if(e<0)return-1;if(e<this._paddingTop)return 0;let t=0,r=this._paddingTop;for(let i of this.groups){let n=i.range.end-i.range.start,s=r+n*i.size;if(e<s)return t+Math.floor((e-r)/i.size);t+=n,r=s}return t}indexAfter(e){return Math.min(this.indexAt(e)+1,this.count)}positionAt(e){if(e<0)return-1;let t=0,r=0;for(let i of this.groups){let n=i.range.end-i.range.start,s=r+n;if(e<s)return this._paddingTop+t+(e-r)*i.size;t+=n*i.size,r=s}return-1}};export{c as RangeMap,f as consolidate,g as groupIntersect,m as shift};
