{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/ui/list/rangeMap.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type IRange, Range } from \"../../../common/range.js\";\n\nexport interface IItem {\n\tsize: number;\n}\n\nexport interface IRangedGroup {\n\trange: IRange;\n\tsize: number;\n}\n\n/**\n * Returns the intersection between a ranged group and a range.\n * Returns `[]` if the intersection is empty.\n */\nexport function groupIntersect(\n\trange: IRange,\n\tgroups: IRangedGroup[],\n): IRangedGroup[] {\n\tconst result: IRangedGroup[] = [];\n\n\tfor (const r of groups) {\n\t\tif (range.start >= r.range.end) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (range.end < r.range.start) {\n\t\t\tbreak;\n\t\t}\n\n\t\tconst intersection = Range.intersect(range, r.range);\n\n\t\tif (Range.isEmpty(intersection)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push({\n\t\t\trange: intersection,\n\t\t\tsize: r.size,\n\t\t});\n\t}\n\n\treturn result;\n}\n\n/**\n * Shifts a range by that `much`.\n */\nexport function shift({ start, end }: IRange, much: number): IRange {\n\treturn { start: start + much, end: end + much };\n}\n\n/**\n * Consolidates a collection of ranged groups.\n *\n * Consolidation is the process of merging consecutive ranged groups\n * that share the same `size`.\n */\nexport function consolidate(groups: IRangedGroup[]): IRangedGroup[] {\n\tconst result: IRangedGroup[] = [];\n\tlet previousGroup: IRangedGroup | null = null;\n\n\tfor (const group of groups) {\n\t\tconst start = group.range.start;\n\t\tconst end = group.range.end;\n\t\tconst size = group.size;\n\n\t\tif (previousGroup && size === previousGroup.size) {\n\t\t\tpreviousGroup.range.end = end;\n\t\t\tcontinue;\n\t\t}\n\n\t\tpreviousGroup = { range: { start, end }, size };\n\t\tresult.push(previousGroup);\n\t}\n\n\treturn result;\n}\n\n/**\n * Concatenates several collections of ranged groups into a single\n * collection.\n */\nfunction concat(...groups: IRangedGroup[][]): IRangedGroup[] {\n\treturn consolidate(groups.reduce((r, g) => r.concat(g), []));\n}\n\nexport interface IRangeMap {\n\treadonly size: number;\n\treadonly count: number;\n\tpaddingTop: number;\n\tsplice(index: number, deleteCount: number, items?: IItem[]): void;\n\tindexAt(position: number): number;\n\tindexAfter(position: number): number;\n\tpositionAt(index: number): number;\n}\n\nexport class RangeMap implements IRangeMap {\n\tprivate groups: IRangedGroup[] = [];\n\tprivate _size = 0;\n\tprivate _paddingTop = 0;\n\n\tget paddingTop() {\n\t\treturn this._paddingTop;\n\t}\n\n\tset paddingTop(paddingTop: number) {\n\t\tthis._size = this._size + paddingTop - this._paddingTop;\n\t\tthis._paddingTop = paddingTop;\n\t}\n\n\tconstructor(topPadding?: number) {\n\t\tthis._paddingTop = topPadding ?? 0;\n\t\tthis._size = this._paddingTop;\n\t}\n\n\tsplice(index: number, deleteCount: number, items: IItem[] = []): void {\n\t\tconst diff = items.length - deleteCount;\n\t\tconst before = groupIntersect({ start: 0, end: index }, this.groups);\n\t\tconst after = groupIntersect(\n\t\t\t{ start: index + deleteCount, end: Number.POSITIVE_INFINITY },\n\t\t\tthis.groups,\n\t\t).map<IRangedGroup>((g) => ({\n\t\t\trange: shift(g.range, diff),\n\t\t\tsize: g.size,\n\t\t}));\n\n\t\tconst middle = items.map<IRangedGroup>((item, i) => ({\n\t\t\trange: { start: index + i, end: index + i + 1 },\n\t\t\tsize: item.size,\n\t\t}));\n\n\t\tthis.groups = concat(before, middle, after);\n\t\tthis._size =\n\t\t\tthis._paddingTop +\n\t\t\tthis.groups.reduce(\n\t\t\t\t(t, g) => t + g.size * (g.range.end - g.range.start),\n\t\t\t\t0,\n\t\t\t);\n\t}\n\n\t/**\n\t * Returns the number of items in the range map.\n\t */\n\tget count(): number {\n\t\tconst len = this.groups.length;\n\n\t\tif (!len) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.groups[len - 1].range.end;\n\t}\n\n\t/**\n\t * Returns the sum of the sizes of all items in the range map.\n\t */\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\t/**\n\t * Returns the index of the item at the given position.\n\t */\n\tindexAt(position: number): number {\n\t\tif (position < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (position < this._paddingTop) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet index = 0;\n\t\tlet size = this._paddingTop;\n\n\t\tfor (const group of this.groups) {\n\t\t\tconst count = group.range.end - group.range.start;\n\t\t\tconst newSize = size + count * group.size;\n\n\t\t\tif (position < newSize) {\n\t\t\t\treturn index + Math.floor((position - size) / group.size);\n\t\t\t}\n\n\t\t\tindex += count;\n\t\t\tsize = newSize;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Returns the index of the item right after the item at the\n\t * index of the given position.\n\t */\n\tindexAfter(position: number): number {\n\t\treturn Math.min(this.indexAt(position) + 1, this.count);\n\t}\n\n\t/**\n\t * Returns the start position of the item at the given index.\n\t */\n\tpositionAt(index: number): number {\n\t\tif (index < 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tlet position = 0;\n\t\tlet count = 0;\n\n\t\tfor (const group of this.groups) {\n\t\t\tconst groupCount = group.range.end - group.range.start;\n\t\t\tconst newCount = count + groupCount;\n\n\t\t\tif (index < newCount) {\n\t\t\t\treturn (\n\t\t\t\t\tthis._paddingTop + position + (index - count) * group.size\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tposition += groupCount * group.size;\n\t\t\tcount = newCount;\n\t\t}\n\n\t\treturn -1;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
