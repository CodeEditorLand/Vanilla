{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/trustedTypes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from '../common/errors.js';\n\nexport function createTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\tpolicyName: string,\n\tpolicyOptions?: Options,\n): undefined | Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, keyof TrustedTypePolicyOptions>> {\n\n\tinterface IMonacoEnvironment {\n\t\tcreateTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\t\tpolicyName: string,\n\t\t\tpolicyOptions?: Options,\n\t\t): undefined | Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, keyof TrustedTypePolicyOptions>>;\n\t}\n\tconst monacoEnvironment: IMonacoEnvironment | undefined = (globalThis as any).MonacoEnvironment;\n\n\tif (monacoEnvironment?.createTrustedTypesPolicy) {\n\t\ttry {\n\t\t\treturn monacoEnvironment.createTrustedTypesPolicy(policyName, policyOptions);\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\ttry {\n\t\treturn (globalThis as any).trustedTypes?.createPolicy(policyName, policyOptions);\n\t} catch (err) {\n\t\tonUnexpectedError(err);\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAE3B,SAAS,yBACf,YACA,eACgH;AAQhH,QAAM,oBAAqD,WAAmB;AAE9E,MAAI,mBAAmB,0BAA0B;AAChD,QAAI;AACH,aAAO,kBAAkB,yBAAyB,YAAY,aAAa;AAAA,IAC5E,SAAS,KAAK;AACb,wBAAkB,GAAG;AACrB,aAAO;AAAA,IACR;AAAA,EACD;AACA,MAAI;AACH,WAAQ,WAAmB,cAAc,aAAa,YAAY,aAAa;AAAA,EAChF,SAAS,KAAK;AACb,sBAAkB,GAAG;AACrB,WAAO;AAAA,EACR;AACD;AA3BgB;",
  "names": []
}
