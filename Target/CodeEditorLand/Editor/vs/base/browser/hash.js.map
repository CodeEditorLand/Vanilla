{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/hash.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../common/buffer.js';\nimport { StringSHA1, toHexString } from '../common/hash.js';\n\nexport async function sha1Hex(str: string): Promise<string> {\n\n\t// Prefer to use browser's crypto module\n\tif (globalThis?.crypto?.subtle) {\n\n\t\t// Careful to use `dontUseNodeBuffer` when passing the\n\t\t// buffer to the browser `crypto` API. Users reported\n\t\t// native crashes in certain cases that we could trace\n\t\t// back to passing node.js `Buffer` around\n\t\t// (https://github.com/microsoft/vscode/issues/114227)\n\t\tconst buffer = VSBuffer.fromString(str, { dontUseNodeBuffer: true }).buffer;\n\t\tconst hash = await globalThis.crypto.subtle.digest({ name: 'sha-1' }, buffer);\n\n\t\treturn toHexString(hash);\n\t}\n\n\t// Otherwise fallback to `StringSHA1`\n\telse {\n\t\tconst computer = new StringSHA1();\n\t\tcomputer.update(str);\n\n\t\treturn computer.digest();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,YAAY,mBAAmB;AAExC,eAAsB,QAAQ,KAA8B;AAG3D,MAAI,YAAY,QAAQ,QAAQ;AAO/B,UAAM,SAAS,SAAS,WAAW,KAAK,EAAE,mBAAmB,KAAK,CAAC,EAAE;AACrE,UAAM,OAAO,MAAM,WAAW,OAAO,OAAO,OAAO,EAAE,MAAM,QAAQ,GAAG,MAAM;AAE5E,WAAO,YAAY,IAAI;AAAA,EACxB,OAGK;AACJ,UAAM,WAAW,IAAI,WAAW;AAChC,aAAS,OAAO,GAAG;AAEnB,WAAO,SAAS,OAAO;AAAA,EACxB;AACD;AAvBsB;",
  "names": []
}
