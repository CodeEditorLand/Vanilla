{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/defaultWorkerFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from './trustedTypes.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { AppResourcePath, COI, FileAccess } from '../common/network.js';\nimport { URI } from '../common/uri.js';\nimport { IWorker, IWorkerCallback, IWorkerClient, IWorkerDescriptor, IWorkerFactory, logOnceWebWorkerWarning, SimpleWorkerClient } from '../common/worker/simpleWorker.js';\nimport { Disposable, toDisposable } from '../common/lifecycle.js';\nimport { coalesce } from '../common/arrays.js';\nimport { getNLSLanguage, getNLSMessages } from '../../nls.js';\n\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n\n// Reuse the trusted types policy defined from worker bootstrap\n// when available.\n// Refs https://github.com/microsoft/vscode/issues/222193\nlet ttPolicy: ReturnType<typeof createTrustedTypesPolicy>;\nif (typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope' && (globalThis as any).workerttPolicy !== undefined) {\n\tttPolicy = (globalThis as any).workerttPolicy;\n} else {\n\tttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });\n}\n\nexport function createBlobWorker(blobUrl: string, options?: WorkerOptions): Worker {\n\tif (!blobUrl.startsWith('blob:')) {\n\t\tthrow new URIError('Not a blob-url: ' + blobUrl);\n\t}\n\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(blobUrl) as unknown as string : blobUrl, { ...options, type: isESM ? 'module' : undefined });\n}\n\nfunction getWorker(esmWorkerLocation: URI | undefined, label: string): Worker | Promise<Worker> {\n\t// Option for hosts to overwrite the worker script (used in the standalone editor)\n\tinterface IMonacoEnvironment {\n\t\tgetWorker?(moduleId: string, label: string): Worker | Promise<Worker>;\n\t\tgetWorkerUrl?(moduleId: string, label: string): string;\n\t}\n\tconst monacoEnvironment: IMonacoEnvironment | undefined = (globalThis as any).MonacoEnvironment;\n\tif (monacoEnvironment) {\n\t\tif (typeof monacoEnvironment.getWorker === 'function') {\n\t\t\treturn monacoEnvironment.getWorker('workerMain.js', label);\n\t\t}\n\t\tif (typeof monacoEnvironment.getWorkerUrl === 'function') {\n\t\t\tconst workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);\n\t\t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n\t\t}\n\t}\n\t// ESM-comment-begin\n\t// if (typeof require === 'function') {\n\t// const workerMainLocation = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n\t// const factoryModuleId = 'vs/base/worker/defaultWorkerFactory.js';\n\t// const workerBaseUrl = require.toUrl(factoryModuleId).slice(0, -factoryModuleId.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n\t// const workerUrl = getWorkerBootstrapUrl(label, workerMainLocation, workerBaseUrl);\n\t// return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n\t// }\n\t// ESM-comment-end\n\tif (esmWorkerLocation) {\n\t\tconst workerUrl = getWorkerBootstrapUrl(label, esmWorkerLocation.toString(true));\n\t\tconst worker = new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n\t\tif (isESM) {\n\t\t\treturn whenESMWorkerReady(worker);\n\t\t} else {\n\t\t\treturn worker;\n\t\t}\n\t}\n\tthrow new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\n\nfunction getWorkerBootstrapUrl(label: string, workerScriptUrl: string, workerBaseUrl?: string): string {\n\tif (/^((http:)|(https:)|(file:))/.test(workerScriptUrl) && workerScriptUrl.substring(0, globalThis.origin.length) !== globalThis.origin) {\n\t\t// this is the cross-origin case\n\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n\t} else {\n\t\tconst start = workerScriptUrl.lastIndexOf('?');\n\t\tconst end = workerScriptUrl.lastIndexOf('#', start);\n\t\tconst params = start > 0\n\t\t\t? new URLSearchParams(workerScriptUrl.substring(start + 1, ~end ? end : undefined))\n\t\t\t: new URLSearchParams();\n\n\t\tCOI.addSearchParam(params, true, true);\n\t\tconst search = params.toString();\n\t\tif (!search) {\n\t\t\tworkerScriptUrl = `${workerScriptUrl}#${label}`;\n\t\t} else {\n\t\t\tworkerScriptUrl = `${workerScriptUrl}?${params.toString()}#${label}`;\n\t\t}\n\t}\n\n\t// In below blob code, we are using JSON.stringify to ensure the passed\n\t// in values are not breaking our script. The values may contain string\n\t// terminating characters (such as ' or \").\n\tconst blob = new Blob([coalesce([\n\t\t`/*${label}*/`,\n\t\tworkerBaseUrl ? `globalThis.MonacoEnvironment = { baseUrl: ${JSON.stringify(workerBaseUrl)} };` : undefined,\n\t\t`globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(getNLSMessages())};`,\n\t\t`globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(getNLSLanguage())};`,\n\t\t`globalThis._VSCODE_FILE_ROOT = ${JSON.stringify(globalThis._VSCODE_FILE_ROOT)};`,\n\t\t`const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });`,\n\t\t`globalThis.workerttPolicy = ttPolicy;`,\n\t\tisESM ? `await import(ttPolicy?.createScriptURL(${JSON.stringify(workerScriptUrl)}) ?? ${JSON.stringify(workerScriptUrl)});` : `importScripts(ttPolicy?.createScriptURL(${JSON.stringify(workerScriptUrl)}) ?? ${JSON.stringify(workerScriptUrl)});`,\n\t\tisESM ? `globalThis.postMessage({ type: 'vscode-worker-ready' });` : undefined, // in ESM signal we are ready after the async import\n\t\t`/*${label}*/`\n\t]).join('')], { type: 'application/javascript' });\n\treturn URL.createObjectURL(blob);\n}\n\nfunction whenESMWorkerReady(worker: Worker): Promise<Worker> {\n\treturn new Promise<Worker>((resolve, reject) => {\n\t\tworker.onmessage = function (e) {\n\t\t\tif (e.data.type === 'vscode-worker-ready') {\n\t\t\t\tworker.onmessage = null;\n\t\t\t\tresolve(worker);\n\t\t\t}\n\t\t};\n\t\tworker.onerror = reject;\n\t});\n}\n\nfunction isPromiseLike<T>(obj: any): obj is PromiseLike<T> {\n\tif (typeof obj.then === 'function') {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker extends Disposable implements IWorker {\n\n\tprivate readonly id: number;\n\tprivate readonly label: string;\n\tprivate worker: Promise<Worker> | null;\n\n\tconstructor(esmWorkerLocation: URI | undefined, amdModuleId: string, id: number, label: string, onMessageCallback: IWorkerCallback, onErrorCallback: (err: any) => void) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.label = label;\n\t\tconst workerOrPromise = getWorker(esmWorkerLocation, label);\n\t\tif (isPromiseLike(workerOrPromise)) {\n\t\t\tthis.worker = workerOrPromise;\n\t\t} else {\n\t\t\tthis.worker = Promise.resolve(workerOrPromise);\n\t\t}\n\t\tthis.postMessage(amdModuleId, []);\n\t\tthis.worker.then((w) => {\n\t\t\tw.onmessage = function (ev) {\n\t\t\t\tonMessageCallback(ev.data);\n\t\t\t};\n\t\t\tw.onmessageerror = onErrorCallback;\n\t\t\tif (typeof w.addEventListener === 'function') {\n\t\t\t\tw.addEventListener('error', onErrorCallback);\n\t\t\t}\n\t\t});\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.worker?.then(w => {\n\t\t\t\tw.onmessage = null;\n\t\t\t\tw.onmessageerror = null;\n\t\t\t\tw.removeEventListener('error', onErrorCallback);\n\t\t\t\tw.terminate();\n\t\t\t});\n\t\t\tthis.worker = null;\n\t\t}));\n\t}\n\n\tpublic getId(): number {\n\t\treturn this.id;\n\t}\n\n\tpublic postMessage(message: any, transfer: Transferable[]): void {\n\t\tthis.worker?.then(w => {\n\t\t\ttry {\n\t\t\t\tw.postMessage(message, transfer);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\tonUnexpectedError(new Error(`FAILED to post message to '${this.label}'-worker`, { cause: err }));\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class WorkerDescriptor implements IWorkerDescriptor {\n\n\tpublic readonly esmModuleLocation: URI | undefined;\n\n\tconstructor(\n\t\tpublic readonly amdModuleId: string,\n\t\treadonly label: string | undefined,\n\t) {\n\t\tthis.esmModuleLocation = (isESM ? FileAccess.asBrowserUri(`${amdModuleId}.esm.js` as AppResourcePath) : undefined);\n\t}\n}\n\nclass DefaultWorkerFactory implements IWorkerFactory {\n\n\tprivate static LAST_WORKER_ID = 0;\n\tprivate _webWorkerFailedBeforeError: any;\n\n\tconstructor() {\n\t\tthis._webWorkerFailedBeforeError = false;\n\t}\n\n\tpublic create(desc: IWorkerDescriptor, onMessageCallback: IWorkerCallback, onErrorCallback: (err: any) => void): IWorker {\n\t\tconst workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\n\n\t\tif (this._webWorkerFailedBeforeError) {\n\t\t\tthrow this._webWorkerFailedBeforeError;\n\t\t}\n\n\t\treturn new WebWorker(desc.esmModuleLocation, desc.amdModuleId, workerId, desc.label || 'anonymous' + workerId, onMessageCallback, (err) => {\n\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\tthis._webWorkerFailedBeforeError = err;\n\t\t\tonErrorCallback(err);\n\t\t});\n\t}\n}\n\nexport function createWebWorker<T extends object>(amdModuleId: string, label: string | undefined): IWorkerClient<T>;\nexport function createWebWorker<T extends object>(workerDescriptor: IWorkerDescriptor): IWorkerClient<T>;\nexport function createWebWorker<T extends object>(arg0: string | IWorkerDescriptor, arg1?: string | undefined): IWorkerClient<T> {\n\tconst workerDescriptor = (typeof arg0 === 'string' ? new WorkerDescriptor(arg0, arg1) : arg0);\n\treturn new SimpleWorkerClient<T>(new DefaultWorkerFactory(), workerDescriptor);\n}\n"],
  "mappings": "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",
  "names": []
}
