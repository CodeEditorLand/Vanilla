{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/defaultWorkerFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getNLSLanguage, getNLSMessages } from \"../../nls.js\";\nimport { coalesce } from \"../common/arrays.js\";\nimport { onUnexpectedError } from \"../common/errors.js\";\nimport { Disposable, toDisposable } from \"../common/lifecycle.js\";\nimport { type AppResourcePath, COI, FileAccess } from \"../common/network.js\";\nimport type { URI } from \"../common/uri.js\";\nimport {\n\ttype IWorker,\n\ttype IWorkerCallback,\n\ttype IWorkerClient,\n\ttype IWorkerDescriptor,\n\ttype IWorkerFactory,\n\tSimpleWorkerClient,\n\tlogOnceWebWorkerWarning,\n} from \"../common/worker/simpleWorker.js\";\nimport { createTrustedTypesPolicy } from \"./trustedTypes.js\";\n\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n\n// Reuse the trusted types policy defined from worker bootstrap\n// when available.\n// Refs https://github.com/microsoft/vscode/issues/222193\nlet ttPolicy: ReturnType<typeof createTrustedTypesPolicy>;\nif (\n\ttypeof self === \"object\" &&\n\tself.constructor &&\n\tself.constructor.name === \"DedicatedWorkerGlobalScope\" &&\n\t(globalThis as any).workerttPolicy !== undefined\n) {\n\tttPolicy = (globalThis as any).workerttPolicy;\n} else {\n\tttPolicy = createTrustedTypesPolicy(\"defaultWorkerFactory\", {\n\t\tcreateScriptURL: (value) => value,\n\t});\n}\n\nexport function createBlobWorker(\n\tblobUrl: string,\n\toptions?: WorkerOptions,\n): Worker {\n\tif (!blobUrl.startsWith(\"blob:\")) {\n\t\tthrow new URIError(\"Not a blob-url: \" + blobUrl);\n\t}\n\treturn new Worker(\n\t\tttPolicy\n\t\t\t? (ttPolicy.createScriptURL(blobUrl) as unknown as string)\n\t\t\t: blobUrl,\n\t\t{ ...options, type: isESM ? \"module\" : undefined },\n\t);\n}\n\nfunction getWorker(\n\tesmWorkerLocation: URI | undefined,\n\tlabel: string,\n): Worker | Promise<Worker> {\n\t// Option for hosts to overwrite the worker script (used in the standalone editor)\n\tinterface IMonacoEnvironment {\n\t\tgetWorker?(moduleId: string, label: string): Worker | Promise<Worker>;\n\t\tgetWorkerUrl?(moduleId: string, label: string): string;\n\t}\n\tconst monacoEnvironment: IMonacoEnvironment | undefined = (\n\t\tglobalThis as any\n\t).MonacoEnvironment;\n\tif (monacoEnvironment) {\n\t\tif (typeof monacoEnvironment.getWorker === \"function\") {\n\t\t\treturn monacoEnvironment.getWorker(\"workerMain.js\", label);\n\t\t}\n\t\tif (typeof monacoEnvironment.getWorkerUrl === \"function\") {\n\t\t\tconst workerUrl = monacoEnvironment.getWorkerUrl(\n\t\t\t\t\"workerMain.js\",\n\t\t\t\tlabel,\n\t\t\t);\n\t\t\treturn new Worker(\n\t\t\t\tttPolicy\n\t\t\t\t\t? (ttPolicy.createScriptURL(workerUrl) as unknown as string)\n\t\t\t\t\t: workerUrl,\n\t\t\t\t{ name: label, type: isESM ? \"module\" : undefined },\n\t\t\t);\n\t\t}\n\t}\n\t// ESM-comment-begin\n\t// if (typeof require === 'function') {\n\t// const workerMainLocation = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n\t// const factoryModuleId = 'vs/base/worker/defaultWorkerFactory.js';\n\t// const workerBaseUrl = require.toUrl(factoryModuleId).slice(0, -factoryModuleId.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n\t// const workerUrl = getWorkerBootstrapUrl(label, workerMainLocation, workerBaseUrl);\n\t// return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n\t// }\n\t// ESM-comment-end\n\tif (esmWorkerLocation) {\n\t\tconst workerUrl = getWorkerBootstrapUrl(\n\t\t\tlabel,\n\t\t\tesmWorkerLocation.toString(true),\n\t\t);\n\t\tconst worker = new Worker(\n\t\t\tttPolicy\n\t\t\t\t? (ttPolicy.createScriptURL(workerUrl) as unknown as string)\n\t\t\t\t: workerUrl,\n\t\t\t{ name: label, type: isESM ? \"module\" : undefined },\n\t\t);\n\t\tif (isESM) {\n\t\t\treturn whenESMWorkerReady(worker);\n\t\t} else {\n\t\t\treturn worker;\n\t\t}\n\t}\n\tthrow new Error(\n\t\t`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`,\n\t);\n}\n\nfunction getWorkerBootstrapUrl(\n\tlabel: string,\n\tworkerScriptUrl: string,\n\tworkerBaseUrl?: string,\n): string {\n\tif (\n\t\t/^((http:)|(https:)|(file:))/.test(workerScriptUrl) &&\n\t\tworkerScriptUrl.substring(0, globalThis.origin.length) !==\n\t\t\tglobalThis.origin\n\t) {\n\t\t// this is the cross-origin case\n\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n\t} else {\n\t\tconst start = workerScriptUrl.lastIndexOf(\"?\");\n\t\tconst end = workerScriptUrl.lastIndexOf(\"#\", start);\n\t\tconst params =\n\t\t\tstart > 0\n\t\t\t\t? new URLSearchParams(\n\t\t\t\t\t\tworkerScriptUrl.substring(\n\t\t\t\t\t\t\tstart + 1,\n\t\t\t\t\t\t\t~end ? end : undefined,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t: new URLSearchParams();\n\n\t\tCOI.addSearchParam(params, true, true);\n\t\tconst search = params.toString();\n\t\tif (search) {\n\t\t\tworkerScriptUrl = `${workerScriptUrl}?${params.toString()}#${label}`;\n\t\t} else {\n\t\t\tworkerScriptUrl = `${workerScriptUrl}#${label}`;\n\t\t}\n\t}\n\n\t// In below blob code, we are using JSON.stringify to ensure the passed\n\t// in values are not breaking our script. The values may contain string\n\t// terminating characters (such as ' or \").\n\tconst blob = new Blob(\n\t\t[\n\t\t\tcoalesce([\n\t\t\t\t`/*${label}*/`,\n\t\t\t\tworkerBaseUrl\n\t\t\t\t\t? `globalThis.MonacoEnvironment = { baseUrl: ${JSON.stringify(workerBaseUrl)} };`\n\t\t\t\t\t: undefined,\n\t\t\t\t`globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(getNLSMessages())};`,\n\t\t\t\t`globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(getNLSLanguage())};`,\n\t\t\t\t`globalThis._VSCODE_FILE_ROOT = ${JSON.stringify(globalThis._VSCODE_FILE_ROOT)};`,\n\t\t\t\t`const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });`,\n\t\t\t\t`globalThis.workerttPolicy = ttPolicy;`,\n\t\t\t\tisESM\n\t\t\t\t\t? `await import(ttPolicy?.createScriptURL(${JSON.stringify(workerScriptUrl)}) ?? ${JSON.stringify(workerScriptUrl)});`\n\t\t\t\t\t: `importScripts(ttPolicy?.createScriptURL(${JSON.stringify(workerScriptUrl)}) ?? ${JSON.stringify(workerScriptUrl)});`,\n\t\t\t\tisESM\n\t\t\t\t\t? `globalThis.postMessage({ type: 'vscode-worker-ready' });`\n\t\t\t\t\t: undefined, // in ESM signal we are ready after the async import\n\t\t\t\t`/*${label}*/`,\n\t\t\t]).join(\"\"),\n\t\t],\n\t\t{ type: \"application/javascript\" },\n\t);\n\treturn URL.createObjectURL(blob);\n}\n\nfunction whenESMWorkerReady(worker: Worker): Promise<Worker> {\n\treturn new Promise<Worker>((resolve, reject) => {\n\t\tworker.onmessage = (e) => {\n\t\t\tif (e.data.type === \"vscode-worker-ready\") {\n\t\t\t\tworker.onmessage = null;\n\t\t\t\tresolve(worker);\n\t\t\t}\n\t\t};\n\t\tworker.onerror = reject;\n\t});\n}\n\nfunction isPromiseLike<T>(obj: any): obj is PromiseLike<T> {\n\tif (typeof obj.then === \"function\") {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker extends Disposable implements IWorker {\n\tprivate readonly id: number;\n\tprivate readonly label: string;\n\tprivate worker: Promise<Worker> | null;\n\n\tconstructor(\n\t\tesmWorkerLocation: URI | undefined,\n\t\tamdModuleId: string,\n\t\tid: number,\n\t\tlabel: string,\n\t\tonMessageCallback: IWorkerCallback,\n\t\tonErrorCallback: (err: any) => void,\n\t) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.label = label;\n\t\tconst workerOrPromise = getWorker(esmWorkerLocation, label);\n\t\tif (isPromiseLike(workerOrPromise)) {\n\t\t\tthis.worker = workerOrPromise;\n\t\t} else {\n\t\t\tthis.worker = Promise.resolve(workerOrPromise);\n\t\t}\n\t\tthis.postMessage(amdModuleId, []);\n\t\tthis.worker.then((w) => {\n\t\t\tw.onmessage = (ev) => {\n\t\t\t\tonMessageCallback(ev.data);\n\t\t\t};\n\t\t\tw.onmessageerror = onErrorCallback;\n\t\t\tif (typeof w.addEventListener === \"function\") {\n\t\t\t\tw.addEventListener(\"error\", onErrorCallback);\n\t\t\t}\n\t\t});\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis.worker?.then((w) => {\n\t\t\t\t\tw.onmessage = null;\n\t\t\t\t\tw.onmessageerror = null;\n\t\t\t\t\tw.removeEventListener(\"error\", onErrorCallback);\n\t\t\t\t\tw.terminate();\n\t\t\t\t});\n\t\t\t\tthis.worker = null;\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic getId(): number {\n\t\treturn this.id;\n\t}\n\n\tpublic postMessage(message: any, transfer: Transferable[]): void {\n\t\tthis.worker?.then((w) => {\n\t\t\ttry {\n\t\t\t\tw.postMessage(message, transfer);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\tonUnexpectedError(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t`FAILED to post message to '${this.label}'-worker`,\n\t\t\t\t\t\t{ cause: err },\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class WorkerDescriptor implements IWorkerDescriptor {\n\tpublic readonly esmModuleLocation: URI | undefined;\n\n\tconstructor(\n\t\tpublic readonly amdModuleId: string,\n\t\treadonly label: string | undefined,\n\t) {\n\t\tthis.esmModuleLocation = isESM\n\t\t\t? FileAccess.asBrowserUri(\n\t\t\t\t\t`${amdModuleId}.esm.js` as AppResourcePath,\n\t\t\t\t)\n\t\t\t: undefined;\n\t}\n}\n\nclass DefaultWorkerFactory implements IWorkerFactory {\n\tprivate static LAST_WORKER_ID = 0;\n\tprivate _webWorkerFailedBeforeError: any;\n\n\tconstructor() {\n\t\tthis._webWorkerFailedBeforeError = false;\n\t}\n\n\tpublic create(\n\t\tdesc: IWorkerDescriptor,\n\t\tonMessageCallback: IWorkerCallback,\n\t\tonErrorCallback: (err: any) => void,\n\t): IWorker {\n\t\tconst workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n\n\t\tif (this._webWorkerFailedBeforeError) {\n\t\t\tthrow this._webWorkerFailedBeforeError;\n\t\t}\n\n\t\treturn new WebWorker(\n\t\t\tdesc.esmModuleLocation,\n\t\t\tdesc.amdModuleId,\n\t\t\tworkerId,\n\t\t\tdesc.label || \"anonymous\" + workerId,\n\t\t\tonMessageCallback,\n\t\t\t(err) => {\n\t\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\t\tthis._webWorkerFailedBeforeError = err;\n\t\t\t\tonErrorCallback(err);\n\t\t\t},\n\t\t);\n\t}\n}\n\nexport function createWebWorker<T extends object>(\n\tamdModuleId: string,\n\tlabel: string | undefined,\n): IWorkerClient<T>;\nexport function createWebWorker<T extends object>(\n\tworkerDescriptor: IWorkerDescriptor,\n): IWorkerClient<T>;\nexport function createWebWorker<T extends object>(\n\targ0: string | IWorkerDescriptor,\n\targ1?: string | undefined,\n): IWorkerClient<T> {\n\tconst workerDescriptor =\n\t\ttypeof arg0 === \"string\" ? new WorkerDescriptor(arg0, arg1) : arg0;\n\treturn new SimpleWorkerClient<T>(\n\t\tnew DefaultWorkerFactory(),\n\t\tworkerDescriptor,\n\t);\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB,sBAAsB;AAC/C,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC,SAAS,YAAY,oBAAoB;AACzC,SAA+B,KAAK,kBAAkB;AAEtD;AAAA,EAMC;AAAA,EACA;AAAA,OACM;AACP,SAAS,gCAAgC;AAMzC,MAAM,QAAQ;AAMd,IAAI;AACJ,IACC,OAAO,SAAS,YAChB,KAAK,eACL,KAAK,YAAY,SAAS,gCACzB,WAAmB,mBAAmB,QACtC;AACD,aAAY,WAAmB;AAChC,OAAO;AACN,aAAW,yBAAyB,wBAAwB;AAAA,IAC3D,iBAAiB,wBAAC,UAAU,OAAX;AAAA,EAClB,CAAC;AACF;AAEO,SAAS,iBACf,SACA,SACS;AACT,MAAI,CAAC,QAAQ,WAAW,OAAO,GAAG;AACjC,UAAM,IAAI,SAAS,qBAAqB,OAAO;AAAA,EAChD;AACA,SAAO,IAAI;AAAA,IACV,WACI,SAAS,gBAAgB,OAAO,IACjC;AAAA,IACH,EAAE,GAAG,SAAS,MAAM,QAAQ,WAAW,OAAU;AAAA,EAClD;AACD;AAbgB;AAehB,SAAS,UACR,mBACA,OAC2B;AAM3B,QAAM,oBACL,WACC;AACF,MAAI,mBAAmB;AACtB,QAAI,OAAO,kBAAkB,cAAc,YAAY;AACtD,aAAO,kBAAkB,UAAU,iBAAiB,KAAK;AAAA,IAC1D;AACA,QAAI,OAAO,kBAAkB,iBAAiB,YAAY;AACzD,YAAM,YAAY,kBAAkB;AAAA,QACnC;AAAA,QACA;AAAA,MACD;AACA,aAAO,IAAI;AAAA,QACV,WACI,SAAS,gBAAgB,SAAS,IACnC;AAAA,QACH,EAAE,MAAM,OAAO,MAAM,QAAQ,WAAW,OAAU;AAAA,MACnD;AAAA,IACD;AAAA,EACD;AAUA,MAAI,mBAAmB;AACtB,UAAM,YAAY;AAAA,MACjB;AAAA,MACA,kBAAkB,SAAS,IAAI;AAAA,IAChC;AACA,UAAM,SAAS,IAAI;AAAA,MAClB,WACI,SAAS,gBAAgB,SAAS,IACnC;AAAA,MACH,EAAE,MAAM,OAAO,MAAM,QAAQ,WAAW,OAAU;AAAA,IACnD;AACA,QAAI,OAAO;AACV,aAAO,mBAAmB,MAAM;AAAA,IACjC,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AACA,QAAM,IAAI;AAAA,IACT;AAAA,EACD;AACD;AA1DS;AA4DT,SAAS,sBACR,OACA,iBACA,eACS;AACT,MACC,8BAA8B,KAAK,eAAe,KAClD,gBAAgB,UAAU,GAAG,WAAW,OAAO,MAAM,MACpD,WAAW,QACX;AAAA,EAGF,OAAO;AACN,UAAM,QAAQ,gBAAgB,YAAY,GAAG;AAC7C,UAAM,MAAM,gBAAgB,YAAY,KAAK,KAAK;AAClD,UAAM,SACL,QAAQ,IACL,IAAI;AAAA,MACJ,gBAAgB;AAAA,QACf,QAAQ;AAAA,QACR,CAAC,MAAM,MAAM;AAAA,MACd;AAAA,IACD,IACC,IAAI,gBAAgB;AAExB,QAAI,eAAe,QAAQ,MAAM,IAAI;AACrC,UAAM,SAAS,OAAO,SAAS;AAC/B,QAAI,QAAQ;AACX,wBAAkB,GAAG,eAAe,IAAI,OAAO,SAAS,CAAC,IAAI,KAAK;AAAA,IACnE,OAAO;AACN,wBAAkB,GAAG,eAAe,IAAI,KAAK;AAAA,IAC9C;AAAA,EACD;AAKA,QAAM,OAAO,IAAI;AAAA,IAChB;AAAA,MACC,SAAS;AAAA,QACR,KAAK,KAAK;AAAA,QACV,gBACG,6CAA6C,KAAK,UAAU,aAAa,CAAC,QAC1E;AAAA,QACH,qCAAqC,KAAK,UAAU,eAAe,CAAC,CAAC;AAAA,QACrE,qCAAqC,KAAK,UAAU,eAAe,CAAC,CAAC;AAAA,QACrE,kCAAkC,KAAK,UAAU,WAAW,iBAAiB,CAAC;AAAA,QAC9E;AAAA,QACA;AAAA,QACA,QACG,0CAA0C,KAAK,UAAU,eAAe,CAAC,QAAQ,KAAK,UAAU,eAAe,CAAC,OAChH,2CAA2C,KAAK,UAAU,eAAe,CAAC,QAAQ,KAAK,UAAU,eAAe,CAAC;AAAA,QACpH,QACG,6DACA;AAAA;AAAA,QACH,KAAK,KAAK;AAAA,MACX,CAAC,EAAE,KAAK,EAAE;AAAA,IACX;AAAA,IACA,EAAE,MAAM,yBAAyB;AAAA,EAClC;AACA,SAAO,IAAI,gBAAgB,IAAI;AAChC;AA7DS;AA+DT,SAAS,mBAAmB,QAAiC;AAC5D,SAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC/C,WAAO,YAAY,CAAC,MAAM;AACzB,UAAI,EAAE,KAAK,SAAS,uBAAuB;AAC1C,eAAO,YAAY;AACnB,gBAAQ,MAAM;AAAA,MACf;AAAA,IACD;AACA,WAAO,UAAU;AAAA,EAClB,CAAC;AACF;AAVS;AAYT,SAAS,cAAiB,KAAiC;AAC1D,MAAI,OAAO,IAAI,SAAS,YAAY;AACnC,WAAO;AAAA,EACR;AACA,SAAO;AACR;AALS;AAWT,MAAM,kBAAkB,WAA8B;AAAA,EA/MtD,OA+MsD;AAAA;AAAA;AAAA,EACpC;AAAA,EACA;AAAA,EACT;AAAA,EAER,YACC,mBACA,aACA,IACA,OACA,mBACA,iBACC;AACD,UAAM;AACN,SAAK,KAAK;AACV,SAAK,QAAQ;AACb,UAAM,kBAAkB,UAAU,mBAAmB,KAAK;AAC1D,QAAI,cAAc,eAAe,GAAG;AACnC,WAAK,SAAS;AAAA,IACf,OAAO;AACN,WAAK,SAAS,QAAQ,QAAQ,eAAe;AAAA,IAC9C;AACA,SAAK,YAAY,aAAa,CAAC,CAAC;AAChC,SAAK,OAAO,KAAK,CAAC,MAAM;AACvB,QAAE,YAAY,CAAC,OAAO;AACrB,0BAAkB,GAAG,IAAI;AAAA,MAC1B;AACA,QAAE,iBAAiB;AACnB,UAAI,OAAO,EAAE,qBAAqB,YAAY;AAC7C,UAAE,iBAAiB,SAAS,eAAe;AAAA,MAC5C;AAAA,IACD,CAAC;AACD,SAAK;AAAA,MACJ,aAAa,MAAM;AAClB,aAAK,QAAQ,KAAK,CAAC,MAAM;AACxB,YAAE,YAAY;AACd,YAAE,iBAAiB;AACnB,YAAE,oBAAoB,SAAS,eAAe;AAC9C,YAAE,UAAU;AAAA,QACb,CAAC;AACD,aAAK,SAAS;AAAA,MACf,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEO,QAAgB;AACtB,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,YAAY,SAAc,UAAgC;AAChE,SAAK,QAAQ,KAAK,CAAC,MAAM;AACxB,UAAI;AACH,UAAE,YAAY,SAAS,QAAQ;AAAA,MAChC,SAAS,KAAK;AACb,0BAAkB,GAAG;AACrB;AAAA,UACC,IAAI;AAAA,YACH,8BAA8B,KAAK,KAAK;AAAA,YACxC,EAAE,OAAO,IAAI;AAAA,UACd;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAEO,MAAM,iBAA8C;AAAA,EAG1D,YACiB,aACP,OACR;AAFe;AACP;AAET,SAAK,oBAAoB,QACtB,WAAW;AAAA,MACX,GAAG,WAAW;AAAA,IACf,IACC;AAAA,EACJ;AAAA,EA7RD,OAiR2D;AAAA;AAAA;AAAA,EAC1C;AAYjB;AAEA,MAAM,qBAA+C;AAAA,EAhSrD,OAgSqD;AAAA;AAAA;AAAA,EACpD,OAAe,iBAAiB;AAAA,EACxB;AAAA,EAER,cAAc;AACb,SAAK,8BAA8B;AAAA,EACpC;AAAA,EAEO,OACN,MACA,mBACA,iBACU;AACV,UAAM,WAAW,EAAE,qBAAqB;AAExC,QAAI,KAAK,6BAA6B;AACrC,YAAM,KAAK;AAAA,IACZ;AAEA,WAAO,IAAI;AAAA,MACV,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,MACA,KAAK,SAAS,cAAc;AAAA,MAC5B;AAAA,MACA,CAAC,QAAQ;AACR,gCAAwB,GAAG;AAC3B,aAAK,8BAA8B;AACnC,wBAAgB,GAAG;AAAA,MACpB;AAAA,IACD;AAAA,EACD;AACD;AASO,SAAS,gBACf,MACA,MACmB;AACnB,QAAM,mBACL,OAAO,SAAS,WAAW,IAAI,iBAAiB,MAAM,IAAI,IAAI;AAC/D,SAAO,IAAI;AAAA,IACV,IAAI,qBAAqB;AAAA,IACzB;AAAA,EACD;AACD;AAVgB;",
  "names": []
}
