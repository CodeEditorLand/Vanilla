{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/event.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { type Event as BaseEvent, Emitter } from \"../common/event.js\";\nimport type { IDisposable } from \"../common/lifecycle.js\";\nimport type { GestureEvent } from \"./touch.js\";\n\nexport type EventHandler = HTMLElement | HTMLDocument | Window;\n\nexport interface IDomEvent {\n\t<K extends keyof HTMLElementEventMap>(\n\t\telement: EventHandler,\n\t\ttype: K,\n\t\tuseCapture?: boolean,\n\t): BaseEvent<HTMLElementEventMap[K]>;\n\t(\n\t\telement: EventHandler,\n\t\ttype: string,\n\t\tuseCapture?: boolean,\n\t): BaseEvent<unknown>;\n}\n\nexport interface DOMEventMap\n\textends HTMLElementEventMap,\n\t\tDocumentEventMap,\n\t\tWindowEventMap {\n\t\"-monaco-gesturetap\": GestureEvent;\n\t\"-monaco-gesturechange\": GestureEvent;\n\t\"-monaco-gesturestart\": GestureEvent;\n\t\"-monaco-gesturesend\": GestureEvent;\n\t\"-monaco-gesturecontextmenu\": GestureEvent;\n\tcompositionstart: CompositionEvent;\n\tcompositionupdate: CompositionEvent;\n\tcompositionend: CompositionEvent;\n}\n\nexport class DomEmitter<K extends keyof DOMEventMap> implements IDisposable {\n\tprivate emitter: Emitter<DOMEventMap[K]>;\n\n\tget event(): BaseEvent<DOMEventMap[K]> {\n\t\treturn this.emitter.event;\n\t}\n\n\tconstructor(\n\t\telement: Window & typeof globalThis,\n\t\ttype: WindowEventMap,\n\t\tuseCapture?: boolean,\n\t);\n\tconstructor(\n\t\telement: Document,\n\t\ttype: DocumentEventMap,\n\t\tuseCapture?: boolean,\n\t);\n\tconstructor(element: EventHandler, type: K, useCapture?: boolean);\n\tconstructor(element: EventHandler, type: K, useCapture?: boolean) {\n\t\tconst fn = (e: Event) => this.emitter.fire(e as DOMEventMap[K]);\n\t\tthis.emitter = new Emitter({\n\t\t\tonWillAddFirstListener: () =>\n\t\t\t\telement.addEventListener(type, fn, useCapture),\n\t\t\tonDidRemoveLastListener: () =>\n\t\t\t\telement.removeEventListener(type, fn, useCapture),\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis.emitter.dispose();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAkC,eAAe;AAiC1C,MAAM,WAA+D;AAAA,EAtC5E,OAsC4E;AAAA;AAAA;AAAA,EACnE;AAAA,EAER,IAAI,QAAmC;AACtC,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAaA,YAAY,SAAuB,MAAS,YAAsB;AACjE,UAAM,KAAK,wBAAC,MAAa,KAAK,QAAQ,KAAK,CAAmB,GAAnD;AACX,SAAK,UAAU,IAAI,QAAQ;AAAA,MAC1B,wBAAwB,6BACvB,QAAQ,iBAAiB,MAAM,IAAI,UAAU,GADtB;AAAA,MAExB,yBAAyB,6BACxB,QAAQ,oBAAoB,MAAM,IAAI,UAAU,GADxB;AAAA,IAE1B,CAAC;AAAA,EACF;AAAA,EAEA,UAAgB;AACf,SAAK,QAAQ,QAAQ;AAAA,EACtB;AACD;",
  "names": []
}
