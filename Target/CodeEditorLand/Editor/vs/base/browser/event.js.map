{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/event.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { GestureEvent } from './touch.js';\nimport { Emitter, Event as BaseEvent } from '../common/event.js';\nimport { IDisposable } from '../common/lifecycle.js';\n\nexport type EventHandler = HTMLElement | HTMLDocument | Window;\n\nexport interface IDomEvent {\n\t<K extends keyof HTMLElementEventMap>(element: EventHandler, type: K, useCapture?: boolean): BaseEvent<HTMLElementEventMap[K]>;\n\t(element: EventHandler, type: string, useCapture?: boolean): BaseEvent<unknown>;\n}\n\nexport interface DOMEventMap extends HTMLElementEventMap, DocumentEventMap, WindowEventMap {\n\t'-monaco-gesturetap': GestureEvent;\n\t'-monaco-gesturechange': GestureEvent;\n\t'-monaco-gesturestart': GestureEvent;\n\t'-monaco-gesturesend': GestureEvent;\n\t'-monaco-gesturecontextmenu': GestureEvent;\n\t'compositionstart': CompositionEvent;\n\t'compositionupdate': CompositionEvent;\n\t'compositionend': CompositionEvent;\n}\n\nexport class DomEmitter<K extends keyof DOMEventMap> implements IDisposable {\n\n\tprivate emitter: Emitter<DOMEventMap[K]>;\n\n\tget event(): BaseEvent<DOMEventMap[K]> {\n\t\treturn this.emitter.event;\n\t}\n\n\tconstructor(element: Window & typeof globalThis, type: WindowEventMap, useCapture?: boolean);\n\tconstructor(element: Document, type: DocumentEventMap, useCapture?: boolean);\n\tconstructor(element: EventHandler, type: K, useCapture?: boolean);\n\tconstructor(element: EventHandler, type: K, useCapture?: boolean) {\n\t\tconst fn = (e: Event) => this.emitter.fire(e as DOMEventMap[K]);\n\t\tthis.emitter = new Emitter({\n\t\t\tonWillAddFirstListener: () => element.addEventListener(type, fn, useCapture),\n\t\t\tonDidRemoveLastListener: () => element.removeEventListener(type, fn, useCapture)\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis.emitter.dispose();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,oBAAoB;AAC7B,SAAS,SAAS,SAAS,iBAAiB;AAC5C,SAAS,mBAAmB;AAoBrB,MAAM,WAA+D;AAAA,EA3B5E,OA2B4E;AAAA;AAAA;AAAA,EAEnE;AAAA,EAER,IAAI,QAAmC;AACtC,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAKA,YAAY,SAAuB,MAAS,YAAsB;AACjE,UAAM,KAAK,wBAAC,MAAa,KAAK,QAAQ,KAAK,CAAmB,GAAnD;AACX,SAAK,UAAU,IAAI,QAAQ;AAAA,MAC1B,wBAAwB,6BAAM,QAAQ,iBAAiB,MAAM,IAAI,UAAU,GAAnD;AAAA,MACxB,yBAAyB,6BAAM,QAAQ,oBAAoB,MAAM,IAAI,UAAU,GAAtD;AAAA,IAC1B,CAAC;AAAA,EACF;AAAA,EAEA,UAAgB;AACf,SAAK,QAAQ,QAAQ;AAAA,EACtB;AACD;",
  "names": []
}
