import{createTrustedTypesPolicy as m}from"../../../vs/base/browser/trustedTypes.js";import{coalesce as p}from"../../../vs/base/common/arrays.js";import{onUnexpectedError as f}from"../../../vs/base/common/errors.js";import{Disposable as W,toDisposable as y}from"../../../vs/base/common/lifecycle.js";import{COI as h,FileAccess as b}from"../../../vs/base/common/network.js";import"../../../vs/base/common/uri.js";import{logOnceWebWorkerWarning as I,SimpleWorkerClient as w}from"../../../vs/base/common/worker/simpleWorker.js";import{getNLSLanguage as T,getNLSMessages as E}from"../../../vs/nls.js";const l=!1;let a;typeof self=="object"&&self.constructor&&self.constructor.name==="DedicatedWorkerGlobalScope"&&globalThis.workerttPolicy!==void 0?a=globalThis.workerttPolicy:a=m("defaultWorkerFactory",{createScriptURL:r=>r});function q(r,e){if(!r.startsWith("blob:"))throw new URIError("Not a blob-url: "+r);return new Worker(a?a.createScriptURL(r):r,{...e,type:l?"module":void 0})}function L(r,e){const o=globalThis.MonacoEnvironment;if(o){if(typeof o.getWorker=="function")return o.getWorker("workerMain.js",e);if(typeof o.getWorkerUrl=="function"){const n=o.getWorkerUrl("workerMain.js",e);return new Worker(a?a.createScriptURL(n):n,{name:e,type:l?"module":void 0})}}if(typeof require=="function"){const n=require.toUrl("vs/base/worker/workerMain.js"),t="vs/base/worker/defaultWorkerFactory.js",s=require.toUrl(t).slice(0,-t.length),i=g(e,n,s);return new Worker(a?a.createScriptURL(i):i,{name:e,type:l?"module":void 0})}if(r){const n=g(e,r.toString(!0)),t=new Worker(a?a.createScriptURL(n):n,{name:e,type:l?"module":void 0});return l?v(t):t}throw new Error("You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker")}function g(r,e,o){if(!(/^((http:)|(https:)|(file:))/.test(e)&&e.substring(0,globalThis.origin.length)!==globalThis.origin)){const t=e.lastIndexOf("?"),s=e.lastIndexOf("#",t),i=t>0?new URLSearchParams(e.substring(t+1,~s?s:void 0)):new URLSearchParams;h.addSearchParam(i,!0,!0),i.toString()?e=`${e}?${i.toString()}#${r}`:e=`${e}#${r}`}const n=new Blob([p([`/*${r}*/`,o?`globalThis.MonacoEnvironment = { baseUrl: '${o}' };`:void 0,`globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(E())};`,`globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(T())};`,`globalThis._VSCODE_FILE_ROOT = '${globalThis._VSCODE_FILE_ROOT}';`,"const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });","globalThis.workerttPolicy = ttPolicy;",l?`await import(ttPolicy?.createScriptURL('${e}') ?? '${e}');`:`importScripts(ttPolicy?.createScriptURL('${e}') ?? '${e}');`,l?"globalThis.postMessage({ type: 'vscode-worker-ready' });":void 0,`/*${r}*/`]).join("")],{type:"application/javascript"});return URL.createObjectURL(n)}function v(r){return new Promise((e,o)=>{r.onmessage=function(n){n.data.type==="vscode-worker-ready"&&(r.onmessage=null,e(r))},r.onerror=o})}function R(r){return typeof r.then=="function"}class P extends W{id;label;worker;constructor(e,o,n,t,s,i){super(),this.id=n,this.label=t;const u=L(e,t);R(u)?this.worker=u:this.worker=Promise.resolve(u),this.postMessage(o,[]),this.worker.then(c=>{c.onmessage=function(k){s(k.data)},c.onmessageerror=i,typeof c.addEventListener=="function"&&c.addEventListener("error",i)}),this._register(y(()=>{this.worker?.then(c=>{c.onmessage=null,c.onmessageerror=null,c.removeEventListener("error",i),c.terminate()}),this.worker=null}))}getId(){return this.id}postMessage(e,o){this.worker?.then(n=>{try{n.postMessage(e,o)}catch(t){f(t),f(new Error(`FAILED to post message to '${this.label}'-worker`,{cause:t}))}})}}class M{constructor(e,o){this.amdModuleId=e;this.label=o;this.esmModuleLocation=l?b.asBrowserUri(`${e}.esm.js`):void 0}esmModuleLocation}class d{static LAST_WORKER_ID=0;_webWorkerFailedBeforeError;constructor(){this._webWorkerFailedBeforeError=!1}create(e,o,n){const t=++d.LAST_WORKER_ID;if(this._webWorkerFailedBeforeError)throw this._webWorkerFailedBeforeError;return new P(e.esmModuleLocation,e.amdModuleId,t,e.label||"anonymous"+t,o,s=>{I(s),this._webWorkerFailedBeforeError=s,n(s)})}}function J(r,e){const o=typeof r=="string"?new M(r,e):r;return new w(new d,o)}export{M as WorkerDescriptor,q as createBlobWorker,J as createWebWorker};
