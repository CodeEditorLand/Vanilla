import{createTrustedTypesPolicy as m}from"./trustedTypes.js";import{onUnexpectedError as f}from"../common/errors.js";import{COI as p,FileAccess as k}from"../common/network.js";import"../common/uri.js";import{logOnceWebWorkerWarning as W,SimpleWorkerClient as y}from"../common/worker/simpleWorker.js";import{Disposable as h,toDisposable as b}from"../common/lifecycle.js";import{coalesce as I}from"../common/arrays.js";import{getNLSLanguage as T,getNLSMessages as E}from"../../nls.js";const l=!0;let a;typeof self=="object"&&self.constructor&&self.constructor.name==="DedicatedWorkerGlobalScope"&&globalThis.workerttPolicy!==void 0?a=globalThis.workerttPolicy:a=m("defaultWorkerFactory",{createScriptURL:r=>r});function J(r,e){if(!r.startsWith("blob:"))throw new URIError("Not a blob-url: "+r);return new Worker(a?a.createScriptURL(r):r,{...e,type:l?"module":void 0})}function L(r,e){const o=globalThis.MonacoEnvironment;if(o){if(typeof o.getWorker=="function")return o.getWorker("workerMain.js",e);if(typeof o.getWorkerUrl=="function"){const t=o.getWorkerUrl("workerMain.js",e);return new Worker(a?a.createScriptURL(t):t,{name:e,type:l?"module":void 0})}}if(r){const t=w(e,r.toString(!0)),n=new Worker(a?a.createScriptURL(t):t,{name:e,type:l?"module":void 0});return l?R(n):n}throw new Error("You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker")}function w(r,e,o){if(!(/^((http:)|(https:)|(file:))/.test(e)&&e.substring(0,globalThis.origin.length)!==globalThis.origin)){const n=e.lastIndexOf("?"),s=e.lastIndexOf("#",n),c=n>0?new URLSearchParams(e.substring(n+1,~s?s:void 0)):new URLSearchParams;p.addSearchParam(c,!0,!0),c.toString()?e=`${e}?${c.toString()}#${r}`:e=`${e}#${r}`}const t=new Blob([I([`/*${r}*/`,o?`globalThis.MonacoEnvironment = { baseUrl: '${o}' };`:void 0,`globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(E())};`,`globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(T())};`,`globalThis._VSCODE_FILE_ROOT = '${globalThis._VSCODE_FILE_ROOT}';`,"const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });","globalThis.workerttPolicy = ttPolicy;",l?`await import(ttPolicy?.createScriptURL('${e}') ?? '${e}');`:`importScripts(ttPolicy?.createScriptURL('${e}') ?? '${e}');`,l?"globalThis.postMessage({ type: 'vscode-worker-ready' });":void 0,`/*${r}*/`]).join("")],{type:"application/javascript"});return URL.createObjectURL(t)}function R(r){return new Promise((e,o)=>{r.onmessage=function(t){t.data.type==="vscode-worker-ready"&&(r.onmessage=null,e(r))},r.onerror=o})}function v(r){return typeof r.then=="function"}class P extends h{id;label;worker;constructor(e,o,t,n,s,c){super(),this.id=t,this.label=n;const u=L(e,n);v(u)?this.worker=u:this.worker=Promise.resolve(u),this.postMessage(o,[]),this.worker.then(i=>{i.onmessage=function(g){s(g.data)},i.onmessageerror=c,typeof i.addEventListener=="function"&&i.addEventListener("error",c)}),this._register(b(()=>{this.worker?.then(i=>{i.onmessage=null,i.onmessageerror=null,i.removeEventListener("error",c),i.terminate()}),this.worker=null}))}getId(){return this.id}postMessage(e,o){this.worker?.then(t=>{try{t.postMessage(e,o)}catch(n){f(n),f(new Error(`FAILED to post message to '${this.label}'-worker`,{cause:n}))}})}}class M{constructor(e,o){this.amdModuleId=e;this.label=o;this.esmModuleLocation=l?k.asBrowserUri(`${e}.esm.js`):void 0}esmModuleLocation}class d{static LAST_WORKER_ID=0;_webWorkerFailedBeforeError;constructor(){this._webWorkerFailedBeforeError=!1}create(e,o,t){const n=++d.LAST_WORKER_ID;if(this._webWorkerFailedBeforeError)throw this._webWorkerFailedBeforeError;return new P(e.esmModuleLocation,e.amdModuleId,n,e.label||"anonymous"+n,o,s=>{W(s),this._webWorkerFailedBeforeError=s,t(s)})}}function K(r,e){const o=typeof r=="string"?new M(r,e):r;return new y(new d,o)}export{M as WorkerDescriptor,J as createBlobWorker,K as createWebWorker};
