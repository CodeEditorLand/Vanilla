var s=class{unexpectedErrorHandler;listeners;constructor(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout(()=>{throw e.stack?t.isErrorNoTelemetry(e)?new t(e.message+`

`+e.stack):new Error(e.message+`

`+e.stack):e},0)}}addListener(e){return this.listeners.push(e),()=>{this._removeListener(e)}}emit(e){this.listeners.forEach(n=>{n(e)})}_removeListener(e){this.listeners.splice(this.listeners.indexOf(e),1)}setUnexpectedErrorHandler(e){this.unexpectedErrorHandler=e}getUnexpectedErrorHandler(){return this.unexpectedErrorHandler}onUnexpectedError(e){this.unexpectedErrorHandler(e),this.emit(e)}onUnexpectedExternalError(e){this.unexpectedErrorHandler(e)}},l=new s;function c(r){u(r)||l.onUnexpectedError(r)}var i="Canceled";function u(r){return r instanceof a?!0:r instanceof Error&&r.name===i&&r.message===i}var a=class extends Error{constructor(){super(i),this.name=this.message}};var t=class r extends Error{name;constructor(e){super(e),this.name="CodeExpectedError"}static fromError(e){if(e instanceof r)return e;let n=new r;return n.message=e.message,n.stack=e.stack,n}static isErrorNoTelemetry(e){return e.name==="CodeExpectedError"}};function E(r,e){let n=globalThis.MonacoEnvironment;if(n?.createTrustedTypesPolicy)try{return n.createTrustedTypesPolicy(r,e)}catch(o){c(o);return}try{return globalThis.trustedTypes?.createPolicy(r,e)}catch(o){c(o);return}}export{E as createTrustedTypesPolicy};
