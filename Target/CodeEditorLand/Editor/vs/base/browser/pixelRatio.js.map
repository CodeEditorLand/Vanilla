{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/pixelRatio.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindowId, onDidUnregisterWindow } from './dom.js';\nimport { Emitter, Event } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nclass DevicePixelRatioMonitor extends Disposable {\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate readonly _listener: () => void;\n\tprivate _mediaQueryList: MediaQueryList | null;\n\n\tconstructor(targetWindow: Window) {\n\t\tsuper();\n\n\t\tthis._listener = () => this._handleChange(targetWindow, true);\n\t\tthis._mediaQueryList = null;\n\t\tthis._handleChange(targetWindow, false);\n\t}\n\n\tprivate _handleChange(targetWindow: Window, fireEvent: boolean): void {\n\t\tthis._mediaQueryList?.removeEventListener('change', this._listener);\n\n\t\tthis._mediaQueryList = targetWindow.matchMedia(`(resolution: ${targetWindow.devicePixelRatio}dppx)`);\n\t\tthis._mediaQueryList.addEventListener('change', this._listener);\n\n\t\tif (fireEvent) {\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n}\n\nexport interface IPixelRatioMonitor {\n\treadonly value: number;\n\treadonly onDidChange: Event<number>;\n}\n\nclass PixelRatioMonitorImpl extends Disposable implements IPixelRatioMonitor {\n\n\tprivate readonly _onDidChange = this._register(new Emitter<number>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate _value: number;\n\n\tget value(): number {\n\t\treturn this._value;\n\t}\n\n\tconstructor(targetWindow: Window) {\n\t\tsuper();\n\n\t\tthis._value = this._getPixelRatio(targetWindow);\n\n\t\tconst dprMonitor = this._register(new DevicePixelRatioMonitor(targetWindow));\n\t\tthis._register(dprMonitor.onDidChange(() => {\n\t\t\tthis._value = this._getPixelRatio(targetWindow);\n\t\t\tthis._onDidChange.fire(this._value);\n\t\t}));\n\t}\n\n\tprivate _getPixelRatio(targetWindow: Window): number {\n\t\tconst ctx: any = document.createElement('canvas').getContext('2d');\n\t\tconst dpr = targetWindow.devicePixelRatio || 1;\n\t\tconst bsr = ctx.webkitBackingStorePixelRatio ||\n\t\t\tctx.mozBackingStorePixelRatio ||\n\t\t\tctx.msBackingStorePixelRatio ||\n\t\t\tctx.oBackingStorePixelRatio ||\n\t\t\tctx.backingStorePixelRatio || 1;\n\t\treturn dpr / bsr;\n\t}\n}\n\nclass PixelRatioMonitorFacade {\n\n\tprivate readonly mapWindowIdToPixelRatioMonitor = new Map<number, PixelRatioMonitorImpl>();\n\n\tprivate _getOrCreatePixelRatioMonitor(targetWindow: Window): PixelRatioMonitorImpl {\n\t\tconst targetWindowId = getWindowId(targetWindow);\n\t\tlet pixelRatioMonitor = this.mapWindowIdToPixelRatioMonitor.get(targetWindowId);\n\t\tif (!pixelRatioMonitor) {\n\t\t\tpixelRatioMonitor = markAsSingleton(new PixelRatioMonitorImpl(targetWindow));\n\t\t\tthis.mapWindowIdToPixelRatioMonitor.set(targetWindowId, pixelRatioMonitor);\n\n\t\t\tmarkAsSingleton(Event.once(onDidUnregisterWindow)(({ vscodeWindowId }) => {\n\t\t\t\tif (vscodeWindowId === targetWindowId) {\n\t\t\t\t\tpixelRatioMonitor?.dispose();\n\t\t\t\t\tthis.mapWindowIdToPixelRatioMonitor.delete(targetWindowId);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\treturn pixelRatioMonitor;\n\t}\n\n\tgetInstance(targetWindow: Window): IPixelRatioMonitor {\n\t\treturn this._getOrCreatePixelRatioMonitor(targetWindow);\n\t}\n}\n\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioMonitorFacade();\n"],
  "mappings": ";;AAKA,SAAS,aAAa,6BAA6B;AACnD,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,uBAAuB;AAK5C,MAAM,gCAAgC,WAAW;AAAA,EAZjD,OAYiD;AAAA;AAAA;AAAA,EAE/B,eAAe,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACzD,cAAc,KAAK,aAAa;AAAA,EAExB;AAAA,EACT;AAAA,EAER,YAAY,cAAsB;AACjC,UAAM;AAEN,SAAK,YAAY,MAAM,KAAK,cAAc,cAAc,IAAI;AAC5D,SAAK,kBAAkB;AACvB,SAAK,cAAc,cAAc,KAAK;AAAA,EACvC;AAAA,EAEQ,cAAc,cAAsB,WAA0B;AACrE,SAAK,iBAAiB,oBAAoB,UAAU,KAAK,SAAS;AAElE,SAAK,kBAAkB,aAAa,WAAW,gBAAgB,aAAa,gBAAgB,OAAO;AACnG,SAAK,gBAAgB,iBAAiB,UAAU,KAAK,SAAS;AAE9D,QAAI,WAAW;AACd,WAAK,aAAa,KAAK;AAAA,IACxB;AAAA,EACD;AACD;AAOA,MAAM,8BAA8B,WAAyC;AAAA,EA7C7E,OA6C6E;AAAA;AAAA;AAAA,EAE3D,eAAe,KAAK,UAAU,IAAI,QAAgB,CAAC;AAAA,EAC3D,cAAc,KAAK,aAAa;AAAA,EAEjC;AAAA,EAER,IAAI,QAAgB;AACnB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,YAAY,cAAsB;AACjC,UAAM;AAEN,SAAK,SAAS,KAAK,eAAe,YAAY;AAE9C,UAAM,aAAa,KAAK,UAAU,IAAI,wBAAwB,YAAY,CAAC;AAC3E,SAAK,UAAU,WAAW,YAAY,MAAM;AAC3C,WAAK,SAAS,KAAK,eAAe,YAAY;AAC9C,WAAK,aAAa,KAAK,KAAK,MAAM;AAAA,IACnC,CAAC,CAAC;AAAA,EACH;AAAA,EAEQ,eAAe,cAA8B;AACpD,UAAM,MAAW,SAAS,cAAc,QAAQ,EAAE,WAAW,IAAI;AACjE,UAAM,MAAM,aAAa,oBAAoB;AAC7C,UAAM,MAAM,IAAI,gCACf,IAAI,6BACJ,IAAI,4BACJ,IAAI,2BACJ,IAAI,0BAA0B;AAC/B,WAAO,MAAM;AAAA,EACd;AACD;AAEA,MAAM,wBAAwB;AAAA,EAhF9B,OAgF8B;AAAA;AAAA;AAAA,EAEZ,iCAAiC,oBAAI,IAAmC;AAAA,EAEjF,8BAA8B,cAA6C;AAClF,UAAM,iBAAiB,YAAY,YAAY;AAC/C,QAAI,oBAAoB,KAAK,+BAA+B,IAAI,cAAc;AAC9E,QAAI,CAAC,mBAAmB;AACvB,0BAAoB,gBAAgB,IAAI,sBAAsB,YAAY,CAAC;AAC3E,WAAK,+BAA+B,IAAI,gBAAgB,iBAAiB;AAEzE,sBAAgB,MAAM,KAAK,qBAAqB,EAAE,CAAC,EAAE,eAAe,MAAM;AACzE,YAAI,mBAAmB,gBAAgB;AACtC,6BAAmB,QAAQ;AAC3B,eAAK,+BAA+B,OAAO,cAAc;AAAA,QAC1D;AAAA,MACD,CAAC,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,cAA0C;AACrD,WAAO,KAAK,8BAA8B,YAAY;AAAA,EACvD;AACD;AASO,MAAM,aAAa,IAAI,wBAAwB;",
  "names": []
}
