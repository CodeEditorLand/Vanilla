import{getErrorMessage as s}from"../common/errors.js";import{Emitter as i}from"../common/event.js";import{Disposable as o,toDisposable as n}from"../common/lifecycle.js";import{mainWindow as t}from"./window.js";class v extends o{constructor(e){super();this.channelName=e;if("BroadcastChannel"in t)try{this.broadcastChannel=new BroadcastChannel(e);const a=r=>{this._onDidReceiveData.fire(r.data)};this.broadcastChannel.addEventListener("message",a),this._register(n(()=>{this.broadcastChannel&&(this.broadcastChannel.removeEventListener("message",a),this.broadcastChannel.close())}))}catch(a){console.warn("Error while creating broadcast channel. Falling back to localStorage.",s(a))}this.broadcastChannel||(this.channelName=`BroadcastDataChannel.${e}`,this.createBroadcastChannel())}broadcastChannel;_onDidReceiveData=this._register(new i);onDidReceiveData=this._onDidReceiveData.event;createBroadcastChannel(){const e=a=>{a.key===this.channelName&&a.newValue&&this._onDidReceiveData.fire(JSON.parse(a.newValue))};t.addEventListener("storage",e),this._register(n(()=>t.removeEventListener("storage",e)))}postData(e){this.broadcastChannel?this.broadcastChannel.postMessage(e):(localStorage.removeItem(this.channelName),localStorage.setItem(this.channelName,JSON.stringify(e)))}}export{v as BroadcastDataChannel};
