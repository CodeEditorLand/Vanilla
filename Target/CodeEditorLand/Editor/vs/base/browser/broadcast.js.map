{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/browser/broadcast.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from './window.js';\nimport { getErrorMessage } from '../common/errors.js';\nimport { Emitter } from '../common/event.js';\nimport { Disposable, toDisposable } from '../common/lifecycle.js';\n\nexport class BroadcastDataChannel<T> extends Disposable {\n\n\tprivate broadcastChannel: BroadcastChannel | undefined;\n\n\tprivate readonly _onDidReceiveData = this._register(new Emitter<T>());\n\treadonly onDidReceiveData = this._onDidReceiveData.event;\n\n\tconstructor(private readonly channelName: string) {\n\t\tsuper();\n\n\t\t// Use BroadcastChannel\n\t\tif ('BroadcastChannel' in mainWindow) {\n\t\t\ttry {\n\t\t\t\tthis.broadcastChannel = new BroadcastChannel(channelName);\n\t\t\t\tconst listener = (event: MessageEvent) => {\n\t\t\t\t\tthis._onDidReceiveData.fire(event.data);\n\t\t\t\t};\n\t\t\t\tthis.broadcastChannel.addEventListener('message', listener);\n\t\t\t\tthis._register(toDisposable(() => {\n\t\t\t\t\tif (this.broadcastChannel) {\n\t\t\t\t\t\tthis.broadcastChannel.removeEventListener('message', listener);\n\t\t\t\t\t\tthis.broadcastChannel.close();\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Error while creating broadcast channel. Falling back to localStorage.', getErrorMessage(error));\n\t\t\t}\n\t\t}\n\n\t\t// BroadcastChannel is not supported. Use storage.\n\t\tif (!this.broadcastChannel) {\n\t\t\tthis.channelName = `BroadcastDataChannel.${channelName}`;\n\t\t\tthis.createBroadcastChannel();\n\t\t}\n\t}\n\n\tprivate createBroadcastChannel(): void {\n\t\tconst listener = (event: StorageEvent) => {\n\t\t\tif (event.key === this.channelName && event.newValue) {\n\t\t\t\tthis._onDidReceiveData.fire(JSON.parse(event.newValue));\n\t\t\t}\n\t\t};\n\t\tmainWindow.addEventListener('storage', listener);\n\t\tthis._register(toDisposable(() => mainWindow.removeEventListener('storage', listener)));\n\t}\n\n\t/**\n\t * Sends the data to other BroadcastChannel objects set up for this channel. Data can be structured objects, e.g. nested objects and arrays.\n\t * @param data data to broadcast\n\t */\n\tpostData(data: T): void {\n\t\tif (this.broadcastChannel) {\n\t\t\tthis.broadcastChannel.postMessage(data);\n\t\t} else {\n\t\t\t// remove previous changes so that event is triggered even if new changes are same as old changes\n\t\t\tlocalStorage.removeItem(this.channelName);\n\t\t\tlocalStorage.setItem(this.channelName, JSON.stringify(data));\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,uBAAuB;AAChC,SAAS,eAAe;AACxB,SAAS,YAAY,oBAAoB;AAElC,MAAM,6BAAgC,WAAW;AAAA,EAOvD,YAA6B,aAAqB;AACjD,UAAM;AADsB;AAI5B,QAAI,sBAAsB,YAAY;AACrC,UAAI;AACH,aAAK,mBAAmB,IAAI,iBAAiB,WAAW;AACxD,cAAM,WAAW,wBAAC,UAAwB;AACzC,eAAK,kBAAkB,KAAK,MAAM,IAAI;AAAA,QACvC,GAFiB;AAGjB,aAAK,iBAAiB,iBAAiB,WAAW,QAAQ;AAC1D,aAAK,UAAU,aAAa,MAAM;AACjC,cAAI,KAAK,kBAAkB;AAC1B,iBAAK,iBAAiB,oBAAoB,WAAW,QAAQ;AAC7D,iBAAK,iBAAiB,MAAM;AAAA,UAC7B;AAAA,QACD,CAAC,CAAC;AAAA,MACH,SAAS,OAAO;AACf,gBAAQ,KAAK,yEAAyE,gBAAgB,KAAK,CAAC;AAAA,MAC7G;AAAA,IACD;AAGA,QAAI,CAAC,KAAK,kBAAkB;AAC3B,WAAK,cAAc,wBAAwB,WAAW;AACtD,WAAK,uBAAuB;AAAA,IAC7B;AAAA,EACD;AAAA,EA5CD,OAUwD;AAAA;AAAA;AAAA,EAE/C;AAAA,EAES,oBAAoB,KAAK,UAAU,IAAI,QAAW,CAAC;AAAA,EAC3D,mBAAmB,KAAK,kBAAkB;AAAA,EA+B3C,yBAA+B;AACtC,UAAM,WAAW,wBAAC,UAAwB;AACzC,UAAI,MAAM,QAAQ,KAAK,eAAe,MAAM,UAAU;AACrD,aAAK,kBAAkB,KAAK,KAAK,MAAM,MAAM,QAAQ,CAAC;AAAA,MACvD;AAAA,IACD,GAJiB;AAKjB,eAAW,iBAAiB,WAAW,QAAQ;AAC/C,SAAK,UAAU,aAAa,MAAM,WAAW,oBAAoB,WAAW,QAAQ,CAAC,CAAC;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,MAAe;AACvB,QAAI,KAAK,kBAAkB;AAC1B,WAAK,iBAAiB,YAAY,IAAI;AAAA,IACvC,OAAO;AAEN,mBAAa,WAAW,KAAK,WAAW;AACxC,mBAAa,QAAQ,KAAK,aAAa,KAAK,UAAU,IAAI,CAAC;AAAA,IAC5D;AAAA,EACD;AACD;",
  "names": []
}
