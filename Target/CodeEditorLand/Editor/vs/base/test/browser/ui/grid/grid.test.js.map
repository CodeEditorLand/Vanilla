{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/ui/grid/grid.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { createSerializedGrid, Direction, getRelativeLocation, Grid, GridNode, GridNodeDescriptor, ISerializableView, isGridBranchNode, IViewDeserializer, Orientation, sanitizeGridNodeDescriptor, SerializableGrid, Sizing } from '../../../../browser/ui/grid/grid.js';\nimport { Event } from '../../../../common/event.js';\nimport { deepClone } from '../../../../common/objects.js';\nimport { nodesToArrays, TestView } from './util.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../common/utils.js';\nimport { DisposableStore } from '../../../../common/lifecycle.js';\n\n// Simple example:\n//\n//  +-----+---------------+\n//  |  4  |      2        |\n//  +-----+---------+-----+\n//  |        1      |     |\n//  +---------------+  3  |\n//  |        5      |     |\n//  +---------------+-----+\n//\n//  V\n//  +-H\n//  | +-4\n//  | +-2\n//  +-H\n//    +-V\n//    | +-1\n//    | +-5\n//    +-3\n\nsuite('Grid', function () {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet container: HTMLElement;\n\n\tsetup(function () {\n\t\tcontainer = document.createElement('div');\n\t\tcontainer.style.position = 'absolute';\n\t\tcontainer.style.width = `${800}px`;\n\t\tcontainer.style.height = `${600}px`;\n\t});\n\n\ttest('getRelativeLocation', () => {\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0], Direction.Up), [0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0], Direction.Down), [1]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0], Direction.Left), [0, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0], Direction.Right), [0, 1]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.HORIZONTAL, [0], Direction.Up), [0, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.HORIZONTAL, [0], Direction.Down), [0, 1]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.HORIZONTAL, [0], Direction.Left), [0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.HORIZONTAL, [0], Direction.Right), [1]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [4], Direction.Up), [4]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [4], Direction.Down), [5]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [4], Direction.Left), [4, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [4], Direction.Right), [4, 1]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0, 0], Direction.Up), [0, 0, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0, 0], Direction.Down), [0, 0, 1]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0, 0], Direction.Left), [0, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [0, 0], Direction.Right), [0, 1]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2], Direction.Up), [1, 2, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2], Direction.Down), [1, 2, 1]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2], Direction.Left), [1, 2]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2], Direction.Right), [1, 3]);\n\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2, 3], Direction.Up), [1, 2, 3]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2, 3], Direction.Down), [1, 2, 4]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2, 3], Direction.Left), [1, 2, 3, 0]);\n\t\tassert.deepStrictEqual(getRelativeLocation(Orientation.VERTICAL, [1, 2, 3], Direction.Right), [1, 2, 3, 1]);\n\t});\n\n\ttest('empty', () => {\n\t\tconst view1 = store.add(new TestView(100, Number.MAX_VALUE, 100, Number.MAX_VALUE));\n\t\tconst gridview = store.add(new Grid(view1));\n\t\tcontainer.appendChild(gridview.element);\n\t\tgridview.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\t});\n\n\ttest('two views vertically', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\t\tassert.deepStrictEqual(view1.size, [800, 400]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t});\n\n\ttest('two views horizontally', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, 300, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [500, 600]);\n\t\tassert.deepStrictEqual(view2.size, [300, 600]);\n\t});\n\n\ttest('simple layout', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\t\tassert.deepStrictEqual(view1.size, [800, 400]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\n\t\tconst view5 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\t});\n\n\ttest('another simple layout with automatic size distribution', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Left);\n\t\tassert.deepStrictEqual(view1.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 600]);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [266, 600]);\n\t\tassert.deepStrictEqual(view2.size, [266, 600]);\n\t\tassert.deepStrictEqual(view3.size, [268, 600]);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [266, 600]);\n\t\tassert.deepStrictEqual(view2.size, [266, 300]);\n\t\tassert.deepStrictEqual(view3.size, [268, 600]);\n\t\tassert.deepStrictEqual(view4.size, [266, 300]);\n\n\t\tconst view5 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, Sizing.Distribute, view3, Direction.Up);\n\t\tassert.deepStrictEqual(view1.size, [266, 600]);\n\t\tassert.deepStrictEqual(view2.size, [266, 300]);\n\t\tassert.deepStrictEqual(view3.size, [268, 300]);\n\t\tassert.deepStrictEqual(view4.size, [266, 300]);\n\t\tassert.deepStrictEqual(view5.size, [268, 300]);\n\n\t\tconst view6 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view6, Sizing.Distribute, view3, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [266, 600]);\n\t\tassert.deepStrictEqual(view2.size, [266, 300]);\n\t\tassert.deepStrictEqual(view3.size, [268, 200]);\n\t\tassert.deepStrictEqual(view4.size, [266, 300]);\n\t\tassert.deepStrictEqual(view5.size, [268, 200]);\n\t\tassert.deepStrictEqual(view6.size, [268, 200]);\n\t});\n\n\ttest('another simple layout with split size distribution', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Left);\n\t\tassert.deepStrictEqual(view1.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 600]);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Split, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [200, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 600]);\n\t\tassert.deepStrictEqual(view3.size, [200, 600]);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Split, view2, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [200, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [200, 600]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\n\t\tconst view5 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, Sizing.Split, view3, Direction.Up);\n\t\tassert.deepStrictEqual(view1.size, [200, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [200, 300]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\t\tassert.deepStrictEqual(view5.size, [200, 300]);\n\n\t\tconst view6 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view6, Sizing.Split, view3, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [200, 600]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [200, 150]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\t\tassert.deepStrictEqual(view5.size, [200, 300]);\n\t\tassert.deepStrictEqual(view6.size, [200, 150]);\n\t});\n\n\ttest('3/2 layout with split', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Down);\n\t\tassert.deepStrictEqual(view1.size, [800, 300]);\n\t\tassert.deepStrictEqual(view2.size, [800, 300]);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Split, view2, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [800, 300]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Split, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [400, 300]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\n\t\tconst view5 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, Sizing.Split, view1, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [200, 300]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\t\tassert.deepStrictEqual(view5.size, [200, 300]);\n\t});\n\n\ttest('sizing should be correct after branch demotion #50564', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Right);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Split, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Split, view2, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2.size, [200, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t\tassert.deepStrictEqual(view4.size, [200, 300]);\n\n\t\tgrid.removeView(view3);\n\t\tassert.deepStrictEqual(view1.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2.size, [200, 600]);\n\t\tassert.deepStrictEqual(view4.size, [200, 600]);\n\t});\n\n\ttest('sizing should be correct after branch demotion #50675', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Down);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Distribute, view3, Direction.Right);\n\t\tassert.deepStrictEqual(view1.size, [800, 200]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(view3.size, [400, 200]);\n\t\tassert.deepStrictEqual(view4.size, [400, 200]);\n\n\t\tgrid.removeView(view3, Sizing.Distribute);\n\t\tassert.deepStrictEqual(view1.size, [800, 200]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(view4.size, [800, 200]);\n\t});\n\n\ttest('getNeighborViews should work on single view layout', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left), []);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left, true), [view1]);\n\t});\n\n\ttest('getNeighborViews should work on simple layout', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Down);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left), []);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up, true), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down, true), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left, true), [view1]);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Up), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Down), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Left), []);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Up, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Right, true), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Down, true), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Left, true), [view2]);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Up), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Down), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Left), []);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Up, true), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Right, true), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Down, true), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Left, true), [view3]);\n\t});\n\n\ttest('getNeighborViews should work on a complex layout', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Down);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tconst view5 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, Sizing.Distribute, view4, Direction.Down);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Up), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Down), [view2, view4]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Left), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Up), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Right), [view4, view5]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Down), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view2, Direction.Left), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Up), [view1]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Down), [view5]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Left), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view5, Direction.Up), [view4]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view5, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view5, Direction.Down), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view5, Direction.Left), [view2]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Up), [view2, view5]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Down), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view3, Direction.Left), []);\n\t});\n\n\ttest('getNeighborViews should work on another simple layout', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Right);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Up), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Right), []);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Down), [view3]);\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view4, Direction.Left), [view2]);\n\t});\n\n\ttest('getNeighborViews should only return immediate neighbors', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Right);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tassert.deepStrictEqual(grid.getNeighborViews(view1, Direction.Right), [view2, view3]);\n\t});\n\n\ttest('hiding splitviews and restoring sizes', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Right);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tconst size1 = view1.size;\n\t\tconst size2 = view2.size;\n\t\tconst size3 = view3.size;\n\t\tconst size4 = view4.size;\n\n\t\tgrid.maximizeView(view1);\n\n\t\t// Views 2, 3, 4 are hidden\n\t\t// Splitview (2,4) and ((2,4),3) are hidden\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\t\tassert.deepStrictEqual(view2.size, [0, 0]);\n\t\tassert.deepStrictEqual(view3.size, [0, 0]);\n\t\tassert.deepStrictEqual(view4.size, [0, 0]);\n\n\t\tgrid.exitMaximizedView();\n\n\t\tassert.deepStrictEqual(view1.size, size1);\n\t\tassert.deepStrictEqual(view2.size, size2);\n\t\tassert.deepStrictEqual(view3.size, size3);\n\t\tassert.deepStrictEqual(view4.size, size4);\n\n\t\t// Views 1, 3, 4 are hidden\n\t\t// All splitviews are still visible => only orthogonalsize is 0\n\t\tgrid.maximizeView(view2);\n\n\t\tassert.deepStrictEqual(view1.size, [0, 600]);\n\t\tassert.deepStrictEqual(view2.size, [800, 600]);\n\t\tassert.deepStrictEqual(view3.size, [800, 0]);\n\t\tassert.deepStrictEqual(view4.size, [0, 600]);\n\n\t\tgrid.exitMaximizedView();\n\n\t\tassert.deepStrictEqual(view1.size, size1);\n\t\tassert.deepStrictEqual(view2.size, size2);\n\t\tassert.deepStrictEqual(view3.size, size3);\n\t\tassert.deepStrictEqual(view4.size, size4);\n\t});\n\n\ttest('hasMaximizedView', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Right);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tfunction checkIsMaximized(view: TestView) {\n\t\t\tgrid.maximizeView(view);\n\n\t\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\n\t\t\t// When a view is maximized, no view can be expanded even if it is maximized\n\t\t\tassert.deepStrictEqual(grid.isViewExpanded(view1), false);\n\t\t\tassert.deepStrictEqual(grid.isViewExpanded(view2), false);\n\t\t\tassert.deepStrictEqual(grid.isViewExpanded(view3), false);\n\t\t\tassert.deepStrictEqual(grid.isViewExpanded(view4), false);\n\n\t\t\tgrid.exitMaximizedView();\n\n\t\t\tassert.deepStrictEqual(grid.hasMaximizedView(), false);\n\t\t}\n\n\t\tcheckIsMaximized(view1);\n\t\tcheckIsMaximized(view2);\n\t\tcheckIsMaximized(view3);\n\t\tcheckIsMaximized(view4);\n\t});\n\n\ttest('Changes to the grid unmaximize the view', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Right);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\n\t\t// Adding a view unmaximizes the view\n\t\tgrid.maximizeView(view1);\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), false);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view1), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view2), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view3), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view4), true);\n\n\t\t// Removing a view unmaximizes the view\n\t\tgrid.maximizeView(view1);\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\t\tgrid.removeView(view4);\n\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), false);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view1), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view2), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view3), true);\n\n\t\t// Changing the visibility of any view while a view is maximized, unmaximizes the view\n\t\tgrid.maximizeView(view1);\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\t\tgrid.setViewVisible(view3, true);\n\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), false);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view1), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view2), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view3), true);\n\t});\n\n\ttest('Changes to the grid sizing unmaximize the view', function () {\n\t\tconst view1 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new Grid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Distribute, view1, Direction.Right);\n\n\t\tconst view3 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Distribute, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestView(50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Distribute, view2, Direction.Right);\n\n\t\t// Maximizing a different view unmaximizes the current one and maximizes the new one\n\t\tgrid.maximizeView(view1);\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\t\tgrid.maximizeView(view2);\n\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view1), false);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view2), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view3), false);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view4), false);\n\n\t\t// Distributing the size unmaximizes the view\n\t\tgrid.maximizeView(view1);\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\t\tgrid.distributeViewSizes();\n\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), false);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view1), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view2), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view3), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view4), true);\n\n\t\t// Expanding a different view unmaximizes the view\n\t\tgrid.maximizeView(view1);\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\t\tgrid.expandView(view2);\n\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), false);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view1), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view2), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view3), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view4), true);\n\n\t\t// Expanding the maximized view unmaximizes the view\n\t\tgrid.maximizeView(view1);\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), true);\n\t\tgrid.expandView(view1);\n\n\t\tassert.deepStrictEqual(grid.hasMaximizedView(), false);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view1), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view2), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view3), true);\n\t\tassert.deepStrictEqual(grid.isViewVisible(view4), true);\n\t});\n});\n\nclass TestSerializableView extends TestView implements ISerializableView {\n\n\tconstructor(\n\t\treadonly name: string,\n\t\tminimumWidth: number,\n\t\tmaximumWidth: number,\n\t\tminimumHeight: number,\n\t\tmaximumHeight: number\n\t) {\n\t\tsuper(minimumWidth, maximumWidth, minimumHeight, maximumHeight);\n\t}\n\n\ttoJSON() {\n\t\treturn { name: this.name };\n\t}\n}\n\nclass TestViewDeserializer implements IViewDeserializer<TestSerializableView> {\n\n\tprivate views = new Map<string, TestSerializableView>();\n\n\tconstructor(private readonly store: Pick<DisposableStore, 'add'>) { }\n\n\tfromJSON(json: any): TestSerializableView {\n\t\tconst view = this.store.add(new TestSerializableView(json.name, 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tthis.views.set(json.name, view);\n\t\treturn view;\n\t}\n\n\tgetView(id: string): TestSerializableView {\n\t\tconst view = this.views.get(id);\n\t\tif (!view) {\n\t\t\tthrow new Error('Unknown view');\n\t\t}\n\t\treturn view;\n\t}\n}\n\nfunction nodesToNames(node: GridNode<TestSerializableView>): any {\n\tif (isGridBranchNode(node)) {\n\t\treturn node.children.map(nodesToNames);\n\t} else {\n\t\treturn node.view.name;\n\t}\n}\n\nsuite('SerializableGrid', function () {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet container: HTMLElement;\n\n\tsetup(function () {\n\t\tcontainer = document.createElement('div');\n\t\tcontainer.style.position = 'absolute';\n\t\tcontainer.style.width = `${800}px`;\n\t\tcontainer.style.height = `${600}px`;\n\t});\n\n\ttest('serialize empty', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst actual = grid.serialize();\n\t\tassert.deepStrictEqual(actual, {\n\t\t\torientation: 0,\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'leaf',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tname: 'view1',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsize: 600\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsize: 800\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('serialize simple layout', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = store.add(new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = store.add(new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = store.add(new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tassert.deepStrictEqual(grid.serialize(), {\n\t\t\torientation: 0,\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view4' }, size: 200 },\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view2' }, size: 600 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 200\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view1' }, size: 300 },\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view5' }, size: 100 }\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tsize: 600\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view3' }, size: 200 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 400\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsize: 800\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('deserialize empty', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer(store);\n\t\tconst grid2 = store.add(SerializableGrid.deserialize(json, deserializer));\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(nodesToNames(grid2.getViews()), ['view1']);\n\t});\n\n\ttest('deserialize simple layout', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = store.add(new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = store.add(new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = store.add(new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer(store);\n\t\tconst grid2 = store.add(SerializableGrid.deserialize(json, deserializer));\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\t\tconst view5Copy = deserializer.getView('view5');\n\n\t\tassert.deepStrictEqual(nodesToArrays(grid2.getViews()), [[view4Copy, view2Copy], [[view1Copy, view5Copy], view3Copy]]);\n\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 100]);\n\t});\n\n\ttest('deserialize simple layout with scaling', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = store.add(new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = store.add(new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = store.add(new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer(store);\n\t\tconst grid2 = store.add(SerializableGrid.deserialize(json, deserializer));\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\t\tconst view5Copy = deserializer.getView('view5');\n\n\t\tgrid2.layout(400, 800); // [/2, *4/3]\n\t\tassert.deepStrictEqual(view1Copy.size, [300, 400]);\n\t\tassert.deepStrictEqual(view2Copy.size, [300, 267]);\n\t\tassert.deepStrictEqual(view3Copy.size, [100, 533]);\n\t\tassert.deepStrictEqual(view4Copy.size, [100, 267]);\n\t\tassert.deepStrictEqual(view5Copy.size, [300, 133]);\n\t});\n\n\ttest('deserialize 4 view layout (ben issue #2)', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Down);\n\n\t\tconst view3 = store.add(new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Split, view2, Direction.Down);\n\n\t\tconst view4 = store.add(new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, Sizing.Split, view3, Direction.Right);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer(store);\n\t\tconst grid2 = store.add(SerializableGrid.deserialize(json, deserializer));\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [800, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [800, 150]);\n\t\tassert.deepStrictEqual(view3Copy.size, [400, 150]);\n\t\tassert.deepStrictEqual(view4Copy.size, [400, 150]);\n\t});\n\n\ttest('deserialize 2 view layout (ben issue #3)', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Right);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer(store);\n\t\tconst grid2 = store.add(SerializableGrid.deserialize(json, deserializer));\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [400, 600]);\n\t\tassert.deepStrictEqual(view2Copy.size, [400, 600]);\n\t});\n\n\ttest('deserialize simple view layout #50609', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, Sizing.Split, view1, Direction.Right);\n\n\t\tconst view3 = store.add(new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, Sizing.Split, view2, Direction.Down);\n\n\t\tgrid.removeView(view1, Sizing.Split);\n\n\t\tconst json = grid.serialize();\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer(store);\n\t\tconst grid2 = store.add(SerializableGrid.deserialize(json, deserializer));\n\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\n\t\tgrid2.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view2Copy.size, [800, 300]);\n\t\tassert.deepStrictEqual(view3Copy.size, [800, 300]);\n\t});\n\n\ttest('sanitizeGridNodeDescriptor', () => {\n\t\tconst nodeDescriptor: GridNodeDescriptor<any> = { groups: [{ size: 0.2 }, { size: 0.2 }, { size: 0.6, groups: [{}, {}] }] };\n\t\tconst nodeDescriptorCopy = deepClone(nodeDescriptor);\n\t\tsanitizeGridNodeDescriptor(nodeDescriptorCopy, true);\n\t\tassert.deepStrictEqual(nodeDescriptorCopy, { groups: [{ size: 0.2 }, { size: 0.2 }, { size: 0.6, groups: [{ size: 0.5 }, { size: 0.5 }] }] });\n\t});\n\n\ttest('createSerializedGrid', () => {\n\t\tconst gridDescriptor = { orientation: Orientation.VERTICAL, groups: [{ size: 0.2, data: 'a' }, { size: 0.2, data: 'b' }, { size: 0.6, groups: [{ data: 'c' }, { data: 'd' }] }] };\n\t\tconst serializedGrid = createSerializedGrid(gridDescriptor);\n\t\tassert.deepStrictEqual(serializedGrid, {\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tsize: undefined,\n\t\t\t\tdata: [\n\t\t\t\t\t{ type: 'leaf', size: 0.2, data: 'a' },\n\t\t\t\t\t{ type: 'leaf', size: 0.2, data: 'b' },\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch', size: 0.6, data: [\n\t\t\t\t\t\t\t{ type: 'leaf', size: 0.5, data: 'c' },\n\t\t\t\t\t\t\t{ type: 'leaf', size: 0.5, data: 'd' }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\torientation: Orientation.VERTICAL,\n\t\t\twidth: 1,\n\t\t\theight: 1\n\t\t});\n\t});\n\n\ttest('createSerializedGrid - issue #85601, should not allow single children groups', () => {\n\t\tconst serializedGrid = createSerializedGrid({ orientation: Orientation.HORIZONTAL, groups: [{ groups: [{}, {}], size: 0.5 }, { groups: [{}], size: 0.5 }] });\n\t\tconst views: ISerializableView[] = [];\n\t\tconst deserializer = new class implements IViewDeserializer<ISerializableView> {\n\t\t\tfromJSON(): ISerializableView {\n\t\t\t\tconst view: ISerializableView = {\n\t\t\t\t\telement: document.createElement('div'),\n\t\t\t\t\tlayout: () => null,\n\t\t\t\t\tminimumWidth: 0,\n\t\t\t\t\tmaximumWidth: Number.POSITIVE_INFINITY,\n\t\t\t\t\tminimumHeight: 0,\n\t\t\t\t\tmaximumHeight: Number.POSITIVE_INFINITY,\n\t\t\t\t\tonDidChange: Event.None,\n\t\t\t\t\ttoJSON: () => ({})\n\t\t\t\t};\n\t\t\t\tviews.push(view);\n\t\t\t\treturn view;\n\t\t\t}\n\t\t};\n\n\t\tconst grid = store.add(SerializableGrid.deserialize(serializedGrid, deserializer));\n\t\tassert.strictEqual(views.length, 3);\n\n\t\t// should not throw\n\t\tgrid.removeView(views[2]);\n\t});\n\n\ttest('from', () => {\n\t\tconst createView = (): ISerializableView => ({\n\t\t\telement: document.createElement('div'),\n\t\t\tlayout: () => null,\n\t\t\tminimumWidth: 0,\n\t\t\tmaximumWidth: Number.POSITIVE_INFINITY,\n\t\t\tminimumHeight: 0,\n\t\t\tmaximumHeight: Number.POSITIVE_INFINITY,\n\t\t\tonDidChange: Event.None,\n\t\t\ttoJSON: () => ({})\n\t\t});\n\n\t\tconst a = createView();\n\t\tconst b = createView();\n\t\tconst c = createView();\n\t\tconst d = createView();\n\n\t\tconst gridDescriptor = { orientation: Orientation.VERTICAL, groups: [{ size: 0.2, data: a }, { size: 0.2, data: b }, { size: 0.6, groups: [{ data: c }, { data: d }] }] };\n\t\tconst grid = SerializableGrid.from(gridDescriptor);\n\n\t\tassert.deepStrictEqual(nodesToArrays(grid.getViews()), [a, b, [c, d]]);\n\t\tgrid.dispose();\n\t});\n\n\ttest('serialize should store visibility and previous size', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = store.add(new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = store.add(new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = store.add(new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\n\t\tgrid.setViewVisible(view5, false);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 0]);\n\n\t\tgrid.setViewVisible(view5, true);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\n\t\tgrid.setViewVisible(view5, false);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 0]);\n\n\t\tgrid.setViewVisible(view5, false);\n\n\t\tconst json = grid.serialize();\n\t\tassert.deepStrictEqual(json, {\n\t\t\torientation: 0,\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view4' }, size: 200 },\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view2' }, size: 600 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 200\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view1' }, size: 400 },\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view5' }, size: 100, visible: false }\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tsize: 600\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view3' }, size: 200 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 400\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsize: 800\n\t\t\t}\n\t\t});\n\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer(store);\n\t\tconst grid2 = store.add(SerializableGrid.deserialize(json, deserializer));\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\t\tconst view5Copy = deserializer.getView('view5');\n\n\t\tassert.deepStrictEqual(nodesToArrays(grid2.getViews()), [[view4Copy, view2Copy], [[view1Copy, view5Copy], view3Copy]]);\n\n\t\tgrid2.layout(800, 600);\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 400]);\n\t\tassert.deepStrictEqual(view2Copy.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 0]);\n\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view1Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view2Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view3Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view4Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view5Copy), false);\n\n\t\tgrid2.setViewVisible(view5Copy, true);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 100]);\n\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view1Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view2Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view3Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view4Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view5Copy), true);\n\t});\n\n\ttest('serialize should store visibility and previous size even for first leaf', function () {\n\t\tconst view1 = store.add(new TestSerializableView('view1', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tconst grid = store.add(new SerializableGrid(view1));\n\t\tcontainer.appendChild(grid.element);\n\t\tgrid.layout(800, 600);\n\n\t\tconst view2 = store.add(new TestSerializableView('view2', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view2, 200, view1, Direction.Up);\n\n\t\tconst view3 = store.add(new TestSerializableView('view3', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view3, 200, view1, Direction.Right);\n\n\t\tconst view4 = store.add(new TestSerializableView('view4', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view4, 200, view2, Direction.Left);\n\n\t\tconst view5 = store.add(new TestSerializableView('view5', 50, Number.MAX_VALUE, 50, Number.MAX_VALUE));\n\t\tgrid.addView(view5, 100, view1, Direction.Down);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\n\t\tgrid.setViewVisible(view4, false);\n\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4.size, [0, 200]);\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\n\t\tconst json = grid.serialize();\n\t\tassert.deepStrictEqual(json, {\n\t\t\torientation: 0,\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\troot: {\n\t\t\t\ttype: 'branch',\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view4' }, size: 200, visible: false },\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view2' }, size: 800 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 200\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'branch',\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view1' }, size: 300 },\n\t\t\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view5' }, size: 100 }\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tsize: 600\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ type: 'leaf', data: { name: 'view3' }, size: 200 }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tsize: 400\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsize: 800\n\t\t\t}\n\t\t});\n\n\t\tgrid.dispose();\n\n\t\tconst deserializer = new TestViewDeserializer(store);\n\t\tconst grid2 = store.add(SerializableGrid.deserialize(json, deserializer));\n\n\t\tconst view1Copy = deserializer.getView('view1');\n\t\tconst view2Copy = deserializer.getView('view2');\n\t\tconst view3Copy = deserializer.getView('view3');\n\t\tconst view4Copy = deserializer.getView('view4');\n\t\tconst view5Copy = deserializer.getView('view5');\n\n\t\tassert.deepStrictEqual(nodesToArrays(grid2.getViews()), [[view4Copy, view2Copy], [[view1Copy, view5Copy], view3Copy]]);\n\n\t\tgrid2.layout(800, 600);\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [800, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [0, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 100]);\n\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view1Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view2Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view3Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view4Copy), false);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view5Copy), true);\n\n\t\tgrid2.setViewVisible(view4Copy, true);\n\n\t\tassert.deepStrictEqual(view1Copy.size, [600, 300]);\n\t\tassert.deepStrictEqual(view2Copy.size, [600, 200]);\n\t\tassert.deepStrictEqual(view3Copy.size, [200, 400]);\n\t\tassert.deepStrictEqual(view4Copy.size, [200, 200]);\n\t\tassert.deepStrictEqual(view5Copy.size, [600, 100]);\n\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view1Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view2Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view3Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view4Copy), true);\n\t\tassert.deepStrictEqual(grid2.isViewVisible(view5Copy), true);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
