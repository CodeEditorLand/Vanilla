{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/ui/tree/asyncDataTree.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IIdentityProvider, IListVirtualDelegate } from '../../../../browser/ui/list/list.js';\nimport { AsyncDataTree, CompressibleAsyncDataTree, ITreeCompressionDelegate } from '../../../../browser/ui/tree/asyncDataTree.js';\nimport { ICompressedTreeNode } from '../../../../browser/ui/tree/compressedObjectTreeModel.js';\nimport { ICompressibleTreeRenderer } from '../../../../browser/ui/tree/objectTree.js';\nimport { IAsyncDataSource, ITreeNode } from '../../../../browser/ui/tree/tree.js';\nimport { timeout } from '../../../../common/async.js';\nimport { Iterable } from '../../../../common/iterator.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../common/utils.js';\n\ninterface Element {\n\tid: string;\n\tsuffix?: string;\n\tchildren?: Element[];\n}\n\nfunction find(element: Element, id: string): Element | undefined {\n\tif (element.id === id) {\n\t\treturn element;\n\t}\n\n\tif (!element.children) {\n\t\treturn undefined;\n\t}\n\n\tfor (const child of element.children) {\n\t\tconst result = find(child, id);\n\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nclass Renderer implements ICompressibleTreeRenderer<Element, void, HTMLElement> {\n\treadonly templateId = 'default';\n\trenderTemplate(container: HTMLElement): HTMLElement {\n\t\treturn container;\n\t}\n\trenderElement(element: ITreeNode<Element, void>, index: number, templateData: HTMLElement): void {\n\t\ttemplateData.textContent = element.element.id + (element.element.suffix || '');\n\t}\n\tdisposeTemplate(templateData: HTMLElement): void {\n\t\t// noop\n\t}\n\trenderCompressedElements(node: ITreeNode<ICompressedTreeNode<Element>, void>, index: number, templateData: HTMLElement, height: number | undefined): void {\n\t\tconst result: string[] = [];\n\n\t\tfor (const element of node.element.elements) {\n\t\t\tresult.push(element.id + (element.suffix || ''));\n\t\t}\n\n\t\ttemplateData.textContent = result.join('/');\n\t}\n}\n\nclass IdentityProvider implements IIdentityProvider<Element> {\n\tgetId(element: Element) {\n\t\treturn element.id;\n\t}\n}\n\nclass VirtualDelegate implements IListVirtualDelegate<Element> {\n\tgetHeight() { return 20; }\n\tgetTemplateId(element: Element): string { return 'default'; }\n}\n\nclass DataSource implements IAsyncDataSource<Element, Element> {\n\thasChildren(element: Element): boolean {\n\t\treturn !!element.children && element.children.length > 0;\n\t}\n\tgetChildren(element: Element): Promise<Element[]> {\n\t\treturn Promise.resolve(element.children || []);\n\t}\n}\n\nclass Model {\n\n\tconstructor(readonly root: Element) { }\n\n\tget(id: string): Element {\n\t\tconst result = find(this.root, id);\n\n\t\tif (!result) {\n\t\t\tthrow new Error('element not found');\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nsuite('AsyncDataTree', function () {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Collapse state should be preserved across refresh calls', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a'\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], new DataSource(), { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\t\tassert.strictEqual(container.querySelectorAll('.monaco-list-row').length, 0);\n\n\t\tawait tree.setInput(model.root);\n\t\tassert.strictEqual(container.querySelectorAll('.monaco-list-row').length, 1);\n\t\tconst twistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(!twistie.classList.contains('collapsible'));\n\t\tassert(!twistie.classList.contains('collapsed'));\n\n\t\tmodel.get('a').children = [\n\t\t\t{ id: 'aa' },\n\t\t\t{ id: 'ab' },\n\t\t\t{ id: 'ac' }\n\t\t];\n\n\t\tawait tree.updateChildren(model.root);\n\t\tassert.strictEqual(container.querySelectorAll('.monaco-list-row').length, 1);\n\n\t\tawait tree.expand(model.get('a'));\n\t\tassert.strictEqual(container.querySelectorAll('.monaco-list-row').length, 4);\n\n\t\tmodel.get('a').children = [];\n\t\tawait tree.updateChildren(model.root);\n\t\tassert.strictEqual(container.querySelectorAll('.monaco-list-row').length, 1);\n\t});\n\n\ttest('issue #68648', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst getChildrenCalls: string[] = [];\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tgetChildren(element: Element): Promise<Element[]> {\n\t\t\t\tgetChildrenCalls.push(element.id);\n\t\t\t\treturn Promise.resolve(element.children || []);\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a'\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], dataSource, { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root']);\n\n\t\tlet twistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(!twistie.classList.contains('collapsible'));\n\t\tassert(!twistie.classList.contains('collapsed'));\n\t\tassert(tree.getNode().children[0].collapsed);\n\n\t\tmodel.get('a').children = [{ id: 'aa' }, { id: 'ab' }, { id: 'ac' }];\n\t\tawait tree.updateChildren(model.root);\n\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root', 'root']);\n\t\ttwistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(twistie.classList.contains('collapsible'));\n\t\tassert(twistie.classList.contains('collapsed'));\n\t\tassert(tree.getNode().children[0].collapsed);\n\n\t\tmodel.get('a').children = [];\n\t\tawait tree.updateChildren(model.root);\n\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root', 'root', 'root']);\n\t\ttwistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(!twistie.classList.contains('collapsible'));\n\t\tassert(!twistie.classList.contains('collapsed'));\n\t\tassert(tree.getNode().children[0].collapsed);\n\n\t\tmodel.get('a').children = [{ id: 'aa' }, { id: 'ab' }, { id: 'ac' }];\n\t\tawait tree.updateChildren(model.root);\n\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root', 'root', 'root', 'root']);\n\t\ttwistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(twistie.classList.contains('collapsible'));\n\t\tassert(twistie.classList.contains('collapsed'));\n\t\tassert(tree.getNode().children[0].collapsed);\n\t});\n\n\ttest('issue #67722 - once resolved, refreshed collapsed nodes should only get children when expanded', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst getChildrenCalls: string[] = [];\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tgetChildren(element: Element): Promise<Element[]> {\n\t\t\t\tgetChildrenCalls.push(element.id);\n\t\t\t\treturn Promise.resolve(element.children || []);\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{ id: 'aa' }, { id: 'ab' }, { id: 'ac' }]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], dataSource, { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tassert(tree.getNode(model.get('a')).collapsed);\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root']);\n\n\t\tawait tree.expand(model.get('a'));\n\t\tassert(!tree.getNode(model.get('a')).collapsed);\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root', 'a']);\n\n\t\ttree.collapse(model.get('a'));\n\t\tassert(tree.getNode(model.get('a')).collapsed);\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root', 'a']);\n\n\t\tawait tree.updateChildren();\n\t\tassert(tree.getNode(model.get('a')).collapsed);\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root', 'a', 'root'], 'a should not be refreshed, since it\\' collapsed');\n\t});\n\n\ttest('resolved collapsed nodes which lose children should lose twistie as well', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{ id: 'aa' }, { id: 'ab' }, { id: 'ac' }]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], new DataSource(), { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tawait tree.expand(model.get('a'));\n\n\t\tlet twistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(twistie.classList.contains('collapsible'));\n\t\tassert(!twistie.classList.contains('collapsed'));\n\t\tassert(!tree.getNode(model.get('a')).collapsed);\n\n\t\ttree.collapse(model.get('a'));\n\t\tmodel.get('a').children = [];\n\t\tawait tree.updateChildren(model.root);\n\n\t\ttwistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(!twistie.classList.contains('collapsible'));\n\t\tassert(!twistie.classList.contains('collapsed'));\n\t\tassert(tree.getNode(model.get('a')).collapsed);\n\t});\n\n\ttest('issue #192422 - resolved collapsed nodes with changed children don\\'t show old children', async () => {\n\t\tconst container = document.createElement('div');\n\t\tlet hasGottenAChildren = false;\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tasync getChildren(element: Element): Promise<Element[]> {\n\t\t\t\tif (element.id === 'a') {\n\t\t\t\t\tif (!hasGottenAChildren) {\n\t\t\t\t\t\thasGottenAChildren = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [{ id: 'c' }];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn element.children || [];\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{ id: 'b' }]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], dataSource, { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tconst a = model.get('a');\n\t\tconst aNode = tree.getNode(a);\n\t\tassert(aNode.collapsed);\n\t\tawait tree.expand(a);\n\t\tassert(!aNode.collapsed);\n\t\tassert.equal(aNode.children.length, 1);\n\t\tassert.equal(aNode.children[0].element.id, 'b');\n\t\tconst bChild = container.querySelector('.monaco-list-row:nth-child(2)') as HTMLElement | undefined;\n\t\tassert.equal(bChild?.textContent, 'b');\n\t\ttree.collapse(a);\n\t\tassert(aNode.collapsed);\n\n\t\tawait tree.updateChildren(a);\n\t\tconst aUpdated1 = model.get('a');\n\t\tconst aNodeUpdated1 = tree.getNode(a);\n\t\tassert(aNodeUpdated1.collapsed);\n\t\tassert.equal(aNodeUpdated1.children.length, 0);\n\t\tlet didCheckNoChildren = false;\n\t\tconst event = tree.onDidChangeCollapseState(e => {\n\t\t\tconst child = container.querySelector('.monaco-list-row:nth-child(2)') as HTMLElement | undefined;\n\t\t\tassert.equal(child, undefined);\n\t\t\tdidCheckNoChildren = true;\n\t\t});\n\t\tawait tree.expand(aUpdated1);\n\t\tevent.dispose();\n\t\tassert(didCheckNoChildren);\n\n\t\tconst aNodeUpdated2 = tree.getNode(a);\n\t\tassert(!aNodeUpdated2.collapsed);\n\t\tassert.equal(aNodeUpdated2.children.length, 1);\n\t\tassert.equal(aNodeUpdated2.children[0].element.id, 'c');\n\t\tconst child = container.querySelector('.monaco-list-row:nth-child(2)') as HTMLElement | undefined;\n\t\tassert.equal(child?.textContent, 'c');\n\t});\n\n\ttest('issue #192422 - resolved collapsed nodes with unchanged children immediately show children', async () => {\n\t\tconst container = document.createElement('div');\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tasync getChildren(element: Element): Promise<Element[]> {\n\t\t\t\treturn element.children || [];\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{ id: 'b' }]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], dataSource, { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tconst a = model.get('a');\n\t\tconst aNode = tree.getNode(a);\n\t\tassert(aNode.collapsed);\n\t\tawait tree.expand(a);\n\t\tassert(!aNode.collapsed);\n\t\tassert.equal(aNode.children.length, 1);\n\t\tassert.equal(aNode.children[0].element.id, 'b');\n\t\tconst bChild = container.querySelector('.monaco-list-row:nth-child(2)') as HTMLElement | undefined;\n\t\tassert.equal(bChild?.textContent, 'b');\n\t\ttree.collapse(a);\n\t\tassert(aNode.collapsed);\n\n\t\tconst aUpdated1 = model.get('a');\n\t\tconst aNodeUpdated1 = tree.getNode(a);\n\t\tassert(aNodeUpdated1.collapsed);\n\t\tassert.equal(aNodeUpdated1.children.length, 1);\n\t\tlet didCheckSameChildren = false;\n\t\tconst event = tree.onDidChangeCollapseState(e => {\n\t\t\tconst child = container.querySelector('.monaco-list-row:nth-child(2)') as HTMLElement | undefined;\n\t\t\tassert.equal(child?.textContent, 'b');\n\t\t\tdidCheckSameChildren = true;\n\t\t});\n\t\tawait tree.expand(aUpdated1);\n\t\tevent.dispose();\n\t\tassert(didCheckSameChildren);\n\n\t\tconst aNodeUpdated2 = tree.getNode(a);\n\t\tassert(!aNodeUpdated2.collapsed);\n\t\tassert.equal(aNodeUpdated2.children.length, 1);\n\t\tassert.equal(aNodeUpdated2.children[0].element.id, 'b');\n\t\tconst child = container.querySelector('.monaco-list-row:nth-child(2)') as HTMLElement | undefined;\n\t\tassert.equal(child?.textContent, 'b');\n\t});\n\n\ttest('support default collapse state per element', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst getChildrenCalls: string[] = [];\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tgetChildren(element: Element): Promise<Element[]> {\n\t\t\t\tgetChildrenCalls.push(element.id);\n\t\t\t\treturn Promise.resolve(element.children || []);\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{ id: 'aa' }, { id: 'ab' }, { id: 'ac' }]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], dataSource, {\n\t\t\tcollapseByDefault: el => el.id !== 'a'\n\t\t}));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tassert(!tree.getNode(model.get('a')).collapsed);\n\t\tassert.deepStrictEqual(getChildrenCalls, ['root', 'a']);\n\t});\n\n\ttest('issue #80098 - concurrent refresh and expand', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst calls: Function[] = [];\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tgetChildren(element: Element): Promise<Element[]> {\n\t\t\t\treturn new Promise(c => calls.push(() => c(element.children || [])));\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{\n\t\t\t\t\tid: 'aa'\n\t\t\t\t}]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], dataSource, { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tconst pSetInput = tree.setInput(model.root);\n\t\tcalls.pop()!(); // resolve getChildren(root)\n\t\tawait pSetInput;\n\n\t\tconst pUpdateChildrenA = tree.updateChildren(model.get('a'));\n\t\tconst pExpandA = tree.expand(model.get('a'));\n\t\tassert.strictEqual(calls.length, 1, 'expand(a) still hasn\\'t called getChildren(a)');\n\n\t\tcalls.pop()!();\n\t\tassert.strictEqual(calls.length, 0, 'no pending getChildren calls');\n\n\t\tawait pUpdateChildrenA;\n\t\tassert.strictEqual(calls.length, 0, 'expand(a) should not have forced a second refresh');\n\n\t\tconst result = await pExpandA;\n\t\tassert.strictEqual(result, true, 'expand(a) should be done');\n\t});\n\n\ttest('issue #80098 - first expand should call getChildren', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst calls: Function[] = [];\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tgetChildren(element: Element): Promise<Element[]> {\n\t\t\t\treturn new Promise(c => calls.push(() => c(element.children || [])));\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{\n\t\t\t\t\tid: 'aa'\n\t\t\t\t}]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], dataSource, { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tconst pSetInput = tree.setInput(model.root);\n\t\tcalls.pop()!(); // resolve getChildren(root)\n\t\tawait pSetInput;\n\n\t\tconst pExpandA = tree.expand(model.get('a'));\n\t\tassert.strictEqual(calls.length, 1, 'expand(a) should\\'ve called getChildren(a)');\n\n\t\tlet race = await Promise.race([pExpandA.then(() => 'expand'), timeout(1).then(() => 'timeout')]);\n\t\tassert.strictEqual(race, 'timeout', 'expand(a) should not be yet done');\n\n\t\tcalls.pop()!();\n\t\tassert.strictEqual(calls.length, 0, 'no pending getChildren calls');\n\n\t\trace = await Promise.race([pExpandA.then(() => 'expand'), timeout(1).then(() => 'timeout')]);\n\t\tassert.strictEqual(race, 'expand', 'expand(a) should now be done');\n\t});\n\n\ttest('issue #78388 - tree should react to hasChildren toggles', async () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a'\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], new DataSource(), { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tassert.strictEqual(container.querySelectorAll('.monaco-list-row').length, 1);\n\n\t\tlet twistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(!twistie.classList.contains('collapsible'));\n\t\tassert(!twistie.classList.contains('collapsed'));\n\n\t\tmodel.get('a').children = [{ id: 'aa' }];\n\t\tawait tree.updateChildren(model.get('a'), false);\n\t\tassert.strictEqual(container.querySelectorAll('.monaco-list-row').length, 1);\n\t\ttwistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(twistie.classList.contains('collapsible'));\n\t\tassert(twistie.classList.contains('collapsed'));\n\n\t\tmodel.get('a').children = [];\n\t\tawait tree.updateChildren(model.get('a'), false);\n\t\tassert.strictEqual(container.querySelectorAll('.monaco-list-row').length, 1);\n\t\ttwistie = container.querySelector('.monaco-list-row:first-child .monaco-tl-twistie') as HTMLElement;\n\t\tassert(!twistie.classList.contains('collapsible'));\n\t\tassert(!twistie.classList.contains('collapsed'));\n\t});\n\n\ttest('issues #84569, #82629 - rerender', async () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a',\n\t\t\t\tchildren: [{\n\t\t\t\t\tid: 'b',\n\t\t\t\t\tsuffix: '1'\n\t\t\t\t}]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], new DataSource(), { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tawait tree.expand(model.get('a'));\n\t\tassert.deepStrictEqual(Array.from(container.querySelectorAll('.monaco-list-row')).map(e => e.textContent), ['a', 'b1']);\n\n\t\tconst a = model.get('a');\n\t\tconst b = model.get('b');\n\t\ta.children?.splice(0, 1, { id: 'b', suffix: '2' });\n\n\t\tawait Promise.all([\n\t\t\ttree.updateChildren(a, true, true),\n\t\t\ttree.updateChildren(b, true, true)\n\t\t]);\n\n\t\tassert.deepStrictEqual(Array.from(container.querySelectorAll('.monaco-list-row')).map(e => e.textContent), ['a', 'b2']);\n\t});\n\n\ttest('issue #199264 - dispose during render', async () => {\n\t\tconst container = document.createElement('div');\n\t\tconst model1 = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{ id: 'aa' }, { id: 'ab' }, { id: 'ac' }]\n\t\t\t}]\n\t\t});\n\t\tconst model2 = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{ id: 'aa' }, { id: 'ab' }, { id: 'ac' }]\n\t\t\t}]\n\t\t});\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], new DataSource(), { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model1.root);\n\t\tconst input = tree.setInput(model2.root);\n\t\ttree.dispose();\n\t\tawait input;\n\t\tassert.strictEqual(container.innerHTML, '');\n\t});\n\n\ttest('issue #121567', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst calls: Element[] = [];\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tasync getChildren(element: Element) {\n\t\t\t\tcalls.push(element);\n\t\t\t\treturn element.children ?? Iterable.empty();\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{\n\t\t\t\t\tid: 'aa'\n\t\t\t\t}]\n\t\t\t}]\n\t\t});\n\t\tconst a = model.get('a');\n\n\t\tconst tree = store.add(new AsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), [new Renderer()], dataSource, { identityProvider: new IdentityProvider() }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tassert.strictEqual(calls.length, 1, 'There should be a single getChildren call for the root');\n\t\tassert(tree.isCollapsible(a), 'a is collapsible');\n\t\tassert(tree.isCollapsed(a), 'a is collapsed');\n\n\t\tawait tree.updateChildren(a, false);\n\t\tassert.strictEqual(calls.length, 1, 'There should be no changes to the calls list, since a was collapsed');\n\t\tassert(tree.isCollapsible(a), 'a is collapsible');\n\t\tassert(tree.isCollapsed(a), 'a is collapsed');\n\n\t\tconst children = a.children;\n\t\ta.children = [];\n\t\tawait tree.updateChildren(a, false);\n\t\tassert.strictEqual(calls.length, 1, 'There should still be no changes to the calls list, since a was collapsed');\n\t\tassert(!tree.isCollapsible(a), 'a is no longer collapsible');\n\t\tassert(tree.isCollapsed(a), 'a is collapsed');\n\n\t\ta.children = children;\n\t\tawait tree.updateChildren(a, false);\n\t\tassert.strictEqual(calls.length, 1, 'There should still be no changes to the calls list, since a was collapsed');\n\t\tassert(tree.isCollapsible(a), 'a is collapsible again');\n\t\tassert(tree.isCollapsed(a), 'a is collapsed');\n\n\t\tawait tree.expand(a);\n\t\tassert.strictEqual(calls.length, 2, 'Finally, there should be a getChildren call for a');\n\t\tassert(tree.isCollapsible(a), 'a is still collapsible');\n\t\tassert(!tree.isCollapsed(a), 'a is expanded');\n\t});\n\n\ttest('issue #199441', async () => {\n\t\tconst container = document.createElement('div');\n\n\t\tconst dataSource = new class implements IAsyncDataSource<Element, Element> {\n\t\t\thasChildren(element: Element): boolean {\n\t\t\t\treturn !!element.children && element.children.length > 0;\n\t\t\t}\n\t\t\tasync getChildren(element: Element) {\n\t\t\t\treturn element.children ?? Iterable.empty();\n\t\t\t}\n\t\t};\n\n\t\tconst compressionDelegate = new class implements ITreeCompressionDelegate<Element> {\n\t\t\tisIncompressible(element: Element): boolean {\n\t\t\t\treturn !dataSource.hasChildren(element);\n\t\t\t}\n\t\t};\n\n\t\tconst model = new Model({\n\t\t\tid: 'root',\n\t\t\tchildren: [{\n\t\t\t\tid: 'a', children: [{\n\t\t\t\t\tid: 'b',\n\t\t\t\t\tchildren: [{ id: 'b.txt' }]\n\t\t\t\t}]\n\t\t\t}]\n\t\t});\n\n\t\tconst collapseByDefault = (element: Element) => false;\n\n\t\tconst tree = store.add(new CompressibleAsyncDataTree<Element, Element>('test', container, new VirtualDelegate(), compressionDelegate, [new Renderer()], dataSource, { identityProvider: new IdentityProvider(), collapseByDefault }));\n\t\ttree.layout(200);\n\n\t\tawait tree.setInput(model.root);\n\t\tassert.deepStrictEqual(Array.from(container.querySelectorAll('.monaco-list-row')).map(e => e.textContent), ['a/b', 'b.txt']);\n\n\t\tmodel.get('a').children!.push({\n\t\t\tid: 'c',\n\t\t\tchildren: [{ id: 'c.txt' }]\n\t\t});\n\n\t\tawait tree.updateChildren(model.root, true);\n\t\tassert.deepStrictEqual(Array.from(container.querySelectorAll('.monaco-list-row')).map(e => e.textContent), ['a', 'b', 'b.txt', 'c', 'c.txt']);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,mBAAmB,4BAA4B;AACxD,SAAS,eAAe,2BAA2B,gCAAgC;AACnF,SAAS,2BAA2B;AACpC,SAAS,iCAAiC;AAC1C,SAAS,kBAAkB,iBAAiB;AAC5C,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,+CAA+C;AAQxD,SAAS,KAAK,SAAkB,IAAiC;AAChE,MAAI,QAAQ,OAAO,IAAI;AACtB,WAAO;AAAA,EACR;AAEA,MAAI,CAAC,QAAQ,UAAU;AACtB,WAAO;AAAA,EACR;AAEA,aAAW,SAAS,QAAQ,UAAU;AACrC,UAAM,SAAS,KAAK,OAAO,EAAE;AAE7B,QAAI,QAAQ;AACX,aAAO;AAAA,IACR;AAAA,EACD;AAEA,SAAO;AACR;AAlBS;AAoBT,MAAM,SAA0E;AAAA,EAzChF,OAyCgF;AAAA;AAAA;AAAA,EACtE,aAAa;AAAA,EACtB,eAAe,WAAqC;AACnD,WAAO;AAAA,EACR;AAAA,EACA,cAAc,SAAmC,OAAe,cAAiC;AAChG,iBAAa,cAAc,QAAQ,QAAQ,MAAM,QAAQ,QAAQ,UAAU;AAAA,EAC5E;AAAA,EACA,gBAAgB,cAAiC;AAAA,EAEjD;AAAA,EACA,yBAAyB,MAAqD,OAAe,cAA2B,QAAkC;AACzJ,UAAM,SAAmB,CAAC;AAE1B,eAAW,WAAW,KAAK,QAAQ,UAAU;AAC5C,aAAO,KAAK,QAAQ,MAAM,QAAQ,UAAU,GAAG;AAAA,IAChD;AAEA,iBAAa,cAAc,OAAO,KAAK,GAAG;AAAA,EAC3C;AACD;AAEA,MAAM,iBAAuD;AAAA,EA/D7D,OA+D6D;AAAA;AAAA;AAAA,EAC5D,MAAM,SAAkB;AACvB,WAAO,QAAQ;AAAA,EAChB;AACD;AAEA,MAAM,gBAAyD;AAAA,EArE/D,OAqE+D;AAAA;AAAA;AAAA,EAC9D,YAAY;AAAE,WAAO;AAAA,EAAI;AAAA,EACzB,cAAc,SAA0B;AAAE,WAAO;AAAA,EAAW;AAC7D;AAEA,MAAM,WAAyD;AAAA,EA1E/D,OA0E+D;AAAA;AAAA;AAAA,EAC9D,YAAY,SAA2B;AACtC,WAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,EACxD;AAAA,EACA,YAAY,SAAsC;AACjD,WAAO,QAAQ,QAAQ,QAAQ,YAAY,CAAC,CAAC;AAAA,EAC9C;AACD;AAEA,MAAM,MAAM;AAAA,EAEX,YAAqB,MAAe;AAAf;AAAA,EAAiB;AAAA,EArFvC,OAmFY;AAAA;AAAA;AAAA,EAIX,IAAI,IAAqB;AACxB,UAAM,SAAS,KAAK,KAAK,MAAM,EAAE;AAEjC,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACpC;AAEA,WAAO;AAAA,EACR;AACD;AAEA,MAAM,iBAAiB,WAAY;AAElC,QAAM,QAAQ,wCAAwC;AAEtD,OAAK,2DAA2D,YAAY;AAC3E,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,MACL,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI,WAAW,GAAG,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AACtL,SAAK,OAAO,GAAG;AACf,WAAO,YAAY,UAAU,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC;AAE3E,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,WAAO,YAAY,UAAU,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC;AAC3E,UAAM,UAAU,UAAU,cAAc,iDAAiD;AACzF,WAAO,CAAC,QAAQ,UAAU,SAAS,aAAa,CAAC;AACjD,WAAO,CAAC,QAAQ,UAAU,SAAS,WAAW,CAAC;AAE/C,UAAM,IAAI,GAAG,EAAE,WAAW;AAAA,MACzB,EAAE,IAAI,KAAK;AAAA,MACX,EAAE,IAAI,KAAK;AAAA,MACX,EAAE,IAAI,KAAK;AAAA,IACZ;AAEA,UAAM,KAAK,eAAe,MAAM,IAAI;AACpC,WAAO,YAAY,UAAU,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC;AAE3E,UAAM,KAAK,OAAO,MAAM,IAAI,GAAG,CAAC;AAChC,WAAO,YAAY,UAAU,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC;AAE3E,UAAM,IAAI,GAAG,EAAE,WAAW,CAAC;AAC3B,UAAM,KAAK,eAAe,MAAM,IAAI;AACpC,WAAO,YAAY,UAAU,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC;AAAA,EAC5E,CAAC;AAED,OAAK,gBAAgB,YAAY;AAChC,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,mBAA6B,CAAC;AACpC,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,YAAY,SAAsC;AACjD,yBAAiB,KAAK,QAAQ,EAAE;AAChC,eAAO,QAAQ,QAAQ,QAAQ,YAAY,CAAC,CAAC;AAAA,MAC9C;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,MACL,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAChL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,WAAO,gBAAgB,kBAAkB,CAAC,MAAM,CAAC;AAEjD,QAAI,UAAU,UAAU,cAAc,iDAAiD;AACvF,WAAO,CAAC,QAAQ,UAAU,SAAS,aAAa,CAAC;AACjD,WAAO,CAAC,QAAQ,UAAU,SAAS,WAAW,CAAC;AAC/C,WAAO,KAAK,QAAQ,EAAE,SAAS,CAAC,EAAE,SAAS;AAE3C,UAAM,IAAI,GAAG,EAAE,WAAW,CAAC,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,CAAC;AACnE,UAAM,KAAK,eAAe,MAAM,IAAI;AAEpC,WAAO,gBAAgB,kBAAkB,CAAC,QAAQ,MAAM,CAAC;AACzD,cAAU,UAAU,cAAc,iDAAiD;AACnF,WAAO,QAAQ,UAAU,SAAS,aAAa,CAAC;AAChD,WAAO,QAAQ,UAAU,SAAS,WAAW,CAAC;AAC9C,WAAO,KAAK,QAAQ,EAAE,SAAS,CAAC,EAAE,SAAS;AAE3C,UAAM,IAAI,GAAG,EAAE,WAAW,CAAC;AAC3B,UAAM,KAAK,eAAe,MAAM,IAAI;AAEpC,WAAO,gBAAgB,kBAAkB,CAAC,QAAQ,QAAQ,MAAM,CAAC;AACjE,cAAU,UAAU,cAAc,iDAAiD;AACnF,WAAO,CAAC,QAAQ,UAAU,SAAS,aAAa,CAAC;AACjD,WAAO,CAAC,QAAQ,UAAU,SAAS,WAAW,CAAC;AAC/C,WAAO,KAAK,QAAQ,EAAE,SAAS,CAAC,EAAE,SAAS;AAE3C,UAAM,IAAI,GAAG,EAAE,WAAW,CAAC,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,CAAC;AACnE,UAAM,KAAK,eAAe,MAAM,IAAI;AAEpC,WAAO,gBAAgB,kBAAkB,CAAC,QAAQ,QAAQ,QAAQ,MAAM,CAAC;AACzE,cAAU,UAAU,cAAc,iDAAiD;AACnF,WAAO,QAAQ,UAAU,SAAS,aAAa,CAAC;AAChD,WAAO,QAAQ,UAAU,SAAS,WAAW,CAAC;AAC9C,WAAO,KAAK,QAAQ,EAAE,SAAS,CAAC,EAAE,SAAS;AAAA,EAC5C,CAAC;AAED,OAAK,kGAAkG,YAAY;AAClH,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,mBAA6B,CAAC;AACpC,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,YAAY,SAAsC;AACjD,yBAAiB,KAAK,QAAQ,EAAE;AAChC,eAAO,QAAQ,QAAQ,QAAQ,YAAY,CAAC,CAAC;AAAA,MAC9C;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,CAAC;AAAA,MAC7D,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAChL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,WAAO,KAAK,QAAQ,MAAM,IAAI,GAAG,CAAC,EAAE,SAAS;AAC7C,WAAO,gBAAgB,kBAAkB,CAAC,MAAM,CAAC;AAEjD,UAAM,KAAK,OAAO,MAAM,IAAI,GAAG,CAAC;AAChC,WAAO,CAAC,KAAK,QAAQ,MAAM,IAAI,GAAG,CAAC,EAAE,SAAS;AAC9C,WAAO,gBAAgB,kBAAkB,CAAC,QAAQ,GAAG,CAAC;AAEtD,SAAK,SAAS,MAAM,IAAI,GAAG,CAAC;AAC5B,WAAO,KAAK,QAAQ,MAAM,IAAI,GAAG,CAAC,EAAE,SAAS;AAC7C,WAAO,gBAAgB,kBAAkB,CAAC,QAAQ,GAAG,CAAC;AAEtD,UAAM,KAAK,eAAe;AAC1B,WAAO,KAAK,QAAQ,MAAM,IAAI,GAAG,CAAC,EAAE,SAAS;AAC7C,WAAO,gBAAgB,kBAAkB,CAAC,QAAQ,KAAK,MAAM,GAAG,gDAAiD;AAAA,EAClH,CAAC;AAED,OAAK,4EAA4E,YAAY;AAC5F,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,CAAC;AAAA,MAC7D,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI,WAAW,GAAG,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AACtL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,UAAM,KAAK,OAAO,MAAM,IAAI,GAAG,CAAC;AAEhC,QAAI,UAAU,UAAU,cAAc,iDAAiD;AACvF,WAAO,QAAQ,UAAU,SAAS,aAAa,CAAC;AAChD,WAAO,CAAC,QAAQ,UAAU,SAAS,WAAW,CAAC;AAC/C,WAAO,CAAC,KAAK,QAAQ,MAAM,IAAI,GAAG,CAAC,EAAE,SAAS;AAE9C,SAAK,SAAS,MAAM,IAAI,GAAG,CAAC;AAC5B,UAAM,IAAI,GAAG,EAAE,WAAW,CAAC;AAC3B,UAAM,KAAK,eAAe,MAAM,IAAI;AAEpC,cAAU,UAAU,cAAc,iDAAiD;AACnF,WAAO,CAAC,QAAQ,UAAU,SAAS,aAAa,CAAC;AACjD,WAAO,CAAC,QAAQ,UAAU,SAAS,WAAW,CAAC;AAC/C,WAAO,KAAK,QAAQ,MAAM,IAAI,GAAG,CAAC,EAAE,SAAS;AAAA,EAC9C,CAAC;AAED,OAAK,0FAA2F,YAAY;AAC3G,UAAM,YAAY,SAAS,cAAc,KAAK;AAC9C,QAAI,qBAAqB;AACzB,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,MAAM,YAAY,SAAsC;AACvD,YAAI,QAAQ,OAAO,KAAK;AACvB,cAAI,CAAC,oBAAoB;AACxB,iCAAqB;AAAA,UACtB,OAAO;AACN,mBAAO,CAAC,EAAE,IAAI,IAAI,CAAC;AAAA,UACpB;AAAA,QACD;AACA,eAAO,QAAQ,YAAY,CAAC;AAAA,MAC7B;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC;AAAA,MAChC,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAChL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,UAAM,IAAI,MAAM,IAAI,GAAG;AACvB,UAAM,QAAQ,KAAK,QAAQ,CAAC;AAC5B,WAAO,MAAM,SAAS;AACtB,UAAM,KAAK,OAAO,CAAC;AACnB,WAAO,CAAC,MAAM,SAAS;AACvB,WAAO,MAAM,MAAM,SAAS,QAAQ,CAAC;AACrC,WAAO,MAAM,MAAM,SAAS,CAAC,EAAE,QAAQ,IAAI,GAAG;AAC9C,UAAM,SAAS,UAAU,cAAc,+BAA+B;AACtE,WAAO,MAAM,QAAQ,aAAa,GAAG;AACrC,SAAK,SAAS,CAAC;AACf,WAAO,MAAM,SAAS;AAEtB,UAAM,KAAK,eAAe,CAAC;AAC3B,UAAM,YAAY,MAAM,IAAI,GAAG;AAC/B,UAAM,gBAAgB,KAAK,QAAQ,CAAC;AACpC,WAAO,cAAc,SAAS;AAC9B,WAAO,MAAM,cAAc,SAAS,QAAQ,CAAC;AAC7C,QAAI,qBAAqB;AACzB,UAAM,QAAQ,KAAK,yBAAyB,OAAK;AAChD,YAAMA,SAAQ,UAAU,cAAc,+BAA+B;AACrE,aAAO,MAAMA,QAAO,MAAS;AAC7B,2BAAqB;AAAA,IACtB,CAAC;AACD,UAAM,KAAK,OAAO,SAAS;AAC3B,UAAM,QAAQ;AACd,WAAO,kBAAkB;AAEzB,UAAM,gBAAgB,KAAK,QAAQ,CAAC;AACpC,WAAO,CAAC,cAAc,SAAS;AAC/B,WAAO,MAAM,cAAc,SAAS,QAAQ,CAAC;AAC7C,WAAO,MAAM,cAAc,SAAS,CAAC,EAAE,QAAQ,IAAI,GAAG;AACtD,UAAM,QAAQ,UAAU,cAAc,+BAA+B;AACrE,WAAO,MAAM,OAAO,aAAa,GAAG;AAAA,EACrC,CAAC;AAED,OAAK,8FAA8F,YAAY;AAC9G,UAAM,YAAY,SAAS,cAAc,KAAK;AAC9C,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,MAAM,YAAY,SAAsC;AACvD,eAAO,QAAQ,YAAY,CAAC;AAAA,MAC7B;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC;AAAA,MAChC,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAChL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,UAAM,IAAI,MAAM,IAAI,GAAG;AACvB,UAAM,QAAQ,KAAK,QAAQ,CAAC;AAC5B,WAAO,MAAM,SAAS;AACtB,UAAM,KAAK,OAAO,CAAC;AACnB,WAAO,CAAC,MAAM,SAAS;AACvB,WAAO,MAAM,MAAM,SAAS,QAAQ,CAAC;AACrC,WAAO,MAAM,MAAM,SAAS,CAAC,EAAE,QAAQ,IAAI,GAAG;AAC9C,UAAM,SAAS,UAAU,cAAc,+BAA+B;AACtE,WAAO,MAAM,QAAQ,aAAa,GAAG;AACrC,SAAK,SAAS,CAAC;AACf,WAAO,MAAM,SAAS;AAEtB,UAAM,YAAY,MAAM,IAAI,GAAG;AAC/B,UAAM,gBAAgB,KAAK,QAAQ,CAAC;AACpC,WAAO,cAAc,SAAS;AAC9B,WAAO,MAAM,cAAc,SAAS,QAAQ,CAAC;AAC7C,QAAI,uBAAuB;AAC3B,UAAM,QAAQ,KAAK,yBAAyB,OAAK;AAChD,YAAMA,SAAQ,UAAU,cAAc,+BAA+B;AACrE,aAAO,MAAMA,QAAO,aAAa,GAAG;AACpC,6BAAuB;AAAA,IACxB,CAAC;AACD,UAAM,KAAK,OAAO,SAAS;AAC3B,UAAM,QAAQ;AACd,WAAO,oBAAoB;AAE3B,UAAM,gBAAgB,KAAK,QAAQ,CAAC;AACpC,WAAO,CAAC,cAAc,SAAS;AAC/B,WAAO,MAAM,cAAc,SAAS,QAAQ,CAAC;AAC7C,WAAO,MAAM,cAAc,SAAS,CAAC,EAAE,QAAQ,IAAI,GAAG;AACtD,UAAM,QAAQ,UAAU,cAAc,+BAA+B;AACrE,WAAO,MAAM,OAAO,aAAa,GAAG;AAAA,EACrC,CAAC;AAED,OAAK,8CAA8C,YAAY;AAC9D,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,mBAA6B,CAAC;AACpC,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,YAAY,SAAsC;AACjD,yBAAiB,KAAK,QAAQ,EAAE;AAChC,eAAO,QAAQ,QAAQ,QAAQ,YAAY,CAAC,CAAC;AAAA,MAC9C;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,CAAC;AAAA,MAC7D,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY;AAAA,MAClI,mBAAmB,+BAAM,GAAG,OAAO,KAAhB;AAAA,IACpB,CAAC,CAAC;AACF,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,WAAO,CAAC,KAAK,QAAQ,MAAM,IAAI,GAAG,CAAC,EAAE,SAAS;AAC9C,WAAO,gBAAgB,kBAAkB,CAAC,QAAQ,GAAG,CAAC;AAAA,EACvD,CAAC;AAED,OAAK,gDAAgD,YAAY;AAChE,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,QAAoB,CAAC;AAC3B,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,YAAY,SAAsC;AACjD,eAAO,IAAI,QAAQ,OAAK,MAAM,KAAK,MAAM,EAAE,QAAQ,YAAY,CAAC,CAAC,CAAC,CAAC;AAAA,MACpE;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC;AAAA,UACnB,IAAI;AAAA,QACL,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAChL,SAAK,OAAO,GAAG;AAEf,UAAM,YAAY,KAAK,SAAS,MAAM,IAAI;AAC1C,UAAM,IAAI,EAAG;AACb,UAAM;AAEN,UAAM,mBAAmB,KAAK,eAAe,MAAM,IAAI,GAAG,CAAC;AAC3D,UAAM,WAAW,KAAK,OAAO,MAAM,IAAI,GAAG,CAAC;AAC3C,WAAO,YAAY,MAAM,QAAQ,GAAG,8CAA+C;AAEnF,UAAM,IAAI,EAAG;AACb,WAAO,YAAY,MAAM,QAAQ,GAAG,8BAA8B;AAElE,UAAM;AACN,WAAO,YAAY,MAAM,QAAQ,GAAG,mDAAmD;AAEvF,UAAM,SAAS,MAAM;AACrB,WAAO,YAAY,QAAQ,MAAM,0BAA0B;AAAA,EAC5D,CAAC;AAED,OAAK,uDAAuD,YAAY;AACvE,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,QAAoB,CAAC;AAC3B,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,YAAY,SAAsC;AACjD,eAAO,IAAI,QAAQ,OAAK,MAAM,KAAK,MAAM,EAAE,QAAQ,YAAY,CAAC,CAAC,CAAC,CAAC;AAAA,MACpE;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC;AAAA,UACnB,IAAI;AAAA,QACL,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAChL,SAAK,OAAO,GAAG;AAEf,UAAM,YAAY,KAAK,SAAS,MAAM,IAAI;AAC1C,UAAM,IAAI,EAAG;AACb,UAAM;AAEN,UAAM,WAAW,KAAK,OAAO,MAAM,IAAI,GAAG,CAAC;AAC3C,WAAO,YAAY,MAAM,QAAQ,GAAG,2CAA4C;AAEhF,QAAI,OAAO,MAAM,QAAQ,KAAK,CAAC,SAAS,KAAK,MAAM,QAAQ,GAAG,QAAQ,CAAC,EAAE,KAAK,MAAM,SAAS,CAAC,CAAC;AAC/F,WAAO,YAAY,MAAM,WAAW,kCAAkC;AAEtE,UAAM,IAAI,EAAG;AACb,WAAO,YAAY,MAAM,QAAQ,GAAG,8BAA8B;AAElE,WAAO,MAAM,QAAQ,KAAK,CAAC,SAAS,KAAK,MAAM,QAAQ,GAAG,QAAQ,CAAC,EAAE,KAAK,MAAM,SAAS,CAAC,CAAC;AAC3F,WAAO,YAAY,MAAM,UAAU,8BAA8B;AAAA,EAClE,CAAC;AAED,OAAK,2DAA2D,YAAY;AAC3E,UAAM,YAAY,SAAS,cAAc,KAAK;AAC9C,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,MACL,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI,WAAW,GAAG,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AACtL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,WAAO,YAAY,UAAU,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC;AAE3E,QAAI,UAAU,UAAU,cAAc,iDAAiD;AACvF,WAAO,CAAC,QAAQ,UAAU,SAAS,aAAa,CAAC;AACjD,WAAO,CAAC,QAAQ,UAAU,SAAS,WAAW,CAAC;AAE/C,UAAM,IAAI,GAAG,EAAE,WAAW,CAAC,EAAE,IAAI,KAAK,CAAC;AACvC,UAAM,KAAK,eAAe,MAAM,IAAI,GAAG,GAAG,KAAK;AAC/C,WAAO,YAAY,UAAU,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC;AAC3E,cAAU,UAAU,cAAc,iDAAiD;AACnF,WAAO,QAAQ,UAAU,SAAS,aAAa,CAAC;AAChD,WAAO,QAAQ,UAAU,SAAS,WAAW,CAAC;AAE9C,UAAM,IAAI,GAAG,EAAE,WAAW,CAAC;AAC3B,UAAM,KAAK,eAAe,MAAM,IAAI,GAAG,GAAG,KAAK;AAC/C,WAAO,YAAY,UAAU,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC;AAC3E,cAAU,UAAU,cAAc,iDAAiD;AACnF,WAAO,CAAC,QAAQ,UAAU,SAAS,aAAa,CAAC;AACjD,WAAO,CAAC,QAAQ,UAAU,SAAS,WAAW,CAAC;AAAA,EAChD,CAAC;AAED,OAAK,oCAAoC,YAAY;AACpD,UAAM,YAAY,SAAS,cAAc,KAAK;AAC9C,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QACJ,UAAU,CAAC;AAAA,UACV,IAAI;AAAA,UACJ,QAAQ;AAAA,QACT,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI,WAAW,GAAG,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AACtL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,UAAM,KAAK,OAAO,MAAM,IAAI,GAAG,CAAC;AAChC,WAAO,gBAAgB,MAAM,KAAK,UAAU,iBAAiB,kBAAkB,CAAC,EAAE,IAAI,OAAK,EAAE,WAAW,GAAG,CAAC,KAAK,IAAI,CAAC;AAEtH,UAAM,IAAI,MAAM,IAAI,GAAG;AACvB,UAAM,IAAI,MAAM,IAAI,GAAG;AACvB,MAAE,UAAU,OAAO,GAAG,GAAG,EAAE,IAAI,KAAK,QAAQ,IAAI,CAAC;AAEjD,UAAM,QAAQ,IAAI;AAAA,MACjB,KAAK,eAAe,GAAG,MAAM,IAAI;AAAA,MACjC,KAAK,eAAe,GAAG,MAAM,IAAI;AAAA,IAClC,CAAC;AAED,WAAO,gBAAgB,MAAM,KAAK,UAAU,iBAAiB,kBAAkB,CAAC,EAAE,IAAI,OAAK,EAAE,WAAW,GAAG,CAAC,KAAK,IAAI,CAAC;AAAA,EACvH,CAAC;AAED,OAAK,yCAAyC,YAAY;AACzD,UAAM,YAAY,SAAS,cAAc,KAAK;AAC9C,UAAM,SAAS,IAAI,MAAM;AAAA,MACxB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,CAAC;AAAA,MAC7D,CAAC;AAAA,IACF,CAAC;AACD,UAAM,SAAS,IAAI,MAAM;AAAA,MACxB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,CAAC;AAAA,MAC7D,CAAC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI,WAAW,GAAG,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AACtL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,OAAO,IAAI;AAC/B,UAAM,QAAQ,KAAK,SAAS,OAAO,IAAI;AACvC,SAAK,QAAQ;AACb,UAAM;AACN,WAAO,YAAY,UAAU,WAAW,EAAE;AAAA,EAC3C,CAAC;AAED,OAAK,iBAAiB,YAAY;AACjC,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,QAAmB,CAAC;AAC1B,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,MAAM,YAAY,SAAkB;AACnC,cAAM,KAAK,OAAO;AAClB,eAAO,QAAQ,YAAY,SAAS,MAAM;AAAA,MAC3C;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC;AAAA,UACnB,IAAI;AAAA,QACL,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AACD,UAAM,IAAI,MAAM,IAAI,GAAG;AAEvB,UAAM,OAAO,MAAM,IAAI,IAAI,cAAgC,QAAQ,WAAW,IAAI,gBAAgB,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY,EAAE,kBAAkB,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAChL,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,WAAO,YAAY,MAAM,QAAQ,GAAG,wDAAwD;AAC5F,WAAO,KAAK,cAAc,CAAC,GAAG,kBAAkB;AAChD,WAAO,KAAK,YAAY,CAAC,GAAG,gBAAgB;AAE5C,UAAM,KAAK,eAAe,GAAG,KAAK;AAClC,WAAO,YAAY,MAAM,QAAQ,GAAG,qEAAqE;AACzG,WAAO,KAAK,cAAc,CAAC,GAAG,kBAAkB;AAChD,WAAO,KAAK,YAAY,CAAC,GAAG,gBAAgB;AAE5C,UAAM,WAAW,EAAE;AACnB,MAAE,WAAW,CAAC;AACd,UAAM,KAAK,eAAe,GAAG,KAAK;AAClC,WAAO,YAAY,MAAM,QAAQ,GAAG,2EAA2E;AAC/G,WAAO,CAAC,KAAK,cAAc,CAAC,GAAG,4BAA4B;AAC3D,WAAO,KAAK,YAAY,CAAC,GAAG,gBAAgB;AAE5C,MAAE,WAAW;AACb,UAAM,KAAK,eAAe,GAAG,KAAK;AAClC,WAAO,YAAY,MAAM,QAAQ,GAAG,2EAA2E;AAC/G,WAAO,KAAK,cAAc,CAAC,GAAG,wBAAwB;AACtD,WAAO,KAAK,YAAY,CAAC,GAAG,gBAAgB;AAE5C,UAAM,KAAK,OAAO,CAAC;AACnB,WAAO,YAAY,MAAM,QAAQ,GAAG,mDAAmD;AACvF,WAAO,KAAK,cAAc,CAAC,GAAG,wBAAwB;AACtD,WAAO,CAAC,KAAK,YAAY,CAAC,GAAG,eAAe;AAAA,EAC7C,CAAC;AAED,OAAK,iBAAiB,YAAY;AACjC,UAAM,YAAY,SAAS,cAAc,KAAK;AAE9C,UAAM,aAAa,IAAI,MAAoD;AAAA,MAC1E,YAAY,SAA2B;AACtC,eAAO,CAAC,CAAC,QAAQ,YAAY,QAAQ,SAAS,SAAS;AAAA,MACxD;AAAA,MACA,MAAM,YAAY,SAAkB;AACnC,eAAO,QAAQ,YAAY,SAAS,MAAM;AAAA,MAC3C;AAAA,IACD;AAEA,UAAM,sBAAsB,IAAI,MAAmD;AAAA,MAClF,iBAAiB,SAA2B;AAC3C,eAAO,CAAC,WAAW,YAAY,OAAO;AAAA,MACvC;AAAA,IACD;AAEA,UAAM,QAAQ,IAAI,MAAM;AAAA,MACvB,IAAI;AAAA,MACJ,UAAU,CAAC;AAAA,QACV,IAAI;AAAA,QAAK,UAAU,CAAC;AAAA,UACnB,IAAI;AAAA,UACJ,UAAU,CAAC,EAAE,IAAI,QAAQ,CAAC;AAAA,QAC3B,CAAC;AAAA,MACF,CAAC;AAAA,IACF,CAAC;AAED,UAAM,oBAAoB,wBAAC,YAAqB,OAAtB;AAE1B,UAAM,OAAO,MAAM,IAAI,IAAI,0BAA4C,QAAQ,WAAW,IAAI,gBAAgB,GAAG,qBAAqB,CAAC,IAAI,SAAS,CAAC,GAAG,YAAY,EAAE,kBAAkB,IAAI,iBAAiB,GAAG,kBAAkB,CAAC,CAAC;AACpO,SAAK,OAAO,GAAG;AAEf,UAAM,KAAK,SAAS,MAAM,IAAI;AAC9B,WAAO,gBAAgB,MAAM,KAAK,UAAU,iBAAiB,kBAAkB,CAAC,EAAE,IAAI,OAAK,EAAE,WAAW,GAAG,CAAC,OAAO,OAAO,CAAC;AAE3H,UAAM,IAAI,GAAG,EAAE,SAAU,KAAK;AAAA,MAC7B,IAAI;AAAA,MACJ,UAAU,CAAC,EAAE,IAAI,QAAQ,CAAC;AAAA,IAC3B,CAAC;AAED,UAAM,KAAK,eAAe,MAAM,MAAM,IAAI;AAC1C,WAAO,gBAAgB,MAAM,KAAK,UAAU,iBAAiB,kBAAkB,CAAC,EAAE,IAAI,OAAK,EAAE,WAAW,GAAG,CAAC,KAAK,KAAK,SAAS,KAAK,OAAO,CAAC;AAAA,EAC7I,CAAC;AACF,CAAC;",
  "names": ["child"]
}
