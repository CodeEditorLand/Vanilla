{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/ui/tree/indexTreeModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IIndexTreeModelSpliceOptions, IIndexTreeNode, IndexTreeModel } from '../../../../browser/ui/tree/indexTreeModel.js';\nimport { ITreeElement, ITreeFilter, ITreeNode, TreeVisibility } from '../../../../browser/ui/tree/tree.js';\nimport { timeout } from '../../../../common/async.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../common/utils.js';\nimport { DisposableStore, IDisposable } from '../../../../common/lifecycle.js';\n\nfunction bindListToModel<T>(list: ITreeNode<T>[], model: IndexTreeModel<T>): IDisposable {\n\treturn model.onDidSpliceRenderedNodes(({ start, deleteCount, elements }) => {\n\t\tlist.splice(start, deleteCount, ...elements);\n\t});\n}\n\nfunction toArray<T>(list: ITreeNode<T>[]): T[] {\n\treturn list.map(i => i.element);\n}\n\n\nfunction toElements<T>(node: ITreeNode<T>): any {\n\treturn node.children?.length ? { e: node.element, children: node.children.map(toElements) } : node.element;\n}\n\nconst diffIdentityProvider = { getId: (n: number) => String(n) };\n\n/**\n * Calls that test function twice, once with an empty options and\n * once with `diffIdentityProvider`.\n */\nfunction withSmartSplice(fn: (options: IIndexTreeModelSpliceOptions<number, any>) => void) {\n\tfn({});\n\tfn({ diffIdentityProvider });\n}\n\nsuite('IndexTreeModel', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst disposables = new DisposableStore();\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('ctor', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tassert(model);\n\t\tassert.strictEqual(list.length, 0);\n\t});\n\n\ttest('insert', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 0 },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 1);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\t\tassert.deepStrictEqual(list[2].element, 2);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 1);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('deep insert', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 6);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 2);\n\t\tassert.deepStrictEqual(list[2].element, 11);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 2);\n\t\tassert.deepStrictEqual(list[3].element, 12);\n\t\tassert.deepStrictEqual(list[3].collapsed, false);\n\t\tassert.deepStrictEqual(list[3].depth, 2);\n\t\tassert.deepStrictEqual(list[4].element, 1);\n\t\tassert.deepStrictEqual(list[4].collapsed, false);\n\t\tassert.deepStrictEqual(list[4].depth, 1);\n\t\tassert.deepStrictEqual(list[5].element, 2);\n\t\tassert.deepStrictEqual(list[5].collapsed, false);\n\t\tassert.deepStrictEqual(list[5].depth, 1);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('deep insert collapsed', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, collapsed: true, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, true);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 1);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\t\tassert.deepStrictEqual(list[2].element, 2);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 1);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('delete', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 0 },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tmodel.splice([1], 1, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 2);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 2);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\n\t\tmodel.splice([0], 2, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 0);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('nested delete', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 6);\n\n\t\tmodel.splice([1], 2, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 4);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 2);\n\t\tassert.deepStrictEqual(list[2].element, 11);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 2);\n\t\tassert.deepStrictEqual(list[3].element, 12);\n\t\tassert.deepStrictEqual(list[3].collapsed, false);\n\t\tassert.deepStrictEqual(list[3].depth, 2);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('deep delete', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 6);\n\n\t\tmodel.splice([0], 1, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 2);\n\t\tassert.deepStrictEqual(list[0].element, 1);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 2);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('smart splice deep', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 0 },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 },\n\t\t\t{ element: 3 },\n\t\t], { diffIdentityProvider });\n\n\t\tassert.deepStrictEqual(list.filter(l => l.depth === 1).map(toElements), [\n\t\t\t0,\n\t\t\t1,\n\t\t\t2,\n\t\t\t3,\n\t\t]);\n\n\t\tmodel.splice([0], 3, [\n\t\t\t{ element: -0.5 },\n\t\t\t{ element: 0, children: [{ element: 0.1 }] },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2, children: [{ element: 2.1 }, { element: 2.2, children: [{ element: 2.21 }] }] },\n\t\t], { diffIdentityProvider, diffDepth: Infinity });\n\n\t\tassert.deepStrictEqual(list.filter(l => l.depth === 1).map(toElements), [\n\t\t\t-0.5,\n\t\t\t{ e: 0, children: [0.1] },\n\t\t\t1,\n\t\t\t{ e: 2, children: [2.1, { e: 2.2, children: [2.21] }] },\n\t\t\t3,\n\t\t]);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('hidden delete', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, collapsed: true, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tmodel.splice([0, 1], 1, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tmodel.splice([0, 0], 2, undefined, options);\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('collapse', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 6);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(list.length, 3);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, true);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 1);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 1);\n\t\tassert.deepStrictEqual(list[2].element, 2);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 1);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('expand', () => withSmartSplice(options => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, collapsed: true, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t], options);\n\n\t\tassert.deepStrictEqual(list.length, 3);\n\n\t\tmodel.expandTo([0, 1]);\n\t\tassert.deepStrictEqual(list.length, 6);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[0].depth, 1);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].depth, 2);\n\t\tassert.deepStrictEqual(list[2].element, 11);\n\t\tassert.deepStrictEqual(list[2].collapsed, false);\n\t\tassert.deepStrictEqual(list[2].depth, 2);\n\t\tassert.deepStrictEqual(list[3].element, 12);\n\t\tassert.deepStrictEqual(list[3].collapsed, false);\n\t\tassert.deepStrictEqual(list[3].depth, 2);\n\t\tassert.deepStrictEqual(list[4].element, 1);\n\t\tassert.deepStrictEqual(list[4].collapsed, false);\n\t\tassert.deepStrictEqual(list[4].depth, 1);\n\t\tassert.deepStrictEqual(list[5].element, 2);\n\t\tassert.deepStrictEqual(list[5].collapsed, false);\n\t\tassert.deepStrictEqual(list[5].depth, 1);\n\n\t\tdisposable.dispose();\n\t}));\n\n\ttest('smart diff consistency', () => {\n\t\tconst times = 500;\n\t\tconst minEdits = 1;\n\t\tconst maxEdits = 10;\n\t\tconst maxInserts = 5;\n\n\t\tfor (let i = 0; i < times; i++) {\n\t\t\tconst list: ITreeNode<number>[] = [];\n\t\t\tconst options = { diffIdentityProvider: { getId: (n: number) => String(n) } };\n\t\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\t\tconst disposable = bindListToModel(list, model);\n\n\t\t\tconst changes = [];\n\t\t\tconst expected: number[] = [];\n\t\t\tlet elementCounter = 0;\n\n\t\t\tfor (let edits = Math.random() * (maxEdits - minEdits) + minEdits; edits > 0; edits--) {\n\t\t\t\tconst spliceIndex = Math.floor(Math.random() * list.length);\n\t\t\t\tconst deleteCount = Math.ceil(Math.random() * (list.length - spliceIndex));\n\t\t\t\tconst insertCount = Math.floor(Math.random() * maxInserts + 1);\n\n\t\t\t\tconst inserts: ITreeElement<number>[] = [];\n\t\t\t\tfor (let i = 0; i < insertCount; i++) {\n\t\t\t\t\tconst element = elementCounter++;\n\t\t\t\t\tinserts.push({ element, children: [] });\n\t\t\t\t}\n\n\t\t\t\t// move existing items\n\t\t\t\tif (Math.random() < 0.5) {\n\t\t\t\t\tconst elements = list.slice(spliceIndex, spliceIndex + Math.floor(deleteCount / 2));\n\t\t\t\t\tinserts.push(...elements.map(({ element }) => ({ element, children: [] })));\n\t\t\t\t}\n\n\t\t\t\tmodel.splice([spliceIndex], deleteCount, inserts, options);\n\t\t\t\texpected.splice(spliceIndex, deleteCount, ...inserts.map(i => i.element));\n\n\t\t\t\tconst listElements = list.map(l => l.element);\n\t\t\t\tchanges.push(`splice(${spliceIndex}, ${deleteCount}, [${inserts.map(e => e.element).join(', ')}]) -> ${listElements.join(', ')}`);\n\n\t\t\t\tassert.deepStrictEqual(expected, listElements, `Expected ${listElements.join(', ')} to equal ${expected.join(', ')}. Steps:\\n\\n${changes.join('\\n')}`);\n\t\t\t}\n\n\t\t\tdisposable.dispose();\n\t\t}\n\t});\n\n\ttest('collapse should recursively adjust visible count', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{ element: 111 }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\telement: 2, children: [\n\t\t\t\t\t{ element: 21 }\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 5);\n\t\tassert.deepStrictEqual(toArray(list), [1, 11, 111, 2, 21]);\n\n\t\tmodel.setCollapsed([0, 0], true);\n\t\tassert.deepStrictEqual(list.length, 4);\n\t\tassert.deepStrictEqual(toArray(list), [1, 11, 2, 21]);\n\n\t\tmodel.setCollapsed([1], true);\n\t\tassert.deepStrictEqual(list.length, 3);\n\t\tassert.deepStrictEqual(toArray(list), [1, 11, 2]);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('setCollapsible', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 }\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 2);\n\n\t\tmodel.setCollapsible([0], false);\n\t\tassert.deepStrictEqual(list.length, 2);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, false);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tassert.deepStrictEqual(model.setCollapsed([0], true), false);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, false);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tassert.deepStrictEqual(model.setCollapsed([0], false), false);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, false);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tmodel.setCollapsible([0], true);\n\t\tassert.deepStrictEqual(list.length, 2);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, true);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tassert.deepStrictEqual(model.setCollapsed([0], true), true);\n\t\tassert.deepStrictEqual(list.length, 1);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, true);\n\t\tassert.deepStrictEqual(list[0].collapsed, true);\n\n\t\tassert.deepStrictEqual(model.setCollapsed([0], false), true);\n\t\tassert.deepStrictEqual(list[0].element, 0);\n\t\tassert.deepStrictEqual(list[0].collapsible, true);\n\t\tassert.deepStrictEqual(list[0].collapsed, false);\n\t\tassert.deepStrictEqual(list[1].element, 10);\n\t\tassert.deepStrictEqual(list[1].collapsible, false);\n\t\tassert.deepStrictEqual(list[1].collapsed, false);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('simple filter', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst filter = new class implements ITreeFilter<number> {\n\t\t\tfilter(element: number): TreeVisibility {\n\t\t\t\treturn element % 2 === 0 ? TreeVisibility.Visible : TreeVisibility.Hidden;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<number>('test', -1, { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 1 },\n\t\t\t\t\t{ element: 2 },\n\t\t\t\t\t{ element: 3 },\n\t\t\t\t\t{ element: 4 },\n\t\t\t\t\t{ element: 5 },\n\t\t\t\t\t{ element: 6 },\n\t\t\t\t\t{ element: 7 }\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 4);\n\t\tassert.deepStrictEqual(toArray(list), [0, 2, 4, 6]);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(toArray(list), [0]);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(toArray(list), [0, 2, 4, 6]);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('recursive filter on initial model', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst filter = new class implements ITreeFilter<number> {\n\t\t\tfilter(element: number): TreeVisibility {\n\t\t\t\treturn element === 0 ? TreeVisibility.Recurse : TreeVisibility.Hidden;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<number>('test', -1, { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 1 },\n\t\t\t\t\t{ element: 2 }\n\t\t\t\t]\n\t\t\t}\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), []);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('refilter', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tlet shouldFilter = false;\n\t\tconst filter = new class implements ITreeFilter<number> {\n\t\t\tfilter(element: number): TreeVisibility {\n\t\t\t\treturn (!shouldFilter || element % 2 === 0) ? TreeVisibility.Visible : TreeVisibility.Hidden;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<number>('test', -1, { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 1 },\n\t\t\t\t\t{ element: 2 },\n\t\t\t\t\t{ element: 3 },\n\t\t\t\t\t{ element: 4 },\n\t\t\t\t\t{ element: 5 },\n\t\t\t\t\t{ element: 6 },\n\t\t\t\t\t{ element: 7 }\n\t\t\t\t]\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2, 3, 4, 5, 6, 7]);\n\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2, 3, 4, 5, 6, 7]);\n\n\t\tshouldFilter = true;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), [0, 2, 4, 6]);\n\n\t\tshouldFilter = false;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2, 3, 4, 5, 6, 7]);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('recursive filter', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): TreeVisibility {\n\t\t\t\treturn query.test(element) ? TreeVisibility.Visible : TreeVisibility.Recurse;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', 'root', { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 'vscode', children: [\n\t\t\t\t\t{ element: '.build' },\n\t\t\t\t\t{ element: 'git' },\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'github', children: [\n\t\t\t\t\t\t\t{ element: 'calendar.yml' },\n\t\t\t\t\t\t\t{ element: 'endgame' },\n\t\t\t\t\t\t\t{ element: 'build.js' },\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'build', children: [\n\t\t\t\t\t\t\t{ element: 'lib' },\n\t\t\t\t\t\t\t{ element: 'gulpfile.js' }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 10);\n\n\t\tquery = /build/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', '.build', 'github', 'build.js', 'build']);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', '.build', 'github', 'build.js', 'build']);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('recursive filter updates when children change (#133272)', async () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = '';\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): TreeVisibility {\n\t\t\t\treturn element.includes(query) ? TreeVisibility.Visible : TreeVisibility.Recurse;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', 'root', { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 'a',\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: 'b' },\n\t\t\t\t],\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), ['a', 'b']);\n\t\tquery = 'visible';\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), []);\n\n\t\tmodel.splice([0, 0, 0], 0, [\n\t\t\t{\n\t\t\t\telement: 'visible', children: []\n\t\t\t},\n\t\t]);\n\n\t\tawait timeout(0); // wait for refilter microtask\n\n\t\tassert.deepStrictEqual(toArray(list), ['a', 'b', 'visible']);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('recursive filter with collapse', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): TreeVisibility {\n\t\t\t\treturn query.test(element) ? TreeVisibility.Visible : TreeVisibility.Recurse;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', 'root', { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 'vscode', children: [\n\t\t\t\t\t{ element: '.build' },\n\t\t\t\t\t{ element: 'git' },\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'github', children: [\n\t\t\t\t\t\t\t{ element: 'calendar.yml' },\n\t\t\t\t\t\t\t{ element: 'endgame' },\n\t\t\t\t\t\t\t{ element: 'build.js' },\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'build', children: [\n\t\t\t\t\t\t\t{ element: 'lib' },\n\t\t\t\t\t\t\t{ element: 'gulpfile.js' }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(list.length, 10);\n\n\t\tquery = /gulp/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', 'build', 'gulpfile.js']);\n\n\t\tmodel.setCollapsed([0, 3], true);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', 'build']);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('recursive filter while collapsed', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): TreeVisibility {\n\t\t\t\treturn query.test(element) ? TreeVisibility.Visible : TreeVisibility.Recurse;\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', 'root', { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{\n\t\t\t\telement: 'vscode', collapsed: true, children: [\n\t\t\t\t\t{ element: '.build' },\n\t\t\t\t\t{ element: 'git' },\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'github', children: [\n\t\t\t\t\t\t\t{ element: 'calendar.yml' },\n\t\t\t\t\t\t\t{ element: 'endgame' },\n\t\t\t\t\t\t\t{ element: 'build.js' },\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 'build', children: [\n\t\t\t\t\t\t\t{ element: 'lib' },\n\t\t\t\t\t\t\t{ element: 'gulpfile.js' }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tquery = /gulp/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode', 'build', 'gulpfile.js']);\n\n\t\tmodel.setCollapsed([0], true);\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tquery = new RegExp('');\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['vscode']);\n\n\t\tmodel.setCollapsed([0], false);\n\t\tassert.deepStrictEqual(list.length, 10);\n\n\t\tdisposable.dispose();\n\t});\n\n\tsuite('getNodeLocation', () => {\n\n\t\ttest('simple', () => {\n\t\t\tconst list: IIndexTreeNode<number>[] = [];\n\t\t\tconst model = new IndexTreeModel<number>('test', -1);\n\t\t\tconst disposable = bindListToModel(list, model);\n\n\t\t\tmodel.splice([0], 0, [\n\t\t\t\t{\n\t\t\t\t\telement: 0, children: [\n\t\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t\t{ element: 12 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{ element: 1 },\n\t\t\t\t{ element: 2 }\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[0]), [0]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[1]), [0, 0]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[2]), [0, 1]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[3]), [0, 2]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[4]), [1]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[5]), [2]);\n\n\t\t\tdisposable.dispose();\n\t\t});\n\n\t\ttest('with filter', () => {\n\t\t\tconst list: IIndexTreeNode<number>[] = [];\n\t\t\tconst filter = new class implements ITreeFilter<number> {\n\t\t\t\tfilter(element: number): TreeVisibility {\n\t\t\t\t\treturn element % 2 === 0 ? TreeVisibility.Visible : TreeVisibility.Hidden;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst model = new IndexTreeModel<number>('test', -1, { filter });\n\t\t\tconst disposable = bindListToModel(list, model);\n\n\t\t\tmodel.splice([0], 0, [\n\t\t\t\t{\n\t\t\t\t\telement: 0, children: [\n\t\t\t\t\t\t{ element: 1 },\n\t\t\t\t\t\t{ element: 2 },\n\t\t\t\t\t\t{ element: 3 },\n\t\t\t\t\t\t{ element: 4 },\n\t\t\t\t\t\t{ element: 5 },\n\t\t\t\t\t\t{ element: 6 },\n\t\t\t\t\t\t{ element: 7 }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[0]), [0]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[1]), [0, 1]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[2]), [0, 3]);\n\t\t\tassert.deepStrictEqual(model.getNodeLocation(list[3]), [0, 5]);\n\n\t\t\tdisposable.dispose();\n\t\t});\n\t});\n\n\ttest('refilter with filtered out nodes', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): boolean {\n\t\t\t\treturn query.test(element);\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', 'root', { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 'silver' },\n\t\t\t{ element: 'gold' },\n\t\t\t{ element: 'platinum' }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), ['silver', 'gold', 'platinum']);\n\n\t\tquery = /platinum/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['platinum']);\n\n\t\tmodel.splice([0], Number.POSITIVE_INFINITY, [\n\t\t\t{ element: 'silver' },\n\t\t\t{ element: 'gold' },\n\t\t\t{ element: 'platinum' }\n\t\t]);\n\t\tassert.deepStrictEqual(toArray(list), ['platinum']);\n\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['platinum']);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('explicit hidden nodes should have renderNodeCount == 0, issue #83211', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet query = new RegExp('');\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string): boolean {\n\t\t\t\treturn query.test(element);\n\t\t\t}\n\t\t};\n\n\t\tconst model = new IndexTreeModel<string>('test', 'root', { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.splice([0], 0, [\n\t\t\t{ element: 'a', children: [{ element: 'aa' }] },\n\t\t\t{ element: 'b', children: [{ element: 'bb' }] }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), ['a', 'aa', 'b', 'bb']);\n\t\tassert.deepStrictEqual(model.getListIndex([0]), 0);\n\t\tassert.deepStrictEqual(model.getListIndex([0, 0]), 1);\n\t\tassert.deepStrictEqual(model.getListIndex([1]), 2);\n\t\tassert.deepStrictEqual(model.getListIndex([1, 0]), 3);\n\n\t\tquery = /b/;\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), ['b', 'bb']);\n\t\tassert.deepStrictEqual(model.getListIndex([0]), -1);\n\t\tassert.deepStrictEqual(model.getListIndex([0, 0]), -1);\n\t\tassert.deepStrictEqual(model.getListIndex([1]), 0);\n\t\tassert.deepStrictEqual(model.getListIndex([1, 0]), 1);\n\n\t\tdisposable.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": ["i"]
}
