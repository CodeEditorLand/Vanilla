{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/ui/grid/gridview.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { $ } from '../../../../browser/dom.js';\nimport { GridView, IView, Orientation, Sizing } from '../../../../browser/ui/grid/gridview.js';\nimport { nodesToArrays, TestView } from './util.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../common/utils.js';\n\nsuite('Gridview', function () {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createGridView(): GridView {\n\t\tconst gridview = store.add(new GridView());\n\t\tconst container = $('.container');\n\n\t\tcontainer.style.position = 'absolute';\n\t\tcontainer.style.width = `${200}px`;\n\t\tcontainer.style.height = `${200}px`;\n\t\tcontainer.appendChild(gridview.element);\n\n\t\treturn gridview;\n\t}\n\n\ttest('empty gridview is empty', function () {\n\t\tconst gridview = createGridView();\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), []);\n\t});\n\n\ttest('gridview addView', function () {\n\t\tconst gridview = createGridView();\n\n\t\tconst view = store.add(new TestView(20, 20, 20, 20));\n\t\tassert.throws(() => gridview.addView(view, 200, []), 'empty location');\n\t\tassert.throws(() => gridview.addView(view, 200, [1]), 'index overflow');\n\t\tassert.throws(() => gridview.addView(view, 200, [0, 0]), 'hierarchy overflow');\n\n\t\tconst views = [\n\t\t\tstore.add(new TestView(20, 20, 20, 20)),\n\t\t\tstore.add(new TestView(20, 20, 20, 20)),\n\t\t\tstore.add(new TestView(20, 20, 20, 20))\n\t\t];\n\n\t\tgridview.addView(views[0], 200, [0]);\n\t\tgridview.addView(views[1], 200, [1]);\n\t\tgridview.addView(views[2], 200, [2]);\n\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), views);\n\t});\n\n\ttest('gridview addView nested', function () {\n\t\tconst gridview = createGridView();\n\n\t\tconst views = [\n\t\t\tstore.add(new TestView(20, 20, 20, 20)),\n\t\t\t[\n\t\t\t\tstore.add(new TestView(20, 20, 20, 20)),\n\t\t\t\tstore.add(new TestView(20, 20, 20, 20))\n\t\t\t]\n\t\t];\n\n\t\tgridview.addView(views[0] as IView, 200, [0]);\n\t\tgridview.addView((views[1] as TestView[])[0] as IView, 200, [1]);\n\t\tgridview.addView((views[1] as TestView[])[1] as IView, 200, [1, 1]);\n\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), views);\n\t});\n\n\ttest('gridview addView deep nested', function () {\n\t\tconst gridview = createGridView();\n\n\t\tconst view1 = store.add(new TestView(20, 20, 20, 20));\n\t\tgridview.addView(view1 as IView, 200, [0]);\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), [view1]);\n\n\t\tconst view2 = store.add(new TestView(20, 20, 20, 20));\n\t\tgridview.addView(view2 as IView, 200, [1]);\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), [view1, view2]);\n\n\t\tconst view3 = store.add(new TestView(20, 20, 20, 20));\n\t\tgridview.addView(view3 as IView, 200, [1, 0]);\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), [view1, [view3, view2]]);\n\n\t\tconst view4 = store.add(new TestView(20, 20, 20, 20));\n\t\tgridview.addView(view4 as IView, 200, [1, 0, 0]);\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), [view1, [[view4, view3], view2]]);\n\n\t\tconst view5 = store.add(new TestView(20, 20, 20, 20));\n\t\tgridview.addView(view5 as IView, 200, [1, 0]);\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), [view1, [view5, [view4, view3], view2]]);\n\n\t\tconst view6 = store.add(new TestView(20, 20, 20, 20));\n\t\tgridview.addView(view6 as IView, 200, [2]);\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), [view1, [view5, [view4, view3], view2], view6]);\n\n\t\tconst view7 = store.add(new TestView(20, 20, 20, 20));\n\t\tgridview.addView(view7 as IView, 200, [1, 1]);\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), [view1, [view5, view7, [view4, view3], view2], view6]);\n\n\t\tconst view8 = store.add(new TestView(20, 20, 20, 20));\n\t\tgridview.addView(view8 as IView, 200, [1, 1, 0]);\n\t\tassert.deepStrictEqual(nodesToArrays(gridview.getView()), [view1, [view5, [view8, view7], [view4, view3], view2], view6]);\n\t});\n\n\ttest('simple layout', function () {\n\t\tconst gridview = createGridView();\n\t\tgridview.layout(800, 600);\n\n\t\tconst view1 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view1, 200, [0]);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([0]), { width: 800, height: 600 });\n\n\t\tconst view2 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view2, 200, [0]);\n\t\tassert.deepStrictEqual(view1.size, [800, 400]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([1]), { width: 800, height: 400 });\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([0]), { width: 800, height: 200 });\n\n\t\tconst view3 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view3, 200, [1, 1]);\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([1, 0]), { width: 600, height: 400 });\n\t\tassert.deepStrictEqual(view2.size, [800, 200]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([0]), { width: 800, height: 200 });\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([1, 1]), { width: 200, height: 400 });\n\n\t\tconst view4 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view4, 200, [0, 0]);\n\t\tassert.deepStrictEqual(view1.size, [600, 400]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([1, 0]), { width: 600, height: 400 });\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([0, 1]), { width: 600, height: 200 });\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([1, 1]), { width: 200, height: 400 });\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([0, 0]), { width: 200, height: 200 });\n\n\t\tconst view5 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view5, 100, [1, 0, 1]);\n\t\tassert.deepStrictEqual(view1.size, [600, 300]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([1, 0, 0]), { width: 600, height: 300 });\n\t\tassert.deepStrictEqual(view2.size, [600, 200]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([0, 1]), { width: 600, height: 200 });\n\t\tassert.deepStrictEqual(view3.size, [200, 400]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([1, 1]), { width: 200, height: 400 });\n\t\tassert.deepStrictEqual(view4.size, [200, 200]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([0, 0]), { width: 200, height: 200 });\n\t\tassert.deepStrictEqual(view5.size, [600, 100]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([1, 0, 1]), { width: 600, height: 100 });\n\t});\n\n\ttest('simple layout with automatic size distribution', function () {\n\t\tconst gridview = createGridView();\n\t\tgridview.layout(800, 600);\n\n\t\tconst view1 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view1, Sizing.Distribute, [0]);\n\t\tassert.deepStrictEqual(view1.size, [800, 600]);\n\t\tassert.deepStrictEqual(gridview.getViewSize([0]), { width: 800, height: 600 });\n\n\t\tconst view2 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view2, Sizing.Distribute, [0]);\n\t\tassert.deepStrictEqual(view1.size, [800, 300]);\n\t\tassert.deepStrictEqual(view2.size, [800, 300]);\n\n\t\tconst view3 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view3, Sizing.Distribute, [1, 1]);\n\t\tassert.deepStrictEqual(view1.size, [400, 300]);\n\t\tassert.deepStrictEqual(view2.size, [800, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\n\t\tconst view4 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view4, Sizing.Distribute, [0, 0]);\n\t\tassert.deepStrictEqual(view1.size, [400, 300]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\n\t\tconst view5 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view5, Sizing.Distribute, [1, 0, 1]);\n\t\tassert.deepStrictEqual(view1.size, [400, 150]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t\tassert.deepStrictEqual(view4.size, [400, 300]);\n\t\tassert.deepStrictEqual(view5.size, [400, 150]);\n\t});\n\n\ttest('addviews before layout call 1', function () {\n\t\tconst gridview = createGridView();\n\n\t\tconst view1 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view1, 200, [0]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view2, 200, [0]);\n\n\t\tconst view3 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view3, 200, [1, 1]);\n\n\t\tgridview.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1.size, [400, 300]);\n\t\tassert.deepStrictEqual(view2.size, [800, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t});\n\n\ttest('addviews before layout call 2', function () {\n\t\tconst gridview = createGridView();\n\t\tconst view1 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view1, 200, [0]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view2, 200, [0]);\n\n\t\tconst view3 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view3, 200, [0, 0]);\n\n\t\tgridview.layout(800, 600);\n\n\t\tassert.deepStrictEqual(view1.size, [800, 300]);\n\t\tassert.deepStrictEqual(view2.size, [400, 300]);\n\t\tassert.deepStrictEqual(view3.size, [400, 300]);\n\t});\n\n\ttest('flipping orientation should preserve absolute offsets', function () {\n\t\tconst gridview = createGridView();\n\t\tconst view1 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view1, 200, [0]);\n\n\t\tconst view2 = store.add(new TestView(50, Number.POSITIVE_INFINITY, 50, Number.POSITIVE_INFINITY));\n\t\tgridview.addView(view2, 200, [1]);\n\n\t\tgridview.layout(800, 600, 100, 200);\n\n\t\tassert.deepStrictEqual([view1.top, view1.left], [100, 200]);\n\t\tassert.deepStrictEqual([view2.top, view2.left], [100 + 300, 200]);\n\n\t\tgridview.orientation = Orientation.HORIZONTAL;\n\n\t\tassert.deepStrictEqual([view1.top, view1.left], [100, 200]);\n\t\tassert.deepStrictEqual([view2.top, view2.left], [100, 200 + 400]);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
