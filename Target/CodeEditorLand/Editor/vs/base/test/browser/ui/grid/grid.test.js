import e from"assert";import{createSerializedGrid as U,Direction as r,getRelativeLocation as b,Grid as N,isGridBranchNode as y,Orientation as A,sanitizeGridNodeDescriptor as f,SerializableGrid as m,Sizing as n}from"../../../../browser/ui/grid/grid.js";import{Event as M}from"../../../../common/event.js";import{deepClone as D}from"../../../../common/objects.js";import{nodesToArrays as h,TestView as w}from"./util.js";import{ensureNoDisposablesAreLeakedInTestSuite as _}from"../../../common/utils.js";import"../../../../common/lifecycle.js";suite("Grid",function(){const a=_();let c;setup(function(){c=document.createElement("div"),c.style.position="absolute",c.style.width="800px",c.style.height="600px"}),test("getRelativeLocation",()=>{e.deepStrictEqual(b(A.VERTICAL,[0],r.Up),[0]),e.deepStrictEqual(b(A.VERTICAL,[0],r.Down),[1]),e.deepStrictEqual(b(A.VERTICAL,[0],r.Left),[0,0]),e.deepStrictEqual(b(A.VERTICAL,[0],r.Right),[0,1]),e.deepStrictEqual(b(A.HORIZONTAL,[0],r.Up),[0,0]),e.deepStrictEqual(b(A.HORIZONTAL,[0],r.Down),[0,1]),e.deepStrictEqual(b(A.HORIZONTAL,[0],r.Left),[0]),e.deepStrictEqual(b(A.HORIZONTAL,[0],r.Right),[1]),e.deepStrictEqual(b(A.VERTICAL,[4],r.Up),[4]),e.deepStrictEqual(b(A.VERTICAL,[4],r.Down),[5]),e.deepStrictEqual(b(A.VERTICAL,[4],r.Left),[4,0]),e.deepStrictEqual(b(A.VERTICAL,[4],r.Right),[4,1]),e.deepStrictEqual(b(A.VERTICAL,[0,0],r.Up),[0,0,0]),e.deepStrictEqual(b(A.VERTICAL,[0,0],r.Down),[0,0,1]),e.deepStrictEqual(b(A.VERTICAL,[0,0],r.Left),[0,0]),e.deepStrictEqual(b(A.VERTICAL,[0,0],r.Right),[0,1]),e.deepStrictEqual(b(A.VERTICAL,[1,2],r.Up),[1,2,0]),e.deepStrictEqual(b(A.VERTICAL,[1,2],r.Down),[1,2,1]),e.deepStrictEqual(b(A.VERTICAL,[1,2],r.Left),[1,2]),e.deepStrictEqual(b(A.VERTICAL,[1,2],r.Right),[1,3]),e.deepStrictEqual(b(A.VERTICAL,[1,2,3],r.Up),[1,2,3]),e.deepStrictEqual(b(A.VERTICAL,[1,2,3],r.Down),[1,2,4]),e.deepStrictEqual(b(A.VERTICAL,[1,2,3],r.Left),[1,2,3,0]),e.deepStrictEqual(b(A.VERTICAL,[1,2,3],r.Right),[1,2,3,1])}),test("empty",()=>{const t=a.add(new w(100,Number.MAX_VALUE,100,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600),e.deepStrictEqual(t.size,[800,600])}),test("two views vertically",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600),e.deepStrictEqual(t.size,[800,600]);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,200,t,r.Up),e.deepStrictEqual(t.size,[800,400]),e.deepStrictEqual(d.size,[800,200])}),test("two views horizontally",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600),e.deepStrictEqual(t.size,[800,600]);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,300,t,r.Right),e.deepStrictEqual(t.size,[500,600]),e.deepStrictEqual(d.size,[300,600])}),test("simple layout",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600),e.deepStrictEqual(t.size,[800,600]);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,200,t,r.Up),e.deepStrictEqual(t.size,[800,400]),e.deepStrictEqual(d.size,[800,200]);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,200,t,r.Right),e.deepStrictEqual(t.size,[600,400]),e.deepStrictEqual(d.size,[800,200]),e.deepStrictEqual(s.size,[200,400]);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,200,d,r.Left),e.deepStrictEqual(t.size,[600,400]),e.deepStrictEqual(d.size,[600,200]),e.deepStrictEqual(s.size,[200,400]),e.deepStrictEqual(u.size,[200,200]);const l=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,100,t,r.Down),e.deepStrictEqual(t.size,[600,300]),e.deepStrictEqual(d.size,[600,200]),e.deepStrictEqual(s.size,[200,400]),e.deepStrictEqual(u.size,[200,200]),e.deepStrictEqual(l.size,[600,100])}),test("another simple layout with automatic size distribution",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600),e.deepStrictEqual(t.size,[800,600]);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Left),e.deepStrictEqual(t.size,[400,600]),e.deepStrictEqual(d.size,[400,600]);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,t,r.Right),e.deepStrictEqual(t.size,[266,600]),e.deepStrictEqual(d.size,[266,600]),e.deepStrictEqual(s.size,[268,600]);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Distribute,d,r.Down),e.deepStrictEqual(t.size,[266,600]),e.deepStrictEqual(d.size,[266,300]),e.deepStrictEqual(s.size,[268,600]),e.deepStrictEqual(u.size,[266,300]);const l=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,n.Distribute,s,r.Up),e.deepStrictEqual(t.size,[266,600]),e.deepStrictEqual(d.size,[266,300]),e.deepStrictEqual(s.size,[268,300]),e.deepStrictEqual(u.size,[266,300]),e.deepStrictEqual(l.size,[268,300]);const V=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(V,n.Distribute,s,r.Down),e.deepStrictEqual(t.size,[266,600]),e.deepStrictEqual(d.size,[266,300]),e.deepStrictEqual(s.size,[268,200]),e.deepStrictEqual(u.size,[266,300]),e.deepStrictEqual(l.size,[268,200]),e.deepStrictEqual(V.size,[268,200])}),test("another simple layout with split size distribution",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600),e.deepStrictEqual(t.size,[800,600]);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Split,t,r.Left),e.deepStrictEqual(t.size,[400,600]),e.deepStrictEqual(d.size,[400,600]);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Split,t,r.Right),e.deepStrictEqual(t.size,[200,600]),e.deepStrictEqual(d.size,[400,600]),e.deepStrictEqual(s.size,[200,600]);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Split,d,r.Down),e.deepStrictEqual(t.size,[200,600]),e.deepStrictEqual(d.size,[400,300]),e.deepStrictEqual(s.size,[200,600]),e.deepStrictEqual(u.size,[400,300]);const l=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,n.Split,s,r.Up),e.deepStrictEqual(t.size,[200,600]),e.deepStrictEqual(d.size,[400,300]),e.deepStrictEqual(s.size,[200,300]),e.deepStrictEqual(u.size,[400,300]),e.deepStrictEqual(l.size,[200,300]);const V=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(V,n.Split,s,r.Down),e.deepStrictEqual(t.size,[200,600]),e.deepStrictEqual(d.size,[400,300]),e.deepStrictEqual(s.size,[200,150]),e.deepStrictEqual(u.size,[400,300]),e.deepStrictEqual(l.size,[200,300]),e.deepStrictEqual(V.size,[200,150])}),test("3/2 layout with split",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600),e.deepStrictEqual(t.size,[800,600]);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Split,t,r.Down),e.deepStrictEqual(t.size,[800,300]),e.deepStrictEqual(d.size,[800,300]);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Split,d,r.Right),e.deepStrictEqual(t.size,[800,300]),e.deepStrictEqual(d.size,[400,300]),e.deepStrictEqual(s.size,[400,300]);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Split,t,r.Right),e.deepStrictEqual(t.size,[400,300]),e.deepStrictEqual(d.size,[400,300]),e.deepStrictEqual(s.size,[400,300]),e.deepStrictEqual(u.size,[400,300]);const l=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,n.Split,t,r.Right),e.deepStrictEqual(t.size,[200,300]),e.deepStrictEqual(d.size,[400,300]),e.deepStrictEqual(s.size,[400,300]),e.deepStrictEqual(u.size,[400,300]),e.deepStrictEqual(l.size,[200,300])}),test("sizing should be correct after branch demotion #50564",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Split,t,r.Right);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Split,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Split,d,r.Right),e.deepStrictEqual(t.size,[400,600]),e.deepStrictEqual(d.size,[200,300]),e.deepStrictEqual(s.size,[400,300]),e.deepStrictEqual(u.size,[200,300]),i.removeView(s),e.deepStrictEqual(t.size,[400,600]),e.deepStrictEqual(d.size,[200,600]),e.deepStrictEqual(u.size,[200,600])}),test("sizing should be correct after branch demotion #50675",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Down);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Distribute,s,r.Right),e.deepStrictEqual(t.size,[800,200]),e.deepStrictEqual(d.size,[800,200]),e.deepStrictEqual(s.size,[400,200]),e.deepStrictEqual(u.size,[400,200]),i.removeView(s,n.Distribute),e.deepStrictEqual(t.size,[800,200]),e.deepStrictEqual(d.size,[800,200]),e.deepStrictEqual(u.size,[800,200])}),test("getNeighborViews should work on single view layout",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600),e.deepStrictEqual(i.getNeighborViews(t,r.Up),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Down),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Left),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Up,!0),[t]),e.deepStrictEqual(i.getNeighborViews(t,r.Right,!0),[t]),e.deepStrictEqual(i.getNeighborViews(t,r.Down,!0),[t]),e.deepStrictEqual(i.getNeighborViews(t,r.Left,!0),[t])}),test("getNeighborViews should work on simple layout",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Down);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down),e.deepStrictEqual(i.getNeighborViews(t,r.Up),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Down),[d]),e.deepStrictEqual(i.getNeighborViews(t,r.Left),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Up,!0),[s]),e.deepStrictEqual(i.getNeighborViews(t,r.Right,!0),[t]),e.deepStrictEqual(i.getNeighborViews(t,r.Down,!0),[d]),e.deepStrictEqual(i.getNeighborViews(t,r.Left,!0),[t]),e.deepStrictEqual(i.getNeighborViews(d,r.Up),[t]),e.deepStrictEqual(i.getNeighborViews(d,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(d,r.Down),[s]),e.deepStrictEqual(i.getNeighborViews(d,r.Left),[]),e.deepStrictEqual(i.getNeighborViews(d,r.Up,!0),[t]),e.deepStrictEqual(i.getNeighborViews(d,r.Right,!0),[d]),e.deepStrictEqual(i.getNeighborViews(d,r.Down,!0),[s]),e.deepStrictEqual(i.getNeighborViews(d,r.Left,!0),[d]),e.deepStrictEqual(i.getNeighborViews(s,r.Up),[d]),e.deepStrictEqual(i.getNeighborViews(s,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(s,r.Down),[]),e.deepStrictEqual(i.getNeighborViews(s,r.Left),[]),e.deepStrictEqual(i.getNeighborViews(s,r.Up,!0),[d]),e.deepStrictEqual(i.getNeighborViews(s,r.Right,!0),[s]),e.deepStrictEqual(i.getNeighborViews(s,r.Down,!0),[t]),e.deepStrictEqual(i.getNeighborViews(s,r.Left,!0),[s])}),test("getNeighborViews should work on a complex layout",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Down);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Distribute,d,r.Right);const l=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,n.Distribute,u,r.Down),e.deepStrictEqual(i.getNeighborViews(t,r.Up),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(t,r.Down),[d,u]),e.deepStrictEqual(i.getNeighborViews(t,r.Left),[]),e.deepStrictEqual(i.getNeighborViews(d,r.Up),[t]),e.deepStrictEqual(i.getNeighborViews(d,r.Right),[u,l]),e.deepStrictEqual(i.getNeighborViews(d,r.Down),[s]),e.deepStrictEqual(i.getNeighborViews(d,r.Left),[]),e.deepStrictEqual(i.getNeighborViews(u,r.Up),[t]),e.deepStrictEqual(i.getNeighborViews(u,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(u,r.Down),[l]),e.deepStrictEqual(i.getNeighborViews(u,r.Left),[d]),e.deepStrictEqual(i.getNeighborViews(l,r.Up),[u]),e.deepStrictEqual(i.getNeighborViews(l,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(l,r.Down),[s]),e.deepStrictEqual(i.getNeighborViews(l,r.Left),[d]),e.deepStrictEqual(i.getNeighborViews(s,r.Up),[d,l]),e.deepStrictEqual(i.getNeighborViews(s,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(s,r.Down),[]),e.deepStrictEqual(i.getNeighborViews(s,r.Left),[])}),test("getNeighborViews should work on another simple layout",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Right);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Distribute,d,r.Right),e.deepStrictEqual(i.getNeighborViews(u,r.Up),[]),e.deepStrictEqual(i.getNeighborViews(u,r.Right),[]),e.deepStrictEqual(i.getNeighborViews(u,r.Down),[s]),e.deepStrictEqual(i.getNeighborViews(u,r.Left),[d])}),test("getNeighborViews should only return immediate neighbors",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Right);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Distribute,d,r.Right),e.deepStrictEqual(i.getNeighborViews(t,r.Right),[d,s])}),test("hiding splitviews and restoring sizes",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Right);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Distribute,d,r.Right);const l=t.size,V=d.size,E=s.size,o=u.size;i.maximizeView(t),e.deepStrictEqual(t.size,[800,600]),e.deepStrictEqual(d.size,[0,0]),e.deepStrictEqual(s.size,[0,0]),e.deepStrictEqual(u.size,[0,0]),i.exitMaximizedView(),e.deepStrictEqual(t.size,l),e.deepStrictEqual(d.size,V),e.deepStrictEqual(s.size,E),e.deepStrictEqual(u.size,o),i.maximizeView(d),e.deepStrictEqual(t.size,[0,600]),e.deepStrictEqual(d.size,[800,600]),e.deepStrictEqual(s.size,[800,0]),e.deepStrictEqual(u.size,[0,600]),i.exitMaximizedView(),e.deepStrictEqual(t.size,l),e.deepStrictEqual(d.size,V),e.deepStrictEqual(s.size,E),e.deepStrictEqual(u.size,o)}),test("hasMaximizedView",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Right);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Distribute,d,r.Right);function l(V){i.maximizeView(V),e.deepStrictEqual(i.hasMaximizedView(),!0),e.deepStrictEqual(i.isViewExpanded(t),!1),e.deepStrictEqual(i.isViewExpanded(d),!1),e.deepStrictEqual(i.isViewExpanded(s),!1),e.deepStrictEqual(i.isViewExpanded(u),!1),i.exitMaximizedView(),e.deepStrictEqual(i.hasMaximizedView(),!1)}l(t),l(d),l(s),l(u)}),test("Changes to the grid unmaximize the view",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Right);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.maximizeView(t),e.deepStrictEqual(i.hasMaximizedView(),!0),i.addView(u,n.Distribute,d,r.Right),e.deepStrictEqual(i.hasMaximizedView(),!1),e.deepStrictEqual(i.isViewVisible(t),!0),e.deepStrictEqual(i.isViewVisible(d),!0),e.deepStrictEqual(i.isViewVisible(s),!0),e.deepStrictEqual(i.isViewVisible(u),!0),i.maximizeView(t),e.deepStrictEqual(i.hasMaximizedView(),!0),i.removeView(u),e.deepStrictEqual(i.hasMaximizedView(),!1),e.deepStrictEqual(i.isViewVisible(t),!0),e.deepStrictEqual(i.isViewVisible(d),!0),e.deepStrictEqual(i.isViewVisible(s),!0),i.maximizeView(t),e.deepStrictEqual(i.hasMaximizedView(),!0),i.setViewVisible(s,!0),e.deepStrictEqual(i.hasMaximizedView(),!1),e.deepStrictEqual(i.isViewVisible(t),!0),e.deepStrictEqual(i.isViewVisible(d),!0),e.deepStrictEqual(i.isViewVisible(s),!0)}),test("Changes to the grid sizing unmaximize the view",function(){const t=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new N(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Distribute,t,r.Right);const s=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Distribute,d,r.Down);const u=a.add(new w(50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Distribute,d,r.Right),i.maximizeView(t),e.deepStrictEqual(i.hasMaximizedView(),!0),i.maximizeView(d),e.deepStrictEqual(i.hasMaximizedView(),!0),e.deepStrictEqual(i.isViewVisible(t),!1),e.deepStrictEqual(i.isViewVisible(d),!0),e.deepStrictEqual(i.isViewVisible(s),!1),e.deepStrictEqual(i.isViewVisible(u),!1),i.maximizeView(t),e.deepStrictEqual(i.hasMaximizedView(),!0),i.distributeViewSizes(),e.deepStrictEqual(i.hasMaximizedView(),!1),e.deepStrictEqual(i.isViewVisible(t),!0),e.deepStrictEqual(i.isViewVisible(d),!0),e.deepStrictEqual(i.isViewVisible(s),!0),e.deepStrictEqual(i.isViewVisible(u),!0),i.maximizeView(t),e.deepStrictEqual(i.hasMaximizedView(),!0),i.expandView(d),e.deepStrictEqual(i.hasMaximizedView(),!1),e.deepStrictEqual(i.isViewVisible(t),!0),e.deepStrictEqual(i.isViewVisible(d),!0),e.deepStrictEqual(i.isViewVisible(s),!0),e.deepStrictEqual(i.isViewVisible(u),!0),i.maximizeView(t),e.deepStrictEqual(i.hasMaximizedView(),!0),i.expandView(t),e.deepStrictEqual(i.hasMaximizedView(),!1),e.deepStrictEqual(i.isViewVisible(t),!0),e.deepStrictEqual(i.isViewVisible(d),!0),e.deepStrictEqual(i.isViewVisible(s),!0),e.deepStrictEqual(i.isViewVisible(u),!0)})});class p extends w{constructor(t,i,d,s,u){super(i,d,s,u);this.name=t}toJSON(){return{name:this.name}}}class v{constructor(c){this.store=c}views=new Map;fromJSON(c){const t=this.store.add(new p(c.name,50,Number.MAX_VALUE,50,Number.MAX_VALUE));return this.views.set(c.name,t),t}getView(c){const t=this.views.get(c);if(!t)throw new Error("Unknown view");return t}}function X(a){return y(a)?a.children.map(X):a.view.name}suite("SerializableGrid",function(){const a=_();let c;setup(function(){c=document.createElement("div"),c.style.position="absolute",c.style.width="800px",c.style.height="600px"}),test("serialize empty",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=i.serialize();e.deepStrictEqual(d,{orientation:0,width:800,height:600,root:{type:"branch",data:[{type:"leaf",data:{name:"view1"},size:600}],size:800}})}),test("serialize simple layout",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new p("view2",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,200,t,r.Up);const s=a.add(new p("view3",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,200,t,r.Right);const u=a.add(new p("view4",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,200,d,r.Left);const l=a.add(new p("view5",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,100,t,r.Down),e.deepStrictEqual(i.serialize(),{orientation:0,width:800,height:600,root:{type:"branch",data:[{type:"branch",data:[{type:"leaf",data:{name:"view4"},size:200},{type:"leaf",data:{name:"view2"},size:600}],size:200},{type:"branch",data:[{type:"branch",data:[{type:"leaf",data:{name:"view1"},size:300},{type:"leaf",data:{name:"view5"},size:100}],size:600},{type:"leaf",data:{name:"view3"},size:200}],size:400}],size:800}})}),test("deserialize empty",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=i.serialize();i.dispose();const s=new v(a),u=a.add(m.deserialize(d,s));u.layout(800,600),e.deepStrictEqual(X(u.getViews()),["view1"])}),test("deserialize simple layout",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new p("view2",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,200,t,r.Up);const s=a.add(new p("view3",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,200,t,r.Right);const u=a.add(new p("view4",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,200,d,r.Left);const l=a.add(new p("view5",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,100,t,r.Down);const V=i.serialize();i.dispose();const E=new v(a),o=a.add(m.deserialize(V,E)),S=E.getView("view1"),z=E.getView("view2"),q=E.getView("view3"),g=E.getView("view4"),L=E.getView("view5");e.deepStrictEqual(h(o.getViews()),[[g,z],[[S,L],q]]),o.layout(800,600),e.deepStrictEqual(S.size,[600,300]),e.deepStrictEqual(z.size,[600,200]),e.deepStrictEqual(q.size,[200,400]),e.deepStrictEqual(g.size,[200,200]),e.deepStrictEqual(L.size,[600,100])}),test("deserialize simple layout with scaling",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new p("view2",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,200,t,r.Up);const s=a.add(new p("view3",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,200,t,r.Right);const u=a.add(new p("view4",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,200,d,r.Left);const l=a.add(new p("view5",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,100,t,r.Down);const V=i.serialize();i.dispose();const E=new v(a),o=a.add(m.deserialize(V,E)),S=E.getView("view1"),z=E.getView("view2"),q=E.getView("view3"),g=E.getView("view4"),L=E.getView("view5");o.layout(400,800),e.deepStrictEqual(S.size,[300,400]),e.deepStrictEqual(z.size,[300,267]),e.deepStrictEqual(q.size,[100,533]),e.deepStrictEqual(g.size,[100,267]),e.deepStrictEqual(L.size,[300,133])}),test("deserialize 4 view layout (ben issue #2)",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new p("view2",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Split,t,r.Down);const s=a.add(new p("view3",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Split,d,r.Down);const u=a.add(new p("view4",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,n.Split,s,r.Right);const l=i.serialize();i.dispose();const V=new v(a),E=a.add(m.deserialize(l,V)),o=V.getView("view1"),S=V.getView("view2"),z=V.getView("view3"),q=V.getView("view4");E.layout(800,600),e.deepStrictEqual(o.size,[800,300]),e.deepStrictEqual(S.size,[800,150]),e.deepStrictEqual(z.size,[400,150]),e.deepStrictEqual(q.size,[400,150])}),test("deserialize 2 view layout (ben issue #3)",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new p("view2",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Split,t,r.Right);const s=i.serialize();i.dispose();const u=new v(a),l=a.add(m.deserialize(s,u)),V=u.getView("view1"),E=u.getView("view2");l.layout(800,600),e.deepStrictEqual(V.size,[400,600]),e.deepStrictEqual(E.size,[400,600])}),test("deserialize simple view layout #50609",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new p("view2",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,n.Split,t,r.Right);const s=a.add(new p("view3",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,n.Split,d,r.Down),i.removeView(t,n.Split);const u=i.serialize();i.dispose();const l=new v(a),V=a.add(m.deserialize(u,l)),E=l.getView("view2"),o=l.getView("view3");V.layout(800,600),e.deepStrictEqual(E.size,[800,300]),e.deepStrictEqual(o.size,[800,300])}),test("sanitizeGridNodeDescriptor",()=>{const i=D({groups:[{size:.2},{size:.2},{size:.6,groups:[{},{}]}]});f(i,!0),e.deepStrictEqual(i,{groups:[{size:.2},{size:.2},{size:.6,groups:[{size:.5},{size:.5}]}]})}),test("createSerializedGrid",()=>{const t={orientation:A.VERTICAL,groups:[{size:.2,data:"a"},{size:.2,data:"b"},{size:.6,groups:[{data:"c"},{data:"d"}]}]},i=U(t);e.deepStrictEqual(i,{root:{type:"branch",size:void 0,data:[{type:"leaf",size:.2,data:"a"},{type:"leaf",size:.2,data:"b"},{type:"branch",size:.6,data:[{type:"leaf",size:.5,data:"c"},{type:"leaf",size:.5,data:"d"}]}]},orientation:A.VERTICAL,width:1,height:1})}),test("createSerializedGrid - issue #85601, should not allow single children groups",()=>{const t=U({orientation:A.HORIZONTAL,groups:[{groups:[{},{}],size:.5},{groups:[{}],size:.5}]}),i=[],d=new class{fromJSON(){const u={element:document.createElement("div"),layout:()=>null,minimumWidth:0,maximumWidth:Number.POSITIVE_INFINITY,minimumHeight:0,maximumHeight:Number.POSITIVE_INFINITY,onDidChange:M.None,toJSON:()=>({})};return i.push(u),u}},s=a.add(m.deserialize(t,d));e.strictEqual(i.length,3),s.removeView(i[2])}),test("from",()=>{const t=()=>({element:document.createElement("div"),layout:()=>null,minimumWidth:0,maximumWidth:Number.POSITIVE_INFINITY,minimumHeight:0,maximumHeight:Number.POSITIVE_INFINITY,onDidChange:M.None,toJSON:()=>({})}),i=t(),d=t(),s=t(),u=t(),l={orientation:A.VERTICAL,groups:[{size:.2,data:i},{size:.2,data:d},{size:.6,groups:[{data:s},{data:u}]}]},V=m.from(l);e.deepStrictEqual(h(V.getViews()),[i,d,[s,u]]),V.dispose()}),test("serialize should store visibility and previous size",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new p("view2",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,200,t,r.Up);const s=a.add(new p("view3",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,200,t,r.Right);const u=a.add(new p("view4",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,200,d,r.Left);const l=a.add(new p("view5",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,100,t,r.Down),e.deepStrictEqual(t.size,[600,300]),e.deepStrictEqual(d.size,[600,200]),e.deepStrictEqual(s.size,[200,400]),e.deepStrictEqual(u.size,[200,200]),e.deepStrictEqual(l.size,[600,100]),i.setViewVisible(l,!1),e.deepStrictEqual(t.size,[600,400]),e.deepStrictEqual(d.size,[600,200]),e.deepStrictEqual(s.size,[200,400]),e.deepStrictEqual(u.size,[200,200]),e.deepStrictEqual(l.size,[600,0]),i.setViewVisible(l,!0),e.deepStrictEqual(t.size,[600,300]),e.deepStrictEqual(d.size,[600,200]),e.deepStrictEqual(s.size,[200,400]),e.deepStrictEqual(u.size,[200,200]),e.deepStrictEqual(l.size,[600,100]),i.setViewVisible(l,!1),e.deepStrictEqual(t.size,[600,400]),e.deepStrictEqual(d.size,[600,200]),e.deepStrictEqual(s.size,[200,400]),e.deepStrictEqual(u.size,[200,200]),e.deepStrictEqual(l.size,[600,0]),i.setViewVisible(l,!1);const V=i.serialize();e.deepStrictEqual(V,{orientation:0,width:800,height:600,root:{type:"branch",data:[{type:"branch",data:[{type:"leaf",data:{name:"view4"},size:200},{type:"leaf",data:{name:"view2"},size:600}],size:200},{type:"branch",data:[{type:"branch",data:[{type:"leaf",data:{name:"view1"},size:400},{type:"leaf",data:{name:"view5"},size:100,visible:!1}],size:600},{type:"leaf",data:{name:"view3"},size:200}],size:400}],size:800}}),i.dispose();const E=new v(a),o=a.add(m.deserialize(V,E)),S=E.getView("view1"),z=E.getView("view2"),q=E.getView("view3"),g=E.getView("view4"),L=E.getView("view5");e.deepStrictEqual(h(o.getViews()),[[g,z],[[S,L],q]]),o.layout(800,600),e.deepStrictEqual(S.size,[600,400]),e.deepStrictEqual(z.size,[600,200]),e.deepStrictEqual(q.size,[200,400]),e.deepStrictEqual(g.size,[200,200]),e.deepStrictEqual(L.size,[600,0]),e.deepStrictEqual(o.isViewVisible(S),!0),e.deepStrictEqual(o.isViewVisible(z),!0),e.deepStrictEqual(o.isViewVisible(q),!0),e.deepStrictEqual(o.isViewVisible(g),!0),e.deepStrictEqual(o.isViewVisible(L),!1),o.setViewVisible(L,!0),e.deepStrictEqual(S.size,[600,300]),e.deepStrictEqual(z.size,[600,200]),e.deepStrictEqual(q.size,[200,400]),e.deepStrictEqual(g.size,[200,200]),e.deepStrictEqual(L.size,[600,100]),e.deepStrictEqual(o.isViewVisible(S),!0),e.deepStrictEqual(o.isViewVisible(z),!0),e.deepStrictEqual(o.isViewVisible(q),!0),e.deepStrictEqual(o.isViewVisible(g),!0),e.deepStrictEqual(o.isViewVisible(L),!0)}),test("serialize should store visibility and previous size even for first leaf",function(){const t=a.add(new p("view1",50,Number.MAX_VALUE,50,Number.MAX_VALUE)),i=a.add(new m(t));c.appendChild(i.element),i.layout(800,600);const d=a.add(new p("view2",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(d,200,t,r.Up);const s=a.add(new p("view3",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(s,200,t,r.Right);const u=a.add(new p("view4",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(u,200,d,r.Left);const l=a.add(new p("view5",50,Number.MAX_VALUE,50,Number.MAX_VALUE));i.addView(l,100,t,r.Down),e.deepStrictEqual(t.size,[600,300]),e.deepStrictEqual(d.size,[600,200]),e.deepStrictEqual(s.size,[200,400]),e.deepStrictEqual(u.size,[200,200]),e.deepStrictEqual(l.size,[600,100]),i.setViewVisible(u,!1),e.deepStrictEqual(t.size,[600,300]),e.deepStrictEqual(d.size,[800,200]),e.deepStrictEqual(s.size,[200,400]),e.deepStrictEqual(u.size,[0,200]),e.deepStrictEqual(l.size,[600,100]);const V=i.serialize();e.deepStrictEqual(V,{orientation:0,width:800,height:600,root:{type:"branch",data:[{type:"branch",data:[{type:"leaf",data:{name:"view4"},size:200,visible:!1},{type:"leaf",data:{name:"view2"},size:800}],size:200},{type:"branch",data:[{type:"branch",data:[{type:"leaf",data:{name:"view1"},size:300},{type:"leaf",data:{name:"view5"},size:100}],size:600},{type:"leaf",data:{name:"view3"},size:200}],size:400}],size:800}}),i.dispose();const E=new v(a),o=a.add(m.deserialize(V,E)),S=E.getView("view1"),z=E.getView("view2"),q=E.getView("view3"),g=E.getView("view4"),L=E.getView("view5");e.deepStrictEqual(h(o.getViews()),[[g,z],[[S,L],q]]),o.layout(800,600),e.deepStrictEqual(S.size,[600,300]),e.deepStrictEqual(z.size,[800,200]),e.deepStrictEqual(q.size,[200,400]),e.deepStrictEqual(g.size,[0,200]),e.deepStrictEqual(L.size,[600,100]),e.deepStrictEqual(o.isViewVisible(S),!0),e.deepStrictEqual(o.isViewVisible(z),!0),e.deepStrictEqual(o.isViewVisible(q),!0),e.deepStrictEqual(o.isViewVisible(g),!1),e.deepStrictEqual(o.isViewVisible(L),!0),o.setViewVisible(g,!0),e.deepStrictEqual(S.size,[600,300]),e.deepStrictEqual(z.size,[600,200]),e.deepStrictEqual(q.size,[200,400]),e.deepStrictEqual(g.size,[200,200]),e.deepStrictEqual(L.size,[600,100]),e.deepStrictEqual(o.isViewVisible(S),!0),e.deepStrictEqual(o.isViewVisible(z),!0),e.deepStrictEqual(o.isViewVisible(q),!0),e.deepStrictEqual(o.isViewVisible(g),!0),e.deepStrictEqual(o.isViewVisible(L),!0)})});
