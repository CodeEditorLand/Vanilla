{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/ui/splitview/splitview.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Sash, SashState } from '../../../../browser/ui/sash/sash.js';\nimport { IView, LayoutPriority, Sizing, SplitView } from '../../../../browser/ui/splitview/splitview.js';\nimport { Emitter } from '../../../../common/event.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../common/utils.js';\n\nclass TestView implements IView<number> {\n\n\tprivate readonly _onDidChange = new Emitter<number | undefined>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tget minimumSize(): number { return this._minimumSize; }\n\tset minimumSize(size: number) { this._minimumSize = size; this._onDidChange.fire(undefined); }\n\n\tget maximumSize(): number { return this._maximumSize; }\n\tset maximumSize(size: number) { this._maximumSize = size; this._onDidChange.fire(undefined); }\n\n\tprivate _element: HTMLElement = document.createElement('div');\n\tget element(): HTMLElement { this._onDidGetElement.fire(); return this._element; }\n\n\tprivate readonly _onDidGetElement = new Emitter<void>();\n\treadonly onDidGetElement = this._onDidGetElement.event;\n\n\tprivate _size = 0;\n\tget size(): number { return this._size; }\n\tprivate _orthogonalSize: number | undefined = 0;\n\tget orthogonalSize(): number | undefined { return this._orthogonalSize; }\n\tprivate readonly _onDidLayout = new Emitter<{ size: number; orthogonalSize: number | undefined }>();\n\treadonly onDidLayout = this._onDidLayout.event;\n\n\tprivate readonly _onDidFocus = new Emitter<void>();\n\treadonly onDidFocus = this._onDidFocus.event;\n\n\tconstructor(\n\t\tprivate _minimumSize: number,\n\t\tprivate _maximumSize: number,\n\t\treadonly priority: LayoutPriority = LayoutPriority.Normal\n\t) {\n\t\tassert(_minimumSize <= _maximumSize, 'splitview view minimum size must be <= maximum size');\n\t}\n\n\tlayout(size: number, _offset: number, orthogonalSize: number | undefined): void {\n\t\tthis._size = size;\n\t\tthis._orthogonalSize = orthogonalSize;\n\t\tthis._onDidLayout.fire({ size, orthogonalSize });\n\t}\n\n\tfocus(): void {\n\t\tthis._onDidFocus.fire();\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t\tthis._onDidGetElement.dispose();\n\t\tthis._onDidLayout.dispose();\n\t\tthis._onDidFocus.dispose();\n\t}\n}\n\nfunction getSashes(splitview: SplitView): Sash[] {\n\treturn splitview.sashItems.map((i: any) => i.sash) as Sash[];\n}\n\nsuite('Splitview', () => {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet container: HTMLElement;\n\n\tsetup(() => {\n\t\tcontainer = document.createElement('div');\n\t\tcontainer.style.position = 'absolute';\n\t\tcontainer.style.width = `${200}px`;\n\t\tcontainer.style.height = `${200}px`;\n\t});\n\n\ttest('empty splitview has empty DOM', () => {\n\t\tstore.add(new SplitView(container));\n\t\tassert.strictEqual(container.firstElementChild!.firstElementChild!.childElementCount, 0, 'split view should be empty');\n\t});\n\n\ttest('has views and sashes as children', () => {\n\t\tconst view1 = store.add(new TestView(20, 20));\n\t\tconst view2 = store.add(new TestView(20, 20));\n\t\tconst view3 = store.add(new TestView(20, 20));\n\t\tconst splitview = store.add(new SplitView(container));\n\n\t\tsplitview.addView(view1, 20);\n\t\tsplitview.addView(view2, 20);\n\t\tsplitview.addView(view3, 20);\n\n\t\tlet viewQuery = container.querySelectorAll('.monaco-split-view2 > .monaco-scrollable-element > .split-view-container > .split-view-view');\n\t\tassert.strictEqual(viewQuery.length, 3, 'split view should have 3 views');\n\n\t\tlet sashQuery = container.querySelectorAll('.monaco-split-view2 > .sash-container > .monaco-sash');\n\t\tassert.strictEqual(sashQuery.length, 2, 'split view should have 2 sashes');\n\n\t\tsplitview.removeView(2);\n\n\t\tviewQuery = container.querySelectorAll('.monaco-split-view2 > .monaco-scrollable-element > .split-view-container > .split-view-view');\n\t\tassert.strictEqual(viewQuery.length, 2, 'split view should have 2 views');\n\n\t\tsashQuery = container.querySelectorAll('.monaco-split-view2 > .sash-container > .monaco-sash');\n\t\tassert.strictEqual(sashQuery.length, 1, 'split view should have 1 sash');\n\n\t\tsplitview.removeView(0);\n\n\t\tviewQuery = container.querySelectorAll('.monaco-split-view2 > .monaco-scrollable-element > .split-view-container > .split-view-view');\n\t\tassert.strictEqual(viewQuery.length, 1, 'split view should have 1 view');\n\n\t\tsashQuery = container.querySelectorAll('.monaco-split-view2 > .sash-container > .monaco-sash');\n\t\tassert.strictEqual(sashQuery.length, 0, 'split view should have no sashes');\n\n\t\tsplitview.removeView(0);\n\n\t\tviewQuery = container.querySelectorAll('.monaco-split-view2 > .monaco-scrollable-element > .split-view-container > .split-view-view');\n\t\tassert.strictEqual(viewQuery.length, 0, 'split view should have no views');\n\n\t\tsashQuery = container.querySelectorAll('.monaco-split-view2 > .sash-container > .monaco-sash');\n\t\tassert.strictEqual(sashQuery.length, 0, 'split view should have no sashes');\n\t});\n\n\ttest('calls view methods on addView and removeView', () => {\n\t\tconst view = store.add(new TestView(20, 20));\n\t\tconst splitview = store.add(new SplitView(container));\n\n\t\tlet didLayout = false;\n\t\tstore.add(view.onDidLayout(() => didLayout = true));\n\t\tstore.add(view.onDidGetElement(() => undefined));\n\n\t\tsplitview.addView(view, 20);\n\n\t\tassert.strictEqual(view.size, 20, 'view has right size');\n\t\tassert(didLayout, 'layout is called');\n\t\tassert(didLayout, 'render is called');\n\t});\n\n\ttest('stretches view to viewport', () => {\n\t\tconst view = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view, 20);\n\t\tassert.strictEqual(view.size, 200, 'view is stretched');\n\n\t\tsplitview.layout(200);\n\t\tassert.strictEqual(view.size, 200, 'view stayed the same');\n\n\t\tsplitview.layout(100);\n\t\tassert.strictEqual(view.size, 100, 'view is collapsed');\n\n\t\tsplitview.layout(20);\n\t\tassert.strictEqual(view.size, 20, 'view is collapsed');\n\n\t\tsplitview.layout(10);\n\t\tassert.strictEqual(view.size, 20, 'view is clamped');\n\n\t\tsplitview.layout(200);\n\t\tassert.strictEqual(view.size, 200, 'view is stretched');\n\t});\n\n\ttest('can resize views', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, 20);\n\t\tsplitview.addView(view2, 20);\n\t\tsplitview.addView(view3, 20);\n\n\t\tassert.strictEqual(view1.size, 160, 'view1 is stretched');\n\t\tassert.strictEqual(view2.size, 20, 'view2 size is 20');\n\t\tassert.strictEqual(view3.size, 20, 'view3 size is 20');\n\n\t\tsplitview.resizeView(1, 40);\n\n\t\tassert.strictEqual(view1.size, 140, 'view1 is collapsed');\n\t\tassert.strictEqual(view2.size, 40, 'view2 is stretched');\n\t\tassert.strictEqual(view3.size, 20, 'view3 stays the same');\n\n\t\tsplitview.resizeView(0, 70);\n\n\t\tassert.strictEqual(view1.size, 70, 'view1 is collapsed');\n\t\tassert.strictEqual(view2.size, 40, 'view2 stays the same');\n\t\tassert.strictEqual(view3.size, 90, 'view3 is stretched');\n\n\t\tsplitview.resizeView(2, 40);\n\n\t\tassert.strictEqual(view1.size, 70, 'view1 stays the same');\n\t\tassert.strictEqual(view2.size, 90, 'view2 is collapsed');\n\t\tassert.strictEqual(view3.size, 40, 'view3 is stretched');\n\t});\n\n\ttest('reacts to view changes', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, 20);\n\t\tsplitview.addView(view2, 20);\n\t\tsplitview.addView(view3, 20);\n\n\t\tassert.strictEqual(view1.size, 160, 'view1 is stretched');\n\t\tassert.strictEqual(view2.size, 20, 'view2 size is 20');\n\t\tassert.strictEqual(view3.size, 20, 'view3 size is 20');\n\n\t\tview1.maximumSize = 20;\n\n\t\tassert.strictEqual(view1.size, 20, 'view1 is collapsed');\n\t\tassert.strictEqual(view2.size, 20, 'view2 stays the same');\n\t\tassert.strictEqual(view3.size, 160, 'view3 is stretched');\n\n\t\tview3.maximumSize = 40;\n\n\t\tassert.strictEqual(view1.size, 20, 'view1 stays the same');\n\t\tassert.strictEqual(view2.size, 140, 'view2 is stretched');\n\t\tassert.strictEqual(view3.size, 40, 'view3 is collapsed');\n\n\t\tview2.maximumSize = 200;\n\n\t\tassert.strictEqual(view1.size, 20, 'view1 stays the same');\n\t\tassert.strictEqual(view2.size, 140, 'view2 stays the same');\n\t\tassert.strictEqual(view3.size, 40, 'view3 stays the same');\n\n\t\tview3.maximumSize = Number.POSITIVE_INFINITY;\n\t\tview3.minimumSize = 100;\n\n\t\tassert.strictEqual(view1.size, 20, 'view1 is collapsed');\n\t\tassert.strictEqual(view2.size, 80, 'view2 is collapsed');\n\t\tassert.strictEqual(view3.size, 100, 'view3 is stretched');\n\t});\n\n\ttest('sashes are properly enabled/disabled', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tsplitview.addView(view2, Sizing.Distribute);\n\t\tsplitview.addView(view3, Sizing.Distribute);\n\n\t\tconst sashes = getSashes(splitview);\n\t\tassert.strictEqual(sashes.length, 2, 'there are two sashes');\n\t\tassert.strictEqual(sashes[0].state, SashState.Enabled, 'first sash is enabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.Enabled, 'second sash is enabled');\n\n\t\tsplitview.layout(60);\n\t\tassert.strictEqual(sashes[0].state, SashState.Disabled, 'first sash is disabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.Disabled, 'second sash is disabled');\n\n\t\tsplitview.layout(20);\n\t\tassert.strictEqual(sashes[0].state, SashState.Disabled, 'first sash is disabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.Disabled, 'second sash is disabled');\n\n\t\tsplitview.layout(200);\n\t\tassert.strictEqual(sashes[0].state, SashState.Enabled, 'first sash is enabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.Enabled, 'second sash is enabled');\n\n\t\tview1.maximumSize = 20;\n\t\tassert.strictEqual(sashes[0].state, SashState.Disabled, 'first sash is disabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.Enabled, 'second sash is enabled');\n\n\t\tview2.maximumSize = 20;\n\t\tassert.strictEqual(sashes[0].state, SashState.Disabled, 'first sash is disabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.Disabled, 'second sash is disabled');\n\n\t\tview1.maximumSize = 300;\n\t\tassert.strictEqual(sashes[0].state, SashState.AtMinimum, 'first sash is enabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.AtMinimum, 'second sash is enabled');\n\n\t\tview2.maximumSize = 200;\n\t\tassert.strictEqual(sashes[0].state, SashState.AtMinimum, 'first sash is enabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.AtMinimum, 'second sash is enabled');\n\n\t\tsplitview.resizeView(0, 40);\n\t\tassert.strictEqual(sashes[0].state, SashState.Enabled, 'first sash is enabled');\n\t\tassert.strictEqual(sashes[1].state, SashState.Enabled, 'second sash is enabled');\n\t});\n\n\ttest('issue #35497', () => {\n\t\tconst view1 = store.add(new TestView(160, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(66, 66));\n\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(986);\n\n\t\tsplitview.addView(view1, 142, 0);\n\t\tassert.strictEqual(view1.size, 986, 'first view is stretched');\n\n\t\tstore.add(view2.onDidGetElement(() => {\n\t\t\tassert.throws(() => splitview.resizeView(1, 922));\n\t\t\tassert.throws(() => splitview.resizeView(1, 922));\n\t\t}));\n\n\t\tsplitview.addView(view2, 66, 0);\n\t\tassert.strictEqual(view2.size, 66, 'second view is fixed');\n\t\tassert.strictEqual(view1.size, 986 - 66, 'first view is collapsed');\n\n\t\tconst viewContainers = container.querySelectorAll('.split-view-view');\n\t\tassert.strictEqual(viewContainers.length, 2, 'there are two view containers');\n\t\tassert.strictEqual((viewContainers.item(0) as HTMLElement).style.height, '66px', 'second view container is 66px');\n\t\tassert.strictEqual<string>((viewContainers.item(1) as HTMLElement).style.height, `${986 - 66}px`, 'first view container is 66px');\n\t});\n\n\ttest('automatic size distribution', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tassert.strictEqual(view1.size, 200);\n\n\t\tsplitview.addView(view2, 50);\n\t\tassert.deepStrictEqual([view1.size, view2.size], [150, 50]);\n\n\t\tsplitview.addView(view3, Sizing.Distribute);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [66, 66, 68]);\n\n\t\tsplitview.removeView(1, Sizing.Distribute);\n\t\tassert.deepStrictEqual([view1.size, view3.size], [100, 100]);\n\t});\n\n\ttest('add views before layout', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\n\t\tsplitview.addView(view1, 100);\n\t\tsplitview.addView(view2, 75);\n\t\tsplitview.addView(view3, 25);\n\n\t\tsplitview.layout(200);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [67, 67, 66]);\n\t});\n\n\ttest('split sizing', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tassert.strictEqual(view1.size, 200);\n\n\t\tsplitview.addView(view2, Sizing.Split(0));\n\t\tassert.deepStrictEqual([view1.size, view2.size], [100, 100]);\n\n\t\tsplitview.addView(view3, Sizing.Split(1));\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [100, 50, 50]);\n\t});\n\n\ttest('split sizing 2', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tassert.strictEqual(view1.size, 200);\n\n\t\tsplitview.addView(view2, Sizing.Split(0));\n\t\tassert.deepStrictEqual([view1.size, view2.size], [100, 100]);\n\n\t\tsplitview.addView(view3, Sizing.Split(0));\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [50, 100, 50]);\n\t});\n\n\ttest('proportional layout', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tsplitview.addView(view2, Sizing.Distribute);\n\t\tassert.deepStrictEqual([view1.size, view2.size], [100, 100]);\n\n\t\tsplitview.layout(100);\n\t\tassert.deepStrictEqual([view1.size, view2.size], [50, 50]);\n\t});\n\n\ttest('disable proportional layout', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container, { proportionalLayout: false }));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tsplitview.addView(view2, Sizing.Distribute);\n\t\tassert.deepStrictEqual([view1.size, view2.size], [100, 100]);\n\n\t\tsplitview.layout(100);\n\t\tassert.deepStrictEqual([view1.size, view2.size], [80, 20]);\n\t});\n\n\ttest('high layout priority', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY, LayoutPriority.High));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst splitview = store.add(new SplitView(container, { proportionalLayout: false }));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tsplitview.addView(view2, Sizing.Distribute);\n\t\tsplitview.addView(view3, Sizing.Distribute);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [66, 68, 66]);\n\n\t\tsplitview.layout(180);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [66, 48, 66]);\n\n\t\tsplitview.layout(124);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [66, 20, 38]);\n\n\t\tsplitview.layout(60);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [20, 20, 20]);\n\n\t\tsplitview.layout(200);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [20, 160, 20]);\n\t});\n\n\ttest('low layout priority', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY, LayoutPriority.Low));\n\t\tconst splitview = store.add(new SplitView(container, { proportionalLayout: false }));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tsplitview.addView(view2, Sizing.Distribute);\n\t\tsplitview.addView(view3, Sizing.Distribute);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [66, 68, 66]);\n\n\t\tsplitview.layout(180);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [66, 48, 66]);\n\n\t\tsplitview.layout(132);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [46, 20, 66]);\n\n\t\tsplitview.layout(60);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [20, 20, 20]);\n\n\t\tsplitview.layout(200);\n\t\tassert.deepStrictEqual([view1.size, view2.size, view3.size], [20, 160, 20]);\n\t});\n\n\ttest('context propagates to views', () => {\n\t\tconst view1 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view2 = store.add(new TestView(20, Number.POSITIVE_INFINITY));\n\t\tconst view3 = store.add(new TestView(20, Number.POSITIVE_INFINITY, LayoutPriority.Low));\n\t\tconst splitview = store.add(new SplitView<number>(container, { proportionalLayout: false }));\n\t\tsplitview.layout(200);\n\n\t\tsplitview.addView(view1, Sizing.Distribute);\n\t\tsplitview.addView(view2, Sizing.Distribute);\n\t\tsplitview.addView(view3, Sizing.Distribute);\n\n\t\tsplitview.layout(200, 100);\n\t\tassert.deepStrictEqual([view1.orthogonalSize, view2.orthogonalSize, view3.orthogonalSize], [100, 100, 100]);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
