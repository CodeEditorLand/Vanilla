{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/ui/grid/util.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IView } from '../../../../browser/ui/grid/grid.js';\nimport { GridNode, isGridBranchNode } from '../../../../browser/ui/grid/gridview.js';\nimport { Emitter, Event } from '../../../../common/event.js';\n\nexport class TestView implements IView {\n\n\tprivate readonly _onDidChange = new Emitter<{ width: number; height: number } | undefined>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tget minimumWidth(): number { return this._minimumWidth; }\n\tset minimumWidth(size: number) { this._minimumWidth = size; this._onDidChange.fire(undefined); }\n\n\tget maximumWidth(): number { return this._maximumWidth; }\n\tset maximumWidth(size: number) { this._maximumWidth = size; this._onDidChange.fire(undefined); }\n\n\tget minimumHeight(): number { return this._minimumHeight; }\n\tset minimumHeight(size: number) { this._minimumHeight = size; this._onDidChange.fire(undefined); }\n\n\tget maximumHeight(): number { return this._maximumHeight; }\n\tset maximumHeight(size: number) { this._maximumHeight = size; this._onDidChange.fire(undefined); }\n\n\tprivate _element: HTMLElement = document.createElement('div');\n\tget element(): HTMLElement { this._onDidGetElement.fire(); return this._element; }\n\n\tprivate readonly _onDidGetElement = new Emitter<void>();\n\treadonly onDidGetElement = this._onDidGetElement.event;\n\n\tprivate _width = 0;\n\tget width(): number { return this._width; }\n\n\tprivate _height = 0;\n\tget height(): number { return this._height; }\n\n\tprivate _top = 0;\n\tget top(): number { return this._top; }\n\n\tprivate _left = 0;\n\tget left(): number { return this._left; }\n\n\tget size(): [number, number] { return [this.width, this.height]; }\n\n\tprivate readonly _onDidLayout = new Emitter<{ width: number; height: number; top: number; left: number }>();\n\treadonly onDidLayout: Event<{ width: number; height: number; top: number; left: number }> = this._onDidLayout.event;\n\n\tprivate readonly _onDidFocus = new Emitter<void>();\n\treadonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n\tconstructor(\n\t\tprivate _minimumWidth: number,\n\t\tprivate _maximumWidth: number,\n\t\tprivate _minimumHeight: number,\n\t\tprivate _maximumHeight: number\n\t) {\n\t\tassert(_minimumWidth <= _maximumWidth, 'gridview view minimum width must be <= maximum width');\n\t\tassert(_minimumHeight <= _maximumHeight, 'gridview view minimum height must be <= maximum height');\n\t}\n\n\tlayout(width: number, height: number, top: number, left: number): void {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._top = top;\n\t\tthis._left = left;\n\t\tthis._onDidLayout.fire({ width, height, top, left });\n\t}\n\n\tfocus(): void {\n\t\tthis._onDidFocus.fire();\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t\tthis._onDidGetElement.dispose();\n\t\tthis._onDidLayout.dispose();\n\t\tthis._onDidFocus.dispose();\n\t}\n}\n\nexport function nodesToArrays(node: GridNode): any {\n\tif (isGridBranchNode(node)) {\n\t\treturn node.children.map(nodesToArrays);\n\t} else {\n\t\treturn node.view;\n\t}\n}\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,aAAa;AACtB,SAAS,UAAU,wBAAwB;AAC3C,SAAS,SAAS,aAAa;AAExB,MAAM,SAA0B;AAAA,EA2CtC,YACS,eACA,eACA,gBACA,gBACP;AAJO;AACA;AACA;AACA;AAER,WAAO,iBAAiB,eAAe,sDAAsD;AAC7F,WAAO,kBAAkB,gBAAgB,wDAAwD;AAAA,EAClG;AAAA,EA7DD,OAUuC;AAAA;AAAA;AAAA,EAErB,eAAe,IAAI,QAAuD;AAAA,EAClF,cAAc,KAAK,aAAa;AAAA,EAEzC,IAAI,eAAuB;AAAE,WAAO,KAAK;AAAA,EAAe;AAAA,EACxD,IAAI,aAAa,MAAc;AAAE,SAAK,gBAAgB;AAAM,SAAK,aAAa,KAAK,MAAS;AAAA,EAAG;AAAA,EAE/F,IAAI,eAAuB;AAAE,WAAO,KAAK;AAAA,EAAe;AAAA,EACxD,IAAI,aAAa,MAAc;AAAE,SAAK,gBAAgB;AAAM,SAAK,aAAa,KAAK,MAAS;AAAA,EAAG;AAAA,EAE/F,IAAI,gBAAwB;AAAE,WAAO,KAAK;AAAA,EAAgB;AAAA,EAC1D,IAAI,cAAc,MAAc;AAAE,SAAK,iBAAiB;AAAM,SAAK,aAAa,KAAK,MAAS;AAAA,EAAG;AAAA,EAEjG,IAAI,gBAAwB;AAAE,WAAO,KAAK;AAAA,EAAgB;AAAA,EAC1D,IAAI,cAAc,MAAc;AAAE,SAAK,iBAAiB;AAAM,SAAK,aAAa,KAAK,MAAS;AAAA,EAAG;AAAA,EAEzF,WAAwB,SAAS,cAAc,KAAK;AAAA,EAC5D,IAAI,UAAuB;AAAE,SAAK,iBAAiB,KAAK;AAAG,WAAO,KAAK;AAAA,EAAU;AAAA,EAEhE,mBAAmB,IAAI,QAAc;AAAA,EAC7C,kBAAkB,KAAK,iBAAiB;AAAA,EAEzC,SAAS;AAAA,EACjB,IAAI,QAAgB;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EAElC,UAAU;AAAA,EAClB,IAAI,SAAiB;AAAE,WAAO,KAAK;AAAA,EAAS;AAAA,EAEpC,OAAO;AAAA,EACf,IAAI,MAAc;AAAE,WAAO,KAAK;AAAA,EAAM;AAAA,EAE9B,QAAQ;AAAA,EAChB,IAAI,OAAe;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EAExC,IAAI,OAAyB;AAAE,WAAO,CAAC,KAAK,OAAO,KAAK,MAAM;AAAA,EAAG;AAAA,EAEhD,eAAe,IAAI,QAAsE;AAAA,EACjG,cAAmF,KAAK,aAAa;AAAA,EAE7F,cAAc,IAAI,QAAc;AAAA,EACxC,aAA0B,KAAK,YAAY;AAAA,EAYpD,OAAO,OAAe,QAAgB,KAAa,MAAoB;AACtE,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,aAAa,KAAK,EAAE,OAAO,QAAQ,KAAK,KAAK,CAAC;AAAA,EACpD;AAAA,EAEA,QAAc;AACb,SAAK,YAAY,KAAK;AAAA,EACvB;AAAA,EAEA,UAAgB;AACf,SAAK,aAAa,QAAQ;AAC1B,SAAK,iBAAiB,QAAQ;AAC9B,SAAK,aAAa,QAAQ;AAC1B,SAAK,YAAY,QAAQ;AAAA,EAC1B;AACD;AAEO,SAAS,cAAc,MAAqB;AAClD,MAAI,iBAAiB,IAAI,GAAG;AAC3B,WAAO,KAAK,SAAS,IAAI,aAAa;AAAA,EACvC,OAAO;AACN,WAAO,KAAK;AAAA,EACb;AACD;AANgB;",
  "names": []
}
