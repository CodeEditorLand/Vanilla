{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/ui/tree/objectTreeModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ObjectTreeModel } from '../../../../browser/ui/tree/objectTreeModel.js';\nimport { ITreeFilter, ITreeModel, ITreeNode, ObjectTreeElementCollapseState, TreeVisibility } from '../../../../browser/ui/tree/tree.js';\nimport { timeout } from '../../../../common/async.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../common/utils.js';\nimport { IDisposable } from '../../../../common/lifecycle.js';\n\nfunction bindListToModel<T>(list: ITreeNode<T>[], model: ITreeModel<T, any, any>): IDisposable {\n\treturn model.onDidSpliceRenderedNodes(({ start, deleteCount, elements }) => {\n\t\tlist.splice(start, deleteCount, ...elements);\n\t});\n}\n\nfunction toArray<T>(list: ITreeNode<T>[]): T[] {\n\treturn list.map(i => i.element);\n}\n\nsuite('ObjectTreeModel', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('ctor', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test');\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tassert(model);\n\t\tassert.strictEqual(list.length, 0);\n\t\tassert.strictEqual(model.size, 0);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('flat', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test');\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, [\n\t\t\t{ element: 0 },\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2]);\n\t\tassert.strictEqual(model.size, 3);\n\n\t\tmodel.setChildren(null, [\n\t\t\t{ element: 3 },\n\t\t\t{ element: 4 },\n\t\t\t{ element: 5 },\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [3, 4, 5]);\n\t\tassert.strictEqual(model.size, 3);\n\n\t\tmodel.setChildren(null);\n\t\tassert.deepStrictEqual(toArray(list), []);\n\t\tassert.strictEqual(model.size, 0);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('nested', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test');\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 10, 11, 12, 1, 2]);\n\t\tassert.strictEqual(model.size, 6);\n\n\t\tmodel.setChildren(12, [\n\t\t\t{ element: 120 },\n\t\t\t{ element: 121 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 10, 11, 12, 120, 121, 1, 2]);\n\t\tassert.strictEqual(model.size, 8);\n\n\t\tmodel.setChildren(0);\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2]);\n\t\tassert.strictEqual(model.size, 3);\n\n\t\tmodel.setChildren(null);\n\t\tassert.deepStrictEqual(toArray(list), []);\n\t\tassert.strictEqual(model.size, 0);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('setChildren on collapsed node', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test');\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, [\n\t\t\t{ element: 0, collapsed: true }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0]);\n\n\t\tmodel.setChildren(0, [\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0]);\n\n\t\tmodel.setCollapsed(0, false);\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2]);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('setChildren on expanded, unrevealed node', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test');\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, [\n\t\t\t{\n\t\t\t\telement: 1, collapsed: true, children: [\n\t\t\t\t\t{ element: 11, collapsed: false }\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [1, 2]);\n\n\t\tmodel.setChildren(11, [\n\t\t\t{ element: 111 },\n\t\t\t{ element: 112 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [1, 2]);\n\n\t\tmodel.setCollapsed(1, false);\n\t\tassert.deepStrictEqual(toArray(list), [1, 11, 111, 112, 2]);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('collapse state is preserved with strict identity', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tconst model = new ObjectTreeModel<string>('test', { collapseByDefault: true });\n\t\tconst data = [{ element: 'father', children: [{ element: 'child' }] }];\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father']);\n\n\t\tmodel.setCollapsed('father', false);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child']);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child']);\n\n\t\tconst data2 = [{ element: 'father', children: [{ element: 'child' }] }, { element: 'uncle' }];\n\t\tmodel.setChildren(null, data2);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child', 'uncle']);\n\n\t\tmodel.setChildren(null, [{ element: 'uncle' }]);\n\t\tassert.deepStrictEqual(toArray(list), ['uncle']);\n\n\t\tmodel.setChildren(null, data2);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'uncle']);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father']);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('collapse state can be optionally preserved with strict identity', () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tconst model = new ObjectTreeModel<string>('test', { collapseByDefault: true });\n\t\tconst data = [{ element: 'father', collapsed: ObjectTreeElementCollapseState.PreserveOrExpanded, children: [{ element: 'child' }] }];\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child']);\n\n\t\tmodel.setCollapsed('father', true);\n\t\tassert.deepStrictEqual(toArray(list), ['father']);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father']);\n\n\t\tmodel.setCollapsed('father', false);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child']);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['father', 'child']);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('sorter', () => {\n\t\tconst compare: (a: string, b: string) => number = (a, b) => a < b ? -1 : 1;\n\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tconst model = new ObjectTreeModel<string>('test', { sorter: { compare(a, b) { return compare(a, b); } } });\n\t\tconst data = [\n\t\t\t{ element: 'cars', children: [{ element: 'sedan' }, { element: 'convertible' }, { element: 'compact' }] },\n\t\t\t{ element: 'airplanes', children: [{ element: 'passenger' }, { element: 'jet' }] },\n\t\t\t{ element: 'bicycles', children: [{ element: 'dutch' }, { element: 'mountain' }, { element: 'electric' }] },\n\t\t];\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['airplanes', 'jet', 'passenger', 'bicycles', 'dutch', 'electric', 'mountain', 'cars', 'compact', 'convertible', 'sedan']);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('resort', () => {\n\t\tlet compare: (a: string, b: string) => number = () => 0;\n\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tconst model = new ObjectTreeModel<string>('test', { sorter: { compare(a, b) { return compare(a, b); } } });\n\t\tconst data = [\n\t\t\t{ element: 'cars', children: [{ element: 'sedan' }, { element: 'convertible' }, { element: 'compact' }] },\n\t\t\t{ element: 'airplanes', children: [{ element: 'passenger' }, { element: 'jet' }] },\n\t\t\t{ element: 'bicycles', children: [{ element: 'dutch' }, { element: 'mountain' }, { element: 'electric' }] },\n\t\t];\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, data);\n\t\tassert.deepStrictEqual(toArray(list), ['cars', 'sedan', 'convertible', 'compact', 'airplanes', 'passenger', 'jet', 'bicycles', 'dutch', 'mountain', 'electric']);\n\n\t\t// lexicographical\n\t\tcompare = (a, b) => a < b ? -1 : 1;\n\n\t\t// non-recursive\n\t\tmodel.resort(null, false);\n\t\tassert.deepStrictEqual(toArray(list), ['airplanes', 'passenger', 'jet', 'bicycles', 'dutch', 'mountain', 'electric', 'cars', 'sedan', 'convertible', 'compact']);\n\n\t\t// recursive\n\t\tmodel.resort();\n\t\tassert.deepStrictEqual(toArray(list), ['airplanes', 'jet', 'passenger', 'bicycles', 'dutch', 'electric', 'mountain', 'cars', 'compact', 'convertible', 'sedan']);\n\n\t\t// reverse\n\t\tcompare = (a, b) => a < b ? 1 : -1;\n\n\t\t// scoped\n\t\tmodel.resort('cars');\n\t\tassert.deepStrictEqual(toArray(list), ['airplanes', 'jet', 'passenger', 'bicycles', 'dutch', 'electric', 'mountain', 'cars', 'sedan', 'convertible', 'compact']);\n\n\t\t// recursive\n\t\tmodel.resort();\n\t\tassert.deepStrictEqual(toArray(list), ['cars', 'sedan', 'convertible', 'compact', 'bicycles', 'mountain', 'electric', 'dutch', 'airplanes', 'passenger', 'jet']);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('expandTo', () => {\n\t\tconst list: ITreeNode<number>[] = [];\n\t\tconst model = new ObjectTreeModel<number>('test', { collapseByDefault: true });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, [\n\t\t\t{\n\t\t\t\telement: 0, children: [\n\t\t\t\t\t{ element: 10, children: [{ element: 100, children: [{ element: 1000 }] }] },\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t]\n\t\t\t},\n\t\t\t{ element: 1 },\n\t\t\t{ element: 2 }\n\t\t]);\n\n\t\tassert.deepStrictEqual(toArray(list), [0, 1, 2]);\n\t\tmodel.expandTo(1000);\n\t\tassert.deepStrictEqual(toArray(list), [0, 10, 100, 1000, 11, 12, 1, 2]);\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('issue #95641', async () => {\n\t\tconst list: ITreeNode<string>[] = [];\n\t\tlet fn = (_: string) => true;\n\t\tconst filter = new class implements ITreeFilter<string> {\n\t\t\tfilter(element: string, parentVisibility: TreeVisibility): TreeVisibility {\n\t\t\t\tif (element === 'file') {\n\t\t\t\t\treturn TreeVisibility.Recurse;\n\t\t\t\t}\n\n\t\t\t\treturn fn(element) ? TreeVisibility.Visible : parentVisibility;\n\t\t\t}\n\t\t};\n\t\tconst model = new ObjectTreeModel<string>('test', { filter });\n\t\tconst disposable = bindListToModel(list, model);\n\n\t\tmodel.setChildren(null, [{ element: 'file', children: [{ element: 'hello' }] }]);\n\t\tassert.deepStrictEqual(toArray(list), ['file', 'hello']);\n\n\t\tfn = (el: string) => el === 'world';\n\t\tmodel.refilter();\n\t\tassert.deepStrictEqual(toArray(list), []);\n\n\t\tmodel.setChildren('file', [{ element: 'world' }]);\n\t\tawait timeout(0); // wait for refilter microtask\n\t\tassert.deepStrictEqual(toArray(list), ['file', 'world']);\n\n\t\tmodel.setChildren('file', [{ element: 'hello' }]);\n\t\tawait timeout(0); // wait for refilter microtask\n\t\tassert.deepStrictEqual(toArray(list), []);\n\n\t\tmodel.setChildren('file', [{ element: 'world' }]);\n\t\tawait timeout(0); // wait for refilter microtask\n\t\tassert.deepStrictEqual(toArray(list), ['file', 'world']);\n\n\t\tdisposable.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
