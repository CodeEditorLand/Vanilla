{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/ui/tree/compressedObjectTreeModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { compress, CompressedObjectTreeModel, decompress, ICompressedTreeElement, ICompressedTreeNode } from '../../../../browser/ui/tree/compressedObjectTreeModel.js';\nimport { IObjectTreeModelSetChildrenOptions } from '../../../../browser/ui/tree/objectTreeModel.js';\nimport { ITreeModel, ITreeNode } from '../../../../browser/ui/tree/tree.js';\nimport { Iterable } from '../../../../common/iterator.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../common/utils.js';\nimport { IDisposable } from '../../../../common/lifecycle.js';\n\ninterface IResolvedCompressedTreeElement<T> extends ICompressedTreeElement<T> {\n\treadonly element: T;\n\treadonly children?: ICompressedTreeElement<T>[];\n}\n\nfunction resolve<T>(treeElement: ICompressedTreeElement<T>): IResolvedCompressedTreeElement<T> {\n\tconst result: any = { element: treeElement.element };\n\tconst children = Array.from(Iterable.from(treeElement.children), resolve);\n\n\tif (treeElement.incompressible) {\n\t\tresult.incompressible = true;\n\t}\n\n\tif (children.length > 0) {\n\t\tresult.children = children;\n\t}\n\n\treturn result;\n}\n\nsuite('CompressedObjectTree', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('compress & decompress', function () {\n\n\t\ttest('small', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = { element: 1 };\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> =\n\t\t\t\t{ element: { elements: [1], incompressible: false } };\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('no compression', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t{ element: 12 },\n\t\t\t\t\t{ element: 13 }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: { elements: [11], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [12], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [13], incompressible: false } }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('single hierarchy', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111 }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11, 111, 1111], incompressible: false }\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('deep compression', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111 },\n\t\t\t\t\t\t\t\t\t{ element: 1112 },\n\t\t\t\t\t\t\t\t\t{ element: 1113 },\n\t\t\t\t\t\t\t\t\t{ element: 1114 },\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11, 111], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: { elements: [1111], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [1112], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [1113], incompressible: false } },\n\t\t\t\t\t{ element: { elements: [1114], incompressible: false } },\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('double deep compression', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1112 },\n\t\t\t\t\t\t\t\t\t{ element: 1113 },\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 12, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 121, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1212 },\n\t\t\t\t\t\t\t\t\t{ element: 1213 },\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: { elements: [11, 111], incompressible: false },\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{ element: { elements: [1112], incompressible: false } },\n\t\t\t\t\t\t\t{ element: { elements: [1113], incompressible: false } },\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\telement: { elements: [12, 121], incompressible: false },\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{ element: { elements: [1212], incompressible: false } },\n\t\t\t\t\t\t\t{ element: { elements: [1213], incompressible: false } },\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('incompressible leaf', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111, incompressible: true }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11, 111], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: { elements: [1111], incompressible: true } }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('incompressible branch', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, incompressible: true, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111 }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{ element: { elements: [111, 1111], incompressible: true } }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('incompressible chain', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, incompressible: true, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111, incompressible: true }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1, 11], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: { elements: [111], incompressible: true },\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{ element: { elements: [1111], incompressible: true } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\n\t\ttest('incompressible tree', function () {\n\t\t\tconst decompressed: ICompressedTreeElement<number> = {\n\t\t\t\telement: 1, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: 11, incompressible: true, children: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: 111, incompressible: true, children: [\n\t\t\t\t\t\t\t\t\t{ element: 1111, incompressible: true }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst compressed: IResolvedCompressedTreeElement<ICompressedTreeNode<number>> = {\n\t\t\t\telement: { elements: [1], incompressible: false },\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\telement: { elements: [11], incompressible: true },\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telement: { elements: [111], incompressible: true },\n\t\t\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t\t\t{ element: { elements: [1111], incompressible: true } }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(resolve(compress(decompressed)), compressed);\n\t\t\tassert.deepStrictEqual(resolve(decompress(compressed)), decompressed);\n\t\t});\n\t});\n\n\tfunction bindListToModel<T>(list: ITreeNode<T>[], model: ITreeModel<T, any, any>): IDisposable {\n\t\treturn model.onDidSpliceRenderedNodes(({ start, deleteCount, elements }) => {\n\t\t\tlist.splice(start, deleteCount, ...elements);\n\t\t});\n\t}\n\n\tfunction toArray<T>(list: ITreeNode<ICompressedTreeNode<T>>[]): T[][] {\n\t\treturn list.map(i => i.element.elements);\n\t}\n\n\tsuite('CompressedObjectTreeModel', function () {\n\n\t\t/**\n\t\t * Calls that test function twice, once with an empty options and\n\t\t * once with `diffIdentityProvider`.\n\t\t */\n\t\tfunction withSmartSplice(fn: (options: IObjectTreeModelSetChildrenOptions<number, any>) => void) {\n\t\t\tfn({});\n\t\t\tfn({ diffIdentityProvider: { getId: n => String(n) } });\n\t\t}\n\n\n\t\ttest('ctor', () => {\n\t\t\tconst model = new CompressedObjectTreeModel<number>('test');\n\t\t\tassert(model);\n\t\t\tassert.strictEqual(model.size, 0);\n\t\t});\n\n\t\ttest('flat', () => withSmartSplice(options => {\n\t\t\tconst list: ITreeNode<ICompressedTreeNode<number>>[] = [];\n\t\t\tconst model = new CompressedObjectTreeModel<number>('test');\n\t\t\tconst disposable = bindListToModel(list, model);\n\n\t\t\tmodel.setChildren(null, [\n\t\t\t\t{ element: 0 },\n\t\t\t\t{ element: 1 },\n\t\t\t\t{ element: 2 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[0], [1], [2]]);\n\t\t\tassert.strictEqual(model.size, 3);\n\n\t\t\tmodel.setChildren(null, [\n\t\t\t\t{ element: 3 },\n\t\t\t\t{ element: 4 },\n\t\t\t\t{ element: 5 },\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[3], [4], [5]]);\n\t\t\tassert.strictEqual(model.size, 3);\n\n\t\t\tmodel.setChildren(null, [], options);\n\t\t\tassert.deepStrictEqual(toArray(list), []);\n\t\t\tassert.strictEqual(model.size, 0);\n\n\t\t\tdisposable.dispose();\n\t\t}));\n\n\t\ttest('nested', () => withSmartSplice(options => {\n\t\t\tconst list: ITreeNode<ICompressedTreeNode<number>>[] = [];\n\t\t\tconst model = new CompressedObjectTreeModel<number>('test');\n\t\t\tconst disposable = bindListToModel(list, model);\n\n\t\t\tmodel.setChildren(null, [\n\t\t\t\t{\n\t\t\t\t\telement: 0, children: [\n\t\t\t\t\t\t{ element: 10 },\n\t\t\t\t\t\t{ element: 11 },\n\t\t\t\t\t\t{ element: 12 },\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{ element: 1 },\n\t\t\t\t{ element: 2 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[0], [10], [11], [12], [1], [2]]);\n\t\t\tassert.strictEqual(model.size, 6);\n\n\t\t\tmodel.setChildren(12, [\n\t\t\t\t{ element: 120 },\n\t\t\t\t{ element: 121 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[0], [10], [11], [12], [120], [121], [1], [2]]);\n\t\t\tassert.strictEqual(model.size, 8);\n\n\t\t\tmodel.setChildren(0, [], options);\n\t\t\tassert.deepStrictEqual(toArray(list), [[0], [1], [2]]);\n\t\t\tassert.strictEqual(model.size, 3);\n\n\t\t\tmodel.setChildren(null, [], options);\n\t\t\tassert.deepStrictEqual(toArray(list), []);\n\t\t\tassert.strictEqual(model.size, 0);\n\n\t\t\tdisposable.dispose();\n\t\t}));\n\n\t\ttest('compressed', () => withSmartSplice(options => {\n\t\t\tconst list: ITreeNode<ICompressedTreeNode<number>>[] = [];\n\t\t\tconst model = new CompressedObjectTreeModel<number>('test');\n\t\t\tconst disposable = bindListToModel(list, model);\n\n\t\t\tmodel.setChildren(null, [\n\t\t\t\t{\n\t\t\t\t\telement: 1, children: [{\n\t\t\t\t\t\telement: 11, children: [{\n\t\t\t\t\t\t\telement: 111, children: [\n\t\t\t\t\t\t\t\t{ element: 1111 },\n\t\t\t\t\t\t\t\t{ element: 1112 },\n\t\t\t\t\t\t\t\t{ element: 1113 },\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}]\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11, 111], [1111], [1112], [1113]]);\n\t\t\tassert.strictEqual(model.size, 6);\n\n\t\t\tmodel.setChildren(11, [\n\t\t\t\t{ element: 111 },\n\t\t\t\t{ element: 112 },\n\t\t\t\t{ element: 113 },\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11], [111], [112], [113]]);\n\t\t\tassert.strictEqual(model.size, 5);\n\n\t\t\tmodel.setChildren(113, [\n\t\t\t\t{ element: 1131 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11], [111], [112], [113, 1131]]);\n\t\t\tassert.strictEqual(model.size, 6);\n\n\t\t\tmodel.setChildren(1131, [\n\t\t\t\t{ element: 1132 }\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11], [111], [112], [113, 1131, 1132]]);\n\t\t\tassert.strictEqual(model.size, 7);\n\n\t\t\tmodel.setChildren(1131, [\n\t\t\t\t{ element: 1132 },\n\t\t\t\t{ element: 1133 },\n\t\t\t], options);\n\n\t\t\tassert.deepStrictEqual(toArray(list), [[1, 11], [111], [112], [113, 1131], [1132], [1133]]);\n\t\t\tassert.strictEqual(model.size, 8);\n\n\t\t\tdisposable.dispose();\n\t\t}));\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,UAAU,2BAA2B,YAAY,wBAAwB,2BAA2B;AAC7G,SAAS,0CAA0C;AACnD,SAAS,YAAY,iBAAiB;AACtC,SAAS,gBAAgB;AACzB,SAAS,+CAA+C;AACxD,SAAS,mBAAmB;AAO5B,SAAS,QAAW,aAA2E;AAC9F,QAAM,SAAc,EAAE,SAAS,YAAY,QAAQ;AACnD,QAAM,WAAW,MAAM,KAAK,SAAS,KAAK,YAAY,QAAQ,GAAG,OAAO;AAExE,MAAI,YAAY,gBAAgB;AAC/B,WAAO,iBAAiB;AAAA,EACzB;AAEA,MAAI,SAAS,SAAS,GAAG;AACxB,WAAO,WAAW;AAAA,EACnB;AAEA,SAAO;AACR;AAbS;AAeT,MAAM,wBAAwB,WAAY;AAEzC,0CAAwC;AAExC,QAAM,yBAAyB,WAAY;AAE1C,SAAK,SAAS,WAAY;AACzB,YAAM,eAA+C,EAAE,SAAS,EAAE;AAClE,YAAM,aACL,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,GAAG,gBAAgB,MAAM,EAAE;AAErD,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAED,SAAK,kBAAkB,WAAY;AAClC,YAAM,eAA+C;AAAA,QACpD,SAAS;AAAA,QAAG,UAAU;AAAA,UACrB,EAAE,SAAS,GAAG;AAAA,UACd,EAAE,SAAS,GAAG;AAAA,UACd,EAAE,SAAS,GAAG;AAAA,QACf;AAAA,MACD;AAEA,YAAM,aAA0E;AAAA,QAC/E,SAAS,EAAE,UAAU,CAAC,CAAC,GAAG,gBAAgB,MAAM;AAAA,QAChD,UAAU;AAAA,UACT,EAAE,SAAS,EAAE,UAAU,CAAC,EAAE,GAAG,gBAAgB,MAAM,EAAE;AAAA,UACrD,EAAE,SAAS,EAAE,UAAU,CAAC,EAAE,GAAG,gBAAgB,MAAM,EAAE;AAAA,UACrD,EAAE,SAAS,EAAE,UAAU,CAAC,EAAE,GAAG,gBAAgB,MAAM,EAAE;AAAA,QACtD;AAAA,MACD;AAEA,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAED,SAAK,oBAAoB,WAAY;AACpC,YAAM,eAA+C;AAAA,QACpD,SAAS;AAAA,QAAG,UAAU;AAAA,UACrB;AAAA,YACC,SAAS;AAAA,YAAI,UAAU;AAAA,cACtB;AAAA,gBACC,SAAS;AAAA,gBAAK,UAAU;AAAA,kBACvB,EAAE,SAAS,KAAK;AAAA,gBACjB;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,YAAM,aAA0E;AAAA,QAC/E,SAAS,EAAE,UAAU,CAAC,GAAG,IAAI,KAAK,IAAI,GAAG,gBAAgB,MAAM;AAAA,MAChE;AAEA,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAED,SAAK,oBAAoB,WAAY;AACpC,YAAM,eAA+C;AAAA,QACpD,SAAS;AAAA,QAAG,UAAU;AAAA,UACrB;AAAA,YACC,SAAS;AAAA,YAAI,UAAU;AAAA,cACtB;AAAA,gBACC,SAAS;AAAA,gBAAK,UAAU;AAAA,kBACvB,EAAE,SAAS,KAAK;AAAA,kBAChB,EAAE,SAAS,KAAK;AAAA,kBAChB,EAAE,SAAS,KAAK;AAAA,kBAChB,EAAE,SAAS,KAAK;AAAA,gBACjB;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,YAAM,aAA0E;AAAA,QAC/E,SAAS,EAAE,UAAU,CAAC,GAAG,IAAI,GAAG,GAAG,gBAAgB,MAAM;AAAA,QACzD,UAAU;AAAA,UACT,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,MAAM,EAAE;AAAA,UACvD,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,MAAM,EAAE;AAAA,UACvD,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,MAAM,EAAE;AAAA,UACvD,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,MAAM,EAAE;AAAA,QACxD;AAAA,MACD;AAEA,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAED,SAAK,2BAA2B,WAAY;AAC3C,YAAM,eAA+C;AAAA,QACpD,SAAS;AAAA,QAAG,UAAU;AAAA,UACrB;AAAA,YACC,SAAS;AAAA,YAAI,UAAU;AAAA,cACtB;AAAA,gBACC,SAAS;AAAA,gBAAK,UAAU;AAAA,kBACvB,EAAE,SAAS,KAAK;AAAA,kBAChB,EAAE,SAAS,KAAK;AAAA,gBACjB;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,UACA;AAAA,YACC,SAAS;AAAA,YAAI,UAAU;AAAA,cACtB;AAAA,gBACC,SAAS;AAAA,gBAAK,UAAU;AAAA,kBACvB,EAAE,SAAS,KAAK;AAAA,kBAChB,EAAE,SAAS,KAAK;AAAA,gBACjB;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,YAAM,aAA0E;AAAA,QAC/E,SAAS,EAAE,UAAU,CAAC,CAAC,GAAG,gBAAgB,MAAM;AAAA,QAChD,UAAU;AAAA,UACT;AAAA,YACC,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,GAAG,gBAAgB,MAAM;AAAA,YACtD,UAAU;AAAA,cACT,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,MAAM,EAAE;AAAA,cACvD,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,MAAM,EAAE;AAAA,YACxD;AAAA,UACD;AAAA,UACA;AAAA,YACC,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,GAAG,gBAAgB,MAAM;AAAA,YACtD,UAAU;AAAA,cACT,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,MAAM,EAAE;AAAA,cACvD,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,MAAM,EAAE;AAAA,YACxD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAED,SAAK,uBAAuB,WAAY;AACvC,YAAM,eAA+C;AAAA,QACpD,SAAS;AAAA,QAAG,UAAU;AAAA,UACrB;AAAA,YACC,SAAS;AAAA,YAAI,UAAU;AAAA,cACtB;AAAA,gBACC,SAAS;AAAA,gBAAK,UAAU;AAAA,kBACvB,EAAE,SAAS,MAAM,gBAAgB,KAAK;AAAA,gBACvC;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,YAAM,aAA0E;AAAA,QAC/E,SAAS,EAAE,UAAU,CAAC,GAAG,IAAI,GAAG,GAAG,gBAAgB,MAAM;AAAA,QACzD,UAAU;AAAA,UACT,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,KAAK,EAAE;AAAA,QACvD;AAAA,MACD;AAEA,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAED,SAAK,yBAAyB,WAAY;AACzC,YAAM,eAA+C;AAAA,QACpD,SAAS;AAAA,QAAG,UAAU;AAAA,UACrB;AAAA,YACC,SAAS;AAAA,YAAI,UAAU;AAAA,cACtB;AAAA,gBACC,SAAS;AAAA,gBAAK,gBAAgB;AAAA,gBAAM,UAAU;AAAA,kBAC7C,EAAE,SAAS,KAAK;AAAA,gBACjB;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,YAAM,aAA0E;AAAA,QAC/E,SAAS,EAAE,UAAU,CAAC,GAAG,EAAE,GAAG,gBAAgB,MAAM;AAAA,QACpD,UAAU;AAAA,UACT,EAAE,SAAS,EAAE,UAAU,CAAC,KAAK,IAAI,GAAG,gBAAgB,KAAK,EAAE;AAAA,QAC5D;AAAA,MACD;AAEA,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAED,SAAK,wBAAwB,WAAY;AACxC,YAAM,eAA+C;AAAA,QACpD,SAAS;AAAA,QAAG,UAAU;AAAA,UACrB;AAAA,YACC,SAAS;AAAA,YAAI,UAAU;AAAA,cACtB;AAAA,gBACC,SAAS;AAAA,gBAAK,gBAAgB;AAAA,gBAAM,UAAU;AAAA,kBAC7C,EAAE,SAAS,MAAM,gBAAgB,KAAK;AAAA,gBACvC;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,YAAM,aAA0E;AAAA,QAC/E,SAAS,EAAE,UAAU,CAAC,GAAG,EAAE,GAAG,gBAAgB,MAAM;AAAA,QACpD,UAAU;AAAA,UACT;AAAA,YACC,SAAS,EAAE,UAAU,CAAC,GAAG,GAAG,gBAAgB,KAAK;AAAA,YACjD,UAAU;AAAA,cACT,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,KAAK,EAAE;AAAA,YACvD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAED,SAAK,uBAAuB,WAAY;AACvC,YAAM,eAA+C;AAAA,QACpD,SAAS;AAAA,QAAG,UAAU;AAAA,UACrB;AAAA,YACC,SAAS;AAAA,YAAI,gBAAgB;AAAA,YAAM,UAAU;AAAA,cAC5C;AAAA,gBACC,SAAS;AAAA,gBAAK,gBAAgB;AAAA,gBAAM,UAAU;AAAA,kBAC7C,EAAE,SAAS,MAAM,gBAAgB,KAAK;AAAA,gBACvC;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,YAAM,aAA0E;AAAA,QAC/E,SAAS,EAAE,UAAU,CAAC,CAAC,GAAG,gBAAgB,MAAM;AAAA,QAChD,UAAU;AAAA,UACT;AAAA,YACC,SAAS,EAAE,UAAU,CAAC,EAAE,GAAG,gBAAgB,KAAK;AAAA,YAChD,UAAU;AAAA,cACT;AAAA,gBACC,SAAS,EAAE,UAAU,CAAC,GAAG,GAAG,gBAAgB,KAAK;AAAA,gBACjD,UAAU;AAAA,kBACT,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,GAAG,gBAAgB,KAAK,EAAE;AAAA,gBACvD;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,aAAO,gBAAgB,QAAQ,SAAS,YAAY,CAAC,GAAG,UAAU;AAClE,aAAO,gBAAgB,QAAQ,WAAW,UAAU,CAAC,GAAG,YAAY;AAAA,IACrE,CAAC;AAAA,EACF,CAAC;AAED,WAAS,gBAAmB,MAAsB,OAA6C;AAC9F,WAAO,MAAM,yBAAyB,CAAC,EAAE,OAAO,aAAa,SAAS,MAAM;AAC3E,WAAK,OAAO,OAAO,aAAa,GAAG,QAAQ;AAAA,IAC5C,CAAC;AAAA,EACF;AAJS;AAMT,WAAS,QAAW,MAAkD;AACrE,WAAO,KAAK,IAAI,OAAK,EAAE,QAAQ,QAAQ;AAAA,EACxC;AAFS;AAIT,QAAM,6BAA6B,WAAY;AAM9C,aAAS,gBAAgB,IAAwE;AAChG,SAAG,CAAC,CAAC;AACL,SAAG,EAAE,sBAAsB,EAAE,OAAO,8BAAK,OAAO,CAAC,GAAb,SAAe,EAAE,CAAC;AAAA,IACvD;AAHS;AAMT,SAAK,QAAQ,MAAM;AAClB,YAAM,QAAQ,IAAI,0BAAkC,MAAM;AAC1D,aAAO,KAAK;AACZ,aAAO,YAAY,MAAM,MAAM,CAAC;AAAA,IACjC,CAAC;AAED,SAAK,QAAQ,MAAM,gBAAgB,aAAW;AAC7C,YAAM,OAAiD,CAAC;AACxD,YAAM,QAAQ,IAAI,0BAAkC,MAAM;AAC1D,YAAM,aAAa,gBAAgB,MAAM,KAAK;AAE9C,YAAM,YAAY,MAAM;AAAA,QACvB,EAAE,SAAS,EAAE;AAAA,QACb,EAAE,SAAS,EAAE;AAAA,QACb,EAAE,SAAS,EAAE;AAAA,MACd,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrD,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,MAAM;AAAA,QACvB,EAAE,SAAS,EAAE;AAAA,QACb,EAAE,SAAS,EAAE;AAAA,QACb,EAAE,SAAS,EAAE;AAAA,MACd,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrD,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,MAAM,CAAC,GAAG,OAAO;AACnC,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC;AACxC,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,iBAAW,QAAQ;AAAA,IACpB,CAAC,CAAC;AAEF,SAAK,UAAU,MAAM,gBAAgB,aAAW;AAC/C,YAAM,OAAiD,CAAC;AACxD,YAAM,QAAQ,IAAI,0BAAkC,MAAM;AAC1D,YAAM,aAAa,gBAAgB,MAAM,KAAK;AAE9C,YAAM,YAAY,MAAM;AAAA,QACvB;AAAA,UACC,SAAS;AAAA,UAAG,UAAU;AAAA,YACrB,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,SAAS,GAAG;AAAA,UACf;AAAA,QACD;AAAA,QACA,EAAE,SAAS,EAAE;AAAA,QACb,EAAE,SAAS,EAAE;AAAA,MACd,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACvE,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,IAAI;AAAA,QACrB,EAAE,SAAS,IAAI;AAAA,QACf,EAAE,SAAS,IAAI;AAAA,MAChB,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrF,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,GAAG,CAAC,GAAG,OAAO;AAChC,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrD,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,MAAM,CAAC,GAAG,OAAO;AACnC,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC;AACxC,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,iBAAW,QAAQ;AAAA,IACpB,CAAC,CAAC;AAEF,SAAK,cAAc,MAAM,gBAAgB,aAAW;AACnD,YAAM,OAAiD,CAAC;AACxD,YAAM,QAAQ,IAAI,0BAAkC,MAAM;AAC1D,YAAM,aAAa,gBAAgB,MAAM,KAAK;AAE9C,YAAM,YAAY,MAAM;AAAA,QACvB;AAAA,UACC,SAAS;AAAA,UAAG,UAAU,CAAC;AAAA,YACtB,SAAS;AAAA,YAAI,UAAU,CAAC;AAAA,cACvB,SAAS;AAAA,cAAK,UAAU;AAAA,gBACvB,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,SAAS,KAAK;AAAA,cACjB;AAAA,YACD,CAAC;AAAA,UACF,CAAC;AAAA,QACF;AAAA,MACD,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5E,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,IAAI;AAAA,QACrB,EAAE,SAAS,IAAI;AAAA,QACf,EAAE,SAAS,IAAI;AAAA,QACf,EAAE,SAAS,IAAI;AAAA,MAChB,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AACpE,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,KAAK;AAAA,QACtB,EAAE,SAAS,KAAK;AAAA,MACjB,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC;AAC1E,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,MAAM;AAAA,QACvB,EAAE,SAAS,KAAK;AAAA,MACjB,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,MAAM,IAAI,CAAC,CAAC;AAChF,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,YAAM,YAAY,MAAM;AAAA,QACvB,EAAE,SAAS,KAAK;AAAA,QAChB,EAAE,SAAS,KAAK;AAAA,MACjB,GAAG,OAAO;AAEV,aAAO,gBAAgB,QAAQ,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1F,aAAO,YAAY,MAAM,MAAM,CAAC;AAEhC,iBAAW,QAAQ;AAAA,IACpB,CAAC,CAAC;AAAA,EACH,CAAC;AACF,CAAC;",
  "names": []
}
