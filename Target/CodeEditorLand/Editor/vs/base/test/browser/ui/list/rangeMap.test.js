import t from"assert";import{consolidate as d,groupIntersect as u,RangeMap as a}from"../../../../browser/ui/list/rangeMap.js";import{Range as r}from"../../../../common/range.js";import{ensureNoDisposablesAreLeakedInTestSuite as q}from"../../../common/utils.js";suite("RangeMap",()=>{q(),test("intersection",()=>{t.deepStrictEqual(r.intersect({start:0,end:0},{start:0,end:0}),{start:0,end:0}),t.deepStrictEqual(r.intersect({start:0,end:0},{start:5,end:5}),{start:0,end:0}),t.deepStrictEqual(r.intersect({start:0,end:1},{start:5,end:6}),{start:0,end:0}),t.deepStrictEqual(r.intersect({start:5,end:6},{start:0,end:1}),{start:0,end:0}),t.deepStrictEqual(r.intersect({start:0,end:5},{start:2,end:2}),{start:0,end:0}),t.deepStrictEqual(r.intersect({start:0,end:1},{start:0,end:1}),{start:0,end:1}),t.deepStrictEqual(r.intersect({start:0,end:10},{start:0,end:5}),{start:0,end:5}),t.deepStrictEqual(r.intersect({start:0,end:5},{start:0,end:10}),{start:0,end:5}),t.deepStrictEqual(r.intersect({start:0,end:10},{start:5,end:10}),{start:5,end:10}),t.deepStrictEqual(r.intersect({start:5,end:10},{start:0,end:10}),{start:5,end:10}),t.deepStrictEqual(r.intersect({start:0,end:10},{start:2,end:8}),{start:2,end:8}),t.deepStrictEqual(r.intersect({start:2,end:8},{start:0,end:10}),{start:2,end:8}),t.deepStrictEqual(r.intersect({start:0,end:10},{start:5,end:15}),{start:5,end:10}),t.deepStrictEqual(r.intersect({start:5,end:15},{start:0,end:10}),{start:5,end:10})}),test("multiIntersect",()=>{t.deepStrictEqual(u({start:0,end:0},[{range:{start:0,end:10},size:1}]),[]),t.deepStrictEqual(u({start:10,end:20},[{range:{start:0,end:10},size:1}]),[]),t.deepStrictEqual(u({start:2,end:8},[{range:{start:0,end:10},size:1}]),[{range:{start:2,end:8},size:1}]),t.deepStrictEqual(u({start:2,end:8},[{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:5}]),[{range:{start:2,end:8},size:1}]),t.deepStrictEqual(u({start:12,end:18},[{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:5}]),[{range:{start:12,end:18},size:5}]),t.deepStrictEqual(u({start:2,end:18},[{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:5}]),[{range:{start:2,end:10},size:1},{range:{start:10,end:18},size:5}]),t.deepStrictEqual(u({start:2,end:28},[{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:5},{range:{start:20,end:30},size:10}]),[{range:{start:2,end:10},size:1},{range:{start:10,end:20},size:5},{range:{start:20,end:28},size:10}])}),test("consolidate",()=>{t.deepStrictEqual(d([]),[]),t.deepStrictEqual(d([{range:{start:0,end:10},size:1}]),[{range:{start:0,end:10},size:1}]),t.deepStrictEqual(d([{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:1}]),[{range:{start:0,end:20},size:1}]),t.deepStrictEqual(d([{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:1},{range:{start:20,end:100},size:1}]),[{range:{start:0,end:100},size:1}]),t.deepStrictEqual(d([{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:5},{range:{start:20,end:30},size:10}]),[{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:5},{range:{start:20,end:30},size:10}]),t.deepStrictEqual(d([{range:{start:0,end:10},size:1},{range:{start:10,end:20},size:2},{range:{start:20,end:100},size:2}]),[{range:{start:0,end:10},size:1},{range:{start:10,end:100},size:2}])}),test("empty",()=>{const e=new a;t.strictEqual(e.size,0),t.strictEqual(e.count,0)});const i={size:1},n={size:2},l={size:3},s={size:5},c={size:10};test("length & count",()=>{const e=new a;e.splice(0,0,[i]),t.strictEqual(e.size,1),t.strictEqual(e.count,1)}),test("length & count #2",()=>{const e=new a;e.splice(0,0,[i,i,i,i,i]),t.strictEqual(e.size,5),t.strictEqual(e.count,5)}),test("length & count #3",()=>{const e=new a;e.splice(0,0,[s]),t.strictEqual(e.size,5),t.strictEqual(e.count,1)}),test("length & count #4",()=>{const e=new a;e.splice(0,0,[s,s,s,s,s]),t.strictEqual(e.size,25),t.strictEqual(e.count,5)}),test("insert",()=>{const e=new a;e.splice(0,0,[s,s,s,s,s]),t.strictEqual(e.size,25),t.strictEqual(e.count,5),e.splice(0,0,[s,s,s,s,s]),t.strictEqual(e.size,50),t.strictEqual(e.count,10),e.splice(5,0,[c,c]),t.strictEqual(e.size,70),t.strictEqual(e.count,12),e.splice(12,0,[{size:200}]),t.strictEqual(e.size,270),t.strictEqual(e.count,13)}),test("delete",()=>{const e=new a;e.splice(0,0,[s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s]),t.strictEqual(e.size,100),t.strictEqual(e.count,20),e.splice(10,5),t.strictEqual(e.size,75),t.strictEqual(e.count,15),e.splice(0,1),t.strictEqual(e.size,70),t.strictEqual(e.count,14),e.splice(1,13),t.strictEqual(e.size,5),t.strictEqual(e.count,1),e.splice(1,1),t.strictEqual(e.size,5),t.strictEqual(e.count,1)}),test("insert & delete",()=>{const e=new a;t.strictEqual(e.size,0),t.strictEqual(e.count,0),e.splice(0,0,[i]),t.strictEqual(e.size,1),t.strictEqual(e.count,1),e.splice(0,1),t.strictEqual(e.size,0),t.strictEqual(e.count,0)}),test("insert & delete #2",()=>{const e=new a;e.splice(0,0,[i,i,i,i,i,i,i,i,i,i]),e.splice(2,6),t.strictEqual(e.count,4),t.strictEqual(e.size,4)}),test("insert & delete #3",()=>{const e=new a;e.splice(0,0,[i,i,i,i,i,i,i,i,i,i,n,n,n,n,n,n,n,n,n,n]),e.splice(8,4),t.strictEqual(e.count,16),t.strictEqual(e.size,24)}),test("insert & delete #4",()=>{const e=new a;e.splice(0,0,[i,i,i,i,i,i,i,i,i,i,n,n,n,n,n,n,n,n,n,n]),e.splice(5,0,[l,l,l,l,l]),t.strictEqual(e.count,25),t.strictEqual(e.size,45),e.splice(4,7),t.strictEqual(e.count,18),t.strictEqual(e.size,28)}),suite("indexAt, positionAt",()=>{test("empty",()=>{const e=new a;t.strictEqual(e.indexAt(0),0),t.strictEqual(e.indexAt(10),0),t.strictEqual(e.indexAt(-1),-1),t.strictEqual(e.positionAt(0),-1),t.strictEqual(e.positionAt(10),-1),t.strictEqual(e.positionAt(-1),-1)}),test("simple",()=>{const e=new a;e.splice(0,0,[i]),t.strictEqual(e.indexAt(0),0),t.strictEqual(e.indexAt(1),1),t.strictEqual(e.positionAt(0),0),t.strictEqual(e.positionAt(1),-1)}),test("simple #2",()=>{const e=new a;e.splice(0,0,[c]),t.strictEqual(e.indexAt(0),0),t.strictEqual(e.indexAt(5),0),t.strictEqual(e.indexAt(9),0),t.strictEqual(e.indexAt(10),1),t.strictEqual(e.positionAt(0),0),t.strictEqual(e.positionAt(1),-1)}),test("insert",()=>{const e=new a;e.splice(0,0,[i,i,i,i,i,i,i,i,i,i]),t.strictEqual(e.indexAt(0),0),t.strictEqual(e.indexAt(1),1),t.strictEqual(e.indexAt(5),5),t.strictEqual(e.indexAt(9),9),t.strictEqual(e.indexAt(10),10),t.strictEqual(e.indexAt(11),10),e.splice(10,0,[i,i,i,i,i,i,i,i,i,i]),t.strictEqual(e.indexAt(10),10),t.strictEqual(e.indexAt(19),19),t.strictEqual(e.indexAt(20),20),t.strictEqual(e.indexAt(21),20),t.strictEqual(e.positionAt(0),0),t.strictEqual(e.positionAt(1),1),t.strictEqual(e.positionAt(19),19),t.strictEqual(e.positionAt(20),-1)}),test("delete",()=>{const e=new a;e.splice(0,0,[i,i,i,i,i,i,i,i,i,i]),e.splice(2,6),t.strictEqual(e.indexAt(0),0),t.strictEqual(e.indexAt(1),1),t.strictEqual(e.indexAt(3),3),t.strictEqual(e.indexAt(4),4),t.strictEqual(e.indexAt(5),4),t.strictEqual(e.positionAt(0),0),t.strictEqual(e.positionAt(1),1),t.strictEqual(e.positionAt(3),3),t.strictEqual(e.positionAt(4),-1)}),test("delete #2",()=>{const e=new a;e.splice(0,0,[c,c,c,c,c,c,c,c,c,c]),e.splice(2,6),t.strictEqual(e.indexAt(0),0),t.strictEqual(e.indexAt(1),0),t.strictEqual(e.indexAt(30),3),t.strictEqual(e.indexAt(40),4),t.strictEqual(e.indexAt(50),4),t.strictEqual(e.positionAt(0),0),t.strictEqual(e.positionAt(1),10),t.strictEqual(e.positionAt(2),20),t.strictEqual(e.positionAt(3),30),t.strictEqual(e.positionAt(4),-1)})})}),suite("RangeMap with top padding",()=>{q(),test("empty",()=>{const s=new a(10);t.strictEqual(s.size,10),t.strictEqual(s.count,0)});const i={size:1},n={size:5},l={size:10};test("length & count",()=>{const s=new a(10);s.splice(0,0,[i]),t.strictEqual(s.size,11),t.strictEqual(s.count,1)}),test("length & count #2",()=>{const s=new a(10);s.splice(0,0,[i,i,i,i,i]),t.strictEqual(s.size,15),t.strictEqual(s.count,5)}),test("length & count #3",()=>{const s=new a(10);s.splice(0,0,[n]),t.strictEqual(s.size,15),t.strictEqual(s.count,1)}),test("length & count #4",()=>{const s=new a(10);s.splice(0,0,[n,n,n,n,n]),t.strictEqual(s.size,35),t.strictEqual(s.count,5)}),test("insert",()=>{const s=new a(10);s.splice(0,0,[n,n,n,n,n]),t.strictEqual(s.size,35),t.strictEqual(s.count,5),s.splice(0,0,[n,n,n,n,n]),t.strictEqual(s.size,60),t.strictEqual(s.count,10),s.splice(5,0,[l,l]),t.strictEqual(s.size,80),t.strictEqual(s.count,12),s.splice(12,0,[{size:200}]),t.strictEqual(s.size,280),t.strictEqual(s.count,13)}),suite("indexAt, positionAt",()=>{test("empty",()=>{const s=new a(10);t.strictEqual(s.indexAt(0),0),t.strictEqual(s.indexAt(10),0),t.strictEqual(s.indexAt(-1),-1),t.strictEqual(s.positionAt(0),-1),t.strictEqual(s.positionAt(10),-1),t.strictEqual(s.positionAt(-1),-1)}),test("simple",()=>{const s=new a(10);s.splice(0,0,[i]),t.strictEqual(s.indexAt(0),0),t.strictEqual(s.indexAt(1),0),t.strictEqual(s.indexAt(10),0),t.strictEqual(s.indexAt(11),1),t.strictEqual(s.positionAt(0),10),t.strictEqual(s.positionAt(1),-1)})})});
