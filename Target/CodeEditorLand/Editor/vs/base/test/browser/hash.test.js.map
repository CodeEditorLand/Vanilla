{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/hash.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { sha1Hex } from '../../browser/hash.js';\nimport { hash, StringSHA1 } from '../../common/hash.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\nsuite('Hash', () => {\n\ttest('string', () => {\n\t\tassert.strictEqual(hash('hello'), hash('hello'));\n\t\tassert.notStrictEqual(hash('hello'), hash('world'));\n\t\tassert.notStrictEqual(hash('hello'), hash('olleh'));\n\t\tassert.notStrictEqual(hash('hello'), hash('Hello'));\n\t\tassert.notStrictEqual(hash('hello'), hash('Hello '));\n\t\tassert.notStrictEqual(hash('h'), hash('H'));\n\t\tassert.notStrictEqual(hash('-'), hash('_'));\n\t});\n\n\ttest('number', () => {\n\t\tassert.strictEqual(hash(1), hash(1));\n\t\tassert.notStrictEqual(hash(0), hash(1));\n\t\tassert.notStrictEqual(hash(1), hash(-1));\n\t\tassert.notStrictEqual(hash(0x12345678), hash(0x123456789));\n\t});\n\n\ttest('boolean', () => {\n\t\tassert.strictEqual(hash(true), hash(true));\n\t\tassert.notStrictEqual(hash(true), hash(false));\n\t});\n\n\ttest('array', () => {\n\t\tassert.strictEqual(hash([1, 2, 3]), hash([1, 2, 3]));\n\t\tassert.strictEqual(hash(['foo', 'bar']), hash(['foo', 'bar']));\n\t\tassert.strictEqual(hash([]), hash([]));\n\t\tassert.strictEqual(hash([]), hash(new Array()));\n\t\tassert.notStrictEqual(hash(['foo', 'bar']), hash(['bar', 'foo']));\n\t\tassert.notStrictEqual(hash(['foo', 'bar']), hash(['bar', 'foo', null]));\n\t\tassert.notStrictEqual(hash(['foo', 'bar', null]), hash(['bar', 'foo', null]));\n\t\tassert.notStrictEqual(hash(['foo', 'bar']), hash(['bar', 'foo', undefined]));\n\t\tassert.notStrictEqual(hash(['foo', 'bar', undefined]), hash(['bar', 'foo', undefined]));\n\t\tassert.notStrictEqual(hash(['foo', 'bar', null]), hash(['foo', 'bar', undefined]));\n\t});\n\n\ttest('object', () => {\n\t\tassert.strictEqual(hash({}), hash({}));\n\t\tassert.strictEqual(hash({}), hash(Object.create(null)));\n\t\tassert.strictEqual(hash({ 'foo': 'bar' }), hash({ 'foo': 'bar' }));\n\t\tassert.strictEqual(hash({ 'foo': 'bar', 'foo2': undefined }), hash({ 'foo2': undefined, 'foo': 'bar' }));\n\t\tassert.notStrictEqual(hash({ 'foo': 'bar' }), hash({ 'foo': 'bar2' }));\n\t\tassert.notStrictEqual(hash({}), hash([]));\n\t});\n\n\ttest('array - unexpected collision', function () {\n\t\tconst a = hash([undefined, undefined, undefined, undefined, undefined]);\n\t\tconst b = hash([undefined, undefined, 'HHHHHH', [{ line: 0, character: 0 }, { line: 0, character: 0 }], undefined]);\n\t\tassert.notStrictEqual(a, b);\n\t});\n\n\ttest('all different', () => {\n\t\tconst candidates: any[] = [\n\t\t\tnull, undefined, {}, [], 0, false, true, '', ' ', [null], [undefined], [undefined, undefined], { '': undefined }, { [' ']: undefined },\n\t\t\t'ab', 'ba', ['ab']\n\t\t];\n\t\tconst hashes: number[] = candidates.map(hash);\n\t\tfor (let i = 0; i < hashes.length; i++) {\n\t\t\tassert.strictEqual(hashes[i], hash(candidates[i])); // verify that repeated invocation returns the same hash\n\t\t\tfor (let k = i + 1; k < hashes.length; k++) {\n\t\t\t\tassert.notStrictEqual(hashes[i], hashes[k], `Same hash ${hashes[i]} for ${JSON.stringify(candidates[i])} and ${JSON.stringify(candidates[k])}`);\n\t\t\t}\n\t\t}\n\t});\n\n\n\tasync function checkSHA1(str: string, expected: string) {\n\n\t\t// Test with StringSHA1\n\t\tconst hash = new StringSHA1();\n\t\thash.update(str);\n\t\tlet actual = hash.digest();\n\t\tassert.strictEqual(actual, expected);\n\n\t\t// Test with crypto.subtle\n\t\tactual = await sha1Hex(str);\n\t\tassert.strictEqual(actual, expected);\n\t}\n\n\ttest('sha1-1', () => {\n\t\treturn checkSHA1('\\udd56', '9bdb77276c1852e1fb067820472812fcf6084024');\n\t});\n\n\ttest('sha1-2', () => {\n\t\treturn checkSHA1('\\udb52', '9bdb77276c1852e1fb067820472812fcf6084024');\n\t});\n\n\ttest('sha1-3', () => {\n\t\treturn checkSHA1('\\uda02\uA44D', '9b483a471f22fe7e09d83f221871a987244bbd3f');\n\t});\n\n\ttest('sha1-4', () => {\n\t\treturn checkSHA1('hello', 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d');\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["hash"]
}
