{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/markdownRenderer.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { fillInIncompleteTokens, renderMarkdown, renderMarkdownAsPlaintext } from '../../browser/markdownRenderer.js';\nimport { IMarkdownString, MarkdownString } from '../../common/htmlContent.js';\nimport * as marked from '../../common/marked/marked.js';\nimport { parse } from '../../common/marshalling.js';\nimport { isWeb } from '../../common/platform.js';\nimport { URI } from '../../common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\nfunction strToNode(str: string): HTMLElement {\n\treturn new DOMParser().parseFromString(str, 'text/html').body.firstChild as HTMLElement;\n}\n\nfunction assertNodeEquals(actualNode: HTMLElement, expectedHtml: string) {\n\tconst expectedNode = strToNode(expectedHtml);\n\tassert.ok(\n\t\tactualNode.isEqualNode(expectedNode),\n\t\t`Expected: ${expectedNode.outerHTML}\\nActual: ${actualNode.outerHTML}`);\n}\n\nsuite('MarkdownRenderer', () => {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('Sanitization', () => {\n\t\ttest('Should not render images with unknown schemes', () => {\n\t\t\tconst markdown = { value: `![image](no-such://example.com/cat.gif)` };\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(markdown)).element;\n\t\t\tassert.strictEqual(result.innerHTML, '<p><img alt=\"image\"></p>');\n\t\t});\n\t});\n\n\tsuite('Images', () => {\n\t\ttest('image rendering conforms to default', () => {\n\t\t\tconst markdown = { value: `![image](http://example.com/cat.gif 'caption')` };\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(markdown)).element;\n\t\t\tassertNodeEquals(result, '<div><p><img title=\"caption\" alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>');\n\t\t});\n\n\t\ttest('image rendering conforms to default without title', () => {\n\t\t\tconst markdown = { value: `![image](http://example.com/cat.gif)` };\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(markdown)).element;\n\t\t\tassertNodeEquals(result, '<div><p><img alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>');\n\t\t});\n\n\t\ttest('image width from title params', () => {\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown({ value: `![image](http://example.com/cat.gif|width=100px 'caption')` })).element;\n\t\t\tassertNodeEquals(result, `<div><p><img width=\"100\" title=\"caption\" alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>`);\n\t\t});\n\n\t\ttest('image height from title params', () => {\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown({ value: `![image](http://example.com/cat.gif|height=100 'caption')` })).element;\n\t\t\tassertNodeEquals(result, `<div><p><img height=\"100\" title=\"caption\" alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>`);\n\t\t});\n\n\t\ttest('image width and height from title params', () => {\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown({ value: `![image](http://example.com/cat.gif|height=200,width=100 'caption')` })).element;\n\t\t\tassertNodeEquals(result, `<div><p><img height=\"200\" width=\"100\" title=\"caption\" alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>`);\n\t\t});\n\n\t\ttest('image with file uri should render as same origin uri', () => {\n\t\t\tif (isWeb) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown({ value: `![image](file:///images/cat.gif)` })).element;\n\t\t\tassertNodeEquals(result, '<div><p><img src=\"vscode-file://vscode-app/images/cat.gif\" alt=\"image\"></p></div>');\n\t\t});\n\t});\n\n\tsuite('Code block renderer', () => {\n\t\tconst simpleCodeBlockRenderer = (lang: string, code: string): Promise<HTMLElement> => {\n\t\t\tconst element = document.createElement('code');\n\t\t\telement.textContent = code;\n\t\t\treturn Promise.resolve(element);\n\t\t};\n\n\t\ttest('asyncRenderCallback should be invoked for code blocks', () => {\n\t\t\tconst markdown = { value: '```js\\n1 + 1;\\n```' };\n\t\t\treturn new Promise<void>(resolve => {\n\t\t\t\tstore.add(renderMarkdown(markdown, {\n\t\t\t\t\tasyncRenderCallback: resolve,\n\t\t\t\t\tcodeBlockRenderer: simpleCodeBlockRenderer\n\t\t\t\t}));\n\t\t\t});\n\t\t});\n\n\t\ttest('asyncRenderCallback should not be invoked if result is immediately disposed', () => {\n\t\t\tconst markdown = { value: '```js\\n1 + 1;\\n```' };\n\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tconst result = renderMarkdown(markdown, {\n\t\t\t\t\tasyncRenderCallback: reject,\n\t\t\t\t\tcodeBlockRenderer: simpleCodeBlockRenderer\n\t\t\t\t});\n\t\t\t\tresult.dispose();\n\t\t\t\tsetTimeout(resolve, 10);\n\t\t\t});\n\t\t});\n\n\t\ttest('asyncRenderCallback should not be invoked if dispose is called before code block is rendered', () => {\n\t\t\tconst markdown = { value: '```js\\n1 + 1;\\n```' };\n\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tlet resolveCodeBlockRendering: (x: HTMLElement) => void;\n\t\t\t\tconst result = renderMarkdown(markdown, {\n\t\t\t\t\tasyncRenderCallback: reject,\n\t\t\t\t\tcodeBlockRenderer: () => {\n\t\t\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\t\t\tresolveCodeBlockRendering = resolve;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresult.dispose();\n\t\t\t\t\tresolveCodeBlockRendering(document.createElement('code'));\n\t\t\t\t\tsetTimeout(resolve, 10);\n\t\t\t\t}, 10);\n\t\t\t});\n\t\t});\n\n\t\ttest('Code blocks should use leading language id (#157793)', async () => {\n\t\t\tconst markdown = { value: '```js some other stuff\\n1 + 1;\\n```' };\n\t\t\tconst lang = await new Promise<string>(resolve => {\n\t\t\t\tstore.add(renderMarkdown(markdown, {\n\t\t\t\t\tcodeBlockRenderer: async (lang, value) => {\n\t\t\t\t\t\tresolve(lang);\n\t\t\t\t\t\treturn simpleCodeBlockRenderer(lang, value);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\t\t\tassert.strictEqual(lang, 'js');\n\t\t});\n\t});\n\n\tsuite('ThemeIcons Support On', () => {\n\n\t\ttest('render appendText', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendText('$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>$(zap)&nbsp;$(not&nbsp;a&nbsp;theme&nbsp;icon)&nbsp;$(add)</p>`);\n\t\t});\n\n\t\ttest('render appendMarkdown', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendMarkdown('$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p><span class=\"codicon codicon-zap\"></span> $(not a theme icon) <span class=\"codicon codicon-add\"></span></p>`);\n\t\t});\n\n\t\ttest('render appendMarkdown with escaped icon', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendMarkdown('\\\\$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>$(zap) $(not a theme icon) <span class=\"codicon codicon-add\"></span></p>`);\n\t\t});\n\n\t\ttest('render icon in link', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendMarkdown(`[$(zap)-link](#link)`);\n\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p><a data-href=\"#link\" href=\"\" title=\"#link\" draggable=\"false\"><span class=\"codicon codicon-zap\"></span>-link</a></p>`);\n\t\t});\n\n\t\ttest('render icon in table', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendMarkdown(`\n| text   | text                 |\n|--------|----------------------|\n| $(zap) | [$(zap)-link](#link) |`);\n\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<table>\n<thead>\n<tr>\n<th>text</th>\n<th>text</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"codicon codicon-zap\"></span></td>\n<td><a data-href=\"#link\" href=\"\" title=\"#link\" draggable=\"false\"><span class=\"codicon codicon-zap\"></span>-link</a></td>\n</tr>\n</tbody></table>\n`);\n\t\t});\n\n\t\ttest('render icon in <a> without href (#152170)', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true, supportHtml: true });\n\t\t\tmds.appendMarkdown(`<a>$(sync)</a>`);\n\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p><span class=\"codicon codicon-sync\"></span></p>`);\n\t\t});\n\t});\n\n\tsuite('ThemeIcons Support Off', () => {\n\n\t\ttest('render appendText', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: false });\n\t\t\tmds.appendText('$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>$(zap)&nbsp;$(not&nbsp;a&nbsp;theme&nbsp;icon)&nbsp;$(add)</p>`);\n\t\t});\n\n\t\ttest('render appendMarkdown with escaped icon', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: false });\n\t\t\tmds.appendMarkdown('\\\\$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>$(zap) $(not a theme icon) $(add)</p>`);\n\t\t});\n\t});\n\n\ttest('npm Hover Run Script not working #90855', function () {\n\n\t\tconst md: IMarkdownString = JSON.parse('{\"value\":\"[Run Script](command:npm.runScriptFromHover?%7B%22documentUri%22%3A%7B%22%24mid%22%3A1%2C%22fsPath%22%3A%22c%3A%5C%5CUsers%5C%5Cjrieken%5C%5CCode%5C%5C_sample%5C%5Cfoo%5C%5Cpackage.json%22%2C%22_sep%22%3A1%2C%22external%22%3A%22file%3A%2F%2F%2Fc%253A%2FUsers%2Fjrieken%2FCode%2F_sample%2Ffoo%2Fpackage.json%22%2C%22path%22%3A%22%2Fc%3A%2FUsers%2Fjrieken%2FCode%2F_sample%2Ffoo%2Fpackage.json%22%2C%22scheme%22%3A%22file%22%7D%2C%22script%22%3A%22echo%22%7D \\\\\"Run the script as a task\\\\\")\",\"supportThemeIcons\":false,\"isTrusted\":true,\"uris\":{\"__uri_e49443\":{\"$mid\":1,\"fsPath\":\"c:\\\\\\\\Users\\\\\\\\jrieken\\\\\\\\Code\\\\\\\\_sample\\\\\\\\foo\\\\\\\\package.json\",\"_sep\":1,\"external\":\"file:///c%3A/Users/jrieken/Code/_sample/foo/package.json\",\"path\":\"/c:/Users/jrieken/Code/_sample/foo/package.json\",\"scheme\":\"file\"},\"command:npm.runScriptFromHover?%7B%22documentUri%22%3A%7B%22%24mid%22%3A1%2C%22fsPath%22%3A%22c%3A%5C%5CUsers%5C%5Cjrieken%5C%5CCode%5C%5C_sample%5C%5Cfoo%5C%5Cpackage.json%22%2C%22_sep%22%3A1%2C%22external%22%3A%22file%3A%2F%2F%2Fc%253A%2FUsers%2Fjrieken%2FCode%2F_sample%2Ffoo%2Fpackage.json%22%2C%22path%22%3A%22%2Fc%3A%2FUsers%2Fjrieken%2FCode%2F_sample%2Ffoo%2Fpackage.json%22%2C%22scheme%22%3A%22file%22%7D%2C%22script%22%3A%22echo%22%7D\":{\"$mid\":1,\"path\":\"npm.runScriptFromHover\",\"scheme\":\"command\",\"query\":\"{\\\\\"documentUri\\\\\":\\\\\"__uri_e49443\\\\\",\\\\\"script\\\\\":\\\\\"echo\\\\\"}\"}}}');\n\t\tconst element = store.add(renderMarkdown(md)).element;\n\n\t\tconst anchor = element.querySelector('a')!;\n\t\tassert.ok(anchor);\n\t\tassert.ok(anchor.dataset['href']);\n\n\t\tconst uri = URI.parse(anchor.dataset['href']!);\n\n\t\tconst data = <{ script: string; documentUri: URI }>parse(decodeURIComponent(uri.query));\n\t\tassert.ok(data);\n\t\tassert.strictEqual(data.script, 'echo');\n\t\tassert.ok(data.documentUri.toString().startsWith('file:///c%3A/'));\n\t});\n\n\ttest('Should not render command links by default', () => {\n\t\tconst md = new MarkdownString(`[command1](command:doFoo) <a href=\"command:doFoo\">command2</a>`, {\n\t\t\tsupportHtml: true\n\t\t});\n\n\t\tconst result: HTMLElement = store.add(renderMarkdown(md)).element;\n\t\tassert.strictEqual(result.innerHTML, `<p>command1 command2</p>`);\n\t});\n\n\ttest('Should render command links in trusted strings', () => {\n\t\tconst md = new MarkdownString(`[command1](command:doFoo) <a href=\"command:doFoo\">command2</a>`, {\n\t\t\tisTrusted: true,\n\t\t\tsupportHtml: true,\n\t\t});\n\n\t\tconst result: HTMLElement = store.add(renderMarkdown(md)).element;\n\t\tassert.strictEqual(result.innerHTML, `<p><a data-href=\"command:doFoo\" href=\"\" title=\"command:doFoo\" draggable=\"false\">command1</a> <a data-href=\"command:doFoo\" href=\"\">command2</a></p>`);\n\t});\n\n\tsuite('PlaintextMarkdownRender', () => {\n\n\t\ttest('test code, blockquote, heading, list, listitem, paragraph, table, tablerow, tablecell, strong, em, br, del, text are rendered plaintext', () => {\n\t\t\tconst markdown = { value: '`code`\\n>quote\\n# heading\\n- list\\n\\ntable | table2\\n--- | --- \\none | two\\n\\n\\nbo**ld**\\n_italic_\\n~~del~~\\nsome text' };\n\t\t\tconst expected = 'code\\nquote\\nheading\\nlist\\n\\ntable table2\\none two\\nbold\\nitalic\\ndel\\nsome text\\n';\n\t\t\tconst result: string = renderMarkdownAsPlaintext(markdown);\n\t\t\tassert.strictEqual(result, expected);\n\t\t});\n\n\t\ttest('test html, hr, image, link are rendered plaintext', () => {\n\t\t\tconst markdown = { value: '<div>html</div>\\n\\n---\\n![image](imageLink)\\n[text](textLink)' };\n\t\t\tconst expected = '\\ntext\\n';\n\t\t\tconst result: string = renderMarkdownAsPlaintext(markdown);\n\t\t\tassert.strictEqual(result, expected);\n\t\t});\n\t});\n\n\tsuite('supportHtml', () => {\n\t\ttest('supportHtml is disabled by default', () => {\n\t\t\tconst mds = new MarkdownString(undefined, {});\n\t\t\tmds.appendMarkdown('a<b>b</b>c');\n\n\t\t\tconst result = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>abc</p>`);\n\t\t});\n\n\t\ttest('Renders html when supportHtml=true', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendMarkdown('a<b>b</b>c');\n\n\t\t\tconst result = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>a<b>b</b>c</p>`);\n\t\t});\n\n\t\ttest('Should not include scripts even when supportHtml=true', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendMarkdown('a<b onclick=\"alert(1)\">b</b><script>alert(2)</script>c');\n\n\t\t\tconst result = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>a<b>b</b>c</p>`);\n\t\t});\n\n\t\ttest('Should not render html appended as text', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendText('a<b>b</b>c');\n\n\t\t\tconst result = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>a&lt;b&gt;b&lt;/b&gt;c</p>`);\n\t\t});\n\n\t\ttest('Should render html images', () => {\n\t\t\tif (isWeb) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendMarkdown(`<img src=\"http://example.com/cat.gif\">`);\n\n\t\t\tconst result = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<img src=\"http://example.com/cat.gif\">`);\n\t\t});\n\n\t\ttest('Should render html images with file uri as same origin uri', () => {\n\t\t\tif (isWeb) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendMarkdown(`<img src=\"file:///images/cat.gif\">`);\n\n\t\t\tconst result = store.add(renderMarkdown(mds)).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<img src=\"vscode-file://vscode-app/images/cat.gif\">`);\n\t\t});\n\t});\n\n\tsuite('fillInIncompleteTokens', () => {\n\t\tfunction ignoreRaw(...tokenLists: marked.Token[][]): void {\n\t\t\ttokenLists.forEach(tokens => {\n\t\t\t\ttokens.forEach(t => t.raw = '');\n\t\t\t});\n\t\t}\n\n\t\tconst completeTable = '| a | b |\\n| --- | --- |';\n\n\t\tsuite('table', () => {\n\t\t\ttest('complete table', () => {\n\t\t\t\tconst tokens = marked.marked.lexer(completeTable);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.equal(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('full header only', () => {\n\t\t\t\tconst incompleteTable = '| a | b |';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header only with trailing space', () => {\n\t\t\t\tconst incompleteTable = '| a | b | ';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tif (newTokens) {\n\t\t\t\t\tignoreRaw(newTokens, completeTableTokens);\n\t\t\t\t}\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete header', () => {\n\t\t\t\tconst incompleteTable = '| a | b';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tif (newTokens) {\n\t\t\t\t\tignoreRaw(newTokens, completeTableTokens);\n\t\t\t\t}\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete header one column', () => {\n\t\t\t\tconst incompleteTable = '| a ';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(incompleteTable + '|\\n| --- |');\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tif (newTokens) {\n\t\t\t\t\tignoreRaw(newTokens, completeTableTokens);\n\t\t\t\t}\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with extras', () => {\n\t\t\t\tconst incompleteTable = '| a **bold** | b _italics_ |';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(incompleteTable + '\\n| --- | --- |');\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with leading text', () => {\n\t\t\t\t// Parsing this gives one token and one 'text' subtoken\n\t\t\t\tconst incompleteTable = 'here is a table\\n| a | b |';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(incompleteTable + '\\n| --- | --- |');\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with leading other stuff', () => {\n\t\t\t\t// Parsing this gives one token and one 'text' subtoken\n\t\t\t\tconst incompleteTable = '```js\\nconst xyz = 123;\\n```\\n| a | b |';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(incompleteTable + '\\n| --- | --- |');\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with incomplete separator', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\n| ---';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with incomplete separator 2', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\n| --- |';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with incomplete separator 3', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\n|';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('not a table', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\nsome text';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('not a table 2', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\n| --- |\\nsome text';\n\t\t\t\tconst tokens = marked.marked.lexer(incompleteTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\t\t});\n\n\t\tfunction simpleMarkdownTestSuite(name: string, delimiter: string): void {\n\t\t\ttest(`incomplete ${name}`, () => {\n\t\t\t\tconst incomplete = `${delimiter}code`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`complete ${name}`, () => {\n\t\t\t\tconst text = `leading text ${delimiter}code${delimiter} trailing text`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest(`${name} with leading text`, () => {\n\t\t\t\tconst incomplete = `some text and ${delimiter}some code`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`single loose \"${delimiter}\"`, () => {\n\t\t\t\tconst text = `some text and ${delimiter}by itself\\nmore text here`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest(`incomplete ${name} after newline`, () => {\n\t\t\t\tconst text = `some text\\nmore text here and ${delimiter}text`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`incomplete after complete ${name}`, () => {\n\t\t\t\tconst text = `leading text ${delimiter}code${delimiter} trailing text and ${delimiter}another`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`incomplete ${name} in list`, () => {\n\t\t\t\tconst text = `- list item one\\n- list item two and ${delimiter}text`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`incomplete ${name} in asterisk list`, () => {\n\t\t\t\tconst text = `* list item one\\n* list item two and ${delimiter}text`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`incomplete ${name} in numbered list`, () => {\n\t\t\t\tconst text = `1. list item one\\n2. list item two and ${delimiter}text`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t}\n\n\t\tsuite('list', () => {\n\t\t\ttest('list with complete codeblock', () => {\n\t\t\t\tconst list = `-\n\t\\`\\`\\`js\n\tlet x = 1;\n\t\\`\\`\\`\n- list item two\n`;\n\t\t\t\tconst tokens = marked.marked.lexer(list);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest.skip('list with incomplete codeblock', () => {\n\t\t\t\tconst incomplete = `- list item one\n\n\t\\`\\`\\`js\n\tlet x = 1;`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '\\n\t```');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('list with subitems', () => {\n\t\t\t\tconst list = `- hello\n\t- sub item\n- text\n\tnewline for some reason\n`;\n\t\t\t\tconst tokens = marked.marked.lexer(list);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('ordered list with subitems', () => {\n\t\t\t\tconst list = `1. hello\n\t- sub item\n2. text\n\tnewline for some reason\n`;\n\t\t\t\tconst tokens = marked.marked.lexer(list);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('list with stuff', () => {\n\t\t\t\tconst list = `- list item one \\`codespan\\` **bold** [link](http://microsoft.com) more text`;\n\t\t\t\tconst tokens = marked.marked.lexer(list);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('list with incomplete link text', () => {\n\t\t\t\tconst incomplete = `- list item one\n- item two [link`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '](https://microsoft.com)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('list with incomplete link target', () => {\n\t\t\t\tconst incomplete = `- list item one\n- item two [link](`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('ordered list with incomplete link target', () => {\n\t\t\t\tconst incomplete = `1. list item one\n2. item two [link](`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('ordered list with extra whitespace', () => {\n\t\t\t\tconst incomplete = `1. list item one\n2. item two [link](`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('list with extra whitespace', () => {\n\t\t\t\tconst incomplete = `- list item one\n- item two [link](`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('list with incomplete link with other stuff', () => {\n\t\t\t\tconst incomplete = `- list item one\n- item two [\\`link`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '\\`](https://microsoft.com)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('ordered list with incomplete link with other stuff', () => {\n\t\t\t\tconst incomplete = `1. list item one\n1. item two [\\`link`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '\\`](https://microsoft.com)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('codespan', () => {\n\t\t\tsimpleMarkdownTestSuite('codespan', '`');\n\n\t\t\ttest(`backtick between letters`, () => {\n\t\t\t\tconst text = 'a`b';\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeCodespanTokens = marked.marked.lexer(text + '`');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeCodespanTokens);\n\t\t\t});\n\n\t\t\ttest(`nested pattern`, () => {\n\t\t\t\tconst text = 'sldkfjsd `abc __def__ ghi';\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + '`');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('star', () => {\n\t\t\tsimpleMarkdownTestSuite('star', '*');\n\n\t\t\ttest(`star between letters`, () => {\n\t\t\t\tconst text = 'sldkfjsd a*b';\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + '*');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`nested pattern`, () => {\n\t\t\t\tconst text = 'sldkfjsd *abc __def__ ghi';\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + '*');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('double star', () => {\n\t\t\tsimpleMarkdownTestSuite('double star', '**');\n\n\t\t\ttest(`double star between letters`, () => {\n\t\t\t\tconst text = 'a**b';\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(text + '**');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('underscore', () => {\n\t\t\tsimpleMarkdownTestSuite('underscore', '_');\n\n\t\t\ttest(`underscore between letters`, () => {\n\t\t\t\tconst text = `this_not_italics`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('double underscore', () => {\n\t\t\tsimpleMarkdownTestSuite('double underscore', '__');\n\n\t\t\ttest(`double underscore between letters`, () => {\n\t\t\t\tconst text = `this__not__bold`;\n\t\t\t\tconst tokens = marked.marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('link', () => {\n\t\t\ttest('incomplete link text', () => {\n\t\t\t\tconst incomplete = 'abc [text';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '](https://microsoft.com)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete link target', () => {\n\t\t\t\tconst incomplete = 'foo [text](http://microsoft';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete link target 2', () => {\n\t\t\t\tconst incomplete = 'foo [text](http://microsoft.com';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete link target with extra stuff', () => {\n\t\t\t\tconst incomplete = '[before `text` after](http://microsoft.com';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete link target with extra stuff and incomplete arg', () => {\n\t\t\t\tconst incomplete = '[before `text` after](http://microsoft.com \"more text ';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '\")');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete link target with incomplete arg', () => {\n\t\t\t\tconst incomplete = 'foo [text](http://microsoft.com \"more text here ';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '\")');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete link target with incomplete arg 2', () => {\n\t\t\t\tconst incomplete = '[text](command:_github.copilot.openRelativePath \"arg';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '\")');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete link target with complete arg', () => {\n\t\t\t\tconst incomplete = 'foo [text](http://microsoft.com \"more text here\"';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('link text with incomplete codespan', () => {\n\t\t\t\tconst incomplete = `text [\\`codespan`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '`](https://microsoft.com)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('link text with incomplete stuff', () => {\n\t\t\t\tconst incomplete = `text [more text \\`codespan\\` text **bold`;\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '**](https://microsoft.com)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('Looks like incomplete link target but isn\\'t', () => {\n\t\t\t\tconst complete = '**bold** `codespan` text](';\n\t\t\t\tconst tokens = marked.marked.lexer(complete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(complete);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest.skip('incomplete link in list', () => {\n\t\t\t\tconst incomplete = '- [text';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.marked.lexer(incomplete + '](https://microsoft.com)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('square brace between letters', () => {\n\t\t\t\tconst incomplete = 'a[b';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('square brace on previous line', () => {\n\t\t\t\tconst incomplete = 'text[\\nmore text';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('complete link', () => {\n\t\t\t\tconst incomplete = 'text [link](http://microsoft.com)';\n\t\t\t\tconst tokens = marked.marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["resolve", "lang"]
}
