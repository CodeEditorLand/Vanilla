import t from"assert";import{isHTMLElement as r}from"../../browser/dom.js";import{renderLabelWithIcons as n}from"../../browser/ui/iconLabel/iconLabels.js";import{ensureNoDisposablesAreLeakedInTestSuite as i}from"../common/utils.js";suite("renderLabelWithIcons",()=>{test("no icons",()=>{const s=n(" hello World .");t.strictEqual(o(s)," hello World .")}),test("icons only",()=>{const s=n("$(alert)");t.strictEqual(o(s),'<span class="codicon codicon-alert"></span>')}),test("icon and non-icon strings",()=>{const s=n(" $(alert) Unresponsive");t.strictEqual(o(s),' <span class="codicon codicon-alert"></span> Unresponsive')}),test("multiple icons",()=>{const s=n("$(check)$(error)");t.strictEqual(o(s),'<span class="codicon codicon-check"></span><span class="codicon codicon-error"></span>')}),test("escaped icons",()=>{const s=n("\\$(escaped)");t.strictEqual(o(s),"$(escaped)")}),test("icon with animation",()=>{const s=n("$(zip~anim)");t.strictEqual(o(s),'<span class="codicon codicon-zip codicon-modifier-anim"></span>')});const o=s=>s.map(c=>r(c)?c.outerHTML:c).reduce((c,e)=>c+e,"");i()});
