import s from"assert";import{IndexedDB as i}from"../../browser/indexedDB.js";import{flakySuite as o}from"../common/testUtils.js";import{ensureNoDisposablesAreLeakedInTestSuite as d}from"../common/utils.js";o("IndexedDB",()=>{let e;setup(async()=>{e=await i.create("vscode-indexeddb-test",1,["test-store"]),await e.runInTransaction("test-store","readwrite",a=>a.clear())}),teardown(()=>{e?.close()}),test("runInTransaction",async()=>{await e.runInTransaction("test-store","readwrite",t=>t.add("hello1","key1"));const a=await e.runInTransaction("test-store","readonly",t=>t.get("key1"));s.deepStrictEqual(a,"hello1")}),test("getKeyValues",async()=>{await e.runInTransaction("test-store","readwrite",n=>{const r=[];return r.push(n.add("hello1","key1")),r.push(n.add("hello2","key2")),r.push(n.add(!0,"key3")),r});function a(n){return typeof n=="string"}const t=await e.getKeyValues("test-store",a);s.strictEqual(t.size,2),s.strictEqual(t.get("key1"),"hello1"),s.strictEqual(t.get("key2"),"hello2")}),test("hasPendingTransactions",async()=>{const a=e.runInTransaction("test-store","readwrite",t=>t.add("hello2","key2"));s.deepStrictEqual(e.hasPendingTransactions(),!0),await a,s.deepStrictEqual(e.hasPendingTransactions(),!1)}),test("close",async()=>{const a=e.runInTransaction("test-store","readwrite",t=>t.add("hello3","key3"));e.close(),s.deepStrictEqual(e.hasPendingTransactions(),!1);try{await a,s.fail("Transaction should be aborted")}catch{}}),d()});
