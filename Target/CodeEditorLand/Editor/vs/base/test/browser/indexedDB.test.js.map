{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/indexedDB.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { IndexedDB } from '../../browser/indexedDB.js';\nimport { flakySuite } from '../common/testUtils.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\nflakySuite('IndexedDB', () => {\n\n\tlet indexedDB: IndexedDB;\n\n\tsetup(async () => {\n\t\tindexedDB = await IndexedDB.create('vscode-indexeddb-test', 1, ['test-store']);\n\t\tawait indexedDB.runInTransaction('test-store', 'readwrite', store => store.clear());\n\t});\n\n\tteardown(() => {\n\t\tindexedDB?.close();\n\t});\n\n\ttest('runInTransaction', async () => {\n\t\tawait indexedDB.runInTransaction('test-store', 'readwrite', store => store.add('hello1', 'key1'));\n\t\tconst value = await indexedDB.runInTransaction('test-store', 'readonly', store => store.get('key1'));\n\t\tassert.deepStrictEqual(value, 'hello1');\n\t});\n\n\ttest('getKeyValues', async () => {\n\t\tawait indexedDB.runInTransaction('test-store', 'readwrite', store => {\n\t\t\tconst requests: IDBRequest[] = [];\n\t\t\trequests.push(store.add('hello1', 'key1'));\n\t\t\trequests.push(store.add('hello2', 'key2'));\n\t\t\trequests.push(store.add(true, 'key3'));\n\n\t\t\treturn requests;\n\t\t});\n\t\tfunction isValid(value: unknown): value is string {\n\t\t\treturn typeof value === 'string';\n\t\t}\n\t\tconst keyValues = await indexedDB.getKeyValues('test-store', isValid);\n\t\tassert.strictEqual(keyValues.size, 2);\n\t\tassert.strictEqual(keyValues.get('key1'), 'hello1');\n\t\tassert.strictEqual(keyValues.get('key2'), 'hello2');\n\t});\n\n\ttest('hasPendingTransactions', async () => {\n\t\tconst promise = indexedDB.runInTransaction('test-store', 'readwrite', store => store.add('hello2', 'key2'));\n\t\tassert.deepStrictEqual(indexedDB.hasPendingTransactions(), true);\n\t\tawait promise;\n\t\tassert.deepStrictEqual(indexedDB.hasPendingTransactions(), false);\n\t});\n\n\ttest('close', async () => {\n\t\tconst promise = indexedDB.runInTransaction('test-store', 'readwrite', store => store.add('hello3', 'key3'));\n\t\tindexedDB.close();\n\t\tassert.deepStrictEqual(indexedDB.hasPendingTransactions(), false);\n\t\ttry {\n\t\t\tawait promise;\n\t\t\tassert.fail('Transaction should be aborted');\n\t\t} catch (error) { }\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAIA,OAAO,YAAY;AACnB,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,+CAA+C;AAExD,WAAW,aAAa,MAAM;AAE7B,MAAI;AAEJ,QAAM,YAAY;AACjB,gBAAY,MAAM,UAAU,OAAO,yBAAyB,GAAG,CAAC,YAAY,CAAC;AAC7E,UAAM,UAAU,iBAAiB,cAAc,aAAa,WAAS,MAAM,MAAM,CAAC;AAAA,EACnF,CAAC;AAED,WAAS,MAAM;AACd,eAAW,MAAM;AAAA,EAClB,CAAC;AAED,OAAK,oBAAoB,YAAY;AACpC,UAAM,UAAU,iBAAiB,cAAc,aAAa,WAAS,MAAM,IAAI,UAAU,MAAM,CAAC;AAChG,UAAM,QAAQ,MAAM,UAAU,iBAAiB,cAAc,YAAY,WAAS,MAAM,IAAI,MAAM,CAAC;AACnG,WAAO,gBAAgB,OAAO,QAAQ;AAAA,EACvC,CAAC;AAED,OAAK,gBAAgB,YAAY;AAChC,UAAM,UAAU,iBAAiB,cAAc,aAAa,WAAS;AACpE,YAAM,WAAyB,CAAC;AAChC,eAAS,KAAK,MAAM,IAAI,UAAU,MAAM,CAAC;AACzC,eAAS,KAAK,MAAM,IAAI,UAAU,MAAM,CAAC;AACzC,eAAS,KAAK,MAAM,IAAI,MAAM,MAAM,CAAC;AAErC,aAAO;AAAA,IACR,CAAC;AACD,aAAS,QAAQ,OAAiC;AACjD,aAAO,OAAO,UAAU;AAAA,IACzB;AAFS;AAGT,UAAM,YAAY,MAAM,UAAU,aAAa,cAAc,OAAO;AACpE,WAAO,YAAY,UAAU,MAAM,CAAC;AACpC,WAAO,YAAY,UAAU,IAAI,MAAM,GAAG,QAAQ;AAClD,WAAO,YAAY,UAAU,IAAI,MAAM,GAAG,QAAQ;AAAA,EACnD,CAAC;AAED,OAAK,0BAA0B,YAAY;AAC1C,UAAM,UAAU,UAAU,iBAAiB,cAAc,aAAa,WAAS,MAAM,IAAI,UAAU,MAAM,CAAC;AAC1G,WAAO,gBAAgB,UAAU,uBAAuB,GAAG,IAAI;AAC/D,UAAM;AACN,WAAO,gBAAgB,UAAU,uBAAuB,GAAG,KAAK;AAAA,EACjE,CAAC;AAED,OAAK,SAAS,YAAY;AACzB,UAAM,UAAU,UAAU,iBAAiB,cAAc,aAAa,WAAS,MAAM,IAAI,UAAU,MAAM,CAAC;AAC1G,cAAU,MAAM;AAChB,WAAO,gBAAgB,UAAU,uBAAuB,GAAG,KAAK;AAChE,QAAI;AACH,YAAM;AACN,aAAO,KAAK,+BAA+B;AAAA,IAC5C,SAAS,OAAO;AAAA,IAAE;AAAA,EACnB,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
