{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/iconLabels.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { isHTMLElement } from '../../browser/dom.js';\nimport { renderLabelWithIcons } from '../../browser/ui/iconLabel/iconLabels.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\nsuite('renderLabelWithIcons', () => {\n\n\ttest('no icons', () => {\n\t\tconst result = renderLabelWithIcons(' hello World .');\n\n\t\tassert.strictEqual(elementsToString(result), ' hello World .');\n\t});\n\n\ttest('icons only', () => {\n\t\tconst result = renderLabelWithIcons('$(alert)');\n\n\t\tassert.strictEqual(elementsToString(result), '<span class=\"codicon codicon-alert\"></span>');\n\t});\n\n\ttest('icon and non-icon strings', () => {\n\t\tconst result = renderLabelWithIcons(` $(alert) Unresponsive`);\n\n\t\tassert.strictEqual(elementsToString(result), ' <span class=\"codicon codicon-alert\"></span> Unresponsive');\n\t});\n\n\ttest('multiple icons', () => {\n\t\tconst result = renderLabelWithIcons('$(check)$(error)');\n\n\t\tassert.strictEqual(elementsToString(result), '<span class=\"codicon codicon-check\"></span><span class=\"codicon codicon-error\"></span>');\n\t});\n\n\ttest('escaped icons', () => {\n\t\tconst result = renderLabelWithIcons('\\\\$(escaped)');\n\n\t\tassert.strictEqual(elementsToString(result), '$(escaped)');\n\t});\n\n\ttest('icon with animation', () => {\n\t\tconst result = renderLabelWithIcons('$(zip~anim)');\n\n\t\tassert.strictEqual(elementsToString(result), '<span class=\"codicon codicon-zip codicon-modifier-anim\"></span>');\n\t});\n\n\tconst elementsToString = (elements: Array<HTMLElement | string>): string => {\n\t\treturn elements\n\t\t\t.map(elem => isHTMLElement(elem) ? elem.outerHTML : elem)\n\t\t\t.reduce((a, b) => a + b, '');\n\t};\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,qBAAqB;AAC9B,SAAS,4BAA4B;AACrC,SAAS,+CAA+C;AAExD,MAAM,wBAAwB,MAAM;AAEnC,OAAK,YAAY,MAAM;AACtB,UAAM,SAAS,qBAAqB,gBAAgB;AAEpD,WAAO,YAAY,iBAAiB,MAAM,GAAG,gBAAgB;AAAA,EAC9D,CAAC;AAED,OAAK,cAAc,MAAM;AACxB,UAAM,SAAS,qBAAqB,UAAU;AAE9C,WAAO,YAAY,iBAAiB,MAAM,GAAG,6CAA6C;AAAA,EAC3F,CAAC;AAED,OAAK,6BAA6B,MAAM;AACvC,UAAM,SAAS,qBAAqB,wBAAwB;AAE5D,WAAO,YAAY,iBAAiB,MAAM,GAAG,2DAA2D;AAAA,EACzG,CAAC;AAED,OAAK,kBAAkB,MAAM;AAC5B,UAAM,SAAS,qBAAqB,kBAAkB;AAEtD,WAAO,YAAY,iBAAiB,MAAM,GAAG,wFAAwF;AAAA,EACtI,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,UAAM,SAAS,qBAAqB,cAAc;AAElD,WAAO,YAAY,iBAAiB,MAAM,GAAG,YAAY;AAAA,EAC1D,CAAC;AAED,OAAK,uBAAuB,MAAM;AACjC,UAAM,SAAS,qBAAqB,aAAa;AAEjD,WAAO,YAAY,iBAAiB,MAAM,GAAG,iEAAiE;AAAA,EAC/G,CAAC;AAED,QAAM,mBAAmB,wBAAC,aAAkD;AAC3E,WAAO,SACL,IAAI,UAAQ,cAAc,IAAI,IAAI,KAAK,YAAY,IAAI,EACvD,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,EAAE;AAAA,EAC7B,GAJyB;AAMzB,0CAAwC;AACzC,CAAC;",
  "names": []
}
