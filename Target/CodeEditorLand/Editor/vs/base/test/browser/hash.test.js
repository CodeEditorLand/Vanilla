import e from"assert";import{sha1Hex as u}from"../../browser/hash.js";import{hash as t,StringSHA1 as i}from"../../common/hash.js";import{ensureNoDisposablesAreLeakedInTestSuite as f}from"../common/utils.js";suite("Hash",()=>{test("string",()=>{e.strictEqual(t("hello"),t("hello")),e.notStrictEqual(t("hello"),t("world")),e.notStrictEqual(t("hello"),t("olleh")),e.notStrictEqual(t("hello"),t("Hello")),e.notStrictEqual(t("hello"),t("Hello ")),e.notStrictEqual(t("h"),t("H")),e.notStrictEqual(t("-"),t("_"))}),test("number",()=>{e.strictEqual(t(1),t(1)),e.notStrictEqual(t(0),t(1)),e.notStrictEqual(t(1),t(-1)),e.notStrictEqual(t(305419896),t(4886718345))}),test("boolean",()=>{e.strictEqual(t(!0),t(!0)),e.notStrictEqual(t(!0),t(!1))}),test("array",()=>{e.strictEqual(t([1,2,3]),t([1,2,3])),e.strictEqual(t(["foo","bar"]),t(["foo","bar"])),e.strictEqual(t([]),t([])),e.strictEqual(t([]),t(new Array)),e.notStrictEqual(t(["foo","bar"]),t(["bar","foo"])),e.notStrictEqual(t(["foo","bar"]),t(["bar","foo",null])),e.notStrictEqual(t(["foo","bar",null]),t(["bar","foo",null])),e.notStrictEqual(t(["foo","bar"]),t(["bar","foo",void 0])),e.notStrictEqual(t(["foo","bar",void 0]),t(["bar","foo",void 0])),e.notStrictEqual(t(["foo","bar",null]),t(["foo","bar",void 0]))}),test("object",()=>{e.strictEqual(t({}),t({})),e.strictEqual(t({}),t(Object.create(null))),e.strictEqual(t({foo:"bar"}),t({foo:"bar"})),e.strictEqual(t({foo:"bar",foo2:void 0}),t({foo2:void 0,foo:"bar"})),e.notStrictEqual(t({foo:"bar"}),t({foo:"bar2"})),e.notStrictEqual(t({}),t([]))}),test("array - unexpected collision",function(){const o=t([void 0,void 0,void 0,void 0,void 0]),a=t([void 0,void 0,"HHHHHH",[{line:0,character:0},{line:0,character:0}],void 0]);e.notStrictEqual(o,a)}),test("all different",()=>{const o=[null,void 0,{},[],0,!1,!0,""," ",[null],[void 0],[void 0,void 0],{"":void 0},{" ":void 0},"ab","ba",["ab"]],a=o.map(t);for(let n=0;n<a.length;n++){e.strictEqual(a[n],t(o[n]));for(let r=n+1;r<a.length;r++)e.notStrictEqual(a[n],a[r],`Same hash ${a[n]} for ${JSON.stringify(o[n])} and ${JSON.stringify(o[r])}`)}});async function l(o,a){const n=new i;n.update(o);let r=n.digest();e.strictEqual(r,a),r=await u(o),e.strictEqual(r,a)}test("sha1-1",()=>l("\uDD56","9bdb77276c1852e1fb067820472812fcf6084024")),test("sha1-2",()=>l("\uDB52","9bdb77276c1852e1fb067820472812fcf6084024")),test("sha1-3",()=>l("\uDA02\uA44D","9b483a471f22fe7e09d83f221871a987244bbd3f")),test("sha1-4",()=>l("hello","aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d")),f()});
