{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/browser/comparers.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport {\n\tcompareFileExtensions, compareFileExtensionsDefault, compareFileExtensionsLower, compareFileExtensionsUnicode, compareFileExtensionsUpper, compareFileNames, compareFileNamesDefault, compareFileNamesLower, compareFileNamesUnicode, compareFileNamesUpper\n} from '../../common/comparers.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\nconst compareLocale = (a: string, b: string) => a.localeCompare(b);\nconst compareLocaleNumeric = (a: string, b: string) => a.localeCompare(b, undefined, { numeric: true });\n\nsuite('Comparers', () => {\n\n\ttest('compareFileNames', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNames(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileNames(null, 'abc') < 0, 'null should be come before real values');\n\t\tassert(compareFileNames('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileNames('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileNames('z', 'A') > 0, 'z comes after A');\n\t\tassert(compareFileNames('Z', 'a') > 0, 'Z comes after a');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileNames('bbb.aaa', 'aaa.bbb') > 0, 'compares the whole name all at once by locale');\n\t\tassert(compareFileNames('aggregate.go', 'aggregate_repo.go') > 0, 'compares the whole name all at once by locale');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileNames('.abc', '.abc') === 0, 'equal dotfile names should be equal');\n\t\tassert(compareFileNames('.env.', '.gitattributes') < 0, 'filenames starting with dots and with extensions should still sort properly');\n\t\tassert(compareFileNames('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileNames('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\t\tassert(compareFileNames('.aaa_env', '.aaa.env') < 0, 'an underscore in a dotfile name will sort before a dot');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileNames(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileNames('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileNames('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileNames('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\t\tassert(compareFileNames('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNames('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileNames('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileNames('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileNames('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileNames('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileNames('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileNames('a.ext1', 'b.Ext1') < 0, 'if names are different and extensions with numbers are equal except for case, filenames are sorted in name order');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileNames), ['A2.txt', 'a10.txt', 'a20.txt', 'A100.txt'], 'filenames with number and case differences compare numerically');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNames('a', 'A') !== compareLocale('a', 'A'), 'the same letter sorts in unicode order, not by locale');\n\t\tassert(compareFileNames('\u00E2', '\u00C2') !== compareLocale('\u00E2', '\u00C2'), 'the same accented letter sorts in unicode order, not by locale');\n\t\tassert.notDeepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileNames), ['artichoke', 'Artichoke', 'art', 'Art'].sort(compareLocale), 'words with the same root and different cases do not sort in locale order');\n\t\tassert.notDeepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileNames), ['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareLocale), 'the same base characters with different case or accents do not sort in locale order');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNames('abc02.txt', 'abc002.txt') > 0, 'filenames with equivalent numbers and leading zeros sort in unicode order');\n\t\tassert(compareFileNames('abc.txt1', 'abc.txt01') > 0, 'same name plus extensions with equal numbers sort in unicode order');\n\t\tassert(compareFileNames('art01', 'Art01') !== 'art01'.localeCompare('Art01', undefined, { numeric: true }),\n\t\t\t'a numerically equivalent word of a different case does not compare numerically based on locale');\n\t\tassert(compareFileNames('a.ext1', 'a.Ext1') > 0, 'if names are equal and extensions with numbers are equal except for case, filenames are sorted in full filename unicode order');\n\n\t});\n\n\ttest('compareFileExtensions', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensions(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileExtensions(null, 'abc') < 0, 'null should come before real files without extension');\n\t\tassert(compareFileExtensions('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileExtensions('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileExtensions('z', 'A') > 0, 'z comes after A');\n\t\tassert(compareFileExtensions('Z', 'a') > 0, 'Z comes after a');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensions('file.ext', 'file.ext') === 0, 'equal full names should be equal');\n\t\tassert(compareFileExtensions('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileExtensions('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileExtensions('bbb.aaa', 'aaa.bbb') < 0, 'files should be compared by extensions even if filenames compare differently');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensions('.abc', '.abc') === 0, 'equal dotfiles should be equal');\n\t\tassert(compareFileExtensions('.md', '.Gitattributes') > 0, 'dotfiles sort alphabetically regardless of case');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensions(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileExtensions('.env', 'aaa.env') < 0, 'if equal extensions, filenames should be compared, empty filename should come before others');\n\t\tassert(compareFileExtensions('.MD', 'a.md') < 0, 'if extensions differ in case, files sort by extension in unicode order');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensions('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileExtensions('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileExtensions('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensions('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileExtensions('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileExtensions('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileExtensions('abc2.txt2', 'abc1.txt10') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensions('txt.abc1', 'txt.abc1') === 0, 'equal extensions with numbers should be equal');\n\t\tassert(compareFileExtensions('txt.abc1', 'txt.abc2') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensions('txt.abc2', 'txt.abc10') < 0, 'extensions with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileExtensions('a.ext1', 'b.ext1') < 0, 'if equal extensions with numbers, names should be compared');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileExtensions), ['A2.txt', 'a10.txt', 'a20.txt', 'A100.txt'], 'filenames with number and case differences compare numerically');\n\n\t\t//\n\t\t// Comparisons with different results from compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisions\n\t\tassert(compareFileExtensions('a', 'A') !== compareLocale('a', 'A'), 'the same letter of different case does not sort by locale');\n\t\tassert(compareFileExtensions('\u00E2', '\u00C2') !== compareLocale('\u00E2', '\u00C2'), 'the same accented letter of different case does not sort by locale');\n\t\tassert.notDeepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileExtensions), ['artichoke', 'Artichoke', 'art', 'Art'].sort(compareLocale), 'words with the same root and different cases do not sort in locale order');\n\t\tassert.notDeepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileExtensions), ['email', 'Email', '\u00E9mail', '\u00C9mail'].sort((a, b) => a.localeCompare(b)), 'the same base characters with different case or accents do not sort in locale order');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensions('a.MD', 'a.md') < 0, 'case differences in extensions sort in unicode order');\n\t\tassert(compareFileExtensions('a.md', 'A.md') > 0, 'case differences in names sort in unicode order');\n\t\tassert(compareFileExtensions('a.md', 'b.MD') > 0, 'when extensions are the same except for case, the files sort by extension');\n\t\tassert(compareFileExtensions('aggregate.go', 'aggregate_repo.go') < 0, 'when extensions are equal, names sort in dictionary order');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensions('.env', '.aaa.env') < 0, 'a dotfile with an extension is treated as a name plus an extension - equal extensions');\n\t\tassert(compareFileExtensions('.env', '.env.aaa') > 0, 'a dotfile with an extension is treated as a name plus an extension - unequal extensions');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensions('.env', 'aaa') > 0, 'filenames without extensions come before dotfiles');\n\t\tassert(compareFileExtensions('.md', 'A.MD') > 0, 'a file with an uppercase extension sorts before a dotfile of the same lowercase extension');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensions('abc.txt01', 'abc.txt1') < 0, 'extensions with equal numbers sort in unicode order');\n\t\tassert(compareFileExtensions('art01', 'Art01') !== compareLocaleNumeric('art01', 'Art01'), 'a numerically equivalent word of a different case does not compare by locale');\n\t\tassert(compareFileExtensions('abc02.txt', 'abc002.txt') > 0, 'filenames with equivalent numbers and leading zeros sort in unicode order');\n\t\tassert(compareFileExtensions('txt.abc01', 'txt.abc1') < 0, 'extensions with equivalent numbers sort in unicode order');\n\t\tassert(compareFileExtensions('a.ext1', 'b.Ext1') > 0, 'if names are different and extensions with numbers are equal except for case, filenames are sorted in extension unicode order');\n\t\tassert(compareFileExtensions('a.ext1', 'a.Ext1') > 0, 'if names are equal and extensions with numbers are equal except for case, filenames are sorted in extension unicode order');\n\n\t});\n\n\ttest('compareFileNamesDefault', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileNames\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesDefault(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileNamesDefault(null, 'abc') < 0, 'null should be come before real values');\n\t\tassert(compareFileNamesDefault('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileNamesDefault('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileNamesDefault('z', 'A') > 0, 'z comes after A');\n\t\tassert(compareFileNamesDefault('Z', 'a') > 0, 'Z comes after a');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileNamesDefault('file.ext', 'file.ext') === 0, 'equal full names should be equal');\n\t\tassert(compareFileNamesDefault('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileNamesDefault('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileNamesDefault('bbb.aaa', 'aaa.bbb') > 0, 'files should be compared by names even if extensions compare differently');\n\t\tassert(compareFileNamesDefault('aggregate.go', 'aggregate_repo.go') > 0, 'compares the whole filename in locale order');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileNamesDefault('.abc', '.abc') === 0, 'equal dotfile names should be equal');\n\t\tassert(compareFileNamesDefault('.env.', '.gitattributes') < 0, 'filenames starting with dots and with extensions should still sort properly');\n\t\tassert(compareFileNamesDefault('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileNamesDefault('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\t\tassert(compareFileNamesDefault('.aaa_env', '.aaa.env') < 0, 'an underscore in a dotfile name will sort before a dot');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileNamesDefault(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileNamesDefault('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileNamesDefault('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileNamesDefault('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\t\tassert(compareFileNamesDefault('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesDefault('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileNamesDefault('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileNamesDefault('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileNamesDefault('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileNamesDefault('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileNamesDefault('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileNamesDefault('a.ext1', 'b.Ext1') < 0, 'if names are different and extensions with numbers are equal except for case, filenames are compared by full filename');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileNamesDefault), ['A2.txt', 'a10.txt', 'a20.txt', 'A100.txt'], 'filenames with number and case differences compare numerically');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileNames\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesDefault('a', 'A') === compareLocale('a', 'A'), 'the same letter sorts by locale');\n\t\tassert(compareFileNamesDefault('\u00E2', '\u00C2') === compareLocale('\u00E2', '\u00C2'), 'the same accented letter sorts by locale');\n\t\tassert.deepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileNamesDefault), ['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareLocale), 'the same base characters with different case or accents sort in locale order');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesDefault('abc02.txt', 'abc002.txt') < 0, 'filenames with equivalent numbers and leading zeros sort shortest number first');\n\t\tassert(compareFileNamesDefault('abc.txt1', 'abc.txt01') < 0, 'same name plus extensions with equal numbers sort shortest number first');\n\t\tassert(compareFileNamesDefault('art01', 'Art01') === compareLocaleNumeric('art01', 'Art01'), 'a numerically equivalent word of a different case compares numerically based on locale');\n\t\tassert(compareFileNamesDefault('a.ext1', 'a.Ext1') === compareLocale('ext1', 'Ext1'), 'if names are equal and extensions with numbers are equal except for case, filenames are sorted in extension locale order');\n\t});\n\n\ttest('compareFileExtensionsDefault', () => {\n\n\t\t//\n\t\t// Comparisons with the same result as compareFileExtensions\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsDefault(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileExtensionsDefault(null, 'abc') < 0, 'null should come before real files without extensions');\n\t\tassert(compareFileExtensionsDefault('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileExtensionsDefault('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileExtensionsDefault('z', 'A') > 0, 'z comes after A');\n\t\tassert(compareFileExtensionsDefault('Z', 'a') > 0, 'Z comes after a');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsDefault('file.ext', 'file.ext') === 0, 'equal full filenames should be equal');\n\t\tassert(compareFileExtensionsDefault('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileExtensionsDefault('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileExtensionsDefault('bbb.aaa', 'aaa.bbb') < 0, 'files should be compared by extension first');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensionsDefault('.abc', '.abc') === 0, 'equal dotfiles should be equal');\n\t\tassert(compareFileExtensionsDefault('.md', '.Gitattributes') > 0, 'dotfiles sort alphabetically regardless of case');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensionsDefault(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileExtensionsDefault('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileExtensionsDefault('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensionsDefault('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileExtensionsDefault('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileExtensionsDefault('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsDefault('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order');\n\t\tassert(compareFileExtensionsDefault('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileExtensionsDefault('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileExtensionsDefault('abc2.txt2', 'abc1.txt10') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsDefault('txt.abc1', 'txt.abc1') === 0, 'equal extensions with numbers should be equal');\n\t\tassert(compareFileExtensionsDefault('txt.abc1', 'txt.abc2') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsDefault('txt.abc2', 'txt.abc10') < 0, 'extensions with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileExtensionsDefault('a.ext1', 'b.ext1') < 0, 'if equal extensions with numbers, full filenames should be compared');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileExtensionsDefault), ['A2.txt', 'a10.txt', 'a20.txt', 'A100.txt'], 'filenames with number and case differences compare numerically');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileExtensions\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsDefault('a', 'A') === compareLocale('a', 'A'), 'the same letter of different case sorts by locale');\n\t\tassert(compareFileExtensionsDefault('\u00E2', '\u00C2') === compareLocale('\u00E2', '\u00C2'), 'the same accented letter of different case sorts by locale');\n\t\tassert.deepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileExtensionsDefault), ['email', 'Email', '\u00E9mail', '\u00C9mail'].sort((a, b) => a.localeCompare(b)), 'the same base characters with different case or accents sort in locale order');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsDefault('a.MD', 'a.md') === compareLocale('MD', 'md'), 'case differences in extensions sort by locale');\n\t\tassert(compareFileExtensionsDefault('a.md', 'A.md') === compareLocale('a', 'A'), 'case differences in names sort by locale');\n\t\tassert(compareFileExtensionsDefault('a.md', 'b.MD') < 0, 'when extensions are the same except for case, the files sort by name');\n\t\tassert(compareFileExtensionsDefault('aggregate.go', 'aggregate_repo.go') > 0, 'names with the same extension sort in full filename locale order');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensionsDefault('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileExtensionsDefault('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensionsDefault('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileExtensionsDefault('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensionsDefault('abc.txt01', 'abc.txt1') > 0, 'extensions with equal numbers should be in shortest-first order');\n\t\tassert(compareFileExtensionsDefault('art01', 'Art01') === compareLocaleNumeric('art01', 'Art01'), 'a numerically equivalent word of a different case compares numerically based on locale');\n\t\tassert(compareFileExtensionsDefault('abc02.txt', 'abc002.txt') < 0, 'filenames with equivalent numbers and leading zeros sort shortest string first');\n\t\tassert(compareFileExtensionsDefault('txt.abc01', 'txt.abc1') > 0, 'extensions with equivalent numbers sort shortest extension first');\n\t\tassert(compareFileExtensionsDefault('a.ext1', 'b.Ext1') < 0, 'if extensions with numbers are equal except for case, full filenames should be compared');\n\t\tassert(compareFileExtensionsDefault('a.ext1', 'a.Ext1') === compareLocale('a.ext1', 'a.Ext1'), 'if extensions with numbers are equal except for case, full filenames are compared in locale order');\n\n\t});\n\n\ttest('compareFileNamesUpper', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesUpper(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileNamesUpper(null, 'abc') < 0, 'null should be come before real values');\n\t\tassert(compareFileNamesUpper('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileNamesUpper('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileNamesUpper('z', 'A') > 0, 'z comes after A');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileNamesUpper('file.ext', 'file.ext') === 0, 'equal full names should be equal');\n\t\tassert(compareFileNamesUpper('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileNamesUpper('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileNamesUpper('bbb.aaa', 'aaa.bbb') > 0, 'files should be compared by names even if extensions compare differently');\n\t\tassert(compareFileNamesUpper('aggregate.go', 'aggregate_repo.go') > 0, 'compares the full filename in locale order');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileNamesUpper('.abc', '.abc') === 0, 'equal dotfile names should be equal');\n\t\tassert(compareFileNamesUpper('.env.', '.gitattributes') < 0, 'filenames starting with dots and with extensions should still sort properly');\n\t\tassert(compareFileNamesUpper('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileNamesUpper('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\t\tassert(compareFileNamesUpper('.aaa_env', '.aaa.env') < 0, 'an underscore in a dotfile name will sort before a dot');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileNamesUpper(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileNamesUpper('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileNamesUpper('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileNamesUpper('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\t\tassert(compareFileNamesUpper('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesUpper('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileNamesUpper('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileNamesUpper('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileNamesUpper('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileNamesUpper('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileNamesUpper('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileNamesUpper('abc02.txt', 'abc002.txt') < 0, 'filenames with equivalent numbers and leading zeros sort shortest number first');\n\t\tassert(compareFileNamesUpper('abc.txt1', 'abc.txt01') < 0, 'same name plus extensions with equal numbers sort shortest number first');\n\t\tassert(compareFileNamesUpper('a.ext1', 'b.Ext1') < 0, 'different names with the equal extensions except for case are sorted by full filename');\n\t\tassert(compareFileNamesUpper('a.ext1', 'a.Ext1') === compareLocale('a.ext1', 'a.Ext1'), 'same names with equal and extensions except for case are sorted in full filename locale order');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesUpper('Z', 'a') < 0, 'Z comes before a');\n\t\tassert(compareFileNamesUpper('a', 'A') > 0, 'the same letter sorts uppercase first');\n\t\tassert(compareFileNamesUpper('\u00E2', '\u00C2') > 0, 'the same accented letter sorts uppercase first');\n\t\tassert.deepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileNamesUpper), ['Art', 'Artichoke', 'art', 'artichoke'], 'names with the same root and different cases sort uppercase first');\n\t\tassert.deepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileNamesUpper), ['Email', '\u00C9mail', 'email', '\u00E9mail'], 'the same base characters with different case or accents sort uppercase first');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesUpper('art01', 'Art01') > 0, 'a numerically equivalent name of a different case compares uppercase first');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileNamesUpper), ['A2.txt', 'A100.txt', 'a10.txt', 'a20.txt'], 'filenames with number and case differences group by case then compare by number');\n\n\t});\n\n\ttest('compareFileExtensionsUpper', () => {\n\n\t\t//\n\t\t// Comparisons with the same result as compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsUpper(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileExtensionsUpper(null, 'abc') < 0, 'null should come before real files without extensions');\n\t\tassert(compareFileExtensionsUpper('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileExtensionsUpper('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileExtensionsUpper('z', 'A') > 0, 'z comes after A');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsUpper('file.ext', 'file.ext') === 0, 'equal full filenames should be equal');\n\t\tassert(compareFileExtensionsUpper('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileExtensionsUpper('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileExtensionsUpper('bbb.aaa', 'aaa.bbb') < 0, 'files should be compared by extension first');\n\t\tassert(compareFileExtensionsUpper('a.md', 'b.MD') < 0, 'when extensions are the same except for case, the files sort by name');\n\t\tassert(compareFileExtensionsUpper('a.MD', 'a.md') === compareLocale('MD', 'md'), 'case differences in extensions sort by locale');\n\t\tassert(compareFileExtensionsUpper('aggregate.go', 'aggregate_repo.go') > 0, 'when extensions are equal, compares the full filename');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensionsUpper('.abc', '.abc') === 0, 'equal dotfiles should be equal');\n\t\tassert(compareFileExtensionsUpper('.md', '.Gitattributes') > 0, 'dotfiles sort alphabetically regardless of case');\n\t\tassert(compareFileExtensionsUpper('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileExtensionsUpper('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensionsUpper(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileExtensionsUpper('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileExtensionsUpper('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\t\tassert(compareFileExtensionsUpper('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileExtensionsUpper('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensionsUpper('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileExtensionsUpper('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileExtensionsUpper('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsUpper('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order');\n\t\tassert(compareFileExtensionsUpper('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileExtensionsUpper('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileExtensionsUpper('abc2.txt2', 'abc1.txt10') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsUpper('txt.abc1', 'txt.abc1') === 0, 'equal extensions with numbers should be equal');\n\t\tassert(compareFileExtensionsUpper('txt.abc1', 'txt.abc2') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsUpper('txt.abc2', 'txt.abc10') < 0, 'extensions with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileExtensionsUpper('a.ext1', 'b.ext1') < 0, 'if equal extensions with numbers, full filenames should be compared');\n\t\tassert(compareFileExtensionsUpper('abc.txt01', 'abc.txt1') > 0, 'extensions with equal numbers should be in shortest-first order');\n\t\tassert(compareFileExtensionsUpper('abc02.txt', 'abc002.txt') < 0, 'filenames with equivalent numbers and leading zeros sort shortest string first');\n\t\tassert(compareFileExtensionsUpper('txt.abc01', 'txt.abc1') > 0, 'extensions with equivalent numbers sort shortest extension first');\n\t\tassert(compareFileExtensionsUpper('a.ext1', 'b.Ext1') < 0, 'different names and extensions that are equal except for case are sorted in full filename order');\n\t\tassert(compareFileExtensionsUpper('a.ext1', 'a.Ext1') === compareLocale('a.ext1', 'b.Ext1'), 'same names and extensions that are equal except for case are sorted in full filename locale order');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsUpper('Z', 'a') < 0, 'Z comes before a');\n\t\tassert(compareFileExtensionsUpper('a', 'A') > 0, 'the same letter sorts uppercase first');\n\t\tassert(compareFileExtensionsUpper('\u00E2', '\u00C2') > 0, 'the same accented letter sorts uppercase first');\n\t\tassert.deepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileExtensionsUpper), ['Art', 'Artichoke', 'art', 'artichoke'], 'names with the same root and different cases sort uppercase names first');\n\t\tassert.deepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileExtensionsUpper), ['Email', '\u00C9mail', 'email', '\u00E9mail'], 'the same base characters with different case or accents sort uppercase names first');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsUpper('a.md', 'A.md') > 0, 'case differences in names sort uppercase first');\n\t\tassert(compareFileExtensionsUpper('art01', 'Art01') > 0, 'a numerically equivalent word of a different case sorts uppercase first');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileExtensionsUpper), ['A2.txt', 'A100.txt', 'a10.txt', 'a20.txt',], 'filenames with number and case differences group by case then sort by number');\n\n\t});\n\n\ttest('compareFileNamesLower', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesLower(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileNamesLower(null, 'abc') < 0, 'null should be come before real values');\n\t\tassert(compareFileNamesLower('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileNamesLower('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileNamesLower('Z', 'a') > 0, 'Z comes after a');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileNamesLower('file.ext', 'file.ext') === 0, 'equal full names should be equal');\n\t\tassert(compareFileNamesLower('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileNamesLower('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileNamesLower('bbb.aaa', 'aaa.bbb') > 0, 'files should be compared by names even if extensions compare differently');\n\t\tassert(compareFileNamesLower('aggregate.go', 'aggregate_repo.go') > 0, 'compares full filenames');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileNamesLower('.abc', '.abc') === 0, 'equal dotfile names should be equal');\n\t\tassert(compareFileNamesLower('.env.', '.gitattributes') < 0, 'filenames starting with dots and with extensions should still sort properly');\n\t\tassert(compareFileNamesLower('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileNamesLower('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\t\tassert(compareFileNamesLower('.aaa_env', '.aaa.env') < 0, 'an underscore in a dotfile name will sort before a dot');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileNamesLower(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileNamesLower('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileNamesLower('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileNamesLower('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\t\tassert(compareFileNamesLower('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesLower('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileNamesLower('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileNamesLower('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileNamesLower('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileNamesLower('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileNamesLower('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileNamesLower('abc02.txt', 'abc002.txt') < 0, 'filenames with equivalent numbers and leading zeros sort shortest number first');\n\t\tassert(compareFileNamesLower('abc.txt1', 'abc.txt01') < 0, 'same name plus extensions with equal numbers sort shortest number first');\n\t\tassert(compareFileNamesLower('a.ext1', 'b.Ext1') < 0, 'different names and extensions that are equal except for case are sorted in full filename order');\n\t\tassert(compareFileNamesLower('a.ext1', 'a.Ext1') === compareLocale('a.ext1', 'b.Ext1'), 'same names and extensions that are equal except for case are sorted in full filename locale order');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesLower('z', 'A') < 0, 'z comes before A');\n\t\tassert(compareFileNamesLower('a', 'A') < 0, 'the same letter sorts lowercase first');\n\t\tassert(compareFileNamesLower('\u00E2', '\u00C2') < 0, 'the same accented letter sorts lowercase first');\n\t\tassert.deepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileNamesLower), ['art', 'artichoke', 'Art', 'Artichoke'], 'names with the same root and different cases sort lowercase first');\n\t\tassert.deepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileNamesLower), ['email', '\u00E9mail', 'Email', '\u00C9mail'], 'the same base characters with different case or accents sort lowercase first');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesLower('art01', 'Art01') < 0, 'a numerically equivalent name of a different case compares lowercase first');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileNamesLower), ['a10.txt', 'a20.txt', 'A2.txt', 'A100.txt'], 'filenames with number and case differences group by case then compare by number');\n\n\t});\n\n\ttest('compareFileExtensionsLower', () => {\n\n\t\t//\n\t\t// Comparisons with the same result as compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsLower(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileExtensionsLower(null, 'abc') < 0, 'null should come before real files without extensions');\n\t\tassert(compareFileExtensionsLower('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileExtensionsLower('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileExtensionsLower('Z', 'a') > 0, 'Z comes after a');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsLower('file.ext', 'file.ext') === 0, 'equal full filenames should be equal');\n\t\tassert(compareFileExtensionsLower('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileExtensionsLower('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileExtensionsLower('bbb.aaa', 'aaa.bbb') < 0, 'files should be compared by extension first');\n\t\tassert(compareFileExtensionsLower('a.md', 'b.MD') < 0, 'when extensions are the same except for case, the files sort by name');\n\t\tassert(compareFileExtensionsLower('a.MD', 'a.md') === compareLocale('MD', 'md'), 'case differences in extensions sort by locale');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensionsLower('.abc', '.abc') === 0, 'equal dotfiles should be equal');\n\t\tassert(compareFileExtensionsLower('.md', '.Gitattributes') > 0, 'dotfiles sort alphabetically regardless of case');\n\t\tassert(compareFileExtensionsLower('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileExtensionsLower('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensionsLower(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileExtensionsLower('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileExtensionsLower('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\t\tassert(compareFileExtensionsLower('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileExtensionsLower('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensionsLower('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileExtensionsLower('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileExtensionsLower('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsLower('abc2.txt', 'abc10.txt') < 0, 'filenames with numbers should be in numerical order');\n\t\tassert(compareFileExtensionsLower('abc02.txt', 'abc010.txt') < 0, 'filenames with numbers that have leading zeros sort numerically');\n\t\tassert(compareFileExtensionsLower('abc1.10.txt', 'abc1.2.txt') > 0, 'numbers with dots between them are treated as two separate numbers, not one decimal number');\n\t\tassert(compareFileExtensionsLower('abc2.txt2', 'abc1.txt10') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsLower('txt.abc1', 'txt.abc1') === 0, 'equal extensions with numbers should be equal');\n\t\tassert(compareFileExtensionsLower('txt.abc1', 'txt.abc2') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsLower('txt.abc2', 'txt.abc10') < 0, 'extensions with numbers should be in numerical order even when they are multiple digits long');\n\t\tassert(compareFileExtensionsLower('a.ext1', 'b.ext1') < 0, 'if equal extensions with numbers, full filenames should be compared');\n\t\tassert(compareFileExtensionsLower('abc.txt01', 'abc.txt1') > 0, 'extensions with equal numbers should be in shortest-first order');\n\t\tassert(compareFileExtensionsLower('abc02.txt', 'abc002.txt') < 0, 'filenames with equivalent numbers and leading zeros sort shortest string first');\n\t\tassert(compareFileExtensionsLower('txt.abc01', 'txt.abc1') > 0, 'extensions with equivalent numbers sort shortest extension first');\n\t\tassert(compareFileExtensionsLower('a.ext1', 'b.Ext1') < 0, 'if extensions with numbers are equal except for case, full filenames should be compared');\n\t\tassert(compareFileExtensionsLower('a.ext1', 'a.Ext1') === compareLocale('a.ext1', 'a.Ext1'), 'if extensions with numbers are equal except for case, filenames are sorted in locale order');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsLower('z', 'A') < 0, 'z comes before A');\n\t\tassert(compareFileExtensionsLower('a', 'A') < 0, 'the same letter sorts lowercase first');\n\t\tassert(compareFileExtensionsLower('\u00E2', '\u00C2') < 0, 'the same accented letter sorts lowercase first');\n\t\tassert.deepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileExtensionsLower), ['art', 'artichoke', 'Art', 'Artichoke'], 'names with the same root and different cases sort lowercase names first');\n\t\tassert.deepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileExtensionsLower), ['email', '\u00E9mail', 'Email', '\u00C9mail'], 'the same base characters with different case or accents sort lowercase names first');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsLower('a.md', 'A.md') < 0, 'case differences in names sort lowercase first');\n\t\tassert(compareFileExtensionsLower('art01', 'Art01') < 0, 'a numerically equivalent word of a different case sorts lowercase first');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileExtensionsLower), ['a10.txt', 'a20.txt', 'A2.txt', 'A100.txt'], 'filenames with number and case differences group by case then sort by number');\n\t\tassert(compareFileExtensionsLower('aggregate.go', 'aggregate_repo.go') > 0, 'when extensions are equal, compares full filenames');\n\n\t});\n\n\ttest('compareFileNamesUnicode', () => {\n\n\t\t//\n\t\t// Comparisons with the same results as compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesUnicode(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileNamesUnicode(null, 'abc') < 0, 'null should be come before real values');\n\t\tassert(compareFileNamesUnicode('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileNamesUnicode('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileNamesUnicode('z', 'A') > 0, 'z comes after A');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileNamesUnicode('file.ext', 'file.ext') === 0, 'equal full names should be equal');\n\t\tassert(compareFileNamesUnicode('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileNamesUnicode('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileNamesUnicode('bbb.aaa', 'aaa.bbb') > 0, 'files should be compared by names even if extensions compare differently');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileNamesUnicode('.abc', '.abc') === 0, 'equal dotfile names should be equal');\n\t\tassert(compareFileNamesUnicode('.env.', '.gitattributes') < 0, 'filenames starting with dots and with extensions should still sort properly');\n\t\tassert(compareFileNamesUnicode('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileNamesUnicode('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileNamesUnicode(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileNamesUnicode('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileNamesUnicode('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileNamesUnicode('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\t\tassert(compareFileNamesUnicode('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesUnicode('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileNamesUnicode('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileNamesUnicode('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileNamesUnicode('a.ext1', 'b.Ext1') < 0, 'if names are different and extensions with numbers are equal except for case, filenames are sorted by unicode full filename');\n\t\tassert(compareFileNamesUnicode('a.ext1', 'a.Ext1') > 0, 'if names are equal and extensions with numbers are equal except for case, filenames are sorted by unicode full filename');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileNamesDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileNamesUnicode('Z', 'a') < 0, 'Z comes before a');\n\t\tassert(compareFileNamesUnicode('a', 'A') > 0, 'the same letter sorts uppercase first');\n\t\tassert(compareFileNamesUnicode('\u00E2', '\u00C2') > 0, 'the same accented letter sorts uppercase first');\n\t\tassert.deepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileNamesUnicode), ['Art', 'Artichoke', 'art', 'artichoke'], 'names with the same root and different cases sort uppercase first');\n\t\tassert.deepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileNamesUnicode), ['Email', 'email', '\u00C9mail', '\u00E9mail'], 'the same base characters with different case or accents sort in unicode order');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileNamesUnicode('aggregate.go', 'aggregate_repo.go') < 0, 'compares the whole name in unicode order, but dot comes before underscore');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileNamesUnicode('.aaa_env', '.aaa.env') > 0, 'an underscore in a dotfile name will sort after a dot');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileNamesUnicode('abc2.txt', 'abc10.txt') > 0, 'filenames with numbers should be in unicode order even when they are multiple digits long');\n\t\tassert(compareFileNamesUnicode('abc02.txt', 'abc010.txt') > 0, 'filenames with numbers that have leading zeros sort in unicode order');\n\t\tassert(compareFileNamesUnicode('abc1.10.txt', 'abc1.2.txt') < 0, 'numbers with dots between them are sorted in unicode order');\n\t\tassert(compareFileNamesUnicode('abc02.txt', 'abc002.txt') > 0, 'filenames with equivalent numbers and leading zeros sort in unicode order');\n\t\tassert(compareFileNamesUnicode('abc.txt1', 'abc.txt01') > 0, 'same name plus extensions with equal numbers sort in unicode order');\n\t\tassert(compareFileNamesUnicode('art01', 'Art01') > 0, 'a numerically equivalent name of a different case compares uppercase first');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileNamesUnicode), ['A100.txt', 'A2.txt', 'a10.txt', 'a20.txt'], 'filenames with number and case differences sort in unicode order');\n\n\t});\n\n\ttest('compareFileExtensionsUnicode', () => {\n\n\t\t//\n\t\t// Comparisons with the same result as compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsUnicode(null, null) === 0, 'null should be equal');\n\t\tassert(compareFileExtensionsUnicode(null, 'abc') < 0, 'null should come before real files without extensions');\n\t\tassert(compareFileExtensionsUnicode('', '') === 0, 'empty should be equal');\n\t\tassert(compareFileExtensionsUnicode('abc', 'abc') === 0, 'equal names should be equal');\n\t\tassert(compareFileExtensionsUnicode('z', 'A') > 0, 'z comes after A');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsUnicode('file.ext', 'file.ext') === 0, 'equal full filenames should be equal');\n\t\tassert(compareFileExtensionsUnicode('a.ext', 'b.ext') < 0, 'if equal extensions, filenames should be compared');\n\t\tassert(compareFileExtensionsUnicode('file.aaa', 'file.bbb') < 0, 'files with equal names should be compared by extensions');\n\t\tassert(compareFileExtensionsUnicode('bbb.aaa', 'aaa.bbb') < 0, 'files should be compared by extension first');\n\t\tassert(compareFileExtensionsUnicode('a.md', 'b.MD') < 0, 'when extensions are the same except for case, the files sort by name');\n\t\tassert(compareFileExtensionsUnicode('a.MD', 'a.md') < 0, 'case differences in extensions sort in unicode order');\n\n\t\t// dotfile comparisons\n\t\tassert(compareFileExtensionsUnicode('.abc', '.abc') === 0, 'equal dotfiles should be equal');\n\t\tassert(compareFileExtensionsUnicode('.md', '.Gitattributes') > 0, 'dotfiles sort alphabetically regardless of case');\n\t\tassert(compareFileExtensionsUnicode('.env', '.aaa.env') > 0, 'dotfiles sort alphabetically when they contain multiple dots');\n\t\tassert(compareFileExtensionsUnicode('.env', '.env.aaa') < 0, 'dotfiles with the same root sort shortest first');\n\n\t\t// dotfile vs non-dotfile comparisons\n\t\tassert(compareFileExtensionsUnicode(null, '.abc') < 0, 'null should come before dotfiles');\n\t\tassert(compareFileExtensionsUnicode('.env', 'aaa.env') < 0, 'dotfiles come before filenames with extensions');\n\t\tassert(compareFileExtensionsUnicode('.MD', 'a.md') < 0, 'dotfiles sort before lowercase files');\n\t\tassert(compareFileExtensionsUnicode('.env', 'aaa') < 0, 'dotfiles come before filenames without extensions');\n\t\tassert(compareFileExtensionsUnicode('.md', 'A.MD') < 0, 'dotfiles sort before uppercase files');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensionsUnicode('1', '1') === 0, 'numerically equal full names should be equal');\n\t\tassert(compareFileExtensionsUnicode('abc1.txt', 'abc1.txt') === 0, 'equal filenames with numbers should be equal');\n\t\tassert(compareFileExtensionsUnicode('abc1.txt', 'abc2.txt') < 0, 'filenames with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsUnicode('txt.abc1', 'txt.abc1') === 0, 'equal extensions with numbers should be equal');\n\t\tassert(compareFileExtensionsUnicode('txt.abc1', 'txt.abc2') < 0, 'extensions with numbers should be in numerical order, not alphabetical order');\n\t\tassert(compareFileExtensionsUnicode('a.ext1', 'b.ext1') < 0, 'if equal extensions with numbers, full filenames should be compared');\n\n\t\t//\n\t\t// Comparisons with different results than compareFileExtensionsDefault\n\t\t//\n\n\t\t// name-only comparisons\n\t\tassert(compareFileExtensionsUnicode('Z', 'a') < 0, 'Z comes before a');\n\t\tassert(compareFileExtensionsUnicode('a', 'A') > 0, 'the same letter sorts uppercase first');\n\t\tassert(compareFileExtensionsUnicode('\u00E2', '\u00C2') > 0, 'the same accented letter sorts uppercase first');\n\t\tassert.deepStrictEqual(['artichoke', 'Artichoke', 'art', 'Art'].sort(compareFileExtensionsUnicode), ['Art', 'Artichoke', 'art', 'artichoke'], 'names with the same root and different cases sort uppercase names first');\n\t\tassert.deepStrictEqual(['email', 'Email', '\u00E9mail', '\u00C9mail'].sort(compareFileExtensionsUnicode), ['Email', 'email', '\u00C9mail', '\u00E9mail'], 'the same base characters with different case or accents sort in unicode order');\n\n\t\t// name plus extension comparisons\n\t\tassert(compareFileExtensionsUnicode('a.MD', 'a.md') < 0, 'case differences in extensions sort by uppercase extension first');\n\t\tassert(compareFileExtensionsUnicode('a.md', 'A.md') > 0, 'case differences in names sort uppercase first');\n\t\tassert(compareFileExtensionsUnicode('art01', 'Art01') > 0, 'a numerically equivalent name of a different case sorts uppercase first');\n\t\tassert.deepStrictEqual(['a10.txt', 'A2.txt', 'A100.txt', 'a20.txt'].sort(compareFileExtensionsUnicode), ['A100.txt', 'A2.txt', 'a10.txt', 'a20.txt'], 'filenames with number and case differences sort in unicode order');\n\t\tassert(compareFileExtensionsUnicode('aggregate.go', 'aggregate_repo.go') < 0, 'when extensions are equal, compares full filenames in unicode order');\n\n\t\t// numeric comparisons\n\t\tassert(compareFileExtensionsUnicode('abc2.txt', 'abc10.txt') > 0, 'filenames with numbers should be in unicode order');\n\t\tassert(compareFileExtensionsUnicode('abc02.txt', 'abc010.txt') > 0, 'filenames with numbers that have leading zeros sort in unicode order');\n\t\tassert(compareFileExtensionsUnicode('abc1.10.txt', 'abc1.2.txt') < 0, 'numbers with dots between them sort in unicode order');\n\t\tassert(compareFileExtensionsUnicode('abc2.txt2', 'abc1.txt10') > 0, 'extensions with numbers should be in unicode order');\n\t\tassert(compareFileExtensionsUnicode('txt.abc2', 'txt.abc10') > 0, 'extensions with numbers should be in unicode order even when they are multiple digits long');\n\t\tassert(compareFileExtensionsUnicode('abc.txt01', 'abc.txt1') < 0, 'extensions with equal numbers should be in unicode order');\n\t\tassert(compareFileExtensionsUnicode('abc02.txt', 'abc002.txt') > 0, 'filenames with equivalent numbers and leading zeros sort in unicode order');\n\t\tassert(compareFileExtensionsUnicode('txt.abc01', 'txt.abc1') < 0, 'extensions with equivalent numbers sort in unicode order');\n\t\tassert(compareFileExtensionsUnicode('a.ext1', 'b.Ext1') < 0, 'if extensions with numbers are equal except for case, unicode full filenames should be compared');\n\t\tassert(compareFileExtensionsUnicode('a.ext1', 'a.Ext1') > 0, 'if extensions with numbers are equal except for case, unicode full filenames should be compared');\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
