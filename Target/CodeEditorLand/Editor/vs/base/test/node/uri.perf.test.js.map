{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/node/uri.perf.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { readFileSync } from 'fs';\nimport { FileAccess } from '../../common/network.js';\nimport { URI } from '../../common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\nsuite('URI - perf', function () {\n\n\t// COMMENT THIS OUT TO RUN TEST\n\tif (1) {\n\t\treturn;\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet manyFileUris: URI[];\n\tsetup(function () {\n\t\tmanyFileUris = [];\n\t\tconst data = readFileSync(FileAccess.asFileUri('vs/base/test/node/uri.perf.data.txt').fsPath).toString();\n\t\tconst lines = data.split('\\n');\n\t\tfor (const line of lines) {\n\t\t\tmanyFileUris.push(URI.file(line));\n\t\t}\n\t});\n\n\tfunction perfTest(name: string, callback: Function) {\n\t\ttest(name, _done => {\n\t\t\tconst t1 = Date.now();\n\t\t\tcallback();\n\t\t\tconst d = Date.now() - t1;\n\t\t\tconsole.log(`${name} took ${d}ms (${(d / manyFileUris.length).toPrecision(3)} ms/uri) (${manyFileUris.length} uris)`);\n\t\t\t_done();\n\t\t});\n\t}\n\n\tperfTest('toString', function () {\n\t\tfor (const uri of manyFileUris) {\n\t\t\tconst data = uri.toString();\n\t\t\tassert.ok(data);\n\t\t}\n\t});\n\n\tperfTest('toString(skipEncoding)', function () {\n\t\tfor (const uri of manyFileUris) {\n\t\t\tconst data = uri.toString(true);\n\t\t\tassert.ok(data);\n\t\t}\n\t});\n\n\tperfTest('fsPath', function () {\n\t\tfor (const uri of manyFileUris) {\n\t\t\tconst data = uri.fsPath;\n\t\t\tassert.ok(data);\n\t\t}\n\t});\n\n\tperfTest('toJSON', function () {\n\t\tfor (const uri of manyFileUris) {\n\t\t\tconst data = uri.toJSON();\n\t\t\tassert.ok(data);\n\t\t}\n\t});\n\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,oBAAoB;AAC7B,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AACpB,SAAS,+CAA+C;AAExD,MAAM,cAAc,WAAY;AAG/B,MAAI,GAAG;AACN;AAAA,EACD;AAEA,0CAAwC;AAExC,MAAI;AACJ,QAAM,WAAY;AACjB,mBAAe,CAAC;AAChB,UAAM,OAAO,aAAa,WAAW,UAAU,qCAAqC,EAAE,MAAM,EAAE,SAAS;AACvG,UAAM,QAAQ,KAAK,MAAM,IAAI;AAC7B,eAAW,QAAQ,OAAO;AACzB,mBAAa,KAAK,IAAI,KAAK,IAAI,CAAC;AAAA,IACjC;AAAA,EACD,CAAC;AAED,WAAS,SAAS,MAAc,UAAoB;AACnD,SAAK,MAAM,WAAS;AACnB,YAAM,KAAK,KAAK,IAAI;AACpB,eAAS;AACT,YAAM,IAAI,KAAK,IAAI,IAAI;AACvB,cAAQ,IAAI,GAAG,IAAI,SAAS,CAAC,QAAQ,IAAI,aAAa,QAAQ,YAAY,CAAC,CAAC,aAAa,aAAa,MAAM,QAAQ;AACpH,YAAM;AAAA,IACP,CAAC;AAAA,EACF;AARS;AAUT,WAAS,YAAY,WAAY;AAChC,eAAW,OAAO,cAAc;AAC/B,YAAM,OAAO,IAAI,SAAS;AAC1B,aAAO,GAAG,IAAI;AAAA,IACf;AAAA,EACD,CAAC;AAED,WAAS,0BAA0B,WAAY;AAC9C,eAAW,OAAO,cAAc;AAC/B,YAAM,OAAO,IAAI,SAAS,IAAI;AAC9B,aAAO,GAAG,IAAI;AAAA,IACf;AAAA,EACD,CAAC;AAED,WAAS,UAAU,WAAY;AAC9B,eAAW,OAAO,cAAc;AAC/B,YAAM,OAAO,IAAI;AACjB,aAAO,GAAG,IAAI;AAAA,IACf;AAAA,EACD,CAAC;AAED,WAAS,UAAU,WAAY;AAC9B,eAAW,OAAO,cAAc;AAC/B,YAAM,OAAO,IAAI,OAAO;AACxB,aAAO,GAAG,IAAI;AAAA,IACf;AAAA,EACD,CAAC;AAEF,CAAC;",
  "names": []
}
