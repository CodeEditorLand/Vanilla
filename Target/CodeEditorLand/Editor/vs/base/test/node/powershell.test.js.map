{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/node/powershell.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport * as fs from 'fs';\nimport * as platform from '../../common/platform.js';\nimport { enumeratePowerShellInstallations, getFirstAvailablePowerShellInstallation, IPowerShellExeDetails } from '../../node/powershell.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\nfunction checkPath(exePath: string) {\n\t// Check to see if the path exists\n\tlet pathCheckResult = false;\n\ttry {\n\t\tconst stat = fs.statSync(exePath);\n\t\tpathCheckResult = stat.isFile();\n\t} catch {\n\t\t// fs.exists throws on Windows with SymbolicLinks so we\n\t\t// also use lstat to try and see if the file exists.\n\t\ttry {\n\t\t\tpathCheckResult = fs.statSync(fs.readlinkSync(exePath)).isFile();\n\t\t} catch {\n\n\t\t}\n\t}\n\n\tassert.strictEqual(pathCheckResult, true);\n}\n\nif (platform.isWindows) {\n\tsuite('PowerShell finder', () => {\n\t\tensureNoDisposablesAreLeakedInTestSuite();\n\t\ttest('Can find first available PowerShell', async () => {\n\t\t\tconst pwshExe = await getFirstAvailablePowerShellInstallation();\n\t\t\tconst exePath = pwshExe?.exePath;\n\t\t\tassert.notStrictEqual(exePath, null);\n\t\t\tassert.notStrictEqual(pwshExe?.displayName, null);\n\n\t\t\tcheckPath(exePath!);\n\t\t});\n\n\t\ttest('Can enumerate PowerShells', async () => {\n\t\t\tconst pwshs = new Array<IPowerShellExeDetails>();\n\t\t\tfor await (const p of enumeratePowerShellInstallations()) {\n\t\t\t\tpwshs.push(p);\n\t\t\t}\n\n\t\t\tconst powershellLog = 'Found these PowerShells:\\n' + pwshs.map(p => `${p.displayName}: ${p.exePath}`).join('\\n');\n\t\t\tassert.strictEqual(pwshs.length >= 1, true, powershellLog);\n\n\t\t\tfor (const pwsh of pwshs) {\n\t\t\t\tcheckPath(pwsh.exePath);\n\t\t\t}\n\n\t\t\t// The last one should always be Windows PowerShell.\n\t\t\tassert.strictEqual(pwshs[pwshs.length - 1].displayName, 'Windows PowerShell', powershellLog);\n\t\t});\n\t});\n}\n"],
  "mappings": ";;AAIA,OAAO,YAAY;AACnB,YAAY,QAAQ;AACpB,YAAY,cAAc;AAC1B,SAAS,kCAAkC,yCAAyC,6BAA6B;AACjH,SAAS,+CAA+C;AAExD,SAAS,UAAU,SAAiB;AAEnC,MAAI,kBAAkB;AACtB,MAAI;AACH,UAAM,OAAO,GAAG,SAAS,OAAO;AAChC,sBAAkB,KAAK,OAAO;AAAA,EAC/B,QAAQ;AAGP,QAAI;AACH,wBAAkB,GAAG,SAAS,GAAG,aAAa,OAAO,CAAC,EAAE,OAAO;AAAA,IAChE,QAAQ;AAAA,IAER;AAAA,EACD;AAEA,SAAO,YAAY,iBAAiB,IAAI;AACzC;AAjBS;AAmBT,IAAI,SAAS,WAAW;AACvB,QAAM,qBAAqB,MAAM;AAChC,4CAAwC;AACxC,SAAK,uCAAuC,YAAY;AACvD,YAAM,UAAU,MAAM,wCAAwC;AAC9D,YAAM,UAAU,SAAS;AACzB,aAAO,eAAe,SAAS,IAAI;AACnC,aAAO,eAAe,SAAS,aAAa,IAAI;AAEhD,gBAAU,OAAQ;AAAA,IACnB,CAAC;AAED,SAAK,6BAA6B,YAAY;AAC7C,YAAM,QAAQ,IAAI,MAA6B;AAC/C,uBAAiB,KAAK,iCAAiC,GAAG;AACzD,cAAM,KAAK,CAAC;AAAA,MACb;AAEA,YAAM,gBAAgB,+BAA+B,MAAM,IAAI,OAAK,GAAG,EAAE,WAAW,KAAK,EAAE,OAAO,EAAE,EAAE,KAAK,IAAI;AAC/G,aAAO,YAAY,MAAM,UAAU,GAAG,MAAM,aAAa;AAEzD,iBAAW,QAAQ,OAAO;AACzB,kBAAU,KAAK,OAAO;AAAA,MACvB;AAGA,aAAO,YAAY,MAAM,MAAM,SAAS,CAAC,EAAE,aAAa,sBAAsB,aAAa;AAAA,IAC5F,CAAC;AAAA,EACF,CAAC;AACF;",
  "names": []
}
