{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/node/snapshot.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { tmpdir } from 'os';\nimport { getRandomTestPath } from './testUtils.js';\nimport { Promises } from '../../node/pfs.js';\nimport { SnapshotContext, assertSnapshot } from '../common/snapshot.js';\nimport { URI } from '../../common/uri.js';\nimport * as path from 'path';\nimport { assertThrowsAsync, ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\n// tests for snapshot are in Node so that we can use native FS operations to\n// set up and validate things.\n//\n// Uses snapshots for testing snapshots. It's snapception!\n\nsuite('snapshot', () => {\n\tlet testDir: string;\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(function () {\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'snapshot');\n\t\treturn fs.promises.mkdir(testDir, { recursive: true });\n\t});\n\n\tteardown(function () {\n\t\treturn Promises.rm(testDir);\n\t});\n\n\tconst makeContext = (test: Partial<Mocha.Test> | undefined) => {\n\t\treturn new class extends SnapshotContext {\n\t\t\tconstructor() {\n\t\t\t\tsuper(test as Mocha.Test);\n\t\t\t\tthis.snapshotsDir = URI.file(testDir);\n\t\t\t}\n\t\t};\n\t};\n\n\tconst snapshotFileTree = async () => {\n\t\tlet str = '';\n\n\t\tconst printDir = async (dir: string, indent: number) => {\n\t\t\tconst children = await Promises.readdir(dir);\n\t\t\tfor (const child of children) {\n\t\t\t\tconst p = path.join(dir, child);\n\t\t\t\tif ((await fs.promises.stat(p)).isFile()) {\n\t\t\t\t\tconst content = await fs.promises.readFile(p, 'utf-8');\n\t\t\t\t\tstr += `${' '.repeat(indent)}${child}:\\n`;\n\t\t\t\t\tfor (const line of content.split('\\n')) {\n\t\t\t\t\t\tstr += `${' '.repeat(indent + 2)}${line}\\n`;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstr += `${' '.repeat(indent)}${child}/\\n`;\n\t\t\t\t\tawait printDir(p, indent + 2);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tawait printDir(testDir, 0);\n\t\tawait assertSnapshot(str);\n\t};\n\n\ttest('creates a snapshot', async () => {\n\t\tconst ctx = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\tawait ctx.assert({ cool: true });\n\t\tawait snapshotFileTree();\n\t});\n\n\ttest('validates a snapshot', async () => {\n\t\tconst ctx1 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\tawait ctx1.assert({ cool: true });\n\n\t\tconst ctx2 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\t// should pass:\n\t\tawait ctx2.assert({ cool: true });\n\n\t\tconst ctx3 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\t// should fail:\n\t\tawait assertThrowsAsync(() => ctx3.assert({ cool: false }));\n\t});\n\n\ttest('cleans up old snapshots', async () => {\n\t\tconst ctx1 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\tawait ctx1.assert({ cool: true });\n\t\tawait ctx1.assert({ nifty: true });\n\t\tawait ctx1.assert({ customName: 1 }, { name: 'thirdTest', extension: 'txt' });\n\t\tawait ctx1.assert({ customName: 2 }, { name: 'fourthTest' });\n\n\t\tawait snapshotFileTree();\n\n\t\tconst ctx2 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\tawait ctx2.assert({ cool: true });\n\t\tawait ctx2.assert({ customName: 1 }, { name: 'thirdTest' });\n\t\tawait ctx2.removeOldSnapshots();\n\n\t\tawait snapshotFileTree();\n\t});\n\n\ttest('formats object nicely', async () => {\n\t\tconst circular: any = {};\n\t\tcircular.a = circular;\n\n\t\tawait assertSnapshot([\n\t\t\t1,\n\t\t\ttrue,\n\t\t\tundefined,\n\t\t\tnull,\n\t\t\t123n,\n\t\t\tSymbol('heyo'),\n\t\t\t'hello',\n\t\t\t{ hello: 'world' },\n\t\t\tcircular,\n\t\t\tnew Map([['hello', 1], ['goodbye', 2]]),\n\t\t\tnew Set([1, 2, 3]),\n\t\t\tfunction helloWorld() { },\n\t\t\t/hello/g,\n\t\t\tnew Array(10).fill('long string'.repeat(10)),\n\t\t\t{ [Symbol.for('debug.description')]() { return `Range [1 -> 5]`; } },\n\t\t]);\n\t});\n});\n"],
  "mappings": "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",
  "names": ["test"]
}
