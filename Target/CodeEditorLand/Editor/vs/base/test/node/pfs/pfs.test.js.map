{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/node/pfs/pfs.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as fs from 'fs';\nimport { tmpdir } from 'os';\nimport { timeout } from '../../../common/async.js';\nimport { VSBuffer } from '../../../common/buffer.js';\nimport { randomPath } from '../../../common/extpath.js';\nimport { FileAccess } from '../../../common/network.js';\nimport { basename, dirname, join, sep } from '../../../common/path.js';\nimport { isWindows } from '../../../common/platform.js';\nimport { configureFlushOnWrite, Promises, RimRafMode, rimrafSync, SymlinkSupport, writeFileSync } from '../../../node/pfs.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../common/utils.js';\nimport { flakySuite, getRandomTestPath } from '../testUtils.js';\nimport { isESM } from '../../../common/amd.js';\n\nconfigureFlushOnWrite(false); // speed up all unit tests by disabling flush on write\n\nflakySuite('PFS', function () {\n\n\tlet testDir: string;\n\n\tsetup(() => {\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'pfs');\n\n\t\treturn fs.promises.mkdir(testDir, { recursive: true });\n\t});\n\n\tteardown(() => {\n\t\treturn Promises.rm(testDir);\n\t});\n\n\ttest('writeFile', async () => {\n\t\tconst testFile = join(testDir, 'writefile.txt');\n\n\t\tassert.ok(!(await Promises.exists(testFile)));\n\n\t\tawait Promises.writeFile(testFile, 'Hello World', (null!));\n\n\t\tassert.strictEqual((await fs.promises.readFile(testFile)).toString(), 'Hello World');\n\t});\n\n\ttest('writeFile - parallel write on different files works', async () => {\n\t\tconst testFile1 = join(testDir, 'writefile1.txt');\n\t\tconst testFile2 = join(testDir, 'writefile2.txt');\n\t\tconst testFile3 = join(testDir, 'writefile3.txt');\n\t\tconst testFile4 = join(testDir, 'writefile4.txt');\n\t\tconst testFile5 = join(testDir, 'writefile5.txt');\n\n\t\tawait Promise.all([\n\t\t\tPromises.writeFile(testFile1, 'Hello World 1', (null!)),\n\t\t\tPromises.writeFile(testFile2, 'Hello World 2', (null!)),\n\t\t\tPromises.writeFile(testFile3, 'Hello World 3', (null!)),\n\t\t\tPromises.writeFile(testFile4, 'Hello World 4', (null!)),\n\t\t\tPromises.writeFile(testFile5, 'Hello World 5', (null!))\n\t\t]);\n\t\tassert.strictEqual(fs.readFileSync(testFile1).toString(), 'Hello World 1');\n\t\tassert.strictEqual(fs.readFileSync(testFile2).toString(), 'Hello World 2');\n\t\tassert.strictEqual(fs.readFileSync(testFile3).toString(), 'Hello World 3');\n\t\tassert.strictEqual(fs.readFileSync(testFile4).toString(), 'Hello World 4');\n\t\tassert.strictEqual(fs.readFileSync(testFile5).toString(), 'Hello World 5');\n\t});\n\n\ttest('writeFile - parallel write on same files works and is sequentalized', async () => {\n\t\tconst testFile = join(testDir, 'writefile.txt');\n\n\t\tawait Promise.all([\n\t\t\tPromises.writeFile(testFile, 'Hello World 1', undefined),\n\t\t\tPromises.writeFile(testFile, 'Hello World 2', undefined),\n\t\t\ttimeout(10).then(() => Promises.writeFile(testFile, 'Hello World 3', undefined)),\n\t\t\tPromises.writeFile(testFile, 'Hello World 4', undefined),\n\t\t\ttimeout(10).then(() => Promises.writeFile(testFile, 'Hello World 5', undefined))\n\t\t]);\n\t\tassert.strictEqual(fs.readFileSync(testFile).toString(), 'Hello World 5');\n\t});\n\n\ttest('rimraf - simple - unlink', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\n\t\tawait Promises.rm(testDir);\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\ttest('rimraf - simple - move', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\n\t\tawait Promises.rm(testDir, RimRafMode.MOVE);\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\ttest('rimraf - simple - move (with moveToPath)', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\n\t\tawait Promises.rm(testDir, RimRafMode.MOVE, join(dirname(testDir), `${basename(testDir)}.vsctmp`));\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\ttest('rimraf - path does not exist - move', async () => {\n\t\tconst nonExistingDir = join(testDir, 'unknown-move');\n\t\tawait Promises.rm(nonExistingDir, RimRafMode.MOVE);\n\t});\n\n\ttest('rimraf - path does not exist - unlink', async () => {\n\t\tconst nonExistingDir = join(testDir, 'unknown-unlink');\n\t\tawait Promises.rm(nonExistingDir, RimRafMode.UNLINK);\n\t});\n\n\ttest('rimraf - recursive folder structure - unlink', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\t\tfs.mkdirSync(join(testDir, 'somefolder'));\n\t\tfs.writeFileSync(join(testDir, 'somefolder', 'somefile.txt'), 'Contents');\n\n\t\tawait Promises.rm(testDir);\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\ttest('rimraf - recursive folder structure - move', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\t\tfs.mkdirSync(join(testDir, 'somefolder'));\n\t\tfs.writeFileSync(join(testDir, 'somefolder', 'somefile.txt'), 'Contents');\n\n\t\tawait Promises.rm(testDir, RimRafMode.MOVE);\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\ttest('rimraf - simple ends with dot - move', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\n\t\tawait Promises.rm(testDir, RimRafMode.MOVE);\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\ttest('rimraf - simple ends with dot slash/backslash - move', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\n\t\tawait Promises.rm(`${testDir}${sep}`, RimRafMode.MOVE);\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\ttest('rimrafSync - swallows file not found error', function () {\n\t\tconst nonExistingDir = join(testDir, 'not-existing');\n\t\trimrafSync(nonExistingDir);\n\n\t\tassert.ok(!fs.existsSync(nonExistingDir));\n\t});\n\n\ttest('rimrafSync - simple', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\n\t\trimrafSync(testDir);\n\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\ttest('rimrafSync - recursive folder structure', async () => {\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\n\t\tfs.mkdirSync(join(testDir, 'somefolder'));\n\t\tfs.writeFileSync(join(testDir, 'somefolder', 'somefile.txt'), 'Contents');\n\n\t\trimrafSync(testDir);\n\n\t\tassert.ok(!fs.existsSync(testDir));\n\t});\n\n\t(!isESM ? test.skip : test /* somehow fails in AMD with ENOENT for fixtures dir */)('copy, rename and delete', async () => {\n\t\tconst sourceDir = FileAccess.asFileUri('vs/base/test/node/pfs/fixtures').fsPath;\n\t\tconst parentDir = join(tmpdir(), 'vsctests', 'pfs');\n\t\tconst targetDir = randomPath(parentDir);\n\t\tconst targetDir2 = randomPath(parentDir);\n\n\t\tawait Promises.copy(sourceDir, targetDir, { preserveSymlinks: true });\n\n\t\tassert.ok(fs.existsSync(targetDir));\n\t\tassert.ok(fs.existsSync(join(targetDir, 'index.html')));\n\t\tassert.ok(fs.existsSync(join(targetDir, 'site.css')));\n\t\tassert.ok(fs.existsSync(join(targetDir, 'examples')));\n\t\tassert.ok(fs.statSync(join(targetDir, 'examples')).isDirectory());\n\t\tassert.ok(fs.existsSync(join(targetDir, 'examples', 'small.jxs')));\n\n\t\tawait Promises.rename(targetDir, targetDir2);\n\n\t\tassert.ok(!fs.existsSync(targetDir));\n\t\tassert.ok(fs.existsSync(targetDir2));\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'index.html')));\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'site.css')));\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'examples')));\n\t\tassert.ok(fs.statSync(join(targetDir2, 'examples')).isDirectory());\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'examples', 'small.jxs')));\n\n\t\tawait Promises.rename(join(targetDir2, 'index.html'), join(targetDir2, 'index_moved.html'));\n\n\t\tassert.ok(!fs.existsSync(join(targetDir2, 'index.html')));\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'index_moved.html')));\n\n\t\tawait Promises.rm(parentDir);\n\n\t\tassert.ok(!fs.existsSync(parentDir));\n\t});\n\n\t(!isESM ? test.skip : test /* somehow fails in AMD with ENOENT for fixtures dir */)('rename without retry', async () => {\n\t\tconst sourceDir = FileAccess.asFileUri('vs/base/test/node/pfs/fixtures').fsPath;\n\t\tconst parentDir = join(tmpdir(), 'vsctests', 'pfs');\n\t\tconst targetDir = randomPath(parentDir);\n\t\tconst targetDir2 = randomPath(parentDir);\n\n\t\tawait Promises.copy(sourceDir, targetDir, { preserveSymlinks: true });\n\t\tawait Promises.rename(targetDir, targetDir2, false);\n\n\t\tassert.ok(!fs.existsSync(targetDir));\n\t\tassert.ok(fs.existsSync(targetDir2));\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'index.html')));\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'site.css')));\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'examples')));\n\t\tassert.ok(fs.statSync(join(targetDir2, 'examples')).isDirectory());\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'examples', 'small.jxs')));\n\n\t\tawait Promises.rename(join(targetDir2, 'index.html'), join(targetDir2, 'index_moved.html'), false);\n\n\t\tassert.ok(!fs.existsSync(join(targetDir2, 'index.html')));\n\t\tassert.ok(fs.existsSync(join(targetDir2, 'index_moved.html')));\n\n\t\tawait Promises.rm(parentDir);\n\n\t\tassert.ok(!fs.existsSync(parentDir));\n\t});\n\n\ttest('copy handles symbolic links', async () => {\n\t\tconst symbolicLinkTarget = randomPath(testDir);\n\t\tconst symLink = randomPath(testDir);\n\t\tconst copyTarget = randomPath(testDir);\n\n\t\tawait fs.promises.mkdir(symbolicLinkTarget, { recursive: true });\n\n\t\tfs.symlinkSync(symbolicLinkTarget, symLink, 'junction');\n\n\t\t// Copy preserves symlinks if configured as such\n\t\t//\n\t\t// Windows: this test does not work because creating symlinks\n\t\t// requires priviledged permissions (admin).\n\t\tif (!isWindows) {\n\t\t\tawait Promises.copy(symLink, copyTarget, { preserveSymlinks: true });\n\n\t\t\tassert.ok(fs.existsSync(copyTarget));\n\n\t\t\tconst { symbolicLink } = await SymlinkSupport.stat(copyTarget);\n\t\t\tassert.ok(symbolicLink);\n\t\t\tassert.ok(!symbolicLink.dangling);\n\n\t\t\tconst target = await fs.promises.readlink(copyTarget);\n\t\t\tassert.strictEqual(target, symbolicLinkTarget);\n\n\t\t\t// Copy does not preserve symlinks if configured as such\n\n\t\t\tawait Promises.rm(copyTarget);\n\t\t\tawait Promises.copy(symLink, copyTarget, { preserveSymlinks: false });\n\n\t\t\tassert.ok(fs.existsSync(copyTarget));\n\n\t\t\tconst { symbolicLink: symbolicLink2 } = await SymlinkSupport.stat(copyTarget);\n\t\t\tassert.ok(!symbolicLink2);\n\t\t}\n\n\t\t// Copy does not fail over dangling symlinks\n\n\t\tawait Promises.rm(copyTarget);\n\t\tawait Promises.rm(symbolicLinkTarget);\n\n\t\tawait Promises.copy(symLink, copyTarget, { preserveSymlinks: true }); // this should not throw\n\n\t\tif (!isWindows) {\n\t\t\tconst { symbolicLink } = await SymlinkSupport.stat(copyTarget);\n\t\t\tassert.ok(symbolicLink?.dangling);\n\t\t} else {\n\t\t\tassert.ok(!fs.existsSync(copyTarget));\n\t\t}\n\t});\n\n\ttest('copy handles symbolic links when the reference is inside source', async () => {\n\n\t\t// Source Folder\n\t\tconst sourceFolder = join(randomPath(testDir), 'copy-test'); \t\t// copy-test\n\t\tconst sourceLinkTestFolder = join(sourceFolder, 'link-test');\t\t// copy-test/link-test\n\t\tconst sourceLinkMD5JSFolder = join(sourceLinkTestFolder, 'md5');\t// copy-test/link-test/md5\n\t\tconst sourceLinkMD5JSFile = join(sourceLinkMD5JSFolder, 'md5.js');\t// copy-test/link-test/md5/md5.js\n\t\tawait fs.promises.mkdir(sourceLinkMD5JSFolder, { recursive: true });\n\t\tawait Promises.writeFile(sourceLinkMD5JSFile, 'Hello from MD5');\n\n\t\tconst sourceLinkMD5JSFolderLinked = join(sourceLinkTestFolder, 'md5-linked');\t// copy-test/link-test/md5-linked\n\t\tfs.symlinkSync(sourceLinkMD5JSFolder, sourceLinkMD5JSFolderLinked, 'junction');\n\n\t\t// Target Folder\n\t\tconst targetLinkTestFolder = join(sourceFolder, 'link-test copy');\t\t\t\t// copy-test/link-test copy\n\t\tconst targetLinkMD5JSFolder = join(targetLinkTestFolder, 'md5');\t\t\t\t// copy-test/link-test copy/md5\n\t\tconst targetLinkMD5JSFile = join(targetLinkMD5JSFolder, 'md5.js');\t\t\t\t// copy-test/link-test copy/md5/md5.js\n\t\tconst targetLinkMD5JSFolderLinked = join(targetLinkTestFolder, 'md5-linked');\t// copy-test/link-test copy/md5-linked\n\n\t\t// Copy with `preserveSymlinks: true` and verify result\n\t\t//\n\t\t// Windows: this test does not work because creating symlinks\n\t\t// requires priviledged permissions (admin).\n\t\tif (!isWindows) {\n\t\t\tawait Promises.copy(sourceLinkTestFolder, targetLinkTestFolder, { preserveSymlinks: true });\n\n\t\t\tassert.ok(fs.existsSync(targetLinkTestFolder));\n\t\t\tassert.ok(fs.existsSync(targetLinkMD5JSFolder));\n\t\t\tassert.ok(fs.existsSync(targetLinkMD5JSFile));\n\t\t\tassert.ok(fs.existsSync(targetLinkMD5JSFolderLinked));\n\t\t\tassert.ok(fs.lstatSync(targetLinkMD5JSFolderLinked).isSymbolicLink());\n\n\t\t\tconst linkTarget = await fs.promises.readlink(targetLinkMD5JSFolderLinked);\n\t\t\tassert.strictEqual(linkTarget, targetLinkMD5JSFolder);\n\n\t\t\tawait Promises.rm(targetLinkTestFolder);\n\t\t}\n\n\t\t// Copy with `preserveSymlinks: false` and verify result\n\t\tawait Promises.copy(sourceLinkTestFolder, targetLinkTestFolder, { preserveSymlinks: false });\n\n\t\tassert.ok(fs.existsSync(targetLinkTestFolder));\n\t\tassert.ok(fs.existsSync(targetLinkMD5JSFolder));\n\t\tassert.ok(fs.existsSync(targetLinkMD5JSFile));\n\t\tassert.ok(fs.existsSync(targetLinkMD5JSFolderLinked));\n\t\tassert.ok(fs.lstatSync(targetLinkMD5JSFolderLinked).isDirectory());\n\t});\n\n\ttest('readDirsInDir', async () => {\n\t\tfs.mkdirSync(join(testDir, 'somefolder1'));\n\t\tfs.mkdirSync(join(testDir, 'somefolder2'));\n\t\tfs.mkdirSync(join(testDir, 'somefolder3'));\n\t\tfs.writeFileSync(join(testDir, 'somefile.txt'), 'Contents');\n\t\tfs.writeFileSync(join(testDir, 'someOtherFile.txt'), 'Contents');\n\n\t\tconst result = await Promises.readDirsInDir(testDir);\n\t\tassert.strictEqual(result.length, 3);\n\t\tassert.ok(result.indexOf('somefolder1') !== -1);\n\t\tassert.ok(result.indexOf('somefolder2') !== -1);\n\t\tassert.ok(result.indexOf('somefolder3') !== -1);\n\t});\n\n\ttest('stat link', async () => {\n\t\tconst directory = randomPath(testDir);\n\t\tconst symbolicLink = randomPath(testDir);\n\n\t\tawait fs.promises.mkdir(directory, { recursive: true });\n\n\t\tfs.symlinkSync(directory, symbolicLink, 'junction');\n\n\t\tlet statAndIsLink = await SymlinkSupport.stat(directory);\n\t\tassert.ok(!statAndIsLink?.symbolicLink);\n\n\t\tstatAndIsLink = await SymlinkSupport.stat(symbolicLink);\n\t\tassert.ok(statAndIsLink?.symbolicLink);\n\t\tassert.ok(!statAndIsLink?.symbolicLink?.dangling);\n\t});\n\n\ttest('stat link (non existing target)', async () => {\n\t\tconst directory = randomPath(testDir);\n\t\tconst symbolicLink = randomPath(testDir);\n\n\t\tawait fs.promises.mkdir(directory, { recursive: true });\n\n\t\tfs.symlinkSync(directory, symbolicLink, 'junction');\n\n\t\tawait Promises.rm(directory);\n\n\t\tconst statAndIsLink = await SymlinkSupport.stat(symbolicLink);\n\t\tassert.ok(statAndIsLink?.symbolicLink);\n\t\tassert.ok(statAndIsLink?.symbolicLink?.dangling);\n\t});\n\n\ttest('readdir', async () => {\n\t\tif (typeof process.versions['electron'] !== 'undefined' /* needs electron */) {\n\t\t\tconst parent = randomPath(join(testDir, 'pfs'));\n\t\t\tconst newDir = join(parent, '\u00F6\u00E4\u00FC');\n\n\t\t\tawait fs.promises.mkdir(newDir, { recursive: true });\n\n\t\t\tassert.ok(fs.existsSync(newDir));\n\n\t\t\tconst children = await Promises.readdir(parent);\n\t\t\tassert.strictEqual(children.some(n => n === '\u00F6\u00E4\u00FC'), true); // Mac always converts to NFD, so\n\t\t}\n\t});\n\n\ttest('readdir (with file types)', async () => {\n\t\tif (typeof process.versions['electron'] !== 'undefined' /* needs electron */) {\n\t\t\tconst newDir = join(testDir, '\u00F6\u00E4\u00FC');\n\t\t\tawait fs.promises.mkdir(newDir, { recursive: true });\n\n\t\t\tawait Promises.writeFile(join(testDir, 'somefile.txt'), 'contents');\n\n\t\t\tassert.ok(fs.existsSync(newDir));\n\n\t\t\tconst children = await Promises.readdir(testDir, { withFileTypes: true });\n\n\t\t\tassert.strictEqual(children.some(n => n.name === '\u00F6\u00E4\u00FC'), true); // Mac always converts to NFD, so\n\t\t\tassert.strictEqual(children.some(n => n.isDirectory()), true);\n\n\t\t\tassert.strictEqual(children.some(n => n.name === 'somefile.txt'), true);\n\t\t\tassert.strictEqual(children.some(n => n.isFile()), true);\n\t\t}\n\t});\n\n\ttest('writeFile (string)', async () => {\n\t\tconst smallData = 'Hello World';\n\t\tconst bigData = (new Array(100 * 1024)).join('Large String\\n');\n\n\t\treturn testWriteFile(smallData, smallData, bigData, bigData);\n\t});\n\n\ttest('writeFile (string) - flush on write', async () => {\n\t\tconfigureFlushOnWrite(true);\n\t\ttry {\n\t\t\tconst smallData = 'Hello World';\n\t\t\tconst bigData = (new Array(100 * 1024)).join('Large String\\n');\n\n\t\t\treturn await testWriteFile(smallData, smallData, bigData, bigData);\n\t\t} finally {\n\t\t\tconfigureFlushOnWrite(false);\n\t\t}\n\t});\n\n\ttest('writeFile (Buffer)', async () => {\n\t\tconst smallData = 'Hello World';\n\t\tconst bigData = (new Array(100 * 1024)).join('Large String\\n');\n\n\t\treturn testWriteFile(Buffer.from(smallData), smallData, Buffer.from(bigData), bigData);\n\t});\n\n\ttest('writeFile (UInt8Array)', async () => {\n\t\tconst smallData = 'Hello World';\n\t\tconst bigData = (new Array(100 * 1024)).join('Large String\\n');\n\n\t\treturn testWriteFile(VSBuffer.fromString(smallData).buffer, smallData, VSBuffer.fromString(bigData).buffer, bigData);\n\t});\n\n\tasync function testWriteFile(\n\t\tsmallData: string | Buffer | Uint8Array,\n\t\tsmallDataValue: string,\n\t\tbigData: string | Buffer | Uint8Array,\n\t\tbigDataValue: string\n\t): Promise<void> {\n\t\tconst testFile = join(testDir, 'flushed.txt');\n\n\t\tassert.ok(fs.existsSync(testDir));\n\n\t\tawait Promises.writeFile(testFile, smallData);\n\t\tassert.strictEqual(fs.readFileSync(testFile).toString(), smallDataValue);\n\n\t\tawait Promises.writeFile(testFile, bigData);\n\t\tassert.strictEqual(fs.readFileSync(testFile).toString(), bigDataValue);\n\t}\n\n\ttest('writeFile (string, error handling)', async () => {\n\t\tconst testFile = join(testDir, 'flushed.txt');\n\n\t\tfs.mkdirSync(testFile); // this will trigger an error later because testFile is now a directory!\n\n\t\tlet expectedError: Error | undefined;\n\t\ttry {\n\t\t\tawait Promises.writeFile(testFile, 'Hello World');\n\t\t} catch (error) {\n\t\t\texpectedError = error;\n\t\t}\n\n\t\tassert.ok(expectedError);\n\t});\n\n\ttest('writeFileSync', async () => {\n\t\tconst testFile = join(testDir, 'flushed.txt');\n\n\t\twriteFileSync(testFile, 'Hello World');\n\t\tassert.strictEqual(fs.readFileSync(testFile).toString(), 'Hello World');\n\n\t\tconst largeString = (new Array(100 * 1024)).join('Large String\\n');\n\n\t\twriteFileSync(testFile, largeString);\n\t\tassert.strictEqual(fs.readFileSync(testFile).toString(), largeString);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
