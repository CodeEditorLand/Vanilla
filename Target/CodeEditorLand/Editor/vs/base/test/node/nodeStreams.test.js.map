{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/node/nodeStreams.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { Writable } from 'stream';\nimport assert from 'assert';\nimport { StreamSplitter } from '../../node/nodeStreams.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\n\nsuite('StreamSplitter', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should split a stream on a single character splitter', (done) => {\n\t\tconst chunks: string[] = [];\n\t\tconst splitter = new StreamSplitter('\\n');\n\t\tconst writable = new Writable({\n\t\t\twrite(chunk, _encoding, callback) {\n\t\t\t\tchunks.push(chunk.toString());\n\t\t\t\tcallback();\n\t\t\t},\n\t\t});\n\n\t\tsplitter.pipe(writable);\n\t\tsplitter.write('hello\\nwor');\n\t\tsplitter.write('ld\\n');\n\t\tsplitter.write('foo\\nbar\\nz');\n\t\tsplitter.end(() => {\n\t\t\tassert.deepStrictEqual(chunks, ['hello\\n', 'world\\n', 'foo\\n', 'bar\\n', 'z']);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('should split a stream on a multi-character splitter', (done) => {\n\t\tconst chunks: string[] = [];\n\t\tconst splitter = new StreamSplitter('---');\n\t\tconst writable = new Writable({\n\t\t\twrite(chunk, _encoding, callback) {\n\t\t\t\tchunks.push(chunk.toString());\n\t\t\t\tcallback();\n\t\t\t},\n\t\t});\n\n\t\tsplitter.pipe(writable);\n\t\tsplitter.write('hello---wor');\n\t\tsplitter.write('ld---');\n\t\tsplitter.write('foo---bar---z');\n\t\tsplitter.end(() => {\n\t\t\tassert.deepStrictEqual(chunks, ['hello---', 'world---', 'foo---', 'bar---', 'z']);\n\t\t\tdone();\n\t\t});\n\t});\n});\n"],
  "mappings": "AAMA,SAAS,gBAAgB;AACzB,OAAO,YAAY;AACnB,SAAS,sBAAsB;AAC/B,SAAS,+CAA+C;AAExD,MAAM,kBAAkB,MAAM;AAC7B,0CAAwC;AAExC,OAAK,wDAAwD,CAAC,SAAS;AACtE,UAAM,SAAmB,CAAC;AAC1B,UAAM,WAAW,IAAI,eAAe,IAAI;AACxC,UAAM,WAAW,IAAI,SAAS;AAAA,MAC7B,MAAM,OAAO,WAAW,UAAU;AACjC,eAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,iBAAS;AAAA,MACV;AAAA,IACD,CAAC;AAED,aAAS,KAAK,QAAQ;AACtB,aAAS,MAAM,YAAY;AAC3B,aAAS,MAAM,MAAM;AACrB,aAAS,MAAM,aAAa;AAC5B,aAAS,IAAI,MAAM;AAClB,aAAO,gBAAgB,QAAQ,CAAC,WAAW,WAAW,SAAS,SAAS,GAAG,CAAC;AAC5E,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,uDAAuD,CAAC,SAAS;AACrE,UAAM,SAAmB,CAAC;AAC1B,UAAM,WAAW,IAAI,eAAe,KAAK;AACzC,UAAM,WAAW,IAAI,SAAS;AAAA,MAC7B,MAAM,OAAO,WAAW,UAAU;AACjC,eAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,iBAAS;AAAA,MACV;AAAA,IACD,CAAC;AAED,aAAS,KAAK,QAAQ;AACtB,aAAS,MAAM,aAAa;AAC5B,aAAS,MAAM,OAAO;AACtB,aAAS,MAAM,eAAe;AAC9B,aAAS,IAAI,MAAM;AAClB,aAAO,gBAAgB,QAAQ,CAAC,YAAY,YAAY,UAAU,UAAU,GAAG,CAAC;AAChF,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
