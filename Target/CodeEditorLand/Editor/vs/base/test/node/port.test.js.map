{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/node/port.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as net from 'net';\nimport * as ports from '../../node/ports.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\nimport { flakySuite } from './testUtils.js';\n\nflakySuite('Ports', () => {\n\t(process.env['VSCODE_PID'] ? test.skip /* this test fails when run from within VS Code */ : test)('Finds a free port (no timeout)', function (done) {\n\n\t\t// get an initial freeport >= 7000\n\t\tports.findFreePort(7000, 100, 300000).then(initialPort => {\n\t\t\tassert.ok(initialPort >= 7000);\n\n\t\t\t// create a server to block this port\n\t\t\tconst server = net.createServer();\n\t\t\tserver.listen(initialPort, undefined, undefined, () => {\n\n\t\t\t\t// once listening, find another free port and assert that the port is different from the opened one\n\t\t\t\tports.findFreePort(7000, 50, 300000).then(freePort => {\n\t\t\t\t\tassert.ok(freePort >= 7000 && freePort !== initialPort);\n\t\t\t\t\tserver.close();\n\n\t\t\t\t\tdone();\n\t\t\t\t}, err => done(err));\n\t\t\t});\n\t\t}, err => done(err));\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,YAAY,SAAS;AACrB,YAAY,WAAW;AACvB,SAAS,+CAA+C;AACxD,SAAS,kBAAkB;AAE3B,WAAW,SAAS,MAAM;AACzB,GAAC,QAAQ,IAAI,YAAY,IAAI,KAAK,OAA0D,MAAM,kCAAkC,SAAU,MAAM;AAGnJ,UAAM,aAAa,KAAM,KAAK,GAAM,EAAE,KAAK,iBAAe;AACzD,aAAO,GAAG,eAAe,GAAI;AAG7B,YAAM,SAAS,IAAI,aAAa;AAChC,aAAO,OAAO,aAAa,QAAW,QAAW,MAAM;AAGtD,cAAM,aAAa,KAAM,IAAI,GAAM,EAAE,KAAK,cAAY;AACrD,iBAAO,GAAG,YAAY,OAAQ,aAAa,WAAW;AACtD,iBAAO,MAAM;AAEb,eAAK;AAAA,QACN,GAAG,SAAO,KAAK,GAAG,CAAC;AAAA,MACpB,CAAC;AAAA,IACF,GAAG,SAAO,KAAK,GAAG,CAAC;AAAA,EACpB,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
