{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/node/extpath.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport assert from 'assert';\nimport { tmpdir } from 'os';\nimport { realcase, realcaseSync, realpath, realpathSync } from '../../node/extpath.js';\nimport { Promises } from '../../node/pfs.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../common/utils.js';\nimport { flakySuite, getRandomTestPath } from './testUtils.js';\n\nflakySuite('Extpath', () => {\n\tlet testDir: string;\n\n\tsetup(() => {\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'extpath');\n\n\t\treturn fs.promises.mkdir(testDir, { recursive: true });\n\t});\n\n\tteardown(() => {\n\t\treturn Promises.rm(testDir);\n\t});\n\n\ttest('realcaseSync', async () => {\n\n\t\t// assume case insensitive file system\n\t\tif (process.platform === 'win32' || process.platform === 'darwin') {\n\t\t\tconst upper = testDir.toUpperCase();\n\t\t\tconst real = realcaseSync(upper);\n\n\t\t\tif (real) { // can be null in case of permission errors\n\t\t\t\tassert.notStrictEqual(real, upper);\n\t\t\t\tassert.strictEqual(real.toUpperCase(), upper);\n\t\t\t\tassert.strictEqual(real, testDir);\n\t\t\t}\n\t\t}\n\n\t\t// linux, unix, etc. -> assume case sensitive file system\n\t\telse {\n\t\t\tlet real = realcaseSync(testDir);\n\t\t\tassert.strictEqual(real, testDir);\n\n\t\t\treal = realcaseSync(testDir.toUpperCase());\n\t\t\tassert.strictEqual(real, testDir.toUpperCase());\n\t\t}\n\t});\n\n\ttest('realcase', async () => {\n\n\t\t// assume case insensitive file system\n\t\tif (process.platform === 'win32' || process.platform === 'darwin') {\n\t\t\tconst upper = testDir.toUpperCase();\n\t\t\tconst real = await realcase(upper);\n\n\t\t\tif (real) { // can be null in case of permission errors\n\t\t\t\tassert.notStrictEqual(real, upper);\n\t\t\t\tassert.strictEqual(real.toUpperCase(), upper);\n\t\t\t\tassert.strictEqual(real, testDir);\n\t\t\t}\n\t\t}\n\n\t\t// linux, unix, etc. -> assume case sensitive file system\n\t\telse {\n\t\t\tlet real = await realcase(testDir);\n\t\t\tassert.strictEqual(real, testDir);\n\n\t\t\treal = await realcase(testDir.toUpperCase());\n\t\t\tassert.strictEqual(real, testDir.toUpperCase());\n\t\t}\n\t});\n\n\ttest('realpath', async () => {\n\t\tconst realpathVal = await realpath(testDir);\n\t\tassert.ok(realpathVal);\n\t});\n\n\ttest('realpathSync', () => {\n\t\tconst realpath = realpathSync(testDir);\n\t\tassert.ok(realpath);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "AAKA,YAAY,QAAQ;AACpB,OAAO,YAAY;AACnB,SAAS,cAAc;AACvB,SAAS,UAAU,cAAc,UAAU,oBAAoB;AAC/D,SAAS,gBAAgB;AACzB,SAAS,+CAA+C;AACxD,SAAS,YAAY,yBAAyB;AAE9C,WAAW,WAAW,MAAM;AAC3B,MAAI;AAEJ,QAAM,MAAM;AACX,cAAU,kBAAkB,OAAO,GAAG,YAAY,SAAS;AAE3D,WAAO,GAAG,SAAS,MAAM,SAAS,EAAE,WAAW,KAAK,CAAC;AAAA,EACtD,CAAC;AAED,WAAS,MAAM;AACd,WAAO,SAAS,GAAG,OAAO;AAAA,EAC3B,CAAC;AAED,OAAK,gBAAgB,YAAY;AAGhC,QAAI,QAAQ,aAAa,WAAW,QAAQ,aAAa,UAAU;AAClE,YAAM,QAAQ,QAAQ,YAAY;AAClC,YAAM,OAAO,aAAa,KAAK;AAE/B,UAAI,MAAM;AACT,eAAO,eAAe,MAAM,KAAK;AACjC,eAAO,YAAY,KAAK,YAAY,GAAG,KAAK;AAC5C,eAAO,YAAY,MAAM,OAAO;AAAA,MACjC;AAAA,IACD,OAGK;AACJ,UAAI,OAAO,aAAa,OAAO;AAC/B,aAAO,YAAY,MAAM,OAAO;AAEhC,aAAO,aAAa,QAAQ,YAAY,CAAC;AACzC,aAAO,YAAY,MAAM,QAAQ,YAAY,CAAC;AAAA,IAC/C;AAAA,EACD,CAAC;AAED,OAAK,YAAY,YAAY;AAG5B,QAAI,QAAQ,aAAa,WAAW,QAAQ,aAAa,UAAU;AAClE,YAAM,QAAQ,QAAQ,YAAY;AAClC,YAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,UAAI,MAAM;AACT,eAAO,eAAe,MAAM,KAAK;AACjC,eAAO,YAAY,KAAK,YAAY,GAAG,KAAK;AAC5C,eAAO,YAAY,MAAM,OAAO;AAAA,MACjC;AAAA,IACD,OAGK;AACJ,UAAI,OAAO,MAAM,SAAS,OAAO;AACjC,aAAO,YAAY,MAAM,OAAO;AAEhC,aAAO,MAAM,SAAS,QAAQ,YAAY,CAAC;AAC3C,aAAO,YAAY,MAAM,QAAQ,YAAY,CAAC;AAAA,IAC/C;AAAA,EACD,CAAC;AAED,OAAK,YAAY,YAAY;AAC5B,UAAM,cAAc,MAAM,SAAS,OAAO;AAC1C,WAAO,GAAG,WAAW;AAAA,EACtB,CAAC;AAED,OAAK,gBAAgB,MAAM;AAC1B,UAAMA,YAAW,aAAa,OAAO;AACrC,WAAO,GAAGA,SAAQ;AAAA,EACnB,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": ["realpath"]
}
