{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/node/processes/processes.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as cp from 'child_process';\nimport { FileAccess } from '../../../common/network.js';\nimport * as objects from '../../../common/objects.js';\nimport * as platform from '../../../common/platform.js';\nimport * as processes from '../../../node/processes.js';\n\nfunction fork(id: string): cp.ChildProcess {\n\tconst opts: any = {\n\t\tenv: objects.mixin(objects.deepClone(process.env), {\n\t\t\tVSCODE_AMD_ENTRYPOINT: id,\n\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\tVSCODE_VERBOSE_LOGGING: true\n\t\t})\n\t};\n\n\treturn cp.fork(FileAccess.asFileUri('bootstrap-fork').fsPath, ['--type=processTests'], opts);\n}\n\nsuite('Processes', () => {\n\ttest('buffered sending - simple data', function (done: () => void) {\n\t\tif (process.env['VSCODE_PID']) {\n\t\t\treturn done(); // this test fails when run from within VS Code\n\t\t}\n\n\t\tconst child = fork('vs/base/test/node/processes/fixtures/fork');\n\t\tconst sender = processes.createQueuedSender(child);\n\n\t\tlet counter = 0;\n\n\t\tconst msg1 = 'Hello One';\n\t\tconst msg2 = 'Hello Two';\n\t\tconst msg3 = 'Hello Three';\n\n\t\tchild.on('message', msgFromChild => {\n\t\t\tif (msgFromChild === 'ready') {\n\t\t\t\tsender.send(msg1);\n\t\t\t\tsender.send(msg2);\n\t\t\t\tsender.send(msg3);\n\t\t\t} else {\n\t\t\t\tcounter++;\n\n\t\t\t\tif (counter === 1) {\n\t\t\t\t\tassert.strictEqual(msgFromChild, msg1);\n\t\t\t\t} else if (counter === 2) {\n\t\t\t\t\tassert.strictEqual(msgFromChild, msg2);\n\t\t\t\t} else if (counter === 3) {\n\t\t\t\t\tassert.strictEqual(msgFromChild, msg3);\n\n\t\t\t\t\tchild.kill();\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\t(!platform.isWindows || process.env['VSCODE_PID'] ? test.skip : test)('buffered sending - lots of data (potential deadlock on win32)', function (done: () => void) { // test is only relevant for Windows and seems to crash randomly on some Linux builds\n\t\tconst child = fork('vs/base/test/node/processes/fixtures/fork_large');\n\t\tconst sender = processes.createQueuedSender(child);\n\n\t\tconst largeObj = Object.create(null);\n\t\tfor (let i = 0; i < 10000; i++) {\n\t\t\tlargeObj[i] = 'some data';\n\t\t}\n\n\t\tconst msg = JSON.stringify(largeObj);\n\t\tchild.on('message', msgFromChild => {\n\t\t\tif (msgFromChild === 'ready') {\n\t\t\t\tsender.send(msg);\n\t\t\t\tsender.send(msg);\n\t\t\t\tsender.send(msg);\n\t\t\t} else if (msgFromChild === 'done') {\n\t\t\t\tchild.kill();\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,YAAY,QAAQ;AACpB,SAAS,kBAAkB;AAC3B,YAAY,aAAa;AACzB,YAAY,cAAc;AAC1B,YAAY,eAAe;AAE3B,SAAS,KAAK,IAA6B;AAC1C,QAAM,OAAY;AAAA,IACjB,KAAK,QAAQ,MAAM,QAAQ,UAAU,QAAQ,GAAG,GAAG;AAAA,MAClD,uBAAuB;AAAA,MACvB,qBAAqB;AAAA,MACrB,wBAAwB;AAAA,IACzB,CAAC;AAAA,EACF;AAEA,SAAO,GAAG,KAAK,WAAW,UAAU,gBAAgB,EAAE,QAAQ,CAAC,qBAAqB,GAAG,IAAI;AAC5F;AAVS;AAYT,MAAM,aAAa,MAAM;AACxB,OAAK,kCAAkC,SAAU,MAAkB;AAClE,QAAI,QAAQ,IAAI,YAAY,GAAG;AAC9B,aAAO,KAAK;AAAA,IACb;AAEA,UAAM,QAAQ,KAAK,2CAA2C;AAC9D,UAAM,SAAS,UAAU,mBAAmB,KAAK;AAEjD,QAAI,UAAU;AAEd,UAAM,OAAO;AACb,UAAM,OAAO;AACb,UAAM,OAAO;AAEb,UAAM,GAAG,WAAW,kBAAgB;AACnC,UAAI,iBAAiB,SAAS;AAC7B,eAAO,KAAK,IAAI;AAChB,eAAO,KAAK,IAAI;AAChB,eAAO,KAAK,IAAI;AAAA,MACjB,OAAO;AACN;AAEA,YAAI,YAAY,GAAG;AAClB,iBAAO,YAAY,cAAc,IAAI;AAAA,QACtC,WAAW,YAAY,GAAG;AACzB,iBAAO,YAAY,cAAc,IAAI;AAAA,QACtC,WAAW,YAAY,GAAG;AACzB,iBAAO,YAAY,cAAc,IAAI;AAErC,gBAAM,KAAK;AACX,eAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,GAAC,CAAC,SAAS,aAAa,QAAQ,IAAI,YAAY,IAAI,KAAK,OAAO,MAAM,iEAAiE,SAAU,MAAkB;AAClK,UAAM,QAAQ,KAAK,iDAAiD;AACpE,UAAM,SAAS,UAAU,mBAAmB,KAAK;AAEjD,UAAM,WAAW,uBAAO,OAAO,IAAI;AACnC,aAAS,IAAI,GAAG,IAAI,KAAO,KAAK;AAC/B,eAAS,CAAC,IAAI;AAAA,IACf;AAEA,UAAM,MAAM,KAAK,UAAU,QAAQ;AACnC,UAAM,GAAG,WAAW,kBAAgB;AACnC,UAAI,iBAAiB,SAAS;AAC7B,eAAO,KAAK,GAAG;AACf,eAAO,KAAK,GAAG;AACf,eAAO,KAAK,GAAG;AAAA,MAChB,WAAW,iBAAiB,QAAQ;AACnC,cAAM,KAAK;AACX,aAAK;AAAA,MACN;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
