import c from"assert";import*as p from"child_process";import{FileAccess as u}from"../../../common/network.js";import*as f from"../../../common/objects.js";import*as m from"../../../common/platform.js";import*as l from"../../../node/processes.js";function d(r){const e={env:f.mixin(f.deepClone(process.env),{VSCODE_AMD_ENTRYPOINT:r,VSCODE_PIPE_LOGGING:"true",VSCODE_VERBOSE_LOGGING:!0})};return p.fork(u.asFileUri("bootstrap-fork").fsPath,["--type=processTests"],e)}suite("Processes",()=>{test("buffered sending - simple data",function(r){if(process.env.VSCODE_PID)return r();const e=d("vs/base/test/node/processes/fixtures/fork"),t=l.createQueuedSender(e);let o=0;const n="Hello One",s="Hello Two",a="Hello Three";e.on("message",i=>{i==="ready"?(t.send(n),t.send(s),t.send(a)):(o++,o===1?c.strictEqual(i,n):o===2?c.strictEqual(i,s):o===3&&(c.strictEqual(i,a),e.kill(),r()))})}),(!m.isWindows||process.env.VSCODE_PID?test.skip:test)("buffered sending - lots of data (potential deadlock on win32)",function(r){const e=d("vs/base/test/node/processes/fixtures/fork_large"),t=l.createQueuedSender(e),o=Object.create(null);for(let s=0;s<1e4;s++)o[s]="some data";const n=JSON.stringify(o);e.on("message",s=>{s==="ready"?(t.send(n),t.send(n),t.send(n)):s==="done"&&(e.kill(),r())})})});
