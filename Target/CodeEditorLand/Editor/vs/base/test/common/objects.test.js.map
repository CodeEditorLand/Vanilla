{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/objects.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport * as objects from '../../common/objects.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nconst check = (one: any, other: any, msg: string) => {\n\tassert(objects.equals(one, other), msg);\n\tassert(objects.equals(other, one), '[reverse] ' + msg);\n};\n\nconst checkNot = (one: any, other: any, msg: string) => {\n\tassert(!objects.equals(one, other), msg);\n\tassert(!objects.equals(other, one), '[reverse] ' + msg);\n};\n\nsuite('Objects', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('equals', () => {\n\t\tcheck(null, null, 'null');\n\t\tcheck(undefined, undefined, 'undefined');\n\t\tcheck(1234, 1234, 'numbers');\n\t\tcheck('', '', 'empty strings');\n\t\tcheck('1234', '1234', 'strings');\n\t\tcheck([], [], 'empty arrays');\n\t\t// check(['', 123], ['', 123], 'arrays');\n\t\tcheck([[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]], 'nested arrays');\n\t\tcheck({}, {}, 'empty objects');\n\t\tcheck({ a: 1, b: '123' }, { a: 1, b: '123' }, 'objects');\n\t\tcheck({ a: 1, b: '123' }, { b: '123', a: 1 }, 'objects (key order)');\n\t\tcheck({ a: { b: 1, c: 2 }, b: 3 }, { a: { b: 1, c: 2 }, b: 3 }, 'nested objects');\n\n\t\tcheckNot(null, undefined, 'null != undefined');\n\t\tcheckNot(null, '', 'null != empty string');\n\t\tcheckNot(null, [], 'null != empty array');\n\t\tcheckNot(null, {}, 'null != empty object');\n\t\tcheckNot(null, 0, 'null != zero');\n\t\tcheckNot(undefined, '', 'undefined != empty string');\n\t\tcheckNot(undefined, [], 'undefined != empty array');\n\t\tcheckNot(undefined, {}, 'undefined != empty object');\n\t\tcheckNot(undefined, 0, 'undefined != zero');\n\t\tcheckNot('', [], 'empty string != empty array');\n\t\tcheckNot('', {}, 'empty string != empty object');\n\t\tcheckNot('', 0, 'empty string != zero');\n\t\tcheckNot([], {}, 'empty array != empty object');\n\t\tcheckNot([], 0, 'empty array != zero');\n\t\tcheckNot(0, [], 'zero != empty array');\n\n\t\tcheckNot('1234', 1234, 'string !== number');\n\n\t\tcheckNot([[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6000]], 'arrays');\n\t\tcheckNot({ a: { b: 1, c: 2 }, b: 3 }, { b: 3, a: { b: 9, c: 2 } }, 'objects');\n\t});\n\n\ttest('mixin - array', function () {\n\n\t\tconst foo: any = {};\n\t\tobjects.mixin(foo, { bar: [1, 2, 3] });\n\n\t\tassert(foo.bar);\n\t\tassert(Array.isArray(foo.bar));\n\t\tassert.strictEqual(foo.bar.length, 3);\n\t\tassert.strictEqual(foo.bar[0], 1);\n\t\tassert.strictEqual(foo.bar[1], 2);\n\t\tassert.strictEqual(foo.bar[2], 3);\n\t});\n\n\ttest('mixin - no overwrite', function () {\n\t\tconst foo: any = {\n\t\t\tbar: '123'\n\t\t};\n\n\t\tconst bar: any = {\n\t\t\tbar: '456'\n\t\t};\n\n\t\tobjects.mixin(foo, bar, false);\n\n\t\tassert.strictEqual(foo.bar, '123');\n\t});\n\n\ttest('cloneAndChange', () => {\n\t\tconst o1 = { something: 'hello' };\n\t\tconst o = {\n\t\t\to1: o1,\n\t\t\to2: o1\n\t\t};\n\t\tassert.deepStrictEqual(objects.cloneAndChange(o, () => { }), o);\n\t});\n\n\ttest('safeStringify', () => {\n\t\tconst obj1: any = {\n\t\t\tfriend: null\n\t\t};\n\n\t\tconst obj2: any = {\n\t\t\tfriend: null\n\t\t};\n\n\t\tobj1.friend = obj2;\n\t\tobj2.friend = obj1;\n\n\t\tconst arr: any = [1];\n\t\tarr.push(arr);\n\n\t\tconst circular: any = {\n\t\t\ta: 42,\n\t\t\tb: null,\n\t\t\tc: [\n\t\t\t\tobj1, obj2\n\t\t\t],\n\t\t\td: null,\n\t\t\te: BigInt(42)\n\t\t};\n\n\t\tarr.push(circular);\n\n\n\t\tcircular.b = circular;\n\t\tcircular.d = arr;\n\n\t\tconst result = objects.safeStringify(circular);\n\n\t\tassert.deepStrictEqual(JSON.parse(result), {\n\t\t\ta: 42,\n\t\t\tb: '[Circular]',\n\t\t\tc: [\n\t\t\t\t{\n\t\t\t\t\tfriend: {\n\t\t\t\t\t\tfriend: '[Circular]'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'[Circular]'\n\t\t\t],\n\t\t\td: [1, '[Circular]', '[Circular]'],\n\t\t\te: '[BigInt 42]'\n\t\t});\n\t});\n\n\ttest('distinct', () => {\n\t\tconst base = {\n\t\t\tone: 'one',\n\t\t\ttwo: 2,\n\t\t\tthree: {\n\t\t\t\t3: true\n\t\t\t},\n\t\t\tfour: false\n\t\t};\n\n\t\tlet diff = objects.distinct(base, base);\n\t\tassert.strictEqual(Object.keys(diff).length, 0);\n\n\t\tlet obj = {};\n\n\t\tdiff = objects.distinct(base, obj);\n\t\tassert.strictEqual(Object.keys(diff).length, 0);\n\n\t\tobj = {\n\t\t\tone: 'one',\n\t\t\ttwo: 2\n\t\t};\n\n\t\tdiff = objects.distinct(base, obj);\n\t\tassert.strictEqual(Object.keys(diff).length, 0);\n\n\t\tobj = {\n\t\t\tthree: {\n\t\t\t\t3: true\n\t\t\t},\n\t\t\tfour: false\n\t\t};\n\n\t\tdiff = objects.distinct(base, obj);\n\t\tassert.strictEqual(Object.keys(diff).length, 0);\n\n\t\tobj = {\n\t\t\tone: 'two',\n\t\t\ttwo: 2,\n\t\t\tthree: {\n\t\t\t\t3: true\n\t\t\t},\n\t\t\tfour: true\n\t\t};\n\n\t\tdiff = objects.distinct(base, obj);\n\t\tassert.strictEqual(Object.keys(diff).length, 2);\n\t\tassert.strictEqual(diff.one, 'two');\n\t\tassert.strictEqual(diff.four, true);\n\n\t\tobj = {\n\t\t\tone: null,\n\t\t\ttwo: 2,\n\t\t\tthree: {\n\t\t\t\t3: true\n\t\t\t},\n\t\t\tfour: undefined\n\t\t};\n\n\t\tdiff = objects.distinct(base, obj);\n\t\tassert.strictEqual(Object.keys(diff).length, 2);\n\t\tassert.strictEqual(diff.one, null);\n\t\tassert.strictEqual(diff.four, undefined);\n\n\t\tobj = {\n\t\t\tone: 'two',\n\t\t\ttwo: 3,\n\t\t\tthree: { 3: false },\n\t\t\tfour: true\n\t\t};\n\n\t\tdiff = objects.distinct(base, obj);\n\t\tassert.strictEqual(Object.keys(diff).length, 4);\n\t\tassert.strictEqual(diff.one, 'two');\n\t\tassert.strictEqual(diff.two, 3);\n\t\tassert.strictEqual(diff.three?.['3'], false);\n\t\tassert.strictEqual(diff.four, true);\n\t});\n\n\ttest('getCaseInsensitive', () => {\n\t\tconst obj1 = {\n\t\t\tlowercase: 123,\n\t\t\tmIxEdCaSe: 456\n\t\t};\n\n\t\tassert.strictEqual(obj1.lowercase, objects.getCaseInsensitive(obj1, 'lowercase'));\n\t\tassert.strictEqual(obj1.lowercase, objects.getCaseInsensitive(obj1, 'lOwErCaSe'));\n\n\t\tassert.strictEqual(obj1.mIxEdCaSe, objects.getCaseInsensitive(obj1, 'MIXEDCASE'));\n\t\tassert.strictEqual(obj1.mIxEdCaSe, objects.getCaseInsensitive(obj1, 'mixedcase'));\n\t});\n});\n\ntest('mapValues', () => {\n\tconst obj = {\n\t\ta: 1,\n\t\tb: 2,\n\t\tc: 3\n\t};\n\n\tconst result = objects.mapValues(obj, (value, key) => `${key}: ${value * 2}`);\n\n\tassert.deepStrictEqual(result, {\n\t\ta: 'a: 2',\n\t\tb: 'b: 4',\n\t\tc: 'c: 6',\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
