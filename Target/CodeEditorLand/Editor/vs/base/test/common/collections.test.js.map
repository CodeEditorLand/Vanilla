{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/collections.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as collections from '../../common/collections.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('Collections', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('groupBy', () => {\n\n\t\tconst group1 = 'a', group2 = 'b';\n\t\tconst value1 = 1, value2 = 2, value3 = 3;\n\t\tconst source = [\n\t\t\t{ key: group1, value: value1 },\n\t\t\t{ key: group1, value: value2 },\n\t\t\t{ key: group2, value: value3 },\n\t\t];\n\n\t\tconst grouped = collections.groupBy(source, x => x.key);\n\n\t\t// Group 1\n\t\tassert.strictEqual(grouped[group1].length, 2);\n\t\tassert.strictEqual(grouped[group1][0].value, value1);\n\t\tassert.strictEqual(grouped[group1][1].value, value2);\n\n\t\t// Group 2\n\t\tassert.strictEqual(grouped[group2].length, 1);\n\t\tassert.strictEqual(grouped[group2][0].value, value3);\n\t});\n\n\tsuite('SetWithKey', () => {\n\t\tlet setWithKey: collections.SetWithKey<{ someProp: string }>;\n\n\t\tconst initialValues = ['a', 'b', 'c'].map(s => ({ someProp: s }));\n\t\tsetup(() => {\n\t\t\tsetWithKey = new collections.SetWithKey<{ someProp: string }>(initialValues, value => value.someProp);\n\t\t});\n\n\t\ttest('size', () => {\n\t\t\tassert.strictEqual(setWithKey.size, 3);\n\t\t});\n\n\t\ttest('add', () => {\n\t\t\tsetWithKey.add({ someProp: 'd' });\n\t\t\tassert.strictEqual(setWithKey.size, 4);\n\t\t\tassert.strictEqual(setWithKey.has({ someProp: 'd' }), true);\n\t\t});\n\n\t\ttest('delete', () => {\n\t\t\tassert.strictEqual(setWithKey.has({ someProp: 'b' }), true);\n\t\t\tsetWithKey.delete({ someProp: 'b' });\n\t\t\tassert.strictEqual(setWithKey.size, 2);\n\t\t\tassert.strictEqual(setWithKey.has({ someProp: 'b' }), false);\n\t\t});\n\n\t\ttest('has', () => {\n\t\t\tassert.strictEqual(setWithKey.has({ someProp: 'a' }), true);\n\t\t\tassert.strictEqual(setWithKey.has({ someProp: 'b' }), true);\n\t\t});\n\n\t\ttest('entries', () => {\n\t\t\tconst entries = Array.from(setWithKey.entries());\n\t\t\tassert.deepStrictEqual(entries, initialValues.map(value => [value, value]));\n\t\t});\n\n\t\ttest('keys and values', () => {\n\t\t\tconst keys = Array.from(setWithKey.keys());\n\t\t\tconst values = Array.from(setWithKey.values());\n\t\t\tassert.deepStrictEqual(keys, initialValues);\n\t\t\tassert.deepStrictEqual(values, initialValues);\n\t\t});\n\n\t\ttest('clear', () => {\n\t\t\tsetWithKey.clear();\n\t\t\tassert.strictEqual(setWithKey.size, 0);\n\t\t});\n\n\t\ttest('forEach', () => {\n\t\t\tconst values: any[] = [];\n\t\t\tsetWithKey.forEach(value => values.push(value));\n\t\t\tassert.deepStrictEqual(values, initialValues);\n\t\t});\n\n\t\ttest('iterator', () => {\n\t\t\tconst values: any[] = [];\n\t\t\tfor (const value of setWithKey) {\n\t\t\t\tvalues.push(value);\n\t\t\t}\n\t\t\tassert.deepStrictEqual(values, initialValues);\n\t\t});\n\n\t\ttest('toStringTag', () => {\n\t\t\tassert.strictEqual(setWithKey[Symbol.toStringTag], 'SetWithKey');\n\t\t});\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,YAAY,iBAAiB;AAC7B,SAAS,+CAA+C;AAExD,MAAM,eAAe,MAAM;AAE1B,0CAAwC;AAExC,OAAK,WAAW,MAAM;AAErB,UAAM,SAAS,KAAK,SAAS;AAC7B,UAAM,SAAS,GAAG,SAAS,GAAG,SAAS;AACvC,UAAM,SAAS;AAAA,MACd,EAAE,KAAK,QAAQ,OAAO,OAAO;AAAA,MAC7B,EAAE,KAAK,QAAQ,OAAO,OAAO;AAAA,MAC7B,EAAE,KAAK,QAAQ,OAAO,OAAO;AAAA,IAC9B;AAEA,UAAM,UAAU,YAAY,QAAQ,QAAQ,OAAK,EAAE,GAAG;AAGtD,WAAO,YAAY,QAAQ,MAAM,EAAE,QAAQ,CAAC;AAC5C,WAAO,YAAY,QAAQ,MAAM,EAAE,CAAC,EAAE,OAAO,MAAM;AACnD,WAAO,YAAY,QAAQ,MAAM,EAAE,CAAC,EAAE,OAAO,MAAM;AAGnD,WAAO,YAAY,QAAQ,MAAM,EAAE,QAAQ,CAAC;AAC5C,WAAO,YAAY,QAAQ,MAAM,EAAE,CAAC,EAAE,OAAO,MAAM;AAAA,EACpD,CAAC;AAED,QAAM,cAAc,MAAM;AACzB,QAAI;AAEJ,UAAM,gBAAgB,CAAC,KAAK,KAAK,GAAG,EAAE,IAAI,QAAM,EAAE,UAAU,EAAE,EAAE;AAChE,UAAM,MAAM;AACX,mBAAa,IAAI,YAAY,WAAiC,eAAe,WAAS,MAAM,QAAQ;AAAA,IACrG,CAAC;AAED,SAAK,QAAQ,MAAM;AAClB,aAAO,YAAY,WAAW,MAAM,CAAC;AAAA,IACtC,CAAC;AAED,SAAK,OAAO,MAAM;AACjB,iBAAW,IAAI,EAAE,UAAU,IAAI,CAAC;AAChC,aAAO,YAAY,WAAW,MAAM,CAAC;AACrC,aAAO,YAAY,WAAW,IAAI,EAAE,UAAU,IAAI,CAAC,GAAG,IAAI;AAAA,IAC3D,CAAC;AAED,SAAK,UAAU,MAAM;AACpB,aAAO,YAAY,WAAW,IAAI,EAAE,UAAU,IAAI,CAAC,GAAG,IAAI;AAC1D,iBAAW,OAAO,EAAE,UAAU,IAAI,CAAC;AACnC,aAAO,YAAY,WAAW,MAAM,CAAC;AACrC,aAAO,YAAY,WAAW,IAAI,EAAE,UAAU,IAAI,CAAC,GAAG,KAAK;AAAA,IAC5D,CAAC;AAED,SAAK,OAAO,MAAM;AACjB,aAAO,YAAY,WAAW,IAAI,EAAE,UAAU,IAAI,CAAC,GAAG,IAAI;AAC1D,aAAO,YAAY,WAAW,IAAI,EAAE,UAAU,IAAI,CAAC,GAAG,IAAI;AAAA,IAC3D,CAAC;AAED,SAAK,WAAW,MAAM;AACrB,YAAM,UAAU,MAAM,KAAK,WAAW,QAAQ,CAAC;AAC/C,aAAO,gBAAgB,SAAS,cAAc,IAAI,WAAS,CAAC,OAAO,KAAK,CAAC,CAAC;AAAA,IAC3E,CAAC;AAED,SAAK,mBAAmB,MAAM;AAC7B,YAAM,OAAO,MAAM,KAAK,WAAW,KAAK,CAAC;AACzC,YAAM,SAAS,MAAM,KAAK,WAAW,OAAO,CAAC;AAC7C,aAAO,gBAAgB,MAAM,aAAa;AAC1C,aAAO,gBAAgB,QAAQ,aAAa;AAAA,IAC7C,CAAC;AAED,SAAK,SAAS,MAAM;AACnB,iBAAW,MAAM;AACjB,aAAO,YAAY,WAAW,MAAM,CAAC;AAAA,IACtC,CAAC;AAED,SAAK,WAAW,MAAM;AACrB,YAAM,SAAgB,CAAC;AACvB,iBAAW,QAAQ,WAAS,OAAO,KAAK,KAAK,CAAC;AAC9C,aAAO,gBAAgB,QAAQ,aAAa;AAAA,IAC7C,CAAC;AAED,SAAK,YAAY,MAAM;AACtB,YAAM,SAAgB,CAAC;AACvB,iBAAW,SAAS,YAAY;AAC/B,eAAO,KAAK,KAAK;AAAA,MAClB;AACA,aAAO,gBAAgB,QAAQ,aAAa;AAAA,IAC7C,CAAC;AAED,SAAK,eAAe,MAAM;AACzB,aAAO,YAAY,WAAW,OAAO,WAAW,GAAG,YAAY;AAAA,IAChE,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
