{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/async.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as async from '../../common/async.js';\nimport * as MicrotaskDelay from \"../../common/symbols.js\";\nimport { CancellationToken, CancellationTokenSource } from '../../common/cancellation.js';\nimport { isCancellationError } from '../../common/errors.js';\nimport { Event } from '../../common/event.js';\nimport { URI } from '../../common/uri.js';\nimport { runWithFakedTimers } from './timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\nimport { DisposableStore } from '../../common/lifecycle.js';\n\nsuite('Async', () => {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('cancelablePromise', function () {\n\t\ttest('set token, don\\'t wait for inner promise', function () {\n\t\t\tlet canceled = 0;\n\t\t\tconst promise = async.createCancelablePromise(token => {\n\t\t\t\tstore.add(token.onCancellationRequested(_ => { canceled += 1; }));\n\t\t\t\treturn new Promise(resolve => { /*never*/ });\n\t\t\t});\n\t\t\tconst result = promise.then(_ => assert.ok(false), err => {\n\t\t\t\tassert.strictEqual(canceled, 1);\n\t\t\t\tassert.ok(isCancellationError(err));\n\t\t\t});\n\t\t\tpromise.cancel();\n\t\t\tpromise.cancel(); // cancel only once\n\t\t\treturn result;\n\t\t});\n\n\t\ttest('cancel despite inner promise being resolved', function () {\n\t\t\tlet canceled = 0;\n\t\t\tconst promise = async.createCancelablePromise(token => {\n\t\t\t\tstore.add(token.onCancellationRequested(_ => { canceled += 1; }));\n\t\t\t\treturn Promise.resolve(1234);\n\t\t\t});\n\t\t\tconst result = promise.then(_ => assert.ok(false), err => {\n\t\t\t\tassert.strictEqual(canceled, 1);\n\t\t\t\tassert.ok(isCancellationError(err));\n\t\t\t});\n\t\t\tpromise.cancel();\n\t\t\treturn result;\n\t\t});\n\n\t\t// Cancelling a sync cancelable promise will fire the cancelled token.\n\t\t// Also, every `then` callback runs in another execution frame.\n\t\ttest('execution order (sync)', function () {\n\t\t\tconst order: string[] = [];\n\n\t\t\tconst cancellablePromise = async.createCancelablePromise(token => {\n\t\t\t\torder.push('in callback');\n\t\t\t\tstore.add(token.onCancellationRequested(_ => order.push('cancelled')));\n\t\t\t\treturn Promise.resolve(1234);\n\t\t\t});\n\n\t\t\torder.push('afterCreate');\n\n\t\t\tconst promise = cancellablePromise\n\t\t\t\t.then(undefined, err => null)\n\t\t\t\t.then(() => order.push('finally'));\n\n\t\t\tcancellablePromise.cancel();\n\t\t\torder.push('afterCancel');\n\n\t\t\treturn promise.then(() => assert.deepStrictEqual(order, ['in callback', 'afterCreate', 'cancelled', 'afterCancel', 'finally']));\n\t\t});\n\n\t\t// Cancelling an async cancelable promise is just the same as a sync cancellable promise.\n\t\ttest('execution order (async)', function () {\n\t\t\tconst order: string[] = [];\n\n\t\t\tconst cancellablePromise = async.createCancelablePromise(token => {\n\t\t\t\torder.push('in callback');\n\t\t\t\tstore.add(token.onCancellationRequested(_ => order.push('cancelled')));\n\t\t\t\treturn new Promise(c => setTimeout(c.bind(1234), 0));\n\t\t\t});\n\n\t\t\torder.push('afterCreate');\n\n\t\t\tconst promise = cancellablePromise\n\t\t\t\t.then(undefined, err => null)\n\t\t\t\t.then(() => order.push('finally'));\n\n\t\t\tcancellablePromise.cancel();\n\t\t\torder.push('afterCancel');\n\n\t\t\treturn promise.then(() => assert.deepStrictEqual(order, ['in callback', 'afterCreate', 'cancelled', 'afterCancel', 'finally']));\n\t\t});\n\n\t\ttest('execution order (async with late listener)', async function () {\n\t\t\tconst order: string[] = [];\n\n\t\t\tconst cancellablePromise = async.createCancelablePromise(async token => {\n\t\t\t\torder.push('in callback');\n\n\t\t\t\tawait async.timeout(0);\n\t\t\t\tstore.add(token.onCancellationRequested(_ => order.push('cancelled')));\n\t\t\t\tcancellablePromise.cancel();\n\t\t\t\torder.push('afterCancel');\n\t\t\t});\n\n\t\t\torder.push('afterCreate');\n\n\t\t\tconst promise = cancellablePromise\n\t\t\t\t.then(undefined, err => null)\n\t\t\t\t.then(() => order.push('finally'));\n\n\t\t\treturn promise.then(() => assert.deepStrictEqual(order, ['in callback', 'afterCreate', 'cancelled', 'afterCancel', 'finally']));\n\t\t});\n\n\t\ttest('get inner result', async function () {\n\t\t\tconst promise = async.createCancelablePromise(token => {\n\t\t\t\treturn async.timeout(12).then(_ => 1234);\n\t\t\t});\n\n\t\t\tconst result = await promise;\n\t\t\tassert.strictEqual(result, 1234);\n\t\t});\n\t});\n\n\tsuite('Throttler', function () {\n\t\ttest('non async', function () {\n\t\t\tlet count = 0;\n\t\t\tconst factory = () => {\n\t\t\t\treturn Promise.resolve(++count);\n\t\t\t};\n\n\t\t\tconst throttler = new async.Throttler();\n\n\t\t\treturn Promise.all([\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 1); }),\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 2); }),\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 2); }),\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 2); }),\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 2); })\n\t\t\t]).then(() => assert.strictEqual(count, 2));\n\t\t});\n\n\t\ttest('async', () => {\n\t\t\tlet count = 0;\n\t\t\tconst factory = () => async.timeout(0).then(() => ++count);\n\n\t\t\tconst throttler = new async.Throttler();\n\n\t\t\treturn Promise.all([\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 1); }),\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 2); }),\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 2); }),\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 2); }),\n\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 2); })\n\t\t\t]).then(() => {\n\t\t\t\treturn Promise.all([\n\t\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 3); }),\n\t\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 4); }),\n\t\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 4); }),\n\t\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 4); }),\n\t\t\t\t\tthrottler.queue(factory).then((result) => { assert.strictEqual(result, 4); })\n\t\t\t\t]);\n\t\t\t});\n\t\t});\n\n\t\ttest('last factory should be the one getting called', function () {\n\t\t\tconst factoryFactory = (n: number) => () => {\n\t\t\t\treturn async.timeout(0).then(() => n);\n\t\t\t};\n\n\t\t\tconst throttler = new async.Throttler();\n\n\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\tpromises.push(throttler.queue(factoryFactory(1)).then((n) => { assert.strictEqual(n, 1); }));\n\t\t\tpromises.push(throttler.queue(factoryFactory(2)).then((n) => { assert.strictEqual(n, 3); }));\n\t\t\tpromises.push(throttler.queue(factoryFactory(3)).then((n) => { assert.strictEqual(n, 3); }));\n\n\t\t\treturn Promise.all(promises);\n\t\t});\n\n\t\ttest('disposal after queueing', async () => {\n\t\t\tlet factoryCalls = 0;\n\t\t\tconst factory = async () => {\n\t\t\t\tfactoryCalls++;\n\t\t\t\treturn async.timeout(0);\n\t\t\t};\n\n\t\t\tconst throttler = new async.Throttler();\n\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\tpromises.push(throttler.queue(factory));\n\t\t\tpromises.push(throttler.queue(factory));\n\t\t\tthrottler.dispose();\n\n\t\t\tawait Promise.all(promises);\n\t\t\tassert.strictEqual(factoryCalls, 1);\n\t\t});\n\n\t\ttest('disposal before queueing', async () => {\n\t\t\tlet factoryCalls = 0;\n\t\t\tconst factory = async () => {\n\t\t\t\tfactoryCalls++;\n\t\t\t\treturn async.timeout(0);\n\t\t\t};\n\n\t\t\tconst throttler = new async.Throttler();\n\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\tthrottler.dispose();\n\t\t\tpromises.push(throttler.queue(factory));\n\n\t\t\ttry {\n\t\t\t\tawait Promise.all(promises);\n\t\t\t\tassert.fail('should fail');\n\t\t\t} catch (err) {\n\t\t\t\tassert.strictEqual(factoryCalls, 0);\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('Delayer', function () {\n\t\ttest('simple', () => {\n\t\t\tlet count = 0;\n\t\t\tconst factory = () => {\n\t\t\t\treturn Promise.resolve(++count);\n\t\t\t};\n\n\t\t\tconst delayer = new async.Delayer(0);\n\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then((result) => { assert.strictEqual(result, 1); assert(!delayer.isTriggered()); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then((result) => { assert.strictEqual(result, 1); assert(!delayer.isTriggered()); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then((result) => { assert.strictEqual(result, 1); assert(!delayer.isTriggered()); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\treturn Promise.all(promises).then(() => {\n\t\t\t\tassert(!delayer.isTriggered());\n\t\t\t});\n\t\t});\n\n\t\ttest('microtask delay simple', () => {\n\t\t\tlet count = 0;\n\t\t\tconst factory = () => {\n\t\t\t\treturn Promise.resolve(++count);\n\t\t\t};\n\n\t\t\tconst delayer = new async.Delayer(MicrotaskDelay.MicrotaskDelay);\n\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then((result) => { assert.strictEqual(result, 1); assert(!delayer.isTriggered()); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then((result) => { assert.strictEqual(result, 1); assert(!delayer.isTriggered()); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then((result) => { assert.strictEqual(result, 1); assert(!delayer.isTriggered()); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\treturn Promise.all(promises).then(() => {\n\t\t\t\tassert(!delayer.isTriggered());\n\t\t\t});\n\t\t});\n\n\t\tsuite('ThrottledDelayer', () => {\n\t\t\ttest('promise should resolve if disposed', async () => {\n\t\t\t\tconst throttledDelayer = new async.ThrottledDelayer<void>(100);\n\t\t\t\tconst promise = throttledDelayer.trigger(async () => { }, 0);\n\t\t\t\tthrottledDelayer.dispose();\n\n\t\t\t\ttry {\n\t\t\t\t\tawait promise;\n\t\t\t\t\tassert.fail('SHOULD NOT BE HERE');\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// OK\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttest('trigger after dispose throws', async () => {\n\t\t\t\tconst throttledDelayer = new async.ThrottledDelayer<void>(100);\n\t\t\t\tthrottledDelayer.dispose();\n\t\t\t\tawait assert.rejects(() => throttledDelayer.trigger(async () => { }, 0));\n\t\t\t});\n\t\t});\n\n\t\ttest('simple cancel', function () {\n\t\t\tlet count = 0;\n\t\t\tconst factory = () => {\n\t\t\t\treturn Promise.resolve(++count);\n\t\t\t};\n\n\t\t\tconst delayer = new async.Delayer(0);\n\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\tconst p = delayer.trigger(factory).then(() => {\n\t\t\t\tassert(false);\n\t\t\t}, () => {\n\t\t\t\tassert(true, 'yes, it was cancelled');\n\t\t\t});\n\n\t\t\tassert(delayer.isTriggered());\n\t\t\tdelayer.cancel();\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\treturn p;\n\t\t});\n\n\t\ttest('simple cancel microtask', function () {\n\t\t\tlet count = 0;\n\t\t\tconst factory = () => {\n\t\t\t\treturn Promise.resolve(++count);\n\t\t\t};\n\n\t\t\tconst delayer = new async.Delayer(MicrotaskDelay.MicrotaskDelay);\n\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\tconst p = delayer.trigger(factory).then(() => {\n\t\t\t\tassert(false);\n\t\t\t}, () => {\n\t\t\t\tassert(true, 'yes, it was cancelled');\n\t\t\t});\n\n\t\t\tassert(delayer.isTriggered());\n\t\t\tdelayer.cancel();\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\treturn p;\n\t\t});\n\n\t\ttest('cancel should cancel all calls to trigger', function () {\n\t\t\tlet count = 0;\n\t\t\tconst factory = () => {\n\t\t\t\treturn Promise.resolve(++count);\n\t\t\t};\n\n\t\t\tconst delayer = new async.Delayer(0);\n\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then(undefined, () => { assert(true, 'yes, it was cancelled'); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then(undefined, () => { assert(true, 'yes, it was cancelled'); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factory).then(undefined, () => { assert(true, 'yes, it was cancelled'); }));\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\tdelayer.cancel();\n\n\t\t\treturn Promise.all(promises).then(() => {\n\t\t\t\tassert(!delayer.isTriggered());\n\t\t\t});\n\t\t});\n\n\t\ttest('trigger, cancel, then trigger again', function () {\n\t\t\tlet count = 0;\n\t\t\tconst factory = () => {\n\t\t\t\treturn Promise.resolve(++count);\n\t\t\t};\n\n\t\t\tconst delayer = new async.Delayer(0);\n\t\t\tlet promises: Promise<any>[] = [];\n\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\tconst p = delayer.trigger(factory).then((result) => {\n\t\t\t\tassert.strictEqual(result, 1);\n\t\t\t\tassert(!delayer.isTriggered());\n\n\t\t\t\tpromises.push(delayer.trigger(factory).then(undefined, () => { assert(true, 'yes, it was cancelled'); }));\n\t\t\t\tassert(delayer.isTriggered());\n\n\t\t\t\tpromises.push(delayer.trigger(factory).then(undefined, () => { assert(true, 'yes, it was cancelled'); }));\n\t\t\t\tassert(delayer.isTriggered());\n\n\t\t\t\tdelayer.cancel();\n\n\t\t\t\tconst p = Promise.all(promises).then(() => {\n\t\t\t\t\tpromises = [];\n\n\t\t\t\t\tassert(!delayer.isTriggered());\n\n\t\t\t\t\tpromises.push(delayer.trigger(factory).then(() => { assert.strictEqual(result, 1); assert(!delayer.isTriggered()); }));\n\t\t\t\t\tassert(delayer.isTriggered());\n\n\t\t\t\t\tpromises.push(delayer.trigger(factory).then(() => { assert.strictEqual(result, 1); assert(!delayer.isTriggered()); }));\n\t\t\t\t\tassert(delayer.isTriggered());\n\n\t\t\t\t\tconst p = Promise.all(promises).then(() => {\n\t\t\t\t\t\tassert(!delayer.isTriggered());\n\t\t\t\t\t});\n\n\t\t\t\t\tassert(delayer.isTriggered());\n\n\t\t\t\t\treturn p;\n\t\t\t\t});\n\n\t\t\t\treturn p;\n\t\t\t});\n\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\treturn p;\n\t\t});\n\n\t\ttest('last task should be the one getting called', function () {\n\t\t\tconst factoryFactory = (n: number) => () => {\n\t\t\t\treturn Promise.resolve(n);\n\t\t\t};\n\n\t\t\tconst delayer = new async.Delayer(0);\n\t\t\tconst promises: Promise<any>[] = [];\n\n\t\t\tassert(!delayer.isTriggered());\n\n\t\t\tpromises.push(delayer.trigger(factoryFactory(1)).then((n) => { assert.strictEqual(n, 3); }));\n\t\t\tpromises.push(delayer.trigger(factoryFactory(2)).then((n) => { assert.strictEqual(n, 3); }));\n\t\t\tpromises.push(delayer.trigger(factoryFactory(3)).then((n) => { assert.strictEqual(n, 3); }));\n\n\t\t\tconst p = Promise.all(promises).then(() => {\n\t\t\t\tassert(!delayer.isTriggered());\n\t\t\t});\n\n\t\t\tassert(delayer.isTriggered());\n\n\t\t\treturn p;\n\t\t});\n\t});\n\n\tsuite('sequence', () => {\n\t\ttest('simple', () => {\n\t\t\tconst factoryFactory = (n: number) => () => {\n\t\t\t\treturn Promise.resolve(n);\n\t\t\t};\n\n\t\t\treturn async.sequence([\n\t\t\t\tfactoryFactory(1),\n\t\t\t\tfactoryFactory(2),\n\t\t\t\tfactoryFactory(3),\n\t\t\t\tfactoryFactory(4),\n\t\t\t\tfactoryFactory(5),\n\t\t\t]).then((result) => {\n\t\t\t\tassert.strictEqual(5, result.length);\n\t\t\t\tassert.strictEqual(1, result[0]);\n\t\t\t\tassert.strictEqual(2, result[1]);\n\t\t\t\tassert.strictEqual(3, result[2]);\n\t\t\t\tassert.strictEqual(4, result[3]);\n\t\t\t\tassert.strictEqual(5, result[4]);\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('Limiter', () => {\n\t\ttest('assert degree of paralellism', function () {\n\t\t\tlet activePromises = 0;\n\t\t\tconst factoryFactory = (n: number) => () => {\n\t\t\t\tactivePromises++;\n\t\t\t\tassert(activePromises < 6);\n\t\t\t\treturn async.timeout(0).then(() => { activePromises--; return n; });\n\t\t\t};\n\n\t\t\tconst limiter = new async.Limiter(5);\n\n\t\t\tconst promises: Promise<any>[] = [];\n\t\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(n => promises.push(limiter.queue(factoryFactory(n))));\n\n\t\t\treturn Promise.all(promises).then((res) => {\n\t\t\t\tassert.strictEqual(10, res.length);\n\t\t\t\tassert.deepStrictEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], res);\n\t\t\t});\n\t\t});\n\t});\n\n\n\tsuite('Queue', () => {\n\t\ttest('simple', function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tlet syncPromise = false;\n\t\t\tconst f1 = () => Promise.resolve(true).then(() => syncPromise = true);\n\n\t\t\tlet asyncPromise = false;\n\t\t\tconst f2 = () => async.timeout(10).then(() => asyncPromise = true);\n\n\t\t\tassert.strictEqual(queue.size, 0);\n\n\t\t\tqueue.queue(f1);\n\t\t\tassert.strictEqual(queue.size, 1);\n\n\t\t\tconst p = queue.queue(f2);\n\t\t\tassert.strictEqual(queue.size, 2);\n\t\t\treturn p.then(() => {\n\t\t\t\tassert.strictEqual(queue.size, 0);\n\t\t\t\tassert.ok(syncPromise);\n\t\t\t\tassert.ok(asyncPromise);\n\t\t\t});\n\t\t});\n\n\t\ttest('stop processing on dispose', async function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tlet workCounter = 0;\n\t\t\tconst task = async () => {\n\t\t\t\tawait async.timeout(0);\n\t\t\t\tworkCounter++;\n\t\t\t\tqueue.dispose(); // DISPOSE HERE\n\t\t\t};\n\n\t\t\tconst p1 = queue.queue(task);\n\t\t\tqueue.queue(task);\n\t\t\tqueue.queue(task);\n\t\t\tassert.strictEqual(queue.size, 3);\n\n\n\t\t\tawait p1;\n\n\t\t\tassert.strictEqual(workCounter, 1);\n\t\t});\n\n\t\ttest('stop on clear', async function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tlet workCounter = 0;\n\t\t\tconst task = async () => {\n\t\t\t\tawait async.timeout(0);\n\t\t\t\tworkCounter++;\n\t\t\t\tqueue.clear(); // CLEAR HERE\n\t\t\t\tassert.strictEqual(queue.size, 1); // THIS task is still running\n\t\t\t};\n\n\t\t\tconst p1 = queue.queue(task);\n\t\t\tqueue.queue(task);\n\t\t\tqueue.queue(task);\n\t\t\tassert.strictEqual(queue.size, 3);\n\n\t\t\tawait p1;\n\t\t\tassert.strictEqual(workCounter, 1);\n\t\t\tassert.strictEqual(queue.size, 0); // has been cleared\n\n\n\t\t\tconst p2 = queue.queue(task);\n\t\t\tawait p2;\n\t\t\tassert.strictEqual(workCounter, 2);\n\t\t});\n\n\t\ttest('clear and drain (1)', async function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tlet workCounter = 0;\n\t\t\tconst task = async () => {\n\t\t\t\tawait async.timeout(0);\n\t\t\t\tworkCounter++;\n\t\t\t\tqueue.clear(); // CLEAR HERE\n\t\t\t};\n\n\t\t\tconst p0 = Event.toPromise(queue.onDrained);\n\t\t\tconst p1 = queue.queue(task);\n\n\t\t\tawait p1;\n\t\t\tawait p0; // expect drain to fire because a task was running\n\t\t\tassert.strictEqual(workCounter, 1);\n\t\t\tqueue.dispose();\n\t\t});\n\n\t\ttest('clear and drain (2)', async function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tlet didFire = false;\n\t\t\tconst d = queue.onDrained(() => {\n\t\t\t\tdidFire = true;\n\t\t\t});\n\n\t\t\tqueue.clear();\n\n\t\t\tassert.strictEqual(didFire, false); // no work, no drain!\n\t\t\td.dispose();\n\t\t\tqueue.dispose();\n\t\t});\n\n\t\ttest('drain timing', async function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tconst logicClock = new class {\n\t\t\t\tprivate time = 0;\n\t\t\t\ttick() {\n\t\t\t\t\treturn this.time++;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlet didDrainTime = 0;\n\t\t\tlet didFinishTime1 = 0;\n\t\t\tlet didFinishTime2 = 0;\n\t\t\tconst d = queue.onDrained(() => {\n\t\t\t\tdidDrainTime = logicClock.tick();\n\t\t\t});\n\n\t\t\tconst p1 = queue.queue(() => {\n\t\t\t\t// await async.timeout(10);\n\t\t\t\tdidFinishTime1 = logicClock.tick();\n\t\t\t\treturn Promise.resolve();\n\t\t\t});\n\n\t\t\tconst p2 = queue.queue(async () => {\n\t\t\t\tawait async.timeout(10);\n\t\t\t\tdidFinishTime2 = logicClock.tick();\n\t\t\t});\n\n\n\t\t\tawait Promise.all([p1, p2]);\n\n\t\t\tassert.strictEqual(didFinishTime1, 0);\n\t\t\tassert.strictEqual(didFinishTime2, 1);\n\t\t\tassert.strictEqual(didDrainTime, 2);\n\n\t\t\td.dispose();\n\t\t\tqueue.dispose();\n\t\t});\n\n\t\ttest('drain event is send only once', async function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tlet drainCount = 0;\n\t\t\tconst d = queue.onDrained(() => { drainCount++; });\n\t\t\tqueue.queue(async () => { });\n\t\t\tqueue.queue(async () => { });\n\t\t\tqueue.queue(async () => { });\n\t\t\tqueue.queue(async () => { });\n\t\t\tassert.strictEqual(drainCount, 0);\n\t\t\tassert.strictEqual(queue.size, 4);\n\n\t\t\tawait queue.whenIdle();\n\n\t\t\tassert.strictEqual(drainCount, 1);\n\n\t\t\td.dispose();\n\t\t\tqueue.dispose();\n\t\t});\n\n\t\ttest('order is kept', function () {\n\t\t\treturn runWithFakedTimers({}, () => {\n\t\t\t\tconst queue = new async.Queue();\n\n\t\t\t\tconst res: number[] = [];\n\n\t\t\t\tconst f1 = () => Promise.resolve(true).then(() => res.push(1));\n\t\t\t\tconst f2 = () => async.timeout(10).then(() => res.push(2));\n\t\t\t\tconst f3 = () => Promise.resolve(true).then(() => res.push(3));\n\t\t\t\tconst f4 = () => async.timeout(20).then(() => res.push(4));\n\t\t\t\tconst f5 = () => async.timeout(0).then(() => res.push(5));\n\n\t\t\t\tqueue.queue(f1);\n\t\t\t\tqueue.queue(f2);\n\t\t\t\tqueue.queue(f3);\n\t\t\t\tqueue.queue(f4);\n\t\t\t\treturn queue.queue(f5).then(() => {\n\t\t\t\t\tassert.strictEqual(res[0], 1);\n\t\t\t\t\tassert.strictEqual(res[1], 2);\n\t\t\t\t\tassert.strictEqual(res[2], 3);\n\t\t\t\t\tassert.strictEqual(res[3], 4);\n\t\t\t\t\tassert.strictEqual(res[4], 5);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\ttest('errors bubble individually but not cause stop', function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tconst res: number[] = [];\n\t\t\tlet error = false;\n\n\t\t\tconst f1 = () => Promise.resolve(true).then(() => res.push(1));\n\t\t\tconst f2 = () => async.timeout(10).then(() => res.push(2));\n\t\t\tconst f3 = () => Promise.resolve(true).then(() => Promise.reject(new Error('error')));\n\t\t\tconst f4 = () => async.timeout(20).then(() => res.push(4));\n\t\t\tconst f5 = () => async.timeout(0).then(() => res.push(5));\n\n\t\t\tqueue.queue(f1);\n\t\t\tqueue.queue(f2);\n\t\t\tqueue.queue(f3).then(undefined, () => error = true);\n\t\t\tqueue.queue(f4);\n\t\t\treturn queue.queue(f5).then(() => {\n\t\t\t\tassert.strictEqual(res[0], 1);\n\t\t\t\tassert.strictEqual(res[1], 2);\n\t\t\t\tassert.ok(error);\n\t\t\t\tassert.strictEqual(res[2], 4);\n\t\t\t\tassert.strictEqual(res[3], 5);\n\t\t\t});\n\t\t});\n\n\t\ttest('order is kept (chained)', function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tconst res: number[] = [];\n\n\t\t\tconst f1 = () => Promise.resolve(true).then(() => res.push(1));\n\t\t\tconst f2 = () => async.timeout(10).then(() => res.push(2));\n\t\t\tconst f3 = () => Promise.resolve(true).then(() => res.push(3));\n\t\t\tconst f4 = () => async.timeout(20).then(() => res.push(4));\n\t\t\tconst f5 = () => async.timeout(0).then(() => res.push(5));\n\n\t\t\treturn queue.queue(f1).then(() => {\n\t\t\t\treturn queue.queue(f2).then(() => {\n\t\t\t\t\treturn queue.queue(f3).then(() => {\n\t\t\t\t\t\treturn queue.queue(f4).then(() => {\n\t\t\t\t\t\t\treturn queue.queue(f5).then(() => {\n\t\t\t\t\t\t\t\tassert.strictEqual(res[0], 1);\n\t\t\t\t\t\t\t\tassert.strictEqual(res[1], 2);\n\t\t\t\t\t\t\t\tassert.strictEqual(res[2], 3);\n\t\t\t\t\t\t\t\tassert.strictEqual(res[3], 4);\n\t\t\t\t\t\t\t\tassert.strictEqual(res[4], 5);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\ttest('events', async function () {\n\t\t\tconst queue = new async.Queue();\n\n\t\t\tlet drained = false;\n\t\t\tconst onDrained = Event.toPromise(queue.onDrained).then(() => drained = true);\n\n\t\t\tconst res: number[] = [];\n\n\t\t\tconst f1 = () => async.timeout(10).then(() => res.push(2));\n\t\t\tconst f2 = () => async.timeout(20).then(() => res.push(4));\n\t\t\tconst f3 = () => async.timeout(0).then(() => res.push(5));\n\n\t\t\tconst q1 = queue.queue(f1);\n\t\t\tconst q2 = queue.queue(f2);\n\t\t\tqueue.queue(f3);\n\n\t\t\tq1.then(() => {\n\t\t\t\tassert.ok(!drained);\n\t\t\t\tq2.then(() => {\n\t\t\t\t\tassert.ok(!drained);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait onDrained;\n\t\t\tassert.ok(drained);\n\t\t});\n\t});\n\n\tsuite('ResourceQueue', () => {\n\t\ttest('simple', async function () {\n\t\t\tconst queue = new async.ResourceQueue();\n\n\t\t\tawait queue.whenDrained(); // returns immediately since empty\n\n\t\t\tlet done1 = false;\n\t\t\tqueue.queueFor(URI.file('/some/path'), async () => { done1 = true; });\n\t\t\tawait queue.whenDrained(); // returns immediately since no work scheduled\n\t\t\tassert.strictEqual(done1, true);\n\n\t\t\tlet done2 = false;\n\t\t\tqueue.queueFor(URI.file('/some/other/path'), async () => { done2 = true; });\n\t\t\tawait queue.whenDrained(); // returns immediately since no work scheduled\n\t\t\tassert.strictEqual(done2, true);\n\n\t\t\t// schedule some work\n\t\t\tconst w1 = new async.DeferredPromise<void>();\n\t\t\tqueue.queueFor(URI.file('/some/path'), () => w1.p);\n\n\t\t\tlet drained = false;\n\t\t\tqueue.whenDrained().then(() => drained = true);\n\t\t\tassert.strictEqual(drained, false);\n\t\t\tawait w1.complete();\n\t\t\tawait async.timeout(0);\n\t\t\tassert.strictEqual(drained, true);\n\n\t\t\t// schedule some work\n\t\t\tconst w2 = new async.DeferredPromise<void>();\n\t\t\tconst w3 = new async.DeferredPromise<void>();\n\t\t\tqueue.queueFor(URI.file('/some/path'), () => w2.p);\n\t\t\tqueue.queueFor(URI.file('/some/other/path'), () => w3.p);\n\n\t\t\tdrained = false;\n\t\t\tqueue.whenDrained().then(() => drained = true);\n\n\t\t\tqueue.dispose();\n\t\t\tawait async.timeout(0);\n\t\t\tassert.strictEqual(drained, true);\n\t\t});\n\t});\n\n\tsuite('retry', () => {\n\t\ttest('success case', async () => {\n\t\t\treturn runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\t\tlet counter = 0;\n\n\t\t\t\tconst res = await async.retry(() => {\n\t\t\t\t\tcounter++;\n\t\t\t\t\tif (counter < 2) {\n\t\t\t\t\t\treturn Promise.reject(new Error('fail'));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.resolve(true);\n\t\t\t\t}, 10, 3);\n\n\t\t\t\tassert.strictEqual(res, true);\n\t\t\t});\n\t\t});\n\n\t\ttest('error case', async () => {\n\t\t\treturn runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\t\tconst expectedError = new Error('fail');\n\t\t\t\ttry {\n\t\t\t\t\tawait async.retry(() => {\n\t\t\t\t\t\treturn Promise.reject(expectedError);\n\t\t\t\t\t}, 10, 3);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tassert.strictEqual(error, error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('TaskSequentializer', () => {\n\t\ttest('execution basics', async function () {\n\t\t\tconst sequentializer = new async.TaskSequentializer();\n\n\t\t\tassert.ok(!sequentializer.isRunning());\n\t\t\tassert.ok(!sequentializer.hasQueued());\n\t\t\tassert.ok(!sequentializer.isRunning(2323));\n\t\t\tassert.ok(!sequentializer.running);\n\n\t\t\t// pending removes itself after done\n\t\t\tawait sequentializer.run(1, Promise.resolve());\n\t\t\tassert.ok(!sequentializer.isRunning());\n\t\t\tassert.ok(!sequentializer.isRunning(1));\n\t\t\tassert.ok(!sequentializer.running);\n\t\t\tassert.ok(!sequentializer.hasQueued());\n\n\t\t\t// pending removes itself after done (use async.timeout)\n\t\t\tsequentializer.run(2, async.timeout(1));\n\t\t\tassert.ok(sequentializer.isRunning());\n\t\t\tassert.ok(sequentializer.isRunning(2));\n\t\t\tassert.ok(!sequentializer.hasQueued());\n\t\t\tassert.strictEqual(sequentializer.isRunning(1), false);\n\t\t\tassert.ok(sequentializer.running);\n\n\t\t\tawait async.timeout(2);\n\t\t\tassert.strictEqual(sequentializer.isRunning(), false);\n\t\t\tassert.strictEqual(sequentializer.isRunning(2), false);\n\t\t\tassert.ok(!sequentializer.running);\n\t\t});\n\n\t\ttest('executing and queued (finishes instantly)', async function () {\n\t\t\tconst sequentializer = new async.TaskSequentializer();\n\n\t\t\tlet pendingDone = false;\n\t\t\tsequentializer.run(1, async.timeout(1).then(() => { pendingDone = true; return; }));\n\n\t\t\t// queued finishes instantly\n\t\t\tlet queuedDone = false;\n\t\t\tconst res = sequentializer.queue(() => Promise.resolve(null).then(() => { queuedDone = true; return; }));\n\n\t\t\tassert.ok(sequentializer.hasQueued());\n\n\t\t\tawait res;\n\t\t\tassert.ok(pendingDone);\n\t\t\tassert.ok(queuedDone);\n\t\t\tassert.ok(!sequentializer.hasQueued());\n\t\t});\n\n\t\ttest('executing and queued (finishes after timeout)', async function () {\n\t\t\tconst sequentializer = new async.TaskSequentializer();\n\n\t\t\tlet pendingDone = false;\n\t\t\tsequentializer.run(1, async.timeout(1).then(() => { pendingDone = true; return; }));\n\n\t\t\t// queued finishes after async.timeout\n\t\t\tlet queuedDone = false;\n\t\t\tconst res = sequentializer.queue(() => async.timeout(1).then(() => { queuedDone = true; return; }));\n\n\t\t\tawait res;\n\t\t\tassert.ok(pendingDone);\n\t\t\tassert.ok(queuedDone);\n\t\t\tassert.ok(!sequentializer.hasQueued());\n\t\t});\n\n\t\ttest('join (without executing or queued)', async function () {\n\t\t\tconst sequentializer = new async.TaskSequentializer();\n\n\t\t\tawait sequentializer.join();\n\t\t\tassert.ok(!sequentializer.hasQueued());\n\t\t});\n\n\t\ttest('join (without queued)', async function () {\n\t\t\tconst sequentializer = new async.TaskSequentializer();\n\n\t\t\tlet pendingDone = false;\n\t\t\tsequentializer.run(1, async.timeout(1).then(() => { pendingDone = true; return; }));\n\n\t\t\tawait sequentializer.join();\n\t\t\tassert.ok(pendingDone);\n\t\t\tassert.ok(!sequentializer.isRunning());\n\t\t});\n\n\t\ttest('join (with executing and queued)', async function () {\n\t\t\tconst sequentializer = new async.TaskSequentializer();\n\n\t\t\tlet pendingDone = false;\n\t\t\tsequentializer.run(1, async.timeout(1).then(() => { pendingDone = true; return; }));\n\n\t\t\t// queued finishes after async.timeout\n\t\t\tlet queuedDone = false;\n\t\t\tsequentializer.queue(() => async.timeout(1).then(() => { queuedDone = true; return; }));\n\n\t\t\tawait sequentializer.join();\n\t\t\tassert.ok(pendingDone);\n\t\t\tassert.ok(queuedDone);\n\t\t\tassert.ok(!sequentializer.isRunning());\n\t\t\tassert.ok(!sequentializer.hasQueued());\n\t\t});\n\n\t\ttest('executing and multiple queued (last one wins)', async function () {\n\t\t\tconst sequentializer = new async.TaskSequentializer();\n\n\t\t\tlet pendingDone = false;\n\t\t\tsequentializer.run(1, async.timeout(1).then(() => { pendingDone = true; return; }));\n\n\t\t\t// queued finishes after async.timeout\n\t\t\tlet firstDone = false;\n\t\t\tconst firstRes = sequentializer.queue(() => async.timeout(2).then(() => { firstDone = true; return; }));\n\n\t\t\tlet secondDone = false;\n\t\t\tconst secondRes = sequentializer.queue(() => async.timeout(3).then(() => { secondDone = true; return; }));\n\n\t\t\tlet thirdDone = false;\n\t\t\tconst thirdRes = sequentializer.queue(() => async.timeout(4).then(() => { thirdDone = true; return; }));\n\n\t\t\tawait Promise.all([firstRes, secondRes, thirdRes]);\n\t\t\tassert.ok(pendingDone);\n\t\t\tassert.ok(!firstDone);\n\t\t\tassert.ok(!secondDone);\n\t\t\tassert.ok(thirdDone);\n\t\t});\n\n\t\ttest('cancel executing', async function () {\n\t\t\tconst sequentializer = new async.TaskSequentializer();\n\t\t\tconst ctsTimeout = store.add(new CancellationTokenSource());\n\n\t\t\tlet pendingCancelled = false;\n\t\t\tconst timeout = async.timeout(1, ctsTimeout.token);\n\t\t\tsequentializer.run(1, timeout, () => pendingCancelled = true);\n\t\t\tsequentializer.cancelRunning();\n\n\t\t\tassert.ok(pendingCancelled);\n\t\t\tctsTimeout.cancel();\n\t\t});\n\t});\n\n\tsuite('disposableTimeout', () => {\n\t\ttest('handler only success', async () => {\n\t\t\tlet cb = false;\n\t\t\tconst t = async.disposableTimeout(() => cb = true);\n\n\t\t\tawait async.timeout(0);\n\n\t\t\tassert.strictEqual(cb, true);\n\n\t\t\tt.dispose();\n\t\t});\n\n\t\ttest('handler only cancel', async () => {\n\t\t\tlet cb = false;\n\t\t\tconst t = async.disposableTimeout(() => cb = true);\n\t\t\tt.dispose();\n\n\t\t\tawait async.timeout(0);\n\n\t\t\tassert.strictEqual(cb, false);\n\t\t});\n\n\t\ttest('store managed success', async () => {\n\t\t\tlet cb = false;\n\t\t\tconst s = new DisposableStore();\n\t\t\tasync.disposableTimeout(() => cb = true, 0, s);\n\n\t\t\tawait async.timeout(0);\n\n\t\t\tassert.strictEqual(cb, true);\n\n\t\t\ts.dispose();\n\t\t});\n\n\t\ttest('store managed cancel via disposable', async () => {\n\t\t\tlet cb = false;\n\t\t\tconst s = new DisposableStore();\n\t\t\tconst t = async.disposableTimeout(() => cb = true, 0, s);\n\t\t\tt.dispose();\n\n\t\t\tawait async.timeout(0);\n\n\t\t\tassert.strictEqual(cb, false);\n\n\t\t\ts.dispose();\n\t\t});\n\n\t\ttest('store managed cancel via store', async () => {\n\t\t\tlet cb = false;\n\t\t\tconst s = new DisposableStore();\n\t\t\tasync.disposableTimeout(() => cb = true, 0, s);\n\t\t\ts.dispose();\n\n\t\t\tawait async.timeout(0);\n\n\t\t\tassert.strictEqual(cb, false);\n\t\t});\n\t});\n\n\ttest('raceCancellation', async () => {\n\t\tconst cts = store.add(new CancellationTokenSource());\n\t\tconst ctsTimeout = store.add(new CancellationTokenSource());\n\n\t\tlet triggered = false;\n\t\tconst timeout = async.timeout(100, ctsTimeout.token);\n\t\tconst p = async.raceCancellation(timeout.then(() => triggered = true), cts.token);\n\t\tcts.cancel();\n\n\t\tawait p;\n\n\t\tassert.ok(!triggered);\n\t\tctsTimeout.cancel();\n\t});\n\n\ttest('raceTimeout', async () => {\n\t\tconst cts = store.add(new CancellationTokenSource());\n\n\t\t// timeout wins\n\t\tlet timedout = false;\n\t\tlet triggered = false;\n\n\t\tconst ctsTimeout1 = store.add(new CancellationTokenSource());\n\t\tconst timeout1 = async.timeout(100, ctsTimeout1.token);\n\t\tconst p1 = async.raceTimeout(timeout1.then(() => triggered = true), 1, () => timedout = true);\n\t\tcts.cancel();\n\n\t\tawait p1;\n\n\t\tassert.ok(!triggered);\n\t\tassert.strictEqual(timedout, true);\n\t\tctsTimeout1.cancel();\n\n\t\t// promise wins\n\t\ttimedout = false;\n\n\t\tconst ctsTimeout2 = store.add(new CancellationTokenSource());\n\t\tconst timeout2 = async.timeout(1, ctsTimeout2.token);\n\t\tconst p2 = async.raceTimeout(timeout2.then(() => triggered = true), 100, () => timedout = true);\n\t\tcts.cancel();\n\n\t\tawait p2;\n\n\t\tassert.ok(triggered);\n\t\tassert.strictEqual(timedout, false);\n\t\tctsTimeout2.cancel();\n\t});\n\n\ttest('SequencerByKey', async () => {\n\t\tconst s = new async.SequencerByKey<string>();\n\n\t\tconst r1 = await s.queue('key1', () => Promise.resolve('hello'));\n\t\tassert.strictEqual(r1, 'hello');\n\n\t\tawait s.queue('key2', () => Promise.reject(new Error('failed'))).then(() => {\n\t\t\tthrow new Error('should not be resolved');\n\t\t}, err => {\n\t\t\t// Expected error\n\t\t\tassert.strictEqual(err.message, 'failed');\n\t\t});\n\n\t\t// Still works after a queued promise is rejected\n\t\tconst r3 = await s.queue('key2', () => Promise.resolve('hello'));\n\t\tassert.strictEqual(r3, 'hello');\n\t});\n\n\ttest('IntervalCounter', async () => {\n\t\tlet now = 0;\n\t\tconst counter = new async.IntervalCounter(5, () => now);\n\n\t\tassert.strictEqual(counter.increment(), 1);\n\t\tassert.strictEqual(counter.increment(), 2);\n\t\tassert.strictEqual(counter.increment(), 3);\n\n\t\tnow = 10;\n\n\t\tassert.strictEqual(counter.increment(), 1);\n\t\tassert.strictEqual(counter.increment(), 2);\n\t\tassert.strictEqual(counter.increment(), 3);\n\t});\n\n\tsuite('firstParallel', () => {\n\t\ttest('simple', async () => {\n\t\t\tconst a = await async.firstParallel([\n\t\t\t\tPromise.resolve(1),\n\t\t\t\tPromise.resolve(2),\n\t\t\t\tPromise.resolve(3),\n\t\t\t], v => v === 2);\n\t\t\tassert.strictEqual(a, 2);\n\t\t});\n\n\t\ttest('uses null default', async () => {\n\t\t\tassert.strictEqual(await async.firstParallel([Promise.resolve(1)], v => v === 2), null);\n\t\t});\n\n\t\ttest('uses value default', async () => {\n\t\t\tassert.strictEqual(await async.firstParallel([Promise.resolve(1)], v => v === 2, 4), 4);\n\t\t});\n\n\t\ttest('empty', async () => {\n\t\t\tassert.strictEqual(await async.firstParallel([], v => v === 2, 4), 4);\n\t\t});\n\n\t\ttest('cancels', async () => {\n\t\t\tlet ct1: CancellationToken;\n\t\t\tconst p1 = async.createCancelablePromise(async (ct) => {\n\t\t\t\tct1 = ct;\n\t\t\t\tawait async.timeout(200, ct);\n\t\t\t\treturn 1;\n\t\t\t});\n\t\t\tlet ct2: CancellationToken;\n\t\t\tconst p2 = async.createCancelablePromise(async (ct) => {\n\t\t\t\tct2 = ct;\n\t\t\t\tawait async.timeout(2, ct);\n\t\t\t\treturn 2;\n\t\t\t});\n\n\t\t\tassert.strictEqual(await async.firstParallel([p1, p2], v => v === 2, 4), 2);\n\t\t\tassert.strictEqual(ct1!.isCancellationRequested, true, 'should cancel a');\n\t\t\tassert.strictEqual(ct2!.isCancellationRequested, true, 'should cancel b');\n\t\t});\n\n\t\ttest('rejection handling', async () => {\n\t\t\tlet ct1: CancellationToken;\n\t\t\tconst p1 = async.createCancelablePromise(async (ct) => {\n\t\t\t\tct1 = ct;\n\t\t\t\tawait async.timeout(200, ct);\n\t\t\t\treturn 1;\n\t\t\t});\n\t\t\tlet ct2: CancellationToken;\n\t\t\tconst p2 = async.createCancelablePromise(async (ct) => {\n\t\t\t\tct2 = ct;\n\t\t\t\tawait async.timeout(2, ct);\n\t\t\t\tthrow new Error('oh no');\n\t\t\t});\n\n\t\t\tassert.strictEqual(await async.firstParallel([p1, p2], v => v === 2, 4).catch(() => 'ok'), 'ok');\n\t\t\tassert.strictEqual(ct1!.isCancellationRequested, true, 'should cancel a');\n\t\t\tassert.strictEqual(ct2!.isCancellationRequested, true, 'should cancel b');\n\t\t});\n\t});\n\n\tsuite('DeferredPromise', () => {\n\t\ttest('resolves', async () => {\n\t\t\tconst deferred = new async.DeferredPromise<number>();\n\t\t\tassert.strictEqual(deferred.isResolved, false);\n\t\t\tdeferred.complete(42);\n\t\t\tassert.strictEqual(await deferred.p, 42);\n\t\t\tassert.strictEqual(deferred.isResolved, true);\n\t\t});\n\n\t\ttest('rejects', async () => {\n\t\t\tconst deferred = new async.DeferredPromise<number>();\n\t\t\tassert.strictEqual(deferred.isRejected, false);\n\t\t\tconst err = new Error('oh no!');\n\t\t\tdeferred.error(err);\n\t\t\tassert.strictEqual(await deferred.p.catch(e => e), err);\n\t\t\tassert.strictEqual(deferred.isRejected, true);\n\t\t});\n\n\t\ttest('cancels', async () => {\n\t\t\tconst deferred = new async.DeferredPromise<number>();\n\t\t\tassert.strictEqual(deferred.isRejected, false);\n\t\t\tdeferred.cancel();\n\t\t\tassert.strictEqual((await deferred.p.catch(e => e)).name, 'Canceled');\n\t\t\tassert.strictEqual(deferred.isRejected, true);\n\t\t});\n\t});\n\n\tsuite('Promises.settled', () => {\n\t\ttest('resolves', async () => {\n\t\t\tconst p1 = Promise.resolve(1);\n\t\t\tconst p2 = async.timeout(1).then(() => 2);\n\t\t\tconst p3 = async.timeout(2).then(() => 3);\n\n\t\t\tconst result = await async.Promises.settled<number>([p1, p2, p3]);\n\n\t\t\tassert.strictEqual(result.length, 3);\n\t\t\tassert.deepStrictEqual(result[0], 1);\n\t\t\tassert.deepStrictEqual(result[1], 2);\n\t\t\tassert.deepStrictEqual(result[2], 3);\n\t\t});\n\n\t\ttest('resolves in order', async () => {\n\t\t\tconst p1 = async.timeout(2).then(() => 1);\n\t\t\tconst p2 = async.timeout(1).then(() => 2);\n\t\t\tconst p3 = Promise.resolve(3);\n\n\t\t\tconst result = await async.Promises.settled<number>([p1, p2, p3]);\n\n\t\t\tassert.strictEqual(result.length, 3);\n\t\t\tassert.deepStrictEqual(result[0], 1);\n\t\t\tassert.deepStrictEqual(result[1], 2);\n\t\t\tassert.deepStrictEqual(result[2], 3);\n\t\t});\n\n\t\ttest('rejects with first error but handles all promises (all errors)', async () => {\n\t\t\tconst p1 = Promise.reject(1);\n\n\t\t\tlet p2Handled = false;\n\t\t\tconst p2Error = new Error('2');\n\t\t\tconst p2 = async.timeout(1).then(() => {\n\t\t\t\tp2Handled = true;\n\t\t\t\tthrow p2Error;\n\t\t\t});\n\n\t\t\tlet p3Handled = false;\n\t\t\tconst p3Error = new Error('3');\n\t\t\tconst p3 = async.timeout(2).then(() => {\n\t\t\t\tp3Handled = true;\n\t\t\t\tthrow p3Error;\n\t\t\t});\n\n\t\t\tlet error: Error | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tawait async.Promises.settled<number>([p1, p2, p3]);\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\tassert.ok(error);\n\t\t\tassert.notStrictEqual(error, p2Error);\n\t\t\tassert.notStrictEqual(error, p3Error);\n\t\t\tassert.ok(p2Handled);\n\t\t\tassert.ok(p3Handled);\n\t\t});\n\n\t\ttest('rejects with first error but handles all promises (1 error)', async () => {\n\t\t\tconst p1 = Promise.resolve(1);\n\n\t\t\tlet p2Handled = false;\n\t\t\tconst p2Error = new Error('2');\n\t\t\tconst p2 = async.timeout(1).then(() => {\n\t\t\t\tp2Handled = true;\n\t\t\t\tthrow p2Error;\n\t\t\t});\n\n\t\t\tlet p3Handled = false;\n\t\t\tconst p3 = async.timeout(2).then(() => {\n\t\t\t\tp3Handled = true;\n\t\t\t\treturn 3;\n\t\t\t});\n\n\t\t\tlet error: Error | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tawait async.Promises.settled<number>([p1, p2, p3]);\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\tassert.strictEqual(error, p2Error);\n\t\t\tassert.ok(p2Handled);\n\t\t\tassert.ok(p3Handled);\n\t\t});\n\t});\n\n\tsuite('Promises.withAsyncBody', () => {\n\t\ttest('basics', async () => {\n\n\t\t\tconst p1 = async.Promises.withAsyncBody(async (resolve, reject) => {\n\t\t\t\tresolve(1);\n\t\t\t});\n\n\t\t\tconst p2 = async.Promises.withAsyncBody(async (resolve, reject) => {\n\t\t\t\treject(new Error('error'));\n\t\t\t});\n\n\t\t\tconst p3 = async.Promises.withAsyncBody(async (resolve, reject) => {\n\t\t\t\tthrow new Error('error');\n\t\t\t});\n\n\t\t\tconst r1 = await p1;\n\t\t\tassert.strictEqual(r1, 1);\n\n\t\t\tlet e2: Error | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tawait p2;\n\t\t\t} catch (error) {\n\t\t\t\te2 = error;\n\t\t\t}\n\n\t\t\tassert.ok(e2 instanceof Error);\n\n\t\t\tlet e3: Error | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tawait p3;\n\t\t\t} catch (error) {\n\t\t\t\te3 = error;\n\t\t\t}\n\n\t\t\tassert.ok(e3 instanceof Error);\n\t\t});\n\t});\n\n\tsuite('ThrottledWorker', () => {\n\n\t\tfunction assertArrayEquals(actual: unknown[], expected: unknown[]) {\n\t\t\tassert.strictEqual(actual.length, expected.length);\n\n\t\t\tfor (let i = 0; i < actual.length; i++) {\n\t\t\t\tassert.strictEqual(actual[i], expected[i]);\n\t\t\t}\n\t\t}\n\n\t\ttest('basics', async () => {\n\t\t\tlet handled: number[] = [];\n\n\t\t\tlet handledCallback: Function;\n\t\t\tlet handledPromise = new Promise(resolve => handledCallback = resolve);\n\t\t\tlet handledCounterToResolve = 1;\n\t\t\tlet currentHandledCounter = 0;\n\n\t\t\tconst handler = (units: readonly number[]) => {\n\t\t\t\thandled.push(...units);\n\n\t\t\t\tcurrentHandledCounter++;\n\t\t\t\tif (currentHandledCounter === handledCounterToResolve) {\n\t\t\t\t\thandledCallback();\n\n\t\t\t\t\thandledPromise = new Promise(resolve => handledCallback = resolve);\n\t\t\t\t\tcurrentHandledCounter = 0;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst worker = store.add(new async.ThrottledWorker<number>({\n\t\t\t\tmaxWorkChunkSize: 5,\n\t\t\t\tmaxBufferedWork: undefined,\n\t\t\t\tthrottleDelay: 1\n\t\t\t}, handler));\n\n\t\t\t// Work less than chunk size\n\n\t\t\tlet worked = worker.work([1, 2, 3]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3]);\n\t\t\tassert.strictEqual(worker.pending, 0);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tworker.work([4, 5]);\n\t\t\tworked = worker.work([6]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5, 6]);\n\t\t\tassert.strictEqual(worker.pending, 0);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\t// Work more than chunk size (variant 1)\n\n\t\t\thandled = [];\n\t\t\thandledCounterToResolve = 2;\n\n\t\t\tworked = worker.work([1, 2, 3, 4, 5, 6, 7]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5]);\n\t\t\tassert.strictEqual(worker.pending, 2);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tawait handledPromise;\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5, 6, 7]);\n\n\t\t\thandled = [];\n\t\t\thandledCounterToResolve = 4;\n\n\t\t\tworked = worker.work([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5]);\n\t\t\tassert.strictEqual(worker.pending, 14);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tawait handledPromise;\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\n\n\t\t\t// Work more than chunk size (variant 2)\n\n\t\t\thandled = [];\n\t\t\thandledCounterToResolve = 2;\n\n\t\t\tworked = worker.work([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5]);\n\t\t\tassert.strictEqual(worker.pending, 5);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tawait handledPromise;\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n\t\t\t// Work more while throttled (variant 1)\n\n\t\t\thandled = [];\n\t\t\thandledCounterToResolve = 3;\n\n\t\t\tworked = worker.work([1, 2, 3, 4, 5, 6, 7]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5]);\n\t\t\tassert.strictEqual(worker.pending, 2);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tworker.work([8]);\n\t\t\tworked = worker.work([9, 10, 11]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5]);\n\t\t\tassert.strictEqual(worker.pending, 6);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tawait handledPromise;\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n\t\t\tassert.strictEqual(worker.pending, 0);\n\n\t\t\t// Work more while throttled (variant 2)\n\n\t\t\thandled = [];\n\t\t\thandledCounterToResolve = 2;\n\n\t\t\tworked = worker.work([1, 2, 3, 4, 5, 6, 7]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5]);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tworker.work([8]);\n\t\t\tworked = worker.work([9, 10]);\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5]);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tawait handledPromise;\n\n\t\t\tassertArrayEquals(handled, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\t\t});\n\n\t\ttest('do not accept too much work', async () => {\n\t\t\tconst handled: number[] = [];\n\t\t\tconst handler = (units: readonly number[]) => handled.push(...units);\n\n\t\t\tconst worker = store.add(new async.ThrottledWorker<number>({\n\t\t\t\tmaxWorkChunkSize: 5,\n\t\t\t\tmaxBufferedWork: 5,\n\t\t\t\tthrottleDelay: 1\n\t\t\t}, handler));\n\n\t\t\tlet worked = worker.work([1, 2, 3]);\n\t\t\tassert.strictEqual(worked, true);\n\n\t\t\tworked = worker.work([1, 2, 3, 4, 5, 6]);\n\t\t\tassert.strictEqual(worked, true);\n\t\t\tassert.strictEqual(worker.pending, 1);\n\n\t\t\tworked = worker.work([7]);\n\t\t\tassert.strictEqual(worked, true);\n\t\t\tassert.strictEqual(worker.pending, 2);\n\n\t\t\tworked = worker.work([8, 9, 10, 11]);\n\t\t\tassert.strictEqual(worked, false);\n\t\t\tassert.strictEqual(worker.pending, 2);\n\t\t});\n\n\t\ttest('do not accept too much work (account for max chunk size', async () => {\n\t\t\tconst handled: number[] = [];\n\t\t\tconst handler = (units: readonly number[]) => handled.push(...units);\n\n\t\t\tconst worker = store.add(new async.ThrottledWorker<number>({\n\t\t\t\tmaxWorkChunkSize: 5,\n\t\t\t\tmaxBufferedWork: 5,\n\t\t\t\tthrottleDelay: 1\n\t\t\t}, handler));\n\n\t\t\tlet worked = worker.work([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n\t\t\tassert.strictEqual(worked, false);\n\t\t\tassert.strictEqual(worker.pending, 0);\n\n\t\t\tworked = worker.work([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\t\t\tassert.strictEqual(worked, true);\n\t\t\tassert.strictEqual(worker.pending, 5);\n\t\t});\n\n\t\ttest('disposed', async () => {\n\t\t\tconst handled: number[] = [];\n\t\t\tconst handler = (units: readonly number[]) => handled.push(...units);\n\n\t\t\tconst worker = store.add(new async.ThrottledWorker<number>({\n\t\t\t\tmaxWorkChunkSize: 5,\n\t\t\t\tmaxBufferedWork: undefined,\n\t\t\t\tthrottleDelay: 1\n\t\t\t}, handler));\n\t\t\tworker.dispose();\n\t\t\tconst worked = worker.work([1, 2, 3]);\n\n\t\t\tassertArrayEquals(handled, []);\n\t\t\tassert.strictEqual(worker.pending, 0);\n\t\t\tassert.strictEqual(worked, false);\n\t\t});\n\t});\n\n\tsuite('LimitedQueue', () => {\n\n\t\ttest('basics (with long running task)', async () => {\n\t\t\tconst limitedQueue = new async.LimitedQueue();\n\n\t\t\tlet counter = 0;\n\t\t\tconst promises = [];\n\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\tpromises.push(limitedQueue.queue(async () => {\n\t\t\t\t\tcounter = i;\n\t\t\t\t\tawait async.timeout(1);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tawait Promise.all(promises);\n\n\t\t\t// only the last task executed\n\t\t\tassert.strictEqual(counter, 4);\n\t\t});\n\n\t\ttest('basics (with sync running task)', async () => {\n\t\t\tconst limitedQueue = new async.LimitedQueue();\n\n\t\t\tlet counter = 0;\n\t\t\tconst promises = [];\n\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\tpromises.push(limitedQueue.queue(async () => {\n\t\t\t\t\tcounter = i;\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tawait Promise.all(promises);\n\n\t\t\t// only the last task executed\n\t\t\tassert.strictEqual(counter, 4);\n\t\t});\n\t});\n\n\tsuite('AsyncIterableObject', function () {\n\n\n\t\ttest('onReturn NOT called', async function () {\n\n\t\t\tlet calledOnReturn = false;\n\t\t\tconst iter = new async.AsyncIterableObject<number>(writer => {\n\t\t\t\twriter.emitMany([1, 2, 3, 4, 5]);\n\t\t\t}, () => {\n\t\t\t\tcalledOnReturn = true;\n\t\t\t});\n\n\t\t\tfor await (const item of iter) {\n\t\t\t\tassert.strictEqual(typeof item, 'number');\n\t\t\t}\n\n\t\t\tassert.strictEqual(calledOnReturn, false);\n\n\t\t});\n\n\t\ttest('onReturn called on break', async function () {\n\n\t\t\tlet calledOnReturn = false;\n\t\t\tconst iter = new async.AsyncIterableObject<number>(writer => {\n\t\t\t\twriter.emitMany([1, 2, 3, 4, 5]);\n\t\t\t}, () => {\n\t\t\t\tcalledOnReturn = true;\n\t\t\t});\n\n\t\t\tfor await (const item of iter) {\n\t\t\t\tassert.strictEqual(item, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tassert.strictEqual(calledOnReturn, true);\n\n\t\t});\n\n\t\ttest('onReturn called on return', async function () {\n\n\t\t\tlet calledOnReturn = false;\n\t\t\tconst iter = new async.AsyncIterableObject<number>(writer => {\n\t\t\t\twriter.emitMany([1, 2, 3, 4, 5]);\n\t\t\t}, () => {\n\t\t\t\tcalledOnReturn = true;\n\t\t\t});\n\n\t\t\tawait (async function test() {\n\t\t\t\tfor await (const item of iter) {\n\t\t\t\t\tassert.strictEqual(item, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t})();\n\n\n\t\t\tassert.strictEqual(calledOnReturn, true);\n\n\t\t});\n\n\n\t\ttest('onReturn called on throwing', async function () {\n\n\t\t\tlet calledOnReturn = false;\n\t\t\tconst iter = new async.AsyncIterableObject<number>(writer => {\n\t\t\t\twriter.emitMany([1, 2, 3, 4, 5]);\n\t\t\t}, () => {\n\t\t\t\tcalledOnReturn = true;\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tfor await (const item of iter) {\n\t\t\t\t\tassert.strictEqual(item, 1);\n\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t\t} catch (e) {\n\n\t\t\t}\n\n\t\t\tassert.strictEqual(calledOnReturn, true);\n\t\t});\n\t});\n\n\tsuite('AsyncIterableSource', function () {\n\n\t\ttest('onReturn is wired up', async function () {\n\t\t\tlet calledOnReturn = false;\n\t\t\tconst source = new async.AsyncIterableSource<number>(() => { calledOnReturn = true; });\n\n\t\t\tsource.emitOne(1);\n\t\t\tsource.emitOne(2);\n\t\t\tsource.emitOne(3);\n\t\t\tsource.resolve();\n\n\t\t\tfor await (const item of source.asyncIterable) {\n\t\t\t\tassert.strictEqual(item, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tassert.strictEqual(calledOnReturn, true);\n\n\t\t});\n\n\t\ttest('onReturn is wired up 2', async function () {\n\t\t\tlet calledOnReturn = false;\n\t\t\tconst source = new async.AsyncIterableSource<number>(() => { calledOnReturn = true; });\n\n\t\t\tsource.emitOne(1);\n\t\t\tsource.emitOne(2);\n\t\t\tsource.emitOne(3);\n\t\t\tsource.resolve();\n\n\t\t\tfor await (const item of source.asyncIterable) {\n\t\t\t\tassert.strictEqual(typeof item, 'number');\n\t\t\t}\n\n\t\t\tassert.strictEqual(calledOnReturn, false);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["p", "test"]
}
