import r from"assert";import{FileAccess as i,Schemas as l}from"../../common/network.js";import{isWeb as a}from"../../common/platform.js";import{isEqual as c}from"../../common/resources.js";import{URI as o}from"../../common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as n}from"./utils.js";suite("network",()=>{n(),(a?test.skip:test)("FileAccess: URI (native)",()=>{let e=o.file("network.test.ts"),t=i.uriToBrowserUri(e);r.ok(t.authority.length>0);let s=i.uriToFileUri(t);r.strictEqual(s.authority.length,0),r(c(e,s)),e=o.file("network.test.ts").with({authority:"test-authority"}),t=i.uriToBrowserUri(e),r.strictEqual(t.authority,e.authority),s=i.uriToFileUri(t),r(c(e,s))}),(a?test.skip:test)("FileAccess: moduleId (native)",()=>{const e=i.asBrowserUri("vs/base/test/node/network.test");r.strictEqual(e.scheme,l.vscodeFileResource);const t=i.asFileUri("vs/base/test/node/network.test");r.strictEqual(t.scheme,l.file)}),(a?test.skip:test)("FileAccess: query and fragment is dropped (native)",()=>{const e=o.file("network.test.ts").with({query:"foo=bar",fragment:"something"}),t=i.uriToBrowserUri(e);r.strictEqual(t.query,""),r.strictEqual(t.fragment,"")}),(a?test.skip:test)("FileAccess: query and fragment is kept if URI is already of same scheme (native)",()=>{const e=o.file("network.test.ts").with({query:"foo=bar",fragment:"something"}),t=i.uriToBrowserUri(e.with({scheme:l.vscodeFileResource}));r.strictEqual(t.query,"foo=bar"),r.strictEqual(t.fragment,"something");const s=i.uriToFileUri(e);r.strictEqual(s.query,"foo=bar"),r.strictEqual(s.fragment,"something")}),(a?test.skip:test)("FileAccess: web",()=>{const e=o.file("network.test.ts").with({scheme:"https"}),t=i.uriToBrowserUri(e);r.strictEqual(e.toString(),t.toString())}),test("FileAccess: remote URIs",()=>{const e=o.file("network.test.ts").with({scheme:l.vscodeRemote}),t=i.uriToBrowserUri(e);r.notStrictEqual(e.scheme,t.scheme)})});
