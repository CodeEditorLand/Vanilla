{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/mock.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SinonStub, stub } from 'sinon';\n\nexport interface Ctor<T> {\n\tnew(): T;\n}\n\nexport function mock<T>(): Ctor<T> {\n\treturn function () { } as any;\n}\n\nexport type MockObject<T, ExceptProps = never> = { [K in keyof T]: K extends ExceptProps ? T[K] : SinonStub };\n\n// Creates an object object that returns sinon mocks for every property. Optionally\n// takes base properties.\nexport const mockObject = <T extends object>() => <TP extends Partial<T> = {}>(properties?: TP): MockObject<T, keyof TP> => {\n\treturn new Proxy({ ...properties } as any, {\n\t\tget(target, key) {\n\t\t\tif (!target.hasOwnProperty(key)) {\n\t\t\t\ttarget[key] = stub();\n\t\t\t}\n\n\t\t\treturn target[key];\n\t\t},\n\t\tset(target, key, value) {\n\t\t\ttarget[key] = value;\n\t\t\treturn true;\n\t\t},\n\t});\n};\n"],
  "mappings": ";;AAKA,SAAS,WAAW,YAAY;AAMzB,SAAS,OAAmB;AAClC,SAAO,WAAY;AAAA,EAAE;AACtB;AAFgB;AAQT,MAAM,aAAa,6BAAwB,CAA6B,eAA6C;AAC3H,SAAO,IAAI,MAAM,EAAE,GAAG,WAAW,GAAU;AAAA,IAC1C,IAAI,QAAQ,KAAK;AAChB,UAAI,CAAC,OAAO,eAAe,GAAG,GAAG;AAChC,eAAO,GAAG,IAAI,KAAK;AAAA,MACpB;AAEA,aAAO,OAAO,GAAG;AAAA,IAClB;AAAA,IACA,IAAI,QAAQ,KAAK,OAAO;AACvB,aAAO,GAAG,IAAI;AACd,aAAO;AAAA,IACR;AAAA,EACD,CAAC;AACF,GAd0B;",
  "names": []
}
