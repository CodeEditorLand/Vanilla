{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/arrays.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport * as arrays from '../../common/arrays.js';\nimport * as arraysFind from '../../common/arraysFind.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('Arrays', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('removeFastWithoutKeepingOrder', () => {\n\t\tconst array = [1, 4, 5, 7, 55, 59, 60, 61, 64, 69];\n\t\tarrays.removeFastWithoutKeepingOrder(array, 1);\n\t\tassert.deepStrictEqual(array, [1, 69, 5, 7, 55, 59, 60, 61, 64]);\n\n\t\tarrays.removeFastWithoutKeepingOrder(array, 0);\n\t\tassert.deepStrictEqual(array, [64, 69, 5, 7, 55, 59, 60, 61]);\n\n\t\tarrays.removeFastWithoutKeepingOrder(array, 7);\n\t\tassert.deepStrictEqual(array, [64, 69, 5, 7, 55, 59, 60]);\n\t});\n\n\ttest('findFirst', () => {\n\t\tconst array = [1, 4, 5, 7, 55, 59, 60, 61, 64, 69];\n\n\t\tlet idx = arraysFind.findFirstIdxMonotonousOrArrLen(array, e => e >= 0);\n\t\tassert.strictEqual(array[idx], 1);\n\n\t\tidx = arraysFind.findFirstIdxMonotonousOrArrLen(array, e => e > 1);\n\t\tassert.strictEqual(array[idx], 4);\n\n\t\tidx = arraysFind.findFirstIdxMonotonousOrArrLen(array, e => e >= 8);\n\t\tassert.strictEqual(array[idx], 55);\n\n\t\tidx = arraysFind.findFirstIdxMonotonousOrArrLen(array, e => e >= 61);\n\t\tassert.strictEqual(array[idx], 61);\n\n\t\tidx = arraysFind.findFirstIdxMonotonousOrArrLen(array, e => e >= 69);\n\t\tassert.strictEqual(array[idx], 69);\n\n\t\tidx = arraysFind.findFirstIdxMonotonousOrArrLen(array, e => e >= 70);\n\t\tassert.strictEqual(idx, array.length);\n\n\t\tidx = arraysFind.findFirstIdxMonotonousOrArrLen([], e => e >= 0);\n\t\tassert.strictEqual(array[idx], 1);\n\t});\n\n\ttest('quickSelect', () => {\n\n\t\tfunction assertMedian(expexted: number, data: number[], nth: number = Math.floor(data.length / 2)) {\n\t\t\tconst compare = (a: number, b: number) => a - b;\n\t\t\tconst actual1 = arrays.quickSelect(nth, data, compare);\n\t\t\tassert.strictEqual(actual1, expexted);\n\n\t\t\tconst actual2 = data.slice().sort(compare)[nth];\n\t\t\tassert.strictEqual(actual2, expexted);\n\t\t}\n\n\t\tassertMedian(5, [9, 1, 0, 2, 3, 4, 6, 8, 7, 10, 5]);\n\t\tassertMedian(8, [9, 1, 0, 2, 3, 4, 6, 8, 7, 10, 5], 8);\n\t\tassertMedian(8, [13, 4, 8]);\n\t\tassertMedian(4, [13, 4, 8, 4, 4]);\n\t\tassertMedian(13, [13, 4, 8], 2);\n\t});\n\n\ttest('sortedDiff', () => {\n\t\tfunction compare(a: number, b: number): number {\n\t\t\treturn a - b;\n\t\t}\n\n\t\tlet d = arrays.sortedDiff([1, 2, 4], [], compare);\n\t\tassert.deepStrictEqual(d, [\n\t\t\t{ start: 0, deleteCount: 3, toInsert: [] }\n\t\t]);\n\n\t\td = arrays.sortedDiff([], [1, 2, 4], compare);\n\t\tassert.deepStrictEqual(d, [\n\t\t\t{ start: 0, deleteCount: 0, toInsert: [1, 2, 4] }\n\t\t]);\n\n\t\td = arrays.sortedDiff([1, 2, 4], [1, 2, 4], compare);\n\t\tassert.deepStrictEqual(d, []);\n\n\t\td = arrays.sortedDiff([1, 2, 4], [2, 3, 4, 5], compare);\n\t\tassert.deepStrictEqual(d, [\n\t\t\t{ start: 0, deleteCount: 1, toInsert: [] },\n\t\t\t{ start: 2, deleteCount: 0, toInsert: [3] },\n\t\t\t{ start: 3, deleteCount: 0, toInsert: [5] },\n\t\t]);\n\n\t\td = arrays.sortedDiff([2, 3, 4, 5], [1, 2, 4], compare);\n\t\tassert.deepStrictEqual(d, [\n\t\t\t{ start: 0, deleteCount: 0, toInsert: [1] },\n\t\t\t{ start: 1, deleteCount: 1, toInsert: [] },\n\t\t\t{ start: 3, deleteCount: 1, toInsert: [] },\n\t\t]);\n\n\t\td = arrays.sortedDiff([1, 3, 5, 7], [5, 9, 11], compare);\n\t\tassert.deepStrictEqual(d, [\n\t\t\t{ start: 0, deleteCount: 2, toInsert: [] },\n\t\t\t{ start: 3, deleteCount: 1, toInsert: [9, 11] }\n\t\t]);\n\n\t\td = arrays.sortedDiff([1, 3, 7], [5, 9, 11], compare);\n\t\tassert.deepStrictEqual(d, [\n\t\t\t{ start: 0, deleteCount: 3, toInsert: [5, 9, 11] }\n\t\t]);\n\t});\n\n\ttest('delta sorted arrays', function () {\n\t\tfunction compare(a: number, b: number): number {\n\t\t\treturn a - b;\n\t\t}\n\n\t\tlet d = arrays.delta([1, 2, 4], [], compare);\n\t\tassert.deepStrictEqual(d.removed, [1, 2, 4]);\n\t\tassert.deepStrictEqual(d.added, []);\n\n\t\td = arrays.delta([], [1, 2, 4], compare);\n\t\tassert.deepStrictEqual(d.removed, []);\n\t\tassert.deepStrictEqual(d.added, [1, 2, 4]);\n\n\t\td = arrays.delta([1, 2, 4], [1, 2, 4], compare);\n\t\tassert.deepStrictEqual(d.removed, []);\n\t\tassert.deepStrictEqual(d.added, []);\n\n\t\td = arrays.delta([1, 2, 4], [2, 3, 4, 5], compare);\n\t\tassert.deepStrictEqual(d.removed, [1]);\n\t\tassert.deepStrictEqual(d.added, [3, 5]);\n\n\t\td = arrays.delta([2, 3, 4, 5], [1, 2, 4], compare);\n\t\tassert.deepStrictEqual(d.removed, [3, 5]);\n\t\tassert.deepStrictEqual(d.added, [1]);\n\n\t\td = arrays.delta([1, 3, 5, 7], [5, 9, 11], compare);\n\t\tassert.deepStrictEqual(d.removed, [1, 3, 7]);\n\t\tassert.deepStrictEqual(d.added, [9, 11]);\n\n\t\td = arrays.delta([1, 3, 7], [5, 9, 11], compare);\n\t\tassert.deepStrictEqual(d.removed, [1, 3, 7]);\n\t\tassert.deepStrictEqual(d.added, [5, 9, 11]);\n\t});\n\n\ttest('binarySearch', () => {\n\t\tfunction compare(a: number, b: number): number {\n\t\t\treturn a - b;\n\t\t}\n\t\tconst array = [1, 4, 5, 7, 55, 59, 60, 61, 64, 69];\n\n\t\tassert.strictEqual(arrays.binarySearch(array, 1, compare), 0);\n\t\tassert.strictEqual(arrays.binarySearch(array, 5, compare), 2);\n\n\t\t// insertion point\n\t\tassert.strictEqual(arrays.binarySearch(array, 0, compare), ~0);\n\t\tassert.strictEqual(arrays.binarySearch(array, 6, compare), ~3);\n\t\tassert.strictEqual(arrays.binarySearch(array, 70, compare), ~10);\n\t});\n\n\ttest('binarySearch2', () => {\n\t\tfunction compareTo(key: number) {\n\t\t\treturn (index: number) => {\n\t\t\t\treturn array[index] - key;\n\t\t\t};\n\t\t}\n\t\tconst array = [1, 4, 5, 7, 55, 59, 60, 61, 64, 69];\n\n\t\tassert.strictEqual(arrays.binarySearch2(10, compareTo(1)), 0);\n\t\tassert.strictEqual(arrays.binarySearch2(10, compareTo(5)), 2);\n\n\t\t// insertion point\n\t\tassert.strictEqual(arrays.binarySearch2(10, compareTo(0)), ~0);\n\t\tassert.strictEqual(arrays.binarySearch2(10, compareTo(6)), ~3);\n\t\tassert.strictEqual(arrays.binarySearch2(10, compareTo(70)), ~10);\n\t\tassert.strictEqual(arrays.binarySearch2(2, compareTo(5)), ~2);\n\t});\n\n\ttest('distinct', () => {\n\t\tfunction compare(a: string): string {\n\t\t\treturn a;\n\t\t}\n\n\t\tassert.deepStrictEqual(arrays.distinct(['32', '4', '5'], compare), ['32', '4', '5']);\n\t\tassert.deepStrictEqual(arrays.distinct(['32', '4', '5', '4'], compare), ['32', '4', '5']);\n\t\tassert.deepStrictEqual(arrays.distinct(['32', 'constructor', '5', '1'], compare), ['32', 'constructor', '5', '1']);\n\t\tassert.deepStrictEqual(arrays.distinct(['32', 'constructor', 'proto', 'proto', 'constructor'], compare), ['32', 'constructor', 'proto']);\n\t\tassert.deepStrictEqual(arrays.distinct(['32', '4', '5', '32', '4', '5', '32', '4', '5', '5'], compare), ['32', '4', '5']);\n\t});\n\n\ttest('top', () => {\n\t\tconst cmp = (a: number, b: number) => {\n\t\t\tassert.strictEqual(typeof a, 'number', 'typeof a');\n\t\t\tassert.strictEqual(typeof b, 'number', 'typeof b');\n\t\t\treturn a - b;\n\t\t};\n\n\t\tassert.deepStrictEqual(arrays.top([], cmp, 1), []);\n\t\tassert.deepStrictEqual(arrays.top([1], cmp, 0), []);\n\t\tassert.deepStrictEqual(arrays.top([1, 2], cmp, 1), [1]);\n\t\tassert.deepStrictEqual(arrays.top([2, 1], cmp, 1), [1]);\n\t\tassert.deepStrictEqual(arrays.top([1, 3, 2], cmp, 2), [1, 2]);\n\t\tassert.deepStrictEqual(arrays.top([3, 2, 1], cmp, 3), [1, 2, 3]);\n\t\tassert.deepStrictEqual(arrays.top([4, 6, 2, 7, 8, 3, 5, 1], cmp, 3), [1, 2, 3]);\n\t});\n\n\ttest('topAsync', async () => {\n\t\tconst cmp = (a: number, b: number) => {\n\t\t\tassert.strictEqual(typeof a, 'number', 'typeof a');\n\t\t\tassert.strictEqual(typeof b, 'number', 'typeof b');\n\t\t\treturn a - b;\n\t\t};\n\n\t\tawait testTopAsync(cmp, 1);\n\t\treturn testTopAsync(cmp, 2);\n\t});\n\n\tasync function testTopAsync(cmp: any, m: number) {\n\t\t{\n\t\t\tconst result = await arrays.topAsync([], cmp, 1, m);\n\t\t\tassert.deepStrictEqual(result, []);\n\t\t}\n\t\t{\n\t\t\tconst result = await arrays.topAsync([1], cmp, 0, m);\n\t\t\tassert.deepStrictEqual(result, []);\n\t\t}\n\t\t{\n\t\t\tconst result = await arrays.topAsync([1, 2], cmp, 1, m);\n\t\t\tassert.deepStrictEqual(result, [1]);\n\t\t}\n\t\t{\n\t\t\tconst result = await arrays.topAsync([2, 1], cmp, 1, m);\n\t\t\tassert.deepStrictEqual(result, [1]);\n\t\t}\n\t\t{\n\t\t\tconst result = await arrays.topAsync([1, 3, 2], cmp, 2, m);\n\t\t\tassert.deepStrictEqual(result, [1, 2]);\n\t\t}\n\t\t{\n\t\t\tconst result = await arrays.topAsync([3, 2, 1], cmp, 3, m);\n\t\t\tassert.deepStrictEqual(result, [1, 2, 3]);\n\t\t}\n\t\t{\n\t\t\tconst result = await arrays.topAsync([4, 6, 2, 7, 8, 3, 5, 1], cmp, 3, m);\n\t\t\tassert.deepStrictEqual(result, [1, 2, 3]);\n\t\t}\n\t}\n\n\ttest('coalesce', () => {\n\t\tconst a: Array<number | null> = arrays.coalesce([null, 1, null, 2, 3]);\n\t\tassert.strictEqual(a.length, 3);\n\t\tassert.strictEqual(a[0], 1);\n\t\tassert.strictEqual(a[1], 2);\n\t\tassert.strictEqual(a[2], 3);\n\n\t\tarrays.coalesce([null, 1, null, undefined, undefined, 2, 3]);\n\t\tassert.strictEqual(a.length, 3);\n\t\tassert.strictEqual(a[0], 1);\n\t\tassert.strictEqual(a[1], 2);\n\t\tassert.strictEqual(a[2], 3);\n\n\t\tlet b: number[] = [];\n\t\tb[10] = 1;\n\t\tb[20] = 2;\n\t\tb[30] = 3;\n\t\tb = arrays.coalesce(b);\n\t\tassert.strictEqual(b.length, 3);\n\t\tassert.strictEqual(b[0], 1);\n\t\tassert.strictEqual(b[1], 2);\n\t\tassert.strictEqual(b[2], 3);\n\n\t\tlet sparse: number[] = [];\n\t\tsparse[0] = 1;\n\t\tsparse[1] = 1;\n\t\tsparse[17] = 1;\n\t\tsparse[1000] = 1;\n\t\tsparse[1001] = 1;\n\n\t\tassert.strictEqual(sparse.length, 1002);\n\n\t\tsparse = arrays.coalesce(sparse);\n\t\tassert.strictEqual(sparse.length, 5);\n\t});\n\n\ttest('coalesce - inplace', function () {\n\t\tlet a: Array<number | null> = [null, 1, null, 2, 3];\n\t\tarrays.coalesceInPlace(a);\n\t\tassert.strictEqual(a.length, 3);\n\t\tassert.strictEqual(a[0], 1);\n\t\tassert.strictEqual(a[1], 2);\n\t\tassert.strictEqual(a[2], 3);\n\n\t\ta = [null, 1, null, undefined!, undefined!, 2, 3];\n\t\tarrays.coalesceInPlace(a);\n\t\tassert.strictEqual(a.length, 3);\n\t\tassert.strictEqual(a[0], 1);\n\t\tassert.strictEqual(a[1], 2);\n\t\tassert.strictEqual(a[2], 3);\n\n\t\tconst b: number[] = [];\n\t\tb[10] = 1;\n\t\tb[20] = 2;\n\t\tb[30] = 3;\n\t\tarrays.coalesceInPlace(b);\n\t\tassert.strictEqual(b.length, 3);\n\t\tassert.strictEqual(b[0], 1);\n\t\tassert.strictEqual(b[1], 2);\n\t\tassert.strictEqual(b[2], 3);\n\n\t\tconst sparse: number[] = [];\n\t\tsparse[0] = 1;\n\t\tsparse[1] = 1;\n\t\tsparse[17] = 1;\n\t\tsparse[1000] = 1;\n\t\tsparse[1001] = 1;\n\n\t\tassert.strictEqual(sparse.length, 1002);\n\n\t\tarrays.coalesceInPlace(sparse);\n\t\tassert.strictEqual(sparse.length, 5);\n\t});\n\n\ttest('insert, remove', function () {\n\t\tconst array: string[] = [];\n\t\tconst remove = arrays.insert(array, 'foo');\n\t\tassert.strictEqual(array[0], 'foo');\n\n\t\tremove();\n\t\tassert.strictEqual(array.length, 0);\n\t});\n\n\ttest('splice', function () {\n\t\t// negative start index, absolute value greater than the length\n\t\tlet array = [1, 2, 3, 4, 5];\n\t\tarrays.splice(array, -6, 3, [6, 7]);\n\t\tassert.strictEqual(array.length, 4);\n\t\tassert.strictEqual(array[0], 6);\n\t\tassert.strictEqual(array[1], 7);\n\t\tassert.strictEqual(array[2], 4);\n\t\tassert.strictEqual(array[3], 5);\n\n\t\t// negative start index, absolute value less than the length\n\t\tarray = [1, 2, 3, 4, 5];\n\t\tarrays.splice(array, -3, 3, [6, 7]);\n\t\tassert.strictEqual(array.length, 4);\n\t\tassert.strictEqual(array[0], 1);\n\t\tassert.strictEqual(array[1], 2);\n\t\tassert.strictEqual(array[2], 6);\n\t\tassert.strictEqual(array[3], 7);\n\n\t\t// Start index less than the length\n\t\tarray = [1, 2, 3, 4, 5];\n\t\tarrays.splice(array, 3, 3, [6, 7]);\n\t\tassert.strictEqual(array.length, 5);\n\t\tassert.strictEqual(array[0], 1);\n\t\tassert.strictEqual(array[1], 2);\n\t\tassert.strictEqual(array[2], 3);\n\t\tassert.strictEqual(array[3], 6);\n\t\tassert.strictEqual(array[4], 7);\n\n\t\t// Start index greater than the length\n\t\tarray = [1, 2, 3, 4, 5];\n\t\tarrays.splice(array, 6, 3, [6, 7]);\n\t\tassert.strictEqual(array.length, 7);\n\t\tassert.strictEqual(array[0], 1);\n\t\tassert.strictEqual(array[1], 2);\n\t\tassert.strictEqual(array[2], 3);\n\t\tassert.strictEqual(array[3], 4);\n\t\tassert.strictEqual(array[4], 5);\n\t\tassert.strictEqual(array[5], 6);\n\t\tassert.strictEqual(array[6], 7);\n\t});\n\n\ttest('findMaxBy', () => {\n\t\tconst array = [{ v: 3 }, { v: 5 }, { v: 2 }, { v: 2 }, { v: 2 }, { v: 5 }];\n\n\t\tassert.strictEqual(\n\t\t\tarray.indexOf(arraysFind.findFirstMax(array, arrays.compareBy(v => v.v, arrays.numberComparator))!),\n\t\t\t1\n\t\t);\n\t});\n\n\ttest('findLastMaxBy', () => {\n\t\tconst array = [{ v: 3 }, { v: 5 }, { v: 2 }, { v: 2 }, { v: 2 }, { v: 5 }];\n\n\t\tassert.strictEqual(\n\t\t\tarray.indexOf(arraysFind.findLastMax(array, arrays.compareBy(v => v.v, arrays.numberComparator))!),\n\t\t\t5\n\t\t);\n\t});\n\n\ttest('findMinBy', () => {\n\t\tconst array = [{ v: 3 }, { v: 5 }, { v: 2 }, { v: 2 }, { v: 2 }, { v: 5 }];\n\n\t\tassert.strictEqual(\n\t\t\tarray.indexOf(arraysFind.findFirstMin(array, arrays.compareBy(v => v.v, arrays.numberComparator))!),\n\t\t\t2\n\t\t);\n\t});\n\n\tsuite('ArrayQueue', () => {\n\t\tsuite('takeWhile/takeFromEndWhile', () => {\n\t\t\ttest('TakeWhile 1', () => {\n\t\t\t\tconst queue1 = new arrays.ArrayQueue([9, 8, 1, 7, 6]);\n\t\t\t\tassert.deepStrictEqual(queue1.takeWhile(x => x > 5), [9, 8]);\n\t\t\t\tassert.deepStrictEqual(queue1.takeWhile(x => x < 7), [1]);\n\t\t\t\tassert.deepStrictEqual(queue1.takeWhile(x => true), [7, 6]);\n\t\t\t});\n\n\t\t\ttest('TakeFromEndWhile 1', () => {\n\t\t\t\tconst queue1 = new arrays.ArrayQueue([9, 8, 1, 7, 6]);\n\t\t\t\tassert.deepStrictEqual(queue1.takeFromEndWhile(x => x > 5), [7, 6]);\n\t\t\t\tassert.deepStrictEqual(queue1.takeFromEndWhile(x => x < 2), [1]);\n\t\t\t\tassert.deepStrictEqual(queue1.takeFromEndWhile(x => true), [9, 8]);\n\t\t\t});\n\t\t});\n\n\t\tsuite('takeWhile/takeFromEndWhile monotonous', () => {\n\t\t\tfunction testMonotonous(array: number[], predicate: (a: number) => boolean) {\n\t\t\t\tfunction normalize(arr: number[]): number[] | null {\n\t\t\t\t\tif (arr.length === 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\treturn arr;\n\t\t\t\t}\n\n\t\t\t\tconst negatedPredicate = (a: number) => !predicate(a);\n\n\t\t\t\t{\n\t\t\t\t\tconst queue1 = new arrays.ArrayQueue(array);\n\t\t\t\t\tassert.deepStrictEqual(queue1.takeWhile(predicate), normalize(array.filter(predicate)));\n\t\t\t\t\tassert.deepStrictEqual(queue1.length, array.length - array.filter(predicate).length);\n\t\t\t\t\tassert.deepStrictEqual(queue1.takeWhile(() => true), normalize(array.filter(negatedPredicate)));\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tconst queue3 = new arrays.ArrayQueue(array);\n\t\t\t\t\tassert.deepStrictEqual(queue3.takeFromEndWhile(negatedPredicate), normalize(array.filter(negatedPredicate)));\n\t\t\t\t\tassert.deepStrictEqual(queue3.length, array.length - array.filter(negatedPredicate).length);\n\t\t\t\t\tassert.deepStrictEqual(queue3.takeFromEndWhile(() => true), normalize(array.filter(predicate)));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst array = [1, 1, 1, 2, 5, 5, 7, 8, 8];\n\n\t\t\ttest('TakeWhile 1', () => testMonotonous(array, value => value <= 1));\n\t\t\ttest('TakeWhile 2', () => testMonotonous(array, value => value < 5));\n\t\t\ttest('TakeWhile 3', () => testMonotonous(array, value => value <= 5));\n\t\t\ttest('TakeWhile 4', () => testMonotonous(array, value => true));\n\t\t\ttest('TakeWhile 5', () => testMonotonous(array, value => false));\n\n\t\t\tconst array2 = [1, 1, 1, 2, 5, 5, 7, 8, 8, 9, 9, 9, 9, 10, 10];\n\n\t\t\ttest('TakeWhile 6', () => testMonotonous(array2, value => value < 10));\n\t\t\ttest('TakeWhile 7', () => testMonotonous(array2, value => value < 7));\n\t\t\ttest('TakeWhile 8', () => testMonotonous(array2, value => value < 5));\n\n\t\t\ttest('TakeWhile Empty', () => testMonotonous([], value => value <= 5));\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["array"]
}
