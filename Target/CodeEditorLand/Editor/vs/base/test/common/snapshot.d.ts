import { URI } from "../../common/uri.js";
export interface ISnapshotOptions {
    /** Name for snapshot file, rather than an incremented number */
    name?: string;
    /** Extension name of the snapshot file, defaults to `.snap` */
    extension?: string;
}
/**
 * This is exported only for tests against the snapshotting itself! Use
 * {@link assertSnapshot} as a consumer!
 */
export declare class SnapshotContext {
    private readonly test;
    private nextIndex;
    protected snapshotsDir: URI;
    private readonly namePrefix;
    private readonly usedNames;
    constructor(test: Mocha.Test | undefined);
    assert(value: any, options?: ISnapshotOptions): Promise<void>;
    removeOldSnapshots(): Promise<void>;
}
/**
 * Implements a snapshot testing utility. ⚠️ This is async! ⚠️
 *
 * The first time a snapshot test is run, it'll record the value it's called
 * with as the expected value. Subsequent runs will fail if the value differs,
 * but the snapshot can be regenerated by hand or using the Selfhost Test
 * Provider Extension which'll offer to update it.
 *
 * The snapshot will be associated with the currently running test and stored
 * in a `__snapshots__` directory next to the test file, which is expected to
 * be the first `.test.js` file in the callstack.
 */
export declare function assertSnapshot(value: any, options?: ISnapshotOptions): Promise<void>;
