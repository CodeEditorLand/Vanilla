{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/network.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { FileAccess, Schemas } from '../../common/network.js';\nimport { isWeb } from '../../common/platform.js';\nimport { isEqual } from '../../common/resources.js';\nimport { URI } from '../../common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('network', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\t(isWeb ? test.skip : test)('FileAccess: URI (native)', () => {\n\n\t\t// asCodeUri() & asFileUri(): simple, without authority\n\t\tlet originalFileUri = URI.file('network.test.ts');\n\t\tlet browserUri = FileAccess.uriToBrowserUri(originalFileUri);\n\t\tassert.ok(browserUri.authority.length > 0);\n\t\tlet fileUri = FileAccess.uriToFileUri(browserUri);\n\t\tassert.strictEqual(fileUri.authority.length, 0);\n\t\tassert(isEqual(originalFileUri, fileUri));\n\n\t\t// asCodeUri() & asFileUri(): with authority\n\t\toriginalFileUri = URI.file('network.test.ts').with({ authority: 'test-authority' });\n\t\tbrowserUri = FileAccess.uriToBrowserUri(originalFileUri);\n\t\tassert.strictEqual(browserUri.authority, originalFileUri.authority);\n\t\tfileUri = FileAccess.uriToFileUri(browserUri);\n\t\tassert(isEqual(originalFileUri, fileUri));\n\t});\n\n\t(isWeb ? test.skip : test)('FileAccess: moduleId (native)', () => {\n\t\tconst browserUri = FileAccess.asBrowserUri('vs/base/test/node/network.test');\n\t\tassert.strictEqual(browserUri.scheme, Schemas.vscodeFileResource);\n\n\t\tconst fileUri = FileAccess.asFileUri('vs/base/test/node/network.test');\n\t\tassert.strictEqual(fileUri.scheme, Schemas.file);\n\t});\n\n\t(isWeb ? test.skip : test)('FileAccess: query and fragment is dropped (native)', () => {\n\t\tconst originalFileUri = URI.file('network.test.ts').with({ query: 'foo=bar', fragment: 'something' });\n\t\tconst browserUri = FileAccess.uriToBrowserUri(originalFileUri);\n\t\tassert.strictEqual(browserUri.query, '');\n\t\tassert.strictEqual(browserUri.fragment, '');\n\t});\n\n\t(isWeb ? test.skip : test)('FileAccess: query and fragment is kept if URI is already of same scheme (native)', () => {\n\t\tconst originalFileUri = URI.file('network.test.ts').with({ query: 'foo=bar', fragment: 'something' });\n\t\tconst browserUri = FileAccess.uriToBrowserUri(originalFileUri.with({ scheme: Schemas.vscodeFileResource }));\n\t\tassert.strictEqual(browserUri.query, 'foo=bar');\n\t\tassert.strictEqual(browserUri.fragment, 'something');\n\n\t\tconst fileUri = FileAccess.uriToFileUri(originalFileUri);\n\t\tassert.strictEqual(fileUri.query, 'foo=bar');\n\t\tassert.strictEqual(fileUri.fragment, 'something');\n\t});\n\n\t(isWeb ? test.skip : test)('FileAccess: web', () => {\n\t\tconst originalHttpsUri = URI.file('network.test.ts').with({ scheme: 'https' });\n\t\tconst browserUri = FileAccess.uriToBrowserUri(originalHttpsUri);\n\t\tassert.strictEqual(originalHttpsUri.toString(), browserUri.toString());\n\t});\n\n\ttest('FileAccess: remote URIs', () => {\n\t\tconst originalRemoteUri = URI.file('network.test.ts').with({ scheme: Schemas.vscodeRemote });\n\t\tconst browserUri = FileAccess.uriToBrowserUri(originalRemoteUri);\n\t\tassert.notStrictEqual(originalRemoteUri.scheme, browserUri.scheme);\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,YAAY,eAAe;AACpC,SAAS,aAAa;AACtB,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,+CAA+C;AAExD,MAAM,WAAW,MAAM;AAEtB,0CAAwC;AAExC,GAAC,QAAQ,KAAK,OAAO,MAAM,4BAA4B,MAAM;AAG5D,QAAI,kBAAkB,IAAI,KAAK,iBAAiB;AAChD,QAAI,aAAa,WAAW,gBAAgB,eAAe;AAC3D,WAAO,GAAG,WAAW,UAAU,SAAS,CAAC;AACzC,QAAI,UAAU,WAAW,aAAa,UAAU;AAChD,WAAO,YAAY,QAAQ,UAAU,QAAQ,CAAC;AAC9C,WAAO,QAAQ,iBAAiB,OAAO,CAAC;AAGxC,sBAAkB,IAAI,KAAK,iBAAiB,EAAE,KAAK,EAAE,WAAW,iBAAiB,CAAC;AAClF,iBAAa,WAAW,gBAAgB,eAAe;AACvD,WAAO,YAAY,WAAW,WAAW,gBAAgB,SAAS;AAClE,cAAU,WAAW,aAAa,UAAU;AAC5C,WAAO,QAAQ,iBAAiB,OAAO,CAAC;AAAA,EACzC,CAAC;AAED,GAAC,QAAQ,KAAK,OAAO,MAAM,iCAAiC,MAAM;AACjE,UAAM,aAAa,WAAW,aAAa,gCAAgC;AAC3E,WAAO,YAAY,WAAW,QAAQ,QAAQ,kBAAkB;AAEhE,UAAM,UAAU,WAAW,UAAU,gCAAgC;AACrE,WAAO,YAAY,QAAQ,QAAQ,QAAQ,IAAI;AAAA,EAChD,CAAC;AAED,GAAC,QAAQ,KAAK,OAAO,MAAM,sDAAsD,MAAM;AACtF,UAAM,kBAAkB,IAAI,KAAK,iBAAiB,EAAE,KAAK,EAAE,OAAO,WAAW,UAAU,YAAY,CAAC;AACpG,UAAM,aAAa,WAAW,gBAAgB,eAAe;AAC7D,WAAO,YAAY,WAAW,OAAO,EAAE;AACvC,WAAO,YAAY,WAAW,UAAU,EAAE;AAAA,EAC3C,CAAC;AAED,GAAC,QAAQ,KAAK,OAAO,MAAM,oFAAoF,MAAM;AACpH,UAAM,kBAAkB,IAAI,KAAK,iBAAiB,EAAE,KAAK,EAAE,OAAO,WAAW,UAAU,YAAY,CAAC;AACpG,UAAM,aAAa,WAAW,gBAAgB,gBAAgB,KAAK,EAAE,QAAQ,QAAQ,mBAAmB,CAAC,CAAC;AAC1G,WAAO,YAAY,WAAW,OAAO,SAAS;AAC9C,WAAO,YAAY,WAAW,UAAU,WAAW;AAEnD,UAAM,UAAU,WAAW,aAAa,eAAe;AACvD,WAAO,YAAY,QAAQ,OAAO,SAAS;AAC3C,WAAO,YAAY,QAAQ,UAAU,WAAW;AAAA,EACjD,CAAC;AAED,GAAC,QAAQ,KAAK,OAAO,MAAM,mBAAmB,MAAM;AACnD,UAAM,mBAAmB,IAAI,KAAK,iBAAiB,EAAE,KAAK,EAAE,QAAQ,QAAQ,CAAC;AAC7E,UAAM,aAAa,WAAW,gBAAgB,gBAAgB;AAC9D,WAAO,YAAY,iBAAiB,SAAS,GAAG,WAAW,SAAS,CAAC;AAAA,EACtE,CAAC;AAED,OAAK,2BAA2B,MAAM;AACrC,UAAM,oBAAoB,IAAI,KAAK,iBAAiB,EAAE,KAAK,EAAE,QAAQ,QAAQ,aAAa,CAAC;AAC3F,UAAM,aAAa,WAAW,gBAAgB,iBAAiB;AAC/D,WAAO,eAAe,kBAAkB,QAAQ,WAAW,MAAM;AAAA,EAClE,CAAC;AACF,CAAC;",
  "names": []
}
