{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/snapshot.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Lazy } from '../../common/lazy.js';\nimport { FileAccess } from '../../common/network.js';\nimport { URI } from '../../common/uri.js';\n\ndeclare const __readFileInTests: (path: string) => Promise<string>;\ndeclare const __writeFileInTests: (path: string, contents: string) => Promise<void>;\ndeclare const __readDirInTests: (path: string) => Promise<string[]>;\ndeclare const __unlinkInTests: (path: string) => Promise<void>;\ndeclare const __mkdirPInTests: (path: string) => Promise<void>;\n\n// setup on import so assertSnapshot has the current context without explicit passing\nlet context: Lazy<SnapshotContext> | undefined;\nconst sanitizeName = (name: string) => name.replace(/[^a-z0-9_-]/gi, '_');\nconst normalizeCrlf = (str: string) => str.replace(/\\r\\n/g, '\\n');\n\nexport interface ISnapshotOptions {\n\t/** Name for snapshot file, rather than an incremented number */\n\tname?: string;\n\t/** Extension name of the snapshot file, defaults to `.snap` */\n\textension?: string;\n}\n\n/**\n * This is exported only for tests against the snapshotting itself! Use\n * {@link assertSnapshot} as a consumer!\n */\nexport class SnapshotContext {\n\tprivate nextIndex = 0;\n\tprotected snapshotsDir: URI;\n\tprivate readonly namePrefix: string;\n\tprivate readonly usedNames = new Set();\n\n\tconstructor(private readonly test: Mocha.Test | undefined) {\n\t\tif (!test) {\n\t\t\tthrow new Error('assertSnapshot can only be used in a test');\n\t\t}\n\n\t\tif (!test.file) {\n\t\t\tthrow new Error('currentTest.file is not set, please open an issue with the test you\\'re trying to run');\n\t\t}\n\n\t\tconst src = FileAccess.asFileUri('');\n\t\tconst parts = test.file.split(/[/\\\\]/g);\n\n\t\tthis.namePrefix = sanitizeName(test.fullTitle()) + '.';\n\t\tthis.snapshotsDir = URI.joinPath(src, ...[...parts.slice(0, -1), '__snapshots__']);\n\t}\n\n\tpublic async assert(value: any, options?: ISnapshotOptions) {\n\t\tconst originalStack = new Error().stack!; // save to make the stack nicer on failure\n\t\tconst nameOrIndex = (options?.name ? sanitizeName(options.name) : this.nextIndex++);\n\t\tconst fileName = this.namePrefix + nameOrIndex + '.' + (options?.extension || 'snap');\n\t\tthis.usedNames.add(fileName);\n\n\t\tconst fpath = URI.joinPath(this.snapshotsDir, fileName).fsPath;\n\t\tconst actual = formatValue(value);\n\t\tlet expected: string;\n\t\ttry {\n\t\t\texpected = await __readFileInTests(fpath);\n\t\t} catch {\n\t\t\tconsole.info(`Creating new snapshot in: ${fpath}`);\n\t\t\tawait __mkdirPInTests(this.snapshotsDir.fsPath);\n\t\t\tawait __writeFileInTests(fpath, actual);\n\t\t\treturn;\n\t\t}\n\n\t\tif (normalizeCrlf(expected) !== normalizeCrlf(actual)) {\n\t\t\tawait __writeFileInTests(fpath + '.actual', actual);\n\t\t\tconst err: any = new Error(`Snapshot #${nameOrIndex} does not match expected output`);\n\t\t\terr.expected = expected;\n\t\t\terr.actual = actual;\n\t\t\terr.snapshotPath = fpath;\n\t\t\terr.stack = (err.stack as string)\n\t\t\t\t.split('\\n')\n\t\t\t\t// remove all frames from the async stack and keep the original caller's frame\n\t\t\t\t.slice(0, 1)\n\t\t\t\t.concat(originalStack.split('\\n').slice(3))\n\t\t\t\t.join('\\n');\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tpublic async removeOldSnapshots() {\n\t\tconst contents = await __readDirInTests(this.snapshotsDir.fsPath);\n\t\tconst toDelete = contents.filter(f => f.startsWith(this.namePrefix) && !this.usedNames.has(f));\n\t\tif (toDelete.length) {\n\t\t\tconsole.info(`Deleting ${toDelete.length} old snapshots for ${this.test?.fullTitle()}`);\n\t\t}\n\n\t\tawait Promise.all(toDelete.map(f => __unlinkInTests(URI.joinPath(this.snapshotsDir, f).fsPath)));\n\t}\n}\n\nconst debugDescriptionSymbol = Symbol.for('debug.description');\n\nfunction formatValue(value: unknown, level = 0, seen: unknown[] = []): string {\n\tswitch (typeof value) {\n\t\tcase 'bigint':\n\t\tcase 'boolean':\n\t\tcase 'number':\n\t\tcase 'symbol':\n\t\tcase 'undefined':\n\t\t\treturn String(value);\n\t\tcase 'string':\n\t\t\treturn level === 0 ? value : JSON.stringify(value);\n\t\tcase 'function':\n\t\t\treturn `[Function ${value.name}]`;\n\t\tcase 'object': {\n\t\t\tif (value === null) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tif (value instanceof RegExp) {\n\t\t\t\treturn String(value);\n\t\t\t}\n\t\t\tif (seen.includes(value)) {\n\t\t\t\treturn '[Circular]';\n\t\t\t}\n\t\t\tif (debugDescriptionSymbol in value && typeof (value as any)[debugDescriptionSymbol] === 'function') {\n\t\t\t\treturn (value as any)[debugDescriptionSymbol]();\n\t\t\t}\n\t\t\tconst oi = '  '.repeat(level);\n\t\t\tconst ci = '  '.repeat(level + 1);\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tconst children = value.map(v => formatValue(v, level + 1, [...seen, value]));\n\t\t\t\tconst multiline = children.some(c => c.includes('\\n')) || children.join(', ').length > 80;\n\t\t\t\treturn multiline ? `[\\n${ci}${children.join(`,\\n${ci}`)}\\n${oi}]` : `[ ${children.join(', ')} ]`;\n\t\t\t}\n\n\t\t\tlet entries;\n\t\t\tlet prefix = '';\n\t\t\tif (value instanceof Map) {\n\t\t\t\tprefix = 'Map ';\n\t\t\t\tentries = [...value.entries()];\n\t\t\t} else if (value instanceof Set) {\n\t\t\t\tprefix = 'Set ';\n\t\t\t\tentries = [...value.entries()];\n\t\t\t} else {\n\t\t\t\tentries = Object.entries(value);\n\t\t\t}\n\n\t\t\tconst lines = entries.map(([k, v]) => `${k}: ${formatValue(v, level + 1, [...seen, value])}`);\n\t\t\treturn prefix + (lines.length > 1\n\t\t\t\t? `{\\n${ci}${lines.join(`,\\n${ci}`)}\\n${oi}}`\n\t\t\t\t: `{ ${lines.join(',\\n')} }`);\n\t\t}\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown type ${value}`);\n\t}\n}\n\nsetup(function () {\n\tconst currentTest = this.currentTest;\n\tcontext = new Lazy(() => new SnapshotContext(currentTest));\n});\nteardown(async function () {\n\tif (this.currentTest?.state === 'passed') {\n\t\tawait context?.rawValue?.removeOldSnapshots();\n\t}\n\tcontext = undefined;\n});\n\n/**\n * Implements a snapshot testing utility. \u26A0\uFE0F This is async! \u26A0\uFE0F\n *\n * The first time a snapshot test is run, it'll record the value it's called\n * with as the expected value. Subsequent runs will fail if the value differs,\n * but the snapshot can be regenerated by hand or using the Selfhost Test\n * Provider Extension which'll offer to update it.\n *\n * The snapshot will be associated with the currently running test and stored\n * in a `__snapshots__` directory next to the test file, which is expected to\n * be the first `.test.js` file in the callstack.\n */\nexport function assertSnapshot(value: any, options?: ISnapshotOptions): Promise<void> {\n\tif (!context) {\n\t\tthrow new Error('assertSnapshot can only be used in a test');\n\t}\n\n\treturn context.value.assert(value, options);\n}\n"],
  "mappings": "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",
  "names": []
}
