import t from"assert";import*as l from"../../common/collections.js";import{ensureNoDisposablesAreLeakedInTestSuite as c}from"./utils.js";suite("Collections",()=>{c(),test("groupBy",()=>{const e="a",a="b",u=[{key:e,value:1},{key:e,value:2},{key:a,value:3}],o=l.groupBy(u,i=>i.key);t.strictEqual(o[e].length,2),t.strictEqual(o[e][0].value,1),t.strictEqual(o[e][1].value,2),t.strictEqual(o[a].length,1),t.strictEqual(o[a][0].value,3)}),suite("SetWithKey",()=>{let e;const a=["a","b","c"].map(s=>({someProp:s}));setup(()=>{e=new l.SetWithKey(a,s=>s.someProp)}),test("size",()=>{t.strictEqual(e.size,3)}),test("add",()=>{e.add({someProp:"d"}),t.strictEqual(e.size,4),t.strictEqual(e.has({someProp:"d"}),!0)}),test("delete",()=>{t.strictEqual(e.has({someProp:"b"}),!0),e.delete({someProp:"b"}),t.strictEqual(e.size,2),t.strictEqual(e.has({someProp:"b"}),!1)}),test("has",()=>{t.strictEqual(e.has({someProp:"a"}),!0),t.strictEqual(e.has({someProp:"b"}),!0)}),test("entries",()=>{const s=Array.from(e.entries());t.deepStrictEqual(s,a.map(r=>[r,r]))}),test("keys and values",()=>{const s=Array.from(e.keys()),r=Array.from(e.values());t.deepStrictEqual(s,a),t.deepStrictEqual(r,a)}),test("clear",()=>{e.clear(),t.strictEqual(e.size,0)}),test("forEach",()=>{const s=[];e.forEach(r=>s.push(r)),t.deepStrictEqual(s,a)}),test("iterator",()=>{const s=[];for(const r of e)s.push(r);t.deepStrictEqual(s,a)}),test("toStringTag",()=>{t.strictEqual(e[Symbol.toStringTag],"SetWithKey")})})});
