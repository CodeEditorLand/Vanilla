{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/path.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/tree/43dd49c9782848c25e5b03448c8a0f923f13c158\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport assert from 'assert';\nimport * as path from '../../common/path.js';\nimport { isWeb, isWindows } from '../../common/platform.js';\nimport * as process from '../../common/process.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('Paths (Node Implementation)', () => {\n\tconst __filename = 'path.test.js';\n\tensureNoDisposablesAreLeakedInTestSuite();\n\ttest('join', () => {\n\t\tconst failures = [] as string[];\n\t\tconst backslashRE = /\\\\/g;\n\n\t\tconst joinTests: any = [\n\t\t\t[[path.posix.join, path.win32.join],\n\t\t\t// arguments                     result\n\t\t\t[[['.', 'x/b', '..', '/b/c.js'], 'x/b/c.js'],\n\t\t\t[[], '.'],\n\t\t\t[['/.', 'x/b', '..', '/b/c.js'], '/x/b/c.js'],\n\t\t\t[['/foo', '../../../bar'], '/bar'],\n\t\t\t[['foo', '../../../bar'], '../../bar'],\n\t\t\t[['foo/', '../../../bar'], '../../bar'],\n\t\t\t[['foo/x', '../../../bar'], '../bar'],\n\t\t\t[['foo/x', './bar'], 'foo/x/bar'],\n\t\t\t[['foo/x/', './bar'], 'foo/x/bar'],\n\t\t\t[['foo/x/', '.', 'bar'], 'foo/x/bar'],\n\t\t\t[['./'], './'],\n\t\t\t[['.', './'], './'],\n\t\t\t[['.', '.', '.'], '.'],\n\t\t\t[['.', './', '.'], '.'],\n\t\t\t[['.', '/./', '.'], '.'],\n\t\t\t[['.', '/////./', '.'], '.'],\n\t\t\t[['.'], '.'],\n\t\t\t[['', '.'], '.'],\n\t\t\t[['', 'foo'], 'foo'],\n\t\t\t[['foo', '/bar'], 'foo/bar'],\n\t\t\t[['', '/foo'], '/foo'],\n\t\t\t[['', '', '/foo'], '/foo'],\n\t\t\t[['', '', 'foo'], 'foo'],\n\t\t\t[['foo', ''], 'foo'],\n\t\t\t[['foo/', ''], 'foo/'],\n\t\t\t[['foo', '', '/bar'], 'foo/bar'],\n\t\t\t[['./', '..', '/foo'], '../foo'],\n\t\t\t[['./', '..', '..', '/foo'], '../../foo'],\n\t\t\t[['.', '..', '..', '/foo'], '../../foo'],\n\t\t\t[['', '..', '..', '/foo'], '../../foo'],\n\t\t\t[['/'], '/'],\n\t\t\t[['/', '.'], '/'],\n\t\t\t[['/', '..'], '/'],\n\t\t\t[['/', '..', '..'], '/'],\n\t\t\t[[''], '.'],\n\t\t\t[['', ''], '.'],\n\t\t\t[[' /foo'], ' /foo'],\n\t\t\t[[' ', 'foo'], ' /foo'],\n\t\t\t[[' ', '.'], ' '],\n\t\t\t[[' ', '/'], ' /'],\n\t\t\t[[' ', ''], ' '],\n\t\t\t[['/', 'foo'], '/foo'],\n\t\t\t[['/', '/foo'], '/foo'],\n\t\t\t[['/', '//foo'], '/foo'],\n\t\t\t[['/', '', '/foo'], '/foo'],\n\t\t\t[['', '/', 'foo'], '/foo'],\n\t\t\t[['', '/', '/foo'], '/foo']\n\t\t\t]\n\t\t\t]\n\t\t];\n\n\t\t// Windows-specific join tests\n\t\tjoinTests.push([\n\t\t\tpath.win32.join,\n\t\t\tjoinTests[0][1].slice(0).concat(\n\t\t\t\t[// arguments                     result\n\t\t\t\t\t// UNC path expected\n\t\t\t\t\t[['//foo/bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t[['\\\\/foo/bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t[['\\\\\\\\foo/bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t// UNC path expected - server and share separate\n\t\t\t\t\t[['//foo', 'bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t[['//foo/', 'bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t[['//foo', '/bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t// UNC path expected - questionable\n\t\t\t\t\t[['//foo', '', 'bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t[['//foo/', '', 'bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t[['//foo/', '', '/bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t// UNC path expected - even more questionable\n\t\t\t\t\t[['', '//foo', 'bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t[['', '//foo/', 'bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t[['', '//foo/', '/bar'], '\\\\\\\\foo\\\\bar\\\\'],\n\t\t\t\t\t// No UNC path expected (no double slash in first component)\n\t\t\t\t\t[['\\\\', 'foo/bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t[['\\\\', '/foo/bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t[['', '/', '/foo/bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t// No UNC path expected (no non-slashes in first component -\n\t\t\t\t\t// questionable)\n\t\t\t\t\t[['//', 'foo/bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t[['//', '/foo/bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t[['\\\\\\\\', '/', '/foo/bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t[['//'], '\\\\'],\n\t\t\t\t\t// No UNC path expected (share name missing - questionable).\n\t\t\t\t\t[['//foo'], '\\\\foo'],\n\t\t\t\t\t[['//foo/'], '\\\\foo\\\\'],\n\t\t\t\t\t[['//foo', '/'], '\\\\foo\\\\'],\n\t\t\t\t\t[['//foo', '', '/'], '\\\\foo\\\\'],\n\t\t\t\t\t// No UNC path expected (too many leading slashes - questionable)\n\t\t\t\t\t[['///foo/bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t[['////foo', 'bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t[['\\\\\\\\\\\\/foo/bar'], '\\\\foo\\\\bar'],\n\t\t\t\t\t// Drive-relative vs drive-absolute paths. This merely describes the\n\t\t\t\t\t// status quo, rather than being obviously right\n\t\t\t\t\t[['c:'], 'c:.'],\n\t\t\t\t\t[['c:.'], 'c:.'],\n\t\t\t\t\t[['c:', ''], 'c:.'],\n\t\t\t\t\t[['', 'c:'], 'c:.'],\n\t\t\t\t\t[['c:.', '/'], 'c:.\\\\'],\n\t\t\t\t\t[['c:.', 'file'], 'c:file'],\n\t\t\t\t\t[['c:', '/'], 'c:\\\\'],\n\t\t\t\t\t[['c:', 'file'], 'c:\\\\file']\n\t\t\t\t]\n\t\t\t)\n\t\t]);\n\t\tjoinTests.forEach((test: any[]) => {\n\t\t\tif (!Array.isArray(test[0])) {\n\t\t\t\ttest[0] = [test[0]];\n\t\t\t}\n\t\t\ttest[0].forEach((join: any) => {\n\t\t\t\ttest[1].forEach((test: any) => {\n\t\t\t\t\tconst actual = join.apply(null, test[0]);\n\t\t\t\t\tconst expected = test[1];\n\t\t\t\t\t// For non-Windows specific tests with the Windows join(), we need to try\n\t\t\t\t\t// replacing the slashes since the non-Windows specific tests' `expected`\n\t\t\t\t\t// use forward slashes\n\t\t\t\t\tlet actualAlt;\n\t\t\t\t\tlet os;\n\t\t\t\t\tif (join === path.win32.join) {\n\t\t\t\t\t\tactualAlt = actual.replace(backslashRE, '/');\n\t\t\t\t\t\tos = 'win32';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tos = 'posix';\n\t\t\t\t\t}\n\t\t\t\t\tconst message =\n\t\t\t\t\t\t`path.${os}.join(${test[0].map(JSON.stringify).join(',')})\\n  expect=${JSON.stringify(expected)}\\n  actual=${JSON.stringify(actual)}`;\n\t\t\t\t\tif (actual !== expected && actualAlt !== expected) {\n\t\t\t\t\t\tfailures.push(`\\n${message}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tassert.strictEqual(failures.length, 0, failures.join(''));\n\t});\n\n\ttest('dirname', () => {\n\t\tassert.strictEqual(path.posix.dirname('/a/b/'), '/a');\n\t\tassert.strictEqual(path.posix.dirname('/a/b'), '/a');\n\t\tassert.strictEqual(path.posix.dirname('/a'), '/');\n\t\tassert.strictEqual(path.posix.dirname(''), '.');\n\t\tassert.strictEqual(path.posix.dirname('/'), '/');\n\t\tassert.strictEqual(path.posix.dirname('////'), '/');\n\t\tassert.strictEqual(path.posix.dirname('//a'), '//');\n\t\tassert.strictEqual(path.posix.dirname('foo'), '.');\n\n\t\tassert.strictEqual(path.win32.dirname('c:\\\\'), 'c:\\\\');\n\t\tassert.strictEqual(path.win32.dirname('c:\\\\foo'), 'c:\\\\');\n\t\tassert.strictEqual(path.win32.dirname('c:\\\\foo\\\\'), 'c:\\\\');\n\t\tassert.strictEqual(path.win32.dirname('c:\\\\foo\\\\bar'), 'c:\\\\foo');\n\t\tassert.strictEqual(path.win32.dirname('c:\\\\foo\\\\bar\\\\'), 'c:\\\\foo');\n\t\tassert.strictEqual(path.win32.dirname('c:\\\\foo\\\\bar\\\\baz'), 'c:\\\\foo\\\\bar');\n\t\tassert.strictEqual(path.win32.dirname('\\\\'), '\\\\');\n\t\tassert.strictEqual(path.win32.dirname('\\\\foo'), '\\\\');\n\t\tassert.strictEqual(path.win32.dirname('\\\\foo\\\\'), '\\\\');\n\t\tassert.strictEqual(path.win32.dirname('\\\\foo\\\\bar'), '\\\\foo');\n\t\tassert.strictEqual(path.win32.dirname('\\\\foo\\\\bar\\\\'), '\\\\foo');\n\t\tassert.strictEqual(path.win32.dirname('\\\\foo\\\\bar\\\\baz'), '\\\\foo\\\\bar');\n\t\tassert.strictEqual(path.win32.dirname('c:'), 'c:');\n\t\tassert.strictEqual(path.win32.dirname('c:foo'), 'c:');\n\t\tassert.strictEqual(path.win32.dirname('c:foo\\\\'), 'c:');\n\t\tassert.strictEqual(path.win32.dirname('c:foo\\\\bar'), 'c:foo');\n\t\tassert.strictEqual(path.win32.dirname('c:foo\\\\bar\\\\'), 'c:foo');\n\t\tassert.strictEqual(path.win32.dirname('c:foo\\\\bar\\\\baz'), 'c:foo\\\\bar');\n\t\tassert.strictEqual(path.win32.dirname('file:stream'), '.');\n\t\tassert.strictEqual(path.win32.dirname('dir\\\\file:stream'), 'dir');\n\t\tassert.strictEqual(path.win32.dirname('\\\\\\\\unc\\\\share'),\n\t\t\t'\\\\\\\\unc\\\\share');\n\t\tassert.strictEqual(path.win32.dirname('\\\\\\\\unc\\\\share\\\\foo'),\n\t\t\t'\\\\\\\\unc\\\\share\\\\');\n\t\tassert.strictEqual(path.win32.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\'),\n\t\t\t'\\\\\\\\unc\\\\share\\\\');\n\t\tassert.strictEqual(path.win32.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar'),\n\t\t\t'\\\\\\\\unc\\\\share\\\\foo');\n\t\tassert.strictEqual(path.win32.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar\\\\'),\n\t\t\t'\\\\\\\\unc\\\\share\\\\foo');\n\t\tassert.strictEqual(path.win32.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar\\\\baz'),\n\t\t\t'\\\\\\\\unc\\\\share\\\\foo\\\\bar');\n\t\tassert.strictEqual(path.win32.dirname('/a/b/'), '/a');\n\t\tassert.strictEqual(path.win32.dirname('/a/b'), '/a');\n\t\tassert.strictEqual(path.win32.dirname('/a'), '/');\n\t\tassert.strictEqual(path.win32.dirname(''), '.');\n\t\tassert.strictEqual(path.win32.dirname('/'), '/');\n\t\tassert.strictEqual(path.win32.dirname('////'), '/');\n\t\tassert.strictEqual(path.win32.dirname('foo'), '.');\n\n\t\t// Tests from VSCode\n\n\t\tfunction assertDirname(p: string, expected: string, win = false) {\n\t\t\tconst actual = win ? path.win32.dirname(p) : path.posix.dirname(p);\n\n\t\t\tif (actual !== expected) {\n\t\t\t\tassert.fail(`${p}: expected: ${expected}, ours: ${actual}`);\n\t\t\t}\n\t\t}\n\n\t\tassertDirname('foo/bar', 'foo');\n\t\tassertDirname('foo\\\\bar', 'foo', true);\n\t\tassertDirname('/foo/bar', '/foo');\n\t\tassertDirname('\\\\foo\\\\bar', '\\\\foo', true);\n\t\tassertDirname('/foo', '/');\n\t\tassertDirname('\\\\foo', '\\\\', true);\n\t\tassertDirname('/', '/');\n\t\tassertDirname('\\\\', '\\\\', true);\n\t\tassertDirname('foo', '.');\n\t\tassertDirname('f', '.');\n\t\tassertDirname('f/', '.');\n\t\tassertDirname('/folder/', '/');\n\t\tassertDirname('c:\\\\some\\\\file.txt', 'c:\\\\some', true);\n\t\tassertDirname('c:\\\\some', 'c:\\\\', true);\n\t\tassertDirname('c:\\\\', 'c:\\\\', true);\n\t\tassertDirname('c:', 'c:', true);\n\t\tassertDirname('\\\\\\\\server\\\\share\\\\some\\\\path', '\\\\\\\\server\\\\share\\\\some', true);\n\t\tassertDirname('\\\\\\\\server\\\\share\\\\some', '\\\\\\\\server\\\\share\\\\', true);\n\t\tassertDirname('\\\\\\\\server\\\\share\\\\', '\\\\\\\\server\\\\share\\\\', true);\n\t});\n\n\ttest('extname', () => {\n\t\tconst failures = [] as string[];\n\t\tconst slashRE = /\\//g;\n\n\t\t[\n\t\t\t[__filename, '.js'],\n\t\t\t['', ''],\n\t\t\t['/path/to/file', ''],\n\t\t\t['/path/to/file.ext', '.ext'],\n\t\t\t['/path.to/file.ext', '.ext'],\n\t\t\t['/path.to/file', ''],\n\t\t\t['/path.to/.file', ''],\n\t\t\t['/path.to/.file.ext', '.ext'],\n\t\t\t['/path/to/f.ext', '.ext'],\n\t\t\t['/path/to/..ext', '.ext'],\n\t\t\t['/path/to/..', ''],\n\t\t\t['file', ''],\n\t\t\t['file.ext', '.ext'],\n\t\t\t['.file', ''],\n\t\t\t['.file.ext', '.ext'],\n\t\t\t['/file', ''],\n\t\t\t['/file.ext', '.ext'],\n\t\t\t['/.file', ''],\n\t\t\t['/.file.ext', '.ext'],\n\t\t\t['.path/file.ext', '.ext'],\n\t\t\t['file.ext.ext', '.ext'],\n\t\t\t['file.', '.'],\n\t\t\t['.', ''],\n\t\t\t['./', ''],\n\t\t\t['.file.ext', '.ext'],\n\t\t\t['.file', ''],\n\t\t\t['.file.', '.'],\n\t\t\t['.file..', '.'],\n\t\t\t['..', ''],\n\t\t\t['../', ''],\n\t\t\t['..file.ext', '.ext'],\n\t\t\t['..file', '.file'],\n\t\t\t['..file.', '.'],\n\t\t\t['..file..', '.'],\n\t\t\t['...', '.'],\n\t\t\t['...ext', '.ext'],\n\t\t\t['....', '.'],\n\t\t\t['file.ext/', '.ext'],\n\t\t\t['file.ext//', '.ext'],\n\t\t\t['file/', ''],\n\t\t\t['file//', ''],\n\t\t\t['file./', '.'],\n\t\t\t['file.//', '.'],\n\t\t].forEach((test) => {\n\t\t\tconst expected = test[1];\n\t\t\t[path.posix.extname, path.win32.extname].forEach((extname) => {\n\t\t\t\tlet input = test[0];\n\t\t\t\tlet os;\n\t\t\t\tif (extname === path.win32.extname) {\n\t\t\t\t\tinput = input.replace(slashRE, '\\\\');\n\t\t\t\t\tos = 'win32';\n\t\t\t\t} else {\n\t\t\t\t\tos = 'posix';\n\t\t\t\t}\n\t\t\t\tconst actual = extname(input);\n\t\t\t\tconst message = `path.${os}.extname(${JSON.stringify(input)})\\n  expect=${JSON.stringify(expected)}\\n  actual=${JSON.stringify(actual)}`;\n\t\t\t\tif (actual !== expected) {\n\t\t\t\t\tfailures.push(`\\n${message}`);\n\t\t\t\t}\n\t\t\t});\n\t\t\t{\n\t\t\t\tconst input = `C:${test[0].replace(slashRE, '\\\\')}`;\n\t\t\t\tconst actual = path.win32.extname(input);\n\t\t\t\tconst message = `path.win32.extname(${JSON.stringify(input)})\\n  expect=${JSON.stringify(expected)}\\n  actual=${JSON.stringify(actual)}`;\n\t\t\t\tif (actual !== expected) {\n\t\t\t\t\tfailures.push(`\\n${message}`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(failures.length, 0, failures.join(''));\n\n\t\t// On Windows, backslash is a path separator.\n\t\tassert.strictEqual(path.win32.extname('.\\\\'), '');\n\t\tassert.strictEqual(path.win32.extname('..\\\\'), '');\n\t\tassert.strictEqual(path.win32.extname('file.ext\\\\'), '.ext');\n\t\tassert.strictEqual(path.win32.extname('file.ext\\\\\\\\'), '.ext');\n\t\tassert.strictEqual(path.win32.extname('file\\\\'), '');\n\t\tassert.strictEqual(path.win32.extname('file\\\\\\\\'), '');\n\t\tassert.strictEqual(path.win32.extname('file.\\\\'), '.');\n\t\tassert.strictEqual(path.win32.extname('file.\\\\\\\\'), '.');\n\n\t\t// On *nix, backslash is a valid name component like any other character.\n\t\tassert.strictEqual(path.posix.extname('.\\\\'), '');\n\t\tassert.strictEqual(path.posix.extname('..\\\\'), '.\\\\');\n\t\tassert.strictEqual(path.posix.extname('file.ext\\\\'), '.ext\\\\');\n\t\tassert.strictEqual(path.posix.extname('file.ext\\\\\\\\'), '.ext\\\\\\\\');\n\t\tassert.strictEqual(path.posix.extname('file\\\\'), '');\n\t\tassert.strictEqual(path.posix.extname('file\\\\\\\\'), '');\n\t\tassert.strictEqual(path.posix.extname('file.\\\\'), '.\\\\');\n\t\tassert.strictEqual(path.posix.extname('file.\\\\\\\\'), '.\\\\\\\\');\n\n\t\t// Tests from VSCode\n\t\tassert.strictEqual(path.extname('far.boo'), '.boo');\n\t\tassert.strictEqual(path.extname('far.b'), '.b');\n\t\tassert.strictEqual(path.extname('far.'), '.');\n\t\tassert.strictEqual(path.extname('far.boo/boo.far'), '.far');\n\t\tassert.strictEqual(path.extname('far.boo/boo'), '');\n\t});\n\n\ttest('resolve', () => {\n\t\tconst failures = [] as string[];\n\t\tconst slashRE = /\\//g;\n\t\tconst backslashRE = /\\\\/g;\n\n\t\tconst resolveTests = [\n\t\t\t[path.win32.resolve,\n\t\t\t// arguments                               result\n\t\t\t[[['c:/blah\\\\blah', 'd:/games', 'c:../a'], 'c:\\\\blah\\\\a'],\n\t\t\t[['c:/ignore', 'd:\\\\a/b\\\\c/d', '\\\\e.exe'], 'd:\\\\e.exe'],\n\t\t\t[['c:/ignore', 'c:/some/file'], 'c:\\\\some\\\\file'],\n\t\t\t[['d:/ignore', 'd:some/dir//'], 'd:\\\\ignore\\\\some\\\\dir'],\n\t\t\t[['//server/share', '..', 'relative\\\\'], '\\\\\\\\server\\\\share\\\\relative'],\n\t\t\t[['c:/', '//'], 'c:\\\\'],\n\t\t\t[['c:/', '//dir'], 'c:\\\\dir'],\n\t\t\t[['c:/', '//server/share'], '\\\\\\\\server\\\\share\\\\'],\n\t\t\t[['c:/', '//server//share'], '\\\\\\\\server\\\\share\\\\'],\n\t\t\t[['c:/', '///some//dir'], 'c:\\\\some\\\\dir'],\n\t\t\t[['C:\\\\foo\\\\tmp.3\\\\', '..\\\\tmp.3\\\\cycles\\\\root.js'],\n\t\t\t\t'C:\\\\foo\\\\tmp.3\\\\cycles\\\\root.js']\n\t\t\t]\n\t\t\t],\n\t\t\t[path.posix.resolve,\n\t\t\t// arguments                    result\n\t\t\t[[['/var/lib', '../', 'file/'], '/var/file'],\n\t\t\t[['/var/lib', '/../', 'file/'], '/file'],\n\t\t\t[['/some/dir', '.', '/absolute/'], '/absolute'],\n\t\t\t[['/foo/tmp.3/', '../tmp.3/cycles/root.js'], '/foo/tmp.3/cycles/root.js']\n\t\t\t]\n\t\t\t],\n\t\t\t[(isWeb ? path.posix.resolve : path.resolve),\n\t\t\t// arguments\t\t\t\t\t\tresult\n\t\t\t[[['.'], process.cwd()],\n\t\t\t[['a/b/c', '../../..'], process.cwd()]\n\t\t\t]\n\t\t\t],\n\t\t];\n\t\tresolveTests.forEach((test) => {\n\t\t\tconst resolve = test[0];\n\t\t\t//@ts-expect-error\n\t\t\ttest[1].forEach((test) => {\n\t\t\t\t//@ts-expect-error\n\t\t\t\tconst actual = resolve.apply(null, test[0]);\n\t\t\t\tlet actualAlt;\n\t\t\t\tconst os = resolve === path.win32.resolve ? 'win32' : 'posix';\n\t\t\t\tif (resolve === path.win32.resolve && !isWindows) {\n\t\t\t\t\tactualAlt = actual.replace(backslashRE, '/');\n\t\t\t\t}\n\t\t\t\telse if (resolve !== path.win32.resolve && isWindows) {\n\t\t\t\t\tactualAlt = actual.replace(slashRE, '\\\\');\n\t\t\t\t}\n\n\t\t\t\tconst expected = test[1];\n\t\t\t\tconst message =\n\t\t\t\t\t`path.${os}.resolve(${test[0].map(JSON.stringify).join(',')})\\n  expect=${JSON.stringify(expected)}\\n  actual=${JSON.stringify(actual)}`;\n\t\t\t\tif (actual !== expected && actualAlt !== expected) {\n\t\t\t\t\tfailures.push(`\\n${message}`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tassert.strictEqual(failures.length, 0, failures.join(''));\n\n\t\t// if (isWindows) {\n\t\t// \t// Test resolving the current Windows drive letter from a spawned process.\n\t\t// \t// See https://github.com/nodejs/node/issues/7215\n\t\t// \tconst currentDriveLetter = path.parse(process.cwd()).root.substring(0, 2);\n\t\t// \tconst resolveFixture = fixtures.path('path-resolve.js');\n\t\t// \tconst spawnResult = child.spawnSync(\n\t\t// \t\tprocess.argv[0], [resolveFixture, currentDriveLetter]);\n\t\t// \tconst resolvedPath = spawnResult.stdout.toString().trim();\n\t\t// \tassert.strictEqual(resolvedPath.toLowerCase(), process.cwd().toLowerCase());\n\t\t// }\n\t});\n\n\ttest('basename', () => {\n\t\tassert.strictEqual(path.basename(__filename), 'path.test.js');\n\t\tassert.strictEqual(path.basename(__filename, '.js'), 'path.test');\n\t\tassert.strictEqual(path.basename('.js', '.js'), '');\n\t\tassert.strictEqual(path.basename(''), '');\n\t\tassert.strictEqual(path.basename('/dir/basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.basename('/basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.basename('basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.basename('basename.ext/'), 'basename.ext');\n\t\tassert.strictEqual(path.basename('basename.ext//'), 'basename.ext');\n\t\tassert.strictEqual(path.basename('aaa/bbb', '/bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('aaa/bbb', 'a/bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('aaa/bbb', 'bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('aaa/bbb//', 'bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('aaa/bbb', 'bb'), 'b');\n\t\tassert.strictEqual(path.basename('aaa/bbb', 'b'), 'bb');\n\t\tassert.strictEqual(path.basename('/aaa/bbb', '/bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('/aaa/bbb', 'a/bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('/aaa/bbb', 'bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('/aaa/bbb//', 'bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('/aaa/bbb', 'bb'), 'b');\n\t\tassert.strictEqual(path.basename('/aaa/bbb', 'b'), 'bb');\n\t\tassert.strictEqual(path.basename('/aaa/bbb'), 'bbb');\n\t\tassert.strictEqual(path.basename('/aaa/'), 'aaa');\n\t\tassert.strictEqual(path.basename('/aaa/b'), 'b');\n\t\tassert.strictEqual(path.basename('/a/b'), 'b');\n\t\tassert.strictEqual(path.basename('//a'), 'a');\n\t\tassert.strictEqual(path.basename('a', 'a'), '');\n\n\t\t// On Windows a backslash acts as a path separator.\n\t\tassert.strictEqual(path.win32.basename('\\\\dir\\\\basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('\\\\basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('basename.ext\\\\'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('basename.ext\\\\\\\\'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('foo'), 'foo');\n\t\tassert.strictEqual(path.win32.basename('aaa\\\\bbb', '\\\\bbb'), 'bbb');\n\t\tassert.strictEqual(path.win32.basename('aaa\\\\bbb', 'a\\\\bbb'), 'bbb');\n\t\tassert.strictEqual(path.win32.basename('aaa\\\\bbb', 'bbb'), 'bbb');\n\t\tassert.strictEqual(path.win32.basename('aaa\\\\bbb\\\\\\\\\\\\\\\\', 'bbb'), 'bbb');\n\t\tassert.strictEqual(path.win32.basename('aaa\\\\bbb', 'bb'), 'b');\n\t\tassert.strictEqual(path.win32.basename('aaa\\\\bbb', 'b'), 'bb');\n\t\tassert.strictEqual(path.win32.basename('C:'), '');\n\t\tassert.strictEqual(path.win32.basename('C:.'), '.');\n\t\tassert.strictEqual(path.win32.basename('C:\\\\'), '');\n\t\tassert.strictEqual(path.win32.basename('C:\\\\dir\\\\base.ext'), 'base.ext');\n\t\tassert.strictEqual(path.win32.basename('C:\\\\basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('C:basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('C:basename.ext\\\\'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('C:basename.ext\\\\\\\\'), 'basename.ext');\n\t\tassert.strictEqual(path.win32.basename('C:foo'), 'foo');\n\t\tassert.strictEqual(path.win32.basename('file:stream'), 'file:stream');\n\t\tassert.strictEqual(path.win32.basename('a', 'a'), '');\n\n\t\t// On unix a backslash is just treated as any other character.\n\t\tassert.strictEqual(path.posix.basename('\\\\dir\\\\basename.ext'),\n\t\t\t'\\\\dir\\\\basename.ext');\n\t\tassert.strictEqual(path.posix.basename('\\\\basename.ext'), '\\\\basename.ext');\n\t\tassert.strictEqual(path.posix.basename('basename.ext'), 'basename.ext');\n\t\tassert.strictEqual(path.posix.basename('basename.ext\\\\'), 'basename.ext\\\\');\n\t\tassert.strictEqual(path.posix.basename('basename.ext\\\\\\\\'), 'basename.ext\\\\\\\\');\n\t\tassert.strictEqual(path.posix.basename('foo'), 'foo');\n\n\t\t// POSIX filenames may include control characters\n\t\t// c.f. http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html\n\t\tconst controlCharFilename = `Icon${String.fromCharCode(13)}`;\n\t\tassert.strictEqual(path.posix.basename(`/a/b/${controlCharFilename}`),\n\t\t\tcontrolCharFilename);\n\n\t\t// Tests from VSCode\n\t\tassert.strictEqual(path.basename('foo/bar'), 'bar');\n\t\tassert.strictEqual(path.posix.basename('foo\\\\bar'), 'foo\\\\bar');\n\t\tassert.strictEqual(path.win32.basename('foo\\\\bar'), 'bar');\n\t\tassert.strictEqual(path.basename('/foo/bar'), 'bar');\n\t\tassert.strictEqual(path.posix.basename('\\\\foo\\\\bar'), '\\\\foo\\\\bar');\n\t\tassert.strictEqual(path.win32.basename('\\\\foo\\\\bar'), 'bar');\n\t\tassert.strictEqual(path.basename('./bar'), 'bar');\n\t\tassert.strictEqual(path.posix.basename('.\\\\bar'), '.\\\\bar');\n\t\tassert.strictEqual(path.win32.basename('.\\\\bar'), 'bar');\n\t\tassert.strictEqual(path.basename('/bar'), 'bar');\n\t\tassert.strictEqual(path.posix.basename('\\\\bar'), '\\\\bar');\n\t\tassert.strictEqual(path.win32.basename('\\\\bar'), 'bar');\n\t\tassert.strictEqual(path.basename('bar/'), 'bar');\n\t\tassert.strictEqual(path.posix.basename('bar\\\\'), 'bar\\\\');\n\t\tassert.strictEqual(path.win32.basename('bar\\\\'), 'bar');\n\t\tassert.strictEqual(path.basename('bar'), 'bar');\n\t\tassert.strictEqual(path.basename('////////'), '');\n\t\tassert.strictEqual(path.posix.basename('\\\\\\\\\\\\\\\\'), '\\\\\\\\\\\\\\\\');\n\t\tassert.strictEqual(path.win32.basename('\\\\\\\\\\\\\\\\'), '');\n\t});\n\n\ttest('relative', () => {\n\t\tconst failures = [] as string[];\n\n\t\tconst relativeTests = [\n\t\t\t[path.win32.relative,\n\t\t\t// arguments                     result\n\t\t\t[['c:/blah\\\\blah', 'd:/games', 'd:\\\\games'],\n\t\t\t['c:/aaaa/bbbb', 'c:/aaaa', '..'],\n\t\t\t['c:/aaaa/bbbb', 'c:/cccc', '..\\\\..\\\\cccc'],\n\t\t\t['c:/aaaa/bbbb', 'c:/aaaa/bbbb', ''],\n\t\t\t['c:/aaaa/bbbb', 'c:/aaaa/cccc', '..\\\\cccc'],\n\t\t\t['c:/aaaa/', 'c:/aaaa/cccc', 'cccc'],\n\t\t\t['c:/', 'c:\\\\aaaa\\\\bbbb', 'aaaa\\\\bbbb'],\n\t\t\t['c:/aaaa/bbbb', 'd:\\\\', 'd:\\\\'],\n\t\t\t['c:/AaAa/bbbb', 'c:/aaaa/bbbb', ''],\n\t\t\t['c:/aaaaa/', 'c:/aaaa/cccc', '..\\\\aaaa\\\\cccc'],\n\t\t\t['C:\\\\foo\\\\bar\\\\baz\\\\quux', 'C:\\\\', '..\\\\..\\\\..\\\\..'],\n\t\t\t['C:\\\\foo\\\\test', 'C:\\\\foo\\\\test\\\\bar\\\\package.json', 'bar\\\\package.json'],\n\t\t\t['C:\\\\foo\\\\bar\\\\baz-quux', 'C:\\\\foo\\\\bar\\\\baz', '..\\\\baz'],\n\t\t\t['C:\\\\foo\\\\bar\\\\baz', 'C:\\\\foo\\\\bar\\\\baz-quux', '..\\\\baz-quux'],\n\t\t\t['\\\\\\\\foo\\\\bar', '\\\\\\\\foo\\\\bar\\\\baz', 'baz'],\n\t\t\t['\\\\\\\\foo\\\\bar\\\\baz', '\\\\\\\\foo\\\\bar', '..'],\n\t\t\t['\\\\\\\\foo\\\\bar\\\\baz-quux', '\\\\\\\\foo\\\\bar\\\\baz', '..\\\\baz'],\n\t\t\t['\\\\\\\\foo\\\\bar\\\\baz', '\\\\\\\\foo\\\\bar\\\\baz-quux', '..\\\\baz-quux'],\n\t\t\t['C:\\\\baz-quux', 'C:\\\\baz', '..\\\\baz'],\n\t\t\t['C:\\\\baz', 'C:\\\\baz-quux', '..\\\\baz-quux'],\n\t\t\t['\\\\\\\\foo\\\\baz-quux', '\\\\\\\\foo\\\\baz', '..\\\\baz'],\n\t\t\t['\\\\\\\\foo\\\\baz', '\\\\\\\\foo\\\\baz-quux', '..\\\\baz-quux'],\n\t\t\t['C:\\\\baz', '\\\\\\\\foo\\\\bar\\\\baz', '\\\\\\\\foo\\\\bar\\\\baz'],\n\t\t\t['\\\\\\\\foo\\\\bar\\\\baz', 'C:\\\\baz', 'C:\\\\baz']\n\t\t\t]\n\t\t\t],\n\t\t\t[path.posix.relative,\n\t\t\t// arguments          result\n\t\t\t[['/var/lib', '/var', '..'],\n\t\t\t['/var/lib', '/bin', '../../bin'],\n\t\t\t['/var/lib', '/var/lib', ''],\n\t\t\t['/var/lib', '/var/apache', '../apache'],\n\t\t\t['/var/', '/var/lib', 'lib'],\n\t\t\t['/', '/var/lib', 'var/lib'],\n\t\t\t['/foo/test', '/foo/test/bar/package.json', 'bar/package.json'],\n\t\t\t['/Users/a/web/b/test/mails', '/Users/a/web/b', '../..'],\n\t\t\t['/foo/bar/baz-quux', '/foo/bar/baz', '../baz'],\n\t\t\t['/foo/bar/baz', '/foo/bar/baz-quux', '../baz-quux'],\n\t\t\t['/baz-quux', '/baz', '../baz'],\n\t\t\t['/baz', '/baz-quux', '../baz-quux']\n\t\t\t]\n\t\t\t]\n\t\t];\n\t\trelativeTests.forEach((test) => {\n\t\t\tconst relative = test[0];\n\t\t\t//@ts-expect-error\n\t\t\ttest[1].forEach((test) => {\n\t\t\t\t//@ts-expect-error\n\t\t\t\tconst actual = relative(test[0], test[1]);\n\t\t\t\tconst expected = test[2];\n\t\t\t\tconst os = relative === path.win32.relative ? 'win32' : 'posix';\n\t\t\t\tconst message = `path.${os}.relative(${test.slice(0, 2).map(JSON.stringify).join(',')})\\n  expect=${JSON.stringify(expected)}\\n  actual=${JSON.stringify(actual)}`;\n\t\t\t\tif (actual !== expected) {\n\t\t\t\t\tfailures.push(`\\n${message}`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tassert.strictEqual(failures.length, 0, failures.join(''));\n\t});\n\n\ttest('normalize', () => {\n\t\tassert.strictEqual(path.win32.normalize('./fixtures///b/../b/c.js'),\n\t\t\t'fixtures\\\\b\\\\c.js');\n\t\tassert.strictEqual(path.win32.normalize('/foo/../../../bar'), '\\\\bar');\n\t\tassert.strictEqual(path.win32.normalize('a//b//../b'), 'a\\\\b');\n\t\tassert.strictEqual(path.win32.normalize('a//b//./c'), 'a\\\\b\\\\c');\n\t\tassert.strictEqual(path.win32.normalize('a//b//.'), 'a\\\\b');\n\t\tassert.strictEqual(path.win32.normalize('//server/share/dir/file.ext'),\n\t\t\t'\\\\\\\\server\\\\share\\\\dir\\\\file.ext');\n\t\tassert.strictEqual(path.win32.normalize('/a/b/c/../../../x/y/z'), '\\\\x\\\\y\\\\z');\n\t\tassert.strictEqual(path.win32.normalize('C:'), 'C:.');\n\t\tassert.strictEqual(path.win32.normalize('C:..\\\\abc'), 'C:..\\\\abc');\n\t\tassert.strictEqual(path.win32.normalize('C:..\\\\..\\\\abc\\\\..\\\\def'),\n\t\t\t'C:..\\\\..\\\\def');\n\t\tassert.strictEqual(path.win32.normalize('C:\\\\.'), 'C:\\\\');\n\t\tassert.strictEqual(path.win32.normalize('file:stream'), 'file:stream');\n\t\tassert.strictEqual(path.win32.normalize('bar\\\\foo..\\\\..\\\\'), 'bar\\\\');\n\t\tassert.strictEqual(path.win32.normalize('bar\\\\foo..\\\\..'), 'bar');\n\t\tassert.strictEqual(path.win32.normalize('bar\\\\foo..\\\\..\\\\baz'), 'bar\\\\baz');\n\t\tassert.strictEqual(path.win32.normalize('bar\\\\foo..\\\\'), 'bar\\\\foo..\\\\');\n\t\tassert.strictEqual(path.win32.normalize('bar\\\\foo..'), 'bar\\\\foo..');\n\t\tassert.strictEqual(path.win32.normalize('..\\\\foo..\\\\..\\\\..\\\\bar'),\n\t\t\t'..\\\\..\\\\bar');\n\t\tassert.strictEqual(path.win32.normalize('..\\\\...\\\\..\\\\.\\\\...\\\\..\\\\..\\\\bar'),\n\t\t\t'..\\\\..\\\\bar');\n\t\tassert.strictEqual(path.win32.normalize('../../../foo/../../../bar'),\n\t\t\t'..\\\\..\\\\..\\\\..\\\\..\\\\bar');\n\t\tassert.strictEqual(path.win32.normalize('../../../foo/../../../bar/../../'),\n\t\t\t'..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\');\n\t\tassert.strictEqual(\n\t\t\tpath.win32.normalize('../foobar/barfoo/foo/../../../bar/../../'),\n\t\t\t'..\\\\..\\\\'\n\t\t);\n\t\tassert.strictEqual(\n\t\t\tpath.win32.normalize('../.../../foobar/../../../bar/../../baz'),\n\t\t\t'..\\\\..\\\\..\\\\..\\\\baz'\n\t\t);\n\t\tassert.strictEqual(path.win32.normalize('foo/bar\\\\baz'), 'foo\\\\bar\\\\baz');\n\n\t\tassert.strictEqual(path.posix.normalize('./fixtures///b/../b/c.js'),\n\t\t\t'fixtures/b/c.js');\n\t\tassert.strictEqual(path.posix.normalize('/foo/../../../bar'), '/bar');\n\t\tassert.strictEqual(path.posix.normalize('a//b//../b'), 'a/b');\n\t\tassert.strictEqual(path.posix.normalize('a//b//./c'), 'a/b/c');\n\t\tassert.strictEqual(path.posix.normalize('a//b//.'), 'a/b');\n\t\tassert.strictEqual(path.posix.normalize('/a/b/c/../../../x/y/z'), '/x/y/z');\n\t\tassert.strictEqual(path.posix.normalize('///..//./foo/.//bar'), '/foo/bar');\n\t\tassert.strictEqual(path.posix.normalize('bar/foo../../'), 'bar/');\n\t\tassert.strictEqual(path.posix.normalize('bar/foo../..'), 'bar');\n\t\tassert.strictEqual(path.posix.normalize('bar/foo../../baz'), 'bar/baz');\n\t\tassert.strictEqual(path.posix.normalize('bar/foo../'), 'bar/foo../');\n\t\tassert.strictEqual(path.posix.normalize('bar/foo..'), 'bar/foo..');\n\t\tassert.strictEqual(path.posix.normalize('../foo../../../bar'), '../../bar');\n\t\tassert.strictEqual(path.posix.normalize('../.../.././.../../../bar'),\n\t\t\t'../../bar');\n\t\tassert.strictEqual(path.posix.normalize('../../../foo/../../../bar'),\n\t\t\t'../../../../../bar');\n\t\tassert.strictEqual(path.posix.normalize('../../../foo/../../../bar/../../'),\n\t\t\t'../../../../../../');\n\t\tassert.strictEqual(\n\t\t\tpath.posix.normalize('../foobar/barfoo/foo/../../../bar/../../'),\n\t\t\t'../../'\n\t\t);\n\t\tassert.strictEqual(\n\t\t\tpath.posix.normalize('../.../../foobar/../../../bar/../../baz'),\n\t\t\t'../../../../baz'\n\t\t);\n\t\tassert.strictEqual(path.posix.normalize('foo/bar\\\\baz'), 'foo/bar\\\\baz');\n\t});\n\n\ttest('isAbsolute', () => {\n\t\tassert.strictEqual(path.win32.isAbsolute('/'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('//'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('//server'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('//server/file'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('\\\\\\\\server\\\\file'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('\\\\\\\\server'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('\\\\\\\\'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('c'), false);\n\t\tassert.strictEqual(path.win32.isAbsolute('c:'), false);\n\t\tassert.strictEqual(path.win32.isAbsolute('c:\\\\'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('c:/'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('c://'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('C:/Users/'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('C:\\\\Users\\\\'), true);\n\t\tassert.strictEqual(path.win32.isAbsolute('C:cwd/another'), false);\n\t\tassert.strictEqual(path.win32.isAbsolute('C:cwd\\\\another'), false);\n\t\tassert.strictEqual(path.win32.isAbsolute('directory/directory'), false);\n\t\tassert.strictEqual(path.win32.isAbsolute('directory\\\\directory'), false);\n\n\t\tassert.strictEqual(path.posix.isAbsolute('/home/foo'), true);\n\t\tassert.strictEqual(path.posix.isAbsolute('/home/foo/..'), true);\n\t\tassert.strictEqual(path.posix.isAbsolute('bar/'), false);\n\t\tassert.strictEqual(path.posix.isAbsolute('./baz'), false);\n\n\t\t// Tests from VSCode:\n\n\t\t// Absolute Paths\n\t\t[\n\t\t\t'C:/',\n\t\t\t'C:\\\\',\n\t\t\t'C:/foo',\n\t\t\t'C:\\\\foo',\n\t\t\t'z:/foo/bar.txt',\n\t\t\t'z:\\\\foo\\\\bar.txt',\n\n\t\t\t'\\\\\\\\localhost\\\\c$\\\\foo',\n\n\t\t\t'/',\n\t\t\t'/foo'\n\t\t].forEach(absolutePath => {\n\t\t\tassert.ok(path.win32.isAbsolute(absolutePath), absolutePath);\n\t\t});\n\n\t\t[\n\t\t\t'/',\n\t\t\t'/foo',\n\t\t\t'/foo/bar.txt'\n\t\t].forEach(absolutePath => {\n\t\t\tassert.ok(path.posix.isAbsolute(absolutePath), absolutePath);\n\t\t});\n\n\t\t// Relative Paths\n\t\t[\n\t\t\t'',\n\t\t\t'foo',\n\t\t\t'foo/bar',\n\t\t\t'./foo',\n\t\t\t'http://foo.com/bar'\n\t\t].forEach(nonAbsolutePath => {\n\t\t\tassert.ok(!path.win32.isAbsolute(nonAbsolutePath), nonAbsolutePath);\n\t\t});\n\n\t\t[\n\t\t\t'',\n\t\t\t'foo',\n\t\t\t'foo/bar',\n\t\t\t'./foo',\n\t\t\t'http://foo.com/bar',\n\t\t\t'z:/foo/bar.txt',\n\t\t].forEach(nonAbsolutePath => {\n\t\t\tassert.ok(!path.posix.isAbsolute(nonAbsolutePath), nonAbsolutePath);\n\t\t});\n\t});\n\n\ttest('path', () => {\n\t\t// path.sep tests\n\t\t// windows\n\t\tassert.strictEqual(path.win32.sep, '\\\\');\n\t\t// posix\n\t\tassert.strictEqual(path.posix.sep, '/');\n\n\t\t// path.delimiter tests\n\t\t// windows\n\t\tassert.strictEqual(path.win32.delimiter, ';');\n\t\t// posix\n\t\tassert.strictEqual(path.posix.delimiter, ':');\n\n\t\t// if (isWindows) {\n\t\t// \tassert.strictEqual(path, path.win32);\n\t\t// } else {\n\t\t// \tassert.strictEqual(path, path.posix);\n\t\t// }\n\t});\n\n\t// test('perf', () => {\n\t// \tconst folderNames = [\n\t// \t\t'abc',\n\t// \t\t'Users',\n\t// \t\t'reallylongfoldername',\n\t// \t\t's',\n\t// \t\t'reallyreallyreallylongfoldername',\n\t// \t\t'home'\n\t// \t];\n\n\t// \tconst basePaths = [\n\t// \t\t'C:',\n\t// \t\t'',\n\t// \t];\n\n\t// \tconst separators = [\n\t// \t\t'\\\\',\n\t// \t\t'/'\n\t// \t];\n\n\t// \tfunction randomInt(ciel: number): number {\n\t// \t\treturn Math.floor(Math.random() * ciel);\n\t// \t}\n\n\t// \tlet pathsToNormalize = [];\n\t// \tlet pathsToJoin = [];\n\t// \tlet i;\n\t// \tfor (i = 0; i < 1000000; i++) {\n\t// \t\tconst basePath = basePaths[randomInt(basePaths.length)];\n\t// \t\tlet lengthOfPath = randomInt(10) + 2;\n\n\t// \t\tlet pathToNormalize = basePath + separators[randomInt(separators.length)];\n\t// \t\twhile (lengthOfPath-- > 0) {\n\t// \t\t\tpathToNormalize = pathToNormalize + folderNames[randomInt(folderNames.length)] + separators[randomInt(separators.length)];\n\t// \t\t}\n\n\t// \t\tpathsToNormalize.push(pathToNormalize);\n\n\t// \t\tlet pathToJoin = '';\n\t// \t\tlengthOfPath = randomInt(10) + 2;\n\t// \t\twhile (lengthOfPath-- > 0) {\n\t// \t\t\tpathToJoin = pathToJoin + folderNames[randomInt(folderNames.length)] + separators[randomInt(separators.length)];\n\t// \t\t}\n\n\t// \t\tpathsToJoin.push(pathToJoin + '.ts');\n\t// \t}\n\n\t// \tlet newTime = 0;\n\n\t// \tlet j;\n\t// \tfor(j = 0; j < pathsToJoin.length; j++) {\n\t// \t\tconst path1 = pathsToNormalize[j];\n\t// \t\tconst path2 = pathsToNormalize[j];\n\n\t// \t\tconst newStart = performance.now();\n\t// \t\tpath.join(path1, path2);\n\t// \t\tnewTime += performance.now() - newStart;\n\t// \t}\n\n\t// \tassert.ok(false, `Time: ${newTime}ms.`);\n\t// });\n});\n"],
  "mappings": "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",
  "names": ["test"]
}
