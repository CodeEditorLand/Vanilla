{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/cache.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { timeout } from '../../common/async.js';\nimport { Cache } from '../../common/cache.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('Cache', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('simple value', () => {\n\t\tlet counter = 0;\n\t\tconst cache = new Cache(_ => Promise.resolve(counter++));\n\n\t\treturn cache.get().promise\n\t\t\t.then(c => assert.strictEqual(c, 0), () => assert.fail('Unexpected assertion error'))\n\t\t\t.then(() => cache.get().promise)\n\t\t\t.then(c => assert.strictEqual(c, 0), () => assert.fail('Unexpected assertion error'));\n\t});\n\n\ttest('simple error', () => {\n\t\tlet counter = 0;\n\t\tconst cache = new Cache(_ => Promise.reject(new Error(String(counter++))));\n\n\t\treturn cache.get().promise\n\t\t\t.then(() => assert.fail('Unexpected assertion error'), err => assert.strictEqual(err.message, '0'))\n\t\t\t.then(() => cache.get().promise)\n\t\t\t.then(() => assert.fail('Unexpected assertion error'), err => assert.strictEqual(err.message, '0'));\n\t});\n\n\ttest('should retry cancellations', () => {\n\t\tlet counter1 = 0, counter2 = 0;\n\n\t\tconst cache = new Cache(token => {\n\t\t\tcounter1++;\n\t\t\treturn Promise.resolve(timeout(2, token).then(() => counter2++));\n\t\t});\n\n\t\tassert.strictEqual(counter1, 0);\n\t\tassert.strictEqual(counter2, 0);\n\t\tlet result = cache.get();\n\t\tassert.strictEqual(counter1, 1);\n\t\tassert.strictEqual(counter2, 0);\n\t\tresult.promise.then(undefined, () => assert(true));\n\t\tresult.dispose();\n\t\tassert.strictEqual(counter1, 1);\n\t\tassert.strictEqual(counter2, 0);\n\n\t\tresult = cache.get();\n\t\tassert.strictEqual(counter1, 2);\n\t\tassert.strictEqual(counter2, 0);\n\n\t\treturn result.promise\n\t\t\t.then(c => {\n\t\t\t\tassert.strictEqual(counter1, 2);\n\t\t\t\tassert.strictEqual(counter2, 1);\n\t\t\t})\n\t\t\t.then(() => cache.get().promise)\n\t\t\t.then(c => {\n\t\t\t\tassert.strictEqual(counter1, 2);\n\t\t\t\tassert.strictEqual(counter2, 1);\n\t\t\t});\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,+CAA+C;AAExD,MAAM,SAAS,MAAM;AAEpB,0CAAwC;AAExC,OAAK,gBAAgB,MAAM;AAC1B,QAAI,UAAU;AACd,UAAM,QAAQ,IAAI,MAAM,OAAK,QAAQ,QAAQ,SAAS,CAAC;AAEvD,WAAO,MAAM,IAAI,EAAE,QACjB,KAAK,OAAK,OAAO,YAAY,GAAG,CAAC,GAAG,MAAM,OAAO,KAAK,4BAA4B,CAAC,EACnF,KAAK,MAAM,MAAM,IAAI,EAAE,OAAO,EAC9B,KAAK,OAAK,OAAO,YAAY,GAAG,CAAC,GAAG,MAAM,OAAO,KAAK,4BAA4B,CAAC;AAAA,EACtF,CAAC;AAED,OAAK,gBAAgB,MAAM;AAC1B,QAAI,UAAU;AACd,UAAM,QAAQ,IAAI,MAAM,OAAK,QAAQ,OAAO,IAAI,MAAM,OAAO,SAAS,CAAC,CAAC,CAAC;AAEzE,WAAO,MAAM,IAAI,EAAE,QACjB,KAAK,MAAM,OAAO,KAAK,4BAA4B,GAAG,SAAO,OAAO,YAAY,IAAI,SAAS,GAAG,CAAC,EACjG,KAAK,MAAM,MAAM,IAAI,EAAE,OAAO,EAC9B,KAAK,MAAM,OAAO,KAAK,4BAA4B,GAAG,SAAO,OAAO,YAAY,IAAI,SAAS,GAAG,CAAC;AAAA,EACpG,CAAC;AAED,OAAK,8BAA8B,MAAM;AACxC,QAAI,WAAW,GAAG,WAAW;AAE7B,UAAM,QAAQ,IAAI,MAAM,WAAS;AAChC;AACA,aAAO,QAAQ,QAAQ,QAAQ,GAAG,KAAK,EAAE,KAAK,MAAM,UAAU,CAAC;AAAA,IAChE,CAAC;AAED,WAAO,YAAY,UAAU,CAAC;AAC9B,WAAO,YAAY,UAAU,CAAC;AAC9B,QAAI,SAAS,MAAM,IAAI;AACvB,WAAO,YAAY,UAAU,CAAC;AAC9B,WAAO,YAAY,UAAU,CAAC;AAC9B,WAAO,QAAQ,KAAK,QAAW,MAAM,OAAO,IAAI,CAAC;AACjD,WAAO,QAAQ;AACf,WAAO,YAAY,UAAU,CAAC;AAC9B,WAAO,YAAY,UAAU,CAAC;AAE9B,aAAS,MAAM,IAAI;AACnB,WAAO,YAAY,UAAU,CAAC;AAC9B,WAAO,YAAY,UAAU,CAAC;AAE9B,WAAO,OAAO,QACZ,KAAK,OAAK;AACV,aAAO,YAAY,UAAU,CAAC;AAC9B,aAAO,YAAY,UAAU,CAAC;AAAA,IAC/B,CAAC,EACA,KAAK,MAAM,MAAM,IAAI,EAAE,OAAO,EAC9B,KAAK,OAAK;AACV,aAAO,YAAY,UAAU,CAAC;AAC9B,aAAO,YAAY,UAAU,CAAC;AAAA,IAC/B,CAAC;AAAA,EACH,CAAC;AACF,CAAC;",
  "names": []
}
