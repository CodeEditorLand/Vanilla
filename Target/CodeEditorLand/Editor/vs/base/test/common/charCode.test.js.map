{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/charCode.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CharCode } from '../../common/charCode.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('CharCode', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('has good values', () => {\n\n\t\tfunction assertValue(actual: CharCode, expected: string): void {\n\t\t\tassert.strictEqual(actual, expected.charCodeAt(0), 'char code ok for <<' + expected + '>>');\n\t\t}\n\n\t\tassertValue(CharCode.Tab, '\\t');\n\t\tassertValue(CharCode.LineFeed, '\\n');\n\t\tassertValue(CharCode.CarriageReturn, '\\r');\n\t\tassertValue(CharCode.Space, ' ');\n\t\tassertValue(CharCode.ExclamationMark, '!');\n\t\tassertValue(CharCode.DoubleQuote, '\"');\n\t\tassertValue(CharCode.Hash, '#');\n\t\tassertValue(CharCode.DollarSign, '$');\n\t\tassertValue(CharCode.PercentSign, '%');\n\t\tassertValue(CharCode.Ampersand, '&');\n\t\tassertValue(CharCode.SingleQuote, '\\'');\n\t\tassertValue(CharCode.OpenParen, '(');\n\t\tassertValue(CharCode.CloseParen, ')');\n\t\tassertValue(CharCode.Asterisk, '*');\n\t\tassertValue(CharCode.Plus, '+');\n\t\tassertValue(CharCode.Comma, ',');\n\t\tassertValue(CharCode.Dash, '-');\n\t\tassertValue(CharCode.Period, '.');\n\t\tassertValue(CharCode.Slash, '/');\n\n\t\tassertValue(CharCode.Digit0, '0');\n\t\tassertValue(CharCode.Digit1, '1');\n\t\tassertValue(CharCode.Digit2, '2');\n\t\tassertValue(CharCode.Digit3, '3');\n\t\tassertValue(CharCode.Digit4, '4');\n\t\tassertValue(CharCode.Digit5, '5');\n\t\tassertValue(CharCode.Digit6, '6');\n\t\tassertValue(CharCode.Digit7, '7');\n\t\tassertValue(CharCode.Digit8, '8');\n\t\tassertValue(CharCode.Digit9, '9');\n\n\t\tassertValue(CharCode.Colon, ':');\n\t\tassertValue(CharCode.Semicolon, ';');\n\t\tassertValue(CharCode.LessThan, '<');\n\t\tassertValue(CharCode.Equals, '=');\n\t\tassertValue(CharCode.GreaterThan, '>');\n\t\tassertValue(CharCode.QuestionMark, '?');\n\t\tassertValue(CharCode.AtSign, '@');\n\n\t\tassertValue(CharCode.A, 'A');\n\t\tassertValue(CharCode.B, 'B');\n\t\tassertValue(CharCode.C, 'C');\n\t\tassertValue(CharCode.D, 'D');\n\t\tassertValue(CharCode.E, 'E');\n\t\tassertValue(CharCode.F, 'F');\n\t\tassertValue(CharCode.G, 'G');\n\t\tassertValue(CharCode.H, 'H');\n\t\tassertValue(CharCode.I, 'I');\n\t\tassertValue(CharCode.J, 'J');\n\t\tassertValue(CharCode.K, 'K');\n\t\tassertValue(CharCode.L, 'L');\n\t\tassertValue(CharCode.M, 'M');\n\t\tassertValue(CharCode.N, 'N');\n\t\tassertValue(CharCode.O, 'O');\n\t\tassertValue(CharCode.P, 'P');\n\t\tassertValue(CharCode.Q, 'Q');\n\t\tassertValue(CharCode.R, 'R');\n\t\tassertValue(CharCode.S, 'S');\n\t\tassertValue(CharCode.T, 'T');\n\t\tassertValue(CharCode.U, 'U');\n\t\tassertValue(CharCode.V, 'V');\n\t\tassertValue(CharCode.W, 'W');\n\t\tassertValue(CharCode.X, 'X');\n\t\tassertValue(CharCode.Y, 'Y');\n\t\tassertValue(CharCode.Z, 'Z');\n\n\t\tassertValue(CharCode.OpenSquareBracket, '[');\n\t\tassertValue(CharCode.Backslash, '\\\\');\n\t\tassertValue(CharCode.CloseSquareBracket, ']');\n\t\tassertValue(CharCode.Caret, '^');\n\t\tassertValue(CharCode.Underline, '_');\n\t\tassertValue(CharCode.BackTick, '`');\n\n\t\tassertValue(CharCode.a, 'a');\n\t\tassertValue(CharCode.b, 'b');\n\t\tassertValue(CharCode.c, 'c');\n\t\tassertValue(CharCode.d, 'd');\n\t\tassertValue(CharCode.e, 'e');\n\t\tassertValue(CharCode.f, 'f');\n\t\tassertValue(CharCode.g, 'g');\n\t\tassertValue(CharCode.h, 'h');\n\t\tassertValue(CharCode.i, 'i');\n\t\tassertValue(CharCode.j, 'j');\n\t\tassertValue(CharCode.k, 'k');\n\t\tassertValue(CharCode.l, 'l');\n\t\tassertValue(CharCode.m, 'm');\n\t\tassertValue(CharCode.n, 'n');\n\t\tassertValue(CharCode.o, 'o');\n\t\tassertValue(CharCode.p, 'p');\n\t\tassertValue(CharCode.q, 'q');\n\t\tassertValue(CharCode.r, 'r');\n\t\tassertValue(CharCode.s, 's');\n\t\tassertValue(CharCode.t, 't');\n\t\tassertValue(CharCode.u, 'u');\n\t\tassertValue(CharCode.v, 'v');\n\t\tassertValue(CharCode.w, 'w');\n\t\tassertValue(CharCode.x, 'x');\n\t\tassertValue(CharCode.y, 'y');\n\t\tassertValue(CharCode.z, 'z');\n\n\t\tassertValue(CharCode.OpenCurlyBrace, '{');\n\t\tassertValue(CharCode.Pipe, '|');\n\t\tassertValue(CharCode.CloseCurlyBrace, '}');\n\t\tassertValue(CharCode.Tilde, '~');\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,gBAAgB;AACzB,SAAS,+CAA+C;AAExD,MAAM,YAAY,MAAM;AACvB,0CAAwC;AAExC,OAAK,mBAAmB,MAAM;AAE7B,aAAS,YAAY,QAAkB,UAAwB;AAC9D,aAAO,YAAY,QAAQ,SAAS,WAAW,CAAC,GAAG,wBAAwB,WAAW,IAAI;AAAA,IAC3F;AAFS;AAIT,gBAAY,SAAS,KAAK,GAAI;AAC9B,gBAAY,SAAS,UAAU,IAAI;AACnC,gBAAY,SAAS,gBAAgB,IAAI;AACzC,gBAAY,SAAS,OAAO,GAAG;AAC/B,gBAAY,SAAS,iBAAiB,GAAG;AACzC,gBAAY,SAAS,aAAa,GAAG;AACrC,gBAAY,SAAS,MAAM,GAAG;AAC9B,gBAAY,SAAS,YAAY,GAAG;AACpC,gBAAY,SAAS,aAAa,GAAG;AACrC,gBAAY,SAAS,WAAW,GAAG;AACnC,gBAAY,SAAS,aAAa,GAAI;AACtC,gBAAY,SAAS,WAAW,GAAG;AACnC,gBAAY,SAAS,YAAY,GAAG;AACpC,gBAAY,SAAS,UAAU,GAAG;AAClC,gBAAY,SAAS,MAAM,GAAG;AAC9B,gBAAY,SAAS,OAAO,GAAG;AAC/B,gBAAY,SAAS,MAAM,GAAG;AAC9B,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,OAAO,GAAG;AAE/B,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,QAAQ,GAAG;AAEhC,gBAAY,SAAS,OAAO,GAAG;AAC/B,gBAAY,SAAS,WAAW,GAAG;AACnC,gBAAY,SAAS,UAAU,GAAG;AAClC,gBAAY,SAAS,QAAQ,GAAG;AAChC,gBAAY,SAAS,aAAa,GAAG;AACrC,gBAAY,SAAS,cAAc,GAAG;AACtC,gBAAY,SAAS,QAAQ,GAAG;AAEhC,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAE3B,gBAAY,SAAS,mBAAmB,GAAG;AAC3C,gBAAY,SAAS,WAAW,IAAI;AACpC,gBAAY,SAAS,oBAAoB,GAAG;AAC5C,gBAAY,SAAS,OAAO,GAAG;AAC/B,gBAAY,SAAS,WAAW,GAAG;AACnC,gBAAY,SAAS,UAAU,GAAG;AAElC,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAC3B,gBAAY,SAAS,GAAG,GAAG;AAE3B,gBAAY,SAAS,gBAAgB,GAAG;AACxC,gBAAY,SAAS,MAAM,GAAG;AAC9B,gBAAY,SAAS,iBAAiB,GAAG;AACzC,gBAAY,SAAS,OAAO,GAAG;AAAA,EAChC,CAAC;AACF,CAAC;",
  "names": []
}
