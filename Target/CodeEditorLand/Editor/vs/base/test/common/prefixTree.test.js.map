{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/prefixTree.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WellDefinedPrefixTree } from '../../common/prefixTree.js';\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('WellDefinedPrefixTree', () => {\n\tlet tree: WellDefinedPrefixTree<number>;\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\ttree = new WellDefinedPrefixTree<number>();\n\t});\n\n\ttest('find', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.find(key1), 42);\n\t\tassert.strictEqual(tree.find(key2), 43);\n\t\tassert.strictEqual(tree.find(['foo', 'baz', 'bop']), undefined);\n\t\tassert.strictEqual(tree.find(['foo']), undefined);\n\t});\n\n\ttest('hasParentOfKey', () => {\n\t\tconst key = ['foo', 'bar'];\n\t\ttree.insert(key, 42);\n\n\t\tassert.strictEqual(tree.hasKeyOrParent(['foo', 'bar', 'baz']), true);\n\t\tassert.strictEqual(tree.hasKeyOrParent(['foo', 'bar']), true);\n\t\tassert.strictEqual(tree.hasKeyOrParent(['foo']), false);\n\t\tassert.strictEqual(tree.hasKeyOrParent(['baz']), false);\n\t});\n\n\n\ttest('hasKeyOrChildren', () => {\n\t\tconst key = ['foo', 'bar'];\n\t\ttree.insert(key, 42);\n\n\t\tassert.strictEqual(tree.hasKeyOrChildren([]), true);\n\t\tassert.strictEqual(tree.hasKeyOrChildren(['foo']), true);\n\t\tassert.strictEqual(tree.hasKeyOrChildren(['foo', 'bar']), true);\n\t\tassert.strictEqual(tree.hasKeyOrChildren(['foo', 'bar', 'baz']), false);\n\t});\n\n\ttest('hasKey', () => {\n\t\tconst key = ['foo', 'bar'];\n\t\ttree.insert(key, 42);\n\n\t\tassert.strictEqual(tree.hasKey(key), true);\n\t\tassert.strictEqual(tree.hasKey(['foo']), false);\n\t\tassert.strictEqual(tree.hasKey(['baz']), false);\n\t\tassert.strictEqual(tree.hasKey(['foo', 'bar', 'baz']), false);\n\t});\n\n\ttest('size', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\tassert.strictEqual(tree.size, 0);\n\t\ttree.insert(key1, 42);\n\t\tassert.strictEqual(tree.size, 1);\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.size, 2);\n\t\ttree.insert(key2, 44);\n\t\tassert.strictEqual(tree.size, 2);\n\t});\n\n\ttest('mutate', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\ttree.mutate(key1, (value) => {\n\t\t\tassert.strictEqual(value, 42);\n\t\t\treturn 44;\n\t\t});\n\t\tassert.strictEqual(tree.find(key1), 44);\n\t\tassert.strictEqual(tree.find(key2), 43);\n\t});\n\n\ttest('delete', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.size, 2);\n\n\t\tassert.strictEqual(tree.delete(key1), 42);\n\t\tassert.strictEqual(tree.size, 1);\n\t\tassert.strictEqual(tree.find(key1), undefined);\n\t\tassert.strictEqual(tree.find(key2), 43);\n\n\t\tassert.strictEqual(tree.delete(key2), 43);\n\t\tassert.strictEqual(tree.size, 0);\n\t\tassert.strictEqual(tree.find(key1), undefined);\n\t\tassert.strictEqual(tree.find(key2), undefined);\n\n\t\ttree.delete(key2);\n\t\tassert.strictEqual(tree.size, 0);\n\t});\n\n\ttest('delete child', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'bar', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.size, 2);\n\n\t\tassert.strictEqual(tree.delete(key2), 43);\n\t\tassert.strictEqual(tree.size, 1);\n\t\tassert.strictEqual(tree.find(key1), 42);\n\t\tassert.strictEqual(tree.find(key2), undefined);\n\t});\n\n\ttest('delete noops if deleting parent', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'bar', 'baz'];\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.size, 1);\n\n\t\tassert.strictEqual(tree.delete(key1), undefined);\n\t\tassert.strictEqual(tree.size, 1);\n\t\tassert.strictEqual(tree.find(key2), 43);\n\t\tassert.strictEqual(tree.find(key1), undefined);\n\t});\n\n\ttest('values', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\n\t\tassert.deepStrictEqual([...tree.values()], [43, 42]);\n\t});\n\n\n\ttest('delete recursive', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'bar', 'baz'];\n\t\tconst key3 = ['foo', 'bar', 'baz2', 'baz3'];\n\t\tconst key4 = ['foo', 'bar2'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\ttree.insert(key3, 44);\n\t\ttree.insert(key4, 45);\n\t\tassert.strictEqual(tree.size, 4);\n\n\t\tassert.deepStrictEqual([...tree.deleteRecursive(key1)], [42, 44, 43]);\n\t\tassert.strictEqual(tree.size, 1);\n\n\t\tassert.deepStrictEqual([...tree.deleteRecursive(key1)], []);\n\t\tassert.strictEqual(tree.size, 1);\n\n\t\tassert.deepStrictEqual([...tree.deleteRecursive(key4)], [45]);\n\t\tassert.strictEqual(tree.size, 0);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
