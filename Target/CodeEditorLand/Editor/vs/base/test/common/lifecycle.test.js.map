{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/lifecycle.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Emitter } from '../../common/event.js';\nimport { DisposableStore, dispose, IDisposable, markAsSingleton, ReferenceCollection, SafeDisposable, toDisposable } from '../../common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, throwIfDisposablesAreLeaked } from './utils.js';\n\nclass Disposable implements IDisposable {\n\tisDisposed = false;\n\tdispose() { this.isDisposed = true; }\n}\n\n// Leaks are allowed here since we test lifecycle stuff:\n// eslint-disable-next-line local/code-ensure-no-disposables-leak-in-test\nsuite('Lifecycle', () => {\n\ttest('dispose single disposable', () => {\n\t\tconst disposable = new Disposable();\n\n\t\tassert(!disposable.isDisposed);\n\n\t\tdispose(disposable);\n\n\t\tassert(disposable.isDisposed);\n\t});\n\n\ttest('dispose disposable array', () => {\n\t\tconst disposable = new Disposable();\n\t\tconst disposable2 = new Disposable();\n\n\t\tassert(!disposable.isDisposed);\n\t\tassert(!disposable2.isDisposed);\n\n\t\tdispose([disposable, disposable2]);\n\n\t\tassert(disposable.isDisposed);\n\t\tassert(disposable2.isDisposed);\n\t});\n\n\ttest('dispose disposables', () => {\n\t\tconst disposable = new Disposable();\n\t\tconst disposable2 = new Disposable();\n\n\t\tassert(!disposable.isDisposed);\n\t\tassert(!disposable2.isDisposed);\n\n\t\tdispose(disposable);\n\t\tdispose(disposable2);\n\n\t\tassert(disposable.isDisposed);\n\t\tassert(disposable2.isDisposed);\n\t});\n\n\ttest('dispose array should dispose all if a child throws on dispose', () => {\n\t\tconst disposedValues = new Set<number>();\n\n\t\tlet thrownError: any;\n\t\ttry {\n\t\t\tdispose([\n\t\t\t\ttoDisposable(() => { disposedValues.add(1); }),\n\t\t\t\ttoDisposable(() => { throw new Error('I am error'); }),\n\t\t\t\ttoDisposable(() => { disposedValues.add(3); }),\n\t\t\t]);\n\t\t} catch (e) {\n\t\t\tthrownError = e;\n\t\t}\n\n\t\tassert.ok(disposedValues.has(1));\n\t\tassert.ok(disposedValues.has(3));\n\t\tassert.strictEqual(thrownError.message, 'I am error');\n\t});\n\n\ttest('dispose array should rethrow composite error if multiple entries throw on dispose', () => {\n\t\tconst disposedValues = new Set<number>();\n\n\t\tlet thrownError: any;\n\t\ttry {\n\t\t\tdispose([\n\t\t\t\ttoDisposable(() => { disposedValues.add(1); }),\n\t\t\t\ttoDisposable(() => { throw new Error('I am error 1'); }),\n\t\t\t\ttoDisposable(() => { throw new Error('I am error 2'); }),\n\t\t\t\ttoDisposable(() => { disposedValues.add(4); }),\n\t\t\t]);\n\t\t} catch (e) {\n\t\t\tthrownError = e;\n\t\t}\n\n\t\tassert.ok(disposedValues.has(1));\n\t\tassert.ok(disposedValues.has(4));\n\t\tassert.ok(thrownError instanceof AggregateError);\n\t\tassert.strictEqual((thrownError as AggregateError).errors.length, 2);\n\t\tassert.strictEqual((thrownError as AggregateError).errors[0].message, 'I am error 1');\n\t\tassert.strictEqual((thrownError as AggregateError).errors[1].message, 'I am error 2');\n\t});\n\n\ttest('Action bar has broken accessibility #100273', function () {\n\t\tconst array = [{ dispose() { } }, { dispose() { } }];\n\t\tconst array2 = dispose(array);\n\n\t\tassert.strictEqual(array.length, 2);\n\t\tassert.strictEqual(array2.length, 0);\n\t\tassert.ok(array !== array2);\n\n\t\tconst set = new Set<IDisposable>([{ dispose() { } }, { dispose() { } }]);\n\t\tconst setValues = set.values();\n\t\tconst setValues2 = dispose(setValues);\n\t\tassert.ok(setValues === setValues2);\n\t});\n\n\ttest('SafeDisposable, dispose', function () {\n\t\tlet disposed = 0;\n\t\tconst actual = () => disposed += 1;\n\t\tconst d = new SafeDisposable();\n\t\td.set(actual);\n\t\td.dispose();\n\t\tassert.strictEqual(disposed, 1);\n\t});\n\n\ttest('SafeDisposable, unset', function () {\n\t\tlet disposed = 0;\n\t\tconst actual = () => disposed += 1;\n\t\tconst d = new SafeDisposable();\n\t\td.set(actual);\n\t\td.unset();\n\t\td.dispose();\n\t\tassert.strictEqual(disposed, 0);\n\t});\n});\n\nsuite('DisposableStore', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('dispose should call all child disposes even if a child throws on dispose', () => {\n\t\tconst disposedValues = new Set<number>();\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(toDisposable(() => { disposedValues.add(1); }));\n\t\tstore.add(toDisposable(() => { throw new Error('I am error'); }));\n\t\tstore.add(toDisposable(() => { disposedValues.add(3); }));\n\n\t\tlet thrownError: any;\n\t\ttry {\n\t\t\tstore.dispose();\n\t\t} catch (e) {\n\t\t\tthrownError = e;\n\t\t}\n\n\t\tassert.ok(disposedValues.has(1));\n\t\tassert.ok(disposedValues.has(3));\n\t\tassert.strictEqual(thrownError.message, 'I am error');\n\t});\n\n\ttest('dispose should throw composite error if multiple children throw on dispose', () => {\n\t\tconst disposedValues = new Set<number>();\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(toDisposable(() => { disposedValues.add(1); }));\n\t\tstore.add(toDisposable(() => { throw new Error('I am error 1'); }));\n\t\tstore.add(toDisposable(() => { throw new Error('I am error 2'); }));\n\t\tstore.add(toDisposable(() => { disposedValues.add(4); }));\n\n\t\tlet thrownError: any;\n\t\ttry {\n\t\t\tstore.dispose();\n\t\t} catch (e) {\n\t\t\tthrownError = e;\n\t\t}\n\n\t\tassert.ok(disposedValues.has(1));\n\t\tassert.ok(disposedValues.has(4));\n\t\tassert.ok(thrownError instanceof AggregateError);\n\t\tassert.strictEqual((thrownError as AggregateError).errors.length, 2);\n\t\tassert.strictEqual((thrownError as AggregateError).errors[0].message, 'I am error 1');\n\t\tassert.strictEqual((thrownError as AggregateError).errors[1].message, 'I am error 2');\n\t});\n\n\ttest('delete should evict and dispose of the disposables', () => {\n\t\tconst disposedValues = new Set<number>();\n\t\tconst disposables: IDisposable[] = [\n\t\t\ttoDisposable(() => { disposedValues.add(1); }),\n\t\t\ttoDisposable(() => { disposedValues.add(2); })\n\t\t];\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(disposables[0]);\n\t\tstore.add(disposables[1]);\n\n\t\tstore.delete(disposables[0]);\n\n\t\tassert.ok(disposedValues.has(1));\n\t\tassert.ok(!disposedValues.has(2));\n\n\t\tstore.dispose();\n\n\t\tassert.ok(disposedValues.has(1));\n\t\tassert.ok(disposedValues.has(2));\n\t});\n\n\ttest('deleteAndLeak should evict and not dispose of the disposables', () => {\n\t\tconst disposedValues = new Set<number>();\n\t\tconst disposables: IDisposable[] = [\n\t\t\ttoDisposable(() => { disposedValues.add(1); }),\n\t\t\ttoDisposable(() => { disposedValues.add(2); })\n\t\t];\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(disposables[0]);\n\t\tstore.add(disposables[1]);\n\n\t\tstore.deleteAndLeak(disposables[0]);\n\n\t\tassert.ok(!disposedValues.has(1));\n\t\tassert.ok(!disposedValues.has(2));\n\n\t\tstore.dispose();\n\n\t\tassert.ok(!disposedValues.has(1));\n\t\tassert.ok(disposedValues.has(2));\n\n\t\tdisposables[0].dispose();\n\t});\n});\n\nsuite('Reference Collection', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass Collection extends ReferenceCollection<number> {\n\t\tprivate _count = 0;\n\t\tget count() { return this._count; }\n\t\tprotected createReferencedObject(key: string): number { this._count++; return key.length; }\n\t\tprotected destroyReferencedObject(key: string, object: number): void { this._count--; }\n\t}\n\n\ttest('simple', () => {\n\t\tconst collection = new Collection();\n\n\t\tconst ref1 = collection.acquire('test');\n\t\tassert(ref1);\n\t\tassert.strictEqual(ref1.object, 4);\n\t\tassert.strictEqual(collection.count, 1);\n\t\tref1.dispose();\n\t\tassert.strictEqual(collection.count, 0);\n\n\t\tconst ref2 = collection.acquire('test');\n\t\tconst ref3 = collection.acquire('test');\n\t\tassert.strictEqual(ref2.object, ref3.object);\n\t\tassert.strictEqual(collection.count, 1);\n\n\t\tconst ref4 = collection.acquire('monkey');\n\t\tassert.strictEqual(ref4.object, 6);\n\t\tassert.strictEqual(collection.count, 2);\n\n\t\tref2.dispose();\n\t\tassert.strictEqual(collection.count, 2);\n\n\t\tref3.dispose();\n\t\tassert.strictEqual(collection.count, 1);\n\n\t\tref4.dispose();\n\t\tassert.strictEqual(collection.count, 0);\n\t});\n});\n\nfunction assertThrows(fn: () => void, test: (error: any) => void) {\n\ttry {\n\t\tfn();\n\t\tassert.fail('Expected function to throw, but it did not.');\n\t} catch (e) {\n\t\tassert.ok(test(e));\n\t}\n}\n\nsuite('No Leakage Utilities', () => {\n\tsuite('throwIfDisposablesAreLeaked', () => {\n\t\ttest('throws if an event subscription is not cleaned up', () => {\n\t\t\tconst eventEmitter = new Emitter();\n\n\t\t\tassertThrows(() => {\n\t\t\t\tthrowIfDisposablesAreLeaked(() => {\n\t\t\t\t\teventEmitter.event(() => {\n\t\t\t\t\t\t// noop\n\t\t\t\t\t});\n\t\t\t\t}, false);\n\t\t\t}, e => e.message.indexOf('undisposed disposables') !== -1);\n\t\t});\n\n\t\ttest('throws if a disposable is not disposed', () => {\n\t\t\tassertThrows(() => {\n\t\t\t\tthrowIfDisposablesAreLeaked(() => {\n\t\t\t\t\tnew DisposableStore();\n\t\t\t\t}, false);\n\t\t\t}, e => e.message.indexOf('undisposed disposables') !== -1);\n\t\t});\n\n\t\ttest('does not throw if all event subscriptions are cleaned up', () => {\n\t\t\tconst eventEmitter = new Emitter();\n\t\t\tthrowIfDisposablesAreLeaked(() => {\n\t\t\t\teventEmitter.event(() => {\n\t\t\t\t\t// noop\n\t\t\t\t}).dispose();\n\t\t\t});\n\t\t});\n\n\t\ttest('does not throw if all disposables are disposed', () => {\n\t\t\t// This disposable is reported before the test and not tracked.\n\t\t\ttoDisposable(() => { });\n\n\t\t\tthrowIfDisposablesAreLeaked(() => {\n\t\t\t\t// This disposable is marked as singleton\n\t\t\t\tmarkAsSingleton(toDisposable(() => { }));\n\n\t\t\t\t// These disposables are also marked as singleton\n\t\t\t\tconst disposableStore = new DisposableStore();\n\t\t\t\tdisposableStore.add(toDisposable(() => { }));\n\t\t\t\tmarkAsSingleton(disposableStore);\n\n\t\t\t\ttoDisposable(() => { }).dispose();\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('ensureNoDisposablesAreLeakedInTest', () => {\n\t\tensureNoDisposablesAreLeakedInTestSuite();\n\n\t\ttest('Basic Test', () => {\n\t\t\ttoDisposable(() => { }).dispose();\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,eAAe;AACxB,SAAS,iBAAiB,SAAS,aAAa,iBAAiB,qBAAqB,gBAAgB,oBAAoB;AAC1H,SAAS,yCAAyC,mCAAmC;AAErF,MAAM,WAAkC;AAAA,EAVxC,OAUwC;AAAA;AAAA;AAAA,EACvC,aAAa;AAAA,EACb,UAAU;AAAE,SAAK,aAAa;AAAA,EAAM;AACrC;AAIA,MAAM,aAAa,MAAM;AACxB,OAAK,6BAA6B,MAAM;AACvC,UAAM,aAAa,IAAI,WAAW;AAElC,WAAO,CAAC,WAAW,UAAU;AAE7B,YAAQ,UAAU;AAElB,WAAO,WAAW,UAAU;AAAA,EAC7B,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC,UAAM,aAAa,IAAI,WAAW;AAClC,UAAM,cAAc,IAAI,WAAW;AAEnC,WAAO,CAAC,WAAW,UAAU;AAC7B,WAAO,CAAC,YAAY,UAAU;AAE9B,YAAQ,CAAC,YAAY,WAAW,CAAC;AAEjC,WAAO,WAAW,UAAU;AAC5B,WAAO,YAAY,UAAU;AAAA,EAC9B,CAAC;AAED,OAAK,uBAAuB,MAAM;AACjC,UAAM,aAAa,IAAI,WAAW;AAClC,UAAM,cAAc,IAAI,WAAW;AAEnC,WAAO,CAAC,WAAW,UAAU;AAC7B,WAAO,CAAC,YAAY,UAAU;AAE9B,YAAQ,UAAU;AAClB,YAAQ,WAAW;AAEnB,WAAO,WAAW,UAAU;AAC5B,WAAO,YAAY,UAAU;AAAA,EAC9B,CAAC;AAED,OAAK,iEAAiE,MAAM;AAC3E,UAAM,iBAAiB,oBAAI,IAAY;AAEvC,QAAI;AACJ,QAAI;AACH,cAAQ;AAAA,QACP,aAAa,MAAM;AAAE,yBAAe,IAAI,CAAC;AAAA,QAAG,CAAC;AAAA,QAC7C,aAAa,MAAM;AAAE,gBAAM,IAAI,MAAM,YAAY;AAAA,QAAG,CAAC;AAAA,QACrD,aAAa,MAAM;AAAE,yBAAe,IAAI,CAAC;AAAA,QAAG,CAAC;AAAA,MAC9C,CAAC;AAAA,IACF,SAAS,GAAG;AACX,oBAAc;AAAA,IACf;AAEA,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,YAAY,YAAY,SAAS,YAAY;AAAA,EACrD,CAAC;AAED,OAAK,qFAAqF,MAAM;AAC/F,UAAM,iBAAiB,oBAAI,IAAY;AAEvC,QAAI;AACJ,QAAI;AACH,cAAQ;AAAA,QACP,aAAa,MAAM;AAAE,yBAAe,IAAI,CAAC;AAAA,QAAG,CAAC;AAAA,QAC7C,aAAa,MAAM;AAAE,gBAAM,IAAI,MAAM,cAAc;AAAA,QAAG,CAAC;AAAA,QACvD,aAAa,MAAM;AAAE,gBAAM,IAAI,MAAM,cAAc;AAAA,QAAG,CAAC;AAAA,QACvD,aAAa,MAAM;AAAE,yBAAe,IAAI,CAAC;AAAA,QAAG,CAAC;AAAA,MAC9C,CAAC;AAAA,IACF,SAAS,GAAG;AACX,oBAAc;AAAA,IACf;AAEA,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,GAAG,uBAAuB,cAAc;AAC/C,WAAO,YAAa,YAA+B,OAAO,QAAQ,CAAC;AACnE,WAAO,YAAa,YAA+B,OAAO,CAAC,EAAE,SAAS,cAAc;AACpF,WAAO,YAAa,YAA+B,OAAO,CAAC,EAAE,SAAS,cAAc;AAAA,EACrF,CAAC;AAED,OAAK,+CAA+C,WAAY;AAC/D,UAAM,QAAQ,CAAC,EAAE,UAAU;AAAA,IAAE,EAAE,GAAG,EAAE,UAAU;AAAA,IAAE,EAAE,CAAC;AACnD,UAAM,SAAS,QAAQ,KAAK;AAE5B,WAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,WAAO,YAAY,OAAO,QAAQ,CAAC;AACnC,WAAO,GAAG,UAAU,MAAM;AAE1B,UAAM,MAAM,oBAAI,IAAiB,CAAC,EAAE,UAAU;AAAA,IAAE,EAAE,GAAG,EAAE,UAAU;AAAA,IAAE,EAAE,CAAC,CAAC;AACvE,UAAM,YAAY,IAAI,OAAO;AAC7B,UAAM,aAAa,QAAQ,SAAS;AACpC,WAAO,GAAG,cAAc,UAAU;AAAA,EACnC,CAAC;AAED,OAAK,2BAA2B,WAAY;AAC3C,QAAI,WAAW;AACf,UAAM,SAAS,6BAAM,YAAY,GAAlB;AACf,UAAM,IAAI,IAAI,eAAe;AAC7B,MAAE,IAAI,MAAM;AACZ,MAAE,QAAQ;AACV,WAAO,YAAY,UAAU,CAAC;AAAA,EAC/B,CAAC;AAED,OAAK,yBAAyB,WAAY;AACzC,QAAI,WAAW;AACf,UAAM,SAAS,6BAAM,YAAY,GAAlB;AACf,UAAM,IAAI,IAAI,eAAe;AAC7B,MAAE,IAAI,MAAM;AACZ,MAAE,MAAM;AACR,MAAE,QAAQ;AACV,WAAO,YAAY,UAAU,CAAC;AAAA,EAC/B,CAAC;AACF,CAAC;AAED,MAAM,mBAAmB,MAAM;AAC9B,0CAAwC;AAExC,OAAK,4EAA4E,MAAM;AACtF,UAAM,iBAAiB,oBAAI,IAAY;AAEvC,UAAM,QAAQ,IAAI,gBAAgB;AAClC,UAAM,IAAI,aAAa,MAAM;AAAE,qBAAe,IAAI,CAAC;AAAA,IAAG,CAAC,CAAC;AACxD,UAAM,IAAI,aAAa,MAAM;AAAE,YAAM,IAAI,MAAM,YAAY;AAAA,IAAG,CAAC,CAAC;AAChE,UAAM,IAAI,aAAa,MAAM;AAAE,qBAAe,IAAI,CAAC;AAAA,IAAG,CAAC,CAAC;AAExD,QAAI;AACJ,QAAI;AACH,YAAM,QAAQ;AAAA,IACf,SAAS,GAAG;AACX,oBAAc;AAAA,IACf;AAEA,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,YAAY,YAAY,SAAS,YAAY;AAAA,EACrD,CAAC;AAED,OAAK,8EAA8E,MAAM;AACxF,UAAM,iBAAiB,oBAAI,IAAY;AAEvC,UAAM,QAAQ,IAAI,gBAAgB;AAClC,UAAM,IAAI,aAAa,MAAM;AAAE,qBAAe,IAAI,CAAC;AAAA,IAAG,CAAC,CAAC;AACxD,UAAM,IAAI,aAAa,MAAM;AAAE,YAAM,IAAI,MAAM,cAAc;AAAA,IAAG,CAAC,CAAC;AAClE,UAAM,IAAI,aAAa,MAAM;AAAE,YAAM,IAAI,MAAM,cAAc;AAAA,IAAG,CAAC,CAAC;AAClE,UAAM,IAAI,aAAa,MAAM;AAAE,qBAAe,IAAI,CAAC;AAAA,IAAG,CAAC,CAAC;AAExD,QAAI;AACJ,QAAI;AACH,YAAM,QAAQ;AAAA,IACf,SAAS,GAAG;AACX,oBAAc;AAAA,IACf;AAEA,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,GAAG,uBAAuB,cAAc;AAC/C,WAAO,YAAa,YAA+B,OAAO,QAAQ,CAAC;AACnE,WAAO,YAAa,YAA+B,OAAO,CAAC,EAAE,SAAS,cAAc;AACpF,WAAO,YAAa,YAA+B,OAAO,CAAC,EAAE,SAAS,cAAc;AAAA,EACrF,CAAC;AAED,OAAK,sDAAsD,MAAM;AAChE,UAAM,iBAAiB,oBAAI,IAAY;AACvC,UAAM,cAA6B;AAAA,MAClC,aAAa,MAAM;AAAE,uBAAe,IAAI,CAAC;AAAA,MAAG,CAAC;AAAA,MAC7C,aAAa,MAAM;AAAE,uBAAe,IAAI,CAAC;AAAA,MAAG,CAAC;AAAA,IAC9C;AAEA,UAAM,QAAQ,IAAI,gBAAgB;AAClC,UAAM,IAAI,YAAY,CAAC,CAAC;AACxB,UAAM,IAAI,YAAY,CAAC,CAAC;AAExB,UAAM,OAAO,YAAY,CAAC,CAAC;AAE3B,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,GAAG,CAAC,eAAe,IAAI,CAAC,CAAC;AAEhC,UAAM,QAAQ;AAEd,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAC/B,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAAA,EAChC,CAAC;AAED,OAAK,iEAAiE,MAAM;AAC3E,UAAM,iBAAiB,oBAAI,IAAY;AACvC,UAAM,cAA6B;AAAA,MAClC,aAAa,MAAM;AAAE,uBAAe,IAAI,CAAC;AAAA,MAAG,CAAC;AAAA,MAC7C,aAAa,MAAM;AAAE,uBAAe,IAAI,CAAC;AAAA,MAAG,CAAC;AAAA,IAC9C;AAEA,UAAM,QAAQ,IAAI,gBAAgB;AAClC,UAAM,IAAI,YAAY,CAAC,CAAC;AACxB,UAAM,IAAI,YAAY,CAAC,CAAC;AAExB,UAAM,cAAc,YAAY,CAAC,CAAC;AAElC,WAAO,GAAG,CAAC,eAAe,IAAI,CAAC,CAAC;AAChC,WAAO,GAAG,CAAC,eAAe,IAAI,CAAC,CAAC;AAEhC,UAAM,QAAQ;AAEd,WAAO,GAAG,CAAC,eAAe,IAAI,CAAC,CAAC;AAChC,WAAO,GAAG,eAAe,IAAI,CAAC,CAAC;AAE/B,gBAAY,CAAC,EAAE,QAAQ;AAAA,EACxB,CAAC;AACF,CAAC;AAED,MAAM,wBAAwB,MAAM;AACnC,0CAAwC;AAAA,EAExC,MAAM,mBAAmB,oBAA4B;AAAA,IApOtD,OAoOsD;AAAA;AAAA;AAAA,IAC5C,SAAS;AAAA,IACjB,IAAI,QAAQ;AAAE,aAAO,KAAK;AAAA,IAAQ;AAAA,IACxB,uBAAuB,KAAqB;AAAE,WAAK;AAAU,aAAO,IAAI;AAAA,IAAQ;AAAA,IAChF,wBAAwB,KAAa,QAAsB;AAAE,WAAK;AAAA,IAAU;AAAA,EACvF;AAEA,OAAK,UAAU,MAAM;AACpB,UAAM,aAAa,IAAI,WAAW;AAElC,UAAM,OAAO,WAAW,QAAQ,MAAM;AACtC,WAAO,IAAI;AACX,WAAO,YAAY,KAAK,QAAQ,CAAC;AACjC,WAAO,YAAY,WAAW,OAAO,CAAC;AACtC,SAAK,QAAQ;AACb,WAAO,YAAY,WAAW,OAAO,CAAC;AAEtC,UAAM,OAAO,WAAW,QAAQ,MAAM;AACtC,UAAM,OAAO,WAAW,QAAQ,MAAM;AACtC,WAAO,YAAY,KAAK,QAAQ,KAAK,MAAM;AAC3C,WAAO,YAAY,WAAW,OAAO,CAAC;AAEtC,UAAM,OAAO,WAAW,QAAQ,QAAQ;AACxC,WAAO,YAAY,KAAK,QAAQ,CAAC;AACjC,WAAO,YAAY,WAAW,OAAO,CAAC;AAEtC,SAAK,QAAQ;AACb,WAAO,YAAY,WAAW,OAAO,CAAC;AAEtC,SAAK,QAAQ;AACb,WAAO,YAAY,WAAW,OAAO,CAAC;AAEtC,SAAK,QAAQ;AACb,WAAO,YAAY,WAAW,OAAO,CAAC;AAAA,EACvC,CAAC;AACF,CAAC;AAED,SAAS,aAAa,IAAgBA,OAA4B;AACjE,MAAI;AACH,OAAG;AACH,WAAO,KAAK,6CAA6C;AAAA,EAC1D,SAAS,GAAG;AACX,WAAO,GAAGA,MAAK,CAAC,CAAC;AAAA,EAClB;AACD;AAPS;AAST,MAAM,wBAAwB,MAAM;AACnC,QAAM,+BAA+B,MAAM;AAC1C,SAAK,qDAAqD,MAAM;AAC/D,YAAM,eAAe,IAAI,QAAQ;AAEjC,mBAAa,MAAM;AAClB,oCAA4B,MAAM;AACjC,uBAAa,MAAM,MAAM;AAAA,UAEzB,CAAC;AAAA,QACF,GAAG,KAAK;AAAA,MACT,GAAG,OAAK,EAAE,QAAQ,QAAQ,wBAAwB,MAAM,EAAE;AAAA,IAC3D,CAAC;AAED,SAAK,0CAA0C,MAAM;AACpD,mBAAa,MAAM;AAClB,oCAA4B,MAAM;AACjC,cAAI,gBAAgB;AAAA,QACrB,GAAG,KAAK;AAAA,MACT,GAAG,OAAK,EAAE,QAAQ,QAAQ,wBAAwB,MAAM,EAAE;AAAA,IAC3D,CAAC;AAED,SAAK,4DAA4D,MAAM;AACtE,YAAM,eAAe,IAAI,QAAQ;AACjC,kCAA4B,MAAM;AACjC,qBAAa,MAAM,MAAM;AAAA,QAEzB,CAAC,EAAE,QAAQ;AAAA,MACZ,CAAC;AAAA,IACF,CAAC;AAED,SAAK,kDAAkD,MAAM;AAE5D,mBAAa,MAAM;AAAA,MAAE,CAAC;AAEtB,kCAA4B,MAAM;AAEjC,wBAAgB,aAAa,MAAM;AAAA,QAAE,CAAC,CAAC;AAGvC,cAAM,kBAAkB,IAAI,gBAAgB;AAC5C,wBAAgB,IAAI,aAAa,MAAM;AAAA,QAAE,CAAC,CAAC;AAC3C,wBAAgB,eAAe;AAE/B,qBAAa,MAAM;AAAA,QAAE,CAAC,EAAE,QAAQ;AAAA,MACjC,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AAED,QAAM,sCAAsC,MAAM;AACjD,4CAAwC;AAExC,SAAK,cAAc,MAAM;AACxB,mBAAa,MAAM;AAAA,MAAE,CAAC,EAAE,QAAQ;AAAA,IACjC,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": ["test"]
}
