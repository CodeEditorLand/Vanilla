{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/timeTravelScheduler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy, numberComparator, tieBreakComparators } from '../../common/arrays.js';\nimport { Emitter, Event } from '../../common/event.js';\nimport { Disposable, IDisposable } from '../../common/lifecycle.js';\nimport { setTimeout0, setTimeout0IsFaster } from '../../common/platform.js';\n\nexport type TimeOffset = number;\n\nexport interface Scheduler {\n\tschedule(task: ScheduledTask): IDisposable;\n\tget now(): TimeOffset;\n}\n\nexport interface ScheduledTask {\n\treadonly time: TimeOffset;\n\treadonly source: ScheduledTaskSource;\n\n\trun(): void;\n}\n\nexport interface ScheduledTaskSource {\n\ttoString(): string;\n\treadonly stackTrace: string | undefined;\n}\n\ninterface ExtendedScheduledTask extends ScheduledTask {\n\tid: number;\n}\n\nconst scheduledTaskComparator = tieBreakComparators<ExtendedScheduledTask>(\n\tcompareBy(i => i.time, numberComparator),\n\tcompareBy(i => i.id, numberComparator),\n);\n\nexport class TimeTravelScheduler implements Scheduler {\n\tprivate taskCounter = 0;\n\tprivate _now: TimeOffset = 0;\n\tprivate readonly queue: PriorityQueue<ExtendedScheduledTask> = new SimplePriorityQueue<ExtendedScheduledTask>([], scheduledTaskComparator);\n\n\tprivate readonly taskScheduledEmitter = new Emitter<{ task: ScheduledTask }>();\n\tpublic readonly onTaskScheduled = this.taskScheduledEmitter.event;\n\n\tschedule(task: ScheduledTask): IDisposable {\n\t\tif (task.time < this._now) {\n\t\t\tthrow new Error(`Scheduled time (${task.time}) must be equal to or greater than the current time (${this._now}).`);\n\t\t}\n\t\tconst extendedTask: ExtendedScheduledTask = { ...task, id: this.taskCounter++ };\n\t\tthis.queue.add(extendedTask);\n\t\tthis.taskScheduledEmitter.fire({ task });\n\t\treturn { dispose: () => this.queue.remove(extendedTask) };\n\t}\n\n\tget now(): TimeOffset {\n\t\treturn this._now;\n\t}\n\n\tget hasScheduledTasks(): boolean {\n\t\treturn this.queue.length > 0;\n\t}\n\n\tgetScheduledTasks(): readonly ScheduledTask[] {\n\t\treturn this.queue.toSortedArray();\n\t}\n\n\trunNext(): ScheduledTask | undefined {\n\t\tconst task = this.queue.removeMin();\n\t\tif (task) {\n\t\t\tthis._now = task.time;\n\t\t\ttask.run();\n\t\t}\n\n\t\treturn task;\n\t}\n\n\tinstallGlobally(): IDisposable {\n\t\treturn overwriteGlobals(this);\n\t}\n}\n\nexport class AsyncSchedulerProcessor extends Disposable {\n\tprivate isProcessing = false;\n\tprivate readonly _history = new Array<ScheduledTask>();\n\tpublic get history(): readonly ScheduledTask[] { return this._history; }\n\n\tprivate readonly maxTaskCount: number;\n\tprivate readonly useSetImmediate: boolean;\n\n\tprivate readonly queueEmptyEmitter = new Emitter<void>();\n\tpublic readonly onTaskQueueEmpty = this.queueEmptyEmitter.event;\n\n\tprivate lastError: Error | undefined;\n\n\tconstructor(private readonly scheduler: TimeTravelScheduler, options?: { useSetImmediate?: boolean; maxTaskCount?: number }) {\n\t\tsuper();\n\n\t\tthis.maxTaskCount = options && options.maxTaskCount ? options.maxTaskCount : 100;\n\t\tthis.useSetImmediate = options && options.useSetImmediate ? options.useSetImmediate : false;\n\n\t\tthis._register(scheduler.onTaskScheduled(() => {\n\t\t\tif (this.isProcessing) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.isProcessing = true;\n\t\t\t\tthis.schedule();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate schedule() {\n\t\t// This allows promises created by a previous task to settle and schedule tasks before the next task is run.\n\t\t// Tasks scheduled in those promises might have to run before the current next task.\n\t\tPromise.resolve().then(() => {\n\t\t\tif (this.useSetImmediate) {\n\t\t\t\toriginalGlobalValues.setImmediate(() => this.process());\n\t\t\t} else if (setTimeout0IsFaster) {\n\t\t\t\tsetTimeout0(() => this.process());\n\t\t\t} else {\n\t\t\t\toriginalGlobalValues.setTimeout(() => this.process());\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate process() {\n\t\tconst executedTask = this.scheduler.runNext();\n\t\tif (executedTask) {\n\t\t\tthis._history.push(executedTask);\n\n\t\t\tif (this.history.length >= this.maxTaskCount && this.scheduler.hasScheduledTasks) {\n\t\t\t\tconst lastTasks = this._history.slice(Math.max(0, this.history.length - 10)).map(h => `${h.source.toString()}: ${h.source.stackTrace}`);\n\t\t\t\tconst e = new Error(`Queue did not get empty after processing ${this.history.length} items. These are the last ${lastTasks.length} scheduled tasks:\\n${lastTasks.join('\\n\\n\\n')}`);\n\t\t\t\tthis.lastError = e;\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\n\t\tif (this.scheduler.hasScheduledTasks) {\n\t\t\tthis.schedule();\n\t\t} else {\n\t\t\tthis.isProcessing = false;\n\t\t\tthis.queueEmptyEmitter.fire();\n\t\t}\n\t}\n\n\twaitForEmptyQueue(): Promise<void> {\n\t\tif (this.lastError) {\n\t\t\tconst error = this.lastError;\n\t\t\tthis.lastError = undefined;\n\t\t\tthrow error;\n\t\t}\n\t\tif (!this.isProcessing) {\n\t\t\treturn Promise.resolve();\n\t\t} else {\n\t\t\treturn Event.toPromise(this.onTaskQueueEmpty).then(() => {\n\t\t\t\tif (this.lastError) {\n\t\t\t\t\tthrow this.lastError;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\n\nexport async function runWithFakedTimers<T>(options: { useFakeTimers?: boolean; useSetImmediate?: boolean; maxTaskCount?: number }, fn: () => Promise<T>): Promise<T> {\n\tconst useFakeTimers = options.useFakeTimers === undefined ? true : options.useFakeTimers;\n\tif (!useFakeTimers) {\n\t\treturn fn();\n\t}\n\n\tconst scheduler = new TimeTravelScheduler();\n\tconst schedulerProcessor = new AsyncSchedulerProcessor(scheduler, { useSetImmediate: options.useSetImmediate, maxTaskCount: options.maxTaskCount });\n\tconst globalInstallDisposable = scheduler.installGlobally();\n\n\tlet result: T;\n\ttry {\n\t\tresult = await fn();\n\t} finally {\n\t\tglobalInstallDisposable.dispose();\n\n\t\ttry {\n\t\t\t// We process the remaining scheduled tasks.\n\t\t\t// The global override is no longer active, so during this, no more tasks will be scheduled.\n\t\t\tawait schedulerProcessor.waitForEmptyQueue();\n\t\t} finally {\n\t\t\tschedulerProcessor.dispose();\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport const originalGlobalValues = {\n\tsetTimeout: globalThis.setTimeout.bind(globalThis),\n\tclearTimeout: globalThis.clearTimeout.bind(globalThis),\n\tsetInterval: globalThis.setInterval.bind(globalThis),\n\tclearInterval: globalThis.clearInterval.bind(globalThis),\n\tsetImmediate: globalThis.setImmediate?.bind(globalThis),\n\tclearImmediate: globalThis.clearImmediate?.bind(globalThis),\n\trequestAnimationFrame: globalThis.requestAnimationFrame?.bind(globalThis),\n\tcancelAnimationFrame: globalThis.cancelAnimationFrame?.bind(globalThis),\n\tDate: globalThis.Date,\n};\n\nfunction setTimeout(scheduler: Scheduler, handler: TimerHandler, timeout: number = 0): IDisposable {\n\tif (typeof handler === 'string') {\n\t\tthrow new Error('String handler args should not be used and are not supported');\n\t}\n\n\treturn scheduler.schedule({\n\t\ttime: scheduler.now + timeout,\n\t\trun: () => {\n\t\t\thandler();\n\t\t},\n\t\tsource: {\n\t\t\ttoString() { return 'setTimeout'; },\n\t\t\tstackTrace: new Error().stack,\n\t\t}\n\t});\n}\n\nfunction setInterval(scheduler: Scheduler, handler: TimerHandler, interval: number): IDisposable {\n\tif (typeof handler === 'string') {\n\t\tthrow new Error('String handler args should not be used and are not supported');\n\t}\n\tconst validatedHandler = handler;\n\n\tlet iterCount = 0;\n\tconst stackTrace = new Error().stack;\n\n\tlet disposed = false;\n\tlet lastDisposable: IDisposable;\n\n\tfunction schedule(): void {\n\t\titerCount++;\n\t\tconst curIter = iterCount;\n\t\tlastDisposable = scheduler.schedule({\n\t\t\ttime: scheduler.now + interval,\n\t\t\trun() {\n\t\t\t\tif (!disposed) {\n\t\t\t\t\tschedule();\n\t\t\t\t\tvalidatedHandler();\n\t\t\t\t}\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\ttoString() { return `setInterval (iteration ${curIter})`; },\n\t\t\t\tstackTrace,\n\t\t\t}\n\t\t});\n\t}\n\n\tschedule();\n\n\treturn {\n\t\tdispose: () => {\n\t\t\tif (disposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdisposed = true;\n\t\t\tlastDisposable.dispose();\n\t\t}\n\t};\n}\n\nfunction overwriteGlobals(scheduler: Scheduler): IDisposable {\n\tglobalThis.setTimeout = ((handler: TimerHandler, timeout?: number) => setTimeout(scheduler, handler, timeout)) as any;\n\tglobalThis.clearTimeout = (timeoutId: any) => {\n\t\tif (typeof timeoutId === 'object' && timeoutId && 'dispose' in timeoutId) {\n\t\t\ttimeoutId.dispose();\n\t\t} else {\n\t\t\toriginalGlobalValues.clearTimeout(timeoutId);\n\t\t}\n\t};\n\n\tglobalThis.setInterval = ((handler: TimerHandler, timeout: number) => setInterval(scheduler, handler, timeout)) as any;\n\tglobalThis.clearInterval = (timeoutId: any) => {\n\t\tif (typeof timeoutId === 'object' && timeoutId && 'dispose' in timeoutId) {\n\t\t\ttimeoutId.dispose();\n\t\t} else {\n\t\t\toriginalGlobalValues.clearInterval(timeoutId);\n\t\t}\n\t};\n\n\tglobalThis.Date = createDateClass(scheduler);\n\n\treturn {\n\t\tdispose: () => {\n\t\t\tObject.assign(globalThis, originalGlobalValues);\n\t\t}\n\t};\n}\n\nfunction createDateClass(scheduler: Scheduler): DateConstructor {\n\tconst OriginalDate = originalGlobalValues.Date;\n\n\tfunction SchedulerDate(this: any, ...args: any): any {\n\t\t// the Date constructor called as a function, ref Ecma-262 Edition 5.1, section 15.9.2.\n\t\t// This remains so in the 10th edition of 2019 as well.\n\t\tif (!(this instanceof SchedulerDate)) {\n\t\t\treturn new OriginalDate(scheduler.now).toString();\n\t\t}\n\n\t\t// if Date is called as a constructor with 'new' keyword\n\t\tif (args.length === 0) {\n\t\t\treturn new OriginalDate(scheduler.now);\n\t\t}\n\t\treturn new (OriginalDate as any)(...args);\n\t}\n\n\tfor (const prop in OriginalDate) {\n\t\tif (OriginalDate.hasOwnProperty(prop)) {\n\t\t\t(SchedulerDate as any)[prop] = (OriginalDate as any)[prop];\n\t\t}\n\t}\n\n\tSchedulerDate.now = function now() {\n\t\treturn scheduler.now;\n\t};\n\tSchedulerDate.toString = function toString() {\n\t\treturn OriginalDate.toString();\n\t};\n\tSchedulerDate.prototype = OriginalDate.prototype;\n\tSchedulerDate.parse = OriginalDate.parse;\n\tSchedulerDate.UTC = OriginalDate.UTC;\n\tSchedulerDate.prototype.toUTCString = OriginalDate.prototype.toUTCString;\n\n\treturn SchedulerDate as any;\n}\n\ninterface PriorityQueue<T> {\n\tlength: number;\n\tadd(value: T): void;\n\tremove(value: T): void;\n\n\tremoveMin(): T | undefined;\n\ttoSortedArray(): T[];\n}\n\nclass SimplePriorityQueue<T> implements PriorityQueue<T> {\n\tprivate isSorted = false;\n\tprivate items: T[];\n\n\tconstructor(items: T[], private readonly compare: (a: T, b: T) => number) {\n\t\tthis.items = items;\n\t}\n\n\tget length(): number {\n\t\treturn this.items.length;\n\t}\n\n\tadd(value: T): void {\n\t\tthis.items.push(value);\n\t\tthis.isSorted = false;\n\t}\n\n\tremove(value: T): void {\n\t\tthis.items.splice(this.items.indexOf(value), 1);\n\t\tthis.isSorted = false;\n\t}\n\n\tremoveMin(): T | undefined {\n\t\tthis.ensureSorted();\n\t\treturn this.items.shift();\n\t}\n\n\tgetMin(): T | undefined {\n\t\tthis.ensureSorted();\n\t\treturn this.items[0];\n\t}\n\n\ttoSortedArray(): T[] {\n\t\tthis.ensureSorted();\n\t\treturn [...this.items];\n\t}\n\n\tprivate ensureSorted() {\n\t\tif (!this.isSorted) {\n\t\t\tthis.items.sort(this.compare);\n\t\t\tthis.isSorted = true;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
