import i from"assert";import{CancellationToken as s}from"../../common/cancellation.js";import{TfIdfCalculator as a}from"../../common/tfIdf.js";import{ensureNoDisposablesAreLeakedInTestSuite as l}from"./utils.js";function r(t){if(t.length===0)return[[]];const e=[];for(let o=0;o<t.length;o++){const f=[...t.slice(0,o),...t.slice(o+1)],d=r(f);for(let u=0;u<d.length;u++)e.push([t[o],...d[u]])}return e}function n(t,e){t.sort((o,f)=>f.score-o.score||o.key.localeCompare(f.key)),i.strictEqual(t.length,e.length);for(let o=0;o<e.length;o++)i.strictEqual(t[o].key,e[o])}suite("TF-IDF Calculator",function(){l(),test("Should return no scores when no documents are given",()=>{const e=new a().calculateScores("something",s.None);n(e,[])}),test("Should return no scores for term not in document",()=>{const e=new a().updateDocuments([c("A","cat dog fish")]).calculateScores("elepant",s.None);n(e,[])}),test("Should return scores for document with exact match",()=>{for(const t of r([c("A","cat dog cat"),c("B","cat fish")])){const o=new a().updateDocuments(t).calculateScores("dog",s.None);n(o,["A"])}}),test("Should return document with more matches first",()=>{for(const t of r([c("/A","cat dog cat"),c("/B","cat fish"),c("/C","frog")])){const o=new a().updateDocuments(t).calculateScores("cat",s.None);n(o,["/A","/B"])}}),test("Should return document with more matches first when term appears in all documents",()=>{for(const t of r([c("/A","cat dog cat cat"),c("/B","cat fish"),c("/C","frog cat cat")])){const o=new a().updateDocuments(t).calculateScores("cat",s.None);n(o,["/A","/C","/B"])}}),test("Should weigh less common term higher",()=>{for(const t of r([c("/A","cat dog cat"),c("/B","fish"),c("/C","cat cat cat cat"),c("/D","cat fish")])){const o=new a().updateDocuments(t).calculateScores("cat the dog",s.None);n(o,["/A","/C","/D"])}}),test("Should weigh chunks with less common terms higher",()=>{for(const t of r([c("/A",["cat dog cat","fish"]),c("/B",["cat cat cat cat dog","dog"])])){const o=new a().updateDocuments(t).calculateScores("cat",s.None);n(o,["/B","/A"])}for(const t of r([c("/A",["cat dog cat","fish"]),c("/B",["cat cat cat cat dog","dog"])])){const o=new a().updateDocuments(t).calculateScores("dog",s.None);n(o,["/A","/B","/B"])}for(const t of r([c("/A",["cat dog cat","fish"]),c("/B",["cat cat cat cat dog","dog"])])){const o=new a().updateDocuments(t).calculateScores("cat the dog",s.None);n(o,["/B","/A","/B"])}for(const t of r([c("/A",["cat dog cat","fish"]),c("/B",["cat cat cat cat dog","dog"])])){const o=new a().updateDocuments(t).calculateScores("lake fish",s.None);n(o,["/A"])}}),test("Should ignore case and punctuation",()=>{for(const t of r([c("/A","Cat doG.cat"),c("/B","cAt fiSH"),c("/C","frOg")])){const o=new a().updateDocuments(t).calculateScores(". ,CaT!  ",s.None);n(o,["/A","/B"])}}),test("Should match on camelCase words",()=>{for(const t of r([c("/A","catDog cat"),c("/B","fishCatFish"),c("/C","frogcat")])){const o=new a().updateDocuments(t).calculateScores("catDOG",s.None);n(o,["/A","/B"])}}),test("Should not match document after delete",()=>{const t=c("/A","cat dog cat"),e=c("/B","cat fish"),o=c("/C","frog"),f=new a().updateDocuments([t,e,o]);let d=f.calculateScores("cat",s.None);n(d,["/A","/B"]),f.deleteDocument(t.key),d=f.calculateScores("cat",s.None),n(d,["/B"]),f.deleteDocument(o.key),d=f.calculateScores("cat",s.None),n(d,["/B"]),f.deleteDocument(e.key),d=f.calculateScores("cat",s.None),n(d,[])})});function c(t,e){return{key:t,textChunks:Array.isArray(e)?e:[e]}}
