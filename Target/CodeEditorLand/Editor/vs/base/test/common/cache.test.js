import e from"assert";import{timeout as c}from"../../common/async.js";import{Cache as n}from"../../common/cache.js";import{ensureNoDisposablesAreLeakedInTestSuite as a}from"./utils.js";suite("Cache",()=>{a(),test("simple value",()=>{let s=0;const t=new n(r=>Promise.resolve(s++));return t.get().promise.then(r=>e.strictEqual(r,0),()=>e.fail("Unexpected assertion error")).then(()=>t.get().promise).then(r=>e.strictEqual(r,0),()=>e.fail("Unexpected assertion error"))}),test("simple error",()=>{let s=0;const t=new n(r=>Promise.reject(new Error(String(s++))));return t.get().promise.then(()=>e.fail("Unexpected assertion error"),r=>e.strictEqual(r.message,"0")).then(()=>t.get().promise).then(()=>e.fail("Unexpected assertion error"),r=>e.strictEqual(r.message,"0"))}),test("should retry cancellations",()=>{let s=0,t=0;const r=new n(o=>(s++,Promise.resolve(c(2,o).then(()=>t++))));e.strictEqual(s,0),e.strictEqual(t,0);let i=r.get();return e.strictEqual(s,1),e.strictEqual(t,0),i.promise.then(void 0,()=>e(!0)),i.dispose(),e.strictEqual(s,1),e.strictEqual(t,0),i=r.get(),e.strictEqual(s,2),e.strictEqual(t,0),i.promise.then(o=>{e.strictEqual(s,2),e.strictEqual(t,1)}).then(()=>r.get().promise).then(o=>{e.strictEqual(s,2),e.strictEqual(t,1)})})});
