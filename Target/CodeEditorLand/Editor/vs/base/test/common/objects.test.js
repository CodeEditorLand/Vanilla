import n from"assert";import*as s from"../../common/objects.js";import{ensureNoDisposablesAreLeakedInTestSuite as c}from"./utils.js";const i=(e,t,r)=>{n(s.equals(e,t),r),n(s.equals(t,e),"[reverse] "+r)},a=(e,t,r)=>{n(!s.equals(e,t),r),n(!s.equals(t,e),"[reverse] "+r)};suite("Objects",()=>{c(),test("equals",()=>{i(null,null,"null"),i(void 0,void 0,"undefined"),i(1234,1234,"numbers"),i("","","empty strings"),i("1234","1234","strings"),i([],[],"empty arrays"),i([[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]],"nested arrays"),i({},{},"empty objects"),i({a:1,b:"123"},{a:1,b:"123"},"objects"),i({a:1,b:"123"},{b:"123",a:1},"objects (key order)"),i({a:{b:1,c:2},b:3},{a:{b:1,c:2},b:3},"nested objects"),a(null,void 0,"null != undefined"),a(null,"","null != empty string"),a(null,[],"null != empty array"),a(null,{},"null != empty object"),a(null,0,"null != zero"),a(void 0,"","undefined != empty string"),a(void 0,[],"undefined != empty array"),a(void 0,{},"undefined != empty object"),a(void 0,0,"undefined != zero"),a("",[],"empty string != empty array"),a("",{},"empty string != empty object"),a("",0,"empty string != zero"),a([],{},"empty array != empty object"),a([],0,"empty array != zero"),a(0,[],"zero != empty array"),a("1234",1234,"string !== number"),a([[1,2,3],[4,5,6]],[[1,2,3],[4,5,6e3]],"arrays"),a({a:{b:1,c:2},b:3},{b:3,a:{b:9,c:2}},"objects")}),test("mixin - array",function(){const e={};s.mixin(e,{bar:[1,2,3]}),n(e.bar),n(Array.isArray(e.bar)),n.strictEqual(e.bar.length,3),n.strictEqual(e.bar[0],1),n.strictEqual(e.bar[1],2),n.strictEqual(e.bar[2],3)}),test("mixin - no overwrite",function(){const e={bar:"123"},t={bar:"456"};s.mixin(e,t,!1),n.strictEqual(e.bar,"123")}),test("cloneAndChange",()=>{const e={something:"hello"},t={o1:e,o2:e};n.deepStrictEqual(s.cloneAndChange(t,()=>{}),t)}),test("safeStringify",()=>{const e={friend:null},t={friend:null};e.friend=t,t.friend=e;const r=[1];r.push(r);const l={a:42,b:null,c:[e,t],d:null,e:BigInt(42)};r.push(l),l.b=l,l.d=r;const u=s.safeStringify(l);n.deepStrictEqual(JSON.parse(u),{a:42,b:"[Circular]",c:[{friend:{friend:"[Circular]"}},"[Circular]"],d:[1,"[Circular]","[Circular]"],e:"[BigInt 42]"})}),test("distinct",()=>{const e={one:"one",two:2,three:{3:!0},four:!1};let t=s.distinct(e,e);n.strictEqual(Object.keys(t).length,0);let r={};t=s.distinct(e,r),n.strictEqual(Object.keys(t).length,0),r={one:"one",two:2},t=s.distinct(e,r),n.strictEqual(Object.keys(t).length,0),r={three:{3:!0},four:!1},t=s.distinct(e,r),n.strictEqual(Object.keys(t).length,0),r={one:"two",two:2,three:{3:!0},four:!0},t=s.distinct(e,r),n.strictEqual(Object.keys(t).length,2),n.strictEqual(t.one,"two"),n.strictEqual(t.four,!0),r={one:null,two:2,three:{3:!0},four:void 0},t=s.distinct(e,r),n.strictEqual(Object.keys(t).length,2),n.strictEqual(t.one,null),n.strictEqual(t.four,void 0),r={one:"two",two:3,three:{3:!1},four:!0},t=s.distinct(e,r),n.strictEqual(Object.keys(t).length,4),n.strictEqual(t.one,"two"),n.strictEqual(t.two,3),n.strictEqual(t.three?.["3"],!1),n.strictEqual(t.four,!0)}),test("getCaseInsensitive",()=>{const e={lowercase:123,mIxEdCaSe:456};n.strictEqual(e.lowercase,s.getCaseInsensitive(e,"lowercase")),n.strictEqual(e.lowercase,s.getCaseInsensitive(e,"lOwErCaSe")),n.strictEqual(e.mIxEdCaSe,s.getCaseInsensitive(e,"MIXEDCASE")),n.strictEqual(e.mIxEdCaSe,s.getCaseInsensitive(e,"mixedcase"))})}),test("mapValues",()=>{const e={a:1,b:2,c:3},t=s.mapValues(e,(r,l)=>`${l}: ${r*2}`);n.deepStrictEqual(t,{a:"a: 2",b:"b: 4",c:"c: 6"})});
