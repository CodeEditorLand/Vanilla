{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/skipList.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { binarySearch } from '../../common/arrays.js';\nimport { SkipList } from '../../common/skipList.js';\nimport { StopWatch } from '../../common/stopwatch.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\n\nsuite('SkipList', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertValues<V>(list: SkipList<any, V>, expected: V[]) {\n\t\tassert.strictEqual(list.size, expected.length);\n\t\tassert.deepStrictEqual([...list.values()], expected);\n\n\t\tconst valuesFromEntries = [...list.entries()].map(entry => entry[1]);\n\t\tassert.deepStrictEqual(valuesFromEntries, expected);\n\n\t\tconst valuesFromIter = [...list].map(entry => entry[1]);\n\t\tassert.deepStrictEqual(valuesFromIter, expected);\n\n\t\tlet i = 0;\n\t\tlist.forEach((value, _key, map) => {\n\t\t\tassert.ok(map === list);\n\t\t\tassert.deepStrictEqual(value, expected[i++]);\n\t\t});\n\t}\n\n\tfunction assertKeys<K>(list: SkipList<K, any>, expected: K[]) {\n\t\tassert.strictEqual(list.size, expected.length);\n\t\tassert.deepStrictEqual([...list.keys()], expected);\n\n\t\tconst keysFromEntries = [...list.entries()].map(entry => entry[0]);\n\t\tassert.deepStrictEqual(keysFromEntries, expected);\n\n\t\tconst keysFromIter = [...list].map(entry => entry[0]);\n\t\tassert.deepStrictEqual(keysFromIter, expected);\n\n\t\tlet i = 0;\n\t\tlist.forEach((_value, key, map) => {\n\t\t\tassert.ok(map === list);\n\t\t\tassert.deepStrictEqual(key, expected[i++]);\n\t\t});\n\t}\n\n\ttest('set/get/delete', function () {\n\t\tconst list = new SkipList<number, number>((a, b) => a - b);\n\n\t\tassert.strictEqual(list.get(3), undefined);\n\t\tlist.set(3, 1);\n\t\tassert.strictEqual(list.get(3), 1);\n\t\tassertValues(list, [1]);\n\n\t\tlist.set(3, 3);\n\t\tassertValues(list, [3]);\n\n\t\tlist.set(1, 1);\n\t\tlist.set(4, 4);\n\t\tassert.strictEqual(list.get(3), 3);\n\t\tassert.strictEqual(list.get(1), 1);\n\t\tassert.strictEqual(list.get(4), 4);\n\t\tassertValues(list, [1, 3, 4]);\n\n\t\tassert.strictEqual(list.delete(17), false);\n\n\t\tassert.strictEqual(list.delete(1), true);\n\t\tassert.strictEqual(list.get(1), undefined);\n\t\tassert.strictEqual(list.get(3), 3);\n\t\tassert.strictEqual(list.get(4), 4);\n\n\t\tassertValues(list, [3, 4]);\n\t});\n\n\ttest('Figure 3', function () {\n\t\tconst list = new SkipList<number, boolean>((a, b) => a - b);\n\t\tlist.set(3, true);\n\t\tlist.set(6, true);\n\t\tlist.set(7, true);\n\t\tlist.set(9, true);\n\t\tlist.set(12, true);\n\t\tlist.set(19, true);\n\t\tlist.set(21, true);\n\t\tlist.set(25, true);\n\n\t\tassertKeys(list, [3, 6, 7, 9, 12, 19, 21, 25]);\n\n\t\tlist.set(17, true);\n\t\tassert.deepStrictEqual(list.size, 9);\n\t\tassertKeys(list, [3, 6, 7, 9, 12, 17, 19, 21, 25]);\n\t});\n\n\ttest('clear ( CPU pegged after some builds #194853)', function () {\n\t\tconst list = new SkipList<number, boolean>((a, b) => a - b);\n\t\tlist.set(1, true);\n\t\tlist.set(2, true);\n\t\tlist.set(3, true);\n\t\tassert.strictEqual(list.size, 3);\n\t\tlist.clear();\n\t\tassert.strictEqual(list.size, 0);\n\t\tassert.strictEqual(list.get(1), undefined);\n\t\tassert.strictEqual(list.get(2), undefined);\n\t\tassert.strictEqual(list.get(3), undefined);\n\t});\n\n\ttest('capacity max', function () {\n\t\tconst list = new SkipList<number, boolean>((a, b) => a - b, 10);\n\t\tlist.set(1, true);\n\t\tlist.set(2, true);\n\t\tlist.set(3, true);\n\t\tlist.set(4, true);\n\t\tlist.set(5, true);\n\t\tlist.set(6, true);\n\t\tlist.set(7, true);\n\t\tlist.set(8, true);\n\t\tlist.set(9, true);\n\t\tlist.set(10, true);\n\t\tlist.set(11, true);\n\t\tlist.set(12, true);\n\n\t\tassertKeys(list, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n\t});\n\n\tconst cmp = (a: number, b: number): number => {\n\t\tif (a < b) {\n\t\t\treturn -1;\n\t\t} else if (a > b) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n\n\tfunction insertArraySorted(array: number[], element: number) {\n\t\tlet idx = binarySearch(array, element, cmp);\n\t\tif (idx >= 0) {\n\t\t\tarray[idx] = element;\n\t\t} else {\n\t\t\tidx = ~idx;\n\t\t\t// array = array.slice(0, idx).concat(element, array.slice(idx));\n\t\t\tarray.splice(idx, 0, element);\n\t\t}\n\t\treturn array;\n\t}\n\n\tfunction delArraySorted(array: number[], element: number) {\n\t\tconst idx = binarySearch(array, element, cmp);\n\t\tif (idx >= 0) {\n\t\t\t// array = array.slice(0, idx).concat(array.slice(idx));\n\t\t\tarray.splice(idx, 1);\n\t\t}\n\t\treturn array;\n\t}\n\n\n\ttest.skip('perf', function () {\n\n\t\t// data\n\t\tconst max = 2 ** 16;\n\t\tconst values = new Set<number>();\n\t\tfor (let i = 0; i < max; i++) {\n\t\t\tconst value = Math.floor(Math.random() * max);\n\t\t\tvalues.add(value);\n\t\t}\n\t\tconsole.log(values.size);\n\n\t\t// init\n\t\tconst list = new SkipList<number, boolean>(cmp, max);\n\t\tlet sw = new StopWatch();\n\t\tvalues.forEach(value => list.set(value, true));\n\t\tsw.stop();\n\t\tconsole.log(`[LIST] ${list.size} elements after ${sw.elapsed()}ms`);\n\t\tlet array: number[] = [];\n\t\tsw = new StopWatch();\n\t\tvalues.forEach(value => array = insertArraySorted(array, value));\n\t\tsw.stop();\n\t\tconsole.log(`[ARRAY] ${array.length} elements after ${sw.elapsed()}ms`);\n\n\t\t// get\n\t\tsw = new StopWatch();\n\t\tconst someValues = [...values].slice(0, values.size / 4);\n\t\tsomeValues.forEach(key => {\n\t\t\tconst value = list.get(key); // find\n\t\t\tconsole.assert(value, '[LIST] must have ' + key);\n\t\t\tlist.get(-key); // miss\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[LIST] retrieve ${sw.elapsed()}ms (${(sw.elapsed() / (someValues.length * 2)).toPrecision(4)}ms/op)`);\n\t\tsw = new StopWatch();\n\t\tsomeValues.forEach(key => {\n\t\t\tconst idx = binarySearch(array, key, cmp); // find\n\t\t\tconsole.assert(idx >= 0, '[ARRAY] must have ' + key);\n\t\t\tbinarySearch(array, -key, cmp); // miss\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[ARRAY] retrieve ${sw.elapsed()}ms (${(sw.elapsed() / (someValues.length * 2)).toPrecision(4)}ms/op)`);\n\n\n\t\t// insert\n\t\tsw = new StopWatch();\n\t\tsomeValues.forEach(key => {\n\t\t\tlist.set(-key, false);\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[LIST] insert ${sw.elapsed()}ms (${(sw.elapsed() / someValues.length).toPrecision(4)}ms/op)`);\n\t\tsw = new StopWatch();\n\t\tsomeValues.forEach(key => {\n\t\t\tarray = insertArraySorted(array, -key);\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[ARRAY] insert ${sw.elapsed()}ms (${(sw.elapsed() / someValues.length).toPrecision(4)}ms/op)`);\n\n\t\t// delete\n\t\tsw = new StopWatch();\n\t\tsomeValues.forEach(key => {\n\t\t\tlist.delete(key); // find\n\t\t\tlist.delete(-key); // miss\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[LIST] delete ${sw.elapsed()}ms (${(sw.elapsed() / (someValues.length * 2)).toPrecision(4)}ms/op)`);\n\t\tsw = new StopWatch();\n\t\tsomeValues.forEach(key => {\n\t\t\tarray = delArraySorted(array, key); // find\n\t\t\tarray = delArraySorted(array, -key); // miss\n\t\t});\n\t\tsw.stop();\n\t\tconsole.log(`[ARRAY] delete ${sw.elapsed()}ms (${(sw.elapsed() / (someValues.length * 2)).toPrecision(4)}ms/op)`);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
