{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/assertHeap.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\ndeclare const __analyzeSnapshotInTests: (currentTest: string, classes: readonly string[]) => Promise<({ done: Promise<number[]>; file: string })>;\n\nlet currentTest: Mocha.Test | undefined;\n\nconst snapshotsToAssert: ({ counts: Promise<number[]>; file: string; test: string; opts: ISnapshotAssertOptions })[] = [];\n\nsetup(function () {\n\tcurrentTest = this.currentTest;\n});\n\nsuiteTeardown(async () => {\n\tawait Promise.all(snapshotsToAssert.map(async snap => {\n\t\tconst counts = await snap.counts;\n\n\t\tconst asserts = Object.entries(snap.opts.classes);\n\t\tif (asserts.length !== counts.length) {\n\t\t\tthrow new Error(`expected class counts to equal assertions length for ${snap.test}`);\n\t\t}\n\n\t\tfor (const [i, [name, doAssert]] of asserts.entries()) {\n\t\t\ttry {\n\t\t\t\tdoAssert(counts[i]);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Error(`Unexpected number of ${name} instances (${counts[i]}) after \"${snap.test}\":\\n\\n${e.message}\\n\\nSnapshot saved at: ${snap.file}`);\n\t\t\t}\n\t\t}\n\t}));\n\n\tsnapshotsToAssert.length = 0;\n});\n\nexport interface ISnapshotAssertOptions {\n\tclasses: Record<string, (count: number) => void>;\n}\n\nconst snapshotMinTime = 20_000;\n\n/**\n * Takes a heap snapshot, and asserts the state of classes in memory. This\n * works in Node and the Electron sandbox, but is a no-op in the browser.\n * Snapshots are process asynchronously and will report failures at the end of\n * the suite.\n *\n * This method should be used sparingly (e.g. once at the end of a suite to\n * ensure nothing leaked before), as gathering a heap snapshot is fairly\n * slow, at least until V8 11.5.130 (https://v8.dev/blog/speeding-up-v8-heap-snapshots).\n *\n * Takes options containing a mapping of class names, and assertion functions\n * to run on the number of retained instances of that class. For example:\n *\n * ```ts\n * assertSnapshot({\n *\tclasses: {\n *\t\tShouldNeverLeak: count => assert.strictEqual(count, 0),\n *\t\tSomeSingleton: count => assert(count <= 1),\n *\t}\n *});\n * ```\n */\nexport async function assertHeap(opts: ISnapshotAssertOptions) {\n\tif (!currentTest) {\n\t\tthrow new Error('assertSnapshot can only be used when a test is running');\n\t}\n\n\t// snapshotting can take a moment, ensure the test timeout is decently long\n\t// so it doesn't immediately fail.\n\tif (currentTest.timeout() < snapshotMinTime) {\n\t\tcurrentTest.timeout(snapshotMinTime);\n\t}\n\n\tif (typeof __analyzeSnapshotInTests === 'undefined') {\n\t\treturn; // running in browser, no-op\n\t}\n\n\tconst { done, file } = await __analyzeSnapshotInTests(currentTest.fullTitle(), Object.keys(opts.classes));\n\tsnapshotsToAssert.push({ counts: done, file, test: currentTest.fullTitle(), opts });\n}\n\n"],
  "mappings": ";;AAQA,IAAI;AAEJ,MAAM,oBAAiH,CAAC;AAExH,MAAM,WAAY;AACjB,gBAAc,KAAK;AACpB,CAAC;AAED,cAAc,YAAY;AACzB,QAAM,QAAQ,IAAI,kBAAkB,IAAI,OAAM,SAAQ;AACrD,UAAM,SAAS,MAAM,KAAK;AAE1B,UAAM,UAAU,OAAO,QAAQ,KAAK,KAAK,OAAO;AAChD,QAAI,QAAQ,WAAW,OAAO,QAAQ;AACrC,YAAM,IAAI,MAAM,wDAAwD,KAAK,IAAI,EAAE;AAAA,IACpF;AAEA,eAAW,CAAC,GAAG,CAAC,MAAM,QAAQ,CAAC,KAAK,QAAQ,QAAQ,GAAG;AACtD,UAAI;AACH,iBAAS,OAAO,CAAC,CAAC;AAAA,MACnB,SAAS,GAAG;AACX,cAAM,IAAI,MAAM,wBAAwB,IAAI,eAAe,OAAO,CAAC,CAAC,YAAY,KAAK,IAAI;AAAA;AAAA,EAAS,EAAE,OAAO;AAAA;AAAA,qBAA0B,KAAK,IAAI,EAAE;AAAA,MACjJ;AAAA,IACD;AAAA,EACD,CAAC,CAAC;AAEF,oBAAkB,SAAS;AAC5B,CAAC;AAMD,MAAM,kBAAkB;AAwBxB,eAAsB,WAAW,MAA8B;AAC9D,MAAI,CAAC,aAAa;AACjB,UAAM,IAAI,MAAM,wDAAwD;AAAA,EACzE;AAIA,MAAI,YAAY,QAAQ,IAAI,iBAAiB;AAC5C,gBAAY,QAAQ,eAAe;AAAA,EACpC;AAEA,MAAI,OAAO,6BAA6B,aAAa;AACpD;AAAA,EACD;AAEA,QAAM,EAAE,MAAM,KAAK,IAAI,MAAM,yBAAyB,YAAY,UAAU,GAAG,OAAO,KAAK,KAAK,OAAO,CAAC;AACxG,oBAAkB,KAAK,EAAE,QAAQ,MAAM,MAAM,MAAM,YAAY,UAAU,GAAG,KAAK,CAAC;AACnF;AAjBsB;",
  "names": []
}
