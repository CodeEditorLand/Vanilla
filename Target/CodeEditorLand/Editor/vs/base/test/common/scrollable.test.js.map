{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/scrollable.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { SmoothScrollingOperation, SmoothScrollingUpdate } from '../../common/scrollable.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nclass TestSmoothScrollingOperation extends SmoothScrollingOperation {\n\n\tconstructor(from: number, to: number, viewportSize: number, startTime: number, duration: number) {\n\t\tduration = duration + 10;\n\t\tstartTime = startTime - 10;\n\n\t\tsuper(\n\t\t\t{ scrollLeft: 0, scrollTop: from, width: 0, height: viewportSize },\n\t\t\t{ scrollLeft: 0, scrollTop: to, width: 0, height: viewportSize },\n\t\t\tstartTime,\n\t\t\tduration\n\t\t);\n\t}\n\n\tpublic testTick(now: number): SmoothScrollingUpdate {\n\t\treturn this._tick(now);\n\t}\n\n}\n\nsuite('SmoothScrollingOperation', () => {\n\n\tconst VIEWPORT_HEIGHT = 800;\n\tconst ANIMATION_DURATION = 125;\n\tconst LINE_HEIGHT = 20;\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction extractLines(scrollable: TestSmoothScrollingOperation, now: number): [number, number] {\n\t\tconst scrollTop = scrollable.testTick(now).scrollTop;\n\t\tconst scrollBottom = scrollTop + VIEWPORT_HEIGHT;\n\n\t\tconst startLineNumber = Math.floor(scrollTop / LINE_HEIGHT);\n\t\tconst endLineNumber = Math.ceil(scrollBottom / LINE_HEIGHT);\n\n\t\treturn [startLineNumber, endLineNumber];\n\t}\n\n\tfunction simulateSmoothScroll(from: number, to: number): [number, number][] {\n\t\tconst scrollable = new TestSmoothScrollingOperation(from, to, VIEWPORT_HEIGHT, 0, ANIMATION_DURATION);\n\n\t\tconst result: [number, number][] = [];\n\t\tlet resultLen = 0;\n\t\tresult[resultLen++] = extractLines(scrollable, 0);\n\t\tresult[resultLen++] = extractLines(scrollable, 25);\n\t\tresult[resultLen++] = extractLines(scrollable, 50);\n\t\tresult[resultLen++] = extractLines(scrollable, 75);\n\t\tresult[resultLen++] = extractLines(scrollable, 100);\n\t\tresult[resultLen++] = extractLines(scrollable, 125);\n\t\treturn result;\n\t}\n\n\tfunction assertSmoothScroll(from: number, to: number, expected: [number, number][]): void {\n\t\tconst actual = simulateSmoothScroll(from, to);\n\t\tassert.deepStrictEqual(actual, expected);\n\t}\n\n\ttest('scroll 25 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 500, [\n\t\t\t[5, 46],\n\t\t\t[14, 55],\n\t\t\t[20, 61],\n\t\t\t[23, 64],\n\t\t\t[24, 65],\n\t\t\t[25, 65],\n\t\t]);\n\t});\n\n\ttest('scroll 75 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 1500, [\n\t\t\t[15, 56],\n\t\t\t[44, 85],\n\t\t\t[62, 103],\n\t\t\t[71, 112],\n\t\t\t[74, 115],\n\t\t\t[75, 115],\n\t\t]);\n\t});\n\n\ttest('scroll 100 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 2000, [\n\t\t\t[20, 61],\n\t\t\t[59, 100],\n\t\t\t[82, 123],\n\t\t\t[94, 135],\n\t\t\t[99, 140],\n\t\t\t[100, 140],\n\t\t]);\n\t});\n\n\ttest('scroll 125 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 2500, [\n\t\t\t[16, 57],\n\t\t\t[29, 70],\n\t\t\t[107, 148],\n\t\t\t[119, 160],\n\t\t\t[124, 165],\n\t\t\t[125, 165],\n\t\t]);\n\t});\n\n\ttest('scroll 500 lines (40 fit)', () => {\n\t\tassertSmoothScroll(0, 10000, [\n\t\t\t[16, 57],\n\t\t\t[29, 70],\n\t\t\t[482, 523],\n\t\t\t[494, 535],\n\t\t\t[499, 540],\n\t\t\t[500, 540],\n\t\t]);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
