{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/stream.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { timeout } from '../../common/async.js';\nimport { bufferToReadable, VSBuffer } from '../../common/buffer.js';\nimport { CancellationTokenSource } from '../../common/cancellation.js';\nimport { consumeReadable, consumeStream, isReadable, isReadableBufferedStream, isReadableStream, listenStream, newWriteableStream, peekReadable, peekStream, prefixedReadable, prefixedStream, Readable, ReadableStream, toReadable, toStream, transform } from '../../common/stream.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('Stream', () => {\n\n\ttest('isReadable', () => {\n\t\tassert.ok(!isReadable(undefined));\n\t\tassert.ok(!isReadable(Object.create(null)));\n\t\tassert.ok(isReadable(bufferToReadable(VSBuffer.fromString(''))));\n\t});\n\n\ttest('isReadableStream', () => {\n\t\tassert.ok(!isReadableStream(undefined));\n\t\tassert.ok(!isReadableStream(Object.create(null)));\n\t\tassert.ok(isReadableStream(newWriteableStream(d => d)));\n\t});\n\n\ttest('isReadableBufferedStream', async () => {\n\t\tassert.ok(!isReadableBufferedStream(Object.create(null)));\n\n\t\tconst stream = newWriteableStream(d => d);\n\t\tstream.end();\n\t\tconst bufferedStream = await peekStream(stream, 1);\n\t\tassert.ok(isReadableBufferedStream(bufferedStream));\n\t});\n\n\ttest('WriteableStream - basics', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet error = false;\n\t\tstream.on('error', e => {\n\t\t\terror = true;\n\t\t});\n\n\t\tlet end = false;\n\t\tstream.on('end', () => {\n\t\t\tend = true;\n\t\t});\n\n\t\tstream.write('Hello');\n\n\t\tconst chunks: string[] = [];\n\t\tstream.on('data', data => {\n\t\t\tchunks.push(data);\n\t\t});\n\n\t\tassert.strictEqual(chunks[0], 'Hello');\n\n\t\tstream.write('World');\n\t\tassert.strictEqual(chunks[1], 'World');\n\n\t\tassert.strictEqual(error, false);\n\t\tassert.strictEqual(end, false);\n\n\t\tstream.pause();\n\t\tstream.write('1');\n\t\tstream.write('2');\n\t\tstream.write('3');\n\n\t\tassert.strictEqual(chunks.length, 2);\n\n\t\tstream.resume();\n\n\t\tassert.strictEqual(chunks.length, 3);\n\t\tassert.strictEqual(chunks[2], '1,2,3');\n\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, true);\n\n\t\terror = false;\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, true);\n\n\t\tstream.end('Final Bit');\n\t\tassert.strictEqual(chunks.length, 4);\n\t\tassert.strictEqual(chunks[3], 'Final Bit');\n\t\tassert.strictEqual(end, true);\n\n\t\tstream.destroy();\n\n\t\tstream.write('Unexpected');\n\t\tassert.strictEqual(chunks.length, 4);\n\t});\n\n\ttest('WriteableStream - end with empty string works', async () => {\n\t\tconst reducer = (strings: string[]) => strings.length > 0 ? strings.join() : 'error';\n\t\tconst stream = newWriteableStream<string>(reducer);\n\t\tstream.end('');\n\n\t\tconst result = await consumeStream(stream, reducer);\n\t\tassert.strictEqual(result, '');\n\t});\n\n\ttest('WriteableStream - end with error works', async () => {\n\t\tconst reducer = (errors: Error[]) => errors[0];\n\t\tconst stream = newWriteableStream<Error>(reducer);\n\t\tstream.end(new Error('error'));\n\n\t\tconst result = await consumeStream(stream, reducer);\n\t\tassert.ok(result instanceof Error);\n\t});\n\n\ttest('WriteableStream - removeListener', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet error = false;\n\t\tconst errorListener = (e: Error) => {\n\t\t\terror = true;\n\t\t};\n\t\tstream.on('error', errorListener);\n\n\t\tlet data = false;\n\t\tconst dataListener = () => {\n\t\t\tdata = true;\n\t\t};\n\t\tstream.on('data', dataListener);\n\n\t\tstream.write('Hello');\n\t\tassert.strictEqual(data, true);\n\n\t\tdata = false;\n\t\tstream.removeListener('data', dataListener);\n\n\t\tstream.write('World');\n\t\tassert.strictEqual(data, false);\n\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, true);\n\n\t\terror = false;\n\t\tstream.removeListener('error', errorListener);\n\n\t\t// always leave at least one error listener to streams to avoid unexpected errors during test running\n\t\tstream.on('error', () => { });\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, false);\n\t});\n\n\ttest('WriteableStream - highWaterMark', async () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join(), { highWaterMark: 3 });\n\n\t\tlet res = stream.write('1');\n\t\tassert.ok(!res);\n\n\t\tres = stream.write('2');\n\t\tassert.ok(!res);\n\n\t\tres = stream.write('3');\n\t\tassert.ok(!res);\n\n\t\tconst promise1 = stream.write('4');\n\t\tassert.ok(promise1 instanceof Promise);\n\n\t\tconst promise2 = stream.write('5');\n\t\tassert.ok(promise2 instanceof Promise);\n\n\t\tlet drained1 = false;\n\t\t(async () => {\n\t\t\tawait promise1;\n\t\t\tdrained1 = true;\n\t\t})();\n\n\t\tlet drained2 = false;\n\t\t(async () => {\n\t\t\tawait promise2;\n\t\t\tdrained2 = true;\n\t\t})();\n\n\t\tlet data: string | undefined = undefined;\n\t\tstream.on('data', chunk => {\n\t\t\tdata = chunk;\n\t\t});\n\t\tassert.ok(data);\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(drained1, true);\n\t\tassert.strictEqual(drained2, true);\n\t});\n\n\ttest('consumeReadable', () => {\n\t\tconst readable = arrayToReadable(['1', '2', '3', '4', '5']);\n\t\tconst consumed = consumeReadable(readable, strings => strings.join());\n\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t});\n\n\ttest('peekReadable', () => {\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tconst readable = arrayToReadable(['1', '2', '3', '4', '5']);\n\n\t\t\tconst consumedOrReadable = peekReadable(readable, strings => strings.join(), i);\n\t\t\tif (typeof consumedOrReadable === 'string') {\n\t\t\t\tassert.fail('Unexpected result');\n\t\t\t} else {\n\t\t\t\tconst consumed = consumeReadable(consumedOrReadable, strings => strings.join());\n\t\t\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t\t\t}\n\t\t}\n\n\t\tlet readable = arrayToReadable(['1', '2', '3', '4', '5']);\n\t\tlet consumedOrReadable = peekReadable(readable, strings => strings.join(), 5);\n\t\tassert.strictEqual(consumedOrReadable, '1,2,3,4,5');\n\n\t\treadable = arrayToReadable(['1', '2', '3', '4', '5']);\n\t\tconsumedOrReadable = peekReadable(readable, strings => strings.join(), 6);\n\t\tassert.strictEqual(consumedOrReadable, '1,2,3,4,5');\n\t});\n\n\ttest('peekReadable - error handling', async () => {\n\n\t\t// 0 Chunks\n\t\tlet stream = newWriteableStream(data => data);\n\n\t\tlet error: Error | undefined = undefined;\n\t\tlet promise = (async () => {\n\t\t\ttry {\n\t\t\t\tawait peekStream(stream, 1);\n\t\t\t} catch (err) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t})();\n\n\t\tstream.error(new Error());\n\t\tawait promise;\n\n\t\tassert.ok(error);\n\n\t\t// 1 Chunk\n\t\tstream = newWriteableStream(data => data);\n\n\t\terror = undefined;\n\t\tpromise = (async () => {\n\t\t\ttry {\n\t\t\t\tawait peekStream(stream, 1);\n\t\t\t} catch (err) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t})();\n\n\t\tstream.write('foo');\n\t\tstream.error(new Error());\n\t\tawait promise;\n\n\t\tassert.ok(error);\n\n\t\t// 2 Chunks\n\t\tstream = newWriteableStream(data => data);\n\n\t\terror = undefined;\n\t\tpromise = (async () => {\n\t\t\ttry {\n\t\t\t\tawait peekStream(stream, 1);\n\t\t\t} catch (err) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t})();\n\n\t\tstream.write('foo');\n\t\tstream.write('bar');\n\t\tstream.error(new Error());\n\t\tawait promise;\n\n\t\tassert.ok(!error);\n\n\t\tstream.on('error', err => error = err);\n\t\tstream.on('data', chunk => { });\n\t\tassert.ok(error);\n\t});\n\n\tfunction arrayToReadable<T>(array: T[]): Readable<T> {\n\t\treturn {\n\t\t\tread: () => array.shift() || null\n\t\t};\n\t}\n\n\tfunction readableToStream(readable: Readable<string>): ReadableStream<string> {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\t// Simulate async behavior\n\t\tsetTimeout(() => {\n\t\t\tlet chunk: string | null = null;\n\t\t\twhile ((chunk = readable.read()) !== null) {\n\t\t\t\tstream.write(chunk);\n\t\t\t}\n\n\t\t\tstream.end();\n\t\t}, 0);\n\n\t\treturn stream;\n\t}\n\n\ttest('consumeStream', async () => {\n\t\tconst stream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\t\tconst consumed = await consumeStream(stream, strings => strings.join());\n\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t});\n\n\ttest('consumeStream - without reducer', async () => {\n\t\tconst stream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\t\tconst consumed = await consumeStream(stream);\n\t\tassert.strictEqual(consumed, undefined);\n\t});\n\n\ttest('consumeStream - without reducer and error', async () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\t\tstream.error(new Error());\n\n\t\tconst consumed = await consumeStream(stream);\n\t\tassert.strictEqual(consumed, undefined);\n\t});\n\n\ttest('listenStream', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet error = false;\n\t\tlet end = false;\n\t\tlet data = '';\n\n\t\tlistenStream(stream, {\n\t\t\tonData: d => {\n\t\t\t\tdata = d;\n\t\t\t},\n\t\t\tonError: e => {\n\t\t\t\terror = true;\n\t\t\t},\n\t\t\tonEnd: () => {\n\t\t\t\tend = true;\n\t\t\t}\n\t\t});\n\n\t\tstream.write('Hello');\n\n\t\tassert.strictEqual(data, 'Hello');\n\n\t\tstream.write('World');\n\t\tassert.strictEqual(data, 'World');\n\n\t\tassert.strictEqual(error, false);\n\t\tassert.strictEqual(end, false);\n\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, true);\n\n\t\tstream.end('Final Bit');\n\t\tassert.strictEqual(end, true);\n\t});\n\n\ttest('listenStream - cancellation', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet error = false;\n\t\tlet end = false;\n\t\tlet data = '';\n\n\t\tconst cts = new CancellationTokenSource();\n\n\t\tlistenStream(stream, {\n\t\t\tonData: d => {\n\t\t\t\tdata = d;\n\t\t\t},\n\t\t\tonError: e => {\n\t\t\t\terror = true;\n\t\t\t},\n\t\t\tonEnd: () => {\n\t\t\t\tend = true;\n\t\t\t}\n\t\t}, cts.token);\n\n\t\tcts.cancel();\n\n\t\tstream.write('Hello');\n\t\tassert.strictEqual(data, '');\n\n\t\tstream.write('World');\n\t\tassert.strictEqual(data, '');\n\n\t\tstream.error(new Error());\n\t\tassert.strictEqual(error, false);\n\n\t\tstream.end('Final Bit');\n\t\tassert.strictEqual(end, false);\n\t});\n\n\ttest('peekStream', async () => {\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tconst stream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\n\t\t\tconst result = await peekStream(stream, i);\n\t\t\tassert.strictEqual(stream, result.stream);\n\t\t\tif (result.ended) {\n\t\t\t\tassert.fail('Unexpected result, stream should not have ended yet');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(result.buffer.length, i + 1, `maxChunks: ${i}`);\n\n\t\t\t\tconst additionalResult: string[] = [];\n\t\t\t\tawait consumeStream(stream, strings => {\n\t\t\t\t\tadditionalResult.push(...strings);\n\n\t\t\t\t\treturn strings.join();\n\t\t\t\t});\n\n\t\t\t\tassert.strictEqual([...result.buffer, ...additionalResult].join(), '1,2,3,4,5');\n\t\t\t}\n\t\t}\n\n\t\tlet stream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\t\tlet result = await peekStream(stream, 5);\n\t\tassert.strictEqual(stream, result.stream);\n\t\tassert.strictEqual(result.buffer.join(), '1,2,3,4,5');\n\t\tassert.strictEqual(result.ended, true);\n\n\t\tstream = readableToStream(arrayToReadable(['1', '2', '3', '4', '5']));\n\t\tresult = await peekStream(stream, 6);\n\t\tassert.strictEqual(stream, result.stream);\n\t\tassert.strictEqual(result.buffer.join(), '1,2,3,4,5');\n\t\tassert.strictEqual(result.ended, true);\n\t});\n\n\ttest('toStream', async () => {\n\t\tconst stream = toStream('1,2,3,4,5', strings => strings.join());\n\t\tconst consumed = await consumeStream(stream, strings => strings.join());\n\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t});\n\n\ttest('toReadable', async () => {\n\t\tconst readable = toReadable('1,2,3,4,5');\n\t\tconst consumed = consumeReadable(readable, strings => strings.join());\n\t\tassert.strictEqual(consumed, '1,2,3,4,5');\n\t});\n\n\ttest('transform', async () => {\n\t\tconst source = newWriteableStream<string>(strings => strings.join());\n\n\t\tconst result = transform(source, { data: string => string + string }, strings => strings.join());\n\n\t\t// Simulate async behavior\n\t\tsetTimeout(() => {\n\t\t\tsource.write('1');\n\t\t\tsource.write('2');\n\t\t\tsource.write('3');\n\t\t\tsource.write('4');\n\t\t\tsource.end('5');\n\t\t}, 0);\n\n\t\tconst consumed = await consumeStream(result, strings => strings.join());\n\t\tassert.strictEqual(consumed, '11,22,33,44,55');\n\t});\n\n\ttest('events are delivered even if a listener is removed during delivery', () => {\n\t\tconst stream = newWriteableStream<string>(strings => strings.join());\n\n\t\tlet listener1Called = false;\n\t\tlet listener2Called = false;\n\n\t\tconst listener1 = () => { stream.removeListener('end', listener1); listener1Called = true; };\n\t\tconst listener2 = () => { listener2Called = true; };\n\t\tstream.on('end', listener1);\n\t\tstream.on('end', listener2);\n\t\tstream.on('data', () => { });\n\t\tstream.end('');\n\n\t\tassert.strictEqual(listener1Called, true);\n\t\tassert.strictEqual(listener2Called, true);\n\t});\n\n\ttest('prefixedReadable', () => {\n\n\t\t// Basic\n\t\tlet readable = prefixedReadable('1,2', arrayToReadable(['3', '4', '5']), val => val.join(','));\n\t\tassert.strictEqual(consumeReadable(readable, val => val.join(',')), '1,2,3,4,5');\n\n\t\t// Empty\n\t\treadable = prefixedReadable('empty', arrayToReadable<string>([]), val => val.join(','));\n\t\tassert.strictEqual(consumeReadable(readable, val => val.join(',')), 'empty');\n\t});\n\n\ttest('prefixedStream', async () => {\n\n\t\t// Basic\n\t\tlet stream = newWriteableStream<string>(strings => strings.join());\n\t\tstream.write('3');\n\t\tstream.write('4');\n\t\tstream.write('5');\n\t\tstream.end();\n\n\t\tlet prefixStream = prefixedStream<string>('1,2', stream, val => val.join(','));\n\t\tassert.strictEqual(await consumeStream(prefixStream, val => val.join(',')), '1,2,3,4,5');\n\n\t\t// Empty\n\t\tstream = newWriteableStream<string>(strings => strings.join());\n\t\tstream.end();\n\n\t\tprefixStream = prefixedStream<string>('1,2', stream, val => val.join(','));\n\t\tassert.strictEqual(await consumeStream(prefixStream, val => val.join(',')), '1,2');\n\n\t\t// Error\n\t\tstream = newWriteableStream<string>(strings => strings.join());\n\t\tstream.error(new Error('fail'));\n\n\t\tprefixStream = prefixedStream<string>('error', stream, val => val.join(','));\n\n\t\tlet error;\n\t\ttry {\n\t\t\tawait consumeStream(prefixStream, val => val.join(','));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\t\tassert.ok(error);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["readable", "consumedOrReadable", "stream", "result"]
}
