{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/observable.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { setUnexpectedErrorHandler } from '../../common/errors.js';\nimport { Emitter, Event } from '../../common/event.js';\nimport { DisposableStore } from '../../common/lifecycle.js';\nimport { autorun, autorunHandleChanges, derived, derivedDisposable, IObservable, IObserver, ISettableObservable, ITransaction, keepObserved, observableFromEvent, observableSignal, observableValue, transaction, waitForState } from '../../common/observable.js';\nimport { BaseObservable } from '../../common/observableInternal/base.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('observables', () => {\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\t/**\n\t * Reads these tests to understand how to use observables.\n\t */\n\tsuite('tutorial', () => {\n\t\ttest('observable + autorun', () => {\n\t\t\tconst log = new Log();\n\t\t\t// This creates a variable that stores a value and whose value changes can be observed.\n\t\t\t// The name is only used for debugging purposes.\n\t\t\t// The second arg is the initial value.\n\t\t\tconst myObservable = observableValue('myObservable', 0);\n\n\t\t\t// This creates an autorun: It runs immediately and then again whenever any of the\n\t\t\t// dependencies change. Dependencies are tracked by reading observables with the `reader` parameter.\n\t\t\t//\n\t\t\t// The @description is only used for debugging purposes.\n\t\t\t// The autorun has to be disposed! This is very important.\n\t\t\tds.add(autorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\n\t\t\t\t// This code is run immediately.\n\n\t\t\t\t// Use the `reader` to read observable values and track the dependency to them.\n\t\t\t\t// If you use `observable.get()` instead of `observable.read(reader)`, you will just\n\t\t\t\t// get the value and not subscribe to it.\n\t\t\t\tlog.log(`myAutorun.run(myObservable: ${myObservable.read(reader)})`);\n\n\t\t\t\t// Now that all dependencies are tracked, the autorun is re-run whenever any of the\n\t\t\t\t// dependencies change.\n\t\t\t}));\n\t\t\t// The autorun runs immediately\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 0)']);\n\n\t\t\t// We set the observable.\n\t\t\tmyObservable.set(1, undefined);\n\t\t\t// -> The autorun runs again when any read observable changed\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 1)']);\n\n\t\t\t// We set the observable again.\n\t\t\tmyObservable.set(1, undefined);\n\t\t\t// -> The autorun does not run again, because the observable didn't change.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t// Transactions batch autorun runs\n\t\t\ttransaction((tx) => {\n\t\t\t\tmyObservable.set(2, tx);\n\t\t\t\t// No auto-run ran yet, even though the value changed!\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyObservable.set(3, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\t// Only at the end of the transaction the autorun re-runs\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 3)']);\n\n\t\t\t// Note that the autorun did not see the intermediate value `2`!\n\t\t});\n\n\t\ttest('derived + autorun', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst observable1 = observableValue('myObservable1', 0);\n\t\t\tconst observable2 = observableValue('myObservable2', 0);\n\n\t\t\t// A derived value is an observable that is derived from other observables.\n\t\t\tconst myDerived = derived(reader => {\n\t\t\t\t/** @description myDerived */\n\t\t\t\tconst value1 = observable1.read(reader); // Use the reader to track dependencies.\n\t\t\t\tconst value2 = observable2.read(reader);\n\t\t\t\tconst sum = value1 + value2;\n\t\t\t\tlog.log(`myDerived.recompute: ${value1} + ${value2} = ${sum}`);\n\t\t\t\treturn sum;\n\t\t\t});\n\n\t\t\t// We create an autorun that reacts on changes to our derived value.\n\t\t\tds.add(autorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\t// Autoruns work with observable values and deriveds - in short, they work with any observable.\n\t\t\t\tlog.log(`myAutorun(myDerived: ${myDerived.read(reader)})`);\n\t\t\t}));\n\t\t\t// autorun runs immediately\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 0 + 0 = 0\",\n\t\t\t\t\"myAutorun(myDerived: 0)\",\n\t\t\t]);\n\n\t\t\tobservable1.set(1, undefined);\n\t\t\t// and on changes...\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 1 + 0 = 1\",\n\t\t\t\t\"myAutorun(myDerived: 1)\",\n\t\t\t]);\n\n\t\t\tobservable2.set(1, undefined);\n\t\t\t// ... of any dependency.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 1 + 1 = 2\",\n\t\t\t\t\"myAutorun(myDerived: 2)\",\n\t\t\t]);\n\n\t\t\t// Now we change multiple observables in a transaction to batch process the effects.\n\t\t\ttransaction((tx) => {\n\t\t\t\tobservable1.set(5, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tobservable2.set(5, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\t// When changing multiple observables in a transaction,\n\t\t\t// deriveds are only recomputed on demand.\n\t\t\t// (Note that you cannot see the intermediate value when `obs1 == 5` and `obs2 == 1`)\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 5 + 5 = 10\",\n\t\t\t\t\"myAutorun(myDerived: 10)\",\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tobservable1.set(6, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tobservable2.set(4, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\t// Now the autorun didn't run again, because its dependency changed from 10 to 10 (= no change).\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"myDerived.recompute: 6 + 4 = 10\"]));\n\t\t});\n\n\t\ttest('read during transaction', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst observable1 = observableValue('myObservable1', 0);\n\t\t\tconst observable2 = observableValue('myObservable2', 0);\n\n\t\t\tconst myDerived = derived((reader) => {\n\t\t\t\t/** @description myDerived */\n\t\t\t\tconst value1 = observable1.read(reader);\n\t\t\t\tconst value2 = observable2.read(reader);\n\t\t\t\tconst sum = value1 + value2;\n\t\t\t\tlog.log(`myDerived.recompute: ${value1} + ${value2} = ${sum}`);\n\t\t\t\treturn sum;\n\t\t\t});\n\n\t\t\tds.add(autorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun(myDerived: ${myDerived.read(reader)})`);\n\t\t\t}));\n\t\t\t// autorun runs immediately\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 0 + 0 = 0\",\n\t\t\t\t\"myAutorun(myDerived: 0)\",\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tobservable1.set(-10, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyDerived.get(); // This forces a (sync) recomputation of the current value!\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"myDerived.recompute: -10 + 0 = -10\"]));\n\t\t\t\t// This means, that even in transactions you can assume that all values you can read with `get` and `read` are up-to-date.\n\t\t\t\t// Read these values just might cause additional (potentially unneeded) recomputations.\n\n\t\t\t\tobservable2.set(10, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\t// This autorun runs again, because its dependency changed from 0 to -10 and then back to 0.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: -10 + 10 = 0\",\n\t\t\t\t\"myAutorun(myDerived: 0)\",\n\t\t\t]);\n\t\t});\n\n\t\ttest('get without observers', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst observable1 = observableValue('myObservableValue1', 0);\n\n\t\t\t// We set up some computeds.\n\t\t\tconst computed1 = derived((reader) => {\n\t\t\t\t/** @description computed */\n\t\t\t\tconst value1 = observable1.read(reader);\n\t\t\t\tconst result = value1 % 3;\n\t\t\t\tlog.log(`recompute1: ${value1} % 3 = ${result}`);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tconst computed2 = derived((reader) => {\n\t\t\t\t/** @description computed */\n\t\t\t\tconst value1 = computed1.read(reader);\n\t\t\t\tconst result = value1 * 2;\n\t\t\t\tlog.log(`recompute2: ${value1} * 2 = ${result}`);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tconst computed3 = derived((reader) => {\n\t\t\t\t/** @description computed */\n\t\t\t\tconst value1 = computed1.read(reader);\n\t\t\t\tconst result = value1 * 3;\n\t\t\t\tlog.log(`recompute3: ${value1} * 3 = ${result}`);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tconst computedSum = derived((reader) => {\n\t\t\t\t/** @description computed */\n\t\t\t\tconst value1 = computed2.read(reader);\n\t\t\t\tconst value2 = computed3.read(reader);\n\t\t\t\tconst result = value1 + value2;\n\t\t\t\tlog.log(`recompute4: ${value1} + ${value2} = ${result}`);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\tobservable1.set(1, undefined);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t// And now read the computed that dependens on all the others.\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'recompute1: 1 % 3 = 1',\n\t\t\t\t'recompute2: 1 * 2 = 2',\n\t\t\t\t'recompute3: 1 * 3 = 3',\n\t\t\t\t'recompute4: 2 + 3 = 5',\n\t\t\t\t'value: 5',\n\t\t\t]);\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\t// Because there are no observers, the derived values are not cached (!), but computed from scratch.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'recompute1: 1 % 3 = 1',\n\t\t\t\t'recompute2: 1 * 2 = 2',\n\t\t\t\t'recompute3: 1 * 3 = 3',\n\t\t\t\t'recompute4: 2 + 3 = 5',\n\t\t\t\t'value: 5',\n\t\t\t]);\n\n\t\t\tconst disposable = keepObserved(computedSum); // Use keepObserved to keep the cache.\n\t\t\t// You can also use `computedSum.keepObserved(store)` for an inline experience.\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'recompute1: 1 % 3 = 1',\n\t\t\t\t'recompute2: 1 * 2 = 2',\n\t\t\t\t'recompute3: 1 * 3 = 3',\n\t\t\t\t'recompute4: 2 + 3 = 5',\n\t\t\t\t'value: 5',\n\t\t\t]);\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'value: 5',\n\t\t\t]);\n\t\t\t// Tada, no recomputations!\n\n\t\t\tobservable1.set(2, undefined);\n\t\t\t// The keepObserved does not force deriveds to be recomputed! They are still lazy.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([]));\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\t// Those deriveds are recomputed on demand, i.e. when someone reads them.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"recompute1: 2 % 3 = 2\",\n\t\t\t\t\"recompute2: 2 * 2 = 4\",\n\t\t\t\t\"recompute3: 2 * 3 = 6\",\n\t\t\t\t\"recompute4: 4 + 6 = 10\",\n\t\t\t\t\"value: 10\",\n\t\t\t]);\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\t// ... and then cached again\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"value: 10\"]));\n\n\t\t\tdisposable.dispose(); // Don't forget to dispose the keepAlive to prevent memory leaks!\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\t// Which disables the cache again\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"recompute1: 2 % 3 = 2\",\n\t\t\t\t\"recompute2: 2 * 2 = 4\",\n\t\t\t\t\"recompute3: 2 * 3 = 6\",\n\t\t\t\t\"recompute4: 4 + 6 = 10\",\n\t\t\t\t\"value: 10\",\n\t\t\t]);\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"recompute1: 2 % 3 = 2\",\n\t\t\t\t\"recompute2: 2 * 2 = 4\",\n\t\t\t\t\"recompute3: 2 * 3 = 6\",\n\t\t\t\t\"recompute4: 4 + 6 = 10\",\n\t\t\t\t\"value: 10\",\n\t\t\t]);\n\n\t\t\t// Why don't we just always keep the cache alive?\n\t\t\t// This is because in order to keep the cache alive, we have to keep our subscriptions to our dependencies alive,\n\t\t\t// which could cause memory-leaks.\n\t\t\t// So instead, when the last observer of a derived is disposed, we dispose our subscriptions to our dependencies.\n\t\t\t// `keepObserved` just prevents this from happening.\n\t\t});\n\n\t\ttest('autorun that receives deltas of signals', () => {\n\t\t\tconst log = new Log();\n\n\t\t\t// A signal is an observable without a value.\n\t\t\t// However, it can ship change information when it is triggered.\n\t\t\t// Readers can process/aggregate this change information.\n\t\t\tconst signal = observableSignal<{ msg: string }>('signal');\n\n\t\t\tconst disposable = autorunHandleChanges({\n\t\t\t\t// The change summary is used to collect the changes\n\t\t\t\tcreateEmptyChangeSummary: () => ({ msgs: [] as string[] }),\n\t\t\t\thandleChange(context, changeSummary) {\n\t\t\t\t\tif (context.didChange(signal)) {\n\t\t\t\t\t\t// We just push the changes into an array\n\t\t\t\t\t\tchangeSummary.msgs.push(context.change.msg);\n\t\t\t\t\t}\n\t\t\t\t\treturn true; // We want to handle the change\n\t\t\t\t},\n\t\t\t}, (reader, changeSummary) => {\n\t\t\t\t// When handling the change, make sure to read the signal!\n\t\t\t\tsignal.read(reader);\n\t\t\t\tlog.log('msgs: ' + changeSummary.msgs.join(', '));\n\t\t\t});\n\n\n\t\t\tsignal.trigger(undefined, { msg: 'foobar' });\n\n\t\t\ttransaction(tx => {\n\t\t\t\t// You can batch triggering signals.\n\t\t\t\t// No delta information is lost!\n\t\t\t\tsignal.trigger(tx, { msg: 'hello' });\n\t\t\t\tsignal.trigger(tx, { msg: 'world' });\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'msgs: ',\n\t\t\t\t'msgs: foobar',\n\t\t\t\t'msgs: hello, world'\n\t\t\t]);\n\n\t\t\tdisposable.dispose();\n\t\t});\n\n\t\t// That is the end of the tutorial.\n\t\t// There are lots of utilities you can explore now, like `observableFromEvent`, `Event.fromObservableLight`,\n\t\t// autorunWithStore, observableWithStore and so on.\n\t});\n\n\ttest('topological order', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable1 = observableValue('myObservable1', 0);\n\t\tconst myObservable2 = observableValue('myObservable2', 0);\n\n\t\tconst myComputed1 = derived(reader => {\n\t\t\t/** @description myComputed1 */\n\t\t\tconst value1 = myObservable1.read(reader);\n\t\t\tconst value2 = myObservable2.read(reader);\n\t\t\tconst sum = value1 + value2;\n\t\t\tlog.log(`myComputed1.recompute(myObservable1: ${value1} + myObservable2: ${value2} = ${sum})`);\n\t\t\treturn sum;\n\t\t});\n\n\t\tconst myComputed2 = derived(reader => {\n\t\t\t/** @description myComputed2 */\n\t\t\tconst value1 = myComputed1.read(reader);\n\t\t\tconst value2 = myObservable1.read(reader);\n\t\t\tconst value3 = myObservable2.read(reader);\n\t\t\tconst sum = value1 + value2 + value3;\n\t\t\tlog.log(`myComputed2.recompute(myComputed1: ${value1} + myObservable1: ${value2} + myObservable2: ${value3} = ${sum})`);\n\t\t\treturn sum;\n\t\t});\n\n\t\tconst myComputed3 = derived(reader => {\n\t\t\t/** @description myComputed3 */\n\t\t\tconst value1 = myComputed2.read(reader);\n\t\t\tconst value2 = myObservable1.read(reader);\n\t\t\tconst value3 = myObservable2.read(reader);\n\t\t\tconst sum = value1 + value2 + value3;\n\t\t\tlog.log(`myComputed3.recompute(myComputed2: ${value1} + myObservable1: ${value2} + myObservable2: ${value3} = ${sum})`);\n\t\t\treturn sum;\n\t\t});\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tlog.log(`myAutorun.run(myComputed3: ${myComputed3.read(reader)})`);\n\t\t}));\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myComputed1.recompute(myObservable1: 0 + myObservable2: 0 = 0)\",\n\t\t\t\"myComputed2.recompute(myComputed1: 0 + myObservable1: 0 + myObservable2: 0 = 0)\",\n\t\t\t\"myComputed3.recompute(myComputed2: 0 + myObservable1: 0 + myObservable2: 0 = 0)\",\n\t\t\t\"myAutorun.run(myComputed3: 0)\",\n\t\t]);\n\n\t\tmyObservable1.set(1, undefined);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myComputed1.recompute(myObservable1: 1 + myObservable2: 0 = 1)\",\n\t\t\t\"myComputed2.recompute(myComputed1: 1 + myObservable1: 1 + myObservable2: 0 = 2)\",\n\t\t\t\"myComputed3.recompute(myComputed2: 2 + myObservable1: 1 + myObservable2: 0 = 3)\",\n\t\t\t\"myAutorun.run(myComputed3: 3)\",\n\t\t]);\n\n\t\ttransaction((tx) => {\n\t\t\tmyObservable1.set(2, tx);\n\t\t\tmyComputed2.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myComputed1.recompute(myObservable1: 2 + myObservable2: 0 = 2)\",\n\t\t\t\t\"myComputed2.recompute(myComputed1: 2 + myObservable1: 2 + myObservable2: 0 = 4)\",\n\t\t\t]);\n\n\t\t\tmyObservable1.set(3, tx);\n\t\t\tmyComputed2.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myComputed1.recompute(myObservable1: 3 + myObservable2: 0 = 3)\",\n\t\t\t\t\"myComputed2.recompute(myComputed1: 3 + myObservable1: 3 + myObservable2: 0 = 6)\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myComputed3.recompute(myComputed2: 6 + myObservable1: 3 + myObservable2: 0 = 9)\",\n\t\t\t\"myAutorun.run(myComputed3: 9)\",\n\t\t]);\n\t});\n\n\tsuite('from event', () => {\n\n\t\tfunction init(): { log: Log; setValue: (value: number | undefined) => void; observable: IObservable<number | undefined> } {\n\t\t\tconst log = new Log();\n\n\t\t\tlet value: number | undefined = 0;\n\t\t\tconst eventEmitter = new Emitter<void>();\n\n\t\t\tlet id = 0;\n\t\t\tconst observable = observableFromEvent(\n\t\t\t\t(handler) => {\n\t\t\t\t\tconst curId = id++;\n\t\t\t\t\tlog.log(`subscribed handler ${curId}`);\n\t\t\t\t\tconst disposable = eventEmitter.event(handler);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\t\tlog.log(`unsubscribed handler ${curId}`);\n\t\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tlog.log(`compute value ${value}`);\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tlog,\n\t\t\t\tsetValue: (newValue) => {\n\t\t\t\t\tvalue = newValue;\n\t\t\t\t\teventEmitter.fire();\n\t\t\t\t},\n\t\t\t\tobservable,\n\t\t\t};\n\t\t}\n\n\t\ttest('Handle undefined', () => {\n\t\t\tconst { log, setValue, observable } = init();\n\n\t\t\tsetValue(undefined);\n\n\t\t\tconst autorunDisposable = autorun(reader => {\n\t\t\t\t/** @description MyAutorun */\n\t\t\t\tobservable.read(reader);\n\t\t\t\tlog.log(\n\t\t\t\t\t`autorun, value: ${observable.read(reader)}`\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"subscribed handler 0\",\n\t\t\t\t\"compute value undefined\",\n\t\t\t\t\"autorun, value: undefined\",\n\t\t\t]);\n\n\t\t\tsetValue(1);\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"compute value 1\",\n\t\t\t\t\"autorun, value: 1\"\n\t\t\t]);\n\n\t\t\tautorunDisposable.dispose();\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"unsubscribed handler 0\"\n\t\t\t]);\n\t\t});\n\n\t\ttest('basic', () => {\n\t\t\tconst { log, setValue, observable } = init();\n\n\t\t\tconst shouldReadObservable = observableValue('shouldReadObservable', true);\n\n\t\t\tconst autorunDisposable = autorun(reader => {\n\t\t\t\t/** @description MyAutorun */\n\t\t\t\tif (shouldReadObservable.read(reader)) {\n\t\t\t\t\tobservable.read(reader);\n\t\t\t\t\tlog.log(\n\t\t\t\t\t\t`autorun, should read: true, value: ${observable.read(reader)}`\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tlog.log(`autorun, should read: false`);\n\t\t\t\t}\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'subscribed handler 0',\n\t\t\t\t'compute value 0',\n\t\t\t\t'autorun, should read: true, value: 0',\n\t\t\t]);\n\n\t\t\t// Cached get\n\t\t\tlog.log(`get value: ${observable.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['get value: 0']);\n\n\t\t\tsetValue(1);\n\t\t\t// Trigger autorun, no unsub/sub\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'compute value 1',\n\t\t\t\t'autorun, should read: true, value: 1',\n\t\t\t]);\n\n\t\t\t// Unsubscribe when not read\n\t\t\tshouldReadObservable.set(false, undefined);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'autorun, should read: false',\n\t\t\t\t'unsubscribed handler 0',\n\t\t\t]);\n\n\t\t\tshouldReadObservable.set(true, undefined);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'subscribed handler 1',\n\t\t\t\t'compute value 1',\n\t\t\t\t'autorun, should read: true, value: 1',\n\t\t\t]);\n\n\t\t\tautorunDisposable.dispose();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'unsubscribed handler 1',\n\t\t\t]);\n\t\t});\n\n\t\ttest('get without observers', () => {\n\t\t\tconst { log, observable } = init();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\tlog.log(`get value: ${observable.get()}`);\n\t\t\t// Not cached or subscribed\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'compute value 0',\n\t\t\t\t'get value: 0',\n\t\t\t]);\n\n\t\t\tlog.log(`get value: ${observable.get()}`);\n\t\t\t// Still not cached or subscribed\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'compute value 0',\n\t\t\t\t'get value: 0',\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('reading derived in transaction unsubscribes unnecessary observables', () => {\n\t\tconst log = new Log();\n\n\t\tconst shouldReadObservable = observableValue('shouldReadMyObs1', true);\n\t\tconst myObs1 = new LoggingObservableValue('myObs1', 0, log);\n\t\tconst myComputed = derived(reader => {\n\t\t\t/** @description myComputed */\n\t\t\tlog.log('myComputed.recompute');\n\t\t\tif (shouldReadObservable.read(reader)) {\n\t\t\t\treturn myObs1.read(reader);\n\t\t\t}\n\t\t\treturn 1;\n\t\t});\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst value = myComputed.read(reader);\n\t\t\tlog.log(`myAutorun: ${value}`);\n\t\t}));\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myComputed.recompute\",\n\t\t\t\"myObs1.firstObserverAdded\",\n\t\t\t\"myObs1.get\",\n\t\t\t\"myAutorun: 0\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObs1.set(1, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"myObs1.set (value 1)\"]));\n\n\t\t\tshouldReadObservable.set(false, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([]));\n\n\t\t\tmyComputed.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myComputed.recompute\",\n\t\t\t\t\"myObs1.lastObserverRemoved\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"myAutorun: 1\"]));\n\t});\n\n\ttest('avoid recomputation of deriveds that are no longer read', () => {\n\t\tconst log = new Log();\n\n\t\tconst myObsShouldRead = new LoggingObservableValue('myObsShouldRead', true, log);\n\t\tconst myObs1 = new LoggingObservableValue('myObs1', 0, log);\n\n\t\tconst myComputed1 = derived(reader => {\n\t\t\t/** @description myComputed1 */\n\t\t\tconst myObs1Val = myObs1.read(reader);\n\t\t\tconst result = myObs1Val % 10;\n\t\t\tlog.log(`myComputed1(myObs1: ${myObs1Val}): Computed ${result}`);\n\t\t\treturn myObs1Val;\n\t\t});\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst shouldRead = myObsShouldRead.read(reader);\n\t\t\tif (shouldRead) {\n\t\t\t\tconst v = myComputed1.read(reader);\n\t\t\t\tlog.log(`myAutorun(shouldRead: true, myComputed1: ${v}): run`);\n\t\t\t} else {\n\t\t\t\tlog.log(`myAutorun(shouldRead: false): run`);\n\t\t\t}\n\t\t}));\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObsShouldRead.firstObserverAdded\",\n\t\t\t\"myObsShouldRead.get\",\n\t\t\t\"myObs1.firstObserverAdded\",\n\t\t\t\"myObs1.get\",\n\t\t\t\"myComputed1(myObs1: 0): Computed 0\",\n\t\t\t\"myAutorun(shouldRead: true, myComputed1: 0): run\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObsShouldRead.set(false, tx);\n\t\t\tmyObs1.set(1, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObsShouldRead.set (value false)\",\n\t\t\t\t\"myObs1.set (value 1)\",\n\t\t\t]);\n\t\t});\n\t\t// myComputed1 should not be recomputed here, even though its dependency myObs1 changed!\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObsShouldRead.get\",\n\t\t\t\"myAutorun(shouldRead: false): run\",\n\t\t\t\"myObs1.lastObserverRemoved\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObsShouldRead.set(true, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObsShouldRead.set (value true)\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObsShouldRead.get\",\n\t\t\t\"myObs1.firstObserverAdded\",\n\t\t\t\"myObs1.get\",\n\t\t\t\"myComputed1(myObs1: 1): Computed 1\",\n\t\t\t\"myAutorun(shouldRead: true, myComputed1: 1): run\",\n\t\t]);\n\t});\n\n\tsuite('autorun rerun on neutral change', () => {\n\t\ttest('autorun reruns on neutral observable double change', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = observableValue('myObservable', 0);\n\n\t\t\tds.add(autorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun.run(myObservable: ${myObservable.read(reader)})`);\n\t\t\t}));\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 0)']);\n\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tmyObservable.set(2, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyObservable.set(0, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 0)']);\n\t\t});\n\n\t\ttest('autorun does not rerun on indirect neutral observable double change', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = observableValue('myObservable', 0);\n\t\t\tconst myDerived = derived(reader => {\n\t\t\t\t/** @description myDerived */\n\t\t\t\tconst val = myObservable.read(reader);\n\t\t\t\tlog.log(`myDerived.read(myObservable: ${val})`);\n\t\t\t\treturn val;\n\t\t\t});\n\n\t\t\tds.add(autorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun.run(myDerived: ${myDerived.read(reader)})`);\n\t\t\t}));\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.read(myObservable: 0)\",\n\t\t\t\t\"myAutorun.run(myDerived: 0)\"\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tmyObservable.set(2, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyObservable.set(0, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.read(myObservable: 0)\"\n\t\t\t]);\n\t\t});\n\n\t\ttest('autorun reruns on indirect neutral observable double change when changes propagate', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = observableValue('myObservable', 0);\n\t\t\tconst myDerived = derived(reader => {\n\t\t\t\t/** @description myDerived */\n\t\t\t\tconst val = myObservable.read(reader);\n\t\t\t\tlog.log(`myDerived.read(myObservable: ${val})`);\n\t\t\t\treturn val;\n\t\t\t});\n\n\t\t\tds.add(autorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun.run(myDerived: ${myDerived.read(reader)})`);\n\t\t\t}));\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.read(myObservable: 0)\",\n\t\t\t\t\"myAutorun.run(myDerived: 0)\"\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tmyObservable.set(2, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyDerived.get(); // This marks the auto-run as changed\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myDerived.read(myObservable: 2)\"\n\t\t\t\t]);\n\n\t\t\t\tmyObservable.set(0, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.read(myObservable: 0)\",\n\t\t\t\t\"myAutorun.run(myDerived: 0)\"\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('self-disposing autorun', () => {\n\t\tconst log = new Log();\n\n\t\tconst observable1 = new LoggingObservableValue('myObservable1', 0, log);\n\t\tconst myObservable2 = new LoggingObservableValue('myObservable2', 0, log);\n\t\tconst myObservable3 = new LoggingObservableValue('myObservable3', 0, log);\n\n\t\tconst d = autorun(reader => {\n\t\t\t/** @description autorun */\n\t\t\tif (observable1.read(reader) >= 2) {\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myObservable1.set (value 2)\",\n\t\t\t\t\t\"myObservable1.get\",\n\t\t\t\t]);\n\n\t\t\t\tmyObservable2.read(reader);\n\t\t\t\t// First time this observable is read\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myObservable2.firstObserverAdded\",\n\t\t\t\t\t\"myObservable2.get\",\n\t\t\t\t]);\n\n\t\t\t\td.dispose();\n\t\t\t\t// Disposing removes all observers\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myObservable1.lastObserverRemoved\",\n\t\t\t\t\t\"myObservable2.lastObserverRemoved\",\n\t\t\t\t]);\n\n\t\t\t\tmyObservable3.read(reader);\n\t\t\t\t// This does not subscribe the observable, because the autorun is disposed\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myObservable3.get\",\n\t\t\t\t]);\n\t\t\t}\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'myObservable1.firstObserverAdded',\n\t\t\t'myObservable1.get',\n\t\t]);\n\n\t\tobservable1.set(1, undefined);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'myObservable1.set (value 1)',\n\t\t\t'myObservable1.get',\n\t\t]);\n\n\t\tobservable1.set(2, undefined);\n\t\t// See asserts in the autorun\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([]));\n\t});\n\n\ttest('changing observables in endUpdate', () => {\n\t\tconst log = new Log();\n\n\t\tconst myObservable1 = new LoggingObservableValue('myObservable1', 0, log);\n\t\tconst myObservable2 = new LoggingObservableValue('myObservable2', 0, log);\n\n\t\tconst myDerived1 = derived(reader => {\n\t\t\t/** @description myDerived1 */\n\t\t\tconst val = myObservable1.read(reader);\n\t\t\tlog.log(`myDerived1.read(myObservable: ${val})`);\n\t\t\treturn val;\n\t\t});\n\n\t\tconst myDerived2 = derived(reader => {\n\t\t\t/** @description myDerived2 */\n\t\t\tconst val = myObservable2.read(reader);\n\t\t\tif (val === 1) {\n\t\t\t\tmyDerived1.read(reader);\n\t\t\t}\n\t\t\tlog.log(`myDerived2.read(myObservable: ${val})`);\n\t\t\treturn val;\n\t\t});\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst myDerived1Val = myDerived1.read(reader);\n\t\t\tconst myDerived2Val = myDerived2.read(reader);\n\t\t\tlog.log(`myAutorun.run(myDerived1: ${myDerived1Val}, myDerived2: ${myDerived2Val})`);\n\t\t}));\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable2.set(1, tx);\n\t\t\t// end update of this observable will trigger endUpdate of myDerived1 and\n\t\t\t// the autorun and the autorun will add myDerived2 as observer to myDerived1\n\t\t\tmyObservable1.set(1, tx);\n\t\t});\n\t});\n\n\ttest('set dependency in derived', () => {\n\t\tconst log = new Log();\n\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\t\tconst myComputed = derived(reader => {\n\t\t\t/** @description myComputed */\n\t\t\tlet value = myObservable.read(reader);\n\t\t\tconst origValue = value;\n\t\t\tlog.log(`myComputed(myObservable: ${origValue}): start computing`);\n\t\t\tif (value % 3 !== 0) {\n\t\t\t\tvalue++;\n\t\t\t\tmyObservable.set(value, undefined);\n\t\t\t}\n\t\t\tlog.log(`myComputed(myObservable: ${origValue}): finished computing`);\n\t\t\treturn value;\n\t\t});\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst value = myComputed.read(reader);\n\t\t\tlog.log(`myAutorun(myComputed: ${value})`);\n\t\t}));\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.firstObserverAdded\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myComputed(myObservable: 0): start computing\",\n\t\t\t\"myComputed(myObservable: 0): finished computing\",\n\t\t\t\"myAutorun(myComputed: 0)\"\n\t\t]);\n\n\t\tmyObservable.set(1, undefined);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.set (value 1)\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myComputed(myObservable: 1): start computing\",\n\t\t\t\"myObservable.set (value 2)\",\n\t\t\t\"myComputed(myObservable: 1): finished computing\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myComputed(myObservable: 2): start computing\",\n\t\t\t\"myObservable.set (value 3)\",\n\t\t\t\"myComputed(myObservable: 2): finished computing\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myComputed(myObservable: 3): start computing\",\n\t\t\t\"myComputed(myObservable: 3): finished computing\",\n\t\t\t\"myAutorun(myComputed: 3)\",\n\t\t]);\n\t});\n\n\ttest('set dependency in autorun', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst value = myObservable.read(reader);\n\t\t\tlog.log(`myAutorun(myObservable: ${value}): start`);\n\t\t\tif (value !== 0 && value < 4) {\n\t\t\t\tmyObservable.set(value + 1, undefined);\n\t\t\t}\n\t\t\tlog.log(`myAutorun(myObservable: ${value}): end`);\n\t\t}));\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.firstObserverAdded\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 0): start\",\n\t\t\t\"myAutorun(myObservable: 0): end\",\n\t\t]);\n\n\t\tmyObservable.set(1, undefined);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.set (value 1)\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 1): start\",\n\t\t\t\"myObservable.set (value 2)\",\n\t\t\t\"myAutorun(myObservable: 1): end\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 2): start\",\n\t\t\t\"myObservable.set (value 3)\",\n\t\t\t\"myAutorun(myObservable: 2): end\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 3): start\",\n\t\t\t\"myObservable.set (value 4)\",\n\t\t\t\"myAutorun(myObservable: 3): end\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 4): start\",\n\t\t\t\"myAutorun(myObservable: 4): end\",\n\t\t]);\n\t});\n\n\ttest('get in transaction between sets', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\tconst myDerived1 = derived(reader => {\n\t\t\t/** @description myDerived1 */\n\t\t\tconst value = myObservable.read(reader);\n\t\t\tlog.log(`myDerived1(myObservable: ${value}): start computing`);\n\t\t\treturn value;\n\t\t});\n\n\t\tconst myDerived2 = derived(reader => {\n\t\t\t/** @description myDerived2 */\n\t\t\tconst value = myDerived1.read(reader);\n\t\t\tlog.log(`myDerived2(myDerived1: ${value}): start computing`);\n\t\t\treturn value;\n\t\t});\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst value = myDerived2.read(reader);\n\t\t\tlog.log(`myAutorun(myDerived2: ${value})`);\n\t\t}));\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.firstObserverAdded\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myDerived1(myObservable: 0): start computing\",\n\t\t\t\"myDerived2(myDerived1: 0): start computing\",\n\t\t\t\"myAutorun(myDerived2: 0)\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable.set(1, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.set (value 1)\",\n\t\t\t]);\n\n\t\t\tmyDerived2.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.get\",\n\t\t\t\t\"myDerived1(myObservable: 1): start computing\",\n\t\t\t\t\"myDerived2(myDerived1: 1): start computing\",\n\t\t\t]);\n\n\t\t\tmyObservable.set(2, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.set (value 2)\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.get\",\n\t\t\t\"myDerived1(myObservable: 2): start computing\",\n\t\t\t\"myDerived2(myDerived1: 2): start computing\",\n\t\t\t\"myAutorun(myDerived2: 2)\",\n\t\t]);\n\t});\n\n\ttest('bug: Dont reset states', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable1 = new LoggingObservableValue('myObservable1', 0, log);\n\n\t\tconst myObservable2 = new LoggingObservableValue('myObservable2', 0, log);\n\t\tconst myDerived2 = derived(reader => {\n\t\t\t/** @description myDerived2 */\n\t\t\tconst val = myObservable2.read(reader);\n\t\t\tlog.log(`myDerived2.computed(myObservable2: ${val})`);\n\t\t\treturn val % 10;\n\t\t});\n\n\t\tconst myDerived3 = derived(reader => {\n\t\t\t/** @description myDerived3 */\n\t\t\tconst val1 = myObservable1.read(reader);\n\t\t\tconst val2 = myDerived2.read(reader);\n\t\t\tlog.log(`myDerived3.computed(myDerived1: ${val1}, myDerived2: ${val2})`);\n\t\t\treturn `${val1} + ${val2}`;\n\t\t});\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst val = myDerived3.read(reader);\n\t\t\tlog.log(`myAutorun(myDerived3: ${val})`);\n\t\t}));\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable1.firstObserverAdded\",\n\t\t\t\"myObservable1.get\",\n\t\t\t\"myObservable2.firstObserverAdded\",\n\t\t\t\"myObservable2.get\",\n\t\t\t\"myDerived2.computed(myObservable2: 0)\",\n\t\t\t\"myDerived3.computed(myDerived1: 0, myDerived2: 0)\",\n\t\t\t\"myAutorun(myDerived3: 0 + 0)\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable1.set(1, tx); // Mark myDerived 3 as stale\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable1.set (value 1)\",\n\t\t\t]);\n\n\t\t\tmyObservable2.set(10, tx); // This is a non-change. myDerived3 should not be marked as possibly-depedency-changed!\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable2.set (value 10)\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable1.get\",\n\t\t\t\"myObservable2.get\",\n\t\t\t\"myDerived2.computed(myObservable2: 10)\",\n\t\t\t'myDerived3.computed(myDerived1: 1, myDerived2: 0)',\n\t\t\t'myAutorun(myDerived3: 1 + 0)',\n\t\t]);\n\t});\n\n\ttest('bug: Add observable in endUpdate', () => {\n\t\tconst myObservable1 = observableValue('myObservable1', 0);\n\t\tconst myObservable2 = observableValue('myObservable2', 0);\n\n\t\tconst myDerived1 = derived(reader => {\n\t\t\t/** @description myDerived1 */\n\t\t\treturn myObservable1.read(reader);\n\t\t});\n\n\t\tconst myDerived2 = derived(reader => {\n\t\t\t/** @description myDerived2 */\n\t\t\treturn myObservable2.read(reader);\n\t\t});\n\n\t\tconst myDerivedA1 = derived(reader => /** @description myDerivedA1 */ {\n\t\t\tconst d1 = myDerived1.read(reader);\n\t\t\tif (d1 === 1) {\n\t\t\t\t// This adds an observer while myDerived is still in update mode.\n\t\t\t\t// When myDerived exits update mode, the observer shouldn't receive\n\t\t\t\t// more endUpdate than beginUpdate calls.\n\t\t\t\tmyDerived2.read(reader);\n\t\t\t}\n\t\t});\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun1 */\n\t\t\tmyDerivedA1.read(reader);\n\t\t}));\n\n\t\tds.add(autorun(reader => {\n\t\t\t/** @description myAutorun2 */\n\t\t\tmyDerived2.read(reader);\n\t\t}));\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable1.set(1, tx);\n\t\t\tmyObservable2.set(1, tx);\n\t\t});\n\t});\n\n\ttest('bug: fromObservableLight doesnt subscribe', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\tconst myDerived = derived(reader => /** @description myDerived */ {\n\t\t\tconst val = myObservable.read(reader);\n\t\t\tlog.log(`myDerived.computed(myObservable2: ${val})`);\n\t\t\treturn val % 10;\n\t\t});\n\n\t\tconst e = Event.fromObservableLight(myDerived);\n\t\tlog.log('event created');\n\t\te(() => {\n\t\t\tlog.log('event fired');\n\t\t});\n\n\t\tmyObservable.set(1, undefined);\n\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'event created',\n\t\t\t'myObservable.firstObserverAdded',\n\t\t\t'myObservable.get',\n\t\t\t'myDerived.computed(myObservable2: 0)',\n\t\t\t'myObservable.set (value 1)',\n\t\t\t'myObservable.get',\n\t\t\t'myDerived.computed(myObservable2: 1)',\n\t\t\t'event fired',\n\t\t]);\n\t});\n\n\ttest('bug: Event.fromObservable always should get events', () => {\n\t\tconst emitter = new Emitter();\n\t\tconst log = new Log();\n\t\tlet i = 0;\n\t\tconst obs = observableFromEvent(emitter.event, () => i);\n\n\t\ti++;\n\t\temitter.fire(1);\n\n\t\tconst evt2 = Event.fromObservable(obs);\n\t\tconst d = evt2(e => {\n\t\t\tlog.log(`event fired ${e}`);\n\t\t});\n\n\t\ti++;\n\t\temitter.fire(2);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\"event fired 2\"]);\n\n\t\ti++;\n\t\temitter.fire(3);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\"event fired 3\"]);\n\n\t\td.dispose();\n\t});\n\n\ttest('dont run autorun after dispose', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\tconst d = autorun(reader => {\n\t\t\t/** @description update */\n\t\t\tconst v = myObservable.read(reader);\n\t\t\tlog.log('autorun, myObservable:' + v);\n\t\t});\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable.set(1, tx);\n\t\t\td.dispose();\n\t\t});\n\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'myObservable.firstObserverAdded',\n\t\t\t'myObservable.get',\n\t\t\t'autorun, myObservable:0',\n\t\t\t'myObservable.set (value 1)',\n\t\t\t'myObservable.lastObserverRemoved',\n\t\t]);\n\t});\n\n\tsuite('waitForState', () => {\n\t\ttest('resolve', async () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = new LoggingObservableValue('myObservable', { state: 'initializing' as 'initializing' | 'ready' | 'error' }, log);\n\n\t\t\tconst p = waitForState(myObservable, p => p.state === 'ready', p => p.state === 'error').then(r => {\n\t\t\t\tlog.log(`resolved ${JSON.stringify(r)}`);\n\t\t\t}, (err) => {\n\t\t\t\tlog.log(`rejected ${JSON.stringify(err)}`);\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'myObservable.firstObserverAdded',\n\t\t\t\t'myObservable.get',\n\t\t\t]);\n\n\t\t\tmyObservable.set({ state: 'ready' }, undefined);\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'myObservable.set (value [object Object])',\n\t\t\t\t'myObservable.get',\n\t\t\t\t'myObservable.lastObserverRemoved',\n\t\t\t]);\n\n\t\t\tawait p;\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'resolved {\\\"state\\\":\\\"ready\\\"}',\n\t\t\t]);\n\t\t});\n\n\t\ttest('resolveImmediate', async () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = new LoggingObservableValue('myObservable', { state: 'ready' as 'initializing' | 'ready' | 'error' }, log);\n\n\t\t\tconst p = waitForState(myObservable, p => p.state === 'ready', p => p.state === 'error').then(r => {\n\t\t\t\tlog.log(`resolved ${JSON.stringify(r)}`);\n\t\t\t}, (err) => {\n\t\t\t\tlog.log(`rejected ${JSON.stringify(err)}`);\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'myObservable.firstObserverAdded',\n\t\t\t\t'myObservable.get',\n\t\t\t\t'myObservable.lastObserverRemoved',\n\t\t\t]);\n\n\t\t\tmyObservable.set({ state: 'error' }, undefined);\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'myObservable.set (value [object Object])',\n\t\t\t]);\n\n\t\t\tawait p;\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'resolved {\\\"state\\\":\\\"ready\\\"}',\n\t\t\t]);\n\t\t});\n\n\t\ttest('reject', async () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = new LoggingObservableValue('myObservable', { state: 'initializing' as 'initializing' | 'ready' | 'error' }, log);\n\n\t\t\tconst p = waitForState(myObservable, p => p.state === 'ready', p => p.state === 'error').then(r => {\n\t\t\t\tlog.log(`resolved ${JSON.stringify(r)}`);\n\t\t\t}, (err) => {\n\t\t\t\tlog.log(`rejected ${JSON.stringify(err)}`);\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'myObservable.firstObserverAdded',\n\t\t\t\t'myObservable.get',\n\t\t\t]);\n\n\t\t\tmyObservable.set({ state: 'error' }, undefined);\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'myObservable.set (value [object Object])',\n\t\t\t\t'myObservable.get',\n\t\t\t\t'myObservable.lastObserverRemoved',\n\t\t\t]);\n\n\t\t\tawait p;\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'rejected {\\\"state\\\":\\\"error\\\"}'\n\t\t\t]);\n\t\t});\n\n\t\ttest('derived as lazy', () => {\n\t\t\tconst store = new DisposableStore();\n\t\t\tconst log = new Log();\n\t\t\tlet i = 0;\n\t\t\tconst d = derivedDisposable(() => {\n\t\t\t\tconst id = i++;\n\t\t\t\tlog.log('myDerived ' + id);\n\t\t\t\treturn {\n\t\t\t\t\tdispose: () => log.log(`disposed ${id}`)\n\t\t\t\t};\n\t\t\t});\n\n\t\t\td.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myDerived 0', 'disposed 0']);\n\t\t\td.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myDerived 1', 'disposed 1']);\n\n\t\t\td.keepObserved(store);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\td.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myDerived 2']);\n\t\t\td.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\tstore.dispose();\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['disposed 2']);\n\t\t});\n\t});\n\n\ttest('observableValue', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable1 = observableValue<number>('myObservable1', 0);\n\t\tconst myObservable2 = observableValue<number, { message: string }>('myObservable2', 0);\n\n\t\tconst d = autorun(reader => {\n\t\t\t/** @description update */\n\t\t\tconst v1 = myObservable1.read(reader);\n\t\t\tconst v2 = myObservable2.read(reader);\n\t\t\tlog.log('autorun, myObservable1:' + v1 + ', myObservable2:' + v2);\n\t\t});\n\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'autorun, myObservable1:0, myObservable2:0'\n\t\t]);\n\n\t\t// Doesn't trigger the autorun, because no delta was provided and the value did not change\n\t\tmyObservable1.set(0, undefined);\n\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t]);\n\n\t\t// Triggers the autorun. The value did not change, but a delta value was provided\n\t\tmyObservable2.set(0, undefined, { message: 'change1' });\n\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'autorun, myObservable1:0, myObservable2:0'\n\t\t]);\n\n\t\td.dispose();\n\t});\n\n\tsuite('autorun error handling', () => {\n\t\ttest('immediate throw', () => {\n\t\t\tconst log = new Log();\n\n\t\t\tsetUnexpectedErrorHandler(e => {\n\t\t\t\tlog.log(`error: ${e.message}`);\n\t\t\t});\n\n\t\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\t\tconst d = autorun(reader => {\n\t\t\t\tmyObservable.read(reader);\n\t\t\t\tthrow new Error('foobar');\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.firstObserverAdded\",\n\t\t\t\t\"myObservable.get\",\n\t\t\t\t\"error: foobar\"\n\t\t\t]);\n\n\t\t\tmyObservable.set(1, undefined);\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.set (value 1)\",\n\t\t\t\t\"myObservable.get\",\n\t\t\t\t\"error: foobar\",\n\t\t\t]);\n\n\t\t\td.dispose();\n\t\t});\n\n\t\ttest('late throw', () => {\n\t\t\tconst log = new Log();\n\n\t\t\tsetUnexpectedErrorHandler(e => {\n\t\t\t\tlog.log(`error: ${e.message}`);\n\t\t\t});\n\n\t\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\t\tconst d = autorun(reader => {\n\t\t\t\tconst value = myObservable.read(reader);\n\t\t\t\tif (value >= 1) {\n\t\t\t\t\tthrow new Error('foobar');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.firstObserverAdded\",\n\t\t\t\t\"myObservable.get\",\n\t\t\t]);\n\n\t\t\tmyObservable.set(1, undefined);\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.set (value 1)\",\n\t\t\t\t\"myObservable.get\",\n\t\t\t\t\"error: foobar\",\n\t\t\t]);\n\n\t\t\tmyObservable.set(2, undefined);\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.set (value 2)\",\n\t\t\t\t\"myObservable.get\",\n\t\t\t\t\"error: foobar\",\n\t\t\t]);\n\n\t\t\td.dispose();\n\t\t});\n\t});\n});\n\nexport class LoggingObserver implements IObserver {\n\tprivate count = 0;\n\n\tconstructor(public readonly debugName: string, private readonly log: Log) {\n\t}\n\n\tbeginUpdate<T>(observable: IObservable<T, void>): void {\n\t\tthis.count++;\n\t\tthis.log.log(`${this.debugName}.beginUpdate (count ${this.count})`);\n\t}\n\tendUpdate<T>(observable: IObservable<T, void>): void {\n\t\tthis.log.log(`${this.debugName}.endUpdate (count ${this.count})`);\n\t\tthis.count--;\n\t}\n\thandleChange<T, TChange>(observable: IObservable<T, TChange>, change: TChange): void {\n\t\tthis.log.log(`${this.debugName}.handleChange (count ${this.count})`);\n\t}\n\thandlePossibleChange<T>(observable: IObservable<T, unknown>): void {\n\t\tthis.log.log(`${this.debugName}.handlePossibleChange`);\n\t}\n}\n\nexport class LoggingObservableValue<T, TChange = void>\n\textends BaseObservable<T, TChange>\n\timplements ISettableObservable<T, TChange> {\n\tprivate value: T;\n\n\tconstructor(public readonly debugName: string, initialValue: T, private readonly log: Log) {\n\t\tsuper();\n\t\tthis.value = initialValue;\n\t}\n\n\tprotected override onFirstObserverAdded(): void {\n\t\tthis.log.log(`${this.debugName}.firstObserverAdded`);\n\t}\n\n\tprotected override onLastObserverRemoved(): void {\n\t\tthis.log.log(`${this.debugName}.lastObserverRemoved`);\n\t}\n\n\tpublic get(): T {\n\t\tthis.log.log(`${this.debugName}.get`);\n\t\treturn this.value;\n\t}\n\n\tpublic set(value: T, tx: ITransaction | undefined, change: TChange): void {\n\t\tif (this.value === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!tx) {\n\t\t\ttransaction((tx) => {\n\t\t\t\tthis.set(value, tx, change);\n\t\t\t}, () => `Setting ${this.debugName}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log.log(`${this.debugName}.set (value ${value})`);\n\n\t\tthis.value = value;\n\n\t\tfor (const observer of this.observers) {\n\t\t\ttx.updateObserver(observer, this);\n\t\t\tobserver.handleChange(this, change);\n\t\t}\n\t}\n\n\toverride toString(): string {\n\t\treturn `${this.debugName}: ${this.value}`;\n\t}\n}\n\nclass Log {\n\tprivate readonly entries: string[] = [];\n\tpublic log(message: string): void {\n\t\tthis.entries.push(message);\n\t}\n\n\tpublic getAndClearEntries(): string[] {\n\t\tconst entries = [...this.entries];\n\t\tthis.entries.length = 0;\n\t\treturn entries;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["p", "tx"]
}
