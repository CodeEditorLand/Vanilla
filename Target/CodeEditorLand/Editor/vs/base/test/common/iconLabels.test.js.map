{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/iconLabels.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IMatch } from '../../common/filters.js';\nimport { escapeIcons, getCodiconAriaLabel, IParsedLabelWithIcons, markdownEscapeEscapedIcons, matchesFuzzyIconAware, parseLabelWithIcons, stripIcons } from '../../common/iconLabels.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\ninterface IIconFilter {\n\t// Returns null if word doesn't match.\n\t(query: string, target: IParsedLabelWithIcons): IMatch[] | null;\n}\n\nfunction filterOk(filter: IIconFilter, word: string, target: IParsedLabelWithIcons, highlights?: { start: number; end: number }[]) {\n\tconst r = filter(word, target);\n\tassert(r);\n\tif (highlights) {\n\t\tassert.deepStrictEqual(r, highlights);\n\t}\n}\n\nsuite('Icon Labels', () => {\n\ttest('Can get proper aria labels', () => {\n\t\t// note, the spaces in the results are important\n\t\tconst testCases = new Map<string, string>([\n\t\t\t['', ''],\n\t\t\t['asdf', 'asdf'],\n\t\t\t['asdf$(squirrel)asdf', 'asdf squirrel asdf'],\n\t\t\t['asdf $(squirrel) asdf', 'asdf  squirrel  asdf'],\n\t\t\t['$(rocket)asdf', 'rocket asdf'],\n\t\t\t['$(rocket) asdf', 'rocket  asdf'],\n\t\t\t['$(rocket)$(rocket)$(rocket)asdf', 'rocket  rocket  rocket asdf'],\n\t\t\t['$(rocket) asdf $(rocket)', 'rocket  asdf  rocket'],\n\t\t\t['$(rocket)asdf$(rocket)', 'rocket asdf rocket'],\n\t\t]);\n\n\t\tfor (const [input, expected] of testCases) {\n\t\t\tassert.strictEqual(getCodiconAriaLabel(input), expected);\n\t\t}\n\t});\n\n\ttest('matchesFuzzyIconAware', () => {\n\n\t\t// Camel Case\n\n\t\tfilterOk(matchesFuzzyIconAware, 'ccr', parseLabelWithIcons('$(codicon)CamelCaseRocks$(codicon)'), [\n\t\t\t{ start: 10, end: 11 },\n\t\t\t{ start: 15, end: 16 },\n\t\t\t{ start: 19, end: 20 }\n\t\t]);\n\n\t\tfilterOk(matchesFuzzyIconAware, 'ccr', parseLabelWithIcons('$(codicon) CamelCaseRocks $(codicon)'), [\n\t\t\t{ start: 11, end: 12 },\n\t\t\t{ start: 16, end: 17 },\n\t\t\t{ start: 20, end: 21 }\n\t\t]);\n\n\t\tfilterOk(matchesFuzzyIconAware, 'iut', parseLabelWithIcons('$(codicon) Indent $(octico) Using $(octic) Tpaces'), [\n\t\t\t{ start: 11, end: 12 },\n\t\t\t{ start: 28, end: 29 },\n\t\t\t{ start: 43, end: 44 },\n\t\t]);\n\n\t\t// Prefix\n\n\t\tfilterOk(matchesFuzzyIconAware, 'using', parseLabelWithIcons('$(codicon) Indent Using Spaces'), [\n\t\t\t{ start: 18, end: 23 },\n\t\t]);\n\n\t\t// Broken Codicon\n\n\t\tfilterOk(matchesFuzzyIconAware, 'codicon', parseLabelWithIcons('This $(codicon Indent Using Spaces'), [\n\t\t\t{ start: 7, end: 14 },\n\t\t]);\n\n\t\tfilterOk(matchesFuzzyIconAware, 'indent', parseLabelWithIcons('This $codicon Indent Using Spaces'), [\n\t\t\t{ start: 14, end: 20 },\n\t\t]);\n\n\t\t// Testing #59343\n\t\tfilterOk(matchesFuzzyIconAware, 'unt', parseLabelWithIcons('$(primitive-dot) $(file-text) Untitled-1'), [\n\t\t\t{ start: 30, end: 33 },\n\t\t]);\n\n\t\t// Testing #136172\n\t\tfilterOk(matchesFuzzyIconAware, 's', parseLabelWithIcons('$(loading~spin) start'), [\n\t\t\t{ start: 16, end: 17 },\n\t\t]);\n\t});\n\n\ttest('stripIcons', () => {\n\t\tassert.strictEqual(stripIcons('Hello World'), 'Hello World');\n\t\tassert.strictEqual(stripIcons('$(Hello World'), '$(Hello World');\n\t\tassert.strictEqual(stripIcons('$(Hello) World'), ' World');\n\t\tassert.strictEqual(stripIcons('$(Hello) W$(oi)rld'), ' Wrld');\n\t});\n\n\n\ttest('escapeIcons', () => {\n\t\tassert.strictEqual(escapeIcons('Hello World'), 'Hello World');\n\t\tassert.strictEqual(escapeIcons('$(Hello World'), '$(Hello World');\n\t\tassert.strictEqual(escapeIcons('$(Hello) World'), '\\\\$(Hello) World');\n\t\tassert.strictEqual(escapeIcons('\\\\$(Hello) W$(oi)rld'), '\\\\$(Hello) W\\\\$(oi)rld');\n\t});\n\n\ttest('markdownEscapeEscapedIcons', () => {\n\t\tassert.strictEqual(markdownEscapeEscapedIcons('Hello World'), 'Hello World');\n\t\tassert.strictEqual(markdownEscapeEscapedIcons('$(Hello) World'), '$(Hello) World');\n\t\tassert.strictEqual(markdownEscapeEscapedIcons('\\\\$(Hello) World'), '\\\\\\\\$(Hello) World');\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
